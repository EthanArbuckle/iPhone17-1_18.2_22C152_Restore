void sub_336548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_3023FC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_33655C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v5 = a3;
    uint64_t v6 = *(void *)(a1 + 8);
    if (a3 == v6)
    {
      uint64_t v8 = a2;
    }
    else
    {
      uint64_t v7 = (a3 - a2) >> 6 << 6;
      uint64_t v8 = a2;
      do
      {
        if (*(char *)(v8 + 23) < 0) {
          operator delete(*(void **)v8);
        }
        v11 = (unsigned char *)(v8 + v7);
        long long v12 = *(_OWORD *)(v8 + v7);
        *(void *)(v8 + 16) = *(void *)(v8 + v7 + 16);
        *(_OWORD *)uint64_t v8 = v12;
        v11[23] = 0;
        unsigned char *v11 = 0;
        *(_OWORD *)(v8 + 24) = *(_OWORD *)(v8 + v7 + 24);
        v13 = (void **)(v8 + 40);
        if (*(char *)(v8 + 63) < 0) {
          operator delete(*v13);
        }
        uint64_t v9 = v8 + v7;
        long long v10 = *(_OWORD *)(v8 + v7 + 40);
        *(void *)(v8 + 56) = *(void *)(v8 + v7 + 56);
        *(_OWORD *)v13 = v10;
        *(unsigned char *)(v9 + 63) = 0;
        *(unsigned char *)(v9 + 40) = 0;
        v8 += 64;
      }
      while (v8 + v7 != v6);
      uint64_t v5 = *(void *)(a1 + 8);
    }
    while (1)
    {
      if (v5 == v8)
      {
        *(void *)(a1 + 8) = v8;
        return a2;
      }
      if (*(char *)(v5 - 1) < 0)
      {
        operator delete(*(void **)(v5 - 24));
        if ((*(char *)(v5 - 41) & 0x80000000) == 0) {
          goto LABEL_11;
        }
      }
      else if ((*(char *)(v5 - 41) & 0x80000000) == 0)
      {
        goto LABEL_11;
      }
      operator delete(*(void **)(v5 - 64));
LABEL_11:
      v5 -= 64;
    }
  }
  return a2;
}

uint64_t sub_336688(uint64_t result, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  long long v10 = (long long *)result;
LABEL_2:
  uint64_t v29 = (uint64_t)a2 - 648;
  v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    long long v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = 0x2C3F35BA781948B1 * (v14 >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          result = sub_358F0C(v29, (uint64_t)v10);
          if (result)
          {
            result = sub_338A24(v10, v29);
          }
          break;
        case 3uLL:
          result = sub_337984(v10, (long long *)((char *)v10 + 648), v29);
          break;
        case 4uLL:
          result = sub_339074(v10, (long long *)((char *)v10 + 648), v10 + 81, v29);
          break;
        case 5uLL:
          result = sub_339120(v10, (long long *)((char *)v10 + 648), v10 + 81, (long long *)((char *)v10 + 1944), v29);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 15551) {
      break;
    }
    if (v12 == 1)
    {
      if (v10 != a2)
      {
        unint64_t v24 = (v15 - 2) >> 1;
        unint64_t v25 = v24 + 1;
        uint64_t v26 = (uint64_t)v10 + 648 * v24;
        do
        {
          sub_3391F8((uint64_t)v10, a3, 0x2C3F35BA781948B1 * (v14 >> 3), v26);
          v26 -= 648;
          --v25;
        }
        while (v25);
        unint64_t v27 = v14 / 0x288uLL;
        do
        {
          result = sub_3396D0((uint64_t)v10, (uint64_t)a2, a3, v27);
          a2 = (long long *)((char *)a2 - 648);
        }
        while (v27-- > 2);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    v17 = (long long *)((char *)v10 + 648 * (v15 >> 1));
    if ((unint64_t)v14 < 0x14401)
    {
      sub_337984(v17, v10, v29);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_337984(v10, v17, v29);
      uint64_t v18 = 648 * v16;
      v19 = (long long *)((char *)v10 + 648 * v16 - 648);
      sub_337984((long long *)((char *)v10 + 648), v19, (uint64_t)(a2 - 81));
      v20 = (long long *)((char *)v10 + v18 + 648);
      sub_337984(v10 + 81, v20, (uint64_t)a2 - 1944);
      sub_337984(v19, v17, (uint64_t)v20);
      sub_338A24(v10, (uint64_t)v17);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (!sub_358F0C((uint64_t)v10 - 648, (uint64_t)v10))
    {
      result = (uint64_t)sub_337A7C((uint64_t)v10, (unint64_t)a2);
      v11 = (long long *)result;
      goto LABEL_18;
    }
LABEL_13:
    v21 = (long long *)sub_337F60(v10, (unint64_t)a2);
    if ((v22 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v23 = sub_338440(v10, v21);
    v11 = (long long *)((char *)v21 + 648);
    result = sub_338440((long long *)((char *)v21 + 648), a2);
    if (result)
    {
      a4 = -v13;
      a2 = v21;
      if (v23) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v23)
    {
LABEL_16:
      result = sub_336688(v10, v21, a3, -v13, a5 & 1);
      v11 = (long long *)((char *)v21 + 648);
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return sub_336AE4((uint64_t)v10, (uint64_t)a2);
  }
  else
  {
    return sub_33724C((uint64_t)v10, (uint64_t)a2);
  }
}

uint64_t sub_336AE4(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    uint64_t v4 = result + 648;
    if (result + 648 != a2)
    {
      uint64_t v5 = result;
      while (1)
      {
        uint64_t v6 = v4;
        result = sub_358F0C(v4, v5);
        if (result) {
          break;
        }
LABEL_6:
        uint64_t v4 = v6 + 648;
        uint64_t v5 = v6;
        if (v6 + 648 == v2) {
          return result;
        }
      }
      long long v48 = *(_OWORD *)v6;
      uint64_t v49 = *(void *)(v5 + 664);
      *(void *)(v6 + 8) = 0;
      *(void *)(v6 + 16) = 0;
      *(void *)uint64_t v6 = 0;
      long long v7 = *(_OWORD *)(v5 + 688);
      long long v50 = *(_OWORD *)(v5 + 672);
      long long v51 = v7;
      uint64_t v52 = *(void *)(v5 + 704);
      *(void *)(v5 + 704) = 0;
      *(void *)(v5 + 696) = 0;
      *(void *)(v5 + 688) = 0;
      long long v53 = *(_OWORD *)(v5 + 712);
      uint64_t v54 = *(void *)(v5 + 728);
      *(void *)(v5 + 720) = 0;
      *(void *)(v5 + 728) = 0;
      *(void *)(v5 + 712) = 0;
      int v55 = *(_DWORD *)(v5 + 736);
      uint64_t v57 = *(void *)(v5 + 760);
      long long v56 = *(_OWORD *)(v5 + 744);
      *(void *)(v5 + 752) = 0;
      *(void *)(v5 + 744) = 0;
      *(void *)(v5 + 760) = 0;
      uint64_t v59 = *(void *)(v5 + 784);
      long long v58 = *(_OWORD *)(v5 + 768);
      *(void *)(v5 + 776) = 0;
      *(void *)(v5 + 768) = 0;
      *(void *)(v5 + 784) = 0;
      long long v8 = *(_OWORD *)(v5 + 792);
      int v61 = *(_DWORD *)(v5 + 808);
      long long v60 = v8;
      long long v9 = *(_OWORD *)(v5 + 816);
      uint64_t v63 = *(void *)(v5 + 832);
      long long v62 = v9;
      *(void *)(v5 + 824) = 0;
      *(void *)(v5 + 816) = 0;
      *(void *)(v5 + 832) = 0;
      long long v64 = *(_OWORD *)(v5 + 840);
      uint64_t v65 = *(void *)(v5 + 856);
      *(void *)(v5 + 840) = 0;
      *(void *)(v5 + 848) = 0;
      *(void *)(v5 + 856) = 0;
      uint64_t v66 = *(void *)(v5 + 864);
      long long v67 = *(_OWORD *)(v5 + 872);
      uint64_t v68 = *(void *)(v5 + 888);
      *(void *)(v5 + 872) = 0;
      *(void *)(v5 + 880) = 0;
      *(void *)(v5 + 888) = 0;
      long long v69 = *(_OWORD *)(v5 + 896);
      uint64_t v70 = *(void *)(v5 + 912);
      *(void *)(v5 + 904) = 0;
      *(void *)(v5 + 896) = 0;
      *(void *)(v5 + 912) = 0;
      char v71 = *(unsigned char *)(v5 + 920);
      long long v10 = *(_OWORD *)(v5 + 944);
      long long v72 = *(_OWORD *)(v5 + 928);
      long long v73 = v10;
      uint64_t v74 = *(void *)(v5 + 960);
      long long v75 = *(_OWORD *)(v5 + 968);
      uint64_t v76 = *(void *)(v5 + 984);
      *(void *)(v5 + 976) = 0;
      *(void *)(v5 + 984) = 0;
      *(void *)(v5 + 968) = 0;
      long long v11 = *(_OWORD *)(v5 + 1040);
      long long v79 = *(_OWORD *)(v5 + 1024);
      long long v80 = v11;
      uint64_t v81 = *(void *)(v5 + 1056);
      long long v12 = *(_OWORD *)(v5 + 1008);
      long long v77 = *(_OWORD *)(v5 + 992);
      long long v78 = v12;
      char v82 = *(unsigned char *)(v5 + 1064);
      v83[0] = *(_OWORD *)(v5 + 1072);
      *(_OWORD *)((char *)v83 + 12) = *(_OWORD *)(v5 + 1084);
      long long __p = *(_OWORD *)(v5 + 1104);
      uint64_t v85 = *(void *)(v5 + 1120);
      *(void *)(v5 + 1112) = 0;
      *(void *)(v5 + 1104) = 0;
      *(void *)(v5 + 1120) = 0;
      v86[0] = *(unsigned char *)(v5 + 1128);
      long long v87 = *(_OWORD *)(v5 + 1136);
      uint64_t v88 = *(void *)(v5 + 1152);
      *(void *)(v5 + 1144) = 0;
      *(void *)(v5 + 1136) = 0;
      *(void *)(v5 + 1152) = 0;
      long long v89 = *(_OWORD *)(v5 + 1160);
      uint64_t v90 = *(void *)(v5 + 1176);
      *(void *)(v5 + 1160) = 0;
      *(void *)(v5 + 1168) = 0;
      *(void *)(v5 + 1176) = 0;
      int v91 = *(_DWORD *)(v5 + 1184);
      long long v92 = *(_OWORD *)(v5 + 1192);
      uint64_t v93 = *(void *)(v5 + 1208);
      *(void *)(v5 + 1192) = 0;
      *(void *)(v5 + 1200) = 0;
      *(void *)(v5 + 1208) = 0;
      long long v94 = *(_OWORD *)(v5 + 1216);
      uint64_t v95 = *(void *)(v5 + 1232);
      *(void *)(v5 + 1224) = 0;
      *(void *)(v5 + 1216) = 0;
      *(void *)(v5 + 1232) = 0;
      long long v96 = *(_OWORD *)(v5 + 1240);
      uint64_t v97 = *(void *)(v5 + 1256);
      *(void *)(v5 + 1248) = 0;
      *(void *)(v5 + 1240) = 0;
      *(void *)(v5 + 1256) = 0;
      long long v13 = *(_OWORD *)(v5 + 1280);
      uint64_t v14 = v6;
      long long v98 = *(_OWORD *)(v5 + 1264);
      long long v99 = v13;
      while (1)
      {
        uint64_t v15 = v5;
        sub_301388((char **)v14, v5);
        unint64_t v16 = (_OWORD *)(v5 + 424);
        *(_OWORD *)(v14 + 424) = *(_OWORD *)(v5 + 424);
        *(_OWORD *)(v14 + 436) = *(_OWORD *)(v5 + 436);
        uint64_t v17 = *(void *)(v14 + 456);
        if (v17)
        {
          uint64_t v18 = (void **)(v14 + 456);
          uint64_t v19 = *(void *)(v14 + 464);
          v20 = *(void **)(v14 + 456);
          if (v19 != v17)
          {
            do
              uint64_t v19 = sub_30328C(v19 - 184);
            while (v19 != v17);
            v20 = *v18;
          }
          *(void *)(v14 + 464) = v17;
          operator delete(v20);
          *uint64_t v18 = 0;
          *(void *)(v14 + 464) = 0;
          *(void *)(v14 + 472) = 0;
        }
        *(void *)(v14 + 456) = *(void *)(v15 + 456);
        *(void *)(v14 + 464) = *(void *)(v15 + 464);
        *(void *)(v14 + 472) = *(void *)(v15 + 472);
        *(void *)(v15 + 456) = 0;
        *(void *)(v15 + 464) = 0;
        *(void *)(v15 + 472) = 0;
        *(unsigned char *)(v14 + 480) = *(unsigned char *)(v15 + 480);
        uint64_t v21 = *(void *)(v14 + 488);
        if (v21) {
          break;
        }
LABEL_25:
        *(void *)(v14 + 488) = *(void *)(v15 + 488);
        *(void *)(v14 + 496) = *(void *)(v15 + 496);
        *(void *)(v14 + 504) = *(void *)(v15 + 504);
        *(void *)(v15 + 488) = 0;
        *(void *)(v15 + 496) = 0;
        *(void *)(v15 + 504) = 0;
        uint64_t v25 = *(void *)(v14 + 512);
        if (!v25) {
          goto LABEL_36;
        }
        uint64_t v26 = (void **)(v14 + 512);
        uint64_t v27 = *(void *)(v14 + 520);
        v28 = *(void **)(v14 + 512);
        if (v27 != v25)
        {
          while (1)
          {
            if (*(char *)(v27 - 1) < 0)
            {
              operator delete(*(void **)(v27 - 24));
              if (*(char *)(v27 - 25) < 0) {
LABEL_33:
              }
                operator delete(*(void **)(v27 - 48));
            }
            else if (*(char *)(v27 - 25) < 0)
            {
              goto LABEL_33;
            }
            v27 -= 48;
            if (v27 == v25)
            {
              v28 = *v26;
              break;
            }
          }
        }
        *(void *)(v14 + 520) = v25;
        operator delete(v28);
        *uint64_t v26 = 0;
        *(void *)(v14 + 520) = 0;
        *(void *)(v14 + 528) = 0;
LABEL_36:
        *(_OWORD *)(v14 + 512) = *(_OWORD *)(v15 + 512);
        *(void *)(v14 + 528) = *(void *)(v15 + 528);
        *(void *)(v15 + 520) = 0;
        *(void *)(v15 + 512) = 0;
        *(void *)(v15 + 528) = 0;
        *(_DWORD *)(v14 + 536) = *(_DWORD *)(v15 + 536);
        uint64_t v29 = *(void *)(v14 + 544);
        if (!v29) {
          goto LABEL_47;
        }
        v30 = (void **)(v14 + 544);
        uint64_t v31 = *(void *)(v14 + 552);
        v32 = *(void **)(v14 + 544);
        if (v31 != v29)
        {
          while (1)
          {
            if (*(char *)(v31 - 1) < 0)
            {
              operator delete(*(void **)(v31 - 24));
              if (*(char *)(v31 - 25) < 0) {
LABEL_44:
              }
                operator delete(*(void **)(v31 - 48));
            }
            else if (*(char *)(v31 - 25) < 0)
            {
              goto LABEL_44;
            }
            v31 -= 48;
            if (v31 == v29)
            {
              v32 = *v30;
              break;
            }
          }
        }
        *(void *)(v14 + 552) = v29;
        operator delete(v32);
        *v30 = 0;
        *(void *)(v14 + 552) = 0;
        *(void *)(v14 + 560) = 0;
LABEL_47:
        *(_OWORD *)(v14 + 544) = *(_OWORD *)(v15 + 544);
        *(void *)(v14 + 560) = *(void *)(v15 + 560);
        *(void *)(v15 + 544) = 0;
        *(void *)(v15 + 552) = 0;
        *(void *)(v15 + 560) = 0;
        v33 = *(void **)(v14 + 568);
        if (v33)
        {
          v34 = (void **)(v14 + 568);
          v35 = *(void **)(v14 + 576);
          v36 = *(void **)(v14 + 568);
          if (v35 != v33)
          {
            do
              v35 = sub_3034C4(v35 - 10);
            while (v35 != v33);
            v36 = *v34;
          }
          *(void *)(v14 + 576) = v33;
          operator delete(v36);
          *v34 = 0;
          *(void *)(v14 + 576) = 0;
          *(void *)(v14 + 584) = 0;
        }
        *(void *)(v14 + 568) = *(void *)(v15 + 568);
        *(void *)(v14 + 576) = *(void *)(v15 + 576);
        *(void *)(v14 + 584) = *(void *)(v15 + 584);
        *(void *)(v15 + 568) = 0;
        *(void *)(v15 + 576) = 0;
        *(void *)(v15 + 584) = 0;
        v37 = (void **)(v14 + 592);
        if (*(char *)(v14 + 615) < 0) {
          operator delete(*v37);
        }
        *(_OWORD *)v37 = *(_OWORD *)(v15 + 592);
        *(void *)(v14 + 608) = *(void *)(v15 + 608);
        *(unsigned char *)(v15 + 615) = 0;
        *(unsigned char *)(v15 + 592) = 0;
        *(_OWORD *)(v14 + 616) = *(_OWORD *)(v15 + 616);
        *(_OWORD *)(v14 + 632) = *(_OWORD *)(v15 + 632);
        if (v15 == v3)
        {
          uint64_t v38 = v3;
          goto LABEL_58;
        }
        uint64_t v5 = v15 - 648;
        uint64_t v14 = v15;
        if (!sub_358F0C((uint64_t)&v48, v15 - 648))
        {
          uint64_t v38 = v15;
LABEL_58:
          v39 = (void **)(v15 + 456);
          sub_301388((char **)v38, (uint64_t)&v48);
          long long v40 = *(_OWORD *)((char *)v83 + 12);
          *unint64_t v16 = v83[0];
          *(_OWORD *)((char *)v16 + 12) = v40;
          uint64_t v41 = *(void *)(v15 + 456);
          if (v41)
          {
            uint64_t v42 = *(void *)(v38 + 464);
            v43 = *(void **)(v15 + 456);
            if (v42 != v41)
            {
              do
                uint64_t v42 = sub_30328C(v42 - 184);
              while (v42 != v41);
              v43 = *v39;
            }
            *(void *)(v38 + 464) = v41;
            operator delete(v43);
            *v39 = 0;
            *(void *)(v15 + 464) = 0;
            *(void *)(v15 + 472) = 0;
          }
          *v39 = (void *)__p;
          *(void *)(v38 + 464) = *((void *)&__p + 1);
          *(void *)(v38 + 472) = v85;
          long long __p = 0uLL;
          uint64_t v85 = 0;
          sub_303024(v15 + 480, (uint64_t)v86);
          sub_303198((uint64_t)v86);
          uint64_t v44 = __p;
          if ((void)__p)
          {
            uint64_t v45 = *((void *)&__p + 1);
            v46 = (void *)__p;
            if (*((void *)&__p + 1) != (void)__p)
            {
              do
                uint64_t v45 = sub_30328C(v45 - 184);
              while (v45 != v44);
              v46 = (void *)__p;
            }
            *((void *)&__p + 1) = v44;
            operator delete(v46);
          }
          result = sub_29D95C((uint64_t)&v48);
          uint64_t v2 = a2;
          goto LABEL_6;
        }
      }
      char v22 = (void **)(v14 + 488);
      uint64_t v23 = *(void *)(v14 + 496);
      unint64_t v24 = *(void **)(v14 + 488);
      if (v23 == v21)
      {
LABEL_24:
        *(void *)(v14 + 496) = v21;
        operator delete(v24);
        *char v22 = 0;
        *(void *)(v14 + 496) = 0;
        *(void *)(v14 + 504) = 0;
        goto LABEL_25;
      }
      while (1)
      {
        if (*(char *)(v23 - 1) < 0)
        {
          operator delete(*(void **)(v23 - 24));
          if (*(char *)(v23 - 25) < 0) {
LABEL_22:
          }
            operator delete(*(void **)(v23 - 48));
        }
        else if (*(char *)(v23 - 25) < 0)
        {
          goto LABEL_22;
        }
        v23 -= 48;
        if (v23 == v21)
        {
          unint64_t v24 = *v22;
          goto LABEL_24;
        }
      }
    }
  }
  return result;
}

void sub_337238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_301314((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_33724C(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    uint64_t v4 = result + 648;
    if (result + 648 != a2)
    {
      while (1)
      {
        uint64_t v5 = v4;
        result = sub_358F0C(v4, v3);
        if (result) {
          break;
        }
LABEL_6:
        uint64_t v4 = v5 + 648;
        uint64_t v3 = v5;
        if (v5 + 648 == v2) {
          return result;
        }
      }
      long long v46 = *(_OWORD *)v5;
      uint64_t v47 = *(void *)(v3 + 664);
      *(void *)(v5 + 8) = 0;
      *(void *)(v5 + 16) = 0;
      *(void *)uint64_t v5 = 0;
      long long v6 = *(_OWORD *)(v3 + 688);
      long long v48 = *(_OWORD *)(v3 + 672);
      long long v49 = v6;
      uint64_t v50 = *(void *)(v3 + 704);
      *(void *)(v3 + 704) = 0;
      *(void *)(v3 + 696) = 0;
      *(void *)(v3 + 688) = 0;
      long long v51 = *(_OWORD *)(v3 + 712);
      uint64_t v52 = *(void *)(v3 + 728);
      *(void *)(v3 + 720) = 0;
      *(void *)(v3 + 728) = 0;
      *(void *)(v3 + 712) = 0;
      int v53 = *(_DWORD *)(v3 + 736);
      uint64_t v55 = *(void *)(v3 + 760);
      long long v54 = *(_OWORD *)(v3 + 744);
      *(void *)(v3 + 752) = 0;
      *(void *)(v3 + 744) = 0;
      *(void *)(v3 + 760) = 0;
      uint64_t v57 = *(void *)(v3 + 784);
      long long v56 = *(_OWORD *)(v3 + 768);
      *(void *)(v3 + 776) = 0;
      *(void *)(v3 + 768) = 0;
      *(void *)(v3 + 784) = 0;
      long long v7 = *(_OWORD *)(v3 + 792);
      int v59 = *(_DWORD *)(v3 + 808);
      long long v58 = v7;
      long long v8 = *(_OWORD *)(v3 + 816);
      uint64_t v61 = *(void *)(v3 + 832);
      long long v60 = v8;
      *(void *)(v3 + 824) = 0;
      *(void *)(v3 + 816) = 0;
      *(void *)(v3 + 832) = 0;
      long long v62 = *(_OWORD *)(v3 + 840);
      uint64_t v63 = *(void *)(v3 + 856);
      *(void *)(v3 + 840) = 0;
      *(void *)(v3 + 848) = 0;
      *(void *)(v3 + 856) = 0;
      uint64_t v64 = *(void *)(v3 + 864);
      long long v65 = *(_OWORD *)(v3 + 872);
      uint64_t v66 = *(void *)(v3 + 888);
      *(void *)(v3 + 872) = 0;
      *(void *)(v3 + 880) = 0;
      *(void *)(v3 + 888) = 0;
      long long v67 = *(_OWORD *)(v3 + 896);
      uint64_t v68 = *(void *)(v3 + 912);
      *(void *)(v3 + 904) = 0;
      *(void *)(v3 + 896) = 0;
      *(void *)(v3 + 912) = 0;
      char v69 = *(unsigned char *)(v3 + 920);
      long long v9 = *(_OWORD *)(v3 + 944);
      long long v70 = *(_OWORD *)(v3 + 928);
      long long v71 = v9;
      uint64_t v72 = *(void *)(v3 + 960);
      long long v73 = *(_OWORD *)(v3 + 968);
      uint64_t v74 = *(void *)(v3 + 984);
      *(void *)(v3 + 976) = 0;
      *(void *)(v3 + 984) = 0;
      *(void *)(v3 + 968) = 0;
      long long v10 = *(_OWORD *)(v3 + 1040);
      long long v77 = *(_OWORD *)(v3 + 1024);
      long long v78 = v10;
      uint64_t v79 = *(void *)(v3 + 1056);
      long long v11 = *(_OWORD *)(v3 + 1008);
      long long v75 = *(_OWORD *)(v3 + 992);
      long long v76 = v11;
      char v80 = *(unsigned char *)(v3 + 1064);
      v81[0] = *(_OWORD *)(v3 + 1072);
      *(_OWORD *)((char *)v81 + 12) = *(_OWORD *)(v3 + 1084);
      long long __p = *(_OWORD *)(v3 + 1104);
      uint64_t v83 = *(void *)(v3 + 1120);
      *(void *)(v3 + 1112) = 0;
      *(void *)(v3 + 1104) = 0;
      *(void *)(v3 + 1120) = 0;
      v84[0] = *(unsigned char *)(v3 + 1128);
      long long v85 = *(_OWORD *)(v3 + 1136);
      uint64_t v86 = *(void *)(v3 + 1152);
      *(void *)(v3 + 1144) = 0;
      *(void *)(v3 + 1136) = 0;
      *(void *)(v3 + 1152) = 0;
      long long v87 = *(_OWORD *)(v3 + 1160);
      uint64_t v88 = *(void *)(v3 + 1176);
      *(void *)(v3 + 1160) = 0;
      *(void *)(v3 + 1168) = 0;
      *(void *)(v3 + 1176) = 0;
      int v89 = *(_DWORD *)(v3 + 1184);
      long long v90 = *(_OWORD *)(v3 + 1192);
      uint64_t v91 = *(void *)(v3 + 1208);
      *(void *)(v3 + 1192) = 0;
      *(void *)(v3 + 1200) = 0;
      *(void *)(v3 + 1208) = 0;
      long long v92 = *(_OWORD *)(v3 + 1216);
      uint64_t v93 = *(void *)(v3 + 1232);
      *(void *)(v3 + 1224) = 0;
      *(void *)(v3 + 1216) = 0;
      *(void *)(v3 + 1232) = 0;
      long long v94 = *(_OWORD *)(v3 + 1240);
      uint64_t v95 = *(void *)(v3 + 1256);
      *(void *)(v3 + 1248) = 0;
      *(void *)(v3 + 1240) = 0;
      *(void *)(v3 + 1256) = 0;
      long long v12 = *(_OWORD *)(v3 + 1280);
      uint64_t v13 = v5;
      long long v96 = *(_OWORD *)(v3 + 1264);
      long long v97 = v12;
      while (1)
      {
        uint64_t v14 = v3;
        sub_301388((char **)v13, v3);
        uint64_t v15 = (_OWORD *)(v3 + 424);
        *(_OWORD *)(v13 + 424) = *(_OWORD *)(v3 + 424);
        *(_OWORD *)(v13 + 436) = *(_OWORD *)(v3 + 436);
        unint64_t v16 = (void **)(v13 + 456);
        uint64_t v17 = *(void *)(v13 + 456);
        if (v17)
        {
          uint64_t v18 = *(void *)(v13 + 464);
          uint64_t v19 = *(void **)(v13 + 456);
          if (v18 != v17)
          {
            do
              uint64_t v18 = sub_30328C(v18 - 184);
            while (v18 != v17);
            uint64_t v19 = *v16;
          }
          *(void *)(v13 + 464) = v17;
          operator delete(v19);
          *unint64_t v16 = 0;
          *(void *)(v13 + 464) = 0;
          *(void *)(v13 + 472) = 0;
        }
        v20 = (void **)(v14 + 456);
        *(_OWORD *)unint64_t v16 = *(_OWORD *)(v14 + 456);
        *(void *)(v13 + 472) = *(void *)(v14 + 472);
        *(void *)(v14 + 456) = 0;
        *(void *)(v14 + 464) = 0;
        *(void *)(v14 + 472) = 0;
        *(unsigned char *)(v13 + 480) = *(unsigned char *)(v14 + 480);
        uint64_t v21 = *(void *)(v13 + 488);
        if (v21) {
          break;
        }
LABEL_25:
        *(void *)(v13 + 488) = *(void *)(v14 + 488);
        *(void *)(v13 + 496) = *(void *)(v14 + 496);
        *(void *)(v13 + 504) = *(void *)(v14 + 504);
        *(void *)(v14 + 488) = 0;
        *(void *)(v14 + 496) = 0;
        *(void *)(v14 + 504) = 0;
        uint64_t v25 = *(void *)(v13 + 512);
        if (!v25) {
          goto LABEL_36;
        }
        uint64_t v26 = (void **)(v13 + 512);
        uint64_t v27 = *(void *)(v13 + 520);
        v28 = *(void **)(v13 + 512);
        if (v27 != v25)
        {
          while (1)
          {
            if (*(char *)(v27 - 1) < 0)
            {
              operator delete(*(void **)(v27 - 24));
              if (*(char *)(v27 - 25) < 0) {
LABEL_33:
              }
                operator delete(*(void **)(v27 - 48));
            }
            else if (*(char *)(v27 - 25) < 0)
            {
              goto LABEL_33;
            }
            v27 -= 48;
            if (v27 == v25)
            {
              v28 = *v26;
              break;
            }
          }
        }
        *(void *)(v13 + 520) = v25;
        operator delete(v28);
        *uint64_t v26 = 0;
        *(void *)(v13 + 520) = 0;
        *(void *)(v13 + 528) = 0;
LABEL_36:
        *(_OWORD *)(v13 + 512) = *(_OWORD *)(v14 + 512);
        *(void *)(v13 + 528) = *(void *)(v14 + 528);
        *(void *)(v14 + 520) = 0;
        *(void *)(v14 + 512) = 0;
        *(void *)(v14 + 528) = 0;
        *(_DWORD *)(v13 + 536) = *(_DWORD *)(v14 + 536);
        uint64_t v29 = *(void *)(v13 + 544);
        if (v29)
        {
          v30 = (void **)(v13 + 544);
          uint64_t v31 = *(void *)(v13 + 552);
          v32 = *(void **)(v13 + 544);
          if (v31 == v29)
          {
LABEL_46:
            *(void *)(v13 + 552) = v29;
            operator delete(v32);
            *v30 = 0;
            *(void *)(v13 + 552) = 0;
            *(void *)(v13 + 560) = 0;
            goto LABEL_47;
          }
          while (1)
          {
            if (*(char *)(v31 - 1) < 0)
            {
              operator delete(*(void **)(v31 - 24));
              if (*(char *)(v31 - 25) < 0) {
LABEL_44:
              }
                operator delete(*(void **)(v31 - 48));
            }
            else if (*(char *)(v31 - 25) < 0)
            {
              goto LABEL_44;
            }
            v31 -= 48;
            if (v31 == v29)
            {
              v32 = *v30;
              goto LABEL_46;
            }
          }
        }
LABEL_47:
        *(_OWORD *)(v13 + 544) = *(_OWORD *)(v14 + 544);
        *(void *)(v13 + 560) = *(void *)(v14 + 560);
        *(void *)(v14 + 544) = 0;
        *(void *)(v14 + 552) = 0;
        *(void *)(v14 + 560) = 0;
        v33 = *(void **)(v13 + 568);
        if (v33)
        {
          v34 = (void **)(v13 + 568);
          v35 = *(void **)(v13 + 576);
          v36 = *(void **)(v13 + 568);
          if (v35 != v33)
          {
            do
              v35 = sub_3034C4(v35 - 10);
            while (v35 != v33);
            v36 = *v34;
          }
          *(void *)(v13 + 576) = v33;
          operator delete(v36);
          *v34 = 0;
          *(void *)(v13 + 576) = 0;
          *(void *)(v13 + 584) = 0;
        }
        *(void *)(v13 + 568) = *(void *)(v14 + 568);
        *(void *)(v13 + 576) = *(void *)(v14 + 576);
        *(void *)(v13 + 584) = *(void *)(v14 + 584);
        *(void *)(v14 + 568) = 0;
        *(void *)(v14 + 576) = 0;
        *(void *)(v14 + 584) = 0;
        v37 = (void **)(v13 + 592);
        if (*(char *)(v13 + 615) < 0) {
          operator delete(*v37);
        }
        *(_OWORD *)v37 = *(_OWORD *)(v14 + 592);
        *(void *)(v13 + 608) = *(void *)(v14 + 608);
        *(unsigned char *)(v14 + 615) = 0;
        *(unsigned char *)(v14 + 592) = 0;
        *(_OWORD *)(v13 + 616) = *(_OWORD *)(v14 + 616);
        *(_OWORD *)(v13 + 632) = *(_OWORD *)(v14 + 632);
        uint64_t v3 = v14 - 648;
        uint64_t v13 = v14;
        if (!sub_358F0C((uint64_t)&v46, v14 - 648))
        {
          sub_301388((char **)v14, (uint64_t)&v46);
          long long v38 = *(_OWORD *)((char *)v81 + 12);
          *uint64_t v15 = v81[0];
          *(_OWORD *)((char *)v15 + 12) = v38;
          uint64_t v39 = *(void *)(v14 + 456);
          if (v39)
          {
            uint64_t v40 = *(void *)(v14 + 464);
            uint64_t v41 = *(void **)(v14 + 456);
            if (v40 != v39)
            {
              do
                uint64_t v40 = sub_30328C(v40 - 184);
              while (v40 != v39);
              uint64_t v41 = *v20;
            }
            *(void *)(v14 + 464) = v39;
            operator delete(v41);
            void *v20 = 0;
            *(void *)(v14 + 464) = 0;
            *(void *)(v14 + 472) = 0;
          }
          *(_OWORD *)v20 = __p;
          *(void *)(v14 + 472) = v83;
          long long __p = 0uLL;
          uint64_t v83 = 0;
          sub_303024(v14 + 480, (uint64_t)v84);
          sub_303198((uint64_t)v84);
          uint64_t v42 = __p;
          if ((void)__p)
          {
            uint64_t v43 = *((void *)&__p + 1);
            uint64_t v44 = (void *)__p;
            if (*((void *)&__p + 1) != (void)__p)
            {
              do
                uint64_t v43 = sub_30328C(v43 - 184);
              while (v43 != v42);
              uint64_t v44 = (void *)__p;
            }
            *((void *)&__p + 1) = v42;
            operator delete(v44);
          }
          result = sub_29D95C((uint64_t)&v46);
          uint64_t v2 = a2;
          goto LABEL_6;
        }
      }
      char v22 = (void **)(v13 + 488);
      uint64_t v23 = *(void *)(v13 + 496);
      unint64_t v24 = *(void **)(v13 + 488);
      if (v23 == v21)
      {
LABEL_24:
        *(void *)(v13 + 496) = v21;
        operator delete(v24);
        *char v22 = 0;
        *(void *)(v13 + 496) = 0;
        *(void *)(v13 + 504) = 0;
        goto LABEL_25;
      }
      while (1)
      {
        if (*(char *)(v23 - 1) < 0)
        {
          operator delete(*(void **)(v23 - 24));
          if (*(char *)(v23 - 25) < 0) {
LABEL_22:
          }
            operator delete(*(void **)(v23 - 48));
        }
        else if (*(char *)(v23 - 25) < 0)
        {
          goto LABEL_22;
        }
        v23 -= 48;
        if (v23 == v21)
        {
          unint64_t v24 = *v22;
          goto LABEL_24;
        }
      }
    }
  }
  return result;
}

void sub_337970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_301314((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_337984(long long *a1, long long *a2, uint64_t a3)
{
  BOOL v6 = sub_358F0C((uint64_t)a2, (uint64_t)a1);
  uint64_t result = sub_358F0C(a3, (uint64_t)a2);
  if (v6)
  {
    if (result)
    {
      sub_338A24(a1, a3);
      return 1;
    }
    sub_338A24(a1, (uint64_t)a2);
    if (sub_358F0C(a3, (uint64_t)a2))
    {
      sub_338A24(a2, a3);
      return 2;
    }
    return 1;
  }
  if (result)
  {
    sub_338A24(a2, a3);
    if (sub_358F0C((uint64_t)a2, (uint64_t)a1))
    {
      sub_338A24(a1, (uint64_t)a2);
      return 2;
    }
    return 1;
  }
  return result;
}

long long *sub_337A7C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  long long v44 = *(_OWORD *)a1;
  uint64_t v45 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  long long v46 = *(_OWORD *)(a1 + 24);
  long long v47 = *(_OWORD *)(a1 + 40);
  uint64_t v48 = *(void *)(a1 + 56);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  long long v49 = *(_OWORD *)(a1 + 64);
  uint64_t v50 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  int v51 = *(_DWORD *)(a1 + 88);
  long long v4 = *(_OWORD *)(a1 + 96);
  uint64_t v53 = *(void *)(a1 + 112);
  long long v52 = v4;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  long long v5 = *(_OWORD *)(a1 + 120);
  uint64_t v55 = *(void *)(a1 + 136);
  long long v54 = v5;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  long long v6 = *(_OWORD *)(a1 + 144);
  int v57 = *(_DWORD *)(a1 + 160);
  long long v56 = v6;
  long long v7 = *(_OWORD *)(a1 + 168);
  uint64_t v59 = *(void *)(a1 + 184);
  long long v58 = v7;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  long long v60 = *(_OWORD *)(a1 + 192);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  uint64_t v8 = *(void *)(a1 + 208);
  uint64_t v9 = *(void *)(a1 + 216);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  uint64_t v61 = v8;
  uint64_t v62 = v9;
  long long v63 = *(_OWORD *)(a1 + 224);
  uint64_t v10 = *(void *)(a1 + 240);
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  long long v65 = *(_OWORD *)(a1 + 248);
  uint64_t v11 = *(void *)(a1 + 264);
  uint64_t v64 = v10;
  uint64_t v66 = v11;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  char v67 = *(unsigned char *)(a1 + 272);
  uint64_t v12 = *(void *)(a1 + 312);
  long long v13 = *(_OWORD *)(a1 + 296);
  long long v68 = *(_OWORD *)(a1 + 280);
  long long v69 = v13;
  uint64_t v70 = v12;
  long long v71 = *(_OWORD *)(a1 + 320);
  uint64_t v14 = *(void *)(a1 + 336);
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  uint64_t v15 = *(void *)(a1 + 408);
  long long v16 = *(_OWORD *)(a1 + 344);
  long long v17 = *(_OWORD *)(a1 + 360);
  long long v18 = *(_OWORD *)(a1 + 392);
  long long v75 = *(_OWORD *)(a1 + 376);
  long long v76 = v18;
  long long v73 = v16;
  long long v74 = v17;
  uint64_t v72 = v14;
  uint64_t v77 = v15;
  char v78 = *(unsigned char *)(a1 + 416);
  uint64_t v19 = (_OWORD *)(a1 + 424);
  long long v20 = *(_OWORD *)(a1 + 424);
  *(_OWORD *)((char *)v79 + 12) = *(_OWORD *)(a1 + 436);
  v79[0] = v20;
  uint64_t v21 = a1 + 456;
  long long __p = *(_OWORD *)(a1 + 456);
  uint64_t v81 = *(void *)(a1 + 472);
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  uint64_t v22 = a1 + 480;
  v82[0] = *(unsigned char *)(a1 + 480);
  uint64_t v83 = *(void *)(a1 + 488);
  long long v23 = *(_OWORD *)(a1 + 496);
  long long v24 = *(_OWORD *)(a1 + 512);
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  long long v84 = v23;
  long long v85 = v24;
  uint64_t v86 = *(void *)(a1 + 528);
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 528) = 0;
  int v87 = *(_DWORD *)(a1 + 536);
  long long v88 = *(_OWORD *)(a1 + 544);
  uint64_t v89 = *(void *)(a1 + 560);
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 560) = 0;
  uint64_t v90 = *(void *)(a1 + 568);
  *(void *)(a1 + 568) = 0;
  long long v25 = *(_OWORD *)(a1 + 576);
  long long v26 = *(_OWORD *)(a1 + 592);
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 576) = 0;
  uint64_t v93 = *(void *)(a1 + 608);
  long long v91 = v25;
  long long v92 = v26;
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 608) = 0;
  long long v27 = *(_OWORD *)(a1 + 616);
  long long v95 = *(_OWORD *)(a1 + 632);
  long long v94 = v27;
  if (sub_358F0C((uint64_t)&v44, a2 - 648))
  {
    v28 = (long long *)a1;
    do
      v28 = (long long *)((char *)v28 + 648);
    while (!sub_358F0C((uint64_t)&v44, (uint64_t)v28));
  }
  else
  {
    unint64_t v29 = a1 + 648;
    do
    {
      v28 = (long long *)v29;
      if (v29 >= v2) {
        break;
      }
      BOOL v30 = sub_358F0C((uint64_t)&v44, v29);
      unint64_t v29 = (unint64_t)v28 + 648;
    }
    while (!v30);
  }
  if ((unint64_t)v28 < v2)
  {
    do
      v2 -= 648;
    while (sub_358F0C((uint64_t)&v44, v2));
  }
  while ((unint64_t)v28 < v2)
  {
    sub_338A24(v28, v2);
    do
      v28 = (long long *)((char *)v28 + 648);
    while (!sub_358F0C((uint64_t)&v44, (uint64_t)v28));
    do
      v2 -= 648;
    while (sub_358F0C((uint64_t)&v44, v2));
  }
  if ((long long *)((char *)v28 - 648) != (long long *)a1)
  {
    sub_301388((char **)a1, (uint64_t)v28 - 648);
    long long v31 = *(long long *)((char *)v28 - 212);
    _OWORD *v19 = *(v28 - 14);
    *(_OWORD *)((char *)v19 + 12) = v31;
    uint64_t v32 = *(void *)(a1 + 456);
    if (v32)
    {
      uint64_t v33 = *(void *)(a1 + 464);
      v34 = *(void **)(a1 + 456);
      if (v33 != v32)
      {
        do
          uint64_t v33 = sub_30328C(v33 - 184);
        while (v33 != v32);
        v34 = *(void **)v21;
      }
      *(void *)(a1 + 464) = v32;
      operator delete(v34);
      *(void *)uint64_t v21 = 0;
      *(void *)(v21 + 8) = 0;
      *(void *)(v21 + 16) = 0;
    }
    *(_OWORD *)uint64_t v21 = *(v28 - 12);
    *(void *)(a1 + 472) = *((void *)v28 - 22);
    *((void *)v28 - 24) = 0;
    *((void *)v28 - 23) = 0;
    *((void *)v28 - 22) = 0;
    sub_303024(v22, (uint64_t)v28 - 168);
  }
  sub_301388((char **)v28 - 81, (uint64_t)&v44);
  long long v35 = *(_OWORD *)((char *)v79 + 12);
  v36 = (void **)(v28 - 12);
  v37 = (void *)*((void *)v28 - 24);
  *(v28 - 14) = v79[0];
  *(long long *)((char *)v28 - 212) = v35;
  if (v37)
  {
    uint64_t v38 = *((void *)v28 - 23);
    uint64_t v39 = v37;
    if ((void *)v38 != v37)
    {
      do
        uint64_t v38 = sub_30328C(v38 - 184);
      while ((void *)v38 != v37);
      uint64_t v39 = *v36;
    }
    *((void *)v28 - 23) = v37;
    operator delete(v39);
    void *v36 = 0;
    *((void *)v28 - 23) = 0;
    *((void *)v28 - 22) = 0;
  }
  *(v28 - 12) = __p;
  *((void *)v28 - 22) = v81;
  long long __p = 0uLL;
  uint64_t v81 = 0;
  sub_303024((uint64_t)v28 - 168, (uint64_t)v82);
  sub_303198((uint64_t)v82);
  uint64_t v40 = __p;
  if ((void)__p)
  {
    uint64_t v41 = *((void *)&__p + 1);
    uint64_t v42 = (void *)__p;
    if (*((void *)&__p + 1) != (void)__p)
    {
      do
        uint64_t v41 = sub_30328C(v41 - 184);
      while (v41 != v40);
      uint64_t v42 = (void *)__p;
    }
    *((void *)&__p + 1) = v40;
    operator delete(v42);
  }
  sub_29D95C((uint64_t)&v44);
  return v28;
}

void sub_337EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_337EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_337F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_337F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_337F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_337F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_337F60(long long *a1, unint64_t a2)
{
  uint64_t v4 = 0;
  long long v46 = *a1;
  uint64_t v47 = *((void *)a1 + 2);
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *(void *)a1 = 0;
  long long v48 = *(long long *)((char *)a1 + 24);
  long long v49 = *(long long *)((char *)a1 + 40);
  uint64_t v50 = *((void *)a1 + 7);
  *((void *)a1 + 5) = 0;
  *((void *)a1 + 6) = 0;
  long long v51 = a1[4];
  uint64_t v52 = *((void *)a1 + 10);
  *((void *)a1 + 9) = 0;
  *((void *)a1 + 10) = 0;
  *((void *)a1 + 7) = 0;
  *((void *)a1 + 8) = 0;
  int v53 = *((_DWORD *)a1 + 22);
  long long v5 = a1[6];
  uint64_t v55 = *((void *)a1 + 14);
  long long v54 = v5;
  *((void *)a1 + 12) = 0;
  *((void *)a1 + 13) = 0;
  long long v6 = *(long long *)((char *)a1 + 120);
  uint64_t v57 = *((void *)a1 + 17);
  long long v56 = v6;
  *((void *)a1 + 14) = 0;
  *((void *)a1 + 15) = 0;
  *((void *)a1 + 16) = 0;
  *((void *)a1 + 17) = 0;
  long long v7 = a1[9];
  int v59 = *((_DWORD *)a1 + 40);
  long long v58 = v7;
  long long v8 = *(long long *)((char *)a1 + 168);
  uint64_t v61 = *((void *)a1 + 23);
  long long v60 = v8;
  *((void *)a1 + 21) = 0;
  *((void *)a1 + 22) = 0;
  long long v62 = a1[12];
  *((void *)a1 + 23) = 0;
  *((void *)a1 + 24) = 0;
  uint64_t v9 = *((void *)a1 + 26);
  uint64_t v10 = *((void *)a1 + 27);
  *((void *)a1 + 25) = 0;
  *((void *)a1 + 26) = 0;
  uint64_t v63 = v9;
  uint64_t v64 = v10;
  long long v65 = a1[14];
  uint64_t v11 = *((void *)a1 + 30);
  *((void *)a1 + 28) = 0;
  *((void *)a1 + 29) = 0;
  long long v67 = *(long long *)((char *)a1 + 248);
  uint64_t v12 = *((void *)a1 + 33);
  uint64_t v66 = v11;
  uint64_t v68 = v12;
  *((void *)a1 + 30) = 0;
  *((void *)a1 + 31) = 0;
  *((void *)a1 + 32) = 0;
  *((void *)a1 + 33) = 0;
  char v69 = *((unsigned char *)a1 + 272);
  uint64_t v13 = *((void *)a1 + 39);
  long long v14 = *(long long *)((char *)a1 + 296);
  long long v70 = *(long long *)((char *)a1 + 280);
  long long v71 = v14;
  uint64_t v72 = v13;
  long long v73 = a1[20];
  uint64_t v15 = *((void *)a1 + 42);
  *((void *)a1 + 40) = 0;
  *((void *)a1 + 41) = 0;
  *((void *)a1 + 42) = 0;
  uint64_t v16 = *((void *)a1 + 51);
  long long v17 = *(long long *)((char *)a1 + 344);
  long long v18 = *(long long *)((char *)a1 + 360);
  long long v19 = *(long long *)((char *)a1 + 392);
  long long v77 = *(long long *)((char *)a1 + 376);
  long long v78 = v19;
  long long v75 = v17;
  long long v76 = v18;
  uint64_t v74 = v15;
  uint64_t v79 = v16;
  char v80 = *((unsigned char *)a1 + 416);
  long long v20 = (long long *)((char *)a1 + 424);
  long long v21 = *(long long *)((char *)a1 + 424);
  *(_OWORD *)((char *)v81 + 12) = *(long long *)((char *)a1 + 436);
  v81[0] = v21;
  uint64_t v22 = (uint64_t)a1 + 456;
  long long __p = *(long long *)((char *)a1 + 456);
  uint64_t v83 = *((void *)a1 + 59);
  *((void *)a1 + 57) = 0;
  *((void *)a1 + 58) = 0;
  *((void *)a1 + 59) = 0;
  v84[0] = *((unsigned char *)a1 + 480);
  uint64_t v85 = *((void *)a1 + 61);
  uint64_t v88 = *((void *)a1 + 66);
  int v89 = *((_DWORD *)a1 + 134);
  uint64_t v91 = *((void *)a1 + 70);
  uint64_t v92 = *((void *)a1 + 71);
  uint64_t v95 = *((void *)a1 + 76);
  uint64_t v23 = (uint64_t)(a1 + 30);
  long long v24 = a1[31];
  long long v25 = a1[32];
  *((void *)a1 + 61) = 0;
  *((void *)a1 + 62) = 0;
  long long v86 = v24;
  long long v87 = v25;
  *((void *)a1 + 65) = 0;
  *((void *)a1 + 63) = 0;
  *((void *)a1 + 64) = 0;
  *((void *)a1 + 66) = 0;
  long long v90 = a1[34];
  *((void *)a1 + 69) = 0;
  *((void *)a1 + 68) = 0;
  *((void *)a1 + 70) = 0;
  *((void *)a1 + 71) = 0;
  long long v26 = a1[36];
  long long v27 = a1[37];
  *((void *)a1 + 73) = 0;
  *((void *)a1 + 72) = 0;
  long long v93 = v26;
  long long v94 = v27;
  *((void *)a1 + 75) = 0;
  *((void *)a1 + 74) = 0;
  *((void *)a1 + 76) = 0;
  long long v28 = *(long long *)((char *)a1 + 616);
  long long v97 = *(long long *)((char *)a1 + 632);
  long long v96 = v28;
  do
  {
    BOOL v29 = sub_358F0C((uint64_t)a1 + v4 + 648, (uint64_t)&v46);
    v4 += 648;
  }
  while (v29);
  unint64_t v30 = (unint64_t)a1 + v4;
  if (v4 == 648)
  {
    do
    {
      if (v30 >= a2) {
        break;
      }
      a2 -= 648;
    }
    while (!sub_358F0C(a2, (uint64_t)&v46));
  }
  else
  {
    do
      a2 -= 648;
    while (!sub_358F0C(a2, (uint64_t)&v46));
  }
  long long v31 = (long long *)((char *)a1 + v4);
  if (v30 < a2)
  {
    unint64_t v32 = a2;
    do
    {
      sub_338A24(v31, v32);
      do
        long long v31 = (long long *)((char *)v31 + 648);
      while (sub_358F0C((uint64_t)v31, (uint64_t)&v46));
      do
        v32 -= 648;
      while (!sub_358F0C(v32, (uint64_t)&v46));
    }
    while ((unint64_t)v31 < v32);
  }
  if ((long long *)((char *)v31 - 648) != a1)
  {
    sub_301388((char **)a1, (uint64_t)v31 - 648);
    long long v33 = *(long long *)((char *)v31 - 212);
    _OWORD *v20 = *(v31 - 14);
    *(_OWORD *)((char *)v20 + 12) = v33;
    uint64_t v34 = *((void *)a1 + 57);
    if (v34)
    {
      uint64_t v35 = *((void *)a1 + 58);
      v36 = (void *)*((void *)a1 + 57);
      if (v35 != v34)
      {
        do
          uint64_t v35 = sub_30328C(v35 - 184);
        while (v35 != v34);
        v36 = *(void **)v22;
      }
      *((void *)a1 + 58) = v34;
      operator delete(v36);
      *(void *)uint64_t v22 = 0;
      *(void *)(v22 + 8) = 0;
      *(void *)(v22 + 16) = 0;
    }
    *(_OWORD *)uint64_t v22 = *(v31 - 12);
    *((void *)a1 + 59) = *((void *)v31 - 22);
    *((void *)v31 - 24) = 0;
    *((void *)v31 - 23) = 0;
    *((void *)v31 - 22) = 0;
    sub_303024(v23, (uint64_t)v31 - 168);
  }
  sub_301388((char **)v31 - 81, (uint64_t)&v46);
  long long v37 = *(_OWORD *)((char *)v81 + 12);
  uint64_t v38 = (void **)(v31 - 12);
  uint64_t v39 = (void *)*((void *)v31 - 24);
  *(v31 - 14) = v81[0];
  *(long long *)((char *)v31 - 212) = v37;
  if (v39)
  {
    uint64_t v40 = *((void *)v31 - 23);
    uint64_t v41 = v39;
    if ((void *)v40 != v39)
    {
      do
        uint64_t v40 = sub_30328C(v40 - 184);
      while ((void *)v40 != v39);
      uint64_t v41 = *v38;
    }
    *((void *)v31 - 23) = v39;
    operator delete(v41);
    *uint64_t v38 = 0;
    *((void *)v31 - 23) = 0;
    *((void *)v31 - 22) = 0;
  }
  *(v31 - 12) = __p;
  *((void *)v31 - 22) = v83;
  long long __p = 0uLL;
  uint64_t v83 = 0;
  sub_303024((uint64_t)v31 - 168, (uint64_t)v84);
  sub_303198((uint64_t)v84);
  uint64_t v42 = __p;
  if ((void)__p)
  {
    uint64_t v43 = *((void *)&__p + 1);
    long long v44 = (void *)__p;
    if (*((void *)&__p + 1) != (void)__p)
    {
      do
        uint64_t v43 = sub_30328C(v43 - 184);
      while (v43 != v42);
      long long v44 = (void *)__p;
    }
    *((void *)&__p + 1) = v42;
    operator delete(v44);
  }
  sub_29D95C((uint64_t)&v46);
  return (char *)v31 - 648;
}

void sub_3383DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_301314((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_3383F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_301314((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_338404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_301314((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_338418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_301314((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_33842C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_301314((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_338440(long long *a1, long long *a2)
{
  unint64_t v2 = a2;
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(0x2C3F35BA781948B1 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = (uint64_t)a2 - 648;
      if (!sub_358F0C((uint64_t)a2 - 648, (uint64_t)a1)) {
        return 1;
      }
      sub_338A24(a1, v6);
      return 1;
    case 3:
      sub_337984(a1, (long long *)((char *)a1 + 648), (uint64_t)a2 - 648);
      return 1;
    case 4:
      sub_339074(a1, (long long *)((char *)a1 + 648), a1 + 81, (uint64_t)a2 - 648);
      return 1;
    case 5:
      sub_339120(a1, (long long *)((char *)a1 + 648), a1 + 81, (long long *)((char *)a1 + 1944), (uint64_t)a2 - 648);
      return 1;
    default:
      uint64_t v7 = (uint64_t)(a1 + 81);
      sub_337984(a1, (long long *)((char *)a1 + 648), (uint64_t)(a1 + 81));
      uint64_t v8 = (uint64_t)a1 + 1944;
      if ((long long *)((char *)a1 + 1944) == v2) {
        return 1;
      }
      int v9 = 0;
      long long v44 = v2;
      break;
  }
  while (1)
  {
    uint64_t v10 = (long long *)(v8 + 456);
    if (sub_358F0C(v8, v7))
    {
      long long v45 = *(_OWORD *)v8;
      uint64_t v46 = *(void *)(v8 + 16);
      *(void *)(v8 + 8) = 0;
      *(void *)(v8 + 16) = 0;
      *(void *)uint64_t v8 = 0;
      long long v47 = *(_OWORD *)(v8 + 24);
      long long v48 = *(_OWORD *)(v8 + 40);
      uint64_t v49 = *(void *)(v8 + 56);
      *(void *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      long long v50 = *(_OWORD *)(v8 + 64);
      uint64_t v51 = *(void *)(v8 + 80);
      *(void *)(v8 + 72) = 0;
      *(void *)(v8 + 80) = 0;
      *(void *)(v8 + 56) = 0;
      *(void *)(v8 + 64) = 0;
      int v52 = *(_DWORD *)(v8 + 88);
      long long v11 = *(_OWORD *)(v8 + 96);
      uint64_t v54 = *(void *)(v8 + 112);
      long long v53 = v11;
      *(void *)(v8 + 96) = 0;
      *(void *)(v8 + 104) = 0;
      long long v12 = *(_OWORD *)(v8 + 120);
      uint64_t v56 = *(void *)(v8 + 136);
      long long v55 = v12;
      *(void *)(v8 + 112) = 0;
      *(void *)(v8 + 120) = 0;
      *(void *)(v8 + 128) = 0;
      *(void *)(v8 + 136) = 0;
      long long v13 = *(_OWORD *)(v8 + 144);
      int v58 = *(_DWORD *)(v8 + 160);
      long long v57 = v13;
      long long v14 = *(_OWORD *)(v8 + 168);
      uint64_t v60 = *(void *)(v8 + 184);
      long long v59 = v14;
      *(void *)(v8 + 168) = 0;
      *(void *)(v8 + 176) = 0;
      long long v61 = *(_OWORD *)(v8 + 192);
      *(void *)(v8 + 184) = 0;
      *(void *)(v8 + 192) = 0;
      uint64_t v15 = *(void *)(v8 + 208);
      uint64_t v16 = *(void *)(v8 + 216);
      *(void *)(v8 + 200) = 0;
      *(void *)(v8 + 208) = 0;
      uint64_t v62 = v15;
      uint64_t v63 = v16;
      long long v64 = *(_OWORD *)(v8 + 224);
      uint64_t v65 = *(void *)(v8 + 240);
      *(void *)(v8 + 224) = 0;
      *(void *)(v8 + 232) = 0;
      long long v66 = *(_OWORD *)(v8 + 248);
      uint64_t v67 = *(void *)(v8 + 264);
      *(void *)(v8 + 240) = 0;
      *(void *)(v8 + 248) = 0;
      *(void *)(v8 + 256) = 0;
      *(void *)(v8 + 264) = 0;
      char v68 = *(unsigned char *)(v8 + 272);
      long long v17 = *(_OWORD *)(v8 + 280);
      long long v18 = *(_OWORD *)(v8 + 296);
      uint64_t v71 = *(void *)(v8 + 312);
      long long v69 = v17;
      long long v70 = v18;
      long long v72 = *(_OWORD *)(v8 + 320);
      uint64_t v73 = *(void *)(v8 + 336);
      *(void *)(v8 + 320) = 0;
      *(void *)(v8 + 328) = 0;
      *(void *)(v8 + 336) = 0;
      long long v19 = *(_OWORD *)(v8 + 344);
      long long v20 = *(_OWORD *)(v8 + 360);
      long long v21 = *(_OWORD *)(v8 + 376);
      long long v22 = *(_OWORD *)(v8 + 392);
      uint64_t v78 = *(void *)(v8 + 408);
      long long v76 = v21;
      long long v77 = v22;
      long long v74 = v19;
      long long v75 = v20;
      char v79 = *(unsigned char *)(v8 + 416);
      long long v23 = *(_OWORD *)(v8 + 424);
      *(_OWORD *)((char *)v80 + 12) = *(_OWORD *)(v8 + 436);
      v80[0] = v23;
      long long __p = *v10;
      uint64_t v82 = *(void *)(v8 + 472);
      *(void *)uint64_t v10 = 0;
      *(void *)(v8 + 464) = 0;
      *(void *)(v8 + 472) = 0;
      v83[0] = *(unsigned char *)(v8 + 480);
      uint64_t v84 = *(void *)(v8 + 488);
      long long v24 = *(_OWORD *)(v8 + 496);
      long long v25 = *(_OWORD *)(v8 + 512);
      *(void *)(v8 + 488) = 0;
      *(void *)(v8 + 496) = 0;
      long long v85 = v24;
      long long v86 = v25;
      uint64_t v87 = *(void *)(v8 + 528);
      *(void *)(v8 + 520) = 0;
      *(void *)(v8 + 504) = 0;
      *(void *)(v8 + 512) = 0;
      *(void *)(v8 + 528) = 0;
      int v88 = *(_DWORD *)(v8 + 536);
      long long v89 = *(_OWORD *)(v8 + 544);
      uint64_t v90 = *(void *)(v8 + 560);
      *(void *)(v8 + 552) = 0;
      *(void *)(v8 + 544) = 0;
      *(void *)(v8 + 560) = 0;
      uint64_t v91 = *(void *)(v8 + 568);
      long long v26 = *(_OWORD *)(v8 + 592);
      long long v92 = *(_OWORD *)(v8 + 576);
      *(void *)(v8 + 568) = 0;
      *(void *)(v8 + 584) = 0;
      *(void *)(v8 + 576) = 0;
      uint64_t v94 = *(void *)(v8 + 608);
      long long v93 = v26;
      *(void *)(v8 + 600) = 0;
      *(void *)(v8 + 592) = 0;
      *(void *)(v8 + 608) = 0;
      long long v27 = *(_OWORD *)(v8 + 632);
      long long v28 = (void *)v8;
      long long v95 = *(_OWORD *)(v8 + 616);
      long long v96 = v27;
      while (1)
      {
        BOOL v29 = (long long *)v7;
        sub_301388((char **)v28, v7);
        unint64_t v30 = (_OWORD *)(v7 + 424);
        *(_OWORD *)(v28 + 53) = *(_OWORD *)(v7 + 424);
        *(_OWORD *)((char *)v28 + 436) = *(_OWORD *)(v7 + 436);
        uint64_t v31 = v28[57];
        if (v31)
        {
          unint64_t v32 = (void **)(v28 + 57);
          uint64_t v33 = v28[58];
          uint64_t v34 = (void *)v28[57];
          if (v33 != v31)
          {
            do
              uint64_t v33 = sub_30328C(v33 - 184);
            while (v33 != v31);
            uint64_t v34 = *v32;
          }
          v28[58] = v31;
          operator delete(v34);
          void *v32 = 0;
          v28[58] = 0;
          v28[59] = 0;
        }
        v28[57] = *((void *)v29 + 57);
        v28[58] = *((void *)v29 + 58);
        v28[59] = *((void *)v29 + 59);
        *((void *)v29 + 57) = 0;
        *((void *)v29 + 58) = 0;
        *((void *)v29 + 59) = 0;
        sub_303024((uint64_t)(v28 + 60), (uint64_t)(v29 + 30));
        if (v29 == a1) {
          break;
        }
        uint64_t v7 = (uint64_t)v29 - 648;
        long long v28 = v29;
        if (!sub_358F0C((uint64_t)&v45, (uint64_t)v29 - 648))
        {
          uint64_t v35 = v29;
          goto LABEL_20;
        }
      }
      uint64_t v35 = a1;
LABEL_20:
      v36 = (void **)v29 + 57;
      sub_301388((char **)v35, (uint64_t)&v45);
      long long v37 = *(_OWORD *)((char *)v80 + 12);
      *unint64_t v30 = v80[0];
      *(_OWORD *)((char *)v30 + 12) = v37;
      uint64_t v38 = *((void *)v29 + 57);
      if (v38)
      {
        uint64_t v39 = *((void *)v35 + 58);
        uint64_t v40 = (void *)*((void *)v29 + 57);
        if (v39 != v38)
        {
          do
            uint64_t v39 = sub_30328C(v39 - 184);
          while (v39 != v38);
          uint64_t v40 = *v36;
        }
        *((void *)v35 + 58) = v38;
        operator delete(v40);
        void *v36 = 0;
        *((void *)v29 + 58) = 0;
        *((void *)v29 + 59) = 0;
      }
      void *v36 = (void *)__p;
      *((void *)v35 + 58) = *((void *)&__p + 1);
      *((void *)v35 + 59) = v82;
      long long __p = 0uLL;
      uint64_t v82 = 0;
      sub_303024((uint64_t)(v29 + 30), (uint64_t)v83);
      sub_303198((uint64_t)v83);
      uint64_t v41 = __p;
      if ((void)__p)
      {
        uint64_t v42 = *((void *)&__p + 1);
        uint64_t v43 = (void *)__p;
        if (*((void *)&__p + 1) != (void)__p)
        {
          do
            uint64_t v42 = sub_30328C(v42 - 184);
          while (v42 != v41);
          uint64_t v43 = (void *)__p;
        }
        *((void *)&__p + 1) = v41;
        operator delete(v43);
      }
      ++v9;
      sub_29D95C((uint64_t)&v45);
      unint64_t v2 = v44;
      if (v9 == 8) {
        return v8 + 648 == (void)v44;
      }
    }
    uint64_t v7 = v8;
    v8 += 648;
    if (v10 + 12 == v2) {
      return 1;
    }
  }
}

void sub_3389F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_301314((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_338A24(long long *a1, uint64_t a2)
{
  long long v40 = *a1;
  uint64_t v41 = *((void *)a1 + 2);
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *(void *)a1 = 0;
  long long v42 = *(long long *)((char *)a1 + 24);
  long long v43 = *(long long *)((char *)a1 + 40);
  uint64_t v44 = *((void *)a1 + 7);
  *((void *)a1 + 5) = 0;
  *((void *)a1 + 6) = 0;
  long long v45 = a1[4];
  uint64_t v46 = *((void *)a1 + 10);
  *((void *)a1 + 9) = 0;
  *((void *)a1 + 10) = 0;
  *((void *)a1 + 7) = 0;
  *((void *)a1 + 8) = 0;
  int v47 = *((_DWORD *)a1 + 22);
  long long v4 = a1[6];
  uint64_t v49 = *((void *)a1 + 14);
  long long v48 = v4;
  *((void *)a1 + 12) = 0;
  *((void *)a1 + 13) = 0;
  long long v5 = *(long long *)((char *)a1 + 120);
  uint64_t v51 = *((void *)a1 + 17);
  long long v50 = v5;
  *((void *)a1 + 14) = 0;
  *((void *)a1 + 15) = 0;
  *((void *)a1 + 16) = 0;
  *((void *)a1 + 17) = 0;
  long long v6 = a1[9];
  int v53 = *((_DWORD *)a1 + 40);
  long long v52 = v6;
  long long v7 = *(long long *)((char *)a1 + 168);
  uint64_t v55 = *((void *)a1 + 23);
  long long v54 = v7;
  *((void *)a1 + 21) = 0;
  *((void *)a1 + 22) = 0;
  long long v56 = a1[12];
  *((void *)a1 + 23) = 0;
  *((void *)a1 + 24) = 0;
  uint64_t v8 = *((void *)a1 + 26);
  uint64_t v9 = *((void *)a1 + 27);
  *((void *)a1 + 25) = 0;
  *((void *)a1 + 26) = 0;
  uint64_t v57 = v8;
  uint64_t v58 = v9;
  long long v59 = a1[14];
  uint64_t v10 = *((void *)a1 + 30);
  *((void *)a1 + 28) = 0;
  *((void *)a1 + 29) = 0;
  long long v61 = *(long long *)((char *)a1 + 248);
  uint64_t v11 = *((void *)a1 + 33);
  uint64_t v60 = v10;
  uint64_t v62 = v11;
  *((void *)a1 + 30) = 0;
  *((void *)a1 + 31) = 0;
  *((void *)a1 + 32) = 0;
  *((void *)a1 + 33) = 0;
  char v63 = *((unsigned char *)a1 + 272);
  uint64_t v12 = *((void *)a1 + 39);
  long long v13 = *(long long *)((char *)a1 + 296);
  long long v64 = *(long long *)((char *)a1 + 280);
  long long v65 = v13;
  uint64_t v66 = v12;
  long long v67 = a1[20];
  uint64_t v14 = *((void *)a1 + 42);
  *((void *)a1 + 40) = 0;
  *((void *)a1 + 41) = 0;
  *((void *)a1 + 42) = 0;
  uint64_t v15 = *((void *)a1 + 51);
  long long v16 = *(long long *)((char *)a1 + 344);
  long long v17 = *(long long *)((char *)a1 + 360);
  long long v18 = *(long long *)((char *)a1 + 392);
  long long v71 = *(long long *)((char *)a1 + 376);
  long long v72 = v18;
  long long v69 = v16;
  long long v70 = v17;
  uint64_t v68 = v14;
  uint64_t v73 = v15;
  char v74 = *((unsigned char *)a1 + 416);
  long long v19 = (long long *)((char *)a1 + 424);
  long long v20 = *(long long *)((char *)a1 + 424);
  *(_OWORD *)((char *)v75 + 12) = *(long long *)((char *)a1 + 436);
  v75[0] = v20;
  uint64_t v21 = (uint64_t)a1 + 456;
  long long __p = *(long long *)((char *)a1 + 456);
  uint64_t v77 = *((void *)a1 + 59);
  *((void *)a1 + 57) = 0;
  *((void *)a1 + 58) = 0;
  *((void *)a1 + 59) = 0;
  uint64_t v22 = (uint64_t)(a1 + 30);
  v78[0] = *((unsigned char *)a1 + 480);
  uint64_t v79 = *((void *)a1 + 61);
  long long v23 = a1[31];
  long long v24 = a1[32];
  *((void *)a1 + 61) = 0;
  *((void *)a1 + 62) = 0;
  long long v80 = v23;
  long long v81 = v24;
  uint64_t v82 = *((void *)a1 + 66);
  *((void *)a1 + 65) = 0;
  *((void *)a1 + 63) = 0;
  *((void *)a1 + 64) = 0;
  *((void *)a1 + 66) = 0;
  int v83 = *((_DWORD *)a1 + 134);
  long long v84 = a1[34];
  uint64_t v85 = *((void *)a1 + 70);
  *((void *)a1 + 69) = 0;
  *((void *)a1 + 68) = 0;
  *((void *)a1 + 70) = 0;
  uint64_t v86 = *((void *)a1 + 71);
  *((void *)a1 + 71) = 0;
  long long v25 = a1[36];
  long long v26 = a1[37];
  *((void *)a1 + 73) = 0;
  *((void *)a1 + 72) = 0;
  uint64_t v89 = *((void *)a1 + 76);
  long long v87 = v25;
  long long v88 = v26;
  *((void *)a1 + 75) = 0;
  *((void *)a1 + 74) = 0;
  *((void *)a1 + 76) = 0;
  long long v27 = *(long long *)((char *)a1 + 616);
  long long v91 = *(long long *)((char *)a1 + 632);
  long long v90 = v27;
  sub_301388((char **)a1, a2);
  long long v28 = *(_OWORD *)(a2 + 436);
  _OWORD *v19 = *(_OWORD *)(a2 + 424);
  *(_OWORD *)((char *)v19 + 12) = v28;
  uint64_t v29 = *((void *)a1 + 57);
  if (v29)
  {
    uint64_t v30 = *((void *)a1 + 58);
    uint64_t v31 = (void *)*((void *)a1 + 57);
    if (v30 != v29)
    {
      do
        uint64_t v30 = sub_30328C(v30 - 184);
      while (v30 != v29);
      uint64_t v31 = *(void **)v21;
    }
    *((void *)a1 + 58) = v29;
    operator delete(v31);
    *(void *)uint64_t v21 = 0;
    *(void *)(v21 + 8) = 0;
    *(void *)(v21 + 16) = 0;
  }
  unint64_t v32 = (void **)(a2 + 456);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)(a2 + 456);
  *((void *)a1 + 59) = *(void *)(a2 + 472);
  *(void *)(a2 + 456) = 0;
  *(void *)(a2 + 464) = 0;
  *(void *)(a2 + 472) = 0;
  sub_303024(v22, a2 + 480);
  sub_301388((char **)a2, (uint64_t)&v40);
  *(_OWORD *)(a2 + 424) = v75[0];
  *(_OWORD *)(a2 + 436) = *(_OWORD *)((char *)v75 + 12);
  uint64_t v33 = *(void *)(a2 + 456);
  if (v33)
  {
    uint64_t v34 = *(void *)(a2 + 464);
    uint64_t v35 = *(void **)(a2 + 456);
    if (v34 != v33)
    {
      do
        uint64_t v34 = sub_30328C(v34 - 184);
      while (v34 != v33);
      uint64_t v35 = *v32;
    }
    *(void *)(a2 + 464) = v33;
    operator delete(v35);
  }
  *(_OWORD *)unint64_t v32 = __p;
  *(void *)(a2 + 472) = v77;
  uint64_t v77 = 0;
  long long __p = 0uLL;
  sub_303024(a2 + 480, (uint64_t)v78);
  sub_303198((uint64_t)v78);
  uint64_t v36 = __p;
  if ((void)__p)
  {
    uint64_t v37 = *((void *)&__p + 1);
    uint64_t v38 = (void *)__p;
    if (*((void *)&__p + 1) != (void)__p)
    {
      do
        uint64_t v37 = sub_30328C(v37 - 184);
      while (v37 != v36);
      uint64_t v38 = (void *)__p;
    }
    *((void *)&__p + 1) = v36;
    operator delete(v38);
  }
  return sub_29D95C((uint64_t)&v40);
}

__n128 sub_338DCC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  long long v2 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v2;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  long long v3 = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = v3;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 96) = 0;
  long long v4 = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v4;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 120) = 0;
  long long v5 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v5;
  long long v6 = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v6;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  *(void *)(a2 + 192) = 0;
  uint64_t v7 = *(void *)(a2 + 216);
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 216) = v7;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a2 + 224) = 0;
  *(void *)(a2 + 232) = 0;
  *(void *)(a2 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a2 + 248) = 0;
  *(void *)(a2 + 256) = 0;
  *(void *)(a2 + 264) = 0;
  *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 272);
  long long v8 = *(_OWORD *)(a2 + 296);
  uint64_t v9 = *(void *)(a2 + 312);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 296) = v8;
  *(void *)(a1 + 312) = v9;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a2 + 328) = 0;
  *(void *)(a2 + 336) = 0;
  *(void *)(a2 + 320) = 0;
  long long v11 = *(_OWORD *)(a2 + 376);
  long long v10 = *(_OWORD *)(a2 + 392);
  long long v12 = *(_OWORD *)(a2 + 360);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(_OWORD *)(a1 + 376) = v11;
  *(_OWORD *)(a1 + 392) = v10;
  *(_OWORD *)(a1 + 360) = v12;
  *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 344);
  *(unsigned char *)(a1 + 416) = *(unsigned char *)(a2 + 416);
  long long v13 = *(_OWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 436) = *(_OWORD *)(a2 + 436);
  *(_OWORD *)(a1 + 424) = v13;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 456) = 0;
  uint64_t v14 = *(void *)(a2 + 464);
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(void *)(a1 + 464) = v14;
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(void *)(a2 + 464) = 0;
  *(void *)(a2 + 472) = 0;
  *(void *)(a2 + 456) = 0;
  *(unsigned char *)(a1 + 480) = *(unsigned char *)(a2 + 480);
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 488) = 0;
  uint64_t v15 = *(void *)(a2 + 496);
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  *(void *)(a1 + 496) = v15;
  *(void *)(a1 + 504) = *(void *)(a2 + 504);
  *(void *)(a2 + 488) = 0;
  *(void *)(a2 + 496) = 0;
  *(void *)(a2 + 504) = 0;
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 528) = 0;
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  *(void *)(a2 + 528) = 0;
  *(void *)(a2 + 520) = 0;
  *(void *)(a2 + 512) = 0;
  *(_DWORD *)(a1 + 536) = *(_DWORD *)(a2 + 536);
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 560) = 0;
  *(void *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
  *(void *)(a1 + 560) = *(void *)(a2 + 560);
  *(void *)(a2 + 552) = 0;
  *(void *)(a2 + 544) = 0;
  *(void *)(a2 + 560) = 0;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(void *)(a2 + 576) = 0;
  *(void *)(a2 + 568) = 0;
  *(void *)(a2 + 584) = 0;
  long long v16 = *(_OWORD *)(a2 + 592);
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  *(_OWORD *)(a1 + 592) = v16;
  *(void *)(a2 + 592) = 0;
  *(void *)(a2 + 608) = 0;
  *(void *)(a2 + 600) = 0;
  __n128 result = *(__n128 *)(a2 + 616);
  *(_OWORD *)(a1 + 632) = *(_OWORD *)(a2 + 632);
  *(__n128 *)(a1 + 616) = result;
  return result;
}

uint64_t sub_339074(long long *a1, long long *a2, long long *a3, uint64_t a4)
{
  sub_337984(a1, a2, (uint64_t)a3);
  uint64_t result = sub_358F0C(a4, (uint64_t)a3);
  if (result)
  {
    sub_338A24(a3, a4);
    uint64_t result = sub_358F0C((uint64_t)a3, (uint64_t)a2);
    if (result)
    {
      sub_338A24(a2, (uint64_t)a3);
      uint64_t result = sub_358F0C((uint64_t)a2, (uint64_t)a1);
      if (result)
      {
        return sub_338A24(a1, (uint64_t)a2);
      }
    }
  }
  return result;
}

uint64_t sub_339120(long long *a1, long long *a2, long long *a3, long long *a4, uint64_t a5)
{
  sub_339074(a1, a2, a3, (uint64_t)a4);
  uint64_t result = sub_358F0C(a5, (uint64_t)a4);
  if (result)
  {
    sub_338A24(a4, a5);
    uint64_t result = sub_358F0C((uint64_t)a4, (uint64_t)a3);
    if (result)
    {
      sub_338A24(a3, (uint64_t)a4);
      uint64_t result = sub_358F0C((uint64_t)a3, (uint64_t)a2);
      if (result)
      {
        sub_338A24(a2, (uint64_t)a3);
        uint64_t result = sub_358F0C((uint64_t)a2, (uint64_t)a1);
        if (result)
        {
          return sub_338A24(a1, (uint64_t)a2);
        }
      }
    }
  }
  return result;
}

uint64_t sub_3391F8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v6 = result;
    uint64_t v48 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= 0x2C3F35BA781948B1 * ((a4 - result) >> 3))
    {
      uint64_t v8 = (0x587E6B74F0329162 * ((a4 - result) >> 3)) | 1;
      uint64_t v9 = result + 648 * v8;
      uint64_t v10 = 0x587E6B74F0329162 * ((a4 - result) >> 3) + 2;
      if (v10 < a3 && sub_358F0C(result + 648 * v8, v9 + 648))
      {
        v9 += 648;
        uint64_t v8 = v10;
      }
      uint64_t result = sub_358F0C(v9, v5);
      if ((result & 1) == 0)
      {
        long long v49 = *(_OWORD *)v5;
        uint64_t v50 = *(void *)(v5 + 16);
        *(void *)(v5 + 8) = 0;
        *(void *)(v5 + 16) = 0;
        *(void *)uint64_t v5 = 0;
        long long v51 = *(_OWORD *)(v5 + 24);
        long long v52 = *(_OWORD *)(v5 + 40);
        uint64_t v53 = *(void *)(v5 + 56);
        *(void *)(v5 + 40) = 0;
        *(void *)(v5 + 48) = 0;
        long long v54 = *(_OWORD *)(v5 + 64);
        uint64_t v55 = *(void *)(v5 + 80);
        *(void *)(v5 + 72) = 0;
        *(void *)(v5 + 80) = 0;
        *(void *)(v5 + 56) = 0;
        *(void *)(v5 + 64) = 0;
        int v56 = *(_DWORD *)(v5 + 88);
        long long v11 = *(_OWORD *)(v5 + 96);
        uint64_t v58 = *(void *)(v5 + 112);
        long long v57 = v11;
        *(void *)(v5 + 96) = 0;
        *(void *)(v5 + 104) = 0;
        long long v12 = *(_OWORD *)(v5 + 120);
        uint64_t v60 = *(void *)(v5 + 136);
        long long v59 = v12;
        *(void *)(v5 + 112) = 0;
        *(void *)(v5 + 120) = 0;
        *(void *)(v5 + 128) = 0;
        *(void *)(v5 + 136) = 0;
        long long v13 = *(_OWORD *)(v5 + 144);
        int v62 = *(_DWORD *)(v5 + 160);
        long long v61 = v13;
        long long v14 = *(_OWORD *)(v5 + 168);
        uint64_t v64 = *(void *)(v5 + 184);
        long long v63 = v14;
        *(void *)(v5 + 168) = 0;
        *(void *)(v5 + 176) = 0;
        long long v65 = *(_OWORD *)(v5 + 192);
        *(void *)(v5 + 184) = 0;
        *(void *)(v5 + 192) = 0;
        uint64_t v15 = *(void *)(v5 + 208);
        uint64_t v16 = *(void *)(v5 + 216);
        *(void *)(v5 + 200) = 0;
        *(void *)(v5 + 208) = 0;
        uint64_t v66 = v15;
        uint64_t v67 = v16;
        long long v68 = *(_OWORD *)(v5 + 224);
        uint64_t v17 = *(void *)(v5 + 240);
        *(void *)(v5 + 224) = 0;
        *(void *)(v5 + 232) = 0;
        long long v70 = *(_OWORD *)(v5 + 248);
        uint64_t v18 = *(void *)(v5 + 264);
        uint64_t v69 = v17;
        uint64_t v71 = v18;
        *(void *)(v5 + 240) = 0;
        *(void *)(v5 + 248) = 0;
        *(void *)(v5 + 256) = 0;
        *(void *)(v5 + 264) = 0;
        char v72 = *(unsigned char *)(v5 + 272);
        uint64_t v19 = *(void *)(v5 + 312);
        long long v20 = *(_OWORD *)(v5 + 296);
        long long v73 = *(_OWORD *)(v5 + 280);
        long long v74 = v20;
        uint64_t v75 = v19;
        long long v76 = *(_OWORD *)(v5 + 320);
        uint64_t v21 = *(void *)(v5 + 336);
        *(void *)(v5 + 320) = 0;
        *(void *)(v5 + 328) = 0;
        *(void *)(v5 + 336) = 0;
        uint64_t v22 = *(void *)(v5 + 408);
        long long v23 = *(_OWORD *)(v5 + 344);
        long long v24 = *(_OWORD *)(v5 + 360);
        long long v25 = *(_OWORD *)(v5 + 392);
        long long v80 = *(_OWORD *)(v5 + 376);
        long long v81 = v25;
        long long v78 = v23;
        long long v79 = v24;
        uint64_t v77 = v21;
        uint64_t v82 = v22;
        char v83 = *(unsigned char *)(v5 + 416);
        long long v26 = *(_OWORD *)(v5 + 424);
        *(_OWORD *)((char *)v84 + 12) = *(_OWORD *)(v5 + 436);
        v84[0] = v26;
        long long __p = *(_OWORD *)(v5 + 456);
        uint64_t v86 = *(void *)(v5 + 472);
        *(void *)(v5 + 456) = 0;
        *(void *)(v5 + 464) = 0;
        *(void *)(v5 + 472) = 0;
        v87[0] = *(unsigned char *)(v5 + 480);
        uint64_t v88 = *(void *)(v5 + 488);
        long long v27 = *(_OWORD *)(v5 + 496);
        long long v28 = *(_OWORD *)(v5 + 512);
        *(void *)(v5 + 488) = 0;
        *(void *)(v5 + 496) = 0;
        long long v89 = v27;
        long long v90 = v28;
        uint64_t v91 = *(void *)(v5 + 528);
        *(void *)(v5 + 520) = 0;
        *(void *)(v5 + 504) = 0;
        *(void *)(v5 + 512) = 0;
        *(void *)(v5 + 528) = 0;
        int v92 = *(_DWORD *)(v5 + 536);
        long long v93 = *(_OWORD *)(v5 + 544);
        uint64_t v94 = *(void *)(v5 + 560);
        *(void *)(v5 + 552) = 0;
        *(void *)(v5 + 544) = 0;
        *(void *)(v5 + 560) = 0;
        uint64_t v95 = *(void *)(v5 + 568);
        *(void *)(v5 + 568) = 0;
        long long v29 = *(_OWORD *)(v5 + 576);
        long long v30 = *(_OWORD *)(v5 + 592);
        *(void *)(v5 + 584) = 0;
        *(void *)(v5 + 576) = 0;
        uint64_t v98 = *(void *)(v5 + 608);
        long long v96 = v29;
        long long v97 = v30;
        *(void *)(v5 + 600) = 0;
        *(void *)(v5 + 592) = 0;
        *(void *)(v5 + 608) = 0;
        long long v31 = *(_OWORD *)(v5 + 616);
        long long v100 = *(_OWORD *)(v5 + 632);
        long long v99 = v31;
        do
        {
          uint64_t v32 = v9;
          sub_301388((char **)v5, v9);
          uint64_t v33 = (_OWORD *)(v9 + 424);
          long long v34 = *(_OWORD *)(v9 + 436);
          *(_OWORD *)(v5 + 424) = *(_OWORD *)(v9 + 424);
          *(_OWORD *)(v5 + 436) = v34;
          uint64_t v35 = (void **)(v5 + 456);
          uint64_t v36 = *(void *)(v5 + 456);
          if (v36)
          {
            uint64_t v37 = *(void *)(v5 + 464);
            uint64_t v38 = *(void **)(v5 + 456);
            if (v37 != v36)
            {
              do
                uint64_t v37 = sub_30328C(v37 - 184);
              while (v37 != v36);
              uint64_t v38 = *v35;
            }
            *(void *)(v5 + 464) = v36;
            operator delete(v38);
            void *v35 = 0;
            *(void *)(v5 + 464) = 0;
            *(void *)(v5 + 472) = 0;
          }
          uint64_t v39 = (void **)(v32 + 456);
          *(_OWORD *)uint64_t v35 = *(_OWORD *)(v32 + 456);
          *(void *)(v5 + 472) = *(void *)(v32 + 472);
          *(void *)(v32 + 456) = 0;
          *(void *)(v32 + 464) = 0;
          *(void *)(v32 + 472) = 0;
          sub_303024(v5 + 480, v32 + 480);
          if (v48 < v8) {
            break;
          }
          uint64_t v40 = (2 * v8) | 1;
          uint64_t v9 = v6 + 648 * v40;
          uint64_t v8 = 2 * v8 + 2;
          if (v8 >= a3)
          {
            uint64_t v8 = v40;
          }
          else if (sub_358F0C(v6 + 648 * v40, v9 + 648))
          {
            v9 += 648;
          }
          else
          {
            uint64_t v8 = v40;
          }
          uint64_t v5 = v32;
        }
        while (!sub_358F0C(v9, (uint64_t)&v49));
        sub_301388((char **)v32, (uint64_t)&v49);
        long long v41 = *(_OWORD *)((char *)v84 + 12);
        _OWORD *v33 = v84[0];
        *(_OWORD *)((char *)v33 + 12) = v41;
        uint64_t v42 = *(void *)(v32 + 456);
        if (v42)
        {
          uint64_t v43 = *(void *)(v32 + 464);
          uint64_t v44 = *(void **)(v32 + 456);
          if (v43 != v42)
          {
            do
              uint64_t v43 = sub_30328C(v43 - 184);
            while (v43 != v42);
            uint64_t v44 = *v39;
          }
          *(void *)(v32 + 464) = v42;
          operator delete(v44);
          *uint64_t v39 = 0;
          *(void *)(v32 + 464) = 0;
          *(void *)(v32 + 472) = 0;
        }
        *(_OWORD *)uint64_t v39 = __p;
        *(void *)(v32 + 472) = v86;
        long long __p = 0uLL;
        uint64_t v86 = 0;
        sub_303024(v32 + 480, (uint64_t)v87);
        sub_303198((uint64_t)v87);
        uint64_t v45 = __p;
        if ((void)__p)
        {
          uint64_t v46 = *((void *)&__p + 1);
          int v47 = (void *)__p;
          if (*((void *)&__p + 1) != (void)__p)
          {
            do
              uint64_t v46 = sub_30328C(v46 - 184);
            while (v46 != v45);
            int v47 = (void *)__p;
          }
          *((void *)&__p + 1) = v45;
          operator delete(v47);
        }
        return sub_29D95C((uint64_t)&v49);
      }
    }
  }
  return result;
}

void sub_3396BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_301314((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_3396D0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    long long v50 = *(_OWORD *)result;
    uint64_t v51 = *(void *)(result + 16);
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = 0;
    long long v52 = *(_OWORD *)(result + 24);
    long long v53 = *(_OWORD *)(result + 40);
    uint64_t v54 = *(void *)(result + 56);
    *(void *)(result + 40) = 0;
    *(void *)(result + 48) = 0;
    long long v55 = *(_OWORD *)(result + 64);
    uint64_t v56 = *(void *)(result + 80);
    *(void *)(result + 72) = 0;
    *(void *)(result + 80) = 0;
    *(void *)(result + 56) = 0;
    *(void *)(result + 64) = 0;
    int v57 = *(_DWORD *)(result + 88);
    long long v7 = *(_OWORD *)(result + 96);
    uint64_t v59 = *(void *)(result + 112);
    long long v58 = v7;
    *(void *)(result + 96) = 0;
    *(void *)(result + 104) = 0;
    long long v8 = *(_OWORD *)(result + 120);
    uint64_t v61 = *(void *)(result + 136);
    long long v60 = v8;
    *(void *)(result + 112) = 0;
    *(void *)(result + 120) = 0;
    *(void *)(result + 128) = 0;
    *(void *)(result + 136) = 0;
    long long v9 = *(_OWORD *)(result + 144);
    int v63 = *(_DWORD *)(result + 160);
    long long v62 = v9;
    long long v10 = *(_OWORD *)(result + 168);
    uint64_t v65 = *(void *)(result + 184);
    long long v64 = v10;
    *(void *)(result + 168) = 0;
    *(void *)(result + 176) = 0;
    long long v66 = *(_OWORD *)(result + 192);
    *(void *)(result + 184) = 0;
    *(void *)(result + 192) = 0;
    uint64_t v11 = *(void *)(result + 208);
    uint64_t v12 = *(void *)(result + 216);
    *(void *)(result + 200) = 0;
    *(void *)(result + 208) = 0;
    uint64_t v67 = v11;
    uint64_t v68 = v12;
    long long v69 = *(_OWORD *)(result + 224);
    uint64_t v13 = *(void *)(result + 240);
    *(void *)(result + 224) = 0;
    *(void *)(result + 232) = 0;
    long long v71 = *(_OWORD *)(result + 248);
    uint64_t v14 = *(void *)(result + 264);
    uint64_t v70 = v13;
    uint64_t v72 = v14;
    *(void *)(result + 240) = 0;
    *(void *)(result + 248) = 0;
    *(void *)(result + 256) = 0;
    *(void *)(result + 264) = 0;
    char v73 = *(unsigned char *)(result + 272);
    uint64_t v15 = *(void *)(result + 312);
    long long v16 = *(_OWORD *)(result + 296);
    long long v74 = *(_OWORD *)(result + 280);
    long long v75 = v16;
    uint64_t v76 = v15;
    long long v77 = *(_OWORD *)(result + 320);
    uint64_t v17 = *(void *)(result + 336);
    *(void *)(result + 320) = 0;
    *(void *)(result + 328) = 0;
    *(void *)(result + 336) = 0;
    uint64_t v18 = *(void *)(result + 408);
    long long v19 = *(_OWORD *)(result + 344);
    long long v20 = *(_OWORD *)(result + 360);
    long long v21 = *(_OWORD *)(result + 392);
    long long v81 = *(_OWORD *)(result + 376);
    long long v82 = v21;
    long long v79 = v19;
    long long v80 = v20;
    uint64_t v78 = v17;
    uint64_t v83 = v18;
    char v84 = *(unsigned char *)(result + 416);
    long long v22 = *(_OWORD *)(result + 424);
    *(_OWORD *)((char *)v85 + 12) = *(_OWORD *)(result + 436);
    v85[0] = v22;
    long long __p = *(_OWORD *)(result + 456);
    long long v87 = *(char **)(result + 472);
    *(void *)(result + 456) = 0;
    *(void *)(result + 464) = 0;
    *(void *)(result + 472) = 0;
    v88[0] = *(unsigned char *)(result + 480);
    uint64_t v89 = *(void *)(result + 488);
    long long v23 = *(_OWORD *)(result + 496);
    long long v24 = *(_OWORD *)(result + 512);
    *(void *)(result + 488) = 0;
    *(void *)(result + 496) = 0;
    long long v90 = v23;
    long long v91 = v24;
    uint64_t v92 = *(void *)(result + 528);
    *(void *)(result + 520) = 0;
    *(void *)(result + 504) = 0;
    *(void *)(result + 512) = 0;
    *(void *)(result + 528) = 0;
    int v93 = *(_DWORD *)(result + 536);
    long long v94 = *(_OWORD *)(result + 544);
    uint64_t v95 = *(void *)(result + 560);
    *(void *)(result + 552) = 0;
    *(void *)(result + 544) = 0;
    *(void *)(result + 560) = 0;
    uint64_t v96 = *(void *)(result + 568);
    *(void *)(result + 568) = 0;
    long long v25 = *(_OWORD *)(result + 576);
    long long v26 = *(_OWORD *)(result + 592);
    *(void *)(result + 584) = 0;
    *(void *)(result + 576) = 0;
    uint64_t v99 = *(void *)(result + 608);
    long long v97 = v25;
    long long v98 = v26;
    *(void *)(result + 600) = 0;
    *(void *)(result + 592) = 0;
    *(void *)(result + 608) = 0;
    long long v27 = *(_OWORD *)(result + 616);
    long long v101 = *(_OWORD *)(result + 632);
    long long v100 = v27;
    long long v28 = (char **)sub_339B98(result, a3, a4);
    long long v29 = v28;
    long long v30 = v28 + 53;
    if (v28 == (char **)(a2 - 648))
    {
      sub_301388(v28, (uint64_t)&v50);
      long long v42 = *(_OWORD *)((char *)v85 + 12);
      *long long v30 = v85[0];
      *(_OWORD *)((char *)v30 + 12) = v42;
      uint64_t v43 = (void **)(v29 + 57);
      uint64_t v44 = v29[57];
      if (v44)
      {
        uint64_t v45 = (uint64_t)v29[58];
        uint64_t v46 = v29[57];
        if ((char *)v45 != v44)
        {
          do
            uint64_t v45 = sub_30328C(v45 - 184);
          while ((char *)v45 != v44);
          uint64_t v46 = (char *)*v43;
        }
        v29[58] = v44;
        operator delete(v46);
        void *v43 = 0;
        v29[58] = 0;
        v29[59] = 0;
      }
      *(_OWORD *)uint64_t v43 = __p;
      v29[59] = v87;
      long long __p = 0uLL;
      long long v87 = 0;
      sub_303024((uint64_t)(v29 + 60), (uint64_t)v88);
      sub_303198((uint64_t)v88);
      long long v41 = (void *)__p;
      if (!(void)__p) {
        return sub_29D95C((uint64_t)&v50);
      }
    }
    else
    {
      uint64_t v49 = a3;
      sub_301388(v28, a2 - 648);
      long long v31 = *(_OWORD *)(a2 - 212);
      *long long v30 = *(_OWORD *)(a2 - 224);
      *(_OWORD *)((char *)v30 + 12) = v31;
      uint64_t v32 = (void **)(v29 + 57);
      uint64_t v33 = v29[57];
      if (v33)
      {
        uint64_t v34 = (uint64_t)v29[58];
        uint64_t v35 = v29[57];
        if ((char *)v34 != v33)
        {
          do
            uint64_t v34 = sub_30328C(v34 - 184);
          while ((char *)v34 != v33);
          uint64_t v35 = (char *)*v32;
        }
        v29[58] = v33;
        operator delete(v35);
        void *v32 = 0;
        v29[58] = 0;
        v29[59] = 0;
      }
      uint64_t v36 = (void **)(a2 - 192);
      *(_OWORD *)uint64_t v32 = *(_OWORD *)(a2 - 192);
      v29[59] = *(char **)(a2 - 176);
      void *v36 = 0;
      v36[1] = 0;
      v36[2] = 0;
      sub_303024((uint64_t)(v29 + 60), a2 - 168);
      uint64_t v37 = (uint64_t)(v29 + 81);
      sub_301388((char **)(a2 - 648), (uint64_t)&v50);
      *(_OWORD *)(a2 - 224) = v85[0];
      *(_OWORD *)(a2 - 212) = *(_OWORD *)((char *)v85 + 12);
      uint64_t v38 = *(void *)(a2 - 192);
      if (v38)
      {
        uint64_t v39 = *(void *)(a2 - 184);
        uint64_t v40 = *v36;
        if (v39 != v38)
        {
          do
            uint64_t v39 = sub_30328C(v39 - 184);
          while (v39 != v38);
          uint64_t v40 = *v36;
        }
        *(void *)(a2 - 184) = v38;
        operator delete(v40);
        void *v36 = 0;
        *(void *)(a2 - 184) = 0;
        *(void *)(a2 - 176) = 0;
      }
      *(_OWORD *)(a2 - 192) = __p;
      *(void *)(a2 - 176) = v87;
      long long v87 = 0;
      long long __p = 0uLL;
      sub_303024(a2 - 168, (uint64_t)v88);
      sub_339CD0(v6, v37, v49, 0x2C3F35BA781948B1 * ((v37 - v6) >> 3));
      sub_303198((uint64_t)v88);
      long long v41 = (void *)__p;
      if (!(void)__p) {
        return sub_29D95C((uint64_t)&v50);
      }
    }
    uint64_t v47 = *((void *)&__p + 1);
    uint64_t v48 = v41;
    if (*((void **)&__p + 1) != v41)
    {
      do
        uint64_t v47 = sub_30328C(v47 - 184);
      while ((void *)v47 != v41);
      uint64_t v48 = (void *)__p;
    }
    *((void *)&__p + 1) = v41;
    operator delete(v48);
    return sub_29D95C((uint64_t)&v50);
  }
  return result;
}

void sub_339B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_301314((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_339B98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v9 = a1 + 648 * v5 + 648;
    uint64_t v10 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < a3 && sub_358F0C(v9, v9 + 648))
    {
      v9 += 648;
      uint64_t v5 = v11;
    }
    sub_301388((char **)a1, v9);
    long long v12 = *(_OWORD *)(v9 + 436);
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(v9 + 424);
    *(_OWORD *)(a1 + 436) = v12;
    uint64_t v13 = *(void *)(a1 + 456);
    if (v13)
    {
      uint64_t v14 = (void **)(a1 + 456);
      uint64_t v15 = *(void *)(a1 + 464);
      long long v16 = *(void **)(a1 + 456);
      if (v15 != v13)
      {
        do
          uint64_t v15 = sub_30328C(v15 - 184);
        while (v15 != v13);
        long long v16 = *v14;
      }
      *(void *)(a1 + 464) = v13;
      operator delete(v16);
      *uint64_t v14 = 0;
      *(void *)(a1 + 464) = 0;
      *(void *)(a1 + 472) = 0;
    }
    uint64_t v8 = *(void *)(v9 + 464);
    *(void *)(a1 + 456) = *(void *)(v9 + 456);
    *(void *)(a1 + 464) = v8;
    *(void *)(a1 + 472) = *(void *)(v9 + 472);
    *(void *)(v9 + 456) = 0;
    *(void *)(v9 + 464) = 0;
    *(void *)(v9 + 472) = 0;
    sub_303024(a1 + 480, v9 + 480);
    a1 = v9;
  }
  while (v5 <= v7);
  return v9;
}

uint64_t sub_339CD0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v5 = result;
    unint64_t v6 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v7 = result + 648 * v6;
    uint64_t v8 = a2 - 648;
    uint64_t result = sub_358F0C(v7, a2 - 648);
    if (result)
    {
      long long v41 = *(_OWORD *)v8;
      uint64_t v42 = *(void *)(v8 + 16);
      *(void *)uint64_t v8 = 0;
      *(void *)(v8 + 8) = 0;
      *(void *)(v8 + 16) = 0;
      long long v43 = *(_OWORD *)(v8 + 24);
      long long v44 = *(_OWORD *)(v8 + 40);
      uint64_t v45 = *(void *)(v8 + 56);
      *(void *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      long long v46 = *(_OWORD *)(v8 + 64);
      uint64_t v47 = *(void *)(v8 + 80);
      *(void *)(v8 + 72) = 0;
      *(void *)(v8 + 80) = 0;
      *(void *)(v8 + 56) = 0;
      *(void *)(v8 + 64) = 0;
      int v48 = *(_DWORD *)(v8 + 88);
      long long v9 = *(_OWORD *)(v8 + 96);
      uint64_t v50 = *(void *)(v8 + 112);
      long long v49 = v9;
      *(void *)(v8 + 96) = 0;
      *(void *)(v8 + 104) = 0;
      long long v10 = *(_OWORD *)(v8 + 120);
      uint64_t v52 = *(void *)(v8 + 136);
      long long v51 = v10;
      *(void *)(v8 + 112) = 0;
      *(void *)(v8 + 120) = 0;
      *(void *)(v8 + 128) = 0;
      *(void *)(v8 + 136) = 0;
      long long v11 = *(_OWORD *)(v8 + 144);
      int v54 = *(_DWORD *)(v8 + 160);
      long long v53 = v11;
      long long v12 = *(_OWORD *)(v8 + 168);
      uint64_t v56 = *(void *)(v8 + 184);
      long long v55 = v12;
      *(void *)(v8 + 168) = 0;
      *(void *)(v8 + 176) = 0;
      long long v57 = *(_OWORD *)(v8 + 192);
      *(void *)(v8 + 184) = 0;
      *(void *)(v8 + 192) = 0;
      uint64_t v13 = *(void *)(v8 + 208);
      uint64_t v14 = *(void *)(v8 + 216);
      *(void *)(v8 + 200) = 0;
      *(void *)(v8 + 208) = 0;
      uint64_t v58 = v13;
      uint64_t v59 = v14;
      long long v60 = *(_OWORD *)(v8 + 224);
      uint64_t v15 = *(void *)(v8 + 240);
      *(void *)(v8 + 224) = 0;
      *(void *)(v8 + 232) = 0;
      long long v62 = *(_OWORD *)(v8 + 248);
      uint64_t v16 = *(void *)(v8 + 264);
      uint64_t v61 = v15;
      uint64_t v63 = v16;
      *(void *)(v8 + 240) = 0;
      *(void *)(v8 + 248) = 0;
      *(void *)(v8 + 256) = 0;
      *(void *)(v8 + 264) = 0;
      char v64 = *(unsigned char *)(v8 + 272);
      uint64_t v17 = *(void *)(v8 + 312);
      long long v18 = *(_OWORD *)(a2 - 352);
      long long v65 = *(_OWORD *)(a2 - 368);
      long long v66 = v18;
      uint64_t v67 = v17;
      long long v68 = *(_OWORD *)(v8 + 320);
      uint64_t v19 = *(void *)(v8 + 336);
      *(void *)(v8 + 320) = 0;
      *(void *)(v8 + 328) = 0;
      *(void *)(v8 + 336) = 0;
      long long v20 = *(_OWORD *)(a2 - 304);
      long long v21 = *(_OWORD *)(a2 - 288);
      uint64_t v22 = *(void *)(a2 - 240);
      long long v23 = *(_OWORD *)(a2 - 256);
      long long v72 = *(_OWORD *)(a2 - 272);
      long long v73 = v23;
      long long v70 = v20;
      long long v71 = v21;
      uint64_t v69 = v19;
      uint64_t v74 = v22;
      char v75 = *(unsigned char *)(a2 - 232);
      long long v24 = *(_OWORD *)(a2 - 224);
      *(_OWORD *)((char *)v76 + 12) = *(_OWORD *)(a2 - 212);
      v76[0] = v24;
      long long __p = *(_OWORD *)(a2 - 192);
      uint64_t v78 = *(void *)(a2 - 176);
      *(void *)(a2 - 192) = 0;
      *(void *)(a2 - 184) = 0;
      *(void *)(a2 - 176) = 0;
      v79[0] = *(unsigned char *)(a2 - 168);
      long long v80 = *(_OWORD *)(a2 - 160);
      uint64_t v81 = *(void *)(a2 - 144);
      *(void *)(a2 - 160) = 0;
      *(void *)(a2 - 152) = 0;
      long long v82 = *(_OWORD *)(a2 - 136);
      uint64_t v83 = *(void *)(a2 - 120);
      *(void *)(a2 - 144) = 0;
      *(void *)(a2 - 136) = 0;
      *(void *)(a2 - 128) = 0;
      *(void *)(a2 - 120) = 0;
      int v84 = *(_DWORD *)(a2 - 112);
      long long v85 = *(_OWORD *)(a2 - 104);
      uint64_t v86 = *(void *)(a2 - 88);
      *(void *)(a2 - 104) = 0;
      *(void *)(a2 - 96) = 0;
      long long v87 = *(_OWORD *)(a2 - 80);
      uint64_t v88 = *(void *)(a2 - 64);
      *(void *)(a2 - 88) = 0;
      *(void *)(a2 - 80) = 0;
      *(void *)(a2 - 72) = 0;
      *(void *)(a2 - 64) = 0;
      long long v25 = *(_OWORD *)(a2 - 56);
      uint64_t v90 = *(void *)(a2 - 40);
      long long v89 = v25;
      *(void *)(a2 - 56) = 0;
      *(void *)(a2 - 48) = 0;
      *(void *)(a2 - 40) = 0;
      long long v26 = *(_OWORD *)(a2 - 32);
      long long v92 = *(_OWORD *)(a2 - 16);
      long long v91 = v26;
      do
      {
        uint64_t v27 = v7;
        sub_301388((char **)v8, v7);
        long long v28 = (_OWORD *)(v7 + 424);
        long long v29 = *(_OWORD *)(v7 + 436);
        *(_OWORD *)(v8 + 424) = *(_OWORD *)(v7 + 424);
        *(_OWORD *)(v8 + 436) = v29;
        long long v30 = (void **)(v8 + 456);
        uint64_t v31 = *(void *)(v8 + 456);
        if (v31)
        {
          uint64_t v32 = *(void *)(v8 + 464);
          uint64_t v33 = *(void **)(v8 + 456);
          if (v32 != v31)
          {
            do
              uint64_t v32 = sub_30328C(v32 - 184);
            while (v32 != v31);
            uint64_t v33 = *v30;
          }
          *(void *)(v8 + 464) = v31;
          operator delete(v33);
          *long long v30 = 0;
          *(void *)(v8 + 464) = 0;
          *(void *)(v8 + 472) = 0;
        }
        uint64_t v34 = (void **)(v27 + 456);
        *(_OWORD *)long long v30 = *(_OWORD *)(v27 + 456);
        *(void *)(v8 + 472) = *(void *)(v27 + 472);
        *(void *)(v27 + 456) = 0;
        *(void *)(v27 + 464) = 0;
        *(void *)(v27 + 472) = 0;
        sub_303024(v8 + 480, v27 + 480);
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v7 = v5 + 648 * v6;
        uint64_t v8 = v27;
      }
      while (sub_358F0C(v7, (uint64_t)&v41));
      sub_301388((char **)v27, (uint64_t)&v41);
      _OWORD *v28 = v76[0];
      *(_OWORD *)((char *)v28 + 12) = *(_OWORD *)((char *)v76 + 12);
      uint64_t v35 = *(void *)(v27 + 456);
      if (v35)
      {
        uint64_t v36 = *(void *)(v27 + 464);
        uint64_t v37 = *(void **)(v27 + 456);
        if (v36 != v35)
        {
          do
            uint64_t v36 = sub_30328C(v36 - 184);
          while (v36 != v35);
          uint64_t v37 = *v34;
        }
        *(void *)(v27 + 464) = v35;
        operator delete(v37);
        void *v34 = 0;
        *(void *)(v27 + 464) = 0;
        *(void *)(v27 + 472) = 0;
      }
      *(_OWORD *)uint64_t v34 = __p;
      *(void *)(v27 + 472) = v78;
      uint64_t v78 = 0;
      long long __p = 0uLL;
      sub_303024(v27 + 480, (uint64_t)v79);
      sub_303198((uint64_t)v79);
      uint64_t v38 = __p;
      if ((void)__p)
      {
        uint64_t v39 = *((void *)&__p + 1);
        uint64_t v40 = (void *)__p;
        if (*((void *)&__p + 1) != (void)__p)
        {
          do
            uint64_t v39 = sub_30328C(v39 - 184);
          while (v39 != v38);
          uint64_t v40 = (void *)__p;
        }
        *((void *)&__p + 1) = v38;
        operator delete(v40);
      }
      return sub_29D95C((uint64_t)&v41);
    }
  }
  return result;
}

void sub_33A0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_301314((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_33A0F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    sub_33A1B4(a3, *(void *)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        sub_303198(v7 - 168);
        uint64_t v9 = *(void *)(v7 - 192);
        if (v9)
        {
          uint64_t v10 = *(void *)(v7 - 184);
          long long v11 = *(void **)(v7 - 192);
          if (v10 != v9)
          {
            do
              uint64_t v10 = sub_30328C(v10 - 184);
            while (v10 != v9);
            long long v11 = *(void **)(v7 - 192);
          }
          *(void *)(v7 - 184) = v9;
          operator delete(v11);
        }
        v7 -= 648;
        sub_29D95C(v7);
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t sub_33A1B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_301388((char **)a3, v4);
      long long v7 = *(_OWORD *)(v4 + 436);
      *(_OWORD *)(a3 + 424) = *(_OWORD *)(v4 + 424);
      *(_OWORD *)(a3 + 436) = v7;
      uint64_t v8 = *(void *)(a3 + 456);
      if (v8)
      {
        uint64_t v9 = (void **)(a3 + 456);
        uint64_t v10 = *(void *)(a3 + 464);
        long long v11 = *(void **)(a3 + 456);
        if (v10 != v8)
        {
          do
            uint64_t v10 = sub_30328C(v10 - 184);
          while (v10 != v8);
          long long v11 = *v9;
        }
        *(void *)(a3 + 464) = v8;
        operator delete(v11);
        *uint64_t v9 = 0;
        *(void *)(a3 + 464) = 0;
        *(void *)(a3 + 472) = 0;
      }
      uint64_t v6 = *(void *)(v4 + 464);
      *(void *)(a3 + 456) = *(void *)(v4 + 456);
      *(void *)(a3 + 464) = v6;
      *(void *)(a3 + 472) = *(void *)(v4 + 472);
      *(void *)(v4 + 456) = 0;
      *(void *)(v4 + 464) = 0;
      *(void *)(v4 + 472) = 0;
      sub_303024(a3 + 480, v4 + 480);
      v4 += 648;
      a3 += 648;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t sub_33A2A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if (a1 != a2)
  {
    do
    {
      uint64_t v4 = a1 + 648;
      if (a1 + 648 == a2) {
        return a2;
      }
      int v5 = sub_358F18(a1, a1 + 648);
      a1 = v4;
    }
    while (!v5);
    uint64_t v6 = v4 + 648;
    uint64_t v7 = v4 - 648;
    while (v6 != a2)
    {
      uint64_t v8 = v6;
      if ((sub_358F18(v7, v6) & 1) == 0)
      {
        sub_301388((char **)(v7 + 648), v8);
        long long v9 = *(_OWORD *)(v4 + 1084);
        *(_OWORD *)(v7 + 1072) = *(_OWORD *)(v4 + 1072);
        *(_OWORD *)(v7 + 1084) = v9;
        uint64_t v10 = *(void *)(v7 + 1104);
        if (v10)
        {
          long long v11 = (void **)(v7 + 1104);
          uint64_t v12 = *(void *)(v7 + 1112);
          uint64_t v13 = *(void **)(v7 + 1104);
          if (v12 != v10)
          {
            do
              uint64_t v12 = sub_30328C(v12 - 184);
            while (v12 != v10);
            uint64_t v13 = *v11;
          }
          *(void *)(v7 + 1112) = v10;
          operator delete(v13);
          void *v11 = 0;
          *(void *)(v7 + 1112) = 0;
          *(void *)(v7 + 1120) = 0;
        }
        *(_OWORD *)(v7 + 1104) = *(_OWORD *)(v4 + 1104);
        *(void *)(v7 + 1120) = *(void *)(v4 + 1120);
        *(void *)(v4 + 1112) = 0;
        *(void *)(v4 + 1104) = 0;
        *(void *)(v4 + 1120) = 0;
        sub_303024(v7 + 1128, v4 + 1128);
        v7 += 648;
      }
      uint64_t v6 = v8 + 648;
      uint64_t v4 = v8;
    }
    return v7 + 648;
  }
  return v3;
}

uint64_t sub_33A3E8(uint64_t result)
{
  long long v2 = *(_DWORD **)result;
  v1 = *(_DWORD **)(result + 8);
  if (*(_DWORD **)result != v1 && *(void *)result + 12 != (void)v1)
  {
    uint64_t v4 = 0;
    LODWORD(v5) = *v2;
    while (1)
    {
      int v6 = v5;
      uint64_t v7 = &v2[v4];
      unint64_t v5 = *(void *)&v2[v4 + 3];
      if (v6 == v5
        && *((unsigned __int16 *)v7 + 2) == WORD2(v5)
        && (HIWORD(v5) & 1) != (BYTE2(v2[v4 + 1]) == 0)
        && v7[2] == v7[5])
      {
        break;
      }
      v4 += 3;
      if (&v2[v4 + 3] == v1) {
        return result;
      }
    }
    uint64_t v8 = &v2[v4];
    if (v8 != v1)
    {
      long long v9 = v8 + 6;
      if (v8 + 6 != v1)
      {
        do
        {
          if (__PAIR64__(*((unsigned __int16 *)v8 + 2), *v8) != __PAIR64__((unsigned __int16)WORD2(*(void *)v9), *(void *)v9)|| (HIWORD(*(void *)v9) & 1) == (*((unsigned char *)v8 + 6) == 0)|| v8[2] != v9[2])
          {
            int v10 = v9[2];
            *(void *)(v8 + 3) = *(void *)v9;
            v8 += 3;
            v8[2] = v10;
          }
          v9 += 3;
        }
        while (v9 != v1);
        v1 = *(_DWORD **)(result + 8);
      }
      if (v8 + 3 != v1) {
        *(void *)(result + 8) = v8 + 3;
      }
    }
  }
  return result;
}

uint64_t sub_33A554(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v11) >> 2);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v27 = a2 - 3;
          unint64_t v28 = (*(void *)v11 >> 16) & 0xFFFF0000 | (*(void *)v11 << 32) | ((*(void *)v11 & 0xFF000000000000) == 0);
          if ((((unint64_t)*(a2 - 3) << 32) | ((unint64_t)*((unsigned __int16 *)a2 - 4) << 16) | (*((unsigned char *)a2 - 6) == 0)) < v28
            || v28 >= ((*(void *)v27 >> 16) & 0xFFFF0000 | (*(void *)v27 << 32) | (unint64_t)((*(void *)v27 & 0xFF000000000000) == 0))
            && *(a2 - 1) < *(_DWORD *)(v11 + 8))
          {
            unsigned int v33 = *(_DWORD *)(v11 + 8);
            uint64_t v31 = *(void *)v11;
            uint64_t v29 = *(void *)v27;
            *(_DWORD *)(v11 + 8) = *(a2 - 1);
            *(void *)uint64_t v11 = v29;
            *(void *)uint64_t v27 = v31;
            *(a2 - 1) = v33;
          }
          break;
        case 3uLL:
          uint64_t result = sub_33ACF8((uint64_t *)v11, (unsigned int *)(v11 + 12), a2 - 3);
          break;
        case 4uLL:
          uint64_t result = sub_33B8E0(v11, (unsigned int *)(v11 + 12), (unsigned int *)(v11 + 24), a2 - 3);
          break;
        case 5uLL:
          uint64_t result = sub_33BB04(v11, (unsigned int *)(v11 + 12), (unsigned int *)(v11 + 24), (unsigned int *)(v11 + 36), a2 - 3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 287) {
      break;
    }
    if (v13 == 1)
    {
      if ((unsigned int *)v11 != a2)
      {
        return (uint64_t)sub_33BDD8(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = (unsigned int *)(v11 + 12 * (v15 >> 1));
    if ((unint64_t)v14 >= 0x601)
    {
      sub_33ACF8((uint64_t *)v11, (unsigned int *)(v11 + 12 * (v15 >> 1)), a2 - 3);
      uint64_t v18 = 12 * v16;
      uint64_t v19 = (unsigned int *)(12 * v16 + v11 - 12);
      sub_33ACF8((uint64_t *)(v11 + 12), v19, a2 - 6);
      long long v20 = (uint64_t *)(v11 + 24);
      long long v21 = (unsigned int *)(v11 + 12 + v18);
      sub_33ACF8(v20, v21, a2 - 9);
      sub_33ACF8((uint64_t *)v19, v17, v21);
      unsigned int v32 = *(_DWORD *)(v10 + 8);
      uint64_t v30 = *(void *)v10;
      uint64_t v22 = *(void *)v17;
      *(_DWORD *)(v10 + 8) = v17[2];
      *(void *)uint64_t v10 = v22;
      v17[2] = v32;
      *(void *)uint64_t v17 = v30;
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      sub_33ACF8((uint64_t *)(v11 + 12 * (v15 >> 1)), (unsigned int *)v11, a2 - 3);
      if (a5) {
        goto LABEL_16;
      }
    }
    unint64_t v23 = (*(void *)v10 >> 16) & 0xFFFF0000 | (*(void *)v10 << 32) | ((*(void *)v10 & 0xFF000000000000) == 0);
    if ((((unint64_t)*(unsigned int *)(v10 - 12) << 32) | ((unint64_t)*(unsigned __int16 *)(v10 - 8) << 16) | (*(unsigned char *)(v10 - 6) == 0)) >= v23
      && (v23 < ((*(void *)(v10 - 12) >> 16) & 0xFFFF0000 | (*(void *)(v10 - 12) << 32) | (unint64_t)((*(void *)(v10 - 12) & 0xFF000000000000) == 0))
       || *(_DWORD *)(v10 - 4) >= *(_DWORD *)(v10 + 8)))
    {
      uint64_t result = (uint64_t)sub_33B038((uint64_t *)v10, (uint64_t *)a2);
      uint64_t v11 = result;
      goto LABEL_21;
    }
LABEL_16:
    long long v24 = (unsigned int *)sub_33B2BC((uint64_t *)v10, (unint64_t)a2);
    if ((v25 & 1) == 0) {
      goto LABEL_19;
    }
    BOOL v26 = sub_33B55C(v10, v24);
    uint64_t v11 = (uint64_t)(v24 + 3);
    uint64_t result = sub_33B55C((uint64_t)(v24 + 3), a2);
    if (result)
    {
      a4 = -v13;
      a2 = v24;
      if (v26) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v26)
    {
LABEL_19:
      uint64_t result = sub_33A554(v10, v24, a3, -v13, a5 & 1);
      uint64_t v11 = (uint64_t)(v24 + 3);
LABEL_21:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return sub_33AA4C(v11, (uint64_t)a2);
  }
  else
  {
    return sub_33ABC4(v11, (uint64_t)a2);
  }
}

uint64_t sub_33AA4C(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 12;
    if (result + 12 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      do
      {
        uint64_t v6 = v4;
        uint64_t v4 = v2;
        unint64_t v7 = (*(void *)v6 >> 16) & 0xFFFF0000 | (*(void *)v6 << 32) | ((*(void *)v6 & 0xFF000000000000) == 0);
        unint64_t v8 = *(void *)(v6 + 12);
        if ((((unint64_t)*(unsigned int *)(v6 + 12) << 32) | ((unint64_t)*(unsigned __int16 *)(v6 + 16) << 16) | (*(unsigned char *)(v6 + 18) == 0)) >= v7)
        {
          uint64_t v11 = v8 & 0xFF000000000000;
          if (v7 < ((v8 >> 16) & 0xFFFF0000 | ((v8 & 0xFF000000000000) == 0) | ((unint64_t)v8 << 32))) {
            goto LABEL_6;
          }
          unsigned int v9 = *(_DWORD *)(v6 + 20);
          if (v9 >= *(_DWORD *)(v6 + 8)) {
            goto LABEL_6;
          }
          uint64_t v10 = v8 << 32;
        }
        else
        {
          unsigned int v9 = *(_DWORD *)(v6 + 20);
          uint64_t v10 = v8 << 32;
          uint64_t v11 = v8 & 0xFF000000000000;
        }
        BOOL v12 = v11 == 0;
        *(void *)uint64_t v4 = *(void *)v6;
        *(_DWORD *)(v4 + 8) = *(_DWORD *)(v6 + 8);
        uint64_t v5 = result;
        if (v6 == result) {
          goto LABEL_5;
        }
        unint64_t v13 = (v8 >> 16) & 0xFFFF0000 | v10 | v12;
        uint64_t v14 = v3;
        while (1)
        {
          uint64_t v15 = result + v14;
          unint64_t v16 = (*(void *)(result + v14 - 12) >> 16) & 0xFFFF0000 | (*(void *)(result + v14 - 12) << 32) | ((*(void *)(result + v14 - 12) & 0xFF000000000000) == 0);
          if (v13 < v16) {
            goto LABEL_11;
          }
          if (v16 < v13) {
            break;
          }
          if (v9 >= *(_DWORD *)(v15 - 4))
          {
            uint64_t v5 = result + v14;
            goto LABEL_5;
          }
LABEL_11:
          v6 -= 12;
          *(void *)uint64_t v15 = *(void *)(result + v14 - 12);
          *(_DWORD *)(v15 + 8) = *(_DWORD *)(result + v14 - 4);
          v14 -= 12;
          if (!v14)
          {
            uint64_t v5 = result;
            goto LABEL_5;
          }
        }
        uint64_t v5 = v6;
LABEL_5:
        *(void *)uint64_t v5 = v8;
        *(_DWORD *)(v5 + 8) = v9;
LABEL_6:
        uint64_t v2 = v4 + 12;
        v3 += 12;
      }
      while (v4 + 12 != a2);
    }
  }
  return result;
}

uint64_t sub_33ABC4(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    while (1)
    {
      if (result + 12 == a2) {
        return result;
      }
      uint64_t v2 = result;
      result += 12;
      unint64_t v3 = (*(void *)v2 >> 16) & 0xFFFF0000 | (*(void *)v2 << 32) | ((*(void *)v2 & 0xFF000000000000) == 0);
      unint64_t v4 = *(void *)(v2 + 12);
      if ((((unint64_t)*(unsigned int *)(v2 + 12) << 32) | ((unint64_t)*(unsigned __int16 *)(v2 + 16) << 16) | (*(unsigned char *)(v2 + 18) == 0)) >= v3)
      {
        uint64_t v6 = v4 & 0xFF000000000000;
        if (v3 >= ((v4 >> 16) & 0xFFFF0000 | ((v4 & 0xFF000000000000) == 0) | ((unint64_t)v4 << 32)))
        {
          unsigned int v5 = *(_DWORD *)(v2 + 20);
          if (v5 < *(_DWORD *)(v2 + 8)) {
            goto LABEL_9;
          }
        }
      }
      else
      {
        unsigned int v5 = *(_DWORD *)(v2 + 20);
        uint64_t v6 = v4 & 0xFF000000000000;
LABEL_9:
        BOOL v7 = v6 == 0;
        unint64_t v8 = (v4 >> 16) & 0xFFFF0000 | (v4 << 32) | v7;
        unint64_t v9 = (v4 << 32) | ((unint64_t)WORD2(v4) << 16) | v7;
        do
        {
          do
          {
            uint64_t v10 = v2;
            *(void *)(v2 + 12) = *(void *)v2;
            *(_DWORD *)(v2 + 20) = *(_DWORD *)(v2 + 8);
            unint64_t v11 = *(void *)(v2 - 12);
            v2 -= 12;
            unint64_t v12 = (v11 >> 16) & 0xFFFF0000 | (v11 << 32) | ((v11 & 0xFF000000000000) == 0);
          }
          while (v9 < v12);
        }
        while (v12 >= v8 && v5 < *(_DWORD *)(v10 - 4));
        *(void *)uint64_t v10 = v4 & 0xFFFF000000000000 | ((unint64_t)WORD2(v4) << 32) | v4;
        *(_DWORD *)(v10 + 8) = v5;
      }
    }
  }
  return result;
}

uint64_t sub_33ACF8(uint64_t *a1, unsigned int *a2, unsigned int *a3)
{
  unint64_t v3 = ((unint64_t)*a1 >> 16) & 0xFFFF0000 | (*a1 << 32) | ((*a1 & 0xFF000000000000) == 0);
  uint64_t v4 = (*(void *)a2 >> 16) & 0xFFFF0000 | (*(void *)a2 << 32);
  uint64_t v5 = *(void *)a2 & 0xFF000000000000;
  if ((((unint64_t)*a2 << 32) | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 16) | (*((unsigned char *)a2 + 6) == 0)) >= v3
    && ((unint64_t v6 = v4 | (v5 == 0), v3 < v6) || a2[2] >= *((_DWORD *)a1 + 2)))
  {
    if ((((unint64_t)*a3 << 32) | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 16) | (*((unsigned char *)a3 + 6) == 0)) < v6) {
      goto LABEL_7;
    }
    if (v6 < ((*(void *)a3 >> 16) & 0xFFFF0000 | (*(void *)a3 << 32) | (unint64_t)((*(void *)a3 & 0xFF000000000000) == 0))) {
      return 0;
    }
    if (a3[2] < a2[2])
    {
LABEL_7:
      unsigned int v12 = a2[2];
      uint64_t v13 = *(void *)a2;
      unsigned int v14 = a3[2];
      *(void *)a2 = *(void *)a3;
      a2[2] = v14;
      *(void *)a3 = v13;
      a3[2] = v12;
      unint64_t v15 = ((unint64_t)*a1 >> 16) & 0xFFFF0000 | (*a1 << 32) | ((*a1 & 0xFF000000000000) == 0);
      if ((((unint64_t)*a2 << 32) | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 16) | (*((unsigned char *)a2 + 6) == 0)) < v15) {
        goto LABEL_8;
      }
      if (v15 < ((*(void *)a2 >> 16) & 0xFFFF0000 | (*(void *)a2 << 32) | (unint64_t)((*(void *)a2 & 0xFF000000000000) == 0))) {
        return 1;
      }
      if (a2[2] < *((_DWORD *)a1 + 2))
      {
LABEL_8:
        unsigned int v16 = *((_DWORD *)a1 + 2);
        uint64_t v17 = *a1;
        unsigned int v18 = a2[2];
        *a1 = *(void *)a2;
        *((_DWORD *)a1 + 2) = v18;
        *(void *)a2 = v17;
        a2[2] = v16;
        return 2;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    unint64_t v7 = v4 | (v5 == 0);
    if ((((unint64_t)*a3 << 32) | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 16) | (*((unsigned char *)a3 + 6) == 0)) < v7
      || v7 >= ((*(void *)a3 >> 16) & 0xFFFF0000 | (*(void *)a3 << 32) | (unint64_t)((*(void *)a3 & 0xFF000000000000) == 0))
      && a3[2] < a2[2])
    {
      unsigned int v8 = *((_DWORD *)a1 + 2);
      uint64_t v9 = *a1;
      unsigned int v10 = a3[2];
      *a1 = *(void *)a3;
      *((_DWORD *)a1 + 2) = v10;
      *(void *)a3 = v9;
      a3[2] = v8;
      return 1;
    }
    unsigned int v19 = *((_DWORD *)a1 + 2);
    unint64_t v20 = *a1;
    unsigned int v21 = a2[2];
    *a1 = *(void *)a2;
    *((_DWORD *)a1 + 2) = v21;
    *(void *)a2 = v20;
    a2[2] = v19;
    unint64_t v22 = (v20 >> 16) & 0xFFFF0000 | (v20 << 32) | ((v20 & 0xFF000000000000) == 0);
    if ((((unint64_t)*a3 << 32) | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 16) | (*((unsigned char *)a3 + 6) == 0)) < v22) {
      goto LABEL_12;
    }
    if (v22 >= ((*(void *)a3 >> 16) & 0xFFFF0000 | (*(void *)a3 << 32) | (unint64_t)((*(void *)a3 & 0xFF000000000000) == 0)))
    {
      if (a3[2] < a2[2])
      {
LABEL_12:
        unsigned int v23 = a2[2];
        uint64_t v24 = *(void *)a2;
        unsigned int v25 = a3[2];
        *(void *)a2 = *(void *)a3;
        a2[2] = v25;
        *(void *)a3 = v24;
        a3[2] = v23;
        return 2;
      }
      return 1;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t *sub_33B038(uint64_t *a1, uint64_t *k)
{
  unint64_t v2 = *a1;
  unint64_t v3 = HIDWORD(*a1);
  unsigned int v4 = *((_DWORD *)a1 + 2);
  unint64_t v5 = *(uint64_t *)((char *)k - 12);
  BOOL v6 = (*a1 & 0xFF000000000000) == 0;
  unint64_t v7 = (*a1 << 32) | ((unint64_t)(unsigned __int16)WORD2(*a1) << 16) | v6;
  unint64_t v8 = (v5 >> 16) & 0xFFFF0000 | (v5 << 32) | ((v5 & 0xFF000000000000) == 0);
  if (v7 >= v8 && ((unint64_t v9 = (v3 << 16) | (v2 << 32) | v6, v8 < v9) || v4 >= *((_DWORD *)k - 1)))
  {
    for (i = (uint64_t *)((char *)a1 + 12); i < k; i = (uint64_t *)((char *)i + 12))
    {
      unint64_t v13 = ((unint64_t)*i >> 16) & 0xFFFF0000 | (*i << 32) | ((*i & 0xFF000000000000) == 0);
      if (v7 < v13 || v13 >= v9 && v4 < *((_DWORD *)i + 2)) {
        break;
      }
    }
  }
  else
  {
    i = (uint64_t *)((char *)a1 + 12);
    for (unint64_t j = (*(unint64_t *)((char *)a1 + 12) >> 16) & 0xFFFF0000 | (*(uint64_t *)((char *)a1 + 12) << 32) | ((*(uint64_t *)((char *)a1 + 12) & 0xFF000000000000) == 0);
          v7 >= j;
          unint64_t j = (v12 >> 16) & 0xFFFF0000 | (v12 << 32) | ((v12 & 0xFF000000000000) == 0))
    {
      if (j >= ((v3 << 16) | (v2 << 32) | v6) && v4 < *((_DWORD *)i + 2)) {
        break;
      }
      unint64_t v12 = *(uint64_t *)((char *)i + 12);
      i = (uint64_t *)((char *)i + 12);
    }
  }
  if (i < k)
  {
    for (k = (uint64_t *)((char *)k - 12); ; k = (uint64_t *)((char *)k - 12))
    {
      unint64_t v15 = (v5 >> 16) & 0xFFFF0000 | (v5 << 32) | ((v5 & 0xFF000000000000) == 0);
      if (v7 >= v15 && (v15 < ((v3 << 16) | (v2 << 32) | v6) || v4 >= *((_DWORD *)k + 2))) {
        break;
      }
      unint64_t v14 = *(uint64_t *)((char *)k - 12);
      unint64_t v5 = v14;
    }
  }
  if (i < k)
  {
    unint64_t v16 = (v3 << 16) | (v2 << 32) | v6;
    do
    {
      int v25 = *((_DWORD *)i + 2);
      uint64_t v24 = *i;
      uint64_t v17 = *k;
      *((_DWORD *)i + 2) = *((_DWORD *)k + 2);
      uint64_t *i = v17;
      *((_DWORD *)k + 2) = v25;
      *k = v24;
      do
      {
        unint64_t v18 = *(uint64_t *)((char *)i + 12);
        i = (uint64_t *)((char *)i + 12);
        unint64_t v19 = (v18 >> 16) & 0xFFFF0000 | (v18 << 32) | ((v18 & 0xFF000000000000) == 0);
      }
      while (v7 >= v19 && (v19 < v16 || v4 >= *((_DWORD *)i + 2)));
      do
      {
        do
        {
          unint64_t v20 = *(uint64_t *)((char *)k - 12);
          k = (uint64_t *)((char *)k - 12);
          unint64_t v21 = (v20 >> 16) & 0xFFFF0000 | (v20 << 32) | ((v20 & 0xFF000000000000) == 0);
        }
        while (v7 < v21);
      }
      while (v21 >= v16 && v4 < *((_DWORD *)k + 2));
    }
    while (i < k);
  }
  if ((uint64_t *)((char *)i - 12) != a1)
  {
    uint64_t v22 = *(uint64_t *)((char *)i - 12);
    *((_DWORD *)a1 + 2) = *((_DWORD *)i - 1);
    *a1 = v22;
  }
  *(uint64_t *)((char *)i - 12) = v2 & 0xFFFF000000000000 | ((unint64_t)WORD2(v2) << 32) | v2;
  *((_DWORD *)i - 1) = v4;
  return i;
}

unint64_t sub_33B2BC(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  unsigned int v4 = *((_DWORD *)a1 + 2);
  unint64_t v5 = ((unint64_t)*a1 >> 16) & 0xFFFF0000 | (*a1 << 32) | ((*a1 & 0xFF000000000000) == 0);
  while (1)
  {
    uint64_t v6 = (uint64_t)a1 + v2;
    if ((((unint64_t)*(unsigned int *)((char *)a1 + v2 + 12) << 32) | ((unint64_t)*(unsigned __int16 *)((char *)a1 + v2 + 16) << 16) | (*((unsigned char *)a1 + v2 + 18) == 0)) >= v5
      && (v5 < ((*(void *)(v6 + 12) >> 16) & 0xFFFF0000 | (*(void *)(v6 + 12) << 32) | (unint64_t)((*(void *)(v6 + 12) & 0xFF000000000000) == 0))
       || *(_DWORD *)(v6 + 20) >= v4))
    {
      break;
    }
    v2 += 12;
  }
  unint64_t v7 = (unint64_t)a1 + v2 + 12;
  if (v2)
  {
    do
    {
      unsigned int v8 = *(_DWORD *)(a2 - 12);
      a2 -= 12;
    }
    while ((((unint64_t)v8 << 32) | ((unint64_t)*(unsigned __int16 *)(a2 + 4) << 16) | (*(unsigned char *)(a2 + 6) == 0)) >= v5
         && (v5 < ((*(void *)a2 >> 16) & 0xFFFF0000 | (*(void *)a2 << 32) | (unint64_t)((*(void *)a2 & 0xFF000000000000) == 0))
          || *(_DWORD *)(a2 + 8) >= v4));
  }
  else
  {
LABEL_19:
    if (v7 < a2)
    {
      do
      {
        unsigned int v9 = *(_DWORD *)(a2 - 12);
        a2 -= 12;
        if ((((unint64_t)v9 << 32) | ((unint64_t)*(unsigned __int16 *)(a2 + 4) << 16) | (*(unsigned char *)(a2 + 6) == 0)) < v5) {
          break;
        }
        if (v5 < ((*(void *)a2 >> 16) & 0xFFFF0000 | (*(void *)a2 << 32) | (unint64_t)((*(void *)a2 & 0xFF000000000000) == 0))) {
          goto LABEL_19;
        }
      }
      while (*(_DWORD *)(a2 + 8) >= v4 && v7 < a2);
    }
  }
  unint64_t v11 = (unint64_t)a1 + v2 + 12;
  if (v7 < a2)
  {
    unint64_t v12 = a2;
    do
    {
      int v20 = *(_DWORD *)(v11 + 8);
      uint64_t v19 = *(void *)v11;
      uint64_t v13 = *(void *)v12;
      *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 + 8);
      *(void *)unint64_t v11 = v13;
      *(_DWORD *)(v12 + 8) = v20;
      *(void *)unint64_t v12 = v19;
      unint64_t v14 = (unsigned int *)(v11 + 12);
      do
      {
        do
        {
          unint64_t v11 = (unint64_t)v14;
          unint64_t v15 = ((unint64_t)*v14 << 32) | ((unint64_t)*((unsigned __int16 *)v14 + 2) << 16) | (*((unsigned char *)v14 + 6) == 0);
          v14 += 3;
        }
        while (v15 < v5);
      }
      while (v5 >= ((*(void *)v11 >> 16) & 0xFFFF0000 | (*(void *)v11 << 32) | (unint64_t)((*(void *)v11 & 0xFF000000000000) == 0))
           && *(_DWORD *)(v11 + 8) < v4);
      do
      {
        unsigned int v16 = *(_DWORD *)(v12 - 12);
        v12 -= 12;
      }
      while ((((unint64_t)v16 << 32) | ((unint64_t)*(unsigned __int16 *)(v12 + 4) << 16) | (*(unsigned char *)(v12 + 6) == 0)) >= v5
           && (v5 < ((*(void *)v12 >> 16) & 0xFFFF0000 | (*(void *)v12 << 32) | (unint64_t)((*(void *)v12 & 0xFF000000000000) == 0))
            || *(_DWORD *)(v12 + 8) >= v4));
    }
    while (v11 < v12);
  }
  if ((uint64_t *)(v11 - 12) != a1)
  {
    uint64_t v17 = *(void *)(v11 - 12);
    *((_DWORD *)a1 + 2) = *(_DWORD *)(v11 - 4);
    *a1 = v17;
  }
  *(void *)(v11 - 12) = v3;
  *(_DWORD *)(v11 - 4) = v4;
  return v11 - 12;
}

BOOL sub_33B55C(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 2;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v22 = a2 - 3;
      unint64_t v23 = (*(void *)a1 >> 16) & 0xFFFF0000 | (*(void *)a1 << 32) | ((*(void *)a1 & 0xFF000000000000) == 0);
      if ((((unint64_t)*(a2 - 3) << 32) | ((unint64_t)*((unsigned __int16 *)a2 - 4) << 16) | (*((unsigned char *)a2 - 6) == 0)) < v23
        || v23 >= ((*(void *)v22 >> 16) & 0xFFFF0000 | (*(void *)v22 << 32) | (unint64_t)((*(void *)v22 & 0xFF000000000000) == 0))
        && *(a2 - 1) < *(_DWORD *)(a1 + 8))
      {
        unsigned int v24 = *(_DWORD *)(a1 + 8);
        uint64_t v25 = *(void *)a1;
        int v26 = *(a2 - 1);
        *(void *)a1 = *(void *)v22;
        *(_DWORD *)(a1 + 8) = v26;
        *(void *)uint64_t v22 = v25;
        *(a2 - 1) = v24;
      }
      return result;
    case 3uLL:
      sub_33ACF8((uint64_t *)a1, (unsigned int *)(a1 + 12), a2 - 3);
      return 1;
    case 4uLL:
      sub_33B8E0(a1, (unsigned int *)(a1 + 12), (unsigned int *)(a1 + 24), a2 - 3);
      return 1;
    case 5uLL:
      sub_33BB04(a1, (unsigned int *)(a1 + 12), (unsigned int *)(a1 + 24), (unsigned int *)(a1 + 36), a2 - 3);
      return 1;
    default:
      uint64_t v6 = (unsigned int *)(a1 + 24);
      sub_33ACF8((uint64_t *)a1, (unsigned int *)(a1 + 12), (unsigned int *)(a1 + 24));
      unint64_t v7 = (unsigned int *)(a1 + 36);
      if ((unsigned int *)(a1 + 36) == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (2)
  {
    unint64_t v11 = (*(void *)v6 >> 16) & 0xFFFF0000 | (*(void *)v6 << 32) | ((*(void *)v6 & 0xFF000000000000) == 0);
    uint64_t v12 = *(void *)v7;
    uint64_t v13 = *(void *)v7 >> 16;
    if ((((unint64_t)*v7 << 32) | ((unint64_t)*((unsigned __int16 *)v7 + 2) << 16) | (*((unsigned char *)v7 + 6) == 0)) >= v11)
    {
      uint64_t v16 = v12 & 0xFF000000000000;
      if (v11 < (v13 & 0xFFFF0000 | ((v12 & 0xFF000000000000) == 0) | ((unint64_t)v12 << 32))) {
        goto LABEL_7;
      }
      unsigned int v14 = v7[2];
      if (v14 >= v6[2]) {
        goto LABEL_7;
      }
      uint64_t v15 = v12 << 32;
    }
    else
    {
      unsigned int v14 = v7[2];
      uint64_t v15 = v12 << 32;
      uint64_t v16 = v12 & 0xFF000000000000;
    }
    BOOL v17 = v16 == 0;
    *(void *)unint64_t v7 = *(void *)v6;
    v7[2] = v6[2];
    uint64_t v10 = a1;
    if (v6 == (unsigned int *)a1) {
      goto LABEL_6;
    }
    unint64_t v18 = v13 & 0xFFFF0000 | (unint64_t)v15 | v17;
    uint64_t v19 = v8;
    while (1)
    {
      uint64_t v20 = a1 + v19;
      unint64_t v21 = (*(void *)(a1 + v19 + 12) >> 16) & 0xFFFF0000 | (*(void *)(a1 + v19 + 12) << 32) | ((*(void *)(a1 + v19 + 12) & 0xFF000000000000) == 0);
      if (v18 < v21) {
        goto LABEL_15;
      }
      if (v21 < v18) {
        break;
      }
      if (v14 >= *(_DWORD *)(v20 + 20))
      {
        uint64_t v10 = a1 + v19 + 24;
        goto LABEL_6;
      }
LABEL_15:
      v6 -= 3;
      *(void *)(v20 + 24) = *(void *)(a1 + v19 + 12);
      *(_DWORD *)(v20 + 32) = *(_DWORD *)(a1 + v19 + 20);
      v19 -= 12;
      if (v19 == -24)
      {
        uint64_t v10 = a1;
        goto LABEL_6;
      }
    }
    uint64_t v10 = (uint64_t)v6;
LABEL_6:
    *(void *)uint64_t v10 = v12;
    *(_DWORD *)(v10 + 8) = v14;
    if (++v9 == 8) {
      return v7 + 3 == a2;
    }
LABEL_7:
    uint64_t v6 = v7;
    v8 += 12;
    v7 += 3;
    if (v7 != a2) {
      continue;
    }
    return 1;
  }
}

uint64_t sub_33B8E0(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result = sub_33ACF8((uint64_t *)a1, a2, a3);
  unint64_t v9 = (*(void *)a3 >> 16) & 0xFFFF0000 | (*(void *)a3 << 32) | ((*(void *)a3 & 0xFF000000000000) == 0);
  if ((((unint64_t)*a4 << 32) | ((unint64_t)*((unsigned __int16 *)a4 + 2) << 16) | (*((unsigned char *)a4 + 6) == 0)) < v9
    || v9 >= ((*(void *)a4 >> 16) & 0xFFFF0000 | (*(void *)a4 << 32) | (unint64_t)((*(void *)a4 & 0xFF000000000000) == 0))
    && a4[2] < a3[2])
  {
    unsigned int v10 = a3[2];
    uint64_t v11 = *(void *)a3;
    unsigned int v12 = a4[2];
    *(void *)a3 = *(void *)a4;
    a3[2] = v12;
    *(void *)a4 = v11;
    a4[2] = v10;
    unint64_t v13 = (*(void *)a2 >> 16) & 0xFFFF0000 | (*(void *)a2 << 32) | ((*(void *)a2 & 0xFF000000000000) == 0);
    if ((((unint64_t)*a3 << 32) | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 16) | (*((unsigned char *)a3 + 6) == 0)) < v13
      || v13 >= ((*(void *)a3 >> 16) & 0xFFFF0000 | (*(void *)a3 << 32) | (unint64_t)((*(void *)a3 & 0xFF000000000000) == 0))
      && a3[2] < a2[2])
    {
      unsigned int v14 = a2[2];
      uint64_t v15 = *(void *)a2;
      unsigned int v16 = a3[2];
      *(void *)a2 = *(void *)a3;
      a2[2] = v16;
      *(void *)a3 = v15;
      a3[2] = v14;
      unint64_t v17 = (*(void *)a1 >> 16) & 0xFFFF0000 | (*(void *)a1 << 32) | ((*(void *)a1 & 0xFF000000000000) == 0);
      if ((((unint64_t)*a2 << 32) | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 16) | (*((unsigned char *)a2 + 6) == 0)) < v17
        || v17 >= ((*(void *)a2 >> 16) & 0xFFFF0000 | (*(void *)a2 << 32) | (unint64_t)((*(void *)a2 & 0xFF000000000000) == 0))
        && a2[2] < *(_DWORD *)(a1 + 8))
      {
        unsigned int v18 = *(_DWORD *)(a1 + 8);
        uint64_t v19 = *(void *)a1;
        unsigned int v20 = a2[2];
        *(void *)a1 = *(void *)a2;
        *(_DWORD *)(a1 + 8) = v20;
        *(void *)a2 = v19;
        a2[2] = v18;
      }
    }
  }
  return result;
}

uint64_t sub_33BB04(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t result = sub_33B8E0(a1, a2, a3, a4);
  unint64_t v11 = (*(void *)a4 >> 16) & 0xFFFF0000 | (*(void *)a4 << 32) | ((*(void *)a4 & 0xFF000000000000) == 0);
  if ((((unint64_t)*a5 << 32) | ((unint64_t)*((unsigned __int16 *)a5 + 2) << 16) | (*((unsigned char *)a5 + 6) == 0)) < v11
    || v11 >= ((*(void *)a5 >> 16) & 0xFFFF0000 | (*(void *)a5 << 32) | (unint64_t)((*(void *)a5 & 0xFF000000000000) == 0))
    && a5[2] < a4[2])
  {
    unsigned int v12 = a4[2];
    uint64_t v13 = *(void *)a4;
    unsigned int v14 = a5[2];
    *(void *)a4 = *(void *)a5;
    a4[2] = v14;
    *(void *)a5 = v13;
    a5[2] = v12;
    unint64_t v15 = (*(void *)a3 >> 16) & 0xFFFF0000 | (*(void *)a3 << 32) | ((*(void *)a3 & 0xFF000000000000) == 0);
    if ((((unint64_t)*a4 << 32) | ((unint64_t)*((unsigned __int16 *)a4 + 2) << 16) | (*((unsigned char *)a4 + 6) == 0)) < v15
      || v15 >= ((*(void *)a4 >> 16) & 0xFFFF0000 | (*(void *)a4 << 32) | (unint64_t)((*(void *)a4 & 0xFF000000000000) == 0))
      && a4[2] < a3[2])
    {
      unsigned int v16 = a3[2];
      uint64_t v17 = *(void *)a3;
      unsigned int v18 = a4[2];
      *(void *)a3 = *(void *)a4;
      a3[2] = v18;
      *(void *)a4 = v17;
      a4[2] = v16;
      unint64_t v19 = (*(void *)a2 >> 16) & 0xFFFF0000 | (*(void *)a2 << 32) | ((*(void *)a2 & 0xFF000000000000) == 0);
      if ((((unint64_t)*a3 << 32) | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 16) | (*((unsigned char *)a3 + 6) == 0)) < v19
        || v19 >= ((*(void *)a3 >> 16) & 0xFFFF0000 | (*(void *)a3 << 32) | (unint64_t)((*(void *)a3 & 0xFF000000000000) == 0))
        && a3[2] < a2[2])
      {
        unsigned int v20 = a2[2];
        uint64_t v21 = *(void *)a2;
        unsigned int v22 = a3[2];
        *(void *)a2 = *(void *)a3;
        a2[2] = v22;
        *(void *)a3 = v21;
        a3[2] = v20;
        unint64_t v23 = (*(void *)a1 >> 16) & 0xFFFF0000 | (*(void *)a1 << 32) | ((*(void *)a1 & 0xFF000000000000) == 0);
        if ((((unint64_t)*a2 << 32) | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 16) | (*((unsigned char *)a2 + 6) == 0)) < v23
          || v23 >= ((*(void *)a2 >> 16) & 0xFFFF0000 | (*(void *)a2 << 32) | (unint64_t)((*(void *)a2 & 0xFF000000000000) == 0))
          && a2[2] < *(_DWORD *)(a1 + 8))
        {
          unsigned int v24 = *(_DWORD *)(a1 + 8);
          uint64_t v25 = *(void *)a1;
          unsigned int v26 = a2[2];
          *(void *)a1 = *(void *)a2;
          *(_DWORD *)(a1 + 8) = v26;
          *(void *)a2 = v25;
          a2[2] = v24;
        }
      }
    }
  }
  return result;
}

unsigned int *sub_33BDD8(uint64_t a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  if ((unsigned int *)a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 12;
    if ((uint64_t)a2 - a1 >= 13)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unsigned int v12 = (uint64_t *)(a1 + 12 * v10);
      do
      {
        sub_33C0F0(a1, a4, v9, v12);
        unsigned int v12 = (uint64_t *)((char *)v12 - 12);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      unsigned int v14 = v6;
      do
      {
        unint64_t v18 = (*(void *)a1 >> 16) & 0xFFFF0000 | (*(void *)a1 << 32) | ((*(void *)a1 & 0xFF000000000000) == 0);
        if ((((unint64_t)*v14 << 32) | ((unint64_t)*((unsigned __int16 *)v14 + 2) << 16) | (*((unsigned char *)v14 + 6) == 0)) < v18
          || v18 >= ((*(void *)v14 >> 16) & 0xFFFF0000 | (*(void *)v14 << 32) | (unint64_t)((*(void *)v14 & 0xFF000000000000) == 0))
          && v14[2] < *(_DWORD *)(a1 + 8))
        {
          unsigned int v15 = v14[2];
          uint64_t v16 = *(void *)v14;
          unsigned int v17 = *(_DWORD *)(a1 + 8);
          *(void *)unsigned int v14 = *(void *)a1;
          v14[2] = v17;
          *(void *)a1 = v16;
          *(_DWORD *)(a1 + 8) = v15;
          sub_33C0F0(a1, a4, v9, (uint64_t *)a1);
        }
        v14 += 3;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 13)
    {
      int64_t v19 = v8 / 0xCuLL;
      do
      {
        while (1)
        {
          uint64_t v22 = 0;
          uint64_t v31 = *(void *)a1;
          unsigned int v32 = *(_DWORD *)(a1 + 8);
          unint64_t v23 = (unsigned int *)a1;
          do
          {
            uint64_t v25 = v23;
            uint64_t v26 = v22 + 1;
            v23 += 3 * v22 + 3;
            uint64_t v27 = 2 * v22;
            uint64_t v22 = (2 * v22) | 1;
            int64_t v28 = v27 + 2;
            if (v28 < v19)
            {
              unint64_t v29 = (*(void *)(v23 + 3) >> 16) & 0xFFFF0000 | (*(void *)(v23 + 3) << 32) | ((*(void *)(v23 + 3) & 0xFF000000000000) == 0);
              if ((((unint64_t)*v23 << 32) | ((unint64_t)*((unsigned __int16 *)v23 + 2) << 16) | (*((unsigned char *)v23 + 6) == 0)) < v29
                || v29 >= ((*(void *)v23 >> 16) & 0xFFFF0000 | (*(void *)v23 << 32) | (unint64_t)((*(void *)v23 & 0xFF000000000000) == 0))
                && v25[3 * v26 + 2] < v23[5])
              {
                v23 += 3;
                uint64_t v22 = v28;
              }
            }
            uint64_t v24 = *(void *)v23;
            v25[2] = v23[2];
            *(void *)uint64_t v25 = v24;
          }
          while (v22 <= (uint64_t)((unint64_t)(v19 - 2) >> 1));
          v6 -= 3;
          if (v23 == v6) {
            break;
          }
          uint64_t v20 = *(void *)v6;
          v23[2] = v6[2];
          *(void *)unint64_t v23 = v20;
          *(void *)uint64_t v6 = v31;
          v6[2] = v32;
          sub_33C394(a1, (uint64_t)(v23 + 3), a4, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v23 - a1 + 12) >> 2));
          BOOL v21 = v19-- <= 2;
          if (v21) {
            return v13;
          }
        }
        v23[2] = v32;
        *(void *)unint64_t v23 = v31;
        BOOL v21 = v19-- <= 2;
      }
      while (!v21);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_33C0F0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 2)))
    {
      uint64_t v5 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 2)) | 1;
      uint64_t v6 = (unsigned int *)(result + 12 * v5);
      if (0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2 < a3)
      {
        unint64_t v7 = (*(void *)(v6 + 3) >> 16) & 0xFFFF0000 | (*(void *)(v6 + 3) << 32) | ((*(void *)(v6 + 3) & 0xFF000000000000) == 0);
        if ((((unint64_t)*v6 << 32) | ((unint64_t)*((unsigned __int16 *)v6 + 2) << 16) | (*((unsigned char *)v6 + 6) == 0)) < v7
          || v7 >= ((*(void *)v6 >> 16) & 0xFFFF0000 | (*(void *)v6 << 32) | (unint64_t)((*(void *)v6 & 0xFF000000000000) == 0))
          && *(_DWORD *)(result + 12 * v5 + 8) < v6[5])
        {
          v6 += 3;
          uint64_t v5 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2;
        }
      }
      unint64_t v8 = *a4;
      unint64_t v9 = (v8 >> 16) & 0xFFFF0000 | (v8 << 32) | ((v8 & 0xFF000000000000) == 0);
      if ((((unint64_t)*v6 << 32) | ((unint64_t)*((unsigned __int16 *)v6 + 2) << 16) | (*((unsigned char *)v6 + 6) == 0)) >= v9)
      {
        unsigned int v10 = *((_DWORD *)a4 + 2);
        if (v9 < ((*(void *)v6 >> 16) & 0xFFFF0000 | (*(void *)v6 << 32) | (unint64_t)((*(void *)v6 & 0xFF000000000000) == 0))
          || v6[2] >= v10)
        {
          uint64_t v11 = *(void *)v6;
          *((_DWORD *)a4 + 2) = v6[2];
          *a4 = v11;
          if (v4 >= v5)
          {
            while (1)
            {
              uint64_t v14 = 2 * v5;
              uint64_t v5 = (2 * v5) | 1;
              unsigned int v12 = (unsigned int *)(result + 12 * v5);
              uint64_t v15 = v14 + 2;
              if (v15 < a3)
              {
                unint64_t v16 = (*(void *)(v12 + 3) >> 16) & 0xFFFF0000 | (*(void *)(v12 + 3) << 32) | ((*(void *)(v12 + 3) & 0xFF000000000000) == 0);
                if ((((unint64_t)*v12 << 32) | ((unint64_t)*((unsigned __int16 *)v12 + 2) << 16) | (*((unsigned char *)v12 + 6) == 0)) < v16
                  || v16 >= ((*(void *)v12 >> 16) & 0xFFFF0000 | (*(void *)v12 << 32) | (unint64_t)((*(void *)v12 & 0xFF000000000000) == 0))
                  && *(_DWORD *)(result + 12 * v5 + 8) < v12[5])
                {
                  v12 += 3;
                  uint64_t v5 = v15;
                }
              }
              if ((((unint64_t)*v12 << 32) | ((unint64_t)*((unsigned __int16 *)v12 + 2) << 16) | (*((unsigned char *)v12 + 6) == 0)) < v9
                || v9 >= ((*(void *)v12 >> 16) & 0xFFFF0000 | (*(void *)v12 << 32) | (unint64_t)((*(void *)v12 & 0xFF000000000000) == 0))
                && v12[2] < v10)
              {
                break;
              }
              uint64_t v13 = *(void *)v12;
              v6[2] = v12[2];
              *(void *)uint64_t v6 = v13;
              uint64_t v6 = v12;
              if (v4 < v5) {
                goto LABEL_13;
              }
            }
          }
          unsigned int v12 = v6;
LABEL_13:
          *(void *)unsigned int v12 = v8;
          v12[2] = v10;
        }
      }
    }
  }
  return result;
}

uint64_t sub_33C394(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (unsigned int *)(result + 12 * (v4 >> 1));
    unint64_t v7 = *(void *)(a2 - 12);
    unint64_t v8 = (v7 >> 16) & 0xFFFF0000 | (v7 << 32) | ((v7 & 0xFF000000000000) == 0);
    if ((((unint64_t)*v6 << 32) | ((unint64_t)*((unsigned __int16 *)v6 + 2) << 16) | (*((unsigned char *)v6 + 6) == 0)) >= v8)
    {
      if (v8 < ((*(void *)v6 >> 16) & 0xFFFF0000 | (*(void *)v6 << 32) | (unint64_t)((*(void *)v6 & 0xFF000000000000) == 0))) {
        return result;
      }
      unsigned int v9 = *(_DWORD *)(a2 - 4);
      if (v6[2] >= v9) {
        return result;
      }
    }
    else
    {
      unsigned int v9 = *(_DWORD *)(a2 - 4);
    }
    uint64_t v10 = *(void *)v6;
    *(_DWORD *)(a2 - 4) = v6[2];
    *(void *)(a2 - 12) = v10;
    if (v4 >= 2)
    {
      while (1)
      {
        unint64_t v12 = v5 - 1;
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v13 = (unsigned int *)(result + 12 * v5);
        if ((((unint64_t)*v13 << 32) | ((unint64_t)*((unsigned __int16 *)v13 + 2) << 16) | (*((unsigned char *)v13 + 6) == 0)) >= v8)
        {
          if (v8 < ((*(void *)v13 >> 16) & 0xFFFF0000 | (*(void *)v13 << 32) | (unint64_t)((*(void *)v13 & 0xFF000000000000) == 0))) {
            goto LABEL_5;
          }
          if (v13[2] >= v9) {
            break;
          }
        }
        uint64_t v11 = *(void *)v13;
        v6[2] = v13[2];
        *(void *)uint64_t v6 = v11;
        uint64_t v6 = (unsigned int *)(result + 12 * v5);
        if (v12 <= 1) {
          goto LABEL_15;
        }
      }
      uint64_t v13 = v6;
LABEL_15:
      *(void *)uint64_t v13 = v7;
      v13[2] = v9;
    }
    else
    {
LABEL_5:
      *(void *)uint64_t v6 = v7;
      v6[2] = v9;
    }
  }
  return result;
}

uint64_t sub_33C4F0(uint64_t result)
{
  uint64_t v2 = *(uint64_t **)result;
  v1 = *(unint64_t **)(result + 8);
  if (*(unint64_t **)result != v1 && *(void *)result + 16 != (void)v1)
  {
    uint64_t v4 = 0;
    unint64_t v5 = *v2;
    while (1)
    {
      uint64_t v6 = &v2[v4];
      unint64_t v7 = v2[v4 + 2];
      if (v5 == v7 && WORD2(v5) == WORD2(v7))
      {
        int v8 = *((_DWORD *)v6 + 2);
        int v9 = *((_DWORD *)v6 + 6);
        if (((v5 & 0xFF000000000000) == 0) != (HIWORD(v7) & 1) && v8 == v9) {
          break;
        }
      }
      v4 += 2;
      unint64_t v5 = v7;
      if (&v2[v4 + 2] == (uint64_t *)v1) {
        return result;
      }
    }
    uint64_t v11 = &v2[v4];
    if (v11 != (uint64_t *)v1)
    {
      unint64_t v12 = (unint64_t *)(v11 + 4);
      if (v11 + 4 != (uint64_t *)v1)
      {
        do
        {
          uint64_t v14 = *v11;
          unint64_t v15 = *v12;
          if (*v11 != *v12
            || WORD2(v14) != WORD2(v15)
            || (((v14 & 0xFF000000000000) == 0) != (HIWORD(v15) & 1)
              ? (BOOL v16 = *((_DWORD *)v11 + 2) == *((_DWORD *)v12 + 2))
              : (BOOL v16 = 0),
                !v16))
          {
            uint64_t v13 = *(unint64_t *)((char *)v12 + 7);
            v11[2] = *v12;
            v11 += 2;
            *(uint64_t *)((char *)v11 + 7) = v13;
          }
          v12 += 2;
        }
        while (v12 != v1);
        v1 = *(unint64_t **)(result + 8);
      }
      if (v11 + 2 != (uint64_t *)v1) {
        *(void *)(result + 8) = v11 + 2;
      }
    }
  }
  return result;
}

void sub_33C650(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
uint64_t sub_33CCA0(long long *a1, long long *a2, uint64_t a3)
{
  unint64_t v3 = (*(void *)a2 >> 16) & 0xFFFF0000 | (*(void *)a2 << 32) | ((*(void *)a2 & 0xFF000000000000) == 0);
  unint64_t v4 = (*(void *)a1 >> 16) & 0xFFFF0000 | (*(void *)a1 << 32) | ((*(void *)a1 & 0xFF000000000000) == 0);
  if (v3 >= v4)
  {
    unsigned int v5 = *((_DWORD *)a2 + 2);
    if (v4 < v3 || v5 >= *((_DWORD *)a1 + 2))
    {
      unint64_t v7 = (*(void *)a3 >> 16) & 0xFFFF0000 | (*(void *)a3 << 32) | ((*(void *)a3 & 0xFF000000000000) == 0);
      if (v7 >= v3)
      {
        uint64_t v8 = 0;
        if (v3 < v7 || *(_DWORD *)(a3 + 8) >= v5) {
          return v8;
        }
      }
      long long v21 = *a2;
      uint64_t v9 = *(void *)(a3 + 7);
      *(void *)a2 = *(void *)a3;
      *(void *)((char *)a2 + 7) = v9;
      *(void *)(a3 + 7) = *(void *)((char *)&v21 + 7);
      *(void *)a3 = v21;
      unint64_t v10 = (*(void *)a2 >> 16) & 0xFFFF0000 | (*(void *)a2 << 32) | ((*(void *)a2 & 0xFF000000000000) == 0);
      unint64_t v11 = (*(void *)a1 >> 16) & 0xFFFF0000 | (*(void *)a1 << 32) | ((*(void *)a1 & 0xFF000000000000) == 0);
      if (v10 >= v11)
      {
        uint64_t v8 = 1;
        if (v11 < v10 || *((_DWORD *)a2 + 2) >= *((_DWORD *)a1 + 2)) {
          return v8;
        }
      }
      long long v22 = *a1;
      uint64_t v12 = *(void *)((char *)a2 + 7);
      *(void *)a1 = *(void *)a2;
      *(void *)((char *)a1 + 7) = v12;
      *(void *)((char *)a2 + 7) = *(void *)((char *)&v22 + 7);
      *(void *)a2 = v22;
      return 2;
    }
  }
  unint64_t v13 = (*(void *)a3 >> 16) & 0xFFFF0000 | (*(void *)a3 << 32) | ((*(void *)a3 & 0xFF000000000000) == 0);
  if (v13 >= v3 && (v3 < v13 || *(_DWORD *)(a3 + 8) >= *((_DWORD *)a2 + 2)))
  {
    long long v23 = *a1;
    uint64_t v15 = *(void *)((char *)a2 + 7);
    *(void *)a1 = *(void *)a2;
    *(void *)((char *)a1 + 7) = v15;
    *(void *)((char *)a2 + 7) = *(void *)((char *)&v23 + 7);
    *(void *)a2 = v23;
    unint64_t v16 = (*(void *)a3 >> 16) & 0xFFFF0000 | (*(void *)a3 << 32) | ((*(void *)a3 & 0xFF000000000000) == 0);
    unint64_t v17 = (*(void *)a2 >> 16) & 0xFFFF0000 | (*(void *)a2 << 32) | ((*(void *)a2 & 0xFF000000000000) == 0);
    if (v16 >= v17)
    {
      uint64_t v8 = 1;
      if (v17 < v16 || *(_DWORD *)(a3 + 8) >= *((_DWORD *)a2 + 2)) {
        return v8;
      }
    }
    long long v24 = *a2;
    uint64_t v18 = *(void *)(a3 + 7);
    *(void *)a2 = *(void *)a3;
    *(void *)((char *)a2 + 7) = v18;
    *(void *)(a3 + 7) = *(void *)((char *)&v24 + 7);
    *(void *)a3 = v24;
    return 2;
  }
  long long v25 = *a1;
  uint64_t v20 = *(void *)(a3 + 7);
  *(void *)a1 = *(void *)a3;
  *(void *)((char *)a1 + 7) = v20;
  *(void *)(a3 + 7) = *(void *)((char *)&v25 + 7);
  *(void *)a3 = v25;
  return 1;
}

void *sub_33CF10(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  unsigned int v3 = *((_DWORD *)a1 + 2);
  unint64_t v4 = *(void *)(a2 - 16);
  unint64_t v5 = ((unint64_t)*a1 >> 16) & 0xFFFF0000 | (*a1 << 32) | ((*a1 & 0xFF000000000000) == 0);
  unint64_t v6 = (v4 >> 16) & 0xFFFF0000 | (v4 << 32) | ((v4 & 0xFF000000000000) == 0);
  if (v5 >= v6 && (v6 >= v5 ? (BOOL v7 = v3 >= *(_DWORD *)(a2 - 8)) : (BOOL v7 = 1), v7))
  {
    unint64_t v8 = (unint64_t)(a1 + 2);
    do
    {
      uint64_t v9 = (void *)v8;
      if (v8 >= a2) {
        break;
      }
      unint64_t v10 = (*(void *)v8 >> 16) & 0xFFFF0000 | (*(void *)v8 << 32) | ((*(void *)v8 & 0xFF000000000000) == 0);
      if (v5 < v10) {
        break;
      }
      unsigned int v11 = *(_DWORD *)(v8 + 8);
      v8 += 16;
    }
    while (v10 < v5 || v3 >= v11);
  }
  else
  {
    unint64_t v13 = a1 + 2;
    do
    {
      uint64_t v9 = v13;
      unint64_t v14 = (*v13 >> 16) & 0xFFFF0000 | (*v13 << 32) | ((*v13 & 0xFF000000000000) == 0);
      if (v5 < v14) {
        break;
      }
      v13 += 2;
    }
    while (v14 < v5 || v3 >= *((_DWORD *)v9 + 2));
  }
  if ((unint64_t)v9 < a2)
  {
    for (a2 -= 16; ; a2 -= 16)
    {
      unint64_t v17 = (v4 >> 16) & 0xFFFF0000 | (v4 << 32) | ((v4 & 0xFF000000000000) == 0);
      if (v5 >= v17 && (v17 < v5 || v3 >= *(_DWORD *)(a2 + 8))) {
        break;
      }
      unint64_t v16 = *(void *)(a2 - 16);
      unint64_t v4 = v16;
    }
  }
  int v19 = *((_DWORD *)a1 + 3);
  while ((unint64_t)v9 < a2)
  {
    long long v29 = *(_OWORD *)v9;
    uint64_t v20 = *(void *)a2;
    *(void *)((char *)v9 + 7) = *(void *)(a2 + 7);
    *uint64_t v9 = v20;
    *(void *)(a2 + 7) = *(void *)((char *)&v29 + 7);
    *(void *)a2 = v29;
    long long v21 = v9 + 2;
    do
    {
      uint64_t v9 = v21;
      unint64_t v22 = (*v21 >> 16) & 0xFFFF0000 | (*v21 << 32) | ((*v21 & 0xFF000000000000) == 0);
      if (v5 < v22) {
        break;
      }
      v21 += 2;
    }
    while (v22 < v5 || v3 >= *((_DWORD *)v9 + 2));
    do
    {
      do
      {
        unint64_t v24 = *(void *)(a2 - 16);
        a2 -= 16;
        unint64_t v25 = (v24 >> 16) & 0xFFFF0000 | (v24 << 32) | ((v24 & 0xFF000000000000) == 0);
      }
      while (v5 < v25);
    }
    while (v25 >= v5 && v3 < *(_DWORD *)(a2 + 8));
  }
  if (v9 - 2 != a1)
  {
    uint64_t v27 = *(v9 - 2);
    *(uint64_t *)((char *)a1 + 7) = *(void *)((char *)v9 - 9);
    *a1 = v27;
  }
  *(v9 - 2) = v2;
  *((_DWORD *)v9 - 2) = v3;
  *((_WORD *)v9 - 2) = v19;
  *((unsigned char *)v9 - 2) = BYTE2(v19);
  return v9;
}

unint64_t sub_33D120(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  unsigned int v5 = *((_DWORD *)a1 + 2);
  int v4 = *((_DWORD *)a1 + 3);
  unint64_t v6 = ((unint64_t)*a1 >> 16) & 0xFFFF0000 | (*a1 << 32) | ((*a1 & 0xFF000000000000) == 0);
  while (1)
  {
    unint64_t v7 = ((unint64_t)a1[v2 + 2] >> 16) & 0xFFFF0000 | (a1[v2 + 2] << 32) | ((a1[v2 + 2] & 0xFF000000000000) == 0);
    if (v7 >= v6 && (v6 < v7 || LODWORD(a1[v2 + 3]) >= v5)) {
      break;
    }
    v2 += 2;
  }
  unint64_t v9 = (unint64_t)&a1[v2 + 2];
  unint64_t v10 = (void *)(a2 - 16);
  if (v2 * 8)
  {
    do
    {
      unsigned int v11 = v10;
      unint64_t v12 = (*v10 >> 16) & 0xFFFF0000 | (*v10 << 32) | ((*v10 & 0xFF000000000000) == 0);
      if (v12 < v6) {
        break;
      }
      v10 -= 2;
    }
    while (v6 < v12 || *((_DWORD *)v11 + 2) >= v5);
  }
  else
  {
    while (1)
    {
      unsigned int v11 = v10;
      unint64_t v16 = v10 + 2;
      if (v9 >= (unint64_t)v16) {
        break;
      }
      unint64_t v14 = (*v11 >> 16) & 0xFFFF0000 | (*v11 << 32) | ((*v11 & 0xFF000000000000) == 0);
      if (v14 >= v6)
      {
        unint64_t v10 = v11 - 2;
        if (v6 < v14 || *((_DWORD *)v11 + 2) >= v5) {
          continue;
        }
      }
      goto LABEL_24;
    }
    unsigned int v11 = v16;
  }
LABEL_24:
  unint64_t v17 = v9;
  if (v9 < (unint64_t)v11)
  {
    uint64_t v18 = v11;
    do
    {
      long long v28 = *(_OWORD *)v17;
      uint64_t v19 = *v18;
      *(void *)(v17 + 7) = *(void *)((char *)v18 + 7);
      *(void *)unint64_t v17 = v19;
      *(void *)((char *)v18 + 7) = *(void *)((char *)&v28 + 7);
      *uint64_t v18 = v28;
      do
      {
        do
        {
          unint64_t v20 = *(void *)(v17 + 16);
          v17 += 16;
          unint64_t v21 = (v20 >> 16) & 0xFFFF0000 | (v20 << 32) | ((v20 & 0xFF000000000000) == 0);
        }
        while (v21 < v6);
      }
      while (v6 >= v21 && *(_DWORD *)(v17 + 8) < v5);
      long long v23 = v18 - 2;
      do
      {
        uint64_t v18 = v23;
        unint64_t v24 = (*v23 >> 16) & 0xFFFF0000 | (*v23 << 32) | ((*v23 & 0xFF000000000000) == 0);
        if (v24 < v6) {
          break;
        }
        v23 -= 2;
      }
      while (v6 < v24 || *((_DWORD *)v18 + 2) >= v5);
    }
    while (v17 < (unint64_t)v18);
  }
  if ((uint64_t *)(v17 - 16) != a1)
  {
    uint64_t v26 = *(void *)(v17 - 16);
    *(uint64_t *)((char *)a1 + 7) = *(void *)(v17 - 9);
    *a1 = v26;
  }
  *(void *)(v17 - 16) = v3;
  *(_DWORD *)(v17 - 8) = v5;
  *(_WORD *)(v17 - 4) = v4;
  *(unsigned char *)(v17 - 2) = BYTE2(v4);
  return v17 - 16;
}

BOOL sub_33D324(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v20 = (void *)(a2 - 16);
      unint64_t v21 = (*(void *)(a2 - 16) >> 16) & 0xFFFF0000 | (*(void *)(a2 - 16) << 32) | ((*(void *)(a2 - 16) & 0xFF000000000000) == 0);
      unint64_t v22 = (*(void *)a1 >> 16) & 0xFFFF0000 | (*(void *)a1 << 32) | ((*(void *)a1 & 0xFF000000000000) == 0);
      if (v21 < v22 || (v22 >= v21 ? (BOOL v23 = *(_DWORD *)(a2 - 8) >= *(_DWORD *)(a1 + 8)) : (BOOL v23 = 1), !v23))
      {
        long long v25 = *(_OWORD *)a1;
        uint64_t v24 = *(void *)(a2 - 9);
        *(void *)a1 = *v20;
        *(void *)(a1 + 7) = v24;
        *(void *)(a2 - 9) = *(void *)((char *)&v25 + 7);
        void *v20 = v25;
      }
      return result;
    case 3:
      sub_33CCA0((long long *)a1, (long long *)(a1 + 16), a2 - 16);
      return 1;
    case 4:
      sub_33D640(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      sub_33D800(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      uint64_t v6 = a1 + 32;
      sub_33CCA0((long long *)a1, (long long *)(a1 + 16), a1 + 32);
      uint64_t v7 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (1)
  {
    uint64_t v11 = *(void *)v7;
    unint64_t v12 = (*(void *)v7 >> 16) & 0xFFFF0000 | (*(void *)v7 << 32) | ((*(void *)v7 & 0xFF000000000000) == 0);
    unint64_t v13 = (*(void *)v6 >> 16) & 0xFFFF0000 | (*(void *)v6 << 32) | ((*(void *)v6 & 0xFF000000000000) == 0);
    if (v12 < v13) {
      break;
    }
    unsigned int v14 = *(_DWORD *)(v7 + 8);
    if (v13 >= v12 && v14 < *(_DWORD *)(v6 + 8)) {
      goto LABEL_14;
    }
LABEL_7:
    uint64_t v6 = v7;
    v8 += 16;
    v7 += 16;
    if (v7 == a2) {
      return 1;
    }
  }
  unsigned int v14 = *(_DWORD *)(v7 + 8);
LABEL_14:
  int v16 = *(_DWORD *)(v7 + 12);
  *(void *)uint64_t v7 = *(void *)v6;
  *(void *)(v7 + 7) = *(void *)(v6 + 7);
  uint64_t v10 = a1;
  if (v6 != a1)
  {
    uint64_t v17 = v8;
    while (1)
    {
      unint64_t v18 = (*(void *)(a1 + v17 + 16) >> 16) & 0xFFFF0000 | (*(void *)(a1 + v17 + 16) << 32) | ((*(void *)(a1 + v17 + 16) & 0xFF000000000000) == 0);
      if (v12 >= v18 && (v18 < v12 || v14 >= *(_DWORD *)(a1 + v17 + 24))) {
        break;
      }
      *(void *)(a1 + v17 + 32) = *(void *)(a1 + v17 + 16);
      *(void *)(a1 + v17 + 39) = *(void *)(a1 + v17 + 23);
      v17 -= 16;
      if (v17 == -32)
      {
        uint64_t v10 = a1;
        goto LABEL_6;
      }
    }
    uint64_t v10 = a1 + v17 + 32;
  }
LABEL_6:
  *(void *)uint64_t v10 = v11;
  *(_DWORD *)(v10 + 8) = v14;
  *(_WORD *)(v10 + 12) = v16;
  *(unsigned char *)(v10 + 14) = BYTE2(v16);
  if (++v9 != 8) {
    goto LABEL_7;
  }
  return v7 + 16 == a2;
}

__n128 sub_33D640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_33CCA0((long long *)a1, (long long *)a2, a3);
  unint64_t v9 = (*(void *)a4 >> 16) & 0xFFFF0000 | (*(void *)a4 << 32) | ((*(void *)a4 & 0xFF000000000000) == 0);
  unint64_t v10 = (*(void *)a3 >> 16) & 0xFFFF0000 | (*(void *)a3 << 32) | ((*(void *)a3 & 0xFF000000000000) == 0);
  if (v9 < v10 || (v10 >= v9 ? (BOOL v11 = *(_DWORD *)(a4 + 8) >= *(_DWORD *)(a3 + 8)) : (BOOL v11 = 1), !v11))
  {
    __n128 result = *(__n128 *)a3;
    __n128 v19 = *(__n128 *)a3;
    uint64_t v12 = *(void *)(a4 + 7);
    *(void *)a3 = *(void *)a4;
    *(void *)(a3 + 7) = v12;
    *(void *)(a4 + 7) = *(unint64_t *)((char *)v19.n128_u64 + 7);
    *(void *)a4 = v19.n128_u64[0];
    unint64_t v13 = (*(void *)a3 >> 16) & 0xFFFF0000 | (*(void *)a3 << 32) | ((*(void *)a3 & 0xFF000000000000) == 0);
    unint64_t v14 = (*(void *)a2 >> 16) & 0xFFFF0000 | (*(void *)a2 << 32) | ((*(void *)a2 & 0xFF000000000000) == 0);
    if (v13 < v14 || v14 >= v13 && *(_DWORD *)(a3 + 8) < *(_DWORD *)(a2 + 8))
    {
      __n128 result = *(__n128 *)a2;
      long long v20 = *(_OWORD *)a2;
      uint64_t v15 = *(void *)(a3 + 7);
      *(void *)a2 = *(void *)a3;
      *(void *)(a2 + 7) = v15;
      *(void *)(a3 + 7) = *(void *)((char *)&v20 + 7);
      *(void *)a3 = v20;
      unint64_t v16 = (*(void *)a2 >> 16) & 0xFFFF0000 | (*(void *)a2 << 32) | ((*(void *)a2 & 0xFF000000000000) == 0);
      unint64_t v17 = (*(void *)a1 >> 16) & 0xFFFF0000 | (*(void *)a1 << 32) | ((*(void *)a1 & 0xFF000000000000) == 0);
      if (v16 < v17 || v17 >= v16 && *(_DWORD *)(a2 + 8) < *(_DWORD *)(a1 + 8))
      {
        __n128 result = *(__n128 *)a1;
        long long v21 = *(_OWORD *)a1;
        uint64_t v18 = *(void *)(a2 + 7);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 7) = v18;
        *(void *)(a2 + 7) = *(void *)((char *)&v21 + 7);
        *(void *)a2 = v21;
      }
    }
  }
  return result;
}

__n128 sub_33D800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = sub_33D640(a1, a2, a3, a4).n128_u64[0];
  unint64_t v11 = (*(void *)a5 >> 16) & 0xFFFF0000 | (*(void *)a5 << 32) | ((*(void *)a5 & 0xFF000000000000) == 0);
  unint64_t v12 = (*(void *)a4 >> 16) & 0xFFFF0000 | (*(void *)a4 << 32) | ((*(void *)a4 & 0xFF000000000000) == 0);
  if (v11 < v12 || (v12 >= v11 ? (BOOL v13 = *(_DWORD *)(a5 + 8) >= *(_DWORD *)(a4 + 8)) : (BOOL v13 = 1), !v13))
  {
    __n128 result = *(__n128 *)a4;
    __n128 v24 = *(__n128 *)a4;
    uint64_t v14 = *(void *)(a5 + 7);
    *(void *)a4 = *(void *)a5;
    *(void *)(a4 + 7) = v14;
    *(void *)(a5 + 7) = *(unint64_t *)((char *)v24.n128_u64 + 7);
    *(void *)a5 = v24.n128_u64[0];
    unint64_t v15 = (*(void *)a4 >> 16) & 0xFFFF0000 | (*(void *)a4 << 32) | ((*(void *)a4 & 0xFF000000000000) == 0);
    unint64_t v16 = (*(void *)a3 >> 16) & 0xFFFF0000 | (*(void *)a3 << 32) | ((*(void *)a3 & 0xFF000000000000) == 0);
    if (v15 < v16 || v16 >= v15 && *(_DWORD *)(a4 + 8) < *(_DWORD *)(a3 + 8))
    {
      __n128 result = *(__n128 *)a3;
      __n128 v25 = *(__n128 *)a3;
      uint64_t v17 = *(void *)(a4 + 7);
      *(void *)a3 = *(void *)a4;
      *(void *)(a3 + 7) = v17;
      *(void *)(a4 + 7) = *(unint64_t *)((char *)v25.n128_u64 + 7);
      *(void *)a4 = v25.n128_u64[0];
      unint64_t v18 = (*(void *)a3 >> 16) & 0xFFFF0000 | (*(void *)a3 << 32) | ((*(void *)a3 & 0xFF000000000000) == 0);
      unint64_t v19 = (*(void *)a2 >> 16) & 0xFFFF0000 | (*(void *)a2 << 32) | ((*(void *)a2 & 0xFF000000000000) == 0);
      if (v18 < v19 || v19 >= v18 && *(_DWORD *)(a3 + 8) < *(_DWORD *)(a2 + 8))
      {
        __n128 result = *(__n128 *)a2;
        __n128 v26 = *(__n128 *)a2;
        uint64_t v20 = *(void *)(a3 + 7);
        *(void *)a2 = *(void *)a3;
        *(void *)(a2 + 7) = v20;
        *(void *)(a3 + 7) = *(unint64_t *)((char *)v26.n128_u64 + 7);
        *(void *)a3 = v26.n128_u64[0];
        unint64_t v21 = (*(void *)a2 >> 16) & 0xFFFF0000 | (*(void *)a2 << 32) | ((*(void *)a2 & 0xFF000000000000) == 0);
        unint64_t v22 = (*(void *)a1 >> 16) & 0xFFFF0000 | (*(void *)a1 << 32) | ((*(void *)a1 & 0xFF000000000000) == 0);
        if (v21 < v22 || v22 >= v21 && *(_DWORD *)(a2 + 8) < *(_DWORD *)(a1 + 8))
        {
          __n128 result = *(__n128 *)a1;
          __n128 v27 = *(__n128 *)a1;
          uint64_t v23 = *(void *)(a2 + 7);
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 7) = v23;
          *(void *)(a2 + 7) = *(unint64_t *)((char *)v27.n128_u64 + 7);
          *(void *)a2 = v27.n128_u64[0];
        }
      }
    }
  }
  return result;
}

uint64_t sub_33DA4C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (uint64_t *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        unint64_t v10 = ((unint64_t)*v8 >> 16) & 0xFFFF0000 | (*v8 << 32) | ((*v8 & 0xFF000000000000) == 0);
        unint64_t v11 = ((unint64_t)v8[2] >> 16) & 0xFFFF0000 | (v8[2] << 32) | ((v8[2] & 0xFF000000000000) == 0);
        if (v10 < v11
          || (v11 >= v10 ? (BOOL v12 = *(_DWORD *)(result + 16 * v7 + 8) >= *((_DWORD *)v8 + 6)) : (BOOL v12 = 1), !v12))
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      unint64_t v13 = *a4;
      unint64_t v14 = ((unint64_t)*v8 >> 16) & 0xFFFF0000 | (*v8 << 32) | ((*v8 & 0xFF000000000000) == 0);
      unint64_t v15 = (v13 >> 16) & 0xFFFF0000 | (v13 << 32) | ((v13 & 0xFF000000000000) == 0);
      if (v14 >= v15)
      {
        unsigned int v16 = *((_DWORD *)a4 + 2);
        if (v15 < v14 || *((_DWORD *)v8 + 2) >= v16)
        {
          int v18 = *((_DWORD *)a4 + 3);
          do
          {
            unint64_t v19 = a4;
            a4 = (unint64_t *)v8;
            unint64_t v20 = *v8;
            *(unint64_t *)((char *)v19 + 7) = *(unint64_t *)((char *)a4 + 7);
            unint64_t *v19 = v20;
            if (v5 < v7) {
              break;
            }
            uint64_t v21 = (2 * v7) | 1;
            uint64_t v8 = (uint64_t *)(result + 16 * v21);
            uint64_t v22 = 2 * v7 + 2;
            if (v22 < a3)
            {
              unint64_t v23 = ((unint64_t)*v8 >> 16) & 0xFFFF0000 | (*v8 << 32) | ((*v8 & 0xFF000000000000) == 0);
              unint64_t v24 = ((unint64_t)v8[2] >> 16) & 0xFFFF0000 | (v8[2] << 32) | ((v8[2] & 0xFF000000000000) == 0);
              if (v23 < v24
                || (v24 >= v23 ? (BOOL v25 = *(_DWORD *)(result + 16 * v21 + 8) >= *((_DWORD *)v8 + 6)) : (BOOL v25 = 1), !v25))
              {
                v8 += 2;
                uint64_t v21 = v22;
              }
            }
            unint64_t v26 = ((unint64_t)*v8 >> 16) & 0xFFFF0000 | (*v8 << 32) | ((*v8 & 0xFF000000000000) == 0);
            if (v26 < v15) {
              break;
            }
            BOOL v27 = v15 < v26 || *((_DWORD *)v8 + 2) >= v16;
            uint64_t v7 = v21;
          }
          while (v27);
          *a4 = v13;
          *((_DWORD *)a4 + 2) = v16;
          *((_WORD *)a4 + 6) = v18;
          *((unsigned char *)a4 + 14) = BYTE2(v18);
        }
      }
    }
  }
  return result;
}

_OWORD *sub_33DC28(_OWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v4 = 0;
    long long v33 = *result;
    int64_t v5 = result;
    do
    {
      uint64_t v7 = v5;
      uint64_t v8 = v4 + 1;
      v5 += v4 + 1;
      uint64_t v9 = 2 * v4;
      uint64_t v4 = (2 * v4) | 1;
      uint64_t v10 = v9 + 2;
      if (v10 < a4)
      {
        unint64_t v11 = (*(void *)v5 >> 16) & 0xFFFF0000 | (*(void *)v5 << 32) | ((*(void *)v5 & 0xFF000000000000) == 0);
        unint64_t v12 = (*((void *)v5 + 2) >> 16) & 0xFFFF0000 | (*((void *)v5 + 2) << 32) | ((v5[1] & 0xFF000000000000) == 0);
        if (v11 < v12 || ((unsigned int v13 = v7[2 * v8 + 1], v12 >= v11) ? (v14 = v13 >= *((_DWORD *)v5 + 6)) : (v14 = 1), !v14))
        {
          ++v5;
          uint64_t v4 = v10;
        }
      }
      uint64_t v6 = *(void *)v5;
      *(void *)((char *)v7 + 7) = *(void *)((char *)v5 + 7);
      *uint64_t v7 = v6;
    }
    while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
    unint64_t v15 = (uint64_t *)(a2 - 16);
    if (v5 == (_OWORD *)(a2 - 16))
    {
      *(void *)((char *)v5 + 7) = *(void *)((char *)&v33 + 7);
      *(void *)int64_t v5 = v33;
    }
    else
    {
      uint64_t v16 = *v15;
      *(void *)((char *)v5 + 7) = *(void *)(a2 - 9);
      *(void *)int64_t v5 = v16;
      *unint64_t v15 = v33;
      *(void *)(a2 - 9) = *(void *)((char *)&v33 + 7);
      uint64_t v17 = (char *)v5 - (char *)result + 16;
      if (v17 >= 17)
      {
        unint64_t v18 = ((unint64_t)v17 >> 4) - 2;
        unint64_t v19 = v18 >> 1;
        unint64_t v20 = &result[v18 >> 1];
        unint64_t v21 = *(void *)v5;
        unint64_t v22 = (*(void *)v20 >> 16) & 0xFFFF0000 | (*(void *)v20 << 32) | ((*(void *)v20 & 0xFF000000000000) == 0);
        unint64_t v23 = (v21 >> 16) & 0xFFFF0000 | (v21 << 32) | ((v21 & 0xFF000000000000) == 0);
        unsigned int v24 = *((_DWORD *)v5 + 2);
        if (v22 < v23 || (v23 >= v22 ? (BOOL v25 = *((_DWORD *)v20 + 2) >= v24) : (BOOL v25 = 1), !v25))
        {
          int v26 = *((_DWORD *)v5 + 3);
          uint64_t v27 = *(void *)((char *)v20 + 7);
          *(void *)int64_t v5 = *(void *)v20;
          *(void *)((char *)v5 + 7) = v27;
          if (v18 >= 2)
          {
            while (1)
            {
              unint64_t v29 = v19 - 1;
              unint64_t v19 = (v19 - 1) >> 1;
              uint64_t v30 = &result[v19];
              unint64_t v31 = (*(void *)v30 >> 16) & 0xFFFF0000 | (*(void *)v30 << 32) | ((*(void *)v30 & 0xFF000000000000) == 0);
              if (v31 >= v23 && (v23 < v31 || *((_DWORD *)v30 + 2) >= v24)) {
                break;
              }
              uint64_t v28 = *(void *)v30;
              *(void *)((char *)v20 + 7) = *(void *)((char *)v30 + 7);
              *(void *)unint64_t v20 = v28;
              unint64_t v20 = &result[v19];
              if (v29 <= 1) {
                goto LABEL_30;
              }
            }
          }
          uint64_t v30 = v20;
LABEL_30:
          *(void *)uint64_t v30 = v21;
          *((_DWORD *)v30 + 2) = v24;
          *((_WORD *)v30 + 6) = v26;
          *((unsigned char *)v30 + 14) = BYTE2(v26);
        }
      }
    }
  }
  return result;
}

void sub_33DE40(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
uint64_t sub_33E410(long long *a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  if (*a2 < *(void *)a1
    || *(void *)a1 >= v3
    && ((v17 = *((_DWORD *)a1 + 2), unsigned int v18 = *((_DWORD *)a2 + 2), v18 < v17)
     || v17 >= v18 && (unint64_t)a2[2] < *((void *)a1 + 2)))
  {
    if (*(void *)a3 < v3
      || v3 >= *(void *)a3
      && ((unsigned int v19 = *((_DWORD *)a2 + 2), v20 = *((_DWORD *)a3 + 2), v20 < v19)
       || v19 >= v20 && *((void *)a3 + 2) < (unint64_t)a2[2]))
    {
      long long v22 = *a1;
      long long v21 = a1[1];
      long long v23 = a3[1];
      *a1 = *a3;
      a1[1] = v23;
      *a3 = v22;
      a3[1] = v21;
      return 1;
    }
    long long v5 = *a1;
    long long v4 = a1[1];
    long long v6 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v6;
    *(_OWORD *)a2 = v5;
    *((_OWORD *)a2 + 1) = v4;
    if (*(void *)a3 < *a2) {
      goto LABEL_5;
    }
    if (*a2 < *(void *)a3) {
      return 1;
    }
    unsigned int v26 = *((_DWORD *)a2 + 2);
    unsigned int v27 = *((_DWORD *)a3 + 2);
    if (v27 < v26) {
      goto LABEL_5;
    }
    if (v26 < v27) {
      return 1;
    }
    if (*((void *)a3 + 2) < (unint64_t)a2[2])
    {
LABEL_5:
      long long v8 = *(_OWORD *)a2;
      long long v7 = *((_OWORD *)a2 + 1);
      long long v9 = a3[1];
      *(_OWORD *)a2 = *a3;
      *((_OWORD *)a2 + 1) = v9;
      *a3 = v8;
      a3[1] = v7;
      return 2;
    }
    return 1;
  }
  else
  {
    if (*(void *)a3 < v3) {
      goto LABEL_8;
    }
    if (v3 < *(void *)a3) {
      return 0;
    }
    unsigned int v24 = *((_DWORD *)a2 + 2);
    unsigned int v25 = *((_DWORD *)a3 + 2);
    if (v25 < v24) {
      goto LABEL_8;
    }
    if (v24 < v25) {
      return 0;
    }
    if (*((void *)a3 + 2) < (unint64_t)a2[2])
    {
LABEL_8:
      long long v12 = *(_OWORD *)a2;
      long long v11 = *((_OWORD *)a2 + 1);
      long long v13 = a3[1];
      *(_OWORD *)a2 = *a3;
      *((_OWORD *)a2 + 1) = v13;
      *a3 = v12;
      a3[1] = v11;
      if (*a2 < *(void *)a1)
      {
LABEL_9:
        long long v15 = *a1;
        long long v14 = a1[1];
        long long v16 = *((_OWORD *)a2 + 1);
        *a1 = *(_OWORD *)a2;
        a1[1] = v16;
        *(_OWORD *)a2 = v15;
        *((_OWORD *)a2 + 1) = v14;
        return 2;
      }
      if (*(void *)a1 >= *a2)
      {
        unsigned int v28 = *((_DWORD *)a1 + 2);
        unsigned int v29 = *((_DWORD *)a2 + 2);
        if (v29 < v28) {
          goto LABEL_9;
        }
        if (v28 >= v29)
        {
          if ((unint64_t)a2[2] < *((void *)a1 + 2)) {
            goto LABEL_9;
          }
          return 1;
        }
        else
        {
          return 1;
        }
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
}

long long *sub_33E630(long long *a1, unint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *((void *)a1 + 1);
  long long v4 = a1[1];
  uint64_t v5 = *(void *)(a2 - 32);
  if (*(void *)a1 >= v5
    && (v5 < v2
     || (unsigned int v6 = *(_DWORD *)(a2 - 24), v3 >= v6)
     && (v6 < v3 || (unint64_t)v4 >= *(void *)(a2 - 16))))
  {
    for (i = a1 + 2; (unint64_t)i < a2; i += 2)
    {
      if (v2 < *(void *)i) {
        break;
      }
      if (*(void *)i >= v2)
      {
        unsigned int v11 = *((_DWORD *)i + 2);
        if (v3 < v11 || v11 >= v3 && (unint64_t)v4 < *((void *)i + 2)) {
          break;
        }
      }
    }
  }
  else
  {
    i = a1 + 2;
    uint64_t v8 = *((void *)a1 + 4);
    if (v2 >= v8)
    {
      do
      {
        if (v8 >= v2)
        {
          unsigned int v10 = *((_DWORD *)i + 2);
          if (v3 < v10 || v10 >= v3 && (unint64_t)v4 < *((void *)i + 2)) {
            break;
          }
        }
        uint64_t v9 = *((void *)i + 4);
        i += 2;
        uint64_t v8 = v9;
      }
      while (v2 >= v9);
    }
  }
  if ((unint64_t)i < a2)
  {
    for (a2 -= 32; ; a2 -= 32)
    {
      if (v2 >= v5)
      {
        if (v5 < v2) {
          break;
        }
        unsigned int v13 = *(_DWORD *)(a2 + 8);
        if (v3 >= v13 && (v13 < v3 || (unint64_t)v4 >= *(void *)(a2 + 16))) {
          break;
        }
      }
      uint64_t v12 = *(void *)(a2 - 32);
      uint64_t v5 = v12;
    }
  }
  while ((unint64_t)i < a2)
  {
    long long v23 = *i;
    long long v24 = i[1];
    long long v14 = *(_OWORD *)(a2 + 16);
    long long *i = *(_OWORD *)a2;
    i[1] = v14;
    *(_OWORD *)a2 = v23;
    *(_OWORD *)(a2 + 16) = v24;
    while (1)
    {
      uint64_t v16 = *((void *)i + 4);
      i += 2;
      uint64_t v15 = v16;
      if (v2 < v16) {
        break;
      }
      if (v15 >= v2)
      {
        unsigned int v17 = *((_DWORD *)i + 2);
        if (v3 < v17 || v17 >= v3 && (unint64_t)v4 < *((void *)i + 2)) {
          break;
        }
      }
    }
    do
    {
      do
      {
        uint64_t v19 = *(void *)(a2 - 32);
        a2 -= 32;
        uint64_t v18 = v19;
      }
      while (v2 < v19);
      if (v18 < v2) {
        break;
      }
      unsigned int v20 = *(_DWORD *)(a2 + 8);
    }
    while (v3 < v20 || v20 >= v3 && (unint64_t)v4 < *(void *)(a2 + 16));
  }
  if (i - 2 != a1)
  {
    long long v21 = *(i - 1);
    *a1 = *(i - 2);
    a1[1] = v21;
  }
  *((void *)i - 4) = v2;
  *((void *)i - 3) = v3;
  *(i - 1) = v4;
  return i;
}

unint64_t sub_33E840(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  long long v5 = *((_OWORD *)a1 + 1);
  unint64_t v6 = a1[2];
  while (1)
  {
    long long v7 = &a1[v2];
    uint64_t v8 = a1[v2 + 4];
    if (v8 >= v3)
    {
      if (v3 < v8) {
        break;
      }
      unsigned int v9 = *((_DWORD *)v7 + 10);
      if (v9 >= v4 && (v4 < v9 || v7[6] >= v6)) {
        break;
      }
    }
    v2 += 4;
  }
  unint64_t v10 = (unint64_t)&a1[v2 + 4];
  if (v2 * 8)
  {
    while (1)
    {
      uint64_t v12 = *(void *)(a2 - 32);
      a2 -= 32;
      uint64_t v11 = v12;
      if (v12 < v3) {
        break;
      }
      if (v3 >= v11)
      {
        unsigned int v13 = *(_DWORD *)(a2 + 8);
        if (v13 < v4 || v4 >= v13 && *(void *)(a2 + 16) < v6) {
          break;
        }
      }
    }
  }
  else
  {
LABEL_25:
    if (v10 < a2)
    {
      do
      {
        uint64_t v15 = *(void *)(a2 - 32);
        a2 -= 32;
        uint64_t v14 = v15;
        if (v15 < v3) {
          break;
        }
        if (v3 < v14) {
          goto LABEL_25;
        }
        unsigned int v16 = *(_DWORD *)(a2 + 8);
        if (v16 < v4) {
          break;
        }
        if (v4 < v16) {
          goto LABEL_25;
        }
      }
      while (*(void *)(a2 + 16) >= v6 && v10 < a2);
    }
  }
  unint64_t v18 = v10;
  if (v10 < a2)
  {
    unint64_t v19 = a2;
    do
    {
      long long v29 = *(_OWORD *)v18;
      long long v30 = *(_OWORD *)(v18 + 16);
      long long v20 = *(_OWORD *)(v19 + 16);
      *(_OWORD *)unint64_t v18 = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 16) = v20;
      *(_OWORD *)unint64_t v19 = v29;
      *(_OWORD *)(v19 + 16) = v30;
      do
      {
        do
        {
          uint64_t v22 = *(void *)(v18 + 32);
          v18 += 32;
          uint64_t v21 = v22;
        }
        while (v22 < v3);
        if (v3 < v21) {
          break;
        }
        unsigned int v23 = *(_DWORD *)(v18 + 8);
      }
      while (v23 < v4 || v4 >= v23 && *(void *)(v18 + 16) < v6);
      while (1)
      {
        uint64_t v25 = *(void *)(v19 - 32);
        v19 -= 32;
        uint64_t v24 = v25;
        if (v25 < v3) {
          break;
        }
        if (v3 >= v24)
        {
          unsigned int v26 = *(_DWORD *)(v19 + 8);
          if (v26 < v4 || v4 >= v26 && *(void *)(v19 + 16) < v6) {
            break;
          }
        }
      }
    }
    while (v18 < v19);
  }
  if ((uint64_t *)(v18 - 32) != a1)
  {
    long long v27 = *(_OWORD *)(v18 - 16);
    *(_OWORD *)a1 = *(_OWORD *)(v18 - 32);
    *((_OWORD *)a1 + 1) = v27;
  }
  *(void *)(v18 - 32) = v3;
  *(void *)(v18 - 24) = v4;
  *(_OWORD *)(v18 - 16) = v5;
  return v18 - 32;
}

BOOL sub_33E9F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v22 = (long long *)(a2 - 32);
      uint64_t v23 = *(void *)(a2 - 32);
      if (v23 < *(void *)a1
        || *(void *)a1 >= v23
        && ((unsigned int v27 = *(_DWORD *)(a1 + 8), v28 = *(_DWORD *)(a2 - 24), v28 < v27)
         || v27 >= v28 && *(void *)(a2 - 16) < *(void *)(a1 + 16)))
      {
        long long v25 = *(_OWORD *)a1;
        long long v24 = *(_OWORD *)(a1 + 16);
        long long v26 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)a1 = *v22;
        *(_OWORD *)(a1 + 16) = v26;
        *uint64_t v22 = v25;
        *(_OWORD *)(a2 - 16) = v24;
      }
      return result;
    case 3:
      sub_33E410((long long *)a1, (uint64_t *)(a1 + 32), (long long *)(a2 - 32));
      return 1;
    case 4:
      sub_33ECD4(a1, (__n128 *)(a1 + 32), a1 + 64, a2 - 32);
      return 1;
    case 5:
      sub_33EE08(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32);
      return 1;
    default:
      uint64_t v6 = a1 + 64;
      sub_33E410((long long *)a1, (uint64_t *)(a1 + 32), (long long *)(a1 + 64));
      uint64_t v7 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (2)
  {
    uint64_t v11 = *(void *)v7;
    if (*(void *)v7 >= *(void *)v6)
    {
      if (*(void *)v6 < v11) {
        goto LABEL_8;
      }
      unsigned int v21 = *(_DWORD *)(v6 + 8);
      unsigned int v12 = *(_DWORD *)(v7 + 8);
      if (v12 >= v21 && (v21 < v12 || *(void *)(v7 + 16) >= *(void *)(v6 + 16))) {
        goto LABEL_8;
      }
    }
    else
    {
      unsigned int v12 = *(_DWORD *)(v7 + 8);
    }
    int v13 = *(_DWORD *)(v7 + 12);
    long long v14 = *(_OWORD *)(v7 + 16);
    long long v15 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
    *(_OWORD *)(v7 + 16) = v15;
    uint64_t v10 = a1;
    if (v6 == a1) {
      goto LABEL_7;
    }
    uint64_t v16 = v8;
    while (1)
    {
      uint64_t v18 = a1 + v16;
      uint64_t v19 = *(void *)(a1 + v16 + 32);
      if (v11 >= v19)
      {
        if (v19 < v11) {
          goto LABEL_25;
        }
        unsigned int v20 = *(_DWORD *)(v18 + 40);
        if (v12 >= v20) {
          break;
        }
      }
LABEL_13:
      v6 -= 32;
      long long v17 = *(_OWORD *)(a1 + v16 + 48);
      *(_OWORD *)(v18 + 64) = *(_OWORD *)(a1 + v16 + 32);
      *(_OWORD *)(v18 + 80) = v17;
      v16 -= 32;
      if (v16 == -64)
      {
        uint64_t v10 = a1;
        goto LABEL_7;
      }
    }
    if (v20 >= v12)
    {
      if ((unint64_t)v14 >= *(void *)(v18 + 48))
      {
        uint64_t v10 = a1 + v16 + 64;
        goto LABEL_7;
      }
      goto LABEL_13;
    }
LABEL_25:
    uint64_t v10 = v6;
LABEL_7:
    *(void *)uint64_t v10 = v11;
    *(_DWORD *)(v10 + 8) = v12;
    *(_DWORD *)(v10 + 12) = v13;
    *(_OWORD *)(v10 + 16) = v14;
    if (++v9 == 8) {
      return v7 + 32 == a2;
    }
LABEL_8:
    uint64_t v6 = v7;
    v8 += 32;
    v7 += 32;
    if (v7 != a2) {
      continue;
    }
    return 1;
  }
}

__n128 sub_33ECD4(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  sub_33E410((long long *)a1, (uint64_t *)a2, (long long *)a3);
  if (*(void *)a4 < *(void *)a3
    || *(void *)a3 >= *(void *)a4
    && ((unsigned int v9 = *(_DWORD *)(a3 + 8), v10 = *(_DWORD *)(a4 + 8), v10 < v9)
     || v9 >= v10 && *(void *)(a4 + 16) < *(void *)(a3 + 16)))
  {
    long long v11 = *(_OWORD *)a3;
    __n128 result = *(__n128 *)(a3 + 16);
    long long v12 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v12;
    *(_OWORD *)a4 = v11;
    *(__n128 *)(a4 + 16) = result;
    if (*(void *)a3 < (int64_t)a2->n128_u64[0]
      || (int64_t)a2->n128_u64[0] >= *(void *)a3
      && ((unsigned __int32 v13 = a2->n128_u32[2], v14 = *(_DWORD *)(a3 + 8), v14 < v13)
       || v13 >= v14 && *(void *)(a3 + 16) < a2[1].n128_u64[0]))
    {
      __n128 v15 = *a2;
      __n128 result = a2[1];
      __n128 v16 = *(__n128 *)(a3 + 16);
      *a2 = *(__n128 *)a3;
      a2[1] = v16;
      *(__n128 *)a3 = v15;
      *(__n128 *)(a3 + 16) = result;
      if ((int64_t)a2->n128_u64[0] < *(void *)a1
        || *(void *)a1 >= (int64_t)a2->n128_u64[0]
        && ((v17 = *(_DWORD *)(a1 + 8), unsigned __int32 v18 = a2->n128_u32[2], v18 < v17)
         || v17 >= v18 && a2[1].n128_u64[0] < *(void *)(a1 + 16)))
      {
        long long v19 = *(_OWORD *)a1;
        __n128 result = *(__n128 *)(a1 + 16);
        __n128 v20 = a2[1];
        *(__n128 *)a1 = *a2;
        *(__n128 *)(a1 + 16) = v20;
        *a2 = (__n128)v19;
        a2[1] = result;
      }
    }
  }
  return result;
}

void sub_33EE08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_33ECD4(a1, (__n128 *)a2, a3, a4);
  if (*(void *)a5 < *(void *)a4
    || *(void *)a4 >= *(void *)a5
    && ((v28 = *(_DWORD *)(a4 + 8), unsigned int v29 = *(_DWORD *)(a5 + 8), v29 < v28)
     || v28 >= v29 && *(void *)(a5 + 16) < *(void *)(a4 + 16)))
  {
    long long v11 = *(_OWORD *)a4;
    long long v10 = *(_OWORD *)(a4 + 16);
    long long v12 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v12;
    *(_OWORD *)a5 = v11;
    *(_OWORD *)(a5 + 16) = v10;
    if (*(void *)a4 < *(void *)a3
      || *(void *)a3 >= *(void *)a4
      && ((unsigned int v13 = *(_DWORD *)(a3 + 8), v14 = *(_DWORD *)(a4 + 8), v14 < v13)
       || v13 >= v14 && *(void *)(a4 + 16) < *(void *)(a3 + 16)))
    {
      long long v16 = *(_OWORD *)a3;
      long long v15 = *(_OWORD *)(a3 + 16);
      long long v17 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v17;
      *(_OWORD *)a4 = v16;
      *(_OWORD *)(a4 + 16) = v15;
      if (*(void *)a3 < *(void *)a2
        || *(void *)a2 >= *(void *)a3
        && ((unsigned int v18 = *(_DWORD *)(a2 + 8), v19 = *(_DWORD *)(a3 + 8), v19 < v18)
         || v18 >= v19 && *(void *)(a3 + 16) < *(void *)(a2 + 16)))
      {
        __n128 v21 = *(__n128 *)a2;
        long long v20 = *(_OWORD *)(a2 + 16);
        long long v22 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v22;
        *(__n128 *)a3 = v21;
        *(_OWORD *)(a3 + 16) = v20;
        if (*(void *)a2 < *(void *)a1
          || *(void *)a1 >= *(void *)a2
          && ((unsigned int v23 = *(_DWORD *)(a1 + 8), v24 = *(_DWORD *)(a2 + 8), v24 < v23)
           || v23 >= v24 && *(void *)(a2 + 16) < *(void *)(a1 + 16)))
        {
          long long v26 = *(_OWORD *)a1;
          long long v25 = *(_OWORD *)(a1 + 16);
          long long v27 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v27;
          *(_OWORD *)a2 = v26;
          *(_OWORD *)(a2 + 16) = v25;
        }
      }
    }
  }
}

uint64_t sub_33EFB0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 5)
    {
      uint64_t v6 = v4 >> 4;
      uint64_t v7 = (v4 >> 4) + 1;
      uint64_t v8 = (_OWORD *)(result + 32 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        uint64_t v10 = *((void *)v8 + 4);
        if (*(void *)v8 < v10
          || v10 >= *(void *)v8
          && ((v11 = *((_DWORD *)v8 + 10), unsigned int v12 = *((_DWORD *)v8 + 2), v12 < v11)
           || v11 >= v12 && *((void *)v8 + 2) < *((void *)v8 + 6)))
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      uint64_t v13 = *a4;
      if (*(void *)v8 >= *a4)
      {
        unsigned int v14 = *((_DWORD *)a4 + 2);
        if (v13 >= *(void *)v8)
        {
          unsigned int v16 = *((_DWORD *)v8 + 2);
          if (v16 < v14) {
            return result;
          }
          unint64_t v15 = a4[2];
          if (v14 >= v16 && *((void *)v8 + 2) < v15) {
            return result;
          }
        }
        else
        {
          unint64_t v15 = a4[2];
        }
        int v17 = *((_DWORD *)a4 + 3);
        uint64_t v18 = a4[3];
        long long v19 = v8[1];
        *(_OWORD *)a4 = *v8;
        *((_OWORD *)a4 + 1) = v19;
        while (v5 >= v7)
        {
          __n128 v21 = v8;
          uint64_t v22 = 2 * v7;
          uint64_t v7 = (2 * v7) | 1;
          uint64_t v8 = (_OWORD *)(result + 32 * v7);
          uint64_t v23 = v22 + 2;
          if (v23 < a3)
          {
            uint64_t v24 = *((void *)v8 + 4);
            if (*(void *)v8 < v24
              || v24 >= *(void *)v8
              && ((unsigned int v25 = *((_DWORD *)v8 + 10), v26 = *((_DWORD *)v8 + 2), v26 < v25)
               || v25 >= v26 && *((void *)v8 + 2) < *((void *)v8 + 6)))
            {
              v8 += 2;
              uint64_t v7 = v23;
            }
          }
          if (*(void *)v8 < v13
            || v13 >= *(void *)v8
            && ((unsigned int v27 = *((_DWORD *)v8 + 2), v27 < v14) || v14 >= v27 && *((void *)v8 + 2) < v15))
          {
            uint64_t v8 = v21;
            break;
          }
          long long v20 = v8[1];
          _OWORD *v21 = *v8;
          v21[1] = v20;
        }
        *(void *)uint64_t v8 = v13;
        *((_DWORD *)v8 + 2) = v14;
        *((_DWORD *)v8 + 3) = v17;
        *((void *)v8 + 2) = v15;
        *((void *)v8 + 3) = v18;
      }
    }
  }
  return result;
}

_OWORD *sub_33F160(_OWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v4 = 0;
    long long v29 = *result;
    long long v30 = result[1];
    int64_t v5 = result;
    do
    {
      uint64_t v7 = v5;
      v5 += 2 * v4 + 2;
      uint64_t v8 = 2 * v4;
      uint64_t v4 = (2 * v4) | 1;
      uint64_t v9 = v8 + 2;
      if (v9 < a4)
      {
        uint64_t v10 = *((void *)v5 + 4);
        if (*(void *)v5 < v10
          || v10 >= *(void *)v5
          && ((v11 = *((_DWORD *)v5 + 10), unsigned int v12 = *((_DWORD *)v5 + 2), v12 < v11)
           || v11 >= v12 && *((void *)v5 + 2) < *((void *)v5 + 6)))
        {
          v5 += 2;
          uint64_t v4 = v9;
        }
      }
      long long v6 = v5[1];
      *uint64_t v7 = *v5;
      v7[1] = v6;
    }
    while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
    uint64_t v13 = (_OWORD *)(a2 - 32);
    if (v5 == (_OWORD *)(a2 - 32))
    {
      *int64_t v5 = v29;
      v5[1] = v30;
      return result;
    }
    long long v14 = *(_OWORD *)(a2 - 16);
    *int64_t v5 = *v13;
    v5[1] = v14;
    *uint64_t v13 = v29;
    *(_OWORD *)(a2 - 16) = v30;
    uint64_t v15 = (char *)v5 - (char *)result + 32;
    if (v15 < 33) {
      return result;
    }
    unint64_t v16 = ((unint64_t)v15 >> 5) - 2;
    unint64_t v17 = v16 >> 1;
    uint64_t v18 = &result[2 * (v16 >> 1)];
    uint64_t v19 = *(void *)v5;
    if (*(void *)v18 >= *(void *)v5)
    {
      if (v19 < *(void *)v18) {
        return result;
      }
      unsigned int v20 = *((_DWORD *)v5 + 2);
      unsigned int v25 = *((_DWORD *)v18 + 2);
      if (v25 >= v20 && (v20 < v25 || *((void *)v18 + 2) >= *((void *)v5 + 2))) {
        return result;
      }
    }
    else
    {
      unsigned int v20 = *((_DWORD *)v5 + 2);
    }
    int v21 = *((_DWORD *)v5 + 3);
    long long v22 = v5[1];
    long long v23 = v18[1];
    *int64_t v5 = *v18;
    v5[1] = v23;
    if (v16 >= 2)
    {
      while (1)
      {
        unint64_t v27 = v17 - 1;
        unint64_t v17 = (v17 - 1) >> 1;
        uint64_t v24 = &result[2 * v17];
        if (*(void *)v24 >= v19)
        {
          if (v19 < *(void *)v24) {
            break;
          }
          unsigned int v28 = *((_DWORD *)v24 + 2);
          if (v28 >= v20 && (v20 < v28 || *((void *)v24 + 2) >= (unint64_t)v22)) {
            break;
          }
        }
        long long v26 = v24[1];
        *uint64_t v18 = *v24;
        v18[1] = v26;
        uint64_t v18 = &result[2 * v17];
        if (v27 <= 1) {
          goto LABEL_18;
        }
      }
    }
    uint64_t v24 = v18;
LABEL_18:
    *(void *)uint64_t v24 = v19;
    *((_DWORD *)v24 + 2) = v20;
    *((_DWORD *)v24 + 3) = v21;
    v24[1] = v22;
  }
  return result;
}

void sub_33F340(unsigned int *a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
void sub_33F72C(uint64_t a1, void *a2)
{
  if ((void *)a1 != a2)
  {
    uint64_t v3 = (void *)(a1 + 144);
    if ((void *)(a1 + 144) != a2)
    {
      uint64_t v64 = 0;
      uint64_t v4 = (void *)a1;
      do
      {
        char v5 = v3;
        char v6 = (long long *)(v4 + 21);
        uint64_t v7 = (long long *)(v4 + 25);
        v65[0] = v4 + 21;
        v65[1] = v3;
        uint64_t v8 = (long long *)(v4 + 28);
        long long v66 = v4 + 25;
        *(void *)&long long v67 = v4 + 24;
        *((void *)&v67 + 1) = v4 + 28;
        long long v68 = v4 + 31;
        long long v79 = (long long *)(v4 + 3);
        long long v80 = (void **)v4;
        uint64_t v81 = (long long *)(v4 + 7);
        long long v82 = v4 + 6;
        p_p = (long long *)(v4 + 10);
        int v84 = (int *)(v4 + 13);
        if (!sub_341B84((uint64_t)v78, (uint64_t)v65, (uint64_t)&v79)) {
          goto LABEL_4;
        }
        long long v9 = *(_OWORD *)v5;
        uint64_t v10 = (void *)v5[2];
        v5[1] = 0;
        v5[2] = 0;
        *char v5 = 0;
        long long v68 = (void *)v4[23];
        *(_OWORD *)unsigned int v65 = v9;
        long long v67 = *v6;
        *(void *)char v6 = 0;
        v4[22] = 0;
        v4[23] = 0;
        uint64_t v11 = v4[24];
        long long v66 = v10;
        uint64_t v69 = v11;
        long long v12 = *v7;
        uint64_t v71 = v4[27];
        long long v70 = v12;
        v4[26] = 0;
        v4[27] = 0;
        *(void *)uint64_t v7 = 0;
        long long v13 = *v8;
        uint64_t v73 = v4[30];
        long long __p = v13;
        *(void *)uint64_t v8 = 0;
        v4[29] = 0;
        v4[30] = 0;
        int v74 = *((_DWORD *)v4 + 62);
        long long v75 = *((_OWORD *)v4 + 16);
        v4[32] = 0;
        v4[33] = 0;
        uint64_t v14 = v4[34];
        uint64_t v15 = v4[35];
        v4[34] = 0;
        uint64_t v16 = v64;
        uint64_t v76 = v14;
        uint64_t v77 = v15;
        while (1)
        {
          uint64_t v17 = a1 + v16;
          uint64_t v18 = (void **)(a1 + v16 + 144);
          if (*(char *)(a1 + v16 + 167) < 0) {
            operator delete(*v18);
          }
          *(_OWORD *)uint64_t v18 = *(_OWORD *)v17;
          *(void *)(a1 + v16 + 160) = *(void *)(v17 + 16);
          *(unsigned char *)(v17 + 23) = 0;
          *(unsigned char *)uint64_t v17 = 0;
          uint64_t v19 = v17 + 168;
          if (*(char *)(v17 + 191) < 0) {
            operator delete(*(void **)v19);
          }
          uint64_t v20 = v17 + 24;
          uint64_t v21 = a1 + v16;
          *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
          *(void *)(v19 + 16) = *(void *)(v20 + 16);
          *(unsigned char *)(v21 + 47) = 0;
          *(unsigned char *)uint64_t v20 = 0;
          *(void *)(v21 + 192) = *(void *)(a1 + v16 + 48);
          char v22 = (void **)(a1 + v16 + 200);
          if (*(char *)(a1 + v16 + 223) < 0) {
            operator delete(*v22);
          }
          *(_OWORD *)char v22 = *(_OWORD *)(v21 + 56);
          *(void *)(a1 + v16 + 216) = *(void *)(v21 + 72);
          *(unsigned char *)(v21 + 79) = 0;
          *(unsigned char *)(v21 + 56) = 0;
          uint64_t v23 = v21 + 224;
          if (*(char *)(v21 + 247) < 0) {
            operator delete(*(void **)v23);
          }
          uint64_t v24 = v21 + 80;
          uint64_t v25 = a1 + v16;
          *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
          *(void *)(v23 + 16) = *(void *)(v24 + 16);
          *(unsigned char *)(v25 + 103) = 0;
          *(unsigned char *)uint64_t v24 = 0;
          *(_DWORD *)(v25 + 248) = *(_DWORD *)(a1 + v16 + 104);
          uint64_t v26 = (void **)(a1 + v16 + 256);
          unint64_t v27 = *v26;
          if (*v26)
          {
            *(void *)(v25 + 264) = v27;
            operator delete(v27);
            *uint64_t v26 = 0;
            *(void *)(a1 + v16 + 264) = 0;
            *(void *)(a1 + v16 + 272) = 0;
          }
          *(_OWORD *)uint64_t v26 = *(_OWORD *)(v25 + 112);
          uint64_t v28 = *(void *)(v25 + 128);
          uint64_t v29 = *(void *)(v25 + 136);
          *(void *)(v25 + 120) = 0;
          *(void *)(v25 + 128) = 0;
          *(void *)(v25 + 112) = 0;
          *(void *)(v25 + 272) = v28;
          *(void *)(v25 + 280) = v29;
          if (!v16) {
            break;
          }
          long long v79 = &v67;
          long long v80 = v65;
          uint64_t v81 = &v70;
          long long v82 = &v69;
          p_p = &__p;
          int v84 = &v74;
          long long v30 = *(const void **)(a1 + v16 - 120);
          v78[0] = a1 + v16 - 120;
          v78[1] = a1 + v16 - 144;
          v78[2] = a1 + v16 - 88;
          v78[3] = a1 + v16 - 96;
          v78[4] = a1 + v16 - 64;
          v78[5] = a1 + v16 - 40;
          int v31 = *(char *)(a1 + v16 - 97);
          if (SHIBYTE(v68) >= 0) {
            size_t v32 = HIBYTE(v68);
          }
          else {
            size_t v32 = *((void *)&v67 + 1);
          }
          if (SHIBYTE(v68) >= 0) {
            long long v33 = &v67;
          }
          else {
            long long v33 = (long long *)v67;
          }
          if (v31 >= 0) {
            size_t v34 = *(unsigned __int8 *)(a1 + v16 - 97);
          }
          else {
            size_t v34 = *(void *)(a1 + v16 - 112);
          }
          if (v31 >= 0) {
            uint64_t v35 = (const void *)(a1 + v16 - 120);
          }
          else {
            uint64_t v35 = v30;
          }
          if (v34 >= v32) {
            size_t v36 = v32;
          }
          else {
            size_t v36 = v34;
          }
          int v37 = memcmp(v33, v35, v36);
          BOOL v38 = v32 < v34;
          if (v37) {
            BOOL v38 = v37 < 0;
          }
          if (!v38)
          {
            int v39 = memcmp(v35, v33, v36);
            BOOL v40 = v34 < v32;
            if (v39) {
              BOOL v40 = v39 < 0;
            }
            if (v40) {
              goto LABEL_62;
            }
            int v41 = *(char *)(a1 + v16 - 121);
            if (SHIBYTE(v66) >= 0) {
              long long v42 = (void *)HIBYTE(v66);
            }
            else {
              long long v42 = v65[1];
            }
            if (SHIBYTE(v66) >= 0) {
              uint64_t v43 = v65;
            }
            else {
              uint64_t v43 = (void **)v65[0];
            }
            if (v41 >= 0) {
              size_t v44 = *(unsigned __int8 *)(a1 + v16 - 121);
            }
            else {
              size_t v44 = *(void *)(a1 + v16 - 136);
            }
            if (v41 >= 0) {
              long long v45 = (const void *)(a1 + v16 - 144);
            }
            else {
              long long v45 = *(const void **)(a1 + v16 - 144);
            }
            if (v44 >= (unint64_t)v42) {
              size_t v46 = (size_t)v42;
            }
            else {
              size_t v46 = v44;
            }
            int v47 = memcmp(v43, v45, v46);
            BOOL v48 = (unint64_t)v42 < v44;
            if (v47) {
              BOOL v48 = v47 < 0;
            }
            if (!v48)
            {
              int v49 = memcmp(v45, v43, v46);
              BOOL v50 = v44 < (unint64_t)v42;
              if (v49) {
                BOOL v50 = v49 < 0;
              }
              if (v50 || !sub_341D08((uint64_t)v85, (uint64_t)&v79, (uint64_t)v78))
              {
LABEL_62:
                uint64_t v51 = a1 + v16;
                if ((*(char *)(a1 + v16 + 23) & 0x80000000) == 0) {
                  goto LABEL_66;
                }
                goto LABEL_65;
              }
            }
          }
          v16 -= 144;
        }
        uint64_t v51 = a1;
        if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
          goto LABEL_66;
        }
LABEL_65:
        operator delete(*(void **)v51);
LABEL_66:
        uint64_t v52 = (void *)(a1 + v16);
        uint64_t v53 = a1 + v16 + 24;
        *(_OWORD *)uint64_t v51 = *(_OWORD *)v65;
        *(void *)(v51 + 16) = v66;
        HIBYTE(v66) = 0;
        LOBYTE(v65[0]) = 0;
        if (*(char *)(v51 + 47) < 0) {
          operator delete(*(void **)v53);
        }
        unint64_t v54 = (void **)(v52 + 7);
        *(_OWORD *)uint64_t v53 = v67;
        *(void *)(v53 + 16) = v68;
        HIBYTE(v68) = 0;
        LOBYTE(v67) = 0;
        *(void *)(v51 + 48) = v69;
        if (*(char *)(v51 + 79) < 0) {
          operator delete(*v54);
        }
        uint64_t v55 = (void **)(v52 + 10);
        v52[9] = v71;
        *(_OWORD *)unint64_t v54 = v70;
        HIBYTE(v71) = 0;
        LOBYTE(v70) = 0;
        if (*(char *)(v51 + 103) < 0) {
          operator delete(*v55);
        }
        *(_OWORD *)uint64_t v55 = __p;
        v52[12] = v73;
        HIBYTE(v73) = 0;
        LOBYTE(__p) = 0;
        *(_DWORD *)(v51 + 104) = v74;
        int v58 = (void *)v52[14];
        unsigned int v57 = v52 + 14;
        uint64_t v56 = v58;
        if (v58)
        {
          *(void *)(v51 + 120) = v56;
          operator delete(v56);
          *unsigned int v57 = 0;
          v57[1] = 0;
          v57[2] = 0;
          char v59 = HIBYTE(v73);
        }
        else
        {
          char v59 = 0;
        }
        uint64_t v60 = *((void *)&v75 + 1);
        *unsigned int v57 = v75;
        uint64_t v61 = v76;
        uint64_t v62 = v77;
        *(void *)(v51 + 120) = v60;
        *(void *)(v51 + 128) = v61;
        uint64_t v76 = 0;
        long long v75 = 0uLL;
        *(void *)(v51 + 136) = v62;
        if (v59 < 0)
        {
          operator delete((void *)__p);
          if ((SHIBYTE(v71) & 0x80000000) == 0)
          {
LABEL_77:
            if ((SHIBYTE(v68) & 0x80000000) == 0) {
              goto LABEL_78;
            }
            goto LABEL_82;
          }
        }
        else if ((SHIBYTE(v71) & 0x80000000) == 0)
        {
          goto LABEL_77;
        }
        operator delete((void *)v70);
        if ((SHIBYTE(v68) & 0x80000000) == 0)
        {
LABEL_78:
          if (SHIBYTE(v66) < 0) {
            goto LABEL_83;
          }
          goto LABEL_4;
        }
LABEL_82:
        operator delete((void *)v67);
        if (SHIBYTE(v66) < 0) {
LABEL_83:
        }
          operator delete(v65[0]);
LABEL_4:
        uint64_t v3 = v5 + 18;
        v64 += 144;
        uint64_t v4 = v5;
      }
      while (v5 + 18 != a2);
    }
  }
}

void sub_33FCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_3208E4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_33FCF0(void *a1, void *a2)
{
  if (a1 != a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = a1;
    uint64_t v4 = a1 + 18;
    if (a1 + 18 != a2)
    {
      do
      {
        char v5 = v4;
        char v6 = (long long *)(v3 + 21);
        uint64_t v7 = (long long *)(v3 + 25);
        v54[0] = v3 + 21;
        v54[1] = v4;
        uint64_t v8 = (long long *)(v3 + 28);
        uint64_t v55 = v3 + 25;
        *(void *)&long long v56 = v3 + 24;
        *((void *)&v56 + 1) = v3 + 28;
        unsigned int v57 = v3 + 31;
        long long v68 = (long long *)(v3 + 3);
        uint64_t v69 = (void **)v3;
        long long v70 = (long long *)(v3 + 7);
        uint64_t v71 = v3 + 6;
        p_p = (long long *)(v3 + 10);
        uint64_t v73 = (int *)(v3 + 13);
        if (!sub_341B84((uint64_t)v67, (uint64_t)v54, (uint64_t)&v68)) {
          goto LABEL_4;
        }
        long long v9 = *(_OWORD *)v5;
        uint64_t v10 = (void *)v5[2];
        v5[1] = 0;
        v5[2] = 0;
        *char v5 = 0;
        unsigned int v57 = (void *)v3[23];
        *(_OWORD *)unint64_t v54 = v9;
        long long v56 = *v6;
        *(void *)char v6 = 0;
        v3[22] = 0;
        v3[23] = 0;
        uint64_t v11 = v3[24];
        uint64_t v55 = v10;
        uint64_t v58 = v11;
        long long v12 = *v7;
        uint64_t v60 = v3[27];
        long long v59 = v12;
        v3[26] = 0;
        v3[27] = 0;
        *(void *)uint64_t v7 = 0;
        long long v13 = *v8;
        uint64_t v62 = v3[30];
        long long __p = v13;
        *(void *)uint64_t v8 = 0;
        v3[29] = 0;
        v3[30] = 0;
        int v63 = *((_DWORD *)v3 + 62);
        long long v64 = *((_OWORD *)v3 + 16);
        v3[32] = 0;
        v3[33] = 0;
        uint64_t v14 = v3[34];
        uint64_t v15 = v3[35];
        v3[34] = 0;
        uint64_t v65 = v14;
        uint64_t v66 = v15;
        while (1)
        {
          uint64_t v16 = v3;
          uint64_t v17 = (void **)(v3 + 18);
          if (*((char *)v3 + 167) < 0) {
            operator delete(*v17);
          }
          *(_OWORD *)uint64_t v17 = *(_OWORD *)v3;
          v3[20] = v3[2];
          *((unsigned char *)v3 + 23) = 0;
          *(unsigned char *)uint64_t v3 = 0;
          uint64_t v18 = (void **)(v3 + 21);
          if (*((char *)v3 + 191) < 0) {
            operator delete(*v18);
          }
          *(_OWORD *)uint64_t v18 = *(_OWORD *)(v3 + 3);
          v3[23] = v3[5];
          *((unsigned char *)v3 + 47) = 0;
          *((unsigned char *)v3 + 24) = 0;
          v3[24] = v3[6];
          uint64_t v19 = (void **)(v3 + 25);
          if (*((char *)v3 + 223) < 0) {
            operator delete(*v19);
          }
          *(_OWORD *)uint64_t v19 = *(_OWORD *)(v3 + 7);
          v3[27] = v3[9];
          *((unsigned char *)v3 + 79) = 0;
          *((unsigned char *)v3 + 56) = 0;
          uint64_t v20 = (void **)(v3 + 28);
          if (*((char *)v3 + 247) < 0) {
            operator delete(*v20);
          }
          *(_OWORD *)uint64_t v20 = *((_OWORD *)v3 + 5);
          v3[30] = v3[12];
          *((unsigned char *)v3 + 103) = 0;
          *((unsigned char *)v3 + 80) = 0;
          *((_DWORD *)v3 + 62) = *((_DWORD *)v3 + 26);
          uint64_t v21 = (void *)v3[32];
          if (v21)
          {
            v3[33] = v21;
            operator delete(v21);
            v3[32] = 0;
            v3[33] = 0;
            v3[34] = 0;
          }
          *((_OWORD *)v3 + 16) = *((_OWORD *)v3 + 7);
          uint64_t v22 = v3[16];
          uint64_t v23 = v3[17];
          v3[15] = 0;
          v3[16] = 0;
          v3[14] = 0;
          v3[34] = v22;
          v3[35] = v23;
          v3 -= 18;
          long long v68 = &v56;
          uint64_t v69 = v54;
          long long v70 = &v59;
          uint64_t v71 = &v58;
          p_p = &__p;
          uint64_t v73 = &v63;
          v67[0] = v16 - 15;
          v67[1] = v16 - 18;
          v67[2] = v16 - 11;
          v67[3] = v16 - 12;
          v67[4] = v16 - 8;
          v67[5] = v16 - 5;
          int v24 = *((char *)v16 - 97);
          if (SHIBYTE(v57) >= 0) {
            size_t v25 = HIBYTE(v57);
          }
          else {
            size_t v25 = *((void *)&v56 + 1);
          }
          if (SHIBYTE(v57) >= 0) {
            uint64_t v26 = &v56;
          }
          else {
            uint64_t v26 = (long long *)v56;
          }
          if (v24 >= 0) {
            size_t v27 = *((unsigned __int8 *)v16 - 97);
          }
          else {
            size_t v27 = *(v16 - 14);
          }
          if (v24 >= 0) {
            uint64_t v28 = v16 - 15;
          }
          else {
            uint64_t v28 = (void *)*(v16 - 15);
          }
          if (v27 >= v25) {
            size_t v29 = v25;
          }
          else {
            size_t v29 = v27;
          }
          int v30 = memcmp(v26, v28, v29);
          BOOL v31 = v25 < v27;
          if (v30) {
            BOOL v31 = v30 < 0;
          }
          if (!v31)
          {
            int v32 = memcmp(v28, v26, v29);
            BOOL v33 = v27 < v25;
            if (v32) {
              BOOL v33 = v32 < 0;
            }
            if (v33) {
              break;
            }
            int v34 = *((char *)v16 - 121);
            if (SHIBYTE(v55) >= 0) {
              uint64_t v35 = (void *)HIBYTE(v55);
            }
            else {
              uint64_t v35 = v54[1];
            }
            if (SHIBYTE(v55) >= 0) {
              size_t v36 = v54;
            }
            else {
              size_t v36 = (void **)v54[0];
            }
            if (v34 >= 0) {
              size_t v37 = *((unsigned __int8 *)v16 - 121);
            }
            else {
              size_t v37 = *(v16 - 17);
            }
            if (v34 >= 0) {
              BOOL v38 = v16 - 18;
            }
            else {
              BOOL v38 = (void *)*(v16 - 18);
            }
            if (v37 >= (unint64_t)v35) {
              size_t v39 = (size_t)v35;
            }
            else {
              size_t v39 = v37;
            }
            int v40 = memcmp(v36, v38, v39);
            BOOL v41 = (unint64_t)v35 < v37;
            if (v40) {
              BOOL v41 = v40 < 0;
            }
            if (!v41)
            {
              int v42 = memcmp(v38, v36, v39);
              BOOL v43 = v37 < (unint64_t)v35;
              if (v42) {
                BOOL v43 = v42 < 0;
              }
              if (v43 || !sub_341D08((uint64_t)v74, (uint64_t)&v68, (uint64_t)v67)) {
                break;
              }
            }
          }
        }
        if (*((char *)v16 + 23) < 0) {
          operator delete((void *)*v16);
        }
        size_t v44 = (void **)(v16 + 3);
        long long v45 = *(_OWORD *)v54;
        v16[2] = v55;
        *(_OWORD *)uint64_t v16 = v45;
        HIBYTE(v55) = 0;
        LOBYTE(v54[0]) = 0;
        if (*((char *)v16 + 47) < 0) {
          operator delete(*v44);
        }
        size_t v46 = (void **)(v16 + 7);
        long long v47 = v56;
        v16[5] = v57;
        *(_OWORD *)size_t v44 = v47;
        HIBYTE(v57) = 0;
        LOBYTE(v56) = 0;
        v16[6] = v58;
        if (*((char *)v16 + 79) < 0) {
          operator delete(*v46);
        }
        BOOL v48 = (void **)(v16 + 10);
        long long v49 = v59;
        v16[9] = v60;
        *(_OWORD *)size_t v46 = v49;
        HIBYTE(v60) = 0;
        LOBYTE(v59) = 0;
        if (*((char *)v16 + 103) < 0) {
          operator delete(*v48);
        }
        long long v50 = __p;
        v16[12] = v62;
        *(_OWORD *)BOOL v48 = v50;
        HIBYTE(v62) = 0;
        LOBYTE(__p) = 0;
        *((_DWORD *)v16 + 26) = v63;
        uint64_t v51 = (void *)v16[14];
        if (v51)
        {
          v16[15] = v51;
          operator delete(v51);
          v16[14] = 0;
          v16[15] = 0;
          v16[16] = 0;
          char v52 = HIBYTE(v62);
        }
        else
        {
          char v52 = 0;
        }
        *((_OWORD *)v16 + 7) = v64;
        v16[16] = v65;
        uint64_t v2 = a2;
        long long v64 = 0uLL;
        uint64_t v65 = 0;
        v16[17] = v66;
        if (v52 < 0)
        {
          operator delete((void *)__p);
          if ((SHIBYTE(v60) & 0x80000000) == 0)
          {
LABEL_73:
            if ((SHIBYTE(v57) & 0x80000000) == 0) {
              goto LABEL_74;
            }
            goto LABEL_78;
          }
        }
        else if ((SHIBYTE(v60) & 0x80000000) == 0)
        {
          goto LABEL_73;
        }
        operator delete((void *)v59);
        if ((SHIBYTE(v57) & 0x80000000) == 0)
        {
LABEL_74:
          if (SHIBYTE(v55) < 0) {
            goto LABEL_79;
          }
          goto LABEL_4;
        }
LABEL_78:
        operator delete((void *)v56);
        if (SHIBYTE(v55) < 0) {
LABEL_79:
        }
          operator delete(v54[0]);
LABEL_4:
        uint64_t v4 = v5 + 18;
        uint64_t v3 = v5;
      }
      while (v5 + 18 != v2);
    }
  }
}

void sub_340240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_3208E4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_340254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = a2 + 24;
  uint64_t v25 = a2 + 24;
  uint64_t v26 = a2;
  uint64_t v14 = a2 + 56;
  uint64_t v15 = a2 + 48;
  uint64_t v27 = a2 + 56;
  uint64_t v28 = a2 + 48;
  uint64_t v16 = a2 + 80;
  uint64_t v17 = a2 + 104;
  uint64_t v29 = a2 + 80;
  uint64_t v30 = a2 + 104;
  uint64_t v6 = a1 + 24;
  uint64_t v7 = a1 + 56;
  uint64_t v8 = a1 + 48;
  uint64_t v9 = a1 + 80;
  uint64_t v10 = a1 + 104;
  uint64_t v19 = a1 + 24;
  uint64_t v20 = a1;
  uint64_t v21 = a1 + 56;
  uint64_t v22 = a1 + 48;
  uint64_t v23 = a1 + 80;
  uint64_t v24 = a1 + 104;
  if (!sub_341B84((uint64_t)v31, (uint64_t)&v25, (uint64_t)&v19))
  {
    uint64_t v25 = a3 + 24;
    uint64_t v26 = a3;
    uint64_t v27 = a3 + 56;
    uint64_t v28 = a3 + 48;
    uint64_t v29 = a3 + 80;
    uint64_t v30 = a3 + 104;
    uint64_t v19 = v18;
    uint64_t v20 = a2;
    uint64_t v21 = v14;
    uint64_t v22 = v15;
    uint64_t v23 = v16;
    uint64_t v24 = v17;
    uint64_t result = sub_341B84((uint64_t)v31, (uint64_t)&v25, (uint64_t)&v19);
    if (!result) {
      return result;
    }
    sub_341ED4(a2, a3);
    uint64_t v25 = v18;
    uint64_t v26 = a2;
    uint64_t v27 = v14;
    uint64_t v28 = v15;
    uint64_t v29 = v16;
    uint64_t v30 = v17;
    uint64_t v19 = v6;
    uint64_t v20 = a1;
    uint64_t v21 = v7;
    uint64_t v22 = v8;
    uint64_t v23 = v9;
    uint64_t v24 = v10;
    if (!sub_341B84((uint64_t)v31, (uint64_t)&v25, (uint64_t)&v19)) {
      return 1;
    }
    uint64_t v12 = a1;
    uint64_t v13 = a2;
    goto LABEL_9;
  }
  uint64_t v25 = a3 + 24;
  uint64_t v26 = a3;
  uint64_t v27 = a3 + 56;
  uint64_t v28 = a3 + 48;
  uint64_t v29 = a3 + 80;
  uint64_t v30 = a3 + 104;
  uint64_t v19 = v18;
  uint64_t v20 = a2;
  uint64_t v21 = v14;
  uint64_t v22 = v15;
  uint64_t v23 = v16;
  uint64_t v24 = v17;
  if (!sub_341B84((uint64_t)v31, (uint64_t)&v25, (uint64_t)&v19))
  {
    sub_341ED4(a1, a2);
    uint64_t v25 = a3 + 24;
    uint64_t v26 = a3;
    uint64_t v27 = a3 + 56;
    uint64_t v28 = a3 + 48;
    uint64_t v29 = a3 + 80;
    uint64_t v30 = a3 + 104;
    uint64_t v19 = v18;
    uint64_t v20 = a2;
    uint64_t v21 = v14;
    uint64_t v22 = v15;
    uint64_t v23 = v16;
    uint64_t v24 = v17;
    if (!sub_341B84((uint64_t)v31, (uint64_t)&v25, (uint64_t)&v19)) {
      return 1;
    }
    uint64_t v12 = a2;
    uint64_t v13 = a3;
LABEL_9:
    sub_341ED4(v12, v13);
    return 2;
  }
  sub_341ED4(a1, a3);
  return 1;
}

unsigned int *sub_340460(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = a1;
  *(_OWORD *)v111 = *(_OWORD *)a1;
  uint64_t v112 = *(void *)(a1 + 16);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  long long v4 = *(_OWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)v113 = v4;
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v114 = v5;
  uint64_t v115 = v6;
  uint64_t v117 = *(void *)(a1 + 72);
  *(_OWORD *)v116 = *(_OWORD *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  long long v7 = *(_OWORD *)(a1 + 80);
  uint64_t v119 = *(void *)(a1 + 96);
  *(_OWORD *)v118 = v7;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  unsigned int v120 = *(_DWORD *)(a1 + 104);
  *(_OWORD *)long long __p = *(_OWORD *)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  uint64_t v8 = *(void *)(a1 + 128);
  uint64_t v9 = *(void *)(a1 + 136);
  *(void *)(a1 + 128) = 0;
  uint64_t v122 = v8;
  uint64_t v123 = v9;
  v130 = v113;
  v131 = v111;
  v132 = v116;
  v133 = &v115;
  v134 = v118;
  v135 = &v120;
  unint64_t v10 = a2 - 64;
  uint64_t v124 = a2 - 120;
  uint64_t v125 = a2 - 144;
  uint64_t v126 = a2 - 88;
  uint64_t v127 = a2 - 96;
  uint64_t v128 = a2 - 64;
  uint64_t v129 = a2 - 40;
  if (sub_341B84((uint64_t)v136, (uint64_t)&v130, (uint64_t)&v124))
  {
    uint64_t v11 = v3 + 248;
    do
    {
      v130 = v113;
      v131 = v111;
      v132 = v116;
      v133 = &v115;
      v134 = v118;
      v135 = &v120;
      uint64_t v124 = v11 - 80;
      uint64_t v125 = v11 - 104;
      uint64_t v126 = v11 - 48;
      uint64_t v127 = v11 - 56;
      uint64_t v128 = v11 - 24;
      uint64_t v129 = v11;
      v11 += 144;
    }
    while (!sub_341B84((uint64_t)v136, (uint64_t)&v130, (uint64_t)&v124));
    unint64_t v12 = v11 - 248;
    if (v12 >= v2) {
      goto LABEL_5;
    }
    do
    {
LABEL_167:
      v130 = v113;
      v131 = v111;
      v132 = v116;
      v133 = &v115;
      v134 = v118;
      v135 = &v120;
      uint64_t v124 = v10 - 56;
      uint64_t v125 = v10 - 80;
      uint64_t v126 = v10 - 24;
      uint64_t v127 = v10 - 32;
      uint64_t v128 = v10;
      uint64_t v129 = v10 + 24;
      v10 -= 144;
    }
    while (sub_341B84((uint64_t)v136, (uint64_t)&v130, (uint64_t)&v124));
    unint64_t v2 = v10 + 64;
    if (v12 < v10 + 64) {
      goto LABEL_6;
    }
    goto LABEL_169;
  }
  unint64_t v89 = v2;
  uint64_t v90 = v3 + 248;
  do
  {
    unint64_t v91 = v90 - 104;
    if (v90 - 104 >= v89) {
      break;
    }
    v130 = v113;
    v131 = v111;
    v132 = v116;
    v133 = &v115;
    v134 = v118;
    v135 = &v120;
    uint64_t v124 = v90 - 80;
    uint64_t v125 = v90 - 104;
    uint64_t v126 = v90 - 48;
    uint64_t v127 = v90 - 56;
    uint64_t v128 = v90 - 24;
    uint64_t v129 = v90;
    v90 += 144;
  }
  while (!sub_341B84((uint64_t)v136, (uint64_t)&v130, (uint64_t)&v124));
  unint64_t v12 = v91;
  unint64_t v2 = v89;
  if (v12 < v89) {
    goto LABEL_167;
  }
LABEL_5:
  if (v12 < v2)
  {
LABEL_6:
    v104 = (unsigned int *)v3;
    do
    {
      unint64_t v105 = v2;
      sub_341ED4(v12, v2);
      if (v114 >= 0) {
        uint64_t v13 = (void *)HIBYTE(v114);
      }
      else {
        uint64_t v13 = v113[1];
      }
      if (v114 >= 0) {
        uint64_t v14 = v113;
      }
      else {
        uint64_t v14 = (void **)v113[0];
      }
      if (v112 >= 0) {
        uint64_t v15 = (void *)HIBYTE(v112);
      }
      else {
        uint64_t v15 = v111[1];
      }
      if (v112 >= 0) {
        uint64_t v16 = v111;
      }
      else {
        uint64_t v16 = (void **)v111[0];
      }
      if (v117 >= 0) {
        uint64_t v17 = (void *)HIBYTE(v117);
      }
      else {
        uint64_t v17 = v116[1];
      }
      if (v117 >= 0) {
        uint64_t v18 = v116;
      }
      else {
        uint64_t v18 = (void **)v116[0];
      }
      __s1 = v18;
      int v109 = v115;
      if (v119 >= 0) {
        uint64_t v19 = (void *)HIBYTE(v119);
      }
      else {
        uint64_t v19 = v118[1];
      }
      if (v119 >= 0) {
        uint64_t v20 = v118;
      }
      else {
        uint64_t v20 = (void **)v118[0];
      }
      __s2 = v20;
      size_t v108 = (size_t)v19;
      unsigned int v106 = v120;
      for (i = (unsigned int *)(v12 + 248); ; i += 36)
      {
        int v22 = *((char *)i - 57);
        if (v22 >= 0) {
          size_t v23 = *((unsigned __int8 *)i - 57);
        }
        else {
          size_t v23 = *((void *)i - 9);
        }
        if (v22 >= 0) {
          uint64_t v24 = i - 20;
        }
        else {
          uint64_t v24 = (unsigned int *)*((void *)i - 10);
        }
        if (v23 >= (unint64_t)v13) {
          size_t v25 = (size_t)v13;
        }
        else {
          size_t v25 = v23;
        }
        int v26 = memcmp(v14, v24, v25);
        BOOL v27 = (unint64_t)v13 < v23;
        if (v26) {
          BOOL v27 = v26 < 0;
        }
        if (v27) {
          break;
        }
        int v28 = memcmp(v24, v14, v25);
        BOOL v29 = v23 < (unint64_t)v13;
        if (v28) {
          BOOL v29 = v28 < 0;
        }
        if (!v29)
        {
          int v30 = *((char *)i - 81);
          if (v30 >= 0) {
            size_t v31 = *((unsigned __int8 *)i - 81);
          }
          else {
            size_t v31 = *((void *)i - 12);
          }
          if (v30 >= 0) {
            int v32 = i - 26;
          }
          else {
            int v32 = (unsigned int *)*((void *)i - 13);
          }
          if (v31 >= (unint64_t)v15) {
            size_t v33 = (size_t)v15;
          }
          else {
            size_t v33 = v31;
          }
          int v34 = memcmp(v16, v32, v33);
          BOOL v35 = (unint64_t)v15 < v31;
          if (v34) {
            BOOL v35 = v34 < 0;
          }
          if (v35) {
            break;
          }
          int v36 = memcmp(v32, v16, v33);
          BOOL v37 = v31 < (unint64_t)v15;
          if (v36) {
            BOOL v37 = v36 < 0;
          }
          if (!v37)
          {
            int v38 = *((char *)i - 25);
            if (v38 >= 0) {
              size_t v39 = *((unsigned __int8 *)i - 25);
            }
            else {
              size_t v39 = *((void *)i - 5);
            }
            if (v38 >= 0) {
              int v40 = i - 12;
            }
            else {
              int v40 = (unsigned int *)*((void *)i - 6);
            }
            if (v39 >= (unint64_t)v17) {
              size_t v41 = (size_t)v17;
            }
            else {
              size_t v41 = v39;
            }
            int v42 = memcmp(__s1, v40, v41);
            BOOL v43 = (unint64_t)v17 < v39;
            if (v42) {
              BOOL v43 = v42 < 0;
            }
            if (v43) {
              break;
            }
            int v44 = memcmp(v40, __s1, v41);
            BOOL v45 = v39 < (unint64_t)v17;
            if (v44) {
              BOOL v45 = v44 < 0;
            }
            if (!v45)
            {
              int v46 = *(i - 14);
              if (v109 < v46) {
                break;
              }
              if (v46 >= v109)
              {
                int v47 = *((char *)i - 1);
                if (v47 >= 0) {
                  size_t v48 = *((unsigned __int8 *)i - 1);
                }
                else {
                  size_t v48 = *((void *)i - 2);
                }
                if (v47 >= 0) {
                  long long v49 = i - 6;
                }
                else {
                  long long v49 = (unsigned int *)*((void *)i - 3);
                }
                if (v48 >= v108) {
                  size_t v50 = v108;
                }
                else {
                  size_t v50 = v48;
                }
                int v51 = memcmp(__s2, v49, v50);
                BOOL v52 = v108 < v48;
                if (v51) {
                  BOOL v52 = v51 < 0;
                }
                if (v52) {
                  break;
                }
                int v53 = memcmp(v49, __s2, v50);
                BOOL v54 = v48 < v108;
                if (v53) {
                  BOOL v54 = v53 < 0;
                }
                if (!v54 && v106 < *i) {
                  break;
                }
              }
            }
          }
        }
      }
      for (unint64_t j = (char *)(v105 - 65); ; j -= 144)
      {
        int v56 = *(j - 32);
        if (v56 >= 0) {
          size_t v57 = *(j - 32);
        }
        else {
          size_t v57 = *(void *)(j - 47);
        }
        if (v56 >= 0) {
          uint64_t v58 = j - 55;
        }
        else {
          uint64_t v58 = *(char **)(j - 55);
        }
        if (v57 >= (unint64_t)v13) {
          size_t v59 = (size_t)v13;
        }
        else {
          size_t v59 = v57;
        }
        int v60 = memcmp(v14, v58, v59);
        BOOL v61 = (unint64_t)v13 < v57;
        if (v60) {
          BOOL v61 = v60 < 0;
        }
        if (!v61)
        {
          int v62 = memcmp(v58, v14, v59);
          BOOL v63 = v57 < (unint64_t)v13;
          if (v62) {
            BOOL v63 = v62 < 0;
          }
          if (v63) {
            break;
          }
          int v64 = *(j - 56);
          if (v64 >= 0) {
            size_t v65 = *(j - 56);
          }
          else {
            size_t v65 = *(void *)(j - 71);
          }
          if (v64 >= 0) {
            uint64_t v66 = j - 79;
          }
          else {
            uint64_t v66 = *(char **)(j - 79);
          }
          if (v65 >= (unint64_t)v15) {
            size_t v67 = (size_t)v15;
          }
          else {
            size_t v67 = v65;
          }
          int v68 = memcmp(v16, v66, v67);
          BOOL v69 = (unint64_t)v15 < v65;
          if (v68) {
            BOOL v69 = v68 < 0;
          }
          if (!v69)
          {
            int v70 = memcmp(v66, v16, v67);
            BOOL v71 = v65 < (unint64_t)v15;
            if (v70) {
              BOOL v71 = v70 < 0;
            }
            if (v71) {
              break;
            }
            int v72 = *j;
            if (v72 >= 0) {
              size_t v73 = *j;
            }
            else {
              size_t v73 = *(void *)(j - 15);
            }
            if (v72 >= 0) {
              int v74 = j - 23;
            }
            else {
              int v74 = *(char **)(j - 23);
            }
            if (v73 >= (unint64_t)v17) {
              size_t v75 = (size_t)v17;
            }
            else {
              size_t v75 = v73;
            }
            int v76 = memcmp(__s1, v74, v75);
            BOOL v77 = (unint64_t)v17 < v73;
            if (v76) {
              BOOL v77 = v76 < 0;
            }
            if (!v77)
            {
              int v78 = memcmp(v74, __s1, v75);
              BOOL v79 = v73 < (unint64_t)v17;
              if (v78) {
                BOOL v79 = v78 < 0;
              }
              if (v79) {
                break;
              }
              int v80 = *(_DWORD *)(j - 31);
              if (v109 >= v80)
              {
                if (v80 < v109) {
                  break;
                }
                int v81 = j[24];
                if (v81 >= 0) {
                  size_t v82 = j[24];
                }
                else {
                  size_t v82 = *(void *)(j + 9);
                }
                if (v81 >= 0) {
                  uint64_t v83 = j + 1;
                }
                else {
                  uint64_t v83 = *(const void **)(j + 1);
                }
                if (v82 >= v108) {
                  size_t v84 = v108;
                }
                else {
                  size_t v84 = v82;
                }
                int v85 = memcmp(__s2, v83, v84);
                BOOL v86 = v108 < v82;
                if (v85) {
                  BOOL v86 = v85 < 0;
                }
                if (!v86)
                {
                  int v87 = memcmp(v83, __s2, v84);
                  BOOL v88 = v82 < v108;
                  if (v87) {
                    BOOL v88 = v87 < 0;
                  }
                  if (v88 || v106 >= *(_DWORD *)(j + 25)) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
      unint64_t v2 = (unint64_t)(j - 79);
      unint64_t v12 = (unint64_t)(i - 26);
    }
    while (i - 26 < (unsigned int *)(j - 79));
    uint64_t v3 = (uint64_t)v104;
    long long v92 = i - 26;
    int v93 = (long long *)(i - 62);
    if (i - 62 != v104) {
      goto LABEL_172;
    }
    goto LABEL_173;
  }
LABEL_169:
  long long v92 = (unsigned int *)v12;
  int v93 = (long long *)(v12 - 144);
  if (v93 != (long long *)v3) {
LABEL_172:
  }
    sub_342098(v3, v93);
LABEL_173:
  if (*((char *)v92 - 121) < 0) {
    operator delete(*(void **)v93);
  }
  long long v94 = *(_OWORD *)v111;
  *((void *)v93 + 2) = v112;
  *int v93 = v94;
  HIBYTE(v112) = 0;
  LOBYTE(v111[0]) = 0;
  uint64_t v95 = (void **)(v92 - 30);
  uint64_t v96 = v92;
  if (*((char *)v92 - 97) < 0) {
    operator delete(*v95);
  }
  long long v97 = *(_OWORD *)v113;
  *((void *)v92 - 13) = v114;
  *(_OWORD *)uint64_t v95 = v97;
  HIBYTE(v114) = 0;
  LOBYTE(v113[0]) = 0;
  *((void *)v92 - 12) = v115;
  long long v98 = (void **)(v92 - 22);
  if (*((char *)v92 - 65) < 0) {
    operator delete(*v98);
  }
  long long v99 = *(_OWORD *)v116;
  *((void *)v92 - 9) = v117;
  *(_OWORD *)long long v98 = v99;
  HIBYTE(v117) = 0;
  LOBYTE(v116[0]) = 0;
  long long v100 = (void **)(v92 - 16);
  if (*((char *)v96 - 41) < 0) {
    operator delete(*v100);
  }
  long long v101 = *(_OWORD *)v118;
  *((void *)v96 - 6) = v119;
  *(_OWORD *)long long v100 = v101;
  HIBYTE(v119) = 0;
  LOBYTE(v118[0]) = 0;
  v102 = (void *)*((void *)v96 - 4);
  *(v96 - 10) = v120;
  if (v102)
  {
    *((void *)v96 - 3) = v102;
    operator delete(v102);
    *((void *)v96 - 4) = 0;
    *((void *)v96 - 3) = 0;
    *((void *)v96 - 2) = 0;
  }
  *((_OWORD *)v96 - 2) = *(_OWORD *)__p;
  *((void *)v96 - 2) = v122;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v122 = 0;
  *((void *)v96 - 1) = v123;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v119) < 0)
  {
    operator delete(v118[0]);
    if ((SHIBYTE(v117) & 0x80000000) == 0)
    {
LABEL_187:
      if ((SHIBYTE(v114) & 0x80000000) == 0) {
        goto LABEL_188;
      }
LABEL_192:
      operator delete(v113[0]);
      if ((SHIBYTE(v112) & 0x80000000) == 0) {
        return v96;
      }
LABEL_193:
      operator delete(v111[0]);
      return v96;
    }
  }
  else if ((SHIBYTE(v117) & 0x80000000) == 0)
  {
    goto LABEL_187;
  }
  operator delete(v116[0]);
  if (SHIBYTE(v114) < 0) {
    goto LABEL_192;
  }
LABEL_188:
  if (SHIBYTE(v112) < 0) {
    goto LABEL_193;
  }
  return v96;
}

void sub_340D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_3208E4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_340D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_3208E4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_340D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_3208E4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_340D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_3208E4((uint64_t)va);
  _Unwind_Resume(a1);
}

long long *sub_340D98(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = 0;
  *(_OWORD *)size_t v108 = *(_OWORD *)a1;
  uint64_t v109 = *(void *)(a1 + 16);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  long long v5 = *(_OWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)v110 = v5;
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v111 = v6;
  uint64_t v112 = v7;
  uint64_t v114 = *(void *)(a1 + 72);
  *(_OWORD *)v113 = *(_OWORD *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  long long v8 = *(_OWORD *)(a1 + 80);
  uint64_t v116 = *(void *)(a1 + 96);
  *(_OWORD *)uint64_t v115 = v8;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  unsigned int v117 = *(_DWORD *)(a1 + 104);
  uint64_t v9 = *(void *)(a1 + 136);
  uint64_t v119 = *(void *)(a1 + 128);
  uint64_t v120 = v9;
  *(_OWORD *)long long __p = *(_OWORD *)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  do
  {
    uint64_t v127 = v3 + v4 + 168;
    uint64_t v128 = v3 + v4 + 144;
    uint64_t v129 = v3 + v4 + 200;
    uint64_t v130 = v3 + v4 + 192;
    uint64_t v131 = v3 + v4 + 224;
    uint64_t v132 = v3 + v4 + 248;
    v121 = v110;
    uint64_t v122 = v108;
    uint64_t v123 = v113;
    uint64_t v124 = &v112;
    uint64_t v125 = v115;
    uint64_t v126 = &v117;
    v4 += 144;
  }
  while (sub_341B84((uint64_t)v133, (uint64_t)&v127, (uint64_t)&v121));
  unint64_t v10 = v3 + v4;
  if (v4 == 144)
  {
    while (v10 < a2)
    {
      unint64_t v12 = a2 - 144;
      uint64_t v127 = a2 - 120;
      uint64_t v128 = a2 - 144;
      uint64_t v129 = a2 - 88;
      uint64_t v130 = a2 - 96;
      uint64_t v131 = a2 - 64;
      uint64_t v132 = a2 - 40;
      v121 = v110;
      uint64_t v122 = v108;
      uint64_t v123 = v113;
      uint64_t v124 = &v112;
      uint64_t v125 = v115;
      uint64_t v126 = &v117;
      a2 -= 144;
      if (sub_341B84((uint64_t)v133, (uint64_t)&v127, (uint64_t)&v121))
      {
        if (v10 >= v12) {
          break;
        }
        goto LABEL_11;
      }
    }
LABEL_170:
    uint64_t v13 = v3 + v4;
    unint64_t v91 = (long long *)(v10 - 144);
    if (v10 - 144 == v3) {
      goto LABEL_172;
    }
    goto LABEL_171;
  }
  uint64_t v11 = a2 - 64;
  do
  {
    uint64_t v127 = v11 - 56;
    uint64_t v128 = v11 - 80;
    uint64_t v129 = v11 - 24;
    uint64_t v130 = v11 - 32;
    uint64_t v131 = v11;
    uint64_t v132 = v11 + 24;
    v121 = v110;
    uint64_t v122 = v108;
    uint64_t v123 = v113;
    uint64_t v124 = &v112;
    uint64_t v125 = v115;
    uint64_t v126 = &v117;
    v11 -= 144;
  }
  while (!sub_341B84((uint64_t)v133, (uint64_t)&v127, (uint64_t)&v121));
  unint64_t v12 = v11 + 64;
  if (v10 >= v12) {
    goto LABEL_170;
  }
LABEL_11:
  long long v101 = (unsigned int *)v3;
  uint64_t v13 = v3 + v4;
  uint64_t v14 = v12;
  do
  {
    uint64_t v102 = v14;
    sub_341ED4(v13, v14);
    if (v111 >= 0) {
      uint64_t v15 = (void *)HIBYTE(v111);
    }
    else {
      uint64_t v15 = v110[1];
    }
    if (v111 >= 0) {
      uint64_t v16 = v110;
    }
    else {
      uint64_t v16 = (void **)v110[0];
    }
    if (v109 >= 0) {
      uint64_t v17 = (void *)HIBYTE(v109);
    }
    else {
      uint64_t v17 = v108[1];
    }
    if (v109 >= 0) {
      uint64_t v18 = v108;
    }
    else {
      uint64_t v18 = (void **)v108[0];
    }
    if (v114 >= 0) {
      uint64_t v19 = (void *)HIBYTE(v114);
    }
    else {
      uint64_t v19 = v113[1];
    }
    if (v114 >= 0) {
      uint64_t v20 = v113;
    }
    else {
      uint64_t v20 = (void **)v113[0];
    }
    __s2 = v20;
    int v106 = v112;
    if (v116 >= 0) {
      uint64_t v21 = (void *)HIBYTE(v116);
    }
    else {
      uint64_t v21 = v115[1];
    }
    if (v116 >= 0) {
      int v22 = v115;
    }
    else {
      int v22 = (void **)v115[0];
    }
    __s1 = v22;
    size_t v105 = (size_t)v21;
    unsigned int v103 = v117;
    for (i = (unsigned int *)(v13 + 248); ; i += 36)
    {
      int v24 = *((char *)i - 57);
      if (v24 >= 0) {
        size_t v25 = *((unsigned __int8 *)i - 57);
      }
      else {
        size_t v25 = *((void *)i - 9);
      }
      if (v24 >= 0) {
        int v26 = i - 20;
      }
      else {
        int v26 = (unsigned int *)*((void *)i - 10);
      }
      if ((unint64_t)v15 >= v25) {
        size_t v27 = v25;
      }
      else {
        size_t v27 = (size_t)v15;
      }
      int v28 = memcmp(v26, v16, v27);
      BOOL v29 = v25 < (unint64_t)v15;
      if (v28) {
        BOOL v29 = v28 < 0;
      }
      if (!v29)
      {
        int v30 = memcmp(v16, v26, v27);
        BOOL v31 = (unint64_t)v15 < v25;
        if (v30) {
          BOOL v31 = v30 < 0;
        }
        if (v31) {
          break;
        }
        int v32 = *((char *)i - 81);
        if (v32 >= 0) {
          size_t v33 = *((unsigned __int8 *)i - 81);
        }
        else {
          size_t v33 = *((void *)i - 12);
        }
        if (v32 >= 0) {
          int v34 = i - 26;
        }
        else {
          int v34 = (unsigned int *)*((void *)i - 13);
        }
        if ((unint64_t)v17 >= v33) {
          size_t v35 = v33;
        }
        else {
          size_t v35 = (size_t)v17;
        }
        int v36 = memcmp(v34, v18, v35);
        BOOL v37 = v33 < (unint64_t)v17;
        if (v36) {
          BOOL v37 = v36 < 0;
        }
        if (!v37)
        {
          int v38 = memcmp(v18, v34, v35);
          BOOL v39 = (unint64_t)v17 < v33;
          if (v38) {
            BOOL v39 = v38 < 0;
          }
          if (v39) {
            break;
          }
          int v40 = *((char *)i - 25);
          if (v40 >= 0) {
            size_t v41 = *((unsigned __int8 *)i - 25);
          }
          else {
            size_t v41 = *((void *)i - 5);
          }
          if (v40 >= 0) {
            int v42 = i - 12;
          }
          else {
            int v42 = (unsigned int *)*((void *)i - 6);
          }
          if ((unint64_t)v19 >= v41) {
            size_t v43 = v41;
          }
          else {
            size_t v43 = (size_t)v19;
          }
          int v44 = memcmp(v42, __s2, v43);
          BOOL v45 = v41 < (unint64_t)v19;
          if (v44) {
            BOOL v45 = v44 < 0;
          }
          if (!v45)
          {
            int v46 = memcmp(__s2, v42, v43);
            BOOL v47 = (unint64_t)v19 < v41;
            if (v46) {
              BOOL v47 = v46 < 0;
            }
            if (v47) {
              break;
            }
            int v48 = *(i - 14);
            if (v48 >= v106)
            {
              if (v106 < v48) {
                break;
              }
              int v49 = *((char *)i - 1);
              if (v49 >= 0) {
                size_t v50 = *((unsigned __int8 *)i - 1);
              }
              else {
                size_t v50 = *((void *)i - 2);
              }
              if (v49 >= 0) {
                int v51 = i - 6;
              }
              else {
                int v51 = (unsigned int *)*((void *)i - 3);
              }
              if (v105 >= v50) {
                size_t v52 = v50;
              }
              else {
                size_t v52 = v105;
              }
              int v53 = memcmp(v51, __s1, v52);
              BOOL v54 = v50 < v105;
              if (v53) {
                BOOL v54 = v53 < 0;
              }
              if (!v54)
              {
                int v55 = memcmp(__s1, v51, v52);
                BOOL v56 = v105 < v50;
                if (v55) {
                  BOOL v56 = v55 < 0;
                }
                if (v56 || *i >= v103) {
                  break;
                }
              }
            }
          }
        }
      }
    }
    for (unint64_t j = (char *)(v102 - 65); ; j -= 144)
    {
      int v58 = *(j - 32);
      if (v58 >= 0) {
        size_t v59 = *(j - 32);
      }
      else {
        size_t v59 = *(void *)(j - 47);
      }
      if (v58 >= 0) {
        int v60 = j - 55;
      }
      else {
        int v60 = *(char **)(j - 55);
      }
      if ((unint64_t)v15 >= v59) {
        size_t v61 = v59;
      }
      else {
        size_t v61 = (size_t)v15;
      }
      int v62 = memcmp(v60, v16, v61);
      BOOL v63 = v59 < (unint64_t)v15;
      if (v62) {
        BOOL v63 = v62 < 0;
      }
      if (v63) {
        break;
      }
      int v64 = memcmp(v16, v60, v61);
      BOOL v65 = (unint64_t)v15 < v59;
      if (v64) {
        BOOL v65 = v64 < 0;
      }
      if (!v65)
      {
        int v66 = *(j - 56);
        if (v66 >= 0) {
          size_t v67 = *(j - 56);
        }
        else {
          size_t v67 = *(void *)(j - 71);
        }
        if (v66 >= 0) {
          int v68 = j - 79;
        }
        else {
          int v68 = *(char **)(j - 79);
        }
        if ((unint64_t)v17 >= v67) {
          size_t v69 = v67;
        }
        else {
          size_t v69 = (size_t)v17;
        }
        int v70 = memcmp(v68, v18, v69);
        BOOL v71 = v67 < (unint64_t)v17;
        if (v70) {
          BOOL v71 = v70 < 0;
        }
        if (v71) {
          break;
        }
        int v72 = memcmp(v18, v68, v69);
        BOOL v73 = (unint64_t)v17 < v67;
        if (v72) {
          BOOL v73 = v72 < 0;
        }
        if (!v73)
        {
          int v74 = *j;
          if (v74 >= 0) {
            size_t v75 = *j;
          }
          else {
            size_t v75 = *(void *)(j - 15);
          }
          if (v74 >= 0) {
            int v76 = j - 23;
          }
          else {
            int v76 = *(char **)(j - 23);
          }
          if ((unint64_t)v19 >= v75) {
            size_t v77 = v75;
          }
          else {
            size_t v77 = (size_t)v19;
          }
          int v78 = memcmp(v76, __s2, v77);
          BOOL v79 = v75 < (unint64_t)v19;
          if (v78) {
            BOOL v79 = v78 < 0;
          }
          if (v79) {
            break;
          }
          int v80 = memcmp(__s2, v76, v77);
          BOOL v81 = (unint64_t)v19 < v75;
          if (v80) {
            BOOL v81 = v80 < 0;
          }
          if (!v81)
          {
            int v82 = *(_DWORD *)(j - 31);
            if (v82 < v106) {
              break;
            }
            if (v106 >= v82)
            {
              int v83 = j[24];
              if (v83 >= 0) {
                size_t v84 = j[24];
              }
              else {
                size_t v84 = *(void *)(j + 9);
              }
              if (v83 >= 0) {
                int v85 = j + 1;
              }
              else {
                int v85 = *(const void **)(j + 1);
              }
              if (v105 >= v84) {
                size_t v86 = v84;
              }
              else {
                size_t v86 = v105;
              }
              int v87 = memcmp(v85, __s1, v86);
              BOOL v88 = v84 < v105;
              if (v87) {
                BOOL v88 = v87 < 0;
              }
              if (v88) {
                break;
              }
              int v89 = memcmp(__s1, v85, v86);
              BOOL v90 = v105 < v84;
              if (v89) {
                BOOL v90 = v89 < 0;
              }
              if (!v90 && *(_DWORD *)(j + 25) < v103) {
                break;
              }
            }
          }
        }
      }
    }
    uint64_t v14 = (uint64_t)(j - 79);
    uint64_t v13 = (uint64_t)(i - 26);
  }
  while (i - 26 < (unsigned int *)(j - 79));
  uint64_t v3 = (uint64_t)v101;
  unint64_t v91 = (long long *)(i - 62);
  if (i - 62 != v101) {
LABEL_171:
  }
    sub_342098(v3, v91);
LABEL_172:
  if (*(char *)(v13 - 121) < 0) {
    operator delete(*(void **)v91);
  }
  long long v92 = *(_OWORD *)v108;
  *((void *)v91 + 2) = v109;
  *unint64_t v91 = v92;
  HIBYTE(v109) = 0;
  LOBYTE(v108[0]) = 0;
  int v93 = (void **)(v13 - 120);
  if (*(char *)(v13 - 97) < 0) {
    operator delete(*v93);
  }
  long long v94 = *(_OWORD *)v110;
  *(void *)(v13 - 104) = v111;
  *(_OWORD *)int v93 = v94;
  HIBYTE(v111) = 0;
  LOBYTE(v110[0]) = 0;
  *(void *)(v13 - 96) = v112;
  uint64_t v95 = (void **)(v13 - 88);
  if (*(char *)(v13 - 65) < 0) {
    operator delete(*v95);
  }
  long long v96 = *(_OWORD *)v113;
  *(void *)(v13 - 72) = v114;
  *(_OWORD *)uint64_t v95 = v96;
  HIBYTE(v114) = 0;
  LOBYTE(v113[0]) = 0;
  long long v97 = (void **)(v13 - 64);
  if (*(char *)(v13 - 41) < 0) {
    operator delete(*v97);
  }
  long long v98 = *(_OWORD *)v115;
  *(void *)(v13 - 48) = v116;
  *(_OWORD *)long long v97 = v98;
  HIBYTE(v116) = 0;
  LOBYTE(v115[0]) = 0;
  long long v99 = *(void **)(v13 - 32);
  *(_DWORD *)(v13 - 40) = v117;
  if (v99)
  {
    *(void *)(v13 - 24) = v99;
    operator delete(v99);
    *(void *)(v13 - 32) = 0;
    *(void *)(v13 - 24) = 0;
    *(void *)(v13 - 16) = 0;
  }
  *(_OWORD *)(v13 - 32) = *(_OWORD *)__p;
  *(void *)(v13 - 16) = v119;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v119 = 0;
  *(void *)(v13 - 8) = v120;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v116) < 0)
  {
    operator delete(v115[0]);
    if ((SHIBYTE(v114) & 0x80000000) == 0)
    {
LABEL_186:
      if ((SHIBYTE(v111) & 0x80000000) == 0) {
        goto LABEL_187;
      }
LABEL_191:
      operator delete(v110[0]);
      if ((SHIBYTE(v109) & 0x80000000) == 0) {
        return v91;
      }
LABEL_192:
      operator delete(v108[0]);
      return v91;
    }
  }
  else if ((SHIBYTE(v114) & 0x80000000) == 0)
  {
    goto LABEL_186;
  }
  operator delete(v113[0]);
  if (SHIBYTE(v111) < 0) {
    goto LABEL_191;
  }
LABEL_187:
  if (SHIBYTE(v109) < 0) {
    goto LABEL_192;
  }
  return v91;
}

void sub_341650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_3208E4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_341664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_3208E4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_341678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_3208E4((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_34168C(uint64_t a1, _OWORD *a2)
{
  uint64_t v3 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(0x8E38E38E38E38E39 * v3)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v5 = (uint64_t)(a2 - 9);
      v30[0] = (char *)a2 - 120;
      v30[1] = a2 - 9;
      BOOL v31 = (char *)a2 - 88;
      *(void *)&long long v32 = a2 - 6;
      *((void *)&v32 + 1) = a2 - 4;
      size_t v33 = (char *)a2 - 40;
      int v44 = (long long *)(a1 + 24);
      BOOL v45 = (void **)a1;
      int v46 = (long long *)(a1 + 56);
      BOOL v47 = (uint64_t *)(a1 + 48);
      p_p = (long long *)(a1 + 80);
      int v49 = (int *)(a1 + 104);
      if (sub_341B84((uint64_t)v43, (uint64_t)v30, (uint64_t)&v44)) {
        sub_341ED4(a1, v5);
      }
      return 1;
    case 3uLL:
      sub_340254(a1, a1 + 144, (uint64_t)(a2 - 9));
      return 1;
    case 4uLL:
      sub_3421CC(a1, a1 + 144, a1 + 288, (uint64_t)(a2 - 9));
      return 1;
    case 5uLL:
      sub_342320(a1, a1 + 144, a1 + 288, a1 + 432, (uint64_t)(a2 - 9));
      return 1;
    default:
      uint64_t v6 = (_OWORD *)(a1 + 288);
      sub_340254(a1, a1 + 144, a1 + 288);
      uint64_t v7 = (_OWORD *)(a1 + 432);
      if ((_OWORD *)(a1 + 432) == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v27 = 0;
      break;
  }
  do
  {
    uint64_t v29 = v8;
    unint64_t v10 = (_OWORD *)((char *)v7 + 24);
    uint64_t v11 = (_OWORD *)((char *)v7 + 56);
    v30[0] = (char *)v7 + 24;
    v30[1] = v7;
    unint64_t v12 = v7 + 5;
    BOOL v31 = (char *)v7 + 56;
    *(void *)&long long v32 = v7 + 3;
    *((void *)&v32 + 1) = v7 + 5;
    size_t v33 = (char *)v7 + 104;
    int v44 = (_OWORD *)((char *)v6 + 24);
    BOOL v45 = (void **)v6;
    int v46 = (_OWORD *)((char *)v6 + 56);
    BOOL v47 = (uint64_t *)(v6 + 3);
    p_p = v6 + 5;
    int v49 = (int *)v6 + 26;
    if (!sub_341B84((uint64_t)v43, (uint64_t)v30, (uint64_t)&v44))
    {
      uint64_t v9 = v29;
      goto LABEL_7;
    }
    *(_OWORD *)int v30 = *v7;
    size_t v33 = (char *)*((void *)v7 + 5);
    uint64_t v13 = (char *)*((void *)v7 + 2);
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = 0;
    *(void *)uint64_t v7 = 0;
    long long v32 = *v10;
    *(void *)unint64_t v10 = 0;
    *((void *)v7 + 4) = 0;
    *((void *)v7 + 5) = 0;
    uint64_t v14 = *((void *)v7 + 6);
    BOOL v31 = v13;
    uint64_t v34 = v14;
    long long v35 = *v11;
    uint64_t v36 = *((void *)v7 + 9);
    *(void *)uint64_t v11 = 0;
    *((void *)v7 + 8) = 0;
    *((void *)v7 + 9) = 0;
    long long v15 = *v12;
    uint64_t v38 = *((void *)v7 + 12);
    long long __p = v15;
    *(void *)unint64_t v12 = 0;
    *((void *)v7 + 11) = 0;
    *((void *)v7 + 12) = 0;
    int v39 = *((_DWORD *)v7 + 26);
    long long v40 = v7[7];
    *((void *)v7 + 14) = 0;
    *((void *)v7 + 15) = 0;
    uint64_t v16 = *((void *)v7 + 16);
    uint64_t v17 = *((void *)v7 + 17);
    *((void *)v7 + 16) = 0;
    uint64_t v9 = v29;
    uint64_t v18 = v29;
    uint64_t v41 = v16;
    uint64_t v42 = v17;
    while (1)
    {
      uint64_t v19 = a1 + v18;
      sub_342098(a1 + v18 + 432, (long long *)(a1 + v18 + 288));
      if (v18 == -288) {
        break;
      }
      int v44 = &v32;
      BOOL v45 = v30;
      int v46 = &v35;
      BOOL v47 = &v34;
      p_p = &__p;
      int v49 = &v39;
      v43[0] = v19 + 168;
      v43[1] = v19 + 144;
      v43[2] = v19 + 200;
      v43[3] = v19 + 192;
      v43[4] = v19 + 224;
      v43[5] = v19 + 248;
      v18 -= 144;
      if (!sub_341B84((uint64_t)v50, (uint64_t)&v44, (uint64_t)v43))
      {
        uint64_t v20 = a1 + v18 + 432;
        if ((*(char *)(v20 + 23) & 0x80000000) == 0) {
          goto LABEL_16;
        }
        goto LABEL_15;
      }
    }
    uint64_t v20 = a1;
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      goto LABEL_16;
    }
LABEL_15:
    operator delete(*(void **)v20);
LABEL_16:
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v30;
    *(void *)(v20 + 16) = v31;
    HIBYTE(v31) = 0;
    LOBYTE(v30[0]) = 0;
    uint64_t v21 = (void **)(v20 + 24);
    if (*(char *)(v20 + 47) < 0) {
      operator delete(*v21);
    }
    *(_OWORD *)uint64_t v21 = v32;
    *(void *)(v20 + 40) = v33;
    HIBYTE(v33) = 0;
    LOBYTE(v32) = 0;
    *(void *)(v20 + 48) = v34;
    int v22 = (void **)(v20 + 56);
    if (*(char *)(v20 + 79) < 0) {
      operator delete(*v22);
    }
    *(_OWORD *)int v22 = v35;
    *(void *)(v20 + 72) = v36;
    HIBYTE(v36) = 0;
    LOBYTE(v35) = 0;
    size_t v23 = (void **)(v20 + 80);
    if (*(char *)(v20 + 103) < 0) {
      operator delete(*v23);
    }
    *(_OWORD *)size_t v23 = __p;
    *(void *)(v20 + 96) = v38;
    HIBYTE(v38) = 0;
    LOBYTE(__p) = 0;
    int v24 = *(void **)(v20 + 112);
    *(_DWORD *)(v20 + 104) = v39;
    if (v24)
    {
      *(void *)(v20 + 120) = v24;
      operator delete(v24);
      *(void *)(v20 + 112) = 0;
      *(void *)(v20 + 120) = 0;
      *(void *)(v20 + 128) = 0;
    }
    *(_OWORD *)(v20 + 112) = v40;
    uint64_t v25 = v41;
    uint64_t v26 = v42;
    uint64_t v41 = 0;
    long long v40 = 0uLL;
    *(void *)(v20 + 128) = v25;
    *(void *)(v20 + 136) = v26;
    if (SHIBYTE(v38) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v36) & 0x80000000) == 0)
      {
LABEL_26:
        if ((SHIBYTE(v33) & 0x80000000) == 0) {
          goto LABEL_27;
        }
        goto LABEL_32;
      }
    }
    else if ((SHIBYTE(v36) & 0x80000000) == 0)
    {
      goto LABEL_26;
    }
    operator delete((void *)v35);
    if ((SHIBYTE(v33) & 0x80000000) == 0)
    {
LABEL_27:
      if ((SHIBYTE(v31) & 0x80000000) == 0) {
        goto LABEL_28;
      }
      goto LABEL_33;
    }
LABEL_32:
    operator delete((void *)v32);
    if ((SHIBYTE(v31) & 0x80000000) == 0)
    {
LABEL_28:
      if (++v27 == 8) {
        return v7 + 9 == a2;
      }
      goto LABEL_7;
    }
LABEL_33:
    operator delete(v30[0]);
    if (++v27 == 8) {
      return v7 + 9 == a2;
    }
LABEL_7:
    uint64_t v6 = v7;
    uint64_t v8 = v9 + 144;
    v7 += 9;
  }
  while (v7 != a2);
  return 1;
}

void sub_341B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_3208E4((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_341B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(char *)(*(void *)a3 + 23);
  int v6 = *(char *)(*(void *)a2 + 23);
  if (v6 >= 0) {
    size_t v7 = *(unsigned __int8 *)(*(void *)a2 + 23);
  }
  else {
    size_t v7 = *(void *)(*(void *)a2 + 8);
  }
  if (v6 >= 0) {
    uint64_t v8 = *(const void **)a2;
  }
  else {
    uint64_t v8 = **(const void ***)a2;
  }
  if (v5 >= 0) {
    size_t v9 = *(unsigned __int8 *)(*(void *)a3 + 23);
  }
  else {
    size_t v9 = *(void *)(*(void *)a3 + 8);
  }
  if (v5 >= 0) {
    unint64_t v10 = *(const void **)a3;
  }
  else {
    unint64_t v10 = **(const void ***)a3;
  }
  if (v9 >= v7) {
    size_t v11 = v7;
  }
  else {
    size_t v11 = v9;
  }
  int v12 = memcmp(v8, v10, v11);
  BOOL v13 = v7 < v9;
  if (v12) {
    BOOL v13 = v12 < 0;
  }
  if (v13) {
    return 1;
  }
  int v14 = memcmp(v10, v8, v11);
  BOOL v15 = v9 < v7;
  if (v14) {
    BOOL v15 = v14 < 0;
  }
  if (v15) {
    return 0;
  }
  uint64_t v16 = *(void *)(a2 + 8);
  uint64_t v17 = *(void *)(a3 + 8);
  int v18 = *(char *)(v17 + 23);
  int v19 = *(char *)(v16 + 23);
  if (v19 >= 0) {
    size_t v20 = *(unsigned __int8 *)(v16 + 23);
  }
  else {
    size_t v20 = *(void *)(v16 + 8);
  }
  if (v19 >= 0) {
    uint64_t v21 = *(const void **)(a2 + 8);
  }
  else {
    uint64_t v21 = *(const void **)v16;
  }
  if (v18 >= 0) {
    size_t v22 = *(unsigned __int8 *)(v17 + 23);
  }
  else {
    size_t v22 = *(void *)(v17 + 8);
  }
  if (v18 >= 0) {
    size_t v23 = *(const void **)(a3 + 8);
  }
  else {
    size_t v23 = *(const void **)v17;
  }
  if (v22 >= v20) {
    size_t v24 = v20;
  }
  else {
    size_t v24 = v22;
  }
  int v25 = memcmp(v21, v23, v24);
  BOOL v26 = v20 < v22;
  if (v25) {
    BOOL v26 = v25 < 0;
  }
  if (v26) {
    return 1;
  }
  int v28 = memcmp(v23, v21, v24);
  BOOL v29 = v22 < v20;
  if (v28) {
    BOOL v29 = v28 < 0;
  }
  return !v29 && sub_341D08((uint64_t)&v30, a2, a3);
}

BOOL sub_341D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a3 + 16);
  int v7 = *(char *)(v6 + 23);
  int v8 = *(char *)(v5 + 23);
  if (v8 >= 0) {
    size_t v9 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    size_t v9 = *(void *)(v5 + 8);
  }
  if (v8 >= 0) {
    unint64_t v10 = *(const void **)(a2 + 16);
  }
  else {
    unint64_t v10 = *(const void **)v5;
  }
  if (v7 >= 0) {
    size_t v11 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    size_t v11 = *(void *)(v6 + 8);
  }
  if (v7 >= 0) {
    int v12 = *(const void **)(a3 + 16);
  }
  else {
    int v12 = *(const void **)v6;
  }
  if (v11 >= v9) {
    size_t v13 = v9;
  }
  else {
    size_t v13 = v11;
  }
  int v14 = memcmp(v10, v12, v13);
  BOOL v15 = v9 < v11;
  if (v14) {
    BOOL v15 = v14 < 0;
  }
  if (v15) {
    return 1;
  }
  int v16 = memcmp(v12, v10, v13);
  BOOL v17 = v11 < v9;
  if (v16) {
    BOOL v17 = v16 < 0;
  }
  if (v17) {
    return 0;
  }
  int v18 = **(_DWORD **)(a2 + 24);
  int v19 = **(_DWORD **)(a3 + 24);
  if (v18 < v19) {
    return 1;
  }
  if (v19 < v18) {
    return 0;
  }
  uint64_t v20 = *(void *)(a2 + 32);
  uint64_t v21 = *(void *)(a3 + 32);
  int v22 = *(char *)(v21 + 23);
  int v23 = *(char *)(v20 + 23);
  if (v23 >= 0) {
    size_t v24 = *(unsigned __int8 *)(v20 + 23);
  }
  else {
    size_t v24 = *(void *)(v20 + 8);
  }
  if (v23 >= 0) {
    int v25 = *(const void **)(a2 + 32);
  }
  else {
    int v25 = *(const void **)v20;
  }
  if (v22 >= 0) {
    size_t v26 = *(unsigned __int8 *)(v21 + 23);
  }
  else {
    size_t v26 = *(void *)(v21 + 8);
  }
  if (v22 >= 0) {
    int v27 = *(const void **)(a3 + 32);
  }
  else {
    int v27 = *(const void **)v21;
  }
  if (v26 >= v24) {
    size_t v28 = v24;
  }
  else {
    size_t v28 = v26;
  }
  int v29 = memcmp(v25, v27, v28);
  BOOL v30 = v24 < v26;
  if (v29) {
    BOOL v30 = v29 < 0;
  }
  if (v30) {
    return 1;
  }
  int v32 = memcmp(v27, v25, v28);
  BOOL v33 = v26 < v24;
  if (v32) {
    BOOL v33 = v32 < 0;
  }
  return !v33 && **(_DWORD **)(a2 + 40) < **(_DWORD **)(a3 + 40);
}

__n128 sub_341ED4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1;
  *(void *)int v22 = *(void *)(a1 + 8);
  *(void *)&v22[7] = *(void *)(a1 + 15);
  char v4 = *(unsigned char *)(a1 + 23);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)uint64_t v21 = *(void *)(a1 + 32);
  *(void *)&v21[7] = *(void *)(a1 + 39);
  char v6 = *(unsigned char *)(a1 + 47);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  *(void *)&v20[7] = *(void *)(a1 + 71);
  *(void *)uint64_t v20 = *(void *)(a1 + 64);
  char v9 = *(unsigned char *)(a1 + 79);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v10 = *(void *)(a1 + 80);
  *(void *)&v19[7] = *(void *)(a1 + 95);
  *(void *)int v19 = *(void *)(a1 + 88);
  char v11 = *(unsigned char *)(a1 + 103);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  int v12 = *(_DWORD *)(a1 + 104);
  __n128 v18 = *(__n128 *)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  uint64_t v17 = *(void *)(a1 + 128);
  uint64_t v15 = v10;
  uint64_t v16 = *(void *)(a1 + 136);
  *(void *)(a1 + 128) = 0;
  sub_342098(a1, (long long *)a2);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = *(void *)v22;
  *(void *)(a2 + 15) = *(void *)&v22[7];
  *(unsigned char *)(a2 + 23) = v4;
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  *(void *)(a2 + 24) = v5;
  *(void *)(a2 + 32) = *(void *)v21;
  *(void *)(a2 + 39) = *(void *)&v21[7];
  *(unsigned char *)(a2 + 47) = v6;
  *(void *)(a2 + 48) = v7;
  if (*(char *)(a2 + 79) < 0) {
    operator delete(*(void **)(a2 + 56));
  }
  *(void *)(a2 + 56) = v8;
  *(void *)(a2 + 64) = *(void *)v20;
  *(void *)(a2 + 71) = *(void *)&v20[7];
  *(unsigned char *)(a2 + 79) = v9;
  if (*(char *)(a2 + 103) < 0) {
    operator delete(*(void **)(a2 + 80));
  }
  *(void *)(a2 + 80) = v15;
  *(void *)(a2 + 88) = *(void *)v19;
  *(void *)(a2 + 95) = *(void *)&v19[7];
  *(unsigned char *)(a2 + 103) = v11;
  *(_DWORD *)(a2 + 104) = v12;
  size_t v13 = *(void **)(a2 + 112);
  if (v13)
  {
    *(void *)(a2 + 120) = v13;
    operator delete(v13);
  }
  __n128 result = v18;
  *(__n128 *)(a2 + 112) = v18;
  *(void *)(a2 + 128) = v17;
  *(void *)(a2 + 136) = v16;
  return result;
}

uint64_t sub_342098(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  uint64_t v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v5);
  }
  long long v6 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)uint64_t v5 = v6;
  *((unsigned char *)a2 + 47) = 0;
  *((unsigned char *)a2 + 24) = 0;
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  uint64_t v7 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*v7);
  }
  long long v8 = *(long long *)((char *)a2 + 56);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  *(_OWORD *)uint64_t v7 = v8;
  *((unsigned char *)a2 + 79) = 0;
  *((unsigned char *)a2 + 56) = 0;
  char v9 = (void **)(a1 + 80);
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*v9);
  }
  long long v10 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)char v9 = v10;
  *((unsigned char *)a2 + 103) = 0;
  *((unsigned char *)a2 + 80) = 0;
  char v11 = *(void **)(a1 + 112);
  *(_DWORD *)(a1 + 104) = *((_DWORD *)a2 + 26);
  if (v11)
  {
    *(void *)(a1 + 120) = v11;
    operator delete(v11);
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
  }
  *(_OWORD *)(a1 + 112) = a2[7];
  *(void *)(a1 + 128) = *((void *)a2 + 16);
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  *((void *)a2 + 16) = 0;
  *(void *)(a1 + 136) = *((void *)a2 + 17);
  return a1;
}

double sub_3421CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_340254(a1, a2, a3);
  uint64_t v15 = a4 + 24;
  uint64_t v16 = a4;
  uint64_t v17 = a4 + 56;
  uint64_t v18 = a4 + 48;
  uint64_t v19 = a4 + 80;
  uint64_t v20 = a4 + 104;
  uint64_t v9 = a3 + 24;
  uint64_t v10 = a3;
  uint64_t v11 = a3 + 56;
  uint64_t v12 = a3 + 48;
  uint64_t v13 = a3 + 80;
  uint64_t v14 = a3 + 104;
  if (sub_341B84((uint64_t)&v21, (uint64_t)&v15, (uint64_t)&v9))
  {
    sub_341ED4(a3, a4);
    uint64_t v15 = a3 + 24;
    uint64_t v16 = a3;
    uint64_t v17 = a3 + 56;
    uint64_t v18 = a3 + 48;
    uint64_t v19 = a3 + 80;
    uint64_t v20 = a3 + 104;
    uint64_t v9 = a2 + 24;
    uint64_t v10 = a2;
    uint64_t v11 = a2 + 56;
    uint64_t v12 = a2 + 48;
    uint64_t v13 = a2 + 80;
    uint64_t v14 = a2 + 104;
    if (sub_341B84((uint64_t)&v21, (uint64_t)&v15, (uint64_t)&v9))
    {
      sub_341ED4(a2, a3);
      uint64_t v15 = a2 + 24;
      uint64_t v16 = a2;
      uint64_t v17 = a2 + 56;
      uint64_t v18 = a2 + 48;
      uint64_t v19 = a2 + 80;
      uint64_t v20 = a2 + 104;
      uint64_t v9 = a1 + 24;
      uint64_t v10 = a1;
      uint64_t v11 = a1 + 56;
      uint64_t v12 = a1 + 48;
      uint64_t v13 = a1 + 80;
      uint64_t v14 = a1 + 104;
      if (sub_341B84((uint64_t)&v21, (uint64_t)&v15, (uint64_t)&v9)) {
        *(void *)&double result = sub_341ED4(a1, a2).n128_u64[0];
      }
    }
  }
  return result;
}

double sub_342320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_3421CC(a1, a2, a3, a4);
  uint64_t v17 = a5 + 24;
  uint64_t v18 = a5;
  uint64_t v19 = a5 + 56;
  uint64_t v20 = a5 + 48;
  uint64_t v21 = a5 + 80;
  uint64_t v22 = a5 + 104;
  uint64_t v11 = a4 + 24;
  uint64_t v12 = a4;
  uint64_t v13 = a4 + 56;
  uint64_t v14 = a4 + 48;
  uint64_t v15 = a4 + 80;
  uint64_t v16 = a4 + 104;
  if (sub_341B84((uint64_t)&v23, (uint64_t)&v17, (uint64_t)&v11))
  {
    sub_341ED4(a4, a5);
    uint64_t v17 = a4 + 24;
    uint64_t v18 = a4;
    uint64_t v19 = a4 + 56;
    uint64_t v20 = a4 + 48;
    uint64_t v21 = a4 + 80;
    uint64_t v22 = a4 + 104;
    uint64_t v11 = a3 + 24;
    uint64_t v12 = a3;
    uint64_t v13 = a3 + 56;
    uint64_t v14 = a3 + 48;
    uint64_t v15 = a3 + 80;
    uint64_t v16 = a3 + 104;
    if (sub_341B84((uint64_t)&v23, (uint64_t)&v17, (uint64_t)&v11))
    {
      sub_341ED4(a3, a4);
      uint64_t v17 = a3 + 24;
      uint64_t v18 = a3;
      uint64_t v19 = a3 + 56;
      uint64_t v20 = a3 + 48;
      uint64_t v21 = a3 + 80;
      uint64_t v22 = a3 + 104;
      uint64_t v11 = a2 + 24;
      uint64_t v12 = a2;
      uint64_t v13 = a2 + 56;
      uint64_t v14 = a2 + 48;
      uint64_t v15 = a2 + 80;
      uint64_t v16 = a2 + 104;
      if (sub_341B84((uint64_t)&v23, (uint64_t)&v17, (uint64_t)&v11))
      {
        sub_341ED4(a2, a3);
        uint64_t v17 = a2 + 24;
        uint64_t v18 = a2;
        uint64_t v19 = a2 + 56;
        uint64_t v20 = a2 + 48;
        uint64_t v21 = a2 + 80;
        uint64_t v22 = a2 + 104;
        uint64_t v11 = a1 + 24;
        uint64_t v12 = a1;
        uint64_t v13 = a1 + 56;
        uint64_t v14 = a1 + 48;
        uint64_t v15 = a1 + 80;
        uint64_t v16 = a1 + 104;
        if (sub_341B84((uint64_t)&v23, (uint64_t)&v17, (uint64_t)&v11)) {
          *(void *)&double result = sub_341ED4(a1, a2).n128_u64[0];
        }
      }
    }
  }
  return result;
}

void sub_3424C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 < 2) {
    return;
  }
  uint64_t v5 = a4;
  uint64_t v31 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < (uint64_t)(0x8E38E38E38E38E39 * ((a4 - a1) >> 4))) {
    return;
  }
  uint64_t v8 = (0x1C71C71C71C71C72 * ((a4 - a1) >> 4)) | 1;
  uint64_t v9 = a1 + 144 * v8;
  uint64_t v10 = 0x1C71C71C71C71C72 * ((a4 - a1) >> 4) + 2;
  if (v10 < a3)
  {
    uint64_t v11 = a1 + 144 * v8;
    v32[0] = (void *)(v11 + 24);
    v32[1] = (void *)v11;
    uint64_t v33 = v11 + 56;
    v34[0] = (void *)(v11 + 48);
    v34[1] = (void *)(v11 + 80);
    uint64_t v35 = v11 + 104;
    uint64_t v51 = v9 + 168;
    uint64_t v52 = v9 + 144;
    uint64_t v53 = v9 + 200;
    uint64_t v54 = v9 + 192;
    uint64_t v55 = v9 + 224;
    uint64_t v56 = v9 + 248;
    if (sub_341B84((uint64_t)&v45, (uint64_t)v32, (uint64_t)&v51))
    {
      v9 += 144;
      uint64_t v8 = v10;
    }
  }
  v32[0] = (void *)(v9 + 24);
  v32[1] = (void *)v9;
  uint64_t v33 = v9 + 56;
  v34[0] = (void *)(v9 + 48);
  v34[1] = (void *)(v9 + 80);
  uint64_t v35 = v9 + 104;
  uint64_t v12 = (_OWORD *)(v5 + 24);
  uint64_t v13 = (_OWORD *)(v5 + 56);
  uint64_t v14 = (long long *)(v5 + 80);
  uint64_t v51 = v5 + 24;
  uint64_t v52 = v5;
  uint64_t v53 = v5 + 56;
  uint64_t v54 = v5 + 48;
  uint64_t v55 = v5 + 80;
  uint64_t v56 = v5 + 104;
  if (sub_341B84((uint64_t)&v45, (uint64_t)v32, (uint64_t)&v51)) {
    return;
  }
  *(_OWORD *)int v32 = *(_OWORD *)v5;
  uint64_t v33 = *(void *)(v5 + 16);
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  *(void *)uint64_t v5 = 0;
  *(_OWORD *)uint64_t v34 = *v12;
  uint64_t v15 = *(void *)(v5 + 40);
  *(void *)uint64_t v12 = 0;
  *(void *)(v5 + 32) = 0;
  *(void *)(v5 + 40) = 0;
  uint64_t v16 = *(void *)(v5 + 48);
  uint64_t v35 = v15;
  uint64_t v36 = v16;
  *(_OWORD *)BOOL v37 = *v13;
  uint64_t v38 = *(void *)(v5 + 72);
  *(void *)uint64_t v13 = 0;
  *(void *)(v5 + 64) = 0;
  *(void *)(v5 + 72) = 0;
  long long v17 = *v14;
  uint64_t v40 = *(void *)(v5 + 96);
  *(_OWORD *)long long __p = v17;
  *(void *)uint64_t v14 = 0;
  *(void *)(v5 + 88) = 0;
  *(void *)(v5 + 96) = 0;
  int v41 = *(_DWORD *)(v5 + 104);
  long long v42 = *(_OWORD *)(v5 + 112);
  *(void *)(v5 + 112) = 0;
  *(void *)(v5 + 120) = 0;
  uint64_t v18 = *(void *)(v5 + 136);
  uint64_t v43 = *(void *)(v5 + 128);
  uint64_t v44 = v18;
  *(void *)(v5 + 128) = 0;
  do
  {
    uint64_t v19 = v9;
    sub_342098(v5, (long long *)v9);
    if (v31 < v8) {
      break;
    }
    uint64_t v20 = (2 * v8) | 1;
    uint64_t v9 = a1 + 144 * v20;
    uint64_t v8 = 2 * v8 + 2;
    if (v8 >= a3)
    {
      uint64_t v8 = v20;
    }
    else
    {
      uint64_t v21 = a1 + 144 * v20;
      uint64_t v51 = v21 + 24;
      uint64_t v52 = v21;
      uint64_t v53 = v21 + 56;
      uint64_t v54 = v21 + 48;
      uint64_t v55 = v21 + 80;
      uint64_t v56 = v21 + 104;
      BOOL v45 = (void **)(v9 + 168);
      int v46 = (void **)(v9 + 144);
      BOOL v47 = (void **)(v9 + 200);
      int v48 = (uint64_t *)(v9 + 192);
      int v49 = (void **)(v9 + 224);
      size_t v50 = (int *)(v9 + 248);
      if (sub_341B84((uint64_t)v57, (uint64_t)&v51, (uint64_t)&v45)) {
        v9 += 144;
      }
      else {
        uint64_t v8 = v20;
      }
    }
    uint64_t v51 = v9 + 24;
    uint64_t v52 = v9;
    uint64_t v53 = v9 + 56;
    uint64_t v54 = v9 + 48;
    uint64_t v55 = v9 + 80;
    uint64_t v56 = v9 + 104;
    BOOL v45 = v34;
    int v46 = v32;
    BOOL v47 = v37;
    int v48 = &v36;
    int v49 = __p;
    size_t v50 = &v41;
    uint64_t v5 = v19;
  }
  while (!sub_341B84((uint64_t)v57, (uint64_t)&v51, (uint64_t)&v45));
  if (*(char *)(v19 + 23) < 0) {
    operator delete(*(void **)v19);
  }
  long long v22 = *(_OWORD *)v32;
  *(void *)(v19 + 16) = v33;
  *(_OWORD *)uint64_t v19 = v22;
  HIBYTE(v33) = 0;
  LOBYTE(v32[0]) = 0;
  char v23 = (void **)(v19 + 24);
  if (*(char *)(v19 + 47) < 0) {
    operator delete(*v23);
  }
  long long v24 = *(_OWORD *)v34;
  *(void *)(v19 + 40) = v35;
  *(_OWORD *)char v23 = v24;
  HIBYTE(v35) = 0;
  LOBYTE(v34[0]) = 0;
  *(void *)(v19 + 48) = v36;
  int v25 = (void **)(v19 + 56);
  if (*(char *)(v19 + 79) < 0) {
    operator delete(*v25);
  }
  long long v26 = *(_OWORD *)v37;
  *(void *)(v19 + 72) = v38;
  *(_OWORD *)int v25 = v26;
  HIBYTE(v38) = 0;
  LOBYTE(v37[0]) = 0;
  int v27 = (void **)(v19 + 80);
  if (*(char *)(v19 + 103) < 0) {
    operator delete(*v27);
  }
  long long v28 = *(_OWORD *)__p;
  *(void *)(v19 + 96) = v40;
  *(_OWORD *)int v27 = v28;
  HIBYTE(v40) = 0;
  LOBYTE(__p[0]) = 0;
  int v29 = *(void **)(v19 + 112);
  *(_DWORD *)(v19 + 104) = v41;
  if (v29)
  {
    *(void *)(v19 + 120) = v29;
    operator delete(v29);
    *(void *)(v19 + 120) = 0;
    *(void *)(v19 + 128) = 0;
    *(void *)(v19 + 112) = 0;
    int v30 = SHIBYTE(v40);
    *(_OWORD *)(v19 + 112) = v42;
    *(void *)(v19 + 128) = v43;
    long long v42 = 0uLL;
    uint64_t v43 = 0;
    *(void *)(v19 + 136) = v44;
    if ((v30 & 0x80000000) == 0)
    {
      if ((SHIBYTE(v38) & 0x80000000) == 0) {
        goto LABEL_26;
      }
LABEL_32:
      operator delete(v37[0]);
      if ((SHIBYTE(v35) & 0x80000000) == 0)
      {
LABEL_27:
        if ((SHIBYTE(v33) & 0x80000000) == 0) {
          return;
        }
LABEL_34:
        operator delete(v32[0]);
        return;
      }
      goto LABEL_33;
    }
    operator delete(__p[0]);
    if (SHIBYTE(v38) < 0) {
      goto LABEL_32;
    }
  }
  else
  {
    *(_OWORD *)(v19 + 112) = v42;
    *(void *)(v19 + 128) = v43;
    long long v42 = 0uLL;
    uint64_t v43 = 0;
    *(void *)(v19 + 136) = v44;
    if (SHIBYTE(v38) < 0) {
      goto LABEL_32;
    }
  }
LABEL_26:
  if ((SHIBYTE(v35) & 0x80000000) == 0) {
    goto LABEL_27;
  }
LABEL_33:
  operator delete(v34[0]);
  if (SHIBYTE(v33) < 0) {
    goto LABEL_34;
  }
}

void sub_342964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_3208E4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_342978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v7 = 0;
    *(_OWORD *)long long v28 = *(_OWORD *)a1;
    uint64_t v29 = *(void *)(a1 + 16);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    long long v8 = *(_OWORD *)(a1 + 24);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(_OWORD *)int v30 = v8;
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 48);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    uint64_t v31 = v9;
    uint64_t v32 = v10;
    uint64_t v34 = *(void *)(a1 + 72);
    *(_OWORD *)uint64_t v33 = *(_OWORD *)(a1 + 56);
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    uint64_t v36 = *(void *)(a1 + 96);
    *(_OWORD *)uint64_t v35 = *(_OWORD *)(a1 + 80);
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0;
    int v37 = *(_DWORD *)(a1 + 104);
    *(_OWORD *)long long __p = *(_OWORD *)(a1 + 112);
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
    uint64_t v39 = *(void *)(a1 + 128);
    uint64_t v40 = *(void *)(a1 + 136);
    int64_t v11 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v12 = a1;
    *(void *)(a1 + 128) = 0;
    do
    {
      uint64_t v13 = v12 + 144 * (v7 + 1);
      uint64_t v14 = (2 * v7) | 1;
      uint64_t v15 = 2 * v7 + 2;
      if (v15 < a4)
      {
        uint64_t v16 = v12 + 144 * (v7 + 1);
        v42[0] = v16 + 24;
        v42[1] = v13;
        v42[2] = v16 + 56;
        v42[3] = v16 + 48;
        v42[4] = v16 + 80;
        v42[5] = v16 + 104;
        v41[0] = v13 + 168;
        v41[1] = v13 + 144;
        v41[2] = v13 + 200;
        v41[3] = v13 + 192;
        v41[4] = v13 + 224;
        v41[5] = v13 + 248;
        if (sub_341B84((uint64_t)v43, (uint64_t)v42, (uint64_t)v41))
        {
          v13 += 144;
          uint64_t v14 = v15;
        }
      }
      sub_342098(v12, (long long *)v13);
      uint64_t v12 = v13;
      uint64_t v7 = v14;
    }
    while (v14 <= v11);
    long long v17 = (void **)(a2 - 144);
    if (v13 == a2 - 144)
    {
      if (*(char *)(v13 + 23) < 0) {
        operator delete(*(void **)v13);
      }
      *(void *)(v13 + 16) = v29;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v28;
      char v23 = (void **)(v13 + 24);
      if (*(char *)(v13 + 47) < 0) {
        operator delete(*v23);
      }
      *(void *)(v13 + 40) = v31;
      *(_OWORD *)char v23 = *(_OWORD *)v30;
      *(void *)(v13 + 48) = v32;
      long long v24 = (void **)(v13 + 56);
      if (*(char *)(v13 + 79) < 0) {
        operator delete(*v24);
      }
      *(void *)(v13 + 72) = v34;
      *(_OWORD *)long long v24 = *(_OWORD *)v33;
      int v25 = (void **)(v13 + 80);
      if (*(char *)(v13 + 103) < 0) {
        operator delete(*v25);
      }
      *(void *)(v13 + 96) = v36;
      *(_OWORD *)int v25 = *(_OWORD *)v35;
      long long v26 = *(void **)(v13 + 112);
      *(_DWORD *)(v13 + 104) = v37;
      if (v26)
      {
        *(void *)(v13 + 120) = v26;
        operator delete(v26);
        *(void *)(v13 + 112) = 0;
        *(void *)(v13 + 120) = 0;
        *(void *)(v13 + 128) = 0;
      }
      *(_OWORD *)(v13 + 112) = *(_OWORD *)__p;
      *(void *)(v13 + 128) = v39;
      *(void *)(v13 + 136) = v40;
    }
    else
    {
      sub_342098(v13, (long long *)(a2 - 144));
      if (*(char *)(a2 - 121) < 0) {
        operator delete(*v17);
      }
      *(_OWORD *)long long v17 = *(_OWORD *)v28;
      *(void *)(a2 - 128) = v29;
      uint64_t v18 = (void **)(a2 - 120);
      if (*(char *)(a2 - 97) < 0) {
        operator delete(*v18);
      }
      *(_OWORD *)uint64_t v18 = *(_OWORD *)v30;
      *(void *)(a2 - 104) = v31;
      *(void *)(a2 - 96) = v32;
      uint64_t v19 = (void **)(a2 - 88);
      if (*(char *)(a2 - 65) < 0) {
        operator delete(*v19);
      }
      uint64_t v20 = v13 + 144;
      *(_OWORD *)uint64_t v19 = *(_OWORD *)v33;
      *(void *)(a2 - 72) = v34;
      uint64_t v21 = (void **)(a2 - 64);
      if (*(char *)(a2 - 41) < 0) {
        operator delete(*v21);
      }
      *(_OWORD *)uint64_t v21 = *(_OWORD *)v35;
      *(void *)(a2 - 48) = v36;
      long long v22 = *(void **)(a2 - 32);
      *(_DWORD *)(a2 - 40) = v37;
      if (v22)
      {
        *(void *)(a2 - 24) = v22;
        operator delete(v22);
        *(void *)(a2 - 32) = 0;
        *(void *)(a2 - 24) = 0;
        *(void *)(a2 - 16) = 0;
      }
      *(_OWORD *)(a2 - 32) = *(_OWORD *)__p;
      *(void *)(a2 - 16) = v39;
      *(void *)(a2 - 8) = v40;
      sub_342DFC(a1, v20, a3, 0x8E38E38E38E38E39 * ((v20 - a1) >> 4));
    }
  }
}

void sub_342DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_3208E4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_342DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_3208E4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_342DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 < 2) {
    return;
  }
  unint64_t v7 = v4 >> 1;
  uint64_t v8 = a1 + 144 * (v4 >> 1);
  v28[0] = (void *)(v8 + 24);
  v28[1] = (void *)v8;
  uint64_t v9 = a2 - 144;
  uint64_t v29 = v8 + 56;
  v30[0] = (void *)(v8 + 48);
  v30[1] = (void *)(v8 + 80);
  uint64_t v31 = v8 + 104;
  uint64_t v10 = a2 - 120;
  uint64_t v11 = a2 - 88;
  uint64_t v12 = (long long *)(a2 - 64);
  uint64_t v42 = a2 - 120;
  uint64_t v43 = a2 - 144;
  uint64_t v44 = a2 - 88;
  uint64_t v45 = a2 - 96;
  uint64_t v46 = a2 - 64;
  uint64_t v47 = a2 - 40;
  if (!sub_341B84((uint64_t)v41, (uint64_t)v28, (uint64_t)&v42)) {
    return;
  }
  *(_OWORD *)long long v28 = *(_OWORD *)v9;
  uint64_t v29 = *(void *)(v9 + 16);
  *(void *)(v9 + 8) = 0;
  *(void *)(v9 + 16) = 0;
  *(void *)uint64_t v9 = 0;
  *(_OWORD *)int v30 = *(_OWORD *)v10;
  uint64_t v13 = *(void *)(v10 + 16);
  *(void *)uint64_t v10 = 0;
  *(void *)(v10 + 8) = 0;
  *(void *)(v10 + 16) = 0;
  uint64_t v14 = *(void *)(a2 - 96);
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  *(_OWORD *)uint64_t v33 = *(_OWORD *)v11;
  uint64_t v34 = *(void *)(v11 + 16);
  *(void *)uint64_t v11 = 0;
  *(void *)(v11 + 8) = 0;
  *(void *)(v11 + 16) = 0;
  long long v15 = *v12;
  uint64_t v36 = *((void *)v12 + 2);
  *(_OWORD *)long long __p = v15;
  *(void *)uint64_t v12 = 0;
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  int v37 = *(_DWORD *)(a2 - 40);
  long long v38 = *(_OWORD *)(a2 - 32);
  *(void *)(a2 - 32) = 0;
  *(void *)(a2 - 24) = 0;
  uint64_t v16 = *(void *)(a2 - 16);
  uint64_t v17 = *(void *)(a2 - 8);
  *(void *)(a2 - 16) = 0;
  uint64_t v39 = v16;
  uint64_t v40 = v17;
  do
  {
    uint64_t v18 = v8;
    sub_342098(v9, (long long *)v8);
    if (!v7) {
      break;
    }
    unint64_t v7 = (v7 - 1) >> 1;
    uint64_t v8 = a1 + 144 * v7;
    uint64_t v42 = v8 + 24;
    uint64_t v43 = v8;
    uint64_t v44 = v8 + 56;
    uint64_t v45 = v8 + 48;
    uint64_t v46 = v8 + 80;
    uint64_t v47 = v8 + 104;
    v41[0] = v30;
    v41[1] = v28;
    v41[2] = v33;
    v41[3] = &v32;
    v41[4] = __p;
    v41[5] = &v37;
    uint64_t v9 = v18;
  }
  while (sub_341B84((uint64_t)v48, (uint64_t)&v42, (uint64_t)v41));
  if (*(char *)(v18 + 23) < 0) {
    operator delete(*(void **)v18);
  }
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v28;
  *(void *)(v18 + 16) = v29;
  HIBYTE(v29) = 0;
  LOBYTE(v28[0]) = 0;
  uint64_t v19 = (void **)(v18 + 24);
  if (*(char *)(v18 + 47) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v30;
  *(void *)(v18 + 40) = v31;
  HIBYTE(v31) = 0;
  LOBYTE(v30[0]) = 0;
  *(void *)(v18 + 48) = v32;
  uint64_t v20 = (void **)(v18 + 56);
  if (*(char *)(v18 + 79) < 0) {
    operator delete(*v20);
  }
  *(_OWORD *)uint64_t v20 = *(_OWORD *)v33;
  *(void *)(v18 + 72) = v34;
  HIBYTE(v34) = 0;
  LOBYTE(v33[0]) = 0;
  uint64_t v21 = (void **)(v18 + 80);
  if (*(char *)(v18 + 103) < 0) {
    operator delete(*v21);
  }
  *(_OWORD *)uint64_t v21 = *(_OWORD *)__p;
  *(void *)(v18 + 96) = v36;
  HIBYTE(v36) = 0;
  LOBYTE(__p[0]) = 0;
  long long v22 = *(void **)(v18 + 112);
  *(_DWORD *)(v18 + 104) = v37;
  if (v22)
  {
    *(void *)(v18 + 120) = v22;
    operator delete(v22);
    *(void *)(v18 + 112) = 0;
    *(void *)(v18 + 120) = 0;
    *(void *)(v18 + 128) = 0;
    int v23 = SHIBYTE(v36);
    *(_OWORD *)(v18 + 112) = v38;
    uint64_t v24 = v39;
    uint64_t v25 = v40;
    uint64_t v39 = 0;
    long long v38 = 0uLL;
    *(void *)(v18 + 128) = v24;
    *(void *)(v18 + 136) = v25;
    if ((v23 & 0x80000000) == 0)
    {
      if ((SHIBYTE(v34) & 0x80000000) == 0) {
        goto LABEL_17;
      }
LABEL_23:
      operator delete(v33[0]);
      if ((SHIBYTE(v31) & 0x80000000) == 0)
      {
LABEL_18:
        if ((SHIBYTE(v29) & 0x80000000) == 0) {
          return;
        }
LABEL_25:
        operator delete(v28[0]);
        return;
      }
      goto LABEL_24;
    }
    operator delete(__p[0]);
    if (SHIBYTE(v34) < 0) {
      goto LABEL_23;
    }
  }
  else
  {
    *(_OWORD *)(v18 + 112) = v38;
    uint64_t v26 = v39;
    uint64_t v27 = v40;
    uint64_t v39 = 0;
    long long v38 = 0uLL;
    *(void *)(v18 + 128) = v26;
    *(void *)(v18 + 136) = v27;
    if (SHIBYTE(v34) < 0) {
      goto LABEL_23;
    }
  }
LABEL_17:
  if ((SHIBYTE(v31) & 0x80000000) == 0) {
    goto LABEL_18;
  }
LABEL_24:
  operator delete(v30[0]);
  if (SHIBYTE(v29) < 0) {
    goto LABEL_25;
  }
}

void sub_343140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_3208E4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_343154(long long *a1, long long *a2)
{
  if (a1 == a2 || a1 + 9 == a2) {
    return (uint64_t)a2;
  }
  uint64_t v4 = 0;
  while (1)
  {
    uint64_t v14 = (uint64_t)&a1[v4 + 1] + 8;
    uint64_t v15 = (uint64_t)&a1[v4];
    uint64_t v16 = (uint64_t)&a1[v4 + 3] + 8;
    uint64_t v17 = (uint64_t)&a1[v4 + 3];
    uint64_t v18 = (uint64_t)&a1[v4 + 5];
    uint64_t v19 = (_DWORD *)&a1[v4 + 6] + 2;
    uint64_t v8 = (uint64_t)&a1[v4 + 10] + 8;
    uint64_t v9 = (uint64_t)&a1[v4 + 9];
    uint64_t v10 = (uint64_t)&a1[v4 + 12] + 8;
    uint64_t v11 = (uint64_t)&a1[v4 + 12];
    uint64_t v12 = (uint64_t)&a1[v4 + 14];
    uint64_t v13 = (_DWORD *)&a1[v4 + 15] + 2;
    if ((sub_3432E8((uint64_t)&v20, (uint64_t)&v14, (uint64_t)&v8) & 1) != 0 && *v19 == *v13) {
      break;
    }
    v4 += 9;
    if (&a1[v4 + 9] == a2) {
      return (uint64_t)a2;
    }
  }
  uint64_t v5 = (uint64_t)&a1[v4];
  if ((long long *)v5 != a2)
  {
    for (i = (long long *)(v5 + 288); i != a2; i += 9)
    {
      uint64_t v14 = v5 + 24;
      uint64_t v15 = v5;
      uint64_t v16 = v5 + 56;
      uint64_t v17 = v5 + 48;
      uint64_t v18 = v5 + 80;
      uint64_t v19 = (_DWORD *)(v5 + 104);
      uint64_t v8 = (uint64_t)i + 24;
      uint64_t v9 = (uint64_t)i;
      uint64_t v10 = (uint64_t)i + 56;
      uint64_t v11 = (uint64_t)(i + 3);
      uint64_t v12 = (uint64_t)(i + 5);
      uint64_t v13 = (_DWORD *)i + 26;
      if ((sub_3432E8((uint64_t)&v20, (uint64_t)&v14, (uint64_t)&v8) & 1) == 0 || *v19 != *v13)
      {
        v5 += 144;
        sub_342098(v5, i);
      }
    }
    v5 += 144;
  }
  return v5;
}

uint64_t sub_3432E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!sub_343474((uint64_t)&v27, (const void ***)a2, (unsigned __int8 **)a3)) {
    return 0;
  }
  uint64_t v5 = *(unsigned __int8 **)(a2 + 16);
  long long v6 = *(unsigned __int8 ***)(a3 + 16);
  uint64_t v7 = v5[23];
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = (unsigned __int8 *)v5[23];
  }
  else {
    uint64_t v8 = (unsigned __int8 *)*((void *)v5 + 1);
  }
  uint64_t v9 = (unsigned __int8 *)*((unsigned __int8 *)v6 + 23);
  int v10 = (char)v9;
  if ((char)v9 < 0) {
    uint64_t v9 = v6[1];
  }
  if (v8 != v9) {
    return 0;
  }
  if (v10 >= 0) {
    uint64_t v11 = *(unsigned __int8 **)(a3 + 16);
  }
  else {
    uint64_t v11 = *v6;
  }
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v5, v11, *((void *)v5 + 1))) {
      return 0;
    }
  }
  else if (v5[23])
  {
    while (*v5 == *v11)
    {
      ++v5;
      ++v11;
      if (!--v7) {
        goto LABEL_19;
      }
    }
    return 0;
  }
LABEL_19:
  if (**(_DWORD **)(a2 + 24) != **(_DWORD **)(a3 + 24)) {
    return 0;
  }
  uint64_t v13 = *(unsigned __int8 **)(a2 + 32);
  uint64_t v14 = *(unsigned __int8 ***)(a3 + 32);
  uint64_t v15 = v13[23];
  if ((v15 & 0x80u) == 0) {
    uint64_t v16 = (unsigned __int8 *)v13[23];
  }
  else {
    uint64_t v16 = (unsigned __int8 *)*((void *)v13 + 1);
  }
  uint64_t v17 = (unsigned __int8 *)*((unsigned __int8 *)v14 + 23);
  int v18 = (char)v17;
  if ((char)v17 < 0) {
    uint64_t v17 = v14[1];
  }
  if (v16 != v17) {
    return 0;
  }
  if (v18 >= 0) {
    uint64_t v19 = *(unsigned __int8 **)(a3 + 32);
  }
  else {
    uint64_t v19 = *v14;
  }
  if ((v15 & 0x80) != 0) {
    return memcmp(*(const void **)v13, v19, *((void *)v13 + 1)) == 0;
  }
  if (!v13[23]) {
    return 1;
  }
  uint64_t v20 = v15 - 1;
  do
  {
    int v22 = *v13++;
    int v21 = v22;
    int v24 = *v19++;
    int v23 = v24;
    BOOL v26 = v20-- != 0;
    uint64_t result = v21 == v23;
  }
  while (v21 == v23 && v26);
  return result;
}

uint64_t sub_343474(uint64_t a1, const void ***a2, unsigned __int8 **a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v6 = *((unsigned __int8 *)*a2 + 23);
  size_t v7 = (size_t)(*a2)[1];
  if ((v6 & 0x80u) == 0) {
    uint64_t v8 = (const void *)*((unsigned __int8 *)*a2 + 23);
  }
  else {
    uint64_t v8 = (*a2)[1];
  }
  uint64_t v9 = (const void *)v5[23];
  int v10 = (char)v9;
  if ((char)v9 < 0) {
    uint64_t v9 = (const void *)*((void *)v5 + 1);
  }
  if (v8 != v9) {
    return 0;
  }
  if (v10 >= 0) {
    uint64_t v12 = v5;
  }
  else {
    uint64_t v12 = *(unsigned __int8 **)v5;
  }
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*v4, v12, v7)) {
      return 0;
    }
  }
  else if (v6)
  {
    while (*(unsigned __int8 *)v4 == *v12)
    {
      uint64_t v4 = (const void **)((char *)v4 + 1);
      ++v12;
      if (!--v6) {
        goto LABEL_18;
      }
    }
    return 0;
  }
LABEL_18:
  uint64_t v14 = a2[1];
  uint64_t v15 = (unsigned __int8 **)a3[1];
  uint64_t v16 = *((unsigned __int8 *)v14 + 23);
  if ((v16 & 0x80u) == 0) {
    uint64_t v17 = (unsigned __int8 *)*((unsigned __int8 *)v14 + 23);
  }
  else {
    uint64_t v17 = (unsigned __int8 *)v14[1];
  }
  int v18 = (unsigned __int8 *)*((unsigned __int8 *)v15 + 23);
  int v19 = (char)v18;
  if ((char)v18 < 0) {
    int v18 = v15[1];
  }
  if (v17 != v18) {
    return 0;
  }
  if (v19 >= 0) {
    uint64_t v20 = a3[1];
  }
  else {
    uint64_t v20 = *v15;
  }
  if ((v16 & 0x80) != 0) {
    return memcmp(*v14, v20, (size_t)v14[1]) == 0;
  }
  if (!*((unsigned char *)v14 + 23)) {
    return 1;
  }
  uint64_t v21 = v16 - 1;
  do
  {
    int v23 = *(unsigned __int8 *)v14;
    uint64_t v14 = (const void **)((char *)v14 + 1);
    int v22 = v23;
    int v25 = *v20++;
    int v24 = v25;
    BOOL v27 = v21-- != 0;
    uint64_t result = v22 == v24;
  }
  while (v22 == v24 && v27);
  return result;
}

char *sub_3435C8(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 12;
  uint64_t v8 = &(*a1)[12 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 >= v9)
  {
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)v6) >> 2) + 1;
    if (v15 > 0x1555555555555555) {
      sub_2E00();
    }
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v6) >> 2);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v17 = 0x1555555555555555;
    }
    else {
      unint64_t v17 = v15;
    }
    uint64_t v36 = a1 + 2;
    if (v17)
    {
      if (v17 > 0x1555555555555555) {
        sub_188D718();
      }
      int v18 = (char *)operator new(12 * v17);
    }
    else
    {
      int v18 = 0;
    }
    uint64_t v32 = v18;
    uint64_t v33 = &v18[12 * v7];
    __dst = v33;
    uint64_t v35 = &v18[12 * v17];
    sub_32D80((uint64_t)&v32, (uint64_t *)a3);
    uint64_t v20 = v33;
    uint64_t v21 = *a1;
    int v22 = v33;
    if (*a1 != v8)
    {
      int v23 = v8;
      int v22 = v33;
      do
      {
        uint64_t v24 = *(void *)(v23 - 12);
        v23 -= 12;
        int v25 = *((_DWORD *)v23 + 2);
        *(void *)(v22 - 12) = v24;
        v22 -= 12;
        *((_DWORD *)v22 + 2) = v25;
      }
      while (v23 != v21);
    }
    uint64_t v33 = v22;
    BOOL v26 = a1[1];
    BOOL v27 = (char *)__dst;
    int64_t v28 = v26 - v8;
    if (v26 != v8)
    {
      memmove(__dst, v8, v26 - v8);
      int v22 = v33;
      uint64_t v8 = a1[1];
    }
    uint64_t v29 = *a1;
    *a1 = v22;
    a1[1] = &v27[v28];
    int v30 = a1[2];
    a1[2] = v35;
    __dst = v8;
    uint64_t v35 = v30;
    uint64_t v32 = v29;
    uint64_t v33 = v29;
    if (v8 != v29) {
      __dst = &v29[(v8 - v29 - 12) % 0xCuLL];
    }
    if (v29) {
      operator delete(v29);
    }
    return v20;
  }
  else if (v8 == (char *)v5)
  {
    uint64_t v19 = *(void *)a3;
    *((_DWORD *)v8 + 2) = *(_DWORD *)(a3 + 8);
    *(void *)uint64_t v8 = v19;
    a1[1] = v8 + 12;
  }
  else
  {
    int v10 = v8 + 12;
    unint64_t v11 = v5 - 12;
    uint64_t v12 = a1[1];
    if (v5 >= 0xC)
    {
      do
      {
        uint64_t v13 = *(void *)v11;
        *((_DWORD *)v12 + 2) = *(_DWORD *)(v11 + 8);
        *(void *)uint64_t v12 = v13;
        v12 += 12;
        v11 += 12;
      }
      while (v11 < v5);
    }
    a1[1] = v12;
    if ((_DWORD *)v5 != v10) {
      memmove(v8 + 12, v8, v5 - (void)v10);
    }
    uint64_t v14 = *(void *)a3;
    *((_DWORD *)v8 + 2) = *(_DWORD *)(a3 + 8);
    *(void *)uint64_t v8 = v14;
  }
  return v8;
}

void sub_343820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (a12 == a11)
  {
    uint64_t v13 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v13 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

char *sub_34387C(void *a1, char *__src, uint64_t *a3)
{
  uint64_t v4 = __src;
  uint64_t v6 = (char *)a1[1];
  unint64_t v7 = a1[2];
  if ((unint64_t)v6 < v7)
  {
    if (__src == v6)
    {
      *(_OWORD *)__src = *(_OWORD *)a3;
      a1[1] = __src + 16;
    }
    else
    {
      uint64_t v8 = __src + 16;
      unint64_t v9 = v6 - 16;
      int v10 = (_OWORD *)a1[1];
      if ((unint64_t)v6 >= 0x10)
      {
        do
        {
          long long v11 = *(_OWORD *)v9;
          v9 += 16;
          *v10++ = v11;
        }
        while (v9 < v6);
      }
      a1[1] = v10;
      if (v6 != v8) {
        memmove(&v6[-16 * ((v6 - v8) >> 4)], __src, v6 - v8 - 1);
      }
      uint64_t v12 = *a3;
      *(void *)(v4 + 7) = *(uint64_t *)((char *)a3 + 7);
      *(void *)uint64_t v4 = v12;
    }
    return v4;
  }
  uint64_t v13 = (char *)*a1;
  unint64_t v14 = ((uint64_t)&v6[-*a1] >> 4) + 1;
  if (v14 >> 60) {
    sub_2E00();
  }
  uint64_t v15 = v7 - (void)v13;
  if (v15 >> 3 > v14) {
    unint64_t v14 = v15 >> 3;
  }
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v16 = v14;
  }
  if (v16)
  {
    if (v16 >> 60) {
      sub_188D718();
    }
    unint64_t v17 = (char *)operator new(16 * v16);
    uint64_t v18 = v4 - v13;
    uint64_t v19 = (v4 - v13) >> 4;
    uint64_t v20 = &v17[16 * v19];
    uint64_t v21 = &v17[16 * v16];
    if (v19 != v16) {
      goto LABEL_31;
    }
    goto LABEL_20;
  }
  unint64_t v17 = 0;
  uint64_t v18 = __src - v13;
  uint64_t v19 = (__src - v13) >> 4;
  uint64_t v20 = (char *)(16 * v19);
  uint64_t v21 = 0;
  if (!v19)
  {
LABEL_20:
    if (v18 < 1)
    {
      if (v13 == v4) {
        unint64_t v23 = 1;
      }
      else {
        unint64_t v23 = v18 >> 3;
      }
      if (v23 >> 60) {
        sub_188D718();
      }
      uint64_t v24 = (char *)operator new(16 * v23);
      uint64_t v20 = &v24[16 * (v23 >> 2)];
      uint64_t v21 = &v24[16 * v23];
      if (v17)
      {
        operator delete(v17);
        uint64_t v13 = (char *)*a1;
      }
    }
    else
    {
      if (v19 >= -1) {
        unint64_t v22 = v19 + 1;
      }
      else {
        unint64_t v22 = v19 + 2;
      }
      v20 -= 16 * (v22 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)uint64_t v20 = *(_OWORD *)a3;
  int v25 = v20;
  if (v13 != v4)
  {
    BOOL v26 = v4;
    int v25 = v20;
    do
    {
      uint64_t v27 = *((void *)v26 - 2);
      v26 -= 16;
      uint64_t v28 = *(void *)(v26 + 7);
      *((void *)v25-- - 2) = v27;
      *(void *)((char *)v25 + 7) = v28;
    }
    while (v26 != v13);
  }
  uint64_t v29 = (char *)a1[1];
  int64_t v30 = v29 - v4;
  if (v29 != v4) {
    memmove(v20 + 16, v4, v30 - 1);
  }
  uint64_t v31 = (char *)*a1;
  *a1 = v25;
  a1[1] = &v20[v30 + 16];
  a1[2] = v21;
  if (v31) {
    operator delete(v31);
  }
  return v20;
}

void sub_343AA8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_343AC0(void **a1, uint64_t a2)
{
  uint64_t v3 = 0x2C3F35BA781948B1 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x6522C3F35BA781) {
    sub_2E00();
  }
  if (0x587E6B74F0329162 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x587E6B74F0329162 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if ((unint64_t)(0x2C3F35BA781948B1 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)) >= 0x329161F9ADD3C0) {
    unint64_t v6 = 0x6522C3F35BA781;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x6522C3F35BA781) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(648 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v8 = &v7[648 * v6];
  sub_338DCC((uint64_t)&v7[648 * v3], a2);
  int v10 = v9 + 648;
  uint64_t v12 = (char *)*a1;
  long long v11 = (char *)a1[1];
  if (v11 == *a1)
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v8;
    if (!v11) {
      return v10;
    }
    goto LABEL_23;
  }
  do
  {
    v11 -= 648;
    sub_338DCC((uint64_t)(v9 - 648), (uint64_t)v11);
  }
  while (v11 != v12);
  uint64_t v13 = (char *)*a1;
  long long v11 = (char *)a1[1];
  *a1 = v9;
  a1[1] = v10;
  a1[2] = v8;
  if (v11 != v13)
  {
    do
    {
      sub_303198((uint64_t)(v11 - 168));
      uint64_t v14 = *((void *)v11 - 24);
      if (v14)
      {
        uint64_t v15 = *((void *)v11 - 23);
        unint64_t v16 = (void *)*((void *)v11 - 24);
        if (v15 != v14)
        {
          do
            uint64_t v15 = sub_30328C(v15 - 184);
          while (v15 != v14);
          unint64_t v16 = (void *)*((void *)v11 - 24);
        }
        *((void *)v11 - 23) = v14;
        operator delete(v16);
      }
      v11 -= 648;
      sub_29D95C((uint64_t)v11);
    }
    while (v11 != v13);
    long long v11 = v13;
  }
  if (v11) {
LABEL_23:
  }
    operator delete(v11);
  return v10;
}

char *sub_343C64(void **a1, uint64_t a2)
{
  uint64_t v3 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 6;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58) {
    sub_2E00();
  }
  uint64_t v6 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v6 >> 5 > v4) {
    unint64_t v4 = v6 >> 5;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v7 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v7)
  {
    if (v7 >> 58) {
      sub_188D718();
    }
    uint64_t v8 = (char *)operator new(v7 << 6);
  }
  else
  {
    uint64_t v8 = 0;
  }
  unint64_t v9 = &v8[64 * v3];
  *(_OWORD *)unint64_t v9 = *(_OWORD *)a2;
  *((void *)v9 + 2) = *(void *)(a2 + 16);
  int v10 = &v8[64 * v7];
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v9 + 40) = *(_OWORD *)(a2 + 40);
  *((void *)v9 + 7) = *(void *)(a2 + 56);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  long long v11 = v9 + 64;
  uint64_t v12 = (char *)*a1;
  uint64_t v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (!v13) {
      return v11;
    }
    goto LABEL_23;
  }
  do
  {
    long long v14 = *((_OWORD *)v13 - 4);
    *((void *)v9 - 6) = *((void *)v13 - 6);
    *((_OWORD *)v9 - 4) = v14;
    *((void *)v13 - 7) = 0;
    *((void *)v13 - 6) = 0;
    *((void *)v13 - 8) = 0;
    *(_OWORD *)(v9 - 40) = *(_OWORD *)(v13 - 40);
    long long v15 = *(_OWORD *)(v13 - 24);
    *((void *)v9 - 1) = *((void *)v13 - 1);
    *(_OWORD *)(v9 - 24) = v15;
    v9 -= 64;
    *((void *)v13 - 2) = 0;
    *((void *)v13 - 1) = 0;
    *((void *)v13 - 3) = 0;
    v13 -= 64;
  }
  while (v13 != v12);
  unint64_t v16 = (char *)*a1;
  uint64_t v13 = (char *)a1[1];
  *a1 = v9;
  a1[1] = v11;
  a1[2] = v10;
  if (v13 != v16)
  {
    while (1)
    {
      if (*(v13 - 1) < 0)
      {
        operator delete(*((void **)v13 - 3));
        if (*(v13 - 41) < 0) {
LABEL_20:
        }
          operator delete(*((void **)v13 - 8));
      }
      else if (*(v13 - 41) < 0)
      {
        goto LABEL_20;
      }
      v13 -= 64;
      if (v13 == v16)
      {
        uint64_t v13 = v16;
        break;
      }
    }
  }
  if (v13) {
LABEL_23:
  }
    operator delete(v13);
  return v11;
}

char ***sub_343E08(char ***a1, _OWORD *a2)
{
  unint64_t v4 = *a1;
  uint64_t v6 = (*a1)[1];
  unint64_t v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *v4;
    uint64_t v9 = (v6 - *v4) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      sub_2E00();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 60) {
        sub_188D718();
      }
      uint64_t v13 = (char *)operator new(16 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    long long v14 = &v13[16 * v9];
    *(_OWORD *)long long v14 = *a2;
    unint64_t v7 = v14 + 16;
    if (v6 != v8)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v6 - 1);
        v14 -= 16;
        v6 -= 16;
      }
      while (v6 != v8);
      uint64_t v6 = *v4;
    }
    *unint64_t v4 = v14;
    v4[1] = v7;
    v4[2] = &v13[16 * v12];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v6 = *a2;
    unint64_t v7 = v6 + 16;
  }
  v4[1] = v7;
  return a1;
}

char *sub_343F1C(char **a1, char *a2, _OWORD *a3)
{
  uint64_t v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - *a1;
  uint64_t v8 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 < v9)
  {
    if (v8 == (char *)v5)
    {
      *(_OWORD *)uint64_t v8 = *a3;
      a1[1] = v8 + 16;
    }
    else
    {
      unint64_t v10 = v8 + 16;
      uint64_t v11 = (long long *)(v5 - 16);
      unint64_t v12 = a1[1];
      if (v5 >= 0x10)
      {
        do
        {
          long long v13 = *v11++;
          *(_OWORD *)unint64_t v12 = v13;
          v12 += 16;
        }
        while ((unint64_t)v11 < v5);
      }
      a1[1] = v12;
      if ((_OWORD *)v5 != v10) {
        memmove((void *)(v5 - 16 * ((uint64_t)(v5 - (void)v10) >> 4)), v8, v5 - (void)v10);
      }
      *(_OWORD *)uint64_t v8 = *a3;
    }
    return v8;
  }
  unint64_t v14 = ((uint64_t)(v5 - (void)v6) >> 4) + 1;
  if (v14 >> 60) {
    sub_2E00();
  }
  uint64_t v16 = v9 - (void)v6;
  if (v16 >> 3 > v14) {
    unint64_t v14 = v16 >> 3;
  }
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v17 = v14;
  }
  if (v17)
  {
    if (v17 >> 60) {
      sub_188D718();
    }
    uint64_t v18 = (char *)operator new(16 * v17);
    uint64_t v19 = v7 >> 4;
    uint64_t v20 = &v18[16 * (v7 >> 4)];
    uint64_t v21 = &v18[16 * v17];
    if (v7 >> 4 != v17) {
      goto LABEL_31;
    }
    goto LABEL_20;
  }
  uint64_t v18 = 0;
  uint64_t v19 = v7 >> 4;
  uint64_t v20 = (char *)(16 * (v7 >> 4));
  uint64_t v21 = 0;
  if (!(v7 >> 4))
  {
LABEL_20:
    if (v7 < 1)
    {
      if (v6 == a2) {
        unint64_t v23 = 1;
      }
      else {
        unint64_t v23 = v7 >> 3;
      }
      if (v23 >> 60) {
        sub_188D718();
      }
      uint64_t v24 = (char *)operator new(16 * v23);
      uint64_t v20 = &v24[16 * (v23 >> 2)];
      uint64_t v21 = &v24[16 * v23];
      if (v18)
      {
        operator delete(v18);
        uint64_t v6 = *a1;
      }
    }
    else
    {
      if (v19 >= -1) {
        unint64_t v22 = v19 + 1;
      }
      else {
        unint64_t v22 = v19 + 2;
      }
      v20 -= 16 * (v22 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)uint64_t v20 = *a3;
  int v25 = v20;
  if (v6 != v8)
  {
    BOOL v26 = v8;
    uint64_t v27 = v20;
    do
    {
      int v25 = v27 - 16;
      *((_OWORD *)v27 - 1) = *((_OWORD *)v26 - 1);
      v26 -= 16;
      v27 -= 16;
    }
    while (v26 != v6);
  }
  uint64_t v28 = a1[1];
  int64_t v29 = v28 - v8;
  if (v28 != v8) {
    memmove(v20 + 16, v8, v28 - v8);
  }
  int64_t v30 = *a1;
  *a1 = v25;
  a1[1] = &v20[v29 + 16];
  a1[2] = v21;
  if (v30) {
    operator delete(v30);
  }
  return v20;
}

void sub_344150(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_344168(unint64_t a1, long long *a2, uint64_t a3, char a4)
{
void sub_344D58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_34535C(a1, a2, a3, a4);
  if (*(void *)a5 < *(void *)a4
    || *(void *)a4 >= *(void *)a5
    && ((v20 = *(_DWORD *)(a4 + 8), unsigned int v21 = *(_DWORD *)(a5 + 8), v21 < v20)
     || v20 >= v21 && *(_DWORD *)(a5 + 12) < *(_DWORD *)(a4 + 12)))
  {
    long long v10 = *(_OWORD *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)a5 = v10;
    if (*(void *)a4 < *(void *)a3
      || *(void *)a3 >= *(void *)a4
      && ((v11 = *(_DWORD *)(a3 + 8), unsigned int v12 = *(_DWORD *)(a4 + 8), v12 < v11)
       || v11 >= v12 && *(_DWORD *)(a4 + 12) < *(_DWORD *)(a3 + 12)))
    {
      long long v13 = *(_OWORD *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)a4 = v13;
      if (*(void *)a3 < *(void *)a2
        || *(void *)a2 >= *(void *)a3
        && ((unsigned int v14 = *(_DWORD *)(a2 + 8), v15 = *(_DWORD *)(a3 + 8), v15 < v14)
         || v14 >= v15 && *(_DWORD *)(a3 + 12) < *(_DWORD *)(a2 + 12)))
      {
        long long v16 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)a3 = v16;
        if (*(void *)a2 < *(void *)a1
          || *(void *)a1 >= *(void *)a2
          && ((v17 = *(_DWORD *)(a1 + 8), unsigned int v18 = *(_DWORD *)(a2 + 8), v18 < v17)
           || v17 >= v18 && *(_DWORD *)(a2 + 12) < *(_DWORD *)(a1 + 12)))
        {
          long long v19 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)a2 = v19;
        }
      }
    }
  }
}

long long *sub_344EFC(long long *result, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  if (*a2 < *(void *)result
    || *(void *)result >= v3
    && ((unsigned int v16 = *((_DWORD *)result + 2), v17 = *((_DWORD *)a2 + 2), v17 < v16)
     || v16 >= v17 && *((_DWORD *)a2 + 3) < *((_DWORD *)result + 3)))
  {
    if (*(void *)a3 < v3
      || v3 >= *(void *)a3
      && ((v11 = *((_DWORD *)a2 + 2), unsigned int v12 = *((_DWORD *)a3 + 2), v12 < v11)
       || v11 >= v12 && *((_DWORD *)a3 + 3) < *((_DWORD *)a2 + 3)))
    {
      long long v4 = *result;
      *uint64_t result = *a3;
    }
    else
    {
      long long v13 = *result;
      *uint64_t result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v13;
      if (*(void *)a3 >= *a2)
      {
        if (*a2 < *(void *)a3) {
          return result;
        }
        unsigned int v14 = *((_DWORD *)a2 + 2);
        unsigned int v15 = *((_DWORD *)a3 + 2);
        if (v15 >= v14 && (v14 < v15 || *((_DWORD *)a3 + 3) >= *((_DWORD *)a2 + 3))) {
          return result;
        }
      }
      long long v4 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *a3;
    }
    *a3 = v4;
    return result;
  }
  if (*(void *)a3 < v3
    || v3 >= *(void *)a3
    && ((unsigned int v5 = *((_DWORD *)a2 + 2), v6 = *((_DWORD *)a3 + 2), v6 < v5)
     || v5 >= v6 && *((_DWORD *)a3 + 3) < *((_DWORD *)a2 + 3)))
  {
    long long v7 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *a3;
    *a3 = v7;
    if (*a2 < *(void *)result
      || *(void *)result >= *a2
      && ((unsigned int v8 = *((_DWORD *)result + 2), v9 = *((_DWORD *)a2 + 2), v9 < v8)
       || v8 >= v9 && *((_DWORD *)a2 + 3) < *((_DWORD *)result + 3)))
    {
      long long v10 = *result;
      *uint64_t result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v10;
    }
  }
  return result;
}

BOOL sub_34509C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      long long v19 = (long long *)(a2 - 16);
      uint64_t v20 = *(void *)(a2 - 16);
      if (v20 < *(void *)a1
        || *(void *)a1 >= v20
        && ((unsigned int v22 = *(_DWORD *)(a1 + 8), v23 = *(_DWORD *)(a2 - 8), v23 < v22)
         || v22 >= v23 && *(_DWORD *)(a2 - 4) < *(_DWORD *)(a1 + 12)))
      {
        long long v21 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v19;
        long long *v19 = v21;
      }
      return result;
    case 3:
      sub_344EFC((long long *)a1, (uint64_t *)(a1 + 16), (long long *)(a2 - 16));
      return 1;
    case 4:
      sub_34535C(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      sub_344D58(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      uint64_t v6 = a1 + 32;
      sub_344EFC((long long *)a1, (uint64_t *)(a1 + 16), (long long *)(a1 + 32));
      uint64_t v7 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (2)
  {
    uint64_t v11 = *(void *)v7;
    if (*(void *)v7 >= *(void *)v6)
    {
      if (*(void *)v6 < v11) {
        goto LABEL_8;
      }
      unsigned int v18 = *(_DWORD *)(v6 + 8);
      unsigned int v12 = *(_DWORD *)(v7 + 8);
      if (v12 >= v18 && (v18 < v12 || *(_DWORD *)(v7 + 12) >= *(_DWORD *)(v6 + 12))) {
        goto LABEL_8;
      }
    }
    else
    {
      unsigned int v12 = *(_DWORD *)(v7 + 8);
    }
    unsigned int v13 = *(_DWORD *)(v7 + 12);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
    uint64_t v10 = a1;
    if (v6 == a1) {
      goto LABEL_7;
    }
    uint64_t v14 = v8;
    while (1)
    {
      uint64_t v15 = a1 + v14;
      uint64_t v16 = *(void *)(a1 + v14 + 16);
      if (v11 >= v16)
      {
        if (v16 < v11) {
          goto LABEL_25;
        }
        unsigned int v17 = *(_DWORD *)(v15 + 24);
        if (v12 >= v17) {
          break;
        }
      }
LABEL_13:
      v6 -= 16;
      *(_OWORD *)(v15 + 32) = *(_OWORD *)(a1 + v14 + 16);
      v14 -= 16;
      if (v14 == -32)
      {
        uint64_t v10 = a1;
        goto LABEL_7;
      }
    }
    if (v17 >= v12)
    {
      if (v13 >= *(_DWORD *)(v15 + 28))
      {
        uint64_t v10 = a1 + v14 + 32;
        goto LABEL_7;
      }
      goto LABEL_13;
    }
LABEL_25:
    uint64_t v10 = v6;
LABEL_7:
    *(void *)uint64_t v10 = v11;
    *(_DWORD *)(v10 + 8) = v12;
    *(_DWORD *)(v10 + 12) = v13;
    if (++v9 == 8) {
      return v7 + 16 == a2;
    }
LABEL_8:
    uint64_t v6 = v7;
    v8 += 16;
    v7 += 16;
    if (v7 != a2) {
      continue;
    }
    return 1;
  }
}

__n128 sub_34535C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_344EFC((long long *)a1, (uint64_t *)a2, (long long *)a3);
  if (*(void *)a4 < *(void *)a3
    || *(void *)a3 >= *(void *)a4
    && ((unsigned int v9 = *(_DWORD *)(a3 + 8), v10 = *(_DWORD *)(a4 + 8), v10 < v9)
     || v9 >= v10 && *(_DWORD *)(a4 + 12) < *(_DWORD *)(a3 + 12)))
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    if (*(void *)a3 < *(void *)a2
      || *(void *)a2 >= *(void *)a3
      && ((v11 = *(_DWORD *)(a2 + 8), unsigned int v12 = *(_DWORD *)(a3 + 8), v12 < v11)
       || v11 >= v12 && *(_DWORD *)(a3 + 12) < *(_DWORD *)(a2 + 12)))
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*(void *)a2 < *(void *)a1
        || *(void *)a1 >= *(void *)a2
        && ((unsigned int v13 = *(_DWORD *)(a1 + 8), v14 = *(_DWORD *)(a2 + 8), v14 < v13)
         || v13 >= v14 && *(_DWORD *)(a2 + 12) < *(_DWORD *)(a1 + 12)))
      {
        __n128 result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

uint64_t sub_34548C(uint64_t *a1, uint64_t *a2, int *a3, int *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v7 = (a1[1] - *a1) >> 5;
  unint64_t v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v14 = a1[2] - *a1;
  if (v14 >> 4 > v8) {
    unint64_t v8 = v14 >> 4;
  }
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v15 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v15 = v8;
  }
  if (v15)
  {
    if (v15 >> 59) {
      sub_188D718();
    }
    uint64_t v16 = (char *)operator new(32 * v15);
  }
  else
  {
    uint64_t v16 = 0;
  }
  uint64_t v17 = sub_3578E8((uint64_t)&v16[32 * v7], *a2, *a3, *a4, *a5, *a6);
  uint64_t v18 = v17 + 32;
  uint64_t v20 = (char *)*a1;
  long long v19 = (char *)a1[1];
  if (v19 != (char *)*a1)
  {
    do
    {
      long long v21 = *((_OWORD *)v19 - 1);
      *(_OWORD *)(v17 - 32) = *((_OWORD *)v19 - 2);
      *(_OWORD *)(v17 - 16) = v21;
      v17 -= 32;
      v19 -= 32;
    }
    while (v19 != v20);
    long long v19 = (char *)*a1;
  }
  *a1 = v17;
  a1[1] = v18;
  a1[2] = (uint64_t)&v16[32 * v15];
  if (v19) {
    operator delete(v19);
  }
  return v18;
}

void sub_3455AC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_3455C4(uint64_t a1, uint64_t a2, unint64_t __src, char *a4, uint64_t a5)
{
  unint64_t v5 = *(void *)a1;
  uint64_t v6 = a2 - *(void *)a1;
  uint64_t v7 = (char *)(*(void *)a1 + (v6 & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = a5 - 1;
  if (a5 < 1) {
    return v7;
  }
  uint64_t v12 = v6 >> 3;
  uint64_t v14 = *(char **)(a1 + 8);
  uint64_t v13 = *(void *)(a1 + 16);
  if (a5 > (v13 - (uint64_t)v14) >> 3)
  {
    unint64_t v15 = a5 + ((uint64_t)&v14[-v5] >> 3);
    if (v15 >> 61) {
      sub_2E00();
    }
    uint64_t v16 = v13 - v5;
    if (v16 >> 2 > v15) {
      unint64_t v15 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      if (v17 >> 61) {
        sub_188D718();
      }
      uint64_t v18 = (char *)operator new(8 * v17);
      uint64_t v12 = v6 >> 3;
    }
    else
    {
      uint64_t v18 = 0;
    }
    uint64_t v39 = &v18[8 * v12];
    uint64_t v40 = &v39[8 * a5];
    unsigned int v41 = v39;
    BOOL v42 = (uint64_t *)__src;
    if ((v8 & 0x1FFFFFFFFFFFFFFFuLL) < 7) {
      goto LABEL_55;
    }
    unsigned int v41 = &v18[8 * v12];
    BOOL v42 = (uint64_t *)__src;
    if ((unint64_t)&v18[(v6 & 0xFFFFFFFFFFFFFFF8) - __src] < 0x20) {
      goto LABEL_55;
    }
    uint64_t v43 = (v8 & 0x1FFFFFFFFFFFFFFFLL) + 1;
    uint64_t v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
    unsigned int v41 = &v39[v44];
    BOOL v42 = (uint64_t *)(__src + v44);
    uint64_t v45 = (long long *)(__src + 16);
    uint64_t v46 = &v18[8 * v12 + 16];
    uint64_t v47 = v43 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v48 = *v45;
      *((_OWORD *)v46 - 1) = *(v45 - 1);
      *(_OWORD *)uint64_t v46 = v48;
      v45 += 2;
      v46 += 32;
      v47 -= 4;
    }
    while (v47);
    if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_55:
      do
      {
        uint64_t v49 = *v42++;
        *(void *)unsigned int v41 = v49;
        v41 += 8;
      }
      while (v41 != v40);
    }
    uint64_t v50 = *(char **)a1;
    if (*(char **)a1 == v7)
    {
      uint64_t v52 = &v18[8 * v12];
      uint64_t v56 = &v18[8 * v17];
      uint64_t v57 = v14 - v7;
      if (v14 == v7) {
        goto LABEL_39;
      }
    }
    else
    {
      unsigned int v51 = v7;
      uint64_t v52 = &v18[8 * v12];
      do
      {
        int v53 = *((_DWORD *)v51 - 2);
        v51 -= 8;
        int v54 = *(_DWORD *)(v51 + 3);
        *((_DWORD *)v52 - 2) = v53;
        v52 -= 8;
        *(_DWORD *)(v52 + 3) = v54;
      }
      while (v51 != v50);
      uint64_t v55 = *(unsigned char **)(a1 + 8);
      uint64_t v56 = &v18[8 * v17];
      uint64_t v57 = v55 - v7;
      if (v55 == v7) {
        goto LABEL_39;
      }
    }
    memmove(v40, v7, v57 - 1);
LABEL_39:
    unsigned int v58 = *(void **)a1;
    *(void *)a1 = v52;
    *(void *)(a1 + 8) = &v40[v57];
    *(void *)(a1 + 16) = v56;
    if (v58) {
      operator delete(v58);
    }
    return v39;
  }
  uint64_t v19 = (v14 - v7) >> 3;
  if (v19 >= a5)
  {
    uint64_t v20 = (char *)(__src + 8 * a5);
    unsigned int v22 = *(char **)(a1 + 8);
    goto LABEL_18;
  }
  uint64_t v20 = (char *)(__src + 8 * v19);
  int64_t v21 = a4 - v20;
  if (a4 != v20)
  {
    memmove(*(void **)(a1 + 8), (const void *)(__src + 8 * v19), v21 - 1);
    uint64_t v12 = v6 >> 3;
  }
  unsigned int v22 = &v14[v21];
  *(void *)(a1 + 8) = &v14[v21];
  if (v14 - v7 >= 1)
  {
LABEL_18:
    unsigned int v23 = &v7[8 * a5];
    uint64_t v24 = v22 - v23;
    uint64_t v25 = (v22 - v23) >> 3;
    uint64_t v26 = &v22[-8 * a5];
    uint64_t v27 = v22;
    if (v26 < v14)
    {
      uint64_t v28 = (v6 & 0xFFFFFFFFFFFFFFF8) + v24;
      unint64_t v29 = (char *)(v28 + v5);
      unint64_t v30 = v28 + v5 + 8;
      if ((unint64_t)v14 > v30) {
        unint64_t v30 = (unint64_t)v14;
      }
      unint64_t v31 = v30 + ~v5 - v28;
      if (v31 < 0x58)
      {
        uint64_t v27 = v22;
      }
      else
      {
        unint64_t v32 = v22 - v29;
        uint64_t v27 = v22;
        if (v32 >= 0x20)
        {
          uint64_t v33 = (v31 >> 3) + 1;
          uint64_t v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
          v26 += v34;
          uint64_t v27 = &v22[v34];
          unint64_t v35 = v22 + 16;
          uint64_t v36 = (long long *)(8 * v25 + 8 * v12 + v5 + 16);
          uint64_t v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v38 = *v36;
            *(v35 - 1) = *(v36 - 1);
            _OWORD *v35 = v38;
            v35 += 2;
            v36 += 2;
            v37 -= 4;
          }
          while (v37);
          if (v33 == (v33 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_46;
          }
        }
      }
      do
      {
        uint64_t v59 = *(void *)v26;
        v26 += 8;
        *(void *)uint64_t v27 = v59;
        v27 += 8;
      }
      while (v26 < v14);
    }
LABEL_46:
    *(void *)(a1 + 8) = v27;
    if (v22 != v23) {
      memmove(&v22[-8 * v25], v7, v24 - 1);
    }
    if (v20 != (char *)__src) {
      memmove(v7, (const void *)__src, (size_t)&v20[~__src]);
    }
  }
  return v7;
}

uint64_t sub_345904(uint64_t result)
{
  return result;
}

void sub_345920()
{
  unk_25572E7 = 16641;
  word_25572D0 = 65;
  byte_25572FF = 1;
  byte_25572E9 = 0;
}

void *sub_345948()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2557300, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_2557300))
  {
    return &unk_2557338;
  }
  sub_3459D0((uint64_t)&unk_2557338);
  __cxa_guard_release(&qword_2557300);
  return &unk_2557338;
}

void sub_3459B8(_Unwind_Exception *a1)
{
}

uint64_t sub_3459D0(uint64_t a1)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)(a1 + 80) = 850045863;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 136) = 0;
  sub_346058(a1);
  return a1;
}

void sub_345A34(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  std::mutex::~mutex(v3);
  unint64_t v5 = *(void ***)(v1 + 56);
  if (v5) {
    sub_20A7108(v5);
  }
  sub_20A7074((void **)(v1 + 40), v1);
  _Unwind_Resume(a1);
}

uint64_t sub_345A64(uint64_t a1, long long *a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 80);
  std::mutex::lock((std::mutex *)(a1 + 80));
  if (sub_346284((void *)a1, (uint64_t)a2))
  {
    v11[0] = a2;
    unsigned int v5 = *((_DWORD *)sub_3464B4(a1, (uint64_t)a2, (uint64_t)&unk_20F06E0, v11) + 10);
LABEL_12:
    unsigned int v13 = v5;
    goto LABEL_13;
  }
  unint64_t v6 = *(void *)(a1 + 24);
  if (v6 >= 0x20)
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v11);
      sub_188FC78(v11, (uint64_t)"Got more traffic branches than currently supported. Skipping this branch.", 73);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if (v10 < 0) {
        operator delete(__p);
      }
      if (v12 < 0) {
        operator delete(v11[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    unsigned int v5 = -1;
    goto LABEL_12;
  }
  unsigned int v13 = *(void *)(a1 + 24);
  v11[0] = a2;
  *((_DWORD *)sub_3464B4(a1, (uint64_t)a2, (uint64_t)&unk_20F06E0, v11) + 10) = v6;
  v11[0] = (long long *)&v13;
  uint64_t v7 = (std::string *)sub_34692C(a1 + 40, &v13, (uint64_t)&unk_20F06E0, (_DWORD **)v11);
  std::string::operator=(v7 + 1, (const std::string *)a2);
LABEL_13:
  std::mutex::unlock(v4);
  return v13;
}

void sub_345C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    std::mutex::unlock(v16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  std::mutex::unlock(v16);
  _Unwind_Resume(a1);
}

void sub_345CDC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_345CF0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_345D04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 80);
  std::mutex::lock((std::mutex *)(a1 + 80));
  if (sub_346284((void *)a1, a2))
  {
    unsigned int v5 = sub_346284((void *)a1, a2);
    if (!v5) {
      sub_5AE8("unordered_map::at: key not found");
    }
    uint64_t v6 = *((unsigned int *)v5 + 10);
  }
  else
  {
    uint64_t v6 = 0xFFFFFFFFLL;
  }
  std::mutex::unlock(v4);
  return v6;
}

void sub_345D84(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL sub_345D98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 80);
  std::mutex::lock((std::mutex *)(a1 + 80));
  BOOL v5 = sub_346284((void *)a1, a2) != 0;
  std::mutex::unlock(v4);
  return v5;
}

void sub_345DF0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_345E04(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (std::mutex *)(a1 + 80);
  std::mutex::lock((std::mutex *)(a1 + 80));
  if (a2 == -1) {
    goto LABEL_22;
  }
  unint64_t v7 = *(void *)(a1 + 48);
  if (!v7) {
    goto LABEL_22;
  }
  uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v9 = a2;
    if (v7 <= a2) {
      unint64_t v9 = a2 % v7;
    }
  }
  else
  {
    unint64_t v9 = (v7 - 1) & a2;
  }
  uint64_t v10 = *(void *)(a1 + 40);
  unsigned int v11 = *(uint64_t ***)(v10 + 8 * v9);
  if (!v11 || (char v12 = *v11) == 0)
  {
LABEL_22:
    *(unsigned char *)(a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
    goto LABEL_23;
  }
  unint64_t v13 = v7 - 1;
  if (v8.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v14 = v12[1];
      if (v14 == a2)
      {
        if (*((_DWORD *)v12 + 4) == a2) {
          goto LABEL_26;
        }
      }
      else if ((v14 & v13) != v9)
      {
        goto LABEL_22;
      }
      char v12 = (uint64_t *)*v12;
      if (!v12) {
        goto LABEL_22;
      }
    }
  }
  while (1)
  {
    unint64_t v15 = v12[1];
    if (v15 == a2) {
      break;
    }
    if (v15 >= v7) {
      v15 %= v7;
    }
    if (v15 != v9) {
      goto LABEL_22;
    }
LABEL_17:
    char v12 = (uint64_t *)*v12;
    if (!v12) {
      goto LABEL_22;
    }
  }
  if (*((_DWORD *)v12 + 4) != a2) {
    goto LABEL_17;
  }
LABEL_26:
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v17 = a2;
    if (v7 <= a2) {
      unint64_t v17 = a2 % v7;
    }
  }
  else
  {
    unint64_t v17 = (v7 - 1) & a2;
  }
  uint64_t v18 = *(uint64_t ***)(v10 + 8 * v17);
  if (!v18 || (uint64_t v19 = *v18) == 0) {
LABEL_50:
  }
    sub_5AE8("unordered_map::at: key not found");
  if (v8.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v20 = v19[1];
      if (v20 == a2)
      {
        if (*((_DWORD *)v19 + 4) == a2) {
          goto LABEL_38;
        }
      }
      else if ((v20 & v13) != v17)
      {
        goto LABEL_50;
      }
      uint64_t v19 = (uint64_t *)*v19;
      if (!v19) {
        goto LABEL_50;
      }
    }
  }
  while (2)
  {
    unint64_t v22 = v19[1];
    if (v22 != a2)
    {
      if (v22 >= v7) {
        v22 %= v7;
      }
      if (v22 != v17) {
        goto LABEL_50;
      }
      goto LABEL_43;
    }
    if (*((_DWORD *)v19 + 4) != a2)
    {
LABEL_43:
      uint64_t v19 = (uint64_t *)*v19;
      if (!v19) {
        goto LABEL_50;
      }
      continue;
    }
    break;
  }
LABEL_38:
  if (*((char *)v19 + 47) < 0)
  {
    sub_4200((unsigned char *)a3, (void *)v19[3], v19[4]);
LABEL_23:
    uint64_t v16 = v6;
    goto LABEL_25;
  }
  long long v21 = *(_OWORD *)(v19 + 3);
  *(void *)(a3 + 16) = v19[5];
  *(_OWORD *)a3 = v21;
  uint64_t v16 = v6;

LABEL_25:
  std::mutex::unlock(v16);
}

void sub_346044(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_346058(uint64_t a1)
{
  unint64_t v2 = (std::mutex *)(a1 + 80);
  std::mutex::lock((std::mutex *)(a1 + 80));
  if (*(void *)(a1 + 24))
  {
    uint64_t v3 = *(void ***)(a1 + 16);
    if (v3)
    {
      do
      {
        unint64_t v9 = (void **)*v3;
        if (*((char *)v3 + 39) < 0) {
          operator delete(v3[2]);
        }
        operator delete(v3);
        uint64_t v3 = v9;
      }
      while (v9);
    }
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4)
    {
      for (uint64_t i = 0; i != v4; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  if (*(void *)(a1 + 64))
  {
    uint64_t v6 = *(void ***)(a1 + 56);
    if (v6)
    {
      do
      {
        uint64_t v10 = (void **)*v6;
        if (*((char *)v6 + 47) < 0) {
          operator delete(v6[3]);
        }
        operator delete(v6);
        uint64_t v6 = v10;
      }
      while (v10);
    }
    *(void *)(a1 + 56) = 0;
    uint64_t v7 = *(void *)(a1 + 48);
    if (v7)
    {
      for (uint64_t j = 0; j != v7; ++j)
        *(void *)(*(void *)(a1 + 40) + 8 * j) = 0;
    }
    *(void *)(a1 + 64) = 0;
  }
  if (byte_2557337 < 0)
  {
    sub_4200(__p, (void *)xmmword_2557320, *((unint64_t *)&xmmword_2557320 + 1));
  }
  else
  {
    *(_OWORD *)long long __p = xmmword_2557320;
    *(void *)&__p[16] = unk_2557330;
  }
  LODWORD(v12) = 0;
  sub_346C94(a1, (uint64_t)__p, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    *(_DWORD *)long long __p = 0;
    if ((byte_2557337 & 0x80000000) == 0) {
      goto LABEL_24;
    }
  }
  else
  {
    *(_DWORD *)long long __p = 0;
    if ((byte_2557337 & 0x80000000) == 0)
    {
LABEL_24:
      *(_OWORD *)&__p[8] = xmmword_2557320;
      uint64_t v12 = unk_2557330;
      goto LABEL_27;
    }
  }
  sub_4200(&__p[8], (void *)xmmword_2557320, *((unint64_t *)&xmmword_2557320 + 1));
LABEL_27:
  sub_347108(a1 + 40, (unsigned int *)__p, (uint64_t)__p);
  if (SHIBYTE(v12) < 0) {
    operator delete(*(void **)&__p[8]);
  }
  std::mutex::unlock(v2);
}

void sub_346224(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_346238(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_34624C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(v18);
  _Unwind_Resume(a1);
}

uint64_t *sub_346284(void *a1, uint64_t a2)
{
  unint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    unint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        unint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          __n128 result = 0;
          unint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        __n128 result = 0;
        unint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t *sub_3464B4(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_B128((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    char v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          unint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  uint64_t v26 = (char *)operator new(0x30uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  *(void *)uint64_t v26 = 0;
  *((void *)v26 + 1) = v11;
  uint64_t v27 = v26 + 16;
  uint64_t v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_4200(v27, *(void **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    *((void *)v26 + 4) = *((void *)v28 + 2);
    *(_OWORD *)uint64_t v27 = v29;
  }
  *((_DWORD *)v26 + 10) = -1;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        unint64_t v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        uint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        unint64_t v32 = *(void **)(*(void *)a1 + 8 * v11);
        uint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      unint64_t v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      uint64_t v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  unint64_t v32 = *(void **)(*(void *)a1 + 8 * v4);
  uint64_t v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  void *v33 = *v32;
  void *v32 = v45[0];
LABEL_92:
  uint64_t v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_346900(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_346914(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_34692C(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == v7) {
                return v11;
              }
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            unint64_t v11 = (void *)*v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  char v14 = (void *)(a1 + 16);
  unint64_t v11 = operator new(0x30uLL);
  void *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    unint64_t v7 = v4;
  }
  else
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_36;
    }
    if (prime < v8)
    {
      unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        unint64_t v21 = std::__next_prime(v21);
      }
      else
      {
        uint64_t v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2) {
          unint64_t v21 = v23;
        }
      }
      if (prime <= v21) {
        size_t prime = v21;
      }
      if (prime < v8) {
LABEL_36:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        v7 %= v8;
      }
    }
    else
    {
      unint64_t v7 = (v8 - 1) & v7;
    }
  }
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v7);
  if (v25)
  {
    void *v11 = *v25;
LABEL_59:
    *uint64_t v25 = v11;
    goto LABEL_60;
  }
  void *v11 = *v14;
  *char v14 = v11;
  *(void *)(v24 + 8 * v7) = v14;
  if (*v11)
  {
    unint64_t v26 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v26 >= v8) {
        v26 %= v8;
      }
    }
    else
    {
      v26 &= v8 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_346C30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_346C44((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_346C44(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16) && *(char *)(v2 + 47) < 0) {
      operator delete(*(void **)(v2 + 24));
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *sub_346C94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_B128((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      char v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          unint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            char v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          char v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  uint64_t v25 = (char *)operator new(0x30uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *(void *)uint64_t v25 = 0;
  *((void *)v25 + 1) = v10;
  unint64_t v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v26, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)unint64_t v26 = *(_OWORD *)a3;
    *((void *)v25 + 4) = *(void *)(a3 + 16);
  }
  *((_DWORD *)v25 + 10) = *(_DWORD *)(a3 + 24);
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        long long v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        float v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        long long v29 = *(void **)(*(void *)a1 + 8 * v10);
        float v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      long long v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      float v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *float v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  long long v29 = *(void **)(*(void *)a1 + 8 * v3);
  float v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  *float v30 = *v29;
  *long long v29 = v42[0];
LABEL_92:
  char v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_3470DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_3470F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_347108(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = *((void *)v10 + 1);
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == v6) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            unint64_t v10 = *(char **)v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = *((void *)v10 + 1);
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  uint64_t v13 = (void *)(a1 + 16);
  unint64_t v10 = (char *)operator new(0x30uLL);
  *(void *)unint64_t v10 = 0;
  *((void *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *(_DWORD *)a3;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a3 + 8);
  *((void *)v10 + 5) = *(void *)(a3 + 24);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    uint64_t v16 = *(void *)a1;
    unint64_t v17 = *(void **)(*(void *)a1 + 8 * v3);
    if (v17)
    {
LABEL_26:
      *(void *)unint64_t v10 = *v17;
LABEL_61:
      void *v17 = v10;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v18 = 1;
    if (v7 >= 3) {
      BOOL v18 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v7);
    unint64_t v20 = vcvtps_u32_f32(v14 / v15);
    if (v19 <= v20) {
      size_t prime = v20;
    }
    else {
      size_t prime = v19;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v22 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v22) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v22)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v22 < 3uLL || (uint8x8_t v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < *(void *)&v22) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        unint64_t v3 = v6 % v7;
        uint64_t v16 = *(void *)a1;
        unint64_t v17 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        if (v17) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v6;
        uint64_t v16 = *(void *)a1;
        unint64_t v17 = *(void **)(*(void *)a1 + 8 * v6);
        if (v17) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
      uint64_t v16 = *(void *)a1;
      unint64_t v17 = *(void **)(*(void *)a1 + 8 * v3);
      if (v17) {
        goto LABEL_26;
      }
    }
  }
  *(void *)unint64_t v10 = *v13;
  *uint64_t v13 = v10;
  *(void *)(v16 + 8 * v3) = v13;
  if (*(void *)v10)
  {
    unint64_t v26 = *(void *)(*(void *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7) {
        v26 %= v7;
      }
    }
    else
    {
      v26 &= v7 - 1;
    }
    unint64_t v17 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_34743C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_346C44((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_347450()
{
  *(_WORD *)&algn_255730A[21] = 16641;
  word_2557308 = 65;
  byte_2557337 = 1;
  BYTE1(xmmword_2557320) = 0;
}

void sub_347478(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (std::__shared_weak_count *)operator new(0x2D0uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_2438A10;
  sub_328A0C((uint64_t)&v4[1]);
  LOBYTE(v9[0]) = 0;
  memset((char *)v9 + 8, 0, 176);
  *(_OWORD *)((char *)&v9[11] + 4) = 0u;
  memset((char *)&v9[12] + 8, 0, 40);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a2;
    uint64_t v11 = *(void *)(a2 + 16);
  }
  uint64_t v12 = &v4[1].__vftable;
  uint64_t v13 = v4;
  float v14 = 0;
  uint64_t v15 = 0;
  long long __p = 0;
  uint64_t v17 = 0;
  int v18 = 1065353216;
  uint64_t v34 = 0;
  long long v32 = v9[13];
  long long v33 = v9[14];
  long long v30 = v9[11];
  long long v31 = v9[12];
  long long v28 = v9[9];
  long long v29 = v9[10];
  long long v26 = v9[7];
  long long v27 = v9[8];
  long long v24 = v9[5];
  long long v25 = v9[6];
  long long v22 = v9[3];
  long long v23 = v9[4];
  long long v20 = v9[1];
  long long v21 = v9[2];
  long long v19 = v9[0];
  sub_352A7C(a1, (long long *)__dst);
  unint64_t v5 = __p;
  if (__p)
  {
    do
    {
      unint64_t v6 = (void *)*v5;
      operator delete(v5);
      unint64_t v5 = v6;
    }
    while (v6);
  }
  unint64_t v7 = v14;
  float v14 = 0;
  if (v7) {
    operator delete(v7);
  }
  uint8x8_t v8 = v13;
  if (!v13 || atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v11) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_11;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (SHIBYTE(v11) < 0) {
LABEL_11:
  }
    operator delete(__dst[0]);
}

void sub_3476DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_3476F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

void sub_34770C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_347724(uint64_t **a1@<X0>, unsigned int a2@<W1>, uint64_t **a3@<X8>)
{
  unint64_t v6 = (uint64_t *)operator new(0x2D0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *unint64_t v6 = (uint64_t)off_2438A10;
  *a3 = (uint64_t *)sub_328A0C((uint64_t)(v6 + 3));
  a3[1] = v6;
  *((_OWORD *)a3 + 1) = 0u;
  *((_OWORD *)a3 + 2) = 0u;
  *((_DWORD *)a3 + 12) = 1065353216;
  *((unsigned char *)a3 + 56) = 0;
  *((_OWORD *)a3 + 4) = 0u;
  *((_OWORD *)a3 + 5) = 0u;
  *((_OWORD *)a3 + 6) = 0u;
  *((_OWORD *)a3 + 7) = 0u;
  *((_OWORD *)a3 + 8) = 0u;
  *((_OWORD *)a3 + 9) = 0u;
  *((_OWORD *)a3 + 10) = 0u;
  *((_OWORD *)a3 + 11) = 0u;
  *((_OWORD *)a3 + 12) = 0u;
  *((_OWORD *)a3 + 13) = 0u;
  *((_OWORD *)a3 + 14) = 0u;
  *(_OWORD *)((char *)a3 + 236) = 0u;
  *((_OWORD *)a3 + 17) = 0u;
  *((_OWORD *)a3 + 18) = 0u;
  *((_OWORD *)a3 + 16) = 0u;
  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  *((_DWORD *)*a3 + 126) = std::chrono::system_clock::to_time_t(&__t);
  v381 = 0;
  v382 = 0;
  v383 = 0;
  uint8x8_t v8 = a1[7];
  unint64_t v7 = a1[8];
  unint64_t v9 = (char *)v7 - (char *)v8;
  if (v7 == v8)
  {
    v378 = 0;
    v379 = 0;
    v380 = 0;
    v375 = 0;
    v376 = 0;
    v377 = 0;
    v372 = 0;
    v373 = 0;
    v374 = 0;
    v369 = 0;
    v370 = 0;
    v371 = 0;
    v366 = 0;
    v367 = 0;
    v368 = 0;
    v363 = 0;
    v364 = 0;
    v365 = 0;
    long long __p = 0;
    v361 = 0;
    v362 = 0;
  }
  else
  {
    if (v9 >> 61) {
      sub_2E00();
    }
    v381 = operator new(8 * v9);
    v382 = (char *)v381;
    v383 = (char *)v381 + 8 * v9;
    v378 = operator new(8 * v9);
    v379 = (char *)v378;
    v380 = (char *)v378 + 8 * v9;
    v375 = operator new(8 * v9);
    v376 = (char *)v375;
    v377 = (char *)v375 + 8 * v9;
    v372 = operator new(8 * v9);
    v373 = (char *)v372;
    v374 = (char *)v372 + 8 * v9;
    v369 = operator new(8 * v9);
    v370 = (char *)v369;
    v371 = (char *)v369 + 8 * v9;
    v366 = operator new(8 * v9);
    v367 = (char *)v366;
    v368 = (char *)v366 + 8 * v9;
    v363 = operator new(8 * v9);
    v364 = (char *)v363;
    v365 = (char *)v363 + 8 * v9;
    long long __p = operator new(8 * v9);
    v361 = (char *)__p;
    v362 = (char *)__p + 8 * v9;
  }
  unint64_t v10 = (void **)a1[51];
  uint64_t v11 = &v10[41 * (void)a1[9]];
  v345 = a1;
  v346 = v10;
  v347 = v11;
  sub_34A354(&v345);
  uint64_t v12 = (uint64_t)&a1[51][41 * (void)a1[9]];
  v357 = a1;
  v358 = (void **)v12;
  uint64_t v359 = v12;
  sub_34A354(&v357);
  uint64_t v340 = (uint64_t)(a3 + 2);
  uint64_t v341 = a2;
  v343 = a3;
  while (v346 != v358)
  {
    v342 = v346;
    uint64_t v15 = (uint64_t **)(v346 + 3);
    float v14 = (uint64_t *)v346[3];
    uint64_t v16 = *a3;
    int v17 = *((_DWORD *)*a3 + 1);
    *(_DWORD *)uint64_t v16 = *(_DWORD *)*a3 | *(_DWORD *)v14;
    *((_DWORD *)v16 + 1) = v17 | *((_DWORD *)v14 + 1);
    uint64_t v18 = v16[11];
    uint64_t v19 = v14[13];
    uint64_t v20 = v14[14];
    v344 = v15;
    if (v19 != v20)
    {
      uint64_t v21 = (v18 - v16[10]) >> 4;
      long long v22 = (void **)(v16 + 13);
      long long v23 = (_DWORD *)v16[14];
      while (1)
      {
        uint64_t v26 = *(void *)(v19 + 16) + v21;
        unint64_t v27 = v16[15];
        if ((unint64_t)v23 < v27)
        {
          int v24 = *(_DWORD *)(v19 + 8);
          char v25 = *(unsigned char *)(v19 + 24);
          *(void *)long long v23 = *(void *)v19;
          v23[2] = v24;
          *((void *)v23 + 2) = v26;
          *((unsigned char *)v23 + 24) = v25;
          v23 += 8;
        }
        else
        {
          long long v28 = *v22;
          uint64_t v29 = ((char *)v23 - (unsigned char *)*v22) >> 5;
          unint64_t v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 59) {
            sub_2E00();
          }
          uint64_t v31 = v27 - (void)v28;
          if (v31 >> 4 > v30) {
            unint64_t v30 = v31 >> 4;
          }
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v32 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v32 = v30;
          }
          if (v32 >> 59) {
            sub_188D718();
          }
          long long v33 = (char *)operator new(32 * v32);
          uint64_t v34 = &v33[32 * v29];
          int v35 = *(_DWORD *)(v19 + 8);
          char v36 = *(unsigned char *)(v19 + 24);
          *(void *)uint64_t v34 = *(void *)v19;
          *((_DWORD *)v34 + 2) = v35;
          *((void *)v34 + 2) = v26;
          v34[24] = v36;
          if (v23 != v28)
          {
            uint8x8_t v37 = &v33[32 * v29];
            do
            {
              long long v38 = *((_OWORD *)v23 - 2);
              unint64_t v39 = v37 - 32;
              *(_OWORD *)(v37 - 23) = *(_OWORD *)((char *)v23 - 23);
              *((_OWORD *)v37 - 2) = v38;
              v23 -= 8;
              v37 -= 32;
            }
            while (v23 != v28);
            long long v23 = v34 + 32;
            v16[13] = (uint64_t)v39;
            v16[14] = (uint64_t)(v34 + 32);
            v16[15] = (uint64_t)&v33[32 * v32];
            if (!v28) {
              goto LABEL_12;
            }
LABEL_27:
            operator delete(v28);
            goto LABEL_12;
          }
          long long v23 = v34 + 32;
          v16[13] = (uint64_t)v34;
          v16[14] = (uint64_t)(v34 + 32);
          v16[15] = (uint64_t)&v33[32 * v32];
          if (v28) {
            goto LABEL_27;
          }
        }
LABEL_12:
        v16[14] = (uint64_t)v23;
        v19 += 32;
        if (v19 == v20)
        {
          unint64_t v40 = v343;
          uint64_t v15 = v344;
          uint64_t v16 = *v343;
          uint64_t v18 = (*v343)[11];
          float v14 = *v344;
          goto LABEL_30;
        }
      }
    }
    unint64_t v40 = v343;
LABEL_30:
    sub_3DF60((uint64_t)(v16 + 10), v18, (char *)v14[10], (char *)v14[11], (v14[11] - v14[10]) >> 4);
    uint64_t v41 = *v40;
    uint64_t v42 = 0x21CFB2B78C13521DLL * (((*v40)[20] - (*v40)[19]) >> 3);
    char v43 = *v15;
    uint64_t v44 = (*v15)[22];
    uint64_t v45 = (*v15)[23];
    if (v44 == v45) {
      goto LABEL_50;
    }
    char v46 = (void **)(v41 + 22);
    uint64_t v47 = (_DWORD *)v41[23];
    do
    {
      uint64_t v49 = *(void *)(v44 + 16) + v42;
      unint64_t v50 = v41[24];
      if ((unint64_t)v47 < v50)
      {
        int v48 = *(_DWORD *)(v44 + 8);
        *(void *)uint64_t v47 = *(void *)v44;
        v47[2] = v48;
        *((void *)v47 + 2) = v49;
        v47 += 6;
        goto LABEL_33;
      }
      unsigned int v51 = *v46;
      unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * (((char *)v47 - (unsigned char *)*v46) >> 3);
      unint64_t v53 = v52 + 1;
      if (v52 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_2E00();
      }
      unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - (void)v51) >> 3);
      if (2 * v54 > v53) {
        unint64_t v53 = 2 * v54;
      }
      if (v54 >= 0x555555555555555) {
        unint64_t v55 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v55 = v53;
      }
      if (v55 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      uint64_t v56 = (char *)operator new(24 * v55);
      int v57 = *(_DWORD *)(v44 + 8);
      unsigned int v58 = &v56[24 * v52];
      *(void *)unsigned int v58 = *(void *)v44;
      *((_DWORD *)v58 + 2) = v57;
      *((void *)v58 + 2) = v49;
      if (v47 == v51)
      {
        uint64_t v47 = v58 + 24;
        v41[22] = (uint64_t)v58;
        v41[23] = (uint64_t)(v58 + 24);
        v41[24] = (uint64_t)&v56[24 * v55];
        if (!v51) {
          goto LABEL_33;
        }
LABEL_48:
        operator delete(v51);
        goto LABEL_33;
      }
      uint64_t v59 = &v56[24 * v52];
      do
      {
        long long v60 = *(_OWORD *)(v47 - 6);
        uint64_t v61 = (uint64_t)(v59 - 24);
        *((void *)v59 - 1) = *((void *)v47 - 1);
        *(_OWORD *)(v59 - 24) = v60;
        v47 -= 6;
        v59 -= 24;
      }
      while (v47 != v51);
      uint64_t v47 = v58 + 24;
      v41[22] = v61;
      v41[23] = (uint64_t)(v58 + 24);
      v41[24] = (uint64_t)&v56[24 * v55];
      if (v51) {
        goto LABEL_48;
      }
LABEL_33:
      v41[23] = (uint64_t)v47;
      v44 += 24;
    }
    while (v44 != v45);
    uint64_t v15 = v344;
    uint64_t v41 = *v343;
    char v43 = *v344;
LABEL_50:
    uint64_t v62 = v43[25];
    uint64_t v63 = v43[26];
    if (v62 != v63)
    {
      int v64 = (void **)(v41 + 25);
      BOOL v65 = (_DWORD *)v41[26];
      while (1)
      {
        uint64_t v68 = *(void *)(v62 + 24) + v42;
        unint64_t v69 = v41[27];
        if ((unint64_t)v65 < v69)
        {
          int v66 = *(_DWORD *)(v62 + 16);
          __int16 v67 = *(_WORD *)(v62 + 32);
          *(_OWORD *)BOOL v65 = *(_OWORD *)v62;
          v65[4] = v66;
          *((void *)v65 + 3) = v68;
          *((_WORD *)v65 + 16) = v67;
          v65 += 10;
        }
        else
        {
          int v70 = *v64;
          unint64_t v71 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v65 - (unsigned char *)*v64) >> 3);
          unint64_t v72 = v71 + 1;
          if (v71 + 1 > 0x666666666666666) {
            sub_2E00();
          }
          unint64_t v73 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v69 - (void)v70) >> 3);
          if (2 * v73 > v72) {
            unint64_t v72 = 2 * v73;
          }
          if (v73 >= 0x333333333333333) {
            unint64_t v74 = 0x666666666666666;
          }
          else {
            unint64_t v74 = v72;
          }
          if (v74 > 0x666666666666666) {
            sub_188D718();
          }
          uint64_t v75 = (char *)operator new(40 * v74);
          int v76 = &v75[40 * v71];
          int v77 = *(_DWORD *)(v62 + 16);
          __int16 v78 = *(_WORD *)(v62 + 32);
          *(_OWORD *)int v76 = *(_OWORD *)v62;
          *((_DWORD *)v76 + 4) = v77;
          *((void *)v76 + 3) = v68;
          *((_WORD *)v76 + 16) = v78;
          if (v65 != v70)
          {
            int64_t v79 = &v75[40 * v71];
            do
            {
              long long v80 = *(_OWORD *)(v65 - 10);
              long long v81 = *(_OWORD *)(v65 - 6);
              uint64_t v82 = (uint64_t)(v79 - 40);
              *((_WORD *)v79 - 4) = *((_WORD *)v65 - 4);
              *(_OWORD *)(v79 - 24) = v81;
              *(_OWORD *)(v79 - 40) = v80;
              v65 -= 10;
              v79 -= 40;
            }
            while (v65 != v70);
            BOOL v65 = v76 + 40;
            v41[25] = v82;
            v41[26] = (uint64_t)(v76 + 40);
            v41[27] = (uint64_t)&v75[40 * v74];
            if (!v70) {
              goto LABEL_53;
            }
LABEL_68:
            operator delete(v70);
            goto LABEL_53;
          }
          BOOL v65 = v76 + 40;
          v41[25] = (uint64_t)v76;
          v41[26] = (uint64_t)(v76 + 40);
          v41[27] = (uint64_t)&v75[40 * v74];
          if (v70) {
            goto LABEL_68;
          }
        }
LABEL_53:
        v41[26] = (uint64_t)v65;
        v62 += 40;
        if (v62 == v63)
        {
          uint64_t v83 = v343;
          uint64_t v15 = v344;
          uint64_t v41 = *v343;
          char v43 = *v344;
          goto LABEL_71;
        }
      }
    }
    uint64_t v83 = v343;
LABEL_71:
    uint64_t v85 = v41[19];
    uint64_t v84 = v41[20];
    unint64_t v356 = 0x21CFB2B78C13521DLL * ((v84 - v85) >> 3);
    unint64_t v86 = 0x21CFB2B78C13521DLL * ((v43[20] - v43[19]) >> 3);
    if (v356 >= v86 + v356)
    {
      if (v356 > v86 + v356)
      {
        for (i = v85 + 424 * (v86 + v356); v84 != i; uint64_t v84 = sub_29D95C(v84 - 424))
          ;
        v41[20] = i;
      }
    }
    else
    {
      sub_34A49C(v41 + 19, v86);
    }
    uint64_t v88 = sub_2E0C4();
    uint64_t v89 = 0x21CFB2B78C13521DLL * (((*v15)[20] - (*v15)[19]) >> 3);
    v355[0] = v83;
    v355[1] = &v356;
    v355[2] = v15;
    v384[0] = &v385;
    v384[1] = v355;
    uint64_t v385 = v89;
    sub_34A830((uint64_t)&__t, (uint64_t)v88, v341, (uint64_t)v384);
    sub_31A008((uint64_t)&__t);
    sub_34C17C(*v83 + 28, (*v83)[29], (*v15)[28], (*v15)[29], 0x2C3F35BA781948B1 * (((*v15)[29] - (*v15)[28]) >> 3));
    sub_46C6C((uint64_t)(*v83 + 31), (*v83)[32], (char *)(*v15)[31], (char *)(*v15)[32], 0xAAAAAAAAAAAAAAABLL * (((*v15)[32] - (*v15)[31]) >> 2));
    BOOL v90 = *v15;
    unsigned int v91 = *v83;
    unsigned int v92 = (_OWORD *)(*v15)[34];
    unsigned int v93 = (_OWORD *)(*v15)[35];
    if (v92 == v93)
    {
      unsigned int v108 = v343;
      goto LABEL_99;
    }
    uint64_t v94 = (void **)(v91 + 34);
    uint64_t v95 = (void *)v91[35];
    while (2)
    {
      unint64_t v97 = v91[36];
      if ((unint64_t)v95 < v97)
      {
        *(_OWORD *)uint64_t v95 = *v92;
        uint64_t v96 = v95 + 2;
        goto LABEL_80;
      }
      unsigned int v98 = *v94;
      uint64_t v99 = ((char *)v95 - (unsigned char *)*v94) >> 4;
      unint64_t v100 = v99 + 1;
      if ((unint64_t)(v99 + 1) >> 60) {
        sub_2E00();
      }
      uint64_t v101 = v97 - (void)v98;
      if (v101 >> 3 > v100) {
        unint64_t v100 = v101 >> 3;
      }
      if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v102 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v102 = v100;
      }
      if (!v102)
      {
        unint64_t v103 = 0;
        v104 = (char *)(16 * v99);
        *(_OWORD *)(16 * v99) = *v92;
        uint64_t v105 = 16 * v99;
        if (v95 == v98) {
          goto LABEL_95;
        }
        do
        {
LABEL_93:
          uint64_t v106 = *(v95 - 2);
          v95 -= 2;
          uint64_t v107 = *(void *)((char *)v95 + 7);
          *(void *)(v105 - 16) = v106;
          v105 -= 16;
          *(void *)(v105 + 7) = v107;
        }
        while (v95 != v98);
        uint64_t v95 = *v94;
        goto LABEL_95;
      }
      if (v102 >> 60) {
        sub_188D718();
      }
      unint64_t v103 = (char *)operator new(16 * v102);
      v104 = &v103[16 * v99];
      *(_OWORD *)v104 = *v92;
      uint64_t v105 = (uint64_t)v104;
      if (v95 != v98) {
        goto LABEL_93;
      }
LABEL_95:
      uint64_t v96 = v104 + 16;
      v91[34] = v105;
      v91[35] = (uint64_t)(v104 + 16);
      v91[36] = (uint64_t)&v103[16 * v102];
      if (v95) {
        operator delete(v95);
      }
LABEL_80:
      v91[35] = (uint64_t)v96;
      ++v92;
      uint64_t v95 = v96;
      if (v92 != v93) {
        continue;
      }
      break;
    }
    unsigned int v108 = v343;
    uint64_t v15 = v344;
    unsigned int v91 = *v343;
    BOOL v90 = *v344;
LABEL_99:
    sub_34E094((char **)v91 + 37, v91[38], v90[37], (long long *)v90[38], (v90[38] - v90[37]) >> 6);
    unsigned int v109 = *v15;
    if (*((_DWORD *)*v15 + 80) != 0x7FFFFFFF
      && *((_DWORD *)v109 + 81) != 0x7FFFFFFF
      && *((_DWORD *)v109 + 82) != 0x7FFFFFFF)
    {
      if (*((_DWORD *)v109 + 83))
      {
        uint64_t v110 = v109[42];
        uint64_t v111 = v109[43];
        if (v110 != v111 && v109[46] - v109[45] >= (unint64_t)((v111 - v110) >> 3))
        {
          unint64_t v112 = *v108;
          *((_OWORD *)v112 + 20) = *((_OWORD *)v109 + 20);
          if (v112 != v109)
          {
            sub_326C0(v112 + 42, (char *)v109[42], (char *)v109[43], (v109[43] - v109[42]) >> 3);
            sub_34E73C(v112 + 45, (char *)v109[45], (char *)v109[46], v109[46] - v109[45]);
          }
        }
      }
    }
    unint64_t v113 = *v15;
    if ((*v15)[54] != (*v15)[55] || v113[48] != v113[49] || v113[51] != v113[52])
    {
      uint64_t v114 = *v108;
      if (*v108 != v113)
      {
        sub_34E888(v114 + 48, v113[48], v113[49], 0xCCCCCCCCCCCCCCCDLL * ((v113[49] - v113[48]) >> 3));
        sub_34E888(v114 + 51, v113[51], v113[52], 0xCCCCCCCCCCCCCCCDLL * ((v113[52] - v113[51]) >> 3));
        sub_34E888(v114 + 54, v113[54], v113[55], 0xCCCCCCCCCCCCCCCDLL * ((v113[55] - v113[54]) >> 3));
        unint64_t v113 = *v15;
      }
    }
    uint64_t v115 = v113[60];
    uint64_t v116 = v113[61];
    if (v115 != v116)
    {
      unint64_t v117 = *v108;
      uint64_t v118 = 0x6F96F96F96F96F97 * ((v117[58] - v117[57]) >> 3);
      unsigned int v119 = (void **)(v117 + 60);
      unsigned int v120 = (void *)v117[61];
      while (1)
      {
        uint64_t v123 = *(void *)(v115 + 16) + v118;
        unint64_t v124 = v117[62];
        if ((unint64_t)v120 < v124)
        {
          int v121 = *(_DWORD *)(v115 + 8);
          *unsigned int v120 = *(void *)v115;
          v120[2] = v123;
          uint64_t v122 = *(void *)(v115 + 24);
          *((_DWORD *)v120 + 2) = v121;
          v120[3] = v122;
          v120 += 4;
        }
        else
        {
          unsigned int v125 = *v119;
          uint64_t v126 = ((char *)v120 - (unsigned char *)*v119) >> 5;
          unint64_t v127 = v126 + 1;
          if ((unint64_t)(v126 + 1) >> 59) {
            sub_2E00();
          }
          uint64_t v128 = v124 - (void)v125;
          if (v128 >> 4 > v127) {
            unint64_t v127 = v128 >> 4;
          }
          if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v129 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v129 = v127;
          }
          if (v129 >> 59) {
            sub_188D718();
          }
          long long v130 = (char *)operator new(32 * v129);
          long long v131 = &v130[32 * v126];
          int v132 = *(_DWORD *)(v115 + 8);
          *(void *)long long v131 = *(void *)v115;
          *((void *)v131 + 2) = v123;
          uint64_t v133 = *(void *)(v115 + 24);
          *((_DWORD *)v131 + 2) = v132;
          *((void *)v131 + 3) = v133;
          if (v120 != v125)
          {
            v134 = &v130[32 * v126];
            do
            {
              long long v135 = *((_OWORD *)v120 - 1);
              v136 = v134 - 32;
              *((_OWORD *)v134 - 2) = *((_OWORD *)v120 - 2);
              *((_OWORD *)v134 - 1) = v135;
              v120 -= 4;
              v134 -= 32;
            }
            while (v120 != v125);
            unsigned int v120 = v131 + 32;
            v117[60] = (uint64_t)v136;
            v117[61] = (uint64_t)(v131 + 32);
            v117[62] = (uint64_t)&v130[32 * v129];
            if (!v125) {
              goto LABEL_115;
            }
LABEL_130:
            operator delete(v125);
            goto LABEL_115;
          }
          unsigned int v120 = v131 + 32;
          v117[60] = (uint64_t)v131;
          v117[61] = (uint64_t)(v131 + 32);
          v117[62] = (uint64_t)&v130[32 * v129];
          if (v125) {
            goto LABEL_130;
          }
        }
LABEL_115:
        v117[61] = (uint64_t)v120;
        v115 += 32;
        if (v115 == v116)
        {
          unsigned int v108 = v343;
          unint64_t v113 = *v344;
          break;
        }
      }
    }
    v137 = (long long *)v113[57];
    for (uint64_t j = (long long *)v113[58]; v137 != j; v137 = (long long *)((char *)v137 + 312))
    {
      v159 = *v108;
      unint64_t v161 = (*v108)[58];
      unint64_t v160 = (*v108)[59];
      if (v161 >= v160)
      {
        uint64_t v163 = v159[57];
        uint64_t v164 = 0x6F96F96F96F96F97 * ((uint64_t)(v161 - v163) >> 3);
        unint64_t v165 = v164 + 1;
        if ((unint64_t)(v164 + 1) > 0xD20D20D20D20D2) {
          sub_2E00();
        }
        unint64_t v166 = 0x6F96F96F96F96F97 * ((uint64_t)(v160 - v163) >> 3);
        if (2 * v166 > v165) {
          unint64_t v165 = 2 * v166;
        }
        if (v166 >= 0x69069069069069) {
          unint64_t v167 = 0xD20D20D20D20D2;
        }
        else {
          unint64_t v167 = v165;
        }
        v390 = v159 + 59;
        if (v167)
        {
          if (v167 > 0xD20D20D20D20D2) {
            sub_188D718();
          }
          v168 = (char *)operator new(312 * v167);
        }
        else
        {
          v168 = 0;
        }
        __t.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v168;
        v387 = &v168[312 * v164];
        v388 = v387;
        v389 = &v168[312 * v167];
        sub_34EFA0(v387, v137);
        v169 = v387;
        v162 = v388 + 312;
        v170 = (char *)v159[57];
        v171 = (char *)v159[58];
        if (v171 != v170)
        {
          unint64_t v172 = 0;
          do
          {
            v173 = &v169[v172];
            v174 = &v171[v172];
            uint64_t v175 = (uint64_t)&v171[v172 - 312];
            uint64_t v176 = (uint64_t)&v169[v172 - 312];
            long long v177 = *(_OWORD *)v175;
            *(void *)(v176 + 16) = *(void *)&v171[v172 - 296];
            *(_OWORD *)uint64_t v176 = v177;
            *(void *)(v175 + 8) = 0;
            *(void *)(v175 + 16) = 0;
            *(void *)uint64_t v175 = 0;
            v178 = &v169[v172 - 288];
            uint64_t v179 = (uint64_t)&v171[v172 - 288];
            *(void *)&v169[v172 - 280] = 0;
            *(void *)v178 = 0;
            *((void *)v178 + 2) = 0;
            *(_OWORD *)v178 = *(_OWORD *)v179;
            *(void *)&v169[v172 - 272] = *(void *)&v171[v172 - 272];
            *(void *)&v171[v172 - 280] = 0;
            *(void *)uint64_t v179 = 0;
            v180 = &v169[v172 - 264];
            *(void *)(v179 + 16) = 0;
            v181 = &v171[v172 - 264];
            *(void *)v180 = 0;
            *((void *)v173 - 32) = 0;
            *((void *)v173 - 31) = 0;
            *(_OWORD *)v180 = *(_OWORD *)v181;
            *((void *)v173 - 31) = *(void *)&v171[v172 - 248];
            *(void *)v181 = 0;
            *((void *)v174 - 32) = 0;
            *((void *)v174 - 31) = 0;
            *((void *)v173 - 30) = 0;
            *((void *)v173 - 29) = 0;
            *((void *)v173 - 28) = 0;
            *((_OWORD *)v173 - 15) = *(_OWORD *)&v171[v172 - 240];
            *((void *)v173 - 28) = *(void *)&v171[v172 - 224];
            *((void *)v174 - 30) = 0;
            *((void *)v174 - 29) = 0;
            *((void *)v174 - 28) = 0;
            *((void *)v173 - 27) = 0;
            *((void *)v173 - 26) = 0;
            *((void *)v173 - 25) = 0;
            *(_OWORD *)(v173 - 216) = *(_OWORD *)&v171[v172 - 216];
            *((void *)v173 - 25) = *(void *)&v171[v172 - 200];
            *((void *)v174 - 27) = 0;
            *((void *)v174 - 26) = 0;
            *((void *)v174 - 25) = 0;
            *((void *)v173 - 24) = 0;
            *((void *)v173 - 23) = 0;
            *((void *)v173 - 22) = 0;
            *((_OWORD *)v173 - 12) = *(_OWORD *)&v171[v172 - 192];
            *((void *)v173 - 22) = *(void *)&v171[v172 - 176];
            *((void *)v174 - 24) = 0;
            *((void *)v174 - 23) = 0;
            *((void *)v174 - 22) = 0;
            *((void *)v173 - 21) = 0;
            *((void *)v173 - 20) = 0;
            *((void *)v173 - 19) = 0;
            *(_OWORD *)(v173 - 168) = *(_OWORD *)&v171[v172 - 168];
            *((void *)v173 - 19) = *(void *)&v171[v172 - 152];
            *((void *)v174 - 21) = 0;
            *((void *)v174 - 20) = 0;
            *((void *)v174 - 19) = 0;
            *((void *)v173 - 18) = 0;
            *((void *)v173 - 17) = 0;
            *((void *)v173 - 16) = 0;
            *((_OWORD *)v173 - 9) = *(_OWORD *)&v171[v172 - 144];
            *((void *)v173 - 16) = *(void *)&v171[v172 - 128];
            *((void *)v174 - 18) = 0;
            *((void *)v174 - 17) = 0;
            *((void *)v174 - 16) = 0;
            *((void *)v173 - 15) = 0;
            *((void *)v173 - 14) = 0;
            *((void *)v173 - 13) = 0;
            *(_OWORD *)(v173 - 120) = *(_OWORD *)&v171[v172 - 120];
            *((void *)v173 - 13) = *(void *)&v171[v172 - 104];
            *((void *)v174 - 15) = 0;
            *((void *)v174 - 14) = 0;
            *((void *)v174 - 13) = 0;
            *((void *)v173 - 12) = 0;
            *((void *)v173 - 11) = 0;
            *((void *)v173 - 10) = 0;
            *((_OWORD *)v173 - 6) = *(_OWORD *)&v171[v172 - 96];
            *((void *)v173 - 10) = *(void *)&v171[v172 - 80];
            *((void *)v174 - 12) = 0;
            *((void *)v174 - 11) = 0;
            *((void *)v174 - 10) = 0;
            *((void *)v173 - 9) = 0;
            *((void *)v173 - 8) = 0;
            *((void *)v173 - 7) = 0;
            *(_OWORD *)(v173 - 72) = *(_OWORD *)&v171[v172 - 72];
            *((void *)v173 - 7) = *(void *)&v171[v172 - 56];
            *((void *)v174 - 9) = 0;
            *((void *)v174 - 8) = 0;
            *((void *)v174 - 7) = 0;
            *((void *)v173 - 6) = 0;
            *((void *)v173 - 5) = 0;
            *((void *)v173 - 4) = 0;
            *((_OWORD *)v173 - 3) = *(_OWORD *)&v171[v172 - 48];
            *((void *)v173 - 4) = *(void *)&v171[v172 - 32];
            *((void *)v174 - 6) = 0;
            *((void *)v174 - 5) = 0;
            *((void *)v174 - 4) = 0;
            *((void *)v173 - 3) = 0;
            *((void *)v173 - 2) = 0;
            *((void *)v173 - 1) = 0;
            *(_OWORD *)(v173 - 24) = *(_OWORD *)&v171[v172 - 24];
            *((void *)v173 - 1) = *(void *)&v171[v172 - 8];
            *((void *)v174 - 3) = 0;
            *((void *)v174 - 2) = 0;
            *((void *)v174 - 1) = 0;
            v172 -= 312;
          }
          while (&v171[v172] != v170);
          v171 = (char *)v159[57];
          uint64_t v182 = v159[58];
          v159[57] = (uint64_t)&v169[v172];
          v159[58] = (uint64_t)v162;
          for (v159[59] = (uint64_t)v389; (char *)v182 != v171; uint64_t v182 = sub_2F6914(v182 - 312))
            ;
          if (!v171) {
            goto LABEL_149;
          }
LABEL_170:
          operator delete(v171);
          goto LABEL_149;
        }
        v159[57] = (uint64_t)v387;
        v159[58] = (uint64_t)v162;
        v159[59] = (uint64_t)v389;
        if (v171) {
          goto LABEL_170;
        }
      }
      else
      {
        sub_34EFA0((void *)(*v108)[58], v137);
        v162 = (void *)(v161 + 312);
        v159[58] = v161 + 312;
      }
LABEL_149:
      v159[58] = (uint64_t)v162;
    }
    v139 = *v108;
    int v140 = *((_DWORD *)*v108 + 127);
    v141 = *v344;
    if (*((_DWORD *)*v344 + 127) >= v140) {
      int v142 = *((_DWORD *)*v108 + 127);
    }
    else {
      int v142 = *((_DWORD *)*v344 + 127);
    }
    if (v140 == 0x7FFFFFFF) {
      int v143 = *((_DWORD *)*v344 + 127);
    }
    else {
      int v143 = v142;
    }
    *((_DWORD *)v139 + 127) = v143;
    int v144 = *((_DWORD *)v139 + 128);
    if (v144 <= *((_DWORD *)v141 + 128)) {
      int v145 = *((_DWORD *)v141 + 128);
    }
    else {
      int v145 = *((_DWORD *)v139 + 128);
    }
    if (v144 == 0x7FFFFFFF) {
      int v146 = *((_DWORD *)v141 + 128);
    }
    else {
      int v146 = v145;
    }
    *((_DWORD *)v139 + 128) = v146;
    sub_34F42C((uint64_t)(v139 + 71), v139[72], (std::string *)v141[71], (std::string *)v141[72], 0x8E38E38E38E38E39 * ((v141[72] - v141[71]) >> 4));
    std::string::operator=((std::string *)(*v108 + 65), (const std::string *)(*v344 + 65));
    std::string::operator=((std::string *)(*v108 + 68), (const std::string *)(*v344 + 68));
    for (k = (char *)v342[7]; k; k = *(char **)k)
    {
      __t.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)(k + 16);
      v148 = sub_32A014(v340, (unsigned int *)k + 4, (uint64_t)&unk_20F06E0, &__t);
      int32x4_t v149 = *(int32x4_t *)(k + 24);
      int32x4_t v150 = *(int32x4_t *)(v148 + 24);
      unsigned __int32 v151 = vorrq_s8((int8x16_t)v150, (int8x16_t)v149).u32[0];
      int32x4_t v152 = vaddq_s32(v150, v149);
      v152.i32[0] = v151;
      *(int32x4_t *)(v148 + 24) = v152;
      *(int32x4_t *)(v148 + 40) = vaddq_s32(*(int32x4_t *)(v148 + 40), *(int32x4_t *)(k + 40));
      *(int32x4_t *)(v148 + 56) = vaddq_s32(*(int32x4_t *)(v148 + 56), *(int32x4_t *)(k + 56));
      *((int32x2_t *)v148 + 11) = vadd_s32(*(int32x2_t *)(v148 + 88), *(int32x2_t *)(k + 88));
      *(int32x4_t *)(v148 + 72) = vaddq_s32(*(int32x4_t *)(v148 + 72), *(int32x4_t *)(k + 72));
      int32x4_t v153 = *((int32x4_t *)v148 + 7);
      *((int32x4_t *)v148 + 6) = vaddq_s32(*((int32x4_t *)v148 + 6), *((int32x4_t *)k + 6));
      *((int32x4_t *)v148 + 7) = vaddq_s32(v153, *((int32x4_t *)k + 7));
      int32x4_t v154 = *((int32x4_t *)v148 + 9);
      *((int32x4_t *)v148 + 8) = vaddq_s32(*((int32x4_t *)v148 + 8), *((int32x4_t *)k + 8));
      *((int32x4_t *)v148 + 9) = vaddq_s32(v154, *((int32x4_t *)k + 9));
      int32x4_t v155 = *((int32x4_t *)v148 + 11);
      *((int32x4_t *)v148 + 10) = vaddq_s32(*((int32x4_t *)v148 + 10), *((int32x4_t *)k + 10));
      *((int32x4_t *)v148 + 11) = vaddq_s32(v155, *((int32x4_t *)k + 11));
      *((int32x2_t *)v148 + 24) = vadd_s32(*(int32x2_t *)(v148 + 192), *(int32x2_t *)(k + 192));
      *((void *)v148 + 25) += *((void *)k + 25);
      *((_DWORD *)v148 + 52) += *((_DWORD *)k + 52);
      v155.i64[0] = *((void *)v148 + 30);
      *((int32x2_t *)v148 + 31) = vadd_s32(*(int32x2_t *)(v148 + 248), *(int32x2_t *)(k + 248));
      *((void *)v148 + 32) += *((void *)k + 32);
      *((void *)v148 + 27) += *((void *)k + 27);
      *((int32x4_t *)v148 + 14) = vaddq_s32(*((int32x4_t *)v148 + 14), *((int32x4_t *)k + 14));
      *((int32x2_t *)v148 + 30) = vadd_s32(*(int32x2_t *)v155.i8, *(int32x2_t *)(k + 240));
    }
    uint64_t v156 = (*v344)[1];
    v157 = v382;
    if (v382 < v383)
    {
      *(void *)v382 = v156;
      uint64_t v158 = (uint64_t)(v157 + 8);
      goto LABEL_182;
    }
    v183 = v381;
    int64_t v184 = v382 - (unsigned char *)v381;
    uint64_t v185 = (v382 - (unsigned char *)v381) >> 3;
    unint64_t v186 = v185 + 1;
    if ((unint64_t)(v185 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v187 = v383 - (unsigned char *)v381;
    if ((v383 - (unsigned char *)v381) >> 2 > v186) {
      unint64_t v186 = v187 >> 2;
    }
    if ((unint64_t)v187 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v188 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v188 = v186;
    }
    if (v188)
    {
      if (v188 >> 61) {
        sub_188D718();
      }
      v189 = operator new(8 * v188);
      v190 = (uint64_t *)&v189[8 * v185];
      uint64_t *v190 = v156;
      uint64_t v158 = (uint64_t)(v190 + 1);
      if (v157 == v183)
      {
LABEL_180:
        v381 = v190;
        v382 = (char *)v158;
        v383 = &v189[8 * v188];
        if (v157) {
          goto LABEL_181;
        }
        goto LABEL_182;
      }
    }
    else
    {
      v189 = 0;
      v190 = (uint64_t *)(8 * v185);
      *(void *)(8 * v185) = v156;
      uint64_t v158 = 8 * v185 + 8;
      if (v157 == v183) {
        goto LABEL_180;
      }
    }
    unint64_t v267 = v157 - 8 - v183;
    if (v267 < 0x58) {
      goto LABEL_392;
    }
    if ((unint64_t)(v157 - &v189[v184]) < 0x20) {
      goto LABEL_392;
    }
    uint64_t v268 = (v267 >> 3) + 1;
    uint64_t v269 = 8 * (v268 & 0x3FFFFFFFFFFFFFFCLL);
    v270 = &v157[-v269];
    v190 = (uint64_t *)((char *)v190 - v269);
    v271 = &v189[8 * v185 - 16];
    v272 = (long long *)(v157 - 16);
    uint64_t v273 = v268 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v274 = *v272;
      *(v271 - 1) = *(v272 - 1);
      _OWORD *v271 = v274;
      v271 -= 2;
      v272 -= 2;
      v273 -= 4;
    }
    while (v273);
    v157 = v270;
    if (v268 != (v268 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_392:
      do
      {
        uint64_t v275 = *((void *)v157 - 1);
        v157 -= 8;
        *--v190 = v275;
      }
      while (v157 != v183);
    }
    v157 = v381;
    v381 = v190;
    v382 = (char *)v158;
    v383 = &v189[8 * v188];
    if (v157) {
LABEL_181:
    }
      operator delete(v157);
LABEL_182:
    v382 = (char *)v158;
    uint64_t v191 = (*v344)[2];
    v192 = v379;
    if (v379 < v380)
    {
      *(void *)v379 = v191;
      uint64_t v193 = (uint64_t)(v192 + 8);
      goto LABEL_195;
    }
    v194 = v378;
    int64_t v195 = v379 - (unsigned char *)v378;
    uint64_t v196 = (v379 - (unsigned char *)v378) >> 3;
    unint64_t v197 = v196 + 1;
    if ((unint64_t)(v196 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v198 = v380 - (unsigned char *)v378;
    if ((v380 - (unsigned char *)v378) >> 2 > v197) {
      unint64_t v197 = v198 >> 2;
    }
    if ((unint64_t)v198 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v199 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v199 = v197;
    }
    if (v199)
    {
      if (v199 >> 61) {
        sub_188D718();
      }
      v200 = operator new(8 * v199);
      v201 = (uint64_t *)&v200[8 * v196];
      uint64_t *v201 = v191;
      uint64_t v193 = (uint64_t)(v201 + 1);
      if (v192 == v194)
      {
LABEL_193:
        v378 = v201;
        v379 = (char *)v193;
        v380 = &v200[8 * v199];
        if (v192) {
          goto LABEL_194;
        }
        goto LABEL_195;
      }
    }
    else
    {
      v200 = 0;
      v201 = (uint64_t *)(8 * v196);
      *(void *)(8 * v196) = v191;
      uint64_t v193 = 8 * v196 + 8;
      if (v192 == v194) {
        goto LABEL_193;
      }
    }
    unint64_t v276 = v192 - 8 - v194;
    if (v276 < 0x58) {
      goto LABEL_393;
    }
    if ((unint64_t)(v192 - &v200[v195]) < 0x20) {
      goto LABEL_393;
    }
    uint64_t v277 = (v276 >> 3) + 1;
    uint64_t v278 = 8 * (v277 & 0x3FFFFFFFFFFFFFFCLL);
    v279 = &v192[-v278];
    v201 = (uint64_t *)((char *)v201 - v278);
    v280 = &v200[8 * v196 - 16];
    v281 = (long long *)(v192 - 16);
    uint64_t v282 = v277 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v283 = *v281;
      *(v280 - 1) = *(v281 - 1);
      _OWORD *v280 = v283;
      v280 -= 2;
      v281 -= 2;
      v282 -= 4;
    }
    while (v282);
    v192 = v279;
    if (v277 != (v277 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_393:
      do
      {
        uint64_t v284 = *((void *)v192 - 1);
        v192 -= 8;
        *--v201 = v284;
      }
      while (v192 != v194);
    }
    v192 = v378;
    v378 = v201;
    v379 = (char *)v193;
    v380 = &v200[8 * v199];
    if (v192) {
LABEL_194:
    }
      operator delete(v192);
LABEL_195:
    v379 = (char *)v193;
    uint64_t v202 = (*v344)[4];
    v203 = v376;
    if (v376 < v377)
    {
      *(void *)v376 = v202;
      uint64_t v204 = (uint64_t)(v203 + 8);
      goto LABEL_208;
    }
    v205 = v375;
    int64_t v206 = v376 - (unsigned char *)v375;
    uint64_t v207 = (v376 - (unsigned char *)v375) >> 3;
    unint64_t v208 = v207 + 1;
    if ((unint64_t)(v207 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v209 = v377 - (unsigned char *)v375;
    if ((v377 - (unsigned char *)v375) >> 2 > v208) {
      unint64_t v208 = v209 >> 2;
    }
    if ((unint64_t)v209 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v210 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v210 = v208;
    }
    if (v210)
    {
      if (v210 >> 61) {
        sub_188D718();
      }
      v211 = operator new(8 * v210);
      v212 = (uint64_t *)&v211[8 * v207];
      uint64_t *v212 = v202;
      uint64_t v204 = (uint64_t)(v212 + 1);
      if (v203 == v205)
      {
LABEL_206:
        v375 = v212;
        v376 = (char *)v204;
        v377 = &v211[8 * v210];
        if (v203) {
          goto LABEL_207;
        }
        goto LABEL_208;
      }
    }
    else
    {
      v211 = 0;
      v212 = (uint64_t *)(8 * v207);
      *(void *)(8 * v207) = v202;
      uint64_t v204 = 8 * v207 + 8;
      if (v203 == v205) {
        goto LABEL_206;
      }
    }
    unint64_t v285 = v203 - 8 - v205;
    if (v285 < 0x58) {
      goto LABEL_394;
    }
    if ((unint64_t)(v203 - &v211[v206]) < 0x20) {
      goto LABEL_394;
    }
    uint64_t v286 = (v285 >> 3) + 1;
    uint64_t v287 = 8 * (v286 & 0x3FFFFFFFFFFFFFFCLL);
    v288 = &v203[-v287];
    v212 = (uint64_t *)((char *)v212 - v287);
    v289 = &v211[8 * v207 - 16];
    v290 = (long long *)(v203 - 16);
    uint64_t v291 = v286 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v292 = *v290;
      *(v289 - 1) = *(v290 - 1);
      _OWORD *v289 = v292;
      v289 -= 2;
      v290 -= 2;
      v291 -= 4;
    }
    while (v291);
    v203 = v288;
    if (v286 != (v286 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_394:
      do
      {
        uint64_t v293 = *((void *)v203 - 1);
        v203 -= 8;
        *--v212 = v293;
      }
      while (v203 != v205);
    }
    v203 = v375;
    v375 = v212;
    v376 = (char *)v204;
    v377 = &v211[8 * v210];
    if (v203) {
LABEL_207:
    }
      operator delete(v203);
LABEL_208:
    v376 = (char *)v204;
    uint64_t v213 = (*v344)[5];
    v214 = v373;
    if (v373 < v374)
    {
      *(void *)v373 = v213;
      uint64_t v215 = (uint64_t)(v214 + 8);
      goto LABEL_221;
    }
    v216 = v372;
    int64_t v217 = v373 - (unsigned char *)v372;
    uint64_t v218 = (v373 - (unsigned char *)v372) >> 3;
    unint64_t v219 = v218 + 1;
    if ((unint64_t)(v218 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v220 = v374 - (unsigned char *)v372;
    if ((v374 - (unsigned char *)v372) >> 2 > v219) {
      unint64_t v219 = v220 >> 2;
    }
    if ((unint64_t)v220 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v221 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v221 = v219;
    }
    if (v221)
    {
      if (v221 >> 61) {
        sub_188D718();
      }
      v222 = operator new(8 * v221);
      v223 = (uint64_t *)&v222[8 * v218];
      uint64_t *v223 = v213;
      uint64_t v215 = (uint64_t)(v223 + 1);
      if (v214 == v216)
      {
LABEL_219:
        v372 = v223;
        v373 = (char *)v215;
        v374 = &v222[8 * v221];
        if (v214) {
          goto LABEL_220;
        }
        goto LABEL_221;
      }
    }
    else
    {
      v222 = 0;
      v223 = (uint64_t *)(8 * v218);
      *(void *)(8 * v218) = v213;
      uint64_t v215 = 8 * v218 + 8;
      if (v214 == v216) {
        goto LABEL_219;
      }
    }
    unint64_t v294 = v214 - 8 - v216;
    if (v294 < 0x58) {
      goto LABEL_395;
    }
    if ((unint64_t)(v214 - &v222[v217]) < 0x20) {
      goto LABEL_395;
    }
    uint64_t v295 = (v294 >> 3) + 1;
    uint64_t v296 = 8 * (v295 & 0x3FFFFFFFFFFFFFFCLL);
    v297 = &v214[-v296];
    v223 = (uint64_t *)((char *)v223 - v296);
    v298 = &v222[8 * v218 - 16];
    v299 = (long long *)(v214 - 16);
    uint64_t v300 = v295 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v301 = *v299;
      *(v298 - 1) = *(v299 - 1);
      _OWORD *v298 = v301;
      v298 -= 2;
      v299 -= 2;
      v300 -= 4;
    }
    while (v300);
    v214 = v297;
    if (v295 != (v295 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_395:
      do
      {
        uint64_t v302 = *((void *)v214 - 1);
        v214 -= 8;
        *--v223 = v302;
      }
      while (v214 != v216);
    }
    v214 = v372;
    v372 = v223;
    v373 = (char *)v215;
    v374 = &v222[8 * v221];
    if (v214) {
LABEL_220:
    }
      operator delete(v214);
LABEL_221:
    v373 = (char *)v215;
    uint64_t v224 = (*v344)[7];
    v225 = v370;
    if (v370 < v371)
    {
      *(void *)v370 = v224;
      uint64_t v226 = (uint64_t)(v225 + 8);
      goto LABEL_234;
    }
    v227 = v369;
    int64_t v228 = v370 - (unsigned char *)v369;
    uint64_t v229 = (v370 - (unsigned char *)v369) >> 3;
    unint64_t v230 = v229 + 1;
    if ((unint64_t)(v229 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v231 = v371 - (unsigned char *)v369;
    if ((v371 - (unsigned char *)v369) >> 2 > v230) {
      unint64_t v230 = v231 >> 2;
    }
    if ((unint64_t)v231 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v232 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v232 = v230;
    }
    if (v232)
    {
      if (v232 >> 61) {
        sub_188D718();
      }
      v233 = operator new(8 * v232);
      v234 = (uint64_t *)&v233[8 * v229];
      uint64_t *v234 = v224;
      uint64_t v226 = (uint64_t)(v234 + 1);
      if (v225 == v227)
      {
LABEL_232:
        v369 = v234;
        v370 = (char *)v226;
        v371 = &v233[8 * v232];
        if (v225) {
          goto LABEL_233;
        }
        goto LABEL_234;
      }
    }
    else
    {
      v233 = 0;
      v234 = (uint64_t *)(8 * v229);
      *(void *)(8 * v229) = v224;
      uint64_t v226 = 8 * v229 + 8;
      if (v225 == v227) {
        goto LABEL_232;
      }
    }
    unint64_t v303 = v225 - 8 - v227;
    if (v303 < 0x58) {
      goto LABEL_396;
    }
    if ((unint64_t)(v225 - &v233[v228]) < 0x20) {
      goto LABEL_396;
    }
    uint64_t v304 = (v303 >> 3) + 1;
    uint64_t v305 = 8 * (v304 & 0x3FFFFFFFFFFFFFFCLL);
    v306 = &v225[-v305];
    v234 = (uint64_t *)((char *)v234 - v305);
    v307 = &v233[8 * v229 - 16];
    v308 = (long long *)(v225 - 16);
    uint64_t v309 = v304 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v310 = *v308;
      *(v307 - 1) = *(v308 - 1);
      _OWORD *v307 = v310;
      v307 -= 2;
      v308 -= 2;
      v309 -= 4;
    }
    while (v309);
    v225 = v306;
    if (v304 != (v304 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_396:
      do
      {
        uint64_t v311 = *((void *)v225 - 1);
        v225 -= 8;
        *--v234 = v311;
      }
      while (v225 != v227);
    }
    v225 = v369;
    v369 = v234;
    v370 = (char *)v226;
    v371 = &v233[8 * v232];
    if (v225) {
LABEL_233:
    }
      operator delete(v225);
LABEL_234:
    v370 = (char *)v226;
    uint64_t v235 = (*v344)[8];
    v236 = v367;
    if (v367 < v368)
    {
      *(void *)v367 = v235;
      uint64_t v237 = (uint64_t)(v236 + 8);
      goto LABEL_247;
    }
    v238 = v366;
    int64_t v239 = v367 - (unsigned char *)v366;
    uint64_t v240 = (v367 - (unsigned char *)v366) >> 3;
    unint64_t v241 = v240 + 1;
    if ((unint64_t)(v240 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v242 = v368 - (unsigned char *)v366;
    if ((v368 - (unsigned char *)v366) >> 2 > v241) {
      unint64_t v241 = v242 >> 2;
    }
    if ((unint64_t)v242 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v243 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v243 = v241;
    }
    if (v243)
    {
      if (v243 >> 61) {
        sub_188D718();
      }
      v244 = operator new(8 * v243);
      v245 = (uint64_t *)&v244[8 * v240];
      uint64_t *v245 = v235;
      uint64_t v237 = (uint64_t)(v245 + 1);
      if (v236 == v238)
      {
LABEL_245:
        v366 = v245;
        v367 = (char *)v237;
        v368 = &v244[8 * v243];
        if (v236) {
          goto LABEL_246;
        }
        goto LABEL_247;
      }
    }
    else
    {
      v244 = 0;
      v245 = (uint64_t *)(8 * v240);
      *(void *)(8 * v240) = v235;
      uint64_t v237 = 8 * v240 + 8;
      if (v236 == v238) {
        goto LABEL_245;
      }
    }
    unint64_t v312 = v236 - 8 - v238;
    if (v312 < 0x58) {
      goto LABEL_397;
    }
    if ((unint64_t)(v236 - &v244[v239]) < 0x20) {
      goto LABEL_397;
    }
    uint64_t v313 = (v312 >> 3) + 1;
    uint64_t v314 = 8 * (v313 & 0x3FFFFFFFFFFFFFFCLL);
    v315 = &v236[-v314];
    v245 = (uint64_t *)((char *)v245 - v314);
    v316 = &v244[8 * v240 - 16];
    v317 = (long long *)(v236 - 16);
    uint64_t v318 = v313 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v319 = *v317;
      *(v316 - 1) = *(v317 - 1);
      _OWORD *v316 = v319;
      v316 -= 2;
      v317 -= 2;
      v318 -= 4;
    }
    while (v318);
    v236 = v315;
    if (v313 != (v313 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_397:
      do
      {
        uint64_t v320 = *((void *)v236 - 1);
        v236 -= 8;
        *--v245 = v320;
      }
      while (v236 != v238);
    }
    v236 = v366;
    v366 = v245;
    v367 = (char *)v237;
    v368 = &v244[8 * v243];
    if (v236) {
LABEL_246:
    }
      operator delete(v236);
LABEL_247:
    v367 = (char *)v237;
    uint64_t v246 = (*v344)[16];
    v247 = v364;
    if (v364 < v365)
    {
      *(void *)v364 = v246;
      uint64_t v248 = (uint64_t)(v247 + 8);
      goto LABEL_260;
    }
    v249 = v363;
    int64_t v250 = v364 - (unsigned char *)v363;
    uint64_t v251 = (v364 - (unsigned char *)v363) >> 3;
    unint64_t v252 = v251 + 1;
    if ((unint64_t)(v251 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v253 = v365 - (unsigned char *)v363;
    if ((v365 - (unsigned char *)v363) >> 2 > v252) {
      unint64_t v252 = v253 >> 2;
    }
    if ((unint64_t)v253 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v254 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v254 = v252;
    }
    if (v254)
    {
      if (v254 >> 61) {
        sub_188D718();
      }
      v255 = operator new(8 * v254);
      v256 = (uint64_t *)&v255[8 * v251];
      uint64_t *v256 = v246;
      uint64_t v248 = (uint64_t)(v256 + 1);
      if (v247 == v249)
      {
LABEL_258:
        v363 = v256;
        v364 = (char *)v248;
        v365 = &v255[8 * v254];
        if (v247) {
          goto LABEL_259;
        }
        goto LABEL_260;
      }
    }
    else
    {
      v255 = 0;
      v256 = (uint64_t *)(8 * v251);
      *(void *)(8 * v251) = v246;
      uint64_t v248 = 8 * v251 + 8;
      if (v247 == v249) {
        goto LABEL_258;
      }
    }
    unint64_t v321 = v247 - 8 - v249;
    if (v321 < 0x58) {
      goto LABEL_398;
    }
    if ((unint64_t)(v247 - &v255[v250]) < 0x20) {
      goto LABEL_398;
    }
    uint64_t v322 = (v321 >> 3) + 1;
    uint64_t v323 = 8 * (v322 & 0x3FFFFFFFFFFFFFFCLL);
    v324 = &v247[-v323];
    v256 = (uint64_t *)((char *)v256 - v323);
    v325 = &v255[8 * v251 - 16];
    v326 = (long long *)(v247 - 16);
    uint64_t v327 = v322 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v328 = *v326;
      *(v325 - 1) = *(v326 - 1);
      _OWORD *v325 = v328;
      v325 -= 2;
      v326 -= 2;
      v327 -= 4;
    }
    while (v327);
    v247 = v324;
    if (v322 != (v322 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_398:
      do
      {
        uint64_t v329 = *((void *)v247 - 1);
        v247 -= 8;
        *--v256 = v329;
      }
      while (v247 != v249);
    }
    v247 = v363;
    v363 = v256;
    v364 = (char *)v248;
    v365 = &v255[8 * v254];
    if (v247) {
LABEL_259:
    }
      operator delete(v247);
LABEL_260:
    v364 = (char *)v248;
    uint64_t v257 = (*v344)[17];
    v258 = v361;
    if (v361 < v362)
    {
      *(void *)v361 = v257;
      uint64_t v13 = (uint64_t)(v258 + 8);
      a3 = v343;
      goto LABEL_7;
    }
    v259 = (char *)__p;
    int64_t v260 = v361 - (unsigned char *)__p;
    uint64_t v261 = (v361 - (unsigned char *)__p) >> 3;
    unint64_t v262 = v261 + 1;
    if ((unint64_t)(v261 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v263 = v362 - (unsigned char *)__p;
    if ((v362 - (unsigned char *)__p) >> 2 > v262) {
      unint64_t v262 = v263 >> 2;
    }
    if ((unint64_t)v263 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v264 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v264 = v262;
    }
    if (v264)
    {
      if (v264 >> 61) {
        sub_188D718();
      }
      v265 = operator new(8 * v264);
      v266 = (uint64_t *)&v265[8 * v261];
      uint64_t *v266 = v257;
      uint64_t v13 = (uint64_t)(v266 + 1);
      if (v258 == v259)
      {
LABEL_270:
        long long __p = v266;
        v361 = (char *)v13;
        v362 = &v265[8 * v264];
        a3 = v343;
        if (!v258) {
          goto LABEL_7;
        }
LABEL_343:
        operator delete(v258);
        goto LABEL_7;
      }
    }
    else
    {
      v265 = 0;
      v266 = (uint64_t *)(8 * v261);
      *(void *)(8 * v261) = v257;
      uint64_t v13 = 8 * v261 + 8;
      if (v258 == v259) {
        goto LABEL_270;
      }
    }
    unint64_t v330 = v258 - 8 - v259;
    if (v330 < 0x58) {
      goto LABEL_399;
    }
    if ((unint64_t)(v258 - &v265[v260]) < 0x20) {
      goto LABEL_399;
    }
    uint64_t v331 = (v330 >> 3) + 1;
    uint64_t v332 = 8 * (v331 & 0x3FFFFFFFFFFFFFFCLL);
    v333 = &v258[-v332];
    v266 = (uint64_t *)((char *)v266 - v332);
    v334 = &v265[8 * v261 - 16];
    v335 = v258 - 16;
    uint64_t v336 = v331 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v337 = *(_OWORD *)v335;
      *(v334 - 1) = *((_OWORD *)v335 - 1);
      _OWORD *v334 = v337;
      v334 -= 2;
      v335 -= 32;
      v336 -= 4;
    }
    while (v336);
    v258 = v333;
    if (v331 != (v331 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_399:
      do
      {
        uint64_t v338 = *((void *)v258 - 1);
        v258 -= 8;
        *--v266 = v338;
      }
      while (v258 != v259);
    }
    v258 = (char *)__p;
    long long __p = v266;
    v361 = (char *)v13;
    v362 = &v265[8 * v264];
    a3 = v343;
    if (v258) {
      goto LABEL_343;
    }
LABEL_7:
    v361 = (char *)v13;
    v346 += 41;
    sub_34A354(&v345);
  }
  sub_323E34((long long **)*a3 + 71);
  v339 = sub_2E0C4();
  v345 = a3;
  v346 = &v381;
  v347 = &v378;
  v348 = &v375;
  v349 = &v372;
  v350 = &v369;
  v351 = &v366;
  v352 = &v363;
  p_p = &__p;
  v354 = a3;
  LODWORD(v355[0]) = 5;
  v357 = (uint64_t **)v355;
  v358 = (void **)&v345;
  sub_34FD28((uint64_t)&__t, (uint64_t)v339, v341, (uint64_t)&v357);
  sub_31A008((uint64_t)&__t);
  if (__p)
  {
    v361 = (char *)__p;
    operator delete(__p);
  }
  if (v363)
  {
    v364 = (char *)v363;
    operator delete(v363);
  }
  if (v366)
  {
    v367 = (char *)v366;
    operator delete(v366);
  }
  if (v369)
  {
    v370 = (char *)v369;
    operator delete(v369);
  }
  if (v372)
  {
    v373 = (char *)v372;
    operator delete(v372);
  }
  if (v375)
  {
    v376 = (char *)v375;
    operator delete(v375);
  }
  if (v378)
  {
    v379 = (char *)v378;
    operator delete(v378);
  }
  if (v381)
  {
    v382 = (char *)v381;
    operator delete(v381);
  }
}

void sub_34950C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v61 = a38;
    if (!a38)
    {
LABEL_3:
      uint64_t v62 = a41;
      if (!a41) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v61 = a38;
    if (!a38) {
      goto LABEL_3;
    }
  }
  operator delete(v61);
  uint64_t v62 = a41;
  if (!a41)
  {
LABEL_4:
    uint64_t v63 = a44;
    if (!a44) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v62);
  uint64_t v63 = a44;
  if (!a44)
  {
LABEL_5:
    int v64 = a47;
    if (!a47) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v63);
  int v64 = a47;
  if (!a47)
  {
LABEL_6:
    BOOL v65 = a50;
    if (!a50) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(v64);
  BOOL v65 = a50;
  if (!a50)
  {
LABEL_7:
    int v66 = a53;
    if (!a53) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(v65);
  int v66 = a53;
  if (!a53)
  {
LABEL_8:
    sub_323F08(v59);
    _Unwind_Resume(a1);
  }
LABEL_15:
  operator delete(v66);
  sub_323F08(v59);
  _Unwind_Resume(a1);
}

uint64_t sub_349738()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  int v4 = v3;
  unint64_t v6 = v5;
  uint8x8_t v8 = v7;
  unint64_t v10 = v9;
  uint64_t v11 = (uint64_t *)v0;
  uint64_t v13 = v12;
  sub_352850((uint64_t)v20, 0);
  char v19 = 0;
  LOBYTE(__p[0]) = 0;
  sub_347478((uint64_t)v20, (uint64_t)__p);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  sub_31CC18((uint64_t)__p, v11, v2);
  uint64_t v14 = *v10;
  if (*v10 != v10[1])
  {
    if (v4 < 0) {
      char v15 = -5;
    }
    else {
      char v15 = 5;
    }
    memset(v17, 0, sizeof(v17));
    if ((int)(v4 / 10
             + (((103 * (char)(v15 + v4 % 10)) >> 15) & 1)
             + ((103 * (char)(v15 + v4 % 10)) >> 10)) > 0)
      sub_319128((uint64_t)v17, v8, v14, v6);
    sub_319128((uint64_t)v17, v8, v14, v6);
  }
  sub_347724(v20, 1u, v13);
  sub_35259C((uint64_t)__p);
  return sub_349E78((uint64_t)v20);
}

void sub_349DA0(_Unwind_Exception *a1)
{
}

uint64_t sub_349E78(uint64_t a1)
{
  if (*(void *)(a1 + 408))
  {
    sub_349F6C(a1, 0, *(void *)(a1 + 72));
    free(*(void **)(a1 + 408));
  }
  uint64_t v2 = *(void **)(a1 + 136);
  if (v2)
  {
    do
    {
      int v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  int v4 = *(void **)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  if (v4) {
    operator delete(v4);
  }
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 112);
  if (!v5 || atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*(char *)(a1 + 103) & 0x80000000) == 0) {
      goto LABEL_10;
    }
LABEL_13:
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (*(char *)(a1 + 103) < 0) {
    goto LABEL_13;
  }
LABEL_10:
  if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
    return a1;
  }
LABEL_14:
  operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_349F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    do
    {
      while (1)
      {
        uint64_t v6 = *(void *)(a1 + 408);
        uint64_t v7 = v6 + 328 * v4;
        uint8x8_t v8 = *(void **)(v7 + 56);
        if (v8)
        {
          do
          {
            unint64_t v9 = (void *)*v8;
            operator delete(v8);
            uint8x8_t v8 = v9;
          }
          while (v9);
        }
        unint64_t v10 = *(void **)(v7 + 40);
        *(void *)(v7 + 40) = 0;
        if (v10) {
          operator delete(v10);
        }
        uint64_t v11 = *(std::__shared_weak_count **)(v6 + 328 * v4 + 32);
        if (v11)
        {
          if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        if (*(char *)(v7 + 23) < 0) {
          break;
        }
        if (++v4 == a3) {
          return;
        }
      }
      operator delete(*(void **)v7);
      ++v4;
    }
    while (v4 != a3);
  }
}

uint64_t sub_34A06C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    do
    {
      int v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v4) {
    operator delete(v4);
  }
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

void **sub_34A128(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    int v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = (std::__shared_weak_count *)*((void *)v3 - 1);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_34A1DC(void **a1)
{
  uint64_t v2 = (std::thread *)*a1;
  if (*a1)
  {
    int v3 = (std::thread *)a1[1];
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        std::thread::~thread(v3 - 1);
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_34A238(uint64_t a1, uint64_t a2)
{
  int32x4_t v4 = *(int32x4_t *)(a1 + 16);
  int32x4_t v5 = vaddq_s32(*(int32x4_t *)a1, *(int32x4_t *)a2);
  v5.i32[0] = vorrq_s8(*(int8x16_t *)a1, *(int8x16_t *)a2).u32[0];
  *(int32x4_t *)a1 = v5;
  *(int32x4_t *)(a1 + 16) = vaddq_s32(v4, *(int32x4_t *)(a2 + 16));
  int32x4_t v6 = *(int32x4_t *)(a1 + 48);
  *(int32x4_t *)(a1 + 32) = vaddq_s32(*(int32x4_t *)(a1 + 32), *(int32x4_t *)(a2 + 32));
  int32x2_t v7 = *(int32x2_t *)(a1 + 72);
  *(int32x2_t *)(a1 + 64) = vadd_s32(*(int32x2_t *)(a1 + 64), *(int32x2_t *)(a2 + 64));
  *(int32x4_t *)(a1 + 48) = vaddq_s32(v6, *(int32x4_t *)(a2 + 48));
  *(int32x2_t *)(a1 + 72) = vadd_s32(v7, *(int32x2_t *)(a2 + 72));
  *(_DWORD *)(a1 + 80) += *(_DWORD *)(a2 + 80);
  sub_34FCCC((int32x4_t *)(a1 + 84), (int32x4_t *)(a2 + 84));
  *(int32x2_t *)(a1 + 168) = vadd_s32(*(int32x2_t *)(a1 + 168), *(int32x2_t *)(a2 + 168));
  *(void *)(a1 + 176) += *(void *)(a2 + 176);
  *(_DWORD *)(a1 + 184) += *(_DWORD *)(a2 + 184);
  int32x2_t v8 = *(int32x2_t *)(a1 + 216);
  *(int32x2_t *)(a1 + 224) = vadd_s32(*(int32x2_t *)(a1 + 224), *(int32x2_t *)(a2 + 224));
  int32x4_t v9 = vaddq_s32(*(int32x4_t *)(a1 + 200), *(int32x4_t *)(a2 + 200));
  *(void *)(a1 + 232) += *(void *)(a2 + 232);
  *(void *)(a1 + 192) += *(void *)(a2 + 192);
  *(int32x4_t *)(a1 + 200) = v9;
  *(int32x2_t *)(a1 + 216) = vadd_s32(v8, *(int32x2_t *)(a2 + 216));
  return a1;
}

void *sub_34A354(void *result)
{
  uint64_t v2 = (unsigned __int8 *)result[1];
  uint64_t v1 = (unsigned __int8 *)result[2];
  if (v2 == v1) {
    return result;
  }
  int v3 = result;
  uint64_t v4 = *result;
  int32x4_t v5 = (const void **)(*result + 80);
  int32x4_t v6 = (const void **)(*result + 32);
  while (1)
  {
    uint64_t v7 = *(unsigned __int8 *)(v4 + 103);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = *(unsigned __int8 *)(v4 + 103);
    }
    else {
      uint64_t v8 = *(void *)(v4 + 88);
    }
    int v9 = (char)v2[23];
    if (v9 >= 0) {
      uint64_t v10 = v2[23];
    }
    else {
      uint64_t v10 = *((void *)v2 + 1);
    }
    if (v8 == v10)
    {
      if (v9 >= 0) {
        uint64_t v11 = v2;
      }
      else {
        uint64_t v11 = *(unsigned __int8 **)v2;
      }
      if ((v7 & 0x80) != 0)
      {
        __n128 result = (void *)memcmp(*v5, v11, *(void *)(v4 + 88));
        if (!result) {
          goto LABEL_4;
        }
      }
      else
      {
        if (!*(unsigned char *)(v4 + 103)) {
          goto LABEL_4;
        }
        uint64_t v12 = v5;
        while (*(unsigned __int8 *)v12 == *v11)
        {
          uint64_t v12 = (const void **)((char *)v12 + 1);
          ++v11;
          if (!--v7) {
            goto LABEL_4;
          }
        }
      }
    }
    if (!*(void *)(v4 + 56)) {
      return result;
    }
    uint64_t v13 = *(unsigned __int8 *)(v4 + 55);
    uint64_t v14 = (v13 & 0x80u) == 0 ? *(unsigned __int8 *)(v4 + 55) : *(void *)(v4 + 40);
    if (v14 != v10) {
      return result;
    }
    if (v9 >= 0) {
      char v15 = v2;
    }
    else {
      char v15 = *(unsigned __int8 **)v2;
    }
    if ((v13 & 0x80) != 0)
    {
      __n128 result = (void *)memcmp(*v6, v15, *(void *)(v4 + 40));
      if (result) {
        return result;
      }
      goto LABEL_4;
    }
    if (*(unsigned char *)(v4 + 55)) {
      break;
    }
LABEL_4:
    v2 += 328;
    v3[1] = v2;
    if (v2 == v1) {
      return result;
    }
  }
  uint64_t v16 = v6;
  while (*(unsigned __int8 *)v16 == *v15)
  {
    uint64_t v16 = (const void **)((char *)v16 + 1);
    ++v15;
    if (!--v13) {
      goto LABEL_4;
    }
  }
  return result;
}

void sub_34A49C(uint64_t *a1, unint64_t a2)
{
  uint64_t v5 = (uint64_t)(a1 + 2);
  uint64_t v4 = a1[2];
  uint64_t v6 = a1[1];
  if (0x21CFB2B78C13521DLL * ((v4 - v6) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v12 = v6 + 424 * a2;
      int64x2_t v23 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
      do
      {
        *(void *)(v6 + 416) = 0;
        *(_OWORD *)(v6 + 384) = 0u;
        *(_OWORD *)(v6 + 400) = 0u;
        *(_OWORD *)(v6 + 352) = 0u;
        *(_OWORD *)(v6 + 368) = 0u;
        *(_OWORD *)(v6 + 320) = 0u;
        *(_OWORD *)(v6 + 336) = 0u;
        *(_OWORD *)(v6 + 288) = 0u;
        *(_OWORD *)(v6 + 304) = 0u;
        *(_OWORD *)(v6 + 256) = 0u;
        *(_OWORD *)(v6 + 272) = 0u;
        *(_OWORD *)(v6 + 224) = 0u;
        *(_OWORD *)(v6 + 240) = 0u;
        *(_OWORD *)(v6 + 192) = 0u;
        *(_OWORD *)(v6 + 208) = 0u;
        *(_OWORD *)(v6 + 160) = 0u;
        *(_OWORD *)(v6 + 176) = 0u;
        *(_OWORD *)(v6 + 128) = 0u;
        *(_OWORD *)(v6 + 144) = 0u;
        *(_OWORD *)(v6 + 96) = 0u;
        *(_OWORD *)(v6 + 112) = 0u;
        *(_OWORD *)(v6 + 64) = 0u;
        *(_OWORD *)(v6 + 80) = 0u;
        *(_OWORD *)(v6 + 32) = 0u;
        *(_OWORD *)(v6 + 48) = 0u;
        *(_OWORD *)uint64_t v6 = 0u;
        *(_OWORD *)(v6 + 16) = 0u;
        *(_OWORD *)(v6 + 220) = 0u;
        uint64_t v13 = v6 + 220;
        *(void *)(v6 + 28) = -1;
        *(_DWORD *)(v6 + 36) = 0x7FFFFFFF;
        *(_OWORD *)(v6 + 40) = 0u;
        *(_OWORD *)(v6 + 56) = 0u;
        *(_OWORD *)(v6 + 72) = 0u;
        *(_DWORD *)(v6 + 88) = 3;
        *(_OWORD *)(v6 + 96) = 0u;
        *(_OWORD *)(v6 + 112) = 0u;
        *(_OWORD *)(v6 + 128) = 0u;
        *(void *)(v6 + 144) = 0x7FFFFFFF00000000;
        *(unsigned char *)(v6 + 156) = 7;
        *(_DWORD *)(v6 + 160) = 0;
        *(_DWORD *)(v6 + 157) = 0;
        *(_OWORD *)(v6 + 168) = 0u;
        *(_OWORD *)(v6 + 184) = 0u;
        *(_OWORD *)(v6 + 200) = 0u;
        *(unsigned char *)(v6 + 216) = 0;
        *(_OWORD *)(v6 + 236) = 0u;
        *(_OWORD *)(v6 + 252) = 0u;
        *(void *)(v6 + 265) = 0;
        *(_DWORD *)(v6 + 280) = 0x7FFFFFFF;
        *(int64x2_t *)(v6 + 288) = v23;
        *(_DWORD *)(v6 + 316) = 0x7FFFFFFF;
        *(_OWORD *)(v6 + 320) = 0u;
        *(_OWORD *)(v6 + 336) = 0u;
        memset_pattern16((void *)(v6 + 352), &xmmword_20B8FC0, 0x30uLL);
        *(_WORD *)(v6 + 400) = -1;
        v6 += 424;
      }
      while (v13 + 204 != v12);
      uint64_t v6 = v12;
    }
    a1[1] = v6;
  }
  else
  {
    uint64_t v7 = 0x21CFB2B78C13521DLL * ((v6 - *a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0x9A90E7D95BC609) {
      sub_2E00();
    }
    unint64_t v9 = 0x21CFB2B78C13521DLL * ((v4 - *a1) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x4D4873ECADE304) {
      unint64_t v10 = 0x9A90E7D95BC609;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0x9A90E7D95BC609) {
        sub_188D718();
      }
      uint64_t v11 = (char *)operator new(424 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v20 = &v11[424 * v10];
    uint64_t v21 = (uint64_t)&v11[424 * v7];
    unint64_t v14 = v21 + 424 * a2;
    int64x2_t v24 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    uint64_t v15 = v21;
    do
    {
      *(void *)(v15 + 416) = 0;
      *(_OWORD *)(v15 + 384) = 0u;
      *(_OWORD *)(v15 + 400) = 0u;
      *(_OWORD *)(v15 + 352) = 0u;
      *(_OWORD *)(v15 + 368) = 0u;
      *(_OWORD *)(v15 + 320) = 0u;
      *(_OWORD *)(v15 + 336) = 0u;
      *(_OWORD *)(v15 + 288) = 0u;
      *(_OWORD *)(v15 + 304) = 0u;
      *(_OWORD *)(v15 + 256) = 0u;
      *(_OWORD *)(v15 + 272) = 0u;
      *(_OWORD *)(v15 + 224) = 0u;
      *(_OWORD *)(v15 + 240) = 0u;
      *(_OWORD *)(v15 + 192) = 0u;
      *(_OWORD *)(v15 + 208) = 0u;
      *(_OWORD *)(v15 + 160) = 0u;
      *(_OWORD *)(v15 + 176) = 0u;
      *(_OWORD *)(v15 + 128) = 0u;
      *(_OWORD *)(v15 + 144) = 0u;
      *(_OWORD *)(v15 + 96) = 0u;
      *(_OWORD *)(v15 + 112) = 0u;
      *(_OWORD *)(v15 + 64) = 0u;
      *(_OWORD *)(v15 + 80) = 0u;
      *(_OWORD *)(v15 + 32) = 0u;
      *(_OWORD *)(v15 + 48) = 0u;
      *(_OWORD *)uint64_t v15 = 0u;
      *(_OWORD *)(v15 + 16) = 0u;
      *(_OWORD *)(v15 + 220) = 0u;
      uint64_t v16 = v15 + 220;
      *(void *)(v15 + 28) = -1;
      *(_DWORD *)(v15 + 36) = 0x7FFFFFFF;
      *(_OWORD *)(v15 + 40) = 0u;
      *(_OWORD *)(v15 + 56) = 0u;
      *(_OWORD *)(v15 + 72) = 0u;
      *(_DWORD *)(v15 + 88) = 3;
      *(_OWORD *)(v15 + 96) = 0u;
      *(_OWORD *)(v15 + 112) = 0u;
      *(_OWORD *)(v15 + 128) = 0u;
      *(void *)(v15 + 144) = 0x7FFFFFFF00000000;
      *(unsigned char *)(v15 + 156) = 7;
      *(_DWORD *)(v15 + 160) = 0;
      *(_DWORD *)(v15 + 157) = 0;
      *(_OWORD *)(v15 + 168) = 0u;
      *(_OWORD *)(v15 + 184) = 0u;
      *(_OWORD *)(v15 + 200) = 0u;
      *(unsigned char *)(v15 + 216) = 0;
      *(_OWORD *)(v15 + 236) = 0u;
      *(_OWORD *)(v15 + 252) = 0u;
      *(void *)(v15 + 265) = 0;
      *(_DWORD *)(v15 + 280) = 0x7FFFFFFF;
      *(int64x2_t *)(v15 + 288) = v24;
      *(_DWORD *)(v15 + 316) = 0x7FFFFFFF;
      *(_OWORD *)(v15 + 320) = 0u;
      *(_OWORD *)(v15 + 336) = 0u;
      memset_pattern16((void *)(v15 + 352), &xmmword_20B8FC0, 0x30uLL);
      *(_WORD *)(v15 + 400) = -1;
      v15 += 424;
    }
    while (v16 + 204 != v14);
    sub_29FBAC(v5, a1[1], a1[1], *a1, *a1, v21, v21);
    uint64_t v18 = (void *)*a1;
    uint64_t v17 = a1[1];
    *a1 = v19;
    a1[1] = v14;
    for (a1[2] = (uint64_t)v20; (void *)v17 != v18; uint64_t v17 = sub_29D95C(v17 - 424))
      ;
    if (v18) {
      operator delete(v18);
    }
  }
}

void sub_34A81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_29FB58((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_34A830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 48) = 850045863;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t v6 = (char **)(a1 + 24);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 850045863;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 1018212795;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = a3;
  *(void *)(a1 + 232) = a3;
  *(void *)(a1 + 240) = 0;
  sub_2980();
  uint64_t v8 = *(void *)(v7 + 24);
  if (v8)
  {
    sub_2980();
    uint64_t v8 = *(void *)(*(void *)(v9 + 24) + 248) + 1;
  }
  *(void *)(a1 + 248) = v8;
  unint64_t v10 = operator new(0x20uLL);
  v10[1] = 0;
  v10[2] = 0;
  v10[3] = 0;
  *unint64_t v10 = off_24389C0;
  *(void *)&long long v21 = v10 + 3;
  *((void *)&v21 + 1) = v10;
  uint64_t v11 = *(void **)(a1 + 32);
  if ((unint64_t)v11 >= *(void *)(a1 + 40))
  {
    uint64_t v12 = sub_31A110(v6, (uint64_t)&v21);
    uint64_t v13 = (std::__shared_weak_count *)*((void *)&v21 + 1);
    *(void *)(a1 + 32) = v12;
    if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
    void *v11 = v10 + 3;
    v11[1] = v10;
    *(void *)(a1 + 32) = v11 + 2;
  }
  *(int64x2_t *)(a1 + 224) = vdupq_n_s64(1uLL);
  sub_2980();
  long long v21 = *v14;
  long long v22 = v14[1];
  sub_2980();
  *uint64_t v15 = 0;
  sub_2980();
  *(void *)(v16 + 8) = 1;
  sub_2980();
  *(void *)(v17 + 16) = 0;
  sub_2980();
  *(void *)(v18 + 24) = a1;
  sub_34AA5C(0, **(void **)a4, *(void ***)(a4 + 8));
  sub_2980();
  _OWORD *v19 = v21;
  v19[1] = v22;
  return a1;
}

void sub_34AA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_14A84((uint64_t)&a9);
  std::condition_variable::~condition_variable(v13);
  std::mutex::~mutex(v12);
  std::mutex::~mutex(v10);
  sub_34A128(v11);
  sub_34A1DC(v9);
  _Unwind_Resume(a1);
}

void sub_34AA5C(uint64_t a1, uint64_t a2, void **a3)
{
  sub_2980();
  uint64_t v7 = v6;
  unint64_t v14 = 0;
  uint64_t v15 = 0;
  v13[0] = v6;
  v13[1] = &v14;
  sub_2980();
  uint64_t v9 = (std::mutex *)(*(void *)(v8 + 24) + 48);
  std::mutex::lock(v9);
  sub_34ABE4(v13);
  std::mutex::unlock(v9);
  unint64_t v10 = a2 - a1;
  for (unint64_t i = atomic_fetch_add_explicit(v14, 1uLL, memory_order_relaxed);
        i < v10;
        unint64_t i = atomic_fetch_add_explicit(v14, 1uLL, memory_order_relaxed))
  {
    sub_34ADE4(*(void *)(**a3 + 152) + 424 * (*a3[1] + i + a1), *(void *)(*a3[2] + 152) + 424 * (i + a1));
  }
  ++*(void *)(v7 + 16);
  uint64_t v12 = v15;
  if (v15)
  {
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_34ABA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  std::mutex::unlock(v11);
  sub_14A84((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_34ABBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_34ABD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_34ABE4(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 16);
  uint64_t v3 = *(void *)(*a1 + 24);
  uint64_t v4 = *(void *)(v3 + 24);
  uint64_t v5 = *(void *)(v3 + 32);
  unint64_t v6 = (v5 - v4) >> 4;
  if (v2 >= v6)
  {
    unint64_t v7 = v2 + 1;
    uint64_t v8 = (std::__shared_weak_count *)operator new(0x20uLL);
    v8->__shared_owners_ = 0;
    v8->__shared_weak_owners_ = 0;
    v8[1].__vftable = 0;
    v8->__vftable = (std::__shared_weak_count_vtbl *)off_24389C0;
    uint64_t v17 = &v8[1].__vftable;
    uint64_t v18 = v8;
    unint64_t v9 = v7 - v6;
    if (v7 <= v6)
    {
      unint64_t v10 = v8;
      if (v7 < v6)
      {
        for (uint64_t i = v4 + 16 * v7; v5 != i; v5 -= 16)
        {
          uint64_t v12 = *(std::__shared_weak_count **)(v5 - 8);
          if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v12->__on_zero_shared)(v12, v9);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        *(void *)(v3 + 32) = i;
        unint64_t v10 = v18;
        if (!v18) {
          goto LABEL_15;
        }
      }
    }
    else
    {
      sub_31A2E8((char **)(v3 + 24), v9, &v17);
      unint64_t v10 = v18;
      if (!v18)
      {
LABEL_15:
        unint64_t v2 = *(void *)(*a1 + 16);
        uint64_t v4 = *(void *)(*(void *)(*a1 + 24) + 24);
        goto LABEL_16;
      }
    }
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    goto LABEL_15;
  }
LABEL_16:
  uint64_t v13 = a1[1];
  long long v14 = *(_OWORD *)(v4 + 16 * v2);
  uint64_t v15 = *(void *)(v4 + 16 * v2 + 8);
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  *(_OWORD *)uint64_t v13 = v14;
  if (v16)
  {
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_34ADD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_34ADE4(uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    std::string::operator=((std::string *)(a1 + 40), (const std::string *)(a2 + 40));
  }
  else
  {
    sub_34AFBC(a1, *(char ***)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    std::string::operator=((std::string *)(a1 + 40), (const std::string *)(a2 + 40));
    sub_34B338(a1 + 64, *(std::string **)(a2 + 64), *(long long **)(a2 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4));
  }
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a2 + 96));
  std::string::operator=((std::string *)(a1 + 120), (const std::string *)(a2 + 120));
  int v4 = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = v4;
  std::string::operator=((std::string *)(a1 + 168), (const std::string *)(a2 + 168));
  if (a1 == a2)
  {
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 272);
    long long v7 = *(_OWORD *)(a2 + 280);
    long long v8 = *(_OWORD *)(a2 + 296);
    *(void *)(a1 + 312) = *(void *)(a2 + 312);
    *(_OWORD *)(a1 + 280) = v7;
    *(_OWORD *)(a1 + 296) = v8;
  }
  else
  {
    sub_69208(a1 + 192, *(std::string **)(a2 + 192), *(std::string **)(a2 + 200), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 200) - *(void *)(a2 + 192)) >> 3));
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    sub_326C0((void *)(a1 + 224), *(char **)(a2 + 224), *(char **)(a2 + 232), (uint64_t)(*(void *)(a2 + 232) - *(void *)(a2 + 224)) >> 3);
    sub_69208(a1 + 248, *(std::string **)(a2 + 248), *(std::string **)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 256) - *(void *)(a2 + 248)) >> 3));
    *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 272);
    long long v5 = *(_OWORD *)(a2 + 280);
    long long v6 = *(_OWORD *)(a2 + 296);
    *(void *)(a1 + 312) = *(void *)(a2 + 312);
    *(_OWORD *)(a1 + 280) = v5;
    *(_OWORD *)(a1 + 296) = v6;
    sub_34B6B4(a1 + 320, *(void *)(a2 + 320), *(void *)(a2 + 328), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 3));
  }
  *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 344);
  long long v9 = *(_OWORD *)(a2 + 360);
  long long v10 = *(_OWORD *)(a2 + 376);
  long long v11 = *(_OWORD *)(a2 + 392);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(_OWORD *)(a1 + 376) = v10;
  *(_OWORD *)(a1 + 392) = v11;
  *(_OWORD *)(a1 + 360) = v9;
  *(unsigned char *)(a1 + 416) = *(unsigned char *)(a2 + 416);
  return a1;
}

void sub_34AFBC(uint64_t a1, char **a2, uint64_t a3, size_t __sz)
{
  long long v6 = a2;
  uint64_t v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  long long v10 = *(char ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)a1) >> 3) < __sz)
  {
    if (v10)
    {
      long long v11 = *(char ***)(a1 + 8);
      uint64_t v12 = *(char ***)a1;
      if (v11 != v10)
      {
        uint64_t v13 = *(char ***)(a1 + 8);
        do
        {
          uint64_t v15 = *(v13 - 3);
          v13 -= 3;
          long long v14 = v15;
          if (v15)
          {
            *(v11 - 2) = v14;
            operator delete(v14);
          }
          long long v11 = v13;
        }
        while (v13 != v10);
        uint64_t v12 = *(char ***)a1;
      }
      *(void *)(a1 + 8) = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_40;
    }
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v21 = 2 * v20;
    if (2 * v20 <= __sz) {
      uint64_t v21 = __sz;
    }
    unint64_t v22 = v20 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v21;
    if (v22 > 0xAAAAAAAAAAAAAAALL) {
LABEL_40:
    }
      sub_2E00();
    uint64_t v23 = 3 * v22;
    int64x2_t v24 = operator new(24 * v22);
    *(void *)a1 = v24;
    *(void *)(a1 + 8) = v24;
    *(void *)(a1 + 16) = &v24[v23];
    char v25 = sub_34B234(v9, (uint64_t)v6, a3, v24);
LABEL_31:
    *(void *)(a1 + 8) = v25;
    return;
  }
  uint64_t v16 = *(char ***)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (v16 - v10) < __sz)
  {
    uint64_t v17 = (uint64_t)&a2[v16 - v10];
    if (v16 != v10)
    {
      uint64_t v18 = 8 * (v16 - v10);
      do
      {
        if (v6 != v10) {
          sub_2D8554(v10, *v6, v6[1], (v6[1] - *v6) >> 3);
        }
        v6 += 3;
        v10 += 3;
        v18 -= 24;
      }
      while (v18);
      long long v10 = *(char ***)(a1 + 8);
    }
    char v25 = sub_34B234(v9, v17, a3, v10);
    goto LABEL_31;
  }
  if (a2 != (char **)a3)
  {
    uint64_t v19 = *(char ***)a1;
    do
    {
      if (v6 != v10) {
        sub_2D8554(v10, *v6, v6[1], (v6[1] - *v6) >> 3);
      }
      v6 += 3;
      v10 += 3;
      v19 += 3;
    }
    while (v6 != (char **)a3);
    uint64_t v16 = *(char ***)(a1 + 8);
    if (v16 == v19) {
      goto LABEL_39;
    }
    goto LABEL_35;
  }
  uint64_t v19 = *(char ***)a1;
  if (v16 != v10)
  {
LABEL_35:
    uint64_t v26 = v16;
    do
    {
      long long v28 = *(v26 - 3);
      v26 -= 3;
      unint64_t v27 = v28;
      if (v28)
      {
        *(v16 - 2) = v27;
        operator delete(v27);
      }
      uint64_t v16 = v26;
    }
    while (v26 != v19);
  }
LABEL_39:
  *(void *)(a1 + 8) = v19;
}

void sub_34B224(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_34B22C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *sub_34B234(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      uint64_t v9 = *(const void **)v6;
      uint64_t v8 = *(void *)(v6 + 8);
      uint64_t v10 = v8 - *(void *)v6;
      if (v8 != *(void *)v6)
      {
        if (v10 < 0) {
          sub_2E00();
        }
        long long v11 = (char *)operator new(v8 - *(void *)v6);
        *a4 = v11;
        a4[1] = v11;
        long long v7 = &v11[8 * (v10 >> 3)];
        a4[2] = v7;
        memcpy(v11, v9, v10 - 1);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_34B300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_34B314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  long long v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_46B68((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_34B338(uint64_t a1, std::string *__str, long long *a3, size_t __sz)
{
  uint64_t v6 = __str;
  int v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v10 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)a1) >> 4) < __sz)
  {
    if (!v10) {
      goto LABEL_22;
    }
    long long v11 = *(std::string **)(a1 + 8);
    uint64_t v12 = *(std::string **)a1;
    if (v11 == v10)
    {
LABEL_21:
      *(void *)(a1 + 8) = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
LABEL_22:
      if (__sz > 0x555555555555555) {
        goto LABEL_40;
      }
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
      uint64_t v18 = 2 * v17;
      if (2 * v17 <= __sz) {
        uint64_t v18 = __sz;
      }
      unint64_t v19 = v17 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v18;
      if (v19 > 0x555555555555555) {
LABEL_40:
      }
        sub_2E00();
      uint64_t v20 = 48 * v19;
      uint64_t v21 = (char *)operator new(48 * v19);
      *(void *)a1 = v21;
      *(void *)(a1 + 8) = v21;
      *(void *)(a1 + 16) = &v21[v20];
      uint64_t v15 = sub_34B5B0(v9, (long long *)v6, a3, v21);
LABEL_30:
      *(void *)(a1 + 8) = v15;
      return;
    }
    while (1)
    {
      if (SHIBYTE(v11[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v11[-1].__r_.__value_.__l.__data_);
        if (SHIBYTE(v11[-2].__r_.__value_.__r.__words[2]) < 0) {
LABEL_10:
        }
          operator delete(v11[-2].__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(v11[-2].__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_10;
      }
      v11 -= 2;
      if (v11 == v10)
      {
        uint64_t v12 = *(std::string **)a1;
        goto LABEL_21;
      }
    }
  }
  uint64_t v13 = *(std::string **)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (char *)v10) >> 4) < __sz)
  {
    long long v14 = (long long *)((char *)__str + 16 * (((char *)v13 - (char *)v10) >> 4));
    if (v13 != v10)
    {
      do
      {
        std::string::operator=(v10, v6);
        std::string::operator=(v10 + 1, v6 + 1);
        v6 += 2;
        v10 += 2;
      }
      while (v6 != (std::string *)v14);
      uint64_t v10 = *(std::string **)(a1 + 8);
    }
    uint64_t v15 = sub_34B5B0(v9, v14, a3, (char *)v10);
    goto LABEL_30;
  }
  if (__str == (std::string *)a3)
  {
    uint64_t v16 = *(std::string **)a1;
  }
  else
  {
    uint64_t v16 = *(std::string **)a1;
    do
    {
      std::string::operator=(v10, v6);
      std::string::operator=(v10 + 1, v6 + 1);
      v16 += 2;
      v6 += 2;
      v10 += 2;
    }
    while (v6 != (std::string *)a3);
    uint64_t v13 = *(std::string **)(a1 + 8);
  }
  while (v13 != v16)
  {
    if (SHIBYTE(v13[-1].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v13[-1].__r_.__value_.__l.__data_);
      if ((SHIBYTE(v13[-2].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_32;
      }
    }
    else if ((SHIBYTE(v13[-2].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_32;
    }
    operator delete(v13[-2].__r_.__value_.__l.__data_);
LABEL_32:
    v13 -= 2;
  }
  *(void *)(a1 + 8) = v16;
}

void sub_34B5A0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_34B5A8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_34B5B0(int a1, long long *a2, long long *a3, char *__dst)
{
  int v4 = __dst;
  long long v11 = __dst;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_4200(v4, *(void **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v8 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)int v4 = v8;
      }
      int v9 = v4 + 24;
      if (*((char *)v6 + 47) < 0)
      {
        sub_4200(v9, *((void **)v6 + 3), *((void *)v6 + 4));
      }
      else
      {
        long long v7 = *(long long *)((char *)v6 + 24);
        *((void *)v4 + 5) = *((void *)v6 + 5);
        *(_OWORD *)int v9 = v7;
      }
      v6 += 3;
      int v4 = v11 + 48;
      v11 += 48;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_34B67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 + 23) < 0)
  {
    operator delete(*(void **)v9);
    sub_29DF84((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_29DF84((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_34B6B4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v10 = *(void ***)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - *(void *)a1) >> 3) < a4)
  {
    if (v10)
    {
      sub_29DB80((void ***)a1);
      operator delete(*(void **)a1);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a4 > 0x492492492492492) {
      goto LABEL_43;
    }
    unint64_t v11 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 3);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= a4) {
      uint64_t v12 = a4;
    }
    unint64_t v13 = v11 >= 0x249249249249249 ? 0x492492492492492 : v12;
    if (v13 > 0x492492492492492) {
LABEL_43:
    }
      sub_2E00();
    uint64_t v14 = 56 * v13;
    uint64_t v15 = (char *)operator new(56 * v13);
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = &v15[v14];
    uint64_t v16 = sub_34B9D4(v9, v6, a3, (uint64_t)v15);
LABEL_25:
    *(void *)(a1 + 8) = v16;
    return;
  }
  unint64_t v17 = *(void ***)(a1 + 8);
  unint64_t v18 = 0x6DB6DB6DB6DB6DB7 * (v17 - v10);
  if (v18 < a4)
  {
    uint64_t v19 = a2 + 8 * (v17 - v10);
    if (v17 != v10)
    {
      uint64_t v20 = v10 + 3;
      uint64_t v21 = 56 * v18;
      do
      {
        if ((void **)v6 != v20 - 3)
        {
          sub_34BDF8(v20 - 3, *(void *)v6, *(void *)(v6 + 8), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3));
          sub_31AF54(v20, *(char **)(v6 + 24), *(char **)(v6 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 32) - *(void *)(v6 + 24)) >> 2));
        }
        v20[3] = *(void **)(v6 + 48);
        v6 += 56;
        v20 += 7;
        v21 -= 56;
      }
      while (v21);
      uint64_t v10 = *(void ***)(a1 + 8);
    }
    uint64_t v16 = sub_34B9D4(v9, v19, a3, (uint64_t)v10);
    goto LABEL_25;
  }
  if (a2 != a3)
  {
    unint64_t v22 = v10 + 3;
    do
    {
      if ((void **)v6 != v22 - 3)
      {
        sub_34BDF8(v22 - 3, *(void *)v6, *(void *)(v6 + 8), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3));
        sub_31AF54(v22, *(char **)(v6 + 24), *(char **)(v6 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 32) - *(void *)(v6 + 24)) >> 2));
      }
      v22[3] = *(void **)(v6 + 48);
      v6 += 56;
      v10 += 7;
      v22 += 7;
    }
    while (v6 != a3);
    unint64_t v17 = *(void ***)(a1 + 8);
  }
  if (v17 != v10)
  {
    while (1)
    {
      int64x2_t v24 = *(v17 - 4);
      if (v24)
      {
        *(v17 - 3) = v24;
        operator delete(v24);
      }
      char v25 = v17 - 7;
      uint64_t v26 = (void **)*(v17 - 7);
      if (!v26) {
        goto LABEL_31;
      }
      unint64_t v27 = (void **)*(v17 - 6);
      uint64_t v23 = *(v17 - 7);
      if (v27 != v26) {
        break;
      }
LABEL_30:
      *(v17 - 6) = v26;
      operator delete(v23);
LABEL_31:
      v17 -= 7;
      if (v25 == v10) {
        goto LABEL_28;
      }
    }
    while (*((char *)v27 - 17) < 0)
    {
      operator delete(*(v27 - 5));
      long long v28 = *(v27 - 8);
      if (v28) {
        goto LABEL_42;
      }
LABEL_37:
      v27 -= 9;
      if (v27 == v26)
      {
        uint64_t v23 = *v25;
        goto LABEL_30;
      }
    }
    long long v28 = *(v27 - 8);
    if (!v28) {
      goto LABEL_37;
    }
LABEL_42:
    *(v27 - 7) = v28;
    operator delete(v28);
    goto LABEL_37;
  }
LABEL_28:
  *(void *)(a1 + 8) = v10;
}

void sub_34B9C4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_34B9CC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_34B9D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_34BA50((void *)(a4 + v7), (uint64_t *)(a2 + v7));
      v7 += 56;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_34BA34(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_20A714C();
  }
  _Unwind_Resume(exception_object);
}

void *sub_34BA50(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_34BB54(a1, *a2, a2[1], 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 3));
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  long long v5 = (unsigned char *)a2[3];
  int v4 = (unsigned char *)a2[4];
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v6 >> 2) >= 0x1555555555555556) {
      sub_2E00();
    }
    uint64_t v7 = (char *)operator new(v6);
    a1[3] = v7;
    a1[4] = v7;
    uint64_t v8 = &v7[4 * (v6 >> 2)];
    a1[5] = v8;
    memcpy(v7, v5, v6);
    a1[4] = v8;
  }
  a1[6] = a2[6];
  return a1;
}

void sub_34BB30(_Unwind_Exception *a1)
{
  int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_20A71E8((void **)v1);
  _Unwind_Resume(a1);
}

void *sub_34BB54(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = result;
    if (a4 >= 0x38E38E38E38E38FLL) {
      sub_2E00();
    }
    __n128 result = operator new(72 * a4);
    uint64_t v8 = result;
    *long long v5 = result;
    v5[1] = result;
    v5[2] = &result[9 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        __n128 result = sub_34BD10((uint64_t)(v5 + 2), (uint64_t)&v8[v9 / 8], (uint64_t *)(a2 + v9));
        v9 += 72;
      }
      while (a2 + v9 != a3);
      uint64_t v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_34BC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_34BC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (v11) {
    sub_20A727C();
  }
  *(void *)(v9 + 8) = v10;
  sub_34BC5C(&a9);
  _Unwind_Resume(a1);
}

void ***sub_34BC5C(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (void **)**result;
    if (v3)
    {
      int v4 = (void **)v2[1];
      long long v5 = **result;
      if (v4 == v3)
      {
LABEL_13:
        v2[1] = v3;
        operator delete(v5);
        return v1;
      }
      while (*((char *)v4 - 17) < 0)
      {
        operator delete(*(v4 - 5));
        int64_t v6 = *(v4 - 8);
        if (v6) {
          goto LABEL_11;
        }
LABEL_6:
        v4 -= 9;
        if (v4 == v3)
        {
          long long v5 = **v1;
          goto LABEL_13;
        }
      }
      int64_t v6 = *(v4 - 8);
      if (!v6) {
        goto LABEL_6;
      }
LABEL_11:
      *(v4 - 7) = v6;
      operator delete(v6);
      goto LABEL_6;
    }
  }
  return result;
}

unsigned char *sub_34BD10(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = v5;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  uint64_t v7 = (unsigned char *)a3[1];
  int64_t v6 = (unsigned char *)a3[2];
  uint64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0) {
      sub_2E00();
    }
    uint64_t v9 = (char *)operator new(v6 - v7);
    *(void *)(a2 + 8) = v9;
    *(void *)(a2 + 16) = v9;
    uint64_t v10 = &v9[8 * (v8 >> 3)];
    *(void *)(a2 + 24) = v10;
    memcpy(v9, v7, v8 - 1);
    *(void *)(a2 + 16) = v10;
  }
  __n128 result = (unsigned char *)(a2 + 32);
  if (*((char *)a3 + 55) < 0)
  {
    __n128 result = sub_4200(result, (void *)a3[4], a3[5]);
  }
  else
  {
    long long v12 = *((_OWORD *)a3 + 2);
    *(void *)(a2 + 48) = a3[6];
    *(_OWORD *)__n128 result = v12;
  }
  *(void *)(a2 + 56) = a3[7];
  *(_DWORD *)(a2 + 64) = *((_DWORD *)a3 + 16);
  return result;
}

void sub_34BDD8(_Unwind_Exception *exception_object)
{
  int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_34BDF8(void **a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t v10 = (void **)*a1;
  if (0x8E38E38E38E38E39 * ((v8 - (uint64_t)*a1) >> 3) >= __sz)
  {
    uint64_t v14 = (void **)a1[1];
    if (0x8E38E38E38E38E39 * (v14 - v10) < __sz)
    {
      uint64_t v15 = a2 + 8 * (v14 - v10);
      if (v14 != v10)
      {
        uint64_t v16 = (std::string *)(v10 + 1);
        uint64_t v17 = a2 + 16;
        do
        {
          uint64_t v18 = v17 - 16;
          v16[-1].__r_.__value_.__r.__words[2] = *(void *)(v17 - 16);
          if (&v16[-1].__r_.__value_.__r.__words[2] != (std::string::size_type *)(v17 - 16)) {
            sub_2D8554(v16, *(char **)(v17 - 8), *(char **)v17, (uint64_t)(*(void *)v17 - *(void *)(v17 - 8)) >> 3);
          }
          std::string::operator=(v16 + 1, (const std::string *)(v17 + 16));
          v16[2].__r_.__value_.__r.__words[0] = *(void *)(v17 + 40);
          LODWORD(v16[2].__r_.__value_.__r.__words[1]) = *(_DWORD *)(v17 + 48);
          v16 += 3;
          v17 += 72;
        }
        while (v18 + 72 != v15);
        uint64_t v10 = (void **)a1[1];
      }
      unint64_t v27 = (char *)v10;
      if (v15 != a3)
      {
        uint64_t v28 = 0;
        do
        {
          sub_34BD10(v9, (uint64_t)&v10[v28], (uint64_t *)(v15 + v28 * 8));
          v28 += 9;
        }
        while (v15 + v28 * 8 != a3);
        unint64_t v27 = (char *)&v10[v28];
      }
      a1[1] = v27;
      return;
    }
    if (a2 != a3)
    {
      uint64_t v19 = (std::string *)(v10 + 1);
      uint64_t v20 = a2 + 16;
      do
      {
        uint64_t v21 = v20 - 16;
        v19[-1].__r_.__value_.__r.__words[2] = *(void *)(v20 - 16);
        if (&v19[-1].__r_.__value_.__r.__words[2] != (std::string::size_type *)(v20 - 16)) {
          sub_2D8554(v19, *(char **)(v20 - 8), *(char **)v20, (uint64_t)(*(void *)v20 - *(void *)(v20 - 8)) >> 3);
        }
        std::string::operator=(v19 + 1, (const std::string *)(v20 + 16));
        v19[2].__r_.__value_.__r.__words[0] = *(void *)(v20 + 40);
        LODWORD(v19[2].__r_.__value_.__r.__words[1]) = *(_DWORD *)(v20 + 48);
        v10 += 9;
        v19 += 3;
        v20 += 72;
      }
      while (v21 + 72 != a3);
      uint64_t v14 = (void **)a1[1];
    }
    while (1)
    {
      if (v14 == v10) {
        goto LABEL_35;
      }
      if (*((char *)v14 - 17) < 0) {
        break;
      }
      uint64_t v29 = *(v14 - 8);
      if (v29) {
        goto LABEL_49;
      }
LABEL_43:
      v14 -= 9;
    }
    operator delete(*(v14 - 5));
    uint64_t v29 = *(v14 - 8);
    if (!v29) {
      goto LABEL_43;
    }
LABEL_49:
    *(v14 - 7) = v29;
    operator delete(v29);
    goto LABEL_43;
  }
  if (v10)
  {
    uint64_t v11 = (void **)a1[1];
    long long v12 = *a1;
    if (v11 == v10)
    {
LABEL_23:
      a1[1] = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      goto LABEL_24;
    }
    while (*((char *)v11 - 17) < 0)
    {
      operator delete(*(v11 - 5));
      unint64_t v13 = *(v11 - 8);
      if (v13) {
        goto LABEL_10;
      }
LABEL_5:
      v11 -= 9;
      if (v11 == v10)
      {
        long long v12 = *a1;
        goto LABEL_23;
      }
    }
    unint64_t v13 = *(v11 - 8);
    if (!v13) {
      goto LABEL_5;
    }
LABEL_10:
    *(v11 - 7) = v13;
    operator delete(v13);
    goto LABEL_5;
  }
LABEL_24:
  if (__sz > 0x38E38E38E38E38ELL) {
    goto LABEL_50;
  }
  unint64_t v22 = 0x8E38E38E38E38E39 * (v8 >> 3);
  uint64_t v23 = 2 * v22;
  if (2 * v22 <= __sz) {
    uint64_t v23 = __sz;
  }
  unint64_t v24 = v22 >= 0x1C71C71C71C71C7 ? 0x38E38E38E38E38ELL : v23;
  if (v24 > 0x38E38E38E38E38ELL) {
LABEL_50:
  }
    sub_2E00();
  uint64_t v25 = 9 * v24;
  uint64_t v10 = (void **)operator new(72 * v24);
  *a1 = v10;
  a1[1] = v10;
  a1[2] = &v10[v25];
  if (a2 != a3)
  {
    unint64_t v26 = 0;
    do
    {
      sub_34BD10(v9, (uint64_t)&v10[v26 / 8], (uint64_t *)(a2 + v26));
      v26 += 72;
    }
    while (a2 + v26 != a3);
    uint64_t v10 = (void **)((char *)v10 + v26);
  }
LABEL_35:
  a1[1] = v10;
}

void sub_34C13C(_Unwind_Exception *exception_object)
{
  if (v3)
  {
    sub_20A727C();
    *(void *)(v1 + 8) = v2;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t sub_34C17C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = a3;
  uint64_t v11 = a1[2];
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (0x2C3F35BA781948B1 * ((uint64_t)(v11 - v12) >> 3) >= a5)
  {
    uint64_t v18 = v12 - a2;
    if (0x2C3F35BA781948B1 * ((uint64_t)(v12 - a2) >> 3) >= a5)
    {
      uint64_t v19 = a3 + 648 * a5;
      uint64_t v21 = *(void *)(v9 - 8);
      unint64_t v22 = v12 - 648 * a5;
      uint64_t v20 = v21;
      if (v22 >= v12) {
        goto LABEL_19;
      }
      goto LABEL_17;
    }
    uint64_t v19 = a3 + 8 * ((uint64_t)(v12 - a2) >> 3);
    uint64_t v20 = sub_34C5C8(v9, v19, a4, *(void *)(v9 - 8));
    uint64_t v21 = v20;
    a1[1] = v20;
    if (v18 >= 1)
    {
      unint64_t v22 = v20 - 648 * a5;
      if (v22 >= v12) {
        goto LABEL_19;
      }
LABEL_17:
      unint64_t v23 = v22;
      uint64_t v20 = v21;
      do
      {
        sub_338DCC(v20, v23);
        v23 += 648;
        uint64_t v20 = v24 + 648;
      }
      while (v23 < v12);
LABEL_19:
      a1[1] = v20;
      sub_34D46C(v5, v22, v21);
      if (v19 != v7)
      {
        uint64_t v25 = v5;
        do
        {
          sub_34ADE4(v25, v7);
          long long v26 = *(_OWORD *)(v7 + 436);
          *(_OWORD *)(v25 + 424) = *(_OWORD *)(v7 + 424);
          *(_OWORD *)(v25 + 436) = v26;
          if (v25 != v7) {
            sub_34D648((uint64_t *)(v25 + 456), *(void *)(v7 + 456), *(void *)(v7 + 464), 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(void *)(v7 + 464) - *(void *)(v7 + 456)) >> 3));
          }
          sub_34D568(v25 + 480, v7 + 480);
          v7 += 648;
          v25 += 648;
        }
        while (v7 != v19);
      }
    }
    return v5;
  }
  uint64_t v13 = *a1;
  unint64_t v14 = a5 + 0x2C3F35BA781948B1 * ((uint64_t)(v12 - *a1) >> 3);
  if (v14 > 0x6522C3F35BA781) {
    sub_2E00();
  }
  unint64_t v15 = 0x2C3F35BA781948B1 * ((v10 - v13) >> 3);
  if (2 * v15 > v14) {
    unint64_t v14 = 2 * v15;
  }
  if (v15 >= 0x329161F9ADD3C0) {
    unint64_t v16 = 0x6522C3F35BA781;
  }
  else {
    unint64_t v16 = v14;
  }
  uint64_t v42 = v9;
  if (v16)
  {
    if (v16 > 0x6522C3F35BA781) {
      sub_188D718();
    }
    uint64_t v17 = (char *)operator new(648 * v16);
  }
  else
  {
    uint64_t v17 = 0;
  }
  uint64_t v28 = (uint64_t)&v17[8 * ((v5 - v13) >> 3)];
  uint64_t v40 = v28;
  uint64_t v41 = &v17[648 * v16];
  uint64_t v29 = 648 * a5;
  uint64_t v30 = v28 + 648 * a5;
  do
  {
    sub_34C654(v42, v28, v7);
    v28 += 648;
    v7 += 648;
    v29 -= 648;
  }
  while (v29);
  uint64_t v27 = v40;
  uint64_t v31 = *a1;
  uint64_t v32 = v40;
  if (*a1 != v5)
  {
    uint64_t v32 = v40;
    uint64_t v33 = v5;
    do
    {
      v32 -= 648;
      v33 -= 648;
      sub_338DCC(v32, v33);
    }
    while (v33 != v31);
  }
  uint64_t v34 = a1[1];
  if (v34 != v5)
  {
    do
    {
      sub_338DCC(v30, v5);
      v5 += 648;
      v30 += 648;
    }
    while (v5 != v34);
    uint64_t v5 = a1[1];
  }
  int v35 = (void *)*a1;
  *a1 = v32;
  a1[1] = v30;
  a1[2] = (uint64_t)v41;
  while ((void *)v5 != v35)
  {
    sub_303198(v5 - 168);
    uint64_t v36 = *(void *)(v5 - 192);
    if (v36)
    {
      uint64_t v37 = *(void *)(v5 - 184);
      long long v38 = *(void **)(v5 - 192);
      if (v37 != v36)
      {
        do
          uint64_t v37 = sub_30328C(v37 - 184);
        while (v37 != v36);
        long long v38 = *(void **)(v5 - 192);
      }
      *(void *)(v5 - 184) = v36;
      operator delete(v38);
    }
    v5 -= 648;
    sub_29D95C(v5);
  }
  if (v35) {
    operator delete(v35);
  }
  return v27;
}

void sub_34C500(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_34C508(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_34C520((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_34C520(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 648;
    sub_303198(i - 168);
    uint64_t v4 = *(void *)(i - 192);
    if (v4)
    {
      uint64_t v5 = *(void *)(i - 184);
      int64_t v6 = *(void **)(i - 192);
      if (v5 != v4)
      {
        do
          uint64_t v5 = sub_30328C(v5 - 184);
        while (v5 != v4);
        int64_t v6 = *(void **)(i - 192);
      }
      *(void *)(i - 184) = v4;
      operator delete(v6);
    }
    sub_29D95C(i - 648);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_34C5C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v8 = 0;
    do
    {
      sub_34C654(a1, a4 + v8, a2 + v8);
      v8 += 648;
    }
    while (a2 + v8 != a3);
    a4 += v8;
  }
  return a4;
}

void sub_34C638(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_20A72C8();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_34C654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_34C720(a2, a3);
  long long v5 = *(_OWORD *)(a3 + 424);
  *(_OWORD *)(a2 + 436) = *(_OWORD *)(a3 + 436);
  *(_OWORD *)(a2 + 424) = v5;
  *(void *)(a2 + 464) = 0;
  *(void *)(a2 + 472) = 0;
  *(void *)(a2 + 456) = 0;
  sub_34CCF4(a2 + 456, *(void *)(a3 + 456), *(void *)(a3 + 464), 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(void *)(a3 + 464) - *(void *)(a3 + 456)) >> 3));
  return sub_34D040(a2 + 480, a3 + 480);
}

void sub_34C6E4(_Unwind_Exception *a1)
{
  if (*v2)
  {
    sub_20A7344();
    sub_29D95C(v1);
    _Unwind_Resume(a1);
  }
  sub_29D95C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_34C720(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_34CA5C((void *)a1, (uint64_t *)a2);
  *(_OWORD *)(v4 + 3) = *(_OWORD *)(a2 + 24);
  if (*(char *)(a2 + 63) < 0)
  {
    sub_4200((unsigned char *)v4 + 40, *(void **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 40);
    v4[7] = *(void *)(a2 + 56);
    *(_OWORD *)(v4 + 5) = v5;
  }
  sub_34CB34((char **)(a1 + 64), (long long **)(a2 + 64));
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  if (*(char *)(a2 + 119) < 0)
  {
    sub_4200((unsigned char *)(a1 + 96), *(void **)(a2 + 96), *(void *)(a2 + 104));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = v6;
  }
  if (*(char *)(a2 + 143) < 0)
  {
    sub_4200((unsigned char *)(a1 + 120), *(void **)(a2 + 120), *(void *)(a2 + 128));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 120);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = v7;
  }
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v8;
  if (*(char *)(a2 + 191) < 0)
  {
    sub_4200((unsigned char *)(a1 + 168), *(void **)(a2 + 168), *(void *)(a2 + 176));
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 168);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = v9;
  }
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  sub_8A6F8((char *)(a1 + 192), *(void *)(a2 + 192), *(void *)(a2 + 200), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 200) - *(void *)(a2 + 192)) >> 3));
  uint64_t v10 = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 216) = v10;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  unint64_t v12 = *(unsigned char **)(a2 + 224);
  uint64_t v11 = *(unsigned char **)(a2 + 232);
  int64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      sub_2E00();
    }
    unint64_t v14 = (char *)operator new(v11 - v12);
    *(void *)(a1 + 224) = v14;
    *(void *)(a1 + 232) = v14;
    unint64_t v15 = &v14[8 * (v13 >> 3)];
    *(void *)(a1 + 240) = v15;
    memcpy(v14, v12, v13);
    *(void *)(a1 + 232) = v15;
  }
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  sub_8A6F8((char *)(a1 + 248), *(void *)(a2 + 248), *(void *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 256) - *(void *)(a2 + 248)) >> 3));
  *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 272);
  long long v16 = *(_OWORD *)(a2 + 280);
  long long v17 = *(_OWORD *)(a2 + 296);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(_OWORD *)(a1 + 280) = v16;
  *(_OWORD *)(a1 + 296) = v17;
  sub_34CC0C((void *)(a1 + 320), (uint64_t *)(a2 + 320));
  *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 344);
  long long v18 = *(_OWORD *)(a2 + 360);
  long long v19 = *(_OWORD *)(a2 + 376);
  long long v20 = *(_OWORD *)(a2 + 392);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(_OWORD *)(a1 + 376) = v19;
  *(_OWORD *)(a1 + 392) = v20;
  *(_OWORD *)(a1 + 360) = v18;
  *(unsigned char *)(a1 + 416) = *(unsigned char *)(a2 + 416);
  return a1;
}

void sub_34C970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10)
{
  if (*(char *)(v10 + 143) < 0)
  {
    operator delete(*v12);
    if ((*(char *)(v10 + 119) & 0x80000000) == 0)
    {
LABEL_4:
      sub_1A6DC(a10);
      if (*(char *)(v10 + 63) < 0) {
        operator delete(*a9);
      }
      sub_36094((void **)v10);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v10 + 119) & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(*v11);
  goto LABEL_4;
}

void *sub_34CA5C(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    long long v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = sub_34B234(v3, v4, v5, v8);
  }
  return a1;
}

void sub_34CB08(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20A73AC((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

char **sub_34CB34(char **a1, long long **a2)
{
  a1[2] = 0;
  int v3 = a1 + 16;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = (char *)v5 - (char *)*a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 4);
    if (v7 >= 0x555555555555556) {
      sub_2E00();
    }
    long long v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[48 * v7];
    a1[1] = sub_34B5B0(v3, v4, v5, v8);
  }
  return a1;
}

void sub_34CBE0(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20A7414((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_34CC0C(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0x6DB6DB6DB6DB6DB7 * (v6 >> 3);
    if (v7 >= 0x492492492492493) {
      sub_2E00();
    }
    long long v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[56 * v7];
    a1[1] = sub_34B9D4(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_34CCC4(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  if (*(void *)v1)
  {
    sub_29DB80((void ***)v1);
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_34CCF4(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = (void *)result;
    if (a4 >= 0x1642C8590B21643) {
      sub_2E00();
    }
    __n128 result = (uint64_t)operator new(184 * a4);
    uint64_t v8 = result;
    *uint64_t v5 = result;
    v5[1] = result;
    v5[2] = result + 184 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        __n128 result = sub_34CE84(v8 + v9, a2 + v9);
        v9 += 184;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_34CDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_34CDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 184)
    sub_30328C(v10 - 184 + v11);
  *(void *)(v9 + 8) = v10;
  sub_34CDFC(&a9);
  _Unwind_Resume(a1);
}

void ***sub_34CDFC(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      uint64_t v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          uint64_t v4 = sub_30328C(v4 - 184);
        while ((void *)v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_34CE84(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_4D6D0((void *)a1, *(void *)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v5 = *(unsigned char **)(a2 + 24);
  uint64_t v4 = *(unsigned char **)(a2 + 32);
  uint64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      sub_2E00();
    }
    unint64_t v7 = (char *)operator new(v4 - v5);
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = v7;
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a1 + 40) = v8;
    memcpy(v7, v5, v6 - 1);
    *(void *)(a1 + 32) = v8;
  }
  sub_34CB34((char **)(a1 + 48), (long long **)(a2 + 48));
  sub_34CB34((char **)(a1 + 72), (long long **)(a2 + 72));
  sub_34CB34((char **)(a1 + 96), (long long **)(a2 + 96));
  long long v9 = *(_OWORD *)(a2 + 120);
  long long v10 = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 120) = v9;
  *(_OWORD *)(a1 + 136) = v10;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  unint64_t v12 = *(unsigned char **)(a2 + 152);
  uint64_t v11 = *(unsigned char **)(a2 + 160);
  int64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      sub_2E00();
    }
    unint64_t v14 = (char *)operator new(v11 - v12);
    *(void *)(a1 + 152) = v14;
    *(void *)(a1 + 160) = v14;
    unint64_t v15 = &v14[4 * (v13 >> 2)];
    *(void *)(a1 + 168) = v15;
    memcpy(v14, v12, v13);
    *(void *)(a1 + 160) = v15;
  }
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  return a1;
}

void sub_34CFCC(_Unwind_Exception *a1)
{
  if (*v4) {
    sub_20A7484();
  }
  sub_1A6DC(v3);
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v6;
    operator delete(v6);
  }
  sub_4CBF8((void ***)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_34D040(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (long long **)(a2 + 32);
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v5 = (char **)(a1 + 32);
  sub_34CB34((char **)(a1 + 8), (long long **)(a2 + 8));
  sub_34CB34(v5, v4);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  sub_34CB34((char **)(a1 + 64), (long long **)(a2 + 64));
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  sub_34D1E0(a1 + 88, *(void *)(a2 + 88), *(void *)(a2 + 96), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 4));
  uint64_t v6 = (unsigned char *)(a1 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    sub_4200(v6, *(void **)(a2 + 112), *(void *)(a2 + 120));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(_OWORD *)uint64_t v6 = v7;
  }
  long long v8 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v8;
  return a1;
}

void sub_34D124(_Unwind_Exception *a1)
{
  sub_34D184(v3);
  sub_1A6DC(v2);
  sub_3033D0(v1);
  _Unwind_Resume(a1);
}

void sub_34D150(_Unwind_Exception *a1)
{
  sub_3033D0(v1);
  _Unwind_Resume(a1);
}

void sub_34D164(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_20A7500();
  }
  _Unwind_Resume(exception_object);
}

void **sub_34D184(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        uint64_t v3 = sub_3034C4(v3 - 10);
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_34D1E0(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = (void *)result;
    if (a4 >= 0x333333333333334) {
      sub_2E00();
    }
    __n128 result = (uint64_t)operator new(80 * a4);
    uint64_t v8 = result;
    *uint64_t v5 = result;
    v5[1] = result;
    v5[2] = result + 80 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        __n128 result = sub_34D36C(v8 + v9, a2 + v9);
        v9 += 80;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_34D2A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_34D2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 80)
    sub_3034C4((void *)(v10 - 80 + v11));
  *(void *)(v9 + 8) = v10;
  sub_34D2E4(&a9);
  _Unwind_Resume(a1);
}

void ***sub_34D2E4(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = v2[1];
      uint64_t v5 = **v1;
      if (v4 != v3)
      {
        do
          uint64_t v4 = sub_3034C4(v4 - 10);
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_34D36C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (long long **)(a2 + 32);
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v5 = (char **)(a1 + 32);
  sub_34CB34((char **)(a1 + 8), (long long **)(a2 + 8));
  sub_34CB34(v5, v4);
  sub_34CB34((char **)(a1 + 56), (long long **)(a2 + 56));
  return a1;
}

void sub_34D3DC(_Unwind_Exception *exception_object)
{
  uint64_t v4 = v3;
  if (*v4) {
    sub_20A757C();
  }
  uint64_t v6 = (void **)*v2;
  if (!*v2) {
LABEL_14:
  }
    _Unwind_Resume(exception_object);
  long long v7 = *(void ***)(v1 + 16);
  uint64_t v8 = *v2;
  if (v7 == v6)
  {
LABEL_13:
    *(void *)(v1 + 16) = v6;
    operator delete(v8);
    goto LABEL_14;
  }
  while (1)
  {
    if (*((char *)v7 - 1) < 0)
    {
      operator delete(*(v7 - 3));
      if (*((char *)v7 - 25) < 0) {
LABEL_11:
      }
        operator delete(*(v7 - 6));
    }
    else if (*((char *)v7 - 25) < 0)
    {
      goto LABEL_11;
    }
    v7 -= 6;
    if (v7 == v6)
    {
      uint64_t v8 = *v2;
      goto LABEL_13;
    }
  }
}

uint64_t sub_34D46C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      uint64_t v7 = v6 - 648;
      sub_301388((char **)(a3 - 648), v6 - 648);
      long long v8 = *(_OWORD *)(v6 - 212);
      uint64_t v9 = (void **)(a3 - 192);
      uint64_t v10 = *(void **)(a3 - 192);
      *(_OWORD *)(a3 - 224) = *(_OWORD *)(v6 - 224);
      *(_OWORD *)(a3 - 212) = v8;
      if (v10)
      {
        uint64_t v11 = *(void *)(a3 - 184);
        unint64_t v12 = v10;
        if ((void *)v11 != v10)
        {
          do
            uint64_t v11 = sub_30328C(v11 - 184);
          while ((void *)v11 != v10);
          unint64_t v12 = *v9;
        }
        *(void *)(a3 - 184) = v10;
        operator delete(v12);
        *uint64_t v9 = 0;
        *(void *)(a3 - 184) = 0;
        *(void *)(a3 - 176) = 0;
      }
      *(_OWORD *)(a3 - 192) = *(_OWORD *)(v6 - 192);
      *(void *)(a3 - 176) = *(void *)(v6 - 176);
      *(void *)(v6 - 192) = 0;
      *(void *)(v6 - 184) = 0;
      *(void *)(v6 - 176) = 0;
      sub_303024(a3 - 168, v6 - 168);
      a3 -= 648;
      v6 -= 648;
    }
    while (v7 != a1);
  }
  return a2;
}

uint64_t sub_34D568(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  if (a1 == a2)
  {
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  }
  else
  {
    sub_34B338(a1 + 8, *(std::string **)(a2 + 8), *(long long **)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 4));
    sub_34B338(a1 + 32, *(std::string **)(a2 + 32), *(long long **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 4));
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    sub_34B338(a1 + 64, *(std::string **)(a2 + 64), *(long long **)(a2 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4));
    sub_34DD54((char **)(a1 + 88), *(char **)(a2 + 88), *(char **)(a2 + 96), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 4));
  }
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 112));
  long long v4 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = v4;
  return a1;
}

uint64_t sub_34D648(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0xD37A6F4DE9BD37A7 * ((v8 - *a1) >> 3) >= a4)
  {
    uint64_t result = a1[1];
    if (0xD37A6F4DE9BD37A7 * ((result - v9) >> 3) >= a4)
    {
      if (a2 == a3)
      {
        uint64_t v23 = v9;
      }
      else
      {
        uint64_t v23 = v9;
        do
        {
          sub_34D8F0(v9, v6);
          v6 += 184;
          v9 += 184;
          v23 += 184;
        }
        while (v6 != a3);
        uint64_t result = a1[1];
      }
      while (result != v23)
        uint64_t result = sub_30328C(result - 184);
      a1[1] = v23;
    }
    else
    {
      uint64_t v19 = a2 + 8 * ((result - v9) >> 3);
      if (result != v9)
      {
        uint64_t v20 = 8 * ((result - v9) >> 3);
        do
        {
          uint64_t result = sub_34D8F0(v9, v6);
          v6 += 184;
          v9 += 184;
          v20 -= 184;
        }
        while (v20);
        uint64_t v9 = a1[1];
      }
      uint64_t v21 = v9;
      if (v19 != a3)
      {
        uint64_t v22 = 0;
        do
        {
          uint64_t result = sub_34CE84(v9 + v22, v19 + v22);
          v22 += 184;
        }
        while (v19 + v22 != a3);
        uint64_t v21 = v9 + v22;
      }
      a1[1] = v21;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = a1[1];
      uint64_t v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          uint64_t v10 = sub_30328C(v10 - 184);
        while (v10 != v9);
        uint64_t v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x1642C8590B21642) {
      goto LABEL_37;
    }
    unint64_t v12 = 0xD37A6F4DE9BD37A7 * (v8 >> 3);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= a4) {
      uint64_t v13 = a4;
    }
    unint64_t v14 = v12 >= 0xB21642C8590B21 ? 0x1642C8590B21642 : v13;
    if (v14 > 0x1642C8590B21642) {
LABEL_37:
    }
      sub_2E00();
    uint64_t v15 = 184 * v14;
    uint64_t result = (uint64_t)operator new(184 * v14);
    uint64_t v17 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v15;
    if (v6 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t result = sub_34CE84(v17 + v18, v6 + v18);
        v18 += 184;
      }
      while (v6 + v18 != a3);
      v17 += v18;
    }
    a1[1] = v17;
  }
  return result;
}

uint64_t sub_34D8F0(uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
  {
    long long v5 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = v5;
  }
  else
  {
    sub_34D9E4((uint64_t *)a1, *(void *)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    sub_2D8554((void *)(a1 + 24), *(char **)(a2 + 24), *(char **)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
    sub_34B338(a1 + 48, *(std::string **)(a2 + 48), *(long long **)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 4));
    sub_34B338(a1 + 72, *(std::string **)(a2 + 72), *(long long **)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 4));
    sub_34B338(a1 + 96, *(std::string **)(a2 + 96), *(long long **)(a2 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 4));
    long long v4 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = v4;
    sub_147D0((void *)(a1 + 152), *(char **)(a2 + 152), *(char **)(a2 + 160), (uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 2);
  }
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  return a1;
}

void sub_34D9E4(uint64_t *a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *a1) >> 3) < __sz)
  {
    if (v9)
    {
      uint64_t v10 = (void **)a1[1];
      uint64_t v11 = (void *)*a1;
      if (v10 != (void **)v9)
      {
        unint64_t v12 = (void **)a1[1];
        do
        {
          uint64_t v15 = (char *)*(v12 - 3);
          v12 -= 3;
          unint64_t v14 = v15;
          if (v15)
          {
            long long v16 = (char *)*(v10 - 2);
            uint64_t v13 = v14;
            if (v16 != v14)
            {
              uint64_t v17 = (char *)*(v10 - 2);
              do
              {
                uint64_t v19 = (void *)*((void *)v17 - 3);
                v17 -= 24;
                uint64_t v18 = v19;
                if (v19)
                {
                  *((void *)v16 - 2) = v18;
                  operator delete(v18);
                }
                long long v16 = v17;
              }
              while (v17 != v14);
              uint64_t v13 = *v12;
            }
            *(v10 - 2) = v14;
            operator delete(v13);
          }
          uint64_t v10 = v12;
        }
        while (v12 != (void **)v9);
        uint64_t v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_60;
    }
    unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v25 = 2 * v24;
    if (2 * v24 <= __sz) {
      uint64_t v25 = __sz;
    }
    unint64_t v26 = v24 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v25;
    if (v26 > 0xAAAAAAAAAAAAAAALL) {
LABEL_60:
    }
      sub_2E00();
    uint64_t v27 = 24 * v26;
    uint64_t v28 = (char *)operator new(24 * v26);
    *a1 = (uint64_t)v28;
    a1[1] = (uint64_t)v28;
    a1[2] = (uint64_t)&v28[v27];
    if (v6 != a3)
    {
      uint64_t v29 = 0;
      do
      {
        sub_4D4C4(&v28[v29], (uint64_t *)(v6 + v29));
        v29 += 24;
      }
      while (v6 + v29 != a3);
      v28 += v29;
    }
    a1[1] = (uint64_t)v28;
    return;
  }
  uint64_t v20 = (void **)a1[1];
  if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v20 - v9) >> 3) >= __sz)
  {
    if (a2 == a3)
    {
      uint64_t v23 = (void **)*a1;
      if (v20 == (void **)v9)
      {
LABEL_58:
        a1[1] = (uint64_t)v23;
        return;
      }
    }
    else
    {
      uint64_t v23 = (void **)*a1;
      do
      {
        if (v6 != v9) {
          sub_31ACC4(v9, *(char ***)v6, *(void *)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3));
        }
        v6 += 24;
        v9 += 24;
        v23 += 3;
      }
      while (v6 != a3);
      uint64_t v20 = (void **)a1[1];
      if (v20 == v23) {
        goto LABEL_58;
      }
    }
    uint64_t v32 = v20;
    do
    {
      int v35 = (char *)*(v32 - 3);
      v32 -= 3;
      uint64_t v34 = v35;
      if (v35)
      {
        uint64_t v36 = (char *)*(v20 - 2);
        uint64_t v33 = v34;
        if (v36 != v34)
        {
          uint64_t v37 = (char *)*(v20 - 2);
          do
          {
            unint64_t v39 = (void *)*((void *)v37 - 3);
            v37 -= 24;
            long long v38 = v39;
            if (v39)
            {
              *((void *)v36 - 2) = v38;
              operator delete(v38);
            }
            uint64_t v36 = v37;
          }
          while (v37 != v34);
          uint64_t v33 = *v32;
        }
        *(v20 - 2) = v34;
        operator delete(v33);
      }
      uint64_t v20 = v32;
    }
    while (v32 != v23);
    goto LABEL_58;
  }
  uint64_t v21 = a2 + 8 * (((uint64_t)v20 - v9) >> 3);
  if (v20 != (void **)v9)
  {
    uint64_t v22 = 8 * (((uint64_t)v20 - v9) >> 3);
    do
    {
      if (v6 != v9) {
        sub_31ACC4(v9, *(char ***)v6, *(void *)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3));
      }
      v6 += 24;
      v9 += 24;
      v22 -= 24;
    }
    while (v22);
    uint64_t v9 = a1[1];
  }
  uint64_t v30 = v9;
  if (v21 != a3)
  {
    uint64_t v31 = 0;
    do
    {
      sub_4D4C4((void *)(v9 + v31), (uint64_t *)(v21 + v31));
      v31 += 24;
    }
    while (v21 + v31 != a3);
    uint64_t v30 = v9 + v31;
  }
  a1[1] = v30;
}

void sub_34DD14(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    sub_20A75F8();
    *(void *)(v1 + 8) = v3;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(exception_object);
}

void sub_34DD54(char **a1, char *a2, char *a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t v9 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)*a1) >> 4) >= a4)
  {
    uint64_t v18 = a1[1];
    if (0xCCCCCCCCCCCCCCCDLL * ((v18 - v9) >> 4) >= a4)
    {
      if (a2 != a3)
      {
        uint64_t v23 = 0;
        do
        {
          v9[v23] = a2[v23];
          if (a2 != v9)
          {
            unint64_t v24 = &a2[v23];
            sub_34B338((uint64_t)&v9[v23 + 8], *(std::string **)&a2[v23 + 8], *(long long **)&a2[v23 + 16], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&a2[v23 + 16] - *(void *)&a2[v23 + 8]) >> 4));
            sub_34B338((uint64_t)&v9[v23 + 32], *((std::string **)v24 + 4), *((long long **)v24 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v24 + 5) - *((void *)v24 + 4)) >> 4));
            sub_34B338((uint64_t)&v9[v23 + 56], *((std::string **)v24 + 7), *((long long **)v24 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v24 + 8) - *((void *)v24 + 7)) >> 4));
          }
          v23 += 80;
        }
        while (&a2[v23] != a3);
        uint64_t v18 = a1[1];
        v9 += v23;
      }
      while (v18 != v9)
        uint64_t v18 = (char *)sub_3034C4((void *)v18 - 10);
      a1[1] = v9;
    }
    else
    {
      uint64_t v19 = &a2[16 * ((v18 - v9) >> 4)];
      if (v18 != v9)
      {
        unint64_t v20 = 0;
        uint64_t v21 = 16 * ((v18 - v9) >> 4);
        do
        {
          v9[v20] = a2[v20];
          if (a2 != v9)
          {
            uint64_t v22 = &a2[v20];
            sub_34B338((uint64_t)&v9[v20 + 8], *(std::string **)&a2[v20 + 8], *(long long **)&a2[v20 + 16], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&a2[v20 + 16] - *(void *)&a2[v20 + 8]) >> 4));
            sub_34B338((uint64_t)&v9[v20 + 32], *((std::string **)v22 + 4), *((long long **)v22 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v22 + 5) - *((void *)v22 + 4)) >> 4));
            sub_34B338((uint64_t)&v9[v20 + 56], *((std::string **)v22 + 7), *((long long **)v22 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v22 + 8) - *((void *)v22 + 7)) >> 4));
          }
          v20 += 80;
        }
        while (v21 != v20);
        uint64_t v9 = a1[1];
      }
      uint64_t v25 = v9;
      if (v19 != a3)
      {
        uint64_t v26 = 0;
        do
        {
          sub_34D36C((uint64_t)&v9[v26], (uint64_t)&v19[v26]);
          v26 += 80;
        }
        while (&v19[v26] != a3);
        uint64_t v25 = &v9[v26];
      }
      a1[1] = v25;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = a1[1];
      uint64_t v11 = v9;
      if (v10 != v9)
      {
        do
          uint64_t v10 = (char *)sub_3034C4((void *)v10 - 10);
        while (v10 != v9);
        uint64_t v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x333333333333333) {
      goto LABEL_40;
    }
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 4);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= a4) {
      uint64_t v13 = a4;
    }
    unint64_t v14 = v12 >= 0x199999999999999 ? 0x333333333333333 : v13;
    if (v14 > 0x333333333333333) {
LABEL_40:
    }
      sub_2E00();
    uint64_t v15 = 80 * v14;
    long long v16 = (char *)operator new(80 * v14);
    *a1 = v16;
    a1[1] = v16;
    a1[2] = &v16[v15];
    if (a2 != a3)
    {
      uint64_t v17 = 0;
      do
      {
        sub_34D36C((uint64_t)&v16[v17], (uint64_t)&a2[v17]);
        v17 += 80;
      }
      while (&a2[v17] != a3);
      v16 += v17;
    }
    a1[1] = v16;
  }
}

void sub_34E06C(_Unwind_Exception *exception_object)
{
  for (; v3; v3 -= 80)
    sub_3034C4((void *)(v2 - 80 + v3));
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

unint64_t sub_34E094(char **a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5)
{
  long long v5 = *a1;
  uint64_t v6 = a2 - (void)*a1;
  unint64_t v7 = (unint64_t)&(*a1)[v6 & 0xFFFFFFFFFFFFFFC0];
  if (a5 < 1) {
    return v7;
  }
  uint64_t v9 = a3;
  uint64_t v11 = v6 >> 6;
  unint64_t v14 = a1[2];
  unint64_t v12 = a1 + 2;
  uint64_t v13 = v14;
  unint64_t v15 = *(v12 - 1);
  if (a5 <= (uint64_t)&v14[-v15] >> 6)
  {
    uint64_t v20 = (uint64_t)(v15 - v7) >> 6;
    if (v20 >= a5)
    {
      uint64_t v21 = (long long *)(a3 + (a5 << 6));
      uint64_t v23 = (char *)*(v12 - 1);
      unint64_t v24 = v7 + (a5 << 6);
      uint64_t v25 = (char *)(v15 - (a5 << 6));
      uint64_t v26 = v23;
      if ((unint64_t)v25 >= v15)
      {
LABEL_19:
        a1[1] = v26;
        if (v23 != (char *)v24)
        {
          uint64_t v29 = 0;
          uint64_t v30 = (uint64_t)&v23[-v24] >> 6 << 6;
          uint64_t v31 = -v30;
          uint64_t v32 = &v5[64 * v11 + v30];
          do
          {
            int v35 = &v23[v29];
            uint64_t v36 = (void **)&v23[v29 - 64];
            if (v23[v29 - 41] < 0) {
              operator delete(*v36);
            }
            uint64_t v37 = &v32[v29 - 64];
            long long v38 = *(_OWORD *)v37;
            *(void *)&v23[v29 - 48] = *(void *)&v32[v29 - 48];
            *(_OWORD *)uint64_t v36 = v38;
            v32[v29 - 41] = 0;
            char *v37 = 0;
            *(_OWORD *)(v35 - 40) = *(_OWORD *)&v32[v29 - 40];
            unint64_t v39 = (void **)(v35 - 24);
            if (*(v35 - 1) < 0) {
              operator delete(*v39);
            }
            uint64_t v33 = &v32[v29];
            long long v34 = *(_OWORD *)&v32[v29 - 24];
            *((void *)v35 - 1) = *(void *)&v32[v29 - 8];
            *(_OWORD *)unint64_t v39 = v34;
            *(v33 - 1) = 0;
            *(v33 - 24) = 0;
            v29 -= 64;
          }
          while (v31 != v29);
        }
        if (v21 != (long long *)v9)
        {
          unint64_t v40 = v7;
          do
          {
            std::string::operator=((std::string *)v40, (const std::string *)v9);
            *(_OWORD *)(v40 + 24) = *(_OWORD *)(v9 + 24);
            std::string::operator=((std::string *)(v40 + 40), (const std::string *)(v9 + 40));
            v9 += 64;
            v40 += 64;
          }
          while ((long long *)v9 != v21);
        }
        return v7;
      }
LABEL_17:
      uint64_t v26 = v23;
      do
      {
        long long v27 = *(_OWORD *)v25;
        *((void *)v26 + 2) = *((void *)v25 + 2);
        *(_OWORD *)uint64_t v26 = v27;
        *((void *)v25 + 1) = 0;
        *((void *)v25 + 2) = 0;
        *(void *)uint64_t v25 = 0;
        *(_OWORD *)(v26 + 24) = *(_OWORD *)(v25 + 24);
        long long v28 = *(_OWORD *)(v25 + 40);
        *((void *)v26 + 7) = *((void *)v25 + 7);
        *(_OWORD *)(v26 + 40) = v28;
        *((void *)v25 + 6) = 0;
        *((void *)v25 + 7) = 0;
        *((void *)v25 + 5) = 0;
        v26 += 64;
        v25 += 64;
      }
      while ((unint64_t)v25 < v15);
      goto LABEL_19;
    }
    uint64_t v21 = (long long *)(a3 + (v20 << 6));
    uint64_t v22 = sub_34E5B0((int)v12, v21, a4, (char *)*(v12 - 1));
    uint64_t v23 = v22;
    a1[1] = v22;
    if ((uint64_t)(v15 - v7) >= 1)
    {
      unint64_t v24 = v7 + (a5 << 6);
      uint64_t v25 = &v22[-64 * a5];
      uint64_t v26 = v22;
      if ((unint64_t)v25 >= v15) {
        goto LABEL_19;
      }
      goto LABEL_17;
    }
    return v7;
  }
  unint64_t v16 = a5 + ((uint64_t)(v15 - (void)v5) >> 6);
  if (v16 >> 58) {
    sub_2E00();
  }
  uint64_t v17 = v13 - v5;
  if (v17 >> 5 > v16) {
    unint64_t v16 = v17 >> 5;
  }
  if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v18 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v18 = v16;
  }
  if (v18)
  {
    if (v18 >> 58) {
      sub_188D718();
    }
    uint64_t v19 = (char *)operator new(v18 << 6);
  }
  else
  {
    uint64_t v19 = 0;
  }
  uint64_t v42 = 0;
  char v43 = &v19[64 * v11];
  uint64_t v63 = &v19[64 * v18];
  uint64_t v44 = a5 << 6;
  uint64_t v45 = &v43[v44];
  do
  {
    uint64_t v47 = &v43[v42];
    int v48 = (long long *)(v9 + v42);
    if (*(char *)(v9 + v42 + 23) < 0)
    {
      sub_4200(v47, *(void **)v48, *((void *)v48 + 1));
    }
    else
    {
      long long v49 = *v48;
      *((void *)v47 + 2) = *((void *)v48 + 2);
      *(_OWORD *)uint64_t v47 = v49;
    }
    *(_OWORD *)&v43[v42 + 24] = *(_OWORD *)(v9 + v42 + 24);
    unint64_t v50 = &v43[v42 + 40];
    unsigned int v51 = (void **)(v9 + v42 + 40);
    if (*(char *)(v9 + v42 + 63) < 0)
    {
      sub_4200(v50, *v51, *(void *)(v9 + v42 + 48));
    }
    else
    {
      long long v46 = *(_OWORD *)v51;
      *(void *)&v43[v42 + 56] = *(void *)(v9 + v42 + 56);
      *(_OWORD *)unint64_t v50 = v46;
    }
    v42 += 64;
  }
  while (v44 != v42);
  uint64_t v41 = v43;
  unint64_t v52 = *a1;
  unint64_t v53 = v43;
  if (*a1 != (char *)v7)
  {
    unint64_t v54 = v43;
    unint64_t v55 = v7;
    do
    {
      unint64_t v53 = v54 - 64;
      long long v56 = *(_OWORD *)(v55 - 64);
      *((void *)v54 - 6) = *(void *)(v55 - 48);
      *((_OWORD *)v54 - 4) = v56;
      *(void *)(v55 - 56) = 0;
      *(void *)(v55 - 48) = 0;
      *(void *)(v55 - 64) = 0;
      *(_OWORD *)(v54 - 40) = *(_OWORD *)(v55 - 40);
      long long v57 = *(_OWORD *)(v55 - 24);
      *((void *)v54 - 1) = *(void *)(v55 - 8);
      *(_OWORD *)(v54 - 24) = v57;
      *(void *)(v55 - 16) = 0;
      *(void *)(v55 - 8) = 0;
      *(void *)(v55 - 24) = 0;
      v54 -= 64;
      v55 -= 64;
    }
    while ((char *)v55 != v52);
  }
  unsigned int v58 = a1[1];
  if (v58 != (char *)v7)
  {
    do
    {
      long long v59 = *(_OWORD *)v7;
      *((void *)v45 + 2) = *(void *)(v7 + 16);
      *(_OWORD *)uint64_t v45 = v59;
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
      *(void *)unint64_t v7 = 0;
      *(_OWORD *)(v45 + 24) = *(_OWORD *)(v7 + 24);
      long long v60 = *(_OWORD *)(v7 + 40);
      *((void *)v45 + 7) = *(void *)(v7 + 56);
      *(_OWORD *)(v45 + 40) = v60;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(void *)(v7 + 40) = 0;
      v45 += 64;
      v7 += 64;
    }
    while ((char *)v7 != v58);
    unint64_t v7 = (unint64_t)a1[1];
  }
  uint64_t v61 = *a1;
  *a1 = v53;
  a1[1] = v45;
  a1[2] = v63;
  while ((char *)v7 != v61)
  {
    if (*(char *)(v7 - 1) < 0)
    {
      operator delete(*(void **)(v7 - 24));
      if ((*(char *)(v7 - 41) & 0x80000000) == 0) {
        goto LABEL_46;
      }
    }
    else if ((*(char *)(v7 - 41) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(*(void **)(v7 - 64));
LABEL_46:
    v7 -= 64;
  }
  if (v61) {
    operator delete(v61);
  }
  return (unint64_t)v41;
}

void sub_34E4D8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_34E4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  if (*(char *)(v13 + v12 + 23) < 0)
  {
    operator delete(*(void **)(v13 + v12));
    a12 = v13 + v12;
    sub_34E52C((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  a12 = v13 + v12;
  sub_34E52C((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_34E52C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 64;
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      if ((*(char *)(i - 41) & 0x80000000) == 0) {
        continue;
      }
    }
    else if ((*(char *)(i - 41) & 0x80000000) == 0)
    {
      continue;
    }
    operator delete(*(void **)(i - 64));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_34E5B0(int a1, long long *a2, long long *a3, char *__dst)
{
  long long v4 = __dst;
  uint64_t v11 = __dst;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_4200(v4, *(void **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v8 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)long long v4 = v8;
      }
      *(_OWORD *)(v4 + 24) = *(long long *)((char *)v6 + 24);
      uint64_t v9 = v4 + 40;
      if (*((char *)v6 + 63) < 0)
      {
        sub_4200(v9, *((void **)v6 + 5), *((void *)v6 + 6));
      }
      else
      {
        long long v7 = *(long long *)((char *)v6 + 40);
        *((void *)v4 + 7) = *((void *)v6 + 7);
        *(_OWORD *)uint64_t v9 = v7;
      }
      v6 += 4;
      long long v4 = v11 + 64;
      v11 += 64;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_34E684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 + 23) < 0)
  {
    operator delete(*(void **)v9);
    sub_34E6BC((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_34E6BC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_34E6BC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (1)
    {
      if (v3 == v4) {
        return a1;
      }
      if (*(char *)(v3 - 1) < 0)
      {
        operator delete(*(void **)(v3 - 24));
        if ((*(char *)(v3 - 41) & 0x80000000) == 0) {
          goto LABEL_4;
        }
      }
      else if ((*(char *)(v3 - 41) & 0x80000000) == 0)
      {
        goto LABEL_4;
      }
      operator delete(*(void **)(v3 - 64));
LABEL_4:
      v3 -= 64;
    }
  }
  return a1;
}

void *sub_34E73C(void *result, char *__src, char *a3, unint64_t a4)
{
  long long v7 = result;
  unint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *long long v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      goto LABEL_22;
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    size_t v11 = v8 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v10;
    if ((v11 & 0x8000000000000000) != 0) {
LABEL_22:
    }
      sub_2E00();
    uint64_t result = operator new(v11);
    uint64_t v9 = (char *)result;
    *long long v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v11;
    size_t v12 = a3 - __src;
    if (v12) {
      uint64_t result = memcpy(result, __src, v12);
    }
LABEL_21:
    v7[1] = &v9[v12];
    return result;
  }
  uint64_t v13 = (unsigned char *)result[1];
  size_t v14 = v13 - v9;
  if (v13 - v9 >= a4)
  {
    size_t v12 = a3 - __src;
    if (v12) {
      uint64_t result = memmove((void *)*result, __src, v12);
    }
    goto LABEL_21;
  }
  unint64_t v15 = &__src[v14];
  if (v13 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v14);
    uint64_t v9 = (char *)v7[1];
  }
  if (a3 != v15) {
    uint64_t result = memmove(v9, v15, a3 - v15);
  }
  v7[1] = &v9[a3 - v15];
  return result;
}

void sub_34E888(uint64_t *a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  uint64_t v10 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *a1) >> 3) < __sz)
  {
    if (v10)
    {
      uint64_t v11 = a1[1];
      size_t v12 = (void *)*a1;
      if (v11 != v10)
      {
        do
        {
          uint64_t v14 = *(void *)(v11 - 32);
          if (v14)
          {
            uint64_t v15 = *(void *)(v11 - 24);
            uint64_t v13 = *(void **)(v11 - 32);
            if (v15 != v14)
            {
              do
              {
                if (*(char *)(v15 - 17) < 0) {
                  operator delete(*(void **)(v15 - 40));
                }
                v15 -= 40;
              }
              while (v15 != v14);
              uint64_t v13 = *(void **)(v11 - 32);
            }
            *(void *)(v11 - 24) = v14;
            operator delete(v13);
          }
          v11 -= 40;
        }
        while (v11 != v10);
        size_t v12 = (void *)*a1;
      }
      a1[1] = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x666666666666666) {
      goto LABEL_50;
    }
    unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    uint64_t v25 = 2 * v24;
    if (2 * v24 <= __sz) {
      uint64_t v25 = __sz;
    }
    unint64_t v26 = v24 >= 0x333333333333333 ? 0x666666666666666 : v25;
    if (v26 > 0x666666666666666) {
LABEL_50:
    }
      sub_2E00();
    uint64_t v27 = 40 * v26;
    long long v28 = operator new(40 * v26);
    *a1 = (uint64_t)v28;
    a1[1] = (uint64_t)v28;
    a1[2] = (uint64_t)v28 + v27;
    uint64_t v29 = sub_34EB90(v9, a2, a3, (uint64_t)v28);
LABEL_37:
    a1[1] = v29;
    return;
  }
  uint64_t v16 = a1[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v16 - v10) >> 3) < __sz)
  {
    uint64_t v17 = a2 + 8 * ((v16 - v10) >> 3);
    if (v16 != v10)
    {
      uint64_t v18 = v10 + 8;
      uint64_t v19 = a2 + 16;
      do
      {
        uint64_t v20 = v19 - 16;
        *(void *)(v18 - 8) = *(void *)(v19 - 16);
        if (v18 - 8 != v19 - 16) {
          sub_34EC50((void **)v18, *(std::string **)(v19 - 8), *(std::string **)v19, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)v19 - *(void *)(v19 - 8)) >> 3));
        }
        *(_DWORD *)(v18 + 24) = *(_DWORD *)(v19 + 16);
        v18 += 40;
        v19 += 40;
      }
      while (v20 + 40 != v17);
      uint64_t v10 = a1[1];
    }
    uint64_t v29 = sub_34EB90(v9, v17, a3, v10);
    goto LABEL_37;
  }
  if (a2 != a3)
  {
    uint64_t v21 = v10 + 8;
    uint64_t v22 = a2 + 16;
    do
    {
      uint64_t v23 = v22 - 16;
      *(void *)(v21 - 8) = *(void *)(v22 - 16);
      if (v21 - 8 != v22 - 16) {
        sub_34EC50((void **)v21, *(std::string **)(v22 - 8), *(std::string **)v22, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)v22 - *(void *)(v22 - 8)) >> 3));
      }
      *(_DWORD *)(v21 + 24) = *(_DWORD *)(v22 + 16);
      v10 += 40;
      v21 += 40;
      v22 += 40;
    }
    while (v23 + 40 != a3);
    uint64_t v16 = a1[1];
  }
  while (v16 != v10)
  {
    uint64_t v31 = *(void *)(v16 - 32);
    if (v31)
    {
      uint64_t v32 = *(void *)(v16 - 24);
      uint64_t v30 = *(void **)(v16 - 32);
      if (v32 != v31)
      {
        do
        {
          if (*(char *)(v32 - 17) < 0) {
            operator delete(*(void **)(v32 - 40));
          }
          v32 -= 40;
        }
        while (v32 != v31);
        uint64_t v30 = *(void **)(v16 - 32);
      }
      *(void *)(v16 - 24) = v31;
      operator delete(v30);
    }
    v16 -= 40;
  }
  a1[1] = v10;
}

void sub_34EB80(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_34EB88(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_34EB90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      uint64_t v9 = a2 + v7;
      *(void *)uint64_t v8 = *(void *)(a2 + v7);
      *(void *)(a4 + v7 + 8) = 0;
      *(void *)(v8 + 16) = 0;
      *(void *)(v8 + 24) = 0;
      sub_31237C((char *)(a4 + v7 + 8), *(void *)(a2 + v7 + 8), *(void *)(a2 + v7 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + v7 + 16) - *(void *)(a2 + v7 + 8)) >> 3));
      *(_DWORD *)(v8 + 32) = *(_DWORD *)(a2 + v7 + 32);
      v7 += 40;
    }
    while (v9 + 40 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_34EC34(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_20A766C();
  }
  _Unwind_Resume(exception_object);
}

void sub_34EC50(void **a1, std::string *__str, std::string *a3, size_t __sz)
{
  uint64_t v6 = __str;
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t v9 = (std::string *)*a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)*a1) >> 3) >= __sz)
  {
    size_t v12 = (std::string *)a1[1];
    if (0xCCCCCCCCCCCCCCCDLL * (((char *)v12 - (char *)v9) >> 3) >= __sz)
    {
      if (__str == a3)
      {
        uint64_t v22 = (std::string *)*a1;
      }
      else
      {
        uint64_t v22 = (std::string *)*a1;
        do
        {
          std::string::operator=(v9, v6);
          int v23 = v6[1].__r_.__value_.__r.__words[1];
          v9[1].__r_.__value_.__r.__words[0] = v6[1].__r_.__value_.__r.__words[0];
          LODWORD(v9[1].__r_.__value_.__r.__words[1]) = v23;
          uint64_t v22 = (std::string *)((char *)v22 + 40);
          uint64_t v6 = (std::string *)((char *)v6 + 40);
          uint64_t v9 = (std::string *)((char *)v9 + 40);
        }
        while (v6 != a3);
        size_t v12 = (std::string *)a1[1];
      }
      while (v12 != v22)
      {
        if (v12[-1].__r_.__value_.__s.__data_[7] < 0) {
          operator delete((void *)v12[-2].__r_.__value_.__l.__size_);
        }
        size_t v12 = (std::string *)((char *)v12 - 40);
      }
      a1[1] = v22;
    }
    else
    {
      uint64_t v13 = (std::string *)((char *)__str + 8 * (((char *)v12 - (char *)v9) >> 3));
      if (v12 != v9)
      {
        do
        {
          std::string::operator=(v9, v6);
          int v14 = v6[1].__r_.__value_.__r.__words[1];
          v9[1].__r_.__value_.__r.__words[0] = v6[1].__r_.__value_.__r.__words[0];
          LODWORD(v9[1].__r_.__value_.__r.__words[1]) = v14;
          uint64_t v6 = (std::string *)((char *)v6 + 40);
          uint64_t v9 = (std::string *)((char *)v9 + 40);
        }
        while (v6 != v13);
        uint64_t v9 = (std::string *)a1[1];
      }
      uint64_t v15 = v9;
      if (v13 != a3)
      {
        unint64_t v16 = 0;
        do
        {
          uint64_t v20 = (char *)v9 + v16;
          uint64_t v21 = (char *)v13 + v16;
          if (SHIBYTE(v13->__r_.__value_.__r.__words[v16 / 8 + 2]) < 0)
          {
            sub_4200(v20, *(void **)v21, *((void *)v21 + 1));
          }
          else
          {
            long long v17 = *(_OWORD *)v21;
            *((void *)v20 + 2) = *((void *)v21 + 2);
            *(_OWORD *)uint64_t v20 = v17;
          }
          uint64_t v18 = (char *)v9 + v16;
          uint64_t v19 = *(uint64_t *)((char *)&v13[1].__r_.__value_.__l.__data_ + v16);
          *((_DWORD *)v18 + 8) = v13[1].__r_.__value_.__r.__words[v16 / 8 + 1];
          *((void *)v18 + 3) = v19;
          v16 += 40;
        }
        while ((std::string *)((char *)v13 + v16) != a3);
        uint64_t v15 = (std::string *)((char *)v9 + v16);
      }
      a1[1] = v15;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = (std::string *)a1[1];
      uint64_t v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          if (v10[-1].__r_.__value_.__s.__data_[7] < 0) {
            operator delete((void *)v10[-2].__r_.__value_.__l.__size_);
          }
          uint64_t v10 = (std::string *)((char *)v10 - 40);
        }
        while (v10 != v9);
        uint64_t v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x666666666666666) {
      goto LABEL_47;
    }
    unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    uint64_t v25 = 2 * v24;
    if (2 * v24 <= __sz) {
      uint64_t v25 = __sz;
    }
    unint64_t v26 = v24 >= 0x333333333333333 ? 0x666666666666666 : v25;
    if (v26 > 0x666666666666666) {
LABEL_47:
    }
      sub_2E00();
    uint64_t v27 = 40 * v26;
    long long v28 = (char *)operator new(40 * v26);
    *a1 = v28;
    a1[1] = v28;
    a1[2] = &v28[v27];
    if (v6 != a3)
    {
      unint64_t v29 = 0;
      do
      {
        uint64_t v31 = &v28[v29];
        uint64_t v32 = (char *)v6 + v29;
        if (SHIBYTE(v6->__r_.__value_.__r.__words[v29 / 8 + 2]) < 0)
        {
          sub_4200(v31, *(void **)v32, *((void *)v32 + 1));
        }
        else
        {
          *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
          *((void *)v31 + 2) = *((void *)v32 + 2);
        }
        uint64_t v30 = &v28[v29];
        *((void *)v30 + 3) = *(std::string::pointer *)((char *)&v6[1].__r_.__value_.__l.__data_ + v29);
        *((_DWORD *)v30 + 8) = v6[1].__r_.__value_.__r.__words[v29 / 8 + 1];
        v29 += 40;
      }
      while ((std::string *)((char *)v6 + v29) != a3);
      v28 += v29;
    }
    a1[1] = v28;
  }
}

void *sub_34EFA0(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_34F14C(__dst + 3, (uint64_t)a2 + 24);
  sub_34F14C(__dst + 18, (uint64_t)(a2 + 9));
  __dst[33] = 0;
  __dst[34] = 0;
  __dst[35] = 0;
  uint64_t v6 = (unsigned char *)*((void *)a2 + 33);
  long long v5 = (unsigned char *)*((void *)a2 + 34);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 2) >= 0x1555555555555556) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v7);
    __dst[33] = v8;
    __dst[34] = v8;
    uint64_t v9 = &v8[4 * (v7 >> 2)];
    __dst[35] = v9;
    memcpy(v8, v6, v7);
    __dst[34] = v9;
  }
  __dst[36] = 0;
  __dst[37] = 0;
  __dst[38] = 0;
  uint64_t v11 = (unsigned char *)*((void *)a2 + 36);
  uint64_t v10 = (unsigned char *)*((void *)a2 + 37);
  uint64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      sub_2E00();
    }
    uint64_t v13 = (char *)operator new(v10 - v11);
    __dst[36] = v13;
    __dst[37] = v13;
    int v14 = &v13[8 * (v12 >> 3)];
    __dst[38] = v14;
    memcpy(v13, v11, v12 - 1);
    __dst[37] = v14;
  }
  return __dst;
}

void sub_34F0E8(_Unwind_Exception *a1)
{
  sub_4E798(v2);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

void *sub_34F14C(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  long long v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      sub_2E00();
    }
    int64_t v7 = (char *)operator new(v4 - *(void *)a2);
    *a1 = v7;
    a1[1] = v7;
    uint64_t v8 = &v7[4 * (v6 >> 2)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  uint64_t v10 = *(unsigned char **)(a2 + 24);
  uint64_t v9 = *(unsigned char **)(a2 + 32);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0) {
      sub_2E00();
    }
    uint64_t v12 = (char *)operator new(v9 - v10);
    a1[3] = v12;
    a1[4] = v12;
    uint64_t v13 = &v12[4 * (v11 >> 2)];
    a1[5] = v13;
    memcpy(v12, v10, v11);
    a1[4] = v13;
  }
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  uint64_t v15 = *(unsigned char **)(a2 + 48);
  int v14 = *(unsigned char **)(a2 + 56);
  int64_t v16 = v14 - v15;
  if (v14 != v15)
  {
    if (v16 < 0) {
      sub_2E00();
    }
    long long v17 = (char *)operator new(v14 - v15);
    a1[6] = v17;
    a1[7] = v17;
    uint64_t v18 = &v17[4 * (v16 >> 2)];
    a1[8] = v18;
    memcpy(v17, v15, v16);
    a1[7] = v18;
  }
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  uint64_t v20 = *(unsigned char **)(a2 + 72);
  uint64_t v19 = *(unsigned char **)(a2 + 80);
  int64_t v21 = v19 - v20;
  if (v19 != v20)
  {
    if (v21 < 0) {
      sub_2E00();
    }
    uint64_t v22 = (char *)operator new(v19 - v20);
    a1[9] = v22;
    a1[10] = v22;
    int v23 = &v22[4 * (v21 >> 2)];
    a1[11] = v23;
    memcpy(v22, v20, v21);
    a1[10] = v23;
  }
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  uint64_t v25 = *(unsigned char **)(a2 + 96);
  unint64_t v24 = *(unsigned char **)(a2 + 104);
  int64_t v26 = v24 - v25;
  if (v24 != v25)
  {
    if (v26 < 0) {
      sub_2E00();
    }
    uint64_t v27 = (char *)operator new(v24 - v25);
    a1[12] = v27;
    a1[13] = v27;
    long long v28 = &v27[8 * (v26 >> 3)];
    a1[14] = v28;
    memcpy(v27, v25, v26);
    a1[13] = v28;
  }
  return a1;
}

void sub_34F318(_Unwind_Exception *exception_object)
{
  int64_t v7 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 104) = v7;
    operator delete(v7);
    uint64_t v8 = *v4;
    if (!*v4)
    {
LABEL_3:
      uint64_t v9 = *v3;
      if (!*v3) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v8 = *v4;
    if (!*v4) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 80) = v8;
  operator delete(v8);
  uint64_t v9 = *v3;
  if (!*v3)
  {
LABEL_4:
    uint64_t v10 = *v2;
    if (!*v2) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  *(void *)(v1 + 56) = v9;
  operator delete(v9);
  uint64_t v10 = *v2;
  if (!*v2)
  {
LABEL_5:
    int64_t v11 = *(void **)v1;
    if (!*(void *)v1) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_11:
  *(void *)(v1 + 32) = v10;
  operator delete(v10);
  int64_t v11 = *(void **)v1;
  if (!*(void *)v1) {
LABEL_7:
  }
    _Unwind_Resume(exception_object);
LABEL_6:
  *(void *)(v1 + 8) = v11;
  operator delete(v11);
  goto LABEL_7;
}

void sub_34F3C8()
{
  if (!*v0) {
    JUMPOUT(0x34F34CLL);
  }
  JUMPOUT(0x34F344);
}

uint64_t sub_34F3D8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 312;
    sub_2F6914(i - 312);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

long long *sub_34F42C(uint64_t a1, uint64_t a2, std::string *a3, std::string *a4, uint64_t a5)
{
  long long v5 = *(long long **)a1;
  uint64_t v6 = (a2 - *(void *)a1) / 144;
  int64_t v7 = (long long *)(*(void *)a1 + 144 * v6);
  if (a5 >= 1)
  {
    uint64_t v9 = a3;
    uint64_t v11 = *(void *)(a1 + 16);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((uint64_t)(0x8E38E38E38E38E39 * ((uint64_t)(v11 - v12) >> 4)) >= a5)
    {
      if ((uint64_t)(0x8E38E38E38E38E39 * ((uint64_t)(v12 - (void)v7) >> 4)) >= a5)
      {
        uint64_t v18 = &a3[6 * a5];
        uint64_t v20 = *(long long **)(a1 + 8);
      }
      else
      {
        uint64_t v18 = (std::string *)((char *)a3 + 16 * ((uint64_t)(v12 - (void)v7) >> 4));
        if (v18 == a4)
        {
          uint64_t v20 = *(long long **)(a1 + 8);
          *(void *)(a1 + 8) = v12;
          if ((uint64_t)(v12 - (void)v7) < 1) {
            return v7;
          }
        }
        else
        {
          uint64_t v35 = (a2 - *(void *)a1) / 144;
          uint64_t v19 = 0;
          do
          {
            sub_329D98((char *)(v12 + v19 * 24), (long long *)&v18[v19]);
            v19 += 6;
          }
          while (&v18[v19] != a4);
          uint64_t v20 = (long long *)(v12 + v19 * 24);
          uint64_t v6 = v35;
          *(void *)(a1 + 8) = v20;
          if ((uint64_t)(v12 - (void)v7) < 1) {
            return v7;
          }
        }
      }
      int64_t v21 = &v7[9 * a5];
      uint64_t v22 = &v20[-9 * a5];
      int v23 = v20;
      if ((unint64_t)v22 < v12)
      {
        int v23 = v20;
        do
        {
          long long v24 = *v22;
          *((void *)v23 + 2) = *((void *)v22 + 2);
          *int v23 = v24;
          *((void *)v22 + 1) = 0;
          *((void *)v22 + 2) = 0;
          *(void *)uint64_t v22 = 0;
          long long v25 = *(long long *)((char *)v22 + 24);
          *((void *)v23 + 5) = *((void *)v22 + 5);
          *(long long *)((char *)v23 + 24) = v25;
          *((void *)v22 + 4) = 0;
          *((void *)v22 + 5) = 0;
          *((void *)v22 + 3) = 0;
          *((void *)v23 + 6) = *((void *)v22 + 6);
          long long v26 = *(long long *)((char *)v22 + 56);
          *((void *)v23 + 9) = *((void *)v22 + 9);
          *(long long *)((char *)v23 + 56) = v26;
          *((void *)v22 + 8) = 0;
          *((void *)v22 + 9) = 0;
          *((void *)v22 + 7) = 0;
          long long v27 = v22[5];
          *((void *)v23 + 12) = *((void *)v22 + 12);
          v23[5] = v27;
          *((void *)v22 + 11) = 0;
          *((void *)v22 + 12) = 0;
          *((void *)v22 + 10) = 0;
          *((_DWORD *)v23 + 26) = *((_DWORD *)v22 + 26);
          *((void *)v23 + 15) = 0;
          *((void *)v23 + 16) = 0;
          *((void *)v23 + 14) = 0;
          v23[7] = v22[7];
          *((void *)v23 + 16) = *((void *)v22 + 16);
          *((void *)v22 + 14) = 0;
          *((void *)v22 + 15) = 0;
          *((void *)v22 + 16) = 0;
          *((void *)v23 + 17) = *((void *)v22 + 17);
          v23 += 9;
          v22 += 9;
        }
        while ((unint64_t)v22 < v12);
      }
      *(void *)(a1 + 8) = v23;
      if (v20 != v21)
      {
        uint64_t v28 = (uint64_t)(v20 - 9);
        uint64_t v29 = 16 * (v20 - v21);
        uint64_t v30 = (uint64_t)&v5[9 * v6 - 9];
        do
        {
          sub_342098(v28, (long long *)(v30 + v29));
          v28 -= 144;
          v29 -= 144;
        }
        while (v29);
      }
      sub_34FA84((int)&__p, v9, v18, (std::string *)v7);
    }
    else
    {
      unint64_t v13 = a5 - 0x71C71C71C71C71C7 * ((uint64_t)(v12 - (void)v5) >> 4);
      if (v13 > 0x1C71C71C71C71C7) {
        sub_2E00();
      }
      unint64_t v14 = 0x8E38E38E38E38E39 * ((v11 - (uint64_t)v5) >> 4);
      if (2 * v14 > v13) {
        unint64_t v13 = 2 * v14;
      }
      if (v14 >= 0xE38E38E38E38E3) {
        unint64_t v15 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v15 = v13;
      }
      uint64_t v40 = a1 + 16;
      if (v15)
      {
        if (v15 > 0x1C71C71C71C71C7) {
          sub_188D718();
        }
        int64_t v16 = (char *)operator new(144 * v15);
      }
      else
      {
        int64_t v16 = 0;
      }
      uint64_t v31 = &v16[144 * v6];
      long long __p = v16;
      uint64_t v37 = v31;
      long long v38 = v31;
      unint64_t v39 = &v16[144 * v15];
      uint64_t v32 = 144 * a5;
      uint64_t v33 = &v31[144 * a5];
      do
      {
        sub_329D98(v31, (long long *)v9);
        v31 += 144;
        v9 += 6;
        v32 -= 144;
      }
      while (v32);
      long long v38 = v33;
      int64_t v7 = sub_34F808((long long **)a1, &__p, v7);
      sub_2A22B4((uint64_t)&__p, (uint64_t)v37);
      if (__p) {
        operator delete(__p);
      }
    }
  }
  return v7;
}

void sub_34F7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_329FDC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_34F7C4(_Unwind_Exception *a1)
{
  sub_34F9D4(v3, v4, v4, v2, v2);
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_34F7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_329FDC((uint64_t)va);
  _Unwind_Resume(a1);
}

long long *sub_34F808(long long **a1, void *a2, long long *a3)
{
  uint64_t result = (long long *)a2[1];
  long long v5 = *a1;
  uint64_t v6 = result;
  if (*a1 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = &result[v7];
      uint64_t v9 = &a3[v7];
      long long v10 = a3[v7 - 9];
      *((void *)v8 - 16) = *(void *)&a3[v7 - 8];
      *(v8 - 9) = v10;
      *((void *)v9 - 17) = 0;
      *((void *)v9 - 16) = 0;
      *((void *)v9 - 18) = 0;
      long long v11 = *(long long *)((char *)&a3[v7 - 7] - 8);
      *((void *)v8 - 13) = *((void *)&a3[v7 - 6] - 1);
      *(long long *)((char *)v8 - 120) = v11;
      *((void *)v9 - 14) = 0;
      *((void *)v9 - 13) = 0;
      *((void *)v9 - 15) = 0;
      *((void *)v8 - 12) = *(void *)&a3[v7 - 6];
      long long v12 = *(long long *)((char *)&a3[v7 - 5] - 8);
      *((void *)v8 - 9) = *((void *)&a3[v7 - 4] - 1);
      *(long long *)((char *)v8 - 88) = v12;
      *((void *)v9 - 10) = 0;
      *((void *)v9 - 9) = 0;
      *((void *)v9 - 11) = 0;
      long long v13 = a3[v7 - 4];
      *((void *)v8 - 6) = *(void *)&a3[v7 - 3];
      *(v8 - 4) = v13;
      *((void *)v9 - 7) = 0;
      *((void *)v9 - 6) = 0;
      *((void *)v9 - 8) = 0;
      int v14 = *((_DWORD *)&a3[v7 - 2] - 2);
      *((void *)v8 - 3) = 0;
      *((void *)v8 - 2) = 0;
      *((void *)v8 - 4) = 0;
      *((_DWORD *)v8 - 10) = v14;
      *(v8 - 2) = a3[v7 - 2];
      *((void *)v8 - 2) = *(void *)&a3[v7 - 1];
      *((void *)v9 - 4) = 0;
      *((void *)v9 - 3) = 0;
      *((void *)v9 - 2) = 0;
      *((void *)v8 - 1) = *((void *)&a3[v7 - 1] + 1);
      v7 -= 9;
    }
    while (&a3[v7] != v5);
    uint64_t v6 = &result[v7];
  }
  a2[1] = v6;
  unint64_t v15 = a1[1];
  uint64_t v16 = a2[2];
  if (v15 != a3)
  {
    do
    {
      long long v17 = *a3;
      *(void *)(v16 + 16) = *((void *)a3 + 2);
      *(_OWORD *)uint64_t v16 = v17;
      *((void *)a3 + 1) = 0;
      *((void *)a3 + 2) = 0;
      *(void *)a3 = 0;
      long long v18 = *(long long *)((char *)a3 + 24);
      *(void *)(v16 + 40) = *((void *)a3 + 5);
      *(_OWORD *)(v16 + 24) = v18;
      *((void *)a3 + 4) = 0;
      *((void *)a3 + 5) = 0;
      *((void *)a3 + 3) = 0;
      *(void *)(v16 + 48) = *((void *)a3 + 6);
      long long v19 = *(long long *)((char *)a3 + 56);
      *(void *)(v16 + 72) = *((void *)a3 + 9);
      *(_OWORD *)(v16 + 56) = v19;
      *((void *)a3 + 8) = 0;
      *((void *)a3 + 9) = 0;
      *((void *)a3 + 7) = 0;
      long long v20 = a3[5];
      *(void *)(v16 + 96) = *((void *)a3 + 12);
      *(_OWORD *)(v16 + 80) = v20;
      *((void *)a3 + 11) = 0;
      *((void *)a3 + 12) = 0;
      *((void *)a3 + 10) = 0;
      *(_DWORD *)(v16 + 104) = *((_DWORD *)a3 + 26);
      *(void *)(v16 + 120) = 0;
      *(void *)(v16 + 128) = 0;
      *(void *)(v16 + 112) = 0;
      *(_OWORD *)(v16 + 112) = a3[7];
      *(void *)(v16 + 128) = *((void *)a3 + 16);
      *((void *)a3 + 14) = 0;
      *((void *)a3 + 15) = 0;
      *((void *)a3 + 16) = 0;
      *(void *)(v16 + 136) = *((void *)a3 + 17);
      v16 += 144;
      a3 += 9;
    }
    while (a3 != v15);
    uint64_t v6 = (long long *)a2[1];
  }
  a2[2] = v16;
  int64_t v21 = *a1;
  *a1 = v6;
  a2[1] = v21;
  uint64_t v22 = a1[1];
  a1[1] = (long long *)a2[2];
  a2[2] = v22;
  int v23 = a1[2];
  a1[2] = (long long *)a2[3];
  a2[3] = v23;
  *a2 = a2[1];
  return result;
}

void sub_34F9D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 != a5)
  {
    for (uint64_t i = a3; i != a5; i -= 144)
    {
      uint64_t v7 = *(void **)(i - 32);
      if (v7)
      {
        *(void *)(i - 24) = v7;
        operator delete(v7);
      }
      if (*(char *)(i - 41) < 0)
      {
        operator delete(*(void **)(i - 64));
        if ((*(char *)(i - 65) & 0x80000000) == 0)
        {
LABEL_8:
          if ((*(char *)(i - 97) & 0x80000000) == 0) {
            goto LABEL_9;
          }
          goto LABEL_13;
        }
      }
      else if ((*(char *)(i - 65) & 0x80000000) == 0)
      {
        goto LABEL_8;
      }
      operator delete(*(void **)(i - 88));
      if ((*(char *)(i - 97) & 0x80000000) == 0)
      {
LABEL_9:
        if (*(char *)(i - 121) < 0) {
          goto LABEL_14;
        }
        continue;
      }
LABEL_13:
      operator delete(*(void **)(i - 120));
      if (*(char *)(i - 121) < 0) {
LABEL_14:
      }
        operator delete(*(void **)(i - 144));
    }
  }
}

std::string *sub_34FA84(int a1, std::string *__str, std::string *a3, std::string *this)
{
  long long v5 = __str;
  if (__str == a3) {
    return __str;
  }
  uint64_t v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    std::string::operator=(this + 1, v5 + 1);
    this[2].__r_.__value_.__r.__words[0] = v5[2].__r_.__value_.__r.__words[0];
    std::string::operator=((std::string *)((char *)this + 56), (std::string *)((char *)v5 + 56));
    std::string::operator=((std::string *)((char *)this + 80), (std::string *)((char *)v5 + 80));
    LODWORD(this[4].__r_.__value_.__r.__words[1]) = v5[4].__r_.__value_.__r.__words[1];
    if (this != v5) {
      sub_34FB50(&this[4].__r_.__value_.__r.__words[2], (char *)v5[4].__r_.__value_.__r.__words[2], v5[5].__r_.__value_.__l.__data_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[5].__r_.__value_.__r.__words[0] - v5[4].__r_.__value_.__r.__words[2]) >> 3));
    }
    this[5].__r_.__value_.__r.__words[2] = v5[5].__r_.__value_.__r.__words[2];
    this += 6;
    v5 += 6;
  }
  while (v5 != v6);
  return v6;
}

void *sub_34FB50(void *result, char *__src, char *a3, size_t __sz)
{
  uint64_t v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 3) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_23;
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
LABEL_23:
    }
      sub_2E00();
    uint64_t v13 = 3 * v12;
    uint64_t result = operator new(24 * v12);
    uint64_t v9 = (char *)result;
    *uint64_t v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14);
    }
    unint64_t v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  unint64_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - v9) >> 3) >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    long long v18 = (void *)*result;
LABEL_21:
    uint64_t result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  long long v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9);
    uint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v17;
  if (v14)
  {
    long long v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *unint64_t v15 = &v9[v14];
  return result;
}

int32x4_t sub_34FCCC(int32x4_t *a1, int32x4_t *a2)
{
  int32x4_t v2 = a1[1];
  *a1 = vaddq_s32(*a1, *a2);
  a1[1] = vaddq_s32(v2, a2[1]);
  int32x4_t v3 = a1[3];
  a1[2] = vaddq_s32(a1[2], a2[2]);
  a1[3] = vaddq_s32(v3, a2[3]);
  int32x4_t result = vaddq_s32(a1[4], a2[4]);
  a1[4] = result;
  a1[5].i32[0] += a2[5].i32[0];
  return result;
}

uint64_t sub_34FD28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 48) = 850045863;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t v6 = (char **)(a1 + 24);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 850045863;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 1018212795;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = a3;
  *(void *)(a1 + 232) = a3;
  *(void *)(a1 + 240) = 0;
  sub_2980();
  uint64_t v8 = *(void *)(v7 + 24);
  if (v8)
  {
    sub_2980();
    uint64_t v8 = *(void *)(*(void *)(v9 + 24) + 248) + 1;
  }
  *(void *)(a1 + 248) = v8;
  unint64_t v10 = operator new(0x20uLL);
  v10[1] = 0;
  v10[2] = 0;
  v10[3] = 0;
  *unint64_t v10 = off_24389C0;
  *(void *)&long long v21 = v10 + 3;
  *((void *)&v21 + 1) = v10;
  uint64_t v11 = *(void **)(a1 + 32);
  if ((unint64_t)v11 >= *(void *)(a1 + 40))
  {
    unint64_t v12 = sub_31A110(v6, (uint64_t)&v21);
    uint64_t v13 = (std::__shared_weak_count *)*((void *)&v21 + 1);
    *(void *)(a1 + 32) = v12;
    if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
    void *v11 = v10 + 3;
    v11[1] = v10;
    *(void *)(a1 + 32) = v11 + 2;
  }
  *(int64x2_t *)(a1 + 224) = vdupq_n_s64(1uLL);
  sub_2980();
  long long v21 = *v14;
  long long v22 = v14[1];
  sub_2980();
  *unint64_t v15 = 0;
  sub_2980();
  *(void *)(v16 + 8) = 1;
  sub_2980();
  *(void *)(v17 + 16) = 0;
  sub_2980();
  *(void *)(v18 + 24) = a1;
  sub_34FF58(0, **(_DWORD **)a4 & ~(**(int **)a4 >> 31), *(uint64_t ***)(a4 + 8));
  sub_2980();
  _OWORD *v19 = v21;
  v19[1] = v22;
  return a1;
}

void sub_34FF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_14A84((uint64_t)&a9);
  std::condition_variable::~condition_variable(v13);
  std::mutex::~mutex(v12);
  std::mutex::~mutex(v10);
  sub_34A128(v11);
  sub_34A1DC(v9);
  _Unwind_Resume(a1);
}

void sub_34FF58(int a1, int a2, uint64_t **a3)
{
  sub_2980();
  uint64_t v7 = v6;
  size_t v14 = 0;
  unint64_t v15 = 0;
  v13[0] = v6;
  v13[1] = &v14;
  sub_2980();
  uint64_t v9 = (std::mutex *)(*(void *)(v8 + 24) + 48);
  std::mutex::lock(v9);
  sub_350440(v13);
  std::mutex::unlock(v9);
  unint64_t add_explicit = atomic_fetch_add_explicit(v14, 1uLL, memory_order_relaxed);
  if (a1 != a2)
  {
    for (unint64_t i = (~a1 + a2);
          i >= add_explicit;
          unint64_t add_explicit = atomic_fetch_add_explicit(v14, 1uLL, memory_order_relaxed))
    {
      sub_3500C8(a3, (int)add_explicit + a1);
    }
  }
  ++*(void *)(v7 + 16);
  unint64_t v12 = v15;
  if (v15)
  {
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_350084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  std::mutex::unlock(v11);
  sub_14A84((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_3500A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_3500B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_3500C8(uint64_t **a1, uint64_t a2)
{
  uint64_t v57 = v2;
  uint64_t v58 = v3;
  uint64_t v59 = v4;
  switch(a2)
  {
    case 0:
      sub_350A10((uint64_t)a1[1], a1[2], &v55);
      uint64_t v6 = (void *)**a1;
      uint64_t v7 = (void *)v6[1];
      if (v7)
      {
        v6[2] = v7;
        operator delete(v7);
        v6[2] = 0;
        v6[3] = 0;
      }
      *(_OWORD *)(v6 + 1) = v55;
      v6[3] = v56;
      break;
    case 1:
      sub_35116C((uint64_t)a1[3], a1[4], &v55);
      uint64_t v8 = (void *)**a1;
      uint64_t v9 = (void *)v8[4];
      if (v9)
      {
        v8[5] = v9;
        operator delete(v9);
      }
      *((_OWORD *)v8 + 2) = v55;
      v8[6] = v56;
      break;
    case 2:
      sub_351984((uint64_t)a1[5], a1[6], &v55);
      unint64_t v10 = (void *)**a1;
      uint64_t v11 = (void *)v10[7];
      if (v11)
      {
        v10[8] = v11;
        operator delete(v11);
      }
      *(_OWORD *)(v10 + 7) = v55;
      v10[9] = v56;
      break;
    case 3:
      uint64_t v12 = **a1;
      uint64_t v13 = *(void *)(v12 + 176);
      size_t v14 = *(__n128 **)(v12 + 184);
      unint64_t v15 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v14 - v13) >> 3));
      if (v14 == (__n128 *)v13) {
        uint64_t v16 = 0;
      }
      else {
        uint64_t v16 = v15;
      }
      sub_29FDD0(v13, v14, (uint64_t)&v55, v16, 1);
      uint64_t v17 = sub_332608(*(_DWORD **)(v12 + 176), *(_DWORD **)(v12 + 184));
      if (*(_DWORD **)(v12 + 184) != v17) {
        *(void *)(v12 + 184) = v17;
      }
      sub_322C88((uint64_t *)(**a1 + 480));
      break;
    case 4:
      uint64_t v18 = **a1;
      unint64_t v19 = *(void *)(v18 + 200);
      long long v20 = *(long long **)(v18 + 208);
      unint64_t v21 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)v20 - v19) >> 3));
      if (v20 == (long long *)v19) {
        uint64_t v22 = 0;
      }
      else {
        uint64_t v22 = v21;
      }
      sub_332744(v19, v20, (uint64_t)&v55, v22, 1);
      uint64_t v23 = **a1;
      unint64_t v24 = *(void *)(v23 + 104);
      long long v25 = *(long long **)(v23 + 112);
      unint64_t v26 = 126 - 2 * __clz((uint64_t)((uint64_t)v25 - v24) >> 5);
      if (v25 == (long long *)v24) {
        uint64_t v27 = 0;
      }
      else {
        uint64_t v27 = v26;
      }
      sub_331104(v24, v25, (uint64_t)&v55, v27, 1);
      uint64_t v28 = **a1;
      uint64_t v29 = *(void *)(v28 + 224);
      uint64_t v30 = *(long long **)(v28 + 232);
      uint64_t v31 = (uint64_t *)(v28 + 224);
      unint64_t v32 = 126 - 2 * __clz(0x2C3F35BA781948B1 * (((uint64_t)v30 - v29) >> 3));
      if (v30 == (long long *)v29) {
        uint64_t v33 = 0;
      }
      else {
        uint64_t v33 = v32;
      }
      sub_336688(v29, v30, (uint64_t)&v55, v33, 1);
      uint64_t v34 = sub_33A2A4(*v31, v31[1]);
      sub_33A0F4((uint64_t)v31, v34, v31[1]);
      uint64_t v35 = **a1;
      uint64_t v36 = *(void *)(v35 + 248);
      uint64_t v37 = *(unsigned int **)(v35 + 256);
      uint64_t v38 = v35 + 248;
      unint64_t v39 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v37 - v36) >> 2));
      if (v37 == (unsigned int *)v36) {
        uint64_t v40 = 0;
      }
      else {
        uint64_t v40 = v39;
      }
      sub_33A554(v36, v37, (uint64_t)&v55, v40, 1);
      sub_33A3E8(v38);
      uint64_t v41 = **a1;
      uint64_t v42 = *(void *)(v41 + 272);
      unint64_t v43 = *(void *)(v41 + 280);
      unint64_t v44 = 126 - 2 * __clz((uint64_t)(v43 - v42) >> 4);
      uint64_t v45 = v41 + 272;
      if (v43 == v42) {
        uint64_t v46 = 0;
      }
      else {
        uint64_t v46 = v44;
      }
      sub_33C650(v42, v43, (uint64_t)&v55, v46, 1);
      sub_33C4F0(v45);
      uint64_t v47 = **a1;
      int v48 = *(uint64_t **)(v47 + 296);
      unint64_t v49 = *(void *)(v47 + 304);
      unint64_t v50 = 126 - 2 * __clz((uint64_t)(v49 - (void)v48) >> 6);
      unsigned int v51 = (uint64_t *)(v47 + 296);
      if ((uint64_t *)v49 == v48) {
        uint64_t v52 = 0;
      }
      else {
        uint64_t v52 = v50;
      }
      sub_334AB4(v48, v49, (uint64_t)&v55, v52, 1);
      sub_33498C(v51);
      sub_351F90((uint64_t)a1[7], a1[8], &v55);
      unint64_t v53 = (void *)**a1;
      unint64_t v54 = (void *)v53[16];
      if (v54)
      {
        v53[17] = v54;
        operator delete(v54);
      }
      *((_OWORD *)v53 + 8) = v55;
      v53[18] = v56;
      sub_350640((uint64_t)a1[9]);
      break;
    default:
      return;
  }
}

void sub_350440(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 16);
  uint64_t v3 = *(void *)(*a1 + 24);
  uint64_t v4 = *(void *)(v3 + 24);
  uint64_t v5 = *(void *)(v3 + 32);
  unint64_t v6 = (v5 - v4) >> 4;
  if (v2 >= v6)
  {
    unint64_t v7 = v2 + 1;
    uint64_t v8 = (std::__shared_weak_count *)operator new(0x20uLL);
    v8->__shared_owners_ = 0;
    v8->__shared_weak_owners_ = 0;
    v8[1].__vftable = 0;
    v8->__vftable = (std::__shared_weak_count_vtbl *)off_24389C0;
    uint64_t v17 = &v8[1].__vftable;
    uint64_t v18 = v8;
    unint64_t v9 = v7 - v6;
    if (v7 <= v6)
    {
      unint64_t v10 = v8;
      if (v7 < v6)
      {
        for (uint64_t i = v4 + 16 * v7; v5 != i; v5 -= 16)
        {
          uint64_t v12 = *(std::__shared_weak_count **)(v5 - 8);
          if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v12->__on_zero_shared)(v12, v9);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        *(void *)(v3 + 32) = i;
        unint64_t v10 = v18;
        if (!v18) {
          goto LABEL_15;
        }
      }
    }
    else
    {
      sub_31A2E8((char **)(v3 + 24), v9, &v17);
      unint64_t v10 = v18;
      if (!v18)
      {
LABEL_15:
        unint64_t v2 = *(void *)(*a1 + 16);
        uint64_t v4 = *(void *)(*(void *)(*a1 + 24) + 24);
        goto LABEL_16;
      }
    }
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    goto LABEL_15;
  }
LABEL_16:
  uint64_t v13 = a1[1];
  long long v14 = *(_OWORD *)(v4 + 16 * v2);
  uint64_t v15 = *(void *)(v4 + 16 * v2 + 8);
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  *(_OWORD *)uint64_t v13 = v14;
  if (v16)
  {
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_35062C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_350640(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 56))
  {
    *(_OWORD *)(a1 + 64) = 0u;
    uint64_t v2 = a1 + 64;
    *(_OWORD *)(a1 + 236) = 0u;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_OWORD *)(a1 + 224) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 288) = 0u;
    *(_OWORD *)long long __p = 0u;
    long long v34 = 0u;
    int v35 = 1065353216;
    uint64_t v3 = (void **)(a1 + 32);
    for (uint64_t i = *(uint64_t **)(a1 + 32); i; uint64_t i = (uint64_t *)*i)
    {
      sub_34A238(v2, (uint64_t)(i + 3));
      int v5 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      do
      {
        if ((*((_DWORD *)i + 4) >> v5))
        {
          LODWORD(v36) = v5;
          sub_32B764((unint64_t *)&v30, v31, &v36);
        }
        ++v5;
      }
      while (v5 != 32);
      unint64_t v6 = v30;
      unint64_t v7 = v31;
      if (v30 != v31)
      {
        do
        {
          unsigned int v29 = *v6;
          uint64_t v36 = &v29;
          uint64_t v8 = sub_32A014((uint64_t)__p, &v29, (uint64_t)&unk_20F06E0, &v36);
          int32x4_t v9 = *(int32x4_t *)(i + 3);
          int32x4_t v10 = *(int32x4_t *)(v8 + 24);
          unsigned __int32 v11 = vorrq_s8((int8x16_t)v10, (int8x16_t)v9).u32[0];
          int32x4_t v12 = vaddq_s32(v10, v9);
          v12.i32[0] = v11;
          *(int32x4_t *)(v8 + 24) = v12;
          *(int32x4_t *)(v8 + 40) = vaddq_s32(*(int32x4_t *)(v8 + 40), *(int32x4_t *)(i + 5));
          *(int32x4_t *)(v8 + 56) = vaddq_s32(*(int32x4_t *)(v8 + 56), *(int32x4_t *)(i + 7));
          *((int32x2_t *)v8 + 11) = vadd_s32(*(int32x2_t *)(v8 + 88), (int32x2_t)i[11]);
          *(int32x4_t *)(v8 + 72) = vaddq_s32(*(int32x4_t *)(v8 + 72), *(int32x4_t *)(i + 9));
          int32x4_t v13 = *((int32x4_t *)v8 + 7);
          *((int32x4_t *)v8 + 6) = vaddq_s32(*((int32x4_t *)v8 + 6), *((int32x4_t *)i + 6));
          *((int32x4_t *)v8 + 7) = vaddq_s32(v13, *((int32x4_t *)i + 7));
          int32x4_t v14 = *((int32x4_t *)v8 + 9);
          *((int32x4_t *)v8 + 8) = vaddq_s32(*((int32x4_t *)v8 + 8), *((int32x4_t *)i + 8));
          *((int32x4_t *)v8 + 9) = vaddq_s32(v14, *((int32x4_t *)i + 9));
          int32x4_t v15 = *((int32x4_t *)v8 + 11);
          *((int32x4_t *)v8 + 10) = vaddq_s32(*((int32x4_t *)v8 + 10), *((int32x4_t *)i + 10));
          *((int32x4_t *)v8 + 11) = vaddq_s32(v15, *((int32x4_t *)i + 11));
          *((int32x2_t *)v8 + 24) = vadd_s32(*(int32x2_t *)(v8 + 192), (int32x2_t)i[24]);
          *((void *)v8 + 25) += i[25];
          *((_DWORD *)v8 + 52) += *((_DWORD *)i + 52);
          v15.i64[0] = *((void *)v8 + 30);
          *((int32x2_t *)v8 + 31) = vadd_s32(*(int32x2_t *)(v8 + 248), (int32x2_t)i[31]);
          *((void *)v8 + 32) += i[32];
          *((void *)v8 + 27) += i[27];
          *((int32x4_t *)v8 + 14) = vaddq_s32(*((int32x4_t *)v8 + 14), *((int32x4_t *)i + 14));
          *((int32x2_t *)v8 + 30) = vadd_s32(*(int32x2_t *)v15.i8, (int32x2_t)i[30]);
          uint64_t v36 = &v29;
          uint64_t v16 = sub_32A014((uint64_t)__p, &v29, (uint64_t)&unk_20F06E0, &v36);
          *((_DWORD *)v16 + 6) = v29;
          ++v6;
        }
        while (v6 != v7);
        unint64_t v6 = v30;
      }
      if (v6)
      {
        uint64_t v31 = v6;
        operator delete(v6);
      }
    }
    if (*(void *)(a1 + 40))
    {
      uint64_t v17 = *v3;
      if (*v3)
      {
        do
        {
          uint64_t v18 = (void *)*v17;
          operator delete(v17);
          uint64_t v17 = v18;
        }
        while (v18);
      }
      *(void *)(a1 + 32) = 0;
      uint64_t v19 = *(void *)(a1 + 24);
      if (v19)
      {
        for (uint64_t j = 0; j != v19; ++j)
          *(void *)(*(void *)(a1 + 16) + 8 * j) = 0;
      }
      *(void *)(a1 + 40) = 0;
    }
    unint64_t v21 = __p[0];
    __p[0] = 0;
    uint64_t v22 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = v21;
    if (v22) {
      operator delete(v22);
    }
    unint64_t v24 = (unint64_t)__p[1];
    uint64_t v23 = (void *)v34;
    __p[1] = 0;
    uint64_t v25 = *((void *)&v34 + 1);
    *(void *)(a1 + 32) = v34;
    *(void *)(a1 + 40) = v25;
    *(_DWORD *)(a1 + 48) = v35;
    *(void *)(a1 + 24) = v24;
    if (v25)
    {
      unint64_t v26 = v23[1];
      if ((v24 & (v24 - 1)) != 0)
      {
        if (v26 >= v24) {
          v26 %= v24;
        }
      }
      else
      {
        v26 &= v24 - 1;
      }
      *(void *)(*(void *)(a1 + 16) + 8 * v26) = v3;
      long long v34 = 0uLL;
      *(_DWORD *)(a1 + 64) = -1;
      *(unsigned char *)(a1 + 56) = 1;
    }
    else
    {
      *(_DWORD *)(a1 + 64) = -1;
      *(unsigned char *)(a1 + 56) = 1;
      if (v23)
      {
        do
        {
          uint64_t v27 = (void *)*v23;
          operator delete(v23);
          uint64_t v23 = v27;
        }
        while (v27);
      }
    }
    uint64_t v28 = __p[0];
    __p[0] = 0;
    if (v28) {
      operator delete(v28);
    }
  }
}

void sub_3509D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_12168((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_3509E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_12168((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_350A10(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  int v5 = *(int64x2_t **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  int64_t v6 = v4 - *(void *)a1;
  if (v4 == *(void *)a1) {
    goto LABEL_18;
  }
  uint64_t v8 = *a2;
  if ((unint64_t)(v6 >> 3) <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = v6 >> 3;
  }
  if (v9 < 4)
  {
    unint64_t v10 = 0;
    unint64_t v11 = 0;
LABEL_10:
    unint64_t v17 = v9 - v11;
    uint64_t v18 = 8 * v11;
    uint64_t v19 = &v5->i64[v11];
    long long v20 = (uint64_t *)(v8 + v18);
    do
    {
      uint64_t v22 = *v19++;
      uint64_t v21 = v22;
      uint64_t v23 = *v20++;
      v10 += (v23 - v21) >> 4;
      --v17;
    }
    while (v17);
    goto LABEL_12;
  }
  unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFCLL;
  int32x4_t v12 = v5 + 1;
  int32x4_t v13 = (int64x2_t *)(v8 + 16);
  int64x2_t v14 = 0uLL;
  unint64_t v15 = v9 & 0xFFFFFFFFFFFFFFFCLL;
  int64x2_t v16 = 0uLL;
  do
  {
    int64x2_t v14 = vsraq_n_s64(v14, vsubq_s64(v13[-1], v12[-1]), 4uLL);
    int64x2_t v16 = vsraq_n_s64(v16, vsubq_s64(*v13, *v12), 4uLL);
    v12 += 2;
    v13 += 2;
    v15 -= 4;
  }
  while (v15);
  unint64_t v10 = vaddvq_s64(vaddq_s64(v16, v14));
  if (v9 != v11) {
    goto LABEL_10;
  }
LABEL_12:
  if (!v10)
  {
LABEL_18:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (v10 >> 60) {
    sub_2E00();
  }
  unint64_t v24 = (char *)operator new(16 * v10);
  *a3 = v24;
  a3[1] = v24;
  a3[2] = &v24[16 * v10];
  unint64_t v26 = 0;
  uint64_t v27 = 0;
  long long __p = 0;
  if (v6 < 0) {
    sub_2E00();
  }
  long long __p = operator new(v6);
  uint64_t v27 = (char *)__p + 8 * (v6 >> 3);
  memcpy(__p, v5, v6);
  unint64_t v26 = v27;
  sub_350BF8(&__p, a2, (uint64_t)a3);
  if (__p)
  {
    unint64_t v26 = __p;
    operator delete(__p);
  }
}

void sub_350BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    operator delete(__p);
    int32x4_t v13 = *(void **)v11;
    if (!*(void *)v11) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    int32x4_t v13 = *(void **)v11;
    if (!*(void *)v11) {
      goto LABEL_3;
    }
  }
  *(void *)(v11 + 8) = v13;
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

void sub_350BF8(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1] - *a1;
  uint64_t v42 = 0;
  memset(v43, 0, 13);
  long long __p = 0;
  if ((unsigned __int16)(v7 >> 3))
  {
    if ((unsigned __int16)(v7 >> 3) == 1)
    {
      *(void *)&long long v45 = 0;
      *((void *)&v45 + 1) = 0xFFFFLL;
      unsigned int v8 = 1;
LABEL_7:
      sub_35101C(&__p, 2 * v8, &v45);
      uint64_t v6 = *a1;
      uint64_t v7 = a1[1] - *a1;
      goto LABEL_8;
    }
    unsigned int v8 = 0;
    unsigned int v9 = __clz((unsigned __int16)(v7 >> 3) - 1);
    *(void *)&long long v45 = 0;
    *((void *)&v45 + 1) = 0xFFFFLL;
    if (v9 >= 0x31)
    {
      unsigned int v8 = (unsigned __int16)(1 << -(char)v9);
      goto LABEL_7;
    }
  }
  else
  {
    unsigned int v8 = 0;
  }
LABEL_8:
  LOWORD(v43[1]) = v8;
  if ((v7 & 0x7FFF8) != 0)
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = *(void *)(v6 + 8 * v10);
      if (v11 == *(void *)(*a2 + 8 * v10)) {
        uint64_t v11 = 0;
      }
      int32x4_t v12 = (char *)__p + 16 * LOWORD(v43[1]) + 16 * v10;
      *(void *)int32x4_t v12 = v11;
      *((_WORD *)v12 + 4) = v10++;
      uint64_t v6 = *a1;
    }
    while ((unsigned __int16)((*((_DWORD *)a1 + 2) - *a1) >> 3) > (unsigned __int16)v10);
    unsigned int v8 = LOWORD(v43[1]);
  }
  unint64_t v13 = (unint64_t)(v42 - (unsigned char *)__p) >> 4;
  while (v8 < (unsigned __int16)v13)
  {
    unsigned int v14 = (unsigned __int16)v13 - 1;
    unint64_t v15 = (char *)__p + 16 * v14;
    *((_WORD *)v15 + 4) = v13 - 1 - v8;
    __int16 v16 = WORD1(v43[1]);
    if (*(void *)v15) {
      __int16 v16 = WORD1(v43[1]) + 1;
    }
    WORD1(v43[1]) = v16;
    long long v45 = *(_OWORD *)v15;
    if ((unsigned __int16)v13 != 1)
    {
      while (1)
      {
        uint64_t v20 = v14 >> 1;
        uint64_t v21 = (char *)__p + 16 * v20;
        long long v44 = *(_OWORD *)v21;
        if (SWORD4(v44) == -1)
        {
          *(void *)uint64_t v21 = v45;
          *((_WORD *)v21 + 4) = WORD4(v45);
          goto LABEL_16;
        }
        if ((void)v45)
        {
          if (!(void)v44) {
            goto LABEL_30;
          }
          BOOL v22 = sub_3579EC(v45, v44);
          uint64_t v21 = (char *)__p + 16 * v20;
          if (v22) {
            break;
          }
        }
        *(void *)uint64_t v21 = v45;
        *((_WORD *)v21 + 4) = WORD4(v45);
        unint64_t v17 = &v44;
LABEL_23:
        uint64_t v18 = *(void *)v17;
        WORD4(v45) = *((_WORD *)v17 + 4);
        *(void *)&long long v45 = v18;
        BOOL v19 = v14 > 1;
        v14 >>= 1;
        if (!v19) {
          goto LABEL_16;
        }
      }
      *(void *)uint64_t v21 = v44;
      *((_WORD *)v21 + 4) = WORD4(v44);
LABEL_30:
      unint64_t v17 = &v45;
      goto LABEL_23;
    }
LABEL_16:
    LOWORD(v13) = v13 - 1;
    unsigned int v8 = LOWORD(v43[1]);
  }
  BYTE4(v43[1]) = 1;
  if (WORD1(v43[1]))
  {
    uint64_t v23 = *((unsigned __int16 *)__p + 4);
    unint64_t v24 = *(_OWORD **)(*a1 + 8 * v23);
    *(void *)&long long v45 = a3;
    sub_343E08((char ***)&v45, v24);
    if (WORD1(v43[1]))
    {
      uint64_t v25 = *(_OWORD **)(*a1 + 8 * v23);
      while (1)
      {
        uint64_t v26 = *((unsigned __int16 *)__p + 4);
        if (!sub_357A28(*(void *)(*a1 + 8 * v26), (uint64_t)v25))
        {
          uint64_t v25 = *(_OWORD **)(*a1 + 8 * v26);
          *(void *)&long long v45 = a3;
          sub_343E08((char ***)&v45, v25);
        }
        uint64_t v27 = *(void *)(*a1 + 8 * v26);
        if (v27 == *(void *)(*a2 + 8 * v26))
        {
          uint64_t v30 = *(void *)(*a1 + 8 * v26);
        }
        else
        {
          while (1)
          {
            BOOL v28 = sub_357A28(v27, (uint64_t)v25);
            uint64_t v29 = *a2;
            uint64_t v30 = *(void *)(*a1 + 8 * v26);
            if (!v28) {
              break;
            }
            uint64_t v27 = v30 + 16;
            *(void *)(*a1 + 8 * v26) = v30 + 16;
            uint64_t v30 = v27;
            if (v27 == *(void *)(v29 + 8 * v26)) {
              goto LABEL_43;
            }
          }
          uint64_t v27 = *(void *)(v29 + 8 * v26);
        }
LABEL_43:
        if (v30 == v27) {
          uint64_t v30 = 0;
        }
        unsigned int v31 = LOWORD(v43[1]) + v26;
        uint64_t v32 = (char *)__p + 16 * v31;
        BOOL v33 = v30 || *((void *)__p + 2 * LOWORD(v43[1]) + 2 * v26) == 0;
        __int16 v34 = !v33;
        WORD1(v43[1]) -= v34;
        *(void *)long long __p = 0;
        *(void *)uint64_t v32 = v30;
        *((_WORD *)v32 + 4) = v26;
        int v35 = __p;
        long long v45 = *((_OWORD *)__p + v31);
        if (v31) {
          break;
        }
LABEL_34:
        *(void *)int v35 = v45;
        v35[4] = WORD4(v45);
        if (!WORD1(v43[1])) {
          goto LABEL_61;
        }
      }
      while (1)
      {
        uint64_t v38 = v31 >> 1;
        unint64_t v39 = (char *)__p + 16 * v38;
        long long v44 = *(_OWORD *)v39;
        if ((void)v45)
        {
          if (!(void)v44) {
            goto LABEL_60;
          }
          BOOL v40 = sub_3579EC(v45, v44);
          unint64_t v39 = (char *)__p + 16 * v38;
          if (v40) {
            break;
          }
        }
        *(void *)unint64_t v39 = v45;
        *((_WORD *)v39 + 4) = WORD4(v45);
        uint64_t v36 = &v44;
LABEL_54:
        uint64_t v37 = *(void *)v36;
        WORD4(v45) = *((_WORD *)v36 + 4);
        *(void *)&long long v45 = v37;
        BOOL v19 = v31 > 1;
        v31 >>= 1;
        if (!v19)
        {
          int v35 = __p;
          goto LABEL_34;
        }
      }
      *(void *)unint64_t v39 = v44;
      *((_WORD *)v39 + 4) = WORD4(v44);
LABEL_60:
      uint64_t v36 = &v45;
      goto LABEL_54;
    }
  }
LABEL_61:
  if (__p)
  {
    uint64_t v42 = __p;
    operator delete(__p);
  }
}

void sub_350FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_35101C(void **a1, unint64_t a2, _OWORD *a3)
{
  uint64_t v7 = a1[1];
  uint64_t v6 = a1[2];
  if (a2 <= (v6 - (unsigned char *)v7) >> 4)
  {
    if (a2)
    {
      uint64_t v13 = 16 * a2;
      unsigned int v14 = (char *)&v7[2 * a2];
      do
      {
        *(_OWORD *)uint64_t v7 = *a3;
        v7 += 2;
        v13 -= 16;
      }
      while (v13);
      uint64_t v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = ((char *)v7 - (unsigned char *)*a1) >> 4;
    if ((v8 + a2) >> 60) {
      sub_2E00();
    }
    uint64_t v9 = v6 - (unsigned char *)*a1;
    uint64_t v10 = v9 >> 3;
    if (v9 >> 3 <= v8 + a2) {
      uint64_t v10 = v8 + a2;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11)
    {
      if (v11 >> 60) {
        sub_188D718();
      }
      int32x4_t v12 = (char *)operator new(16 * v11);
    }
    else
    {
      int32x4_t v12 = 0;
    }
    unint64_t v15 = &v12[16 * v8];
    uint64_t v16 = 16 * a2;
    unint64_t v17 = &v15[16 * a2];
    uint64_t v18 = v15;
    do
    {
      *(_OWORD *)uint64_t v18 = *a3;
      v18 += 16;
      v16 -= 16;
    }
    while (v16);
    BOOL v19 = *a1;
    if (v7 != *a1)
    {
      do
      {
        uint64_t v20 = *(v7 - 2);
        v7 -= 2;
        __int16 v21 = *((_WORD *)v7 + 4);
        *((void *)v15 - 2) = v20;
        v15 -= 16;
        *((_WORD *)v15 + 4) = v21;
      }
      while (v7 != v19);
      uint64_t v7 = *a1;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = &v12[16 * v11];
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void sub_35116C(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  int v5 = *(int64x2_t **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  int64_t v6 = v4 - *(void *)a1;
  if (v4 == *(void *)a1) {
    goto LABEL_18;
  }
  uint64_t v8 = *a2;
  if ((unint64_t)(v6 >> 3) <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = v6 >> 3;
  }
  if (v9 < 4)
  {
    unint64_t v10 = 0;
    unint64_t v11 = 0;
LABEL_10:
    unint64_t v19 = v9 - v11;
    uint64_t v20 = 8 * v11;
    __int16 v21 = &v5->i64[v11];
    BOOL v22 = (uint64_t *)(v8 + v20);
    do
    {
      uint64_t v24 = *v21++;
      uint64_t v23 = v24;
      uint64_t v25 = *v22++;
      v10 -= 0x71C71C71C71C71C7 * ((v25 - v23) >> 3);
      --v19;
    }
    while (v19);
    goto LABEL_12;
  }
  unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFCLL;
  int32x4_t v12 = v5 + 1;
  uint64_t v13 = (int64x2_t *)(v8 + 16);
  int64x2_t v14 = 0uLL;
  unint64_t v15 = v9 & 0xFFFFFFFFFFFFFFFCLL;
  int64x2_t v16 = 0uLL;
  do
  {
    int64x2_t v17 = vshrq_n_s64(vsubq_s64(v13[-1], v12[-1]), 3uLL);
    v17.i64[0] *= 0x8E38E38E38E38E39;
    v17.i64[1] *= 0x8E38E38E38E38E39;
    int64x2_t v18 = vshrq_n_s64(vsubq_s64(*v13, *v12), 3uLL);
    v18.i64[0] *= 0x8E38E38E38E38E39;
    v18.i64[1] *= 0x8E38E38E38E38E39;
    int64x2_t v14 = vaddq_s64(v17, v14);
    int64x2_t v16 = vaddq_s64(v18, v16);
    v12 += 2;
    v13 += 2;
    v15 -= 4;
  }
  while (v15);
  unint64_t v10 = vaddvq_s64(vaddq_s64(v16, v14));
  if (v9 != v11) {
    goto LABEL_10;
  }
LABEL_12:
  if (!v10)
  {
LABEL_18:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (v10 >= 0x38E38E38E38E38FLL) {
    sub_2E00();
  }
  uint64_t v26 = (char *)operator new(72 * v10);
  *a3 = v26;
  a3[1] = v26;
  a3[2] = &v26[72 * v10];
  BOOL v28 = 0;
  uint64_t v29 = 0;
  long long __p = 0;
  if (v6 < 0) {
    sub_2E00();
  }
  long long __p = operator new(v6);
  uint64_t v29 = (char *)__p + 8 * (v6 >> 3);
  memcpy(__p, v5, v6);
  BOOL v28 = v29;
  sub_3513C8(&__p, a2, (uint64_t)a3);
  if (__p)
  {
    BOOL v28 = __p;
    operator delete(__p);
  }
}

void sub_351378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v13 = *(void **)v11;
    if (!*(void *)v11) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v13 = *(void **)v11;
    if (!*(void *)v11) {
      goto LABEL_3;
    }
  }
  *(void *)(v11 + 8) = v13;
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

void sub_3513C8(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1] - *a1;
  uint64_t v42 = 0;
  memset(v43, 0, 13);
  long long __p = 0;
  if ((unsigned __int16)(v7 >> 3))
  {
    if ((unsigned __int16)(v7 >> 3) == 1)
    {
      *(void *)&long long v45 = 0;
      *((void *)&v45 + 1) = 0xFFFFLL;
      unsigned int v8 = 1;
LABEL_7:
      sub_35101C(&__p, 2 * v8, &v45);
      uint64_t v6 = *a1;
      uint64_t v7 = a1[1] - *a1;
      goto LABEL_8;
    }
    unsigned int v8 = 0;
    unsigned int v9 = __clz((unsigned __int16)(v7 >> 3) - 1);
    *(void *)&long long v45 = 0;
    *((void *)&v45 + 1) = 0xFFFFLL;
    if (v9 >= 0x31)
    {
      unsigned int v8 = (unsigned __int16)(1 << -(char)v9);
      goto LABEL_7;
    }
  }
  else
  {
    unsigned int v8 = 0;
  }
LABEL_8:
  LOWORD(v43[1]) = v8;
  if ((v7 & 0x7FFF8) != 0)
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = *(void *)(v6 + 8 * v10);
      if (v11 == *(void *)(*a2 + 8 * v10)) {
        uint64_t v11 = 0;
      }
      int32x4_t v12 = (char *)__p + 16 * LOWORD(v43[1]) + 16 * v10;
      *(void *)int32x4_t v12 = v11;
      *((_WORD *)v12 + 4) = v10++;
      uint64_t v6 = *a1;
    }
    while ((unsigned __int16)((*((_DWORD *)a1 + 2) - *a1) >> 3) > (unsigned __int16)v10);
    unsigned int v8 = LOWORD(v43[1]);
  }
  unint64_t v13 = (unint64_t)(v42 - (unsigned char *)__p) >> 4;
  while (v8 < (unsigned __int16)v13)
  {
    unsigned int v14 = (unsigned __int16)v13 - 1;
    unint64_t v15 = (char *)__p + 16 * v14;
    *((_WORD *)v15 + 4) = v13 - 1 - v8;
    __int16 v16 = WORD1(v43[1]);
    if (*(void *)v15) {
      __int16 v16 = WORD1(v43[1]) + 1;
    }
    WORD1(v43[1]) = v16;
    long long v45 = *(_OWORD *)v15;
    if ((unsigned __int16)v13 != 1)
    {
      while (1)
      {
        uint64_t v20 = v14 >> 1;
        __int16 v21 = (char *)__p + 16 * v20;
        long long v44 = *(_OWORD *)v21;
        if (SWORD4(v44) == -1)
        {
          *(void *)__int16 v21 = v45;
          *((_WORD *)v21 + 4) = WORD4(v45);
          goto LABEL_16;
        }
        if ((void)v45)
        {
          if (!(void)v44) {
            goto LABEL_30;
          }
          BOOL v22 = sub_357694((unsigned int *)v45, v44);
          __int16 v21 = (char *)__p + 16 * v20;
          if (v22) {
            break;
          }
        }
        *(void *)__int16 v21 = v45;
        *((_WORD *)v21 + 4) = WORD4(v45);
        int64x2_t v17 = &v44;
LABEL_23:
        uint64_t v18 = *(void *)v17;
        WORD4(v45) = *((_WORD *)v17 + 4);
        *(void *)&long long v45 = v18;
        BOOL v19 = v14 > 1;
        v14 >>= 1;
        if (!v19) {
          goto LABEL_16;
        }
      }
      *(void *)__int16 v21 = v44;
      *((_WORD *)v21 + 4) = WORD4(v44);
LABEL_30:
      int64x2_t v17 = &v45;
      goto LABEL_23;
    }
LABEL_16:
    LOWORD(v13) = v13 - 1;
    unsigned int v8 = LOWORD(v43[1]);
  }
  BYTE4(v43[1]) = 1;
  if (WORD1(v43[1]))
  {
    uint64_t v23 = *((unsigned __int16 *)__p + 4);
    uint64_t v24 = *(void *)(*a1 + 8 * v23);
    *(void *)&long long v45 = a3;
    sub_3517EC((char ***)&v45, v24);
    if (WORD1(v43[1]))
    {
      uint64_t v25 = *(void *)(*a1 + 8 * v23);
      while (1)
      {
        uint64_t v26 = *((unsigned __int16 *)__p + 4);
        if (!sub_3575D0(*(unsigned int **)(*a1 + 8 * v26), v25))
        {
          uint64_t v25 = *(void *)(*a1 + 8 * v26);
          *(void *)&long long v45 = a3;
          sub_3517EC((char ***)&v45, v25);
        }
        uint64_t v27 = *(unsigned int **)(*a1 + 8 * v26);
        if (v27 == *(unsigned int **)(*a2 + 8 * v26))
        {
          uint64_t v30 = *(unsigned int **)(*a1 + 8 * v26);
        }
        else
        {
          while (1)
          {
            BOOL v28 = sub_3575D0(v27, v25);
            uint64_t v29 = *a2;
            uint64_t v30 = *(unsigned int **)(*a1 + 8 * v26);
            if (!v28) {
              break;
            }
            uint64_t v27 = v30 + 18;
            *(void *)(*a1 + 8 * v26) = v30 + 18;
            uint64_t v30 = v27;
            if (v27 == *(unsigned int **)(v29 + 8 * v26)) {
              goto LABEL_43;
            }
          }
          uint64_t v27 = *(unsigned int **)(v29 + 8 * v26);
        }
LABEL_43:
        if (v30 == v27) {
          uint64_t v30 = 0;
        }
        unsigned int v31 = LOWORD(v43[1]) + v26;
        uint64_t v32 = (char *)__p + 16 * v31;
        BOOL v33 = v30 || *((void *)__p + 2 * LOWORD(v43[1]) + 2 * v26) == 0;
        __int16 v34 = !v33;
        WORD1(v43[1]) -= v34;
        *(void *)long long __p = 0;
        *(void *)uint64_t v32 = v30;
        *((_WORD *)v32 + 4) = v26;
        int v35 = __p;
        long long v45 = *((_OWORD *)__p + v31);
        if (v31) {
          break;
        }
LABEL_34:
        *(void *)int v35 = v45;
        v35[4] = WORD4(v45);
        if (!WORD1(v43[1])) {
          goto LABEL_61;
        }
      }
      while (1)
      {
        uint64_t v38 = v31 >> 1;
        unint64_t v39 = (char *)__p + 16 * v38;
        long long v44 = *(_OWORD *)v39;
        if ((void)v45)
        {
          if (!(void)v44) {
            goto LABEL_60;
          }
          BOOL v40 = sub_357694((unsigned int *)v45, v44);
          unint64_t v39 = (char *)__p + 16 * v38;
          if (v40) {
            break;
          }
        }
        *(void *)unint64_t v39 = v45;
        *((_WORD *)v39 + 4) = WORD4(v45);
        uint64_t v36 = &v44;
LABEL_54:
        uint64_t v37 = *(void *)v36;
        WORD4(v45) = *((_WORD *)v36 + 4);
        *(void *)&long long v45 = v37;
        BOOL v19 = v31 > 1;
        v31 >>= 1;
        if (!v19)
        {
          int v35 = __p;
          goto LABEL_34;
        }
      }
      *(void *)unint64_t v39 = v44;
      *((_WORD *)v39 + 4) = WORD4(v44);
LABEL_60:
      uint64_t v36 = &v45;
      goto LABEL_54;
    }
  }
LABEL_61:
  if (__p)
  {
    uint64_t v42 = __p;
    operator delete(__p);
  }
}

void sub_3517B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char ***sub_3517EC(char ***a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v6 = (*a1)[1];
  unint64_t v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v11 = *v4;
    unint64_t v12 = 0x8E38E38E38E38E39 * ((v6 - *v4) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0x38E38E38E38E38ELL) {
      sub_2E00();
    }
    unint64_t v14 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - (void)v11) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x1C71C71C71C71C7) {
      unint64_t v15 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 > 0x38E38E38E38E38ELL) {
        sub_188D718();
      }
      __int16 v16 = (char *)operator new(72 * v15);
    }
    else
    {
      __int16 v16 = 0;
    }
    int64x2_t v17 = &v16[72 * v12];
    long long v18 = *(_OWORD *)(a2 + 48);
    *((_OWORD *)v17 + 2) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)v17 + 3) = v18;
    *((void *)v17 + 8) = *(void *)(a2 + 64);
    long long v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)int64x2_t v17 = *(_OWORD *)a2;
    *((_OWORD *)v17 + 1) = v19;
    uint64_t v10 = v17 + 72;
    if (v6 != v11)
    {
      do
      {
        *(_OWORD *)(v17 - 72) = *(_OWORD *)(v6 - 72);
        long long v20 = *(_OWORD *)(v6 - 56);
        long long v21 = *(_OWORD *)(v6 - 40);
        long long v22 = *(_OWORD *)(v6 - 24);
        *(v17 - 8) = *(v6 - 8);
        *(_OWORD *)(v17 - 24) = v22;
        *(_OWORD *)(v17 - 40) = v21;
        *(_OWORD *)(v17 - 56) = v20;
        v17 -= 72;
        v6 -= 72;
      }
      while (v6 != v11);
      uint64_t v6 = *v4;
    }
    *uint64_t v4 = v17;
    v4[1] = v10;
    v4[2] = &v16[72 * v15];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v6 = *(_OWORD *)a2;
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v8 = *(_OWORD *)(a2 + 32);
    long long v9 = *(_OWORD *)(a2 + 48);
    *((void *)v6 + 8) = *(void *)(a2 + 64);
    *((_OWORD *)v6 + 2) = v8;
    *((_OWORD *)v6 + 3) = v9;
    *((_OWORD *)v6 + 1) = v7;
    uint64_t v10 = v6 + 72;
  }
  v4[1] = v10;
  return a1;
}

void sub_351984(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = *(int64x2_t **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  int64_t v6 = v4 - *(void *)a1;
  if (v4 == *(void *)a1) {
    goto LABEL_18;
  }
  uint64_t v8 = *a2;
  if ((unint64_t)(v6 >> 3) <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = v6 >> 3;
  }
  if (v9 < 4)
  {
    unint64_t v10 = 0;
    unint64_t v11 = 0;
LABEL_10:
    unint64_t v17 = v9 - v11;
    uint64_t v18 = 8 * v11;
    long long v19 = &v5->i64[v11];
    long long v20 = (uint64_t *)(v8 + v18);
    do
    {
      uint64_t v22 = *v19++;
      uint64_t v21 = v22;
      uint64_t v23 = *v20++;
      v10 += (v23 - v21) >> 5;
      --v17;
    }
    while (v17);
    goto LABEL_12;
  }
  unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v12 = v5 + 1;
  unint64_t v13 = (int64x2_t *)(v8 + 16);
  int64x2_t v14 = 0uLL;
  unint64_t v15 = v9 & 0xFFFFFFFFFFFFFFFCLL;
  int64x2_t v16 = 0uLL;
  do
  {
    int64x2_t v14 = vsraq_n_s64(v14, vsubq_s64(v13[-1], v12[-1]), 5uLL);
    int64x2_t v16 = vsraq_n_s64(v16, vsubq_s64(*v13, *v12), 5uLL);
    v12 += 2;
    v13 += 2;
    v15 -= 4;
  }
  while (v15);
  unint64_t v10 = vaddvq_s64(vaddq_s64(v16, v14));
  if (v9 != v11) {
    goto LABEL_10;
  }
LABEL_12:
  if (!v10)
  {
LABEL_18:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (v10 >> 59) {
    sub_2E00();
  }
  uint64_t v24 = (char *)operator new(32 * v10);
  *a3 = v24;
  a3[1] = v24;
  a3[2] = &v24[32 * v10];
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  long long __p = 0;
  if (v6 < 0) {
    sub_2E00();
  }
  long long __p = operator new(v6);
  uint64_t v27 = (char *)__p + 8 * (v6 >> 3);
  memcpy(__p, v5, v6);
  uint64_t v26 = v27;
  sub_351B6C(&__p, a2, (uint64_t)a3);
  if (__p)
  {
    uint64_t v26 = __p;
    operator delete(__p);
  }
}

void sub_351B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    operator delete(__p);
    unint64_t v13 = *(void **)v11;
    if (!*(void *)v11) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v13 = *(void **)v11;
    if (!*(void *)v11) {
      goto LABEL_3;
    }
  }
  *(void *)(v11 + 8) = v13;
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

void sub_351B6C(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1] - *a1;
  uint64_t v42 = 0;
  memset(v43, 0, 13);
  long long __p = 0;
  if ((unsigned __int16)(v7 >> 3))
  {
    if ((unsigned __int16)(v7 >> 3) == 1)
    {
      *(void *)&long long v45 = 0;
      *((void *)&v45 + 1) = 0xFFFFLL;
      unsigned int v8 = 1;
LABEL_7:
      sub_35101C(&__p, 2 * v8, &v45);
      uint64_t v6 = *a1;
      uint64_t v7 = a1[1] - *a1;
      goto LABEL_8;
    }
    unsigned int v8 = 0;
    unsigned int v9 = __clz((unsigned __int16)(v7 >> 3) - 1);
    *(void *)&long long v45 = 0;
    *((void *)&v45 + 1) = 0xFFFFLL;
    if (v9 >= 0x31)
    {
      unsigned int v8 = (unsigned __int16)(1 << -(char)v9);
      goto LABEL_7;
    }
  }
  else
  {
    unsigned int v8 = 0;
  }
LABEL_8:
  LOWORD(v43[1]) = v8;
  if ((v7 & 0x7FFF8) != 0)
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = *(void *)(v6 + 8 * v10);
      if (v11 == *(void *)(*a2 + 8 * v10)) {
        uint64_t v11 = 0;
      }
      unint64_t v12 = (char *)__p + 16 * LOWORD(v43[1]) + 16 * v10;
      *(void *)unint64_t v12 = v11;
      *((_WORD *)v12 + 4) = v10++;
      uint64_t v6 = *a1;
    }
    while ((unsigned __int16)((*((_DWORD *)a1 + 2) - *a1) >> 3) > (unsigned __int16)v10);
    unsigned int v8 = LOWORD(v43[1]);
  }
  unint64_t v13 = (unint64_t)(v42 - (unsigned char *)__p) >> 4;
  while (v8 < (unsigned __int16)v13)
  {
    unsigned int v14 = (unsigned __int16)v13 - 1;
    unint64_t v15 = (char *)__p + 16 * v14;
    *((_WORD *)v15 + 4) = v13 - 1 - v8;
    __int16 v16 = WORD1(v43[1]);
    if (*(void *)v15) {
      __int16 v16 = WORD1(v43[1]) + 1;
    }
    WORD1(v43[1]) = v16;
    long long v45 = *(_OWORD *)v15;
    if ((unsigned __int16)v13 != 1)
    {
      while (1)
      {
        uint64_t v20 = v14 >> 1;
        uint64_t v21 = (char *)__p + 16 * v20;
        long long v44 = *(_OWORD *)v21;
        if (SWORD4(v44) == -1)
        {
          *(void *)uint64_t v21 = v45;
          *((_WORD *)v21 + 4) = WORD4(v45);
          goto LABEL_16;
        }
        if ((void)v45)
        {
          if (!(void)v44) {
            goto LABEL_30;
          }
          BOOL v22 = sub_357954(v45, v44);
          uint64_t v21 = (char *)__p + 16 * v20;
          if (v22) {
            break;
          }
        }
        *(void *)uint64_t v21 = v45;
        *((_WORD *)v21 + 4) = WORD4(v45);
        unint64_t v17 = &v44;
LABEL_23:
        uint64_t v18 = *(void *)v17;
        WORD4(v45) = *((_WORD *)v17 + 4);
        *(void *)&long long v45 = v18;
        BOOL v19 = v14 > 1;
        v14 >>= 1;
        if (!v19) {
          goto LABEL_16;
        }
      }
      *(void *)uint64_t v21 = v44;
      *((_WORD *)v21 + 4) = WORD4(v44);
LABEL_30:
      unint64_t v17 = &v45;
      goto LABEL_23;
    }
LABEL_16:
    LOWORD(v13) = v13 - 1;
    unsigned int v8 = LOWORD(v43[1]);
  }
  BYTE4(v43[1]) = 1;
  if (WORD1(v43[1]))
  {
    uint64_t v23 = *((unsigned __int16 *)__p + 4);
    uint64_t v24 = *(_OWORD **)(*a1 + 8 * v23);
    *(void *)&long long v45 = a3;
    sub_29E380((char ***)&v45, v24);
    if (WORD1(v43[1]))
    {
      uint64_t v25 = *(_OWORD **)(*a1 + 8 * v23);
      while (1)
      {
        uint64_t v26 = *((unsigned __int16 *)__p + 4);
        if (!sub_3578F8(*(void *)(*a1 + 8 * v26), (uint64_t)v25))
        {
          uint64_t v25 = *(_OWORD **)(*a1 + 8 * v26);
          *(void *)&long long v45 = a3;
          sub_29E380((char ***)&v45, v25);
        }
        uint64_t v27 = *(void *)(*a1 + 8 * v26);
        if (v27 == *(void *)(*a2 + 8 * v26))
        {
          uint64_t v30 = *(void *)(*a1 + 8 * v26);
        }
        else
        {
          while (1)
          {
            BOOL v28 = sub_3578F8(v27, (uint64_t)v25);
            uint64_t v29 = *a2;
            uint64_t v30 = *(void *)(*a1 + 8 * v26);
            if (!v28) {
              break;
            }
            uint64_t v27 = v30 + 32;
            *(void *)(*a1 + 8 * v26) = v30 + 32;
            uint64_t v30 = v27;
            if (v27 == *(void *)(v29 + 8 * v26)) {
              goto LABEL_43;
            }
          }
          uint64_t v27 = *(void *)(v29 + 8 * v26);
        }
LABEL_43:
        if (v30 == v27) {
          uint64_t v30 = 0;
        }
        unsigned int v31 = LOWORD(v43[1]) + v26;
        uint64_t v32 = (char *)__p + 16 * v31;
        BOOL v33 = v30 || *((void *)__p + 2 * LOWORD(v43[1]) + 2 * v26) == 0;
        __int16 v34 = !v33;
        WORD1(v43[1]) -= v34;
        *(void *)long long __p = 0;
        *(void *)uint64_t v32 = v30;
        *((_WORD *)v32 + 4) = v26;
        int v35 = __p;
        long long v45 = *((_OWORD *)__p + v31);
        if (v31) {
          break;
        }
LABEL_34:
        *(void *)int v35 = v45;
        v35[4] = WORD4(v45);
        if (!WORD1(v43[1])) {
          goto LABEL_61;
        }
      }
      while (1)
      {
        uint64_t v38 = v31 >> 1;
        unint64_t v39 = (char *)__p + 16 * v38;
        long long v44 = *(_OWORD *)v39;
        if ((void)v45)
        {
          if (!(void)v44) {
            goto LABEL_60;
          }
          BOOL v40 = sub_357954(v45, v44);
          unint64_t v39 = (char *)__p + 16 * v38;
          if (v40) {
            break;
          }
        }
        *(void *)unint64_t v39 = v45;
        *((_WORD *)v39 + 4) = WORD4(v45);
        uint64_t v36 = &v44;
LABEL_54:
        uint64_t v37 = *(void *)v36;
        WORD4(v45) = *((_WORD *)v36 + 4);
        *(void *)&long long v45 = v37;
        BOOL v19 = v31 > 1;
        v31 >>= 1;
        if (!v19)
        {
          int v35 = __p;
          goto LABEL_34;
        }
      }
      *(void *)unint64_t v39 = v44;
      *((_WORD *)v39 + 4) = WORD4(v44);
LABEL_60:
      uint64_t v36 = &v45;
      goto LABEL_54;
    }
  }
LABEL_61:
  if (__p)
  {
    uint64_t v42 = __p;
    operator delete(__p);
  }
}

void sub_351F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_351F90(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = *(int64x2_t **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  int64_t v6 = v4 - *(void *)a1;
  if (v4 == *(void *)a1) {
    goto LABEL_18;
  }
  uint64_t v8 = *a2;
  if ((unint64_t)(v6 >> 3) <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = v6 >> 3;
  }
  if (v9 < 4)
  {
    unint64_t v10 = 0;
    unint64_t v11 = 0;
LABEL_10:
    unint64_t v17 = v9 - v11;
    uint64_t v18 = 8 * v11;
    BOOL v19 = &v5->i64[v11];
    uint64_t v20 = (uint64_t *)(v8 + v18);
    do
    {
      uint64_t v22 = *v19++;
      uint64_t v21 = v22;
      uint64_t v23 = *v20++;
      v10 += (v23 - v21) >> 3;
      --v17;
    }
    while (v17);
    goto LABEL_12;
  }
  unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v12 = v5 + 1;
  unint64_t v13 = (int64x2_t *)(v8 + 16);
  int64x2_t v14 = 0uLL;
  unint64_t v15 = v9 & 0xFFFFFFFFFFFFFFFCLL;
  int64x2_t v16 = 0uLL;
  do
  {
    int64x2_t v14 = vsraq_n_s64(v14, vsubq_s64(v13[-1], v12[-1]), 3uLL);
    int64x2_t v16 = vsraq_n_s64(v16, vsubq_s64(*v13, *v12), 3uLL);
    v12 += 2;
    v13 += 2;
    v15 -= 4;
  }
  while (v15);
  unint64_t v10 = vaddvq_s64(vaddq_s64(v16, v14));
  if (v9 != v11) {
    goto LABEL_10;
  }
LABEL_12:
  if (!v10)
  {
LABEL_18:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (v10 >> 61) {
    sub_2E00();
  }
  uint64_t v24 = (char *)operator new(8 * v10);
  *a3 = v24;
  a3[1] = v24;
  a3[2] = &v24[8 * v10];
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  long long __p = 0;
  if (v6 < 0) {
    sub_2E00();
  }
  long long __p = operator new(v6);
  uint64_t v27 = (char *)__p + 8 * (v6 >> 3);
  memcpy(__p, v5, v6);
  uint64_t v26 = v27;
  sub_352178(&__p, a2, (uint64_t)a3);
  if (__p)
  {
    uint64_t v26 = __p;
    operator delete(__p);
  }
}

void sub_352128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    operator delete(__p);
    unint64_t v13 = *(void **)v11;
    if (!*(void *)v11) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v13 = *(void **)v11;
    if (!*(void *)v11) {
      goto LABEL_3;
    }
  }
  *(void *)(v11 + 8) = v13;
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

void sub_352178(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1] - *a1;
  uint64_t v42 = 0;
  memset(v43, 0, 13);
  long long __p = 0;
  if ((unsigned __int16)(v7 >> 3))
  {
    if ((unsigned __int16)(v7 >> 3) == 1)
    {
      *(void *)&long long v45 = 0;
      *((void *)&v45 + 1) = 0xFFFFLL;
      unsigned int v8 = 1;
LABEL_7:
      sub_35101C(&__p, 2 * v8, &v45);
      uint64_t v6 = *a1;
      uint64_t v7 = a1[1] - *a1;
      goto LABEL_8;
    }
    unsigned int v8 = 0;
    unsigned int v9 = __clz((unsigned __int16)(v7 >> 3) - 1);
    *(void *)&long long v45 = 0;
    *((void *)&v45 + 1) = 0xFFFFLL;
    if (v9 >= 0x31)
    {
      unsigned int v8 = (unsigned __int16)(1 << -(char)v9);
      goto LABEL_7;
    }
  }
  else
  {
    unsigned int v8 = 0;
  }
LABEL_8:
  LOWORD(v43[1]) = v8;
  if ((v7 & 0x7FFF8) != 0)
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = *(void *)(v6 + 8 * v10);
      if (v11 == *(void *)(*a2 + 8 * v10)) {
        uint64_t v11 = 0;
      }
      unint64_t v12 = (char *)__p + 16 * LOWORD(v43[1]) + 16 * v10;
      *(void *)unint64_t v12 = v11;
      *((_WORD *)v12 + 4) = v10++;
      uint64_t v6 = *a1;
    }
    while ((unsigned __int16)((*((_DWORD *)a1 + 2) - *a1) >> 3) > (unsigned __int16)v10);
    unsigned int v8 = LOWORD(v43[1]);
  }
  unint64_t v13 = (unint64_t)(v42 - (unsigned char *)__p) >> 4;
  while (v8 < (unsigned __int16)v13)
  {
    unsigned int v14 = (unsigned __int16)v13 - 1;
    unint64_t v15 = (char *)__p + 16 * v14;
    *((_WORD *)v15 + 4) = v13 - 1 - v8;
    __int16 v16 = WORD1(v43[1]);
    if (*(void *)v15) {
      __int16 v16 = WORD1(v43[1]) + 1;
    }
    WORD1(v43[1]) = v16;
    long long v45 = *(_OWORD *)v15;
    if ((unsigned __int16)v13 != 1)
    {
      while (1)
      {
        uint64_t v20 = v14 >> 1;
        uint64_t v21 = (char *)__p + 16 * v20;
        long long v44 = *(_OWORD *)v21;
        if (SWORD4(v44) == -1)
        {
          *(void *)uint64_t v21 = v45;
          *((_WORD *)v21 + 4) = WORD4(v45);
          goto LABEL_16;
        }
        if ((void)v45)
        {
          if (!(void)v44) {
            goto LABEL_30;
          }
          BOOL v22 = sub_3591E0(v45, v44);
          uint64_t v21 = (char *)__p + 16 * v20;
          if (v22) {
            break;
          }
        }
        *(void *)uint64_t v21 = v45;
        *((_WORD *)v21 + 4) = WORD4(v45);
        unint64_t v17 = &v44;
LABEL_23:
        uint64_t v18 = *(void *)v17;
        WORD4(v45) = *((_WORD *)v17 + 4);
        *(void *)&long long v45 = v18;
        BOOL v19 = v14 > 1;
        v14 >>= 1;
        if (!v19) {
          goto LABEL_16;
        }
      }
      *(void *)uint64_t v21 = v44;
      *((_WORD *)v21 + 4) = WORD4(v44);
LABEL_30:
      unint64_t v17 = &v45;
      goto LABEL_23;
    }
LABEL_16:
    LOWORD(v13) = v13 - 1;
    unsigned int v8 = LOWORD(v43[1]);
  }
  BYTE4(v43[1]) = 1;
  if (WORD1(v43[1]))
  {
    uint64_t v23 = *((unsigned __int16 *)__p + 4);
    uint64_t v24 = *(void **)(*a1 + 8 * v23);
    *(void *)&long long v45 = a3;
    sub_2D66A4((char ***)&v45, v24);
    if (WORD1(v43[1]))
    {
      uint64_t v25 = *(void **)(*a1 + 8 * v23);
      while (1)
      {
        uint64_t v26 = *((unsigned __int16 *)__p + 4);
        if (!sub_3591B4(*(void *)(*a1 + 8 * v26), (uint64_t)v25))
        {
          uint64_t v25 = *(void **)(*a1 + 8 * v26);
          *(void *)&long long v45 = a3;
          sub_2D66A4((char ***)&v45, v25);
        }
        uint64_t v27 = *(void *)(*a1 + 8 * v26);
        if (v27 == *(void *)(*a2 + 8 * v26))
        {
          uint64_t v30 = *(void *)(*a1 + 8 * v26);
        }
        else
        {
          while (1)
          {
            BOOL v28 = sub_3591B4(v27, (uint64_t)v25);
            uint64_t v29 = *a2;
            uint64_t v30 = *(void *)(*a1 + 8 * v26);
            if (!v28) {
              break;
            }
            uint64_t v27 = v30 + 8;
            *(void *)(*a1 + 8 * v26) = v30 + 8;
            uint64_t v30 = v27;
            if (v27 == *(void *)(v29 + 8 * v26)) {
              goto LABEL_43;
            }
          }
          uint64_t v27 = *(void *)(v29 + 8 * v26);
        }
LABEL_43:
        if (v30 == v27) {
          uint64_t v30 = 0;
        }
        unsigned int v31 = LOWORD(v43[1]) + v26;
        uint64_t v32 = (char *)__p + 16 * v31;
        BOOL v33 = v30 || *((void *)__p + 2 * LOWORD(v43[1]) + 2 * v26) == 0;
        __int16 v34 = !v33;
        WORD1(v43[1]) -= v34;
        *(void *)long long __p = 0;
        *(void *)uint64_t v32 = v30;
        *((_WORD *)v32 + 4) = v26;
        int v35 = __p;
        long long v45 = *((_OWORD *)__p + v31);
        if (v31) {
          break;
        }
LABEL_34:
        *(void *)int v35 = v45;
        v35[4] = WORD4(v45);
        if (!WORD1(v43[1])) {
          goto LABEL_61;
        }
      }
      while (1)
      {
        uint64_t v38 = v31 >> 1;
        unint64_t v39 = (char *)__p + 16 * v38;
        long long v44 = *(_OWORD *)v39;
        if ((void)v45)
        {
          if (!(void)v44) {
            goto LABEL_60;
          }
          BOOL v40 = sub_3591E0(v45, v44);
          unint64_t v39 = (char *)__p + 16 * v38;
          if (v40) {
            break;
          }
        }
        *(void *)unint64_t v39 = v45;
        *((_WORD *)v39 + 4) = WORD4(v45);
        uint64_t v36 = &v44;
LABEL_54:
        uint64_t v37 = *(void *)v36;
        WORD4(v45) = *((_WORD *)v36 + 4);
        *(void *)&long long v45 = v37;
        BOOL v19 = v31 > 1;
        v31 >>= 1;
        if (!v19)
        {
          int v35 = __p;
          goto LABEL_34;
        }
      }
      *(void *)unint64_t v39 = v44;
      *((_WORD *)v39 + 4) = WORD4(v44);
LABEL_60:
      uint64_t v36 = &v45;
      goto LABEL_54;
    }
  }
LABEL_61:
  if (__p)
  {
    uint64_t v42 = __p;
    operator delete(__p);
  }
}

void sub_352568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_35259C(uint64_t a1)
{
  uint64_t v2 = (char *)(a1 + 20591);
  if ((*(char *)(a1 + 20703) & 0x80000000) == 0)
  {
    uint64_t v3 = *(void **)(a1 + 20600);
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 20680));
  uint64_t v3 = *(void **)(a1 + 20600);
  if (v3)
  {
LABEL_3:
    *(void *)(a1 + 20608) = v3;
    operator delete(v3);
  }
LABEL_4:
  if (*v2 < 0)
  {
    operator delete(*(void **)(a1 + 20568));
    uint64_t v4 = *(void ***)(a1 + 20544);
    if (!v4)
    {
LABEL_6:
      unint64_t v5 = *(void **)(a1 + 20512);
      if (!v5) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v4 = *(void ***)(a1 + 20544);
    if (!v4) {
      goto LABEL_6;
    }
  }
  unint64_t v12 = *(void ***)(a1 + 20552);
  if (v12 == v4)
  {
    *(void *)(a1 + 20552) = v4;
    operator delete(v4);
    unint64_t v5 = *(void **)(a1 + 20512);
    if (!v5) {
      goto LABEL_8;
    }
LABEL_7:
    *(void *)(a1 + 20520) = v5;
    operator delete(v5);
    goto LABEL_8;
  }
  do
  {
    if (*((char *)v12 - 1) < 0) {
      operator delete(*(v12 - 3));
    }
    v12 -= 3;
  }
  while (v12 != v4);
  unint64_t v13 = *(void **)(a1 + 20544);
  *(void *)(a1 + 20552) = v4;
  operator delete(v13);
  unint64_t v5 = *(void **)(a1 + 20512);
  if (v5) {
    goto LABEL_7;
  }
LABEL_8:
  uint64_t v6 = *(void **)(a1 + 20488);
  if (v6)
  {
    do
    {
      uint64_t v7 = (void *)*v6;
      sub_25F44((uint64_t)(v6 + 2));
      operator delete(v6);
      uint64_t v6 = v7;
    }
    while (v7);
  }
  unsigned int v8 = *(void **)(a1 + 20472);
  *(void *)(a1 + 20472) = 0;
  if (v8) {
    operator delete(v8);
  }
  sub_4814(a1 + 20424);
  unsigned int v9 = *(void **)(a1 + 20280);
  if (v9)
  {
    *(void *)(a1 + 20288) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 0x4000);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 12496);
    if (!v11) {
      goto LABEL_31;
    }
  }
  else
  {
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 12496);
    if (!v11) {
      goto LABEL_31;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_31:
  sub_328138(a1 + 11720);
  unsigned int v14 = *(std::__shared_weak_count **)(a1 + 7848);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    unint64_t v15 = *(std::__shared_weak_count **)(a1 + 7832);
    if (!v15)
    {
LABEL_35:
      __int16 v16 = (void *)a1;
      return sub_32834C(v16);
    }
  }
  else
  {
    unint64_t v15 = *(std::__shared_weak_count **)(a1 + 7832);
    if (!v15) {
      goto LABEL_35;
    }
  }
  if (atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_35;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  __int16 v16 = (void *)a1;

  return sub_32834C(v16);
}

uint64_t sub_352850(uint64_t a1, unint64_t a2)
{
  *(_WORD *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 26) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0x3E4CCCCD3F000000;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  if (a2)
  {
    unint64_t v3 = 4;
    if (a2 != 1)
    {
      do
      {
        if ((v3 & 0x8000000000000000) != 0)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "resize overflow");
        }
        v3 *= 2;
      }
      while ((unint64_t)(float)((float)v3 * 0.5) <= a2);
    }
  }
  else
  {
    unint64_t v3 = 32;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = v3;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  uint64_t v4 = operator new(0x2D0uLL);
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = off_2438A10;
  *(void *)(a1 + 104) = sub_328A0C((uint64_t)(v4 + 3));
  *(void *)(a1 + 112) = v4;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 1065353216;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 340) = 0u;
  *(void *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 72))));
  *(unsigned char *)(a1 + 24) = 0;
  return a1;
}

void sub_352A08(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v6);
  if (*(char *)(v1 + 103) < 0)
  {
    operator delete(*v4);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else if ((*(char *)(v1 + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  _Unwind_Resume(a1);
}

char *sub_352A7C(uint64_t a1, long long *a2)
{
  *(unsigned char *)(a1 + 25) = 1;
  unint64_t v3 = (long long *)(a1 + 80);
  sub_352B48(a1, (void **)(a1 + 80), a2);
  int32x4_t result = (char *)malloc_type_malloc(328 * *(void *)(a1 + 72), 0x10B2040594C0D32uLL);
  *(void *)(a1 + 408) = result;
  uint64_t v5 = *(void *)(a1 + 72);
  if (v5)
  {
    uint64_t v6 = result;
    uint64_t v7 = 0;
    uint64_t v8 = 328 * v5;
    do
    {
      int32x4_t result = (char *)sub_352C18(&v6[v7], v3);
      v7 += 328;
    }
    while (v8 != v7);
  }
  return result;
}

void sub_352B1C(void *a1)
{
  __cxa_begin_catch(a1);
  sub_353188(v1, v2);
  __cxa_rethrow();
}

void sub_352B34(_Unwind_Exception *a1)
{
}

void *sub_352B48(int a1, void **__dst, long long *a3)
{
  uint64_t v5 = __dst[7];
  if (v5)
  {
    do
    {
      uint64_t v6 = (void *)*v5;
      operator delete(v5);
      uint64_t v5 = v6;
    }
    while (v6);
  }
  uint64_t v7 = __dst[5];
  __dst[5] = 0;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)__dst[4];
  if (!v8 || atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*((char *)__dst + 23) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (*((char *)__dst + 23) < 0) {
LABEL_8:
  }
    operator delete(*__dst);
LABEL_9:

  return sub_352C18(__dst, a3);
}

void *sub_352C18(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
    uint64_t v5 = *((void *)a2 + 4);
    __dst[3] = *((void *)a2 + 3);
    __dst[4] = v5;
    if (!v5) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  long long v4 = *a2;
  __dst[2] = *((void *)a2 + 2);
  *(_OWORD *)__dst = v4;
  uint64_t v5 = *((void *)a2 + 4);
  __dst[3] = *((void *)a2 + 3);
  __dst[4] = v5;
  if (v5) {
LABEL_3:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
LABEL_4:
  sub_352D00((uint64_t)(__dst + 5), (uint64_t)a2 + 40);
  long long v6 = a2[5];
  long long v7 = a2[6];
  long long v8 = a2[8];
  *((_OWORD *)__dst + 7) = a2[7];
  *((_OWORD *)__dst + 8) = v8;
  *((_OWORD *)__dst + 5) = v6;
  *((_OWORD *)__dst + 6) = v7;
  long long v9 = a2[9];
  long long v10 = a2[10];
  long long v11 = a2[12];
  *((_OWORD *)__dst + 11) = a2[11];
  *((_OWORD *)__dst + 12) = v11;
  *((_OWORD *)__dst + 9) = v9;
  *((_OWORD *)__dst + 10) = v10;
  long long v12 = a2[13];
  long long v13 = a2[14];
  long long v14 = a2[16];
  *((_OWORD *)__dst + 15) = a2[15];
  *((_OWORD *)__dst + 16) = v14;
  *((_OWORD *)__dst + 13) = v12;
  *((_OWORD *)__dst + 14) = v13;
  long long v15 = a2[17];
  long long v16 = a2[18];
  long long v17 = a2[19];
  __dst[40] = *((void *)a2 + 40);
  *((_OWORD *)__dst + 18) = v16;
  *((_OWORD *)__dst + 19) = v17;
  *((_OWORD *)__dst + 17) = v15;
  return __dst;
}

void sub_352CE0(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 32);
  if (v3) {
    sub_20A76E0(v3);
  }
  sub_20A682C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_352D00(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_B6C0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(unsigned int **)(a2 + 16); i; uint64_t i = *(unsigned int **)i)
    sub_352E44(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_352E1C(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

void sub_352E30(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_352E44(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      long long v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == v6) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            long long v10 = (uint64_t *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          long long v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  long long v14 = operator new(0x108uLL);
  *long long v14 = 0;
  v14[1] = v6;
  long long v15 = *(_OWORD *)(a3 + 208);
  *((_OWORD *)v14 + 13) = *(_OWORD *)(a3 + 192);
  *((_OWORD *)v14 + 14) = v15;
  *((_OWORD *)v14 + 15) = *(_OWORD *)(a3 + 224);
  v14[32] = *(void *)(a3 + 240);
  long long v16 = *(_OWORD *)(a3 + 144);
  *((_OWORD *)v14 + 9) = *(_OWORD *)(a3 + 128);
  *((_OWORD *)v14 + 10) = v16;
  long long v17 = *(_OWORD *)(a3 + 176);
  *((_OWORD *)v14 + 11) = *(_OWORD *)(a3 + 160);
  *((_OWORD *)v14 + 12) = v17;
  long long v18 = *(_OWORD *)(a3 + 80);
  *((_OWORD *)v14 + 5) = *(_OWORD *)(a3 + 64);
  *((_OWORD *)v14 + 6) = v18;
  long long v19 = *(_OWORD *)(a3 + 112);
  *((_OWORD *)v14 + 7) = *(_OWORD *)(a3 + 96);
  *((_OWORD *)v14 + 8) = v19;
  long long v20 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v14 + 2) = v20;
  long long v21 = *(_OWORD *)(a3 + 48);
  *((_OWORD *)v14 + 3) = *(_OWORD *)(a3 + 32);
  *((_OWORD *)v14 + 4) = v21;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (v7 && (float)(v23 * (float)v7) >= v22)
  {
    unint64_t v6 = v3;
  }
  else
  {
    BOOL v24 = 1;
    if (v7 >= 3) {
      BOOL v24 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v7);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_36;
    }
    if (prime < v7)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v7) {
LABEL_36:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        v6 %= v7;
      }
    }
    else
    {
      unint64_t v6 = (v7 - 1) & v6;
    }
  }
  uint64_t v31 = *(void *)a1;
  uint64_t v32 = *(void **)(*(void *)a1 + 8 * v6);
  if (v32)
  {
    *long long v14 = *v32;
LABEL_59:
    void *v32 = v14;
    goto LABEL_60;
  }
  *long long v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v31 + 8 * v6) = a1 + 16;
  if (*v14)
  {
    unint64_t v33 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v33 >= v7) {
        v33 %= v7;
      }
    }
    else
    {
      v33 &= v7 - 1;
    }
    uint64_t v32 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_353174(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_353188(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if (a1 != a2)
  {
    do
    {
      while (1)
      {
        long long v4 = *(void **)(v2 + 56);
        if (v4)
        {
          do
          {
            int8x8_t v5 = (void *)*v4;
            operator delete(v4);
            long long v4 = v5;
          }
          while (v5);
        }
        unint64_t v6 = *(void **)(v2 + 40);
        *(void *)(v2 + 40) = 0;
        if (v6) {
          operator delete(v6);
        }
        unint64_t v7 = *(std::__shared_weak_count **)(v2 + 32);
        if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        if (*(char *)(v2 + 23) < 0) {
          break;
        }
        v2 += 328;
        if (v2 == a2) {
          return a2;
        }
      }
      operator delete(*(void **)v2);
      v2 += 328;
    }
    while (v2 != a2);
    return a2;
  }
  return v2;
}

uint64x2_t sub_353264(uint64_t a1, uint64_t a2)
{
  uint64x2_t v5 = *(uint64x2_t *)a1;
  long long v4 = *(_OWORD *)(a1 + 16);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(uint64x2_t *)a2 = v5;
  *(_OWORD *)(a2 + 16) = v4;
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)&long long __dst = *(void *)(a1 + 40);
  *(void *)((char *)&__dst + 7) = *(void *)(a1 + 47);
  char v8 = *(unsigned char *)(a1 + 55);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v9 = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v9;
  *(void *)(a2 + 47) = *(void *)((char *)&__dst + 7);
  uint64_t v10 = __dst;
  *(void *)(a2 + 32) = v7;
  *(void *)(a2 + 40) = v10;
  *(unsigned char *)(a2 + 55) = v8;
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = v11;
  uint64_t v12 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = v12;
  uint64_t v13 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = v13;
  long long __dst = 0uLL;
  uint64_t v22 = 0;
  long long v14 = (std::__shared_weak_count *)operator new(0x2D0uLL);
  v14->__shared_owners_ = 0;
  v14->__shared_weak_owners_ = 0;
  v14->__vftable = (std::__shared_weak_count_vtbl *)off_2438A10;
  uint64_t v23 = sub_328A0C((uint64_t)&v14[1]);
  BOOL v24 = v14;
  *(_OWORD *)unint64_t v25 = 0u;
  *(_OWORD *)long long __p = 0u;
  int v27 = 1065353216;
  char v28 = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  memset(v39, 0, 28);
  memset(&v39[32], 0, 48);
  sub_352B48(a1, (void **)&__dst, (long long *)(a1 + 80));
  sub_352B48(a1, (void **)(a1 + 80), (long long *)(a2 + 80));
  sub_352B48(a1, (void **)(a2 + 80), &__dst);
  long long v15 = __p[0];
  if (__p[0])
  {
    do
    {
      long long v16 = (void *)*v15;
      operator delete(v15);
      long long v15 = v16;
    }
    while (v16);
  }
  long long v17 = v25[0];
  v25[0] = 0;
  if (v17) {
    operator delete(v17);
  }
  long long v18 = v24;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if ((SHIBYTE(v22) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (SHIBYTE(v22) < 0) {
LABEL_8:
  }
    operator delete((void *)__dst);
LABEL_9:
  uint64_t v19 = *(void *)(a1 + 408);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(void *)(a2 + 408) = v19;
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 72))));
  *(unsigned char *)(a1 + 24) = 0;
  uint64x2_t result = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a2 + 16), (float)*(unint64_t *)(a2 + 72))));
  *(uint64x2_t *)a2 = result;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

void sub_3534F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_35350C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_34A06C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_353520(uint64_t a1, uint64_t a2, unint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  if (*(char *)(a2 + 55) < 0)
  {
    sub_4200((unsigned char *)(a1 + 32), *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v7;
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_352C18((void *)(a1 + 80), (long long *)(a2 + 80));
  *(void *)(a1 + 408) = 0;
  if (*(unsigned char *)(a2 + 25))
  {
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 72))));
    *(unsigned char *)(a1 + 24) = 0;
    sub_3536EC(a1, (void *)a2, a3);
    return a1;
  }
  else
  {
    unint64_t v9 = 4;
    if (a3 > 4) {
      goto LABEL_8;
    }
    while (1)
    {
      float v10 = *(float *)(a1 + 16) * (float)v9;
      if (*(void *)(a2 + 64) - *(void *)(a2 + 56) < (unint64_t)v10) {
        break;
      }
      do
      {
LABEL_8:
        if ((v9 & 0x8000000000000000) != 0)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "resize overflow");
        }
        v9 *= 2;
      }
      while (v9 < a3);
    }
    *(void *)(a1 + 72) = v9;
    float v11 = *(float *)(a1 + 20) * (float)v9;
    *(void *)a1 = (unint64_t)v10;
    *(void *)(a1 + 8) = (unint64_t)v11;
    *(unsigned char *)(a1 + 24) = 0;
    return a1;
  }
}

void sub_3536B0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void *sub_3536EC(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v4 = a2[8] - a2[7];
  unint64_t v5 = 4;
  if (a3 > 4) {
    goto LABEL_3;
  }
  while (v4 >= (unint64_t)(float)(*(float *)(a1 + 16) * (float)v5))
  {
    do
    {
LABEL_3:
      if ((v5 & 0x8000000000000000) != 0)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_2E18(exception, "resize overflow");
      }
      v5 *= 2;
    }
    while (v5 < a3);
  }
  sub_3539FC(a1, v5);
  long long v6 = (long long *)a2[51];
  long long v7 = (char *)v6 + 328 * a2[9];
  uint64_t v42 = a2;
  unint64_t v43 = v6;
  long long v44 = v7;
  sub_34A354(&v42);
  uint64_t v8 = a2[51] + 328 * a2[9];
  unint64_t v39 = a2;
  BOOL v40 = (long long *)v8;
  uint64_t v41 = v8;
  uint64x2_t result = sub_34A354(&v39);
  for (uint64_t i = v43; v43 != v40; uint64_t i = v43)
  {
    uint64_t v12 = *(void *)(a1 + 72);
    int v13 = *((char *)i + 23);
    if (v13 >= 0) {
      long long v14 = (uint64_t *)i;
    }
    else {
      long long v14 = *(uint64_t **)i;
    }
    if (v13 >= 0) {
      unint64_t v15 = *((unsigned __int8 *)i + 23);
    }
    else {
      unint64_t v15 = *((void *)i + 1);
    }
    unint64_t v16 = sub_B128((uint64_t)&v39, v14, v15);
    uint64_t v17 = v12 - 1;
    uint64_t v18 = *(void *)(a1 + 408);
    size_t v19 = *(void *)(a1 + 88);
    if (*(char *)(a1 + 103) >= 0) {
      long long v20 = (unsigned __int8 *)*(unsigned __int8 *)(a1 + 103);
    }
    else {
      long long v20 = *(unsigned __int8 **)(a1 + 88);
    }
    if ((*(unsigned char *)(a1 + 103) & 0x80) != 0)
    {
      for (uint64_t j = 1; ; ++j)
      {
        unint64_t v29 = v16 & v17;
        uint64_t v22 = (void **)(v18 + 328 * (v16 & v17));
        long long v30 = (unsigned __int8 *)*((unsigned __int8 *)v22 + 23);
        int v31 = (char)v30;
        if ((char)v30 < 0) {
          long long v30 = (unsigned __int8 *)v22[1];
        }
        if (v20 == v30)
        {
          long long v32 = v31 >= 0 ? (unsigned __int8 *)(v18 + 328 * (v16 & v17)) : (unsigned __int8 *)*v22;
          if (!memcmp(*(const void **)(a1 + 80), v32, v19)) {
            break;
          }
        }
        unint64_t v16 = j + v29;
      }
    }
    else
    {
      if (*(unsigned char *)(a1 + 103))
      {
        for (k = 0; ; unint64_t v16 = (v16 & v17) + k)
        {
          uint64_t v22 = (void **)(v18 + 328 * (v16 & v17));
          uint64_t v23 = (unsigned __int8 *)*((unsigned __int8 *)v22 + 23);
          int v24 = (char)v23;
          if ((char)v23 < 0) {
            uint64_t v23 = (unsigned __int8 *)v22[1];
          }
          if (v20 == v23)
          {
            if (v24 >= 0) {
              unint64_t v25 = (unsigned __int8 *)(v18 + 328 * (v16 & v17));
            }
            else {
              unint64_t v25 = (unsigned __int8 *)*v22;
            }
            unint64_t v26 = (unsigned __int8 *)(a1 + 80);
            uint64_t v27 = *(unsigned __int8 *)(a1 + 103);
            while (*v26 == *v25)
            {
              ++v26;
              ++v25;
              if (!--v27) {
                goto LABEL_8;
              }
            }
          }
          ++k;
        }
      }
      unint64_t v33 = v16 & v17;
      uint64_t v22 = (void **)(v18 + 328 * (v16 & v17));
      long long v34 = (unsigned __int8 *)*((unsigned __int8 *)v22 + 23);
      if ((char)v34 < 0) {
        long long v34 = (unsigned __int8 *)v22[1];
      }
      if (v34 != (unsigned __int8 *)*(unsigned __int8 *)(a1 + 103))
      {
        uint64_t v35 = 1;
        do
        {
          unint64_t v33 = (v33 + v35) & v17;
          uint64_t v22 = (void **)(v18 + 328 * v33);
          long long v36 = (unsigned __int8 *)*((unsigned __int8 *)v22 + 23);
          if ((char)v36 < 0) {
            long long v36 = (unsigned __int8 *)v22[1];
          }
          ++v35;
        }
        while (v20 != v36);
      }
    }
LABEL_8:
    sub_352B48(a1, v22, v43);
    ++*(void *)(a1 + 64);
    unint64_t v43 = (long long *)((char *)v43 + 328);
    sub_34A354(&v42);
    uint64_t v11 = a2[51] + 328 * a2[9];
    unint64_t v39 = a2;
    BOOL v40 = (long long *)v11;
    uint64_t v41 = v11;
    uint64x2_t result = sub_34A354(&v39);
  }
  ++*(_DWORD *)(a1 + 28);
  return result;
}

void sub_3539E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64x2_t sub_3539FC(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 408))
  {
    sub_349F6C(a1, 0, *(void *)(a1 + 72));
    unint64_t v4 = *(char **)(a1 + 408);
    if (*(void *)(a1 + 72) == a2) {
      goto LABEL_7;
    }
    unint64_t v5 = (char *)malloc_type_realloc(*(void **)(a1 + 408), 328 * a2, 0x10B2040594C0D32uLL);
    if (!v5)
    {
      fprintf(__stderrp, "sparsehash: FATAL ERROR: failed to reallocate %lu elements for ptr %p", a2, v4);
      exit(1);
    }
  }
  else
  {
    unint64_t v5 = (char *)malloc_type_malloc(328 * a2, 0x10B2040594C0D32uLL);
  }
  *(void *)(a1 + 408) = v5;
  unint64_t v4 = v5;
LABEL_7:
  if (a2)
  {
    uint64_t v6 = 0;
    do
    {
      sub_352C18(&v4[v6], (long long *)(a1 + 80));
      v6 += 328;
    }
    while (328 * a2 != v6);
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = a2;
  uint64x2_t result = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)a2)));
  *(uint64x2_t *)a1 = result;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

void sub_353B28(void *a1)
{
  __cxa_begin_catch(a1);
  sub_353188(v1, v2);
  __cxa_rethrow();
}

void sub_353B40(_Unwind_Exception *a1)
{
}

uint64_t sub_353B54(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    unint64_t v4 = *(void *)(a1 + 64) - *(void *)(a1 + 56);
    unint64_t v5 = *(void *)(a1 + 8);
    if (v5) {
      BOOL v6 = v4 >= v5;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6 || (unint64_t v7 = *(void *)(a1 + 72), v7 < 0x21))
    {
      uint64_t result = 0;
      *(unsigned char *)(a1 + 24) = 0;
      unint64_t v11 = *(void *)(a1 + 64);
      if (v11 >= ~a2) {
        goto LABEL_33;
      }
    }
    else
    {
      float v8 = (float)v4;
      do
      {
        unint64_t v9 = v7;
        v7 >>= 1;
      }
      while (v9 >= 0x42 && (float)(*(float *)(a1 + 20) * (float)v7) > v8);
      sub_353520((uint64_t)v23, a1, v7);
      sub_353264(a1, (uint64_t)v23);
      sub_349E78((uint64_t)v23);
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 0;
      unint64_t v11 = *(void *)(a1 + 64);
      if (v11 >= ~a2) {
        goto LABEL_33;
      }
    }
  }
  else
  {
    uint64_t result = 0;
    unint64_t v11 = *(void *)(a1 + 64);
    if (v11 >= ~a2) {
      goto LABEL_33;
    }
  }
  unint64_t v12 = *(void *)(a1 + 72);
  unint64_t v13 = v11 + a2;
  if (v12 < 4 || v13 > *(void *)a1)
  {
    float v14 = *(float *)(a1 + 16);
    unint64_t v15 = vcvts_n_u32_f32(v14, 2uLL);
    unint64_t v16 = 4;
    if (v13 >= v15)
    {
      while ((v16 & 0x8000000000000000) == 0)
      {
        v16 *= 2;
        if (v13 < (unint64_t)(float)(v14 * (float)v16)) {
          goto LABEL_18;
        }
      }
LABEL_33:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_2E18(exception, "resize overflow");
    }
LABEL_18:
    if (v16 > v12)
    {
      unint64_t v17 = *(void *)(a1 + 56);
      unint64_t v18 = v11 - v17 + a2;
      unint64_t v19 = 4;
      if (v12 <= 4) {
        goto LABEL_22;
      }
      do
      {
        do
        {
          if ((v19 & 0x8000000000000000) != 0) {
            goto LABEL_33;
          }
          v19 *= 2;
        }
        while (v19 < v12);
LABEL_22:
        ;
      }
      while (v18 >= (unint64_t)(float)(v14 * (float)v19));
      unint64_t v20 = v13 - (v17 >> 2);
      unint64_t v21 = 4;
      if (v20 >= v15)
      {
        while ((v21 & 0x8000000000000000) == 0)
        {
          v21 *= 2;
          if (v20 < (unint64_t)(float)(v14 * (float)v21)) {
            goto LABEL_26;
          }
        }
        goto LABEL_33;
      }
LABEL_26:
      if (v19 <= 0x7FFFFFFFFFFFFFFELL
        && v19 < v21
        && v18 >= (unint64_t)(float)(*(float *)(a1 + 20) * (float)(2 * v19)))
      {
        v19 *= 2;
      }
      sub_353520((uint64_t)v23, a1, v19);
      sub_353264(a1, (uint64_t)v23);
      sub_349E78((uint64_t)v23);
      return 1;
    }
  }
  return result;
}

void sub_353DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_353DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_353E08(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_353E1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_353E30(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_353E44(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_353E58(uint64_t a1, long long *a2)
{
  uint64_t v4 = sub_35401C(a1, (uint64_t)a2);
  if (v4 != -1) {
    return *(void *)(a1 + 408) + 328 * v4;
  }
  uint64_t v8 = v5;
  if (sub_353B54(a1, 1))
  {
    sub_35428C(a2, (uint64_t)v17);
    uint64_t v9 = sub_35401C(a1, (uint64_t)v17);
    if (v9 == -1)
    {
      sub_354404(a1, (long long *)v17, v10, &v22);
      uint64_t v6 = v23;
      unint64_t v11 = __p;
      if (!__p) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v6 = *(void *)(a1 + 408) + 328 * v9;
      unint64_t v11 = __p;
      if (!__p) {
        goto LABEL_13;
      }
    }
    do
    {
      float v14 = (void *)*v11;
      operator delete(v11);
      unint64_t v11 = v14;
    }
    while (v14);
  }
  else
  {
    sub_35428C(a2, (uint64_t)v17);
    sub_354404(a1, (long long *)v17, v8, &v22);
    uint64_t v6 = v23;
    unint64_t v12 = __p;
    if (__p)
    {
      do
      {
        unint64_t v13 = (void *)*v12;
        operator delete(v12);
        unint64_t v12 = v13;
      }
      while (v13);
    }
  }
LABEL_13:
  unint64_t v15 = v20;
  unint64_t v20 = 0;
  if (v15) {
    operator delete(v15);
  }
  unint64_t v16 = v19;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if ((v18 & 0x80000000) == 0) {
      return v6;
    }
  }
  else if ((v18 & 0x80000000) == 0)
  {
    return v6;
  }
  operator delete(v17[0]);
  return v6;
}

void sub_353FF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_34A06C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_354008(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_34A06C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_35401C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)(a1 + 72);
  unint64_t v5 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v6 = v5;
  }
  unint64_t v7 = sub_B128((uint64_t)&v44, (uint64_t *)a2, v6);
  uint64_t v8 = 0;
  uint64_t v9 = v4 - 1;
  uint64_t v10 = *(void *)(a1 + 408);
  uint64_t v11 = *(unsigned __int8 *)(a1 + 103);
  if ((v11 & 0x80u) == 0) {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 103);
  }
  else {
    uint64_t v12 = *(void *)(a1 + 88);
  }
  size_t __n = *(void *)(a1 + 88);
  uint64_t v13 = *(unsigned __int8 *)(v2 + 23);
  long long v37 = *(const void **)v2;
  size_t v38 = *(void *)(v2 + 8);
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = *(unsigned __int8 *)(v2 + 23);
  }
  else {
    uint64_t v14 = *(void *)(v2 + 8);
  }
  uint64_t v43 = -1;
  uint64_t v42 = *(unsigned __int8 *)(v2 + 23);
  BOOL v40 = (unsigned __int8 *)v2;
  uint64_t v41 = v14;
  while (1)
  {
    unint64_t v16 = v7 & v9;
    unint64_t v17 = (unsigned __int8 *)(v10 + 328 * (v7 & v9));
    int v18 = (char)v17[23];
    if (v18 >= 0) {
      uint64_t v19 = v17[23];
    }
    else {
      uint64_t v19 = *((void *)v17 + 1);
    }
    if (v12 != v19) {
      goto LABEL_29;
    }
    unint64_t v20 = v18 >= 0 ? (unsigned __int8 *)(v10 + 328 * (v7 & v9)) : *(unsigned __int8 **)v17;
    if ((v11 & 0x80) != 0) {
      break;
    }
    if (!v11) {
      return -1;
    }
    unint64_t v21 = (unsigned __int8 *)(a1 + 80);
    uint64_t v22 = v11;
    while (*v21 == *v20)
    {
      ++v21;
      ++v20;
      if (!--v22) {
        return -1;
      }
    }
LABEL_29:
    if (*(void *)(a1 + 56))
    {
      uint64_t v25 = *(unsigned __int8 *)(a1 + 55);
      uint64_t v26 = (v25 & 0x80u) == 0 ? *(unsigned __int8 *)(a1 + 55) : *(void *)(a1 + 40);
      if (v26 == v19)
      {
        if (v18 >= 0) {
          uint64_t v27 = v17;
        }
        else {
          uint64_t v27 = *(unsigned __int8 **)v17;
        }
        if ((v25 & 0x80) != 0)
        {
          uint64_t v29 = v11;
          int v30 = memcmp(*(const void **)(a1 + 32), v27, *(void *)(a1 + 40));
          uint64_t v14 = v41;
          uint64_t v13 = v42;
          uint64_t v11 = v29;
          if (!v30)
          {
LABEL_11:
            uint64_t v15 = v43;
            if (v43 == -1) {
              uint64_t v15 = v16;
            }
            uint64_t v43 = v15;
            goto LABEL_14;
          }
        }
        else
        {
          if (!*(unsigned char *)(a1 + 55)) {
            goto LABEL_11;
          }
          char v28 = (unsigned __int8 *)(a1 + 32);
          while (*v28 == *v27)
          {
            ++v28;
            ++v27;
            if (!--v25) {
              goto LABEL_11;
            }
          }
        }
      }
    }
    if (v14 == v19)
    {
      if (v18 >= 0) {
        int v31 = v17;
      }
      else {
        int v31 = *(unsigned __int8 **)v17;
      }
      if ((v13 & 0x80) != 0)
      {
        uint64_t v34 = v11;
        int v35 = memcmp(v37, v31, v38);
        uint64_t v14 = v41;
        uint64_t v13 = v42;
        uint64_t v11 = v34;
        if (!v35) {
          return v16;
        }
      }
      else
      {
        long long v32 = v40;
        if (!v13) {
          return v16;
        }
        uint64_t v33 = v13;
        while (*v32 == *v31)
        {
          ++v32;
          ++v31;
          if (!--v33) {
            return v16;
          }
        }
      }
    }
LABEL_14:
    unint64_t v7 = ++v8 + v16;
  }
  uint64_t v23 = v11;
  int v24 = memcmp(*(const void **)(a1 + 80), v20, __n);
  uint64_t v14 = v41;
  uint64_t v13 = v42;
  uint64_t v11 = v23;
  if (v24) {
    goto LABEL_29;
  }
  return -1;
}

__n128 sub_35428C@<Q0>(long long *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = operator new(0x2D0uLL);
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = off_2438A10;
  sub_328A0C((uint64_t)(v4 + 3));
  LOBYTE(v6[0]) = 0;
  memset((char *)v6 + 8, 0, 176);
  *(_OWORD *)((char *)&v6[11] + 4) = 0u;
  memset((char *)&v6[12] + 8, 0, 40);
  if (*((char *)a1 + 23) < 0)
  {
    sub_4200(&__dst, *(void **)a1, *((void *)a1 + 1));
  }
  else
  {
    long long __dst = *a1;
    uint64_t v8 = *((void *)a1 + 2);
  }
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v8;
  *(void *)(a2 + 24) = v4 + 3;
  *(void *)(a2 + 32) = v4;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 48) = 0;
  *(_DWORD *)(a2 + 72) = 1065353216;
  *(void *)(a2 + 320) = 0;
  *(_OWORD *)(a2 + 288) = v6[13];
  *(_OWORD *)(a2 + 304) = v6[14];
  *(_OWORD *)(a2 + 256) = v6[11];
  *(_OWORD *)(a2 + 272) = v6[12];
  *(_OWORD *)(a2 + 224) = v6[9];
  *(_OWORD *)(a2 + 240) = v6[10];
  *(_OWORD *)(a2 + 192) = v6[7];
  *(_OWORD *)(a2 + 208) = v6[8];
  *(_OWORD *)(a2 + 160) = v6[5];
  *(_OWORD *)(a2 + 176) = v6[6];
  *(_OWORD *)(a2 + 128) = v6[3];
  *(_OWORD *)(a2 + 144) = v6[4];
  __n128 result = (__n128)v6[1];
  *(_OWORD *)(a2 + 96) = v6[1];
  *(_OWORD *)(a2 + 112) = v6[2];
  *(_OWORD *)(a2 + 80) = v6[0];
  return result;
}

void sub_3543D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_3543EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void *sub_354404@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 64);
  if ((unint64_t)(v5 - v6) >= 0xC7CE0C7CE0C7CELL)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2E18(exception, "insert overflow");
  }
  uint64_t v10 = *(void *)(a1 + 408);
  if (v6)
  {
    uint64_t v11 = (unsigned __int8 **)(v10 + 328 * a3);
    uint64_t v12 = *(unsigned __int8 *)(a1 + 55);
    if ((v12 & 0x80u) == 0) {
      uint64_t v13 = (unsigned __int8 *)*(unsigned __int8 *)(a1 + 55);
    }
    else {
      uint64_t v13 = *(unsigned __int8 **)(a1 + 40);
    }
    uint64_t v14 = (unsigned __int8 *)*((unsigned __int8 *)v11 + 23);
    int v15 = (char)v14;
    if ((char)v14 < 0) {
      uint64_t v14 = v11[1];
    }
    if (v13 == v14)
    {
      unint64_t v16 = (const void **)(a1 + 32);
      if (v15 >= 0) {
        unint64_t v17 = (unsigned __int8 *)(v10 + 328 * a3);
      }
      else {
        unint64_t v17 = *v11;
      }
      if ((v12 & 0x80) == 0)
      {
        if (*(unsigned char *)(a1 + 55))
        {
          while (*(unsigned __int8 *)v16 == *v17)
          {
            unint64_t v16 = (const void **)((char *)v16 + 1);
            ++v17;
            if (!--v12) {
              goto LABEL_20;
            }
          }
          goto LABEL_18;
        }
LABEL_20:
        *(void *)(a1 + 56) = v6 - 1;
        goto LABEL_19;
      }
      if (!memcmp(*v16, v17, *(void *)(a1 + 40))) {
        goto LABEL_20;
      }
    }
  }
LABEL_18:
  *(void *)(a1 + 64) = v5 + 1;
LABEL_19:
  uint64_t v18 = 328 * a3;
  __n128 result = sub_352B48(a1, (void **)(v10 + v18), a2);
  uint64_t v20 = *(void *)(a1 + 408);
  uint64_t v21 = v20 + v18;
  uint64_t v22 = v20 + 328 * *(void *)(a1 + 72);
  *a4 = a1;
  a4[1] = v21;
  a4[2] = v22;
  return result;
}

void sub_35456C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_354580(uint64_t a1)
{
  unint64_t v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v5 = v2 - 6;
      *(void *)(a1 + 16) = v2 - 6;
      if (*((char *)v2 - 25) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_3545E8(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_3547B8(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  int v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    uint64_t v18 = (char *)*a1;
    int v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      int v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_3547A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_3547B8(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_354910(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_354924(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_354AF4(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_354AE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_354AF4(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_354C4C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_354C60(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_354E30(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_354E1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_354E30(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_354F88(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_354F9C(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_35516C(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_355158(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_35516C(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_3552C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_3552E4()
{
  return v0;
}

uint64_t sub_3552F4(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_355334()
{
  unk_25573DF = 16641;
  word_25573C8 = 65;
  byte_25573F7 = 1;
  byte_25573E1 = 0;
}

uint64_t sub_35535C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1;
}

void sub_3555C8()
{
  unk_255740F = 16641;
  word_25573F8 = 65;
  byte_2557427 = 1;
  byte_2557411 = 0;
}

BOOL sub_3555F0(void *a1, uint64_t a2, uint64_t *a3, unsigned int a4, char *a5, uint64_t a6)
{
  uint64_t v12 = *a1 + a1[1];
  *(void *)&v174[0] = *a1;
  *((void *)&v174[0] + 1) = v12;
  *(void *)&v174[1] = 0x2C700000000;
  if (sub_2F333C((uint64_t)v174))
  {
    while (LODWORD(v174[1]) != 1)
    {
      sub_2F3548((uint64_t)v174);
      if (!sub_2F333C((uint64_t)v174)) {
        goto LABEL_8;
      }
    }
    v171 = sub_2F3488((char **)v174);
    unint64_t v172 = &v171[v13];
    uint64_t v173 = 0x2C700000000;
    if (sub_30DA40((uint64_t)&v171))
    {
      while (v173 != 9)
      {
        sub_30DC4C((uint64_t)&v171);
        if (!sub_30DA40((uint64_t)&v171)) {
          goto LABEL_8;
        }
      }
      uint64_t v163 = a2;
      int v77 = sub_30DB8C(&v171);
      if (v78 >= 0x7FFFFFFFFFFFFFF8) {
        sub_188D690();
      }
      int64_t v79 = v77;
      long long v80 = (char *)v78;
      if (v78 >= 0x17)
      {
        uint64_t v82 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v78 | 7) != 0x17) {
          uint64_t v82 = v78 | 7;
        }
        uint64_t v83 = v82 + 1;
        p_dst = (char *)operator new(v82 + 1);
        v169 = v80;
        int64_t v170 = v83 | 0x8000000000000000;
        long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v170) = v78;
        p_dst = (char *)&__dst;
        if (!v78) {
          goto LABEL_212;
        }
      }
      memmove(p_dst, v79, (size_t)v80);
LABEL_212:
      BOOL v14 = 0;
      v80[(void)p_dst] = 0;
      uint64_t v84 = (char *)HIBYTE(v170);
      int v85 = SHIBYTE(v170);
      if (v170 < 0) {
        uint64_t v84 = v169;
      }
      unint64_t v86 = a5[23];
      int v87 = (char)v86;
      if ((v86 & 0x80u) != 0) {
        unint64_t v86 = *((void *)a5 + 1);
      }
      a2 = v163;
      if (v84 == (char *)v86)
      {
        unint64_t v161 = a3;
        if (v87 >= 0) {
          uint64_t v88 = a5;
        }
        else {
          uint64_t v88 = *(char **)a5;
        }
        if (v84)
        {
          if (v170 >= 0) {
            uint64_t v89 = &__dst;
          }
          else {
            uint64_t v89 = (char **)__dst;
          }
          BOOL v90 = v84 - 1;
          do
          {
            __darwin_ct_rune_t v91 = *(char *)v89;
            __darwin_ct_rune_t v92 = __toupper(*v88);
            __darwin_ct_rune_t v93 = __toupper(v91);
            BOOL v14 = v92 == v93;
            BOOL v94 = v92 != v93 || v90-- == 0;
            ++v88;
            uint64_t v89 = (char **)((char *)v89 + 1);
          }
          while (!v94);
          a2 = v163;
        }
        else
        {
          BOOL v14 = 1;
        }
        a3 = v161;
      }
      if (v85 < 0) {
        operator delete(__dst);
      }
      goto LABEL_9;
    }
  }
LABEL_8:
  BOOL v14 = 0;
LABEL_9:
  uint64_t v15 = (char *)(*a1 + a1[1]);
  v171 = (char *)*a1;
  unint64_t v172 = v15;
  uint64_t v173 = 0x2C700000000;
  if (!sub_2F333C((uint64_t)&v171)) {
    goto LABEL_96;
  }
  uint64_t v16 = 0;
  unint64_t v17 = 0;
  uint64_t v164 = 0;
  uint64_t v165 = 0;
  unint64_t v18 = 0;
  unint64_t v19 = 0;
  do
  {
    if (v173 == 2)
    {
      long long __dst = sub_2F3488(&v171);
      v169 = &__dst[v21];
      int64_t v170 = 0x2C700000000;
      if (sub_30DA40((uint64_t)&__dst))
      {
        while (v170 != 1)
        {
          switch(HIDWORD(v170))
          {
            case 0:
              sub_2F3C98((uint64_t *)&__dst, (uint64_t)v169);
              break;
            case 1:
              __dst += 8;
              if (__dst > v169)
              {
                exception = __cxa_allocate_exception(0x40uLL);
                *(void *)&v174[0] = operator new(0x30uLL);
                *(long long *)((char *)v174 + 8) = xmmword_20E1380;
                strcpy(*(char **)&v174[0], "Skipping over bytes exceeded message length.");
                v134 = (void *)sub_2F404((uint64_t)exception, v174);
              }
              return result;
            case 2:
              unsigned int v22 = sub_2F36C8(&__dst, v169);
              __dst += v22;
              if (__dst > v169)
              {
                long long v131 = __cxa_allocate_exception(0x40uLL);
                *(void *)&v174[0] = operator new(0x30uLL);
                *(long long *)((char *)v174 + 8) = xmmword_20E1380;
                strcpy(*(char **)&v174[0], "Skipping over bytes exceeded message length.");
                int v132 = (void *)sub_2F404((uint64_t)v131, v174);
              }
              return result;
            case 5:
              __dst += 4;
              if (__dst > v169)
              {
                unint64_t v127 = __cxa_allocate_exception(0x40uLL);
                *(void *)&v174[0] = operator new(0x30uLL);
                *(long long *)((char *)v174 + 8) = xmmword_20E1380;
                strcpy(*(char **)&v174[0], "Skipping over bytes exceeded message length.");
                uint64_t v128 = (void *)sub_2F404((uint64_t)v127, v174);
              }
              return result;
            default:
              long long v135 = __cxa_allocate_exception(0x40uLL);
              BYTE7(v174[1]) = 18;
              strcpy((char *)v174, "Unknown wire type.");
              v136 = (void *)sub_2F404((uint64_t)v135, v174);
          }
          if (!sub_30DA40((uint64_t)&__dst)) {
            goto LABEL_12;
          }
        }
        uint64_t v159 = v16;
        unint64_t v160 = a3;
        uint64_t v162 = a2;
        uint64_t v23 = sub_30DB8C(&__dst);
        uint64_t v25 = v24;
        uint64_t v26 = &v23[v24];
        *(void *)&long long v166 = v23;
        *((void *)&v166 + 1) = &v23[v24];
        uint64_t v167 = 0x2C700000000;
        if (sub_2F4CE4(&v166, 2))
        {
          if (v14)
          {
            uint64_t v27 = 1;
            a2 = v162;
          }
          else
          {
            uint64_t v28 = v25;
            a2 = v162;
            uint64_t v27 = sub_357280(v23, v28, v162);
          }
          ++v19;
          v165 += v27;
          if (!sub_2F4CE4(&v166, 6))
          {
LABEL_37:
            uint64_t v16 = v159;
            a3 = v160;
            continue;
          }
        }
        else
        {
          a2 = v162;
          if (!sub_2F4CE4(&v166, 6)) {
            goto LABEL_37;
          }
        }
        if (!sub_2F333C((uint64_t)&v166)) {
          goto LABEL_41;
        }
        while (v167 != 7)
        {
          switch(HIDWORD(v167))
          {
            case 0:
              sub_2F3C98((uint64_t *)&v166, *((uint64_t *)&v166 + 1));
              break;
            case 1:
              *(void *)&long long v166 = v166 + 8;
              if ((unint64_t)v166 > *((void *)&v166 + 1))
              {
                int32x4_t v155 = __cxa_allocate_exception(0x40uLL);
                *(void *)&v174[0] = operator new(0x30uLL);
                *(long long *)((char *)v174 + 8) = xmmword_20E1380;
                strcpy(*(char **)&v174[0], "Skipping over bytes exceeded message length.");
                uint64_t v156 = (void *)sub_2F404((uint64_t)v155, v174);
              }
              return result;
            case 2:
              unsigned int v30 = sub_2F36C8((char **)&v166, *((char **)&v166 + 1));
              *(void *)&long long v166 = v166 + v30;
              if ((unint64_t)v166 > *((void *)&v166 + 1))
              {
                int32x4_t v153 = __cxa_allocate_exception(0x40uLL);
                *(void *)&v174[0] = operator new(0x30uLL);
                *(long long *)((char *)v174 + 8) = xmmword_20E1380;
                strcpy(*(char **)&v174[0], "Skipping over bytes exceeded message length.");
                int32x4_t v154 = (void *)sub_2F404((uint64_t)v153, v174);
              }
              return result;
            case 5:
              *(void *)&long long v166 = v166 + 4;
              if ((unint64_t)v166 > *((void *)&v166 + 1))
              {
                unsigned __int32 v151 = __cxa_allocate_exception(0x40uLL);
                *(void *)&v174[0] = operator new(0x30uLL);
                *(long long *)((char *)v174 + 8) = xmmword_20E1380;
                strcpy(*(char **)&v174[0], "Skipping over bytes exceeded message length.");
                int32x4_t v152 = (void *)sub_2F404((uint64_t)v151, v174);
              }
              return result;
            default:
              v157 = __cxa_allocate_exception(0x40uLL);
              BYTE7(v174[1]) = 18;
              strcpy((char *)v174, "Unknown wire type.");
              uint64_t v158 = (void *)sub_2F404((uint64_t)v157, v174);
          }
          if (!sub_2F333C((uint64_t)&v166)) {
            goto LABEL_41;
          }
        }
        int v31 = *(unsigned __int8 *)v166;
        sub_2F3C98((uint64_t *)&v166, *((uint64_t *)&v166 + 1));
        if (v31)
        {
          if (v14)
          {
            uint64_t v32 = 1;
            a2 = v162;
          }
          else
          {
            *(void *)&v174[0] = v23;
            *((void *)&v174[0] + 1) = v26;
            *(void *)&v174[1] = 0x2C700000000;
            if (sub_2F333C((uint64_t)v174))
            {
              BOOL v34 = 0;
              BOOL v35 = 0;
              a2 = v162;
              do
              {
                if (LODWORD(v174[1]) == 7)
                {
                  BOOL v34 = **(unsigned char **)&v174[0] != 0;
                  sub_2F3C98((uint64_t *)v174, *((uint64_t *)&v174[0] + 1));
                }
                else if (LODWORD(v174[1]) == 6)
                {
                  int64_t v36 = sub_2F3E7C((char **)v174, *((char **)&v174[0] + 1));
                  if (v36 == 0x7FFFFFFFFFFFFFFFLL)
                  {
                    BOOL v35 = 0;
                  }
                  else
                  {
                    if (v36 >= 0) {
                      uint64_t v37 = v36;
                    }
                    else {
                      uint64_t v37 = -v36;
                    }
                    if ((unint64_t)sub_2ABB48(*v160, 22, v37) >> 32) {
                      BOOL v35 = v38 == 0;
                    }
                    else {
                      BOOL v35 = 0;
                    }
                  }
                }
                else
                {
                  sub_2F3548((uint64_t)v174);
                }
              }
              while (sub_2F333C((uint64_t)v174));
            }
            else
            {
              BOOL v35 = 0;
              BOOL v34 = 0;
              a2 = v162;
            }
            uint64_t v32 = v35 && v34;
          }
          ++v17;
          a3 = v160;
          uint64_t v16 = v32 + v159;
        }
        else
        {
LABEL_41:
          if (v14)
          {
            unint64_t v29 = 1;
            a3 = v160;
            a2 = v162;
            uint64_t v16 = v159;
          }
          else
          {
            *(void *)&v174[0] = v23;
            *((void *)&v174[0] + 1) = v26;
            *(void *)&v174[1] = 0x2C700000000;
            if (sub_2F333C((uint64_t)v174))
            {
              a3 = v160;
              while (LODWORD(v174[1]) != 6)
              {
                sub_2F3548((uint64_t)v174);
                if (!sub_2F333C((uint64_t)v174)) {
                  goto LABEL_63;
                }
              }
              int64_t v33 = sub_2F3E7C((char **)v174, *((char **)&v174[0] + 1));
              if (v33 == 0x7FFFFFFFFFFFFFFFLL)
              {
LABEL_63:
                LODWORD(v29) = 0;
                a2 = v162;
                goto LABEL_64;
              }
              if (v33 >= 0) {
                uint64_t v39 = v33;
              }
              else {
                uint64_t v39 = -v33;
              }
              unint64_t v29 = (unint64_t)sub_2ABB48(*v160, 22, v39) >> 32;
              a2 = v162;
              uint64_t v16 = v159;
              if (v29) {
                LODWORD(v29) = v40 == 0;
              }
            }
            else
            {
              LODWORD(v29) = 0;
              a3 = v160;
              a2 = v162;
LABEL_64:
              uint64_t v16 = v159;
            }
            unint64_t v29 = v29;
          }
          ++v18;
          v164 += v29;
        }
      }
    }
    else
    {
      switch(HIDWORD(v173))
      {
        case 0:
          sub_2F3C98((uint64_t *)&v171, (uint64_t)v172);
          break;
        case 1:
          v171 += 8;
          if (v171 > v172)
          {
            uint64_t v105 = __cxa_allocate_exception(0x40uLL);
            *(void *)&v174[0] = operator new(0x30uLL);
            *(long long *)((char *)v174 + 8) = xmmword_20E1380;
            strcpy(*(char **)&v174[0], "Skipping over bytes exceeded message length.");
            uint64_t v106 = (void *)sub_2F404((uint64_t)v105, v174);
          }
          return result;
        case 2:
          unsigned int v20 = sub_2F36C8(&v171, v172);
          v171 += v20;
          if (v171 > v172)
          {
            unint64_t v103 = __cxa_allocate_exception(0x40uLL);
            *(void *)&v174[0] = operator new(0x30uLL);
            *(long long *)((char *)v174 + 8) = xmmword_20E1380;
            strcpy(*(char **)&v174[0], "Skipping over bytes exceeded message length.");
            v104 = (void *)sub_2F404((uint64_t)v103, v174);
          }
          return result;
        case 5:
          v171 += 4;
          if (v171 > v172)
          {
            unint64_t v117 = __cxa_allocate_exception(0x40uLL);
            *(void *)&v174[0] = operator new(0x30uLL);
            *(long long *)((char *)v174 + 8) = xmmword_20E1380;
            strcpy(*(char **)&v174[0], "Skipping over bytes exceeded message length.");
            uint64_t v118 = (void *)sub_2F404((uint64_t)v117, v174);
          }
          return result;
        default:
          uint64_t v107 = __cxa_allocate_exception(0x40uLL);
          BYTE7(v174[1]) = 18;
          strcpy((char *)v174, "Unknown wire type.");
          unsigned int v108 = (void *)sub_2F404((uint64_t)v107, v174);
      }
    }
LABEL_12:
    ;
  }
  while (sub_2F333C((uint64_t)&v171));
  if (v19)
  {
    int v41 = *(_DWORD *)(a6 + 140);
    *(_DWORD *)(a6 + 136) |= 1u;
    *(_DWORD *)(a6 + 140) = v41 & 0xFFFFFFFE | (100 * v165 / v19 >= a4);
  }
  if (v18)
  {
    int v42 = *(_DWORD *)(a6 + 140);
    *(_DWORD *)(a6 + 136) |= 2u;
    *(_DWORD *)(a6 + 140) = v42 & 0xFFFFFFFD | (2 * (100 * v164 / v18 >= a4));
  }
  if (v17)
  {
    int v43 = *(_DWORD *)(a6 + 140);
    *(_DWORD *)(a6 + 136) |= 4u;
    *(_DWORD *)(a6 + 140) = v43 & 0xFFFFFFFB | (4 * (100 * v16 / v17 >= a4));
  }
LABEL_96:
  char v44 = (char *)(*a1 + a1[1]);
  v171 = (char *)*a1;
  unint64_t v172 = v44;
  uint64_t v173 = 0x2C700000000;
  if (sub_2F333C((uint64_t)&v171))
  {
    if (v14)
    {
      unint64_t v45 = 0;
      while (2)
      {
        while (v173 == 4)
        {
          ++v45;
          sub_2F3488(&v171);
          unint64_t v47 = v45;
          if (!sub_2F333C((uint64_t)&v171)) {
            goto LABEL_138;
          }
        }
        switch(HIDWORD(v173))
        {
          case 0:
            sub_2F3C98((uint64_t *)&v171, (uint64_t)v172);
            goto LABEL_100;
          case 1:
            v171 += 8;
            if (v171 > v172) {
              goto LABEL_239;
            }
            goto LABEL_100;
          case 2:
            unsigned int v46 = sub_2F36C8(&v171, v172);
            v171 += v46;
            if (v171 > v172) {
              goto LABEL_238;
            }
            goto LABEL_100;
          case 5:
            v171 += 4;
            if (v171 > v172) {
              goto LABEL_237;
            }
LABEL_100:
            if (sub_2F333C((uint64_t)&v171)) {
              continue;
            }
            unint64_t v47 = v45;
            break;
          default:
            goto LABEL_240;
        }
        break;
      }
    }
    else
    {
      unint64_t v47 = 0;
      unint64_t v45 = 0;
      do
      {
        if (v173 == 4)
        {
          long long __dst = sub_2F3488(&v171);
          v169 = &__dst[v49];
          int64_t v170 = 0x2C700000000;
          unsigned int v50 = sub_30DA40((uint64_t)&__dst);
          if (v50)
          {
            do
            {
              if (v170 == 1)
              {
                uint64_t v52 = sub_30DB8C(&__dst);
                unsigned int v50 = sub_357280(v52, v53, a2);
                goto LABEL_136;
              }
              switch(HIDWORD(v170))
              {
                case 0:
                  sub_2F3C98((uint64_t *)&__dst, (uint64_t)v169);
                  break;
                case 1:
                  __dst += 8;
                  if (__dst > v169)
                  {
                    v147 = __cxa_allocate_exception(0x40uLL);
                    *(void *)&v174[0] = operator new(0x30uLL);
                    *(long long *)((char *)v174 + 8) = xmmword_20E1380;
                    strcpy(*(char **)&v174[0], "Skipping over bytes exceeded message length.");
                    v148 = (void *)sub_2F404((uint64_t)v147, v174);
                  }
                  return result;
                case 2:
                  unsigned int v51 = sub_2F36C8(&__dst, v169);
                  __dst += v51;
                  if (__dst > v169)
                  {
                    int v145 = __cxa_allocate_exception(0x40uLL);
                    *(void *)&v174[0] = operator new(0x30uLL);
                    *(long long *)((char *)v174 + 8) = xmmword_20E1380;
                    strcpy(*(char **)&v174[0], "Skipping over bytes exceeded message length.");
                    int v146 = (void *)sub_2F404((uint64_t)v145, v174);
                  }
                  return result;
                case 5:
                  __dst += 4;
                  if (__dst > v169)
                  {
                    int v143 = __cxa_allocate_exception(0x40uLL);
                    *(void *)&v174[0] = operator new(0x30uLL);
                    *(long long *)((char *)v174 + 8) = xmmword_20E1380;
                    strcpy(*(char **)&v174[0], "Skipping over bytes exceeded message length.");
                    int v144 = (void *)sub_2F404((uint64_t)v143, v174);
                  }
                  return result;
                default:
                  int32x4_t v149 = __cxa_allocate_exception(0x40uLL);
                  BYTE7(v174[1]) = 18;
                  strcpy((char *)v174, "Unknown wire type.");
                  int32x4_t v150 = (void *)sub_2F404((uint64_t)v149, v174);
              }
            }
            while (sub_30DA40((uint64_t)&__dst));
            unsigned int v50 = 0;
          }
LABEL_136:
          ++v45;
          v47 += v50;
        }
        else
        {
          switch(HIDWORD(v173))
          {
            case 0:
              sub_2F3C98((uint64_t *)&v171, (uint64_t)v172);
              break;
            case 1:
              v171 += 8;
              if (v171 > v172)
              {
LABEL_239:
                unint64_t v113 = __cxa_allocate_exception(0x40uLL);
                *(void *)&v174[0] = operator new(0x30uLL);
                *(long long *)((char *)v174 + 8) = xmmword_20E1380;
                strcpy(*(char **)&v174[0], "Skipping over bytes exceeded message length.");
                uint64_t v114 = (void *)sub_2F404((uint64_t)v113, v174);
              }
              return result;
            case 2:
              unsigned int v48 = sub_2F36C8(&v171, v172);
              v171 += v48;
              if (v171 > v172)
              {
LABEL_238:
                uint64_t v111 = __cxa_allocate_exception(0x40uLL);
                *(void *)&v174[0] = operator new(0x30uLL);
                *(long long *)((char *)v174 + 8) = xmmword_20E1380;
                strcpy(*(char **)&v174[0], "Skipping over bytes exceeded message length.");
                unint64_t v112 = (void *)sub_2F404((uint64_t)v111, v174);
              }
              return result;
            case 5:
              v171 += 4;
              if (v171 > v172)
              {
LABEL_237:
                unsigned int v109 = __cxa_allocate_exception(0x40uLL);
                *(void *)&v174[0] = operator new(0x30uLL);
                *(long long *)((char *)v174 + 8) = xmmword_20E1380;
                strcpy(*(char **)&v174[0], "Skipping over bytes exceeded message length.");
                uint64_t v110 = (void *)sub_2F404((uint64_t)v109, v174);
              }
              return result;
            default:
LABEL_240:
              uint64_t v115 = __cxa_allocate_exception(0x40uLL);
              BYTE7(v174[1]) = 18;
              strcpy((char *)v174, "Unknown wire type.");
              uint64_t v116 = (void *)sub_2F404((uint64_t)v115, v174);
          }
        }
      }
      while (sub_2F333C((uint64_t)&v171));
    }
LABEL_138:
    if (v45)
    {
      int v54 = *(_DWORD *)(a6 + 140);
      *(_DWORD *)(a6 + 136) |= 0x10u;
      *(_DWORD *)(a6 + 140) = v54 & 0xFFFFFFEF | (16 * (100 * v47 / v45 >= a4));
    }
  }
  long long v55 = (char *)(*a1 + a1[1]);
  long long __dst = (char *)*a1;
  v169 = v55;
  int64_t v170 = 0x2C700000000;
  if (!sub_2F333C((uint64_t)&__dst)) {
    goto LABEL_173;
  }
  unint64_t v56 = 0;
  uint64_t v57 = 0;
  while (2)
  {
    if (v170 == 6)
    {
      *(void *)&v174[0] = sub_2F3488(&__dst);
      *((void *)&v174[0] + 1) = *(void *)&v174[0] + v60;
      *(void *)&v174[1] = 0x2C700000000;
      if (v14)
      {
LABEL_164:
        uint64_t v62 = 1;
LABEL_170:
        ++v56;
        v57 += v62;
        goto LABEL_143;
      }
      if (sub_30DA40((uint64_t)v174))
      {
        while (LODWORD(v174[1]) != 3)
        {
          sub_30DC4C((uint64_t)v174);
          if (!sub_30DA40((uint64_t)v174)) {
            goto LABEL_168;
          }
        }
        goto LABEL_169;
      }
LABEL_168:
      uint64_t v62 = 0;
      goto LABEL_170;
    }
    if (v170 != 2)
    {
      sub_2F3548((uint64_t)&__dst);
      goto LABEL_143;
    }
    v171 = sub_2F3488(&__dst);
    unint64_t v172 = &v171[v58];
    uint64_t v173 = 0x2C700000000;
    if (sub_30DA40((uint64_t)&v171))
    {
      while (v173 != 7)
      {
        switch(HIDWORD(v173))
        {
          case 0:
            sub_2F3C98((uint64_t *)&v171, (uint64_t)v172);
            break;
          case 1:
            v171 += 8;
            if (v171 > v172)
            {
              uint64_t v99 = __cxa_allocate_exception(0x40uLL);
              *(void *)&v174[0] = operator new(0x30uLL);
              *(long long *)((char *)v174 + 8) = xmmword_20E1380;
              strcpy(*(char **)&v174[0], "Skipping over bytes exceeded message length.");
              unint64_t v100 = (void *)sub_2F404((uint64_t)v99, v174);
            }
            return result;
          case 2:
            unsigned int v59 = sub_2F36C8(&v171, v172);
            v171 += v59;
            if (v171 > v172)
            {
              uint64_t v95 = __cxa_allocate_exception(0x40uLL);
              *(void *)&v174[0] = operator new(0x30uLL);
              *(long long *)((char *)v174 + 8) = xmmword_20E1380;
              strcpy(*(char **)&v174[0], "Skipping over bytes exceeded message length.");
              uint64_t v96 = (void *)sub_2F404((uint64_t)v95, v174);
            }
            return result;
          case 5:
            v171 += 4;
            if (v171 > v172)
            {
              unint64_t v97 = __cxa_allocate_exception(0x40uLL);
              *(void *)&v174[0] = operator new(0x30uLL);
              *(long long *)((char *)v174 + 8) = xmmword_20E1380;
              strcpy(*(char **)&v174[0], "Skipping over bytes exceeded message length.");
              unsigned int v98 = (void *)sub_2F404((uint64_t)v97, v174);
            }
            return result;
          default:
            uint64_t v101 = __cxa_allocate_exception(0x40uLL);
            BYTE7(v174[1]) = 18;
            strcpy((char *)v174, "Unknown wire type.");
            unint64_t v102 = (void *)sub_2F404((uint64_t)v101, v174);
        }
        if (!sub_30DA40((uint64_t)&v171)) {
          goto LABEL_143;
        }
      }
      *(void *)&v174[0] = sub_30DB8C(&v171);
      *((void *)&v174[0] + 1) = *(void *)&v174[0] + v61;
      *(void *)&v174[1] = 0x2C700000000;
      if (v14) {
        goto LABEL_164;
      }
      if (sub_30DA40((uint64_t)v174))
      {
        while (LODWORD(v174[1]) != 3)
        {
          sub_30DC4C((uint64_t)v174);
          if (!sub_30DA40((uint64_t)v174)) {
            goto LABEL_168;
          }
        }
LABEL_169:
        uint64_t v63 = sub_30DB8C((char **)v174);
        uint64_t v62 = sub_357280(v63, v64, a2);
        goto LABEL_170;
      }
      goto LABEL_168;
    }
LABEL_143:
    if (sub_2F333C((uint64_t)&__dst)) {
      continue;
    }
    break;
  }
  if (v56)
  {
    int v65 = *(_DWORD *)(a6 + 140);
    *(_DWORD *)(a6 + 136) |= 0x20u;
    *(_DWORD *)(a6 + 140) = v65 & 0xFFFFFFDF | (32 * (100 * v57 / v56 >= a4));
  }
LABEL_173:
  int v66 = (char *)(*a1 + a1[1]);
  v171 = (char *)*a1;
  unint64_t v172 = v66;
  uint64_t v173 = 0x2C700000000;
  BOOL result = sub_2F333C((uint64_t)&v171);
  if (result)
  {
    uint64_t v68 = 0;
    unint64_t v69 = 0;
    do
    {
      if (v173 == 3)
      {
        long long __dst = sub_2F3488(&v171);
        v169 = &__dst[v71];
        int64_t v170 = 0x2C700000000;
        if (sub_30DA40((uint64_t)&__dst))
        {
          while (v170 != 1)
          {
            switch(HIDWORD(v170))
            {
              case 0:
                sub_2F3C98((uint64_t *)&__dst, (uint64_t)v169);
                break;
              case 1:
                __dst += 8;
                if (__dst > v169)
                {
                  v139 = __cxa_allocate_exception(0x40uLL);
                  *(void *)&v174[0] = operator new(0x30uLL);
                  *(long long *)((char *)v174 + 8) = xmmword_20E1380;
                  strcpy(*(char **)&v174[0], "Skipping over bytes exceeded message length.");
                  int v140 = (void *)sub_2F404((uint64_t)v139, v174);
                }
                return result;
              case 2:
                unsigned int v72 = sub_2F36C8(&__dst, v169);
                __dst += v72;
                if (__dst > v169)
                {
                  v137 = __cxa_allocate_exception(0x40uLL);
                  *(void *)&v174[0] = operator new(0x30uLL);
                  *(long long *)((char *)v174 + 8) = xmmword_20E1380;
                  strcpy(*(char **)&v174[0], "Skipping over bytes exceeded message length.");
                  v138 = (void *)sub_2F404((uint64_t)v137, v174);
                }
                return result;
              case 5:
                __dst += 4;
                if (__dst > v169)
                {
                  unint64_t v129 = __cxa_allocate_exception(0x40uLL);
                  *(void *)&v174[0] = operator new(0x30uLL);
                  *(long long *)((char *)v174 + 8) = xmmword_20E1380;
                  strcpy(*(char **)&v174[0], "Skipping over bytes exceeded message length.");
                  long long v130 = (void *)sub_2F404((uint64_t)v129, v174);
                }
                return result;
              default:
                v141 = __cxa_allocate_exception(0x40uLL);
                BYTE7(v174[1]) = 18;
                strcpy((char *)v174, "Unknown wire type.");
                int v142 = (void *)sub_2F404((uint64_t)v141, v174);
            }
            if (!sub_30DA40((uint64_t)&__dst)) {
              goto LABEL_176;
            }
          }
          if (v14)
          {
            uint64_t v73 = 1;
          }
          else
          {
            unint64_t v74 = sub_30DB8C(&__dst);
            uint64_t v73 = sub_357280(v74, v75, a2);
          }
          ++v69;
          v68 += v73;
        }
      }
      else
      {
        switch(HIDWORD(v173))
        {
          case 0:
            sub_2F3C98((uint64_t *)&v171, (uint64_t)v172);
            break;
          case 1:
            v171 += 8;
            if (v171 > v172)
            {
              int v121 = __cxa_allocate_exception(0x40uLL);
              *(void *)&v174[0] = operator new(0x30uLL);
              *(long long *)((char *)v174 + 8) = xmmword_20E1380;
              strcpy(*(char **)&v174[0], "Skipping over bytes exceeded message length.");
              uint64_t v122 = (void *)sub_2F404((uint64_t)v121, v174);
            }
            return result;
          case 2:
            unsigned int v70 = sub_2F36C8(&v171, v172);
            v171 += v70;
            if (v171 > v172)
            {
              unsigned int v119 = __cxa_allocate_exception(0x40uLL);
              *(void *)&v174[0] = operator new(0x30uLL);
              *(long long *)((char *)v174 + 8) = xmmword_20E1380;
              strcpy(*(char **)&v174[0], "Skipping over bytes exceeded message length.");
              unsigned int v120 = (void *)sub_2F404((uint64_t)v119, v174);
            }
            return result;
          case 5:
            v171 += 4;
            if (v171 > v172)
            {
              unsigned int v125 = __cxa_allocate_exception(0x40uLL);
              *(void *)&v174[0] = operator new(0x30uLL);
              *(long long *)((char *)v174 + 8) = xmmword_20E1380;
              strcpy(*(char **)&v174[0], "Skipping over bytes exceeded message length.");
              uint64_t v126 = (void *)sub_2F404((uint64_t)v125, v174);
            }
            return result;
          default:
            uint64_t v123 = __cxa_allocate_exception(0x40uLL);
            BYTE7(v174[1]) = 18;
            strcpy((char *)v174, "Unknown wire type.");
            unint64_t v124 = (void *)sub_2F404((uint64_t)v123, v174);
        }
      }
LABEL_176:
      BOOL result = sub_2F333C((uint64_t)&v171);
    }
    while (result);
    if (v69)
    {
      int v76 = *(_DWORD *)(a6 + 140);
      *(_DWORD *)(a6 + 136) |= 8u;
      *(_DWORD *)(a6 + 140) = v76 & 0xFFFFFFF7 | (8 * (100 * v68 / v69 >= a4));
    }
  }
  return result;
}

void sub_35709C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_357280(char *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v20 = a1;
  uint64_t v21 = &a1[a2];
  uint64_t v22 = 0x2C700000000;
  char v4 = 1;
  while (sub_2F333C((uint64_t)&v20))
  {
    if (v22 == 2)
    {
      int64_t v6 = sub_2F3E7C(&v20, v21);
      if (v6 >= 0) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = -v6;
      }
      unint64_t v8 = sub_2FD4C0(a3, v7);
      BOOL v10 = v8 < 0xFFFFFFFF00000000 && v8 != 0;
      v4 &= v10;
    }
    else
    {
      switch(HIDWORD(v22))
      {
        case 0:
          sub_2F3C98((uint64_t *)&v20, (uint64_t)v21);
          break;
        case 1:
          v20 += 8;
          if (v20 > v21)
          {
            exception = __cxa_allocate_exception(0x40uLL);
            *(void *)&v23[0] = operator new(0x30uLL);
            *(long long *)((char *)v23 + 8) = xmmword_20E1380;
            strcpy(*(char **)&v23[0], "Skipping over bytes exceeded message length.");
            unint64_t v17 = (void *)sub_2F404((uint64_t)exception, v23);
          }
          return result;
        case 2:
          unsigned int v5 = sub_2F36C8(&v20, v21);
          v20 += v5;
          if (v20 > v21)
          {
            BOOL v14 = __cxa_allocate_exception(0x40uLL);
            *(void *)&v23[0] = operator new(0x30uLL);
            *(long long *)((char *)v23 + 8) = xmmword_20E1380;
            strcpy(*(char **)&v23[0], "Skipping over bytes exceeded message length.");
            uint64_t v15 = (void *)sub_2F404((uint64_t)v14, v23);
          }
          return result;
        case 5:
          v20 += 4;
          if (v20 > v21)
          {
            uint64_t v12 = __cxa_allocate_exception(0x40uLL);
            *(void *)&v23[0] = operator new(0x30uLL);
            *(long long *)((char *)v23 + 8) = xmmword_20E1380;
            strcpy(*(char **)&v23[0], "Skipping over bytes exceeded message length.");
            uint64_t v13 = (void *)sub_2F404((uint64_t)v12, v23);
          }
          return result;
        default:
          unint64_t v18 = __cxa_allocate_exception(0x40uLL);
          BYTE7(v23[1]) = 18;
          strcpy((char *)v23, "Unknown wire type.");
          unint64_t v19 = (void *)sub_2F404((uint64_t)v18, v23);
      }
    }
  }
  return v4 & 1;
}

void sub_35754C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_3575A8()
{
  unk_255743F = 16641;
  word_2557428 = 65;
  byte_2557457 = 1;
  byte_2557441 = 0;
}

BOOL sub_3575D0(unsigned int *a1, uint64_t a2)
{
  return ((4 * a1[1]) | ((unint64_t)*a1 << 32) | ((unint64_t)a1[1] >> 31) | ((unint64_t)a1[1] >> 29) & 2) == ((*(void *)a2 >> 30) & 0xFFFFFFFCLL | (*(void *)a2 << 32) | (*(void *)a2 >> 63) | (*(void *)a2 >> 61) & 2)
      && a1[4] == *(_DWORD *)(a2 + 16)
      && ((4 * a1[3]) | ((unint64_t)a1[2] << 32) | ((unint64_t)a1[3] >> 31) | ((unint64_t)a1[3] >> 29) & 2) == ((*(void *)(a2 + 8) >> 30) & 0xFFFFFFFCLL | (*(void *)(a2 + 8) << 32) | (*(void *)(a2 + 8) >> 63) | (*(void *)(a2 + 8) >> 61) & 2)
      && *((void *)a1 + 3) == *(void *)(a2 + 24)
      && *((void *)a1 + 4) == *(void *)(a2 + 32);
}

BOOL sub_357694(unsigned int *a1, uint64_t a2)
{
  unint64_t v2 = (*(void *)a2 >> 30) & 0xFFFFFFFCLL | (*(void *)a2 << 32) | (*(void *)a2 >> 63) | (*(void *)a2 >> 61) & 2;
  if (((4 * a1[1]) | ((unint64_t)*a1 << 32) | ((unint64_t)a1[1] >> 31) | ((unint64_t)a1[1] >> 29) & 2) < v2) {
    return 1;
  }
  if (v2 < ((*(void *)a1 >> 30) & 0xFFFFFFFCLL | (*(void *)a1 << 32) | (*(void *)a1 >> 63) | (*(void *)a1 >> 61) & 2uLL)) {
    return 0;
  }
  unsigned int v6 = *(_DWORD *)(a2 + 16);
  unsigned int v7 = a1[4];
  if (v7 < v6) {
    return 1;
  }
  if (v6 < v7) {
    return 0;
  }
  uint64_t v8 = a1[2];
  size_t v9 = (unsigned int *)(a2 + 8);
  int v10 = *(_DWORD *)(a2 + 8);
  if (v8)
  {
    if (!v10) {
      return 0;
    }
  }
  else if (v10)
  {
    return 1;
  }
  if (((4 * a1[3]) | (unint64_t)(v8 << 32) | ((unint64_t)a1[3] >> 31) | ((unint64_t)a1[3] >> 29) & 2) < ((*(void *)v9 >> 30) & 0xFFFFFFFCLL | (*(void *)v9 << 32) | (*(void *)v9 >> 63) | (*(void *)v9 >> 61) & 2uLL)) {
    return 1;
  }
  if (sub_3578A4(v9, *((void *)a1 + 1))) {
    return 0;
  }
  uint64_t v11 = *((void *)a1 + 3);
  uint64_t v12 = *(void *)(a2 + 24);
  if (v11 < v12) {
    return 1;
  }
  if (v12 < v11) {
    return 0;
  }
  uint64_t v13 = *((void *)a1 + 4);
  uint64_t v14 = *(void *)(a2 + 32);
  if (v13 < v14) {
    return 1;
  }
  if (v14 >= v13) {
    return *((double *)a1 + 5) < *(double *)(a2 + 40);
  }
  return 0;
}

BOOL sub_3578A4(unsigned int *a1, unint64_t a2)
{
  return ((4 * a1[1]) | ((unint64_t)*a1 << 32) | ((unint64_t)a1[1] >> 31) | ((unint64_t)a1[1] >> 29) & 2) < ((a2 >> 30) & 0xFFFFFFFC | (a2 << 32) | (a2 >> 63) | (a2 >> 61) & 2);
}

uint64_t sub_3578E8(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  *(void *)uint64_t result = a2;
  *(_DWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 12) = a4;
  *(void *)(result + 16) = a5;
  *(void *)(result + 24) = a6;
  return result;
}

BOOL sub_3578F8(uint64_t a1, uint64_t a2)
{
  return *(void *)a1 == *(void *)a2
      && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
      && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
      && *(void *)(a1 + 16) == *(void *)(a2 + 16)
      && *(void *)(a1 + 24) == *(void *)(a2 + 24);
}

BOOL sub_357954(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 < *(void *)a2) {
    return 1;
  }
  if (*(void *)a2 < *(void *)a1) {
    return 0;
  }
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  unsigned int v4 = *(_DWORD *)(a1 + 8);
  if (v4 < v3) {
    return 1;
  }
  if (v3 < v4) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a2 + 16);
  if (v5 < v6) {
    return 1;
  }
  if (v6 >= v5) {
    return *(void *)(a1 + 24) < *(void *)(a2 + 24);
  }
  return 0;
}

uint64_t sub_3579E0(uint64_t result, uint64_t a2, int a3, int a4)
{
  *(void *)uint64_t result = a2;
  *(_DWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 12) = a4;
  return result;
}

BOOL sub_3579EC(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 < *(void *)a2) {
    return 1;
  }
  if (*(void *)a2 >= *(void *)a1) {
    return *(_DWORD *)(a1 + 8) < *(_DWORD *)(a2 + 8);
  }
  return 0;
}

BOOL sub_357A28(uint64_t a1, uint64_t a2)
{
  return *(void *)a1 == *(void *)a2 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
}

uint64_t sub_357A54(uint64_t result, int a2, double a3)
{
  *(_DWORD *)uint64_t result = a2;
  *(double *)(result + 8) = a3;
  return result;
}

double sub_357A60(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = -1;
  *(_DWORD *)(a1 + 64) = 0;
  return result;
}

char *sub_357A84@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  long long v20 = 0uLL;
  unint64_t v19 = 0;
  if (v4 == v3)
  {
    uint64_t v11 = 0;
    long long v9 = 0uLL;
  }
  else
  {
    if ((0x8E38E38E38E38E39 * ((v4 - v3) >> 3)) >> 61) {
      sub_2E00();
    }
    uint64_t v5 = result;
    uint64_t v6 = operator new(0x71C71C71C71C71C8 * ((v4 - v3) >> 3));
    unint64_t v19 = v6;
    *(void *)&long long v20 = v6;
    *((void *)&v20 + 1) = &v6[0xE38E38E38E38E39 * ((v4 - v3) >> 3)];
    do
    {
      *(void *)&long long v17 = *(void *)(v3 + 8);
      double result = sub_35A1C8((unint64_t *)&v19, v6, &v17);
      uint64_t v6 = result + 8;
      v3 += 72;
    }
    while (v3 != v4);
    uint64_t v8 = *(void *)v5;
    uint64_t v7 = *((void *)v5 + 1);
    unint64_t v18 = 0;
    long long v9 = 0uLL;
    long long v17 = 0u;
    if (v7 == v8)
    {
      uint64_t v11 = 0;
    }
    else
    {
      if ((0x8E38E38E38E38E39 * ((v7 - v8) >> 3)) >> 61) {
        sub_2E00();
      }
      int v10 = operator new(0x71C71C71C71C71C8 * ((v7 - v8) >> 3));
      *(void *)&long long v17 = v10;
      *((void *)&v17 + 1) = v10;
      unint64_t v18 = &v10[0xE38E38E38E38E39 * ((v7 - v8) >> 3)];
      do
      {
        uint64_t v21 = *(void *)(v8 + 16);
        double result = sub_35A1C8((unint64_t *)&v17, v10, &v21);
        int v10 = result + 8;
        v8 += 72;
      }
      while (v8 != v7);
      long long v9 = v17;
      uint64_t v11 = v18;
    }
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  unint64_t v12 = (unint64_t)v19;
  *(void *)(a2 + 16) = v19;
  uint64_t v13 = v20;
  *(_OWORD *)(a2 + 24) = v20;
  unint64_t v19 = 0;
  long long v20 = 0uLL;
  *(_OWORD *)(a2 + 40) = v9;
  *(void *)(a2 + 56) = v11;
  unint64_t v18 = 0;
  long long v17 = 0uLL;
  if (v12 != v13)
  {
    uint64_t v14 = (uint64_t)(v13 - v12) >> 3;
    uint64_t v15 = v14 - 1;
    if (v14 == 1)
    {
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v16 = 0;
      while (*(void *)(v12 + 8 * v16) == *(void *)(v9 + 8 * v16))
      {
        *(void *)(a2 + 8) = ++v16;
        if (v15 == v16)
        {
          uint64_t v16 = v15;
          break;
        }
      }
    }
    *(void *)a2 = *(void *)(v12 + 8 * v16);
  }
  return result;
}

void sub_357C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

char *sub_357C9C@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  long long v19 = 0uLL;
  unint64_t v18 = 0;
  uint64_t v5 = v4 - v3;
  if (v4 == v3)
  {
    long long v11 = 0uLL;
  }
  else
  {
    unint64_t v6 = 0x8E38E38E38E38E39 * (v5 >> 3);
    if (v6 >> 61) {
      sub_2E00();
    }
    uint64_t v7 = result;
    uint64_t v8 = operator new(0x71C71C71C71C71C8 * (v5 >> 3));
    unint64_t v18 = v8;
    *(void *)&long long v19 = v8;
    *((void *)&v19 + 1) = &v8[v6];
    do
    {
      *(void *)long long v17 = *(void *)(v3 + 8);
      double result = sub_35A1C8((unint64_t *)&v18, v8, v17);
      uint64_t v8 = result + 8;
      v3 += 72;
    }
    while (v3 != v4);
    uint64_t v10 = *(void *)v7;
    uint64_t v9 = *((void *)v7 + 1);
    long long v11 = 0uLL;
    memset(v17, 0, sizeof(v17));
    uint64_t v5 = v9 - v10;
    if (v9 != v10)
    {
      unint64_t v12 = 0x8E38E38E38E38E39 * (v5 >> 3);
      if (v12 >> 61) {
        sub_2E00();
      }
      uint64_t v13 = operator new(0x71C71C71C71C71C8 * (v5 >> 3));
      *(void *)long long v17 = v13;
      *(void *)&v17[8] = v13;
      *(void *)&v17[16] = &v13[v12];
      do
      {
        uint64_t v20 = *(void *)(v10 + 16);
        double result = sub_35A1C8((unint64_t *)v17, v13, &v20);
        uint64_t v13 = result + 8;
        v10 += 72;
      }
      while (v10 != v9);
      uint64_t v5 = *(void *)v17;
      long long v11 = *(_OWORD *)&v17[8];
    }
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  unint64_t v14 = (unint64_t)v18;
  *(void *)(a2 + 16) = v18;
  uint64_t v15 = v19;
  *(_OWORD *)(a2 + 24) = v19;
  unint64_t v18 = 0;
  long long v19 = 0uLL;
  *(void *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 48) = v11;
  memset(v17, 0, sizeof(v17));
  if (v14 != v15)
  {
    uint64_t v16 = (((uint64_t)v11 - v5) >> 3) - 1;
    *(void *)a2 = *(void *)(v5 + 8 * v16);
    *(void *)(a2 + 8) = v16;
  }
  return result;
}

void sub_357E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_357E70(uint64_t a1)
{
  return *(_DWORD *)a1 != 0x7FFFFFFF && *(void *)(a1 + 40) != *(void *)(a1 + 48);
}

BOOL sub_357E98(uint64_t a1, uint64_t a2)
{
  v6[0] = a1;
  v6[1] = a1 + 24;
  v6[2] = a1 + 28;
  v6[3] = a1 + 40;
  v6[4] = a1 + 64;
  v6[5] = a1 + 88;
  v6[6] = a1 + 96;
  v6[7] = a1 + 120;
  v6[8] = a1 + 144;
  v6[9] = a1 + 148;
  v6[10] = a1 + 152;
  v6[11] = a1 + 156;
  v6[12] = a1 + 157;
  v6[13] = a1 + 158;
  v6[14] = a1 + 159;
  _OWORD v6[15] = a1 + 160;
  v6[16] = a1 + 168;
  v6[17] = a1 + 192;
  uint64_t v7 = (unsigned __int8 *)(a1 + 216);
  uint64_t v8 = (_DWORD *)(a1 + 220);
  v3[0] = a2;
  v3[1] = a2 + 24;
  v3[2] = a2 + 28;
  v3[3] = a2 + 40;
  v3[4] = a2 + 64;
  v3[5] = a2 + 88;
  v3[6] = a2 + 96;
  v3[7] = a2 + 120;
  v3[8] = a2 + 144;
  v3[9] = a2 + 148;
  v3[10] = a2 + 152;
  v3[11] = a2 + 156;
  v3[12] = a2 + 157;
  v3[13] = a2 + 158;
  v3[14] = a2 + 159;
  v3[15] = a2 + 160;
  v3[16] = a2 + 168;
  v3[17] = a2 + 192;
  uint64_t v4 = (unsigned __int8 *)(a2 + 216);
  uint64_t v5 = (_DWORD *)(a2 + 220);
  return (sub_35921C((uint64_t)&v9, (uint64_t)v6, (uint64_t)v3) & 1) != 0 && *v7 == *v4 && *v8 == *v5;
}

uint64_t sub_358008(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a1 + 63);
  if (v4 >= 0) {
    size_t v5 = *(unsigned __int8 *)(a1 + 63);
  }
  else {
    size_t v5 = *(void *)(a1 + 48);
  }
  if (!v5) {
    goto LABEL_29;
  }
  int v6 = *(char *)(a2 + 63);
  size_t v7 = v6 >= 0 ? *(unsigned __int8 *)(a2 + 63) : *(void *)(a2 + 48);
  if (!v7) {
    goto LABEL_29;
  }
  uint64_t v8 = (const void **)(a1 + 40);
  if (v6 >= 0) {
    char v9 = (unsigned __int8 *)(a2 + 40);
  }
  else {
    char v9 = *(unsigned __int8 **)(a2 + 40);
  }
  if (v5 != v7)
  {
LABEL_20:
    if (v4 >= 0) {
      uint64_t v13 = (const void *)(a1 + 40);
    }
    else {
      uint64_t v13 = *v8;
    }
    if (v7 >= v5) {
      size_t v14 = v5;
    }
    else {
      size_t v14 = v7;
    }
    int v15 = memcmp(v13, v9, v14);
    if (v15) {
      return v15 < 0;
    }
    else {
      return v5 < v7;
    }
  }
  if ((*(unsigned char *)(a1 + 63) & 0x80) != 0)
  {
    if (!memcmp(*v8, v9, *(void *)(a1 + 48))) {
      goto LABEL_29;
    }
    goto LABEL_20;
  }
  if (*(unsigned char *)(a1 + 63))
  {
    uint64_t v10 = v9;
    long long v11 = (unsigned __int8 *)(a1 + 40);
    uint64_t v12 = *(unsigned __int8 *)(a1 + 63);
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v12) {
        goto LABEL_29;
      }
    }
    goto LABEL_20;
  }
LABEL_29:
  long long v17 = *(unsigned int ***)a1;
  unint64_t v18 = *(unsigned int ***)(a1 + 8);
  long long v19 = *(unsigned int ***)(a2 + 8);
  if ((char *)v18 - *(void *)a1 != (char *)v19 - *(void *)a2) {
    return sub_35A538(v17, v18, *(unsigned int ***)a2, v19);
  }
  if (v17 != v18)
  {
    uint64_t v20 = *(unsigned int ***)a2;
    uint64_t v21 = *(unsigned int ***)a1;
    do
    {
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      uint64_t v24 = *v20;
      if ((char *)v22 - (char *)*v21 != (char *)v20[1] - (char *)*v20) {
        return sub_35A538(v17, v18, *(unsigned int ***)a2, v19);
      }
      if (v23 != v22)
      {
        while (__PAIR64__(*((unsigned __int16 *)v23 + 2), *v23) == __PAIR64__((unsigned __int16)WORD2(*(void *)v24), *(void *)v24)&& (HIWORD(*(void *)v24) & 1) != (*((unsigned char *)v23 + 6) == 0))
        {
          v24 += 2;
          v23 += 2;
          if (v23 == v22) {
            goto LABEL_37;
          }
        }
        return sub_35A538(v17, v18, *(unsigned int ***)a2, v19);
      }
LABEL_37:
      v21 += 3;
      v20 += 3;
    }
    while (v21 != v18);
  }
  int v25 = *(_DWORD *)(a2 + 88);
  if (*(_DWORD *)(a1 + 88) != v25) {
    return *(_DWORD *)(a1 + 88) < v25;
  }
  int v26 = *(_DWORD *)(a1 + 144);
  int v27 = *(_DWORD *)(a2 + 144);
  BOOL v28 = v26 < v27;
  if (v26 == v27)
  {
    int v29 = *(_DWORD *)(a1 + 148);
    int v30 = *(_DWORD *)(a2 + 148);
    BOOL v28 = v29 < v30;
    if (v29 == v30) {
      return *(_DWORD *)(a1 + 152) < *(_DWORD *)(a2 + 152);
    }
  }
  return v28;
}

char *sub_358214@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void **)result;
  char v4 = (void *)*((void *)result + 1);
  long long v20 = 0uLL;
  long long v19 = 0;
  if (v4 == v3)
  {
    long long v11 = 0;
    long long v9 = 0uLL;
  }
  else
  {
    if ((0xAAAAAAAAAAAAAAABLL * (v4 - v3)) >> 61) {
      sub_2E00();
    }
    size_t v5 = result;
    int v6 = operator new(0x5555555555555558 * (v4 - v3));
    long long v19 = v6;
    *(void *)&long long v20 = v6;
    *((void *)&v20 + 1) = &v6[0xAAAAAAAAAAAAAABLL * (v4 - v3)];
    do
    {
      *(void *)&long long v17 = *v3;
      double result = sub_35A1C8((unint64_t *)&v19, v6, &v17);
      int v6 = result + 8;
      v3 += 3;
    }
    while (v3 != v4);
    uint64_t v8 = *(void *)v5;
    uint64_t v7 = *((void *)v5 + 1);
    unint64_t v18 = 0;
    long long v9 = 0uLL;
    long long v17 = 0u;
    if (v7 == v8)
    {
      long long v11 = 0;
    }
    else
    {
      if ((0xAAAAAAAAAAAAAAABLL * ((v7 - v8) >> 3)) >> 61) {
        sub_2E00();
      }
      uint64_t v10 = operator new(0x5555555555555558 * ((v7 - v8) >> 3));
      *(void *)&long long v17 = v10;
      *((void *)&v17 + 1) = v10;
      unint64_t v18 = &v10[0xAAAAAAAAAAAAAABLL * ((v7 - v8) >> 3)];
      do
      {
        uint64_t v21 = *(void *)(v8 + 8);
        double result = sub_35A1C8((unint64_t *)&v17, v10, &v21);
        uint64_t v10 = result + 8;
        v8 += 24;
      }
      while (v8 != v7);
      long long v9 = v17;
      long long v11 = v18;
    }
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  unint64_t v12 = (unint64_t)v19;
  *(void *)(a2 + 16) = v19;
  uint64_t v13 = v20;
  *(_OWORD *)(a2 + 24) = v20;
  long long v19 = 0;
  long long v20 = 0uLL;
  *(_OWORD *)(a2 + 40) = v9;
  *(void *)(a2 + 56) = v11;
  unint64_t v18 = 0;
  long long v17 = 0uLL;
  if (v12 != v13)
  {
    uint64_t v14 = (uint64_t)(v13 - v12) >> 3;
    uint64_t v15 = v14 - 1;
    if (v14 == 1)
    {
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v16 = 0;
      while (*(void *)(v12 + 8 * v16) == *(void *)(v9 + 8 * v16))
      {
        *(void *)(a2 + 8) = ++v16;
        if (v15 == v16)
        {
          uint64_t v16 = v15;
          break;
        }
      }
    }
    *(void *)a2 = *(void *)(v12 + 8 * v16);
  }
  return result;
}

void sub_3583E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

char *sub_35841C@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(char **)result;
  char v4 = (char *)*((void *)result + 1);
  long long v19 = 0uLL;
  unint64_t v18 = 0;
  uint64_t v5 = v4 - v3;
  if (v4 == v3)
  {
    long long v11 = 0uLL;
  }
  else
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    if (v6 >> 61) {
      sub_2E00();
    }
    uint64_t v7 = result;
    uint64_t v8 = operator new(0x5555555555555558 * (v5 >> 3));
    unint64_t v18 = v8;
    *(void *)&long long v19 = v8;
    *((void *)&v19 + 1) = &v8[v6];
    do
    {
      *(void *)long long v17 = *(void *)v3;
      double result = sub_35A1C8((unint64_t *)&v18, v8, v17);
      uint64_t v8 = result + 8;
      v3 += 24;
    }
    while (v3 != v4);
    uint64_t v10 = *(void *)v7;
    uint64_t v9 = *((void *)v7 + 1);
    long long v11 = 0uLL;
    memset(v17, 0, sizeof(v17));
    uint64_t v5 = v9 - v10;
    if (v9 != v10)
    {
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
      if (v12 >> 61) {
        sub_2E00();
      }
      uint64_t v13 = operator new(0x5555555555555558 * (v5 >> 3));
      *(void *)long long v17 = v13;
      *(void *)&v17[8] = v13;
      *(void *)&v17[16] = &v13[v12];
      do
      {
        uint64_t v20 = *(void *)(v10 + 8);
        double result = sub_35A1C8((unint64_t *)v17, v13, &v20);
        uint64_t v13 = result + 8;
        v10 += 24;
      }
      while (v10 != v9);
      uint64_t v5 = *(void *)v17;
      long long v11 = *(_OWORD *)&v17[8];
    }
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  unint64_t v14 = (unint64_t)v18;
  *(void *)(a2 + 16) = v18;
  uint64_t v15 = v19;
  *(_OWORD *)(a2 + 24) = v19;
  unint64_t v18 = 0;
  long long v19 = 0uLL;
  *(void *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 48) = v11;
  memset(v17, 0, sizeof(v17));
  if (v14 != v15)
  {
    uint64_t v16 = (((uint64_t)v11 - v5) >> 3) - 1;
    *(void *)a2 = *(void *)(v5 + 8 * v16);
    *(void *)(a2 + 8) = v16;
  }
  return result;
}

void sub_3585A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_3585E0(char *a1@<X0>, uint64_t a2@<X8>)
{
  sub_358214(a1, (uint64_t)&v9);
  sub_35841C(a1, (uint64_t)&v4);
  sub_2FCB1C(a2, &v9);
  sub_2FCB1C(a2 + 64, &v4);
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  if (v5)
  {
    unint64_t v6 = v5;
    operator delete(v5);
  }
  if (v12)
  {
    uint64_t v13 = v12;
    operator delete(v12);
  }
  if (v10)
  {
    long long v11 = v10;
    operator delete(v10);
  }
}

void sub_358678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2FC938((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_358690(uint64_t a1, char a2)
{
  return (*(_DWORD *)(a1 + 24) >> a2) & 1;
}

uint64_t sub_3586A0(uint64_t a1)
{
  return *(_DWORD *)(a1 + 24) & 1;
}

BOOL sub_3586AC(uint64_t a1, char a2)
{
  return *(unsigned char *)(a1 + 272) && ((*(_DWORD *)(a1 + 24) >> a2) & 1) != 0 && (*(_DWORD *)(a1 + 88) & 0xFFFFFFFB) == 2;
}

BOOL sub_3586DC(uint64_t a1)
{
  return (*(unsigned char *)(a1 + 24) & 8) != 0 && (*(_DWORD *)(a1 + 88) & 0xFFFFFFFB) == 2 && *(unsigned char *)(a1 + 272) == 0;
}

BOOL sub_35870C(uint64_t a1)
{
  return (*(unsigned char *)(a1 + 24) & 1) != 0 && (*(_DWORD *)(a1 + 88) & 0xFFFFFFFB) == 2 && *(unsigned char *)(a1 + 272) == 0;
}

BOOL sub_35873C(uint64_t a1)
{
  return (*(unsigned char *)(a1 + 24) & 4) != 0 && (*(_DWORD *)(a1 + 88) & 0xFFFFFFFB) == 2 && *(unsigned char *)(a1 + 272) == 0;
}

BOOL sub_35876C(uint64_t a1, char a2)
{
  return ((*(_DWORD *)(a1 + 24) >> a2) & 1) != 0 && (*(_DWORD *)(a1 + 88) & 0xFFFFFFFB) == 2;
}

BOOL sub_358794(uint64_t a1)
{
  return (*(unsigned char *)(a1 + 24) & 1) != 0 && (*(_DWORD *)(a1 + 88) & 0xFFFFFFFB) == 2;
}

BOOL sub_3587B8(uint64_t a1)
{
  return (*(unsigned char *)(a1 + 24) & 4) != 0 && (*(_DWORD *)(a1 + 88) & 0xFFFFFFFB) == 2;
}

BOOL sub_3587DC(uint64_t a1, char a2)
{
  if (((*(_DWORD *)(a1 + 24) >> a2) & 1) == 0 || (*(_DWORD *)(a1 + 88) & 0xFFFFFFFB) != 2) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 272)) {
    return *(unsigned char *)(a1 + 312) != 0;
  }
  return 1;
}

BOOL sub_358820(uint64_t a1)
{
  return *(unsigned char *)(a1 + 272) && (*(unsigned char *)(a1 + 24) & 1) != 0 && (*(_DWORD *)(a1 + 88) & 0xFFFFFFFB) == 2;
}

uint64_t sub_35884C(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 160)) {
    return 0;
  }
  unsigned int v1 = *(_DWORD *)(a1 + 88);
  BOOL v2 = v1 >= 0xE;
  BOOL v3 = v1 == 14;
  unsigned int v4 = (0x2013u >> v1) & 1;
  if (!v3 && v2) {
    return 0;
  }
  else {
    return v4;
  }
}

BOOL sub_358878(uint64_t a1)
{
  return *(_DWORD *)(a1 + 88) == 13;
}

BOOL sub_358888(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 216) > 1u;
}

BOOL sub_358898(uint64_t a1, int a2)
{
  return *(_DWORD *)(a1 + 144) <= a2 && *(_DWORD *)(a1 + 148) >= a2;
}

BOOL sub_3588BC(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 148);
  return v2 != 0x7FFFFFFF && v2 < a2;
}

BOOL sub_3588D4(uint64_t a1, int a2)
{
  BOOL v2 = *(_DWORD *)(a1 + 144) > a2;
  *(unsigned char *)(a1 + 416) = v2;
  return v2;
}

uint64_t sub_3588EC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 416);
}

BOOL sub_3588F4(uint64_t a1, uint64_t a2)
{
  return sub_36630((_DWORD *)(a1 + 128), (_DWORD *)(a2 + 128));
}

uint64_t sub_358900(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(uint64_t **)a1;
  BOOL v2 = *(uint64_t **)(a1 + 8);
  unsigned int v4 = *(uint64_t **)a2;
  if ((uint64_t *)((char *)v2 - *(void *)a1) != (uint64_t *)(*(void *)(a2 + 8) - *(void *)a2)) {
    return 0;
  }
  while (v3 != v2)
  {
    uint64_t v8 = *v3;
    uint64_t v7 = v3[1];
    uint64_t v9 = *v4;
    if (v7 - *v3 != v4[1] - *v4) {
      return 0;
    }
    for (; v8 != v7; v9 += 24)
    {
      long long v11 = *(_DWORD **)v8;
      uint64_t v10 = *(_DWORD **)(v8 + 8);
      unint64_t v12 = *(_DWORD **)v9;
      if ((_DWORD *)((char *)v10 - *(void *)v8) != (_DWORD *)(*(void *)(v9 + 8) - *(void *)v9)) {
        return 0;
      }
      if (v11 != v10)
      {
        while (*v11 == *v12 && v11[1] == v12[1] && v11[2] == v12[2])
        {
          v11 += 3;
          v12 += 3;
          if (v11 == v10) {
            goto LABEL_11;
          }
        }
        return 0;
      }
LABEL_11:
      v8 += 24;
    }
    v3 += 3;
    v4 += 3;
  }
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v15 = *(void **)(a2 + 24);
  if (v13 - v14 != *(void *)(a2 + 32) - (void)v15) {
    return 0;
  }
  if (v14 != v13)
  {
    while (__PAIR64__(*(unsigned __int16 *)(v14 + 4), *(_DWORD *)v14) == __PAIR64__((unsigned __int16)WORD2(*v15), *v15)&& (HIWORD(*v15) & 1) != (*(unsigned char *)(v14 + 6) == 0))
    {
      ++v15;
      v14 += 8;
      if (v14 == v13) {
        goto LABEL_18;
      }
    }
    return 0;
  }
LABEL_18:
  uint64_t v16 = *(unsigned __int8 **)(a1 + 48);
  long long v17 = *(unsigned __int8 **)(a1 + 56);
  unint64_t v18 = *(unsigned __int8 **)(a2 + 48);
  if (v17 - v16 != *(void *)(a2 + 56) - (void)v18) {
    return 0;
  }
  for (; v16 != v17; v18 += 48)
  {
    uint64_t result = sub_524DC(v16, v18);
    if (!result) {
      return result;
    }
    v16 += 48;
  }
  uint64_t v20 = *(unsigned __int8 **)(a1 + 72);
  uint64_t v21 = *(unsigned __int8 **)(a1 + 80);
  uint64_t v22 = *(unsigned __int8 **)(a2 + 72);
  if (v21 - v20 != *(void *)(a2 + 80) - (void)v22) {
    return 0;
  }
  for (; v20 != v21; v22 += 48)
  {
    uint64_t result = sub_524DC(v20, v22);
    if (!result) {
      return result;
    }
    v20 += 48;
  }
  uint64_t v23 = *(unsigned __int8 **)(a1 + 96);
  uint64_t v24 = *(unsigned __int8 **)(a1 + 104);
  int v25 = *(unsigned __int8 **)(a2 + 96);
  if (v24 - v23 != *(void *)(a2 + 104) - (void)v25) {
    return 0;
  }
  if (v23 == v24)
  {
LABEL_30:
    if (*(_DWORD *)(a1 + 120) == *(_DWORD *)(a2 + 120)) {
      return *(_DWORD *)(a1 + 124) == *(_DWORD *)(a2 + 124);
    }
    return 0;
  }
  while (1)
  {
    uint64_t result = sub_524DC(v23, v25);
    if (!result) {
      return result;
    }
    v23 += 48;
    v25 += 48;
    if (v23 == v24) {
      goto LABEL_30;
    }
  }
}

BOOL sub_358B6C(uint64_t a1)
{
  return *(unsigned char *)(a1 + 176)
      && (*(void *)a1 == *(void *)(a1 + 8)) != (*(void *)(a1 + 24) == *(void *)(a1 + 32))
      && sub_344C4((_DWORD *)(a1 + 128));
}

BOOL sub_358BA4(uint64_t a1, unsigned int a2)
{
  unsigned int v13 = a2;
  int v2 = *(unsigned __int8 *)(a1 + 176);
  if (v2 == 2)
  {
    long long v11 = (_DWORD *)(a1 + 128);
    sub_383CC(&v13, (uint64_t)v12);
    return sub_34658(v11, v12);
  }
  else
  {
    if (v2 != 1) {
      return 0;
    }
    BOOL v3 = *(unsigned int **)(a1 + 152);
    unsigned int v4 = *(unsigned int **)(a1 + 160);
    if (v4 == v3) {
      return 0;
    }
    unint64_t v5 = v4 - v3;
    do
    {
      unint64_t v6 = v5 >> 1;
      uint64_t v7 = &v3[v5 >> 1];
      unsigned int v9 = *v7;
      uint64_t v8 = v7 + 1;
      v5 += ~(v5 >> 1);
      if (v9 < a2) {
        BOOL v3 = v8;
      }
      else {
        unint64_t v5 = v6;
      }
    }
    while (v5);
    return v3 != v4 && *v3 <= a2;
  }
}

BOOL sub_358C68(uint64_t *a1, unint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  int v7 = *((unsigned __int8 *)a1 + 176);
  if (v7 == 2)
  {
    unint64_t v12 = (unsigned int *)a1[3];
    unsigned int v13 = (unsigned int *)a1[4];
    if (v13 != v12)
    {
      unint64_t v14 = ((char *)v13 - (char *)v12) >> 3;
      unint64_t v15 = (a2 >> 16) & 0xFFFF0000 | (a2 << 32) | ((a2 & 0xFF000000000000) == 0);
      do
      {
        unint64_t v16 = v14 >> 1;
        long long v17 = &v12[2 * (v14 >> 1)];
        unint64_t v18 = ((unint64_t)*v17 << 32) | ((unint64_t)*((unsigned __int16 *)v17 + 2) << 16) | (*((unsigned char *)v17 + 6) == 0);
        long long v19 = v17 + 2;
        v14 += ~(v14 >> 1);
        if (v18 < v15) {
          unint64_t v12 = v19;
        }
        else {
          unint64_t v14 = v16;
        }
      }
      while (v14);
      if (v12 != v13) {
        return v15 >= ((*(void *)v12 >> 16) & 0xFFFF0000 | (*(void *)v12 << 32) | (unint64_t)((*(void *)v12 & 0xFF000000000000) == 0));
      }
    }
    return 0;
  }
  if (v7 != 1) {
    return 0;
  }
  uint64_t v8 = *(_DWORD **)a3;
  unsigned int v9 = *(_DWORD **)(a3 + 8);
  if (*(_DWORD **)a3 == v9) {
    return 0;
  }
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  if (*a1 == v11) {
    return 0;
  }
LABEL_17:
  unsigned int v21 = v8[1];
  LODWORD(a5) = *v8;
  a5 = (double)*(unint64_t *)&a5;
  uint64_t v22 = v10;
  while (1)
  {
    uint64_t v23 = *(void **)v22;
    uint64_t v24 = *(void **)(v22 + 8);
    if (*(void **)v22 != v24)
    {
      int v25 = 0;
      do
      {
        int v26 = (_DWORD *)v23[1];
        int v27 = (_DWORD *)(*v23 + 12);
        if ((_DWORD *)*v23 != v26 && v27 != v26)
        {
          do
          {
            unsigned int v29 = *(v27 - 2);
            unsigned int v30 = v27[1];
            if (v29 >= v21)
            {
              if (v30 < v21)
              {
LABEL_34:
                LODWORD(a6) = *v27;
                LODWORD(a7) = *(v27 - 3);
                a7 = (double)*(unint64_t *)&a7;
                a6 = ((double)v21 - (double)v29) / ((double)v30 - (double)v29) * ((double)*(unint64_t *)&a6 - a7)
                   + a7;
                if (a6 < a5) {
                  v25 ^= 1u;
                }
              }
            }
            else if (v30 >= v21)
            {
              goto LABEL_34;
            }
            v27 += 3;
          }
          while (v27 != v26);
        }
        v23 += 3;
      }
      while (v23 != v24);
      if (v25) {
        return 1;
      }
    }
    v22 += 24;
    if (v22 == v11)
    {
      BOOL result = 0;
      v8 += 3;
      if (v8 == v9) {
        return result;
      }
      goto LABEL_17;
    }
  }
}

uint64_t sub_358E24(uint64_t a1, uint64_t a2)
{
  v5[0] = a1;
  v5[1] = a1 + 8;
  v5[2] = a1 + 56;
  v5[3] = a1 + 64;
  v5[4] = a1 + 88;
  v5[5] = a1 + 112;
  unint64_t v6 = (unsigned __int8 *)(a1 + 136);
  v3[0] = a2;
  v3[1] = a2 + 8;
  v3[2] = a2 + 56;
  v3[3] = a2 + 64;
  v3[4] = a2 + 88;
  v3[5] = a2 + 112;
  unsigned int v4 = (unsigned __int8 *)(a2 + 136);
  uint64_t result = sub_359A00((uint64_t)&v7, (uint64_t)v5, (uint64_t)v3);
  if (result) {
    return *v6 == *v4
  }
        && v6[1] == v4[1]
        && *((_DWORD *)v6 + 1) == *((_DWORD *)v4 + 1)
        && *((float *)v6 + 2) == *((float *)v4 + 2)
        && *((_DWORD *)v6 + 3) == *((_DWORD *)v4 + 3);
  return result;
}

BOOL sub_358F0C(uint64_t a1, uint64_t a2)
{
  return sub_36630((_DWORD *)(a1 + 428), (_DWORD *)(a2 + 428));
}

uint64_t sub_358F18(uint64_t a1, uint64_t a2)
{
  v4[0] = a1 + 428;
  v4[1] = a1;
  v4[2] = a1 + 456;
  v4[3] = a1 + 480;
  v3[0] = a2 + 428;
  v3[1] = a2;
  v3[2] = a2 + 456;
  v3[3] = a2 + 480;
  return sub_359D10((uint64_t)&v5, v4, v3);
}

uint64_t sub_358F6C(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)uint64_t result = a2;
  *(void *)(result + 8) = a3;
  return result;
}

void *sub_358F78(void *a1, uint64_t *a2, uint64_t a3, void *a4)
{
  uint64_t v6 = *a2;
  a1[1] = 0;
  *a1 = v6;
  a1[2] = 0;
  a1[3] = 0;
  uint64_t v8 = *(const void **)a3;
  uint64_t v7 = *(void *)(a3 + 8);
  int64_t v9 = v7 - *(void *)a3;
  if (v7 != *(void *)a3)
  {
    if (v9 < 0) {
      sub_2E00();
    }
    uint64_t v10 = (char *)operator new(v7 - *(void *)a3);
    a1[1] = v10;
    a1[2] = v10;
    uint64_t v11 = &v10[16 * (v9 >> 4)];
    a1[3] = v11;
    memcpy(v10, v8, v9);
    a1[2] = v11;
  }
  a1[4] = *a4;
  return a1;
}

void sub_359010(_Unwind_Exception *exception_object)
{
  unsigned int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_35902C(uint64_t a1, unsigned __int8 *a2)
{
  v4[0] = a1;
  v4[1] = a1 + 24;
  v4[2] = a1 + 32;
  v4[3] = a1 + 40;
  v3[0] = a2;
  v3[1] = a2 + 24;
  v3[2] = a2 + 32;
  v3[3] = a2 + 40;
  return sub_359EE8((uint64_t)&v5, (uint64_t)v4, v3);
}

uint64_t sub_359080(uint64_t a1, uint64_t a2)
{
  v8[0] = a1 + 32;
  v8[1] = a1 + 24;
  v8[2] = a1;
  v8[3] = a1 + 40;
  uint64_t v2 = *(void *)(a2 + 32);
  v7[0] = a2 + 32;
  v7[1] = a2 + 24;
  v7[2] = a2;
  v7[3] = a2 + 40;
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3 < v2) {
    return 1;
  }
  if (v2 < v3) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(a2 + 24);
  unsigned int v6 = *(_DWORD *)(a1 + 24);
  if (v6 < v5) {
    return 1;
  }
  if (v5 >= v6) {
    return sub_35A06C((uint64_t)&v9, (uint64_t)v8, (uint64_t)v7);
  }
  return 0;
}

BOOL sub_359144(uint64_t a1)
{
  if (*(void *)(a1 + 32) == 0x7FFFFFFFFFFFFFFFLL) {
    return 0;
  }
  if (*(char *)(a1 + 23) < 0) {
    return *(void *)(a1 + 8) != 0;
  }
  return *(unsigned char *)(a1 + 23) != 0;
}

uint64_t sub_359184(uint64_t result, int a2, __int16 a3, char a4)
{
  *(_DWORD *)uint64_t result = a2;
  *(_WORD *)(result + 4) = a3;
  *(unsigned char *)(result + 6) = a4;
  return result;
}

BOOL sub_359194(uint64_t a1)
{
  return *(_DWORD *)a1 && *(__int16 *)(a1 + 4) != -1;
}

BOOL sub_3591B4(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2 && *(unsigned __int16 *)(a2 + 4) == *(unsigned __int16 *)(a1 + 4);
}

BOOL sub_3591E0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 < *(_DWORD *)a2) {
    return 1;
  }
  if (*(_DWORD *)a2 >= *(_DWORD *)a1) {
    return *(unsigned __int16 *)(a2 + 4) > *(unsigned __int16 *)(a1 + 4);
  }
  return 0;
}

uint64_t sub_35921C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_359328((uint64_t)&v17, a2, a3);
  if (result)
  {
    unsigned int v6 = *(uint64_t **)(a2 + 136);
    uint64_t v7 = *(unsigned __int8 ****)(a3 + 136);
    uint64_t v9 = *v6;
    uint64_t v8 = v6[1];
    uint64_t v10 = *v7;
    if (v8 - *v6 == (char *)v7[1] - (char *)*v7)
    {
      if (v9 == v8) {
        return 1;
      }
      while (1)
      {
        uint64_t v11 = *(unsigned __int8 *)(v9 + 23);
        if ((v11 & 0x80u) == 0) {
          unint64_t v12 = (unsigned __int8 *)*(unsigned __int8 *)(v9 + 23);
        }
        else {
          unint64_t v12 = *(unsigned __int8 **)(v9 + 8);
        }
        unsigned int v13 = (unsigned __int8 *)*((unsigned __int8 *)v10 + 23);
        int v14 = (char)v13;
        if ((char)v13 < 0) {
          unsigned int v13 = v10[1];
        }
        if (v12 != v13) {
          break;
        }
        if (v14 >= 0) {
          unint64_t v15 = (unsigned __int8 *)v10;
        }
        else {
          unint64_t v15 = *v10;
        }
        if ((v11 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v9, v15, *(void *)(v9 + 8))) {
            return 0;
          }
        }
        else if (*(unsigned char *)(v9 + 23))
        {
          uint64_t v16 = 0;
          while (*(unsigned __int8 *)(v9 + v16) == v15[v16])
          {
            if (v11 == ++v16) {
              goto LABEL_7;
            }
          }
          return 0;
        }
LABEL_7:
        v9 += 24;
        v10 += 3;
        uint64_t result = 1;
        if (v9 == v8) {
          return result;
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_359328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((sub_3594E0((uint64_t)&v20, a2, a3) & 1) == 0) {
    return 0;
  }
  if (**(_DWORD **)(a2 + 64) != **(_DWORD **)(a3 + 64)
    || **(_DWORD **)(a2 + 72) != **(_DWORD **)(a3 + 72)
    || **(_DWORD **)(a2 + 80) != **(_DWORD **)(a3 + 80)
    || **(unsigned __int8 **)(a2 + 88) != **(unsigned __int8 **)(a3 + 88)
    || **(unsigned __int8 **)(a2 + 96) != **(unsigned __int8 **)(a3 + 96)
    || **(unsigned __int8 **)(a2 + 104) != **(unsigned __int8 **)(a3 + 104)
    || **(unsigned __int8 **)(a2 + 112) != **(unsigned __int8 **)(a3 + 112)
    || **(_DWORD **)(a2 + 120) != **(_DWORD **)(a3 + 120))
  {
    return 0;
  }
  unsigned int v5 = *(unsigned __int8 **)(a2 + 128);
  unsigned int v6 = *(unsigned __int8 ***)(a3 + 128);
  uint64_t v7 = v5[23];
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = (unsigned __int8 *)v5[23];
  }
  else {
    uint64_t v8 = (unsigned __int8 *)*((void *)v5 + 1);
  }
  uint64_t v9 = (unsigned __int8 *)*((unsigned __int8 *)v6 + 23);
  int v10 = (char)v9;
  if ((char)v9 < 0) {
    uint64_t v9 = v6[1];
  }
  if (v8 != v9) {
    return 0;
  }
  if (v10 >= 0) {
    uint64_t v11 = *(unsigned __int8 **)(a3 + 128);
  }
  else {
    uint64_t v11 = *v6;
  }
  if ((v7 & 0x80) != 0) {
    return memcmp(*(const void **)v5, v11, *((void *)v5 + 1)) == 0;
  }
  if (!v5[23]) {
    return 1;
  }
  uint64_t v12 = v7 - 1;
  do
  {
    int v14 = *v5++;
    int v13 = v14;
    int v16 = *v11++;
    int v15 = v16;
    BOOL v18 = v12-- != 0;
    uint64_t result = v13 == v15;
  }
  while (v13 == v15 && v18);
  return result;
}

uint64_t sub_3594E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((sub_35966C((uint64_t)&v27, a2, a3) & 1) == 0) {
    return 0;
  }
  if (**(_DWORD **)(a2 + 40) != **(_DWORD **)(a3 + 40)) {
    return 0;
  }
  unsigned int v5 = *(unsigned __int8 **)(a2 + 48);
  unsigned int v6 = *(unsigned __int8 ***)(a3 + 48);
  uint64_t v7 = v5[23];
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = (unsigned __int8 *)v5[23];
  }
  else {
    uint64_t v8 = (unsigned __int8 *)*((void *)v5 + 1);
  }
  uint64_t v9 = (unsigned __int8 *)*((unsigned __int8 *)v6 + 23);
  int v10 = (char)v9;
  if ((char)v9 < 0) {
    uint64_t v9 = v6[1];
  }
  if (v8 != v9) {
    return 0;
  }
  if (v10 >= 0) {
    uint64_t v11 = *(unsigned __int8 **)(a3 + 48);
  }
  else {
    uint64_t v11 = *v6;
  }
  if ((v7 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v5, v11, *((void *)v5 + 1))) {
      goto LABEL_20;
    }
    return 0;
  }
  if (v5[23])
  {
    while (*v5 == *v11)
    {
      ++v5;
      ++v11;
      if (!--v7) {
        goto LABEL_20;
      }
    }
    return 0;
  }
LABEL_20:
  int v13 = *(unsigned __int8 **)(a2 + 56);
  int v14 = *(unsigned __int8 ***)(a3 + 56);
  uint64_t v15 = v13[23];
  if ((v15 & 0x80u) == 0) {
    int v16 = (unsigned __int8 *)v13[23];
  }
  else {
    int v16 = (unsigned __int8 *)*((void *)v13 + 1);
  }
  char v17 = (unsigned __int8 *)*((unsigned __int8 *)v14 + 23);
  int v18 = (char)v17;
  if ((char)v17 < 0) {
    char v17 = v14[1];
  }
  if (v16 != v17) {
    return 0;
  }
  if (v18 >= 0) {
    long long v19 = *(unsigned __int8 **)(a3 + 56);
  }
  else {
    long long v19 = *v14;
  }
  if ((v15 & 0x80) != 0) {
    return memcmp(*(const void **)v13, v19, *((void *)v13 + 1)) == 0;
  }
  if (!v13[23]) {
    return 1;
  }
  uint64_t v20 = v15 - 1;
  do
  {
    int v22 = *v13++;
    int v21 = v22;
    int v24 = *v19++;
    int v23 = v24;
    BOOL v26 = v20-- != 0;
    uint64_t result = v21 == v23;
  }
  while (v21 == v23 && v26);
  return result;
}

uint64_t sub_35966C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!sub_3597A8((uint64_t)&v18, a2, (uint64_t **)a3)) {
    return 0;
  }
  unsigned int v5 = *(unsigned __int8 **)(a2 + 24);
  unsigned int v6 = *(unsigned __int8 ***)(a3 + 24);
  uint64_t v7 = v5[23];
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = (unsigned __int8 *)v5[23];
  }
  else {
    uint64_t v8 = (unsigned __int8 *)*((void *)v5 + 1);
  }
  uint64_t v9 = (unsigned __int8 *)*((unsigned __int8 *)v6 + 23);
  int v10 = (char)v9;
  if ((char)v9 < 0) {
    uint64_t v9 = v6[1];
  }
  if (v8 != v9) {
    return 0;
  }
  if (v10 >= 0) {
    uint64_t v11 = *(unsigned __int8 **)(a3 + 24);
  }
  else {
    uint64_t v11 = *v6;
  }
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v5, v11, *((void *)v5 + 1))) {
      return 0;
    }
  }
  else if (v5[23])
  {
    while (*v5 == *v11)
    {
      ++v5;
      ++v11;
      if (!--v7) {
        goto LABEL_19;
      }
    }
    return 0;
  }
LABEL_19:
  int v13 = *(unsigned __int8 ***)(a2 + 32);
  uint64_t v14 = *(void *)(a3 + 32);
  uint64_t v15 = *v13;
  int v16 = v13[1];
  char v17 = *(unsigned __int8 **)v14;
  if (v16 - *v13 != *(void *)(v14 + 8) - *(void *)v14) {
    return 0;
  }
  if (v15 == v16) {
    return 1;
  }
  do
  {
    uint64_t result = sub_524DC(v15, v17);
    if (!result) {
      break;
    }
    v15 += 48;
    v17 += 48;
  }
  while (v15 != v16);
  return result;
}

BOOL sub_3597A8(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  unsigned int v4 = **(char ***)a2;
  uint64_t v3 = *(char **)(*(void *)a2 + 8);
  uint64_t v5 = **a3;
  if (v3 - v4 == (*a3)[1] - v5)
  {
    if (v4 == v3)
    {
LABEL_9:
      if (**(_DWORD **)(a2 + 8) == *(_DWORD *)a3[1])
      {
        uint64_t v9 = *(_DWORD **)(a2 + 16);
        int v10 = a3[2];
        if (*v9 == *(_DWORD *)v10 && v9[1] == *((_DWORD *)v10 + 1)) {
          return v9[2] == *((_DWORD *)v10 + 2);
        }
      }
    }
    else
    {
      while (1)
      {
        uint64_t v7 = *(void *)v4;
        uint64_t v6 = *((void *)v4 + 1);
        uint64_t v8 = *(void **)v5;
        if (v6 - *(void *)v4 != *(void *)(v5 + 8) - *(void *)v5) {
          break;
        }
        if (v7 != v6)
        {
          while (__PAIR64__(*(unsigned __int16 *)(v7 + 4), *(_DWORD *)v7) == __PAIR64__((unsigned __int16)WORD2(*v8), *v8)&& (HIWORD(*v8) & 1) != (*(unsigned char *)(v7 + 6) == 0))
          {
            ++v8;
            v7 += 8;
            if (v7 == v6) {
              goto LABEL_8;
            }
          }
          return 0;
        }
LABEL_8:
        v4 += 24;
        v5 += 24;
        if (v4 == v3) {
          goto LABEL_9;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_3598A4(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  if (**a2 != **a3) {
    return 0;
  }
  uint64_t v5 = a2[1];
  uint64_t v6 = a3[1];
  uint64_t v7 = *(unsigned __int8 **)v5;
  uint64_t v8 = (unsigned __int8 *)*((void *)v5 + 1);
  uint64_t v9 = *(unsigned __int8 **)v6;
  if (&v8[-*(void *)v5] != (unsigned __int8 *)(*((void *)v6 + 1) - *(void *)v6)) {
    return 0;
  }
  if (v7 == v8)
  {
LABEL_6:
    uint64_t v11 = a2[2];
    uint64_t v12 = a3[2];
    int v13 = *(unsigned __int8 **)v11;
    uint64_t v14 = (unsigned __int8 *)*((void *)v11 + 1);
    uint64_t v15 = *(unsigned __int8 **)v12;
    if (&v14[-*(void *)v11] == (unsigned __int8 *)(*((void *)v12 + 1) - *(void *)v12))
    {
      for (; v13 != v14; v15 += 48)
      {
        uint64_t result = sub_524DC(v13, v15);
        if (!result) {
          return result;
        }
        v13 += 48;
      }
      int v16 = a2[3];
      char v17 = a3[3];
      char v18 = *(unsigned __int8 **)v16;
      long long v19 = (unsigned __int8 *)*((void *)v16 + 1);
      uint64_t v20 = *(unsigned __int8 **)v17;
      if (&v19[-*(void *)v16] == (unsigned __int8 *)(*((void *)v17 + 1) - *(void *)v17))
      {
        if (v18 == v19) {
          return 1;
        }
        do
        {
          uint64_t result = sub_524DC(v18, v20);
          if (!result) {
            break;
          }
          v18 += 48;
          v20 += 48;
        }
        while (v18 != v19);
        return result;
      }
    }
    return 0;
  }
  while (1)
  {
    uint64_t result = sub_524DC(v7, v9);
    if (!result) {
      return result;
    }
    v7 += 48;
    v9 += 48;
    if (v7 == v8) {
      goto LABEL_6;
    }
  }
}

uint64_t sub_359A00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!sub_359B94((uint64_t)&v28, (unsigned __int8 **)a2, (unsigned __int8 **)a3)) {
    return 0;
  }
  uint64_t v5 = *(unsigned __int8 ***)(a2 + 32);
  uint64_t v6 = *(void *)(a3 + 32);
  uint64_t v7 = *v5;
  uint64_t v8 = v5[1];
  uint64_t v9 = (unsigned __int8 *)(v8 - *v5);
  int v10 = *(unsigned __int8 **)v6;
  if (v9 != (unsigned __int8 *)(*(void *)(v6 + 8) - *(void *)v6)) {
    return 0;
  }
  if (v7 != v8)
  {
    do
    {
      v30[0] = v7;
      v30[1] = v7 + 8;
      uint64_t v11 = v7 + 56;
      v30[2] = v7 + 32;
      v30[3] = v7 + 56;
      v29[0] = v10;
      v29[1] = v10 + 8;
      uint64_t v12 = v10 + 56;
      v29[2] = v10 + 32;
      v29[3] = v10 + 56;
      if (!sub_3598A4((uint64_t)&v31, v30, v29)) {
        return 0;
      }
      uint64_t v7 = v11 + 24;
      int v10 = v12 + 24;
    }
    while (v11 + 24 != v8);
  }
  int v13 = *(unsigned __int8 **)(a2 + 40);
  uint64_t v14 = *(unsigned __int8 ***)(a3 + 40);
  uint64_t v15 = v13[23];
  if ((v15 & 0x80u) == 0) {
    int v16 = (unsigned __int8 *)v13[23];
  }
  else {
    int v16 = (unsigned __int8 *)*((void *)v13 + 1);
  }
  char v17 = (unsigned __int8 *)*((unsigned __int8 *)v14 + 23);
  int v18 = (char)v17;
  if ((char)v17 < 0) {
    char v17 = v14[1];
  }
  if (v16 != v17) {
    return 0;
  }
  if (v18 >= 0) {
    long long v19 = *(unsigned __int8 **)(a3 + 40);
  }
  else {
    long long v19 = *v14;
  }
  if ((v15 & 0x80) != 0) {
    return memcmp(*(const void **)v13, v19, *((void *)v13 + 1)) == 0;
  }
  if (!v13[23]) {
    return 1;
  }
  uint64_t v20 = v15 - 1;
  do
  {
    int v22 = *v13++;
    int v21 = v22;
    int v24 = *v19++;
    int v23 = v24;
    BOOL v26 = v20-- != 0;
    uint64_t result = v21 == v23;
  }
  while (v21 == v23 && v26);
  return result;
}

uint64_t sub_359B94(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  if (**a2 != **a3) {
    return 0;
  }
  uint64_t v5 = a2[1];
  uint64_t v6 = a3[1];
  uint64_t v7 = *(unsigned __int8 **)v5;
  uint64_t v8 = (unsigned __int8 *)*((void *)v5 + 1);
  uint64_t v9 = *(unsigned __int8 **)v6;
  if (&v8[-*(void *)v5] != (unsigned __int8 *)(*((void *)v6 + 1) - *(void *)v6)) {
    return 0;
  }
  if (v7 == v8)
  {
LABEL_6:
    uint64_t v11 = (unsigned __int8 *)*((void *)v5 + 3);
    uint64_t v12 = (unsigned __int8 *)*((void *)v5 + 4);
    int v13 = (unsigned __int8 *)*((void *)v6 + 3);
    if (v12 - v11 == *((void *)v6 + 4) - (void)v13)
    {
      for (; v11 != v12; v13 += 48)
      {
        uint64_t result = sub_524DC(v11, v13);
        if (!result) {
          return result;
        }
        v11 += 48;
      }
      if (*(_DWORD *)a2[2] == *(_DWORD *)a3[2])
      {
        uint64_t v14 = a2[3];
        uint64_t v15 = a3[3];
        int v16 = *(unsigned __int8 **)v14;
        char v17 = (unsigned __int8 *)*((void *)v14 + 1);
        int v18 = *(unsigned __int8 **)v15;
        if (&v17[-*(void *)v14] == (unsigned __int8 *)(*((void *)v15 + 1) - *(void *)v15))
        {
          if (v16 == v17) {
            return 1;
          }
          do
          {
            uint64_t result = sub_524DC(v16, v18);
            if (!result) {
              break;
            }
            v16 += 48;
            v18 += 48;
          }
          while (v16 != v17);
          return result;
        }
      }
    }
    return 0;
  }
  while (1)
  {
    uint64_t result = sub_524DC(v7, v9);
    if (!result) {
      return result;
    }
    v7 += 48;
    v9 += 48;
    if (v7 == v8) {
      goto LABEL_6;
    }
  }
}

uint64_t sub_359D10(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = (_DWORD *)*a2;
  unsigned int v4 = (_DWORD *)*a3;
  if (*(_DWORD *)*a2 != *(_DWORD *)*a3) {
    return 0;
  }
  if (v3[1] != v4[1] || v3[3] != v4[3] || v3[4] != v4[4]) {
    return 0;
  }
  uint64_t result = sub_357E98(a2[1], a3[1]);
  if (!result) {
    return result;
  }
  uint64_t v8 = (uint64_t *)a2[2];
  uint64_t v9 = (uint64_t *)a3[2];
  uint64_t v10 = *v8;
  uint64_t v11 = v8[1];
  uint64_t v12 = *v9;
  if (v11 - *v8 != v9[1] - *v9) {
    return 0;
  }
  if (v10 == v11)
  {
LABEL_10:
    uint64_t v13 = a3[3];
    v16[0] = a2[3];
    v16[1] = v16[0] + 8;
    v16[2] = v16[0] + 56;
    v16[3] = v16[0] + 64;
    v16[4] = v16[0] + 88;
    v16[5] = v16[0] + 112;
    char v17 = (unsigned __int8 *)(v16[0] + 136);
    v14[0] = v13;
    v14[1] = v13 + 8;
    v14[2] = v13 + 56;
    v14[3] = v13 + 64;
    v14[4] = v13 + 88;
    v14[5] = v13 + 112;
    uint64_t v15 = (unsigned __int8 *)(v13 + 136);
    uint64_t result = sub_359A00((uint64_t)&v18, (uint64_t)v16, (uint64_t)v14);
    if (!result) {
      return result;
    }
    if (*v17 == *v15
      && v17[1] == v15[1]
      && *((_DWORD *)v17 + 1) == *((_DWORD *)v15 + 1)
      && *((float *)v17 + 2) == *((float *)v15 + 2))
    {
      return *((_DWORD *)v17 + 3) == *((_DWORD *)v15 + 3);
    }
    return 0;
  }
  while (1)
  {
    uint64_t result = sub_358900(v10, v12);
    if (!result) {
      return result;
    }
    v10 += 184;
    v12 += 184;
    if (v10 == v11) {
      goto LABEL_10;
    }
  }
}

uint64_t sub_359EE8(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  unsigned int v4 = *(const void ***)a2;
  uint64_t v5 = *a3;
  uint64_t v6 = *(unsigned __int8 *)(*(void *)a2 + 23);
  size_t v7 = *(void *)(*(void *)a2 + 8);
  if ((v6 & 0x80u) == 0) {
    uint64_t v8 = *(unsigned __int8 *)(*(void *)a2 + 23);
  }
  else {
    uint64_t v8 = *(void *)(*(void *)a2 + 8);
  }
  uint64_t v9 = v5[23];
  int v10 = (char)v9;
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *((void *)v5 + 1);
  }
  if (v8 != v9) {
    return 0;
  }
  if (v10 >= 0) {
    uint64_t v12 = v5;
  }
  else {
    uint64_t v12 = *(unsigned __int8 **)v5;
  }
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*v4, v12, v7)) {
      return 0;
    }
  }
  else if (v6)
  {
    while (*(unsigned __int8 *)v4 == *v12)
    {
      unsigned int v4 = (const void **)((char *)v4 + 1);
      ++v12;
      if (!--v6) {
        goto LABEL_18;
      }
    }
    return 0;
  }
LABEL_18:
  if (**(_DWORD **)(a2 + 8) != *(_DWORD *)a3[1] || **(void **)(a2 + 16) != *(void *)a3[2]) {
    return 0;
  }
  uint64_t v14 = *(unsigned __int8 **)(a2 + 24);
  uint64_t v15 = (unsigned __int8 **)a3[3];
  uint64_t v16 = v14[23];
  if ((v16 & 0x80u) == 0) {
    char v17 = (unsigned __int8 *)v14[23];
  }
  else {
    char v17 = (unsigned __int8 *)*((void *)v14 + 1);
  }
  char v18 = (unsigned __int8 *)*((unsigned __int8 *)v15 + 23);
  int v19 = (char)v18;
  if ((char)v18 < 0) {
    char v18 = v15[1];
  }
  if (v17 != v18) {
    return 0;
  }
  if (v19 >= 0) {
    uint64_t v20 = a3[3];
  }
  else {
    uint64_t v20 = *v15;
  }
  if ((v16 & 0x80) != 0) {
    return memcmp(*(const void **)v14, v20, *((void *)v14 + 1)) == 0;
  }
  if (!v14[23]) {
    return 1;
  }
  uint64_t v21 = v16 - 1;
  do
  {
    int v23 = *v14++;
    int v22 = v23;
    int v25 = *v20++;
    int v24 = v25;
    BOOL v27 = v21-- != 0;
    uint64_t result = v22 == v24;
  }
  while (v22 == v24 && v27);
  return result;
}

uint64_t sub_35A06C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a3 + 16);
  int v7 = *(char *)(v6 + 23);
  int v8 = *(char *)(v5 + 23);
  if (v8 >= 0) {
    size_t v9 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    size_t v9 = *(void *)(v5 + 8);
  }
  if (v8 >= 0) {
    int v10 = *(const void **)(a2 + 16);
  }
  else {
    int v10 = *(const void **)v5;
  }
  if (v7 >= 0) {
    size_t v11 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    size_t v11 = *(void *)(v6 + 8);
  }
  if (v7 >= 0) {
    uint64_t v12 = *(const void **)(a3 + 16);
  }
  else {
    uint64_t v12 = *(const void **)v6;
  }
  if (v11 >= v9) {
    size_t v13 = v9;
  }
  else {
    size_t v13 = v11;
  }
  int v14 = memcmp(v10, v12, v13);
  BOOL v15 = v9 < v11;
  if (v14) {
    BOOL v15 = v14 < 0;
  }
  if (v15) {
    return 1;
  }
  int v17 = memcmp(v12, v10, v13);
  BOOL v18 = v11 < v9;
  if (v17) {
    BOOL v18 = v17 < 0;
  }
  if (v18) {
    return 0;
  }
  uint64_t v19 = *(void *)(a2 + 24);
  uint64_t v20 = *(const void ***)(a3 + 24);
  int v21 = *((char *)v20 + 23);
  int v22 = *(char *)(v19 + 23);
  if (v22 >= 0) {
    size_t v23 = *(unsigned __int8 *)(v19 + 23);
  }
  else {
    size_t v23 = *(void *)(v19 + 8);
  }
  if (v22 >= 0) {
    int v24 = *(const void **)(a2 + 24);
  }
  else {
    int v24 = *(const void **)v19;
  }
  if (v21 >= 0) {
    size_t v25 = *((unsigned __int8 *)v20 + 23);
  }
  else {
    size_t v25 = (size_t)v20[1];
  }
  if (v21 >= 0) {
    BOOL v26 = v20;
  }
  else {
    BOOL v26 = *v20;
  }
  if (v25 >= v23) {
    size_t v27 = v23;
  }
  else {
    size_t v27 = v25;
  }
  int v28 = memcmp(v24, v26, v27);
  if (v28) {
    return v28 < 0;
  }
  else {
    return v23 < v25;
  }
}

char *sub_35A1C8(unint64_t *a1, void *a2, void *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 3;
  size_t v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)size_t v9 = *a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    size_t v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      uint64_t v19 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      BOOL v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        uint64_t v19 = (void *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        uint64_t v19 = (void *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          size_t v13 = (uint64_t *)((char *)v13 + v21);
          uint64_t v19 = (void *)(v5 + v21);
          int v22 = (_OWORD *)(v5 + 16);
          size_t v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *int v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v56 = *v13++;
        *v19++ = v56;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)size_t v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    unsigned int v30 = (char *)operator new(8 * v29);
    char v31 = &v30[8 * v8];
    uint64_t v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    unsigned int v30 = 0;
    char v31 = (char *)(8 * v8);
    uint64_t v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((void *)v6 == a2) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = v7 >> 2;
    }
    if (v53 >> 61) {
      sub_188D718();
    }
    int v54 = (char *)operator new(8 * v53);
    char v31 = &v54[8 * (v53 >> 2)];
    uint64_t v32 = &v54[8 * v53];
    if (v30)
    {
      long long v55 = &v54[8 * v53];
      operator delete(v30);
      uint64_t v32 = v55;
      BOOL v34 = (char *)*a1;
      *(void *)char v31 = *a3;
      BOOL v35 = v31 + 8;
      int64_t v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  BOOL v34 = (char *)v6;
  *(void *)char v31 = *a3;
  BOOL v35 = v31 + 8;
  int64_t v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    uint64_t v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    uint64_t v39 = v9;
    int64_t v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    uint64_t v39 = v9;
    int64_t v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v39 = &v9[-v41];
    int64_t v36 = &v31[-v41];
    int v42 = v31 - 16;
    int v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)int v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  unint64_t v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    uint64_t v49 = v9;
    size_t v50 = v47 - v9;
    unsigned int v51 = v32;
    memmove(v35, v49, v50);
    uint64_t v32 = v51;
  }
  uint64_t v52 = (void *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v35[v48];
  a1[2] = (unint64_t)v32;
  if (v52) {
    operator delete(v52);
  }
  return v31;
}

void sub_35A520(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_35A538(unsigned int **a1, unsigned int **a2, unsigned int **a3, unsigned int **a4)
{
  if (a3 == a4) {
    return 0;
  }
  do
  {
    BOOL v4 = a1 == a2;
    if (a1 == a2) {
      break;
    }
    unint64_t v5 = *a3;
    unint64_t v6 = a3[1];
    uint64_t v8 = *a1;
    uint64_t v7 = a1[1];
    if (*a3 != v6)
    {
      size_t v9 = v5 + 2;
      unint64_t v10 = *a1;
      while (v10 != v7)
      {
        unint64_t v11 = (*((void *)v9 - 1) >> 16) & 0xFFFF0000 | (*((void *)v9 - 1) << 32) | ((*((void *)v9 - 1) & 0xFF000000000000) == 0);
        if ((((unint64_t)*v10 << 32) | ((unint64_t)*((unsigned __int16 *)v10 + 2) << 16) | (*((unsigned char *)v10 + 6) == 0)) < v11) {
          break;
        }
        unint64_t v12 = *(void *)v10;
        v10 += 2;
        if (v11 >= ((v12 >> 16) & 0xFFFF0000 | (v12 << 32) | ((v12 & 0xFF000000000000) == 0)))
        {
          BOOL v16 = v9 == v6;
          v9 += 2;
          if (!v16) {
            continue;
          }
        }
        goto LABEL_10;
      }
      return 1;
    }
LABEL_10:
    if (v8 != v7)
    {
      size_t v13 = v8 + 2;
      while (v5 != v6)
      {
        unint64_t v14 = (*((void *)v13 - 1) >> 16) & 0xFFFF0000 | (*((void *)v13 - 1) << 32) | ((*((void *)v13 - 1) & 0xFF000000000000) == 0);
        if ((((unint64_t)*v5 << 32) | ((unint64_t)*((unsigned __int16 *)v5 + 2) << 16) | (*((unsigned char *)v5 + 6) == 0)) < v14) {
          break;
        }
        unint64_t v15 = *(void *)v5;
        v5 += 2;
        BOOL v16 = v14 < ((v15 >> 16) & 0xFFFF0000 | (v15 << 32) | ((v15 & 0xFF000000000000) == 0)) || v13 == v7;
        v13 += 2;
        if (v16) {
          goto LABEL_19;
        }
      }
      return 0;
    }
LABEL_19:
    BOOL v4 = 0;
    a1 += 3;
    a3 += 3;
  }
  while (a3 != a4);
  return v4;
}

void sub_35A694()
{
  unk_255746F = 16641;
  word_2557458 = 65;
  byte_2557487 = 1;
  byte_2557471 = 0;
}

double sub_35A6BC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  return result;
}

void sub_35A6D4(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a2 + a2[1];
  *(void *)&long long v40 = *a2;
  *((void *)&v40 + 1) = v8;
  uint64_t v41 = 0x2C700000000;
  *(void *)a4 = 0x8000000080000000;
  *(_DWORD *)(a4 + 8) = 0x7FFFFFFF;
  *(_OWORD *)(a4 + 12) = 0u;
  size_t v9 = (_DWORD *)(a4 + 12);
  *(_OWORD *)(a4 + 28) = 0u;
  *(_OWORD *)(a4 + 44) = 0u;
  *(_DWORD *)(a4 + 60) = 0;
  int v10 = sub_2F4CE4(&v40, 8);
  *size_t v9 = v10;
  if (!v10) {
    return;
  }
  BOOL v11 = sub_2F333C((uint64_t)&v40);
  if (v41 != 8 && v11)
  {
    do
    {
      sub_2F3548((uint64_t)&v40);
      BOOL v13 = sub_2F333C((uint64_t)&v40);
    }
    while (v41 != 8 && v13);
  }
  uint64_t v37 = sub_2F3488((char **)&v40);
  unint64_t v38 = &v37[v15];
  uint64_t v39 = 0x2C700000000;
  while (sub_30DA40((uint64_t)&v37))
  {
    if (v39 == 1)
    {
      unint64_t v18 = sub_2F6A18(&v37, v38);
      if (!(v18 >> 31)) {
        *(_DWORD *)a4 = v18;
      }
    }
    else if (v39 == 2)
    {
      unint64_t v17 = sub_2F6A18(&v37, v38);
      if (!(v17 >> 31)) {
        *(_DWORD *)(a4 + 8) = 10 * v17;
      }
    }
    else
    {
      sub_30DC4C((uint64_t)&v37);
    }
  }
  signed int v19 = *(_DWORD *)a4;
  if (*(_DWORD *)a4 == 0x7FFFFFFF)
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v35);
      sub_188FC78(v35, (uint64_t)"Invalid start_time parsed in Forecast message.", 46);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 3u);
LABEL_43:
      if (v34 < 0) {
        operator delete(__p[0]);
      }
      if (v36 < 0) {
        operator delete((void *)v35[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      goto LABEL_48;
    }
    goto LABEL_48;
  }
  int v20 = *(_DWORD *)(a4 + 8);
  if (v20 != 0x7FFFFFFF)
  {
    LODWORD(v16) = *v9;
    double v21 = (double)v20 * (double)v16;
    if (v21 >= 0.0)
    {
      if (v21 < 4.50359963e15)
      {
        uint64_t v22 = (uint64_t)(v21 + v21) + 1;
LABEL_32:
        double v21 = (double)(v22 >> 1);
      }
    }
    else if (v21 > -4.50359963e15)
    {
      uint64_t v22 = (uint64_t)(v21 + v21);
      if (v22 >= 1) {
        --v22;
      }
      goto LABEL_32;
    }
    if ((int)v21 < 0) {
      char v23 = -5;
    }
    else {
      char v23 = 5;
    }
    signed int v24 = (int)v21 / 10
        + v19
        + (((103 * (char)(v23 + (int)v21 % 10)) >> 15) & 1)
        + ((103 * (char)(v23 + (int)v21 % 10)) >> 10);
    *(_DWORD *)(a4 + 4) = v24;
    if (v24 != 0x7FFFFFFF && v24 >= v19)
    {
      sub_35AD18(a1, a2, a3, a4);
      return;
    }
    if (!sub_723EC(3u)) {
      goto LABEL_48;
    }
    sub_6BAC((uint64_t)v35);
    unint64_t v26 = sub_188FC78(v35, (uint64_t)"Invalid forecast end time based on start_time (", 47);
    size_t v27 = (void *)sub_266E4((uint64_t)v26);
    uint64_t v28 = sub_188FC78(v27, (uint64_t)") and duration (", 16);
    std::ostream::operator<<();
    sub_188FC78(v28, (uint64_t)").", 2);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 3u);
    goto LABEL_43;
  }
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)v35);
    sub_188FC78(v35, (uint64_t)"Invalid duration_seconds parsed in Forecast message.", 52);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 3u);
    goto LABEL_43;
  }
LABEL_48:
  *(_OWORD *)a4 = xmmword_20E2120;
  unsigned int v30 = (void *)(a4 + 16);
  unint64_t v29 = *(void **)(a4 + 16);
  if (v29)
  {
    *(void *)(a4 + 24) = v29;
    operator delete(v29);
    *unsigned int v30 = 0;
    *(void *)(a4 + 24) = 0;
    *(void *)(a4 + 32) = 0;
  }
  uint64_t v32 = (void *)(a4 + 40);
  char v31 = *(void **)(a4 + 40);
  *unsigned int v30 = 0;
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = 0;
  if (v31)
  {
    *(void *)(a4 + 48) = v31;
    operator delete(v31);
    void *v32 = 0;
    *(void *)(a4 + 48) = 0;
    *(void *)(a4 + 56) = 0;
  }
  void *v32 = 0;
  *(void *)(a4 + 48) = 0;
  *(void *)(a4 + 56) = 0;
}

void sub_35ABE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_2FC938(v15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_2FC938(v15);
  _Unwind_Resume(a1);
}

void sub_35AC78(_Unwind_Exception *a1)
{
  sub_2FC938(v1);
  _Unwind_Resume(a1);
}

void sub_35AC8C(_Unwind_Exception *a1)
{
  sub_2FC938(v1);
  _Unwind_Resume(a1);
}

void sub_35ACA0(_Unwind_Exception *a1)
{
  sub_2FC938(v1);
  _Unwind_Resume(a1);
}

void sub_35ACB4(_Unwind_Exception *a1)
{
  sub_2FC938(v1);
  _Unwind_Resume(a1);
}

void sub_35ACC8(_Unwind_Exception *a1)
{
  sub_2FC938(v1);
  _Unwind_Resume(a1);
}

void sub_35ACDC(_Unwind_Exception *a1)
{
  sub_2FC938(v1);
  _Unwind_Resume(a1);
}

void sub_35ACF0(_Unwind_Exception *a1)
{
  sub_2FC938(v1);
  _Unwind_Resume(a1);
}

void sub_35AD04(_Unwind_Exception *a1)
{
  sub_2FC938(v1);
  _Unwind_Resume(a1);
}

void sub_35AD18(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  sub_725D0((uint64_t)v241);
  sub_725D0((uint64_t)v240);
  *((_DWORD *)a1 + 12) = *(_DWORD *)(a4 + 12);
  uint64_t v8 = *a2 + a2[1];
  *(void *)&long long v222 = *a2;
  *((void *)&v222 + 1) = v8;
  uint64_t v223 = 0x2C700000000;
  if (!sub_2F333C((uint64_t)&v222)) {
    goto LABEL_11;
  }
  while (v223 != 8)
  {
    sub_2F3548((uint64_t)&v222);
    if (!sub_2F333C((uint64_t)&v222)) {
      goto LABEL_11;
    }
  }
  *(void *)&long long v248 = sub_2F3488((char **)&v222);
  *((void *)&v248 + 1) = v248 + v9;
  uint64_t v249 = 0x2C700000000;
  if (!sub_2F333C((uint64_t)&v248)) {
    goto LABEL_11;
  }
  while (v249 != 3)
  {
    sub_2F3548((uint64_t)&v248);
    if (!sub_2F333C((uint64_t)&v248)) {
      goto LABEL_11;
    }
  }
  v245 = sub_2F3488((char **)&v248);
  uint64_t v246 = &v245[v10];
  uint64_t v247 = 0x2C700000000;
  if (sub_2F333C((uint64_t)&v245))
  {
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    do
    {
      if (v247 == 2)
      {
        unsigned int v11 = sub_2F36C8(&v245, v246);
      }
      else if (v247 == 1)
      {
        unsigned int v12 = sub_2F36C8(&v245, v246);
      }
      else
      {
        sub_2F3548((uint64_t)&v245);
      }
    }
    while (sub_2F333C((uint64_t)&v245));
  }
  else
  {
LABEL_11:
    unsigned int v12 = 0;
    unsigned int v11 = 0;
  }
  sub_35CC64(a1, v12, v11, a3, (void *)a4);
  a1[2] = (unint64_t)sub_72688((uint64_t)v240);
  sub_725A0((uint64_t)v240);
  v238 = 0;
  uint64_t v237 = 0;
  int64_t v239 = 0;
  unsigned int v205 = v11;
  unsigned int v206 = v12;
  int v13 = *(_DWORD *)(a4 + 12);
  int v216 = v11 * v12;
  uint64_t v14 = v13 * v11 * v12;
  if (v14)
  {
    uint64_t v237 = operator new(v13 * v11 * v12);
    v238 = v237;
    int64_t v239 = (char *)v237 + v14;
  }
  uint64_t v15 = (char *)(*a2 + a2[1]);
  v234 = (char *)*a2;
  uint64_t v235 = v15;
  uint64_t v236 = 0x2C700000000;
  uint64_t v203 = a4 + 16;
  uint64_t v204 = a1;
LABEL_15:
  if (!sub_2F333C((uint64_t)&v234))
  {
LABEL_50:
    a1[3] = (unint64_t)sub_72688((uint64_t)v240);
    sub_725A0((uint64_t)v240);
    signed int v24 = *(unsigned char **)(a4 + 40);
    long long v25 = *(unsigned int **)(a4 + 16);
    uint64_t v207 = *(unsigned int **)(a4 + 24);
    size_t v26 = (char *)v207 - (char *)v25;
    uint64_t v215 = (void *)(a4 + 40);
    if (*(void *)(a4 + 56) - (void)v24 >= (unint64_t)((char *)v207 - (char *)v25))
    {
      unsigned int v34 = v206;
      goto LABEL_90;
    }
    if ((v26 & 0x8000000000000000) != 0) {
      sub_2E00();
    }
    size_t v27 = *(unsigned int **)(a4 + 16);
    uint64_t v28 = *(unsigned char **)(a4 + 48);
    unint64_t v29 = operator new(v26);
    unsigned int v30 = &v29[v26];
    unint64_t v31 = v28 - v24;
    uint64_t v32 = &v29[v28 - v24];
    unint64_t v33 = v32;
    unsigned int v34 = v206;
    if (v28 == v24)
    {
LABEL_88:
      *(void *)(a4 + 40) = v33;
      *(void *)(a4 + 48) = v32;
      *(void *)(a4 + 56) = v30;
      long long v25 = v27;
      if (v24)
      {
        operator delete(v24);
        long long v25 = *(unsigned int **)(a4 + 16);
        uint64_t v207 = *(unsigned int **)(a4 + 24);
      }
LABEL_90:
      if (v25 != v207)
      {
        double v53 = (double)v34;
        uint64_t v208 = a4;
        while (1)
        {
          v25[1] = *(_DWORD *)(a4 + 48) - *(_DWORD *)(a4 + 40);
          unsigned int v54 = sub_511FC(*v25);
          unsigned int v55 = sub_511FC(*v25);
          unsigned int v56 = *v25 & ~(-1 << (v55 & 0xFE));
          int v57 = sub_51938(v56);
          int v58 = sub_51938(v56 >> 1);
          v214 = v25;
          unsigned int v59 = 0x7FFFFFFFu >> (v54 >> 1);
          int v60 = 1 << -(v55 >> 1);
          if (v55 < 2) {
            int v60 = -2;
          }
          unsigned int v61 = v59 + v57 * v60;
          unsigned int v62 = v59 + v58 * v60;
          if (v62 >= 0xFFFFFFFE) {
            unsigned int v62 = -2;
          }
          unsigned int v63 = ((double)v61 / 4294967300.0 * v53);
          BOOL v64 = v34 == v63;
          long double v65 = exp((double)v62 * -6.28318531 / 4294967300.0 + 3.14159265);
          double v66 = atan((v65 + -1.0 / v65) * 0.5);
          uint64_t v217 = *(unsigned int *)(a4 + 12);
          if (v217) {
            break;
          }
LABEL_92:
          long long v25 = v214 + 2;
          unsigned int v34 = v206;
          if (v214 + 2 == v207) {
            goto LABEL_195;
          }
        }
        uint64_t v67 = 0;
        unsigned __int8 v68 = 0;
        unsigned int v69 = 0;
        uint64_t v218 = ((v66 * -57.2957795 + 90.0) / 180.0 * (double)v205) + (v63 - v64) * v205;
        while (1)
        {
          while (1)
          {
            int v71 = *((char *)v237 + (v216 * v67) + v218);
            if ((*((unsigned char *)v237 + (v216 * v67) + v218) - 61) <= 0x68u && sub_723EC(1u))
            {
              *(void *)&long long v222 = v212;
              *(void *)((char *)&v222 + *(void *)(v212 - 24)) = v213;
              unsigned int v72 = (std::ios_base *)((char *)&v222 + *(void *)(v222 - 24));
              std::ios_base::init(v72, (char *)&v222 + 8);
              v72[1].__vftable = 0;
              v72[1].__fmtflags_ = -1;
              std::streambuf::basic_streambuf();
              long long __p = 0u;
              long long v225 = 0u;
              int v226 = 16;
              sub_188FC78(&v222, (uint64_t)"Weather forecast data contains a temperature (", 46);
              uint64_t v73 = (void *)std::ostream::operator<<();
              sub_188FC78(v73, (uint64_t)" C) that is outside of the temperature range typically found on Earth [-90, 60].", 80);
              std::stringbuf::str();
              sub_7246C((uint64_t *)&v248, 1u);
              if (SHIBYTE(v249) < 0) {
                operator delete((void *)v248);
              }
              *(void *)&long long v222 = v210;
              *(void *)((char *)&v222 + *(void *)(v210 - 24)) = v211;
              if (SBYTE7(v225) < 0) {
                operator delete((void *)__p);
              }
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              std::ios::~ios();
            }
            unsigned int v74 = v71 ^ 0xFFFFFF80;
            if (!v67) {
              break;
            }
            if (v69 != v74 || v68 > 6u)
            {
              int v76 = (char)(v74 - v69);
              if (v76 >= 0) {
                LOBYTE(v77) = v74 - v69;
              }
              else {
                int v77 = -v76;
              }
              if (v77 >= 0x10u)
              {
                if (sub_723EC(1u))
                {
                  *(void *)&long long v222 = v212;
                  *(void *)((char *)&v222 + *(void *)(v212 - 24)) = v213;
                  unint64_t v78 = (std::ios_base *)((char *)&v222 + *(void *)(v222 - 24));
                  std::ios_base::init(v78, (char *)&v222 + 8);
                  v78[1].__vftable = 0;
                  v78[1].__fmtflags_ = -1;
                  std::streambuf::basic_streambuf();
                  int v209 = (char)(v74 - v69);
                  long long __p = 0u;
                  long long v225 = 0u;
                  int v226 = 16;
                  int64_t v79 = sub_188FC78(&v222, (uint64_t)"Temperature difference at ", 26);
                  LODWORD(v78) = sub_511FC(*v214);
                  unsigned int v80 = sub_511FC(*v214);
                  unsigned int v81 = *v214 & ~(-1 << (v80 & 0xFE));
                  int v82 = sub_51938(v81);
                  int v83 = sub_51938(v81 >> 1);
                  unsigned int v85 = 0x7FFFFFFFu >> (v78 >> 1);
                  int v86 = 1 << -(v80 >> 1);
                  if (v80 < 2) {
                    int v86 = -2;
                  }
                  uint64_t v87 = v85 + v82 * v86;
                  LODWORD(v88) = v85 + v83 * v86;
                  if (v88 >= 0xFFFFFFFE) {
                    uint64_t v88 = 4294967294;
                  }
                  else {
                    uint64_t v88 = v88;
                  }
                  *(void *)&long long v248 = v87 | (v88 << 32);
                  DWORD2(v248) = 0x7FFFFFFF;
                  uint64_t v89 = sub_36644(v79, (uint64_t)&v248, v84);
                  sub_188FC78(v89, (uint64_t)" (lookup_idx: ", 14);
                  BOOL v90 = (void *)std::ostream::operator<<();
                  sub_188FC78(v90, (uint64_t)") between previous (", 20);
                  __darwin_ct_rune_t v91 = (void *)std::ostream::operator<<();
                  sub_188FC78(v91, (uint64_t)" C) and current (", 17);
                  __darwin_ct_rune_t v92 = (void *)std::ostream::operator<<();
                  __darwin_ct_rune_t v93 = sub_188FC78(v92, (uint64_t)" C)", 3);
                  sub_188FC78(v93, (uint64_t)" at forecast_hour ", 18);
                  BOOL v94 = (void *)std::ostream::operator<<();
                  sub_188FC78(v94, (uint64_t)" exceeds the maximum supported 15 Kelvin.", 41);
                  std::stringbuf::str();
                  sub_7246C((uint64_t *)&v248, 1u);
                  a4 = v208;
                  int v76 = v209;
                  if (SHIBYTE(v249) < 0) {
                    operator delete((void *)v248);
                  }
                  *(void *)&long long v222 = v210;
                  *(void *)((char *)&v222 + *(void *)(v210 - 24)) = v211;
                  if (SBYTE7(v225) < 0) {
                    operator delete((void *)__p);
                  }
                  std::streambuf::~streambuf();
                  std::ostream::~ostream();
                  std::ios::~ios();
                }
                if (v76 < 0) {
                  int v95 = -15;
                }
                else {
                  int v95 = 15;
                }
                unsigned int v74 = v95 + v69;
              }
              char v96 = sub_35E640();
              char v97 = v96;
              uint64_t v99 = *(unsigned char **)(a4 + 48);
              unint64_t v98 = *(void *)(a4 + 56);
              if ((unint64_t)v99 < v98)
              {
                *uint64_t v99 = v96;
                uint64_t v70 = (uint64_t)(v99 + 1);
LABEL_168:
                unsigned __int8 v68 = 0;
                goto LABEL_100;
              }
              uint64_t v110 = (unsigned char *)*v215;
              unint64_t v111 = (unint64_t)&v99[-*v215];
              unint64_t v112 = v111 + 1;
              if ((uint64_t)(v111 + 1) < 0) {
                sub_2E00();
              }
              unint64_t v113 = v98 - (void)v110;
              if (2 * v113 > v112) {
                unint64_t v112 = 2 * v113;
              }
              if (v113 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v114 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v114 = v112;
              }
              if (v114)
              {
                uint64_t v115 = operator new(v114);
                uint64_t v116 = &v115[v111];
                v115[v111] = v97;
                uint64_t v70 = (uint64_t)&v115[v111 + 1];
                if (v99 != v110)
                {
LABEL_158:
                  if (v111 >= 8 && (unint64_t)(v110 - v115) >= 0x20)
                  {
                    if (v111 >= 0x20)
                    {
                      unint64_t v117 = v111 & 0xFFFFFFFFFFFFFFE0;
                      uint64_t v126 = &v115[v111 - 16];
                      unint64_t v127 = (long long *)(v99 - 16);
                      unint64_t v128 = v111 & 0xFFFFFFFFFFFFFFE0;
                      do
                      {
                        long long v129 = *v127;
                        *(v126 - 1) = *(v127 - 1);
                        *uint64_t v126 = v129;
                        v126 -= 2;
                        v127 -= 2;
                        v128 -= 32;
                      }
                      while (v128);
                      if (v111 == v117) {
                        goto LABEL_193;
                      }
                      if ((v111 & 0x18) != 0) {
                        goto LABEL_181;
                      }
                      v116 -= v117;
                      v99 -= v117;
                    }
                    else
                    {
                      unint64_t v117 = 0;
LABEL_181:
                      v116 -= v111 & 0xFFFFFFFFFFFFFFF8;
                      long long v130 = &v115[&v99[-v117] - v110 - 8];
                      long long v131 = (uint64_t *)&v99[-v117 - 8];
                      unint64_t v132 = v117 - (v111 & 0xFFFFFFFFFFFFFFF8);
                      do
                      {
                        uint64_t v133 = *v131--;
                        *v130-- = v133;
                        v132 += 8;
                      }
                      while (v132);
                      v99 -= v111 & 0xFFFFFFFFFFFFFFF8;
                      if (v111 == (v111 & 0xFFFFFFFFFFFFFFF8))
                      {
LABEL_193:
                        uint64_t v99 = (unsigned char *)*v215;
                        *(void *)(a4 + 40) = v115;
                        *(void *)(a4 + 48) = v70;
                        *(void *)(a4 + 56) = &v115[v114];
                        if (!v99) {
                          goto LABEL_168;
                        }
                        goto LABEL_167;
                      }
                    }
                  }
                  v136 = v116 - 1;
                  do
                  {
                    char v137 = *--v99;
                    *v136-- = v137;
                  }
                  while (v99 != v110);
                  goto LABEL_193;
                }
              }
              else
              {
                uint64_t v115 = 0;
                uint64_t v116 = &v99[-*v215];
                *(unsigned char *)unint64_t v111 = v97;
                uint64_t v70 = v111 + 1;
                if (v99 != v110) {
                  goto LABEL_158;
                }
              }
              *(void *)(a4 + 40) = v116;
              *(void *)(a4 + 48) = v70;
              *(void *)(a4 + 56) = &v115[v114];
              if (!v99) {
                goto LABEL_168;
              }
LABEL_167:
              operator delete(v99);
              goto LABEL_168;
            }
            ++v68;
            if (++v67 == v217) {
              goto LABEL_92;
            }
          }
          uint64_t v101 = *(unsigned char **)(a4 + 48);
          unint64_t v100 = *(void *)(a4 + 56);
          if ((unint64_t)v101 < v100)
          {
            *uint64_t v101 = v74;
            uint64_t v70 = (uint64_t)(v101 + 1);
            goto LABEL_100;
          }
          unint64_t v102 = (unsigned char *)*v215;
          unint64_t v103 = (unint64_t)&v101[-*v215];
          unint64_t v104 = v103 + 1;
          if ((uint64_t)(v103 + 1) < 0) {
            sub_2E00();
          }
          unint64_t v105 = v100 - (void)v102;
          if (2 * v105 > v104) {
            unint64_t v104 = 2 * v105;
          }
          if (v105 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v106 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v106 = v104;
          }
          if (v106)
          {
            uint64_t v107 = operator new(v106);
            unsigned int v108 = &v107[v103];
            v107[v103] = v74;
            uint64_t v70 = (uint64_t)&v107[v103 + 1];
            if (v101 == v102) {
              goto LABEL_163;
            }
          }
          else
          {
            uint64_t v107 = 0;
            unsigned int v108 = &v101[-*v215];
            *(unsigned char *)unint64_t v103 = v74;
            uint64_t v70 = v103 + 1;
            if (v101 == v102)
            {
LABEL_163:
              *(void *)(a4 + 40) = v108;
              *(void *)(a4 + 48) = v70;
              *(void *)(a4 + 56) = &v107[v106];
              if (!v101) {
                goto LABEL_100;
              }
LABEL_189:
              operator delete(v101);
              goto LABEL_100;
            }
          }
          if (v103 < 8 || (unint64_t)(v102 - v107) < 0x20) {
            goto LABEL_186;
          }
          if (v103 >= 0x20)
          {
            unint64_t v109 = v103 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v118 = &v107[v103 - 16];
            unsigned int v119 = (long long *)(v101 - 16);
            unint64_t v120 = v103 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v121 = *v119;
              *(v118 - 1) = *(v119 - 1);
              *uint64_t v118 = v121;
              v118 -= 2;
              v119 -= 2;
              v120 -= 32;
            }
            while (v120);
            if (v103 == v109) {
              goto LABEL_188;
            }
            if ((v103 & 0x18) == 0)
            {
              v108 -= v109;
              v101 -= v109;
LABEL_186:
              v134 = v108 - 1;
              do
              {
                char v135 = *--v101;
                *v134-- = v135;
              }
              while (v101 != v102);
              goto LABEL_188;
            }
          }
          else
          {
            unint64_t v109 = 0;
          }
          v108 -= v103 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v122 = &v107[&v101[-v109] - v102 - 8];
          uint64_t v123 = (uint64_t *)&v101[-v109 - 8];
          unint64_t v124 = v109 - (v103 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v125 = *v123--;
            *v122-- = v125;
            v124 += 8;
          }
          while (v124);
          v101 -= v103 & 0xFFFFFFFFFFFFFFF8;
          if (v103 != (v103 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_186;
          }
LABEL_188:
          uint64_t v101 = (unsigned char *)*v215;
          *(void *)(a4 + 40) = v107;
          *(void *)(a4 + 48) = v70;
          *(void *)(a4 + 56) = &v107[v106];
          if (v101) {
            goto LABEL_189;
          }
LABEL_100:
          *(void *)(a4 + 48) = v70;
          ++v67;
          unsigned int v69 = v74;
          if (v67 == v217) {
            goto LABEL_92;
          }
        }
      }
LABEL_195:
      sub_35D2D0(v203);
      v138 = *(unsigned char **)(a4 + 48);
      v139 = *(unsigned char **)(a4 + 40);
      unint64_t v140 = v138 - v139;
      if (*(void *)(a4 + 56) - (void)v139 <= (unint64_t)(v138 - v139))
      {
LABEL_216:
        v204[5] = *(void *)(a4 + 32) + *(void *)(a4 + 56) - (*(void *)(a4 + 16) + *(void *)(a4 + 40)) + 64;
        v204[4] = (unint64_t)sub_72688((uint64_t)v240);
        v204[1] = (unint64_t)sub_72688((uint64_t)v241);
        int32x4_t v155 = v237;
        if (!v237) {
          return;
        }
        goto LABEL_217;
      }
      if (v138 == v139)
      {
        int v142 = (char *)(v138 - v139);
        v141 = (unsigned char *)(v138 - v139);
LABEL_214:
        *(void *)(a4 + 40) = v141;
        *(void *)(a4 + 48) = v142;
        *(void *)(a4 + 56) = v142;
        if (v139) {
          operator delete(v139);
        }
        goto LABEL_216;
      }
      v141 = operator new(v138 - v139);
      int v142 = &v141[v140];
      if (v140 < 8)
      {
        int v143 = &v141[v140];
        goto LABEL_212;
      }
      int v143 = &v141[v140];
      if ((unint64_t)(v139 - v141) >= 0x20)
      {
        if (v140 < 0x20)
        {
          unint64_t v144 = 0;
          goto LABEL_207;
        }
        unint64_t v144 = v140 & 0xFFFFFFFFFFFFFFE0;
        int v145 = (long long *)(v138 - 16);
        int v146 = &v141[v138 - 16 - v139];
        unint64_t v147 = v140 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v148 = *v145;
          *(v146 - 1) = *(v145 - 1);
          *int v146 = v148;
          v146 -= 2;
          v145 -= 2;
          v147 -= 32;
        }
        while (v147);
        if (v140 == v144) {
          goto LABEL_214;
        }
        if ((v140 & 0x18) != 0)
        {
LABEL_207:
          int v143 = &v142[-(v140 & 0xFFFFFFFFFFFFFFF8)];
          int32x4_t v149 = &v138[-v144 - 8];
          int64_t v150 = v149 - v139;
          unint64_t v151 = v144 - (v140 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v152 = *(void *)v149;
            v149 -= 8;
            *(void *)&v141[v150] = v152;
            v150 -= 8;
            v151 += 8;
          }
          while (v151);
          v138 -= v140 & 0xFFFFFFFFFFFFFFF8;
          if (v140 == (v140 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_214;
          }
          goto LABEL_212;
        }
        int v143 = &v142[-v144];
        v138 -= v144;
      }
LABEL_212:
      int32x4_t v153 = v143 - 1;
      do
      {
        char v154 = *--v138;
        *v153-- = v154;
      }
      while (v138 != v139);
      goto LABEL_214;
    }
    if (v31 < 8)
    {
      BOOL v35 = &v29[v28 - v24];
      goto LABEL_85;
    }
    BOOL v35 = &v29[v28 - v24];
    if ((unint64_t)(v24 - v29) >= 0x20)
    {
      if (v31 < 0x20)
      {
        unint64_t v36 = 0;
        goto LABEL_69;
      }
      unint64_t v36 = v31 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v37 = (long long *)(v28 - 16);
      unint64_t v38 = &v29[v28 - 16 - v24];
      unint64_t v39 = v31 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v40 = *v37;
        *(v38 - 1) = *(v37 - 1);
        *unint64_t v38 = v40;
        v38 -= 2;
        v37 -= 2;
        v39 -= 32;
      }
      while (v39);
      if (v31 == v36) {
        goto LABEL_87;
      }
      if ((v31 & 0x18) != 0)
      {
LABEL_69:
        BOOL v35 = &v32[-(v31 & 0xFFFFFFFFFFFFFFF8)];
        uint64_t v41 = &v28[-v36 - 8];
        int64_t v42 = v41 - v24;
        unint64_t v43 = v36 - (v31 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v44 = *(void *)v41;
          v41 -= 8;
          *(void *)&v29[v42] = v44;
          v42 -= 8;
          v43 += 8;
        }
        while (v43);
        v28 -= v31 & 0xFFFFFFFFFFFFFFF8;
        if (v31 == (v31 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_87;
        }
        goto LABEL_85;
      }
      BOOL v35 = &v32[-v36];
      v28 -= v36;
    }
LABEL_85:
    unsigned int v51 = v35 - 1;
    do
    {
      char v52 = *--v28;
      *v51-- = v52;
    }
    while (v28 != v24);
LABEL_87:
    unint64_t v33 = v29;
    goto LABEL_88;
  }
  while (v236 != 8)
  {
    switch(HIDWORD(v236))
    {
      case 0:
        sub_2F3C98((uint64_t *)&v234, (uint64_t)v235);
        break;
      case 1:
        v234 += 8;
        if (v234 > v235)
        {
          exception = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(&v222, "Skipping over bytes exceeded message length.");
          v174 = (void *)sub_2F404((uint64_t)exception, &v222);
        }
        return;
      case 2:
        unsigned int v16 = sub_2F36C8(&v234, v235);
        sub_2F3DCC((unint64_t *)&v234, v16);
        break;
      case 5:
        v234 += 4;
        if (v234 > v235)
        {
          v171 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(&v222, "Skipping over bytes exceeded message length.");
          unint64_t v172 = (void *)sub_2F404((uint64_t)v171, &v222);
        }
        return;
      default:
        v169 = __cxa_allocate_exception(0x40uLL);
        sub_5E5C(&v222, "Unknown wire type.");
        int64_t v170 = (void *)sub_2F404((uint64_t)v169, &v222);
    }
    if (!sub_2F333C((uint64_t)&v234)) {
      goto LABEL_50;
    }
  }
  uint64_t v231 = sub_2F3488(&v234);
  unint64_t v232 = &v231[v17];
  uint64_t v233 = 0x2C700000000;
  while (1)
  {
    if (!sub_30DA40((uint64_t)&v231)) {
      goto LABEL_15;
    }
    while (v233 != 3)
    {
      switch(HIDWORD(v233))
      {
        case 0:
          sub_2F3C98((uint64_t *)&v231, (uint64_t)v232);
          break;
        case 1:
          v231 += 8;
          if (v231 > v232)
          {
            long long v177 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(&v222, "Skipping over bytes exceeded message length.");
            v178 = (void *)sub_2F404((uint64_t)v177, &v222);
          }
          return;
        case 2:
          unsigned int v18 = sub_2F36C8(&v231, v232);
          sub_3128D8((unint64_t *)&v231, v18);
          break;
        case 5:
          v231 += 4;
          if (v231 > v232)
          {
            uint64_t v179 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(&v222, "Skipping over bytes exceeded message length.");
            v180 = (void *)sub_2F404((uint64_t)v179, &v222);
          }
          return;
        default:
          uint64_t v175 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(&v222, "Unknown wire type.");
          uint64_t v176 = (void *)sub_2F404((uint64_t)v175, &v222);
      }
      if (!sub_30DA40((uint64_t)&v231)) {
        goto LABEL_15;
      }
    }
    int v19 = sub_2F36C8(&v231, v232);
    int v20 = v231;
    double v21 = &v231[v19];
    uint64_t v231 = v21;
    if (v21 > v232)
    {
      uint64_t v187 = __cxa_allocate_exception(0x40uLL);
      sub_5E5C(&v222, "Sub-message length of field exceeded past the end of the message.");
      unint64_t v188 = (void *)sub_2F404((uint64_t)v187, &v222);
    }
    int64_t v228 = v20;
    uint64_t v229 = v21;
    uint64_t v230 = 0x2C700000000;
    if (sub_30DA40((uint64_t)&v228))
    {
      while (v230 != 3)
      {
        switch(HIDWORD(v230))
        {
          case 0:
            sub_2F3C98((uint64_t *)&v228, (uint64_t)v229);
            break;
          case 1:
            v228 += 8;
            if (v228 > v229)
            {
              uint64_t v185 = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(&v222, "Skipping over bytes exceeded message length.");
              unint64_t v186 = (void *)sub_2F404((uint64_t)v185, &v222);
            }
            return;
          case 2:
            unsigned int v22 = sub_2F36C8(&v228, v229);
            sub_3128D8((unint64_t *)&v228, v22);
            break;
          case 5:
            v228 += 4;
            if (v228 > v229)
            {
              v181 = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(&v222, "Skipping over bytes exceeded message length.");
              uint64_t v182 = (void *)sub_2F404((uint64_t)v181, &v222);
            }
            return;
          default:
            v183 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(&v222, "Unknown wire type.");
            int64_t v184 = (void *)sub_2F404((uint64_t)v183, &v222);
        }
        if (!sub_30DA40((uint64_t)&v228)) {
          goto LABEL_49;
        }
      }
      unsigned int v23 = sub_2F36C8(&v228, v229);
      v228 += v23;
      if (v228 > v229)
      {
        v189 = __cxa_allocate_exception(0x40uLL);
        sub_5E5C(&v222, "Sub-message length of field exceeded past the end of the message.");
        v190 = (void *)sub_2F404((uint64_t)v189, &v222);
      }
      if ((sub_35E640() & 1) == 0) {
        break;
      }
    }
LABEL_49:
    a1 = v204;
  }
  if (sub_723EC(3u))
  {
    *(void *)&long long v222 = v212;
    *(void *)((char *)&v222 + *(void *)(v212 - 24)) = v213;
    long long v45 = (std::ios_base *)((char *)&v222 + *(void *)(v222 - 24));
    std::ios_base::init(v45, (char *)&v222 + 8);
    v45[1].__vftable = 0;
    v45[1].__fmtflags_ = -1;
    std::streambuf::basic_streambuf();
    long long __p = 0u;
    long long v225 = 0u;
    int v226 = 16;
    sub_188FC78(&v222, (uint64_t)"Could not parse the temperature data. Data length: ", 51);
    uint64_t v46 = (void *)std::ostream::operator<<();
    unint64_t v47 = sub_188FC78(v46, (uint64_t)", snapshot_id=\"", 15);
    int64_t v48 = (char *)(*a2 + a2[1]);
    v245 = (char *)*a2;
    uint64_t v246 = v48;
    uint64_t v247 = 0x2C700000000;
    uint64_t v49 = v211;
    if (!sub_2F333C((uint64_t)&v245)) {
      goto LABEL_228;
    }
    while (v247 != 1)
    {
      switch(HIDWORD(v247))
      {
        case 0:
          sub_2F3C98((uint64_t *)&v245, (uint64_t)v246);
          break;
        case 1:
          v245 += 8;
          if (v245 > v246)
          {
            uint64_t v193 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(&v248, "Skipping over bytes exceeded message length.");
            v194 = (void *)sub_2F404((uint64_t)v193, &v248);
          }
          return;
        case 2:
          unsigned int v50 = sub_2F36C8(&v245, v246);
          sub_2F3DCC((unint64_t *)&v245, v50);
          break;
        case 5:
          v245 += 4;
          if (v245 > v246)
          {
            uint64_t v191 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(&v248, "Skipping over bytes exceeded message length.");
            v192 = (void *)sub_2F404((uint64_t)v191, &v248);
          }
          return;
        default:
          int64_t v195 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(&v248, "Unknown wire type.");
          uint64_t v196 = (void *)sub_2F404((uint64_t)v195, &v248);
      }
      if (!sub_2F333C((uint64_t)&v245)) {
        goto LABEL_228;
      }
    }
    uint64_t v242 = sub_2F3488(&v245);
    unint64_t v243 = &v242[v156];
    uint64_t v244 = 0x2C700000000;
    uint64_t v49 = v211;
    if (!sub_30DA40((uint64_t)&v242))
    {
LABEL_228:
      unsigned int v158 = 0;
      HIBYTE(v221) = 0;
      LOBYTE(__dst) = 0;
LABEL_229:
      if ((v158 & 0x80u) == 0) {
        p_dst = &__dst;
      }
      else {
        p_dst = __dst;
      }
      if ((v158 & 0x80u) == 0) {
        uint64_t v160 = v158;
      }
      else {
        uint64_t v160 = v220;
      }
      unint64_t v161 = sub_188FC78(v47, (uint64_t)p_dst, v160);
      sub_188FC78(v161, (uint64_t)"\"", 1);
      if (SHIBYTE(v221) < 0) {
        operator delete(__dst);
      }
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v248, 3u);
      if (SHIBYTE(v249) < 0) {
        operator delete((void *)v248);
      }
      *(void *)&long long v222 = v210;
      *(void *)((char *)&v222 + *(void *)(v210 - 24)) = v49;
      if (SBYTE7(v225) < 0) {
        operator delete((void *)__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      goto LABEL_242;
    }
    while (v244 != 6)
    {
      switch(HIDWORD(v244))
      {
        case 0:
          sub_2F3C98((uint64_t *)&v242, (uint64_t)v243);
          break;
        case 1:
          v242 += 8;
          if (v242 > v243)
          {
            unint64_t v199 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(&v248, "Skipping over bytes exceeded message length.");
            v200 = (void *)sub_2F404((uint64_t)v199, &v248);
          }
          return;
        case 2:
          unsigned int v157 = sub_2F36C8(&v242, v243);
          sub_3128D8((unint64_t *)&v242, v157);
          break;
        case 5:
          v242 += 4;
          if (v242 > v243)
          {
            unint64_t v197 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(&v248, "Skipping over bytes exceeded message length.");
            uint64_t v198 = (void *)sub_2F404((uint64_t)v197, &v248);
          }
          return;
        default:
          v201 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(&v248, "Unknown wire type.");
          uint64_t v202 = (void *)sub_2F404((uint64_t)v201, &v248);
      }
      if (!sub_30DA40((uint64_t)&v242)) {
        goto LABEL_228;
      }
    }
    uint64_t v162 = sub_30DB8C(&v242);
    size_t v164 = v163;
    if (v163 >= 0x7FFFFFFFFFFFFFF8) {
      sub_188D690();
    }
    uint64_t v165 = v162;
    if (v163 >= 0x17)
    {
      uint64_t v167 = (v163 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v163 | 7) != 0x17) {
        uint64_t v167 = v163 | 7;
      }
      uint64_t v168 = v167 + 1;
      long long v166 = operator new(v167 + 1);
      size_t v220 = v164;
      unint64_t v221 = v168 | 0x8000000000000000;
      long long __dst = v166;
    }
    else
    {
      HIBYTE(v221) = v163;
      long long v166 = &__dst;
      if (!v163) {
        goto LABEL_252;
      }
    }
    memmove(v166, v165, v164);
LABEL_252:
    uint64_t v49 = v211;
    *((unsigned char *)v166 + v164) = 0;
    unsigned int v158 = HIBYTE(v221);
    goto LABEL_229;
  }
LABEL_242:
  *(void *)(a4 + 24) = *(void *)(a4 + 16);
  *(_DWORD *)a4 = 0x7FFFFFFF;
  int32x4_t v155 = v237;
  if (v237)
  {
LABEL_217:
    v238 = v155;
    operator delete(v155);
  }
}

void sub_35C9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34)
{
  sub_111ECAC((uint64_t)&a34);
  BOOL v35 = (void *)STACK[0x218];
  if (STACK[0x218])
  {
    STACK[0x220] = (unint64_t)v35;
    operator delete(v35);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

__n128 sub_35CC4C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void sub_35CC64(uint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  if (a2 <= a3) {
    unint64_t v8 = a3;
  }
  else {
    unint64_t v8 = a2;
  }
  unsigned int v9 = vcvtpd_u64_f64(log2((double)v8));
  uint64_t v10 = *(unsigned int **)(a4 + 16);
  if (v10 == *(unsigned int **)(a4 + 24) || v9 != sub_511FC(*v10) >> 1)
  {
    sub_725D0((uint64_t)v93);
    sub_2ABAA8(*a1);
    int v19 = (unsigned int *)v91;
    if (v91 == v92) {
      goto LABEL_89;
    }
    unsigned int v20 = sub_511FC(*(_DWORD *)v91) >> 1;
    if (v20 >= v9) {
      char v21 = v9;
    }
    else {
      char v21 = v20;
    }
    *(_OWORD *)uint64_t v88 = 0u;
    *(_OWORD *)long long __p = 0u;
    float v90 = 1.0;
    float v22 = (float)((unint64_t)(((char *)v92 - (unsigned char *)v91) >> 2) >> 3);
    size_t prime = (unint64_t)v22;
    if ((unint64_t)v22 == 1)
    {
      size_t prime = 2;
    }
    else
    {
      if ((prime & ((unint64_t)v22 - 1)) != 0)
      {
        size_t prime = std::__next_prime((unint64_t)v22);
        signed int v24 = v88[1];
        BOOL v25 = (void *)prime >= v88[1];
        if ((void *)prime > v88[1]) {
          goto LABEL_36;
        }
      }
      else
      {
        signed int v24 = 0;
        BOOL v25 = 1;
        if (prime) {
          goto LABEL_36;
        }
      }
      if (v25) {
        goto LABEL_37;
      }
      unint64_t v26 = vcvtps_u32_f32((float)(unint64_t)__p[1] / v90);
      if ((unint64_t)v24 < 3
        || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v24), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime >= (unint64_t)v24)
      {
LABEL_37:
        unsigned int v30 = (unsigned int *)v91;
        unint64_t v31 = v92;
        if (v91 != v92)
        {
          char v32 = 2 * v21;
          do
          {
            unsigned int v87 = *v30 >> ((sub_511FC(*v30) - v32) & 0xFE);
            sub_35D41C((uint64_t)v88, &v87, &v87);
            ++v30;
          }
          while (v30 != v31);
        }
        unint64_t v33 = a5 + 2;
        unsigned int v34 = (unsigned char *)a5[2];
        BOOL v35 = __p[1];
        if (__p[1] <= (void *)((uint64_t)(a5[4] - (void)v34) >> 3)) {
          goto LABEL_52;
        }
        if ((unint64_t)__p[1] >> 61) {
          sub_2E00();
        }
        unint64_t v36 = (unsigned char *)a5[3];
        uint64_t v37 = (char *)operator new(8 * (uint64_t)__p[1]);
        uint64_t v38 = v36 - v34;
        unint64_t v39 = &v37[(v36 - v34) & 0xFFFFFFFFFFFFFFF8];
        long long v40 = v39;
        if (v36 != v34)
        {
          if ((unint64_t)(v38 - 8) < 0x58)
          {
            long long v40 = &v37[(v36 - v34) & 0xFFFFFFFFFFFFFFF8];
            do
            {
LABEL_49:
              uint64_t v49 = *((void *)v36 - 1);
              v36 -= 8;
              *((void *)v40 - 1) = v49;
              v40 -= 8;
            }
            while (v36 != v34);
            goto LABEL_50;
          }
          long long v40 = &v37[(v36 - v34) & 0xFFFFFFFFFFFFFFF8];
          if ((unint64_t)(v36 - &v37[v38 & 0xFFFFFFFFFFFFFFF8]) < 0x20) {
            goto LABEL_49;
          }
          uint64_t v41 = v38 >> 3;
          unint64_t v42 = ((unint64_t)(v38 - 8) >> 3) + 1;
          uint64_t v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v44 = &v36[-v43];
          long long v40 = &v39[-v43];
          long long v45 = &v37[8 * v41 - 16];
          uint64_t v46 = (long long *)(v36 - 16);
          uint64_t v47 = v42 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v48 = *v46;
            *((_OWORD *)v45 - 1) = *(v46 - 1);
            *(_OWORD *)long long v45 = v48;
            v45 -= 32;
            v46 -= 2;
            v47 -= 4;
          }
          while (v47);
          unint64_t v36 = v44;
          if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_49;
          }
        }
LABEL_50:
        a5[2] = v40;
        a5[3] = v39;
        a5[4] = &v37[8 * (void)v35];
        if (v34) {
          operator delete(v34);
        }
LABEL_52:
        unsigned int v50 = (void **)__p[0];
        unsigned int v51 = (int8x16_t *)a5[3];
        if (__p[0])
        {
          do
          {
            unint64_t v52 = a5[4];
            if ((unint64_t)v51 < v52)
            {
              v51->i64[0] = *((unsigned int *)v50 + 4);
              unsigned int v51 = (int8x16_t *)((char *)v51 + 8);
            }
            else
            {
              double v53 = (int8x16_t *)*v33;
              uint64_t v54 = (uint64_t)v51->i64 - *v33;
              uint64_t v55 = v54 >> 3;
              unint64_t v56 = (v54 >> 3) + 1;
              if (v56 >> 61) {
                sub_2E00();
              }
              uint64_t v57 = v52 - (void)v53;
              if (v57 >> 2 > v56) {
                unint64_t v56 = v57 >> 2;
              }
              if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v58 = v56;
              }
              if (v58 >> 61) {
                sub_188D718();
              }
              unsigned int v59 = operator new(8 * v58);
              int v60 = &v59[8 * v55];
              *int v60 = *((unsigned int *)v50 + 4);
              if (v51 != v53)
              {
                unint64_t v61 = (char *)&v51[-1].u64[1] - (char *)v53;
                if (v61 < 0x168
                  || (&v59[v54 - 8 - (v61 & 0xFFFFFFFFFFFFFFF8)] <= &v59[v54 - 8]
                    ? (BOOL v62 = (unint64_t *)((char *)&v51[-1].u64[1] - (v61 & 0xFFFFFFFFFFFFFFF8)) > &v51[-1].u64[1])
                    : (BOOL v62 = 1),
                      v62 || (unint64_t)((char *)v51 - v54 - v59) < 0x20))
                {
                  unsigned int v63 = v51;
                  BOOL v64 = &v59[8 * v55];
                  goto LABEL_72;
                }
                uint64_t v66 = (v61 >> 3) + 1;
                uint64_t v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
                unsigned int v63 = (int8x16_t *)((char *)v51 - v67);
                BOOL v64 = (char *)&v60[v67 / 0xFFFFFFFFFFFFFFF8];
                unsigned __int8 v68 = (int8x16_t *)&v59[8 * v55 - 16];
                unsigned int v69 = v51 - 1;
                uint64_t v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  int8x16_t v71 = *v69;
                  v68[-1] = v69[-1];
                  *unsigned __int8 v68 = v71;
                  v68 -= 2;
                  v69 -= 2;
                  v70 -= 4;
                }
                while (v70);
                if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_72:
                    uint64_t v65 = v63[-1].i64[1];
                    unsigned int v63 = (int8x16_t *)((char *)v63 - 8);
                    *((void *)v64 - 1) = v65;
                    v64 -= 8;
                  }
                  while (v63 != v53);
                }
                unsigned int v51 = (int8x16_t *)(v60 + 1);
                a5[2] = v64;
                a5[3] = v60 + 1;
                a5[4] = &v59[8 * v58];
                if (!v53) {
                  goto LABEL_55;
                }
LABEL_76:
                operator delete(v53);
                goto LABEL_55;
              }
              unsigned int v51 = (int8x16_t *)(v60 + 1);
              a5[2] = v60;
              a5[3] = v60 + 1;
              a5[4] = &v59[8 * v58];
              if (v53) {
                goto LABEL_76;
              }
            }
LABEL_55:
            a5[3] = v51;
            unsigned int v50 = (void **)*v50;
          }
          while (v50);
        }
        unint64_t v72 = 126 - 2 * __clz((uint64_t)((uint64_t)v51->i64 - *v33) >> 3);
        if (v51 == (int8x16_t *)*v33) {
          uint64_t v73 = 0;
        }
        else {
          uint64_t v73 = v72;
        }
        sub_35D720(*v33, v51, v73, 1);
        unsigned int v74 = __p[0];
        if (__p[0])
        {
          do
          {
            uint64_t v75 = (void *)*v74;
            operator delete(v74);
            unsigned int v74 = v75;
          }
          while (v75);
        }
        int v76 = v88[0];
        v88[0] = 0;
        if (v76) {
          operator delete(v76);
        }
        int v19 = (unsigned int *)v91;
LABEL_89:
        if (v19)
        {
          __darwin_ct_rune_t v92 = v19;
          operator delete(v19);
        }
        return;
      }
    }
LABEL_36:
    sub_B6C0((uint64_t)v88, prime);
    goto LABEL_37;
  }
  if (a5 != (void *)a4) {
    sub_326C0(a5 + 2, *(char **)(a4 + 16), *(char **)(a4 + 24), (uint64_t)(*(void *)(a4 + 24) - *(void *)(a4 + 16)) >> 3);
  }
  unsigned int v11 = (unsigned char *)a5[5];
  size_t v12 = *(void *)(a4 + 48) - *(void *)(a4 + 40);
  if (a5[7] - (void)v11 < v12)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      sub_2E00();
    }
    int v13 = (unsigned char *)a5[6];
    uint64_t v14 = operator new(v12);
    unint64_t v15 = v13 - v11;
    unsigned int v16 = &v14[v13 - v11];
    uint64_t v17 = v16;
    if (v13 == v11) {
      goto LABEL_104;
    }
    if (v15 < 8)
    {
      unsigned int v18 = &v14[v13 - v11];
      goto LABEL_101;
    }
    unsigned int v18 = &v14[v13 - v11];
    if ((unint64_t)(v11 - v14) >= 0x20)
    {
      if (v15 < 0x20)
      {
        unint64_t v29 = 0;
        goto LABEL_96;
      }
      unint64_t v29 = v15 & 0xFFFFFFFFFFFFFFE0;
      int v77 = (long long *)(v13 - 16);
      unint64_t v78 = &v14[v13 - 16 - v11];
      unint64_t v79 = v15 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v80 = *v77;
        *(v78 - 1) = *(v77 - 1);
        *unint64_t v78 = v80;
        v78 -= 2;
        v77 -= 2;
        v79 -= 32;
      }
      while (v79);
      if (v15 == v29) {
        goto LABEL_103;
      }
      if ((v15 & 0x18) != 0)
      {
LABEL_96:
        unsigned int v18 = &v16[-(v15 & 0xFFFFFFFFFFFFFFF8)];
        unsigned int v81 = &v13[-v29 - 8];
        int64_t v82 = v81 - v11;
        unint64_t v83 = v29 - (v15 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v84 = *(void *)v81;
          v81 -= 8;
          *(void *)&v14[v82] = v84;
          v82 -= 8;
          v83 += 8;
        }
        while (v83);
        v13 -= v15 & 0xFFFFFFFFFFFFFFF8;
        if (v15 == (v15 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_103;
        }
        goto LABEL_101;
      }
      unsigned int v18 = &v16[-v29];
      v13 -= v29;
    }
LABEL_101:
    unsigned int v85 = v18 - 1;
    do
    {
      char v86 = *--v13;
      *v85-- = v86;
    }
    while (v13 != v11);
LABEL_103:
    uint64_t v17 = v14;
LABEL_104:
    a5[5] = v17;
    a5[6] = v16;
    a5[7] = &v14[v12];
    if (v11)
    {
      operator delete(v11);
    }
  }
}

void sub_35D298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_35D2D0(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)(a1 + 8);
  long long v2 = *(unsigned char **)a1;
  uint64_t v3 = (uint64_t)&v1[-*(void *)a1];
  uint64_t v4 = v3 >> 3;
  if (v3 >> 3 >= (unint64_t)((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3)) {
    return;
  }
  int64_t v6 = v1 - v2;
  if (v1 == v2)
  {
    *(void *)a1 = 8 * v4;
    *(void *)(a1 + 8) = 8 * v4;
    *(void *)(a1 + 16) = 8 * v4;
    if (!v2) {
      return;
    }
    goto LABEL_14;
  }
  if (v3 < 0) {
    sub_188D718();
  }
  uint64_t v7 = (char *)operator new((size_t)&v1[-*(void *)a1]);
  unint64_t v8 = &v7[8 * v4];
  if ((unint64_t)(v6 - 8) < 0x58)
  {
    unsigned int v9 = &v7[8 * v4];
    do
    {
LABEL_12:
      uint64_t v17 = *((void *)v1 - 1);
      v1 -= 8;
      *((void *)v9 - 1) = v17;
      v9 -= 8;
    }
    while (v1 != v2);
    goto LABEL_13;
  }
  unsigned int v9 = &v7[8 * v4];
  if ((unint64_t)(&v1[-v3] - v7) < 0x20) {
    goto LABEL_12;
  }
  unint64_t v10 = ((unint64_t)(v6 - 8) >> 3) + 1;
  uint64_t v11 = 8 * (v10 & 0x3FFFFFFFFFFFFFFCLL);
  size_t v12 = &v1[-v11];
  unsigned int v9 = &v8[-v11];
  int v13 = &v7[8 * v4 - 16];
  uint64_t v14 = (long long *)(v1 - 16);
  uint64_t v15 = v10 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v16 = *v14;
    *((_OWORD *)v13 - 1) = *(v14 - 1);
    *(_OWORD *)int v13 = v16;
    v13 -= 32;
    v14 -= 2;
    v15 -= 4;
  }
  while (v15);
  uint64_t v1 = v12;
  if (v10 != (v10 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_12;
  }
LABEL_13:
  long long v2 = *(unsigned char **)a1;
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v8;
  if (!v2) {
    return;
  }
LABEL_14:

  operator delete(v2);
}

uint64_t *sub_35D41C(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unsigned int v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == v6) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            unint64_t v10 = (uint64_t *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  uint64_t v14 = operator new(0x18uLL);
  *uint64_t v14 = 0;
  v14[1] = v6;
  *((_DWORD *)v14 + 4) = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    unint64_t v6 = v3;
  }
  else
  {
    BOOL v17 = 1;
    if (v7 >= 3) {
      BOOL v17 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v7);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_36;
    }
    if (prime < v7)
    {
      unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        unint64_t v21 = std::__next_prime(v21);
      }
      else
      {
        uint64_t v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2) {
          unint64_t v21 = v23;
        }
      }
      if (prime <= v21) {
        size_t prime = v21;
      }
      if (prime < v7) {
LABEL_36:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        v6 %= v7;
      }
    }
    else
    {
      unint64_t v6 = (v7 - 1) & v6;
    }
  }
  uint64_t v24 = *(void *)a1;
  BOOL v25 = *(void **)(*(void *)a1 + 8 * v6);
  if (v25)
  {
    *uint64_t v14 = *v25;
LABEL_59:
    *BOOL v25 = v14;
    goto LABEL_60;
  }
  *uint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v24 + 8 * v6) = a1 + 16;
  if (*v14)
  {
    unint64_t v26 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7) {
        v26 %= v7;
      }
    }
    else
    {
      v26 &= v7 - 1;
    }
    BOOL v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_35D70C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_35D720(unint64_t result, int8x16_t *a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
LABEL_2:
  unint64_t v10 = (int8x16_t *)v9;
  while (1)
  {
    unint64_t v9 = (unint64_t)v10;
    uint64_t v11 = (char *)a2 - (char *)v10;
    uint64_t v12 = ((char *)a2 - (char *)v10) >> 3;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0:
        case 1:
          return result;
        case 2:
          if (a2[-1].i32[2] >= (unsigned __int32)v10->i32[0]) {
            return result;
          }
          uint64_t v73 = v10->i64[0];
          goto LABEL_107;
        case 3:
          unsigned __int32 v74 = v10->u32[2];
          unsigned __int32 v75 = a2[-1].u32[2];
          if (v74 < v10->i32[0])
          {
            uint64_t v73 = v10->i64[0];
            if (v75 >= v74)
            {
              v10->i64[0] = v10->i64[1];
              v10->i64[1] = v73;
              if (a2[-1].i32[2] >= v73) {
                return result;
              }
              v10->i64[1] = a2[-1].i64[1];
            }
            else
            {
LABEL_107:
              v10->i64[0] = a2[-1].i64[1];
            }
            a2[-1].i64[1] = v73;
            return result;
          }
          if (v75 < v74)
          {
            uint64_t v116 = v10->i64[1];
            v10->i64[1] = a2[-1].i64[1];
            a2[-1].i64[1] = v116;
            if (v10->i32[2] < (unsigned __int32)v10->i32[0]) {
              *unint64_t v10 = vextq_s8(*v10, *v10, 8uLL);
            }
          }
          break;
        case 4:
          unsigned int v76 = v10->u32[2];
          unsigned int v77 = v10->i32[0];
          LODWORD(v78) = v10[1].i32[0];
          if (v76 >= v10->i32[0])
          {
            if (v78 < v76)
            {
              uint64_t v78 = v10->i64[1];
              uint64_t v117 = v10[1].i64[0];
              v10->i64[1] = v117;
              v10[1].i64[0] = v78;
              if (v77 > v117)
              {
                uint64_t v118 = v10->i64[0];
                v10->i64[0] = v117;
                v10->i64[1] = v118;
              }
            }
          }
          else
          {
            uint64_t v79 = v10->i64[0];
            if (v78 >= v76)
            {
              v10->i64[0] = v10->i64[1];
              v10->i64[1] = v79;
              if (v78 >= v79) {
                goto LABEL_190;
              }
              v10->i64[1] = v10[1].i64[0];
            }
            else
            {
              v10->i64[0] = v10[1].i64[0];
            }
            v10[1].i64[0] = v79;
            LODWORD(v78) = v79;
          }
LABEL_190:
          if (a2[-1].i32[2] < v78)
          {
            uint64_t v124 = v10[1].i64[0];
            v10[1].i64[0] = a2[-1].i64[1];
            a2[-1].i64[1] = v124;
            if (v10[1].i32[0] < (unsigned __int32)v10->i32[2])
            {
              uint64_t v126 = v10->i64[1];
              uint64_t v125 = v10[1].i64[0];
              v10->i64[1] = v125;
              v10[1].i64[0] = v126;
              if (v10->i32[0] > v125)
              {
                uint64_t v127 = v10->i64[0];
                v10->i64[0] = v125;
                v10->i64[1] = v127;
              }
            }
          }
          return result;
        case 5:
          return (unint64_t)sub_35E18C(v10->i64, &v10->u32[2], (unsigned int *)&v10[1], &v10[1].i64[1], &a2[-1].i64[1]);
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v10 == a2) {
        return result;
      }
      int64_t v91 = (unint64_t)(v12 - 2) >> 1;
      int64_t v92 = v91;
      while (1)
      {
        if (v91 >= v92)
        {
          uint64_t v94 = (2 * v92) | 1;
          int v95 = &v10->i32[2 * v94];
          if (2 * v92 + 2 >= v12)
          {
            unint64_t v98 = &v10->i32[2 * v92];
            if (*v95 >= *v98) {
              goto LABEL_146;
            }
          }
          else
          {
            unsigned __int32 v96 = *v95;
            unsigned int v97 = v95[2];
            if (*v95 <= v97) {
              unsigned __int32 v96 = v95[2];
            }
            if (*v95 < v97)
            {
              v95 += 2;
              uint64_t v94 = 2 * v92 + 2;
            }
            unint64_t v98 = &v10->i32[2 * v92];
            if (v96 >= *v98)
            {
LABEL_146:
              uint64_t v99 = *(void *)v98;
              while (1)
              {
                unint64_t v102 = v98;
                unint64_t v98 = v95;
                *(void *)unint64_t v102 = *(void *)v95;
                if (v91 < v94) {
                  break;
                }
                uint64_t v103 = (2 * v94) | 1;
                int v95 = &v10->i32[2 * v103];
                uint64_t v94 = 2 * v94 + 2;
                if (v94 < v12)
                {
                  unsigned int v100 = *v95;
                  __n128 result = (unint64_t)(v95 + 2);
                  unsigned int v101 = v95[2];
                  if (*v95 <= v101) {
                    unsigned int v100 = v95[2];
                  }
                  if (*v95 >= v101) {
                    uint64_t v94 = v103;
                  }
                  else {
                    v95 += 2;
                  }
                  if (v100 < v99) {
                    break;
                  }
                }
                else
                {
                  uint64_t v94 = v103;
                  if (*v95 < v99) {
                    break;
                  }
                }
              }
              *(void *)unint64_t v98 = v99;
            }
          }
        }
        BOOL v93 = v92-- <= 0;
        if (v93)
        {
          uint64_t v104 = (unint64_t)v11 >> 3;
          do
          {
            uint64_t v105 = 0;
            uint64_t v106 = v10->i64[0];
            uint64_t v107 = (uint64_t *)v10;
            do
            {
              unsigned int v108 = (int8x16_t *)&v107[v105 + 1];
              uint64_t v109 = (2 * v105) | 1;
              uint64_t v110 = 2 * v105 + 2;
              if (v110 < v104 && v108->i32[0] < (unsigned __int32)v108->i32[2])
              {
                unsigned int v108 = (int8x16_t *)((char *)v108 + 8);
                uint64_t v109 = v110;
              }
              *uint64_t v107 = v108->i64[0];
              uint64_t v107 = (uint64_t *)v108;
              uint64_t v105 = v109;
            }
            while (v109 <= (uint64_t)((unint64_t)(v104 - 2) >> 1));
            a2 = (int8x16_t *)((char *)a2 - 8);
            if (v108 == a2)
            {
              v108->i64[0] = v106;
            }
            else
            {
              v108->i64[0] = a2->i64[0];
              a2->i64[0] = v106;
              uint64_t v111 = (char *)v108 - (char *)v10 + 8;
              if (v111 >= 9)
              {
                unint64_t v112 = (((unint64_t)v111 >> 3) - 2) >> 1;
                unint64_t v113 = &v10->i64[v112];
                if (*(_DWORD *)v113 < v108->i32[0])
                {
                  uint64_t v114 = v108->i64[0];
                  do
                  {
                    uint64_t v115 = (uint64_t *)v108;
                    unsigned int v108 = (int8x16_t *)v113;
                    *uint64_t v115 = *v113;
                    if (!v112) {
                      break;
                    }
                    unint64_t v112 = (v112 - 1) >> 1;
                    unint64_t v113 = &v10->i64[v112];
                  }
                  while (*(_DWORD *)v113 < v114);
                  v108->i64[0] = v114;
                }
              }
            }
            BOOL v93 = v104-- <= 2;
          }
          while (!v93);
          return result;
        }
      }
    }
    unint64_t v13 = (unint64_t)v12 >> 1;
    uint64_t v14 = &v10->i32[2 * ((unint64_t)v12 >> 1)];
    unsigned __int32 v15 = a2[-1].u32[2];
    if ((unint64_t)v11 < 0x401)
    {
      unsigned __int32 v18 = v10->i32[0];
      if (v10->i32[0] >= *v14)
      {
        if (v15 >= v18) {
          goto LABEL_33;
        }
        uint64_t v22 = v10->i64[0];
        v10->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v22;
        if (v10->i32[0] >= *v14) {
          goto LABEL_33;
        }
        uint64_t v23 = *(void *)v14;
        *(void *)uint64_t v14 = v10->i64[0];
        v10->i64[0] = v23;
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_58;
        }
        goto LABEL_34;
      }
      uint64_t v19 = *(void *)v14;
      if (v15 >= v18)
      {
        *(void *)uint64_t v14 = v10->i64[0];
        v10->i64[0] = v19;
        if (a2[-1].i32[2] >= v19) {
          goto LABEL_33;
        }
        v10->i64[0] = a2[-1].i64[1];
      }
      else
      {
        *(void *)uint64_t v14 = a2[-1].i64[1];
      }
      a2[-1].i64[1] = v19;
LABEL_33:
      --a3;
      if ((a4 & 1) == 0) {
        goto LABEL_58;
      }
      goto LABEL_34;
    }
    unsigned __int32 v16 = *v14;
    if (*v14 >= v10->i32[0])
    {
      if (v15 < v16)
      {
        uint64_t v20 = *(void *)v14;
        *(void *)uint64_t v14 = a2[-1].i64[1];
        a2[-1].i64[1] = v20;
        if (*v14 < v10->i32[0])
        {
          uint64_t v21 = v10->i64[0];
          v10->i64[0] = *(void *)v14;
          *(void *)uint64_t v14 = v21;
        }
      }
    }
    else
    {
      uint64_t v17 = v10->i64[0];
      if (v15 >= v16)
      {
        v10->i64[0] = *(void *)v14;
        *(void *)uint64_t v14 = v17;
        if (a2[-1].i32[2] >= v17) {
          goto LABEL_24;
        }
        *(void *)uint64_t v14 = a2[-1].i64[1];
      }
      else
      {
        v10->i64[0] = a2[-1].i64[1];
      }
      a2[-1].i64[1] = v17;
    }
LABEL_24:
    uint64_t v24 = &v10->i8[8 * v13];
    unsigned __int32 v27 = *((_DWORD *)v24 - 2);
    BOOL v25 = (uint64_t *)(v24 - 8);
    unsigned __int32 v26 = v27;
    unsigned __int32 v28 = a2[-1].u32[0];
    if (v27 >= v10->i32[2])
    {
      if (v28 < v26)
      {
        uint64_t v30 = *v25;
        *BOOL v25 = a2[-1].i64[0];
        a2[-1].i64[0] = v30;
        if (*(_DWORD *)v25 < v10->i32[2])
        {
          uint64_t v31 = v10->i64[1];
          v10->i64[1] = *v25;
          *BOOL v25 = v31;
        }
      }
    }
    else
    {
      uint64_t v29 = v10->i64[1];
      if (v28 >= v26)
      {
        v10->i64[1] = *v25;
        *BOOL v25 = v29;
        if (a2[-1].i32[0] >= v29) {
          goto LABEL_38;
        }
        *BOOL v25 = a2[-1].i64[0];
      }
      else
      {
        v10->i64[1] = a2[-1].i64[0];
      }
      a2[-1].i64[0] = v29;
    }
LABEL_38:
    unint64_t v33 = &v10->i8[8 * v13];
    unsigned __int32 v36 = *((_DWORD *)v33 + 2);
    unsigned int v34 = (uint64_t *)(v33 + 8);
    unsigned __int32 v35 = v36;
    unsigned __int32 v37 = a2[-2].u32[2];
    if (v36 >= v10[1].i32[0])
    {
      if (v37 < v35)
      {
        uint64_t v39 = *v34;
        uint64_t *v34 = a2[-2].i64[1];
        a2[-2].i64[1] = v39;
        if (*(_DWORD *)v34 < v10[1].i32[0])
        {
          uint64_t v40 = v10[1].i64[0];
          v10[1].i64[0] = *v34;
          uint64_t *v34 = v40;
        }
      }
    }
    else
    {
      uint64_t v38 = v10[1].i64[0];
      if (v37 >= v35)
      {
        v10[1].i64[0] = *v34;
        uint64_t *v34 = v38;
        if (a2[-2].i32[2] >= v38) {
          goto LABEL_47;
        }
        uint64_t *v34 = a2[-2].i64[1];
      }
      else
      {
        v10[1].i64[0] = a2[-2].i64[1];
      }
      a2[-2].i64[1] = v38;
    }
LABEL_47:
    unsigned int v41 = *v14;
    unsigned int v42 = *(_DWORD *)v25;
    unsigned int v43 = *(_DWORD *)v34;
    if (*v14 >= *(_DWORD *)v25)
    {
      uint64_t v44 = *(void *)v14;
      if (v43 >= v41) {
        goto LABEL_57;
      }
      uint64_t v46 = *v34;
      *(void *)uint64_t v14 = *v34;
      uint64_t *v34 = v44;
      if (v42 <= v46)
      {
        uint64_t v64 = v10->i64[0];
        v10->i64[0] = v46;
        *(void *)uint64_t v14 = v64;
        --a3;
        if (a4) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v47 = *v25;
        *BOOL v25 = v46;
        *(void *)uint64_t v14 = v47;
        uint64_t v48 = v10->i64[0];
        v10->i64[0] = v47;
        *(void *)uint64_t v14 = v48;
        --a3;
        if (a4) {
          goto LABEL_34;
        }
      }
LABEL_58:
      uint64_t v32 = v10->i64[0];
      if (v10[-1].i32[2] < (unsigned __int32)v10->i32[0]) {
        goto LABEL_59;
      }
      if (a2[-1].i32[2] > v32)
      {
        do
        {
          unsigned int v65 = v10->u32[2];
          unint64_t v10 = (int8x16_t *)((char *)v10 + 8);
        }
        while (v65 <= v32);
      }
      else
      {
        uint64_t v66 = (int8x16_t *)&v10->u64[1];
        do
        {
          unint64_t v10 = v66;
          if (v66 >= a2) {
            break;
          }
          uint64_t v66 = (int8x16_t *)((char *)v66 + 8);
        }
        while (v10->i32[0] <= v32);
      }
      uint64_t v67 = a2;
      if (v10 < a2)
      {
        uint64_t v67 = a2;
        do
        {
          unsigned int v68 = v67[-1].u32[2];
          uint64_t v67 = (int8x16_t *)((char *)v67 - 8);
        }
        while (v68 > v32);
      }
      while (v10 < v67)
      {
        uint64_t v69 = v10->i64[0];
        v10->i64[0] = v67->i64[0];
        v67->i64[0] = v69;
        do
        {
          unsigned int v70 = v10->u32[2];
          unint64_t v10 = (int8x16_t *)((char *)v10 + 8);
        }
        while (v70 <= v32);
        do
        {
          unsigned int v71 = v67[-1].u32[2];
          uint64_t v67 = (int8x16_t *)((char *)v67 - 8);
        }
        while (v71 > v32);
      }
      unint64_t v72 = &v10[-1].i64[1];
      BOOL v4 = (unint64_t)&v10[-1].u64[1] >= v9;
      BOOL v5 = &v10[-1].u64[1] == (unint64_t *)v9;
      if (&v10[-1].u64[1] != (unint64_t *)v9) {
        *(void *)unint64_t v9 = *v72;
      }
      a4 = 0;
      *unint64_t v72 = v32;
    }
    else
    {
      uint64_t v44 = *v25;
      if (v43 >= v41)
      {
        *BOOL v25 = *(void *)v14;
        *(void *)uint64_t v14 = v44;
        if (v43 < v44)
        {
          uint64_t v49 = *v34;
          *(void *)uint64_t v14 = *v34;
          uint64_t *v34 = v44;
          uint64_t v44 = v49;
        }
LABEL_57:
        uint64_t v50 = v10->i64[0];
        v10->i64[0] = v44;
        *(void *)uint64_t v14 = v50;
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_58;
        }
        goto LABEL_34;
      }
      *BOOL v25 = *v34;
      uint64_t *v34 = v44;
      uint64_t v45 = v10->i64[0];
      v10->i64[0] = *(void *)v14;
      *(void *)uint64_t v14 = v45;
      --a3;
      if ((a4 & 1) == 0) {
        goto LABEL_58;
      }
LABEL_34:
      uint64_t v32 = v10->i64[0];
LABEL_59:
      uint64_t v51 = 0;
      do
      {
        unsigned int v52 = v10->u32[v51 + 2];
        v51 += 2;
      }
      while (v52 < v32);
      double v53 = &v10->i8[v51 * 4];
      uint64_t v54 = a2;
      if (v51 == 2)
      {
        uint64_t v54 = a2;
        do
        {
          if (v53 >= (char *)v54) {
            break;
          }
          unsigned int v56 = v54[-1].u32[2];
          uint64_t v54 = (int8x16_t *)((char *)v54 - 8);
        }
        while (v56 >= v32);
      }
      else
      {
        do
        {
          unsigned int v55 = v54[-1].u32[2];
          uint64_t v54 = (int8x16_t *)((char *)v54 - 8);
        }
        while (v55 >= v32);
      }
      if (v53 >= (char *)v54)
      {
        BOOL v62 = v53 - 8;
        if (v53 - 8 == (char *)v10) {
          goto LABEL_77;
        }
LABEL_76:
        v10->i64[0] = *(void *)v62;
        goto LABEL_77;
      }
      uint64_t v57 = &v10->i8[v51 * 4];
      unint64_t v58 = (char *)v54;
      do
      {
        uint64_t v59 = *(void *)v57;
        *(void *)uint64_t v57 = *(void *)v58;
        *(void *)unint64_t v58 = v59;
        do
        {
          unsigned int v60 = *((_DWORD *)v57 + 2);
          v57 += 8;
        }
        while (v60 < v32);
        do
        {
          unsigned int v61 = *((_DWORD *)v58 - 2);
          v58 -= 8;
        }
        while (v61 >= v32);
      }
      while (v57 < v58);
      BOOL v62 = v57 - 8;
      if (v57 - 8 != (char *)v10) {
        goto LABEL_76;
      }
LABEL_77:
      *(void *)BOOL v62 = v32;
      if (v53 < (char *)v54) {
        goto LABEL_80;
      }
      BOOL v63 = sub_35E300(v10, (int8x16_t *)v62);
      unint64_t v10 = (int8x16_t *)(v62 + 8);
      __n128 result = sub_35E300((int8x16_t *)(v62 + 8), a2);
      if (result)
      {
        a2 = (int8x16_t *)v62;
        if (v63) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v63)
      {
LABEL_80:
        __n128 result = sub_35D720(v9, v62, a3, a4 & 1);
        a4 = 0;
        unint64_t v10 = (int8x16_t *)(v62 + 8);
      }
    }
  }
  long long v80 = (int8x16_t *)&v10->u64[1];
  BOOL v82 = v10 == a2 || v80 == a2;
  if (a4)
  {
    if (v82) {
      return result;
    }
    uint64_t v83 = 0;
    uint64_t v84 = v10;
    while (1)
    {
      unsigned __int32 v86 = v84->u32[2];
      unsigned __int32 v87 = v84->i32[0];
      uint64_t v84 = v80;
      if (v86 < v87)
      {
        uint64_t v88 = v80->i64[0];
        uint64_t v89 = v83;
        do
        {
          *(uint64_t *)((char *)&v10->i64[1] + v89) = *(uint64_t *)((char *)v10->i64 + v89);
          if (!v89)
          {
            unsigned int v85 = (uint64_t *)v10;
            goto LABEL_125;
          }
          unsigned int v90 = *(unsigned __int32 *)((char *)&v10->u32[-2] + v89);
          v89 -= 8;
        }
        while (v90 > v88);
        unsigned int v85 = (uint64_t *)((char *)&v10->i64[1] + v89);
LABEL_125:
        *unsigned int v85 = v88;
      }
      long long v80 = (int8x16_t *)&v84->u64[1];
      v83 += 8;
      if (&v84->u64[1] == (unint64_t *)a2) {
        return result;
      }
    }
  }
  if (!v82)
  {
    do
    {
      unsigned int v119 = *(_DWORD *)(v9 + 8);
      unsigned int v120 = *(_DWORD *)v9;
      unint64_t v9 = (unint64_t)v80;
      if (v119 < v120)
      {
        uint64_t v121 = v80->i64[0];
        do
        {
          uint64_t v122 = (uint64_t *)v80;
          uint64_t v123 = v80[-1].i64[1];
          long long v80 = (int8x16_t *)((char *)v80 - 8);
          *uint64_t v122 = v123;
        }
        while (*((_DWORD *)v122 - 4) > v121);
        v80->i64[0] = v121;
      }
      long long v80 = (int8x16_t *)(v9 + 8);
    }
    while ((int8x16_t *)(v9 + 8) != a2);
  }
  return result;
}

uint64_t *sub_35E18C(uint64_t *result, unsigned int *a2, unsigned int *a3, void *a4, void *a5)
{
  unsigned int v5 = *a2;
  LODWORD(v6) = *a3;
  if (*a2 >= *(_DWORD *)result)
  {
    if (v6 < v5)
    {
      uint64_t v6 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v6;
      if (*a2 < *(_DWORD *)result)
      {
        uint64_t v6 = *result;
        *__n128 result = *(void *)a2;
        *(void *)a2 = v6;
        LODWORD(v6) = *a3;
      }
    }
  }
  else
  {
    uint64_t v7 = *result;
    if (v6 < v5)
    {
      *__n128 result = *(void *)a3;
LABEL_9:
      *(void *)a3 = v7;
      LODWORD(v6) = v7;
      goto LABEL_10;
    }
    *__n128 result = *(void *)a2;
    *(void *)a2 = v7;
    LODWORD(v6) = *a3;
    if (*a3 < v7)
    {
      *(void *)a2 = *(void *)a3;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(_DWORD *)a4 < v6)
  {
    uint64_t v8 = *(void *)a3;
    *(void *)a3 = *a4;
    *a4 = v8;
    if (*a3 < *a2)
    {
      uint64_t v9 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v9;
      if (*a2 < *(_DWORD *)result)
      {
        uint64_t v10 = *result;
        *__n128 result = *(void *)a2;
        *(void *)a2 = v10;
      }
    }
  }
  if (*(_DWORD *)a5 < *(_DWORD *)a4)
  {
    uint64_t v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    if (*(_DWORD *)a4 < *a3)
    {
      uint64_t v12 = *(void *)a3;
      *(void *)a3 = *a4;
      *a4 = v12;
      if (*a3 < *a2)
      {
        uint64_t v13 = *(void *)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v13;
        if (*a2 < *(_DWORD *)result)
        {
          uint64_t v14 = *result;
          *__n128 result = *(void *)a2;
          *(void *)a2 = v14;
        }
      }
    }
  }
  return result;
}

BOOL sub_35E300(int8x16_t *a1, int8x16_t *a2)
{
  switch(((char *)a2 - (char *)a1) >> 3)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      if (a2[-1].i32[2] >= (unsigned __int32)a1->i32[0]) {
        return 1;
      }
      uint64_t v8 = a1->i64[0];
      goto LABEL_10;
    case 3:
      unsigned __int32 v9 = a1->u32[2];
      unsigned __int32 v10 = a2[-1].u32[2];
      if (v9 >= a1->i32[0])
      {
        if (v10 < v9)
        {
          uint64_t v18 = a1->i64[1];
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v18;
          if (a1->i32[2] < (unsigned __int32)a1->i32[0])
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
            return 1;
          }
        }
      }
      else
      {
        uint64_t v8 = a1->i64[0];
        if (v10 < v9)
        {
LABEL_10:
          a1->i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v8;
          return 1;
        }
        a1->i64[0] = a1->i64[1];
        a1->i64[1] = v8;
        if (a2[-1].i32[2] < v8)
        {
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v8;
          return 1;
        }
      }
      return 1;
    case 4:
      unsigned int v11 = a1->u32[2];
      unsigned int v12 = a1->i32[0];
      LODWORD(v13) = a1[1].i32[0];
      if (v11 >= a1->i32[0])
      {
        if (v13 < v11)
        {
          uint64_t v13 = a1->i64[1];
          uint64_t v19 = a1[1].i64[0];
          a1->i64[1] = v19;
          a1[1].i64[0] = v13;
          if (v12 > v19)
          {
            uint64_t v20 = a1->i64[0];
            a1->i64[0] = v19;
            a1->i64[1] = v20;
          }
        }
      }
      else
      {
        uint64_t v14 = a1->i64[0];
        if (v13 >= v11)
        {
          a1->i64[0] = a1->i64[1];
          a1->i64[1] = v14;
          if (v13 >= v14) {
            goto LABEL_44;
          }
          a1->i64[1] = a1[1].i64[0];
        }
        else
        {
          a1->i64[0] = a1[1].i64[0];
        }
        a1[1].i64[0] = v14;
        LODWORD(v13) = v14;
      }
LABEL_44:
      if (a2[-1].i32[2] >= v13) {
        return 1;
      }
      uint64_t v27 = a1[1].i64[0];
      a1[1].i64[0] = a2[-1].i64[1];
      a2[-1].i64[1] = v27;
      if (a1[1].i32[0] >= (unsigned __int32)a1->i32[2]) {
        return 1;
      }
      uint64_t v29 = a1->i64[1];
      uint64_t v28 = a1[1].i64[0];
      a1->i64[1] = v28;
      a1[1].i64[0] = v29;
      if (a1->i32[0] <= v28) {
        return 1;
      }
      uint64_t v30 = a1->i64[0];
      a1->i64[0] = v28;
      a1->i64[1] = v30;
      return 1;
    case 5:
      sub_35E18C(a1->i64, &a1->u32[2], (unsigned int *)&a1[1], &a1[1].i64[1], &a2[-1].i64[1]);
      return 1;
    default:
      unint64_t v3 = a1 + 1;
      unsigned int v4 = a1[1].u32[0];
      unsigned int v5 = a1->u32[2];
      unsigned int v6 = a1->i32[0];
      if (v5 >= a1->i32[0])
      {
        if (v4 < v5)
        {
          uint64_t v16 = a1->i64[1];
          uint64_t v15 = a1[1].i64[0];
          a1->i64[1] = v15;
          a1[1].i64[0] = v16;
          if (v6 > v15)
          {
            uint64_t v17 = a1->i64[0];
            a1->i64[0] = v15;
            a1->i64[1] = v17;
          }
        }
      }
      else
      {
        uint64_t v7 = a1->i64[0];
        if (v4 >= v5)
        {
          a1->i64[0] = a1->i64[1];
          a1->i64[1] = v7;
          if (v4 >= v7) {
            goto LABEL_28;
          }
          a1->i64[1] = a1[1].i64[0];
        }
        else
        {
          a1->i64[0] = a1[1].i64[0];
        }
        a1[1].i64[0] = v7;
      }
LABEL_28:
      uint64_t v21 = &a1[1].i32[2];
      if (&a1[1].u64[1] == (unint64_t *)a2) {
        return 1;
      }
      uint64_t v22 = 0;
      int v23 = 0;
      break;
  }
  while (*v21 >= v3->i32[0])
  {
LABEL_37:
    unint64_t v3 = (int8x16_t *)v21;
    v22 += 8;
    v21 += 2;
    if (v21 == (__int32 *)a2) {
      return 1;
    }
  }
  uint64_t v24 = *(void *)v21;
  uint64_t v25 = v22;
  do
  {
    *(uint64_t *)((char *)&a1[1].i64[1] + v25) = *(uint64_t *)((char *)a1[1].i64 + v25);
    if (v25 == -16)
    {
      a1->i64[0] = v24;
      if (++v23 != 8) {
        goto LABEL_37;
      }
      return v21 + 2 == (__int32 *)a2;
    }
    unsigned int v26 = *(unsigned __int32 *)((char *)&a1->u32[2] + v25);
    v25 -= 8;
  }
  while (v26 > v24);
  *(uint64_t *)((char *)&a1[1].i64[1] + v25) = v24;
  if (++v23 != 8) {
    goto LABEL_37;
  }
  return v21 + 2 == (__int32 *)a2;
}

uint64_t sub_35E640()
{
  return 0;
}

uint64_t sub_35E648(unsigned int a1)
{
  int v1 = a1 & 0xF;
  if ((a1 & 0x10) != 0) {
    int v1 = -v1;
  }
  return (a1 >> 5) | (v1 << 8);
}

uint64_t sub_35E660@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 2;
  uint64_t v4 = sub_1133328();
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 32) = v4;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(unsigned char *)(a2 + 24) = *(_DWORD *)(a1 + 56);
  unsigned int v5 = *(uint64_t (****)())(a1 + 48);
  if (!v5) {
    unsigned int v5 = &off_253C8F0;
  }
  std::string::operator=((std::string *)a2, (const std::string *)((unint64_t)v5[5] & 0xFFFFFFFFFFFFFFFELL));
  unsigned int v6 = *(uint64_t (****)())(a1 + 48);
  if (!v6) {
    unsigned int v6 = &off_253C8F0;
  }
  unint64_t v7 = (unint64_t)v6[3] & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v8 = *(unsigned __int8 *)(v7 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(v7 + 8);
  }
  if (!v8)
  {
    uint64_t result = sub_1133208(0);
    goto LABEL_22;
  }
  if (v9 >= 0) {
    unsigned __int32 v10 = (unsigned __int8 *)v7;
  }
  else {
    unsigned __int32 v10 = *(unsigned __int8 **)v7;
  }
  if (v8 >= 0x1F) {
    uint64_t v11 = 31;
  }
  else {
    uint64_t v11 = v8;
  }
  if (v11 == 1)
  {
    uint64_t v12 = *v10;
    uint64_t v13 = 1;
  }
  else
  {
    if (v11 != 2)
    {
      sub_76DEC(v10, v11, (uint64_t)&v32);
      goto LABEL_21;
    }
    uint64_t v12 = *(unsigned __int16 *)v10;
    uint64_t v13 = 2;
  }
  uint64_t v32 = v12;
  uint64_t v33 = v13;
  long long v34 = 0u;
  long long v35 = 0u;
LABEL_21:
  uint64_t result = sub_1133038((uint64_t)&v32, 0);
LABEL_22:
  *(void *)(a2 + 32) = result;
  uint64_t v15 = *(void *)(a1 + 40);
  if (v15) {
    uint64_t v16 = (uint64_t *)(v15 + 8);
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = *(int *)(a1 + 32);
  if (v17)
  {
    for (uint64_t i = 8 * v17; i; i -= 8)
    {
      uint64_t v19 = *v16;
      unint64_t v20 = *(void *)(*v16 + 24) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v21 = *(unsigned __int8 *)(v20 + 23);
      int v22 = (char)v21;
      if ((v21 & 0x80u) != 0) {
        unint64_t v21 = *(void *)(v20 + 8);
      }
      if (!v21)
      {
        uint64_t result = sub_1133208(0);
        goto LABEL_47;
      }
      if (v22 >= 0) {
        int v23 = (unsigned __int8 *)(*(void *)(*v16 + 24) & 0xFFFFFFFFFFFFFFFELL);
      }
      else {
        int v23 = *(unsigned __int8 **)v20;
      }
      if (v21 >= 0x1F) {
        uint64_t v24 = 31;
      }
      else {
        uint64_t v24 = v21;
      }
      if (v24 == 1)
      {
        uint64_t v32 = *v23;
        uint64_t v33 = 1;
      }
      else
      {
        if (v24 != 2)
        {
          sub_76DEC(v23, v24, (uint64_t)&v32);
          goto LABEL_46;
        }
        uint64_t v32 = *(unsigned __int16 *)v23;
        uint64_t v33 = 2;
      }
      long long v34 = 0u;
      long long v35 = 0u;
LABEL_46:
      uint64_t result = sub_1133038((uint64_t)&v32, 0);
LABEL_47:
      uint64_t v31 = result;
      unint64_t v25 = *(void *)(v19 + 40) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v25 + 23) < 0)
      {
        if (*(void *)(v25 + 8))
        {
LABEL_51:
          uint64_t v32 = sub_1133208(0);
          uint64_t result = sub_1132FD0((uint64_t)&v32, (uint64_t)&v31);
          if ((result & 1) == 0)
          {
            uint64_t v30 = sub_1133208(1u);
            uint64_t result = sub_1132FD0((uint64_t)&v30, (uint64_t)&v31);
            if ((result & 1) == 0)
            {
              uint64_t v29 = sub_1133328();
              uint64_t result = sub_1132FD0((uint64_t)&v29, (uint64_t)&v31);
              if ((result & 1) == 0)
              {
                unsigned int v26 = *(uint64_t **)(a2 + 48);
                if ((unint64_t)v26 >= *(void *)(a2 + 56))
                {
                  uint64_t result = (uint64_t)sub_35EAA0((char **)(a2 + 40), &v31, v25);
                }
                else
                {
                  *unsigned int v26 = v31;
                  uint64_t v27 = v26 + 1;
                  if (*(char *)(v25 + 23) < 0)
                  {
                    sub_4200(v27, *(void **)v25, *(void *)(v25 + 8));
                  }
                  else
                  {
                    long long v28 = *(_OWORD *)v25;
                    v26[3] = *(void *)(v25 + 16);
                    *(_OWORD *)uint64_t v27 = v28;
                  }
                  uint64_t result = (uint64_t)(v26 + 4);
                  *(void *)(a2 + 48) = v26 + 4;
                }
                *(void *)(a2 + 48) = result;
              }
            }
          }
        }
      }
      else if (*(unsigned char *)(v25 + 23))
      {
        goto LABEL_51;
      }
      ++v16;
    }
  }
  return result;
}

void sub_35E964(_Unwind_Exception *a1)
{
  *(void *)(v1 + 48) = v2;
  sub_35EA08(v1);
  _Unwind_Resume(a1);
}

void sub_35E97C(_Unwind_Exception *a1)
{
  sub_35EA08(v1);
  _Unwind_Resume(a1);
}

void sub_35E990(_Unwind_Exception *a1)
{
  sub_35EA08(v1);
  _Unwind_Resume(a1);
}

void sub_35E9A4(_Unwind_Exception *a1)
{
  sub_35EA08(v1);
  _Unwind_Resume(a1);
}

void sub_35E9B8(_Unwind_Exception *a1)
{
  sub_35EA08(v1);
  _Unwind_Resume(a1);
}

void sub_35E9CC(_Unwind_Exception *a1)
{
  sub_35EA08(v1);
  _Unwind_Resume(a1);
}

void sub_35E9E0(_Unwind_Exception *a1)
{
  sub_35EA08(v1);
  _Unwind_Resume(a1);
}

void sub_35E9F4(_Unwind_Exception *a1)
{
  sub_35EA08(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_35EA08(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v4 = *(void **)(a1 + 40);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 32;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 40);
    }
    *(void *)(a1 + 48) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_35EAA0(char **a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  unsigned int v5 = a1[1];
  uint64_t v6 = (v5 - *a1) >> 5;
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v7) {
    unint64_t v7 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v7;
  }
  if (v11)
  {
    if (v11 >> 59) {
      sub_188D718();
    }
    uint64_t v12 = (char *)operator new(32 * v11);
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v13 = &v12[32 * v6];
  unint64_t v21 = v13;
  int v22 = v13;
  uint64_t v24 = &v12[32 * v11];
  *(void *)uint64_t v13 = *a2;
  uint64_t v14 = v13 + 8;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v14, *(void **)a3, *(void *)(a3 + 8));
    uint64_t v4 = *a1;
    unsigned int v5 = a1[1];
    uint64_t v13 = v21;
    uint64_t v15 = v22 + 32;
    int v23 = v22 + 32;
    if (v5 == *a1)
    {
LABEL_17:
      uint64_t v18 = v4;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a3;
    *((void *)v13 + 3) = *(void *)(a3 + 16);
    uint64_t v15 = v13 + 32;
    int v23 = v13 + 32;
    if (v5 == v4) {
      goto LABEL_17;
    }
  }
  do
  {
    uint64_t v16 = *((void *)v5 - 4);
    v5 -= 32;
    *((void *)v13 - 4) = v16;
    v13 -= 32;
    long long v17 = *(_OWORD *)(v5 + 8);
    *((void *)v13 + 3) = *((void *)v5 + 3);
    *(_OWORD *)(v13 + 8) = v17;
    *((void *)v5 + 2) = 0;
    *((void *)v5 + 3) = 0;
    *((void *)v5 + 1) = 0;
  }
  while (v5 != v4);
  uint64_t v18 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v15 = v23;
LABEL_18:
  *a1 = v13;
  a1[1] = v15;
  a1[2] = v24;
  if (v4 == v18)
  {
    if (v4) {
LABEL_20:
    }
      operator delete(v4);
  }
  else
  {
    do
    {
      unint64_t v20 = v4 - 32;
      if (*(v4 - 1) < 0) {
        operator delete(*((void **)v4 - 3));
      }
      v4 -= 32;
    }
    while (v20 != v18);
    uint64_t v4 = v18;
    if (v18) {
      goto LABEL_20;
    }
  }
  return v15;
}

void sub_35EC5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_35EC70(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a3;
  sub_36064C(a3);
  int v6 = *(_DWORD *)(a2 + 40);
  uint64_t v149 = v5;
  if ((v6 & 0x80) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Mandatory field muid is not present");
    goto LABEL_400;
  }
  if ((v6 & 0x10000) != 0) {
    uint64_t v7 = *(void *)(a2 + 184);
  }
  else {
    uint64_t v7 = *(void *)(a2 + 128);
  }
  *(void *)uint64_t v5 = *(void *)(a2 + 128);
  *(void *)(v5 + 8) = v7;
  uint64_t v150 = a2;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2557488, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2557488))
  {
    sub_5E5C(&__str, "");
    uint64_t v146 = sub_1133208(1u);
    uint64_t v147 = v146;
    if (__str_16.__r_.__value_.__s.__data_[7] < 0)
    {
      sub_4200(&xmmword_2557490, (void *)__str, *((unint64_t *)&__str + 1));
      LOBYTE(xmmword_25574A8) = 0;
      *((void *)&xmmword_25574A8 + 1) = v147;
      qword_25574B8 = 0;
      qword_25574C0 = 0;
      unk_25574C8 = 0;
      if (__str_16.__r_.__value_.__s.__data_[7] < 0) {
        operator delete((void *)__str);
      }
    }
    else
    {
      xmmword_2557490 = __str;
      unk_25574A0 = __str_16.__r_.__value_.__r.__words[0];
      LOBYTE(xmmword_25574A8) = 0;
      *((void *)&xmmword_25574A8 + 1) = v146;
      qword_25574B8 = 0;
      qword_25574C0 = 0;
      unk_25574C8 = 0;
    }
    __cxa_guard_release(&qword_2557488);
  }
  if (*(unsigned char *)(a2 + 40))
  {
    sub_35E660(*(void *)(a2 + 72), (uint64_t)&__str);
  }
  else
  {
    if (byte_25574A7 < 0)
    {
      sub_4200(&__str, (void *)xmmword_2557490, *((unint64_t *)&xmmword_2557490 + 1));
    }
    else
    {
      long long __str = xmmword_2557490;
      __str_16.__r_.__value_.__r.__words[0] = unk_25574A0;
    }
    *(_OWORD *)&__str_16.__r_.__value_.__r.__words[1] = xmmword_25574A8;
    long long v176 = 0uLL;
    uint64_t v175 = 0;
    sub_360840(&v175, qword_25574B8, qword_25574C0, (qword_25574C0 - qword_25574B8) >> 5);
  }
  std::string::operator=((std::string *)(v5 + 16), (const std::string *)&__str);
  *(_OWORD *)(v5 + 40) = *(_OWORD *)&__str_16.__r_.__value_.__r.__words[1];
  if ((long long *)(v5 + 16) != &__str) {
    sub_360A08(v5 + 56, v175, (void *)v176, (uint64_t)(v176 - (void)v175) >> 5);
  }
  unint64_t v8 = v175;
  if (v175)
  {
    int v9 = (void *)v176;
    uint64_t v10 = v175;
    if ((void *)v176 != v175)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete((void *)*(v9 - 3));
        }
        v9 -= 4;
      }
      while (v9 != v8);
      uint64_t v10 = v175;
    }
    *(void *)&long long v176 = v8;
    operator delete(v10);
  }
  if (__str_16.__r_.__value_.__s.__data_[7] < 0)
  {
    operator delete((void *)__str);
    if ((*(unsigned char *)(a2 + 40) & 4) == 0) {
      goto LABEL_24;
    }
LABEL_27:
    sub_35E660(*(void *)(a2 + 88), (uint64_t)&__str);
    goto LABEL_30;
  }
  if ((*(unsigned char *)(a2 + 40) & 4) != 0) {
    goto LABEL_27;
  }
LABEL_24:
  if (byte_25574A7 < 0)
  {
    sub_4200(&__str, (void *)xmmword_2557490, *((unint64_t *)&xmmword_2557490 + 1));
  }
  else
  {
    long long __str = xmmword_2557490;
    __str_16.__r_.__value_.__r.__words[0] = unk_25574A0;
  }
  *(_OWORD *)&__str_16.__r_.__value_.__r.__words[1] = xmmword_25574A8;
  long long v176 = 0uLL;
  uint64_t v175 = 0;
  sub_360840(&v175, qword_25574B8, qword_25574C0, (qword_25574C0 - qword_25574B8) >> 5);
LABEL_30:
  std::string::operator=((std::string *)(v5 + 80), (const std::string *)&__str);
  *(_OWORD *)(v5 + 104) = *(_OWORD *)&__str_16.__r_.__value_.__r.__words[1];
  if ((long long *)(v5 + 80) != &__str) {
    sub_360A08(v5 + 120, v175, (void *)v176, (uint64_t)(v176 - (void)v175) >> 5);
  }
  unint64_t v11 = v175;
  if (v175)
  {
    uint64_t v12 = (void *)v176;
    uint64_t v13 = v175;
    if ((void *)v176 != v175)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete((void *)*(v12 - 3));
        }
        v12 -= 4;
      }
      while (v12 != v11);
      uint64_t v13 = v175;
    }
    *(void *)&long long v176 = v11;
    operator delete(v13);
  }
  if (__str_16.__r_.__value_.__s.__data_[7] < 0)
  {
    operator delete((void *)__str);
    if ((*(unsigned char *)(a2 + 40) & 2) == 0) {
      goto LABEL_42;
    }
LABEL_45:
    sub_35E660(*(void *)(a2 + 80), (uint64_t)&__str);
    goto LABEL_48;
  }
  if ((*(unsigned char *)(a2 + 40) & 2) != 0) {
    goto LABEL_45;
  }
LABEL_42:
  if (byte_25574A7 < 0)
  {
    sub_4200(&__str, (void *)xmmword_2557490, *((unint64_t *)&xmmword_2557490 + 1));
  }
  else
  {
    long long __str = xmmword_2557490;
    __str_16.__r_.__value_.__r.__words[0] = unk_25574A0;
  }
  *(_OWORD *)&__str_16.__r_.__value_.__r.__words[1] = xmmword_25574A8;
  long long v176 = 0uLL;
  uint64_t v175 = 0;
  sub_360840(&v175, qword_25574B8, qword_25574C0, (qword_25574C0 - qword_25574B8) >> 5);
LABEL_48:
  std::string::operator=((std::string *)(v5 + 144), (const std::string *)&__str);
  *(_OWORD *)(v5 + 168) = *(_OWORD *)&__str_16.__r_.__value_.__r.__words[1];
  if ((long long *)(v5 + 144) != &__str) {
    sub_360A08(v5 + 184, v175, (void *)v176, (uint64_t)(v176 - (void)v175) >> 5);
  }
  uint64_t v14 = v175;
  if (v175)
  {
    uint64_t v15 = (void *)v176;
    uint64_t v16 = v175;
    if ((void *)v176 != v175)
    {
      do
      {
        if (*((char *)v15 - 1) < 0) {
          operator delete((void *)*(v15 - 3));
        }
        v15 -= 4;
      }
      while (v15 != v14);
      uint64_t v16 = v175;
    }
    *(void *)&long long v176 = v14;
    operator delete(v16);
  }
  if (__str_16.__r_.__value_.__s.__data_[7] < 0)
  {
    operator delete((void *)__str);
    if ((*(unsigned char *)(a2 + 40) & 8) == 0) {
      goto LABEL_60;
    }
LABEL_63:
    sub_35E660(*(void *)(a2 + 96), (uint64_t)&__str);
    goto LABEL_66;
  }
  if ((*(unsigned char *)(a2 + 40) & 8) != 0) {
    goto LABEL_63;
  }
LABEL_60:
  if (byte_25574A7 < 0)
  {
    sub_4200(&__str, (void *)xmmword_2557490, *((unint64_t *)&xmmword_2557490 + 1));
  }
  else
  {
    long long __str = xmmword_2557490;
    __str_16.__r_.__value_.__r.__words[0] = unk_25574A0;
  }
  *(_OWORD *)&__str_16.__r_.__value_.__r.__words[1] = xmmword_25574A8;
  long long v176 = 0uLL;
  uint64_t v175 = 0;
  sub_360840(&v175, qword_25574B8, qword_25574C0, (qword_25574C0 - qword_25574B8) >> 5);
LABEL_66:
  std::string::operator=((std::string *)(v5 + 208), (const std::string *)&__str);
  *(_OWORD *)(v5 + 232) = *(_OWORD *)&__str_16.__r_.__value_.__r.__words[1];
  if ((long long *)(v5 + 208) != &__str) {
    sub_360A08(v5 + 248, v175, (void *)v176, (uint64_t)(v176 - (void)v175) >> 5);
  }
  long long v17 = v175;
  if (v175)
  {
    uint64_t v18 = (void *)v176;
    uint64_t v19 = v175;
    if ((void *)v176 != v175)
    {
      do
      {
        if (*((char *)v18 - 1) < 0) {
          operator delete((void *)*(v18 - 3));
        }
        v18 -= 4;
      }
      while (v18 != v17);
      uint64_t v19 = v175;
    }
    *(void *)&long long v176 = v17;
    operator delete(v19);
  }
  if (__str_16.__r_.__value_.__s.__data_[7] < 0)
  {
    operator delete((void *)__str);
    if ((*(unsigned char *)(a2 + 40) & 0x10) == 0) {
      goto LABEL_78;
    }
LABEL_81:
    sub_35E660(*(void *)(a2 + 104), (uint64_t)&__str);
    goto LABEL_84;
  }
  if ((*(unsigned char *)(a2 + 40) & 0x10) != 0) {
    goto LABEL_81;
  }
LABEL_78:
  if (byte_25574A7 < 0)
  {
    sub_4200(&__str, (void *)xmmword_2557490, *((unint64_t *)&xmmword_2557490 + 1));
  }
  else
  {
    long long __str = xmmword_2557490;
    __str_16.__r_.__value_.__r.__words[0] = unk_25574A0;
  }
  *(_OWORD *)&__str_16.__r_.__value_.__r.__words[1] = xmmword_25574A8;
  long long v176 = 0uLL;
  uint64_t v175 = 0;
  sub_360840(&v175, qword_25574B8, qword_25574C0, (qword_25574C0 - qword_25574B8) >> 5);
LABEL_84:
  std::string::operator=((std::string *)(v5 + 272), (const std::string *)&__str);
  *(_OWORD *)(v5 + 296) = *(_OWORD *)&__str_16.__r_.__value_.__r.__words[1];
  if ((long long *)(v5 + 272) != &__str) {
    sub_360A08(v5 + 312, v175, (void *)v176, (uint64_t)(v176 - (void)v175) >> 5);
  }
  unint64_t v20 = v175;
  if (v175)
  {
    unint64_t v21 = (void *)v176;
    int v22 = v175;
    if ((void *)v176 != v175)
    {
      do
      {
        if (*((char *)v21 - 1) < 0) {
          operator delete((void *)*(v21 - 3));
        }
        v21 -= 4;
      }
      while (v21 != v20);
      int v22 = v175;
    }
    *(void *)&long long v176 = v20;
    operator delete(v22);
  }
  if (__str_16.__r_.__value_.__s.__data_[7] < 0)
  {
    operator delete((void *)__str);
    if ((*(unsigned char *)(a2 + 40) & 0x20) == 0) {
      goto LABEL_96;
    }
LABEL_99:
    sub_35E660(*(void *)(a2 + 112), (uint64_t)&__str);
    goto LABEL_102;
  }
  if ((*(unsigned char *)(a2 + 40) & 0x20) != 0) {
    goto LABEL_99;
  }
LABEL_96:
  if (byte_25574A7 < 0)
  {
    sub_4200(&__str, (void *)xmmword_2557490, *((unint64_t *)&xmmword_2557490 + 1));
  }
  else
  {
    long long __str = xmmword_2557490;
    __str_16.__r_.__value_.__r.__words[0] = unk_25574A0;
  }
  *(_OWORD *)&__str_16.__r_.__value_.__r.__words[1] = xmmword_25574A8;
  long long v176 = 0uLL;
  uint64_t v175 = 0;
  sub_360840(&v175, qword_25574B8, qword_25574C0, (qword_25574C0 - qword_25574B8) >> 5);
LABEL_102:
  std::string::operator=((std::string *)(v5 + 336), (const std::string *)&__str);
  *(_OWORD *)(v5 + 360) = *(_OWORD *)&__str_16.__r_.__value_.__r.__words[1];
  if ((long long *)(v5 + 336) != &__str) {
    sub_360A08(v5 + 376, v175, (void *)v176, (uint64_t)(v176 - (void)v175) >> 5);
  }
  int v23 = v175;
  if (v175)
  {
    uint64_t v24 = (void *)v176;
    unint64_t v25 = v175;
    if ((void *)v176 != v175)
    {
      do
      {
        if (*((char *)v24 - 1) < 0) {
          operator delete((void *)*(v24 - 3));
        }
        v24 -= 4;
      }
      while (v24 != v23);
      unint64_t v25 = v175;
    }
    *(void *)&long long v176 = v23;
    operator delete(v25);
  }
  if (__str_16.__r_.__value_.__s.__data_[7] < 0)
  {
    operator delete((void *)__str);
    int v26 = *(_DWORD *)(a2 + 168);
    if (!v26) {
      goto LABEL_117;
    }
  }
  else
  {
    int v26 = *(_DWORD *)(a2 + 168);
    if (!v26) {
      goto LABEL_117;
    }
  }
  if (v26 != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unexpected icon type encountered");
LABEL_400:
  }
LABEL_117:
  *(unsigned char *)(v5 + 400) = v26;
  int v27 = *(_DWORD *)(a2 + 40);
  if ((v27 & 0x100) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Mandatory field start_datetime is not present");
    goto LABEL_400;
  }
  int v28 = 2147483646;
  if (*(void *)(a2 + 136) <= 0x7FFFFFFEuLL)
  {
    int v28 = sub_360CE4(*(void *)(a2 + 136));
    int v27 = *(_DWORD *)(a2 + 40);
  }
  *(_DWORD *)(v5 + 404) = v28;
  if ((v27 & 0x200) != 0)
  {
    int v29 = 2147483646;
    if (*(void *)(a2 + 144) <= 0x7FFFFFFEuLL) {
      int v29 = sub_360CE4(*(void *)(a2 + 144));
    }
  }
  else
  {
    int v29 = 2147483646;
  }
  *(_DWORD *)(v5 + 408) = v29;
  int v30 = 2147483646;
  if (*(void *)(a2 + 152) <= 0x7FFFFFFEuLL) {
    int v30 = sub_360CE4(*(void *)(a2 + 152));
  }
  *(_DWORD *)(v5 + 412) = v30;
  if ((*(unsigned char *)(a2 + 41) & 8) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Mandatory field updated_datetime is not present");
    goto LABEL_400;
  }
  int v31 = 2147483646;
  if (*(void *)(a2 + 160) <= 0x7FFFFFFEuLL) {
    int v31 = sub_360CE4(*(void *)(a2 + 160));
  }
  *(_DWORD *)(v5 + 416) = v31;
  int v32 = 2147483646;
  if (*(void *)(a2 + 176) <= 0x7FFFFFFEuLL) {
    int v32 = sub_360CE4(*(void *)(a2 + 176));
  }
  *(_DWORD *)(v5 + 420) = v32;
  if (*(_DWORD *)(v5 + 404) > *(_DWORD *)(v5 + 408))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Start datetime is after end datetime");
    goto LABEL_400;
  }
  uint64_t v33 = *(void *)(a2 + 64);
  if (v33) {
    long long v34 = (uint64_t *)(v33 + 8);
  }
  else {
    long long v34 = 0;
  }
  uint64_t v35 = *(int *)(a2 + 56);
  if (!v35) {
    goto LABEL_375;
  }
  long long v148 = (uint64_t *)(v5 + 424);
  uint64_t v152 = &v34[v35];
  while (2)
  {
    uint64_t v36 = *v34;
    if ((*(unsigned char *)(*v34 + 40) & 2) == 0)
    {
      int v142 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v142, "Mandatory field muid of incident entity is not present");
    }
    int32x4_t v153 = v34;
    DWORD2(__str) = -1;
    char v180 = 0;
    unsigned __int32 v37 = *(unsigned int **)(v36 + 56);
    switch(*(_DWORD *)(v36 + 72))
    {
      case 0:
        unint64_t v144 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v144, "Incident entity type UNKNOWN is deprecated");
        goto LABEL_391;
      case 1:
        v168[0] = (void *)-1;
        LODWORD(v168[1]) = 0x7FFFFFFF;
        unint64_t v38 = sub_2A29A0(a1, v37, (uint64_t)v168);
        int v40 = v38 > 0xFFFFFFFEFFFFFFFFLL || v38 == 0;
        unsigned int v41 = v40 << 31 >> 31;
        if (DWORD2(__str) == v41) {
          goto LABEL_155;
        }
        goto LABEL_166;
      case 2:
        unint64_t v144 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v144, "Incident entity type TRIP is not supported");
        goto LABEL_391;
      case 3:
        v168[0] = (void *)-1;
        LODWORD(v168[1]) = 0x7FFFFFFF;
        unint64_t v38 = sub_2A2A08(a1, v37, (uint64_t)v168);
        if (v38) {
          BOOL v79 = v38 >= 0xFFFFFFFF00000000;
        }
        else {
          BOOL v79 = 1;
        }
        if (v79) {
          unsigned int v41 = -1;
        }
        else {
          unsigned int v41 = 2;
        }
        if (DWORD2(__str) == v41) {
          goto LABEL_155;
        }
        goto LABEL_166;
      case 4:
        v168[0] = (void *)-1;
        LODWORD(v168[1]) = 0x7FFFFFFF;
        unint64_t v38 = sub_2A2800(a1, v37, (uint64_t)v168);
        if (v38) {
          BOOL v80 = v38 >= 0xFFFFFFFF00000000;
        }
        else {
          BOOL v80 = 1;
        }
        if (v80) {
          unsigned int v41 = -1;
        }
        else {
          unsigned int v41 = 5;
        }
        if (DWORD2(__str) == v41) {
          goto LABEL_155;
        }
        goto LABEL_166;
      case 5:
        v168[0] = (void *)-1;
        LODWORD(v168[1]) = 0x7FFFFFFF;
        unint64_t v38 = sub_2A2A70(a1, v37, (uint64_t)v168);
        if (v38) {
          BOOL v77 = v38 >= 0xFFFFFFFF00000000;
        }
        else {
          BOOL v77 = 1;
        }
        if (v77) {
          unsigned int v41 = -1;
        }
        else {
          unsigned int v41 = 4;
        }
        if (DWORD2(__str) == v41) {
          goto LABEL_155;
        }
        goto LABEL_166;
      case 0xA:
        v168[0] = (void *)-1;
        LODWORD(v168[1]) = 0x7FFFFFFF;
        unint64_t v38 = sub_2A2480(a1, v37, (uint64_t)v168);
        if (v38) {
          BOOL v43 = v38 >= 0xFFFFFFFF00000000;
        }
        else {
          BOOL v43 = 1;
        }
        if (v43) {
          unsigned int v41 = -1;
        }
        else {
          unsigned int v41 = 6;
        }
        if (DWORD2(__str) != v41) {
          goto LABEL_166;
        }
        goto LABEL_155;
      case 0x10:
        v168[0] = (void *)-1;
        LODWORD(v168[1]) = 0x7FFFFFFF;
        unint64_t v38 = sub_2A2868(a1, v37, (uint64_t)v168);
        if (v38) {
          BOOL v78 = v38 >= 0xFFFFFFFF00000000;
        }
        else {
          BOOL v78 = 1;
        }
        if (v78) {
          unsigned int v41 = -1;
        }
        else {
          unsigned int v41 = 3;
        }
        if (DWORD2(__str) == v41) {
          goto LABEL_155;
        }
        goto LABEL_166;
      case 0x14:
        v168[0] = (void *)-1;
        LODWORD(v168[1]) = 0x7FFFFFFF;
        unint64_t v38 = sub_2A2798(a1, v37, (uint64_t)v168);
        if (v38) {
          BOOL v42 = v38 >= 0xFFFFFFFF00000000;
        }
        else {
          BOOL v42 = 1;
        }
        if (v42) {
          unsigned int v41 = -1;
        }
        else {
          unsigned int v41 = 1;
        }
        if (DWORD2(__str) == v41)
        {
LABEL_155:
          if (v41 > 6) {
            goto LABEL_199;
          }
          *(void *)&long long __str = v38;
          if ((*(unsigned char *)(v36 + 40) & 1) == 0) {
            goto LABEL_157;
          }
        }
        else
        {
LABEL_166:
          if (v41 >= 7)
          {
            DWORD2(__str) = v41;
LABEL_199:
            uint64_t v167 = 0;
            memset(v166, 0, sizeof(v166));
            long long v164 = 0u;
            *(_OWORD *)uint64_t v165 = 0u;
            long long v162 = 0u;
            *(_OWORD *)unint64_t v163 = 0u;
            DWORD2(v162) = -1;
            if (v180)
            {
              if ((void)v178)
              {
                *((void *)&v178 + 1) = v178;
                operator delete((void *)v178);
              }
              goto LABEL_350;
            }
            goto LABEL_363;
          }
          *(void *)&long long __str = v38;
          DWORD2(__str) = v41;
          if ((*(unsigned char *)(v36 + 40) & 1) == 0)
          {
LABEL_157:
            DWORD2(v162) = v41;
            *(void *)&long long v162 = v38;
            LOBYTE(v167) = v180;
            if (v180) {
              goto LABEL_349;
            }
            goto LABEL_355;
          }
        }
        uint64_t v44 = *(int **)(v36 + 48);
        long long __p = 0;
        unsigned int v157 = 0;
        memset(v158, 0, 11);
        long long v160 = 0u;
        long long v161 = 0u;
        long long v159 = 0u;
        uint64_t v45 = v44[10];
        unint64_t v151 = v44;
        if (!v45) {
          goto LABEL_204;
        }
        uint64_t v46 = (unsigned int **)*((void *)v44 + 6);
        uint64_t v47 = &v46[v45];
        break;
      default:
        unint64_t v144 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v144, "Incident entity type has an unknown value");
LABEL_391:
    }
    do
    {
      uint64_t v49 = *v46;
      uint64_t v154 = -1;
      int v155 = 0x7FFFFFFF;
      unint64_t v50 = sub_2A2800(a1, v49, (uint64_t)&v154);
      unint64_t v51 = v50;
      if (v50 <= 0xFFFFFFFEFFFFFFFFLL && v50 != 0)
      {
        double v53 = v157;
        if ((unint64_t)v157 < v158[0])
        {
          void *v157 = v50;
          uint64_t v48 = (uint64_t)(v53 + 8);
        }
        else
        {
          uint64_t v54 = __p;
          int64_t v55 = (char *)v157 - (unsigned char *)__p;
          uint64_t v56 = ((char *)v157 - (unsigned char *)__p) >> 3;
          unint64_t v57 = v56 + 1;
          if ((unint64_t)(v56 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v58 = v158[0] - (void)__p;
          if ((uint64_t)(v158[0] - (void)__p) >> 2 > v57) {
            unint64_t v57 = v58 >> 2;
          }
          if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v59 = v57;
          }
          if (v59)
          {
            if (v59 >> 61) {
              sub_188D718();
            }
            unsigned int v60 = operator new(8 * v59);
            unsigned int v61 = (unint64_t *)&v60[8 * v56];
            *unsigned int v61 = v51;
            uint64_t v48 = (uint64_t)(v61 + 1);
            if (v53 != v54)
            {
LABEL_187:
              unint64_t v62 = v53 - 8 - v54;
              if (v62 < 0x58) {
                goto LABEL_406;
              }
              if ((unint64_t)(v53 - &v60[v55]) < 0x20) {
                goto LABEL_406;
              }
              uint64_t v63 = (v62 >> 3) + 1;
              uint64_t v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
              unsigned int v65 = &v53[-v64];
              unsigned int v61 = (unint64_t *)((char *)v61 - v64);
              uint64_t v66 = &v60[8 * v56 - 16];
              uint64_t v67 = (long long *)(v53 - 16);
              uint64_t v68 = v63 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v69 = *v67;
                *(v66 - 1) = *(v67 - 1);
                *uint64_t v66 = v69;
                v66 -= 2;
                v67 -= 2;
                v68 -= 4;
              }
              while (v68);
              double v53 = v65;
              if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_406:
                do
                {
                  unint64_t v70 = *((void *)v53 - 1);
                  v53 -= 8;
                  *--unsigned int v61 = v70;
                }
                while (v53 != v54);
              }
              double v53 = __p;
              long long __p = v61;
              unsigned int v157 = (void *)v48;
              v158[0] = &v60[8 * v59];
              if (!v53) {
                goto LABEL_171;
              }
              goto LABEL_197;
            }
          }
          else
          {
            unsigned int v60 = 0;
            unsigned int v61 = (unint64_t *)(8 * v56);
            *(void *)(8 * v56) = v51;
            uint64_t v48 = 8 * v56 + 8;
            if (v53 != v54) {
              goto LABEL_187;
            }
          }
          long long __p = v61;
          unsigned int v157 = (void *)v48;
          v158[0] = &v60[8 * v59];
          if (v53) {
LABEL_197:
          }
            operator delete(v53);
        }
LABEL_171:
        unsigned int v157 = (void *)v48;
      }
      ++v46;
    }
    while (v46 != v47);
    uint64_t v44 = v151;
    uint64_t v5 = v149;
    a2 = v150;
    if (v151[10] >= 1 && __p == v157) {
      goto LABEL_327;
    }
LABEL_204:
    uint64_t v71 = v44[14];
    int v72 = LOBYTE(v158[1]);
    if (!v71)
    {
      int v76 = BYTE1(v158[1]);
      int v74 = BYTE2(v158[1]);
      if (BYTE1(v158[1])) {
        goto LABEL_248;
      }
LABEL_246:
      if (v72 || v74) {
        goto LABEL_248;
      }
      int v143 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v143, "Node incident details specify no manoeuvre");
      goto LABEL_387;
    }
    uint64_t v73 = (_DWORD *)*((void *)v44 + 8);
    int v74 = BYTE2(v158[1]);
    uint64_t v75 = 4 * v71;
    int v76 = BYTE1(v158[1]);
    do
    {
      switch(*v73)
      {
        case 0:
          BYTE2(v158[1]) = v74;
          LOBYTE(v158[1]) = v72;
          BYTE1(v158[1]) = v76;
          v141 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v141, "Incident manoeuvre type UNKNOWN is deprecated");
        case 1:
          int v76 = 1;
          break;
        case 2:
          int v72 = 1;
          break;
        case 3:
          int v74 = 1;
          break;
        default:
          break;
      }
      ++v73;
      v75 -= 4;
    }
    while (v75);
    BYTE2(v158[1]) = v74;
    LOBYTE(v158[1]) = v72;
    BYTE1(v158[1]) = v76;
    if (!v76) {
      goto LABEL_246;
    }
LABEL_248:
    uint64_t v81 = v44[20];
    int v82 = v76 | v74;
    if ((int)v81 >= 1 && v82 == 0)
    {
      int v143 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v143, "Node incident details specify an outgoing stop pair but do not specify PASS or BOARD manoeuvre");
      goto LABEL_387;
    }
    uint64_t v84 = *((void *)v44 + 11);
    if (v84) {
      unsigned int v85 = (uint64_t *)(v84 + 8);
    }
    else {
      unsigned int v85 = 0;
    }
    if (!v81)
    {
LABEL_287:
      uint64_t v109 = v151;
      uint64_t v110 = v151[26];
      if ((int)v110 < 1) {
        goto LABEL_289;
      }
LABEL_288:
      if (LOBYTE(v158[1])) {
        goto LABEL_289;
      }
      int v143 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v143, "Node incident details specify an incoming stop pair but do not specify ALIGHT manoeuvre");
LABEL_387:
    }
    unsigned __int32 v86 = &v85[v81];
    do
    {
      uint64_t v88 = *v85;
      uint64_t v89 = *(unsigned int **)(*v85 + 24);
      uint64_t v154 = -1;
      int v155 = 0x7FFFFFFF;
      unint64_t v90 = sub_2A2A08(a1, v89, (uint64_t)&v154);
      int64_t v91 = *(unsigned int **)(v88 + 32);
      uint64_t v154 = -1;
      int v155 = 0x7FFFFFFF;
      unint64_t v92 = sub_2A2A08(a1, v91, (uint64_t)&v154);
      unint64_t v93 = v92;
      if (v90 <= 0xFFFFFFFEFFFFFFFFLL
        && v90 != 0
        && v92 != 0
        && v92 <= 0xFFFFFFFEFFFFFFFFLL)
      {
        unsigned int v97 = (void *)*((void *)&v159 + 1);
        if (*((void *)&v159 + 1) < (unint64_t)v160)
        {
          **((void **)&v159 + 1) = v90;
          v97[1] = v92;
          unsigned __int32 v87 = v97 + 2;
        }
        else
        {
          unint64_t v98 = (void *)v159;
          uint64_t v99 = (uint64_t)(*((void *)&v159 + 1) - v159) >> 4;
          unint64_t v100 = v99 + 1;
          if ((unint64_t)(v99 + 1) >> 60) {
            sub_2E00();
          }
          uint64_t v101 = v160 - v159;
          if ((uint64_t)(v160 - v159) >> 3 > v100) {
            unint64_t v100 = v101 >> 3;
          }
          if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v102 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v102 = v100;
          }
          if (v102 >> 60) {
            sub_188D718();
          }
          uint64_t v103 = (char *)operator new(16 * v102);
          uint64_t v104 = (unint64_t *)&v103[16 * v99];
          unint64_t *v104 = v90;
          v104[1] = v93;
          if (v97 != v98)
          {
            uint64_t v105 = &v103[16 * v99];
            do
            {
              uint64_t v106 = v105 - 16;
              *((_OWORD *)v105 - 1) = *((_OWORD *)v97 - 1);
              v97 -= 2;
              v105 -= 16;
            }
            while (v97 != v98);
            uint64_t v107 = &v103[16 * v102];
            unsigned __int32 v87 = v104 + 2;
            *(void *)&long long v159 = v106;
            *((void *)&v159 + 1) = v104 + 2;
            *(void *)&long long v160 = v107;
            if (!v98) {
              goto LABEL_258;
            }
            goto LABEL_284;
          }
          unsigned int v108 = &v103[16 * v102];
          unsigned __int32 v87 = v104 + 2;
          *(void *)&long long v159 = &v103[16 * v99];
          *((void *)&v159 + 1) = v104 + 2;
          *(void *)&long long v160 = v108;
          if (v98) {
LABEL_284:
          }
            operator delete(v98);
        }
LABEL_258:
        *((void *)&v159 + 1) = v87;
      }
      ++v85;
    }
    while (v85 != v86);
    a2 = v150;
    if (v151[20] < 1 || (void)v159 != *((void *)&v159 + 1)) {
      goto LABEL_287;
    }
    *(_WORD *)((char *)&v158[1] + 1) = 0;
    uint64_t v109 = v151;
    uint64_t v110 = v151[26];
    if ((int)v110 >= 1) {
      goto LABEL_288;
    }
LABEL_289:
    uint64_t v111 = *((void *)v109 + 14);
    if (v111) {
      unint64_t v112 = (uint64_t *)(v111 + 8);
    }
    else {
      unint64_t v112 = 0;
    }
    if (!v110) {
      goto LABEL_325;
    }
    unint64_t v113 = &v112[v110];
    while (2)
    {
      uint64_t v115 = *v112;
      uint64_t v116 = *(unsigned int **)(*v112 + 24);
      uint64_t v154 = -1;
      int v155 = 0x7FFFFFFF;
      unint64_t v117 = sub_2A2A08(a1, v116, (uint64_t)&v154);
      uint64_t v118 = *(unsigned int **)(v115 + 32);
      uint64_t v154 = -1;
      int v155 = 0x7FFFFFFF;
      unint64_t v119 = sub_2A2A08(a1, v118, (uint64_t)&v154);
      unint64_t v120 = v119;
      if (v117 <= 0xFFFFFFFEFFFFFFFFLL
        && v117 != 0
        && v119 != 0
        && v119 <= 0xFFFFFFFEFFFFFFFFLL)
      {
        uint64_t v124 = (void *)v161;
        if ((unint64_t)v161 < *((void *)&v161 + 1))
        {
          *(void *)long long v161 = v117;
          v124[1] = v119;
          uint64_t v114 = v124 + 2;
          goto LABEL_295;
        }
        uint64_t v125 = (void *)*((void *)&v160 + 1);
        uint64_t v126 = (uint64_t)(v161 - *((void *)&v160 + 1)) >> 4;
        unint64_t v127 = v126 + 1;
        if ((unint64_t)(v126 + 1) >> 60) {
          sub_2E00();
        }
        uint64_t v128 = *((void *)&v161 + 1) - *((void *)&v160 + 1);
        if ((uint64_t)(*((void *)&v161 + 1) - *((void *)&v160 + 1)) >> 3 > v127) {
          unint64_t v127 = v128 >> 3;
        }
        if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v129 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v129 = v127;
        }
        if (v129 >> 60) {
          sub_188D718();
        }
        long long v130 = (char *)operator new(16 * v129);
        long long v131 = (unint64_t *)&v130[16 * v126];
        *long long v131 = v117;
        v131[1] = v120;
        if (v124 == v125)
        {
          char v135 = &v130[16 * v129];
          uint64_t v114 = v131 + 2;
          *((void *)&v160 + 1) = &v130[16 * v126];
          *(void *)&long long v161 = v131 + 2;
          *((void *)&v161 + 1) = v135;
          if (!v125) {
            goto LABEL_295;
          }
        }
        else
        {
          unint64_t v132 = &v130[16 * v126];
          do
          {
            uint64_t v133 = v132 - 16;
            *((_OWORD *)v132 - 1) = *((_OWORD *)v124 - 1);
            v124 -= 2;
            v132 -= 16;
          }
          while (v124 != v125);
          v134 = &v130[16 * v129];
          uint64_t v114 = v131 + 2;
          *((void *)&v160 + 1) = v133;
          *(void *)&long long v161 = v131 + 2;
          *((void *)&v161 + 1) = v134;
          if (!v125)
          {
LABEL_295:
            *(void *)&long long v161 = v114;
            goto LABEL_296;
          }
        }
        operator delete(v125);
        goto LABEL_295;
      }
LABEL_296:
      if (++v112 != v113) {
        continue;
      }
      break;
    }
    a2 = v150;
    if (v151[26] >= 1 && *((void *)&v160 + 1) == (void)v161) {
      LOBYTE(v158[1]) = 0;
    }
LABEL_325:
    uint64_t v5 = v149;
    if (LOWORD(v158[1]) || BYTE2(v158[1]))
    {
      LOBYTE(v172) = 1;
      sub_360E8C((uint64_t)v168, (uint64_t)&__p);
    }
    else
    {
LABEL_327:
      uint64_t v172 = 0;
      memset(v171, 0, sizeof(v171));
      long long v169 = 0u;
      *(_OWORD *)int64_t v170 = 0u;
      *(_OWORD *)uint64_t v168 = 0u;
    }
    if (*((void *)&v160 + 1))
    {
      *(void *)&long long v161 = *((void *)&v160 + 1);
      operator delete(*((void **)&v160 + 1));
    }
    if ((void)v159)
    {
      *((void *)&v159 + 1) = v159;
      operator delete((void *)v159);
    }
    if (__p)
    {
      unsigned int v157 = __p;
      operator delete(__p);
    }
    if ((_BYTE)v172)
    {
      if (v180)
      {
        sub_36108C((uint64_t)&__str_16, (uint64_t)v168);
      }
      else
      {
        *(_OWORD *)&__str_16.__r_.__value_.__l.__data_ = *(_OWORD *)v168;
        __str_16.__r_.__value_.__r.__words[2] = v169;
        v168[1] = 0;
        *(void *)&long long v169 = 0;
        v168[0] = 0;
        LOWORD(v175) = WORD4(v169);
        BYTE2(v175) = BYTE10(v169);
        long long v176 = *(_OWORD *)v170;
        v136 = v171[0];
        v170[1] = 0;
        memset(v171, 0, sizeof(v171));
        v170[0] = 0;
        long long v178 = *(_OWORD *)&v171[1];
        long long v177 = v136;
        uint64_t v179 = v171[3];
        char v180 = 1;
      }
    }
    else
    {
      sub_361030((uint64_t)&__str_16);
    }
    if ((_BYTE)v172)
    {
      if (v171[1])
      {
        v171[2] = v171[1];
        operator delete(v171[1]);
      }
      if (v170[0])
      {
        v170[1] = v170[0];
        operator delete(v170[0]);
      }
      if (v168[0])
      {
        v168[1] = v168[0];
        operator delete(v168[0]);
      }
    }
    if (v180)
    {
      DWORD2(v162) = DWORD2(__str);
      if (DWORD2(__str) <= 6) {
        *(void *)&long long v162 = __str;
      }
      LOBYTE(v167) = v180;
LABEL_349:
      *(_OWORD *)unint64_t v163 = *(_OWORD *)&__str_16.__r_.__value_.__l.__data_;
      *(void *)&long long v164 = *((void *)&__str_16.__r_.__value_.__l + 2);
      memset(&__str_16, 0, sizeof(__str_16));
      WORD4(v164) = (_WORD)v175;
      BYTE10(v164) = BYTE2(v175);
      *(_OWORD *)uint64_t v165 = v176;
      char v137 = v177;
      long long v177 = 0;
      long long v176 = 0uLL;
      *(_OWORD *)&v166[1] = v178;
      v166[0] = v137;
      v166[3] = v179;
      long long v178 = 0uLL;
      uint64_t v179 = 0;
LABEL_350:
      if ((void)v176)
      {
        *((void *)&v176 + 1) = v176;
        operator delete((void *)v176);
      }
      if (__str_16.__r_.__value_.__r.__words[0])
      {
        __str_16.__r_.__value_.__l.__size_ = __str_16.__r_.__value_.__r.__words[0];
        operator delete(__str_16.__r_.__value_.__l.__data_);
      }
      unsigned int v41 = DWORD2(v162);
      if (DWORD2(v162) != -1)
      {
LABEL_355:
        unint64_t v138 = *(void *)(v5 + 432);
        if (v138 >= *(void *)(v5 + 440))
        {
          uint64_t v140 = sub_3614C0(v148, (uint64_t)&v162);
        }
        else
        {
          *(_DWORD *)(v138 + 8) = v41;
          if (DWORD2(v162) <= 6) {
            *(void *)unint64_t v138 = v162;
          }
          int v139 = v167;
          *(unsigned char *)(v138 + 96) = v167;
          if (v139) {
            sub_360E8C(v138 + 16, (uint64_t)v163);
          }
          uint64_t v140 = v138 + 104;
        }
        *(void *)(v5 + 432) = v140;
      }
LABEL_363:
      if ((_BYTE)v167)
      {
        if (v166[1])
        {
          v166[2] = v166[1];
          operator delete(v166[1]);
        }
        if (v165[0])
        {
          v165[1] = v165[0];
          operator delete(v165[0]);
        }
        if (v163[0])
        {
          v163[1] = v163[0];
          operator delete(v163[0]);
        }
      }
    }
    else
    {
      uint64_t v167 = 0;
      memset(v166, 0, sizeof(v166));
      long long v164 = 0u;
      *(_OWORD *)uint64_t v165 = 0u;
      long long v162 = 0u;
      *(_OWORD *)unint64_t v163 = 0u;
      DWORD2(v162) = -1;
    }
    long long v34 = v153 + 1;
    if (v153 + 1 != v152) {
      continue;
    }
    break;
  }
LABEL_375:
  *(_WORD *)(v5 + 448) = *(_WORD *)(a2 + 172);
}

void sub_360364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
}

uint64_t sub_3605EC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    uint64_t v2 = *(void **)(a1 + 72);
    if (v2)
    {
      *(void *)(a1 + 80) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void **)(a1 + 48);
    if (v3)
    {
      *(void *)(a1 + 56) = v3;
      operator delete(v3);
    }
    uint64_t v4 = *(void **)(a1 + 16);
    if (v4)
    {
      *(void *)(a1 + 24) = v4;
      operator delete(v4);
    }
    *(unsigned char *)(a1 + 96) = 0;
  }
  return a1;
}

uint64_t sub_36064C(uint64_t a1)
{
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = -1;
  *(void *)(a1 + 8) = -1;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 2;
  *(void *)(a1 + 48) = sub_1133328();
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(unsigned char *)(a1 + 104) = 2;
  *(void *)(a1 + 112) = sub_1133328();
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 168) = 2;
  *(void *)(a1 + 176) = sub_1133328();
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(unsigned char *)(a1 + 232) = 2;
  *(void *)(a1 + 240) = sub_1133328();
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(unsigned char *)(a1 + 296) = 2;
  *(void *)(a1 + 304) = sub_1133328();
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(unsigned char *)(a1 + 360) = 2;
  *(void *)(a1 + 368) = sub_1133328();
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(unsigned char *)(a1 + 400) = 0;
  *(void *)&long long v2 = 0x8000000080000000;
  *((void *)&v2 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 404) = v2;
  *(_DWORD *)(a1 + 420) = 0x7FFFFFFF;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 424) = 0;
  *(_WORD *)(a1 + 448) = 0;
  return a1;
}

void sub_360774(_Unwind_Exception *a1)
{
  if (*(char *)(v3 + 359) < 0) {
    operator delete(*(void **)(v3 + 336));
  }
  sub_35EA08(v6);
  sub_35EA08(v5);
  sub_35EA08(v4);
  sub_35EA08(v2);
  sub_35EA08(v1);
  _Unwind_Resume(a1);
}

void sub_3607E8()
{
  if (*(char *)(v0 + 167) < 0) {
    operator delete(*v1);
  }
  JUMPOUT(0x3607D0);
}

void sub_360800(_Unwind_Exception *a1)
{
  if (*(char *)(v3 + 103) < 0)
  {
    operator delete(*v2);
    sub_35EA08(v1);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x3607D8);
}

void sub_360824(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 39) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_360840(unsigned char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >> 59) {
      sub_2E00();
    }
    uint64_t result = operator new(32 * a4);
    unint64_t v8 = result;
    *uint64_t v5 = result;
    v5[1] = result;
    v5[2] = &result[32 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = a2 + v9;
        *(void *)&v8[v9] = *(void *)(a2 + v9);
        uint64_t result = &v8[v9 + 8];
        unint64_t v11 = (void **)(a2 + v9 + 8);
        if (*(char *)(a2 + v9 + 31) < 0)
        {
          uint64_t result = sub_4200(result, *v11, *(void *)(v10 + 16));
        }
        else
        {
          *(_OWORD *)uint64_t result = *(_OWORD *)v11;
          *(void *)&v8[v9 + 24] = *(void *)(a2 + v9 + 24);
        }
        v9 += 32;
      }
      while (v10 + 32 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_360920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_360934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 32)
  {
    if (*(char *)(v10 + v11 - 1) < 0) {
      operator delete(*(void **)(v10 + v11 - 24));
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_360970(&a9);
  _Unwind_Resume(a1);
}

void ***sub_360970(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (void **)**result;
    if (v3)
    {
      uint64_t v4 = (void **)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0) {
            operator delete(*(v4 - 3));
          }
          v4 -= 4;
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_360A08(uint64_t a1, void *a2, void *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void ***)a1;
  if (a4 > (v8 - *(void *)a1) >> 5)
  {
    if (v9)
    {
      uint64_t v10 = *(void ***)(a1 + 8);
      uint64_t v11 = *(void ***)a1;
      if (v10 != v9)
      {
        do
        {
          if (*((char *)v10 - 1) < 0) {
            operator delete(*(v10 - 3));
          }
          v10 -= 4;
        }
        while (v10 != v9);
        uint64_t v11 = *(void ***)a1;
      }
      *(void *)(a1 + 8) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a4 >> 59) {
      goto LABEL_45;
    }
    uint64_t v28 = v8 >> 4;
    if (v8 >> 4 <= a4) {
      uint64_t v28 = a4;
    }
    BOOL v29 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    unint64_t v30 = 0x7FFFFFFFFFFFFFFLL;
    if (!v29) {
      unint64_t v30 = v28;
    }
    if (v30 >> 59) {
LABEL_45:
    }
      sub_2E00();
    uint64_t v31 = 4 * v30;
    uint64_t v24 = (void **)operator new(32 * v30);
    *(void *)a1 = v24;
    *(void *)(a1 + 8) = v24;
    *(void *)(a1 + 16) = &v24[v31];
    if (v6 != a3)
    {
      uint64_t v32 = 0;
      do
      {
        uint64_t v33 = &v6[v32];
        v24[v32] = (void *)v6[v32];
        long long v34 = &v24[v32 + 1];
        uint64_t v35 = (void **)&v6[v32 + 1];
        if (SHIBYTE(v6[v32 + 3]) < 0)
        {
          sub_4200(v34, *v35, v33[2]);
        }
        else
        {
          *(_OWORD *)long long v34 = *(_OWORD *)v35;
          v24[v32 + 3] = (void *)v6[v32 + 3];
        }
        v32 += 4;
      }
      while (v33 + 4 != a3);
      uint64_t v24 = (void **)((char *)v24 + v32 * 8);
    }
LABEL_37:
    *(void *)(a1 + 8) = v24;
    return;
  }
  uint64_t v12 = *(void ***)(a1 + 8);
  unint64_t v13 = ((char *)v12 - (char *)v9) >> 5;
  if (v13 >= a4)
  {
    if (a2 == a3)
    {
      uint64_t v24 = *(void ***)a1;
    }
    else
    {
      uint64_t v24 = *(void ***)a1;
      do
      {
        unint64_t v25 = (const std::string *)(v6 + 1);
        int v26 = (void *)*v6;
        v6 += 4;
        int v27 = (std::string *)(v9 + 1);
        *uint64_t v9 = v26;
        v9 += 4;
        std::string::operator=(v27, v25);
        v24 += 4;
      }
      while (v6 != a3);
      uint64_t v12 = *(void ***)(a1 + 8);
    }
    while (v12 != v24)
    {
      if (*((char *)v12 - 1) < 0) {
        operator delete(*(v12 - 3));
      }
      v12 -= 4;
    }
    goto LABEL_37;
  }
  uint64_t v14 = &a2[4 * v13];
  if (v12 != v9)
  {
    do
    {
      uint64_t v15 = (const std::string *)(v6 + 1);
      uint64_t v16 = (void *)*v6;
      v6 += 4;
      long long v17 = (std::string *)(v9 + 1);
      *uint64_t v9 = v16;
      v9 += 4;
      std::string::operator=(v17, v15);
    }
    while (v6 != v14);
    uint64_t v9 = *(void ***)(a1 + 8);
  }
  uint64_t v18 = v9;
  if (v14 != a3)
  {
    uint64_t v19 = 0;
    do
    {
      unint64_t v21 = &v14[v19];
      v9[v19] = (void *)v14[v19];
      int v22 = &v9[v19 + 1];
      int v23 = (void **)&v14[v19 + 1];
      if (SHIBYTE(v14[v19 + 3]) < 0)
      {
        sub_4200(v22, *v23, v21[2]);
      }
      else
      {
        long long v20 = *(_OWORD *)v23;
        v9[v19 + 3] = (void *)v14[v19 + 3];
        *(_OWORD *)int v22 = v20;
      }
      v19 += 4;
    }
    while (v21 + 4 != a3);
    uint64_t v18 = &v9[v19];
  }
  *(void *)(a1 + 8) = v18;
}

void sub_360CB0(_Unwind_Exception *exception_object)
{
  for (; v3; v3 -= 32)
  {
    if (*(char *)(v2 + v3 - 1) < 0) {
      operator delete(*(void **)(v2 + v3 - 24));
    }
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

unint64_t sub_360CE4(unint64_t result)
{
  unint64_t v1 = result;
  if (result >> 31)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v8, v1);
    uint64_t v3 = std::string::insert(&v8, 0, "narrowing ");
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v9.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    uint64_t v5 = std::string::append(&v9, " failed");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    std::string::size_type v11 = v5->__r_.__value_.__r.__words[2];
    long long v10 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    uint64_t v7 = (void *)sub_2F404((uint64_t)exception, &v10);
  }
  return result;
}

void sub_360DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_360E38(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(void *)(a1 + 40) = v3;
    operator delete(v3);
  }
  long long v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_360E8C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      sub_2E00();
    }
    uint64_t v7 = (char *)operator new(v4 - *(void *)a2);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v7;
    std::string v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a1 + 8) = v8;
  }
  __int16 v9 = *(_WORD *)(a2 + 24);
  char v10 = *(unsigned char *)(a2 + 26);
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 26) = v10;
  *(_WORD *)(a1 + 24) = v9;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v12 = *(unsigned char **)(a2 + 32);
  std::string::size_type v11 = *(unsigned char **)(a2 + 40);
  int64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      sub_2E00();
    }
    uint64_t v14 = (char *)operator new(v11 - v12);
    *(void *)(a1 + 32) = v14;
    *(void *)(a1 + 40) = v14;
    uint64_t v15 = &v14[16 * (v13 >> 4)];
    *(void *)(a1 + 48) = v15;
    memcpy(v14, v12, v13);
    *(void *)(a1 + 40) = v15;
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  long long v17 = *(unsigned char **)(a2 + 56);
  uint64_t v16 = *(unsigned char **)(a2 + 64);
  int64_t v18 = v16 - v17;
  if (v16 != v17)
  {
    if (v18 < 0) {
      sub_2E00();
    }
    uint64_t v19 = (char *)operator new(v16 - v17);
    *(void *)(a1 + 56) = v19;
    *(void *)(a1 + 64) = v19;
    long long v20 = &v19[16 * (v18 >> 4)];
    *(void *)(a1 + 72) = v20;
    memcpy(v19, v17, v18);
    *(void *)(a1 + 64) = v20;
  }
  return a1;
}

void sub_360FC0(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 64) = v5;
    operator delete(v5);
    int64_t v6 = *v2;
    if (!*v2)
    {
LABEL_3:
      uint64_t v7 = *(void **)v1;
      if (!*(void *)v1) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    int64_t v6 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 40) = v6;
  operator delete(v6);
  uint64_t v7 = *(void **)v1;
  if (!*(void *)v1) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  *(void *)(v1 + 8) = v7;
  operator delete(v7);
  goto LABEL_5;
}

void sub_361020()
{
  if (!*v0) {
    JUMPOUT(0x360FE4);
  }
  JUMPOUT(0x360FDCLL);
}

void sub_361030(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v2 = *(void **)(a1 + 56);
    if (v2)
    {
      *(void *)(a1 + 64) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void **)(a1 + 32);
    if (v3)
    {
      *(void *)(a1 + 40) = v3;
      operator delete(v3);
    }
    uint64_t v4 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v4;
      operator delete(v4);
    }
    *(unsigned char *)(a1 + 80) = 0;
  }
}

__n128 sub_36108C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  __int16 v5 = *(_WORD *)(a2 + 24);
  int64_t v6 = *(void **)(a1 + 32);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(_WORD *)(a1 + 24) = v5;
  if (v6)
  {
    *(void *)(a1 + 40) = v6;
    operator delete(v6);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  uint64_t v7 = *(void **)(a1 + 56);
  if (v7)
  {
    *(void *)(a1 + 64) = v7;
    operator delete(v7);
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
  }
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)(a1 + 56) = result;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  return result;
}

uint64_t sub_361164(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 424);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 432);
    uint64_t v4 = *(void **)(a1 + 424);
    if (v3 != v2)
    {
      do
      {
        if (*(unsigned char *)(v3 - 8))
        {
          __int16 v5 = *(void **)(v3 - 32);
          if (v5)
          {
            *(void *)(v3 - 24) = v5;
            operator delete(v5);
          }
          int64_t v6 = *(void **)(v3 - 56);
          if (v6)
          {
            *(void *)(v3 - 48) = v6;
            operator delete(v6);
          }
          uint64_t v7 = *(void **)(v3 - 88);
          if (v7)
          {
            *(void *)(v3 - 80) = v7;
            operator delete(v7);
          }
          *(unsigned char *)(v3 - 8) = 0;
        }
        v3 -= 104;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 424);
    }
    *(void *)(a1 + 432) = v2;
    operator delete(v4);
  }
  uint64_t v8 = *(void *)(a1 + 376);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 384);
    char v10 = *(void **)(a1 + 376);
    if (v9 != v8)
    {
      do
      {
        if (*(char *)(v9 - 1) < 0) {
          operator delete(*(void **)(v9 - 24));
        }
        v9 -= 32;
      }
      while (v9 != v8);
      char v10 = *(void **)(a1 + 376);
    }
    *(void *)(a1 + 384) = v8;
    operator delete(v10);
  }
  if ((*(char *)(a1 + 359) & 0x80000000) == 0)
  {
    std::string::size_type v11 = *(void ***)(a1 + 312);
    if (!v11) {
      goto LABEL_24;
    }
LABEL_35:
    long long v17 = *(void ***)(a1 + 320);
    if (v17 == v11)
    {
      *(void *)(a1 + 320) = v11;
      operator delete(v11);
      if (*(char *)(a1 + 295) < 0) {
        goto LABEL_37;
      }
    }
    else
    {
      do
      {
        if (*((char *)v17 - 1) < 0) {
          operator delete(*(v17 - 3));
        }
        v17 -= 4;
      }
      while (v17 != v11);
      int v22 = *(void **)(a1 + 312);
      *(void *)(a1 + 320) = v11;
      operator delete(v22);
      if (*(char *)(a1 + 295) < 0) {
        goto LABEL_37;
      }
    }
LABEL_25:
    uint64_t v12 = *(void ***)(a1 + 248);
    if (!v12) {
      goto LABEL_26;
    }
LABEL_38:
    int64_t v18 = *(void ***)(a1 + 256);
    if (v18 == v12)
    {
      *(void *)(a1 + 256) = v12;
      operator delete(v12);
      if (*(char *)(a1 + 231) < 0) {
        goto LABEL_40;
      }
    }
    else
    {
      do
      {
        if (*((char *)v18 - 1) < 0) {
          operator delete(*(v18 - 3));
        }
        v18 -= 4;
      }
      while (v18 != v12);
      int v23 = *(void **)(a1 + 248);
      *(void *)(a1 + 256) = v12;
      operator delete(v23);
      if (*(char *)(a1 + 231) < 0) {
        goto LABEL_40;
      }
    }
LABEL_27:
    int64_t v13 = *(void ***)(a1 + 184);
    if (!v13) {
      goto LABEL_28;
    }
LABEL_41:
    uint64_t v19 = *(void ***)(a1 + 192);
    if (v19 == v13)
    {
      *(void *)(a1 + 192) = v13;
      operator delete(v13);
      if (*(char *)(a1 + 167) < 0) {
        goto LABEL_43;
      }
    }
    else
    {
      do
      {
        if (*((char *)v19 - 1) < 0) {
          operator delete(*(v19 - 3));
        }
        v19 -= 4;
      }
      while (v19 != v13);
      uint64_t v24 = *(void **)(a1 + 184);
      *(void *)(a1 + 192) = v13;
      operator delete(v24);
      if (*(char *)(a1 + 167) < 0) {
        goto LABEL_43;
      }
    }
LABEL_29:
    uint64_t v14 = *(void ***)(a1 + 120);
    if (!v14) {
      goto LABEL_30;
    }
LABEL_44:
    long long v20 = *(void ***)(a1 + 128);
    if (v20 == v14)
    {
      *(void *)(a1 + 128) = v14;
      operator delete(v14);
      if (*(char *)(a1 + 103) < 0) {
        goto LABEL_46;
      }
    }
    else
    {
      do
      {
        if (*((char *)v20 - 1) < 0) {
          operator delete(*(v20 - 3));
        }
        v20 -= 4;
      }
      while (v20 != v14);
      unint64_t v25 = *(void **)(a1 + 120);
      *(void *)(a1 + 128) = v14;
      operator delete(v25);
      if (*(char *)(a1 + 103) < 0) {
        goto LABEL_46;
      }
    }
LABEL_31:
    uint64_t v15 = *(void ***)(a1 + 56);
    if (!v15) {
      goto LABEL_32;
    }
LABEL_47:
    unint64_t v21 = *(void ***)(a1 + 64);
    if (v21 == v15)
    {
      *(void *)(a1 + 64) = v15;
      operator delete(v15);
      if ((*(char *)(a1 + 39) & 0x80000000) == 0) {
        return a1;
      }
    }
    else
    {
      do
      {
        if (*((char *)v21 - 1) < 0) {
          operator delete(*(v21 - 3));
        }
        v21 -= 4;
      }
      while (v21 != v15);
      int v26 = *(void **)(a1 + 56);
      *(void *)(a1 + 64) = v15;
      operator delete(v26);
      if ((*(char *)(a1 + 39) & 0x80000000) == 0) {
        return a1;
      }
    }
    goto LABEL_49;
  }
  operator delete(*(void **)(a1 + 336));
  std::string::size_type v11 = *(void ***)(a1 + 312);
  if (v11) {
    goto LABEL_35;
  }
LABEL_24:
  if ((*(char *)(a1 + 295) & 0x80000000) == 0) {
    goto LABEL_25;
  }
LABEL_37:
  operator delete(*(void **)(a1 + 272));
  uint64_t v12 = *(void ***)(a1 + 248);
  if (v12) {
    goto LABEL_38;
  }
LABEL_26:
  if ((*(char *)(a1 + 231) & 0x80000000) == 0) {
    goto LABEL_27;
  }
LABEL_40:
  operator delete(*(void **)(a1 + 208));
  int64_t v13 = *(void ***)(a1 + 184);
  if (v13) {
    goto LABEL_41;
  }
LABEL_28:
  if ((*(char *)(a1 + 167) & 0x80000000) == 0) {
    goto LABEL_29;
  }
LABEL_43:
  operator delete(*(void **)(a1 + 144));
  uint64_t v14 = *(void ***)(a1 + 120);
  if (v14) {
    goto LABEL_44;
  }
LABEL_30:
  if ((*(char *)(a1 + 103) & 0x80000000) == 0) {
    goto LABEL_31;
  }
LABEL_46:
  operator delete(*(void **)(a1 + 80));
  uint64_t v15 = *(void ***)(a1 + 56);
  if (v15) {
    goto LABEL_47;
  }
LABEL_32:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0) {
    return a1;
  }
LABEL_49:
  operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_3614C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (char *)*a1;
  uint64_t v4 = (char *)a1[1];
  uint64_t v5 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)&v4[-*a1] >> 3);
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x276276276276276) {
    sub_2E00();
  }
  if (0x9D89D89D89D89D8ALL * ((a1[2] - (uint64_t)v3) >> 3) > v6) {
    unint64_t v6 = 0x9D89D89D89D89D8ALL * ((a1[2] - (uint64_t)v3) >> 3);
  }
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((a1[2] - (uint64_t)v3) >> 3)) >= 0x13B13B13B13B13BLL) {
    unint64_t v8 = 0x276276276276276;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0x276276276276276) {
      sub_188D718();
    }
    uint64_t v9 = operator new(104 * v8);
    uint64_t v10 = (uint64_t)&v9[104 * v5];
    unsigned int v11 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(v10 + 8) = v11;
    if (v11 <= 6) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = 8 * ((uint64_t)&v4[-*a1] >> 3);
    unsigned int v27 = *(_DWORD *)(a2 + 8);
    *(int *)((char *)&dword_8 + v10) = v27;
    if (v27 <= 6) {
LABEL_10:
    }
      *(void *)uint64_t v10 = *(void *)a2;
  }
  int v12 = *(unsigned __int8 *)(a2 + 96);
  v9[104 * v5 + 96] = v12;
  if (v12)
  {
    sub_360E8C((uint64_t)&v9[104 * v5 + 16], a2 + 16);
    uint64_t v3 = (char *)*a1;
    uint64_t v4 = (char *)a1[1];
  }
  int64_t v13 = &v9[104 * v8];
  uint64_t v14 = v10 + 104;
  if (v4 == v3)
  {
    *a1 = v10;
    a1[1] = v14;
    a1[2] = (uint64_t)v13;
    if (!v3) {
      return v10 + 104;
    }
    goto LABEL_32;
  }
  uint64_t v15 = 0;
  do
  {
    uint64_t v16 = &v4[v15];
    uint64_t v17 = v10 + v15;
    *(_DWORD *)(v10 + v15 - 96) = *(_DWORD *)&v4[v15 - 96];
    if (*(_DWORD *)&v4[v15 - 96] <= 6u) {
      *(void *)(v17 - 104) = *((void *)v16 - 13);
    }
    int v18 = *(v16 - 8);
    *(unsigned char *)(v17 - 8) = v18;
    if (v18)
    {
      uint64_t v19 = &v4[v15];
      uint64_t v20 = v10 + v15;
      *(void *)(v20 - 88) = 0;
      *(void *)(v20 - 80) = 0;
      *(void *)(v20 - 72) = 0;
      *(_OWORD *)(v20 - 88) = *(_OWORD *)&v4[v15 - 88];
      *(void *)(v20 - 72) = *(void *)&v4[v15 - 72];
      *((void *)v19 - 11) = 0;
      *((void *)v19 - 10) = 0;
      *((void *)v19 - 9) = 0;
      __int16 v21 = *(_WORD *)&v4[v15 - 64];
      *(unsigned char *)(v20 - 62) = v4[v15 - 62];
      *(_WORD *)(v20 - 64) = v21;
      *(void *)(v20 - 48) = 0;
      *(void *)(v20 - 40) = 0;
      *(void *)(v20 - 56) = 0;
      *(_OWORD *)(v20 - 56) = *(_OWORD *)&v4[v15 - 56];
      *(void *)(v20 - 40) = *(void *)&v4[v15 - 40];
      *((void *)v19 - 7) = 0;
      *((void *)v19 - 6) = 0;
      *((void *)v19 - 5) = 0;
      *(void *)(v20 - 32) = 0;
      *(void *)(v20 - 24) = 0;
      *(void *)(v20 - 16) = 0;
      *(_OWORD *)(v20 - 32) = *(_OWORD *)&v4[v15 - 32];
      *(void *)(v20 - 16) = *(void *)&v4[v15 - 16];
      *((void *)v19 - 4) = 0;
      *((void *)v19 - 3) = 0;
      *((void *)v19 - 2) = 0;
    }
    v15 -= 104;
  }
  while (&v4[v15] != v3);
  int v22 = (char *)*a1;
  uint64_t v3 = (char *)a1[1];
  *a1 = v10 + v15;
  a1[1] = v14;
  a1[2] = (uint64_t)v13;
  if (v3 != v22)
  {
    do
    {
      if (*(v3 - 8))
      {
        int v23 = (void *)*((void *)v3 - 4);
        if (v23)
        {
          *((void *)v3 - 3) = v23;
          operator delete(v23);
        }
        uint64_t v24 = (void *)*((void *)v3 - 7);
        if (v24)
        {
          *((void *)v3 - 6) = v24;
          operator delete(v24);
        }
        unint64_t v25 = (void *)*((void *)v3 - 11);
        if (v25)
        {
          *((void *)v3 - 10) = v25;
          operator delete(v25);
        }
        *(v3 - 8) = 0;
      }
      v3 -= 104;
    }
    while (v3 != v22);
    uint64_t v3 = v22;
  }
  if (v3) {
LABEL_32:
  }
    operator delete(v3);
  return v10 + 104;
}

uint64_t sub_36175C(uint64_t a1, uint64_t a2)
{
  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  *(_DWORD *)a1 = std::chrono::system_clock::to_time_t(&__t);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = a2;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 1065353216;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 216) = 1065353216;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 256) = 1065353216;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 296) = 1065353216;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 336) = 1065353216;
  return a1;
}

uint64_t sub_3617FC(_DWORD *a1)
{
  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  return 10 * (std::chrono::system_clock::to_time_t(&__t) - *a1);
}

unint64_t sub_361844(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = 8;
  if (*(unsigned char *)(a2 + 448))
  {
    uint64_t v5 = (uint64_t *)(a1 + 8);
  }
  else
  {
    uint64_t v4 = 32;
    uint64_t v5 = (uint64_t *)(a1 + 32);
  }
  uint64_t v6 = *(void *)(a1 + v4);
  unint64_t v7 = v5[1];
  if (v7 >= v5[2])
  {
    uint64_t v8 = sub_362288(v5, a2);
  }
  else
  {
    sub_3623F8(v5[1], a2);
    uint64_t v8 = v7 + 456;
    v5[1] = v7 + 456;
  }
  unint64_t v76 = 0x823EE08FB823EE09 * ((uint64_t)(v7 - v6) >> 3);
  long long __p = 0;
  v5[1] = v8;
  BOOL v78 = 0;
  uint64_t v79 = 0;
  uint64_t v9 = *(void *)(v2 + 424);
  uint64_t v10 = *(void *)(v2 + 432);
  if (v9 == v10)
  {
    uint64_t v65 = *(unsigned __int8 *)(v2 + 448);
  }
  else
  {
    uint64_t v72 = a1 + 144;
    uint64_t v73 = a1 + 64;
    uint64_t v70 = a1 + 184;
    uint64_t v71 = a1 + 304;
    uint64_t v68 = a1 + 104;
    uint64_t v69 = a1 + 264;
    uint64_t v67 = a1 + 224;
    uint64_t v74 = *(void *)(v2 + 432);
    uint64_t v75 = v2;
    do
    {
      int v12 = __p;
      if (__p != v78)
      {
        while (2)
        {
          switch(*(_DWORD *)(v9 + 8))
          {
            case 0xFFFFFFFF:
              break;
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
              if (*v12 != *(_DWORD *)v9 || v12[1] != *(_DWORD *)(v9 + 4)) {
                goto LABEL_15;
              }
              break;
            default:
LABEL_15:
              v12 += 3;
              if (v12 != v78) {
                continue;
              }
              int v12 = v78;
              break;
          }
          break;
        }
      }
      if (v12 == v78)
      {
        char v13 = *(unsigned char *)(v2 + 448);
        int v14 = *(_DWORD *)(v2 + 404);
        int v15 = *(_DWORD *)(v2 + 408);
        switch(*(_DWORD *)(v9 + 8))
        {
          case 0:
            BOOL v80 = (uint64_t *)v9;
            uint64_t v16 = sub_362C24(v67, (void *)v9, (uint64_t)&unk_20F06E0, &v80);
            uint64_t v17 = v16;
            uint64_t v19 = (char *)v16[4];
            unint64_t v18 = v16[5];
            if ((unint64_t)v19 < v18) {
              goto LABEL_9;
            }
            uint64_t v20 = (void **)(v16 + 3);
            __int16 v21 = (unsigned char *)v16[3];
            uint64_t v22 = (v19 - v21) >> 4;
            unint64_t v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 60) {
              sub_2E00();
            }
            uint64_t v24 = v18 - (void)v21;
            if (v24 >> 3 > v23) {
              unint64_t v23 = v24 >> 3;
            }
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v25 = v23;
            }
            if (v25)
            {
              if (v25 >> 60) {
                sub_188D718();
              }
              int v26 = (char *)operator new(16 * v25);
            }
            else
            {
              int v26 = 0;
            }
            uint64_t v63 = &v26[16 * v22];
            *(_DWORD *)uint64_t v63 = v76;
            v63[4] = v13;
            *((_DWORD *)v63 + 2) = v14;
            *((_DWORD *)v63 + 3) = v15;
            uint64_t v64 = v63;
            if (v19 == v21) {
              goto LABEL_121;
            }
            do
            {
              *((_OWORD *)v64 - 1) = *((_OWORD *)v19 - 1);
              v64 -= 16;
              v19 -= 16;
            }
            while (v19 != v21);
            goto LABEL_120;
          case 1:
            BOOL v80 = (uint64_t *)v9;
            uint64_t v45 = sub_362F9C(v68, (void *)v9, (uint64_t)&unk_20F06E0, &v80);
            uint64_t v17 = v45;
            uint64_t v19 = (char *)v45[4];
            unint64_t v46 = v45[5];
            if ((unint64_t)v19 < v46) {
              goto LABEL_9;
            }
            uint64_t v20 = (void **)(v45 + 3);
            uint64_t v47 = (unsigned char *)v45[3];
            uint64_t v48 = (v19 - v47) >> 4;
            unint64_t v49 = v48 + 1;
            if ((unint64_t)(v48 + 1) >> 60) {
              sub_2E00();
            }
            uint64_t v50 = v46 - (void)v47;
            if (v50 >> 3 > v49) {
              unint64_t v49 = v50 >> 3;
            }
            if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v25 = v49;
            }
            if (v25)
            {
              if (v25 >> 60) {
                sub_188D718();
              }
              int v26 = (char *)operator new(16 * v25);
            }
            else
            {
              int v26 = 0;
            }
            uint64_t v63 = &v26[16 * v48];
            *(_DWORD *)uint64_t v63 = v76;
            v63[4] = v13;
            *((_DWORD *)v63 + 2) = v14;
            *((_DWORD *)v63 + 3) = v15;
            uint64_t v64 = v63;
            if (v19 == v47) {
              goto LABEL_121;
            }
            do
            {
              *((_OWORD *)v64 - 1) = *((_OWORD *)v19 - 1);
              v64 -= 16;
              v19 -= 16;
            }
            while (v19 != v47);
            goto LABEL_120;
          case 2:
            BOOL v80 = (uint64_t *)v9;
            uint64_t v33 = sub_363314(v69, (void *)v9, (uint64_t)&unk_20F06E0, &v80);
            uint64_t v17 = v33;
            uint64_t v19 = (char *)v33[4];
            unint64_t v34 = v33[5];
            if ((unint64_t)v19 < v34) {
              goto LABEL_9;
            }
            uint64_t v20 = (void **)(v33 + 3);
            uint64_t v35 = (unsigned char *)v33[3];
            uint64_t v36 = (v19 - v35) >> 4;
            unint64_t v37 = v36 + 1;
            if ((unint64_t)(v36 + 1) >> 60) {
              sub_2E00();
            }
            uint64_t v38 = v34 - (void)v35;
            if (v38 >> 3 > v37) {
              unint64_t v37 = v38 >> 3;
            }
            if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v25 = v37;
            }
            if (v25)
            {
              if (v25 >> 60) {
                sub_188D718();
              }
              int v26 = (char *)operator new(16 * v25);
            }
            else
            {
              int v26 = 0;
            }
            uint64_t v63 = &v26[16 * v36];
            *(_DWORD *)uint64_t v63 = v76;
            v63[4] = v13;
            *((_DWORD *)v63 + 2) = v14;
            *((_DWORD *)v63 + 3) = v15;
            uint64_t v64 = v63;
            if (v19 == v35) {
              goto LABEL_121;
            }
            do
            {
              *((_OWORD *)v64 - 1) = *((_OWORD *)v19 - 1);
              v64 -= 16;
              v19 -= 16;
            }
            while (v19 != v35);
            goto LABEL_120;
          case 3:
            BOOL v80 = (uint64_t *)v9;
            uint64_t v39 = sub_36368C(v70, (void *)v9, (uint64_t)&unk_20F06E0, &v80);
            uint64_t v17 = v39;
            uint64_t v19 = (char *)v39[4];
            unint64_t v40 = v39[5];
            if ((unint64_t)v19 < v40) {
              goto LABEL_9;
            }
            uint64_t v20 = (void **)(v39 + 3);
            unsigned int v41 = (unsigned char *)v39[3];
            uint64_t v42 = (v19 - v41) >> 4;
            unint64_t v43 = v42 + 1;
            if ((unint64_t)(v42 + 1) >> 60) {
              sub_2E00();
            }
            uint64_t v44 = v40 - (void)v41;
            if (v44 >> 3 > v43) {
              unint64_t v43 = v44 >> 3;
            }
            if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v25 = v43;
            }
            if (v25)
            {
              if (v25 >> 60) {
                sub_188D718();
              }
              int v26 = (char *)operator new(16 * v25);
            }
            else
            {
              int v26 = 0;
            }
            uint64_t v63 = &v26[16 * v42];
            *(_DWORD *)uint64_t v63 = v76;
            v63[4] = v13;
            *((_DWORD *)v63 + 2) = v14;
            *((_DWORD *)v63 + 3) = v15;
            uint64_t v64 = v63;
            if (v19 == v41) {
              goto LABEL_121;
            }
            do
            {
              *((_OWORD *)v64 - 1) = *((_OWORD *)v19 - 1);
              v64 -= 16;
              v19 -= 16;
            }
            while (v19 != v41);
            goto LABEL_120;
          case 4:
            BOOL v80 = (uint64_t *)v9;
            unsigned int v27 = sub_363A04(v71, (void *)v9, (uint64_t)&unk_20F06E0, &v80);
            uint64_t v17 = v27;
            uint64_t v19 = (char *)v27[4];
            unint64_t v28 = v27[5];
            if ((unint64_t)v19 < v28) {
              goto LABEL_9;
            }
            uint64_t v20 = (void **)(v27 + 3);
            BOOL v29 = (unsigned char *)v27[3];
            uint64_t v30 = (v19 - v29) >> 4;
            unint64_t v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 60) {
              sub_2E00();
            }
            uint64_t v32 = v28 - (void)v29;
            if (v32 >> 3 > v31) {
              unint64_t v31 = v32 >> 3;
            }
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v25 = v31;
            }
            if (v25)
            {
              if (v25 >> 60) {
                sub_188D718();
              }
              int v26 = (char *)operator new(16 * v25);
            }
            else
            {
              int v26 = 0;
            }
            uint64_t v63 = &v26[16 * v30];
            *(_DWORD *)uint64_t v63 = v76;
            v63[4] = v13;
            *((_DWORD *)v63 + 2) = v14;
            *((_DWORD *)v63 + 3) = v15;
            uint64_t v64 = v63;
            if (v19 == v29) {
              goto LABEL_121;
            }
            do
            {
              *((_OWORD *)v64 - 1) = *((_OWORD *)v19 - 1);
              v64 -= 16;
              v19 -= 16;
            }
            while (v19 != v29);
            goto LABEL_120;
          case 5:
            BOOL v80 = (uint64_t *)v9;
            unint64_t v51 = sub_363D7C(v72, (void *)v9, (uint64_t)&unk_20F06E0, &v80);
            uint64_t v17 = v51;
            uint64_t v19 = (char *)v51[4];
            unint64_t v52 = v51[5];
            if ((unint64_t)v19 < v52) {
              goto LABEL_9;
            }
            uint64_t v20 = (void **)(v51 + 3);
            double v53 = (unsigned char *)v51[3];
            uint64_t v54 = (v19 - v53) >> 4;
            unint64_t v55 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 60) {
              sub_2E00();
            }
            uint64_t v56 = v52 - (void)v53;
            if (v56 >> 3 > v55) {
              unint64_t v55 = v56 >> 3;
            }
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v25 = v55;
            }
            if (v25)
            {
              if (v25 >> 60) {
                sub_188D718();
              }
              int v26 = (char *)operator new(16 * v25);
            }
            else
            {
              int v26 = 0;
            }
            uint64_t v63 = &v26[16 * v54];
            *(_DWORD *)uint64_t v63 = v76;
            v63[4] = v13;
            *((_DWORD *)v63 + 2) = v14;
            *((_DWORD *)v63 + 3) = v15;
            uint64_t v64 = v63;
            if (v19 == v53) {
              goto LABEL_121;
            }
            do
            {
              *((_OWORD *)v64 - 1) = *((_OWORD *)v19 - 1);
              v64 -= 16;
              v19 -= 16;
            }
            while (v19 != v53);
            goto LABEL_120;
          case 6:
            BOOL v80 = (uint64_t *)v9;
            unint64_t v57 = sub_3640F4(v73, (void *)v9, (uint64_t)&unk_20F06E0, &v80);
            uint64_t v17 = v57;
            uint64_t v19 = (char *)v57[4];
            unint64_t v58 = v57[5];
            if ((unint64_t)v19 < v58)
            {
LABEL_9:
              *(_DWORD *)uint64_t v19 = v76;
              v19[4] = v13;
              unsigned int v11 = v19 + 16;
              *((_DWORD *)v19 + 2) = v14;
              *((_DWORD *)v19 + 3) = v15;
            }
            else
            {
              uint64_t v20 = (void **)(v57 + 3);
              unint64_t v59 = (unsigned char *)v57[3];
              uint64_t v60 = (v19 - v59) >> 4;
              unint64_t v61 = v60 + 1;
              if ((unint64_t)(v60 + 1) >> 60) {
                sub_2E00();
              }
              uint64_t v62 = v58 - (void)v59;
              if (v62 >> 3 > v61) {
                unint64_t v61 = v62 >> 3;
              }
              if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v25 = v61;
              }
              if (v25)
              {
                if (v25 >> 60) {
                  sub_188D718();
                }
                int v26 = (char *)operator new(16 * v25);
              }
              else
              {
                int v26 = 0;
              }
              uint64_t v63 = &v26[16 * v60];
              *(_DWORD *)uint64_t v63 = v76;
              v63[4] = v13;
              *((_DWORD *)v63 + 2) = v14;
              *((_DWORD *)v63 + 3) = v15;
              uint64_t v64 = v63;
              if (v19 != v59)
              {
                do
                {
                  *((_OWORD *)v64 - 1) = *((_OWORD *)v19 - 1);
                  v64 -= 16;
                  v19 -= 16;
                }
                while (v19 != v59);
LABEL_120:
                uint64_t v19 = (char *)*v20;
              }
LABEL_121:
              unsigned int v11 = v63 + 16;
              v17[3] = v64;
              v17[4] = v63 + 16;
              v17[5] = &v26[16 * v25];
              if (v19) {
                operator delete(v19);
              }
            }
            uint64_t v10 = v74;
            uint64_t v2 = v75;
            v17[4] = v11;
LABEL_11:
            sub_362128((char **)&__p, v9);
            break;
          default:
            goto LABEL_11;
        }
      }
      v9 += 104;
    }
    while (v9 != v10);
    uint64_t v65 = *(unsigned __int8 *)(v2 + 448);
    if (__p)
    {
      BOOL v78 = __p;
      operator delete(__p);
    }
  }
  return v76 | (unint64_t)(v65 << 32);
}

void sub_362088(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_362090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_362128(char **a1, uint64_t a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    *((_DWORD *)v5 + 2) = *(_DWORD *)(a2 + 8);
    if (*(_DWORD *)(a2 + 8) <= 6u) {
      *(void *)uint64_t v5 = *(void *)a2;
    }
    uint64_t v6 = v5 + 12;
LABEL_5:
    a1[1] = v6;
    return;
  }
  unint64_t v7 = *a1;
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
  unint64_t v9 = v8 + 1;
  if (v8 + 1 > 0x1555555555555555) {
    sub_2E00();
  }
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)v7) >> 2);
  if (2 * v10 > v9) {
    unint64_t v9 = 2 * v10;
  }
  if (v10 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v11 = 0x1555555555555555;
  }
  else {
    unint64_t v11 = v9;
  }
  if (v11 > 0x1555555555555555) {
    sub_188D718();
  }
  uint64_t v12 = 12 * v11;
  char v13 = (char *)operator new(12 * v11);
  int v14 = &v13[12 * v8];
  unsigned int v15 = *(_DWORD *)(a2 + 8);
  *((_DWORD *)v14 + 2) = v15;
  if (v15 <= 6) {
    *(void *)int v14 = *(void *)a2;
  }
  uint64_t v6 = v14 + 12;
  while (v5 != v7)
  {
    unsigned int v16 = *((_DWORD *)v5 - 1);
    *((_DWORD *)v14 - 1) = v16;
    if (v16 <= 6) {
      *(void *)(v14 - 12) = *(void *)(v5 - 12);
    }
    v14 -= 12;
    v5 -= 12;
  }
  *a1 = v14;
  a1[1] = v6;
  a1[2] = &v13[v12];
  if (!v7) {
    goto LABEL_5;
  }
  operator delete(v7);
  a1[1] = v6;
}

uint64_t sub_362288(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0x823EE08FB823EE09 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x8FB823EE08FB82) {
    sub_2E00();
  }
  if (0x47DC11F7047DC12 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x47DC11F7047DC12 * ((a1[2] - *a1) >> 3);
  }
  if (0x823EE08FB823EE09 * ((a1[2] - *a1) >> 3) >= 0x47DC11F7047DC1) {
    unint64_t v6 = 0x8FB823EE08FB82;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x8FB823EE08FB82) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(456 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v12 = (uint64_t)&v7[456 * v3];
  char v13 = &v7[456 * v6];
  sub_3623F8(v12, a2);
  sub_3629BC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, v12, v12);
  unint64_t v9 = (void *)*a1;
  uint64_t v8 = a1[1];
  *a1 = v10;
  a1[1] = v12 + 456;
  for (a1[2] = (uint64_t)v13; (void *)v8 != v9; uint64_t v8 = sub_361164(v8 - 456))
    ;
  if (v9) {
    operator delete(v9);
  }
  return v12 + 456;
}

void sub_3623E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_362968((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_3623F8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_4200((unsigned char *)(a1 + 16), *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v4;
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_360840((unsigned char *)(a1 + 56), *(void *)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 5);
  if (*(char *)(a2 + 103) < 0)
  {
    sub_4200((unsigned char *)(a1 + 80), *(void **)(a2 + 80), *(void *)(a2 + 88));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = v6;
  }
  long long v7 = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = v7;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  sub_360840((unsigned char *)(a1 + 120), *(void *)(a2 + 120), *(void *)(a2 + 128), (uint64_t)(*(void *)(a2 + 128) - *(void *)(a2 + 120)) >> 5);
  if (*(char *)(a2 + 167) < 0)
  {
    sub_4200((unsigned char *)(a1 + 144), *(void **)(a2 + 144), *(void *)(a2 + 152));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 144);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = v8;
  }
  long long v9 = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 168) = v9;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  sub_360840((unsigned char *)(a1 + 184), *(void *)(a2 + 184), *(void *)(a2 + 192), (uint64_t)(*(void *)(a2 + 192) - *(void *)(a2 + 184)) >> 5);
  if (*(char *)(a2 + 231) < 0)
  {
    sub_4200((unsigned char *)(a1 + 208), *(void **)(a2 + 208), *(void *)(a2 + 216));
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 208);
    *(void *)(a1 + 224) = *(void *)(a2 + 224);
    *(_OWORD *)(a1 + 208) = v10;
  }
  long long v11 = *(_OWORD *)(a2 + 232);
  *(void *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 232) = v11;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  sub_360840((unsigned char *)(a1 + 248), *(void *)(a2 + 248), *(void *)(a2 + 256), (uint64_t)(*(void *)(a2 + 256) - *(void *)(a2 + 248)) >> 5);
  if (*(char *)(a2 + 295) < 0)
  {
    sub_4200((unsigned char *)(a1 + 272), *(void **)(a2 + 272), *(void *)(a2 + 280));
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 272);
    *(void *)(a1 + 288) = *(void *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = v12;
  }
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 312) = 0;
  sub_360840((unsigned char *)(a1 + 312), *(void *)(a2 + 312), *(void *)(a2 + 320), (uint64_t)(*(void *)(a2 + 320) - *(void *)(a2 + 312)) >> 5);
  if (*(char *)(a2 + 359) < 0)
  {
    sub_4200((unsigned char *)(a1 + 336), *(void **)(a2 + 336), *(void *)(a2 + 344));
  }
  else
  {
    long long v13 = *(_OWORD *)(a2 + 336);
    *(void *)(a1 + 352) = *(void *)(a2 + 352);
    *(_OWORD *)(a1 + 336) = v13;
  }
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 376) = 0;
  sub_360840((unsigned char *)(a1 + 376), *(void *)(a2 + 376), *(void *)(a2 + 384), (uint64_t)(*(void *)(a2 + 384) - *(void *)(a2 + 376)) >> 5);
  uint64_t v14 = *(void *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(void *)(a1 + 416) = v14;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  sub_36279C(a1 + 424, *(void *)(a2 + 424), *(void *)(a2 + 432), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a2 + 432) - *(void *)(a2 + 424)) >> 3));
  *(_WORD *)(a1 + 448) = *(_WORD *)(a2 + 448);
  return a1;
}

void sub_36268C(_Unwind_Exception *a1)
{
  sub_35EA08(v5);
  sub_35EA08(v4);
  sub_35EA08(v3);
  sub_35EA08(v2);
  sub_35EA08(v1);
  _Unwind_Resume(a1);
}

void sub_362714()
{
  if (*(char *)(v0 + 295) < 0) {
    operator delete(*v1);
  }
  JUMPOUT(0x3626ECLL);
}

void sub_36272C()
{
  if (*(char *)(v0 + 231) < 0) {
    operator delete(*v1);
  }
  JUMPOUT(0x3626F4);
}

void sub_362744()
{
  if (*(char *)(v0 + 167) < 0) {
    operator delete(*v1);
  }
  JUMPOUT(0x3626FCLL);
}

void sub_36275C(_Unwind_Exception *a1)
{
  if (*(char *)(v3 + 103) < 0)
  {
    operator delete(*v2);
    sub_35EA08(v1);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x362704);
}

void sub_362780(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 39) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_36279C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = (void *)result;
    if (a4 >= 0x276276276276277) {
      sub_2E00();
    }
    __n128 result = (uint64_t)operator new(104 * a4);
    uint64_t v8 = result;
    *uint64_t v5 = result;
    v5[1] = result;
    v5[2] = result + 104 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = v8 + v9;
        uint64_t v11 = a2 + v9;
        unsigned int v12 = *(_DWORD *)(a2 + v9 + 8);
        *(_DWORD *)(v8 + v9 + 8) = v12;
        if (v12 <= 6) {
          *(void *)uint64_t v10 = *(void *)v11;
        }
        int v13 = *(unsigned __int8 *)(v11 + 96);
        *(unsigned char *)(v10 + 96) = v13;
        if (v13) {
          __n128 result = sub_360E8C(v8 + v9 + 16, a2 + v9 + 16);
        }
        v9 += 104;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_362894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void ***sub_3628AC(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (char *)**result;
    if (v3)
    {
      uint64_t v4 = (char *)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*(v4 - 8))
          {
            long long v6 = (void *)*((void *)v4 - 4);
            if (v6)
            {
              *((void *)v4 - 3) = v6;
              operator delete(v6);
            }
            long long v7 = (void *)*((void *)v4 - 7);
            if (v7)
            {
              *((void *)v4 - 6) = v7;
              operator delete(v7);
            }
            uint64_t v8 = (void *)*((void *)v4 - 11);
            if (v8)
            {
              *((void *)v4 - 10) = v8;
              operator delete(v8);
            }
            *(v4 - 8) = 0;
          }
          v4 -= 104;
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_362968(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 456;
    sub_361164(i - 456);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 sub_3629BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      uint64_t v9 = a3 + v7;
      *(_OWORD *)(a7 + v7 - 456) = *(_OWORD *)(a3 + v7 - 456);
      uint64_t v10 = a3 + v7 - 440;
      uint64_t v11 = a7 + v7 - 440;
      long long v12 = *(_OWORD *)v10;
      *(void *)(v11 + 16) = *(void *)(a3 + v7 - 424);
      *(_OWORD *)uint64_t v11 = v12;
      *(void *)(v10 + 8) = 0;
      *(void *)(v10 + 16) = 0;
      *(void *)uint64_t v10 = 0;
      int v13 = (void *)(a7 + v7 - 400);
      *(_OWORD *)(a7 + v7 - 416) = *(_OWORD *)(a3 + v7 - 416);
      uint64_t v14 = a3 + v7 - 400;
      v13[1] = 0;
      void v13[2] = 0;
      *int v13 = 0;
      *(_OWORD *)int v13 = *(_OWORD *)v14;
      *(void *)(a7 + v7 - 384) = *(void *)(a3 + v7 - 384);
      *(void *)(a3 + v7 - 392) = 0;
      *(void *)uint64_t v14 = 0;
      uint64_t v15 = a7 + v7 - 376;
      uint64_t v16 = a3 + v7 - 376;
      long long v17 = *(_OWORD *)v16;
      uint64_t v18 = *(void *)(a3 + v7 - 360);
      *(void *)(v14 + 16) = 0;
      *(void *)(v15 + 16) = v18;
      *(_OWORD *)uint64_t v15 = v17;
      *(void *)(v16 + 8) = 0;
      *(void *)(v16 + 16) = 0;
      *(void *)uint64_t v16 = 0;
      long long v19 = *(_OWORD *)(a3 + v7 - 352);
      uint64_t v20 = (void *)(a7 + v7 - 336);
      uint64_t v21 = a3 + v7 - 336;
      v20[1] = 0;
      v20[2] = 0;
      *(_OWORD *)(a7 + v7 - 352) = v19;
      void *v20 = 0;
      *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
      *(void *)(a7 + v7 - 320) = *(void *)(a3 + v7 - 320);
      *(void *)(a3 + v7 - 328) = 0;
      *(void *)uint64_t v21 = 0;
      *(void *)(v21 + 16) = 0;
      uint64_t v22 = a7 + v7 - 312;
      uint64_t v23 = a3 + v7 - 312;
      long long v24 = *(_OWORD *)v23;
      *(void *)(v22 + 16) = *(void *)(a3 + v7 - 296);
      *(_OWORD *)uint64_t v22 = v24;
      *(void *)(v23 + 8) = 0;
      *(void *)(v23 + 16) = 0;
      long long v25 = *(_OWORD *)(a3 + v7 - 288);
      *(void *)uint64_t v23 = 0;
      int v26 = (void *)(a7 + v7 - 272);
      unsigned int v27 = (_OWORD *)(a3 + v7 - 272);
      *(void *)(v8 - 256) = 0;
      *int v26 = 0;
      v26[1] = 0;
      *(_OWORD *)(a7 + v7 - 288) = v25;
      *(_OWORD *)int v26 = *v27;
      *(void *)(v8 - 256) = *(void *)(a3 + v7 - 256);
      *(void *)(a3 + v7 - 264) = 0;
      *(void *)unsigned int v27 = 0;
      *(void *)(v9 - 256) = 0;
      long long v28 = *(_OWORD *)(a3 + v7 - 248);
      *(void *)(v8 - 232) = *(void *)(a3 + v7 - 232);
      *(_OWORD *)(v8 - 248) = v28;
      *(void *)(v9 - 240) = 0;
      *(void *)(v9 - 232) = 0;
      *(void *)(v9 - 248) = 0;
      long long v29 = *(_OWORD *)(a3 + v7 - 224);
      *(void *)(v8 - 200) = 0;
      *(void *)(v8 - 192) = 0;
      *(_OWORD *)(v8 - 224) = v29;
      *(void *)(v8 - 208) = 0;
      *(_OWORD *)(v8 - 208) = *(_OWORD *)(a3 + v7 - 208);
      *(void *)(v8 - 192) = *(void *)(a3 + v7 - 192);
      *(void *)(v9 - 208) = 0;
      *(void *)(v9 - 200) = 0;
      *(void *)(v9 - 192) = 0;
      long long v30 = *(_OWORD *)(a3 + v7 - 184);
      *(void *)(v8 - 168) = *(void *)(a3 + v7 - 168);
      *(_OWORD *)(v8 - 184) = v30;
      *(void *)(v9 - 176) = 0;
      *(void *)(v9 - 168) = 0;
      *(void *)(v9 - 184) = 0;
      *(_OWORD *)(v8 - 160) = *(_OWORD *)(a3 + v7 - 160);
      *(void *)(v8 - 136) = 0;
      *(void *)(v8 - 128) = 0;
      *(void *)(v8 - 144) = 0;
      *(_OWORD *)(v8 - 144) = *(_OWORD *)(a3 + v7 - 144);
      *(void *)(v8 - 128) = *(void *)(a3 + v7 - 128);
      *(void *)(v9 - 144) = 0;
      *(void *)(v9 - 136) = 0;
      long long v31 = *(_OWORD *)(a3 + v7 - 120);
      uint64_t v32 = *(void *)(a3 + v7 - 104);
      *(void *)(v9 - 128) = 0;
      *(void *)(v8 - 104) = v32;
      *(_OWORD *)(v8 - 120) = v31;
      *(void *)(v9 - 112) = 0;
      *(void *)(v9 - 104) = 0;
      long long v33 = *(_OWORD *)(a3 + v7 - 96);
      *(void *)(v9 - 120) = 0;
      *(_OWORD *)(v8 - 96) = v33;
      *(void *)(v8 - 72) = 0;
      *(void *)(v8 - 64) = 0;
      *(void *)(v8 - 80) = 0;
      *(_OWORD *)(v8 - 80) = *(_OWORD *)(a3 + v7 - 80);
      *(void *)(v8 - 64) = *(void *)(a3 + v7 - 64);
      *(void *)(v9 - 80) = 0;
      *(void *)(v9 - 72) = 0;
      *(void *)(v9 - 64) = 0;
      uint64_t v34 = *(void *)(a3 + v7 - 40);
      *(_OWORD *)(v8 - 56) = *(_OWORD *)(a3 + v7 - 56);
      *(void *)(v8 - 24) = 0;
      *(void *)(v8 - 16) = 0;
      *(void *)(v8 - 40) = v34;
      *(void *)(v8 - 32) = 0;
      __n128 result = *(__n128 *)(a3 + v7 - 32);
      *(__n128 *)(v8 - 32) = result;
      *(void *)(v8 - 16) = *(void *)(a3 + v7 - 16);
      *(void *)(v9 - 32) = 0;
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      *(_WORD *)(v8 - 8) = *(_WORD *)(a3 + v7 - 8);
      v7 -= 456;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

void *sub_362C24(uint64_t a1, void *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = __ROR8__(*a2, 32);
  unint64_t v9 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) >> 33));
  unint64_t v10 = v9 ^ (v9 >> 33);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9 ^ (v9 >> 33);
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    int v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v14[1];
            if (v17 == v10)
            {
              if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == HIDWORD(v7)) {
                return v14;
              }
            }
            else if ((v17 & (v11 - 1)) != v4)
            {
              goto LABEL_31;
            }
            uint64_t v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == HIDWORD(v7)) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_31:
  long long v19 = (void *)(a1 + 16);
  uint64_t v14 = operator new(0x30uLL);
  *uint64_t v14 = 0;
  v14[1] = v10;
  uint64_t v20 = **a4;
  v14[4] = 0;
  v14[5] = 0;
  v14[2] = v20;
  v14[3] = 0;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (v11 && (float)(v22 * (float)v11) >= v21)
  {
    uint64_t v23 = *(void *)a1;
    long long v24 = *(void **)(*(void *)a1 + 8 * v4);
    if (v24)
    {
LABEL_34:
      *uint64_t v14 = *v24;
LABEL_69:
      *long long v24 = v14;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v25 = 1;
    if (v11 >= 3) {
      BOOL v25 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v11);
    unint64_t v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_45;
    }
    if (prime < v11)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < v11) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v32 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v23 = *(void *)a1;
        long long v24 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v24) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v23 = *(void *)a1;
        long long v24 = *(void **)(*(void *)a1 + 8 * v10);
        if (v24) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v32 & v10;
      uint64_t v23 = *(void *)a1;
      long long v24 = *(void **)(*(void *)a1 + 8 * (v32 & v10));
      if (v24) {
        goto LABEL_34;
      }
    }
  }
  *uint64_t v14 = *v19;
  void *v19 = v14;
  *(void *)(v23 + 8 * v4) = v19;
  if (*v14)
  {
    unint64_t v33 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v33 >= v11) {
        v33 %= v11;
      }
    }
    else
    {
      v33 &= v11 - 1;
    }
    long long v24 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_362F88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3AEA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_362F9C(uint64_t a1, void *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = __ROR8__(*a2, 32);
  unint64_t v9 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) >> 33));
  unint64_t v10 = v9 ^ (v9 >> 33);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9 ^ (v9 >> 33);
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    int v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v14[1];
            if (v17 == v10)
            {
              if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == HIDWORD(v7)) {
                return v14;
              }
            }
            else if ((v17 & (v11 - 1)) != v4)
            {
              goto LABEL_31;
            }
            uint64_t v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == HIDWORD(v7)) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_31:
  long long v19 = (void *)(a1 + 16);
  uint64_t v14 = operator new(0x30uLL);
  *uint64_t v14 = 0;
  v14[1] = v10;
  uint64_t v20 = **a4;
  v14[4] = 0;
  v14[5] = 0;
  v14[2] = v20;
  v14[3] = 0;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (v11 && (float)(v22 * (float)v11) >= v21)
  {
    uint64_t v23 = *(void *)a1;
    long long v24 = *(void **)(*(void *)a1 + 8 * v4);
    if (v24)
    {
LABEL_34:
      *uint64_t v14 = *v24;
LABEL_69:
      *long long v24 = v14;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v25 = 1;
    if (v11 >= 3) {
      BOOL v25 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v11);
    unint64_t v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_45;
    }
    if (prime < v11)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < v11) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v32 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v23 = *(void *)a1;
        long long v24 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v24) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v23 = *(void *)a1;
        long long v24 = *(void **)(*(void *)a1 + 8 * v10);
        if (v24) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v32 & v10;
      uint64_t v23 = *(void *)a1;
      long long v24 = *(void **)(*(void *)a1 + 8 * (v32 & v10));
      if (v24) {
        goto LABEL_34;
      }
    }
  }
  *uint64_t v14 = *v19;
  void *v19 = v14;
  *(void *)(v23 + 8 * v4) = v19;
  if (*v14)
  {
    unint64_t v33 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v33 >= v11) {
        v33 %= v11;
      }
    }
    else
    {
      v33 &= v11 - 1;
    }
    long long v24 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_363300(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3AEA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_363314(uint64_t a1, void *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = __ROR8__(*a2, 32);
  unint64_t v9 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) >> 33));
  unint64_t v10 = v9 ^ (v9 >> 33);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9 ^ (v9 >> 33);
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    int v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v14[1];
            if (v17 == v10)
            {
              if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == HIDWORD(v7)) {
                return v14;
              }
            }
            else if ((v17 & (v11 - 1)) != v4)
            {
              goto LABEL_31;
            }
            uint64_t v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == HIDWORD(v7)) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_31:
  long long v19 = (void *)(a1 + 16);
  uint64_t v14 = operator new(0x30uLL);
  *uint64_t v14 = 0;
  v14[1] = v10;
  uint64_t v20 = **a4;
  v14[4] = 0;
  v14[5] = 0;
  v14[2] = v20;
  v14[3] = 0;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (v11 && (float)(v22 * (float)v11) >= v21)
  {
    uint64_t v23 = *(void *)a1;
    long long v24 = *(void **)(*(void *)a1 + 8 * v4);
    if (v24)
    {
LABEL_34:
      *uint64_t v14 = *v24;
LABEL_69:
      *long long v24 = v14;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v25 = 1;
    if (v11 >= 3) {
      BOOL v25 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v11);
    unint64_t v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_45;
    }
    if (prime < v11)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < v11) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v32 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v23 = *(void *)a1;
        long long v24 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v24) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v23 = *(void *)a1;
        long long v24 = *(void **)(*(void *)a1 + 8 * v10);
        if (v24) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v32 & v10;
      uint64_t v23 = *(void *)a1;
      long long v24 = *(void **)(*(void *)a1 + 8 * (v32 & v10));
      if (v24) {
        goto LABEL_34;
      }
    }
  }
  *uint64_t v14 = *v19;
  void *v19 = v14;
  *(void *)(v23 + 8 * v4) = v19;
  if (*v14)
  {
    unint64_t v33 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v33 >= v11) {
        v33 %= v11;
      }
    }
    else
    {
      v33 &= v11 - 1;
    }
    long long v24 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_363678(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3AEA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_36368C(uint64_t a1, void *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = __ROR8__(*a2, 32);
  unint64_t v9 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) >> 33));
  unint64_t v10 = v9 ^ (v9 >> 33);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9 ^ (v9 >> 33);
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    int v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v14[1];
            if (v17 == v10)
            {
              if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == HIDWORD(v7)) {
                return v14;
              }
            }
            else if ((v17 & (v11 - 1)) != v4)
            {
              goto LABEL_31;
            }
            uint64_t v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == HIDWORD(v7)) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_31:
  long long v19 = (void *)(a1 + 16);
  uint64_t v14 = operator new(0x30uLL);
  *uint64_t v14 = 0;
  v14[1] = v10;
  uint64_t v20 = **a4;
  v14[4] = 0;
  v14[5] = 0;
  v14[2] = v20;
  v14[3] = 0;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (v11 && (float)(v22 * (float)v11) >= v21)
  {
    uint64_t v23 = *(void *)a1;
    long long v24 = *(void **)(*(void *)a1 + 8 * v4);
    if (v24)
    {
LABEL_34:
      *uint64_t v14 = *v24;
LABEL_69:
      *long long v24 = v14;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v25 = 1;
    if (v11 >= 3) {
      BOOL v25 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v11);
    unint64_t v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_45;
    }
    if (prime < v11)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < v11) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v32 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v23 = *(void *)a1;
        long long v24 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v24) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v23 = *(void *)a1;
        long long v24 = *(void **)(*(void *)a1 + 8 * v10);
        if (v24) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v32 & v10;
      uint64_t v23 = *(void *)a1;
      long long v24 = *(void **)(*(void *)a1 + 8 * (v32 & v10));
      if (v24) {
        goto LABEL_34;
      }
    }
  }
  *uint64_t v14 = *v19;
  void *v19 = v14;
  *(void *)(v23 + 8 * v4) = v19;
  if (*v14)
  {
    unint64_t v33 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v33 >= v11) {
        v33 %= v11;
      }
    }
    else
    {
      v33 &= v11 - 1;
    }
    long long v24 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_3639F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3AEA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_363A04(uint64_t a1, void *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = __ROR8__(*a2, 32);
  unint64_t v9 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) >> 33));
  unint64_t v10 = v9 ^ (v9 >> 33);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9 ^ (v9 >> 33);
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    int v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v14[1];
            if (v17 == v10)
            {
              if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == HIDWORD(v7)) {
                return v14;
              }
            }
            else if ((v17 & (v11 - 1)) != v4)
            {
              goto LABEL_31;
            }
            uint64_t v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == HIDWORD(v7)) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_31:
  long long v19 = (void *)(a1 + 16);
  uint64_t v14 = operator new(0x30uLL);
  *uint64_t v14 = 0;
  v14[1] = v10;
  uint64_t v20 = **a4;
  v14[4] = 0;
  v14[5] = 0;
  v14[2] = v20;
  v14[3] = 0;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (v11 && (float)(v22 * (float)v11) >= v21)
  {
    uint64_t v23 = *(void *)a1;
    long long v24 = *(void **)(*(void *)a1 + 8 * v4);
    if (v24)
    {
LABEL_34:
      *uint64_t v14 = *v24;
LABEL_69:
      *long long v24 = v14;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v25 = 1;
    if (v11 >= 3) {
      BOOL v25 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v11);
    unint64_t v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_45;
    }
    if (prime < v11)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < v11) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v32 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v23 = *(void *)a1;
        long long v24 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v24) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v23 = *(void *)a1;
        long long v24 = *(void **)(*(void *)a1 + 8 * v10);
        if (v24) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v32 & v10;
      uint64_t v23 = *(void *)a1;
      long long v24 = *(void **)(*(void *)a1 + 8 * (v32 & v10));
      if (v24) {
        goto LABEL_34;
      }
    }
  }
  *uint64_t v14 = *v19;
  void *v19 = v14;
  *(void *)(v23 + 8 * v4) = v19;
  if (*v14)
  {
    unint64_t v33 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v33 >= v11) {
        v33 %= v11;
      }
    }
    else
    {
      v33 &= v11 - 1;
    }
    long long v24 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_363D68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3AEA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_363D7C(uint64_t a1, void *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = __ROR8__(*a2, 32);
  unint64_t v9 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) >> 33));
  unint64_t v10 = v9 ^ (v9 >> 33);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9 ^ (v9 >> 33);
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    int v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v14[1];
            if (v17 == v10)
            {
              if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == HIDWORD(v7)) {
                return v14;
              }
            }
            else if ((v17 & (v11 - 1)) != v4)
            {
              goto LABEL_31;
            }
            uint64_t v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == HIDWORD(v7)) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_31:
  long long v19 = (void *)(a1 + 16);
  uint64_t v14 = operator new(0x30uLL);
  *uint64_t v14 = 0;
  v14[1] = v10;
  uint64_t v20 = **a4;
  v14[4] = 0;
  v14[5] = 0;
  v14[2] = v20;
  v14[3] = 0;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (v11 && (float)(v22 * (float)v11) >= v21)
  {
    uint64_t v23 = *(void *)a1;
    long long v24 = *(void **)(*(void *)a1 + 8 * v4);
    if (v24)
    {
LABEL_34:
      *uint64_t v14 = *v24;
LABEL_69:
      *long long v24 = v14;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v25 = 1;
    if (v11 >= 3) {
      BOOL v25 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v11);
    unint64_t v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_45;
    }
    if (prime < v11)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < v11) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v32 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v23 = *(void *)a1;
        long long v24 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v24) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v23 = *(void *)a1;
        long long v24 = *(void **)(*(void *)a1 + 8 * v10);
        if (v24) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v32 & v10;
      uint64_t v23 = *(void *)a1;
      long long v24 = *(void **)(*(void *)a1 + 8 * (v32 & v10));
      if (v24) {
        goto LABEL_34;
      }
    }
  }
  *uint64_t v14 = *v19;
  void *v19 = v14;
  *(void *)(v23 + 8 * v4) = v19;
  if (*v14)
  {
    unint64_t v33 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v33 >= v11) {
        v33 %= v11;
      }
    }
    else
    {
      v33 &= v11 - 1;
    }
    long long v24 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_3640E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3AEA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_3640F4(uint64_t a1, void *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = __ROR8__(*a2, 32);
  unint64_t v9 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) >> 33));
  unint64_t v10 = v9 ^ (v9 >> 33);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9 ^ (v9 >> 33);
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    int v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v14[1];
            if (v17 == v10)
            {
              if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == HIDWORD(v7)) {
                return v14;
              }
            }
            else if ((v17 & (v11 - 1)) != v4)
            {
              goto LABEL_31;
            }
            uint64_t v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == HIDWORD(v7)) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_31:
  long long v19 = (void *)(a1 + 16);
  uint64_t v14 = operator new(0x30uLL);
  *uint64_t v14 = 0;
  v14[1] = v10;
  uint64_t v20 = **a4;
  v14[4] = 0;
  v14[5] = 0;
  v14[2] = v20;
  v14[3] = 0;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (v11 && (float)(v22 * (float)v11) >= v21)
  {
    uint64_t v23 = *(void *)a1;
    long long v24 = *(void **)(*(void *)a1 + 8 * v4);
    if (v24)
    {
LABEL_34:
      *uint64_t v14 = *v24;
LABEL_69:
      *long long v24 = v14;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v25 = 1;
    if (v11 >= 3) {
      BOOL v25 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v11);
    unint64_t v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_45;
    }
    if (prime < v11)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < v11) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v32 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v23 = *(void *)a1;
        long long v24 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v24) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v23 = *(void *)a1;
        long long v24 = *(void **)(*(void *)a1 + 8 * v10);
        if (v24) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v32 & v10;
      uint64_t v23 = *(void *)a1;
      long long v24 = *(void **)(*(void *)a1 + 8 * (v32 & v10));
      if (v24) {
        goto LABEL_34;
      }
    }
  }
  *uint64_t v14 = *v19;
  void *v19 = v14;
  *(void *)(v23 + 8 * v4) = v19;
  if (*v14)
  {
    unint64_t v33 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v33 >= v11) {
        v33 %= v11;
      }
    }
    else
    {
      v33 &= v11 - 1;
    }
    long long v24 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_364458(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3AEA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_36446C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_725D0((uint64_t)v25);
  sub_2A239C((uint64_t)v23, a1);
  long long v6 = operator new(0x170uLL);
  v6[1] = 0;
  v6[2] = 0;
  *long long v6 = off_2438A60;
  *a3 = sub_36175C((uint64_t)(v6 + 3), 1);
  a3[1] = (uint64_t)v6;
  uint64_t v7 = *(void *)(a2 + 32);
  if (v7) {
    unint64_t v8 = (uint64_t *)(v7 + 8);
  }
  else {
    unint64_t v8 = 0;
  }
  uint64_t v9 = *(int *)(a2 + 24);
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 8 * v9;
    do
    {
      uint64_t v12 = *v8;
      sub_36064C((uint64_t)v21);
      sub_35EC70((uint64_t)v23, v12, (uint64_t)__p);
      sub_3648AC((uint64_t)v21, (uint64_t)__p);
      sub_361164((uint64_t)__p);
      if (sub_3664B8((uint64_t)v21)) {
        sub_361844(*a3, (uint64_t)v21);
      }
      else {
        ++v10;
      }
      sub_361164((uint64_t)v21);
      ++v8;
      v11 -= 8;
    }
    while (v11);
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v21);
    sub_188FC78(v21, (uint64_t)"Adapted Protobuffer transit incident data snapshot in ", 54);
    sub_72688((uint64_t)v25);
    int v13 = (void *)std::ostream::operator<<();
    sub_188FC78(v13, (uint64_t)" ms, containing ", 16);
    uint64_t v14 = (void *)std::ostream::operator<<();
    sub_188FC78(v14, (uint64_t)" blocking incidents, ", 21);
    unint64_t v15 = (void *)std::ostream::operator<<();
    sub_188FC78(v15, (uint64_t)" non-blocking incidents, ", 25);
    uint64_t v16 = (void *)std::ostream::operator<<();
    sub_188FC78(v16, (uint64_t)" invalid (expired) incidents; ", 30);
    uint64_t v17 = (void *)std::ostream::operator<<();
    sub_188FC78(v17, (uint64_t)" Protobuffer incidents failed to parse", 38);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    if (v22 < 0) {
      operator delete((void *)v21[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  uint64_t v18 = v24;
  if (v24)
  {
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_3647EC()
{
}

uint64_t sub_3648AC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = a1 + 16;
  uint64_t v5 = (long long *)(a2 + 16);
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)v4);
  }
  long long v6 = *v5;
  *(void *)(v4 + 16) = *((void *)v5 + 2);
  *(_OWORD *)uint64_t v4 = v6;
  *(unsigned char *)(a2 + 39) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  uint64_t v7 = (void **)(a1 + 56);
  unint64_t v8 = *(void ***)(a1 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  if (v8)
  {
    uint64_t v9 = *(void ***)(a1 + 64);
    uint64_t v10 = v8;
    if (v9 != v8)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 4;
      }
      while (v9 != v8);
      uint64_t v10 = *v7;
    }
    *(void *)(a1 + 64) = v8;
    operator delete(v10);
    *uint64_t v7 = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v11 = (void **)(a1 + 80);
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*v11);
  }
  long long v12 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)uint64_t v11 = v12;
  *(unsigned char *)(a2 + 103) = 0;
  *(unsigned char *)(a2 + 80) = 0;
  int v13 = (void **)(a1 + 120);
  uint64_t v14 = *(void ***)(a1 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  if (v14)
  {
    unint64_t v15 = *(void ***)(a1 + 128);
    uint64_t v16 = v14;
    if (v15 != v14)
    {
      do
      {
        if (*((char *)v15 - 1) < 0) {
          operator delete(*(v15 - 3));
        }
        v15 -= 4;
      }
      while (v15 != v14);
      uint64_t v16 = *v13;
    }
    *(void *)(a1 + 128) = v14;
    operator delete(v16);
    *int v13 = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
  }
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  uint64_t v17 = (void **)(a1 + 144);
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*v17);
  }
  long long v18 = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_OWORD *)uint64_t v17 = v18;
  *(unsigned char *)(a2 + 167) = 0;
  *(unsigned char *)(a2 + 144) = 0;
  long long v19 = (void **)(a1 + 184);
  char v20 = *(void ***)(a1 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  if (v20)
  {
    float v21 = *(void ***)(a1 + 192);
    char v22 = v20;
    if (v21 != v20)
    {
      do
      {
        if (*((char *)v21 - 1) < 0) {
          operator delete(*(v21 - 3));
        }
        v21 -= 4;
      }
      while (v21 != v20);
      char v22 = *v19;
    }
    *(void *)(a1 + 192) = v20;
    operator delete(v22);
    void *v19 = 0;
    *(void *)(a1 + 192) = 0;
    *(void *)(a1 + 200) = 0;
  }
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  uint64_t v23 = (void **)(a1 + 208);
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*v23);
  }
  long long v24 = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(_OWORD *)uint64_t v23 = v24;
  *(unsigned char *)(a2 + 231) = 0;
  *(unsigned char *)(a2 + 208) = 0;
  BOOL v25 = (void **)(a1 + 248);
  unint64_t v26 = *(void ***)(a1 + 248);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  if (v26)
  {
    unint64_t v27 = *(void ***)(a1 + 256);
    long long v28 = v26;
    if (v27 != v26)
    {
      do
      {
        if (*((char *)v27 - 1) < 0) {
          operator delete(*(v27 - 3));
        }
        v27 -= 4;
      }
      while (v27 != v26);
      long long v28 = *v25;
    }
    *(void *)(a1 + 256) = v26;
    operator delete(v28);
    *BOOL v25 = 0;
    *(void *)(a1 + 256) = 0;
    *(void *)(a1 + 264) = 0;
  }
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a2 + 248) = 0;
  *(void *)(a2 + 256) = 0;
  *(void *)(a2 + 264) = 0;
  unint64_t v29 = (void **)(a1 + 272);
  if (*(char *)(a1 + 295) < 0) {
    operator delete(*v29);
  }
  long long v30 = *(_OWORD *)(a2 + 272);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(_OWORD *)unint64_t v29 = v30;
  *(unsigned char *)(a2 + 295) = 0;
  *(unsigned char *)(a2 + 272) = 0;
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  uint64_t v31 = *(void *)(a1 + 312);
  if (v31)
  {
    unint64_t v32 = (void **)(a1 + 312);
    uint64_t v33 = *(void *)(a1 + 320);
    uint64_t v34 = *(void **)(a1 + 312);
    if (v33 != v31)
    {
      do
      {
        if (*(char *)(v33 - 1) < 0) {
          operator delete(*(void **)(v33 - 24));
        }
        v33 -= 32;
      }
      while (v33 != v31);
      uint64_t v34 = *v32;
    }
    *(void *)(a1 + 320) = v31;
    operator delete(v34);
    char *v32 = 0;
    *(void *)(a1 + 320) = 0;
    *(void *)(a1 + 328) = 0;
  }
  uint64_t v35 = *(void *)(a2 + 320);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(void *)(a1 + 320) = v35;
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(void *)(a2 + 312) = 0;
  *(void *)(a2 + 320) = 0;
  *(void *)(a2 + 328) = 0;
  uint64_t v36 = (void **)(a1 + 336);
  if (*(char *)(a1 + 359) < 0) {
    operator delete(*v36);
  }
  long long v37 = *(_OWORD *)(a2 + 336);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  *(_OWORD *)uint64_t v36 = v37;
  *(unsigned char *)(a2 + 359) = 0;
  *(unsigned char *)(a2 + 336) = 0;
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  uint64_t v38 = *(void *)(a1 + 376);
  if (v38)
  {
    uint64_t v39 = (void **)(a1 + 376);
    uint64_t v40 = *(void *)(a1 + 384);
    unsigned int v41 = *(void **)(a1 + 376);
    if (v40 != v38)
    {
      do
      {
        if (*(char *)(v40 - 1) < 0) {
          operator delete(*(void **)(v40 - 24));
        }
        v40 -= 32;
      }
      while (v40 != v38);
      unsigned int v41 = *v39;
    }
    *(void *)(a1 + 384) = v38;
    operator delete(v41);
    *uint64_t v39 = 0;
    *(void *)(a1 + 384) = 0;
    *(void *)(a1 + 392) = 0;
  }
  uint64_t v42 = *(void *)(a2 + 384);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a1 + 384) = v42;
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  *(void *)(a2 + 376) = 0;
  *(void *)(a2 + 384) = 0;
  *(void *)(a2 + 392) = 0;
  long long v43 = *(_OWORD *)(a2 + 400);
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = v43;
  sub_364CF0((void **)(a1 + 424), (__n128 *)(a2 + 424));
  *(_WORD *)(a1 + 448) = *(_WORD *)(a2 + 448);
  return a1;
}

__n128 sub_364CF0(void **a1, __n128 *a2)
{
  uint64_t v4 = (char *)*a1;
  if (*a1)
  {
    uint64_t v5 = (char *)a1[1];
    long long v6 = *a1;
    if (v5 != v4)
    {
      do
      {
        if (*(v5 - 8))
        {
          uint64_t v7 = (void *)*((void *)v5 - 4);
          if (v7)
          {
            *((void *)v5 - 3) = v7;
            operator delete(v7);
          }
          unint64_t v8 = (void *)*((void *)v5 - 7);
          if (v8)
          {
            *((void *)v5 - 6) = v8;
            operator delete(v8);
          }
          uint64_t v9 = (void *)*((void *)v5 - 11);
          if (v9)
          {
            *((void *)v5 - 10) = v9;
            operator delete(v9);
          }
          *(v5 - 8) = 0;
        }
        v5 -= 104;
      }
      while (v5 != v4);
      long long v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  a1[2] = (void *)a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void sub_364DA8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_2438A60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_364DC8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_2438A60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void *sub_364E1C(uint64_t a1)
{
  return sub_364E28((void *)(a1 + 24));
}

void *sub_364E28(void *a1)
{
  uint64_t v2 = (void *)a1[40];
  if (v2)
  {
    do
    {
      uint64_t v23 = (void *)*v2;
      long long v24 = (void *)v2[3];
      if (v24)
      {
        v2[4] = v24;
        operator delete(v24);
      }
      operator delete(v2);
      uint64_t v2 = v23;
    }
    while (v23);
  }
  uint64_t v3 = (void *)a1[38];
  a1[38] = 0;
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[35];
  if (v4)
  {
    do
    {
      BOOL v25 = (void *)*v4;
      unint64_t v26 = (void *)v4[3];
      if (v26)
      {
        void v4[4] = v26;
        operator delete(v26);
      }
      operator delete(v4);
      uint64_t v4 = v25;
    }
    while (v25);
  }
  uint64_t v5 = (void *)a1[33];
  a1[33] = 0;
  if (v5) {
    operator delete(v5);
  }
  long long v6 = (void *)a1[30];
  if (v6)
  {
    do
    {
      unint64_t v27 = (void *)*v6;
      long long v28 = (void *)v6[3];
      if (v28)
      {
        v6[4] = v28;
        operator delete(v28);
      }
      operator delete(v6);
      long long v6 = v27;
    }
    while (v27);
  }
  uint64_t v7 = (void *)a1[28];
  a1[28] = 0;
  if (v7) {
    operator delete(v7);
  }
  unint64_t v8 = (void *)a1[25];
  if (v8)
  {
    do
    {
      unint64_t v29 = (void *)*v8;
      long long v30 = (void *)v8[3];
      if (v30)
      {
        void v8[4] = v30;
        operator delete(v30);
      }
      operator delete(v8);
      unint64_t v8 = v29;
    }
    while (v29);
  }
  uint64_t v9 = (void *)a1[23];
  a1[23] = 0;
  if (v9) {
    operator delete(v9);
  }
  uint64_t v10 = (void *)a1[20];
  if (v10)
  {
    do
    {
      uint64_t v31 = (void *)*v10;
      unint64_t v32 = (void *)v10[3];
      if (v32)
      {
        v10[4] = v32;
        operator delete(v32);
      }
      operator delete(v10);
      uint64_t v10 = v31;
    }
    while (v31);
  }
  uint64_t v11 = (void *)a1[18];
  a1[18] = 0;
  if (v11) {
    operator delete(v11);
  }
  long long v12 = (void *)a1[15];
  if (v12)
  {
    do
    {
      uint64_t v33 = (void *)*v12;
      uint64_t v34 = (void *)v12[3];
      if (v34)
      {
        v12[4] = v34;
        operator delete(v34);
      }
      operator delete(v12);
      long long v12 = v33;
    }
    while (v33);
  }
  int v13 = (void *)a1[13];
  a1[13] = 0;
  if (v13) {
    operator delete(v13);
  }
  uint64_t v14 = (void *)a1[10];
  if (v14)
  {
    do
    {
      uint64_t v35 = (void *)*v14;
      uint64_t v36 = (void *)v14[3];
      if (v36)
      {
        v14[4] = v36;
        operator delete(v36);
      }
      operator delete(v14);
      uint64_t v14 = v35;
    }
    while (v35);
  }
  unint64_t v15 = (void *)a1[8];
  a1[8] = 0;
  if (v15) {
    operator delete(v15);
  }
  uint64_t v16 = a1[4];
  if (v16)
  {
    uint64_t v17 = a1[5];
    long long v18 = (void *)a1[4];
    if (v17 != v16)
    {
      do
        uint64_t v17 = sub_361164(v17 - 456);
      while (v17 != v16);
      long long v18 = (void *)a1[4];
    }
    a1[5] = v16;
    operator delete(v18);
  }
  uint64_t v19 = a1[1];
  if (v19)
  {
    uint64_t v20 = a1[2];
    float v21 = (void *)a1[1];
    if (v20 != v19)
    {
      do
        uint64_t v20 = sub_361164(v20 - 456);
      while (v20 != v19);
      float v21 = (void *)a1[1];
    }
    a1[2] = v19;
    operator delete(v21);
  }
  return a1;
}

void sub_365084(unint64_t *a1)
{
  unint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  uint64_t v4 = (int64x2_t *)(v2 - *a1);
  if (v2 == *a1)
  {
    long long v6 = 0;
  }
  else
  {
    if ((0x823EE08FB823EE09 * ((uint64_t)v4 >> 3)) >> 61) {
      sub_2E00();
    }
    uint64_t v5 = (int64x2_t *)operator new(0x11F7047DC11F7048 * ((uint64_t)v4 >> 3));
    long long v6 = (char *)v5;
    if ((unint64_t)&v4[-29].u64[1] >= 0x558)
    {
      unint64_t v8 = (unint64_t)&v4[-29].u64[1] / 0x1C8 + 1;
      unint64_t v7 = v3 + 456 * (v8 & 0x1FFFFFFFFFFFFFCLL);
      uint64_t v4 = (int64x2_t *)((char *)v5 + 8 * (v8 & 0x1FFFFFFFFFFFFFCLL));
      uint64_t v9 = v5 + 1;
      uint64_t v10 = v8 & 0x1FFFFFFFFFFFFFCLL;
      do
      {
        int64x2_t v11 = vdupq_n_s64(v3);
        v9[-1] = vaddq_s64(v11, (int64x2_t)xmmword_20E2240);
        *uint64_t v9 = vaddq_s64(v11, (int64x2_t)xmmword_20E2250);
        v3 += 1824;
        v9 += 2;
        v10 -= 4;
      }
      while (v10);
      if (v8 == (v8 & 0x1FFFFFFFFFFFFFCLL)) {
        goto LABEL_10;
      }
    }
    else
    {
      unint64_t v7 = v3;
      uint64_t v4 = v5;
    }
    do
    {
      v4->i64[0] = v7;
      uint64_t v4 = (int64x2_t *)((char *)v4 + 8);
      v7 += 456;
    }
    while (v7 != v2);
  }
LABEL_10:
  unint64_t v12 = 126 - 2 * __clz(((char *)v4 - v6) >> 3);
  if (v4 == (int64x2_t *)v6) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v12;
  }
  sub_365344((unint64_t)v6, v4->i64, v13, 1);
  if (v4 != (int64x2_t *)v6)
  {
    uint64_t v14 = (uint64_t *)(v6 + 8);
    if (v6 + 8 != (char *)v4)
    {
      do
      {
        if (*(void *)(*v14 + 8) == *(void *)(*(v14 - 1) + 8)) {
          *(void *)*uint64_t v14 = -1;
        }
        ++v14;
      }
      while (v14 != (uint64_t *)v4);
    }
  }
  unint64_t v15 = (void *)*a1;
  uint64_t v16 = a1[1];
  if (*a1 != v16)
  {
    while (*v15 != -1)
    {
      v15 += 57;
      if (v15 == (void *)v16) {
        goto LABEL_35;
      }
    }
    if (v15 != (void *)v16)
    {
      uint64_t v17 = v15 + 57;
      if (v15 + 57 != (void *)v16)
      {
        do
        {
          if (*v17 != -1)
          {
            sub_3648AC((uint64_t)v15, (uint64_t)v17);
            v15 += 57;
          }
          v17 += 57;
        }
        while (v17 != (void *)v16);
        uint64_t v16 = a1[1];
      }
    }
    if (v15 != (void *)v16)
    {
      while ((void *)v16 != v15)
      {
        v16 -= 456;
        sub_361164(v16);
      }
      a1[1] = (unint64_t)v15;
    }
  }
LABEL_35:
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_365328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_365344(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = (uint64_t *)result;
LABEL_2:
  uint64_t v10 = a2 - 1;
  uint64_t j = v9;
  while (1)
  {
    uint64_t v9 = j;
    uint64_t v12 = (char *)a2 - (char *)j;
    unint64_t v13 = a2 - j;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v58 = *(a2 - 1);
          uint64_t v59 = *j;
          unint64_t v60 = *(void *)(v58 + 8);
          unint64_t v61 = *(void *)(*j + 8);
          if (v60 < v61 || v61 >= v60 && *(_DWORD *)(v58 + 404) < *(_DWORD *)(v59 + 404))
          {
            *uint64_t j = v58;
            *(a2 - 1) = v59;
          }
          break;
        case 3uLL:
          __n128 result = (unint64_t)sub_365FD8(j, j + 1, a2 - 1);
          break;
        case 4uLL:
          uint64_t v62 = j + 1;
          uint64_t v63 = j + 2;
          __n128 result = (unint64_t)sub_365FD8(j, j + 1, j + 2);
          uint64_t v64 = *(a2 - 1);
          uint64_t v65 = j[2];
          unint64_t v66 = *(void *)(v64 + 8);
          unint64_t v67 = *(void *)(v65 + 8);
          if (v66 < v67 || v67 >= v66 && *(_DWORD *)(v64 + 404) < *(_DWORD *)(v65 + 404))
          {
            *uint64_t v63 = v64;
            *(a2 - 1) = v65;
            uint64_t v68 = *v63;
            uint64_t v69 = *v62;
            unint64_t v70 = *(void *)(*v63 + 8);
            unint64_t v71 = *(void *)(*v62 + 8);
            if (v70 < v71 || v71 >= v70 && *(_DWORD *)(v68 + 404) < *(_DWORD *)(v69 + 404))
            {
              j[1] = v68;
              j[2] = v69;
              uint64_t v72 = *j;
              unint64_t v73 = *(void *)(v68 + 8);
              unint64_t v74 = *(void *)(*j + 8);
              if (v73 < v74 || v74 >= v73 && *(_DWORD *)(v68 + 404) < *(_DWORD *)(v72 + 404))
              {
                *uint64_t j = v68;
                j[1] = v72;
              }
            }
          }
          break;
        case 5uLL:
          __n128 result = (unint64_t)sub_365DE0(j, j + 1, j + 2, j + 3, a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 191) {
      break;
    }
    if (!a3)
    {
      if (j == a2) {
        return result;
      }
      int64_t v90 = (v13 - 2) >> 1;
      int64_t v91 = v90;
      do
      {
        int64_t v93 = v91;
        if (v90 >= v91)
        {
          uint64_t v94 = (2 * v91) | 1;
          int v95 = &j[v94];
          if (2 * v93 + 2 < (uint64_t)v13)
          {
            uint64_t v96 = v95[1];
            __n128 result = *(void *)(*v95 + 8);
            unint64_t v97 = *(void *)(v96 + 8);
            if (result < v97 || v97 >= result && *(_DWORD *)(*v95 + 404) < *(_DWORD *)(v96 + 404))
            {
              ++v95;
              uint64_t v94 = 2 * v93 + 2;
            }
          }
          uint64_t v98 = *v95;
          uint64_t v99 = j[v93];
          unint64_t v100 = *(void *)(*v95 + 8);
          unint64_t v101 = *(void *)(v99 + 8);
          if (v100 >= v101 && (v101 < v100 || *(_DWORD *)(v98 + 404) >= *(_DWORD *)(v99 + 404)))
          {
            j[v93] = v98;
            if (v90 >= v94)
            {
              while (1)
              {
                uint64_t v102 = 2 * v94;
                uint64_t v94 = (2 * v94) | 1;
                unint64_t v92 = &j[v94];
                uint64_t v103 = v102 + 2;
                if (v103 < (uint64_t)v13)
                {
                  uint64_t v104 = v92[1];
                  unint64_t v105 = *(void *)(*v92 + 8);
                  unint64_t v106 = *(void *)(v104 + 8);
                  if (v105 < v106 || v106 >= v105 && *(_DWORD *)(*v92 + 404) < *(_DWORD *)(v104 + 404))
                  {
                    ++v92;
                    uint64_t v94 = v103;
                  }
                }
                uint64_t v107 = *v92;
                unint64_t v108 = *(void *)(*v92 + 8);
                __n128 result = *(void *)(v99 + 8);
                if (v108 < result) {
                  break;
                }
                if (result >= v108)
                {
                  __n128 result = *(unsigned int *)(v99 + 404);
                  if (*(_DWORD *)(v107 + 404) < (int)result) {
                    break;
                  }
                }
                *int v95 = v107;
                int v95 = v92;
                if (v90 < v94) {
                  goto LABEL_132;
                }
              }
            }
            unint64_t v92 = v95;
LABEL_132:
            *unint64_t v92 = v99;
          }
        }
        int64_t v91 = v93 - 1;
      }
      while (v93);
      uint64_t v109 = (unint64_t)v12 >> 3;
      while (1)
      {
        uint64_t v112 = 0;
        uint64_t v113 = *j;
        uint64_t v110 = j;
        do
        {
          uint64_t v114 = v110;
          v110 += v112 + 1;
          uint64_t v115 = 2 * v112;
          uint64_t v112 = (2 * v112) | 1;
          uint64_t v116 = v115 + 2;
          if (v116 < v109)
          {
            uint64_t v117 = v110[1];
            __n128 result = *(void *)(*v110 + 8);
            unint64_t v118 = *(void *)(v117 + 8);
            if (result < v118 || v118 >= result && *(_DWORD *)(*v110 + 404) < *(_DWORD *)(v117 + 404))
            {
              ++v110;
              uint64_t v112 = v116;
            }
          }
          *uint64_t v114 = *v110;
        }
        while (v112 <= (uint64_t)((unint64_t)(v109 - 2) >> 1));
        if (v110 != --a2)
        {
          *uint64_t v110 = *a2;
          *a2 = v113;
          uint64_t v119 = (char *)v110 - (char *)j + 8;
          if (v119 < 9) {
            goto LABEL_158;
          }
          unint64_t v120 = ((unint64_t)v119 >> 3) - 2;
          unint64_t v121 = v120 >> 1;
          uint64_t v122 = &j[v120 >> 1];
          uint64_t v123 = *v122;
          uint64_t v113 = *v110;
          unint64_t v124 = *(void *)(*v122 + 8);
          unint64_t v125 = *(void *)(*v110 + 8);
          if (v124 >= v125 && (v125 < v124 || *(_DWORD *)(v123 + 404) >= *(_DWORD *)(v113 + 404))) {
            goto LABEL_158;
          }
          *uint64_t v110 = v123;
          if (v120 >= 2)
          {
            while (1)
            {
              unint64_t v126 = v121 - 1;
              unint64_t v121 = (v121 - 1) >> 1;
              uint64_t v110 = &j[v121];
              uint64_t v127 = *v110;
              unint64_t v128 = *(void *)(*v110 + 8);
              unint64_t v129 = *(void *)(v113 + 8);
              if (v128 >= v129 && (v129 < v128 || *(_DWORD *)(v127 + 404) >= *(_DWORD *)(v113 + 404))) {
                break;
              }
              *uint64_t v122 = v127;
              uint64_t v122 = &j[v121];
              if (v126 <= 1) {
                goto LABEL_157;
              }
            }
          }
          uint64_t v110 = v122;
        }
LABEL_157:
        *uint64_t v110 = v113;
LABEL_158:
        if (v109-- <= 2) {
          return result;
        }
      }
    }
    unint64_t v14 = v13 >> 1;
    unint64_t v15 = &j[v13 >> 1];
    if ((unint64_t)v12 >= 0x401)
    {
      sub_365FD8(v9, &v9[v13 >> 1], a2 - 1);
      uint64_t v16 = &v9[v14];
      sub_365FD8(v9 + 1, v16 - 1, a2 - 2);
      sub_365FD8(v9 + 2, &v9[v14 + 1], a2 - 3);
      __n128 result = (unint64_t)sub_365FD8(v16 - 1, v15, &v9[v14 + 1]);
      uint64_t v17 = *v9;
      *uint64_t v9 = *v16;
      *uint64_t v16 = v17;
      --a3;
      if ((a4 & 1) == 0) {
        goto LABEL_10;
      }
LABEL_22:
      uint64_t v18 = *v9;
      unint64_t v21 = *(void *)(*v9 + 8);
LABEL_23:
      for (uint64_t i = 0; ; ++i)
      {
        uint64_t v28 = v9[i + 1];
        unint64_t v29 = *(void *)(v28 + 8);
        if (v29 >= v21 && (v21 < v29 || *(_DWORD *)(v28 + 404) >= *(_DWORD *)(v18 + 404))) {
          break;
        }
      }
      long long v30 = &v9[i];
      unint64_t v31 = (unint64_t)&v9[i + 1];
      if (i * 8)
      {
        uint64_t v32 = *v10;
        unint64_t v33 = *(void *)(*v10 + 8);
        uint64_t v34 = a2 - 1;
        if (v33 >= v21)
        {
          uint64_t v34 = a2 - 1;
          do
          {
            if (v21 >= v33 && *(_DWORD *)(v32 + 404) < *(_DWORD *)(v18 + 404)) {
              break;
            }
            uint64_t v35 = *--v34;
            uint64_t v32 = v35;
            unint64_t v33 = *(void *)(v35 + 8);
          }
          while (v33 >= v21);
        }
      }
      else
      {
        uint64_t v34 = a2;
        if (v31 < (unint64_t)a2)
        {
          uint64_t v36 = *v10;
          unint64_t v37 = *(void *)(*v10 + 8);
          uint64_t v34 = a2 - 1;
          if (v37 >= v21)
          {
            uint64_t v34 = a2 - 1;
            do
            {
              if (v21 < v37)
              {
                if (v31 >= (unint64_t)v34) {
                  break;
                }
              }
              else if (v31 >= (unint64_t)v34 || *(_DWORD *)(v36 + 404) < *(_DWORD *)(v18 + 404))
              {
                break;
              }
              uint64_t v46 = *--v34;
              uint64_t v36 = v46;
              unint64_t v37 = *(void *)(v46 + 8);
            }
            while (v37 >= v21);
          }
        }
      }
      if (v31 < (unint64_t)v34)
      {
        uint64_t v38 = *v34;
        unint64_t v39 = v31;
        uint64_t v40 = v34;
        do
        {
          *(void *)unint64_t v39 = v38;
          v39 += 8;
          *uint64_t v40 = v28;
          unint64_t v41 = *(void *)(v18 + 8);
          while (1)
          {
            uint64_t v28 = *(void *)v39;
            unint64_t v42 = *(void *)(*(void *)v39 + 8);
            if (v42 >= v41 && (v41 < v42 || *(_DWORD *)(v28 + 404) >= *(_DWORD *)(v18 + 404))) {
              break;
            }
            v39 += 8;
          }
          do
          {
            uint64_t v43 = *--v40;
            uint64_t v38 = v43;
            unint64_t v44 = *(void *)(v43 + 8);
          }
          while (v44 >= v41 && (v41 < v44 || *(_DWORD *)(v38 + 404) >= *(_DWORD *)(v18 + 404)));
        }
        while (v39 < (unint64_t)v40);
        long long v30 = (uint64_t *)(v39 - 8);
      }
      if (v30 != v9) {
        *uint64_t v9 = *v30;
      }
      *long long v30 = v18;
      if (v31 < (unint64_t)v34)
      {
LABEL_55:
        __n128 result = sub_365344(v9, v30, a3, a4 & 1);
        a4 = 0;
        uint64_t j = v30 + 1;
      }
      else
      {
        BOOL v45 = sub_3660E8(v9, v30);
        uint64_t j = v30 + 1;
        __n128 result = sub_3660E8(v30 + 1, a2);
        if (result)
        {
          a2 = v30;
          if (v45) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v45) {
          goto LABEL_55;
        }
      }
    }
    else
    {
      __n128 result = (unint64_t)sub_365FD8(&v9[v13 >> 1], v9, a2 - 1);
      --a3;
      if (a4) {
        goto LABEL_22;
      }
LABEL_10:
      uint64_t v19 = *(v9 - 1);
      uint64_t v18 = *v9;
      unint64_t v20 = *(void *)(v19 + 8);
      unint64_t v21 = *(void *)(*v9 + 8);
      if (v20 < v21 || v21 >= v20 && *(_DWORD *)(v19 + 404) < *(_DWORD *)(v18 + 404)) {
        goto LABEL_23;
      }
      uint64_t v22 = *v10;
      unint64_t v23 = *(void *)(*v10 + 8);
      if (v21 >= v23 && (v23 < v21 || *(_DWORD *)(v18 + 404) >= *(_DWORD *)(v22 + 404)))
      {
        for (uint64_t j = v9 + 1; j < a2; ++j)
        {
          unint64_t v47 = *(void *)(*j + 8);
          if (v21 < v47 || v47 >= v21 && *(_DWORD *)(v18 + 404) < *(_DWORD *)(*j + 404)) {
            break;
          }
        }
      }
      else
      {
        uint64_t j = v9;
        do
        {
          uint64_t v25 = j[1];
          ++j;
          uint64_t v24 = v25;
          unint64_t v26 = *(void *)(v25 + 8);
        }
        while (v21 >= v26 && (v26 < v21 || *(_DWORD *)(v18 + 404) >= *(_DWORD *)(v24 + 404)));
      }
      uint64_t v48 = a2;
      if (j < a2)
      {
        uint64_t v48 = a2 - 1;
        while (v21 < v23 || v23 >= v21 && *(_DWORD *)(v18 + 404) < *(_DWORD *)(v22 + 404))
        {
          uint64_t v49 = *--v48;
          uint64_t v22 = v49;
          unint64_t v23 = *(void *)(v49 + 8);
        }
      }
      if (j < v48)
      {
        uint64_t v50 = *j;
        uint64_t v51 = *v48;
        do
        {
          *uint64_t j = v51;
          *uint64_t v48 = v50;
          unint64_t v52 = *(void *)(v18 + 8);
          do
          {
            uint64_t v53 = j[1];
            ++j;
            uint64_t v50 = v53;
            unint64_t v54 = *(void *)(v53 + 8);
          }
          while (v52 >= v54 && (v54 < v52 || *(_DWORD *)(v18 + 404) >= *(_DWORD *)(v50 + 404)));
          do
          {
            do
            {
              uint64_t v55 = *--v48;
              uint64_t v51 = v55;
              unint64_t v56 = *(void *)(v55 + 8);
            }
            while (v52 < v56);
          }
          while (v56 >= v52 && *(_DWORD *)(v18 + 404) < *(_DWORD *)(v51 + 404));
        }
        while (j < v48);
      }
      unint64_t v57 = j - 1;
      BOOL v4 = j - 1 >= v9;
      BOOL v5 = j - 1 == v9;
      if (j - 1 != v9) {
        *uint64_t v9 = *v57;
      }
      a4 = 0;
      *unint64_t v57 = v18;
    }
  }
  uint64_t v75 = j + 1;
  BOOL v77 = j == a2 || v75 == a2;
  if ((a4 & 1) == 0)
  {
    if (!v77)
    {
      do
      {
        long long v130 = v9;
        uint64_t v9 = v75;
        uint64_t v132 = *v130;
        uint64_t v131 = v130[1];
        unint64_t v133 = *(void *)(v131 + 8);
        unint64_t v134 = *(void *)(*v130 + 8);
        if (v133 < v134 || v134 >= v133 && *(_DWORD *)(v131 + 404) < *(_DWORD *)(v132 + 404))
        {
          do
          {
            do
            {
              char v135 = v130;
              uint64_t v136 = *--v130;
              v130[2] = v132;
              uint64_t v132 = v136;
              unint64_t v137 = *(void *)(v131 + 8);
              unint64_t v138 = *(void *)(v136 + 8);
            }
            while (v137 < v138);
          }
          while (v138 >= v137 && *(_DWORD *)(v131 + 404) < *(_DWORD *)(v132 + 404));
          uint64_t *v135 = v131;
        }
        uint64_t v75 = v9 + 1;
      }
      while (v9 + 1 != a2);
    }
    return result;
  }
  if (v77) {
    return result;
  }
  uint64_t v78 = 0;
  uint64_t v79 = j;
  while (2)
  {
    uint64_t v81 = v79;
    uint64_t v79 = v75;
    uint64_t v83 = *v81;
    uint64_t v82 = v81[1];
    unint64_t v84 = *(void *)(v82 + 8);
    unint64_t v85 = *(void *)(*v81 + 8);
    if (v84 >= v85 && (v85 < v84 || *(_DWORD *)(v82 + 404) >= *(_DWORD *)(v83 + 404))) {
      goto LABEL_117;
    }
    v81[1] = v83;
    BOOL v80 = j;
    if (v81 == j) {
      goto LABEL_116;
    }
    uint64_t v86 = v78;
    while (2)
    {
      uint64_t v87 = *(uint64_t *)((char *)j + v86 - 8);
      unint64_t v88 = *(void *)(v82 + 8);
      unint64_t v89 = *(void *)(v87 + 8);
      if (v88 < v89)
      {
LABEL_123:
        --v81;
        *(uint64_t *)((char *)j + v86) = v87;
        v86 -= 8;
        if (!v86)
        {
          BOOL v80 = j;
          goto LABEL_116;
        }
        continue;
      }
      break;
    }
    if (v89 >= v88)
    {
      if (*(_DWORD *)(v82 + 404) >= *(_DWORD *)(v87 + 404))
      {
        BOOL v80 = v81;
        goto LABEL_116;
      }
      goto LABEL_123;
    }
    BOOL v80 = (uint64_t *)((char *)j + v86);
LABEL_116:
    *BOOL v80 = v82;
LABEL_117:
    uint64_t v75 = v79 + 1;
    v78 += 8;
    if (v79 + 1 != a2) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_365DE0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  __n128 result = sub_365FD8(a1, a2, a3);
  uint64_t v11 = *a4;
  uint64_t v12 = *a3;
  unint64_t v13 = *(void *)(*a4 + 8);
  unint64_t v14 = *(void *)(*a3 + 8);
  if (v13 < v14 || v14 >= v13 && *(_DWORD *)(v11 + 404) < *(_DWORD *)(v12 + 404))
  {
    *a3 = v11;
    *a4 = v12;
    uint64_t v15 = *a3;
    uint64_t v16 = *a2;
    unint64_t v17 = *(void *)(*a3 + 8);
    unint64_t v18 = *(void *)(*a2 + 8);
    if (v17 < v18 || v18 >= v17 && *(_DWORD *)(v15 + 404) < *(_DWORD *)(v16 + 404))
    {
      *a2 = v15;
      *a3 = v16;
      uint64_t v19 = *a2;
      uint64_t v20 = *a1;
      unint64_t v21 = *(void *)(*a2 + 8);
      unint64_t v22 = *(void *)(*a1 + 8);
      if (v21 < v22 || v22 >= v21 && *(_DWORD *)(v19 + 404) < *(_DWORD *)(v20 + 404))
      {
        *a1 = v19;
        *a2 = v20;
      }
    }
  }
  uint64_t v23 = *a5;
  uint64_t v24 = *a4;
  unint64_t v25 = *(void *)(*a5 + 8);
  unint64_t v26 = *(void *)(*a4 + 8);
  if (v25 < v26 || v26 >= v25 && *(_DWORD *)(v23 + 404) < *(_DWORD *)(v24 + 404))
  {
    *a4 = v23;
    *a5 = v24;
    uint64_t v27 = *a4;
    uint64_t v28 = *a3;
    unint64_t v29 = *(void *)(*a4 + 8);
    unint64_t v30 = *(void *)(*a3 + 8);
    if (v29 < v30 || v30 >= v29 && *(_DWORD *)(v27 + 404) < *(_DWORD *)(v28 + 404))
    {
      *a3 = v27;
      *a4 = v28;
      uint64_t v31 = *a3;
      uint64_t v32 = *a2;
      unint64_t v33 = *(void *)(*a3 + 8);
      unint64_t v34 = *(void *)(*a2 + 8);
      if (v33 < v34 || v34 >= v33 && *(_DWORD *)(v31 + 404) < *(_DWORD *)(v32 + 404))
      {
        *a2 = v31;
        *a3 = v32;
        uint64_t v35 = *a2;
        uint64_t v36 = *a1;
        unint64_t v37 = *(void *)(*a2 + 8);
        unint64_t v38 = *(void *)(*a1 + 8);
        if (v37 < v38 || v38 >= v37 && *(_DWORD *)(v35 + 404) < *(_DWORD *)(v36 + 404))
        {
          *a1 = v35;
          *a2 = v36;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_365FD8(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *result;
  unint64_t v5 = *(void *)(*a2 + 8);
  unint64_t v6 = *(void *)(*result + 8);
  if (v5 >= v6 && (v6 < v5 || *(_DWORD *)(v3 + 404) >= *(_DWORD *)(v4 + 404)))
  {
    uint64_t v9 = *a3;
    unint64_t v10 = *(void *)(*a3 + 8);
    if (v10 < v5 || v5 >= v10 && *(_DWORD *)(v9 + 404) < *(_DWORD *)(v3 + 404))
    {
      *a2 = v9;
      *a3 = v3;
      uint64_t v11 = *a2;
      uint64_t v12 = *result;
      unint64_t v13 = *(void *)(*a2 + 8);
      unint64_t v14 = *(void *)(*result + 8);
      if (v13 < v14 || v14 >= v13 && *(_DWORD *)(v11 + 404) < *(_DWORD *)(v12 + 404))
      {
        *__n128 result = v11;
        *a2 = v12;
      }
    }
  }
  else
  {
    uint64_t v7 = *a3;
    unint64_t v8 = *(void *)(*a3 + 8);
    if (v8 < v5 || v5 >= v8 && *(_DWORD *)(v7 + 404) < *(_DWORD *)(v3 + 404))
    {
      *__n128 result = v7;
LABEL_17:
      *a3 = v4;
      return result;
    }
    *__n128 result = v3;
    *a2 = v4;
    uint64_t v15 = *a3;
    unint64_t v16 = *(void *)(*a3 + 8);
    unint64_t v17 = *(void *)(v4 + 8);
    if (v16 < v17 || v17 >= v16 && *(_DWORD *)(v15 + 404) < *(_DWORD *)(v4 + 404))
    {
      *a2 = v15;
      goto LABEL_17;
    }
  }
  return result;
}

BOOL sub_3660E8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v19 = *(a2 - 1);
      uint64_t v20 = *a1;
      unint64_t v21 = *(void *)(v19 + 8);
      unint64_t v22 = *(void *)(*a1 + 8);
      if (v21 < v22 || v22 >= v21 && *(_DWORD *)(v19 + 404) < *(_DWORD *)(v20 + 404))
      {
        *a1 = v19;
        *(a2 - 1) = v20;
      }
      return result;
    case 3:
      sub_365FD8(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      uint64_t v23 = a1 + 1;
      uint64_t v24 = a1 + 2;
      sub_365FD8(a1, a1 + 1, a1 + 2);
      uint64_t v25 = *(a2 - 1);
      uint64_t v26 = a1[2];
      unint64_t v27 = *(void *)(v25 + 8);
      unint64_t v28 = *(void *)(v26 + 8);
      if (v27 >= v28 && (v28 < v27 || *(_DWORD *)(v25 + 404) >= *(_DWORD *)(v26 + 404))) {
        return 1;
      }
      *uint64_t v24 = v25;
      *(a2 - 1) = v26;
      uint64_t v29 = *v24;
      uint64_t v30 = *v23;
      unint64_t v31 = *(void *)(*v24 + 8);
      unint64_t v32 = *(void *)(*v23 + 8);
      if (v31 >= v32 && (v32 < v31 || *(_DWORD *)(v29 + 404) >= *(_DWORD *)(v30 + 404))) {
        return 1;
      }
      a1[1] = v29;
      a1[2] = v30;
      uint64_t v33 = *a1;
      unint64_t v34 = *(void *)(v29 + 8);
      unint64_t v35 = *(void *)(*a1 + 8);
      if (v34 >= v35 && (v35 < v34 || *(_DWORD *)(v29 + 404) >= *(_DWORD *)(v33 + 404))) {
        return 1;
      }
      *a1 = v29;
      a1[1] = v33;
      return 1;
    case 5:
      sub_365DE0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      unint64_t v6 = a1 + 2;
      sub_365FD8(a1, a1 + 1, a1 + 2);
      uint64_t v7 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (2)
  {
    uint64_t v11 = *v7;
    uint64_t v12 = *v6;
    unint64_t v13 = *(void *)(*v7 + 8);
    unint64_t v14 = *(void *)(*v6 + 8);
    if (v13 >= v14 && (v14 < v13 || *(_DWORD *)(v11 + 404) >= *(_DWORD *)(v12 + 404))) {
      goto LABEL_7;
    }
    *uint64_t v7 = v12;
    unint64_t v10 = a1;
    if (v6 == a1) {
      goto LABEL_6;
    }
    uint64_t v15 = v8;
    while (1)
    {
      uint64_t v16 = *(uint64_t *)((char *)a1 + v15 + 8);
      unint64_t v17 = *(void *)(v11 + 8);
      unint64_t v18 = *(void *)(v16 + 8);
      if (v17 < v18) {
        goto LABEL_11;
      }
      if (v18 < v17) {
        break;
      }
      if (*(_DWORD *)(v11 + 404) >= *(_DWORD *)(v16 + 404))
      {
        unint64_t v10 = (uint64_t *)((char *)a1 + v15 + 16);
        goto LABEL_6;
      }
LABEL_11:
      --v6;
      *(uint64_t *)((char *)a1 + v15 + 16) = v16;
      v15 -= 8;
      if (v15 == -16)
      {
        unint64_t v10 = a1;
        goto LABEL_6;
      }
    }
    unint64_t v10 = v6;
LABEL_6:
    *unint64_t v10 = v11;
    if (++v9 == 8) {
      return v7 + 1 == a2;
    }
LABEL_7:
    unint64_t v6 = v7;
    v8 += 8;
    if (++v7 != a2) {
      continue;
    }
    return 1;
  }
}

uint64_t sub_3663E4(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  unint64_t v2 = *(void **)(a1 + 8);
  if (*(void **)a1 == v2)
  {
LABEL_7:
    if (*(unsigned char *)(a1 + 24)) {
      BOOL v4 = 0;
    }
    else {
      BOOL v4 = *(unsigned char *)(a1 + 25) == 0;
    }
    if (!v4 || *(unsigned char *)(a1 + 26) != 0)
    {
      unint64_t v6 = *(_DWORD **)(a1 + 32);
      uint64_t v7 = *(_DWORD **)(a1 + 40);
      if (v6 == v7)
      {
LABEL_24:
        unint64_t v10 = *(_DWORD **)(a1 + 56);
        uint64_t v11 = *(_DWORD **)(a1 + 64);
        if (v10 == v11) {
          return 1;
        }
        while (1)
        {
          BOOL v12 = !*v10 || v10[1] == -1;
          BOOL v13 = v12 || v10[2] == 0;
          if (v13 || v10[3] == -1) {
            break;
          }
          v10 += 4;
          if (v10 == v11) {
            return 1;
          }
        }
      }
      else
      {
        while (1)
        {
          BOOL v8 = !*v6 || v6[1] == -1;
          BOOL v9 = v8 || v6[2] == 0;
          if (v9 || v6[3] == -1) {
            break;
          }
          v6 += 4;
          if (v6 == v7) {
            goto LABEL_24;
          }
        }
      }
    }
  }
  else
  {
    while (*v1 <= 0xFFFFFFFEFFFFFFFFLL && *v1 != 0)
    {
      if (++v1 == v2) {
        goto LABEL_7;
      }
    }
  }
  return 0;
}

uint64_t sub_3664B8(uint64_t a1)
{
  if (*(void *)a1 == -1 || *(unsigned __int8 *)(a1 + 400) > 1u) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 + 404);
  if (v2 == 0x7FFFFFFF) {
    return 0;
  }
  int v3 = *(_DWORD *)(a1 + 408);
  BOOL v4 = v3 != 0x7FFFFFFF && v2 <= v3;
  BOOL v5 = !v4 || *(_DWORD *)(a1 + 412) == 0x7FFFFFFF;
  BOOL v6 = v5 || *(_DWORD *)(a1 + 416) == 0x7FFFFFFF;
  if (v6 || *(void *)(a1 + 424) == *(void *)(a1 + 432)) {
    return 0;
  }
  else {
    return sub_366518((uint64_t *)(a1 + 424));
  }
}

uint64_t sub_366518(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  while (1)
  {
    if (v1 == v2) {
      return 1;
    }
    if (*(_DWORD *)(v1 + 8) == -1) {
      break;
    }
    if (*(unsigned char *)(v1 + 96))
    {
      uint64_t result = sub_3663E4(v1 + 16);
      if (!result) {
        return result;
      }
    }
    v1 += 104;
  }
  return 0;
}

uint64_t sub_366588(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  char v3 = v2;
  uint64_t v4 = *(void *)(a1 + 8);
  if ((v2 & 0x80u) == 0) {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v5 = *(void *)(a1 + 8);
  }
  if (v5 == 7)
  {
    if ((v2 & 0x80u) == 0) {
      BOOL v6 = (char *)a1;
    }
    else {
      BOOL v6 = *(char **)a1;
    }
    __darwin_ct_rune_t v7 = *v6;
    __darwin_ct_rune_t v8 = __toupper(85);
    if (v8 == __toupper(v7))
    {
      __darwin_ct_rune_t v9 = v6[1];
      __darwin_ct_rune_t v10 = __toupper(78);
      if (v10 == __toupper(v9))
      {
        __darwin_ct_rune_t v11 = v6[2];
        __darwin_ct_rune_t v12 = __toupper(75);
        if (v12 == __toupper(v11))
        {
          __darwin_ct_rune_t v13 = v6[3];
          __darwin_ct_rune_t v14 = __toupper(78);
          if (v14 == __toupper(v13))
          {
            __darwin_ct_rune_t v15 = v6[4];
            __darwin_ct_rune_t v16 = __toupper(79);
            if (v16 == __toupper(v15))
            {
              __darwin_ct_rune_t v17 = v6[5];
              __darwin_ct_rune_t v18 = __toupper(87);
              if (v18 == __toupper(v17))
              {
                __darwin_ct_rune_t v19 = v6[6];
                __darwin_ct_rune_t v20 = __toupper(78);
                if (v20 == __toupper(v19)) {
                  return 0;
                }
              }
            }
          }
        }
      }
    }
    uint64_t v2 = *(unsigned __int8 *)(a1 + 23);
    uint64_t v4 = *(void *)(a1 + 8);
    char v3 = *(unsigned char *)(a1 + 23);
  }
  if (v3 >= 0) {
    uint64_t v22 = v2;
  }
  else {
    uint64_t v22 = v4;
  }
  if (v22 == 9)
  {
    if (v3 >= 0) {
      uint64_t v23 = (char *)a1;
    }
    else {
      uint64_t v23 = *(char **)a1;
    }
    __darwin_ct_rune_t v24 = *v23;
    __darwin_ct_rune_t v25 = __toupper(67);
    if (v25 == __toupper(v24))
    {
      __darwin_ct_rune_t v26 = v23[1];
      __darwin_ct_rune_t v27 = __toupper(79);
      if (v27 == __toupper(v26))
      {
        __darwin_ct_rune_t v28 = v23[2];
        __darwin_ct_rune_t v29 = __toupper(85);
        if (v29 == __toupper(v28))
        {
          __darwin_ct_rune_t v30 = v23[3];
          __darwin_ct_rune_t v31 = __toupper(78);
          if (v31 == __toupper(v30))
          {
            __darwin_ct_rune_t v32 = v23[4];
            __darwin_ct_rune_t v33 = __toupper(84);
            if (v33 == __toupper(v32))
            {
              __darwin_ct_rune_t v34 = v23[5];
              __darwin_ct_rune_t v35 = __toupper(68);
              if (v35 == __toupper(v34))
              {
                __darwin_ct_rune_t v36 = v23[6];
                __darwin_ct_rune_t v37 = __toupper(79);
                if (v37 == __toupper(v36))
                {
                  __darwin_ct_rune_t v38 = v23[7];
                  __darwin_ct_rune_t v39 = __toupper(87);
                  if (v39 == __toupper(v38))
                  {
                    __darwin_ct_rune_t v40 = v23[8];
                    __darwin_ct_rune_t v41 = __toupper(78);
                    if (v41 == __toupper(v40)) {
                      return 1;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    uint64_t v2 = *(unsigned __int8 *)(a1 + 23);
    uint64_t v4 = *(void *)(a1 + 8);
    char v3 = *(unsigned char *)(a1 + 23);
  }
  if (v3 >= 0) {
    uint64_t v42 = v2;
  }
  else {
    uint64_t v42 = v4;
  }
  if (v42 == 5)
  {
    if (v3 >= 0) {
      uint64_t v43 = (char *)a1;
    }
    else {
      uint64_t v43 = *(char **)a1;
    }
    __darwin_ct_rune_t v44 = *v43;
    __darwin_ct_rune_t v45 = __toupper(83);
    if (v45 == __toupper(v44))
    {
      __darwin_ct_rune_t v46 = v43[1];
      __darwin_ct_rune_t v47 = __toupper(84);
      if (v47 == __toupper(v46))
      {
        __darwin_ct_rune_t v48 = v43[2];
        __darwin_ct_rune_t v49 = __toupper(65);
        if (v49 == __toupper(v48))
        {
          __darwin_ct_rune_t v50 = v43[3];
          __darwin_ct_rune_t v51 = __toupper(77);
          if (v51 == __toupper(v50))
          {
            __darwin_ct_rune_t v52 = v43[4];
            __darwin_ct_rune_t v53 = __toupper(80);
            if (v53 == __toupper(v52)) {
              return 2;
            }
          }
        }
      }
    }
    uint64_t v2 = *(unsigned __int8 *)(a1 + 23);
    uint64_t v4 = *(void *)(a1 + 8);
    char v3 = *(unsigned char *)(a1 + 23);
  }
  if (v3 >= 0) {
    uint64_t v54 = v2;
  }
  else {
    uint64_t v54 = v4;
  }
  if (v54 == 10)
  {
    if (v3 >= 0) {
      uint64_t v55 = (char *)a1;
    }
    else {
      uint64_t v55 = *(char **)a1;
    }
    __darwin_ct_rune_t v56 = *v55;
    __darwin_ct_rune_t v57 = __toupper(83);
    if (v57 == __toupper(v56))
    {
      __darwin_ct_rune_t v58 = v55[1];
      __darwin_ct_rune_t v59 = __toupper(84);
      if (v59 == __toupper(v58))
      {
        __darwin_ct_rune_t v60 = v55[2];
        __darwin_ct_rune_t v61 = __toupper(65);
        if (v61 == __toupper(v60))
        {
          __darwin_ct_rune_t v62 = v55[3];
          __darwin_ct_rune_t v63 = __toupper(77);
          if (v63 == __toupper(v62))
          {
            __darwin_ct_rune_t v64 = v55[4];
            __darwin_ct_rune_t v65 = __toupper(80);
            if (v65 == __toupper(v64))
            {
              __darwin_ct_rune_t v66 = v55[5];
              __darwin_ct_rune_t v67 = __toupper(95);
              if (v67 == __toupper(v66))
              {
                __darwin_ct_rune_t v68 = v55[6];
                __darwin_ct_rune_t v69 = __toupper(76);
                if (v69 == __toupper(v68))
                {
                  __darwin_ct_rune_t v70 = v55[7];
                  __darwin_ct_rune_t v71 = __toupper(73);
                  if (v71 == __toupper(v70))
                  {
                    __darwin_ct_rune_t v72 = v55[8];
                    __darwin_ct_rune_t v73 = __toupper(83);
                    if (v73 == __toupper(v72))
                    {
                      __darwin_ct_rune_t v74 = v55[9];
                      __darwin_ct_rune_t v75 = __toupper(84);
                      if (v75 == __toupper(v74)) {
                        return 3;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    uint64_t v2 = *(unsigned __int8 *)(a1 + 23);
    uint64_t v4 = *(void *)(a1 + 8);
    char v3 = *(unsigned char *)(a1 + 23);
  }
  if (v3 >= 0) {
    uint64_t v76 = v2;
  }
  else {
    uint64_t v76 = v4;
  }
  if (v76 == 15)
  {
    if (v3 >= 0) {
      BOOL v77 = (char *)a1;
    }
    else {
      BOOL v77 = *(char **)a1;
    }
    __darwin_ct_rune_t v78 = *v77;
    __darwin_ct_rune_t v79 = __toupper(79);
    if (v79 == __toupper(v78))
    {
      __darwin_ct_rune_t v80 = v77[1];
      __darwin_ct_rune_t v81 = __toupper(80);
      if (v81 == __toupper(v80))
      {
        __darwin_ct_rune_t v82 = v77[2];
        __darwin_ct_rune_t v83 = __toupper(69);
        if (v83 == __toupper(v82))
        {
          __darwin_ct_rune_t v84 = v77[3];
          __darwin_ct_rune_t v85 = __toupper(82);
          if (v85 == __toupper(v84))
          {
            __darwin_ct_rune_t v86 = v77[4];
            __darwin_ct_rune_t v87 = __toupper(65);
            if (v87 == __toupper(v86))
            {
              __darwin_ct_rune_t v88 = v77[5];
              __darwin_ct_rune_t v89 = __toupper(84);
              if (v89 == __toupper(v88))
              {
                __darwin_ct_rune_t v90 = v77[6];
                __darwin_ct_rune_t v91 = __toupper(73);
                if (v91 == __toupper(v90))
                {
                  __darwin_ct_rune_t v92 = v77[7];
                  __darwin_ct_rune_t v93 = __toupper(78);
                  if (v93 == __toupper(v92))
                  {
                    __darwin_ct_rune_t v94 = v77[8];
                    __darwin_ct_rune_t v95 = __toupper(71);
                    if (v95 == __toupper(v94))
                    {
                      __darwin_ct_rune_t v96 = v77[9];
                      __darwin_ct_rune_t v97 = __toupper(95);
                      if (v97 == __toupper(v96))
                      {
                        __darwin_ct_rune_t v98 = v77[10];
                        __darwin_ct_rune_t v99 = __toupper(72);
                        if (v99 == __toupper(v98))
                        {
                          __darwin_ct_rune_t v100 = v77[11];
                          __darwin_ct_rune_t v101 = __toupper(79);
                          if (v101 == __toupper(v100))
                          {
                            __darwin_ct_rune_t v102 = v77[12];
                            __darwin_ct_rune_t v103 = __toupper(85);
                            if (v103 == __toupper(v102))
                            {
                              __darwin_ct_rune_t v104 = v77[13];
                              __darwin_ct_rune_t v105 = __toupper(82);
                              if (v105 == __toupper(v104))
                              {
                                __darwin_ct_rune_t v106 = v77[14];
                                __darwin_ct_rune_t v107 = __toupper(83);
                                if (v107 == __toupper(v106)) {
                                  return 5;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    uint64_t v2 = *(unsigned __int8 *)(a1 + 23);
    uint64_t v4 = *(void *)(a1 + 8);
    char v3 = *(unsigned char *)(a1 + 23);
  }
  if (v3 < 0) {
    uint64_t v2 = v4;
  }
  if (v2 != 6) {
    goto LABEL_105;
  }
  unint64_t v108 = v3 >= 0 ? (char *)a1 : *(char **)a1;
  __darwin_ct_rune_t v109 = *v108;
  __darwin_ct_rune_t v110 = __toupper(72);
  if (v110 != __toupper(v109)) {
    goto LABEL_105;
  }
  __darwin_ct_rune_t v111 = v108[1];
  __darwin_ct_rune_t v112 = __toupper(73);
  if (v112 != __toupper(v111)) {
    goto LABEL_105;
  }
  __darwin_ct_rune_t v113 = v108[2];
  __darwin_ct_rune_t v114 = __toupper(68);
  if (v114 != __toupper(v113)
    || (__darwin_ct_rune_t v115 = v108[3], v116 = __toupper(68), v116 != __toupper(v115))
    || (__darwin_ct_rune_t v117 = v108[4], v118 = __toupper(69), v118 != __toupper(v117))
    || (__darwin_ct_rune_t v119 = v108[5], v120 = __toupper(78), v120 != __toupper(v119)))
  {
LABEL_105:
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    uint64_t v122 = std::string::append(&v125, "\" provided");
    long long v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
    std::string::size_type v127 = v122->__r_.__value_.__r.__words[2];
    long long v126 = v123;
    v122->__r_.__value_.__l.__size_ = 0;
    v122->__r_.__value_.__r.__words[2] = 0;
    v122->__r_.__value_.__r.__words[0] = 0;
    unint64_t v124 = (void *)sub_2F404((uint64_t)exception, &v126);
  }
  return 4;
}

void sub_366E2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_366E9C(uint64_t a1)
{
  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  *(_DWORD *)a1 = std::chrono::system_clock::to_time_t(&__t);
  *(void *)(a1 + 4) = 0x8000000080000000;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  return a1;
}

uint64_t sub_366EF4(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  uint64_t result = 0x7FFFFFFFLL;
  if (v2 != 0x7FFFFFFF)
  {
    __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    return 10 * (std::chrono::system_clock::to_time_t(&__t) - *(_DWORD *)(a1 + 8));
  }
  return result;
}

uint64_t sub_366F4C(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 8);
  int v4 = *(_DWORD *)(a2 + 24);
  if (v3 == 0x7FFFFFFF || v3 < v4) {
    *(_DWORD *)(a1 + 8) = v4;
  }
  int v6 = *(_DWORD *)(a2 + 16);
  uint64_t v13 = *(void *)(a2 + 8);
  int v14 = v6;
  __darwin_ct_rune_t v7 = sub_3677E0(a1 + 16, &v13, (uint64_t)&v13, a2);
  if (v8) {
    return 1;
  }
  __darwin_ct_rune_t v10 = v7;
  if (*((_DWORD *)v7 + 14) >= *(_DWORD *)(a2 + 24)) {
    return 0;
  }
  long long v11 = *(_OWORD *)a2;
  long long v12 = *(_OWORD *)(a2 + 16);
  *((_WORD *)v7 + 32) = *(_WORD *)(a2 + 32);
  *((_OWORD *)v7 + 2) = v11;
  *((_OWORD *)v7 + 3) = v12;
  if (v7 + 4 == (uint64_t *)a2) {
    return 1;
  }
  sub_3670F4(v7 + 9, *(char **)(a2 + 40), *(char **)(a2 + 48), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 2));
  sub_367278((void **)v10 + 12, *(void *)(a2 + 64), *(void *)(a2 + 72), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 3));
  return 1;
}

uint64_t *sub_367060(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t v9 = a2;
  int v10 = a3;
  uint64_t v5 = (void *)(a1 + 16);
  uint64_t result = sub_367EF8((void *)(a1 + 16), &v9);
  if (result)
  {
    if ((a4 & 1) == 0)
    {
      __darwin_ct_rune_t v7 = sub_367EF8(v5, &v9);
      if (!v7) {
        goto LABEL_9;
      }
      if (*((unsigned char *)v7 + 65)) {
        return 0;
      }
    }
    char v8 = sub_367EF8(v5, &v9);
    if (v8) {
      return v8 + 4;
    }
LABEL_9:
    sub_5AE8("unordered_map::at: key not found");
  }
  return result;
}

void *sub_3670F4(void *result, char *__src, char *a3, size_t __sz)
{
  int v6 = __src;
  __darwin_ct_rune_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *result) >> 2) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *__darwin_ct_rune_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0xCCCCCCCCCCCCCCCLL) {
      goto LABEL_23;
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 2);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0x666666666666666 ? 0xCCCCCCCCCCCCCCCLL : v11;
    if (v12 > 0xCCCCCCCCCCCCCCCLL) {
LABEL_23:
    }
      sub_2E00();
    uint64_t v13 = 20 * v12;
    uint64_t result = operator new(20 * v12);
    uint64_t v9 = (char *)result;
    *__darwin_ct_rune_t v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    uint64_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14 - 1);
    }
    __darwin_ct_rune_t v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  __darwin_ct_rune_t v15 = (void **)(result + 1);
  __darwin_ct_rune_t v16 = (unsigned char *)result[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v16 - v9) >> 2) >= __sz)
  {
    uint64_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    size_t v18 = v14 - 1;
    __darwin_ct_rune_t v19 = (void *)*result;
LABEL_21:
    uint64_t result = memmove(v19, __src, v18);
    goto LABEL_22;
  }
  __darwin_ct_rune_t v17 = &__src[4 * ((v16 - v9) >> 2)];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9 - 1);
    uint64_t v9 = (char *)*v15;
  }
  uint64_t v14 = a3 - v17;
  if (v14)
  {
    size_t v18 = v14 - 1;
    __darwin_ct_rune_t v19 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *__darwin_ct_rune_t v15 = &v9[v14];
  return result;
}

void sub_367278(void **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = (char *)*a1;
  if (0x8E38E38E38E38E39 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) < a4)
  {
    sub_367550(a1);
    if (a4 > 0x38E38E38E38E38ELL) {
      goto LABEL_38;
    }
    unint64_t v10 = 0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    unint64_t v11 = 0x8E38E38E38E38E39 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x1C71C71C71C71C7
        ? 0x38E38E38E38E38ELL
        : v10;
    if (v11 > 0x38E38E38E38E38ELL) {
LABEL_38:
    }
      sub_2E00();
    uint64_t v12 = 72 * v11;
    uint64_t v13 = (char *)operator new(72 * v11);
    *a1 = v13;
    a1[1] = v13;
    a1[2] = &v13[v12];
    uint64_t v14 = sub_367618(v8, a2, a3, (uint64_t)v13);
LABEL_23:
    a1[1] = (void *)v14;
    return;
  }
  __darwin_ct_rune_t v15 = (char *)a1[1];
  if (0x8E38E38E38E38E39 * ((v15 - v9) >> 3) < a4)
  {
    uint64_t v16 = a2 + 8 * ((v15 - v9) >> 3);
    if (v15 != v9)
    {
      uint64_t v17 = (uint64_t)(v9 + 48);
      size_t v18 = (void **)(a2 + 56);
      do
      {
        __darwin_ct_rune_t v19 = v18 - 7;
        *(_DWORD *)(v17 - 48) = *((_DWORD *)v18 - 14);
        std::string::operator=((std::string *)(v17 - 40), (const std::string *)v18 - 2);
        *(_OWORD *)(v17 - 16) = *(_OWORD *)(v18 - 3);
        if ((void **)(v17 - 48) != v18 - 7) {
          sub_360A08(v17, *(v18 - 1), *v18, ((char *)*v18 - (char *)*(v18 - 1)) >> 5);
        }
        v17 += 72;
        v18 += 9;
      }
      while (v19 + 9 != (void **)v16);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v14 = sub_367618(v8, v16, a3, (uint64_t)v9);
    goto LABEL_23;
  }
  if (a2 != a3)
  {
    uint64_t v20 = (uint64_t)(v9 + 48);
    unint64_t v21 = (void **)(a2 + 56);
    do
    {
      uint64_t v22 = v21 - 7;
      *(_DWORD *)(v20 - 48) = *((_DWORD *)v21 - 14);
      std::string::operator=((std::string *)(v20 - 40), (const std::string *)v21 - 2);
      *(_OWORD *)(v20 - 16) = *(_OWORD *)(v21 - 3);
      if ((void **)(v20 - 48) != v21 - 7) {
        sub_360A08(v20, *(v21 - 1), *v21, ((char *)*v21 - (char *)*(v21 - 1)) >> 5);
      }
      v9 += 72;
      v20 += 72;
      v21 += 9;
    }
    while (v22 + 9 != (void **)a3);
    __darwin_ct_rune_t v15 = (char *)a1[1];
  }
  while (v15 != v9)
  {
    uint64_t v23 = *((void *)v15 - 3);
    if (v23)
    {
      uint64_t v24 = *((void *)v15 - 2);
      __darwin_ct_rune_t v25 = (void *)*((void *)v15 - 3);
      if (v24 != v23)
      {
        do
        {
          if (*(char *)(v24 - 1) < 0) {
            operator delete(*(void **)(v24 - 24));
          }
          v24 -= 32;
        }
        while (v24 != v23);
        __darwin_ct_rune_t v25 = (void *)*((void *)v15 - 3);
      }
      *((void *)v15 - 2) = v23;
      operator delete(v25);
    }
    if (*(v15 - 41) < 0) {
      operator delete(*((void **)v15 - 8));
    }
    v15 -= 72;
  }
  a1[1] = v9;
}

void sub_367540(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_367548(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_367550(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    int v3 = (char *)a1[1];
    int v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        uint64_t v5 = *((void *)v3 - 3);
        if (v5)
        {
          uint64_t v6 = *((void *)v3 - 2);
          __darwin_ct_rune_t v7 = (void *)*((void *)v3 - 3);
          if (v6 != v5)
          {
            do
            {
              if (*(char *)(v6 - 1) < 0) {
                operator delete(*(void **)(v6 - 24));
              }
              v6 -= 32;
            }
            while (v6 != v5);
            __darwin_ct_rune_t v7 = (void *)*((void *)v3 - 3);
          }
          *((void *)v3 - 2) = v5;
          operator delete(v7);
        }
        if (*(v3 - 41) < 0) {
          operator delete(*((void **)v3 - 8));
        }
        v3 -= 72;
      }
      while (v3 != v1);
      int v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_367618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  if (a2 != a3)
  {
    uint64_t v6 = (long long *)(a2 + 8);
    do
    {
      uint64_t v7 = (uint64_t)v6 - 8;
      *(_DWORD *)uint64_t v4 = *((_DWORD *)v6 - 2);
      if (*((char *)v6 + 23) < 0)
      {
        sub_4200((unsigned char *)(v4 + 8), *(void **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v8 = *v6;
        *(void *)(v4 + 24) = *((void *)v6 + 2);
        *(_OWORD *)(v4 + 8) = v8;
      }
      long long v9 = *(long long *)((char *)v6 + 24);
      *(void *)(v4 + 48) = 0;
      *(_OWORD *)(v4 + 32) = v9;
      *(void *)(v4 + 56) = 0;
      *(void *)(v4 + 64) = 0;
      sub_360840((unsigned char *)(v4 + 48), *((void *)v6 + 5), *((void *)v6 + 6), (uint64_t)(*((void *)v6 + 6) - *((void *)v6 + 5)) >> 5);
      uint64_t v4 = v11 + 72;
      v11 += 72;
      uint64_t v6 = (long long *)((char *)v6 + 72);
    }
    while (v7 + 72 != a3);
  }
  return v4;
}

void sub_3676F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_367708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 + 31) < 0) {
    operator delete(*v10);
  }
  sub_36772C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_36772C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      uint64_t v5 = *(void *)(v3 - 24);
      if (v5)
      {
        uint64_t v6 = *(void *)(v3 - 16);
        uint64_t v7 = *(void **)(v3 - 24);
        if (v6 != v5)
        {
          do
          {
            if (*(char *)(v6 - 1) < 0) {
              operator delete(*(void **)(v6 - 24));
            }
            v6 -= 32;
          }
          while (v6 != v5);
          uint64_t v7 = *(void **)(v3 - 24);
        }
        *(void *)(v3 - 16) = v5;
        operator delete(v7);
      }
      if (*(char *)(v3 - 41) < 0) {
        operator delete(*(void **)(v3 - 64));
      }
      v3 -= 72;
    }
  }
  return a1;
}

uint64_t *sub_3677E0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a2;
  unint64_t v7 = __ROR8__(*a2, 32);
  unint64_t v8 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v7 ^ (v7 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v7 ^ (v7 >> 33))) >> 33));
  unint64_t v9 = ((v8 ^ (v8 >> 33)) + 0x388152A534) ^ 0xDEADBEEF;
  uint64_t v10 = *((unsigned int *)a2 + 2);
  unint64_t v11 = (v10 + (v9 << 6) + (v9 >> 2) + 2654435769u) ^ v9;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      uint64_t v4 = (v10 + (v9 << 6) + (v9 >> 2) + 2654435769u) ^ v9;
      if (v11 >= v12) {
        uint64_t v4 = v11 % v12;
      }
    }
    else
    {
      uint64_t v4 = v11 & (v12 - 1);
    }
    uint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t result = *v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = result[1];
            if (v17 == v11)
            {
              if (*((_DWORD *)result + 4) == v6
                && *(uint64_t *)((char *)result + 20) == __PAIR64__(v10, HIDWORD(v6)))
              {
                return result;
              }
            }
            else if ((v17 & (v12 - 1)) != v4)
            {
              goto LABEL_25;
            }
            uint64_t result = (uint64_t *)*result;
            if (!result) {
              goto LABEL_25;
            }
          }
        }
        do
        {
          unint64_t v16 = result[1];
          if (v16 == v11)
          {
            if (*((_DWORD *)result + 4) == v6
              && *(uint64_t *)((char *)result + 20) == __PAIR64__(v10, HIDWORD(v6)))
            {
              return result;
            }
          }
          else
          {
            if (v16 >= v12) {
              v16 %= v12;
            }
            if (v16 != v4) {
              break;
            }
          }
          uint64_t result = (uint64_t *)*result;
        }
        while (result);
      }
    }
  }
LABEL_25:
  sub_367BB0(a1, v11, a3, a4, (uint64_t)v31);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v21 = 1;
    if (v12 >= 3) {
      BOOL v21 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v12);
    unint64_t v23 = vcvtps_u32_f32(v18 / v19);
    if (v22 <= v23) {
      size_t prime = v23;
    }
    else {
      size_t prime = v22;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v25 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v25) {
      goto LABEL_39;
    }
    if (prime < *(void *)&v25)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v25 < 3uLL || (uint8x8_t v27 = (uint8x8_t)vcnt_s8(v25), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime < *(void *)&v25) {
LABEL_39:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v29 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        uint64_t v4 = v11 % v12;
        uint64_t v20 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        if (v20) {
          goto LABEL_28;
        }
      }
      else
      {
        uint64_t v4 = v11;
        uint64_t v20 = *(void **)(*(void *)a1 + 8 * v11);
        if (v20) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      uint64_t v4 = v29 & v11;
      uint64_t v20 = *(void **)(*(void *)a1 + 8 * (v29 & v11));
      if (v20) {
        goto LABEL_28;
      }
    }
LABEL_52:
    *(void *)v31[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v31[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v31[0])
    {
      unint64_t v30 = *(void *)(*(void *)v31[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v30 >= v12) {
          v30 %= v12;
        }
      }
      else
      {
        v30 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v30) = v31[0];
    }
    goto LABEL_63;
  }
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (!v20) {
    goto LABEL_52;
  }
LABEL_28:
  *(void *)v31[0] = *v20;
  void *v20 = v31[0];
LABEL_63:
  uint64_t result = (uint64_t *)v31[0];
  ++*(void *)(a1 + 24);
  return result;
}

void sub_367B9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_367CDC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_367BB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  uint64_t v10 = operator new(0x78uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *uint64_t v10 = 0;
  v10[1] = a2;
  v10[2] = *(void *)a3;
  *((_DWORD *)v10 + 6) = *(_DWORD *)(a3 + 8);
  long long v11 = *(_OWORD *)(a4 + 16);
  *((_OWORD *)v10 + 2) = *(_OWORD *)a4;
  *((_OWORD *)v10 + 3) = v11;
  __int16 v12 = *(_WORD *)(a4 + 32);
  v10[9] = 0;
  *((_WORD *)v10 + 32) = v12;
  v10[10] = 0;
  v10[11] = 0;
  uint64_t v14 = *(unsigned char **)(a4 + 40);
  uint8x8_t v13 = *(unsigned char **)(a4 + 48);
  int64_t v15 = v13 - v14;
  if (v13 != v14)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v15 >> 2) >= 0xCCCCCCCCCCCCCCDLL) {
      sub_2E00();
    }
    unint64_t v16 = (char *)operator new(v15);
    v10[9] = v16;
    v10[10] = v16;
    uint64_t v17 = &v16[4 * (v15 >> 2)];
    v10[11] = v17;
    memcpy(v16, v14, v15 - 1);
    v10[10] = v17;
  }
  uint64_t result = sub_367D24(v10 + 12, (uint64_t *)(a4 + 64));
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_367CB4(_Unwind_Exception *a1)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 80) = v5;
    operator delete(v5);
  }
  sub_367CDC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_367CDC(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_367E08(v2 + 2);
    }
    operator delete(v2);
  }
  return a1;
}

void *sub_367D24(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0x8E38E38E38E38E39 * (v6 >> 3);
    if (v7 >= 0x38E38E38E38E38FLL) {
      sub_2E00();
    }
    unint64_t v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[72 * v7];
    a1[1] = sub_367618(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_367DDC(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  if (*(void *)v1) {
    sub_20A774C((void **)(v1 + 8), *(char **)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_367E08(void *a1)
{
  uint64_t v2 = a1[10];
  if (v2)
  {
    uint64_t v3 = a1[11];
    uint64_t v4 = (void *)a1[10];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(void *)(v3 - 24);
        if (v5)
        {
          uint64_t v6 = *(void *)(v3 - 16);
          unint64_t v7 = *(void **)(v3 - 24);
          if (v6 != v5)
          {
            do
            {
              if (*(char *)(v6 - 1) < 0) {
                operator delete(*(void **)(v6 - 24));
              }
              v6 -= 32;
            }
            while (v6 != v5);
            unint64_t v7 = *(void **)(v3 - 24);
          }
          *(void *)(v3 - 16) = v5;
          operator delete(v7);
        }
        if (*(char *)(v3 - 41) < 0) {
          operator delete(*(void **)(v3 - 64));
        }
        v3 -= 72;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[10];
    }
    a1[11] = v2;
    operator delete(v4);
  }
  unint64_t v8 = (void *)a1[7];
  if (v8)
  {
    a1[8] = v8;
    operator delete(v8);
  }
}

uint64_t *sub_367EF8(void *a1, uint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  unint64_t v4 = __ROR8__(*a2, 32);
  unint64_t v5 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v4 ^ (v4 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v4 ^ (v4 >> 33))) >> 33));
  unint64_t v6 = ((v5 ^ (v5 >> 33)) + 0x388152A534) ^ 0xDEADBEEF;
  uint64_t v7 = *((unsigned int *)a2 + 2);
  unint64_t v8 = (v7 + (v6 << 6) + (v6 >> 2) + 2654435769u) ^ v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v2);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v8;
    if (v8 >= *(void *)&v2) {
      unint64_t v10 = v8 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v10 = v8 & (*(void *)&v2 - 1);
  }
  long long v11 = *(uint64_t ***)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  uint64_t result = *v11;
  if (*v11)
  {
    if (v9.u32[0] < 2uLL)
    {
      uint64_t v13 = *(void *)&v2 - 1;
      while (1)
      {
        uint64_t v15 = result[1];
        if (v8 == v15)
        {
          if (*((_DWORD *)result + 4) == v3 && *(uint64_t *)((char *)result + 20) == __PAIR64__(v7, HIDWORD(v3))) {
            return result;
          }
        }
        else if ((v15 & v13) != v10)
        {
          return 0;
        }
        uint64_t result = (uint64_t *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v14 = result[1];
      if (v8 == v14)
      {
        if (*((_DWORD *)result + 4) == v3 && *(uint64_t *)((char *)result + 20) == __PAIR64__(v7, HIDWORD(v3))) {
          return result;
        }
      }
      else
      {
        if (v14 >= *(void *)&v2) {
          v14 %= *(void *)&v2;
        }
        if (v14 != v10) {
          return 0;
        }
      }
      uint64_t result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

void sub_36807C()
{
  uint64_t v0 = __chkstk_darwin();
  int v2 = v1;
  uint64_t v4 = v3;
  unint64_t v5 = (uint64_t *)v0;
  uint64_t v7 = v6;
  sub_725D0((uint64_t)v50);
  sub_368814((uint64_t)&v47, v5);
  sub_2A239C((uint64_t)&v45, v5);
  sub_3688C8((uint64_t)v42, v5);
  unint64_t v8 = operator new(0x50uLL);
  v8[1] = 0;
  v8[2] = 0;
  *unint64_t v8 = off_2438AB0;
  uint64_t v9 = (uint64_t)(v8 + 3);
  sub_366E9C((uint64_t)(v8 + 3));
  *uint64_t v7 = v8 + 3;
  v7[1] = v8;
  uint64_t v10 = *(void *)(v4 + 40);
  if (v10) {
    long long v11 = (uint64_t *)(v10 + 8);
  }
  else {
    long long v11 = 0;
  }
  uint64_t v12 = *(int *)(v4 + 32);
  if (v12)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = &v11[v12];
    do
    {
      sub_368A78((uint64_t)&v45, (uint64_t)v42, *v11, (uint64_t)&v35);
      if (v36) {
        BOOL v16 = HIDWORD(v36) == -1;
      }
      else {
        BOOL v16 = 1;
      }
      if (v16)
      {
        ++v14;
        uint64_t v17 = (char *)__p;
        if (__p) {
          goto LABEL_16;
        }
      }
      else if (sub_36CA18(&v35, v2))
      {
        sub_366F4C(v9, (uint64_t)&v35);
        uint64_t v17 = (char *)__p;
        if (__p) {
          goto LABEL_16;
        }
      }
      else
      {
        ++v13;
        uint64_t v17 = (char *)__p;
        if (__p)
        {
LABEL_16:
          float v18 = (char *)v40;
          float v19 = v17;
          if (v40 != v17)
          {
            do
            {
              uint64_t v20 = *((void *)v18 - 3);
              if (v20)
              {
                uint64_t v21 = *((void *)v18 - 2);
                unint64_t v22 = (void *)*((void *)v18 - 3);
                if (v21 != v20)
                {
                  do
                  {
                    if (*(char *)(v21 - 1) < 0) {
                      operator delete(*(void **)(v21 - 24));
                    }
                    v21 -= 32;
                  }
                  while (v21 != v20);
                  unint64_t v22 = (void *)*((void *)v18 - 3);
                }
                *((void *)v18 - 2) = v20;
                operator delete(v22);
              }
              if (*(v18 - 41) < 0) {
                operator delete(*((void **)v18 - 8));
              }
              v18 -= 72;
            }
            while (v18 != v17);
            float v19 = __p;
          }
          __darwin_ct_rune_t v40 = v17;
          operator delete(v19);
        }
      }
      if (v37)
      {
        __darwin_ct_rune_t v38 = v37;
        operator delete(v37);
      }
      ++v11;
    }
    while (v11 != v15);
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v35);
    sub_188FC78(&v35, (uint64_t)"Adapted Protobuffer realtime snapshot in ", 41);
    sub_72688((uint64_t)v50);
    unint64_t v23 = (void *)std::ostream::operator<<();
    sub_188FC78(v23, (uint64_t)" ms (", 5);
    uint64_t v24 = (void *)std::ostream::operator<<();
    sub_188FC78(v24, (uint64_t)" trip updates; ", 15);
    int8x8_t v25 = (void *)std::ostream::operator<<();
    sub_188FC78(v25, (uint64_t)" failed to resolve; ", 20);
    unint64_t v26 = (void *)std::ostream::operator<<();
    uint8x8_t v27 = sub_188FC78(v26, (uint64_t)" inconsistent", 13);
    sub_188FC78(v27, (uint64_t)")", 1);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v33, 1u);
    if (v34 < 0) {
      operator delete(v33);
    }
    if (v41 < 0) {
      operator delete(v40);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  uint64_t v28 = v44;
  if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  unint64_t v29 = v43;
  if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  unint64_t v30 = v46;
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  __darwin_ct_rune_t v31 = v49;
  if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  __darwin_ct_rune_t v32 = v48;
  if (v48)
  {
    if (!atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_3685BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a19);
  sub_14A84(a11);
  sub_368744((uint64_t)&a52);
  sub_14A84((uint64_t)&STACK[0x1070]);
  sub_368744((uint64_t)&STACK[0x1088]);
  _Unwind_Resume(a1);
}

void *sub_368670(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2)
  {
    uint64_t v3 = a1[9];
    uint64_t v4 = (void *)a1[8];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(void *)(v3 - 24);
        if (v5)
        {
          uint64_t v6 = *(void *)(v3 - 16);
          uint64_t v7 = *(void **)(v3 - 24);
          if (v6 != v5)
          {
            do
            {
              if (*(char *)(v6 - 1) < 0) {
                operator delete(*(void **)(v6 - 24));
              }
              v6 -= 32;
            }
            while (v6 != v5);
            uint64_t v7 = *(void **)(v3 - 24);
          }
          *(void *)(v3 - 16) = v5;
          operator delete(v7);
        }
        if (*(char *)(v3 - 41) < 0) {
          operator delete(*(void **)(v3 - 64));
        }
        v3 -= 72;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[8];
    }
    a1[9] = v2;
    operator delete(v4);
  }
  unint64_t v8 = (void *)a1[5];
  if (v8)
  {
    a1[6] = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_368744(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 3880);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v3) {
      return a1;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v3) {
      return a1;
    }
  }
  if (atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t sub_368814(uint64_t a1, void *a2)
{
  uint64_t v4 = (void **)*a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = 0;
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v3;
  do
  {
    uint64_t v6 = a1 + v5;
    *(_DWORD *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 40) = 0;
    *(void *)(v6 + 24) = 0;
    *(void *)(v6 + 48) = 0;
    v5 += 48;
  }
  while (v5 != 3840);
  *(_OWORD *)(a1 + 3856) = 0u;
  uint64_t v7 = a2[1];
  *(void *)(a1 + 3872) = *a2;
  *(void *)(a1 + 3880) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v8 = (void **)*a2;
  if (*a2) {
    LOBYTE(v8) = sub_2ABCE4(v8);
  }
  *(unsigned char *)(a1 + 3888) = (_BYTE)v8;
  return a1;
}

void sub_3688A8(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 3880);
  if (v3) {
    sub_20A7880(v3);
  }
  sub_20A7808((std::__shared_weak_count **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_3688C8(uint64_t a1, void *a2)
{
  uint64_t v4 = (void **)*a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = 0;
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v3;
  do
  {
    uint64_t v6 = a1 + v5;
    *(_DWORD *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 40) = 0;
    *(void *)(v6 + 24) = 0;
    *(void *)(v6 + 48) = 0;
    v5 += 48;
  }
  while (v5 != 3840);
  *(_OWORD *)(a1 + 3856) = 0u;
  uint64_t v7 = a2[1];
  *(void *)(a1 + 3872) = *a2;
  *(void *)(a1 + 3880) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v8 = (void **)*a2;
  if (*a2) {
    LOBYTE(v8) = sub_2ABCE4(v8);
  }
  *(unsigned char *)(a1 + 3888) = (_BYTE)v8;
  return a1;
}

void sub_36895C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 3880);
  if (v3) {
    sub_20A7880(v3);
  }
  sub_20A7808((std::__shared_weak_count **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_36897C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_2438AB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_36899C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_2438AB0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_3689F0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_367E08(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v4)
  {
    operator delete(v4);
  }
}

void sub_368A6C(atomic_ullong *a1@<X8>)
{
}

void sub_368A78(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(unsigned int **)(a3 + 80);
  uint64_t v123 = -1;
  LODWORD(v124) = 0x7FFFFFFF;
  unint64_t v8 = sub_2A2AD8(a1, v7, (uint64_t)&v123);
  if (v8 > 0xFFFFFFFEFFFFFFFFLL || v8 == 0) {
    goto LABEL_17;
  }
  unint64_t v10 = v8;
  long long v11 = *(uint64_t (****)())(a3 + 72);
  if (!v11) {
    long long v11 = &off_253CA98;
  }
  LODWORD(v123) = (*((_DWORD *)v11 + 13) << 16) | (*((_DWORD *)v11 + 14) << 24) | *((unsigned __int16 *)v11 + 24);
  int v12 = sub_3698D4(a2, v8, (unsigned __int16 *)&v123);
  if (v12 == -1) {
    goto LABEL_17;
  }
  int v13 = v12;
  uint64_t v14 = (int *)sub_369F8C(a2, v10, 0, "trip");
  uint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
  if (*v15 >= 0x13u)
  {
    uint64_t v16 = v15[9];
    if (v16)
    {
      if (*(int *)((char *)v14 + v16 + *(unsigned int *)((char *)v14 + v16)))
      {
        if (sub_723EC(1u))
        {
          sub_6BAC((uint64_t)&v123);
          sub_188FC78(&v123, (uint64_t)"Trip update for muid ", 21);
          uint64_t v17 = (void *)std::ostream::operator<<();
          sub_188FC78(v17, (uint64_t)" refers to a frequency (unscheduled) trip; ignoring it", 54);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&v131, 1u);
          if (SHIBYTE(v132) < 0) {
            operator delete((void *)v131);
          }
          if (v130 < 0) {
            operator delete(__p);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
LABEL_17:
        *(void *)a4 = -1;
        *(_OWORD *)(a4 + 8) = xmmword_20E22B0;
        *(void *)(a4 + 24) = 0x8000000080000000;
        *(_WORD *)(a4 + 32) = 0;
        *(_OWORD *)(a4 + 40) = 0u;
        *(_OWORD *)(a4 + 56) = 0u;
        *(_OWORD *)(a4 + 72) = 0u;
        return;
      }
    }
  }
  *(void *)(a4 + 20) = 0x8000000080000000;
  *(_DWORD *)(a4 + 28) = 0x7FFFFFFF;
  *(_OWORD *)(a4 + 40) = 0u;
  uint64_t v122 = (char **)(a4 + 40);
  *(_WORD *)(a4 + 32) = 0;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(void *)a4 = v7;
  *(void *)(a4 + 8) = v10;
  *(_DWORD *)(a4 + 16) = v13;
  float v18 = sub_369B60(a2, v10, 0);
  float v19 = &v18[-*(int *)v18];
  if (*(unsigned __int16 *)v19 < 5u)
  {
    uint64_t v20 = 0;
  }
  else
  {
    uint64_t v20 = *((unsigned __int16 *)v19 + 2);
    if (v20) {
      v20 += (uint64_t)&v18[*(unsigned int *)&v18[v20]];
    }
  }
  uint64_t v121 = (v10 >> 30) & 0x3FFFFFFFCLL;
  uint64_t v21 = (int *)(v20 + v121 + 4 + *(unsigned int *)(v20 + v121 + 4));
  unint64_t v22 = (unsigned __int16 *)((char *)v21 - *v21);
  if (*v22 >= 0xBu && (uint64_t v23 = v22[5]) != 0) {
    int v24 = 10 * *(int *)((char *)v21 + v23);
  }
  else {
    int v24 = -10;
  }
  *(_DWORD *)(a4 + 20) = v24;
  uint64_t v25 = *(void *)(a3 + 88);
  if (v25 <= 0x1F3FFFFFC17)
  {
    if (v25 >= (uint64_t)0xFFFFFE0BFFFFFC19) {
      unsigned int v26 = sub_36A4FC(v25 / 1000);
    }
    else {
      unsigned int v26 = 0x80000000;
    }
  }
  else
  {
    unsigned int v26 = 2147483646;
  }
  *(_DWORD *)(a4 + 24) = v26;
  uint64_t v27 = *(void *)(a3 + 96);
  if (v27 <= 0x1F3FFFFFC17)
  {
    if (v27 >= (uint64_t)0xFFFFFE0BFFFFFC19) {
      unsigned int v28 = sub_36A4FC(v27 / 1000);
    }
    else {
      unsigned int v28 = 0x80000000;
    }
  }
  else
  {
    unsigned int v28 = 2147483646;
  }
  *(_DWORD *)(a4 + 28) = v28;
  *(unsigned char *)(a4 + 32) = *(_DWORD *)(a3 + 104);
  *(unsigned char *)(a4 + 33) = *(unsigned char *)(a3 + 108);
  unint64_t v29 = (int *)sub_369F8C(a2, v10, 0, "trip");
  unint64_t v30 = (unsigned __int16 *)((char *)v29 - *v29);
  if (*v30 >= 9u && (uint64_t v31 = v30[4]) != 0)
  {
    unint64_t v32 = *(unsigned int *)((char *)v29 + v31);
    __darwin_ct_rune_t v33 = (char **)(a4 + 48);
    uint64_t v34 = *(void *)(a4 + 40);
    unint64_t v35 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a4 + 48) - v34) >> 2);
    if (v32 > v35)
    {
      sub_36A7B4(v122, v32 - v35);
      goto LABEL_43;
    }
  }
  else
  {
    unint64_t v32 = 0;
    __darwin_ct_rune_t v33 = (char **)(a4 + 48);
    uint64_t v34 = *(void *)(a4 + 40);
    unint64_t v35 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a4 + 48) - v34) >> 2);
  }
  if (v35 > v32) {
    void *v33 = (char *)(v34 + 20 * v32);
  }
LABEL_43:
  uint64_t v36 = *(void *)(a3 + 40);
  if (v36) {
    __darwin_ct_rune_t v37 = (uint64_t *)(v36 + 8);
  }
  else {
    __darwin_ct_rune_t v37 = 0;
  }
  uint64_t v38 = *(int *)(a3 + 32);
  if (v38)
  {
    __darwin_ct_rune_t v39 = &v37[v38];
    do
    {
      uint64_t v40 = *v37;
      unint64_t v41 = *(unsigned int *)(*v37 + 40);
      if (0xCCCCCCCCCCCCCCCDLL * ((*v33 - *v122) >> 2) <= v41)
      {
        if (sub_723EC(1u))
        {
          sub_6BAC((uint64_t)&v123);
          sub_188FC78(&v123, (uint64_t)"Trip update for muid ", 21);
          __darwin_ct_rune_t v56 = (void *)std::ostream::operator<<();
          sub_188FC78(v56, (uint64_t)" with ", 6);
          __darwin_ct_rune_t v57 = (void *)std::ostream::operator<<();
          sub_188FC78(v57, (uint64_t)" stops has a sequence number of ", 32);
          __darwin_ct_rune_t v58 = (void *)std::ostream::operator<<();
          sub_188FC78(v58, (uint64_t)"; ignoring it", 13);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&v131, 1u);
          if (SHIBYTE(v132) < 0) {
            operator delete((void *)v131);
          }
          uint64_t v123 = v119;
          *(uint64_t *)((char *)&v123 + *(void *)(v119 - 24)) = v118;
          if (v130 < 0) {
            operator delete(__p);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
      }
      else
      {
        int v42 = *(_DWORD *)(v40 + 16);
        if (v42)
        {
          uint64_t v43 = *(void *)(v40 + 24);
          __darwin_ct_rune_t v44 = (const float *)(a4 + 20);
          int v45 = *(_DWORD *)(v43 + 112);
          int v46 = *(_DWORD *)(v43 + 116);
          char v47 = *(unsigned char *)(v43 + 120);
          uint64_t v48 = (uint64_t)&(*v122)[20 * v41];
          int32x2_t v49 = (int32x2_t)vld1_dup_f32(v44);
          int32x2_t v50 = vmla_s32(vneg_s32(v49), *(int32x2_t *)(v43 + 124), (int32x2_t)0xA0000000ALL);
          *(unsigned char *)uint64_t v48 = *(_DWORD *)(v40 + 44);
          *(_DWORD *)(v48 + 4) = v41;
          *(int32x2_t *)(v48 + 8) = v50;
          *(unsigned char *)(v48 + 16) = v45;
          *(unsigned char *)(v48 + 17) = v46;
          *(unsigned char *)(v48 + 18) = v47;
          int v42 = *(_DWORD *)(v40 + 16);
        }
        if ((v42 & 2) != 0)
        {
          LODWORD(v123) = -1;
          uint64_t v125 = 0;
          long long v124 = 0uLL;
          LOBYTE(v126) = 2;
          *((void *)&v126 + 1) = sub_1133328();
          v127[1] = 0;
          uint64_t v128 = 0;
          v127[0] = 0;
          LODWORD(v123) = *(_DWORD *)(v40 + 40);
          __darwin_ct_rune_t v51 = *(uint64_t (****)())(v40 + 32);
          if (!v51) {
            __darwin_ct_rune_t v51 = &off_253CB80;
          }
          __darwin_ct_rune_t v52 = (uint64_t (***)())v51[3];
          if (v52) {
            __darwin_ct_rune_t v53 = v52;
          }
          else {
            __darwin_ct_rune_t v53 = &off_253C920;
          }
          sub_35E660((uint64_t)v53, (uint64_t)&v131);
          long long v124 = v131;
          uint64_t v125 = v132;
          long long v126 = v133;
          *(_OWORD *)std::string::size_type v127 = v134;
          uint64_t v128 = v135;
          unint64_t v54 = *(void *)(a4 + 72);
          if (v54 >= *(void *)(a4 + 80))
          {
            __darwin_ct_rune_t v59 = sub_36A97C((void **)(a4 + 64), (uint64_t)&v123);
            __darwin_ct_rune_t v60 = (void **)v127[0];
            *(void *)(a4 + 72) = v59;
            if (v60)
            {
              __darwin_ct_rune_t v61 = (void **)v127[1];
              __darwin_ct_rune_t v62 = v60;
              if (v127[1] != v60)
              {
                do
                {
                  if (*((char *)v61 - 1) < 0) {
                    operator delete(*(v61 - 3));
                  }
                  v61 -= 4;
                }
                while (v61 != v60);
                __darwin_ct_rune_t v62 = (void **)v127[0];
              }
              v127[1] = v60;
              operator delete(v62);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v54 = v123;
            long long v55 = v124;
            *(void *)(v54 + 24) = v125;
            *(_OWORD *)(v54 + 8) = v55;
            uint64_t v125 = 0;
            long long v124 = 0uLL;
            *(_OWORD *)(v54 + 32) = v126;
            *(void *)(v54 + 56) = 0;
            *(void *)(v54 + 64) = 0;
            *(void *)(v54 + 48) = 0;
            *(_OWORD *)(v54 + 48) = *(_OWORD *)v127;
            *(void *)(v54 + 64) = v128;
            v127[0] = 0;
            v127[1] = 0;
            uint64_t v128 = 0;
            *(void *)(a4 + 72) = v54 + 72;
          }
          if (SHIBYTE(v125) < 0) {
            operator delete((void *)v124);
          }
        }
      }
      ++v37;
    }
    while (v37 != v39);
  }
  __darwin_ct_rune_t v63 = *v33;
  __darwin_ct_rune_t v64 = *v122;
  if (*v33 != *v122)
  {
    uint64_t v65 = 0;
    unsigned int v66 = 0;
    __darwin_ct_rune_t v120 = (unsigned int *)(v121 + 4);
    while (*(_DWORD *)&v64[20 * v65 + 4] != -1)
    {
LABEL_80:
      uint64_t v65 = ++v66;
      if (0xCCCCCCCCCCCCCCCDLL * ((v63 - v64) >> 2) <= v66) {
        goto LABEL_131;
      }
    }
    __darwin_ct_rune_t v70 = sub_369B60(a2, v10, 0);
    __darwin_ct_rune_t v71 = &v70[-*(int *)v70];
    unsigned int v72 = *(unsigned __int16 *)v71;
    if (v72 <= 4)
    {
      uint64_t v76 = 0;
      __darwin_ct_rune_t v74 = (int *)((char *)v120 + *v120);
      BOOL v77 = (unsigned __int16 *)((char *)v74 - *v74);
      if (*v77 < 0xDu) {
        goto LABEL_94;
      }
    }
    else
    {
      uint64_t v73 = *((unsigned __int16 *)v71 + 2);
      if (*((_WORD *)v71 + 2)) {
        v73 += (uint64_t)&v70[*(unsigned int *)&v70[v73]];
      }
      __darwin_ct_rune_t v74 = (int *)(v73 + v121 + 4 + *(unsigned int *)(v73 + v121 + 4));
      if (v72 >= 7 && (uint64_t v75 = *((unsigned __int16 *)v71 + 3)) != 0)
      {
        uint64_t v76 = (unsigned int *)&v70[v75 + *(unsigned int *)&v70[v75]];
        BOOL v77 = (unsigned __int16 *)((char *)v74 - *v74);
        if (*v77 < 0xDu) {
          goto LABEL_94;
        }
      }
      else
      {
        uint64_t v76 = 0;
        BOOL v77 = (unsigned __int16 *)((char *)v74 - *v74);
        if (*v77 < 0xDu) {
          goto LABEL_94;
        }
      }
    }
    uint64_t v78 = v77[6];
    if (v78)
    {
      int v79 = *(int *)((char *)v74 + v78);
      goto LABEL_95;
    }
LABEL_94:
    int v79 = -1;
LABEL_95:
    int v80 = *(_DWORD *)(sub_36A650(v76, v79 + v66) + 8);
    __darwin_ct_rune_t v81 = sub_369B60(a2, v10, 0);
    __darwin_ct_rune_t v82 = &v81[-*(int *)v81];
    unsigned int v83 = *(unsigned __int16 *)v82;
    if (v83 <= 4)
    {
      __darwin_ct_rune_t v87 = 0;
      __darwin_ct_rune_t v85 = (int *)((char *)v120 + *v120);
      __darwin_ct_rune_t v88 = (unsigned __int16 *)((char *)v85 - *v85);
      if (*v88 < 0xDu) {
        goto LABEL_107;
      }
    }
    else
    {
      uint64_t v84 = *((unsigned __int16 *)v82 + 2);
      if (*((_WORD *)v82 + 2)) {
        v84 += (uint64_t)&v81[*(unsigned int *)&v81[v84]];
      }
      __darwin_ct_rune_t v85 = (int *)(v84 + v121 + 4 + *(unsigned int *)(v84 + v121 + 4));
      if (v83 >= 7 && (uint64_t v86 = *((unsigned __int16 *)v82 + 3)) != 0)
      {
        __darwin_ct_rune_t v87 = (unsigned int *)&v81[v86 + *(unsigned int *)&v81[v86]];
        __darwin_ct_rune_t v88 = (unsigned __int16 *)((char *)v85 - *v85);
        if (*v88 < 0xDu) {
          goto LABEL_107;
        }
      }
      else
      {
        __darwin_ct_rune_t v87 = 0;
        __darwin_ct_rune_t v88 = (unsigned __int16 *)((char *)v85 - *v85);
        if (*v88 < 0xDu) {
          goto LABEL_107;
        }
      }
    }
    uint64_t v89 = v88[6];
    if (v89)
    {
      int v90 = *(int *)((char *)v85 + v89);
LABEL_108:
      int v91 = *(_DWORD *)(sub_36A650(v87, v90 + v66) + 12);
      __darwin_ct_rune_t v92 = sub_369B60(a2, v10, 0);
      __darwin_ct_rune_t v93 = &v92[-*(int *)v92];
      if (*(unsigned __int16 *)v93 < 5u)
      {
        uint64_t v94 = 0;
      }
      else
      {
        uint64_t v94 = *((unsigned __int16 *)v93 + 2);
        if (*((_WORD *)v93 + 2)) {
          v94 += (uint64_t)&v92[*(unsigned int *)&v92[v94]];
        }
      }
      __darwin_ct_rune_t v95 = (int *)(v94 + v121 + 4 + *(unsigned int *)(v94 + v121 + 4));
      __darwin_ct_rune_t v96 = (unsigned __int16 *)((char *)v95 - *v95);
      if (*v96 >= 0xDu && (uint64_t v97 = v96[6]) != 0) {
        int v98 = *(int *)((char *)v95 + v97);
      }
      else {
        int v98 = -1;
      }
      char v99 = v92[24 * v98
              + 20
              + 24 * v66
              + *((unsigned __int16 *)v93 + 3)
              + *(unsigned int *)&v92[*((unsigned __int16 *)v93 + 3)]];
      __darwin_ct_rune_t v100 = sub_369B60(a2, v10, 0);
      __darwin_ct_rune_t v101 = &v100[-*(int *)v100];
      if (*(unsigned __int16 *)v101 < 5u)
      {
        uint64_t v102 = 0;
      }
      else
      {
        uint64_t v102 = *((unsigned __int16 *)v101 + 2);
        if (*((_WORD *)v101 + 2)) {
          v102 += (uint64_t)&v100[*(unsigned int *)&v100[v102]];
        }
      }
      __darwin_ct_rune_t v103 = (int *)(v102 + v121 + 4 + *(unsigned int *)(v102 + v121 + 4));
      __darwin_ct_rune_t v104 = (unsigned __int16 *)((char *)v103 - *v103);
      if (*v104 >= 0xDu && (uint64_t v105 = v104[6]) != 0) {
        int v106 = *(int *)((char *)v103 + v105);
      }
      else {
        int v106 = -1;
      }
      char v107 = v100[24 * v106
                + 21
                + 24 * v66
                + *((unsigned __int16 *)v101 + 3)
                + *(unsigned int *)&v100[*((unsigned __int16 *)v101 + 3)]];
      unint64_t v108 = sub_369B60(a2, v10, 0);
      __darwin_ct_rune_t v109 = &v108[-*(int *)v108];
      if (*(unsigned __int16 *)v109 < 5u)
      {
        uint64_t v110 = 0;
      }
      else
      {
        uint64_t v110 = *((unsigned __int16 *)v109 + 2);
        if (*((_WORD *)v109 + 2)) {
          v110 += (uint64_t)&v108[*(unsigned int *)&v108[v110]];
        }
      }
      __darwin_ct_rune_t v111 = (int *)(v110 + v121 + 4 + *(unsigned int *)(v110 + v121 + 4));
      __darwin_ct_rune_t v112 = (unsigned __int16 *)((char *)v111 - *v111);
      if (*v112 >= 0xDu && (uint64_t v113 = v112[6]) != 0) {
        int v67 = *(int *)((char *)v111 + v113);
      }
      else {
        int v67 = -1;
      }
      BOOL v68 = v108[24 * v67
               + 22
               + 24 * v66
               + *((unsigned __int16 *)v109 + 3)
               + *(unsigned int *)&v108[*((unsigned __int16 *)v109 + 3)]] != 0;
      uint64_t v69 = (uint64_t)&(*v122)[20 * v65];
      *(unsigned char *)uint64_t v69 = -1;
      *(_DWORD *)(v69 + 4) = v66;
      *(_DWORD *)(v69 + 8) = 10 * v80;
      *(_DWORD *)(v69 + 12) = 10 * v91;
      *(unsigned char *)(v69 + 16) = v99;
      *(unsigned char *)(v69 + 17) = v107;
      *(unsigned char *)(v69 + 18) = v68;
      __darwin_ct_rune_t v63 = *v33;
      __darwin_ct_rune_t v64 = *v122;
      goto LABEL_80;
    }
LABEL_107:
    int v90 = -1;
    goto LABEL_108;
  }
LABEL_131:
  __darwin_ct_rune_t v114 = *(int **)(a4 + 64);
  __darwin_ct_rune_t v115 = *(int **)(a4 + 72);
  unint64_t v116 = 126 - 2 * __clz(0x8E38E38E38E38E39 * (((char *)v115 - (char *)v114) >> 3));
  if (v115 == v114) {
    uint64_t v117 = 0;
  }
  else {
    uint64_t v117 = v116;
  }
  sub_36AB9C(v114, v115, v117, 1);
}

void sub_36977C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  if (*(char *)(v11 - 145) < 0)
  {
    operator delete(*(void **)(v11 - 168));
    sub_111ECAC((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_3697F0(_Unwind_Exception *a1)
{
  sub_368670(v1);
  _Unwind_Resume(a1);
}

void sub_369804(_Unwind_Exception *a1)
{
  sub_368670(v1);
  _Unwind_Resume(a1);
}

void sub_369818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_369AC8((uint64_t)va);
  sub_368670(v11);
  _Unwind_Resume(a1);
}

void sub_36987C(_Unwind_Exception *a1)
{
  sub_368670(v1);
  _Unwind_Resume(a1);
}

void sub_369890(_Unwind_Exception *a1)
{
  sub_368670(v1);
  _Unwind_Resume(a1);
}

void sub_3698C0(_Unwind_Exception *a1)
{
  sub_368670(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_3698D4(uint64_t a1, unint64_t a2, unsigned __int16 *a3)
{
  uint64_t v5 = sub_369B60(a1, a2, 0);
  uint64_t v6 = &v5[-*(int *)v5];
  unsigned int v7 = *(unsigned __int16 *)v6;
  if (v7 < 5)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = *((unsigned __int16 *)v6 + 2);
    if (*((_WORD *)v6 + 2)) {
      v8 += (uint64_t)&v5[*(unsigned int *)&v5[v8]];
    }
  }
  uint64_t v9 = (int *)(v8 + 4 * HIDWORD(a2) + 4 + *(unsigned int *)(v8 + 4 * HIDWORD(a2) + 4));
  unint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
  unsigned int v11 = *v10;
  if (v11 < 0x15) {
    return 0xFFFFFFFFLL;
  }
  if (v10[10])
  {
    unsigned int v12 = *(int *)((char *)v9 + v10[10]);
    if (v11 >= 0x17) {
      goto LABEL_8;
    }
    return 0xFFFFFFFFLL;
  }
  unsigned int v12 = -1;
  if (v11 < 0x17) {
    return 0xFFFFFFFFLL;
  }
LABEL_8:
  uint64_t v13 = v10[11];
  if (v10[11]) {
    LODWORD(v13) = *(unsigned __int16 *)((char *)v9 + v13);
  }
  unsigned int v14 = v13 + v12;
  BOOL v15 = v12 >= v14;
  if (v12 > v14) {
    unsigned int v14 = v12;
  }
  if (v15) {
    return 0xFFFFFFFFLL;
  }
  int v16 = *a3;
  int v17 = *((unsigned __int8 *)a3 + 2);
  int v18 = *((unsigned __int8 *)a3 + 3);
  if (v7 <= 0xC)
  {
    while (*(unsigned __int16 *)((8 * v12) | 4) != v16
         || *((unsigned __int8 *)&def_332C + ((8 * v12) | 4) + 2) != v17
         || *((unsigned __int8 *)&def_332C + ((8 * v12) | 4) + 3) != v18)
    {
      if (v14 == ++v12) {
        return 0xFFFFFFFFLL;
      }
    }
  }
  else
  {
    uint64_t v19 = *((unsigned __int16 *)v6 + 6);
    if (v19)
    {
      uint64_t v20 = (uint64_t)&v5[v19 + 4 + *(unsigned int *)&v5[v19]];
      while (1)
      {
        uint64_t v21 = (unsigned __int16 *)(v20 + 8 * v12);
        if (*v21 == v16 && *((unsigned __int8 *)v21 + 2) == v17 && *((unsigned __int8 *)v21 + 3) == v18) {
          break;
        }
        if (v14 == ++v12) {
          return 0xFFFFFFFFLL;
        }
      }
    }
    else
    {
      while (*(unsigned __int16 *)((8 * v12) | 4) != v16
           || *((unsigned __int8 *)&def_332C + ((8 * v12) | 4) + 2) != v17
           || *((unsigned __int8 *)&def_332C + ((8 * v12) | 4) + 3) != v18)
      {
        if (v14 == ++v12) {
          return 0xFFFFFFFFLL;
        }
      }
    }
  }
  uint64_t v22 = v10[10];
  if (v22) {
    return v12 - *(int *)((char *)v9 + v22);
  }
  else {
    return v12 + 1;
  }
}

uint64_t sub_369AC8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 56);
    uint64_t v4 = *(void **)(a1 + 48);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 32;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 48);
    }
    *(void *)(a1 + 56) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

char *sub_369B60(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t result = sub_369E00(a1, a2, a3);
  if (result)
  {
    unint64_t v6 = HIDWORD(a2);
    unsigned int v7 = &result[-*(int *)result];
    unsigned int v8 = *(unsigned __int16 *)v7;
    if (v8 >= 0x2B)
    {
      uint64_t v9 = *((unsigned __int16 *)v7 + 21);
      if (*((_WORD *)v7 + 21))
      {
        unint64_t v10 = &result[v9 + *(unsigned int *)&result[v9]];
        unsigned int v11 = &v10[-*(int *)v10];
        if (*(unsigned __int16 *)v11 >= 5u)
        {
          uint64_t v12 = *((unsigned __int16 *)v11 + 2);
          if (v12)
          {
            if (*(_DWORD *)&v10[v12 + *(unsigned int *)&v10[v12]] > HIDWORD(a2)) {
              goto LABEL_11;
            }
          }
        }
      }
    }
    if (a3 == 1) {
      return 0;
    }
    if (!a3)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      unsigned int v14 = a2;
      uint64_t v15 = (uint64_t)exception;
      std::to_string(&v26, v14);
      int v16 = std::string::insert(&v26, 0, "Failed to acquire trip in quad node ");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v27.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      int v18 = std::string::append(&v27, " and position ");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v28.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v25, v6);
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v25;
      }
      else {
        uint64_t v20 = (std::string *)v25.__r_.__value_.__r.__words[0];
      }
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v25.__r_.__value_.__l.__size_;
      }
      uint64_t v22 = std::string::append(&v28, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      std::string::size_type v30 = v22->__r_.__value_.__r.__words[2];
      long long v29 = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      int v24 = (void *)sub_2F404(v15, &v29);
    }
    if (v8 >= 0x2B && (LODWORD(v9) = *((unsigned __int16 *)v7 + 21), *((_WORD *)v7 + 21))) {
LABEL_11:
    }
      result += v9 + (unint64_t)*(unsigned int *)&result[v9];
    else {
      return 0;
    }
  }
  return result;
}

void sub_369D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(__p);
    if (a33 < 0)
    {
LABEL_7:
      operator delete(a28);
      if (a26 < 0)
      {
LABEL_10:
        operator delete(a21);
        if ((a20 & 0x80000000) == 0) {
          goto LABEL_14;
        }
        goto LABEL_13;
      }
LABEL_12:
      if ((a20 & 0x80000000) == 0) {
LABEL_14:
      }
        _Unwind_Resume(a1);
LABEL_13:
      operator delete(a15);
      goto LABEL_14;
    }
  }
  else if (a33 < 0)
  {
    goto LABEL_7;
  }
  if (a26 < 0) {
    goto LABEL_10;
  }
  goto LABEL_12;
}

char *sub_369E00(uint64_t a1, unsigned int a2, int a3)
{
  int v23 = a3;
  unsigned int v24 = a2;
  v22[0] = &v23;
  v22[1] = (int *)&v24;
  unint64_t v4 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v4;
  uint64_t v5 = *(void *)a1;
  if (v5)
  {
    uint64_t v6 = a1 + 16;
    if (*(_DWORD *)(a1 + 592) == a2)
    {
      unsigned int v7 = 24;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 616) == a2)
    {
      unsigned int v7 = 25;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 640) == a2)
    {
      unsigned int v7 = 26;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 664) == a2)
    {
      unsigned int v7 = 27;
LABEL_10:
      ++*(void *)(a1 + 3864);
      uint64_t v8 = v6 + 24 * v7;
      *(void *)(v8 + 8) = v4;
      uint64_t v9 = *(unsigned int **)(v8 + 16);
      if (v9) {
        return (char *)v9 + *v9;
      }
      goto LABEL_30;
    }
    unint64_t v11 = *(void *)(a1 + 648);
    unint64_t v12 = *(void *)(a1 + 624);
    if (*(void *)(a1 + 600) >= v4)
    {
      int v13 = 0;
    }
    else
    {
      unint64_t v4 = *(void *)(a1 + 600);
      int v13 = 24;
    }
    BOOL v14 = v12 >= v4;
    if (v12 < v4) {
      unint64_t v4 = *(void *)(a1 + 624);
    }
    int v15 = 25;
    if (v14) {
      int v15 = v13;
    }
    if (v11 >= v4) {
      unint64_t v16 = v4;
    }
    else {
      unint64_t v16 = *(void *)(a1 + 648);
    }
    unint64_t v17 = *(void *)(a1 + 672);
    if (v11 >= v4) {
      int v18 = v15;
    }
    else {
      int v18 = 26;
    }
    long long v19 = (unsigned int *)sub_2AB884(v5, 6, a2, 1);
    unsigned int v20 = 27;
    if (v17 >= v16) {
      unsigned int v20 = v18;
    }
    uint64_t v21 = v6 + 24 * v20;
    *(_DWORD *)uint64_t v21 = v24;
    *(void *)(v21 + 8) = *(void *)(a1 + 3856);
    *(void *)(v21 + 16) = v19;
    if (v19) {
      return (char *)v19 + *v19;
    }
  }
LABEL_30:
  sub_2A54B4(v22);
  return 0;
}

uint64_t sub_369F8C(uint64_t a1, unint64_t a2, int a3, char *a4)
{
  unsigned int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  LODWORD(v63.__r_.__value_.__l.__data_) = a2;
  LODWORD(v62.__r_.__value_.__l.__data_) = a3;
  *(void *)&long long v64 = &v62;
  *((void *)&v64 + 1) = &v63;
  unint64_t v9 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v9;
  uint64_t v10 = *(void *)a1;
  if (!v10) {
    goto LABEL_36;
  }
  uint64_t v11 = a1 + 16;
  if (*(_DWORD *)(a1 + 592) == a2)
  {
    unsigned int v12 = 24;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 616) == a2)
  {
    unsigned int v12 = 25;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 640) == a2)
  {
    unsigned int v12 = 26;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 664) == a2)
  {
    unsigned int v12 = 27;
LABEL_10:
    ++*(void *)(a1 + 3864);
    uint64_t v13 = v11 + 24 * v12;
    *(void *)(v13 + 8) = v9;
    BOOL v14 = *(unsigned int **)(v13 + 16);
    if (v14) {
      goto LABEL_11;
    }
LABEL_36:
    sub_2A54B4((int **)&v64);
    uint64_t v21 = 0;
    goto LABEL_37;
  }
  unint64_t v23 = *(void *)(a1 + 648);
  unint64_t v24 = *(void *)(a1 + 624);
  if (*(void *)(a1 + 600) >= v9)
  {
    int v25 = 0;
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + 600);
    int v25 = 24;
  }
  BOOL v26 = v24 >= v9;
  if (v24 < v9) {
    unint64_t v9 = *(void *)(a1 + 624);
  }
  int v27 = 25;
  if (v26) {
    int v27 = v25;
  }
  if (v23 >= v9) {
    unint64_t v28 = v9;
  }
  else {
    unint64_t v28 = *(void *)(a1 + 648);
  }
  unint64_t v29 = *(void *)(a1 + 672);
  if (v23 >= v9) {
    int v30 = v27;
  }
  else {
    int v30 = 26;
  }
  BOOL v14 = (unsigned int *)sub_2AB884(v10, 6, a2, 1);
  unsigned int v31 = 27;
  if (v29 >= v28) {
    unsigned int v31 = v30;
  }
  uint64_t v32 = v11 + 24 * v31;
  *(_DWORD *)uint64_t v32 = v63.__r_.__value_.__l.__data_;
  *(void *)(v32 + 8) = *(void *)(a1 + 3856);
  *(void *)(v32 + 16) = v14;
  if (!v14) {
    goto LABEL_36;
  }
LABEL_11:
  int v15 = (int *)((char *)v14 + *v14);
  unint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 0x2Bu
    || (uint64_t v17 = v16[21]) == 0
    || (int v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17)),
        long long v19 = (unsigned __int16 *)((char *)v18 - *v18),
        *v19 < 5u)
    || (uint64_t v20 = v19[2]) == 0)
  {
    uint64_t v21 = 0;
    if (a3 != 1) {
      goto LABEL_38;
    }
    return 0;
  }
  uint64_t v21 = (int *)((char *)v18 + v20 + *(unsigned int *)((char *)v18 + v20));
  if (*v21 <= v8)
  {
LABEL_37:
    if (a3 != 1)
    {
LABEL_38:
      if (!a3)
      {
        unsigned int v33 = v6;
        exception = __cxa_allocate_exception(0x40uLL);
        sub_5E5C(&v57, a4);
        unint64_t v35 = std::string::insert(&v57, 0, "Failed to acquire entity \"");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        __darwin_ct_rune_t v37 = std::string::append(&v58, "\" in quad node ");
        long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v56, v33);
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          __darwin_ct_rune_t v39 = &v56;
        }
        else {
          __darwin_ct_rune_t v39 = (std::string *)v56.__r_.__value_.__r.__words[0];
        }
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v56.__r_.__value_.__l.__size_;
        }
        unint64_t v41 = std::string::append(&v59, (const std::string::value_type *)v39, size);
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        uint64_t v43 = std::string::append(&v60, " at position ");
        long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v55, v8);
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v45 = &v55;
        }
        else {
          int v45 = (std::string *)v55.__r_.__value_.__r.__words[0];
        }
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v46 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v46 = v55.__r_.__value_.__l.__size_;
        }
        char v47 = std::string::append(&v61, (const std::string::value_type *)v45, v46);
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v62.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        int32x2_t v49 = std::string::append(&v62, " on layer ");
        long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v63.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        __darwin_ct_rune_t v51 = sub_736EC(6u);
        __darwin_ct_rune_t v52 = std::string::append(&v63, v51);
        long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        std::string::size_type v65 = v52->__r_.__value_.__r.__words[2];
        long long v64 = v53;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        unint64_t v54 = (void *)sub_2F404((uint64_t)exception, &v64);
      }
      return (uint64_t)&v21[v8 + 1] + v21[v8 + 1];
    }
    return 0;
  }
  return (uint64_t)&v21[v8 + 1] + v21[v8 + 1];
}

void sub_36A340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 105) < 0) {
    operator delete(*(void **)(v54 - 128));
  }
  if (*(char *)(v54 - 137) < 0)
  {
    operator delete(*(void **)(v54 - 160));
    if (*(char *)(v54 - 169) < 0)
    {
LABEL_7:
      operator delete(*(void **)(v54 - 192));
      if (a15 < 0)
      {
LABEL_10:
        operator delete(__p);
        if (a54 < 0)
        {
LABEL_13:
          operator delete(a49);
          if (a47 < 0)
          {
LABEL_16:
            operator delete(a42);
            if (a21 < 0)
            {
LABEL_19:
              operator delete(a16);
              if (a40 < 0)
              {
LABEL_22:
                operator delete(a35);
                if (a33 < 0)
                {
LABEL_25:
                  operator delete(a28);
                  if ((a27 & 0x80000000) == 0) {
                    goto LABEL_29;
                  }
                  goto LABEL_28;
                }
LABEL_27:
                if ((a27 & 0x80000000) == 0) {
LABEL_29:
                }
                  _Unwind_Resume(a1);
LABEL_28:
                operator delete(a22);
                goto LABEL_29;
              }
LABEL_24:
              if (a33 < 0) {
                goto LABEL_25;
              }
              goto LABEL_27;
            }
LABEL_21:
            if (a40 < 0) {
              goto LABEL_22;
            }
            goto LABEL_24;
          }
LABEL_18:
          if (a21 < 0) {
            goto LABEL_19;
          }
          goto LABEL_21;
        }
LABEL_15:
        if (a47 < 0) {
          goto LABEL_16;
        }
        goto LABEL_18;
      }
LABEL_12:
      if (a54 < 0) {
        goto LABEL_13;
      }
      goto LABEL_15;
    }
  }
  else if (*(char *)(v54 - 169) < 0)
  {
    goto LABEL_7;
  }
  if (a15 < 0) {
    goto LABEL_10;
  }
  goto LABEL_12;
}

uint64_t sub_36A4FC(uint64_t result)
{
  uint64_t v1 = result;
  if (result != (int)result)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v8, v1);
    uint64_t v3 = std::string::insert(&v8, 0, "narrowing ");
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v9.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    uint64_t v5 = std::string::append(&v9, " failed");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    std::string::size_type v11 = v5->__r_.__value_.__r.__words[2];
    long long v10 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    unsigned int v7 = (void *)sub_2F404((uint64_t)exception, &v10);
  }
  return result;
}

void sub_36A5D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_36A650(unsigned int *a1, unsigned int a2)
{
  if (!a1 || *a1 <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v10, a2);
    uint64_t v5 = std::string::insert(&v10, 0, "Flatbuffer vector requested index ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    unsigned int v7 = std::string::append(&v11, " is out of range");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v7->__r_.__value_.__r.__words[2];
    long long v12 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::string v9 = (void *)sub_2F404((uint64_t)exception, &v12);
  }
  return (uint64_t)&a1[6 * a2 + 1];
}

void sub_36A734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void sub_36A7B4(char **a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  long long v4 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 2) >= a2)
  {
    if (a2)
    {
      std::string v11 = &v5[20 * a2];
      do
      {
        *(void *)uint64_t v5 = 0;
        *((void *)v5 + 1) = 0;
        *uint64_t v5 = -1;
        *(void *)(v5 + 4) = 0x7FFFFFFFFFFFFFFFLL;
        *(void *)(v5 + 12) = 0x7FFFFFFFLL;
        v5 += 20;
      }
      while (v5 != v11);
      uint64_t v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 2);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0xCCCCCCCCCCCCCCCLL) {
      sub_2E00();
    }
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 2);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x666666666666666) {
      unint64_t v9 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0xCCCCCCCCCCCCCCCLL) {
        sub_188D718();
      }
      std::string v10 = (char *)operator new(20 * v9);
    }
    else
    {
      std::string v10 = 0;
    }
    long long v12 = &v10[20 * v6];
    std::string::size_type v13 = &v12[20 * a2];
    BOOL v14 = v12;
    do
    {
      *(void *)BOOL v14 = 0;
      *((void *)v14 + 1) = 0;
      *BOOL v14 = -1;
      *(void *)(v14 + 4) = 0x7FFFFFFFFFFFFFFFLL;
      *(void *)(v14 + 12) = 0x7FFFFFFFLL;
      v14 += 20;
    }
    while (v14 != v13);
    int v15 = *a1;
    if (v5 != *a1)
    {
      do
      {
        long long v16 = *(_OWORD *)(v5 - 20);
        *(_DWORD *)(v12 - 5) = *(_DWORD *)(v5 - 5);
        *(_OWORD *)(v12 - 20) = v16;
        v12 -= 20;
        v5 -= 20;
      }
      while (v5 != v15);
      uint64_t v5 = *a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = &v10[20 * v9];
    if (v5)
    {
      operator delete(v5);
    }
  }
}

char *sub_36A97C(void **a1, uint64_t a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0x8E38E38E38E38E39 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v5 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0x38E38E38E38E38ELL) {
    sub_188D718();
  }
  uint64_t v7 = 72 * v5;
  unint64_t v8 = (char *)operator new(72 * v5);
  unint64_t v9 = &v8[72 * v3];
  *(_DWORD *)unint64_t v9 = *(_DWORD *)a2;
  std::string v10 = &v8[v7];
  *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 + 8);
  *((void *)v9 + 3) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  long long v11 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v9 + 3) = v11;
  *((void *)v9 + 8) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  long long v12 = v9 + 72;
  std::string::size_type v13 = (char *)*a1;
  BOOL v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
    if (!v14) {
      return v12;
    }
    goto LABEL_26;
  }
  uint64_t v15 = 0;
  do
  {
    long long v16 = &v9[v15];
    uint64_t v17 = &v14[v15];
    *((_DWORD *)v16 - 18) = *(_DWORD *)&v14[v15 - 72];
    long long v18 = *(_OWORD *)&v14[v15 - 64];
    *((void *)v16 - 6) = *(void *)&v14[v15 - 48];
    *((_OWORD *)v16 - 4) = v18;
    *((void *)v17 - 7) = 0;
    *((void *)v17 - 6) = 0;
    *((void *)v17 - 8) = 0;
    *(_OWORD *)(v16 - 40) = *(_OWORD *)&v14[v15 - 40];
    *(_OWORD *)(v16 - 24) = *(_OWORD *)&v14[v15 - 24];
    *((void *)v16 - 1) = *(void *)&v14[v15 - 8];
    *((void *)v17 - 3) = 0;
    *((void *)v17 - 2) = 0;
    *((void *)v17 - 1) = 0;
    v15 -= 72;
  }
  while (&v14[v15] != v13);
  long long v19 = (char *)*a1;
  BOOL v14 = (char *)a1[1];
  *a1 = &v9[v15];
  a1[1] = v12;
  a1[2] = v10;
  if (v14 != v19)
  {
    do
    {
      uint64_t v20 = *((void *)v14 - 3);
      if (v20)
      {
        uint64_t v21 = *((void *)v14 - 2);
        uint64_t v22 = (void *)*((void *)v14 - 3);
        if (v21 != v20)
        {
          do
          {
            if (*(char *)(v21 - 1) < 0) {
              operator delete(*(void **)(v21 - 24));
            }
            v21 -= 32;
          }
          while (v21 != v20);
          uint64_t v22 = (void *)*((void *)v14 - 3);
        }
        *((void *)v14 - 2) = v20;
        operator delete(v22);
      }
      if (*(v14 - 41) < 0) {
        operator delete(*((void **)v14 - 8));
      }
      v14 -= 72;
    }
    while (v14 != v19);
    BOOL v14 = v19;
  }
  if (v14) {
LABEL_26:
  }
    operator delete(v14);
  return v12;
}

double sub_36AB9C(int *a1, int *a2, uint64_t a3, char a4)
{
BOOL sub_36C258(unsigned int *a1, int *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(0x8E38E38E38E38E39 * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unint64_t v6 = a2 - 18;
      if (*(a2 - 18) < *a1) {
        goto LABEL_11;
      }
      return result;
    case 3uLL:
      uint64_t v13 = (int *)(a1 + 18);
      unsigned int v12 = a1[18];
      unint64_t v6 = a2 - 18;
      unsigned int v14 = *(a2 - 18);
      if (v12 >= *a1)
      {
        if (v14 >= v12) {
          return result;
        }
        sub_36C728((int *)a1 + 18, a2 - 18);
        if (a1[18] < *a1)
        {
LABEL_56:
          uint64_t v15 = (int *)a1;
          unsigned int v16 = v13;
LABEL_13:
          sub_36C728(v15, v16);
        }
      }
      else
      {
        if (v14 < v12)
        {
LABEL_11:
          uint64_t v15 = (int *)a1;
LABEL_12:
          unsigned int v16 = v6;
          goto LABEL_13;
        }
        sub_36C728((int *)a1, (int *)a1 + 18);
        if (*v6 < a1[18])
        {
          uint64_t v15 = (int *)(a1 + 18);
          goto LABEL_12;
        }
      }
      return 1;
    case 4uLL:
      sub_36C900((int *)a1, (int *)a1 + 18, (int *)a1 + 36, a2 - 18);
      return 1;
    case 5uLL:
      uint64_t v13 = (int *)(a1 + 18);
      unsigned int v17 = a1 + 36;
      sub_36C900((int *)a1, (int *)a1 + 18, (int *)a1 + 36, (int *)a1 + 54);
      unsigned int v19 = *(v2 - 18);
      long long v18 = v2 - 18;
      if (v19 < a1[54])
      {
        sub_36C728((int *)a1 + 54, v18);
        if (a1[54] < *v17)
        {
          sub_36C728((int *)a1 + 36, (int *)a1 + 54);
          if (*v17 < *v13)
          {
            sub_36C728((int *)a1 + 18, (int *)a1 + 36);
            if (a1[18] < *a1) {
              goto LABEL_56;
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v8 = (int *)(a1 + 36);
      unsigned int v7 = a1[36];
      unsigned int v9 = a1[18];
      if (v9 < *a1)
      {
        std::string v10 = (int *)a1;
        if (v7 >= v9)
        {
          sub_36C728((int *)a1, (int *)a1 + 18);
          if (a1[36] >= a1[18]) {
            goto LABEL_24;
          }
          std::string v10 = (int *)(a1 + 18);
        }
        unint64_t v11 = (int *)(a1 + 36);
        goto LABEL_23;
      }
      if (v7 < v9)
      {
        sub_36C728((int *)a1 + 18, (int *)a1 + 36);
        if (a1[18] < *a1)
        {
          std::string v10 = (int *)a1;
          unint64_t v11 = (int *)(a1 + 18);
LABEL_23:
          sub_36C728(v10, v11);
        }
      }
LABEL_24:
      unsigned int v20 = (int *)(a1 + 54);
      if (a1 + 54 == (unsigned int *)v2) {
        return 1;
      }
      int v21 = 0;
      long long v36 = v2;
      while (1)
      {
        unsigned int v23 = *v20;
        if (*v20 < *v8)
        {
          uint64_t v38 = *((void *)v20 + 1);
          *(void *)uint64_t v42 = *((void *)v20 + 2);
          *(void *)&v42[7] = *(void *)((char *)v20 + 23);
          char v37 = *((unsigned char *)v20 + 31);
          *((void *)v20 + 2) = 0;
          *((void *)v20 + 3) = 0;
          *((void *)v20 + 1) = 0;
          long long v41 = *((_OWORD *)v20 + 2);
          uint64_t v40 = (void *)*((void *)v20 + 6);
          long long v39 = *(_OWORD *)(v20 + 14);
          *((void *)v20 + 6) = 0;
          *((void *)v20 + 7) = 0;
          *((void *)v20 + 8) = 0;
          unsigned int v24 = v20;
          unsigned int v25 = *v8;
          do
          {
            unsigned int v26 = (unsigned int *)v8;
            *unsigned int v24 = v25;
            unsigned int v27 = (void **)(v24 + 2);
            if (*((char *)v24 + 31) < 0) {
              operator delete(*v27);
            }
            *(_OWORD *)unsigned int v27 = *(_OWORD *)(v8 + 2);
            *((void *)v24 + 3) = *((void *)v8 + 3);
            *((unsigned char *)v8 + 31) = 0;
            *((unsigned char *)v8 + 8) = 0;
            *((_OWORD *)v24 + 2) = *((_OWORD *)v8 + 2);
            uint64_t v28 = *((void *)v24 + 6);
            if (v28)
            {
              unint64_t v30 = v24 + 14;
              uint64_t v29 = *((void *)v24 + 7);
              unsigned int v31 = (void *)*((void *)v24 + 6);
              if (v29 != v28)
              {
                do
                {
                  if (*(char *)(v29 - 1) < 0) {
                    operator delete(*(void **)(v29 - 24));
                  }
                  v29 -= 32;
                }
                while (v29 != v28);
                unsigned int v31 = (void *)*((void *)v24 + 6);
              }
              *unint64_t v30 = v28;
              operator delete(v31);
              *unint64_t v30 = 0;
              *((void *)v24 + 8) = 0;
            }
            uint64_t v32 = (void **)(v26 + 12);
            *((_OWORD *)v24 + 3) = *((_OWORD *)v26 + 3);
            *((void *)v24 + 8) = *((void *)v26 + 8);
            *((void *)v26 + 6) = 0;
            *((void *)v26 + 7) = 0;
            *((void *)v26 + 8) = 0;
            if (v26 == a1)
            {
              unsigned int v33 = a1;
              *a1 = v23;
              if (*((char *)a1 + 31) < 0) {
                goto LABEL_45;
              }
              goto LABEL_47;
            }
            unint64_t v8 = (int *)(v26 - 18);
            unsigned int v25 = *(v26 - 18);
            unsigned int v24 = (int *)v26;
          }
          while (v23 < v25);
          unsigned int v33 = v26;
          *unsigned int v26 = v23;
          if (*((char *)v26 + 31) < 0)
          {
LABEL_45:
            operator delete(*((void **)v26 + 1));
            unsigned int v34 = (void **)*v32;
            goto LABEL_48;
          }
LABEL_47:
          unsigned int v34 = 0;
LABEL_48:
          *((void *)v26 + 1) = v38;
          *((void *)v26 + 2) = *(void *)v42;
          *(void *)((char *)v26 + 23) = *(void *)&v42[7];
          *((unsigned char *)v26 + 31) = v37;
          *((_OWORD *)v26 + 2) = v41;
          if (v34)
          {
            unint64_t v35 = (void **)*((void *)v33 + 7);
            uint64_t v22 = v34;
            if (v35 != v34)
            {
              do
              {
                if (*((char *)v35 - 1) < 0) {
                  operator delete(*(v35 - 3));
                }
                v35 -= 4;
              }
              while (v35 != v34);
              uint64_t v22 = *v32;
            }
            *((void *)v33 + 7) = v34;
            operator delete(v22);
            *((void *)v26 + 7) = 0;
            *((void *)v26 + 8) = 0;
          }
          int *v32 = v40;
          *(_OWORD *)(v33 + 14) = v39;
          ++v21;
          uint64_t v2 = v36;
          if (v21 == 8) {
            return v20 + 18 == v36;
          }
        }
        unint64_t v8 = v20;
        v20 += 18;
        if (v20 == v2) {
          return 1;
        }
      }
  }
}

__n128 sub_36C728(int *a1, int *a2)
{
  int v4 = *a1;
  uint64_t v5 = *((void *)a1 + 1);
  *(void *)unsigned int v20 = *((void *)a1 + 2);
  *(void *)&v20[7] = *(void *)((char *)a1 + 23);
  char v6 = *((unsigned char *)a1 + 31);
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 3) = 0;
  *((void *)a1 + 1) = 0;
  unsigned int v7 = a1 + 12;
  __n128 v18 = *((__n128 *)a1 + 3);
  long long v19 = *((_OWORD *)a1 + 2);
  uint64_t v8 = *((void *)a1 + 8);
  *((void *)a1 + 7) = 0;
  *((void *)a1 + 8) = 0;
  *((void *)a1 + 6) = 0;
  *a1 = *a2;
  long long v9 = *(_OWORD *)(a2 + 2);
  *((void *)a1 + 3) = *((void *)a2 + 3);
  *(_OWORD *)(a1 + 2) = v9;
  *((unsigned char *)a2 + 31) = 0;
  *((unsigned char *)a2 + 8) = 0;
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  uint64_t v10 = *((void *)a1 + 6);
  if (v10)
  {
    uint64_t v11 = *((void *)a1 + 7);
    unsigned int v12 = (void *)*((void *)a1 + 6);
    if (v11 != v10)
    {
      do
      {
        if (*(char *)(v11 - 1) < 0) {
          operator delete(*(void **)(v11 - 24));
        }
        v11 -= 32;
      }
      while (v11 != v10);
      unsigned int v12 = *(void **)v7;
    }
    *((void *)a1 + 7) = v10;
    operator delete(v12);
    *(void *)unsigned int v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = 0;
  }
  uint64_t v13 = 0;
  unsigned int v14 = (void **)(a2 + 12);
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  *((void *)a1 + 8) = *((void *)a2 + 8);
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *a2 = v4;
  if (*((char *)a2 + 31) < 0)
  {
    operator delete(*((void **)a2 + 1));
    uint64_t v13 = (void **)*v14;
  }
  *((void *)a2 + 1) = v5;
  *((void *)a2 + 2) = *(void *)v20;
  *(void *)((char *)a2 + 23) = *(void *)&v20[7];
  *((unsigned char *)a2 + 31) = v6;
  *((_OWORD *)a2 + 2) = v19;
  if (v13)
  {
    uint64_t v15 = (void **)*((void *)a2 + 7);
    unsigned int v16 = v13;
    if (v15 != v13)
    {
      do
      {
        if (*((char *)v15 - 1) < 0) {
          operator delete(*(v15 - 3));
        }
        v15 -= 4;
      }
      while (v15 != v13);
      unsigned int v16 = *v14;
    }
    *((void *)a2 + 7) = v13;
    operator delete(v16);
  }
  __n128 result = v18;
  *((__n128 *)a2 + 3) = v18;
  *((void *)a2 + 8) = v8;
  return result;
}

double sub_36C900(int *a1, int *a2, int *a3, int *a4)
{
  unsigned int v7 = a1;
  unsigned int v8 = *a2;
  unsigned int v9 = *a3;
  if (*a2 >= *a1)
  {
    if (v9 < v8)
    {
      *(void *)&double result = sub_36C728(a2, a3).n128_u64[0];
      if (*a2 < *v7)
      {
        a1 = v7;
        uint64_t v11 = a2;
        goto LABEL_9;
      }
    }
  }
  else
  {
    if (v9 < v8)
    {
LABEL_5:
      uint64_t v11 = a3;
LABEL_9:
      *(void *)&double result = sub_36C728(a1, v11).n128_u64[0];
      goto LABEL_10;
    }
    *(void *)&double result = sub_36C728(a1, a2).n128_u64[0];
    if (*a3 < *a2)
    {
      a1 = a2;
      goto LABEL_5;
    }
  }
LABEL_10:
  if (*a4 < *a3)
  {
    *(void *)&double result = sub_36C728(a3, a4).n128_u64[0];
    if (*a3 < *a2)
    {
      *(void *)&double result = sub_36C728(a2, a3).n128_u64[0];
      if (*a2 < *v7)
      {
        *(void *)&double result = sub_36C728(v7, a2).n128_u64[0];
      }
    }
  }
  return result;
}

BOOL sub_36CA18(void *a1, int a2)
{
  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (*((_DWORD *)a1 + 6) > (signed int)(std::chrono::system_clock::to_time_t(&__t) + 60) && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&__t);
    sub_188FC78(&__t, (uint64_t)"(Non-fatal) Trip update for muid ", 33);
    int v4 = (void *)std::ostream::operator<<();
    uint64_t v5 = sub_188FC78(v4, (uint64_t)" has creation timestamp of ", 27);
    char v6 = (void *)sub_266E4((uint64_t)v5);
    unsigned int v7 = sub_188FC78(v6, (uint64_t)" which is more than one minutes in the future (now: ", 52);
    v106.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v104[0]) = std::chrono::system_clock::to_time_t(&v106);
    unsigned int v8 = (void *)sub_266E4((uint64_t)v7);
    sub_188FC78(v8, (uint64_t)")", 1);
    std::stringbuf::str();
    sub_7246C(&v106.__d_.__rep_, 1u);
    if ((char)v108 < 0) {
      operator delete((void *)v106.__d_.__rep_);
    }
    if (v112 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (a2
    && (__t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_,
        *((_DWORD *)a1 + 7) < (signed int)(std::chrono::system_clock::to_time_t(&__t) - 60)))
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)&__t);
      sub_188FC78(&__t, (uint64_t)"Trip update for muid ", 21);
      unsigned int v9 = (void *)std::ostream::operator<<();
      uint64_t v10 = sub_188FC78(v9, (uint64_t)" has expiration timestamp of ", 29);
      uint64_t v11 = (void *)sub_266E4((uint64_t)v10);
      unsigned int v12 = sub_188FC78(v11, (uint64_t)" which is more than one minute in the past (now: ", 49);
      v106.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(v104[0]) = std::chrono::system_clock::to_time_t(&v106);
      uint64_t v13 = (void *)sub_266E4((uint64_t)v12);
      sub_188FC78(v13, (uint64_t)")", 1);
      std::stringbuf::str();
      sub_7246C(&v106.__d_.__rep_, 1u);
      if ((char)v108 < 0) {
        operator delete((void *)v106.__d_.__rep_);
      }
      if (v112 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    int v14 = 0;
    uint64_t v15 = a1 + 4;
    if (*((unsigned char *)a1 + 32))
    {
LABEL_20:
      uint64_t v16 = a1[5];
      __darwin_ct_rune_t v103 = a1;
      if (a1[6] != v16)
      {
LABEL_21:
        unint64_t v17 = 0;
        int v18 = 0;
        while (1)
        {
          unint64_t v19 = v17;
          uint64_t v101 = v16 + 20 * v17;
          if (v18 != *(_DWORD *)(v101 + 4))
          {
            if (sub_723EC(1u))
            {
              sub_6BAC((uint64_t)&__t);
              sub_188FC78(&__t, (uint64_t)"Trip update for muid ", 21);
              unsigned int v20 = (void *)std::ostream::operator<<();
              int v21 = sub_188FC78(v20, (uint64_t)" at index ", 10);
              std::ostream::operator<<();
              uint64_t v22 = sub_188FC78(v21, (uint64_t)" [", 2);
              sub_36E4CC((unsigned char *)v101, (char *)&v106);
              if ((v108 & 0x80u) == 0) {
                uint64_t rep = (uint64_t)&v106;
              }
              else {
                uint64_t rep = v106.__d_.__rep_;
              }
              if ((v108 & 0x80u) == 0) {
                uint64_t v24 = v108;
              }
              else {
                uint64_t v24 = v107;
              }
              unsigned int v25 = sub_188FC78(v22, rep, v24);
              unsigned int v26 = sub_188FC78(v25, (uint64_t)"] has a stop index of ", 22);
              std::ostream::operator<<();
              sub_188FC78(v26, (uint64_t)" but its position in the stop time updates array is ", 52);
              std::ostream::operator<<();
              if ((char)v108 < 0) {
                operator delete((void *)v106.__d_.__rep_);
              }
              std::stringbuf::str();
              sub_7246C(&v106.__d_.__rep_, 1u);
              if ((char)v108 < 0) {
                operator delete((void *)v106.__d_.__rep_);
              }
              __t.__d_.__rep_ = v100;
              *(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *)((char *)&__t.__d_.__rep_
                                                                               + *(void *)(v100 - 24)) = v99;
              if (v112 < 0) {
                operator delete(__p);
              }
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              std::ios::~ios();
            }
            int v14 = 0;
          }
          uint64_t v27 = v16 + 20 * v17;
          if (*(_DWORD *)(v27 + 12) < *(_DWORD *)(v27 + 8))
          {
            if (sub_723EC(1u))
            {
              sub_6BAC((uint64_t)&__t);
              sub_188FC78(&__t, (uint64_t)"Trip update for muid ", 21);
              uint64_t v28 = (void *)std::ostream::operator<<();
              uint64_t v29 = sub_188FC78(v28, (uint64_t)" at index ", 10);
              std::ostream::operator<<();
              unint64_t v30 = sub_188FC78(v29, (uint64_t)" [", 2);
              sub_36E4CC((unsigned char *)v101, (char *)&v106);
              if ((v108 & 0x80u) == 0) {
                uint64_t v31 = (uint64_t)&v106;
              }
              else {
                uint64_t v31 = v106.__d_.__rep_;
              }
              if ((v108 & 0x80u) == 0) {
                uint64_t v32 = v108;
              }
              else {
                uint64_t v32 = v107;
              }
              unsigned int v33 = sub_188FC78(v30, v31, v32);
              unsigned int v34 = sub_188FC78(v33, (uint64_t)"] has departure time at ", 24);
              std::ostream::operator<<();
              sub_188FC78(v34, (uint64_t)" before the arrival time at ", 28);
              std::ostream::operator<<();
              if ((char)v108 < 0) {
                operator delete((void *)v106.__d_.__rep_);
              }
              std::stringbuf::str();
              sub_7246C(&v106.__d_.__rep_, 1u);
              if ((char)v108 < 0) {
                operator delete((void *)v106.__d_.__rep_);
              }
              __t.__d_.__rep_ = v100;
              *(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *)((char *)&__t.__d_.__rep_
                                                                               + *(void *)(v100 - 24)) = v99;
              if (v112 < 0) {
                operator delete(__p);
              }
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              std::ios::~ios();
            }
            int v14 = 0;
          }
          if (v18) {
            break;
          }
          uint64_t v48 = v16 + 20 * v17;
          int v50 = *(unsigned __int8 *)(v48 + 17);
          int32x2_t v49 = (unsigned __int8 *)(v48 + 17);
          if (v50 == 1) {
            goto LABEL_95;
          }
          if (sub_723EC(1u))
          {
            sub_6BAC((uint64_t)&__t);
            sub_188FC78(&__t, (uint64_t)"Trip update for muid ", 21);
            unsigned int v51 = (void *)std::ostream::operator<<();
            __darwin_ct_rune_t v52 = sub_188FC78(v51, (uint64_t)" at the first index ", 20);
            std::ostream::operator<<();
            unsigned int v53 = sub_188FC78(v52, (uint64_t)" [", 2);
            sub_36E4CC((unsigned char *)v101, (char *)&v106);
            if ((v108 & 0x80u) == 0) {
              uint64_t v54 = (uint64_t)&v106;
            }
            else {
              uint64_t v54 = v106.__d_.__rep_;
            }
            if ((v108 & 0x80u) == 0) {
              uint64_t v55 = v108;
            }
            else {
              uint64_t v55 = v107;
            }
            std::string v56 = sub_188FC78(v53, v54, v55);
            unint64_t v57 = sub_188FC78(v56, (uint64_t)"] has dropoff type of ", 22);
            unint64_t v58 = *v49;
            std::string v59 = "";
            if (v58 <= 3) {
              std::string v59 = off_2438AF0[v58];
            }
            size_t v60 = strlen(v59);
            uint64_t v61 = sub_188FC78(v57, (uint64_t)v59, v60);
            sub_188FC78(v61, (uint64_t)" which is prohibited", 20);
            if ((char)v108 < 0) {
              operator delete((void *)v106.__d_.__rep_);
            }
            std::stringbuf::str();
            sub_7246C(&v106.__d_.__rep_, 1u);
            if ((char)v108 < 0) {
              operator delete((void *)v106.__d_.__rep_);
            }
            __t.__d_.__rep_ = v100;
            *(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *)((char *)&__t.__d_.__rep_
                                                                             + *(void *)(v100 - 24)) = v99;
            if (v112 < 0) {
              operator delete(__p);
            }
            goto LABEL_93;
          }
LABEL_94:
          int v14 = 0;
LABEL_95:
          unint64_t v17 = (v18 + 1);
          a1 = v103;
          uint64_t v62 = v103[5];
          unint64_t v63 = 0xCCCCCCCCCCCCCCCDLL * ((v103[6] - v62) >> 2);
          if (v63 == v17)
          {
            uint64_t v64 = v16 + 20 * v19;
            int v66 = *(unsigned __int8 *)(v64 + 16);
            uint64_t v65 = (unsigned __int8 *)(v64 + 16);
            if (v66 != 1)
            {
              if (sub_723EC(1u))
              {
                sub_6BAC((uint64_t)&__t);
                sub_188FC78(&__t, (uint64_t)"Trip update for muid ", 21);
                char v67 = (void *)std::ostream::operator<<();
                BOOL v68 = sub_188FC78(v67, (uint64_t)" at the last index ", 19);
                std::ostream::operator<<();
                uint64_t v69 = sub_188FC78(v68, (uint64_t)" [", 2);
                sub_36E4CC((unsigned char *)v101, (char *)&v106);
                if ((v108 & 0x80u) == 0) {
                  uint64_t v70 = (uint64_t)&v106;
                }
                else {
                  uint64_t v70 = v106.__d_.__rep_;
                }
                if ((v108 & 0x80u) == 0) {
                  uint64_t v71 = v108;
                }
                else {
                  uint64_t v71 = v107;
                }
                unsigned int v72 = sub_188FC78(v69, v70, v71);
                uint64_t v73 = sub_188FC78(v72, (uint64_t)"] has pickup type of ", 21);
                unint64_t v74 = *v65;
                unsigned int v75 = "";
                if (v74 <= 3) {
                  unsigned int v75 = off_2438AF0[v74];
                }
                size_t v76 = strlen(v75);
                long long v77 = sub_188FC78(v73, (uint64_t)v75, v76);
                sub_188FC78(v77, (uint64_t)" which is prohibited", 20);
                if ((char)v108 < 0) {
                  operator delete((void *)v106.__d_.__rep_);
                }
                std::stringbuf::str();
                sub_7246C(&v106.__d_.__rep_, 1u);
                if ((char)v108 < 0) {
                  operator delete((void *)v106.__d_.__rep_);
                }
                __t.__d_.__rep_ = v100;
                *(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *)((char *)&__t.__d_.__rep_
                                                                                 + *(void *)(v100 - 24)) = v99;
                if (v112 < 0) {
                  operator delete(__p);
                }
                std::streambuf::~streambuf();
                std::ostream::~ostream();
                std::ios::~ios();
              }
              int v14 = 0;
              uint64_t v62 = v103[5];
              unint64_t v63 = 0xCCCCCCCCCCCCCCCDLL * ((v103[6] - v62) >> 2);
            }
          }
          uint64_t v16 = v62;
          ++v18;
          if (v63 <= v17) {
            goto LABEL_131;
          }
        }
        uint64_t v35 = a1[5];
        if (*(_DWORD *)(v27 + 8) >= *(_DWORD *)(v35 + 20 * (v18 - 1) + 12)) {
          goto LABEL_95;
        }
        if (!sub_723EC(1u)) {
          goto LABEL_94;
        }
        sub_6BAC((uint64_t)&__t);
        sub_188FC78(&__t, (uint64_t)"Trip update for muid ", 21);
        long long v36 = (void *)std::ostream::operator<<();
        char v37 = sub_188FC78(v36, (uint64_t)" travels into the past; departure time at index ", 48);
        std::ostream::operator<<();
        uint64_t v38 = sub_188FC78(v37, (uint64_t)" [", 2);
        sub_36E4CC((unsigned char *)(v35 + 20 * (v18 - 1)), (char *)&v106);
        if ((v108 & 0x80u) == 0) {
          uint64_t v39 = (uint64_t)&v106;
        }
        else {
          uint64_t v39 = v106.__d_.__rep_;
        }
        if ((v108 & 0x80u) == 0) {
          uint64_t v40 = v108;
        }
        else {
          uint64_t v40 = v107;
        }
        long long v41 = sub_188FC78(v38, v39, v40);
        uint64_t v42 = sub_188FC78(v41, (uint64_t)"] is ", 5);
        std::ostream::operator<<();
        unint64_t v43 = sub_188FC78(v42, (uint64_t)"; arrival time at index ", 24);
        std::ostream::operator<<();
        uint64_t v44 = sub_188FC78(v43, (uint64_t)" [", 2);
        sub_36E4CC((unsigned char *)v101, (char *)v104);
        if ((v105 & 0x80u) == 0) {
          char v45 = v104;
        }
        else {
          char v45 = (void **)v104[0];
        }
        if ((v105 & 0x80u) == 0) {
          uint64_t v46 = v105;
        }
        else {
          uint64_t v46 = (uint64_t)v104[1];
        }
        char v47 = sub_188FC78(v44, (uint64_t)v45, v46);
        sub_188FC78(v47, (uint64_t)"] is ", 5);
        std::ostream::operator<<();
        if ((char)v105 < 0)
        {
          operator delete(v104[0]);
          if (((char)v108 & 0x80000000) == 0) {
            goto LABEL_72;
          }
        }
        else if (((char)v108 & 0x80000000) == 0)
        {
LABEL_72:
          std::stringbuf::str();
          sub_7246C(&v106.__d_.__rep_, 1u);
          if ((char)v108 < 0) {
            operator delete((void *)v106.__d_.__rep_);
          }
          __t.__d_.__rep_ = v100;
          *(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *)((char *)&__t.__d_.__rep_
                                                                           + *(void *)(v100 - 24)) = v99;
          if (v112 < 0) {
            operator delete(__p);
          }
LABEL_93:
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
          goto LABEL_94;
        }
        operator delete((void *)v106.__d_.__rep_);
        goto LABEL_72;
      }
      goto LABEL_131;
    }
  }
  else
  {
    int v14 = 1;
    uint64_t v15 = a1 + 4;
    if (*((unsigned char *)a1 + 32)) {
      goto LABEL_20;
    }
  }
  if (a1[5] != a1[6]) {
    goto LABEL_20;
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&__t);
    sub_188FC78(&__t, (uint64_t)"Trip update for muid ", 21);
    uint64_t v78 = (void *)std::ostream::operator<<();
    unint64_t v79 = sub_188FC78(v78, (uint64_t)" is of type ", 12);
    sub_36E5D4(v15, (char *)&v106);
    if ((v108 & 0x80u) == 0) {
      uint64_t v80 = (uint64_t)&v106;
    }
    else {
      uint64_t v80 = v106.__d_.__rep_;
    }
    if ((v108 & 0x80u) == 0) {
      uint64_t v81 = v108;
    }
    else {
      uint64_t v81 = v107;
    }
    uint64_t v82 = sub_188FC78(v79, v80, v81);
    sub_188FC78(v82, (uint64_t)" but has no associated stop time updates", 40);
    if ((char)v108 < 0) {
      operator delete((void *)v106.__d_.__rep_);
    }
    std::stringbuf::str();
    sub_7246C(&v106.__d_.__rep_, 1u);
    if ((char)v108 < 0) {
      operator delete((void *)v106.__d_.__rep_);
    }
    if (v112 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  int v14 = 0;
  uint64_t v16 = a1[5];
  __darwin_ct_rune_t v103 = a1;
  if (a1[6] != v16) {
    goto LABEL_21;
  }
LABEL_131:
  uint64_t v83 = a1[8];
  uint64_t v84 = a1[9];
  if (v83 == v84) {
    return v14 != 0;
  }
  do
  {
    if (*(_DWORD *)v83 == -1)
    {
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)&__t);
        sub_188FC78(&__t, (uint64_t)"Trip update for muid ", 21);
        unsigned int v87 = (void *)std::ostream::operator<<();
        sub_188FC78(v87, (uint64_t)" has a platform assignment update with an invalid stop index", 60);
        std::stringbuf::str();
        sub_7246C(&v106.__d_.__rep_, 1u);
        if ((char)v108 < 0) {
          operator delete((void *)v106.__d_.__rep_);
        }
        __t.__d_.__rep_ = v85;
        *(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *)((char *)&__t.__d_.__rep_
                                                                         + *(void *)(v85 - 24)) = v102;
        if (v112 < 0) {
          operator delete(__p);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      int v14 = 0;
      uint64_t v88 = *(unsigned __int8 *)(v83 + 31);
      if ((v88 & 0x80u) != 0) {
        uint64_t v88 = *(void *)(v83 + 16);
      }
      if (v88)
      {
LABEL_150:
        __t.__d_.__rep_ = sub_1133328();
        if (sub_1132FF4(v83 + 40, (uint64_t)&__t)) {
          goto LABEL_135;
        }
      }
    }
    else
    {
      uint64_t v86 = *(unsigned __int8 *)(v83 + 31);
      if ((v86 & 0x80u) != 0) {
        uint64_t v86 = *(void *)(v83 + 16);
      }
      if (v86) {
        goto LABEL_150;
      }
    }
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)&__t);
      sub_188FC78(&__t, (uint64_t)"Trip update for muid ", 21);
      unsigned int v89 = (void *)std::ostream::operator<<();
      unsigned int v90 = sub_188FC78(v89, (uint64_t)" has a platform assignment update for stop index ", 49);
      std::ostream::operator<<();
      sub_188FC78(v90, (uint64_t)" with an invalid secondary text entry", 37);
      std::stringbuf::str();
      sub_7246C(&v106.__d_.__rep_, 1u);
      if ((char)v108 < 0) {
        operator delete((void *)v106.__d_.__rep_);
      }
      __t.__d_.__rep_ = v85;
      *(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *)((char *)&__t.__d_.__rep_ + *(void *)(v85 - 24)) = v102;
      if (v112 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    int v14 = 0;
LABEL_135:
    v83 += 72;
  }
  while (v83 != v84);
  int v91 = (unsigned int *)v103[8];
  __darwin_ct_rune_t v92 = (unsigned int *)v103[9];
  if (v91 != v92)
  {
    for (uint64_t i = v91 + 18; i != v92; i += 18)
    {
      unsigned int v94 = *(i - 18);
      unsigned int v95 = *i;
      if (v94 == *i)
      {
        if (sub_723EC(1u))
        {
          sub_6BAC((uint64_t)&__t);
          sub_188FC78(&__t, (uint64_t)"Trip update for muid ", 21);
          __darwin_ct_rune_t v96 = (void *)std::ostream::operator<<();
          sub_188FC78(v96, (uint64_t)" has multiple platform assignment updates for the stop at index ", 64);
          std::ostream::operator<<();
          std::stringbuf::str();
          sub_7246C(&v106.__d_.__rep_, 1u);
          if ((char)v108 < 0) {
            operator delete((void *)v106.__d_.__rep_);
          }
          __t.__d_.__rep_ = v85;
          *(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *)((char *)&__t.__d_.__rep_
                                                                           + *(void *)(v85 - 24)) = v102;
          if (v112 < 0) {
            operator delete(__p);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        int v14 = 0;
        unsigned int v94 = *(i - 18);
        unsigned int v95 = *i;
      }
      if (v94 > v95)
      {
        if (sub_723EC(1u))
        {
          sub_6BAC((uint64_t)&__t);
          sub_188FC78(&__t, (uint64_t)"Trip update for muid ", 21);
          uint64_t v97 = (void *)std::ostream::operator<<();
          sub_188FC78(v97, (uint64_t)" has platform assignment updates that are not sorted by stop index", 66);
          std::stringbuf::str();
          sub_7246C(&v106.__d_.__rep_, 1u);
          if ((char)v108 < 0) {
            operator delete((void *)v106.__d_.__rep_);
          }
          __t.__d_.__rep_ = v85;
          *(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *)((char *)&__t.__d_.__rep_
                                                                           + *(void *)(v85 - 24)) = v102;
          if (v112 < 0) {
            operator delete(__p);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        int v14 = 0;
      }
    }
  }
  return v14 != 0;
}

void sub_36E144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a26 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a27);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a27);
  _Unwind_Resume(a1);
}

unsigned char *sub_36E4CC@<X0>(unsigned char *result@<X0>, char *a2@<X8>)
{
  switch(*result)
  {
    case 0:
      a2[23] = 5;
      strcpy(a2, "OTHER");
      break;
    case 1:
      a2[23] = 8;
      strcpy(a2, "PROVIDED");
      break;
    case 2:
      a2[23] = 11;
      strcpy(a2, "SYNTHESIZED");
      break;
    case 3:
      a2[23] = 6;
      strcpy(a2, "MERGED");
      break;
    default:
      if (*result == 255)
      {
        a2[23] = 6;
        strcpy(a2, "STATIC");
      }
      else
      {
        a2[23] = 0;
        *a2 = 0;
      }
      break;
  }
  return result;
}

unsigned char *sub_36E5D4@<X0>(unsigned char *result@<X0>, char *a2@<X8>)
{
  if (*result == 1)
  {
    a2[23] = 9;
    strcpy(a2, "DROP_TRIP");
  }
  else if (*result)
  {
    a2[23] = 0;
    *a2 = 0;
  }
  else
  {
    a2[23] = 10;
    strcpy(a2, "STOP_TIMES");
  }
  return result;
}

void sub_36E63C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v7 = *(unsigned int **)(a3 + 104);
  uint64_t v34 = -1;
  int v35 = 0x7FFFFFFF;
  unint64_t v8 = sub_2A2AD8(a1, v7, (uint64_t)&v34);
  if (v8 > 0xFFFFFFFEFFFFFFFFLL || v8 == 0)
  {
    *(void *)a4 = -1;
    *(_OWORD *)(a4 + 8) = xmmword_20E22B0;
    *(_DWORD *)(a4 + 24) = 0x7FFFFFFF;
LABEL_14:
    *(unsigned char *)(a4 + 28) = 0;
    *(_OWORD *)(a4 + 32) = xmmword_20E22C0;
    *(_WORD *)(a4 + 48) = -29536;
    *(void *)(a4 + 56) = 0xBFF0000000000000;
    *(unsigned char *)(a4 + 64) = 0;
    int v18 = -1;
LABEL_15:
    *(_DWORD *)(a4 + 68) = v18;
    return;
  }
  unint64_t v10 = v8;
  uint64_t v11 = *(uint64_t (****)())(a3 + 96);
  if (!v11) {
    uint64_t v11 = &off_253CA98;
  }
  int v12 = *((_DWORD *)v11 + 12);
  int v13 = *((_DWORD *)v11 + 13);
  int v14 = *((_DWORD *)v11 + 14);
  LOWORD(v34) = v12;
  BYTE2(v34) = v13;
  BYTE3(v34) = v14;
  int v15 = sub_3698D4(a2, v8, (unsigned __int16 *)&v34);
  if (v15 == -1)
  {
    *(void *)a4 = -1;
    *(_OWORD *)(a4 + 8) = xmmword_20E22B0;
    *(_DWORD *)(a4 + 24) = 0x7FFFFFFF;
    goto LABEL_14;
  }
  *(void *)(a4 + 20) = 0x8000000080000000;
  *(unsigned char *)(a4 + 28) = 0;
  *(_OWORD *)(a4 + 32) = xmmword_20E22C0;
  *(_WORD *)(a4 + 48) = -29536;
  *(void *)(a4 + 56) = 0xBFF0000000000000;
  *(unsigned char *)(a4 + 64) = 0;
  *(_DWORD *)(a4 + 68) = -1;
  *(_DWORD *)(a4 + 16) = v15;
  *(void *)a4 = v7;
  *(void *)(a4 + 8) = v10;
  uint64_t v16 = *(void *)(a3 + 120);
  if (v16 <= 0x1F3FFFFFC17)
  {
    if (v16 >= (uint64_t)0xFFFFFE0BFFFFFC19)
    {
      *(_DWORD *)(a4 + 20) = sub_36A4FC(v16 / 1000);
      uint64_t v17 = *(void *)(a3 + 128);
      if (v17 > 0x1F3FFFFFC17) {
        goto LABEL_23;
      }
    }
    else
    {
      *(_DWORD *)(a4 + 20) = 0x80000000;
      uint64_t v17 = *(void *)(a3 + 128);
      if (v17 > 0x1F3FFFFFC17) {
        goto LABEL_23;
      }
    }
  }
  else
  {
    *(_DWORD *)(a4 + 20) = 2147483646;
    uint64_t v17 = *(void *)(a3 + 128);
    if (v17 > 0x1F3FFFFFC17)
    {
LABEL_23:
      *(_DWORD *)(a4 + 24) = 2147483646;
      *(unsigned char *)(a4 + 28) = *(unsigned char *)(a3 + 152);
      int v19 = *(_DWORD *)(a3 + 16);
      if ((v19 & 1) == 0) {
        goto LABEL_37;
      }
      goto LABEL_26;
    }
  }
  if (v17 >= (uint64_t)0xFFFFFE0BFFFFFC19)
  {
    *(_DWORD *)(a4 + 24) = sub_36A4FC(v17 / 1000);
    *(unsigned char *)(a4 + 28) = *(unsigned char *)(a3 + 152);
    int v19 = *(_DWORD *)(a3 + 16);
    if ((v19 & 1) == 0) {
      goto LABEL_37;
    }
  }
  else
  {
    *(_DWORD *)(a4 + 24) = 0x80000000;
    *(unsigned char *)(a4 + 28) = *(unsigned char *)(a3 + 152);
    int v19 = *(_DWORD *)(a3 + 16);
    if ((v19 & 1) == 0) {
      goto LABEL_37;
    }
  }
LABEL_26:
  uint64_t v20 = *(void *)(a3 + 48);
  double v21 = *(double *)(v20 + 56);
  uint64_t v22 = -1;
  if (v21 <= 180.0)
  {
    double v23 = *(double *)(v20 + 48);
    if (v23 >= -85.0511288 && v23 <= 85.0511288 && v21 >= -180.0)
    {
      double v24 = fmax(v23, -85.0511288);
      double v25 = v24 * 3.14159265 / 180.0;
      BOOL v26 = v24 < 85.0511288;
      double v27 = 1.48442223;
      if (v26) {
        double v27 = v25;
      }
      long double v28 = sin(v27);
      LODWORD(v29) = ((log((v28 + 1.0) / (1.0 - v28)) / -12.5663706 + 0.5) * 4294967300.0);
      if (v29 >= 0xFFFFFFFE) {
        uint64_t v29 = 4294967294;
      }
      else {
        uint64_t v29 = v29;
      }
      uint64_t v22 = ((v21 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v29 << 32);
    }
  }
  *(void *)(a4 + 32) = v22;
  *(_DWORD *)(a4 + 40) = 0x7FFFFFFF;
LABEL_37:
  if ((v19 & 0x100) != 0)
  {
    uint64_t v30 = 1000 * *(void *)(a3 + 112);
    if (v30 <= 0x1F3FFFFFC17)
    {
      if (v30 >= (uint64_t)0xFFFFFE0BFFFFFC19)
      {
        unsigned int v31 = sub_36A4FC(v30 / 1000);
        int v19 = *(_DWORD *)(a3 + 16);
      }
      else
      {
        unsigned int v31 = 0x80000000;
      }
    }
    else
    {
      unsigned int v31 = 2147483646;
    }
    *(_DWORD *)(a4 + 44) = v31;
    if ((v19 & 0x800) == 0)
    {
LABEL_39:
      if ((v19 & 0x1000) == 0) {
        goto LABEL_40;
      }
      goto LABEL_52;
    }
  }
  else if ((v19 & 0x800) == 0)
  {
    goto LABEL_39;
  }
  unsigned int v32 = (int)llround(*(float *)(a3 + 136) * 100.0) % 36000;
  if (v32 > 0xFFFF735F) {
    LOWORD(v32) = v32 - 29536;
  }
  *(_WORD *)(a4 + 48) = v32;
  if ((v19 & 0x1000) == 0)
  {
LABEL_40:
    if ((v19 & 0x8000) == 0) {
      goto LABEL_41;
    }
LABEL_53:
    unsigned int v33 = *(_DWORD *)(a3 + 156);
    if (v33 >= 5) {
      LOBYTE(v33) = 0;
    }
    *(unsigned char *)(a4 + 64) = v33;
    if ((v19 & 0x10000) != 0) {
      goto LABEL_56;
    }
    return;
  }
LABEL_52:
  *(double *)(a4 + 56) = *(float *)(a3 + 140) * 3.6;
  if ((v19 & 0x8000) != 0) {
    goto LABEL_53;
  }
LABEL_41:
  if ((v19 & 0x10000) != 0)
  {
LABEL_56:
    int v18 = *(_DWORD *)(a3 + 160);
    goto LABEL_15;
  }
}

BOOL sub_36EA84(uint64_t a1, int a2)
{
  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (*(_DWORD *)(a1 + 20) > (signed int)(std::chrono::system_clock::to_time_t(&__t) + 60) && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&__t);
    sub_188FC78(&__t, (uint64_t)"(Non-fatal) Vehicle position for muid ", 38);
    int v4 = (void *)std::ostream::operator<<();
    uint64_t v5 = sub_188FC78(v4, (uint64_t)" has creation timestamp of ", 27);
    char v6 = (void *)sub_266E4((uint64_t)v5);
    unsigned int v7 = sub_188FC78(v6, (uint64_t)" which is more than one minutes in the future (now: ", 52);
    v16.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    int v18 = std::chrono::system_clock::to_time_t(&v16);
    unint64_t v8 = (void *)sub_266E4((uint64_t)v7);
    sub_188FC78(v8, (uint64_t)")", 1);
    std::stringbuf::str();
    sub_7246C(&v16.__d_.__rep_, 1u);
    if (v17 < 0) {
      operator delete((void *)v16.__d_.__rep_);
    }
    if (v22 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (!a2) {
    return 1;
  }
  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  int v9 = std::chrono::system_clock::to_time_t(&__t) - 60;
  BOOL result = 1;
  if (*(_DWORD *)(a1 + 24) < v9)
  {
    BOOL result = sub_723EC(1u);
    if (result)
    {
      sub_6BAC((uint64_t)&__t);
      sub_188FC78(&__t, (uint64_t)"Vehicle position for muid ", 26);
      uint64_t v11 = (void *)std::ostream::operator<<();
      int v12 = sub_188FC78(v11, (uint64_t)" has expiration timestamp of ", 29);
      int v13 = (void *)sub_266E4((uint64_t)v12);
      int v14 = sub_188FC78(v13, (uint64_t)" which is more than one minute in the past (now: ", 49);
      v16.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      int v18 = std::chrono::system_clock::to_time_t(&v16);
      int v15 = (void *)sub_266E4((uint64_t)v14);
      sub_188FC78(v15, (uint64_t)")", 1);
      std::stringbuf::str();
      sub_7246C(&v16.__d_.__rep_, 1u);
      if (v17 < 0) {
        operator delete((void *)v16.__d_.__rep_);
      }
      if (v22 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      return 0;
    }
  }
  return result;
}

void sub_36EE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a17);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_36EEF4(uint64_t a1)
{
  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  *(_DWORD *)a1 = std::chrono::system_clock::to_time_t(&__t);
  *(void *)(a1 + 4) = 0x8000000080000000;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  return a1;
}

uint64_t sub_36EF58(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 8);
  int v5 = *(_DWORD *)(a2 + 20);
  if (v4 == 0x7FFFFFFF || v4 < v5) {
    *(_DWORD *)(a1 + 8) = v5;
  }
  int v7 = *(_DWORD *)(a2 + 16);
  uint64_t v16 = *(void *)(a2 + 8);
  int v17 = v7;
  unint64_t v8 = sub_36F1C4(a1 + 16, &v16, (uint64_t)&v16, a2);
  if (v9)
  {
    uint64_t v10 = a1 + 56;
    int v18 = &v16;
LABEL_11:
    int v14 = sub_36F5A4(v10, &v16, (uint64_t)&unk_20F06E0, &v18);
    *((_DWORD *)v14 + 6) = v17;
    return 1;
  }
  if (*((_DWORD *)v8 + 13) < *(_DWORD *)(a2 + 20))
  {
    *((_OWORD *)v8 + 2) = *(_OWORD *)a2;
    long long v11 = *(_OWORD *)(a2 + 16);
    long long v12 = *(_OWORD *)(a2 + 32);
    long long v13 = *(_OWORD *)(a2 + 48);
    v8[12] = *(void *)(a2 + 64);
    *((_OWORD *)v8 + 4) = v12;
    *((_OWORD *)v8 + 5) = v13;
    *((_OWORD *)v8 + 3) = v11;
    uint64_t v10 = a1 + 56;
    int v18 = &v16;
    goto LABEL_11;
  }
  return 0;
}

uint64_t *sub_36F05C(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t v9 = a2;
  int v10 = a3;
  int v5 = (void *)(a1 + 16);
  BOOL result = sub_367EF8((void *)(a1 + 16), &v9);
  if (result)
  {
    if ((a4 & 1) == 0)
    {
      int v7 = sub_367EF8(v5, &v9);
      if (!v7) {
        goto LABEL_9;
      }
      if (*((unsigned char *)v7 + 60)) {
        return 0;
      }
    }
    unint64_t v8 = sub_367EF8(v5, &v9);
    if (v8) {
      return v8 + 4;
    }
LABEL_9:
    sub_5AE8("unordered_map::at: key not found");
  }
  return result;
}

uint64_t *sub_36F0F0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v13 = a2;
  int v5 = (void *)(a1 + 56);
  BOOL result = sub_36F918((void *)(a1 + 56), &v13);
  if (result)
  {
    uint64_t v7 = v13;
    unint64_t v8 = sub_36F918(v5, &v13);
    if (!v8) {
      goto LABEL_11;
    }
    int v9 = *((_DWORD *)v8 + 6);
    uint64_t v14 = v7;
    int v15 = v9;
    int v10 = (void *)(a1 + 16);
    BOOL result = sub_367EF8(v10, &v14);
    if (!result) {
      return result;
    }
    if ((a3 & 1) == 0)
    {
      long long v11 = sub_367EF8(v10, &v14);
      if (!v11) {
        goto LABEL_11;
      }
      if (*((unsigned char *)v11 + 60)) {
        return 0;
      }
    }
    long long v12 = sub_367EF8(v10, &v14);
    if (v12) {
      return v12 + 4;
    }
LABEL_11:
    sub_5AE8("unordered_map::at: key not found");
  }
  return result;
}

void *sub_36F1C4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *a2;
  unint64_t v9 = __ROR8__(*a2, 32);
  unint64_t v10 = 0xC4CEB9FE1A85EC53
      * ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) >> 33));
  unint64_t v11 = ((v10 ^ (v10 >> 33)) + 0x388152A534) ^ 0xDEADBEEF;
  uint64_t v12 = *((unsigned int *)a2 + 2);
  unint64_t v13 = (v12 + (v11 << 6) + (v11 >> 2) + 2654435769u) ^ v11;
  unint64_t v14 = *(void *)(a1 + 8);
  if (v14)
  {
    uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      uint64_t v4 = (v12 + (v11 << 6) + (v11 >> 2) + 2654435769u) ^ v11;
      if (v13 >= v14) {
        uint64_t v4 = v13 % v14;
      }
    }
    else
    {
      uint64_t v4 = v13 & (v14 - 1);
    }
    uint64_t v16 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v16)
    {
      int v17 = *v16;
      if (*v16)
      {
        if (v15.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v19 = v17[1];
            if (v19 == v13)
            {
              if (*((_DWORD *)v17 + 4) == v8 && *(void *)((char *)v17 + 20) == __PAIR64__(v12, HIDWORD(v8))) {
                return v17;
              }
            }
            else if ((v19 & (v14 - 1)) != v4)
            {
              goto LABEL_25;
            }
            int v17 = (void *)*v17;
            if (!v17) {
              goto LABEL_25;
            }
          }
        }
        do
        {
          unint64_t v18 = v17[1];
          if (v18 == v13)
          {
            if (*((_DWORD *)v17 + 4) == v8 && *(void *)((char *)v17 + 20) == __PAIR64__(v12, HIDWORD(v8))) {
              return v17;
            }
          }
          else
          {
            if (v18 >= v14) {
              v18 %= v14;
            }
            if (v18 != v4) {
              break;
            }
          }
          int v17 = (void *)*v17;
        }
        while (v17);
      }
    }
  }
LABEL_25:
  int v17 = operator new(0x68uLL);
  void *v17 = 0;
  v17[1] = v13;
  v17[2] = *(void *)a3;
  *((_DWORD *)v17 + 6) = *(_DWORD *)(a3 + 8);
  long long v20 = *(_OWORD *)(a4 + 48);
  *((_OWORD *)v17 + 4) = *(_OWORD *)(a4 + 32);
  *((_OWORD *)v17 + 5) = v20;
  v17[12] = *(void *)(a4 + 64);
  long long v21 = *(_OWORD *)(a4 + 16);
  *((_OWORD *)v17 + 2) = *(_OWORD *)a4;
  *((_OWORD *)v17 + 3) = v21;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (v14 && (float)(v23 * (float)v14) >= v22)
  {
    uint64_t v24 = *(void *)a1;
    double v25 = *(void **)(*(void *)a1 + 8 * v4);
    if (v25)
    {
LABEL_28:
      void *v17 = *v25;
LABEL_63:
      *double v25 = v17;
      goto LABEL_64;
    }
  }
  else
  {
    BOOL v26 = 1;
    if (v14 >= 3) {
      BOOL v26 = (v14 & (v14 - 1)) != 0;
    }
    unint64_t v27 = v26 | (2 * v14);
    unint64_t v28 = vcvtps_u32_f32(v22 / v23);
    if (v27 <= v28) {
      size_t prime = v28;
    }
    else {
      size_t prime = v27;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v14 = *(void *)(a1 + 8);
    }
    if (prime > v14) {
      goto LABEL_39;
    }
    if (prime < v14)
    {
      unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v14 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (prime <= v30) {
        size_t prime = v30;
      }
      if (prime < v14) {
LABEL_39:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v14 = *(void *)(a1 + 8);
    unint64_t v33 = v14 - 1;
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
      {
        uint64_t v4 = v13 % v14;
        uint64_t v24 = *(void *)a1;
        double v25 = *(void **)(*(void *)a1 + 8 * (v13 % v14));
        if (v25) {
          goto LABEL_28;
        }
      }
      else
      {
        uint64_t v4 = v13;
        uint64_t v24 = *(void *)a1;
        double v25 = *(void **)(*(void *)a1 + 8 * v13);
        if (v25) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      uint64_t v4 = v33 & v13;
      uint64_t v24 = *(void *)a1;
      double v25 = *(void **)(*(void *)a1 + 8 * (v33 & v13));
      if (v25) {
        goto LABEL_28;
      }
    }
  }
  void *v17 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v17;
  *(void *)(v24 + 8 * v4) = a1 + 16;
  if (*v17)
  {
    unint64_t v34 = *(void *)(*v17 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v34 >= v14) {
        v34 %= v14;
      }
    }
    else
    {
      v34 &= v14 - 1;
    }
    double v25 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_63;
  }
LABEL_64:
  ++*(void *)(a1 + 24);
  return v17;
}

void sub_36F590(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_36F5A4(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = __ROR8__(*a2, 32);
  unint64_t v9 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) >> 33));
  unint64_t v10 = v9 ^ (v9 >> 33);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9 ^ (v9 >> 33);
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    unint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      unint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v14[1];
            if (v17 == v10)
            {
              if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == HIDWORD(v7)) {
                return v14;
              }
            }
            else if ((v17 & (v11 - 1)) != v4)
            {
              goto LABEL_31;
            }
            unint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == HIDWORD(v7)) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          unint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_31:
  long long v20 = operator new(0x20uLL);
  void *v20 = 0;
  v20[1] = v10;
  v20[2] = **a4;
  *((_DWORD *)v20 + 6) = -1;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (v11 && (float)(v22 * (float)v11) >= v21)
  {
    uint64_t v23 = *(void *)a1;
    uint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
    if (v24)
    {
LABEL_34:
      void *v20 = *v24;
LABEL_69:
      *uint64_t v24 = v20;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v25 = 1;
    if (v11 >= 3) {
      BOOL v25 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v11);
    unint64_t v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_45;
    }
    if (prime < v11)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < v11) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v32 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v23 = *(void *)a1;
        uint64_t v24 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v24) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v23 = *(void *)a1;
        uint64_t v24 = *(void **)(*(void *)a1 + 8 * v10);
        if (v24) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v32 & v10;
      uint64_t v23 = *(void *)a1;
      uint64_t v24 = *(void **)(*(void *)a1 + 8 * (v32 & v10));
      if (v24) {
        goto LABEL_34;
      }
    }
  }
  void *v20 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v20;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*v20)
  {
    unint64_t v33 = *(void *)(*v20 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v33 >= v11) {
        v33 %= v11;
      }
    }
    else
    {
      v33 &= v11 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v20;
}

void sub_36F904(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_36F918(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  unint64_t v4 = __ROR8__(*a2, 32);
  unint64_t v5 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v4 ^ (v4 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v4 ^ (v4 >> 33))) >> 33));
  unint64_t v6 = v5 ^ (v5 >> 33);
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v2);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v6;
    if (v6 >= *(void *)&v2) {
      unint64_t v8 = v6 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v8 = v6 & (*(void *)&v2 - 1);
  }
  unint64_t v9 = *(uint64_t ***)(*a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  BOOL result = *v9;
  if (*v9)
  {
    if (v7.u32[0] < 2uLL)
    {
      uint64_t v11 = *(void *)&v2 - 1;
      while (1)
      {
        uint64_t v15 = result[1];
        if (v6 == v15)
        {
          if (*((_DWORD *)result + 4) == v3 && *((_DWORD *)result + 5) == HIDWORD(v3)) {
            return result;
          }
        }
        else if ((v15 & v11) != v8)
        {
          return 0;
        }
        BOOL result = (uint64_t *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v13 = result[1];
      if (v6 == v13)
      {
        if (*((_DWORD *)result + 4) == v3 && *((_DWORD *)result + 5) == HIDWORD(v3)) {
          return result;
        }
      }
      else
      {
        if (v13 >= *(void *)&v2) {
          v13 %= *(void *)&v2;
        }
        if (v13 != v8) {
          return 0;
        }
      }
      BOOL result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

void sub_36FA38()
{
  uint64_t v0 = __chkstk_darwin();
  int v2 = v1;
  uint64_t v4 = v3;
  unint64_t v5 = (uint64_t *)v0;
  uint8x8_t v7 = v6;
  sub_725D0((uint64_t)v37);
  sub_2A239C((uint64_t)v35, v5);
  sub_3688C8((uint64_t)v32, v5);
  unint64_t v8 = operator new(0x78uLL);
  v8[1] = 0;
  v8[2] = 0;
  *unint64_t v8 = off_2438B28;
  sub_36EEF4((uint64_t)(v8 + 3));
  *uint8x8_t v7 = v8 + 3;
  v7[1] = v8;
  uint64_t v9 = *(void *)(v4 + 40);
  if (v9) {
    unint64_t v10 = (uint64_t *)(v9 + 8);
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t v11 = *(int *)(v4 + 32);
  if (v11)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 8 * v11;
    do
    {
      sub_36E63C((uint64_t)v35, (uint64_t)v32, *v10, (uint64_t)&v27);
      if (v28) {
        BOOL v15 = HIDWORD(v28) == -1;
      }
      else {
        BOOL v15 = 1;
      }
      if (v15 || v29 == -1)
      {
        ++v13;
      }
      else if (sub_36EA84((uint64_t)&v27, v2))
      {
        sub_36EF58((uint64_t)(v8 + 3), (uint64_t)&v27);
      }
      else
      {
        ++v12;
      }
      ++v10;
      v14 -= 8;
    }
    while (v14);
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v27);
    sub_188FC78(&v27, (uint64_t)"Adapted Protobuffer vehicle position snapshot in ", 49);
    sub_72688((uint64_t)v37);
    uint64_t v17 = (void *)std::ostream::operator<<();
    sub_188FC78(v17, (uint64_t)" ms (", 5);
    unint64_t v18 = (void *)std::ostream::operator<<();
    sub_188FC78(v18, (uint64_t)" vehicle posistions; ", 21);
    uint64_t v19 = (void *)std::ostream::operator<<();
    sub_188FC78(v19, (uint64_t)" failed to resolve; ", 20);
    long long v20 = (void *)std::ostream::operator<<();
    float v21 = sub_188FC78(v20, (uint64_t)" inconsistent", 13);
    sub_188FC78(v21, (uint64_t)")", 1);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v26 < 0) {
      operator delete(__p);
    }
    if (v31 < 0) {
      operator delete(v30);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  float v22 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  uint64_t v23 = v33;
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  uint64_t v24 = v36;
  if (v36)
  {
    if (!atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_36FE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a16);
  sub_14A84(v49);
  sub_368744((uint64_t)&a49);
  sub_14A84(v50 - 128);
  _Unwind_Resume(a1);
}

void sub_36FECC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_2438B28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_36FEEC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_2438B28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_36FF40(void *a1)
{
  int v2 = (void *)a1[12];
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)a1[10];
  a1[10] = 0;
  if (v4) {
    operator delete(v4);
  }
  unint64_t v5 = (void *)a1[7];
  if (v5)
  {
    do
    {
      unint64_t v6 = (void *)*v5;
      operator delete(v5);
      unint64_t v5 = v6;
    }
    while (v6);
  }
  uint8x8_t v7 = (void *)a1[5];
  a1[5] = 0;
  if (v7)
  {
    operator delete(v7);
  }
}

uint64_t sub_36FFCC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5, char a6, char a7, void *a8)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v14 = (uint64_t *)(a1 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  if (*a3)
  {
    uint64_t v15 = a3[1];
    *(void *)(a1 + 16) = *a3;
    *(void *)(a1 + 24) = v15;
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    uint64_t v16 = operator new(0xE8uLL);
    v16[1] = 0;
    v16[2] = 0;
    *uint64_t v16 = off_2438B78;
    sub_37DE18((uint64_t)&v26, (uint64_t)(v16 + 3));
    *(void *)(a1 + 16) = v16 + 3;
    *(void *)(a1 + 24) = v16;
  }
  uint64_t v17 = sub_69510();
  if (sub_68ECC((uint64_t)v17) && *(void *)sub_6915C((uint64_t)v17))
  {
    unint64_t v18 = (void *)sub_6915C((uint64_t)v17);
    uint64_t v19 = v18[1];
    *(void *)(a1 + 32) = *v18;
    *(void *)(a1 + 40) = v19;
    if (v19) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    sub_391260(*(void **)a1, (void *)(a1 + 32));
  }
  *(unsigned char *)(a1 + 74) = 0;
  *(void *)(a1 + 64) = 0x3E4CCCCD3F000000;
  *(_OWORD *)(a1 + 76) = xmmword_20B93F0;
  *(unsigned char *)(a1 + 92) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 32;
  *(void *)(a1 + 120) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 128) = -1;
  *(unsigned char *)(a1 + 132) = 0;
  *(_DWORD *)(a1 + 136) = 0x7FFFFFFF;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 48) = xmmword_20B98A0;
  *(_WORD *)(a1 + 72) = 0;
  if (sub_49CA04(a8))
  {
    uint64_t v20 = a8[1];
    *(void *)(a1 + 152) = *a8;
    *(void *)(a1 + 160) = v20;
    if (v20) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v21 = a8[3];
    *(void *)(a1 + 168) = a8[2];
    *(void *)(a1 + 176) = v21;
    if (v21) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v22 = a8[5];
    *(void *)(a1 + 184) = a8[4];
    *(void *)(a1 + 192) = v22;
    if (v22) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v23 = a8[7];
    *(void *)(a1 + 200) = a8[6];
    *(void *)(a1 + 208) = v23;
    if (v23) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = a8[9];
    *(void *)(a1 + 216) = a8[8];
    *(void *)(a1 + 224) = v24;
    if (v24) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    sub_391290(*(void *)a1, (_DWORD **)(a1 + 152));
  }
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  sub_4A1BBC((uint64_t *)a1, v14, a1 + 560);
  sub_29DDA8((char **)(a1 + 760), *(long long ***)(a1 + 16));
  *(void *)(a1 + 848) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(void *)(a1 + 856) = a4;
  *(_DWORD *)(a1 + 864) = a5;
  *(unsigned char *)(a1 + 868) = a6;
  *(unsigned char *)(a1 + 869) = a7;
  sub_370590(a1);
  return a1;
}

void sub_370278(uint64_t a1)
{
  *(void *)(v3 - 128) = a1;
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  sub_14A84(v1);
  _Unwind_Resume(*(_Unwind_Exception **)(v3 - 128));
}

void sub_370298(uint64_t a1)
{
  *(void *)(v2 - 128) = a1;
  sub_14A84(v1);
  _Unwind_Resume(*(_Unwind_Exception **)(v2 - 128));
}

void sub_3702AC(uint64_t a1)
{
  *(void *)(v7 - 128) = a1;
  sub_14A84(v1 + 840);
  sub_14A84(v1 + 824);
  sub_370BF0((uint64_t *)(v1 + 816));
  sub_14A84(v1 + 800);
  sub_14A84(v2);
  sub_1A6DC(v4);
  sub_37D13C(v3);
  *(void *)(v7 - 136) = v1 + 320;
  sub_370C38((uint64_t *)(v1 + 552));
  sub_14A84(v1 + 536);
  sub_14A84(v1 + 520);
  sub_14A84(v1 + 504);
  sub_370C80((uint64_t *)(v1 + 496));
  sub_370D60((uint64_t *)(v1 + 488));
  sub_370E40((uint64_t *)(v1 + 480));
  sub_370D60((uint64_t *)(v1 + 472));
  sub_370ED8((uint64_t *)(v1 + 464));
  unint64_t v8 = *(void **)(v1 + 456);
  *(void *)(v1 + 456) = 0;
  if (v8) {
    sub_37E5DC(v1 + 456, v8);
  }
  uint64_t v9 = (void **)(v1 + 304);
  sub_370C80((uint64_t *)(v1 + 448));
  sub_370E40((uint64_t *)(v1 + 440));
  sub_370F70((uint64_t *)(v1 + 432));
  sub_370F70((uint64_t *)(v1 + 424));
  sub_37E4EC((uint64_t *)(v1 + 416), 0);
  sub_371008((uint64_t *)(v1 + 408));
  sub_3710A0((void *)(v1 + 400));
  sub_371148((uint64_t *)(v1 + 392));
  sub_371228((uint64_t *)(v1 + 384));
  sub_371228((uint64_t *)(v1 + 376));
  sub_371228((uint64_t *)(v1 + 368));
  sub_3712C0((uint64_t *)(v1 + 360));
  sub_370E40((uint64_t *)(v1 + 352));
  sub_371358((uint64_t *)(v1 + 344));
  sub_3713F0((uint64_t *)(v1 + 336));
  sub_3714D0((uint64_t *)(v1 + 328));
  unint64_t v10 = *(void ***)(v7 - 136);
  uint64_t v11 = *v10;
  *unint64_t v10 = 0;
  if (v11) {
    sub_37E178(*(void *)(v7 - 136), v11);
  }
  uint64_t v12 = (void **)(v1 + 280);
  sub_3713F0((uint64_t *)(v1 + 312));
  uint64_t v13 = *v9;
  *uint64_t v9 = 0;
  if (v13) {
    sub_37E178(v1 + 304, v13);
  }
  uint64_t v14 = (void **)(v1 + 256);
  sub_371568((void **)(v1 + 296));
  sub_3715B0((uint64_t *)(v1 + 288));
  uint64_t v15 = *v12;
  *uint64_t v12 = 0;
  if (v15) {
    sub_37E178(v1 + 280, v15);
  }
  sub_3715B0((uint64_t *)(v1 + 272));
  sub_3715B0((uint64_t *)(v1 + 264));
  uint64_t v16 = *v14;
  *uint64_t v14 = 0;
  if (v16) {
    sub_37E044(v1 + 256, v16);
  }
  sub_370E40(v6);
  sub_370E40((uint64_t *)(v1 + 240));
  sub_371690(v5);
  sub_37D394(*(void **)(v7 - 120));
  uint64_t v17 = *(void **)(v1 + 144);
  if (v17) {
    free(v17);
  }
  sub_14A84(*(void *)(v7 - 112));
  sub_14A84(*(void *)(v7 - 104));
  sub_14A84(v1);
  _Unwind_Resume(*(_Unwind_Exception **)(v7 - 128));
}

void sub_370574(uint64_t a1)
{
  *(void *)(v2 - 128) = a1;
  sub_14A84(*(void *)(v2 - 104));
  sub_14A84(v1);
  _Unwind_Resume(*(_Unwind_Exception **)(v2 - 128));
}

void *sub_370590(uint64_t a1)
{
  char v47 = 20;
  uint64_t v2 = (uint64_t *)(a1 + 560);
  strcpy(__p, "CyclingCostFunctions");
  BOOL v3 = sub_4A4530((uint64_t *)(a1 + 560), (uint64_t)__p);
  BOOL v4 = v3;
  if (v47 < 0)
  {
    operator delete(*(void **)__p);
    if (!v4) {
      goto LABEL_18;
    }
  }
  else if (!v3)
  {
    goto LABEL_18;
  }
  char v47 = 20;
  strcpy(__p, "CyclingCostFunctions");
  unint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  unint64_t v5 = sub_4A3B30(v2, (uint64_t)__p, (uint64_t *)&v43);
  unint64_t v6 = (void **)v43;
  if (v43)
  {
    uint64_t v7 = v44;
    unint64_t v8 = v43;
    if (v44 != v43)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      unint64_t v8 = v43;
    }
    uint64_t v44 = v6;
    operator delete(v8);
  }
  if (v47 < 0) {
    operator delete(*(void **)__p);
  }
  uint64_t v9 = sub_39596C(*(void *)a1);
  uint64_t v10 = sub_3939F0(*(void *)a1);
  uint64_t v11 = operator new(0xC0uLL);
  v11[1] = 0;
  v11[2] = 0;
  void *v11 = off_2438CB8;
  uint64_t v12 = sub_F061D4(v11 + 3, v5, v9, v10);
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 512);
  *(void *)(a1 + 504) = v12;
  *(void *)(a1 + 512) = v11;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_18:
  char v47 = 20;
  strcpy(__p, "DrivingCostFunctions");
  BOOL v14 = sub_4A4530(v2, (uint64_t)__p);
  BOOL v15 = v14;
  if (v47 < 0)
  {
    operator delete(*(void **)__p);
    if (!v15) {
      goto LABEL_35;
    }
  }
  else if (!v14)
  {
    goto LABEL_35;
  }
  char v47 = 20;
  strcpy(__p, "DrivingCostFunctions");
  unint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v16 = sub_4A3B30(v2, (uint64_t)__p, (uint64_t *)&v43);
  uint64_t v17 = (void **)v43;
  if (v43)
  {
    unint64_t v18 = v44;
    uint64_t v19 = v43;
    if (v44 != v43)
    {
      do
      {
        if (*((char *)v18 - 1) < 0) {
          operator delete(*(v18 - 3));
        }
        v18 -= 3;
      }
      while (v18 != v17);
      uint64_t v19 = v43;
    }
    uint64_t v44 = v17;
    operator delete(v19);
  }
  if (v47 < 0) {
    operator delete(*(void **)__p);
  }
  uint64_t v20 = sub_395AC8(*(void *)a1);
  uint64_t v21 = sub_393A18(*(void *)a1);
  uint64_t v22 = operator new(0xC0uLL);
  v22[1] = 0;
  v22[2] = 0;
  *uint64_t v22 = off_2438D08;
  *(void *)(a1 + 520) = sub_F08F6C(v22 + 3, v16, v20, v21);
  uint64_t v23 = *(std::__shared_weak_count **)(a1 + 528);
  *(void *)(a1 + 528) = v22;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
LABEL_35:
  char v47 = 20;
  strcpy(__p, "WalkingCostFunctions");
  BOOL v24 = sub_4A4530(v2, (uint64_t)__p);
  BOOL v25 = v24;
  if (v47 < 0)
  {
    operator delete(*(void **)__p);
    if (!v25) {
      goto LABEL_52;
    }
  }
  else if (!v24)
  {
    goto LABEL_52;
  }
  char v47 = 20;
  strcpy(__p, "WalkingCostFunctions");
  unint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  char v26 = sub_4A3B30(v2, (uint64_t)__p, (uint64_t *)&v43);
  uint64_t v27 = (void **)v43;
  if (v43)
  {
    unint64_t v28 = v44;
    int v29 = v43;
    if (v44 != v43)
    {
      do
      {
        if (*((char *)v28 - 1) < 0) {
          operator delete(*(v28 - 3));
        }
        v28 -= 3;
      }
      while (v28 != v27);
      int v29 = v43;
    }
    uint64_t v44 = v27;
    operator delete(v29);
  }
  if (v47 < 0) {
    operator delete(*(void **)__p);
  }
  uint64_t v30 = sub_395C24(*(void *)a1);
  uint64_t v31 = sub_393A40(*(void *)a1);
  unint64_t v32 = operator new(0xC0uLL);
  v32[1] = 0;
  v32[2] = 0;
  void *v32 = off_2438D58;
  *(void *)(a1 + 536) = sub_F0BC48(v32 + 3, v26, v30, v31);
  unint64_t v33 = *(std::__shared_weak_count **)(a1 + 544);
  *(void *)(a1 + 544) = v32;
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
LABEL_52:
  *(_OWORD *)(a1 + 120) = xmmword_20E2330;
  *(unsigned char *)(a1 + 73) = 1;
  *(_DWORD *)(a1 + 136) = 0x7FFFFFFF;
  unint64_t v34 = malloc_type_malloc(20 * *(void *)(a1 + 112), 0x1000040B68A9B53uLL);
  *(void *)(a1 + 144) = v34;
  uint64_t v35 = *(void *)(a1 + 112);
  if (v35)
  {
    uint64_t v36 = 20 * v35;
    do
    {
      long long v37 = *(_OWORD *)(a1 + 120);
      v34[4] = *(_DWORD *)(a1 + 136);
      *(_OWORD *)unint64_t v34 = v37;
      v34 += 5;
      v36 -= 20;
    }
    while (v36);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6898, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F6898))
  {
    qword_24F6890 = 1;
    __cxa_guard_release(&qword_24F6898);
  }
  uint64_t v38 = qword_24F6890;
  sub_328F88(a1 + 48);
  *(unsigned char *)(a1 + 74) = 1;
  *(void *)(a1 + 80) = v38;
  *(unsigned char *)(a1 + 92) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  uint64_t v39 = sub_69510();
  BOOL result = (void *)sub_6915C((uint64_t)v39);
  if (!*result)
  {
    long long v41 = sub_69510();
    sub_69164((uint64_t)v41, (uint64_t *)(a1 + 32));
    uint64_t v42 = sub_69510();
    return (void *)sub_69200((uint64_t)v42, *(_DWORD *)(a1 + 860));
  }
  return result;
}

void sub_370B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

uint64_t *sub_370BF0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_10BE400();
    operator delete();
  }
  return a1;
}

uint64_t *sub_370C38(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_37E700(v2);
    operator delete();
  }
  return a1;
}

uint64_t *sub_370C80(uint64_t *result)
{
  uint64_t v1 = *result;
  *BOOL result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 24);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    BOOL v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3)
    {
      if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_370D60(uint64_t *result)
{
  uint64_t v1 = *result;
  *BOOL result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 3880);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    BOOL v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3)
    {
      if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_370E40(uint64_t *result)
{
  uint64_t v1 = *result;
  *BOOL result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 8);
    if (v2)
    {
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_370ED8(uint64_t *result)
{
  uint64_t v1 = *result;
  *BOOL result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 8);
    if (v2)
    {
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_370F70(uint64_t *result)
{
  uint64_t v1 = *result;
  *BOOL result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 8);
    if (v2)
    {
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_371008(uint64_t *result)
{
  uint64_t v1 = *result;
  *BOOL result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 8);
    if (v2)
    {
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    operator delete();
  }
  return result;
}

void *sub_3710A0(void *result)
{
  uint64_t v1 = (void *)*result;
  *BOOL result = 0;
  if (v1)
  {
    uint64_t v2 = (void *)v1[3];
    if (v2)
    {
      v1[4] = v2;
      operator delete(v2);
    }
    BOOL v3 = (std::__shared_weak_count *)v1[1];
    if (v3)
    {
      if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_371148(uint64_t *result)
{
  uint64_t v1 = *result;
  *BOOL result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 24);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    BOOL v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3)
    {
      if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_371228(uint64_t *result)
{
  uint64_t v1 = *result;
  *BOOL result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 8);
    if (v2)
    {
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_3712C0(uint64_t *result)
{
  uint64_t v1 = *result;
  *BOOL result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 8);
    if (v2)
    {
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_371358(uint64_t *result)
{
  uint64_t v1 = *result;
  *BOOL result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 16);
    if (v2)
    {
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_3713F0(uint64_t *result)
{
  uint64_t v1 = *result;
  *BOOL result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 3880);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    BOOL v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3)
    {
      if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_3714D0(uint64_t *result)
{
  uint64_t v1 = *result;
  *BOOL result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 8);
    if (v2)
    {
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    operator delete();
  }
  return result;
}

void **sub_371568(void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_37E29C(v2);
    operator delete();
  }
  return a1;
}

uint64_t *sub_3715B0(uint64_t *result)
{
  uint64_t v1 = *result;
  *BOOL result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 3880);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    BOOL v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3)
    {
      if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    operator delete();
  }
  return result;
}

void **sub_371690(void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_32834C(v2);
    operator delete();
  }
  return a1;
}

uint64_t sub_3716D8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5, char a6, char a7, void *a8)
{
  return sub_36FFCC(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_3716E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void *)(a2 + 16);
  if (v7)
  {
    uint64_t v8 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = (void *)(a1 + 32);
    uint64_t v10 = *(void *)(a2 + 32);
    if (v10)
    {
LABEL_7:
      uint64_t v11 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v10;
      *(void *)(a1 + 40) = v11;
      if (!v11) {
        goto LABEL_15;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v12 = operator new(0xE8uLL);
    v12[1] = 0;
    v12[2] = 0;
    *uint64_t v12 = off_2438B78;
    sub_37DE18((uint64_t)&v22, (uint64_t)(v12 + 3));
    *(void *)(a1 + 16) = v12 + 3;
    *(void *)(a1 + 24) = v12;
    uint64_t v9 = (void *)(a1 + 32);
    uint64_t v10 = *(void *)(a2 + 32);
    if (v10) {
      goto LABEL_7;
    }
  }
  uint64_t v13 = sub_69510();
  if (sub_68ECC((uint64_t)v13) && *(void *)sub_6915C((uint64_t)v13))
  {
    BOOL v14 = (void *)sub_6915C((uint64_t)v13);
    uint64_t v11 = v14[1];
    *(void *)(a1 + 32) = *v14;
    *(void *)(a1 + 40) = v11;
    if (v11) {
LABEL_8:
    }
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    sub_391260(*(void **)a1, v9);
  }
LABEL_15:
  *(unsigned char *)(a1 + 74) = 0;
  *(void *)(a1 + 64) = 0x3E4CCCCD3F000000;
  *(_OWORD *)(a1 + 76) = xmmword_20B93F0;
  *(unsigned char *)(a1 + 92) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 32;
  *(void *)(a1 + 120) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 128) = -1;
  *(unsigned char *)(a1 + 132) = 0;
  *(_DWORD *)(a1 + 136) = 0x7FFFFFFF;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 48) = xmmword_20B98A0;
  *(_WORD *)(a1 + 72) = 0;
  if (sub_49CA04((void *)(a2 + 152)))
  {
    uint64_t v15 = *(void *)(a2 + 160);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v16 = *(void *)(a2 + 176);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a1 + 176) = v16;
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v17 = *(void *)(a2 + 192);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = v17;
    if (v17) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = *(void *)(a2 + 208);
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    *(void *)(a1 + 208) = v18;
    if (v18) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v19 = *(void *)(a2 + 224);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    *(void *)(a1 + 224) = v19;
    if (v19) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    sub_391290(*(void *)a1, (_DWORD **)(a1 + 152));
  }
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  sub_4A39A4((uint64_t *)(a2 + 560), a3, a1 + 560);
  sub_29DDA8((char **)(a1 + 760), *(long long ***)(a1 + 16));
  *(void *)(a1 + 848) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  uint64_t v20 = *(void *)(a2 + 856);
  *(_DWORD *)(a1 + 864) = *(_DWORD *)(a2 + 864);
  *(void *)(a1 + 856) = v20;
  *(_WORD *)(a1 + 868) = *(_WORD *)(a2 + 868);
  sub_370590(a1);
  return a1;
}

void sub_3719B0(uint64_t a1)
{
  *(void *)(v3 - 104) = a1;
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  sub_14A84(v1);
  _Unwind_Resume(*(_Unwind_Exception **)(v3 - 104));
}

void sub_3719D0(uint64_t a1)
{
  *(void *)(v2 - 104) = a1;
  sub_14A84(v1);
  _Unwind_Resume(*(_Unwind_Exception **)(v2 - 104));
}

void sub_3719E4(uint64_t a1)
{
  *(void *)(v9 - 104) = a1;
  *(void *)(v9 - 112) = v1 + 800;
  sub_14A84(v1 + 840);
  sub_14A84(v1 + 824);
  sub_370BF0((uint64_t *)(v1 + 816));
  sub_14A84(*(void *)(v9 - 112));
  sub_14A84(v8);
  sub_1A6DC(v6);
  sub_37D13C(v7);
  *(void *)(v9 - 120) = v4 + 80;
  *(void *)(v9 - 112) = v4 + 88;
  *(void *)(v9 - 136) = v4 + 104;
  *(void *)(v9 - 128) = v4 + 96;
  sub_370C38((uint64_t *)(v4 + 320));
  sub_14A84(v4 + 304);
  sub_14A84(v4 + 288);
  sub_14A84(v4 + 272);
  sub_370C80((uint64_t *)(v4 + 264));
  sub_370D60((uint64_t *)(v4 + 256));
  sub_370E40((uint64_t *)(v4 + 248));
  sub_370D60((uint64_t *)(v4 + 240));
  sub_370ED8((uint64_t *)(v4 + 232));
  uint64_t v10 = *(void **)(v4 + 224);
  *(void *)(v4 + 224) = 0;
  if (v10) {
    sub_37E5DC(v4 + 224, v10);
  }
  uint64_t v11 = (void **)(v4 + 72);
  sub_370C80((uint64_t *)(v4 + 216));
  sub_370E40((uint64_t *)(v4 + 208));
  sub_370F70((uint64_t *)(v4 + 200));
  sub_370F70((uint64_t *)(v4 + 192));
  sub_37E4EC((uint64_t *)(v4 + 184), 0);
  sub_371008((uint64_t *)(v4 + 176));
  sub_3710A0((void *)(v4 + 168));
  sub_371148((uint64_t *)(v4 + 160));
  sub_371228((uint64_t *)(v4 + 152));
  sub_371228((uint64_t *)(v4 + 144));
  sub_371228((uint64_t *)(v4 + 136));
  sub_3712C0((uint64_t *)(v4 + 128));
  sub_370E40((uint64_t *)(v4 + 120));
  sub_371358((uint64_t *)(v4 + 112));
  sub_3713F0(*(uint64_t **)(v9 - 136));
  sub_3714D0(*(uint64_t **)(v9 - 128));
  uint64_t v12 = *(void ***)(v9 - 112);
  uint64_t v13 = *v12;
  *uint64_t v12 = 0;
  if (v13) {
    sub_37E178(*(void *)(v9 - 112), v13);
  }
  BOOL v14 = (void **)(v4 + 48);
  sub_3713F0(*(uint64_t **)(v9 - 120));
  uint64_t v15 = *v11;
  void *v11 = 0;
  if (v15) {
    sub_37E178(v4 + 72, v15);
  }
  uint64_t v16 = (void **)(v4 + 24);
  sub_371568((void **)(v4 + 64));
  sub_3715B0((uint64_t *)(v4 + 56));
  uint64_t v17 = *v14;
  *BOOL v14 = 0;
  if (v17) {
    sub_37E178(v4 + 48, v17);
  }
  sub_3715B0((uint64_t *)(v4 + 40));
  sub_3715B0((uint64_t *)(v4 + 32));
  uint64_t v18 = *v16;
  *uint64_t v16 = 0;
  if (v18) {
    sub_37E044(v4 + 24, v18);
  }
  sub_370E40(v5);
  sub_370E40((uint64_t *)(v4 + 8));
  sub_371690((void **)v4);
  sub_37D394(v3);
  uint64_t v19 = *(void **)(v1 + 144);
  if (v19) {
    free(v19);
  }
  sub_14A84(v2);
  sub_14A84(v1 + 16);
  sub_14A84(v1);
  _Unwind_Resume(*(_Unwind_Exception **)(v9 - 104));
}

uint64_t sub_371CCC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8, uint64_t a9, int a10, int a11, char a12, char a13, void *a14)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v20 = (uint64_t *)(a1 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  if (*a4)
  {
    *(void *)(a1 + 16) = *a4;
    *(void *)(a1 + 24) = a4[1];
    *a4 = 0;
    a4[1] = 0;
  }
  else
  {
    uint64_t v21 = operator new(0xE8uLL);
    v21[1] = 0;
    v21[2] = 0;
    void *v21 = off_2438B78;
    sub_37DE18((uint64_t)v34, (uint64_t)(v21 + 3));
    *(void *)(a1 + 16) = v21 + 3;
    *(void *)(a1 + 24) = v21;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a1 + 74) = 0;
  *(void *)(a1 + 64) = 0x3E4CCCCD3F000000;
  *(_OWORD *)(a1 + 76) = xmmword_20B93F0;
  *(unsigned char *)(a1 + 92) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 32;
  *(void *)(a1 + 120) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 128) = -1;
  *(unsigned char *)(a1 + 132) = 0;
  *(_DWORD *)(a1 + 136) = 0x7FFFFFFF;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 48) = xmmword_20B98A0;
  *(_WORD *)(a1 + 72) = 0;
  if (sub_49CA04(a14))
  {
    *(void *)(a1 + 152) = *a14;
    uint64_t v22 = a14[1];
    *(void *)(a1 + 160) = v22;
    if (v22) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a1 + 168) = a14[2];
    uint64_t v23 = a14[3];
    *(void *)(a1 + 176) = v23;
    if (v23) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a1 + 184) = a14[4];
    uint64_t v24 = a14[5];
    *(void *)(a1 + 192) = v24;
    if (v24) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a1 + 200) = a14[6];
    uint64_t v25 = a14[7];
    *(void *)(a1 + 208) = v25;
    if (v25) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a1 + 216) = a14[8];
    uint64_t v26 = a14[9];
    *(void *)(a1 + 224) = v26;
    if (v26) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    sub_391290(*(void *)a1, (_DWORD **)(a1 + 152));
  }
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  sub_4A1BBC((uint64_t *)a1, v20, a1 + 560);
  sub_29DDA8((char **)(a1 + 760), *(long long ***)(a1 + 16));
  *(void *)(a1 + 848) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(void *)(a1 + 856) = a9;
  *(_DWORD *)(a1 + 864) = a10;
  *(unsigned char *)(a1 + 868) = a12;
  *(unsigned char *)(a1 + 869) = a13;
  sub_370590(a1);
  uint64_t v27 = operator new(0x40uLL);
  v27[1] = 0;
  v27[2] = 0;
  *uint64_t v27 = off_2438BC8;
  v27[3] = 0;
  v27[4] = a5;
  v27[5] = 0;
  v27[6] = 0;
  v27[7] = 0;
  double v28 = sub_37E97C(v27 + 3, a5, 0, a6, 0);
  *(void *)(a1 + 784) = v27 + 3;
  int v29 = *(std::__shared_weak_count **)(a1 + 792);
  *(void *)(a1 + 792) = v27;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *, double))v29->__on_zero_shared)(v29, v28);
    std::__shared_weak_count::__release_weak(v29);
  }
  uint64_t v30 = operator new(0x40uLL);
  v30[1] = 0;
  v30[2] = 0;
  *uint64_t v30 = off_2438C18;
  v30[3] = 0;
  v30[4] = a7;
  v30[5] = 0;
  v30[6] = 0;
  v30[7] = 0;
  double v31 = sub_37FE5C(v30 + 3, a7, 0, a8, 0);
  *(void *)(a1 + 800) = v30 + 3;
  unint64_t v32 = *(std::__shared_weak_count **)(a1 + 808);
  *(void *)(a1 + 808) = v30;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *, double))v32->__on_zero_shared)(v32, v31);
    std::__shared_weak_count::__release_weak(v32);
  }
  return a1;
}

void sub_3720CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,_Unwind_Exception *exception_object)
{
  std::__shared_weak_count::~__shared_weak_count(v28);
  operator delete(v29);
  sub_14A84(v27);
  _Unwind_Resume(a1);
}

void sub_3720EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,_Unwind_Exception *exception_object)
{
  sub_14A84(v27);
  _Unwind_Resume(a1);
}

void sub_372100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,_Unwind_Exception *exception_object)
{
  *(void *)(v32 - 96) = v31;
  sub_381044((void ***)(v32 - 96));
  std::__shared_weak_count::~__shared_weak_count(v30);
  operator delete(v33);
  sub_14A84(v27 + 840);
  sub_14A84(v27 + 824);
  sub_370BF0((uint64_t *)(v27 + 816));
  sub_14A84(v27 + 800);
  sub_14A84(v27 + 784);
  sub_1A6DC(*(void ***)(v32 - 136));
  sub_37D13C(*(void *)(v32 - 128));
  *(void *)(v32 - 136) = v27 + 312;
  *(void *)(v32 - 128) = v27 + 320;
  sub_370C38((uint64_t *)(v27 + 552));
  sub_14A84(v27 + 536);
  sub_14A84(v27 + 520);
  sub_14A84(v27 + 504);
  sub_370C80((uint64_t *)(v27 + 496));
  sub_370D60((uint64_t *)(v27 + 488));
  sub_370E40((uint64_t *)(v27 + 480));
  sub_370D60((uint64_t *)(v27 + 472));
  sub_370ED8((uint64_t *)(v27 + 464));
  unint64_t v34 = *(void **)(v27 + 456);
  *(void *)(v27 + 456) = 0;
  if (v34) {
    sub_37E5DC(v27 + 456, v34);
  }
  uint64_t v35 = (void **)(v27 + 304);
  sub_370C80((uint64_t *)(v27 + 448));
  sub_370E40((uint64_t *)(v27 + 440));
  sub_370F70((uint64_t *)(v27 + 432));
  sub_370F70((uint64_t *)(v27 + 424));
  sub_37E4EC((uint64_t *)(v27 + 416), 0);
  sub_371008((uint64_t *)(v27 + 408));
  sub_3710A0((void *)(v27 + 400));
  sub_371148((uint64_t *)(v27 + 392));
  sub_371228((uint64_t *)(v27 + 384));
  sub_371228((uint64_t *)(v27 + 376));
  sub_371228((uint64_t *)(v27 + 368));
  sub_3712C0((uint64_t *)(v27 + 360));
  sub_370E40((uint64_t *)(v27 + 352));
  sub_371358((uint64_t *)(v27 + 344));
  sub_3713F0((uint64_t *)(v27 + 336));
  sub_3714D0((uint64_t *)(v27 + 328));
  uint64_t v36 = *(void ***)(v32 - 128);
  long long v37 = *v36;
  std::__shared_weak_count *v36 = 0;
  if (v37) {
    sub_37E178(*(void *)(v32 - 128), v37);
  }
  uint64_t v38 = (void **)(v27 + 280);
  sub_3713F0(*(uint64_t **)(v32 - 136));
  uint64_t v39 = *v35;
  int *v35 = 0;
  if (v39) {
    sub_37E178(v27 + 304, v39);
  }
  uint64_t v40 = (void **)(v27 + 256);
  sub_371568((void **)(v27 + 296));
  sub_3715B0((uint64_t *)(v27 + 288));
  long long v41 = *v38;
  *uint64_t v38 = 0;
  if (v41) {
    sub_37E178(v27 + 280, v41);
  }
  sub_3715B0((uint64_t *)(v27 + 272));
  sub_3715B0((uint64_t *)(v27 + 264));
  uint64_t v42 = *v40;
  *uint64_t v40 = 0;
  if (v42) {
    sub_37E044(v27 + 256, v42);
  }
  sub_370E40(*(uint64_t **)(v32 - 120));
  sub_370E40((uint64_t *)(v27 + 240));
  sub_371690(v29);
  sub_37D394(*(void **)(v32 - 112));
  unint64_t v43 = *(void **)(v27 + 144);
  if (v43) {
    free(v43);
  }
  sub_14A84(v28);
  sub_14A84(*(void *)(v32 - 104));
  sub_14A84(v27);
  _Unwind_Resume(a1);
}

void sub_3723E4()
{
}

void sub_3723EC()
{
}

void sub_3723F4()
{
  if (!*(void *)(v0 + 144)) {
    JUMPOUT(0x3723C4);
  }
  JUMPOUT(0x3723C0);
}

uint64_t sub_372404(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8, uint64_t a9, int a10, int a11, char a12, char a13, void *a14)
{
  return sub_371CCC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 0, a12, a13, a14);
}

uint64_t sub_37242C(uint64_t a1)
{
  __t.__d_.__rep_ = 0;
  unsigned __int8 v6 = 0;
  uint64_t v2 = operator new(0x5B8uLL);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = off_2438C68;
  sub_381188((uint64_t)&v7, (uint64_t)(v2 + 3), (uint64_t)&__t, &v6);
  *(void *)a1 = v2 + 3;
  *(void *)(a1 + 8) = v2;
  uint64_t v3 = operator new(0xE8uLL);
  v3[1] = 0;
  v3[2] = 0;
  *uint64_t v3 = off_2438B78;
  sub_37DE18((uint64_t)&__t, (uint64_t)(v3 + 3));
  *(void *)(a1 + 16) = v3 + 3;
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 74) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 64) = 0x3E4CCCCD3F000000;
  *(_OWORD *)(a1 + 76) = xmmword_20B93F0;
  *(unsigned char *)(a1 + 92) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 32;
  *(void *)(a1 + 120) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 128) = -1;
  *(unsigned char *)(a1 + 132) = 0;
  *(_DWORD *)(a1 + 136) = 0x7FFFFFFF;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 48) = xmmword_20B98A0;
  *(_WORD *)(a1 + 72) = 0;
  sub_391290(*(void *)a1, (_DWORD **)(a1 + 152));
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  sub_4A1BBC((uint64_t *)a1, (uint64_t *)(a1 + 16), a1 + 560);
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  int v4 = std::chrono::system_clock::to_time_t(&__t);
  *(_DWORD *)(a1 + 856) = v4;
  *(_DWORD *)(a1 + 860) = v4;
  *(_DWORD *)(a1 + 864) = 0;
  *(_WORD *)(a1 + 868) = 0;
  sub_370590(a1);
  return a1;
}

void sub_372610(uint64_t a1)
{
  *(void *)(v9 - 112) = a1;
  *(void *)(v9 - 128) = v1 + 800;
  *(void *)(v9 - 120) = v1 + 784;
  sub_14A84(v1 + 840);
  sub_14A84(v1 + 824);
  sub_370BF0((uint64_t *)(v1 + 816));
  sub_14A84(*(void *)(v9 - 128));
  sub_14A84(*(void *)(v9 - 120));
  sub_1A6DC(v8);
  sub_37D13C(v5);
  *(void *)(v9 - 128) = v1 + 312;
  *(void *)(v9 - 120) = v1 + 320;
  *(void *)(v9 - 144) = v1 + 336;
  *(void *)(v9 - 136) = v1 + 328;
  sub_370C38((uint64_t *)(v1 + 552));
  sub_14A84(v1 + 536);
  sub_14A84(v1 + 520);
  sub_14A84(v1 + 504);
  sub_370C80((uint64_t *)(v1 + 496));
  sub_370D60((uint64_t *)(v1 + 488));
  sub_370E40((uint64_t *)(v1 + 480));
  sub_370D60((uint64_t *)(v1 + 472));
  sub_370ED8((uint64_t *)(v1 + 464));
  uint64_t v10 = *(void **)(v1 + 456);
  *(void *)(v1 + 456) = 0;
  if (v10) {
    sub_37E5DC(v1 + 456, v10);
  }
  uint64_t v11 = (void **)(v1 + 304);
  sub_370C80((uint64_t *)(v1 + 448));
  sub_370E40((uint64_t *)(v1 + 440));
  sub_370F70((uint64_t *)(v1 + 432));
  sub_370F70((uint64_t *)(v1 + 424));
  sub_37E4EC((uint64_t *)(v1 + 416), 0);
  sub_371008((uint64_t *)(v1 + 408));
  sub_3710A0((void *)(v1 + 400));
  sub_371148((uint64_t *)(v1 + 392));
  sub_371228((uint64_t *)(v1 + 384));
  sub_371228((uint64_t *)(v1 + 376));
  sub_371228((uint64_t *)(v1 + 368));
  sub_3712C0((uint64_t *)(v1 + 360));
  sub_370E40((uint64_t *)(v1 + 352));
  sub_371358((uint64_t *)(v1 + 344));
  sub_3713F0(*(uint64_t **)(v9 - 144));
  sub_3714D0(*(uint64_t **)(v9 - 136));
  uint64_t v12 = *(void ***)(v9 - 120);
  uint64_t v13 = *v12;
  *uint64_t v12 = 0;
  if (v13) {
    sub_37E178(*(void *)(v9 - 120), v13);
  }
  *(void *)(v9 - 120) = v1 + 264;
  BOOL v14 = (void **)(v1 + 280);
  sub_3713F0(*(uint64_t **)(v9 - 128));
  uint64_t v15 = *v11;
  void *v11 = 0;
  if (v15) {
    sub_37E178(v1 + 304, v15);
  }
  uint64_t v16 = (void **)(v1 + 256);
  sub_371568((void **)(v1 + 296));
  sub_3715B0((uint64_t *)(v1 + 288));
  uint64_t v17 = *v14;
  *BOOL v14 = 0;
  if (v17) {
    sub_37E178(v1 + 280, v17);
  }
  sub_3715B0((uint64_t *)(v1 + 272));
  sub_3715B0(*(uint64_t **)(v9 - 120));
  uint64_t v18 = *v16;
  *uint64_t v16 = 0;
  if (v18) {
    sub_37E044(v1 + 256, v18);
  }
  sub_370E40(v7);
  sub_370E40((uint64_t *)(v1 + 240));
  sub_371690(v6);
  sub_37D394(v4);
  uint64_t v19 = *(void **)(v1 + 144);
  if (v19) {
    free(v19);
  }
  sub_14A84(v3);
  sub_14A84(v2);
  sub_14A84(v1);
  _Unwind_Resume(*(_Unwind_Exception **)(v9 - 112));
}

void sub_3728E0(uint64_t a1)
{
  *(void *)(v3 - 112) = a1;
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  sub_14A84(v1);
  _Unwind_Resume(*(_Unwind_Exception **)(v3 - 112));
}

void sub_372900(uint64_t a1)
{
  *(void *)(v2 - 112) = a1;
  sub_14A84(v1);
  _Unwind_Resume(*(_Unwind_Exception **)(v2 - 112));
}

void sub_372914(uint64_t a1)
{
  *(void *)(v2 - 112) = a1;
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(*(_Unwind_Exception **)(v2 - 112));
}

void sub_372930(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)long long __p = 0u;
  long long v6 = 0u;
  int v7 = 1065353216;
  sub_3716E0(a2, a1, (uint64_t)__p);
  uint64_t v2 = (char *)v6;
  if ((void)v6)
  {
    do
    {
      int v4 = *(char **)v2;
      sub_57AC8((uint64_t *)v2 + 5);
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      uint64_t v2 = v4;
    }
    while (v4);
  }
  uint64_t v3 = __p[0];
  __p[0] = 0;
  if (v3) {
    operator delete(v3);
  }
}

void sub_3729BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_3729D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_3716E0(a3, a1, a2);
}

void *sub_3729E0(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[106];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[104];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[104];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = a1[102];
  a1[102] = 0;
  if (v4)
  {
    sub_10BE400();
    operator delete();
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[101];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    long long v6 = (std::__shared_weak_count *)a1[99];
    if (!v6) {
      goto LABEL_15;
    }
  }
  else
  {
    long long v6 = (std::__shared_weak_count *)a1[99];
    if (!v6) {
      goto LABEL_15;
    }
  }
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_15:
  uint64_t v7 = a1[95];
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = a1[96];
  uint64_t v9 = (void *)a1[95];
  if (v8 != v7)
  {
    while (1)
    {
      if (*(char *)(v8 - 1) < 0)
      {
        operator delete(*(void **)(v8 - 24));
        if (*(char *)(v8 - 25) < 0) {
LABEL_23:
        }
          operator delete(*(void **)(v8 - 48));
      }
      else if (*(char *)(v8 - 25) < 0)
      {
        goto LABEL_23;
      }
      v8 -= 48;
      if (v8 == v7)
      {
        uint64_t v9 = (void *)a1[95];
        break;
      }
    }
  }
  a1[96] = v7;
  operator delete(v9);
LABEL_26:
  sub_37D13C((uint64_t)(a1 + 70));
  uint64_t v10 = a1[69];
  a1[69] = 0;
  if (v10)
  {
    sub_37E700(v10);
    operator delete();
  }
  uint64_t v11 = (std::__shared_weak_count *)a1[68];
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    uint64_t v12 = (std::__shared_weak_count *)a1[66];
    if (!v12) {
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v12 = (std::__shared_weak_count *)a1[66];
    if (!v12) {
      goto LABEL_34;
    }
  }
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_34:
  uint64_t v13 = (std::__shared_weak_count *)a1[64];
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    uint64_t v14 = a1[62];
    a1[62] = 0;
    if (v14) {
      goto LABEL_37;
    }
  }
  else
  {
    uint64_t v14 = a1[62];
    a1[62] = 0;
    if (v14)
    {
LABEL_37:
      uint64_t v15 = *(std::__shared_weak_count **)(v14 + 24);
      if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
      uint64_t v16 = *(std::__shared_weak_count **)(v14 + 8);
      if (v16)
      {
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      operator delete();
    }
  }
  uint64_t v17 = a1[61];
  a1[61] = 0;
  if (v17)
  {
    uint64_t v18 = *(std::__shared_weak_count **)(v17 + 3880);
    if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    uint64_t v19 = *(std::__shared_weak_count **)(v17 + 8);
    if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    operator delete();
  }
  uint64_t v20 = a1[60];
  a1[60] = 0;
  if (v20)
  {
    uint64_t v21 = *(std::__shared_weak_count **)(v20 + 8);
    if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    operator delete();
  }
  uint64_t v22 = a1[59];
  a1[59] = 0;
  if (v22)
  {
    uint64_t v23 = *(std::__shared_weak_count **)(v22 + 3880);
    if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    uint64_t v24 = *(std::__shared_weak_count **)(v22 + 8);
    if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    operator delete();
  }
  uint64_t v25 = a1[58];
  a1[58] = 0;
  if (v25)
  {
    uint64_t v26 = *(std::__shared_weak_count **)(v25 + 8);
    if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
    operator delete();
  }
  uint64_t v27 = (void *)a1[57];
  a1[57] = 0;
  if (v27) {
    sub_37E5DC((uint64_t)(a1 + 57), v27);
  }
  uint64_t v28 = a1[56];
  a1[56] = 0;
  if (v28)
  {
    int v29 = *(std::__shared_weak_count **)(v28 + 24);
    if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
    uint64_t v30 = *(std::__shared_weak_count **)(v28 + 8);
    if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
    operator delete();
  }
  uint64_t v31 = a1[55];
  a1[55] = 0;
  if (v31)
  {
    uint64_t v32 = *(std::__shared_weak_count **)(v31 + 8);
    if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
    operator delete();
  }
  uint64_t v33 = a1[54];
  a1[54] = 0;
  if (v33)
  {
    unint64_t v34 = *(std::__shared_weak_count **)(v33 + 8);
    if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
    operator delete();
  }
  uint64_t v35 = a1[53];
  a1[53] = 0;
  if (v35)
  {
    uint64_t v36 = *(std::__shared_weak_count **)(v35 + 8);
    if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
    operator delete();
  }
  sub_37E4EC(a1 + 52, 0);
  uint64_t v37 = a1[51];
  a1[51] = 0;
  if (v37)
  {
    uint64_t v38 = *(std::__shared_weak_count **)(v37 + 8);
    if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
    operator delete();
  }
  uint64_t v39 = (void *)a1[50];
  a1[50] = 0;
  if (v39)
  {
    uint64_t v40 = (void *)v39[3];
    if (v40)
    {
      v39[4] = v40;
      operator delete(v40);
    }
    long long v41 = (std::__shared_weak_count *)v39[1];
    if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
    operator delete();
  }
  uint64_t v42 = a1[49];
  a1[49] = 0;
  if (v42)
  {
    unint64_t v43 = *(std::__shared_weak_count **)(v42 + 24);
    if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
    uint64_t v44 = *(std::__shared_weak_count **)(v42 + 8);
    if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
    operator delete();
  }
  uint64_t v45 = a1[48];
  a1[48] = 0;
  if (v45)
  {
    uint64_t v46 = *(std::__shared_weak_count **)(v45 + 8);
    if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
    operator delete();
  }
  uint64_t v47 = a1[47];
  a1[47] = 0;
  if (v47)
  {
    uint64_t v48 = *(std::__shared_weak_count **)(v47 + 8);
    if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
    operator delete();
  }
  uint64_t v49 = a1[46];
  a1[46] = 0;
  if (v49)
  {
    uint64_t v50 = *(std::__shared_weak_count **)(v49 + 8);
    if (v50 && !atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
    operator delete();
  }
  uint64_t v51 = a1[45];
  a1[45] = 0;
  if (v51)
  {
    __darwin_ct_rune_t v52 = *(std::__shared_weak_count **)(v51 + 8);
    if (v52 && !atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
    operator delete();
  }
  uint64_t v53 = a1[44];
  a1[44] = 0;
  if (v53)
  {
    uint64_t v54 = *(std::__shared_weak_count **)(v53 + 8);
    if (v54 && !atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
    operator delete();
  }
  uint64_t v55 = a1[43];
  a1[43] = 0;
  if (v55)
  {
    std::string v56 = *(std::__shared_weak_count **)(v55 + 16);
    if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
    operator delete();
  }
  uint64_t v57 = a1[42];
  a1[42] = 0;
  if (v57)
  {
    unint64_t v58 = *(std::__shared_weak_count **)(v57 + 3880);
    if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
    std::string v59 = *(std::__shared_weak_count **)(v57 + 8);
    if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
    operator delete();
  }
  uint64_t v60 = a1[41];
  a1[41] = 0;
  if (v60)
  {
    uint64_t v61 = *(std::__shared_weak_count **)(v60 + 8);
    if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
    operator delete();
  }
  uint64_t v62 = (void *)a1[40];
  a1[40] = 0;
  if (v62) {
    sub_37E178((uint64_t)(a1 + 40), v62);
  }
  uint64_t v63 = a1[39];
  a1[39] = 0;
  if (v63)
  {
    uint64_t v64 = *(std::__shared_weak_count **)(v63 + 3880);
    if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
    uint64_t v65 = *(std::__shared_weak_count **)(v63 + 8);
    if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
    operator delete();
  }
  int v66 = (void *)a1[38];
  a1[38] = 0;
  if (v66) {
    sub_37E178((uint64_t)(a1 + 38), v66);
  }
  char v67 = (void *)a1[37];
  a1[37] = 0;
  if (v67)
  {
    sub_37E29C(v67);
    operator delete();
  }
  uint64_t v68 = a1[36];
  a1[36] = 0;
  if (v68)
  {
    uint64_t v69 = *(std::__shared_weak_count **)(v68 + 3880);
    if (v69 && !atomic_fetch_add(&v69->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
    uint64_t v70 = *(std::__shared_weak_count **)(v68 + 8);
    if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
    operator delete();
  }
  uint64_t v71 = (void *)a1[35];
  a1[35] = 0;
  if (v71) {
    sub_37E178((uint64_t)(a1 + 35), v71);
  }
  uint64_t v72 = a1[34];
  a1[34] = 0;
  if (v72)
  {
    uint64_t v73 = *(std::__shared_weak_count **)(v72 + 3880);
    if (v73 && !atomic_fetch_add(&v73->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
    unint64_t v74 = *(std::__shared_weak_count **)(v72 + 8);
    if (v74 && !atomic_fetch_add(&v74->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
    operator delete();
  }
  uint64_t v75 = a1[33];
  a1[33] = 0;
  if (v75)
  {
    size_t v76 = *(std::__shared_weak_count **)(v75 + 3880);
    if (v76 && !atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
    long long v77 = *(std::__shared_weak_count **)(v75 + 8);
    if (v77 && !atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
    operator delete();
  }
  uint64_t v78 = (void *)a1[32];
  a1[32] = 0;
  if (v78) {
    sub_37E044((uint64_t)(a1 + 32), v78);
  }
  uint64_t v79 = a1[31];
  a1[31] = 0;
  if (v79)
  {
    uint64_t v80 = *(std::__shared_weak_count **)(v79 + 8);
    if (v80 && !atomic_fetch_add(&v80->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
    operator delete();
  }
  uint64_t v81 = a1[30];
  a1[30] = 0;
  if (v81)
  {
    uint64_t v82 = *(std::__shared_weak_count **)(v81 + 8);
    if (v82 && !atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
    operator delete();
  }
  uint64_t v83 = (void *)a1[29];
  a1[29] = 0;
  if (v83)
  {
    sub_32834C(v83);
    operator delete();
  }
  sub_37D394(a1 + 19);
  uint64_t v84 = (void *)a1[18];
  if (v84) {
    free(v84);
  }
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v85 = (std::__shared_weak_count *)a1[5];
  if (v85 && !atomic_fetch_add(&v85->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
    std::__shared_weak_count::__release_weak(v85);
    uint64_t v86 = (std::__shared_weak_count *)a1[3];
    if (!v86) {
      goto LABEL_222;
    }
  }
  else
  {
    uint64_t v86 = (std::__shared_weak_count *)a1[3];
    if (!v86) {
      goto LABEL_222;
    }
  }
  if (!atomic_fetch_add(&v86->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
    std::__shared_weak_count::__release_weak(v86);
  }
LABEL_222:
  unsigned int v87 = (std::__shared_weak_count *)a1[1];
  if (!v87 || atomic_fetch_add(&v87->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
  std::__shared_weak_count::__release_weak(v87);
  return a1;
}

uint64_t sub_373C8C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  sub_329090(a1 + 48, a2 + 48, 0x20uLL);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a2 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a2 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a2 + 216) = 0u;
  uint64_t v4 = *(void *)(a2 + 232);
  *(void *)(a2 + 232) = 0;
  *(void *)(a1 + 232) = v4;
  uint64_t v5 = *(void *)(a2 + 240);
  *(void *)(a2 + 240) = 0;
  *(void *)(a1 + 240) = v5;
  uint64_t v6 = *(void *)(a2 + 248);
  *(void *)(a2 + 248) = 0;
  *(void *)(a1 + 248) = v6;
  uint64_t v7 = *(void *)(a2 + 256);
  *(void *)(a2 + 256) = 0;
  *(void *)(a1 + 256) = v7;
  uint64_t v8 = *(void *)(a2 + 264);
  *(void *)(a2 + 264) = 0;
  *(void *)(a1 + 264) = v8;
  uint64_t v9 = *(void *)(a2 + 272);
  *(void *)(a2 + 272) = 0;
  *(void *)(a1 + 272) = v9;
  uint64_t v10 = *(void *)(a2 + 280);
  *(void *)(a2 + 280) = 0;
  *(void *)(a1 + 280) = v10;
  uint64_t v11 = *(void *)(a2 + 288);
  *(void *)(a2 + 288) = 0;
  *(void *)(a1 + 288) = v11;
  uint64_t v12 = *(void *)(a2 + 296);
  *(void *)(a2 + 296) = 0;
  *(void *)(a1 + 296) = v12;
  uint64_t v13 = *(void *)(a2 + 304);
  *(void *)(a2 + 304) = 0;
  *(void *)(a1 + 304) = v13;
  uint64_t v14 = *(void *)(a2 + 312);
  *(void *)(a2 + 312) = 0;
  *(void *)(a1 + 312) = v14;
  uint64_t v15 = *(void *)(a2 + 320);
  *(void *)(a2 + 320) = 0;
  *(void *)(a1 + 320) = v15;
  uint64_t v16 = *(void *)(a2 + 328);
  *(void *)(a2 + 328) = 0;
  *(void *)(a1 + 328) = v16;
  uint64_t v17 = *(void *)(a2 + 336);
  *(void *)(a2 + 336) = 0;
  *(void *)(a1 + 336) = v17;
  uint64_t v18 = *(void *)(a2 + 344);
  *(void *)(a2 + 344) = 0;
  *(void *)(a1 + 344) = v18;
  uint64_t v19 = *(void *)(a2 + 352);
  *(void *)(a2 + 352) = 0;
  *(void *)(a1 + 352) = v19;
  uint64_t v20 = *(void *)(a2 + 360);
  *(void *)(a2 + 360) = 0;
  *(void *)(a1 + 360) = v20;
  uint64_t v21 = *(void *)(a2 + 368);
  *(void *)(a2 + 368) = 0;
  *(void *)(a1 + 368) = v21;
  uint64_t v22 = *(void *)(a2 + 376);
  *(void *)(a2 + 376) = 0;
  *(void *)(a1 + 376) = v22;
  uint64_t v23 = *(void *)(a2 + 384);
  *(void *)(a2 + 384) = 0;
  *(void *)(a1 + 384) = v23;
  uint64_t v24 = *(void *)(a2 + 392);
  *(void *)(a2 + 392) = 0;
  *(void *)(a1 + 392) = v24;
  uint64_t v25 = *(void *)(a2 + 400);
  *(void *)(a2 + 400) = 0;
  *(void *)(a1 + 400) = v25;
  uint64_t v26 = *(void *)(a2 + 408);
  *(void *)(a2 + 408) = 0;
  *(void *)(a1 + 408) = v26;
  uint64_t v27 = *(void *)(a2 + 416);
  *(void *)(a2 + 416) = 0;
  *(void *)(a1 + 416) = v27;
  uint64_t v28 = *(void *)(a2 + 424);
  *(void *)(a2 + 424) = 0;
  *(void *)(a1 + 424) = v28;
  uint64_t v29 = *(void *)(a2 + 432);
  *(void *)(a2 + 432) = 0;
  *(void *)(a1 + 432) = v29;
  uint64_t v30 = *(void *)(a2 + 440);
  *(void *)(a2 + 440) = 0;
  *(void *)(a1 + 440) = v30;
  uint64_t v31 = *(void *)(a2 + 448);
  *(void *)(a2 + 448) = 0;
  *(void *)(a1 + 448) = v31;
  uint64_t v32 = *(void *)(a2 + 456);
  *(void *)(a2 + 456) = 0;
  *(void *)(a1 + 456) = v32;
  uint64_t v33 = *(void *)(a2 + 464);
  *(void *)(a2 + 464) = 0;
  *(void *)(a1 + 464) = v33;
  uint64_t v34 = *(void *)(a2 + 472);
  *(void *)(a2 + 472) = 0;
  *(void *)(a1 + 472) = v34;
  uint64_t v35 = *(void *)(a2 + 480);
  *(void *)(a2 + 480) = 0;
  *(void *)(a1 + 480) = v35;
  uint64_t v36 = *(void *)(a2 + 488);
  *(void *)(a2 + 488) = 0;
  *(void *)(a1 + 488) = v36;
  long long v37 = *(_OWORD *)(a2 + 496);
  *(void *)(a2 + 496) = 0;
  *(_OWORD *)(a1 + 496) = v37;
  *(void *)(a1 + 512) = *(void *)(a2 + 512);
  *(_OWORD *)(a2 + 504) = 0u;
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  *(_OWORD *)(a2 + 520) = 0u;
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  *(_OWORD *)(a2 + 536) = 0u;
  uint64_t v38 = *(void *)(a2 + 552);
  *(void *)(a2 + 552) = 0;
  *(void *)(a1 + 552) = v38;
  sub_37D548(a1 + 560, a2 + 560);
  *(void *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 760) = 0u;
  *(void *)(a1 + 760) = *(void *)(a2 + 760);
  *(void *)(a1 + 768) = *(void *)(a2 + 768);
  *(void *)(a1 + 776) = *(void *)(a2 + 776);
  *(void *)(a2 + 776) = 0;
  *(_OWORD *)(a2 + 760) = 0u;
  *(_OWORD *)(a1 + 784) = *(_OWORD *)(a2 + 784);
  *(_OWORD *)(a2 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = *(_OWORD *)(a2 + 800);
  *(_OWORD *)(a2 + 800) = 0u;
  long long v39 = *(_OWORD *)(a2 + 816);
  *(void *)(a2 + 816) = 0;
  *(_OWORD *)(a1 + 816) = v39;
  *(void *)(a1 + 832) = *(void *)(a2 + 832);
  *(_OWORD *)(a2 + 824) = 0u;
  *(void *)(a1 + 840) = *(void *)(a2 + 840);
  *(void *)(a1 + 848) = *(void *)(a2 + 848);
  *(_OWORD *)(a2 + 840) = 0u;
  uint64_t v40 = *(void *)(a2 + 856);
  *(void *)(a1 + 862) = *(void *)(a2 + 862);
  *(void *)(a1 + 856) = v40;
  return a1;
}

void sub_373FC4(_Unwind_Exception *a1)
{
  sub_14A84(v3);
  sub_14A84(v2);
  sub_14A84(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_373FEC(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v4;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    long long v8 = a2[1];
    *((void *)a2 + 2) = 0;
    *((void *)a2 + 3) = 0;
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 24);
    *(_OWORD *)(a1 + 16) = v8;
    if (!v7) {
      goto LABEL_7;
    }
  }
  else
  {
    long long v6 = a2[1];
    *((void *)a2 + 2) = 0;
    *((void *)a2 + 3) = 0;
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 24);
    *(_OWORD *)(a1 + 16) = v6;
    if (!v7) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_7:
  long long v9 = a2[2];
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v9;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    long long v13 = a2[3];
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 7) = 0;
    uint64_t v12 = *(std::__shared_weak_count **)(a1 + 56);
    *(_OWORD *)(a1 + 48) = v13;
    if (!v12) {
      goto LABEL_13;
    }
  }
  else
  {
    long long v11 = a2[3];
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 7) = 0;
    uint64_t v12 = *(std::__shared_weak_count **)(a1 + 56);
    *(_OWORD *)(a1 + 48) = v11;
    if (!v12) {
      goto LABEL_13;
    }
  }
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_13:
  long long v14 = a2[4];
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 72);
  *(_OWORD *)(a1 + 64) = v14;
  if (!v15 || atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void **sub_374204(void **a1, void *a2)
{
  uint64_t v3 = (void *)*a2;
  *a2 = 0;
  long long v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    sub_32834C(v4);
    operator delete();
  }
  return a1;
}

uint64_t *sub_374254(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *result;
  *BOOL result = v2;
  if (v3)
  {
    long long v4 = *(std::__shared_weak_count **)(v3 + 8);
    if (v4)
    {
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_3742F4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *result;
  *BOOL result = v2;
  if (v3)
  {
    long long v4 = *(std::__shared_weak_count **)(v3 + 3880);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = *(std::__shared_weak_count **)(v3 + 8);
    if (v5)
    {
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    operator delete();
  }
  return result;
}

void **sub_3743DC(void **a1, void *a2)
{
  uint64_t v3 = (void *)*a2;
  *a2 = 0;
  long long v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    sub_37E29C(v4);
    operator delete();
  }
  return a1;
}

uint64_t *sub_37442C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *result;
  *BOOL result = v2;
  if (v3)
  {
    long long v4 = *(std::__shared_weak_count **)(v3 + 3880);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = *(std::__shared_weak_count **)(v3 + 8);
    if (v5)
    {
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_374514(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *result;
  *BOOL result = v2;
  if (v3)
  {
    long long v4 = *(std::__shared_weak_count **)(v3 + 8);
    if (v4)
    {
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_3745B4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *result;
  *BOOL result = v2;
  if (v3)
  {
    long long v4 = *(std::__shared_weak_count **)(v3 + 16);
    if (v4)
    {
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_374654(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *result;
  *BOOL result = v2;
  if (v3)
  {
    long long v4 = *(std::__shared_weak_count **)(v3 + 8);
    if (v4)
    {
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_3746F4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *result;
  *BOOL result = v2;
  if (v3)
  {
    long long v4 = *(std::__shared_weak_count **)(v3 + 8);
    if (v4)
    {
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_374794(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *result;
  *BOOL result = v2;
  if (v3)
  {
    long long v4 = *(std::__shared_weak_count **)(v3 + 24);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = *(std::__shared_weak_count **)(v3 + 8);
    if (v5)
    {
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    operator delete();
  }
  return result;
}

void *sub_37487C(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = (void *)*result;
  *BOOL result = v2;
  if (v3)
  {
    long long v4 = (void *)v3[3];
    if (v4)
    {
      void v3[4] = v4;
      operator delete(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)v3[1];
    if (v5)
    {
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_37492C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *result;
  *BOOL result = v2;
  if (v3)
  {
    long long v4 = *(std::__shared_weak_count **)(v3 + 8);
    if (v4)
    {
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_3749CC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *result;
  *BOOL result = v2;
  if (v3)
  {
    long long v4 = *(std::__shared_weak_count **)(v3 + 8);
    if (v4)
    {
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_374A6C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *result;
  *BOOL result = v2;
  if (v3)
  {
    long long v4 = *(std::__shared_weak_count **)(v3 + 24);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = *(std::__shared_weak_count **)(v3 + 8);
    if (v5)
    {
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_374B54(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *result;
  *BOOL result = v2;
  if (v3)
  {
    long long v4 = *(std::__shared_weak_count **)(v3 + 8);
    if (v4)
    {
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_374BF4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *result;
  *BOOL result = v2;
  if (v3)
  {
    long long v4 = *(std::__shared_weak_count **)(v3 + 3880);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = *(std::__shared_weak_count **)(v3 + 8);
    if (v5)
    {
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_374CDC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_4A3B30((uint64_t *)(a1 + 560), a2, a3);
}

uint64_t sub_374CE4(void *a1)
{
  return nullsub_1(*a1);
}

uint64_t sub_374CEC(void *a1)
{
  uint64_t v1 = sub_374D14(a1);

  return sub_299C38(v1);
}

uint64_t sub_374D14(void *a1)
{
  uint64_t result = a1[49];
  if (!result)
  {
    nullsub_1(*a1);
    sub_5E5C(__p, "Traffic");
    memset(v3, 0, sizeof(v3));
    sub_4A3B30(a1 + 70, (uint64_t)__p, v3);
    sub_376284();
  }
  return result;
}

void sub_374DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_374DF4(uint64_t a1)
{
  return a1 + 152;
}

uint64_t sub_374DFC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = a1[63];
  if (v3) {
    return sub_F06524(v3, a2);
  }
  else {
    return sub_3932A0(*a1, a2);
  }
}

uint64_t sub_374E14(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = a1[65];
  if (v3) {
    return sub_F092BC(v3, a2);
  }
  else {
    return sub_393510(*a1, a2);
  }
}

uint64_t sub_374E2C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = a1[67];
  if (v3) {
    return sub_F0BF98(v3, a2);
  }
  else {
    return sub_393780(*a1, a2);
  }
}

uint64_t sub_374E44(uint64_t *a1)
{
  if (a1[63]) {
    return a1[63];
  }
  else {
    return sub_3932D8(*a1);
  }
}

uint64_t sub_374E5C(uint64_t *a1)
{
  if (a1[65]) {
    return a1[65];
  }
  else {
    return sub_393548(*a1);
  }
}

uint64_t sub_374E74(uint64_t *a1)
{
  if (a1[67]) {
    return a1[67];
  }
  else {
    return sub_3937B8(*a1);
  }
}

uint64_t sub_374E8C(uint64_t *a1)
{
  return sub_393A78(*a1);
}

uint64_t sub_374E94(uint64_t *a1)
{
  if (a1[100]) {
    return a1[100];
  }
  else {
    return sub_393A88(*a1);
  }
}

uint64_t sub_374EAC(uint64_t *a1)
{
  return sub_393A98(*a1);
}

uint64_t sub_374EB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
    return v1 + 592;
  }
  else {
    return a1 + 48;
  }
}

uint64_t sub_374ECC(uint64_t *a1)
{
  return sub_393A70(*a1);
}

uint64_t sub_374ED4(uint64_t *a1)
{
  if (a1[98]) {
    return a1[98];
  }
  else {
    return sub_393A80(*a1);
  }
}

uint64_t sub_374EEC(uint64_t *a1)
{
  return sub_393A90(*a1);
}

uint64_t sub_374EF4(uint64_t *a1)
{
  return sub_393A68(*a1);
}

BOOL sub_374EFC(uint64_t *a1)
{
  if (!sub_393298(*a1)) {
    return 1;
  }
  uint64_t v2 = (uint64_t *)sub_393298(*a1);
  long long __p = operator new(0x30uLL);
  long long v6 = xmmword_20B93E0;
  strcpy((char *)__p, "debug.enable_requests_with_traffic_attached");
  BOOL result = sub_37D6EC(v2, (uint64_t)&__p, 1);
  BOOL v4 = result;
  if (SHIBYTE(v6) < 0)
  {
    operator delete(__p);
    return v4;
  }
  return result;
}

void sub_374FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_374FE0(uint64_t *a1)
{
  return sub_393AA0(*a1);
}

uint64_t *sub_374FE8(uint64_t *a1)
{
  if (a1[105]) {
    return a1 + 105;
  }
  uint64_t v3 = operator new(0x120uLL);
  v3[1] = 0;
  v3[2] = 0;
  *uint64_t v3 = off_2438DA8;
  a1[105] = sub_381B9C((uint64_t)(v3 + 3), a1);
  BOOL v4 = (std::__shared_weak_count *)a1[106];
  a1[106] = (uint64_t)v3;
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1 + 105;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1 + 105;
}

void sub_3750B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_3750CC(void *a1)
{
  uint64_t result = a1[29];
  if (!result)
  {
    nullsub_1(*a1);
    sub_375138();
  }
  return result;
}

void sub_375138()
{
}

void sub_37520C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_375238(void *a1)
{
  uint64_t result = a1[30];
  if (!result)
  {
    nullsub_1(*a1);
    sub_3752A4();
  }
  return result;
}

void sub_3752A4()
{
}

uint64_t sub_375328(void *a1)
{
  uint64_t result = a1[31];
  if (!result)
  {
    nullsub_1(*a1);
    sub_3752A4();
  }
  return result;
}

uint64_t sub_375394(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    nullsub_1(*a1);
    sub_37541C();
  }
  return result;
}

void sub_37541C()
{
}

uint64_t sub_375500(void *a1)
{
  uint64_t result = a1[33];
  if (!result)
  {
    nullsub_1(*a1);
    sub_37556C();
  }
  return result;
}

void sub_37556C()
{
}

void sub_3755C0()
{
}

uint64_t sub_3755E4(void *a1)
{
  uint64_t result = a1[34];
  if (!result)
  {
    nullsub_1(*a1);
    sub_375650();
  }
  return result;
}

void sub_375650()
{
}

void sub_3756A4()
{
}

uint64_t sub_3756C8(void *a1)
{
  uint64_t result = a1[35];
  if (!result)
  {
    nullsub_1(*a1);
    sub_375750();
  }
  return result;
}

void sub_375750()
{
}

void sub_3757A4()
{
}

uint64_t sub_3757C8(void *a1)
{
  uint64_t result = a1[36];
  if (!result)
  {
    nullsub_1(*a1);
    sub_375834();
  }
  return result;
}

void sub_375834()
{
}

void sub_375888()
{
}

uint64_t sub_3758AC(void *a1)
{
  uint64_t result = a1[37];
  if (!result)
  {
    nullsub_1(*a1);
    sub_37591C();
  }
  return result;
}

void sub_37591C()
{
}

void sub_3759F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_375A24(void *a1)
{
  uint64_t result = a1[38];
  if (!result)
  {
    nullsub_1(*a1);
    sub_375AAC();
  }
  return result;
}

void sub_375AAC()
{
}

void sub_375B00()
{
}

uint64_t sub_375B24(void *a1)
{
  uint64_t result = a1[39];
  if (!result)
  {
    nullsub_1(*a1);
    sub_375BA0();
  }
  return result;
}

void sub_375BA0()
{
}

void sub_375C0C()
{
}

uint64_t sub_375C30(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 869);
}

uint64_t sub_375C38(void *a1)
{
  uint64_t result = a1[41];
  if (!result)
  {
    nullsub_1(*a1);
    sub_375CA4();
  }
  return result;
}

void sub_375CA4()
{
}

void sub_375CF8()
{
}

uint64_t sub_375D1C(void *a1)
{
  uint64_t result = a1[42];
  if (!result)
  {
    nullsub_1(*a1);
    sub_375D98();
  }
  return result;
}

void sub_375D98()
{
}

void sub_375E04()
{
}

uint64_t sub_375E28(void *a1)
{
  uint64_t result = a1[44];
  if (!result)
  {
    nullsub_1(*a1);
    sub_3752A4();
  }
  return result;
}

uint64_t sub_375E94(void *a1)
{
  uint64_t result = a1[45];
  if (!result)
  {
    nullsub_1(*a1);
    sub_375F00();
  }
  return result;
}

void sub_375F00()
{
}

void sub_375FA8()
{
  uint64_t v1 = *(void *)(v0 + 8);
  if (v1) {
    sub_20A6F44(v1);
  }
  operator delete();
}

uint64_t sub_375FD8(void *a1)
{
  uint64_t result = a1[46];
  if (!result)
  {
    nullsub_1(*a1);
    sub_376044();
  }
  return result;
}

void sub_376044()
{
}

void sub_376098()
{
}

uint64_t sub_3760BC(void *a1)
{
  uint64_t result = a1[47];
  if (!result)
  {
    nullsub_1(*a1);
    sub_376128();
  }
  return result;
}

void sub_376128()
{
}

void sub_37617C()
{
}

uint64_t sub_3761A0(void *a1)
{
  uint64_t result = a1[48];
  if (!result)
  {
    nullsub_1(*a1);
    sub_37620C();
  }
  return result;
}

void sub_37620C()
{
}

void sub_376260()
{
}

void sub_376284()
{
}

void sub_3763D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_376408(void *a1)
{
  uint64_t result = a1[50];
  if (!result)
  {
    sub_3750CC(a1);
    sub_37648C();
  }
  return result;
}

void sub_37648C()
{
}

void sub_376568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_376594(void *a1)
{
  uint64_t result = a1[51];
  if (!result)
  {
    sub_5E5C(__p, "HSP");
    memset(v3, 0, sizeof(v3));
    sub_4A3B30(a1 + 70, (uint64_t)__p, (uint64_t *)v3);
    sub_1A668(v3);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
    nullsub_1(*a1);
    sub_376678();
  }
  return result;
}

void sub_376654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_376678()
{
}

void sub_3766D4()
{
}

uint64_t sub_3766F8(void *a1)
{
  uint64_t result = a1[53];
  if (!result)
  {
    sub_5E5C(__p, "HSP");
    memset(v4, 0, sizeof(v4));
    uint64_t v3 = sub_4A3B30(a1 + 70, (uint64_t)__p, (uint64_t *)v4);
    sub_1A668(v4);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    nullsub_1(*a1);
    sub_5E5C(__p, "free_flow_branch_id");
    sub_376928(v3, (uint64_t)__p);
    sub_5E5C(v4, "capacity_branch_id");
    sub_376928(v3, (uint64_t)v4);
    sub_376898();
  }
  return result;
}

void sub_376824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if ((a22 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_376898()
{
}

void sub_376904()
{
}

uint64_t sub_376928(void *a1, uint64_t a2)
{
  uint64_t v2 = sub_58070(a1, a2);
  if (!v2 || *((_DWORD *)v2 + 12) != 1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    char v5 = (void *)sub_2F404((uint64_t)exception, &v6);
  }
  return (int)*((double *)v2 + 5);
}

void sub_3769B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3769E8(void *a1)
{
  uint64_t result = a1[54];
  if (!result)
  {
    sub_5E5C(__p, "HSP");
    memset(v4, 0, sizeof(v4));
    uint64_t v3 = sub_4A3B30(a1 + 70, (uint64_t)__p, (uint64_t *)v4);
    sub_1A668(v4);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    nullsub_1(*a1);
    sub_5E5C(__p, "free_flow_cbr_branch_id");
    sub_376928(v3, (uint64_t)__p);
    sub_376B0C();
  }
  return result;
}

void sub_376AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_376B0C()
{
}

void sub_376B6C()
{
}

uint64_t sub_376B90(void *a1)
{
  uint64_t result = a1[52];
  if (!result)
  {
    sub_5E5C(__p, "Pathlets");
    memset(v4, 0, sizeof(v4));
    uint64_t v3 = sub_4A3B30(a1 + 70, (uint64_t)__p, (uint64_t *)v4);
    sub_1A668(v4);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    nullsub_1(*a1);
    sub_5E5C(__p, "branch_id");
    sub_31AB44(v3, (uint64_t)__p);
    sub_376CBC();
  }
  return result;
}

void sub_376C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_376CBC()
{
}

void sub_376D18()
{
}

uint64_t sub_376D3C(void *a1)
{
  uint64_t result = a1[55];
  if (!result)
  {
    nullsub_1(*a1);
    sub_376DA8();
  }
  return result;
}

void sub_376DA8()
{
}

uint64_t sub_376E8C(void *a1)
{
  uint64_t result = a1[56];
  if (!result)
  {
    nullsub_1(*a1);
    sub_376EF8();
  }
  return result;
}

void sub_376EF8()
{
}

uint64_t sub_376F8C(void *a1)
{
  uint64_t result = a1[57];
  if (!result)
  {
    sub_5E5C(__p, "LiveEVChargingStationFacade");
    memset(v3, 0, sizeof(v3));
    sub_4A3B30(a1 + 70, (uint64_t)__p, v3);
    nullsub_1(*a1);
    sub_377088();
  }
  return result;
}

void sub_377064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_377088()
{
}

void sub_377178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_3771A4(void *a1)
{
  uint64_t result = a1[58];
  if (!result)
  {
    nullsub_1(*a1);
    sub_377210();
  }
  return result;
}

void sub_377210()
{
}

void sub_3772E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_377310(void *a1)
{
  uint64_t result = a1[43];
  if (!result)
  {
    nullsub_1(*a1);
    sub_37737C();
  }
  return result;
}

void sub_37737C()
{
}

void sub_37743C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1) {
    sub_20A6F44(v1);
  }
  operator delete();
}

uint64_t sub_37746C(void *a1)
{
  uint64_t result = a1[59];
  if (!result)
  {
    nullsub_1(*a1);
    sub_3774D8();
  }
  return result;
}

void sub_3774D8()
{
}

uint64_t sub_3775DC(void *a1)
{
  uint64_t result = a1[60];
  if (!result)
  {
    nullsub_1(*a1);
    sub_376DA8();
  }
  return result;
}

uint64_t sub_377648(void *a1)
{
  uint64_t result = a1[61];
  if (!result)
  {
    nullsub_1(*a1);
    sub_3776B4();
  }
  return result;
}

void sub_3776B4()
{
}

uint64_t sub_377754(void *a1)
{
  uint64_t result = a1[62];
  if (!result)
  {
    nullsub_1(*a1);
    sub_376EF8();
  }
  return result;
}

uint64_t sub_3777C0(void *a1)
{
  uint64_t result = a1[69];
  if (!result)
  {
    HIBYTE(v9[2]) = 16;
    strcpy((char *)v9, "RegionClassifier");
    long long __p = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    sub_4A3B30(a1 + 70, (uint64_t)v9, (uint64_t *)&__p);
    uint64_t v3 = (void **)__p;
    if (__p)
    {
      BOOL v4 = v7;
      char v5 = __p;
      if (v7 != __p)
      {
        do
        {
          if (*((char *)v4 - 1) < 0) {
            operator delete(*(v4 - 3));
          }
          v4 -= 3;
        }
        while (v4 != v3);
        char v5 = __p;
      }
      uint64_t v7 = v3;
      operator delete(v5);
    }
    if (SHIBYTE(v9[2]) < 0) {
      operator delete(v9[0]);
    }
    nullsub_1(*a1);
    sub_377928();
  }
  return result;
}

void sub_377904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_377928()
{
}

void sub_377A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_377A30(uint64_t a1, char **a2)
{
  unint64_t v2 = (unint64_t)a2[1];
  if (v2 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  BOOL v4 = *a2;
  if (v2 >= 0x17)
  {
    uint64_t v6 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17) {
      uint64_t v6 = v2 | 7;
    }
    uint64_t v7 = v6 + 1;
    char v5 = (void **)operator new(v6 + 1);
    unint64_t v29 = v2;
    int64_t v30 = v7 | 0x8000000000000000;
    __s2 = v5;
    if (v2 >= 0x20 && (unint64_t)((char *)v5 - v4) >= 0x20)
    {
      uint64_t v8 = &v4[v2 & 0xFFFFFFFFFFFFFFE0];
      long long v9 = (char *)v5 + (v2 & 0xFFFFFFFFFFFFFFE0);
      uint64_t v10 = v5 + 2;
      long long v11 = (long long *)(v4 + 16);
      unint64_t v12 = v2 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v13 = *v11;
        *(v10 - 1) = *(v11 - 1);
        *uint64_t v10 = v13;
        v10 += 2;
        v11 += 2;
        v12 -= 32;
      }
      while (v12);
      if (v2 == (v2 & 0x7FFFFFFFFFFFFFE0)) {
        goto LABEL_15;
      }
      goto LABEL_14;
    }
LABEL_13:
    uint64_t v8 = v4;
    long long v9 = v5;
    do
    {
LABEL_14:
      char v14 = *v8++;
      *v9++ = v14;
    }
    while (v8 != &v4[v2]);
LABEL_15:
    *long long v9 = 0;
    if (v30 >= 0) {
      p_s2 = (void **)&__s2;
    }
    else {
      p_s2 = __s2;
    }
    do
    {
      *(unsigned char *)p_s2 = __tolower(*v4);
      p_s2 = (void **)((char *)p_s2 + 1);
      ++v4;
      --v2;
    }
    while (v2);
    if (atomic_load_explicit((atomic_uchar *volatile)&qword_25574D0, memory_order_acquire)) {
      goto LABEL_20;
    }
    goto LABEL_56;
  }
  HIBYTE(v30) = a2[1];
  if (v2)
  {
    char v5 = (void **)&__s2;
    goto LABEL_13;
  }
  LOBYTE(__s2) = 0;
  if (atomic_load_explicit((atomic_uchar *volatile)&qword_25574D0, memory_order_acquire)) {
    goto LABEL_20;
  }
LABEL_56:
  if (__cxa_guard_acquire(&qword_25574D0))
  {
    qword_2557520 = 0;
    unk_2557528 = 0;
    qword_2557530 = 0;
    __cxa_guard_release(&qword_25574D0);
  }
LABEL_20:
  uint64_t v16 = *(void *)(a1 + 760);
  uint64_t v17 = *(void *)(a1 + 768);
  int v18 = SHIBYTE(v30);
  if (v16 == v17)
  {
LABEL_50:
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
  if (v30 >= 0) {
    unint64_t v19 = HIBYTE(v30);
  }
  else {
    unint64_t v19 = v29;
  }
  if ((SHIBYTE(v30) & 0x80000000) == 0)
  {
    while (1)
    {
      uint64_t v20 = *(unsigned __int8 *)(v16 + 23);
      if ((v20 & 0x80u) == 0) {
        uint64_t v21 = *(unsigned __int8 *)(v16 + 23);
      }
      else {
        uint64_t v21 = *(void *)(v16 + 8);
      }
      if (v21 == v19)
      {
        if ((v20 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v16, &__s2, *(void *)(v16 + 8))) {
            goto LABEL_50;
          }
        }
        else
        {
          if (!*(unsigned char *)(v16 + 23)) {
            goto LABEL_50;
          }
          uint64_t v22 = 0;
          while (*(unsigned __int8 *)(v16 + v22) == *((unsigned __int8 *)&__s2 + v22))
          {
            if (v20 == ++v22) {
              goto LABEL_50;
            }
          }
        }
      }
      v16 += 48;
      if (v16 == v17) {
        goto LABEL_58;
      }
    }
  }
  uint64_t v23 = __s2;
  do
  {
    uint64_t v24 = *(unsigned __int8 *)(v16 + 23);
    if ((v24 & 0x80u) == 0) {
      uint64_t v25 = *(unsigned __int8 *)(v16 + 23);
    }
    else {
      uint64_t v25 = *(void *)(v16 + 8);
    }
    if (v25 == v19)
    {
      if ((v24 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v16, v23, *(void *)(v16 + 8))) {
          goto LABEL_50;
        }
      }
      else
      {
        if (!*(unsigned char *)(v16 + 23)) {
          goto LABEL_50;
        }
        uint64_t v26 = 0;
        while (*(unsigned __int8 *)(v16 + v26) == *((unsigned __int8 *)v23 + v26))
        {
          if (v24 == ++v26) {
            goto LABEL_50;
          }
        }
      }
    }
    v16 += 48;
  }
  while (v16 != v17);
LABEL_58:
  uint64_t v16 = v17;
  if (v18 < 0) {
LABEL_51:
  }
    operator delete(__s2);
LABEL_52:
  if (v16 == v17) {
    return &qword_2557520;
  }
  else {
    return (uint64_t *)(v16 + 24);
  }
}

void sub_377CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_377D04(uint64_t a1)
{
  return *(void *)(a1 + 16) + 24;
}

void sub_377D10(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "RoutingDataContext");
  uint64_t v4 = sub_393A78(*a1);
  sub_37A300(v4, (uint64_t)&v439);
  uint64_t v5 = sub_393A88(*a1);
  sub_37A300(v5, (uint64_t)&v437);
  uint64_t v6 = sub_393A98(*a1);
  sub_37A300(v6, (uint64_t)&v435);
  uint64_t v7 = sub_393A70(*a1);
  v426 = a1;
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = *(void *)(v7 + 24);
  if (v8 == v9)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      std::mutex::lock((std::mutex *)(v8 + 24));
      uint64_t v12 = *(void *)(v8 + 184);
      uint64_t v13 = *(void *)(v8 + 192);
      std::mutex::unlock((std::mutex *)(v8 + 24));
      v11 += v12;
      v10 += v13;
      v8 += 272;
    }
    while (v8 != v9);
  }
  uint64_t v14 = sub_393A80(*v426);
  uint64_t v15 = *(void *)(v14 + 16);
  uint64_t v16 = *(void *)(v14 + 24);
  if (v15 == v16)
  {
    uint64_t v17 = 0;
    unint64_t v18 = 0;
  }
  else
  {
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    do
    {
      std::mutex::lock((std::mutex *)(v15 + 24));
      uint64_t v19 = *(void *)(v15 + 184);
      uint64_t v20 = *(void *)(v15 + 192);
      std::mutex::unlock((std::mutex *)(v15 + 24));
      v18 += v19;
      v17 += v20;
      v15 += 272;
    }
    while (v15 != v16);
  }
  uint64_t v21 = sub_393A90(*v426);
  uint64_t v424 = v17;
  unint64_t v425 = v18;
  uint64_t v22 = *(void *)(v21 + 16);
  uint64_t v23 = *(void *)(v21 + 24);
  if (v22 != v23)
  {
    uint64_t v24 = 0;
    unint64_t v25 = 0;
    do
    {
      std::mutex::lock((std::mutex *)(v22 + 24));
      uint64_t v26 = *(void *)(v22 + 184);
      uint64_t v27 = *(void *)(v22 + 192);
      std::mutex::unlock((std::mutex *)(v22 + 24));
      v25 += v26;
      v24 += v27;
      v22 += 272;
    }
    while (v22 != v23);
    v432.__r_.__value_.__s.__data_[0] = 5;
    unint64_t v29 = v439;
    uint64_t v28 = v440;
    if (v439 != v440) {
      goto LABEL_15;
    }
LABEL_18:
    unsigned int v31 = 0;
    int v33 = 0;
    goto LABEL_33;
  }
  uint64_t v24 = 0;
  unint64_t v25 = 0;
  v432.__r_.__value_.__s.__data_[0] = 5;
  unint64_t v29 = v439;
  uint64_t v28 = v440;
  if (v439 == v440) {
    goto LABEL_18;
  }
LABEL_15:
  unint64_t v30 = v28 - v29 - 24;
  if (v30 >= 0xC0)
  {
    unint64_t v34 = v30 / 0x18 + 1;
    uint64_t v35 = v34 & 7;
    if ((v34 & 7) == 0) {
      uint64_t v35 = 8;
    }
    unint64_t v36 = v34 - v35;
    uint64_t v32 = &v29[24 * v36];
    long long v37 = (const double *)(v29 + 104);
    int32x4_t v38 = 0uLL;
    int32x4_t v39 = 0uLL;
    do
    {
      uint64_t v40 = v37 - 12;
      unsigned long long v41 = (unsigned __int128)vld3q_f64(v40);
      uint64_t v42 = v37 - 6;
      unsigned long long v43 = (unsigned __int128)vld3q_f64(v42);
      uint64_t v44 = v37 + 24;
      unsigned long long v46 = (unsigned __int128)vld3q_f64(v37);
      uint64_t v45 = v37 + 6;
      unsigned long long v47 = (unsigned __int128)vld3q_f64(v45);
      int32x4_t v38 = vaddq_s32(v38, vuzp1q_s32((int32x4_t)v41, (int32x4_t)v43));
      int32x4_t v39 = vaddq_s32(v39, vuzp1q_s32((int32x4_t)v46, (int32x4_t)v47));
      long long v37 = v44;
      v36 -= 8;
    }
    while (v36);
    unsigned int v31 = vaddvq_s32(vaddq_s32(v39, v38));
  }
  else
  {
    unsigned int v31 = 0;
    uint64_t v32 = v29;
  }
  do
  {
    v31 += *((_DWORD *)v32 + 2);
    v32 += 24;
  }
  while (v32 != v28);
  if (v30 >= 0xC0)
  {
    unint64_t v48 = v30 / 0x18 + 1;
    uint64_t v49 = v48 & 7;
    if ((v48 & 7) == 0) {
      uint64_t v49 = 8;
    }
    unint64_t v50 = v48 - v49;
    uint64_t v51 = &v29[24 * v50];
    __darwin_ct_rune_t v52 = (const double *)(v29 + 112);
    int32x4_t v53 = 0uLL;
    int32x4_t v54 = 0uLL;
    do
    {
      uint64_t v55 = v52 - 12;
      unsigned long long v56 = (unsigned __int128)vld3q_f64(v55);
      uint64_t v57 = v52 - 6;
      unsigned long long v58 = (unsigned __int128)vld3q_f64(v57);
      std::string v59 = v52 + 24;
      unsigned long long v61 = (unsigned __int128)vld3q_f64(v52);
      uint64_t v60 = v52 + 6;
      unsigned long long v62 = (unsigned __int128)vld3q_f64(v60);
      int32x4_t v53 = vaddq_s32(v53, vuzp1q_s32((int32x4_t)v56, (int32x4_t)v58));
      int32x4_t v54 = vaddq_s32(v54, vuzp1q_s32((int32x4_t)v61, (int32x4_t)v62));
      __darwin_ct_rune_t v52 = v59;
      v50 -= 8;
    }
    while (v50);
    int v33 = vaddvq_s32(vaddq_s32(v54, v53));
    unint64_t v29 = v51;
  }
  else
  {
    int v33 = 0;
  }
  do
  {
    v33 += *((_DWORD *)v29 + 4);
    v29 += 24;
  }
  while (v29 != v28);
LABEL_33:
  uint64_t v422 = v24;
  unint64_t v423 = v25;
  if (v33 + v31) {
    uint64_t v63 = (void *)vcvtad_u64_f64((double)v31 * 1000.0 / (double)(v33 + v31));
  }
  else {
    uint64_t v63 = &stru_3D8 + 16;
  }
  uint64_t v64 = v426;
  v433[0] = v63;
  uint64_t v65 = (unint64_t *)(a2 + 40);
  char v67 = (uint64_t *)(a2 + 32);
  unint64_t v66 = *(void *)(a2 + 32);
  if (v66 >= *(void *)(a2 + 40))
  {
    uint64_t v68 = sub_3846A4((uint64_t *)(a2 + 24), "CyclingShortcutCache.Hitrate", (char *)&v432, (uint64_t *)v433);
  }
  else
  {
    sub_384874(a2 + 40, *(void *)(a2 + 32), "CyclingShortcutCache.Hitrate", (char *)&v432, (uint64_t *)v433);
    uint64_t v68 = v66 + 48;
    *char v67 = v66 + 48;
  }
  *char v67 = v68;
  v432.__r_.__value_.__s.__data_[0] = 2;
  uint64_t v69 = sub_393A78(*v426);
  uint64_t v71 = *(void *)(v69 + 16);
  uint64_t v70 = *(void *)(v69 + 24);
  if (v71 == v70)
  {
    uint64_t v73 = 0;
  }
  else
  {
    unint64_t v72 = v70 - v71 - 272;
    if (v72 >= 0x110)
    {
      uint64_t v75 = 0;
      uint64_t v76 = 0;
      unint64_t v77 = v72 / 0x110 + 1;
      uint64_t v74 = v71 + 272 * (v77 & 0x1FFFFFFFFFFFFFELL);
      uint64_t v78 = v77 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v75 += *(void *)(v71 + 160);
        v76 += *(void *)(v71 + 432);
        v71 += 544;
        v78 -= 2;
      }
      while (v78);
      uint64_t v73 = (char *)(v76 + v75);
      if (v77 == (v77 & 0x1FFFFFFFFFFFFFELL)) {
        goto LABEL_47;
      }
    }
    else
    {
      uint64_t v73 = 0;
      uint64_t v74 = *(void *)(v69 + 16);
    }
    do
    {
      v73 += *(void *)(v74 + 160);
      v74 += 272;
    }
    while (v74 != v70);
  }
LABEL_47:
  v433[0] = v73;
  uint64_t v79 = *v67;
  if (*v67 >= *v65)
  {
    uint64_t v80 = sub_3849E0((uint64_t *)(a2 + 24), "CyclingShortcutCache.CurrentSize", (char *)&v432, (uint64_t *)v433);
  }
  else
  {
    sub_384BB0(a2 + 40, *v67, "CyclingShortcutCache.CurrentSize", (char *)&v432, (uint64_t *)v433);
    uint64_t v80 = v79 + 48;
    *char v67 = v79 + 48;
  }
  *char v67 = v80;
  v432.__r_.__value_.__s.__data_[0] = 5;
  uint64_t v81 = (void *)sub_393A78(*v426);
  uint64_t v82 = (void *)v81[1];
  if (v82)
  {
    uint64_t v84 = v81[2];
    uint64_t v83 = v81[3];
    if (v84 == v83)
    {
      double v88 = 0.0;
      goto LABEL_65;
    }
    unint64_t v85 = v83 - v84 - 272;
    if (v85 >= 0x110)
    {
      uint64_t v89 = 0;
      uint64_t v90 = 0;
      unint64_t v91 = v85 / 0x110 + 1;
      uint64_t v87 = v84 + 272 * (v91 & 0x1FFFFFFFFFFFFFELL);
      uint64_t v92 = v91 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v89 += *(void *)(v84 + 160);
        v90 += *(void *)(v84 + 432);
        v84 += 544;
        v92 -= 2;
      }
      while (v92);
      unint64_t v86 = v90 + v89;
      if (v91 == (v91 & 0x1FFFFFFFFFFFFFELL)) {
        goto LABEL_59;
      }
    }
    else
    {
      unint64_t v86 = 0;
      uint64_t v87 = v81[2];
    }
    do
    {
      v86 += *(void *)(v87 + 160);
      v87 += 272;
    }
    while (v87 != v83);
LABEL_59:
    double v88 = (double)v86 * 1000.0;
    if (v88 < 0.0)
    {
      if (v88 > -4.50359963e15)
      {
        uint64_t v93 = (uint64_t)(v88 + v88);
        if (v93 >= 1) {
          --v93;
        }
        goto LABEL_66;
      }
LABEL_67:
      uint64_t v82 = (void *)vcvtad_u64_f64((double)(unint64_t)v88 / (double)(unint64_t)v82);
      goto LABEL_68;
    }
    if (v88 >= 4.50359963e15) {
      goto LABEL_67;
    }
LABEL_65:
    uint64_t v93 = (uint64_t)(v88 + v88) + 1;
LABEL_66:
    double v88 = (double)(v93 >> 1);
    goto LABEL_67;
  }
LABEL_68:
  v433[0] = v82;
  uint64_t v94 = *v67;
  if (*v67 >= *v65)
  {
    uint64_t v95 = sub_384D1C((uint64_t *)(a2 + 24), "CyclingShortcutCache.CurrentSize", (char *)&v432, (uint64_t *)v433);
  }
  else
  {
    sub_384EEC(a2 + 40, *v67, "CyclingShortcutCache.CurrentSize", (char *)&v432, (uint64_t *)v433);
    uint64_t v95 = v94 + 48;
    *char v67 = v94 + 48;
  }
  *char v67 = v95;
  v432.__r_.__value_.__s.__data_[0] = 2;
  uint64_t v96 = sub_393A78(*v426);
  uint64_t v97 = *(void *)(v96 + 16);
  uint64_t v98 = *(void *)(v96 + 24);
  if (v97 == v98)
  {
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v99 = 0;
  }
  else
  {
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v99 = 0;
    do
    {
      uint64_t v101 = *(void **)(v97 + 200);
      if (v101)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v102 = (void *)v101[5];
        if (v102)
        {
          uint64_t v100 = 0;
          do
          {
            v100 += v102[2];
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v102 = (void *)*v102;
          }
          while (v102);
        }
        else
        {
          uint64_t v100 = 0;
        }
        uint64_t v101 = (void *)(v100 + *v101 * v101[4]);
      }
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v99 = &v99[(void)v101];
      v97 += 272;
    }
    while (v97 != v98);
  }
  v433[0] = v99;
  uint64_t v103 = *v67;
  if (*v67 >= *v65)
  {
    unint64_t v104 = sub_385058((uint64_t *)(a2 + 24), "CyclingShortcutCache.ArenaAllocatedSize", (char *)&v432, (uint64_t *)v433);
    *char v67 = v104;
    v432.__r_.__value_.__s.__data_[0] = 5;
    std::chrono::system_clock::time_point v106 = v437;
    unsigned __int8 v105 = v438;
    if (v437 != v438) {
      goto LABEL_84;
    }
LABEL_87:
    unsigned int v108 = 0;
    int v110 = 0;
    goto LABEL_102;
  }
  sub_385228(a2 + 40, *v67, "CyclingShortcutCache.ArenaAllocatedSize", (char *)&v432, (uint64_t *)v433);
  unint64_t v104 = v103 + 48;
  *char v67 = v104;
  *char v67 = v104;
  v432.__r_.__value_.__s.__data_[0] = 5;
  std::chrono::system_clock::time_point v106 = v437;
  unsigned __int8 v105 = v438;
  if (v437 == v438) {
    goto LABEL_87;
  }
LABEL_84:
  unint64_t v107 = v105 - v106 - 24;
  if (v107 >= 0xC0)
  {
    unint64_t v111 = v107 / 0x18 + 1;
    uint64_t v112 = v111 & 7;
    if ((v111 & 7) == 0) {
      uint64_t v112 = 8;
    }
    unint64_t v113 = v111 - v112;
    unint64_t v109 = &v106[24 * v113];
    __darwin_ct_rune_t v114 = (const double *)(v106 + 104);
    int32x4_t v115 = 0uLL;
    int32x4_t v116 = 0uLL;
    do
    {
      unint64_t v117 = v114 - 12;
      unsigned long long v118 = (unsigned __int128)vld3q_f64(v117);
      uint64_t v119 = v114 - 6;
      unsigned long long v120 = (unsigned __int128)vld3q_f64(v119);
      int64_t v121 = v114 + 24;
      unsigned long long v123 = (unsigned __int128)vld3q_f64(v114);
      uint64_t v122 = v114 + 6;
      unsigned long long v124 = (unsigned __int128)vld3q_f64(v122);
      int32x4_t v115 = vaddq_s32(v115, vuzp1q_s32((int32x4_t)v118, (int32x4_t)v120));
      int32x4_t v116 = vaddq_s32(v116, vuzp1q_s32((int32x4_t)v123, (int32x4_t)v124));
      __darwin_ct_rune_t v114 = v121;
      v113 -= 8;
    }
    while (v113);
    unsigned int v108 = vaddvq_s32(vaddq_s32(v116, v115));
  }
  else
  {
    unsigned int v108 = 0;
    unint64_t v109 = v106;
  }
  do
  {
    v108 += *((_DWORD *)v109 + 2);
    v109 += 24;
  }
  while (v109 != v105);
  if (v107 >= 0xC0)
  {
    unint64_t v125 = v107 / 0x18 + 1;
    uint64_t v126 = v125 & 7;
    if ((v125 & 7) == 0) {
      uint64_t v126 = 8;
    }
    unint64_t v127 = v125 - v126;
    unint64_t v128 = &v106[24 * v127];
    unsigned int v129 = (const double *)(v106 + 112);
    int32x4_t v130 = 0uLL;
    int32x4_t v131 = 0uLL;
    do
    {
      uint64_t v132 = v129 - 12;
      unsigned long long v133 = (unsigned __int128)vld3q_f64(v132);
      long long v134 = v129 - 6;
      unsigned long long v135 = (unsigned __int128)vld3q_f64(v134);
      uint64_t v136 = v129 + 24;
      unsigned long long v138 = (unsigned __int128)vld3q_f64(v129);
      unint64_t v137 = v129 + 6;
      unsigned long long v139 = (unsigned __int128)vld3q_f64(v137);
      int32x4_t v130 = vaddq_s32(v130, vuzp1q_s32((int32x4_t)v133, (int32x4_t)v135));
      int32x4_t v131 = vaddq_s32(v131, vuzp1q_s32((int32x4_t)v138, (int32x4_t)v139));
      unsigned int v129 = v136;
      v127 -= 8;
    }
    while (v127);
    int v110 = vaddvq_s32(vaddq_s32(v131, v130));
    std::chrono::system_clock::time_point v106 = v128;
  }
  else
  {
    int v110 = 0;
  }
  do
  {
    v110 += *((_DWORD *)v106 + 4);
    v106 += 24;
  }
  while (v106 != v105);
LABEL_102:
  if (v110 + v108)
  {
    v433[0] = (void *)vcvtad_u64_f64((double)v108 * 1000.0 / (double)(v110 + v108));
    v427 = (unint64_t *)(a2 + 40);
    if (v104 < *v65)
    {
LABEL_104:
      sub_384874(a2 + 40, v104, "DrivingShortcutCache.Hitrate", (char *)&v432, (uint64_t *)v433);
      uint64_t v140 = v104 + 48;
      *char v67 = v104 + 48;
      goto LABEL_107;
    }
  }
  else
  {
    v433[0] = &stru_3D8 + 16;
    v427 = (unint64_t *)(a2 + 40);
    if (v104 < *v65) {
      goto LABEL_104;
    }
  }
  uint64_t v140 = sub_3846A4((uint64_t *)(a2 + 24), "DrivingShortcutCache.Hitrate", (char *)&v432, (uint64_t *)v433);
LABEL_107:
  *char v67 = v140;
  uint64_t v141 = v426[65];
  if (!v141) {
    uint64_t v141 = sub_393548(*v426);
  }
  int64_t v142 = (unsigned int *)sub_638A2C(v141);
  int v143 = (char **)(a2 + 24);
  uint64_t v144 = sub_638A34(v141);
  while (v142 != (unsigned int *)v144)
  {
    if (!*((unsigned char *)v142 + 176) && !*((unsigned char *)v142 + 177) && !v142[280] && !v142[281] && !*((void *)v142 + 141)) {
      goto LABEL_111;
    }
    std::operator+<char>();
    int v145 = std::string::append(&v432, ".Hitrate");
    long long v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
    std::string::size_type v434 = v145->__r_.__value_.__r.__words[2];
    *(_OWORD *)v433 = v146;
    v145->__r_.__value_.__l.__size_ = 0;
    v145->__r_.__value_.__r.__words[2] = 0;
    v145->__r_.__value_.__r.__words[0] = 0;
    char v431 = 5;
    uint64_t v147 = sub_393A88(*v64);
    sub_37A300(v147, (uint64_t)&__p);
    unint64_t v148 = *v142;
    if (0xAAAAAAAAAAAAAAABLL * ((v429 - (unsigned char *)__p) >> 3) <= v148)
    {
      unint64_t v152 = 0;
    }
    else
    {
      unsigned int v149 = (char *)__p + 24 * v148;
      unint64_t v150 = *((void *)v149 + 1);
      unint64_t v151 = *((void *)v149 + 2) + v150;
      if (v151) {
        unint64_t v152 = vcvtad_u64_f64((double)v150 * 1000.0 / (double)v151);
      }
      else {
        unint64_t v152 = 1000;
      }
    }
    unint64_t v430 = v152;
    int32x4_t v153 = v67;
    unint64_t v154 = *v67;
    if (v154 >= *v427)
    {
      char v67 = v153;
      *int32x4_t v153 = (uint64_t)sub_37DB84(v143, (uint64_t)v433, &v431, (uint64_t *)&v430);
      long long v157 = __p;
      if (__p) {
        goto LABEL_129;
      }
    }
    else
    {
      char v155 = v431;
      if (SHIBYTE(v434) < 0)
      {
        sub_4200((unsigned char *)v154, v433[0], (unint64_t)v433[1]);
      }
      else
      {
        long long v156 = *(_OWORD *)v433;
        *(void *)(v154 + 16) = v434;
        *(_OWORD *)unint64_t v154 = v156;
      }
      *(unsigned char *)(v154 + 24) = v155;
      *(void *)(v154 + 32) = v152;
      *(_DWORD *)(v154 + 40) = 1;
      unint64_t v158 = v154 + 48;
      char v67 = v153;
      *int32x4_t v153 = v158;
      uint64_t v64 = v426;
      *int32x4_t v153 = v158;
      long long v157 = __p;
      if (__p)
      {
LABEL_129:
        v429 = v157;
        operator delete(v157);
      }
    }
    if (SHIBYTE(v434) < 0)
    {
      operator delete(v433[0]);
      if (SHIBYTE(v432.__r_.__value_.__r.__words[2]) < 0) {
LABEL_134:
      }
        operator delete(v432.__r_.__value_.__l.__data_);
    }
    else if (SHIBYTE(v432.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_134;
    }
LABEL_111:
    v142 += 326;
  }
  v432.__r_.__value_.__s.__data_[0] = 2;
  uint64_t v159 = sub_393A88(*v64);
  uint64_t v161 = *(void *)(v159 + 16);
  uint64_t v160 = *(void *)(v159 + 24);
  if (v161 == v160)
  {
    unint64_t v163 = 0;
  }
  else
  {
    unint64_t v162 = v160 - v161 - 272;
    if (v162 >= 0x110)
    {
      uint64_t v165 = 0;
      uint64_t v166 = 0;
      unint64_t v167 = v162 / 0x110 + 1;
      uint64_t v164 = v161 + 272 * (v167 & 0x1FFFFFFFFFFFFFELL);
      uint64_t v168 = v167 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v165 += *(void *)(v161 + 160);
        v166 += *(void *)(v161 + 432);
        v161 += 544;
        v168 -= 2;
      }
      while (v168);
      unint64_t v163 = (char *)(v166 + v165);
      if (v167 == (v167 & 0x1FFFFFFFFFFFFFELL)) {
        goto LABEL_143;
      }
    }
    else
    {
      unint64_t v163 = 0;
      uint64_t v164 = *(void *)(v159 + 16);
    }
    do
    {
      v163 += *(void *)(v164 + 160);
      v164 += 272;
    }
    while (v164 != v160);
  }
LABEL_143:
  v433[0] = v163;
  uint64_t v169 = *v67;
  if (*v67 >= *v427)
  {
    uint64_t v170 = sub_3849E0((uint64_t *)v143, "DrivingShortcutCache.CurrentSize", (char *)&v432, (uint64_t *)v433);
  }
  else
  {
    sub_384BB0((int)v427, *v67, "DrivingShortcutCache.CurrentSize", (char *)&v432, (uint64_t *)v433);
    uint64_t v170 = v169 + 48;
    *char v67 = v169 + 48;
  }
  *char v67 = v170;
  v432.__r_.__value_.__s.__data_[0] = 5;
  unsigned int v171 = (void *)sub_393A88(*v64);
  uint64_t v172 = (void *)v171[1];
  if (v172)
  {
    uint64_t v174 = v171[2];
    uint64_t v173 = v171[3];
    if (v174 == v173)
    {
      double v178 = 0.0;
      goto LABEL_161;
    }
    unint64_t v175 = v173 - v174 - 272;
    if (v175 >= 0x110)
    {
      uint64_t v179 = 0;
      uint64_t v180 = 0;
      unint64_t v181 = v175 / 0x110 + 1;
      uint64_t v177 = v174 + 272 * (v181 & 0x1FFFFFFFFFFFFFELL);
      uint64_t v182 = v181 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v179 += *(void *)(v174 + 160);
        v180 += *(void *)(v174 + 432);
        v174 += 544;
        v182 -= 2;
      }
      while (v182);
      unint64_t v176 = v180 + v179;
      if (v181 == (v181 & 0x1FFFFFFFFFFFFFELL)) {
        goto LABEL_155;
      }
    }
    else
    {
      unint64_t v176 = 0;
      uint64_t v177 = v171[2];
    }
    do
    {
      v176 += *(void *)(v177 + 160);
      v177 += 272;
    }
    while (v177 != v173);
LABEL_155:
    double v178 = (double)v176 * 1000.0;
    if (v178 < 0.0)
    {
      if (v178 > -4.50359963e15)
      {
        uint64_t v183 = (uint64_t)(v178 + v178);
        if (v183 >= 1) {
          --v183;
        }
        goto LABEL_162;
      }
LABEL_163:
      uint64_t v172 = (void *)vcvtad_u64_f64((double)(unint64_t)v178 / (double)(unint64_t)v172);
      goto LABEL_164;
    }
    if (v178 >= 4.50359963e15) {
      goto LABEL_163;
    }
LABEL_161:
    uint64_t v183 = (uint64_t)(v178 + v178) + 1;
LABEL_162:
    double v178 = (double)(v183 >> 1);
    goto LABEL_163;
  }
LABEL_164:
  v433[0] = v172;
  uint64_t v184 = *v67;
  if (*v67 >= *v427)
  {
    uint64_t v185 = sub_384D1C((uint64_t *)v143, "DrivingShortcutCache.CurrentSize", (char *)&v432, (uint64_t *)v433);
  }
  else
  {
    sub_384EEC((int)v427, *v67, "DrivingShortcutCache.CurrentSize", (char *)&v432, (uint64_t *)v433);
    uint64_t v185 = v184 + 48;
    *char v67 = v184 + 48;
  }
  *char v67 = v185;
  v432.__r_.__value_.__s.__data_[0] = 2;
  uint64_t v186 = sub_393A88(*v64);
  uint64_t v187 = *(void *)(v186 + 16);
  uint64_t v188 = *(void *)(v186 + 24);
  if (v187 == v188)
  {
    uint64_t v189 = 0;
  }
  else
  {
    uint64_t v189 = 0;
    do
    {
      uint64_t v191 = *(void **)(v187 + 200);
      if (v191)
      {
        unsigned int v192 = (void *)v191[5];
        if (v192)
        {
          uint64_t v190 = 0;
          do
          {
            v190 += v192[2];
            unsigned int v192 = (void *)*v192;
          }
          while (v192);
        }
        else
        {
          uint64_t v190 = 0;
        }
        uint64_t v191 = (void *)(v190 + *v191 * v191[4]);
      }
      uint64_t v189 = &v189[(void)v191];
      v187 += 272;
    }
    while (v187 != v188);
  }
  v433[0] = v189;
  uint64_t v193 = *v67;
  if (*v67 >= *v427)
  {
    unint64_t v194 = sub_385058((uint64_t *)v143, "DrivingShortcutCache.ArenaAllocatedSize", (char *)&v432, (uint64_t *)v433);
    *char v67 = v194;
    v432.__r_.__value_.__s.__data_[0] = 5;
    uint64_t v196 = (char *)v435;
    unint64_t v195 = v436;
    if (v435 != v436) {
      goto LABEL_180;
    }
LABEL_183:
    unsigned int v198 = 0;
    int v200 = 0;
    goto LABEL_198;
  }
  sub_385228((int)v427, *v67, "DrivingShortcutCache.ArenaAllocatedSize", (char *)&v432, (uint64_t *)v433);
  unint64_t v194 = v193 + 48;
  *char v67 = v194;
  *char v67 = v194;
  v432.__r_.__value_.__s.__data_[0] = 5;
  uint64_t v196 = (char *)v435;
  unint64_t v195 = v436;
  if (v435 == v436) {
    goto LABEL_183;
  }
LABEL_180:
  unint64_t v197 = v195 - v196 - 24;
  if (v197 >= 0xC0)
  {
    unint64_t v201 = v197 / 0x18 + 1;
    uint64_t v202 = v201 & 7;
    if ((v201 & 7) == 0) {
      uint64_t v202 = 8;
    }
    unint64_t v203 = v201 - v202;
    unint64_t v199 = &v196[24 * v203];
    uint64_t v204 = (const double *)(v196 + 104);
    int32x4_t v205 = 0uLL;
    int32x4_t v206 = 0uLL;
    do
    {
      int v207 = v204 - 12;
      unsigned long long v208 = (unsigned __int128)vld3q_f64(v207);
      char v209 = v204 - 6;
      unsigned long long v210 = (unsigned __int128)vld3q_f64(v209);
      uint64_t v211 = v204 + 24;
      unsigned long long v213 = (unsigned __int128)vld3q_f64(v204);
      uint64_t v212 = v204 + 6;
      unsigned long long v214 = (unsigned __int128)vld3q_f64(v212);
      int32x4_t v205 = vaddq_s32(v205, vuzp1q_s32((int32x4_t)v208, (int32x4_t)v210));
      int32x4_t v206 = vaddq_s32(v206, vuzp1q_s32((int32x4_t)v213, (int32x4_t)v214));
      uint64_t v204 = v211;
      v203 -= 8;
    }
    while (v203);
    unsigned int v198 = vaddvq_s32(vaddq_s32(v206, v205));
  }
  else
  {
    unsigned int v198 = 0;
    unint64_t v199 = v196;
  }
  do
  {
    v198 += *((_DWORD *)v199 + 2);
    v199 += 24;
  }
  while (v199 != v195);
  if (v197 >= 0xC0)
  {
    unint64_t v215 = v197 / 0x18 + 1;
    uint64_t v216 = v215 & 7;
    if ((v215 & 7) == 0) {
      uint64_t v216 = 8;
    }
    unint64_t v217 = v215 - v216;
    uint64_t v218 = &v196[24 * v217];
    long long v219 = (const double *)(v196 + 112);
    int32x4_t v220 = 0uLL;
    int32x4_t v221 = 0uLL;
    do
    {
      long long v222 = v219 - 12;
      unsigned long long v223 = (unsigned __int128)vld3q_f64(v222);
      long long v224 = v219 - 6;
      unsigned long long v225 = (unsigned __int128)vld3q_f64(v224);
      uint64_t v226 = v219 + 24;
      unsigned long long v228 = (unsigned __int128)vld3q_f64(v219);
      uint64_t v227 = v219 + 6;
      unsigned long long v229 = (unsigned __int128)vld3q_f64(v227);
      int32x4_t v220 = vaddq_s32(v220, vuzp1q_s32((int32x4_t)v223, (int32x4_t)v225));
      int32x4_t v221 = vaddq_s32(v221, vuzp1q_s32((int32x4_t)v228, (int32x4_t)v229));
      long long v219 = v226;
      v217 -= 8;
    }
    while (v217);
    int v200 = vaddvq_s32(vaddq_s32(v221, v220));
    uint64_t v196 = v218;
  }
  else
  {
    int v200 = 0;
  }
  do
  {
    v200 += *((_DWORD *)v196 + 4);
    v196 += 24;
  }
  while (v196 != v195);
LABEL_198:
  if (v200 + v198)
  {
    v433[0] = (void *)vcvtad_u64_f64((double)v198 * 1000.0 / (double)(v200 + v198));
    if (v194 < *v427)
    {
LABEL_200:
      sub_384874((int)v427, v194, "WalkingShortcutCache.Hitrate", (char *)&v432, (uint64_t *)v433);
      uint64_t v230 = v194 + 48;
      *char v67 = v194 + 48;
      goto LABEL_203;
    }
  }
  else
  {
    v433[0] = &stru_3D8 + 16;
    if (v194 < *v427) {
      goto LABEL_200;
    }
  }
  uint64_t v230 = sub_3846A4((uint64_t *)v143, "WalkingShortcutCache.Hitrate", (char *)&v432, (uint64_t *)v433);
LABEL_203:
  *char v67 = v230;
  v432.__r_.__value_.__s.__data_[0] = 2;
  uint64_t v231 = sub_393A98(*v64);
  uint64_t v233 = *(void *)(v231 + 16);
  uint64_t v232 = *(void *)(v231 + 24);
  if (v233 == v232)
  {
    long long v235 = 0;
  }
  else
  {
    unint64_t v234 = v232 - v233 - 272;
    if (v234 >= 0x110)
    {
      uint64_t v237 = 0;
      uint64_t v238 = 0;
      unint64_t v239 = v234 / 0x110 + 1;
      uint64_t v236 = v233 + 272 * (v239 & 0x1FFFFFFFFFFFFFELL);
      uint64_t v240 = v239 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v237 += *(void *)(v233 + 160);
        v238 += *(void *)(v233 + 432);
        v233 += 544;
        v240 -= 2;
      }
      while (v240);
      long long v235 = (char *)(v238 + v237);
      if (v239 == (v239 & 0x1FFFFFFFFFFFFFELL)) {
        goto LABEL_211;
      }
    }
    else
    {
      long long v235 = 0;
      uint64_t v236 = *(void *)(v231 + 16);
    }
    do
    {
      v235 += *(void *)(v236 + 160);
      v236 += 272;
    }
    while (v236 != v232);
  }
LABEL_211:
  v433[0] = v235;
  uint64_t v241 = *v67;
  if (*v67 >= *v427)
  {
    uint64_t v242 = sub_3849E0((uint64_t *)v143, "WalkingShortcutCache.CurrentSize", (char *)&v432, (uint64_t *)v433);
  }
  else
  {
    sub_384BB0((int)v427, *v67, "WalkingShortcutCache.CurrentSize", (char *)&v432, (uint64_t *)v433);
    uint64_t v242 = v241 + 48;
    *char v67 = v241 + 48;
  }
  *char v67 = v242;
  v432.__r_.__value_.__s.__data_[0] = 5;
  long long v243 = (void *)sub_393A98(*v64);
  uint64_t v244 = (void *)v243[1];
  if (v244)
  {
    uint64_t v246 = v243[2];
    uint64_t v245 = v243[3];
    if (v246 == v245)
    {
      double v250 = 0.0;
      goto LABEL_229;
    }
    unint64_t v247 = v245 - v246 - 272;
    if (v247 >= 0x110)
    {
      uint64_t v251 = 0;
      uint64_t v252 = 0;
      unint64_t v253 = v247 / 0x110 + 1;
      uint64_t v249 = v246 + 272 * (v253 & 0x1FFFFFFFFFFFFFELL);
      uint64_t v254 = v253 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v251 += *(void *)(v246 + 160);
        v252 += *(void *)(v246 + 432);
        v246 += 544;
        v254 -= 2;
      }
      while (v254);
      unint64_t v248 = v252 + v251;
      if (v253 == (v253 & 0x1FFFFFFFFFFFFFELL)) {
        goto LABEL_223;
      }
    }
    else
    {
      unint64_t v248 = 0;
      uint64_t v249 = v243[2];
    }
    do
    {
      v248 += *(void *)(v249 + 160);
      v249 += 272;
    }
    while (v249 != v245);
LABEL_223:
    double v250 = (double)v248 * 1000.0;
    if (v250 < 0.0)
    {
      if (v250 > -4.50359963e15)
      {
        uint64_t v255 = (uint64_t)(v250 + v250);
        if (v255 >= 1) {
          --v255;
        }
        goto LABEL_230;
      }
LABEL_231:
      uint64_t v244 = (void *)vcvtad_u64_f64((double)(unint64_t)v250 / (double)(unint64_t)v244);
      goto LABEL_232;
    }
    if (v250 >= 4.50359963e15) {
      goto LABEL_231;
    }
LABEL_229:
    uint64_t v255 = (uint64_t)(v250 + v250) + 1;
LABEL_230:
    double v250 = (double)(v255 >> 1);
    goto LABEL_231;
  }
LABEL_232:
  v433[0] = v244;
  uint64_t v256 = *v67;
  if (*v67 >= *v427)
  {
    uint64_t v257 = sub_384D1C((uint64_t *)v143, "WalkingShortcutCache.CurrentSize", (char *)&v432, (uint64_t *)v433);
  }
  else
  {
    sub_384EEC((int)v427, *v67, "WalkingShortcutCache.CurrentSize", (char *)&v432, (uint64_t *)v433);
    uint64_t v257 = v256 + 48;
    *char v67 = v256 + 48;
  }
  *char v67 = v257;
  v432.__r_.__value_.__s.__data_[0] = 2;
  uint64_t v258 = sub_393A98(*v64);
  uint64_t v259 = *(void *)(v258 + 16);
  uint64_t v260 = *(void *)(v258 + 24);
  if (v259 == v260)
  {
    uint64_t v261 = 0;
  }
  else
  {
    uint64_t v261 = 0;
    do
    {
      uint64_t v263 = *(void **)(v259 + 200);
      if (v263)
      {
        unint64_t v264 = (void *)v263[5];
        if (v264)
        {
          uint64_t v262 = 0;
          do
          {
            v262 += v264[2];
            unint64_t v264 = (void *)*v264;
          }
          while (v264);
        }
        else
        {
          uint64_t v262 = 0;
        }
        uint64_t v263 = (void *)(v262 + *v263 * v263[4]);
      }
      uint64_t v261 = &v261[(void)v263];
      v259 += 272;
    }
    while (v259 != v260);
  }
  v433[0] = v261;
  uint64_t v265 = *v67;
  if (*v67 < *v427)
  {
    sub_385228((int)v427, *v67, "WalkingShortcutCache.ArenaAllocatedSize", (char *)&v432, (uint64_t *)v433);
    unint64_t v266 = v265 + 48;
    *char v67 = v266;
    *char v67 = v266;
    v432.__r_.__value_.__s.__data_[0] = 5;
    unint64_t v267 = v11 + v10;
    if (v11 + v10) {
      goto LABEL_248;
    }
LABEL_251:
    v433[0] = &stru_3D8 + 16;
    if (v266 < *v427) {
      goto LABEL_249;
    }
    goto LABEL_252;
  }
  unint64_t v266 = sub_385058((uint64_t *)v143, "WalkingShortcutCache.ArenaAllocatedSize", (char *)&v432, (uint64_t *)v433);
  *char v67 = v266;
  v432.__r_.__value_.__s.__data_[0] = 5;
  unint64_t v267 = v11 + v10;
  if (!(v11 + v10)) {
    goto LABEL_251;
  }
LABEL_248:
  v433[0] = (void *)vcvtad_u64_f64((double)v11 * 1000.0 / (double)v267);
  if (v266 < *v427)
  {
LABEL_249:
    sub_385564((int)v427, v266, "CyclingUnwindingCache.Hitrate", (char *)&v432, (uint64_t *)v433);
    uint64_t v268 = v266 + 48;
    *char v67 = v266 + 48;
    goto LABEL_253;
  }
LABEL_252:
  uint64_t v268 = sub_385394((uint64_t *)v143, "CyclingUnwindingCache.Hitrate", (char *)&v432, (uint64_t *)v433);
LABEL_253:
  *char v67 = v268;
  v432.__r_.__value_.__s.__data_[0] = 2;
  uint64_t v269 = sub_393A70(*v64);
  uint64_t v271 = *(void *)(v269 + 16);
  uint64_t v270 = *(void *)(v269 + 24);
  if (v271 == v270)
  {
    uint64_t v273 = 0;
  }
  else
  {
    unint64_t v272 = v270 - v271 - 272;
    if (v272 >= 0x110)
    {
      uint64_t v275 = 0;
      uint64_t v276 = 0;
      unint64_t v277 = v272 / 0x110 + 1;
      uint64_t v274 = v271 + 272 * (v277 & 0x1FFFFFFFFFFFFFELL);
      uint64_t v278 = v277 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v275 += *(void *)(v271 + 160);
        v276 += *(void *)(v271 + 432);
        v271 += 544;
        v278 -= 2;
      }
      while (v278);
      uint64_t v273 = (char *)(v276 + v275);
      if (v277 == (v277 & 0x1FFFFFFFFFFFFFELL)) {
        goto LABEL_261;
      }
    }
    else
    {
      uint64_t v273 = 0;
      uint64_t v274 = *(void *)(v269 + 16);
    }
    do
    {
      v273 += *(void *)(v274 + 160);
      v274 += 272;
    }
    while (v274 != v270);
  }
LABEL_261:
  v433[0] = v273;
  uint64_t v279 = *v67;
  if (*v67 >= *v427)
  {
    uint64_t v280 = sub_3856D0((uint64_t *)v143, "CyclingUnwindingCache.CurrentSize", (char *)&v432, (uint64_t *)v433);
  }
  else
  {
    sub_3858A0((int)v427, *v67, "CyclingUnwindingCache.CurrentSize", (char *)&v432, (uint64_t *)v433);
    uint64_t v280 = v279 + 48;
    *char v67 = v279 + 48;
  }
  *char v67 = v280;
  v432.__r_.__value_.__s.__data_[0] = 5;
  v281 = (void *)sub_393A70(*v64);
  uint64_t v282 = (void *)v281[1];
  if (v282)
  {
    uint64_t v284 = v281[2];
    uint64_t v283 = v281[3];
    if (v284 == v283)
    {
      double v288 = 0.0;
      goto LABEL_279;
    }
    unint64_t v285 = v283 - v284 - 272;
    if (v285 >= 0x110)
    {
      uint64_t v289 = 0;
      uint64_t v290 = 0;
      unint64_t v291 = v285 / 0x110 + 1;
      uint64_t v287 = v284 + 272 * (v291 & 0x1FFFFFFFFFFFFFELL);
      uint64_t v292 = v291 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v289 += *(void *)(v284 + 160);
        v290 += *(void *)(v284 + 432);
        v284 += 544;
        v292 -= 2;
      }
      while (v292);
      unint64_t v286 = v290 + v289;
      if (v291 == (v291 & 0x1FFFFFFFFFFFFFELL)) {
        goto LABEL_273;
      }
    }
    else
    {
      unint64_t v286 = 0;
      uint64_t v287 = v281[2];
    }
    do
    {
      v286 += *(void *)(v287 + 160);
      v287 += 272;
    }
    while (v287 != v283);
LABEL_273:
    double v288 = (double)v286 * 1000.0;
    if (v288 < 0.0)
    {
      if (v288 > -4.50359963e15)
      {
        uint64_t v293 = (uint64_t)(v288 + v288);
        if (v293 >= 1) {
          --v293;
        }
        goto LABEL_280;
      }
LABEL_281:
      uint64_t v282 = (void *)vcvtad_u64_f64((double)(unint64_t)v288 / (double)(unint64_t)v282);
      goto LABEL_282;
    }
    if (v288 >= 4.50359963e15) {
      goto LABEL_281;
    }
LABEL_279:
    uint64_t v293 = (uint64_t)(v288 + v288) + 1;
LABEL_280:
    double v288 = (double)(v293 >> 1);
    goto LABEL_281;
  }
LABEL_282:
  v433[0] = v282;
  uint64_t v294 = *v67;
  if (*v67 >= *v427)
  {
    uint64_t v295 = sub_385A0C((uint64_t *)v143, "CyclingUnwindingCache.CurrentSize", (char *)&v432, (uint64_t *)v433);
  }
  else
  {
    sub_385BDC((int)v427, *v67, "CyclingUnwindingCache.CurrentSize", (char *)&v432, (uint64_t *)v433);
    uint64_t v295 = v294 + 48;
    *char v67 = v294 + 48;
  }
  *char v67 = v295;
  v432.__r_.__value_.__s.__data_[0] = 2;
  uint64_t v296 = sub_393A70(*v64);
  uint64_t v297 = *(void *)(v296 + 16);
  uint64_t v298 = *(void *)(v296 + 24);
  if (v297 == v298)
  {
    v299 = 0;
  }
  else
  {
    v299 = 0;
    do
    {
      long long v301 = *(void **)(v297 + 200);
      if (v301)
      {
        uint64_t v302 = (void *)v301[5];
        if (v302)
        {
          uint64_t v300 = 0;
          do
          {
            v300 += v302[2];
            uint64_t v302 = (void *)*v302;
          }
          while (v302);
        }
        else
        {
          uint64_t v300 = 0;
        }
        long long v301 = (void *)(v300 + *v301 * v301[4]);
      }
      v299 = &v299[(void)v301];
      v297 += 272;
    }
    while (v297 != v298);
  }
  v433[0] = v299;
  uint64_t v303 = *v67;
  if (*v67 < *v427)
  {
    sub_385F18((int)v427, *v67, "CyclingUnwindingCache.ArenaAllocatedSize", (char *)&v432, (uint64_t *)v433);
    unint64_t v304 = v303 + 48;
    *char v67 = v304;
    *char v67 = v304;
    v432.__r_.__value_.__s.__data_[0] = 5;
    unint64_t v305 = v425;
    unint64_t v306 = v425 + v424;
    if (v425 + v424) {
      goto LABEL_298;
    }
LABEL_301:
    v433[0] = &stru_3D8 + 16;
    if (v304 < *v427) {
      goto LABEL_299;
    }
    goto LABEL_302;
  }
  unint64_t v304 = sub_385D48((uint64_t *)v143, "CyclingUnwindingCache.ArenaAllocatedSize", (char *)&v432, (uint64_t *)v433);
  *char v67 = v304;
  v432.__r_.__value_.__s.__data_[0] = 5;
  unint64_t v305 = v425;
  unint64_t v306 = v425 + v424;
  if (!(v425 + v424)) {
    goto LABEL_301;
  }
LABEL_298:
  v433[0] = (void *)vcvtad_u64_f64((double)v305 * 1000.0 / (double)v306);
  if (v304 < *v427)
  {
LABEL_299:
    sub_385564((int)v427, v304, "DrivingUnwindingCache.Hitrate", (char *)&v432, (uint64_t *)v433);
    uint64_t v307 = v304 + 48;
    *char v67 = v304 + 48;
    goto LABEL_303;
  }
LABEL_302:
  uint64_t v307 = sub_385394((uint64_t *)v143, "DrivingUnwindingCache.Hitrate", (char *)&v432, (uint64_t *)v433);
LABEL_303:
  *char v67 = v307;
  v432.__r_.__value_.__s.__data_[0] = 2;
  uint64_t v308 = sub_393A80(*v64);
  uint64_t v310 = *(void *)(v308 + 16);
  uint64_t v309 = *(void *)(v308 + 24);
  if (v310 == v309)
  {
    unint64_t v312 = 0;
  }
  else
  {
    unint64_t v311 = v309 - v310 - 272;
    if (v311 >= 0x110)
    {
      uint64_t v314 = 0;
      uint64_t v315 = 0;
      unint64_t v316 = v311 / 0x110 + 1;
      uint64_t v313 = v310 + 272 * (v316 & 0x1FFFFFFFFFFFFFELL);
      uint64_t v317 = v316 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v314 += *(void *)(v310 + 160);
        v315 += *(void *)(v310 + 432);
        v310 += 544;
        v317 -= 2;
      }
      while (v317);
      unint64_t v312 = (char *)(v315 + v314);
      if (v316 == (v316 & 0x1FFFFFFFFFFFFFELL)) {
        goto LABEL_311;
      }
    }
    else
    {
      unint64_t v312 = 0;
      uint64_t v313 = *(void *)(v308 + 16);
    }
    do
    {
      v312 += *(void *)(v313 + 160);
      v313 += 272;
    }
    while (v313 != v309);
  }
LABEL_311:
  v433[0] = v312;
  uint64_t v318 = *v67;
  if (*v67 >= *v427)
  {
    uint64_t v319 = sub_3856D0((uint64_t *)v143, "DrivingUnwindingCache.CurrentSize", (char *)&v432, (uint64_t *)v433);
  }
  else
  {
    sub_3858A0((int)v427, *v67, "DrivingUnwindingCache.CurrentSize", (char *)&v432, (uint64_t *)v433);
    uint64_t v319 = v318 + 48;
    *char v67 = v318 + 48;
  }
  *char v67 = v319;
  v432.__r_.__value_.__s.__data_[0] = 5;
  uint64_t v320 = (void *)sub_393A80(*v64);
  unint64_t v321 = (void *)v320[1];
  if (v321)
  {
    uint64_t v323 = v320[2];
    uint64_t v322 = v320[3];
    if (v323 == v322)
    {
      double v327 = 0.0;
      goto LABEL_329;
    }
    unint64_t v324 = v322 - v323 - 272;
    if (v324 >= 0x110)
    {
      uint64_t v328 = 0;
      uint64_t v329 = 0;
      unint64_t v330 = v324 / 0x110 + 1;
      uint64_t v326 = v323 + 272 * (v330 & 0x1FFFFFFFFFFFFFELL);
      uint64_t v331 = v330 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v328 += *(void *)(v323 + 160);
        v329 += *(void *)(v323 + 432);
        v323 += 544;
        v331 -= 2;
      }
      while (v331);
      unint64_t v325 = v329 + v328;
      if (v330 == (v330 & 0x1FFFFFFFFFFFFFELL)) {
        goto LABEL_323;
      }
    }
    else
    {
      unint64_t v325 = 0;
      uint64_t v326 = v320[2];
    }
    do
    {
      v325 += *(void *)(v326 + 160);
      v326 += 272;
    }
    while (v326 != v322);
LABEL_323:
    double v327 = (double)v325 * 1000.0;
    if (v327 < 0.0)
    {
      if (v327 > -4.50359963e15)
      {
        uint64_t v332 = (uint64_t)(v327 + v327);
        if (v332 >= 1) {
          --v332;
        }
        goto LABEL_330;
      }
LABEL_331:
      unint64_t v321 = (void *)vcvtad_u64_f64((double)(unint64_t)v327 / (double)(unint64_t)v321);
      goto LABEL_332;
    }
    if (v327 >= 4.50359963e15) {
      goto LABEL_331;
    }
LABEL_329:
    uint64_t v332 = (uint64_t)(v327 + v327) + 1;
LABEL_330:
    double v327 = (double)(v332 >> 1);
    goto LABEL_331;
  }
LABEL_332:
  v433[0] = v321;
  uint64_t v333 = *v67;
  if (*v67 >= *v427)
  {
    uint64_t v334 = sub_385A0C((uint64_t *)v143, "DrivingUnwindingCache.CurrentSize", (char *)&v432, (uint64_t *)v433);
  }
  else
  {
    sub_385BDC((int)v427, *v67, "DrivingUnwindingCache.CurrentSize", (char *)&v432, (uint64_t *)v433);
    uint64_t v334 = v333 + 48;
    *char v67 = v333 + 48;
  }
  *char v67 = v334;
  v432.__r_.__value_.__s.__data_[0] = 2;
  uint64_t v335 = sub_393A80(*v64);
  uint64_t v336 = *(void *)(v335 + 16);
  uint64_t v337 = *(void *)(v335 + 24);
  if (v336 == v337)
  {
    uint64_t v338 = 0;
  }
  else
  {
    uint64_t v338 = 0;
    do
    {
      uint64_t v340 = *(void **)(v336 + 200);
      if (v340)
      {
        uint64_t v341 = (void *)v340[5];
        if (v341)
        {
          uint64_t v339 = 0;
          do
          {
            v339 += v341[2];
            uint64_t v341 = (void *)*v341;
          }
          while (v341);
        }
        else
        {
          uint64_t v339 = 0;
        }
        uint64_t v340 = (void *)(v339 + *v340 * v340[4]);
      }
      uint64_t v338 = &v338[(void)v340];
      v336 += 272;
    }
    while (v336 != v337);
  }
  v433[0] = v338;
  uint64_t v342 = *v67;
  if (*v67 < *v427)
  {
    sub_385F18((int)v427, *v67, "DrivingUnwindingCache.ArenaAllocatedSize", (char *)&v432, (uint64_t *)v433);
    unint64_t v343 = v342 + 48;
    *char v67 = v343;
    *char v67 = v343;
    v432.__r_.__value_.__s.__data_[0] = 5;
    unint64_t v344 = v423;
    unint64_t v345 = v423 + v422;
    if (v423 + v422) {
      goto LABEL_348;
    }
LABEL_351:
    v433[0] = &stru_3D8 + 16;
    if (v343 < *v427) {
      goto LABEL_349;
    }
    goto LABEL_352;
  }
  unint64_t v343 = sub_385D48((uint64_t *)v143, "DrivingUnwindingCache.ArenaAllocatedSize", (char *)&v432, (uint64_t *)v433);
  *char v67 = v343;
  v432.__r_.__value_.__s.__data_[0] = 5;
  unint64_t v344 = v423;
  unint64_t v345 = v423 + v422;
  if (!(v423 + v422)) {
    goto LABEL_351;
  }
LABEL_348:
  v433[0] = (void *)vcvtad_u64_f64((double)v344 * 1000.0 / (double)v345);
  if (v343 < *v427)
  {
LABEL_349:
    sub_385564((int)v427, v343, "WalkingUnwindingCache.Hitrate", (char *)&v432, (uint64_t *)v433);
    uint64_t v346 = v343 + 48;
    *char v67 = v343 + 48;
    goto LABEL_353;
  }
LABEL_352:
  uint64_t v346 = sub_385394((uint64_t *)v143, "WalkingUnwindingCache.Hitrate", (char *)&v432, (uint64_t *)v433);
LABEL_353:
  *char v67 = v346;
  v432.__r_.__value_.__s.__data_[0] = 2;
  uint64_t v347 = sub_393A90(*v64);
  uint64_t v349 = *(void *)(v347 + 16);
  uint64_t v348 = *(void *)(v347 + 24);
  if (v349 == v348)
  {
    v351 = 0;
  }
  else
  {
    unint64_t v350 = v348 - v349 - 272;
    if (v350 >= 0x110)
    {
      uint64_t v353 = 0;
      uint64_t v354 = 0;
      unint64_t v355 = v350 / 0x110 + 1;
      uint64_t v352 = v349 + 272 * (v355 & 0x1FFFFFFFFFFFFFELL);
      uint64_t v356 = v355 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v353 += *(void *)(v349 + 160);
        v354 += *(void *)(v349 + 432);
        v349 += 544;
        v356 -= 2;
      }
      while (v356);
      v351 = (char *)(v354 + v353);
      if (v355 == (v355 & 0x1FFFFFFFFFFFFFELL)) {
        goto LABEL_361;
      }
    }
    else
    {
      v351 = 0;
      uint64_t v352 = *(void *)(v347 + 16);
    }
    do
    {
      v351 += *(void *)(v352 + 160);
      v352 += 272;
    }
    while (v352 != v348);
  }
LABEL_361:
  v433[0] = v351;
  uint64_t v357 = *v67;
  if (*v67 >= *v427)
  {
    uint64_t v358 = sub_3856D0((uint64_t *)v143, "WalkingUnwindingCache.CurrentSize", (char *)&v432, (uint64_t *)v433);
  }
  else
  {
    sub_3858A0((int)v427, *v67, "WalkingUnwindingCache.CurrentSize", (char *)&v432, (uint64_t *)v433);
    uint64_t v358 = v357 + 48;
    *char v67 = v357 + 48;
  }
  *char v67 = v358;
  v432.__r_.__value_.__s.__data_[0] = 5;
  uint64_t v359 = (void *)sub_393A90(*v64);
  v360 = (void *)v359[1];
  if (v360)
  {
    uint64_t v362 = v359[2];
    uint64_t v361 = v359[3];
    if (v362 == v361)
    {
      double v366 = 0.0;
      goto LABEL_379;
    }
    unint64_t v363 = v361 - v362 - 272;
    if (v363 >= 0x110)
    {
      uint64_t v367 = 0;
      uint64_t v368 = 0;
      unint64_t v369 = v363 / 0x110 + 1;
      uint64_t v365 = v362 + 272 * (v369 & 0x1FFFFFFFFFFFFFELL);
      uint64_t v370 = v369 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v367 += *(void *)(v362 + 160);
        v368 += *(void *)(v362 + 432);
        v362 += 544;
        v370 -= 2;
      }
      while (v370);
      unint64_t v364 = v368 + v367;
      if (v369 == (v369 & 0x1FFFFFFFFFFFFFELL)) {
        goto LABEL_373;
      }
    }
    else
    {
      unint64_t v364 = 0;
      uint64_t v365 = v359[2];
    }
    do
    {
      v364 += *(void *)(v365 + 160);
      v365 += 272;
    }
    while (v365 != v361);
LABEL_373:
    double v366 = (double)v364 * 1000.0;
    if (v366 < 0.0)
    {
      if (v366 > -4.50359963e15)
      {
        uint64_t v371 = (uint64_t)(v366 + v366);
        if (v371 >= 1) {
          --v371;
        }
        goto LABEL_380;
      }
LABEL_381:
      v360 = (void *)vcvtad_u64_f64((double)(unint64_t)v366 / (double)(unint64_t)v360);
      goto LABEL_382;
    }
    if (v366 >= 4.50359963e15) {
      goto LABEL_381;
    }
LABEL_379:
    uint64_t v371 = (uint64_t)(v366 + v366) + 1;
LABEL_380:
    double v366 = (double)(v371 >> 1);
    goto LABEL_381;
  }
LABEL_382:
  v433[0] = v360;
  uint64_t v372 = *v67;
  if (*v67 >= *v427)
  {
    uint64_t v373 = sub_385A0C((uint64_t *)v143, "WalkingUnwindingCache.CurrentSize", (char *)&v432, (uint64_t *)v433);
  }
  else
  {
    sub_385BDC((int)v427, *v67, "WalkingUnwindingCache.CurrentSize", (char *)&v432, (uint64_t *)v433);
    uint64_t v373 = v372 + 48;
    *char v67 = v372 + 48;
  }
  *char v67 = v373;
  v432.__r_.__value_.__s.__data_[0] = 2;
  uint64_t v374 = sub_393A90(*v64);
  uint64_t v375 = *(void *)(v374 + 16);
  uint64_t v376 = *(void *)(v374 + 24);
  if (v375 == v376)
  {
    v377 = 0;
  }
  else
  {
    v377 = 0;
    do
    {
      v379 = *(void **)(v375 + 200);
      if (v379)
      {
        v380 = (void *)v379[5];
        if (v380)
        {
          uint64_t v378 = 0;
          do
          {
            v378 += v380[2];
            v380 = (void *)*v380;
          }
          while (v380);
        }
        else
        {
          uint64_t v378 = 0;
        }
        v379 = (void *)(v378 + *v379 * v379[4]);
      }
      v377 = &v377[(void)v379];
      v375 += 272;
    }
    while (v375 != v376);
  }
  v433[0] = v377;
  uint64_t v381 = *v67;
  if (*v67 >= *v427)
  {
    uint64_t v382 = sub_385D48((uint64_t *)v143, "WalkingUnwindingCache.ArenaAllocatedSize", (char *)&v432, (uint64_t *)v433);
  }
  else
  {
    sub_385F18((int)v427, *v67, "WalkingUnwindingCache.ArenaAllocatedSize", (char *)&v432, (uint64_t *)v433);
    uint64_t v382 = v381 + 48;
    *char v67 = v381 + 48;
  }
  *char v67 = v382;
  uint64_t v383 = sub_393AA0(*v64);
  uint64_t v384 = *(void *)(v383 + 16);
  uint64_t v385 = *(void *)(v383 + 24);
  if (v384 == v385)
  {
    v432.__r_.__value_.__s.__data_[0] = 5;
    goto LABEL_406;
  }
  unint64_t v386 = 0;
  uint64_t v387 = 0;
  do
  {
    std::mutex::lock((std::mutex *)(v384 + 24));
    uint64_t v388 = *(void *)(v384 + 184);
    uint64_t v389 = *(void *)(v384 + 192);
    std::mutex::unlock((std::mutex *)(v384 + 24));
    v386 += v388;
    v387 += v389;
    v384 += 272;
  }
  while (v384 != v385);
  v432.__r_.__value_.__s.__data_[0] = 5;
  if (!(v387 + v386))
  {
LABEL_406:
    v391 = v426;
    v392 = v427;
    v433[0] = &stru_3D8 + 16;
    uint64_t v393 = *v67;
    if (*v67 < *v427) {
      goto LABEL_404;
    }
    goto LABEL_407;
  }
  v390 = (void *)vcvtad_u64_f64((double)v386 * 1000.0 / (double)(v387 + v386));
  v391 = v426;
  v392 = v427;
  v433[0] = v390;
  uint64_t v393 = *v67;
  if (*v67 < *v427)
  {
LABEL_404:
    sub_386254((int)v392, v393, "ManeuverCache.Hitrate", (char *)&v432, (uint64_t *)v433);
    uint64_t v394 = v393 + 48;
    *char v67 = v393 + 48;
    goto LABEL_408;
  }
LABEL_407:
  uint64_t v394 = sub_386084((uint64_t *)v143, "ManeuverCache.Hitrate", (char *)&v432, (uint64_t *)v433);
LABEL_408:
  *char v67 = v394;
  v432.__r_.__value_.__s.__data_[0] = 2;
  uint64_t v395 = sub_393AA0(*v391);
  uint64_t v397 = *(void *)(v395 + 16);
  uint64_t v396 = *(void *)(v395 + 24);
  if (v397 == v396)
  {
    v399 = 0;
  }
  else
  {
    unint64_t v398 = v396 - v397 - 272;
    if (v398 >= 0x110)
    {
      uint64_t v401 = 0;
      uint64_t v402 = 0;
      unint64_t v403 = v398 / 0x110 + 1;
      uint64_t v400 = v397 + 272 * (v403 & 0x1FFFFFFFFFFFFFELL);
      uint64_t v404 = v403 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v401 += *(void *)(v397 + 160);
        v402 += *(void *)(v397 + 432);
        v397 += 544;
        v404 -= 2;
      }
      while (v404);
      v399 = (char *)(v402 + v401);
      if (v403 == (v403 & 0x1FFFFFFFFFFFFFELL)) {
        goto LABEL_416;
      }
    }
    else
    {
      v399 = 0;
      uint64_t v400 = *(void *)(v395 + 16);
    }
    do
    {
      v399 += *(void *)(v400 + 160);
      v400 += 272;
    }
    while (v400 != v396);
  }
LABEL_416:
  v433[0] = v399;
  uint64_t v405 = *v67;
  if (*v67 >= *v392)
  {
    uint64_t v406 = sub_3863C0((uint64_t *)v143, "ManeuverCache.CurrentSize", (char *)&v432, (uint64_t *)v433);
  }
  else
  {
    sub_386590((int)v392, *v67, "ManeuverCache.CurrentSize", (char *)&v432, (uint64_t *)v433);
    uint64_t v406 = v405 + 48;
    *char v67 = v405 + 48;
  }
  *char v67 = v406;
  v432.__r_.__value_.__s.__data_[0] = 5;
  v407 = (void *)sub_393AA0(*v391);
  v408 = (void *)v407[1];
  if (v408)
  {
    uint64_t v410 = v407[2];
    uint64_t v409 = v407[3];
    if (v410 == v409)
    {
      double v414 = 0.0;
      goto LABEL_434;
    }
    unint64_t v411 = v409 - v410 - 272;
    if (v411 >= 0x110)
    {
      uint64_t v415 = 0;
      uint64_t v416 = 0;
      unint64_t v417 = v411 / 0x110 + 1;
      uint64_t v413 = v410 + 272 * (v417 & 0x1FFFFFFFFFFFFFELL);
      uint64_t v418 = v417 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v415 += *(void *)(v410 + 160);
        v416 += *(void *)(v410 + 432);
        v410 += 544;
        v418 -= 2;
      }
      while (v418);
      unint64_t v412 = v416 + v415;
      if (v417 == (v417 & 0x1FFFFFFFFFFFFFELL)) {
        goto LABEL_428;
      }
    }
    else
    {
      unint64_t v412 = 0;
      uint64_t v413 = v407[2];
    }
    do
    {
      v412 += *(void *)(v413 + 160);
      v413 += 272;
    }
    while (v413 != v409);
LABEL_428:
    double v414 = (double)v412 * 1000.0;
    if (v414 < 0.0)
    {
      if (v414 > -4.50359963e15)
      {
        uint64_t v419 = (uint64_t)(v414 + v414);
        if (v419 >= 1) {
          --v419;
        }
        goto LABEL_435;
      }
LABEL_436:
      v408 = (void *)vcvtad_u64_f64((double)(unint64_t)v414 / (double)(unint64_t)v408);
      goto LABEL_437;
    }
    if (v414 >= 4.50359963e15) {
      goto LABEL_436;
    }
LABEL_434:
    uint64_t v419 = (uint64_t)(v414 + v414) + 1;
LABEL_435:
    double v414 = (double)(v419 >> 1);
    goto LABEL_436;
  }
LABEL_437:
  v433[0] = v408;
  uint64_t v420 = *v67;
  if (*v67 >= *v392)
  {
    uint64_t v421 = sub_3866FC((uint64_t *)v143, "ManeuverCache.CurrentSize", (char *)&v432, (uint64_t *)v433);
  }
  else
  {
    sub_3868CC((int)v392, *v67, "ManeuverCache.CurrentSize", (char *)&v432, (uint64_t *)v433);
    uint64_t v421 = v420 + 48;
    *char v67 = v420 + 48;
  }
  *char v67 = v421;
  if (v435)
  {
    v436 = (char *)v435;
    operator delete(v435);
  }
  if (v437)
  {
    v438 = v437;
    operator delete(v437);
  }
  if (v439)
  {
    v440 = v439;
    operator delete(v439);
  }
}

void sub_37A090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p)
  {
    operator delete(__p);
    int32x4_t v39 = *(void **)(v37 - 136);
    if (!v39)
    {
LABEL_3:
      uint64_t v40 = *(void **)(v37 - 112);
      if (!v40) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    int32x4_t v39 = *(void **)(v37 - 136);
    if (!v39) {
      goto LABEL_3;
    }
  }
  *(void *)(v37 - 128) = v39;
  operator delete(v39);
  uint64_t v40 = *(void **)(v37 - 112);
  if (!v40)
  {
LABEL_4:
    sub_A3A4(v36);
    _Unwind_Resume(a1);
  }
LABEL_7:
  *(void *)(v37 - 104) = v40;
  operator delete(v40);
  sub_A3A4(v36);
  _Unwind_Resume(a1);
}

void sub_37A300(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v2 = *(void *)(a1 + 16);
  for (uint64_t i = *(void *)(a1 + 24); v2 != i; v2 += 272)
  {
    sub_384410(v2, &__p);
    uint64_t v5 = (int64x2_t *)__p;
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)v41 - (unsigned char *)__p) >> 3);
    uint64_t v7 = *(char **)a2;
    uint64_t v8 = *(char **)(a2 + 8);
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v8[-*(void *)a2] >> 3);
    if (v6 > v9)
    {
      sub_3844F4((char **)a2, v6 - v9);
      uint64_t v7 = *(char **)a2;
      uint64_t v8 = *(char **)(a2 + 8);
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v8[-*(void *)a2] >> 3);
      uint64_t v5 = (int64x2_t *)__p;
    }
    if (v8 != v7)
    {
      unint64_t v10 = ((char *)v41 - (char *)v5) / 24;
      if (v9 - 1 >= v10) {
        unint64_t v11 = ((char *)v41 - (char *)v5) / 24;
      }
      else {
        unint64_t v11 = v9 - 1;
      }
      unint64_t v12 = v11 + 1;
      if (v11 + 1 >= 0x11)
      {
        unint64_t v13 = 0;
        BOOL v14 = !is_mul_ok(v11, 0x18uLL);
        unint64_t v15 = (unint64_t)(v7 + 8);
        unint64_t v16 = (unint64_t)(v7 + 16);
        BOOL v17 = &v7[24 * v11 + 8] >= v7 + 8 && &v7[24 * v11] >= v7;
        BOOL v18 = v17 && (unint64_t)&v7[24 * v11 + 16] >= v16;
        if (v18 && !v14)
        {
          unint64_t v13 = 0;
          uint64_t v19 = 24 * v11;
          unint64_t v20 = v15 + v19;
          uint64_t v21 = &v5->i8[v19 + 8];
          BOOL v17 = v15 >= (unint64_t)&v5[1].u64[(unint64_t)v19 / 8];
          unint64_t v22 = (unint64_t)&v7[v19 + 24];
          unint64_t v23 = (unint64_t)&v5[1].u64[(unint64_t)v19 / 8 + 1];
          BOOL v24 = v17 || (unint64_t)&v5->u64[1] >= v16 + v19;
          BOOL v25 = !v24;
          BOOL v26 = v16 >= v23 || (unint64_t)&v5[1] >= v22;
          BOOL v27 = !v26;
          BOOL v28 = (unint64_t)v5 >= v20 || v7 >= v21;
          if (v28 && !v25 && !v27)
          {
            uint64_t v29 = v12 & 1;
            if ((v12 & 1) == 0) {
              uint64_t v29 = 2;
            }
            unint64_t v13 = v12 - v29;
            unint64_t v30 = v13;
            unsigned int v31 = (int64x2_t *)v7;
            uint64_t v32 = v5;
            do
            {
              int64x2_t v33 = vaddq_s64(v31[2], v32[2]);
              int64x2_t v34 = vaddq_s64(v31[1], v32[1]);
              *unsigned int v31 = vaddq_s64(*v31, *v32);
              v31[1] = v34;
              v31[2] = v33;
              v32 += 3;
              v31 += 3;
              v30 -= 2;
            }
            while (v30);
          }
        }
      }
      else
      {
        unint64_t v13 = 0;
      }
      unint64_t v35 = v9 - v13;
      uint64_t v36 = 24 * v13;
      unint64_t v37 = v10 - v13;
      int32x4_t v38 = v5;
      while (v37)
      {
        int32x4_t v39 = (int64x2_t *)&v7[v36];
        *int32x4_t v39 = vaddq_s64(*(int64x2_t *)&v7[v36], *(int64x2_t *)((char *)v38 + v36));
        v39[1].i64[0] = *(void *)&v7[v36 + 16] + v38[1].i64[(unint64_t)v36 / 8];
        v7 += 24;
        int32x4_t v38 = (int64x2_t *)((char *)v38 + 24);
        --v37;
        if (!--v35) {
          goto LABEL_4;
        }
      }
    }
    if (v5)
    {
LABEL_4:
      unsigned long long v41 = v5;
      operator delete(v5);
    }
  }
}

void sub_37A55C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    operator delete(__p);
    unint64_t v13 = *(void **)v11;
    if (!*(void *)v11) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v13 = *(void **)v11;
    if (!*(void *)v11) {
      goto LABEL_3;
    }
  }
  *(void *)(v11 + 8) = v13;
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

uint64_t sub_37A5A8(uint64_t *a1)
{
  uint64_t result = a1[102];
  if (!result)
  {
    long long __p = (char *)operator new(0x40uLL);
    strcpy(__p, "https://fareservice-stg.geo.apple.com/api/v1/fare/calculate");
    uint64_t v3 = (uint64_t *)sub_393298(*a1);
    uint64_t v4 = v3;
    if (v3)
    {
      sub_37A9A0(v3, &v6);
      operator delete(__p);
      sub_37AB74(v4, &v6);
      sub_37AD08(v4, &v6);
      v6.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
      *(_OWORD *)&v6.__r_.__value_.__r.__words[1] = xmmword_20B9960;
      strcpy(v6.__r_.__value_.__l.__data_, "transit_fare_service.connect_timeout_ms");
      sub_37D86C(v4, (uint64_t)&v6, 1000);
      if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v6.__r_.__value_.__l.__data_);
      }
      v6.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
      *(_OWORD *)&v6.__r_.__value_.__r.__words[1] = xmmword_20B93C0;
      strcpy(v6.__r_.__value_.__l.__data_, "transit_fare_service.transfer_timeout_ms");
      sub_37D86C(v4, (uint64_t)&v6, 10000);
      if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v6.__r_.__value_.__l.__data_);
      }
      sub_37AEA0(v4);
    }
    if (sub_3958A8(*a1)) {
      sub_37AFB8(a1[2], &v6);
    }
    else {
      *(_OWORD *)&v6.__r_.__value_.__l.__data_ = 0uLL;
    }
    sub_37B244();
  }
  return result;
}

void sub_37A8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_29D7B0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_37A8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (*(char *)(v3 - 33) < 0)
  {
    operator delete(*(void **)(v3 - 56));
    sub_29D7B0((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_29D7B0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_37A9A0(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v8 = (char *)operator new(0x20uLL);
  long long v9 = xmmword_20B91C0;
  strcpy(v8, "transit_fare_service.url");
  char v6 = 8;
  strcpy((char *)v5, "fare_url");
  v4.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
  *(_OWORD *)&v4.__r_.__value_.__r.__words[1] = xmmword_20B9A90;
  strcpy(v4.__r_.__value_.__l.__data_, "https://fareservice-stg.geo.apple.com/api/v1/fare/calculate");
  memset(&__p, 0, sizeof(__p));
  sub_111FFAC(*a1, (uint64_t)v5, &__p, &v4);
  sub_84B24(a1, (uint64_t)&v8, (uint64_t)&__p, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v4.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((v6 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((SHIBYTE(v4.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v4.__r_.__value_.__l.__data_);
  if ((v6 & 0x80000000) == 0)
  {
LABEL_4:
    if ((SHIBYTE(v9) & 0x80000000) == 0) {
      return;
    }
LABEL_9:
    operator delete(v8);
    return;
  }
LABEL_8:
  operator delete(v5[0]);
  if (SHIBYTE(v9) < 0) {
    goto LABEL_9;
  }
}

void sub_37AAF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a20 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v26 - 17) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a15);
  if ((*(char *)(v26 - 17) & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(*(void **)(v26 - 40));
  _Unwind_Resume(exception_object);
}

void sub_37AB74(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v8 = (char *)operator new(0x20uLL);
  long long v9 = xmmword_20B5EB0;
  strcpy(v8, "transit_fare_service.proxy");
  char v6 = 10;
  strcpy((char *)v5, "base_proxy");
  *((unsigned char *)&v4.__r_.__value_.__s + 23) = 0;
  v4.__r_.__value_.__s.__data_[0] = 0;
  memset(&__p, 0, sizeof(__p));
  sub_111FFAC(*a1, (uint64_t)v5, &__p, &v4);
  sub_84B24(a1, (uint64_t)&v8, (uint64_t)&__p, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v4.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((v6 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((SHIBYTE(v4.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v4.__r_.__value_.__l.__data_);
  if ((v6 & 0x80000000) == 0)
  {
LABEL_4:
    if ((SHIBYTE(v9) & 0x80000000) == 0) {
      return;
    }
LABEL_9:
    operator delete(v8);
    return;
  }
LABEL_8:
  operator delete(v5[0]);
  if (SHIBYTE(v9) < 0) {
    goto LABEL_9;
  }
}

void sub_37AC98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a20 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v26 - 17) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a15);
  if ((*(char *)(v26 - 17) & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(*(void **)(v26 - 40));
  _Unwind_Resume(exception_object);
}

void sub_37AD08(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v8 = (char *)operator new(0x20uLL);
  long long v9 = xmmword_20B91B0;
  strcpy(v8, "transit_fare_service.api_key");
  char v6 = 12;
  strcpy((char *)v5, "fare_api_key");
  *((unsigned char *)&v4.__r_.__value_.__s + 23) = 0;
  v4.__r_.__value_.__s.__data_[0] = 0;
  memset(&__p, 0, sizeof(__p));
  sub_111FFAC(*a1, (uint64_t)v5, &__p, &v4);
  sub_84B24(a1, (uint64_t)&v8, (uint64_t)&__p, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v4.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((v6 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((SHIBYTE(v4.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v4.__r_.__value_.__l.__data_);
  if ((v6 & 0x80000000) == 0)
  {
LABEL_4:
    if ((SHIBYTE(v9) & 0x80000000) == 0) {
      return;
    }
LABEL_9:
    operator delete(v8);
    return;
  }
LABEL_8:
  operator delete(v5[0]);
  if (SHIBYTE(v9) < 0) {
    goto LABEL_9;
  }
}

void sub_37AE30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a20 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v26 - 17) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a15);
  if ((*(char *)(v26 - 17) & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(*(void **)(v26 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t sub_37AEA0(uint64_t *a1)
{
  std::string __p = operator new(0x38uLL);
  long long v6 = xmmword_20B9A60;
  strcpy((char *)__p, "transit_fare_service.max_lifetime_connection_sec");
  double v2 = (double)(int)sub_37D9F8(a1, (uint64_t)&__p, 0) * 10.0;
  if (v2 >= 0.0)
  {
    if (v2 >= 4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v3 = (uint64_t)(v2 + v2) + 1;
  }
  else
  {
    if (v2 <= -4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v3 = (uint64_t)(v2 + v2);
    if (v3 >= 1) {
      --v3;
    }
  }
  double v2 = (double)(v3 >> 1);
LABEL_9:
  if (SHIBYTE(v6) < 0) {
    operator delete(__p);
  }
  return (int)v2;
}

void sub_37AF9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_37AFB8@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (!*(void *)(result + 144)) {
    sub_503B8();
  }
  uint64_t v3 = *(void *)(result + 152);
  *a2 = *(void *)(result + 144);
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_37B1F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_37B244()
{
}

void sub_37B320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_37B34C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = result[2];
  if (*(char *)(v2 + 119) < 0) {
    return sub_4200((unsigned char *)a2, *(void **)(v2 + 96), *(void *)(v2 + 104));
  }
  long long v3 = *(_OWORD *)(v2 + 96);
  *(void *)(a2 + 16) = *(void *)(v2 + 112);
  *(_OWORD *)a2 = v3;
  return result;
}

BOOL sub_37B378(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  return !v1 || *(unsigned char *)(v1 + 121) != 0;
}

uint64_t sub_37B398(uint64_t *a1)
{
  return sub_395D80(*a1);
}

uint64_t sub_37B3A0(uint64_t *a1)
{
  return sub_395F68(*a1);
}

uint64_t sub_37B3A8(uint64_t a1)
{
  return a1 + 856;
}

uint64_t sub_37B3B0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 868);
}

BOOL sub_37B3B8(uint64_t *a1)
{
  uint64_t v1 = sub_393298(*a1);
  if (!v1) {
    return 1;
  }
  uint64_t v2 = (uint64_t *)v1;
  std::string __p = operator new(0x28uLL);
  long long v6 = xmmword_20B9240;
  strcpy((char *)__p, "transit_realtime_feed.routing_enabled");
  BOOL result = sub_37D6EC(v2, (uint64_t)&__p, 0);
  BOOL v4 = result;
  if (SHIBYTE(v6) < 0)
  {
    operator delete(__p);
    return v4;
  }
  return result;
}

void sub_37B474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_37B490(uint64_t a1)
{
  char v13 = 9;
  uint64_t v11 = 0;
  strcpy((char *)v12, "EVRouting");
  long long v9 = 0;
  unint64_t v10 = 0;
  uint64_t v1 = sub_4A3B30((uint64_t *)(a1 + 560), (uint64_t)v12, (uint64_t *)&v9);
  char v8 = 7;
  strcpy((char *)__p, "enabled");
  BOOL v2 = sub_29D62C(v1, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  long long v3 = (void **)v9;
  if (v9)
  {
    BOOL v4 = v10;
    uint64_t v5 = v9;
    if (v10 != v9)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 3;
      }
      while (v4 != v3);
      uint64_t v5 = v9;
    }
    unint64_t v10 = v3;
    operator delete(v5);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  return v2;
}

void sub_37B5A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_1A668(&a16);
    if ((a24 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_1A668(&a16);
    if ((a24 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(a19);
  _Unwind_Resume(a1);
}

uint64_t sub_37B608(uint64_t *a1)
{
  BOOL v2 = (uint64_t *)sub_393298(*a1);
  if (v2)
  {
    std::string __p = operator new(0x20uLL);
    long long v35 = xmmword_20B9800;
    strcpy((char *)__p, "request_filter.disable_cycling");
    LODWORD(v2) = sub_37D6EC(v2, (uint64_t)&__p, 0);
    if (SHIBYTE(v35) < 0) {
      operator delete(__p);
    }
  }
  std::string __p = "disable_cycling";
  *(void *)&long long v35 = 15;
  long long v3 = sub_377A30((uint64_t)a1, (char **)&__p);
  uint64_t v4 = *((unsigned __int8 *)v3 + 23);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = (char *)v3;
  }
  else {
    uint64_t v5 = (char *)*v3;
  }
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = v3[1];
  }
  if (v4 == 1)
  {
    __darwin_ct_rune_t v15 = *v5;
    __darwin_ct_rune_t v16 = __toupper(49);
    BOOL v14 = v16 == __toupper(v15);
  }
  else
  {
    if (v4 != 4) {
      goto LABEL_16;
    }
    __darwin_ct_rune_t v6 = *v5;
    __darwin_ct_rune_t v7 = __toupper(116);
    if (v7 != __toupper(v6)) {
      goto LABEL_16;
    }
    __darwin_ct_rune_t v8 = v5[1];
    __darwin_ct_rune_t v9 = __toupper(114);
    if (v9 == __toupper(v8)
      && (__darwin_ct_rune_t v10 = v5[2], v11 = __toupper(117), v11 == __toupper(v10))
      && (__darwin_ct_rune_t v12 = v5[3], v13 = __toupper(101), v13 == __toupper(v12)))
    {
      BOOL v14 = 1;
    }
    else
    {
LABEL_16:
      BOOL v14 = 0;
    }
  }
  std::string __p = "disable_cycling";
  *(void *)&long long v35 = 15;
  BOOL v17 = sub_377A30((uint64_t)a1, (char **)&__p);
  uint64_t v18 = *((unsigned __int8 *)v17 + 23);
  if ((v18 & 0x80u) == 0) {
    uint64_t v19 = (char *)v17;
  }
  else {
    uint64_t v19 = (char *)*v17;
  }
  if ((v18 & 0x80u) != 0) {
    uint64_t v18 = v17[1];
  }
  if (v18 == 1)
  {
    __darwin_ct_rune_t v32 = *v19;
    __darwin_ct_rune_t v33 = __toupper(48);
    BOOL v30 = v33 != __toupper(v32);
    if (!v14) {
      return v30 & v2;
    }
    return 1;
  }
  if (v18 != 5) {
    goto LABEL_32;
  }
  __darwin_ct_rune_t v20 = *v19;
  __darwin_ct_rune_t v21 = __toupper(102);
  if (v21 != __toupper(v20)) {
    goto LABEL_32;
  }
  __darwin_ct_rune_t v22 = v19[1];
  __darwin_ct_rune_t v23 = __toupper(97);
  if (v23 != __toupper(v22)
    || (__darwin_ct_rune_t v24 = v19[2], v25 = __toupper(108), v25 != __toupper(v24))
    || (__darwin_ct_rune_t v26 = v19[3], v27 = __toupper(115), v27 != __toupper(v26))
    || (v28 = v19[4], __darwin_ct_rune_t v29 = __toupper(101), v29 != __toupper(v28)))
  {
LABEL_32:
    BOOL v30 = 1;
    if (!v14) {
      return v30 & v2;
    }
    return 1;
  }
  BOOL v30 = 0;
  if (v14) {
    return 1;
  }
  return v30 & v2;
}

void sub_37B8D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_37B8FC(uint64_t *a1)
{
  BOOL v2 = (uint64_t *)sub_393298(*a1);
  if (v2)
  {
    std::string __p = operator new(0x20uLL);
    long long v35 = xmmword_20B9800;
    strcpy((char *)__p, "request_filter.disable_driving");
    LODWORD(v2) = sub_37D6EC(v2, (uint64_t)&__p, 0);
    if (SHIBYTE(v35) < 0) {
      operator delete(__p);
    }
  }
  std::string __p = "disable_driving";
  *(void *)&long long v35 = 15;
  long long v3 = sub_377A30((uint64_t)a1, (char **)&__p);
  uint64_t v4 = *((unsigned __int8 *)v3 + 23);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = (char *)v3;
  }
  else {
    uint64_t v5 = (char *)*v3;
  }
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = v3[1];
  }
  if (v4 == 1)
  {
    __darwin_ct_rune_t v15 = *v5;
    __darwin_ct_rune_t v16 = __toupper(49);
    BOOL v14 = v16 == __toupper(v15);
  }
  else
  {
    if (v4 != 4) {
      goto LABEL_16;
    }
    __darwin_ct_rune_t v6 = *v5;
    __darwin_ct_rune_t v7 = __toupper(116);
    if (v7 != __toupper(v6)) {
      goto LABEL_16;
    }
    __darwin_ct_rune_t v8 = v5[1];
    __darwin_ct_rune_t v9 = __toupper(114);
    if (v9 == __toupper(v8)
      && (__darwin_ct_rune_t v10 = v5[2], v11 = __toupper(117), v11 == __toupper(v10))
      && (__darwin_ct_rune_t v12 = v5[3], v13 = __toupper(101), v13 == __toupper(v12)))
    {
      BOOL v14 = 1;
    }
    else
    {
LABEL_16:
      BOOL v14 = 0;
    }
  }
  std::string __p = "disable_driving";
  *(void *)&long long v35 = 15;
  BOOL v17 = sub_377A30((uint64_t)a1, (char **)&__p);
  uint64_t v18 = *((unsigned __int8 *)v17 + 23);
  if ((v18 & 0x80u) == 0) {
    uint64_t v19 = (char *)v17;
  }
  else {
    uint64_t v19 = (char *)*v17;
  }
  if ((v18 & 0x80u) != 0) {
    uint64_t v18 = v17[1];
  }
  if (v18 == 1)
  {
    __darwin_ct_rune_t v32 = *v19;
    __darwin_ct_rune_t v33 = __toupper(48);
    BOOL v30 = v33 != __toupper(v32);
    if (!v14) {
      return v30 & v2;
    }
    return 1;
  }
  if (v18 != 5) {
    goto LABEL_32;
  }
  __darwin_ct_rune_t v20 = *v19;
  __darwin_ct_rune_t v21 = __toupper(102);
  if (v21 != __toupper(v20)) {
    goto LABEL_32;
  }
  __darwin_ct_rune_t v22 = v19[1];
  __darwin_ct_rune_t v23 = __toupper(97);
  if (v23 != __toupper(v22)
    || (__darwin_ct_rune_t v24 = v19[2], v25 = __toupper(108), v25 != __toupper(v24))
    || (__darwin_ct_rune_t v26 = v19[3], v27 = __toupper(115), v27 != __toupper(v26))
    || (v28 = v19[4], __darwin_ct_rune_t v29 = __toupper(101), v29 != __toupper(v28)))
  {
LABEL_32:
    BOOL v30 = 1;
    if (!v14) {
      return v30 & v2;
    }
    return 1;
  }
  BOOL v30 = 0;
  if (v14) {
    return 1;
  }
  return v30 & v2;
}

void sub_37BBC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_37BBF0(uint64_t *a1)
{
  BOOL v2 = (uint64_t *)sub_393298(*a1);
  if (v2)
  {
    std::string __p = operator new(0x20uLL);
    long long v35 = xmmword_20B9800;
    strcpy((char *)__p, "request_filter.disable_transit");
    LODWORD(v2) = sub_37D6EC(v2, (uint64_t)&__p, 0);
    if (SHIBYTE(v35) < 0) {
      operator delete(__p);
    }
  }
  std::string __p = "disable_transit";
  *(void *)&long long v35 = 15;
  long long v3 = sub_377A30((uint64_t)a1, (char **)&__p);
  uint64_t v4 = *((unsigned __int8 *)v3 + 23);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = (char *)v3;
  }
  else {
    uint64_t v5 = (char *)*v3;
  }
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = v3[1];
  }
  if (v4 == 1)
  {
    __darwin_ct_rune_t v15 = *v5;
    __darwin_ct_rune_t v16 = __toupper(49);
    BOOL v14 = v16 == __toupper(v15);
  }
  else
  {
    if (v4 != 4) {
      goto LABEL_16;
    }
    __darwin_ct_rune_t v6 = *v5;
    __darwin_ct_rune_t v7 = __toupper(116);
    if (v7 != __toupper(v6)) {
      goto LABEL_16;
    }
    __darwin_ct_rune_t v8 = v5[1];
    __darwin_ct_rune_t v9 = __toupper(114);
    if (v9 == __toupper(v8)
      && (__darwin_ct_rune_t v10 = v5[2], v11 = __toupper(117), v11 == __toupper(v10))
      && (__darwin_ct_rune_t v12 = v5[3], v13 = __toupper(101), v13 == __toupper(v12)))
    {
      BOOL v14 = 1;
    }
    else
    {
LABEL_16:
      BOOL v14 = 0;
    }
  }
  std::string __p = "disable_transit";
  *(void *)&long long v35 = 15;
  BOOL v17 = sub_377A30((uint64_t)a1, (char **)&__p);
  uint64_t v18 = *((unsigned __int8 *)v17 + 23);
  if ((v18 & 0x80u) == 0) {
    uint64_t v19 = (char *)v17;
  }
  else {
    uint64_t v19 = (char *)*v17;
  }
  if ((v18 & 0x80u) != 0) {
    uint64_t v18 = v17[1];
  }
  if (v18 == 1)
  {
    __darwin_ct_rune_t v32 = *v19;
    __darwin_ct_rune_t v33 = __toupper(48);
    BOOL v30 = v33 != __toupper(v32);
    if (!v14) {
      return v30 & v2;
    }
    return 1;
  }
  if (v18 != 5) {
    goto LABEL_32;
  }
  __darwin_ct_rune_t v20 = *v19;
  __darwin_ct_rune_t v21 = __toupper(102);
  if (v21 != __toupper(v20)) {
    goto LABEL_32;
  }
  __darwin_ct_rune_t v22 = v19[1];
  __darwin_ct_rune_t v23 = __toupper(97);
  if (v23 != __toupper(v22)
    || (__darwin_ct_rune_t v24 = v19[2], v25 = __toupper(108), v25 != __toupper(v24))
    || (__darwin_ct_rune_t v26 = v19[3], v27 = __toupper(115), v27 != __toupper(v26))
    || (v28 = v19[4], __darwin_ct_rune_t v29 = __toupper(101), v29 != __toupper(v28)))
  {
LABEL_32:
    BOOL v30 = 1;
    if (!v14) {
      return v30 & v2;
    }
    return 1;
  }
  BOOL v30 = 0;
  if (v14) {
    return 1;
  }
  return v30 & v2;
}

void sub_37BEB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_37BEE4(uint64_t *a1)
{
  BOOL v2 = (uint64_t *)sub_393298(*a1);
  if (v2)
  {
    std::string __p = operator new(0x20uLL);
    long long v35 = xmmword_20B9800;
    strcpy((char *)__p, "request_filter.disable_walking");
    LODWORD(v2) = sub_37D6EC(v2, (uint64_t)&__p, 0);
    if (SHIBYTE(v35) < 0) {
      operator delete(__p);
    }
  }
  std::string __p = "disable_walking";
  *(void *)&long long v35 = 15;
  long long v3 = sub_377A30((uint64_t)a1, (char **)&__p);
  uint64_t v4 = *((unsigned __int8 *)v3 + 23);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = (char *)v3;
  }
  else {
    uint64_t v5 = (char *)*v3;
  }
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = v3[1];
  }
  if (v4 == 1)
  {
    __darwin_ct_rune_t v15 = *v5;
    __darwin_ct_rune_t v16 = __toupper(49);
    BOOL v14 = v16 == __toupper(v15);
  }
  else
  {
    if (v4 != 4) {
      goto LABEL_16;
    }
    __darwin_ct_rune_t v6 = *v5;
    __darwin_ct_rune_t v7 = __toupper(116);
    if (v7 != __toupper(v6)) {
      goto LABEL_16;
    }
    __darwin_ct_rune_t v8 = v5[1];
    __darwin_ct_rune_t v9 = __toupper(114);
    if (v9 == __toupper(v8)
      && (__darwin_ct_rune_t v10 = v5[2], v11 = __toupper(117), v11 == __toupper(v10))
      && (__darwin_ct_rune_t v12 = v5[3], v13 = __toupper(101), v13 == __toupper(v12)))
    {
      BOOL v14 = 1;
    }
    else
    {
LABEL_16:
      BOOL v14 = 0;
    }
  }
  std::string __p = "disable_walking";
  *(void *)&long long v35 = 15;
  BOOL v17 = sub_377A30((uint64_t)a1, (char **)&__p);
  uint64_t v18 = *((unsigned __int8 *)v17 + 23);
  if ((v18 & 0x80u) == 0) {
    uint64_t v19 = (char *)v17;
  }
  else {
    uint64_t v19 = (char *)*v17;
  }
  if ((v18 & 0x80u) != 0) {
    uint64_t v18 = v17[1];
  }
  if (v18 == 1)
  {
    __darwin_ct_rune_t v32 = *v19;
    __darwin_ct_rune_t v33 = __toupper(48);
    BOOL v30 = v33 != __toupper(v32);
    if (!v14) {
      return v30 & v2;
    }
    return 1;
  }
  if (v18 != 5) {
    goto LABEL_32;
  }
  __darwin_ct_rune_t v20 = *v19;
  __darwin_ct_rune_t v21 = __toupper(102);
  if (v21 != __toupper(v20)) {
    goto LABEL_32;
  }
  __darwin_ct_rune_t v22 = v19[1];
  __darwin_ct_rune_t v23 = __toupper(97);
  if (v23 != __toupper(v22)
    || (__darwin_ct_rune_t v24 = v19[2], v25 = __toupper(108), v25 != __toupper(v24))
    || (__darwin_ct_rune_t v26 = v19[3], v27 = __toupper(115), v27 != __toupper(v26))
    || (v28 = v19[4], __darwin_ct_rune_t v29 = __toupper(101), v29 != __toupper(v28)))
  {
LABEL_32:
    BOOL v30 = 1;
    if (!v14) {
      return v30 & v2;
    }
    return 1;
  }
  BOOL v30 = 0;
  if (v14) {
    return 1;
  }
  return v30 & v2;
}

void sub_37C1AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_37C1D8(uint64_t *a1)
{
  BOOL v2 = (uint64_t *)sub_393298(*a1);
  if (v2)
  {
    std::string __p = operator new(0x28uLL);
    long long v35 = xmmword_20B9960;
    strcpy((char *)__p, "request_filter.disable_routing_requests");
    LODWORD(v2) = sub_37D6EC(v2, (uint64_t)&__p, 0);
    if (SHIBYTE(v35) < 0) {
      operator delete(__p);
    }
  }
  std::string __p = "disable_routing_requests";
  *(void *)&long long v35 = 24;
  long long v3 = sub_377A30((uint64_t)a1, (char **)&__p);
  uint64_t v4 = *((unsigned __int8 *)v3 + 23);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = (char *)v3;
  }
  else {
    uint64_t v5 = (char *)*v3;
  }
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = v3[1];
  }
  if (v4 == 1)
  {
    __darwin_ct_rune_t v15 = *v5;
    __darwin_ct_rune_t v16 = __toupper(49);
    BOOL v14 = v16 == __toupper(v15);
  }
  else
  {
    if (v4 != 4) {
      goto LABEL_16;
    }
    __darwin_ct_rune_t v6 = *v5;
    __darwin_ct_rune_t v7 = __toupper(116);
    if (v7 != __toupper(v6)) {
      goto LABEL_16;
    }
    __darwin_ct_rune_t v8 = v5[1];
    __darwin_ct_rune_t v9 = __toupper(114);
    if (v9 == __toupper(v8)
      && (__darwin_ct_rune_t v10 = v5[2], v11 = __toupper(117), v11 == __toupper(v10))
      && (__darwin_ct_rune_t v12 = v5[3], v13 = __toupper(101), v13 == __toupper(v12)))
    {
      BOOL v14 = 1;
    }
    else
    {
LABEL_16:
      BOOL v14 = 0;
    }
  }
  std::string __p = "disable_routing_requests";
  *(void *)&long long v35 = 24;
  BOOL v17 = sub_377A30((uint64_t)a1, (char **)&__p);
  uint64_t v18 = *((unsigned __int8 *)v17 + 23);
  if ((v18 & 0x80u) == 0) {
    uint64_t v19 = (char *)v17;
  }
  else {
    uint64_t v19 = (char *)*v17;
  }
  if ((v18 & 0x80u) != 0) {
    uint64_t v18 = v17[1];
  }
  if (v18 == 1)
  {
    __darwin_ct_rune_t v32 = *v19;
    __darwin_ct_rune_t v33 = __toupper(48);
    BOOL v30 = v33 != __toupper(v32);
    if (!v14) {
      return v30 & v2;
    }
    return 1;
  }
  if (v18 != 5) {
    goto LABEL_32;
  }
  __darwin_ct_rune_t v20 = *v19;
  __darwin_ct_rune_t v21 = __toupper(102);
  if (v21 != __toupper(v20)) {
    goto LABEL_32;
  }
  __darwin_ct_rune_t v22 = v19[1];
  __darwin_ct_rune_t v23 = __toupper(97);
  if (v23 != __toupper(v22)
    || (__darwin_ct_rune_t v24 = v19[2], v25 = __toupper(108), v25 != __toupper(v24))
    || (__darwin_ct_rune_t v26 = v19[3], v27 = __toupper(115), v27 != __toupper(v26))
    || (v28 = v19[4], __darwin_ct_rune_t v29 = __toupper(101), v29 != __toupper(v28)))
  {
LABEL_32:
    BOOL v30 = 1;
    if (!v14) {
      return v30 & v2;
    }
    return 1;
  }
  BOOL v30 = 0;
  if (v14) {
    return 1;
  }
  return v30 & v2;
}

void sub_37C4A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_37C4CC(uint64_t *a1)
{
  BOOL v2 = (uint64_t *)sub_393298(*a1);
  if (v2)
  {
    std::string __p = operator new(0x28uLL);
    long long v35 = xmmword_20B9240;
    strcpy((char *)__p, "request_filter.disable_place_requests");
    LODWORD(v2) = sub_37D6EC(v2, (uint64_t)&__p, 0);
    if (SHIBYTE(v35) < 0) {
      operator delete(__p);
    }
  }
  std::string __p = "disable_place_requests";
  *(void *)&long long v35 = 22;
  long long v3 = sub_377A30((uint64_t)a1, (char **)&__p);
  uint64_t v4 = *((unsigned __int8 *)v3 + 23);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = (char *)v3;
  }
  else {
    uint64_t v5 = (char *)*v3;
  }
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = v3[1];
  }
  if (v4 == 1)
  {
    __darwin_ct_rune_t v15 = *v5;
    __darwin_ct_rune_t v16 = __toupper(49);
    BOOL v14 = v16 == __toupper(v15);
  }
  else
  {
    if (v4 != 4) {
      goto LABEL_16;
    }
    __darwin_ct_rune_t v6 = *v5;
    __darwin_ct_rune_t v7 = __toupper(116);
    if (v7 != __toupper(v6)) {
      goto LABEL_16;
    }
    __darwin_ct_rune_t v8 = v5[1];
    __darwin_ct_rune_t v9 = __toupper(114);
    if (v9 == __toupper(v8)
      && (__darwin_ct_rune_t v10 = v5[2], v11 = __toupper(117), v11 == __toupper(v10))
      && (__darwin_ct_rune_t v12 = v5[3], v13 = __toupper(101), v13 == __toupper(v12)))
    {
      BOOL v14 = 1;
    }
    else
    {
LABEL_16:
      BOOL v14 = 0;
    }
  }
  std::string __p = "disable_place_requests";
  *(void *)&long long v35 = 22;
  BOOL v17 = sub_377A30((uint64_t)a1, (char **)&__p);
  uint64_t v18 = *((unsigned __int8 *)v17 + 23);
  if ((v18 & 0x80u) == 0) {
    uint64_t v19 = (char *)v17;
  }
  else {
    uint64_t v19 = (char *)*v17;
  }
  if ((v18 & 0x80u) != 0) {
    uint64_t v18 = v17[1];
  }
  if (v18 == 1)
  {
    __darwin_ct_rune_t v32 = *v19;
    __darwin_ct_rune_t v33 = __toupper(48);
    BOOL v30 = v33 != __toupper(v32);
    if (!v14) {
      return v30 & v2;
    }
    return 1;
  }
  if (v18 != 5) {
    goto LABEL_32;
  }
  __darwin_ct_rune_t v20 = *v19;
  __darwin_ct_rune_t v21 = __toupper(102);
  if (v21 != __toupper(v20)) {
    goto LABEL_32;
  }
  __darwin_ct_rune_t v22 = v19[1];
  __darwin_ct_rune_t v23 = __toupper(97);
  if (v23 != __toupper(v22)
    || (__darwin_ct_rune_t v24 = v19[2], v25 = __toupper(108), v25 != __toupper(v24))
    || (__darwin_ct_rune_t v26 = v19[3], v27 = __toupper(115), v27 != __toupper(v26))
    || (v28 = v19[4], __darwin_ct_rune_t v29 = __toupper(101), v29 != __toupper(v28)))
  {
LABEL_32:
    BOOL v30 = 1;
    if (!v14) {
      return v30 & v2;
    }
    return 1;
  }
  BOOL v30 = 0;
  if (v14) {
    return 1;
  }
  return v30 & v2;
}

void sub_37C794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_37C7C0(uint64_t *a1)
{
  BOOL v2 = (uint64_t *)sub_393298(*a1);
  if (v2)
  {
    std::string __p = operator new(0x48uLL);
    long long v35 = xmmword_20B9270;
    strcpy((char *)__p, "request_filter.disable_transit_nearby_schedule_lookup_place_requests");
    LODWORD(v2) = sub_37D6EC(v2, (uint64_t)&__p, 0);
    if (SHIBYTE(v35) < 0) {
      operator delete(__p);
    }
  }
  std::string __p = "disable_transit_nearby_schedule_lookup_place_requests";
  *(void *)&long long v35 = 53;
  long long v3 = sub_377A30((uint64_t)a1, (char **)&__p);
  uint64_t v4 = *((unsigned __int8 *)v3 + 23);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = (char *)v3;
  }
  else {
    uint64_t v5 = (char *)*v3;
  }
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = v3[1];
  }
  if (v4 == 1)
  {
    __darwin_ct_rune_t v15 = *v5;
    __darwin_ct_rune_t v16 = __toupper(49);
    BOOL v14 = v16 == __toupper(v15);
  }
  else
  {
    if (v4 != 4) {
      goto LABEL_16;
    }
    __darwin_ct_rune_t v6 = *v5;
    __darwin_ct_rune_t v7 = __toupper(116);
    if (v7 != __toupper(v6)) {
      goto LABEL_16;
    }
    __darwin_ct_rune_t v8 = v5[1];
    __darwin_ct_rune_t v9 = __toupper(114);
    if (v9 == __toupper(v8)
      && (__darwin_ct_rune_t v10 = v5[2], v11 = __toupper(117), v11 == __toupper(v10))
      && (__darwin_ct_rune_t v12 = v5[3], v13 = __toupper(101), v13 == __toupper(v12)))
    {
      BOOL v14 = 1;
    }
    else
    {
LABEL_16:
      BOOL v14 = 0;
    }
  }
  std::string __p = "disable_transit_nearby_schedule_lookup_place_requests";
  *(void *)&long long v35 = 53;
  BOOL v17 = sub_377A30((uint64_t)a1, (char **)&__p);
  uint64_t v18 = *((unsigned __int8 *)v17 + 23);
  if ((v18 & 0x80u) == 0) {
    uint64_t v19 = (char *)v17;
  }
  else {
    uint64_t v19 = (char *)*v17;
  }
  if ((v18 & 0x80u) != 0) {
    uint64_t v18 = v17[1];
  }
  if (v18 == 1)
  {
    __darwin_ct_rune_t v32 = *v19;
    __darwin_ct_rune_t v33 = __toupper(48);
    BOOL v30 = v33 != __toupper(v32);
    if (!v14) {
      return v30 & v2;
    }
    return 1;
  }
  if (v18 != 5) {
    goto LABEL_32;
  }
  __darwin_ct_rune_t v20 = *v19;
  __darwin_ct_rune_t v21 = __toupper(102);
  if (v21 != __toupper(v20)) {
    goto LABEL_32;
  }
  __darwin_ct_rune_t v22 = v19[1];
  __darwin_ct_rune_t v23 = __toupper(97);
  if (v23 != __toupper(v22)
    || (__darwin_ct_rune_t v24 = v19[2], v25 = __toupper(108), v25 != __toupper(v24))
    || (__darwin_ct_rune_t v26 = v19[3], v27 = __toupper(115), v27 != __toupper(v26))
    || (v28 = v19[4], __darwin_ct_rune_t v29 = __toupper(101), v29 != __toupper(v28)))
  {
LABEL_32:
    BOOL v30 = 1;
    if (!v14) {
      return v30 & v2;
    }
    return 1;
  }
  BOOL v30 = 0;
  if (v14) {
    return 1;
  }
  return v30 & v2;
}

void sub_37CA94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_37CAC0(uint64_t *a1)
{
  BOOL v2 = (uint64_t *)sub_393298(*a1);
  if (v2)
  {
    std::string __p = operator new(0x50uLL);
    long long v35 = xmmword_20E2340;
    strcpy((char *)__p, "request_filter.disable_transit_nearby_payment_method_lookup_place_requests");
    LODWORD(v2) = sub_37D6EC(v2, (uint64_t)&__p, 0);
    if (SHIBYTE(v35) < 0) {
      operator delete(__p);
    }
  }
  std::string __p = "disable_transit_nearby_payment_method_lookup_place_requests";
  *(void *)&long long v35 = 59;
  long long v3 = sub_377A30((uint64_t)a1, (char **)&__p);
  uint64_t v4 = *((unsigned __int8 *)v3 + 23);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = (char *)v3;
  }
  else {
    uint64_t v5 = (char *)*v3;
  }
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = v3[1];
  }
  if (v4 == 1)
  {
    __darwin_ct_rune_t v15 = *v5;
    __darwin_ct_rune_t v16 = __toupper(49);
    BOOL v14 = v16 == __toupper(v15);
  }
  else
  {
    if (v4 != 4) {
      goto LABEL_16;
    }
    __darwin_ct_rune_t v6 = *v5;
    __darwin_ct_rune_t v7 = __toupper(116);
    if (v7 != __toupper(v6)) {
      goto LABEL_16;
    }
    __darwin_ct_rune_t v8 = v5[1];
    __darwin_ct_rune_t v9 = __toupper(114);
    if (v9 == __toupper(v8)
      && (__darwin_ct_rune_t v10 = v5[2], v11 = __toupper(117), v11 == __toupper(v10))
      && (__darwin_ct_rune_t v12 = v5[3], v13 = __toupper(101), v13 == __toupper(v12)))
    {
      BOOL v14 = 1;
    }
    else
    {
LABEL_16:
      BOOL v14 = 0;
    }
  }
  std::string __p = "disable_transit_nearby_payment_method_lookup_place_requests";
  *(void *)&long long v35 = 59;
  BOOL v17 = sub_377A30((uint64_t)a1, (char **)&__p);
  uint64_t v18 = *((unsigned __int8 *)v17 + 23);
  if ((v18 & 0x80u) == 0) {
    uint64_t v19 = (char *)v17;
  }
  else {
    uint64_t v19 = (char *)*v17;
  }
  if ((v18 & 0x80u) != 0) {
    uint64_t v18 = v17[1];
  }
  if (v18 == 1)
  {
    __darwin_ct_rune_t v32 = *v19;
    __darwin_ct_rune_t v33 = __toupper(48);
    BOOL v30 = v33 != __toupper(v32);
    if (!v14) {
      return v30 & v2;
    }
    return 1;
  }
  if (v18 != 5) {
    goto LABEL_32;
  }
  __darwin_ct_rune_t v20 = *v19;
  __darwin_ct_rune_t v21 = __toupper(102);
  if (v21 != __toupper(v20)) {
    goto LABEL_32;
  }
  __darwin_ct_rune_t v22 = v19[1];
  __darwin_ct_rune_t v23 = __toupper(97);
  if (v23 != __toupper(v22)
    || (__darwin_ct_rune_t v24 = v19[2], v25 = __toupper(108), v25 != __toupper(v24))
    || (__darwin_ct_rune_t v26 = v19[3], v27 = __toupper(115), v27 != __toupper(v26))
    || (v28 = v19[4], __darwin_ct_rune_t v29 = __toupper(101), v29 != __toupper(v28)))
  {
LABEL_32:
    BOOL v30 = 1;
    if (!v14) {
      return v30 & v2;
    }
    return 1;
  }
  BOOL v30 = 0;
  if (v14) {
    return 1;
  }
  return v30 & v2;
}

void sub_37CD90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_37CDBC(uint64_t *a1)
{
  BOOL v2 = (uint64_t *)sub_393298(*a1);
  if (v2)
  {
    std::string __p = operator new(0x40uLL);
    long long v35 = xmmword_20B92B0;
    strcpy((char *)__p, "request_filter.disable_transit_vehicle_position_place_requests");
    LODWORD(v2) = sub_37D6EC(v2, (uint64_t)&__p, 0);
    if (SHIBYTE(v35) < 0) {
      operator delete(__p);
    }
  }
  std::string __p = "disable_transit_vehicle_position_place_requests";
  *(void *)&long long v35 = 47;
  long long v3 = sub_377A30((uint64_t)a1, (char **)&__p);
  uint64_t v4 = *((unsigned __int8 *)v3 + 23);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = (char *)v3;
  }
  else {
    uint64_t v5 = (char *)*v3;
  }
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = v3[1];
  }
  if (v4 == 1)
  {
    __darwin_ct_rune_t v15 = *v5;
    __darwin_ct_rune_t v16 = __toupper(49);
    BOOL v14 = v16 == __toupper(v15);
  }
  else
  {
    if (v4 != 4) {
      goto LABEL_16;
    }
    __darwin_ct_rune_t v6 = *v5;
    __darwin_ct_rune_t v7 = __toupper(116);
    if (v7 != __toupper(v6)) {
      goto LABEL_16;
    }
    __darwin_ct_rune_t v8 = v5[1];
    __darwin_ct_rune_t v9 = __toupper(114);
    if (v9 == __toupper(v8)
      && (__darwin_ct_rune_t v10 = v5[2], v11 = __toupper(117), v11 == __toupper(v10))
      && (__darwin_ct_rune_t v12 = v5[3], v13 = __toupper(101), v13 == __toupper(v12)))
    {
      BOOL v14 = 1;
    }
    else
    {
LABEL_16:
      BOOL v14 = 0;
    }
  }
  std::string __p = "disable_transit_vehicle_position_place_requests";
  *(void *)&long long v35 = 47;
  BOOL v17 = sub_377A30((uint64_t)a1, (char **)&__p);
  uint64_t v18 = *((unsigned __int8 *)v17 + 23);
  if ((v18 & 0x80u) == 0) {
    uint64_t v19 = (char *)v17;
  }
  else {
    uint64_t v19 = (char *)*v17;
  }
  if ((v18 & 0x80u) != 0) {
    uint64_t v18 = v17[1];
  }
  if (v18 == 1)
  {
    __darwin_ct_rune_t v32 = *v19;
    __darwin_ct_rune_t v33 = __toupper(48);
    BOOL v30 = v33 != __toupper(v32);
    if (!v14) {
      return v30 & v2;
    }
    return 1;
  }
  if (v18 != 5) {
    goto LABEL_32;
  }
  __darwin_ct_rune_t v20 = *v19;
  __darwin_ct_rune_t v21 = __toupper(102);
  if (v21 != __toupper(v20)) {
    goto LABEL_32;
  }
  __darwin_ct_rune_t v22 = v19[1];
  __darwin_ct_rune_t v23 = __toupper(97);
  if (v23 != __toupper(v22)
    || (__darwin_ct_rune_t v24 = v19[2], v25 = __toupper(108), v25 != __toupper(v24))
    || (__darwin_ct_rune_t v26 = v19[3], v27 = __toupper(115), v27 != __toupper(v26))
    || (v28 = v19[4], __darwin_ct_rune_t v29 = __toupper(101), v29 != __toupper(v28)))
  {
LABEL_32:
    BOOL v30 = 1;
    if (!v14) {
      return v30 & v2;
    }
    return 1;
  }
  BOOL v30 = 0;
  if (v14) {
    return 1;
  }
  return v30 & v2;
}

void sub_37D08C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_37D0B8(uint64_t *a1)
{
  return sub_395F70(*a1);
}

uint64_t sub_37D0C0(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_37D0C8(void *a1)
{
  uint64_t v1 = *(void ***)nullsub_1(*a1);

  return sub_2ABCE4(v1);
}

uint64_t sub_37D0F8(uint64_t a1)
{
  return sub_4A4604((uint64_t *)(a1 + 560));
}

uint64_t sub_37D100(void *a1, _DWORD *a2)
{
  long long v3 = (void ***)nullsub_1(*a1);

  return sub_73930(v3, a2);
}

uint64_t sub_37D13C(uint64_t a1)
{
  BOOL v2 = *(char **)(a1 + 176);
  if (v2)
  {
    do
    {
      __darwin_ct_rune_t v9 = *(char **)v2;
      sub_80150(v2 + 40, *((char **)v2 + 7));
      __darwin_ct_rune_t v10 = (void *)*((void *)v2 + 5);
      *((void *)v2 + 5) = 0;
      if (v10) {
        operator delete(v10);
      }
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      BOOL v2 = v9;
    }
    while (v9);
  }
  long long v3 = *(void **)(a1 + 160);
  *(void *)(a1 + 160) = 0;
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = *(char **)(a1 + 136);
  if (v4)
  {
    do
    {
      __darwin_ct_rune_t v11 = *(char **)v4;
      sub_57AC8((uint64_t *)v4 + 5);
      if (v4[39] < 0) {
        operator delete(*((void **)v4 + 2));
      }
      operator delete(v4);
      uint64_t v4 = v11;
    }
    while (v11);
  }
  uint64_t v5 = *(void **)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = *(void *)(a1 + 96);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 104);
    __darwin_ct_rune_t v8 = *(void **)(a1 + 96);
    if (v7 == v6)
    {
LABEL_25:
      *(void *)(a1 + 104) = v6;
      operator delete(v8);
      goto LABEL_26;
    }
    while (1)
    {
      if (*(char *)(v7 - 1) < 0)
      {
        operator delete(*(void **)(v7 - 24));
        if (*(char *)(v7 - 25) < 0) {
LABEL_23:
        }
          operator delete(*(void **)(v7 - 48));
      }
      else if (*(char *)(v7 - 25) < 0)
      {
        goto LABEL_23;
      }
      v7 -= 48;
      if (v7 == v6)
      {
        __darwin_ct_rune_t v8 = *(void **)(a1 + 96);
        goto LABEL_25;
      }
    }
  }
LABEL_26:
  __darwin_ct_rune_t v12 = *(std::__shared_weak_count **)(a1 + 88);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    uint64_t v18 = (void **)(a1 + 56);
    sub_84854(&v18);
    __darwin_ct_rune_t v13 = *(char **)(a1 + 32);
    if (!v13) {
      goto LABEL_31;
    }
  }
  else
  {
    uint64_t v18 = (void **)(a1 + 56);
    sub_84854(&v18);
    __darwin_ct_rune_t v13 = *(char **)(a1 + 32);
    if (!v13) {
      goto LABEL_31;
    }
  }
  do
  {
    BOOL v17 = *(char **)v13;
    sub_57AC8((uint64_t *)v13 + 5);
    if (v13[39] < 0) {
      operator delete(*((void **)v13 + 2));
    }
    operator delete(v13);
    __darwin_ct_rune_t v13 = v17;
  }
  while (v17);
LABEL_31:
  BOOL v14 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v14) {
    operator delete(v14);
  }
  __darwin_ct_rune_t v15 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v15 || atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void *sub_37D394(void *a1)
{
  BOOL v2 = (std::__shared_weak_count *)a1[9];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    long long v3 = (std::__shared_weak_count *)a1[7];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    long long v3 = (std::__shared_weak_count *)a1[7];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (std::__shared_weak_count *)a1[3];
    if (!v5) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v5 = (std::__shared_weak_count *)a1[3];
    if (!v5) {
      goto LABEL_13;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_13:
  uint64_t v6 = (std::__shared_weak_count *)a1[1];
  if (!v6 || atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

uint64_t sub_37D548(uint64_t result, uint64_t a2)
{
  *(_OWORD *)BOOL result = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v2 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(void *)(result + 16) = v2;
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(result + 32) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(result + 40) = v4;
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  if (v4)
  {
    unint64_t v5 = *(void *)(v3 + 8);
    unint64_t v6 = *(void *)(result + 24);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6) {
        v5 %= v6;
      }
    }
    else
    {
      v5 &= v6 - 1;
    }
    *(void *)(v2 + 8 * v5) = result + 32;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
  }
  *(void *)(result + 72) = 0;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(result + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(result + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a2 + 80) = 0u;
  *(void *)(result + 112) = 0;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(result + 112) = *(void *)(a2 + 112);
  uint64_t v7 = *(void *)(a2 + 120);
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(void *)(result + 120) = v7;
  *(void *)(result + 128) = *(void *)(a2 + 128);
  *(void *)(a2 + 128) = 0;
  uint64_t v8 = *(void *)(a2 + 136);
  *(void *)(result + 136) = v8;
  uint64_t v9 = *(void *)(a2 + 144);
  *(void *)(result + 144) = v9;
  *(_DWORD *)(result + 152) = *(_DWORD *)(a2 + 152);
  if (v9)
  {
    unint64_t v10 = *(void *)(v8 + 8);
    unint64_t v11 = *(void *)(result + 128);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        v10 %= v11;
      }
    }
    else
    {
      v10 &= v11 - 1;
    }
    *(void *)(v7 + 8 * v10) = result + 136;
    *(void *)(a2 + 136) = 0;
    *(void *)(a2 + 144) = 0;
  }
  uint64_t v12 = *(void *)(a2 + 160);
  *(void *)(a2 + 160) = 0;
  *(void *)(result + 160) = v12;
  *(void *)(result + 168) = *(void *)(a2 + 168);
  *(void *)(a2 + 168) = 0;
  uint64_t v15 = *(void *)(a2 + 176);
  uint64_t v13 = a2 + 176;
  uint64_t v14 = v15;
  *(void *)(result + 176) = v15;
  uint64_t v16 = *(void *)(v13 + 8);
  *(void *)(result + 184) = v16;
  *(_DWORD *)(result + 192) = *(_DWORD *)(v13 + 16);
  if (v16)
  {
    unint64_t v17 = *(void *)(v14 + 8);
    unint64_t v18 = *(void *)(result + 168);
    if ((v18 & (v18 - 1)) != 0)
    {
      if (v17 >= v18) {
        v17 %= v18;
      }
    }
    else
    {
      v17 &= v18 - 1;
    }
    *(void *)(v12 + 8 * v17) = result + 176;
    *(void *)uint64_t v13 = 0;
    *(void *)(v13 + 8) = 0;
  }
  return result;
}

BOOL sub_37D6EC(uint64_t *a1, uint64_t a2, char a3)
{
  sub_84D2C(a1, &v15);
  unint64_t v6 = std::string::append(&v15, ".");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  int v8 = *(char *)(a2 + 23);
  if (v8 >= 0) {
    uint64_t v9 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v9 = *(const std::string::value_type **)a2;
  }
  if (v8 >= 0) {
    std::string::size_type v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v10 = *(void *)(a2 + 8);
  }
  unint64_t v11 = std::string::append(&v16, v9, v10);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  std::string::size_type v18 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  char v20 = a3;
  unsigned __int8 v19 = 0;
  sub_111FCC8(*a1, (uint64_t)__p, &v19, &v20);
  int v13 = v19;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_12:
    operator delete(v16.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v13 != 0;
    }
LABEL_13:
    operator delete(v15.__r_.__value_.__l.__data_);
    return v13 != 0;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_12;
  }
LABEL_9:
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_13;
  }
  return v13 != 0;
}

void sub_37D7F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_37D86C(uint64_t *a1, uint64_t a2, int a3)
{
  sub_84D2C(a1, &v15);
  unint64_t v6 = std::string::append(&v15, ".");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  int v8 = *(char *)(a2 + 23);
  if (v8 >= 0) {
    uint64_t v9 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v9 = *(const std::string::value_type **)a2;
  }
  if (v8 >= 0) {
    std::string::size_type v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v10 = *(void *)(a2 + 8);
  }
  unint64_t v11 = std::string::append(&v16, v9, v10);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  std::string::size_type v18 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  unsigned int v19 = 0;
  int v20 = a3;
  sub_111F9E4(*a1, (uint64_t)__p, &v19, &v20);
  uint64_t v13 = v19;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_12:
    operator delete(v16.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v13;
    }
    goto LABEL_13;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_12;
  }
LABEL_9:
  if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    return v13;
  }
LABEL_13:
  operator delete(v15.__r_.__value_.__l.__data_);
  return v13;
}

void sub_37D984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_37D9F8(uint64_t *a1, uint64_t a2, int a3)
{
  sub_84D2C(a1, &v15);
  unint64_t v6 = std::string::append(&v15, ".");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  int v8 = *(char *)(a2 + 23);
  if (v8 >= 0) {
    uint64_t v9 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v9 = *(const std::string::value_type **)a2;
  }
  if (v8 >= 0) {
    std::string::size_type v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v10 = *(void *)(a2 + 8);
  }
  unint64_t v11 = std::string::append(&v16, v9, v10);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  std::string::size_type v18 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  unsigned int v19 = 0;
  int v20 = a3;
  sub_111F700(*a1, (uint64_t)__p, &v19, &v20);
  uint64_t v13 = v19;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_12:
    operator delete(v16.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v13;
    }
    goto LABEL_13;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_12;
  }
LABEL_9:
  if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    return v13;
  }
LABEL_13:
  operator delete(v15.__r_.__value_.__l.__data_);
  return v13;
}

void sub_37DB10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

char *sub_37DB84(char **a1, uint64_t a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 4);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - v5) >> 4) > v8) {
    unint64_t v8 = 0x5555555555555556 * ((a1[2] - v5) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v5) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v12 = 0x555555555555555;
  }
  else {
    unint64_t v12 = v8;
  }
  if (v12)
  {
    if (v12 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v13 = (char *)operator new(48 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v14 = &v13[48 * v7];
  __darwin_ct_rune_t v24 = &v13[48 * v12];
  char v15 = *a3;
  uint64_t v16 = *a4;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(v14, *(void **)a2, *(void *)(a2 + 8));
    unint64_t v5 = *a1;
    unint64_t v6 = a1[1];
    uint64_t v14 = &v13[48 * v7];
  }
  else
  {
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
  }
  unint64_t v17 = &v13[48 * v7];
  unsigned char v17[24] = v15;
  *((void *)v17 + 4) = v16;
  *((_DWORD *)v17 + 10) = 1;
  std::string::size_type v18 = v17 + 48;
  if (v6 == v5)
  {
    __darwin_ct_rune_t v21 = v5;
  }
  else
  {
    do
    {
      long long v19 = *((_OWORD *)v6 - 3);
      *((void *)v14 - 4) = *((void *)v6 - 4);
      *((_OWORD *)v14 - 3) = v19;
      *((void *)v6 - 5) = 0;
      *((void *)v6 - 4) = 0;
      *((void *)v6 - 6) = 0;
      long long v20 = *(_OWORD *)(v6 - 24);
      *((_DWORD *)v14 - 2) = *((_DWORD *)v6 - 2);
      *(_OWORD *)(v14 - 24) = v20;
      v14 -= 48;
      v6 -= 48;
    }
    while (v6 != v5);
    __darwin_ct_rune_t v21 = *a1;
    unint64_t v5 = a1[1];
  }
  *a1 = v14;
  a1[1] = v18;
  a1[2] = v24;
  if (v5 != v21)
  {
    __darwin_ct_rune_t v22 = (void **)(v5 - 48);
    do
    {
      if (*((char *)v22 + 23) < 0) {
        operator delete(*v22);
      }
      v22 -= 6;
    }
    while (v22 + 6 != (void **)v21);
    unint64_t v5 = v21;
  }
  if (v5) {
    operator delete(v5);
  }
  return v18;
}

void sub_37DD84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_37DD98(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_2438B78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_37DDB8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_2438B78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_37DE0C(uint64_t a1)
{
  return sub_29E11C(a1 + 24);
}

void sub_37DE18(uint64_t a1, uint64_t a2)
{
  unint64_t v17 = 0;
  std::string::size_type v18 = 0;
  uint64_t v19 = 0;
  uint64_t v16 = 0;
  long long v14 = 0u;
  *(_OWORD *)char v15 = 0u;
  *(_OWORD *)unint64_t v12 = 0u;
  *(_OWORD *)uint64_t v13 = 0u;
  char v11 = 0;
  LOBYTE(__p) = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  sub_29DC44(a2, &v17, (long long *)v12, &__p, &v8, 0, (uint64_t)&v6, 1);
  uint64_t v2 = v7;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if ((v11 & 0x80000000) == 0)
    {
LABEL_7:
      if ((SHIBYTE(v16) & 0x80000000) == 0) {
        goto LABEL_8;
      }
      goto LABEL_14;
    }
  }
  else if ((v11 & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete((void *)__p);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
LABEL_8:
    if ((SHIBYTE(v14) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(v15[0]);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
LABEL_9:
    if ((SHIBYTE(v13[0]) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(v13[1]);
  if ((SHIBYTE(v13[0]) & 0x80000000) == 0)
  {
LABEL_10:
    uint64_t v4 = v17;
    if (!v17) {
      return;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(v12[0]);
  uint64_t v4 = v17;
  if (v17)
  {
LABEL_17:
    unint64_t v5 = v18;
    if (v18 == v4)
    {
      std::string::size_type v18 = v4;
      operator delete(v4);
      return;
    }
    while (1)
    {
      if (*((char *)v5 - 1) < 0)
      {
        operator delete(*((void **)v5 - 3));
        if (*((char *)v5 - 25) < 0) {
LABEL_24:
        }
          operator delete(*((void **)v5 - 6));
      }
      else if (*((char *)v5 - 25) < 0)
      {
        goto LABEL_24;
      }
      v5 -= 3;
      if (v5 == v4)
      {
        std::string::size_type v18 = v4;
        operator delete(v17);
        return;
      }
    }
  }
}

void sub_37E008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_14A84((uint64_t)&a10);
  sub_14A84((uint64_t)&a12);
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_29D7B0((uint64_t)&a20);
  sub_1A6DC((void **)(v20 - 40));
  _Unwind_Resume(a1);
}

void sub_37E044(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = (void *)a2[970];
    if (v3)
    {
      a2[971] = v3;
      operator delete(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)a2[487];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    unint64_t v5 = (std::__shared_weak_count *)a2[3];
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = (std::__shared_weak_count *)a2[1];
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    operator delete();
  }
}

void sub_37E178(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = (std::__shared_weak_count *)a2[969];
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)a2[485];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    unint64_t v5 = (std::__shared_weak_count *)a2[1];
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    operator delete();
  }
}

void *sub_37E29C(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[1462];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[1459];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[1459];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)a1[975];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    unint64_t v5 = (std::__shared_weak_count *)a1[972];
    if (!v5) {
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v5 = (std::__shared_weak_count *)a1[972];
    if (!v5) {
      goto LABEL_13;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_13:
  uint64_t v6 = (std::__shared_weak_count *)a1[488];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    unint64_t v7 = (std::__shared_weak_count *)a1[485];
    if (!v7) {
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v7 = (std::__shared_weak_count *)a1[485];
    if (!v7) {
      goto LABEL_19;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_19:
  uint64_t v8 = (std::__shared_weak_count *)a1[1];
  if (!v8 || atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

uint64_t *sub_37E4EC(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *BOOL result = a2;
  if (v2)
  {
    sub_328138(v2 + 3896);
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 24);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete();
  }
  return result;
}

void sub_37E5DC(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = (std::__shared_weak_count *)a2[488];
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)a2[3];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    unint64_t v5 = (std::__shared_weak_count *)a2[1];
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    operator delete();
  }
}

uint64_t sub_37E700(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8008);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 8016);
    uint64_t v4 = *(void **)(a1 + 8008);
    if (v3 == v2)
    {
LABEL_11:
      *(void *)(a1 + 8016) = v2;
      operator delete(v4);
      goto LABEL_12;
    }
    while (1)
    {
      if (*(char *)(v3 - 9) < 0)
      {
        operator delete(*(void **)(v3 - 32));
        if (*(char *)(v3 - 33) < 0) {
LABEL_9:
        }
          operator delete(*(void **)(v3 - 56));
      }
      else if (*(char *)(v3 - 33) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 56;
      if (v3 == v2)
      {
        uint64_t v4 = *(void **)(a1 + 8008);
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  uint64_t v5 = *(void *)(a1 + 7968);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 7976);
    unint64_t v7 = *(void **)(a1 + 7968);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 24;
      }
      while (v6 != v5);
      unint64_t v7 = *(void **)(a1 + 7968);
    }
    *(void *)(a1 + 7976) = v5;
    operator delete(v7);
  }
  uint64_t v8 = *(void *)(a1 + 7936);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 7944);
    std::string::size_type v10 = *(void **)(a1 + 7936);
    if (v9 != v8)
    {
      do
      {
        if (*(char *)(v9 - 1) < 0) {
          operator delete(*(void **)(v9 - 24));
        }
        v9 -= 24;
      }
      while (v9 != v8);
      std::string::size_type v10 = *(void **)(a1 + 7936);
    }
    *(void *)(a1 + 7944) = v8;
    operator delete(v10);
  }
  uint64_t v11 = *(void *)(a1 + 7904);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 7912);
    uint64_t v13 = *(void **)(a1 + 7904);
    if (v12 != v11)
    {
      do
      {
        if (*(char *)(v12 - 9) < 0) {
          operator delete(*(void **)(v12 - 32));
        }
        v12 -= 32;
      }
      while (v12 != v11);
      uint64_t v13 = *(void **)(a1 + 7904);
    }
    *(void *)(a1 + 7912) = v11;
    operator delete(v13);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 7840));
  sub_32834C((void *)(a1 + 16));
  long long v14 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v14 || atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  return a1;
}

void sub_37E8D8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_2438BC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_37E8F8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_2438BC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_37E94C(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  sub_37FCF4(&v1);
}

double sub_37E97C(unint64_t *a1, unint64_t a2, unsigned __int8 a3, unint64_t a4, uint64_t a5)
{
  unsigned __int8 v39 = a3;
  a1[1] = a2;
  unsigned int v9 = std::thread::hardware_concurrency();
  uint64_t v10 = 3;
  if (a5) {
    uint64_t v10 = a5;
  }
  unint64_t v11 = v10 * v9;
  if (v11 <= 1) {
    unint64_t v11 = 1;
  }
  double v12 = (double)a4 * (double)v11;
  if (v12 >= 0.0)
  {
    if (v12 >= 4.50359963e15) {
      goto LABEL_13;
    }
    uint64_t v13 = (uint64_t)(v12 + v12) + 1;
  }
  else
  {
    if (v12 <= -4.50359963e15) {
      goto LABEL_13;
    }
    uint64_t v13 = (uint64_t)(v12 + v12);
    if (v13 >= 1) {
      --v13;
    }
  }
  double v12 = (double)(v13 >> 1);
LABEL_13:
  unint64_t v14 = (unint64_t)v12;
  BOOL v18 = (unint64_t)v12 > 1;
  double v15 = (double)a2;
  if (!v18) {
    unint64_t v14 = 1;
  }
  if (a4 <= 1) {
    unint64_t v16 = 1;
  }
  else {
    unint64_t v16 = a4;
  }
  unint64_t v17 = (unint64_t)(v15 / (double)v16);
  if (v17 <= 1) {
    unint64_t v17 = 1;
  }
  BOOL v18 = v14 > a2 || v11 > v17;
  if (v18) {
    unint64_t v11 = v17;
  }
  *a1 = v11;
  double v19 = v15 / (double)v11;
  if (v19 >= 0.0)
  {
    if (v19 >= 4.50359963e15) {
      goto LABEL_33;
    }
    uint64_t v20 = (uint64_t)(v19 + v19) + 1;
  }
  else
  {
    uint64_t v20 = (uint64_t)(v19 + v19);
    if (v20 >= 1) {
      --v20;
    }
  }
  double v19 = (double)(v20 >> 1);
LABEL_33:
  if ((unint64_t)v19 > a4) {
    a4 = (unint64_t)v19;
  }
  unint64_t v38 = a4;
  if (!sub_723EC(2u))
  {
    unint64_t v22 = a1[2];
    unint64_t v23 = a1[3];
    __darwin_ct_rune_t v21 = (uint64_t *)(a1 + 2);
    if (v23 == v22) {
      goto LABEL_43;
    }
    goto LABEL_46;
  }
  sub_6BAC((uint64_t)v36);
  sub_188FC78(v36, (uint64_t)"PartitionedLRUCache: creating ", 30);
  __darwin_ct_rune_t v24 = (void *)std::ostream::operator<<();
  sub_188FC78(v24, (uint64_t)" partitions, ", 13);
  __darwin_ct_rune_t v25 = (void *)std::ostream::operator<<();
  sub_188FC78(v25, (uint64_t)" bytes each", 11);
  std::stringbuf::str();
  sub_7246C((uint64_t *)&__p, 2u);
  if (v35 < 0) {
    operator delete(__p);
  }
  if (v37 < 0) {
    operator delete((void *)v36[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  unint64_t v22 = a1[2];
  unint64_t v23 = a1[3];
  __darwin_ct_rune_t v21 = (uint64_t *)(a1 + 2);
  if (v23 != v22)
  {
    do
    {
LABEL_46:
      unint64_t v29 = v23 - 272;
      if (*(void *)(v23 - 72))
      {
        sub_37EF4C(v23 - 272);
        BOOL v30 = sub_2DA84();
        sub_2DD20((uint64_t)v30, *(size_t **)(v23 - 72));
      }
      std::mutex::~mutex((std::mutex *)(v23 - 64));
      sub_37F100((uint64_t *)(v23 - 272));
      v23 -= 272;
    }
    while (v29 != v22);
  }
LABEL_43:
  a1[3] = v22;
  sub_37EE4C(v21, *a1);
  if (*a1)
  {
    unint64_t v27 = 0;
    unint64_t v28 = a1[3];
    do
    {
      while (v28 >= a1[4])
      {
        unint64_t v28 = sub_37FAA8(v21, (uint64_t *)&v38, &v39);
        a1[3] = v28;
        if (++v27 >= *a1) {
          return result;
        }
      }
      uint64_t v31 = v38;
      int v32 = v39;
      *(void *)unint64_t v28 = v28;
      *(void *)(v28 + 8) = v28;
      *(_OWORD *)(v28 + 16) = xmmword_20E2350;
      *(_OWORD *)(v28 + 32) = 0u;
      *(_OWORD *)(v28 + 48) = 0u;
      *(_OWORD *)(v28 + 64) = 0u;
      *(_OWORD *)(v28 + 80) = 0u;
      *(_OWORD *)(v28 + 96) = 0u;
      *(_OWORD *)(v28 + 112) = 0u;
      *(void *)(v28 + 128) = 0;
      *(void *)(v28 + 144) = 0;
      *(void *)(v28 + 152) = 0;
      *(void *)(v28 + 160) = 0;
      *(void *)(v28 + 168) = v31;
      *(void *)(v28 + 184) = 0;
      *(void *)(v28 + 192) = 0;
      *(void *)(v28 + 176) = 0;
      if (v32)
      {
        __darwin_ct_rune_t v33 = sub_2DA84();
        sub_2DB0C((uint64_t)v33);
      }
      *(void *)(v28 + 200) = 0;
      *(void *)(v28 + 208) = 850045863;
      double result = 0.0;
      *(_OWORD *)(v28 + 216) = 0u;
      *(_OWORD *)(v28 + 232) = 0u;
      *(_OWORD *)(v28 + 248) = 0u;
      *(void *)(v28 + 264) = 0;
      v28 += 272;
      a1[3] = v28;
      a1[3] = v28;
      ++v27;
    }
    while (v27 < *a1);
  }
  return result;
}

void sub_37EDDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a17);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_37EE18(_Unwind_Exception *a1)
{
  sub_37F100(v2);
  *(void *)(v1 + 24) = v2;
  _Unwind_Resume(a1);
}

void sub_37EE30(_Unwind_Exception *a1)
{
  sub_37F100(v2);
  *(void *)(v1 + 24) = v2;
  _Unwind_Resume(a1);
}

uint64_t *sub_37EE4C(uint64_t *result, unint64_t a2)
{
  uint64_t v2 = (uint64_t)(result + 2);
  uint64_t v3 = *result;
  if (0xF0F0F0F0F0F0F0F1 * ((result[2] - *result) >> 4) < a2)
  {
    uint64_t v4 = result;
    if (a2 >= 0xF0F0F0F0F0F0F1) {
      sub_2E00();
    }
    uint64_t v5 = result[1];
    uint64_t v13 = result + 2;
    uint64_t v6 = 272 * a2;
    unint64_t v11 = (char *)operator new(272 * a2);
    *(void *)double v12 = &v11[v5 - v3];
    *(void *)&v12[8] = *(void *)v12;
    *(void *)&v12[16] = &v11[v6];
    sub_37F80C(v2, v5, v5, v3, v3, *(uint64_t *)v12, *(uint64_t *)v12);
    uint64_t v7 = v4[2];
    long long v8 = *(_OWORD *)&v12[8];
    long long v9 = *(_OWORD *)v4;
    *uint64_t v4 = v10;
    *(_OWORD *)double v12 = v9;
    *(_OWORD *)(v4 + 1) = v8;
    *(void *)&v12[16] = v7;
    unint64_t v11 = (char *)v9;
    return (uint64_t *)sub_37FA20((uint64_t)&v11);
  }
  return result;
}

void sub_37EF38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_37FA20((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_37EF4C(uint64_t a1)
{
  uint64_t v13 = (uint64_t *)&v13;
  unint64_t v14 = &v13;
  uint64_t v15 = 0;
  uint64_t v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  for (uint64_t i = *(unsigned int **)(a1 + 8); i != (unsigned int *)a1; uint64_t i = *(unsigned int **)(a1 + 8))
  {
    uint64_t v4 = *(void *)(a1 + 160);
    if (!v4) {
      break;
    }
    *(void *)(a1 + 160) = v4 - *((void *)i + 9);
    sub_37F2B8((int64x2_t *)(a1 + 88), i + 4);
    if (i != (unsigned int *)&v13)
    {
      uint64_t v5 = (uint64_t **)*((void *)i + 1);
      if (v5 != &v13)
      {
        uint64_t v6 = *(void *)i;
        *(void *)(v6 + 8) = v5;
        **((void **)i + 1) = v6;
        uint64_t v7 = v13;
        v13[1] = (uint64_t)i;
        *(void *)uint64_t i = v7;
        *((void *)i + 1) = &v13;
        --*(void *)(a1 + 16);
        uint64_t v13 = (uint64_t *)i;
        ++v15;
      }
    }
  }
  std::mutex::unlock(v2);
  if (v15)
  {
    long long v8 = v13;
    long long v9 = v14;
    uint64_t v10 = *v14;
    v10[1] = v13[1];
    *(void *)v8[1] = v10;
    uint64_t v15 = 0;
    if (v9 != &v13)
    {
      do
      {
        unint64_t v11 = (uint64_t **)v9[1];
        double v12 = (std::__shared_weak_count *)v9[8];
        if (v12)
        {
          if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        operator delete(v9);
        long long v9 = v11;
      }
      while (v11 != &v13);
    }
  }
}

void sub_37F0D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_37F1F0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_37F0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::mutex::unlock(v10);
  sub_37F1F0(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_37F100(uint64_t *a1)
{
  uint64_t v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = (uint64_t)v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = (uint64_t)v3;
    operator delete(v3);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 3));
  if (a1[2])
  {
    uint64_t v4 = *a1;
    uint64_t v5 = (uint64_t *)a1[1];
    uint64_t v6 = *v5;
    *(void *)(v6 + 8) = *(void *)(*a1 + 8);
    **(void **)(v4 + 8) = v6;
    a1[2] = 0;
    if (v5 != a1)
    {
      do
      {
        uint64_t v7 = (uint64_t *)v5[1];
        long long v8 = (std::__shared_weak_count *)v5[8];
        if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        operator delete(v5);
        uint64_t v5 = v7;
      }
      while (v7 != a1);
    }
  }
  return a1;
}

uint64_t *sub_37F1F0(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (std::__shared_weak_count *)v3[8];
        if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

uint64_t sub_37F2B8(int64x2_t *a1, unsigned int *a2)
{
  uint64_t v3 = a1[1].i64[1];
  uint64_t v2 = a1[2].i64[0];
  if (v3 == v2) {
    return 0;
  }
  unint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  unint64_t v6 = (v5 + (v4 << 6) + (v4 >> 2) + 2654435769u) ^ v4;
  uint64_t v7 = *((unsigned __int16 *)a2 + 4);
  unint64_t v8 = (v7 + (v6 << 6) + (v6 >> 2) + 2654435769u) ^ v6;
  uint64_t v9 = *((unsigned __int16 *)a2 + 5);
  unint64_t v10 = (v9 + (v8 << 6) + (v8 >> 2) + 2654435769u) ^ v8;
  uint64_t v11 = a2[3];
  uint64_t v12 = (int)a2[4];
  unint64_t v13 = (v11 + (v10 << 6) + (v10 >> 2) + 2654435769u) ^ v10;
  unint64_t v14 = (v12 + (v13 << 6) + (v13 >> 2) + 2654435769u) ^ v13;
  uint64_t v15 = (int)a2[5];
  uint64_t v16 = (int)a2[6];
  unint64_t v17 = (v15 + (v14 << 6) + (v14 >> 2) + 2654435769u) ^ v14;
  unint64_t v18 = (v16 + (v17 << 6) + (v17 >> 2) + 2654435769u) ^ v17;
  uint64_t v19 = *((unsigned __int8 *)a2 + 28);
  unint64_t v20 = (v19 + (v18 << 6) + (v18 >> 2) + 2654435769u) ^ v18;
  uint64_t v21 = *((unsigned __int16 *)a2 + 15);
  unint64_t v22 = (v21 + (v20 << 6) + (v20 >> 2) + 2654435769u) ^ v20;
  uint64_t v23 = a2[8];
  uint64_t v24 = a1->i64[0];
  unint64_t v25 = ((v23 + (v22 << 6) + (v22 >> 2) + 2654435769u) ^ v22) % (a1->i64[1] - a1->i64[0]);
  unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((v2 - v3) >> 4);
  while (1)
  {
    if (*(unsigned char *)(v24 + v25) != 1)
    {
      if (!*(unsigned char *)(v24 + v25)) {
        return 0;
      }
      unint64_t v27 = v3 + 48 * v25;
      if (v4 == *(_DWORD *)v27
        && v5 == *(_DWORD *)(v27 + 4)
        && *(unsigned __int16 *)(v27 + 8) == v7
        && *(unsigned __int16 *)(v27 + 10) == v9
        && v11 == *(_DWORD *)(v27 + 12)
        && v12 == *(_DWORD *)(v27 + 16)
        && v15 == *(_DWORD *)(v27 + 20)
        && v16 == *(_DWORD *)(v27 + 24)
        && v19 == *(unsigned __int8 *)(v27 + 28)
        && *(unsigned __int16 *)(v27 + 30) == v21
        && v23 == *(_DWORD *)(v27 + 32))
      {
        break;
      }
    }
    if (v25 == v26 - 1) {
      unint64_t v25 = 0;
    }
    else {
      ++v25;
    }
  }
  uint64_t v28 = 1;
  *(unsigned char *)(v24 + v25) = 1;
  uint64_t v29 = a1[3].i64[1] - 1;
  a1[3].i64[1] = v29;
  if (v26 > 8 * v29)
  {
    sub_37F4B8(a1);
    return 1;
  }
  return v28;
}

void sub_37F4B8(int64x2_t *a1)
{
  unint64_t v2 = 0;
  uint64_t v3 = a1[3].i64[1];
  do
    ++v2;
  while (3 * v3 > (unint64_t)(1 << v2));
  if (v2 >= 0x3B) {
    sub_2E00();
  }
  unint64_t v4 = (char *)operator new(48 << v2);
  uint64_t v5 = v4;
  size_t v6 = 1 << v2;
  unint64_t v7 = (unint64_t)&v4[48 * (1 << v2)];
  int v32 = v4;
  v33.i64[1] = v7;
  unint64_t v8 = v4;
  do
  {
    *(_OWORD *)unint64_t v8 = 0uLL;
    *((_OWORD *)v8 + 1) = 0uLL;
    *(void *)(v8 + 4) = -1;
    *((_DWORD *)v8 + 3) = -1;
    *((void *)v8 + 2) = 0x8000000080000000;
    *((_DWORD *)v8 + 6) = 0x7FFFFFFF;
    *((_WORD *)v8 + 15) = -1;
    *((_DWORD *)v8 + 8) = -1;
    *((void *)v8 + 5) = 0;
    v8 += 48;
  }
  while (v8 != (char *)v7);
  v33.i64[0] = (uint64_t)&v4[48 * (1 << v2)];
  uint64_t v9 = (char *)operator new(1 << v2);
  unint64_t v10 = (unint64_t)&v9[v6];
  BOOL v30 = v9;
  v31.i64[1] = (uint64_t)&v9[v6];
  bzero(v9, v6);
  v31.i64[0] = (uint64_t)&v9[v6];
  a1[4].i64[0] = v3;
  uint64_t v12 = a1->i64[0];
  uint64_t v11 = (char *)a1->i64[1];
  if (v11 == (char *)a1->i64[0])
  {
    uint64_t v29 = (void *)a1[1].i64[1];
    a1[1].i64[1] = (uint64_t)v5;
    a1[2] = vdupq_n_s64(v7);
    a1->i64[0] = (uint64_t)v9;
    *(int64x2_t *)((char *)a1 + 8) = vdupq_n_s64(v10);
    if (v11) {
LABEL_18:
    }
      operator delete(v11);
  }
  else
  {
    unint64_t v13 = 0;
    do
    {
      if (*(unsigned char *)(v12 + v13) == 2)
      {
        uint64_t v17 = a1[1].i64[1];
        unint64_t v18 = (unsigned int *)(v17 + 48 * v13);
        unint64_t v19 = (v18[1] + 2654435769 + ((unint64_t)*v18 << 6) + ((unint64_t)*v18 >> 2)) ^ *v18;
        unint64_t v20 = (*((unsigned __int16 *)v18 + 4) + 2654435769 + (v19 << 6) + (v19 >> 2)) ^ v19;
        unint64_t v21 = (*((unsigned __int16 *)v18 + 5) + 2654435769 + (v20 << 6) + (v20 >> 2)) ^ v20;
        unint64_t v22 = (v18[3] + 2654435769 + (v21 << 6) + (v21 >> 2)) ^ v21;
        unint64_t v23 = ((int)v18[4] + 2654435769 + (v22 << 6) + (v22 >> 2)) ^ v22;
        unint64_t v24 = ((int)v18[5] + 2654435769 + (v23 << 6) + (v23 >> 2)) ^ v23;
        unint64_t v25 = ((int)v18[6] + 2654435769 + (v24 << 6) + (v24 >> 2)) ^ v24;
        unint64_t v26 = (*((unsigned __int8 *)v18 + 28) + 2654435769 + (v25 << 6) + (v25 >> 2)) ^ v25;
        unint64_t v27 = (*((unsigned __int16 *)v18 + 15) + 2654435769 + (v26 << 6) + (v26 >> 2)) ^ v26;
        unint64_t v28 = ((v18[8] + 2654435769 + (v27 << 6) + (v27 >> 2)) ^ v27) % (v10 - (unint64_t)v9);
        while (v9[v28])
        {
          if (v28 == v10 - (void)v9 - 1) {
            unint64_t v28 = 0;
          }
          else {
            ++v28;
          }
        }
        uint64_t v5 = v32;
        unint64_t v14 = &v32[48 * v28];
        long long v15 = *(_OWORD *)v18;
        long long v16 = *((_OWORD *)v18 + 1);
        *((_DWORD *)v14 + 8) = v18[8];
        *(_OWORD *)unint64_t v14 = v15;
        *((_OWORD *)v14 + 1) = v16;
        *((void *)v14 + 5) = *(void *)(v17 + 48 * v13 + 40);
        uint64_t v9 = v30;
        v30[v28] = 2;
        uint64_t v12 = a1->i64[0];
        uint64_t v11 = (char *)a1->i64[1];
      }
      ++v13;
    }
    while (v13 < (unint64_t)&v11[-v12]);
    uint64_t v11 = (char *)v12;
    uint64_t v29 = (void *)a1[1].i64[1];
    a1[1].i64[1] = (uint64_t)v5;
    a1[2] = v33;
    a1->i64[0] = (uint64_t)v9;
    *(int64x2_t *)((char *)a1 + 8) = v31;
    if (v12) {
      goto LABEL_18;
    }
  }
  if (v29)
  {
    operator delete(v29);
  }
}

void sub_37F7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  operator delete(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_37F80C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  uint64_t v14 = a7;
  if (a3 != a5)
  {
    uint64_t v8 = a3;
    long long v9 = 0uLL;
    do
    {
      unint64_t v10 = (void *)(v7 - 272);
      uint64_t v11 = *(void *)(v8 - 104);
      *unint64_t v10 = v10;
      v10[1] = v10;
      *(_OWORD *)(v7 - 256) = xmmword_20E2350;
      *(_OWORD *)(v7 - 240) = v9;
      *(_OWORD *)(v7 - 224) = v9;
      *(_OWORD *)(v7 - 208) = v9;
      *(_OWORD *)(v7 - 192) = v9;
      *(_OWORD *)(v7 - 176) = v9;
      *(_OWORD *)(v7 - 160) = v9;
      *(void *)(v7 - 144) = 0;
      *(void *)(v7 - 128) = 0;
      *(void *)(v7 - 120) = 0;
      *(void *)(v7 - 112) = 0;
      *(void *)(v7 - 104) = v11;
      *(void *)(v7 - 88) = 0;
      *(void *)(v7 - 80) = 0;
      *(void *)(v7 - 96) = 0;
      if (*(void *)(v8 - 72))
      {
        uint64_t v12 = sub_2DA84();
        sub_2DB0C((uint64_t)v12);
      }
      v8 -= 272;
      *(void *)(v7 - 72) = 0;
      *(void *)(v7 - 64) = 850045863;
      long long v9 = 0uLL;
      *(_OWORD *)(v7 - 56) = 0u;
      *(_OWORD *)(v7 - 40) = 0u;
      *(_OWORD *)(v7 - 24) = 0u;
      *(void *)(v7 - 8) = 0;
      uint64_t v7 = v14 - 272;
      v14 -= 272;
    }
    while (v8 != a5);
  }
  return a6;
}

void sub_37F968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_37F100(v3);
  sub_37F988((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_37F988(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
    unint64_t v4 = *(std::mutex **)(*(void *)(a1 + 8) + 8);
    if ((std::mutex *)v3 != v4)
    {
      uint64_t v5 = (std::mutex *)(v3 + 208);
      do
      {
        if (*(void *)&v5[-1].__m_.__opaque[48])
        {
          sub_37EF4C((uint64_t)&v5[-4].__m_.__opaque[40]);
          uint64_t v7 = sub_2DA84();
          sub_2DD20((uint64_t)v7, *(size_t **)&v5[-1].__m_.__opaque[48]);
        }
        std::mutex::~mutex(v5);
        sub_37F100((uint64_t *)&v5[-4].__m_.__opaque[40]);
        size_t v6 = v5 + 1;
        uint64_t v5 = (std::mutex *)((char *)v5 + 272);
      }
      while (v6 != v4);
    }
  }
  return a1;
}

uint64_t sub_37FA20(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 272;
    if (*(void *)(i - 72))
    {
      sub_37EF4C(i - 272);
      unint64_t v4 = sub_2DA84();
      sub_2DD20((uint64_t)v4, *(size_t **)(i - 72));
    }
    std::mutex::~mutex((std::mutex *)(i - 64));
    sub_37F100((uint64_t *)(i - 272));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_37FAA8(uint64_t *a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = 0xF0F0F0F0F0F0F0F1 * ((v5 - *a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0xF0F0F0F0F0F0F0) {
    sub_2E00();
  }
  if (0xE1E1E1E1E1E1E1E2 * ((a1[2] - v4) >> 4) > v7) {
    unint64_t v7 = 0xE1E1E1E1E1E1E1E2 * ((a1[2] - v4) >> 4);
  }
  if (0xF0F0F0F0F0F0F0F1 * ((a1[2] - v4) >> 4) >= 0x78787878787878) {
    unint64_t v10 = 0xF0F0F0F0F0F0F0;
  }
  else {
    unint64_t v10 = v7;
  }
  unint64_t v24 = a1 + 2;
  if (v10)
  {
    if (v10 > 0xF0F0F0F0F0F0F0) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(272 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = (uint64_t)&v11[272 * v6];
  unint64_t v22 = v11;
  *(void *)unint64_t v23 = v12;
  *(void *)&unsigned char v23[8] = v12;
  *(void *)&v23[16] = &v11[272 * v10];
  uint64_t v13 = *a2;
  int v14 = *a3;
  *(void *)uint64_t v12 = v12;
  *(void *)(v12 + 8) = v12;
  *(_OWORD *)(v12 + 16) = xmmword_20E2350;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_OWORD *)(v12 + 80) = 0u;
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  *(void *)(v12 + 128) = 0;
  *(void *)(v12 + 144) = 0;
  *(void *)(v12 + 152) = 0;
  *(void *)(v12 + 160) = 0;
  *(void *)(v12 + 168) = v13;
  *(void *)(v12 + 184) = 0;
  *(void *)(v12 + 192) = 0;
  *(void *)(v12 + 176) = 0;
  if (v14)
  {
    long long v15 = sub_2DA84();
    sub_2DB0C((uint64_t)v15);
  }
  long long v16 = &v11[272 * v6];
  *((void *)v16 + 25) = 0;
  *((void *)v16 + 26) = 850045863;
  *(_OWORD *)(v16 + 216) = 0u;
  *(_OWORD *)(v16 + 232) = 0u;
  *(_OWORD *)(v16 + 248) = 0u;
  *((void *)v16 + 33) = 0;
  *(void *)&unsigned char v23[8] = v16 + 272;
  sub_37F80C((uint64_t)(a1 + 2), v5, v5, v4, v4, v12, v12);
  uint64_t v17 = a1[2];
  long long v18 = *(_OWORD *)&v23[8];
  long long v19 = *(_OWORD *)a1;
  *a1 = v20;
  *(_OWORD *)unint64_t v23 = v19;
  *(_OWORD *)(a1 + 1) = v18;
  *(void *)&v23[16] = v17;
  unint64_t v22 = (char *)v19;
  sub_37FA20((uint64_t)&v22);
  return (uint64_t)&v11[272 * v6 + 272];
}

void sub_37FCC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_37F100(v4);
  sub_37FA20((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_37FCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_37FA20((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_37FCF4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (size_t **)**a1;
  if (v2)
  {
    uint64_t v4 = (size_t **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = v4 - 34;
        if (*(v4 - 9))
        {
          sub_37EF4C((uint64_t)(v4 - 34));
          unint64_t v7 = sub_2DA84();
          sub_2DD20((uint64_t)v7, *(v4 - 9));
        }
        std::mutex::~mutex((std::mutex *)v4 - 1);
        sub_37F100((uint64_t *)v4 - 34);
        v4 -= 34;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_37FDB8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_2438C18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_37FDD8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_2438C18;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_37FE2C(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  sub_381044(&v1);
}

double sub_37FE5C(unint64_t *a1, unint64_t a2, unsigned __int8 a3, unint64_t a4, uint64_t a5)
{
  unsigned __int8 v39 = a3;
  a1[1] = a2;
  unsigned int v9 = std::thread::hardware_concurrency();
  uint64_t v10 = 3;
  if (a5) {
    uint64_t v10 = a5;
  }
  unint64_t v11 = v10 * v9;
  if (v11 <= 1) {
    unint64_t v11 = 1;
  }
  double v12 = (double)a4 * (double)v11;
  if (v12 >= 0.0)
  {
    if (v12 >= 4.50359963e15) {
      goto LABEL_13;
    }
    uint64_t v13 = (uint64_t)(v12 + v12) + 1;
  }
  else
  {
    if (v12 <= -4.50359963e15) {
      goto LABEL_13;
    }
    uint64_t v13 = (uint64_t)(v12 + v12);
    if (v13 >= 1) {
      --v13;
    }
  }
  double v12 = (double)(v13 >> 1);
LABEL_13:
  unint64_t v14 = (unint64_t)v12;
  BOOL v18 = (unint64_t)v12 > 1;
  double v15 = (double)a2;
  if (!v18) {
    unint64_t v14 = 1;
  }
  if (a4 <= 1) {
    unint64_t v16 = 1;
  }
  else {
    unint64_t v16 = a4;
  }
  unint64_t v17 = (unint64_t)(v15 / (double)v16);
  if (v17 <= 1) {
    unint64_t v17 = 1;
  }
  BOOL v18 = v14 > a2 || v11 > v17;
  if (v18) {
    unint64_t v11 = v17;
  }
  *a1 = v11;
  double v19 = v15 / (double)v11;
  if (v19 >= 0.0)
  {
    if (v19 >= 4.50359963e15) {
      goto LABEL_33;
    }
    uint64_t v20 = (uint64_t)(v19 + v19) + 1;
  }
  else
  {
    uint64_t v20 = (uint64_t)(v19 + v19);
    if (v20 >= 1) {
      --v20;
    }
  }
  double v19 = (double)(v20 >> 1);
LABEL_33:
  if ((unint64_t)v19 > a4) {
    a4 = (unint64_t)v19;
  }
  unint64_t v38 = a4;
  if (!sub_723EC(2u))
  {
    unint64_t v22 = a1[2];
    unint64_t v23 = a1[3];
    unint64_t v21 = (uint64_t *)(a1 + 2);
    if (v23 == v22) {
      goto LABEL_43;
    }
    goto LABEL_46;
  }
  sub_6BAC((uint64_t)v36);
  sub_188FC78(v36, (uint64_t)"PartitionedLRUCache: creating ", 30);
  unint64_t v24 = (void *)std::ostream::operator<<();
  sub_188FC78(v24, (uint64_t)" partitions, ", 13);
  unint64_t v25 = (void *)std::ostream::operator<<();
  sub_188FC78(v25, (uint64_t)" bytes each", 11);
  std::stringbuf::str();
  sub_7246C((uint64_t *)&__p, 2u);
  if (v35 < 0) {
    operator delete(__p);
  }
  if (v37 < 0) {
    operator delete((void *)v36[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  unint64_t v22 = a1[2];
  unint64_t v23 = a1[3];
  unint64_t v21 = (uint64_t *)(a1 + 2);
  if (v23 != v22)
  {
    do
    {
LABEL_46:
      unint64_t v29 = v23 - 272;
      if (*(void *)(v23 - 72))
      {
        sub_38042C(v23 - 272);
        BOOL v30 = sub_2DA84();
        sub_2DD20((uint64_t)v30, *(size_t **)(v23 - 72));
      }
      std::mutex::~mutex((std::mutex *)(v23 - 64));
      sub_3805E0((uint64_t *)(v23 - 272));
      v23 -= 272;
    }
    while (v29 != v22);
  }
LABEL_43:
  a1[3] = v22;
  sub_38032C(v21, *a1);
  if (*a1)
  {
    unint64_t v27 = 0;
    unint64_t v28 = a1[3];
    do
    {
      while (v28 >= a1[4])
      {
        unint64_t v28 = sub_380DF8(v21, (uint64_t *)&v38, &v39);
        a1[3] = v28;
        if (++v27 >= *a1) {
          return result;
        }
      }
      uint64_t v31 = v38;
      int v32 = v39;
      *(void *)unint64_t v28 = v28;
      *(void *)(v28 + 8) = v28;
      *(_OWORD *)(v28 + 16) = xmmword_20E2350;
      *(_OWORD *)(v28 + 32) = 0u;
      *(_OWORD *)(v28 + 48) = 0u;
      *(_OWORD *)(v28 + 64) = 0u;
      *(_OWORD *)(v28 + 80) = 0u;
      *(_OWORD *)(v28 + 96) = 0u;
      *(_OWORD *)(v28 + 112) = 0u;
      *(void *)(v28 + 128) = 0;
      *(void *)(v28 + 144) = 0;
      *(void *)(v28 + 152) = 0;
      *(void *)(v28 + 160) = 0;
      *(void *)(v28 + 168) = v31;
      *(void *)(v28 + 184) = 0;
      *(void *)(v28 + 192) = 0;
      *(void *)(v28 + 176) = 0;
      if (v32)
      {
        int64x2_t v33 = sub_2DA84();
        sub_2DB0C((uint64_t)v33);
      }
      *(void *)(v28 + 200) = 0;
      *(void *)(v28 + 208) = 850045863;
      double result = 0.0;
      *(_OWORD *)(v28 + 216) = 0u;
      *(_OWORD *)(v28 + 232) = 0u;
      *(_OWORD *)(v28 + 248) = 0u;
      *(void *)(v28 + 264) = 0;
      v28 += 272;
      a1[3] = v28;
      a1[3] = v28;
      ++v27;
    }
    while (v27 < *a1);
  }
  return result;
}

void sub_3802BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a17);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_3802F8(_Unwind_Exception *a1)
{
  sub_3805E0(v2);
  *(void *)(v1 + 24) = v2;
  _Unwind_Resume(a1);
}

void sub_380310(_Unwind_Exception *a1)
{
  sub_3805E0(v2);
  *(void *)(v1 + 24) = v2;
  _Unwind_Resume(a1);
}

uint64_t *sub_38032C(uint64_t *result, unint64_t a2)
{
  uint64_t v2 = (uint64_t)(result + 2);
  uint64_t v3 = *result;
  if (0xF0F0F0F0F0F0F0F1 * ((result[2] - *result) >> 4) < a2)
  {
    uint64_t v4 = result;
    if (a2 >= 0xF0F0F0F0F0F0F1) {
      sub_2E00();
    }
    uint64_t v5 = result[1];
    uint64_t v13 = result + 2;
    uint64_t v6 = 272 * a2;
    unint64_t v11 = (char *)operator new(272 * a2);
    *(void *)double v12 = &v11[v5 - v3];
    *(void *)&v12[8] = *(void *)v12;
    *(void *)&v12[16] = &v11[v6];
    sub_380B5C(v2, v5, v5, v3, v3, *(uint64_t *)v12, *(uint64_t *)v12);
    uint64_t v7 = v4[2];
    long long v8 = *(_OWORD *)&v12[8];
    long long v9 = *(_OWORD *)v4;
    *uint64_t v4 = v10;
    *(_OWORD *)double v12 = v9;
    *(_OWORD *)(v4 + 1) = v8;
    *(void *)&v12[16] = v7;
    unint64_t v11 = (char *)v9;
    return (uint64_t *)sub_380D70((uint64_t)&v11);
  }
  return result;
}

void sub_380418(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_380D70((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_38042C(uint64_t a1)
{
  uint64_t v13 = (uint64_t *)&v13;
  unint64_t v14 = &v13;
  uint64_t v15 = 0;
  uint64_t v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  for (uint64_t i = *(unsigned int **)(a1 + 8); i != (unsigned int *)a1; uint64_t i = *(unsigned int **)(a1 + 8))
  {
    uint64_t v4 = *(void *)(a1 + 160);
    if (!v4) {
      break;
    }
    *(void *)(a1 + 160) = v4 - *((void *)i + 9);
    sub_3806E0((uint64_t *)(a1 + 88), i + 4);
    if (i != (unsigned int *)&v13)
    {
      uint64_t v5 = (uint64_t **)*((void *)i + 1);
      if (v5 != &v13)
      {
        uint64_t v6 = *(void *)i;
        *(void *)(v6 + 8) = v5;
        **((void **)i + 1) = v6;
        uint64_t v7 = v13;
        v13[1] = (uint64_t)i;
        *(void *)uint64_t i = v7;
        *((void *)i + 1) = &v13;
        --*(void *)(a1 + 16);
        uint64_t v13 = (uint64_t *)i;
        ++v15;
      }
    }
  }
  std::mutex::unlock(v2);
  if (v15)
  {
    long long v8 = v13;
    long long v9 = v14;
    uint64_t v10 = *v14;
    v10[1] = v13[1];
    *(void *)v8[1] = v10;
    uint64_t v15 = 0;
    if (v9 != &v13)
    {
      do
      {
        unint64_t v11 = (uint64_t **)v9[1];
        double v12 = (std::__shared_weak_count *)v9[8];
        if (v12)
        {
          if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        operator delete(v9);
        long long v9 = v11;
      }
      while (v11 != &v13);
    }
  }
}

void sub_3805B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_37F1F0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_3805C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::mutex::unlock(v10);
  sub_37F1F0(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_3805E0(uint64_t *a1)
{
  uint64_t v2 = (void *)a1[22];
  if (v2)
  {
    a1[23] = (uint64_t)v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = (uint64_t)v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = (uint64_t)v4;
    operator delete(v4);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 3));
  if (a1[2])
  {
    uint64_t v5 = *a1;
    uint64_t v6 = (uint64_t *)a1[1];
    uint64_t v7 = *v6;
    *(void *)(v7 + 8) = *(void *)(*a1 + 8);
    **(void **)(v5 + 8) = v7;
    a1[2] = 0;
    if (v6 != a1)
    {
      do
      {
        long long v8 = (uint64_t *)v6[1];
        long long v9 = (std::__shared_weak_count *)v6[8];
        if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        operator delete(v6);
        uint64_t v6 = v8;
      }
      while (v8 != a1);
    }
  }
  return a1;
}

uint64_t sub_3806E0(uint64_t *a1, unsigned int *a2)
{
  uint64_t v3 = a1[3];
  uint64_t v2 = a1[4];
  if (v3 == v2) {
    return 0;
  }
  unint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  unint64_t v6 = (v5 + (v4 << 6) + (v4 >> 2) + 2654435769u) ^ v4;
  uint64_t v7 = a2[2];
  uint64_t v8 = (int)a2[3];
  unint64_t v9 = (v7 + (v6 << 6) + (v6 >> 2) + 2654435769u) ^ v6;
  unint64_t v10 = (v8 + (v9 << 6) + (v9 >> 2) + 2654435769u) ^ v9;
  uint64_t v11 = (int)a2[4];
  uint64_t v12 = (int)a2[5];
  unint64_t v13 = (v11 + (v10 << 6) + (v10 >> 2) + 2654435769u) ^ v10;
  unint64_t v14 = (v12 + (v13 << 6) + (v13 >> 2) + 2654435769u) ^ v13;
  uint64_t v15 = *((unsigned __int8 *)a2 + 24);
  unint64_t v16 = (v15 + (v14 << 6) + (v14 >> 2) + 2654435769u) ^ v14;
  uint64_t v17 = *((unsigned __int16 *)a2 + 13);
  unint64_t v18 = (v17 + (v16 << 6) + (v16 >> 2) + 2654435769u) ^ v16;
  uint64_t v19 = a2[7];
  uint64_t v20 = *a1;
  unint64_t v21 = ((v19 + (v18 << 6) + (v18 >> 2) + 2654435769u) ^ v18) % (a1[1] - *a1);
  unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((v2 - v3) >> 4);
  while (1)
  {
    if (*(unsigned char *)(v20 + v21) != 1)
    {
      if (!*(unsigned char *)(v20 + v21)) {
        return 0;
      }
      uint64_t v23 = v3 + 48 * v21;
      if (v4 == *(_DWORD *)v23
        && v5 == *(_DWORD *)(v23 + 4)
        && v7 == *(_DWORD *)(v23 + 8)
        && v8 == *(_DWORD *)(v23 + 12)
        && v11 == *(_DWORD *)(v23 + 16)
        && v12 == *(_DWORD *)(v23 + 20)
        && v15 == *(unsigned __int8 *)(v23 + 24)
        && *(unsigned __int16 *)(v23 + 26) == v17
        && v19 == *(_DWORD *)(v23 + 28))
      {
        break;
      }
    }
    if (v21 == v22 - 1) {
      unint64_t v21 = 0;
    }
    else {
      ++v21;
    }
  }
  uint64_t v24 = 1;
  *(unsigned char *)(v20 + v21) = 1;
  uint64_t v25 = a1[7] - 1;
  a1[7] = v25;
  if (v22 > 8 * v25)
  {
    sub_380894((uint64_t)a1);
    return 1;
  }
  return v24;
}

void sub_380894(uint64_t a1)
{
  unint64_t v2 = 0;
  uint64_t v3 = *(void *)(a1 + 56);
  do
    ++v2;
  while (3 * v3 > (unint64_t)(1 << v2));
  if (v2 >= 0x3B) {
    sub_2E00();
  }
  unint64_t v4 = (char *)operator new(48 << v2);
  size_t v5 = 1 << v2;
  unint64_t v6 = &v4[48 * (1 << v2)];
  uint64_t v7 = v4;
  do
  {
    *(_OWORD *)uint64_t v7 = 0uLL;
    *((_OWORD *)v7 + 1) = 0uLL;
    *(_OWORD *)(v7 + 4) = xmmword_20E22C0;
    *((_DWORD *)v7 + 5) = 0x7FFFFFFF;
    *((_WORD *)v7 + 13) = -1;
    *((_DWORD *)v7 + 7) = -1;
    *((void *)v7 + 4) = 0x7FFFFFFF00000000;
    *((void *)v7 + 5) = 0;
    v7 += 48;
  }
  while (v7 != v6);
  uint64_t v8 = (char *)operator new(1 << v2);
  unint64_t v9 = &v8[v5];
  bzero(v8, v5);
  *(void *)(a1 + 64) = v3;
  unint64_t v10 = *(unsigned char **)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  unint64_t v12 = v11 - *(void *)a1;
  if (v11 == *(void *)a1)
  {
    unint64_t v10 = *(unsigned char **)(a1 + 8);
  }
  else
  {
    unint64_t v13 = 0;
    size_t v14 = v5 - 1;
    do
    {
      if (v10[v13] == 2)
      {
        uint64_t v18 = *(void *)(a1 + 24);
        uint64_t v19 = (unsigned int *)(v18 + 48 * v13);
        unint64_t v20 = (v19[1] + 2654435769 + ((unint64_t)*v19 << 6) + ((unint64_t)*v19 >> 2)) ^ *v19;
        unint64_t v21 = (v19[2] + 2654435769 + (v20 << 6) + (v20 >> 2)) ^ v20;
        unint64_t v22 = ((int)v19[3] + 2654435769 + (v21 << 6) + (v21 >> 2)) ^ v21;
        unint64_t v23 = ((int)v19[4] + 2654435769 + (v22 << 6) + (v22 >> 2)) ^ v22;
        unint64_t v24 = ((int)v19[5] + 2654435769 + (v23 << 6) + (v23 >> 2)) ^ v23;
        unint64_t v25 = (*((unsigned __int8 *)v19 + 24) + 2654435769 + (v24 << 6) + (v24 >> 2)) ^ v24;
        unint64_t v26 = (*((unsigned __int16 *)v19 + 13) + 2654435769 + (v25 << 6) + (v25 >> 2)) ^ v25;
        uint64_t v27 = ((v19[7] + 2654435769 + (v26 << 6) + (v26 >> 2)) ^ v26) & v14;
        while (v8[v27])
        {
          if (v27 == v14) {
            uint64_t v27 = 0;
          }
          else {
            ++v27;
          }
        }
        uint64_t v15 = &v4[48 * v27];
        long long v16 = *(_OWORD *)v19;
        long long v17 = *((_OWORD *)v19 + 1);
        *((void *)v15 + 4) = *((void *)v19 + 4);
        *(_OWORD *)uint64_t v15 = v16;
        *((_OWORD *)v15 + 1) = v17;
        *((void *)v15 + 5) = *(void *)(v18 + 48 * v13 + 40);
        v8[v27] = 2;
      }
      ++v13;
    }
    while (v13 < v12);
  }
  unint64_t v28 = *(void **)(a1 + 24);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v6;
  *(void *)a1 = v8;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v4;
  if (v10) {
    operator delete(v10);
  }
  if (v28)
  {
    operator delete(v28);
  }
}

void sub_380B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  operator delete(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_380B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  uint64_t v14 = a7;
  if (a3 != a5)
  {
    uint64_t v8 = a3;
    long long v9 = 0uLL;
    do
    {
      unint64_t v10 = (void *)(v7 - 272);
      uint64_t v11 = *(void *)(v8 - 104);
      *unint64_t v10 = v10;
      v10[1] = v10;
      *(_OWORD *)(v7 - 256) = xmmword_20E2350;
      *(_OWORD *)(v7 - 240) = v9;
      *(_OWORD *)(v7 - 224) = v9;
      *(_OWORD *)(v7 - 208) = v9;
      *(_OWORD *)(v7 - 192) = v9;
      *(_OWORD *)(v7 - 176) = v9;
      *(_OWORD *)(v7 - 160) = v9;
      *(void *)(v7 - 144) = 0;
      *(void *)(v7 - 128) = 0;
      *(void *)(v7 - 120) = 0;
      *(void *)(v7 - 112) = 0;
      *(void *)(v7 - 104) = v11;
      *(void *)(v7 - 88) = 0;
      *(void *)(v7 - 80) = 0;
      *(void *)(v7 - 96) = 0;
      if (*(void *)(v8 - 72))
      {
        unint64_t v12 = sub_2DA84();
        sub_2DB0C((uint64_t)v12);
      }
      v8 -= 272;
      *(void *)(v7 - 72) = 0;
      *(void *)(v7 - 64) = 850045863;
      long long v9 = 0uLL;
      *(_OWORD *)(v7 - 56) = 0u;
      *(_OWORD *)(v7 - 40) = 0u;
      *(_OWORD *)(v7 - 24) = 0u;
      *(void *)(v7 - 8) = 0;
      uint64_t v7 = v14 - 272;
      v14 -= 272;
    }
    while (v8 != a5);
  }
  return a6;
}

void sub_380CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_3805E0(v3);
  sub_380CD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_380CD8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
    unint64_t v4 = *(std::mutex **)(*(void *)(a1 + 8) + 8);
    if ((std::mutex *)v3 != v4)
    {
      size_t v5 = (std::mutex *)(v3 + 208);
      do
      {
        if (*(void *)&v5[-1].__m_.__opaque[48])
        {
          sub_38042C((uint64_t)&v5[-4].__m_.__opaque[40]);
          uint64_t v7 = sub_2DA84();
          sub_2DD20((uint64_t)v7, *(size_t **)&v5[-1].__m_.__opaque[48]);
        }
        std::mutex::~mutex(v5);
        sub_3805E0((uint64_t *)&v5[-4].__m_.__opaque[40]);
        unint64_t v6 = v5 + 1;
        size_t v5 = (std::mutex *)((char *)v5 + 272);
      }
      while (v6 != v4);
    }
  }
  return a1;
}

uint64_t sub_380D70(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 272;
    if (*(void *)(i - 72))
    {
      sub_38042C(i - 272);
      unint64_t v4 = sub_2DA84();
      sub_2DD20((uint64_t)v4, *(size_t **)(i - 72));
    }
    std::mutex::~mutex((std::mutex *)(i - 64));
    sub_3805E0((uint64_t *)(i - 272));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_380DF8(uint64_t *a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = 0xF0F0F0F0F0F0F0F1 * ((v5 - *a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0xF0F0F0F0F0F0F0) {
    sub_2E00();
  }
  if (0xE1E1E1E1E1E1E1E2 * ((a1[2] - v4) >> 4) > v7) {
    unint64_t v7 = 0xE1E1E1E1E1E1E1E2 * ((a1[2] - v4) >> 4);
  }
  if (0xF0F0F0F0F0F0F0F1 * ((a1[2] - v4) >> 4) >= 0x78787878787878) {
    unint64_t v10 = 0xF0F0F0F0F0F0F0;
  }
  else {
    unint64_t v10 = v7;
  }
  unint64_t v24 = a1 + 2;
  if (v10)
  {
    if (v10 > 0xF0F0F0F0F0F0F0) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(272 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = (uint64_t)&v11[272 * v6];
  unint64_t v22 = v11;
  *(void *)unint64_t v23 = v12;
  *(void *)&unsigned char v23[8] = v12;
  *(void *)&v23[16] = &v11[272 * v10];
  uint64_t v13 = *a2;
  int v14 = *a3;
  *(void *)uint64_t v12 = v12;
  *(void *)(v12 + 8) = v12;
  *(_OWORD *)(v12 + 16) = xmmword_20E2350;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_OWORD *)(v12 + 80) = 0u;
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  *(void *)(v12 + 128) = 0;
  *(void *)(v12 + 144) = 0;
  *(void *)(v12 + 152) = 0;
  *(void *)(v12 + 160) = 0;
  *(void *)(v12 + 168) = v13;
  *(void *)(v12 + 184) = 0;
  *(void *)(v12 + 192) = 0;
  *(void *)(v12 + 176) = 0;
  if (v14)
  {
    uint64_t v15 = sub_2DA84();
    sub_2DB0C((uint64_t)v15);
  }
  long long v16 = &v11[272 * v6];
  *((void *)v16 + 25) = 0;
  *((void *)v16 + 26) = 850045863;
  *(_OWORD *)(v16 + 216) = 0u;
  *(_OWORD *)(v16 + 232) = 0u;
  *(_OWORD *)(v16 + 248) = 0u;
  *((void *)v16 + 33) = 0;
  *(void *)&unsigned char v23[8] = v16 + 272;
  sub_380B5C((uint64_t)(a1 + 2), v5, v5, v4, v4, v12, v12);
  uint64_t v17 = a1[2];
  long long v18 = *(_OWORD *)&v23[8];
  long long v19 = *(_OWORD *)a1;
  *a1 = v20;
  *(_OWORD *)unint64_t v23 = v19;
  *(_OWORD *)(a1 + 1) = v18;
  *(void *)&v23[16] = v17;
  unint64_t v22 = (char *)v19;
  sub_380D70((uint64_t)&v22);
  return (uint64_t)&v11[272 * v6 + 272];
}

void sub_381010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_3805E0(v4);
  sub_380D70((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_381030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_380D70((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_381044(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (size_t **)**a1;
  if (v2)
  {
    uint64_t v4 = (size_t **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = v4 - 34;
        if (*(v4 - 9))
        {
          sub_38042C((uint64_t)(v4 - 34));
          unint64_t v7 = sub_2DA84();
          sub_2DD20((uint64_t)v7, *(v4 - 9));
        }
        std::mutex::~mutex((std::mutex *)v4 - 1);
        sub_3805E0((uint64_t *)v4 - 34);
        v4 -= 34;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_381108(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_2438C68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_381128(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_2438C68;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_38117C(uint64_t a1)
{
  return sub_39125C(a1 + 24);
}

void sub_381188(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v4 = *a4;
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  char v8 = 0;
  LOBYTE(__p) = 0;
  sub_390644(a2, &v11, v4, 0, 0, &v9, &__p);
  if (v8 < 0) {
    operator delete(__p);
  }
  uint64_t v5 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  unint64_t v6 = v12;
  if (v12)
  {
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_38128C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_14A84((uint64_t)&a16);
  sub_14A84(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_3812B8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_2438CB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_3812D8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_2438CB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_38132C(uint64_t a1)
{
  return sub_381338(a1 + 24);
}

uint64_t sub_381338(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 144);
  if (v2)
  {
    *(void *)(a1 + 152) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void ***)(a1 + 120);
  if (v3)
  {
    do
    {
      unint64_t v10 = (void **)*v3;
      if (*((char *)v3 + 39) < 0) {
        operator delete(v3[2]);
      }
      operator delete(v3);
      uint64_t v3 = v10;
    }
    while (v10);
  }
  uint64_t v4 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(void *)(a1 + 72) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 48);
    char v8 = *(void **)(a1 + 40);
    if (v7 != v6)
    {
      uint64_t v9 = v7 - 1672;
      do
      {
        sub_381444((void *)(v9 + 24));
        if (*(char *)(v9 + 23) < 0) {
          operator delete(*(void **)v9);
        }
        uint64_t v11 = v9 - 8;
        v9 -= 1680;
      }
      while (v11 != v6);
      char v8 = *(void **)(a1 + 40);
    }
    *(void *)(a1 + 48) = v6;
    operator delete(v8);
  }
  uint64_t v12 = *(void **)(a1 + 16);
  if (v12)
  {
    do
    {
      uint64_t v13 = (void *)*v12;
      operator delete(v12);
      uint64_t v12 = v13;
    }
    while (v13);
  }
  int v14 = *(void **)a1;
  *(void *)a1 = 0;
  if (v14) {
    operator delete(v14);
  }
  return a1;
}

void *sub_381444(void *a1)
{
  uint64_t v2 = (void *)a1[187];
  if (v2)
  {
    a1[188] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[184];
  if (v3)
  {
    a1[185] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[181];
  if (v4)
  {
    a1[182] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[178];
  if (v5)
  {
    a1[179] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[174];
  if (v6)
  {
    a1[175] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[171];
  if (v7)
  {
    a1[172] = v7;
    operator delete(v7);
  }
  char v8 = (void *)a1[168];
  if (v8)
  {
    a1[169] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)a1[165];
  if (v9)
  {
    a1[166] = v9;
    operator delete(v9);
  }
  unint64_t v10 = (void *)a1[159];
  if (v10)
  {
    a1[160] = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)a1[156];
  if (v11)
  {
    a1[157] = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)a1[139];
  if (v12)
  {
    a1[140] = v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)a1[136];
  if (v13)
  {
    a1[137] = v13;
    operator delete(v13);
  }
  int v14 = (void *)a1[118];
  if (v14)
  {
    a1[119] = v14;
    operator delete(v14);
  }
  uint64_t v15 = (void *)a1[109];
  if (v15)
  {
    a1[110] = v15;
    operator delete(v15);
  }
  uint64_t v16 = (void *)a1[106];
  if (v16)
  {
    a1[107] = v16;
    operator delete(v16);
  }
  uint64_t v17 = (void *)a1[103];
  if (v17)
  {
    a1[104] = v17;
    operator delete(v17);
  }
  long long v18 = (void *)a1[100];
  if (v18)
  {
    a1[101] = v18;
    operator delete(v18);
  }
  long long v19 = (void *)a1[49];
  if (v19)
  {
    a1[50] = v19;
    operator delete(v19);
  }
  uint64_t v20 = (void *)a1[46];
  if (v20)
  {
    a1[47] = v20;
    operator delete(v20);
  }
  unint64_t v21 = (void *)a1[43];
  if (v21)
  {
    a1[44] = v21;
    operator delete(v21);
  }
  unint64_t v22 = (void *)a1[40];
  if (v22)
  {
    a1[41] = v22;
    operator delete(v22);
  }
  unint64_t v23 = (void *)a1[34];
  if (v23)
  {
    a1[35] = v23;
    operator delete(v23);
  }
  unint64_t v24 = (void *)a1[31];
  if (v24)
  {
    a1[32] = v24;
    operator delete(v24);
  }
  unint64_t v25 = (void *)a1[28];
  if (v25)
  {
    a1[29] = v25;
    operator delete(v25);
  }
  return a1;
}

void sub_3815E8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_2438D08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_381608(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_2438D08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_38165C(uint64_t a1)
{
  return sub_381668(a1 + 24);
}

uint64_t sub_381668(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 144);
  if (v2)
  {
    *(void *)(a1 + 152) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void ***)(a1 + 120);
  if (v3)
  {
    do
    {
      unint64_t v10 = (void **)*v3;
      if (*((char *)v3 + 39) < 0) {
        operator delete(v3[2]);
      }
      operator delete(v3);
      uint64_t v3 = v10;
    }
    while (v10);
  }
  uint64_t v4 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(void *)(a1 + 72) = v5;
    operator delete(v5);
  }
  uint64_t v11 = (void **)(a1 + 40);
  sub_381734(&v11);
  uint64_t v6 = *(void **)(a1 + 16);
  if (v6)
  {
    do
    {
      uint64_t v7 = (void *)*v6;
      operator delete(v6);
      uint64_t v6 = v7;
    }
    while (v7);
  }
  char v8 = *(void **)a1;
  *(void *)a1 = 0;
  if (v8) {
    operator delete(v8);
  }
  return a1;
}

void sub_381734(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = (uint64_t)v4 - 1296;
      do
      {
        char v8 = *(void **)(v6 + 1272);
        if (v8)
        {
          *(void *)(v6 + 1280) = v8;
          operator delete(v8);
        }
        uint64_t v9 = *(void **)(v6 + 1248);
        if (v9)
        {
          *(void *)(v6 + 1256) = v9;
          operator delete(v9);
        }
        sub_3817F8((void *)(v6 + 24));
        if (*(char *)(v6 + 23) < 0) {
          operator delete(*(void **)v6);
        }
        uint64_t v7 = (void *)(v6 - 8);
        v6 -= 1304;
      }
      while (v7 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_3817F8(void *a1)
{
  uint64_t v2 = (void *)a1[87];
  if (v2)
  {
    a1[88] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[84];
  if (v3)
  {
    a1[85] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[81];
  if (v4)
  {
    a1[82] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[75];
  if (v5)
  {
    a1[76] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[71];
  if (v6)
  {
    a1[72] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[68];
  if (v7)
  {
    a1[69] = v7;
    operator delete(v7);
  }
  char v8 = (void *)a1[65];
  if (v8)
  {
    a1[66] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)a1[62];
  if (v9)
  {
    a1[63] = v9;
    operator delete(v9);
  }
  unint64_t v10 = (void *)a1[32];
  if (v10)
  {
    a1[33] = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)a1[29];
  if (v11)
  {
    a1[30] = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)a1[26];
  if (v12)
  {
    a1[27] = v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)a1[22];
  if (v13)
  {
    a1[23] = v13;
    operator delete(v13);
  }
  return a1;
}

void sub_3818DC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_2438D58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_3818FC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_2438D58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_381950(uint64_t a1)
{
  return sub_38195C(a1 + 24);
}

uint64_t sub_38195C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 144);
  if (v2)
  {
    *(void *)(a1 + 152) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void ***)(a1 + 120);
  if (v3)
  {
    do
    {
      unint64_t v10 = (void **)*v3;
      if (*((char *)v3 + 39) < 0) {
        operator delete(v3[2]);
      }
      operator delete(v3);
      uint64_t v3 = v10;
    }
    while (v10);
  }
  uint64_t v4 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(void *)(a1 + 72) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 48);
    char v8 = *(void **)(a1 + 40);
    if (v7 != v6)
    {
      uint64_t v9 = v7 - 768;
      do
      {
        sub_381A68((void *)(v9 + 24));
        if (*(char *)(v9 + 23) < 0) {
          operator delete(*(void **)v9);
        }
        uint64_t v11 = v9 - 8;
        v9 -= 776;
      }
      while (v11 != v6);
      char v8 = *(void **)(a1 + 40);
    }
    *(void *)(a1 + 48) = v6;
    operator delete(v8);
  }
  uint64_t v12 = *(void **)(a1 + 16);
  if (v12)
  {
    do
    {
      uint64_t v13 = (void *)*v12;
      operator delete(v12);
      uint64_t v12 = v13;
    }
    while (v13);
  }
  int v14 = *(void **)a1;
  *(void *)a1 = 0;
  if (v14) {
    operator delete(v14);
  }
  return a1;
}

void *sub_381A68(void *a1)
{
  uint64_t v2 = (void *)a1[62];
  if (v2)
  {
    a1[63] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[59];
  if (v3)
  {
    a1[60] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[56];
  if (v4)
  {
    a1[57] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[49];
  if (v5)
  {
    a1[50] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[42];
  if (v6)
  {
    a1[43] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[39];
  if (v7)
  {
    a1[40] = v7;
    operator delete(v7);
  }
  char v8 = (void *)a1[36];
  if (v8)
  {
    a1[37] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)a1[30];
  if (v9)
  {
    a1[31] = v9;
    operator delete(v9);
  }
  unint64_t v10 = (void *)a1[7];
  if (v10)
  {
    a1[8] = v10;
    operator delete(v10);
  }
  return a1;
}

void sub_381B1C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_2438DA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_381B3C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_2438DA8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void *sub_381B90(uint64_t a1)
{
  return sub_38279C((void *)(a1 + 24));
}

uint64_t sub_381B9C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a2[43];
  if (!v4)
  {
    nullsub_1(*a2);
    sub_37737C();
  }
  uint64_t v5 = sub_393AA8(*a2);
  uint64_t v6 = a2[67];
  if (!v6) {
    uint64_t v6 = sub_3937B8(*a2);
  }
  return sub_381D1C(a1, a2, v4, v5, v6, *(unsigned __int8 *)(v4 + 3884));
}

uint64_t sub_381D1C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  uint64_t v9 = a2[45];
  if (!v9)
  {
    nullsub_1(*a2);
    sub_375F00();
  }
  uint64_t v10 = a2[48];
  if (!v10)
  {
    nullsub_1(*a2);
    sub_37620C();
  }
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v10;
  sub_382264(a1 + 40, a2);
  if (!a6)
  {
    BOOL v46 = 0;
    *(void *)(a1 + 160) = -1;
    *(_DWORD *)(a1 + 168) = 0;
    *(void *)(a1 + 176) = 0;
    *(unsigned char *)(a1 + 184) = 0;
    goto LABEL_60;
  }
  uint64_t v11 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v11 + 3880)) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = sub_3823E0(v11 + 8, 1u, 1);
  }
  uint64_t v13 = &v12[-*(int *)v12];
  if (*(unsigned __int16 *)v13 < 5u)
  {
    int v14 = 0;
    uint64_t v15 = (_WORD *)(&loc_1120530 + 1);
    if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
      goto LABEL_20;
    }
  }
  else
  {
    int v14 = (int *)*((unsigned __int16 *)v13 + 2);
    if (v14) {
      int v14 = (int *)((char *)v14 + (void)v12 + *(unsigned int *)((char *)v14 + (void)v12));
    }
    uint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
    if (*v15 < 5u) {
      goto LABEL_20;
    }
  }
  uint64_t v16 = v15[2];
  if (v16)
  {
    *(_DWORD *)(a1 + 160) = *(int *)((char *)v14 + v16);
    uint64_t v17 = *(void *)(a1 + 8);
    if (!*(_DWORD *)(v17 + 3880)) {
      goto LABEL_15;
    }
    goto LABEL_21;
  }
LABEL_20:
  *(_DWORD *)(a1 + 160) = 0;
  uint64_t v17 = *(void *)(a1 + 8);
  if (!*(_DWORD *)(v17 + 3880))
  {
LABEL_15:
    long long v18 = sub_3823E0(v17 + 8, 1u, 1);
    long long v19 = &v18[-*(int *)v18];
    if (*(unsigned __int16 *)v19 >= 5u) {
      goto LABEL_16;
    }
    goto LABEL_22;
  }
LABEL_21:
  long long v18 = 0;
  long long v19 = (unsigned char *)(&loc_1120530 + 1);
  if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) >= 5u)
  {
LABEL_16:
    uint64_t v20 = (int *)*((unsigned __int16 *)v19 + 2);
    if (v20) {
      uint64_t v20 = (int *)((char *)v20 + (void)v18 + *(unsigned int *)((char *)v20 + (void)v18));
    }
    unint64_t v21 = (unsigned __int16 *)((char *)v20 - *v20);
    if (*v21 < 7u) {
      goto LABEL_30;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v20 = 0;
  unint64_t v21 = (_WORD *)(&loc_1120530 + 1);
  if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 7u) {
    goto LABEL_30;
  }
LABEL_23:
  uint64_t v22 = v21[3];
  if (v22)
  {
    *(_DWORD *)(a1 + 164) = *(int *)((char *)v20 + v22);
    uint64_t v23 = *(void *)(a1 + 8);
    if (!*(_DWORD *)(v23 + 3880)) {
      goto LABEL_25;
    }
    goto LABEL_31;
  }
LABEL_30:
  *(_DWORD *)(a1 + 164) = 0;
  uint64_t v23 = *(void *)(a1 + 8);
  if (!*(_DWORD *)(v23 + 3880))
  {
LABEL_25:
    unint64_t v24 = sub_3823E0(v23 + 8, 1u, 1);
    unint64_t v25 = &v24[-*(int *)v24];
    if (*(unsigned __int16 *)v25 >= 5u) {
      goto LABEL_26;
    }
LABEL_32:
    unint64_t v26 = 0;
    uint64_t v27 = (_WORD *)(&loc_1120530 + 1);
    if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 9u) {
      goto LABEL_35;
    }
    goto LABEL_33;
  }
LABEL_31:
  unint64_t v24 = 0;
  unint64_t v25 = (unsigned char *)(&loc_1120530 + 1);
  if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
    goto LABEL_32;
  }
LABEL_26:
  unint64_t v26 = (int *)*((unsigned __int16 *)v25 + 2);
  if (v26) {
    unint64_t v26 = (int *)((char *)v26 + (void)v24 + *(unsigned int *)((char *)v26 + (void)v24));
  }
  uint64_t v27 = (unsigned __int16 *)((char *)v26 - *v26);
  if (*v27 < 9u) {
    goto LABEL_35;
  }
LABEL_33:
  uint64_t v28 = v27[4];
  if (v28)
  {
    int v29 = *((unsigned __int8 *)v26 + v28);
    goto LABEL_36;
  }
LABEL_35:
  int v29 = 0;
LABEL_36:
  *(_DWORD *)(a1 + 168) = sub_7B894(v29);
  BOOL v30 = sub_3823E0(*(void *)(a1 + 8) + 8, 1u, 1);
  uint64_t v31 = &v30[*(unsigned __int16 *)&v30[-*(int *)v30 + 4]];
  int v32 = &v31[*(unsigned int *)v31
           + *(unsigned __int16 *)&v31[*(unsigned int *)v31 - *(int *)&v31[*(unsigned int *)v31] + 10]];
  uint64_t v33 = *(unsigned int *)v32;
  char v35 = &v32[v33 + 4];
  size_t v34 = *(unsigned int *)&v32[v33];
  if (v34 >= 0x17)
  {
    uint64_t v37 = (v34 & 0xFFFFFFF8) + 8;
    if ((v34 | 7) != 0x17) {
      uint64_t v37 = v34 | 7;
    }
    uint64_t v38 = v37 + 1;
    uint64_t v36 = (void **)operator new(v37 + 1);
    __dst[1] = (void *)v34;
    unint64_t v49 = v38 | 0x8000000000000000;
    __dst[0] = v36;
    goto LABEL_42;
  }
  HIBYTE(v49) = *(_DWORD *)&v32[v33];
  uint64_t v36 = __dst;
  if (v34) {
LABEL_42:
  }
    memcpy(v36, v35, v34);
  *((unsigned char *)v36 + v34) = 0;
  unsigned __int8 v39 = (unsigned int *)sub_F0BF98(a5, (uint64_t)__dst);
  if (SHIBYTE(v49) < 0) {
    operator delete(__dst[0]);
  }
  *(void *)(a1 + 176) = v39;
  *(unsigned char *)(a1 + 184) = sub_F06620(a5, *v39);
  uint64_t v40 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v40 + 3880)) {
    unsigned long long v41 = 0;
  }
  else {
    unsigned long long v41 = sub_3823E0(v40 + 8, 1u, 1);
  }
  uint64_t v42 = &v41[-*(int *)v41];
  if (*(unsigned __int16 *)v42 < 5u)
  {
    unsigned long long v43 = 0;
    uint64_t v44 = (_WORD *)(&loc_1120530 + 1);
    if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 0xDu)
    {
LABEL_56:
      BOOL v46 = 0;
      goto LABEL_60;
    }
  }
  else
  {
    unsigned long long v43 = (int *)*((unsigned __int16 *)v42 + 2);
    if (v43) {
      unsigned long long v43 = (int *)((char *)v43 + (void)v41 + *(unsigned int *)((char *)v43 + (void)v41));
    }
    uint64_t v44 = (unsigned __int16 *)((char *)v43 - *v43);
    if (*v44 < 0xDu) {
      goto LABEL_56;
    }
  }
  uint64_t v45 = v44[6];
  if (!v45) {
    goto LABEL_56;
  }
  BOOL v46 = *((unsigned char *)v43 + v45) != 0;
LABEL_60:
  *(unsigned char *)(a1 + 185) = v46;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(void *)(a1 + 256) = 0;
  return a1;
}

void sub_3821AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_3821F8(v15);
    _Unwind_Resume(a1);
  }
  sub_3821F8(v15);
  _Unwind_Resume(a1);
}

void *sub_3821F8(void *a1)
{
  uint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[6];
  if (v3)
  {
    do
    {
      uint64_t v4 = (void *)*v3;
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  uint64_t v5 = (void *)a1[4];
  a1[4] = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[1];
  if (v6)
  {
    a1[2] = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_382264(uint64_t a1, void *a2)
{
  sub_382300(a1, a2, 1);
  uint64_t v4 = a2[29];
  if (!v4)
  {
    nullsub_1(*a2);
    sub_375138();
  }
  *(void *)(a1 + 104) = v4;
  *(void *)(a1 + 112) = sub_376F8C(a2);
  return a1;
}

void sub_3822EC(_Unwind_Exception *a1)
{
  sub_3821F8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_382300(uint64_t a1, void *a2, char a3)
{
  sub_ED98DC(a1, (uint64_t)a2, a3);
  uint64_t v5 = a2[29];
  if (!v5)
  {
    nullsub_1(*a2);
    sub_375138();
  }
  *(void *)(a1 + 96) = v5;
  return a1;
}

void sub_3823BC(_Unwind_Exception *a1)
{
  uint64_t v3 = (void *)v1[9];
  if (v3)
  {
    v1[10] = v3;
    operator delete(v3);
  }
  sub_20A78F0(v1);
  _Unwind_Resume(a1);
}

char *sub_3823E0(uint64_t a1, unsigned int a2, int a3)
{
  int v25 = a3;
  unsigned int v26 = a2;
  v24[0] = &v25;
  v24[1] = (int *)&v26;
  unint64_t v4 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v4;
  uint64_t v5 = *(void *)a1;
  if (v5)
  {
    uint64_t v6 = a1 + 16;
    if (*(_DWORD *)(a1 + 2512) == a2)
    {
      unsigned int v7 = 104;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 2536) == a2)
    {
      unsigned int v7 = 105;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 2560) == a2)
    {
      unsigned int v7 = 106;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 2584) == a2)
    {
      unsigned int v7 = 107;
LABEL_10:
      ++*(void *)(a1 + 3864);
      uint64_t v8 = v6 + 24 * v7;
      *(void *)(v8 + 8) = v4;
      uint64_t v9 = *(unsigned int **)(v8 + 16);
      if (v9) {
        return (char *)v9 + *v9;
      }
      goto LABEL_32;
    }
    unint64_t v11 = *(void *)(a1 + 2568);
    unint64_t v12 = *(void *)(a1 + 2544);
    unint64_t v13 = *(void *)(a1 + 2520);
    BOOL v14 = v13 >= v4;
    if (v13 < v4) {
      unint64_t v4 = *(void *)(a1 + 2520);
    }
    int v15 = 104;
    if (v14) {
      int v15 = 0;
    }
    BOOL v16 = v12 >= v4;
    if (v12 < v4) {
      unint64_t v4 = *(void *)(a1 + 2544);
    }
    int v17 = 105;
    if (v16) {
      int v17 = v15;
    }
    if (v11 >= v4) {
      unint64_t v18 = v4;
    }
    else {
      unint64_t v18 = *(void *)(a1 + 2568);
    }
    unint64_t v19 = *(void *)(a1 + 2592);
    if (v11 >= v4) {
      int v20 = v17;
    }
    else {
      int v20 = 106;
    }
    unint64_t v21 = (unsigned int *)sub_2AB884(v5, 26, a2, 1);
    unsigned int v22 = 107;
    if (v19 >= v18) {
      unsigned int v22 = v20;
    }
    uint64_t v23 = v6 + 24 * v22;
    *(_DWORD *)uint64_t v23 = v26;
    *(void *)(v23 + 8) = *(void *)(a1 + 3856);
    *(void *)(v23 + 16) = v21;
    if (v21) {
      return (char *)v21 + *v21;
    }
  }
LABEL_32:
  sub_382570(v24);
  return 0;
}

uint64_t sub_382570(int **a1)
{
  int v1 = **a1;
  if (v1 != 1)
  {
    if (!v1)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      std::to_string(&v15, *a1[1]);
      uint64_t v5 = std::string::insert(&v15, 0, "Failed to acquire Flatbuffer data in quad node ");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v16.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      unsigned int v7 = std::string::append(&v16, " on layer ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      uint64_t v9 = sub_736EC(0x1Au);
      uint64_t v10 = std::string::append(&v17, v9);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v19 = v10->__r_.__value_.__r.__words[2];
      long long v18 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unint64_t v12 = (void *)sub_2F404((uint64_t)exception, &v18);
    }
    unint64_t v13 = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v18, "Unknown data access error policy");
    BOOL v14 = (void *)sub_2F404((uint64_t)v13, &v18);
  }
  return 0;
}

void sub_3826C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_6;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_6:
  operator delete(__p);
  goto LABEL_9;
}

void *sub_38279C(void *a1)
{
  uint64_t v2 = (void *)a1[30];
  if (v2)
  {
    a1[31] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[27];
  if (v3)
  {
    a1[28] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a1[24];
  if (v4)
  {
    a1[25] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[14];
  if (v5)
  {
    a1[15] = v5;
    operator delete(v5);
  }
  long long v6 = (void *)a1[11];
  if (v6)
  {
    do
    {
      unsigned int v7 = (void *)*v6;
      operator delete(v6);
      long long v6 = v7;
    }
    while (v7);
  }
  long long v8 = (void *)a1[9];
  a1[9] = 0;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v9 = (void *)a1[6];
  if (v9)
  {
    a1[7] = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t sub_382838(uint64_t a1, void *a2)
{
  unint64_t v4 = (void **)*a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = 0;
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v3;
  do
  {
    uint64_t v6 = a1 + v5;
    *(_DWORD *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 40) = 0;
    *(void *)(v6 + 24) = 0;
    *(void *)(v6 + 48) = 0;
    v5 += 48;
  }
  while (v5 != 3840);
  *(_OWORD *)(a1 + 3856) = 0u;
  uint64_t v7 = a2[1];
  *(void *)(a1 + 3872) = *a2;
  *(void *)(a1 + 3880) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  long long v8 = (void **)*a2;
  if (*a2) {
    LOBYTE(v8) = sub_2ABCE4(v8);
  }
  *(unsigned char *)(a1 + 3888) = (_BYTE)v8;
  return a1;
}

void sub_3828CC(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 3880);
  if (v3) {
    sub_20A6F44(v3);
  }
  sub_20A7948((std::__shared_weak_count **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_3828EC(uint64_t a1, void *a2)
{
  unint64_t v4 = (void **)*a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = 0;
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v3;
  do
  {
    uint64_t v6 = a1 + v5;
    *(_DWORD *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 40) = 0;
    *(void *)(v6 + 24) = 0;
    *(void *)(v6 + 48) = 0;
    v5 += 48;
  }
  while (v5 != 3840);
  *(_OWORD *)(a1 + 3856) = 0u;
  long long v8 = (void **)*a2;
  uint64_t v7 = a2[1];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = 0;
  *(void *)(a1 + 3872) = v8;
  *(void *)(a1 + 3880) = v7;
  do
  {
    uint64_t v10 = a1 + v9;
    *(_DWORD *)(v10 + 3888) = 0;
    *(_DWORD *)(v10 + 3912) = 0;
    *(void *)(v10 + 3896) = 0;
    *(void *)(v10 + 3920) = 0;
    v9 += 48;
  }
  while (v9 != 3840);
  *(_OWORD *)(a1 + 7728) = 0u;
  uint64_t v11 = a2[1];
  *(void *)(a1 + 7744) = *a2;
  *(void *)(a1 + 7752) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v12 = (void **)*a2;
  if (*a2) {
    LOBYTE(v12) = sub_2ABCE4(v12);
  }
  *(unsigned char *)(a1 + 7760) = (_BYTE)v12;
  return a1;
}

void sub_3829E0(_Unwind_Exception *a1)
{
  sub_14A84(v3);
  sub_14A84(v2);
  sub_14A84(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_382A04(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_368814(a1, a2);
  sub_382838(v6 + 3896, a2);
  sub_3688C8(a1 + 7792, a2);
  *(_OWORD *)(a1 + 11688) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  return a1;
}

void sub_382A70(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object)
{
  uint64_t v12 = v9[972];
  if (v12) {
    sub_20A6F44(v12);
  }
  sub_20A79B8((uint64_t)v9, a1, a2, (uint64_t)&exception_object);
  unint64_t v13 = exception_object;
  BOOL v14 = (std::__shared_weak_count *)v9[485];
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  std::string v15 = (std::__shared_weak_count *)v9[1];
  if (v15)
  {
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(v13);
}

uint64_t sub_382B3C(uint64_t a1, void *a2)
{
  unint64_t v4 = (void **)*a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = 0;
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v3;
  do
  {
    uint64_t v6 = a1 + v5;
    *(_DWORD *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 40) = 0;
    *(void *)(v6 + 24) = 0;
    *(void *)(v6 + 48) = 0;
    v5 += 48;
  }
  while (v5 != 3840);
  *(_OWORD *)(a1 + 3856) = 0u;
  long long v8 = (void **)*a2;
  uint64_t v7 = a2[1];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = 0;
  *(void *)(a1 + 3872) = v8;
  *(void *)(a1 + 3880) = v7;
  do
  {
    uint64_t v10 = a1 + v9;
    *(_DWORD *)(v10 + 3888) = 0;
    *(_DWORD *)(v10 + 3912) = 0;
    *(void *)(v10 + 3896) = 0;
    *(void *)(v10 + 3920) = 0;
    v9 += 48;
  }
  while (v9 != 3840);
  *(_OWORD *)(a1 + 7728) = 0u;
  uint64_t v11 = a2[1];
  *(void *)(a1 + 7744) = *a2;
  *(void *)(a1 + 7752) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (void **)*a2;
  if (*a2) {
    LOBYTE(v12) = sub_2ABCE4(v12);
  }
  *(unsigned char *)(a1 + 7760) = (_BYTE)v12;
  return a1;
}

void sub_382C30(_Unwind_Exception *a1)
{
  sub_14A84(v3);
  sub_14A84(v2);
  sub_14A84(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_382C54(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  long long v8 = (void **)*a2;
  uint64_t v7 = a2[1];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = 0;
  *(void *)a1 = v8;
  *(void *)(a1 + 8) = v7;
  do
  {
    uint64_t v10 = a1 + v9;
    *(_DWORD *)(v10 + 16) = 0;
    *(_DWORD *)(v10 + 40) = 0;
    *(void *)(v10 + 24) = 0;
    *(void *)(v10 + 48) = 0;
    v9 += 48;
  }
  while (v9 != 3840);
  *(_OWORD *)(a1 + 3856) = 0u;
  uint64_t v11 = a2[1];
  *(void *)(a1 + 3872) = *a2;
  *(void *)(a1 + 3880) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (void **)*a2;
  if (*a2) {
    LOBYTE(v12) = sub_2ABCE4(v12);
  }
  *(unsigned char *)(a1 + 3888) = (_BYTE)v12;
  *(void *)(a1 + 3896) = a3;
  *(unsigned char *)(a1 + 3904) = a4;
  return a1;
}

void sub_382D00(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 3880);
  if (v3) {
    sub_20A6F44(v3);
  }
  sub_20A7948((std::__shared_weak_count **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_382D20(uint64_t a1, void *a2)
{
  unint64_t v4 = (void **)*a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = 0;
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v3;
  do
  {
    uint64_t v6 = a1 + v5;
    *(_DWORD *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 40) = 0;
    *(void *)(v6 + 24) = 0;
    *(void *)(v6 + 48) = 0;
    v5 += 48;
  }
  while (v5 != 3840);
  *(_OWORD *)(a1 + 3856) = 0u;
  long long v8 = (void **)*a2;
  uint64_t v7 = a2[1];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = 0;
  *(void *)(a1 + 3872) = v8;
  *(void *)(a1 + 3880) = v7;
  do
  {
    uint64_t v10 = a1 + v9;
    *(_DWORD *)(v10 + 3888) = 0;
    *(_DWORD *)(v10 + 3912) = 0;
    *(void *)(v10 + 3896) = 0;
    *(void *)(v10 + 3920) = 0;
    v9 += 48;
  }
  while (v9 != 3840);
  *(_OWORD *)(a1 + 7728) = 0u;
  uint64_t v11 = a2[1];
  *(void *)(a1 + 7744) = *a2;
  *(void *)(a1 + 7752) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (void **)*a2;
  if (*a2) {
    LOBYTE(v12) = sub_2ABCE4(v12);
  }
  *(unsigned char *)(a1 + 7760) = (_BYTE)v12;
  return a1;
}

void sub_382E14(_Unwind_Exception *a1)
{
  sub_14A84(v3);
  sub_14A84(v2);
  sub_14A84(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_382E38(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  long long v8 = (void **)*a2;
  uint64_t v7 = a2[1];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = 0;
  *(void *)a1 = v8;
  *(void *)(a1 + 8) = v7;
  do
  {
    uint64_t v10 = a1 + v9;
    *(_DWORD *)(v10 + 16) = 0;
    *(_DWORD *)(v10 + 40) = 0;
    *(void *)(v10 + 24) = 0;
    *(void *)(v10 + 48) = 0;
    v9 += 48;
  }
  while (v9 != 3840);
  *(_OWORD *)(a1 + 3856) = 0u;
  uint64_t v11 = a2[1];
  *(void *)(a1 + 3872) = *a2;
  *(void *)(a1 + 3880) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (void **)*a2;
  if (*a2) {
    LOBYTE(v12) = sub_2ABCE4(v12);
  }
  *(unsigned char *)(a1 + 3888) = (_BYTE)v12;
  *(void *)(a1 + 3896) = a3;
  *(unsigned char *)(a1 + 3904) = a4;
  return a1;
}

void sub_382EE4(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 3880);
  if (v3) {
    sub_20A6F44(v3);
  }
  sub_20A7948((std::__shared_weak_count **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_382F04(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = 0;
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v3;
  do
  {
    uint64_t v6 = a1 + v5;
    *(_DWORD *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 40) = 0;
    *(void *)(v6 + 24) = 0;
    *(void *)(v6 + 48) = 0;
    v5 += 48;
  }
  while (v5 != 3840);
  *(void *)(a1 + 3872) = 0;
  *(_OWORD *)(a1 + 3856) = 0u;
  uint64_t v7 = sub_383034(a1, 1u, 1);
  if (!v7)
  {
    *(_DWORD *)(a1 + 3872) = 0;
    *(_DWORD *)(a1 + 3876) = 0;
    return a1;
  }
  long long v8 = &v7[-*(int *)v7];
  if (*(unsigned __int16 *)v8 >= 0xBu)
  {
    uint64_t v9 = *((unsigned __int16 *)v8 + 5);
    if (v9) {
      LODWORD(v9) = *(_DWORD *)&v7[v9];
    }
    *(_DWORD *)(a1 + 3872) = v9;
    uint64_t v10 = &v7[-*(int *)v7];
    if (*(unsigned __int16 *)v10 >= 0xDu) {
      goto LABEL_10;
    }
LABEL_15:
    *(_DWORD *)(a1 + 3876) = 0;
    return a1;
  }
  *(_DWORD *)(a1 + 3872) = 0;
  uint64_t v10 = &v7[-*(int *)v7];
  if (*(unsigned __int16 *)v10 < 0xDu) {
    goto LABEL_15;
  }
LABEL_10:
  uint64_t v11 = *((unsigned __int16 *)v10 + 6);
  if (v11) {
    LODWORD(v11) = *(_DWORD *)&v7[v11];
  }
  *(_DWORD *)(a1 + 3876) = v11;
  return a1;
}

void sub_38301C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3) {
    sub_20A6F44(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_383034(uint64_t a1, unsigned int a2, int a3)
{
  int v25 = a3;
  unsigned int v26 = a2;
  v24[0] = &v25;
  v24[1] = (int *)&v26;
  unint64_t v4 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v4;
  uint64_t v5 = *(void *)a1;
  if (v5)
  {
    uint64_t v6 = a1 + 16;
    if (*(_DWORD *)(a1 + 1648) == a2)
    {
      unsigned int v7 = 68;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 1672) == a2)
    {
      unsigned int v7 = 69;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 1696) == a2)
    {
      unsigned int v7 = 70;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 1720) == a2)
    {
      unsigned int v7 = 71;
LABEL_10:
      ++*(void *)(a1 + 3864);
      uint64_t v8 = v6 + 24 * v7;
      *(void *)(v8 + 8) = v4;
      uint64_t v9 = *(unsigned int **)(v8 + 16);
      if (v9) {
        return (char *)v9 + *v9;
      }
      goto LABEL_32;
    }
    unint64_t v11 = *(void *)(a1 + 1704);
    unint64_t v12 = *(void *)(a1 + 1680);
    unint64_t v13 = *(void *)(a1 + 1656);
    BOOL v14 = v13 >= v4;
    if (v13 < v4) {
      unint64_t v4 = *(void *)(a1 + 1656);
    }
    int v15 = 68;
    if (v14) {
      int v15 = 0;
    }
    BOOL v16 = v12 >= v4;
    if (v12 < v4) {
      unint64_t v4 = *(void *)(a1 + 1680);
    }
    int v17 = 69;
    if (v16) {
      int v17 = v15;
    }
    if (v11 >= v4) {
      unint64_t v18 = v4;
    }
    else {
      unint64_t v18 = *(void *)(a1 + 1704);
    }
    unint64_t v19 = *(void *)(a1 + 1728);
    if (v11 >= v4) {
      int v20 = v17;
    }
    else {
      int v20 = 70;
    }
    unint64_t v21 = (unsigned int *)sub_2AB884(v5, 17, a2, 1);
    unsigned int v22 = 71;
    if (v19 >= v18) {
      unsigned int v22 = v20;
    }
    uint64_t v23 = v6 + 24 * v22;
    *(_DWORD *)uint64_t v23 = v26;
    *(void *)(v23 + 8) = *(void *)(a1 + 3856);
    *(void *)(v23 + 16) = v21;
    if (v21) {
      return (char *)v21 + *v21;
    }
  }
LABEL_32:
  sub_3831C4(v24);
  return 0;
}

uint64_t sub_3831C4(int **a1)
{
  int v1 = **a1;
  if (v1 != 1)
  {
    if (!v1)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      std::to_string(&v15, *a1[1]);
      uint64_t v5 = std::string::insert(&v15, 0, "Failed to acquire Flatbuffer data in quad node ");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v16.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      unsigned int v7 = std::string::append(&v16, " on layer ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      uint64_t v9 = sub_736EC(0x11u);
      uint64_t v10 = std::string::append(&v17, v9);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v19 = v10->__r_.__value_.__r.__words[2];
      long long v18 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unint64_t v12 = (void *)sub_2F404((uint64_t)exception, &v18);
    }
    unint64_t v13 = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v18, "Unknown data access error policy");
    BOOL v14 = (void *)sub_2F404((uint64_t)v13, &v18);
  }
  return 0;
}

void sub_38331C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_6;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_6:
  operator delete(__p);
  goto LABEL_9;
}

uint64_t sub_3833F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = 0;
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v3;
  do
  {
    uint64_t v6 = a1 + v5;
    *(_DWORD *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 40) = 0;
    *(void *)(v6 + 24) = 0;
    *(void *)(v6 + 48) = 0;
    v5 += 48;
  }
  while (v5 != 3840);
  *(void *)(a1 + 3872) = 0;
  *(_OWORD *)(a1 + 3856) = 0u;
  unsigned int v7 = sub_383520(a1, 1u, 1);
  if (!v7)
  {
    *(_DWORD *)(a1 + 3872) = 0;
    *(_DWORD *)(a1 + 3876) = 0;
    return a1;
  }
  long long v8 = &v7[-*(int *)v7];
  if (*(unsigned __int16 *)v8 >= 0xBu)
  {
    uint64_t v9 = *((unsigned __int16 *)v8 + 5);
    if (v9) {
      LODWORD(v9) = *(_DWORD *)&v7[v9];
    }
    *(_DWORD *)(a1 + 3872) = v9;
    uint64_t v10 = &v7[-*(int *)v7];
    if (*(unsigned __int16 *)v10 >= 0xDu) {
      goto LABEL_10;
    }
LABEL_15:
    *(_DWORD *)(a1 + 3876) = 0;
    return a1;
  }
  *(_DWORD *)(a1 + 3872) = 0;
  uint64_t v10 = &v7[-*(int *)v7];
  if (*(unsigned __int16 *)v10 < 0xDu) {
    goto LABEL_15;
  }
LABEL_10:
  uint64_t v11 = *((unsigned __int16 *)v10 + 6);
  if (v11) {
    LODWORD(v11) = *(_DWORD *)&v7[v11];
  }
  *(_DWORD *)(a1 + 3876) = v11;
  return a1;
}

void sub_383508(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3) {
    sub_20A6F44(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_383520(uint64_t a1, unsigned int a2, int a3)
{
  int v25 = a3;
  unsigned int v26 = a2;
  v24[0] = &v25;
  v24[1] = (int *)&v26;
  unint64_t v4 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v4;
  uint64_t v5 = *(void *)a1;
  if (v5)
  {
    uint64_t v6 = a1 + 16;
    if (*(_DWORD *)(a1 + 304) == a2)
    {
      unsigned int v7 = 12;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 328) == a2)
    {
      unsigned int v7 = 13;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 352) == a2)
    {
      unsigned int v7 = 14;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 376) == a2)
    {
      unsigned int v7 = 15;
LABEL_10:
      ++*(void *)(a1 + 3864);
      uint64_t v8 = v6 + 24 * v7;
      *(void *)(v8 + 8) = v4;
      uint64_t v9 = *(unsigned int **)(v8 + 16);
      if (v9) {
        return (char *)v9 + *v9;
      }
      goto LABEL_32;
    }
    unint64_t v11 = *(void *)(a1 + 360);
    unint64_t v12 = *(void *)(a1 + 336);
    unint64_t v13 = *(void *)(a1 + 312);
    BOOL v14 = v13 >= v4;
    if (v13 < v4) {
      unint64_t v4 = *(void *)(a1 + 312);
    }
    int v15 = 12;
    if (v14) {
      int v15 = 0;
    }
    BOOL v16 = v12 >= v4;
    if (v12 < v4) {
      unint64_t v4 = *(void *)(a1 + 336);
    }
    int v17 = 13;
    if (v16) {
      int v17 = v15;
    }
    if (v11 >= v4) {
      unint64_t v18 = v4;
    }
    else {
      unint64_t v18 = *(void *)(a1 + 360);
    }
    unint64_t v19 = *(void *)(a1 + 384);
    if (v11 >= v4) {
      int v20 = v17;
    }
    else {
      int v20 = 14;
    }
    unint64_t v21 = (unsigned int *)sub_2AB884(v5, 3, a2, 1);
    unsigned int v22 = 15;
    if (v19 >= v18) {
      unsigned int v22 = v20;
    }
    uint64_t v23 = v6 + 24 * v22;
    *(_DWORD *)uint64_t v23 = v26;
    *(void *)(v23 + 8) = *(void *)(a1 + 3856);
    *(void *)(v23 + 16) = v21;
    if (v21) {
      return (char *)v21 + *v21;
    }
  }
LABEL_32:
  sub_3836B0(v24);
  return 0;
}

uint64_t sub_3836B0(int **a1)
{
  int v1 = **a1;
  if (v1 != 1)
  {
    if (!v1)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      std::to_string(&v15, *a1[1]);
      uint64_t v5 = std::string::insert(&v15, 0, "Failed to acquire Flatbuffer data in quad node ");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v16.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      unsigned int v7 = std::string::append(&v16, " on layer ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      uint64_t v9 = sub_736EC(3u);
      uint64_t v10 = std::string::append(&v17, v9);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v19 = v10->__r_.__value_.__r.__words[2];
      long long v18 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unint64_t v12 = (void *)sub_2F404((uint64_t)exception, &v18);
    }
    unint64_t v13 = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v18, "Unknown data access error policy");
    BOOL v14 = (void *)sub_2F404((uint64_t)v13, &v18);
  }
  return 0;
}

void sub_383808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_6;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_6:
  operator delete(__p);
  goto LABEL_9;
}

uint64_t sub_3838DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = 0;
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v3;
  do
  {
    uint64_t v6 = a1 + v5;
    *(_DWORD *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 40) = 0;
    *(void *)(v6 + 24) = 0;
    *(void *)(v6 + 48) = 0;
    v5 += 48;
  }
  while (v5 != 3840);
  *(void *)(a1 + 3872) = 0;
  *(_OWORD *)(a1 + 3856) = 0u;
  unsigned int v7 = sub_383A0C(a1, 1u, 1);
  if (!v7)
  {
    *(_DWORD *)(a1 + 3872) = 0;
    *(_DWORD *)(a1 + 3876) = 0;
    return a1;
  }
  long long v8 = &v7[-*(int *)v7];
  if (*(unsigned __int16 *)v8 >= 0xBu)
  {
    uint64_t v9 = *((unsigned __int16 *)v8 + 5);
    if (v9) {
      LODWORD(v9) = *(_DWORD *)&v7[v9];
    }
    *(_DWORD *)(a1 + 3872) = v9;
    uint64_t v10 = &v7[-*(int *)v7];
    if (*(unsigned __int16 *)v10 >= 0xDu) {
      goto LABEL_10;
    }
LABEL_15:
    *(_DWORD *)(a1 + 3876) = 0;
    return a1;
  }
  *(_DWORD *)(a1 + 3872) = 0;
  uint64_t v10 = &v7[-*(int *)v7];
  if (*(unsigned __int16 *)v10 < 0xDu) {
    goto LABEL_15;
  }
LABEL_10:
  uint64_t v11 = *((unsigned __int16 *)v10 + 6);
  if (v11) {
    LODWORD(v11) = *(_DWORD *)&v7[v11];
  }
  *(_DWORD *)(a1 + 3876) = v11;
  return a1;
}

void sub_3839F4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3) {
    sub_20A6F44(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_383A0C(uint64_t a1, unsigned int a2, int a3)
{
  int v24 = a3;
  unsigned int v25 = a2;
  v23[0] = &v24;
  v23[1] = (int *)&v25;
  unint64_t v4 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v4;
  uint64_t v5 = *(void *)a1;
  if (v5)
  {
    uint64_t v6 = a1 + 16;
    if (*(_DWORD *)(a1 + 400) == a2)
    {
      unsigned int v7 = 16;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 424) == a2)
    {
      unsigned int v7 = 17;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 448) == a2)
    {
      unsigned int v7 = 18;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 472) == a2)
    {
      unsigned int v7 = 19;
LABEL_10:
      ++*(void *)(a1 + 3864);
      uint64_t v8 = v6 + 24 * v7;
      *(void *)(v8 + 8) = v4;
      uint64_t v9 = *(unsigned int **)(v8 + 16);
      if (v9) {
        return (char *)v9 + *v9;
      }
      goto LABEL_28;
    }
    unint64_t v11 = *(void *)(a1 + 456);
    unint64_t v12 = *(void *)(a1 + 432);
    unint64_t v13 = *(void *)(a1 + 408);
    BOOL v14 = v13 < v4;
    if (v13 < v4) {
      unint64_t v4 = *(void *)(a1 + 408);
    }
    BOOL v15 = v12 >= v4;
    if (v12 < v4) {
      unint64_t v4 = *(void *)(a1 + 432);
    }
    int v16 = 16 * v14;
    if (!v15) {
      int v16 = 17;
    }
    if (v11 >= v4) {
      unint64_t v17 = v4;
    }
    else {
      unint64_t v17 = *(void *)(a1 + 456);
    }
    unint64_t v18 = *(void *)(a1 + 480);
    if (v11 >= v4) {
      int v19 = v16;
    }
    else {
      int v19 = 18;
    }
    int v20 = (unsigned int *)sub_2AB884(v5, 4, a2, 1);
    unsigned int v21 = 19;
    if (v18 >= v17) {
      unsigned int v21 = v19;
    }
    uint64_t v22 = v6 + 24 * v21;
    *(_DWORD *)uint64_t v22 = v25;
    *(void *)(v22 + 8) = *(void *)(a1 + 3856);
    *(void *)(v22 + 16) = v20;
    if (v20) {
      return (char *)v20 + *v20;
    }
  }
LABEL_28:
  sub_383B9C(v23);
  return 0;
}

uint64_t sub_383B9C(int **a1)
{
  int v1 = **a1;
  if (v1 != 1)
  {
    if (!v1)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      std::to_string(&v15, *a1[1]);
      uint64_t v5 = std::string::insert(&v15, 0, "Failed to acquire Flatbuffer data in quad node ");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v16.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      unsigned int v7 = std::string::append(&v16, " on layer ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      uint64_t v9 = sub_736EC(4u);
      uint64_t v10 = std::string::append(&v17, v9);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v19 = v10->__r_.__value_.__r.__words[2];
      long long v18 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unint64_t v12 = (void *)sub_2F404((uint64_t)exception, &v18);
    }
    unint64_t v13 = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v18, "Unknown data access error policy");
    BOOL v14 = (void *)sub_2F404((uint64_t)v13, &v18);
  }
  return 0;
}

void sub_383CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_6;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_6:
  operator delete(__p);
  goto LABEL_9;
}

uint64_t sub_383DC8(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = 0;
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  do
  {
    uint64_t v8 = a1 + v7;
    *(_DWORD *)(v8 + 16) = 0;
    *(_DWORD *)(v8 + 40) = 0;
    *(void *)(v8 + 24) = 0;
    *(void *)(v8 + 48) = 0;
    v7 += 48;
  }
  while (v7 != 3840);
  *(_WORD *)(a1 + 3872) = 0;
  *(_OWORD *)(a1 + 3856) = 0u;
  char v15 = 20;
  strcpy(__p, "ignore_flat_profiles");
  BOOL v9 = sub_29D62C(a3, (uint64_t)__p);
  if (v15 < 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)(a1 + 3874) = v9;
  uint64_t v10 = sub_2E5F98(a1, 1u, 1);
  if (v10)
  {
    long long v11 = &v10[-*(int *)v10];
    if (*(unsigned __int16 *)v11 >= 0xFu)
    {
      if (*((_WORD *)v11 + 7))
      {
        char v15 = 6;
        strcpy(__p, "branch");
        unint64_t v12 = (unsigned __int8 *)sub_561B0(a3, (uint64_t)__p);
        if (v15 < 0) {
          operator delete(*(void **)__p);
        }
        *(_WORD *)(a1 + 3872) = (unsigned __int16)sub_383F54(a1, v12);
      }
    }
  }
  return a1;
}

void sub_383F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_14A84(v14);
  _Unwind_Resume(a1);
}

char *sub_383F54(uint64_t a1, unsigned __int8 *a2)
{
  double result = sub_2E5F98(a1, 1u, 1);
  if (result)
  {
    unint64_t v4 = (int *)result;
    uint64_t v5 = &result[-*(int *)result];
    if (*(unsigned __int16 *)v5 >= 0xFu)
    {
      uint64_t v6 = *((unsigned __int16 *)v5 + 7);
      if (v6)
      {
        int v7 = *(_DWORD *)&result[v6 + *(unsigned int *)&result[v6]];
        if (v7)
        {
          uint64_t v8 = 0;
          do
          {
            BOOL v9 = (unsigned __int16 *)((char *)v4 - *v4);
            if (*v9 >= 0xFu && (uint64_t v10 = v9[7]) != 0)
            {
              long long v11 = (unsigned int *)sub_384158((unsigned int *)((char *)v4 + v10 + *(unsigned int *)((char *)v4 + v10)), v8);
              unint64_t v13 = v11 + 1;
              size_t v12 = *v11;
              if (v12 < 0x17) {
                goto LABEL_14;
              }
            }
            else
            {
              std::string v16 = (unsigned int *)sub_384158(0, v8);
              unint64_t v13 = v16 + 1;
              size_t v12 = *v16;
              if (v12 < 0x17)
              {
LABEL_14:
                HIBYTE(v33) = v12;
                p_p = &__p;
                if (!v12) {
                  goto LABEL_16;
                }
                goto LABEL_15;
              }
            }
            if ((v12 | 7) == 0x17) {
              uint64_t v14 = (v12 & 0xFFFFFFF8) + 8;
            }
            else {
              uint64_t v14 = v12 | 7;
            }
            p_p = operator new(v14 + 1);
            size_t v32 = v12;
            uint64_t v33 = v14 - 0x7FFFFFFFFFFFFFFFLL;
            long long __p = p_p;
LABEL_15:
            memcpy(p_p, v13, v12);
LABEL_16:
            BOOL v17 = 0;
            *((unsigned char *)p_p + v12) = 0;
            uint64_t v18 = a2[23];
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = a2[23];
            }
            else {
              uint64_t v19 = *((void *)a2 + 1);
            }
            size_t v20 = HIBYTE(v33);
            int v21 = SHIBYTE(v33);
            if (v33 < 0) {
              size_t v20 = v32;
            }
            if (v19 != v20) {
              goto LABEL_33;
            }
            if (v33 >= 0) {
              uint64_t v22 = (unsigned __int8 *)&__p;
            }
            else {
              uint64_t v22 = (unsigned __int8 *)__p;
            }
            if ((v18 & 0x80) != 0)
            {
              BOOL v17 = memcmp(*(const void **)a2, v22, *((void *)a2 + 1)) == 0;
              if (v21 < 0) {
                goto LABEL_34;
              }
            }
            else
            {
              if (a2[23])
              {
                uint64_t v23 = v18 - 1;
                int v24 = a2;
                do
                {
                  int v26 = *v24++;
                  int v25 = v26;
                  int v28 = *v22++;
                  int v27 = v28;
                  BOOL v30 = v23-- != 0;
                  BOOL v17 = v25 == v27;
                }
                while (v25 == v27 && v30);
LABEL_33:
                if ((SHIBYTE(v33) & 0x80000000) == 0) {
                  goto LABEL_35;
                }
LABEL_34:
                operator delete(__p);
                goto LABEL_35;
              }
              BOOL v17 = 1;
              if (SHIBYTE(v33) < 0) {
                goto LABEL_34;
              }
            }
LABEL_35:
            if (v17) {
              return (char *)sub_3842BC(v8);
            }
            uint64_t v8 = (v8 + 1);
          }
          while (v8 != v7);
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_384158(unsigned int *a1, unsigned int a2)
{
  if (!a1 || *a1 <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v10, a2);
    uint64_t v5 = std::string::insert(&v10, 0, "Flatbuffer vector requested index ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    int v7 = std::string::append(&v11, " is out of range");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v7->__r_.__value_.__r.__words[2];
    long long v12 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    BOOL v9 = (void *)sub_2F404((uint64_t)exception, &v12);
  }
  return (uint64_t)&a1[a2 + 1] + a1[a2 + 1];
}

void sub_38423C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_3842BC(uint64_t result)
{
  unsigned int v1 = result;
  if (result >= 0x10000)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v8, v1);
    uint64_t v3 = std::string::insert(&v8, 0, "narrowing ");
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v9.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    uint64_t v5 = std::string::append(&v9, " failed");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    std::string::size_type v11 = v5->__r_.__value_.__r.__words[2];
    long long v10 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    int v7 = (void *)sub_2F404((uint64_t)exception, &v10);
  }
  return (unsigned __int16)result;
}

void sub_384390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void sub_384410(uint64_t a1@<X0>, void *a2@<X8>)
{
  long long v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  long long v6 = *(unsigned char **)(a1 + 176);
  uint64_t v5 = *(unsigned char **)(a1 + 184);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    std::string v8 = (char *)operator new(v7);
    *a2 = v8;
    std::string v9 = &v8[8 * (v7 >> 3)];
    a2[2] = v9;
    memcpy(v8, v6, v7);
    a2[1] = v9;
  }

  std::mutex::unlock(v4);
}

void sub_3844D0(_Unwind_Exception *a1)
{
  long long v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_3844F4(char **a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  long long v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    long long v6 = *a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      std::string::size_type v11 = (char *)operator new(24 * v10);
    }
    else
    {
      std::string::size_type v11 = 0;
    }
    std::string::size_type v13 = &v11[24 * v7];
    uint64_t v14 = &v11[24 * v10];
    size_t v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    std::string v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        long long v17 = *(_OWORD *)(v5 - 24);
        *((void *)v13 - 1) = *((void *)v5 - 1);
        *(_OWORD *)(v13 - 24) = v17;
        v13 -= 24;
        v5 -= 24;
      }
      while (v5 != v6);
      uint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

uint64_t sub_3846A4(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    std::string::size_type v11 = (char *)operator new(48 * v10);
  }
  else
  {
    std::string::size_type v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  int v21 = &v11[48 * v10];
  sub_384874(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  size_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    uint64_t v18 = (char *)*a1;
    size_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      size_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_384860(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_384874(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_3849CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_3849E0(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    std::string::size_type v11 = (char *)operator new(48 * v10);
  }
  else
  {
    std::string::size_type v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  int v21 = &v11[48 * v10];
  sub_384BB0(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_384B9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_384BB0(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_384D08(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_384D1C(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    std::string::size_type v11 = (char *)operator new(48 * v10);
  }
  else
  {
    std::string::size_type v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  int v21 = &v11[48 * v10];
  sub_384EEC(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_384ED8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_384EEC(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_385044(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_385058(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    std::string::size_type v11 = (char *)operator new(48 * v10);
  }
  else
  {
    std::string::size_type v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  int v21 = &v11[48 * v10];
  sub_385228(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_385214(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_385228(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_385380(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_385394(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    std::string::size_type v11 = (char *)operator new(48 * v10);
  }
  else
  {
    std::string::size_type v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  int v21 = &v11[48 * v10];
  sub_385564(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_385550(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_385564(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_3856BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_3856D0(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    std::string::size_type v11 = (char *)operator new(48 * v10);
  }
  else
  {
    std::string::size_type v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  int v21 = &v11[48 * v10];
  sub_3858A0(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_38588C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_3858A0(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_3859F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_385A0C(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    std::string::size_type v11 = (char *)operator new(48 * v10);
  }
  else
  {
    std::string::size_type v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  int v21 = &v11[48 * v10];
  sub_385BDC(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_385BC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_385BDC(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_385D34(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_385D48(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    std::string::size_type v11 = (char *)operator new(48 * v10);
  }
  else
  {
    std::string::size_type v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  int v21 = &v11[48 * v10];
  sub_385F18(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_385F04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_385F18(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_386070(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_386084(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    std::string::size_type v11 = (char *)operator new(48 * v10);
  }
  else
  {
    std::string::size_type v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  int v21 = &v11[48 * v10];
  sub_386254(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_386240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_386254(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_3863AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_3863C0(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    std::string::size_type v11 = (char *)operator new(48 * v10);
  }
  else
  {
    std::string::size_type v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  int v21 = &v11[48 * v10];
  sub_386590(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_38657C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_386590(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_3866E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_3866FC(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    std::string::size_type v11 = (char *)operator new(48 * v10);
  }
  else
  {
    std::string::size_type v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  int v21 = &v11[48 * v10];
  sub_3868CC(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_3868B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_3868CC(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_386A24(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_386A38()
{
  return v0;
}

void sub_386A48()
{
  unk_25574EF = 16641;
  word_25574D8 = 65;
  byte_2557507 = 1;
  byte_255751F = 21;
  byte_25574F1 = 0;
  strcpy((char *)&xmmword_2557508, "ServerError.Exception");
}

void sub_386A94(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  sub_DBC6A8(a1, (uint64_t)&v69);
  sub_DBC894(a1, (uint64_t)&v67);
  unint64_t v8 = sub_DBB1D4(a1);
  int v10 = v9;
  char v11 = sub_DBEEE4(a1);
  char v12 = sub_DB71DC(a1);
  sub_387558();
  sub_DC47A0(a1, (uint64_t)v101);
  sub_DC45D0(a1, (uint64_t)v99);
  sub_DC4984(a1, (uint64_t)v97);
  if (!v102 && !v100 && !v98)
  {
    memset(v62, 0, sizeof(v62));
    goto LABEL_56;
  }
  sub_391290(*a2, &v85);
  uint64_t v13 = (uint64_t *)nullsub_1(*a2);
  uint64_t v14 = (std::__shared_weak_count *)v13[1];
  uint64_t v83 = *v13;
  uint64_t v84 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v15 = sub_49CB90((uint64_t)v91, (uint64_t)&v83);
  long long v16 = v84;
  if (v84 && !atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *, double))v16->__on_zero_shared)(v16, v15);
    std::__shared_weak_count::__release_weak(v16);
    if (v102) {
      goto LABEL_9;
    }
  }
  else if (v102)
  {
LABEL_9:
    long long v17 = (uint64_t *)nullsub_1(*a2);
    sub_36446C(v17, (uint64_t)v101, (uint64_t *)&v81);
    unint64_t v18 = v81;
    goto LABEL_13;
  }
  unint64_t v18 = v85;
  uint64_t v81 = v85;
  uint64_t v82 = v86;
  if (v86) {
    atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_13:
  uint64_t v79 = v18;
  uint64_t v80 = v82;
  if (v82) {
    atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_49CBE8((uint64_t)v91, (uint64_t *)&v79);
  uint64_t v19 = v80;
  if (v80 && !atomic_fetch_add(&v80->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if (v100) {
      goto LABEL_18;
    }
  }
  else if (v100)
  {
LABEL_18:
    nullsub_1(*a2);
    sub_36807C();
    uint64_t v20 = v77;
    goto LABEL_22;
  }
  uint64_t v20 = v87;
  uint64_t v77 = v87;
  uint64_t v78 = v88;
  if (v88) {
    atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_22:
  uint64_t v75 = v20;
  uint64_t v76 = v78;
  if (v78) {
    atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_49D33C((uint64_t)v91, &v75);
  int v21 = v76;
  if (v76 && !atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    if (v98) {
      goto LABEL_27;
    }
  }
  else if (v98)
  {
LABEL_27:
    nullsub_1(*a2);
    sub_36FA38();
    uint64_t v22 = v73;
    goto LABEL_31;
  }
  uint64_t v22 = v89;
  uint64_t v73 = v89;
  uint64_t v74 = v90;
  if (v90) {
    atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_31:
  uint64_t v71 = v22;
  unint64_t v72 = v74;
  if (v74) {
    atomic_fetch_add_explicit(&v74->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_49D658((uint64_t)v91, &v71);
  uint64_t v23 = v72;
  if (v72 && !atomic_fetch_add(&v72->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  sub_49CF68((uint64_t)v91, v62);
  int v24 = v74;
  if (v74 && !atomic_fetch_add(&v74->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  int v25 = v78;
  if (v78 && !atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  int v26 = v82;
  if (v82 && !atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  std::mutex::~mutex(&v96);
  std::mutex::~mutex(&v95);
  sub_37D394(v94);
  int v27 = v93;
  if (v93 && !atomic_fetch_add(&v93->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    int v28 = v92;
    if (v92 != v91)
    {
LABEL_48:
      if (v28) {
        (*(void (**)(void *))(*v28 + 40))(v28);
      }
      goto LABEL_52;
    }
  }
  else
  {
    int v28 = v92;
    if (v92 != v91) {
      goto LABEL_48;
    }
  }
  (*(void (**)(void *))(v91[0] + 32))(v91);
LABEL_52:
  sub_37D394(&v85);
  if (v98) {
    sub_122FE20(v97);
  }
  if (v100) {
    sub_11D7D18(v99);
  }
LABEL_56:
  if (v102) {
    sub_11D7120(v101);
  }
  if (v63)
  {
    int v29 = __p;
    if (__p)
    {
      while (1)
      {
        BOOL v30 = !v29[8] && v29[24] == 0;
        BOOL v31 = v30 && v29[21] == 0;
        BOOL v32 = v31 && v29[27] == 0;
        BOOL v33 = v32 && *((void *)v29 + 25) == 0;
        if (!v33 || v29[59]) {
          break;
        }
        int v29 = *(_DWORD **)v29;
        if (!v29) {
          goto LABEL_87;
        }
      }
      sub_388908((uint64_t)&v63);
      sub_710A8(0, (uint64_t)&qword_2557598, *a3);
    }
LABEL_87:
    uint64_t v38 = a2[1];
    uint64_t v56 = *a2;
    uint64_t v57 = (std::__shared_weak_count *)v38;
    if (v38) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v54 = v63;
    uint64_t v55 = v64;
    if (v64) {
      atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v39 = a3[1];
    uint64_t v52 = *a3;
    int32x4_t v53 = (std::__shared_weak_count *)v39;
    if (v39) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
    }
    sub_372404(a4, (uint64_t)&v56, (uint64_t)&v54, &v52, 0x1000000uLL, 0x1000000uLL, 0x8000000uLL, 0x8000000uLL, v8, v10, 0, v11, v12, v62);
    uint64_t v40 = v53;
    if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
    unsigned long long v41 = v55;
    if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
    uint64_t v37 = v57;
    if (v57) {
      goto LABEL_100;
    }
  }
  else
  {
    uint64_t v34 = a2[1];
    uint64_t v60 = *a2;
    unsigned long long v61 = (std::__shared_weak_count *)v34;
    if (v34) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v35 = a3[1];
    uint64_t v58 = *a3;
    std::string v59 = (std::__shared_weak_count *)v35;
    if (v35) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
    }
    sub_3716D8(a4, (uint64_t)&v60, &v58, v8, v10, v11, v12, v62);
    uint64_t v36 = v59;
    if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
    uint64_t v37 = v61;
    if (v61)
    {
LABEL_100:
      if (!atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  sub_37D394(v62);
  uint64_t v42 = __p;
  if (__p)
  {
    do
    {
      unsigned long long v43 = (void *)*v42;
      operator delete(v42);
      uint64_t v42 = v43;
    }
    while (v43);
  }
  uint64_t v44 = v65;
  uint64_t v65 = 0;
  if (v44) {
    operator delete(v44);
  }
  uint64_t v45 = v64;
  if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  BOOL v46 = (void **)v67;
  if (v67)
  {
    unsigned long long v47 = v68;
    unint64_t v48 = v67;
    if (v68 != v67)
    {
      do
      {
        if (*((char *)v47 - 1) < 0) {
          operator delete(*(v47 - 3));
        }
        v47 -= 3;
      }
      while (v47 != v46);
      unint64_t v48 = v67;
    }
    uint64_t v68 = v46;
    operator delete(v48);
  }
  unint64_t v49 = v69;
  if (v69)
  {
    uint64_t v50 = (uint64_t)v70;
    uint64_t v51 = v69;
    if (v70 != v69)
    {
      do
        uint64_t v50 = sub_166EE50(v50 - 64);
      while ((void *)v50 != v49);
      uint64_t v51 = v69;
    }
    uint64_t v70 = v49;
    operator delete(v51);
  }
}

void sub_3873D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_14A84((uint64_t)&a19);
  sub_14A84((uint64_t)&a21);
  sub_37D394(&a23);
  sub_323F08(&a34);
  sub_1A668(&a72);
  sub_389F18((void **)&STACK[0x210]);
  _Unwind_Resume(a1);
}

void sub_387550()
{
}

void sub_387558()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  unsigned int v4 = v3;
  uint64_t v5 = v0;
  unint64_t v7 = v6;
  unint64_t v8 = (std::__shared_weak_count *)operator new(0x2D0uLL);
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)off_2438A10;
  sub_328A0C((uint64_t)&v8[1]);
  *((_OWORD *)v7 + 1) = 0u;
  int v9 = (void **)(v7 + 2);
  *((_OWORD *)v7 + 2) = 0u;
  *((_DWORD *)v7 + 12) = 1065353216;
  *((unsigned char *)v7 + 56) = 0;
  int v10 = v7 + 7;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  *((_OWORD *)v7 + 6) = 0u;
  *((_OWORD *)v7 + 7) = 0u;
  *((_OWORD *)v7 + 8) = 0u;
  *((_OWORD *)v7 + 9) = 0u;
  *((_OWORD *)v7 + 10) = 0u;
  *((_OWORD *)v7 + 11) = 0u;
  *((_OWORD *)v7 + 12) = 0u;
  *((_OWORD *)v7 + 13) = 0u;
  *((_OWORD *)v7 + 14) = 0u;
  *(_OWORD *)((char *)v7 + 236) = 0u;
  *((_OWORD *)v7 + 16) = 0u;
  *((_OWORD *)v7 + 17) = 0u;
  *((_OWORD *)v7 + 18) = 0u;
  *unint64_t v7 = 0;
  v7[1] = 0;
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  sub_DBC6A8(v5, (uint64_t)&v249);
  sub_DBC894(v5, (uint64_t)&v247);
  unsigned int v11 = sub_DBCA08(v5);
  char v12 = (uint64_t *)sub_393290(*v2);
  if (!sub_84664(*v12) && v249 == (void *)v250)
  {
    uint64_t v13 = v247;
    if (v247 == v248)
    {
      if (!v247) {
        goto LABEL_195;
      }
      goto LABEL_7;
    }
LABEL_16:
    if (v247 == v248)
    {
      uint64_t v39 = operator new(0x2D0uLL);
      v39[1] = 0;
      v39[2] = 0;
      *uint64_t v39 = off_2438A10;
      uint64_t v40 = sub_328A0C((uint64_t)(v39 + 3));
      unsigned long long v41 = (std::__shared_weak_count *)v7[1];
      *unint64_t v7 = v40;
      v7[1] = (uint64_t)v39;
      if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
      *(_DWORD *)(*v7 + 504) = v4;
      goto LABEL_192;
    }
    if (!sub_393298(*v2)) {
      goto LABEL_194;
    }
    unsigned int v171 = v11;
    uint64_t v17 = sub_393298(*v2);
    std::mutex::lock((std::mutex *)(v17 + 56));
    sub_54214((uint64_t)v175, v17 + 120);
    std::mutex::unlock((std::mutex *)(v17 + 56));
    unint64_t v18 = (char *)operator new(0x40uLL);
    strcpy(v18, "https://traffic-api-tooling.geo.apple.com/sundance-production");
    uint64_t v19 = v2;
    uint64_t v20 = sub_393298(*v2);
    std::mutex::lock((std::mutex *)(v20 + 56));
    sub_54214((uint64_t)v222, v20 + 120);
    std::mutex::unlock((std::mutex *)(v20 + 56));
    uint64_t v2 = v19;
    *(void *)long long __p = operator new(0x19uLL);
    *(_OWORD *)&__p[8] = xmmword_20B9250;
    strcpy(*(char **)__p, "traffic_api_archive_url");
    int v21 = sub_58070(v222, (uint64_t)__p);
    if (v21 && !*((_DWORD *)v21 + 12))
    {
      uint64_t v169 = v21[5];
      if ((*(char *)(v169 + 23) & 0x80000000) == 0)
      {
        long long v170 = *(_OWORD *)v169;
        uint64_t v221 = *(void *)(v169 + 16);
        *(_OWORD *)long long __dst = v170;
        if ((__p[23] & 0x80000000) == 0)
        {
LABEL_23:
          uint64_t v22 = (void **)v223;
          if (v223)
          {
            do
            {
              uint64_t v38 = (void **)*v22;
              sub_55198((uint64_t)(v22 + 5));
              if (*((char *)v22 + 39) < 0) {
                operator delete(v22[2]);
              }
              operator delete(v22);
              uint64_t v22 = v38;
            }
            while (v38);
          }
          uint64_t v23 = v222[0];
          v222[0] = 0;
          if (v23) {
            operator delete(v23);
          }
          sub_DBCC70(v5, (uint64_t)__p);
          unsigned int v24 = v171;
          int v25 = *(std::__shared_weak_count **)(nullsub_1(*v2) + 8);
          uint64_t v173 = v25;
          if (v25) {
            atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_349738();
          long long v26 = *(_OWORD *)v222;
          v222[1] = 0;
          v222[0] = 0;
          int v27 = (std::__shared_weak_count *)v7[1];
          *(_OWORD *)unint64_t v7 = v26;
          if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
          if (v7[5])
          {
            int v28 = (void *)v7[4];
            if (v28)
            {
              do
              {
                int v29 = (void *)*v28;
                operator delete(v28);
                int v28 = v29;
              }
              while (v29);
            }
            void v7[4] = 0;
            uint64_t v30 = v7[3];
            if (v30)
            {
              for (uint64_t i = 0; i != v30; ++i)
                *((void *)*v9 + i) = 0;
            }
            v7[5] = 0;
          }
          BOOL v32 = v223;
          unsigned long long v223 = 0;
          BOOL v33 = *v9;
          *int v9 = v32;
          if (v33) {
            operator delete(v33);
          }
          unint64_t v34 = v224;
          uint64_t v35 = v225;
          void v7[4] = (uint64_t)v225;
          v7[3] = v34;
          unint64_t v224 = 0;
          uint64_t v36 = v226;
          v7[5] = v226;
          *((_DWORD *)v7 + 12) = v227;
          if (v36)
          {
            unint64_t v37 = v35[1];
            if ((v34 & (v34 - 1)) != 0)
            {
              if (v37 >= v34) {
                v37 %= v34;
              }
            }
            else
            {
              v37 &= v34 - 1;
            }
            *((void *)*v9 + v37) = v7 + 4;
            unsigned long long v225 = 0;
            uint64_t v226 = 0;
            long long v103 = v241;
            long long v104 = v242;
            *(_OWORD *)(v7 + 31) = v240;
            *(_OWORD *)(v7 + 33) = v103;
            *(_OWORD *)(v7 + 35) = v104;
            v7[37] = v243;
            long long v105 = v237;
            *(_OWORD *)(v7 + 23) = v236;
            *(_OWORD *)(v7 + 25) = v105;
            long long v106 = v239;
            *(_OWORD *)(v7 + 27) = v238;
            *(_OWORD *)(v7 + 29) = v106;
            long long v107 = v233;
            *(_OWORD *)(v7 + 15) = v232;
            *(_OWORD *)(v7 + 17) = v107;
            long long v108 = v235;
            *(_OWORD *)(v7 + 19) = v234;
            *(_OWORD *)(v7 + 21) = v108;
            long long v109 = v229;
            *int v10 = v228;
            *(_OWORD *)(v7 + 9) = v109;
            long long v110 = v231;
            *(_OWORD *)(v7 + 11) = v230;
            *(_OWORD *)(v7 + 13) = v110;
          }
          else
          {
            long long v93 = v240;
            long long v94 = v237;
            *(_OWORD *)(v7 + 23) = v236;
            *(_OWORD *)(v7 + 25) = v94;
            long long v95 = v239;
            *(_OWORD *)(v7 + 27) = v238;
            *(_OWORD *)(v7 + 29) = v95;
            long long v96 = v233;
            *(_OWORD *)(v7 + 15) = v232;
            *(_OWORD *)(v7 + 17) = v96;
            long long v97 = v235;
            *(_OWORD *)(v7 + 19) = v234;
            *(_OWORD *)(v7 + 21) = v97;
            long long v98 = v229;
            *int v10 = v228;
            *(_OWORD *)(v7 + 9) = v98;
            long long v99 = v231;
            *(_OWORD *)(v7 + 11) = v230;
            *(_OWORD *)(v7 + 13) = v99;
            long long v100 = v241;
            long long v101 = v242;
            *(_OWORD *)(v7 + 31) = v93;
            *(_OWORD *)(v7 + 33) = v100;
            v7[37] = v243;
            *(_OWORD *)(v7 + 35) = v101;
            if (v35)
            {
              do
              {
                char v102 = (void *)*v35;
                operator delete(v35);
                uint64_t v35 = v102;
              }
              while (v102);
            }
          }
          unint64_t v111 = v223;
          unsigned long long v223 = 0;
          if (v111) {
            operator delete(v111);
          }
          uint64_t v112 = (std::__shared_weak_count *)v222[1];
          if (v222[1] && !atomic_fetch_add((atomic_ullong *volatile)v222[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
          if (v173 && !atomic_fetch_add(&v173->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
            std::__shared_weak_count::__release_weak(v173);
          }
          uint64_t v113 = *v7;
          if (v171 == 0x7FFFFFFF)
          {
            uint64_t v114 = *(void *)(v113 + 576);
            unsigned int v24 = v4;
            if (*(void *)(v113 + 568) != v114) {
              unsigned int v24 = *(_DWORD *)(v114 - 96);
            }
          }
          *(_DWORD *)(v113 + 504) = v24;
          if (SHIBYTE(v221) < 0) {
            operator delete(__dst[0]);
          }
          operator delete(v18);
          int32x4_t v115 = (void **)v176;
          if (v176)
          {
            do
            {
              unint64_t v117 = (void **)*v115;
              sub_55198((uint64_t)(v115 + 5));
              if (*((char *)v115 + 39) < 0) {
                operator delete(v115[2]);
              }
              operator delete(v115);
              int32x4_t v115 = v117;
            }
            while (v117);
          }
          int32x4_t v116 = v175[0];
          v175[0] = 0;
          if (v116) {
            goto LABEL_191;
          }
          goto LABEL_192;
        }
LABEL_22:
        operator delete(*(void **)__p);
        goto LABEL_23;
      }
      sub_4200(__dst, *(void **)v169, *(void *)(v169 + 8));
    }
    else
    {
      sub_4200(__dst, v18, 0x3DuLL);
    }
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (v249 == (void *)v250) {
    goto LABEL_16;
  }
  if (sub_393298(*v2))
  {
    uint64_t v16 = sub_393298(*v2);
    std::mutex::lock((std::mutex *)(v16 + 56));
    sub_54214((uint64_t)&v244, v16 + 120);
    std::mutex::unlock((std::mutex *)(v16 + 56));
  }
  else
  {
    long long v244 = 0u;
    long long v245 = 0u;
    int v246 = 1065353216;
  }
  uint64_t v42 = (uint64_t *)nullsub_1(*v2);
  sub_31CC18((uint64_t)v222, v42, &v244);
  uint64_t v44 = (uint64_t)v249;
  for (uint64_t j = v250; v44 != j; v44 += 64)
    sub_38EB50(v4, v44);
  sub_352850((uint64_t)__dst, 0);
  v175[0] = 0;
  v175[1] = 0;
  unint64_t v176 = 0;
  sub_347478((uint64_t)__dst, (uint64_t)v175);
  unsigned int v172 = v11;
  if (SHIBYTE(v176) < 0)
  {
    operator delete(v175[0]);
    uint64_t v45 = (uint64_t)v249;
    uint64_t v46 = v250;
    if (v250 - (void)v249 == 64) {
      goto LABEL_57;
    }
  }
  else
  {
    uint64_t v45 = (uint64_t)v249;
    uint64_t v46 = v250;
    if (v250 - (void)v249 == 64)
    {
LABEL_57:
      sub_188B428(v45, (uint64_t)&v219);
      std::string::size_type size = HIBYTE(v219.__r_.__value_.__r.__words[2]);
      unint64_t v48 = (std::string *)v219.__r_.__value_.__r.__words[0];
      if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v219.__r_.__value_.__l.__size_;
      }
      else {
        unint64_t v48 = &v219;
      }
      v197[0] = v48;
      v197[1] = size;
      sub_328A0C((uint64_t)v175);
      unsigned int v49 = v172;
      sub_31CC1C((uint64_t)v222, (uint64_t)v197, v175, (uint64_t *)__p);
      BYTE7(v174[1]) = 16;
      strcpy((char *)v174, "snapshot_feed_id");
      uint64_t v50 = sub_353E58((uint64_t)__dst, v174);
      long long v51 = *(_OWORD *)__p;
      *(void *)&__p[8] = 0;
      *(void *)long long __p = 0;
      uint64_t v52 = *(std::__shared_weak_count **)(v50 + 32);
      *(_OWORD *)(v50 + 24) = v51;
      if (v52 && !atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
      if (*(void *)(v50 + 64))
      {
        int32x4_t v53 = *(void **)(v50 + 56);
        if (v53)
        {
          do
          {
            uint64_t v54 = (void *)*v53;
            operator delete(v53);
            int32x4_t v53 = v54;
          }
          while (v54);
        }
        *(void *)(v50 + 56) = 0;
        uint64_t v55 = *(void *)(v50 + 48);
        if (v55)
        {
          for (uint64_t k = 0; k != v55; ++k)
            *(void *)(*(void *)(v50 + 40) + 8 * k) = 0;
        }
        *(void *)(v50 + 64) = 0;
      }
      uint64_t v57 = *(void *)&__p[16];
      *(void *)&__p[16] = 0;
      uint64_t v58 = *(void **)(v50 + 40);
      *(void *)(v50 + 40) = v57;
      if (v58) {
        operator delete(v58);
      }
      unint64_t v59 = v199;
      uint64_t v60 = v200;
      *(void *)(v50 + 56) = v200;
      *(void *)(v50 + 48) = v59;
      unint64_t v199 = 0;
      uint64_t v61 = v201;
      *(void *)(v50 + 64) = v201;
      *(_DWORD *)(v50 + 72) = v202;
      if (v61)
      {
        unint64_t v62 = v60[1];
        if ((v59 & (v59 - 1)) != 0)
        {
          if (v62 >= v59) {
            v62 %= v59;
          }
        }
        else
        {
          v62 &= v59 - 1;
        }
        uint64_t v60 = 0;
        *(void *)(*(void *)(v50 + 40) + 8 * v62) = v50 + 56;
        int v200 = 0;
        uint64_t v201 = 0;
      }
      long long v118 = v215;
      long long v119 = v212;
      *(_OWORD *)(v50 + 208) = v211;
      *(_OWORD *)(v50 + 224) = v119;
      long long v120 = v214;
      *(_OWORD *)(v50 + 240) = v213;
      *(_OWORD *)(v50 + 256) = v120;
      long long v121 = v208;
      *(_OWORD *)(v50 + 144) = v207;
      *(_OWORD *)(v50 + 160) = v121;
      long long v122 = v210;
      *(_OWORD *)(v50 + 176) = v209;
      *(_OWORD *)(v50 + 192) = v122;
      long long v123 = v204;
      *(_OWORD *)(v50 + 80) = v203;
      *(_OWORD *)(v50 + 96) = v123;
      long long v124 = v206;
      *(_OWORD *)(v50 + 112) = v205;
      *(_OWORD *)(v50 + 128) = v124;
      long long v125 = v216;
      long long v126 = v217;
      *(_OWORD *)(v50 + 272) = v118;
      *(_OWORD *)(v50 + 288) = v125;
      *(void *)(v50 + 320) = v218;
      *(_OWORD *)(v50 + 304) = v126;
      if (SBYTE7(v174[1]) < 0)
      {
        operator delete(*(void **)&v174[0]);
        uint64_t v60 = v200;
      }
      if (v60)
      {
        do
        {
          unint64_t v127 = (void *)*v60;
          operator delete(v60);
          uint64_t v60 = v127;
        }
        while (v127);
      }
      unint64_t v128 = *(void **)&__p[16];
      *(void *)&__p[16] = 0;
      if (v128) {
        operator delete(v128);
      }
      unsigned int v129 = *(std::__shared_weak_count **)&__p[8];
      if (*(void *)&__p[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__p[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
      }
      sub_3298C0((uint64_t)v175);
      if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v219.__r_.__value_.__l.__data_);
      }
      goto LABEL_161;
    }
  }
  memset(&v219, 0, sizeof(v219));
  if (v45 == v46) {
    goto LABEL_121;
  }
  do
  {
    sub_1880F60(v45, &v219);
    std::string::size_type v63 = HIBYTE(v219.__r_.__value_.__r.__words[2]);
    uint64_t v64 = (std::string *)v219.__r_.__value_.__r.__words[0];
    if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v63 = v219.__r_.__value_.__l.__size_;
    }
    else {
      uint64_t v64 = &v219;
    }
    *(void *)&v174[0] = v64;
    *((void *)&v174[0] + 1) = v63;
    sub_328A0C((uint64_t)v175);
    sub_31CC1C((uint64_t)v222, (uint64_t)v174, v175, (uint64_t *)__p);
    sub_3298C0((uint64_t)v175);
    uint64_t v65 = *(long long **)(*(void *)__p + 568);
    if (v65 == *(long long **)(*(void *)__p + 576))
    {
      HIBYTE(v176) = 0;
      LOBYTE(v175[0]) = 0;
    }
    else if (*((char *)v65 + 23) < 0)
    {
      sub_4200(v175, *(void **)v65, *((void *)v65 + 1));
    }
    else
    {
      long long v66 = *v65;
      unint64_t v176 = (void *)*((void *)v65 + 2);
      *(_OWORD *)unint64_t v175 = v66;
    }
    char v67 = (void *)HIBYTE(v176);
    char v68 = HIBYTE(v176);
    if (SHIBYTE(v176) < 0) {
      char v67 = v175[1];
    }
    if (v67)
    {
      uint64_t v69 = sub_353E58((uint64_t)__dst, (long long *)v175);
      long long v70 = *(_OWORD *)__p;
      *(void *)&__p[8] = 0;
      *(void *)long long __p = 0;
      uint64_t v71 = *(std::__shared_weak_count **)(v69 + 32);
      *(_OWORD *)(v69 + 24) = v70;
      if (v71 && !atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
      if (*(void *)(v69 + 64))
      {
        unint64_t v72 = *(void **)(v69 + 56);
        if (v72)
        {
          do
          {
            uint64_t v73 = (void *)*v72;
            operator delete(v72);
            unint64_t v72 = v73;
          }
          while (v73);
        }
        *(void *)(v69 + 56) = 0;
        uint64_t v74 = *(void *)(v69 + 48);
        if (v74)
        {
          for (uint64_t m = 0; m != v74; ++m)
            *(void *)(*(void *)(v69 + 40) + 8 * m) = 0;
        }
        *(void *)(v69 + 64) = 0;
      }
      uint64_t v76 = *(void *)&__p[16];
      *(void *)&__p[16] = 0;
      uint64_t v77 = *(void **)(v69 + 40);
      *(void *)(v69 + 40) = v76;
      if (v77) {
        operator delete(v77);
      }
      unint64_t v78 = v199;
      uint64_t v79 = v200;
      *(void *)(v69 + 56) = v200;
      *(void *)(v69 + 48) = v78;
      unint64_t v199 = 0;
      uint64_t v80 = v201;
      *(void *)(v69 + 64) = v201;
      *(_DWORD *)(v69 + 72) = v202;
      if (v80)
      {
        unint64_t v81 = v79[1];
        if ((v78 & (v78 - 1)) != 0)
        {
          if (v81 >= v78) {
            v81 %= v78;
          }
        }
        else
        {
          v81 &= v78 - 1;
        }
        *(void *)(*(void *)(v69 + 40) + 8 * v81) = v69 + 56;
        int v200 = 0;
        uint64_t v201 = 0;
      }
      long long v82 = v216;
      *(_OWORD *)(v69 + 272) = v215;
      *(_OWORD *)(v69 + 288) = v82;
      *(_OWORD *)(v69 + 304) = v217;
      *(void *)(v69 + 320) = v218;
      long long v83 = v212;
      *(_OWORD *)(v69 + 208) = v211;
      *(_OWORD *)(v69 + 224) = v83;
      long long v84 = v214;
      *(_OWORD *)(v69 + 240) = v213;
      *(_OWORD *)(v69 + 256) = v84;
      long long v85 = v208;
      *(_OWORD *)(v69 + 144) = v207;
      *(_OWORD *)(v69 + 160) = v85;
      long long v86 = v210;
      *(_OWORD *)(v69 + 176) = v209;
      *(_OWORD *)(v69 + 192) = v86;
      long long v87 = v204;
      *(_OWORD *)(v69 + 80) = v203;
      *(_OWORD *)(v69 + 96) = v87;
      long long v88 = v206;
      *(_OWORD *)(v69 + 112) = v205;
      *(_OWORD *)(v69 + 128) = v88;
      char v68 = HIBYTE(v176);
    }
    if (v68 < 0)
    {
      operator delete(v175[0]);
      uint64_t v89 = v200;
      if (!v200) {
        goto LABEL_112;
      }
    }
    else
    {
      uint64_t v89 = v200;
      if (!v200) {
        goto LABEL_112;
      }
    }
    do
    {
      uint64_t v90 = (void *)*v89;
      operator delete(v89);
      uint64_t v89 = v90;
    }
    while (v90);
LABEL_112:
    unint64_t v91 = *(void **)&__p[16];
    *(void *)&__p[16] = 0;
    if (v91) {
      operator delete(v91);
    }
    uint64_t v92 = *(std::__shared_weak_count **)&__p[8];
    if (*(void *)&__p[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__p[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
    v45 += 64;
  }
  while (v45 != v46);
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v219.__r_.__value_.__l.__data_);
  }
LABEL_121:
  unsigned int v49 = v172;
LABEL_161:
  sub_347724((uint64_t **)__dst, 1u, (uint64_t **)v175);
  long long v130 = *(_OWORD *)v175;
  v175[0] = 0;
  v175[1] = 0;
  int32x4_t v131 = (std::__shared_weak_count *)v7[1];
  *(_OWORD *)unint64_t v7 = v130;
  if (v131 && !atomic_fetch_add(&v131->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
    std::__shared_weak_count::__release_weak(v131);
  }
  if (v7[5])
  {
    uint64_t v132 = (void *)v7[4];
    if (v132)
    {
      do
      {
        unsigned long long v133 = (void *)*v132;
        operator delete(v132);
        uint64_t v132 = v133;
      }
      while (v133);
    }
    void v7[4] = 0;
    uint64_t v134 = v7[3];
    if (v134)
    {
      for (uint64_t n = 0; n != v134; ++n)
        *((void *)*v9 + n) = 0;
    }
    v7[5] = 0;
  }
  uint64_t v136 = v176;
  unint64_t v176 = 0;
  unint64_t v137 = *v9;
  *int v9 = v136;
  if (v137) {
    operator delete(v137);
  }
  unint64_t v139 = v177;
  unsigned long long v138 = v178;
  void v7[4] = (uint64_t)v178;
  v7[3] = v139;
  unint64_t v177 = 0;
  uint64_t v140 = v179;
  v7[5] = v179;
  *((_DWORD *)v7 + 12) = v180;
  if (v140)
  {
    unint64_t v141 = v138[1];
    if ((v139 & (v139 - 1)) != 0)
    {
      if (v141 >= v139) {
        v141 %= v139;
      }
    }
    else
    {
      v141 &= v139 - 1;
    }
    *((void *)*v9 + v141) = v7 + 4;
    double v178 = 0;
    uint64_t v179 = 0;
    long long v152 = v194;
    long long v153 = v195;
    *(_OWORD *)(v7 + 31) = v193;
    *(_OWORD *)(v7 + 33) = v152;
    *(_OWORD *)(v7 + 35) = v153;
    v7[37] = v196;
    long long v154 = v190;
    *(_OWORD *)(v7 + 23) = v189;
    *(_OWORD *)(v7 + 25) = v154;
    long long v155 = v192;
    *(_OWORD *)(v7 + 27) = v191;
    *(_OWORD *)(v7 + 29) = v155;
    long long v156 = v186;
    *(_OWORD *)(v7 + 15) = v185;
    *(_OWORD *)(v7 + 17) = v156;
    long long v157 = v188;
    *(_OWORD *)(v7 + 19) = v187;
    *(_OWORD *)(v7 + 21) = v157;
    long long v158 = v182;
    *int v10 = v181;
    *(_OWORD *)(v7 + 9) = v158;
    long long v159 = v184;
    *(_OWORD *)(v7 + 11) = v183;
    *(_OWORD *)(v7 + 13) = v159;
  }
  else
  {
    long long v142 = v193;
    long long v143 = v190;
    *(_OWORD *)(v7 + 23) = v189;
    *(_OWORD *)(v7 + 25) = v143;
    long long v144 = v192;
    *(_OWORD *)(v7 + 27) = v191;
    *(_OWORD *)(v7 + 29) = v144;
    long long v145 = v186;
    *(_OWORD *)(v7 + 15) = v185;
    *(_OWORD *)(v7 + 17) = v145;
    long long v146 = v188;
    *(_OWORD *)(v7 + 19) = v187;
    *(_OWORD *)(v7 + 21) = v146;
    long long v147 = v182;
    *int v10 = v181;
    *(_OWORD *)(v7 + 9) = v147;
    long long v148 = v184;
    *(_OWORD *)(v7 + 11) = v183;
    *(_OWORD *)(v7 + 13) = v148;
    long long v149 = v194;
    long long v150 = v195;
    *(_OWORD *)(v7 + 31) = v142;
    *(_OWORD *)(v7 + 33) = v149;
    v7[37] = v196;
    *(_OWORD *)(v7 + 35) = v150;
    if (v138)
    {
      do
      {
        unint64_t v151 = (void *)*v138;
        operator delete(v138);
        unsigned long long v138 = v151;
      }
      while (v151);
    }
  }
  uint64_t v160 = v176;
  unint64_t v176 = 0;
  if (v160) {
    operator delete(v160);
  }
  uint64_t v161 = (std::__shared_weak_count *)v175[1];
  if (v175[1] && !atomic_fetch_add((atomic_ullong *volatile)v175[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
    std::__shared_weak_count::__release_weak(v161);
  }
  uint64_t v162 = *v7;
  if (v49 == 0x7FFFFFFF) {
    unsigned int v49 = *(_DWORD *)(*(void *)(v162 + 576) - 96);
  }
  *(_DWORD *)(v162 + 504) = v49;
  sub_349E78((uint64_t)__dst);
  sub_35259C((uint64_t)v222);
  unint64_t v163 = (void **)v245;
  if ((void)v245)
  {
    do
    {
      uint64_t v168 = (void **)*v163;
      sub_55198((uint64_t)(v163 + 5));
      if (*((char *)v163 + 39) < 0) {
        operator delete(v163[2]);
      }
      operator delete(v163);
      unint64_t v163 = v168;
    }
    while (v168);
  }
  int32x4_t v116 = (void *)v244;
  *(void *)&long long v244 = 0;
  if (v116) {
LABEL_191:
  }
    operator delete(v116);
LABEL_192:
  uint64_t v164 = (void *)nullsub_1(*v2);
  sub_10BC514((uint64_t)v222, v164);
  sub_10BC5B4();
  uint64_t v165 = (std::__shared_weak_count *)v223;
  if (v223 && !atomic_fetch_add((atomic_ullong *volatile)v223 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
    std::__shared_weak_count::__release_weak(v165);
    uint64_t v13 = v247;
    if (v247) {
      goto LABEL_7;
    }
LABEL_195:
    double v15 = v249;
    if (v249) {
      goto LABEL_196;
    }
  }
  else
  {
LABEL_194:
    uint64_t v13 = v247;
    if (!v247) {
      goto LABEL_195;
    }
LABEL_7:
    uint64_t v14 = v248;
    if (v248 == v13)
    {
      unint64_t v248 = v13;
      operator delete(v13);
      double v15 = v249;
      if (!v249) {
        return;
      }
LABEL_196:
      uint64_t v166 = v250;
      unint64_t v167 = v15;
      if ((void *)v250 != v15)
      {
        do
          uint64_t v166 = sub_166EE50(v166 - 64);
        while ((void *)v166 != v15);
        unint64_t v167 = v249;
      }
      uint64_t v250 = (uint64_t)v15;
      operator delete(v167);
    }
    else
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      unint64_t v248 = v13;
      operator delete(v247);
      double v15 = v249;
      if (v249) {
        goto LABEL_196;
      }
    }
  }
}

void sub_38870C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *__p, uint64_t a7, int a8, __int16 a9, char a10, char a11, uint64_t a12, ...)
{
  va_start(va, a12);
  if (a11 < 0) {
    operator delete(__p);
  }
  sub_323F08(&STACK[0x310]);
  sub_3298C0((uint64_t)va);
  if (SLOBYTE(STACK[0x45F]) < 0) {
    operator delete((void *)STACK[0x448]);
  }
  sub_349E78((uint64_t)&STACK[0x460]);
  sub_35259C((uint64_t)&STACK[0x600]);
  sub_5450C(v13 - 192);
  sub_1A668((void **)(v13 - 144));
  sub_389F18((void **)(v13 - 120));
  sub_323F08(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_388908(uint64_t a1)
{
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v52);
    sub_188FC78(&v52, (uint64_t)"Parsed ", 7);
    uint64_t v2 = (void *)std::ostream::operator<<();
    sub_188FC78(v2, (uint64_t)" snapshots", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if ((char)v51 < 0) {
      operator delete(__p);
    }
    if (v55 < 0) {
      operator delete(v54);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v52);
    sub_188FC78(&v52, (uint64_t)"Parsed ", 7);
    unsigned int v3 = (void *)std::ostream::operator<<();
    sub_188FC78(v3, (uint64_t)" speeds for CBR", 15);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if ((char)v51 < 0) {
      operator delete(__p);
    }
    if (v55 < 0) {
      operator delete(v54);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v52);
    unsigned int v4 = sub_188FC78(&v52, (uint64_t)"Parsed ", 7);
    unsigned int v6 = *(_DWORD *)(a1 + 72);
    int v5 = *(_DWORD *)(a1 + 76);
    char v48 = 8;
    strcpy((char *)v47, "pathlets");
    unsigned int v57 = v6;
    int v58 = v5;
    unsigned int v7 = 100;
    if (v6) {
      unsigned int v7 = 100 * v5 / v6;
    }
    unsigned int v56 = v7;
    sub_38ED98((uint64_t)&v58, "/", (uint64_t)&v57, " = ", (uint64_t)&v56, "% ", (uint64_t)v47);
    if ((v51 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v51 & 0x80u) == 0) {
      uint64_t v9 = v51;
    }
    else {
      uint64_t v9 = v50;
    }
    sub_188FC78(v4, (uint64_t)p_p, v9);
    if ((char)v51 < 0)
    {
      operator delete(__p);
      if ((v48 & 0x80000000) == 0) {
        goto LABEL_24;
      }
    }
    else if ((v48 & 0x80000000) == 0)
    {
LABEL_24:
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if ((char)v51 < 0) {
        operator delete(__p);
      }
      if (v55 < 0) {
        operator delete(v54);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      goto LABEL_29;
    }
    operator delete(v47[0]);
    goto LABEL_24;
  }
LABEL_29:
  if (!sub_723EC(1u)) {
    goto LABEL_45;
  }
  sub_6BAC((uint64_t)&v52);
  int v10 = sub_188FC78(&v52, (uint64_t)"Parsed ", 7);
  unsigned int v12 = *(_DWORD *)(a1 + 148);
  int v11 = *(_DWORD *)(a1 + 152);
  char v48 = 9;
  strcpy((char *)v47, "incidents");
  unsigned int v57 = v12;
  int v58 = v11;
  unsigned int v13 = 100;
  if (v12) {
    unsigned int v13 = 100 * v11 / v12;
  }
  unsigned int v56 = v13;
  sub_38ED98((uint64_t)&v58, "/", (uint64_t)&v57, " = ", (uint64_t)&v56, "% ", (uint64_t)v47);
  if ((v51 & 0x80u) == 0) {
    uint64_t v14 = &__p;
  }
  else {
    uint64_t v14 = __p;
  }
  if ((v51 & 0x80u) == 0) {
    uint64_t v15 = v51;
  }
  else {
    uint64_t v15 = v50;
  }
  sub_188FC78(v10, (uint64_t)v14, v15);
  if ((char)v51 < 0)
  {
    operator delete(__p);
    if ((v48 & 0x80000000) == 0) {
      goto LABEL_40;
    }
LABEL_119:
    operator delete(v47[0]);
    goto LABEL_40;
  }
  if (v48 < 0) {
    goto LABEL_119;
  }
LABEL_40:
  std::stringbuf::str();
  sub_7246C((uint64_t *)&__p, 1u);
  if ((char)v51 < 0) {
    operator delete(__p);
  }
  if (v55 < 0) {
    operator delete(v54);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
LABEL_45:
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v52);
    sub_188FC78(&v52, (uint64_t)"Computed ", 9);
    uint64_t v16 = (void *)std::ostream::operator<<();
    sub_188FC78(v16, (uint64_t)" closure area segments and ", 27);
    uint64_t v17 = (void *)std::ostream::operator<<();
    sub_188FC78(v17, (uint64_t)" NT area segments", 17);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if ((char)v51 < 0) {
      operator delete(__p);
    }
    if (v55 < 0) {
      operator delete(v54);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v52);
    unint64_t v18 = sub_188FC78(&v52, (uint64_t)"Parsed ", 7);
    unsigned int v20 = *(_DWORD *)(a1 + 124);
    int v19 = *(_DWORD *)(a1 + 128);
    char v48 = 6;
    strcpy((char *)v47, "colors");
    unsigned int v57 = v20;
    int v58 = v19;
    unsigned int v21 = 100;
    if (v20) {
      unsigned int v21 = 100 * v19 / v20;
    }
    unsigned int v56 = v21;
    sub_38ED98((uint64_t)&v58, "/", (uint64_t)&v57, " = ", (uint64_t)&v56, "% ", (uint64_t)v47);
    if ((v51 & 0x80u) == 0) {
      uint64_t v22 = &__p;
    }
    else {
      uint64_t v22 = __p;
    }
    if ((v51 & 0x80u) == 0) {
      uint64_t v23 = v51;
    }
    else {
      uint64_t v23 = v50;
    }
    sub_188FC78(v18, (uint64_t)v22, v23);
    if ((char)v51 < 0)
    {
      operator delete(__p);
      if ((v48 & 0x80000000) == 0) {
        goto LABEL_62;
      }
    }
    else if ((v48 & 0x80000000) == 0)
    {
LABEL_62:
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if ((char)v51 < 0) {
        operator delete(__p);
      }
      if (v55 < 0) {
        operator delete(v54);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      goto LABEL_67;
    }
    operator delete(v47[0]);
    goto LABEL_62;
  }
LABEL_67:
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v52);
    sub_188FC78(&v52, (uint64_t)"Computed ", 9);
    unsigned int v24 = (void *)std::ostream::operator<<();
    sub_188FC78(v24, (uint64_t)" closure crossing maneuver restrictions", 39);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if ((char)v51 < 0) {
      operator delete(__p);
    }
    if (v55 < 0) {
      operator delete(v54);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v52);
    int v25 = sub_188FC78(&v52, (uint64_t)"Parsed ", 7);
    unsigned int v27 = *(_DWORD *)(a1 + 136);
    int v26 = *(_DWORD *)(a1 + 140);
    char v48 = 11;
    strcpy((char *)v47, "predictions");
    unsigned int v57 = v27;
    int v58 = v26;
    unsigned int v28 = 100;
    if (v27) {
      unsigned int v28 = 100 * v26 / v27;
    }
    unsigned int v56 = v28;
    sub_38ED98((uint64_t)&v58, "/", (uint64_t)&v57, " = ", (uint64_t)&v56, "% ", (uint64_t)v47);
    if ((v51 & 0x80u) == 0) {
      int v29 = &__p;
    }
    else {
      int v29 = __p;
    }
    if ((v51 & 0x80u) == 0) {
      uint64_t v30 = v51;
    }
    else {
      uint64_t v30 = v50;
    }
    sub_188FC78(v25, (uint64_t)v29, v30);
    if ((char)v51 < 0)
    {
      operator delete(__p);
      if ((v48 & 0x80000000) == 0) {
        goto LABEL_84;
      }
    }
    else if ((v48 & 0x80000000) == 0)
    {
LABEL_84:
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if ((char)v51 < 0) {
        operator delete(__p);
      }
      if (v55 < 0) {
        operator delete(v54);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      goto LABEL_89;
    }
    operator delete(v47[0]);
    goto LABEL_84;
  }
LABEL_89:
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v52);
    sub_188FC78(&v52, (uint64_t)"Parsed ", 7);
    BOOL v31 = (void *)std::ostream::operator<<();
    sub_188FC78(v31, (uint64_t)" hours of temperature forecast in ", 34);
    BOOL v32 = (void *)std::ostream::operator<<();
    BOOL v33 = sub_188FC78(v32, (uint64_t)" ms, using ", 11);
    unint64_t v34 = (void *)sub_38EC58((uint64_t)v33, (unint64_t *)(a1 + 240));
    sub_188FC78(v34, (uint64_t)".", 1);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if ((char)v51 < 0) {
      operator delete(__p);
    }
    if (v55 < 0) {
      operator delete(v54);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v52);
    sub_188FC78(&v52, (uint64_t)"Parsed ", 7);
    uint64_t v35 = (void *)std::ostream::operator<<();
    sub_188FC78(v35, (uint64_t)" patches containing ", 20);
    uint64_t v36 = (void *)std::ostream::operator<<();
    sub_188FC78(v36, (uint64_t)" detours.", 9);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if ((char)v51 < 0) {
      operator delete(__p);
    }
    if (v55 < 0) {
      operator delete(v54);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (*(_DWORD *)(a1 + 264))
  {
    if (sub_723EC(1u)) {
      goto LABEL_103;
    }
LABEL_110:
    uint64_t result = sub_723EC(1u);
    if (!result) {
      return result;
    }
    goto LABEL_111;
  }
  if (!sub_723EC(1u)) {
    goto LABEL_110;
  }
LABEL_103:
  sub_6BAC((uint64_t)&v52);
  sub_188FC78(&v52, (uint64_t)"Parsed ", 7);
  unint64_t v37 = (void *)std::ostream::operator<<();
  sub_188FC78(v37, (uint64_t)" live EV charging stations in ", 30);
  uint64_t v38 = (void *)std::ostream::operator<<();
  sub_188FC78(v38, (uint64_t)" ms with mean report latency of ", 32);
  uint64_t v39 = (void *)std::ostream::operator<<();
  sub_188FC78(v39, (uint64_t)" s and encountered ", 19);
  uint64_t v40 = (void *)std::ostream::operator<<();
  sub_188FC78(v40, (uint64_t)" expired updates.", 17);
  std::stringbuf::str();
  sub_7246C((uint64_t *)&__p, 1u);
  if ((char)v51 < 0) {
    operator delete(__p);
  }
  if (v55 < 0) {
    operator delete(v54);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  uint64_t result = sub_723EC(1u);
  if (result)
  {
LABEL_111:
    sub_6BAC((uint64_t)&v52);
    sub_188FC78(&v52, (uint64_t)"Timings (ms): [CBR speeds: ", 27);
    uint64_t v42 = (void *)std::ostream::operator<<();
    sub_188FC78(v42, (uint64_t)", speeds: ", 10);
    unsigned long long v43 = (void *)std::ostream::operator<<();
    sub_188FC78(v43, (uint64_t)", predictions: ", 15);
    uint64_t v44 = (void *)std::ostream::operator<<();
    sub_188FC78(v44, (uint64_t)", colors: ", 10);
    uint64_t v45 = (void *)std::ostream::operator<<();
    sub_188FC78(v45, (uint64_t)", incidents: ", 13);
    uint64_t v46 = (void *)std::ostream::operator<<();
    sub_188FC78(v46, (uint64_t)"]", 1);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if ((char)v51 < 0) {
      operator delete(__p);
    }
    if (v55 < 0) {
      operator delete(v54);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return std::ios::~ios();
  }
  return result;
}

void sub_389C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a22);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void **sub_389F18(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    unsigned int v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_166EE50(v3 - 64);
      while ((void *)v3 != v2);
      unsigned int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_389F74(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  sub_DBC74C(a1, (uint64_t)&v69);
  sub_DBC910(a1, (uint64_t)&v67);
  unint64_t v8 = sub_DBB2FC(a1);
  int v10 = v9;
  char v11 = sub_DBEF74(a1);
  char v12 = sub_DB8D04(a1);
  sub_38AA38();
  sub_DC4888(a1, (uint64_t)v101);
  sub_DC46B0(a1, (uint64_t)v99);
  sub_DC4A64(a1, (uint64_t)v97);
  if (!v102 && !v100 && !v98)
  {
    memset(v62, 0, sizeof(v62));
    goto LABEL_56;
  }
  sub_391290(*a2, &v85);
  unsigned int v13 = (uint64_t *)nullsub_1(*a2);
  uint64_t v14 = (std::__shared_weak_count *)v13[1];
  uint64_t v83 = *v13;
  long long v84 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v15 = sub_49CB90((uint64_t)v91, (uint64_t)&v83);
  uint64_t v16 = v84;
  if (v84 && !atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *, double))v16->__on_zero_shared)(v16, v15);
    std::__shared_weak_count::__release_weak(v16);
    if (v102) {
      goto LABEL_9;
    }
  }
  else if (v102)
  {
LABEL_9:
    uint64_t v17 = (uint64_t *)nullsub_1(*a2);
    sub_36446C(v17, (uint64_t)v101, (uint64_t *)&v81);
    unint64_t v18 = v81;
    goto LABEL_13;
  }
  unint64_t v18 = v85;
  unint64_t v81 = v85;
  long long v82 = v86;
  if (v86) {
    atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_13:
  uint64_t v79 = v18;
  uint64_t v80 = v82;
  if (v82) {
    atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_49CBE8((uint64_t)v91, (uint64_t *)&v79);
  int v19 = v80;
  if (v80 && !atomic_fetch_add(&v80->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if (v100) {
      goto LABEL_18;
    }
  }
  else if (v100)
  {
LABEL_18:
    nullsub_1(*a2);
    sub_36807C();
    uint64_t v20 = v77;
    goto LABEL_22;
  }
  uint64_t v20 = v87;
  uint64_t v77 = v87;
  unint64_t v78 = v88;
  if (v88) {
    atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_22:
  uint64_t v75 = v20;
  uint64_t v76 = v78;
  if (v78) {
    atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_49D33C((uint64_t)v91, &v75);
  unsigned int v21 = v76;
  if (v76 && !atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    if (v98) {
      goto LABEL_27;
    }
  }
  else if (v98)
  {
LABEL_27:
    nullsub_1(*a2);
    sub_36FA38();
    uint64_t v22 = v73;
    goto LABEL_31;
  }
  uint64_t v22 = v89;
  uint64_t v73 = v89;
  uint64_t v74 = v90;
  if (v90) {
    atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_31:
  uint64_t v71 = v22;
  unint64_t v72 = v74;
  if (v74) {
    atomic_fetch_add_explicit(&v74->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_49D658((uint64_t)v91, &v71);
  uint64_t v23 = v72;
  if (v72 && !atomic_fetch_add(&v72->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  sub_49CF68((uint64_t)v91, v62);
  unsigned int v24 = v74;
  if (v74 && !atomic_fetch_add(&v74->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  int v25 = v78;
  if (v78 && !atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  int v26 = v82;
  if (v82 && !atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  std::mutex::~mutex(&v96);
  std::mutex::~mutex(&v95);
  sub_37D394(v94);
  unsigned int v27 = v93;
  if (v93 && !atomic_fetch_add(&v93->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    unsigned int v28 = v92;
    if (v92 != v91)
    {
LABEL_48:
      if (v28) {
        (*(void (**)(void *))(*v28 + 40))(v28);
      }
      goto LABEL_52;
    }
  }
  else
  {
    unsigned int v28 = v92;
    if (v92 != v91) {
      goto LABEL_48;
    }
  }
  (*(void (**)(void *))(v91[0] + 32))(v91);
LABEL_52:
  sub_37D394(&v85);
  if (v98) {
    sub_122FE20(v97);
  }
  if (v100) {
    sub_11D7D18(v99);
  }
LABEL_56:
  if (v102) {
    sub_11D7120(v101);
  }
  if (v63)
  {
    int v29 = __p;
    if (__p)
    {
      while (1)
      {
        BOOL v30 = !v29[8] && v29[24] == 0;
        BOOL v31 = v30 && v29[21] == 0;
        BOOL v32 = v31 && v29[27] == 0;
        BOOL v33 = v32 && *((void *)v29 + 25) == 0;
        if (!v33 || v29[59]) {
          break;
        }
        int v29 = *(_DWORD **)v29;
        if (!v29) {
          goto LABEL_87;
        }
      }
      sub_388908((uint64_t)&v63);
      sub_710A8(0, (uint64_t)&qword_2557598, *a3);
    }
LABEL_87:
    uint64_t v38 = a2[1];
    uint64_t v56 = *a2;
    unsigned int v57 = (std::__shared_weak_count *)v38;
    if (v38) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v54 = v63;
    char v55 = v64;
    if (v64) {
      atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v39 = a3[1];
    uint64_t v52 = *a3;
    int32x4_t v53 = (std::__shared_weak_count *)v39;
    if (v39) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
    }
    sub_372404(a4, (uint64_t)&v56, (uint64_t)&v54, &v52, 0x1000000uLL, 0x1000000uLL, 0x8000000uLL, 0x8000000uLL, v8, v10, 0, v11, v12, v62);
    uint64_t v40 = v53;
    if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
    unsigned long long v41 = v55;
    if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
    unint64_t v37 = v57;
    if (v57) {
      goto LABEL_100;
    }
  }
  else
  {
    uint64_t v34 = a2[1];
    uint64_t v60 = *a2;
    uint64_t v61 = (std::__shared_weak_count *)v34;
    if (v34) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v35 = a3[1];
    uint64_t v58 = *a3;
    unint64_t v59 = (std::__shared_weak_count *)v35;
    if (v35) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
    }
    sub_3716D8(a4, (uint64_t)&v60, &v58, v8, v10, v11, v12, v62);
    uint64_t v36 = v59;
    if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
    unint64_t v37 = v61;
    if (v61)
    {
LABEL_100:
      if (!atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  sub_37D394(v62);
  uint64_t v42 = __p;
  if (__p)
  {
    do
    {
      unsigned long long v43 = (void *)*v42;
      operator delete(v42);
      uint64_t v42 = v43;
    }
    while (v43);
  }
  uint64_t v44 = v65;
  uint64_t v65 = 0;
  if (v44) {
    operator delete(v44);
  }
  uint64_t v45 = v64;
  if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  uint64_t v46 = (void **)v67;
  if (v67)
  {
    unsigned long long v47 = v68;
    char v48 = v67;
    if (v68 != v67)
    {
      do
      {
        if (*((char *)v47 - 1) < 0) {
          operator delete(*(v47 - 3));
        }
        v47 -= 3;
      }
      while (v47 != v46);
      char v48 = v67;
    }
    char v68 = v46;
    operator delete(v48);
  }
  unsigned int v49 = v69;
  if (v69)
  {
    uint64_t v50 = (uint64_t)v70;
    unsigned __int8 v51 = v69;
    if (v70 != v69)
    {
      do
        uint64_t v50 = sub_166EE50(v50 - 64);
      while ((void *)v50 != v49);
      unsigned __int8 v51 = v69;
    }
    long long v70 = v49;
    operator delete(v51);
  }
}

void sub_38A8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_14A84((uint64_t)&a19);
  sub_14A84((uint64_t)&a21);
  sub_37D394(&a23);
  sub_323F08(&a34);
  sub_1A668(&a72);
  sub_389F18((void **)&STACK[0x210]);
  _Unwind_Resume(a1);
}

void sub_38AA30()
{
}

void sub_38AA38()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  unsigned int v4 = v3;
  uint64_t v5 = v0;
  unsigned int v7 = v6;
  unint64_t v8 = (std::__shared_weak_count *)operator new(0x2D0uLL);
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)off_2438A10;
  sub_328A0C((uint64_t)&v8[1]);
  *((_OWORD *)v7 + 1) = 0u;
  int v9 = (void **)(v7 + 2);
  *((_OWORD *)v7 + 2) = 0u;
  *((_DWORD *)v7 + 12) = 1065353216;
  *((unsigned char *)v7 + 56) = 0;
  int v10 = v7 + 7;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  *((_OWORD *)v7 + 6) = 0u;
  *((_OWORD *)v7 + 7) = 0u;
  *((_OWORD *)v7 + 8) = 0u;
  *((_OWORD *)v7 + 9) = 0u;
  *((_OWORD *)v7 + 10) = 0u;
  *((_OWORD *)v7 + 11) = 0u;
  *((_OWORD *)v7 + 12) = 0u;
  *((_OWORD *)v7 + 13) = 0u;
  *((_OWORD *)v7 + 14) = 0u;
  *(_OWORD *)((char *)v7 + 236) = 0u;
  *((_OWORD *)v7 + 16) = 0u;
  *((_OWORD *)v7 + 17) = 0u;
  *((_OWORD *)v7 + 18) = 0u;
  *unsigned int v7 = 0;
  v7[1] = 0;
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  sub_DBC74C(v5, (uint64_t)&v249);
  sub_DBC910(v5, (uint64_t)&v247);
  unsigned int v11 = sub_DBCA20(v5);
  char v12 = (uint64_t *)sub_393290(*v2);
  if (!sub_84664(*v12) && v249 == (void *)v250)
  {
    unsigned int v13 = v247;
    if (v247 == v248)
    {
      if (!v247) {
        goto LABEL_195;
      }
      goto LABEL_7;
    }
LABEL_16:
    if (v247 == v248)
    {
      uint64_t v39 = operator new(0x2D0uLL);
      v39[1] = 0;
      v39[2] = 0;
      *uint64_t v39 = off_2438A10;
      uint64_t v40 = sub_328A0C((uint64_t)(v39 + 3));
      unsigned long long v41 = (std::__shared_weak_count *)v7[1];
      *unsigned int v7 = v40;
      v7[1] = (uint64_t)v39;
      if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
      *(_DWORD *)(*v7 + 504) = v4;
      goto LABEL_192;
    }
    if (!sub_393298(*v2)) {
      goto LABEL_194;
    }
    unsigned int v171 = v11;
    uint64_t v17 = sub_393298(*v2);
    std::mutex::lock((std::mutex *)(v17 + 56));
    sub_54214((uint64_t)v175, v17 + 120);
    std::mutex::unlock((std::mutex *)(v17 + 56));
    unint64_t v18 = (char *)operator new(0x40uLL);
    strcpy(v18, "https://traffic-api-tooling.geo.apple.com/sundance-production");
    int v19 = v2;
    uint64_t v20 = sub_393298(*v2);
    std::mutex::lock((std::mutex *)(v20 + 56));
    sub_54214((uint64_t)v222, v20 + 120);
    std::mutex::unlock((std::mutex *)(v20 + 56));
    uint64_t v2 = v19;
    *(void *)long long __p = operator new(0x19uLL);
    *(_OWORD *)&__p[8] = xmmword_20B9250;
    strcpy(*(char **)__p, "traffic_api_archive_url");
    unsigned int v21 = sub_58070(v222, (uint64_t)__p);
    if (v21 && !*((_DWORD *)v21 + 12))
    {
      uint64_t v169 = v21[5];
      if ((*(char *)(v169 + 23) & 0x80000000) == 0)
      {
        long long v170 = *(_OWORD *)v169;
        uint64_t v221 = *(void *)(v169 + 16);
        *(_OWORD *)long long __dst = v170;
        if ((__p[23] & 0x80000000) == 0)
        {
LABEL_23:
          uint64_t v22 = (void **)v223;
          if (v223)
          {
            do
            {
              uint64_t v38 = (void **)*v22;
              sub_55198((uint64_t)(v22 + 5));
              if (*((char *)v22 + 39) < 0) {
                operator delete(v22[2]);
              }
              operator delete(v22);
              uint64_t v22 = v38;
            }
            while (v38);
          }
          uint64_t v23 = v222[0];
          v222[0] = 0;
          if (v23) {
            operator delete(v23);
          }
          sub_DBCEC8(v5, (uint64_t)__p);
          unsigned int v24 = v171;
          int v25 = *(std::__shared_weak_count **)(nullsub_1(*v2) + 8);
          uint64_t v173 = v25;
          if (v25) {
            atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_349738();
          long long v26 = *(_OWORD *)v222;
          v222[1] = 0;
          v222[0] = 0;
          unsigned int v27 = (std::__shared_weak_count *)v7[1];
          *(_OWORD *)unsigned int v7 = v26;
          if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
          if (v7[5])
          {
            unsigned int v28 = (void *)v7[4];
            if (v28)
            {
              do
              {
                int v29 = (void *)*v28;
                operator delete(v28);
                unsigned int v28 = v29;
              }
              while (v29);
            }
            void v7[4] = 0;
            uint64_t v30 = v7[3];
            if (v30)
            {
              for (uint64_t i = 0; i != v30; ++i)
                *((void *)*v9 + i) = 0;
            }
            v7[5] = 0;
          }
          BOOL v32 = v223;
          unsigned long long v223 = 0;
          BOOL v33 = *v9;
          *int v9 = v32;
          if (v33) {
            operator delete(v33);
          }
          unint64_t v34 = v224;
          uint64_t v35 = v225;
          void v7[4] = (uint64_t)v225;
          v7[3] = v34;
          unint64_t v224 = 0;
          uint64_t v36 = v226;
          v7[5] = v226;
          *((_DWORD *)v7 + 12) = v227;
          if (v36)
          {
            unint64_t v37 = v35[1];
            if ((v34 & (v34 - 1)) != 0)
            {
              if (v37 >= v34) {
                v37 %= v34;
              }
            }
            else
            {
              v37 &= v34 - 1;
            }
            *((void *)*v9 + v37) = v7 + 4;
            unsigned long long v225 = 0;
            uint64_t v226 = 0;
            long long v103 = v241;
            long long v104 = v242;
            *(_OWORD *)(v7 + 31) = v240;
            *(_OWORD *)(v7 + 33) = v103;
            *(_OWORD *)(v7 + 35) = v104;
            v7[37] = v243;
            long long v105 = v237;
            *(_OWORD *)(v7 + 23) = v236;
            *(_OWORD *)(v7 + 25) = v105;
            long long v106 = v239;
            *(_OWORD *)(v7 + 27) = v238;
            *(_OWORD *)(v7 + 29) = v106;
            long long v107 = v233;
            *(_OWORD *)(v7 + 15) = v232;
            *(_OWORD *)(v7 + 17) = v107;
            long long v108 = v235;
            *(_OWORD *)(v7 + 19) = v234;
            *(_OWORD *)(v7 + 21) = v108;
            long long v109 = v229;
            *int v10 = v228;
            *(_OWORD *)(v7 + 9) = v109;
            long long v110 = v231;
            *(_OWORD *)(v7 + 11) = v230;
            *(_OWORD *)(v7 + 13) = v110;
          }
          else
          {
            long long v93 = v240;
            long long v94 = v237;
            *(_OWORD *)(v7 + 23) = v236;
            *(_OWORD *)(v7 + 25) = v94;
            long long v95 = v239;
            *(_OWORD *)(v7 + 27) = v238;
            *(_OWORD *)(v7 + 29) = v95;
            long long v96 = v233;
            *(_OWORD *)(v7 + 15) = v232;
            *(_OWORD *)(v7 + 17) = v96;
            long long v97 = v235;
            *(_OWORD *)(v7 + 19) = v234;
            *(_OWORD *)(v7 + 21) = v97;
            long long v98 = v229;
            *int v10 = v228;
            *(_OWORD *)(v7 + 9) = v98;
            long long v99 = v231;
            *(_OWORD *)(v7 + 11) = v230;
            *(_OWORD *)(v7 + 13) = v99;
            long long v100 = v241;
            long long v101 = v242;
            *(_OWORD *)(v7 + 31) = v93;
            *(_OWORD *)(v7 + 33) = v100;
            v7[37] = v243;
            *(_OWORD *)(v7 + 35) = v101;
            if (v35)
            {
              do
              {
                char v102 = (void *)*v35;
                operator delete(v35);
                uint64_t v35 = v102;
              }
              while (v102);
            }
          }
          unint64_t v111 = v223;
          unsigned long long v223 = 0;
          if (v111) {
            operator delete(v111);
          }
          uint64_t v112 = (std::__shared_weak_count *)v222[1];
          if (v222[1] && !atomic_fetch_add((atomic_ullong *volatile)v222[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
          if (v173 && !atomic_fetch_add(&v173->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
            std::__shared_weak_count::__release_weak(v173);
          }
          uint64_t v113 = *v7;
          if (v171 == 0x7FFFFFFF)
          {
            uint64_t v114 = *(void *)(v113 + 576);
            unsigned int v24 = v4;
            if (*(void *)(v113 + 568) != v114) {
              unsigned int v24 = *(_DWORD *)(v114 - 96);
            }
          }
          *(_DWORD *)(v113 + 504) = v24;
          if (SHIBYTE(v221) < 0) {
            operator delete(__dst[0]);
          }
          operator delete(v18);
          int32x4_t v115 = (void **)v176;
          if (v176)
          {
            do
            {
              unint64_t v117 = (void **)*v115;
              sub_55198((uint64_t)(v115 + 5));
              if (*((char *)v115 + 39) < 0) {
                operator delete(v115[2]);
              }
              operator delete(v115);
              int32x4_t v115 = v117;
            }
            while (v117);
          }
          int32x4_t v116 = v175[0];
          v175[0] = 0;
          if (v116) {
            goto LABEL_191;
          }
          goto LABEL_192;
        }
LABEL_22:
        operator delete(*(void **)__p);
        goto LABEL_23;
      }
      sub_4200(__dst, *(void **)v169, *(void *)(v169 + 8));
    }
    else
    {
      sub_4200(__dst, v18, 0x3DuLL);
    }
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (v249 == (void *)v250) {
    goto LABEL_16;
  }
  if (sub_393298(*v2))
  {
    uint64_t v16 = sub_393298(*v2);
    std::mutex::lock((std::mutex *)(v16 + 56));
    sub_54214((uint64_t)&v244, v16 + 120);
    std::mutex::unlock((std::mutex *)(v16 + 56));
  }
  else
  {
    long long v244 = 0u;
    long long v245 = 0u;
    int v246 = 1065353216;
  }
  uint64_t v42 = (uint64_t *)nullsub_1(*v2);
  sub_31CC18((uint64_t)v222, v42, &v244);
  uint64_t v44 = (uint64_t)v249;
  for (uint64_t j = v250; v44 != j; v44 += 64)
    sub_38EB50(v4, v44);
  sub_352850((uint64_t)__dst, 0);
  v175[0] = 0;
  v175[1] = 0;
  unint64_t v176 = 0;
  sub_347478((uint64_t)__dst, (uint64_t)v175);
  unsigned int v172 = v11;
  if (SHIBYTE(v176) < 0)
  {
    operator delete(v175[0]);
    uint64_t v45 = (uint64_t)v249;
    uint64_t v46 = v250;
    if (v250 - (void)v249 == 64) {
      goto LABEL_57;
    }
  }
  else
  {
    uint64_t v45 = (uint64_t)v249;
    uint64_t v46 = v250;
    if (v250 - (void)v249 == 64)
    {
LABEL_57:
      sub_188B428(v45, (uint64_t)&v219);
      std::string::size_type size = HIBYTE(v219.__r_.__value_.__r.__words[2]);
      char v48 = (std::string *)v219.__r_.__value_.__r.__words[0];
      if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v219.__r_.__value_.__l.__size_;
      }
      else {
        char v48 = &v219;
      }
      v197[0] = v48;
      v197[1] = size;
      sub_328A0C((uint64_t)v175);
      unsigned int v49 = v172;
      sub_31CC1C((uint64_t)v222, (uint64_t)v197, v175, (uint64_t *)__p);
      BYTE7(v174[1]) = 16;
      strcpy((char *)v174, "snapshot_feed_id");
      uint64_t v50 = sub_353E58((uint64_t)__dst, v174);
      long long v51 = *(_OWORD *)__p;
      *(void *)&__p[8] = 0;
      *(void *)long long __p = 0;
      uint64_t v52 = *(std::__shared_weak_count **)(v50 + 32);
      *(_OWORD *)(v50 + 24) = v51;
      if (v52 && !atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
      if (*(void *)(v50 + 64))
      {
        int32x4_t v53 = *(void **)(v50 + 56);
        if (v53)
        {
          do
          {
            uint64_t v54 = (void *)*v53;
            operator delete(v53);
            int32x4_t v53 = v54;
          }
          while (v54);
        }
        *(void *)(v50 + 56) = 0;
        uint64_t v55 = *(void *)(v50 + 48);
        if (v55)
        {
          for (uint64_t k = 0; k != v55; ++k)
            *(void *)(*(void *)(v50 + 40) + 8 * k) = 0;
        }
        *(void *)(v50 + 64) = 0;
      }
      uint64_t v57 = *(void *)&__p[16];
      *(void *)&__p[16] = 0;
      uint64_t v58 = *(void **)(v50 + 40);
      *(void *)(v50 + 40) = v57;
      if (v58) {
        operator delete(v58);
      }
      unint64_t v59 = v199;
      uint64_t v60 = v200;
      *(void *)(v50 + 56) = v200;
      *(void *)(v50 + 48) = v59;
      unint64_t v199 = 0;
      uint64_t v61 = v201;
      *(void *)(v50 + 64) = v201;
      *(_DWORD *)(v50 + 72) = v202;
      if (v61)
      {
        unint64_t v62 = v60[1];
        if ((v59 & (v59 - 1)) != 0)
        {
          if (v62 >= v59) {
            v62 %= v59;
          }
        }
        else
        {
          v62 &= v59 - 1;
        }
        uint64_t v60 = 0;
        *(void *)(*(void *)(v50 + 40) + 8 * v62) = v50 + 56;
        int v200 = 0;
        uint64_t v201 = 0;
      }
      long long v118 = v215;
      long long v119 = v212;
      *(_OWORD *)(v50 + 208) = v211;
      *(_OWORD *)(v50 + 224) = v119;
      long long v120 = v214;
      *(_OWORD *)(v50 + 240) = v213;
      *(_OWORD *)(v50 + 256) = v120;
      long long v121 = v208;
      *(_OWORD *)(v50 + 144) = v207;
      *(_OWORD *)(v50 + 160) = v121;
      long long v122 = v210;
      *(_OWORD *)(v50 + 176) = v209;
      *(_OWORD *)(v50 + 192) = v122;
      long long v123 = v204;
      *(_OWORD *)(v50 + 80) = v203;
      *(_OWORD *)(v50 + 96) = v123;
      long long v124 = v206;
      *(_OWORD *)(v50 + 112) = v205;
      *(_OWORD *)(v50 + 128) = v124;
      long long v125 = v216;
      long long v126 = v217;
      *(_OWORD *)(v50 + 272) = v118;
      *(_OWORD *)(v50 + 288) = v125;
      *(void *)(v50 + 320) = v218;
      *(_OWORD *)(v50 + 304) = v126;
      if (SBYTE7(v174[1]) < 0)
      {
        operator delete(*(void **)&v174[0]);
        uint64_t v60 = v200;
      }
      if (v60)
      {
        do
        {
          unint64_t v127 = (void *)*v60;
          operator delete(v60);
          uint64_t v60 = v127;
        }
        while (v127);
      }
      unint64_t v128 = *(void **)&__p[16];
      *(void *)&__p[16] = 0;
      if (v128) {
        operator delete(v128);
      }
      unsigned int v129 = *(std::__shared_weak_count **)&__p[8];
      if (*(void *)&__p[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__p[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
      }
      sub_3298C0((uint64_t)v175);
      if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v219.__r_.__value_.__l.__data_);
      }
      goto LABEL_161;
    }
  }
  memset(&v219, 0, sizeof(v219));
  if (v45 == v46) {
    goto LABEL_121;
  }
  do
  {
    sub_1880F60(v45, &v219);
    std::string::size_type v63 = HIBYTE(v219.__r_.__value_.__r.__words[2]);
    uint64_t v64 = (std::string *)v219.__r_.__value_.__r.__words[0];
    if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v63 = v219.__r_.__value_.__l.__size_;
    }
    else {
      uint64_t v64 = &v219;
    }
    *(void *)&v174[0] = v64;
    *((void *)&v174[0] + 1) = v63;
    sub_328A0C((uint64_t)v175);
    sub_31CC1C((uint64_t)v222, (uint64_t)v174, v175, (uint64_t *)__p);
    sub_3298C0((uint64_t)v175);
    uint64_t v65 = *(long long **)(*(void *)__p + 568);
    if (v65 == *(long long **)(*(void *)__p + 576))
    {
      HIBYTE(v176) = 0;
      LOBYTE(v175[0]) = 0;
    }
    else if (*((char *)v65 + 23) < 0)
    {
      sub_4200(v175, *(void **)v65, *((void *)v65 + 1));
    }
    else
    {
      long long v66 = *v65;
      unint64_t v176 = (void *)*((void *)v65 + 2);
      *(_OWORD *)unint64_t v175 = v66;
    }
    char v67 = (void *)HIBYTE(v176);
    char v68 = HIBYTE(v176);
    if (SHIBYTE(v176) < 0) {
      char v67 = v175[1];
    }
    if (v67)
    {
      uint64_t v69 = sub_353E58((uint64_t)__dst, (long long *)v175);
      long long v70 = *(_OWORD *)__p;
      *(void *)&__p[8] = 0;
      *(void *)long long __p = 0;
      uint64_t v71 = *(std::__shared_weak_count **)(v69 + 32);
      *(_OWORD *)(v69 + 24) = v70;
      if (v71 && !atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
      if (*(void *)(v69 + 64))
      {
        unint64_t v72 = *(void **)(v69 + 56);
        if (v72)
        {
          do
          {
            uint64_t v73 = (void *)*v72;
            operator delete(v72);
            unint64_t v72 = v73;
          }
          while (v73);
        }
        *(void *)(v69 + 56) = 0;
        uint64_t v74 = *(void *)(v69 + 48);
        if (v74)
        {
          for (uint64_t m = 0; m != v74; ++m)
            *(void *)(*(void *)(v69 + 40) + 8 * m) = 0;
        }
        *(void *)(v69 + 64) = 0;
      }
      uint64_t v76 = *(void *)&__p[16];
      *(void *)&__p[16] = 0;
      uint64_t v77 = *(void **)(v69 + 40);
      *(void *)(v69 + 40) = v76;
      if (v77) {
        operator delete(v77);
      }
      unint64_t v78 = v199;
      uint64_t v79 = v200;
      *(void *)(v69 + 56) = v200;
      *(void *)(v69 + 48) = v78;
      unint64_t v199 = 0;
      uint64_t v80 = v201;
      *(void *)(v69 + 64) = v201;
      *(_DWORD *)(v69 + 72) = v202;
      if (v80)
      {
        unint64_t v81 = v79[1];
        if ((v78 & (v78 - 1)) != 0)
        {
          if (v81 >= v78) {
            v81 %= v78;
          }
        }
        else
        {
          v81 &= v78 - 1;
        }
        *(void *)(*(void *)(v69 + 40) + 8 * v81) = v69 + 56;
        int v200 = 0;
        uint64_t v201 = 0;
      }
      long long v82 = v216;
      *(_OWORD *)(v69 + 272) = v215;
      *(_OWORD *)(v69 + 288) = v82;
      *(_OWORD *)(v69 + 304) = v217;
      *(void *)(v69 + 320) = v218;
      long long v83 = v212;
      *(_OWORD *)(v69 + 208) = v211;
      *(_OWORD *)(v69 + 224) = v83;
      long long v84 = v214;
      *(_OWORD *)(v69 + 240) = v213;
      *(_OWORD *)(v69 + 256) = v84;
      long long v85 = v208;
      *(_OWORD *)(v69 + 144) = v207;
      *(_OWORD *)(v69 + 160) = v85;
      long long v86 = v210;
      *(_OWORD *)(v69 + 176) = v209;
      *(_OWORD *)(v69 + 192) = v86;
      long long v87 = v204;
      *(_OWORD *)(v69 + 80) = v203;
      *(_OWORD *)(v69 + 96) = v87;
      long long v88 = v206;
      *(_OWORD *)(v69 + 112) = v205;
      *(_OWORD *)(v69 + 128) = v88;
      char v68 = HIBYTE(v176);
    }
    if (v68 < 0)
    {
      operator delete(v175[0]);
      uint64_t v89 = v200;
      if (!v200) {
        goto LABEL_112;
      }
    }
    else
    {
      uint64_t v89 = v200;
      if (!v200) {
        goto LABEL_112;
      }
    }
    do
    {
      uint64_t v90 = (void *)*v89;
      operator delete(v89);
      uint64_t v89 = v90;
    }
    while (v90);
LABEL_112:
    unint64_t v91 = *(void **)&__p[16];
    *(void *)&__p[16] = 0;
    if (v91) {
      operator delete(v91);
    }
    uint64_t v92 = *(std::__shared_weak_count **)&__p[8];
    if (*(void *)&__p[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__p[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
    v45 += 64;
  }
  while (v45 != v46);
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v219.__r_.__value_.__l.__data_);
  }
LABEL_121:
  unsigned int v49 = v172;
LABEL_161:
  sub_347724((uint64_t **)__dst, 1u, (uint64_t **)v175);
  long long v130 = *(_OWORD *)v175;
  v175[0] = 0;
  v175[1] = 0;
  int32x4_t v131 = (std::__shared_weak_count *)v7[1];
  *(_OWORD *)unsigned int v7 = v130;
  if (v131 && !atomic_fetch_add(&v131->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
    std::__shared_weak_count::__release_weak(v131);
  }
  if (v7[5])
  {
    uint64_t v132 = (void *)v7[4];
    if (v132)
    {
      do
      {
        unsigned long long v133 = (void *)*v132;
        operator delete(v132);
        uint64_t v132 = v133;
      }
      while (v133);
    }
    void v7[4] = 0;
    uint64_t v134 = v7[3];
    if (v134)
    {
      for (uint64_t n = 0; n != v134; ++n)
        *((void *)*v9 + n) = 0;
    }
    v7[5] = 0;
  }
  uint64_t v136 = v176;
  unint64_t v176 = 0;
  unint64_t v137 = *v9;
  *int v9 = v136;
  if (v137) {
    operator delete(v137);
  }
  unint64_t v139 = v177;
  unsigned long long v138 = v178;
  void v7[4] = (uint64_t)v178;
  v7[3] = v139;
  unint64_t v177 = 0;
  uint64_t v140 = v179;
  v7[5] = v179;
  *((_DWORD *)v7 + 12) = v180;
  if (v140)
  {
    unint64_t v141 = v138[1];
    if ((v139 & (v139 - 1)) != 0)
    {
      if (v141 >= v139) {
        v141 %= v139;
      }
    }
    else
    {
      v141 &= v139 - 1;
    }
    *((void *)*v9 + v141) = v7 + 4;
    double v178 = 0;
    uint64_t v179 = 0;
    long long v152 = v194;
    long long v153 = v195;
    *(_OWORD *)(v7 + 31) = v193;
    *(_OWORD *)(v7 + 33) = v152;
    *(_OWORD *)(v7 + 35) = v153;
    v7[37] = v196;
    long long v154 = v190;
    *(_OWORD *)(v7 + 23) = v189;
    *(_OWORD *)(v7 + 25) = v154;
    long long v155 = v192;
    *(_OWORD *)(v7 + 27) = v191;
    *(_OWORD *)(v7 + 29) = v155;
    long long v156 = v186;
    *(_OWORD *)(v7 + 15) = v185;
    *(_OWORD *)(v7 + 17) = v156;
    long long v157 = v188;
    *(_OWORD *)(v7 + 19) = v187;
    *(_OWORD *)(v7 + 21) = v157;
    long long v158 = v182;
    *int v10 = v181;
    *(_OWORD *)(v7 + 9) = v158;
    long long v159 = v184;
    *(_OWORD *)(v7 + 11) = v183;
    *(_OWORD *)(v7 + 13) = v159;
  }
  else
  {
    long long v142 = v193;
    long long v143 = v190;
    *(_OWORD *)(v7 + 23) = v189;
    *(_OWORD *)(v7 + 25) = v143;
    long long v144 = v192;
    *(_OWORD *)(v7 + 27) = v191;
    *(_OWORD *)(v7 + 29) = v144;
    long long v145 = v186;
    *(_OWORD *)(v7 + 15) = v185;
    *(_OWORD *)(v7 + 17) = v145;
    long long v146 = v188;
    *(_OWORD *)(v7 + 19) = v187;
    *(_OWORD *)(v7 + 21) = v146;
    long long v147 = v182;
    *int v10 = v181;
    *(_OWORD *)(v7 + 9) = v147;
    long long v148 = v184;
    *(_OWORD *)(v7 + 11) = v183;
    *(_OWORD *)(v7 + 13) = v148;
    long long v149 = v194;
    long long v150 = v195;
    *(_OWORD *)(v7 + 31) = v142;
    *(_OWORD *)(v7 + 33) = v149;
    v7[37] = v196;
    *(_OWORD *)(v7 + 35) = v150;
    if (v138)
    {
      do
      {
        unint64_t v151 = (void *)*v138;
        operator delete(v138);
        unsigned long long v138 = v151;
      }
      while (v151);
    }
  }
  uint64_t v160 = v176;
  unint64_t v176 = 0;
  if (v160) {
    operator delete(v160);
  }
  uint64_t v161 = (std::__shared_weak_count *)v175[1];
  if (v175[1] && !atomic_fetch_add((atomic_ullong *volatile)v175[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
    std::__shared_weak_count::__release_weak(v161);
  }
  uint64_t v162 = *v7;
  if (v49 == 0x7FFFFFFF) {
    unsigned int v49 = *(_DWORD *)(*(void *)(v162 + 576) - 96);
  }
  *(_DWORD *)(v162 + 504) = v49;
  sub_349E78((uint64_t)__dst);
  sub_35259C((uint64_t)v222);
  unint64_t v163 = (void **)v245;
  if ((void)v245)
  {
    do
    {
      uint64_t v168 = (void **)*v163;
      sub_55198((uint64_t)(v163 + 5));
      if (*((char *)v163 + 39) < 0) {
        operator delete(v163[2]);
      }
      operator delete(v163);
      unint64_t v163 = v168;
    }
    while (v168);
  }
  int32x4_t v116 = (void *)v244;
  *(void *)&long long v244 = 0;
  if (v116) {
LABEL_191:
  }
    operator delete(v116);
LABEL_192:
  uint64_t v164 = (void *)nullsub_1(*v2);
  sub_10BC514((uint64_t)v222, v164);
  sub_10BC5B4();
  uint64_t v165 = (std::__shared_weak_count *)v223;
  if (v223 && !atomic_fetch_add((atomic_ullong *volatile)v223 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
    std::__shared_weak_count::__release_weak(v165);
    unsigned int v13 = v247;
    if (v247) {
      goto LABEL_7;
    }
LABEL_195:
    double v15 = v249;
    if (v249) {
      goto LABEL_196;
    }
  }
  else
  {
LABEL_194:
    unsigned int v13 = v247;
    if (!v247) {
      goto LABEL_195;
    }
LABEL_7:
    uint64_t v14 = v248;
    if (v248 == v13)
    {
      unint64_t v248 = v13;
      operator delete(v13);
      double v15 = v249;
      if (!v249) {
        return;
      }
LABEL_196:
      uint64_t v166 = v250;
      unint64_t v167 = v15;
      if ((void *)v250 != v15)
      {
        do
          uint64_t v166 = sub_166EE50(v166 - 64);
        while ((void *)v166 != v15);
        unint64_t v167 = v249;
      }
      uint64_t v250 = (uint64_t)v15;
      operator delete(v167);
    }
    else
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      unint64_t v248 = v13;
      operator delete(v247);
      double v15 = v249;
      if (v249) {
        goto LABEL_196;
      }
    }
  }
}

void sub_38BBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *__p, uint64_t a7, int a8, __int16 a9, char a10, char a11, uint64_t a12, ...)
{
  va_start(va, a12);
  if (a11 < 0) {
    operator delete(__p);
  }
  sub_323F08(&STACK[0x310]);
  sub_3298C0((uint64_t)va);
  if (SLOBYTE(STACK[0x45F]) < 0) {
    operator delete((void *)STACK[0x448]);
  }
  sub_349E78((uint64_t)&STACK[0x460]);
  sub_35259C((uint64_t)&STACK[0x600]);
  sub_5450C(v13 - 192);
  sub_1A668((void **)(v13 - 144));
  sub_389F18((void **)(v13 - 120));
  sub_323F08(v12);
  _Unwind_Resume(a1);
}

void sub_38BDE8(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  sub_DBC7F0(a1, (uint64_t)&v69);
  sub_DBC98C(a1, (uint64_t)&v67);
  unint64_t v8 = sub_DBE164(a1);
  int v10 = v9;
  char v11 = sub_DBF004(a1);
  char v12 = sub_DBCA50(a1);
  sub_38C8AC();
  sub_DC4814(a1, (uint64_t)v101);
  sub_DC4640(a1, (uint64_t)v99);
  sub_DC49F4(a1, (uint64_t)v97);
  if (!v102 && !v100 && !v98)
  {
    memset(v62, 0, sizeof(v62));
    goto LABEL_56;
  }
  sub_391290(*a2, &v85);
  uint64_t v13 = (uint64_t *)nullsub_1(*a2);
  uint64_t v14 = (std::__shared_weak_count *)v13[1];
  uint64_t v83 = *v13;
  long long v84 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v15 = sub_49CB90((uint64_t)v91, (uint64_t)&v83);
  uint64_t v16 = v84;
  if (v84 && !atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *, double))v16->__on_zero_shared)(v16, v15);
    std::__shared_weak_count::__release_weak(v16);
    if (v102) {
      goto LABEL_9;
    }
  }
  else if (v102)
  {
LABEL_9:
    uint64_t v17 = (uint64_t *)nullsub_1(*a2);
    sub_36446C(v17, (uint64_t)v101, (uint64_t *)&v81);
    unint64_t v18 = v81;
    goto LABEL_13;
  }
  unint64_t v18 = v85;
  unint64_t v81 = v85;
  long long v82 = v86;
  if (v86) {
    atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_13:
  uint64_t v79 = v18;
  uint64_t v80 = v82;
  if (v82) {
    atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_49CBE8((uint64_t)v91, (uint64_t *)&v79);
  int v19 = v80;
  if (v80 && !atomic_fetch_add(&v80->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if (v100) {
      goto LABEL_18;
    }
  }
  else if (v100)
  {
LABEL_18:
    nullsub_1(*a2);
    sub_36807C();
    uint64_t v20 = v77;
    goto LABEL_22;
  }
  uint64_t v20 = v87;
  uint64_t v77 = v87;
  unint64_t v78 = v88;
  if (v88) {
    atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_22:
  uint64_t v75 = v20;
  uint64_t v76 = v78;
  if (v78) {
    atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_49D33C((uint64_t)v91, &v75);
  unsigned int v21 = v76;
  if (v76 && !atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    if (v98) {
      goto LABEL_27;
    }
  }
  else if (v98)
  {
LABEL_27:
    nullsub_1(*a2);
    sub_36FA38();
    uint64_t v22 = v73;
    goto LABEL_31;
  }
  uint64_t v22 = v89;
  uint64_t v73 = v89;
  uint64_t v74 = v90;
  if (v90) {
    atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_31:
  uint64_t v71 = v22;
  unint64_t v72 = v74;
  if (v74) {
    atomic_fetch_add_explicit(&v74->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_49D658((uint64_t)v91, &v71);
  uint64_t v23 = v72;
  if (v72 && !atomic_fetch_add(&v72->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  sub_49CF68((uint64_t)v91, v62);
  unsigned int v24 = v74;
  if (v74 && !atomic_fetch_add(&v74->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  int v25 = v78;
  if (v78 && !atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  long long v26 = v82;
  if (v82 && !atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  std::mutex::~mutex(&v96);
  std::mutex::~mutex(&v95);
  sub_37D394(v94);
  unsigned int v27 = v93;
  if (v93 && !atomic_fetch_add(&v93->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    unsigned int v28 = v92;
    if (v92 != v91)
    {
LABEL_48:
      if (v28) {
        (*(void (**)(void *))(*v28 + 40))(v28);
      }
      goto LABEL_52;
    }
  }
  else
  {
    unsigned int v28 = v92;
    if (v92 != v91) {
      goto LABEL_48;
    }
  }
  (*(void (**)(void *))(v91[0] + 32))(v91);
LABEL_52:
  sub_37D394(&v85);
  if (v98) {
    sub_122FE20(v97);
  }
  if (v100) {
    sub_11D7D18(v99);
  }
LABEL_56:
  if (v102) {
    sub_11D7120(v101);
  }
  if (v63)
  {
    int v29 = __p;
    if (__p)
    {
      while (1)
      {
        BOOL v30 = !v29[8] && v29[24] == 0;
        BOOL v31 = v30 && v29[21] == 0;
        BOOL v32 = v31 && v29[27] == 0;
        BOOL v33 = v32 && *((void *)v29 + 25) == 0;
        if (!v33 || v29[59]) {
          break;
        }
        int v29 = *(_DWORD **)v29;
        if (!v29) {
          goto LABEL_87;
        }
      }
      sub_388908((uint64_t)&v63);
      sub_710A8(0, (uint64_t)&qword_2557598, *a3);
    }
LABEL_87:
    uint64_t v38 = a2[1];
    uint64_t v56 = *a2;
    uint64_t v57 = (std::__shared_weak_count *)v38;
    if (v38) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v54 = v63;
    uint64_t v55 = v64;
    if (v64) {
      atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v39 = a3[1];
    uint64_t v52 = *a3;
    int32x4_t v53 = (std::__shared_weak_count *)v39;
    if (v39) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
    }
    sub_372404(a4, (uint64_t)&v56, (uint64_t)&v54, &v52, 0x1000000uLL, 0x1000000uLL, 0x8000000uLL, 0x8000000uLL, v8, v10, 0, v11, v12, v62);
    uint64_t v40 = v53;
    if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
    unsigned long long v41 = v55;
    if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
    unint64_t v37 = v57;
    if (v57) {
      goto LABEL_100;
    }
  }
  else
  {
    uint64_t v34 = a2[1];
    uint64_t v60 = *a2;
    uint64_t v61 = (std::__shared_weak_count *)v34;
    if (v34) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v35 = a3[1];
    uint64_t v58 = *a3;
    unint64_t v59 = (std::__shared_weak_count *)v35;
    if (v35) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
    }
    sub_3716D8(a4, (uint64_t)&v60, &v58, v8, v10, v11, v12, v62);
    uint64_t v36 = v59;
    if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
    unint64_t v37 = v61;
    if (v61)
    {
LABEL_100:
      if (!atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  sub_37D394(v62);
  uint64_t v42 = __p;
  if (__p)
  {
    do
    {
      unsigned long long v43 = (void *)*v42;
      operator delete(v42);
      uint64_t v42 = v43;
    }
    while (v43);
  }
  uint64_t v44 = v65;
  uint64_t v65 = 0;
  if (v44) {
    operator delete(v44);
  }
  uint64_t v45 = v64;
  if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  uint64_t v46 = (void **)v67;
  if (v67)
  {
    unsigned long long v47 = v68;
    char v48 = v67;
    if (v68 != v67)
    {
      do
      {
        if (*((char *)v47 - 1) < 0) {
          operator delete(*(v47 - 3));
        }
        v47 -= 3;
      }
      while (v47 != v46);
      char v48 = v67;
    }
    char v68 = v46;
    operator delete(v48);
  }
  unsigned int v49 = v69;
  if (v69)
  {
    uint64_t v50 = (uint64_t)v70;
    long long v51 = v69;
    if (v70 != v69)
    {
      do
        uint64_t v50 = sub_166EE50(v50 - 64);
      while ((void *)v50 != v49);
      long long v51 = v69;
    }
    long long v70 = v49;
    operator delete(v51);
  }
}

void sub_38C72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_14A84((uint64_t)&a19);
  sub_14A84((uint64_t)&a21);
  sub_37D394(&a23);
  sub_323F08(&a34);
  sub_1A668(&a72);
  sub_389F18((void **)&STACK[0x210]);
  _Unwind_Resume(a1);
}

void sub_38C8A4()
{
}

void sub_38C8AC()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  unsigned int v4 = v3;
  uint64_t v5 = v0;
  unsigned int v7 = v6;
  unint64_t v8 = (std::__shared_weak_count *)operator new(0x2D0uLL);
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)off_2438A10;
  sub_328A0C((uint64_t)&v8[1]);
  *((_OWORD *)v7 + 1) = 0u;
  int v9 = (void **)(v7 + 2);
  *((_OWORD *)v7 + 2) = 0u;
  *((_DWORD *)v7 + 12) = 1065353216;
  *((unsigned char *)v7 + 56) = 0;
  int v10 = v7 + 7;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  *((_OWORD *)v7 + 6) = 0u;
  *((_OWORD *)v7 + 7) = 0u;
  *((_OWORD *)v7 + 8) = 0u;
  *((_OWORD *)v7 + 9) = 0u;
  *((_OWORD *)v7 + 10) = 0u;
  *((_OWORD *)v7 + 11) = 0u;
  *((_OWORD *)v7 + 12) = 0u;
  *((_OWORD *)v7 + 13) = 0u;
  *((_OWORD *)v7 + 14) = 0u;
  *(_OWORD *)((char *)v7 + 236) = 0u;
  *((_OWORD *)v7 + 16) = 0u;
  *((_OWORD *)v7 + 17) = 0u;
  *((_OWORD *)v7 + 18) = 0u;
  *unsigned int v7 = 0;
  v7[1] = 0;
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  sub_DBC7F0(v5, (uint64_t)&v249);
  sub_DBC98C(v5, (uint64_t)&v247);
  unsigned int v11 = sub_DBCA38(v5);
  char v12 = (uint64_t *)sub_393290(*v2);
  if (!sub_84664(*v12) && v249 == (void *)v250)
  {
    uint64_t v13 = v247;
    if (v247 == v248)
    {
      if (!v247) {
        goto LABEL_195;
      }
      goto LABEL_7;
    }
LABEL_16:
    if (v247 == v248)
    {
      uint64_t v39 = operator new(0x2D0uLL);
      v39[1] = 0;
      v39[2] = 0;
      *uint64_t v39 = off_2438A10;
      uint64_t v40 = sub_328A0C((uint64_t)(v39 + 3));
      unsigned long long v41 = (std::__shared_weak_count *)v7[1];
      *unsigned int v7 = v40;
      v7[1] = (uint64_t)v39;
      if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
      *(_DWORD *)(*v7 + 504) = v4;
      goto LABEL_192;
    }
    if (!sub_393298(*v2)) {
      goto LABEL_194;
    }
    unsigned int v171 = v11;
    uint64_t v17 = sub_393298(*v2);
    std::mutex::lock((std::mutex *)(v17 + 56));
    sub_54214((uint64_t)v175, v17 + 120);
    std::mutex::unlock((std::mutex *)(v17 + 56));
    unint64_t v18 = (char *)operator new(0x40uLL);
    strcpy(v18, "https://traffic-api-tooling.geo.apple.com/sundance-production");
    int v19 = v2;
    uint64_t v20 = sub_393298(*v2);
    std::mutex::lock((std::mutex *)(v20 + 56));
    sub_54214((uint64_t)v222, v20 + 120);
    std::mutex::unlock((std::mutex *)(v20 + 56));
    uint64_t v2 = v19;
    *(void *)long long __p = operator new(0x19uLL);
    *(_OWORD *)&__p[8] = xmmword_20B9250;
    strcpy(*(char **)__p, "traffic_api_archive_url");
    unsigned int v21 = sub_58070(v222, (uint64_t)__p);
    if (v21 && !*((_DWORD *)v21 + 12))
    {
      uint64_t v169 = v21[5];
      if ((*(char *)(v169 + 23) & 0x80000000) == 0)
      {
        long long v170 = *(_OWORD *)v169;
        uint64_t v221 = *(void *)(v169 + 16);
        *(_OWORD *)long long __dst = v170;
        if ((__p[23] & 0x80000000) == 0)
        {
LABEL_23:
          uint64_t v22 = (void **)v223;
          if (v223)
          {
            do
            {
              uint64_t v38 = (void **)*v22;
              sub_55198((uint64_t)(v22 + 5));
              if (*((char *)v22 + 39) < 0) {
                operator delete(v22[2]);
              }
              operator delete(v22);
              uint64_t v22 = v38;
            }
            while (v38);
          }
          uint64_t v23 = v222[0];
          v222[0] = 0;
          if (v23) {
            operator delete(v23);
          }
          sub_DBD124(v5, (uint64_t)__p);
          unsigned int v24 = v171;
          int v25 = *(std::__shared_weak_count **)(nullsub_1(*v2) + 8);
          uint64_t v173 = v25;
          if (v25) {
            atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_349738();
          long long v26 = *(_OWORD *)v222;
          v222[1] = 0;
          v222[0] = 0;
          unsigned int v27 = (std::__shared_weak_count *)v7[1];
          *(_OWORD *)unsigned int v7 = v26;
          if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
          if (v7[5])
          {
            unsigned int v28 = (void *)v7[4];
            if (v28)
            {
              do
              {
                int v29 = (void *)*v28;
                operator delete(v28);
                unsigned int v28 = v29;
              }
              while (v29);
            }
            void v7[4] = 0;
            uint64_t v30 = v7[3];
            if (v30)
            {
              for (uint64_t i = 0; i != v30; ++i)
                *((void *)*v9 + i) = 0;
            }
            v7[5] = 0;
          }
          BOOL v32 = v223;
          unsigned long long v223 = 0;
          BOOL v33 = *v9;
          *int v9 = v32;
          if (v33) {
            operator delete(v33);
          }
          unint64_t v34 = v224;
          uint64_t v35 = v225;
          void v7[4] = (uint64_t)v225;
          v7[3] = v34;
          unint64_t v224 = 0;
          uint64_t v36 = v226;
          v7[5] = v226;
          *((_DWORD *)v7 + 12) = v227;
          if (v36)
          {
            unint64_t v37 = v35[1];
            if ((v34 & (v34 - 1)) != 0)
            {
              if (v37 >= v34) {
                v37 %= v34;
              }
            }
            else
            {
              v37 &= v34 - 1;
            }
            *((void *)*v9 + v37) = v7 + 4;
            unsigned long long v225 = 0;
            uint64_t v226 = 0;
            long long v103 = v241;
            long long v104 = v242;
            *(_OWORD *)(v7 + 31) = v240;
            *(_OWORD *)(v7 + 33) = v103;
            *(_OWORD *)(v7 + 35) = v104;
            v7[37] = v243;
            long long v105 = v237;
            *(_OWORD *)(v7 + 23) = v236;
            *(_OWORD *)(v7 + 25) = v105;
            long long v106 = v239;
            *(_OWORD *)(v7 + 27) = v238;
            *(_OWORD *)(v7 + 29) = v106;
            long long v107 = v233;
            *(_OWORD *)(v7 + 15) = v232;
            *(_OWORD *)(v7 + 17) = v107;
            long long v108 = v235;
            *(_OWORD *)(v7 + 19) = v234;
            *(_OWORD *)(v7 + 21) = v108;
            long long v109 = v229;
            *int v10 = v228;
            *(_OWORD *)(v7 + 9) = v109;
            long long v110 = v231;
            *(_OWORD *)(v7 + 11) = v230;
            *(_OWORD *)(v7 + 13) = v110;
          }
          else
          {
            long long v93 = v240;
            long long v94 = v237;
            *(_OWORD *)(v7 + 23) = v236;
            *(_OWORD *)(v7 + 25) = v94;
            long long v95 = v239;
            *(_OWORD *)(v7 + 27) = v238;
            *(_OWORD *)(v7 + 29) = v95;
            long long v96 = v233;
            *(_OWORD *)(v7 + 15) = v232;
            *(_OWORD *)(v7 + 17) = v96;
            long long v97 = v235;
            *(_OWORD *)(v7 + 19) = v234;
            *(_OWORD *)(v7 + 21) = v97;
            long long v98 = v229;
            *int v10 = v228;
            *(_OWORD *)(v7 + 9) = v98;
            long long v99 = v231;
            *(_OWORD *)(v7 + 11) = v230;
            *(_OWORD *)(v7 + 13) = v99;
            long long v100 = v241;
            long long v101 = v242;
            *(_OWORD *)(v7 + 31) = v93;
            *(_OWORD *)(v7 + 33) = v100;
            v7[37] = v243;
            *(_OWORD *)(v7 + 35) = v101;
            if (v35)
            {
              do
              {
                char v102 = (void *)*v35;
                operator delete(v35);
                uint64_t v35 = v102;
              }
              while (v102);
            }
          }
          unint64_t v111 = v223;
          unsigned long long v223 = 0;
          if (v111) {
            operator delete(v111);
          }
          uint64_t v112 = (std::__shared_weak_count *)v222[1];
          if (v222[1] && !atomic_fetch_add((atomic_ullong *volatile)v222[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
          if (v173 && !atomic_fetch_add(&v173->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
            std::__shared_weak_count::__release_weak(v173);
          }
          uint64_t v113 = *v7;
          if (v171 == 0x7FFFFFFF)
          {
            uint64_t v114 = *(void *)(v113 + 576);
            unsigned int v24 = v4;
            if (*(void *)(v113 + 568) != v114) {
              unsigned int v24 = *(_DWORD *)(v114 - 96);
            }
          }
          *(_DWORD *)(v113 + 504) = v24;
          if (SHIBYTE(v221) < 0) {
            operator delete(__dst[0]);
          }
          operator delete(v18);
          int32x4_t v115 = (void **)v176;
          if (v176)
          {
            do
            {
              unint64_t v117 = (void **)*v115;
              sub_55198((uint64_t)(v115 + 5));
              if (*((char *)v115 + 39) < 0) {
                operator delete(v115[2]);
              }
              operator delete(v115);
              int32x4_t v115 = v117;
            }
            while (v117);
          }
          int32x4_t v116 = v175[0];
          v175[0] = 0;
          if (v116) {
            goto LABEL_191;
          }
          goto LABEL_192;
        }
LABEL_22:
        operator delete(*(void **)__p);
        goto LABEL_23;
      }
      sub_4200(__dst, *(void **)v169, *(void *)(v169 + 8));
    }
    else
    {
      sub_4200(__dst, v18, 0x3DuLL);
    }
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (v249 == (void *)v250) {
    goto LABEL_16;
  }
  if (sub_393298(*v2))
  {
    uint64_t v16 = sub_393298(*v2);
    std::mutex::lock((std::mutex *)(v16 + 56));
    sub_54214((uint64_t)&v244, v16 + 120);
    std::mutex::unlock((std::mutex *)(v16 + 56));
  }
  else
  {
    long long v244 = 0u;
    long long v245 = 0u;
    int v246 = 1065353216;
  }
  uint64_t v42 = (uint64_t *)nullsub_1(*v2);
  sub_31CC18((uint64_t)v222, v42, &v244);
  uint64_t v44 = (uint64_t)v249;
  for (uint64_t j = v250; v44 != j; v44 += 64)
    sub_38EB50(v4, v44);
  sub_352850((uint64_t)__dst, 0);
  v175[0] = 0;
  v175[1] = 0;
  unint64_t v176 = 0;
  sub_347478((uint64_t)__dst, (uint64_t)v175);
  unsigned int v172 = v11;
  if (SHIBYTE(v176) < 0)
  {
    operator delete(v175[0]);
    uint64_t v45 = (uint64_t)v249;
    uint64_t v46 = v250;
    if (v250 - (void)v249 == 64) {
      goto LABEL_57;
    }
  }
  else
  {
    uint64_t v45 = (uint64_t)v249;
    uint64_t v46 = v250;
    if (v250 - (void)v249 == 64)
    {
LABEL_57:
      sub_188B428(v45, (uint64_t)&v219);
      std::string::size_type size = HIBYTE(v219.__r_.__value_.__r.__words[2]);
      char v48 = (std::string *)v219.__r_.__value_.__r.__words[0];
      if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v219.__r_.__value_.__l.__size_;
      }
      else {
        char v48 = &v219;
      }
      v197[0] = v48;
      v197[1] = size;
      sub_328A0C((uint64_t)v175);
      unsigned int v49 = v172;
      sub_31CC1C((uint64_t)v222, (uint64_t)v197, v175, (uint64_t *)__p);
      BYTE7(v174[1]) = 16;
      strcpy((char *)v174, "snapshot_feed_id");
      uint64_t v50 = sub_353E58((uint64_t)__dst, v174);
      long long v51 = *(_OWORD *)__p;
      *(void *)&__p[8] = 0;
      *(void *)long long __p = 0;
      uint64_t v52 = *(std::__shared_weak_count **)(v50 + 32);
      *(_OWORD *)(v50 + 24) = v51;
      if (v52 && !atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
      if (*(void *)(v50 + 64))
      {
        int32x4_t v53 = *(void **)(v50 + 56);
        if (v53)
        {
          do
          {
            uint64_t v54 = (void *)*v53;
            operator delete(v53);
            int32x4_t v53 = v54;
          }
          while (v54);
        }
        *(void *)(v50 + 56) = 0;
        uint64_t v55 = *(void *)(v50 + 48);
        if (v55)
        {
          for (uint64_t k = 0; k != v55; ++k)
            *(void *)(*(void *)(v50 + 40) + 8 * k) = 0;
        }
        *(void *)(v50 + 64) = 0;
      }
      uint64_t v57 = *(void *)&__p[16];
      *(void *)&__p[16] = 0;
      uint64_t v58 = *(void **)(v50 + 40);
      *(void *)(v50 + 40) = v57;
      if (v58) {
        operator delete(v58);
      }
      unint64_t v59 = v199;
      uint64_t v60 = v200;
      *(void *)(v50 + 56) = v200;
      *(void *)(v50 + 48) = v59;
      unint64_t v199 = 0;
      uint64_t v61 = v201;
      *(void *)(v50 + 64) = v201;
      *(_DWORD *)(v50 + 72) = v202;
      if (v61)
      {
        unint64_t v62 = v60[1];
        if ((v59 & (v59 - 1)) != 0)
        {
          if (v62 >= v59) {
            v62 %= v59;
          }
        }
        else
        {
          v62 &= v59 - 1;
        }
        uint64_t v60 = 0;
        *(void *)(*(void *)(v50 + 40) + 8 * v62) = v50 + 56;
        int v200 = 0;
        uint64_t v201 = 0;
      }
      long long v118 = v215;
      long long v119 = v212;
      *(_OWORD *)(v50 + 208) = v211;
      *(_OWORD *)(v50 + 224) = v119;
      long long v120 = v214;
      *(_OWORD *)(v50 + 240) = v213;
      *(_OWORD *)(v50 + 256) = v120;
      long long v121 = v208;
      *(_OWORD *)(v50 + 144) = v207;
      *(_OWORD *)(v50 + 160) = v121;
      long long v122 = v210;
      *(_OWORD *)(v50 + 176) = v209;
      *(_OWORD *)(v50 + 192) = v122;
      long long v123 = v204;
      *(_OWORD *)(v50 + 80) = v203;
      *(_OWORD *)(v50 + 96) = v123;
      long long v124 = v206;
      *(_OWORD *)(v50 + 112) = v205;
      *(_OWORD *)(v50 + 128) = v124;
      long long v125 = v216;
      long long v126 = v217;
      *(_OWORD *)(v50 + 272) = v118;
      *(_OWORD *)(v50 + 288) = v125;
      *(void *)(v50 + 320) = v218;
      *(_OWORD *)(v50 + 304) = v126;
      if (SBYTE7(v174[1]) < 0)
      {
        operator delete(*(void **)&v174[0]);
        uint64_t v60 = v200;
      }
      if (v60)
      {
        do
        {
          unint64_t v127 = (void *)*v60;
          operator delete(v60);
          uint64_t v60 = v127;
        }
        while (v127);
      }
      unint64_t v128 = *(void **)&__p[16];
      *(void *)&__p[16] = 0;
      if (v128) {
        operator delete(v128);
      }
      unsigned int v129 = *(std::__shared_weak_count **)&__p[8];
      if (*(void *)&__p[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__p[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
      }
      sub_3298C0((uint64_t)v175);
      if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v219.__r_.__value_.__l.__data_);
      }
      goto LABEL_161;
    }
  }
  memset(&v219, 0, sizeof(v219));
  if (v45 == v46) {
    goto LABEL_121;
  }
  do
  {
    sub_1880F60(v45, &v219);
    std::string::size_type v63 = HIBYTE(v219.__r_.__value_.__r.__words[2]);
    uint64_t v64 = (std::string *)v219.__r_.__value_.__r.__words[0];
    if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v63 = v219.__r_.__value_.__l.__size_;
    }
    else {
      uint64_t v64 = &v219;
    }
    *(void *)&v174[0] = v64;
    *((void *)&v174[0] + 1) = v63;
    sub_328A0C((uint64_t)v175);
    sub_31CC1C((uint64_t)v222, (uint64_t)v174, v175, (uint64_t *)__p);
    sub_3298C0((uint64_t)v175);
    uint64_t v65 = *(long long **)(*(void *)__p + 568);
    if (v65 == *(long long **)(*(void *)__p + 576))
    {
      HIBYTE(v176) = 0;
      LOBYTE(v175[0]) = 0;
    }
    else if (*((char *)v65 + 23) < 0)
    {
      sub_4200(v175, *(void **)v65, *((void *)v65 + 1));
    }
    else
    {
      long long v66 = *v65;
      unint64_t v176 = (void *)*((void *)v65 + 2);
      *(_OWORD *)unint64_t v175 = v66;
    }
    char v67 = (void *)HIBYTE(v176);
    char v68 = HIBYTE(v176);
    if (SHIBYTE(v176) < 0) {
      char v67 = v175[1];
    }
    if (v67)
    {
      uint64_t v69 = sub_353E58((uint64_t)__dst, (long long *)v175);
      long long v70 = *(_OWORD *)__p;
      *(void *)&__p[8] = 0;
      *(void *)long long __p = 0;
      uint64_t v71 = *(std::__shared_weak_count **)(v69 + 32);
      *(_OWORD *)(v69 + 24) = v70;
      if (v71 && !atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
      if (*(void *)(v69 + 64))
      {
        unint64_t v72 = *(void **)(v69 + 56);
        if (v72)
        {
          do
          {
            uint64_t v73 = (void *)*v72;
            operator delete(v72);
            unint64_t v72 = v73;
          }
          while (v73);
        }
        *(void *)(v69 + 56) = 0;
        uint64_t v74 = *(void *)(v69 + 48);
        if (v74)
        {
          for (uint64_t m = 0; m != v74; ++m)
            *(void *)(*(void *)(v69 + 40) + 8 * m) = 0;
        }
        *(void *)(v69 + 64) = 0;
      }
      uint64_t v76 = *(void *)&__p[16];
      *(void *)&__p[16] = 0;
      uint64_t v77 = *(void **)(v69 + 40);
      *(void *)(v69 + 40) = v76;
      if (v77) {
        operator delete(v77);
      }
      unint64_t v78 = v199;
      uint64_t v79 = v200;
      *(void *)(v69 + 56) = v200;
      *(void *)(v69 + 48) = v78;
      unint64_t v199 = 0;
      uint64_t v80 = v201;
      *(void *)(v69 + 64) = v201;
      *(_DWORD *)(v69 + 72) = v202;
      if (v80)
      {
        unint64_t v81 = v79[1];
        if ((v78 & (v78 - 1)) != 0)
        {
          if (v81 >= v78) {
            v81 %= v78;
          }
        }
        else
        {
          v81 &= v78 - 1;
        }
        *(void *)(*(void *)(v69 + 40) + 8 * v81) = v69 + 56;
        int v200 = 0;
        uint64_t v201 = 0;
      }
      long long v82 = v216;
      *(_OWORD *)(v69 + 272) = v215;
      *(_OWORD *)(v69 + 288) = v82;
      *(_OWORD *)(v69 + 304) = v217;
      *(void *)(v69 + 320) = v218;
      long long v83 = v212;
      *(_OWORD *)(v69 + 208) = v211;
      *(_OWORD *)(v69 + 224) = v83;
      long long v84 = v214;
      *(_OWORD *)(v69 + 240) = v213;
      *(_OWORD *)(v69 + 256) = v84;
      long long v85 = v208;
      *(_OWORD *)(v69 + 144) = v207;
      *(_OWORD *)(v69 + 160) = v85;
      long long v86 = v210;
      *(_OWORD *)(v69 + 176) = v209;
      *(_OWORD *)(v69 + 192) = v86;
      long long v87 = v204;
      *(_OWORD *)(v69 + 80) = v203;
      *(_OWORD *)(v69 + 96) = v87;
      long long v88 = v206;
      *(_OWORD *)(v69 + 112) = v205;
      *(_OWORD *)(v69 + 128) = v88;
      char v68 = HIBYTE(v176);
    }
    if (v68 < 0)
    {
      operator delete(v175[0]);
      uint64_t v89 = v200;
      if (!v200) {
        goto LABEL_112;
      }
    }
    else
    {
      uint64_t v89 = v200;
      if (!v200) {
        goto LABEL_112;
      }
    }
    do
    {
      uint64_t v90 = (void *)*v89;
      operator delete(v89);
      uint64_t v89 = v90;
    }
    while (v90);
LABEL_112:
    unint64_t v91 = *(void **)&__p[16];
    *(void *)&__p[16] = 0;
    if (v91) {
      operator delete(v91);
    }
    uint64_t v92 = *(std::__shared_weak_count **)&__p[8];
    if (*(void *)&__p[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__p[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
    v45 += 64;
  }
  while (v45 != v46);
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v219.__r_.__value_.__l.__data_);
  }
LABEL_121:
  unsigned int v49 = v172;
LABEL_161:
  sub_347724((uint64_t **)__dst, 1u, (uint64_t **)v175);
  long long v130 = *(_OWORD *)v175;
  v175[0] = 0;
  v175[1] = 0;
  int32x4_t v131 = (std::__shared_weak_count *)v7[1];
  *(_OWORD *)unsigned int v7 = v130;
  if (v131 && !atomic_fetch_add(&v131->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
    std::__shared_weak_count::__release_weak(v131);
  }
  if (v7[5])
  {
    uint64_t v132 = (void *)v7[4];
    if (v132)
    {
      do
      {
        unsigned long long v133 = (void *)*v132;
        operator delete(v132);
        uint64_t v132 = v133;
      }
      while (v133);
    }
    void v7[4] = 0;
    uint64_t v134 = v7[3];
    if (v134)
    {
      for (uint64_t n = 0; n != v134; ++n)
        *((void *)*v9 + n) = 0;
    }
    v7[5] = 0;
  }
  uint64_t v136 = v176;
  unint64_t v176 = 0;
  unint64_t v137 = *v9;
  *int v9 = v136;
  if (v137) {
    operator delete(v137);
  }
  unint64_t v139 = v177;
  unsigned long long v138 = v178;
  void v7[4] = (uint64_t)v178;
  v7[3] = v139;
  unint64_t v177 = 0;
  uint64_t v140 = v179;
  v7[5] = v179;
  *((_DWORD *)v7 + 12) = v180;
  if (v140)
  {
    unint64_t v141 = v138[1];
    if ((v139 & (v139 - 1)) != 0)
    {
      if (v141 >= v139) {
        v141 %= v139;
      }
    }
    else
    {
      v141 &= v139 - 1;
    }
    *((void *)*v9 + v141) = v7 + 4;
    double v178 = 0;
    uint64_t v179 = 0;
    long long v152 = v194;
    long long v153 = v195;
    *(_OWORD *)(v7 + 31) = v193;
    *(_OWORD *)(v7 + 33) = v152;
    *(_OWORD *)(v7 + 35) = v153;
    v7[37] = v196;
    long long v154 = v190;
    *(_OWORD *)(v7 + 23) = v189;
    *(_OWORD *)(v7 + 25) = v154;
    long long v155 = v192;
    *(_OWORD *)(v7 + 27) = v191;
    *(_OWORD *)(v7 + 29) = v155;
    long long v156 = v186;
    *(_OWORD *)(v7 + 15) = v185;
    *(_OWORD *)(v7 + 17) = v156;
    long long v157 = v188;
    *(_OWORD *)(v7 + 19) = v187;
    *(_OWORD *)(v7 + 21) = v157;
    long long v158 = v182;
    *int v10 = v181;
    *(_OWORD *)(v7 + 9) = v158;
    long long v159 = v184;
    *(_OWORD *)(v7 + 11) = v183;
    *(_OWORD *)(v7 + 13) = v159;
  }
  else
  {
    long long v142 = v193;
    long long v143 = v190;
    *(_OWORD *)(v7 + 23) = v189;
    *(_OWORD *)(v7 + 25) = v143;
    long long v144 = v192;
    *(_OWORD *)(v7 + 27) = v191;
    *(_OWORD *)(v7 + 29) = v144;
    long long v145 = v186;
    *(_OWORD *)(v7 + 15) = v185;
    *(_OWORD *)(v7 + 17) = v145;
    long long v146 = v188;
    *(_OWORD *)(v7 + 19) = v187;
    *(_OWORD *)(v7 + 21) = v146;
    long long v147 = v182;
    *int v10 = v181;
    *(_OWORD *)(v7 + 9) = v147;
    long long v148 = v184;
    *(_OWORD *)(v7 + 11) = v183;
    *(_OWORD *)(v7 + 13) = v148;
    long long v149 = v194;
    long long v150 = v195;
    *(_OWORD *)(v7 + 31) = v142;
    *(_OWORD *)(v7 + 33) = v149;
    v7[37] = v196;
    *(_OWORD *)(v7 + 35) = v150;
    if (v138)
    {
      do
      {
        unint64_t v151 = (void *)*v138;
        operator delete(v138);
        unsigned long long v138 = v151;
      }
      while (v151);
    }
  }
  uint64_t v160 = v176;
  unint64_t v176 = 0;
  if (v160) {
    operator delete(v160);
  }
  uint64_t v161 = (std::__shared_weak_count *)v175[1];
  if (v175[1] && !atomic_fetch_add((atomic_ullong *volatile)v175[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
    std::__shared_weak_count::__release_weak(v161);
  }
  uint64_t v162 = *v7;
  if (v49 == 0x7FFFFFFF) {
    unsigned int v49 = *(_DWORD *)(*(void *)(v162 + 576) - 96);
  }
  *(_DWORD *)(v162 + 504) = v49;
  sub_349E78((uint64_t)__dst);
  sub_35259C((uint64_t)v222);
  unint64_t v163 = (void **)v245;
  if ((void)v245)
  {
    do
    {
      uint64_t v168 = (void **)*v163;
      sub_55198((uint64_t)(v163 + 5));
      if (*((char *)v163 + 39) < 0) {
        operator delete(v163[2]);
      }
      operator delete(v163);
      unint64_t v163 = v168;
    }
    while (v168);
  }
  int32x4_t v116 = (void *)v244;
  *(void *)&long long v244 = 0;
  if (v116) {
LABEL_191:
  }
    operator delete(v116);
LABEL_192:
  uint64_t v164 = (void *)nullsub_1(*v2);
  sub_10BC514((uint64_t)v222, v164);
  sub_10BC5B4();
  uint64_t v165 = (std::__shared_weak_count *)v223;
  if (v223 && !atomic_fetch_add((atomic_ullong *volatile)v223 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
    std::__shared_weak_count::__release_weak(v165);
    uint64_t v13 = v247;
    if (v247) {
      goto LABEL_7;
    }
LABEL_195:
    double v15 = v249;
    if (v249) {
      goto LABEL_196;
    }
  }
  else
  {
LABEL_194:
    uint64_t v13 = v247;
    if (!v247) {
      goto LABEL_195;
    }
LABEL_7:
    uint64_t v14 = v248;
    if (v248 == v13)
    {
      unint64_t v248 = v13;
      operator delete(v13);
      double v15 = v249;
      if (!v249) {
        return;
      }
LABEL_196:
      uint64_t v166 = v250;
      unint64_t v167 = v15;
      if ((void *)v250 != v15)
      {
        do
          uint64_t v166 = sub_166EE50(v166 - 64);
        while ((void *)v166 != v15);
        unint64_t v167 = v249;
      }
      uint64_t v250 = (uint64_t)v15;
      operator delete(v167);
    }
    else
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      unint64_t v248 = v13;
      operator delete(v247);
      double v15 = v249;
      if (v249) {
        goto LABEL_196;
      }
    }
  }
}

void sub_38DA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *__p, uint64_t a7, int a8, __int16 a9, char a10, char a11, uint64_t a12, ...)
{
  va_start(va, a12);
  if (a11 < 0) {
    operator delete(__p);
  }
  sub_323F08(&STACK[0x310]);
  sub_3298C0((uint64_t)va);
  if (SLOBYTE(STACK[0x45F]) < 0) {
    operator delete((void *)STACK[0x448]);
  }
  sub_349E78((uint64_t)&STACK[0x460]);
  sub_35259C((uint64_t)&STACK[0x600]);
  sub_5450C(v13 - 192);
  sub_1A668((void **)(v13 - 144));
  sub_389F18((void **)(v13 - 120));
  sub_323F08(v12);
  _Unwind_Resume(a1);
}

void *sub_38DC5C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8 = sub_DBF62C(a1);
  int v10 = v9;
  char v11 = sub_DBF094(a1);
  char v12 = sub_DBA174(a1);
  sub_DC48FC(a1, (uint64_t)v69);
  sub_DC4720(a1, (uint64_t)v67);
  sub_DC4AD4(a1, (uint64_t)v65);
  if (!v70 && !v68 && !v66)
  {
    memset(v38, 0, sizeof(v38));
    goto LABEL_56;
  }
  sub_391290(*a2, &v53);
  uint64_t v13 = (uint64_t *)nullsub_1(*a2);
  uint64_t v14 = (std::__shared_weak_count *)v13[1];
  uint64_t v51 = *v13;
  uint64_t v52 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v15 = sub_49CB90((uint64_t)v59, (uint64_t)&v51);
  uint64_t v16 = v52;
  if (v52 && !atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *, double))v16->__on_zero_shared)(v16, v15);
    std::__shared_weak_count::__release_weak(v16);
    if (v70) {
      goto LABEL_9;
    }
  }
  else if (v70)
  {
LABEL_9:
    uint64_t v17 = (uint64_t *)nullsub_1(*a2);
    sub_36446C(v17, (uint64_t)v69, (uint64_t *)&v49);
    unint64_t v18 = v49;
    goto LABEL_13;
  }
  unint64_t v18 = v53;
  unsigned int v49 = v53;
  uint64_t v50 = v54;
  if (v54) {
    atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_13:
  unsigned long long v47 = v18;
  char v48 = v50;
  if (v50) {
    atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_49CBE8((uint64_t)v59, (uint64_t *)&v47);
  int v19 = v48;
  if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if (v68) {
      goto LABEL_18;
    }
  }
  else if (v68)
  {
LABEL_18:
    nullsub_1(*a2);
    sub_36807C();
    uint64_t v20 = v45;
    goto LABEL_22;
  }
  uint64_t v20 = v55;
  uint64_t v45 = v55;
  uint64_t v46 = v56;
  if (v56) {
    atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_22:
  uint64_t v43 = v20;
  uint64_t v44 = v46;
  if (v46) {
    atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_49D33C((uint64_t)v59, &v43);
  unsigned int v21 = v44;
  if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    if (v66) {
      goto LABEL_27;
    }
  }
  else if (v66)
  {
LABEL_27:
    nullsub_1(*a2);
    sub_36FA38();
    uint64_t v22 = v41;
    goto LABEL_31;
  }
  uint64_t v22 = v57;
  uint64_t v41 = v57;
  uint64_t v42 = v58;
  if (v58) {
    atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_31:
  uint64_t v39 = v22;
  uint64_t v40 = v42;
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_49D658((uint64_t)v59, &v39);
  uint64_t v23 = v40;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  sub_49CF68((uint64_t)v59, v38);
  unsigned int v24 = v42;
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  int v25 = v46;
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  long long v26 = v50;
  if (v50 && !atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  std::mutex::~mutex(&v64);
  std::mutex::~mutex(&v63);
  sub_37D394(v62);
  unsigned int v27 = v61;
  if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    unsigned int v28 = v60;
    if (v60 != v59)
    {
LABEL_48:
      if (v28) {
        (*(void (**)(void *))(*v28 + 40))(v28);
      }
      goto LABEL_52;
    }
  }
  else
  {
    unsigned int v28 = v60;
    if (v60 != v59) {
      goto LABEL_48;
    }
  }
  (*(void (**)(void *))(v59[0] + 32))(v59);
LABEL_52:
  sub_37D394(&v53);
  if (v66) {
    sub_122FE20(v65);
  }
  if (v68) {
    sub_11D7D18(v67);
  }
LABEL_56:
  if (v70) {
    sub_11D7120(v69);
  }
  uint64_t v29 = a2[1];
  uint64_t v36 = *a2;
  unint64_t v37 = (std::__shared_weak_count *)v29;
  if (v29) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v30 = (std::__shared_weak_count *)a3[1];
  uint64_t v34 = *a3;
  uint64_t v35 = v30;
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_3716D8(a4, (uint64_t)&v36, &v34, v8, v10, v11, v12, v38);
  BOOL v31 = v35;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  BOOL v32 = v37;
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  return sub_37D394(v38);
}

void sub_38E2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  sub_14A84((uint64_t)&a26);
  sub_14A84((uint64_t)&a30);
  sub_14A84((uint64_t)&a34);
  sub_38EFDC((uint64_t)&a48);
  sub_37D394(&a38);
  if (LOBYTE(STACK[0x278])) {
    sub_122FE20(&STACK[0x240]);
  }
  if (*(unsigned char *)(v48 - 152)) {
    sub_11D7D18(v48 - 208);
  }
  if (*(unsigned char *)(v48 - 96))
  {
    sub_11D7120(v48 - 144);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_38E3D0()
{
}

void *sub_38E3D8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  char v8 = sub_35E640();
  char v9 = sub_DBCA74(a1);
  sub_DC4970((uint64_t)v67);
  sub_DC4790(v65);
  sub_DC4790(v63);
  if (!v68 && !v66 && !v64)
  {
    memset(v36, 0, sizeof(v36));
    goto LABEL_56;
  }
  sub_391290(*a2, &v51);
  int v10 = (uint64_t *)nullsub_1(*a2);
  char v11 = (std::__shared_weak_count *)v10[1];
  uint64_t v49 = *v10;
  uint64_t v50 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v12 = sub_49CB90((uint64_t)&__t, (uint64_t)&v49);
  uint64_t v13 = v50;
  if (v50 && !atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *, double))v13->__on_zero_shared)(v13, v12);
    std::__shared_weak_count::__release_weak(v13);
    if (v68) {
      goto LABEL_9;
    }
  }
  else if (v68)
  {
LABEL_9:
    uint64_t v14 = (uint64_t *)nullsub_1(*a2);
    sub_36446C(v14, (uint64_t)v67, (uint64_t *)&v47);
    double v15 = v47;
    goto LABEL_13;
  }
  double v15 = v51;
  unsigned long long v47 = v51;
  uint64_t v48 = v52;
  if (v52) {
    atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_13:
  uint64_t v45 = v15;
  uint64_t v46 = v48;
  if (v48) {
    atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_49CBE8((uint64_t)&__t, (uint64_t *)&v45);
  uint64_t v16 = v46;
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (v66) {
      goto LABEL_18;
    }
  }
  else if (v66)
  {
LABEL_18:
    nullsub_1(*a2);
    sub_36807C();
    uint64_t v17 = v43;
    goto LABEL_22;
  }
  uint64_t v17 = v53;
  uint64_t v43 = v53;
  uint64_t v44 = v54;
  if (v54) {
    atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_22:
  uint64_t v41 = v17;
  uint64_t v42 = v44;
  if (v44) {
    atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_49D33C((uint64_t)&__t, &v41);
  unint64_t v18 = v42;
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (v64) {
      goto LABEL_27;
    }
  }
  else if (v64)
  {
LABEL_27:
    nullsub_1(*a2);
    sub_36FA38();
    uint64_t v19 = v39;
    goto LABEL_31;
  }
  uint64_t v19 = v55;
  uint64_t v39 = v55;
  uint64_t v40 = v56;
  if (v56) {
    atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_31:
  uint64_t v37 = v19;
  uint64_t v38 = v40;
  if (v40) {
    atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_49D658((uint64_t)&__t, &v37);
  uint64_t v20 = v38;
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  sub_49CF68((uint64_t)&__t, v36);
  unsigned int v21 = v40;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = v44;
  if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  uint64_t v23 = v48;
  if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  std::mutex::~mutex(&v62);
  std::mutex::~mutex(&v61);
  sub_37D394(v60);
  unsigned int v24 = v59;
  if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    int v25 = v58;
    if (v58 != &__t)
    {
LABEL_48:
      if (v25) {
        (*(void (**)(std::chrono::system_clock::time_point *))(v25->__d_.__rep_ + 40))(v25);
      }
      goto LABEL_52;
    }
  }
  else
  {
    int v25 = v58;
    if (v58 != &__t) {
      goto LABEL_48;
    }
  }
  (*(void (**)(std::chrono::system_clock::time_point *))(__t.__d_.__rep_ + 32))(&__t);
LABEL_52:
  sub_37D394(&v51);
  if (v64) {
    sub_122FE20(v63);
  }
  if (v66) {
    sub_11D7D18(v65);
  }
LABEL_56:
  if (v68) {
    sub_11D7120(v67);
  }
  uint64_t v26 = a2[1];
  uint64_t v34 = *a2;
  uint64_t v35 = (std::__shared_weak_count *)v26;
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v27 = (std::__shared_weak_count *)a3[1];
  uint64_t v32 = *a3;
  BOOL v33 = v27;
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  unsigned int v28 = std::chrono::system_clock::to_time_t(&__t);
  sub_3716D8(a4, (uint64_t)&v34, &v32, v28 | ((unint64_t)v28 << 32), 0, v8, v9, v36);
  uint64_t v29 = v33;
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  uint64_t v30 = v35;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  return sub_37D394(v36);
}

void sub_38EA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  sub_14A84((uint64_t)&a26);
  sub_14A84((uint64_t)&a30);
  sub_14A84((uint64_t)&a34);
  sub_38EFDC((uint64_t)&a48);
  sub_37D394(&a38);
  if (*(unsigned char *)(v48 - 200)) {
    sub_122FE20(v48 - 256);
  }
  if (*(unsigned char *)(v48 - 136)) {
    sub_11D7D18(v48 - 192);
  }
  if (*(unsigned char *)(v48 - 80))
  {
    sub_11D7120(v48 - 128);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_38EB48()
{
}

uint64_t sub_38EB50(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  if (v2) {
    unsigned int v3 = (uint64_t *)(v2 + 8);
  }
  else {
    unsigned int v3 = 0;
  }
  uint64_t v4 = *(int *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (int)result;
    uint64_t v6 = 8 * v4;
    do
    {
      uint64_t v7 = *v3;
      int v8 = *(_DWORD *)(*v3 + 16);
      if ((v8 & 1) == 0)
      {
        *(_DWORD *)(v7 + 16) = v8 | 1;
        uint64_t v9 = *(void *)(v7 + 192);
        if (!v9)
        {
          uint64_t v10 = *(void *)(v7 + 8);
          char v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
          if (v10) {
            char v11 = (void *)*v11;
          }
          uint64_t v9 = sub_169473C((uint64_t)v11);
          *(void *)(v7 + 192) = v9;
        }
        *(_DWORD *)(v9 + 16) |= 1u;
        uint64_t v12 = *(void *)(v9 + 8);
        uint64_t v13 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
        if (v12) {
          uint64_t v13 = (uint64_t *)*v13;
        }
        sub_1881DF4((std::string **)(v9 + 96), &xmmword_2557568, v13);
        *(_DWORD *)(v7 + 16) |= 1u;
        uint64_t result = *(void *)(v7 + 192);
        if (!result)
        {
          uint64_t v14 = *(void *)(v7 + 8);
          double v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
          if (v14) {
            double v15 = (void *)*v15;
          }
          uint64_t result = sub_169473C((uint64_t)v15);
          *(void *)(v7 + 192) = result;
        }
        *(_DWORD *)(result + 16) |= 0x80u;
        *(void *)(result + 152) = v5;
      }
      ++v3;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_38EC58(uint64_t a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (v3 >> 40)
  {
    uint64_t v4 = (void *)std::ostream::operator<<();
    sub_188FC78(v4, (uint64_t)"_TiB", 4);
    return a1;
  }
  else if (v3 >> 30)
  {
    uint64_t v6 = (void *)std::ostream::operator<<();
    sub_188FC78(v6, (uint64_t)"_GiB", 4);
    return a1;
  }
  else if (v3 < 0x100000)
  {
    if (v3 < 0x400)
    {
      uint64_t v9 = (void *)std::ostream::operator<<();
      sub_188FC78(v9, (uint64_t)"_bytes", 6);
    }
    else
    {
      int v8 = (void *)std::ostream::operator<<();
      sub_188FC78(v8, (uint64_t)"_KiB", 4);
    }
    return a1;
  }
  else
  {
    uint64_t v7 = (void *)std::ostream::operator<<();
    sub_188FC78(v7, (uint64_t)"_MiB", 4);
    return a1;
  }
}

uint64_t sub_38ED98(uint64_t a1, const char *a2, uint64_t a3, const char *a4, uint64_t a5, const char *a6, uint64_t a7)
{
  sub_E1B4((uint64_t)v19);
  std::ostream::operator<<();
  size_t v11 = strlen(a2);
  sub_188FC78(v20, (uint64_t)a2, v11);
  std::ostream::operator<<();
  size_t v12 = strlen(a4);
  sub_188FC78(v20, (uint64_t)a4, v12);
  std::ostream::operator<<();
  size_t v13 = strlen(a6);
  sub_188FC78(v20, (uint64_t)a6, v13);
  int v14 = *(char *)(a7 + 23);
  if (v14 >= 0) {
    uint64_t v15 = a7;
  }
  else {
    uint64_t v15 = *(void *)a7;
  }
  if (v14 >= 0) {
    uint64_t v16 = *(unsigned __int8 *)(a7 + 23);
  }
  else {
    uint64_t v16 = *(void *)(a7 + 8);
  }
  sub_188FC78(v20, v15, v16);
  std::stringbuf::str();
  *(void *)((char *)v19
  v20[0] = v17;
  if (v21 < 0) {
    operator delete((void *)v20[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_38EFB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_38EFC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_38EFDC(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 200));
  std::mutex::~mutex((std::mutex *)(a1 + 136));
  sub_37D394((void *)(a1 + 56));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(void *)(a1 + 24);
    if (v3 != a1) {
      goto LABEL_4;
    }
LABEL_8:
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    return a1;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3 == a1) {
    goto LABEL_8;
  }
LABEL_4:
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  return a1;
}

double sub_38F0D8()
{
  unk_255754F = 16641;
  word_2557538 = 65;
  byte_2557567 = 1;
  byte_2557551 = 0;
  byte_255757F = 16;
  strcpy((char *)&xmmword_2557568, "request_snapshot");
  qword_2557580 = (uint64_t)operator new(0x30uLL);
  xmmword_2557588 = xmmword_20B9380;
  strcpy((char *)qword_2557580, "RoutingDataContextFactory.TrafficDownload.Error");
  qword_2557598 = (uint64_t)operator new(0x30uLL);
  unk_25575A0 = xmmword_20B93D0;
  strcpy((char *)qword_2557598, "RoutingDataContextFactory.TrafficAttached");
  return *(double *)".TrafficAttached";
}

void sub_38F19C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 160) = 850045863;
  *(_DWORD *)(a1 + 128) = 1065353216;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(void *)(a1 + 248) = 850045863;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 336) = 850045863;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 424) = 850045863;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 850045863;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(void *)(a1 + 560) = 2048;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 584) = 0;
  sub_394510((unint64_t *)(a1 + 552), 0x800uLL, 0, 0x800uLL, 0);
  *(_OWORD *)(a1 + 592) = xmmword_20E2870;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 616) = 0;
  sub_37E97C((unint64_t *)(a1 + 592), 0x800uLL, 0, 0x800uLL, 0);
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 640) = 2048;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 664) = 0;
  *(void *)(a1 + 656) = 0;
  sub_3949E0((unint64_t *)(a1 + 632), 0x800uLL, 0, 0x800uLL, 0);
  *(_OWORD *)(a1 + 672) = xmmword_20E2870;
  *(void *)(a1 + 688) = 0;
  *(void *)(a1 + 704) = 0;
  *(void *)(a1 + 696) = 0;
  sub_37FE5C((unint64_t *)(a1 + 672), 0x800uLL, 0, 0x800uLL, 0);
  *(void *)(a1 + 712) = 0;
  *(void *)(a1 + 720) = 2048;
  *(void *)(a1 + 728) = 0;
  *(void *)(a1 + 744) = 0;
  *(void *)(a1 + 736) = 0;
  sub_37FE5C((unint64_t *)(a1 + 712), 0x800uLL, 0, 0x800uLL, 0);
  *(_OWORD *)(a1 + 752) = xmmword_20E2870;
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 784) = 0;
  *(void *)(a1 + 776) = 0;
  sub_37FE5C((unint64_t *)(a1 + 752), 0x800uLL, 0, 0x800uLL, 0);
  *(void *)(a1 + 792) = 0;
  *(void *)(a1 + 800) = 2048;
  *(void *)(a1 + 808) = 0;
  *(void *)(a1 + 824) = 0;
  *(void *)(a1 + 816) = 0;
  sub_394EB0((unint64_t *)(a1 + 792), 0x800uLL, 0, 0x800uLL, 0);
  sub_3990D4(a1 + 832);
  *(void *)(a1 + 992) = off_2438DF8;
  operator new();
}

void sub_38F728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t *a18, uint64_t a19, uint64_t a20,uint64_t a21,_Unwind_Exception *exception_object,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  sub_14A84(v44);
  sub_3962F0(v39 + 1376);
  sub_395FB0(v42);
  std::mutex::~mutex((std::mutex *)(v39 + 1304));
  sub_3904E0((uint64_t **)(v39 + 1296));
  sub_36094((void **)(v39 + 1272));
  sub_36094((void **)(v39 + 1248));
  sub_14A84(v39 + 1232);
  std::mutex::~mutex(v41);
  sub_37D394((void *)(v39 + 1088));
  sub_14A84(v39 + 1072);
  sub_396388(v40);
  sub_3964C8(v45);
  a26 = a11;
  sub_3968A0((void ***)&a26);
  a26 = a23;
  sub_381044((void ***)&a26);
  a26 = a12;
  sub_381044((void ***)&a26);
  a26 = a13;
  sub_381044((void ***)&a26);
  a26 = a14;
  sub_397088((void ***)&a26);
  a26 = a15;
  sub_37FCF4((void ***)&a26);
  a26 = a16;
  sub_397854((void ***)&a26);
  std::mutex::~mutex((std::mutex *)(v43 + 240));
  std::mutex::~mutex((std::mutex *)(v43 + 176));
  sub_39052C(v43 + 88);
  sub_39052C(v43);
  sub_39052C(a17);
  sub_39056C((uint64_t *)(v39 + 152));
  sub_3905B4((uint64_t *)(v39 + 144));
  sub_3905FC(a18);
  sub_5450C(a19);
  sub_5450C(a20);
  sub_5450C(a21);
  sub_14A84(v39);
  _Unwind_Resume(a1);
}

uint64_t *sub_38F9A8(void *a1, uint64_t a2, int a3)
{
  uint64_t v6 = a1[154];
  *(void *)&v66[0] = operator new(0x28uLL);
  *(_OWORD *)((char *)v66 + 8) = xmmword_20B9390;
  strcpy(*(char **)&v66[0], "routing/RoutingDataProvider.json");
  __p[0] = 0;
  __p[1] = 0;
  v59[0] = 0;
  uint64_t v7 = sub_81C38(v6, (uint64_t)v66, (uint64_t *)__p);
  HIBYTE(v71) = 6;
  strcpy((char *)&v70, "caches");
  int v8 = (void *)sub_560F4(v7, (uint64_t)&v70);
  sub_393AB0(a1, v8);
  if (SHIBYTE(v71) < 0) {
    operator delete(v70);
  }
  uint64_t v9 = (void **)__p[0];
  if (__p[0])
  {
    uint64_t v10 = (void **)__p[1];
    size_t v11 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      size_t v11 = __p[0];
    }
    __p[1] = v9;
    operator delete(v11);
  }
  if (SBYTE7(v66[1]) < 0) {
    operator delete(*(void **)&v66[0]);
  }
  uint64_t v12 = sub_6912C(a1[154]);
  size_t v13 = operator new(0xB8uLL);
  v13[1] = 0;
  void v13[2] = 0;
  *size_t v13 = off_2438E78;
  a1[134] = sub_688938(v13 + 3, v12, a2);
  int v14 = (std::__shared_weak_count *)a1[135];
  a1[135] = v13;
  if (!v14 || atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!a2) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (a2)
  {
LABEL_16:
    sub_656AC();
    sub_65800();
    sub_65954();
  }
LABEL_17:
  uint64_t result = (uint64_t *)a1[177];
  if (!result) {
    goto LABEL_105;
  }
  sub_3943F0(result, (uint64_t)v69);
  *(void *)&v66[0] = operator new(0x20uLL);
  *(_OWORD *)((char *)v66 + 8) = xmmword_20B8890;
  strcpy(*(char **)&v66[0], "routing/TimeZoneGeometry.json");
  __p[0] = 0;
  __p[1] = 0;
  v59[0] = 0;
  uint64_t v16 = sub_81C38(a1[154], (uint64_t)v66, (uint64_t *)__p);
  uint64_t v17 = (void **)__p[0];
  if (__p[0])
  {
    unint64_t v18 = (void **)__p[1];
    uint64_t v19 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v18 - 1) < 0) {
          operator delete(*(v18 - 3));
        }
        v18 -= 3;
      }
      while (v18 != v17);
      uint64_t v19 = __p[0];
    }
    __p[1] = v17;
    operator delete(v19);
  }
  if (SBYTE7(v66[1]) < 0) {
    operator delete(*(void **)&v66[0]);
  }
  BYTE7(v66[1]) = 12;
  strcpy((char *)v66, "data_preload");
  uint64_t v20 = (void *)sub_560F4(v16, (uint64_t)v66);
  if (SBYTE7(v66[1]) < 0) {
    operator delete(*(void **)&v66[0]);
  }
  sub_26CC0(v69, v66);
  char v21 = sub_58070(v20, (uint64_t)v66);
  uint64_t v22 = v21;
  if (SBYTE7(v66[1]) < 0)
  {
    operator delete(*(void **)&v66[0]);
    if (v22) {
      goto LABEL_32;
    }
  }
  else if (v21)
  {
LABEL_32:
    sub_26CC0(v69, __p);
    uint64_t v23 = (uint64_t *)sub_561B0(v20, (uint64_t)__p);
    sub_4B484(v23, v66);
    unsigned int v24 = (void **)(a1 + 159);
    uint64_t v25 = a1[159];
    if (v25)
    {
      uint64_t v26 = a1[160];
      unsigned int v27 = (void *)a1[159];
      if (v26 != v25)
      {
        uint64_t v28 = a1[160];
        do
        {
          uint64_t v30 = *(void **)(v28 - 24);
          v28 -= 24;
          uint64_t v29 = v30;
          if (v30)
          {
            *(void *)(v26 - 16) = v29;
            operator delete(v29);
          }
          uint64_t v26 = v28;
        }
        while (v28 != v25);
        unsigned int v27 = *v24;
      }
      a1[160] = v25;
      operator delete(v27);
      *unsigned int v24 = 0;
      a1[160] = 0;
      a1[161] = 0;
    }
    *(_OWORD *)unsigned int v24 = v66[0];
    a1[161] = *(void *)&v66[1];
    memset(v66, 0, 24);
    if ((SHIBYTE(v59[0]) & 0x80000000) == 0) {
      goto LABEL_88;
    }
    uint64_t v38 = __p[0];
LABEL_87:
    operator delete(v38);
    goto LABEL_88;
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v66);
    BOOL v31 = sub_188FC78(v66, (uint64_t)"No time zone geometry found for time zone ", 42);
    sub_26CC0(v69, __p);
    if (SHIBYTE(v59[0]) >= 0) {
      uint64_t v32 = __p;
    }
    else {
      uint64_t v32 = (void **)__p[0];
    }
    if (SHIBYTE(v59[0]) >= 0) {
      uint64_t v33 = HIBYTE(v59[0]);
    }
    else {
      uint64_t v33 = (uint64_t)__p[1];
    }
    uint64_t v34 = sub_188FC78(v31, (uint64_t)v32, v33);
    sub_188FC78(v34, (uint64_t)".", 1);
    if (SHIBYTE(v59[0]) < 0) {
      operator delete(__p[0]);
    }
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
    if (SHIBYTE(v59[0]) < 0) {
      operator delete(__p[0]);
    }
    if (v68 < 0) {
      operator delete(v67);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  char v70 = operator new(0x20uLL);
  long long v71 = xmmword_20B91A0;
  strcpy((char *)v70, "DataPreload.MissingTimeZone");
  std::mutex v63 = 0;
  char v64 = 0;
  uint64_t v65 = 0;
  uint64_t v62 = 0;
  long long v60 = 0u;
  *(_OWORD *)std::mutex v61 = 0u;
  *(_OWORD *)long long __p = 0u;
  *(_OWORD *)unint64_t v59 = 0u;
  char v57 = 0;
  LOBYTE(v56) = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  sub_29DC44((uint64_t)v66, (long long **)&v63, (long long *)__p, &v56, &v54, 0, (uint64_t)&v52, 1);
  nullsub_1(1);
  sub_29E11C((uint64_t)v66);
  uint64_t v35 = v53;
  if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  uint64_t v36 = v55;
  if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  if (v57 < 0)
  {
    operator delete((void *)v56);
    if ((SHIBYTE(v62) & 0x80000000) == 0)
    {
LABEL_63:
      if ((SHIBYTE(v60) & 0x80000000) == 0) {
        goto LABEL_64;
      }
      goto LABEL_74;
    }
  }
  else if ((SHIBYTE(v62) & 0x80000000) == 0)
  {
    goto LABEL_63;
  }
  operator delete(v61[0]);
  if ((SHIBYTE(v60) & 0x80000000) == 0)
  {
LABEL_64:
    if ((SHIBYTE(v59[0]) & 0x80000000) == 0) {
      goto LABEL_65;
    }
LABEL_75:
    operator delete(__p[0]);
    uint64_t v37 = (void **)v63;
    if (!v63)
    {
LABEL_66:
      if ((SHIBYTE(v71) & 0x80000000) == 0) {
        goto LABEL_88;
      }
LABEL_86:
      uint64_t v38 = v70;
      goto LABEL_87;
    }
    goto LABEL_76;
  }
LABEL_74:
  operator delete(v59[1]);
  if (SHIBYTE(v59[0]) < 0) {
    goto LABEL_75;
  }
LABEL_65:
  uint64_t v37 = (void **)v63;
  if (!v63) {
    goto LABEL_66;
  }
LABEL_76:
  uint64_t v39 = v64;
  if (v64 == v37)
  {
    char v64 = v37;
    operator delete(v37);
    if ((SHIBYTE(v71) & 0x80000000) == 0) {
      goto LABEL_88;
    }
    goto LABEL_86;
  }
  do
  {
    if (*((char *)v39 - 1) < 0)
    {
      operator delete(*(v39 - 3));
      if ((*((char *)v39 - 25) & 0x80000000) == 0) {
        goto LABEL_79;
      }
    }
    else if ((*((char *)v39 - 25) & 0x80000000) == 0)
    {
      goto LABEL_79;
    }
    operator delete(*(v39 - 6));
LABEL_79:
    v39 -= 6;
  }
  while (v39 != v37);
  char v64 = v37;
  operator delete(v63);
  if (SHIBYTE(v71) < 0) {
    goto LABEL_86;
  }
LABEL_88:
  BYTE7(v66[1]) = 18;
  strcpy((char *)v66, "traffic_ab_regions");
  uint64_t v40 = (void *)sub_560F4(v16, (uint64_t)v66);
  if (SBYTE7(v66[1]) < 0) {
    operator delete(*(void **)&v66[0]);
  }
  sub_26CC0(v69, v66);
  uint64_t v41 = sub_58070(v40, (uint64_t)v66);
  uint64_t v42 = v41;
  if (SBYTE7(v66[1]) < 0)
  {
    operator delete(*(void **)&v66[0]);
    if (!v42) {
      goto LABEL_104;
    }
  }
  else if (!v41)
  {
    goto LABEL_104;
  }
  sub_26CC0(v69, __p);
  uint64_t v43 = (uint64_t *)sub_561B0(v40, (uint64_t)__p);
  sub_4B484(v43, v66);
  uint64_t v44 = a1[156];
  if (v44)
  {
    uint64_t v45 = (void **)(a1 + 156);
    uint64_t v46 = a1[157];
    unsigned long long v47 = (void *)a1[156];
    if (v46 != v44)
    {
      uint64_t v48 = a1[157];
      do
      {
        uint64_t v50 = *(void **)(v48 - 24);
        v48 -= 24;
        uint64_t v49 = v50;
        if (v50)
        {
          *(void *)(v46 - 16) = v49;
          operator delete(v49);
        }
        uint64_t v46 = v48;
      }
      while (v48 != v44);
      unsigned long long v47 = *v45;
    }
    a1[157] = v44;
    operator delete(v47);
    *uint64_t v45 = 0;
    a1[157] = 0;
    a1[158] = 0;
  }
  *((_OWORD *)a1 + 78) = v66[0];
  a1[158] = *(void *)&v66[1];
  memset(v66, 0, 24);
  if (SHIBYTE(v59[0]) < 0) {
    operator delete(__p[0]);
  }
LABEL_104:
  uint64_t result = (uint64_t *)sub_26C4C((const void **)v69);
LABEL_105:
  if (a3)
  {
    uint64_t v51 = a1[154];
    *(void *)&v66[0] = operator new(0x28uLL);
    *(_OWORD *)((char *)v66 + 8) = xmmword_20B8FD0;
    strcpy(*(char **)&v66[0], "common/geometry/FeaturePolygons.json");
    __p[0] = 0;
    __p[1] = 0;
    v59[0] = 0;
    sub_81C38(v51, (uint64_t)v66, (uint64_t *)__p);
    sub_3985BC();
  }
  return result;
}

void sub_3902FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char a35)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a35);
  sub_26C4C((const void **)(v35 - 104));
  _Unwind_Resume(a1);
}

void sub_3903BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
  {
    operator delete(__p);
    sub_26C4C((const void **)(v34 - 104));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x390414);
}

void sub_390410(_Unwind_Exception *a1)
{
  sub_26C4C((const void **)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_390424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_26C4C((const void **)(v22 - 104));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x390414);
}

void sub_39044C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if ((a34 & 0x80000000) == 0) {
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t **sub_3904E0(uint64_t **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_395FB0(v2);
    operator delete();
  }
  return a1;
}

void sub_39052C(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 64);
  sub_84854(&v2);
  std::mutex::~mutex((std::mutex *)a1);
}

uint64_t *sub_39056C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_38195C(v2);
    operator delete();
  }
  return a1;
}

uint64_t *sub_3905B4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_381668(v2);
    operator delete();
  }
  return a1;
}

uint64_t *sub_3905FC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_381338(v2);
    operator delete();
  }
  return a1;
}

void sub_390648(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 160) = 850045863;
  *(_DWORD *)(a1 + 128) = 1065353216;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(void *)(a1 + 248) = 850045863;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 336) = 850045863;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 424) = 850045863;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 850045863;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(void *)(a1 + 560) = 2048;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 584) = 0;
  sub_394510((unint64_t *)(a1 + 552), 0x800uLL, 0, 0x800uLL, 0);
  *(_OWORD *)(a1 + 592) = xmmword_20E2870;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 616) = 0;
  sub_37E97C((unint64_t *)(a1 + 592), 0x800uLL, 0, 0x800uLL, 0);
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 640) = 2048;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 664) = 0;
  *(void *)(a1 + 656) = 0;
  sub_3949E0((unint64_t *)(a1 + 632), 0x800uLL, 0, 0x800uLL, 0);
  *(_OWORD *)(a1 + 672) = xmmword_20E2870;
  *(void *)(a1 + 688) = 0;
  *(void *)(a1 + 704) = 0;
  *(void *)(a1 + 696) = 0;
  sub_37FE5C((unint64_t *)(a1 + 672), 0x800uLL, 0, 0x800uLL, 0);
  *(void *)(a1 + 712) = 0;
  *(void *)(a1 + 720) = 2048;
  *(void *)(a1 + 728) = 0;
  *(void *)(a1 + 744) = 0;
  *(void *)(a1 + 736) = 0;
  sub_37FE5C((unint64_t *)(a1 + 712), 0x800uLL, 0, 0x800uLL, 0);
  *(_OWORD *)(a1 + 752) = xmmword_20E2870;
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 784) = 0;
  *(void *)(a1 + 776) = 0;
  sub_37FE5C((unint64_t *)(a1 + 752), 0x800uLL, 0, 0x800uLL, 0);
  *(void *)(a1 + 792) = 0;
  *(void *)(a1 + 800) = 2048;
  *(void *)(a1 + 808) = 0;
  *(void *)(a1 + 824) = 0;
  *(void *)(a1 + 816) = 0;
  sub_394EB0((unint64_t *)(a1 + 792), 0x800uLL, 0, 0x800uLL, 0);
  sub_3990D4(a1 + 832);
  *(void *)(a1 + 992) = off_2438DF8;
  operator new();
}

void sub_390BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_Unwind_Exception *exception_object,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29)
{
  sub_14A84(v36);
  sub_3962F0(v34);
  sub_395FB0(v33);
  std::mutex::~mutex((std::mutex *)(v29 + 1304));
  sub_3904E0((uint64_t **)(v29 + 1296));
  sub_36094((void **)(v29 + 1272));
  sub_36094((void **)(v29 + 1248));
  sub_14A84(v29 + 1232);
  std::mutex::~mutex(v32);
  sub_37D394((void *)(v29 + 1088));
  sub_14A84(v29 + 1072);
  sub_396388(v31);
  sub_3964C8(v30);
  a29 = a10;
  sub_3968A0((void ***)&a29);
  a29 = a23;
  sub_381044((void ***)&a29);
  a29 = a11;
  sub_381044((void ***)&a29);
  a29 = a12;
  sub_381044((void ***)&a29);
  a29 = a13;
  sub_397088((void ***)&a29);
  a29 = a14;
  sub_37FCF4((void ***)&a29);
  a29 = a15;
  sub_397854((void ***)&a29);
  std::mutex::~mutex((std::mutex *)(v35 + 240));
  std::mutex::~mutex((std::mutex *)(v35 + 176));
  sub_39052C(v35 + 88);
  sub_39052C(v35);
  sub_39052C(a16);
  sub_39056C((uint64_t *)(v29 + 152));
  sub_3905B4((uint64_t *)(v29 + 144));
  sub_3905FC(a17);
  sub_5450C(a18);
  sub_5450C(a19);
  sub_5450C(a20);
  sub_14A84(v29);
  _Unwind_Resume(a1);
}

void sub_390D70()
{
}

void sub_390D78()
{
}

void sub_390D80()
{
}

void sub_390D88()
{
}

void sub_390D90()
{
}

void sub_390D98()
{
}

void sub_390DA0()
{
}

void sub_390DAC()
{
}

void sub_390DB8()
{
}

uint64_t sub_390DC8(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 1424);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  sub_3962F0(a1 + 1376);
  sub_395FB0((uint64_t *)(a1 + 1368));
  std::mutex::~mutex((std::mutex *)(a1 + 1304));
  uint64_t v3 = *(uint64_t **)(a1 + 1296);
  *(void *)(a1 + 1296) = 0;
  if (v3)
  {
    sub_395FB0(v3);
    operator delete();
  }
  uint64_t v4 = *(void *)(a1 + 1272);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 1280);
    uint64_t v6 = *(void **)(a1 + 1272);
    if (v5 != v4)
    {
      uint64_t v7 = *(void *)(a1 + 1280);
      do
      {
        uint64_t v9 = *(void **)(v7 - 24);
        v7 -= 24;
        int v8 = v9;
        if (v9)
        {
          *(void *)(v5 - 16) = v8;
          operator delete(v8);
        }
        uint64_t v5 = v7;
      }
      while (v7 != v4);
      uint64_t v6 = *(void **)(a1 + 1272);
    }
    *(void *)(a1 + 1280) = v4;
    operator delete(v6);
  }
  uint64_t v10 = *(void *)(a1 + 1248);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 1256);
    uint64_t v12 = *(void **)(a1 + 1248);
    if (v11 != v10)
    {
      uint64_t v13 = *(void *)(a1 + 1256);
      do
      {
        uint64_t v15 = *(void **)(v13 - 24);
        v13 -= 24;
        int v14 = v15;
        if (v15)
        {
          *(void *)(v11 - 16) = v14;
          operator delete(v14);
        }
        uint64_t v11 = v13;
      }
      while (v13 != v10);
      uint64_t v12 = *(void **)(a1 + 1248);
    }
    *(void *)(a1 + 1256) = v10;
    operator delete(v12);
  }
  uint64_t v16 = *(std::__shared_weak_count **)(a1 + 1240);
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    std::mutex::~mutex((std::mutex *)(a1 + 1168));
    sub_37D394((void *)(a1 + 1088));
    uint64_t v17 = *(std::__shared_weak_count **)(a1 + 1080);
    if (!v17) {
      goto LABEL_28;
    }
  }
  else
  {
    std::mutex::~mutex((std::mutex *)(a1 + 1168));
    sub_37D394((void *)(a1 + 1088));
    uint64_t v17 = *(std::__shared_weak_count **)(a1 + 1080);
    if (!v17) {
      goto LABEL_28;
    }
  }
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_28:
  sub_396388((void *)(a1 + 992));
  sub_3964C8(a1 + 832);
  uint64_t v32 = (void **)(a1 + 808);
  sub_3968A0(&v32);
  uint64_t v32 = (void **)(a1 + 768);
  sub_381044(&v32);
  uint64_t v32 = (void **)(a1 + 728);
  sub_381044(&v32);
  uint64_t v32 = (void **)(a1 + 688);
  sub_381044(&v32);
  uint64_t v32 = (void **)(a1 + 648);
  sub_397088(&v32);
  uint64_t v32 = (void **)(a1 + 608);
  sub_37FCF4(&v32);
  uint64_t v32 = (void **)(a1 + 568);
  sub_397854(&v32);
  std::mutex::~mutex((std::mutex *)(a1 + 488));
  std::mutex::~mutex((std::mutex *)(a1 + 424));
  uint64_t v32 = (void **)(a1 + 400);
  sub_84854(&v32);
  std::mutex::~mutex((std::mutex *)(a1 + 336));
  uint64_t v32 = (void **)(a1 + 312);
  sub_84854(&v32);
  std::mutex::~mutex((std::mutex *)(a1 + 248));
  uint64_t v32 = (void **)(a1 + 224);
  sub_84854(&v32);
  std::mutex::~mutex((std::mutex *)(a1 + 160));
  uint64_t v18 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = 0;
  if (v18)
  {
    sub_38195C(v18);
    operator delete();
  }
  uint64_t v19 = *(void *)(a1 + 144);
  *(void *)(a1 + 144) = 0;
  if (v19)
  {
    sub_381668(v19);
    operator delete();
  }
  uint64_t v20 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v20)
  {
    sub_381338(v20);
    operator delete();
  }
  char v21 = *(char **)(a1 + 112);
  if (v21)
  {
    do
    {
      uint64_t v29 = *(char **)v21;
      sub_57AC8((uint64_t *)v21 + 5);
      if (v21[39] < 0) {
        operator delete(*((void **)v21 + 2));
      }
      operator delete(v21);
      char v21 = v29;
    }
    while (v29);
  }
  uint64_t v22 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  if (v22) {
    operator delete(v22);
  }
  uint64_t v23 = *(char **)(a1 + 72);
  if (v23)
  {
    do
    {
      uint64_t v30 = *(char **)v23;
      sub_57AC8((uint64_t *)v23 + 5);
      if (v23[39] < 0) {
        operator delete(*((void **)v23 + 2));
      }
      operator delete(v23);
      uint64_t v23 = v30;
    }
    while (v30);
  }
  unsigned int v24 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v24) {
    operator delete(v24);
  }
  uint64_t v25 = *(char **)(a1 + 32);
  if (v25)
  {
    do
    {
      BOOL v31 = *(char **)v25;
      sub_57AC8((uint64_t *)v25 + 5);
      if (v25[39] < 0) {
        operator delete(*((void **)v25 + 2));
      }
      operator delete(v25);
      uint64_t v25 = v31;
    }
    while (v31);
  }
  uint64_t v26 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v26) {
    operator delete(v26);
  }
  unsigned int v27 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v27 || atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  return a1;
}

void *sub_391260@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (result[129])
  {
    uint64_t v2 = result[132];
    *a2 = result[131];
    a2[1] = v2;
    if (v2) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void sub_391290(uint64_t a1@<X0>, _DWORD **a2@<X8>)
{
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  *((_OWORD *)a2 + 2) = 0u;
  *(_OWORD *)a2 = 0u;
  uint64_t v4 = (std::mutex *)(a1 + 1168);
  std::mutex::lock((std::mutex *)(a1 + 1168));
  sub_393034(a2, (uint64_t *)(a1 + 1088));
  std::mutex::unlock(v4);
  if (!*a2) {
    goto LABEL_36;
  }
  sub_3617FC(*a2);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&__t);
    sub_188FC78(&__t, (uint64_t)"Provided transit incident snapshot with ", 40);
    uint64_t v5 = (void *)std::ostream::operator<<();
    sub_188FC78(v5, (uint64_t)" non-blocking and ", 18);
    uint64_t v6 = (void *)std::ostream::operator<<();
    uint64_t v7 = sub_188FC78(v6, (uint64_t)" blocking incidents (blocking version: ", 39);
    std::ostream::operator<<();
    int v8 = sub_188FC78(v7, (uint64_t)"; snapshot age: ", 16);
    std::ostream::operator<<();
    sub_188FC78(v8, (uint64_t)" sec)", 5);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (SBYTE7(v86) < 0) {
      operator delete((void *)__p);
    }
    if (v97 < 0) {
      operator delete(v96);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  HIBYTE(v93[2]) = 11;
  uint64_t v92 = 0;
  strcpy((char *)v93, "SnapshotAge");
  uint64_t v90 = 0;
  unint64_t v91 = 0;
  uint64_t v89 = 0;
  long long v87 = 0u;
  long long v88 = 0u;
  long long __p = 0u;
  long long v86 = 0u;
  char v84 = 0;
  LOBYTE(v83[0]) = 0;
  uint64_t v81 = 0;
  long long v82 = 0;
  uint64_t v79 = 0;
  uint64_t v80 = 0;
  sub_29DC44((uint64_t)&__t, (long long **)&v90, &__p, (long long *)v83, &v81, 0, (uint64_t)&v79, 1);
  nullsub_1(15);
  sub_29E11C((uint64_t)&__t);
  uint64_t v9 = v80;
  if (v80 && !atomic_fetch_add(&v80->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    uint64_t v10 = v82;
    if (!v82)
    {
LABEL_12:
      if ((v84 & 0x80000000) == 0) {
        goto LABEL_13;
      }
      goto LABEL_31;
    }
  }
  else
  {
    uint64_t v10 = v82;
    if (!v82) {
      goto LABEL_12;
    }
  }
  if (atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_12;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if ((v84 & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v89) & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }
LABEL_31:
  operator delete(v83[0]);
  if ((SHIBYTE(v89) & 0x80000000) == 0)
  {
LABEL_14:
    if ((SHIBYTE(v87) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }
LABEL_32:
  operator delete((void *)v88);
  if ((SHIBYTE(v87) & 0x80000000) == 0)
  {
LABEL_15:
    if ((SBYTE7(v86) & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }
LABEL_33:
  operator delete(*((void **)&v86 + 1));
  if ((SBYTE7(v86) & 0x80000000) == 0)
  {
LABEL_16:
    uint64_t v11 = (void **)v90;
    if (v90) {
      goto LABEL_17;
    }
LABEL_35:
    if ((SHIBYTE(v93[2]) & 0x80000000) == 0) {
      goto LABEL_36;
    }
LABEL_19:
    operator delete(v93[0]);
    uint64_t v13 = a2[4];
    if (!v13) {
      goto LABEL_135;
    }
    goto LABEL_37;
  }
LABEL_34:
  operator delete((void *)__p);
  uint64_t v11 = (void **)v90;
  if (!v90) {
    goto LABEL_35;
  }
LABEL_17:
  uint64_t v12 = v91;
  if (v91 == v11)
  {
    unint64_t v91 = v11;
    operator delete(v11);
    if ((SHIBYTE(v93[2]) & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_19;
  }
  do
  {
    while (*((char *)v12 - 1) < 0)
    {
      operator delete(*(v12 - 3));
      if (*((char *)v12 - 25) < 0) {
        goto LABEL_25;
      }
LABEL_22:
      v12 -= 6;
      if (v12 == v11) {
        goto LABEL_26;
      }
    }
    if ((*((char *)v12 - 25) & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_25:
    operator delete(*(v12 - 6));
    v12 -= 6;
  }
  while (v12 != v11);
LABEL_26:
  unint64_t v91 = v11;
  operator delete(v90);
  if (SHIBYTE(v93[2]) < 0) {
    goto LABEL_19;
  }
LABEL_36:
  uint64_t v13 = a2[4];
  if (!v13) {
    goto LABEL_135;
  }
LABEL_37:
  sub_3617FC(v13);
  int v14 = sub_366EF4((uint64_t)a2[4]);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&__t);
    sub_188FC78(&__t, (uint64_t)"Provided transit realtime snapshot with ", 40);
    uint64_t v15 = (void *)std::ostream::operator<<();
    sub_188FC78(v15, (uint64_t)" trip updates (snapshot age: ", 29);
    uint64_t v16 = (void *)std::ostream::operator<<();
    sub_188FC78(v16, (uint64_t)" sec; trip updates age: ", 24);
    uint64_t v17 = (void *)std::ostream::operator<<();
    sub_188FC78(v17, (uint64_t)" sec)", 5);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (SBYTE7(v86) < 0) {
      operator delete((void *)__p);
    }
    if (v97 < 0) {
      operator delete(v96);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  HIBYTE(v93[2]) = 11;
  uint64_t v92 = 0;
  strcpy((char *)v93, "SnapshotAge");
  uint64_t v90 = 0;
  unint64_t v91 = 0;
  uint64_t v89 = 0;
  long long v87 = 0u;
  long long v88 = 0u;
  long long __p = 0u;
  long long v86 = 0u;
  char v84 = 0;
  LOBYTE(v83[0]) = 0;
  uint64_t v77 = 0;
  unint64_t v78 = 0;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  sub_29DC44((uint64_t)&__t, (long long **)&v90, &__p, (long long *)v83, &v77, 0, (uint64_t)&v75, 1);
  nullsub_1(11);
  sub_29E11C((uint64_t)&__t);
  uint64_t v18 = v76;
  if (!v76 || atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v19 = v78;
    if (v78) {
      goto LABEL_46;
    }
LABEL_47:
    if ((v84 & 0x80000000) == 0) {
      goto LABEL_48;
    }
LABEL_66:
    operator delete(v83[0]);
    if (SHIBYTE(v89) < 0) {
      goto LABEL_67;
    }
LABEL_49:
    if ((SHIBYTE(v87) & 0x80000000) == 0) {
      goto LABEL_50;
    }
LABEL_68:
    operator delete(*((void **)&v86 + 1));
    if (SBYTE7(v86) < 0) {
      goto LABEL_69;
    }
LABEL_51:
    uint64_t v20 = (void **)v90;
    if (v90) {
      goto LABEL_52;
    }
LABEL_70:
    if ((SHIBYTE(v93[2]) & 0x80000000) == 0) {
      goto LABEL_71;
    }
LABEL_54:
    operator delete(v93[0]);
    if (v14 == 0x7FFFFFFF) {
      goto LABEL_100;
    }
    goto LABEL_72;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  uint64_t v19 = v78;
  if (!v78) {
    goto LABEL_47;
  }
LABEL_46:
  if (atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_47;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  if (v84 < 0) {
    goto LABEL_66;
  }
LABEL_48:
  if ((SHIBYTE(v89) & 0x80000000) == 0) {
    goto LABEL_49;
  }
LABEL_67:
  operator delete((void *)v88);
  if (SHIBYTE(v87) < 0) {
    goto LABEL_68;
  }
LABEL_50:
  if ((SBYTE7(v86) & 0x80000000) == 0) {
    goto LABEL_51;
  }
LABEL_69:
  operator delete((void *)__p);
  uint64_t v20 = (void **)v90;
  if (!v90) {
    goto LABEL_70;
  }
LABEL_52:
  char v21 = v91;
  if (v91 == v20)
  {
    unint64_t v91 = v20;
    operator delete(v20);
    if ((SHIBYTE(v93[2]) & 0x80000000) == 0) {
      goto LABEL_71;
    }
    goto LABEL_54;
  }
  while (2)
  {
    while (2)
    {
      if (*((char *)v21 - 1) < 0)
      {
        operator delete(*(v21 - 3));
        if (*((char *)v21 - 25) < 0) {
          break;
        }
        goto LABEL_57;
      }
      if ((*((char *)v21 - 25) & 0x80000000) == 0)
      {
LABEL_57:
        v21 -= 6;
        if (v21 == v20) {
          goto LABEL_61;
        }
        continue;
      }
      break;
    }
    operator delete(*(v21 - 6));
    v21 -= 6;
    if (v21 != v20) {
      continue;
    }
    break;
  }
LABEL_61:
  unint64_t v91 = v20;
  operator delete(v90);
  if (SHIBYTE(v93[2]) < 0) {
    goto LABEL_54;
  }
LABEL_71:
  if (v14 == 0x7FFFFFFF) {
    goto LABEL_100;
  }
LABEL_72:
  HIBYTE(v93[2]) = 14;
  uint64_t v92 = 0;
  strcpy((char *)v93, "TripUpdatesAge");
  uint64_t v90 = 0;
  unint64_t v91 = 0;
  uint64_t v89 = 0;
  long long v87 = 0u;
  long long v88 = 0u;
  long long __p = 0u;
  long long v86 = 0u;
  char v84 = 0;
  LOBYTE(v83[0]) = 0;
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  uint64_t v71 = 0;
  unint64_t v72 = 0;
  sub_29DC44((uint64_t)&__t, (long long **)&v90, &__p, (long long *)v83, &v73, 0, (uint64_t)&v71, 1);
  nullsub_1(11);
  sub_29E11C((uint64_t)&__t);
  uint64_t v22 = v72;
  if (!v72 || atomic_fetch_add(&v72->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v23 = v74;
    if (v74) {
      goto LABEL_75;
    }
LABEL_76:
    if ((v84 & 0x80000000) == 0) {
      goto LABEL_77;
    }
LABEL_95:
    operator delete(v83[0]);
    if (SHIBYTE(v89) < 0) {
      goto LABEL_96;
    }
LABEL_78:
    if ((SHIBYTE(v87) & 0x80000000) == 0) {
      goto LABEL_79;
    }
LABEL_97:
    operator delete(*((void **)&v86 + 1));
    if (SBYTE7(v86) < 0) {
      goto LABEL_98;
    }
LABEL_80:
    unsigned int v24 = (void **)v90;
    if (v90) {
      goto LABEL_81;
    }
LABEL_99:
    if ((SHIBYTE(v93[2]) & 0x80000000) == 0) {
      goto LABEL_100;
    }
LABEL_83:
    operator delete(v93[0]);
    uint64_t v26 = a2[4];
    if (v26[1] == 0x7FFFFFFF) {
      goto LABEL_135;
    }
    goto LABEL_101;
  }
  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
  std::__shared_weak_count::__release_weak(v22);
  uint64_t v23 = v74;
  if (!v74) {
    goto LABEL_76;
  }
LABEL_75:
  if (atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_76;
  }
  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
  std::__shared_weak_count::__release_weak(v23);
  if (v84 < 0) {
    goto LABEL_95;
  }
LABEL_77:
  if ((SHIBYTE(v89) & 0x80000000) == 0) {
    goto LABEL_78;
  }
LABEL_96:
  operator delete((void *)v88);
  if (SHIBYTE(v87) < 0) {
    goto LABEL_97;
  }
LABEL_79:
  if ((SBYTE7(v86) & 0x80000000) == 0) {
    goto LABEL_80;
  }
LABEL_98:
  operator delete((void *)__p);
  unsigned int v24 = (void **)v90;
  if (!v90) {
    goto LABEL_99;
  }
LABEL_81:
  uint64_t v25 = v91;
  if (v91 == v24)
  {
    unint64_t v91 = v24;
    operator delete(v24);
    if ((SHIBYTE(v93[2]) & 0x80000000) == 0) {
      goto LABEL_100;
    }
    goto LABEL_83;
  }
  while (2)
  {
    while (2)
    {
      if (*((char *)v25 - 1) < 0)
      {
        operator delete(*(v25 - 3));
        if (*((char *)v25 - 25) < 0) {
          break;
        }
        goto LABEL_86;
      }
      if ((*((char *)v25 - 25) & 0x80000000) == 0)
      {
LABEL_86:
        v25 -= 6;
        if (v25 == v24) {
          goto LABEL_90;
        }
        continue;
      }
      break;
    }
    operator delete(*(v25 - 6));
    v25 -= 6;
    if (v25 != v24) {
      continue;
    }
    break;
  }
LABEL_90:
  unint64_t v91 = v24;
  operator delete(v90);
  if (SHIBYTE(v93[2]) < 0) {
    goto LABEL_83;
  }
LABEL_100:
  uint64_t v26 = a2[4];
  if (v26[1] == 0x7FFFFFFF) {
    goto LABEL_135;
  }
LABEL_101:
  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (v26[1] >= (int)std::chrono::system_clock::to_time_t(&__t)) {
    goto LABEL_135;
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&__t);
    unsigned int v27 = sub_188FC78(&__t, (uint64_t)"Transit trip updates snapshot has been expired at ", 50);
    uint64_t v28 = (void *)sub_266E4((uint64_t)v27);
    sub_188FC78(v28, (uint64_t)" (age: ", 7);
    uint64_t v29 = (void *)std::ostream::operator<<();
    sub_188FC78(v29, (uint64_t)" sec); discarding it", 20);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (SBYTE7(v86) < 0) {
      operator delete((void *)__p);
    }
    if (v97 < 0) {
      operator delete(v96);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  HIBYTE(v93[2]) = 18;
  strcpy((char *)v93, "SnapshotStaleError");
  uint64_t v90 = 0;
  unint64_t v91 = 0;
  uint64_t v92 = 0;
  uint64_t v89 = 0;
  long long v87 = 0u;
  long long v88 = 0u;
  long long __p = 0u;
  long long v86 = 0u;
  char v84 = 0;
  LOBYTE(v83[0]) = 0;
  uint64_t v69 = 0;
  char v70 = 0;
  uint64_t v67 = 0;
  char v68 = 0;
  sub_29DC44((uint64_t)&__t, (long long **)&v90, &__p, (long long *)v83, &v69, 0, (uint64_t)&v67, 1);
  nullsub_1(11);
  sub_29E11C((uint64_t)&__t);
  uint64_t v30 = v68;
  if (v68 && !atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  BOOL v31 = v70;
  if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  if (v84 < 0)
  {
    operator delete(v83[0]);
    if (SHIBYTE(v89) < 0) {
      goto LABEL_130;
    }
LABEL_116:
    if ((SHIBYTE(v87) & 0x80000000) == 0) {
      goto LABEL_117;
    }
LABEL_131:
    operator delete(*((void **)&v86 + 1));
    if (SBYTE7(v86) < 0) {
      goto LABEL_132;
    }
LABEL_118:
    uint64_t v32 = (void **)v90;
    if (!v90)
    {
LABEL_133:
      if (SHIBYTE(v93[2]) < 0) {
        goto LABEL_121;
      }
      goto LABEL_134;
    }
  }
  else
  {
    if ((SHIBYTE(v89) & 0x80000000) == 0) {
      goto LABEL_116;
    }
LABEL_130:
    operator delete((void *)v88);
    if (SHIBYTE(v87) < 0) {
      goto LABEL_131;
    }
LABEL_117:
    if ((SBYTE7(v86) & 0x80000000) == 0) {
      goto LABEL_118;
    }
LABEL_132:
    operator delete((void *)__p);
    uint64_t v32 = (void **)v90;
    if (!v90) {
      goto LABEL_133;
    }
  }
  uint64_t v33 = v91;
  if (v91 == v32)
  {
    unint64_t v91 = v32;
    operator delete(v32);
    if (SHIBYTE(v93[2]) < 0) {
      goto LABEL_121;
    }
    goto LABEL_134;
  }
  while (2)
  {
    while (2)
    {
      if (*((char *)v33 - 1) < 0)
      {
        operator delete(*(v33 - 3));
        if (*((char *)v33 - 25) < 0) {
          break;
        }
        goto LABEL_123;
      }
      if ((*((char *)v33 - 25) & 0x80000000) == 0)
      {
LABEL_123:
        v33 -= 6;
        if (v33 == v32) {
          goto LABEL_127;
        }
        continue;
      }
      break;
    }
    operator delete(*(v33 - 6));
    v33 -= 6;
    if (v33 != v32) {
      continue;
    }
    break;
  }
LABEL_127:
  unint64_t v91 = v32;
  operator delete(v90);
  if (SHIBYTE(v93[2]) < 0) {
LABEL_121:
  }
    operator delete(v93[0]);
LABEL_134:
  sub_49CA34(a2);
LABEL_135:
  uint64_t v34 = a2[8];
  if (!v34) {
    return;
  }
  sub_3617FC(v34);
  int v35 = sub_366EF4((uint64_t)a2[8]);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&__t);
    sub_188FC78(&__t, (uint64_t)"Provided transit vehicle position snapshot with ", 48);
    uint64_t v36 = (void *)std::ostream::operator<<();
    sub_188FC78(v36, (uint64_t)" vehicle positions (snapshot age: ", 34);
    uint64_t v37 = (void *)std::ostream::operator<<();
    sub_188FC78(v37, (uint64_t)" sec; vehicle posistion age: ", 29);
    uint64_t v38 = (void *)std::ostream::operator<<();
    sub_188FC78(v38, (uint64_t)" sec)", 5);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (SBYTE7(v86) < 0) {
      operator delete((void *)__p);
    }
    if (v97 < 0) {
      operator delete(v96);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  HIBYTE(v93[2]) = 11;
  uint64_t v92 = 0;
  strcpy((char *)v93, "SnapshotAge");
  uint64_t v90 = 0;
  unint64_t v91 = 0;
  uint64_t v89 = 0;
  long long v87 = 0u;
  long long v88 = 0u;
  long long __p = 0u;
  long long v86 = 0u;
  char v84 = 0;
  LOBYTE(v83[0]) = 0;
  uint64_t v65 = 0;
  char v66 = 0;
  uint64_t v63 = 0;
  char v64 = 0;
  sub_29DC44((uint64_t)&__t, (long long **)&v90, &__p, (long long *)v83, &v65, 0, (uint64_t)&v63, 1);
  nullsub_1(21);
  sub_29E11C((uint64_t)&__t);
  uint64_t v39 = v64;
  if (!v64 || atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v40 = v66;
    if (v66) {
      goto LABEL_145;
    }
LABEL_146:
    if ((v84 & 0x80000000) == 0) {
      goto LABEL_147;
    }
LABEL_165:
    operator delete(v83[0]);
    if (SHIBYTE(v89) < 0) {
      goto LABEL_166;
    }
LABEL_148:
    if ((SHIBYTE(v87) & 0x80000000) == 0) {
      goto LABEL_149;
    }
LABEL_167:
    operator delete(*((void **)&v86 + 1));
    if (SBYTE7(v86) < 0) {
      goto LABEL_168;
    }
LABEL_150:
    uint64_t v41 = (void **)v90;
    if (v90) {
      goto LABEL_151;
    }
LABEL_169:
    if ((SHIBYTE(v93[2]) & 0x80000000) == 0) {
      goto LABEL_170;
    }
LABEL_153:
    operator delete(v93[0]);
    if (v35 == 0x7FFFFFFF) {
      goto LABEL_199;
    }
    goto LABEL_171;
  }
  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
  std::__shared_weak_count::__release_weak(v39);
  uint64_t v40 = v66;
  if (!v66) {
    goto LABEL_146;
  }
LABEL_145:
  if (atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_146;
  }
  ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
  std::__shared_weak_count::__release_weak(v40);
  if (v84 < 0) {
    goto LABEL_165;
  }
LABEL_147:
  if ((SHIBYTE(v89) & 0x80000000) == 0) {
    goto LABEL_148;
  }
LABEL_166:
  operator delete((void *)v88);
  if (SHIBYTE(v87) < 0) {
    goto LABEL_167;
  }
LABEL_149:
  if ((SBYTE7(v86) & 0x80000000) == 0) {
    goto LABEL_150;
  }
LABEL_168:
  operator delete((void *)__p);
  uint64_t v41 = (void **)v90;
  if (!v90) {
    goto LABEL_169;
  }
LABEL_151:
  uint64_t v42 = v91;
  if (v91 == v41)
  {
    unint64_t v91 = v41;
    operator delete(v41);
    if ((SHIBYTE(v93[2]) & 0x80000000) == 0) {
      goto LABEL_170;
    }
    goto LABEL_153;
  }
  while (2)
  {
    while (2)
    {
      if (*((char *)v42 - 1) < 0)
      {
        operator delete(*(v42 - 3));
        if (*((char *)v42 - 25) < 0) {
          break;
        }
        goto LABEL_156;
      }
      if ((*((char *)v42 - 25) & 0x80000000) == 0)
      {
LABEL_156:
        v42 -= 6;
        if (v42 == v41) {
          goto LABEL_160;
        }
        continue;
      }
      break;
    }
    operator delete(*(v42 - 6));
    v42 -= 6;
    if (v42 != v41) {
      continue;
    }
    break;
  }
LABEL_160:
  unint64_t v91 = v41;
  operator delete(v90);
  if (SHIBYTE(v93[2]) < 0) {
    goto LABEL_153;
  }
LABEL_170:
  if (v35 == 0x7FFFFFFF) {
    goto LABEL_199;
  }
LABEL_171:
  HIBYTE(v93[2]) = 18;
  strcpy((char *)v93, "VehiclePositionAge");
  uint64_t v90 = 0;
  unint64_t v91 = 0;
  uint64_t v92 = 0;
  uint64_t v89 = 0;
  long long v87 = 0u;
  long long v88 = 0u;
  long long __p = 0u;
  long long v86 = 0u;
  char v84 = 0;
  LOBYTE(v83[0]) = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v59 = 0;
  long long v60 = 0;
  sub_29DC44((uint64_t)&__t, (long long **)&v90, &__p, (long long *)v83, &v61, 0, (uint64_t)&v59, 1);
  nullsub_1(21);
  sub_29E11C((uint64_t)&__t);
  uint64_t v43 = v60;
  if (!v60 || atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v44 = v62;
    if (v62) {
      goto LABEL_174;
    }
LABEL_175:
    if ((v84 & 0x80000000) == 0) {
      goto LABEL_176;
    }
LABEL_194:
    operator delete(v83[0]);
    if (SHIBYTE(v89) < 0) {
      goto LABEL_195;
    }
LABEL_177:
    if ((SHIBYTE(v87) & 0x80000000) == 0) {
      goto LABEL_178;
    }
LABEL_196:
    operator delete(*((void **)&v86 + 1));
    if (SBYTE7(v86) < 0) {
      goto LABEL_197;
    }
LABEL_179:
    uint64_t v45 = (void **)v90;
    if (v90) {
      goto LABEL_180;
    }
LABEL_198:
    if ((SHIBYTE(v93[2]) & 0x80000000) == 0) {
      goto LABEL_199;
    }
LABEL_182:
    operator delete(v93[0]);
    unsigned long long v47 = a2[8];
    if (v47[1] == 0x7FFFFFFF) {
      return;
    }
    goto LABEL_200;
  }
  ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
  std::__shared_weak_count::__release_weak(v43);
  uint64_t v44 = v62;
  if (!v62) {
    goto LABEL_175;
  }
LABEL_174:
  if (atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_175;
  }
  ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
  std::__shared_weak_count::__release_weak(v44);
  if (v84 < 0) {
    goto LABEL_194;
  }
LABEL_176:
  if ((SHIBYTE(v89) & 0x80000000) == 0) {
    goto LABEL_177;
  }
LABEL_195:
  operator delete((void *)v88);
  if (SHIBYTE(v87) < 0) {
    goto LABEL_196;
  }
LABEL_178:
  if ((SBYTE7(v86) & 0x80000000) == 0) {
    goto LABEL_179;
  }
LABEL_197:
  operator delete((void *)__p);
  uint64_t v45 = (void **)v90;
  if (!v90) {
    goto LABEL_198;
  }
LABEL_180:
  uint64_t v46 = v91;
  if (v91 == v45)
  {
    unint64_t v91 = v45;
    operator delete(v45);
    if ((SHIBYTE(v93[2]) & 0x80000000) == 0) {
      goto LABEL_199;
    }
    goto LABEL_182;
  }
  while (2)
  {
    while (2)
    {
      if (*((char *)v46 - 1) < 0)
      {
        operator delete(*(v46 - 3));
        if (*((char *)v46 - 25) < 0) {
          break;
        }
        goto LABEL_185;
      }
      if ((*((char *)v46 - 25) & 0x80000000) == 0)
      {
LABEL_185:
        v46 -= 6;
        if (v46 == v45) {
          goto LABEL_189;
        }
        continue;
      }
      break;
    }
    operator delete(*(v46 - 6));
    v46 -= 6;
    if (v46 != v45) {
      continue;
    }
    break;
  }
LABEL_189:
  unint64_t v91 = v45;
  operator delete(v90);
  if (SHIBYTE(v93[2]) < 0) {
    goto LABEL_182;
  }
LABEL_199:
  unsigned long long v47 = a2[8];
  if (v47[1] == 0x7FFFFFFF) {
    return;
  }
LABEL_200:
  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (v47[1] >= (int)std::chrono::system_clock::to_time_t(&__t)) {
    return;
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&__t);
    uint64_t v48 = sub_188FC78(&__t, (uint64_t)"Transit vehicle position snapshot has been expired at ", 54);
    uint64_t v49 = (void *)sub_266E4((uint64_t)v48);
    sub_188FC78(v49, (uint64_t)" (age: ", 7);
    uint64_t v50 = (void *)std::ostream::operator<<();
    sub_188FC78(v50, (uint64_t)" sec); discarding it", 20);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (SBYTE7(v86) < 0) {
      operator delete((void *)__p);
    }
    if (v97 < 0) {
      operator delete(v96);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  HIBYTE(v93[2]) = 18;
  strcpy((char *)v93, "SnapshotStaleError");
  uint64_t v90 = 0;
  unint64_t v91 = 0;
  uint64_t v92 = 0;
  uint64_t v89 = 0;
  long long v87 = 0u;
  long long v88 = 0u;
  long long __p = 0u;
  long long v86 = 0u;
  char v84 = 0;
  LOBYTE(v83[0]) = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  uint64_t v55 = 0;
  long long v56 = 0;
  sub_29DC44((uint64_t)&__t, (long long **)&v90, &__p, (long long *)v83, &v57, 0, (uint64_t)&v55, 1);
  nullsub_1(21);
  sub_29E11C((uint64_t)&__t);
  uint64_t v51 = v56;
  if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
  }
  uint64_t v52 = v58;
  if (v58)
  {
    if (!atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (v84 < 0)
  {
    operator delete(v83[0]);
    if (SHIBYTE(v89) < 0) {
      goto LABEL_229;
    }
LABEL_215:
    if ((SHIBYTE(v87) & 0x80000000) == 0) {
      goto LABEL_216;
    }
LABEL_230:
    operator delete(*((void **)&v86 + 1));
    if (SBYTE7(v86) < 0) {
      goto LABEL_231;
    }
LABEL_217:
    uint64_t v53 = (void **)v90;
    if (!v90)
    {
LABEL_232:
      if (SHIBYTE(v93[2]) < 0) {
        goto LABEL_220;
      }
      goto LABEL_233;
    }
  }
  else
  {
    if ((SHIBYTE(v89) & 0x80000000) == 0) {
      goto LABEL_215;
    }
LABEL_229:
    operator delete((void *)v88);
    if (SHIBYTE(v87) < 0) {
      goto LABEL_230;
    }
LABEL_216:
    if ((SBYTE7(v86) & 0x80000000) == 0) {
      goto LABEL_217;
    }
LABEL_231:
    operator delete((void *)__p);
    uint64_t v53 = (void **)v90;
    if (!v90) {
      goto LABEL_232;
    }
  }
  uint64_t v54 = v91;
  if (v91 == v53)
  {
    unint64_t v91 = v53;
    operator delete(v53);
    if (SHIBYTE(v93[2]) < 0) {
      goto LABEL_220;
    }
    goto LABEL_233;
  }
  while (2)
  {
    while (2)
    {
      if (*((char *)v54 - 1) < 0)
      {
        operator delete(*(v54 - 3));
        if (*((char *)v54 - 25) < 0) {
          break;
        }
        goto LABEL_222;
      }
      if ((*((char *)v54 - 25) & 0x80000000) == 0)
      {
LABEL_222:
        v54 -= 6;
        if (v54 == v53) {
          goto LABEL_226;
        }
        continue;
      }
      break;
    }
    operator delete(*(v54 - 6));
    v54 -= 6;
    if (v54 != v53) {
      continue;
    }
    break;
  }
LABEL_226:
  unint64_t v91 = v53;
  operator delete(v90);
  if (SHIBYTE(v93[2]) < 0) {
LABEL_220:
  }
    operator delete(v93[0]);
LABEL_233:
  sub_49CB10((uint64_t)a2);
}

void sub_392D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,char a59)
{
  if (a46 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a59);
    sub_37D394(v59);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a59);
  sub_37D394(v59);
  _Unwind_Resume(a1);
}

void *sub_393034(void *a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[1];
  *a1 = v5;
  a1[1] = v4;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v8 = a2[2];
    uint64_t v7 = a2[3];
    if (!v7) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v8 = a2[2];
  uint64_t v7 = a2[3];
  if (v7) {
LABEL_6:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
LABEL_7:
  uint64_t v9 = (std::__shared_weak_count *)a1[3];
  a1[2] = v8;
  a1[3] = v7;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    uint64_t v11 = a2[4];
    uint64_t v10 = a2[5];
    if (!v10) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v11 = a2[4];
  uint64_t v10 = a2[5];
  if (v10) {
LABEL_10:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
LABEL_11:
  uint64_t v12 = (std::__shared_weak_count *)a1[5];
  a1[4] = v11;
  a1[5] = v10;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    uint64_t v14 = a2[6];
    uint64_t v13 = a2[7];
    if (!v13) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  uint64_t v14 = a2[6];
  uint64_t v13 = a2[7];
  if (v13) {
LABEL_14:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
LABEL_15:
  uint64_t v15 = (std::__shared_weak_count *)a1[7];
  a1[6] = v14;
  a1[7] = v13;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    uint64_t v17 = a2[8];
    uint64_t v16 = a2[9];
    if (!v16) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v17 = a2[8];
  uint64_t v16 = a2[9];
  if (v16) {
LABEL_18:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
LABEL_19:
  uint64_t v18 = (std::__shared_weak_count *)a1[9];
  a1[8] = v17;
  a1[9] = v16;
  if (!v18 || atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  return a1;
}

uint64_t sub_393288(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1433);
}

uint64_t sub_393290(uint64_t a1)
{
  return a1 + 1232;
}

uint64_t sub_393298(uint64_t a1)
{
  return *(void *)(a1 + 1416);
}

uint64_t sub_3932A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_3932D8(a1);

  return sub_F06524(v3, a2);
}

uint64_t sub_3932D8(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 424);
  std::mutex::lock((std::mutex *)(a1 + 424));
  uint64_t v3 = *(void *)(a1 + 136);
  if (!v3)
  {
    sub_69510();
    *((void *)sub_69510() + 2) = 0;
    uint64_t v4 = *(void *)(a1 + 1232);
    __p[2] = 0;
    uint64_t v7 = operator new(0x40uLL);
    long long v8 = xmmword_20B9810;
    strcpy((char *)v7, "routing/route-planning/path-finding/CyclingCostFunctions.json");
    __p[0] = 0;
    __p[1] = 0;
    sub_81C38(v4, (uint64_t)&v7, (uint64_t *)__p);
    sub_39596C(a1);
    operator new();
  }
  std::mutex::unlock(v2);
  return v3;
}

void sub_393458(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void sub_3934FC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_393510(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_393548(a1);

  return sub_F092BC(v3, a2);
}

uint64_t sub_393548(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 424);
  std::mutex::lock((std::mutex *)(a1 + 424));
  uint64_t v3 = *(void *)(a1 + 144);
  if (!v3)
  {
    sub_69510();
    *((void *)sub_69510() + 2) = 0;
    uint64_t v4 = *(void *)(a1 + 1232);
    __p[2] = 0;
    uint64_t v7 = operator new(0x40uLL);
    long long v8 = xmmword_20B9810;
    strcpy((char *)v7, "routing/route-planning/path-finding/DrivingCostFunctions.json");
    __p[0] = 0;
    __p[1] = 0;
    sub_81C38(v4, (uint64_t)&v7, (uint64_t *)__p);
    sub_395AC8(a1);
    operator new();
  }
  std::mutex::unlock(v2);
  return v3;
}

void sub_3936C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void sub_39376C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_393780(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_3937B8(a1);

  return sub_F0BF98(v3, a2);
}

uint64_t sub_3937B8(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 424);
  std::mutex::lock((std::mutex *)(a1 + 424));
  uint64_t v3 = *(void *)(a1 + 152);
  if (!v3)
  {
    sub_69510();
    *((void *)sub_69510() + 2) = 0;
    uint64_t v4 = *(void *)(a1 + 1232);
    __p[2] = 0;
    uint64_t v7 = operator new(0x40uLL);
    long long v8 = xmmword_20B9810;
    strcpy((char *)v7, "routing/route-planning/path-finding/WalkingCostFunctions.json");
    __p[0] = 0;
    __p[1] = 0;
    sub_81C38(v4, (uint64_t)&v7, (uint64_t *)__p);
    sub_395C24(a1);
    operator new();
  }
  std::mutex::unlock(v2);
  return v3;
}

void sub_393938(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void sub_3939DC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_3939F0(uint64_t a1)
{
  return a1 + 160;
}

uint64_t sub_393A18(uint64_t a1)
{
  return a1 + 248;
}

uint64_t sub_393A40(uint64_t a1)
{
  return a1 + 336;
}

uint64_t sub_393A68(uint64_t a1)
{
  return *(void *)(a1 + 1072);
}

uint64_t sub_393A70(uint64_t a1)
{
  return a1 + 552;
}

uint64_t sub_393A78(uint64_t a1)
{
  return a1 + 672;
}

uint64_t sub_393A80(uint64_t a1)
{
  return a1 + 592;
}

uint64_t sub_393A88(uint64_t a1)
{
  return a1 + 712;
}

uint64_t sub_393A90(uint64_t a1)
{
  return a1 + 632;
}

uint64_t sub_393A98(uint64_t a1)
{
  return a1 + 752;
}

uint64_t sub_393AA0(uint64_t a1)
{
  return a1 + 792;
}

uint64_t sub_393AA8(uint64_t a1)
{
  return a1 + 832;
}

void sub_393AB0(unint64_t *a1, void *a2)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "cycling_unwinder_cache_kb");
  double v4 = (double)sub_5C9BC(a2, (uint64_t)__p) * 1024.0;
  if (v4 >= 0.0)
  {
    if (v4 >= 4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v5 = (uint64_t)(v4 + v4) + 1;
  }
  else
  {
    if (v4 <= -4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v5 = (uint64_t)(v4 + v4);
    if (v5 >= 1) {
      --v5;
    }
  }
  double v4 = (double)(v5 >> 1);
LABEL_9:
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93E0;
  strcpy((char *)__p[0], "cycling_unwinder_cache_partition_multiplier");
  unint64_t v6 = sub_5C9BC(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "driving_unwinder_cache_kb");
  double v7 = (double)sub_5C9BC(a2, (uint64_t)__p) * 1024.0;
  if (v7 >= 0.0)
  {
    if (v7 >= 4.50359963e15) {
      goto LABEL_21;
    }
    uint64_t v8 = (uint64_t)(v7 + v7) + 1;
  }
  else
  {
    if (v7 <= -4.50359963e15) {
      goto LABEL_21;
    }
    uint64_t v8 = (uint64_t)(v7 + v7);
    if (v8 >= 1) {
      --v8;
    }
  }
  double v7 = (double)(v8 >> 1);
LABEL_21:
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93E0;
  strcpy((char *)__p[0], "driving_unwinder_cache_partition_multiplier");
  unint64_t v9 = sub_5C9BC(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "walking_unwinder_cache_kb");
  double v10 = (double)sub_5C9BC(a2, (uint64_t)__p) * 1024.0;
  if (v10 >= 0.0)
  {
    if (v10 >= 4.50359963e15) {
      goto LABEL_33;
    }
    uint64_t v11 = (uint64_t)(v10 + v10) + 1;
  }
  else
  {
    if (v10 <= -4.50359963e15) {
      goto LABEL_33;
    }
    uint64_t v11 = (uint64_t)(v10 + v10);
    if (v11 >= 1) {
      --v11;
    }
  }
  double v10 = (double)(v11 >> 1);
LABEL_33:
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93E0;
  strcpy((char *)__p[0], "walking_unwinder_cache_partition_multiplier");
  unint64_t v12 = sub_5C9BC(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "cycling_shortcut_cache_kb");
  double v13 = (double)sub_5C9BC(a2, (uint64_t)__p) * 1024.0;
  if (v13 >= 0.0)
  {
    if (v13 >= 4.50359963e15) {
      goto LABEL_45;
    }
    uint64_t v14 = (uint64_t)(v13 + v13) + 1;
  }
  else
  {
    if (v13 <= -4.50359963e15) {
      goto LABEL_45;
    }
    uint64_t v14 = (uint64_t)(v13 + v13);
    if (v14 >= 1) {
      --v14;
    }
  }
  double v13 = (double)(v14 >> 1);
LABEL_45:
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93E0;
  strcpy((char *)__p[0], "cycling_shortcut_cache_partition_multiplier");
  unint64_t v15 = sub_5C9BC(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "driving_shortcut_cache_kb");
  double v16 = (double)sub_5C9BC(a2, (uint64_t)__p) * 1024.0;
  if (v16 >= 0.0)
  {
    if (v16 >= 4.50359963e15) {
      goto LABEL_57;
    }
    uint64_t v17 = (uint64_t)(v16 + v16) + 1;
  }
  else
  {
    if (v16 <= -4.50359963e15) {
      goto LABEL_57;
    }
    uint64_t v17 = (uint64_t)(v16 + v16);
    if (v17 >= 1) {
      --v17;
    }
  }
  double v16 = (double)(v17 >> 1);
LABEL_57:
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93E0;
  strcpy((char *)__p[0], "driving_shortcut_cache_partition_multiplier");
  unint64_t v18 = sub_5C9BC(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "walking_shortcut_cache_kb");
  double v19 = (double)sub_5C9BC(a2, (uint64_t)__p) * 1024.0;
  if (v19 >= 0.0)
  {
    if (v19 >= 4.50359963e15) {
      goto LABEL_69;
    }
    uint64_t v20 = (uint64_t)(v19 + v19) + 1;
  }
  else
  {
    if (v19 <= -4.50359963e15) {
      goto LABEL_69;
    }
    uint64_t v20 = (uint64_t)(v19 + v19);
    if (v20 >= 1) {
      --v20;
    }
  }
  double v19 = (double)(v20 >> 1);
LABEL_69:
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93E0;
  strcpy((char *)__p[0], "walking_shortcut_cache_partition_multiplier");
  unint64_t v21 = sub_5C9BC(a2, (uint64_t)__p);
  unint64_t v22 = v21;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    uint64_t v23 = (uint64_t *)a1[177];
    uint64_t v40 = v15;
    uint64_t v41 = a2;
    uint64_t v39 = v18;
    uint64_t v42 = v22;
    if (v23) {
      goto LABEL_73;
    }
LABEL_77:
    uint64_t v25 = v12;
    uint64_t v26 = v9;
    uint64_t v27 = v6;
    BOOL v24 = 0;
    goto LABEL_78;
  }
  uint64_t v23 = (uint64_t *)a1[177];
  uint64_t v40 = v15;
  uint64_t v41 = a2;
  uint64_t v39 = v18;
  uint64_t v42 = v21;
  if (!v23) {
    goto LABEL_77;
  }
LABEL_73:
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "arena_allocation.enable");
  BOOL v24 = sub_37D6EC(v23, (uint64_t)__p, 0);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v25 = v12;
  uint64_t v26 = v9;
  uint64_t v27 = v6;
LABEL_78:
  if ((unint64_t)v4 >= 0x20000) {
    unint64_t v28 = 0x20000;
  }
  else {
    unint64_t v28 = (unint64_t)v4;
  }
  sub_394510(a1 + 69, (unint64_t)v4, v24, v28, v27);
  if ((unint64_t)v7 >= 0x20000) {
    unint64_t v29 = 0x20000;
  }
  else {
    unint64_t v29 = (unint64_t)v7;
  }
  sub_37E97C(a1 + 74, (unint64_t)v7, v24, v29, v26);
  if ((unint64_t)v10 >= 0x20000) {
    unint64_t v30 = 0x20000;
  }
  else {
    unint64_t v30 = (unint64_t)v10;
  }
  sub_3949E0(a1 + 79, (unint64_t)v10, v24, v30, v25);
  if ((unint64_t)v13 >= 0x20000) {
    unint64_t v31 = 0x20000;
  }
  else {
    unint64_t v31 = (unint64_t)v13;
  }
  sub_37FE5C(a1 + 84, (unint64_t)v13, v24, v31, v40);
  if ((unint64_t)v16 >= 0x20000) {
    unint64_t v32 = 0x20000;
  }
  else {
    unint64_t v32 = (unint64_t)v16;
  }
  sub_37FE5C(a1 + 89, (unint64_t)v16, v24, v32, v39);
  if ((unint64_t)v19 >= 0x20000) {
    unint64_t v33 = 0x20000;
  }
  else {
    unint64_t v33 = (unint64_t)v19;
  }
  sub_37FE5C(a1 + 94, (unint64_t)v19, v24, v33, v42);
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "maneuver_cache_kb");
  double v34 = (double)sub_5C9BC(v41, (uint64_t)__p) * 1024.0;
  if (v34 >= 0.0)
  {
    if (v34 >= 4.50359963e15) {
      goto LABEL_104;
    }
    uint64_t v35 = (uint64_t)(v34 + v34) + 1;
  }
  else
  {
    if (v34 <= -4.50359963e15) {
      goto LABEL_104;
    }
    uint64_t v35 = (uint64_t)(v34 + v34);
    if (v35 >= 1) {
      --v35;
    }
  }
  double v34 = (double)(v35 >> 1);
LABEL_104:
  unint64_t v36 = (unint64_t)v34;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  if (v36 >= 0x20000) {
    unint64_t v37 = 0x20000;
  }
  else {
    unint64_t v37 = v36;
  }
  sub_394EB0(a1 + 99, v36, v24, v37, 0);
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "transit_walking_bucket_search");
  uint64_t v38 = (void *)sub_560F4(v41, (uint64_t)__p);
  sub_395380(a1 + 104, v38, v24);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_39439C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_3943F0(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  char v5 = 13;
  strcpy((char *)v4, "timezone.IANA");
  memset(&__p, 0, sizeof(__p));
  memset(&v6, 0, sizeof(v6));
  sub_111FFAC(*a1, (uint64_t)v4, &v6, &__p);
  sub_26A18(a2, (const char *)&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v6.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((v5 & 0x80000000) == 0) {
        return;
      }
LABEL_7:
      operator delete(v4[0]);
      return;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v5 < 0) {
    goto LABEL_7;
  }
}

void sub_3944B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 17) < 0)
  {
    operator delete(*(void **)(v21 - 40));
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a21 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

double sub_394510(unint64_t *a1, unint64_t a2, unsigned __int8 a3, unint64_t a4, uint64_t a5)
{
  unsigned __int8 v39 = a3;
  a1[1] = a2;
  unsigned int v9 = std::thread::hardware_concurrency();
  uint64_t v10 = 3;
  if (a5) {
    uint64_t v10 = a5;
  }
  unint64_t v11 = v10 * v9;
  if (v11 <= 1) {
    unint64_t v11 = 1;
  }
  double v12 = (double)a4 * (double)v11;
  if (v12 >= 0.0)
  {
    if (v12 >= 4.50359963e15) {
      goto LABEL_13;
    }
    uint64_t v13 = (uint64_t)(v12 + v12) + 1;
  }
  else
  {
    if (v12 <= -4.50359963e15) {
      goto LABEL_13;
    }
    uint64_t v13 = (uint64_t)(v12 + v12);
    if (v13 >= 1) {
      --v13;
    }
  }
  double v12 = (double)(v13 >> 1);
LABEL_13:
  unint64_t v14 = (unint64_t)v12;
  BOOL v18 = (unint64_t)v12 > 1;
  double v15 = (double)a2;
  if (!v18) {
    unint64_t v14 = 1;
  }
  if (a4 <= 1) {
    unint64_t v16 = 1;
  }
  else {
    unint64_t v16 = a4;
  }
  unint64_t v17 = (unint64_t)(v15 / (double)v16);
  if (v17 <= 1) {
    unint64_t v17 = 1;
  }
  BOOL v18 = v14 > a2 || v11 > v17;
  if (v18) {
    unint64_t v11 = v17;
  }
  *a1 = v11;
  double v19 = v15 / (double)v11;
  if (v19 >= 0.0)
  {
    if (v19 >= 4.50359963e15) {
      goto LABEL_33;
    }
    uint64_t v20 = (uint64_t)(v19 + v19) + 1;
  }
  else
  {
    uint64_t v20 = (uint64_t)(v19 + v19);
    if (v20 >= 1) {
      --v20;
    }
  }
  double v19 = (double)(v20 >> 1);
LABEL_33:
  if ((unint64_t)v19 > a4) {
    a4 = (unint64_t)v19;
  }
  unint64_t v38 = a4;
  if (!sub_723EC(2u))
  {
    unint64_t v22 = a1[2];
    unint64_t v23 = a1[3];
    uint64_t v21 = (uint64_t *)(a1 + 2);
    if (v23 == v22) {
      goto LABEL_43;
    }
    goto LABEL_46;
  }
  sub_6BAC((uint64_t)v36);
  sub_188FC78(v36, (uint64_t)"PartitionedLRUCache: creating ", 30);
  BOOL v24 = (void *)std::ostream::operator<<();
  sub_188FC78(v24, (uint64_t)" partitions, ", 13);
  uint64_t v25 = (void *)std::ostream::operator<<();
  sub_188FC78(v25, (uint64_t)" bytes each", 11);
  std::stringbuf::str();
  sub_7246C((uint64_t *)&__p, 2u);
  if (v35 < 0) {
    operator delete(__p);
  }
  if (v37 < 0) {
    operator delete((void *)v36[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  unint64_t v22 = a1[2];
  unint64_t v23 = a1[3];
  uint64_t v21 = (uint64_t *)(a1 + 2);
  if (v23 != v22)
  {
    do
    {
LABEL_46:
      unint64_t v29 = v23 - 272;
      if (*(void *)(v23 - 72))
      {
        sub_397918(v23 - 272);
        unint64_t v30 = sub_2DA84();
        sub_2DD20((uint64_t)v30, *(size_t **)(v23 - 72));
      }
      std::mutex::~mutex((std::mutex *)(v23 - 64));
      sub_37F100((uint64_t *)(v23 - 272));
      v23 -= 272;
    }
    while (v29 != v22);
  }
LABEL_43:
  a1[3] = v22;
  sub_39BDE8(v21, *a1);
  if (*a1)
  {
    unint64_t v27 = 0;
    unint64_t v28 = a1[3];
    do
    {
      while (v28 >= a1[4])
      {
        unint64_t v28 = sub_39C184(v21, (uint64_t *)&v38, &v39);
        a1[3] = v28;
        if (++v27 >= *a1) {
          return result;
        }
      }
      uint64_t v31 = v38;
      int v32 = v39;
      *(void *)unint64_t v28 = v28;
      *(void *)(v28 + 8) = v28;
      *(_OWORD *)(v28 + 16) = xmmword_20E2350;
      *(_OWORD *)(v28 + 32) = 0u;
      *(_OWORD *)(v28 + 48) = 0u;
      *(_OWORD *)(v28 + 64) = 0u;
      *(_OWORD *)(v28 + 80) = 0u;
      *(_OWORD *)(v28 + 96) = 0u;
      *(_OWORD *)(v28 + 112) = 0u;
      *(void *)(v28 + 128) = 0;
      *(void *)(v28 + 144) = 0;
      *(void *)(v28 + 152) = 0;
      *(void *)(v28 + 160) = 0;
      *(void *)(v28 + 168) = v31;
      *(void *)(v28 + 184) = 0;
      *(void *)(v28 + 192) = 0;
      *(void *)(v28 + 176) = 0;
      if (v32)
      {
        unint64_t v33 = sub_2DA84();
        sub_2DB0C((uint64_t)v33);
      }
      *(void *)(v28 + 200) = 0;
      *(void *)(v28 + 208) = 850045863;
      double result = 0.0;
      *(_OWORD *)(v28 + 216) = 0u;
      *(_OWORD *)(v28 + 232) = 0u;
      *(_OWORD *)(v28 + 248) = 0u;
      *(void *)(v28 + 264) = 0;
      v28 += 272;
      a1[3] = v28;
      a1[3] = v28;
      ++v27;
    }
    while (v27 < *a1);
  }
  return result;
}

void sub_394970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a17);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_3949AC(_Unwind_Exception *a1)
{
  sub_37F100(v2);
  *(void *)(v1 + 24) = v2;
  _Unwind_Resume(a1);
}

void sub_3949C4(_Unwind_Exception *a1)
{
  sub_37F100(v2);
  *(void *)(v1 + 24) = v2;
  _Unwind_Resume(a1);
}

double sub_3949E0(unint64_t *a1, unint64_t a2, unsigned __int8 a3, unint64_t a4, uint64_t a5)
{
  unsigned __int8 v39 = a3;
  a1[1] = a2;
  unsigned int v9 = std::thread::hardware_concurrency();
  uint64_t v10 = 3;
  if (a5) {
    uint64_t v10 = a5;
  }
  unint64_t v11 = v10 * v9;
  if (v11 <= 1) {
    unint64_t v11 = 1;
  }
  double v12 = (double)a4 * (double)v11;
  if (v12 >= 0.0)
  {
    if (v12 >= 4.50359963e15) {
      goto LABEL_13;
    }
    uint64_t v13 = (uint64_t)(v12 + v12) + 1;
  }
  else
  {
    if (v12 <= -4.50359963e15) {
      goto LABEL_13;
    }
    uint64_t v13 = (uint64_t)(v12 + v12);
    if (v13 >= 1) {
      --v13;
    }
  }
  double v12 = (double)(v13 >> 1);
LABEL_13:
  unint64_t v14 = (unint64_t)v12;
  BOOL v18 = (unint64_t)v12 > 1;
  double v15 = (double)a2;
  if (!v18) {
    unint64_t v14 = 1;
  }
  if (a4 <= 1) {
    unint64_t v16 = 1;
  }
  else {
    unint64_t v16 = a4;
  }
  unint64_t v17 = (unint64_t)(v15 / (double)v16);
  if (v17 <= 1) {
    unint64_t v17 = 1;
  }
  BOOL v18 = v14 > a2 || v11 > v17;
  if (v18) {
    unint64_t v11 = v17;
  }
  *a1 = v11;
  double v19 = v15 / (double)v11;
  if (v19 >= 0.0)
  {
    if (v19 >= 4.50359963e15) {
      goto LABEL_33;
    }
    uint64_t v20 = (uint64_t)(v19 + v19) + 1;
  }
  else
  {
    uint64_t v20 = (uint64_t)(v19 + v19);
    if (v20 >= 1) {
      --v20;
    }
  }
  double v19 = (double)(v20 >> 1);
LABEL_33:
  if ((unint64_t)v19 > a4) {
    a4 = (unint64_t)v19;
  }
  unint64_t v38 = a4;
  if (!sub_723EC(2u))
  {
    unint64_t v22 = a1[2];
    unint64_t v23 = a1[3];
    uint64_t v21 = (uint64_t *)(a1 + 2);
    if (v23 == v22) {
      goto LABEL_43;
    }
    goto LABEL_46;
  }
  sub_6BAC((uint64_t)v36);
  sub_188FC78(v36, (uint64_t)"PartitionedLRUCache: creating ", 30);
  BOOL v24 = (void *)std::ostream::operator<<();
  sub_188FC78(v24, (uint64_t)" partitions, ", 13);
  uint64_t v25 = (void *)std::ostream::operator<<();
  sub_188FC78(v25, (uint64_t)" bytes each", 11);
  std::stringbuf::str();
  sub_7246C((uint64_t *)&__p, 2u);
  if (v35 < 0) {
    operator delete(__p);
  }
  if (v37 < 0) {
    operator delete((void *)v36[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  unint64_t v22 = a1[2];
  unint64_t v23 = a1[3];
  uint64_t v21 = (uint64_t *)(a1 + 2);
  if (v23 != v22)
  {
    do
    {
LABEL_46:
      unint64_t v29 = v23 - 272;
      if (*(void *)(v23 - 72))
      {
        sub_39714C(v23 - 272);
        unint64_t v30 = sub_2DA84();
        sub_2DD20((uint64_t)v30, *(size_t **)(v23 - 72));
      }
      std::mutex::~mutex((std::mutex *)(v23 - 64));
      sub_37F100((uint64_t *)(v23 - 272));
      v23 -= 272;
    }
    while (v29 != v22);
  }
LABEL_43:
  a1[3] = v22;
  sub_39C3D0(v21, *a1);
  if (*a1)
  {
    unint64_t v27 = 0;
    unint64_t v28 = a1[3];
    do
    {
      while (v28 >= a1[4])
      {
        unint64_t v28 = sub_39C76C(v21, (uint64_t *)&v38, &v39);
        a1[3] = v28;
        if (++v27 >= *a1) {
          return result;
        }
      }
      uint64_t v31 = v38;
      int v32 = v39;
      *(void *)unint64_t v28 = v28;
      *(void *)(v28 + 8) = v28;
      *(_OWORD *)(v28 + 16) = xmmword_20E2350;
      *(_OWORD *)(v28 + 32) = 0u;
      *(_OWORD *)(v28 + 48) = 0u;
      *(_OWORD *)(v28 + 64) = 0u;
      *(_OWORD *)(v28 + 80) = 0u;
      *(_OWORD *)(v28 + 96) = 0u;
      *(_OWORD *)(v28 + 112) = 0u;
      *(void *)(v28 + 128) = 0;
      *(void *)(v28 + 144) = 0;
      *(void *)(v28 + 152) = 0;
      *(void *)(v28 + 160) = 0;
      *(void *)(v28 + 168) = v31;
      *(void *)(v28 + 184) = 0;
      *(void *)(v28 + 192) = 0;
      *(void *)(v28 + 176) = 0;
      if (v32)
      {
        unint64_t v33 = sub_2DA84();
        sub_2DB0C((uint64_t)v33);
      }
      *(void *)(v28 + 200) = 0;
      *(void *)(v28 + 208) = 850045863;
      double result = 0.0;
      *(_OWORD *)(v28 + 216) = 0u;
      *(_OWORD *)(v28 + 232) = 0u;
      *(_OWORD *)(v28 + 248) = 0u;
      *(void *)(v28 + 264) = 0;
      v28 += 272;
      a1[3] = v28;
      a1[3] = v28;
      ++v27;
    }
    while (v27 < *a1);
  }
  return result;
}

void sub_394E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a17);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_394E7C(_Unwind_Exception *a1)
{
  sub_37F100(v2);
  *(void *)(v1 + 24) = v2;
  _Unwind_Resume(a1);
}

void sub_394E94(_Unwind_Exception *a1)
{
  sub_37F100(v2);
  *(void *)(v1 + 24) = v2;
  _Unwind_Resume(a1);
}

double sub_394EB0(unint64_t *a1, unint64_t a2, unsigned __int8 a3, unint64_t a4, uint64_t a5)
{
  unsigned __int8 v39 = a3;
  a1[1] = a2;
  unsigned int v9 = std::thread::hardware_concurrency();
  uint64_t v10 = 3;
  if (a5) {
    uint64_t v10 = a5;
  }
  unint64_t v11 = v10 * v9;
  if (v11 <= 1) {
    unint64_t v11 = 1;
  }
  double v12 = (double)a4 * (double)v11;
  if (v12 >= 0.0)
  {
    if (v12 >= 4.50359963e15) {
      goto LABEL_13;
    }
    uint64_t v13 = (uint64_t)(v12 + v12) + 1;
  }
  else
  {
    if (v12 <= -4.50359963e15) {
      goto LABEL_13;
    }
    uint64_t v13 = (uint64_t)(v12 + v12);
    if (v13 >= 1) {
      --v13;
    }
  }
  double v12 = (double)(v13 >> 1);
LABEL_13:
  unint64_t v14 = (unint64_t)v12;
  BOOL v18 = (unint64_t)v12 > 1;
  double v15 = (double)a2;
  if (!v18) {
    unint64_t v14 = 1;
  }
  if (a4 <= 1) {
    unint64_t v16 = 1;
  }
  else {
    unint64_t v16 = a4;
  }
  unint64_t v17 = (unint64_t)(v15 / (double)v16);
  if (v17 <= 1) {
    unint64_t v17 = 1;
  }
  BOOL v18 = v14 > a2 || v11 > v17;
  if (v18) {
    unint64_t v11 = v17;
  }
  *a1 = v11;
  double v19 = v15 / (double)v11;
  if (v19 >= 0.0)
  {
    if (v19 >= 4.50359963e15) {
      goto LABEL_33;
    }
    uint64_t v20 = (uint64_t)(v19 + v19) + 1;
  }
  else
  {
    uint64_t v20 = (uint64_t)(v19 + v19);
    if (v20 >= 1) {
      --v20;
    }
  }
  double v19 = (double)(v20 >> 1);
LABEL_33:
  if ((unint64_t)v19 > a4) {
    a4 = (unint64_t)v19;
  }
  unint64_t v38 = a4;
  if (!sub_723EC(2u))
  {
    unint64_t v22 = a1[2];
    unint64_t v23 = a1[3];
    uint64_t v21 = (uint64_t *)(a1 + 2);
    if (v23 == v22) {
      goto LABEL_43;
    }
    goto LABEL_46;
  }
  sub_6BAC((uint64_t)v36);
  sub_188FC78(v36, (uint64_t)"PartitionedLRUCache: creating ", 30);
  BOOL v24 = (void *)std::ostream::operator<<();
  sub_188FC78(v24, (uint64_t)" partitions, ", 13);
  uint64_t v25 = (void *)std::ostream::operator<<();
  sub_188FC78(v25, (uint64_t)" bytes each", 11);
  std::stringbuf::str();
  sub_7246C((uint64_t *)&__p, 2u);
  if (v35 < 0) {
    operator delete(__p);
  }
  if (v37 < 0) {
    operator delete((void *)v36[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  unint64_t v22 = a1[2];
  unint64_t v23 = a1[3];
  uint64_t v21 = (uint64_t *)(a1 + 2);
  if (v23 != v22)
  {
    do
    {
LABEL_46:
      unint64_t v29 = v23 - 272;
      if (*(void *)(v23 - 72))
      {
        sub_396964(v23 - 272);
        unint64_t v30 = sub_2DA84();
        sub_2DD20((uint64_t)v30, *(size_t **)(v23 - 72));
      }
      std::mutex::~mutex((std::mutex *)(v23 - 64));
      sub_396B18((uint64_t *)(v23 - 272));
      v23 -= 272;
    }
    while (v29 != v22);
  }
LABEL_43:
  a1[3] = v22;
  sub_39C9B8(v21, *a1);
  if (*a1)
  {
    unint64_t v27 = 0;
    unint64_t v28 = a1[3];
    do
    {
      while (v28 >= a1[4])
      {
        unint64_t v28 = sub_39CD54(v21, (uint64_t *)&v38, &v39);
        a1[3] = v28;
        if (++v27 >= *a1) {
          return result;
        }
      }
      uint64_t v31 = v38;
      int v32 = v39;
      *(void *)unint64_t v28 = v28;
      *(void *)(v28 + 8) = v28;
      *(_OWORD *)(v28 + 16) = xmmword_20E2350;
      *(_OWORD *)(v28 + 32) = 0u;
      *(_OWORD *)(v28 + 48) = 0u;
      *(_OWORD *)(v28 + 64) = 0u;
      *(_OWORD *)(v28 + 80) = 0u;
      *(_OWORD *)(v28 + 96) = 0u;
      *(_OWORD *)(v28 + 112) = 0u;
      *(void *)(v28 + 128) = 0;
      *(void *)(v28 + 144) = 0;
      *(void *)(v28 + 152) = 0;
      *(void *)(v28 + 160) = 0;
      *(void *)(v28 + 168) = v31;
      *(void *)(v28 + 184) = 0;
      *(void *)(v28 + 192) = 0;
      *(void *)(v28 + 176) = 0;
      if (v32)
      {
        unint64_t v33 = sub_2DA84();
        sub_2DB0C((uint64_t)v33);
      }
      *(void *)(v28 + 200) = 0;
      *(void *)(v28 + 208) = 850045863;
      double result = 0.0;
      *(_OWORD *)(v28 + 216) = 0u;
      *(_OWORD *)(v28 + 232) = 0u;
      *(_OWORD *)(v28 + 248) = 0u;
      *(void *)(v28 + 264) = 0;
      v28 += 272;
      a1[3] = v28;
      a1[3] = v28;
      ++v27;
    }
    while (v27 < *a1);
  }
  return result;
}

void sub_395310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a17);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_39534C(_Unwind_Exception *a1)
{
  sub_396B18(v2);
  *(void *)(v1 + 24) = v2;
  _Unwind_Resume(a1);
}

void sub_395364(_Unwind_Exception *a1)
{
  sub_396B18(v2);
  *(void *)(v1 + 24) = v2;
  _Unwind_Resume(a1);
}

void sub_395380(unint64_t *a1, void *a2, char a3)
{
  std::string __p = operator new(0x20uLL);
  long long v23 = xmmword_20B8890;
  strcpy((char *)__p, "forward_search_space_cache_kb");
  double v6 = (double)sub_5C9BC(a2, (uint64_t)&__p) * 1024.0;
  if (v6 >= 0.0)
  {
    if (v6 >= 4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v7 = (uint64_t)(v6 + v6) + 1;
  }
  else
  {
    if (v6 <= -4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v7 = (uint64_t)(v6 + v6);
    if (v7 >= 1) {
      --v7;
    }
  }
  double v6 = (double)(v7 >> 1);
LABEL_9:
  if (SHIBYTE(v23) < 0) {
    operator delete(__p);
  }
  std::string __p = operator new(0x30uLL);
  long long v23 = xmmword_20B9380;
  strcpy((char *)__p, "forward_search_space_cache_partition_multiplier");
  unint64_t v8 = sub_5C9BC(a2, (uint64_t)&__p);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p);
  }
  std::string __p = operator new(0x20uLL);
  long long v23 = xmmword_20B8890;
  strcpy((char *)__p, "reverse_search_space_cache_kb");
  double v9 = (double)sub_5C9BC(a2, (uint64_t)&__p) * 1024.0;
  if (v9 >= 0.0)
  {
    if (v9 >= 4.50359963e15) {
      goto LABEL_21;
    }
    uint64_t v10 = (uint64_t)(v9 + v9) + 1;
  }
  else
  {
    if (v9 <= -4.50359963e15) {
      goto LABEL_21;
    }
    uint64_t v10 = (uint64_t)(v9 + v9);
    if (v10 >= 1) {
      --v10;
    }
  }
  double v9 = (double)(v10 >> 1);
LABEL_21:
  if (SHIBYTE(v23) < 0) {
    operator delete(__p);
  }
  std::string __p = operator new(0x30uLL);
  long long v23 = xmmword_20B9380;
  strcpy((char *)__p, "reverse_search_space_cache_partition_multiplier");
  unint64_t v11 = sub_5C9BC(a2, (uint64_t)&__p);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p);
  }
  std::string __p = operator new(0x28uLL);
  long long v23 = xmmword_20B9390;
  strcpy((char *)__p, "forward_missing_search_spaces_kb");
  double v12 = (double)sub_5C9BC(a2, (uint64_t)&__p) * 1024.0;
  if (v12 >= 0.0)
  {
    if (v12 >= 4.50359963e15) {
      goto LABEL_33;
    }
    uint64_t v13 = (uint64_t)(v12 + v12) + 1;
  }
  else
  {
    if (v12 <= -4.50359963e15) {
      goto LABEL_33;
    }
    uint64_t v13 = (uint64_t)(v12 + v12);
    if (v13 >= 1) {
      --v13;
    }
  }
  double v12 = (double)(v13 >> 1);
LABEL_33:
  if (SHIBYTE(v23) < 0) {
    operator delete(__p);
  }
  std::string __p = operator new(0x38uLL);
  long long v23 = xmmword_20B9A20;
  strcpy((char *)__p, "forward_missing_search_spaces_partition_multiplier");
  unint64_t v14 = sub_5C9BC(a2, (uint64_t)&__p);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p);
  }
  std::string __p = operator new(0x28uLL);
  long long v23 = xmmword_20B9390;
  strcpy((char *)__p, "reverse_missing_search_spaces_kb");
  double v15 = (double)sub_5C9BC(a2, (uint64_t)&__p) * 1024.0;
  if (v15 >= 0.0)
  {
    if (v15 >= 4.50359963e15) {
      goto LABEL_45;
    }
    uint64_t v16 = (uint64_t)(v15 + v15) + 1;
  }
  else
  {
    if (v15 <= -4.50359963e15) {
      goto LABEL_45;
    }
    uint64_t v16 = (uint64_t)(v15 + v15);
    if (v16 >= 1) {
      --v16;
    }
  }
  double v15 = (double)(v16 >> 1);
LABEL_45:
  if (SHIBYTE(v23) < 0) {
    operator delete(__p);
  }
  std::string __p = operator new(0x38uLL);
  long long v23 = xmmword_20B9A20;
  strcpy((char *)__p, "reverse_missing_search_spaces_partition_multiplier");
  unint64_t v17 = sub_5C9BC(a2, (uint64_t)&__p);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p);
  }
  if ((unint64_t)v6 >= 0x20000) {
    unint64_t v18 = 0x20000;
  }
  else {
    unint64_t v18 = (unint64_t)v6;
  }
  sub_399280(a1, (unint64_t)v6, a3, v18, v8);
  if ((unint64_t)v9 >= 0x20000) {
    unint64_t v19 = 0x20000;
  }
  else {
    unint64_t v19 = (unint64_t)v9;
  }
  sub_399280(a1 + 5, (unint64_t)v9, a3, v19, v11);
  if ((unint64_t)v12 >= 0x20000) {
    unint64_t v20 = 0x20000;
  }
  else {
    unint64_t v20 = (unint64_t)v12;
  }
  sub_39A4EC((uint64_t)(a1 + 10), (unint64_t)v12, a3, v20, v14);
  if ((unint64_t)v15 >= 0x20000) {
    unint64_t v21 = 0x20000;
  }
  else {
    unint64_t v21 = (unint64_t)v15;
  }
  sub_39A4EC((uint64_t)(a1 + 15), (unint64_t)v15, a3, v21, v17);
}

void sub_395870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3958A8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1432)) {
    return 1;
  }
  uint64_t v1 = *(uint64_t **)(a1 + 1416);
  if (!v1) {
    return (uint64_t)v1;
  }
  std::string __p = operator new(0x20uLL);
  long long v4 = xmmword_20B91B0;
  strcpy((char *)__p, "transit_fare_service.enabled");
  uint64_t v1 = (uint64_t *)sub_37D6EC(v1, (uint64_t)&__p, 0);
  if ((SHIBYTE(v4) & 0x80000000) == 0) {
    return (uint64_t)v1;
  }
  operator delete(__p);
  return (uint64_t)v1;
}

void sub_395950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_39596C(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 488);
  std::mutex::lock((std::mutex *)(a1 + 488));
  uint64_t v3 = a1 + 16;
  if (!*(void *)(a1 + 40))
  {
    uint64_t v4 = *((void *)sub_69510() + 2);
    *((void *)sub_69510() + 2) = 0;
    sub_382F04((uint64_t)&v10, (uint64_t *)a1);
    sub_39CFA0((uint64_t)&v10, (uint64_t)v12);
    sub_62BDC(a1 + 16, v12);
    char v5 = v13;
    if (v13)
    {
      do
      {
        double v9 = *(char **)v5;
        sub_57AC8((uint64_t *)v5 + 5);
        if (v5[39] < 0) {
          operator delete(*((void **)v5 + 2));
        }
        operator delete(v5);
        char v5 = v9;
      }
      while (v9);
    }
    double v6 = (void *)v12[0];
    v12[0] = 0;
    if (v6) {
      operator delete(v6);
    }
    uint64_t v7 = v11;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    *((void *)sub_69510() + 2) = v4;
  }
  std::mutex::unlock(v2);
  return v3;
}

void sub_395A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    sub_20A6EF8(a10);
    std::mutex::unlock(v10);
    _Unwind_Resume(a1);
  }
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_395AC8(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 488);
  std::mutex::lock((std::mutex *)(a1 + 488));
  uint64_t v3 = a1 + 56;
  if (!*(void *)(a1 + 80))
  {
    uint64_t v4 = *((void *)sub_69510() + 2);
    *((void *)sub_69510() + 2) = 0;
    sub_3833F0((uint64_t)&v10, (uint64_t *)a1);
    sub_39D160((uint64_t)&v10, (uint64_t)v12);
    sub_62BDC(a1 + 56, v12);
    char v5 = v13;
    if (v13)
    {
      do
      {
        double v9 = *(char **)v5;
        sub_57AC8((uint64_t *)v5 + 5);
        if (v5[39] < 0) {
          operator delete(*((void **)v5 + 2));
        }
        operator delete(v5);
        char v5 = v9;
      }
      while (v9);
    }
    double v6 = (void *)v12[0];
    v12[0] = 0;
    if (v6) {
      operator delete(v6);
    }
    uint64_t v7 = v11;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    *((void *)sub_69510() + 2) = v4;
  }
  std::mutex::unlock(v2);
  return v3;
}

void sub_395BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    sub_20A6EF8(a10);
    std::mutex::unlock(v10);
    _Unwind_Resume(a1);
  }
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_395C24(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 488);
  std::mutex::lock((std::mutex *)(a1 + 488));
  uint64_t v3 = a1 + 96;
  if (!*(void *)(a1 + 120))
  {
    uint64_t v4 = *((void *)sub_69510() + 2);
    *((void *)sub_69510() + 2) = 0;
    sub_3838DC((uint64_t)&v10, (uint64_t *)a1);
    sub_39D320((uint64_t)&v10, (uint64_t)v12);
    sub_62BDC(a1 + 96, v12);
    char v5 = v13;
    if (v13)
    {
      do
      {
        double v9 = *(char **)v5;
        sub_57AC8((uint64_t *)v5 + 5);
        if (v5[39] < 0) {
          operator delete(*((void **)v5 + 2));
        }
        operator delete(v5);
        char v5 = v9;
      }
      while (v9);
    }
    double v6 = (void *)v12[0];
    v12[0] = 0;
    if (v6) {
      operator delete(v6);
    }
    uint64_t v7 = v11;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    *((void *)sub_69510() + 2) = v4;
  }
  std::mutex::unlock(v2);
  return v3;
}

void sub_395D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    sub_20A6EF8(a10);
    std::mutex::unlock(v10);
    _Unwind_Resume(a1);
  }
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_395D80(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 1304);
  std::mutex::lock((std::mutex *)(a1 + 1304));
  uint64_t v3 = *(void *)(a1 + 1296);
  if (!v3)
  {
    sub_69510();
    *((void *)sub_69510() + 2) = 0;
    sub_39D4E0();
  }
  std::mutex::unlock(v2);
  return v3;
}

void sub_395F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a10) {
    sub_20A7A34();
  }
  if (a18 < 0)
  {
    operator delete(__p);
    std::mutex::unlock(v18);
    _Unwind_Resume(a1);
  }
  std::mutex::unlock(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_395F68(uint64_t a1)
{
  return a1 + 1368;
}

uint64_t sub_395F70(uint64_t a1)
{
  return a1 + 1248;
}

void sub_395F78(void *a1)
{
  sub_396388(a1);

  operator delete();
}

uint64_t *sub_395FB0(uint64_t *result)
{
  uint64_t v1 = *result;
  *double result = 0;
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 96);
    if (v2)
    {
      uint64_t v3 = *(void *)(v1 + 104);
      uint64_t v4 = *(void **)(v1 + 96);
      if (v3 != v2)
      {
        do
          uint64_t v3 = sub_395FB0(v3 - 8);
        while (v3 != v2);
        uint64_t v4 = *(void **)(v1 + 96);
      }
      *(void *)(v1 + 104) = v2;
      operator delete(v4);
    }
    uint64_t v5 = *(void *)(v1 + 72);
    if (v5)
    {
      uint64_t v6 = *(void *)(v1 + 80);
      uint64_t v7 = *(void **)(v1 + 72);
      if (v6 != v5)
      {
        do
        {
          if (*(char *)(v6 - 1) < 0) {
            operator delete(*(void **)(v6 - 24));
          }
          v6 -= 24;
        }
        while (v6 != v5);
        uint64_t v7 = *(void **)(v1 + 72);
      }
      *(void *)(v1 + 80) = v5;
      operator delete(v7);
    }
    if (*(char *)(v1 + 71) < 0)
    {
      operator delete(*(void **)(v1 + 48));
      if ((*(char *)(v1 + 47) & 0x80000000) == 0)
      {
LABEL_17:
        unint64_t v8 = *(void ***)v1;
        if (!*(void *)v1) {
          goto LABEL_34;
        }
        goto LABEL_21;
      }
    }
    else if ((*(char *)(v1 + 47) & 0x80000000) == 0)
    {
      goto LABEL_17;
    }
    operator delete(*(void **)(v1 + 24));
    unint64_t v8 = *(void ***)v1;
    if (!*(void *)v1) {
      goto LABEL_34;
    }
LABEL_21:
    double v9 = *(void ***)(v1 + 8);
    uint64_t v10 = v8;
    if (v9 != v8)
    {
      unint64_t v11 = *(void ***)(v1 + 8);
      do
      {
        unint64_t v14 = (char *)*(v11 - 3);
        v11 -= 3;
        uint64_t v13 = v14;
        if (v14)
        {
          double v15 = (char *)*(v9 - 2);
          double v12 = v13;
          if (v15 != v13)
          {
            uint64_t v16 = (char *)*(v9 - 2);
            do
            {
              unint64_t v18 = (void *)*((void *)v16 - 3);
              v16 -= 24;
              unint64_t v17 = v18;
              if (v18)
              {
                *((void *)v15 - 2) = v17;
                operator delete(v17);
              }
              double v15 = v16;
            }
            while (v16 != v13);
            double v12 = *v11;
          }
          *(v9 - 2) = v13;
          operator delete(v12);
        }
        double v9 = v11;
      }
      while (v11 != v8);
      uint64_t v10 = *(void ***)v1;
    }
    *(void *)(v1 + 8) = v8;
    operator delete(v10);
LABEL_34:
    operator delete();
  }
  return result;
}

uint64_t *sub_396148(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *double result = a2;
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(v2 + 96);
    if (v3)
    {
      uint64_t v4 = *(uint64_t **)(v2 + 104);
      uint64_t v5 = *(void **)(v2 + 96);
      if (v4 != v3)
      {
        do
          uint64_t v4 = sub_395FB0(v4 - 1);
        while (v4 != v3);
        uint64_t v5 = *(void **)(v2 + 96);
      }
      *(void *)(v2 + 104) = v3;
      operator delete(v5);
    }
    uint64_t v6 = *(void *)(v2 + 72);
    if (v6)
    {
      uint64_t v7 = *(void *)(v2 + 80);
      unint64_t v8 = *(void **)(v2 + 72);
      if (v7 != v6)
      {
        do
        {
          if (*(char *)(v7 - 1) < 0) {
            operator delete(*(void **)(v7 - 24));
          }
          v7 -= 24;
        }
        while (v7 != v6);
        unint64_t v8 = *(void **)(v2 + 72);
      }
      *(void *)(v2 + 80) = v6;
      operator delete(v8);
    }
    if (*(char *)(v2 + 71) < 0)
    {
      operator delete(*(void **)(v2 + 48));
      if ((*(char *)(v2 + 47) & 0x80000000) == 0)
      {
LABEL_18:
        double v9 = *(void ***)v2;
        if (!*(void *)v2) {
          goto LABEL_35;
        }
        goto LABEL_22;
      }
    }
    else if ((*(char *)(v2 + 47) & 0x80000000) == 0)
    {
      goto LABEL_18;
    }
    operator delete(*(void **)(v2 + 24));
    double v9 = *(void ***)v2;
    if (!*(void *)v2) {
      goto LABEL_35;
    }
LABEL_22:
    uint64_t v10 = *(void ***)(v2 + 8);
    unint64_t v11 = v9;
    if (v10 != v9)
    {
      double v12 = *(void ***)(v2 + 8);
      do
      {
        double v15 = (char *)*(v12 - 3);
        v12 -= 3;
        unint64_t v14 = v15;
        if (v15)
        {
          uint64_t v16 = (char *)*(v10 - 2);
          uint64_t v13 = v14;
          if (v16 != v14)
          {
            unint64_t v17 = (char *)*(v10 - 2);
            do
            {
              unint64_t v19 = (void *)*((void *)v17 - 3);
              v17 -= 24;
              unint64_t v18 = v19;
              if (v19)
              {
                *((void *)v16 - 2) = v18;
                operator delete(v18);
              }
              uint64_t v16 = v17;
            }
            while (v17 != v14);
            uint64_t v13 = *v12;
          }
          *(v10 - 2) = v14;
          operator delete(v13);
        }
        uint64_t v10 = v12;
      }
      while (v12 != v9);
      unint64_t v11 = *(void ***)v2;
    }
    *(void *)(v2 + 8) = v9;
    operator delete(v11);
LABEL_35:
    operator delete();
  }
  return result;
}

uint64_t sub_3962F0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = *(void **)v2;
      uint64_t v6 = (void *)*((void *)v2 + 9);
      if (v6)
      {
        *((void *)v2 + 10) = v6;
        operator delete(v6);
      }
      uint64_t v7 = (void *)*((void *)v2 + 6);
      if (v7)
      {
        *((void *)v2 + 7) = v7;
        operator delete(v7);
      }
      unint64_t v8 = (void **)*((void *)v2 + 3);
      if (v8)
      {
        sub_2D1B80((uint64_t)v2 + 24, v8);
        operator delete(*((void **)v2 + 3));
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void *sub_396388(void *a1)
{
  *a1 = off_2438DF8;
  uint64_t v2 = (std::__shared_weak_count *)a1[8];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (void *)a1[4];
    if (!v3) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v3 = (void *)a1[4];
    if (!v3) {
      goto LABEL_10;
    }
  }
  do
  {
    uint64_t v4 = v3;
    uint64_t v3 = (void *)*v3;
    uint64_t v5 = (std::__shared_weak_count *)v4[4];
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    operator delete(v4);
  }
  while (v3);
LABEL_10:
  uint64_t v6 = (void *)a1[2];
  a1[2] = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (std::mutex *)a1[1];
  a1[1] = 0;
  if (v7)
  {
    std::mutex::~mutex(v7);
    operator delete();
  }
  return a1;
}

uint64_t sub_3964C8(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 136);
  uint64_t v2 = *(uint64_t **)(a1 + 136);
  if (v2)
  {
    sub_396630(a1 + 136, v2);
    operator delete(*v3);
  }
  uint64_t v4 = *(uint64_t **)(a1 + 96);
  if (v4)
  {
    sub_396630(a1 + 96, v4);
    operator delete(*(void **)(a1 + 96));
  }
  uint64_t v5 = *(uint64_t **)(a1 + 56);
  if (v5)
  {
    uint64_t v6 = *(uint64_t **)(a1 + 64);
    uint64_t v7 = *(void **)(a1 + 56);
    if (v6 != v5)
    {
      do
        uint64_t v6 = sub_3966E8(v6 - 25);
      while (v6 != v5);
      uint64_t v7 = *(void **)(a1 + 56);
    }
    *(void *)(a1 + 64) = v5;
    operator delete(v7);
  }
  unint64_t v8 = *(uint64_t **)(a1 + 16);
  if (v8)
  {
    double v9 = *(uint64_t **)(a1 + 24);
    uint64_t v10 = *(void **)(a1 + 16);
    if (v9 != v8)
    {
      do
        double v9 = sub_3966E8(v9 - 25);
      while (v9 != v8);
      uint64_t v10 = *(void **)(a1 + 16);
    }
    *(void *)(a1 + 24) = v8;
    operator delete(v10);
  }
  return a1;
}

uint64_t sub_396594(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 16);
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  if (v2)
  {
    sub_396630(a1 + 16, v2);
    operator delete(*v3);
  }
  return a1;
}

uint64_t sub_3965D4(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 24);
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        uint64_t v3 = sub_3966E8(v3 - 25);
      while (v3 != v2);
      uint64_t v4 = *(uint64_t **)(a1 + 16);
    }
    *(void *)(a1 + 24) = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_396630(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      uint64_t v5 = (void *)*(v4 - 11);
      if (v5)
      {
        *(v4 - 10) = (uint64_t)v5;
        operator delete(v5);
      }
      uint64_t v6 = (void *)*(v4 - 14);
      if (v6)
      {
        *(v4 - 13) = (uint64_t)v6;
        operator delete(v6);
      }
      uint64_t v7 = v4 - 25;
      std::mutex::~mutex((std::mutex *)(v4 - 22));
      if (*(v4 - 23))
      {
        uint64_t v9 = *(v4 - 25);
        unint64_t v8 = (uint64_t *)*(v4 - 24);
        uint64_t v10 = *v8;
        *(void *)(v10 + 8) = *(void *)(v9 + 8);
        **(void **)(v9 + 8) = v10;
        *(v4 - 23) = 0;
        if (v8 != v7)
        {
          do
          {
            unint64_t v11 = (uint64_t *)v8[1];
            operator delete(v8);
            unint64_t v8 = v11;
          }
          while (v11 != v7);
        }
      }
      uint64_t v4 = v7;
    }
    while (v7 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t *sub_3966E8(uint64_t *a1)
{
  uint64_t v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = (uint64_t)v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = (uint64_t)v3;
    operator delete(v3);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 3));
  if (a1[2])
  {
    uint64_t v4 = *a1;
    uint64_t v5 = (uint64_t *)a1[1];
    uint64_t v6 = *v5;
    *(void *)(v6 + 8) = *(void *)(*a1 + 8);
    **(void **)(v4 + 8) = v6;
    a1[2] = 0;
    if (v5 != a1)
    {
      do
      {
        uint64_t v7 = (uint64_t *)v5[1];
        unint64_t v8 = (std::__shared_weak_count *)v5[4];
        if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        operator delete(v5);
        uint64_t v5 = v7;
      }
      while (v7 != a1);
    }
  }
  return a1;
}

uint64_t *sub_3967D8(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (std::__shared_weak_count *)v3[4];
        if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void sub_3968A0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (size_t **)**a1;
  if (v2)
  {
    uint64_t v4 = (size_t **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 34;
        if (*(v4 - 9))
        {
          sub_396964((uint64_t)(v4 - 34));
          uint64_t v7 = sub_2DA84();
          sub_2DD20((uint64_t)v7, *(v4 - 9));
        }
        std::mutex::~mutex((std::mutex *)v4 - 1);
        sub_396B18((uint64_t *)v4 - 34);
        v4 -= 34;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_396964(uint64_t a1)
{
  uint64_t v13 = (uint64_t *)&v13;
  unint64_t v14 = &v13;
  uint64_t v15 = 0;
  uint64_t v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  for (uint64_t i = *(unsigned int **)(a1 + 8); i != (unsigned int *)a1; uint64_t i = *(unsigned int **)(a1 + 8))
  {
    uint64_t v4 = *(void *)(a1 + 160);
    if (!v4) {
      break;
    }
    *(void *)(a1 + 160) = v4 - *((void *)i + 6);
    sub_396CD0((uint64_t *)(a1 + 88), i + 4);
    if (i != (unsigned int *)&v13)
    {
      uint64_t v5 = (uint64_t **)*((void *)i + 1);
      if (v5 != &v13)
      {
        uint64_t v6 = *(void *)i;
        *(void *)(v6 + 8) = v5;
        **((void **)i + 1) = v6;
        uint64_t v7 = v13;
        v13[1] = (uint64_t)i;
        *(void *)uint64_t i = v7;
        *((void *)i + 1) = &v13;
        --*(void *)(a1 + 16);
        uint64_t v13 = (uint64_t *)i;
        ++v15;
      }
    }
  }
  std::mutex::unlock(v2);
  if (v15)
  {
    unint64_t v8 = v13;
    uint64_t v9 = v14;
    uint64_t v10 = *v14;
    v10[1] = v13[1];
    *(void *)v8[1] = v10;
    uint64_t v15 = 0;
    if (v9 != &v13)
    {
      do
      {
        unint64_t v11 = (uint64_t **)v9[1];
        double v12 = (std::__shared_weak_count *)v9[5];
        if (v12)
        {
          if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        operator delete(v9);
        uint64_t v9 = v11;
      }
      while (v11 != &v13);
    }
  }
}

void sub_396AE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_396C08((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_396AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::mutex::unlock(v10);
  sub_396C08(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_396B18(uint64_t *a1)
{
  uint64_t v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = (uint64_t)v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = (uint64_t)v3;
    operator delete(v3);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 3));
  if (a1[2])
  {
    uint64_t v4 = *a1;
    uint64_t v5 = (uint64_t *)a1[1];
    uint64_t v6 = *v5;
    *(void *)(v6 + 8) = *(void *)(*a1 + 8);
    **(void **)(v4 + 8) = v6;
    a1[2] = 0;
    if (v5 != a1)
    {
      do
      {
        uint64_t v7 = (uint64_t *)v5[1];
        unint64_t v8 = (std::__shared_weak_count *)v5[5];
        if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        operator delete(v5);
        uint64_t v5 = v7;
      }
      while (v7 != a1);
    }
  }
  return a1;
}

uint64_t *sub_396C08(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (std::__shared_weak_count *)v3[5];
        if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

uint64_t sub_396CD0(uint64_t *a1, unsigned int *a2)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  if (v2 == v3) {
    return 0;
  }
  unint64_t v4 = *a2;
  uint64_t v5 = *((unsigned __int16 *)a2 + 2);
  unint64_t v6 = (v5 + (v4 << 6) + (v4 >> 2) + 2654435769u) ^ v4;
  uint64_t v7 = *((unsigned __int8 *)a2 + 8);
  unint64_t v8 = ((v7 | (v6 << 6)) + (v6 >> 2) + 2654435769u) ^ v6;
  uint64_t v9 = *((unsigned __int8 *)a2 + 9);
  unint64_t v10 = ((v9 | (v8 << 6)) + (v8 >> 2) + 2654435769u) ^ v8;
  uint64_t v11 = *((unsigned __int8 *)a2 + 10);
  uint64_t v12 = *a1;
  unint64_t v13 = ((v11 + (v10 << 6) + (v10 >> 2) + 2654435769u) ^ v10) % (a1[1] - *a1);
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v3 - v2) >> 3);
  while (1)
  {
    if (*(unsigned char *)(v12 + v13) != 1)
    {
      if (!*(unsigned char *)(v12 + v13)) {
        return 0;
      }
      uint64_t v15 = v2 + 24 * v13;
      BOOL v16 = v4 == *(void *)v15 && v5 == (unsigned __int16)WORD2(*(void *)v15);
      if (v16
        && (HIWORD(*(void *)v15) & 1) != (*((unsigned char *)a2 + 6) == 0)
        && v7 == *(unsigned __int8 *)(v15 + 8)
        && __PAIR64__(v11, v9) == __PAIR64__(*(unsigned __int8 *)(v15 + 10), *(unsigned __int8 *)(v15 + 9)))
      {
        break;
      }
    }
    if (v13 == v14 - 1) {
      unint64_t v13 = 0;
    }
    else {
      ++v13;
    }
  }
  uint64_t v17 = 1;
  *(unsigned char *)(v12 + v13) = 1;
  uint64_t v18 = a1[7] - 1;
  a1[7] = v18;
  if (v14 > 8 * v18)
  {
    sub_396E20((uint64_t)a1);
    return 1;
  }
  return v17;
}

void sub_396E20(uint64_t a1)
{
  unint64_t v2 = 0;
  uint64_t v3 = *(void *)(a1 + 56);
  do
    ++v2;
  while (3 * v3 > (unint64_t)(1 << v2));
  if (v2 >= 0x3C) {
    sub_2E00();
  }
  unint64_t v4 = (char *)operator new(24 << v2);
  size_t v5 = 1 << v2;
  unint64_t v6 = &v4[24 * (1 << v2)];
  uint64_t v7 = v4;
  do
  {
    *(void *)uint64_t v7 = 0;
    *((_DWORD *)v7 + 2) = 0;
    v7[6] = 1;
    v7[10] = 5;
    *((void *)v7 + 2) = 0;
    v7 += 24;
  }
  while (v7 != v6);
  unint64_t v8 = (char *)operator new(1 << v2);
  uint64_t v9 = &v8[v5];
  bzero(v8, v5);
  *(void *)(a1 + 64) = v3;
  unint64_t v10 = *(unsigned char **)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  unint64_t v12 = v11 - *(void *)a1;
  if (v11 == *(void *)a1)
  {
    unint64_t v10 = *(unsigned char **)(a1 + 8);
  }
  else
  {
    unint64_t v13 = 0;
    size_t v14 = v5 - 1;
    do
    {
      if (v10[v13] == 2)
      {
        uint64_t v17 = *(void *)(a1 + 24);
        uint64_t v18 = (unsigned int *)(v17 + 24 * v13);
        unint64_t v19 = (*((unsigned __int16 *)v18 + 2)
             + 2654435769
             + ((unint64_t)*v18 << 6)
             + ((unint64_t)*v18 >> 2)) ^ *v18;
        unint64_t v20 = (*((unsigned __int8 *)v18 + 8) + 2654435769 + (v19 << 6) + (v19 >> 2)) ^ v19;
        unint64_t v21 = (*((unsigned __int8 *)v18 + 9) + 2654435769 + (v20 << 6) + (v20 >> 2)) ^ v20;
        uint64_t v22 = ((*((unsigned __int8 *)v18 + 10) + 2654435769 + (v21 << 6) + (v21 >> 2)) ^ v21) & v14;
        while (v8[v22])
        {
          if (v22 == v14) {
            uint64_t v22 = 0;
          }
          else {
            ++v22;
          }
        }
        uint64_t v15 = &v4[24 * v22];
        uint64_t v16 = *(void *)v18;
        *(_DWORD *)(v15 + 7) = *(unsigned int *)((char *)v18 + 7);
        *(void *)uint64_t v15 = v16;
        *((void *)v15 + 2) = *(void *)(v17 + 24 * v13 + 16);
        v8[v22] = 2;
      }
      ++v13;
    }
    while (v13 < v12);
  }
  long long v23 = *(void **)(a1 + 24);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v6;
  *(void *)a1 = v8;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v4;
  if (v10) {
    operator delete(v10);
  }
  if (v23)
  {
    operator delete(v23);
  }
}

void sub_397050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_397088(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (size_t **)**a1;
  if (v2)
  {
    unint64_t v4 = (size_t **)v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = v4 - 34;
        if (*(v4 - 9))
        {
          sub_39714C((uint64_t)(v4 - 34));
          uint64_t v7 = sub_2DA84();
          sub_2DD20((uint64_t)v7, *(v4 - 9));
        }
        std::mutex::~mutex((std::mutex *)v4 - 1);
        sub_37F100((uint64_t *)v4 - 34);
        v4 -= 34;
      }
      while (v6 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_39714C(uint64_t a1)
{
  unint64_t v13 = (uint64_t *)&v13;
  size_t v14 = &v13;
  uint64_t v15 = 0;
  unint64_t v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  for (uint64_t i = *(unsigned int **)(a1 + 8); i != (unsigned int *)a1; uint64_t i = *(unsigned int **)(a1 + 8))
  {
    uint64_t v4 = *(void *)(a1 + 160);
    if (!v4) {
      break;
    }
    *(void *)(a1 + 160) = v4 - *((void *)i + 9);
    sub_397300((int64x2_t *)(a1 + 88), i + 4);
    if (i != (unsigned int *)&v13)
    {
      size_t v5 = (uint64_t **)*((void *)i + 1);
      if (v5 != &v13)
      {
        uint64_t v6 = *(void *)i;
        *(void *)(v6 + 8) = v5;
        **((void **)i + 1) = v6;
        uint64_t v7 = v13;
        v13[1] = (uint64_t)i;
        *(void *)uint64_t i = v7;
        *((void *)i + 1) = &v13;
        --*(void *)(a1 + 16);
        unint64_t v13 = (uint64_t *)i;
        ++v15;
      }
    }
  }
  std::mutex::unlock(v2);
  if (v15)
  {
    unint64_t v8 = v13;
    uint64_t v9 = v14;
    unint64_t v10 = *v14;
    v10[1] = v13[1];
    *(void *)v8[1] = v10;
    uint64_t v15 = 0;
    if (v9 != &v13)
    {
      do
      {
        uint64_t v11 = (uint64_t **)v9[1];
        unint64_t v12 = (std::__shared_weak_count *)v9[8];
        if (v12)
        {
          if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        operator delete(v9);
        uint64_t v9 = v11;
      }
      while (v11 != &v13);
    }
  }
}

void sub_3972D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_37F1F0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_3972E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::mutex::unlock(v10);
  sub_37F1F0(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_397300(int64x2_t *a1, unsigned int *a2)
{
  uint64_t v3 = a1[1].i64[1];
  uint64_t v2 = a1[2].i64[0];
  if (v3 == v2) {
    return 0;
  }
  unint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  unint64_t v6 = (v5 + (v4 << 6) + (v4 >> 2) + 2654435769u) ^ v4;
  uint64_t v7 = *((unsigned __int16 *)a2 + 4);
  unint64_t v8 = (v7 + (v6 << 6) + (v6 >> 2) + 2654435769u) ^ v6;
  uint64_t v9 = *((unsigned __int16 *)a2 + 5);
  unint64_t v10 = (v9 + (v8 << 6) + (v8 >> 2) + 2654435769u) ^ v8;
  uint64_t v11 = a2[3];
  uint64_t v12 = (int)a2[4];
  unint64_t v13 = (v11 + (v10 << 6) + (v10 >> 2) + 2654435769u) ^ v10;
  unint64_t v14 = (v12 + (v13 << 6) + (v13 >> 2) + 2654435769u) ^ v13;
  uint64_t v15 = (int)a2[5];
  uint64_t v16 = (int)a2[6];
  unint64_t v17 = (v15 + (v14 << 6) + (v14 >> 2) + 2654435769u) ^ v14;
  unint64_t v18 = (v16 + (v17 << 6) + (v17 >> 2) + 2654435769u) ^ v17;
  uint64_t v19 = *((unsigned __int8 *)a2 + 28);
  unint64_t v20 = (v19 + (v18 << 6) + (v18 >> 2) + 2654435769u) ^ v18;
  uint64_t v21 = *((unsigned __int16 *)a2 + 15);
  unint64_t v22 = (v21 + (v20 << 6) + (v20 >> 2) + 2654435769u) ^ v20;
  uint64_t v23 = a2[8];
  uint64_t v24 = a1->i64[0];
  unint64_t v25 = ((v23 + (v22 << 6) + (v22 >> 2) + 2654435769u) ^ v22) % (a1->i64[1] - a1->i64[0]);
  unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((v2 - v3) >> 4);
  while (1)
  {
    if (*(unsigned char *)(v24 + v25) != 1)
    {
      if (!*(unsigned char *)(v24 + v25)) {
        return 0;
      }
      unint64_t v27 = v3 + 48 * v25;
      if (v4 == *(_DWORD *)v27
        && v5 == *(_DWORD *)(v27 + 4)
        && *(unsigned __int16 *)(v27 + 8) == v7
        && *(unsigned __int16 *)(v27 + 10) == v9
        && v11 == *(_DWORD *)(v27 + 12)
        && v12 == *(_DWORD *)(v27 + 16)
        && v15 == *(_DWORD *)(v27 + 20)
        && v16 == *(_DWORD *)(v27 + 24)
        && v19 == *(unsigned __int8 *)(v27 + 28)
        && *(unsigned __int16 *)(v27 + 30) == v21
        && v23 == *(_DWORD *)(v27 + 32))
      {
        break;
      }
    }
    if (v25 == v26 - 1) {
      unint64_t v25 = 0;
    }
    else {
      ++v25;
    }
  }
  uint64_t v28 = 1;
  *(unsigned char *)(v24 + v25) = 1;
  uint64_t v29 = a1[3].i64[1] - 1;
  a1[3].i64[1] = v29;
  if (v26 > 8 * v29)
  {
    sub_397500(a1);
    return 1;
  }
  return v28;
}

void sub_397500(int64x2_t *a1)
{
  unint64_t v2 = 0;
  uint64_t v3 = a1[3].i64[1];
  do
    ++v2;
  while (3 * v3 > (unint64_t)(1 << v2));
  if (v2 >= 0x3B) {
    sub_2E00();
  }
  unint64_t v4 = (char *)operator new(48 << v2);
  uint64_t v5 = v4;
  size_t v6 = 1 << v2;
  unint64_t v7 = (unint64_t)&v4[48 * (1 << v2)];
  int v32 = v4;
  v33.i64[1] = v7;
  unint64_t v8 = v4;
  do
  {
    *(_OWORD *)unint64_t v8 = 0uLL;
    *((_OWORD *)v8 + 1) = 0uLL;
    *(void *)(v8 + 4) = -1;
    *((_DWORD *)v8 + 3) = -1;
    *((void *)v8 + 2) = 0x8000000080000000;
    *((_DWORD *)v8 + 6) = 0x7FFFFFFF;
    *((_WORD *)v8 + 15) = -1;
    *((_DWORD *)v8 + 8) = -1;
    *((void *)v8 + 5) = 0;
    v8 += 48;
  }
  while (v8 != (char *)v7);
  v33.i64[0] = (uint64_t)&v4[48 * (1 << v2)];
  uint64_t v9 = (char *)operator new(1 << v2);
  unint64_t v10 = (unint64_t)&v9[v6];
  unint64_t v30 = v9;
  v31.i64[1] = (uint64_t)&v9[v6];
  bzero(v9, v6);
  v31.i64[0] = (uint64_t)&v9[v6];
  a1[4].i64[0] = v3;
  uint64_t v12 = a1->i64[0];
  uint64_t v11 = (char *)a1->i64[1];
  if (v11 == (char *)a1->i64[0])
  {
    uint64_t v29 = (void *)a1[1].i64[1];
    a1[1].i64[1] = (uint64_t)v5;
    a1[2] = vdupq_n_s64(v7);
    a1->i64[0] = (uint64_t)v9;
    *(int64x2_t *)((char *)a1 + 8) = vdupq_n_s64(v10);
    if (v11) {
LABEL_18:
    }
      operator delete(v11);
  }
  else
  {
    unint64_t v13 = 0;
    do
    {
      if (*(unsigned char *)(v12 + v13) == 2)
      {
        uint64_t v17 = a1[1].i64[1];
        unint64_t v18 = (unsigned int *)(v17 + 48 * v13);
        unint64_t v19 = (v18[1] + 2654435769 + ((unint64_t)*v18 << 6) + ((unint64_t)*v18 >> 2)) ^ *v18;
        unint64_t v20 = (*((unsigned __int16 *)v18 + 4) + 2654435769 + (v19 << 6) + (v19 >> 2)) ^ v19;
        unint64_t v21 = (*((unsigned __int16 *)v18 + 5) + 2654435769 + (v20 << 6) + (v20 >> 2)) ^ v20;
        unint64_t v22 = (v18[3] + 2654435769 + (v21 << 6) + (v21 >> 2)) ^ v21;
        unint64_t v23 = ((int)v18[4] + 2654435769 + (v22 << 6) + (v22 >> 2)) ^ v22;
        unint64_t v24 = ((int)v18[5] + 2654435769 + (v23 << 6) + (v23 >> 2)) ^ v23;
        unint64_t v25 = ((int)v18[6] + 2654435769 + (v24 << 6) + (v24 >> 2)) ^ v24;
        unint64_t v26 = (*((unsigned __int8 *)v18 + 28) + 2654435769 + (v25 << 6) + (v25 >> 2)) ^ v25;
        unint64_t v27 = (*((unsigned __int16 *)v18 + 15) + 2654435769 + (v26 << 6) + (v26 >> 2)) ^ v26;
        unint64_t v28 = ((v18[8] + 2654435769 + (v27 << 6) + (v27 >> 2)) ^ v27) % (v10 - (unint64_t)v9);
        while (v9[v28])
        {
          if (v28 == v10 - (void)v9 - 1) {
            unint64_t v28 = 0;
          }
          else {
            ++v28;
          }
        }
        uint64_t v5 = v32;
        unint64_t v14 = &v32[48 * v28];
        long long v15 = *(_OWORD *)v18;
        long long v16 = *((_OWORD *)v18 + 1);
        *((_DWORD *)v14 + 8) = v18[8];
        *(_OWORD *)unint64_t v14 = v15;
        *((_OWORD *)v14 + 1) = v16;
        *((void *)v14 + 5) = *(void *)(v17 + 48 * v13 + 40);
        uint64_t v9 = v30;
        v30[v28] = 2;
        uint64_t v12 = a1->i64[0];
        uint64_t v11 = (char *)a1->i64[1];
      }
      ++v13;
    }
    while (v13 < (unint64_t)&v11[-v12]);
    uint64_t v11 = (char *)v12;
    uint64_t v29 = (void *)a1[1].i64[1];
    a1[1].i64[1] = (uint64_t)v5;
    a1[2] = v33;
    a1->i64[0] = (uint64_t)v9;
    *(int64x2_t *)((char *)a1 + 8) = v31;
    if (v12) {
      goto LABEL_18;
    }
  }
  if (v29)
  {
    operator delete(v29);
  }
}

void sub_39781C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_397854(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (size_t **)**a1;
  if (v2)
  {
    unint64_t v4 = (size_t **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        size_t v6 = v4 - 34;
        if (*(v4 - 9))
        {
          sub_397918((uint64_t)(v4 - 34));
          unint64_t v7 = sub_2DA84();
          sub_2DD20((uint64_t)v7, *(v4 - 9));
        }
        std::mutex::~mutex((std::mutex *)v4 - 1);
        sub_37F100((uint64_t *)v4 - 34);
        v4 -= 34;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_397918(uint64_t a1)
{
  unint64_t v13 = (uint64_t *)&v13;
  unint64_t v14 = &v13;
  uint64_t v15 = 0;
  unint64_t v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  for (uint64_t i = *(unsigned int **)(a1 + 8); i != (unsigned int *)a1; uint64_t i = *(unsigned int **)(a1 + 8))
  {
    uint64_t v4 = *(void *)(a1 + 160);
    if (!v4) {
      break;
    }
    *(void *)(a1 + 160) = v4 - *((void *)i + 9);
    sub_397ACC((int64x2_t *)(a1 + 88), i + 4);
    if (i != (unsigned int *)&v13)
    {
      uint64_t v5 = (uint64_t **)*((void *)i + 1);
      if (v5 != &v13)
      {
        uint64_t v6 = *(void *)i;
        *(void *)(v6 + 8) = v5;
        **((void **)i + 1) = v6;
        unint64_t v7 = v13;
        v13[1] = (uint64_t)i;
        *(void *)uint64_t i = v7;
        *((void *)i + 1) = &v13;
        --*(void *)(a1 + 16);
        unint64_t v13 = (uint64_t *)i;
        ++v15;
      }
    }
  }
  std::mutex::unlock(v2);
  if (v15)
  {
    unint64_t v8 = v13;
    uint64_t v9 = v14;
    unint64_t v10 = *v14;
    v10[1] = v13[1];
    *(void *)v8[1] = v10;
    uint64_t v15 = 0;
    if (v9 != &v13)
    {
      do
      {
        uint64_t v11 = (uint64_t **)v9[1];
        uint64_t v12 = (std::__shared_weak_count *)v9[8];
        if (v12)
        {
          if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        operator delete(v9);
        uint64_t v9 = v11;
      }
      while (v11 != &v13);
    }
  }
}

void sub_397A9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_37F1F0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_397AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::mutex::unlock(v10);
  sub_37F1F0(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_397ACC(int64x2_t *a1, unsigned int *a2)
{
  uint64_t v3 = a1[1].i64[1];
  uint64_t v2 = a1[2].i64[0];
  if (v3 == v2) {
    return 0;
  }
  unint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  unint64_t v6 = (v5 + (v4 << 6) + (v4 >> 2) + 2654435769u) ^ v4;
  uint64_t v7 = *((unsigned __int16 *)a2 + 4);
  unint64_t v8 = (v7 + (v6 << 6) + (v6 >> 2) + 2654435769u) ^ v6;
  uint64_t v9 = *((unsigned __int16 *)a2 + 5);
  unint64_t v10 = (v9 + (v8 << 6) + (v8 >> 2) + 2654435769u) ^ v8;
  uint64_t v11 = a2[3];
  uint64_t v12 = (int)a2[4];
  unint64_t v13 = (v11 + (v10 << 6) + (v10 >> 2) + 2654435769u) ^ v10;
  unint64_t v14 = (v12 + (v13 << 6) + (v13 >> 2) + 2654435769u) ^ v13;
  uint64_t v15 = (int)a2[5];
  uint64_t v16 = (int)a2[6];
  unint64_t v17 = (v15 + (v14 << 6) + (v14 >> 2) + 2654435769u) ^ v14;
  unint64_t v18 = (v16 + (v17 << 6) + (v17 >> 2) + 2654435769u) ^ v17;
  uint64_t v19 = *((unsigned __int8 *)a2 + 28);
  unint64_t v20 = (v19 + (v18 << 6) + (v18 >> 2) + 2654435769u) ^ v18;
  uint64_t v21 = *((unsigned __int16 *)a2 + 15);
  unint64_t v22 = (v21 + (v20 << 6) + (v20 >> 2) + 2654435769u) ^ v20;
  uint64_t v23 = a2[8];
  uint64_t v24 = a1->i64[0];
  unint64_t v25 = ((v23 + (v22 << 6) + (v22 >> 2) + 2654435769u) ^ v22) % (a1->i64[1] - a1->i64[0]);
  unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((v2 - v3) >> 4);
  while (1)
  {
    if (*(unsigned char *)(v24 + v25) != 1)
    {
      if (!*(unsigned char *)(v24 + v25)) {
        return 0;
      }
      unint64_t v27 = v3 + 48 * v25;
      if (v4 == *(_DWORD *)v27
        && v5 == *(_DWORD *)(v27 + 4)
        && *(unsigned __int16 *)(v27 + 8) == v7
        && *(unsigned __int16 *)(v27 + 10) == v9
        && v11 == *(_DWORD *)(v27 + 12)
        && v12 == *(_DWORD *)(v27 + 16)
        && v15 == *(_DWORD *)(v27 + 20)
        && v16 == *(_DWORD *)(v27 + 24)
        && v19 == *(unsigned __int8 *)(v27 + 28)
        && *(unsigned __int16 *)(v27 + 30) == v21
        && v23 == *(_DWORD *)(v27 + 32))
      {
        break;
      }
    }
    if (v25 == v26 - 1) {
      unint64_t v25 = 0;
    }
    else {
      ++v25;
    }
  }
  uint64_t v28 = 1;
  *(unsigned char *)(v24 + v25) = 1;
  uint64_t v29 = a1[3].i64[1] - 1;
  a1[3].i64[1] = v29;
  if (v26 > 8 * v29)
  {
    sub_397CCC(a1);
    return 1;
  }
  return v28;
}

void sub_397CCC(int64x2_t *a1)
{
  unint64_t v2 = 0;
  uint64_t v3 = a1[3].i64[1];
  do
    ++v2;
  while (3 * v3 > (unint64_t)(1 << v2));
  if (v2 >= 0x3B) {
    sub_2E00();
  }
  unint64_t v4 = (char *)operator new(48 << v2);
  uint64_t v5 = v4;
  size_t v6 = 1 << v2;
  unint64_t v7 = (unint64_t)&v4[48 * (1 << v2)];
  int v32 = v4;
  v33.i64[1] = v7;
  unint64_t v8 = v4;
  do
  {
    *(_OWORD *)unint64_t v8 = 0uLL;
    *((_OWORD *)v8 + 1) = 0uLL;
    *(void *)(v8 + 4) = -1;
    *((_DWORD *)v8 + 3) = -1;
    *((void *)v8 + 2) = 0x8000000080000000;
    *((_DWORD *)v8 + 6) = 0x7FFFFFFF;
    *((_WORD *)v8 + 15) = -1;
    *((_DWORD *)v8 + 8) = -1;
    *((void *)v8 + 5) = 0;
    v8 += 48;
  }
  while (v8 != (char *)v7);
  v33.i64[0] = (uint64_t)&v4[48 * (1 << v2)];
  uint64_t v9 = (char *)operator new(1 << v2);
  unint64_t v10 = (unint64_t)&v9[v6];
  unint64_t v30 = v9;
  v31.i64[1] = (uint64_t)&v9[v6];
  bzero(v9, v6);
  v31.i64[0] = (uint64_t)&v9[v6];
  a1[4].i64[0] = v3;
  uint64_t v12 = a1->i64[0];
  uint64_t v11 = (char *)a1->i64[1];
  if (v11 == (char *)a1->i64[0])
  {
    uint64_t v29 = (void *)a1[1].i64[1];
    a1[1].i64[1] = (uint64_t)v5;
    a1[2] = vdupq_n_s64(v7);
    a1->i64[0] = (uint64_t)v9;
    *(int64x2_t *)((char *)a1 + 8) = vdupq_n_s64(v10);
    if (v11) {
LABEL_18:
    }
      operator delete(v11);
  }
  else
  {
    unint64_t v13 = 0;
    do
    {
      if (*(unsigned char *)(v12 + v13) == 2)
      {
        uint64_t v17 = a1[1].i64[1];
        unint64_t v18 = (unsigned int *)(v17 + 48 * v13);
        unint64_t v19 = (v18[1] + 2654435769 + ((unint64_t)*v18 << 6) + ((unint64_t)*v18 >> 2)) ^ *v18;
        unint64_t v20 = (*((unsigned __int16 *)v18 + 4) + 2654435769 + (v19 << 6) + (v19 >> 2)) ^ v19;
        unint64_t v21 = (*((unsigned __int16 *)v18 + 5) + 2654435769 + (v20 << 6) + (v20 >> 2)) ^ v20;
        unint64_t v22 = (v18[3] + 2654435769 + (v21 << 6) + (v21 >> 2)) ^ v21;
        unint64_t v23 = ((int)v18[4] + 2654435769 + (v22 << 6) + (v22 >> 2)) ^ v22;
        unint64_t v24 = ((int)v18[5] + 2654435769 + (v23 << 6) + (v23 >> 2)) ^ v23;
        unint64_t v25 = ((int)v18[6] + 2654435769 + (v24 << 6) + (v24 >> 2)) ^ v24;
        unint64_t v26 = (*((unsigned __int8 *)v18 + 28) + 2654435769 + (v25 << 6) + (v25 >> 2)) ^ v25;
        unint64_t v27 = (*((unsigned __int16 *)v18 + 15) + 2654435769 + (v26 << 6) + (v26 >> 2)) ^ v26;
        unint64_t v28 = ((v18[8] + 2654435769 + (v27 << 6) + (v27 >> 2)) ^ v27) % (v10 - (unint64_t)v9);
        while (v9[v28])
        {
          if (v28 == v10 - (void)v9 - 1) {
            unint64_t v28 = 0;
          }
          else {
            ++v28;
          }
        }
        uint64_t v5 = v32;
        unint64_t v14 = &v32[48 * v28];
        long long v15 = *(_OWORD *)v18;
        long long v16 = *((_OWORD *)v18 + 1);
        *((_DWORD *)v14 + 8) = v18[8];
        *(_OWORD *)unint64_t v14 = v15;
        *((_OWORD *)v14 + 1) = v16;
        *((void *)v14 + 5) = *(void *)(v17 + 48 * v13 + 40);
        uint64_t v9 = v30;
        v30[v28] = 2;
        uint64_t v12 = a1->i64[0];
        uint64_t v11 = (char *)a1->i64[1];
      }
      ++v13;
    }
    while (v13 < (unint64_t)&v11[-v12]);
    uint64_t v11 = (char *)v12;
    uint64_t v29 = (void *)a1[1].i64[1];
    a1[1].i64[1] = (uint64_t)v5;
    a1[2] = v33;
    a1->i64[0] = (uint64_t)v9;
    *(int64x2_t *)((char *)a1 + 8) = v31;
    if (v12) {
      goto LABEL_18;
    }
  }
  if (v29)
  {
    operator delete(v29);
  }
}

void sub_397FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  operator delete(v13);
  _Unwind_Resume(a1);
}

char *sub_398020(uint64_t a1, int a2)
{
  uint64_t v3 = sub_369E00(a1, 1u, a2);
  if (v3)
  {
    unint64_t v4 = &v3[-*(int *)v3];
    if (*(unsigned __int16 *)v4 >= 0xDu)
    {
      uint64_t v5 = *((unsigned __int16 *)v4 + 6);
      if (v5) {
        return &v3[v5 + *(unsigned int *)&v3[v5]];
      }
    }
  }
  if (!a2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v9, "Root quad node of transit network layer does not contain info object");
    unint64_t v8 = (void *)sub_2F404((uint64_t)exception, &v9);
  }
  return 0;
}

void sub_3980E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_398110(uint64_t a1, int a2)
{
  uint64_t v3 = sub_398200(a1, 1u, a2);
  if (v3)
  {
    unint64_t v4 = &v3[-*(int *)v3];
    if (*(unsigned __int16 *)v4 >= 5u)
    {
      uint64_t v5 = *((unsigned __int16 *)v4 + 2);
      if (v5) {
        return &v3[v5 + *(unsigned int *)&v3[v5]];
      }
    }
  }
  if (!a2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v9, "Root quad node of transit routing layer does not contain info object");
    unint64_t v8 = (void *)sub_2F404((uint64_t)exception, &v9);
  }
  return 0;
}

void sub_3981D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_398200(uint64_t a1, unsigned int a2, int a3)
{
  int v25 = a3;
  unsigned int v26 = a2;
  v24[0] = &v25;
  v24[1] = (int *)&v26;
  unint64_t v4 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v4;
  uint64_t v5 = *(void *)a1;
  if (v5)
  {
    uint64_t v6 = a1 + 16;
    if (*(_DWORD *)(a1 + 880) == a2)
    {
      unsigned int v7 = 36;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 904) == a2)
    {
      unsigned int v7 = 37;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 928) == a2)
    {
      unsigned int v7 = 38;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 952) == a2)
    {
      unsigned int v7 = 39;
LABEL_10:
      ++*(void *)(a1 + 3864);
      uint64_t v8 = v6 + 24 * v7;
      *(void *)(v8 + 8) = v4;
      long long v9 = *(unsigned int **)(v8 + 16);
      if (v9) {
        return (char *)v9 + *v9;
      }
      goto LABEL_32;
    }
    unint64_t v11 = *(void *)(a1 + 936);
    unint64_t v12 = *(void *)(a1 + 912);
    unint64_t v13 = *(void *)(a1 + 888);
    BOOL v14 = v13 >= v4;
    if (v13 < v4) {
      unint64_t v4 = *(void *)(a1 + 888);
    }
    int v15 = 36;
    if (v14) {
      int v15 = 0;
    }
    BOOL v16 = v12 >= v4;
    if (v12 < v4) {
      unint64_t v4 = *(void *)(a1 + 912);
    }
    int v17 = 37;
    if (v16) {
      int v17 = v15;
    }
    if (v11 >= v4) {
      unint64_t v18 = v4;
    }
    else {
      unint64_t v18 = *(void *)(a1 + 936);
    }
    unint64_t v19 = *(void *)(a1 + 960);
    if (v11 >= v4) {
      int v20 = v17;
    }
    else {
      int v20 = 38;
    }
    unint64_t v21 = (unsigned int *)sub_2AB884(v5, 9, a2, 1);
    unsigned int v22 = 39;
    if (v19 >= v18) {
      unsigned int v22 = v20;
    }
    uint64_t v23 = v6 + 24 * v22;
    *(_DWORD *)uint64_t v23 = v26;
    *(void *)(v23 + 8) = *(void *)(a1 + 3856);
    *(void *)(v23 + 16) = v21;
    if (v21) {
      return (char *)v21 + *v21;
    }
  }
LABEL_32:
  sub_398390(v24);
  return 0;
}

uint64_t sub_398390(int **a1)
{
  int v1 = **a1;
  if (v1 != 1)
  {
    if (!v1)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
      std::to_string(&v15, *a1[1]);
      uint64_t v5 = std::string::insert(&v15, 0, "Failed to acquire Flatbuffer data in quad node ");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v16.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      unsigned int v7 = std::string::append(&v16, " on layer ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      long long v9 = sub_736EC(9u);
      unint64_t v10 = std::string::append(&v17, v9);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v19 = v10->__r_.__value_.__r.__words[2];
      long long v18 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unint64_t v12 = (void *)sub_2F404((uint64_t)exception, &v18);
    }
    unint64_t v13 = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v18, "Unknown data access error policy");
    BOOL v14 = (void *)sub_2F404((uint64_t)v13, &v18);
  }
  return 0;
}

void sub_3984E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_6;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_6:
  operator delete(__p);
  goto LABEL_9;
}

void sub_3985BC()
{
}

void sub_398BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  sub_395FB0(v21);
  _Unwind_Resume(a1);
}

char *sub_398CDC(char **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    long long v9 = (char *)operator new(24 * v8);
  }
  else
  {
    long long v9 = 0;
  }
  unint64_t v10 = &v9[24 * v5];
  std::string v16 = v10;
  std::string v17 = v10;
  long long v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(v10, *(void **)a2, *(void *)(a2 + 8));
    uint64_t v3 = *a1;
    unint64_t v4 = a1[1];
    unint64_t v10 = v16;
    long long v11 = v17 + 24;
    if (v4 == *a1)
    {
LABEL_17:
      unint64_t v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)unint64_t v10 = *(_OWORD *)a2;
    *((void *)v10 + 2) = *(void *)(a2 + 16);
    long long v11 = v10 + 24;
    if (v4 == v3) {
      goto LABEL_17;
    }
  }
  do
  {
    long long v12 = *(_OWORD *)(v4 - 24);
    *((void *)v10 - 1) = *((void *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v12;
    v10 -= 24;
    *((void *)v4 - 2) = 0;
    *((void *)v4 - 1) = 0;
    *((void *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  unint64_t v13 = *a1;
  uint64_t v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    BOOL v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0) {
        operator delete(*v14);
      }
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    uint64_t v3 = v13;
  }
  if (v3) {
    operator delete(v3);
  }
  return v11;
}

void sub_398EA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1D918((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_398EB4(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = (char *)a1[1] - (char *)*a1;
  uint64_t v4 = v3 >> 3;
  unint64_t v5 = (v3 >> 3) + 1;
  if (v5 >> 61) {
    sub_2E00();
  }
  uint64_t v7 = (char *)a1[2] - (char *)*a1;
  if (v7 >> 2 > v5) {
    unint64_t v5 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 >> 61) {
      sub_188D718();
    }
    long long v9 = (char *)operator new(8 * v8);
  }
  else
  {
    long long v9 = 0;
  }
  unint64_t v10 = (uint64_t *)&v9[8 * v4];
  long long v11 = (uint64_t *)&v9[8 * v8];
  uint64_t v12 = *a2;
  *a2 = 0;
  *unint64_t v10 = v12;
  unint64_t v13 = v10 + 1;
  std::string v15 = *a1;
  BOOL v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (!v14) {
      return v13;
    }
    goto LABEL_23;
  }
  unint64_t v16 = (char *)v14 - (char *)*a1 - 8;
  if (v16 < 0x78
    || (uint64_t *)((char *)v14 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8) < v10
    && &v9[v3 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v14)
  {
    goto LABEL_31;
  }
  uint64_t v17 = (v16 >> 3) + 1;
  uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  std::string::size_type v19 = &v14[v18 / 0xFFFFFFFFFFFFFFF8];
  unint64_t v10 = (uint64_t *)((char *)v10 - v18);
  int v20 = &v9[8 * v4 - 16];
  unint64_t v21 = v14 - 2;
  uint64_t v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v24 = *((_OWORD *)v21 - 1);
    long long v23 = *(_OWORD *)v21;
    *((_OWORD *)v21 - 1) = 0uLL;
    *(_OWORD *)unint64_t v21 = 0uLL;
    *((_OWORD *)v20 - 1) = v24;
    *(_OWORD *)int v20 = v23;
    v20 -= 32;
    v21 -= 4;
    v22 -= 4;
  }
  while (v22);
  BOOL v14 = v19;
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_31:
    do
    {
      uint64_t v25 = *--v14;
      *BOOL v14 = 0;
      *--unint64_t v10 = v25;
    }
    while (v14 != v15);
  }
  unsigned int v26 = *a1;
  BOOL v14 = a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  if (v14 != v26)
  {
    do
      BOOL v14 = sub_395FB0(v14 - 1);
    while (v14 != v26);
    BOOL v14 = v26;
  }
  if (v14) {
LABEL_23:
  }
    operator delete(v14);
  return v13;
}

void sub_399054(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_2438E28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_399074(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_2438E28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_3990C8(uint64_t a1)
{
  return sub_31262C(a1 + 24);
}

uint64_t sub_3990D4(uint64_t a1)
{
  *(_OWORD *)a1 = xmmword_20E2870;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  sub_399280((unint64_t *)a1, 0x800uLL, 0, 0x400uLL, 0);
  *(_OWORD *)(a1 + 40) = xmmword_20E2870;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_399280((unint64_t *)(a1 + 40), 0x800uLL, 0, 0x400uLL, 0);
  *(_OWORD *)(a1 + 80) = xmmword_20E2870;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  sub_39A4EC(a1 + 80, 0x800uLL, 0, 0x400uLL, 0);
  *(_OWORD *)(a1 + 120) = xmmword_20E2870;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  sub_39A4EC(a1 + 120, 0x800uLL, 0, 0x400uLL, 0);
  return a1;
}

void sub_3991CC(_Unwind_Exception *a1)
{
  unint64_t v5 = v3;
  if (*v5)
  {
    uint64_t v7 = (void **)v5;
    sub_396630((uint64_t)v5, *v5);
    operator delete(*v7);
  }
  sub_396594(v4);
  sub_3965D4(v2);
  sub_3965D4(v1);
  _Unwind_Resume(a1);
}

void sub_399238(_Unwind_Exception *a1)
{
  if (*v2) {
    sub_20A7A94();
  }
  sub_3965D4(v1);
  _Unwind_Resume(a1);
}

void sub_399260(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_20A7AFC();
  }
  _Unwind_Resume(exception_object);
}

void sub_399280(unint64_t *a1, unint64_t a2, char a3, unint64_t a4, uint64_t a5)
{
  char v33 = a3;
  a1[1] = a2;
  unsigned int v9 = std::thread::hardware_concurrency();
  uint64_t v10 = 3;
  if (a5) {
    uint64_t v10 = a5;
  }
  unint64_t v11 = v10 * v9;
  if (v11 <= 1) {
    unint64_t v11 = 1;
  }
  double v12 = (double)a4 * (double)v11;
  if (v12 >= 0.0)
  {
    if (v12 >= 4.50359963e15) {
      goto LABEL_13;
    }
    uint64_t v13 = (uint64_t)(v12 + v12) + 1;
  }
  else
  {
    if (v12 <= -4.50359963e15) {
      goto LABEL_13;
    }
    uint64_t v13 = (uint64_t)(v12 + v12);
    if (v13 >= 1) {
      --v13;
    }
  }
  double v12 = (double)(v13 >> 1);
LABEL_13:
  unint64_t v14 = (unint64_t)v12;
  BOOL v18 = (unint64_t)v12 > 1;
  double v15 = (double)a2;
  if (!v18) {
    unint64_t v14 = 1;
  }
  if (a4 <= 1) {
    unint64_t v16 = 1;
  }
  else {
    unint64_t v16 = a4;
  }
  unint64_t v17 = (unint64_t)(v15 / (double)v16);
  if (v17 <= 1) {
    unint64_t v17 = 1;
  }
  BOOL v18 = v14 > a2 || v11 > v17;
  if (v18) {
    unint64_t v11 = v17;
  }
  *a1 = v11;
  double v19 = v15 / (double)v11;
  if (v19 >= 0.0)
  {
    if (v19 >= 4.50359963e15) {
      goto LABEL_33;
    }
    uint64_t v20 = (uint64_t)(v19 + v19) + 1;
  }
  else
  {
    uint64_t v20 = (uint64_t)(v19 + v19);
    if (v20 >= 1) {
      --v20;
    }
  }
  double v19 = (double)(v20 >> 1);
LABEL_33:
  if ((unint64_t)v19 > a4) {
    a4 = (unint64_t)v19;
  }
  unint64_t v32 = a4;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v30);
    sub_188FC78(v30, (uint64_t)"PartitionedLRUCache: creating ", 30);
    unint64_t v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)" partitions, ", 13);
    uint64_t v22 = (void *)std::ostream::operator<<();
    sub_188FC78(v22, (uint64_t)" bytes each", 11);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v29 < 0) {
      operator delete(__p);
    }
    if (v31 < 0) {
      operator delete((void *)v30[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  long long v24 = (uint64_t *)a1[2];
  for (uint64_t i = (uint64_t *)a1[3]; i != v24; uint64_t i = sub_3966E8(i - 25))
    ;
  a1[3] = (unint64_t)v24;
  sub_399654(a1 + 2, *a1);
  if (*a1)
  {
    unint64_t v25 = 0;
    unsigned int v26 = (char *)a1[3];
    do
    {
      while ((unint64_t)v26 >= a1[4])
      {
        unsigned int v26 = sub_39A31C(a1 + 2, (uint64_t *)&v32);
        a1[3] = (unint64_t)v26;
        if (++v25 >= *a1) {
          return;
        }
      }
      uint64_t v27 = v32;
      *(void *)unsigned int v26 = v26;
      *((void *)v26 + 1) = v26;
      *((_OWORD *)v26 + 1) = xmmword_20E2350;
      *((_OWORD *)v26 + 2) = 0u;
      *((_OWORD *)v26 + 3) = 0u;
      *((_OWORD *)v26 + 4) = 0u;
      *((_OWORD *)v26 + 5) = 0u;
      *((_OWORD *)v26 + 6) = 0u;
      *((_OWORD *)v26 + 7) = 0u;
      *((void *)v26 + 16) = 0;
      *((void *)v26 + 18) = 0;
      *((void *)v26 + 19) = 0;
      *((void *)v26 + 20) = 0;
      *((void *)v26 + 21) = v27;
      *((void *)v26 + 23) = 0;
      *((void *)v26 + 24) = 0;
      *((void *)v26 + 22) = 0;
      v26 += 200;
      a1[3] = (unint64_t)v26;
      ++v25;
    }
    while (v25 < *a1);
  }
}

void sub_399608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a17);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_399654(void *a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (0x8F5C28F5C28F5C29 * ((uint64_t)(a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0x147AE147AE147AFLL) {
      sub_2E00();
    }
    uint64_t v4 = a1[1];
    uint64_t v5 = 200 * a2;
    unint64_t v6 = (char *)operator new(200 * a2);
    uint64_t v7 = 0;
    unint64_t v8 = &v6[v4 - (void)v2];
    *(void *)&long long v11 = v8;
    *((void *)&v11 + 1) = &v6[v5];
    while ((uint64_t *)(v4 + v7) != v2)
    {
      v7 -= 200;
      sub_3997E8((uint64_t)&v8[v7], v7 + v4);
    }
    uint64_t v10 = (uint64_t *)*a1;
    unsigned int v9 = (uint64_t *)a1[1];
    *a1 = &v8[v7];
    for (*(_OWORD *)(a1 + 1) = v11; v9 != v10; unsigned int v9 = sub_3966E8(v9 - 25))
      ;
    if (v10) {
      operator delete(v10);
    }
  }
}

uint64_t sub_399794(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 200;
    sub_3966E8((uint64_t *)(i - 200));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_3997E8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a1;
  *(void *)(a1 + 8) = a1;
  uint64_t v4 = (std::mutex *)(a2 + 24);
  *(_OWORD *)(a1 + 16) = xmmword_20E2350;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 192) = 0;
  std::mutex::lock((std::mutex *)(a2 + 24));
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  long long v5 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = v5;
  for (uint64_t i = a2;
        ;
        sub_3998D8((uint64_t *)a1, (void *)(i + 16), (void (__cdecl ***)(std::stringbuf *__hidden))(i + 24), *(void *)(i + 40), 0))
  {
    uint64_t i = *(void *)(i + 8);
    if (i == a2) {
      break;
    }
  }
  std::mutex::unlock(v4);
  return a1;
}

void sub_3998A0(_Unwind_Exception *a1)
{
  sub_3310C(v1 + 88);
  std::mutex::~mutex((std::mutex *)(v1 + 24));
  sub_3967D8((uint64_t *)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_3998D8(uint64_t *a1, void *a2, void (__cdecl ***a3)(std::stringbuf *__hidden this), unint64_t a4, int a5)
{
  unint64_t v50 = a4;
  long long v5 = (unint64_t *)(a1 + 21);
  if (a1[21] < a4)
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)&v44);
      unint64_t v6 = sub_188FC78(&v44, (uint64_t)"LRUCache: item is too large (", 29);
      uint64_t v7 = (void *)sub_38EC58((uint64_t)v6, &v50);
      unint64_t v8 = sub_188FC78(v7, (uint64_t)" > ", 3);
      unsigned int v9 = (void *)sub_38EC58((uint64_t)v8, v5);
      sub_188FC78(v9, (uint64_t)")", 1);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if (SHIBYTE(v43) < 0) {
        operator delete(__p);
      }
      if (v49 < 0) {
        operator delete(v48);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    return 0;
  }
  std::string __p = &__p;
  p_p = &__p;
  uint64_t v43 = 0;
  unint64_t v16 = (std::mutex *)(a1 + 3);
  std::mutex::lock((std::mutex *)(a1 + 3));
  uint64_t v18 = a1[14];
  uint64_t v17 = a1[15];
  if (v18 == v17)
  {
LABEL_22:
    ++a1[22];
    uint64_t v27 = (uint64_t *)a1[1];
    if (v27 != a1)
    {
      unint64_t v28 = a1[21] - a4;
      do
      {
        if (a1[20] <= v28) {
          break;
        }
        sub_399D9C(a1, v27, (uint64_t *)&__p);
        uint64_t v27 = (uint64_t *)a1[1];
      }
      while (v27 != a1);
    }
    uint64_t v29 = *a2;
    char v31 = *a3;
    unint64_t v30 = a3[1];
    uint64_t v44 = *a2;
    uint64_t v45 = v31;
    uint64_t v46 = v30;
    if (v30) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v30 + 1, 1uLL, memory_order_relaxed);
    }
    unint64_t v47 = a4;
    unint64_t v32 = operator new(0x30uLL);
    v32[2] = v29;
    v32[3] = v31;
    v32[4] = v30;
    v32[5] = a4;
    uint64_t v33 = *a1;
    *(void *)(v33 + 8) = v32;
    *a1 = (uint64_t)v32;
    void *v32 = v33;
    v32[1] = a1;
    ++a1[2];
    uint64_t v40 = v32;
    sub_399EF0(a1 + 11, a2, &v40);
    a1[20] += a4;
    uint64_t v10 = 1;
    std::mutex::unlock(v16);
    if (!v43) {
      return v10;
    }
LABEL_29:
    double v34 = (void **)__p;
    char v35 = p_p;
    unint64_t v36 = *p_p;
    v36[1] = *((void *)__p + 1);
    *v34[1] = v36;
    uint64_t v43 = 0;
    if (v35 != &__p)
    {
      do
      {
        char v37 = (void **)v35[1];
        unint64_t v38 = (std::__shared_weak_count *)v35[4];
        if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
        operator delete(v35);
        char v35 = v37;
      }
      while (v37 != &__p);
    }
    return v10;
  }
  unint64_t v19 = __ROR8__(*a2, 32);
  unint64_t v20 = 0xC4CEB9FE1A85EC53
      * ((0xFF51AFD7ED558CCDLL * (v19 ^ (v19 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v19 ^ (v19 >> 33))) >> 33));
  unint64_t v21 = v20 ^ (v20 >> 33);
  uint64_t v22 = a1[11];
  unint64_t v23 = a1[12] - v22;
  unint64_t v24 = v21 % v23;
  uint64_t v25 = v23 - 1;
  while (*(unsigned char *)(v22 + v24) != 2)
  {
    if (!*(unsigned char *)(v22 + v24)) {
      goto LABEL_22;
    }
LABEL_12:
    if (v24 == v25) {
      unint64_t v24 = 0;
    }
    else {
      ++v24;
    }
  }
  uint64_t v26 = v18 + 16 * v24;
  if (*(void *)v26 != *a2) {
    goto LABEL_12;
  }
  if (v26 == v17) {
    goto LABEL_22;
  }
  if (a5)
  {
    sub_399D9C(a1, *(uint64_t **)(v26 + 8), (uint64_t *)&__p);
    goto LABEL_22;
  }
  uint64_t v10 = 0;
  std::mutex::unlock(v16);
  if (v43) {
    goto LABEL_29;
  }
  return v10;
}

void sub_399CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::mutex::unlock(v16);
  sub_3967D8((uint64_t *)&__p);
  _Unwind_Resume(a1);
}

void sub_399D9C(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[20] -= a2[5];
  uint64_t v6 = a1[14];
  uint64_t v7 = a1[15];
  if (v6 != v7)
  {
    uint64_t v8 = (uint64_t)(a1 + 11);
    uint64_t v9 = a2[2];
    unint64_t v10 = __ROR8__(v9, 32);
    unint64_t v11 = 0xC4CEB9FE1A85EC53
        * ((0xFF51AFD7ED558CCDLL * (v10 ^ (v10 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v10 ^ (v10 >> 33))) >> 33));
    unint64_t v12 = v11 ^ (v11 >> 33);
    uint64_t v13 = a1[11];
    unint64_t v14 = v12 % (a1[12] - v13);
    unint64_t v15 = (v7 - v6) >> 4;
    while (1)
    {
      if (*(unsigned char *)(v13 + v14) != 1)
      {
        if (!*(unsigned char *)(v13 + v14)) {
          goto LABEL_11;
        }
        if (*(void *)(v6 + 16 * v14) == v9) {
          break;
        }
      }
      if (v14 == v15 - 1) {
        unint64_t v14 = 0;
      }
      else {
        ++v14;
      }
    }
    *(unsigned char *)(v13 + v14) = 1;
    uint64_t v16 = a1[18] - 1;
    a1[18] = v16;
    if (v15 > 8 * v16) {
      sub_39A0AC(v8);
    }
  }
LABEL_11:
  if (a2 != a3)
  {
    uint64_t v17 = (uint64_t *)a2[1];
    if (v17 != a3)
    {
      uint64_t v18 = *a2;
      *(void *)(v18 + 8) = v17;
      *(void *)a2[1] = v18;
      uint64_t v19 = *a3;
      *(void *)(v19 + 8) = a2;
      *a2 = v19;
      *a3 = (uint64_t)a2;
      a2[1] = (uint64_t)a3;
      --a1[2];
      ++a3[2];
    }
  }
}

uint64_t sub_399EF0(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = (char *)a1[3];
  uint64_t v7 = (char *)a1[4];
  if (v6 == v7) {
    goto LABEL_11;
  }
  unint64_t v8 = __ROR8__(*a2, 32);
  unint64_t v9 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) >> 33));
  unint64_t v10 = a1[1] - *a1;
  unint64_t v11 = (v9 ^ (v9 >> 33)) % v10;
  uint64_t v12 = v10 - 1;
  while (*(unsigned char *)(*a1 + v11) != 2)
  {
    if (!*(unsigned char *)(*a1 + v11)) {
      goto LABEL_11;
    }
LABEL_4:
    if (v11 == v12) {
      unint64_t v11 = 0;
    }
    else {
      ++v11;
    }
  }
  uint64_t v13 = &v6[16 * v11];
  if (*(void *)v13 != *a2) {
    goto LABEL_4;
  }
  if (v13 != v7) {
    return 0;
  }
LABEL_11:
  if (2 * a1[8] + 2 > (unint64_t)((v7 - v6) >> 4)) {
    sub_39A0AC((uint64_t)a1);
  }
  unint64_t v15 = __ROR8__(*a2, 32);
  unint64_t v16 = 0xC4CEB9FE1A85EC53
      * ((0xFF51AFD7ED558CCDLL * (v15 ^ (v15 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v15 ^ (v15 >> 33))) >> 33));
  unint64_t v17 = v16 ^ (v16 >> 33);
  uint64_t v18 = *a1;
  unint64_t v19 = v17 % (a1[1] - *a1);
  int v20 = *(unsigned __int8 *)(*a1 + v19);
  if (*(unsigned char *)(*a1 + v19))
  {
    while (v20 != 1)
    {
      if (v19 == ((a1[4] - a1[3]) >> 4) - 1) {
        unint64_t v19 = 0;
      }
      else {
        ++v19;
      }
      int v20 = *(unsigned __int8 *)(v18 + v19);
      if (!*(unsigned char *)(v18 + v19)) {
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    ++a1[8];
  }
  uint64_t v21 = a1[7] + 1;
  *(unsigned char *)(v18 + v19) = 2;
  a1[7] = v21;
  uint64_t v22 = 16 * v19;
  *(void *)(a1[3] + v22) = *a2;
  *(void *)(a1[3] + v22 + 8) = *a3;
  return 1;
}

void sub_39A0AC(uint64_t a1)
{
  unint64_t v2 = 0;
  uint64_t v3 = *(void *)(a1 + 56);
  do
    ++v2;
  while (3 * v3 > (unint64_t)(1 << v2));
  if (v2 >= 0x3C) {
    sub_2E00();
  }
  uint64_t v4 = operator new(16 << v2);
  long long v5 = v4;
  size_t v6 = 1 << v2;
  uint64_t v7 = &v4[2 * (1 << v2)];
  unint64_t v8 = v4;
  if (16 << v2 == 16) {
    goto LABEL_31;
  }
  unint64_t v9 = ((unint64_t)((16 << v2) - 16) >> 4) + 1;
  unint64_t v8 = &v4[2 * (v9 & 0x1FFFFFFFFFFFFFFELL)];
  unint64_t v10 = v4 + 2;
  uint64_t v11 = v9 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v10 - 2) = 0xFFFFFFFF00000000;
    *unint64_t v10 = 0xFFFFFFFF00000000;
    *(v10 - 1) = 0;
    v10[1] = 0;
    v10 += 4;
    v11 -= 2;
  }
  while (v11);
  if (v9 != (v9 & 0x1FFFFFFFFFFFFFFELL))
  {
LABEL_31:
    do
    {
      *unint64_t v8 = 0xFFFFFFFF00000000;
      v8[1] = 0;
      v8 += 2;
    }
    while (v8 != v7);
  }
  uint64_t v12 = (char *)operator new(1 << v2);
  uint64_t v13 = &v12[v6];
  bzero(v12, v6);
  *(void *)(a1 + 64) = v3;
  unint64_t v14 = *(unsigned char **)a1;
  uint64_t v15 = *(void *)(a1 + 8);
  unint64_t v16 = v15 - *(void *)a1;
  if (v15 == *(void *)a1)
  {
    unint64_t v14 = *(unsigned char **)(a1 + 8);
  }
  else
  {
    unint64_t v17 = 0;
    size_t v18 = v6 - 1;
    do
    {
      if (v14[v17] == 2)
      {
        uint64_t v20 = *(void *)(a1 + 24);
        unint64_t v21 = __ROR8__(*(void *)(v20 + 16 * v17), 32);
        unint64_t v22 = 0xC4CEB9FE1A85EC53
            * ((0xFF51AFD7ED558CCDLL * (v21 ^ (v21 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v21 ^ (v21 >> 33))) >> 33));
        unint64_t v23 = (v22 ^ (v22 >> 33)) & v18;
        while (v12[v23])
        {
          if (v23 == v18) {
            unint64_t v23 = 0;
          }
          else {
            ++v23;
          }
        }
        unint64_t v19 = &v5[2 * v23];
        void *v19 = *(void *)(v20 + 16 * v17);
        v19[1] = *(void *)(v20 + 16 * v17 + 8);
        v12[v23] = 2;
      }
      ++v17;
    }
    while (v17 < v16);
  }
  unint64_t v24 = *(void **)(a1 + 24);
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v7;
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v13;
  *(void *)(a1 + 16) = v13;
  *(void *)(a1 + 24) = v5;
  if (v14) {
    operator delete(v14);
  }
  if (v24)
  {
    operator delete(v24);
  }
}

void sub_39A2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  operator delete(v13);
  _Unwind_Resume(a1);
}

char *sub_39A31C(void *a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t *)*a1;
  uint64_t v3 = a1[1];
  unint64_t v5 = 0x8F5C28F5C28F5C29 * ((v3 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x147AE147AE147AELL) {
    sub_2E00();
  }
  if (0x1EB851EB851EB852 * ((uint64_t)(a1[2] - (void)v4) >> 3) > v6) {
    unint64_t v6 = 0x1EB851EB851EB852 * ((uint64_t)(a1[2] - (void)v4) >> 3);
  }
  if (0x8F5C28F5C28F5C29 * ((uint64_t)(a1[2] - (void)v4) >> 3) >= 0xA3D70A3D70A3D7) {
    unint64_t v8 = 0x147AE147AE147AELL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0x147AE147AE147AELL) {
      sub_188D718();
    }
    unint64_t v9 = (char *)operator new(200 * v8);
  }
  else
  {
    unint64_t v9 = 0;
  }
  uint64_t v10 = 0;
  uint64_t v11 = &v9[200 * v5];
  uint64_t v12 = *a2;
  *(void *)uint64_t v11 = v11;
  *((void *)v11 + 1) = v11;
  *((_OWORD *)v11 + 1) = xmmword_20E2350;
  *((_OWORD *)v11 + 2) = 0u;
  *((_OWORD *)v11 + 3) = 0u;
  *((_OWORD *)v11 + 4) = 0u;
  *((_OWORD *)v11 + 5) = 0u;
  *((_OWORD *)v11 + 6) = 0u;
  *((_OWORD *)v11 + 7) = 0u;
  *((void *)v11 + 16) = 0;
  *((void *)v11 + 18) = 0;
  *((void *)v11 + 19) = 0;
  *((void *)v11 + 20) = 0;
  *((void *)v11 + 21) = v12;
  *((void *)v11 + 22) = 0;
  *((void *)v11 + 23) = 0;
  *((void *)v11 + 24) = 0;
  *(void *)&long long v16 = v11 + 200;
  *((void *)&v16 + 1) = &v9[200 * v8];
  while ((uint64_t *)(v3 + v10) != v4)
  {
    v10 -= 200;
    sub_3997E8((uint64_t)&v11[v10], v10 + v3);
  }
  unint64_t v14 = (uint64_t *)*a1;
  uint64_t v13 = (uint64_t *)a1[1];
  *a1 = &v11[v10];
  for (*(_OWORD *)(a1 + 1) = v16; v13 != v14; uint64_t v13 = sub_3966E8(v13 - 25))
    ;
  if (v14) {
    operator delete(v14);
  }
  return v11 + 200;
}

void sub_39A4EC(uint64_t a1, unint64_t a2, char a3, unint64_t a4, uint64_t a5)
{
  char v31 = a3;
  *(void *)(a1 + 8) = a2;
  unsigned int v9 = std::thread::hardware_concurrency();
  uint64_t v10 = 3;
  if (a5) {
    uint64_t v10 = a5;
  }
  unint64_t v11 = v10 * v9;
  if (v11 <= 1) {
    unint64_t v11 = 1;
  }
  double v12 = (double)a4 * (double)v11;
  if (v12 >= 0.0)
  {
    if (v12 >= 4.50359963e15) {
      goto LABEL_13;
    }
    uint64_t v13 = (uint64_t)(v12 + v12) + 1;
  }
  else
  {
    if (v12 <= -4.50359963e15) {
      goto LABEL_13;
    }
    uint64_t v13 = (uint64_t)(v12 + v12);
    if (v13 >= 1) {
      --v13;
    }
  }
  double v12 = (double)(v13 >> 1);
LABEL_13:
  unint64_t v14 = (unint64_t)v12;
  BOOL v18 = (unint64_t)v12 > 1;
  double v15 = (double)a2;
  if (!v18) {
    unint64_t v14 = 1;
  }
  if (a4 <= 1) {
    unint64_t v16 = 1;
  }
  else {
    unint64_t v16 = a4;
  }
  unint64_t v17 = (unint64_t)(v15 / (double)v16);
  if (v17 <= 1) {
    unint64_t v17 = 1;
  }
  BOOL v18 = v14 > a2 || v11 > v17;
  if (v18) {
    unint64_t v11 = v17;
  }
  *(void *)a1 = v11;
  double v19 = v15 / (double)v11;
  if (v19 >= 0.0)
  {
    if (v19 >= 4.50359963e15) {
      goto LABEL_33;
    }
    uint64_t v20 = (uint64_t)(v19 + v19) + 1;
  }
  else
  {
    uint64_t v20 = (uint64_t)(v19 + v19);
    if (v20 >= 1) {
      --v20;
    }
  }
  double v19 = (double)(v20 >> 1);
LABEL_33:
  if ((unint64_t)v19 > a4) {
    a4 = (unint64_t)v19;
  }
  unint64_t v30 = a4;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v28);
    sub_188FC78(v28, (uint64_t)"PartitionedLRUCache: creating ", 30);
    unint64_t v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)" partitions, ", 13);
    unint64_t v22 = (void *)std::ostream::operator<<();
    sub_188FC78(v22, (uint64_t)" bytes each", 11);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v27 < 0) {
      operator delete(__p);
    }
    if (v29 < 0) {
      operator delete((void *)v28[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  sub_396630(a1 + 16, *(uint64_t **)(a1 + 16));
  sub_39A8AC(a1 + 16, *(void *)a1);
  if (*(void *)a1)
  {
    unint64_t v23 = 0;
    unint64_t v24 = *(char **)(a1 + 24);
    do
    {
      while ((unint64_t)v24 >= *(void *)(a1 + 32))
      {
        unint64_t v24 = sub_39B6E4((void **)(a1 + 16), (uint64_t *)&v30);
        *(void *)(a1 + 24) = v24;
        if (++v23 >= *(void *)a1) {
          return;
        }
      }
      uint64_t v25 = v30;
      *(void *)unint64_t v24 = v24;
      *((void *)v24 + 1) = v24;
      *((_OWORD *)v24 + 1) = xmmword_20E2350;
      *((_OWORD *)v24 + 2) = 0u;
      *((_OWORD *)v24 + 3) = 0u;
      *((_OWORD *)v24 + 4) = 0u;
      *((_OWORD *)v24 + 5) = 0u;
      *((_OWORD *)v24 + 6) = 0u;
      *((_OWORD *)v24 + 7) = 0u;
      *((void *)v24 + 16) = 0;
      *((void *)v24 + 18) = 0;
      *((void *)v24 + 19) = 0;
      *((void *)v24 + 20) = 0;
      *((void *)v24 + 21) = v25;
      *((void *)v24 + 23) = 0;
      *((void *)v24 + 24) = 0;
      *((void *)v24 + 22) = 0;
      v24 += 200;
      *(void *)(a1 + 24) = v24;
      ++v23;
    }
    while (v23 < *(void *)a1);
  }
}

void sub_39A860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a17);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_39A8AC(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(char **)a1;
  if (0x8F5C28F5C28F5C29 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a2)
  {
    if (a2 >= 0x147AE147AE147AFLL) {
      sub_2E00();
    }
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = 200 * a2;
    unint64_t v6 = (char *)operator new(200 * a2);
    uint64_t v7 = &v6[v4 - (void)v2];
    unint64_t v17 = v7;
    double v19 = &v6[v5];
    uint64_t v20 = v7;
    if ((char *)v4 == v2)
    {
      *(void *)a1 = v7;
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = &v6[v5];
    }
    else
    {
      unint64_t v8 = &v6[v4 - (void)v2];
      do
      {
        v4 -= 200;
        sub_39AAE8((uint64_t)(v8 - 200), v4);
        unint64_t v8 = v20 - 200;
        v20 -= 200;
      }
      while ((char *)v4 != v2);
      unsigned int v9 = *(char **)a1;
      unint64_t v2 = *(char **)(a1 + 8);
      *(void *)a1 = v8;
      *(void *)(a1 + 8) = v17;
      *(void *)(a1 + 16) = v19;
      if (v2 != v9)
      {
        do
        {
          uint64_t v10 = (uint64_t *)(v2 - 200);
          BOOL v18 = v2 - 200;
          unint64_t v11 = (void *)*((void *)v2 - 11);
          if (v11)
          {
            *((void *)v2 - 10) = v11;
            operator delete(v11);
          }
          double v12 = (void *)*((void *)v2 - 14);
          if (v12)
          {
            *((void *)v2 - 13) = v12;
            operator delete(v12);
          }
          std::mutex::~mutex((std::mutex *)(v2 - 176));
          if (*((void *)v2 - 23))
          {
            uint64_t v14 = *((void *)v2 - 25);
            uint64_t v13 = (uint64_t *)*((void *)v2 - 24);
            uint64_t v15 = *v13;
            *(void *)(v15 + 8) = *(void *)(v14 + 8);
            **(void **)(v14 + 8) = v15;
            *((void *)v2 - 23) = 0;
            if (v13 != v10)
            {
              do
              {
                unint64_t v16 = (uint64_t *)v13[1];
                operator delete(v13);
                uint64_t v13 = v16;
              }
              while (v16 != v10);
            }
          }
          unint64_t v2 = v18;
        }
        while (v18 != v9);
        unint64_t v2 = v9;
      }
    }
    if (v2) {
      operator delete(v2);
    }
  }
}

void sub_39AA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (!a18) {
    sub_39B57C((uint64_t)&a15);
  }
  sub_39AAB0((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_39AAB0(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_39AAE8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a1;
  *(void *)(a1 + 8) = a1;
  uint64_t v4 = (std::mutex *)(a2 + 24);
  *(_OWORD *)(a1 + 16) = xmmword_20E2350;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 192) = 0;
  std::mutex::lock((std::mutex *)(a2 + 24));
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  long long v5 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = v5;
  for (uint64_t i = (void *)a2; ; sub_39ABD8((uint64_t *)a1, i + 2, (uint64_t)(i + 2), i[3], 0))
  {
    uint64_t i = (void *)i[1];
    if (i == (void *)a2) {
      break;
    }
  }
  std::mutex::unlock(v4);
  return a1;
}

void sub_39ABA0(_Unwind_Exception *a1)
{
  sub_3310C(v1 + 88);
  std::mutex::~mutex((std::mutex *)(v1 + 24));
  sub_2210FC((uint64_t *)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_39ABD8(uint64_t *a1, void *a2, uint64_t a3, unint64_t a4, int a5)
{
  unint64_t v43 = a4;
  long long v5 = (unint64_t *)(a1 + 21);
  if (a1[21] < a4)
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)&v38);
      unint64_t v6 = sub_188FC78(&v38, (uint64_t)"LRUCache: item is too large (", 29);
      uint64_t v7 = (void *)sub_38EC58((uint64_t)v6, &v43);
      unint64_t v8 = sub_188FC78(v7, (uint64_t)" > ", 3);
      unsigned int v9 = (void *)sub_38EC58((uint64_t)v8, v5);
      sub_188FC78(v9, (uint64_t)")", 1);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
      if (v42 < 0) {
        operator delete(v41);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    return 0;
  }
  uint64_t v38 = (uint64_t)&v38;
  unsigned __int8 v39 = (void (__cdecl **)(std::stringbuf *__hidden))&v38;
  uint64_t v40 = 0;
  uint64_t v15 = (std::mutex *)(a1 + 3);
  std::mutex::lock((std::mutex *)(a1 + 3));
  uint64_t v17 = a1[14];
  uint64_t v16 = a1[15];
  if (v17 == v16)
  {
LABEL_22:
    ++a1[22];
    uint64_t v26 = (uint64_t *)a1[1];
    if (v26 != a1)
    {
      unint64_t v27 = a1[21] - a4;
      do
      {
        if (a1[20] <= v27) {
          break;
        }
        sub_39AFFC(a1, v26, &v38);
        uint64_t v26 = (uint64_t *)a1[1];
      }
      while (v26 != a1);
    }
    uint64_t v28 = *a2;
    char v29 = operator new(0x20uLL);
    v29[2] = v28;
    v29[3] = a4;
    uint64_t v30 = *a1;
    *(void *)(v30 + 8) = v29;
    *a1 = (uint64_t)v29;
    *char v29 = v30;
    v29[1] = a1;
    ++a1[2];
    __p[0] = v29;
    sub_39B150(a1 + 11, a2, __p);
    a1[20] += a4;
    uint64_t v10 = 1;
    std::mutex::unlock(v15);
    if (!v40) {
      return v10;
    }
LABEL_27:
    uint64_t v32 = v38;
    char v31 = (uint64_t *)v39;
    uint64_t v33 = *v39;
    *((void *)v33 + 1) = *(void *)(v38 + 8);
    **(void **)(v32 + 8) = v33;
    uint64_t v40 = 0;
    if (v31 != &v38)
    {
      do
      {
        double v34 = (uint64_t *)v31[1];
        operator delete(v31);
        char v31 = v34;
      }
      while (v34 != &v38);
    }
    return v10;
  }
  unint64_t v18 = __ROR8__(*a2, 32);
  unint64_t v19 = 0xC4CEB9FE1A85EC53
      * ((0xFF51AFD7ED558CCDLL * (v18 ^ (v18 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v18 ^ (v18 >> 33))) >> 33));
  unint64_t v20 = v19 ^ (v19 >> 33);
  uint64_t v21 = a1[11];
  unint64_t v22 = a1[12] - v21;
  unint64_t v23 = v20 % v22;
  uint64_t v24 = v22 - 1;
  while (*(unsigned char *)(v21 + v23) != 2)
  {
    if (!*(unsigned char *)(v21 + v23)) {
      goto LABEL_22;
    }
LABEL_12:
    if (v23 == v24) {
      unint64_t v23 = 0;
    }
    else {
      ++v23;
    }
  }
  uint64_t v25 = v17 + 16 * v23;
  if (*(void *)v25 != *a2) {
    goto LABEL_12;
  }
  if (v25 == v16) {
    goto LABEL_22;
  }
  if (a5)
  {
    sub_39AFFC(a1, *(uint64_t **)(v25 + 8), &v38);
    goto LABEL_22;
  }
  uint64_t v10 = 0;
  std::mutex::unlock(v15);
  if (v40) {
    goto LABEL_27;
  }
  return v10;
}

void sub_39AF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  std::mutex::unlock(v16);
  sub_2210FC(&a16);
  _Unwind_Resume(a1);
}

void sub_39AFFC(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[20] -= a2[3];
  uint64_t v6 = a1[14];
  uint64_t v7 = a1[15];
  if (v6 != v7)
  {
    uint64_t v8 = (uint64_t)(a1 + 11);
    uint64_t v9 = a2[2];
    unint64_t v10 = __ROR8__(v9, 32);
    unint64_t v11 = 0xC4CEB9FE1A85EC53
        * ((0xFF51AFD7ED558CCDLL * (v10 ^ (v10 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v10 ^ (v10 >> 33))) >> 33));
    unint64_t v12 = v11 ^ (v11 >> 33);
    uint64_t v13 = a1[11];
    unint64_t v14 = v12 % (a1[12] - v13);
    unint64_t v15 = (v7 - v6) >> 4;
    while (1)
    {
      if (*(unsigned char *)(v13 + v14) != 1)
      {
        if (!*(unsigned char *)(v13 + v14)) {
          goto LABEL_11;
        }
        if (*(void *)(v6 + 16 * v14) == v9) {
          break;
        }
      }
      if (v14 == v15 - 1) {
        unint64_t v14 = 0;
      }
      else {
        ++v14;
      }
    }
    *(unsigned char *)(v13 + v14) = 1;
    uint64_t v16 = a1[18] - 1;
    a1[18] = v16;
    if (v15 > 8 * v16) {
      sub_39B30C(v8);
    }
  }
LABEL_11:
  if (a2 != a3)
  {
    uint64_t v17 = (uint64_t *)a2[1];
    if (v17 != a3)
    {
      uint64_t v18 = *a2;
      *(void *)(v18 + 8) = v17;
      *(void *)a2[1] = v18;
      uint64_t v19 = *a3;
      *(void *)(v19 + 8) = a2;
      *a2 = v19;
      *a3 = (uint64_t)a2;
      a2[1] = (uint64_t)a3;
      --a1[2];
      ++a3[2];
    }
  }
}

uint64_t sub_39B150(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = (char *)a1[3];
  uint64_t v7 = (char *)a1[4];
  if (v6 == v7) {
    goto LABEL_11;
  }
  unint64_t v8 = __ROR8__(*a2, 32);
  unint64_t v9 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) >> 33));
  unint64_t v10 = a1[1] - *a1;
  unint64_t v11 = (v9 ^ (v9 >> 33)) % v10;
  uint64_t v12 = v10 - 1;
  while (*(unsigned char *)(*a1 + v11) != 2)
  {
    if (!*(unsigned char *)(*a1 + v11)) {
      goto LABEL_11;
    }
LABEL_4:
    if (v11 == v12) {
      unint64_t v11 = 0;
    }
    else {
      ++v11;
    }
  }
  uint64_t v13 = &v6[16 * v11];
  if (*(void *)v13 != *a2) {
    goto LABEL_4;
  }
  if (v13 != v7) {
    return 0;
  }
LABEL_11:
  if (2 * a1[8] + 2 > (unint64_t)((v7 - v6) >> 4)) {
    sub_39B30C((uint64_t)a1);
  }
  unint64_t v15 = __ROR8__(*a2, 32);
  unint64_t v16 = 0xC4CEB9FE1A85EC53
      * ((0xFF51AFD7ED558CCDLL * (v15 ^ (v15 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v15 ^ (v15 >> 33))) >> 33));
  unint64_t v17 = v16 ^ (v16 >> 33);
  uint64_t v18 = *a1;
  unint64_t v19 = v17 % (a1[1] - *a1);
  int v20 = *(unsigned __int8 *)(*a1 + v19);
  if (*(unsigned char *)(*a1 + v19))
  {
    while (v20 != 1)
    {
      if (v19 == ((a1[4] - a1[3]) >> 4) - 1) {
        unint64_t v19 = 0;
      }
      else {
        ++v19;
      }
      int v20 = *(unsigned __int8 *)(v18 + v19);
      if (!*(unsigned char *)(v18 + v19)) {
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    ++a1[8];
  }
  uint64_t v21 = a1[7] + 1;
  *(unsigned char *)(v18 + v19) = 2;
  a1[7] = v21;
  uint64_t v22 = 16 * v19;
  *(void *)(a1[3] + v22) = *a2;
  *(void *)(a1[3] + v22 + 8) = *a3;
  return 1;
}

void sub_39B30C(uint64_t a1)
{
  unint64_t v2 = 0;
  uint64_t v3 = *(void *)(a1 + 56);
  do
    ++v2;
  while (3 * v3 > (unint64_t)(1 << v2));
  if (v2 >= 0x3C) {
    sub_2E00();
  }
  uint64_t v4 = operator new(16 << v2);
  long long v5 = v4;
  size_t v6 = 1 << v2;
  uint64_t v7 = &v4[2 * (1 << v2)];
  unint64_t v8 = v4;
  if (16 << v2 == 16) {
    goto LABEL_31;
  }
  unint64_t v9 = ((unint64_t)((16 << v2) - 16) >> 4) + 1;
  unint64_t v8 = &v4[2 * (v9 & 0x1FFFFFFFFFFFFFFELL)];
  unint64_t v10 = v4 + 2;
  uint64_t v11 = v9 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v10 - 2) = 0xFFFFFFFF00000000;
    *unint64_t v10 = 0xFFFFFFFF00000000;
    *(v10 - 1) = 0;
    v10[1] = 0;
    v10 += 4;
    v11 -= 2;
  }
  while (v11);
  if (v9 != (v9 & 0x1FFFFFFFFFFFFFFELL))
  {
LABEL_31:
    do
    {
      *unint64_t v8 = 0xFFFFFFFF00000000;
      v8[1] = 0;
      v8 += 2;
    }
    while (v8 != v7);
  }
  uint64_t v12 = (char *)operator new(1 << v2);
  uint64_t v13 = &v12[v6];
  bzero(v12, v6);
  *(void *)(a1 + 64) = v3;
  unint64_t v14 = *(unsigned char **)a1;
  uint64_t v15 = *(void *)(a1 + 8);
  unint64_t v16 = v15 - *(void *)a1;
  if (v15 == *(void *)a1)
  {
    unint64_t v14 = *(unsigned char **)(a1 + 8);
  }
  else
  {
    unint64_t v17 = 0;
    size_t v18 = v6 - 1;
    do
    {
      if (v14[v17] == 2)
      {
        uint64_t v20 = *(void *)(a1 + 24);
        unint64_t v21 = __ROR8__(*(void *)(v20 + 16 * v17), 32);
        unint64_t v22 = 0xC4CEB9FE1A85EC53
            * ((0xFF51AFD7ED558CCDLL * (v21 ^ (v21 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v21 ^ (v21 >> 33))) >> 33));
        unint64_t v23 = (v22 ^ (v22 >> 33)) & v18;
        while (v12[v23])
        {
          if (v23 == v18) {
            unint64_t v23 = 0;
          }
          else {
            ++v23;
          }
        }
        unint64_t v19 = &v5[2 * v23];
        void *v19 = *(void *)(v20 + 16 * v17);
        v19[1] = *(void *)(v20 + 16 * v17 + 8);
        v12[v23] = 2;
      }
      ++v17;
    }
    while (v17 < v16);
  }
  uint64_t v24 = *(void **)(a1 + 24);
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v7;
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v13;
  *(void *)(a1 + 16) = v13;
  *(void *)(a1 + 24) = v5;
  if (v14) {
    operator delete(v14);
  }
  if (v24)
  {
    operator delete(v24);
  }
}

void sub_39B544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_39B57C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(*(void *)(a1 + 16) + 8);
  unint64_t v2 = *(uint64_t **)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = (void *)v1[14];
    if (v3)
    {
      v1[15] = (uint64_t)v3;
      operator delete(v3);
    }
    uint64_t v4 = (void *)v1[11];
    if (v4)
    {
      v1[12] = (uint64_t)v4;
      operator delete(v4);
    }
    std::mutex::~mutex((std::mutex *)(v1 + 3));
    if (v1[2])
    {
      uint64_t v6 = *v1;
      long long v5 = (uint64_t *)v1[1];
      uint64_t v7 = *v5;
      *(void *)(v7 + 8) = *(void *)(*v1 + 8);
      **(void **)(v6 + 8) = v7;
      v1[2] = 0;
      if (v5 != v1)
      {
        do
        {
          unint64_t v8 = (uint64_t *)v5[1];
          operator delete(v5);
          long long v5 = v8;
        }
        while (v8 != v1);
      }
    }
    v1 += 25;
  }
}

void sub_39B628(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    long long v5 = (uint64_t *)(i - 200);
    *(void *)(a1 + 16) = i - 200;
    uint64_t v6 = *(void **)(i - 88);
    if (v6)
    {
      *(void *)(i - 80) = v6;
      operator delete(v6);
    }
    uint64_t v7 = *(void **)(i - 112);
    if (v7)
    {
      *(void *)(i - 104) = v7;
      operator delete(v7);
    }
    std::mutex::~mutex((std::mutex *)(i - 176));
    if (*(void *)(i - 184))
    {
      uint64_t v9 = *(void *)(i - 200);
      unint64_t v8 = *(uint64_t **)(i - 192);
      uint64_t v10 = *v8;
      *(void *)(v10 + 8) = *(void *)(v9 + 8);
      **(void **)(v9 + 8) = v10;
      *(void *)(i - 184) = 0;
      if (v8 != v5)
      {
        do
        {
          uint64_t v11 = (uint64_t *)v8[1];
          operator delete(v8);
          unint64_t v8 = v11;
        }
        while (v11 != v5);
      }
    }
  }
}

char *sub_39B6E4(void **a1, uint64_t *a2)
{
  uint64_t v4 = (char *)*a1;
  uint64_t v3 = (char *)a1[1];
  unint64_t v5 = 0x8F5C28F5C28F5C29 * ((v3 - (unsigned char *)*a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x147AE147AE147AELL) {
    sub_2E00();
  }
  unint64_t v8 = a1[2];
  if (0x1EB851EB851EB852 * ((v8 - v4) >> 3) > v6) {
    unint64_t v6 = 0x1EB851EB851EB852 * ((v8 - v4) >> 3);
  }
  if (0x8F5C28F5C28F5C29 * ((v8 - v4) >> 3) >= 0xA3D70A3D70A3D7) {
    unint64_t v9 = 0x147AE147AE147AELL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9)
  {
    if (v9 > 0x147AE147AE147AELL) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(200 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[200 * v5];
  uint64_t v12 = *a2;
  *(void *)uint64_t v11 = v11;
  *((void *)v11 + 1) = v11;
  *((_OWORD *)v11 + 1) = xmmword_20E2350;
  *((_OWORD *)v11 + 2) = 0u;
  *((_OWORD *)v11 + 3) = 0u;
  *((_OWORD *)v11 + 4) = 0u;
  *((_OWORD *)v11 + 5) = 0u;
  *((_OWORD *)v11 + 6) = 0u;
  *((_OWORD *)v11 + 7) = 0u;
  *((void *)v11 + 16) = 0;
  *((void *)v11 + 18) = 0;
  *((void *)v11 + 19) = 0;
  *((void *)v11 + 20) = 0;
  *((void *)v11 + 21) = v12;
  *((void *)v11 + 22) = 0;
  *((void *)v11 + 23) = 0;
  *((void *)v11 + 24) = 0;
  uint64_t v13 = v11 + 200;
  unint64_t v23 = v11 + 200;
  uint64_t v25 = &v10[200 * v9];
  uint64_t v26 = v11;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = &v10[200 * v9];
  }
  else
  {
    do
    {
      v3 -= 200;
      sub_39AAE8((uint64_t)(v11 - 200), (uint64_t)v3);
      uint64_t v11 = v26 - 200;
      v26 -= 200;
    }
    while (v3 != v4);
    unint64_t v14 = (char *)*a1;
    uint64_t v3 = (char *)a1[1];
    uint64_t v13 = v23;
    *a1 = v11;
    a1[1] = v23;
    a1[2] = v25;
    if (v3 != v14)
    {
      do
      {
        uint64_t v15 = v3 - 200;
        uint64_t v24 = v3 - 200;
        unint64_t v16 = (void *)*((void *)v3 - 11);
        if (v16)
        {
          *((void *)v3 - 10) = v16;
          operator delete(v16);
        }
        unint64_t v17 = (void *)*((void *)v3 - 14);
        if (v17)
        {
          *((void *)v3 - 13) = v17;
          operator delete(v17);
        }
        std::mutex::~mutex((std::mutex *)(v3 - 176));
        if (*((void *)v3 - 23))
        {
          uint64_t v19 = *((void *)v3 - 25);
          size_t v18 = (char *)*((void *)v3 - 24);
          uint64_t v20 = *(void *)v18;
          *(void *)(v20 + 8) = *(void *)(v19 + 8);
          **(void **)(v19 + 8) = v20;
          *((void *)v3 - 23) = 0;
          if (v18 != v15)
          {
            do
            {
              unint64_t v21 = (char *)*((void *)v18 + 1);
              operator delete(v18);
              size_t v18 = v21;
            }
            while (v21 != v15);
          }
        }
        uint64_t v3 = v24;
      }
      while (v24 != v14);
      uint64_t v3 = v14;
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v13;
}

void sub_39B944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (!a18) {
    sub_39B57C((uint64_t)&a15);
  }
  sub_39AAB0((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_39B96C(uint64_t result, void ***a2, void ***a3)
{
  switch(result)
  {
    case 3:
      uint64_t v4 = *a2;
      *a2 = 0;
      if (v4)
      {
        unint64_t v5 = v4;
        sub_54FE0(&v5);
        goto LABEL_12;
      }
      break;
    case 2:
      double result = (uint64_t)*a2;
      *a2 = 0;
      if (result)
      {
        sub_553C4(result);
        goto LABEL_12;
      }
      break;
    case 0:
      uint64_t v3 = *a2;
      *a2 = 0;
      if (v3)
      {
        if (*((char *)v3 + 23) < 0) {
          operator delete(*v3);
        }
LABEL_12:
        operator delete();
      }
      break;
  }
  *a2 = *a3;
  return result;
}

void sub_39BA44(int a1, void ***a2, uint64_t a3)
{
  if (a1 != 2)
  {
    if (a1 != 1)
    {
      if (!a1)
      {
        uint64_t v3 = *a2;
        *a2 = 0;
        if (v3)
        {
          if (*((char *)v3 + 23) < 0) {
            operator delete(*v3);
          }
          operator delete();
        }
        operator new();
      }
      sub_39BB94(a1, a2);
    }
    operator new();
  }
  uint64_t v4 = *a2;
  if (*a2 != (void **)a3)
  {
    *((_DWORD *)v4 + 8) = *(_DWORD *)(a3 + 32);
    unint64_t v5 = *(uint64_t **)(a3 + 16);
    sub_5A4DC(v4, v5, 0);
  }
}

void sub_39BB6C()
{
}

void sub_39BB94(int a1, void ***a2)
{
  if (a1 == 3)
  {
    unint64_t v2 = *a2;
    *a2 = 0;
    if (v2)
    {
      uint64_t v3 = v2;
      sub_54FE0(&v3);
      operator delete();
    }
    operator new();
  }

  sub_39BC78(a1);
}

void sub_39BC54()
{
}

void sub_39BC78(int a1)
{
  if (a1 != 5)
  {
    if (a1 == 4) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_39BD38()
{
}

void sub_39BD68(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_2438E78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_39BD88(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_2438E78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_39BDDC(uint64_t a1)
{
  return sub_688A00(a1 + 24);
}

uint64_t *sub_39BDE8(uint64_t *result, unint64_t a2)
{
  uint64_t v2 = (uint64_t)(result + 2);
  uint64_t v3 = *result;
  if (0xF0F0F0F0F0F0F0F1 * ((result[2] - *result) >> 4) < a2)
  {
    uint64_t v4 = result;
    if (a2 >= 0xF0F0F0F0F0F0F1) {
      sub_2E00();
    }
    uint64_t v5 = result[1];
    uint64_t v13 = result + 2;
    uint64_t v6 = 272 * a2;
    uint64_t v11 = (char *)operator new(272 * a2);
    *(void *)uint64_t v12 = &v11[v5 - v3];
    *(void *)&v12[8] = *(void *)v12;
    *(void *)&v12[16] = &v11[v6];
    sub_39BEE8(v2, v5, v5, v3, v3, *(uint64_t *)v12, *(uint64_t *)v12);
    uint64_t v7 = v4[2];
    long long v8 = *(_OWORD *)&v12[8];
    long long v9 = *(_OWORD *)v4;
    *uint64_t v4 = v10;
    *(_OWORD *)uint64_t v12 = v9;
    *(_OWORD *)(v4 + 1) = v8;
    *(void *)&v12[16] = v7;
    uint64_t v11 = (char *)v9;
    return (uint64_t *)sub_39C0FC((uint64_t)&v11);
  }
  return result;
}

void sub_39BED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_39C0FC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_39BEE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  uint64_t v14 = a7;
  if (a3 != a5)
  {
    uint64_t v8 = a3;
    long long v9 = 0uLL;
    do
    {
      uint64_t v10 = (void *)(v7 - 272);
      uint64_t v11 = *(void *)(v8 - 104);
      *uint64_t v10 = v10;
      v10[1] = v10;
      *(_OWORD *)(v7 - 256) = xmmword_20E2350;
      *(_OWORD *)(v7 - 240) = v9;
      *(_OWORD *)(v7 - 224) = v9;
      *(_OWORD *)(v7 - 208) = v9;
      *(_OWORD *)(v7 - 192) = v9;
      *(_OWORD *)(v7 - 176) = v9;
      *(_OWORD *)(v7 - 160) = v9;
      *(void *)(v7 - 144) = 0;
      *(void *)(v7 - 128) = 0;
      *(void *)(v7 - 120) = 0;
      *(void *)(v7 - 112) = 0;
      *(void *)(v7 - 104) = v11;
      *(void *)(v7 - 88) = 0;
      *(void *)(v7 - 80) = 0;
      *(void *)(v7 - 96) = 0;
      if (*(void *)(v8 - 72))
      {
        uint64_t v12 = sub_2DA84();
        sub_2DB0C((uint64_t)v12);
      }
      v8 -= 272;
      *(void *)(v7 - 72) = 0;
      *(void *)(v7 - 64) = 850045863;
      long long v9 = 0uLL;
      *(_OWORD *)(v7 - 56) = 0u;
      *(_OWORD *)(v7 - 40) = 0u;
      *(_OWORD *)(v7 - 24) = 0u;
      *(void *)(v7 - 8) = 0;
      uint64_t v7 = v14 - 272;
      v14 -= 272;
    }
    while (v8 != a5);
  }
  return a6;
}

void sub_39C044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_37F100(v3);
  sub_39C064((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_39C064(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
    uint64_t v4 = *(std::mutex **)(*(void *)(a1 + 8) + 8);
    if ((std::mutex *)v3 != v4)
    {
      uint64_t v5 = (std::mutex *)(v3 + 208);
      do
      {
        if (*(void *)&v5[-1].__m_.__opaque[48])
        {
          sub_397918((uint64_t)&v5[-4].__m_.__opaque[40]);
          uint64_t v7 = sub_2DA84();
          sub_2DD20((uint64_t)v7, *(size_t **)&v5[-1].__m_.__opaque[48]);
        }
        std::mutex::~mutex(v5);
        sub_37F100((uint64_t *)&v5[-4].__m_.__opaque[40]);
        uint64_t v6 = v5 + 1;
        uint64_t v5 = (std::mutex *)((char *)v5 + 272);
      }
      while (v6 != v4);
    }
  }
  return a1;
}

uint64_t sub_39C0FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 272;
    if (*(void *)(i - 72))
    {
      sub_397918(i - 272);
      uint64_t v4 = sub_2DA84();
      sub_2DD20((uint64_t)v4, *(size_t **)(i - 72));
    }
    std::mutex::~mutex((std::mutex *)(i - 64));
    sub_37F100((uint64_t *)(i - 272));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_39C184(uint64_t *a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = 0xF0F0F0F0F0F0F0F1 * ((v5 - *a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0xF0F0F0F0F0F0F0) {
    sub_2E00();
  }
  if (0xE1E1E1E1E1E1E1E2 * ((a1[2] - v4) >> 4) > v7) {
    unint64_t v7 = 0xE1E1E1E1E1E1E1E2 * ((a1[2] - v4) >> 4);
  }
  if (0xF0F0F0F0F0F0F0F1 * ((a1[2] - v4) >> 4) >= 0x78787878787878) {
    unint64_t v10 = 0xF0F0F0F0F0F0F0;
  }
  else {
    unint64_t v10 = v7;
  }
  uint64_t v24 = a1 + 2;
  if (v10)
  {
    if (v10 > 0xF0F0F0F0F0F0F0) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(272 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = (uint64_t)&v11[272 * v6];
  unint64_t v22 = v11;
  *(void *)unint64_t v23 = v12;
  *(void *)&unsigned char v23[8] = v12;
  *(void *)&v23[16] = &v11[272 * v10];
  uint64_t v13 = *a2;
  int v14 = *a3;
  *(void *)uint64_t v12 = v12;
  *(void *)(v12 + 8) = v12;
  *(_OWORD *)(v12 + 16) = xmmword_20E2350;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_OWORD *)(v12 + 80) = 0u;
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  *(void *)(v12 + 128) = 0;
  *(void *)(v12 + 144) = 0;
  *(void *)(v12 + 152) = 0;
  *(void *)(v12 + 160) = 0;
  *(void *)(v12 + 168) = v13;
  *(void *)(v12 + 184) = 0;
  *(void *)(v12 + 192) = 0;
  *(void *)(v12 + 176) = 0;
  if (v14)
  {
    uint64_t v15 = sub_2DA84();
    sub_2DB0C((uint64_t)v15);
  }
  unint64_t v16 = &v11[272 * v6];
  *((void *)v16 + 25) = 0;
  *((void *)v16 + 26) = 850045863;
  *(_OWORD *)(v16 + 216) = 0u;
  *(_OWORD *)(v16 + 232) = 0u;
  *(_OWORD *)(v16 + 248) = 0u;
  *((void *)v16 + 33) = 0;
  *(void *)&unsigned char v23[8] = v16 + 272;
  sub_39BEE8((uint64_t)(a1 + 2), v5, v5, v4, v4, v12, v12);
  uint64_t v17 = a1[2];
  long long v18 = *(_OWORD *)&v23[8];
  long long v19 = *(_OWORD *)a1;
  *a1 = v20;
  *(_OWORD *)unint64_t v23 = v19;
  *(_OWORD *)(a1 + 1) = v18;
  *(void *)&v23[16] = v17;
  unint64_t v22 = (char *)v19;
  sub_39C0FC((uint64_t)&v22);
  return (uint64_t)&v11[272 * v6 + 272];
}

void sub_39C39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_37F100(v4);
  sub_39C0FC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_39C3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_39C0FC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_39C3D0(uint64_t *result, unint64_t a2)
{
  uint64_t v2 = (uint64_t)(result + 2);
  uint64_t v3 = *result;
  if (0xF0F0F0F0F0F0F0F1 * ((result[2] - *result) >> 4) < a2)
  {
    uint64_t v4 = result;
    if (a2 >= 0xF0F0F0F0F0F0F1) {
      sub_2E00();
    }
    uint64_t v5 = result[1];
    uint64_t v13 = result + 2;
    uint64_t v6 = 272 * a2;
    uint64_t v11 = (char *)operator new(272 * a2);
    *(void *)uint64_t v12 = &v11[v5 - v3];
    *(void *)&v12[8] = *(void *)v12;
    *(void *)&v12[16] = &v11[v6];
    sub_39C4D0(v2, v5, v5, v3, v3, *(uint64_t *)v12, *(uint64_t *)v12);
    uint64_t v7 = v4[2];
    long long v8 = *(_OWORD *)&v12[8];
    long long v9 = *(_OWORD *)v4;
    *uint64_t v4 = v10;
    *(_OWORD *)uint64_t v12 = v9;
    *(_OWORD *)(v4 + 1) = v8;
    *(void *)&v12[16] = v7;
    uint64_t v11 = (char *)v9;
    return (uint64_t *)sub_39C6E4((uint64_t)&v11);
  }
  return result;
}

void sub_39C4BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_39C6E4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_39C4D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  uint64_t v14 = a7;
  if (a3 != a5)
  {
    uint64_t v8 = a3;
    long long v9 = 0uLL;
    do
    {
      uint64_t v10 = (void *)(v7 - 272);
      uint64_t v11 = *(void *)(v8 - 104);
      *uint64_t v10 = v10;
      v10[1] = v10;
      *(_OWORD *)(v7 - 256) = xmmword_20E2350;
      *(_OWORD *)(v7 - 240) = v9;
      *(_OWORD *)(v7 - 224) = v9;
      *(_OWORD *)(v7 - 208) = v9;
      *(_OWORD *)(v7 - 192) = v9;
      *(_OWORD *)(v7 - 176) = v9;
      *(_OWORD *)(v7 - 160) = v9;
      *(void *)(v7 - 144) = 0;
      *(void *)(v7 - 128) = 0;
      *(void *)(v7 - 120) = 0;
      *(void *)(v7 - 112) = 0;
      *(void *)(v7 - 104) = v11;
      *(void *)(v7 - 88) = 0;
      *(void *)(v7 - 80) = 0;
      *(void *)(v7 - 96) = 0;
      if (*(void *)(v8 - 72))
      {
        uint64_t v12 = sub_2DA84();
        sub_2DB0C((uint64_t)v12);
      }
      v8 -= 272;
      *(void *)(v7 - 72) = 0;
      *(void *)(v7 - 64) = 850045863;
      long long v9 = 0uLL;
      *(_OWORD *)(v7 - 56) = 0u;
      *(_OWORD *)(v7 - 40) = 0u;
      *(_OWORD *)(v7 - 24) = 0u;
      *(void *)(v7 - 8) = 0;
      uint64_t v7 = v14 - 272;
      v14 -= 272;
    }
    while (v8 != a5);
  }
  return a6;
}

void sub_39C62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_37F100(v3);
  sub_39C64C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_39C64C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
    uint64_t v4 = *(std::mutex **)(*(void *)(a1 + 8) + 8);
    if ((std::mutex *)v3 != v4)
    {
      uint64_t v5 = (std::mutex *)(v3 + 208);
      do
      {
        if (*(void *)&v5[-1].__m_.__opaque[48])
        {
          sub_39714C((uint64_t)&v5[-4].__m_.__opaque[40]);
          uint64_t v7 = sub_2DA84();
          sub_2DD20((uint64_t)v7, *(size_t **)&v5[-1].__m_.__opaque[48]);
        }
        std::mutex::~mutex(v5);
        sub_37F100((uint64_t *)&v5[-4].__m_.__opaque[40]);
        uint64_t v6 = v5 + 1;
        uint64_t v5 = (std::mutex *)((char *)v5 + 272);
      }
      while (v6 != v4);
    }
  }
  return a1;
}

uint64_t sub_39C6E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 272;
    if (*(void *)(i - 72))
    {
      sub_39714C(i - 272);
      uint64_t v4 = sub_2DA84();
      sub_2DD20((uint64_t)v4, *(size_t **)(i - 72));
    }
    std::mutex::~mutex((std::mutex *)(i - 64));
    sub_37F100((uint64_t *)(i - 272));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_39C76C(uint64_t *a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = 0xF0F0F0F0F0F0F0F1 * ((v5 - *a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0xF0F0F0F0F0F0F0) {
    sub_2E00();
  }
  if (0xE1E1E1E1E1E1E1E2 * ((a1[2] - v4) >> 4) > v7) {
    unint64_t v7 = 0xE1E1E1E1E1E1E1E2 * ((a1[2] - v4) >> 4);
  }
  if (0xF0F0F0F0F0F0F0F1 * ((a1[2] - v4) >> 4) >= 0x78787878787878) {
    unint64_t v10 = 0xF0F0F0F0F0F0F0;
  }
  else {
    unint64_t v10 = v7;
  }
  uint64_t v24 = a1 + 2;
  if (v10)
  {
    if (v10 > 0xF0F0F0F0F0F0F0) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(272 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = (uint64_t)&v11[272 * v6];
  unint64_t v22 = v11;
  *(void *)unint64_t v23 = v12;
  *(void *)&unsigned char v23[8] = v12;
  *(void *)&v23[16] = &v11[272 * v10];
  uint64_t v13 = *a2;
  int v14 = *a3;
  *(void *)uint64_t v12 = v12;
  *(void *)(v12 + 8) = v12;
  *(_OWORD *)(v12 + 16) = xmmword_20E2350;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_OWORD *)(v12 + 80) = 0u;
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  *(void *)(v12 + 128) = 0;
  *(void *)(v12 + 144) = 0;
  *(void *)(v12 + 152) = 0;
  *(void *)(v12 + 160) = 0;
  *(void *)(v12 + 168) = v13;
  *(void *)(v12 + 184) = 0;
  *(void *)(v12 + 192) = 0;
  *(void *)(v12 + 176) = 0;
  if (v14)
  {
    uint64_t v15 = sub_2DA84();
    sub_2DB0C((uint64_t)v15);
  }
  unint64_t v16 = &v11[272 * v6];
  *((void *)v16 + 25) = 0;
  *((void *)v16 + 26) = 850045863;
  *(_OWORD *)(v16 + 216) = 0u;
  *(_OWORD *)(v16 + 232) = 0u;
  *(_OWORD *)(v16 + 248) = 0u;
  *((void *)v16 + 33) = 0;
  *(void *)&unsigned char v23[8] = v16 + 272;
  sub_39C4D0((uint64_t)(a1 + 2), v5, v5, v4, v4, v12, v12);
  uint64_t v17 = a1[2];
  long long v18 = *(_OWORD *)&v23[8];
  long long v19 = *(_OWORD *)a1;
  *a1 = v20;
  *(_OWORD *)unint64_t v23 = v19;
  *(_OWORD *)(a1 + 1) = v18;
  *(void *)&v23[16] = v17;
  unint64_t v22 = (char *)v19;
  sub_39C6E4((uint64_t)&v22);
  return (uint64_t)&v11[272 * v6 + 272];
}

void sub_39C984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_37F100(v4);
  sub_39C6E4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_39C9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_39C6E4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_39C9B8(uint64_t *result, unint64_t a2)
{
  uint64_t v2 = (uint64_t)(result + 2);
  uint64_t v3 = *result;
  if (0xF0F0F0F0F0F0F0F1 * ((result[2] - *result) >> 4) < a2)
  {
    uint64_t v4 = result;
    if (a2 >= 0xF0F0F0F0F0F0F1) {
      sub_2E00();
    }
    uint64_t v5 = result[1];
    uint64_t v13 = result + 2;
    uint64_t v6 = 272 * a2;
    uint64_t v11 = (char *)operator new(272 * a2);
    *(void *)uint64_t v12 = &v11[v5 - v3];
    *(void *)&v12[8] = *(void *)v12;
    *(void *)&v12[16] = &v11[v6];
    sub_39CAB8(v2, v5, v5, v3, v3, *(uint64_t *)v12, *(uint64_t *)v12);
    uint64_t v7 = v4[2];
    long long v8 = *(_OWORD *)&v12[8];
    long long v9 = *(_OWORD *)v4;
    *uint64_t v4 = v10;
    *(_OWORD *)uint64_t v12 = v9;
    *(_OWORD *)(v4 + 1) = v8;
    *(void *)&v12[16] = v7;
    uint64_t v11 = (char *)v9;
    return (uint64_t *)sub_39CCCC((uint64_t)&v11);
  }
  return result;
}

void sub_39CAA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_39CCCC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_39CAB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  uint64_t v14 = a7;
  if (a3 != a5)
  {
    uint64_t v8 = a3;
    long long v9 = 0uLL;
    do
    {
      uint64_t v10 = (void *)(v7 - 272);
      uint64_t v11 = *(void *)(v8 - 104);
      *uint64_t v10 = v10;
      v10[1] = v10;
      *(_OWORD *)(v7 - 256) = xmmword_20E2350;
      *(_OWORD *)(v7 - 240) = v9;
      *(_OWORD *)(v7 - 224) = v9;
      *(_OWORD *)(v7 - 208) = v9;
      *(_OWORD *)(v7 - 192) = v9;
      *(_OWORD *)(v7 - 176) = v9;
      *(_OWORD *)(v7 - 160) = v9;
      *(void *)(v7 - 144) = 0;
      *(void *)(v7 - 128) = 0;
      *(void *)(v7 - 120) = 0;
      *(void *)(v7 - 112) = 0;
      *(void *)(v7 - 104) = v11;
      *(void *)(v7 - 88) = 0;
      *(void *)(v7 - 80) = 0;
      *(void *)(v7 - 96) = 0;
      if (*(void *)(v8 - 72))
      {
        uint64_t v12 = sub_2DA84();
        sub_2DB0C((uint64_t)v12);
      }
      v8 -= 272;
      *(void *)(v7 - 72) = 0;
      *(void *)(v7 - 64) = 850045863;
      long long v9 = 0uLL;
      *(_OWORD *)(v7 - 56) = 0u;
      *(_OWORD *)(v7 - 40) = 0u;
      *(_OWORD *)(v7 - 24) = 0u;
      *(void *)(v7 - 8) = 0;
      uint64_t v7 = v14 - 272;
      v14 -= 272;
    }
    while (v8 != a5);
  }
  return a6;
}

void sub_39CC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_396B18(v3);
  sub_39CC34((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_39CC34(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
    uint64_t v4 = *(std::mutex **)(*(void *)(a1 + 8) + 8);
    if ((std::mutex *)v3 != v4)
    {
      uint64_t v5 = (std::mutex *)(v3 + 208);
      do
      {
        if (*(void *)&v5[-1].__m_.__opaque[48])
        {
          sub_396964((uint64_t)&v5[-4].__m_.__opaque[40]);
          uint64_t v7 = sub_2DA84();
          sub_2DD20((uint64_t)v7, *(size_t **)&v5[-1].__m_.__opaque[48]);
        }
        std::mutex::~mutex(v5);
        sub_396B18((uint64_t *)&v5[-4].__m_.__opaque[40]);
        uint64_t v6 = v5 + 1;
        uint64_t v5 = (std::mutex *)((char *)v5 + 272);
      }
      while (v6 != v4);
    }
  }
  return a1;
}

uint64_t sub_39CCCC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 272;
    if (*(void *)(i - 72))
    {
      sub_396964(i - 272);
      uint64_t v4 = sub_2DA84();
      sub_2DD20((uint64_t)v4, *(size_t **)(i - 72));
    }
    std::mutex::~mutex((std::mutex *)(i - 64));
    sub_396B18((uint64_t *)(i - 272));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_39CD54(uint64_t *a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = 0xF0F0F0F0F0F0F0F1 * ((v5 - *a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0xF0F0F0F0F0F0F0) {
    sub_2E00();
  }
  if (0xE1E1E1E1E1E1E1E2 * ((a1[2] - v4) >> 4) > v7) {
    unint64_t v7 = 0xE1E1E1E1E1E1E1E2 * ((a1[2] - v4) >> 4);
  }
  if (0xF0F0F0F0F0F0F0F1 * ((a1[2] - v4) >> 4) >= 0x78787878787878) {
    unint64_t v10 = 0xF0F0F0F0F0F0F0;
  }
  else {
    unint64_t v10 = v7;
  }
  uint64_t v24 = a1 + 2;
  if (v10)
  {
    if (v10 > 0xF0F0F0F0F0F0F0) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(272 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = (uint64_t)&v11[272 * v6];
  unint64_t v22 = v11;
  *(void *)unint64_t v23 = v12;
  *(void *)&unsigned char v23[8] = v12;
  *(void *)&v23[16] = &v11[272 * v10];
  uint64_t v13 = *a2;
  int v14 = *a3;
  *(void *)uint64_t v12 = v12;
  *(void *)(v12 + 8) = v12;
  *(_OWORD *)(v12 + 16) = xmmword_20E2350;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_OWORD *)(v12 + 80) = 0u;
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  *(void *)(v12 + 128) = 0;
  *(void *)(v12 + 144) = 0;
  *(void *)(v12 + 152) = 0;
  *(void *)(v12 + 160) = 0;
  *(void *)(v12 + 168) = v13;
  *(void *)(v12 + 184) = 0;
  *(void *)(v12 + 192) = 0;
  *(void *)(v12 + 176) = 0;
  if (v14)
  {
    uint64_t v15 = sub_2DA84();
    sub_2DB0C((uint64_t)v15);
  }
  unint64_t v16 = &v11[272 * v6];
  *((void *)v16 + 25) = 0;
  *((void *)v16 + 26) = 850045863;
  *(_OWORD *)(v16 + 216) = 0u;
  *(_OWORD *)(v16 + 232) = 0u;
  *(_OWORD *)(v16 + 248) = 0u;
  *((void *)v16 + 33) = 0;
  *(void *)&unsigned char v23[8] = v16 + 272;
  sub_39CAB8((uint64_t)(a1 + 2), v5, v5, v4, v4, v12, v12);
  uint64_t v17 = a1[2];
  long long v18 = *(_OWORD *)&v23[8];
  long long v19 = *(_OWORD *)a1;
  *a1 = v20;
  *(_OWORD *)unint64_t v23 = v19;
  *(_OWORD *)(a1 + 1) = v18;
  *(void *)&v23[16] = v17;
  unint64_t v22 = (char *)v19;
  sub_39CCCC((uint64_t)&v22);
  return (uint64_t)&v11[272 * v6 + 272];
}

void sub_39CF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_396B18(v4);
  sub_39CCCC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_39CF8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_39CCCC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_39CFA0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_383034(a1, 1u, 1);
  if (!v3)
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a2 + 32) = 1065353216;
    return;
  }
  uint64_t v4 = &v3[*(unsigned __int16 *)&v3[-*(int *)v3 + 8]];
  uint64_t v5 = *(unsigned int *)v4;
  unint64_t v7 = &v4[v5 + 4];
  size_t v6 = *(unsigned int *)&v4[v5];
  if (v6 >= 0x17)
  {
    if ((v6 | 7) == 0x17) {
      uint64_t v9 = (v6 & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v8 = operator new(v9 + 1);
    __p[1] = (void *)v6;
    uint64_t v12 = v9 - 0x7FFFFFFFFFFFFFFFLL;
    __p[0] = v8;
  }
  else
  {
    HIBYTE(v12) = *(_DWORD *)&v4[v5];
    uint64_t v8 = __p;
    if (!v6) {
      goto LABEL_11;
    }
  }
  memcpy(v8, v7, v6);
LABEL_11:
  *((unsigned char *)v8 + v6) = 0;
  sub_5EC80((uint64_t)__p, &v13);
  if (v14 != 2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    void *exception = &off_23FDF58;
  }
  sub_54214(a2, v13);
  sub_5521C((uint64_t *)v14, &v13);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
}

void sub_39D124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_39D160(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_383520(a1, 1u, 1);
  if (!v3)
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a2 + 32) = 1065353216;
    return;
  }
  uint64_t v4 = &v3[*(unsigned __int16 *)&v3[-*(int *)v3 + 8]];
  uint64_t v5 = *(unsigned int *)v4;
  unint64_t v7 = &v4[v5 + 4];
  size_t v6 = *(unsigned int *)&v4[v5];
  if (v6 >= 0x17)
  {
    if ((v6 | 7) == 0x17) {
      uint64_t v9 = (v6 & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v8 = operator new(v9 + 1);
    __p[1] = (void *)v6;
    uint64_t v12 = v9 - 0x7FFFFFFFFFFFFFFFLL;
    __p[0] = v8;
  }
  else
  {
    HIBYTE(v12) = *(_DWORD *)&v4[v5];
    uint64_t v8 = __p;
    if (!v6) {
      goto LABEL_11;
    }
  }
  memcpy(v8, v7, v6);
LABEL_11:
  *((unsigned char *)v8 + v6) = 0;
  sub_5EC80((uint64_t)__p, &v13);
  if (v14 != 2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    void *exception = &off_23FDF58;
  }
  sub_54214(a2, v13);
  sub_5521C((uint64_t *)v14, &v13);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
}

void sub_39D2E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_39D320(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_383A0C(a1, 1u, 1);
  if (!v3)
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a2 + 32) = 1065353216;
    return;
  }
  uint64_t v4 = &v3[*(unsigned __int16 *)&v3[-*(int *)v3 + 8]];
  uint64_t v5 = *(unsigned int *)v4;
  unint64_t v7 = &v4[v5 + 4];
  size_t v6 = *(unsigned int *)&v4[v5];
  if (v6 >= 0x17)
  {
    if ((v6 | 7) == 0x17) {
      uint64_t v9 = (v6 & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v8 = operator new(v9 + 1);
    __p[1] = (void *)v6;
    uint64_t v12 = v9 - 0x7FFFFFFFFFFFFFFFLL;
    __p[0] = v8;
  }
  else
  {
    HIBYTE(v12) = *(_DWORD *)&v4[v5];
    uint64_t v8 = __p;
    if (!v6) {
      goto LABEL_11;
    }
  }
  memcpy(v8, v7, v6);
LABEL_11:
  *((unsigned char *)v8 + v6) = 0;
  sub_5EC80((uint64_t)__p, &v13);
  if (v14 != 2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    void *exception = &off_23FDF58;
  }
  sub_54214(a2, v13);
  sub_5521C((uint64_t *)v14, &v13);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
}

void sub_39D4A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_39D4E0()
{
}

void sub_39D588()
{
  sub_395FB0(v0);
  operator delete();
}

char *sub_39D5B4(void *a1, char *__src, char *a3)
{
  uint64_t v4 = __src;
  size_t v6 = (char *)a1[1];
  unint64_t v7 = a1[2];
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v9 = (char *)*a1;
    uint64_t v10 = (uint64_t)&v6[-*a1 + 1];
    if (v10 < 0) {
      sub_2E00();
    }
    uint64_t v11 = __src - v9;
    unint64_t v12 = v7 - (void)v9;
    if (2 * v12 > v10) {
      uint64_t v10 = 2 * v12;
    }
    if (v12 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v13 = v10;
    }
    if (v13)
    {
      unsigned int v14 = (char *)operator new(v13);
      uint64_t v15 = &v14[v11];
      unint64_t v16 = &v14[v13];
      if (v11 != v13)
      {
LABEL_30:
        *uint64_t v15 = *a3;
        uint64_t v20 = v15;
        if (v9 != v4)
        {
          unint64_t v21 = v4 - v9;
          unint64_t v22 = v4;
          uint64_t v20 = v15;
          if ((unint64_t)(v4 - v9) < 0x20) {
            goto LABEL_46;
          }
          unint64_t v22 = v4;
          uint64_t v20 = v15;
          if ((unint64_t)(v4 - v15) < 0x20) {
            goto LABEL_46;
          }
          unint64_t v22 = &v4[-(v21 & 0xFFFFFFFFFFFFFFE0)];
          uint64_t v20 = &v15[-(v21 & 0xFFFFFFFFFFFFFFE0)];
          unint64_t v23 = v15 - 16;
          uint64_t v24 = v4 - 16;
          unint64_t v25 = v21 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v26 = *(_OWORD *)v24;
            *((_OWORD *)v23 - 1) = *((_OWORD *)v24 - 1);
            *(_OWORD *)unint64_t v23 = v26;
            v23 -= 32;
            v24 -= 32;
            v25 -= 32;
          }
          while (v25);
          if (v21 != (v21 & 0xFFFFFFFFFFFFFFE0))
          {
LABEL_46:
            do
            {
              char v27 = *--v22;
              *--uint64_t v20 = v27;
            }
            while (v22 != v9);
          }
        }
        uint64_t v28 = (unsigned char *)a1[1];
        uint64_t v29 = v28 - v4;
        if (v28 != v4) {
          memmove(v15 + 1, v4, v28 - v4);
        }
        uint64_t v30 = (char *)*a1;
        *a1 = v20;
        a1[1] = &v15[v29 + 1];
        a1[2] = v16;
        if (v30) {
          operator delete(v30);
        }
        return v15;
      }
    }
    else
    {
      unsigned int v14 = 0;
      uint64_t v15 = (char *)(__src - v9);
      unint64_t v16 = 0;
      if (v11) {
        goto LABEL_30;
      }
    }
    if (v11 < 1)
    {
      if ((unint64_t)(2 * v11) <= 1) {
        size_t v18 = 1;
      }
      else {
        size_t v18 = 2 * v11;
      }
      long long v19 = (char *)operator new(v18);
      uint64_t v15 = &v19[v18 >> 2];
      unint64_t v16 = &v19[v18];
      if (v14)
      {
        operator delete(v14);
        uint64_t v9 = (char *)*a1;
      }
    }
    else
    {
      if (v11 + 1 >= 0) {
        uint64_t v17 = v11 + 1;
      }
      else {
        uint64_t v17 = v11 + 2;
      }
      v15 -= v17 >> 1;
    }
    goto LABEL_30;
  }
  if (__src != v6)
  {
    uint64_t v8 = __src + 1;
    if (v6)
    {
      *size_t v6 = *(v6 - 1);
      a1[1] = v6 + 1;
      if (v6 == v8) {
        goto LABEL_24;
      }
    }
    else
    {
      a1[1] = 0;
      if (__src == (char *)-1)
      {
LABEL_24:
        *uint64_t v4 = *a3;
        return v4;
      }
    }
    memmove(__src + 1, __src, v6 - v8);
    goto LABEL_24;
  }
  *__src = *a3;
  a1[1] = __src + 1;
  return v4;
}

void sub_39D800(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_39D818()
{
  unk_25575C7 = 16641;
  word_25575B0 = 65;
  byte_25575DF = 1;
  byte_25575C9 = 0;
}

void sub_39D840(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t a7, char a8)
{
  char v12 = a3;
  char v11 = a5;
  char v10 = a6;
  char v9 = a8;
  long long v8 = *(_OWORD *)a1;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  sub_2ADF6C(&v8);
}

void sub_39D9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v16);
  sub_14A84((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_39D9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_39D9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_39D9FC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[1];
  v4[0] = *a3;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  sub_390DC4(a2, (uint64_t)v4);
}

void sub_39DAC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_20A6E64(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_39DAD8()
{
  unk_25575F7 = 16641;
  word_25575E0 = 65;
  byte_255760F = 1;
  byte_25575F9 = 0;
}

uint64_t sub_39DB00(uint64_t *a1, uint64_t a2)
{
  *(void *)std::string __p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_20B8E90;
  strcpy(*(char **)__p, "AnalyticsMetricsRelevanceChecks");
  long long v106 = 0;
  long long v107 = 0;
  long long v108 = 0;
  uint64_t v4 = sub_374CDC(a2, (uint64_t)__p, (uint64_t *)&v106);
  uint64_t v5 = v106;
  if (v106)
  {
    size_t v6 = v107;
    unint64_t v7 = v106;
    if (v107 != v106)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete((void *)*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      unint64_t v7 = v106;
    }
    long long v107 = v5;
    operator delete(v7);
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)std::string __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20B9280;
  strcpy(*(char **)__p, "maneuver_pathlet_metrics_relevance");
  long long v8 = (void *)sub_560F4(v4, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  HIBYTE(v101) = 7;
  strcpy((char *)&v99, "enabled");
  if (!sub_29D62C(v8, (uint64_t)&v99))
  {
    if (SHIBYTE(v101) < 0) {
      operator delete(v99);
    }
    goto LABEL_69;
  }
  __p[23] = 12;
  strcpy(__p, "min_length_m");
  uint64_t v9 = sub_5CDE0(v8, __p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  __p[23] = 12;
  strcpy(__p, "max_length_m");
  uint64_t v10 = sub_5CDE0(v8, __p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  sub_45EFA0(a1, (uint64_t)__p);
  sub_45F090(a1, (uint64_t)&v106);
  int64_t v11 = ((unsigned char *)v89 - (unsigned char *)v88) >> 3;
  unint64_t v12 = v11 - 1;
  if (v89 == v88)
  {
    size_t v13 = v111;
    if (v111 != v112)
    {
      uint64_t v14 = *(void *)__p;
      if (!*(unsigned char *)(*(void *)__p + 48) || (uint64_t v15 = *(void *)(*(void *)__p + 40), v15 <= v9) || v15 >= v10)
      {
        unint64_t v16 = *(void *)&__p[8];
        do
        {
          v14 += 56;
          *(void *)std::string __p = v14;
          if (v16 < v12)
          {
            while (v14 == *((void *)v88 + v16))
            {
              *(void *)&__p[8] = v16 + 1;
              uint64_t v14 = *(void *)(*(void *)&__p[16] + 8 + 8 * v16);
              *(void *)std::string __p = v14;
              ++v16;
              if (v12 == *(void *)&__p[8])
              {
                unint64_t v16 = v12;
                break;
              }
            }
          }
          uint64_t v17 = *(void *)(v14 + 40);
          if (*(unsigned char *)(v14 + 48)) {
            BOOL v18 = v17 <= v9;
          }
          else {
            BOOL v18 = 1;
          }
        }
        while (v18 || v17 >= v10);
      }
      goto LABEL_126;
    }
    goto LABEL_56;
  }
  size_t v13 = v111;
  uint64_t v21 = *(void *)__p;
  unint64_t v20 = *(void *)&__p[8];
  if (v111 != v112)
  {
    if (*(void **)&__p[8] != v107 || *(void **)__p != v106)
    {
      while (1)
      {
        uint64_t v22 = *(void *)(v21 + 40);
        BOOL v23 = !*(unsigned char *)(v21 + 48) || v22 <= v9;
        BOOL v24 = !v23 && v22 < v10;
        char v25 = v24;
        if (v24) {
          break;
        }
        v21 += 56;
        *(void *)std::string __p = v21;
        if (v20 < v12)
        {
          while (v21 == *((void *)v88 + v20))
          {
            *(void *)&__p[8] = v20 + 1;
            uint64_t v21 = *(void *)(*(void *)&__p[16] + 8 + 8 * v20);
            *(void *)std::string __p = v21;
            ++v20;
            if (v12 == *(void *)&__p[8])
            {
              unint64_t v20 = v11 - 1;
              break;
            }
          }
        }
        if ((void *)v20 == v107 && (void *)v21 == v106) {
          goto LABEL_56;
        }
      }
LABEL_57:
      if (!v13) {
        goto LABEL_59;
      }
      goto LABEL_58;
    }
LABEL_56:
    char v25 = 0;
    goto LABEL_57;
  }
  if (!*(unsigned char *)(*(void *)__p + 48) || (uint64_t v55 = *(void *)(*(void *)__p + 40), v55 <= v9) || v55 >= v10)
  {
    int64_t v56 = v11 - 2;
    do
    {
      v21 += 56;
      *(void *)std::string __p = v21;
      if (v20 < v12 && v21 == *((void *)v88 + v20))
      {
        while (1)
        {
          uint64_t v21 = *(void *)(*(void *)&__p[16] + 8 + 8 * v20);
          *(void *)std::string __p = v21;
          if (v56 == v20) {
            break;
          }
          uint64_t v60 = *((void *)v88 + ++v20);
          if (v60 != v21) {
            goto LABEL_130;
          }
        }
        unint64_t v20 = v12;
LABEL_130:
        *(void *)&__p[8] = v20;
      }
      uint64_t v57 = *(void *)(v21 + 40);
      if (*(unsigned char *)(v21 + 48)) {
        BOOL v58 = v57 <= v9;
      }
      else {
        BOOL v58 = 1;
      }
    }
    while (v58 || v57 >= v10);
  }
LABEL_126:
  char v25 = 1;
  if (v13)
  {
LABEL_58:
    uint64_t v112 = v13;
    operator delete(v13);
  }
LABEL_59:
  if (v108)
  {
    long long v109 = v108;
    operator delete(v108);
  }
  if (v88)
  {
    uint64_t v89 = v88;
    operator delete(v88);
  }
  if (*(void *)&__p[16])
  {
    long long v86 = *(void **)&__p[16];
    operator delete(*(void **)&__p[16]);
  }
  if (SHIBYTE(v101) < 0)
  {
    operator delete(v99);
    if (v25) {
      return 1;
    }
  }
  else if (v25)
  {
    return 1;
  }
LABEL_69:
  *(void *)std::string __p = operator new(0x30uLL);
  *(_OWORD *)&__p[8] = xmmword_20B93C0;
  strcpy(*(char **)__p, "turn_based_live_speeds_metrics_relevance");
  long long v26 = (void *)sub_560F4(v4, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  HIBYTE(v101) = 7;
  strcpy((char *)&v99, "enabled");
  if (!sub_29D62C(v26, (uint64_t)&v99))
  {
    if (SHIBYTE(v101) < 0) {
      operator delete(v99);
    }
    goto LABEL_111;
  }
  long long v106 = 0;
  long long v107 = 0;
  long long v108 = 0;
  sub_EF25B8(__p, a2);
  char v27 = (uint64_t *)nullsub_1(a1);
  uint64_t v28 = *v27;
  uint64_t v29 = v27[1];
  if (*v27 == v29)
  {
LABEL_91:
    char v41 = 0;
    char v42 = (char *)v97;
    if (!v97) {
      goto LABEL_101;
    }
  }
  else
  {
    while (1)
    {
      long long v107 = v106;
      sub_46DD68(v28, &v82);
      unint64_t v31 = v82.n128_u64[1];
      uint64_t v30 = (uint64_t *)v82.n128_u64[0];
      if (v82.n128_u64[0] != v82.n128_u64[1])
      {
        uint64_t v32 = (char *)v107;
        do
        {
          v84[0] = *v30;
          uint64_t v32 = sub_39E79C((unint64_t *)&v106, v32, v84) + 8;
          v30 += 7;
        }
        while (v30 != (uint64_t *)v31);
      }
      uint64_t v33 = sub_46DE4C(v28);
      if (v33) {
        break;
      }
LABEL_74:
      v28 += 1056;
      if (v28 == v29) {
        goto LABEL_91;
      }
    }
    uint64_t v34 = 0;
    uint64_t v35 = 1;
    while (1)
    {
      v82.n128_u64[0] = (unint64_t)&v106[v35];
      v82.n128_u64[1] = (unint64_t)v107;
      unint64_t v36 = *(void *)(sub_3C80F8(v28) + v34);
      v84[0] = 0;
      v84[1] = 0;
      double v37 = sub_EF34EC((uint64_t)__p, v36, v84);
      double v38 = sub_EF34EC((uint64_t)__p, v36, (uint64_t *)&v82);
      double v39 = vabdd_f64(v37, v38);
      if (v37 != v38 && v39 >= 2.22044605e-16) {
        break;
      }
      v34 += 56;
      ++v35;
      if (!--v33) {
        goto LABEL_74;
      }
    }
    char v41 = 1;
    char v42 = (char *)v97;
    if (!v97) {
      goto LABEL_101;
    }
  }
  unint64_t v43 = v98;
  uint64_t v44 = v42;
  if (v98 != v42)
  {
    do
    {
      uint64_t v45 = (void *)*((void *)v43 - 3);
      if (v45)
      {
        *((void *)v43 - 2) = v45;
        operator delete(v45);
      }
      if (*(v43 - 25) < 0) {
        operator delete(*((void **)v43 - 6));
      }
      v43 -= 48;
    }
    while (v43 != v42);
    uint64_t v44 = v97;
  }
  long long v98 = v42;
  operator delete(v44);
LABEL_101:
  sub_4814((uint64_t)&v96);
  if (v92)
  {
    long long v93 = v92;
    operator delete(v92);
  }
  if (v89)
  {
    uint64_t v90 = v89;
    operator delete(v89);
  }
  if (v106)
  {
    long long v107 = v106;
    operator delete(v106);
  }
  if (SHIBYTE(v101) < 0)
  {
    operator delete(v99);
    if (v41) {
      return 1;
    }
  }
  else if (v41)
  {
    return 1;
  }
LABEL_111:
  *(void *)std::string __p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_20B91B0;
  strcpy(*(char **)__p, "hov_speeds_metrics_relevance");
  uint64_t v46 = (void *)sub_560F4(v4, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  char v83 = 7;
  strcpy((char *)&v82, "enabled");
  if (!sub_29D62C(v46, (uint64_t)&v82))
  {
    if (v83 < 0) {
      operator delete((void *)v82.n128_u64[0]);
    }
LABEL_195:
    *(void *)std::string __p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_20B8E90;
    strcpy(*(char **)__p, "route_biasing_metrics_relevance");
    uint64_t v79 = (void *)sub_560F4(v4, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    __p[23] = 7;
    strcpy(__p, "enabled");
    if (sub_29D62C(v79, (uint64_t)__p))
    {
      int v80 = sub_45FE1C((uint64_t)a1);
      int v81 = v80;
      if ((__p[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__p);
        if (v81 == 1) {
          return 1;
        }
      }
      else if (v80 == 1)
      {
        return 1;
      }
    }
    else if ((__p[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__p);
    }
    return 0;
  }
  sub_45EB40((char *)a1, (uint64_t)__p);
  sub_39ECCC((uint64_t)&v106, (long long *)__p);
  sub_39ECCC((uint64_t)&v99, &v91);
  unint64_t v47 = v112;
  uint64_t v48 = v113;
  char v49 = v104;
  unint64_t v50 = v105;
  if (v112 == v113 || v104 == v105) {
    goto LABEL_151;
  }
  if (v108 == v101)
  {
    if (v106)
    {
      uint64_t v51 = v107;
      unint64_t v52 = sub_46C760(v106);
      BOOL v53 = (unint64_t)v51 < v52;
      uint64_t v54 = v99;
      if (!v99)
      {
LABEL_119:
        if ((unint64_t)v51 < v52) {
          goto LABEL_152;
        }
LABEL_172:
        char v61 = 0;
LABEL_173:
        uint64_t v77 = v104;
        if (!v104) {
          goto LABEL_175;
        }
        goto LABEL_174;
      }
    }
    else
    {
      BOOL v53 = 0;
      char v61 = 0;
      uint64_t v54 = v99;
      if (!v99) {
        goto LABEL_173;
      }
    }
    unint64_t v62 = v100;
    unint64_t v63 = sub_46C760(v54);
    if (v62 < v63 && v53) {
      goto LABEL_192;
    }
    if (v53 != v62 < v63) {
      goto LABEL_152;
    }
    goto LABEL_172;
  }
LABEL_152:
  while (1)
  {
    char v66 = (int **)sub_46C8EC(v106, (uint64_t)v107);
    uint64_t v67 = (char *)*v66;
    char v68 = (unsigned __int16 *)((char *)*v66 - **v66);
    unsigned int v69 = *v68;
    if (!*((unsigned char *)v66 + 38)) {
      break;
    }
    if (v69 >= 0xB)
    {
      unsigned int v70 = v68[5];
      if (v70)
      {
        if ((*(_DWORD *)&v67[v70] & 0x20) != 0) {
          goto LABEL_205;
        }
      }
    }
LABEL_160:
    sub_39EBB4(&v106);
    unint64_t v47 = v112;
    uint64_t v48 = v113;
    char v49 = v104;
    unint64_t v50 = v105;
    if (v112 == v113 || v104 == v105)
    {
LABEL_151:
      if ((v47 == v48) == (v49 == v50)) {
        goto LABEL_172;
      }
    }
    else if (v108 == v101)
    {
      if (v106)
      {
        uint64_t v51 = v107;
        unint64_t v52 = sub_46C760(v106);
        BOOL v72 = (unint64_t)v51 < v52;
        uint64_t v73 = v99;
        if (!v99) {
          goto LABEL_119;
        }
      }
      else
      {
        BOOL v72 = 0;
        char v61 = 0;
        uint64_t v73 = v99;
        if (!v99) {
          goto LABEL_173;
        }
      }
      unint64_t v74 = v100;
      unint64_t v75 = sub_46C760(v73);
      if (v74 < v75 && v72)
      {
LABEL_192:
        uint64_t v78 = sub_46C8EC(v106, (uint64_t)v107);
        if (v78 == sub_46C8EC(v99, v100)) {
          goto LABEL_172;
        }
      }
      else if (((v72 ^ (v74 < v75)) & 1) == 0)
      {
        goto LABEL_172;
      }
    }
  }
  if (v69 < 0xB) {
    goto LABEL_160;
  }
  unsigned int v71 = v68[5];
  if (!v71 || (*(_DWORD *)&v67[v71] & 0x10) == 0) {
    goto LABEL_160;
  }
LABEL_205:
  char v61 = 1;
  uint64_t v77 = v104;
  if (v104)
  {
LABEL_174:
    long long v105 = v77;
    operator delete(v77);
  }
LABEL_175:
  if (v102)
  {
    long long v103 = v102;
    operator delete(v102);
  }
  if (v112)
  {
    uint64_t v113 = v112;
    operator delete(v112);
  }
  if (v109)
  {
    long long v110 = v109;
    operator delete(v109);
  }
  if (v94)
  {
    long long v95 = v94;
    operator delete(v94);
  }
  if (v92)
  {
    long long v93 = v92;
    operator delete(v92);
  }
  if (v89)
  {
    uint64_t v90 = v89;
    operator delete(v89);
  }
  if (v86)
  {
    long long v87 = v86;
    operator delete(v86);
  }
  if (v83 < 0)
  {
    operator delete((void *)v82.n128_u64[0]);
    if ((v61 & 1) == 0) {
      goto LABEL_195;
    }
  }
  else if ((v61 & 1) == 0)
  {
    goto LABEL_195;
  }
  return 1;
}

void *sub_39E6F0(void *a1)
{
  uint64_t v2 = a1[57];
  if (v2)
  {
    uint64_t v3 = a1[58];
    uint64_t v4 = (void *)a1[57];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(void *)(v3 - 16) = v5;
          operator delete(v5);
        }
        if (*(char *)(v3 - 25) < 0) {
          operator delete(*(void **)(v3 - 48));
        }
        v3 -= 48;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[57];
    }
    a1[58] = v2;
    operator delete(v4);
  }
  sub_4814((uint64_t)(a1 + 46));
  size_t v6 = (void *)a1[12];
  if (v6)
  {
    a1[13] = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)a1[6];
  if (v7)
  {
    a1[7] = v7;
    operator delete(v7);
  }
  return a1;
}

char *sub_39E79C(unint64_t *a1, void *a2, void *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 3;
  uint64_t v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)uint64_t v9 = *a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    size_t v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      long long v19 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      uint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        long long v19 = (void *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        long long v19 = (void *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          size_t v13 = (uint64_t *)((char *)v13 + v21);
          long long v19 = (void *)(v5 + v21);
          uint64_t v22 = (_OWORD *)(v5 + 16);
          BOOL v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *uint64_t v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v56 = *v13++;
        *v19++ = v56;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)uint64_t v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    uint64_t v30 = (char *)operator new(8 * v29);
    unint64_t v31 = &v30[8 * v8];
    uint64_t v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v30 = 0;
    unint64_t v31 = (char *)(8 * v8);
    uint64_t v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((void *)v6 == a2) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = v7 >> 2;
    }
    if (v53 >> 61) {
      sub_188D718();
    }
    uint64_t v54 = (char *)operator new(8 * v53);
    unint64_t v31 = &v54[8 * (v53 >> 2)];
    uint64_t v32 = &v54[8 * v53];
    if (v30)
    {
      uint64_t v55 = &v54[8 * v53];
      operator delete(v30);
      uint64_t v32 = v55;
      uint64_t v34 = (char *)*a1;
      *(void *)unint64_t v31 = *a3;
      uint64_t v35 = v31 + 8;
      unint64_t v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  uint64_t v34 = (char *)v6;
  *(void *)unint64_t v31 = *a3;
  uint64_t v35 = v31 + 8;
  unint64_t v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    double v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    double v39 = v9;
    unint64_t v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    double v39 = v9;
    unint64_t v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    double v39 = &v9[-v41];
    unint64_t v36 = &v31[-v41];
    char v42 = v31 - 16;
    unint64_t v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)char v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  unint64_t v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    char v49 = v9;
    size_t v50 = v47 - v9;
    uint64_t v51 = v32;
    memmove(v35, v49, v50);
    uint64_t v32 = v51;
  }
  unint64_t v52 = (void *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v35[v48];
  a1[2] = (unint64_t)v32;
  if (v52) {
    operator delete(v52);
  }
  return v31;
}

void sub_39EAF4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_39EB0C(void *a1)
{
  uint64_t v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[12];
  if (v3)
  {
    a1[13] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[6];
  if (v4)
  {
    a1[7] = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)a1[3];
  if (v5)
  {
    a1[4] = v5;
    operator delete(v5);
  }
  return a1;
}

void *sub_39EB70(void *a1)
{
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void **sub_39EBB4(void **a1)
{
  unint64_t v2 = (unint64_t)a1[2];
  a1[1] = (void *)((char *)a1[1] + 1);
  uint64_t v4 = (char *)a1[6];
  for (uint64_t i = (char *)a1[7]; v2 < ((i - v4) >> 4) - 1; uint64_t i = (char *)a1[7])
  {
    unint64_t v6 = &v4[16 * v2];
    if (!*a1)
    {
      if (!*(void *)v6) {
        goto LABEL_3;
      }
      BOOL v9 = 0;
      unint64_t v11 = *(void *)&v4[16 * v2 + 8];
      unint64_t v14 = sub_46C760(*(void **)v6);
LABEL_2:
      if ((v9 ^ (v11 < v14))) {
        return a1;
      }
      goto LABEL_3;
    }
    uint64_t v7 = a1[1];
    unint64_t v8 = sub_46C760(*a1);
    BOOL v9 = (unint64_t)v7 < v8;
    if (*(void *)v6)
    {
      unint64_t v10 = &v4[16 * v2];
      unint64_t v13 = *((void *)v10 + 1);
      uint64_t v12 = (uint64_t *)(v10 + 8);
      unint64_t v11 = v13;
      unint64_t v14 = sub_46C760(*(void **)v6);
      if (!v9 || v11 >= v14) {
        goto LABEL_2;
      }
      uint64_t v16 = sub_46C8EC(*a1, (uint64_t)a1[1]);
      if (v16 != sub_46C8EC(*(void **)v6, *v12)) {
        return a1;
      }
    }
    else if ((unint64_t)v7 < v8)
    {
      return a1;
    }
LABEL_3:
    unint64_t v5 = a1[3];
    unint64_t v2 = (unint64_t)a1[2] + 1;
    a1[2] = (void *)v2;
    *(_OWORD *)a1 = *(_OWORD *)&v5[2 * v2];
    uint64_t v4 = (char *)a1[6];
  }
  return a1;
}

uint64_t sub_39ECCC(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  unint64_t v6 = (unsigned char *)*((void *)a2 + 3);
  unint64_t v5 = (unsigned char *)*((void *)a2 + 4);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    unint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v8;
    BOOL v9 = &v8[16 * (v7 >> 4)];
    *(void *)(a1 + 40) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 32) = v9;
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  unint64_t v11 = (unsigned char *)*((void *)a2 + 6);
  unint64_t v10 = (unsigned char *)*((void *)a2 + 7);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      sub_2E00();
    }
    unint64_t v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 48) = v13;
    *(void *)(a1 + 56) = v13;
    unint64_t v14 = &v13[16 * (v12 >> 4)];
    *(void *)(a1 + 64) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 56) = v14;
  }
  return a1;
}

void sub_39EDB4(_Unwind_Exception *exception_object)
{
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 56) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_39EDE8()
{
  unk_2557627 = 16641;
  word_2557610 = 65;
  byte_255763F = 1;
  byte_2557629 = 0;
  byte_2557657 = 3;
  dword_2557640 = 7105633;
}

uint64_t sub_39EE24(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_3EAFD4(a1, a2, a3);
  sub_103E2B8(v8 + 40, a3, a2);
  *(void *)(a1 + 5216) = sub_3750CC(a2);
  HIBYTE(v41[2]) = 20;
  strcpy((char *)v41, "DrivingRouteAnalyzer");
  std::string __p = 0;
  double v37 = 0;
  uint64_t v38 = 0;
  BOOL v9 = sub_374CDC((uint64_t)a2, (uint64_t)v41, (uint64_t *)&__p);
  sub_108A150((void *)(a1 + 5224), a2, v9, a3);
  unint64_t v10 = (std::__shared_weak_count *)__p;
  if (__p)
  {
    unint64_t v11 = v37;
    int64_t v12 = __p;
    if (v37 != __p)
    {
      do
      {
        if (SHIBYTE(v11[-1].__shared_weak_owners_) < 0) {
          operator delete(v11[-1].__vftable);
        }
        --v11;
      }
      while (v11 != v10);
      int64_t v12 = __p;
    }
    double v37 = v10;
    operator delete(v12);
  }
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  *(void *)(a1 + 5880) = sub_376B90(a2);
  *(void *)(a1 + 5888) = a2;
  *(void *)(a1 + 5896) = a4;
  *(void *)(a1 + 5904) = 0;
  *(void *)(a1 + 5920) = 0;
  *(void *)(a1 + 5912) = 0;
  HIBYTE(v41[2]) = 16;
  strcpy((char *)v41, "ClosureAnalytics");
  std::string __p = 0;
  double v37 = 0;
  uint64_t v38 = 0;
  unint64_t v13 = sub_374CDC((uint64_t)a2, (uint64_t)v41, (uint64_t *)&__p);
  sub_3A5F4C((BOOL *)(a1 + 5928), v13);
  unint64_t v14 = (std::__shared_weak_count *)__p;
  if (__p)
  {
    uint64_t v15 = v37;
    uint64_t v16 = __p;
    if (v37 != __p)
    {
      do
      {
        if (SHIBYTE(v15[-1].__shared_weak_owners_) < 0) {
          operator delete(v15[-1].__vftable);
        }
        --v15;
      }
      while (v15 != v14);
      uint64_t v16 = __p;
    }
    double v37 = v14;
    operator delete(v16);
  }
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  *(unsigned char *)(a1 + 5948) = 0;
  *(_OWORD *)(a1 + 5932) = 0u;
  uint64_t v17 = *(void *)(a1 + 5888);
  HIBYTE(v41[2]) = 16;
  strcpy((char *)v41, "ClosureAnalytics");
  std::string __p = 0;
  double v37 = 0;
  uint64_t v38 = 0;
  unint64_t v18 = sub_374CDC(v17, (uint64_t)v41, (uint64_t *)&__p);
  v35[0] = operator new(0x28uLL);
  *(_OWORD *)&v35[1] = xmmword_20B9960;
  strcpy((char *)v35[0], "metrics_relevance_cross_check_overrides");
  long long v19 = (uint64_t *)sub_5C4AC(v18, (uint64_t)v35);
  if (SHIBYTE(v35[2]) < 0) {
    operator delete(v35[0]);
  }
  uint64_t v20 = (std::__shared_weak_count *)__p;
  if (__p)
  {
    uint64_t v21 = v37;
    uint64_t v22 = __p;
    if (v37 != __p)
    {
      do
      {
        if (SHIBYTE(v21[-1].__shared_weak_owners_) < 0) {
          operator delete(v21[-1].__vftable);
        }
        --v21;
      }
      while (v21 != v20);
      uint64_t v22 = __p;
    }
    double v37 = v20;
    operator delete(v22);
  }
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  memset(v35, 0, 24);
  sub_3A7364((char **)v35, (v19[1] - *v19) >> 4);
  uint64_t v23 = *v19;
  uint64_t v24 = v19[1];
  if (*v19 != v24)
  {
    long long v25 = (char *)v35[1];
    do
    {
      if (*(_DWORD *)(v23 + 8) != 2)
      {
        exceptiouint64_t n = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      sub_3729D0(*(void *)(a1 + 5888), *(void *)v23, (uint64_t)v41);
      uint64_t v26 = sub_374D14(v41);
      char v27 = *(atomic_ullong **)(v26 + 8);
      std::string __p = *(void **)v26;
      double v37 = (std::__shared_weak_count *)v27;
      if (v27) {
        atomic_fetch_add_explicit(v27 + 1, 1uLL, memory_order_relaxed);
      }
      uint64_t v28 = *(std::__shared_weak_count **)(v26 + 24);
      uint64_t v38 = *(void *)(v26 + 16);
      double v39 = v28;
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v29 = *(_OWORD *)(v26 + 32);
      *(_OWORD *)((char *)v40 + 13) = *(_OWORD *)(v26 + 45);
      v40[0] = v29;
      sub_373C88(v41);
      uint64_t v30 = sub_3A75FC(v35, v25, (uint64_t)&__p);
      unint64_t v31 = v39;
      if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
        uint64_t v32 = v37;
        if (v37)
        {
LABEL_44:
          if (!atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
      }
      else
      {
        uint64_t v32 = v37;
        if (v37) {
          goto LABEL_44;
        }
      }
      long long v25 = v30 + 64;
      v23 += 16;
    }
    while (v23 != v24);
  }
  sub_3A7E68((void **)(a1 + 5904));
  *(_OWORD *)(a1 + 5904) = *(_OWORD *)v35;
  *(void **)(a1 + 5920) = v35[2];
  memset(v35, 0, 24);
  v41[0] = v35;
  sub_3A6108(v41);
  return a1;
}

void sub_39F2DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  *(void *)(v33 - 96) = &__p;
  sub_3A6108((void ***)(v33 - 96));
  sub_3A6108((void ***)&__p);
  uint64_t v35 = *(void **)(v32 + 5320);
  if (v35)
  {
    *(void *)(v32 + 5328) = v35;
    operator delete(v35);
  }
  sub_3A6230(v31);
  _Unwind_Resume(a1);
}

void sub_39F3D4(std::string::size_type a1, char **a2, long long **a3, uint64_t ***a4, uint64_t *a5, uint64_t a6, int a7, int64x2_t *a8)
{
  *(unsigned char *)(a1 + 5948) = 0;
  *(_OWORD *)(a1 + 5932) = 0u;
  long long v217 = (unsigned char *)(a1 + 5928);
  if (*(unsigned char *)(a1 + 5928))
  {
    uint64_t v8 = a6;
    *(_OWORD *)uint64_t v274 = 0uLL;
    *(_OWORD *)uint64_t v275 = 0uLL;
    int v276 = 1065353216;
    unint64_t v10 = *(long long ***)(a6 + 8);
    unint64_t v11 = *(long long ***)(a6 + 16);
    while (v10 != v11)
    {
      int64_t v12 = *v10;
      unint64_t v13 = v10[1];
      while (v12 != v13)
      {
        if (*((char *)v12 + 23) < 0)
        {
          sub_4200(v278, *(void **)v12, *((void *)v12 + 1));
        }
        else
        {
          long long v14 = *v12;
          uint64_t v279 = (uint64_t *)*((void *)v12 + 2);
          *(_OWORD *)uint64_t v278 = v14;
        }
        *(_OWORD *)std::string __p = *(_OWORD *)v278;
        uint64_t v15 = v279;
        v278[1] = 0;
        v278[0] = 0;
        *(void *)&long long v280 = v12;
        uint64_t v279 = 0;
        *(void *)uint64_t v289 = v15;
        *(void *)&v289[8] = v12;
        sub_3A7F70((uint64_t)v274, (uint64_t)__p, (uint64_t)__p);
        if ((v289[7] & 0x80000000) != 0)
        {
          operator delete(__p[0]);
          if ((SHIBYTE(v279) & 0x80000000) == 0) {
            goto LABEL_7;
          }
        }
        else if ((SHIBYTE(v279) & 0x80000000) == 0)
        {
          goto LABEL_7;
        }
        operator delete(v278[0]);
LABEL_7:
        v12 += 5;
      }
      v10 += 9;
    }
    *(_OWORD *)uint64_t v271 = 0u;
    *(_OWORD *)unint64_t v272 = 0u;
    int v273 = 1065353216;
    uint64_t v17 = *a3;
    uint64_t v16 = a3[1];
    if (v17 != v16)
    {
      while (1)
      {
        uint64_t v18 = **(void **)v17 + 424 * *((void *)v17 + 1);
        if (*(char *)(v18 + 63) < 0)
        {
          sub_4200(v278, *(void **)(v18 + 40), *(void *)(v18 + 48));
        }
        else
        {
          long long v19 = *(_OWORD *)(v18 + 40);
          uint64_t v279 = *(uint64_t **)(v18 + 56);
          *(_OWORD *)uint64_t v278 = v19;
        }
        long long v20 = v17[1];
        long long v280 = *v17;
        *(_OWORD *)v281 = v20;
        long long v21 = v17[2];
        long long v22 = v17[3];
        long long v23 = v17[5];
        long long v283 = v17[4];
        long long v284 = v23;
        *(_OWORD *)&v281[16] = v21;
        long long v282 = v22;
        long long v24 = v17[6];
        long long v25 = v17[7];
        long long v26 = v17[8];
        uint64_t v287 = *((void *)v17 + 18);
        *(_OWORD *)unint64_t v286 = v25;
        *(_OWORD *)&v286[16] = v26;
        long long v285 = v24;
        *(void *)uint64_t v289 = v279;
        *(_OWORD *)std::string __p = *(_OWORD *)v278;
        uint64_t v279 = 0;
        v278[0] = 0;
        v278[1] = 0;
        long long v27 = v17[1];
        *(_OWORD *)&v289[8] = *v17;
        *(_OWORD *)&v289[24] = v27;
        long long v28 = v17[2];
        long long v29 = v17[3];
        long long v30 = v17[5];
        long long v291 = v17[4];
        long long v292 = v30;
        *(_OWORD *)&v289[40] = v28;
        long long v290 = v29;
        long long v31 = v17[6];
        long long v32 = v17[7];
        long long v33 = v17[8];
        uint64_t v296 = *((void *)v17 + 18);
        long long v294 = v32;
        long long v295 = v33;
        long long v293 = v31;
        sub_3A83E4((uint64_t)v271, (uint64_t)__p, (uint64_t)__p);
        if ((v289[7] & 0x80000000) != 0)
        {
          operator delete(__p[0]);
          if ((SHIBYTE(v279) & 0x80000000) == 0) {
            goto LABEL_18;
          }
LABEL_24:
          operator delete(v278[0]);
          uint64_t v17 = (long long *)((char *)v17 + 152);
          if (v17 == v16) {
            break;
          }
        }
        else
        {
          if (SHIBYTE(v279) < 0) {
            goto LABEL_24;
          }
LABEL_18:
          uint64_t v17 = (long long *)((char *)v17 + 152);
          if (v17 == v16) {
            break;
          }
        }
      }
    }
    std::string v219 = a2[1];
    if (*a2 != v219)
    {
      uint64_t v34 = *a2;
      if (a7) {
        double v35 = 0.0;
      }
      else {
        double v35 = -1.0;
      }
      int64x2_t v224 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
      int64x2_t v225 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      uint64_t v220 = v8;
      do
      {
        long long v229 = v34;
        int v36 = sub_45FE24((uint64_t)v34);
        int v37 = v36;
        double v39 = (char *)a8[16].i64[0];
        unint64_t v38 = a8[16].u64[1];
        if (v39 != (char *)v38)
        {
          while (*(_DWORD *)v39 != v36)
          {
            v39 += 32;
            if (v39 == (char *)v38) {
              goto LABEL_36;
            }
          }
        }
        if (v39 == (char *)v38)
        {
LABEL_36:
          if (v38 >= a8[17].i64[0])
          {
            uint64_t v40 = sub_3A6738(a8 + 16);
          }
          else
          {
            *(_DWORD *)unint64_t v38 = -1;
            *(void *)(v38 + 16) = 0;
            *(void *)(v38 + 24) = 0;
            uint64_t v40 = (char *)(v38 + 32);
            *(void *)(v38 + 8) = 0;
          }
          a8[16].i64[1] = (uint64_t)v40;
          *((_DWORD *)v40 - 8) = v37;
          double v39 = v40 - 32;
        }
        unint64_t v41 = sub_45FC7C(v229);
        uint64_t v42 = *((void *)v39 + 1);
        unint64_t v43 = (void **)*((void *)v39 + 2);
        unint64_t v44 = 0x8E38E38E38E38E39 * (((uint64_t)v43 - v42) >> 3);
        int v227 = (uint64_t ***)(v39 + 8);
        if (v41 <= v44)
        {
          if (v41 < v44)
          {
            long long v45 = (void **)(v42 + 72 * v41);
            if (v43 == v45)
            {
LABEL_44:
              *((void *)v39 + 2) = v45;
              goto LABEL_45;
            }
            while (2)
            {
              if (*((char *)v43 - 1) < 0)
              {
                operator delete(*(v43 - 3));
                long long v158 = *(v43 - 6);
                if (v158)
                {
LABEL_225:
                  *(v43 - 5) = v158;
                  operator delete(v158);
                }
              }
              else
              {
                long long v158 = *(v43 - 6);
                if (v158) {
                  goto LABEL_225;
                }
              }
              long long v159 = v43 - 9;
              uint64_t v160 = (char *)*(v43 - 9);
              if (v160)
              {
                uint64_t v161 = (char *)*(v43 - 8);
                long long v157 = *(v43 - 9);
                if (v161 != v160)
                {
                  do
                  {
                    uint64_t v162 = (void *)*((void *)v161 - 6);
                    if (v162)
                    {
                      *((void *)v161 - 5) = v162;
                      operator delete(v162);
                    }
                    if (*(v161 - 57) < 0) {
                      operator delete(*((void **)v161 - 10));
                    }
                    v161 -= 80;
                  }
                  while (v161 != v160);
                  long long v157 = *v159;
                }
                *(v43 - 8) = v160;
                operator delete(v157);
              }
              v43 -= 9;
              if (v159 == v45) {
                goto LABEL_44;
              }
              continue;
            }
          }
        }
        else
        {
          sub_3A88A4((char **)v39 + 1, v41 - v44);
        }
LABEL_45:
        sub_108C92C(a1 + 5224, v229, &v270);
        uint64_t v46 = v270.i64[1];
        int64x2_t v48 = v270;
        uint64_t v226 = *(_OWORD *)&v48 >> 64;
        for (uint64_t i = (uint64_t **)*(_OWORD *)&v48; i != (uint64_t **)v46; i += 20)
        {
          char v49 = i[1];
          uint64_t v50 = **i;
          int v51 = sub_104011C(a1 + 40, v50 + 424 * (void)v49);
          __p[1] = 0;
          __p[0] = 0;
          *(void *)uint64_t v289 = 0;
          memset(&v289[16], 0, 32);
          *(_DWORD *)&v289[8] = 0;
          *(_DWORD *)&v289[48] = 0x7FFFFFFF;
          *(void *)&long long v290 = 0x7FFFFFFFFFFFFFFFLL;
          unint64_t v52 = (const std::string *)(v50 + 424 * (void)v49 + 40);
          std::string::operator=((std::string *)__p, v52);
          unint64_t v53 = sub_3A8B18(v274, (uint64_t)v52);
          uint64_t v54 = v53;
          if (v53)
          {
            uint64_t v55 = v53[5];
            if (v51 < 0) {
              char v56 = -5;
            }
            else {
              char v56 = 5;
            }
            unsigned int v57 = v51 / 10
                + (((103 * (char)(v56 + v51 % 10)) >> 15) & 1)
                + ((103 * (char)(v56 + v51 % 10)) >> 10);
            if (*(_DWORD *)(v55 + 24) > v57) {
              unsigned int v57 = *(_DWORD *)(v55 + 24);
            }
            *(_DWORD *)&v289[8] = v57;
            if (__p != (void **)v55)
            {
              uint64_t v59 = *(char **)(v55 + 32);
              BOOL v58 = *(unsigned char **)(v55 + 40);
              unint64_t v60 = v58 - v59;
              unint64_t v61 = *(void *)&v289[32];
              unint64_t v62 = *(char **)&v289[16];
              if (*(void *)&v289[32] - *(void *)&v289[16] >= (unint64_t)(v58 - v59))
              {
                uint64_t v70 = *(void *)&v289[24] - *(void *)&v289[16];
                if (*(void *)&v289[24] - *(void *)&v289[16] >= v60)
                {
                  if (v58 != v59) {
                    memmove(*(void **)&v289[16], v59, v60 - 1);
                  }
                  uint64_t v67 = &v62[v60];
                }
                else
                {
                  if (*(void *)&v289[24] != *(void *)&v289[16])
                  {
                    memmove(*(void **)&v289[16], v59, v70 - 1);
                    unint64_t v62 = *(char **)&v289[24];
                  }
                  unsigned int v71 = &v59[v70];
                  int64_t v72 = v58 - &v59[v70];
                  if (v72) {
                    memmove(v62, v71, v72 - 1);
                  }
                  uint64_t v67 = &v62[v72];
                }
              }
              else
              {
                if (*(void *)&v289[16])
                {
                  *(void *)&v289[24] = *(void *)&v289[16];
                  operator delete(*(void **)&v289[16]);
                  unint64_t v61 = 0;
                  memset(&v289[16], 0, 24);
                }
                if ((v60 & 0x8000000000000000) != 0) {
                  goto LABEL_339;
                }
                uint64_t v63 = 2 * v61;
                if (2 * v61 <= v60) {
                  uint64_t v63 = v58 - v59;
                }
                size_t v64 = v61 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v63;
                if ((v64 & 0x8000000000000000) != 0) {
LABEL_339:
                }
                  sub_2E00();
                uint64_t v65 = (char *)operator new(v64);
                char v66 = v65;
                *(void *)&v289[16] = v65;
                *(void *)&v289[24] = v65;
                *(void *)&v289[32] = &v65[v64];
                if (v58 != v59) {
                  memcpy(v65, v59, v60 - 1);
                }
                uint64_t v67 = &v66[v60];
              }
              *(void *)&v289[24] = v67;
            }
            double v69 = *(double *)(v54[5] + 56);
          }
          else
          {
            if (v51 < 0) {
              char v68 = -5;
            }
            else {
              char v68 = 5;
            }
            *(_DWORD *)&v289[8] = v51 / 10
                                + (((103 * (char)(v68 + v51 % 10)) >> 15) & 1)
                                + ((103 * (char)(v68 + v51 % 10)) >> 10);
            double v69 = v35;
          }
          uint64_t v73 = (uint64_t)&(*v227)[9 * (void)i[4]];
          unint64_t v74 = *(void *)(v73 + 8);
          if (v74 >= *(void *)(v73 + 16))
          {
            uint64_t v76 = sub_3A8D48((char **)&(*v227)[9 * (void)i[4]], (long long *)__p);
          }
          else
          {
            if ((v289[7] & 0x80000000) != 0)
            {
              sub_4200(*(unsigned char **)(v73 + 8), __p[0], (unint64_t)__p[1]);
            }
            else
            {
              long long v75 = *(_OWORD *)__p;
              *(void *)(v74 + 16) = *(void *)v289;
              *(_OWORD *)unint64_t v74 = v75;
            }
            int v77 = *(_DWORD *)&v289[8];
            *(void *)(v74 + 32) = 0;
            *(_DWORD *)(v74 + 24) = v77;
            *(void *)(v74 + 40) = 0;
            *(void *)(v74 + 48) = 0;
            uint64_t v78 = *(const void **)&v289[16];
            uint64_t v79 = *(void *)&v289[24] - *(void *)&v289[16];
            if (*(void *)&v289[24] != *(void *)&v289[16])
            {
              if (v79 < 0) {
                sub_2E00();
              }
              int v80 = (char *)operator new(*(void *)&v289[24] - *(void *)&v289[16]);
              *(void *)(v74 + 32) = v80;
              *(void *)(v74 + 40) = v80;
              int v81 = &v80[v79];
              *(void *)(v74 + 48) = &v80[v79];
              memcpy(v80, v78, v79 - 1);
              *(void *)(v74 + 40) = v81;
            }
            long long v82 = *(_OWORD *)&v289[40];
            *(void *)(v74 + 72) = v290;
            *(_OWORD *)(v74 + 56) = v82;
            uint64_t v76 = (char *)(v74 + 80);
            *(void *)(v73 + 8) = v74 + 80;
          }
          *(void *)(v73 + 8) = v76;
          if (!sub_3A90A0(v271, (uint64_t)v52))
          {
            *(_OWORD *)uint64_t v278 = *(_OWORD *)i;
            BOOL v99 = sub_45FE1C((uint64_t)v229) == 4 && !sub_45FC04((uint64_t)v229);
            unsigned int v100 = sub_45FE1C((uint64_t)v229);
            *(void *)&long long v262 = v52;
            long long v101 = sub_3A92D0((uint64_t)v271, (uint64_t)v52, (uint64_t)&unk_20F06E0, (long long **)&v262);
            BOOL v102 = v100 <= 1 || v100 == 4;
            char v103 = !v102;
            *(_OWORD *)(v101 + 5) = *(_OWORD *)v278;
            *((unsigned char *)v101 + 56) = 1;
            *((unsigned char *)v101 + 57) = v99;
            *((unsigned char *)v101 + 58) = v103;
            *(_WORD *)((char *)v101 + 59) = 0;
            *((unsigned char *)v101 + 61) = 0;
            *((double *)v101 + 8) = v69;
            *(int64x2_t *)(v101 + 9) = v225;
            *((_DWORD *)v101 + 22) = 0x7FFFFFFF;
            v101[12] = 0x7FFFFFFFFFFFFFFFLL;
            *((_DWORD *)v101 + 26) = 0x7FFFFFFF;
            v101[14] = 0x7FFFFFFFFFFFFFFFLL;
            *((_DWORD *)v101 + 30) = 0x7FFFFFFF;
            v101[16] = 0x7FFFFFFFFFFFFFFFLL;
            *((_DWORD *)v101 + 34) = 0x7FFFFFFF;
            v101[18] = 0x7FFFFFFFFFFFFFFFLL;
            *((_DWORD *)v101 + 38) = 0x7FFFFFFF;
            *((int64x2_t *)v101 + 10) = v224;
            *((_DWORD *)v101 + 44) = 0x7FFFFFFF;
            v101[23] = 0x7FFFFFFFFFFFFFFFLL;
            long long v104 = *(void **)&v289[16];
            if (*(void *)&v289[16]) {
              goto LABEL_217;
            }
            goto LABEL_218;
          }
          v278[0] = (void *)v52;
          *((unsigned char *)sub_3A92D0((uint64_t)v271, (uint64_t)v52, (uint64_t)&unk_20F06E0, (long long **)v278) + 57) = 0;
          if (sub_45FC44((uint64_t)v229))
          {
            v278[0] = (void *)v52;
            *((unsigned char *)sub_3A92D0((uint64_t)v271, (uint64_t)v52, (uint64_t)&unk_20F06E0, (long long **)v278) + 58) = 0;
            v278[0] = (void *)v52;
            if (*((_DWORD *)sub_3A92D0((uint64_t)v271, (uint64_t)v52, (uint64_t)&unk_20F06E0, (long long **)v278) + 44) == 0x7FFFFFFF)
            {
              sub_45E97C(v229, (uint64_t)&v262);
              *(_OWORD *)uint64_t v278 = v262;
              char v83 = v264;
              uint64_t v279 = v263;
              *(void *)v281 = 0;
              long long v280 = 0uLL;
              int64_t v84 = v265 - (unsigned char *)v264;
              if (v265 != v264)
              {
                if (v84 < 0) {
                  sub_2E00();
                }
                *(void *)&long long v280 = operator new(v265 - (unsigned char *)v264);
                *((void *)&v280 + 1) = v280;
                uint64_t v85 = v280 + 16 * (v84 >> 4);
                *(void *)v281 = v85;
                memcpy((void *)v280, v83, v84);
                *((void *)&v280 + 1) = v85;
              }
              memset(&v281[8], 0, 24);
              long long v86 = v267;
              int64_t v87 = v268 - (unsigned char *)v267;
              if (v268 != v267)
              {
                if (v87 < 0) {
                  sub_2E00();
                }
                *(void *)&v281[8] = operator new(v268 - (unsigned char *)v267);
                *(void *)&v281[16] = *(void *)&v281[8];
                uint64_t v88 = *(void *)&v281[8] + 16 * (v87 >> 4);
                *(void *)&v281[24] = v88;
                memcpy(*(void **)&v281[8], v86, v87);
                *(void *)&v281[16] = v88;
              }
              if (v86)
              {
                uint64_t v268 = (char *)v86;
                operator delete(v86);
                char v83 = v264;
              }
              if (v83)
              {
                uint64_t v265 = (char *)v83;
                operator delete(v83);
              }
              long long v262 = *((_OWORD *)i + 1);
              uint64_t v263 = i[4];
              uint64_t v265 = 0;
              unint64_t v266 = 0;
              unint64_t v264 = 0;
              uint64_t v90 = i[5];
              uint64_t v89 = i[6];
              int64_t v91 = (char *)v89 - (char *)v90;
              if (v89 == v90)
              {
                long long v93 = 0;
                uint64_t v92 = 0;
                uint64_t v268 = 0;
                uint64_t v269 = 0;
                unint64_t v267 = 0;
                long long v95 = i[8];
                long long v105 = i[9];
                int64_t v96 = (char *)v105 - (char *)v95;
                if (v105 != v95) {
                  goto LABEL_108;
                }
              }
              else
              {
                if (v91 < 0) {
                  sub_2E00();
                }
                uint64_t v92 = (char *)operator new((char *)v89 - (char *)v90);
                unint64_t v264 = v92;
                uint64_t v265 = v92;
                long long v93 = &v92[16 * (v91 >> 4)];
                unint64_t v266 = v93;
                memcpy(v92, v90, v91);
                uint64_t v265 = v93;
                uint64_t v268 = 0;
                uint64_t v269 = 0;
                unint64_t v267 = 0;
                long long v95 = i[8];
                long long v94 = i[9];
                int64_t v96 = (char *)v94 - (char *)v95;
                if (v94 != v95)
                {
LABEL_108:
                  if (v96 < 0) {
                    sub_2E00();
                  }
                  char v97 = (char *)operator new(v96);
                  unint64_t v267 = v97;
                  uint64_t v268 = v97;
                  long long v98 = &v97[16 * (v96 >> 4)];
                  uint64_t v269 = v98;
                  memcpy(v97, v95, v96);
                  uint64_t v268 = v98;
LABEL_123:
                  long long v254 = *(_OWORD *)v278;
                  long long v106 = (const void *)v280;
                  uint64_t v255 = v279;
                  uint64_t v257 = 0;
                  uint64_t v258 = 0;
                  uint64_t v256 = 0;
                  int64_t v107 = *((void *)&v280 + 1) - v280;
                  if (*((void *)&v280 + 1) != (void)v280)
                  {
                    if (v107 < 0) {
                      sub_2E00();
                    }
                    uint64_t v256 = operator new(*((void *)&v280 + 1) - v280);
                    uint64_t v257 = v256;
                    long long v108 = (char *)v256 + 16 * (v107 >> 4);
                    uint64_t v258 = v108;
                    memcpy(v256, v106, v107);
                    uint64_t v257 = v108;
                  }
                  uint64_t v259 = 0;
                  uint64_t v260 = 0;
                  uint64_t v261 = 0;
                  long long v109 = *(const void **)&v281[8];
                  int64_t v110 = *(void *)&v281[16] - *(void *)&v281[8];
                  if (*(void *)&v281[16] == *(void *)&v281[8])
                  {
                    uint64_t v112 = 0;
                    unint64_t v111 = 0;
                  }
                  else
                  {
                    if (v110 < 0) {
                      sub_2E00();
                    }
                    unint64_t v111 = (char *)operator new(*(void *)&v281[16] - *(void *)&v281[8]);
                    uint64_t v259 = v111;
                    uint64_t v260 = v111;
                    uint64_t v112 = &v111[16 * (v110 >> 4)];
                    uint64_t v261 = v112;
                    memcpy(v111, v109, v110);
                    uint64_t v260 = v112;
                  }
                  long long v246 = v262;
                  unint64_t v247 = v263;
                  uint64_t v249 = 0;
                  uint64_t v250 = 0;
                  unint64_t v248 = 0;
                  int64_t v113 = v93 - v92;
                  if (v93 != v92)
                  {
                    if (v113 < 0) {
                      sub_2E00();
                    }
                    uint64_t v114 = (char *)operator new(v93 - v92);
                    int32x4_t v115 = &v114[16 * (v113 >> 4)];
                    unint64_t v248 = v114;
                    uint64_t v250 = v115;
                    memcpy(v114, v92, v113);
                    uint64_t v249 = v115;
                  }
                  uint64_t v251 = 0;
                  uint64_t v252 = 0;
                  unint64_t v253 = 0;
                  uint64_t v116 = v98 - v97;
                  if (v98 == v97)
                  {
                    BOOL v102 = v111 == v112;
                    uint64_t v8 = v220;
                    if (v102) {
                      goto LABEL_154;
                    }
                    goto LABEL_142;
                  }
                  if (v116 < 0) {
                    sub_2E00();
                  }
                  unint64_t v117 = (char *)operator new(v98 - v97);
                  long long v118 = &v117[16 * (v116 >> 4)];
                  uint64_t v251 = v117;
                  unint64_t v253 = v118;
                  memcpy(v117, v97, v98 - v97);
                  uint64_t v252 = v118;
                  BOOL v102 = v111 == v112;
                  uint64_t v8 = v220;
                  if (v102 || v255 != v247) {
                    goto LABEL_142;
                  }
                  if ((void)v254)
                  {
                    unint64_t v119 = *((void *)&v254 + 1);
                    unint64_t v120 = sub_46C760((void *)v254);
                    BOOL v121 = v119 < v120;
                    long long v122 = (void *)v246;
                    if (!(void)v246)
                    {
                      if (v119 >= v120) {
                        goto LABEL_154;
                      }
LABEL_142:
                      int v123 = 0;
                      do
                      {
                        int v124 = sub_46E19C((void *)v254, *((uint64_t *)&v254 + 1), 0);
                        sub_39EBB4((void **)&v254);
                        v123 += v124;
                      }
                      while (!sub_3AA3AC((uint64_t)&v254, (uint64_t)&v246));
                      goto LABEL_155;
                    }
                  }
                  else
                  {
                    long long v122 = (void *)v246;
                    if (!(void)v246) {
                      goto LABEL_154;
                    }
                    BOOL v121 = 0;
                  }
                  unint64_t v125 = *((void *)&v246 + 1);
                  unint64_t v126 = sub_46C760(v122);
                  if (v125 >= v126 || !v121)
                  {
                    if (v121 == v125 < v126) {
                      goto LABEL_154;
                    }
                    goto LABEL_142;
                  }
                  uint64_t v128 = sub_46C8EC((void *)v254, *((uint64_t *)&v254 + 1));
                  if (v128 != sub_46C8EC((void *)v246, *((uint64_t *)&v246 + 1))) {
                    goto LABEL_142;
                  }
LABEL_154:
                  int v123 = 0;
LABEL_155:
                  unint64_t v277 = v52;
                  *((_DWORD *)sub_3A92D0((uint64_t)v271, (uint64_t)v52, (uint64_t)&unk_20F06E0, (long long **)&v277) + 44) = v123;
                  if (v251)
                  {
                    uint64_t v252 = v251;
                    operator delete(v251);
                  }
                  if (v248)
                  {
                    uint64_t v249 = v248;
                    operator delete(v248);
                  }
                  if (v259)
                  {
                    uint64_t v260 = v259;
                    operator delete(v259);
                  }
                  if (v256)
                  {
                    uint64_t v257 = v256;
                    operator delete(v256);
                  }
                  long long v238 = *(_OWORD *)v278;
                  unsigned int v129 = (const void *)v280;
                  long long v239 = v279;
                  long long v241 = 0;
                  long long v242 = 0;
                  long long v240 = 0;
                  int64_t v130 = *((void *)&v280 + 1) - v280;
                  if (*((void *)&v280 + 1) != (void)v280)
                  {
                    if (v130 < 0) {
                      sub_2E00();
                    }
                    long long v240 = operator new(*((void *)&v280 + 1) - v280);
                    long long v241 = v240;
                    int32x4_t v131 = (char *)v240 + 16 * (v130 >> 4);
                    long long v242 = v131;
                    memcpy(v240, v129, v130);
                    long long v241 = v131;
                  }
                  uint64_t v243 = 0;
                  long long v244 = 0;
                  long long v245 = 0;
                  uint64_t v132 = *(const void **)&v281[8];
                  int64_t v133 = *(void *)&v281[16] - *(void *)&v281[8];
                  if (*(void *)&v281[16] == *(void *)&v281[8])
                  {
                    unsigned long long v135 = 0;
                    uint64_t v134 = 0;
                  }
                  else
                  {
                    if (v133 < 0) {
                      sub_2E00();
                    }
                    uint64_t v134 = (char *)operator new(*(void *)&v281[16] - *(void *)&v281[8]);
                    uint64_t v243 = v134;
                    long long v244 = v134;
                    unsigned long long v135 = &v134[16 * (v133 >> 4)];
                    long long v245 = v135;
                    memcpy(v134, v132, v133);
                    long long v244 = v135;
                  }
                  double v136 = *(double *)&v262;
                  long long v230 = v262;
                  unint64_t v137 = v264;
                  long long v231 = v263;
                  long long v233 = 0;
                  long long v234 = 0;
                  long long v232 = 0;
                  int64_t v138 = v265 - (unsigned char *)v264;
                  if (v265 != v264)
                  {
                    if (v138 < 0) {
                      sub_2E00();
                    }
                    long long v232 = operator new(v265 - (unsigned char *)v264);
                    long long v233 = v232;
                    unint64_t v139 = (char *)v232 + 16 * (v138 >> 4);
                    long long v234 = v139;
                    memcpy(v232, v137, v138);
                    long long v233 = v139;
                  }
                  long long v235 = 0;
                  long long v236 = 0;
                  long long v237 = 0;
                  uint64_t v140 = v267;
                  int64_t v141 = v268 - (unsigned char *)v267;
                  if (v268 == v267)
                  {
                    if (v134 == v135) {
                      goto LABEL_194;
                    }
                    goto LABEL_182;
                  }
                  if (v141 < 0) {
                    sub_2E00();
                  }
                  long long v235 = operator new(v268 - (unsigned char *)v267);
                  long long v236 = v235;
                  long long v142 = (char *)v235 + 16 * (v141 >> 4);
                  long long v237 = v142;
                  memcpy(v235, v140, v141);
                  long long v236 = v142;
                  if (v134 == v135 || v239 != v231) {
                    goto LABEL_182;
                  }
                  if ((void)v238)
                  {
                    unint64_t v143 = *((void *)&v238 + 1);
                    unint64_t v144 = sub_46C760((void *)v238);
                    BOOL v145 = v143 < v144;
                    long long v146 = (void *)v230;
                    if (!(void)v230)
                    {
                      if (v143 >= v144) {
                        goto LABEL_194;
                      }
LABEL_182:
                      uint64_t v147 = 0;
                      do
                      {
                        uint64_t v148 = sub_46CCC8((void *)v238, *((unint64_t *)&v238 + 1), v136);
                        sub_39EBB4((void **)&v238);
                        v147 += v148;
                      }
                      while (!sub_3AA3AC((uint64_t)&v238, (uint64_t)&v230));
                      goto LABEL_195;
                    }
                  }
                  else
                  {
                    long long v146 = (void *)v230;
                    if (!(void)v230) {
                      goto LABEL_194;
                    }
                    BOOL v145 = 0;
                  }
                  unint64_t v149 = *((void *)&v230 + 1);
                  unint64_t v150 = sub_46C760(v146);
                  if (v149 >= v150 || !v145)
                  {
                    if (v145 == v149 < v150) {
                      goto LABEL_194;
                    }
                    goto LABEL_182;
                  }
                  uint64_t v152 = sub_46C8EC((void *)v238, *((uint64_t *)&v238 + 1));
                  if (v152 != sub_46C8EC((void *)v230, *((uint64_t *)&v230 + 1))) {
                    goto LABEL_182;
                  }
LABEL_194:
                  uint64_t v147 = 0;
LABEL_195:
                  unint64_t v277 = v52;
                  sub_3A92D0((uint64_t)v271, (uint64_t)v52, (uint64_t)&unk_20F06E0, (long long **)&v277)[23] = v147;
                  if (v235)
                  {
                    long long v236 = v235;
                    operator delete(v235);
                  }
                  if (v232)
                  {
                    long long v233 = v232;
                    operator delete(v232);
                  }
                  if (v243)
                  {
                    long long v244 = v243;
                    operator delete(v243);
                  }
                  if (v240)
                  {
                    long long v241 = v240;
                    operator delete(v240);
                  }
                  if (v267)
                  {
                    uint64_t v268 = (char *)v267;
                    operator delete(v267);
                  }
                  if (v264)
                  {
                    uint64_t v265 = (char *)v264;
                    operator delete(v264);
                  }
                  if (*(void *)&v281[8])
                  {
                    *(void *)&v281[16] = *(void *)&v281[8];
                    operator delete(*(void **)&v281[8]);
                  }
                  if ((void)v280)
                  {
                    *((void *)&v280 + 1) = v280;
                    operator delete((void *)v280);
                  }
                  goto LABEL_211;
                }
              }
              long long v98 = 0;
              char v97 = 0;
              goto LABEL_123;
            }
          }
LABEL_211:
          if (sub_45FE1C((uint64_t)v229) == 4)
          {
            v278[0] = (void *)v52;
            *((unsigned char *)sub_3A92D0((uint64_t)v271, (uint64_t)v52, (uint64_t)&unk_20F06E0, (long long **)v278) + 58) = 0;
            BOOL v153 = sub_45FC04((uint64_t)v229);
            v278[0] = (void *)v52;
            *((unsigned char *)sub_3A92D0((uint64_t)v271, (uint64_t)v52, (uint64_t)&unk_20F06E0, (long long **)v278) + 57) = v153;
          }
          v278[0] = (void *)v52;
          double v154 = *((double *)sub_3A92D0((uint64_t)v271, (uint64_t)v52, (uint64_t)&unk_20F06E0, (long long **)v278) + 8);
          v278[0] = (void *)v52;
          long long v155 = sub_3A92D0((uint64_t)v271, (uint64_t)v52, (uint64_t)&unk_20F06E0, (long long **)v278);
          if (v154 >= v69) {
            double v156 = v154;
          }
          else {
            double v156 = v69;
          }
          *((double *)v155 + 8) = v156;
          long long v104 = *(void **)&v289[16];
          if (*(void *)&v289[16])
          {
LABEL_217:
            *(void *)&v289[24] = v104;
            operator delete(v104);
          }
LABEL_218:
          if ((v289[7] & 0x80000000) != 0) {
            operator delete(__p[0]);
          }
          uint64_t v46 = v226;
        }
        if (*(void *)(v8 + 8) != *(void *)(v8 + 16) && sub_45FE1C((uint64_t)v229) != 4)
        {
          uint64_t v163 = *(void *)(v8 + 8);
          uint64_t v165 = *(void **)v163;
          uint64_t v164 = *(void **)(v163 + 8);
          if (*(void **)v163 != v164)
          {
            uint64_t v166 = *v227;
            do
            {
              if (sub_3A90A0(v271, (uint64_t)v165))
              {
                double v167 = *((double *)v165 + 7);
                v278[0] = v165;
                double v168 = *((double *)sub_3A92D0((uint64_t)v271, (uint64_t)v165, (uint64_t)&unk_20F06E0, (long long **)v278) + 8);
                v278[0] = v165;
                uint64_t v169 = sub_3A92D0((uint64_t)v271, (uint64_t)v165, (uint64_t)&unk_20F06E0, (long long **)v278);
                if (a7) {
                  double v170 = v167;
                }
                else {
                  double v170 = -1.0;
                }
                if (v168 >= v170) {
                  double v170 = v168;
                }
                *((double *)v169 + 8) = v170;
                v278[0] = v165;
                *((_DWORD *)sub_3A92D0((uint64_t)v271, (uint64_t)v165, (uint64_t)&unk_20F06E0, (long long **)v278) + 22) = *((_DWORD *)v165 + 16);
                v278[0] = v165;
                sub_3A92D0((uint64_t)v271, (uint64_t)v165, (uint64_t)&unk_20F06E0, (long long **)v278)[12] = v165[9];
              }
              if (*((double *)v165 + 7) == 0.0) {
                goto LABEL_241;
              }
              unsigned int v172 = *v166;
              unsigned int v171 = v166[1];
              if (*v166 != v171)
              {
                size_t v173 = v165[1];
                uint64_t v174 = *((unsigned __int8 *)v165 + 23);
                if (*((char *)v165 + 23) >= 0) {
                  uint64_t v175 = *((unsigned __int8 *)v165 + 23);
                }
                else {
                  uint64_t v175 = v165[1];
                }
                if ((*((unsigned char *)v165 + 23) & 0x80) != 0)
                {
                  long long v183 = (const void *)*v165;
                  while (1)
                  {
                    uint64_t v184 = *((unsigned __int8 *)v172 + 23);
                    int v185 = (char)v184;
                    if ((v184 & 0x80u) != 0) {
                      uint64_t v184 = v172[1];
                    }
                    if (v175 == v184)
                    {
                      long long v186 = v185 >= 0 ? v172 : (uint64_t *)*v172;
                      if (!memcmp(v183, v186, v173)) {
                        goto LABEL_241;
                      }
                    }
                    v172 += 10;
                    if (v172 == v171) {
                      goto LABEL_240;
                    }
                  }
                }
                if (*((unsigned char *)v165 + 23))
                {
                  do
                  {
                    uint64_t v179 = *((unsigned __int8 *)v172 + 23);
                    int v180 = (char)v179;
                    if ((v179 & 0x80u) != 0) {
                      uint64_t v179 = v172[1];
                    }
                    if (v175 == v179)
                    {
                      uint64_t v181 = 0;
                      if (v180 >= 0) {
                        long long v182 = v172;
                      }
                      else {
                        long long v182 = (uint64_t *)*v172;
                      }
                      while (*((unsigned __int8 *)v165 + v181) == *((unsigned __int8 *)v182 + v181))
                      {
                        if (v174 == ++v181) {
                          goto LABEL_241;
                        }
                      }
                    }
                    v172 += 10;
                  }
                  while (v172 != v171);
                }
                else
                {
                  uint64_t v176 = *((unsigned __int8 *)v172 + 23);
                  if ((v176 & 0x80u) != 0) {
                    uint64_t v176 = v172[1];
                  }
                  if (v176 == v174) {
                    goto LABEL_241;
                  }
                  unint64_t v177 = v172 + 10;
                  while (v177 != v171)
                  {
                    uint64_t v178 = *((unsigned __int8 *)v177 + 23);
                    if ((v178 & 0x80u) != 0) {
                      uint64_t v178 = v177[1];
                    }
                    v177 += 10;
                    if (v175 == v178) {
                      goto LABEL_241;
                    }
                  }
                }
              }
LABEL_240:
              __p[0] = (void *)(v165[5] - v165[4]);
              sub_3A0F90((uint64_t)v166, (uint64_t)v165, (int *)v165 + 6, (unsigned int *)__p);
LABEL_241:
              v165 += 10;
            }
            while (v165 != v164);
          }
        }
        __p[0] = &v270;
        sub_3A6AB0((void ***)__p);
        uint64_t v34 = v229 + 120;
      }
      while (v229 + 120 != v219);
    }
    long long v187 = *a4;
    long long v188 = a4[1];
    if (*a4 != v188)
    {
      int64x2_t v228 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
      do
      {
        if (sub_45E5F4((uint64_t)v187))
        {
          long long v189 = (void *)sub_45E604((uint64_t)v187);
          uint64_t v191 = v190;
          char v192 = *(unsigned char *)(*v189 + 424 * v190 + 272);
          uint64_t v193 = sub_45E5CC(v187);
          if (*(char *)(v193 + 63) < 0)
          {
            sub_4200(v278, *(void **)(v193 + 40), *(void *)(v193 + 48));
          }
          else
          {
            *(_OWORD *)uint64_t v278 = *(_OWORD *)(v193 + 40);
            uint64_t v279 = *(uint64_t **)(v193 + 56);
          }
          *((void *)&v280 + 1) = v191;
          v281[0] = v192;
          *(_DWORD *)&v281[1] = 257;
          v281[5] = 0;
          *(_OWORD *)&v281[8] = xmmword_20E2950;
          *(void *)&v281[24] = 0x7FEFFFFFFFFFFFFFLL;
          LODWORD(v282) = 0x7FFFFFFF;
          *((void *)&v282 + 1) = 0x7FFFFFFFFFFFFFFFLL;
          LODWORD(v283) = 0x7FFFFFFF;
          *((void *)&v283 + 1) = 0x7FFFFFFFFFFFFFFFLL;
          LODWORD(v284) = 0x7FFFFFFF;
          *((void *)&v284 + 1) = 0x7FFFFFFFFFFFFFFFLL;
          LODWORD(v285) = 0x7FFFFFFF;
          *((void *)&v285 + 1) = 0x7FFFFFFFFFFFFFFFLL;
          *(_DWORD *)unint64_t v286 = 0x7FFFFFFF;
          *(int64x2_t *)&v286[8] = v228;
          *(_DWORD *)&v286[24] = 0x7FFFFFFF;
          uint64_t v287 = 0x7FFFFFFFFFFFFFFFLL;
          *(void *)uint64_t v289 = v279;
          *(_OWORD *)std::string __p = *(_OWORD *)v278;
          v278[1] = 0;
          v278[0] = 0;
          *(void *)&long long v280 = v189;
          uint64_t v279 = 0;
          uint64_t v296 = 0x7FFFFFFFFFFFFFFFLL;
          long long v294 = *(_OWORD *)v286;
          long long v295 = *(_OWORD *)&v286[16];
          *(_OWORD *)&v289[8] = v280;
          *(_OWORD *)&v289[24] = *(_OWORD *)v281;
          long long v292 = v284;
          long long v293 = v285;
          long long v290 = v282;
          long long v291 = v283;
          *(_OWORD *)&v289[40] = *(_OWORD *)&v281[16];
          sub_3A83E4((uint64_t)v271, (uint64_t)__p, (uint64_t)__p);
          if ((v289[7] & 0x80000000) != 0)
          {
            operator delete(__p[0]);
            if (SHIBYTE(v279) < 0) {
              goto LABEL_295;
            }
          }
          else if (SHIBYTE(v279) < 0)
          {
LABEL_295:
            operator delete(v278[0]);
          }
        }
        v187 += 4;
      }
      while (v187 != v188);
    }
    uint64_t v195 = *a5;
    uint64_t v194 = a5[1];
    if (*a5 != v194)
    {
      while (*(_DWORD *)(v195 + 152))
      {
        v195 += 160;
        if (v195 == v194)
        {
          uint64_t v195 = a5[1];
          break;
        }
      }
      uint64_t v196 = *(void *)(v195 + 104);
      for (uint64_t j = *(void *)(v195 + 112); v196 != j; v196 += 64)
        sub_3A4CB0(a1, v196, 1, v271);
      uint64_t v198 = *(void *)(v195 + 128);
      for (uint64_t k = *(void *)(v195 + 136); v198 != k; v198 += 64)
        sub_3A4CB0(a1, v198, 0, v271);
    }
    sub_3A108C(a1, a2, v271);
    if (v217[1]) {
      uint64_t v200 = sub_3A1BBC(a1, a2, (uint64_t)v271);
    }
    else {
      uint64_t v200 = 0;
    }
    v217[20] = v200;
    *(_OWORD *)std::string __p = 0u;
    *(_OWORD *)uint64_t v289 = 0u;
    *(_DWORD *)&v289[16] = 1065353216;
    sub_3A2F74(v200, (__n128 **)a2, (uint64_t)__p);
    if (v217[3]) {
      BOOL v201 = *(void *)&v289[8] == 0;
    }
    else {
      BOOL v201 = 1;
    }
    char v202 = !v201;
    v217[20] |= v202;
    for (uint64_t m = v272[0]; m; uint64_t m = *(void **)m)
    {
      double v204 = -1.0;
      if (a7)
      {
        double v204 = 0.0;
        if (*((double *)m + 8) >= 0.0) {
          double v204 = *((double *)m + 8);
        }
      }
      *((double *)m + 8) = v204;
      sub_3A3320((_DWORD *)a1, (uint64_t **)m + 5, (uint64_t)a8);
    }
    long long v205 = *(void **)v289;
    if (*(void *)v289)
    {
      do
      {
        sub_3A4850(a1, v205[5], (uint64_t)a8);
        long long v205 = (void *)*v205;
      }
      while (v205);
      long long v206 = *(void ***)v289;
      if (*(void *)v289)
      {
        do
        {
          long long v214 = (void **)*v206;
          if (*((char *)v206 + 39) < 0) {
            operator delete(v206[2]);
          }
          operator delete(v206);
          long long v206 = v214;
        }
        while (v214);
      }
    }
    long long v207 = __p[0];
    __p[0] = 0;
    if (v207) {
      operator delete(v207);
    }
    long long v208 = (void **)v272[0];
    if (v272[0])
    {
      do
      {
        long long v212 = (void **)*v208;
        if (*((char *)v208 + 39) < 0) {
          operator delete(v208[2]);
        }
        operator delete(v208);
        long long v208 = v212;
      }
      while (v212);
    }
    long long v209 = v271[0];
    v271[0] = 0;
    if (v209) {
      operator delete(v209);
    }
    long long v210 = (void **)v275[0];
    if (v275[0])
    {
      do
      {
        long long v213 = (void **)*v210;
        if (*((char *)v210 + 39) < 0) {
          operator delete(v210[2]);
        }
        operator delete(v210);
        long long v210 = v213;
      }
      while (v213);
    }
    long long v211 = v274[0];
    v274[0] = 0;
    if (v211) {
      operator delete(v211);
    }
  }
}

void sub_3A0BF0(_Unwind_Exception *a1)
{
}

void sub_3A0C78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  sub_39EB70(&STACK[0x270]);
  sub_39EB70(&STACK[0x340]);
  sub_3A0F3C((uint64_t)&STACK[0x3F0]);
  JUMPOUT(0x3A0F14);
}

void sub_3A0CD0()
{
}

void sub_3A0CF0()
{
  uint64_t v0 = (void *)STACK[0x358];
  if (STACK[0x358])
  {
    STACK[0x360] = (unint64_t)v0;
    operator delete(v0);
  }
  sub_39EB70(&STACK[0x270]);
  JUMPOUT(0x3A0F0CLL);
}

void sub_3A0DA4()
{
  uint64_t v0 = (void *)STACK[0x288];
  if (STACK[0x288])
  {
    STACK[0x290] = (unint64_t)v0;
    operator delete(v0);
  }
  JUMPOUT(0x3A0F04);
}

void sub_3A0DE8(_Unwind_Exception *a1)
{
}

void sub_3A0E0C()
{
  *(void *)(v0 + 8) = v1;
  JUMPOUT(0x3A0F0CLL);
}

void sub_3A0E50(_Unwind_Exception *a1)
{
}

void sub_3A0E74(_Unwind_Exception *a1)
{
  STACK[0x3F0] = (unint64_t)&STACK[0x2B8];
  sub_3A6AB0((void ***)&STACK[0x3F0]);
  sub_3A4C2C((uint64_t)&STACK[0x2D0]);
  sub_3A4C2C((uint64_t)&STACK[0x300]);
  _Unwind_Resume(a1);
}

void sub_3A0E7C(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x407]) < 0)
  {
    operator delete((void *)STACK[0x3F0]);
    if ((SLOBYTE(STACK[0x357]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SLOBYTE(STACK[0x357]) & 0x80000000) == 0)
  {
LABEL_3:
    sub_3A4C2C((uint64_t)&STACK[0x300]);
    _Unwind_Resume(a1);
  }
  operator delete((void *)STACK[0x340]);
  sub_3A4C2C((uint64_t)&STACK[0x300]);
  _Unwind_Resume(a1);
}

void sub_3A0ECC()
{
}

uint64_t sub_3A0F3C(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_3A0F90(uint64_t a1, uint64_t a2, int *a3, unsigned int *a4)
{
  unint64_t v5 = *(void *)(a1 + 8);
  if (v5 >= *(void *)(a1 + 16))
  {
    BOOL v9 = sub_3A97C4((void **)a1, a2, a3, a4);
    *(void *)(a1 + 8) = v9;
    return v9 - 80;
  }
  else
  {
    int v6 = *a3;
    size_t v7 = *a4;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200(*(unsigned char **)(a1 + 8), *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v8 = *(_OWORD *)a2;
      *(void *)(v5 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v5 = v8;
    }
    *(_DWORD *)(v5 + 24) = 0;
    *(void *)(v5 + 40) = 0;
    *(void *)(v5 + 48) = 0;
    *(void *)(v5 + 32) = 0;
    if (v7)
    {
      unint64_t v11 = (char *)operator new(v7);
      *(void *)(v5 + 40) = &v11[v7];
      *(void *)(v5 + 48) = &v11[v7];
      *(void *)(v5 + 32) = v11;
    }
    *(void *)(v5 + 56) = 0;
    *(_DWORD *)(v5 + 64) = 0x7FFFFFFF;
    *(void *)(v5 + 72) = 0x7FFFFFFFFFFFFFFFLL;
    *(_DWORD *)(v5 + 24) = v6;
    *(void *)(a1 + 8) = v5 + 80;
    *(void *)(a1 + 8) = v5 + 80;
    return (char *)v5;
  }
}

void sub_3A1064(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_3A106C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_3A108C(uint64_t a1, char **a2, void *a3)
{
  uint64_t v85 = *a2;
  long long v82 = a2[1];
  if (*a2 != v82 && *(void *)(a1 + 5904) != *(void *)(a1 + 5912))
  {
    int64x2_t v89 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    do
    {
      long long v4 = *(uint64_t **)(a1 + 5904);
      unint64_t v5 = *(uint64_t **)(a1 + 5912);
      int64_t v84 = v5;
      while (v4 != v5)
      {
        sub_45EB40(v85, (uint64_t)&v109);
        long long v101 = v109;
        int v6 = v111;
        unint64_t v102 = v110;
        long long v104 = 0;
        long long v105 = 0;
        char v103 = 0;
        int64_t v7 = v112 - (unsigned char *)v111;
        if (v112 != v111)
        {
          if (v7 < 0) {
            sub_2E00();
          }
          char v103 = operator new(v112 - (unsigned char *)v111);
          long long v104 = v103;
          long long v8 = (char *)v103 + 16 * (v7 >> 4);
          long long v105 = v8;
          memcpy(v103, v6, v7);
          long long v104 = v8;
        }
        long long v106 = 0;
        int64_t v107 = 0;
        long long v108 = 0;
        BOOL v9 = v113;
        int64_t v10 = v114 - (unsigned char *)v113;
        if (v114 == v113)
        {
          int64_t v12 = 0;
          unint64_t v11 = 0;
        }
        else
        {
          if (v10 < 0) {
            sub_2E00();
          }
          unint64_t v11 = (char *)operator new(v114 - (unsigned char *)v113);
          long long v106 = v11;
          int64_t v107 = v11;
          int64_t v12 = &v11[16 * (v10 >> 4)];
          long long v108 = v12;
          memcpy(v11, v9, v10);
          int64_t v107 = v12;
        }
        long long v93 = v115;
        uint64_t v94 = v116;
        int64_t v96 = 0;
        char v97 = 0;
        long long v95 = 0;
        unint64_t v13 = v117;
        int64_t v14 = v118 - (unsigned char *)v117;
        uint64_t v88 = v4;
        if (v118 != v117)
        {
          if (v14 < 0) {
            sub_2E00();
          }
          long long v95 = operator new(v118 - (unsigned char *)v117);
          int64_t v96 = v95;
          uint64_t v15 = (char *)v95 + 16 * (v14 >> 4);
          char v97 = v15;
          memcpy(v95, v13, v14);
          int64_t v96 = v15;
        }
        std::string __p = 0;
        BOOL v99 = 0;
        unsigned int v100 = 0;
        uint64_t v16 = v119;
        int64_t v17 = v120 - (unsigned char *)v119;
        if (v120 == v119)
        {
          long long v19 = 0;
          uint64_t v18 = 0;
        }
        else
        {
          if (v17 < 0) {
            sub_2E00();
          }
          uint64_t v18 = (char *)operator new(v120 - (unsigned char *)v119);
          std::string __p = v18;
          BOOL v99 = v18;
          long long v19 = &v18[16 * (v17 >> 4)];
          unsigned int v100 = v19;
          memcpy(v18, v16, v17);
          BOOL v99 = v19;
        }
        while (1)
        {
          if (v11 == v12 || v18 == v19)
          {
            BOOL v30 = v18 == v19;
            long long v21 = v88;
            if ((((v11 == v12) ^ v30) & 1) == 0) {
              break;
            }
            goto LABEL_40;
          }
          long long v20 = (void *)v101;
          long long v21 = v88;
          if (v102 != v94) {
            goto LABEL_41;
          }
          if ((void)v101)
          {
            unint64_t v22 = *((void *)&v101 + 1);
            int v23 = v22 < sub_46C760((void *)v101);
            long long v24 = (void *)v93;
            if (!(void)v93) {
              goto LABEL_38;
            }
          }
          else
          {
            int v23 = 0;
            long long v24 = (void *)v93;
            if (!(void)v93)
            {
LABEL_38:
              int v27 = 0;
              goto LABEL_39;
            }
          }
          unint64_t v25 = *((void *)&v93 + 1);
          unint64_t v26 = sub_46C760(v24);
          int v27 = v25 < v26;
          if (v25 < v26) {
            int v28 = v23;
          }
          else {
            int v28 = 0;
          }
          if (v28 == 1)
          {
            uint64_t v29 = sub_46C8EC((void *)v101, *((uint64_t *)&v101 + 1));
            if (v29 == sub_46C8EC((void *)v93, *((uint64_t *)&v93 + 1))) {
              break;
            }
            goto LABEL_40;
          }
LABEL_39:
          if (v23 == v27) {
            break;
          }
LABEL_40:
          long long v20 = (void *)v101;
LABEL_41:
          unint64_t v31 = *(void *)(sub_46C8EC(v20, *((uint64_t *)&v101 + 1)) + 32);
          int v32 = *((_DWORD *)v21 + 12);
          int64_t v91 = 0;
          uint64_t v92 = 0;
          uint64_t v90 = 0;
          uint64_t v33 = *v21;
          if (*v21)
          {
            double v35 = *(unsigned int **)(v33 + 176);
            uint64_t v34 = *(unsigned int **)(v33 + 184);
            uint64_t v36 = (char *)v34 - (char *)v35;
            if ((char *)v34 - (char *)v35 >= 24)
            {
              uint64_t v37 = (v31 >> 16) & 0xFFFF0000 | (v31 << 32);
              uint64_t v38 = v31 & 0xFF000000000000;
              if (v36 != 24)
              {
                unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * (v36 >> 3);
                do
                {
                  uint64_t v40 = 6 * (v39 >> 2);
                  _X16 = &v35[v40];
                  __asm { PRFM            #0, [X16] }
                  unint64_t v47 = &v35[6 * (v39 >> 1)];
                  _X15 = &v47[v40];
                  __asm { PRFM            #0, [X15] }
                  if ((((unint64_t)*v47 << 32) | ((unint64_t)*((unsigned __int16 *)v47 + 2) << 16) | (*((unsigned char *)v47 + 6) == 0)) >= (v37 | (unint64_t)(v38 == 0))) {
                    unint64_t v50 = 0;
                  }
                  else {
                    unint64_t v50 = v39 >> 1;
                  }
                  v35 += 6 * v50;
                  v39 -= v39 >> 1;
                }
                while ((uint64_t)v39 > 1);
              }
              v35 += 6
                   * ((((unint64_t)*v35 << 32) | ((unint64_t)*((unsigned __int16 *)v35 + 2) << 16) | (*((unsigned char *)v35 + 6) == 0)) < (v37 | (unint64_t)(v38 == 0)));
            }
            if (v35 != v34)
            {
              int v51 = 1 << v32;
              while (1)
              {
                if (__PAIR64__(*((unsigned __int16 *)v35 + 2), *v35) != __PAIR64__(WORD2(v31), v31)
                  || (HIWORD(v31) & 1) == (*((unsigned char *)v35 + 6) == 0))
                {
                  goto LABEL_74;
                }
                if ((v35[2] & v51) - 1 <= 0xFFFFFFFD
                  && sub_35870C(*(void *)(*v21 + 152) + 424 * *((void *)v35 + 2))
                  && (sub_3588EC(*(void *)(*v21 + 152) + 424 * *((void *)v35 + 2)) & 1) == 0)
                {
                  break;
                }
LABEL_54:
                v35 += 6;
                if (v35 == *(unsigned int **)(v33 + 184)) {
                  goto LABEL_74;
                }
              }
              uint64_t v54 = *v21 + 152;
              uint64_t v55 = v91;
              if (v91 < v92)
              {
                uint64_t v52 = *((void *)v35 + 2);
                *int64_t v91 = v54;
                v55[1] = v52;
                unint64_t v53 = v55 + 2;
              }
              else
              {
                char v56 = v90;
                uint64_t v57 = ((char *)v91 - (char *)v90) >> 4;
                unint64_t v58 = v57 + 1;
                if ((unint64_t)(v57 + 1) >> 60) {
                  sub_2E00();
                }
                uint64_t v59 = (char *)v92 - (char *)v90;
                if (v92 - v90 > v58) {
                  unint64_t v58 = v59 >> 3;
                }
                if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v58 = 0xFFFFFFFFFFFFFFFLL;
                }
                if (v58 >> 60) {
                  sub_188D718();
                }
                int v86 = v51;
                uint64_t v60 = v54;
                unint64_t v87 = v58;
                unint64_t v61 = (char *)operator new(16 * v58);
                uint64_t v62 = *((void *)v35 + 2);
                uint64_t v63 = (uint64_t *)&v61[16 * v57];
                *uint64_t v63 = v60;
                v63[1] = v62;
                if (v55 != v56)
                {
                  size_t v64 = &v61[16 * v57];
                  int v51 = v86;
                  do
                  {
                    uint64_t v65 = v64 - 16;
                    *((_OWORD *)v64 - 1) = *((_OWORD *)v55 - 1);
                    v55 -= 2;
                    v64 -= 16;
                  }
                  while (v55 != v56);
                  unint64_t v53 = v63 + 2;
                  uint64_t v90 = (uint64_t *)v65;
                  int64_t v91 = v63 + 2;
                  uint64_t v92 = (uint64_t *)&v61[16 * v87];
                  if (!v56) {
                    goto LABEL_53;
                  }
                  goto LABEL_73;
                }
                int v51 = v86;
                unint64_t v53 = v63 + 2;
                uint64_t v90 = (uint64_t *)&v61[16 * v57];
                int64_t v91 = v63 + 2;
                uint64_t v92 = (uint64_t *)&v61[16 * v87];
                if (v56) {
LABEL_73:
                }
                  operator delete(v56);
              }
LABEL_53:
              int64_t v91 = v53;
              long long v21 = v88;
              goto LABEL_54;
            }
LABEL_74:
            if (*((unsigned char *)v21 + 32))
            {
              *(void *)&long long v122 = off_2438EF8;
              int v123 = &v122;
              sub_29BE60(v21, v31, &v90, (uint64_t)&v122);
              if (v123 == &v122)
              {
                (*(void (**)(long long *))(v122 + 32))(&v122);
              }
              else if (v123)
              {
                (*(void (**)(void))(*(void *)v123 + 40))();
              }
            }
          }
          uint64_t v67 = v90;
          char v66 = v91;
          if (v90 == v91)
          {
            if (!v90) {
              goto LABEL_82;
            }
LABEL_81:
            int64_t v91 = v67;
            operator delete(v67);
            goto LABEL_82;
          }
          do
          {
            if (!sub_3A90A0(a3, *(void *)*v67 + 424 * v67[1] + 40))
            {
              long long v122 = *(_OWORD *)v67;
              BOOL v121 = (long long *)(*(void *)*v67 + 424 * v67[1] + 40);
              double v69 = sub_3A92D0((uint64_t)a3, (uint64_t)v121, (uint64_t)&unk_20F06E0, &v121);
              *(_OWORD *)(v69 + 5) = v122;
              *((_WORD *)v69 + 28) = 256;
              *(_DWORD *)((char *)v69 + 58) = 0;
              *((_OWORD *)v69 + 4) = xmmword_20E2950;
              v69[10] = 0x7FEFFFFFFFFFFFFFLL;
              *((_DWORD *)v69 + 22) = 0x7FFFFFFF;
              v69[12] = 0x7FFFFFFFFFFFFFFFLL;
              *((_DWORD *)v69 + 26) = 0x7FFFFFFF;
              v69[14] = 0x7FFFFFFFFFFFFFFFLL;
              *((_DWORD *)v69 + 30) = 0x7FFFFFFF;
              v69[16] = 0x7FFFFFFFFFFFFFFFLL;
              *((_DWORD *)v69 + 34) = 0x7FFFFFFF;
              v69[18] = 0x7FFFFFFFFFFFFFFFLL;
              *((_DWORD *)v69 + 38) = 0x7FFFFFFF;
              *((int64x2_t *)v69 + 10) = v89;
              *((_DWORD *)v69 + 44) = 0x7FFFFFFF;
              v69[23] = 0x7FFFFFFFFFFFFFFFLL;
            }
            v67 += 2;
          }
          while (v67 != v66);
          uint64_t v67 = v90;
          if (v90) {
            goto LABEL_81;
          }
LABEL_82:
          unint64_t v68 = v102;
          ++*((void *)&v101 + 1);
          unint64_t v11 = (char *)v106;
          int64_t v12 = v107;
          if (v102 < ((v107 - (unsigned char *)v106) >> 4) - 1)
          {
            while (1)
            {
              uint64_t v70 = &v11[16 * v68];
              if ((void)v101)
              {
                unint64_t v71 = *((void *)&v101 + 1);
                unint64_t v72 = sub_46C760((void *)v101);
                BOOL v73 = v71 < v72;
                unint64_t v74 = *(void **)v70;
                if (!*(void *)v70)
                {
                  if (v71 < v72) {
                    goto LABEL_22;
                  }
                  goto LABEL_88;
                }
              }
              else
              {
                unint64_t v74 = *(void **)v70;
                if (!*(void *)v70) {
                  goto LABEL_88;
                }
                BOOL v73 = 0;
              }
              long long v75 = &v11[16 * v68];
              unint64_t v78 = *((void *)v75 + 1);
              int v77 = (uint64_t *)(v75 + 8);
              unint64_t v76 = v78;
              unint64_t v79 = sub_46C760(v74);
              if (v78 < v79 && v73)
              {
                uint64_t v81 = sub_46C8EC((void *)v101, *((uint64_t *)&v101 + 1));
                if (v81 != sub_46C8EC(*(void **)v70, *v77))
                {
LABEL_22:
                  unint64_t v11 = (char *)v106;
                  int64_t v12 = v107;
                  break;
                }
              }
              else if ((v73 ^ (v76 < v79)))
              {
                goto LABEL_22;
              }
LABEL_88:
              unint64_t v68 = v102 + 1;
              unint64_t v102 = v68;
              long long v101 = *((_OWORD *)v103 + v68);
              unint64_t v11 = (char *)v106;
              if (v68 >= ((v107 - (unsigned char *)v106) >> 4) - 1) {
                goto LABEL_22;
              }
            }
          }
          uint64_t v18 = (char *)__p;
          long long v19 = v99;
        }
        if (__p)
        {
          BOOL v99 = (char *)__p;
          operator delete(__p);
        }
        if (v95)
        {
          int64_t v96 = v95;
          operator delete(v95);
        }
        if (v106)
        {
          int64_t v107 = (char *)v106;
          operator delete(v106);
        }
        if (v103)
        {
          long long v104 = v103;
          operator delete(v103);
        }
        if (v119)
        {
          unint64_t v120 = v119;
          operator delete(v119);
        }
        if (v117)
        {
          long long v118 = v117;
          operator delete(v117);
        }
        if (v113)
        {
          uint64_t v114 = v113;
          operator delete(v113);
        }
        if (v111)
        {
          uint64_t v112 = v111;
          operator delete(v111);
        }
        long long v4 = v21 + 8;
        unint64_t v5 = v84;
      }
      v85 += 120;
    }
    while (v85 != v82);
  }
}

void sub_3A19BC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_58CC(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_3A1BBC(std::string::size_type a1, char **a2, uint64_t a3)
{
  if (*(void *)(a1 + 5904) == *(void *)(a1 + 5912))
  {
LABEL_183:
    char v9 = 0;
    return v9 & 1;
  }
  unint64_t v5 = *a2;
  long long v4 = a2[1];
  if (*a2 == v4) {
    goto LABEL_205;
  }
  while (1)
  {
    unsigned int v6 = sub_45FE1C((uint64_t)v5);
    if (v6 <= 4 && ((1 << v6) & 0x13) != 0) {
      break;
    }
    v5 += 120;
    if (v5 == v4)
    {
      unint64_t v5 = v4;
      break;
    }
  }
  if (v5 == a2[1])
  {
LABEL_205:
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v139);
      sub_188FC78(&v139, (uint64_t)"No main or user route among the ", 32);
      int v86 = (void *)std::ostream::operator<<();
      sub_188FC78(v86, (uint64_t)" selection_routes. This is unexpected.", 38);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v124, 3u);
      if (v125 < 0) {
        operator delete(v124[0]);
      }
      *(std::string::size_type *)((char *)v139.__r_.__value_.__r.__words
      if (SBYTE7(v145) < 0) {
        operator delete((void *)v144);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    goto LABEL_183;
  }
  unsigned int v8 = sub_45FE10((uint64_t)v5);
  memset(&__s1, 0, sizeof(__s1));
  sub_45EB40(v5, (uint64_t)&v139);
  sub_3A5E94((long long *)&v139, (uint64_t)v124);
  if (__p)
  {
    unint64_t v149 = __p;
    operator delete(__p);
  }
  if (*((void *)&v145 + 1))
  {
    uint64_t v146 = *((void *)&v145 + 1);
    operator delete(*((void **)&v145 + 1));
  }
  if (v142)
  {
    unint64_t v143 = v142;
    operator delete(v142);
  }
  if (v140)
  {
    int64_t v141 = v140;
    operator delete(v140);
  }
  sub_39ECCC((uint64_t)&v117, (long long *)v124);
  sub_39ECCC((uint64_t)&v110, &v130);
  char v9 = 0;
  while (1)
  {
    if (v122 == v123 || v115 == v116)
    {
      if ((v122 == v123) == (v115 == v116)) {
        break;
      }
      goto LABEL_40;
    }
    unint64_t v11 = v117;
    if (v119 != v112) {
      goto LABEL_41;
    }
    if (v117)
    {
      unint64_t v12 = v118;
      int v13 = v12 < sub_46C760(v117);
      int64_t v14 = v110;
      if (!v110) {
        goto LABEL_38;
      }
    }
    else
    {
      int v13 = 0;
      int64_t v14 = v110;
      if (!v110)
      {
LABEL_38:
        int v17 = 0;
        goto LABEL_39;
      }
    }
    unint64_t v15 = v111;
    unint64_t v16 = sub_46C760(v14);
    int v17 = v15 < v16;
    if (v15 < v16) {
      int v18 = v13;
    }
    else {
      int v18 = 0;
    }
    if (v18 == 1)
    {
      uint64_t v19 = sub_46C8EC(v117, v118);
      if (v19 == sub_46C8EC(v110, v111)) {
        break;
      }
      goto LABEL_40;
    }
LABEL_39:
    if (v13 == v17) {
      break;
    }
LABEL_40:
    unint64_t v11 = v117;
LABEL_41:
    long long v20 = (int **)sub_46C8EC(v11, v118);
    sub_3EB10C(a1, v20, (uint64_t)&v108);
    if (v108 != v109)
    {
      uint64_t v21 = **(void **)v108 + 424 * *((void *)v108 + 1);
      unint64_t v22 = (const std::string *)(v21 + 40);
      uint64_t v23 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __s1.__r_.__value_.__l.__size_;
      }
      uint64_t v25 = *(unsigned __int8 *)(v21 + 63);
      uint64_t v26 = *(void *)(v21 + 48);
      if ((v25 & 0x80u) == 0) {
        uint64_t v26 = v25;
      }
      if (size == v26)
      {
        if ((v25 & 0x80u) == 0) {
          int v27 = v22;
        }
        else {
          int v27 = (const std::string *)v22->__r_.__value_.__r.__words[0];
        }
        if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          if (!memcmp(__s1.__r_.__value_.__l.__data_, v27, __s1.__r_.__value_.__l.__size_)) {
            goto LABEL_171;
          }
        }
        else
        {
          if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
            goto LABEL_171;
          }
          p_s1 = &__s1;
          while (p_s1->__r_.__value_.__s.__data_[0] == v27->__r_.__value_.__s.__data_[0])
          {
            p_s1 = (std::string *)((char *)p_s1 + 1);
            int v27 = (const std::string *)((char *)v27 + 1);
            if (!--v23) {
              goto LABEL_171;
            }
          }
        }
      }
      std::string::operator=(&__s1, v22);
      unint64_t v78 = sub_69510();
      uint64_t v79 = *(void *)sub_68F1C((uint64_t)v78);
      uint64_t v80 = *(void *)(sub_68F1C((uint64_t)v78) + 8);
      sub_6BAC((uint64_t)&v139);
      if (v79 != v80)
      {
        sub_3ABADC("\"", v79, "\"");
        if ((v138 & 0x80u) == 0) {
          uint64_t v81 = &v136;
        }
        else {
          uint64_t v81 = v136;
        }
        if ((v138 & 0x80u) == 0) {
          uint64_t v82 = v138;
        }
        else {
          uint64_t v82 = v137;
        }
        sub_188FC78(&v139, (uint64_t)v81, v82);
        if ((char)v138 < 0)
        {
          operator delete(v136);
          if (v79 + 24 == v80) {
            goto LABEL_166;
          }
        }
        else if (v79 + 24 == v80)
        {
          goto LABEL_166;
        }
        uint64_t v83 = 24;
        do
        {
          if (v83) {
            sub_188FC78(&v139, (uint64_t)",", 1);
          }
          sub_3ABADC("\"", v79 + v83, "\"");
          if ((v138 & 0x80u) == 0) {
            int64_t v84 = &v136;
          }
          else {
            int64_t v84 = v136;
          }
          if ((v138 & 0x80u) == 0) {
            uint64_t v85 = v138;
          }
          else {
            uint64_t v85 = v137;
          }
          sub_188FC78(&v139, (uint64_t)v84, v85);
          if ((char)v138 < 0) {
            operator delete(v136);
          }
          v83 += 24;
        }
        while (v79 + v83 != v80);
      }
LABEL_166:
      std::stringbuf::str();
      v139.__r_.__value_.__r.__words[0] = v93;
      *(std::string::size_type *)((char *)v139.__r_.__value_.__r.__words + *(void *)(v93 - 24)) = v92;
      if (SBYTE7(v145) < 0) {
        operator delete((void *)v144);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      sub_6879C((uint64_t)v78, &v139);
      sub_46C8EC(v117, v118);
      sub_6912C((uint64_t)v78);
      sub_68E9C((uint64_t)v78);
      LODWORD(v104.__r_.__value_.__l.__data_) = sub_69124((uint64_t)v78);
      sub_677F0((unsigned int *)&v104, (uint64_t)&v136);
      if ((char)v138 < 0)
      {
        operator delete(v136);
        if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_170:
          if ((SHIBYTE(v107) & 0x80000000) == 0) {
            goto LABEL_171;
          }
LABEL_175:
          operator delete(v105);
          int v77 = v108;
          if (v108) {
            goto LABEL_172;
          }
          goto LABEL_20;
        }
      }
      else if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_170;
      }
      operator delete(v139.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v107) & 0x80000000) == 0)
      {
LABEL_171:
        int v77 = v108;
        if (!v108) {
          goto LABEL_20;
        }
LABEL_172:
        long long v109 = v77;
        operator delete(v77);
        goto LABEL_20;
      }
      goto LABEL_175;
    }
    uint64_t v29 = *(uint64_t **)(a1 + 5904);
    int64x2_t v89 = *(uint64_t **)(a1 + 5912);
    unsigned int v88 = v8;
    if (v29 != v89)
    {
      int v97 = v8;
      do
      {
        unint64_t v30 = *(void *)(sub_46C8EC(v117, v118) + 32);
        int v31 = *((_DWORD *)v29 + 12);
        long long v106 = 0;
        uint64_t v107 = 0;
        long long v105 = 0;
        uint64_t v32 = *v29;
        if (!*v29) {
          goto LABEL_86;
        }
        uint64_t v33 = *(unsigned int **)(v32 + 176);
        uint64_t v34 = *(unsigned int **)(v32 + 184);
        uint64_t v35 = (char *)v34 - (char *)v33;
        if ((char *)v34 - (char *)v33 >= 24)
        {
          uint64_t v36 = (v30 >> 16) & 0xFFFF0000 | (v30 << 32);
          uint64_t v37 = v30 & 0xFF000000000000;
          if (v35 != 24)
          {
            unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * (v35 >> 3);
            do
            {
              uint64_t v39 = 6 * (v38 >> 2);
              _X17 = &v33[v39];
              __asm { PRFM            #0, [X17] }
              long long v45 = &v33[6 * (v38 >> 1)];
              _X16 = &v45[v39];
              __asm { PRFM            #0, [X16] }
              if ((((unint64_t)*v45 << 32) | ((unint64_t)*((unsigned __int16 *)v45 + 2) << 16) | (*((unsigned char *)v45 + 6) == 0)) >= (v36 | (unint64_t)(v37 == 0))) {
                unint64_t v48 = 0;
              }
              else {
                unint64_t v48 = v38 >> 1;
              }
              v33 += 6 * v48;
              v38 -= v38 >> 1;
            }
            while ((uint64_t)v38 > 1);
          }
          v33 += 6
               * ((((unint64_t)*v33 << 32) | ((unint64_t)*((unsigned __int16 *)v33 + 2) << 16) | (*((unsigned char *)v33 + 6) == 0)) < (v36 | (unint64_t)(v37 == 0)));
        }
        if (v33 != v34)
        {
          int v49 = 1 << v31;
          unint64_t v50 = (uint64_t *)(v33 + 4);
          do
          {
            int v51 = v50 - 2;
            if (__PAIR64__(*((unsigned __int16 *)v50 - 6), *((_DWORD *)v50 - 4)) != __PAIR64__(WORD2(v30), v30)
              || (HIWORD(v30) & 1) == (*((unsigned char *)v50 - 10) == 0))
            {
              break;
            }
            if ((*(_DWORD *)(v50 - 1) & v49) - 1 <= 0xFFFFFFFD)
            {
              uint64_t v52 = *v50;
              uint64_t v53 = *(void *)(*v29 + 152);
              uint64_t v54 = v53 + 424 * *v50;
              if ((*(_DWORD *)(v54 + 88) | 4) == 6
                && (*(unsigned char *)(v53 + 424 * v52 + 24) & 1) != 0
                && (!*(unsigned char *)(a1 + 5930) || !*(unsigned char *)(v53 + 424 * v52 + 272) || *(unsigned char *)(v53 + 424 * v52 + 312))
                && (sub_3588EC(v54) & 1) == 0)
              {
                v139.__r_.__value_.__r.__words[0] = *v29 + 152;
                sub_29AC28((uint64_t)&v105, &v139, v50);
              }
            }
            v50 += 3;
          }
          while (v51 + 3 != *(uint64_t **)(v32 + 184));
        }
        if (!*((unsigned char *)v29 + 32)) {
          goto LABEL_86;
        }
        v139.__r_.__value_.__r.__words[0] = (std::string::size_type)off_2438F78;
        v139.__r_.__value_.__l.__size_ = a1;
        uint64_t v140 = &v139;
        sub_29BE60(v29, v30, &v105, (uint64_t)&v139);
        if (v140 != &v139)
        {
          if (v140) {
            (*(void (**)(void))(*(void *)v140 + 40))();
          }
LABEL_86:
          uint64_t v95 = (uint64_t)v29;
          char v56 = v105;
          uint64_t v55 = v106;
          if (v105 != v106) {
            goto LABEL_94;
          }
LABEL_87:
          if (v56) {
            goto LABEL_136;
          }
          goto LABEL_59;
        }
        (*(void (**)(std::string *))(v139.__r_.__value_.__r.__words[0] + 32))(&v139);
        uint64_t v95 = (uint64_t)v29;
        char v56 = v105;
        uint64_t v55 = v106;
        if (v105 == v106) {
          goto LABEL_87;
        }
        do
        {
LABEL_94:
          if (sub_358898(*(void *)*v56 + 424 * v56[1], v97))
          {
            v139.__r_.__value_.__r.__words[0] = *(void *)*v56 + 424 * v56[1] + 40;
            uint64_t v57 = sub_3A92D0(a3, (uint64_t)v139.__r_.__value_.__l.__data_, (uint64_t)&unk_20F06E0, (long long **)&v139);
            unint64_t v58 = v57;
            if (!*((unsigned char *)v57 + 61))
            {
              *((unsigned char *)v57 + 61) = 1;
              *((unsigned char *)v57 + 57) = sub_1041610(a1 + 40, *(void *)*v56 + 424 * v56[1]);
              *((unsigned char *)v58 + 56) |= *(unsigned char *)(*(void *)*v56 + 424 * v56[1] + 272);
              uint64_t v59 = (void *)v58[5];
              uint64_t v60 = v56;
              if (v59)
              {
                if (v58[6] >= (unint64_t)(0x21CFB2B78C13521DLL * ((uint64_t)(v59[1] - *v59) >> 3))) {
                  uint64_t v60 = v56;
                }
                else {
                  uint64_t v60 = v58 + 5;
                }
              }
              *(_OWORD *)(v58 + 5) = *v60;
              unint64_t v61 = sub_69510();
              sub_6879C((uint64_t)v61, &v104);
              uint64_t v62 = sub_345948();
              uint64_t v63 = sub_374D14(*(void **)(a1 + 5888));
              unsigned int v64 = sub_29AEBC(v63);
              sub_345E04((uint64_t)v62, v64, (uint64_t)&v102);
              uint64_t v65 = sub_345948();
              unsigned int v66 = sub_29AEBC(v95);
              sub_345E04((uint64_t)v65, v66, (uint64_t)&v100);
              uint64_t v67 = *(void *)sub_68F1C((uint64_t)v61);
              uint64_t v68 = *(void *)(sub_68F1C((uint64_t)v61) + 8);
              v139.__r_.__value_.__r.__words[0] = v91;
              *(std::string::size_type *)((char *)v139.__r_.__value_.__r.__words + *(void *)(v91 - 24)) = v90;
              double v69 = (std::ios_base *)((char *)&v139 + *(void *)(v139.__r_.__value_.__r.__words[0] - 24));
              std::ios_base::init(v69, &v139.__r_.__value_.__r.__words[1]);
              v69[1].__vftable = 0;
              v69[1].__fmtflags_ = -1;
              std::streambuf::basic_streambuf();
              long long v144 = 0u;
              long long v145 = 0u;
              LODWORD(v146) = 16;
              if (v67 != v68)
              {
                sub_3ABADC("\"", v67, "\"");
                if ((v138 & 0x80u) == 0) {
                  uint64_t v70 = &v136;
                }
                else {
                  uint64_t v70 = v136;
                }
                if ((v138 & 0x80u) == 0) {
                  uint64_t v71 = v138;
                }
                else {
                  uint64_t v71 = v137;
                }
                sub_188FC78(&v139, (uint64_t)v70, v71);
                if ((char)v138 < 0)
                {
                  operator delete(v136);
                  if (v67 + 24 == v68) {
                    goto LABEL_123;
                  }
                }
                else if (v67 + 24 == v68)
                {
                  goto LABEL_123;
                }
                uint64_t v72 = 24;
                do
                {
                  if (v72) {
                    sub_188FC78(&v139, (uint64_t)",", 1);
                  }
                  sub_3ABADC("\"", v67 + v72, "\"");
                  if ((v138 & 0x80u) == 0) {
                    BOOL v73 = &v136;
                  }
                  else {
                    BOOL v73 = v136;
                  }
                  if ((v138 & 0x80u) == 0) {
                    uint64_t v74 = v138;
                  }
                  else {
                    uint64_t v74 = v137;
                  }
                  sub_188FC78(&v139, (uint64_t)v73, v74);
                  if ((char)v138 < 0) {
                    operator delete(v136);
                  }
                  v72 += 24;
                }
                while (v67 + v72 != v68);
              }
LABEL_123:
              std::stringbuf::str();
              v139.__r_.__value_.__r.__words[0] = v93;
              *(std::string::size_type *)((char *)v139.__r_.__value_.__r.__words + *(void *)(v93 - 24)) = v92;
              if (SBYTE7(v145) < 0) {
                operator delete((void *)v144);
              }
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              std::ios::~ios();
              sub_46C8EC(v117, v118);
              sub_6912C((uint64_t)v61);
              sub_68E9C((uint64_t)v61);
              LODWORD(v136) = sub_69124((uint64_t)v61);
              sub_677F0((unsigned int *)&v136, (uint64_t)&v139);
              if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v139.__r_.__value_.__l.__data_);
                if (v99 < 0) {
                  goto LABEL_131;
                }
LABEL_127:
                if ((v101 & 0x80000000) == 0) {
                  goto LABEL_128;
                }
LABEL_132:
                operator delete(v100);
                if ((v103 & 0x80000000) == 0) {
                  goto LABEL_133;
                }
LABEL_91:
                operator delete(v102);
                if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
LABEL_134:
                }
                  operator delete(v104.__r_.__value_.__l.__data_);
              }
              else
              {
                if ((v99 & 0x80000000) == 0) {
                  goto LABEL_127;
                }
LABEL_131:
                operator delete(v98);
                if (v101 < 0) {
                  goto LABEL_132;
                }
LABEL_128:
                if (v103 < 0) {
                  goto LABEL_91;
                }
LABEL_133:
                if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
                  goto LABEL_134;
                }
              }
            }
            char v9 = 1;
          }
          v56 += 2;
        }
        while (v56 != v55);
        char v56 = v105;
        if (v105)
        {
LABEL_136:
          long long v106 = v56;
          operator delete(v56);
        }
LABEL_59:
        uint64_t v29 = (uint64_t *)(v95 + 64);
      }
      while ((uint64_t *)(v95 + 64) != v89);
    }
    int v75 = sub_46E19C(v117, v118, 0);
    if (v75 < 0) {
      char v76 = -5;
    }
    else {
      char v76 = 5;
    }
    unsigned int v8 = v75 / 10
       + v88
       + (((103 * (char)(v76 + v75 % 10)) >> 15) & 1)
       + ((103 * (char)(v76 + v75 % 10)) >> 10);
    int v77 = v108;
    if (v108) {
      goto LABEL_172;
    }
LABEL_20:
    sub_39EBB4(&v117);
  }
  if (v115)
  {
    uint64_t v116 = v115;
    operator delete(v115);
  }
  if (v113)
  {
    uint64_t v114 = v113;
    operator delete(v113);
  }
  if (v122)
  {
    int v123 = v122;
    operator delete(v122);
  }
  if (v120)
  {
    BOOL v121 = v120;
    operator delete(v120);
  }
  if (v133)
  {
    uint64_t v134 = v133;
    operator delete(v133);
  }
  if (v131)
  {
    uint64_t v132 = v131;
    operator delete(v131);
  }
  if (v128)
  {
    unsigned int v129 = v128;
    operator delete(v128);
  }
  if (v126)
  {
    unint64_t v127 = v126;
    operator delete(v126);
  }
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
  return v9 & 1;
}