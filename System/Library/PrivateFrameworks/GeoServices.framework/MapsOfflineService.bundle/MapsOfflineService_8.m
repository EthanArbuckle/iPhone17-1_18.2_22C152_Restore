void sub_3A2C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  char a67;

  if (a67 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&STACK[0x268]);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

void sub_3A2C78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  if (SLOBYTE(STACK[0x267]) < 0) {
    operator delete((void *)STACK[0x250]);
  }
  sub_111ECAC((uint64_t)&STACK[0x268]);
  if (a41) {
    operator delete(a41);
  }
  sub_39EB70(&a44);
  sub_39EB70(&a53);
  sub_39EB0C(&a62);
  JUMPOUT(0x3A2F5CLL);
}

void sub_3A2F74(uint64_t a1, __n128 **a2, uint64_t a3)
{
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    while (1)
    {
      unsigned int v7 = sub_45FE1C((uint64_t)v4);
      if (v7 <= 4 && ((1 << v7) & 0x13) != 0) {
        break;
      }
      v4 = (__n128 *)((char *)v4 + 120);
      if (v4 == v5)
      {
        v4 = v5;
        break;
      }
    }
    if (v4 != a2[1])
    {
      sub_45E958(v4, (__n128 *)v20);
      std::string::size_type size = v20[0].__r_.__value_.__l.__size_;
      for (std::string::size_type i = v20[0].__r_.__value_.__r.__words[0]; i != size; i += 1056)
      {
        uint64_t v11 = *(void *)(i + 1032);
        uint64_t v12 = *(void *)(i + 1040);
        while (v11 != v12)
        {
          uint64_t v13 = *(void *)(v11 + 56);
          if (v13)
          {
            __p[0] = *(void **)(v11 + 56);
            sub_3ABE20(a3, v13, (uint64_t)&unk_20F06E0, (long long **)__p)[5] = v13;
          }
          v11 += 64;
        }
      }
      v15 = *(void **)(a3 + 16);
      if (!v15) {
        return;
      }
      while (1)
      {
        v16 = sub_69510();
        sub_6879C((uint64_t)v16, v20);
        sub_6912C((uint64_t)v16);
        sub_68E9C((uint64_t)v16);
        unsigned int v17 = sub_69124((uint64_t)v16);
        sub_677F0(&v17, (uint64_t)__p);
        sub_45FC70((uint64_t)v4);
        sub_68ED4((uint64_t)v16);
        sub_68EDC((uint64_t)v16);
        if (v19 < 0)
        {
          operator delete(__p[0]);
          if (SHIBYTE(v20[0].__r_.__value_.__r.__words[2]) < 0) {
LABEL_31:
          }
            operator delete(v20[0].__r_.__value_.__l.__data_);
        }
        else if (SHIBYTE(v20[0].__r_.__value_.__r.__words[2]) < 0)
        {
          goto LABEL_31;
        }
        v15 = (void *)*v15;
        if (!v15) {
          return;
        }
      }
    }
  }
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)v20);
    sub_188FC78(v20, (uint64_t)"No main or user route among the ", 32);
    v14 = (void *)std::ostream::operator<<();
    sub_188FC78(v14, (uint64_t)" selection_routes. This is unexpected.", 38);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 3u);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    *(std::string::size_type *)((char *)v20[0].__r_.__value_.__r.__words
    if (v22 < 0) {
      operator delete(v21);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
}

void sub_3A3270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a17);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_3A32BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((a22 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_3A3320(_DWORD *a1, uint64_t **a2, uint64_t a3)
{
  v5 = *(_DWORD **)(a3 + 80);
  if (v5 && (uint64_t v6 = *(int *)(a3 + 72), (int)v6 < *v5))
  {
    *(_DWORD *)(a3 + 72) = v6 + 1;
    uint64_t v7 = *(void *)&v5[2 * v6 + 2];
  }
  else
  {
    uint64_t v8 = a3 + 64;
    uint64_t v9 = sub_11BE844(*(void *)(a3 + 64));
    uint64_t v7 = sub_188CDC8(v8, v9);
  }
  v10 = *a2;
  uint64_t v11 = a2[1];
  uint64_t v12 = **a2 + 424 * (void)v11;
  uint64_t v13 = *(void *)(v12 + 64);
  if (v13 == *(void *)(v12 + 72))
  {
    HIBYTE(v217) = 0;
    LOBYTE(__dst[0]) = 0;
  }
  else if (*(char *)(v13 + 47) < 0)
  {
    sub_4200(__dst, *(void **)(v13 + 24), *(void *)(v13 + 32));
    v10 = *a2;
    uint64_t v11 = a2[1];
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(v13 + 24);
    uint64_t v217 = *(void *)(v13 + 40);
  }
  uint64_t v218 = 0;
  uint64_t v219 = 0;
  sub_34C720((uint64_t)v215, *v10 + 424 * (void)v11);
  if (SHIBYTE(v217) < 0)
  {
    sub_4200(__p, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)__dst;
    uint64_t v214 = v217;
  }
  sub_60498C((uint64_t)&v220, (uint64_t)&v218, (uint64_t)v215, (long long *)__p);
  *(_DWORD *)(v7 + 16) |= 1u;
  uint64_t v15 = *(void *)(v7 + 144);
  if (!v15)
  {
    uint64_t v16 = *(void *)(v7 + 8);
    unsigned int v17 = (void *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
    if (v16) {
      unsigned int v17 = (void *)*v17;
    }
    uint64_t v15 = sub_13D9608((uint64_t)v17);
    *(void *)(v7 + 144) = v15;
  }
  sub_E1163C((uint64_t)&v220, v15, 0, v14);
  sub_3A6B94((uint64_t)&v220);
  if (SHIBYTE(v214) < 0) {
    operator delete(__p[0]);
  }
  sub_29D95C((uint64_t)v215);
  if ((_BYTE)v219) {
    LOBYTE(v219) = 0;
  }
  v18 = a2[1];
  uint64_t v19 = **a2;
  uint64_t v20 = v19 + 424 * (void)v18;
  v21 = *(uint64_t **)(v20 + 224);
  char v22 = *(uint64_t **)(v20 + 232);
  if (v21 != v22)
  {
    v212 = a1;
    v23 = (_DWORD *)(v7 + 64);
    while (1)
    {
      unint64_t v24 = *v21;
      int v25 = sub_E11478(*v21);
      int v26 = v25;
      uint64_t v27 = *(unsigned int *)(v7 + 64);
      if (v27 == *(_DWORD *)(v7 + 68))
      {
        sub_188C80C((unsigned int *)(v7 + 64), v27 + 1);
        *(_DWORD *)(*(void *)(v7 + 72) + 4 * v27) = v26;
        unint64_t v28 = HIDWORD(v24);
        _DWORD *v23 = v27 + 1;
        if (HIDWORD(v24) != -1) {
          goto LABEL_29;
        }
      }
      else
      {
        *(_DWORD *)(*(void *)(v7 + 72) + 4 * v27) = v25;
        unint64_t v28 = HIDWORD(v24);
        _DWORD *v23 = v27 + 1;
        if (HIDWORD(v24) != -1)
        {
LABEL_29:
          uint64_t v29 = *(unsigned int *)(v7 + 104);
          if (v29 == *(_DWORD *)(v7 + 108)) {
            sub_188C80C((unsigned int *)(v7 + 104), v29 + 1);
          }
          *(_DWORD *)(*(void *)(v7 + 112) + 4 * v29) = v28;
          *(_DWORD *)(v7 + 104) = v29 + 1;
        }
      }
      if (++v21 == v22)
      {
        v18 = a2[1];
        uint64_t v19 = **a2;
        a1 = v212;
        break;
      }
    }
  }
  uint64_t v30 = v19 + 424 * (void)v18;
  v31 = *(const std::string **)(v30 + 248);
  v32 = *(const std::string **)(v30 + 256);
  if (v31 != v32)
  {
    v33 = (uint64_t **)(v7 + 120);
    do
    {
      v34 = *(_DWORD **)(v7 + 136);
      if (v34 && (uint64_t v35 = *(int *)(v7 + 128), (int)v35 < *v34))
      {
        *(_DWORD *)(v7 + 128) = v35 + 1;
        v36 = *(std::string **)&v34[2 * v35 + 2];
      }
      else
      {
        if (!*v33) {
          operator new();
        }
        void *v38 = v37;
        v38[1] = sub_3A6EDC;
        void *v37 = 0;
        v37[1] = 0;
        v37[2] = 0;
        v36 = (std::string *)sub_188CDC8(v7 + 120, (uint64_t)v37);
      }
      std::string::operator=(v36, v31++);
    }
    while (v31 != v32);
  }
  int v39 = *(_DWORD *)(v7 + 16);
  *(_DWORD *)(v7 + 176) = *((_DWORD *)a2 + 4);
  *(_WORD *)(v7 + 204) = *((_WORD *)a2 + 10);
  *(void *)(v7 + 208) = a2[3];
  *(_DWORD *)(v7 + 16) = v39 | 0xE0F4;
  v40 = *(_DWORD **)(v7 + 160);
  if (v40)
  {
    int v41 = *((_DWORD *)a2 + 12);
    if (v41 == 0x7FFFFFFF) {
      goto LABEL_44;
    }
  }
  else
  {
    uint64_t v79 = *(void *)(v7 + 8);
    v80 = (void *)(v79 & 0xFFFFFFFFFFFFFFFCLL);
    if (v79) {
      v80 = (void *)*v80;
    }
    sub_11BE29C((uint64_t)v80);
    *(void *)(v7 + 160) = v40;
    int v41 = *((_DWORD *)a2 + 12);
    if (v41 == 0x7FFFFFFF)
    {
LABEL_44:
      uint64_t v42 = (uint64_t)a2[7];
      if (v42 == 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_45;
      }
      goto LABEL_91;
    }
  }
  int v81 = v41 / 10;
  int v82 = v41 % 10;
  if (v41 < 0) {
    char v83 = -5;
  }
  else {
    char v83 = 5;
  }
  v40[4] |= 1u;
  v40[6] = v81 + (((103 * (char)(v83 + v82)) >> 15) & 1) + ((103 * (char)(v83 + v82)) >> 10);
  uint64_t v42 = (uint64_t)a2[7];
  if (v42 == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_45:
    int v43 = *((_DWORD *)a2 + 16);
    if (v43 == 0x7FFFFFFF) {
      goto LABEL_46;
    }
    goto LABEL_95;
  }
LABEL_91:
  int v84 = (int)v42 / 100;
  int v85 = (int)v42 % 100;
  if (v42 < 0) {
    __int16 v86 = -50;
  }
  else {
    __int16 v86 = 50;
  }
  v40[4] |= 2u;
  v40[7] = v84 + ((5243 * (__int16)(v86 + v85)) >> 19) + ((5243 * (__int16)(v86 + v85)) >> 31);
  int v43 = *((_DWORD *)a2 + 16);
  if (v43 == 0x7FFFFFFF)
  {
LABEL_46:
    uint64_t v44 = (uint64_t)a2[9];
    if (v44 == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_47;
    }
    goto LABEL_99;
  }
LABEL_95:
  int v87 = v43 / 10;
  int v88 = v43 % 10;
  if (v43 < 0) {
    char v89 = -5;
  }
  else {
    char v89 = 5;
  }
  v40[4] |= 4u;
  v40[8] = v87 + (((103 * (char)(v89 + v88)) >> 15) & 1) + ((103 * (char)(v89 + v88)) >> 10);
  uint64_t v44 = (uint64_t)a2[9];
  if (v44 == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_47:
    int v45 = *((_DWORD *)a2 + 20);
    if (v45 == 0x7FFFFFFF) {
      goto LABEL_48;
    }
    goto LABEL_103;
  }
LABEL_99:
  int v90 = (int)v44 / 100;
  int v91 = (int)v44 % 100;
  if (v44 < 0) {
    __int16 v92 = -50;
  }
  else {
    __int16 v92 = 50;
  }
  v40[4] |= 8u;
  v40[9] = v90 + ((5243 * (__int16)(v92 + v91)) >> 19) + ((5243 * (__int16)(v92 + v91)) >> 31);
  int v45 = *((_DWORD *)a2 + 20);
  if (v45 == 0x7FFFFFFF)
  {
LABEL_48:
    uint64_t v46 = (uint64_t)a2[11];
    if (v46 == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_49;
    }
    goto LABEL_107;
  }
LABEL_103:
  int v93 = v45 / 10;
  int v94 = v45 % 10;
  if (v45 < 0) {
    char v95 = -5;
  }
  else {
    char v95 = 5;
  }
  v40[4] |= 0x10u;
  v40[10] = v93 + (((103 * (char)(v95 + v94)) >> 15) & 1) + ((103 * (char)(v95 + v94)) >> 10);
  uint64_t v46 = (uint64_t)a2[11];
  if (v46 == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_49:
    int v47 = *((_DWORD *)a2 + 24);
    if (v47 == 0x7FFFFFFF) {
      goto LABEL_50;
    }
    goto LABEL_111;
  }
LABEL_107:
  int v96 = (int)v46 / 100;
  int v97 = (int)v46 % 100;
  if (v46 < 0) {
    __int16 v98 = -50;
  }
  else {
    __int16 v98 = 50;
  }
  v40[4] |= 0x20u;
  v40[11] = v96 + ((5243 * (__int16)(v98 + v97)) >> 19) + ((5243 * (__int16)(v98 + v97)) >> 31);
  int v47 = *((_DWORD *)a2 + 24);
  if (v47 == 0x7FFFFFFF)
  {
LABEL_50:
    uint64_t v48 = (uint64_t)a2[13];
    if (v48 == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_51;
    }
    goto LABEL_115;
  }
LABEL_111:
  int v99 = v47 / 10;
  int v100 = v47 % 10;
  if (v47 < 0) {
    char v101 = -5;
  }
  else {
    char v101 = 5;
  }
  v40[4] |= 0x40u;
  v40[12] = v99 + (((103 * (char)(v101 + v100)) >> 15) & 1) + ((103 * (char)(v101 + v100)) >> 10);
  uint64_t v48 = (uint64_t)a2[13];
  if (v48 == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_51:
    int v49 = *((_DWORD *)a2 + 28);
    if (v49 == 0x7FFFFFFF) {
      goto LABEL_52;
    }
    goto LABEL_119;
  }
LABEL_115:
  int v102 = (int)v48 / 100;
  int v103 = (int)v48 % 100;
  if (v48 < 0) {
    __int16 v104 = -50;
  }
  else {
    __int16 v104 = 50;
  }
  v40[4] |= 0x80u;
  v40[13] = v102 + ((5243 * (__int16)(v104 + v103)) >> 19) + ((5243 * (__int16)(v104 + v103)) >> 31);
  int v49 = *((_DWORD *)a2 + 28);
  if (v49 == 0x7FFFFFFF)
  {
LABEL_52:
    uint64_t v50 = (uint64_t)a2[15];
    if (v50 == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_53;
    }
    goto LABEL_123;
  }
LABEL_119:
  int v105 = v49 / 10;
  int v106 = v49 % 10;
  if (v49 < 0) {
    char v107 = -5;
  }
  else {
    char v107 = 5;
  }
  v40[4] |= 0x100u;
  v40[14] = v105 + (((103 * (char)(v107 + v106)) >> 15) & 1) + ((103 * (char)(v107 + v106)) >> 10);
  uint64_t v50 = (uint64_t)a2[15];
  if (v50 == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_53:
    uint64_t v51 = (uint64_t)a2[16];
    if (v51 == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_54;
    }
    goto LABEL_127;
  }
LABEL_123:
  int v108 = (int)v50 / 100;
  int v109 = (int)v50 % 100;
  if (v50 < 0) {
    __int16 v110 = -50;
  }
  else {
    __int16 v110 = 50;
  }
  v40[4] |= 0x200u;
  v40[15] = v108 + ((5243 * (__int16)(v110 + v109)) >> 19) + ((5243 * (__int16)(v110 + v109)) >> 31);
  uint64_t v51 = (uint64_t)a2[16];
  if (v51 == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_54:
    int v52 = *((_DWORD *)a2 + 34);
    if (v52 == 0x7FFFFFFF) {
      goto LABEL_55;
    }
    goto LABEL_131;
  }
LABEL_127:
  int v111 = (int)v51 / 100;
  int v112 = (int)v51 % 100;
  if (v51 < 0) {
    __int16 v113 = -50;
  }
  else {
    __int16 v113 = 50;
  }
  v40[4] |= 0x400u;
  v40[16] = v111 + ((5243 * (__int16)(v113 + v112)) >> 19) + ((5243 * (__int16)(v113 + v112)) >> 31);
  int v52 = *((_DWORD *)a2 + 34);
  if (v52 == 0x7FFFFFFF)
  {
LABEL_55:
    uint64_t v53 = (uint64_t)a2[18];
    if (v53 == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_60;
    }
    goto LABEL_56;
  }
LABEL_131:
  int v114 = v52 / 10;
  int v115 = v52 % 10;
  if (v52 < 0) {
    char v116 = -5;
  }
  else {
    char v116 = 5;
  }
  v40[4] |= 0x800u;
  v40[17] = v114 + (((103 * (char)(v116 + v115)) >> 15) & 1) + ((103 * (char)(v116 + v115)) >> 10);
  uint64_t v53 = (uint64_t)a2[18];
  if (v53 != 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_56:
    int v54 = (int)v53 / 100;
    int v55 = (int)v53 % 100;
    if (v53 < 0) {
      __int16 v56 = -50;
    }
    else {
      __int16 v56 = 50;
    }
    v40[4] |= 0x1000u;
    v40[18] = v54 + ((5243 * (__int16)(v56 + v55)) >> 19) + ((5243 * (__int16)(v56 + v55)) >> 31);
  }
LABEL_60:
  sub_3A5090((uint64_t)a1, (char *)(**a2 + 424 * (void)a2[1]), (uint64_t *)&v220);
  v57 = v220;
  v58 = v221;
  if (v220 != v221)
  {
    v59 = a1;
    v60 = (unsigned int *)(v7 + 24);
    unsigned int v61 = *(_DWORD *)(v7 + 24);
    do
    {
      while (1)
      {
        uint64_t v62 = *v57;
        if (v61 == *(_DWORD *)(v7 + 28)) {
          break;
        }
        *(void *)(*(void *)(v7 + 32) + 8 * v61++) = v62;
        unsigned int *v60 = v61;
        if (++v57 == v58) {
          goto LABEL_65;
        }
      }
      sub_188CA54((unsigned int *)(v7 + 24), v61 + 1);
      *(void *)(*(void *)(v7 + 32) + 8 * v61++) = v62;
      unsigned int *v60 = v61;
      ++v57;
    }
    while (v57 != v58);
LABEL_65:
    v57 = v220;
    a1 = v59;
  }
  if (v57)
  {
    v221 = v57;
    operator delete(v57);
  }
  sub_3A53B0((uint64_t)a1, (uint64_t ***)(**a2 + 424 * (void)a2[1]), v7);
  double v63 = *((double *)a2 + 4);
  if (v63 == 1.79769313e308) {
    double v63 = (double)(int)sub_104011C((uint64_t)(a1 + 10), **a2 + 424 * (void)a2[1]);
  }
  double v64 = *((double *)a2 + 5);
  if (v64 == 1.79769313e308) {
    double v64 = v63;
  }
  int v65 = *(_DWORD *)(v7 + 16);
  *(_DWORD *)(v7 + 180) = v63;
  *(_DWORD *)(v7 + 16) = v65 | 0x500;
  *(_DWORD *)(v7 + 192) = v64;
  v66 = a2[1];
  uint64_t v67 = **a2;
  if (sub_357E70(v67 + 424 * (void)v66 + 280))
  {
    uint64_t v68 = v67 + 424 * (void)v66;
    uint64_t v69 = *(void *)(v68 + 304);
    int v70 = *(_DWORD *)(v7 + 16);
    *(_DWORD *)(v7 + 16) = v70 | 0x200;
    *(void *)(v7 + 184) = v69;
    LODWORD(v68) = *(_DWORD *)(v68 + 316);
    int v71 = (int)v68 / 10;
    int v72 = (int)v68 % 10;
    if ((int)v68 < 0) {
      char v73 = -5;
    }
    else {
      char v73 = 5;
    }
    *(_DWORD *)(v7 + 16) = v70 | 0xA00;
    *(_DWORD *)(v7 + 196) = v71
                          + (((103 * (char)(v73 + v72)) >> 15) & 1)
                          + ((103 * (char)(v73 + v72)) >> 10);
  }
  uint64_t v74 = v67 + 424 * (void)v66;
  unint64_t v75 = *(void *)(v74 + 360);
  if (v75 - 0x7FFFFFFFFFFFFFFFLL >= 0x8000000000000002)
  {
    if ((unsigned __int16)(v75 % 0x64) <= 0x31u) {
      int v76 = v75 / 0x64;
    }
    else {
      int v76 = v75 / 0x64 + 1;
    }
    *(_DWORD *)(v7 + 16) |= 8u;
    uint64_t v77 = *(void *)(v7 + 168);
    if (v77)
    {
      *(_DWORD *)(v77 + 16) |= 1u;
      uint64_t v78 = *(void *)(v77 + 24);
      if (v78)
      {
LABEL_142:
        *(_DWORD *)(v78 + 16) |= 1u;
        *(_DWORD *)(v78 + 24) = v76;
        goto LABEL_143;
      }
    }
    else
    {
      uint64_t v117 = *(void *)(v7 + 8);
      v118 = (void *)(v117 & 0xFFFFFFFFFFFFFFFCLL);
      if (v117) {
        v118 = (void *)*v118;
      }
      sub_11BE720((uint64_t)v118);
      uint64_t v77 = v119;
      *(void *)(v7 + 168) = v119;
      *(_DWORD *)(v119 + 16) |= 1u;
      uint64_t v78 = *(void *)(v119 + 24);
      if (v78) {
        goto LABEL_142;
      }
    }
    uint64_t v120 = *(void *)(v77 + 8);
    v121 = (void *)(v120 & 0xFFFFFFFFFFFFFFFCLL);
    if (v120) {
      v121 = (void *)*v121;
    }
    uint64_t v78 = sub_11BE438((uint64_t)v121);
    *(void *)(v77 + 24) = v78;
    goto LABEL_142;
  }
LABEL_143:
  v122 = (void *)(v74 + 352);
  unint64_t v123 = v122[2];
  if (v123 - 0x7FFFFFFFFFFFFFFFLL < 0x8000000000000002) {
    goto LABEL_157;
  }
  if ((unsigned __int16)(v123 % 0x64) <= 0x31u) {
    int v124 = v123 / 0x64;
  }
  else {
    int v124 = v123 / 0x64 + 1;
  }
  *(_DWORD *)(v7 + 16) |= 8u;
  uint64_t v125 = *(void *)(v7 + 168);
  if (!v125)
  {
    uint64_t v127 = *(void *)(v7 + 8);
    v128 = (void *)(v127 & 0xFFFFFFFFFFFFFFFCLL);
    if (v127) {
      v128 = (void *)*v128;
    }
    sub_11BE720((uint64_t)v128);
    uint64_t v125 = v129;
    *(void *)(v7 + 168) = v129;
    *(_DWORD *)(v129 + 16) |= 2u;
    uint64_t v126 = *(void *)(v129 + 32);
    if (v126) {
      goto LABEL_156;
    }
    goto LABEL_153;
  }
  *(_DWORD *)(v125 + 16) |= 2u;
  uint64_t v126 = *(void *)(v125 + 32);
  if (!v126)
  {
LABEL_153:
    uint64_t v130 = *(void *)(v125 + 8);
    v131 = (void *)(v130 & 0xFFFFFFFFFFFFFFFCLL);
    if (v130) {
      v131 = (void *)*v131;
    }
    uint64_t v126 = sub_11BE4B4((uint64_t)v131);
    *(void *)(v125 + 32) = v126;
  }
LABEL_156:
  *(_DWORD *)(v126 + 16) |= 1u;
  *(_DWORD *)(v126 + 24) = v124;
LABEL_157:
  unint64_t v132 = v122[3];
  if (v132 - 0x7FFFFFFFFFFFFFFFLL < 0x8000000000000002) {
    goto LABEL_171;
  }
  if ((unsigned __int16)(v132 % 0x64) <= 0x31u) {
    int v133 = v132 / 0x64;
  }
  else {
    int v133 = v132 / 0x64 + 1;
  }
  *(_DWORD *)(v7 + 16) |= 8u;
  uint64_t v134 = *(void *)(v7 + 168);
  if (!v134)
  {
    uint64_t v136 = *(void *)(v7 + 8);
    v137 = (void *)(v136 & 0xFFFFFFFFFFFFFFFCLL);
    if (v136) {
      v137 = (void *)*v137;
    }
    sub_11BE720((uint64_t)v137);
    uint64_t v134 = v138;
    *(void *)(v7 + 168) = v138;
    *(_DWORD *)(v138 + 16) |= 4u;
    uint64_t v135 = *(void *)(v138 + 40);
    if (v135) {
      goto LABEL_170;
    }
    goto LABEL_167;
  }
  *(_DWORD *)(v134 + 16) |= 4u;
  uint64_t v135 = *(void *)(v134 + 40);
  if (!v135)
  {
LABEL_167:
    uint64_t v139 = *(void *)(v134 + 8);
    v140 = (void *)(v139 & 0xFFFFFFFFFFFFFFFCLL);
    if (v139) {
      v140 = (void *)*v140;
    }
    uint64_t v135 = sub_11BE530((uint64_t)v140);
    *(void *)(v134 + 40) = v135;
  }
LABEL_170:
  *(_DWORD *)(v135 + 16) |= 1u;
  *(_DWORD *)(v135 + 24) = v133;
LABEL_171:
  unint64_t v141 = v122[4];
  if (v141 - 0x7FFFFFFFFFFFFFFFLL < 0x8000000000000002) {
    goto LABEL_185;
  }
  if ((unsigned __int16)(v141 % 0x64) <= 0x31u) {
    int v142 = v141 / 0x64;
  }
  else {
    int v142 = v141 / 0x64 + 1;
  }
  *(_DWORD *)(v7 + 16) |= 8u;
  uint64_t v143 = *(void *)(v7 + 168);
  if (!v143)
  {
    uint64_t v145 = *(void *)(v7 + 8);
    v146 = (void *)(v145 & 0xFFFFFFFFFFFFFFFCLL);
    if (v145) {
      v146 = (void *)*v146;
    }
    sub_11BE720((uint64_t)v146);
    uint64_t v143 = v147;
    *(void *)(v7 + 168) = v147;
    *(_DWORD *)(v147 + 16) |= 0x10u;
    uint64_t v144 = *(void *)(v147 + 56);
    if (v144) {
      goto LABEL_184;
    }
    goto LABEL_181;
  }
  *(_DWORD *)(v143 + 16) |= 0x10u;
  uint64_t v144 = *(void *)(v143 + 56);
  if (!v144)
  {
LABEL_181:
    uint64_t v148 = *(void *)(v143 + 8);
    v149 = (void *)(v148 & 0xFFFFFFFFFFFFFFFCLL);
    if (v148) {
      v149 = (void *)*v149;
    }
    uint64_t v144 = sub_11BE628((uint64_t)v149);
    *(void *)(v143 + 56) = v144;
  }
LABEL_184:
  *(_DWORD *)(v144 + 16) |= 1u;
  *(_DWORD *)(v144 + 24) = v142;
LABEL_185:
  unint64_t v150 = v122[5];
  if (v150 - 0x7FFFFFFFFFFFFFFFLL < 0x8000000000000002) {
    goto LABEL_199;
  }
  if ((unsigned __int16)(v150 % 0x64) <= 0x31u) {
    int v151 = v150 / 0x64;
  }
  else {
    int v151 = v150 / 0x64 + 1;
  }
  *(_DWORD *)(v7 + 16) |= 8u;
  uint64_t v152 = *(void *)(v7 + 168);
  if (!v152)
  {
    uint64_t v154 = *(void *)(v7 + 8);
    v155 = (void *)(v154 & 0xFFFFFFFFFFFFFFFCLL);
    if (v154) {
      v155 = (void *)*v155;
    }
    sub_11BE720((uint64_t)v155);
    uint64_t v152 = v156;
    *(void *)(v7 + 168) = v156;
    *(_DWORD *)(v156 + 16) |= 0x20u;
    uint64_t v153 = *(void *)(v156 + 64);
    if (v153) {
      goto LABEL_198;
    }
    goto LABEL_195;
  }
  *(_DWORD *)(v152 + 16) |= 0x20u;
  uint64_t v153 = *(void *)(v152 + 64);
  if (!v153)
  {
LABEL_195:
    uint64_t v157 = *(void *)(v152 + 8);
    v158 = (void *)(v157 & 0xFFFFFFFFFFFFFFFCLL);
    if (v157) {
      v158 = (void *)*v158;
    }
    uint64_t v153 = sub_11BE6A4((uint64_t)v158);
    *(void *)(v152 + 64) = v153;
  }
LABEL_198:
  *(_DWORD *)(v153 + 16) |= 1u;
  *(_DWORD *)(v153 + 24) = v151;
LABEL_199:
  int v159 = *(unsigned __int16 *)(v67 + 424 * (void)v66 + 400);
  if (v159 != 0xFFFF)
  {
    *(_DWORD *)(v7 + 16) |= 0x10000u;
    *(_DWORD *)(v7 + 216) = v159;
  }
  uint64_t v160 = v67 + 424 * (void)v66;
  v161 = *(void **)(v160 + 320);
  v162 = *(void **)(v160 + 328);
  if (v161 != v162)
  {
    while (1)
    {
      uint64_t v163 = v161[1];
      if (*v161 != v163) {
        break;
      }
LABEL_203:
      v161 += 7;
      if (v161 == v162) {
        goto LABEL_271;
      }
    }
    uint64_t v164 = *v161 + 32;
    while (1)
    {
      v166 = *(_DWORD **)(v7 + 96);
      if (v166 && (uint64_t v167 = *(int *)(v7 + 88), (int)v167 < *v166))
      {
        *(_DWORD *)(v7 + 88) = v167 + 1;
        uint64_t v168 = *(void *)&v166[2 * v167 + 2];
      }
      else
      {
        v169 = sub_11BE7A4(*(void *)(v7 + 80));
        uint64_t v168 = sub_188CDC8(v7 + 80, (uint64_t)v169);
      }
      uint64_t v170 = *(void *)(v164 - 32);
      int v171 = *(_DWORD *)(v168 + 16);
      *(_DWORD *)(v168 + 16) = v171 | 4;
      *(void *)(v168 + 56) = v170;
      if (*(void *)(v164 + 24) != -1)
      {
        *(_DWORD *)(v168 + 16) = v171 | 6;
        v172 = *(void **)(v168 + 48);
        if (!v172)
        {
          uint64_t v173 = *(void *)(v168 + 8);
          v174 = (void *)(v173 & 0xFFFFFFFFFFFFFFFCLL);
          if (v173) {
            v174 = (void *)*v174;
          }
          v172 = sub_154F260((uint64_t)v174);
          *(void *)(v168 + 48) = v172;
        }
        *((_DWORD *)v172 + 4) |= 1u;
        uint64_t v175 = v172[1];
        v176 = (uint64_t *)(v175 & 0xFFFFFFFFFFFFFFFCLL);
        if (v175) {
          v176 = (uint64_t *)*v176;
        }
        sub_1881DF4((std::string **)v172 + 3, (long long *)v164, v176);
        uint64_t v177 = nullsub_1(*(void *)(v164 + 24));
        *((_DWORD *)v172 + 4) |= 2u;
        v172[4] = v177;
      }
      if ((*(unsigned char *)(v164 + 32) & 2) != 0)
      {
        *(_DWORD *)(v168 + 16) |= 1u;
        uint64_t v178 = *(void *)(v168 + 40);
        if (v178)
        {
          *(_DWORD *)(v178 + 16) |= 1u;
          if (!*(void *)(v178 + 24)) {
            goto LABEL_230;
          }
        }
        else
        {
          uint64_t v180 = *(void *)(v168 + 8);
          v181 = (void *)(v180 & 0xFFFFFFFFFFFFFFFCLL);
          if (v180) {
            v181 = (void *)*v181;
          }
          sub_11BE720((uint64_t)v181);
          uint64_t v178 = v182;
          *(void *)(v168 + 40) = v182;
          *(_DWORD *)(v182 + 16) |= 1u;
          if (!*(void *)(v182 + 24))
          {
LABEL_230:
            uint64_t v183 = *(void *)(v178 + 8);
            v184 = (void *)(v183 & 0xFFFFFFFFFFFFFFFCLL);
            if (v183) {
              v184 = (void *)*v184;
            }
            *(void *)(v178 + 24) = sub_11BE438((uint64_t)v184);
            if ((*(unsigned char *)(v164 + 32) & 4) == 0) {
              goto LABEL_237;
            }
            goto LABEL_224;
          }
        }
      }
      if ((*(unsigned char *)(v164 + 32) & 4) == 0) {
        goto LABEL_237;
      }
LABEL_224:
      *(_DWORD *)(v168 + 16) |= 1u;
      uint64_t v179 = *(void *)(v168 + 40);
      if (v179)
      {
        *(_DWORD *)(v179 + 16) |= 2u;
        if (!*(void *)(v179 + 32)) {
          goto LABEL_241;
        }
      }
      else
      {
        uint64_t v185 = *(void *)(v168 + 8);
        v186 = (void *)(v185 & 0xFFFFFFFFFFFFFFFCLL);
        if (v185) {
          v186 = (void *)*v186;
        }
        sub_11BE720((uint64_t)v186);
        uint64_t v179 = v187;
        *(void *)(v168 + 40) = v187;
        *(_DWORD *)(v187 + 16) |= 2u;
        if (!*(void *)(v187 + 32))
        {
LABEL_241:
          uint64_t v189 = *(void *)(v179 + 8);
          v190 = (void *)(v189 & 0xFFFFFFFFFFFFFFFCLL);
          if (v189) {
            v190 = (void *)*v190;
          }
          *(void *)(v179 + 32) = sub_11BE4B4((uint64_t)v190);
          if ((*(unsigned char *)(v164 + 32) & 8) == 0) {
            goto LABEL_248;
          }
          goto LABEL_238;
        }
      }
LABEL_237:
      if ((*(unsigned char *)(v164 + 32) & 8) == 0) {
        goto LABEL_248;
      }
LABEL_238:
      *(_DWORD *)(v168 + 16) |= 1u;
      uint64_t v188 = *(void *)(v168 + 40);
      if (v188)
      {
        *(_DWORD *)(v188 + 16) |= 4u;
        if (!*(void *)(v188 + 40)) {
          goto LABEL_252;
        }
      }
      else
      {
        uint64_t v191 = *(void *)(v168 + 8);
        v192 = (void *)(v191 & 0xFFFFFFFFFFFFFFFCLL);
        if (v191) {
          v192 = (void *)*v192;
        }
        sub_11BE720((uint64_t)v192);
        uint64_t v188 = v193;
        *(void *)(v168 + 40) = v193;
        *(_DWORD *)(v193 + 16) |= 4u;
        if (!*(void *)(v193 + 40))
        {
LABEL_252:
          uint64_t v195 = *(void *)(v188 + 8);
          v196 = (void *)(v195 & 0xFFFFFFFFFFFFFFFCLL);
          if (v195) {
            v196 = (void *)*v196;
          }
          *(void *)(v188 + 40) = sub_11BE530((uint64_t)v196);
          if ((*(unsigned char *)(v164 + 32) & 0x10) == 0) {
            goto LABEL_262;
          }
          goto LABEL_249;
        }
      }
LABEL_248:
      if ((*(unsigned char *)(v164 + 32) & 0x10) == 0) {
        goto LABEL_262;
      }
LABEL_249:
      *(_DWORD *)(v168 + 16) |= 1u;
      uint64_t v194 = *(void *)(v168 + 40);
      if (v194)
      {
        *(_DWORD *)(v194 + 16) |= 0x10u;
        if (*(void *)(v194 + 56)) {
          goto LABEL_262;
        }
LABEL_259:
        uint64_t v200 = *(void *)(v194 + 8);
        v201 = (void *)(v200 & 0xFFFFFFFFFFFFFFFCLL);
        if (v200) {
          v201 = (void *)*v201;
        }
        *(void *)(v194 + 56) = sub_11BE628((uint64_t)v201);
        goto LABEL_262;
      }
      uint64_t v197 = *(void *)(v168 + 8);
      v198 = (void *)(v197 & 0xFFFFFFFFFFFFFFFCLL);
      if (v197) {
        v198 = (void *)*v198;
      }
      sub_11BE720((uint64_t)v198);
      uint64_t v194 = v199;
      *(void *)(v168 + 40) = v199;
      *(_DWORD *)(v199 + 16) |= 0x10u;
      if (!*(void *)(v199 + 56)) {
        goto LABEL_259;
      }
LABEL_262:
      if ((*(unsigned char *)(v164 + 32) & 0x20) != 0)
      {
        *(_DWORD *)(v168 + 16) |= 1u;
        uint64_t v202 = *(void *)(v168 + 40);
        if (!v202)
        {
          uint64_t v203 = *(void *)(v168 + 8);
          v204 = (void *)(v203 & 0xFFFFFFFFFFFFFFFCLL);
          if (v203) {
            v204 = (void *)*v204;
          }
          sub_11BE720((uint64_t)v204);
          uint64_t v202 = v205;
          *(void *)(v168 + 40) = v205;
          *(_DWORD *)(v205 + 16) |= 0x20u;
          if (*(void *)(v205 + 64)) {
            goto LABEL_207;
          }
LABEL_269:
          uint64_t v206 = *(void *)(v202 + 8);
          v207 = (void *)(v206 & 0xFFFFFFFFFFFFFFFCLL);
          if (v206) {
            v207 = (void *)*v207;
          }
          *(void *)(v202 + 64) = sub_11BE6A4((uint64_t)v207);
          goto LABEL_207;
        }
        *(_DWORD *)(v202 + 16) |= 0x20u;
        if (!*(void *)(v202 + 64)) {
          goto LABEL_269;
        }
      }
LABEL_207:
      uint64_t v165 = v164 + 40;
      v164 += 72;
      if (v165 == v163) {
        goto LABEL_203;
      }
    }
  }
LABEL_271:
  BOOL v208 = *((unsigned char *)a2 + 16) == 0;
  if (*((unsigned char *)a2 + 16)) {
    unsigned __int8 v209 = *((unsigned char *)a2 + 17);
  }
  else {
    unsigned __int8 v209 = 0;
  }
  a1[1483] += v209;
  unsigned __int8 v210 = *((unsigned char *)a2 + 17) ^ 1;
  if (v208) {
    unsigned __int8 v210 = 0;
  }
  a1[1484] += v210;
  int v211 = a1[1485];
  if (v208) {
    ++v211;
  }
  a1[1485] = v211;
  if (SHIBYTE(v217) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_3A47B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_29D95C((uint64_t)&a14);
  if (a73) {
    a73 = 0;
  }
  if (a72 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_3A4850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)uint64_t v50 = 0u;
  *(_OWORD *)uint64_t v51 = 0u;
  int v52 = 1065353216;
  v5 = *(_DWORD **)(a3 + 80);
  if (v5 && (uint64_t v6 = *(int *)(a3 + 72), (int)v6 < *v5))
  {
    *(_DWORD *)(a3 + 72) = v6 + 1;
    uint64_t v7 = *(void *)&v5[2 * v6 + 2];
    *(_DWORD *)(v7 + 16) |= 1u;
    uint64_t v8 = *(void *)(v7 + 144);
    if (v8) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v9 = a3 + 64;
    uint64_t v10 = sub_11BE844(*(void *)(a3 + 64));
    uint64_t v7 = sub_188CDC8(v9, v10);
    *(_DWORD *)(v7 + 16) |= 1u;
    uint64_t v8 = *(void *)(v7 + 144);
    if (v8) {
      goto LABEL_9;
    }
  }
  uint64_t v11 = *(void *)(v7 + 8);
  uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
  if (v11) {
    uint64_t v12 = (void *)*v12;
  }
  uint64_t v8 = sub_13D9608((uint64_t)v12);
  *(void *)(v7 + 144) = v8;
LABEL_9:
  *(_DWORD *)(v8 + 40) |= 1u;
  uint64_t v13 = *(void *)(v8 + 8);
  double v14 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
  if (v13) {
    double v14 = (uint64_t *)*v14;
  }
  sub_1881DF4((std::string **)(v8 + 72), (long long *)a2, v14);
  char v15 = *(unsigned char *)(a1 + 5931);
  *(_DWORD *)(v7 + 16) |= 0x4000u;
  *(unsigned char *)(v7 + 205) = v15;
  uint64_t v16 = *(_DWORD **)(v7 + 56);
  if (v16 && (uint64_t v17 = *(int *)(v7 + 48), (int)v17 < *v16))
  {
    *(_DWORD *)(v7 + 48) = v17 + 1;
    uint64_t v18 = *(void *)&v16[2 * v17 + 2];
    uint64_t v19 = *(uint64_t **)(a2 + 288);
    uint64_t v20 = *(uint64_t **)(a2 + 296);
    if (v19 == v20) {
      goto LABEL_36;
    }
  }
  else
  {
    v21 = sub_11BE320(*(void *)(v7 + 40));
    uint64_t v18 = sub_188CDC8(v7 + 40, (uint64_t)v21);
    uint64_t v19 = *(uint64_t **)(a2 + 288);
    uint64_t v20 = *(uint64_t **)(a2 + 296);
    if (v19 == v20) {
      goto LABEL_36;
    }
  }
  char v22 = (uint64_t *)(v18 + 24);
  do
  {
    uint64_t v23 = *v19;
    sub_2954EC(*(void *)(a1 + 5216), *v19, (uint64_t)v47);
    if (!*(_DWORD *)(v18 + 32))
    {
      sub_2E51EC((uint64_t)v47, (uint64_t)v44);
      unint64_t v45 = sub_2E1BC0((uint64_t)v44);
      int v46 = v25;
      int v26 = *(_DWORD **)(v18 + 40);
      if (v26 && (uint64_t v27 = *(int *)(v18 + 32), (int)v27 < *v26))
      {
        *(_DWORD *)(v18 + 32) = v27 + 1;
        uint64_t v28 = *(void *)&v26[2 * v27 + 2];
      }
      else
      {
        uint64_t v29 = sub_15C1918(*v22);
        uint64_t v28 = sub_188CDC8(v18 + 24, v29);
      }
      sub_E112BC(&v45, v28, v24);
    }
    sub_3A5CB4((uint64_t)v47, (uint64_t)v44);
    unint64_t v45 = sub_2E1BC0((uint64_t)v44);
    int v46 = v31;
    v32 = *(_DWORD **)(v18 + 40);
    if (v32 && (uint64_t v33 = *(int *)(v18 + 32), (int)v33 < *v32))
    {
      *(_DWORD *)(v18 + 32) = v33 + 1;
      uint64_t v34 = *(void *)&v32[2 * v33 + 2];
    }
    else
    {
      uint64_t v35 = sub_15C1918(*v22);
      uint64_t v34 = sub_188CDC8(v18 + 24, v35);
    }
    sub_E112BC(&v45, v34, v30);
    v44[0] = sub_3A5DDC(*(void *)(a1 + 5880), v23);
    if (!sub_3AB558(v50, v44))
    {
      v36 = *(_DWORD **)(v7 + 96);
      if (v36 && (uint64_t v37 = *(int *)(v7 + 88), (int)v37 < *v36))
      {
        *(_DWORD *)(v7 + 88) = v37 + 1;
        uint64_t v38 = *(void *)&v36[2 * v37 + 2];
      }
      else
      {
        int v39 = sub_11BE7A4(*(void *)(v7 + 80));
        uint64_t v38 = sub_188CDC8(v7 + 80, (uint64_t)v39);
      }
      uint64_t v40 = sub_3242C0(*(void *)(a1 + 5880), v44[0]);
      *(_DWORD *)(v38 + 16) |= 4u;
      *(void *)(v38 + 56) = v40;
      sub_3AB69C((uint64_t)v50, v44, v44);
    }
    if (__p)
    {
      int v49 = __p;
      operator delete(__p);
    }
    ++v19;
  }
  while (v19 != v20);
LABEL_36:
  ++*(_DWORD *)(a1 + 5944);
  int v41 = v51[0];
  if (v51[0])
  {
    do
    {
      uint64_t v42 = (void *)*v41;
      operator delete(v41);
      int v41 = v42;
    }
    while (v42);
  }
  int v43 = v50[0];
  v50[0] = 0;
  if (v43) {
    operator delete(v43);
  }
}

void sub_3A4BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_12168((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_3A4BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_12168((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_3A4BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (__p) {
    operator delete(__p);
  }
  sub_12168((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_3A4C2C(uint64_t a1)
{
  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

__n128 sub_3A4C98@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  a2[1].n128_u32[0] = *(_DWORD *)(a1 + 5948);
  __n128 result = *(__n128 *)(a1 + 5932);
  *a2 = result;
  return result;
}

void sub_3A4CB0(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  int v55 = 0;
  __int16 v56 = 0;
  uint64_t v57 = 0;
  if (*(unsigned char *)(a2 + 41))
  {
    char v8 = *(unsigned char *)(a2 + 40);
    int v9 = *(_DWORD *)(a2 + 36);
    LODWORD(__p[0]) = *(_DWORD *)(a2 + 32);
    WORD2(__p[0]) = v9;
    BYTE6(__p[0]) = v8;
  }
  else
  {
    int v10 = *(_DWORD *)(a2 + 36);
    LODWORD(__p[0]) = *(_DWORD *)(a2 + 32);
    WORD2(__p[0]) = v10;
    BYTE6(__p[0]) = 0;
    sub_2D5B74(&v55, __p);
    int v11 = *(_DWORD *)(a2 + 36);
    LODWORD(__p[0]) = *(_DWORD *)(a2 + 32);
    WORD2(__p[0]) = v11;
    BYTE6(__p[0]) = 1;
  }
  sub_2D5B74(&v55, __p);
  uint64_t v12 = v55;
  uint64_t v28 = v56;
  if (v55 == v56) {
    goto LABEL_26;
  }
  int64x2_t v30 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  uint64_t v27 = a1;
  do
  {
    uint64_t v29 = v12;
    uint64_t v13 = *(void *)v12;
    uint64_t v14 = *(void *)(a1 + 5216);
    unint64_t v15 = *(void *)v12 & 0xFFFFFFFFFFFFLL;
    uint64_t v16 = (int *)sub_2D5D58(v14, v15);
    if (*(unsigned char *)(v14 + 7772))
    {
      uint64_t v17 = sub_2DB8E0(v14 + 3896, v13, 0);
      uint64_t v18 = &v17[-*(int *)v17];
      if (*(unsigned __int16 *)v18 < 5u)
      {
        uint64_t v19 = 0;
      }
      else
      {
        uint64_t v19 = *((unsigned __int16 *)v18 + 2);
        if (v19) {
          v19 += (uint64_t)&v17[*(unsigned int *)&v17[v19]];
        }
      }
      uint64_t v20 = (int *)(v19 + 4 * WORD2(v13) + 4 + *(unsigned int *)(v19 + 4 * WORD2(v13) + 4));
    }
    else
    {
      uint64_t v20 = 0;
    }
    v21 = (int *)sub_2E5C38(v14, v15, 1);
    v51[0] = v16;
    v51[1] = v20;
    v51[2] = v21;
    v51[3] = v22;
    int v52 = v13;
    __int16 v53 = WORD2(v13);
    BOOL v54 = (v13 & 0xFF000000000000) != 0;
    a1 = v27;
    sub_3F4E6C(v27, (uint64_t)v51, (uint64_t)&v49);
    sub_3EB374(v27, v51, (uint64_t)__p);
    sub_3A9A80(&v49, (uint64_t)v50, (long long *)__p[0], (long long *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    double v24 = v49;
    uint64_t v23 = v50;
    if (v49 == v50)
    {
      if (v49) {
        goto LABEL_24;
      }
    }
    else
    {
      do
      {
        int v25 = sub_3A9CC8(a4, **(void **)v24 + 424 * *((void *)v24 + 1) + 40);
        if (v25)
        {
          *((unsigned char *)v25 + 59) = 1;
          *((unsigned char *)v25 + 60) |= a3;
        }
        else
        {
          __p[0] = 0;
          __p[1] = 0;
          char v32 = 0;
          int v33 = 257;
          char v34 = 0;
          long long v35 = xmmword_20E2950;
          uint64_t v36 = 0x7FEFFFFFFFFFFFFFLL;
          int v37 = 0x7FFFFFFF;
          uint64_t v38 = 0x7FFFFFFFFFFFFFFFLL;
          int v39 = 0x7FFFFFFF;
          uint64_t v40 = 0x7FFFFFFFFFFFFFFFLL;
          int v41 = 0x7FFFFFFF;
          uint64_t v42 = 0x7FFFFFFFFFFFFFFFLL;
          int v43 = 0x7FFFFFFF;
          uint64_t v44 = 0x7FFFFFFFFFFFFFFFLL;
          int v45 = 0x7FFFFFFF;
          int64x2_t v46 = v30;
          int v47 = 0x7FFFFFFF;
          uint64_t v48 = 0x7FFFFFFFFFFFFFFFLL;
          *(_OWORD *)__p = *(_OWORD *)v24;
          uint64_t v26 = **(void **)v24 + 424 * *((void *)v24 + 1);
          char v32 = *(unsigned char *)(v26 + 272);
          BYTE2(v33) = 1;
          HIBYTE(v33) = a3;
          sub_3A9EF8((uint64_t)a4, v26 + 40, v26 + 40, (uint64_t)__p);
        }
        v24 += 16;
      }
      while (v24 != v23);
      double v24 = v49;
      if (v49)
      {
LABEL_24:
        uint64_t v50 = v24;
        operator delete(v24);
      }
    }
    uint64_t v12 = v29 + 8;
  }
  while (v29 + 8 != v28);
  uint64_t v12 = v55;
LABEL_26:
  if (v12)
  {
    __int16 v56 = v12;
    operator delete(v12);
  }
}

void sub_3A4FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  char v22 = *(void **)(v20 - 112);
  if (!v22) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v20 - 104) = v22;
  operator delete(v22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_3A5090@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_358214(a2, (uint64_t)&v35);
  sub_35841C(a2, (uint64_t)v30);
  uint64_t v42 = a3;
  uint64_t v6 = v39;
  uint64_t v7 = v40;
  while (v6 == (void *)v7 || v33 == v34)
  {
    if ((v6 == (void *)v7) == (v33 == v34)) {
      goto LABEL_17;
    }
    char v8 = v35;
    uint64_t v10 = *v35;
    if (*v35) {
      goto LABEL_12;
    }
LABEL_13:
    uint64_t v12 = v8 + 1;
    unint64_t v13 = ((v7 - (unsigned char *)v6) >> 3) - 1;
    unint64_t v14 = v36;
    long long v35 = v12;
    if (v36 < v13)
    {
      do
      {
        if (v12 != (uint64_t *)v6[v14]) {
          break;
        }
        unint64_t v36 = v14 + 1;
        uint64_t v12 = (uint64_t *)*((void *)v37 + v14 + 1);
        long long v35 = v12;
        ++v14;
      }
      while (v13 != v36);
    }
  }
  char v8 = v35;
  if (v36 != v30[1] || v35 != (uint64_t *)v30[0])
  {
    uint64_t v10 = *v35;
    if (!*v35) {
      goto LABEL_13;
    }
LABEL_12:
    unint64_t v11 = sub_3A5DDC(*(void *)(a1 + 5880), v10);
    uint64_t v41 = sub_3242C0(*(void *)(a1 + 5880), v11);
    sub_32B48C((uint64_t *)&v42, &v41);
    uint64_t v6 = v39;
    uint64_t v7 = v40;
    char v8 = v35;
    goto LABEL_13;
  }
LABEL_17:
  if (v33)
  {
    char v34 = v33;
    operator delete(v33);
  }
  if (__p)
  {
    char v32 = __p;
    operator delete(__p);
  }
  if (v39)
  {
    uint64_t v40 = v39;
    operator delete(v39);
  }
  if (v37)
  {
    uint64_t v38 = v37;
    operator delete(v37);
  }
  uint64_t v15 = *a3;
  uint64_t v16 = (char *)a3[1];
  if ((char *)*a3 == v16)
  {
    uint64_t v16 = (char *)*a3;
  }
  else
  {
    uint64_t v17 = (char *)*a3;
    while (*(void *)v17 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v17 += 8;
      if (v17 == v16) {
        goto LABEL_39;
      }
    }
    if (v17 != v16)
    {
      for (std::string::size_type i = v17 + 8; i != v16; i += 8)
      {
        if (*(void *)i != 0x7FFFFFFFFFFFFFFFLL)
        {
          *(void *)uint64_t v17 = *(void *)i;
          v17 += 8;
        }
      }
    }
    if (v17 != v16)
    {
      uint64_t v16 = v17;
      a3[1] = (uint64_t)v17;
    }
  }
LABEL_39:
  unint64_t v19 = 126 - 2 * __clz((uint64_t)&v16[-v15] >> 3);
  if (v16 == (char *)v15) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = v19;
  }
  uint64_t result = sub_3AA5B4(v15, v16, (uint64_t)&v42, v20, 1);
  char v22 = (char *)a3[1];
  if ((char *)*a3 != v22)
  {
    uint64_t v23 = (char *)(*a3 + 8);
    while (v23 != v22)
    {
      uint64_t v24 = *((void *)v23 - 1);
      uint64_t v25 = *(void *)v23;
      v23 += 8;
      if (v24 == v25)
      {
        uint64_t v26 = v23 - 16;
        while (v23 != v22)
        {
          uint64_t v27 = v24;
          uint64_t v24 = *(void *)v23;
          if (v27 != *(void *)v23)
          {
            *((void *)v26 + 1) = v24;
            v26 += 8;
          }
          v23 += 8;
        }
        uint64_t v28 = v26 + 8;
        int64_t v29 = v22 - (v26 + 8);
        if (v22 != v26 + 8)
        {
          if (v22 != (char *)v28 + v29) {
            uint64_t result = (uint64_t)memmove(v26 + 8, (char *)v28 + v29, 0);
          }
          a3[1] = (uint64_t)v28;
        }
        return result;
      }
    }
  }
  return result;
}

void sub_3A5374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2FC938((uint64_t *)va);
  unint64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void sub_3A53B0(uint64_t a1, uint64_t ***a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (!sub_357E70((uint64_t)(a2 + 35)))
  {
    memset(v123, 0, sizeof(v123));
    memset(v122, 0, 220);
    uint64_t v24 = *a2;
    char v116 = a2[1];
    if (*a2 == v116) {
      return;
    }
    int v115 = (uint64_t *)(v3 + 40);
    uint64_t v119 = a1;
    while (1)
    {
      uint64_t v25 = *(_DWORD **)(v3 + 56);
      if (v25)
      {
        uint64_t v26 = *(int *)(v3 + 48);
        if ((int)v26 < *v25)
        {
          *(_DWORD *)(v3 + 48) = v26 + 1;
          uint64_t v27 = *(void *)&v25[2 * v26 + 2];
          uint64_t v28 = *v24;
          uint64_t v117 = v24;
          v121 = v24[1];
          if (*v24 != v121) {
            break;
          }
          goto LABEL_93;
        }
      }
      int64_t v29 = sub_11BE320(*v115);
      uint64_t v27 = sub_188CDC8((uint64_t)v115, (uint64_t)v29);
      uint64_t v28 = *v24;
      uint64_t v117 = v24;
      v121 = v24[1];
      if (*v24 != v121) {
        break;
      }
LABEL_93:
      int v103 = (char *)v123;
      unsigned int v104 = v123[0];
      for (uint64_t i = 4; i != 400; i += 4)
      {
        unsigned int v106 = *(_DWORD *)((char *)v123 + i);
        BOOL v107 = v104 >= v106;
        if (v104 <= v106) {
          unsigned int v104 = *(_DWORD *)((char *)v123 + i);
        }
        if (!v107) {
          int v103 = (char *)v123 + i;
        }
      }
      unint64_t v108 = (unint64_t)(v103 - (char *)v123) >> 2;
      int v109 = *(_DWORD *)(v27 + 16);
      *(_DWORD *)(v27 + 16) = v109 | 1;
      *(_DWORD *)(v27 + 48) = v108;
      __int16 v110 = (char *)v122;
      unsigned int v111 = v122[0];
      for (uint64_t j = 4; j != 220; j += 4)
      {
        unsigned int v113 = *(_DWORD *)((char *)v122 + j);
        BOOL v114 = v111 >= v113;
        if (v111 <= v113) {
          unsigned int v111 = *(_DWORD *)((char *)v122 + j);
        }
        if (!v114) {
          __int16 v110 = (char *)v122 + j;
        }
      }
      *(_DWORD *)(v27 + 16) = v109 | 3;
      *(_DWORD *)(v27 + 52) = (unint64_t)(v110 - (char *)v122) >> 2;
      uint64_t v24 = v117 + 3;
      uint64_t v3 = a3;
      if (v117 + 3 == v116) {
        return;
      }
    }
    uint64_t v120 = (uint64_t *)(v27 + 24);
    while (1)
    {
      uint64_t v31 = *v28;
      if (*v28) {
        break;
      }
LABEL_26:
      if (++v28 == v121) {
        goto LABEL_93;
      }
    }
    if (*(_DWORD *)(v27 + 32))
    {
LABEL_58:
      double v65 = sub_2954EC(*(void *)(a1 + 5216), v31, (uint64_t)&v124);
      v66 = v125;
      if (v125 == v126)
      {
        int v68 = 0x7FFFFFFF;
        unint64_t v69 = 0xFFFFFFFF00000000;
        uint64_t v70 = 0xFFFFFFFFLL;
        if (!v125)
        {
LABEL_82:
          uint64_t v134 = v69 | v70;
          LODWORD(v135) = v68;
          int v94 = *(_DWORD **)(v27 + 40);
          if (v94 && (uint64_t v95 = *(int *)(v27 + 32), (int)v95 < *v94))
          {
            *(_DWORD *)(v27 + 32) = v95 + 1;
            uint64_t v96 = *(void *)&v94[2 * v95 + 2];
          }
          else
          {
            uint64_t v97 = sub_15C1918(*v120);
            uint64_t v96 = sub_188CDC8((uint64_t)v120, v97);
          }
          sub_E112BC(&v134, v96, v65);
          __int16 v98 = (int *)sub_2D5D58(*(void *)(a1 + 5216), v31 & 0xFFFFFFFFFFFFLL);
          int v99 = (unsigned __int16 *)((char *)v98 - *v98);
          if (*v99 < 0x43u)
          {
            uint64_t v100 = 0;
          }
          else
          {
            uint64_t v100 = v99[33];
            if (v100) {
              uint64_t v100 = *((unsigned __int8 *)v98 + v100);
            }
          }
          ++*((_DWORD *)v123 + v100);
          char v101 = (unsigned __int16 *)((char *)v98 - *v98);
          if (*v101 >= 0x2Fu && (uint64_t v102 = v101[23]) != 0) {
            uint64_t v30 = *((unsigned __int8 *)v98 + v102);
          }
          else {
            uint64_t v30 = 32;
          }
          ++*((_DWORD *)v122 + v30);
          goto LABEL_26;
        }
LABEL_81:
        uint64_t v126 = v66;
        operator delete(v66);
        goto LABEL_82;
      }
      if (v127)
      {
        uint64_t v128 = v124;
        uint64_t v129 = (void **)&v125;
        long long v130 = 0u;
        long long v131 = 0u;
        uint64_t v132 = 0;
        char v133 = 1;
        uint64_t v67 = &v128;
        sub_2E1D08((uint64_t)&v128);
      }
      else
      {
        unint64_t v71 = *((void *)v126 - 1);
        int v72 = sub_2964C4(v124, v71, 1);
        char v73 = &v72[*(unsigned __int16 *)&v72[-*(int *)v72 + 4]];
        uint64_t v74 = (uint64_t)&v73[4 * HIDWORD(v71) + *(unsigned int *)v73];
        unint64_t v75 = (int *)(v74 + 4 + *(unsigned int *)(v74 + 4));
        int v76 = (unsigned int *)((char *)v75 + *(unsigned __int16 *)((char *)v75 - *v75 + 6));
        LODWORD(v76) = *(unsigned int *)((char *)v76 + *v76) - 1;
        uint64_t v134 = v124;
        uint64_t v135 = (void **)&v125;
        long long v136 = 0u;
        v137[0] = 0u;
        LODWORD(v137[1]) = ((unint64_t)(v126 - v125) >> 3) - 1;
        DWORD1(v137[1]) = v76;
        BYTE8(v137[1]) = 0;
        uint64_t v67 = &v134;
        sub_2E1D08((uint64_t)&v134);
      }
      uint64_t v77 = v67[3] + 4 * *((unsigned int *)v67 + 13);
      int v78 = *(unsigned __int16 *)(v77 + 4);
      int v79 = *(unsigned __int16 *)(v77 + 6);
      unsigned int v80 = sub_511FC(*((_DWORD *)v67 + 10));
      unsigned int v81 = v67[5] & ~(-1 << (v80 & 0xFE));
      int v82 = sub_51938(v81);
      int v83 = sub_51938(v81 >> 1);
      int v84 = (int *)v67[2];
      int v85 = *((_DWORD *)v67 + 11);
      uint64_t v86 = *((unsigned int *)v67 + 13);
      int v87 = (unsigned __int16 *)((char *)v84 - *v84);
      unsigned int v88 = *v87;
      if (v88 < 0xD)
      {
        a1 = v119;
        if (v88 < 0xB) {
          goto LABEL_72;
        }
      }
      else
      {
        a1 = v119;
        if (v87[6])
        {
          int v68 = *(int *)((char *)&v84[v86 + 1] + v87[6] + *(unsigned int *)((char *)v84 + v87[6]));
          goto LABEL_75;
        }
      }
      if (v87[5])
      {
        int v89 = *(unsigned __int16 *)((char *)v84 + 2 * v86 + v87[5] + *(unsigned int *)((char *)v84 + v87[5]) + 4);
        if (v89 != 0xFFFF)
        {
          uint64_t v90 = v87[4];
          if (v90) {
            int v91 = *(int *)((char *)v84 + v90);
          }
          else {
            int v91 = 0;
          }
          int v68 = v85 + v89 + v91;
LABEL_75:
          int v92 = 1 << -(v80 >> 1);
          if (v80 < 2) {
            int v92 = -2;
          }
          LODWORD(v93) = v83 * v92 + 4 * v79;
          if (v93 >= 0xFFFFFFFE) {
            uint64_t v93 = 4294967294;
          }
          else {
            uint64_t v93 = v93;
          }
          unint64_t v69 = v93 << 32;
          uint64_t v70 = (v82 * v92 + 4 * v78);
          v66 = v125;
          if (!v125) {
            goto LABEL_82;
          }
          goto LABEL_81;
        }
      }
LABEL_72:
      int v68 = 0x7FFFFFFF;
      goto LABEL_75;
    }
    double v32 = sub_2954EC(*(void *)(a1 + 5216), *v28, (uint64_t)&v124);
    int v33 = v125;
    if (v125 == v126)
    {
      int v41 = 0x7FFFFFFF;
      unint64_t v42 = 0xFFFFFFFF00000000;
      uint64_t v43 = 0xFFFFFFFFLL;
      if (!v125)
      {
LABEL_53:
        uint64_t v134 = v42 | v43;
        LODWORD(v135) = v41;
        unsigned int v61 = *(_DWORD **)(v27 + 40);
        if (v61 && (uint64_t v62 = *(int *)(v27 + 32), (int)v62 < *v61))
        {
          *(_DWORD *)(v27 + 32) = v62 + 1;
          uint64_t v63 = *(void *)&v61[2 * v62 + 2];
        }
        else
        {
          uint64_t v64 = sub_15C1918(*v120);
          uint64_t v63 = sub_188CDC8((uint64_t)v120, v64);
        }
        sub_E112BC(&v134, v63, v32);
        goto LABEL_58;
      }
LABEL_52:
      uint64_t v126 = v33;
      operator delete(v33);
      goto LABEL_53;
    }
    if (v127)
    {
      unint64_t v34 = *((void *)v126 - 1);
      long long v35 = sub_2964C4(v124, v34, 1);
      unint64_t v36 = &v35[*(unsigned __int16 *)&v35[-*(int *)v35 + 4]];
      uint64_t v37 = (uint64_t)&v36[4 * HIDWORD(v34) + *(unsigned int *)v36];
      uint64_t v38 = (int *)(v37 + 4 + *(unsigned int *)(v37 + 4));
      int v39 = (unsigned int *)((char *)v38 + *(unsigned __int16 *)((char *)v38 - *v38 + 6));
      LODWORD(v39) = *(unsigned int *)((char *)v39 + *v39) - 1;
      uint64_t v128 = v124;
      uint64_t v129 = (void **)&v125;
      long long v130 = 0u;
      long long v131 = 0u;
      LODWORD(v132) = ((unint64_t)(v126 - v125) >> 3) - 1;
      HIDWORD(v132) = v39;
      char v133 = 1;
      uint64_t v40 = &v128;
      sub_2E1D08((uint64_t)&v128);
    }
    else
    {
      uint64_t v134 = v124;
      uint64_t v135 = (void **)&v125;
      long long v136 = 0u;
      memset(v137, 0, 25);
      uint64_t v40 = &v134;
      sub_2E1D08((uint64_t)&v134);
    }
    uint64_t v44 = v40[3] + 4 * *((unsigned int *)v40 + 13);
    int v45 = *(unsigned __int16 *)(v44 + 4);
    int v46 = *(unsigned __int16 *)(v44 + 6);
    unsigned int v47 = sub_511FC(*((_DWORD *)v40 + 10));
    unsigned int v48 = v40[5] & ~(-1 << (v47 & 0xFE));
    int v49 = sub_51938(v48);
    int v50 = sub_51938(v48 >> 1);
    uint64_t v51 = (int *)v40[2];
    int v52 = *((_DWORD *)v40 + 11);
    uint64_t v53 = *((unsigned int *)v40 + 13);
    BOOL v54 = (unsigned __int16 *)((char *)v51 - *v51);
    unsigned int v55 = *v54;
    if (v55 < 0xD)
    {
      a1 = v119;
      if (v55 < 0xB) {
        goto LABEL_43;
      }
    }
    else
    {
      a1 = v119;
      if (v54[6])
      {
        int v41 = *(int *)((char *)&v51[v53 + 1] + v54[6] + *(unsigned int *)((char *)v51 + v54[6]));
        goto LABEL_46;
      }
    }
    if (v54[5])
    {
      int v56 = *(unsigned __int16 *)((char *)v51 + 2 * v53 + v54[5] + *(unsigned int *)((char *)v51 + v54[5]) + 4);
      if (v56 != 0xFFFF)
      {
        uint64_t v57 = v54[4];
        if (v57) {
          int v58 = *(int *)((char *)v51 + v57);
        }
        else {
          int v58 = 0;
        }
        int v41 = v52 + v56 + v58;
LABEL_46:
        int v59 = 1 << -(v47 >> 1);
        if (v47 < 2) {
          int v59 = -2;
        }
        LODWORD(v60) = v50 * v59 + 4 * v46;
        if (v60 >= 0xFFFFFFFE) {
          uint64_t v60 = 4294967294;
        }
        else {
          uint64_t v60 = v60;
        }
        unint64_t v42 = v60 << 32;
        uint64_t v43 = (v49 * v59 + 4 * v45);
        int v33 = v125;
        if (!v125) {
          goto LABEL_53;
        }
        goto LABEL_52;
      }
    }
LABEL_43:
    int v41 = 0x7FFFFFFF;
    goto LABEL_46;
  }
  uint64_t v7 = a2[40];
  char v8 = a2[41];
  if (v7 != v8)
  {
    uint64_t v9 = (uint64_t *)(v3 + 40);
    do
    {
      unint64_t v13 = *(_DWORD **)(v3 + 56);
      if (v13 && (uint64_t v14 = *(int *)(v3 + 48), (int)v14 < *v13))
      {
        *(_DWORD *)(v3 + 48) = v14 + 1;
        uint64_t v15 = *(void *)&v13[2 * v14 + 2];
        uint64_t v16 = v7[3];
        for (k = v7[4]; v16 != k; uint64_t v16 = (uint64_t *)((char *)v16 + 12))
        {
LABEL_12:
          while (1)
          {
            char v22 = *(_DWORD **)(v15 + 40);
            if (v22)
            {
              uint64_t v23 = *(int *)(v15 + 32);
              if ((int)v23 < *v22) {
                break;
              }
            }
            uint64_t v19 = sub_15C1918(*(void *)(v15 + 24));
            uint64_t v20 = sub_188CDC8(v15 + 24, v19);
            double v6 = sub_E112BC(v16, v20, v21);
            uint64_t v16 = (uint64_t *)((char *)v16 + 12);
            if (v16 == k) {
              goto LABEL_4;
            }
          }
          *(_DWORD *)(v15 + 32) = v23 + 1;
          double v6 = sub_E112BC(v16, *(void *)&v22[2 * v23 + 2], v6);
        }
      }
      else
      {
        uint64_t v18 = sub_11BE320(*v9);
        uint64_t v15 = sub_188CDC8((uint64_t)v9, (uint64_t)v18);
        uint64_t v16 = v7[3];
        k = v7[4];
        if (v16 != k) {
          goto LABEL_12;
        }
      }
LABEL_4:
      int v10 = *((_DWORD *)v7 + 12);
      int v11 = *(_DWORD *)(v15 + 16);
      *(_DWORD *)(v15 + 16) = v11 | 1;
      *(_DWORD *)(v15 + 48) = v10;
      int v12 = *((_DWORD *)v7 + 13);
      *(_DWORD *)(v15 + 16) = v11 | 3;
      *(_DWORD *)(v15 + 52) = v12;
      v7 += 7;
      uint64_t v3 = a3;
    }
    while (v7 != v8);
  }
}

void sub_3A5C94(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 248);
  if (v3)
  {
    *(void *)(v1 - 240) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_3A5CB4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1 + 8;
  if (!*(unsigned char *)(a1 + 32))
  {
    uint64_t v5 = *(void *)(a1 + 16);
    if (*(void *)(a1 + 8) != v5)
    {
      unint64_t v6 = *(void *)(v5 - 8);
      uint64_t v7 = sub_2964C4(*(void *)a1, v6, 1);
      char v8 = &v7[*(unsigned __int16 *)&v7[-*(int *)v7 + 4]];
      uint64_t v9 = (uint64_t)&v8[4 * HIDWORD(v6) + *(unsigned int *)v8];
      int v10 = (int *)(v9 + 4 + *(unsigned int *)(v9 + 4));
      int v11 = ((*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3) - 1;
      int v12 = (unsigned int *)((char *)v10 + *(unsigned __int16 *)((char *)v10 - *v10 + 6));
      LODWORD(v12) = *(unsigned int *)((char *)v12 + *v12) - 1;
      *(void *)a2 = *(void *)a1;
      *(void *)(a2 + 8) = v4;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_DWORD *)(a2 + 48) = v11;
      *(_DWORD *)(a2 + 52) = v12;
      *(unsigned char *)(a2 + 56) = 1;
      goto LABEL_6;
    }
LABEL_9:
    double result = 0.0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  if (*(void *)(a1 + 8) == *(void *)(a1 + 16)) {
    goto LABEL_9;
  }
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v4;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 41) = 0u;
LABEL_6:

  sub_2E1D08(a2);
  return result;
}

unint64_t sub_3A5DDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2E5E08(a1 + 16, a2, 1);
  if (!v4) {
    return a2 & 0xFFFFFFFFFFFFLL | ((unint64_t)((a2 & 0xFF000000000000) == 0) << 62) | 0x8000000000000000;
  }
  uint64_t v5 = &v4[-*(int *)v4];
  if (*(unsigned __int16 *)v5 < 0xBu) {
    return a2 & 0xFFFFFFFFFFFFLL | ((unint64_t)((a2 & 0xFF000000000000) == 0) << 62) | 0x8000000000000000;
  }
  if (!*((_WORD *)v5 + 5)) {
    return a2 & 0xFFFFFFFFFFFFLL | ((unint64_t)((a2 & 0xFF000000000000) == 0) << 62) | 0x8000000000000000;
  }
  unint64_t v6 = &v4[*((unsigned __int16 *)v5 + 5) + *(unsigned int *)&v4[*((unsigned __int16 *)v5 + 5)]];
  if (*(_DWORD *)v6 <= WORD2(a2)) {
    return a2 & 0xFFFFFFFFFFFFLL | ((unint64_t)((a2 & 0xFF000000000000) == 0) << 62) | 0x8000000000000000;
  }
  uint64_t v7 = &v6[8 * WORD2(a2)];
  int v9 = *((_DWORD *)v7 + 1);
  uint64_t v8 = (uint64_t)(v7 + 4);
  if (!v9) {
    return a2 & 0xFFFFFFFFFFFFLL | ((unint64_t)((a2 & 0xFF000000000000) == 0) << 62) | 0x8000000000000000;
  }

  return sub_2FC9E0(a1, a2, v8);
}

void sub_3A5E94(long long *a1@<X0>, uint64_t a2@<X8>)
{
  sub_39ECCC((uint64_t)&v9, a1);
  sub_39ECCC((uint64_t)&v4, (long long *)((char *)a1 + 72));
  sub_3ABA28(&v9, &v4, a2);
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  if (v5)
  {
    unint64_t v6 = v5;
    operator delete(v5);
  }
  if (v12)
  {
    unint64_t v13 = v12;
    operator delete(v12);
  }
  if (v10)
  {
    int v11 = v10;
    operator delete(v10);
  }
}

void sub_3A5F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

BOOL *sub_3A5F4C(BOOL *a1, void *a2)
{
  HIBYTE(v12) = 7;
  strcpy((char *)&__p, "enabled");
  BOOL v4 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p);
  }
  *a1 = v4;
  __p = operator new(0x28uLL);
  long long v12 = xmmword_20B9960;
  strcpy((char *)__p, "metrics_relevance_cross_check_overrides");
  uint64_t v5 = (uint64_t *)sub_5C4AC(a2, (uint64_t)&__p);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  if (SHIBYTE(v12) < 0) {
    operator delete(__p);
  }
  a1[1] = v6 != v7;
  __p = operator new(0x28uLL);
  long long v12 = xmmword_20B93A0;
  strcpy((char *)__p, "only_hard_closures_metrics_relevant");
  BOOL v8 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p);
  }
  a1[2] = v8;
  __p = operator new(0x28uLL);
  long long v12 = xmmword_20B9240;
  strcpy((char *)__p, "check_geometry_patch_metrics_relevant");
  BOOL v9 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p);
  }
  a1[3] = v9;
  return a1;
}

void sub_3A60E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_3A6108(void ***a1)
{
  uint64_t v1 = *a1;
  v2 = (char *)**a1;
  if (!v2) {
    return;
  }
  BOOL v4 = (char *)v1[1];
  uint64_t v5 = **a1;
  if (v4 == v2) {
    goto LABEL_14;
  }
  do
  {
    uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 5);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      uint64_t v7 = (std::__shared_weak_count *)*((void *)v4 - 7);
      if (!v7) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v7 = (std::__shared_weak_count *)*((void *)v4 - 7);
      if (!v7) {
        goto LABEL_4;
      }
    }
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
LABEL_4:
    v4 -= 64;
  }
  while (v4 != v2);
  uint64_t v5 = **a1;
LABEL_14:
  v1[1] = v2;

  operator delete(v5);
}

void *sub_3A6230(void *a1)
{
  v2 = (void **)a1[644];
  if (v2)
  {
    do
    {
      BOOL v8 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      v2 = v8;
    }
    while (v8);
  }
  uint64_t v3 = (void *)a1[642];
  a1[642] = 0;
  if (v3) {
    operator delete(v3);
  }
  BOOL v4 = (void *)a1[639];
  if (v4)
  {
    a1[640] = v4;
    operator delete(v4);
  }
  uint64_t v5 = a1[636];
  if (v5)
  {
    uint64_t v6 = a1[637];
    uint64_t v7 = (void *)a1[636];
    if (v6 != v5)
    {
      do
      {
        BOOL v9 = *(void **)(v6 - 8);
        if (v9) {
          free(v9);
        }
        v6 -= 80;
      }
      while (v6 != v5);
      uint64_t v7 = (void *)a1[636];
    }
    a1[637] = v5;
    operator delete(v7);
  }
  int v10 = (void *)a1[631];
  if (v10)
  {
    a1[632] = v10;
    operator delete(v10);
  }
  sub_3A6318(a1 + 115);
  int v11 = (void *)a1[43];
  if (v11)
  {
    a1[44] = v11;
    operator delete(v11);
  }
  return a1;
}

void *sub_3A6318(void *a1)
{
  v2 = (void *)a1[513];
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  BOOL v4 = (void *)a1[511];
  a1[511] = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = (void **)(a1 + 508);
  uint64_t v6 = a1[508];
  if (v6)
  {
    uint64_t v7 = a1[509];
    BOOL v8 = (void *)a1[508];
    if (v7 != v6)
    {
      do
      {
        BOOL v9 = *(void **)(v7 - 24);
        if (v9)
        {
          *(void *)(v7 - 16) = v9;
          operator delete(v9);
        }
        v7 -= 32;
      }
      while (v7 != v6);
      BOOL v8 = *v5;
    }
    a1[509] = v6;
    operator delete(v8);
  }
  do
  {
    int v10 = v5 - 6;
    uint64_t v11 = (uint64_t)*(v5 - 3);
    if (v11)
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = v5 - 5;
      do
      {
        if ((*((char *)*v10 + v13) & 0x80000000) == 0)
        {
          uint64_t v15 = (char *)*v14 + v12;
          uint64_t v16 = (void *)*((void *)v15 + 1);
          if (v16)
          {
            *((void *)v15 + 2) = v16;
            operator delete(v16);
            uint64_t v11 = (uint64_t)*(v5 - 3);
          }
        }
        ++v13;
        v12 += 32;
      }
      while (v13 != v11);
      operator delete(*(v5 - 6));
      *(v5 - 6) = &unk_20E1710;
      *(v5 - 1) = 0;
      *(v5 - 4) = 0;
      *(v5 - 3) = 0;
      uint64_t *v14 = 0;
    }
    v5 -= 6;
  }
  while (v10 != a1 + 412);
  sub_3A6464((uint64_t)(a1 + 316));
  sub_3A650C(a1 + 2);
  return a1;
}

uint64_t sub_3A6464(uint64_t a1)
{
  return a1;
}

void *sub_3A650C(void *a1)
{
  uint64_t v2 = a1[310];
  if (v2)
  {
    uint64_t v3 = a1[311];
    BOOL v4 = (void *)a1[310];
    if (v3 != v2)
    {
      uint64_t v5 = a1[311];
      do
      {
        uint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      BOOL v4 = (void *)a1[310];
    }
    a1[311] = v2;
    operator delete(v4);
  }
  uint64_t v8 = a1[307];
  if (v8)
  {
    uint64_t v9 = a1[308];
    int v10 = (void *)a1[307];
    if (v9 != v8)
    {
      do
      {
        uint64_t v11 = *(void **)(v9 - 24);
        if (v11)
        {
          *(void *)(v9 - 16) = v11;
          operator delete(v11);
        }
        v9 -= 32;
      }
      while (v9 != v8);
      int v10 = (void *)a1[307];
    }
    a1[308] = v8;
    operator delete(v10);
  }
  uint64_t v12 = a1 + 211;
  sub_3A6464((uint64_t)(a1 + 211));
  uint64_t v13 = a1 + 115;
  do
  {
    uint64_t v14 = v12 - 6;
    uint64_t v15 = *(v12 - 3);
    if (v15)
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = v12 - 5;
      do
      {
        if ((*(char *)(*v14 + v17) & 0x80000000) == 0)
        {
          uint64_t v19 = *v18 + v16;
          uint64_t v20 = *(void **)(v19 + 8);
          if (v20)
          {
            *(void *)(v19 + 16) = v20;
            operator delete(v20);
            uint64_t v15 = *(v12 - 3);
          }
        }
        ++v17;
        v16 += 32;
      }
      while (v17 != v15);
      operator delete((void *)*(v12 - 6));
      *(v12 - 6) = &unk_20E1710;
      *(v12 - 1) = 0;
      *(v12 - 4) = 0;
      *(v12 - 3) = 0;
      void *v18 = 0;
    }
    v12 -= 6;
  }
  while (v14 != v13);
  do
  {
    double v21 = v13 - 6;
    uint64_t v22 = *(v13 - 3);
    if (v22)
    {
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      uint64_t v25 = v13 - 5;
      do
      {
        if ((*(char *)(*v21 + v24) & 0x80000000) == 0)
        {
          uint64_t v26 = *v25 + v23;
          uint64_t v27 = *(void **)(v26 + 8);
          if (v27)
          {
            *(void *)(v26 + 16) = v27;
            operator delete(v27);
            uint64_t v22 = *(v13 - 3);
          }
        }
        ++v24;
        v23 += 32;
      }
      while (v24 != v22);
      operator delete((void *)*(v13 - 6));
      *(v13 - 6) = &unk_20E1710;
      *(v13 - 1) = 0;
      *(v13 - 4) = 0;
      *(v13 - 3) = 0;
      *uint64_t v25 = 0;
    }
    v13 -= 6;
  }
  while (v21 != a1 + 19);
  uint64_t v28 = (void *)a1[16];
  if (v28)
  {
    a1[17] = v28;
    operator delete(v28);
  }
  int64_t v29 = (void *)a1[12];
  if (v29)
  {
    a1[13] = v29;
    operator delete(v29);
  }
  uint64_t v30 = (void *)a1[6];
  if (v30)
  {
    a1[7] = v30;
    operator delete(v30);
  }
  uint64_t v31 = (void *)a1[2];
  if (v31)
  {
    a1[3] = v31;
    operator delete(v31);
  }
  return a1;
}

char *sub_3A6738(int64x2_t *a1)
{
  uint64_t v3 = a1->i64[0];
  unint64_t v2 = a1->u64[1];
  uint64_t v4 = (uint64_t)(v2 - a1->i64[0]) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v6 = (char *)a1[1].i64[0];
  if ((uint64_t)&v6[-v3] >> 4 > v5) {
    unint64_t v5 = (uint64_t)&v6[-v3] >> 4;
  }
  if ((unint64_t)&v6[-v3] >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v5;
  }
  uint64_t v20 = a1 + 1;
  if (v7)
  {
    if (v7 >> 59) {
      sub_188D718();
    }
    uint64_t v8 = (char *)operator new(32 * v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = &v8[32 * v4];
  *(_DWORD *)uint64_t v9 = -1;
  *((void *)v9 + 2) = 0;
  *((void *)v9 + 3) = 0;
  int v10 = &v8[32 * v7];
  *((void *)v9 + 1) = 0;
  uint64_t v11 = v9 + 32;
  v18.i64[1] = (uint64_t)(v9 + 32);
  uint64_t v19 = v10;
  if (v2 == v3)
  {
    int64x2_t v15 = vdupq_n_s64(v2);
  }
  else
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = &v9[v12];
      uint64_t v14 = v2 + v12;
      *((_DWORD *)v13 - 8) = *(_DWORD *)(v2 + v12 - 32);
      *((void *)v13 - 2) = 0;
      *((void *)v13 - 1) = 0;
      *(_OWORD *)(v13 - 24) = *(_OWORD *)(v2 + v12 - 24);
      *((void *)v13 - 1) = *(void *)(v2 + v12 - 8);
      *(void *)(v14 - 24) = 0;
      *(void *)(v14 - 16) = 0;
      *(void *)(v14 - 8) = 0;
      v12 -= 32;
    }
    while (v2 + v12 != v3);
    int64x2_t v15 = *a1;
    uint64_t v6 = (char *)a1[1].i64[0];
    v9 += v12;
    uint64_t v11 = (char *)v18.i64[1];
    int v10 = v19;
  }
  a1->i64[0] = (uint64_t)v9;
  a1->i64[1] = (uint64_t)v11;
  int64x2_t v18 = v15;
  a1[1].i64[0] = (uint64_t)v10;
  uint64_t v19 = v6;
  __p = (void *)v15.i64[0];
  sub_3A6974((uint64_t)&__p, v15.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

void sub_3A688C(uint64_t a1, char **a2)
{
  if ((*((char *)a2 + 71) & 0x80000000) == 0)
  {
    uint64_t v3 = a2[3];
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(a2[6]);
  uint64_t v3 = a2[3];
  if (v3)
  {
LABEL_3:
    a2[4] = v3;
    operator delete(v3);
  }
LABEL_4:
  uint64_t v4 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[1];
    uint64_t v6 = *a2;
    if (v5 == v4)
    {
      a2[1] = v4;
    }
    else
    {
      do
      {
        unint64_t v7 = (void *)*((void *)v5 - 6);
        if (v7)
        {
          *((void *)v5 - 5) = v7;
          operator delete(v7);
        }
        if (*(v5 - 57) < 0) {
          operator delete(*((void **)v5 - 10));
        }
        v5 -= 80;
      }
      while (v5 != v4);
      uint64_t v6 = *a2;
      a2[1] = v4;
    }
    operator delete(v6);
  }
}

void sub_3A6974(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == a2) {
    return;
  }
LABEL_4:
  while (2)
  {
    while (1)
    {
      uint64_t v5 = v2 - 32;
      *(void *)(a1 + 16) = v2 - 32;
      uint64_t v6 = *(void ***)(v2 - 24);
      if (v6) {
        break;
      }
      v2 -= 32;
      if (v5 == a2) {
        return;
      }
    }
    unint64_t v7 = *(void ***)(v2 - 16);
    uint64_t v8 = *(void **)(v2 - 24);
    if (v7 != v6)
    {
      while ((*((char *)v7 - 1) & 0x80000000) == 0)
      {
        int v10 = *(v7 - 6);
        if (v10) {
          goto LABEL_13;
        }
LABEL_14:
        uint64_t v11 = v7 - 9;
        uint64_t v12 = (char *)*(v7 - 9);
        if (v12)
        {
          uint64_t v13 = (char *)*(v7 - 8);
          uint64_t v9 = *(v7 - 9);
          if (v13 != v12)
          {
            do
            {
              uint64_t v14 = (void *)*((void *)v13 - 6);
              if (v14)
              {
                *((void *)v13 - 5) = v14;
                operator delete(v14);
              }
              if (*(v13 - 57) < 0) {
                operator delete(*((void **)v13 - 10));
              }
              v13 -= 80;
            }
            while (v13 != v12);
            uint64_t v9 = *v11;
          }
          *(v7 - 8) = v12;
          operator delete(v9);
        }
        v7 -= 9;
        if (v11 == v6)
        {
          int64x2_t v15 = *(void **)(v2 - 24);
          *(void *)(v2 - 16) = v6;
          operator delete(v15);
          uint64_t v2 = *(void *)(a1 + 16);
          if (v2 == a2) {
            return;
          }
          goto LABEL_4;
        }
      }
      operator delete(*(v7 - 3));
      int v10 = *(v7 - 6);
      if (!v10) {
        goto LABEL_14;
      }
LABEL_13:
      *(v7 - 5) = v10;
      operator delete(v10);
      goto LABEL_14;
    }
    *(void *)(v2 - 16) = v6;
    operator delete(v8);
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2 != a2) {
      continue;
    }
    break;
  }
}

void sub_3A6AB0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 == v2)
    {
      v1[1] = v2;
    }
    else
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 3);
        if (v6)
        {
          *((void *)v4 - 2) = v6;
          operator delete(v6);
        }
        unint64_t v7 = (void *)*((void *)v4 - 6);
        if (v7)
        {
          *((void *)v4 - 5) = v7;
          operator delete(v7);
        }
        uint64_t v8 = (void *)*((void *)v4 - 12);
        if (v8)
        {
          *((void *)v4 - 11) = v8;
          operator delete(v8);
        }
        uint64_t v9 = (void *)*((void *)v4 - 15);
        if (v9)
        {
          *((void *)v4 - 14) = v9;
          operator delete(v9);
        }
        v4 -= 160;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
      v1[1] = v2;
    }
    operator delete(v5);
  }
}

uint64_t sub_3A6B94(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1112))
  {
    sub_3A6CB8(a1 + 680);
    *(unsigned char *)(a1 + 1112) = 0;
  }
  *(void *)(a1 + 640) = off_2438EC8;
  if (*(char *)(a1 + 671) < 0) {
    operator delete(*(void **)(a1 + 648));
  }
  if (*(unsigned char *)(a1 + 632)) {
    *(unsigned char *)(a1 + 632) = 0;
  }
  if (*(char *)(a1 + 615) < 0)
  {
    operator delete(*(void **)(a1 + 592));
    if ((*(char *)(a1 + 583) & 0x80000000) == 0)
    {
LABEL_9:
      if ((*(char *)(a1 + 559) & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_20;
    }
  }
  else if ((*(char *)(a1 + 583) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*(void **)(a1 + 560));
  if ((*(char *)(a1 + 559) & 0x80000000) == 0)
  {
LABEL_10:
    if ((*(char *)(a1 + 519) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(*(void **)(a1 + 536));
  if ((*(char *)(a1 + 519) & 0x80000000) == 0)
  {
LABEL_11:
    if ((*(char *)(a1 + 487) & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(*(void **)(a1 + 496));
  if ((*(char *)(a1 + 487) & 0x80000000) == 0)
  {
LABEL_12:
    if ((*(char *)(a1 + 463) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(*(void **)(a1 + 464));
  if ((*(char *)(a1 + 463) & 0x80000000) == 0)
  {
LABEL_13:
    if (!*(unsigned char *)(a1 + 432)) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_23:
  operator delete(*(void **)(a1 + 440));
  if (*(unsigned char *)(a1 + 432)) {
LABEL_14:
  }
    *(unsigned char *)(a1 + 432) = 0;
LABEL_15:

  return sub_29D95C(a1);
}

uint64_t sub_3A6CB8(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 408);
  sub_3A6DE0(&v3);
  if (*(char *)(a1 + 399) < 0)
  {
    operator delete(*(void **)(a1 + 376));
    if ((*(char *)(a1 + 375) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 351) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*(char *)(a1 + 375) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 352));
  if ((*(char *)(a1 + 351) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 319) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(*(void **)(a1 + 328));
  if ((*(char *)(a1 + 319) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(a1 + 295) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(*(void **)(a1 + 296));
  if ((*(char *)(a1 + 295) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 271) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(a1 + 272));
  if ((*(char *)(a1 + 271) & 0x80000000) == 0)
  {
LABEL_7:
    if ((*(char *)(a1 + 239) & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(a1 + 248));
  if ((*(char *)(a1 + 239) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(a1 + 215) & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_18:
    operator delete(*(void **)(a1 + 192));
    if ((*(char *)(a1 + 191) & 0x80000000) == 0) {
      return sub_303198(a1);
    }
    goto LABEL_19;
  }
LABEL_17:
  operator delete(*(void **)(a1 + 216));
  if (*(char *)(a1 + 215) < 0) {
    goto LABEL_18;
  }
LABEL_9:
  if ((*(char *)(a1 + 191) & 0x80000000) == 0) {
    return sub_303198(a1);
  }
LABEL_19:
  operator delete(*(void **)(a1 + 168));
  return sub_303198(a1);
}

void sub_3A6DE0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (!v2) {
    return;
  }
  uint64_t v4 = (uint64_t)v1[1];
  uint64_t v5 = **a1;
  if ((void *)v4 == v2)
  {
    v1[1] = v2;
    goto LABEL_5;
  }
  do
  {
    if (*(char *)(v4 - 1) < 0)
    {
      operator delete(*(void **)(v4 - 24));
      if (*(char *)(v4 - 25) < 0)
      {
LABEL_12:
        operator delete(*(void **)(v4 - 48));
        if ((*(char *)(v4 - 49) & 0x80000000) == 0) {
          goto LABEL_6;
        }
        goto LABEL_13;
      }
    }
    else if (*(char *)(v4 - 25) < 0)
    {
      goto LABEL_12;
    }
    if ((*(char *)(v4 - 49) & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_13:
    operator delete(*(void **)(v4 - 72));
LABEL_6:
    v4 -= 256;
    sub_30328C(v4);
  }
  while ((void *)v4 != v2);
  uint64_t v5 = **a1;
  v1[1] = v2;

LABEL_5:
  operator delete(v5);
}

uint64_t sub_3A6ED4()
{
  return 0;
}

void sub_3A6EDC(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t *sub_3A6EF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_B128((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          uint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            uint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  uint64_t v25 = (char *)operator new(0x30uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *(void *)uint64_t v25 = 0;
  *((void *)v25 + 1) = v10;
  uint64_t v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v26, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v26 = *(_OWORD *)a3;
    *((void *)v25 + 4) = *(void *)(a3 + 16);
  }
  *((_DWORD *)v25 + 10) = *(_DWORD *)(a3 + 24);
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        int64_t v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        uint64_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        int64_t v29 = *(void **)(*(void *)a1 + 8 * v10);
        uint64_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      int64_t v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      uint64_t v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *uint64_t v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  int64_t v29 = *(void **)(*(void *)a1 + 8 * v3);
  uint64_t v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  *uint64_t v30 = *v29;
  *int64_t v29 = v42[0];
LABEL_92:
  uint64_t v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_3A7338(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_3A734C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_3A7364(char **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (a2 <= (a1[2] - *a1) >> 6) {
    return;
  }
  if (a2 >> 58) {
    sub_2E00();
  }
  uint64_t v4 = a1[1];
  unint64_t v5 = a2 << 6;
  uint64_t v6 = (char *)operator new(a2 << 6);
  unint64_t v7 = &v6[v5];
  unint64_t v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_18;
  }
  unint64_t v9 = &v6[v4 - v2];
  do
  {
    long long v10 = *((_OWORD *)v4 - 4);
    v4 -= 64;
    *((_OWORD *)v9 - 4) = v10;
    v9 -= 64;
    *(void *)uint64_t v4 = 0;
    *((void *)v4 + 1) = 0;
    *((_OWORD *)v9 + 1) = *((_OWORD *)v4 + 1);
    *((void *)v4 + 2) = 0;
    *((void *)v4 + 3) = 0;
    long long v11 = *((_OWORD *)v4 + 2);
    *(_OWORD *)(v9 + 45) = *(_OWORD *)(v4 + 45);
    *((_OWORD *)v9 + 2) = v11;
  }
  while (v4 != v2);
  uint8x8_t v12 = *a1;
  uint64_t v2 = a1[1];
  *a1 = v9;
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v12)
  {
    while (1)
    {
      uint64_t v13 = (std::__shared_weak_count *)*((void *)v2 - 5);
      if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
        uint64_t v14 = (std::__shared_weak_count *)*((void *)v2 - 7);
        if (v14)
        {
LABEL_12:
          if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
      }
      else
      {
        uint64_t v14 = (std::__shared_weak_count *)*((void *)v2 - 7);
        if (v14) {
          goto LABEL_12;
        }
      }
      v2 -= 64;
      if (v2 == v12)
      {
        uint64_t v2 = v12;
        break;
      }
    }
  }
  if (v2)
  {
LABEL_18:
    operator delete(v2);
  }
}

uint64_t sub_3A74FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 64;
    uint64_t v4 = *(std::__shared_weak_count **)(i - 40);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      unint64_t v5 = *(std::__shared_weak_count **)(i - 56);
      if (v5)
      {
LABEL_7:
        if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    else
    {
      unint64_t v5 = *(std::__shared_weak_count **)(i - 56);
      if (v5) {
        goto LABEL_7;
      }
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_3A75FC(void *a1, char *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  unint64_t v7 = (char *)*a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = (uint64_t)&a2[-*a1] >> 6;
  unint64_t v9 = a1[2];
  if (v6 < v9)
  {
    if (a2 == (char *)v6)
    {
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      uint64_t v23 = &v7[64 * v8];
      *((_OWORD *)v23 + 1) = *(_OWORD *)(a3 + 16);
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      long long v24 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(v23 + 45) = *(_OWORD *)(a3 + 45);
      *((_OWORD *)v23 + 2) = v24;
      a1[1] = a2 + 64;
    }
    else
    {
      long long v10 = (_OWORD *)a1[1];
      if (v6 >= 0x40)
      {
        unint64_t v11 = v6 - 64;
        long long v10 = (_OWORD *)a1[1];
        do
        {
          _OWORD *v10 = *(_OWORD *)v11;
          *(void *)unint64_t v11 = 0;
          *(void *)(v11 + 8) = 0;
          v10[1] = *(_OWORD *)(v11 + 16);
          *(void *)(v11 + 16) = 0;
          *(void *)(v11 + 24) = 0;
          long long v12 = *(_OWORD *)(v11 + 32);
          *(_OWORD *)((char *)v10 + 45) = *(_OWORD *)(v11 + 45);
          v10[2] = v12;
          v10 += 4;
          v11 += 64;
        }
        while (v11 < v6);
      }
      a1[1] = v10;
      sub_3A7BF4(a2, (void *)(v6 - 64), v6);
      long long v13 = *(_OWORD *)a3;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      uint64_t v14 = (std::__shared_weak_count *)*((void *)v4 + 1);
      *(_OWORD *)uint64_t v4 = v13;
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      char v15 = &v7[64 * v8];
      long long v16 = *(_OWORD *)(a3 + 16);
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      unint64_t v17 = (std::__shared_weak_count *)*((void *)v15 + 3);
      *((_OWORD *)v15 + 1) = v16;
      if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      long long v18 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(v15 + 45) = *(_OWORD *)(a3 + 45);
      *((_OWORD *)v15 + 2) = v18;
    }
    return v4;
  }
  unint64_t v19 = ((uint64_t)(v6 - (void)v7) >> 6) + 1;
  if (v19 >> 58) {
    sub_2E00();
  }
  uint64_t v20 = v9 - (void)v7;
  if (v20 >> 5 > v19) {
    unint64_t v19 = v20 >> 5;
  }
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v21 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v21 = v19;
  }
  char v43 = a1 + 2;
  if (v21)
  {
    if (v21 >> 58) {
      sub_188D718();
    }
    uint64_t v22 = (char *)operator new(v21 << 6);
  }
  else
  {
    uint64_t v22 = 0;
  }
  unint64_t v39 = v22;
  unint64_t v40 = &v22[64 * v8];
  int v41 = v40;
  unint64_t v42 = &v22[64 * v21];
  sub_3A79D4((uint64_t)&v39, a3);
  uint64_t v25 = v40;
  uint64_t v26 = (char *)*a1;
  float v27 = v40;
  if ((char *)*a1 != v4)
  {
    float v27 = v40;
    float v28 = v4;
    do
    {
      long long v29 = *((_OWORD *)v28 - 4);
      v28 -= 64;
      *(v27 - 4) = v29;
      v27 -= 4;
      *(void *)float v28 = 0;
      *((void *)v28 + 1) = 0;
      v27[1] = *((_OWORD *)v28 + 1);
      *((void *)v28 + 2) = 0;
      *((void *)v28 + 3) = 0;
      long long v30 = *((_OWORD *)v28 + 2);
      *(_OWORD *)((char *)v27 + 45) = *(_OWORD *)(v28 + 45);
      v27[2] = v30;
    }
    while (v28 != v26);
  }
  unint64_t v40 = (char *)v27;
  BOOL v31 = (char *)a1[1];
  unint64_t v32 = v41;
  if (v31 != v4)
  {
    do
    {
      _OWORD *v32 = *(_OWORD *)v4;
      *(void *)uint64_t v4 = 0;
      *((void *)v4 + 1) = 0;
      v32[1] = *((_OWORD *)v4 + 1);
      *((void *)v4 + 2) = 0;
      *((void *)v4 + 3) = 0;
      long long v33 = *((_OWORD *)v4 + 2);
      *(_OWORD *)((char *)v32 + 45) = *(_OWORD *)(v4 + 45);
      v32[2] = v33;
      v32 += 4;
      v4 += 64;
    }
    while (v4 != v31);
    float v27 = v40;
    uint64_t v4 = (char *)a1[1];
  }
  unint64_t v34 = (char *)*a1;
  *a1 = v27;
  a1[1] = v32;
  int8x8_t v35 = (char *)a1[2];
  a1[2] = v42;
  int v41 = v4;
  unint64_t v42 = v35;
  unint64_t v39 = v34;
  unint64_t v40 = v34;
  if (v4 != v34)
  {
    while (1)
    {
      int v41 = v4 - 64;
      unint64_t v36 = (std::__shared_weak_count *)*((void *)v4 - 5);
      if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
        uint8x8_t v37 = (std::__shared_weak_count *)*((void *)v4 - 7);
        if (v37)
        {
LABEL_36:
          if (!atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
      }
      else
      {
        uint8x8_t v37 = (std::__shared_weak_count *)*((void *)v4 - 7);
        if (v37) {
          goto LABEL_36;
        }
      }
      uint64_t v4 = v41;
      if (v41 == v34)
      {
        uint64_t v4 = v39;
        break;
      }
    }
  }
  if (v4) {
    operator delete(v4);
  }
  return v25;
}

void sub_3A79C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3A74FC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_3A79D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != *(void *)(a1 + 24)) {
    goto LABEL_27;
  }
  unint64_t v5 = *(void **)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6 > *(void *)a1)
  {
    uint64_t v7 = (uint64_t)(v6 - *(void *)a1) >> 6;
    if (v7 >= -1) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = v7 + 2;
    }
    unint64_t v9 = v8 >> 1 << 6;
    sub_3A7D38(*(long long **)(a1 + 8), (long long *)v4, v6 - v9);
    uint64_t v4 = v10;
    *(void *)(a1 + 8) -= v9;
    *(void *)(a1 + 16) = v10;
    goto LABEL_27;
  }
  unint64_t v11 = (v4 - (uint64_t)v5) >> 5;
  if ((void *)v4 == v5) {
    unint64_t v11 = 1;
  }
  if (v11 >> 58) {
    sub_188D718();
  }
  unint64_t v12 = v11 >> 2;
  unint64_t v13 = v11 << 6;
  uint64_t v14 = (char *)operator new(v11 << 6);
  char v15 = &v14[64 * v12];
  long long v16 = &v14[v13];
  if (v4 == v6)
  {
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v16;
  }
  else
  {
    unint64_t v17 = &v15[v4 - v6];
    unint64_t v18 = v12 << 6;
    do
    {
      unint64_t v19 = &v14[v18];
      *(_OWORD *)unint64_t v19 = *(_OWORD *)v6;
      *(void *)unint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
      *((_OWORD *)v19 + 1) = *(_OWORD *)(v6 + 16);
      *(void *)(v6 + 16) = 0;
      *(void *)(v6 + 24) = 0;
      long long v20 = *(_OWORD *)(v6 + 32);
      *(_OWORD *)(v19 + 45) = *(_OWORD *)(v6 + 45);
      *((_OWORD *)v19 + 2) = v20;
      v18 += 64;
      v6 += 64;
    }
    while (v19 + 64 != v17);
    unint64_t v5 = *(void **)a1;
    uint64_t v21 = *(void *)(a1 + 8);
    uint64_t v22 = *(void *)(a1 + 16);
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = v17;
    *(void *)(a1 + 24) = v16;
    while (v22 != v21)
    {
      uint64_t v23 = *(std::__shared_weak_count **)(v22 - 40);
      if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        long long v24 = *(std::__shared_weak_count **)(v22 - 56);
        if (v24)
        {
LABEL_19:
          if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
      }
      else
      {
        long long v24 = *(std::__shared_weak_count **)(v22 - 56);
        if (v24) {
          goto LABEL_19;
        }
      }
      v22 -= 64;
    }
  }
  if (v5) {
    operator delete(v5);
  }
  uint64_t v4 = *(void *)(a1 + 16);
LABEL_27:
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  __n128 result = *(__n128 *)(a2 + 32);
  *(_OWORD *)(v4 + 45) = *(_OWORD *)(a2 + 45);
  *(__n128 *)(v4 + 32) = result;
  *(void *)(a1 + 16) += 64;
  return result;
}

void *sub_3A7BF4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a2 != a1)
  {
    unint64_t v6 = a2;
    uint64_t v7 = a2;
    uint64_t v8 = a3;
    do
    {
      long long v10 = *((_OWORD *)v7 - 4);
      v7 -= 8;
      *uint64_t v7 = 0;
      v7[1] = 0;
      unint64_t v11 = *(std::__shared_weak_count **)(v3 - 56);
      *(_OWORD *)(v8 - 64) = v10;
      v8 -= 64;
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        long long v14 = *((_OWORD *)v6 - 3);
        *(v6 - 6) = 0;
        *(v6 - 5) = 0;
        unint64_t v13 = *(std::__shared_weak_count **)(v3 - 40);
        *(_OWORD *)(v3 - 48) = v14;
        if (v13)
        {
LABEL_7:
          if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
      }
      else
      {
        long long v12 = *((_OWORD *)v6 - 3);
        *(v6 - 6) = 0;
        *(v6 - 5) = 0;
        unint64_t v13 = *(std::__shared_weak_count **)(v3 - 40);
        *(_OWORD *)(v3 - 48) = v12;
        if (v13) {
          goto LABEL_7;
        }
      }
      long long v9 = *((_OWORD *)v6 - 2);
      *(_OWORD *)(v3 - 19) = *(_OWORD *)((char *)v6 - 19);
      *(_OWORD *)(v3 - 32) = v9;
      uint64_t v3 = v8;
      unint64_t v6 = v7;
    }
    while (v7 != a1);
  }
  return a2;
}

long long *sub_3A7D38(long long *a1, long long *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    while (1)
    {
      long long v7 = *v4;
      *(void *)uint64_t v4 = 0;
      *((void *)v4 + 1) = 0;
      uint64_t v8 = *(std::__shared_weak_count **)(a3 + 8);
      *(_OWORD *)a3 = v7;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
        long long v11 = v4[1];
        *((void *)v4 + 2) = 0;
        *((void *)v4 + 3) = 0;
        long long v10 = *(std::__shared_weak_count **)(a3 + 24);
        *(_OWORD *)(a3 + 16) = v11;
        if (v10)
        {
LABEL_7:
          if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
      }
      else
      {
        long long v9 = v4[1];
        *((void *)v4 + 2) = 0;
        *((void *)v4 + 3) = 0;
        long long v10 = *(std::__shared_weak_count **)(a3 + 24);
        *(_OWORD *)(a3 + 16) = v9;
        if (v10) {
          goto LABEL_7;
        }
      }
      long long v6 = v4[2];
      *(_OWORD *)(a3 + 45) = *(long long *)((char *)v4 + 45);
      *(_OWORD *)(a3 + 32) = v6;
      a3 += 64;
      v4 += 4;
      if (v4 == a2) {
        return a2;
      }
    }
  }
  return v4;
}

void sub_3A7E68(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (!*a1) {
    return;
  }
  uint64_t v3 = (char *)a1[1];
  uint64_t v4 = *a1;
  if (v3 == v1) {
    goto LABEL_13;
  }
  do
  {
    unint64_t v5 = (std::__shared_weak_count *)*((void *)v3 - 5);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      long long v6 = (std::__shared_weak_count *)*((void *)v3 - 7);
      if (!v6) {
        goto LABEL_4;
      }
    }
    else
    {
      long long v6 = (std::__shared_weak_count *)*((void *)v3 - 7);
      if (!v6) {
        goto LABEL_4;
      }
    }
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
LABEL_4:
    v3 -= 64;
  }
  while (v3 != v1);
  uint64_t v4 = *a1;
LABEL_13:
  a1[1] = v1;
  operator delete(v4);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t *sub_3A7F70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_B128((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    unint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      long long v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          unint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            long long v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          long long v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  uint64_t v25 = operator new(0x30uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *uint64_t v25 = 0;
  v25[1] = v10;
  uint64_t v26 = v25 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v26, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v26 = *(_OWORD *)a3;
    v25[4] = *(void *)(a3 + 16);
  }
  v25[5] = *(void *)(a3 + 24);
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        long long v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        long long v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        long long v29 = *(void **)(*(void *)a1 + 8 * v10);
        long long v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      long long v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      long long v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *long long v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  long long v29 = *(void **)(*(void *)a1 + 8 * v3);
  long long v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  *long long v30 = *v29;
  *long long v29 = v42[0];
LABEL_92:
  long long v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_3A83B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_3A83CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_3A83E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_B128((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    unint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      long long v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          unint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            long long v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          long long v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  uint64_t v25 = (char *)operator new(0xC0uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *(void *)uint64_t v25 = 0;
  *((void *)v25 + 1) = v10;
  uint64_t v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v26, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v26 = *(_OWORD *)a3;
    *((void *)v25 + 4) = *(void *)(a3 + 16);
  }
  *(_OWORD *)(v25 + 136) = *(_OWORD *)(a3 + 120);
  *(_OWORD *)(v25 + 152) = *(_OWORD *)(a3 + 136);
  *(_OWORD *)(v25 + 168) = *(_OWORD *)(a3 + 152);
  *((void *)v25 + 23) = *(void *)(a3 + 168);
  *(_OWORD *)(v25 + 72) = *(_OWORD *)(a3 + 56);
  *(_OWORD *)(v25 + 88) = *(_OWORD *)(a3 + 72);
  *(_OWORD *)(v25 + 104) = *(_OWORD *)(a3 + 88);
  *(_OWORD *)(v25 + 120) = *(_OWORD *)(a3 + 104);
  *(_OWORD *)(v25 + 40) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(v25 + 56) = *(_OWORD *)(a3 + 40);
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = v11 < 3 || (v11 & (v11 - 1)) != 0;
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_69;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_69:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        long long v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        long long v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        long long v29 = *(void **)(*(void *)a1 + 8 * v10);
        long long v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      long long v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      long long v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_82:
    *long long v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_93;
  }
  long long v29 = *(void **)(*(void *)a1 + 8 * v3);
  long long v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_82;
  }
LABEL_57:
  *long long v30 = *v29;
  *long long v29 = v42[0];
LABEL_93:
  long long v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_3A8878(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_3A888C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_3A88A4(char **a1, unint64_t a2)
{
  uint64_t v5 = (uint64_t)(a1 + 2);
  uint64_t v4 = a1[2];
  long long v6 = a1[1];
  if (0x8E38E38E38E38E39 * ((v4 - v6) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 72 * ((72 * a2 - 72) / 0x48) + 72;
      bzero(a1[1], v13);
      v6 += v13;
    }
    a1[1] = v6;
  }
  else
  {
    unint64_t v7 = *a1;
    unint64_t v8 = 0x8E38E38E38E38E39 * ((v6 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x38E38E38E38E38ELL) {
      sub_2E00();
    }
    unint64_t v10 = 0x8E38E38E38E38E39 * ((v4 - v7) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x1C71C71C71C71C7) {
      unint64_t v11 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0x38E38E38E38E38ELL) {
        sub_188D718();
      }
      uint8x8_t v12 = (char *)operator new(72 * v11);
    }
    else
    {
      uint8x8_t v12 = 0;
    }
    long long v14 = &v12[72 * v8];
    char v15 = &v12[72 * v11];
    size_t v16 = 72 * ((72 * a2 - 72) / 0x48) + 72;
    bzero(v14, v16);
    unint64_t v17 = &v14[v16];
    if (v6 == v7)
    {
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v15;
      if (!v6) {
        return;
      }
      goto LABEL_21;
    }
    do
    {
      uint64_t v18 = v14;
      *((void *)v14 - 8) = 0;
      *((void *)v14 - 7) = 0;
      long long v19 = *(_OWORD *)(v6 - 72);
      v6 -= 72;
      *(_OWORD *)(v14 - 72) = v19;
      v14 -= 72;
      *((void *)v18 - 7) = *((void *)v6 + 2);
      *(void *)long long v6 = 0;
      *((void *)v6 + 1) = 0;
      *((void *)v6 + 2) = 0;
      *((void *)v14 + 4) = 0;
      *((void *)v14 + 5) = 0;
      *(_OWORD *)(v14 + 24) = *(_OWORD *)(v6 + 24);
      *((void *)v14 + 5) = *((void *)v6 + 5);
      *((void *)v6 + 3) = 0;
      *((void *)v6 + 4) = 0;
      *((void *)v6 + 5) = 0;
      long long v20 = *((_OWORD *)v6 + 3);
      *((void *)v14 + 8) = *((void *)v6 + 8);
      *((_OWORD *)v14 + 3) = v20;
      *((void *)v6 + 7) = 0;
      *((void *)v6 + 8) = 0;
      *((void *)v6 + 6) = 0;
    }
    while (v6 != v7);
    uint64_t v21 = *a1;
    long long v6 = a1[1];
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v6 != v21)
    {
      do
      {
        v6 -= 72;
        sub_3A688C(v5, (char **)v6);
      }
      while (v6 != v21);
      long long v6 = v21;
    }
    if (v6)
    {
LABEL_21:
      operator delete(v6);
    }
  }
}

uint64_t *sub_3A8B18(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint8x8_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    size_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          __n128 result = 0;
          size_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        __n128 result = 0;
        size_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

char *sub_3A8D48(char **a1, long long *a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333) {
    sub_2E00();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v6 = 0x333333333333333;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x333333333333333) {
      sub_188D718();
    }
    int8x8_t v7 = (char *)operator new(80 * v6);
  }
  else
  {
    int8x8_t v7 = 0;
  }
  uint64_t v19 = &v7[80 * v3];
  uint64_t v20 = &v7[80 * v6];
  sub_3A8F44(a1 + 16, v19, a2);
  unint64_t v8 = v19 + 80;
  uint8x8_t v9 = *a1;
  unint64_t v10 = a1[1];
  if (v10 == *a1)
  {
    *a1 = v19;
    a1[1] = v8;
    a1[2] = v20;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      uint8x8_t v12 = &v19[v11];
      size_t v13 = &v10[v11];
      long long v14 = *(_OWORD *)&v10[v11 - 80];
      *((void *)v12 - 8) = *(void *)&v10[v11 - 64];
      *((_OWORD *)v12 - 5) = v14;
      *((void *)v13 - 9) = 0;
      *((void *)v13 - 8) = 0;
      *((void *)v13 - 10) = 0;
      *((_DWORD *)v12 - 14) = *(_DWORD *)&v10[v11 - 56];
      *((void *)v12 - 5) = 0;
      *((void *)v12 - 4) = 0;
      *((void *)v12 - 6) = 0;
      *((_OWORD *)v12 - 3) = *(_OWORD *)&v10[v11 - 48];
      *((void *)v12 - 4) = *(void *)&v10[v11 - 32];
      *((void *)v13 - 6) = 0;
      *((void *)v13 - 5) = 0;
      *((void *)v13 - 4) = 0;
      long long v15 = *(_OWORD *)&v10[v11 - 24];
      *((void *)v12 - 1) = *(void *)&v10[v11 - 8];
      *(_OWORD *)(v12 - 24) = v15;
      v11 -= 80;
    }
    while (&v10[v11] != v9);
    uint64_t v16 = *a1;
    unint64_t v10 = a1[1];
    *a1 = &v19[v11];
    a1[1] = v8;
    a1[2] = v20;
    if (v10 != v16)
    {
      do
      {
        unint64_t v17 = (void *)*((void *)v10 - 6);
        if (v17)
        {
          *((void *)v10 - 5) = v17;
          operator delete(v17);
        }
        if (*(v10 - 57) < 0) {
          operator delete(*((void **)v10 - 10));
        }
        v10 -= 80;
      }
      while (v10 != v16);
      unint64_t v10 = v16;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v19 + 80;
}

void sub_3A8F30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3A9028((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_3A8F44(int a1, char *__dst, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    *((void *)__dst + 2) = *((void *)a3 + 2);
    *(_OWORD *)__dst = v5;
  }
  int v6 = *((_DWORD *)a3 + 6);
  *((void *)__dst + 4) = 0;
  *((_DWORD *)__dst + 6) = v6;
  *((void *)__dst + 5) = 0;
  *((void *)__dst + 6) = 0;
  unint64_t v8 = (unsigned char *)*((void *)a3 + 4);
  int8x8_t v7 = (unsigned char *)*((void *)a3 + 5);
  int64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0) {
      sub_2E00();
    }
    unint64_t v10 = (char *)operator new(v7 - v8);
    *((void *)__dst + 4) = v10;
    *((void *)__dst + 5) = v10;
    uint64_t v11 = &v10[v9];
    *((void *)__dst + 6) = &v10[v9];
    memcpy(v10, v8, v9 - 1);
    *((void *)__dst + 5) = v11;
  }
  __n128 result = *(__n128 *)((char *)a3 + 56);
  *((void *)__dst + 9) = *((void *)a3 + 9);
  *(__n128 *)(__dst + 56) = result;
  return result;
}

void sub_3A9004(_Unwind_Exception *a1)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  sub_20A682C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_3A9028(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 80;
    unint64_t v4 = *(void **)(i - 48);
    if (v4)
    {
      *(void *)(i - 40) = v4;
      operator delete(v4);
    }
    if (*(char *)(i - 57) < 0) {
      operator delete(*(void **)(i - 80));
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *sub_3A90A0(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint8x8_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    size_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          __n128 result = 0;
          size_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        __n128 result = 0;
        size_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t *sub_3A92D0(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_B128((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    char v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          unint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  uint64_t v26 = (char *)operator new(0xC0uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  *(void *)uint64_t v26 = 0;
  *((void *)v26 + 1) = v11;
  float v27 = v26 + 16;
  float v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_4200(v27, *(void **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    *((void *)v26 + 4) = *((void *)v28 + 2);
    *(_OWORD *)float v27 = v29;
  }
  *(_OWORD *)(v26 + 56) = 0u;
  *(_OWORD *)(v26 + 72) = 0u;
  *(_OWORD *)(v26 + 88) = 0u;
  *(_OWORD *)(v26 + 104) = 0u;
  *(_OWORD *)(v26 + 120) = 0u;
  *(_OWORD *)(v26 + 136) = 0u;
  *(_OWORD *)(v26 + 152) = 0u;
  *(_OWORD *)(v26 + 168) = 0u;
  *(_OWORD *)(v26 + 40) = 0u;
  *(_WORD *)(v26 + 57) = 257;
  *((_OWORD *)v26 + 4) = xmmword_20E2950;
  *((void *)v26 + 10) = 0x7FEFFFFFFFFFFFFFLL;
  *((_DWORD *)v26 + 22) = 0x7FFFFFFF;
  *((void *)v26 + 12) = 0x7FFFFFFFFFFFFFFFLL;
  *((_DWORD *)v26 + 26) = 0x7FFFFFFF;
  *((void *)v26 + 14) = 0x7FFFFFFFFFFFFFFFLL;
  *((_DWORD *)v26 + 30) = 0x7FFFFFFF;
  *((void *)v26 + 16) = 0x7FFFFFFFFFFFFFFFLL;
  *((_DWORD *)v26 + 34) = 0x7FFFFFFF;
  *((void *)v26 + 18) = 0x7FFFFFFFFFFFFFFFLL;
  *((_DWORD *)v26 + 38) = 0x7FFFFFFF;
  *((int64x2_t *)v26 + 10) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *((_DWORD *)v26 + 44) = 0x7FFFFFFF;
  *((void *)v26 + 23) = 0x7FFFFFFFFFFFFFFFLL;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = v12 < 3 || (v12 & (v12 - 1)) != 0;
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_69;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_69:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        unint64_t v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        unint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        unint64_t v32 = *(void **)(*(void *)a1 + 8 * v11);
        unint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      unint64_t v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      unint64_t v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_82:
    *unint64_t v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_93;
  }
  unint64_t v32 = *(void **)(*(void *)a1 + 8 * v4);
  unint64_t v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_82;
  }
LABEL_57:
  *unint64_t v33 = *v32;
  void *v32 = v45[0];
LABEL_93:
  uint64_t v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_3A9798(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_3A97AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_3A97C4(void **a1, uint64_t a2, int *a3, unsigned int *a4)
{
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x333333333333333) {
    sub_2E00();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v6) {
    unint64_t v6 = 0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x199999999999999) {
    unint64_t v10 = 0x333333333333333;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x333333333333333) {
      sub_188D718();
    }
    unint64_t v11 = operator new(80 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  unint64_t v12 = &v11[80 * v5];
  float v30 = v12;
  unint64_t v32 = &v11[80 * v10];
  int v13 = *a3;
  size_t v14 = *a4;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(&v11[80 * v5], *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)unint64_t v12 = *(_OWORD *)a2;
    *((void *)v12 + 2) = *(void *)(a2 + 16);
  }
  uint64_t v15 = &v11[80 * v5];
  *((_DWORD *)v15 + 6) = 0;
  char v16 = v15 + 24;
  *((void *)v16 + 1) = 0;
  *((void *)v16 + 2) = 0;
  *((void *)v16 + 3) = 0;
  if (v14)
  {
    uint64_t v17 = operator new(v14);
    *((void *)v16 + 1) = v17;
    *((int64x2_t *)v16 + 1) = vdupq_n_s64((unint64_t)v17 + v14);
  }
  unint64_t v18 = &v11[80 * v5];
  *((void *)v18 + 7) = 0;
  *((_DWORD *)v18 + 16) = 0x7FFFFFFF;
  *((void *)v18 + 9) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)char v16 = v13;
  float v31 = v18;
  uint64_t v19 = v18 + 80;
  uint64_t v20 = (char *)*a1;
  uint64_t v21 = (char *)a1[1];
  if (v21 == *a1)
  {
    *a1 = v12;
    a1[1] = v19;
    a1[2] = v32;
  }
  else
  {
    uint64_t v22 = 0;
    do
    {
      uint64_t v23 = &v12[v22];
      uint64_t v24 = &v21[v22];
      long long v25 = *(_OWORD *)&v21[v22 - 80];
      *((void *)v23 - 8) = *(void *)&v21[v22 - 64];
      *((_OWORD *)v23 - 5) = v25;
      *((void *)v24 - 9) = 0;
      *((void *)v24 - 8) = 0;
      *((void *)v24 - 10) = 0;
      *((_DWORD *)v23 - 14) = *(_DWORD *)&v21[v22 - 56];
      *((void *)v23 - 5) = 0;
      *((void *)v23 - 4) = 0;
      *((void *)v23 - 6) = 0;
      *((_OWORD *)v23 - 3) = *(_OWORD *)&v21[v22 - 48];
      *((void *)v23 - 4) = *(void *)&v21[v22 - 32];
      *((void *)v24 - 6) = 0;
      *((void *)v24 - 5) = 0;
      *((void *)v24 - 4) = 0;
      long long v26 = *(_OWORD *)&v21[v22 - 24];
      *((void *)v23 - 1) = *(void *)&v21[v22 - 8];
      *(_OWORD *)(v23 - 24) = v26;
      v22 -= 80;
    }
    while (&v21[v22] != v20);
    float v27 = (char *)*a1;
    uint64_t v21 = (char *)a1[1];
    *a1 = &v30[v22];
    a1[1] = v19;
    a1[2] = v32;
    if (v21 != v27)
    {
      do
      {
        float v28 = (void *)*((void *)v21 - 6);
        if (v28)
        {
          *((void *)v21 - 5) = v28;
          operator delete(v28);
        }
        if (*(v21 - 57) < 0) {
          operator delete(*((void **)v21 - 10));
        }
        v21 -= 80;
      }
      while (v21 != v27);
      uint64_t v21 = v27;
    }
  }
  if (v21) {
    operator delete(v21);
  }
  return v31 + 80;
}

void sub_3A9A48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3A9028((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_3A9A5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  sub_3A9028((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_3A9A80(char **a1, uint64_t a2, long long *a3, long long *a4, uint64_t a5)
{
  unint64_t v5 = *a1;
  uint64_t v6 = a2 - (void)*a1;
  int8x8_t v7 = &(*a1)[v6 & 0xFFFFFFFFFFFFFFF0];
  if (a5 < 1) {
    return v7;
  }
  unint64_t v9 = a3;
  unint64_t v12 = a1[1];
  unint64_t v11 = a1[2];
  if (a5 <= (v11 - v12) >> 4)
  {
    uint64_t v18 = (v12 - v7) >> 4;
    if (v18 >= a5)
    {
      uint64_t v19 = &a3[a5];
      uint64_t v20 = a1[1];
      uint64_t v24 = &v7[16 * a5];
      long long v25 = &v12[-16 * a5];
      long long v26 = v20;
      if (v25 >= v12)
      {
LABEL_22:
        a1[1] = v26;
        if (v20 != v24) {
          memmove(&v20[-16 * ((v20 - v24) >> 4)], v7, v20 - v24);
        }
        if (v19 != v9)
        {
          float v28 = v7;
          do
          {
            long long v29 = *v9++;
            *(_OWORD *)float v28 = v29;
            v28 += 16;
          }
          while (v9 != v19);
        }
        return v7;
      }
    }
    else
    {
      uint64_t v19 = &a3[v18];
      uint64_t v20 = a1[1];
      if (v19 != a4)
      {
        uint64_t v21 = v19;
        uint64_t v22 = a1[1];
        do
        {
          long long v23 = *v21++;
          *(_OWORD *)uint64_t v22 = v23;
          v22 += 16;
          v20 += 16;
        }
        while (v21 != a4);
      }
      a1[1] = v20;
      if (v12 - v7 < 1) {
        return v7;
      }
      uint64_t v24 = &v7[16 * a5];
      long long v25 = &v20[-16 * a5];
      long long v26 = v20;
      if (v25 >= v12) {
        goto LABEL_22;
      }
    }
    long long v26 = v20;
    do
    {
      long long v27 = *(_OWORD *)v25;
      v25 += 16;
      *(_OWORD *)long long v26 = v27;
      v26 += 16;
    }
    while (v25 < v12);
    goto LABEL_22;
  }
  unint64_t v13 = a5 + ((v12 - v5) >> 4);
  if (v13 >> 60) {
    sub_2E00();
  }
  uint64_t v14 = v11 - v5;
  uint64_t v15 = v14 >> 3;
  if (v14 >> 3 <= v13) {
    uint64_t v15 = v13;
  }
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v16 = v15;
  }
  if (v16)
  {
    if (v16 >> 60) {
      sub_188D718();
    }
    uint64_t v17 = (char *)operator new(16 * v16);
  }
  else
  {
    uint64_t v17 = 0;
  }
  float v30 = &v17[16 * (v6 >> 4)];
  uint64_t v31 = 16 * a5;
  unint64_t v32 = &v30[16 * a5];
  unint64_t v33 = v30;
  do
  {
    long long v34 = *v9++;
    *(_OWORD *)unint64_t v33 = v34;
    v33 += 16;
    v31 -= 16;
  }
  while (v31);
  unint64_t v35 = *a1;
  if (*a1 == v7)
  {
    uint8x8_t v37 = v30;
    unint64_t v39 = &v17[16 * v16];
    size_t v40 = v12 - v7;
    if (v12 != v7) {
LABEL_35:
    }
      memmove(v32, v7, v40);
  }
  else
  {
    unint64_t v36 = v7;
    uint8x8_t v37 = v30;
    do
    {
      *((_OWORD *)v37 - 1) = *((_OWORD *)v36 - 1);
      v37 -= 16;
      v36 -= 16;
    }
    while (v36 != v35);
    int8x8_t v38 = a1[1];
    unint64_t v39 = &v17[16 * v16];
    size_t v40 = v38 - v7;
    if (v38 != v7) {
      goto LABEL_35;
    }
  }
  uint64_t v41 = *a1;
  *a1 = v37;
  a1[1] = &v32[v40];
  a1[2] = v39;
  if (v41) {
    operator delete(v41);
  }
  return v30;
}

uint64_t *sub_3A9CC8(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  unint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    unint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          __n128 result = 0;
          unint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        __n128 result = 0;
        unint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t *sub_3A9EF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int8x8_t v7 = (unsigned char *)a2;
  unint64_t v9 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v10 = v9;
  }
  unint64_t v11 = sub_B128((uint64_t)v48, (uint64_t *)a2, v10);
  unint64_t v12 = v11;
  unint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v4 = v11;
      if (v11 >= v13) {
        unint64_t v4 = v11 % v13;
      }
    }
    else
    {
      unint64_t v4 = (v13 - 1) & v11;
    }
    uint64_t v15 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      uint64_t v16 = *v15;
      if (*v15)
      {
        char v17 = v7[23];
        if (v17 >= 0) {
          uint64_t v18 = v7[23];
        }
        else {
          uint64_t v18 = *((void *)v7 + 1);
        }
        if (v17 < 0) {
          int8x8_t v7 = *(unsigned char **)v7;
        }
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = v16[1];
            if (v23 == v12)
            {
              uint64_t v24 = *((unsigned __int8 *)v16 + 39);
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = *((unsigned __int8 *)v16 + 39);
              }
              else {
                uint64_t v25 = v16[3];
              }
              if (v25 == v18)
              {
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v16[2], v7, v16[3])) {
                    return v16;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v16 + 39)) {
                    return v16;
                  }
                  uint64_t v26 = 0;
                  while (*((unsigned __int8 *)v16 + v26 + 16) == v7[v26])
                  {
                    if (v24 == ++v26) {
                      return v16;
                    }
                  }
                }
              }
            }
            else if ((v23 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v16 = (uint64_t *)*v16;
            if (!v16) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v19 = v16[1];
          if (v19 == v12)
          {
            uint64_t v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = *((unsigned __int8 *)v16 + 39);
            }
            else {
              uint64_t v21 = v16[3];
            }
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp((const void *)v16[2], v7, v16[3])) {
                  return v16;
                }
              }
              else
              {
                if (!*((unsigned char *)v16 + 39)) {
                  return v16;
                }
                uint64_t v22 = 0;
                while (*((unsigned __int8 *)v16 + v22 + 16) == v7[v22])
                {
                  if (v20 == ++v22) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v19 >= v13) {
              v19 %= v13;
            }
            if (v19 != v4) {
              break;
            }
          }
          uint64_t v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  long long v27 = (char *)operator new(0xC0uLL);
  v48[0] = v27;
  v48[1] = a1 + 16;
  char v49 = 0;
  *(void *)long long v27 = 0;
  *((void *)v27 + 1) = v12;
  float v28 = v27 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v28, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)float v28 = *(_OWORD *)a3;
    *((void *)v27 + 4) = *(void *)(a3 + 16);
  }
  long long v29 = *(_OWORD *)(a4 + 112);
  *(_OWORD *)(v27 + 136) = *(_OWORD *)(a4 + 96);
  *(_OWORD *)(v27 + 152) = v29;
  *(_OWORD *)(v27 + 168) = *(_OWORD *)(a4 + 128);
  *((void *)v27 + 23) = *(void *)(a4 + 144);
  long long v30 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v27 + 72) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v27 + 88) = v30;
  long long v31 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(v27 + 104) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(v27 + 120) = v31;
  long long v32 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v27 + 40) = *(_OWORD *)a4;
  *(_OWORD *)(v27 + 56) = v32;
  char v49 = 1;
  float v33 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v34 = *(float *)(a1 + 32);
  if (!v13 || (float)(v34 * (float)v13) < v33)
  {
    BOOL v37 = v13 < 3 || (v13 & (v13 - 1)) != 0;
    unint64_t v38 = v37 | (2 * v13);
    unint64_t v39 = vcvtps_u32_f32(v33 / v34);
    if (v38 <= v39) {
      size_t prime = v39;
    }
    else {
      size_t prime = v38;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v41 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v41) {
      goto LABEL_69;
    }
    if (prime < *(void *)&v41)
    {
      unint64_t v42 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v41 < 3uLL || (uint8x8_t v43 = (uint8x8_t)vcnt_s8(v41), v43.i16[0] = vaddlv_u8(v43), v43.u32[0] > 1uLL))
      {
        unint64_t v42 = std::__next_prime(v42);
      }
      else
      {
        uint64_t v44 = 1 << -(char)__clz(v42 - 1);
        if (v42 >= 2) {
          unint64_t v42 = v44;
        }
      }
      if (prime <= v42) {
        size_t prime = v42;
      }
      if (prime < *(void *)&v41) {
LABEL_69:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v13 = *(void *)(a1 + 8);
    unint64_t v45 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        unint64_t v4 = v12 % v13;
        unint64_t v35 = *(void **)(*(void *)a1 + 8 * (v12 % v13));
        unint64_t v36 = (void *)v48[0];
        if (v35) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v12;
        unint64_t v35 = *(void **)(*(void *)a1 + 8 * v12);
        unint64_t v36 = (void *)v48[0];
        if (v35) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v45 & v12;
      unint64_t v35 = *(void **)(*(void *)a1 + 8 * (v45 & v12));
      unint64_t v36 = (void *)v48[0];
      if (v35) {
        goto LABEL_57;
      }
    }
LABEL_82:
    void *v36 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v48[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v48[0])
    {
      unint64_t v46 = *(void *)(*(void *)v48[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v46 >= v13) {
          v46 %= v13;
        }
      }
      else
      {
        v46 &= v13 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v46) = v48[0];
    }
    goto LABEL_93;
  }
  unint64_t v35 = *(void **)(*(void *)a1 + 8 * v4);
  unint64_t v36 = (void *)v48[0];
  if (!v35) {
    goto LABEL_82;
  }
LABEL_57:
  void *v36 = *v35;
  *unint64_t v35 = v48[0];
LABEL_93:
  uint64_t v16 = (uint64_t *)v48[0];
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_3AA380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_3AA394(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_3AA3AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 56);
  if (v2 == v3 || v4 == v5) {
    return (v2 == v3) == (v4 == v5);
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  unint64_t v10 = *(void **)a1;
  if (*(void *)a1)
  {
    unint64_t v11 = *(void *)(a1 + 8);
    BOOL v12 = v11 < sub_46C760(v10);
    unint64_t v13 = *(void **)a2;
    if (*(void *)a2) {
      goto LABEL_10;
    }
  }
  else
  {
    BOOL v12 = 0;
    unint64_t v13 = *(void **)a2;
    if (*(void *)a2)
    {
LABEL_10:
      unint64_t v14 = *(void *)(a2 + 8);
      unint64_t v15 = sub_46C760(v13);
      BOOL v16 = v14 < v15;
      if (v14 < v15 && v12)
      {
        uint64_t v18 = sub_46C8EC(*(void **)a1, *(void *)(a1 + 8));
        return v18 == sub_46C8EC(*(void **)a2, *(void *)(a2 + 8));
      }
      return v12 ^ v16 ^ 1;
    }
  }
  BOOL v16 = 0;
  return v12 ^ v16 ^ 1;
}

void sub_3AA4BC()
{
}

void *sub_3AA4D0()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = off_2438EF8;
  return result;
}

void sub_3AA508(uint64_t a1, void *a2)
{
  *a2 = off_2438EF8;
}

BOOL sub_3AA530(uint64_t a1, uint64_t a2)
{
  return sub_35870C(a2);
}

uint64_t sub_3AA538(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing16ClosureAnalytics47process_hard_closures_from_cross_check_branchesERKNS_6common6Vec"
                     "torINS0_5RouteINS0_11DrivingModeEEENSt3__19allocatorIS6_EEEERNS7_13unordered_mapINS7_12basic_string"
                     "IcNS7_11char_traitsIcEENS8_IcEEEENS0_11ClosureInfoENS7_4hashISI_EENS7_8equal_toISI_EENS8_INS7_4pair"
                     "IKSI_SJ_EEEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl7routing16ClosureAnalytics47process_hard_closures_from_cross_check_branchesERKNS_"
                                "6common6VectorINS0_5RouteINS0_11DrivingModeEEENSt3__19allocatorIS6_EEEERNS7_13unordered_"
                                "mapINS7_12basic_stringIcNS7_11char_traitsIcEENS8_IcEEEENS0_11ClosureInfoENS7_4hashISI_EE"
                                "NS7_8equal_toISI_EENS8_INS7_4pairIKSI_SJ_EEEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing16ClosureAnalytics47process_hard_closures_from_cross_check_branchesERKNS_6common6VectorINS0_5RouteINS0_11DrivingModeEEENSt3__19allocatorIS6_EEEERNS7_13unordered_mapINS7_12basic_stringIcNS7_11char_traitsIcEENS8_IcEEEENS0_11ClosureInfoENS7_4hashISI_EENS7_8equal_toISI_EENS8_INS7_4pairIKSI_SJ_EEEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing16ClosureAnalytics47process_hard_closures_from_cross_check_branchesERKNS_6common6VectorINS0_5RouteINS0_11DrivingModeEEENSt3__19allocatorIS6_EEEERNS7_13unordered_mapINS7_12basic_stringIcNS7_11char_traitsIcEENS8_IcEEEENS0_11ClosureInfoENS7_4hashISI_EENS7_8equal_toISI_EENS8_INS7_4pairIKSI_SJ_EEEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_3AA5A8()
{
}

uint64_t sub_3AA5B4(uint64_t result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v11 = (uint64_t *)result;
LABEL_2:
  BOOL v12 = v11;
  while (1)
  {
    unint64_t v11 = v12;
    uint64_t v13 = a2 - (char *)v12;
    unint64_t v14 = (a2 - (char *)v12) >> 3;
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v71 = *v12;
          uint64_t v72 = *((void *)a2 - 1);
          if (v72 >= *v12) {
            return result;
          }
          *BOOL v12 = v72;
          goto LABEL_155;
        case 3uLL:
          uint64_t v71 = *v12;
          uint64_t v73 = v12[1];
          uint64_t v74 = *((void *)a2 - 1);
          if (v73 >= *v12)
          {
            if (v74 < v73)
            {
              v12[1] = v74;
              *((void *)a2 - 1) = v73;
              uint64_t v91 = *v12;
              uint64_t v92 = v12[1];
              if (v92 < *v12)
              {
                *BOOL v12 = v92;
                v12[1] = v91;
              }
            }
          }
          else
          {
            if (v74 >= v73)
            {
              *BOOL v12 = v73;
              v12[1] = v71;
              uint64_t v99 = *((void *)a2 - 1);
              if (v99 >= v71) {
                return result;
              }
              v12[1] = v99;
            }
            else
            {
              *BOOL v12 = v74;
            }
LABEL_155:
            *((void *)a2 - 1) = v71;
          }
          return result;
        case 4uLL:
          unint64_t v75 = v12 + 1;
          int v76 = (uint64_t *)v12[1];
          uint64_t v77 = v12 + 2;
          uint64_t v78 = v12[2];
          int v79 = (uint64_t *)*v12;
          if ((uint64_t)v76 >= *v12)
          {
            if (v78 >= (uint64_t)v76)
            {
LABEL_149:
              int v76 = (uint64_t *)v78;
              uint64_t v93 = *((void *)a2 - 1);
              if (v93 >= (uint64_t)v76) {
                return result;
              }
LABEL_150:
              *uint64_t v77 = v93;
              *((void *)a2 - 1) = v76;
              uint64_t v96 = *v75;
              uint64_t v97 = *v77;
              if (*v77 < v96)
              {
                v12[1] = v97;
                v12[2] = v96;
                uint64_t v98 = *v12;
                if (v97 < *v12)
                {
                  *BOOL v12 = v97;
                  v12[1] = v98;
                }
              }
              return result;
            }
            *unint64_t v75 = v78;
            *uint64_t v77 = (uint64_t)v76;
            unsigned int v80 = v12;
            unsigned int v81 = (uint64_t **)(v12 + 1);
            __n128 result = (uint64_t)v76;
            if (v78 >= (uint64_t)v79)
            {
LABEL_141:
              uint64_t v93 = *((void *)a2 - 1);
              if (v93 >= (uint64_t)v76) {
                return result;
              }
              goto LABEL_150;
            }
          }
          else
          {
            unsigned int v80 = v12;
            unsigned int v81 = (uint64_t **)(v12 + 2);
            __n128 result = *v12;
            if (v78 >= (uint64_t)v76)
            {
              *BOOL v12 = (uint64_t)v76;
              v12[1] = (uint64_t)v79;
              unsigned int v80 = v12 + 1;
              unsigned int v81 = (uint64_t **)(v12 + 2);
              __n128 result = (uint64_t)v79;
              if (v78 >= (uint64_t)v79) {
                goto LABEL_149;
              }
            }
          }
          uint64_t *v80 = v78;
          *unsigned int v81 = v79;
          int v76 = (uint64_t *)result;
          goto LABEL_141;
        case 5uLL:
          return (uint64_t)sub_3AB0B0(v12, v12 + 1, v12 + 2, v12 + 3, (uint64_t *)a2 - 1);
        default:
          JUMPOUT(0);
      }
    }
    if (v13 <= 191) {
      break;
    }
    if (!a4)
    {
      if (v12 != (uint64_t *)a2)
      {
        return (uint64_t)sub_3AB1EC((char *)v12, a2, a2);
      }
      return result;
    }
    unint64_t v15 = v14 >> 1;
    BOOL v16 = &v12[v14 >> 1];
    uint64_t v17 = *((void *)a2 - 1);
    if ((unint64_t)v13 < 0x401)
    {
      uint64_t v20 = *v16;
      uint64_t v21 = *v12;
      if (*v12 < *v16)
      {
        if (v17 < v21)
        {
          uint64_t *v16 = v17;
          goto LABEL_32;
        }
        uint64_t *v16 = v21;
        *BOOL v12 = v20;
        uint64_t v33 = *((void *)a2 - 1);
        if (v33 < v20)
        {
          *BOOL v12 = v33;
LABEL_32:
          *((void *)a2 - 1) = v20;
        }
LABEL_33:
        --a4;
        uint64_t v24 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v17 >= v21) {
        goto LABEL_33;
      }
      *BOOL v12 = v17;
      *((void *)a2 - 1) = v21;
      uint64_t v23 = *v16;
      if (*v12 >= *v16) {
        goto LABEL_33;
      }
      uint64_t *v16 = *v12;
      *BOOL v12 = v23;
      --a4;
      uint64_t v24 = v23;
      if (a5) {
        goto LABEL_57;
      }
LABEL_56:
      if (*(v12 - 1) < v24) {
        goto LABEL_57;
      }
      if (v24 < *((void *)a2 - 1))
      {
        do
        {
          uint64_t v62 = v12[1];
          ++v12;
        }
        while (v24 >= v62);
      }
      else
      {
        uint64_t v63 = v12 + 1;
        do
        {
          BOOL v12 = v63;
          if (v63 >= (uint64_t *)a2) {
            break;
          }
          ++v63;
        }
        while (v24 >= *v12);
      }
      uint64_t v64 = (uint64_t *)a2;
      if (v12 < (uint64_t *)a2)
      {
        uint64_t v64 = (uint64_t *)a2;
        do
          uint64_t v65 = *--v64;
        while (v24 < v65);
      }
      if (v12 < v64)
      {
        uint64_t v66 = *v12;
        uint64_t v67 = *v64;
        do
        {
          *BOOL v12 = v67;
          *uint64_t v64 = v66;
          do
          {
            uint64_t v68 = v12[1];
            ++v12;
            uint64_t v66 = v68;
          }
          while (v24 >= v68);
          do
          {
            uint64_t v69 = *--v64;
            uint64_t v67 = v69;
          }
          while (v24 < v69);
        }
        while (v12 < v64);
      }
      uint64_t v70 = v12 - 1;
      BOOL v5 = v12 - 1 >= v11;
      BOOL v6 = v12 - 1 == v11;
      if (v12 - 1 != v11) {
        *unint64_t v11 = *v70;
      }
      a5 = 0;
      *uint64_t v70 = v24;
    }
    else
    {
      uint64_t v18 = *v12;
      uint64_t v19 = *v16;
      if (*v16 >= *v12)
      {
        if (v17 < v19)
        {
          uint64_t *v16 = v17;
          *((void *)a2 - 1) = v19;
          uint64_t v22 = *v12;
          if (*v16 < *v12)
          {
            *BOOL v12 = *v16;
            uint64_t *v16 = v22;
          }
        }
      }
      else
      {
        if (v17 >= v19)
        {
          *BOOL v12 = v19;
          uint64_t *v16 = v18;
          uint64_t v25 = *((void *)a2 - 1);
          if (v25 >= v18) {
            goto LABEL_24;
          }
          uint64_t *v16 = v25;
        }
        else
        {
          *BOOL v12 = v17;
        }
        *((void *)a2 - 1) = v18;
      }
LABEL_24:
      uint64_t v26 = &v12[v15];
      uint64_t v29 = *(v26 - 1);
      long long v27 = v26 - 1;
      uint64_t v28 = v29;
      uint64_t v30 = v12[1];
      uint64_t v31 = *((void *)a2 - 2);
      if (v29 >= v30)
      {
        if (v31 < v28)
        {
          *long long v27 = v31;
          *((void *)a2 - 2) = v28;
          uint64_t v32 = v12[1];
          if (*v27 < v32)
          {
            v12[1] = *v27;
            *long long v27 = v32;
          }
        }
      }
      else
      {
        if (v31 >= v28)
        {
          v12[1] = v28;
          *long long v27 = v30;
          uint64_t v34 = *((void *)a2 - 2);
          if (v34 >= v30) {
            goto LABEL_38;
          }
          *long long v27 = v34;
        }
        else
        {
          v12[1] = v31;
        }
        *((void *)a2 - 2) = v30;
      }
LABEL_38:
      unint64_t v35 = &v12[v15];
      uint64_t v38 = v35[1];
      unint64_t v36 = v35 + 1;
      uint64_t v37 = v38;
      uint64_t v39 = v12[2];
      uint64_t v40 = *((void *)a2 - 3);
      if (v38 >= v39)
      {
        if (v40 < v37)
        {
          uint64_t *v36 = v40;
          *((void *)a2 - 3) = v37;
          uint64_t v41 = v12[2];
          if (*v36 < v41)
          {
            v12[2] = *v36;
            uint64_t *v36 = v41;
          }
        }
      }
      else
      {
        if (v40 >= v37)
        {
          v12[2] = v37;
          uint64_t *v36 = v39;
          uint64_t v42 = *((void *)a2 - 3);
          if (v42 >= v39) {
            goto LABEL_47;
          }
          uint64_t *v36 = v42;
        }
        else
        {
          v12[2] = v40;
        }
        *((void *)a2 - 3) = v39;
      }
LABEL_47:
      uint64_t v43 = *v27;
      uint64_t v44 = *v16;
      uint64_t v45 = *v36;
      if (*v16 >= *v27)
      {
        if (v45 >= v44) {
          goto LABEL_55;
        }
        uint64_t *v16 = v45;
        uint64_t *v36 = v44;
        unint64_t v36 = &v12[v14 >> 1];
        uint64_t v44 = v43;
        if (v45 < v43)
        {
LABEL_54:
          *long long v27 = v45;
          uint64_t *v36 = v43;
LABEL_55:
          uint64_t v47 = *v12;
          *BOOL v12 = v44;
          uint64_t *v16 = v47;
          --a4;
          uint64_t v24 = *v12;
          if ((a5 & 1) == 0) {
            goto LABEL_56;
          }
          goto LABEL_57;
        }
        uint64_t v61 = *v12;
        *BOOL v12 = v45;
        uint64_t *v16 = v61;
        --a4;
        uint64_t v24 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v45 < v44) {
        goto LABEL_54;
      }
      *long long v27 = v44;
      uint64_t *v16 = v43;
      long long v27 = &v12[v14 >> 1];
      uint64_t v44 = v45;
      if (v45 < v43) {
        goto LABEL_54;
      }
      uint64_t v46 = *v12;
      *BOOL v12 = v43;
      uint64_t *v16 = v46;
      --a4;
      uint64_t v24 = *v12;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_57:
      uint64_t v48 = 0;
      do
        uint64_t v49 = v12[++v48];
      while (v49 < v24);
      int v50 = &v12[v48];
      uint64_t v51 = a2;
      if (v48 == 1)
      {
        uint64_t v51 = a2;
        do
        {
          if (v50 >= (uint64_t *)v51) {
            break;
          }
          uint64_t v53 = *((void *)v51 - 1);
          v51 -= 8;
        }
        while (v53 >= v24);
      }
      else
      {
        do
        {
          uint64_t v52 = *((void *)v51 - 1);
          v51 -= 8;
        }
        while (v52 >= v24);
      }
      if (v50 >= (uint64_t *)v51)
      {
        int v59 = v50 - 1;
        if (v50 - 1 == v12) {
          goto LABEL_75;
        }
LABEL_74:
        *BOOL v12 = *v59;
        goto LABEL_75;
      }
      uint64_t v54 = *(void *)v51;
      unsigned int v55 = &v12[v48];
      int v56 = (uint64_t *)v51;
      do
      {
        *unsigned int v55 = v54;
        *int v56 = v49;
        do
        {
          uint64_t v57 = v55[1];
          ++v55;
          uint64_t v49 = v57;
        }
        while (v57 < v24);
        do
        {
          uint64_t v58 = *--v56;
          uint64_t v54 = v58;
        }
        while (v58 >= v24);
      }
      while (v55 < v56);
      int v59 = v55 - 1;
      if (v55 - 1 != v12) {
        goto LABEL_74;
      }
LABEL_75:
      uint64_t *v59 = v24;
      if (v50 < (uint64_t *)v51) {
        goto LABEL_78;
      }
      BOOL v60 = sub_3AAD84(v12, v59);
      BOOL v12 = v59 + 1;
      __n128 result = sub_3AAD84(v59 + 1, (uint64_t *)a2);
      if (result)
      {
        a2 = (char *)v59;
        if (v60) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v60)
      {
LABEL_78:
        __n128 result = sub_3AA5B4(v11, v59, a3, a4, a5 & 1);
        a5 = 0;
        BOOL v12 = v59 + 1;
      }
    }
  }
  int v82 = (char *)(v12 + 1);
  BOOL v84 = v12 == (uint64_t *)a2 || v82 == a2;
  if (a5)
  {
    if (!v84)
    {
      uint64_t v85 = 0;
      uint64_t v86 = v12;
      do
      {
        uint64_t v89 = *v86;
        uint64_t v88 = v86[1];
        uint64_t v86 = (uint64_t *)v82;
        if (v88 < v89)
        {
          uint64_t v90 = v85;
          do
          {
            *(uint64_t *)((char *)v12 + v90 + 8) = v89;
            if (!v90)
            {
              int v87 = v12;
              goto LABEL_124;
            }
            uint64_t v89 = *(uint64_t *)((char *)v12 + v90 - 8);
            v90 -= 8;
          }
          while (v88 < v89);
          int v87 = (uint64_t *)((char *)v12 + v90 + 8);
LABEL_124:
          *int v87 = v88;
        }
        int v82 = (char *)(v86 + 1);
        v85 += 8;
      }
      while (v86 + 1 != (uint64_t *)a2);
    }
  }
  else if (!v84)
  {
    do
    {
      uint64_t v95 = *v11;
      uint64_t v94 = v11[1];
      unint64_t v11 = (uint64_t *)v82;
      if (v94 < v95)
      {
        do
        {
          *(void *)int v82 = v95;
          uint64_t v95 = *((void *)v82 - 2);
          v82 -= 8;
        }
        while (v94 < v95);
        *(void *)int v82 = v94;
      }
      int v82 = (char *)(v11 + 1);
    }
    while (v11 + 1 != (uint64_t *)a2);
  }
  return result;
}

BOOL sub_3AAD84(uint64_t *a1, uint64_t *a2)
{
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      uint64_t v9 = *a1;
      uint64_t v10 = *(a2 - 1);
      if (v10 >= *a1) {
        return 1;
      }
      *a1 = v10;
      *(a2 - 1) = v9;
      return 1;
    case 3:
      uint64_t v11 = *a1;
      uint64_t v12 = a1[1];
      uint64_t v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12) {
          return 1;
        }
        a1[1] = v13;
        *(a2 - 1) = v12;
        uint64_t v29 = *a1;
        uint64_t v30 = a1[1];
        if (v30 >= *a1) {
          return 1;
        }
        *a1 = v30;
        a1[1] = v29;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        uint64_t v35 = *(a2 - 1);
        if (v35 >= v11) {
          return 1;
        }
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      unint64_t v14 = a1 + 1;
      uint64_t v15 = a1[1];
      BOOL v16 = a1 + 2;
      uint64_t v17 = a1[2];
      uint64_t v18 = *a1;
      if (v15 < *a1)
      {
        uint64_t v19 = a1;
        uint64_t v20 = a1 + 2;
        uint64_t v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          uint64_t v19 = a1 + 1;
          uint64_t v20 = a1 + 2;
          uint64_t v21 = v18;
          if (v17 >= v18) {
            goto LABEL_38;
          }
        }
LABEL_35:
        *uint64_t v19 = v17;
        *uint64_t v20 = v18;
        uint64_t v15 = v21;
LABEL_36:
        uint64_t v31 = *(a2 - 1);
        if (v31 >= v15) {
          return 1;
        }
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        uint64_t *v14 = v17;
        uint64_t *v16 = v15;
        uint64_t v19 = a1;
        uint64_t v20 = a1 + 1;
        uint64_t v21 = v15;
        if (v17 >= v18) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
LABEL_38:
      uint64_t v15 = v17;
      uint64_t v31 = *(a2 - 1);
      if (v31 >= v15) {
        return 1;
      }
LABEL_39:
      uint64_t *v16 = v31;
      *(a2 - 1) = v15;
      uint64_t v32 = *v14;
      uint64_t v33 = *v16;
      if (*v16 >= v32) {
        return 1;
      }
      a1[1] = v33;
      a1[2] = v32;
      uint64_t v34 = *a1;
      if (v33 >= *a1) {
        return 1;
      }
      *a1 = v33;
      a1[1] = v34;
      return 1;
    case 5:
      sub_3AB0B0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      uint64_t v4 = a1 + 2;
      uint64_t v3 = a1[2];
      uint64_t v5 = a1[1];
      uint64_t v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5) {
          goto LABEL_20;
        }
        a1[1] = v3;
        uint64_t *v4 = v5;
        int8x8_t v7 = a1;
        unint64_t v8 = a1 + 1;
      }
      else
      {
        int8x8_t v7 = a1;
        unint64_t v8 = a1 + 2;
        if (v3 < v5) {
          goto LABEL_19;
        }
        *a1 = v5;
        a1[1] = v6;
        int8x8_t v7 = a1 + 1;
        unint64_t v8 = a1 + 2;
      }
      if (v3 >= v6) {
        goto LABEL_20;
      }
LABEL_19:
      *int8x8_t v7 = v3;
      *unint64_t v8 = v6;
LABEL_20:
      uint64_t v22 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v23 = 0;
      for (uint64_t i = 24; ; i += 8)
      {
        uint64_t v25 = *v4;
        uint64_t v26 = *v22;
        if (*v22 < v25) {
          break;
        }
LABEL_23:
        uint64_t v4 = v22++;
        if (v22 == a2) {
          return 1;
        }
      }
      uint64_t v27 = i;
      do
      {
        *(uint64_t *)((char *)a1 + v27) = v25;
        uint64_t v28 = v27 - 8;
        if (v27 == 8)
        {
          *a1 = v26;
          if (++v23 != 8) {
            goto LABEL_23;
          }
          return v22 + 1 == a2;
        }
        uint64_t v25 = *(uint64_t *)((char *)a1 + v27 - 16);
        v27 -= 8;
      }
      while (v26 < v25);
      *(uint64_t *)((char *)a1 + v28) = v26;
      if (++v23 != 8) {
        goto LABEL_23;
      }
      return v22 + 1 == a2;
  }
}

uint64_t *sub_3AB0B0(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5 = *result;
  uint64_t v6 = *a2;
  uint64_t v7 = *a3;
  if (*a2 >= *result)
  {
    if (v7 >= v6)
    {
      uint64_t v6 = *a3;
      uint64_t v9 = *a4;
      if (*a4 >= v7) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
    *a2 = v7;
    *a3 = v6;
    uint64_t v8 = *result;
    if (*a2 < *result)
    {
      *__n128 result = *a2;
      *a2 = v8;
      uint64_t v6 = *a3;
      uint64_t v9 = *a4;
      if (*a4 >= *a3) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (v7 >= v6)
    {
      *__n128 result = v6;
      *a2 = v5;
      uint64_t v6 = *a3;
      if (*a3 >= v5) {
        goto LABEL_11;
      }
      *a2 = v6;
    }
    else
    {
      *__n128 result = v7;
    }
    *a3 = v5;
    uint64_t v6 = v5;
  }
LABEL_11:
  uint64_t v9 = *a4;
  if (*a4 >= v6) {
    goto LABEL_17;
  }
LABEL_14:
  *a3 = v9;
  *a4 = v6;
  uint64_t v10 = *a2;
  if (*a3 < *a2)
  {
    *a2 = *a3;
    *a3 = v10;
    uint64_t v11 = *result;
    if (*a2 < *result)
    {
      *__n128 result = *a2;
      *a2 = v11;
    }
  }
LABEL_17:
  uint64_t v12 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v12;
    uint64_t v13 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v13;
      uint64_t v14 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v14;
        uint64_t v15 = *result;
        if (*a2 < *result)
        {
          *__n128 result = *a2;
          *a2 = v15;
        }
      }
    }
  }
  return result;
}

char *sub_3AB1EC(char *a1, char *a2, char *a3)
{
  if (a1 == a2) {
    return a3;
  }
  uint64_t v3 = a2 - a1;
  uint64_t v4 = (a2 - a1) >> 3;
  if (a2 - a1 >= 9 && (unint64_t)v3 >= 0x10)
  {
    int64_t v33 = (unint64_t)(v4 - 2) >> 1;
    int64_t v34 = v33;
    do
    {
      if (v33 >= v34)
      {
        uint64_t v35 = (2 * v34) | 1;
        unint64_t v36 = &a1[8 * v35];
        if (2 * v34 + 2 >= v4)
        {
          uint64_t v37 = *(void *)v36;
          uint64_t v39 = &a1[8 * v34];
          uint64_t v40 = *(void *)v39;
          if (*(void *)v36 >= *(void *)v39) {
            goto LABEL_78;
          }
        }
        else
        {
          uint64_t v37 = *((void *)v36 + 1);
          BOOL v38 = *(void *)v36 < v37;
          if (*(void *)v36 > v37) {
            uint64_t v37 = *(void *)v36;
          }
          if (v38)
          {
            v36 += 8;
            uint64_t v35 = 2 * v34 + 2;
          }
          uint64_t v39 = &a1[8 * v34];
          uint64_t v40 = *(void *)v39;
          if (v37 >= *(void *)v39)
          {
LABEL_78:
            while (1)
            {
              *(void *)uint64_t v39 = v37;
              uint64_t v39 = v36;
              if (v33 < v35) {
                break;
              }
              uint64_t v42 = (2 * v35) | 1;
              unint64_t v36 = &a1[8 * v42];
              uint64_t v35 = 2 * v35 + 2;
              if (v35 < v4)
              {
                uint64_t v37 = *((void *)v36 + 1);
                BOOL v41 = *(void *)v36 < v37;
                if (*(void *)v36 > v37) {
                  uint64_t v37 = *(void *)v36;
                }
                if (v41) {
                  v36 += 8;
                }
                else {
                  uint64_t v35 = v42;
                }
                if (v37 < v40) {
                  break;
                }
              }
              else
              {
                uint64_t v37 = *(void *)v36;
                uint64_t v35 = v42;
                if (*(void *)v36 < v40) {
                  break;
                }
              }
            }
            *(void *)uint64_t v39 = v40;
          }
        }
      }
      BOOL v17 = v34-- <= 0;
    }
    while (!v17);
  }
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 16)
    {
      uint64_t v6 = *(void *)a1;
      uint64_t v7 = a2;
      do
      {
        uint64_t v8 = *(void *)v7;
        if (*(void *)v7 < v6)
        {
          *(void *)uint64_t v7 = v6;
          *(void *)a1 = v8;
          uint64_t v6 = v8;
        }
        v7 += 8;
      }
      while (v7 != a3);
LABEL_37:
      uint64_t v5 = a3;
      goto LABEL_38;
    }
    uint64_t v9 = (uint64_t *)(a1 + 8);
    uint64_t v10 = (uint64_t *)(a1 + 16);
    uint64_t v11 = a2;
    while (1)
    {
      uint64_t v12 = *(void *)v11;
      if (*(void *)v11 < *(void *)a1)
      {
        *(void *)uint64_t v11 = *(void *)a1;
        *(void *)a1 = v12;
        if (v3 == 16)
        {
          uint64_t v13 = *v9;
          uint64_t v14 = a1 + 8;
          uint64_t v15 = 1;
          if (*v9 >= v12) {
            goto LABEL_26;
          }
        }
        else
        {
          uint64_t v13 = *v9;
          if (*v9 <= *v10) {
            uint64_t v13 = *v10;
          }
          if (*v9 >= *v10) {
            uint64_t v14 = a1 + 8;
          }
          else {
            uint64_t v14 = a1 + 16;
          }
          if (*v9 >= *v10) {
            uint64_t v15 = 1;
          }
          else {
            uint64_t v15 = 2;
          }
          if (v13 >= v12)
          {
LABEL_26:
            BOOL v16 = a1;
            while (1)
            {
              *(void *)BOOL v16 = v13;
              BOOL v16 = v14;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v15) {
                break;
              }
              uint64_t v18 = (2 * v15) | 1;
              uint64_t v14 = &a1[8 * v18];
              uint64_t v15 = 2 * v15 + 2;
              if (v15 < v4)
              {
                uint64_t v13 = *((void *)v14 + 1);
                BOOL v17 = *(void *)v14 < v13;
                if (*(void *)v14 > v13) {
                  uint64_t v13 = *(void *)v14;
                }
                if (v17) {
                  v14 += 8;
                }
                else {
                  uint64_t v15 = v18;
                }
                if (v13 < v12) {
                  break;
                }
              }
              else
              {
                uint64_t v13 = *(void *)v14;
                uint64_t v15 = v18;
                if (*(void *)v14 < v12) {
                  break;
                }
              }
            }
            *(void *)BOOL v16 = v12;
          }
        }
      }
      v11 += 8;
      if (v11 == a3) {
        goto LABEL_37;
      }
    }
  }
LABEL_38:
  if (v3 >= 9)
  {
    uint64_t v19 = (unint64_t)v3 >> 3;
    do
    {
      uint64_t v20 = 0;
      uint64_t v21 = *(void *)a1;
      int64_t v22 = (unint64_t)(v19 - 2) >> 1;
      int v23 = a1;
      do
      {
        while (1)
        {
          uint64_t v26 = &v23[8 * v20 + 8];
          uint64_t v27 = (2 * v20) | 1;
          uint64_t v20 = 2 * v20 + 2;
          if (v20 < v19) {
            break;
          }
          uint64_t v20 = v27;
          *(void *)int v23 = *(void *)v26;
          int v23 = v26;
          if (v27 > v22) {
            goto LABEL_51;
          }
        }
        uint64_t v24 = *((void *)v26 + 1);
        BOOL v25 = *(void *)v26 < v24;
        if (*(void *)v26 > v24) {
          uint64_t v24 = *(void *)v26;
        }
        if (v25) {
          v26 += 8;
        }
        else {
          uint64_t v20 = v27;
        }
        *(void *)int v23 = v24;
        int v23 = v26;
      }
      while (v20 <= v22);
LABEL_51:
      a2 -= 8;
      if (v26 != a2)
      {
        *(void *)uint64_t v26 = *(void *)a2;
        *(void *)a2 = v21;
        uint64_t v28 = v26 - a1 + 8;
        if (v28 < 9) {
          goto LABEL_41;
        }
        unint64_t v29 = (((unint64_t)v28 >> 3) - 2) >> 1;
        uint64_t v30 = &a1[8 * v29];
        uint64_t v21 = *(void *)v26;
        uint64_t v31 = *(void *)v30;
        if (*(void *)v30 >= *(void *)v26) {
          goto LABEL_41;
        }
        do
        {
          *(void *)uint64_t v26 = v31;
          uint64_t v26 = v30;
          if (!v29) {
            break;
          }
          unint64_t v29 = (v29 - 1) >> 1;
          uint64_t v30 = &a1[8 * v29];
          uint64_t v31 = *(void *)v30;
        }
        while (*(void *)v30 < v21);
      }
      *(void *)uint64_t v26 = v21;
LABEL_41:
      BOOL v17 = v19-- <= 2;
    }
    while (!v17);
  }
  return v5;
}

uint64_t *sub_3AB558(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = (*a2 >> 30) & 0xFFFFFFFCLL | (*a2 << 32);
  uint64_t v4 = (*a2 >> 61) & 2 | (*a2 >> 63) | v3;
  unint64_t v5 = (0x2127599BF4325C37 * (v4 ^ (v3 >> 23))) ^ ((0x2127599BF4325C37 * (v4 ^ (v3 >> 23))) >> 47);
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  uint64_t v8 = *(uint64_t ***)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  __n128 result = *v8;
  if (*v8)
  {
    if (v6.u32[0] < 2uLL)
    {
      uint64_t v10 = *(void *)&v2 - 1;
      while (1)
      {
        uint64_t v12 = result[1];
        if (v5 == v12)
        {
          if (((4 * *((_DWORD *)result + 5)) | ((unint64_t)*((unsigned int *)result + 4) << 32) | ((unint64_t)*((unsigned int *)result + 5) >> 31) | ((unint64_t)*((unsigned int *)result + 5) >> 29) & 2) == v4) {
            return result;
          }
        }
        else if ((v12 & v10) != v7)
        {
          return 0;
        }
        __n128 result = (uint64_t *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v11 = result[1];
      if (v5 == v11)
      {
        if (((4 * *((_DWORD *)result + 5)) | ((unint64_t)*((unsigned int *)result + 4) << 32) | ((unint64_t)*((unsigned int *)result + 5) >> 31) | ((unint64_t)*((unsigned int *)result + 5) >> 29) & 2) == v4) {
          return result;
        }
      }
      else
      {
        if (v11 >= *(void *)&v2) {
          v11 %= *(void *)&v2;
        }
        if (v11 != v7) {
          return 0;
        }
      }
      __n128 result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t *sub_3AB69C(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = (*a2 >> 30) & 0xFFFFFFFCLL | (*a2 << 32);
  uint64_t v7 = (*a2 >> 61) & 2 | (*a2 >> 63) | v6;
  unint64_t v8 = (0x2127599BF4325C37 * (v7 ^ (v6 >> 23))) ^ ((0x2127599BF4325C37 * (v7 ^ (v6 >> 23))) >> 47);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = (0x2127599BF4325C37 * (v7 ^ (v6 >> 23))) ^ ((0x2127599BF4325C37 * (v7 ^ (v6 >> 23))) >> 47);
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = v12[1];
            if (v14 == v8)
            {
              if (((4 * *((_DWORD *)v12 + 5)) | ((unint64_t)*((unsigned int *)v12 + 4) << 32) | ((unint64_t)*((unsigned int *)v12 + 5) >> 31) | ((unint64_t)*((unsigned int *)v12 + 5) >> 29) & 2) == v7) {
                return v12;
              }
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint64_t v12 = (uint64_t *)*v12;
            if (!v12) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (((4 * *((_DWORD *)v12 + 5)) | ((unint64_t)*((unsigned int *)v12 + 4) << 32) | ((unint64_t)*((unsigned int *)v12 + 5) >> 31) | ((unint64_t)*((unsigned int *)v12 + 5) >> 29) & 2) == v7) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          uint64_t v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  BOOL v16 = operator new(0x18uLL);
  void *v16 = 0;
  v16[1] = v8;
  v16[2] = *a3;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (v9 && (float)(v18 * (float)v9) >= v17)
  {
    uint64_t v19 = *(void *)a1;
    uint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
    if (v20)
    {
LABEL_26:
      void *v16 = *v20;
LABEL_61:
      *uint64_t v20 = v16;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v17 / v18);
    if (v22 <= v23) {
      size_t prime = v23;
    }
    else {
      size_t prime = v22;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *(void *)(a1 + 8);
    }
    if (prime > v9) {
      goto LABEL_37;
    }
    if (prime < v9)
    {
      unint64_t v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        unint64_t v25 = std::__next_prime(v25);
      }
      else
      {
        uint64_t v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2) {
          unint64_t v25 = v27;
        }
      }
      if (prime <= v25) {
        size_t prime = v25;
      }
      if (prime < v9) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    unint64_t v28 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        unint64_t v3 = v8 % v9;
        uint64_t v19 = *(void *)a1;
        uint64_t v20 = *(void **)(*(void *)a1 + 8 * (v8 % v9));
        if (v20) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v8;
        uint64_t v19 = *(void *)a1;
        uint64_t v20 = *(void **)(*(void *)a1 + 8 * v8);
        if (v20) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v28 & v8;
      uint64_t v19 = *(void *)a1;
      uint64_t v20 = *(void **)(*(void *)a1 + 8 * (v28 & v8));
      if (v20) {
        goto LABEL_26;
      }
    }
  }
  void *v16 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v16;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v16)
  {
    unint64_t v29 = *(void *)(*v16 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v29 >= v9) {
        v29 %= v9;
      }
    }
    else
    {
      v29 &= v9 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v29);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_3ABA14(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_3ABA28(long long *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  sub_39ECCC((uint64_t)&v10, a1);
  sub_39ECCC((uint64_t)&v5, a2);
  sub_39ECCC(a3, &v10);
  sub_39ECCC(a3 + 72, &v5);
  if (__p)
  {
    unint64_t v9 = __p;
    operator delete(__p);
  }
  if (v6)
  {
    uint64_t v7 = v6;
    operator delete(v6);
  }
  if (v13)
  {
    uint64_t v14 = v13;
    operator delete(v13);
  }
  if (v11)
  {
    uint64_t v12 = v11;
    operator delete(v11);
  }
}

void sub_3ABAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_39EB70((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_3ABADC(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v13);
  size_t v6 = strlen(a1);
  sub_188FC78(v14, (uint64_t)a1, v6);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  sub_188FC78(v14, v8, v9);
  size_t v10 = strlen(a3);
  sub_188FC78(v14, (uint64_t)a3, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_3ABC9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_3ABCB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_3ABCC8()
{
}

void *sub_3ABCDC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_2438F78;
  result[1] = v3;
  return result;
}

uint64_t sub_3ABD24(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_2438F78;
  a2[1] = v2;
  return result;
}

BOOL sub_3ABD50(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(a2 + 88) | 4) != 6 || (*(unsigned char *)(a2 + 24) & 1) == 0) {
    return 0;
  }
  if (*(unsigned char *)(*(void *)(a1 + 8) + 5930)) {
    BOOL v3 = *(unsigned char *)(a2 + 272) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  return v3 || *(unsigned char *)(a2 + 312) != 0;
}

uint64_t sub_3ABDA4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing16ClosureAnalytics23check_metrics_relevanceERKNS_6common6VectorINS0_5RouteINS0_11Dri"
                     "vingModeEEENSt3__19allocatorIS6_EEEERNS7_13unordered_mapINS7_12basic_stringIcNS7_11char_traitsIcEEN"
                     "S8_IcEEEENS0_11ClosureInfoENS7_4hashISI_EENS7_8equal_toISI_EENS8_INS7_4pairIKSI_SJ_EEEEEEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl7routing16ClosureAnalytics23check_metrics_relevanceERKNS_6common6VectorINS0_5Rout"
                                "eINS0_11DrivingModeEEENSt3__19allocatorIS6_EEEERNS7_13unordered_mapINS7_12basic_stringIc"
                                "NS7_11char_traitsIcEENS8_IcEEEENS0_11ClosureInfoENS7_4hashISI_EENS7_8equal_toISI_EENS8_I"
                                "NS7_4pairIKSI_SJ_EEEEEEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing16ClosureAnalytics23check_metrics_relevanceERKNS_6common6VectorINS0_5RouteINS0_11DrivingModeEEENSt3__19allocatorIS6_EEEERNS7_13unordered_mapINS7_12basic_stringIcNS7_11char_traitsIcEENS8_IcEEEENS0_11ClosureInfoENS7_4hashISI_EENS7_8equal_toISI_EENS8_INS7_4pairIKSI_SJ_EEEEEEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing16ClosureAnalytics23check_metrics_relevanceERKNS_6common6VectorINS0_5RouteINS0_11DrivingModeEEENSt3__19allocatorIS6_EEEERNS7_13unordered_mapINS7_12basic_stringIcNS7_11char_traitsIcEENS8_IcEEEENS0_11ClosureInfoENS7_4hashISI_EENS7_8equal_toISI_EENS8_INS7_4pairIKSI_SJ_EEEEEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_3ABE14()
{
}

uint64_t *sub_3ABE20(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  size_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_B128((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      char v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          size_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            char v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          char v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  uint8x8_t v26 = operator new(0x30uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  *uint8x8_t v26 = 0;
  v26[1] = v11;
  uint64_t v27 = v26 + 2;
  unint64_t v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_4200(v27, *(void **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    v26[4] = *((void *)v28 + 2);
    *(_OWORD *)uint64_t v27 = v29;
  }
  v26[5] = 0;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        int64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * v11);
        int64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      int64_t v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *int64_t v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  uint64_t v32 = *(void **)(*(void *)a1 + 8 * v4);
  int64_t v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  *int64_t v33 = *v32;
  void *v32 = v45[0];
LABEL_92:
  char v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_3AC268(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_3AC27C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_3AC294()
{
  byte_255766F = 1;
  word_2557658 = 65;
  byte_2557687 = 1;
  word_2557670 = 65;
  char v1 = 7;
  strcpy((char *)v0, "UNKNOWN");
  int v2 = 0;
  char v4 = 14;
  strcpy((char *)v3, "ROUTES_THROUGH");
  int v5 = 1;
  char v7 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v8 = 3;
  char v10 = 11;
  strcpy((char *)v9, "ROUTES_FROM");
  int v11 = 2;
  xmmword_25576E8 = 0u;
  *(_OWORD *)&qword_25576F8 = 0u;
  dword_2557708 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25576E8, (uint64_t)v0, (uint64_t)v0);
  sub_3A6EF0((uint64_t)&xmmword_25576E8, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25576E8, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25576E8, (uint64_t)v9, (uint64_t)v9);
  if (v10 < 0)
  {
    operator delete(v9[0]);
    if ((v7 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v3[0]);
      if ((v1 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v0[0]);
      goto LABEL_5;
    }
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v4 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v1 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_255769F = 8;
  strcpy((char *)&qword_2557688, "any_mode");
  byte_25576B7 = 7;
  strcpy((char *)&dword_25576A0, "cycling");
  byte_25576CF = 7;
  strcpy((char *)&dword_25576B8, "driving");
  byte_25576E7 = 7;
  strcpy((char *)&dword_25576D0, "walking");
}

void sub_3AC4F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25576F8) {
    sub_20A7C08((void **)qword_25576F8);
  }
  uint64_t v37 = (void *)xmmword_25576E8;
  *(void *)&xmmword_25576E8 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

char *sub_3AC590(uint64_t a1, unint64_t a2)
{
  int v2 = HIDWORD(a2);
  if ((a2 & 0x8000000000000000) != 0)
  {
    uint64_t v7 = (a2 & 0xFFFFFFFFFFFFLL | (((a2 >> 62) & 1) << 48)) ^ 0x1000000000000;
    return sub_3AC808(a1, v7);
  }
  else
  {
    __n128 result = sub_2E5F98(a1, a2, 1);
    if (!result) {
      return result;
    }
    char v4 = &result[-*(int *)result];
    unsigned int v5 = *(unsigned __int16 *)v4;
    if ((v2 & 0x40000000) != 0)
    {
      if (v5 < 5) {
        return 0;
      }
      int v6 = *((unsigned __int16 *)v4 + 2);
      if (!v6) {
        return 0;
      }
    }
    else
    {
      if (v5 < 7) {
        return 0;
      }
      int v6 = *((unsigned __int16 *)v4 + 3);
      if (!v6) {
        return 0;
      }
    }
    int v8 = (unsigned int *)&result[v6 + *(unsigned int *)&result[v6]];
    if (*v8 <= (v2 & 0x3FFFFFFFu)) {
      return 0;
    }
    unint64_t v9 = (int *)((char *)v8 + 4 * v2 + *(unsigned int *)((char *)v8 + (4 * v2) + 4) + 4);
    char v10 = (unsigned __int16 *)((char *)v9 - *v9);
    if (*v10 < 7u) {
      return 0;
    }
    uint64_t v11 = v10[3];
    if (!v11) {
      return 0;
    }
    __n128 result = (char *)*(unsigned __int16 *)((char *)v9 + v11);
    if ((_WORD)result == 0xFFFF) {
      return 0;
    }
  }
  return result;
}

double sub_3AC684(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    return 0.0;
  }
  int v2 = HIDWORD(a2);
  char v4 = sub_2E5F98(a1, a2, 1);
  if (!v4) {
    return 0.0;
  }
  unsigned int v5 = &v4[-*(int *)v4];
  unsigned int v6 = *(unsigned __int16 *)v5;
  if ((v2 & 0x40000000) != 0)
  {
    if (v6 < 5) {
      return 0.0;
    }
    int v7 = *((unsigned __int16 *)v5 + 2);
    if (!v7) {
      return 0.0;
    }
  }
  else
  {
    if (v6 < 7) {
      return 0.0;
    }
    int v7 = *((unsigned __int16 *)v5 + 3);
    if (!v7) {
      return 0.0;
    }
  }
  int v8 = (unsigned int *)&v4[v7 + *(unsigned int *)&v4[v7]];
  if (*v8 <= (v2 & 0x3FFFFFFFu)) {
    return 0.0;
  }
  unint64_t v9 = (int *)((char *)v8 + 4 * v2 + *(unsigned int *)((char *)v8 + (4 * v2) + 4) + 4);
  char v10 = (unsigned __int16 *)((char *)v9 - *v9);
  unsigned int v11 = *v10;
  if (v11 >= 0xB && v10[5])
  {
    unsigned int v12 = *(unsigned __int16 *)((char *)v9 + v10[5]);
    unsigned int v13 = *(unsigned __int16 *)(a1 + 3880);
    if (!*(_WORD *)(a1 + 3880)) {
      goto LABEL_20;
    }
  }
  else
  {
    unsigned int v12 = 0xFFFF;
    unsigned int v13 = *(unsigned __int16 *)(a1 + 3880);
    if (!*(_WORD *)(a1 + 3880)) {
      goto LABEL_20;
    }
  }
  if (v11 >= 0x11)
  {
    uint64_t v15 = v10[8];
    if (v15)
    {
      char v16 = (unsigned int *)((char *)v9 + v15 + *(unsigned int *)((char *)v9 + v15));
      if (*v16 >= v13)
      {
        unsigned int v17 = *((unsigned __int16 *)v16 + v13 + 1);
        if ((unsigned __int16)(v17 + 1) > 1u)
        {
          double v18 = (double)v17;
          return v18 / 1000.0;
        }
      }
    }
  }
LABEL_20:
  if (v12 != 0xFFFF)
  {
    double v18 = (double)v12;
    return v18 / 1000.0;
  }
  return 0.3;
}

char *sub_3AC808(uint64_t a1, uint64_t a2)
{
  char v4 = sub_32A458(a1, a2);
  if (v4)
  {
    unsigned int v5 = &v4[-*(int *)v4];
    if (*(unsigned __int16 *)v5 >= 7u)
    {
      uint64_t v6 = *((unsigned __int16 *)v5 + 3);
      if (v6)
      {
        __n128 result = (char *)*(unsigned __int16 *)&v4[v6];
        if ((_WORD)result != 0xFFFF) {
          return result;
        }
      }
    }
    return 0;
  }
  __n128 result = sub_290DEC(a1, a2, 1);
  if (!result) {
    return result;
  }
  int v8 = &result[-*(int *)result];
  if (*(unsigned __int16 *)v8 < 5u) {
    return 0;
  }
  if (!*((_WORD *)v8 + 2)) {
    return 0;
  }
  unint64_t v9 = &result[*((unsigned __int16 *)v8 + 2) + *(unsigned int *)&result[*((unsigned __int16 *)v8 + 2)]];
  if (*(_DWORD *)v9 <= WORD2(a2)) {
    return 0;
  }
  char v10 = &v9[4 * WORD2(a2) + 4 + *(unsigned int *)&v9[4 * WORD2(a2) + 4]];
  unsigned int v11 = &v10[-*(int *)v10];
  unsigned int v12 = *(unsigned __int16 *)v11;
  if ((a2 & 0xFF000000000000) != 0)
  {
    if (v12 < 0xB) {
      return 0;
    }
    int v13 = *((unsigned __int16 *)v11 + 5);
    if (!v13) {
      return 0;
    }
    int v14 = 2;
  }
  else
  {
    if (v12 < 0xB) {
      return 0;
    }
    int v13 = *((unsigned __int16 *)v11 + 5);
    if (!v13) {
      return 0;
    }
    int v14 = 1;
  }
  if ((*(_DWORD *)&v10[v13] & v14) != 0) {
    return (unsigned char *)(&dword_8 + 2);
  }
  else {
    return 0;
  }
}

uint64_t sub_3AC920(uint64_t a1, void *a2, char a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = sub_3750CC(a2);
  sub_3C7EBC(a1 + 24, a2);
  uint64_t v8 = *(void *)a1;
  uint64_t v16 = 0;
  unsigned int v17 = operator new(0x19uLL);
  long long v18 = xmmword_20B9250;
  strcpy((char *)v17, "FineGrainedETAAnalytics");
  __p = 0;
  uint64_t v15 = 0;
  unint64_t v9 = sub_374CDC((uint64_t)a2, (uint64_t)&v17, (uint64_t *)&__p);
  sub_3ACA94(a1 + 112, v8, a4, v9);
  char v10 = (void **)__p;
  if (__p)
  {
    unsigned int v11 = v15;
    unsigned int v12 = __p;
    if (v15 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      unsigned int v12 = __p;
    }
    uint64_t v15 = v10;
    operator delete(v12);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17);
  }
  *(unsigned char *)(a1 + 128) = a3;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  return a1;
}

void sub_3ACA50(_Unwind_Exception *a1)
{
  sub_3AFE58(v1);
  _Unwind_Resume(a1);
}

void sub_3ACA64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_1A668((void **)&a9);
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_3AFE58(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_3ACA94(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  char v28 = 7;
  strcpy(__p, "enabled");
  BOOL v8 = sub_29D62C(a4, (uint64_t)__p);
  BOOL v9 = v8;
  if (v28 < 0)
  {
    operator delete(*(void **)__p);
    *(unsigned char *)a1 = v9;
    if (!sub_486CEC(a3)) {
      goto LABEL_23;
    }
  }
  else
  {
    *(unsigned char *)a1 = v8;
    if (!sub_486CEC(a3)) {
      goto LABEL_23;
    }
  }
  uint64_t v10 = sub_487750(a3);
  sub_3ACCB8(a2);
  if (v28 >= 0) {
    uint64_t v11 = v28;
  }
  else {
    uint64_t v11 = *(void *)&__p[8];
  }
  uint64_t v12 = *(unsigned __int8 *)(v10 + 23);
  int v13 = (char)v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *(void *)(v10 + 8);
  }
  if (v11 == v12)
  {
    if (v13 >= 0) {
      int v14 = (unsigned __int8 *)v10;
    }
    else {
      int v14 = *(unsigned __int8 **)v10;
    }
    if (v28 < 0)
    {
      uint64_t v24 = *(void **)__p;
      BOOL v23 = memcmp(*(const void **)__p, v14, *(size_t *)&__p[8]) == 0;
      goto LABEL_28;
    }
    if (v28)
    {
      uint64_t v15 = v28 - 1;
      uint64_t v16 = __p;
      do
      {
        int v18 = *v16++;
        int v17 = v18;
        int v20 = *v14++;
        int v19 = v20;
        BOOL v22 = v15-- != 0;
        BOOL v23 = v17 == v19;
      }
      while (v17 == v19 && v22);
      goto LABEL_25;
    }
LABEL_23:
    BOOL v23 = 1;
    goto LABEL_29;
  }
  BOOL v23 = 0;
LABEL_25:
  if ((v28 & 0x80) == 0) {
    goto LABEL_29;
  }
  uint64_t v24 = *(void **)__p;
LABEL_28:
  operator delete(v24);
LABEL_29:
  *(unsigned char *)(a1 + 1) = v23;
  char v28 = 19;
  strcpy(__p, "max_running_time_ms");
  int v25 = sub_31AC04(a4, (uint64_t)__p);
  if (v28 < 0) {
    operator delete(*(void **)__p);
  }
  *(_DWORD *)(a1 + 4) = v25;
  char v28 = 14;
  strcpy(__p, "max_distance_m");
  *(void *)(a1 + 8) = sub_5CDE0(a4, __p);
  if (v28 < 0) {
    operator delete(*(void **)__p);
  }
  return a1;
}

void sub_3ACC94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_3ACCB8(uint64_t a1)
{
  uint64_t v19 = 0;
  int v20 = operator new(0x19uLL);
  long long v21 = xmmword_20B9250;
  strcpy((char *)v20, "FineGrainedETAAnalytics");
  int v17 = 0;
  int v18 = 0;
  int v2 = sub_374CDC(a1, (uint64_t)&v20, (uint64_t *)&v17);
  char v16 = 15;
  uint64_t v14 = 0;
  strcpy((char *)v15, "CustomScenarios");
  __p = 0;
  int v13 = 0;
  unint64_t v3 = sub_374CDC(a1, (uint64_t)v15, (uint64_t *)&__p);
  sub_3ACED0((uint64_t)v2, (uint64_t)v3);
  char v4 = (void **)__p;
  if (__p)
  {
    unsigned int v5 = v13;
    uint64_t v6 = __p;
    if (v13 != __p)
    {
      do
      {
        if (*((char *)v5 - 1) < 0) {
          operator delete(*(v5 - 3));
        }
        v5 -= 3;
      }
      while (v5 != v4);
      uint64_t v6 = __p;
    }
    int v13 = v4;
    operator delete(v6);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  int v7 = (void **)v17;
  if (v17)
  {
    BOOL v8 = v18;
    BOOL v9 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      BOOL v9 = v17;
    }
    int v18 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(v20);
  }
  if ((v24 & 0x80u) == 0) {
    uint64_t v10 = (void **)&v22;
  }
  else {
    uint64_t v10 = v22;
  }
  if ((v24 & 0x80u) == 0) {
    CC_LONG v11 = v24;
  }
  else {
    CC_LONG v11 = v23;
  }
  sub_111E9DC(v10, v11);
  if ((char)v24 < 0) {
    operator delete(v22);
  }
}

void sub_3ACE78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (*(char *)(v27 - 33) < 0) {
    operator delete(*(void **)(v27 - 56));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3ACED0(uint64_t a1, uint64_t a2)
{
  sub_E1B4((uint64_t)v6);
  sub_58F84(v7, a1);
  sub_58F84(v7, a2);
  std::stringbuf::str();
  *(void *)((char *)v6
  v7[0] = v4;
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_3AD054(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_3AD068(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_3AD07C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = nullsub_1(*(void *)(a1 + 8));
  if (*(unsigned char *)(a1 + 112))
  {
    uint64_t v9 = result;
    uint64_t result = sub_37B378(*(void *)a1);
    if (result)
    {
      uint64_t result = sub_45FD6C(a2);
      if (result <= *(void *)(a1 + 120))
      {
        uint64_t result = sub_45FE1C((uint64_t)a2);
        if (result == 4)
        {
          if (!*(unsigned char *)(v9 + 128))
          {
            exception = __cxa_allocate_exception(8uLL);
            void *exception = &off_2439078;
          }
          uint64_t result = sub_491B10(v9);
          if (!result)
          {
            uint64_t v10 = sub_69510();
            if ((sub_6913C((uint64_t)v10) & 1) == 0 && sub_49433C(*(void *)(a1 + 8)) && *(unsigned char *)(a1 + 113))
            {
              sub_3AD3BC(a1, (uint64_t)a2, (uint64_t)v25);
              if (v25[0] != v25[1])
              {
                sub_3AD9B4((uint64_t *)v25, (uint64_t)&v23);
                CC_LONG v11 = v23;
                if (v23 != v24)
                {
                  *(_DWORD *)(a1 + 160) = (unint64_t)((char *)v24 - (char *)v23) >> 2;
                  uint64_t v12 = sub_486CEC(*(void *)(a1 + 8));
                  __p = 0;
                  long long v21 = 0;
                  uint64_t v22 = 0;
                  sub_3ADB14(v12, v9, (uint64_t *)&__p);
                  sub_725D0((uint64_t)v19);
                  sub_3ADC98(a1, (uint64_t)a2, &v23, (uint64_t *)v18);
                  *(double *)(a1 + 136) = sub_72688((uint64_t)v19);
                  if (v18[0] != v18[1])
                  {
                    sub_725A0((uint64_t)v19);
                    sub_3C1800();
                    sub_3CAFB4(&v16, *(void *)a1);
                    sub_3CAFB8(&v16, a2, (uint64_t *)v17, a3);
                    *(double *)(a1 + 144) = sub_72688((uint64_t)v19);
                    sub_725A0((uint64_t)v19);
                    sub_3AE10C((void **)a1, (uint64_t *)v18, (uint64_t **)v17, a4);
                    *(double *)(a1 + 152) = sub_72688((uint64_t)v19);
                    sub_3AE95C(v17);
                  }
                  sub_3AE9C4(v18);
                  if (__p)
                  {
                    long long v21 = __p;
                    operator delete(__p);
                  }
                  CC_LONG v11 = v23;
                }
                if (v11)
                {
                  unsigned __int8 v24 = v11;
                  operator delete(v11);
                }
              }
              return (uint64_t)sub_3AEA7C(v25);
            }
            else
            {
              *(_DWORD *)(a4 + 16) |= 1u;
              uint64_t result = *(void *)(a4 + 120);
              if (!result)
              {
                uint64_t v13 = *(void *)(a4 + 8);
                uint64_t v14 = (void *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
                if (v13) {
                  uint64_t v14 = (void *)*v14;
                }
                uint64_t result = sub_11D0C24((uint64_t)v14);
                *(void *)(a4 + 120) = result;
              }
              *(_DWORD *)(result + 16) |= 1u;
              *(unsigned char *)(result + 144) = 0;
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_3AD31C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  sub_3AE9C4(&a14);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v23 = *(void **)(v21 - 96);
    if (!v23)
    {
LABEL_3:
      sub_3AEA7C((void **)(v21 - 72));
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v23 = *(void **)(v21 - 96);
    if (!v23) {
      goto LABEL_3;
    }
  }
  *(void *)(v21 - 88) = v23;
  operator delete(v23);
  sub_3AEA7C((void **)(v21 - 72));
  _Unwind_Resume(a1);
}

void sub_3AD3BC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  if (!*(unsigned char *)(a1 + 112)) {
    return;
  }
  uint64_t v54 = sub_48776C(*(void *)(a1 + 8));
  int v55 = v6;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = sub_45FC70(a2);
  sub_2954EC(v7, *(void *)(v8 + 32), (uint64_t)__p);
  uint64_t v9 = __p[1];
  if (__p[1] == __p[2])
  {
    unint64_t v12 = 0xFFFFFFFF00000000;
    int v15 = 0x7FFFFFFF;
    uint64_t v13 = 0xFFFFFFFFLL;
    if (!__p[1]) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  unint64_t v10 = sub_2E40A4((uint64_t)__p);
  unsigned int v11 = v10;
  unint64_t v12 = v10 & 0xFFFFFFFF00000000;
  uint64_t v9 = __p[1];
  uint64_t v13 = v11;
  int v15 = v14;
  if (__p[1])
  {
LABEL_4:
    __p[2] = v9;
    operator delete(v9);
  }
LABEL_5:
  unint64_t v52 = v12 | v13;
  int v53 = v15;
  if (v54 != -1 && (v13 != 0xFFFFFFFFLL || v12 != 0xFFFFFFFF00000000))
  {
    uint64_t v16 = *(void *)a1;
    __p[0] = operator new(0x19uLL);
    *(_OWORD *)&__p[1] = xmmword_20B9250;
    strcpy((char *)__p[0], "FineGrainedETAAnalytics");
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    int v17 = sub_374CDC(v16, (uint64_t)__p, (uint64_t *)&v47);
    int v18 = (void **)v47;
    if (v47)
    {
      uint64_t v19 = v48;
      int v20 = v47;
      if (v48 != v47)
      {
        do
        {
          if (*((char *)v19 - 1) < 0) {
            operator delete(*(v19 - 3));
          }
          v19 -= 3;
        }
        while (v19 != v18);
        int v20 = v47;
      }
      uint64_t v48 = v18;
      operator delete(v20);
    }
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    HIBYTE(__p[2]) = 16;
    strcpy((char *)__p, "active_scenarios");
    uint64_t v21 = (uint64_t *)sub_5C4AC(v17, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v22 = *(void *)a1;
    HIBYTE(__p[2]) = 15;
    strcpy((char *)__p, "CustomScenarios");
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t v23 = sub_374CDC(v22, (uint64_t)__p, (uint64_t *)&v47);
    char v51 = 9;
    strcpy((char *)v50, "scenarios");
    unint64_t v43 = (void *)sub_560F4(v23, (uint64_t)v50);
    if (v51 < 0) {
      operator delete(v50[0]);
    }
    unsigned __int8 v24 = (void **)v47;
    if (v47)
    {
      int v25 = v48;
      uint8x8_t v26 = v47;
      if (v48 != v47)
      {
        do
        {
          if (*((char *)v25 - 1) < 0) {
            operator delete(*(v25 - 3));
          }
          v25 -= 3;
        }
        while (v25 != v24);
        uint8x8_t v26 = v47;
      }
      uint64_t v48 = v24;
      operator delete(v26);
    }
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    sub_3B5854((uint64_t)&v47, *(void *)a1);
    uint64_t v27 = *v21;
    uint64_t v28 = v21[1];
    if (*v21 != v28)
    {
      do
      {
        if (*(_DWORD *)(v27 + 8))
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_23FDF58;
        }
        uint64_t v29 = *(void *)v27;
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6920, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F6920))
        {
          dword_24F68A0 = 0;
          unk_24F68A8 = 0u;
          unk_24F68B8 = 0u;
          dword_24F68C8 = 1065353216;
          xmmword_24F68D0 = 0u;
          unk_24F68E0 = 0u;
          dword_24F68F0 = 1065353216;
          unk_24F68F8 = 0u;
          unk_24F6908 = 0u;
          dword_24F6918 = 1065353216;
          __cxa_guard_release(&qword_24F6920);
        }
        unsigned int v30 = sub_3AF004((uint64_t)&dword_24F68A0, v29);
        if (sub_3B5858(&v47, v30, &v54, &v52))
        {
          float v31 = sub_58070(v43, v29);
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6920, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_24F6920))
          {
            dword_24F68A0 = 0;
            unk_24F68A8 = 0u;
            unk_24F68B8 = 0u;
            dword_24F68C8 = 1065353216;
            xmmword_24F68D0 = 0u;
            unk_24F68E0 = 0u;
            dword_24F68F0 = 1065353216;
            unk_24F68F8 = 0u;
            unk_24F6908 = 0u;
            dword_24F6918 = 1065353216;
            __cxa_guard_release(&qword_24F6920);
          }
          sub_3AF1F4((uint64_t)&dword_24F68A0, (uint64_t)(v31 + 2), *(void *)a1);
          unint64_t v32 = *(void *)(a3 + 8);
          if (v32 >= *(void *)(a3 + 16))
          {
            unint64_t v35 = sub_3B2B64((void **)a3, (uint64_t *)__p);
            unint64_t v36 = v45[0];
            *(void *)(a3 + 8) = v35;
            if (v36)
            {
              v45[1] = v36;
              operator delete(v36);
            }
          }
          else
          {
            int64_t v33 = __p[0];
            __p[0] = 0;
            *(void *)unint64_t v32 = v33;
            BOOL v34 = __p[3];
            *(_OWORD *)(v32 + 8) = *(_OWORD *)&__p[1];
            *(void *)(v32 + 24) = v34;
            *(void *)(v32 + 32) = 0;
            *(void *)(v32 + 40) = 0;
            *(void *)(v32 + 48) = 0;
            *(_OWORD *)(v32 + 32) = *(_OWORD *)v45;
            *(void *)(v32 + 48) = v46;
            v45[0] = 0;
            v45[1] = 0;
            uint64_t v46 = 0;
            *(void *)(a3 + 8) = v32 + 56;
          }
          uint64_t v37 = __p[0];
          __p[0] = 0;
          if (v37) {
            (*(void (**)(void *))(*(void *)v37 + 8))(v37);
          }
        }
        v27 += 16;
      }
      while (v27 != v28);
    }
    int8x8_t v38 = v49;
    if (v49)
    {
      do
      {
        uint8x8_t v40 = (void *)*v38;
        uint64_t v41 = (void *)v38[3];
        if (v41)
        {
          v38[4] = v41;
          operator delete(v41);
        }
        operator delete(v38);
        int8x8_t v38 = v40;
      }
      while (v40);
    }
    unint64_t v39 = v47;
    uint64_t v47 = 0;
    if (v39) {
      operator delete(v39);
    }
  }
}

void sub_3AD8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  sub_3AEA7C(v31);
  _Unwind_Resume(a1);
}

void sub_3AD98C()
{
}

void *sub_3AD9B4@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 == v4)
  {
    int v6 = 0;
    unsigned int v5 = 0;
  }
  else
  {
    do
    {
      sub_3B2D3C((unint64_t *)a2, *(void **)(a2 + 8), *(char **)(v3 + 32), *(char **)(v3 + 40), (uint64_t)(*(void *)(v3 + 40) - *(void *)(v3 + 32)) >> 2);
      v3 += 56;
    }
    while (v3 != v4);
    unsigned int v5 = *(unsigned int **)a2;
    int v6 = *(char **)(a2 + 8);
  }
  unint64_t v7 = 126 - 2 * __clz((v6 - (char *)v5) >> 2);
  if (v6 == (char *)v5) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v7;
  }
  uint64_t result = sub_3B30E8(v5, v6, (uint64_t)&v18, v8, 1);
  unint64_t v10 = *(char **)(a2 + 8);
  if (*(char **)a2 != v10)
  {
    unsigned int v11 = (char *)(*(void *)a2 + 4);
    while (v11 != v10)
    {
      int v12 = *((_DWORD *)v11 - 1);
      int v13 = *(_DWORD *)v11;
      v11 += 4;
      if (v12 == v13)
      {
        int v14 = v11 - 8;
        while (v11 != v10)
        {
          int v15 = v12;
          int v12 = *(_DWORD *)v11;
          if (v15 != *(_DWORD *)v11)
          {
            *((_DWORD *)v14 + 1) = v12;
            v14 += 4;
          }
          v11 += 4;
        }
        uint64_t v16 = v14 + 4;
        int64_t v17 = v10 - (v14 + 4);
        if (v10 != v14 + 4)
        {
          if (v10 != (char *)v16 + v17) {
            uint64_t result = memmove(v14 + 4, (char *)v16 + v17, 0);
          }
          *(void *)(a2 + 8) = v16;
        }
        return result;
      }
    }
  }
  return result;
}

void sub_3ADAF4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_3ADB14(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_491B44(a2, &v23);
  uint64_t v4 = v23;
  uint64_t v22 = v24;
  if (v23 != v24)
  {
    while (1)
    {
      unsigned int v5 = *(_OWORD **)(v4 + 120);
      int v6 = *(_OWORD **)(v4 + 128);
      if (v5 != v6) {
        break;
      }
LABEL_3:
      v4 += 144;
      if (v4 == v22) {
        return;
      }
    }
    unint64_t v7 = (_OWORD *)a3[1];
    while (1)
    {
      unint64_t v10 = a3[2];
      if ((unint64_t)v7 >= v10) {
        break;
      }
      long long v8 = v5[1];
      *unint64_t v7 = *v5;
      v7[1] = v8;
      uint64_t v9 = v7 + 2;
LABEL_7:
      a3[1] = (uint64_t)v9;
      v5 += 2;
      unint64_t v7 = v9;
      if (v5 == v6) {
        goto LABEL_3;
      }
    }
    unsigned int v11 = (_OWORD *)*a3;
    uint64_t v12 = ((uint64_t)v7 - *a3) >> 5;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 59) {
      sub_2E00();
    }
    uint64_t v14 = v10 - (void)v11;
    if (v14 >> 4 > v13) {
      unint64_t v13 = v14 >> 4;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v15 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 59) {
        sub_188D718();
      }
      uint64_t v16 = (char *)operator new(32 * v15);
      long long v17 = v5[1];
      char v18 = &v16[32 * v12];
      *(_OWORD *)char v18 = *v5;
      *((_OWORD *)v18 + 1) = v17;
      uint64_t v19 = (uint64_t)v18;
      if (v7 == v11) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v16 = 0;
      long long v20 = v5[1];
      char v18 = (char *)(32 * v12);
      *(_OWORD *)char v18 = *v5;
      *((_OWORD *)v18 + 1) = v20;
      uint64_t v19 = 32 * v12;
      if (v7 == v11)
      {
LABEL_22:
        uint64_t v9 = v18 + 32;
        *a3 = v19;
        a3[1] = (uint64_t)(v18 + 32);
        a3[2] = (uint64_t)&v16[32 * v15];
        if (v7) {
          operator delete(v7);
        }
        goto LABEL_7;
      }
    }
    do
    {
      long long v21 = *(v7 - 1);
      *(_OWORD *)(v19 - 32) = *(v7 - 2);
      *(_OWORD *)(v19 - 16) = v21;
      v19 -= 32;
      v7 -= 2;
    }
    while (v7 != v11);
    unint64_t v7 = (_OWORD *)*a3;
    goto LABEL_22;
  }
}

void sub_3ADC98(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int **a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v7 = a4;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *(_DWORD *)(a1 + 164) = (unint64_t)((char *)a3[1] - (char *)*a3) >> 2;
  sub_725D0((uint64_t)v36);
  long long v8 = *a3;
  uint64_t v9 = a3[1];
  if (*a3 == v9) {
    return;
  }
  while (1)
  {
    unsigned int v10 = *v8;
    unsigned int v11 = (_DWORD *)sub_3C80E4(a1 + 24, *v8);
    sub_3C72F4(v11, *(void *)a1, a2, (uint64_t)&v27);
    unint64_t v12 = v7[1];
    if (v12 >= v7[2])
    {
      v7[1] = sub_3B1434(v7, (uint64_t)&v27);
      if (SHIBYTE(v35) < 0) {
        goto LABEL_12;
      }
    }
    else
    {
      *(_DWORD *)unint64_t v12 = v27;
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = 0;
      *(void *)(v12 + 24) = 0;
      sub_3B168C(v12 + 8, (uint64_t)v28, (uint64_t)v29, 0xF83E0F83E0F83E1 * ((v29 - (unsigned char *)v28) >> 5));
      *(_OWORD *)(v12 + 32) = v30;
      long long v13 = v31;
      long long v14 = v32;
      long long v15 = *(_OWORD *)v33;
      *(void *)(v12 + 93) = *(void *)&v33[13];
      *(_OWORD *)(v12 + 64) = v14;
      *(_OWORD *)(v12 + 80) = v15;
      *(_OWORD *)(v12 + 48) = v13;
      uint64_t v16 = (unsigned char *)(v12 + 104);
      if (SHIBYTE(v35) < 0)
      {
        sub_4200(v16, (void *)__p, *((unint64_t *)&__p + 1));
      }
      else
      {
        long long v17 = __p;
        *(void *)(v12 + 120) = v35;
        *(_OWORD *)uint64_t v16 = v17;
      }
      a4[1] = v12 + 128;
      unint64_t v7 = a4;
      a4[1] = v12 + 128;
      if (SHIBYTE(v35) < 0)
      {
LABEL_12:
        operator delete((void *)__p);
        char v18 = v28;
        if (!v28) {
          goto LABEL_17;
        }
        goto LABEL_13;
      }
    }
    char v18 = v28;
    if (!v28) {
      goto LABEL_17;
    }
LABEL_13:
    uint64_t v19 = (uint64_t)v29;
    long long v20 = v18;
    if (v29 != v18)
    {
      do
        uint64_t v19 = sub_3AFFFC(v19 - 1056);
      while ((unsigned char *)v19 != v18);
      long long v20 = v28;
    }
    uint64_t v29 = v18;
    operator delete(v20);
LABEL_17:
    --*(_DWORD *)(a1 + 164);
    if (v10 != **a3)
    {
      double v21 = sub_72688((uint64_t)v36);
      LODWORD(v22) = *(_DWORD *)(a1 + 116);
      if (v21 > (double)v22) {
        break;
      }
    }
    if (++v8 == v9) {
      return;
    }
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v27);
    sub_188FC78(&v27, (uint64_t)"Computation of stacked ETA experiments took longer than ", 56);
    uint64_t v23 = (void *)std::ostream::operator<<();
    sub_188FC78(v23, (uint64_t)" ms.", 4);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v25, 1u);
    if (v26 < 0) {
      operator delete(v25);
    }
    if ((v33[15] & 0x80000000) != 0) {
      operator delete(*((void **)&v32 + 1));
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
}

void sub_3AE014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a17);
    sub_3AE9C4(a10);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a17);
  sub_3AE9C4(a10);
  _Unwind_Resume(a1);
}

void sub_3AE088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
}

void sub_3AE09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (*v7) {
    sub_20A7C4C(v6);
  }
  *(void *)(a3 + 8) = v6;
  sub_3AEB20((uint64_t)va);
  sub_3AE9C4((void **)a3);
  _Unwind_Resume(a1);
}

void sub_3AE0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
}

void sub_3AE10C(void **a1, uint64_t *a2, uint64_t **a3, uint64_t a4)
{
  if (*a3 != a3[1])
  {
    uint64_t v7 = *a2;
    *(_DWORD *)(a4 + 16) |= 1u;
    uint64_t v8 = *(void *)(a4 + 120);
    if (!v8)
    {
      uint64_t v9 = *(void *)(a4 + 8);
      unsigned int v10 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
      if (v9) {
        unsigned int v10 = (void *)*v10;
      }
      uint64_t v8 = sub_11D0C24((uint64_t)v10);
      *(void *)(a4 + 120) = v8;
    }
    *(_DWORD *)(v8 + 16) |= 1u;
    *(unsigned char *)(v8 + 144) = 1;
    HIBYTE(v97) = 15;
    strcpy((char *)__p, "full_trajectory");
    sub_3C8DB4((uint64_t)v98, (uint64_t)__p, *a1);
    if (SHIBYTE(v97) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v94 = a2;
    uint64_t v11 = sub_3C80F8((uint64_t)(a1 + 3));
    unint64_t v12 = v11;
    __p[0] = 0;
    __p[1] = 0;
    unint64_t v97 = 0;
    if (v11)
    {
      if (v11 < 0) {
        sub_2E00();
      }
      unint64_t v13 = ((unint64_t)(v11 - 1) >> 6) + 1;
      __p[0] = operator new(8 * v13);
      __p[1] = 0;
      unint64_t v97 = v13;
      sub_43284(__p, v12, 0);
    }
    unint64_t v14 = sub_3C80F8((uint64_t)(a1 + 3));
    unint64_t v15 = v14;
    uint64_t v95 = 0;
    if (v14)
    {
      if (v14 >> 62) {
        sub_2E00();
      }
      uint64_t v95 = operator new(4 * v14);
      memset(v95, 255, 4 * v15);
    }
    uint64_t v16 = v94;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2557710, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_2557710))
    {
      xmmword_2557828 = 0u;
      unk_2557838 = 0u;
      xmmword_2557818 = 0u;
      byte_2557848 = 1;
      unk_2557849 = 0;
      byte_255784D = 1;
      unk_255784E = 0;
      unk_2557851 = 0;
      qword_2557860 = 0;
      unk_2557868 = 0;
      qword_2557858 = 0;
      dword_2557870 = -1;
      byte_2557874 = 0;
      qword_2557880 = 0;
      unk_2557888 = 0;
      qword_2557878 = 0;
      __cxa_guard_release(&qword_2557710);
    }
    long long v17 = *a3;
    uint64_t v90 = a3[1];
    if (*a3 != v90)
    {
      uint64_t v91 = (uint64_t *)(v8 + 24);
      uint64_t v89 = (void *)(v7 + 8);
      uint64_t v93 = v8;
      while (1)
      {
        char v18 = *(_DWORD **)(v8 + 40);
        if (v18 && (uint64_t v19 = *(int *)(v8 + 32), (int)v19 < *v18))
        {
          *(_DWORD *)(v8 + 32) = v19 + 1;
          uint64_t v20 = *(void *)&v18[2 * v19 + 2];
        }
        else
        {
          sub_11D0930(*v91);
          uint64_t v20 = sub_188CDC8((uint64_t)v91, v21);
        }
        sub_11CCF6C(v20, (uint64_t)(v17 + 7));
        uint64_t v22 = sub_45FB28(v89, v17[1]);
        unint64_t v24 = v17[2];
        unint64_t v23 = v17[3];
        if (v24 <= v23) {
          uint64_t v25 = v17[3];
        }
        else {
          uint64_t v25 = v17[2];
        }
        if (v24 < v23)
        {
          char v26 = (void *)v22;
          do
          {
            while (1)
            {
              *(_DWORD *)(v20 + 16) |= 4u;
              uint64_t v27 = *(void **)(v20 + 64);
              if (!v27)
              {
                uint64_t v28 = *(void *)(v20 + 8);
                uint64_t v29 = (void *)(v28 & 0xFFFFFFFFFFFFFFFCLL);
                if (v28) {
                  uint64_t v29 = (void *)*v29;
                }
                uint64_t v27 = sub_11D0890((uint64_t)v29);
                *(void *)(v20 + 64) = v27;
              }
              long long v30 = (int **)sub_46C8EC(v26, v24);
              long long v31 = (unsigned __int16 *)((char *)*v30 - **v30);
              if (*v31 >= 0x1Du && (uint64_t v32 = v31[14]) != 0) {
                uint64_t v33 = *(void *)((char *)*v30 + v32);
              }
              else {
                uint64_t v33 = 0;
              }
              uint64_t v34 = *((unsigned char *)v30 + 38) ? -v33 : v33;
              uint64_t v35 = *((unsigned int *)v27 + 6);
              unint64_t v36 = v27 + 3;
              if (v35 == *((_DWORD *)v27 + 7)) {
                break;
              }
              *(void *)(v27[4] + 8 * v35) = v34;
              _DWORD *v36 = v35 + 1;
              ++v24;
              uint64_t v16 = v94;
              if (v25 == v24) {
                goto LABEL_41;
              }
            }
            sub_188CA54((unsigned int *)v27 + 6, v35 + 1);
            *(void *)(v27[4] + 8 * v35) = v34;
            _DWORD *v36 = v35 + 1;
            ++v24;
            uint64_t v16 = v94;
          }
          while (v25 != v24);
        }
LABEL_41:
        uint64_t v37 = v17[21];
        int8x8_t v38 = *(_DWORD **)(v37 + 32);
        unint64_t v39 = *(_DWORD **)(v37 + 40);
        if (v38 != v39) {
          break;
        }
LABEL_17:
        v17 += 22;
        uint64_t v8 = v93;
        if (v17 == v90) {
          goto LABEL_86;
        }
      }
      while (1)
      {
        uint64_t v44 = *(_DWORD **)(v20 + 40);
        if (v44 && (uint64_t v45 = *(int *)(v20 + 32), (int)v45 < *v44))
        {
          *(_DWORD *)(v20 + 32) = v45 + 1;
          uint64_t v46 = *(void *)&v44[2 * v45 + 2];
          uint64_t v47 = *v38;
          uint64_t v48 = v95;
          int v49 = *((_DWORD *)v95 + v47);
          if (v49 != -1) {
            goto LABEL_61;
          }
        }
        else
        {
          int v50 = sub_11D0814(*(void *)(v20 + 24));
          uint64_t v46 = sub_188CDC8(v20 + 24, (uint64_t)v50);
          uint64_t v47 = *v38;
          uint64_t v48 = v95;
          int v49 = *((_DWORD *)v95 + v47);
          if (v49 != -1) {
            goto LABEL_61;
          }
        }
        v48[v47] = *(_DWORD *)(v93 + 80);
        int v49 = v48[*v38];
LABEL_61:
        int v51 = *(_DWORD *)(v46 + 16);
        *(_DWORD *)(v46 + 16) = v51 | 4;
        *(_DWORD *)(v46 + 36) = v49;
        uint64_t v52 = *v16;
        uint64_t v53 = v16[1];
        if (*v16 != v53)
        {
          while (*(_DWORD *)v52 != *v38)
          {
            v52 += 128;
            if (v52 == v53)
            {
              uint64_t v52 = v16[1];
              break;
            }
          }
        }
        *(_DWORD *)(v46 + 16) = v51 | 6;
        *(unsigned char *)(v46 + 32) = v52 != v53;
        unint64_t v54 = *v38;
        if ((*(void *)((char *)__p[0] + ((v54 >> 3) & 0x1FFFFFF8)) >> v54))
        {
          if (v52 != v53) {
            goto LABEL_72;
          }
        }
        else
        {
          if (v52 == v53) {
            int v55 = (uint64_t *)&xmmword_2557818;
          }
          else {
            int v55 = (uint64_t *)(v52 + 8);
          }
          sub_3AEBA4((uint64_t)a1, v54, v49, (uint64_t)v98, v55, v93);
          *(void *)((char *)__p[0] + (((unint64_t)*v38 >> 3) & 0x1FFFFFF8)) |= 1 << *v38;
          if (v52 != v53)
          {
LABEL_72:
            int v56 = (void *)sub_45FB28((void *)(v52 + 8), v17[1]);
            unint64_t v58 = v17[2];
            unint64_t v57 = v17[3];
            BOOL v59 = v58 >= v57;
            if (v58 > v57) {
              unint64_t v57 = v17[2];
            }
            if (v59)
            {
              int v66 = 0;
              int v65 = 0;
              int v64 = 0;
            }
            else
            {
              uint64_t v60 = v56[66];
              uint64_t v61 = v56[69];
              uint64_t v62 = v56[72];
              unint64_t v63 = v57 - v58;
              if (v57 - v58 < 8)
              {
                int v64 = 0;
                int v65 = 0;
                int v66 = 0;
                uint64_t v67 = v17[2];
                goto LABEL_81;
              }
              uint64_t v67 = v58 + (v63 & 0xFFFFFFFFFFFFFFF8);
              uint64_t v68 = 4 * v58;
              uint64_t v69 = (int32x4_t *)(v62 + 4 * v58 + 16);
              uint64_t v70 = (int32x4_t *)(v60 + v68 + 16);
              uint64_t v71 = (int32x4_t *)(v61 + v68 + 16);
              int32x4_t v72 = 0uLL;
              unint64_t v73 = v63 & 0xFFFFFFFFFFFFFFF8;
              int32x4_t v74 = 0uLL;
              int32x4_t v75 = 0uLL;
              int32x4_t v76 = 0uLL;
              int32x4_t v77 = 0uLL;
              int32x4_t v78 = 0uLL;
              do
              {
                int32x4_t v77 = vaddq_s32(v70[-1], v77);
                int32x4_t v78 = vaddq_s32(*v70, v78);
                int32x4_t v75 = vaddq_s32(v71[-1], v75);
                int32x4_t v76 = vaddq_s32(*v71, v76);
                int32x4_t v72 = vaddq_s32(v69[-1], v72);
                int32x4_t v74 = vaddq_s32(*v69, v74);
                v69 += 2;
                v70 += 2;
                v71 += 2;
                v73 -= 8;
              }
              while (v73);
              int v66 = vaddvq_s32(vaddq_s32(v78, v77));
              int v65 = vaddvq_s32(vaddq_s32(v76, v75));
              int v64 = vaddvq_s32(vaddq_s32(v74, v72));
              if (v63 != (v63 & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_81:
                int v79 = (int *)(v60 + 4 * v67);
                unsigned int v80 = (int *)(v61 + 4 * v67);
                unsigned int v81 = (int *)(v62 + 4 * v67);
                unint64_t v82 = v57 - v67;
                do
                {
                  int v84 = *v79++;
                  int v83 = v84;
                  int v85 = *v80++;
                  v66 += v83;
                  v65 += v85;
                  int v86 = *v81++;
                  v64 += v86;
                  --v82;
                }
                while (v82);
              }
            }
            *(_DWORD *)(v46 + 16) |= 1u;
            uint8x8_t v40 = *(_DWORD **)(v46 + 24);
            if (!v40)
            {
              uint64_t v87 = *(void *)(v46 + 8);
              uint64_t v88 = (void *)(v87 & 0xFFFFFFFFFFFFFFFCLL);
              if (v87) {
                uint64_t v88 = (void *)*v88;
              }
              uint8x8_t v40 = (_DWORD *)sub_13D84A8((uint64_t)v88);
              *(void *)(v46 + 24) = v40;
            }
            if (v66 < 0) {
              char v41 = -5;
            }
            else {
              char v41 = 5;
            }
            v40[4] |= 1u;
            v40[6] = v66 / 10
                   + (((103 * (char)(v41 + v66 % 10)) >> 15) & 1)
                   + ((103 * (char)(v41 + v66 % 10)) >> 10);
            *(_DWORD *)(v46 + 16) |= 1u;
            if (v65 < 0) {
              char v42 = -5;
            }
            else {
              char v42 = 5;
            }
            v40[4] |= 4u;
            v40[8] = v65 / 10
                   + (((103 * (char)(v42 + v65 % 10)) >> 15) & 1)
                   + ((103 * (char)(v42 + v65 % 10)) >> 10);
            *(_DWORD *)(v46 + 16) |= 1u;
            if (v64 < 0) {
              char v43 = -5;
            }
            else {
              char v43 = 5;
            }
            v40[4] |= 2u;
            v40[7] = v64 / 10
                   + (((103 * (char)(v43 + v64 % 10)) >> 15) & 1)
                   + ((103 * (char)(v43 + v64 % 10)) >> 10);
          }
        }
        if (++v38 == v39) {
          goto LABEL_17;
        }
      }
    }
LABEL_86:
    if (v95) {
      operator delete(v95);
    }
    if (__p[0]) {
      operator delete(__p[0]);
    }
    if (v99)
    {
      uint64_t v100 = v99;
      operator delete(v99);
    }
  }
}

void sub_3AE8A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v32 = a30;
    if (!a30) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v32 = a30;
    if (!a30) {
LABEL_6:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v32);
  goto LABEL_6;
}

void **sub_3AE95C(void **a1)
{
  int v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        unsigned int v5 = v3 - 176;
        sub_11CBC74(v3 - 120);
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_3AE9C4(void **a1)
{
  int v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    uint64_t v4 = *a1;
    if (v3 == v2)
    {
LABEL_14:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        unsigned int v5 = *(v3 - 15);
        if (v5)
        {
LABEL_10:
          uint64_t v6 = (uint64_t)*(v3 - 14);
          uint64_t v7 = v5;
          if ((void *)v6 != v5)
          {
            do
              uint64_t v6 = sub_3AFFFC(v6 - 1056);
            while ((void *)v6 != v5);
            uint64_t v7 = *(v3 - 15);
          }
          *(v3 - 14) = v5;
          operator delete(v7);
        }
      }
      else
      {
        unsigned int v5 = *(v3 - 15);
        if (v5) {
          goto LABEL_10;
        }
      }
      v3 -= 16;
      if (v3 == v2)
      {
        uint64_t v4 = *a1;
        goto LABEL_14;
      }
    }
  }
  return a1;
}

void **sub_3AEA7C(void **a1)
{
  int v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        unsigned int v5 = (void *)*((void *)v3 - 3);
        if (v5)
        {
          *((void *)v3 - 2) = v5;
          operator delete(v5);
        }
        uint64_t v6 = *((void *)v3 - 7);
        *((void *)v3 - 7) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
        v3 -= 56;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_3AEB20(uint64_t a1)
{
  if (*(char *)(a1 + 127) < 0)
  {
    operator delete(*(void **)(a1 + 104));
    int v2 = *(void **)(a1 + 8);
    if (!v2) {
      return a1;
    }
  }
  else
  {
    int v2 = *(void **)(a1 + 8);
    if (!v2) {
      return a1;
    }
  }
  uint64_t v4 = *(void *)(a1 + 16);
  unsigned int v5 = v2;
  if ((void *)v4 != v2)
  {
    do
      uint64_t v4 = sub_3AFFFC(v4 - 1056);
    while ((void *)v4 != v2);
    unsigned int v5 = *(void **)(a1 + 8);
  }
  *(void *)(a1 + 16) = v2;
  operator delete(v5);
  return a1;
}

void sub_3AEBA4(uint64_t a1, unsigned int a2, int a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  sub_3C80AC((void *)(a1 + 24), a2, (uint64_t)&__str);
  unsigned int v10 = *(_DWORD **)(a6 + 88);
  if (v10 && (uint64_t v11 = *(int *)(a6 + 80), (int)v11 < *v10))
  {
    *(_DWORD *)(a6 + 80) = v11 + 1;
    unint64_t v12 = *(std::string **)&v10[2 * v11 + 2];
  }
  else
  {
    unint64_t v13 = *(uint64_t **)(a6 + 72);
    if (!v13) {
      operator new();
    }
    void *v15 = v14;
    v15[1] = sub_3A6EDC;
    void *v14 = 0;
    v14[1] = 0;
    v14[2] = 0;
    unint64_t v12 = (std::string *)sub_188CDC8(a6 + 72, (uint64_t)v14);
  }
  std::string::operator=(v12, &__str);
  uint64_t v16 = *(_DWORD **)(a6 + 136);
  if (v16 && (uint64_t v17 = *(int *)(a6 + 128), (int)v17 < *v16))
  {
    *(_DWORD *)(a6 + 128) = v17 + 1;
    char v18 = *(std::string **)&v16[2 * v17 + 2];
    uint64_t v19 = *(_DWORD **)(a6 + 64);
    if (!v19) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v20 = sub_11D0B84(*(void *)(a6 + 120));
    char v18 = (std::string *)sub_188CDC8(a6 + 120, (uint64_t)v20);
    uint64_t v19 = *(_DWORD **)(a6 + 64);
    if (!v19) {
      goto LABEL_14;
    }
  }
  uint64_t v21 = *(int *)(a6 + 56);
  if ((int)v21 < *v19)
  {
    *(_DWORD *)(a6 + 56) = v21 + 1;
    uint64_t v22 = *(void *)&v19[2 * v21 + 2];
    goto LABEL_15;
  }
LABEL_14:
  unint64_t v23 = sub_11D0814(*(void *)(a6 + 48));
  uint64_t v22 = sub_188CDC8(a6 + 48, (uint64_t)v23);
LABEL_15:
  *(_DWORD *)(v22 + 16) |= 4u;
  *(_DWORD *)(v22 + 36) = a3;
  if (sub_45FB38(a5))
  {
    *(_DWORD *)(v22 + 16) |= 2u;
    *(unsigned char *)(v22 + 32) = 0;
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_17;
  }
  sub_3C99D8(a4, a5, &v39);
  if (v18 != (std::string *)&v39)
  {
    std::string::size_type size = v18->__r_.__value_.__l.__size_;
    if ((size & 2) != 0)
    {
      uint64_t v25 = 0;
    }
    else
    {
      uint64_t v25 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
      if (size) {
        uint64_t v25 = (void *)*v25;
      }
    }
    if ((v40 & 2) != 0)
    {
      char v26 = 0;
    }
    else
    {
      char v26 = (void *)(v40 & 0xFFFFFFFFFFFFFFFCLL);
      if (v40) {
        char v26 = (void *)*v26;
      }
    }
    if (v25 == v26) {
      sub_11CEE1C(v18, (uint64_t)&v39);
    }
    else {
      sub_11CEDC8(v18, (uint64_t)&v39);
    }
  }
  sub_11CE668(&v39);
  *(_DWORD *)(v22 + 16) |= 2u;
  *(unsigned char *)(v22 + 32) = 1;
  uint64_t v27 = nullsub_1(a5);
  uint64_t v28 = *(unsigned int **)v27;
  uint64_t v29 = *(unsigned int **)(v27 + 8);
  if (*(unsigned int **)v27 == v29)
  {
    int v32 = 0;
    int v31 = 0;
    int v30 = 0;
    *(_DWORD *)(v22 + 16) |= 1u;
    uint64_t v33 = *(_DWORD **)(v22 + 24);
    if (v33) {
      goto LABEL_40;
    }
  }
  else
  {
    int v30 = 0;
    int v31 = 0;
    int v32 = 0;
    do
    {
      v30 += sub_46E120(v28, 0);
      v31 += sub_46E120(v28, 1);
      v32 += sub_46E120(v28, 2);
      v28 += 264;
    }
    while (v28 != v29);
    *(_DWORD *)(v22 + 16) |= 1u;
    uint64_t v33 = *(_DWORD **)(v22 + 24);
    if (v33) {
      goto LABEL_40;
    }
  }
  uint64_t v34 = *(void *)(v22 + 8);
  uint64_t v35 = (void *)(v34 & 0xFFFFFFFFFFFFFFFCLL);
  if (v34) {
    uint64_t v35 = (void *)*v35;
  }
  uint64_t v33 = (_DWORD *)sub_13D84A8((uint64_t)v35);
  *(void *)(v22 + 24) = v33;
LABEL_40:
  if (v30 < 0) {
    char v36 = -5;
  }
  else {
    char v36 = 5;
  }
  v33[4] |= 1u;
  v33[6] = v30 / 10
         + (((103 * (char)(v36 + v30 % 10)) >> 15) & 1)
         + ((103 * (char)(v36 + v30 % 10)) >> 10);
  *(_DWORD *)(v22 + 16) |= 1u;
  if (v31 < 0) {
    char v37 = -5;
  }
  else {
    char v37 = 5;
  }
  v33[4] |= 4u;
  v33[8] = v31 / 10
         + (((103 * (char)(v37 + v31 % 10)) >> 15) & 1)
         + ((103 * (char)(v37 + v31 % 10)) >> 10);
  *(_DWORD *)(v22 + 16) |= 1u;
  if (v32 < 0) {
    char v38 = -5;
  }
  else {
    char v38 = 5;
  }
  v33[4] |= 2u;
  v33[7] = v32 / 10
         + (((103 * (char)(v38 + v32 % 10)) >> 15) & 1)
         + ((103 * (char)(v38 + v32 % 10)) >> 10);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
LABEL_17:
  }
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_3AEFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3AEFFC(uint64_t a1)
{
  return a1 + 136;
}

uint64_t sub_3AF004(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_3B0354((void *)(a1 + 48), a2);
  if (v3) {
    return *((unsigned int *)v3 + 10);
  }
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)v11);
    unsigned int v5 = sub_188FC78(v11, (uint64_t)"Invalid scenario name: ", 23);
    int v6 = *(char *)(a2 + 23);
    if (v6 >= 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = *(void *)a2;
    }
    if (v6 >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v8 = *(void *)(a2 + 8);
    }
    sub_188FC78(v5, v7, v8);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (v10 < 0) {
      operator delete(__p);
    }
    if (v12 < 0) {
      operator delete((void *)v11[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return 0xFFFFFFFFLL;
}

void sub_3AF1A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_3AF1F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = sub_3B0354((void *)(a1 + 48), a2);
  if (!v6)
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v25);
      unint64_t v13 = sub_188FC78(v25, (uint64_t)"Invalid scenario name: ", 23);
      int v14 = *(char *)(a2 + 23);
      if (v14 >= 0) {
        uint64_t v15 = a2;
      }
      else {
        uint64_t v15 = *(void *)a2;
      }
      if (v14 >= 0) {
        uint64_t v16 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v16 = *(void *)(a2 + 8);
      }
      sub_188FC78(v13, v15, v16);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v22, 3u);
      if (SHIBYTE(v24) < 0) {
        operator delete(v22);
      }
      if (v29 < 0) {
        operator delete(v28);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(_OWORD *)uint64_t v25 = 0u;
    long long v26 = 0u;
    int v27 = 1065353216;
    sub_3B092C();
  }
  uint64_t v7 = v6;
  BYTE7(v26) = 15;
  uint64_t v24 = 0;
  strcpy((char *)v25, "CustomScenarios");
  uint64_t v22 = 0;
  unint64_t v23 = 0;
  uint64_t v8 = sub_374CDC(a3, (uint64_t)v25, (uint64_t *)&v22);
  char v21 = 9;
  strcpy((char *)__p, "scenarios");
  uint64_t v9 = (void *)sub_560F4(v8, (uint64_t)__p);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  char v10 = (void **)v22;
  if (v22)
  {
    uint64_t v11 = v23;
    char v12 = v22;
    if (v23 != v22)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      char v12 = v22;
    }
    unint64_t v23 = v10;
    operator delete(v12);
  }
  if (SBYTE7(v26) < 0) {
    operator delete(v25[0]);
  }
  unsigned int v17 = *((_DWORD *)v7 + 10);
  if (*((_DWORD *)sub_58070(v9, a2) + 12) != 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_23FDF58;
  }
  return sub_3B0584(a1, v17, a3);
}

void sub_3AF560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a18);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_3AF5C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1A668(&a15);
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_3AF5FC(uint64_t *a1)
{
  int v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = (uint64_t)v2;
    operator delete(v2);
  }
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

char *sub_3AF660(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_2E5E08(a1, a2, 1);
  if (result)
  {
    unsigned int v5 = &result[-*(int *)result];
    if (*(unsigned __int16 *)v5 < 0xBu)
    {
      return 0;
    }
    else
    {
      if (!*((_WORD *)v5 + 5)) {
        return 0;
      }
      int v6 = &result[*((unsigned __int16 *)v5 + 5) + *(unsigned int *)&result[*((unsigned __int16 *)v5 + 5)]];
      if (*(_DWORD *)v6 <= WORD2(a2)) {
        return 0;
      }
      uint64_t v7 = &v6[8 * WORD2(a2)];
      int v8 = (a2 & 0xFF000000000000) != 0;
      unsigned int v9 = *((_DWORD *)v7 + 1);
      if (!v9) {
        return 0;
      }
      char v10 = v7[10];
      uint64_t v11 = *((unsigned __int16 *)v7 + 4);
      uint64_t result = sub_2E5F98(a1, v9, 1);
      if (result)
      {
        char v12 = &result[-*(int *)result];
        unsigned int v13 = *(unsigned __int16 *)v12;
        if (v8 != (v10 & 2) >> 1)
        {
          if (v13 < 5) {
            return 0;
          }
          int v14 = *((unsigned __int16 *)v12 + 2);
          if (!v14) {
            return 0;
          }
        }
        else
        {
          if (v13 < 7) {
            return 0;
          }
          int v14 = *((unsigned __int16 *)v12 + 3);
          if (!v14) {
            return 0;
          }
        }
        uint64_t v15 = &result[v14 + *(unsigned int *)&result[v14]];
        if (*(_DWORD *)v15 > v11) {
          return &v15[4 * v11 + 4 + *(unsigned int *)&v15[4 * v11 + 4]];
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_3AF78C(uint64_t a1, int *a2, int a3, uint64_t **a4)
{
  uint64_t v4 = (unsigned __int16 *)((char *)a2 - *a2);
  unsigned int v5 = *v4;
  if (v5 < 5) {
    return 0;
  }
  if (v4[2])
  {
    uint64_t result = (uint64_t)a2 + v4[2] + *(unsigned int *)((char *)a2 + v4[2]);
    if (v5 < 0xD) {
      return result;
    }
  }
  else
  {
    uint64_t result = 0;
    if (v5 < 0xD) {
      return result;
    }
  }
  uint64_t v8 = v4[6];
  if (v4[6])
  {
    uint64_t v9 = *(unsigned int *)((char *)a2 + v8);
    char v10 = (unsigned int *)((char *)a2 + v8 + v9);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = 4 * v11;
      if (a3)
      {
        unint64_t v13 = 0;
        while (1)
        {
          uint64_t v14 = *(unsigned int *)((char *)a2 + v8 + v9 + v13 + 4);
          uint64_t v15 = v14 - *(int *)((char *)&v10[v13 / 4 + 1] + v14);
          uint64_t v16 = (char *)&v10[v13 / 4] + v15;
          unsigned int v17 = *((unsigned __int16 *)v16 + 2);
          if (v17 >= 9)
          {
            uint64_t v18 = *((unsigned __int16 *)v16 + 6);
            if ((!v18 || !*((unsigned char *)&v10[v13 / 4 + 1] + v14 + v18))
              && v17 >= 0xB
              && *(_WORD *)((char *)&v10[v13 / 4 + 3] + v15 + 2)
              && *((unsigned __int8 *)&v10[v13 / 4 + 1]
                 + v14
                 + *(unsigned __int16 *)((char *)&v10[v13 / 4 + 3] + v15 + 2)) == a3
              && !*(unsigned int *)((char *)&v10[v13 / 4 + 1]
                                  + v14
                                  + *(unsigned __int16 *)((char *)&v10[v13 / 4 + 4] + v15)))
            {
              break;
            }
          }
          v13 += 4;
          if (v12 == v13) {
            goto LABEL_25;
          }
        }
        if (v12 != v13)
        {
          uint64_t v19 = *(unsigned int *)((char *)&a2[v13 / 4 + 1] + v8 + v9);
          uint64_t v20 = v19 - *(int *)((char *)&v10[v13 / 4 + 1] + v19);
          if (*(unsigned __int16 *)((char *)a2 + v8 + v9 + v13 + v20 + 4) >= 7u
            && (v21 = (char *)a2 + v8 + v9 + v13, (uint64_t v22 = *(unsigned __int16 *)&v21[v20 + 10]) != 0))
          {
            uint64_t result = (uint64_t)&v21[v19 + 4 + v22 + *(unsigned int *)&v21[v19 + 4 + v22]];
          }
          else
          {
            uint64_t result = 0;
          }
        }
      }
LABEL_25:
      int v23 = *(unsigned __int16 *)(a1 + 3872);
      if (!v23)
      {
        char v31 = 0;
        goto LABEL_64;
      }
      unint64_t v24 = 0;
      while (1)
      {
        uint64_t v25 = *(unsigned int *)((char *)a2 + v8 + v9 + v24 + 4);
        uint64_t v26 = v25 - *(int *)((char *)&v10[v24 / 4 + 1] + v25);
        int v27 = (char *)&v10[v24 / 4] + v26;
        if (*((unsigned __int16 *)v27 + 2) >= 9u)
        {
          uint64_t v28 = *((unsigned __int16 *)v27 + 6);
          if (v28) {
            LODWORD(v28) = *((unsigned __int8 *)&v10[v24 / 4 + 1] + v25 + v28);
          }
          if (v23 == v28)
          {
            char v29 = &v10[v24 / 4];
            int v30 = (char *)&v10[v24 / 4] + v26;
            if ((!*((_WORD *)v30 + 7) || !*((unsigned char *)v29 + v25 + *((unsigned __int16 *)v30 + 7) + 4))
              && !*(unsigned int *)((char *)v29 + v25 + *((unsigned __int16 *)v30 + 8) + 4))
            {
              break;
            }
          }
        }
        v24 += 4;
        if (v12 == v24) {
          goto LABEL_43;
        }
      }
      if (v12 == v24)
      {
LABEL_43:
        char v31 = 0;
        if (!a3) {
          goto LABEL_64;
        }
      }
      else
      {
        uint64_t v32 = *(unsigned int *)((char *)&a2[v24 / 4 + 1] + v8 + v9);
        uint64_t v33 = v32 - *(int *)((char *)&v10[v24 / 4 + 1] + v32);
        if (*(unsigned __int16 *)((char *)a2 + v8 + v9 + v24 + v33 + 4) >= 7u
          && (v34 = (char *)a2 + v8 + v9 + v24, (uint64_t v35 = *(unsigned __int16 *)&v34[v33 + 10]) != 0))
        {
          uint64_t result = (uint64_t)&v34[v32 + 4 + v35 + *(unsigned int *)&v34[v32 + 4 + v35]];
        }
        else
        {
          uint64_t result = 0;
        }
        char v31 = 1;
        if (!a3) {
          goto LABEL_64;
        }
      }
      unint64_t v36 = 0;
      while (1)
      {
        uint64_t v37 = *(unsigned int *)((char *)a2 + v8 + v9 + v36 + 4);
        uint64_t v38 = v37 - *(int *)((char *)&v10[v36 / 4 + 1] + v37);
        uint64_t v39 = (char *)&v10[v36 / 4] + v38;
        unsigned int v40 = *((unsigned __int16 *)v39 + 2);
        if (v40 >= 9)
        {
          uint64_t v41 = *((unsigned __int16 *)v39 + 6);
          if (v41) {
            LODWORD(v41) = *((unsigned __int8 *)&v10[v36 / 4 + 1] + v37 + v41);
          }
          if (v23 == v41
            && v40 >= 0xB
            && *(_WORD *)((char *)&v10[v36 / 4 + 3] + v38 + 2)
            && *((unsigned __int8 *)&v10[v36 / 4 + 1] + v37 + *(unsigned __int16 *)((char *)&v10[v36 / 4 + 3] + v38 + 2)) == a3
            && !*(unsigned int *)((char *)&v10[v36 / 4 + 1]
                                + v37
                                + *(unsigned __int16 *)((char *)&v10[v36 / 4 + 4] + v38)))
          {
            break;
          }
        }
        v36 += 4;
        if (v12 == v36) {
          goto LABEL_64;
        }
      }
      if (v12 != v36)
      {
        uint64_t v42 = *(unsigned int *)((char *)&a2[v36 / 4 + 1] + v8 + v9);
        uint64_t v43 = v42 - *(int *)((char *)&v10[v36 / 4 + 1] + v42);
        if (*(unsigned __int16 *)((char *)a2 + v8 + v9 + v36 + v43 + 4) >= 7u
          && (uint64_t v44 = (char *)a2 + v8 + v9 + v36, (v45 = *(unsigned __int16 *)&v44[v43 + 10]) != 0))
        {
          uint64_t result = (uint64_t)&v44[v42 + 4 + v45 + *(unsigned int *)&v44[v42 + 4 + v45]];
        }
        else
        {
          uint64_t result = 0;
        }
        char v31 = 1;
        uint64_t v46 = *a4;
        uint64_t v47 = a4[1];
        if (*a4 == v47) {
          return result;
        }
        goto LABEL_65;
      }
LABEL_64:
      uint64_t v46 = *a4;
      uint64_t v47 = a4[1];
      if (*a4 == v47) {
        return result;
      }
LABEL_65:
      uint64_t v48 = (char *)a2 + v8 + v9;
      do
      {
        unint64_t v49 = 0;
        uint64_t v50 = *v46;
        int v51 = (unsigned __int16)WORD2(*v46);
        while (1)
        {
          uint64_t v52 = *(unsigned int *)&v48[v49 + 4];
          uint64_t v53 = v52 - *(int *)((char *)&v10[v49 / 4 + 1] + v52);
          unint64_t v54 = (char *)&v10[v49 / 4] + v53;
          unsigned int v55 = *((unsigned __int16 *)v54 + 2);
          if (v55 < 9)
          {
            if (v23) {
              goto LABEL_68;
            }
          }
          else
          {
            uint64_t v56 = *((unsigned __int16 *)v54 + 6);
            if (v56) {
              LODWORD(v56) = *((unsigned __int8 *)&v10[v49 / 4 + 1] + v52 + v56);
            }
            if (v23 != v56) {
              goto LABEL_68;
            }
          }
          if (v55 < 0xD) {
            break;
          }
          unsigned __int16 v57 = *(_WORD *)((char *)&v10[v49 / 4 + 4] + v53);
          if (!v57) {
            break;
          }
          unint64_t v58 = (char *)&v10[v49 / 4] + v52 + v57;
          int v60 = *((_DWORD *)v58 + 1);
          BOOL v59 = v58 + 4;
          if (v60 == v50) {
            goto LABEL_80;
          }
LABEL_68:
          v49 += 4;
          if (v12 == v49) {
            goto LABEL_83;
          }
        }
        BOOL v59 = 0;
        if (v50 != -17958193) {
          goto LABEL_68;
        }
LABEL_80:
        if (*((unsigned __int16 *)v59 + 2) != v51 || ((v50 & 0x4000000000000000) == 0) == (v59[6] != 0)) {
          goto LABEL_68;
        }
        if (v12 != v49)
        {
          uint64_t v79 = v8 + v9;
          unsigned int v80 = (char *)&a2[v49 / 4] + v79;
          uint64_t v81 = *((unsigned int *)v80 + 1);
          unint64_t v82 = (char *)&v10[v49 / 4] + v81;
          uint64_t v83 = *((int *)v82 + 1);
          int32x4_t v75 = v82 + 4;
          uint64_t v84 = v81 - v83;
          if (*(unsigned __int16 *)&v80[v81 - v83 + 4] >= 7u)
          {
            int v78 = *(unsigned __int16 *)((char *)a2 + v79 + v49 + v84 + 10);
            if (v78) {
              return (uint64_t)&v75[v78 + *(unsigned int *)&v75[v78]];
            }
          }
          return 0;
        }
LABEL_83:
        if (v31) {
          goto LABEL_66;
        }
        unint64_t v61 = 0;
        while (2)
        {
          uint64_t v62 = *(unsigned int *)&v48[v61 + 4];
          uint64_t v63 = v62 - *(int *)((char *)&v10[v61 / 4 + 1] + v62);
          int v64 = (char *)&v10[v61 / 4] + v63;
          unsigned int v65 = *((unsigned __int16 *)v64 + 2);
          if (v65 >= 9)
          {
            uint64_t v66 = *((unsigned __int16 *)v64 + 6);
            if (v66 && *((unsigned char *)&v10[v61 / 4 + 1] + v62 + v66)) {
              goto LABEL_85;
            }
            if (v65 >= 0xD)
            {
              unsigned __int16 v67 = *(_WORD *)((char *)&v10[v61 / 4 + 4] + v63);
              if (v67)
              {
                uint64_t v68 = (char *)&v10[v61 / 4] + v62 + v67;
                int v70 = *((_DWORD *)v68 + 1);
                uint64_t v69 = v68 + 4;
                if (v70 == v50) {
                  goto LABEL_94;
                }
                goto LABEL_85;
              }
            }
          }
          uint64_t v69 = 0;
          if (v50 != -17958193) {
            goto LABEL_85;
          }
LABEL_94:
          if (*((unsigned __int16 *)v69 + 2) != v51 || ((v50 & 0x4000000000000000) == 0) == (v69[6] != 0))
          {
LABEL_85:
            v61 += 4;
            if (v12 == v61) {
              goto LABEL_66;
            }
            continue;
          }
          break;
        }
        if (v12 != v61)
        {
          uint64_t v71 = v8 + v9;
          int32x4_t v72 = (char *)&a2[v61 / 4] + v71;
          uint64_t v73 = *((unsigned int *)v72 + 1);
          int32x4_t v74 = (char *)&v10[v61 / 4] + v73;
          uint64_t v76 = *((int *)v74 + 1);
          int32x4_t v75 = v74 + 4;
          uint64_t v77 = v73 - v76;
          if (*(unsigned __int16 *)&v72[v73 - v76 + 4] < 7u) {
            return 0;
          }
          int v78 = *(unsigned __int16 *)((char *)a2 + v71 + v61 + v77 + 10);
          if (!v78) {
            return 0;
          }
          return (uint64_t)&v75[v78 + *(unsigned int *)&v75[v78]];
        }
LABEL_66:
        ++v46;
      }
      while (v46 != v47);
    }
  }
  return result;
}

uint64_t sub_3AFE58(uint64_t a1)
{
  uint64_t v9 = (void **)(a1 + 64);
  sub_3AFF24(&v9);
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v4 = *(void **)(a1 + 40);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 40);
    }
    *(void *)(a1 + 48) = v2;
    operator delete(v4);
  }
  unsigned int v5 = *(void ***)(a1 + 16);
  if (v5)
  {
    do
    {
      uint64_t v8 = (void **)*v5;
      if (*((char *)v5 + 39) < 0) {
        operator delete(v5[2]);
      }
      operator delete(v5);
      unsigned int v5 = v8;
    }
    while (v8);
  }
  int v6 = *(void **)a1;
  *(void *)a1 = 0;
  if (v6) {
    operator delete(v6);
  }
  return a1;
}

void sub_3AFF24(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unsigned int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int v6 = (char *)*((void *)v4 - 3);
        if (v6)
        {
          do
          {
            uint64_t v8 = *(char **)v6;
            sub_57AC8((uint64_t *)v6 + 5);
            if (v6[39] < 0) {
              operator delete(*((void **)v6 + 2));
            }
            operator delete(v6);
            int v6 = v8;
          }
          while (v8);
        }
        uint64_t v7 = (void *)*((void *)v4 - 5);
        *((void *)v4 - 5) = 0;
        if (v7) {
          operator delete(v7);
        }
        v4 -= 48;
      }
      while (v4 != v2);
      unsigned int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_3AFFFC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 1032);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 1040);
    uint64_t v4 = *(void **)(a1 + 1032);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *(void *)(v3 - 32);
        if (v6)
        {
          uint64_t v7 = *(void *)(v3 - 24);
          unsigned int v5 = *(void **)(v3 - 32);
          if (v7 != v6)
          {
            uint64_t v8 = *(void *)(v3 - 24);
            do
            {
              char v10 = *(void **)(v8 - 24);
              v8 -= 24;
              uint64_t v9 = v10;
              if (v10)
              {
                *(void *)(v7 - 16) = v9;
                operator delete(v9);
              }
              uint64_t v7 = v8;
            }
            while (v8 != v6);
            unsigned int v5 = *(void **)(v3 - 32);
          }
          *(void *)(v3 - 24) = v6;
          operator delete(v5);
        }
        v3 -= 64;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 1032);
    }
    *(void *)(a1 + 1040) = v2;
    operator delete(v4);
  }
  uint64_t v11 = *(void **)(a1 + 1008);
  if (v11)
  {
    *(void *)(a1 + 1016) = v11;
    operator delete(v11);
  }
  uint64_t v12 = *(void **)(a1 + 984);
  if (v12)
  {
    *(void *)(a1 + 992) = v12;
    operator delete(v12);
  }
  unint64_t v13 = *(void **)(a1 + 960);
  if (v13)
  {
    *(void *)(a1 + 968) = v13;
    operator delete(v13);
  }
  uint64_t v14 = *(void **)(a1 + 936);
  if (v14)
  {
    *(void *)(a1 + 944) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void **)(a1 + 912);
  if (v15)
  {
    *(void *)(a1 + 920) = v15;
    operator delete(v15);
  }
  uint64_t v16 = *(void **)(a1 + 888);
  if (v16)
  {
    *(void *)(a1 + 896) = v16;
    operator delete(v16);
  }
  unsigned int v17 = *(void **)(a1 + 864);
  if (v17)
  {
    *(void *)(a1 + 872) = v17;
    operator delete(v17);
  }
  sub_3B0290((void *)(a1 + 512));
  uint64_t v18 = *(void **)(a1 + 464);
  if (v18)
  {
    *(void *)(a1 + 472) = v18;
    operator delete(v18);
  }
  uint64_t v19 = *(void **)(a1 + 376);
  if (v19)
  {
    *(void *)(a1 + 384) = v19;
    operator delete(v19);
  }
  uint64_t v20 = *(void **)(a1 + 352);
  if (v20)
  {
    *(void *)(a1 + 360) = v20;
    operator delete(v20);
  }
  char v21 = *(void **)(a1 + 216);
  if (v21)
  {
    *(void *)(a1 + 224) = v21;
    operator delete(v21);
  }
  uint64_t v22 = *(void **)(a1 + 192);
  if (v22)
  {
    *(void *)(a1 + 200) = v22;
    operator delete(v22);
  }
  int v23 = *(void **)(a1 + 96);
  if (v23)
  {
    *(void *)(a1 + 104) = v23;
    operator delete(v23);
  }
  unint64_t v24 = *(void **)(a1 + 72);
  if (v24)
  {
    *(void *)(a1 + 80) = v24;
    operator delete(v24);
  }
  uint64_t v25 = *(void **)(a1 + 48);
  if (v25)
  {
    *(void *)(a1 + 56) = v25;
    operator delete(v25);
  }
  uint64_t v26 = *(void **)(a1 + 24);
  if (v26)
  {
    *(void *)(a1 + 32) = v26;
    operator delete(v26);
  }
  int v27 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v27;
    operator delete(v27);
  }
  return a1;
}

uint64_t sub_3B01C8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(void *)(a1 + 128) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(void *)(a1 + 104) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }
  unsigned int v5 = *(void **)(a1 + 48);
  if (v5)
  {
    *(void *)(a1 + 56) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(void *)(a1 + 32) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

void *sub_3B024C(void *a1)
{
  uint64_t v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  return a1;
}

void *sub_3B0290(void *a1)
{
  uint64_t v2 = (void *)a1[29];
  if (v2)
  {
    a1[30] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[26];
  if (v3)
  {
    a1[27] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[23];
  if (v4)
  {
    a1[24] = v4;
    operator delete(v4);
  }
  unsigned int v5 = (void *)a1[20];
  if (v5)
  {
    a1[21] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[17];
  if (v6)
  {
    a1[18] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[14];
  if (v7)
  {
    a1[15] = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)a1[11];
  if (v8)
  {
    a1[12] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)a1[8];
  if (v9)
  {
    a1[9] = v9;
    operator delete(v9);
  }
  char v10 = (void *)a1[5];
  if (v10)
  {
    a1[6] = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)a1[2];
  if (v11)
  {
    a1[3] = v11;
    operator delete(v11);
  }
  return a1;
}

uint64_t *sub_3B0354(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    unint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          unint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        unint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_3B0584(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    goto LABEL_21;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = a2;
    if (v4 <= a2) {
      unint64_t v6 = a2 % v4;
    }
  }
  else
  {
    unint64_t v6 = (v4 - 1) & a2;
  }
  int8x8_t v7 = *(uint64_t ***)(*(void *)(a1 + 8) + 8 * v6);
  if (!v7 || (unint64_t v8 = *v7) == 0)
  {
LABEL_21:
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v18);
      uint64_t v12 = sub_188FC78(v18, (uint64_t)"Invalid scenario id: ", 21);
      std::to_string(&v17, a2);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v13 = &v17;
      }
      else {
        unint64_t v13 = (std::string *)v17.__r_.__value_.__r.__words[0];
      }
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v17.__r_.__value_.__l.__size_;
      }
      sub_188FC78(v12, (uint64_t)v13, size);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v17.__r_.__value_.__l.__data_);
      }
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v17, 3u);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v17.__r_.__value_.__l.__data_);
      }
      if (v22 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(_OWORD *)uint64_t v18 = 0u;
    long long v19 = 0u;
    int v20 = 1065353216;
    sub_3B092C();
  }
  if (v5.u32[0] < 2uLL)
  {
    unint64_t v9 = v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == a2)
      {
        if (*((_DWORD *)v8 + 4) == a2) {
          goto LABEL_36;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_21;
      }
      unint64_t v8 = (uint64_t *)*v8;
      if (!v8) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == a2) {
      break;
    }
    if (v10 >= v4) {
      v10 %= v4;
    }
    if (v10 != v6) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v8 = (uint64_t *)*v8;
    if (!v8) {
      goto LABEL_21;
    }
  }
  if (*((_DWORD *)v8 + 4) != a2) {
    goto LABEL_11;
  }
LABEL_36:
  uint64_t v15 = (uint64_t (*)(uint64_t))v8[3];

  return v15(a3);
}

void sub_3B08B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_3B0918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_5450C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_3B092C()
{
}

void sub_3B0C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v18 = *v15;
  if (*v15)
  {
    v14[5] = (uint64_t)v18;
    operator delete(v18);
    uint64_t v16 = *v14;
    uint64_t *v14 = 0;
    if (v16)
    {
LABEL_6:
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    uint64_t v16 = *v14;
    uint64_t *v14 = 0;
    if (v16) {
      goto LABEL_6;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_3B0CC4()
{
}

uint64_t sub_3B0CD8()
{
  return 1;
}

void sub_3B0CE4()
{
}

uint64_t sub_3B0D2C()
{
  return 0;
}

void *sub_3B0D34(void *a1, void *a2)
{
  char v21 = 17;
  strcpy(__p, "upstream_distance");
  uint64_t v19 = 0;
  unint64_t v4 = sub_58070(a2, (uint64_t)__p);
  if (v4)
  {
    uint8x8_t v5 = (double *)(v4 + 5);
    if (*((_DWORD *)v4 + 12) != 1) {
      uint8x8_t v5 = (double *)&v19;
    }
    double v6 = *v5 * 100.0;
    if (v6 < 0.0) {
      goto LABEL_5;
    }
  }
  else
  {
    double v6 = 0.0 * 100.0;
    if (0.0 * 100.0 < 0.0)
    {
LABEL_5:
      double v7 = v6;
      if (v6 <= -4.50359963e15) {
        goto LABEL_13;
      }
      uint64_t v8 = (uint64_t)(v6 + v6);
      if (v8 >= 1) {
        --v8;
      }
      goto LABEL_12;
    }
  }
  double v7 = v6;
  if (v6 >= 4.50359963e15) {
    goto LABEL_13;
  }
  uint64_t v8 = (uint64_t)(v6 + v6) + 1;
LABEL_12:
  double v7 = (double)(v8 >> 1);
LABEL_13:
  if (v7 < 9.22337204e18)
  {
    if (v6 >= 0.0)
    {
      if (v6 >= 4.50359963e15) {
        goto LABEL_24;
      }
      uint64_t v9 = (uint64_t)(v6 + v6) + 1;
    }
    else
    {
      if (v6 <= -4.50359963e15) {
        goto LABEL_24;
      }
      uint64_t v9 = (uint64_t)(v6 + v6);
      if (v9 >= 1) {
        --v9;
      }
    }
    double v6 = (double)(v9 >> 1);
LABEL_24:
    *a1 = (uint64_t)v6;
    if ((v21 & 0x80000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  *a1 = 0x7FFFFFFFFFFFFFFELL;
  if ((v21 & 0x80000000) == 0) {
    goto LABEL_26;
  }
LABEL_25:
  operator delete(*(void **)__p);
LABEL_26:
  char v21 = 19;
  strcpy(__p, "downstream_distance");
  uint64_t v19 = 0;
  unint64_t v10 = sub_58070(a2, (uint64_t)__p);
  if (!v10)
  {
    unint64_t v13 = a1 + 1;
    double v12 = 0.0;
LABEL_37:
    char v16 = 0;
    if ((double)(((uint64_t)(v12 + v12) + 1) >> 1) < 9.22337204e18) {
      goto LABEL_43;
    }
    goto LABEL_40;
  }
  uint64_t v11 = (double *)(v10 + 5);
  if (*((_DWORD *)v10 + 12) != 1) {
    uint64_t v11 = (double *)&v19;
  }
  double v12 = *v11 * 100.0;
  unint64_t v13 = a1 + 1;
  if (v12 >= 0.0)
  {
    if (v12 >= 4.50359963e15)
    {
      char v16 = 0;
      if (v12 < 9.22337204e18) {
        goto LABEL_43;
      }
      goto LABEL_40;
    }
    goto LABEL_37;
  }
  if (v12 <= -4.50359963e15)
  {
    char v16 = 1;
    if (v12 < 9.22337204e18) {
      goto LABEL_43;
    }
  }
  else
  {
    uint64_t v14 = (uint64_t)(v12 + v12);
    if (v14 >= 1) {
      --v14;
    }
    double v15 = (double)(v14 >> 1);
    char v16 = 1;
    if (v15 < 9.22337204e18)
    {
LABEL_43:
      if (v16)
      {
        if (v12 <= -4.50359963e15) {
          goto LABEL_51;
        }
        uint64_t v17 = (uint64_t)(v12 + v12);
        if (v17 >= 1) {
          --v17;
        }
      }
      else
      {
        if (v12 >= 4.50359963e15) {
          goto LABEL_51;
        }
        uint64_t v17 = (uint64_t)(v12 + v12) + 1;
      }
      double v12 = (double)(v17 >> 1);
LABEL_51:
      *unint64_t v13 = (uint64_t)v12;
      if ((v21 & 0x80000000) == 0) {
        return a1;
      }
      goto LABEL_53;
    }
  }
LABEL_40:
  *unint64_t v13 = 0x7FFFFFFFFFFFFFFELL;
  if ((v21 & 0x80000000) == 0) {
    return a1;
  }
LABEL_53:
  operator delete(*(void **)__p);
  return a1;
}

void sub_3B1068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_3B1088(void **a1, unsigned char *a2, _DWORD *a3)
{
  unint64_t v6 = (unint64_t)*a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (unsigned char *)*a1;
  uint64_t v8 = v7 >> 2;
  uint64_t v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_DWORD *)uint64_t v9 = *a3;
      a1[1] = v9 + 4;
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 4);
    uint64_t v12 = v11 >> 2;
    unint64_t v13 = (int *)(v5 - 4);
    if (v5 < 4)
    {
      uint64_t v19 = a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v11;
      double v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 4;
      if (v5 > v16) {
        unint64_t v16 = (unint64_t)a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x2C)
      {
        uint64_t v19 = a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        uint64_t v19 = a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 2) + 1;
          uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v13 = (int *)((char *)v13 + v21);
          uint64_t v19 = (_DWORD *)(v5 + v21);
          char v22 = (_OWORD *)(v5 + 16);
          uint64_t v23 = (long long *)(4 * v12 + 4 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *char v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 8;
          }
          while (v24);
          if (v20 == (v20 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        int v55 = *v13++;
        *v19++ = v55;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = v19;
    if ((char *)v5 != v9 + 4) {
      memmove((void *)(v5 - 4 * v12), v9, v11);
    }
    *(_DWORD *)uint64_t v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 2) + 1;
  if (v26 >> 62) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 1 > v26) {
    unint64_t v26 = v28 >> 1;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 62) {
      sub_188D718();
    }
    int v30 = (char *)operator new(4 * v29);
    char v31 = &v30[4 * v8];
    uint64_t v32 = &v30[4 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    int v30 = 0;
    char v31 = (char *)(4 * v8);
    uint64_t v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((unsigned char *)v6 == a2) {
      unint64_t v52 = 1;
    }
    else {
      unint64_t v52 = v7 >> 1;
    }
    if (v52 >> 62) {
      sub_188D718();
    }
    uint64_t v53 = (char *)operator new(4 * v52);
    char v31 = &v53[v52 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v32 = &v53[4 * v52];
    if (v30)
    {
      unint64_t v54 = &v53[4 * v52];
      operator delete(v30);
      uint64_t v32 = v54;
      uint64_t v34 = (char *)*a1;
      *(_DWORD *)char v31 = *a3;
      uint64_t v35 = v31 + 4;
      unint64_t v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 4 * (v33 >> 1);
  }
LABEL_28:
  uint64_t v34 = (char *)v6;
  *(_DWORD *)char v31 = *a3;
  uint64_t v35 = v31 + 4;
  unint64_t v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    uint64_t v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6);
    unint64_t v38 = v37 - v34 - 4;
    uint64_t v39 = v9;
    unint64_t v36 = v31;
    if (v38 < 0x2C) {
      goto LABEL_59;
    }
    uint64_t v39 = v9;
    unint64_t v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 2) + 1;
    uint64_t v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v39 = &v9[-v41];
    unint64_t v36 = &v31[-v41];
    uint64_t v42 = v31 - 16;
    uint64_t v43 = (long long *)(v6 + 4 * v8 - 16);
    uint64_t v44 = v40 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)uint64_t v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 8;
    }
    while (v44);
    if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_59:
      do
      {
        int v46 = *((_DWORD *)v39 - 1);
        v39 -= 4;
        *((_DWORD *)v36 - 1) = v46;
        v36 -= 4;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  uint64_t v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    unint64_t v49 = v9;
    size_t v50 = v47 - v9;
    int v51 = v32;
    memmove(v35, v49, v50);
    uint64_t v32 = v51;
    uint64_t v34 = (char *)*a1;
  }
  *a1 = v36;
  a1[1] = &v35[v48];
  a1[2] = v32;
  if (v34) {
    operator delete(v34);
  }
  return v31;
}

void sub_3B13E0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_3B13FC(std::exception *a1)
{
  std::exception::~exception(a1);

  operator delete();
}

uint64_t sub_3B1434(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 7;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 57) {
    sub_2E00();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 6 > v4) {
    unint64_t v4 = v6 >> 6;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFF80) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  uint64_t v20 = a1 + 2;
  if (v7)
  {
    if (v7 >> 57) {
      sub_188D718();
    }
    uint64_t v8 = (char *)operator new(v7 << 7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  long long __p = v8;
  unint64_t v17 = &v8[128 * v3];
  uint64_t v19 = &v8[128 * v7];
  sub_3B15AC((uint64_t)(a1 + 2), (uint64_t)v17, a2);
  unint64_t v18 = v17 + 128;
  sub_3B2904(a1, &__p);
  uint64_t v9 = a1[1];
  uint64_t v10 = (uint64_t)v17;
  while (1)
  {
    int64_t v11 = v18;
    if (v18 == (char *)v10) {
      break;
    }
    v18 -= 128;
    if (*(v11 - 1) < 0)
    {
      operator delete(*((void **)v11 - 3));
      uint64_t v12 = (void *)*((void *)v11 - 15);
      if (v12)
      {
LABEL_18:
        uint64_t v13 = *((void *)v11 - 14);
        unint64_t v14 = v12;
        if ((void *)v13 != v12)
        {
          do
            uint64_t v13 = sub_3AFFFC(v13 - 1056);
          while ((void *)v13 != v12);
          unint64_t v14 = (void *)*((void *)v11 - 15);
        }
        *((void *)v11 - 14) = v12;
        operator delete(v14);
      }
    }
    else
    {
      uint64_t v12 = (void *)*((void *)v11 - 15);
      if (v12) {
        goto LABEL_18;
      }
    }
  }
  if (__p) {
    operator delete(__p);
  }
  return v9;
}

void sub_3B1598(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3B29D8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_3B15AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  sub_3B168C(a2 + 8, *(void *)(a3 + 8), *(void *)(a3 + 16), 0xF83E0F83E0F83E1 * ((uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 5));
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
  long long v5 = *(_OWORD *)(a3 + 48);
  long long v6 = *(_OWORD *)(a3 + 64);
  long long v7 = *(_OWORD *)(a3 + 80);
  *(void *)(a2 + 93) = *(void *)(a3 + 93);
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 48) = v5;
  uint64_t result = (unsigned char *)(a2 + 104);
  if (*(char *)(a3 + 127) < 0) {
    return sub_4200(result, *(void **)(a3 + 104), *(void *)(a3 + 112));
  }
  long long v9 = *(_OWORD *)(a3 + 104);
  *(void *)(a2 + 120) = *(void *)(a3 + 120);
  *(_OWORD *)uint64_t result = v9;
  return result;
}

void sub_3B166C(_Unwind_Exception *exception_object)
{
  if (*v2) {
    sub_20A7C9C(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3B168C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = (void *)result;
    if (a4 >= 0x3E0F83E0F83E10) {
      sub_2E00();
    }
    uint64_t result = (uint64_t)operator new(1056 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = result + 1056 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = sub_3B181C(v8 + v9, a2 + v9);
        v9 += 1056;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_3B1750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_3B1764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 1056)
    sub_3AFFFC(v10 - 1056 + v11);
  *(void *)(v9 + 8) = v10;
  sub_3B1794(&a9);
  _Unwind_Resume(a1);
}

void ***sub_3B1794(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      long long v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          uint64_t v4 = sub_3AFFFC(v4 - 1056);
        while ((void *)v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_3B181C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  long long v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v6 >> 3) >= 0x666666666666667) {
      sub_2E00();
    }
    long long v7 = (char *)operator new(v6);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a1 + 8) = v8;
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v10 = *(unsigned char **)(a2 + 24);
  uint64_t v9 = *(unsigned char **)(a2 + 32);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v11 >> 3)) >= 0x492492492492493) {
      sub_2E00();
    }
    uint64_t v12 = (char *)operator new(v11);
    *(void *)(a1 + 24) = v12;
    *(void *)(a1 + 32) = v12;
    uint64_t v13 = &v12[8 * (v11 >> 3)];
    *(void *)(a1 + 40) = v13;
    memcpy(v12, v10, v11 - 7);
    *(void *)(a1 + 32) = v13;
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  double v15 = *(unsigned char **)(a2 + 48);
  unint64_t v14 = *(unsigned char **)(a2 + 56);
  int64_t v16 = v14 - v15;
  if (v14 != v15)
  {
    if (v16 < 0) {
      sub_2E00();
    }
    unint64_t v17 = (char *)operator new(v14 - v15);
    *(void *)(a1 + 48) = v17;
    *(void *)(a1 + 56) = v17;
    unint64_t v18 = &v17[8 * (v16 >> 3)];
    *(void *)(a1 + 64) = v18;
    memcpy(v17, v15, v16);
    *(void *)(a1 + 56) = v18;
  }
  sub_3B1C7C((void *)(a1 + 72), a2 + 72);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  sub_3B1DC8(a1 + 152, (long long *)(a2 + 152));
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  sub_3B1DC8(a1 + 312, (long long *)(a2 + 312));
  uint64_t v19 = *(void *)(a2 + 448);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  *(void *)(a1 + 448) = v19;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 464) = 0;
  uint64_t v21 = *(unsigned char **)(a2 + 464);
  uint64_t v20 = *(unsigned char **)(a2 + 472);
  int64_t v22 = v20 - v21;
  if (v20 != v21)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v22 >> 2) >= 0x1555555555555556) {
      sub_2E00();
    }
    uint64_t v23 = (char *)operator new(v22);
    *(void *)(a1 + 464) = v23;
    *(void *)(a1 + 472) = v23;
    uint64_t v24 = &v23[4 * (v22 >> 2)];
    *(void *)(a1 + 480) = v24;
    memcpy(v23, v21, v22);
    *(void *)(a1 + 472) = v24;
  }
  uint64_t v25 = *(void *)(a2 + 488);
  *(_DWORD *)(a1 + 496) = *(_DWORD *)(a2 + 496);
  *(void *)(a1 + 488) = v25;
  *(void *)(a1 + 504) = *(void *)(a2 + 504);
  sub_3B1F44(a1 + 512, (uint64_t *)(a2 + 512));
  long long v26 = *(_OWORD *)(a2 + 800);
  long long v27 = *(_OWORD *)(a2 + 816);
  long long v28 = *(_OWORD *)(a2 + 848);
  *(_OWORD *)(a1 + 832) = *(_OWORD *)(a2 + 832);
  *(_OWORD *)(a1 + 848) = v28;
  *(_OWORD *)(a1 + 800) = v26;
  *(_OWORD *)(a1 + 816) = v27;
  sub_3B2460((void *)(a1 + 864), a2 + 864);
  *(void *)(a1 + 1024) = 0;
  *(_OWORD *)(a1 + 1008) = 0u;
  unint64_t v29 = *(unsigned char **)(a2 + 1008);
  int v30 = *(unsigned char **)(a2 + 1016);
  int64_t v31 = v30 - v29;
  if (v30 != v29)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v31 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t v32 = (char *)operator new(v31);
    *(void *)(a1 + 1008) = v32;
    *(void *)(a1 + 1016) = v32;
    unint64_t v33 = &v32[8 * (v31 >> 3)];
    *(void *)(a1 + 1024) = v33;
    memcpy(v32, v29, v31 - 4);
    *(void *)(a1 + 1016) = v33;
  }
  *(void *)(a1 + 1048) = 0;
  *(_OWORD *)(a1 + 1032) = 0u;
  sub_3B271C((void *)(a1 + 1032), *(void *)(a2 + 1032), *(void *)(a2 + 1040), (uint64_t)(*(void *)(a2 + 1040) - *(void *)(a2 + 1032)) >> 6);
  return a1;
}

void sub_3B1B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void *a10, void **a11, uint64_t a12)
{
  uint64_t v19 = *a9;
  if (*a9)
  {
    *(void *)(v12 + 1016) = v19;
    operator delete(v19);
  }
  sub_3B01C8(v17);
  sub_3B0290(v16);
  uint64_t v20 = *a11;
  if (*a11)
  {
    *(void *)(v12 + 472) = v20;
    operator delete(v20);
  }
  sub_3B024C(a10);
  sub_3B024C(v15);
  sub_3310C(a12);
  uint64_t v21 = *v14;
  if (*v14)
  {
    *(void *)(v12 + 56) = v21;
    operator delete(v21);
  }
  int64_t v22 = *v13;
  if (*v13)
  {
    *(void *)(v12 + 32) = v22;
    operator delete(v22);
    uint64_t v23 = *(void **)v12;
    if (!*(void *)v12) {
LABEL_10:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    uint64_t v23 = *(void **)v12;
    if (!*(void *)v12) {
      goto LABEL_10;
    }
  }
  *(void *)(v12 + 8) = v23;
  operator delete(v23);
  goto LABEL_10;
}

void sub_3B1C6C()
{
  if (!*v0) {
    JUMPOUT(0x3B1C50);
  }
  JUMPOUT(0x3B1C48);
}

void *sub_3B1C7C(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  long long v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v6 >> 4) >= 0x555555555555556) {
      sub_2E00();
    }
    long long v7 = (char *)operator new(v6);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[16 * (v6 >> 4)];
    size_t v8 = 48 * ((v6 - 48) / 0x30uLL) + 48;
    memcpy(v7, v5, v8);
    a1[1] = &v7[v8];
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  uint64_t v10 = *(unsigned char **)(a2 + 24);
  uint64_t v9 = *(unsigned char **)(a2 + 32);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0) {
      sub_2E00();
    }
    uint64_t v12 = (char *)operator new(v9 - v10);
    a1[3] = v12;
    a1[4] = v12;
    uint64_t v13 = &v12[8 * (v11 >> 3)];
    a1[5] = v13;
    memcpy(v12, v10, v11);
    a1[4] = v13;
  }
  return a1;
}

void sub_3B1D94(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  long long v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3B1DC8(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  long long v7 = (unsigned char *)*((void *)a2 + 5);
  int64_t v6 = (unsigned char *)*((void *)a2 + 6);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 2) > 0x1555555555555555) {
      sub_2E00();
    }
    uint64_t v9 = (char *)operator new(v8);
    *(void *)(a1 + 40) = v9;
    *(void *)(a1 + 48) = v9;
    uint64_t v10 = &v9[4 * (v8 >> 2)];
    *(void *)(a1 + 56) = v10;
    memcpy(v9, v7, v8 - 3);
    *(void *)(a1 + 48) = v10;
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  uint64_t v12 = (unsigned char *)*((void *)a2 + 8);
  int64_t v11 = (unsigned char *)*((void *)a2 + 9);
  int64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v13 >> 2) > 0x1555555555555555) {
      sub_2E00();
    }
    unint64_t v14 = (char *)operator new(v13);
    *(void *)(a1 + 64) = v14;
    *(void *)(a1 + 72) = v14;
    double v15 = &v14[4 * (v13 >> 2)];
    *(void *)(a1 + 80) = v15;
    memcpy(v14, v12, v13 - 3);
    *(void *)(a1 + 72) = v15;
  }
  *(_OWORD *)(a1 + 88) = *(long long *)((char *)a2 + 88);
  *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
  if (*((_DWORD *)a2 + 28) <= 1u) {
    *(void *)(a1 + 104) = *((void *)a2 + 13);
  }
  *(_OWORD *)(a1 + 120) = *(long long *)((char *)a2 + 120);
  return a1;
}

void sub_3B1F10(_Unwind_Exception *exception_object)
{
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 72) = v5;
    operator delete(v5);
  }
  int64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3B1F44(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = v4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  int64_t v6 = (unsigned char *)a2[2];
  long long v5 = (unsigned char *)a2[3];
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    int64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = &v8[4 * (v7 >> 2)];
    *(void *)(a1 + 32) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 24) = v9;
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  int64_t v11 = (unsigned char *)a2[5];
  uint64_t v10 = (unsigned char *)a2[6];
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      sub_2E00();
    }
    int64_t v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v13;
    unint64_t v14 = &v13[4 * (v12 >> 2)];
    *(void *)(a1 + 56) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 48) = v14;
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  int64_t v16 = (unsigned char *)a2[8];
  double v15 = (unsigned char *)a2[9];
  int64_t v17 = v15 - v16;
  if (v15 != v16)
  {
    if (v17 < 0) {
      sub_2E00();
    }
    unint64_t v18 = (char *)operator new(v15 - v16);
    *(void *)(a1 + 64) = v18;
    *(void *)(a1 + 72) = v18;
    uint64_t v19 = &v18[4 * (v17 >> 2)];
    *(void *)(a1 + 80) = v19;
    memcpy(v18, v16, v17);
    *(void *)(a1 + 72) = v19;
  }
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  uint64_t v21 = (unsigned char *)a2[11];
  uint64_t v20 = (unsigned char *)a2[12];
  int64_t v22 = v20 - v21;
  if (v20 != v21)
  {
    if (v22 < 0) {
      sub_2E00();
    }
    uint64_t v23 = (char *)operator new(v20 - v21);
    *(void *)(a1 + 88) = v23;
    *(void *)(a1 + 96) = v23;
    uint64_t v24 = &v23[4 * (v22 >> 2)];
    *(void *)(a1 + 104) = v24;
    memcpy(v23, v21, v22);
    *(void *)(a1 + 96) = v24;
  }
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  long long v26 = (unsigned char *)a2[14];
  uint64_t v25 = (unsigned char *)a2[15];
  int64_t v27 = v25 - v26;
  if (v25 != v26)
  {
    if (v27 < 0) {
      sub_2E00();
    }
    long long v28 = (char *)operator new(v25 - v26);
    *(void *)(a1 + 112) = v28;
    *(void *)(a1 + 120) = v28;
    unint64_t v29 = &v28[4 * (v27 >> 2)];
    *(void *)(a1 + 128) = v29;
    memcpy(v28, v26, v27);
    *(void *)(a1 + 120) = v29;
  }
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  int64_t v31 = (unsigned char *)a2[17];
  int v30 = (unsigned char *)a2[18];
  int64_t v32 = v30 - v31;
  if (v30 != v31)
  {
    if (v32 < 0) {
      sub_2E00();
    }
    unint64_t v33 = (char *)operator new(v30 - v31);
    *(void *)(a1 + 136) = v33;
    *(void *)(a1 + 144) = v33;
    uint64_t v34 = &v33[4 * (v32 >> 2)];
    *(void *)(a1 + 152) = v34;
    memcpy(v33, v31, v32);
    *(void *)(a1 + 144) = v34;
  }
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  unint64_t v36 = (unsigned char *)a2[20];
  uint64_t v35 = (unsigned char *)a2[21];
  int64_t v37 = v35 - v36;
  if (v35 != v36)
  {
    if (v37 < 0) {
      sub_2E00();
    }
    unint64_t v38 = (char *)operator new(v35 - v36);
    *(void *)(a1 + 160) = v38;
    *(void *)(a1 + 168) = v38;
    uint64_t v39 = &v38[4 * (v37 >> 2)];
    *(void *)(a1 + 176) = v39;
    memcpy(v38, v36, v37);
    *(void *)(a1 + 168) = v39;
  }
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  uint64_t v41 = (unsigned char *)a2[23];
  uint64_t v40 = (unsigned char *)a2[24];
  int64_t v42 = v40 - v41;
  if (v40 != v41)
  {
    if (v42 < 0) {
      sub_2E00();
    }
    uint64_t v43 = (char *)operator new(v40 - v41);
    *(void *)(a1 + 184) = v43;
    *(void *)(a1 + 192) = v43;
    uint64_t v44 = &v43[4 * (v42 >> 2)];
    *(void *)(a1 + 200) = v44;
    memcpy(v43, v41, v42);
    *(void *)(a1 + 192) = v44;
  }
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  int v46 = (unsigned char *)a2[26];
  long long v45 = (unsigned char *)a2[27];
  int64_t v47 = v45 - v46;
  if (v45 != v46)
  {
    if (v47 < 0) {
      sub_2E00();
    }
    int64_t v48 = (char *)operator new(v45 - v46);
    *(void *)(a1 + 208) = v48;
    *(void *)(a1 + 216) = v48;
    unint64_t v49 = &v48[4 * (v47 >> 2)];
    *(void *)(a1 + 224) = v49;
    memcpy(v48, v46, v47);
    *(void *)(a1 + 216) = v49;
  }
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  int v51 = (unsigned char *)a2[29];
  size_t v50 = (unsigned char *)a2[30];
  int64_t v52 = v50 - v51;
  if (v50 != v51)
  {
    if (v52 < 0) {
      sub_2E00();
    }
    uint64_t v53 = (char *)operator new(v50 - v51);
    *(void *)(a1 + 232) = v53;
    *(void *)(a1 + 240) = v53;
    unint64_t v54 = &v53[4 * (v52 >> 2)];
    *(void *)(a1 + 248) = v54;
    memcpy(v53, v51, v52);
    *(void *)(a1 + 240) = v54;
  }
  long long v55 = *((_OWORD *)a2 + 17);
  *(_OWORD *)(a1 + 256) = *((_OWORD *)a2 + 16);
  *(_OWORD *)(a1 + 272) = v55;
  return a1;
}

void sub_3B22DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, void **a11, void **a12)
{
  uint64_t v20 = *v12;
  if (*v12)
  {
    v14[30] = v20;
    operator delete(v20);
    uint64_t v21 = *v13;
    if (!*v13)
    {
LABEL_3:
      int64_t v22 = *v18;
      if (!*v18) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v21 = *v13;
    if (!*v13) {
      goto LABEL_3;
    }
  }
  v14[27] = v21;
  operator delete(v21);
  int64_t v22 = *v18;
  if (!*v18)
  {
LABEL_4:
    uint64_t v23 = *v17;
    if (!*v17) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  v14[24] = v22;
  operator delete(v22);
  uint64_t v23 = *v17;
  if (!*v17)
  {
LABEL_5:
    uint64_t v24 = *v16;
    if (!*v16) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  v14[21] = v23;
  operator delete(v23);
  uint64_t v24 = *v16;
  if (!*v16)
  {
LABEL_6:
    uint64_t v25 = *v15;
    if (!*v15) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  v14[18] = v24;
  operator delete(v24);
  uint64_t v25 = *v15;
  if (!*v15)
  {
LABEL_7:
    long long v26 = *a9;
    if (!*a9) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_21:
  v14[15] = v25;
  operator delete(v25);
  long long v26 = *a9;
  if (!*a9)
  {
LABEL_9:
    int64_t v27 = *a10;
    if (*a10)
    {
      v14[9] = v27;
      operator delete(v27);
    }
    long long v28 = *a11;
    if (*a11)
    {
      v14[6] = v28;
      operator delete(v28);
    }
    unint64_t v29 = *a12;
    if (*a12)
    {
      v14[3] = v29;
      operator delete(v29);
    }
    _Unwind_Resume(exception_object);
  }
LABEL_8:
  v14[12] = v26;
  operator delete(v26);
  goto LABEL_9;
}

void sub_3B2420()
{
  if (!*v0) {
    JUMPOUT(0x3B2324);
  }
  JUMPOUT(0x3B231CLL);
}

void sub_3B2430()
{
  if (!*v0) {
    JUMPOUT(0x3B2338);
  }
  JUMPOUT(0x3B2330);
}

void sub_3B2440()
{
  if (!*v0) {
    JUMPOUT(0x3B234CLL);
  }
  JUMPOUT(0x3B2344);
}

void sub_3B2450()
{
  if (!*v0) {
    JUMPOUT(0x3B2360);
  }
  JUMPOUT(0x3B2358);
}

void *sub_3B2460(void *a1, uint64_t a2)
{
  a1[1] = 0;
  *a1 = 0;
  a1[2] = 0;
  long long v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      goto LABEL_20;
    }
    int64_t v7 = (char *)operator new(v4 - *(void *)a2);
    *a1 = v7;
    a1[1] = v7;
    int64_t v8 = &v7[32 * (v6 >> 5)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  uint64_t v10 = *(unsigned char **)(a2 + 24);
  uint64_t v9 = *(unsigned char **)(a2 + 32);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0) {
      goto LABEL_20;
    }
    int64_t v12 = (char *)operator new(v9 - v10);
    a1[3] = v12;
    a1[4] = v12;
    int64_t v13 = &v12[32 * (v11 >> 5)];
    a1[5] = v13;
    memcpy(v12, v10, v11);
    a1[4] = v13;
  }
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  double v15 = *(unsigned char **)(a2 + 48);
  unint64_t v14 = *(unsigned char **)(a2 + 56);
  int64_t v16 = v14 - v15;
  if (v14 != v15)
  {
    if (v16 < 0) {
      goto LABEL_20;
    }
    int64_t v17 = (char *)operator new(v14 - v15);
    a1[6] = v17;
    a1[7] = v17;
    unint64_t v18 = &v17[32 * (v16 >> 5)];
    a1[8] = v18;
    memcpy(v17, v15, v16);
    a1[7] = v18;
  }
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  uint64_t v20 = *(unsigned char **)(a2 + 72);
  uint64_t v19 = *(unsigned char **)(a2 + 80);
  int64_t v21 = v19 - v20;
  if (v19 != v20)
  {
    if (v21 < 0) {
      goto LABEL_20;
    }
    int64_t v22 = (char *)operator new(v19 - v20);
    a1[9] = v22;
    a1[10] = v22;
    uint64_t v23 = &v22[32 * (v21 >> 5)];
    a1[11] = v23;
    memcpy(v22, v20, v21);
    a1[10] = v23;
  }
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  uint64_t v25 = *(unsigned char **)(a2 + 96);
  uint64_t v24 = *(unsigned char **)(a2 + 104);
  int64_t v26 = v24 - v25;
  if (v24 != v25)
  {
    if (v26 < 0) {
      goto LABEL_20;
    }
    int64_t v27 = (char *)operator new(v24 - v25);
    a1[12] = v27;
    a1[13] = v27;
    long long v28 = &v27[32 * (v26 >> 5)];
    a1[14] = v28;
    memcpy(v27, v25, v26);
    a1[13] = v28;
  }
  a1[15] = 0;
  a1[16] = 0;
  a1[17] = 0;
  int v30 = *(unsigned char **)(a2 + 120);
  unint64_t v29 = *(unsigned char **)(a2 + 128);
  int64_t v31 = v29 - v30;
  if (v29 != v30)
  {
    if ((v31 & 0x8000000000000000) == 0)
    {
      int64_t v32 = (char *)operator new(v29 - v30);
      a1[15] = v32;
      a1[16] = v32;
      unint64_t v33 = &v32[32 * (v31 >> 5)];
      a1[17] = v33;
      memcpy(v32, v30, v31);
      a1[16] = v33;
      return a1;
    }
LABEL_20:
    sub_2E00();
  }
  return a1;
}

void sub_3B26CC(_Unwind_Exception *exception_object)
{
  if (v3)
  {
    uint64_t v5 = v2;
    do
    {
      int64_t v7 = *(void **)(v5 - 24);
      v5 -= 24;
      int64_t v6 = v7;
      if (v7)
      {
        *(void *)(v2 - 16) = v6;
        operator delete(v6);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_3B271C(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >> 58) {
      sub_2E00();
    }
    uint64_t result = operator new(a4 << 6);
    int64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = &result[8 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t v10 = &v8[v9 / 8];
        uint64_t v11 = a2 + v9;
        long long v12 = *(_OWORD *)(a2 + v9 + 16);
        *(_OWORD *)uint64_t v10 = *(_OWORD *)(a2 + v9);
        *((_OWORD *)v10 + 1) = v12;
        uint64_t result = sub_4D4C4(&v8[v9 / 8 + 4], (uint64_t *)(a2 + v9 + 32));
        v10[7] = *(void *)(a2 + v9 + 56);
        v9 += 64;
      }
      while (v11 + 64 != a3);
      int64_t v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_3B27EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3B2828((void ***)va);
  _Unwind_Resume(a1);
}

void sub_3B2800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v4) {
    sub_20A7CF8(v3 + v4, v3);
  }
  *(void *)(v2 + 8) = v3;
  sub_3B2828((void ***)va);
  _Unwind_Resume(a1);
}

void ***sub_3B2828(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (char *)**result;
    if (v3)
    {
      uint64_t v4 = (char *)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          uint64_t v7 = *((void *)v4 - 4);
          if (v7)
          {
            uint64_t v8 = *((void *)v4 - 3);
            int64_t v6 = (void *)*((void *)v4 - 4);
            if (v8 != v7)
            {
              uint64_t v9 = *((void *)v4 - 3);
              do
              {
                uint64_t v11 = *(void **)(v9 - 24);
                v9 -= 24;
                uint64_t v10 = v11;
                if (v11)
                {
                  *(void *)(v8 - 16) = v10;
                  operator delete(v10);
                }
                uint64_t v8 = v9;
              }
              while (v9 != v7);
              int64_t v6 = (void *)*((void *)v4 - 4);
            }
            *((void *)v4 - 3) = v7;
            operator delete(v6);
          }
          v4 -= 64;
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t *sub_3B2904(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t result = (uint64_t *)sub_3B2A84((uint64_t)(v3 + 2), v6 + v7 - 128, v4 + v7 - 128);
      v7 -= 128;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  uint64_t v8 = *v3;
  uint64_t *v3 = v6;
  a2[1] = v8;
  uint64_t v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void sub_3B29BC(_Unwind_Exception *exception_object)
{
  if (v2) {
    sub_20A7D74(v1 + v2, v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3B29D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 128;
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      uint64_t v4 = *(void **)(i - 120);
      if (!v4) {
        continue;
      }
    }
    else
    {
      uint64_t v4 = *(void **)(i - 120);
      if (!v4) {
        continue;
      }
    }
    uint64_t v5 = *(void *)(i - 112);
    uint64_t v6 = v4;
    if ((void *)v5 != v4)
    {
      do
        uint64_t v5 = sub_3AFFFC(v5 - 1056);
      while ((void *)v5 != v4);
      uint64_t v6 = *(void **)(i - 120);
    }
    *(void *)(i - 112) = v4;
    operator delete(v6);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

unsigned char *sub_3B2A84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  sub_3B168C(a2 + 8, *(void *)(a3 + 8), *(void *)(a3 + 16), 0xF83E0F83E0F83E1 * ((uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 5));
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
  long long v5 = *(_OWORD *)(a3 + 48);
  long long v6 = *(_OWORD *)(a3 + 64);
  long long v7 = *(_OWORD *)(a3 + 80);
  *(void *)(a2 + 93) = *(void *)(a3 + 93);
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 48) = v5;
  uint64_t result = (unsigned char *)(a2 + 104);
  if (*(char *)(a3 + 127) < 0) {
    return sub_4200(result, *(void **)(a3 + 104), *(void *)(a3 + 112));
  }
  long long v9 = *(_OWORD *)(a3 + 104);
  *(void *)(a2 + 120) = *(void *)(a3 + 120);
  *(_OWORD *)uint64_t result = v9;
  return result;
}

void sub_3B2B44(_Unwind_Exception *exception_object)
{
  if (*v2) {
    sub_20A7C9C(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_3B2B64(void **a1, uint64_t *a2)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492) {
    sub_2E00();
  }
  if (0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)) >= 0x249249249249249) {
    unint64_t v5 = 0x492492492492492;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0x492492492492492) {
    sub_188D718();
  }
  uint64_t v7 = 56 * v5;
  uint64_t v8 = (char *)operator new(56 * v5);
  long long v9 = &v8[56 * v3];
  uint64_t v10 = *a2;
  *a2 = 0;
  uint64_t v11 = &v8[v7];
  *(void *)long long v9 = v10;
  *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 + 1);
  *((void *)v9 + 3) = a2[3];
  *((_OWORD *)v9 + 2) = *((_OWORD *)a2 + 2);
  *((void *)v9 + 6) = a2[6];
  a2[4] = 0;
  a2[5] = 0;
  a2[6] = 0;
  long long v12 = v9 + 56;
  int64_t v13 = (char *)*a1;
  unint64_t v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v11;
    if (!v14) {
      return v12;
    }
    goto LABEL_19;
  }
  do
  {
    uint64_t v15 = *((void *)v14 - 7);
    v14 -= 56;
    *(void *)unint64_t v14 = 0;
    *((void *)v9 - 7) = v15;
    v9 -= 56;
    long long v16 = *(_OWORD *)(v14 + 8);
    *((void *)v9 + 3) = *((void *)v14 + 3);
    *(_OWORD *)(v9 + 8) = v16;
    *((_OWORD *)v9 + 2) = *((_OWORD *)v14 + 2);
    *((void *)v9 + 6) = *((void *)v14 + 6);
    *((void *)v14 + 4) = 0;
    *((void *)v14 + 5) = 0;
    *((void *)v14 + 6) = 0;
  }
  while (v14 != v13);
  int64_t v17 = (char *)*a1;
  unint64_t v14 = (char *)a1[1];
  *a1 = v9;
  a1[1] = v12;
  a1[2] = v11;
  if (v14 != v17)
  {
    do
    {
      unint64_t v18 = (void *)*((void *)v14 - 3);
      if (v18)
      {
        *((void *)v14 - 2) = v18;
        operator delete(v18);
      }
      uint64_t v19 = *((void *)v14 - 7);
      *((void *)v14 - 7) = 0;
      if (v19) {
        (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
      }
      v14 -= 56;
    }
    while (v14 != v17);
    unint64_t v14 = v17;
  }
  if (v14) {
LABEL_19:
  }
    operator delete(v14);
  return v12;
}

char *sub_3B2D3C(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v6 = *a1;
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v9 = a5 - 1;
  if (a5 < 1) {
    return v8;
  }
  uint64_t v11 = __src;
  uint64_t v13 = v7 >> 2;
  unint64_t v15 = a1[1];
  unint64_t v14 = a1[2];
  if (a5 > (uint64_t)(v14 - v15) >> 2)
  {
    unint64_t v16 = a5 + ((uint64_t)(v15 - v6) >> 2);
    if (v16 >> 62) {
      sub_2E00();
    }
    uint64_t v17 = v14 - v6;
    if (v17 >> 1 > v16) {
      unint64_t v16 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 62) {
        sub_188D718();
      }
      unint64_t v19 = *a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
      unint64_t v20 = v18;
      int64_t v21 = operator new(4 * v18);
      unint64_t v18 = v20;
      uint64_t v8 = (char *)v19;
      uint64_t v13 = v7 >> 2;
      uint64_t v11 = __src;
    }
    else
    {
      int64_t v21 = 0;
    }
    uint64_t v43 = &v21[4 * v13];
    uint64_t v44 = &v43[4 * a5];
    long long v45 = v43;
    int v46 = v11;
    if ((v9 & 0x3FFFFFFFFFFFFFFFuLL) < 7) {
      goto LABEL_57;
    }
    long long v45 = &v21[4 * v13];
    int v46 = v11;
    if ((unint64_t)(&v21[v7 & 0xFFFFFFFFFFFFFFFCLL] - v11) < 0x20) {
      goto LABEL_57;
    }
    uint64_t v47 = (v9 & 0x3FFFFFFFFFFFFFFFLL) + 1;
    uint64_t v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
    long long v45 = &v43[v48];
    int v46 = &v11[v48];
    unint64_t v49 = (long long *)(v11 + 16);
    size_t v50 = &v21[4 * v13 + 16];
    uint64_t v51 = v47 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v52 = *v49;
      *(v50 - 1) = *(v49 - 1);
      *size_t v50 = v52;
      v49 += 2;
      v50 += 2;
      v51 -= 8;
    }
    while (v51);
    if (v47 != (v47 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_57:
      do
      {
        int v53 = *(_DWORD *)v46;
        v46 += 4;
        *(_DWORD *)long long v45 = v53;
        v45 += 4;
      }
      while (v45 != v44);
    }
    unint64_t v54 = &v21[4 * v13];
    if ((void *)v6 != a2)
    {
      long long v55 = v8;
      unint64_t v54 = &v21[4 * v13];
      if ((unint64_t)(v7 - 4) < 0x3C) {
        goto LABEL_58;
      }
      long long v55 = v8;
      unint64_t v54 = &v21[4 * v13];
      if ((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6 - (unint64_t)&v21[v7 & 0xFFFFFFFFFFFFFFFCLL] < 0x20) {
        goto LABEL_58;
      }
      unint64_t v56 = ((unint64_t)(v7 - 4) >> 2) + 1;
      uint64_t v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
      long long v55 = &v8[-v57];
      unint64_t v54 = &v43[-v57];
      uint64_t v58 = 4 * v13 - 16;
      BOOL v59 = &v21[v58];
      int v60 = (long long *)(v6 + v58);
      uint64_t v61 = v56 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v62 = *v60;
        *(v59 - 1) = *(v60 - 1);
        _OWORD *v59 = v62;
        v59 -= 2;
        v60 -= 2;
        v61 -= 8;
      }
      while (v61);
      if (v56 != (v56 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_58:
        do
        {
          int v63 = *((_DWORD *)v55 - 1);
          v55 -= 4;
          *((_DWORD *)v54 - 1) = v63;
          v54 -= 4;
        }
        while (v55 != (char *)v6);
      }
    }
    int v64 = &v21[4 * v18];
    size_t v65 = v15 - (void)v8;
    if (v65) {
      memmove(&v43[4 * a5], v8, v65);
    }
    *a1 = (unint64_t)v54;
    a1[1] = (unint64_t)&v44[v65];
    a1[2] = (unint64_t)v64;
    if (v6) {
      operator delete((void *)v6);
    }
    return v43;
  }
  uint64_t v22 = v15 - (void)v8;
  uint64_t v23 = (uint64_t)(v15 - (void)v8) >> 2;
  if (v23 >= a5)
  {
    uint64_t v24 = &__src[4 * a5];
    unint64_t v26 = a1[1];
  }
  else
  {
    uint64_t v24 = &__src[4 * v23];
    int64_t v25 = a4 - v24;
    if (a4 != v24)
    {
      unint64_t v70 = *a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
      memmove((void *)a1[1], &__src[4 * v23], a4 - v24);
      uint64_t v13 = v7 >> 2;
      uint64_t v8 = (char *)v70;
    }
    unint64_t v26 = v15 + v25;
    a1[1] = v15 + v25;
    if (v22 < 1) {
      return v8;
    }
  }
  int64_t v27 = &v8[4 * a5];
  size_t v28 = v26 - (void)v27;
  uint64_t v29 = (uint64_t)(v26 - (void)v27) >> 2;
  int v30 = (int *)(v26 - 4 * a5);
  int64_t v31 = (_DWORD *)v26;
  if ((unint64_t)v30 < v15)
  {
    unint64_t v32 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v28;
    unint64_t v33 = (char *)(v32 + v6);
    unint64_t v34 = v32 + v6 + 4;
    if (v15 > v34) {
      unint64_t v34 = v15;
    }
    unint64_t v35 = v34 + ~v6 - v32;
    if (v35 < 0x2C)
    {
      int64_t v31 = (_DWORD *)v26;
    }
    else
    {
      unint64_t v36 = v26 - (void)v33;
      int64_t v31 = (_DWORD *)v26;
      if (v36 >= 0x20)
      {
        uint64_t v37 = (v35 >> 2) + 1;
        uint64_t v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
        int v30 = (int *)((char *)v30 + v38);
        int64_t v31 = (_DWORD *)(v26 + v38);
        uint64_t v39 = (_OWORD *)(v26 + 16);
        uint64_t v40 = (long long *)(4 * v29 + 4 * v13 + v6 + 16);
        uint64_t v41 = v37 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v42 = *v40;
          *(v39 - 1) = *(v40 - 1);
          *uint64_t v39 = v42;
          v39 += 2;
          v40 += 2;
          v41 -= 8;
        }
        while (v41);
        if (v37 == (v37 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_47;
        }
      }
    }
    do
    {
      int v66 = *v30++;
      *v31++ = v66;
    }
    while ((unint64_t)v30 < v15);
  }
LABEL_47:
  a1[1] = (unint64_t)v31;
  if ((char *)v26 != v27)
  {
    unsigned __int16 v67 = v8;
    memmove((void *)(v26 - 4 * v29), v8, v28);
    uint64_t v8 = v67;
  }
  if (v24 != v11)
  {
    uint64_t v43 = v8;
    memmove(v8, v11, v24 - v11);
    return v43;
  }
  return v8;
}

unsigned int *sub_3B30E8(unsigned int *result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v11 = result;
LABEL_2:
  long long v12 = v11;
  while (1)
  {
    uint64_t v11 = v12;
    uint64_t v13 = a2 - (char *)v12;
    unint64_t v14 = (a2 - (char *)v12) >> 2;
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unsigned int v71 = *v12;
          unsigned int v72 = *((_DWORD *)a2 - 1);
          if (v72 >= *v12) {
            return result;
          }
          *long long v12 = v72;
          goto LABEL_155;
        case 3uLL:
          unsigned int v71 = *v12;
          unsigned int v73 = v12[1];
          unsigned int v74 = *((_DWORD *)a2 - 1);
          if (v73 >= *v12)
          {
            if (v74 < v73)
            {
              v12[1] = v74;
              *((_DWORD *)a2 - 1) = v73;
              unsigned int v91 = *v12;
              unsigned int v92 = v12[1];
              if (v92 < *v12)
              {
                *long long v12 = v92;
                v12[1] = v91;
              }
            }
          }
          else
          {
            if (v74 >= v73)
            {
              *long long v12 = v73;
              v12[1] = v71;
              unsigned int v99 = *((_DWORD *)a2 - 1);
              if (v99 >= v71) {
                return result;
              }
              v12[1] = v99;
            }
            else
            {
              *long long v12 = v74;
            }
LABEL_155:
            *((_DWORD *)a2 - 1) = v71;
          }
          return result;
        case 4uLL:
          int32x4_t v75 = v12 + 1;
          uint64_t v76 = (unsigned int *)v12[1];
          uint64_t v77 = v12 + 2;
          unsigned int v78 = v12[2];
          uint64_t v79 = (unsigned int *)*v12;
          if (v76 >= v79)
          {
            if (v78 >= v76)
            {
LABEL_149:
              LODWORD(v76) = v78;
              unsigned int v93 = *((_DWORD *)a2 - 1);
              if (v93 >= v76) {
                return result;
              }
LABEL_150:
              *uint64_t v77 = v93;
              *((_DWORD *)a2 - 1) = v76;
              unsigned int v96 = *v75;
              unsigned int v97 = *v77;
              if (*v77 < v96)
              {
                v12[1] = v97;
                v12[2] = v96;
                unsigned int v98 = *v12;
                if (v97 < *v12)
                {
                  *long long v12 = v97;
                  v12[1] = v98;
                }
              }
              return result;
            }
            *int32x4_t v75 = v78;
            *uint64_t v77 = v76;
            unsigned int v80 = v12;
            uint64_t v81 = v12 + 1;
            uint64_t result = v76;
            if (v78 >= v79)
            {
LABEL_141:
              unsigned int v93 = *((_DWORD *)a2 - 1);
              if (v93 >= v76) {
                return result;
              }
              goto LABEL_150;
            }
          }
          else
          {
            unsigned int v80 = v12;
            uint64_t v81 = v12 + 2;
            uint64_t result = (unsigned int *)*v12;
            if (v78 >= v76)
            {
              *long long v12 = v76;
              v12[1] = v79;
              unsigned int v80 = v12 + 1;
              uint64_t v81 = v12 + 2;
              uint64_t result = v79;
              if (v78 >= v79) {
                goto LABEL_149;
              }
            }
          }
          unsigned int *v80 = v78;
          *uint64_t v81 = v79;
          LODWORD(v76) = result;
          goto LABEL_141;
        case 5uLL:
          return sub_3948(v12, v12 + 1, v12 + 2, v12 + 3, (unsigned int *)a2 - 1);
        default:
          JUMPOUT(0);
      }
    }
    if (v13 <= 95) {
      break;
    }
    if (!a4)
    {
      if (v12 != (unsigned int *)a2)
      {
        return (unsigned int *)sub_3A84((char *)v12, a2, a2);
      }
      return result;
    }
    unint64_t v15 = v14 >> 1;
    unint64_t v16 = &v12[v14 >> 1];
    unsigned int v17 = *((_DWORD *)a2 - 1);
    if ((unint64_t)v13 < 0x201)
    {
      unsigned int v20 = *v16;
      unsigned int v21 = *v12;
      if (*v12 < *v16)
      {
        if (v17 < v21)
        {
          unsigned int *v16 = v17;
          goto LABEL_32;
        }
        unsigned int *v16 = v21;
        *long long v12 = v20;
        unsigned int v33 = *((_DWORD *)a2 - 1);
        if (v33 < v20)
        {
          *long long v12 = v33;
LABEL_32:
          *((_DWORD *)a2 - 1) = v20;
        }
LABEL_33:
        --a4;
        unsigned int v24 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v17 >= v21) {
        goto LABEL_33;
      }
      *long long v12 = v17;
      *((_DWORD *)a2 - 1) = v21;
      unsigned int v23 = *v16;
      if (*v12 >= *v16) {
        goto LABEL_33;
      }
      unsigned int *v16 = *v12;
      *long long v12 = v23;
      --a4;
      unsigned int v24 = v23;
      if (a5) {
        goto LABEL_57;
      }
LABEL_56:
      if (*(v12 - 1) < v24) {
        goto LABEL_57;
      }
      if (v24 < *((_DWORD *)a2 - 1))
      {
        do
        {
          unsigned int v62 = v12[1];
          ++v12;
        }
        while (v24 >= v62);
      }
      else
      {
        int v63 = v12 + 1;
        do
        {
          long long v12 = v63;
          if (v63 >= (unsigned int *)a2) {
            break;
          }
          ++v63;
        }
        while (v24 >= *v12);
      }
      int v64 = (unsigned int *)a2;
      if (v12 < (unsigned int *)a2)
      {
        int v64 = (unsigned int *)a2;
        do
          unsigned int v65 = *--v64;
        while (v24 < v65);
      }
      if (v12 < v64)
      {
        unsigned int v66 = *v12;
        unsigned int v67 = *v64;
        do
        {
          *long long v12 = v67;
          *int v64 = v66;
          do
          {
            unsigned int v68 = v12[1];
            ++v12;
            unsigned int v66 = v68;
          }
          while (v24 >= v68);
          do
          {
            unsigned int v69 = *--v64;
            unsigned int v67 = v69;
          }
          while (v24 < v69);
        }
        while (v12 < v64);
      }
      unint64_t v70 = v12 - 1;
      BOOL v5 = v12 - 1 >= v11;
      BOOL v6 = v12 - 1 == v11;
      if (v12 - 1 != v11) {
        *uint64_t v11 = *v70;
      }
      a5 = 0;
      *unint64_t v70 = v24;
    }
    else
    {
      unsigned int v18 = *v12;
      unsigned int v19 = *v16;
      if (*v16 >= *v12)
      {
        if (v17 < v19)
        {
          unsigned int *v16 = v17;
          *((_DWORD *)a2 - 1) = v19;
          unsigned int v22 = *v12;
          if (*v16 < *v12)
          {
            *long long v12 = *v16;
            unsigned int *v16 = v22;
          }
        }
      }
      else
      {
        if (v17 >= v19)
        {
          *long long v12 = v19;
          unsigned int *v16 = v18;
          unsigned int v25 = *((_DWORD *)a2 - 1);
          if (v25 >= v18) {
            goto LABEL_24;
          }
          unsigned int *v16 = v25;
        }
        else
        {
          *long long v12 = v17;
        }
        *((_DWORD *)a2 - 1) = v18;
      }
LABEL_24:
      unint64_t v26 = &v12[v15];
      unsigned int v29 = *(v26 - 1);
      int64_t v27 = v26 - 1;
      unsigned int v28 = v29;
      unsigned int v30 = v12[1];
      unsigned int v31 = *((_DWORD *)a2 - 2);
      if (v29 >= v30)
      {
        if (v31 < v28)
        {
          *int64_t v27 = v31;
          *((_DWORD *)a2 - 2) = v28;
          unsigned int v32 = v12[1];
          if (*v27 < v32)
          {
            v12[1] = *v27;
            *int64_t v27 = v32;
          }
        }
      }
      else
      {
        if (v31 >= v28)
        {
          v12[1] = v28;
          *int64_t v27 = v30;
          unsigned int v34 = *((_DWORD *)a2 - 2);
          if (v34 >= v30) {
            goto LABEL_38;
          }
          *int64_t v27 = v34;
        }
        else
        {
          v12[1] = v31;
        }
        *((_DWORD *)a2 - 2) = v30;
      }
LABEL_38:
      unint64_t v35 = &v12[v15];
      unsigned int v38 = v35[1];
      unint64_t v36 = v35 + 1;
      unsigned int v37 = v38;
      unsigned int v39 = v12[2];
      unsigned int v40 = *((_DWORD *)a2 - 3);
      if (v38 >= v39)
      {
        if (v40 < v37)
        {
          unsigned int *v36 = v40;
          *((_DWORD *)a2 - 3) = v37;
          unsigned int v41 = v12[2];
          if (*v36 < v41)
          {
            v12[2] = *v36;
            unsigned int *v36 = v41;
          }
        }
      }
      else
      {
        if (v40 >= v37)
        {
          v12[2] = v37;
          unsigned int *v36 = v39;
          unsigned int v42 = *((_DWORD *)a2 - 3);
          if (v42 >= v39) {
            goto LABEL_47;
          }
          unsigned int *v36 = v42;
        }
        else
        {
          v12[2] = v40;
        }
        *((_DWORD *)a2 - 3) = v39;
      }
LABEL_47:
      unsigned int v43 = *v27;
      unsigned int v44 = *v16;
      unsigned int v45 = *v36;
      if (*v16 >= *v27)
      {
        if (v45 >= v44) {
          goto LABEL_55;
        }
        unsigned int *v16 = v45;
        unsigned int *v36 = v44;
        unint64_t v36 = &v12[v14 >> 1];
        unsigned int v44 = v43;
        if (v45 < v43)
        {
LABEL_54:
          *int64_t v27 = v45;
          unsigned int *v36 = v43;
LABEL_55:
          unsigned int v47 = *v12;
          *long long v12 = v44;
          unsigned int *v16 = v47;
          --a4;
          unsigned int v24 = *v12;
          if ((a5 & 1) == 0) {
            goto LABEL_56;
          }
          goto LABEL_57;
        }
        unsigned int v61 = *v12;
        *long long v12 = v45;
        unsigned int *v16 = v61;
        --a4;
        unsigned int v24 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v45 < v44) {
        goto LABEL_54;
      }
      *int64_t v27 = v44;
      unsigned int *v16 = v43;
      int64_t v27 = &v12[v14 >> 1];
      unsigned int v44 = v45;
      if (v45 < v43) {
        goto LABEL_54;
      }
      unsigned int v46 = *v12;
      *long long v12 = v43;
      unsigned int *v16 = v46;
      --a4;
      unsigned int v24 = *v12;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_57:
      uint64_t v48 = 0;
      do
        unsigned int v49 = v12[++v48];
      while (v49 < v24);
      size_t v50 = &v12[v48];
      uint64_t v51 = a2;
      if (v48 == 1)
      {
        uint64_t v51 = a2;
        do
        {
          if (v50 >= (unsigned int *)v51) {
            break;
          }
          unsigned int v53 = *((_DWORD *)v51 - 1);
          v51 -= 4;
        }
        while (v53 >= v24);
      }
      else
      {
        do
        {
          unsigned int v52 = *((_DWORD *)v51 - 1);
          v51 -= 4;
        }
        while (v52 >= v24);
      }
      if (v50 >= (unsigned int *)v51)
      {
        BOOL v59 = v50 - 1;
        if (v50 - 1 == v12) {
          goto LABEL_75;
        }
LABEL_74:
        *long long v12 = *v59;
        goto LABEL_75;
      }
      unsigned int v54 = *(_DWORD *)v51;
      long long v55 = &v12[v48];
      unint64_t v56 = (unsigned int *)v51;
      do
      {
        *long long v55 = v54;
        *unint64_t v56 = v49;
        do
        {
          unsigned int v57 = v55[1];
          ++v55;
          unsigned int v49 = v57;
        }
        while (v57 < v24);
        do
        {
          unsigned int v58 = *--v56;
          unsigned int v54 = v58;
        }
        while (v58 >= v24);
      }
      while (v55 < v56);
      BOOL v59 = v55 - 1;
      if (v55 - 1 != v12) {
        goto LABEL_74;
      }
LABEL_75:
      unsigned int *v59 = v24;
      if (v50 < (unsigned int *)v51) {
        goto LABEL_78;
      }
      BOOL v60 = sub_3B38B8(v12, v59);
      long long v12 = v59 + 1;
      uint64_t result = (unsigned int *)sub_3B38B8(v59 + 1, (unsigned int *)a2);
      if (result)
      {
        a2 = (char *)v59;
        if (v60) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v60)
      {
LABEL_78:
        uint64_t result = (unsigned int *)sub_3B30E8(v11, v59, a3, a4, a5 & 1);
        a5 = 0;
        long long v12 = v59 + 1;
      }
    }
  }
  unint64_t v82 = (char *)(v12 + 1);
  BOOL v84 = v12 == (unsigned int *)a2 || v82 == a2;
  if (a5)
  {
    if (!v84)
    {
      uint64_t v85 = 0;
      int v86 = v12;
      do
      {
        unsigned int v89 = *v86;
        unsigned int v88 = v86[1];
        int v86 = (unsigned int *)v82;
        if (v88 < v89)
        {
          uint64_t v90 = v85;
          do
          {
            *(unsigned int *)((char *)v12 + v90 + 4) = v89;
            if (!v90)
            {
              uint64_t v87 = v12;
              goto LABEL_124;
            }
            unsigned int v89 = *(unsigned int *)((char *)v12 + v90 - 4);
            v90 -= 4;
          }
          while (v88 < v89);
          uint64_t v87 = (unsigned int *)((char *)v12 + v90 + 4);
LABEL_124:
          *uint64_t v87 = v88;
        }
        unint64_t v82 = (char *)(v86 + 1);
        v85 += 4;
      }
      while (v86 + 1 != (unsigned int *)a2);
    }
  }
  else if (!v84)
  {
    do
    {
      unsigned int v95 = *v11;
      unsigned int v94 = v11[1];
      uint64_t v11 = (unsigned int *)v82;
      if (v94 < v95)
      {
        do
        {
          *(_DWORD *)unint64_t v82 = v95;
          unsigned int v95 = *((_DWORD *)v82 - 2);
          v82 -= 4;
        }
        while (v94 < v95);
        *(_DWORD *)unint64_t v82 = v94;
      }
      unint64_t v82 = (char *)(v11 + 1);
    }
    while (v11 + 1 != (unsigned int *)a2);
  }
  return result;
}

BOOL sub_3B38B8(unsigned int *a1, unsigned int *a2)
{
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      unsigned int v9 = *a1;
      unsigned int v10 = *(a2 - 1);
      if (v10 >= *a1) {
        return 1;
      }
      *a1 = v10;
      *(a2 - 1) = v9;
      return 1;
    case 3:
      unsigned int v11 = *a1;
      unsigned int v12 = a1[1];
      unsigned int v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12) {
          return 1;
        }
        a1[1] = v13;
        *(a2 - 1) = v12;
        unsigned int v29 = *a1;
        unsigned int v30 = a1[1];
        if (v30 >= *a1) {
          return 1;
        }
        *a1 = v30;
        a1[1] = v29;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        unsigned int v35 = *(a2 - 1);
        if (v35 >= v11) {
          return 1;
        }
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      unint64_t v14 = a1 + 1;
      unsigned int v15 = a1[1];
      unint64_t v16 = a1 + 2;
      unsigned int v17 = a1[2];
      unsigned int v18 = *a1;
      if (v15 < *a1)
      {
        unsigned int v19 = a1;
        unsigned int v20 = a1 + 2;
        unsigned int v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          unsigned int v19 = a1 + 1;
          unsigned int v20 = a1 + 2;
          unsigned int v21 = v18;
          if (v17 >= v18) {
            goto LABEL_38;
          }
        }
LABEL_35:
        *unsigned int v19 = v17;
        *unsigned int v20 = v18;
        unsigned int v15 = v21;
LABEL_36:
        unsigned int v31 = *(a2 - 1);
        if (v31 >= v15) {
          return 1;
        }
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        unsigned int *v14 = v17;
        unsigned int *v16 = v15;
        unsigned int v19 = a1;
        unsigned int v20 = a1 + 1;
        unsigned int v21 = v15;
        if (v17 >= v18) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
LABEL_38:
      unsigned int v15 = v17;
      unsigned int v31 = *(a2 - 1);
      if (v31 >= v15) {
        return 1;
      }
LABEL_39:
      unsigned int *v16 = v31;
      *(a2 - 1) = v15;
      unsigned int v32 = *v14;
      unsigned int v33 = *v16;
      if (*v16 >= v32) {
        return 1;
      }
      a1[1] = v33;
      a1[2] = v32;
      unsigned int v34 = *a1;
      if (v33 >= *a1) {
        return 1;
      }
      *a1 = v33;
      a1[1] = v34;
      return 1;
    case 5:
      sub_3948(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      unint64_t v4 = a1 + 2;
      unsigned int v3 = a1[2];
      unsigned int v5 = a1[1];
      unsigned int v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5) {
          goto LABEL_20;
        }
        a1[1] = v3;
        unsigned int *v4 = v5;
        uint64_t v7 = a1;
        uint64_t v8 = a1 + 1;
      }
      else
      {
        uint64_t v7 = a1;
        uint64_t v8 = a1 + 2;
        if (v3 < v5) {
          goto LABEL_19;
        }
        *a1 = v5;
        a1[1] = v6;
        uint64_t v7 = a1 + 1;
        uint64_t v8 = a1 + 2;
      }
      if (v3 >= v6) {
        goto LABEL_20;
      }
LABEL_19:
      *uint64_t v7 = v3;
      *uint64_t v8 = v6;
LABEL_20:
      unsigned int v22 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v23 = 0;
      for (uint64_t i = 12; ; i += 4)
      {
        unsigned int v25 = *v4;
        unsigned int v26 = *v22;
        if (*v22 < v25) {
          break;
        }
LABEL_23:
        unint64_t v4 = v22++;
        if (v22 == a2) {
          return 1;
        }
      }
      uint64_t v27 = i;
      do
      {
        *(unsigned int *)((char *)a1 + v27) = v25;
        uint64_t v28 = v27 - 4;
        if (v27 == 4)
        {
          *a1 = v26;
          if (++v23 != 8) {
            goto LABEL_23;
          }
          return v22 + 1 == a2;
        }
        unsigned int v25 = *(unsigned int *)((char *)a1 + v27 - 8);
        v27 -= 4;
      }
      while (v26 < v25);
      *(unsigned int *)((char *)a1 + v28) = v26;
      if (++v23 != 8) {
        goto LABEL_23;
      }
      return v22 + 1 == a2;
  }
}

uint64_t sub_3B3BE4(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void *sub_3B3BFC()
{
  byte_255772F = 1;
  word_2557718 = 65;
  byte_2557747 = 1;
  word_2557730 = 65;
  char v60 = 7;
  strcpy((char *)v59, "UNKNOWN");
  int v61 = 0;
  char v63 = 14;
  strcpy((char *)v62, "ROUTES_THROUGH");
  int v64 = 1;
  char v66 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v67 = 3;
  char v69 = 11;
  strcpy((char *)v68, "ROUTES_FROM");
  int v70 = 2;
  xmmword_25577F0 = 0u;
  xmmword_2557800 = 0u;
  dword_2557810 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25577F0, (uint64_t)v59, (uint64_t)v59);
  sub_3A6EF0((uint64_t)&xmmword_25577F0, (uint64_t)v62, (uint64_t)v62);
  sub_3A6EF0((uint64_t)&xmmword_25577F0, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25577F0, (uint64_t)v68, (uint64_t)v68);
  if (v69 < 0)
  {
    operator delete(v68[0]);
    if ((v66 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v63 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v62[0]);
      if ((v60 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v59[0]);
      goto LABEL_5;
    }
  }
  else if ((v66 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v63 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v60 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_255775F = 8;
  strcpy((char *)&qword_2557748, "any_mode");
  byte_2557777 = 7;
  strcpy((char *)&dword_2557760, "cycling");
  byte_255778F = 7;
  strcpy((char *)&dword_2557778, "driving");
  byte_25577A7 = 7;
  strcpy((char *)&dword_2557790, "walking");
  qword_25577B0 = 0;
  qword_25577B8 = 0;
  qword_25577A8 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25577A8 = (uint64_t)v0;
  qword_25577B0 = (uint64_t)(v0 + 9);
  qword_25577B8 = (uint64_t)(v0 + 9);
  qword_25577C0 = 0;
  qword_25577C8 = 0;
  unk_25577D0 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25577C8 = (uint64_t)(v1 + 9);
  unk_25577D0 = v1 + 9;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25577C0 = (uint64_t)v1;
  byte_25577EF = 3;
  dword_25577D8 = 7105633;
  qword_254DFB0 = 0;
  qword_254DFB8 = 0;
  qword_254DFA8 = 0;
  qword_254DFA8 = (uint64_t)operator new(0x188uLL);
  uint64_t v2 = qword_254DFA8 + 392;
  qword_254DFB8 = qword_254DFA8 + 392;
  memcpy((void *)qword_254DFA8, &unk_20E2ED0, 0x188uLL);
  qword_254DFB0 = v2;
  qword_254DFC8 = 0;
  qword_254DFD0 = 0;
  qword_254DFC0 = 0;
  qword_254DFC0 = (uint64_t)operator new(0x198uLL);
  uint64_t v3 = qword_254DFC0 + 408;
  qword_254DFD0 = qword_254DFC0 + 408;
  memcpy((void *)qword_254DFC0, &unk_20E3058, 0x198uLL);
  qword_254DFC8 = v3;
  qword_254DFE0 = 0;
  qword_254DFE8 = 0;
  qword_254DFD8 = 0;
  qword_254DFD8 = (uint64_t)operator new(0x360uLL);
  uint64_t v4 = qword_254DFD8 + 864;
  qword_254DFE8 = qword_254DFD8 + 864;
  memcpy((void *)qword_254DFD8, &unk_20E31F0, 0x360uLL);
  qword_254DFE0 = v4;
  qword_254DFF8 = 0;
  qword_254E000 = 0;
  qword_254DFF0 = 0;
  qword_254DFF0 = (uint64_t)operator new(0x3A0uLL);
  uint64_t v5 = qword_254DFF0 + 928;
  qword_254E000 = qword_254DFF0 + 928;
  memcpy((void *)qword_254DFF0, &unk_20E3550, 0x3A0uLL);
  qword_254DFF8 = v5;
  qword_254E010 = 0;
  unk_254E018 = 0;
  qword_254E008 = 0;
  unsigned int v6 = operator new(0x30uLL);
  qword_254E010 = (uint64_t)(v6 + 3);
  unk_254E018 = v6 + 3;
  *unsigned int v6 = xmmword_20E38F0;
  v6[1] = unk_20E3900;
  void v6[2] = xmmword_20E3910;
  qword_254E008 = (uint64_t)v6;
  qword_254E028 = 0;
  unk_254E030 = 0;
  qword_254E020 = 0;
  uint64_t v7 = operator new(0x58uLL);
  qword_254E028 = (uint64_t)v7 + 88;
  unk_254E030 = (char *)v7 + 88;
  v7[2] = xmmword_20E3940;
  v7[3] = unk_20E3950;
  v7[4] = xmmword_20E3960;
  *((void *)v7 + 10) = 0x250720FBCA00019;
  *uint64_t v7 = xmmword_20E3920;
  v7[1] = unk_20E3930;
  qword_254E020 = (uint64_t)v7;
  qword_254E040 = 0;
  unk_254E048 = 0;
  qword_254E038 = 0;
  uint64_t v8 = operator new(0x48uLL);
  qword_254E040 = (uint64_t)v8 + 72;
  unk_254E048 = (char *)v8 + 72;
  v8[2] = xmmword_20E3998;
  v8[3] = unk_20E39A8;
  *((void *)v8 + 8) = 0x2105585DC5001C6;
  *uint64_t v8 = xmmword_20E3978;
  v8[1] = unk_20E3988;
  qword_254E038 = (uint64_t)v8;
  qword_254E058 = 0;
  qword_254E060 = 0;
  qword_254E050 = 0;
  unsigned int v9 = operator new(0x88uLL);
  qword_254E060 = (uint64_t)v9 + 136;
  v9[6] = xmmword_20E3A20;
  v9[7] = unk_20E3A30;
  *((void *)v9 + 16) = 0x2105585DC50078ALL;
  v9[2] = xmmword_20E39E0;
  v9[3] = unk_20E39F0;
  v9[4] = xmmword_20E3A00;
  v9[5] = unk_20E3A10;
  *unsigned int v9 = xmmword_20E39C0;
  v9[1] = unk_20E39D0;
  qword_254E050 = (uint64_t)v9;
  qword_254E058 = (uint64_t)v9 + 136;
  qword_254E070 = 0;
  unk_254E078 = 0;
  qword_254E068 = 0;
  unsigned int v10 = operator new(0x70uLL);
  qword_254E070 = (uint64_t)(v10 + 7);
  unk_254E078 = v10 + 7;
  v10[4] = xmmword_20E3A88;
  v10[5] = unk_20E3A98;
  v10[6] = xmmword_20E3AA8;
  _OWORD *v10 = xmmword_20E3A48;
  v10[1] = unk_20E3A58;
  v10[2] = xmmword_20E3A68;
  v10[3] = unk_20E3A78;
  qword_254E068 = (uint64_t)v10;
  qword_254E080 = 0;
  *(void *)algn_254E088 = 0;
  qword_254E090 = 0;
  unsigned int v11 = operator new(0x98uLL);
  qword_254E090 = (uint64_t)v11 + 152;
  v11[6] = xmmword_20E3B18;
  v11[7] = unk_20E3B28;
  v11[8] = xmmword_20E3B38;
  *((void *)v11 + 18) = 0x210558371D004BDLL;
  v11[2] = xmmword_20E3AD8;
  v11[3] = unk_20E3AE8;
  v11[4] = xmmword_20E3AF8;
  v11[5] = unk_20E3B08;
  *unsigned int v11 = xmmword_20E3AB8;
  v11[1] = unk_20E3AC8;
  qword_254E080 = (uint64_t)v11;
  *(void *)algn_254E088 = (char *)v11 + 152;
  qword_254E0A0 = 0;
  qword_254E0A8 = 0;
  qword_254E098 = 0;
  unsigned int v12 = operator new(0xC0uLL);
  qword_254E0A8 = (uint64_t)(v12 + 12);
  v12[8] = xmmword_20E3BD0;
  v12[9] = unk_20E3BE0;
  v12[10] = xmmword_20E3BF0;
  v12[11] = unk_20E3C00;
  v12[4] = xmmword_20E3B90;
  v12[5] = unk_20E3BA0;
  v12[6] = xmmword_20E3BB0;
  v12[7] = unk_20E3BC0;
  *unsigned int v12 = xmmword_20E3B50;
  v12[1] = unk_20E3B60;
  v12[2] = xmmword_20E3B70;
  v12[3] = unk_20E3B80;
  qword_254E098 = (uint64_t)v12;
  qword_254E0A0 = (uint64_t)(v12 + 12);
  qword_254E0B8 = 0;
  qword_254E0C0 = 0;
  qword_254E0B0 = 0;
  unsigned int v13 = operator new(0xA0uLL);
  qword_254E0C0 = (uint64_t)(v13 + 10);
  v13[6] = xmmword_20E3C70;
  v13[7] = unk_20E3C80;
  v13[8] = xmmword_20E3C90;
  v13[9] = unk_20E3CA0;
  void v13[2] = xmmword_20E3C30;
  v13[3] = unk_20E3C40;
  v13[4] = xmmword_20E3C50;
  v13[5] = unk_20E3C60;
  *unsigned int v13 = xmmword_20E3C10;
  v13[1] = unk_20E3C20;
  qword_254E0B0 = (uint64_t)v13;
  qword_254E0B8 = (uint64_t)(v13 + 10);
  qword_254E0D0 = 0;
  qword_254E0D8 = 0;
  qword_254E0C8 = 0;
  qword_254E0C8 = (uint64_t)operator new(0x118uLL);
  uint64_t v14 = qword_254E0C8 + 280;
  qword_254E0D8 = qword_254E0C8 + 280;
  memcpy((void *)qword_254E0C8, &unk_20E3CB0, 0x118uLL);
  qword_254E0D0 = v14;
  qword_254E0E8 = 0;
  qword_254E0F0 = 0;
  qword_254E0E0 = 0;
  unsigned int v15 = operator new(0x90uLL);
  qword_254E0F0 = (uint64_t)(v15 + 9);
  v15[6] = xmmword_20E3E28;
  v15[7] = unk_20E3E38;
  v15[8] = xmmword_20E3E48;
  v15[2] = xmmword_20E3DE8;
  v15[3] = unk_20E3DF8;
  v15[4] = xmmword_20E3E08;
  v15[5] = unk_20E3E18;
  _OWORD *v15 = xmmword_20E3DC8;
  v15[1] = unk_20E3DD8;
  qword_254E0E0 = (uint64_t)v15;
  qword_254E0E8 = (uint64_t)(v15 + 9);
  qword_254E100 = 0;
  qword_254E108 = 0;
  qword_254E0F8 = 0;
  qword_254E0F8 = (uint64_t)operator new(0x110uLL);
  uint64_t v16 = qword_254E0F8 + 272;
  qword_254E108 = qword_254E0F8 + 272;
  memcpy((void *)qword_254E0F8, &unk_20E3E58, 0x110uLL);
  qword_254E100 = v16;
  qword_254E118 = 0;
  unk_254E120 = 0;
  qword_254E110 = 0;
  unsigned int v17 = operator new(0x80uLL);
  qword_254E118 = (uint64_t)(v17 + 8);
  unk_254E120 = v17 + 8;
  v17[4] = xmmword_20E3FA8;
  v17[5] = unk_20E3FB8;
  v17[6] = xmmword_20E3FC8;
  v17[7] = unk_20E3FD8;
  *unsigned int v17 = xmmword_20E3F68;
  v17[1] = unk_20E3F78;
  v17[2] = xmmword_20E3F88;
  v17[3] = unk_20E3F98;
  qword_254E110 = (uint64_t)v17;
  qword_254E128 = 0;
  unk_254E130 = 0;
  qword_254E138 = 0;
  unsigned int v18 = operator new(0xE8uLL);
  qword_254E138 = (uint64_t)v18 + 232;
  v18[12] = xmmword_20E40A8;
  v18[13] = unk_20E40B8;
  *((void *)v18 + 28) = 0x2005583C23052CFLL;
  v18[8] = xmmword_20E4068;
  v18[9] = unk_20E4078;
  v18[10] = xmmword_20E4088;
  v18[11] = unk_20E4098;
  v18[4] = xmmword_20E4028;
  v18[5] = unk_20E4038;
  v18[6] = xmmword_20E4048;
  v18[7] = unk_20E4058;
  _OWORD *v18 = xmmword_20E3FE8;
  v18[1] = unk_20E3FF8;
  v18[2] = xmmword_20E4008;
  v18[3] = unk_20E4018;
  qword_254E128 = (uint64_t)v18;
  unk_254E130 = (char *)v18 + 232;
  qword_254E148 = 0;
  qword_254E150 = 0;
  qword_254E140 = 0;
  unsigned int v19 = operator new(0x88uLL);
  qword_254E150 = (uint64_t)v19 + 136;
  v19[6] = xmmword_20E4130;
  v19[7] = unk_20E4140;
  *((void *)v19 + 16) = 0x27069238F50003BLL;
  v19[2] = xmmword_20E40F0;
  v19[3] = unk_20E4100;
  v19[4] = xmmword_20E4110;
  v19[5] = unk_20E4120;
  *unsigned int v19 = xmmword_20E40D0;
  v19[1] = unk_20E40E0;
  qword_254E140 = (uint64_t)v19;
  qword_254E148 = (uint64_t)v19 + 136;
  qword_254E160 = 0;
  unk_254E168 = 0;
  qword_254E158 = 0;
  unsigned int v20 = operator new(0x30uLL);
  qword_254E160 = (uint64_t)(v20 + 3);
  unk_254E168 = v20 + 3;
  *unsigned int v20 = xmmword_20E4158;
  v20[1] = unk_20E4168;
  v20[2] = xmmword_20E4178;
  qword_254E158 = (uint64_t)v20;
  qword_254E178 = 0;
  unk_254E180 = 0;
  qword_254E170 = 0;
  unsigned int v21 = operator new(0x20uLL);
  qword_254E178 = (uint64_t)(v21 + 2);
  unk_254E180 = v21 + 2;
  _OWORD *v21 = xmmword_20E4188;
  v21[1] = unk_20E4198;
  qword_254E170 = (uint64_t)v21;
  qword_254E190 = 0;
  qword_254E198 = 0;
  qword_254E188 = 0;
  unsigned int v22 = operator new(0xD8uLL);
  qword_254E198 = (uint64_t)v22 + 216;
  v22[10] = xmmword_20E4248;
  v22[11] = unk_20E4258;
  v22[12] = xmmword_20E4268;
  *((void *)v22 + 26) = 0x21055053CD00408;
  v22[6] = xmmword_20E4208;
  v22[7] = unk_20E4218;
  v22[8] = xmmword_20E4228;
  v22[9] = unk_20E4238;
  v22[2] = xmmword_20E41C8;
  v22[3] = unk_20E41D8;
  v22[4] = xmmword_20E41E8;
  v22[5] = unk_20E41F8;
  *unsigned int v22 = xmmword_20E41A8;
  v22[1] = unk_20E41B8;
  qword_254E188 = (uint64_t)v22;
  qword_254E190 = (uint64_t)v22 + 216;
  qword_254E1A8 = 0;
  qword_254E1B0 = 0;
  qword_254E1A0 = 0;
  int v23 = operator new(0xC8uLL);
  qword_254E1B0 = (uint64_t)v23 + 200;
  v23[10] = xmmword_20E4320;
  v23[11] = unk_20E4330;
  *((void *)v23 + 24) = 0x2406DFB3EE000C8;
  v23[6] = xmmword_20E42E0;
  v23[7] = unk_20E42F0;
  v23[8] = xmmword_20E4300;
  v23[9] = unk_20E4310;
  v23[2] = xmmword_20E42A0;
  v23[3] = unk_20E42B0;
  v23[4] = xmmword_20E42C0;
  v23[5] = unk_20E42D0;
  _OWORD *v23 = xmmword_20E4280;
  v23[1] = unk_20E4290;
  qword_254E1A0 = (uint64_t)v23;
  qword_254E1A8 = (uint64_t)v23 + 200;
  qword_254E1C0 = 0;
  unk_254E1C8 = 0;
  qword_254E1B8 = 0;
  unsigned int v24 = operator new(0x78uLL);
  qword_254E1C0 = (uint64_t)v24 + 120;
  unk_254E1C8 = (char *)v24 + 120;
  v24[4] = xmmword_20E4388;
  v24[5] = unk_20E4398;
  v24[6] = xmmword_20E43A8;
  *((void *)v24 + 14) = 0x20055444BE001C5;
  *unsigned int v24 = xmmword_20E4348;
  v24[1] = unk_20E4358;
  v24[2] = xmmword_20E4368;
  v24[3] = unk_20E4378;
  qword_254E1B8 = (uint64_t)v24;
  qword_254E1D0 = 0;
  qword_254E1D8 = 0;
  qword_254E1E0 = 0;
  unsigned int v25 = operator new(0x40uLL);
  qword_254E1D8 = (uint64_t)(v25 + 4);
  qword_254E1E0 = (uint64_t)(v25 + 4);
  *unsigned int v25 = xmmword_20E43C0;
  v25[1] = unk_20E43D0;
  v25[2] = xmmword_20E43E0;
  v25[3] = unk_20E43F0;
  qword_254E1D0 = (uint64_t)v25;
  qword_254E1F0 = 0;
  qword_254E1F8 = 0;
  qword_254E1E8 = 0;
  qword_254E1E8 = (uint64_t)operator new(0x148uLL);
  uint64_t v26 = qword_254E1E8 + 328;
  qword_254E1F8 = qword_254E1E8 + 328;
  memcpy((void *)qword_254E1E8, &unk_20E4400, 0x148uLL);
  qword_254E1F0 = v26;
  qword_254E208 = 0;
  qword_254E210 = 0;
  qword_254E200 = 0;
  qword_254E200 = (uint64_t)operator new(0x180uLL);
  uint64_t v27 = qword_254E200 + 384;
  qword_254E210 = qword_254E200 + 384;
  memcpy((void *)qword_254E200, &unk_20E4548, 0x180uLL);
  qword_254E208 = v27;
  qword_254E220 = 0;
  qword_254E228 = 0;
  qword_254E218 = 0;
  uint64_t v28 = operator new(0xA0uLL);
  qword_254E228 = (uint64_t)(v28 + 10);
  v28[6] = xmmword_20E4728;
  v28[7] = unk_20E4738;
  v28[8] = xmmword_20E4748;
  v28[9] = unk_20E4758;
  v28[2] = xmmword_20E46E8;
  v28[3] = unk_20E46F8;
  v28[4] = xmmword_20E4708;
  v28[5] = unk_20E4718;
  *uint64_t v28 = xmmword_20E46C8;
  v28[1] = unk_20E46D8;
  qword_254E218 = (uint64_t)v28;
  qword_254E220 = (uint64_t)(v28 + 10);
  qword_254E238 = 0;
  qword_254E240 = 0;
  qword_254E230 = 0;
  unsigned int v29 = operator new(0x90uLL);
  qword_254E240 = (uint64_t)(v29 + 9);
  v29[6] = xmmword_20E47C8;
  v29[7] = unk_20E47D8;
  v29[8] = xmmword_20E47E8;
  v29[2] = xmmword_20E4788;
  v29[3] = unk_20E4798;
  v29[4] = xmmword_20E47A8;
  v29[5] = unk_20E47B8;
  *unsigned int v29 = xmmword_20E4768;
  v29[1] = unk_20E4778;
  qword_254E230 = (uint64_t)v29;
  qword_254E238 = (uint64_t)(v29 + 9);
  qword_254E250 = 0;
  unk_254E258 = 0;
  qword_254E248 = 0;
  unsigned int v30 = operator new(0x38uLL);
  qword_254E250 = (uint64_t)v30 + 56;
  unk_254E258 = (char *)v30 + 56;
  *unsigned int v30 = xmmword_20E47F8;
  v30[1] = unk_20E4808;
  void v30[2] = xmmword_20E4818;
  *((void *)v30 + 6) = 0x2506DE62CE00175;
  qword_254E248 = (uint64_t)v30;
  qword_254E268 = 0;
  unk_254E270 = 0;
  qword_254E260 = 0;
  unsigned int v31 = operator new(0x48uLL);
  qword_254E268 = (uint64_t)v31 + 72;
  unk_254E270 = (char *)v31 + 72;
  v31[2] = xmmword_20E4850;
  v31[3] = unk_20E4860;
  *((void *)v31 + 8) = 0x210551A0C7000F9;
  _OWORD *v31 = xmmword_20E4830;
  v31[1] = unk_20E4840;
  qword_254E260 = (uint64_t)v31;
  qword_254E280 = 0;
  qword_254E288 = 0;
  qword_254E278 = 0;
  unsigned int v32 = operator new(0xC0uLL);
  qword_254E288 = (uint64_t)(v32 + 12);
  v32[8] = xmmword_20E48F8;
  v32[9] = unk_20E4908;
  v32[10] = xmmword_20E4918;
  v32[11] = unk_20E4928;
  v32[4] = xmmword_20E48B8;
  v32[5] = unk_20E48C8;
  v32[6] = xmmword_20E48D8;
  v32[7] = unk_20E48E8;
  _OWORD *v32 = xmmword_20E4878;
  v32[1] = unk_20E4888;
  v32[2] = xmmword_20E4898;
  v32[3] = unk_20E48A8;
  qword_254E278 = (uint64_t)v32;
  qword_254E280 = (uint64_t)(v32 + 12);
  qword_254E298 = 0;
  qword_254E2A0 = 0;
  qword_254E290 = 0;
  unsigned int v33 = operator new(0xD0uLL);
  qword_254E2A0 = (uint64_t)(v33 + 13);
  v33[10] = xmmword_20E49D8;
  v33[11] = unk_20E49E8;
  v33[12] = xmmword_20E49F8;
  v33[6] = xmmword_20E4998;
  v33[7] = unk_20E49A8;
  v33[8] = xmmword_20E49B8;
  v33[9] = unk_20E49C8;
  v33[2] = xmmword_20E4958;
  v33[3] = unk_20E4968;
  v33[4] = xmmword_20E4978;
  v33[5] = unk_20E4988;
  *unsigned int v33 = xmmword_20E4938;
  v33[1] = unk_20E4948;
  qword_254E290 = (uint64_t)v33;
  qword_254E298 = (uint64_t)(v33 + 13);
  qword_254E2B0 = 0;
  qword_254E2B8 = 0;
  qword_254E2A8 = 0;
  unsigned int v34 = operator new(0xC0uLL);
  qword_254E2B8 = (uint64_t)(v34 + 12);
  v34[8] = xmmword_20E4A88;
  v34[9] = unk_20E4A98;
  v34[10] = xmmword_20E4AA8;
  v34[11] = unk_20E4AB8;
  v34[4] = xmmword_20E4A48;
  v34[5] = unk_20E4A58;
  v34[6] = xmmword_20E4A68;
  v34[7] = unk_20E4A78;
  _OWORD *v34 = xmmword_20E4A08;
  v34[1] = unk_20E4A18;
  v34[2] = xmmword_20E4A28;
  v34[3] = unk_20E4A38;
  qword_254E2A8 = (uint64_t)v34;
  qword_254E2B0 = (uint64_t)(v34 + 12);
  qword_254E2C8 = 0;
  qword_254E2D0 = 0;
  qword_254E2C0 = 0;
  unsigned int v35 = operator new(0xB8uLL);
  qword_254E2D0 = (uint64_t)v35 + 184;
  v35[8] = xmmword_20E4B48;
  v35[9] = unk_20E4B58;
  v35[10] = xmmword_20E4B68;
  *((void *)v35 + 22) = 0xFDAF81D1211FFFAFLL;
  v35[4] = xmmword_20E4B08;
  v35[5] = unk_20E4B18;
  v35[6] = xmmword_20E4B28;
  v35[7] = unk_20E4B38;
  *unsigned int v35 = xmmword_20E4AC8;
  v35[1] = unk_20E4AD8;
  v35[2] = xmmword_20E4AE8;
  v35[3] = unk_20E4AF8;
  qword_254E2C0 = (uint64_t)v35;
  qword_254E2C8 = (uint64_t)v35 + 184;
  qword_254E2E0 = 0;
  qword_254E2E8 = 0;
  qword_254E2D8 = 0;
  qword_254E2D8 = (uint64_t)operator new(0x160uLL);
  uint64_t v36 = qword_254E2D8 + 352;
  qword_254E2E8 = qword_254E2D8 + 352;
  memcpy((void *)qword_254E2D8, &unk_20E4B80, 0x160uLL);
  qword_254E2E0 = v36;
  qword_254E2F8 = 0;
  qword_254E300 = 0;
  qword_254E2F0 = 0;
  qword_254E2F0 = (uint64_t)operator new(0x140uLL);
  uint64_t v37 = qword_254E2F0 + 320;
  qword_254E300 = qword_254E2F0 + 320;
  memcpy((void *)qword_254E2F0, &unk_20E4CE0, 0x140uLL);
  qword_254E2F8 = v37;
  qword_254E310 = 0;
  unk_254E318 = 0;
  qword_254E308 = 0;
  unsigned int v38 = operator new(0x48uLL);
  qword_254E310 = (uint64_t)v38 + 72;
  unk_254E318 = (char *)v38 + 72;
  v38[2] = xmmword_20E4E40;
  v38[3] = unk_20E4E50;
  *((void *)v38 + 8) = 0x2005EDC8C800591;
  _OWORD *v38 = xmmword_20E4E20;
  v38[1] = unk_20E4E30;
  qword_254E308 = (uint64_t)v38;
  qword_254E328 = 0;
  unk_254E330 = 0;
  qword_254E320 = 0;
  unsigned int v39 = operator new(0x48uLL);
  qword_254E328 = (uint64_t)v39 + 72;
  unk_254E330 = (char *)v39 + 72;
  v39[2] = xmmword_20E4E88;
  v39[3] = unk_20E4E98;
  *((void *)v39 + 8) = 0x2407F9D8B10013ALL;
  *unsigned int v39 = xmmword_20E4E68;
  v39[1] = unk_20E4E78;
  qword_254E320 = (uint64_t)v39;
  qword_254E340 = 0;
  unk_254E348 = 0;
  qword_254E338 = 0;
  unsigned int v40 = operator new(0x80uLL);
  qword_254E340 = (uint64_t)(v40 + 8);
  unk_254E348 = v40 + 8;
  v40[4] = xmmword_20E4EF0;
  v40[5] = unk_20E4F00;
  v40[6] = xmmword_20E4F10;
  v40[7] = unk_20E4F20;
  _OWORD *v40 = xmmword_20E4EB0;
  v40[1] = unk_20E4EC0;
  v40[2] = xmmword_20E4ED0;
  v40[3] = unk_20E4EE0;
  qword_254E338 = (uint64_t)v40;
  qword_254E350 = 0;
  *(void *)algn_254E358 = 0;
  qword_254E360 = 0;
  unsigned int v41 = operator new(0x98uLL);
  qword_254E360 = (uint64_t)v41 + 152;
  v41[6] = xmmword_20E4F90;
  v41[7] = unk_20E4FA0;
  v41[8] = xmmword_20E4FB0;
  *((void *)v41 + 18) = 0x260844375D00060;
  v41[2] = xmmword_20E4F50;
  v41[3] = unk_20E4F60;
  v41[4] = xmmword_20E4F70;
  v41[5] = unk_20E4F80;
  *unsigned int v41 = xmmword_20E4F30;
  v41[1] = unk_20E4F40;
  qword_254E350 = (uint64_t)v41;
  *(void *)algn_254E358 = (char *)v41 + 152;
  qword_254E370 = 0;
  qword_254E378 = 0;
  qword_254E368 = 0;
  unsigned int v42 = operator new(0xC0uLL);
  qword_254E378 = (uint64_t)(v42 + 12);
  v42[8] = xmmword_20E5048;
  v42[9] = unk_20E5058;
  v42[10] = xmmword_20E5068;
  v42[11] = unk_20E5078;
  v42[4] = xmmword_20E5008;
  v42[5] = unk_20E5018;
  v42[6] = xmmword_20E5028;
  v42[7] = unk_20E5038;
  *unsigned int v42 = xmmword_20E4FC8;
  v42[1] = unk_20E4FD8;
  void v42[2] = xmmword_20E4FE8;
  v42[3] = unk_20E4FF8;
  qword_254E368 = (uint64_t)v42;
  qword_254E370 = (uint64_t)(v42 + 12);
  qword_254E388 = 0;
  qword_254E390 = 0;
  qword_254E380 = 0;
  unsigned int v43 = operator new(0xD8uLL);
  qword_254E390 = (uint64_t)v43 + 216;
  v43[10] = xmmword_20E5128;
  v43[11] = unk_20E5138;
  v43[12] = xmmword_20E5148;
  *((void *)v43 + 26) = 0x5C08A3AF1900300;
  v43[6] = xmmword_20E50E8;
  v43[7] = unk_20E50F8;
  v43[8] = xmmword_20E5108;
  v43[9] = unk_20E5118;
  v43[2] = xmmword_20E50A8;
  v43[3] = unk_20E50B8;
  v43[4] = xmmword_20E50C8;
  v43[5] = unk_20E50D8;
  *unsigned int v43 = xmmword_20E5088;
  v43[1] = unk_20E5098;
  qword_254E380 = (uint64_t)v43;
  qword_254E388 = (uint64_t)v43 + 216;
  qword_254E3A0 = 0;
  unk_254E3A8 = 0;
  qword_254E398 = 0;
  unsigned int v44 = operator new(0x58uLL);
  qword_254E3A0 = (uint64_t)v44 + 88;
  unk_254E3A8 = (char *)v44 + 88;
  v44[2] = xmmword_20E5180;
  v44[3] = unk_20E5190;
  v44[4] = xmmword_20E51A0;
  *((void *)v44 + 10) = 0x25070F44FC00001;
  *unsigned int v44 = xmmword_20E5160;
  v44[1] = unk_20E5170;
  qword_254E398 = (uint64_t)v44;
  qword_254E3B8 = 0;
  qword_254E3C0 = 0;
  qword_254E3B0 = 0;
  unsigned int v45 = operator new(0xF8uLL);
  qword_254E3C0 = (uint64_t)v45 + 248;
  v45[12] = xmmword_20E5278;
  v45[13] = unk_20E5288;
  v45[14] = xmmword_20E5298;
  *((void *)v45 + 30) = 0x2506383E5A00722;
  v45[8] = xmmword_20E5238;
  v45[9] = unk_20E5248;
  v45[10] = xmmword_20E5258;
  v45[11] = unk_20E5268;
  v45[4] = xmmword_20E51F8;
  v45[5] = unk_20E5208;
  v45[6] = xmmword_20E5218;
  v45[7] = unk_20E5228;
  *unsigned int v45 = xmmword_20E51B8;
  v45[1] = unk_20E51C8;
  void v45[2] = xmmword_20E51D8;
  v45[3] = unk_20E51E8;
  qword_254E3B0 = (uint64_t)v45;
  qword_254E3B8 = (uint64_t)v45 + 248;
  qword_254E3D0 = 0;
  qword_254E3D8 = 0;
  qword_254E3C8 = 0;
  qword_254E3C8 = (uint64_t)operator new(0x120uLL);
  uint64_t v46 = qword_254E3C8 + 288;
  qword_254E3D8 = qword_254E3C8 + 288;
  memcpy((void *)qword_254E3C8, &unk_20E52B0, 0x120uLL);
  qword_254E3D0 = v46;
  qword_254E3E8 = 0;
  qword_254E3F0 = 0;
  qword_254E3E0 = 0;
  unsigned int v47 = operator new(0xB0uLL);
  qword_254E3F0 = (uint64_t)(v47 + 11);
  unsigned char v47[8] = xmmword_20E5450;
  v47[9] = unk_20E5460;
  v47[10] = xmmword_20E5470;
  v47[4] = xmmword_20E5410;
  v47[5] = unk_20E5420;
  v47[6] = xmmword_20E5430;
  v47[7] = unk_20E5440;
  *unsigned int v47 = xmmword_20E53D0;
  v47[1] = unk_20E53E0;
  v47[2] = xmmword_20E53F0;
  v47[3] = unk_20E5400;
  qword_254E3E0 = (uint64_t)v47;
  qword_254E3E8 = (uint64_t)(v47 + 11);
  qword_254E400 = 0;
  qword_254E408 = 0;
  qword_254E3F8 = 0;
  uint64_t v48 = operator new(0xB0uLL);
  qword_254E408 = (uint64_t)(v48 + 11);
  v48[8] = xmmword_20E5500;
  v48[9] = unk_20E5510;
  v48[10] = xmmword_20E5520;
  v48[4] = xmmword_20E54C0;
  v48[5] = unk_20E54D0;
  v48[6] = xmmword_20E54E0;
  v48[7] = unk_20E54F0;
  *uint64_t v48 = xmmword_20E5480;
  v48[1] = unk_20E5490;
  void v48[2] = xmmword_20E54A0;
  v48[3] = unk_20E54B0;
  qword_254E3F8 = (uint64_t)v48;
  qword_254E400 = (uint64_t)(v48 + 11);
  qword_254E418 = 0;
  unk_254E420 = 0;
  qword_254E410 = 0;
  unsigned int v49 = operator new(0x68uLL);
  qword_254E418 = (uint64_t)v49 + 104;
  unk_254E420 = (char *)v49 + 104;
  v49[4] = xmmword_20E5570;
  v49[5] = unk_20E5580;
  *((void *)v49 + 12) = 0x240616319F000DCLL;
  *unsigned int v49 = xmmword_20E5530;
  v49[1] = unk_20E5540;
  v49[2] = xmmword_20E5550;
  v49[3] = unk_20E5560;
  qword_254E410 = (uint64_t)v49;
  qword_254E428 = 0;
  qword_254E430 = 0;
  qword_254E438 = 0;
  size_t v50 = operator new(0x80uLL);
  qword_254E430 = (uint64_t)(v50 + 8);
  qword_254E438 = (uint64_t)(v50 + 8);
  v50[4] = xmmword_20E55D8;
  v50[5] = unk_20E55E8;
  v50[6] = xmmword_20E55F8;
  v50[7] = unk_20E5608;
  *size_t v50 = xmmword_20E5598;
  v50[1] = unk_20E55A8;
  v50[2] = xmmword_20E55B8;
  v50[3] = unk_20E55C8;
  qword_254E428 = (uint64_t)v50;
  qword_254E440 = 0;
  qword_254E448 = 0;
  qword_254E450 = 0;
  uint64_t v51 = operator new(0x80uLL);
  qword_254E448 = (uint64_t)(v51 + 8);
  qword_254E450 = (uint64_t)(v51 + 8);
  v51[4] = xmmword_20E5658;
  v51[5] = unk_20E5668;
  v51[6] = xmmword_20E5678;
  v51[7] = unk_20E5688;
  *uint64_t v51 = xmmword_20E5618;
  v51[1] = unk_20E5628;
  v51[2] = xmmword_20E5638;
  v51[3] = unk_20E5648;
  qword_254E440 = (uint64_t)v51;
  qword_254E458 = 0;
  qword_254E460 = 0;
  qword_254E468 = 0;
  unsigned int v52 = operator new(0x78uLL);
  qword_254E460 = (uint64_t)v52 + 120;
  qword_254E468 = (uint64_t)v52 + 120;
  v52[4] = xmmword_20E56D8;
  v52[5] = unk_20E56E8;
  v52[6] = xmmword_20E56F8;
  *((void *)v52 + 14) = 0x2407E3662100089;
  *unsigned int v52 = xmmword_20E5698;
  v52[1] = unk_20E56A8;
  v52[2] = xmmword_20E56B8;
  v52[3] = unk_20E56C8;
  qword_254E458 = (uint64_t)v52;
  qword_254E470 = 0;
  *(void *)algn_254E478 = 0;
  qword_254E480 = 0;
  unsigned int v53 = operator new(0x88uLL);
  qword_254E480 = (uint64_t)v53 + 136;
  v53[6] = xmmword_20E5770;
  v53[7] = unk_20E5780;
  *((void *)v53 + 16) = 0x2005ECA15C00237;
  v53[2] = xmmword_20E5730;
  v53[3] = unk_20E5740;
  v53[4] = xmmword_20E5750;
  v53[5] = unk_20E5760;
  *unsigned int v53 = xmmword_20E5710;
  v53[1] = unk_20E5720;
  qword_254E470 = (uint64_t)v53;
  *(void *)algn_254E478 = (char *)v53 + 136;
  qword_254E490 = 0;
  qword_254E498 = 0;
  qword_254E488 = 0;
  unsigned int v54 = operator new(0xC8uLL);
  qword_254E498 = (uint64_t)v54 + 200;
  v54[10] = xmmword_20E5838;
  v54[11] = unk_20E5848;
  *((void *)v54 + 24) = 0x5C08A3AF120126FLL;
  v54[6] = xmmword_20E57F8;
  v54[7] = unk_20E5808;
  v54[8] = xmmword_20E5818;
  v54[9] = unk_20E5828;
  v54[2] = xmmword_20E57B8;
  v54[3] = unk_20E57C8;
  v54[4] = xmmword_20E57D8;
  v54[5] = unk_20E57E8;
  *unsigned int v54 = xmmword_20E5798;
  v54[1] = unk_20E57A8;
  qword_254E488 = (uint64_t)v54;
  qword_254E490 = (uint64_t)v54 + 200;
  qword_254E4A8 = 0;
  qword_254E4B0 = 0;
  qword_254E4A0 = 0;
  qword_254E4A0 = (uint64_t)operator new(0x200uLL);
  uint64_t v55 = qword_254E4A0 + 512;
  qword_254E4B0 = qword_254E4A0 + 512;
  memcpy((void *)qword_254E4A0, &unk_20E5860, 0x200uLL);
  qword_254E4A8 = v55;
  qword_254E4C0 = 0;
  qword_254E4C8 = 0;
  qword_254E4B8 = 0;
  qword_254E4B8 = (uint64_t)operator new(0x208uLL);
  uint64_t v56 = qword_254E4B8 + 520;
  qword_254E4C8 = qword_254E4B8 + 520;
  memcpy((void *)qword_254E4B8, &unk_20E5A60, 0x208uLL);
  qword_254E4C0 = v56;
  qword_254E4D8 = 0;
  qword_254E4E0 = 0;
  qword_254E4D0 = 0;
  qword_254E4D0 = (uint64_t)operator new(0x1150uLL);
  uint64_t v57 = qword_254E4D0 + 4432;
  qword_254E4E0 = qword_254E4D0 + 4432;
  uint64_t result = memcpy((void *)qword_254E4D0, &unk_20E5C68, 0x1150uLL);
  qword_254E4D8 = v57;
  return result;
}

void sub_3B4FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if ((void)xmmword_2557800) {
    sub_20A7DF4((void **)xmmword_2557800);
  }
  uint64_t v37 = (void *)xmmword_25577F0;
  *(void *)&xmmword_25577F0 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_3B5048(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  uint64_t v45 = 0;
  v46[0].n128_u64[0] = (unint64_t)operator new(0x19uLL);
  *(__n128 *)((char *)v46 + 8) = (__n128)xmmword_20B9250;
  strcpy((char *)v46[0].n128_u64[0], "FineGrainedETAAnalytics");
  long long __p = 0;
  unsigned int v44 = 0;
  uint64_t v4 = sub_374CDC(a2, (uint64_t)v46, (uint64_t *)&__p);
  uint64_t v5 = (void **)__p;
  if (__p)
  {
    unsigned int v6 = v44;
    uint64_t v7 = __p;
    if (v44 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      uint64_t v7 = __p;
    }
    unsigned int v44 = v5;
    operator delete(v7);
  }
  if (v46[1].n128_i8[7] < 0) {
    operator delete((void *)v46[0].n128_u64[0]);
  }
  v46[1].n128_u8[7] = 15;
  uint64_t v45 = 0;
  strcpy((char *)v46, "CustomScenarios");
  long long __p = 0;
  unsigned int v44 = 0;
  uint64_t v8 = sub_374CDC(a2, (uint64_t)v46, (uint64_t *)&__p);
  HIBYTE(v42) = 9;
  strcpy((char *)v41, "scenarios");
  unsigned int v39 = (void *)sub_560F4(v8, (uint64_t)v41);
  if (SHIBYTE(v42) < 0) {
    operator delete(v41[0]);
  }
  unsigned int v9 = (void **)__p;
  if (__p)
  {
    unsigned int v10 = v44;
    unsigned int v11 = __p;
    if (v44 != __p)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      unsigned int v11 = __p;
    }
    unsigned int v44 = v9;
    operator delete(v11);
  }
  if (v46[1].n128_i8[7] < 0) {
    operator delete((void *)v46[0].n128_u64[0]);
  }
  v46[1].n128_u8[7] = 16;
  strcpy((char *)v46, "active_scenarios");
  unsigned int v12 = (uint64_t *)sub_5C4AC(v4, (uint64_t)v46);
  unsigned int v13 = v12;
  if (v46[1].n128_i8[7] < 0)
  {
    operator delete((void *)v46[0].n128_u64[0]);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    if (*v13 == v15) {
      return a1;
    }
    while (1)
    {
LABEL_31:
      if (*(_DWORD *)(v14 + 8))
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      unsigned int v17 = sub_58070(v39, *(void *)v14);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6920, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_24F6920))
      {
        dword_24F68A0 = 0;
        unk_24F68A8 = 0u;
        unk_24F68B8 = 0u;
        dword_24F68C8 = 1065353216;
        xmmword_24F68D0 = 0u;
        unk_24F68E0 = 0u;
        dword_24F68F0 = 1065353216;
        unk_24F68F8 = 0u;
        unk_24F6908 = 0u;
        dword_24F6918 = 1065353216;
        __cxa_guard_release(&qword_24F6920);
      }
      unsigned int v40 = sub_3AF004((uint64_t)&dword_24F68A0, (uint64_t)(v17 + 2));
      if (*((_DWORD *)v17 + 12) != 2)
      {
        uint64_t v37 = __cxa_allocate_exception(8uLL);
        void *v37 = &off_23FDF58;
      }
      unsigned int v18 = (void *)v17[5];
      v46[1].n128_u8[7] = 14;
      strcpy((char *)v46, "bounding_boxes");
      v41[0] = 0;
      v41[1] = 0;
      uint64_t v42 = 0;
      unsigned int v19 = sub_58070(v18, (uint64_t)v46);
      if (v19 && *((_DWORD *)v19 + 12) == 3) {
        unsigned int v20 = (uint64_t *)v19[5];
      }
      else {
        unsigned int v20 = (uint64_t *)v41;
      }
      long long __p = 0;
      unsigned int v44 = 0;
      uint64_t v45 = 0;
      sub_54DE8(&__p, *v20, v20[1], (v20[1] - *v20) >> 4);
      if (v46[1].n128_i8[7] < 0) {
        operator delete((void *)v46[0].n128_u64[0]);
      }
      v46[0].n128_u64[0] = (unint64_t)&v40;
      unsigned int v21 = sub_3B594C(a1, &v40, (uint64_t)&unk_20F06E0, v46);
      int v23 = (void **)__p;
      unsigned int v22 = v44;
      if (__p != v44) {
        break;
      }
LABEL_49:
      v46[0].n128_u64[0] = (unint64_t)&v40;
      uint64_t v27 = sub_3B594C(a1, &v40, (uint64_t)&unk_20F06E0, v46);
      if (v27[3] == v27[4])
      {
        v46[0].n128_u64[0] = (unint64_t)&v40;
        uint64_t v28 = (char **)sub_3B594C(a1, &v40, (uint64_t)&unk_20F06E0, v46);
        sub_33E90((uint64_t)v46);
        sub_3B5710(v28 + 3, (long long *)v46);
      }
      unsigned int v29 = (void **)__p;
      if (__p)
      {
        unsigned int v30 = v44;
        uint64_t v16 = __p;
        if (v44 != __p)
        {
          do
          {
            int v31 = *((_DWORD *)v30 - 2);
            switch(v31)
            {
              case 3:
                unsigned int v34 = (uint64_t *)*(v30 - 2);
                *(v30 - 2) = 0;
                if (v34)
                {
                  sub_55500(v34);
                  goto LABEL_54;
                }
                break;
              case 2:
                uint64_t v33 = (uint64_t)*(v30 - 2);
                *(v30 - 2) = 0;
                if (v33)
                {
                  sub_5450C(v33);
                  goto LABEL_54;
                }
                break;
              case 0:
                uint64_t v32 = (uint64_t)*(v30 - 2);
                *(v30 - 2) = 0;
                if (v32)
                {
                  if (*(char *)(v32 + 23) < 0) {
                    operator delete(*(void **)v32);
                  }
LABEL_54:
                  operator delete();
                }
                break;
            }
            v30 -= 2;
          }
          while (v30 != v29);
          uint64_t v16 = __p;
        }
        unsigned int v44 = v29;
        operator delete(v16);
      }
      v14 += 16;
      if (v14 == v15) {
        return a1;
      }
    }
    unsigned int v24 = (char **)(v21 + 3);
    unsigned int v25 = (__int8 *)v21[4];
    while (1)
    {
      if (*((_DWORD *)v23 + 2))
      {
        uint64_t v36 = __cxa_allocate_exception(8uLL);
        void *v36 = &off_23FDF58;
      }
      uint64_t v26 = (uint64_t *)*v23;
      if (*((char *)*v23 + 23) < 0)
      {
        if (!v26[1])
        {
LABEL_47:
          sub_33E90((uint64_t)v46);
          goto LABEL_48;
        }
      }
      else if (!*((unsigned char *)*v23 + 23))
      {
        goto LABEL_47;
      }
      sub_33EAC(v26, (uint64_t)v46);
LABEL_48:
      unsigned int v25 = &sub_2EF6E8(v24, (uint64_t)v25, v46)[1].n128_i8[8];
      v23 += 2;
      if (v23 == v22) {
        goto LABEL_49;
      }
    }
  }
  uint64_t v14 = *v12;
  uint64_t v15 = v12[1];
  if (*v12 != v15) {
    goto LABEL_31;
  }
  return a1;
}

void sub_3B5624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
  {
    operator delete(__p);
    sub_3AB00(v25);
    _Unwind_Resume(a1);
  }
  sub_3AB00(v25);
  _Unwind_Resume(a1);
}

char *sub_3B5710(char **a1, long long *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v8 = *a1;
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)v8) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      unsigned int v13 = (char *)operator new(24 * v12);
    }
    else
    {
      unsigned int v13 = 0;
    }
    uint64_t v14 = &v13[24 * v9];
    *(_OWORD *)uint64_t v14 = *a2;
    *((void *)v14 + 2) = *((void *)a2 + 2);
    uint64_t v7 = v14 + 24;
    if (v5 != v8)
    {
      do
      {
        long long v15 = *(_OWORD *)(v5 - 24);
        *((void *)v14 - 1) = *((void *)v5 - 1);
        *(_OWORD *)(v14 - 24) = v15;
        v14 -= 24;
        v5 -= 24;
      }
      while (v5 != v8);
      uint64_t v5 = *a1;
    }
    *a1 = v14;
    a1[1] = v7;
    a1[2] = &v13[24 * v12];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    long long v6 = *a2;
    *((void *)v5 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v5 = v6;
    uint64_t v7 = v5 + 24;
  }
  a1[1] = v7;
  return v7 - 24;
}

uint64_t sub_3B5858(void *a1, unsigned int a2, _DWORD *a3, _DWORD *a4)
{
  unint64_t v6 = a1[1];
  if ((v6 & (v6 - 1)) != 0)
  {
    unint64_t v8 = a2;
    if (v6 <= a2) {
      unint64_t v8 = a2 % v6;
    }
    uint64_t v7 = *(uint64_t **)(*a1 + 8 * v8);
    do
    {
      do
        uint64_t v7 = (uint64_t *)*v7;
      while (v7[1] != a2);
    }
    while (*((_DWORD *)v7 + 4) != a2);
  }
  else
  {
    uint64_t v7 = *(uint64_t **)(*a1 + 8 * ((v6 - 1) & a2));
    do
    {
      do
        uint64_t v7 = (uint64_t *)*v7;
      while (v7[1] != a2);
    }
    while (*((_DWORD *)v7 + 4) != a2);
  }
  unint64_t v9 = (_DWORD *)v7[3];
  unint64_t v10 = (_DWORD *)v7[4];
  while (v9 != v10)
  {
    if sub_34554(v9, a3) && (sub_34554(v9, a4)) {
      return 1;
    }
    v9 += 6;
  }
  return 0;
}

void *sub_3B594C(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == v7) {
                return v11;
              }
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            unint64_t v11 = (void *)*v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  uint64_t v14 = (void *)(a1 + 16);
  unint64_t v11 = operator new(0x30uLL);
  *unint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    unint64_t v7 = v4;
  }
  else
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_36;
    }
    if (prime < v8)
    {
      unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        unint64_t v21 = std::__next_prime(v21);
      }
      else
      {
        uint64_t v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2) {
          unint64_t v21 = v23;
        }
      }
      if (prime <= v21) {
        size_t prime = v21;
      }
      if (prime < v8) {
LABEL_36:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        v7 %= v8;
      }
    }
    else
    {
      unint64_t v7 = (v8 - 1) & v7;
    }
  }
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v7);
  if (v25)
  {
    *unint64_t v11 = *v25;
LABEL_59:
    *uint64_t v25 = v11;
    goto LABEL_60;
  }
  *unint64_t v11 = *v14;
  void *v14 = v11;
  *(void *)(v24 + 8 * v7) = v14;
  if (*v11)
  {
    unint64_t v26 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v26 >= v8) {
        v26 %= v8;
      }
    }
    else
    {
      v26 &= v8 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_3B5C50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3AEA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_3B5C64()
{
  unk_25578A7 = 16641;
  word_2557890 = 65;
  byte_25578BF = 1;
  byte_25578A9 = 0;
}

uint64_t sub_3B5C8C(uint64_t a1, void *a2)
{
  HIBYTE(v8) = 7;
  strcpy((char *)&__p, "enabled");
  BOOL v4 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)a1 = v4;
  long long __p = operator new(0x20uLL);
  long long v8 = xmmword_20B91C0;
  strcpy((char *)__p, "prediction_window_min_km");
  *(void *)(a1 + 8) = sub_5CDE0(a2, &__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x20uLL);
  long long v8 = xmmword_20B8E90;
  strcpy((char *)__p, "towing_prediction_window_min_km");
  *(void *)(a1 + 16) = sub_5CDE0(a2, &__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x20uLL);
  long long v8 = xmmword_20B91C0;
  strcpy((char *)__p, "prediction_window_max_km");
  *(void *)(a1 + 24) = sub_5CDE0(a2, &__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x19uLL);
  long long v8 = xmmword_20B9250;
  strcpy((char *)__p, "max_relative_error_rate");
  double v5 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  *(double *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = 0;
  long long __p = operator new(0x20uLL);
  long long v8 = xmmword_20B8E90;
  strcpy((char *)__p, "ev_alert_suppression_window_min");
  *(_DWORD *)(a1 + 48) = sub_5D2EC(a2, &__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_3B5EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3B5EF0(uint64_t a1, uint64_t a2)
{
  HIBYTE(v11[2]) = 19;
  strcpy((char *)v11, "PredictionAnalytics");
  long long __p = 0;
  uint8x8_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v3 = sub_374CDC(a2, (uint64_t)v11, (uint64_t *)&__p);
  sub_3B5C8C(a1, v3);
  BOOL v4 = (void **)__p;
  if (__p)
  {
    double v5 = v9;
    unint64_t v6 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v5 - 1) < 0) {
          operator delete(*(v5 - 3));
        }
        v5 -= 3;
      }
      while (v5 != v4);
      unint64_t v6 = __p;
    }
    uint8x8_t v9 = v4;
    operator delete(v6);
  }
  if (SHIBYTE(v11[2]) < 0) {
    operator delete(v11[0]);
  }
  return a1;
}

void sub_3B5FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_3B600C(unsigned char *a1, uint64_t a2)
{
  if (*a1)
  {
    uint64_t v2 = (void *)sub_486CB4(a2);
    uint64_t v3 = (void **)v2[14];
    uint64_t v4 = v2[15];
    v2[18] = 0;
    unint64_t v5 = v4 - (void)v3;
    if (v5 >= 0x11)
    {
      do
      {
        operator delete(*v3);
        uint64_t v6 = v2[15];
        uint64_t v3 = (void **)(v2[14] + 8);
        v2[14] = v3;
        unint64_t v5 = v6 - (void)v3;
      }
      while (v5 > 0x10);
    }
    if (v5 >> 3 == 1)
    {
      uint64_t v7 = 85;
    }
    else
    {
      if (v5 >> 3 != 2) {
        return;
      }
      uint64_t v7 = 170;
    }
    v2[17] = v7;
  }
}

unint64_t sub_3B6094(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*a1 || (int v7 = sub_46C760((void *)a2), v8 = (void *)sub_486CB4(a4), (v9 = v8[18]) == 0))
  {
LABEL_58:
    uint64_t v24 = 0x7FFFFFFFLL;
    unsigned int v25 = 0x7FFFFFFF;
    return v25 | (unint64_t)(v24 << 32);
  }
  int v10 = v7 - 1;
  uint64_t v11 = v8[14];
  if (v8[15] == v11) {
    goto LABEL_101;
  }
  unint64_t v12 = v8[17];
  uint64_t v13 = (void *)(v11 + 8 * (v12 / 0xAA));
  unint64_t v14 = *v13 + 24 * (v12 % 0xAA);
  unint64_t v15 = v12 + v9;
  unint64_t v16 = v15 / 0xAA;
  uint64_t v17 = *(void *)(v11 + 8 * (v15 / 0xAA));
  unint64_t v18 = v15 % 0xAA;
  unint64_t v19 = v17 + 24 * v18;
  if (v14 != v19)
  {
    while (*(_DWORD *)v14 != v10)
    {
      v14 += 24;
      if (v14 - *v13 == 4080)
      {
        unint64_t v20 = v13[1];
        ++v13;
        unint64_t v14 = v20;
      }
      if (v14 == v19)
      {
        unint64_t v14 = v19;
        break;
      }
    }
  }
  if (v14 == *(void *)(v11 + 8 * v16) + 24 * v18)
  {
LABEL_101:
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v36);
      sub_188FC78(&v36, (uint64_t)"You have not arrived at a route location with a valid prediction yet. Remaining distance on route: ", 99);
      std::ostream::operator<<();
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 2u);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
      if (v39 < 0) {
        operator delete(v38);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v36);
      sub_188FC78(&v36, (uint64_t)"Current index reverse segment index=", 36);
      std::ostream::operator<<();
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 2u);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
      if (v39 < 0) {
        operator delete(v38);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v36);
      sub_188FC78(&v36, (uint64_t)"Window start reverse segment index=", 35);
      std::ostream::operator<<();
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 2u);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
      if (v39 < 0) {
        operator delete(v38);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v36);
      sub_188FC78(&v36, (uint64_t)"Window end reverse segment index=", 33);
      std::ostream::operator<<();
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 2u);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
      if (v39 < 0) {
        operator delete(v38);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    goto LABEL_58;
  }
  unint64_t v21 = (unsigned int *)nullsub_1(a3);
  int v22 = sub_4F44(v21);
  int v23 = *(_DWORD *)(v14 + 16);
  uint64_t v24 = (v23 - v22);
  unsigned int v25 = v23 - *(_DWORD *)(v14 + 8);
  uint64_t v26 = nullsub_1(a3);
  int v27 = *(unsigned __int8 *)(v14 + 20);
  int v28 = *(unsigned __int8 *)(v14 + 21);
  sub_40A44C(v26);
  sub_53FA4(v26);
  if (v27 && sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v36);
    sub_188FC78(&v36, (uint64_t)"Historical prediction was produced using stale ev info.", 55);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 2u);
    if (v35 < 0) {
      operator delete(__p[0]);
    }
    if (v39 < 0) {
      operator delete(v38);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (v28 && sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v36);
    sub_188FC78(&v36, (uint64_t)"Historical prediction was produced during charging.", 51);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 2u);
    if (v35 < 0) {
      operator delete(__p[0]);
    }
    if (v39 < 0) {
      operator delete(v38);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (*(_DWORD *)(a2 + 152) != 0x7FFFFFFF && *(_DWORD *)(a2 + 188) != 0x7FFFFFFF && sub_40A45C((int *)(a2 + 160)))
  {
    int v29 = *(_DWORD *)(a2 + 264);
    if (v29 != -1)
    {
      if (v29 == 1)
      {
        if (*(void *)(a2 + 256) <= 0xFFFFFFFEFFFFFFFFLL && *(void *)(a2 + 256)) {
          goto LABEL_74;
        }
      }
      else
      {
        if (v29) {
          goto LABEL_98;
        }
        if (*(void *)(a2 + 256) != -1) {
          goto LABEL_74;
        }
      }
    }
  }
  if (*(_DWORD *)(a2 + 312) == 0x7FFFFFFF) {
    goto LABEL_72;
  }
  if (*(_DWORD *)(a2 + 348) == 0x7FFFFFFF) {
    goto LABEL_72;
  }
  if (!sub_40A45C((int *)(a2 + 320))) {
    goto LABEL_72;
  }
  int v31 = *(_DWORD *)(a2 + 424);
  if (v31 == -1) {
    goto LABEL_72;
  }
  if (v31 == 1)
  {
    if (*(void *)(a2 + 416) > 0xFFFFFFFEFFFFFFFFLL || !*(void *)(a2 + 416)) {
      goto LABEL_72;
    }
LABEL_74:
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v36);
      sub_188FC78(&v36, (uint64_t)"Historical predictions might be skewed due to charging on the route.", 68);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 2u);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
      if (v39 < 0) {
        operator delete(v38);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    goto LABEL_80;
  }
  if (v31)
  {
LABEL_98:
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_23FDF58;
  }
  if (*(void *)(a2 + 416) != -1) {
    goto LABEL_74;
  }
LABEL_72:
  int v32 = sub_63A048(a3);
  if (v28 || v32) {
    goto LABEL_74;
  }
LABEL_80:
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v36);
    sub_188FC78(&v36, (uint64_t)"Historical prediction relative error rate: ", 43);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 2u);
    if (v35 < 0) {
      operator delete(__p[0]);
    }
    if (v39 < 0) {
      operator delete(v38);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v36);
    sub_188FC78(&v36, (uint64_t)"Historical prediction error rate: ", 34);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 2u);
    if (v35 < 0) {
      operator delete(__p[0]);
    }
    if (v39 < 0) {
      operator delete(v38);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v36);
    sub_188FC78(&v36, (uint64_t)"Historical prediction error energy (Wh): ", 41);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 2u);
    if (v35 < 0) {
      operator delete(__p[0]);
    }
    if (v39 < 0) {
      operator delete(v38);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return v25 | (unint64_t)(v24 << 32);
}

void sub_3B7154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_3B732C(unsigned char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*a1)
  {
    long long v8 = a1;
    int v64 = *(_DWORD *)(sub_37B3A8(a4) + 4);
    sub_474F54((uint64_t)(a2 + 56), 0, v82);
    sub_47537C((uint64_t)v82, 1, (uint64_t)v83);
    sub_474FC0((uint64_t)(a2 + 56), 0, v82);
    uint64_t v79 = 0;
    unsigned int v80 = 0;
    uint64_t v81 = 0;
    v78[0] = v83[0];
    v78[1] = v83[1];
    v77[0] = v82[0];
    v77[1] = v82[1];
    *(void *)uint64_t v76 = &v79;
    while (sub_475430((uint64_t)v78, (uint64_t)v77))
    {
      uint64_t v9 = (unsigned int *)nullsub_1(v78);
      LODWORD(__p) = sub_4F44(v9);
      sub_3B7B3C((void ***)v76, &__p);
      sub_475300((uint64_t)v78);
    }
    *(void *)uint64_t v76 = sub_475024((uint64_t)(a2 + 56));
    *(_DWORD *)&v76[8] = v10;
    LODWORD(__p) = sub_4F44((unsigned int *)v76);
    sub_3B79D0((void **)&v79, &__p);
    sub_46B058();
    unint64_t v12 = v11;
    unint64_t v14 = v13;
    unsigned int v71 = (int *)a2[66];
    char v69 = v79;
    sub_46B060();
    unsigned int v68 = v15;
    unint64_t v17 = v16;
    int v18 = sub_46C760(a2);
    unint64_t v19 = (void *)sub_486CB4(a5);
    unint64_t v20 = v19;
    unint64_t v66 = v17;
    unsigned int v21 = v18 - 1;
    uint64_t v22 = v19[18];
    uint64_t v63 = a4;
    if (v22)
    {
      int v23 = (void **)v19[14];
      unint64_t v24 = v19[17];
      while (1)
      {
        --v22;
        if (*((_DWORD *)v23[v24 / 0xAA] + 6 * (v24 % 0xAA)) <= v21) {
          break;
        }
        v20[17] = ++v24;
        v20[18] = v22;
        if (v24 >= 0x154)
        {
          operator delete(*v23);
          int v23 = (void **)(v20[14] + 8);
          v20[14] = v23;
          uint64_t v22 = v20[18];
          unint64_t v24 = v20[17] - 170;
          v20[17] = v24;
        }
        if (!v22) {
          goto LABEL_10;
        }
      }
      uint64_t v26 = 0;
      uint64_t v25 = *((unsigned int *)v23[(v22 + v24) / 0xAA] + 6 * ((v22 + v24) % 0xAA));
    }
    else
    {
LABEL_10:
      uint64_t v25 = 0;
      uint64_t v26 = 1;
    }
    uint64_t v27 = 0;
    int v70 = v64;
    int v67 = v12;
    unsigned int v62 = v8;
    while (1)
    {
      if (v12)
      {
        unint64_t v29 = sub_46C760(v12);
        BOOL v30 = v14 < v29;
        if (!v68)
        {
          if (v14 >= v29) {
            goto LABEL_64;
          }
          goto LABEL_28;
        }
      }
      else
      {
        if (!v68) {
          goto LABEL_64;
        }
        BOOL v30 = 0;
      }
      unint64_t v31 = sub_46C760(v68);
      if (v66 < v31 && v30)
      {
        uint64_t v33 = sub_46C8EC(v12, v14);
        if (v33 == sub_46C8EC(v68, v66)) {
          goto LABEL_64;
        }
      }
      else if (((v30 ^ (v66 < v31)) & 1) == 0)
      {
        goto LABEL_64;
      }
LABEL_28:
      unsigned int v34 = (void *)sub_46C8EC(v12, v14);
      char v35 = (unsigned __int16 *)(*v34 - *(int *)*v34);
      if (*v35 >= 9u && (uint64_t v36 = v35[4]) != 0) {
        uint64_t v37 = *(unsigned int *)(*v34 + v36);
      }
      else {
        uint64_t v37 = 0;
      }
      int v38 = *v71;
      if (*v71 < 0) {
        char v39 = -5;
      }
      else {
        char v39 = 5;
      }
      int v40 = sub_DAFBF8(a3);
      v27 += v37;
      int v41 = 103 * (char)(v39 + v38 % 10);
      v70 += v38 / 10 + ((v41 >> 15) & 1) + (v41 >> 10);
      uint64_t v42 = 8;
      if (v40) {
        uint64_t v42 = 16;
      }
      uint64_t v43 = *(void *)&v8[v42];
      if (v21 < v25) {
        char v44 = 1;
      }
      else {
        char v44 = v26;
      }
      unint64_t v12 = v67;
      if (v27 >= v43 && (v44 & 1) != 0)
      {
        int v45 = *v69;
        if (*v69 == 0x7FFFFFFF)
        {
          uint64_t v46 = nullsub_1(a3);
          int v45 = sub_53FA4(v46);
        }
        unint64_t v65 = v14;
        uint64_t v47 = v25;
        uint64_t v48 = v26;
        v76[23] = 9;
        uint64_t v75 = 0;
        strcpy(v76, "EVRouting");
        long long __p = 0;
        unsigned int v74 = 0;
        unsigned int v49 = sub_374CDC(v63, (uint64_t)v76, (uint64_t *)&__p);
        size_t v50 = (void **)__p;
        if (__p)
        {
          uint64_t v51 = v74;
          unsigned int v52 = __p;
          if (v74 != __p)
          {
            do
            {
              if (*((char *)v51 - 1) < 0) {
                operator delete(*(v51 - 3));
              }
              v51 -= 3;
            }
            while (v51 != v50);
            unsigned int v52 = __p;
          }
          unsigned int v74 = v50;
          operator delete(v52);
        }
        if ((v76[23] & 0x80000000) != 0) {
          operator delete(*(void **)v76);
        }
        *(void *)uint64_t v76 = operator new(0x20uLL);
        *(_OWORD *)&v76[8] = xmmword_20B91A0;
        strcpy(*(char **)v76, "ev_info_staleness_limit_min");
        int v53 = sub_5D2EC(v49, v76);
        if ((v76[23] & 0x80000000) != 0) {
          operator delete(*(void **)v76);
        }
        BOOL v54 = !sub_DAFBE4(a3) || (int)sub_46CABC(a3) > v53;
        uint64_t v55 = (unsigned int *)nullsub_1(a3);
        int v56 = sub_4F44(v55);
        BOOL v57 = sub_DAFBE4(a3);
        char v58 = sub_63A048(a3);
        uint64_t v59 = v20[14];
        uint64_t v60 = v20[15] == v59 ? 0 : 170 * ((v20[15] - v59) >> 3) - 1;
        unint64_t v61 = v20[18] + v20[17];
        if (v60 == v61)
        {
          sub_3B7CB4((uint64_t)(v20 + 13));
          uint64_t v59 = v20[14];
          unint64_t v61 = v20[18] + v20[17];
        }
        unint64_t v28 = *(void *)(v59 + 8 * (v61 / 0xAA)) + 24 * (v61 % 0xAA);
        *(_DWORD *)unint64_t v28 = v21;
        *(_DWORD *)(v28 + 4) = v70;
        *(_DWORD *)(v28 + 8) = v45;
        *(_DWORD *)(v28 + 12) = v64;
        *(_DWORD *)(v28 + 16) = v56;
        *(unsigned char *)(v28 + 20) = v54 || !v57;
        *(unsigned char *)(v28 + 21) = v58;
        ++v20[18];
        long long v8 = v62;
        unint64_t v12 = v67;
        uint64_t v26 = v48;
        uint64_t v25 = v47;
        unint64_t v14 = v65;
        if (v27 > *((void *)v62 + 3))
        {
LABEL_64:
          if (v79)
          {
            unsigned int v80 = v79;
            operator delete(v79);
          }
          return;
        }
      }
      --v21;
      ++v14;
      ++v71;
      ++v69;
    }
  }
}

void sub_3B793C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v33 = *(void **)(v31 - 176);
  if (v33)
  {
    *(void *)(v31 - 168) = v33;
    operator delete(v33);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_3B79D0(void **a1, _DWORD *a2)
{
  unint64_t v5 = (char *)a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  uint64_t v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    long long v8 = (char *)*a1;
    uint64_t v9 = v5 - (unsigned char *)*a1;
    uint64_t v10 = v9 >> 2;
    unint64_t v11 = (v9 >> 2) + 1;
    if (v11 >> 62) {
      sub_2E00();
    }
    uint64_t v12 = v4 - (void)v8;
    if (v12 >> 1 > v11) {
      unint64_t v11 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 62) {
        sub_188D718();
      }
      unint64_t v14 = operator new(4 * v13);
    }
    else
    {
      unint64_t v14 = 0;
    }
    unint64_t v15 = &v14[4 * v10];
    _DWORD *v15 = *a2;
    int v7 = v15 + 1;
    if (v5 != v8)
    {
      unint64_t v16 = v5 - v8 - 4;
      if (v16 < 0x2C) {
        goto LABEL_28;
      }
      if ((unint64_t)(v5 - v14 - v9) < 0x20) {
        goto LABEL_28;
      }
      uint64_t v17 = (v16 >> 2) + 1;
      uint64_t v18 = 4 * (v17 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v6 = &v5[-v18];
      unint64_t v15 = (_DWORD *)((char *)v15 - v18);
      unint64_t v19 = &v14[4 * v10 - 16];
      unint64_t v20 = (long long *)(v5 - 16);
      uint64_t v21 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v22 = *v20;
        *(v19 - 1) = *(v20 - 1);
        *unint64_t v19 = v22;
        v19 -= 2;
        v20 -= 2;
        v21 -= 8;
      }
      while (v21);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_28:
        do
        {
          int v23 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *--unint64_t v15 = v23;
        }
        while (v6 != v8);
      }
      uint64_t v6 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v7;
    a1[2] = &v14[4 * v13];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v5 = *a2;
    int v7 = v5 + 4;
  }
  a1[1] = v7;
  return v7 - 1;
}

void ***sub_3B7B3C(void ***a1, _DWORD *a2)
{
  unint64_t v4 = *a1;
  uint64_t v6 = (char *)(*a1)[1];
  unint64_t v5 = (unint64_t)(*a1)[2];
  int v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v9 = (char *)*v4;
    uint64_t v10 = v6 - (unsigned char *)*v4;
    uint64_t v11 = v10 >> 2;
    unint64_t v12 = (v10 >> 2) + 1;
    if (v12 >> 62) {
      sub_2E00();
    }
    uint64_t v13 = v5 - (void)v9;
    if (v13 >> 1 > v12) {
      unint64_t v12 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 62) {
        sub_188D718();
      }
      unint64_t v15 = operator new(4 * v14);
    }
    else
    {
      unint64_t v15 = 0;
    }
    unint64_t v16 = &v15[4 * v11];
    _DWORD *v16 = *a2;
    long long v8 = v16 + 1;
    if (v6 != v9)
    {
      unint64_t v17 = v6 - v9 - 4;
      if (v17 < 0x2C) {
        goto LABEL_28;
      }
      if ((unint64_t)(v6 - v15 - v10) < 0x20) {
        goto LABEL_28;
      }
      uint64_t v18 = (v17 >> 2) + 1;
      uint64_t v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
      int v7 = &v6[-v19];
      unint64_t v16 = (_DWORD *)((char *)v16 - v19);
      unint64_t v20 = &v15[4 * v11 - 16];
      uint64_t v21 = (long long *)(v6 - 16);
      uint64_t v22 = v18 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v23 = *v21;
        *(v20 - 1) = *(v21 - 1);
        *unint64_t v20 = v23;
        v20 -= 2;
        v21 -= 2;
        v22 -= 8;
      }
      while (v22);
      if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_28:
        do
        {
          int v24 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *--unint64_t v16 = v24;
        }
        while (v7 != v9);
      }
      int v7 = (char *)*v4;
    }
    uint64_t *v4 = v16;
    v4[1] = v8;
    v4[2] = &v15[4 * v14];
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v6 = *a2;
    long long v8 = v6 + 4;
  }
  v4[1] = v8;
  return a1;
}

void sub_3B7CB4(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    unint64_t v5 = *(char **)(a1 + 16);
    int v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_80:
      *(void *)unint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v31 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v31 = 1;
      }
      if (!(v31 >> 61))
      {
        unint64_t v32 = v31 >> 2;
        uint64_t v33 = 8 * v31;
        unsigned int v34 = (char *)operator new(8 * v31);
        char v35 = &v34[8 * v32];
        uint64_t v36 = &v34[v33];
        int64_t v38 = v5 - v7;
        BOOL v37 = v5 == v7;
        unint64_t v5 = v35;
        if (!v37)
        {
          unint64_t v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            unsigned int v74 = &v34[8 * v32];
            int v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              uint64_t v75 = (v39 >> 3) + 1;
              uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              int v40 = &v35[v76];
              v7 += v76;
              uint64_t v77 = (long long *)(v6 + 3);
              unsigned int v78 = v74 + 16;
              uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *unsigned int v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            int v40 = &v34[8 * v32];
          }
          do
          {
            uint64_t v81 = *(void *)v7;
            v7 += 8;
            *(void *)int v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_78;
      }
LABEL_89:
      sub_188D718();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    unint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      int v7 = *(char **)(a1 + 8);
    }
    unint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_80;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      unsigned int v91 = operator new(0xFF0uLL);
      sub_22368((char **)a1, &v91);
      return;
    }
    unsigned int v91 = operator new(0xFF0uLL);
    sub_224F8((void **)a1, &v91);
    int v41 = *(void **)(a1 + 8);
    unint64_t v5 = *(char **)(a1 + 16);
    int v7 = (char *)(v41 + 1);
    uint64_t v8 = *v41;
    *(void *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_80;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v42 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v42 = 1;
      }
      if (!(v42 >> 61))
      {
        unint64_t v43 = v42 >> 2;
        uint64_t v44 = 8 * v42;
        unsigned int v34 = (char *)operator new(8 * v42);
        char v35 = &v34[8 * v43];
        uint64_t v36 = &v34[v44];
        int64_t v45 = v5 - v7;
        BOOL v37 = v5 == v7;
        unint64_t v5 = v35;
        if (!v37)
        {
          unint64_t v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            unint64_t v82 = &v34[8 * v43];
            uint64_t v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              uint64_t v83 = (v46 >> 3) + 1;
              uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v47 = &v35[v84];
              v7 += v84;
              uint64_t v85 = (long long *)(v41 + 3);
              int v86 = v82 + 16;
              uint64_t v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *int v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            uint64_t v47 = &v34[8 * v43];
          }
          do
          {
            uint64_t v89 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_78:
        *(void *)a1 = v34;
        *(void *)(a1 + 8) = v35;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          unint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_80;
      }
      goto LABEL_89;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_89;
  }
  uint64_t v25 = (char *)operator new(8 * v24);
  uint64_t v26 = operator new(0xFF0uLL);
  uint64_t v27 = &v25[8 * v21];
  unint64_t v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    uint64_t v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v20 >> 2;
      }
      if (v48 >> 61) {
        sub_188D718();
      }
      unsigned int v49 = (char *)operator new(8 * v48);
      uint64_t v27 = &v49[8 * (v48 >> 2)];
      unint64_t v28 = &v49[8 * v48];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      uint64_t v25 = v49;
      *(void *)uint64_t v27 = v90;
      unint64_t v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v30 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v30 = v21 + 1;
      }
      v27 -= 8 * (v30 >> 1);
      *(void *)uint64_t v27 = v26;
      unint64_t v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    do
    {
LABEL_52:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27) {
            unint64_t v59 = 1;
          }
          else {
            unint64_t v59 = (v28 - v27) >> 2;
          }
          if (v59 >> 61) {
            sub_188D718();
          }
          uint64_t v60 = (char *)operator new(8 * v59);
          uint64_t v25 = v60;
          unint64_t v61 = (v59 + 3) >> 2;
          int v53 = &v60[8 * v61];
          int64_t v62 = v29 - v27;
          BOOL v37 = v29 == v27;
          unint64_t v29 = v53;
          if (!v37)
          {
            unint64_t v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v63 = v62 - 8;
            int v64 = &v60[8 * v61];
            unint64_t v65 = v27;
            if (v63 < 0x38) {
              goto LABEL_93;
            }
            uint64_t v66 = 8 * v61;
            int v64 = &v60[8 * v61];
            unint64_t v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20) {
              goto LABEL_93;
            }
            uint64_t v67 = (v63 >> 3) + 1;
            uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            int v64 = &v53[v68];
            unint64_t v65 = &v27[v68];
            char v69 = (long long *)(v27 + 16);
            int v70 = &v60[v66 + 16];
            uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)int v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              do
              {
                uint64_t v73 = *(void *)v65;
                v65 += 8;
                *(void *)int v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          unint64_t v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          uint64_t v55 = (v28 - v29) >> 3;
          if (v55 >= -1) {
            unint64_t v56 = v55 + 1;
          }
          else {
            unint64_t v56 = v55 + 2;
          }
          BOOL v57 = &v29[8 * (v56 >> 1)];
          int v53 = &v57[-(v29 - v27)];
          size_t v58 = v29 - v27;
          BOOL v37 = v29 == v27;
          unint64_t v29 = v57;
          if (!v37) {
            memmove(v53, v27, v58);
          }
          uint64_t v25 = v27;
        }
      }
      else
      {
        int v53 = v27;
      }
      uint64_t v54 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v53 - 1) = v54;
      uint64_t v51 = v53 - 8;
      uint64_t v27 = v51;
    }
    while (v18 != *(void *)(a1 + 8));
    goto LABEL_46;
  }
  *(void *)uint64_t v27 = v26;
  unint64_t v29 = v27 + 8;
  if (v18 != v19) {
    goto LABEL_52;
  }
LABEL_45:
  uint64_t v51 = v27;
LABEL_46:
  unsigned int v52 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v51;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v52)
  {
    operator delete(v52);
  }
}

void sub_3B8224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_3B8240(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_3B8254(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_3B826C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_3B8284()
{
  unk_25578D7 = 16641;
  word_25578C0 = 65;
  byte_25578EF = 1;
  byte_25578D9 = 0;
}

uint64_t sub_3B82AC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  *(void *)a1 = a2;
  uint64_t v10 = *a3;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a3 + 2);
  *(void *)(a1 + 8) = v10;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = a5;
  *(void *)(a1 + 40) = a6;
  *(void *)(a1 + 48) = a7;
  sub_3EA6A0(a1 + 56, a8, 2);
  uint64_t v11 = sub_3750CC(a8);
  *(_OWORD *)(a1 + 104) = 0u;
  uint64_t v12 = (void **)(a1 + 104);
  *(void *)(a1 + 96) = v11;
  uint64_t v13 = (void **)(a1 + 128);
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 152) = 0;
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "RerouteAnalytics");
  uint64_t v27 = 0;
  unint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v14 = sub_374CDC((uint64_t)a8, (uint64_t)__p, (uint64_t *)&v27);
  sub_3B9064((void *)(a1 + 160), (uint64_t)v14);
  unint64_t v15 = v27;
  if (v27)
  {
    int64_t v16 = v28;
    uint64_t v17 = v27;
    if (v28 != v27)
    {
      do
      {
        if (*((char *)v16 - 1) < 0) {
          operator delete(*(v16 - 3));
        }
        v16 -= 3;
      }
      while (v16 != v15);
      uint64_t v17 = v27;
    }
    unint64_t v28 = v15;
    operator delete(v17);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  sub_3B8654(a1, *(char **)(a1 + 24), (uint64_t *)__p);
  uint64_t v18 = *v12;
  if (*v12)
  {
    *(void *)(a1 + 112) = v18;
    operator delete(v18);
    *uint64_t v12 = 0;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)__p;
  *(void **)(a1 + 120) = __p[2];
  sub_3B8654(a1, *(char **)(a1 + 32), (uint64_t *)__p);
  uint64_t v22 = *v13;
  if (*v13)
  {
    *(void *)(a1 + 136) = v22;
    operator delete(v22);
    *uint64_t v13 = 0;
    *(void *)(a1 + 136) = 0;
    *(void *)(a1 + 144) = 0;
  }
  uint64_t v23 = __p[0];
  *(_OWORD *)(a1 + 128) = *(_OWORD *)__p;
  *(void **)(a1 + 144) = __p[2];
  if (*(void *)(a1 + 104) == *(void *)(a1 + 112))
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)__p);
      sub_188FC78(__p, (uint64_t)"Old user route is empty.", 24);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v27, 3u);
      if (SHIBYTE(v29) < 0) {
        operator delete(v27);
      }
      if (v26 < 0) {
        operator delete(__p[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
  }
  else
  {
    sub_3B8BC4((unsigned int **)(a1 + 104), *(unsigned int **)a1, 0, 0, (uint64_t)__p, (unint64_t)v23, v19, v20, v21);
    *(void **)(a1 + 152) = __p[3];
  }
  return a1;
}

void sub_3B85A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v17 - 49) < 0) {
    operator delete(*(void **)(v17 - 72));
  }
  sub_111ECAC((uint64_t)&__p);
  double v19 = *v16;
  if (*v16)
  {
    *(void *)(v14 + 136) = v19;
    operator delete(v19);
    double v20 = *v15;
    if (*v15) {
      goto LABEL_5;
    }
  }
  else
  {
    double v20 = *v15;
    if (*v15)
    {
LABEL_5:
      *(void *)(v14 + 112) = v20;
      operator delete(v20);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_3B8654(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_460358(a2, (uint64_t)&v77);
  sub_3BD6C8((uint64_t)&v70, &v77);
  int64_t v62 = a2;
  sub_3BD6C8((uint64_t)&v63, &v83);
  while (1)
  {
    if (v75 == v76 || __p == v69)
    {
      if ((v75 == v76) == (__p == v69)) {
        break;
      }
      goto LABEL_23;
    }
    uint64_t v8 = v70;
    if (v72 != v65) {
      goto LABEL_24;
    }
    if (v70)
    {
      unint64_t v9 = v71;
      int v10 = v9 < sub_46C760(v70);
      uint64_t v11 = v63;
      if (!v63) {
        goto LABEL_21;
      }
    }
    else
    {
      int v10 = 0;
      uint64_t v11 = v63;
      if (!v63)
      {
LABEL_21:
        int v14 = 0;
        goto LABEL_22;
      }
    }
    unint64_t v12 = v64;
    unint64_t v13 = sub_46C760(v11);
    int v14 = v12 < v13;
    if (v12 < v13) {
      int v15 = v10;
    }
    else {
      int v15 = 0;
    }
    if (v15 == 1)
    {
      uint64_t v16 = sub_46C8EC(v70, v71);
      if (v16 == sub_46C8EC(v63, v64)) {
        break;
      }
      goto LABEL_23;
    }
LABEL_22:
    if (v10 == v14) {
      break;
    }
LABEL_23:
    uint64_t v8 = v70;
LABEL_24:
    uint64_t v17 = sub_46C8EC(v8, v71);
    sub_2954EC(*(void *)(a1 + 96), *(void *)(v17 + 32), (uint64_t)v88);
    uint64_t v18 = v89;
    if (v89 != v90)
    {
      unint64_t v19 = sub_2E1AA4((uint64_t)v88);
      unsigned int v20 = v19;
      unint64_t v21 = v19 & 0xFFFFFFFF00000000;
      uint64_t v18 = v89;
      uint64_t v22 = v20;
      int v24 = v23;
      if (!v89) {
        goto LABEL_27;
      }
LABEL_26:
      uint64_t v90 = v18;
      operator delete(v18);
      goto LABEL_27;
    }
    unint64_t v21 = 0xFFFFFFFF00000000;
    uint64_t v22 = 0xFFFFFFFFLL;
    int v24 = 0x7FFFFFFF;
    if (v89) {
      goto LABEL_26;
    }
LABEL_27:
    unint64_t v25 = v21 | v22;
    uint64_t v27 = (char *)a3[1];
    unint64_t v26 = a3[2];
    if ((unint64_t)v27 < v26)
    {
      *(void *)uint64_t v27 = v25;
      *((_DWORD *)v27 + 2) = v24;
      uint64_t v6 = v27 + 12;
      goto LABEL_3;
    }
    unint64_t v28 = (char *)*a3;
    unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v27[-*a3] >> 2);
    unint64_t v30 = v29 + 1;
    if (v29 + 1 > 0x1555555555555555) {
      sub_2E00();
    }
    unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - (void)v28) >> 2);
    if (2 * v31 > v30) {
      unint64_t v30 = 2 * v31;
    }
    if (v31 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v32 = 0x1555555555555555;
    }
    else {
      unint64_t v32 = v30;
    }
    if (v32)
    {
      if (v32 > 0x1555555555555555) {
        sub_188D718();
      }
      uint64_t v33 = (char *)operator new(12 * v32);
      uint64_t v34 = (uint64_t)&v33[12 * v29];
      *(void *)uint64_t v34 = v25;
      *(_DWORD *)(v34 + 8) = v24;
      uint64_t v35 = v34;
      if (v27 == v28)
      {
LABEL_37:
        uint64_t v36 = &v33[12 * v32];
        uint64_t v6 = (char *)(v34 + 12);
        *a3 = v35;
        a3[1] = v34 + 12;
        a3[2] = (uint64_t)v36;
        if (v27) {
          goto LABEL_44;
        }
        goto LABEL_3;
      }
    }
    else
    {
      uint64_t v33 = 0;
      uint64_t v34 = 4 * ((uint64_t)&v27[-*a3] >> 2);
      *(void *)uint64_t v34 = v25;
      *(_DWORD *)(v34 + 8) = v24;
      uint64_t v35 = 12 * v29;
      if (v27 == v28) {
        goto LABEL_37;
      }
    }
    do
    {
      uint64_t v37 = *(void *)(v27 - 12);
      v27 -= 12;
      int v38 = *((_DWORD *)v27 + 2);
      *(void *)(v35 - 12) = v37;
      v35 -= 12;
      *(_DWORD *)(v35 + 8) = v38;
    }
    while (v27 != v28);
    uint64_t v27 = (char *)*a3;
    unint64_t v39 = &v33[12 * v32];
    uint64_t v6 = (char *)(v34 + 12);
    *a3 = v35;
    a3[1] = v34 + 12;
    a3[2] = (uint64_t)v39;
    if (v27) {
LABEL_44:
    }
      operator delete(v27);
LABEL_3:
    a3[1] = (uint64_t)v6;
    sub_39EBB4(&v70);
  }
  if (__p)
  {
    char v69 = __p;
    operator delete(__p);
  }
  if (v66)
  {
    uint64_t v67 = v66;
    operator delete(v66);
  }
  if (v75)
  {
    uint64_t v76 = v75;
    operator delete(v75);
  }
  if (v73)
  {
    unsigned int v74 = v73;
    operator delete(v73);
  }
  if (v86)
  {
    uint64_t v87 = v86;
    operator delete(v86);
  }
  if (v84)
  {
    uint64_t v85 = v84;
    operator delete(v84);
  }
  if (v81)
  {
    unint64_t v82 = v81;
    operator delete(v81);
  }
  if (v79)
  {
    long long v80 = v79;
    operator delete(v79);
  }
  if (!sub_45FB38(v62))
  {
    uint64_t v40 = *(void *)(a1 + 96);
    uint64_t v41 = sub_45FC70((uint64_t)v62);
    sub_2954EC(v40, *(void *)(v41 + 32), (uint64_t)&v77);
    unint64_t v42 = (void *)*((void *)&v77 + 1);
    if (*((void **)&v77 + 1) == v78)
    {
      int v46 = 0x7FFFFFFF;
      unint64_t v47 = 0xFFFFFFFF00000000;
      uint64_t v48 = 0xFFFFFFFFLL;
      if (*((void *)&v77 + 1))
      {
LABEL_64:
        unsigned int v78 = v42;
        operator delete(v42);
      }
    }
    else
    {
      unint64_t v43 = sub_2E40A4((uint64_t)&v77);
      unsigned int v44 = v43;
      int v46 = v45;
      unint64_t v47 = v43 & 0xFFFFFFFF00000000;
      unint64_t v42 = (void *)*((void *)&v77 + 1);
      uint64_t v48 = v44;
      if (*((void *)&v77 + 1)) {
        goto LABEL_64;
      }
    }
    unint64_t v49 = v47 | v48;
    uint64_t v51 = (_DWORD *)a3[1];
    unint64_t v50 = a3[2];
    if ((unint64_t)v51 >= v50)
    {
      int v53 = (_DWORD *)*a3;
      unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v51 - *a3) >> 2);
      unint64_t v55 = v54 + 1;
      if (v54 + 1 > 0x1555555555555555) {
        sub_2E00();
      }
      unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - (void)v53) >> 2);
      if (2 * v56 > v55) {
        unint64_t v55 = 2 * v56;
      }
      if (v56 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v57 = 0x1555555555555555;
      }
      else {
        unint64_t v57 = v55;
      }
      if (v57)
      {
        if (v57 > 0x1555555555555555) {
          sub_188D718();
        }
        size_t v58 = (char *)operator new(12 * v57);
      }
      else
      {
        size_t v58 = 0;
      }
      unint64_t v59 = &v58[12 * v54];
      *(void *)unint64_t v59 = v49;
      *((_DWORD *)v59 + 2) = v46;
      unsigned int v52 = v59 + 12;
      if (v51 != v53)
      {
        do
        {
          uint64_t v60 = *(void *)(v51 - 3);
          v51 -= 3;
          int v61 = v51[2];
          *(void *)(v59 - 12) = v60;
          v59 -= 12;
          *((_DWORD *)v59 + 2) = v61;
        }
        while (v51 != v53);
        uint64_t v51 = (_DWORD *)*a3;
      }
      *a3 = (uint64_t)v59;
      a3[1] = (uint64_t)v52;
      a3[2] = (uint64_t)&v58[12 * v57];
      if (v51) {
        operator delete(v51);
      }
    }
    else
    {
      *(void *)uint64_t v51 = v49;
      v51[2] = v46;
      unsigned int v52 = v51 + 3;
    }
    a3[1] = (uint64_t)v52;
  }
}

void sub_3B8B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,void *__p,uint64_t a31)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v33 = *(void **)v31;
    if (!*(void *)v31) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v33 = *(void **)v31;
    if (!*(void *)v31) {
      goto LABEL_3;
    }
  }
  *(void *)(v31 + 8) = v33;
  operator delete(v33);
  _Unwind_Resume(exception_object);
}

void sub_3B8BC4(unsigned int **a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>, unint64_t a6@<D0>, double a7@<D1>, double a8@<D2>, double a9@<D3>)
{
  uint64_t v11 = *a1;
  uint64_t v12 = (char *)a1[1] - (char *)*a1;
  if (v12 == 12)
  {
    LODWORD(a6) = v11[1];
    long double v13 = exp(3.14159265 - (double)a6 * 6.28318531 / 4294967300.0);
    *(double *)&unint64_t v14 = atan((v13 - 1.0 / v13) * 0.5) * 57.2957795;
    long double v15 = *(double *)&v14 * 0.0174532925;
    LODWORD(v14) = a2[1];
    long double v16 = exp(3.14159265 - (double)v14 * 6.28318531 / 4294967300.0);
    unsigned int v37 = *v11;
    long double v17 = atan((v16 - 1.0 / v16) * 0.5) * 57.2957795 * 0.0174532925;
    v18.i64[0] = v37;
    v18.i64[1] = *a2;
    float64x2_t v19 = vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v18), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
    double v38 = vsubq_f64(v19, (float64x2_t)vdupq_laneq_s64((int64x2_t)v19, 1)).f64[0];
    long double v20 = sin((v15 - v17) * 0.5);
    long double v21 = v20 * v20;
    double v22 = cos(v15);
    long double v23 = v22 * cos(v17);
    long double v24 = sin(0.5 * v38);
    long double v25 = atan2(sqrt(v21 + v23 * (v24 * v24)), sqrt(1.0 - (v21 + v23 * (v24 * v24))));
    uint64_t v26 = 0;
    *(void *)(a5 + 8) = *(void *)v11;
    *(_DWORD *)(a5 + 16) = v11[2];
    *(long double *)a5 = (v25 + v25) * 6372797.56;
  }
  else
  {
    uint64_t v27 = v12 >> 2;
    unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * v27 - 1;
    if (0xAAAAAAAAAAAAAAABLL * v27 == 1)
    {
      uint64_t v39 = -1;
      uint64_t v26 = -1;
      double v33 = 1.79769313e308;
      int v35 = 0x7FFFFFFF;
    }
    else
    {
      uint64_t v32 = 0;
      uint64_t v26 = -1;
      double v33 = 1.79769313e308;
      uint64_t v34 = 3;
      int v35 = 0x7FFFFFFF;
      uint64_t v39 = -1;
      do
      {
        double v40 = NAN;
        int v41 = 0x7FFFFFFF;
        sub_3BD4EC(&(*a1)[v34 - 3], &(*a1)[v34], a2, (unsigned int *)&v40, NAN, a7, a8, a9, a3, a4);
        if (v36 < v33)
        {
          a7 = v40;
          uint64_t v39 = *(void *)&v40;
          int v35 = v41;
          uint64_t v26 = v32;
          double v33 = v36;
        }
        ++v32;
        v34 += 3;
      }
      while (v28 != v32);
    }
    *(double *)a5 = v33;
    *(void *)(a5 + 8) = v39;
    *(_DWORD *)(a5 + 16) = v35;
  }
  *(void *)(a5 + 24) = v26;
}

void sub_3B8E94(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (uint64_t *)(a1 + 104);
  sub_3B96EC((unsigned int **)a1, (uint64_t *)(a1 + 104), *(void *)(a1 + 152), 1, (char **)&__p);
  sub_3B91DC(a1, (uint64_t *)&__p, (void **)&v13);
  if (__p)
  {
    uint64_t v12 = (int *)__p;
    operator delete(__p);
  }
  sub_3B96EC((unsigned int **)a1, v4, *(_DWORD *)(a1 + 152) + 1, 0, (char **)&v9);
  sub_3B91DC(a1, (uint64_t *)&v9, &__p);
  if (v9)
  {
    int v10 = (int *)v9;
    operator delete(v9);
  }
  sub_3B96EC((unsigned int **)a1, (uint64_t *)(a1 + 128), 0, 0, (char **)v8);
  sub_3B91DC(a1, (uint64_t *)v8, &v9);
  if (v8[0])
  {
    v8[1] = v8[0];
    operator delete(v8[0]);
  }
  sub_3BE49C(v13, v14, (uint64_t)v8, a2, v5);
  sub_3BE600((int *)__p, v12, (uint64_t)v8, a2, v6);
  sub_3BE764((int *)v9, v10, (uint64_t)v8, a2, v7);
  if (v9)
  {
    int v10 = (int *)v9;
    operator delete(v9);
  }
  if (__p)
  {
    uint64_t v12 = (int *)__p;
    operator delete(__p);
  }
  if (v13)
  {
    unint64_t v14 = v13;
    operator delete(v13);
  }
}

void sub_3B8FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  uint64x2_t v18 = *(void **)(v16 - 56);
  if (v18)
  {
    *(void *)(v16 - 48) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

void sub_3B9050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    JUMPOUT(0x3B9044);
  }
  JUMPOUT(0x3B9048);
}

void *sub_3B9064(void *a1, uint64_t a2)
{
  long long __p = operator new(0x38uLL);
  long long v6 = xmmword_20B99F0;
  strcpy((char *)__p, "reference_junctions_maximum_distance_from_user_in_m");
  *a1 = sub_5CDE0(a2, &__p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x40uLL);
  long long v6 = xmmword_20B9A90;
  strcpy((char *)__p, "reference_junctions_minimum_distance_between_junctions_in_m");
  a1[1] = sub_5CDE0(a2, &__p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x20uLL);
  long long v6 = xmmword_20B8890;
  strcpy((char *)__p, "road_blockage_search_radius_m");
  a1[2] = sub_5CDE0(a2, &__p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_3B91B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_3B91DC(uint64_t a1@<X0>, uint64_t *a2@<X1>, void **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 == v6)
  {
    uint64_t v8 = 0;
  }
  else
  {
    long double v7 = operator new(0xCuLL);
    uint64_t v8 = (char *)(v7 + 3);
    int v9 = *(_DWORD *)(v5 + 8);
    *(void *)long double v7 = *(void *)v5;
    v7[2] = v9;
    a3[1] = v7 + 3;
    a3[2] = v7 + 3;
    *a3 = v7;
  }
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 2);
  if (v10 <= 1) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 2);
  }
  unint64_t v58 = v11;
  if (v10 >= 2)
  {
    uint64_t v12 = 1;
    float64x2_t v54 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
    float64x2_t v55 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
    float64x2_t v53 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
    float64x2_t v52 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
    do
    {
      uint64_t v15 = *a2;
      uint64_t v16 = (unsigned int *)(*a2 + 12 * v12);
      unsigned int v18 = *((_DWORD *)v8 - 3);
      unsigned int v17 = *((_DWORD *)v8 - 2);
      if (v18 == -1 && v17 == -1)
      {
        uint64_t v38 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_42;
      }
      unsigned int v20 = *v16;
      unsigned int v21 = *(_DWORD *)(v15 + 12 * v12 + 4);
      if (*v16 == -1 && v21 == -1)
      {
        uint64_t v38 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_42;
      }
      long double v23 = exp(3.14159265 - (double)v17 * 6.28318531 / 4294967300.0);
      long double v24 = atan((v23 - 1.0 / v23) * 0.5) * 57.2957795 * 0.0174532925;
      v25.i64[0] = v18;
      v25.i64[1] = v20;
      long double v26 = exp(3.14159265 - (double)v21 * 6.28318531 / 4294967300.0);
      long double v27 = atan((v26 - 1.0 / v26) * 0.5) * 57.2957795 * 0.0174532925;
      float64x2_t v28 = vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v25), v55), v54), v53), v52);
      double v56 = vsubq_f64(v28, (float64x2_t)vdupq_laneq_s64((int64x2_t)v28, 1)).f64[0];
      long double v29 = sin((v24 - v27) * 0.5);
      long double v30 = v29 * v29;
      double v31 = cos(v24);
      long double v32 = v31 * cos(v27);
      long double v33 = sin(0.5 * v56);
      long double v34 = atan2(sqrt(v33 * v33 * v32 + v30), sqrt(1.0 - (v33 * v33 * v32 + v30)));
      double v35 = (v34 + v34) * 6372797.56 * 100.0;
      if (v35 >= 0.0)
      {
        double v36 = v35;
        if (v35 < 4.50359963e15)
        {
          uint64_t v37 = (uint64_t)(v35 + v35) + 1;
LABEL_30:
          double v36 = (double)(v37 >> 1);
        }
      }
      else
      {
        double v36 = v35;
        if (v35 > -4.50359963e15)
        {
          uint64_t v37 = (uint64_t)(v35 + v35);
          if (v37 >= 1) {
            --v37;
          }
          goto LABEL_30;
        }
      }
      if (v36 < 9.22337204e18)
      {
        if (v35 >= 0.0)
        {
          if (v35 < 4.50359963e15)
          {
            uint64_t v39 = (uint64_t)(v35 + v35) + 1;
            goto LABEL_40;
          }
        }
        else if (v35 > -4.50359963e15)
        {
          uint64_t v39 = (uint64_t)(v35 + v35);
          if (v39 >= 1) {
            --v39;
          }
LABEL_40:
          double v35 = (double)(v39 >> 1);
        }
        uint64_t v38 = (uint64_t)v35;
        goto LABEL_42;
      }
      uint64_t v38 = 0x7FFFFFFFFFFFFFFELL;
LABEL_42:
      if (v12 != -1 - 0x5555555555555555 * ((a2[1] - v15) >> 2) && v38 < *(void *)(a1 + 168)) {
        goto LABEL_12;
      }
      unint64_t v40 = (unint64_t)a3[2];
      if ((unint64_t)v8 < v40)
      {
        uint64_t v13 = *(void *)v16;
        *((_DWORD *)v8 + 2) = v16[2];
        *(void *)uint64_t v8 = v13;
        unint64_t v14 = v8 + 12;
      }
      else
      {
        int v41 = (char *)*a3;
        unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (unsigned char *)*a3) >> 2);
        unint64_t v43 = v42 + 1;
        if (v42 + 1 > 0x1555555555555555) {
          sub_2E00();
        }
        unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - (void)v41) >> 2);
        if (2 * v44 > v43) {
          unint64_t v43 = 2 * v44;
        }
        if (v44 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v45 = 0x1555555555555555;
        }
        else {
          unint64_t v45 = v43;
        }
        if (v45)
        {
          if (v45 > 0x1555555555555555) {
            sub_188D718();
          }
          int v46 = (char *)operator new(12 * v45);
        }
        else
        {
          int v46 = 0;
        }
        unint64_t v47 = &v46[12 * v42];
        uint64_t v48 = *(void *)v16;
        unint64_t v49 = &v46[12 * v45];
        *((_DWORD *)v47 + 2) = v16[2];
        *(void *)unint64_t v47 = v48;
        unint64_t v14 = v47 + 12;
        if (v8 == v41)
        {
          *a3 = v47;
          a3[1] = v14;
          a3[2] = v49;
        }
        else
        {
          do
          {
            uint64_t v50 = *(void *)(v8 - 12);
            v8 -= 12;
            int v51 = *((_DWORD *)v8 + 2);
            *(void *)(v47 - 12) = v50;
            v47 -= 12;
            *((_DWORD *)v47 + 2) = v51;
          }
          while (v8 != v41);
          uint64_t v8 = (char *)*a3;
          *a3 = v47;
          a3[1] = v14;
          a3[2] = v49;
          if (!v8) {
            goto LABEL_11;
          }
        }
        operator delete(v8);
      }
LABEL_11:
      a3[1] = v14;
      uint64_t v8 = v14;
LABEL_12:
      ++v12;
    }
    while (v12 != v58);
  }
}

void sub_3B96C4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_3B96EC(unsigned int **a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, int a4@<W3>, char **a5@<X8>)
{
  int v5 = a3;
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (a4) {
    int v7 = -1;
  }
  else {
    int v7 = 1;
  }
  int v66 = v7;
  if ((a3 & 0x80000000) == 0)
  {
    unint64_t v10 = 0;
    float64x2_t v63 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
    float64x2_t v64 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
    float64x2_t v61 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
    float64x2_t v62 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
    while (1)
    {
      uint64_t v12 = *a2;
      if (v5 >= (int)(-1431655765 * ((unint64_t)(a2[1] - *a2) >> 2))) {
        return;
      }
      uint64_t v13 = (unsigned int *)(v12 + 12 * v5);
      unsigned int v15 = **a1;
      unsigned int v14 = (*a1)[1];
      BOOL v16 = v15 == -1 && v14 == -1;
      if (v16
        || ((unsigned int v17 = *v13, v18 = *(_DWORD *)(v12 + 12 * v5 + 4), *v13 == -1)
          ? (BOOL v19 = v18 == -1)
          : (BOOL v19 = 0),
            v19))
      {
        unint64_t v35 = (unint64_t)a5[2];
        if (a1[20] != (unsigned int *)0x7FFFFFFFFFFFFFFFLL) {
          goto LABEL_55;
        }
        goto LABEL_22;
      }
      long double v20 = exp(3.14159265 - (double)v14 * 6.28318531 / 4294967300.0);
      long double v21 = atan((v20 - 1.0 / v20) * 0.5) * 57.2957795 * 0.0174532925;
      v22.i64[0] = v15;
      v22.i64[1] = v17;
      long double v23 = exp(3.14159265 - (double)v18 * 6.28318531 / 4294967300.0);
      long double v24 = atan((v23 - 1.0 / v23) * 0.5) * 57.2957795 * 0.0174532925;
      float64x2_t v25 = vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v22), v64), v63), v62), v61);
      double v65 = vsubq_f64(v25, (float64x2_t)vdupq_laneq_s64((int64x2_t)v25, 1)).f64[0];
      long double v26 = sin((v21 - v24) * 0.5);
      long double v27 = v26 * v26;
      double v28 = cos(v21);
      long double v29 = v28 * cos(v24);
      long double v30 = sin(0.5 * v65);
      long double v31 = atan2(sqrt(v30 * v30 * v29 + v27), sqrt(1.0 - (v30 * v30 * v29 + v27)));
      double v32 = (v31 + v31) * 6372797.56 * 100.0;
      if (v32 >= 0.0)
      {
        double v33 = v32;
        if (v32 >= 4.50359963e15) {
          goto LABEL_43;
        }
        uint64_t v34 = (uint64_t)(v32 + v32) + 1;
      }
      else
      {
        double v33 = v32;
        if (v32 <= -4.50359963e15) {
          goto LABEL_43;
        }
        uint64_t v34 = (uint64_t)(v32 + v32);
        if (v34 >= 1) {
          --v34;
        }
      }
      double v33 = (double)(v34 >> 1);
LABEL_43:
      if (v33 >= 9.22337204e18)
      {
        unint64_t v35 = (unint64_t)a5[2];
        if (a1[20] != (unsigned int *)0x7FFFFFFFFFFFFFFFLL && a1[20] != (unsigned int *)0x7FFFFFFFFFFFFFFELL) {
          goto LABEL_55;
        }
        goto LABEL_22;
      }
      if (v32 >= 0.0)
      {
        if (v32 >= 4.50359963e15) {
          goto LABEL_54;
        }
        uint64_t v48 = (uint64_t)(v32 + v32) + 1;
      }
      else
      {
        if (v32 <= -4.50359963e15) {
          goto LABEL_54;
        }
        uint64_t v48 = (uint64_t)(v32 + v32);
        if (v48 >= 1) {
          --v48;
        }
      }
      double v32 = (double)(v48 >> 1);
LABEL_54:
      unint64_t v35 = (unint64_t)a5[2];
      if ((uint64_t)v32 > (uint64_t)a1[20])
      {
LABEL_55:
        if ((unint64_t)v10 >= v35)
        {
          int v51 = *a5;
          unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a5) >> 2);
          unint64_t v53 = v52 + 1;
          if (v52 + 1 > 0x1555555555555555) {
LABEL_74:
          }
            sub_2E00();
          unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (void)v51) >> 2);
          if (2 * v54 > v53) {
            unint64_t v53 = 2 * v54;
          }
          if (v54 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v55 = 0x1555555555555555;
          }
          else {
            unint64_t v55 = v53;
          }
          if (v55)
          {
            if (v55 > 0x1555555555555555) {
LABEL_75:
            }
              sub_188D718();
            double v56 = (char *)operator new(12 * v55);
          }
          else
          {
            double v56 = 0;
          }
          unint64_t v57 = &v56[12 * v52];
          uint64_t v58 = *(void *)v13;
          *((_DWORD *)v57 + 2) = v13[2];
          *(void *)unint64_t v57 = v58;
          uint64_t v50 = v57 + 12;
          if (v10 != v51)
          {
            do
            {
              uint64_t v59 = *(void *)(v10 - 12);
              v10 -= 12;
              int v60 = *((_DWORD *)v10 + 2);
              *(void *)(v57 - 12) = v59;
              v57 -= 12;
              *((_DWORD *)v57 + 2) = v60;
            }
            while (v10 != v51);
            unint64_t v10 = *a5;
          }
          *a5 = v57;
          a5[1] = v50;
          a5[2] = &v56[12 * v55];
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          uint64_t v49 = *(void *)v13;
          *((_DWORD *)v10 + 2) = v13[2];
          *(void *)unint64_t v10 = v49;
          uint64_t v50 = v10 + 12;
        }
        a5[1] = v50;
        return;
      }
LABEL_22:
      if ((unint64_t)v10 < v35)
      {
        uint64_t v11 = *(void *)v13;
        *((_DWORD *)v10 + 2) = v13[2];
        *(void *)unint64_t v10 = v11;
        a5[1] = v10 + 12;
        v10 += 12;
        v5 += v66;
        if (v5 < 0) {
          return;
        }
      }
      else
      {
        double v36 = *a5;
        unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a5) >> 2);
        unint64_t v38 = v37 + 1;
        if (v37 + 1 > 0x1555555555555555) {
          goto LABEL_74;
        }
        unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (void)v36) >> 2);
        if (2 * v39 > v38) {
          unint64_t v38 = 2 * v39;
        }
        if (v39 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v40 = 0x1555555555555555;
        }
        else {
          unint64_t v40 = v38;
        }
        if (v40)
        {
          if (v40 > 0x1555555555555555) {
            goto LABEL_75;
          }
          int v41 = (char *)operator new(12 * v40);
        }
        else
        {
          int v41 = 0;
        }
        uint64_t v42 = *(void *)v13;
        unint64_t v43 = &v41[12 * v37];
        *((_DWORD *)v43 + 2) = v13[2];
        *(void *)unint64_t v43 = v42;
        unint64_t v44 = v43;
        if (v10 != v36)
        {
          do
          {
            uint64_t v45 = *(void *)(v10 - 12);
            v10 -= 12;
            int v46 = *((_DWORD *)v10 + 2);
            *(void *)(v44 - 12) = v45;
            v44 -= 12;
            *((_DWORD *)v44 + 2) = v46;
          }
          while (v10 != v36);
          unint64_t v10 = *a5;
        }
        unint64_t v47 = v43 + 12;
        *a5 = v44;
        a5[1] = v43 + 12;
        a5[2] = &v41[12 * v40];
        if (v10) {
          operator delete(v10);
        }
        a5[1] = v47;
        unint64_t v10 = v47;
        v5 += v66;
        if (v5 < 0) {
          return;
        }
      }
    }
  }
}

void sub_3B9C80(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3B9CAC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  *(void *)a1 = a2;
  uint64_t v10 = *a3;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a3 + 2);
  *(void *)(a1 + 8) = v10;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = a5;
  *(void *)(a1 + 40) = a6;
  *(void *)(a1 + 48) = a7;
  sub_3EAFD4(a1 + 56, a8, 2);
  uint64_t v11 = sub_3750CC(a8);
  *(_OWORD *)(a1 + 104) = 0u;
  uint64_t v12 = (void **)(a1 + 104);
  *(void *)(a1 + 96) = v11;
  uint64_t v13 = (void **)(a1 + 128);
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 152) = 0;
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "RerouteAnalytics");
  long double v27 = 0;
  double v28 = 0;
  uint64_t v29 = 0;
  unsigned int v14 = sub_374CDC((uint64_t)a8, (uint64_t)__p, (uint64_t *)&v27);
  sub_3BB120((void *)(a1 + 160), (uint64_t)v14);
  unsigned int v15 = v27;
  if (v27)
  {
    BOOL v16 = v28;
    unsigned int v17 = v27;
    if (v28 != v27)
    {
      do
      {
        if (*((char *)v16 - 1) < 0) {
          operator delete(*(v16 - 3));
        }
        v16 -= 3;
      }
      while (v16 != v15);
      unsigned int v17 = v27;
    }
    double v28 = v15;
    operator delete(v17);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  sub_3BA054(a1, *(char **)(a1 + 24), (uint64_t *)__p);
  unsigned int v18 = *v12;
  if (*v12)
  {
    *(void *)(a1 + 112) = v18;
    operator delete(v18);
    *uint64_t v12 = 0;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)__p;
  *(void **)(a1 + 120) = __p[2];
  sub_3BA054(a1, *(char **)(a1 + 32), (uint64_t *)__p);
  uint64x2_t v22 = *v13;
  if (*v13)
  {
    *(void *)(a1 + 136) = v22;
    operator delete(v22);
    *uint64_t v13 = 0;
    *(void *)(a1 + 136) = 0;
    *(void *)(a1 + 144) = 0;
  }
  long double v23 = __p[0];
  *(_OWORD *)(a1 + 128) = *(_OWORD *)__p;
  *(void **)(a1 + 144) = __p[2];
  if (*(void *)(a1 + 104) == *(void *)(a1 + 112))
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)__p);
      sub_188FC78(__p, (uint64_t)"Old user route is empty.", 24);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v27, 3u);
      if (SHIBYTE(v29) < 0) {
        operator delete(v27);
      }
      if (v26 < 0) {
        operator delete(__p[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
  }
  else
  {
    sub_3B8BC4((unsigned int **)(a1 + 104), *(unsigned int **)a1, 0, 0, (uint64_t)__p, (unint64_t)v23, v19, v20, v21);
    *(void **)(a1 + 152) = __p[3];
  }
  return a1;
}

void sub_3B9FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v17 - 49) < 0) {
    operator delete(*(void **)(v17 - 72));
  }
  sub_111ECAC((uint64_t)&__p);
  double v19 = *v16;
  if (*v16)
  {
    *(void *)(v14 + 136) = v19;
    operator delete(v19);
    double v20 = *v15;
    if (*v15) {
      goto LABEL_5;
    }
  }
  else
  {
    double v20 = *v15;
    if (*v15)
    {
LABEL_5:
      *(void *)(v14 + 112) = v20;
      operator delete(v20);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_3BA054(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_45EB40(a2, (uint64_t)&v77);
  sub_39ECCC((uint64_t)&v70, &v77);
  float64x2_t v62 = a2;
  sub_39ECCC((uint64_t)&v63, &v83);
  while (1)
  {
    if (v75 == v76 || __p == v69)
    {
      if ((v75 == v76) == (__p == v69)) {
        break;
      }
      goto LABEL_23;
    }
    uint64_t v8 = v70;
    if (v72 != v65) {
      goto LABEL_24;
    }
    if (v70)
    {
      unint64_t v9 = v71;
      int v10 = v9 < sub_46C760(v70);
      uint64_t v11 = v63;
      if (!v63) {
        goto LABEL_21;
      }
    }
    else
    {
      int v10 = 0;
      uint64_t v11 = v63;
      if (!v63)
      {
LABEL_21:
        int v14 = 0;
        goto LABEL_22;
      }
    }
    unint64_t v12 = v64;
    unint64_t v13 = sub_46C760(v11);
    int v14 = v12 < v13;
    if (v12 < v13) {
      int v15 = v10;
    }
    else {
      int v15 = 0;
    }
    if (v15 == 1)
    {
      uint64_t v16 = sub_46C8EC(v70, v71);
      if (v16 == sub_46C8EC(v63, v64)) {
        break;
      }
      goto LABEL_23;
    }
LABEL_22:
    if (v10 == v14) {
      break;
    }
LABEL_23:
    uint64_t v8 = v70;
LABEL_24:
    uint64_t v17 = sub_46C8EC(v8, v71);
    sub_2954EC(*(void *)(a1 + 96), *(void *)(v17 + 32), (uint64_t)v88);
    unsigned int v18 = v89;
    if (v89 != v90)
    {
      unint64_t v19 = sub_2E1AA4((uint64_t)v88);
      unsigned int v20 = v19;
      unint64_t v21 = v19 & 0xFFFFFFFF00000000;
      unsigned int v18 = v89;
      uint64_t v22 = v20;
      int v24 = v23;
      if (!v89) {
        goto LABEL_27;
      }
LABEL_26:
      uint64_t v90 = v18;
      operator delete(v18);
      goto LABEL_27;
    }
    unint64_t v21 = 0xFFFFFFFF00000000;
    uint64_t v22 = 0xFFFFFFFFLL;
    int v24 = 0x7FFFFFFF;
    if (v89) {
      goto LABEL_26;
    }
LABEL_27:
    unint64_t v25 = v21 | v22;
    long double v27 = (char *)a3[1];
    unint64_t v26 = a3[2];
    if ((unint64_t)v27 < v26)
    {
      *(void *)long double v27 = v25;
      *((_DWORD *)v27 + 2) = v24;
      uint64_t v6 = v27 + 12;
      goto LABEL_3;
    }
    double v28 = (char *)*a3;
    unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v27[-*a3] >> 2);
    unint64_t v30 = v29 + 1;
    if (v29 + 1 > 0x1555555555555555) {
      sub_2E00();
    }
    unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - (void)v28) >> 2);
    if (2 * v31 > v30) {
      unint64_t v30 = 2 * v31;
    }
    if (v31 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v32 = 0x1555555555555555;
    }
    else {
      unint64_t v32 = v30;
    }
    if (v32)
    {
      if (v32 > 0x1555555555555555) {
        sub_188D718();
      }
      double v33 = (char *)operator new(12 * v32);
      uint64_t v34 = (uint64_t)&v33[12 * v29];
      *(void *)uint64_t v34 = v25;
      *(_DWORD *)(v34 + 8) = v24;
      uint64_t v35 = v34;
      if (v27 == v28)
      {
LABEL_37:
        double v36 = &v33[12 * v32];
        uint64_t v6 = (char *)(v34 + 12);
        *a3 = v35;
        a3[1] = v34 + 12;
        a3[2] = (uint64_t)v36;
        if (v27) {
          goto LABEL_44;
        }
        goto LABEL_3;
      }
    }
    else
    {
      double v33 = 0;
      uint64_t v34 = 4 * ((uint64_t)&v27[-*a3] >> 2);
      *(void *)uint64_t v34 = v25;
      *(_DWORD *)(v34 + 8) = v24;
      uint64_t v35 = 12 * v29;
      if (v27 == v28) {
        goto LABEL_37;
      }
    }
    do
    {
      uint64_t v37 = *(void *)(v27 - 12);
      v27 -= 12;
      int v38 = *((_DWORD *)v27 + 2);
      *(void *)(v35 - 12) = v37;
      v35 -= 12;
      *(_DWORD *)(v35 + 8) = v38;
    }
    while (v27 != v28);
    long double v27 = (char *)*a3;
    unint64_t v39 = &v33[12 * v32];
    uint64_t v6 = (char *)(v34 + 12);
    *a3 = v35;
    a3[1] = v34 + 12;
    a3[2] = (uint64_t)v39;
    if (v27) {
LABEL_44:
    }
      operator delete(v27);
LABEL_3:
    a3[1] = (uint64_t)v6;
    sub_39EBB4(&v70);
  }
  if (__p)
  {
    char v69 = __p;
    operator delete(__p);
  }
  if (v66)
  {
    uint64_t v67 = v66;
    operator delete(v66);
  }
  if (v75)
  {
    uint64_t v76 = v75;
    operator delete(v75);
  }
  if (v73)
  {
    unsigned int v74 = v73;
    operator delete(v73);
  }
  if (v86)
  {
    uint64_t v87 = v86;
    operator delete(v86);
  }
  if (v84)
  {
    uint64_t v85 = v84;
    operator delete(v84);
  }
  if (v81)
  {
    unint64_t v82 = v81;
    operator delete(v81);
  }
  if (v79)
  {
    long long v80 = v79;
    operator delete(v79);
  }
  if (!sub_45FB38(v62))
  {
    uint64_t v40 = *(void *)(a1 + 96);
    uint64_t v41 = sub_45FC70((uint64_t)v62);
    sub_2954EC(v40, *(void *)(v41 + 32), (uint64_t)&v77);
    uint64_t v42 = (void *)*((void *)&v77 + 1);
    if (*((void **)&v77 + 1) == v78)
    {
      int v46 = 0x7FFFFFFF;
      unint64_t v47 = 0xFFFFFFFF00000000;
      uint64_t v48 = 0xFFFFFFFFLL;
      if (*((void *)&v77 + 1))
      {
LABEL_64:
        unsigned int v78 = v42;
        operator delete(v42);
      }
    }
    else
    {
      unint64_t v43 = sub_2E40A4((uint64_t)&v77);
      unsigned int v44 = v43;
      int v46 = v45;
      unint64_t v47 = v43 & 0xFFFFFFFF00000000;
      uint64_t v42 = (void *)*((void *)&v77 + 1);
      uint64_t v48 = v44;
      if (*((void *)&v77 + 1)) {
        goto LABEL_64;
      }
    }
    unint64_t v49 = v47 | v48;
    int v51 = (_DWORD *)a3[1];
    unint64_t v50 = a3[2];
    if ((unint64_t)v51 >= v50)
    {
      unint64_t v53 = (_DWORD *)*a3;
      unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v51 - *a3) >> 2);
      unint64_t v55 = v54 + 1;
      if (v54 + 1 > 0x1555555555555555) {
        sub_2E00();
      }
      unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - (void)v53) >> 2);
      if (2 * v56 > v55) {
        unint64_t v55 = 2 * v56;
      }
      if (v56 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v57 = 0x1555555555555555;
      }
      else {
        unint64_t v57 = v55;
      }
      if (v57)
      {
        if (v57 > 0x1555555555555555) {
          sub_188D718();
        }
        uint64_t v58 = (char *)operator new(12 * v57);
      }
      else
      {
        uint64_t v58 = 0;
      }
      uint64_t v59 = &v58[12 * v54];
      *(void *)uint64_t v59 = v49;
      *((_DWORD *)v59 + 2) = v46;
      unint64_t v52 = v59 + 12;
      if (v51 != v53)
      {
        do
        {
          uint64_t v60 = *(void *)(v51 - 3);
          v51 -= 3;
          int v61 = v51[2];
          *(void *)(v59 - 12) = v60;
          v59 -= 12;
          *((_DWORD *)v59 + 2) = v61;
        }
        while (v51 != v53);
        int v51 = (_DWORD *)*a3;
      }
      *a3 = (uint64_t)v59;
      a3[1] = (uint64_t)v52;
      a3[2] = (uint64_t)&v58[12 * v57];
      if (v51) {
        operator delete(v51);
      }
    }
    else
    {
      *(void *)int v51 = v49;
      v51[2] = v46;
      unint64_t v52 = v51 + 3;
    }
    a3[1] = (uint64_t)v52;
  }
}

void sub_3BA51C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,void *__p,uint64_t a31)
{
  if (__p)
  {
    operator delete(__p);
    double v33 = *(void **)v31;
    if (!*(void *)v31) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    double v33 = *(void **)v31;
    if (!*(void *)v31) {
      goto LABEL_3;
    }
  }
  *(void *)(v31 + 8) = v33;
  operator delete(v33);
  _Unwind_Resume(exception_object);
}

uint64_t sub_3BA5C8(uint64_t a1, uint64_t a2)
{
  sub_3BA600(a1, a2);

  return sub_3BA7D0(a1);
}

void sub_3BA600(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (uint64_t *)(a1 + 104);
  sub_3BB7A8((unsigned int **)a1, (uint64_t *)(a1 + 104), *(void *)(a1 + 152), 1, (char **)&__p);
  sub_3BB298(a1, (uint64_t *)&__p, (void **)&v13);
  if (__p)
  {
    unint64_t v12 = (int *)__p;
    operator delete(__p);
  }
  sub_3BB7A8((unsigned int **)a1, v4, *(_DWORD *)(a1 + 152) + 1, 0, (char **)&v9);
  sub_3BB298(a1, (uint64_t *)&v9, &__p);
  if (v9)
  {
    int v10 = (int *)v9;
    operator delete(v9);
  }
  sub_3BB7A8((unsigned int **)a1, (uint64_t *)(a1 + 128), 0, 0, (char **)v8);
  sub_3BB298(a1, (uint64_t *)v8, &v9);
  if (v8[0])
  {
    v8[1] = v8[0];
    operator delete(v8[0]);
  }
  sub_3BE49C(v13, v14, (uint64_t)v8, a2, v5);
  sub_3BE600((int *)__p, v12, (uint64_t)v8, a2, v6);
  sub_3BE764((int *)v9, v10, (uint64_t)v8, a2, v7);
  if (v9)
  {
    int v10 = (int *)v9;
    operator delete(v9);
  }
  if (__p)
  {
    unint64_t v12 = (int *)__p;
    operator delete(__p);
  }
  if (v13)
  {
    int v14 = v13;
    operator delete(v13);
  }
}

void sub_3BA740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  unsigned int v18 = *(void **)(v16 - 56);
  if (v18)
  {
    *(void *)(v16 - 48) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

void sub_3BA7BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    JUMPOUT(0x3BA7B0);
  }
  JUMPOUT(0x3BA7B4);
}

uint64_t sub_3BA7D0(uint64_t a1)
{
  unint64_t v2 = sub_69510();
  uint64_t result = sub_68ECC((uint64_t)v2);
  if ((result & 1) == 0)
  {
    if (*(unsigned char *)(sub_5231C(*(void *)(a1 + 32)) + 36))
    {
      uint64_t v4 = *(void *)(sub_45FC68(*(uint64_t **)(a1 + 32)) + 32);
      sub_47F66C(*(char **)(a1 + 32), *(void *)(a1 + 96));
      sub_2D5D58(*(void *)(a1 + 96), v4 & 0xFFFFFFFFFFFFLL);
      sub_45FC68(*(uint64_t **)(a1 + 32));
      long double v5 = (int *)sub_2D5D58(*(void *)(a1 + 96), v4 & 0xFFFFFFFFFFFFLL);
      long double v6 = (unsigned __int16 *)((char *)v5 - *v5);
      if (*v6 >= 0x41u && (uint64_t v7 = v6[32]) != 0) {
        uint64_t v8 = (unsigned int *)((char *)v5 + v7 + *(unsigned int *)((char *)v5 + v7));
      }
      else {
        uint64_t v8 = 0;
      }
      sub_3BD900(v8, (v4 & 0xFF000000000000) != 0x1000000000000, 1, (uint64_t)&__p);
      unint64_t v9 = (void **)__p;
      if (__p)
      {
        int v10 = v24;
        uint64_t v11 = __p;
        if (__p != v24)
        {
          do
          {
            if (*((char *)v10 - 1) < 0) {
              operator delete(*(v10 - 3));
            }
            v10 -= 3;
          }
          while (v10 != v9);
          uint64_t v11 = __p;
        }
        int v24 = v9;
        operator delete(v11);
      }
      unint64_t v12 = *(int **)(a1 + 96);
      uint64_t v13 = sub_45FC68(*(uint64_t **)(a1 + 32));
      unint64_t v14 = sub_2E68E8((uint64_t)v12, *(void *)(v13 + 32));
      sub_3BDB4C(v12, v14, &v30);
      uint64_t v15 = *(void *)(a1 + 96);
      uint64_t v16 = sub_45FC68(*(uint64_t **)(a1 + 32));
      sub_3BDCD8(v15, *(unsigned int *)(v16 + 32) | ((unint64_t)*(unsigned __int16 *)(v16 + 36) << 32), &__p);
      unint64_t v17 = v25;
      if ((v25 & 0x80u) != 0) {
        unint64_t v17 = (unint64_t)v24;
      }
      if (v17) {
        sub_26A18((uint64_t)&v28, (const char *)&__p);
      }
      else {
        sub_26908((uint64_t)&v28);
      }
      if ((char)v25 < 0) {
        operator delete(__p);
      }
      sub_480C((uint64_t)&__p, *(_DWORD *)(a1 + 12));
    }
    uint64_t result = sub_5231C(*(void *)(a1 + 32));
    if (*(unsigned char *)(result + 3))
    {
      uint64_t v18 = sub_486CB4(*(void *)(a1 + 48));
      memset(v27, 0, 24);
      uint64_t v19 = *(void *)(v18 + 160);
      uint64_t v20 = *(void *)(v18 + 168);
      unint64_t v26 = v27;
      while (v19 != v20)
      {
        if (*(_DWORD *)(a1 + 12) - *(_DWORD *)(v19 + 36) <= 900)
        {
          int v21 = *(_DWORD *)(v19 + 32);
          long long __p = *(void **)(v19 + 24);
          LODWORD(v24) = v21;
          sub_3BDEE8((char ***)&v26, (uint64_t *)&__p);
        }
        v19 += 56;
      }
      uint64_t v28 = sub_47F66C(*(char **)(a1 + 32), *(void *)(a1 + 96));
      int v29 = v22;
      sub_45FE1C(*(void *)(a1 + 32));
      sub_557BC((uint64_t)&__p);
    }
  }
  return result;
}

void sub_3BAFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40)
{
  sub_4814((uint64_t)&a25);
  sub_4814((uint64_t)&a31);
  sub_1A668(&a40);
  sub_31B778(v40 - 192);
  sub_4814((uint64_t)&__p);
  sub_26C4C((const void **)(v40 - 144));
  if (*(char *)(v40 - 105) < 0) {
    operator delete(*(void **)(v40 - 128));
  }
  _Unwind_Resume(a1);
}

void *sub_3BB120(void *a1, uint64_t a2)
{
  long long __p = operator new(0x38uLL);
  long long v6 = xmmword_20B99F0;
  strcpy((char *)__p, "reference_junctions_maximum_distance_from_user_in_m");
  *a1 = sub_5CDE0(a2, &__p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x40uLL);
  long long v6 = xmmword_20B9A90;
  strcpy((char *)__p, "reference_junctions_minimum_distance_between_junctions_in_m");
  a1[1] = sub_5CDE0(a2, &__p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x20uLL);
  long long v6 = xmmword_20B8890;
  strcpy((char *)__p, "road_blockage_search_radius_m");
  a1[2] = sub_5CDE0(a2, &__p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_3BB274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_3BB298(uint64_t a1@<X0>, uint64_t *a2@<X1>, void **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 == v6)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v7 = operator new(0xCuLL);
    uint64_t v8 = (char *)(v7 + 3);
    int v9 = *(_DWORD *)(v5 + 8);
    *(void *)uint64_t v7 = *(void *)v5;
    v7[2] = v9;
    a3[1] = v7 + 3;
    a3[2] = v7 + 3;
    *a3 = v7;
  }
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 2);
  if (v10 <= 1) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 2);
  }
  unint64_t v58 = v11;
  if (v10 >= 2)
  {
    uint64_t v12 = 1;
    float64x2_t v54 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
    float64x2_t v55 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
    float64x2_t v53 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
    float64x2_t v52 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
    do
    {
      uint64_t v15 = *a2;
      uint64_t v16 = (unsigned int *)(*a2 + 12 * v12);
      unsigned int v18 = *((_DWORD *)v8 - 3);
      unsigned int v17 = *((_DWORD *)v8 - 2);
      if (v18 == -1 && v17 == -1)
      {
        uint64_t v38 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_42;
      }
      unsigned int v20 = *v16;
      unsigned int v21 = *(_DWORD *)(v15 + 12 * v12 + 4);
      if (*v16 == -1 && v21 == -1)
      {
        uint64_t v38 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_42;
      }
      long double v23 = exp(3.14159265 - (double)v17 * 6.28318531 / 4294967300.0);
      long double v24 = atan((v23 - 1.0 / v23) * 0.5) * 57.2957795 * 0.0174532925;
      v25.i64[0] = v18;
      v25.i64[1] = v20;
      long double v26 = exp(3.14159265 - (double)v21 * 6.28318531 / 4294967300.0);
      long double v27 = atan((v26 - 1.0 / v26) * 0.5) * 57.2957795 * 0.0174532925;
      int64x2_t v28 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v25), v55), v54), v53), v52);
      double v56 = vsubq_f64((float64x2_t)v28, (float64x2_t)vdupq_laneq_s64(v28, 1)).f64[0];
      long double v29 = sin((v24 - v27) * 0.5);
      long double v30 = v29 * v29;
      double v31 = cos(v24);
      long double v32 = v31 * cos(v27);
      long double v33 = sin(0.5 * v56);
      long double v34 = atan2(sqrt(v33 * v33 * v32 + v30), sqrt(1.0 - (v33 * v33 * v32 + v30)));
      double v35 = (v34 + v34) * 6372797.56 * 100.0;
      if (v35 >= 0.0)
      {
        double v36 = v35;
        if (v35 < 4.50359963e15)
        {
          uint64_t v37 = (uint64_t)(v35 + v35) + 1;
LABEL_30:
          double v36 = (double)(v37 >> 1);
        }
      }
      else
      {
        double v36 = v35;
        if (v35 > -4.50359963e15)
        {
          uint64_t v37 = (uint64_t)(v35 + v35);
          if (v37 >= 1) {
            --v37;
          }
          goto LABEL_30;
        }
      }
      if (v36 < 9.22337204e18)
      {
        if (v35 >= 0.0)
        {
          if (v35 < 4.50359963e15)
          {
            uint64_t v39 = (uint64_t)(v35 + v35) + 1;
            goto LABEL_40;
          }
        }
        else if (v35 > -4.50359963e15)
        {
          uint64_t v39 = (uint64_t)(v35 + v35);
          if (v39 >= 1) {
            --v39;
          }
LABEL_40:
          double v35 = (double)(v39 >> 1);
        }
        uint64_t v38 = (uint64_t)v35;
        goto LABEL_42;
      }
      uint64_t v38 = 0x7FFFFFFFFFFFFFFELL;
LABEL_42:
      if (v12 != -1 - 0x5555555555555555 * ((a2[1] - v15) >> 2) && v38 < *(void *)(a1 + 168)) {
        goto LABEL_12;
      }
      unint64_t v40 = (unint64_t)a3[2];
      if ((unint64_t)v8 < v40)
      {
        uint64_t v13 = *(void *)v16;
        *((_DWORD *)v8 + 2) = v16[2];
        *(void *)uint64_t v8 = v13;
        unint64_t v14 = v8 + 12;
      }
      else
      {
        uint64_t v41 = (char *)*a3;
        unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (unsigned char *)*a3) >> 2);
        unint64_t v43 = v42 + 1;
        if (v42 + 1 > 0x1555555555555555) {
          sub_2E00();
        }
        unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - (void)v41) >> 2);
        if (2 * v44 > v43) {
          unint64_t v43 = 2 * v44;
        }
        if (v44 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v45 = 0x1555555555555555;
        }
        else {
          unint64_t v45 = v43;
        }
        if (v45)
        {
          if (v45 > 0x1555555555555555) {
            sub_188D718();
          }
          int v46 = (char *)operator new(12 * v45);
        }
        else
        {
          int v46 = 0;
        }
        unint64_t v47 = &v46[12 * v42];
        uint64_t v48 = *(void *)v16;
        unint64_t v49 = &v46[12 * v45];
        *((_DWORD *)v47 + 2) = v16[2];
        *(void *)unint64_t v47 = v48;
        unint64_t v14 = v47 + 12;
        if (v8 == v41)
        {
          *a3 = v47;
          a3[1] = v14;
          a3[2] = v49;
        }
        else
        {
          do
          {
            uint64_t v50 = *(void *)(v8 - 12);
            v8 -= 12;
            int v51 = *((_DWORD *)v8 + 2);
            *(void *)(v47 - 12) = v50;
            v47 -= 12;
            *((_DWORD *)v47 + 2) = v51;
          }
          while (v8 != v41);
          uint64_t v8 = (char *)*a3;
          *a3 = v47;
          a3[1] = v14;
          a3[2] = v49;
          if (!v8) {
            goto LABEL_11;
          }
        }
        operator delete(v8);
      }
LABEL_11:
      a3[1] = v14;
      uint64_t v8 = v14;
LABEL_12:
      ++v12;
    }
    while (v12 != v58);
  }
}

void sub_3BB780(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_3BB7A8(unsigned int **a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, int a4@<W3>, char **a5@<X8>)
{
  int v5 = a3;
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (a4) {
    int v7 = -1;
  }
  else {
    int v7 = 1;
  }
  int v66 = v7;
  if ((a3 & 0x80000000) == 0)
  {
    unint64_t v10 = 0;
    float64x2_t v63 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
    float64x2_t v64 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
    float64x2_t v61 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
    float64x2_t v62 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
    while (1)
    {
      uint64_t v12 = *a2;
      if (v5 >= (int)(-1431655765 * ((unint64_t)(a2[1] - *a2) >> 2))) {
        return;
      }
      uint64_t v13 = (unsigned int *)(v12 + 12 * v5);
      unsigned int v15 = **a1;
      unsigned int v14 = (*a1)[1];
      BOOL v16 = v15 == -1 && v14 == -1;
      if (v16
        || ((unsigned int v17 = *v13, v18 = *(_DWORD *)(v12 + 12 * v5 + 4), *v13 == -1)
          ? (BOOL v19 = v18 == -1)
          : (BOOL v19 = 0),
            v19))
      {
        unint64_t v35 = (unint64_t)a5[2];
        if (a1[20] != (unsigned int *)0x7FFFFFFFFFFFFFFFLL) {
          goto LABEL_55;
        }
        goto LABEL_22;
      }
      long double v20 = exp(3.14159265 - (double)v14 * 6.28318531 / 4294967300.0);
      long double v21 = atan((v20 - 1.0 / v20) * 0.5) * 57.2957795 * 0.0174532925;
      v22.i64[0] = v15;
      v22.i64[1] = v17;
      long double v23 = exp(3.14159265 - (double)v18 * 6.28318531 / 4294967300.0);
      long double v24 = atan((v23 - 1.0 / v23) * 0.5) * 57.2957795 * 0.0174532925;
      int64x2_t v25 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v22), v64), v63), v62), v61);
      double v65 = vsubq_f64((float64x2_t)v25, (float64x2_t)vdupq_laneq_s64(v25, 1)).f64[0];
      long double v26 = sin((v21 - v24) * 0.5);
      long double v27 = v26 * v26;
      double v28 = cos(v21);
      long double v29 = v28 * cos(v24);
      long double v30 = sin(0.5 * v65);
      long double v31 = atan2(sqrt(v30 * v30 * v29 + v27), sqrt(1.0 - (v30 * v30 * v29 + v27)));
      double v32 = (v31 + v31) * 6372797.56 * 100.0;
      if (v32 >= 0.0)
      {
        double v33 = v32;
        if (v32 >= 4.50359963e15) {
          goto LABEL_43;
        }
        uint64_t v34 = (uint64_t)(v32 + v32) + 1;
      }
      else
      {
        double v33 = v32;
        if (v32 <= -4.50359963e15) {
          goto LABEL_43;
        }
        uint64_t v34 = (uint64_t)(v32 + v32);
        if (v34 >= 1) {
          --v34;
        }
      }
      double v33 = (double)(v34 >> 1);
LABEL_43:
      if (v33 >= 9.22337204e18)
      {
        unint64_t v35 = (unint64_t)a5[2];
        if (a1[20] != (unsigned int *)0x7FFFFFFFFFFFFFFFLL && a1[20] != (unsigned int *)0x7FFFFFFFFFFFFFFELL) {
          goto LABEL_55;
        }
        goto LABEL_22;
      }
      if (v32 >= 0.0)
      {
        if (v32 >= 4.50359963e15) {
          goto LABEL_54;
        }
        uint64_t v48 = (uint64_t)(v32 + v32) + 1;
      }
      else
      {
        if (v32 <= -4.50359963e15) {
          goto LABEL_54;
        }
        uint64_t v48 = (uint64_t)(v32 + v32);
        if (v48 >= 1) {
          --v48;
        }
      }
      double v32 = (double)(v48 >> 1);
LABEL_54:
      unint64_t v35 = (unint64_t)a5[2];
      if ((uint64_t)v32 > (uint64_t)a1[20])
      {
LABEL_55:
        if ((unint64_t)v10 >= v35)
        {
          int v51 = *a5;
          unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a5) >> 2);
          unint64_t v53 = v52 + 1;
          if (v52 + 1 > 0x1555555555555555) {
LABEL_74:
          }
            sub_2E00();
          unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (void)v51) >> 2);
          if (2 * v54 > v53) {
            unint64_t v53 = 2 * v54;
          }
          if (v54 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v55 = 0x1555555555555555;
          }
          else {
            unint64_t v55 = v53;
          }
          if (v55)
          {
            if (v55 > 0x1555555555555555) {
LABEL_75:
            }
              sub_188D718();
            double v56 = (char *)operator new(12 * v55);
          }
          else
          {
            double v56 = 0;
          }
          unint64_t v57 = &v56[12 * v52];
          uint64_t v58 = *(void *)v13;
          *((_DWORD *)v57 + 2) = v13[2];
          *(void *)unint64_t v57 = v58;
          uint64_t v50 = v57 + 12;
          if (v10 != v51)
          {
            do
            {
              uint64_t v59 = *(void *)(v10 - 12);
              v10 -= 12;
              int v60 = *((_DWORD *)v10 + 2);
              *(void *)(v57 - 12) = v59;
              v57 -= 12;
              *((_DWORD *)v57 + 2) = v60;
            }
            while (v10 != v51);
            unint64_t v10 = *a5;
          }
          *a5 = v57;
          a5[1] = v50;
          a5[2] = &v56[12 * v55];
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          uint64_t v49 = *(void *)v13;
          *((_DWORD *)v10 + 2) = v13[2];
          *(void *)unint64_t v10 = v49;
          uint64_t v50 = v10 + 12;
        }
        a5[1] = v50;
        return;
      }
LABEL_22:
      if ((unint64_t)v10 < v35)
      {
        uint64_t v11 = *(void *)v13;
        *((_DWORD *)v10 + 2) = v13[2];
        *(void *)unint64_t v10 = v11;
        a5[1] = v10 + 12;
        v10 += 12;
        v5 += v66;
        if (v5 < 0) {
          return;
        }
      }
      else
      {
        double v36 = *a5;
        unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a5) >> 2);
        unint64_t v38 = v37 + 1;
        if (v37 + 1 > 0x1555555555555555) {
          goto LABEL_74;
        }
        unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (void)v36) >> 2);
        if (2 * v39 > v38) {
          unint64_t v38 = 2 * v39;
        }
        if (v39 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v40 = 0x1555555555555555;
        }
        else {
          unint64_t v40 = v38;
        }
        if (v40)
        {
          if (v40 > 0x1555555555555555) {
            goto LABEL_75;
          }
          uint64_t v41 = (char *)operator new(12 * v40);
        }
        else
        {
          uint64_t v41 = 0;
        }
        uint64_t v42 = *(void *)v13;
        unint64_t v43 = &v41[12 * v37];
        *((_DWORD *)v43 + 2) = v13[2];
        *(void *)unint64_t v43 = v42;
        unint64_t v44 = v43;
        if (v10 != v36)
        {
          do
          {
            uint64_t v45 = *(void *)(v10 - 12);
            v10 -= 12;
            int v46 = *((_DWORD *)v10 + 2);
            *(void *)(v44 - 12) = v45;
            v44 -= 12;
            *((_DWORD *)v44 + 2) = v46;
          }
          while (v10 != v36);
          unint64_t v10 = *a5;
        }
        unint64_t v47 = v43 + 12;
        *a5 = v44;
        a5[1] = v43 + 12;
        a5[2] = &v41[12 * v40];
        if (v10) {
          operator delete(v10);
        }
        a5[1] = v47;
        unint64_t v10 = v47;
        v5 += v66;
        if (v5 < 0) {
          return;
        }
      }
    }
  }
}

void sub_3BBD3C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3BBD68(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  *(void *)a1 = a2;
  uint64_t v10 = *a3;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a3 + 2);
  *(void *)(a1 + 8) = v10;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = a5;
  *(void *)(a1 + 40) = a6;
  *(void *)(a1 + 48) = a7;
  sub_3EBD64(a1 + 56, a8, 2);
  uint64_t v11 = sub_3750CC(a8);
  *(_OWORD *)(a1 + 104) = 0u;
  uint64_t v12 = (void **)(a1 + 104);
  *(void *)(a1 + 96) = v11;
  uint64_t v13 = (void **)(a1 + 128);
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 152) = 0;
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "RerouteAnalytics");
  long double v27 = 0;
  double v28 = 0;
  uint64_t v29 = 0;
  unsigned int v14 = sub_374CDC((uint64_t)a8, (uint64_t)__p, (uint64_t *)&v27);
  sub_3BC78C((void *)(a1 + 160), (uint64_t)v14);
  unsigned int v15 = v27;
  if (v27)
  {
    BOOL v16 = v28;
    unsigned int v17 = v27;
    if (v28 != v27)
    {
      do
      {
        if (*((char *)v16 - 1) < 0) {
          operator delete(*(v16 - 3));
        }
        v16 -= 3;
      }
      while (v16 != v15);
      unsigned int v17 = v27;
    }
    double v28 = v15;
    operator delete(v17);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  sub_3BC110(a1, *(char **)(a1 + 24), (uint64_t *)__p);
  unsigned int v18 = *v12;
  if (*v12)
  {
    *(void *)(a1 + 112) = v18;
    operator delete(v18);
    *uint64_t v12 = 0;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)__p;
  *(void **)(a1 + 120) = __p[2];
  sub_3BC110(a1, *(char **)(a1 + 32), (uint64_t *)__p);
  uint64x2_t v22 = *v13;
  if (*v13)
  {
    *(void *)(a1 + 136) = v22;
    operator delete(v22);
    *uint64_t v13 = 0;
    *(void *)(a1 + 136) = 0;
    *(void *)(a1 + 144) = 0;
  }
  long double v23 = __p[0];
  *(_OWORD *)(a1 + 128) = *(_OWORD *)__p;
  *(void **)(a1 + 144) = __p[2];
  if (*(void *)(a1 + 104) == *(void *)(a1 + 112))
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)__p);
      sub_188FC78(__p, (uint64_t)"Old user route is empty.", 24);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v27, 3u);
      if (SHIBYTE(v29) < 0) {
        operator delete(v27);
      }
      if (v26 < 0) {
        operator delete(__p[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
  }
  else
  {
    sub_3B8BC4((unsigned int **)(a1 + 104), *(unsigned int **)a1, 0, 0, (uint64_t)__p, (unint64_t)v23, v19, v20, v21);
    *(void **)(a1 + 152) = __p[3];
  }
  return a1;
}

void sub_3BC060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v17 - 49) < 0) {
    operator delete(*(void **)(v17 - 72));
  }
  sub_111ECAC((uint64_t)&__p);
  double v19 = *v16;
  if (*v16)
  {
    *(void *)(v14 + 136) = v19;
    operator delete(v19);
    double v20 = *v15;
    if (*v15) {
      goto LABEL_5;
    }
  }
  else
  {
    double v20 = *v15;
    if (*v15)
    {
LABEL_5:
      *(void *)(v14 + 112) = v20;
      operator delete(v20);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_3BC110(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_460B00(a2, (uint64_t)&v67);
  sub_3BD7E4((uint64_t)&v60, &v67);
  unint64_t v52 = a2;
  sub_3BD7E4((uint64_t)&v53, &v72);
  while (1)
  {
    if (v65 == v66 || __p == v59)
    {
      if ((v65 == v66) == (__p == v59)) {
        break;
      }
      goto LABEL_23;
    }
    uint64_t v8 = v60;
    if (v62 != v55) {
      goto LABEL_24;
    }
    if (v60)
    {
      unint64_t v9 = v61;
      int v10 = v9 < sub_470ADC(v60);
      uint64_t v11 = v53;
      if (!v53) {
        goto LABEL_21;
      }
    }
    else
    {
      int v10 = 0;
      uint64_t v11 = v53;
      if (!v53)
      {
LABEL_21:
        int v14 = 0;
        goto LABEL_22;
      }
    }
    unint64_t v12 = v54;
    unint64_t v13 = sub_470ADC(v11);
    int v14 = v12 < v13;
    if (v12 < v13) {
      int v15 = v10;
    }
    else {
      int v15 = 0;
    }
    if (v15 == 1)
    {
      uint64_t v16 = sub_470B40(v60, v61);
      if (v16 == sub_470B40(v53, v54)) {
        break;
      }
      goto LABEL_23;
    }
LABEL_22:
    if (v10 == v14) {
      break;
    }
LABEL_23:
    uint64_t v8 = v60;
LABEL_24:
    uint64_t v17 = (unsigned int *)sub_470B40(v8, v61);
    unint64_t v18 = sub_3BE8C8(*(void *)(a1 + 96), v17, 0);
    unint64_t v20 = v18;
    int v21 = v19;
    long double v23 = (char *)a3[1];
    unint64_t v22 = a3[2];
    if ((unint64_t)v23 < v22)
    {
      *(void *)long double v23 = v18;
      *((_DWORD *)v23 + 2) = v19;
      uint64_t v6 = v23 + 12;
      goto LABEL_3;
    }
    long double v24 = (char *)*a3;
    unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v23[-*a3] >> 2);
    unint64_t v26 = v25 + 1;
    if (v25 + 1 > 0x1555555555555555) {
      sub_2E00();
    }
    unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (void)v24) >> 2);
    if (2 * v27 > v26) {
      unint64_t v26 = 2 * v27;
    }
    if (v27 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v28 = 0x1555555555555555;
    }
    else {
      unint64_t v28 = v26;
    }
    if (v28)
    {
      if (v28 > 0x1555555555555555) {
        sub_188D718();
      }
      uint64_t v29 = (char *)operator new(12 * v28);
      uint64_t v30 = (uint64_t)&v29[12 * v25];
      *(void *)uint64_t v30 = v20;
      *(_DWORD *)(v30 + 8) = v21;
      uint64_t v31 = v30;
      if (v23 == v24)
      {
LABEL_34:
        uint64_t v6 = (char *)(v30 + 12);
        *a3 = v31;
        a3[1] = v30 + 12;
        a3[2] = (uint64_t)&v29[12 * v28];
        if (v23) {
          goto LABEL_39;
        }
        goto LABEL_3;
      }
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v30 = 4 * ((uint64_t)&v23[-*a3] >> 2);
      *(void *)uint64_t v30 = v20;
      *(_DWORD *)(v30 + 8) = v19;
      uint64_t v31 = 12 * v25;
      if (v23 == v24) {
        goto LABEL_34;
      }
    }
    do
    {
      uint64_t v32 = *(void *)(v23 - 12);
      v23 -= 12;
      int v33 = *((_DWORD *)v23 + 2);
      *(void *)(v31 - 12) = v32;
      v31 -= 12;
      *(_DWORD *)(v31 + 8) = v33;
    }
    while (v23 != v24);
    long double v23 = (char *)*a3;
    uint64_t v6 = (char *)(v30 + 12);
    *a3 = v31;
    a3[1] = v30 + 12;
    a3[2] = (uint64_t)&v29[12 * v28];
    if (v23) {
LABEL_39:
    }
      operator delete(v23);
LABEL_3:
    a3[1] = (uint64_t)v6;
    sub_3BD3D4(&v60);
  }
  if (__p)
  {
    uint64_t v59 = __p;
    operator delete(__p);
  }
  if (v56)
  {
    unint64_t v57 = v56;
    operator delete(v56);
  }
  if (v65)
  {
    int v66 = v65;
    operator delete(v65);
  }
  if (v63)
  {
    float64x2_t v64 = v63;
    operator delete(v63);
  }
  if (v75)
  {
    uint64_t v76 = v75;
    operator delete(v75);
  }
  if (v73)
  {
    unsigned int v74 = v73;
    operator delete(v73);
  }
  if (v70)
  {
    unint64_t v71 = v70;
    operator delete(v70);
  }
  if (v68)
  {
    char v69 = v68;
    operator delete(v68);
  }
  if (!sub_45FB38(v52))
  {
    uint64_t v34 = *(void *)(a1 + 96);
    unint64_t v35 = (unsigned int *)sub_460E10((uint64_t)v52);
    unint64_t v36 = sub_3BE8C8(v34, v35, 1);
    unint64_t v38 = v36;
    int v39 = v37;
    uint64_t v41 = (_DWORD *)a3[1];
    unint64_t v40 = a3[2];
    if ((unint64_t)v41 >= v40)
    {
      unint64_t v43 = (_DWORD *)*a3;
      unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v41 - *a3) >> 2);
      unint64_t v45 = v44 + 1;
      if (v44 + 1 > 0x1555555555555555) {
        sub_2E00();
      }
      unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - (void)v43) >> 2);
      if (2 * v46 > v45) {
        unint64_t v45 = 2 * v46;
      }
      if (v46 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v47 = 0x1555555555555555;
      }
      else {
        unint64_t v47 = v45;
      }
      if (v47)
      {
        if (v47 > 0x1555555555555555) {
          sub_188D718();
        }
        uint64_t v48 = (char *)operator new(12 * v47);
      }
      else
      {
        uint64_t v48 = 0;
      }
      uint64_t v49 = &v48[12 * v44];
      *(void *)uint64_t v49 = v38;
      *((_DWORD *)v49 + 2) = v39;
      uint64_t v42 = v49 + 12;
      if (v41 != v43)
      {
        do
        {
          uint64_t v50 = *(void *)(v41 - 3);
          v41 -= 3;
          int v51 = v41[2];
          *(void *)(v49 - 12) = v50;
          v49 -= 12;
          *((_DWORD *)v49 + 2) = v51;
        }
        while (v41 != v43);
        uint64_t v41 = (_DWORD *)*a3;
      }
      *a3 = (uint64_t)v49;
      a3[1] = (uint64_t)v42;
      a3[2] = (uint64_t)&v48[12 * v47];
      if (v41) {
        operator delete(v41);
      }
    }
    else
    {
      *(void *)uint64_t v41 = v36;
      v41[2] = v37;
      uint64_t v42 = v41 + 3;
    }
    a3[1] = (uint64_t)v42;
  }
}

void sub_3BC55C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v30 = *(void **)v28;
  if (*(void *)v28)
  {
    *(void *)(v28 + 8) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

void sub_3BC5BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 104);
  sub_3BCE14((unsigned int **)a1, (uint64_t *)(a1 + 104), *(void *)(a1 + 152), 1, (char **)&__p);
  sub_3BC904(a1, (uint64_t *)&__p, (void **)&v13);
  if (__p)
  {
    unint64_t v12 = (int *)__p;
    operator delete(__p);
  }
  sub_3BCE14((unsigned int **)a1, v4, *(_DWORD *)(a1 + 152) + 1, 0, (char **)&v9);
  sub_3BC904(a1, (uint64_t *)&v9, &__p);
  if (v9)
  {
    int v10 = (int *)v9;
    operator delete(v9);
  }
  sub_3BCE14((unsigned int **)a1, (uint64_t *)(a1 + 128), 0, 0, (char **)v8);
  sub_3BC904(a1, (uint64_t *)v8, &v9);
  if (v8[0])
  {
    v8[1] = v8[0];
    operator delete(v8[0]);
  }
  sub_3BE49C(v13, v14, (uint64_t)v8, a2, v5);
  sub_3BE600((int *)__p, v12, (uint64_t)v8, a2, v6);
  sub_3BE764((int *)v9, v10, (uint64_t)v8, a2, v7);
  if (v9)
  {
    int v10 = (int *)v9;
    operator delete(v9);
  }
  if (__p)
  {
    unint64_t v12 = (int *)__p;
    operator delete(__p);
  }
  if (v13)
  {
    int v14 = v13;
    operator delete(v13);
  }
}

void sub_3BC6FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  unint64_t v18 = *(void **)(v16 - 56);
  if (v18)
  {
    *(void *)(v16 - 48) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

void sub_3BC778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    JUMPOUT(0x3BC76CLL);
  }
  JUMPOUT(0x3BC770);
}

void *sub_3BC78C(void *a1, uint64_t a2)
{
  long long __p = operator new(0x38uLL);
  long long v6 = xmmword_20B99F0;
  strcpy((char *)__p, "reference_junctions_maximum_distance_from_user_in_m");
  *a1 = sub_5CDE0(a2, &__p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x40uLL);
  long long v6 = xmmword_20B9A90;
  strcpy((char *)__p, "reference_junctions_minimum_distance_between_junctions_in_m");
  a1[1] = sub_5CDE0(a2, &__p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x20uLL);
  long long v6 = xmmword_20B8890;
  strcpy((char *)__p, "road_blockage_search_radius_m");
  a1[2] = sub_5CDE0(a2, &__p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_3BC8E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_3BC904(uint64_t a1@<X0>, uint64_t *a2@<X1>, void **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 == v6)
  {
    uint64_t v8 = 0;
  }
  else
  {
    long double v7 = operator new(0xCuLL);
    uint64_t v8 = (char *)(v7 + 3);
    int v9 = *(_DWORD *)(v5 + 8);
    *(void *)long double v7 = *(void *)v5;
    v7[2] = v9;
    a3[1] = v7 + 3;
    a3[2] = v7 + 3;
    *a3 = v7;
  }
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 2);
  if (v10 <= 1) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 2);
  }
  unint64_t v58 = v11;
  if (v10 >= 2)
  {
    uint64_t v12 = 1;
    float64x2_t v54 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
    float64x2_t v55 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
    float64x2_t v53 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
    float64x2_t v52 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
    do
    {
      uint64_t v15 = *a2;
      uint64_t v16 = (unsigned int *)(*a2 + 12 * v12);
      unsigned int v18 = *((_DWORD *)v8 - 3);
      unsigned int v17 = *((_DWORD *)v8 - 2);
      if (v18 == -1 && v17 == -1)
      {
        uint64_t v38 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_42;
      }
      unsigned int v20 = *v16;
      unsigned int v21 = *(_DWORD *)(v15 + 12 * v12 + 4);
      if (*v16 == -1 && v21 == -1)
      {
        uint64_t v38 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_42;
      }
      long double v23 = exp(3.14159265 - (double)v17 * 6.28318531 / 4294967300.0);
      long double v24 = atan((v23 - 1.0 / v23) * 0.5) * 57.2957795 * 0.0174532925;
      v25.i64[0] = v18;
      v25.i64[1] = v20;
      long double v26 = exp(3.14159265 - (double)v21 * 6.28318531 / 4294967300.0);
      long double v27 = atan((v26 - 1.0 / v26) * 0.5) * 57.2957795 * 0.0174532925;
      float64x2_t v28 = vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v25), v55), v54), v53), v52);
      double v56 = vsubq_f64(v28, (float64x2_t)vdupq_laneq_s64((int64x2_t)v28, 1)).f64[0];
      long double v29 = sin((v24 - v27) * 0.5);
      long double v30 = v29 * v29;
      double v31 = cos(v24);
      long double v32 = v31 * cos(v27);
      long double v33 = sin(0.5 * v56);
      long double v34 = atan2(sqrt(v33 * v33 * v32 + v30), sqrt(1.0 - (v33 * v33 * v32 + v30)));
      double v35 = (v34 + v34) * 6372797.56 * 100.0;
      if (v35 >= 0.0)
      {
        double v36 = v35;
        if (v35 < 4.50359963e15)
        {
          uint64_t v37 = (uint64_t)(v35 + v35) + 1;
LABEL_30:
          double v36 = (double)(v37 >> 1);
        }
      }
      else
      {
        double v36 = v35;
        if (v35 > -4.50359963e15)
        {
          uint64_t v37 = (uint64_t)(v35 + v35);
          if (v37 >= 1) {
            --v37;
          }
          goto LABEL_30;
        }
      }
      if (v36 < 9.22337204e18)
      {
        if (v35 >= 0.0)
        {
          if (v35 < 4.50359963e15)
          {
            uint64_t v39 = (uint64_t)(v35 + v35) + 1;
            goto LABEL_40;
          }
        }
        else if (v35 > -4.50359963e15)
        {
          uint64_t v39 = (uint64_t)(v35 + v35);
          if (v39 >= 1) {
            --v39;
          }
LABEL_40:
          double v35 = (double)(v39 >> 1);
        }
        uint64_t v38 = (uint64_t)v35;
        goto LABEL_42;
      }
      uint64_t v38 = 0x7FFFFFFFFFFFFFFELL;
LABEL_42:
      if (v12 != -1 - 0x5555555555555555 * ((a2[1] - v15) >> 2) && v38 < *(void *)(a1 + 168)) {
        goto LABEL_12;
      }
      unint64_t v40 = (unint64_t)a3[2];
      if ((unint64_t)v8 < v40)
      {
        uint64_t v13 = *(void *)v16;
        *((_DWORD *)v8 + 2) = v16[2];
        *(void *)uint64_t v8 = v13;
        int v14 = v8 + 12;
      }
      else
      {
        uint64_t v41 = (char *)*a3;
        unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (unsigned char *)*a3) >> 2);
        unint64_t v43 = v42 + 1;
        if (v42 + 1 > 0x1555555555555555) {
          sub_2E00();
        }
        unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - (void)v41) >> 2);
        if (2 * v44 > v43) {
          unint64_t v43 = 2 * v44;
        }
        if (v44 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v45 = 0x1555555555555555;
        }
        else {
          unint64_t v45 = v43;
        }
        if (v45)
        {
          if (v45 > 0x1555555555555555) {
            sub_188D718();
          }
          unint64_t v46 = (char *)operator new(12 * v45);
        }
        else
        {
          unint64_t v46 = 0;
        }
        unint64_t v47 = &v46[12 * v42];
        uint64_t v48 = *(void *)v16;
        uint64_t v49 = &v46[12 * v45];
        *((_DWORD *)v47 + 2) = v16[2];
        *(void *)unint64_t v47 = v48;
        int v14 = v47 + 12;
        if (v8 == v41)
        {
          *a3 = v47;
          a3[1] = v14;
          a3[2] = v49;
        }
        else
        {
          do
          {
            uint64_t v50 = *(void *)(v8 - 12);
            v8 -= 12;
            int v51 = *((_DWORD *)v8 + 2);
            *(void *)(v47 - 12) = v50;
            v47 -= 12;
            *((_DWORD *)v47 + 2) = v51;
          }
          while (v8 != v41);
          uint64_t v8 = (char *)*a3;
          *a3 = v47;
          a3[1] = v14;
          a3[2] = v49;
          if (!v8) {
            goto LABEL_11;
          }
        }
        operator delete(v8);
      }
LABEL_11:
      a3[1] = v14;
      uint64_t v8 = v14;
LABEL_12:
      ++v12;
    }
    while (v12 != v58);
  }
}

void sub_3BCDEC(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_3BCE14(unsigned int **a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, int a4@<W3>, char **a5@<X8>)
{
  int v5 = a3;
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (a4) {
    int v7 = -1;
  }
  else {
    int v7 = 1;
  }
  int v66 = v7;
  if ((a3 & 0x80000000) == 0)
  {
    unint64_t v10 = 0;
    float64x2_t v63 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
    float64x2_t v64 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
    float64x2_t v61 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
    float64x2_t v62 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
    while (1)
    {
      uint64_t v12 = *a2;
      if (v5 >= (int)(-1431655765 * ((unint64_t)(a2[1] - *a2) >> 2))) {
        return;
      }
      uint64_t v13 = (unsigned int *)(v12 + 12 * v5);
      unsigned int v15 = **a1;
      unsigned int v14 = (*a1)[1];
      BOOL v16 = v15 == -1 && v14 == -1;
      if (v16
        || ((unsigned int v17 = *v13, v18 = *(_DWORD *)(v12 + 12 * v5 + 4), *v13 == -1)
          ? (BOOL v19 = v18 == -1)
          : (BOOL v19 = 0),
            v19))
      {
        unint64_t v35 = (unint64_t)a5[2];
        if (a1[20] != (unsigned int *)0x7FFFFFFFFFFFFFFFLL) {
          goto LABEL_55;
        }
        goto LABEL_22;
      }
      long double v20 = exp(3.14159265 - (double)v14 * 6.28318531 / 4294967300.0);
      long double v21 = atan((v20 - 1.0 / v20) * 0.5) * 57.2957795 * 0.0174532925;
      v22.i64[0] = v15;
      v22.i64[1] = v17;
      long double v23 = exp(3.14159265 - (double)v18 * 6.28318531 / 4294967300.0);
      long double v24 = atan((v23 - 1.0 / v23) * 0.5) * 57.2957795 * 0.0174532925;
      float64x2_t v25 = vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v22), v64), v63), v62), v61);
      double v65 = vsubq_f64(v25, (float64x2_t)vdupq_laneq_s64((int64x2_t)v25, 1)).f64[0];
      long double v26 = sin((v21 - v24) * 0.5);
      long double v27 = v26 * v26;
      double v28 = cos(v21);
      long double v29 = v28 * cos(v24);
      long double v30 = sin(0.5 * v65);
      long double v31 = atan2(sqrt(v30 * v30 * v29 + v27), sqrt(1.0 - (v30 * v30 * v29 + v27)));
      double v32 = (v31 + v31) * 6372797.56 * 100.0;
      if (v32 >= 0.0)
      {
        double v33 = v32;
        if (v32 >= 4.50359963e15) {
          goto LABEL_43;
        }
        uint64_t v34 = (uint64_t)(v32 + v32) + 1;
      }
      else
      {
        double v33 = v32;
        if (v32 <= -4.50359963e15) {
          goto LABEL_43;
        }
        uint64_t v34 = (uint64_t)(v32 + v32);
        if (v34 >= 1) {
          --v34;
        }
      }
      double v33 = (double)(v34 >> 1);
LABEL_43:
      if (v33 >= 9.22337204e18)
      {
        unint64_t v35 = (unint64_t)a5[2];
        if (a1[20] != (unsigned int *)0x7FFFFFFFFFFFFFFFLL && a1[20] != (unsigned int *)0x7FFFFFFFFFFFFFFELL) {
          goto LABEL_55;
        }
        goto LABEL_22;
      }
      if (v32 >= 0.0)
      {
        if (v32 >= 4.50359963e15) {
          goto LABEL_54;
        }
        uint64_t v48 = (uint64_t)(v32 + v32) + 1;
      }
      else
      {
        if (v32 <= -4.50359963e15) {
          goto LABEL_54;
        }
        uint64_t v48 = (uint64_t)(v32 + v32);
        if (v48 >= 1) {
          --v48;
        }
      }
      double v32 = (double)(v48 >> 1);
LABEL_54:
      unint64_t v35 = (unint64_t)a5[2];
      if ((uint64_t)v32 > (uint64_t)a1[20])
      {
LABEL_55:
        if ((unint64_t)v10 >= v35)
        {
          int v51 = *a5;
          unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a5) >> 2);
          unint64_t v53 = v52 + 1;
          if (v52 + 1 > 0x1555555555555555) {
LABEL_74:
          }
            sub_2E00();
          unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (void)v51) >> 2);
          if (2 * v54 > v53) {
            unint64_t v53 = 2 * v54;
          }
          if (v54 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v55 = 0x1555555555555555;
          }
          else {
            unint64_t v55 = v53;
          }
          if (v55)
          {
            if (v55 > 0x1555555555555555) {
LABEL_75:
            }
              sub_188D718();
            double v56 = (char *)operator new(12 * v55);
          }
          else
          {
            double v56 = 0;
          }
          unint64_t v57 = &v56[12 * v52];
          uint64_t v58 = *(void *)v13;
          *((_DWORD *)v57 + 2) = v13[2];
          *(void *)unint64_t v57 = v58;
          uint64_t v50 = v57 + 12;
          if (v10 != v51)
          {
            do
            {
              uint64_t v59 = *(void *)(v10 - 12);
              v10 -= 12;
              int v60 = *((_DWORD *)v10 + 2);
              *(void *)(v57 - 12) = v59;
              v57 -= 12;
              *((_DWORD *)v57 + 2) = v60;
            }
            while (v10 != v51);
            unint64_t v10 = *a5;
          }
          *a5 = v57;
          a5[1] = v50;
          a5[2] = &v56[12 * v55];
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          uint64_t v49 = *(void *)v13;
          *((_DWORD *)v10 + 2) = v13[2];
          *(void *)unint64_t v10 = v49;
          uint64_t v50 = v10 + 12;
        }
        a5[1] = v50;
        return;
      }
LABEL_22:
      if ((unint64_t)v10 < v35)
      {
        uint64_t v11 = *(void *)v13;
        *((_DWORD *)v10 + 2) = v13[2];
        *(void *)unint64_t v10 = v11;
        a5[1] = v10 + 12;
        v10 += 12;
        v5 += v66;
        if (v5 < 0) {
          return;
        }
      }
      else
      {
        double v36 = *a5;
        unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a5) >> 2);
        unint64_t v38 = v37 + 1;
        if (v37 + 1 > 0x1555555555555555) {
          goto LABEL_74;
        }
        unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (void)v36) >> 2);
        if (2 * v39 > v38) {
          unint64_t v38 = 2 * v39;
        }
        if (v39 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v40 = 0x1555555555555555;
        }
        else {
          unint64_t v40 = v38;
        }
        if (v40)
        {
          if (v40 > 0x1555555555555555) {
            goto LABEL_75;
          }
          uint64_t v41 = (char *)operator new(12 * v40);
        }
        else
        {
          uint64_t v41 = 0;
        }
        uint64_t v42 = *(void *)v13;
        unint64_t v43 = &v41[12 * v37];
        *((_DWORD *)v43 + 2) = v13[2];
        *(void *)unint64_t v43 = v42;
        unint64_t v44 = v43;
        if (v10 != v36)
        {
          do
          {
            uint64_t v45 = *(void *)(v10 - 12);
            v10 -= 12;
            int v46 = *((_DWORD *)v10 + 2);
            *(void *)(v44 - 12) = v45;
            v44 -= 12;
            *((_DWORD *)v44 + 2) = v46;
          }
          while (v10 != v36);
          unint64_t v10 = *a5;
        }
        unint64_t v47 = v43 + 12;
        *a5 = v44;
        a5[1] = v43 + 12;
        a5[2] = &v41[12 * v40];
        if (v10) {
          operator delete(v10);
        }
        a5[1] = v47;
        unint64_t v10 = v47;
        v5 += v66;
        if (v5 < 0) {
          return;
        }
      }
    }
  }
}

void sub_3BD3A8(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void **sub_3BD3D4(void **a1)
{
  unint64_t v2 = (unint64_t)a1[2];
  a1[1] = (void *)((char *)a1[1] + 1);
  uint64_t v4 = (char *)a1[6];
  for (uint64_t i = (char *)a1[7]; v2 < ((i - v4) >> 4) - 1; uint64_t i = (char *)a1[7])
  {
    uint64_t v6 = &v4[16 * v2];
    if (!*a1)
    {
      if (!*(void *)v6) {
        goto LABEL_3;
      }
      BOOL v9 = 0;
      unint64_t v11 = *(void *)&v4[16 * v2 + 8];
      unint64_t v14 = sub_470ADC(*(void **)v6);
LABEL_2:
      if ((v9 ^ (v11 < v14))) {
        return a1;
      }
      goto LABEL_3;
    }
    int v7 = a1[1];
    unint64_t v8 = sub_470ADC(*a1);
    BOOL v9 = (unint64_t)v7 < v8;
    if (*(void *)v6)
    {
      unint64_t v10 = &v4[16 * v2];
      unint64_t v13 = *((void *)v10 + 1);
      uint64_t v12 = (uint64_t *)(v10 + 8);
      unint64_t v11 = v13;
      unint64_t v14 = sub_470ADC(*(void **)v6);
      if (!v9 || v11 >= v14) {
        goto LABEL_2;
      }
      uint64_t v16 = sub_470B40(*a1, (uint64_t)a1[1]);
      if (v16 != sub_470B40(*(void **)v6, *v12)) {
        return a1;
      }
    }
    else if ((unint64_t)v7 < v8)
    {
      return a1;
    }
LABEL_3:
    int v5 = a1[3];
    unint64_t v2 = (unint64_t)a1[2] + 1;
    a1[2] = (void *)v2;
    *(_OWORD *)a1 = *(_OWORD *)&v5[2 * v2];
    uint64_t v4 = (char *)a1[6];
  }
  return a1;
}

void sub_3BD4EC(_DWORD *a1, _DWORD *a2, _DWORD *a3, unsigned int *a4, double a5, double a6, double a7, double a8, uint64_t a9, int a10)
{
  LODWORD(a5) = *a1;
  LODWORD(a6) = a1[1];
  double v10 = (double)*(unint64_t *)&a5;
  double v11 = (double)*(unint64_t *)&a6;
  LODWORD(a7) = *a2;
  LODWORD(a8) = a2[1];
  double v12 = (double)*(unint64_t *)&a7 - v10;
  double v13 = (double)*(unint64_t *)&a8 - v11;
  double v14 = v12 * v12 + v13 * v13;
  double v15 = fabs(v14);
  HIDWORD(v16) = 1018167296;
  if (v14 == 0.0 || v15 < 2.22044605e-16) {
    goto LABEL_6;
  }
  LODWORD(v15) = *a3;
  LODWORD(v16) = a3[1];
  double v19 = (v12 * ((double)*(unint64_t *)&v15 - v10) + v13 * ((double)v16 - v11)) / v14;
  if (v19 <= 0.0)
  {
    uint64_t v23 = *(void *)a1;
    a4[2] = a1[2];
    *(void *)a4 = v23;
    if (a10) {
      return;
    }
LABEL_13:
    sub_33150((uint64_t)a3, a4, v10);
    return;
  }
  if (v19 >= 1.0)
  {
LABEL_6:
    uint64_t v18 = *(void *)a2;
    a4[2] = a2[2];
    *(void *)a4 = v18;
    if (a10) {
      return;
    }
    goto LABEL_13;
  }
  int v20 = a1[2];
  if (v20 == 0x7FFFFFFF)
  {
    BOOL v21 = 0;
    double v22 = 0.0;
  }
  else
  {
    double v24 = (double)v20;
    int v25 = a2[2];
    BOOL v26 = v25 == 0x7FFFFFFF;
    double v22 = v19 * ((double)v25 - v24) + v24;
    BOOL v21 = v25 != 0x7FFFFFFF;
    if (v26) {
      double v22 = 0.0;
    }
  }
  double v27 = v13 * v19 + v11;
  double v28 = v12 * v19 + v10;
  if (v28 < 0.0) {
    double v29 = -0.5;
  }
  else {
    double v29 = 0.5;
  }
  uint64_t v30 = (v28 + v29);
  if (v27 < 0.0) {
    double v31 = -0.5;
  }
  else {
    double v31 = 0.5;
  }
  unsigned int v32 = (v27 + v31);
  if (v22 < 0.0) {
    double v33 = -0.5;
  }
  else {
    double v33 = 0.5;
  }
  double v10 = v22 + v33;
  if (v21) {
    unsigned int v34 = v10;
  }
  else {
    unsigned int v34 = 0x7FFFFFFF;
  }
  if (v32 >= 0xFFFFFFFE) {
    uint64_t v35 = 4294967294;
  }
  else {
    uint64_t v35 = v32;
  }
  *(void *)a4 = v30 | (v35 << 32);
  a4[2] = v34;
  if (!a10) {
    goto LABEL_13;
  }
}

uint64_t sub_3BD6C8(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = (unsigned char *)*((void *)a2 + 3);
  int v5 = (unsigned char *)*((void *)a2 + 4);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    unint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v8;
    BOOL v9 = &v8[16 * (v7 >> 4)];
    *(void *)(a1 + 40) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 32) = v9;
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  double v11 = (unsigned char *)*((void *)a2 + 6);
  double v10 = (unsigned char *)*((void *)a2 + 7);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      sub_2E00();
    }
    double v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 48) = v13;
    *(void *)(a1 + 56) = v13;
    double v14 = &v13[16 * (v12 >> 4)];
    *(void *)(a1 + 64) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 56) = v14;
  }
  return a1;
}

void sub_3BD7B0(_Unwind_Exception *exception_object)
{
  int v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 56) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3BD7E4(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = (unsigned char *)*((void *)a2 + 3);
  int v5 = (unsigned char *)*((void *)a2 + 4);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    unint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v8;
    BOOL v9 = &v8[16 * (v7 >> 4)];
    *(void *)(a1 + 40) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 32) = v9;
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  double v11 = (unsigned char *)*((void *)a2 + 6);
  double v10 = (unsigned char *)*((void *)a2 + 7);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      sub_2E00();
    }
    double v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 48) = v13;
    *(void *)(a1 + 56) = v13;
    double v14 = &v13[16 * (v12 >> 4)];
    *(void *)(a1 + 64) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 56) = v14;
  }
  return a1;
}

void sub_3BD8CC(_Unwind_Exception *exception_object)
{
  int v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 56) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_3BD900(unsigned int *a1@<X1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X8>)
{
  if (a1)
  {
    uint64_t v6 = *a1;
    if (v6)
    {
      unint64_t v9 = 0;
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      uint64_t v10 = 4 * v6;
      *(void *)(a4 + 16) = 0;
      while (1)
      {
        uint64_t v12 = a1[v9 / 4 + 1];
        uint64_t v13 = v12 - *(int *)((char *)&a1[v9 / 4 + 1] + v12);
        double v14 = (char *)&a1[v9 / 4] + v13;
        unsigned int v15 = *((unsigned __int16 *)v14 + 2);
        if (v15 >= 5 && (uint64_t v16 = *((unsigned __int16 *)v14 + 4)) != 0)
        {
          if ((*((unsigned char *)&a1[v9 / 4 + 1] + v12 + v16) != 0) == a2) {
            goto LABEL_5;
          }
        }
        else if ((a2 & 1) == 0)
        {
          goto LABEL_5;
        }
        if (v15 >= 7 && *(_WORD *)((char *)&a1[v9 / 4 + 2] + v13 + 2))
        {
          if (*((unsigned __int8 *)&a1[v9 / 4 + 1] + v12 + *(unsigned __int16 *)((char *)&a1[v9 / 4 + 2] + v13 + 2)) != a3) {
            goto LABEL_5;
          }
        }
        else if (a3)
        {
          goto LABEL_5;
        }
        if (v15 >= 9 && (uint64_t v17 = *(unsigned __int16 *)((char *)&a1[v9 / 4 + 3] + v13)) != 0)
        {
          uint64_t v18 = (char *)a1 + v12 + v17 + v9 + *(unsigned int *)((char *)&a1[v9 / 4 + 1] + v12 + v17);
          size_t v19 = *((unsigned int *)v18 + 1);
          if (v19 >= 0x17)
          {
            uint64_t v22 = (v19 & 0xFFFFFFF8) + 8;
            if ((v19 | 7) != 0x17) {
              uint64_t v22 = v19 | 7;
            }
            uint64_t v23 = v22 + 1;
            p_dst = (long long *)operator new(v22 + 1);
            *((void *)&__dst + 1) = v19;
            unint64_t v27 = v23 | 0x8000000000000000;
            *(void *)&long long __dst = p_dst;
LABEL_27:
            memcpy(p_dst, v18 + 8, v19);
            *((unsigned char *)p_dst + v19) = 0;
            unint64_t v21 = *(void *)(a4 + 8);
            if (v21 >= *(void *)(a4 + 16))
            {
LABEL_28:
              double v24 = sub_6E8C4((void **)a4, (uint64_t)&__dst);
              int v25 = SHIBYTE(v27);
              *(void *)(a4 + 8) = v24;
              if (v25 < 0) {
                operator delete((void *)__dst);
              }
              goto LABEL_5;
            }
            goto LABEL_4;
          }
          HIBYTE(v27) = *((_DWORD *)v18 + 1);
          p_dst = &__dst;
          if (v19) {
            goto LABEL_27;
          }
          *((unsigned char *)&__dst + v19) = 0;
          unint64_t v21 = *(void *)(a4 + 8);
          if (v21 >= *(void *)(a4 + 16)) {
            goto LABEL_28;
          }
        }
        else
        {
          HIBYTE(v27) = 0;
          LOBYTE(__dst) = 0;
          unint64_t v21 = *(void *)(a4 + 8);
          if (v21 >= *(void *)(a4 + 16)) {
            goto LABEL_28;
          }
        }
LABEL_4:
        long long v11 = __dst;
        *(void *)(v21 + 16) = v27;
        *(_OWORD *)unint64_t v21 = v11;
        *(void *)(a4 + 8) = v21 + 24;
LABEL_5:
        v9 += 4;
        if (v10 == v9) {
          return;
        }
      }
    }
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
}

void sub_3BDB14(_Unwind_Exception *a1)
{
  sub_1A668(v1);
  _Unwind_Resume(a1);
}

void sub_3BDB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1A668(v15);
  _Unwind_Resume(a1);
}

int *sub_3BDB4C@<X0>(int *result@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  if (!a2) {
    goto LABEL_20;
  }
  unint64_t v4 = HIDWORD(a2);
  if (HIDWORD(a2) == 0xFFFFFFFF) {
    goto LABEL_20;
  }
  uint64_t result = (int *)sub_2E6DE0((uint64_t)(result + 974), a2, 0);
  int v5 = (unsigned __int16 *)((char *)result - *result);
  if (*v5 < 5u)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = v5[2];
    if (v6) {
      v6 += (uint64_t)result + *(unsigned int *)((char *)result + v6);
    }
  }
  int64_t v7 = (int *)(v6 + 4 * v4 + 4 + *(unsigned int *)(v6 + 4 * v4 + 4));
  unint64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 >= 5u && (uint64_t v9 = v8[2]) != 0) {
    uint64_t v10 = (char *)v7 + v9 + *(unsigned int *)((char *)v7 + v9);
  }
  else {
    uint64_t v10 = 0;
  }
  long long v11 = &v10[*((unsigned int *)v10 + 1) + 4];
  uint64_t v12 = &v11[-*(int *)v11];
  unsigned int v13 = *(unsigned __int16 *)v12;
  if (v13 < 0xB)
  {
    if (v13 < 5)
    {
LABEL_20:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      return result;
    }
  }
  else if (*((_WORD *)v12 + 5) && v11[*((unsigned __int16 *)v12 + 5)])
  {
    goto LABEL_20;
  }
  uint64_t v14 = *((unsigned __int16 *)v12 + 2);
  if (!v14) {
    goto LABEL_20;
  }
  unsigned int v15 = &v11[v14];
  uint64_t v16 = *(unsigned int *)v15;
  uint64_t v18 = &v15[v16 + 4];
  size_t v17 = *(unsigned int *)&v15[v16];
  if (v17 >= 0x17)
  {
    if ((v17 | 7) == 0x17) {
      uint64_t v19 = (v17 & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v19 = v17 | 7;
    }
    int v20 = operator new(v19 + 1);
    a3[1] = v17;
    a3[2] = v19 - 0x7FFFFFFFFFFFFFFFLL;
    *a3 = v20;
    a3 = v20;
  }
  else
  {
    *((unsigned char *)a3 + 23) = v17;
    if (!v17)
    {
      *((unsigned char *)a3 + v17) = 0;
      return result;
    }
  }
  uint64_t result = (int *)memcpy(a3, v18, v17);
  *((unsigned char *)a3 + v17) = 0;
  return result;
}

int *sub_3BDCD8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  int v5 = (int *)sub_2D5D58(a1, a2);
  uint64_t v6 = (unsigned __int16 *)((char *)v5 - *v5);
  if (*v6 >= 0xDu && (uint64_t v7 = v6[6]) != 0) {
    uint64_t v8 = 4 * *(unsigned __int16 *)((char *)v5 + v7);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t result = (int *)sub_290DEC(a1 + 3896, 1u, 0);
  uint64_t v10 = (unsigned __int16 *)((char *)result - *result);
  if (*v10 < 0xBu)
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = v10[5];
    if (v11) {
      v11 += (uint64_t)result + *(unsigned int *)((char *)result + v11);
    }
  }
  uint64_t v12 = (int *)(v11 + v8 + 4 + *(unsigned int *)(v11 + v8 + 4));
  unsigned int v13 = (unsigned __int16 *)((char *)v12 - *v12);
  if (*v13 >= 7u && (uint64_t v14 = v13[3]) != 0)
  {
    unsigned int v15 = (unsigned int *)((char *)v12 + v14);
    uint64_t v16 = *v15;
    uint64_t v18 = (char *)v15 + v16 + 4;
    size_t v17 = *(unsigned int *)((char *)v15 + v16);
    if (v17 >= 0x17)
    {
      if ((v17 | 7) == 0x17) {
        uint64_t v19 = (v17 & 0xFFFFFFF8) + 8;
      }
      else {
        uint64_t v19 = v17 | 7;
      }
      int v20 = operator new(v19 + 1);
      *((void *)a3 + 1) = v17;
      *((void *)a3 + 2) = v19 - 0x7FFFFFFFFFFFFFFFLL;
      *(void *)a3 = v20;
      a3 = v20;
    }
    else
    {
      a3[23] = v17;
      if (!v17)
      {
        a3[v17] = 0;
        return result;
      }
    }
    uint64_t result = (int *)memcpy(a3, v18, v17);
    a3[v17] = 0;
  }
  else
  {
    a3[23] = 0;
    *a3 = 0;
  }
  return result;
}

uint64_t sub_3BDE2C(uint64_t a1)
{
  unint64_t v2 = *(char **)(a1 + 56);
  if (v2)
  {
    do
    {
      uint64_t v7 = *(char **)v2;
      sub_57AC8((uint64_t *)v2 + 5);
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      unint64_t v2 = v7;
    }
    while (v7);
  }
  BOOL v3 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3) {
    operator delete(v3);
  }
  unint64_t v4 = *(char **)(a1 + 16);
  if (v4)
  {
    do
    {
      uint64_t v8 = *(char **)v4;
      sub_57AC8((uint64_t *)v4 + 5);
      if (v4[39] < 0) {
        operator delete(*((void **)v4 + 2));
      }
      operator delete(v4);
      unint64_t v4 = v8;
    }
    while (v8);
  }
  int v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

char ***sub_3BDEE8(char ***a1, uint64_t *a2)
{
  unint64_t v4 = *a1;
  uint64_t v6 = (*a1)[1];
  unint64_t v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v9 = *v4;
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *v4) >> 2);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0x1555555555555555) {
      sub_2E00();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)v9) >> 2);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v13 = 0x1555555555555555;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 > 0x1555555555555555) {
        sub_188D718();
      }
      uint64_t v14 = (char *)operator new(12 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    unsigned int v15 = &v14[12 * v10];
    *(void *)unsigned int v15 = *a2;
    *((_DWORD *)v15 + 2) = *((_DWORD *)a2 + 2);
    uint64_t v8 = v15 + 12;
    if (v6 != v9)
    {
      do
      {
        uint64_t v16 = *(void *)(v6 - 12);
        v6 -= 12;
        int v17 = *((_DWORD *)v6 + 2);
        *(void *)(v15 - 12) = v16;
        v15 -= 12;
        *((_DWORD *)v15 + 2) = v17;
      }
      while (v6 != v9);
      uint64_t v6 = *v4;
    }
    char *v4 = v15;
    v4[1] = v8;
    v4[2] = &v14[12 * v13];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    uint64_t v7 = *a2;
    *((_DWORD *)v6 + 2) = *((_DWORD *)a2 + 2);
    *(void *)uint64_t v6 = v7;
    uint64_t v8 = v6 + 12;
  }
  v4[1] = v8;
  return a1;
}

uint64_t sub_3BE02C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, unint64_t **a4@<X3>, uint64_t **a5@<X8>)
{
  uint64_t v9 = a2 & 0xFF000000000000;
  unint64_t v10 = a2 & 0xFFFFFFFFFFFFLL;
  unint64_t v11 = (char **)(a1 + 7800);
  if (a3)
  {
    unint64_t v12 = (unsigned int *)sub_2D5EC4(a1, v10, v9 != 0);
    sub_2D5904(a1, v12, 1, v11);
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    unint64_t v13 = *(unsigned char **)(a1 + 7800);
    uint64_t v14 = *(unsigned char **)(a1 + 7808);
    uint64_t v15 = v14 - v13;
    if (v14 == v13) {
      goto LABEL_19;
    }
    if (v15 < 0) {
      sub_2E00();
    }
  }
  else
  {
    uint64_t v16 = (unsigned int *)sub_2D5EC4(a1, v10, v9 == 0);
    sub_2D5904(a1, v16, 0, v11);
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    unint64_t v13 = *(unsigned char **)(a1 + 7800);
    uint64_t v14 = *(unsigned char **)(a1 + 7808);
    uint64_t v15 = v14 - v13;
    if (v14 == v13) {
      goto LABEL_19;
    }
    if (v15 < 0) {
      sub_2E00();
    }
  }
  int v17 = (uint64_t *)operator new(v14 - v13);
  *a5 = v17;
  uint64_t v18 = &v17[v15 >> 3];
  a5[2] = v18;
  memcpy(v17, v13, v15 - 1);
  a5[1] = v18;
  uint64_t v19 = v18;
  if (v17 != v18)
  {
    uint64_t v19 = v17;
    while (__PAIR64__(*((unsigned __int16 *)v19 + 2), *(_DWORD *)v19) != __PAIR64__(WORD2(a2), a2)
         || ((a2 & 0x1000000000000) == 0) == (*((unsigned char *)v19 + 6) == 0))
    {
      if (++v19 == v18)
      {
        uint64_t v19 = &v17[v15 >> 3];
        break;
      }
    }
  }
  uint64_t v20 = (char *)v19 - (char *)v17;
  if (v19 != v17 && v19 != v18)
  {
    if (v20 == 8)
    {
      uint64_t v21 = *v17;
      uint64_t v22 = (char *)v18 - (char *)v19;
      memmove(v17, v19, (char *)v18 - (char *)v19 - 1);
      int v17 = (uint64_t *)((char *)v17 + v22);
LABEL_18:
      *(_DWORD *)int v17 = v21;
      *((unsigned char *)v17 + 6) = BYTE6(v21);
      *((_WORD *)v17 + 2) = WORD2(v21);
      goto LABEL_19;
    }
    if (v19 + 1 == v18)
    {
      uint64_t v21 = *(v18 - 1);
      if (v18 - 1 != v17) {
        memmove(v17 + 1, v17, 8 * (v15 >> 3) - 9);
      }
      goto LABEL_18;
    }
    uint64_t v24 = v20 >> 3;
    uint64_t v25 = v18 - v19;
    if (v24 == v25)
    {
      unint64_t v26 = 0;
      uint64_t v27 = v24;
      uint64_t v28 = 8 * v24 - 8;
      double v29 = &v17[v27];
      do
      {
        uint64_t v30 = &v17[v26 / 8];
        double v31 = &v29[v26 / 8];
        uint64_t v32 = v17[v26 / 8];
        int v33 = v29[v26 / 8];
        *(_DWORD *)((char *)v30 + 3) = *(_DWORD *)((char *)&v29[v26 / 8] + 3);
        *(_DWORD *)uint64_t v30 = v33;
        *(_DWORD *)double v31 = v32;
        *((unsigned char *)v31 + 6) = BYTE6(v32);
        *((_WORD *)v31 + 2) = WORD2(v32);
        if (v28 == v26) {
          break;
        }
        v26 += 8;
      }
      while (v31 + 1 != v18);
    }
    else
    {
      uint64_t v34 = v24;
      do
      {
        uint64_t v35 = v34;
        uint64_t v34 = v25;
        uint64_t v25 = v35 % v25;
      }
      while (v25);
      if (v34)
      {
        double v36 = &v17[v34];
        do
        {
          uint64_t v38 = *--v36;
          uint64_t v37 = v38;
          unint64_t v39 = &v36[v24];
          unint64_t v40 = v36;
          do
          {
            uint64_t v41 = v39;
            int v42 = *(_DWORD *)v39;
            *(_DWORD *)((char *)v40 + 3) = *(_DWORD *)((char *)v41 + 3);
            *(_DWORD *)unint64_t v40 = v42;
            uint64_t v43 = v18 - v41;
            unint64_t v39 = &v41[v24];
            BOOL v44 = __OFSUB__(v24, v43);
            uint64_t v46 = v24 - v43;
            char v45 = (v46 < 0) ^ v44;
            unint64_t v47 = &v17[v46];
            if (!v45) {
              unint64_t v39 = v47;
            }
            unint64_t v40 = v41;
          }
          while (v39 != v36);
          *(_DWORD *)uint64_t v41 = v37;
          *((unsigned char *)v41 + 6) = BYTE6(v37);
          *((_WORD *)v41 + 2) = WORD2(v37);
        }
        while (v36 != v17);
      }
    }
  }
LABEL_19:
  uint64_t v48 = a4;
  return sub_3BE354((uint64_t)a5, &v48);
}

void sub_3BE330(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3BE354(uint64_t result, unint64_t ***a2)
{
  uint64_t v2 = result;
  unint64_t v4 = *(int **)result;
  BOOL v3 = *(int **)(result + 8);
  if (*(int **)result == v3)
  {
    unint64_t v5 = *(int **)result;
  }
  else
  {
    unint64_t v5 = *(int **)(result + 8);
    uint64_t v6 = *a2;
    while (1)
    {
      unint64_t v7 = **v6;
      if ((*(void *)v4 & 0xFFFFFFFFFFFFLL) == (v7 & 0xFFFFFFFFFFFFLL)
        && ((*(void *)v4 & 0xFF000000000000) == 0) == (HIWORD(v7) & 1))
      {
        break;
      }
      uint64_t result = ((uint64_t (*)(uint64_t))v6[1])(result);
      if (!result) {
        break;
      }
      v4 += 2;
      if (v4 == v3) {
        goto LABEL_17;
      }
    }
    if (v4 != v3)
    {
      uint64_t v8 = v4 + 2;
      unint64_t v5 = v4;
      while (v8 != v3)
      {
        unint64_t v9 = **v6;
        if ((*(void *)v8 & 0xFFFFFFFFFFFFLL) != (v9 & 0xFFFFFFFFFFFFLL)
          || ((*(void *)v8 & 0xFF000000000000) == 0) != (HIWORD(v9) & 1))
        {
          uint64_t result = ((uint64_t (*)(uint64_t))v6[1])(result);
          if (result)
          {
            int v10 = *v8;
            *(int *)((char *)v5 + 3) = *(int *)((char *)v8 + 3);
            int *v5 = v10;
            v5 += 2;
          }
        }
        v8 += 2;
      }
    }
  }
LABEL_17:
  if (v5 != *(int **)(v2 + 8)) {
    *(void *)(v2 + 8) = v5;
  }
  return result;
}

uint64_t sub_3BE49C(int *a1, int *a2, uint64_t a3, uint64_t a4, long double a5)
{
  if (a1 != a2)
  {
    uint64_t v8 = a1;
    unint64_t v9 = (uint64_t *)(a4 + 24);
    do
    {
      int v17 = *(_DWORD **)(a4 + 40);
      if (v17 && (uint64_t v18 = *(int *)(a4 + 32), (int)v18 < *v17))
      {
        *(_DWORD *)(a4 + 32) = v18 + 1;
        uint64_t v11 = *(void *)&v17[2 * v18 + 2];
      }
      else
      {
        uint64_t v10 = sub_15C1918(*v9);
        uint64_t v11 = sub_188CDC8(a4 + 24, v10);
      }
      LODWORD(a5) = v8[1];
      long double v12 = exp((double)*(unint64_t *)&a5 * -6.28318531 / 4294967300.0 + 3.14159265);
      long double v13 = atan((v12 + -1.0 / v12) * 0.5);
      int v14 = *(_DWORD *)(v11 + 40);
      *(_DWORD *)(v11 + 40) = v14 | 1;
      int v15 = *v8;
      v8 += 3;
      LODWORD(v16) = v15;
      a5 = v13 * 57.2957795;
      *(_DWORD *)(v11 + 40) = v14 | 3;
      *(long double *)(v11 + 48) = a5;
      *(double *)(v11 + 56) = (double)v16 * 360.0 / 4294967300.0 + -180.0;
    }
    while (v8 != a2);
  }
  return a3;
}

uint64_t sub_3BE600(int *a1, int *a2, uint64_t a3, uint64_t a4, long double a5)
{
  if (a1 != a2)
  {
    uint64_t v8 = a1;
    unint64_t v9 = (uint64_t *)(a4 + 48);
    do
    {
      int v17 = *(_DWORD **)(a4 + 64);
      if (v17 && (uint64_t v18 = *(int *)(a4 + 56), (int)v18 < *v17))
      {
        *(_DWORD *)(a4 + 56) = v18 + 1;
        uint64_t v11 = *(void *)&v17[2 * v18 + 2];
      }
      else
      {
        uint64_t v10 = sub_15C1918(*v9);
        uint64_t v11 = sub_188CDC8(a4 + 48, v10);
      }
      LODWORD(a5) = v8[1];
      long double v12 = exp((double)*(unint64_t *)&a5 * -6.28318531 / 4294967300.0 + 3.14159265);
      long double v13 = atan((v12 + -1.0 / v12) * 0.5);
      int v14 = *(_DWORD *)(v11 + 40);
      *(_DWORD *)(v11 + 40) = v14 | 1;
      int v15 = *v8;
      v8 += 3;
      LODWORD(v16) = v15;
      a5 = v13 * 57.2957795;
      *(_DWORD *)(v11 + 40) = v14 | 3;
      *(long double *)(v11 + 48) = a5;
      *(double *)(v11 + 56) = (double)v16 * 360.0 / 4294967300.0 + -180.0;
    }
    while (v8 != a2);
  }
  return a3;
}

uint64_t sub_3BE764(int *a1, int *a2, uint64_t a3, uint64_t a4, long double a5)
{
  if (a1 != a2)
  {
    uint64_t v8 = a1;
    unint64_t v9 = (uint64_t *)(a4 + 72);
    do
    {
      int v17 = *(_DWORD **)(a4 + 88);
      if (v17 && (uint64_t v18 = *(int *)(a4 + 80), (int)v18 < *v17))
      {
        *(_DWORD *)(a4 + 80) = v18 + 1;
        uint64_t v11 = *(void *)&v17[2 * v18 + 2];
      }
      else
      {
        uint64_t v10 = sub_15C1918(*v9);
        uint64_t v11 = sub_188CDC8(a4 + 72, v10);
      }
      LODWORD(a5) = v8[1];
      long double v12 = exp((double)*(unint64_t *)&a5 * -6.28318531 / 4294967300.0 + 3.14159265);
      long double v13 = atan((v12 + -1.0 / v12) * 0.5);
      int v14 = *(_DWORD *)(v11 + 40);
      *(_DWORD *)(v11 + 40) = v14 | 1;
      int v15 = *v8;
      v8 += 3;
      LODWORD(v16) = v15;
      a5 = v13 * 57.2957795;
      *(_DWORD *)(v11 + 40) = v14 | 3;
      *(long double *)(v11 + 48) = a5;
      *(double *)(v11 + 56) = (double)v16 * 360.0 / 4294967300.0 + -180.0;
    }
    while (v8 != a2);
  }
  return a3;
}

unint64_t sub_3BE8C8(uint64_t a1, unsigned int *a2, char a3)
{
  sub_2954EC(a1, (((unint64_t)(a2[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)a2[1] << 32) | *a2) ^ 0x1000000000000, (uint64_t)v10);
  unint64_t v4 = __p;
  if (__p == v12)
  {
    unint64_t v6 = 0xFFFFFFFF00000000;
    uint64_t v7 = 0xFFFFFFFFLL;
    if (!__p) {
      return v6 | v7;
    }
    goto LABEL_8;
  }
  if (a3) {
    unint64_t v5 = sub_2E40A4((uint64_t)v10);
  }
  else {
    unint64_t v5 = sub_2E1AA4((uint64_t)v10);
  }
  unsigned int v8 = v5;
  unint64_t v6 = v5 & 0xFFFFFFFF00000000;
  unint64_t v4 = __p;
  uint64_t v7 = v8;
  if (__p)
  {
LABEL_8:
    long double v12 = v4;
    operator delete(v4);
  }
  return v6 | v7;
}

void sub_3BE97C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_3BE998()
{
  byte_2557907 = 1;
  word_25578F0 = 65;
  byte_255791F = 1;
  word_2557908 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25579B0 = 0u;
  *(_OWORD *)&qword_25579C0 = 0u;
  dword_25579D0 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25579B0, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25579B0, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25579B0, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25579B0, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_2557937 = 8;
  strcpy((char *)&qword_2557920, "any_mode");
  byte_255794F = 7;
  strcpy((char *)&dword_2557938, "cycling");
  byte_2557967 = 7;
  strcpy((char *)&dword_2557950, "driving");
  byte_255797F = 7;
  strcpy((char *)&dword_2557968, "walking");
  qword_2557988 = 0;
  qword_2557990 = 0;
  qword_2557980 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_2557980 = (uint64_t)v0;
  qword_2557988 = (uint64_t)(v0 + 9);
  qword_2557990 = (uint64_t)(v0 + 9);
  qword_2557998 = 0;
  qword_25579A0 = 0;
  unk_25579A8 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25579A0 = (uint64_t)(v1 + 9);
  unk_25579A8 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_2557998 = (uint64_t)v1;
  return result;
}

void sub_3BEC60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25579C0) {
    sub_20A7E38((void **)qword_25579C0);
  }
  uint64_t v37 = (void *)xmmword_25579B0;
  *(void *)&xmmword_25579B0 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

BOOL *sub_3BED00(BOOL *a1, uint64_t a2)
{
  char v13 = 14;
  uint64_t v11 = 0;
  strcpy((char *)v12, "RouteAnalytics");
  unint64_t v9 = 0;
  char v10 = 0;
  BOOL v3 = sub_374CDC(a2, (uint64_t)v12, (uint64_t *)&v9);
  char v15 = 7;
  strcpy((char *)__p, "enabled");
  BOOL v4 = sub_29D62C(v3, (uint64_t)__p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  *a1 = v4;
  int v5 = (void **)v9;
  if (v9)
  {
    unint64_t v6 = v10;
    char v7 = v9;
    if (v10 != v9)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      char v7 = v9;
    }
    char v10 = v5;
    operator delete(v7);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  return a1;
}

void sub_3BEE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    sub_1A668(&a10);
    if ((a18 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_1A668(&a10);
    if ((a18 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(a13);
  _Unwind_Resume(a1);
}

void sub_3BEE8C(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4, uint64_t *a5, uint64_t a6)
{
  bzero(v170, 0x320uLL);
  uint64_t v169 = 0;
  long long v167 = 0u;
  long long v168 = 0u;
  long long v165 = 0u;
  long long v166 = 0u;
  long long v163 = 0u;
  long long v164 = 0u;
  long long v161 = 0u;
  long long v162 = 0u;
  long long v159 = 0u;
  long long v160 = 0u;
  long long v157 = 0u;
  long long v158 = 0u;
  long long v155 = 0u;
  long long v156 = 0u;
  long long v153 = 0u;
  long long v154 = 0u;
  long long v151 = 0u;
  long long v152 = 0u;
  long long v149 = 0u;
  long long v150 = 0u;
  long long v147 = 0u;
  long long v148 = 0u;
  long long v145 = 0u;
  long long v146 = 0u;
  long long v143 = 0u;
  long long v144 = 0u;
  long long v142 = 0u;
  uint64_t v7 = *a2;
  uint64_t v124 = a2[1];
  if (*a2 != v124)
  {
    uint64_t v119 = (uint64_t *)(a6 + 88);
    while (1)
    {
      if (sub_45FE1C(v7) != 4)
      {
        int v8 = *(_DWORD **)(a6 + 104);
        if (v8 && (uint64_t v9 = *(int *)(a6 + 96), (int)v9 < *v8))
        {
          *(_DWORD *)(a6 + 96) = v9 + 1;
          uint64_t v10 = *(void *)&v8[2 * v9 + 2];
        }
        else
        {
          uint64_t v11 = sub_11BEC44(*v119);
          uint64_t v10 = sub_188CDC8((uint64_t)v119, v11);
        }
        int v12 = sub_45FE24(v7);
        *(_DWORD *)(v10 + 16) |= 1u;
        *(_DWORD *)(v10 + 48) = v12;
        uint64_t v13 = *a3;
        uint64_t v14 = a3[1];
        if (*a3 != v14)
        {
          while (1)
          {
            int v15 = sub_6478E0(v13);
            if (v15 == sub_45FE24(v7)) {
              break;
            }
            v13 += 7560;
            if (v13 == v14)
            {
              uint64_t v13 = v14;
              break;
            }
          }
          if (v13 != a3[1])
          {
            int v140 = sub_649094();
            unint64_t v16 = (uint64_t *)nullsub_1(v13);
            uint64_t v17 = sub_40EFE8(v7);
            uint64_t v141 = *v16;
            uint64_t v131 = v17;
            uint64_t v128 = sub_52058(v7);
            if (v17 != v128) {
              break;
            }
          }
        }
      }
LABEL_3:
      v7 += 120;
      if (v7 == v124) {
        return;
      }
    }
    uint64_t v125 = (uint64_t *)(v10 + 24);
    uint64_t v126 = v10;
    uint64_t v127 = v7;
LABEL_17:
    uint64_t v18 = *(_DWORD **)(v10 + 40);
    if (v18 && (uint64_t v19 = *(int *)(v10 + 32), (int)v19 < *v18))
    {
      *(_DWORD *)(v10 + 32) = v19 + 1;
      uint64_t v20 = *(void *)&v18[2 * v19 + 2];
    }
    else
    {
      uint64_t v21 = sub_11BEB94(*v125);
      uint64_t v20 = sub_188CDC8((uint64_t)v125, (uint64_t)v21);
    }
    uint64_t v22 = (_DWORD *)sub_374DF4(v131);
    if (*v22 == 0x7FFFFFFF || v22[9] == 0x7FFFFFFF) {
      goto LABEL_48;
    }
    uint64_t v24 = v22;
    if (!sub_40A45C(v22 + 2)) {
      goto LABEL_48;
    }
    int v25 = v24[28];
    if (v25 == -1) {
      goto LABEL_48;
    }
    if (v25 == 1)
    {
      if (*((void *)v24 + 13) > 0xFFFFFFFEFFFFFFFFLL || !*((void *)v24 + 13)) {
        goto LABEL_48;
      }
    }
    else
    {
      if (v25)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      if (*((void *)v24 + 13) == -1) {
        goto LABEL_48;
      }
    }
    *(_DWORD *)(v20 + 16) |= 1u;
    if (!*(void *)(v20 + 96))
    {
      uint64_t v26 = *(void *)(v20 + 8);
      uint64_t v27 = (void *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
      if (v26) {
        uint64_t v27 = (void *)*v27;
      }
      *(void *)(v20 + 96) = sub_11BEB1C((uint64_t)v27);
    }
    if (!*a5)
    {
      char v116 = __cxa_allocate_exception(0x40uLL);
      BYTE7(v171[1]) = 20;
      strcpy((char *)v171, "Bad optional access.");
      uint64_t v117 = (void *)sub_2F404((uint64_t)v116, v171);
    }
    if (sub_404D08(v131, *a5, a4)) {
      goto LABEL_48;
    }
    *(_DWORD *)(v20 + 16) |= 1u;
    uint64_t v28 = *(void **)(v20 + 96);
    if (!v28)
    {
      uint64_t v29 = *(void *)(v20 + 8);
      uint64_t v30 = (void *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
      if (v29) {
        uint64_t v30 = (void *)*v30;
      }
      uint64_t v28 = sub_11BEB1C((uint64_t)v30);
      *(void *)(v20 + 96) = v28;
      *((_DWORD *)v28 + 4) |= 1u;
      if (v28[3]) {
        goto LABEL_48;
      }
      goto LABEL_45;
    }
    *((_DWORD *)v28 + 4) |= 1u;
    if (!v28[3])
    {
LABEL_45:
      uint64_t v31 = v28[1];
      uint64_t v32 = (void *)(v31 & 0xFFFFFFFFFFFFFFFCLL);
      if (v31) {
        uint64_t v32 = (void *)*v32;
      }
      v28[3] = sub_11BEAA4((uint64_t)v32);
    }
LABEL_48:
    uint64_t v33 = *(void *)(v141 + 1064);
    sub_46B058();
    uint64_t v35 = v34;
    unint64_t v138 = v36;
    uint64_t v134 = v34;
    uint64_t v135 = 0;
    uint64_t v37 = 0;
    char v38 = 0;
    unint64_t v39 = (uint64_t *)(v20 + 72);
    uint64_t v129 = (uint64_t *)(v20 + 48);
    long long v130 = (uint64_t *)(v20 + 24);
    int v132 = -1;
    int v133 = -1;
    while (1)
    {
      sub_46B060();
      BOOL v44 = v42;
      unint64_t v45 = v43;
      if (v35)
      {
        unint64_t v46 = sub_46C760(v35);
        unint64_t v47 = v46;
        if (v44)
        {
          unint64_t v48 = sub_46C760(v44);
          if (v138 >= v47 || v45 >= v48)
          {
            BOOL v49 = v138 < v47;
            uint64_t v35 = v134;
            if (((v49 ^ (v45 < v48)) & 1) == 0) {
              goto LABEL_121;
            }
          }
          else
          {
            uint64_t v35 = v134;
            uint64_t v136 = sub_46C8EC(v134, v138);
            if (v136 == sub_46C8EC(v44, v45)) {
              goto LABEL_121;
            }
          }
        }
        else
        {
          uint64_t v35 = v134;
          if (v138 >= v46) {
            goto LABEL_121;
          }
        }
      }
      else if (!v42 || v43 >= sub_46C760(v42))
      {
LABEL_121:
        unsigned int v97 = *(_DWORD **)(v20 + 88);
        if (v97 && (uint64_t v98 = *(int *)(v20 + 80), (int)v98 < *v97))
        {
          *(_DWORD *)(v20 + 80) = v98 + 1;
          unsigned int v99 = *(_DWORD **)&v97[2 * v98 + 2];
        }
        else
        {
          uint64_t v100 = sub_11BE98C(*v39);
          unsigned int v99 = (_DWORD *)sub_188CDC8(v20 + 72, v100);
        }
        uint64_t v10 = v126;
        uint64_t v7 = v127;
        char v101 = (int *)(*(void *)(v141 + 1072) - 2400);
        int v102 = *v101;
        v99[4] |= 1u;
        v99[12] = v102;
        sub_3BF984(a1, (uint64_t)v101, (uint64_t)v99);
        if (!v140 && *(unsigned char *)(v33 + 328) == 5)
        {
          unsigned int v103 = *(_DWORD *)(v33 + 1860);
          if (v103 <= 3)
          {
            v99[4] |= 0x10u;
            v99[16] = v103 + 1;
          }
        }
        if (v38)
        {
          unsigned int v104 = (char *)v170;
          uint64_t v105 = v170[0];
          for (uint64_t i = 1; i != 100; ++i)
          {
            uint64_t v107 = v170[i];
            BOOL v108 = v105 < v107;
            if (v105 <= v107) {
              uint64_t v105 = v170[i];
            }
            if (v108) {
              unsigned int v104 = (char *)&v170[i];
            }
          }
          unint64_t v109 = (unint64_t)(v104 - (char *)v170) >> 3;
          int v110 = v99[4];
          v99[4] = v110 | 2;
          v99[13] = v109;
          unsigned int v111 = (char *)&v142;
          uint64_t v112 = v142;
          for (uint64_t j = 8; j != 440; j += 8)
          {
            uint64_t v114 = *(void *)((char *)&v142 + j);
            BOOL v115 = v112 < v114;
            if (v112 <= v114) {
              uint64_t v112 = *(void *)((char *)&v142 + j);
            }
            if (v115) {
              unsigned int v111 = (char *)&v142 + j;
            }
          }
          v99[4] = v110 | 6;
          v99[14] = (unint64_t)(v111 - (char *)&v142) >> 3;
          bzero(v170, 0x320uLL);
          uint64_t v169 = 0;
          long long v167 = 0u;
          long long v168 = 0u;
          long long v165 = 0u;
          long long v166 = 0u;
          long long v163 = 0u;
          long long v164 = 0u;
          long long v161 = 0u;
          long long v162 = 0u;
          long long v159 = 0u;
          long long v160 = 0u;
          long long v157 = 0u;
          long long v158 = 0u;
          long long v155 = 0u;
          long long v156 = 0u;
          long long v153 = 0u;
          long long v154 = 0u;
          long long v151 = 0u;
          long long v152 = 0u;
          long long v149 = 0u;
          long long v150 = 0u;
          long long v147 = 0u;
          long long v148 = 0u;
          long long v145 = 0u;
          long long v146 = 0u;
          long long v143 = 0u;
          long long v144 = 0u;
          long long v142 = 0u;
        }
        v141 += 12328;
        v131 += 1056;
        if (v131 == v128) {
          goto LABEL_3;
        }
        goto LABEL_17;
      }
      uint64_t v50 = (void *)sub_46C8EC(v35, v138);
      unint64_t v52 = (unsigned __int16 *)(*v50 - *(int *)*v50);
      if (*v52 >= 0x2Fu && (uint64_t v53 = v52[23]) != 0) {
        uint64_t v54 = *(unsigned __int8 *)(*v50 + v53);
      }
      else {
        uint64_t v54 = 32;
      }
      uint64_t v137 = v54;
      uint64_t v55 = sub_46CCC8(v35, v138, v51);
      uint64_t v56 = v33 + 2400;
      if (v33 + 2400 != *(void *)(v141 + 1072))
      {
        uint64_t v57 = v33;
        while (1)
        {
          uint64_t v33 = v56;
          if (*(void *)(v57 + 2440) != v37) {
            break;
          }
          uint64_t v58 = *(_DWORD **)(v20 + 88);
          if (v58 && (uint64_t v59 = *(int *)(v20 + 80), (int)v59 < *v58))
          {
            *(_DWORD *)(v20 + 80) = v59 + 1;
            int v60 = *(_DWORD **)&v58[2 * v59 + 2];
          }
          else
          {
            uint64_t v61 = sub_11BE98C(*v39);
            int v60 = (_DWORD *)sub_188CDC8(v20 + 72, v61);
          }
          int v62 = *(_DWORD *)v57;
          v60[4] |= 1u;
          v60[12] = v62;
          sub_3BF984(a1, v57, (uint64_t)v60);
          if (!v140 && *(unsigned char *)(v57 + 328) == 5)
          {
            unsigned int v63 = *(_DWORD *)(v57 + 1860);
            if (v63 <= 3)
            {
              v60[4] |= 0x10u;
              v60[16] = v63 + 1;
            }
          }
          if (v38)
          {
            float64x2_t v64 = (char *)v170;
            uint64_t v65 = v170[0];
            for (uint64_t k = 1; k != 100; ++k)
            {
              uint64_t v67 = v170[k];
              BOOL v68 = v65 < v67;
              if (v65 <= v67) {
                uint64_t v65 = v170[k];
              }
              if (v68) {
                float64x2_t v64 = (char *)&v170[k];
              }
            }
            unint64_t v69 = (unint64_t)(v64 - (char *)v170) >> 3;
            int v70 = v60[4];
            v60[4] = v70 | 2;
            v60[13] = v69;
            unint64_t v71 = (char *)&v142;
            uint64_t v72 = v142;
            for (uint64_t m = 8; m != 440; m += 8)
            {
              uint64_t v74 = *(void *)((char *)&v142 + m);
              BOOL v75 = v72 < v74;
              if (v72 <= v74) {
                uint64_t v72 = *(void *)((char *)&v142 + m);
              }
              if (v75) {
                unint64_t v71 = (char *)&v142 + m;
              }
            }
            v60[4] = v70 | 6;
            v60[14] = (unint64_t)(v71 - (char *)&v142) >> 3;
            bzero(v170, 0x320uLL);
            uint64_t v169 = 0;
            long long v167 = 0u;
            long long v168 = 0u;
            long long v165 = 0u;
            long long v166 = 0u;
            long long v163 = 0u;
            long long v164 = 0u;
            long long v161 = 0u;
            long long v162 = 0u;
            long long v159 = 0u;
            long long v160 = 0u;
            long long v157 = 0u;
            long long v158 = 0u;
            long long v155 = 0u;
            long long v156 = 0u;
            long long v153 = 0u;
            long long v154 = 0u;
            long long v151 = 0u;
            long long v152 = 0u;
            long long v149 = 0u;
            long long v150 = 0u;
            long long v147 = 0u;
            long long v148 = 0u;
            long long v145 = 0u;
            long long v146 = 0u;
            long long v143 = 0u;
            long long v144 = 0u;
            long long v142 = 0u;
          }
          char v38 = 0;
          uint64_t v56 = v33 + 2400;
          uint64_t v57 = v33;
          if (v33 + 2400 == *(void *)(v141 + 1072)) {
            goto LABEL_95;
          }
        }
        uint64_t v33 = v57;
      }
LABEL_95:
      uint64_t v35 = v134;
      uint64_t v76 = (void *)sub_46C8EC(v134, v138);
      long long v77 = (unsigned __int16 *)(*v76 - *(int *)*v76);
      if (*v77 < 0x43u)
      {
        uint64_t v80 = 0;
        uint64_t v79 = v135;
      }
      else
      {
        uint64_t v78 = v77[33];
        uint64_t v79 = v135;
        if (v78) {
          uint64_t v80 = *(unsigned __int8 *)(*v76 + v78);
        }
        else {
          uint64_t v80 = 0;
        }
      }
      v170[v80] += v55;
      uint64_t v81 = (void *)sub_46C8EC(v134, v138);
      unint64_t v82 = (unsigned __int16 *)(*v81 - *(int *)*v81);
      if (*v82 >= 0x43u && (uint64_t v83 = v82[33]) != 0)
      {
        if (*(unsigned __int8 *)(*v81 + v83) == v132) {
          goto LABEL_117;
        }
      }
      else if (!v132)
      {
        goto LABEL_117;
      }
      uint64_t v84 = *(_DWORD **)(v20 + 40);
      if (v84 && (uint64_t v85 = *(int *)(v20 + 32), (int)v85 < *v84))
      {
        *(_DWORD *)(v20 + 32) = v85 + 1;
        int v86 = *(_DWORD **)&v84[2 * v85 + 2];
      }
      else
      {
        uint64_t v87 = sub_11BEA2C(*v130);
        int v86 = (_DWORD *)sub_188CDC8((uint64_t)v130, (uint64_t)v87);
      }
      v86[4] |= 1u;
      v86[6] = v79;
      long long v88 = (void *)sub_46C8EC(v134, v138);
      uint64_t v89 = (unsigned __int16 *)(*v88 - *(int *)*v88);
      if (*v89 >= 0x43u && (uint64_t v90 = v89[33]) != 0) {
        int v91 = *(unsigned __int8 *)(*v88 + v90);
      }
      else {
        int v91 = 0;
      }
      v86[4] |= 2u;
      v86[7] = v91;
      unsigned int v92 = (void *)sub_46C8EC(v134, v138);
      unsigned int v93 = (unsigned __int16 *)(*v92 - *(int *)*v92);
      if (*v93 >= 0x43u && (uint64_t v94 = v93[33]) != 0) {
        int v132 = *(unsigned __int8 *)(*v92 + v94);
      }
      else {
        int v132 = 0;
      }
LABEL_117:
      *((void *)&v142 + v137) += v55;
      if (v133 != v137)
      {
        unsigned int v95 = *(_DWORD **)(v20 + 64);
        if (v95 && (uint64_t v96 = *(int *)(v20 + 56), (int)v96 < *v95))
        {
          *(_DWORD *)(v20 + 56) = v96 + 1;
          uint64_t v41 = *(_DWORD **)&v95[2 * v96 + 2];
        }
        else
        {
          unint64_t v40 = sub_11BEA2C(*v129);
          uint64_t v41 = (_DWORD *)sub_188CDC8((uint64_t)v129, (uint64_t)v40);
        }
        v41[4] |= 3u;
        v41[6] = v79;
        v41[7] = v137;
        int v133 = v137;
      }
      uint64_t v135 = v55 + v79;
      ++v37;
      ++v138;
      char v38 = 1;
    }
  }
}

void sub_3BF968(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3BF984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 2392))
  {
LABEL_2:
    uint64_t result = 1;
    goto LABEL_3;
  }
  uint64_t v18 = *(void *)(a2 + 1736);
  uint64_t v19 = *(void *)(a2 + 1744);
  if (v18 != v19)
  {
    while ((sub_638AE8(v18) & 1) == 0)
    {
      v18 += 408;
      if (v18 == v19) {
        goto LABEL_27;
      }
    }
    goto LABEL_2;
  }
LABEL_27:
  uint64_t v20 = *(void *)(a2 + 1712);
  uint64_t v21 = *(void *)(a2 + 1720);
  if (v20 == v21)
  {
    uint64_t result = 0;
  }
  else
  {
    do
    {
      uint64_t result = sub_638AE8(v20);
      if (result) {
        break;
      }
      v20 += 1080;
    }
    while (v20 != v21);
  }
LABEL_3:
  *(_DWORD *)(a3 + 16) |= 8u;
  *(unsigned char *)(a3 + 60) = result;
  unint64_t v6 = *(unsigned int **)(a2 + 1736);
  for (uint64_t i = *(unsigned int **)(a2 + 1744); v6 != i; v6 += 102)
  {
    uint64_t result = sub_638AE8((uint64_t)v6);
    if (result)
    {
      uint64_t result = sub_638AF0(v6);
      if (result)
      {
        uint64_t v10 = *(_DWORD **)(a3 + 40);
        if (v10 && (uint64_t v11 = *(int *)(a3 + 32), (int)v11 < *v10))
        {
          *(_DWORD *)(a3 + 32) = v11 + 1;
          uint64_t v9 = *(void *)&v10[2 * v11 + 2];
        }
        else
        {
          int v8 = sub_11BE910(*(void *)(a3 + 24));
          uint64_t v9 = sub_188CDC8(a3 + 24, (uint64_t)v8);
        }
        *(_DWORD *)(v9 + 16) |= 2u;
        *(unsigned char *)(v9 + 28) = 1;
        uint64_t result = sub_4F44(v6);
        *(_DWORD *)(v9 + 16) |= 1u;
        *(_DWORD *)(v9 + 24) = result;
      }
    }
  }
  int v12 = *(unsigned int **)(a2 + 1712);
  for (uint64_t j = *(unsigned int **)(a2 + 1720); v12 != j; v12 += 270)
  {
    uint64_t result = sub_638AE8((uint64_t)v12);
    if (result)
    {
      uint64_t result = sub_638AF0(v12);
      if (result)
      {
        unint64_t v16 = *(_DWORD **)(a3 + 40);
        if (v16 && (uint64_t v17 = *(int *)(a3 + 32), (int)v17 < *v16))
        {
          *(_DWORD *)(a3 + 32) = v17 + 1;
          uint64_t v15 = *(void *)&v16[2 * v17 + 2];
        }
        else
        {
          uint64_t v14 = sub_11BE910(*(void *)(a3 + 24));
          uint64_t v15 = sub_188CDC8(a3 + 24, (uint64_t)v14);
        }
        *(_DWORD *)(v15 + 16) |= 2u;
        *(unsigned char *)(v15 + 28) = 1;
        uint64_t result = sub_4F44(v12);
        *(_DWORD *)(v15 + 16) |= 1u;
        *(_DWORD *)(v15 + 24) = result;
      }
    }
  }
  return result;
}

BOOL *sub_3BFB90(BOOL *a1, uint64_t a2)
{
  char v13 = 14;
  uint64_t v11 = 0;
  strcpy((char *)v12, "RouteAnalytics");
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  BOOL v3 = sub_374CDC(a2, (uint64_t)v12, (uint64_t *)&v9);
  char v15 = 7;
  strcpy((char *)__p, "enabled");
  BOOL v4 = sub_29D62C(v3, (uint64_t)__p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  *a1 = v4;
  int v5 = (void **)v9;
  if (v9)
  {
    unint64_t v6 = v10;
    uint64_t v7 = v9;
    if (v10 != v9)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      uint64_t v7 = v9;
    }
    uint64_t v10 = v5;
    operator delete(v7);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  return a1;
}

void sub_3BFCB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    sub_1A668(&a10);
    if ((a18 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_1A668(&a10);
    if ((a18 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(a13);
  _Unwind_Resume(a1);
}

void sub_3BFD1C(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4, uint64_t *a5, uint64_t a6)
{
  bzero(v170, 0x320uLL);
  uint64_t v169 = 0;
  long long v167 = 0u;
  long long v168 = 0u;
  long long v165 = 0u;
  long long v166 = 0u;
  long long v163 = 0u;
  long long v164 = 0u;
  long long v161 = 0u;
  long long v162 = 0u;
  long long v159 = 0u;
  long long v160 = 0u;
  long long v157 = 0u;
  long long v158 = 0u;
  long long v155 = 0u;
  long long v156 = 0u;
  long long v153 = 0u;
  long long v154 = 0u;
  long long v151 = 0u;
  long long v152 = 0u;
  long long v149 = 0u;
  long long v150 = 0u;
  long long v147 = 0u;
  long long v148 = 0u;
  long long v145 = 0u;
  long long v146 = 0u;
  long long v143 = 0u;
  long long v144 = 0u;
  long long v142 = 0u;
  uint64_t v7 = *a2;
  uint64_t v124 = a2[1];
  if (*a2 != v124)
  {
    uint64_t v119 = (uint64_t *)(a6 + 88);
    while (1)
    {
      if (sub_45FE1C(v7) != 4)
      {
        int v8 = *(_DWORD **)(a6 + 104);
        if (v8 && (uint64_t v9 = *(int *)(a6 + 96), (int)v9 < *v8))
        {
          *(_DWORD *)(a6 + 96) = v9 + 1;
          uint64_t v10 = *(void *)&v8[2 * v9 + 2];
        }
        else
        {
          uint64_t v11 = sub_11BEC44(*v119);
          uint64_t v10 = sub_188CDC8((uint64_t)v119, v11);
        }
        int v12 = sub_45FE24(v7);
        *(_DWORD *)(v10 + 16) |= 1u;
        *(_DWORD *)(v10 + 48) = v12;
        uint64_t v13 = *a3;
        uint64_t v14 = a3[1];
        if (*a3 != v14)
        {
          while (1)
          {
            int v15 = sub_6478E0(v13);
            if (v15 == sub_45FE24(v7)) {
              break;
            }
            v13 += 7560;
            if (v13 == v14)
            {
              uint64_t v13 = v14;
              break;
            }
          }
          if (v13 != a3[1])
          {
            int v140 = sub_35E640();
            unint64_t v16 = (uint64_t *)nullsub_1(v13);
            uint64_t v17 = sub_40EFE8(v7);
            uint64_t v141 = *v16;
            uint64_t v131 = v17;
            uint64_t v128 = sub_52058(v7);
            if (v17 != v128) {
              break;
            }
          }
        }
      }
LABEL_3:
      v7 += 120;
      if (v7 == v124) {
        return;
      }
    }
    uint64_t v125 = (uint64_t *)(v10 + 24);
    uint64_t v126 = v10;
    uint64_t v127 = v7;
LABEL_17:
    uint64_t v18 = *(_DWORD **)(v10 + 40);
    if (v18 && (uint64_t v19 = *(int *)(v10 + 32), (int)v19 < *v18))
    {
      *(_DWORD *)(v10 + 32) = v19 + 1;
      uint64_t v20 = *(void *)&v18[2 * v19 + 2];
    }
    else
    {
      uint64_t v21 = sub_11BEB94(*v125);
      uint64_t v20 = sub_188CDC8((uint64_t)v125, (uint64_t)v21);
    }
    uint64_t v22 = (_DWORD *)sub_374DF4(v131);
    if (*v22 == 0x7FFFFFFF || v22[9] == 0x7FFFFFFF) {
      goto LABEL_48;
    }
    uint64_t v24 = v22;
    if (!sub_40A45C(v22 + 2)) {
      goto LABEL_48;
    }
    int v25 = v24[28];
    if (v25 == -1) {
      goto LABEL_48;
    }
    if (v25 == 1)
    {
      if (*((void *)v24 + 13) > 0xFFFFFFFEFFFFFFFFLL || !*((void *)v24 + 13)) {
        goto LABEL_48;
      }
    }
    else
    {
      if (v25)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      if (*((void *)v24 + 13) == -1) {
        goto LABEL_48;
      }
    }
    *(_DWORD *)(v20 + 16) |= 1u;
    if (!*(void *)(v20 + 96))
    {
      uint64_t v26 = *(void *)(v20 + 8);
      uint64_t v27 = (void *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
      if (v26) {
        uint64_t v27 = (void *)*v27;
      }
      *(void *)(v20 + 96) = sub_11BEB1C((uint64_t)v27);
    }
    if (!*a5)
    {
      char v116 = __cxa_allocate_exception(0x40uLL);
      BYTE7(v171[1]) = 20;
      strcpy((char *)v171, "Bad optional access.");
      uint64_t v117 = (void *)sub_2F404((uint64_t)v116, v171);
    }
    if (sub_404B48(v131, *a5, a4)) {
      goto LABEL_48;
    }
    *(_DWORD *)(v20 + 16) |= 1u;
    uint64_t v28 = *(void **)(v20 + 96);
    if (!v28)
    {
      uint64_t v29 = *(void *)(v20 + 8);
      uint64_t v30 = (void *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
      if (v29) {
        uint64_t v30 = (void *)*v30;
      }
      uint64_t v28 = sub_11BEB1C((uint64_t)v30);
      *(void *)(v20 + 96) = v28;
      *((_DWORD *)v28 + 4) |= 1u;
      if (v28[3]) {
        goto LABEL_48;
      }
      goto LABEL_45;
    }
    *((_DWORD *)v28 + 4) |= 1u;
    if (!v28[3])
    {
LABEL_45:
      uint64_t v31 = v28[1];
      uint64_t v32 = (void *)(v31 & 0xFFFFFFFFFFFFFFFCLL);
      if (v31) {
        uint64_t v32 = (void *)*v32;
      }
      v28[3] = sub_11BEAA4((uint64_t)v32);
    }
LABEL_48:
    uint64_t v33 = *(void *)(v141 + 1064);
    sub_46B058();
    uint64_t v35 = v34;
    unint64_t v138 = v36;
    uint64_t v134 = v34;
    uint64_t v135 = 0;
    uint64_t v37 = 0;
    char v38 = 0;
    unint64_t v39 = (uint64_t *)(v20 + 72);
    uint64_t v129 = (uint64_t *)(v20 + 48);
    long long v130 = (uint64_t *)(v20 + 24);
    int v132 = -1;
    int v133 = -1;
    while (1)
    {
      sub_46B060();
      BOOL v44 = v42;
      unint64_t v45 = v43;
      if (v35)
      {
        unint64_t v46 = sub_46C760(v35);
        unint64_t v47 = v46;
        if (v44)
        {
          unint64_t v48 = sub_46C760(v44);
          if (v138 >= v47 || v45 >= v48)
          {
            BOOL v49 = v138 < v47;
            uint64_t v35 = v134;
            if (((v49 ^ (v45 < v48)) & 1) == 0) {
              goto LABEL_121;
            }
          }
          else
          {
            uint64_t v35 = v134;
            uint64_t v136 = sub_46C8EC(v134, v138);
            if (v136 == sub_46C8EC(v44, v45)) {
              goto LABEL_121;
            }
          }
        }
        else
        {
          uint64_t v35 = v134;
          if (v138 >= v46) {
            goto LABEL_121;
          }
        }
      }
      else if (!v42 || v43 >= sub_46C760(v42))
      {
LABEL_121:
        unsigned int v97 = *(_DWORD **)(v20 + 88);
        if (v97 && (uint64_t v98 = *(int *)(v20 + 80), (int)v98 < *v97))
        {
          *(_DWORD *)(v20 + 80) = v98 + 1;
          unsigned int v99 = *(_DWORD **)&v97[2 * v98 + 2];
        }
        else
        {
          uint64_t v100 = sub_11BE98C(*v39);
          unsigned int v99 = (_DWORD *)sub_188CDC8(v20 + 72, v100);
        }
        uint64_t v10 = v126;
        uint64_t v7 = v127;
        char v101 = (int *)(*(void *)(v141 + 1072) - 2400);
        int v102 = *v101;
        v99[4] |= 1u;
        v99[12] = v102;
        sub_3BF984(a1, (uint64_t)v101, (uint64_t)v99);
        if (!v140 && *(unsigned char *)(v33 + 328) == 5)
        {
          unsigned int v103 = *(_DWORD *)(v33 + 1860);
          if (v103 <= 3)
          {
            v99[4] |= 0x10u;
            v99[16] = v103 + 1;
          }
        }
        if (v38)
        {
          unsigned int v104 = (char *)v170;
          uint64_t v105 = v170[0];
          for (uint64_t i = 1; i != 100; ++i)
          {
            uint64_t v107 = v170[i];
            BOOL v108 = v105 < v107;
            if (v105 <= v107) {
              uint64_t v105 = v170[i];
            }
            if (v108) {
              unsigned int v104 = (char *)&v170[i];
            }
          }
          unint64_t v109 = (unint64_t)(v104 - (char *)v170) >> 3;
          int v110 = v99[4];
          v99[4] = v110 | 2;
          v99[13] = v109;
          unsigned int v111 = (char *)&v142;
          uint64_t v112 = v142;
          for (uint64_t j = 8; j != 440; j += 8)
          {
            uint64_t v114 = *(void *)((char *)&v142 + j);
            BOOL v115 = v112 < v114;
            if (v112 <= v114) {
              uint64_t v112 = *(void *)((char *)&v142 + j);
            }
            if (v115) {
              unsigned int v111 = (char *)&v142 + j;
            }
          }
          v99[4] = v110 | 6;
          v99[14] = (unint64_t)(v111 - (char *)&v142) >> 3;
          bzero(v170, 0x320uLL);
          uint64_t v169 = 0;
          long long v167 = 0u;
          long long v168 = 0u;
          long long v165 = 0u;
          long long v166 = 0u;
          long long v163 = 0u;
          long long v164 = 0u;
          long long v161 = 0u;
          long long v162 = 0u;
          long long v159 = 0u;
          long long v160 = 0u;
          long long v157 = 0u;
          long long v158 = 0u;
          long long v155 = 0u;
          long long v156 = 0u;
          long long v153 = 0u;
          long long v154 = 0u;
          long long v151 = 0u;
          long long v152 = 0u;
          long long v149 = 0u;
          long long v150 = 0u;
          long long v147 = 0u;
          long long v148 = 0u;
          long long v145 = 0u;
          long long v146 = 0u;
          long long v143 = 0u;
          long long v144 = 0u;
          long long v142 = 0u;
        }
        v141 += 12328;
        v131 += 1056;
        if (v131 == v128) {
          goto LABEL_3;
        }
        goto LABEL_17;
      }
      uint64_t v50 = (void *)sub_46C8EC(v35, v138);
      unint64_t v52 = (unsigned __int16 *)(*v50 - *(int *)*v50);
      if (*v52 >= 0x2Fu && (uint64_t v53 = v52[23]) != 0) {
        uint64_t v54 = *(unsigned __int8 *)(*v50 + v53);
      }
      else {
        uint64_t v54 = 32;
      }
      uint64_t v137 = v54;
      uint64_t v55 = sub_46CCC8(v35, v138, v51);
      uint64_t v56 = v33 + 2400;
      if (v33 + 2400 != *(void *)(v141 + 1072))
      {
        uint64_t v57 = v33;
        while (1)
        {
          uint64_t v33 = v56;
          if (*(void *)(v57 + 2440) != v37) {
            break;
          }
          uint64_t v58 = *(_DWORD **)(v20 + 88);
          if (v58 && (uint64_t v59 = *(int *)(v20 + 80), (int)v59 < *v58))
          {
            *(_DWORD *)(v20 + 80) = v59 + 1;
            int v60 = *(_DWORD **)&v58[2 * v59 + 2];
          }
          else
          {
            uint64_t v61 = sub_11BE98C(*v39);
            int v60 = (_DWORD *)sub_188CDC8(v20 + 72, v61);
          }
          int v62 = *(_DWORD *)v57;
          v60[4] |= 1u;
          v60[12] = v62;
          sub_3BF984(a1, v57, (uint64_t)v60);
          if (!v140 && *(unsigned char *)(v57 + 328) == 5)
          {
            unsigned int v63 = *(_DWORD *)(v57 + 1860);
            if (v63 <= 3)
            {
              v60[4] |= 0x10u;
              v60[16] = v63 + 1;
            }
          }
          if (v38)
          {
            float64x2_t v64 = (char *)v170;
            uint64_t v65 = v170[0];
            for (uint64_t k = 1; k != 100; ++k)
            {
              uint64_t v67 = v170[k];
              BOOL v68 = v65 < v67;
              if (v65 <= v67) {
                uint64_t v65 = v170[k];
              }
              if (v68) {
                float64x2_t v64 = (char *)&v170[k];
              }
            }
            unint64_t v69 = (unint64_t)(v64 - (char *)v170) >> 3;
            int v70 = v60[4];
            v60[4] = v70 | 2;
            v60[13] = v69;
            unint64_t v71 = (char *)&v142;
            uint64_t v72 = v142;
            for (uint64_t m = 8; m != 440; m += 8)
            {
              uint64_t v74 = *(void *)((char *)&v142 + m);
              BOOL v75 = v72 < v74;
              if (v72 <= v74) {
                uint64_t v72 = *(void *)((char *)&v142 + m);
              }
              if (v75) {
                unint64_t v71 = (char *)&v142 + m;
              }
            }
            v60[4] = v70 | 6;
            v60[14] = (unint64_t)(v71 - (char *)&v142) >> 3;
            bzero(v170, 0x320uLL);
            uint64_t v169 = 0;
            long long v167 = 0u;
            long long v168 = 0u;
            long long v165 = 0u;
            long long v166 = 0u;
            long long v163 = 0u;
            long long v164 = 0u;
            long long v161 = 0u;
            long long v162 = 0u;
            long long v159 = 0u;
            long long v160 = 0u;
            long long v157 = 0u;
            long long v158 = 0u;
            long long v155 = 0u;
            long long v156 = 0u;
            long long v153 = 0u;
            long long v154 = 0u;
            long long v151 = 0u;
            long long v152 = 0u;
            long long v149 = 0u;
            long long v150 = 0u;
            long long v147 = 0u;
            long long v148 = 0u;
            long long v145 = 0u;
            long long v146 = 0u;
            long long v143 = 0u;
            long long v144 = 0u;
            long long v142 = 0u;
          }
          char v38 = 0;
          uint64_t v56 = v33 + 2400;
          uint64_t v57 = v33;
          if (v33 + 2400 == *(void *)(v141 + 1072)) {
            goto LABEL_95;
          }
        }
        uint64_t v33 = v57;
      }
LABEL_95:
      uint64_t v35 = v134;
      uint64_t v76 = (void *)sub_46C8EC(v134, v138);
      long long v77 = (unsigned __int16 *)(*v76 - *(int *)*v76);
      if (*v77 < 0x43u)
      {
        uint64_t v80 = 0;
        uint64_t v79 = v135;
      }
      else
      {
        uint64_t v78 = v77[33];
        uint64_t v79 = v135;
        if (v78) {
          uint64_t v80 = *(unsigned __int8 *)(*v76 + v78);
        }
        else {
          uint64_t v80 = 0;
        }
      }
      v170[v80] += v55;
      uint64_t v81 = (void *)sub_46C8EC(v134, v138);
      unint64_t v82 = (unsigned __int16 *)(*v81 - *(int *)*v81);
      if (*v82 >= 0x43u && (uint64_t v83 = v82[33]) != 0)
      {
        if (*(unsigned __int8 *)(*v81 + v83) == v132) {
          goto LABEL_117;
        }
      }
      else if (!v132)
      {
        goto LABEL_117;
      }
      uint64_t v84 = *(_DWORD **)(v20 + 40);
      if (v84 && (uint64_t v85 = *(int *)(v20 + 32), (int)v85 < *v84))
      {
        *(_DWORD *)(v20 + 32) = v85 + 1;
        int v86 = *(_DWORD **)&v84[2 * v85 + 2];
      }
      else
      {
        uint64_t v87 = sub_11BEA2C(*v130);
        int v86 = (_DWORD *)sub_188CDC8((uint64_t)v130, (uint64_t)v87);
      }
      v86[4] |= 1u;
      v86[6] = v79;
      long long v88 = (void *)sub_46C8EC(v134, v138);
      uint64_t v89 = (unsigned __int16 *)(*v88 - *(int *)*v88);
      if (*v89 >= 0x43u && (uint64_t v90 = v89[33]) != 0) {
        int v91 = *(unsigned __int8 *)(*v88 + v90);
      }
      else {
        int v91 = 0;
      }
      v86[4] |= 2u;
      v86[7] = v91;
      unsigned int v92 = (void *)sub_46C8EC(v134, v138);
      unsigned int v93 = (unsigned __int16 *)(*v92 - *(int *)*v92);
      if (*v93 >= 0x43u && (uint64_t v94 = v93[33]) != 0) {
        int v132 = *(unsigned __int8 *)(*v92 + v94);
      }
      else {
        int v132 = 0;
      }
LABEL_117:
      *((void *)&v142 + v137) += v55;
      if (v133 != v137)
      {
        unsigned int v95 = *(_DWORD **)(v20 + 64);
        if (v95 && (uint64_t v96 = *(int *)(v20 + 56), (int)v96 < *v95))
        {
          *(_DWORD *)(v20 + 56) = v96 + 1;
          uint64_t v41 = *(_DWORD **)&v95[2 * v96 + 2];
        }
        else
        {
          unint64_t v40 = sub_11BEA2C(*v129);
          uint64_t v41 = (_DWORD *)sub_188CDC8((uint64_t)v129, (uint64_t)v40);
        }
        v41[4] |= 3u;
        v41[6] = v79;
        v41[7] = v137;
        int v133 = v137;
      }
      uint64_t v135 = v55 + v79;
      ++v37;
      ++v138;
      char v38 = 1;
    }
  }
}

void sub_3C07F8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(exception_object);
}

BOOL *sub_3C0814(BOOL *a1, uint64_t a2)
{
  char v13 = 14;
  uint64_t v11 = 0;
  strcpy((char *)v12, "RouteAnalytics");
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  BOOL v3 = sub_374CDC(a2, (uint64_t)v12, (uint64_t *)&v9);
  char v15 = 7;
  strcpy((char *)__p, "enabled");
  BOOL v4 = sub_29D62C(v3, (uint64_t)__p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  *a1 = v4;
  int v5 = (void **)v9;
  if (v9)
  {
    unint64_t v6 = v10;
    uint64_t v7 = v9;
    if (v10 != v9)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      uint64_t v7 = v9;
    }
    uint64_t v10 = v5;
    operator delete(v7);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  return a1;
}

void sub_3C0938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    sub_1A668(&a10);
    if ((a18 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_1A668(&a10);
    if ((a18 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(a13);
  _Unwind_Resume(a1);
}

void sub_3C09A0(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4, uint64_t *a5, uint64_t a6)
{
  bzero(v170, 0x320uLL);
  uint64_t v169 = 0;
  long long v167 = 0u;
  long long v168 = 0u;
  long long v165 = 0u;
  long long v166 = 0u;
  long long v163 = 0u;
  long long v164 = 0u;
  long long v161 = 0u;
  long long v162 = 0u;
  long long v159 = 0u;
  long long v160 = 0u;
  long long v157 = 0u;
  long long v158 = 0u;
  long long v155 = 0u;
  long long v156 = 0u;
  long long v153 = 0u;
  long long v154 = 0u;
  long long v151 = 0u;
  long long v152 = 0u;
  long long v149 = 0u;
  long long v150 = 0u;
  long long v147 = 0u;
  long long v148 = 0u;
  long long v145 = 0u;
  long long v146 = 0u;
  long long v143 = 0u;
  long long v144 = 0u;
  long long v142 = 0u;
  uint64_t v7 = *a2;
  uint64_t v124 = a2[1];
  if (*a2 != v124)
  {
    uint64_t v119 = (uint64_t *)(a6 + 88);
    while (1)
    {
      if (sub_45FE1C(v7) != 4)
      {
        int v8 = *(_DWORD **)(a6 + 104);
        if (v8 && (uint64_t v9 = *(int *)(a6 + 96), (int)v9 < *v8))
        {
          *(_DWORD *)(a6 + 96) = v9 + 1;
          uint64_t v10 = *(void *)&v8[2 * v9 + 2];
        }
        else
        {
          uint64_t v11 = sub_11BEC44(*v119);
          uint64_t v10 = sub_188CDC8((uint64_t)v119, v11);
        }
        int v12 = sub_45FE24(v7);
        *(_DWORD *)(v10 + 16) |= 1u;
        *(_DWORD *)(v10 + 48) = v12;
        uint64_t v13 = *a3;
        uint64_t v14 = a3[1];
        if (*a3 != v14)
        {
          while (1)
          {
            int v15 = sub_6478E0(v13);
            if (v15 == sub_45FE24(v7)) {
              break;
            }
            v13 += 7560;
            if (v13 == v14)
            {
              uint64_t v13 = v14;
              break;
            }
          }
          if (v13 != a3[1])
          {
            int v140 = sub_64A728();
            unint64_t v16 = (uint64_t *)nullsub_1(v13);
            uint64_t v17 = sub_40EFE8(v7);
            uint64_t v141 = *v16;
            uint64_t v131 = v17;
            uint64_t v128 = sub_52058(v7);
            if (v17 != v128) {
              break;
            }
          }
        }
      }
LABEL_3:
      v7 += 120;
      if (v7 == v124) {
        return;
      }
    }
    uint64_t v125 = (uint64_t *)(v10 + 24);
    uint64_t v126 = v10;
    uint64_t v127 = v7;
LABEL_17:
    uint64_t v18 = *(_DWORD **)(v10 + 40);
    if (v18 && (uint64_t v19 = *(int *)(v10 + 32), (int)v19 < *v18))
    {
      *(_DWORD *)(v10 + 32) = v19 + 1;
      uint64_t v20 = *(void *)&v18[2 * v19 + 2];
    }
    else
    {
      uint64_t v21 = sub_11BEB94(*v125);
      uint64_t v20 = sub_188CDC8((uint64_t)v125, (uint64_t)v21);
    }
    uint64_t v22 = (_DWORD *)sub_374DF4(v131);
    if (*v22 == 0x7FFFFFFF || v22[9] == 0x7FFFFFFF) {
      goto LABEL_48;
    }
    uint64_t v24 = v22;
    if (!sub_40A45C(v22 + 2)) {
      goto LABEL_48;
    }
    int v25 = v24[28];
    if (v25 == -1) {
      goto LABEL_48;
    }
    if (v25 == 1)
    {
      if (*((void *)v24 + 13) > 0xFFFFFFFEFFFFFFFFLL || !*((void *)v24 + 13)) {
        goto LABEL_48;
      }
    }
    else
    {
      if (v25)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      if (*((void *)v24 + 13) == -1) {
        goto LABEL_48;
      }
    }
    *(_DWORD *)(v20 + 16) |= 1u;
    if (!*(void *)(v20 + 96))
    {
      uint64_t v26 = *(void *)(v20 + 8);
      uint64_t v27 = (void *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
      if (v26) {
        uint64_t v27 = (void *)*v27;
      }
      *(void *)(v20 + 96) = sub_11BEB1C((uint64_t)v27);
    }
    if (!*a5)
    {
      char v116 = __cxa_allocate_exception(0x40uLL);
      BYTE7(v171[1]) = 20;
      strcpy((char *)v171, "Bad optional access.");
      uint64_t v117 = (void *)sub_2F404((uint64_t)v116, v171);
    }
    if (sub_404C28(v131, *a5, a4)) {
      goto LABEL_48;
    }
    *(_DWORD *)(v20 + 16) |= 1u;
    uint64_t v28 = *(void **)(v20 + 96);
    if (!v28)
    {
      uint64_t v29 = *(void *)(v20 + 8);
      uint64_t v30 = (void *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
      if (v29) {
        uint64_t v30 = (void *)*v30;
      }
      uint64_t v28 = sub_11BEB1C((uint64_t)v30);
      *(void *)(v20 + 96) = v28;
      *((_DWORD *)v28 + 4) |= 1u;
      if (v28[3]) {
        goto LABEL_48;
      }
      goto LABEL_45;
    }
    *((_DWORD *)v28 + 4) |= 1u;
    if (!v28[3])
    {
LABEL_45:
      uint64_t v31 = v28[1];
      uint64_t v32 = (void *)(v31 & 0xFFFFFFFFFFFFFFFCLL);
      if (v31) {
        uint64_t v32 = (void *)*v32;
      }
      v28[3] = sub_11BEAA4((uint64_t)v32);
    }
LABEL_48:
    uint64_t v33 = *(void *)(v141 + 1064);
    sub_46B058();
    uint64_t v35 = v34;
    unint64_t v138 = v36;
    uint64_t v134 = v34;
    uint64_t v135 = 0;
    uint64_t v37 = 0;
    char v38 = 0;
    unint64_t v39 = (uint64_t *)(v20 + 72);
    uint64_t v129 = (uint64_t *)(v20 + 48);
    long long v130 = (uint64_t *)(v20 + 24);
    int v132 = -1;
    int v133 = -1;
    while (1)
    {
      sub_46FF18();
      BOOL v44 = v42;
      unint64_t v45 = v43;
      if (v35)
      {
        unint64_t v46 = sub_470ADC(v35);
        unint64_t v47 = v46;
        if (v44)
        {
          unint64_t v48 = sub_470ADC(v44);
          if (v138 >= v47 || v45 >= v48)
          {
            BOOL v49 = v138 < v47;
            uint64_t v35 = v134;
            if (((v49 ^ (v45 < v48)) & 1) == 0) {
              goto LABEL_121;
            }
          }
          else
          {
            uint64_t v35 = v134;
            uint64_t v136 = sub_470B40(v134, v138);
            if (v136 == sub_470B40(v44, v45)) {
              goto LABEL_121;
            }
          }
        }
        else
        {
          uint64_t v35 = v134;
          if (v138 >= v46) {
            goto LABEL_121;
          }
        }
      }
      else if (!v42 || v43 >= sub_470ADC(v42))
      {
LABEL_121:
        unsigned int v97 = *(_DWORD **)(v20 + 88);
        if (v97 && (uint64_t v98 = *(int *)(v20 + 80), (int)v98 < *v97))
        {
          *(_DWORD *)(v20 + 80) = v98 + 1;
          unsigned int v99 = *(_DWORD **)&v97[2 * v98 + 2];
        }
        else
        {
          uint64_t v100 = sub_11BE98C(*v39);
          unsigned int v99 = (_DWORD *)sub_188CDC8(v20 + 72, v100);
        }
        uint64_t v10 = v126;
        uint64_t v7 = v127;
        char v101 = (int *)(*(void *)(v141 + 1072) - 2400);
        int v102 = *v101;
        v99[4] |= 1u;
        v99[12] = v102;
        sub_3BF984(a1, (uint64_t)v101, (uint64_t)v99);
        if (!v140 && *(unsigned char *)(v33 + 328) == 5)
        {
          unsigned int v103 = *(_DWORD *)(v33 + 1860);
          if (v103 <= 3)
          {
            v99[4] |= 0x10u;
            v99[16] = v103 + 1;
          }
        }
        if (v38)
        {
          unsigned int v104 = (char *)v170;
          uint64_t v105 = v170[0];
          for (uint64_t i = 1; i != 100; ++i)
          {
            uint64_t v107 = v170[i];
            BOOL v108 = v105 < v107;
            if (v105 <= v107) {
              uint64_t v105 = v170[i];
            }
            if (v108) {
              unsigned int v104 = (char *)&v170[i];
            }
          }
          unint64_t v109 = (unint64_t)(v104 - (char *)v170) >> 3;
          int v110 = v99[4];
          v99[4] = v110 | 2;
          v99[13] = v109;
          unsigned int v111 = (char *)&v142;
          uint64_t v112 = v142;
          for (uint64_t j = 8; j != 440; j += 8)
          {
            uint64_t v114 = *(void *)((char *)&v142 + j);
            BOOL v115 = v112 < v114;
            if (v112 <= v114) {
              uint64_t v112 = *(void *)((char *)&v142 + j);
            }
            if (v115) {
              unsigned int v111 = (char *)&v142 + j;
            }
          }
          v99[4] = v110 | 6;
          v99[14] = (unint64_t)(v111 - (char *)&v142) >> 3;
          bzero(v170, 0x320uLL);
          uint64_t v169 = 0;
          long long v167 = 0u;
          long long v168 = 0u;
          long long v165 = 0u;
          long long v166 = 0u;
          long long v163 = 0u;
          long long v164 = 0u;
          long long v161 = 0u;
          long long v162 = 0u;
          long long v159 = 0u;
          long long v160 = 0u;
          long long v157 = 0u;
          long long v158 = 0u;
          long long v155 = 0u;
          long long v156 = 0u;
          long long v153 = 0u;
          long long v154 = 0u;
          long long v151 = 0u;
          long long v152 = 0u;
          long long v149 = 0u;
          long long v150 = 0u;
          long long v147 = 0u;
          long long v148 = 0u;
          long long v145 = 0u;
          long long v146 = 0u;
          long long v143 = 0u;
          long long v144 = 0u;
          long long v142 = 0u;
        }
        v141 += 12328;
        v131 += 1056;
        if (v131 == v128) {
          goto LABEL_3;
        }
        goto LABEL_17;
      }
      uint64_t v50 = *(int **)(sub_470B40(v35, v138) + 8);
      unint64_t v52 = (unsigned __int16 *)((char *)v50 - *v50);
      if (*v52 >= 0x2Fu && (uint64_t v53 = v52[23]) != 0) {
        uint64_t v54 = *((unsigned __int8 *)v50 + v53);
      }
      else {
        uint64_t v54 = 32;
      }
      uint64_t v137 = v54;
      uint64_t v55 = sub_470F2C(v35, v138, v51);
      uint64_t v56 = v33 + 2400;
      if (v33 + 2400 != *(void *)(v141 + 1072))
      {
        uint64_t v57 = v33;
        while (1)
        {
          uint64_t v33 = v56;
          if (*(void *)(v57 + 2440) != v37) {
            break;
          }
          uint64_t v58 = *(_DWORD **)(v20 + 88);
          if (v58 && (uint64_t v59 = *(int *)(v20 + 80), (int)v59 < *v58))
          {
            *(_DWORD *)(v20 + 80) = v59 + 1;
            int v60 = *(_DWORD **)&v58[2 * v59 + 2];
          }
          else
          {
            uint64_t v61 = sub_11BE98C(*v39);
            int v60 = (_DWORD *)sub_188CDC8(v20 + 72, v61);
          }
          int v62 = *(_DWORD *)v57;
          v60[4] |= 1u;
          v60[12] = v62;
          sub_3BF984(a1, v57, (uint64_t)v60);
          if (!v140 && *(unsigned char *)(v57 + 328) == 5)
          {
            unsigned int v63 = *(_DWORD *)(v57 + 1860);
            if (v63 <= 3)
            {
              v60[4] |= 0x10u;
              v60[16] = v63 + 1;
            }
          }
          if (v38)
          {
            float64x2_t v64 = (char *)v170;
            uint64_t v65 = v170[0];
            for (uint64_t k = 1; k != 100; ++k)
            {
              uint64_t v67 = v170[k];
              BOOL v68 = v65 < v67;
              if (v65 <= v67) {
                uint64_t v65 = v170[k];
              }
              if (v68) {
                float64x2_t v64 = (char *)&v170[k];
              }
            }
            unint64_t v69 = (unint64_t)(v64 - (char *)v170) >> 3;
            int v70 = v60[4];
            v60[4] = v70 | 2;
            v60[13] = v69;
            unint64_t v71 = (char *)&v142;
            uint64_t v72 = v142;
            for (uint64_t m = 8; m != 440; m += 8)
            {
              uint64_t v74 = *(void *)((char *)&v142 + m);
              BOOL v75 = v72 < v74;
              if (v72 <= v74) {
                uint64_t v72 = *(void *)((char *)&v142 + m);
              }
              if (v75) {
                unint64_t v71 = (char *)&v142 + m;
              }
            }
            v60[4] = v70 | 6;
            v60[14] = (unint64_t)(v71 - (char *)&v142) >> 3;
            bzero(v170, 0x320uLL);
            uint64_t v169 = 0;
            long long v167 = 0u;
            long long v168 = 0u;
            long long v165 = 0u;
            long long v166 = 0u;
            long long v163 = 0u;
            long long v164 = 0u;
            long long v161 = 0u;
            long long v162 = 0u;
            long long v159 = 0u;
            long long v160 = 0u;
            long long v157 = 0u;
            long long v158 = 0u;
            long long v155 = 0u;
            long long v156 = 0u;
            long long v153 = 0u;
            long long v154 = 0u;
            long long v151 = 0u;
            long long v152 = 0u;
            long long v149 = 0u;
            long long v150 = 0u;
            long long v147 = 0u;
            long long v148 = 0u;
            long long v145 = 0u;
            long long v146 = 0u;
            long long v143 = 0u;
            long long v144 = 0u;
            long long v142 = 0u;
          }
          char v38 = 0;
          uint64_t v56 = v33 + 2400;
          uint64_t v57 = v33;
          if (v33 + 2400 == *(void *)(v141 + 1072)) {
            goto LABEL_95;
          }
        }
        uint64_t v33 = v57;
      }
LABEL_95:
      uint64_t v35 = v134;
      uint64_t v76 = *(int **)(sub_470B40(v134, v138) + 8);
      long long v77 = (unsigned __int16 *)((char *)v76 - *v76);
      if (*v77 < 0x43u)
      {
        uint64_t v80 = 0;
        uint64_t v79 = v135;
      }
      else
      {
        uint64_t v78 = v77[33];
        uint64_t v79 = v135;
        if (v78) {
          uint64_t v80 = *((unsigned __int8 *)v76 + v78);
        }
        else {
          uint64_t v80 = 0;
        }
      }
      v170[v80] += v55;
      uint64_t v81 = *(int **)(sub_470B40(v134, v138) + 8);
      unint64_t v82 = (unsigned __int16 *)((char *)v81 - *v81);
      if (*v82 >= 0x43u && (uint64_t v83 = v82[33]) != 0)
      {
        if (*((unsigned __int8 *)v81 + v83) == v132) {
          goto LABEL_117;
        }
      }
      else if (!v132)
      {
        goto LABEL_117;
      }
      uint64_t v84 = *(_DWORD **)(v20 + 40);
      if (v84 && (uint64_t v85 = *(int *)(v20 + 32), (int)v85 < *v84))
      {
        *(_DWORD *)(v20 + 32) = v85 + 1;
        int v86 = *(_DWORD **)&v84[2 * v85 + 2];
      }
      else
      {
        uint64_t v87 = sub_11BEA2C(*v130);
        int v86 = (_DWORD *)sub_188CDC8((uint64_t)v130, (uint64_t)v87);
      }
      v86[4] |= 1u;
      v86[6] = v79;
      long long v88 = *(int **)(sub_470B40(v134, v138) + 8);
      uint64_t v89 = (unsigned __int16 *)((char *)v88 - *v88);
      if (*v89 >= 0x43u && (uint64_t v90 = v89[33]) != 0) {
        int v91 = *((unsigned __int8 *)v88 + v90);
      }
      else {
        int v91 = 0;
      }
      v86[4] |= 2u;
      v86[7] = v91;
      unsigned int v92 = *(int **)(sub_470B40(v134, v138) + 8);
      unsigned int v93 = (unsigned __int16 *)((char *)v92 - *v92);
      if (*v93 >= 0x43u && (uint64_t v94 = v93[33]) != 0) {
        int v132 = *((unsigned __int8 *)v92 + v94);
      }
      else {
        int v132 = 0;
      }
LABEL_117:
      *((void *)&v142 + v137) += v55;
      if (v133 != v137)
      {
        unsigned int v95 = *(_DWORD **)(v20 + 64);
        if (v95 && (uint64_t v96 = *(int *)(v20 + 56), (int)v96 < *v95))
        {
          *(_DWORD *)(v20 + 56) = v96 + 1;
          uint64_t v41 = *(_DWORD **)&v95[2 * v96 + 2];
        }
        else
        {
          unint64_t v40 = sub_11BEA2C(*v129);
          uint64_t v41 = (_DWORD *)sub_188CDC8((uint64_t)v129, (uint64_t)v40);
        }
        v41[4] |= 3u;
        v41[6] = v79;
        v41[7] = v137;
        int v133 = v137;
      }
      uint64_t v135 = v55 + v79;
      ++v37;
      ++v138;
      char v38 = 1;
    }
  }
}

void sub_3C147C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(exception_object);
}

double sub_3C1498()
{
  byte_25579EF = 1;
  word_25579D8 = 65;
  byte_2557A07 = 1;
  word_25579F0 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_2557A98 = 0u;
  *(_OWORD *)&qword_2557AA8 = 0u;
  dword_2557AB8 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2557A98, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_2557A98, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_2557A98, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_2557A98, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_2557A1F = 8;
  strcpy((char *)&qword_2557A08, "any_mode");
  byte_2557A37 = 7;
  strcpy((char *)&dword_2557A20, "cycling");
  byte_2557A4F = 7;
  strcpy((char *)&dword_2557A38, "driving");
  byte_2557A67 = 7;
  strcpy((char *)&dword_2557A50, "walking");
  qword_2557A70 = 0;
  qword_2557A78 = 0;
  qword_2557A68 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_2557A68 = (uint64_t)v0;
  qword_2557A70 = (uint64_t)(v0 + 9);
  qword_2557A78 = (uint64_t)(v0 + 9);
  qword_2557A80 = 0;
  qword_2557A88 = 0;
  unk_2557A90 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_2557A88 = (uint64_t)(v1 + 9);
  unk_2557A90 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_2557A80 = (uint64_t)v1;
  return result;
}

void sub_3C1760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_2557AA8) {
    sub_20A7E7C((void **)qword_2557AA8);
  }
  uint64_t v37 = (void *)xmmword_2557A98;
  *(void *)&xmmword_2557A98 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_3C1800()
{
  uint64_t result = __chkstk_darwin();
  uint64_t v55 = v3;
  char v53 = v4;
  uint64_t v5 = *v1;
  if (*v1 != v1[1])
  {
    unint64_t v6 = v1;
    char v7 = (void *)result;
    uint64_t v56 = v2;
    int v8 = (uint64_t *)(v5 + 8);
    uint64_t result = sub_45FD04(v5 + 8);
    if (result)
    {
      long long v74 = 0u;
      long long v73 = 0u;
      *(_OWORD *)uint64_t v72 = 0u;
      char v75 = 1;
      int v76 = 0;
      char v77 = 1;
      v78[0] = 0;
      *(_DWORD *)((char *)v78 + 3) = 0;
      uint64_t v81 = 0;
      uint64_t v79 = 0;
      uint64_t v80 = 0;
      int v82 = -1;
      char v83 = 0;
      uint64_t v86 = 0;
      uint64_t v84 = 0;
      uint64_t v85 = 0;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6920, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_24F6920))
      {
        dword_24F68A0 = 0;
        unk_24F68A8 = 0u;
        unk_24F68B8 = 0u;
        dword_24F68C8 = 1065353216;
        xmmword_24F68D0 = 0u;
        unk_24F68E0 = 0u;
        dword_24F68F0 = 1065353216;
        unk_24F68F8 = 0u;
        unk_24F6908 = 0u;
        dword_24F6918 = 1065353216;
        __cxa_guard_release(&qword_24F6920);
      }
      uint64_t v9 = dword_24F68A0;
      if (dword_24F68A0)
      {
        char v10 = (char *)operator new(16 * dword_24F68A0);
        unint64_t v11 = (v9 - 1) & 0xFFFFFFFFFFFFFFFLL;
        int v12 = (void ***)v10;
        uint64_t v58 = v10;
        if (v11 < 3) {
          goto LABEL_58;
        }
        unint64_t v13 = v11 + 1;
        int v12 = (void ***)&v10[16 * (v13 & 0x1FFFFFFFFFFFFFFCLL)];
        *((void *)&v14 + 1) = 0;
        *(void *)&long long v14 = v72;
        int v15 = v10 + 32;
        uint64_t v16 = v13 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          *(v15 - 2) = v14;
          *(v15 - 1) = v14;
          _OWORD *v15 = v14;
          v15[1] = v14;
          v15 += 4;
          v16 -= 4;
        }
        while (v16);
        if (v13 != (v13 & 0x1FFFFFFFFFFFFFFCLL))
        {
LABEL_58:
          do
          {
            *int v12 = v72;
            v12[1] = 0;
            v12 += 2;
          }
          while (v12 != (void ***)&v10[16 * v9]);
        }
        uint64_t v17 = *v55;
        uint64_t v18 = v55[1];
        if (*v55 == v18) {
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v58 = 0;
        uint64_t v17 = *v55;
        uint64_t v18 = v55[1];
        if (*v55 == v18) {
          goto LABEL_29;
        }
      }
      uint64_t v19 = (_DWORD *)*v6;
      uint64_t v20 = (_DWORD *)v6[1];
      uint64_t v21 = *v6 + 8;
      do
      {
        uint64_t v22 = *(_DWORD **)(v17 + 40);
        uint64_t v23 = (_DWORD *)(*(void *)(v17 + 32) + 4);
        if (v23 != v22 && v19 != v20)
        {
          while (1)
          {
            uint64_t v25 = v21;
            uint64_t v26 = v19;
            while (*v26 != *v23)
            {
              v26 += 32;
              v25 += 128;
              if (v26 == v20) {
                goto LABEL_24;
              }
            }
            if (v26 != v20) {
              break;
            }
LABEL_24:
            if (++v23 == v22) {
              goto LABEL_17;
            }
          }
          v58[2 * *(unsigned int *)(v17 + 8)] = v25;
        }
LABEL_17:
        v17 += 56;
      }
      while (v17 != v18);
LABEL_29:
      sub_45FD6C(v8);
      sub_47E704((uint64_t)v8, 0, 3);
      uint64_t v27 = sub_40EFE8((uint64_t)v8);
      uint64_t v28 = sub_52058((uint64_t)v8);
      uint64_t v54 = (char *)v8;
      if (v27 == v28) {
        goto LABEL_37;
      }
      unint64_t v29 = v28 - v27 - 1056;
      if (v29 >= 0x420)
      {
        int v31 = 0;
        int v32 = 0;
        unint64_t v33 = v29 / 0x420 + 1;
        uint64_t v34 = (_DWORD *)v27;
        v27 += 1056 * (v33 & 0x7FFFFFFFFFFFFELL);
        uint64_t v35 = v33 & 0x7FFFFFFFFFFFFELL;
        do
        {
          v31 += v34[192] + v34[193];
          v32 += v34[456] + v34[457];
          v34 += 528;
          v35 -= 2;
        }
        while (v35);
        int v30 = v32 + v31;
        if (v33 == (v33 & 0x7FFFFFFFFFFFFELL))
        {
LABEL_37:
          unint64_t v36 = (unsigned int *)sub_40EFE8((uint64_t)v8);
          uint64_t v37 = (unsigned int *)sub_52058((uint64_t)v8);
          sub_47E9FC(v36, v37, 1, 0);
          char v38 = (unsigned int *)sub_40EFE8((uint64_t)v8);
          unint64_t v39 = (unsigned int *)sub_52058((uint64_t)v54);
          sub_47E9FC(v38, v39, 2, 0);
          unint64_t v40 = (unsigned int *)sub_40EFE8((uint64_t)v54);
          uint64_t v41 = (unsigned int *)sub_52058((uint64_t)v54);
          sub_47E9FC(v40, v41, 0, 0);
          long long v67 = 0u;
          long long v66 = 0u;
          uint64_t v68 = 0;
          unint64_t v69 = v7;
          sub_42A0((uint64_t)&v70);
          sub_42A0((uint64_t)v71);
          v71[48] = v53;
          uint64_t v42 = sub_374D14(v7);
          uint64_t v57 = sub_3750CC(v7);
          unint64_t v43 = (uint64_t *)sub_374CE4(v7);
          sub_327DC8(&v65, v43, 254);
          sub_45E97C(v54, (uint64_t)v87);
          uint64_t v44 = sub_46C8EC((void *)v87[0], (uint64_t)v87[1]);
          unint64_t v45 = *(unsigned int *)(v44 + 32) | ((unint64_t)*(unsigned __int16 *)(v44 + 36) << 32);
          if (__p)
          {
            int v91 = __p;
            operator delete(__p);
          }
          if (v88[1])
          {
            *(void **)&long long v89 = v88[1];
            operator delete(v88[1]);
          }
          sub_3BDCD8(v57, v45, v87);
          unint64_t v46 = (void *)HIBYTE(v88[0]);
          if (SHIBYTE(v88[0]) < 0) {
            unint64_t v46 = v87[1];
          }
          if (v46) {
            sub_26A18((uint64_t)v64, (const char *)v87);
          }
          else {
            sub_26908((uint64_t)v64);
          }
          if (SHIBYTE(v88[0]) < 0) {
            operator delete(v87[0]);
          }
          int v47 = sub_299C38(v42);
          int v48 = 0x7FFFFFFF;
          if (v47 != 0x7FFFFFFF)
          {
            v63[23] = 21;
            strcpy(v63, "PathletSpeedPredictor");
            memset(v62, 0, sizeof(v62));
            BOOL v49 = sub_374CDC((uint64_t)v7, (uint64_t)v63, (uint64_t *)v62);
            v61[23] = 9;
            strcpy(v61, "live_feed");
            uint64_t v50 = (void *)sub_560F4(v49, (uint64_t)v61);
            uint64_t v59 = operator new(0x19uLL);
            long long v60 = xmmword_20B9250;
            strcpy((char *)v59, "snapshot_offset_minutes");
            int v51 = sub_319F48(v50, (uint64_t)&v59);
            if (600 * v51 < 0) {
              char v52 = -5;
            }
            else {
              char v52 = 5;
            }
            int v48 = 600 * v51 / 10
                + v47
                + (((103 * (char)(v52 + 600 * v51 % 10)) >> 15) & 1)
                + ((103 * (char)(v52 + 600 * v51 % 10)) >> 10);
          }
          sub_480C((uint64_t)v87, v48);
        }
      }
      else
      {
        int v30 = 0;
      }
      do
      {
        v30 += *(_DWORD *)(v27 + 768) + *(_DWORD *)(v27 + 772);
        v27 += 1056;
      }
      while (v27 != v28);
      goto LABEL_37;
    }
    uint64_t v2 = v56;
  }
  void *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  return result;
}

void sub_3C40C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,char *a53,char *a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x154F]) < 0) {
    operator delete((void *)STACK[0x1538]);
  }
  sub_111ECAC((uint64_t)&STACK[0x1550]);
  uint64_t v72 = a34;
  long long v73 = (char *)*a34;
  if (*a34)
  {
    long long v74 = (char *)a34[1];
    char v75 = (void *)*a34;
    if (v74 != v73)
    {
      do
      {
        int v76 = v74 - 176;
        sub_11CBC74(v74 - 120);
        long long v74 = v76;
      }
      while (v76 != v73);
      uint64_t v72 = a34;
      char v75 = (void *)*a34;
    }
    v72[1] = v73;
    operator delete(v75);
  }
  if (a53)
  {
    char v77 = a54;
    uint64_t v78 = a53;
    if (a54 != a53)
    {
      do
      {
        uint64_t v79 = v77 - 176;
        sub_11CBC74(v77 - 120);
        char v77 = v79;
      }
      while (v79 != a53);
      uint64_t v78 = a53;
    }
    operator delete(v78);
  }
  sub_26C4C(&a68);
  sub_328138((uint64_t)&STACK[0x1120]);
  uint64_t v80 = (std::__shared_weak_count *)STACK[0x200];
  if (STACK[0x200] && !atomic_fetch_add(&v80->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
    std::__shared_weak_count::__release_weak(v80);
  }
  uint64_t v81 = a71;
  if (a71 && !atomic_fetch_add(&a71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
    std::__shared_weak_count::__release_weak(v81);
  }
  sub_4814(a31);
  sub_4814(a22);
  if (a50)
  {
    operator delete(a50);
    if (SLOBYTE(STACK[0x1537]) < 0)
    {
LABEL_21:
      operator delete((void *)STACK[0x1520]);
      unint64_t v82 = STACK[0x14C0];
      if (STACK[0x14C0]) {
        goto LABEL_22;
      }
      goto LABEL_28;
    }
  }
  else if (SLOBYTE(STACK[0x1537]) < 0)
  {
    goto LABEL_21;
  }
  unint64_t v82 = STACK[0x14C0];
  if (STACK[0x14C0])
  {
LABEL_22:
    uint64_t v83 = STACK[0x14C8];
    uint64_t v84 = (void *)v82;
    if (STACK[0x14C8] != v82)
    {
      do
        uint64_t v83 = sub_3AFFFC(v83 - 1056);
      while (v83 != v82);
      uint64_t v84 = (void *)STACK[0x14C0];
    }
    STACK[0x14C8] = v82;
    operator delete(v84);
    _Unwind_Resume(a1);
  }
LABEL_28:
  _Unwind_Resume(a1);
}

uint64_t sub_3C4538(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  *(void *)(a5 + 24) = a3;
  uint64_t v10 = sub_3750CC(a1);
  if (a4)
  {
    double v11 = sub_2954EC(v10, a2, (uint64_t)v43);
    int v12 = *(void **)&v43[8];
    if (*(void *)&v43[8] != *(void *)&v43[16])
    {
      unint64_t v13 = sub_2E40A4((uint64_t)v43);
      unsigned int v14 = v13;
      int v16 = v15;
      unint64_t v17 = v13 & 0xFFFFFFFF00000000;
      int v12 = *(void **)&v43[8];
      uint64_t v18 = v14;
      if (!*(void *)&v43[8]) {
        goto LABEL_10;
      }
LABEL_9:
      *(void *)&v43[16] = v12;
      operator delete(v12);
      goto LABEL_10;
    }
LABEL_8:
    int v16 = 0x7FFFFFFF;
    unint64_t v17 = 0xFFFFFFFF00000000;
    uint64_t v18 = 0xFFFFFFFFLL;
    if (!v12) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  double v11 = sub_2954EC(v10, a2, (uint64_t)v43);
  int v12 = *(void **)&v43[8];
  if (*(void *)&v43[8] == *(void *)&v43[16]) {
    goto LABEL_8;
  }
  unint64_t v19 = sub_2E1AA4((uint64_t)v43);
  unsigned int v20 = v19;
  unint64_t v17 = v19 & 0xFFFFFFFF00000000;
  int v12 = *(void **)&v43[8];
  uint64_t v18 = v20;
  int v16 = v21;
  if (*(void *)&v43[8]) {
    goto LABEL_9;
  }
LABEL_10:
  unint64_t v48 = v17 | v18;
  int v49 = v16;
  int v22 = *(_DWORD *)(a5 + 72);
  *(unsigned char *)(a5 + 148) = 1;
  *(_DWORD *)(a5 + 72) = v22 | 0x44;
  uint64_t v23 = *(void **)(a5 + 120);
  if (v23)
  {
    uint64_t v24 = a5 + 56;
    *((_DWORD *)v23 + 4) |= 2u;
    uint64_t v25 = v23[6];
    if (v25) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  uint64_t v26 = *(void *)(a5 + 64);
  uint64_t v27 = (void *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
  if (v26) {
    uint64_t v27 = (void *)*v27;
  }
  uint64_t v23 = sub_11D0890((uint64_t)v27);
  *(void *)(a5 + 120) = v23;
  uint64_t v24 = a5 + 56;
  *((_DWORD *)v23 + 4) |= 2u;
  uint64_t v25 = v23[6];
  if (!v25)
  {
LABEL_16:
    uint64_t v28 = v23[1];
    unint64_t v29 = (void *)(v28 & 0xFFFFFFFFFFFFFFFCLL);
    if (v28) {
      unint64_t v29 = (void *)*v29;
    }
    uint64_t v25 = sub_15C1918((uint64_t)v29);
    v23[6] = v25;
  }
LABEL_19:
  sub_E11384(&v48, v25, v11);
  unint64_t v30 = (HIDWORD(v48)
       + (((v48 + 0x388152A534) ^ 0xDEADBEEFLL) << 6)
       + (((v48 + 0x388152A534) ^ 0xDEADBEEFuLL) >> 2)
       + 2654435769u) ^ (v48 + 0x388152A534) ^ 0xDEADBEEFLL;
  uint64_t v31 = *(void *)(a5 + 136) ^ v30 ^ (v49 + (v30 << 6) + (v30 >> 2) + 2654435769u);
  *(_DWORD *)(a5 + 72) |= 0x10u;
  *(void *)(a5 + 136) = v31;
  unint64_t v32 = *(void *)(a6 + 8);
  if (v32 >= *(void *)(a6 + 16))
  {
    unint64_t v36 = sub_3C4CA0((void **)a6, a5);
  }
  else
  {
    long long v33 = *(_OWORD *)a5;
    long long v34 = *(_OWORD *)(a5 + 16);
    long long v35 = *(_OWORD *)(a5 + 32);
    *(unsigned char *)(v32 + 48) = *(unsigned char *)(a5 + 48);
    *(_OWORD *)(v32 + 16) = v34;
    *(_OWORD *)(v32 + 32) = v35;
    *(_OWORD *)unint64_t v32 = v33;
    sub_11CBB5C(v32 + 56, v24);
    *(void *)(v32 + 168) = *(void *)(a5 + 168);
    unint64_t v36 = (char *)(v32 + 176);
    *(void *)(a6 + 8) = v32 + 176;
  }
  *(void *)(a6 + 8) = v36;
  *(_DWORD *)unint64_t v43 = -1;
  *(void *)&long long v37 = -1;
  *((void *)&v37 + 1) = -1;
  *(_OWORD *)&v43[8] = v37;
  *(_OWORD *)&v43[24] = v37;
  *(void *)&v43[40] = 0x7FFFFFFFFFFFFFFFLL;
  char v44 = 0;
  sub_11CB8A8((uint64_t)&v45, 0, 0);
  uint64_t v47 = 0;
  long long v38 = *(_OWORD *)&v43[16];
  *(_OWORD *)a5 = *(_OWORD *)v43;
  *(_OWORD *)(a5 + 16) = v38;
  *(_OWORD *)(a5 + 32) = *(_OWORD *)&v43[32];
  *(unsigned char *)(a5 + 48) = v44;
  if (v43 != (unsigned char *)a5)
  {
    uint64_t v39 = *(void *)(a5 + 64);
    if ((v39 & 2) != 0)
    {
      unint64_t v40 = 0;
    }
    else
    {
      unint64_t v40 = (void *)(v39 & 0xFFFFFFFFFFFFFFFCLL);
      if (v39) {
        unint64_t v40 = (void *)*v40;
      }
    }
    if ((v46 & 2) != 0)
    {
      uint64_t v41 = 0;
    }
    else
    {
      uint64_t v41 = (void *)(v46 & 0xFFFFFFFFFFFFFFFCLL);
      if (v46) {
        uint64_t v41 = (void *)*v41;
      }
    }
    if (v40 == v41) {
      sub_11CCFE4(v24, (uint64_t)&v45);
    }
    else {
      sub_11CCF6C(v24, (uint64_t)&v45);
    }
  }
  *(void *)(a5 + 168) = v47;
  return sub_11CBC74(&v45);
}

void sub_3C4838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_3C4858(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_3C4864(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, int a8, double a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int a18, uint64_t a19, uint64_t a20)
{
  *(_DWORD *)a20 = a7;
  *(void *)(a20 + 8) = a3;
  *(void *)(a20 + 16) = a4;
  *(void *)(a20 + 32) = a5;
  *(void *)(a20 + 168) = a19;
  uint64_t v23 = sub_46CCC8(a2, a4, a9);
  int v24 = v23;
  *(void *)(a20 + 40) = v23;
  *(_DWORD *)(a20 + 72) |= 8u;
  uint64_t v25 = *(_DWORD **)(a20 + 128);
  if (!v25)
  {
    uint64_t v26 = *(void *)(a20 + 64);
    uint64_t v27 = (void *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
    if (v26) {
      uint64_t v27 = (void *)*v27;
    }
    uint64_t v25 = (_DWORD *)sub_13D84A8((uint64_t)v27);
    *(void *)(a20 + 128) = v25;
  }
  v25[4] |= 1u;
  v25[6] = a10;
  *(_DWORD *)(a20 + 72) |= 8u;
  v25[4] |= 2u;
  v25[7] = a14;
  *(_DWORD *)(a20 + 72) |= 8u;
  v25[4] |= 4u;
  v25[8] = a12;
  int v28 = *(_DWORD *)(a20 + 72);
  *(_DWORD *)(a20 + 144) = a8;
  *(_DWORD *)(a20 + 156) = a16;
  *(_DWORD *)(a20 + 160) = a18;
  *(_DWORD *)(a20 + 152) = v24;
  *(_DWORD *)(a20 + 72) = v28 | 0x7A0;
  *(unsigned char *)(a20 + 149) = 0;
  uint64_t v29 = *(void *)(sub_46C8EC(a2, a4) + 32);
  unint64_t v30 = (int **)sub_46C8EC(a2, a4);
  uint64_t v31 = (unsigned __int16 *)((char *)*v30 - **v30);
  if (*v31 < 0x1Du)
  {
    uint64_t v34 = 0;
    uint64_t v33 = a1;
  }
  else
  {
    uint64_t v32 = v31[14];
    uint64_t v33 = a1;
    if (v32) {
      uint64_t v34 = *(void *)((char *)*v30 + v32);
    }
    else {
      uint64_t v34 = 0;
    }
  }
  if (*((unsigned char *)v30 + 38)) {
    uint64_t v35 = -v34;
  }
  else {
    uint64_t v35 = v34;
  }
  double v36 = sub_2954EC(v33, v29, (uint64_t)&v65);
  long long v37 = (void *)*((void *)&v65 + 1);
  if (*((void **)&v65 + 1) != v66)
  {
    unint64_t v38 = sub_2E1AA4((uint64_t)&v65);
    unsigned int v39 = v38;
    int v41 = v40;
    unint64_t v42 = v38 & 0xFFFFFFFF00000000;
    long long v37 = (void *)*((void *)&v65 + 1);
    uint64_t v43 = v39;
    if (!*((void *)&v65 + 1)) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  int v41 = 0x7FFFFFFF;
  unint64_t v42 = 0xFFFFFFFF00000000;
  uint64_t v43 = 0xFFFFFFFFLL;
  if (*((void *)&v65 + 1))
  {
LABEL_15:
    long long v66 = v37;
    operator delete(v37);
  }
LABEL_16:
  unint64_t v63 = v42 | v43;
  int v64 = v41;
  *(_DWORD *)(a20 + 72) |= 4u;
  char v44 = *(void **)(a20 + 120);
  if (v44)
  {
    *((_DWORD *)v44 + 4) |= 1u;
    uint64_t v45 = v44[5];
    if (v45) {
      goto LABEL_27;
    }
    goto LABEL_24;
  }
  uint64_t v46 = *(void *)(a20 + 64);
  uint64_t v47 = (void *)(v46 & 0xFFFFFFFFFFFFFFFCLL);
  if (v46) {
    uint64_t v47 = (void *)*v47;
  }
  char v44 = sub_11D0890((uint64_t)v47);
  *(void *)(a20 + 120) = v44;
  *((_DWORD *)v44 + 4) |= 1u;
  uint64_t v45 = v44[5];
  if (!v45)
  {
LABEL_24:
    uint64_t v48 = v44[1];
    int v49 = (void *)(v48 & 0xFFFFFFFFFFFFFFFCLL);
    if (v48) {
      int v49 = (void *)*v49;
    }
    uint64_t v45 = sub_15C1918((uint64_t)v49);
    v44[5] = v45;
  }
LABEL_27:
  sub_E11384(&v63, v45, v36);
  *(_DWORD *)(a20 + 72) |= 4u;
  uint64_t v50 = *(void **)(a20 + 120);
  if (!v50)
  {
    uint64_t v51 = *(void *)(a20 + 64);
    char v52 = (void *)(v51 & 0xFFFFFFFFFFFFFFFCLL);
    if (v51) {
      char v52 = (void *)*v52;
    }
    uint64_t v50 = sub_11D0890((uint64_t)v52);
    *(void *)(a20 + 120) = v50;
  }
  *((_DWORD *)v50 + 4) |= 4u;
  v50[7] = a6;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6920, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F6920))
  {
    dword_24F68A0 = 0;
    unk_24F68A8 = 0u;
    unk_24F68B8 = 0u;
    dword_24F68C8 = 1065353216;
    xmmword_24F68D0 = 0u;
    unk_24F68E0 = 0u;
    dword_24F68F0 = 1065353216;
    unk_24F68F8 = 0u;
    unk_24F6908 = 0u;
    dword_24F6918 = 1065353216;
    __cxa_guard_release(&qword_24F6920);
  }
  sub_3C4F98((uint64_t)&dword_24F68A0, a7, (uint64_t)&v65);
  *(_DWORD *)(a20 + 72) |= 1u;
  uint64_t v53 = *(void *)(a20 + 64);
  uint64_t v54 = (uint64_t *)(v53 & 0xFFFFFFFFFFFFFFFCLL);
  if (v53) {
    uint64_t v54 = (uint64_t *)*v54;
  }
  sub_1881DF4((std::string **)(a20 + 104), &v65, v54);
  if (SHIBYTE(v66) >= 0) {
    uint64_t v55 = (uint64_t *)&v65;
  }
  else {
    uint64_t v55 = (uint64_t *)v65;
  }
  if (SHIBYTE(v66) >= 0) {
    unint64_t v56 = HIBYTE(v66);
  }
  else {
    unint64_t v56 = *((void *)&v65 + 1);
  }
  unint64_t v57 = sub_B128((uint64_t)&v67, v55, v56);
  unint64_t v58 = (HIDWORD(v63)
       + (((v63 + 0x388152A534) ^ 0xDEADBEEFLL) << 6)
       + (((v63 + 0x388152A534) ^ 0xDEADBEEFuLL) >> 2)
       + 2654435769u) ^ (v63 + 0x388152A534) ^ 0xDEADBEEFLL;
  uint64_t v59 = v57 ^ v35 ^ v58 ^ (v64 + (v58 << 6) + (v58 >> 2) + 2654435769u);
  *(_DWORD *)(a20 + 72) |= 0x10u;
  *(void *)(a20 + 136) = v59;
  *(unsigned char *)(a20 + 48) = 1;
  if (SHIBYTE(v66) < 0) {
    operator delete((void *)v65);
  }
}

void sub_3C4C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_3C4CA0(void **a1, uint64_t a2)
{
  uint64_t v3 = 0x2E8BA2E8BA2E8BA3 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x1745D1745D1745DLL) {
    sub_2E00();
  }
  if (0x5D1745D1745D1746 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0x5D1745D1745D1746 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4)) >= 0xBA2E8BA2E8BA2ELL) {
    unint64_t v6 = 0x1745D1745D1745DLL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x1745D1745D1745DLL) {
      sub_188D718();
    }
    char v7 = (char *)operator new(176 * v6);
  }
  else
  {
    char v7 = 0;
  }
  unint64_t v19 = &v7[176 * v3];
  unsigned int v20 = &v7[176 * v6];
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v19 = *(_OWORD *)a2;
  *((_OWORD *)v19 + 1) = v8;
  *((_OWORD *)v19 + 2) = *(_OWORD *)(a2 + 32);
  v19[48] = *(unsigned char *)(a2 + 48);
  sub_11CBB5C(v19 + 56, a2 + 56);
  *((void *)v19 + 21) = *(void *)(a2 + 168);
  uint64_t v9 = v19;
  uint64_t v10 = v19 + 176;
  int v12 = (char *)*a1;
  double v11 = (char *)a1[1];
  if (v11 == *a1)
  {
    *a1 = v19;
    a1[1] = v10;
    a1[2] = v20;
  }
  else
  {
    do
    {
      unint64_t v13 = v9;
      v9 -= 176;
      long long v14 = *((_OWORD *)v11 - 11);
      long long v15 = *((_OWORD *)v11 - 10);
      long long v16 = *((_OWORD *)v11 - 9);
      *(v13 - 128) = *(v11 - 128);
      *((_OWORD *)v13 - 10) = v15;
      *((_OWORD *)v13 - 9) = v16;
      *((_OWORD *)v13 - 11) = v14;
      sub_3C4EF8((uint64_t)(v13 - 120), (uint64_t)(v11 - 120));
      *((void *)v13 - 1) = *((void *)v11 - 1);
      v11 -= 176;
    }
    while (v11 != v12);
    unint64_t v17 = (char *)*a1;
    double v11 = (char *)a1[1];
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v20;
    if (v11 != v17)
    {
      do
      {
        sub_11CBC74(v11 - 120);
        v11 -= 176;
      }
      while (v11 != v17);
      double v11 = v17;
    }
  }
  if (v11) {
    operator delete(v11);
  }
  return v19 + 176;
}

void sub_3C4E8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3C4EA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_3C4EA0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 176;
    sub_11CBC74(i - 120);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_3C4EF8(uint64_t a1, uint64_t a2)
{
  sub_11CB8A8(a1, 0, 0);
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if ((v4 & 2) != 0)
    {
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v5 = (void *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
      if (v4) {
        uint64_t v5 = (void *)*v5;
      }
    }
    uint64_t v6 = *(void *)(a2 + 8);
    if ((v6 & 2) != 0)
    {
      char v7 = 0;
    }
    else
    {
      char v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6) {
        char v7 = (void *)*v7;
      }
    }
    if (v5 == v7) {
      sub_11CCFE4(a1, a2);
    }
    else {
      sub_11CCF6C(a1, a2);
    }
  }
  return a1;
}

uint64_t sub_3C4F98@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *(void *)(result + 96);
  if (!v5) {
    goto LABEL_21;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = a2;
    if (v5 <= a2) {
      unint64_t v7 = a2 % v5;
    }
  }
  else
  {
    unint64_t v7 = (v5 - 1) & a2;
  }
  long long v8 = *(uint64_t ***)(*(void *)(result + 88) + 8 * v7);
  if (!v8 || (uint64_t v9 = *v8) == 0)
  {
LABEL_21:
    uint64_t result = sub_723EC(3u);
    if (result)
    {
      sub_6BAC((uint64_t)v20);
      unint64_t v13 = sub_188FC78(v20, (uint64_t)"Invalid scenario id: ", 21);
      std::to_string(&__p, a2);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      sub_188FC78(v13, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v21 < 0) {
        operator delete((void *)v20[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      uint64_t result = std::ios::~ios();
    }
    *(unsigned char *)(a3 + 23) = 7;
    strcpy((char *)a3, "Invalid");
    return result;
  }
  if (v6.u32[0] < 2uLL)
  {
    unint64_t v10 = v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == a2)
      {
        if (*((_DWORD *)v9 + 4) == a2) {
          goto LABEL_36;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_21;
      }
      uint64_t v9 = (uint64_t *)*v9;
      if (!v9) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == a2) {
      break;
    }
    if (v11 >= v5) {
      v11 %= v5;
    }
    if (v11 != v7) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v9 = (uint64_t *)*v9;
    if (!v9) {
      goto LABEL_21;
    }
  }
  if (*((_DWORD *)v9 + 4) != a2) {
    goto LABEL_11;
  }
LABEL_36:
  if (*((char *)v9 + 47) < 0)
  {
    unint64_t v17 = (void *)v9[3];
    unint64_t v18 = v9[4];
    return (uint64_t)sub_4200((unsigned char *)a3, v17, v18);
  }
  else
  {
    long long v16 = *(_OWORD *)(v9 + 3);
    *(void *)(a3 + 16) = v9[5];
    *(_OWORD *)a3 = v16;
  }
  return result;
}

void sub_3C52A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void *sub_3C5304(void *a1, unint64_t a2)
{
  long long v11 = 0u;
  memset(v10, 0, sizeof(v10));
  *(void *)uint64_t v9 = 0xFFFFFFFFLL;
  *(void *)&long long v4 = -1;
  *((void *)&v4 + 1) = -1;
  *(_OWORD *)&v9[8] = v4;
  *(void *)&v9[40] = 0x7FFFFFFFFFFFFFFFLL;
  *(_OWORD *)&v9[24] = v4;
  sub_11CB8A8((uint64_t)v10 + 8, 0, 0);
  *((void *)&v11 + 1) = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (a2)
  {
    if (a2 >= 0x1745D1745D1745ELL) {
      sub_2E00();
    }
    unint64_t v5 = operator new(176 * a2);
    *a1 = v5;
    a1[1] = v5;
    uint64_t v6 = 176 * a2;
    unint64_t v7 = (char *)&v5[11 * a2];
    a1[2] = v7;
    do
    {
      _OWORD *v5 = *(_OWORD *)v9;
      v5[1] = *(_OWORD *)&v9[16];
      v5[2] = *(_OWORD *)&v9[32];
      *((unsigned char *)v5 + 48) = v10[0];
      sub_11CBB5C((char *)v5 + 56, (char *)v10 + 8);
      *((void *)v5 + 21) = *((void *)&v11 + 1);
      v5 += 11;
      v6 -= 176;
    }
    while (v6);
    a1[1] = v7;
  }
  sub_11CBC74((char *)v10 + 8);
  return a1;
}

void sub_3C5430(_Unwind_Exception *a1)
{
  sub_11CBC74(v1);
  _Unwind_Resume(a1);
}

void sub_3C5444(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v3;
  sub_11CBC74(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_3C545C(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = result;
  while (2)
  {
    v283 = (long long *)(a2 - 176);
    unint64_t v9 = v8;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v8 = v9;
          uint64_t v10 = a2 - v9;
          unint64_t v11 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a2 - v9) >> 4);
          if (!(!v5 & v4))
          {
            switch(v11)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                unsigned int v107 = *(_DWORD *)(a2 - 20);
                unsigned int v108 = *(_DWORD *)(v8 + 156);
                BOOL v109 = *(void *)(a2 - 160) < *(void *)(v8 + 16);
                BOOL v5 = v107 == v108;
                BOOL v110 = v107 > v108;
                if (!v5) {
                  BOOL v109 = v110;
                }
                if (v109) {
                  uint64_t result = sub_3C6D3C((long long *)v8, v283);
                }
                break;
              case 3uLL:
                uint64_t result = sub_3C68A8(v8, v8 + 176, (uint64_t)v283);
                break;
              case 4uLL:
                uint64_t result = sub_3C6ECC(v8, v8 + 176, v8 + 352, (uint64_t)v283);
                break;
              case 5uLL:
                uint64_t result = sub_3C6764(v8, v8 + 176, v8 + 352, v8 + 528, (uint64_t)v283);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v10 <= 4223)
          {
            if (a4)
            {
              if (v8 != a2)
              {
                uint64_t v111 = v8 + 176;
                if (v8 + 176 != a2)
                {
                  uint64_t v112 = 0;
                  uint64_t v113 = v8;
                  do
                  {
                    uint64_t v156 = v111;
                    unsigned int v157 = *(_DWORD *)(v113 + 332);
                    unsigned int v158 = *(_DWORD *)(v113 + 156);
                    BOOL v159 = *(void *)(v113 + 192) < *(void *)(v113 + 16);
                    BOOL v5 = v157 == v158;
                    BOOL v160 = v157 > v158;
                    if (!v5) {
                      BOOL v159 = v160;
                    }
                    if (v159)
                    {
                      long long v161 = *(_OWORD *)v156;
                      long long v162 = *(_OWORD *)(v156 + 16);
                      long long v163 = *(_OWORD *)(v156 + 32);
                      char v295 = *(unsigned char *)(v156 + 48);
                      long long v293 = v162;
                      long long v294 = v163;
                      long long v292 = v161;
                      sub_3C4EF8((uint64_t)&v296, v113 + 232);
                      uint64_t v299 = *(void *)(v113 + 344);
                      uint64_t v164 = v112;
                      while (1)
                      {
                        uint64_t v165 = v8 + v164;
                        long long v166 = *(_OWORD *)(v8 + v164 + 16);
                        *(_OWORD *)(v165 + 176) = *(_OWORD *)(v8 + v164);
                        *(_OWORD *)(v165 + 192) = v166;
                        *(_OWORD *)(v165 + 208) = *(_OWORD *)(v8 + v164 + 32);
                        *(unsigned char *)(v165 + 224) = *(unsigned char *)(v8 + v164 + 48);
                        uint64_t v167 = *(void *)(v8 + v164 + 240);
                        if ((v167 & 2) != 0)
                        {
                          long long v168 = 0;
                        }
                        else
                        {
                          long long v168 = (void *)(v167 & 0xFFFFFFFFFFFFFFFCLL);
                          if (v167) {
                            long long v168 = (void *)*v168;
                          }
                        }
                        uint64_t v169 = *(void *)(v165 + 64);
                        if ((v169 & 2) != 0)
                        {
                          uint64_t v170 = 0;
                        }
                        else
                        {
                          uint64_t v170 = (void *)(v169 & 0xFFFFFFFFFFFFFFFCLL);
                          if (v169) {
                            uint64_t v170 = (void *)*v170;
                          }
                        }
                        uint64_t v171 = v165 + 232;
                        uint64_t v172 = v165 + 56;
                        if (v168 == v170) {
                          sub_11CCFE4(v171, v172);
                        }
                        else {
                          sub_11CCF6C(v171, v172);
                        }
                        uint64_t v173 = v8 + v164;
                        *(void *)(v8 + v164 + 344) = *(void *)(v8 + v164 + 168);
                        if (!v164) {
                          break;
                        }
                        unsigned int v174 = *(_DWORD *)(v173 - 20);
                        BOOL v175 = (unint64_t)v293 < *(void *)(v173 - 160);
                        if (v298 != v174) {
                          BOOL v175 = v298 > v174;
                        }
                        v164 -= 176;
                        if (!v175)
                        {
                          uint64_t v176 = v8 + v164 + 176;
                          goto LABEL_207;
                        }
                      }
                      uint64_t v176 = v8;
LABEL_207:
                      long long v177 = v292;
                      long long v178 = v293;
                      long long v179 = v294;
                      *(unsigned char *)(v176 + 48) = v295;
                      *(_OWORD *)(v176 + 16) = v178;
                      *(_OWORD *)(v176 + 32) = v179;
                      *(_OWORD *)uint64_t v176 = v177;
                      if ((long long *)v176 != &v292)
                      {
                        uint64_t v180 = *(void *)(v176 + 64);
                        if ((v180 & 2) != 0)
                        {
                          v181 = 0;
                        }
                        else
                        {
                          v181 = (void *)(v180 & 0xFFFFFFFFFFFFFFFCLL);
                          if (v180) {
                            v181 = (void *)*v181;
                          }
                        }
                        if ((v297 & 2) != 0)
                        {
                          uint64_t v182 = 0;
                        }
                        else
                        {
                          uint64_t v182 = (void *)(v297 & 0xFFFFFFFFFFFFFFFCLL);
                          if (v297) {
                            uint64_t v182 = (void *)*v182;
                          }
                        }
                        uint64_t v183 = v173 + 56;
                        if (v181 == v182) {
                          sub_11CCFE4(v183, (uint64_t)&v296);
                        }
                        else {
                          sub_11CCF6C(v183, (uint64_t)&v296);
                        }
                      }
                      *(void *)(v176 + 168) = v299;
                      uint64_t result = sub_11CBC74(&v296);
                    }
                    uint64_t v111 = v156 + 176;
                    v112 += 176;
                    uint64_t v113 = v156;
                  }
                  while (v156 + 176 != a2);
                }
              }
            }
            else if (v8 != a2)
            {
              uint64_t v256 = v8 + 176;
              if (v8 + 176 != a2)
              {
                uint64_t v257 = v8 - 160;
                do
                {
                  uint64_t v258 = v256;
                  unsigned int v259 = *(_DWORD *)(v8 + 332);
                  unsigned int v260 = *(_DWORD *)(v8 + 156);
                  BOOL v261 = *(void *)(v8 + 192) < *(void *)(v8 + 16);
                  BOOL v5 = v259 == v260;
                  BOOL v262 = v259 > v260;
                  if (!v5) {
                    BOOL v261 = v262;
                  }
                  if (v261)
                  {
                    long long v263 = *(_OWORD *)v258;
                    long long v264 = *(_OWORD *)(v258 + 16);
                    long long v265 = *(_OWORD *)(v258 + 32);
                    char v295 = *(unsigned char *)(v258 + 48);
                    long long v293 = v264;
                    long long v294 = v265;
                    long long v292 = v263;
                    sub_3C4EF8((uint64_t)&v296, v8 + 232);
                    uint64_t v299 = *(void *)(v8 + 344);
                    uint64_t v266 = v257;
                    do
                    {
                      long long v269 = *(_OWORD *)(v266 + 176);
                      *(_OWORD *)(v266 + 336) = *(_OWORD *)(v266 + 160);
                      *(_OWORD *)(v266 + 352) = v269;
                      *(_OWORD *)(v266 + 368) = *(_OWORD *)(v266 + 192);
                      *(unsigned char *)(v266 + 384) = *(unsigned char *)(v266 + 208);
                      uint64_t v270 = *(void *)(v266 + 400);
                      if ((v270 & 2) != 0)
                      {
                        v271 = 0;
                      }
                      else
                      {
                        v271 = (void *)(v270 & 0xFFFFFFFFFFFFFFFCLL);
                        if (v270) {
                          v271 = (void *)*v271;
                        }
                      }
                      uint64_t v272 = *(void *)(v266 + 224);
                      if ((v272 & 2) != 0)
                      {
                        v273 = 0;
                      }
                      else
                      {
                        v273 = (void *)(v272 & 0xFFFFFFFFFFFFFFFCLL);
                        if (v272) {
                          v273 = (void *)*v273;
                        }
                      }
                      uint64_t v274 = v266 + 392;
                      uint64_t v275 = v266 + 216;
                      if (v271 == v273) {
                        sub_11CCFE4(v274, v275);
                      }
                      else {
                        sub_11CCF6C(v274, v275);
                      }
                      *(void *)(v266 + 504) = *(void *)(v266 + 328);
                      unsigned int v267 = *(_DWORD *)(v266 + 140);
                      BOOL v268 = (unint64_t)v293 < *(void *)v266;
                      if (v298 != v267) {
                        BOOL v268 = v298 > v267;
                      }
                      v266 -= 176;
                    }
                    while (v268);
                    long long v276 = v292;
                    long long v277 = v293;
                    long long v278 = v294;
                    *(unsigned char *)(v266 + 384) = v295;
                    *(_OWORD *)(v266 + 352) = v277;
                    *(_OWORD *)(v266 + 368) = v278;
                    *(_OWORD *)(v266 + 336) = v276;
                    if ((long long *)(v266 + 336) != &v292)
                    {
                      uint64_t v279 = *(void *)(v266 + 400);
                      if ((v279 & 2) != 0)
                      {
                        v280 = 0;
                      }
                      else
                      {
                        v280 = (void *)(v279 & 0xFFFFFFFFFFFFFFFCLL);
                        if (v279) {
                          v280 = (void *)*v280;
                        }
                      }
                      if ((v297 & 2) != 0)
                      {
                        v281 = 0;
                      }
                      else
                      {
                        v281 = (void *)(v297 & 0xFFFFFFFFFFFFFFFCLL);
                        if (v297) {
                          v281 = (void *)*v281;
                        }
                      }
                      uint64_t v282 = v266 + 392;
                      if (v280 == v281) {
                        sub_11CCFE4(v282, (uint64_t)&v296);
                      }
                      else {
                        sub_11CCF6C(v282, (uint64_t)&v296);
                      }
                    }
                    *(void *)(v266 + 504) = v299;
                    uint64_t result = sub_11CBC74(&v296);
                  }
                  uint64_t v256 = v258 + 176;
                  v257 += 176;
                  uint64_t v8 = v258;
                }
                while (v258 + 176 != a2);
              }
            }
            return result;
          }
          if (!a3)
          {
            if (v8 != a2)
            {
              int64_t v114 = (v11 - 2) >> 1;
              int64_t v115 = v114;
              do
              {
                int64_t v116 = v115;
                if (v114 >= v115)
                {
                  uint64_t v117 = (2 * v115) | 1;
                  uint64_t v118 = v8 + 176 * v117;
                  if (2 * v115 + 2 < (uint64_t)v11)
                  {
                    unsigned int v119 = *(_DWORD *)(v118 + 156);
                    unsigned int v120 = *(_DWORD *)(v118 + 332);
                    BOOL v121 = *(void *)(v118 + 16) < *(void *)(v118 + 192);
                    BOOL v5 = v119 == v120;
                    BOOL v122 = v119 > v120;
                    if (!v5) {
                      BOOL v121 = v122;
                    }
                    v118 += 176 * v121;
                    if (v121) {
                      uint64_t v117 = 2 * v115 + 2;
                    }
                  }
                  uint64_t v123 = v8 + 176 * v115;
                  unsigned int v124 = *(_DWORD *)(v118 + 156);
                  unsigned int v125 = *(_DWORD *)(v123 + 156);
                  BOOL v126 = *(void *)(v118 + 16) < *(void *)(v123 + 16);
                  BOOL v5 = v124 == v125;
                  BOOL v127 = v124 > v125;
                  if (!v5) {
                    BOOL v126 = v127;
                  }
                  if (!v126)
                  {
                    long long v128 = *(_OWORD *)v123;
                    long long v129 = *(_OWORD *)(v123 + 16);
                    long long v130 = *(_OWORD *)(v123 + 32);
                    char v295 = *(unsigned char *)(v123 + 48);
                    long long v293 = v129;
                    long long v294 = v130;
                    long long v292 = v128;
                    uint64_t v131 = v8 + 176 * v116;
                    sub_3C4EF8((uint64_t)&v296, v131 + 56);
                    uint64_t v299 = *(void *)(v131 + 168);
                    do
                    {
                      uint64_t v135 = v118;
                      long long v136 = *(_OWORD *)v118;
                      long long v137 = *(_OWORD *)(v118 + 16);
                      long long v138 = *(_OWORD *)(v118 + 32);
                      *(unsigned char *)(v123 + 48) = *(unsigned char *)(v118 + 48);
                      *(_OWORD *)(v123 + 16) = v137;
                      *(_OWORD *)(v123 + 32) = v138;
                      *(_OWORD *)uint64_t v123 = v136;
                      uint64_t v139 = v118 + 56;
                      if (v123 != v118)
                      {
                        uint64_t v140 = *(void *)(v123 + 64);
                        if ((v140 & 2) != 0)
                        {
                          uint64_t v141 = 0;
                        }
                        else
                        {
                          uint64_t v141 = (void *)(v140 & 0xFFFFFFFFFFFFFFFCLL);
                          if (v140) {
                            uint64_t v141 = (void *)*v141;
                          }
                        }
                        uint64_t v142 = *(void *)(v118 + 64);
                        if ((v142 & 2) != 0)
                        {
                          long long v143 = 0;
                        }
                        else
                        {
                          long long v143 = (void *)(v142 & 0xFFFFFFFFFFFFFFFCLL);
                          if (v142) {
                            long long v143 = (void *)*v143;
                          }
                        }
                        uint64_t v144 = v123 + 56;
                        if (v141 == v143) {
                          sub_11CCFE4(v144, v118 + 56);
                        }
                        else {
                          sub_11CCF6C(v144, v118 + 56);
                        }
                      }
                      *(void *)(v123 + 168) = *(void *)(v118 + 168);
                      if (v114 < v117) {
                        break;
                      }
                      uint64_t v145 = (2 * v117) | 1;
                      uint64_t v118 = v8 + 176 * v145;
                      if (2 * v117 + 2 < (uint64_t)v11)
                      {
                        unsigned int v146 = *(_DWORD *)(v118 + 156);
                        unsigned int v147 = *(_DWORD *)(v118 + 332);
                        BOOL v148 = *(void *)(v118 + 16) < *(void *)(v118 + 192);
                        BOOL v5 = v146 == v147;
                        BOOL v149 = v146 > v147;
                        if (!v5) {
                          BOOL v148 = v149;
                        }
                        v118 += 176 * v148;
                        if (v148) {
                          uint64_t v145 = 2 * v117 + 2;
                        }
                      }
                      unsigned int v132 = *(_DWORD *)(v118 + 156);
                      BOOL v133 = *(void *)(v118 + 16) < (unint64_t)v293;
                      BOOL v5 = v132 == v298;
                      BOOL v134 = v132 > v298;
                      if (!v5) {
                        BOOL v133 = v134;
                      }
                      uint64_t v123 = v135;
                      uint64_t v117 = v145;
                    }
                    while (!v133);
                    long long v150 = v292;
                    long long v151 = v293;
                    long long v152 = v294;
                    *(unsigned char *)(v135 + 48) = v295;
                    *(_OWORD *)(v135 + 16) = v151;
                    *(_OWORD *)(v135 + 32) = v152;
                    *(_OWORD *)uint64_t v135 = v150;
                    if ((long long *)v135 != &v292)
                    {
                      uint64_t v153 = *(void *)(v135 + 64);
                      if ((v153 & 2) != 0)
                      {
                        long long v154 = 0;
                      }
                      else
                      {
                        long long v154 = (void *)(v153 & 0xFFFFFFFFFFFFFFFCLL);
                        if (v153) {
                          long long v154 = (void *)*v154;
                        }
                      }
                      if ((v297 & 2) != 0)
                      {
                        long long v155 = 0;
                      }
                      else
                      {
                        long long v155 = (void *)(v297 & 0xFFFFFFFFFFFFFFFCLL);
                        if (v297) {
                          long long v155 = (void *)*v155;
                        }
                      }
                      if (v154 == v155) {
                        sub_11CCFE4(v139, (uint64_t)&v296);
                      }
                      else {
                        sub_11CCF6C(v139, (uint64_t)&v296);
                      }
                    }
                    *(void *)(v135 + 168) = v299;
                    sub_11CBC74(&v296);
                  }
                }
                int64_t v115 = v116 - 1;
              }
              while (v116);
              int64_t v184 = v10 / 0xB0uLL;
              do
              {
                unint64_t v186 = a2;
                long long v187 = *(_OWORD *)v8;
                long long v188 = *(_OWORD *)(v8 + 16);
                long long v189 = *(_OWORD *)(v8 + 32);
                char v288 = *(unsigned char *)(v8 + 48);
                long long v286 = v188;
                long long v287 = v189;
                long long v285 = v187;
                sub_3C4EF8((uint64_t)&v289, v8 + 56);
                uint64_t v190 = 0;
                uint64_t v291 = *(void *)(v8 + 168);
                uint64_t v191 = v8;
                do
                {
                  uint64_t v192 = v191;
                  v191 += 176 * v190 + 176;
                  uint64_t v193 = 2 * v190;
                  uint64_t v190 = (2 * v190) | 1;
                  uint64_t v194 = v193 + 2;
                  if (v193 + 2 < v184)
                  {
                    unsigned int v195 = *(_DWORD *)(v191 + 156);
                    unsigned int v196 = *(_DWORD *)(v191 + 332);
                    BOOL v197 = *(void *)(v191 + 16) < *(void *)(v191 + 192);
                    BOOL v5 = v195 == v196;
                    BOOL v198 = v195 > v196;
                    if (!v5) {
                      BOOL v197 = v198;
                    }
                    v191 += 176 * v197;
                    if (v197) {
                      uint64_t v190 = v194;
                    }
                  }
                  long long v199 = *(_OWORD *)v191;
                  long long v200 = *(_OWORD *)(v191 + 16);
                  long long v201 = *(_OWORD *)(v191 + 32);
                  *(unsigned char *)(v192 + 48) = *(unsigned char *)(v191 + 48);
                  *(_OWORD *)(v192 + 16) = v200;
                  *(_OWORD *)(v192 + 32) = v201;
                  *(_OWORD *)uint64_t v192 = v199;
                  if (v192 != v191)
                  {
                    uint64_t v202 = *(void *)(v192 + 64);
                    if ((v202 & 2) != 0)
                    {
                      uint64_t v203 = 0;
                    }
                    else
                    {
                      uint64_t v203 = (void *)(v202 & 0xFFFFFFFFFFFFFFFCLL);
                      if (v202) {
                        uint64_t v203 = (void *)*v203;
                      }
                    }
                    uint64_t v204 = *(void *)(v191 + 64);
                    if ((v204 & 2) != 0)
                    {
                      uint64_t v205 = 0;
                    }
                    else
                    {
                      uint64_t v205 = (void *)(v204 & 0xFFFFFFFFFFFFFFFCLL);
                      if (v204) {
                        uint64_t v205 = (void *)*v205;
                      }
                    }
                    uint64_t v206 = v192 + 56;
                    if (v203 == v205) {
                      sub_11CCFE4(v206, v191 + 56);
                    }
                    else {
                      sub_11CCF6C(v206, v191 + 56);
                    }
                  }
                  *(void *)(v192 + 168) = *(void *)(v191 + 168);
                }
                while (v190 <= (uint64_t)((unint64_t)(v184 - 2) >> 1));
                v207 = (long long *)(a2 - 176);
                a2 -= 176;
                if (v191 == v186 - 176)
                {
                  long long v213 = v285;
                  long long v214 = v286;
                  long long v215 = v287;
                  *(unsigned char *)(v191 + 48) = v288;
                  *(_OWORD *)(v191 + 16) = v214;
                  *(_OWORD *)(v191 + 32) = v215;
                  *(_OWORD *)uint64_t v191 = v213;
                  if ((long long *)v191 != &v285)
                  {
                    uint64_t v216 = *(void *)(v191 + 64);
                    if ((v216 & 2) != 0)
                    {
                      uint64_t v217 = 0;
                    }
                    else
                    {
                      uint64_t v217 = (void *)(v216 & 0xFFFFFFFFFFFFFFFCLL);
                      if (v216) {
                        uint64_t v217 = (void *)*v217;
                      }
                    }
                    if ((v290 & 2) != 0)
                    {
                      v254 = 0;
                    }
                    else
                    {
                      v254 = (void *)(v290 & 0xFFFFFFFFFFFFFFFCLL);
                      if (v290) {
                        v254 = (void *)*v254;
                      }
                    }
                    if (v217 == v254) {
                      sub_11CCFE4(v191 + 56, (uint64_t)&v289);
                    }
                    else {
                      sub_11CCF6C(v191 + 56, (uint64_t)&v289);
                    }
                  }
                  *(void *)(v191 + 168) = v291;
                }
                else
                {
                  long long v208 = *v207;
                  long long v209 = *(_OWORD *)(v186 - 160);
                  long long v210 = *(_OWORD *)(v186 - 144);
                  *(unsigned char *)(v191 + 48) = *(unsigned char *)(v186 - 128);
                  *(_OWORD *)(v191 + 16) = v209;
                  *(_OWORD *)(v191 + 32) = v210;
                  *(_OWORD *)uint64_t v191 = v208;
                  uint64_t v211 = *(void *)(v191 + 64);
                  if ((v211 & 2) != 0)
                  {
                    v212 = 0;
                  }
                  else
                  {
                    v212 = (void *)(v211 & 0xFFFFFFFFFFFFFFFCLL);
                    if (v211) {
                      v212 = (void *)*v212;
                    }
                  }
                  uint64_t v218 = *(void *)(v186 - 112);
                  if ((v218 & 2) != 0)
                  {
                    uint64_t v219 = 0;
                  }
                  else
                  {
                    uint64_t v219 = (void *)(v218 & 0xFFFFFFFFFFFFFFFCLL);
                    if (v218) {
                      uint64_t v219 = (void *)*v219;
                    }
                  }
                  if (v212 == v219) {
                    sub_11CCFE4(v191 + 56, v186 - 120);
                  }
                  else {
                    sub_11CCF6C(v191 + 56, v186 - 120);
                  }
                  *(void *)(v191 + 168) = *(void *)(v186 - 8);
                  long long v220 = v285;
                  long long v221 = v286;
                  long long v222 = v287;
                  *(unsigned char *)(v186 - 128) = v288;
                  *(_OWORD *)(v186 - 160) = v221;
                  *(_OWORD *)(v186 - 144) = v222;
                  long long *v207 = v220;
                  if (v207 != &v285)
                  {
                    uint64_t v223 = *(void *)(v186 - 112);
                    if ((v223 & 2) != 0)
                    {
                      v224 = 0;
                    }
                    else
                    {
                      v224 = (void *)(v223 & 0xFFFFFFFFFFFFFFFCLL);
                      if (v223) {
                        v224 = (void *)*v224;
                      }
                    }
                    if ((v290 & 2) != 0)
                    {
                      v225 = 0;
                    }
                    else
                    {
                      v225 = (void *)(v290 & 0xFFFFFFFFFFFFFFFCLL);
                      if (v290) {
                        v225 = (void *)*v225;
                      }
                    }
                    if (v224 == v225) {
                      sub_11CCFE4(v186 - 120, (uint64_t)&v289);
                    }
                    else {
                      sub_11CCF6C(v186 - 120, (uint64_t)&v289);
                    }
                  }
                  *(void *)(v186 - 8) = v291;
                  uint64_t v226 = v191 + 176 - v8;
                  if (v226 >= 177)
                  {
                    unint64_t v227 = (v226 / 0xB0uLL - 2) >> 1;
                    unint64_t v228 = v8 + 176 * v227;
                    unsigned int v229 = *(_DWORD *)(v228 + 156);
                    unsigned int v230 = *(_DWORD *)(v191 + 156);
                    BOOL v231 = *(void *)(v228 + 16) < *(void *)(v191 + 16);
                    BOOL v5 = v229 == v230;
                    BOOL v232 = v229 > v230;
                    if (!v5) {
                      BOOL v231 = v232;
                    }
                    if (v231)
                    {
                      long long v233 = *(_OWORD *)v191;
                      long long v234 = *(_OWORD *)(v191 + 16);
                      long long v235 = *(_OWORD *)(v191 + 32);
                      char v295 = *(unsigned char *)(v191 + 48);
                      long long v293 = v234;
                      long long v294 = v235;
                      long long v292 = v233;
                      sub_3C4EF8((uint64_t)&v296, v191 + 56);
                      uint64_t v299 = *(void *)(v191 + 168);
                      do
                      {
                        unint64_t v236 = v228;
                        long long v237 = *(_OWORD *)v228;
                        long long v238 = *(_OWORD *)(v228 + 16);
                        long long v239 = *(_OWORD *)(v228 + 32);
                        *(unsigned char *)(v191 + 48) = *(unsigned char *)(v228 + 48);
                        *(_OWORD *)(v191 + 16) = v238;
                        *(_OWORD *)(v191 + 32) = v239;
                        *(_OWORD *)uint64_t v191 = v237;
                        uint64_t v240 = v228 + 56;
                        if (v191 != v228)
                        {
                          uint64_t v241 = *(void *)(v191 + 64);
                          if ((v241 & 2) != 0)
                          {
                            v242 = 0;
                          }
                          else
                          {
                            v242 = (void *)(v241 & 0xFFFFFFFFFFFFFFFCLL);
                            if (v241) {
                              v242 = (void *)*v242;
                            }
                          }
                          uint64_t v243 = *(void *)(v228 + 64);
                          if ((v243 & 2) != 0)
                          {
                            v244 = 0;
                          }
                          else
                          {
                            v244 = (void *)(v243 & 0xFFFFFFFFFFFFFFFCLL);
                            if (v243) {
                              v244 = (void *)*v244;
                            }
                          }
                          uint64_t v245 = v191 + 56;
                          if (v242 == v244) {
                            sub_11CCFE4(v245, v228 + 56);
                          }
                          else {
                            sub_11CCF6C(v245, v228 + 56);
                          }
                        }
                        *(void *)(v191 + 168) = *(void *)(v228 + 168);
                        if (!v227) {
                          break;
                        }
                        unint64_t v227 = (v227 - 1) >> 1;
                        unint64_t v228 = v8 + 176 * v227;
                        unsigned int v246 = *(_DWORD *)(v228 + 156);
                        BOOL v247 = *(void *)(v228 + 16) < (unint64_t)v293;
                        BOOL v5 = v246 == v298;
                        BOOL v248 = v246 > v298;
                        if (!v5) {
                          BOOL v247 = v248;
                        }
                        uint64_t v191 = v236;
                      }
                      while (v247);
                      long long v249 = v292;
                      long long v250 = v293;
                      long long v251 = v294;
                      *(unsigned char *)(v236 + 48) = v295;
                      *(_OWORD *)(v236 + 16) = v250;
                      *(_OWORD *)(v236 + 32) = v251;
                      *(_OWORD *)unint64_t v236 = v249;
                      if ((long long *)v236 != &v292)
                      {
                        uint64_t v252 = *(void *)(v236 + 64);
                        if ((v252 & 2) != 0)
                        {
                          v253 = 0;
                        }
                        else
                        {
                          v253 = (void *)(v252 & 0xFFFFFFFFFFFFFFFCLL);
                          if (v252) {
                            v253 = (void *)*v253;
                          }
                        }
                        if ((v297 & 2) != 0)
                        {
                          v255 = 0;
                        }
                        else
                        {
                          v255 = (void *)(v297 & 0xFFFFFFFFFFFFFFFCLL);
                          if (v297) {
                            v255 = (void *)*v255;
                          }
                        }
                        if (v253 == v255) {
                          sub_11CCFE4(v240, (uint64_t)&v296);
                        }
                        else {
                          sub_11CCF6C(v240, (uint64_t)&v296);
                        }
                      }
                      *(void *)(v236 + 168) = v299;
                      sub_11CBC74(&v296);
                    }
                  }
                }
                uint64_t result = sub_11CBC74(&v289);
              }
              while (v184-- > 2);
            }
            return result;
          }
          uint64_t v12 = (long long *)(v8 + 176 * (v11 >> 1));
          if ((unint64_t)v10 >= 0x5801)
          {
            sub_3C68A8(v8, v8 + 176 * (v11 >> 1), (uint64_t)v283);
            uint64_t v13 = 176 * (v11 >> 1);
            sub_3C68A8(v8 + 176, v13 + v8 - 176, a2 - 352);
            sub_3C68A8(v8 + 352, v8 + 176 + v13, a2 - 528);
            sub_3C68A8(v13 + v8 - 176, (uint64_t)v12, v8 + 176 + v13);
            sub_3C6D3C((long long *)v8, v12);
            --a3;
            if (a4) {
              break;
            }
          }
          else
          {
            sub_3C68A8(v8 + 176 * (v11 >> 1), v8, (uint64_t)v283);
            --a3;
            if (a4) {
              break;
            }
          }
          unsigned int v14 = *(_DWORD *)(v8 - 20);
          unsigned int v15 = *(_DWORD *)(v8 + 156);
          BOOL v16 = *(void *)(v8 - 160) < *(void *)(v8 + 16);
          BOOL v5 = v14 == v15;
          BOOL v17 = v14 > v15;
          if (!v5) {
            BOOL v16 = v17;
          }
          if (v16) {
            break;
          }
          long long v62 = *(_OWORD *)v8;
          long long v63 = *(_OWORD *)(v8 + 16);
          long long v64 = *(_OWORD *)(v8 + 32);
          char v295 = *(unsigned char *)(v8 + 48);
          long long v293 = v63;
          long long v294 = v64;
          long long v292 = v62;
          sub_3C4EF8((uint64_t)&v296, v8 + 56);
          uint64_t v299 = *(void *)(v8 + 168);
          unsigned int v65 = *(_DWORD *)(a2 - 20);
          BOOL v66 = (unint64_t)v293 < *(void *)(a2 - 160);
          BOOL v5 = v298 == v65;
          BOOL v67 = v298 > v65;
          if (!v5) {
            BOOL v66 = v67;
          }
          if (v66)
          {
            unint64_t v68 = v8;
            do
            {
              unint64_t v9 = v68 + 176;
              unint64_t v69 = *(void *)(v68 + 192);
              unsigned int v70 = *(_DWORD *)(v68 + 332);
              BOOL v71 = (unint64_t)v293 < v69;
              BOOL v5 = v298 == v70;
              BOOL v72 = v298 > v70;
              if (!v5) {
                BOOL v71 = v72;
              }
              unint64_t v68 = v9;
            }
            while (!v71);
          }
          else
          {
            unint64_t v73 = v8 + 176;
            do
            {
              unint64_t v9 = v73;
              if (v73 >= a2) {
                break;
              }
              unsigned int v74 = *(_DWORD *)(v73 + 156);
              BOOL v75 = (unint64_t)v293 < *(void *)(v73 + 16);
              BOOL v5 = v298 == v74;
              BOOL v76 = v298 > v74;
              if (v5) {
                BOOL v76 = v75;
              }
              unint64_t v73 = v9 + 176;
            }
            while (!v76);
          }
          char v77 = (long long *)a2;
          if (v9 < a2)
          {
            unint64_t v78 = a2;
            do
            {
              char v77 = (long long *)(v78 - 176);
              unint64_t v79 = *(void *)(v78 - 160);
              unsigned int v80 = *(_DWORD *)(v78 - 20);
              BOOL v81 = (unint64_t)v293 < v79;
              BOOL v5 = v298 == v80;
              BOOL v82 = v298 > v80;
              if (!v5) {
                BOOL v81 = v82;
              }
              unint64_t v78 = (unint64_t)v77;
            }
            while (v81);
          }
          while (v9 < (unint64_t)v77)
          {
            sub_3C6D3C((long long *)v9, v77);
            do
            {
              unint64_t v83 = *(void *)(v9 + 192);
              unsigned int v84 = *(_DWORD *)(v9 + 332);
              v9 += 176;
              BOOL v85 = (unint64_t)v293 < v83;
              BOOL v5 = v298 == v84;
              BOOL v86 = v298 > v84;
              if (!v5) {
                BOOL v85 = v86;
              }
            }
            while (!v85);
            do
            {
              unint64_t v87 = *((void *)v77 - 20);
              unsigned int v88 = *((_DWORD *)v77 - 5);
              v77 -= 11;
              BOOL v89 = (unint64_t)v293 < v87;
              BOOL v5 = v298 == v88;
              BOOL v90 = v298 > v88;
              if (!v5) {
                BOOL v89 = v90;
              }
            }
            while (v89);
          }
          int v91 = (long long *)(v9 - 176);
          if (v9 - 176 != v8)
          {
            long long v92 = *v91;
            long long v93 = *(_OWORD *)(v9 - 160);
            long long v94 = *(_OWORD *)(v9 - 144);
            *(unsigned char *)(v8 + 48) = *(unsigned char *)(v9 - 128);
            *(_OWORD *)(v8 + 16) = v93;
            *(_OWORD *)(v8 + 32) = v94;
            *(_OWORD *)uint64_t v8 = v92;
            uint64_t v95 = *(void *)(v8 + 64);
            if ((v95 & 2) != 0)
            {
              uint64_t v96 = 0;
            }
            else
            {
              uint64_t v96 = (void *)(v95 & 0xFFFFFFFFFFFFFFFCLL);
              if (v95) {
                uint64_t v96 = (void *)*v96;
              }
            }
            uint64_t v97 = *(void *)(v9 - 112);
            if ((v97 & 2) != 0)
            {
              uint64_t v98 = 0;
            }
            else
            {
              uint64_t v98 = (void *)(v97 & 0xFFFFFFFFFFFFFFFCLL);
              if (v97) {
                uint64_t v98 = (void *)*v98;
              }
            }
            uint64_t v99 = v9 - 120;
            if (v96 == v98) {
              sub_11CCFE4(v8 + 56, v99);
            }
            else {
              sub_11CCF6C(v8 + 56, v99);
            }
            *(void *)(v8 + 168) = *(void *)(v9 - 8);
          }
          long long v100 = v292;
          long long v101 = v293;
          long long v102 = v294;
          *(unsigned char *)(v9 - 128) = v295;
          *(_OWORD *)(v9 - 160) = v101;
          *(_OWORD *)(v9 - 144) = v102;
          *int v91 = v100;
          if (v91 != &v292)
          {
            uint64_t v103 = *(void *)(v9 - 112);
            if ((v103 & 2) != 0)
            {
              unsigned int v104 = 0;
            }
            else
            {
              unsigned int v104 = (void *)(v103 & 0xFFFFFFFFFFFFFFFCLL);
              if (v103) {
                unsigned int v104 = (void *)*v104;
              }
            }
            if ((v297 & 2) != 0)
            {
              uint64_t v105 = 0;
            }
            else
            {
              uint64_t v105 = (void *)(v297 & 0xFFFFFFFFFFFFFFFCLL);
              if (v297) {
                uint64_t v105 = (void *)*v105;
              }
            }
            uint64_t v106 = v9 - 120;
            if (v104 == v105) {
              sub_11CCFE4(v106, (uint64_t)&v296);
            }
            else {
              sub_11CCF6C(v106, (uint64_t)&v296);
            }
          }
          *(void *)(v9 - 8) = v299;
          uint64_t result = sub_11CBC74(&v296);
          a4 = 0;
        }
        long long v18 = *(_OWORD *)v8;
        long long v19 = *(_OWORD *)(v8 + 16);
        long long v20 = *(_OWORD *)(v8 + 32);
        char v295 = *(unsigned char *)(v8 + 48);
        long long v293 = v19;
        long long v294 = v20;
        long long v292 = v18;
        sub_3C4EF8((uint64_t)&v296, v8 + 56);
        uint64_t v21 = 0;
        uint64_t v299 = *(void *)(v8 + 168);
        do
        {
          unsigned int v22 = *(_DWORD *)(v8 + v21 + 332);
          BOOL v5 = v22 == v298;
          BOOL v23 = v22 > v298;
          if (v5) {
            BOOL v23 = *(void *)(v8 + v21 + 192) < (unint64_t)v293;
          }
          v21 += 176;
        }
        while (v23);
        unint64_t v24 = v8 + v21;
        unint64_t v25 = a2;
        if (v21 == 176)
        {
          unint64_t v31 = a2;
          while (v24 < v31)
          {
            uint64_t v26 = (long long *)(v31 - 176);
            unint64_t v32 = *(void *)(v31 - 160);
            unsigned int v33 = *(_DWORD *)(v31 - 20);
            BOOL v34 = v32 < (unint64_t)v293;
            BOOL v5 = v33 == v298;
            BOOL v35 = v33 > v298;
            if (!v5) {
              BOOL v34 = v35;
            }
            unint64_t v31 = (unint64_t)v26;
            if (v34) {
              goto LABEL_29;
            }
          }
          uint64_t v26 = (long long *)v31;
          unint64_t v9 = v24;
        }
        else
        {
          do
          {
            uint64_t v26 = (long long *)(v25 - 176);
            unint64_t v27 = *(void *)(v25 - 160);
            unsigned int v28 = *(_DWORD *)(v25 - 20);
            BOOL v29 = v27 < (unint64_t)v293;
            BOOL v5 = v28 == v298;
            BOOL v30 = v28 > v298;
            if (!v5) {
              BOOL v29 = v30;
            }
            unint64_t v25 = (unint64_t)v26;
          }
          while (!v29);
LABEL_29:
          unint64_t v9 = v24;
          if (v24 < (unint64_t)v26)
          {
            double v36 = v26;
            do
            {
              sub_3C6D3C((long long *)v9, v36);
              do
              {
                unint64_t v37 = *(void *)(v9 + 192);
                unsigned int v38 = *(_DWORD *)(v9 + 332);
                v9 += 176;
                BOOL v39 = v37 < (unint64_t)v293;
                BOOL v5 = v38 == v298;
                BOOL v40 = v38 > v298;
                if (!v5) {
                  BOOL v39 = v40;
                }
              }
              while (v39);
              do
              {
                unint64_t v41 = *((void *)v36 - 20);
                unsigned int v42 = *((_DWORD *)v36 - 5);
                v36 -= 11;
                BOOL v43 = v41 < (unint64_t)v293;
                BOOL v5 = v42 == v298;
                BOOL v44 = v42 > v298;
                if (!v5) {
                  BOOL v43 = v44;
                }
              }
              while (!v43);
            }
            while (v9 < (unint64_t)v36);
          }
        }
        uint64_t v45 = (long long *)(v9 - 176);
        if (v9 - 176 != v8)
        {
          long long v46 = *v45;
          long long v47 = *(_OWORD *)(v9 - 160);
          long long v48 = *(_OWORD *)(v9 - 144);
          *(unsigned char *)(v8 + 48) = *(unsigned char *)(v9 - 128);
          *(_OWORD *)(v8 + 16) = v47;
          *(_OWORD *)(v8 + 32) = v48;
          *(_OWORD *)uint64_t v8 = v46;
          uint64_t v49 = *(void *)(v8 + 64);
          if ((v49 & 2) != 0)
          {
            uint64_t v50 = 0;
          }
          else
          {
            uint64_t v50 = (void *)(v49 & 0xFFFFFFFFFFFFFFFCLL);
            if (v49) {
              uint64_t v50 = (void *)*v50;
            }
          }
          uint64_t v51 = *(void *)(v9 - 112);
          if ((v51 & 2) != 0)
          {
            char v52 = 0;
          }
          else
          {
            char v52 = (void *)(v51 & 0xFFFFFFFFFFFFFFFCLL);
            if (v51) {
              char v52 = (void *)*v52;
            }
          }
          uint64_t v53 = v9 - 120;
          if (v50 == v52) {
            sub_11CCFE4(v8 + 56, v53);
          }
          else {
            sub_11CCF6C(v8 + 56, v53);
          }
          *(void *)(v8 + 168) = *(void *)(v9 - 8);
        }
        long long v54 = v292;
        long long v55 = v293;
        long long v56 = v294;
        *(unsigned char *)(v9 - 128) = v295;
        *(_OWORD *)(v9 - 160) = v55;
        *(_OWORD *)(v9 - 144) = v56;
        *uint64_t v45 = v54;
        if (v45 != &v292)
        {
          uint64_t v57 = *(void *)(v9 - 112);
          if ((v57 & 2) != 0)
          {
            unint64_t v58 = 0;
          }
          else
          {
            unint64_t v58 = (void *)(v57 & 0xFFFFFFFFFFFFFFFCLL);
            if (v57) {
              unint64_t v58 = (void *)*v58;
            }
          }
          if ((v297 & 2) != 0)
          {
            uint64_t v59 = 0;
          }
          else
          {
            uint64_t v59 = (void *)(v297 & 0xFFFFFFFFFFFFFFFCLL);
            if (v297) {
              uint64_t v59 = (void *)*v59;
            }
          }
          uint64_t v60 = v9 - 120;
          if (v58 == v59) {
            sub_11CCFE4(v60, (uint64_t)&v296);
          }
          else {
            sub_11CCF6C(v60, (uint64_t)&v296);
          }
        }
        *(void *)(v9 - 8) = v299;
        sub_11CBC74(&v296);
        if (v24 >= (unint64_t)v26) {
          break;
        }
LABEL_67:
        uint64_t result = sub_3C545C(v8, v9 - 176, a3, a4 & 1);
        a4 = 0;
      }
      char v61 = sub_3C69E4(v8, v9 - 176);
      uint64_t result = sub_3C69E4(v9, a2);
      if (result) {
        break;
      }
      if ((v61 & 1) == 0) {
        goto LABEL_67;
      }
    }
    a2 = v9 - 176;
    if ((v61 & 1) == 0) {
      continue;
    }
    return result;
  }
}

uint64_t sub_3C6764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_3C6ECC(a1, a2, a3, a4);
  unsigned int v11 = *(_DWORD *)(a5 + 156);
  unsigned int v12 = *(_DWORD *)(a4 + 156);
  BOOL v13 = *(void *)(a5 + 16) < *(void *)(a4 + 16);
  BOOL v14 = v11 == v12;
  BOOL v15 = v11 > v12;
  if (!v14) {
    BOOL v13 = v15;
  }
  if (v13)
  {
    uint64_t result = sub_3C6D3C((long long *)a4, (long long *)a5);
    unsigned int v16 = *(_DWORD *)(a4 + 156);
    unsigned int v17 = *(_DWORD *)(a3 + 156);
    BOOL v18 = *(void *)(a4 + 16) < *(void *)(a3 + 16);
    BOOL v14 = v16 == v17;
    BOOL v19 = v16 > v17;
    if (!v14) {
      BOOL v18 = v19;
    }
    if (v18)
    {
      uint64_t result = sub_3C6D3C((long long *)a3, (long long *)a4);
      unsigned int v20 = *(_DWORD *)(a3 + 156);
      unsigned int v21 = *(_DWORD *)(a2 + 156);
      BOOL v22 = *(void *)(a3 + 16) < *(void *)(a2 + 16);
      BOOL v14 = v20 == v21;
      BOOL v23 = v20 > v21;
      if (!v14) {
        BOOL v22 = v23;
      }
      if (v22)
      {
        uint64_t result = sub_3C6D3C((long long *)a2, (long long *)a3);
        unsigned int v24 = *(_DWORD *)(a2 + 156);
        unsigned int v25 = *(_DWORD *)(a1 + 156);
        BOOL v26 = *(void *)(a2 + 16) < *(void *)(a1 + 16);
        BOOL v14 = v24 == v25;
        BOOL v27 = v24 > v25;
        if (!v14) {
          BOOL v26 = v27;
        }
        if (v26)
        {
          return sub_3C6D3C((long long *)a1, (long long *)a2);
        }
      }
    }
  }
  return result;
}

uint64_t sub_3C68A8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(a2 + 16);
  unsigned int v7 = *(_DWORD *)(a2 + 156);
  unsigned int v8 = *(_DWORD *)(result + 156);
  BOOL v9 = v6 < *(void *)(result + 16);
  BOOL v10 = v7 == v8;
  BOOL v11 = v7 > v8;
  if (!v10) {
    BOOL v9 = v11;
  }
  unsigned int v12 = *(_DWORD *)(a3 + 156);
  BOOL v13 = *(void *)(a3 + 16) < v6;
  BOOL v10 = v12 == v7;
  BOOL v14 = v12 > v7;
  if (!v10) {
    BOOL v13 = v14;
  }
  if (v9)
  {
    if (v13) {
      goto LABEL_11;
    }
    uint64_t result = sub_3C6D3C((long long *)result, (long long *)a2);
    unsigned int v15 = *(_DWORD *)(a3 + 156);
    unsigned int v16 = *(_DWORD *)(a2 + 156);
    BOOL v17 = *(void *)(a3 + 16) < *(void *)(a2 + 16);
    BOOL v10 = v15 == v16;
    BOOL v18 = v15 > v16;
    if (!v10) {
      BOOL v17 = v18;
    }
    if (v17)
    {
      uint64_t result = a2;
LABEL_11:
      BOOL v19 = (long long *)a3;
      return sub_3C6D3C((long long *)result, v19);
    }
  }
  else if (v13)
  {
    uint64_t result = sub_3C6D3C((long long *)a2, (long long *)a3);
    unsigned int v20 = *(_DWORD *)(a2 + 156);
    unsigned int v21 = *(_DWORD *)(v5 + 156);
    BOOL v22 = *(void *)(a2 + 16) < *(void *)(v5 + 16);
    BOOL v10 = v20 == v21;
    BOOL v23 = v20 > v21;
    if (!v10) {
      BOOL v22 = v23;
    }
    if (v22)
    {
      uint64_t result = v5;
      BOOL v19 = (long long *)a2;
      return sub_3C6D3C((long long *)result, v19);
    }
  }
  return result;
}

uint64_t sub_3C69E4(uint64_t a1, uint64_t a2)
{
  BOOL v4 = 1;
  switch(0x2E8BA2E8BA2E8BA3 * ((a2 - a1) >> 4))
  {
    case 0:
    case 1:
      return v4;
    case 2:
      unsigned int v5 = *(_DWORD *)(a2 - 20);
      unsigned int v6 = *(_DWORD *)(a1 + 156);
      BOOL v7 = *(void *)(a2 - 160) < *(void *)(a1 + 16);
      BOOL v8 = v5 == v6;
      BOOL v9 = v5 > v6;
      if (!v8) {
        BOOL v7 = v9;
      }
      if (v7) {
        sub_3C6D3C((long long *)a1, (long long *)(a2 - 176));
      }
      return v4;
    case 3:
      sub_3C68A8(a1, a1 + 176, a2 - 176);
      return v4;
    case 4:
      sub_3C6ECC(a1, a1 + 176, a1 + 352, a2 - 176);
      return v4;
    case 5:
      sub_3C6764(a1, a1 + 176, a1 + 352, a1 + 528, a2 - 176);
      return v4;
    default:
      uint64_t v10 = a1 + 352;
      sub_3C68A8(a1, a1 + 176, a1 + 352);
      uint64_t v11 = a1 + 528;
      if (a1 + 528 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    unsigned int v14 = *(_DWORD *)(v11 + 156);
    unsigned int v15 = *(_DWORD *)(v10 + 156);
    BOOL v16 = *(void *)(v11 + 16) < *(void *)(v10 + 16);
    BOOL v8 = v14 == v15;
    BOOL v17 = v14 > v15;
    if (!v8) {
      BOOL v16 = v17;
    }
    if (!v16) {
      goto LABEL_8;
    }
    long long v18 = *(_OWORD *)(v11 + 16);
    long long v38 = *(_OWORD *)v11;
    long long v39 = v18;
    long long v40 = *(_OWORD *)(v11 + 32);
    char v41 = *(unsigned char *)(v11 + 48);
    sub_3C4EF8((uint64_t)&v42, v11 + 56);
    uint64_t v45 = *(void *)(v11 + 168);
    uint64_t v19 = v12;
    while (1)
    {
      uint64_t v20 = a1 + v19;
      long long v21 = *(_OWORD *)(a1 + v19 + 368);
      *(_OWORD *)(v20 + 528) = *(_OWORD *)(a1 + v19 + 352);
      *(_OWORD *)(v20 + 544) = v21;
      *(_OWORD *)(v20 + 560) = *(_OWORD *)(a1 + v19 + 384);
      *(unsigned char *)(v20 + 576) = *(unsigned char *)(a1 + v19 + 400);
      uint64_t v22 = *(void *)(a1 + v19 + 592);
      if ((v22 & 2) != 0)
      {
        BOOL v23 = 0;
      }
      else
      {
        BOOL v23 = (void *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
        if (v22) {
          BOOL v23 = (void *)*v23;
        }
      }
      uint64_t v24 = *(void *)(v20 + 416);
      if ((v24 & 2) != 0)
      {
        unsigned int v25 = 0;
      }
      else
      {
        unsigned int v25 = (void *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
        if (v24) {
          unsigned int v25 = (void *)*v25;
        }
      }
      uint64_t v26 = v20 + 584;
      uint64_t v27 = v20 + 408;
      if (v23 == v25) {
        sub_11CCFE4(v26, v27);
      }
      else {
        sub_11CCF6C(v26, v27);
      }
      uint64_t v28 = a1 + v19;
      *(void *)(a1 + v19 + 696) = *(void *)(a1 + v19 + 520);
      if (v19 == -352) {
        break;
      }
      unsigned int v29 = *(_DWORD *)(v28 + 332);
      BOOL v30 = (unint64_t)v39 < *(void *)(v28 + 192);
      if (v44 != v29) {
        BOOL v30 = v44 > v29;
      }
      v19 -= 176;
      if (!v30)
      {
        uint64_t v31 = a1 + v19 + 528;
        goto LABEL_30;
      }
    }
    uint64_t v31 = a1;
LABEL_30:
    long long v32 = v39;
    *(_OWORD *)uint64_t v31 = v38;
    *(_OWORD *)(v31 + 16) = v32;
    *(_OWORD *)(v31 + 32) = v40;
    *(unsigned char *)(v31 + 48) = v41;
    if ((long long *)v31 != &v38)
    {
      uint64_t v33 = *(void *)(v31 + 64);
      if ((v33 & 2) != 0)
      {
        BOOL v34 = 0;
      }
      else
      {
        BOOL v34 = (void *)(v33 & 0xFFFFFFFFFFFFFFFCLL);
        if (v33) {
          BOOL v34 = (void *)*v34;
        }
      }
      if ((v43 & 2) != 0)
      {
        BOOL v35 = 0;
      }
      else
      {
        BOOL v35 = (void *)(v43 & 0xFFFFFFFFFFFFFFFCLL);
        if (v43) {
          BOOL v35 = (void *)*v35;
        }
      }
      uint64_t v36 = v28 + 408;
      if (v34 == v35) {
        sub_11CCFE4(v36, (uint64_t)&v42);
      }
      else {
        sub_11CCF6C(v36, (uint64_t)&v42);
      }
    }
    *(void *)(v31 + 168) = v45;
    if (++v13 == 8) {
      break;
    }
    sub_11CBC74(&v42);
LABEL_8:
    uint64_t v10 = v11;
    v12 += 176;
    v11 += 176;
    if (v11 == a2) {
      return 1;
    }
  }
  BOOL v4 = v11 + 176 == a2;
  sub_11CBC74(&v42);
  return v4;
}

uint64_t sub_3C6D3C(long long *a1, long long *a2)
{
  long long v4 = a1[1];
  long long v18 = *a1;
  long long v19 = v4;
  long long v20 = a1[2];
  char v21 = *((unsigned char *)a1 + 48);
  uint64_t v5 = (uint64_t)a1 + 56;
  sub_3C4EF8((uint64_t)&v22, (uint64_t)a1 + 56);
  uint64_t v24 = *((void *)a1 + 21);
  long long v7 = a2[1];
  long long v6 = a2[2];
  long long v8 = *a2;
  *((unsigned char *)a1 + 48) = *((unsigned char *)a2 + 48);
  a1[1] = v7;
  a1[2] = v6;
  *a1 = v8;
  if (a1 != a2)
  {
    uint64_t v9 = *((void *)a1 + 8);
    if ((v9 & 2) != 0)
    {
      uint64_t v10 = 0;
    }
    else
    {
      uint64_t v10 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
      if (v9) {
        uint64_t v10 = (void *)*v10;
      }
    }
    uint64_t v11 = *((void *)a2 + 8);
    if ((v11 & 2) != 0)
    {
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      if (v11) {
        uint64_t v12 = (void *)*v12;
      }
    }
    if (v10 == v12) {
      sub_11CCFE4(v5, (uint64_t)a2 + 56);
    }
    else {
      sub_11CCF6C(v5, (uint64_t)a2 + 56);
    }
  }
  *((void *)a1 + 21) = *((void *)a2 + 21);
  long long v13 = v19;
  *a2 = v18;
  a2[1] = v13;
  a2[2] = v20;
  *((unsigned char *)a2 + 48) = v21;
  if (&v18 != a2)
  {
    uint64_t v14 = *((void *)a2 + 8);
    if ((v14 & 2) != 0)
    {
      unsigned int v15 = 0;
    }
    else
    {
      unsigned int v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
      if (v14) {
        unsigned int v15 = (void *)*v15;
      }
    }
    if ((v23 & 2) != 0)
    {
      BOOL v16 = 0;
    }
    else
    {
      BOOL v16 = (void *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
      if (v23) {
        BOOL v16 = (void *)*v16;
      }
    }
    if (v15 == v16) {
      sub_11CCFE4((uint64_t)a2 + 56, (uint64_t)&v22);
    }
    else {
      sub_11CCF6C((uint64_t)a2 + 56, (uint64_t)&v22);
    }
  }
  *((void *)a2 + 21) = v24;
  return sub_11CBC74(&v22);
}

uint64_t sub_3C6ECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_3C68A8(a1, a2, a3);
  unsigned int v9 = *(_DWORD *)(a4 + 156);
  unsigned int v10 = *(_DWORD *)(a3 + 156);
  BOOL v11 = *(void *)(a4 + 16) < *(void *)(a3 + 16);
  BOOL v12 = v9 == v10;
  BOOL v13 = v9 > v10;
  if (!v12) {
    BOOL v11 = v13;
  }
  if (v11)
  {
    uint64_t result = sub_3C6D3C((long long *)a3, (long long *)a4);
    unsigned int v14 = *(_DWORD *)(a3 + 156);
    unsigned int v15 = *(_DWORD *)(a2 + 156);
    BOOL v16 = *(void *)(a3 + 16) < *(void *)(a2 + 16);
    BOOL v12 = v14 == v15;
    BOOL v17 = v14 > v15;
    if (!v12) {
      BOOL v16 = v17;
    }
    if (v16)
    {
      uint64_t result = sub_3C6D3C((long long *)a2, (long long *)a3);
      unsigned int v18 = *(_DWORD *)(a2 + 156);
      unsigned int v19 = *(_DWORD *)(a1 + 156);
      BOOL v20 = *(void *)(a2 + 16) < *(void *)(a1 + 16);
      BOOL v12 = v18 == v19;
      BOOL v21 = v18 > v19;
      if (!v12) {
        BOOL v20 = v21;
      }
      if (v20)
      {
        return sub_3C6D3C((long long *)a1, (long long *)a2);
      }
    }
  }
  return result;
}

void sub_3C6FC8()
{
  byte_2557AD7 = 1;
  word_2557AC0 = 65;
  byte_2557AEF = 1;
  word_2557AD8 = 65;
  char v1 = 7;
  strcpy((char *)v0, "UNKNOWN");
  int v2 = 0;
  char v4 = 14;
  strcpy((char *)v3, "ROUTES_THROUGH");
  int v5 = 1;
  char v7 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v8 = 3;
  char v10 = 11;
  strcpy((char *)v9, "ROUTES_FROM");
  int v11 = 2;
  xmmword_2557B50 = 0u;
  *(_OWORD *)&qword_2557B60 = 0u;
  dword_2557B70 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2557B50, (uint64_t)v0, (uint64_t)v0);
  sub_3A6EF0((uint64_t)&xmmword_2557B50, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_2557B50, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_2557B50, (uint64_t)v9, (uint64_t)v9);
  if (v10 < 0)
  {
    operator delete(v9[0]);
    if ((v7 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v3[0]);
      if ((v1 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v0[0]);
      goto LABEL_5;
    }
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v4 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v1 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_2557B07 = 8;
  strcpy((char *)&qword_2557AF0, "any_mode");
  byte_2557B1F = 7;
  strcpy((char *)&dword_2557B08, "cycling");
  byte_2557B37 = 7;
  strcpy((char *)&dword_2557B20, "driving");
  byte_2557B4F = 7;
  strcpy((char *)&dword_2557B38, "walking");
}

void sub_3C7224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_2557B60) {
    sub_20A7EC0((void **)qword_2557B60);
  }
  unint64_t v37 = (void *)xmmword_2557B50;
  *(void *)&xmmword_2557B50 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

_DWORD *sub_3C72C4(_DWORD *a1, int a2, uint64_t a3)
{
  *a1 = a2;
  sub_54214((uint64_t)(a1 + 2), a3);
  return a1;
}

void sub_3C72F4(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  long long v30 = 0uLL;
  uint64_t v31 = 0;
  sub_3B168C((uint64_t)&v30, *(void *)a3, *(void *)(a3 + 8), 0xF83E0F83E0F83E1 * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5));
  long long v33 = *(_OWORD *)(a3 + 40);
  long long v34 = *(_OWORD *)(a3 + 56);
  *(_OWORD *)BOOL v35 = *(_OWORD *)(a3 + 72);
  *(void *)&v35[13] = *(void *)(a3 + 85);
  long long v32 = *(_OWORD *)(a3 + 24);
  if (*(char *)(a3 + 119) < 0)
  {
    sub_4200(&v36, *(void **)(a3 + 96), *(void *)(a3 + 104));
  }
  else
  {
    long long v36 = *(_OWORD *)(a3 + 96);
    uint64_t v37 = *(void *)(a3 + 112);
  }
  sub_3729D0(a2, (uint64_t)(a1 + 2), (uint64_t)v29);
  sub_1083110((uint64_t)v24, v29);
  sub_1083870((uint64_t)v24, (uint64_t *)&v30);
  if (__p)
  {
    uint64_t v26 = __p;
    operator delete(__p);
  }
  int v8 = (int *)sub_37B3A8((uint64_t)v29);
  sub_EEC080((uint64_t)v24, v29);
  sub_EEE344((uint64_t)v24, (uint64_t)&v30, v8, v8[2], (uint64_t)&v27);
  sub_3C7848(v24);
  unsigned int v9 = (void *)nullsub_1(&v30);
  uint64_t v10 = v9[1] - *v9;
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = v10 / 1056;
    do
    {
      unsigned int v14 = (char *)v27;
      uint64_t v15 = sub_45FB28(&v30, v12);
      sub_3C7658(v15 + 512, (uint64_t *)&v14[v11]);
      ++v12;
      v11 += 288;
    }
    while (v13 != v12);
  }
  *(_DWORD *)a4 = *a1;
  *(_OWORD *)(a4 + 8) = v30;
  *(void *)(a4 + 24) = v31;
  long long v30 = 0uLL;
  uint64_t v31 = 0;
  long long v16 = *(_OWORD *)v35;
  *(_OWORD *)(a4 + 64) = v34;
  *(_OWORD *)(a4 + 80) = v16;
  *(void *)(a4 + 93) = *(void *)&v35[13];
  long long v17 = v33;
  *(_OWORD *)(a4 + 32) = v32;
  *(_OWORD *)(a4 + 48) = v17;
  *(void *)(a4 + 120) = v37;
  *(_OWORD *)(a4 + 104) = v36;
  uint64_t v37 = 0;
  long long v36 = 0uLL;
  unsigned int v18 = v27;
  if (v27)
  {
    unsigned int v19 = v28;
    BOOL v20 = v27;
    if (v28 != v27)
    {
      do
        unsigned int v19 = sub_3B0290(v19 - 36);
      while (v19 != v18);
      BOOL v20 = v27;
    }
    uint64_t v28 = v18;
    operator delete(v20);
  }
  sub_373C88(v29);
  if (SHIBYTE(v37) < 0) {
    operator delete((void *)v36);
  }
  uint64_t v21 = v30;
  if ((void)v30)
  {
    uint64_t v22 = *((void *)&v30 + 1);
    uint64_t v23 = (void *)v30;
    if (*((void *)&v30 + 1) != (void)v30)
    {
      do
        uint64_t v22 = sub_3AFFFC(v22 - 1056);
      while (v22 != v21);
      uint64_t v23 = (void *)v30;
    }
    *((void *)&v30 + 1) = v21;
    operator delete(v23);
  }
}

void sub_3C758C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 208);
  if (v3) {
    sub_20A7F04(v1 - 208, v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_3C75A8(_Unwind_Exception *a1)
{
  sub_3C7768((void **)&STACK[0x650]);
  sub_373C88(&STACK[0x668]);
  sub_3C77C4(v1 - 208);
  _Unwind_Resume(a1);
}

uint64_t sub_3C7658(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v4;
  if ((uint64_t *)a1 != a2)
  {
    sub_147D0((void *)(a1 + 16), (char *)a2[2], (char *)a2[3], (a2[3] - a2[2]) >> 2);
    sub_147D0((void *)(a1 + 40), (char *)a2[5], (char *)a2[6], (a2[6] - a2[5]) >> 2);
    sub_147D0((void *)(a1 + 64), (char *)a2[8], (char *)a2[9], (a2[9] - a2[8]) >> 2);
    sub_147D0((void *)(a1 + 88), (char *)a2[11], (char *)a2[12], (a2[12] - a2[11]) >> 2);
    sub_147D0((void *)(a1 + 112), (char *)a2[14], (char *)a2[15], (a2[15] - a2[14]) >> 2);
    sub_147D0((void *)(a1 + 136), (char *)a2[17], (char *)a2[18], (a2[18] - a2[17]) >> 2);
    sub_147D0((void *)(a1 + 160), (char *)a2[20], (char *)a2[21], (a2[21] - a2[20]) >> 2);
    sub_147D0((void *)(a1 + 184), (char *)a2[23], (char *)a2[24], (a2[24] - a2[23]) >> 2);
    sub_147D0((void *)(a1 + 208), (char *)a2[26], (char *)a2[27], (a2[27] - a2[26]) >> 2);
    sub_147D0((void *)(a1 + 232), (char *)a2[29], (char *)a2[30], (a2[30] - a2[29]) >> 2);
  }
  long long v5 = *((_OWORD *)a2 + 17);
  *(_OWORD *)(a1 + 256) = *((_OWORD *)a2 + 16);
  *(_OWORD *)(a1 + 272) = v5;
  return a1;
}

void **sub_3C7768(void **a1)
{
  int v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        uint64_t v3 = sub_3B0290(v3 - 36);
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_3C77C4(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    int v2 = *(void **)a1;
    if (!*(void *)a1) {
      return a1;
    }
  }
  else
  {
    int v2 = *(void **)a1;
    if (!*(void *)a1) {
      return a1;
    }
  }
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = v2;
  if ((void *)v4 != v2)
  {
    do
      uint64_t v4 = sub_3AFFFC(v4 - 1056);
    while ((void *)v4 != v2);
    long long v5 = *(void **)a1;
  }
  *(void *)(a1 + 8) = v2;
  operator delete(v5);
  return a1;
}

void *sub_3C7848(void *a1)
{
  uint64_t v2 = a1[186];
  if (v2)
  {
    uint64_t v3 = a1[187];
    uint64_t v4 = (void *)a1[186];
    if (v3 != v2)
    {
      do
      {
        long long v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(void *)(v3 - 16) = v5;
          operator delete(v5);
        }
        if (*(char *)(v3 - 25) < 0) {
          operator delete(*(void **)(v3 - 48));
        }
        v3 -= 48;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[186];
    }
    a1[187] = v2;
    operator delete(v4);
  }
  sub_4814((uint64_t)(a1 + 175));
  long long v6 = (void *)a1[141];
  if (v6)
  {
    a1[142] = v6;
    operator delete(v6);
  }
  char v7 = (void *)a1[135];
  if (v7)
  {
    a1[136] = v7;
    operator delete(v7);
  }

  return sub_3C7904(a1);
}

void *sub_3C7904(void *a1)
{
  uint64_t v2 = (void *)a1[126];
  if (v2)
  {
    a1[127] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[123];
  if (v3)
  {
    a1[124] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[120];
  if (v4)
  {
    a1[121] = v4;
    operator delete(v4);
  }
  long long v5 = (void *)a1[111];
  if (v5)
  {
    a1[112] = v5;
    operator delete(v5);
  }
  long long v6 = (void *)a1[108];
  if (v6)
  {
    a1[109] = v6;
    operator delete(v6);
  }
  char v7 = (void *)a1[105];
  if (v7)
  {
    a1[106] = v7;
    operator delete(v7);
  }
  int v8 = (void *)a1[102];
  if (v8)
  {
    a1[103] = v8;
    operator delete(v8);
  }
  uint64_t v9 = a1[95];
  if (v9)
  {
    uint64_t v10 = a1[96];
    uint64_t v11 = (void *)a1[95];
    if (v10 != v9)
    {
      do
      {
        uint64_t v12 = *(void **)(v10 - 24);
        if (v12)
        {
          *(void *)(v10 - 16) = v12;
          operator delete(v12);
        }
        if (*(char *)(v10 - 25) < 0) {
          operator delete(*(void **)(v10 - 48));
        }
        v10 -= 48;
      }
      while (v10 != v9);
      uint64_t v11 = (void *)a1[95];
    }
    a1[96] = v9;
    operator delete(v11);
  }
  sub_4814((uint64_t)(a1 + 84));
  uint64_t v13 = (void *)a1[50];
  if (v13)
  {
    a1[51] = v13;
    operator delete(v13);
  }
  unsigned int v14 = (void *)a1[44];
  if (v14)
  {
    a1[45] = v14;
    operator delete(v14);
  }
  sub_3C7A68((uint64_t)(a1 + 32));
  uint64_t v15 = (void *)a1[29];
  if (v15)
  {
    a1[30] = v15;
    operator delete(v15);
  }
  long long v16 = (void *)a1[26];
  if (v16)
  {
    a1[27] = v16;
    operator delete(v16);
  }
  long long v17 = (void *)a1[23];
  if (v17)
  {
    a1[24] = v17;
    operator delete(v17);
  }
  unsigned int v18 = (void *)a1[20];
  if (v18)
  {
    a1[21] = v18;
    operator delete(v18);
  }
  return a1;
}

uint64_t sub_3C7A68(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 512;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      char v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_3C7B30()
{
  unk_2557B8F = 16641;
  word_2557B78 = 65;
  byte_2557BA7 = 1;
  byte_2557B91 = 0;
  byte_2557BBF = 3;
  dword_2557BA8 = 7105633;
}

uint64_t sub_3C7B6C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v3 = (char **)(a1 + 40);
  unint64_t v4 = (uint64_t *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  HIBYTE(v26[2]) = 21;
  strcpy((char *)v26, "StackedETAExperiments");
  std::string __p = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  unint64_t v5 = sub_374CDC(a2, (uint64_t)v26, (uint64_t *)&__p);
  char v22 = 11;
  strcpy((char *)v21, "experiments");
  uint64_t v6 = sub_5C4AC(v5, (uint64_t)v21);
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  char v7 = (void **)__p;
  if (__p)
  {
    uint64_t v8 = v24;
    uint64_t v9 = __p;
    if (v24 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      uint64_t v9 = __p;
    }
    uint64_t v24 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v26[2]) < 0) {
    operator delete(v26[0]);
  }
  LODWORD(v26[0]) = 0;
  uint64_t v10 = *(_DWORD **)v6;
  uint64_t v11 = *(_DWORD **)(v6 + 8);
  while (v10 != v11)
  {
    if (v10[2] != 2)
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    uint64_t v13 = *(void *)(*(void *)v10 + 16);
    if (*(_DWORD *)(v13 + 48) != 2)
    {
      unsigned int v19 = __cxa_allocate_exception(8uLL);
      *unsigned int v19 = &off_23FDF58;
    }
    uint64_t v14 = *(void *)(v13 + 40);
    sub_3C8100(a1, v13 + 16, v13 + 16, v26);
    unint64_t v15 = *(void *)(a1 + 48);
    if (v15 >= *(void *)(a1 + 56))
    {
      *(void *)(a1 + 48) = sub_6E6EC(v3, v13 + 16);
      long long v17 = *(_DWORD **)(a1 + 72);
      if ((unint64_t)v17 >= *(void *)(a1 + 80)) {
        goto LABEL_14;
      }
    }
    else
    {
      if (*(char *)(v13 + 39) < 0)
      {
        sub_4200(*(unsigned char **)(a1 + 48), *(void **)(v13 + 16), *(void *)(v13 + 24));
      }
      else
      {
        long long v16 = *(_OWORD *)(v13 + 16);
        *(void *)(v15 + 16) = *(void *)(v13 + 32);
        *(_OWORD *)unint64_t v15 = v16;
      }
      *(void *)(a1 + 48) = v15 + 24;
      *(void *)(a1 + 48) = v15 + 24;
      long long v17 = *(_DWORD **)(a1 + 72);
      if ((unint64_t)v17 >= *(void *)(a1 + 80))
      {
LABEL_14:
        uint64_t v12 = sub_3C8578(v4, (int *)v26, v14);
        goto LABEL_15;
      }
    }
    sub_3C72C4(v17, (int)v26[0], v14);
    uint64_t v12 = (uint64_t)(v17 + 12);
    *(void *)(a1 + 72) = v17 + 12;
LABEL_15:
    *(void *)(a1 + 72) = v12;
    ++LODWORD(v26[0]);
    v10 += 4;
  }
  return a1;
}

void sub_3C7E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1A668(&a15);
  if (a23 < 0) {
    operator delete(a18);
  }
  sub_3AFF24((void ***)&a18);
  sub_1A668(v24);
  sub_3A4C2C(v23);
  _Unwind_Resume(a1);
}

uint64_t sub_3C7EC0(void *a1, uint64_t a2)
{
  uint64_t v3 = sub_3C8880(a1, a2);
  if (v3) {
    return *((unsigned int *)v3 + 10);
  }
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)v11);
    unint64_t v5 = sub_188FC78(v11, (uint64_t)"Invalid stacked experiment name: ", 33);
    int v6 = *(char *)(a2 + 23);
    if (v6 >= 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = *(void *)a2;
    }
    if (v6 >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v8 = *(void *)(a2 + 8);
    }
    sub_188FC78(v5, v7, v8);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (v10 < 0) {
      operator delete(__p);
    }
    if (v12 < 0) {
      operator delete((void *)v11[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return 0xFFFFFFFFLL;
}

void sub_3C8060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void *sub_3C80AC@<X0>(void *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = result[5] + 24 * a2;
  if (*(char *)(v3 + 23) < 0) {
    return sub_4200((unsigned char *)a3, *(void **)v3, *(void *)(v3 + 8));
  }
  long long v4 = *(_OWORD *)v3;
  *(void *)(a3 + 16) = *(void *)(v3 + 16);
  *(_OWORD *)a3 = v4;
  return result;
}

uint64_t sub_3C80E4(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 64) + 48 * a2;
}

uint64_t sub_3C80F8(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t *sub_3C8100(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v7 = (unsigned char *)a2;
  unint64_t v9 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v10 = v9;
  }
  unint64_t v11 = sub_B128((uint64_t)v44, (uint64_t *)a2, v10);
  unint64_t v12 = v11;
  unint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v4 = v11;
      if (v11 >= v13) {
        unint64_t v4 = v11 % v13;
      }
    }
    else
    {
      unint64_t v4 = (v13 - 1) & v11;
    }
    unint64_t v15 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      long long v16 = *v15;
      if (*v15)
      {
        char v17 = v7[23];
        if (v17 >= 0) {
          uint64_t v18 = v7[23];
        }
        else {
          uint64_t v18 = *((void *)v7 + 1);
        }
        if (v17 < 0) {
          uint64_t v7 = *(unsigned char **)v7;
        }
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = v16[1];
            if (v23 == v12)
            {
              uint64_t v24 = *((unsigned __int8 *)v16 + 39);
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = *((unsigned __int8 *)v16 + 39);
              }
              else {
                uint64_t v25 = v16[3];
              }
              if (v25 == v18)
              {
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v16[2], v7, v16[3])) {
                    return v16;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v16 + 39)) {
                    return v16;
                  }
                  uint64_t v26 = 0;
                  while (*((unsigned __int8 *)v16 + v26 + 16) == v7[v26])
                  {
                    if (v24 == ++v26) {
                      return v16;
                    }
                  }
                }
              }
            }
            else if ((v23 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            long long v16 = (uint64_t *)*v16;
            if (!v16) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v19 = v16[1];
          if (v19 == v12)
          {
            uint64_t v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = *((unsigned __int8 *)v16 + 39);
            }
            else {
              uint64_t v21 = v16[3];
            }
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp((const void *)v16[2], v7, v16[3])) {
                  return v16;
                }
              }
              else
              {
                if (!*((unsigned char *)v16 + 39)) {
                  return v16;
                }
                uint64_t v22 = 0;
                while (*((unsigned __int8 *)v16 + v22 + 16) == v7[v22])
                {
                  if (v20 == ++v22) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v19 >= v13) {
              v19 %= v13;
            }
            if (v19 != v4) {
              break;
            }
          }
          long long v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  uint64_t v27 = (char *)operator new(0x30uLL);
  v44[0] = v27;
  v44[1] = a1 + 16;
  char v45 = 0;
  *(void *)uint64_t v27 = 0;
  *((void *)v27 + 1) = v12;
  uint64_t v28 = v27 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v28, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v28 = *(_OWORD *)a3;
    *((void *)v27 + 4) = *(void *)(a3 + 16);
  }
  *((_DWORD *)v27 + 10) = *a4;
  char v45 = 1;
  float v29 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v30 = *(float *)(a1 + 32);
  if (!v13 || (float)(v30 * (float)v13) < v29)
  {
    BOOL v33 = 1;
    if (v13 >= 3) {
      BOOL v33 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v34 = v33 | (2 * v13);
    unint64_t v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35) {
      size_t prime = v35;
    }
    else {
      size_t prime = v34;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v37) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v37)
    {
      unint64_t v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v37 < 3uLL || (uint8x8_t v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        unint64_t v38 = std::__next_prime(v38);
      }
      else
      {
        uint64_t v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2) {
          unint64_t v38 = v40;
        }
      }
      if (prime <= v38) {
        size_t prime = v38;
      }
      if (prime < *(void *)&v37) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v13 = *(void *)(a1 + 8);
    unint64_t v41 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        unint64_t v4 = v12 % v13;
        uint64_t v31 = *(void **)(*(void *)a1 + 8 * (v12 % v13));
        long long v32 = (void *)v44[0];
        if (v31) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v12;
        uint64_t v31 = *(void **)(*(void *)a1 + 8 * v12);
        long long v32 = (void *)v44[0];
        if (v31) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v41 & v12;
      uint64_t v31 = *(void **)(*(void *)a1 + 8 * (v41 & v12));
      long long v32 = (void *)v44[0];
      if (v31) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v32 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v44[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v44[0])
    {
      unint64_t v42 = *(void *)(*(void *)v44[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v42 >= v13) {
          v42 %= v13;
        }
      }
      else
      {
        v42 &= v13 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v42) = v44[0];
    }
    goto LABEL_92;
  }
  uint64_t v31 = *(void **)(*(void *)a1 + 8 * v4);
  long long v32 = (void *)v44[0];
  if (!v31) {
    goto LABEL_81;
  }
LABEL_57:
  void *v32 = *v31;
  void *v31 = v44[0];
LABEL_92:
  long long v16 = (uint64_t *)v44[0];
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_3C854C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_3C8560(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_3C8578(uint64_t *a1, int *a2, uint64_t a3)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v5) {
    unint64_t v5 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v8 = 0x555555555555555;
  }
  else {
    unint64_t v8 = v5;
  }
  uint64_t v21 = a1 + 2;
  if (v8)
  {
    if (v8 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v9 = (char *)operator new(48 * v8);
  }
  else
  {
    unint64_t v9 = 0;
  }
  std::string __p = v9;
  uint64_t v18 = &v9[48 * v4];
  unint64_t v19 = v18;
  uint64_t v20 = &v9[48 * v8];
  sub_3C72C4(v18, *a2, a3);
  unint64_t v19 = v18 + 48;
  sub_3C870C(a1, &__p);
  uint64_t v10 = a1[1];
  unint64_t v11 = v18;
  while (1)
  {
    unint64_t v12 = v19;
    if (v19 == v11) {
      break;
    }
    v19 -= 48;
    unint64_t v13 = (void **)*((void *)v12 - 3);
    if (v13)
    {
      do
      {
        unint64_t v15 = (void **)*v13;
        sub_55198((uint64_t)(v13 + 5));
        if (*((char *)v13 + 39) < 0) {
          operator delete(v13[2]);
        }
        operator delete(v13);
        unint64_t v13 = v15;
      }
      while (v15);
    }
    uint8x8_t v14 = (void *)*((void *)v12 - 5);
    *((void *)v12 - 5) = 0;
    if (v14) {
      operator delete(v14);
    }
  }
  if (__p) {
    operator delete(__p);
  }
  return v10;
}

void sub_3C86F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3C87D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_3C870C(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = 0;
    do
    {
      *(_DWORD *)(v6 + v7 - 48) = *(_DWORD *)(v4 + v7 - 48);
      uint64_t result = (uint64_t *)sub_54214(v6 + v7 - 40, v4 + v7 - 40);
      v7 -= 48;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  uint64_t v8 = *v3;
  uint64_t *v3 = v6;
  a2[1] = v8;
  uint64_t v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void sub_3C87BC(_Unwind_Exception *exception_object)
{
  if (v2) {
    sub_20A7F58(v1 + v2, v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3C87D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    uint64_t v4 = *(void ***)(i - 24);
    if (v4)
    {
      do
      {
        uint64_t v6 = (void **)*v4;
        sub_55198((uint64_t)(v4 + 5));
        if (*((char *)v4 + 39) < 0) {
          operator delete(v4[2]);
        }
        operator delete(v4);
        uint64_t v4 = v6;
      }
      while (v6);
    }
    uint64_t v5 = *(void **)(i - 40);
    *(void *)(i - 40) = 0;
    if (v5) {
      operator delete(v5);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *sub_3C8880(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  unint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    unint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          unint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        unint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

void sub_3C8AB0()
{
  unk_2557BD7 = 16641;
  word_2557BC0 = 65;
  byte_2557BEF = 1;
  byte_2557BD9 = 0;
}

uint64_t sub_3C8AD8(uint64_t a1, void *a2)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = sub_376B90(a2);
  *(void *)(a1 + 16) = sub_3750CC(*(void **)a1);
  HIBYTE(v12[2]) = 19;
  strcpy((char *)v12, "TrajectoryAnalytics");
  uint8x8_t v9 = 0;
  unint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t v4 = sub_374CDC((uint64_t)a2, (uint64_t)v12, (uint64_t *)&v9);
  *(_WORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 40) = 0x7FFFFFFF;
  char v14 = 7;
  strcpy((char *)__p, "enabled");
  *(unsigned char *)(a1 + 24) = sub_29D62C(v4, (uint64_t)__p);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v5 = (void **)v9;
  if (v9)
  {
    unint64_t v6 = v10;
    int8x8_t v7 = v9;
    if (v10 != v9)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      int8x8_t v7 = v9;
    }
    unint64_t v10 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v12[2]) < 0) {
    operator delete(v12[0]);
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  return a1;
}

void sub_3C8C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    sub_1A668(&a10);
    if ((a18 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_1A668(&a10);
    if ((a18 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(a13);
  _Unwind_Resume(a1);
}

uint64_t sub_3C8C88(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = sub_376B90(a3);
  *(void *)(a1 + 16) = sub_3750CC(*(void **)a1);
  HIBYTE(v14[2]) = 19;
  strcpy((char *)v14, "TrajectoryAnalytics");
  std::string __p = 0;
  unint64_t v12 = 0;
  uint64_t v13 = 0;
  unint64_t v6 = sub_374CDC((uint64_t)a3, (uint64_t)v14, (uint64_t *)&__p);
  sub_3CA1A4(a1 + 24, v6, a2);
  int8x8_t v7 = (void **)__p;
  if (__p)
  {
    unint64_t v8 = v12;
    uint8x8_t v9 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      uint8x8_t v9 = __p;
    }
    unint64_t v12 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v14[2]) < 0) {
    operator delete(v14[0]);
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  return a1;
}

void sub_3C8D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_3C8DB8(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = a1;
    sub_3C8E04(a2, &v3, (uint64_t)a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_3C8E04(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_3CA3C0((char **)a3, 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3));
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if (*a1 != v7)
  {
    uint64_t v8 = *a2;
    uint8x8_t v9 = *(char **)(a3 + 8);
    do
    {
      sub_3C8EFC(v8, v6, (uint64_t)v10);
      uint8x8_t v9 = sub_3CA5A8((uint64_t *)a3, (uint64_t)v9, (uint64_t)v10) + 64;
      sub_11C6DFC(v10);
      v6 += 120;
    }
    while (v6 != v7);
  }
}

void sub_3C8EB8(_Unwind_Exception *a1)
{
  sub_3CA364(v1);
  _Unwind_Resume(a1);
}

void sub_3C8ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_11C6DFC(&a9);
  sub_3CA364(v9);
  _Unwind_Resume(a1);
}

void sub_3C8EE8(_Unwind_Exception *a1)
{
  sub_3CA364(v1);
  _Unwind_Resume(a1);
}

void sub_3C8EFC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_11C6D48(a3, 0, 0);
  int v6 = sub_45FE24(a2);
  *(_DWORD *)(a3 + 16) |= 1u;
  *(_DWORD *)(a3 + 48) = v6;
  int v7 = sub_45FE10(a2);
  *(_DWORD *)(a3 + 16) |= 4u;
  *(void *)(a3 + 56) = v7;
  if (sub_45FE1C(a2) == 4) {
    int v8 = 0;
  }
  else {
    int v8 = sub_45FE1C(a2);
  }
  int v9 = sub_E150CC(v8);
  *(_DWORD *)(a3 + 16) |= 2u;
  uint64_t v94 = a3;
  *(_DWORD *)(a3 + 52) = v9;
  uint64_t v10 = nullsub_1(a2);
  uint64_t v11 = *(void **)v10;
  long long v93 = *(void **)(v10 + 8);
  if (*(void **)v10 != v93)
  {
    int v12 = 0;
    uint64_t v99 = 0;
    uint64_t v13 = (uint64_t *)(v94 + 24);
    uint64_t v97 = a1;
    while (1)
    {
      uint64_t v14 = sub_3C80F8((uint64_t)v11);
      uint64_t v15 = sub_3FA3A8((uint64_t)v11);
      if (v14 != v15)
      {
        while ((*(_DWORD *)(v14 + 4) & 0x80000000) != 0)
        {
          v14 += 56;
          if (v14 == v15)
          {
            uint64_t v14 = v15;
            break;
          }
        }
      }
      sub_46DD74((uint64_t)v11);
      uint64_t v17 = v16;
      sub_46DD80((uint64_t)v11);
      uint64_t v19 = v18;
      while (v17 != v18)
      {
        uint64_t v20 = v17 - 56;
        int v21 = *(_DWORD *)(v17 - 52);
        v17 -= 56;
        if ((v21 & 0x80000000) == 0)
        {
          uint64_t v19 = v20 + 56;
          break;
        }
      }
      uint64_t v22 = sub_3C80F8((uint64_t)v11);
      uint64_t v23 = sub_3C80F8((uint64_t)v11);
      unint64_t v24 = 0x6DB6DB6DB6DB6DB7 * ((v14 - v22) >> 3);
      unint64_t v25 = 0x6DB6DB6DB6DB6DB7 * ((v19 - v23) >> 3);
      uint64_t v26 = v24 <= v25 ? 0x6DB6DB6DB6DB6DB7 * ((v19 - v23) >> 3) : 0x6DB6DB6DB6DB6DB7 * ((v14 - v22) >> 3);
      uint64_t v96 = v26;
      if (v24 < v25) {
        break;
      }
LABEL_6:
      v11 += 132;
      if (v11 == v93) {
        return;
      }
    }
    uint64_t v27 = 0;
    unint64_t v95 = v25 - 1;
    while (1)
    {
      if (*(unsigned char *)(a1 + 25) && v99 > *(void *)(a1 + 32) && v12 > *(_DWORD *)(a1 + 40)) {
        return;
      }
      if (!v27)
      {
        float v29 = *(_DWORD **)(v94 + 40);
        if (v29 && (uint64_t v30 = *(int *)(v94 + 32), (int)v30 < *v29))
        {
          *(_DWORD *)(v94 + 32) = v30 + 1;
          uint64_t v27 = *(void *)&v29[2 * v30 + 2];
        }
        else
        {
          uint64_t v31 = sub_11D04F8(*v13);
          uint64_t v27 = sub_188CDC8((uint64_t)v13, v31);
        }
      }
      uint64_t v32 = sub_3C80F8((uint64_t)v11);
      uint64_t v33 = v32;
      int v98 = v12;
      unint64_t v34 = *(_DWORD **)(v27 + 32);
      if (v34 && (uint64_t v35 = *(int *)(v27 + 24), (int)v35 < *v34))
      {
        *(_DWORD *)(v27 + 24) = v35 + 1;
        uint64_t v36 = *(void *)&v34[2 * v35 + 2];
        unint64_t v37 = v32 + 56 * v24;
        uint64_t v38 = *(void *)v37;
        if ((*(void *)v37 & 0x8000000000000000) == 0) {
          goto LABEL_35;
        }
      }
      else
      {
        sub_11D059C(*(void *)(v27 + 16));
        uint64_t v36 = sub_188CDC8(v27 + 16, v39);
        unint64_t v37 = v33 + 56 * v24;
        uint64_t v38 = *(void *)v37;
        if ((*(void *)v37 & 0x8000000000000000) == 0)
        {
LABEL_35:
          uint64_t v40 = *(void *)(a1 + 8);
          int v103 = 1;
          int v104 = v38;
          v102[0] = &v103;
          v102[1] = &v104;
          unint64_t v41 = *(void *)(v40 + 3872) + 1;
          *(void *)(v40 + 3872) = v41;
          uint64_t v42 = *(void *)(v40 + 16);
          if (!v42) {
            goto LABEL_69;
          }
          if (*(_DWORD *)(v40 + 2144) == v38)
          {
            unsigned int v43 = 88;
LABEL_44:
            ++*(void *)(v40 + 3880);
            uint64_t v44 = v40 + 32 + 24 * v43;
            *(void *)(v44 + 8) = v41;
            char v45 = *(unsigned int **)(v44 + 16);
            if (!v45) {
              goto LABEL_69;
            }
          }
          else
          {
            if (*(_DWORD *)(v40 + 2168) == v38)
            {
              unsigned int v43 = 89;
              goto LABEL_44;
            }
            if (*(_DWORD *)(v40 + 2192) == v38)
            {
              unsigned int v43 = 90;
              goto LABEL_44;
            }
            if (*(_DWORD *)(v40 + 2216) == v38)
            {
              unsigned int v43 = 91;
              goto LABEL_44;
            }
            unint64_t v92 = *(void *)(v40 + 2200);
            unint64_t v58 = *(void *)(v40 + 2152);
            unint64_t v90 = *(void *)(v40 + 2176);
            unint64_t v91 = *(void *)(v40 + 2224);
            char v45 = (unsigned int *)sub_2AB884(v42, 22, v38, 1);
            if (v58 >= v41) {
              unint64_t v59 = v41;
            }
            else {
              unint64_t v59 = v58;
            }
            int v60 = 88;
            if (v58 >= v41) {
              int v60 = 0;
            }
            if (v90 < v59)
            {
              unint64_t v59 = v90;
              int v60 = 89;
            }
            if (v92 < v59)
            {
              int v60 = 90;
              unint64_t v59 = v92;
            }
            BOOL v61 = v91 >= v59;
            unsigned int v62 = 91;
            if (v61) {
              unsigned int v62 = v60;
            }
            uint64_t v63 = v40 + 32 + 24 * v62;
            *(_DWORD *)uint64_t v63 = v104;
            *(void *)(v63 + 8) = *(void *)(v40 + 3872);
            *(void *)(v63 + 16) = v45;
            a1 = v97;
            if (!v45)
            {
LABEL_69:
              sub_2E6128(v102);
              uint64_t v57 = 0x7FFFFFFFFFFFFFFFLL;
              a1 = v97;
              goto LABEL_70;
            }
          }
          long long v46 = (int *)((char *)v45 + *v45);
          long long v47 = (unsigned __int16 *)((char *)v46 - *v46);
          if (*v47 >= 5u)
          {
            if (v47[2])
            {
              long long v48 = (unsigned int *)((char *)v46 + v47[2] + *(unsigned int *)((char *)v46 + v47[2]));
              if (*v48 > (HIDWORD(v38) & 0x3FFFFFFFu))
              {
                uint64_t v49 = (int *)((char *)v48
                            + 4 * HIDWORD(v38)
                            + *(unsigned int *)((char *)v48 + (4 * HIDWORD(v38)) + 4)
                            + 4);
                uint64_t v50 = (unsigned __int16 *)((char *)v49 - *v49);
                unsigned int v51 = *v50;
                if (v51 < 0xB) {
                  goto LABEL_85;
                }
                if (!v50[5]) {
                  goto LABEL_86;
                }
                int v52 = *(unsigned __int8 *)(v40 + 3889);
                if (v52 == 254) {
                  goto LABEL_86;
                }
                uint64_t v53 = (int *)((char *)v49 + v50[5] + *(unsigned int *)((char *)v49 + v50[5]));
                unsigned int v56 = *v53;
                long long v54 = (unsigned __int8 *)(v53 + 1);
                uint64_t v55 = v56;
                if (v56)
                {
                  while (v52 != *v54)
                  {
                    ++v54;
                    uint64_t v57 = 0x7FFFFFFFFFFFFFFFLL;
                    if (!--v55) {
                      goto LABEL_70;
                    }
                  }
LABEL_85:
                  if (v51 >= 7)
                  {
LABEL_86:
                    uint64_t v88 = v50[3];
                    if (v88)
                    {
                      uint64_t v89 = *(void *)((char *)v49 + v88);
                      goto LABEL_89;
                    }
                  }
                  uint64_t v89 = 0;
LABEL_89:
                  if ((v38 & 0x4000000000000000) != 0) {
                    uint64_t v57 = v89;
                  }
                  else {
                    uint64_t v57 = -v89;
                  }
                  goto LABEL_70;
                }
              }
            }
          }
        }
      }
      uint64_t v57 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_70:
      int v64 = *(_DWORD *)(v36 + 16);
      *(void *)(v36 + 40) = v57;
      char v65 = *(unsigned char *)(v33 + 56 * v24 + 48);
      *(_DWORD *)(v36 + 16) = v64 | 0x44;
      *(unsigned char *)(v36 + 60) = v65;
      long long v66 = *(_OWORD *)v37;
      long long v67 = *(_OWORD *)(v37 + 16);
      long long v68 = *(_OWORD *)(v37 + 32);
      uint64_t v101 = *(void *)(v37 + 48);
      v100[1] = v67;
      v100[2] = v68;
      v100[0] = v66;
      sub_3C96E0((void *)a1, (uint64_t)v11, (unint64_t *)v100, (_DWORD *)v36);
      int v69 = *(_DWORD *)(v11[75] + 4 * v24);
      int v70 = *(_DWORD *)(v11[78] + 4 * v24);
      int v71 = *(_DWORD *)(v11[81] + 4 * v24);
      int v72 = *(_DWORD *)(v11[84] + 4 * v24);
      *(_DWORD *)(v36 + 16) |= 2u;
      unint64_t v73 = *(_DWORD **)(v36 + 32);
      if (!v73)
      {
        uint64_t v74 = *(void *)(v36 + 8);
        BOOL v75 = (void *)(v74 & 0xFFFFFFFFFFFFFFFCLL);
        if (v74) {
          BOOL v75 = (void *)*v75;
        }
        sub_11D03E0((uint64_t)v75);
        *(void *)(v36 + 32) = v73;
      }
      int v76 = v73[4];
      v73[7] = v71;
      v73[8] = v70;
      v73[4] = v76 | 7;
      v73[6] = v69;
      if (v72 != 0x7FFFFFFF)
      {
        v73[4] = v76 | 0x27;
        v73[11] = v72;
      }
      uint64_t v77 = *(void *)(v33 + 56 * v24 + 40);
      a1 = v97;
      if (v24 != v95)
      {
        unint64_t v78 = *(_DWORD **)(v27 + 56);
        if (v78 && (uint64_t v79 = *(int *)(v27 + 48), (int)v79 < *v78))
        {
          *(_DWORD *)(v27 + 48) = v79 + 1;
          uint64_t v80 = *(void *)&v78[2 * v79 + 2];
        }
        else
        {
          BOOL v81 = sub_11D061C(*(void *)(v27 + 40));
          uint64_t v80 = sub_188CDC8(v27 + 40, (uint64_t)v81);
        }
        int v82 = *(_DWORD *)(v11[87] + 4 * v24);
        int v83 = *(_DWORD *)(v11[90] + 4 * v24);
        int v84 = *(_DWORD *)(v11[93] + 4 * v24);
        *(_DWORD *)(v80 + 16) |= 2u;
        BOOL v85 = *(_DWORD **)(v80 + 32);
        if (!v85)
        {
          uint64_t v86 = *(void *)(v80 + 8);
          unint64_t v87 = (void *)(v86 & 0xFFFFFFFFFFFFFFFCLL);
          if (v86) {
            unint64_t v87 = (void *)*v87;
          }
          sub_11D03E0((uint64_t)v87);
          *(void *)(v80 + 32) = v85;
        }
        int v28 = v85[4];
        v85[7] = v84;
        v85[8] = v83;
        v85[4] = v28 | 7;
        v85[6] = v82;
      }
      v99 += v77;
      int v12 = v70 + v98;
      ++v24;
      uint64_t v13 = (uint64_t *)(v94 + 24);
      if (v24 == v96) {
        goto LABEL_6;
      }
    }
  }
}

void sub_3C959C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

void sub_3C95B4(_Unwind_Exception *a1)
{
  sub_11C6DFC(v1);
  _Unwind_Resume(a1);
}

void sub_3C95C8(_Unwind_Exception *a1)
{
  sub_11C6DFC(v1);
  _Unwind_Resume(a1);
}

void sub_3C95DC(_Unwind_Exception *a1)
{
  sub_11C6DFC(v1);
  _Unwind_Resume(a1);
}

void sub_3C95F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

void sub_3C9608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

void sub_3C9620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

void sub_3C9638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

void sub_3C9650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

void sub_3C9668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

void sub_3C9680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

void sub_3C9698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

void sub_3C96B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

void sub_3C96C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

void sub_3C96E0(void *a1, uint64_t a2, unint64_t *a3, _DWORD *a4)
{
  sub_318C48(a1[1], *a3, a1 + 6);
  uint64_t v7 = a1[7] - a1[6];
  if (!v7)
  {
    unint64_t v27 = a3[5];
    a4[4] |= 8u;
    a4[12] = v27;
    return;
  }
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  uint64_t v11 = v7 >> 3;
  do
  {
    uint64_t v12 = *(void *)(a1[6] + 8 * v10);
    uint64_t v13 = (int *)sub_2D5D58(a1[2], v12 & 0xFFFFFFFFFFFFLL);
    uint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
    if (*v14 >= 9u && (uint64_t v15 = v14[4]) != 0)
    {
      uint64_t v16 = *(unsigned int *)((char *)v13 + v15);
      if (v10 < a3[1]) {
        goto LABEL_3;
      }
    }
    else
    {
      uint64_t v16 = 0;
      if (v10 < a3[1])
      {
LABEL_3:
        v8 += v16;
        goto LABEL_4;
      }
    }
    if (v10 >= a3[2])
    {
      v9 += v16;
      goto LABEL_4;
    }
    unint64_t v17 = *(void *)(sub_40EFE8(a2) + 32);
    BOOL v18 = v12 == v17 && WORD2(v12) == WORD2(v17);
    if (v18 && (BYTE6(v12) == 0) != (HIWORD(v17) & 1))
    {
      double v19 = (double)(1000000000 - sub_46CABC(a2)) / 1000000000.0 * (double)v16;
      if (v19 >= 0.0)
      {
        if (v19 < 4.50359963e15)
        {
          uint64_t v20 = (uint64_t)(v19 + v19) + 1;
LABEL_36:
          double v19 = (double)(v20 >> 1);
        }
      }
      else if (v19 > -4.50359963e15)
      {
        uint64_t v20 = (uint64_t)(v19 + v19);
        if (v20 >= 1) {
          --v20;
        }
        goto LABEL_36;
      }
      v8 += (uint64_t)v19;
      goto LABEL_4;
    }
    unint64_t v21 = *(void *)(sub_46C8FC(a2) + 32);
    BOOL v22 = v12 == v21 && WORD2(v12) == WORD2(v21);
    if (v22 && (BYTE6(v12) == 0) != (HIWORD(v21) & 1))
    {
      double v23 = (double)(1000000000 - sub_46CAC4(a2)) / 1000000000.0 * (double)v16;
      if (v23 >= 0.0)
      {
        if (v23 < 4.50359963e15)
        {
          uint64_t v24 = (uint64_t)(v23 + v23) + 1;
LABEL_40:
          double v23 = (double)(v24 >> 1);
        }
      }
      else if (v23 > -4.50359963e15)
      {
        uint64_t v24 = (uint64_t)(v23 + v23);
        if (v24 >= 1) {
          --v24;
        }
        goto LABEL_40;
      }
      v9 += (uint64_t)v23;
    }
LABEL_4:
    ++v10;
  }
  while (v11 != v10);
  if (v8)
  {
    int v25 = a4[4] | 0x10;
    a4[13] = v8;
    unint64_t v26 = a3[5];
    a4[4] = v25 | 8;
    a4[12] = v26;
    if (v9) {
      goto LABEL_44;
    }
  }
  else
  {
    int v25 = a4[4];
    unint64_t v28 = a3[5];
    a4[4] = v25 | 8;
    a4[12] = v28;
    if (v9)
    {
LABEL_44:
      a4[4] = v25 | 0x28;
      a4[14] = v9;
    }
  }
}

void sub_3C99D8(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = a3;
  sub_11CE5AC(a3, 0, 0);
  uint64_t v5 = sub_45FD6C(a2);
  int v6 = (unsigned int *)sub_40EFE8((uint64_t)a2);
  uint64_t v7 = (unsigned int *)sub_52058((uint64_t)a2);
  int v8 = sub_47E9FC(v6, v7, 0, 3);
  uint64_t v9 = sub_40EFE8((uint64_t)a2);
  uint64_t v10 = sub_52058((uint64_t)a2);
  if (v9 == v10)
  {
    int v12 = 0;
    goto LABEL_9;
  }
  unint64_t v11 = v10 - v9 - 1056;
  if (v11 < 0x420)
  {
    int v12 = 0;
    do
    {
LABEL_8:
      v12 += *(_DWORD *)(v9 + 768) + *(_DWORD *)(v9 + 772);
      v9 += 1056;
    }
    while (v9 != v10);
    goto LABEL_9;
  }
  int v13 = 0;
  int v14 = 0;
  unint64_t v15 = v11 / 0x420 + 1;
  uint64_t v16 = (_DWORD *)v9;
  v9 += 1056 * (v15 & 0x7FFFFFFFFFFFFELL);
  uint64_t v17 = v15 & 0x7FFFFFFFFFFFFELL;
  do
  {
    v13 += v16[192] + v16[193];
    v14 += v16[456] + v16[457];
    v16 += 528;
    v17 -= 2;
  }
  while (v17);
  int v12 = v14 + v13;
  if (v15 != (v15 & 0x7FFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  BOOL v18 = (uint64_t *)nullsub_1(a2);
  uint64_t v19 = *v18;
  uint64_t v78 = v18[1];
  if (*v18 != v78)
  {
    int v20 = v8 - v12;
    unint64_t v21 = v4 + 2;
    uint64_t v79 = (unsigned int *)(v4 + 5);
    int v82 = v4;
    while (1)
    {
      BOOL v22 = (_DWORD *)v4[4];
      if (v22 && (uint64_t v23 = *((int *)v4 + 6), (int)v23 < *v22))
      {
        *((_DWORD *)v4 + 6) = v23 + 1;
        uint64_t v24 = *(void *)&v22[2 * v23 + 2];
      }
      else
      {
        uint64_t v25 = sub_11D0AC0(*v21);
        uint64_t v24 = sub_188CDC8((uint64_t)v21, v25);
      }
      int v26 = sub_46CEFC(v19);
      unint64_t v27 = (int *)sub_374DF4(v19);
      if (v26 == 0x7FFFFFFF) {
        int v28 = 0;
      }
      else {
        int v28 = v26;
      }
      int v29 = *v27;
      if (*v27 == 0x7FFFFFFF) {
        int v29 = 0;
      }
      int v30 = v29 + v28;
      uint64_t v31 = *((unsigned int *)v4 + 10);
      if (v31 == *((_DWORD *)v4 + 11))
      {
        unsigned int v32 = v31 + 1;
        sub_188C80C(v79, v31 + 1);
        *(_DWORD *)(v4[6] + 4 * v31) = v30;
      }
      else
      {
        *(_DWORD *)(v4[6] + 4 * v31) = v30;
        unsigned int v32 = v31 + 1;
      }
      *uint64_t v79 = v32;
      uint64_t v33 = sub_46DE4C(v19);
      v20 -= v30;
      if (v33) {
        break;
      }
LABEL_11:
      v19 += 1056;
      if (v19 == v78) {
        return;
      }
    }
    uint64_t v34 = 0;
    BOOL v81 = (unsigned int *)(v24 + 16);
    BOOL v85 = (unsigned int *)(v24 + 40);
    uint64_t v83 = v33;
    while (1)
    {
      uint64_t v36 = sub_3C80F8(v19);
      int v84 = v20;
      unint64_t v37 = v21;
      uint64_t v38 = v5;
      uint64_t v39 = *(void *)(v36 + 56 * v34);
      if (v39 < 0) {
        goto LABEL_63;
      }
      uint64_t v40 = *(void *)(a1 + 8);
      int v87 = 1;
      int v88 = v39;
      v86[0] = &v87;
      v86[1] = &v88;
      unint64_t v41 = *(void *)(v40 + 3872) + 1;
      *(void *)(v40 + 3872) = v41;
      uint64_t v42 = *(void *)(v40 + 16);
      if (!v42) {
        goto LABEL_62;
      }
      uint64_t v43 = v40 + 32;
      if (*(_DWORD *)(v40 + 2144) == v39)
      {
        unsigned int v44 = 88;
        goto LABEL_39;
      }
      if (*(_DWORD *)(v40 + 2168) == v39)
      {
        unsigned int v44 = 89;
        goto LABEL_39;
      }
      if (*(_DWORD *)(v40 + 2192) == v39) {
        break;
      }
      if (*(_DWORD *)(v40 + 2216) == v39)
      {
        unsigned int v44 = 91;
LABEL_39:
        ++*(void *)(v40 + 3880);
        uint64_t v45 = v43 + 24 * v44;
        *(void *)(v45 + 8) = v41;
        long long v46 = *(unsigned int **)(v45 + 16);
        if (!v46) {
          goto LABEL_62;
        }
        goto LABEL_40;
      }
      unint64_t v74 = *(void *)(v40 + 2152);
      unint64_t v75 = *(void *)(v40 + 2176);
      unint64_t v76 = *(void *)(v40 + 2224);
      unint64_t v77 = *(void *)(v40 + 2200);
      long long v46 = (unsigned int *)sub_2AB884(v42, 22, v39, 1);
      unint64_t v59 = v74;
      if (v74 >= v41) {
        unint64_t v59 = v41;
      }
      int v60 = 88;
      if (v74 >= v41) {
        int v60 = 0;
      }
      if (v75 < v59)
      {
        unint64_t v59 = v75;
        int v60 = 89;
      }
      if (v77 < v59)
      {
        int v60 = 90;
        unint64_t v59 = v77;
      }
      BOOL v61 = v76 >= v59;
      unsigned int v62 = 91;
      if (v61) {
        unsigned int v62 = v60;
      }
      uint64_t v63 = v43 + 24 * v62;
      *(_DWORD *)uint64_t v63 = v88;
      *(void *)(v63 + 8) = *(void *)(v40 + 3872);
      *(void *)(v63 + 16) = v46;
      if (!v46)
      {
LABEL_62:
        sub_2E6128(v86);
LABEL_63:
        uint64_t v58 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_64:
        uint64_t v64 = *(unsigned int *)(v24 + 64);
        if (v64 == *(_DWORD *)(v24 + 68))
        {
LABEL_65:
          sub_188CA54((unsigned int *)(v24 + 64), v64 + 1);
          *(void *)(*(void *)(v24 + 72) + 8 * v64) = v58;
          uint64_t v65 = v38;
          *(_DWORD *)(v24 + 64) = v64 + 1;
          uint64_t v66 = *(unsigned int *)(v24 + 16);
          unint64_t v21 = v37;
          if (v66 != *(_DWORD *)(v24 + 20)) {
            goto LABEL_66;
          }
          goto LABEL_77;
        }
        goto LABEL_76;
      }
LABEL_40:
      long long v47 = (int *)((char *)v46 + *v46);
      long long v48 = (unsigned __int16 *)((char *)v47 - *v47);
      if (*v48 < 5u) {
        goto LABEL_63;
      }
      if (!v48[2]) {
        goto LABEL_63;
      }
      uint64_t v49 = (unsigned int *)((char *)v47 + v48[2] + *(unsigned int *)((char *)v47 + v48[2]));
      if (*v49 <= (HIDWORD(v39) & 0x3FFFFFFFu)) {
        goto LABEL_63;
      }
      uint64_t v50 = (int *)((char *)v49
                  + 4 * HIDWORD(v39)
                  + *(unsigned int *)((char *)v49 + (4 * HIDWORD(v39)) + 4)
                  + 4);
      unsigned int v51 = (unsigned __int16 *)((char *)v50 - *v50);
      unsigned int v52 = *v51;
      if (v52 < 0xB) {
        goto LABEL_68;
      }
      if (v51[5])
      {
        int v53 = *(unsigned __int8 *)(v40 + 3889);
        if (v53 != 254)
        {
          long long v54 = (int *)((char *)v50 + v51[5] + *(unsigned int *)((char *)v50 + v51[5]));
          unsigned int v57 = *v54;
          uint64_t v55 = (unsigned __int8 *)(v54 + 1);
          uint64_t v56 = v57;
          if (!v57) {
            goto LABEL_63;
          }
          while (v53 != *v55)
          {
            ++v55;
            uint64_t v58 = 0x7FFFFFFFFFFFFFFFLL;
            if (!--v56) {
              goto LABEL_64;
            }
          }
LABEL_68:
          if (v52 < 7) {
            goto LABEL_75;
          }
        }
      }
      uint64_t v70 = v51[3];
      if (!v70)
      {
LABEL_75:
        uint64_t v58 = 0;
        uint64_t v64 = *(unsigned int *)(v24 + 64);
        if (v64 == *(_DWORD *)(v24 + 68)) {
          goto LABEL_65;
        }
        goto LABEL_76;
      }
      uint64_t v71 = *(void *)((char *)v50 + v70);
      if ((v39 & 0x4000000000000000) != 0) {
        uint64_t v58 = v71;
      }
      else {
        uint64_t v58 = -v71;
      }
      uint64_t v64 = *(unsigned int *)(v24 + 64);
      if (v64 == *(_DWORD *)(v24 + 68)) {
        goto LABEL_65;
      }
LABEL_76:
      *(void *)(*(void *)(v24 + 72) + 8 * v64) = v58;
      uint64_t v65 = v38;
      *(_DWORD *)(v24 + 64) = v64 + 1;
      uint64_t v66 = *(unsigned int *)(v24 + 16);
      unint64_t v21 = v37;
      if (v66 != *(_DWORD *)(v24 + 20))
      {
LABEL_66:
        *(_DWORD *)(*(void *)(v24 + 24) + 4 * v66) = v65;
        unint64_t v4 = v82;
        int v67 = v84;
        *(_DWORD *)(v24 + 16) = v66 + 1;
        uint64_t v68 = *(unsigned int *)(v24 + 40);
        if (v68 != *(_DWORD *)(v24 + 44)) {
          goto LABEL_78;
        }
        goto LABEL_67;
      }
LABEL_77:
      unint64_t v4 = v82;
      sub_188C80C(v81, v66 + 1);
      int v67 = v84;
      *(_DWORD *)(*(void *)(v24 + 24) + 4 * v66) = v65;
      *(_DWORD *)(v24 + 16) = v66 + 1;
      uint64_t v68 = *(unsigned int *)(v24 + 40);
      if (v68 != *(_DWORD *)(v24 + 44))
      {
LABEL_78:
        *(_DWORD *)(*(void *)(v24 + 48) + 4 * v68) = v67;
        unsigned int v69 = v68 + 1;
        goto LABEL_79;
      }
LABEL_67:
      unsigned int v69 = v68 + 1;
      sub_188C80C(v85, v68 + 1);
      *(_DWORD *)(*(void *)(v24 + 48) + 4 * v68) = v67;
LABEL_79:
      *BOOL v85 = v69;
      uint64_t v5 = v65 - *(void *)(v36 + 56 * v34 + 40);
      int v20 = v67 - *(_DWORD *)(*(void *)(v19 + 600) + 4 * v34);
      if (v34 == sub_46DE4C(v19) - 1 || !*(_DWORD *)(*(void *)(v19 + 696) + 4 * v34)) {
        goto LABEL_28;
      }
      uint64_t v72 = *(unsigned int *)(v24 + 16);
      if (v72 == *(_DWORD *)(v24 + 20))
      {
        sub_188C80C(v81, v72 + 1);
        *(_DWORD *)(*(void *)(v24 + 24) + 4 * v72) = v5;
        *(_DWORD *)(v24 + 16) = v72 + 1;
        uint64_t v73 = *(unsigned int *)(v24 + 40);
        if (v73 == *(_DWORD *)(v24 + 44)) {
          goto LABEL_85;
        }
      }
      else
      {
        *(_DWORD *)(*(void *)(v24 + 24) + 4 * v72) = v5;
        *(_DWORD *)(v24 + 16) = v72 + 1;
        uint64_t v73 = *(unsigned int *)(v24 + 40);
        if (v73 == *(_DWORD *)(v24 + 44))
        {
LABEL_85:
          unsigned int v35 = v73 + 1;
          sub_188C80C(v85, v73 + 1);
          *(_DWORD *)(*(void *)(v24 + 48) + 4 * v73) = v20;
          goto LABEL_27;
        }
      }
      *(_DWORD *)(*(void *)(v24 + 48) + 4 * v73) = v20;
      unsigned int v35 = v73 + 1;
LABEL_27:
      *BOOL v85 = v35;
      v20 -= *(_DWORD *)(*(void *)(v19 + 696) + 4 * v34);
LABEL_28:
      if (++v34 == v83) {
        goto LABEL_11;
      }
    }
    unsigned int v44 = 90;
    goto LABEL_39;
  }
}

void sub_3CA074(_Unwind_Exception *a1)
{
  sub_11CE668(v1);
  _Unwind_Resume(a1);
}

void sub_3CA088(_Unwind_Exception *a1)
{
  sub_11CE668(v1);
  _Unwind_Resume(a1);
}

void sub_3CA09C(_Unwind_Exception *a1)
{
  sub_11CE668(v1);
  _Unwind_Resume(a1);
}

void sub_3CA0B0(_Unwind_Exception *a1)
{
  sub_11CE668(v1);
  _Unwind_Resume(a1);
}

void sub_3CA0C4(_Unwind_Exception *a1)
{
  sub_11CE668(v1);
  _Unwind_Resume(a1);
}

void sub_3CA0D8(_Unwind_Exception *a1)
{
  sub_11CE668(v1);
  _Unwind_Resume(a1);
}

void sub_3CA0EC(_Unwind_Exception *a1)
{
  sub_11CE668(v1);
  _Unwind_Resume(a1);
}

void sub_3CA100(_Unwind_Exception *a1)
{
  sub_11CE668(v1);
  _Unwind_Resume(a1);
}

void sub_3CA114(_Unwind_Exception *a1)
{
  sub_11CE668(v1);
  _Unwind_Resume(a1);
}

void sub_3CA128(_Unwind_Exception *a1)
{
  sub_11CE668(v1);
  _Unwind_Resume(a1);
}

void sub_3CA13C(_Unwind_Exception *a1)
{
  sub_11CE668(v1);
  _Unwind_Resume(a1);
}

void sub_3CA150(_Unwind_Exception *a1)
{
  sub_11CE668(v1);
  _Unwind_Resume(a1);
}

void sub_3CA164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

void sub_3CA17C(_Unwind_Exception *a1)
{
  sub_11CE668(v1);
  _Unwind_Resume(a1);
}

void sub_3CA190(_Unwind_Exception *a1)
{
  sub_11CE668(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_3CA1A4(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0x7FFFFFFFFFFFFFFFLL;
  int v6 = (uint64_t *)(a1 + 8);
  *(_WORD *)a1 = 0;
  *(_DWORD *)(a1 + 16) = 0x7FFFFFFF;
  uint64_t v7 = (_DWORD *)(a1 + 16);
  char v13 = 7;
  strcpy(__p, "enabled");
  *(unsigned char *)a1 = sub_29D62C(a2, (uint64_t)__p);
  if (v13 < 0) {
    operator delete(*(void **)__p);
  }
  char v13 = 14;
  strcpy(__p, "configurations");
  int v8 = (void *)sub_560F4(a2, (uint64_t)__p);
  uint64_t v9 = (void *)sub_560F4(v8, a3);
  if (v13 < 0) {
    operator delete(*(void **)__p);
  }
  char v13 = 16;
  strcpy(__p, "maximum_length_m");
  sub_5C8A4(v9, (uint64_t)__p, v6);
  if (v13 < 0) {
    operator delete(*(void **)__p);
  }
  char v13 = 14;
  strcpy(__p, "maximum_time_s");
  sub_5D498(v9, (uint64_t)__p, v7);
  if (v13 < 0)
  {
    operator delete(*(void **)__p);
    if (*v7) {
      goto LABEL_9;
    }
LABEL_11:
    BOOL v10 = *v6 != 0;
    goto LABEL_12;
  }
  if (!*v7) {
    goto LABEL_11;
  }
LABEL_9:
  BOOL v10 = 1;
LABEL_12:
  *(unsigned char *)(a1 + 1) = v10;
  return a1;
}

void sub_3CA33C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **sub_3CA364(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    unint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_11C6DFC(v3 - 64);
      while ((void *)v3 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_3CA3C0(char **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (a2 <= (a1[2] - *a1) >> 6) {
    return;
  }
  if (a2 >> 58) {
    sub_2E00();
  }
  uint64_t v4 = (uint64_t)a1[1];
  unint64_t v5 = a2 << 6;
  int v6 = (char *)operator new(a2 << 6);
  uint64_t v7 = &v6[v5];
  int v8 = &v6[v4 - (void)v2];
  if ((char *)v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v9 = (uint64_t)&v6[v4 - (void)v2];
  do
  {
    v4 -= 64;
    uint64_t v9 = sub_3CA508(v9 - 64, v4);
  }
  while ((char *)v4 != v2);
  BOOL v10 = *a1;
  uint64_t v2 = a1[1];
  *a1 = (char *)v9;
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v10)
  {
    do
    {
      v2 -= 64;
      sub_11C6DFC(v2);
    }
    while (v2 != v10);
    uint64_t v2 = v10;
  }
  if (v2)
  {
LABEL_10:
    operator delete(v2);
  }
}

uint64_t sub_3CA4B4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 64;
    sub_11C6DFC(i - 64);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_3CA508(uint64_t a1, uint64_t a2)
{
  sub_11C6D48(a1, 0, 0);
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if ((v4 & 2) != 0)
    {
      unint64_t v5 = 0;
    }
    else
    {
      unint64_t v5 = (void *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
      if (v4) {
        unint64_t v5 = (void *)*v5;
      }
    }
    uint64_t v6 = *(void *)(a2 + 8);
    if ((v6 & 2) != 0)
    {
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6) {
        uint64_t v7 = (void *)*v7;
      }
    }
    if (v5 == v7) {
      sub_11C7674(a1, a2);
    }
    else {
      sub_11C7620(a1, a2);
    }
  }
  return a1;
}

char *sub_3CA5A8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (char *)a2;
  unint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  if (v6 >= v7)
  {
    BOOL v10 = (char *)*a1;
    unint64_t v11 = ((uint64_t)(v6 - *a1) >> 6) + 1;
    if (v11 >> 58) {
      sub_2E00();
    }
    uint64_t v12 = v7 - (void)v10;
    if (v12 >> 5 > v11) {
      unint64_t v11 = v12 >> 5;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    int v30 = a1 + 2;
    if (v13)
    {
      if (v13 >> 58) {
        sub_188D718();
      }
      int v14 = (char *)operator new(v13 << 6);
    }
    else
    {
      int v14 = 0;
    }
    int v26 = v14;
    unint64_t v27 = &v14[64 * ((v4 - v10) >> 6)];
    int v28 = v27;
    int v29 = &v14[64 * v13];
    sub_3CA918((uint64_t)&v26, a3);
    unint64_t v15 = v27;
    uint64_t v16 = *a1;
    uint64_t v17 = (uint64_t)v27;
    if ((char *)*a1 != v4)
    {
      uint64_t v18 = (uint64_t)v4;
      uint64_t v17 = (uint64_t)v27;
      do
      {
        v18 -= 64;
        uint64_t v17 = sub_3CA508(v17 - 64, v18);
      }
      while (v18 != v16);
    }
    unint64_t v27 = (char *)v17;
    uint64_t v19 = (char *)a1[1];
    uint64_t v20 = (uint64_t)v28;
    if (v19 != v4)
    {
      do
      {
        sub_3CA508(v20, (uint64_t)v4);
        v4 += 64;
        v20 += 64;
      }
      while (v4 != v19);
      uint64_t v17 = (uint64_t)v27;
      uint64_t v4 = (char *)a1[1];
    }
    unint64_t v21 = (char *)*a1;
    *a1 = v17;
    a1[1] = v20;
    BOOL v22 = (char *)a1[2];
    a1[2] = (uint64_t)v29;
    int v28 = v4;
    int v29 = v22;
    int v26 = v21;
    unint64_t v27 = v21;
    if (v4 != v21)
    {
      do
      {
        int v28 = v4 - 64;
        sub_11C6DFC(v4 - 64);
        uint64_t v4 = v28;
      }
      while (v28 != v21);
      uint64_t v4 = v26;
    }
    if (v4) {
      operator delete(v4);
    }
    return v15;
  }
  else if (a2 == v6)
  {
    sub_3CA508(a2, a3);
    a1[1] = (uint64_t)(v4 + 64);
  }
  else
  {
    sub_3CA7FC((uint64_t)a1, a2, v6, a2 + 64);
    if (v4 == (char *)a3)
    {
      return (char *)a3;
    }
    else
    {
      uint64_t v8 = *((void *)v4 + 1);
      if ((v8 & 2) != 0)
      {
        uint64_t v9 = 0;
      }
      else
      {
        uint64_t v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
        if (v8) {
          uint64_t v9 = (void *)*v9;
        }
      }
      uint64_t v24 = *(void *)(a3 + 8);
      if ((v24 & 2) != 0)
      {
        uint64_t v25 = 0;
      }
      else
      {
        uint64_t v25 = (void *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
        if (v24) {
          uint64_t v25 = (void *)*v25;
        }
      }
      if (v9 == v25) {
        sub_11C7674((uint64_t)v4, a3);
      }
      else {
        sub_11C7620((uint64_t)v4, a3);
      }
    }
  }
  return v4;
}

void sub_3CA7E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3CA4B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_3CA7FC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = v6 - a4;
  unint64_t v8 = a2 + v6 - a4;
  if (v8 >= a3)
  {
    *(void *)(a1 + 8) = v6;
    if (v6 == a4) {
      return;
    }
  }
  else
  {
    unint64_t v10 = a2 + v6 - a4;
    uint64_t v11 = *(void *)(a1 + 8);
    do
    {
      uint64_t v12 = sub_3CA508(v11, v10);
      v10 += 64;
      uint64_t v11 = v12 + 64;
    }
    while (v10 < a3);
    *(void *)(a1 + 8) = v11;
    if (v6 == a4) {
      return;
    }
  }
  uint64_t v13 = 0;
  do
  {
    if (v8 != v6)
    {
      uint64_t v14 = *(void *)(v6 + v13 - 56);
      if ((v14 & 2) != 0)
      {
        unint64_t v15 = 0;
      }
      else
      {
        unint64_t v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
        if (v14) {
          unint64_t v15 = (void *)*v15;
        }
      }
      uint64_t v16 = *(void *)(v8 + v13 - 56);
      if ((v16 & 2) != 0)
      {
        uint64_t v17 = 0;
      }
      else
      {
        uint64_t v17 = (void *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
        if (v16) {
          uint64_t v17 = (void *)*v17;
        }
      }
      uint64_t v18 = v8 + v13 - 64;
      uint64_t v19 = v6 + v13 - 64;
      if (v15 == v17) {
        sub_11C7674(v19, v18);
      }
      else {
        sub_11C7620(v19, v18);
      }
    }
    v13 -= 64;
  }
  while (-64 * (v7 >> 6) != v13);
}

uint64_t sub_3CA918(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != *(void *)(a1 + 24)) {
    goto LABEL_36;
  }
  uint64_t v6 = *(void **)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  if (v5 <= *(void *)a1)
  {
    if ((void *)v4 == v6) {
      unint64_t v17 = 1;
    }
    else {
      unint64_t v17 = (v4 - (uint64_t)v6) >> 5;
    }
    if (v17 >> 58) {
      sub_188D718();
    }
    unint64_t v18 = v17 << 6;
    uint64_t v19 = (char *)operator new(v17 << 6);
    uint64_t v20 = v19;
    unint64_t v21 = &v19[64 * (v17 >> 2)];
    BOOL v22 = &v19[v18];
    uint64_t v23 = v4 - v5;
    if (v4 == v5)
    {
      *(void *)a1 = v19;
      *(void *)(a1 + 8) = v21;
      *(void *)(a1 + 16) = v21;
      *(void *)(a1 + 24) = v22;
      if (!v6) {
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v24 = &v21[v23 & 0xFFFFFFFFFFFFFFC0];
      uint64_t v25 = v23 >> 6 << 6;
      uint64_t v26 = (uint64_t)v21;
      do
      {
        uint64_t v26 = sub_3CA508(v26, v5) + 64;
        v5 += 64;
        v25 -= 64;
      }
      while (v25);
      uint64_t v6 = *(void **)a1;
      uint64_t v27 = *(void *)(a1 + 8);
      uint64_t v28 = *(void *)(a1 + 16);
      *(void *)a1 = v20;
      *(void *)(a1 + 8) = v21;
      *(void *)(a1 + 16) = v24;
      for (*(void *)(a1 + 24) = v22; v28 != v27; uint64_t v28 = sub_11C6DFC(v28 - 64))
        ;
      if (!v6) {
        goto LABEL_32;
      }
    }
    operator delete(v6);
LABEL_32:
    uint64_t v4 = *(void *)(a1 + 16);
    goto LABEL_36;
  }
  uint64_t v7 = (uint64_t)(v5 - *(void *)a1) >> 6;
  if (v7 >= -1) {
    uint64_t v8 = v7 + 1;
  }
  else {
    uint64_t v8 = v7 + 2;
  }
  uint64_t v9 = v8 >> 1;
  uint64_t v10 = -v9;
  if (v5 == v4)
  {
    uint64_t v29 = v5 - (v9 << 6);
  }
  else
  {
    uint64_t v11 = -64 * v9;
    do
    {
      if (v11)
      {
        uint64_t v12 = v5 + v11;
        uint64_t v13 = *(void *)(v5 + v11 + 8);
        if ((v13 & 2) != 0)
        {
          uint64_t v14 = 0;
        }
        else
        {
          uint64_t v14 = (void *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
          if (v13) {
            uint64_t v14 = (void *)*v14;
          }
        }
        uint64_t v15 = *(void *)(v5 + 8);
        if ((v15 & 2) != 0)
        {
          uint64_t v16 = 0;
        }
        else
        {
          uint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
          if (v15) {
            uint64_t v16 = (void *)*v16;
          }
        }
        if (v14 == v16) {
          sub_11C7674(v12, v5);
        }
        else {
          sub_11C7620(v12, v5);
        }
      }
      v5 += 64;
    }
    while (v5 != v4);
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v29 = v5 + (v10 << 6);
  }
  *(void *)(a1 + 8) = v4 + (v10 << 6);
  *(void *)(a1 + 16) = v29;
  uint64_t v4 = v29;
LABEL_36:
  uint64_t result = sub_3CA508(v4, a2);
  *(void *)(a1 + 16) += 64;
  return result;
}

void sub_3CAAE8()
{
  byte_2557C07 = 1;
  word_2557BF0 = 65;
  byte_2557C1F = 1;
  word_2557C08 = 65;
  char v1 = 7;
  strcpy((char *)v0, "UNKNOWN");
  int v2 = 0;
  char v4 = 14;
  strcpy((char *)v3, "ROUTES_THROUGH");
  int v5 = 1;
  char v7 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v8 = 3;
  char v10 = 11;
  strcpy((char *)v9, "ROUTES_FROM");
  int v11 = 2;
  xmmword_2557C80 = 0u;
  *(_OWORD *)&qword_2557C90 = 0u;
  dword_2557CA0 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2557C80, (uint64_t)v0, (uint64_t)v0);
  sub_3A6EF0((uint64_t)&xmmword_2557C80, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_2557C80, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_2557C80, (uint64_t)v9, (uint64_t)v9);
  if (v10 < 0)
  {
    operator delete(v9[0]);
    if ((v7 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v3[0]);
      if ((v1 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v0[0]);
      goto LABEL_5;
    }
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v4 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v1 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_2557C37 = 8;
  strcpy((char *)&qword_2557C20, "any_mode");
  byte_2557C4F = 7;
  strcpy((char *)&dword_2557C38, "cycling");
  byte_2557C67 = 7;
  strcpy((char *)&dword_2557C50, "driving");
  byte_2557C7F = 7;
  strcpy((char *)&dword_2557C68, "walking");
}

void sub_3CAD44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_2557C90) {
    sub_20A7FD4((void **)qword_2557C90);
  }
  unint64_t v37 = (void *)xmmword_2557C80;
  *(void *)&xmmword_2557C80 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

_DWORD *sub_3CADE4(_DWORD *a1, uint64_t a2)
{
  uint64_t v13 = 0;
  uint64_t v14 = operator new(0x28uLL);
  long long v15 = xmmword_20B93A0;
  strcpy((char *)v14, "UpcomingScenarioInstanceComputation");
  int v11 = 0;
  uint64_t v12 = 0;
  char v4 = sub_374CDC(a2, (uint64_t)&v14, (uint64_t *)&v11);
  std::string __p = operator new(0x30uLL);
  long long v10 = xmmword_20B9A80;
  strcpy((char *)__p, "maximum_time_for_upcoming_scenario_instances_s");
  *a1 = 10 * sub_319F48(v4, (uint64_t)&__p);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p);
  }
  int v5 = (void **)v11;
  if (v11)
  {
    uint64_t v6 = v12;
    char v7 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      char v7 = v11;
    }
    uint64_t v12 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14);
  }
  return a1;
}

void sub_3CAF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_1A668(&a16);
    if ((a24 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_1A668(&a16);
    if ((a24 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(a19);
  _Unwind_Resume(a1);
}

void sub_3CAFB8(int *a1, void *a2, uint64_t *a3, uint64_t a4)
{
  if (*a3 != a3[1])
  {
    uint64_t v6 = (char **)(a4 + 8);
    unint64_t v7 = 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a4 + 16) - *(void *)(a4 + 8)) >> 3);
    if (v7 < sub_45FC7C(a2))
    {
      unint64_t v8 = sub_45FC7C(a2);
      uint64_t v9 = *(void *)(a4 + 8);
      long long v10 = *(char ***)(a4 + 16);
      unint64_t v11 = 0x8E38E38E38E38E39 * (((uint64_t)v10 - v9) >> 3);
      if (v8 <= v11)
      {
        if (v8 < v11)
        {
          uint64_t v12 = (char **)(v9 + 72 * v8);
          while (v10 != v12)
          {
            v10 -= 9;
            sub_3A688C(a4 + 24, v10);
          }
          *(void *)(a4 + 16) = v12;
        }
      }
      else
      {
        sub_3A88A4(v6, v8 - v11);
      }
    }
    uint64_t v13 = *a3;
    uint64_t v14 = a3[1];
    long long v15 = a2;
    if (*a3 != v14)
    {
      uint64_t v16 = &off_2535340;
      uint64_t v48 = a3[1];
      while (1)
      {
        if (!*(unsigned char *)(v13 + 148)) {
          goto LABEL_13;
        }
        uint64_t v19 = *(uint64_t (****)())(v13 + 112);
        if (!v19) {
          uint64_t v19 = v16;
        }
        unsigned int v20 = *((_DWORD *)v19 + 8);
        if (*a1 < 0) {
          char v21 = -5;
        }
        else {
          char v21 = 5;
        }
        if (v20 > *a1 / 10
                 + (((103 * (char)(v21 + *a1 % 10)) >> 15) & 1)
                 + ((103 * (char)(v21 + *a1 % 10)) >> 10))
          return;
        BOOL v22 = (void *)sub_45FB28(v15, *(void *)(v13 + 8));
        uint64_t v23 = (int **)sub_46C8EC(v22, *(void *)(v13 + 24) - 1);
        uint64_t v24 = (unsigned __int16 *)((char *)*v23 - **v23);
        if (*v24 >= 0x1Du && (uint64_t v25 = v24[14]) != 0) {
          uint64_t v26 = *(void *)((char *)*v23 + v25);
        }
        else {
          uint64_t v26 = 0;
        }
        uint64_t v27 = *((unsigned char *)v23 + 38) ? -v26 : v26;
        uint64_t v28 = (uint64_t)&(*v6)[72 * *(void *)(v13 + 8)];
        uint64_t v29 = v28 + 24;
        uint64_t v30 = *(void *)(v13 + 136);
        unsigned int v32 = *(char **)(v28 + 32);
        unint64_t v31 = *(void *)(v28 + 40);
        if ((unint64_t)v32 >= v31) {
          break;
        }
        uint64_t v17 = *(void *)(v13 + 40);
        *(_DWORD *)unsigned int v32 = *(_DWORD *)v13;
        *((void *)v32 + 1) = v30;
        *((void *)v32 + 2) = v27;
        *((void *)v32 + 3) = v17;
        unint64_t v18 = v32 + 32;
LABEL_12:
        *(void *)(v29 + 8) = v18;
LABEL_13:
        v13 += 176;
        if (v13 == v14) {
          return;
        }
      }
      uint64_t v33 = *(char **)v29;
      uint64_t v34 = (uint64_t)&v32[-*(void *)v29] >> 5;
      unint64_t v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 59) {
        sub_2E00();
      }
      uint64_t v36 = v31 - (void)v33;
      if (v36 >> 4 > v35) {
        unint64_t v35 = v36 >> 4;
      }
      BOOL v37 = (unint64_t)v36 >= 0x7FFFFFFFFFFFFFE0;
      unint64_t v38 = 0x7FFFFFFFFFFFFFFLL;
      if (!v37) {
        unint64_t v38 = v35;
      }
      if (v38 >> 59) {
        sub_188D718();
      }
      uint64_t v39 = v6;
      uint64_t v40 = v16;
      uint64_t v41 = 32 * v38;
      uint64_t v42 = (char *)operator new(32 * v38);
      uint64_t v43 = *(void *)(v13 + 40);
      unsigned int v44 = &v42[32 * v34];
      *(_DWORD *)unsigned int v44 = *(_DWORD *)v13;
      *((void *)v44 + 1) = v30;
      *((void *)v44 + 2) = v27;
      *((void *)v44 + 3) = v43;
      if (v32 == v33)
      {
        unint64_t v18 = v44 + 32;
        *(void *)uint64_t v29 = v44;
        *(void *)(v29 + 8) = v44 + 32;
        *(void *)(v29 + 16) = &v42[v41];
        if (!v33) {
          goto LABEL_40;
        }
      }
      else
      {
        uint64_t v45 = &v42[32 * v34];
        do
        {
          long long v46 = *((_OWORD *)v32 - 1);
          long long v47 = v45 - 32;
          *((_OWORD *)v45 - 2) = *((_OWORD *)v32 - 2);
          *((_OWORD *)v45 - 1) = v46;
          v32 -= 32;
          v45 -= 32;
        }
        while (v32 != v33);
        unint64_t v18 = v44 + 32;
        *(void *)uint64_t v29 = v47;
        *(void *)(v29 + 8) = v44 + 32;
        *(void *)(v29 + 16) = &v42[v41];
        if (!v33) {
          goto LABEL_40;
        }
      }
      operator delete(v33);
LABEL_40:
      uint64_t v16 = v40;
      uint64_t v6 = v39;
      uint64_t v14 = v48;
      long long v15 = a2;
      goto LABEL_12;
    }
  }
}

void sub_3CB2C8()
{
  unk_2557CBF = 16641;
  word_2557CA8 = 65;
  byte_2557CD7 = 1;
  byte_2557CC1 = 0;
}

void sub_3CB2F0(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_560F4(a1, (uint64_t)&dword_2557CF8);
  uint64_t v5 = sub_560F4(a1, (uint64_t)&qword_2557CE0);
  uint64_t v6 = (void *)sub_54214(a2, v5);
  sub_59234(v6, v4);
}

void sub_3CB350(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void ***)(v1 + 16);
  if (v3) {
    sub_20A8018(v3);
  }
  sub_20A62E8((void **)v1);
  _Unwind_Resume(a1);
}

void sub_3CB370(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if (a2 == 3)
  {
    unint64_t v7 = &dword_2557CF8;
  }
  else if (a2 == 2)
  {
    unint64_t v7 = &dword_2557D28;
  }
  else if (a2)
  {
    unint64_t v7 = (int *)&qword_2557D40;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2557CD8, memory_order_acquire) & 1) == 0)
    {
      if (__cxa_guard_acquire(&qword_2557CD8))
      {
        qword_2557D48 = 0;
        unk_2557D50 = 0;
        qword_2557D40 = 0;
        __cxa_guard_release(&qword_2557CD8);
      }
      unint64_t v7 = (int *)&qword_2557D40;
    }
  }
  else
  {
    unint64_t v7 = &dword_2557D10;
  }
  uint64_t v8 = sub_560F4(a1, (uint64_t)v7);
  uint64_t v9 = sub_560F4(a1, (uint64_t)&qword_2557CE0);
  long long v10 = (void *)sub_54214((uint64_t)a4, v9);
  sub_59234(v10, v8);
  if (a3)
  {
    sub_3F8360(a3, (char *)v19);
    *(_OWORD *)std::string __p = 0u;
    long long v17 = 0u;
    int v18 = 1065353216;
    unint64_t v11 = sub_58070(a1, (uint64_t)v19);
    if (v11 && *((_DWORD *)v11 + 12) == 2) {
      uint64_t v12 = (void **)v11[5];
    }
    else {
      uint64_t v12 = __p;
    }
    sub_59234(a4, (uint64_t)v12);
    uint64_t v13 = (void **)v17;
    if ((void)v17)
    {
      do
      {
        long long v15 = (void **)*v13;
        sub_55198((uint64_t)(v13 + 5));
        if (*((char *)v13 + 39) < 0) {
          operator delete(v13[2]);
        }
        operator delete(v13);
        uint64_t v13 = v15;
      }
      while (v15);
    }
    uint64_t v14 = __p[0];
    __p[0] = 0;
    if (v14) {
      operator delete(v14);
    }
    if (v20 < 0) {
      operator delete(v19[0]);
    }
  }
}

void sub_3CB50C(_Unwind_Exception *a1)
{
  sub_5450C(v1);
  _Unwind_Resume(a1);
}

void sub_3CB520(_Unwind_Exception *a1)
{
  sub_5450C(v1);
  _Unwind_Resume(a1);
}

void sub_3CB534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_5450C((uint64_t)&a9);
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_5450C(v19);
  _Unwind_Resume(a1);
}

void sub_3CB560(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_560F4(a1, (uint64_t)&dword_2557D10);
  uint64_t v5 = sub_560F4(a1, (uint64_t)&qword_2557CE0);
  uint64_t v6 = (void *)sub_54214(a2, v5);
  sub_59234(v6, v4);
}

void sub_3CB5C0(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void ***)(v1 + 16);
  if (v3) {
    sub_20A8018(v3);
  }
  sub_20A62E8((void **)v1);
  _Unwind_Resume(a1);
}

void sub_3CB5E0(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_560F4(a1, (uint64_t)&dword_2557D28);
  uint64_t v5 = sub_560F4(a1, (uint64_t)&qword_2557CE0);
  uint64_t v6 = (void *)sub_54214(a2, v5);
  sub_59234(v6, v4);
}

void sub_3CB640(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void ***)(v1 + 16);
  if (v3) {
    sub_20A8018(v3);
  }
  sub_20A62E8((void **)v1);
  _Unwind_Resume(a1);
}

void sub_3CB660(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  long long v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v5 = sub_560F4(a1, a2);
  sub_3CB7EC(&v15, v5);
  while (1)
  {
    uint64_t v6 = (void *)*((void *)v16 - 1);
    char v14 = 6;
    strcpy((char *)__p, "parent");
    unint64_t v7 = sub_58070(v6, (uint64_t)__p);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = (void *)*((void *)v16 - 1);
    if (!v7) {
      break;
    }
    char v14 = 6;
    strcpy((char *)__p, "parent");
    uint64_t v9 = sub_561B0(v8, (uint64_t)__p);
    uint64_t v10 = sub_560F4(a1, v9);
    sub_3CB7EC(&v15, v10);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_54214((uint64_t)a3, *((void *)v16 - 1));
  while (1)
  {
    unint64_t v11 = v16;
    uint64_t v12 = v16 - 8;
    uint64_t v16 = v12;
    if (v15 == v12) {
      break;
    }
    sub_59234(a3, *((void *)v11 - 2));
  }
  uint64_t v16 = v12;
  operator delete(v12);
}

void sub_3CB784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_3CB7EC(char **a1, uint64_t a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  uint64_t v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(void *)uint64_t v5 = a2;
    uint64_t v7 = (uint64_t)(v5 + 8);
    goto LABEL_23;
  }
  uint64_t v8 = *a1;
  uint64_t v9 = v5 - *a1;
  uint64_t v10 = v9 >> 3;
  unint64_t v11 = (v9 >> 3) + 1;
  if (v11 >> 61) {
    sub_2E00();
  }
  uint64_t v12 = v4 - (void)v8;
  if (v12 >> 2 > v11) {
    unint64_t v11 = v12 >> 2;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 >> 61) {
      sub_188D718();
    }
    char v14 = operator new(8 * v13);
    long long v15 = &v14[8 * v10];
    uint64_t v16 = &v14[8 * v13];
    *(void *)long long v15 = a2;
    uint64_t v7 = (uint64_t)(v15 + 8);
    uint64_t v17 = (char *)(v5 - v8);
    if (v5 == v8) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  char v14 = 0;
  long long v15 = (char *)(8 * v10);
  uint64_t v16 = 0;
  *(void *)(8 * v10) = a2;
  uint64_t v7 = 8 * v10 + 8;
  uint64_t v17 = (char *)(v5 - v8);
  if (v5 != v8)
  {
LABEL_14:
    unint64_t v18 = (unint64_t)(v17 - 8);
    if (v18 < 0x58) {
      goto LABEL_28;
    }
    if ((unint64_t)(v5 - v14 - v9) < 0x20) {
      goto LABEL_28;
    }
    uint64_t v19 = (v18 >> 3) + 1;
    uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v6 = &v5[-v20];
    v15 -= v20;
    char v21 = &v14[8 * v10 - 16];
    BOOL v22 = v5 - 16;
    uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      _OWORD *v21 = v24;
      v21 -= 2;
      v22 -= 32;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        uint64_t v25 = *((void *)v6 - 1);
        v6 -= 8;
        *((void *)v15 - 1) = v25;
        v15 -= 8;
      }
      while (v6 != v8);
    }
    uint64_t v6 = *a1;
  }
LABEL_21:
  *a1 = v15;
  a1[1] = (char *)v7;
  a1[2] = v16;
  if (v6) {
    operator delete(v6);
  }
LABEL_23:
  a1[1] = (char *)v7;
  return v7 - 8;
}

void sub_3CB968()
{
  byte_2557CF7 = 8;
  strcpy((char *)&qword_2557CE0, "any_mode");
  byte_2557D0F = 7;
  strcpy((char *)&dword_2557CF8, "cycling");
  byte_2557D27 = 7;
  strcpy((char *)&dword_2557D10, "driving");
  byte_2557D3F = 7;
  strcpy((char *)&dword_2557D28, "walking");
}

void sub_3CB9F8(void *a1, long long **a2, uint64_t a3)
{
  long long v73 = 0u;
  long long v74 = 0u;
  int v75 = 1065353216;
  memset(&__str, 0, sizeof(__str));
  memset(&v71, 0, sizeof(v71));
  if (*(void *)sub_374CE4(a1))
  {
    uint64_t v6 = (uint64_t *)sub_374CE4(a1);
    uint64_t v7 = (void *)sub_2ABCB4(*v6);
    uint64_t v8 = v7;
    if (*v7 != v7[1])
    {
      sub_7585C((char *)(*v7 + 48), (uint64_t)v66);
      if (SBYTE7(v67) < 0)
      {
        sub_4200(__p, v66[0], (unint64_t)v66[1]);
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)v66;
        __p[2] = (void *)v67;
      }
      uint64_t v9 = __p[0];
      *(void **)&long long v79 = __p[1];
      *(void **)((char *)&v79 + 7) = *(void **)((char *)&__p[1] + 7);
      char v10 = HIBYTE(__p[2]);
      memset(__p, 0, 24);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__str.__r_.__value_.__l.__data_);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
        __str.__r_.__value_.__l.__size_ = v79;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v79 + 7);
        *((unsigned char *)&__str.__r_.__value_.__s + 23) = v10;
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
        __str.__r_.__value_.__l.__size_ = v79;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v79 + 7);
        *((unsigned char *)&__str.__r_.__value_.__s + 23) = v10;
      }
      unint64_t v11 = sub_3CC750(v8);
      std::to_string(&v69, v11);
      *(void *)&long long v79 = v69.__r_.__value_.__l.__size_;
      std::string::size_type v12 = v69.__r_.__value_.__r.__words[0];
      *(void *)((char *)&v79 + 7) = *(std::string::size_type *)((char *)&v69.__r_.__value_.__r.__words[1] + 7);
      char v13 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
      memset(&v69, 0, sizeof(v69));
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v71.__r_.__value_.__l.__data_);
        v71.__r_.__value_.__r.__words[0] = v12;
        v71.__r_.__value_.__l.__size_ = v79;
        *(std::string::size_type *)((char *)&v71.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v79 + 7);
        *((unsigned char *)&v71.__r_.__value_.__s + 23) = v13;
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v69.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        v71.__r_.__value_.__r.__words[0] = v12;
        v71.__r_.__value_.__l.__size_ = v79;
        *(std::string::size_type *)((char *)&v71.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v79 + 7);
        *((unsigned char *)&v71.__r_.__value_.__s + 23) = v13;
      }
      if (SBYTE7(v67) < 0) {
        operator delete(v66[0]);
      }
    }
  }
  *(_OWORD *)uint64_t v66 = 0u;
  long long v67 = 0u;
  int v68 = 1065353216;
  BYTE7(v80) = 13;
  strcpy((char *)&v79, "build_version");
  v58[0] = &v79;
  char v14 = sub_8FFD4((uint64_t)v66, (uint64_t)&v79, (uint64_t)&unk_20F06E0, (long long **)v58);
  sub_6277C((uint64_t)(v14 + 40), &__str);
  if (SBYTE7(v80) < 0) {
    operator delete((void *)v79);
  }
  BYTE7(v80) = 9;
  strcpy((char *)&v79, "Artifacts");
  v58[0] = &v79;
  long long v15 = sub_8FFD4((uint64_t)&v73, (uint64_t)&v79, (uint64_t)&unk_20F06E0, (long long **)v58);
  sub_39BA44(*((_DWORD *)v15 + 12), (void ***)v15 + 5, (uint64_t)v66);
  *((_DWORD *)v15 + 12) = 2;
  if (SBYTE7(v80) < 0) {
    operator delete((void *)v79);
  }
  int v81 = 1065353216;
  BYTE7(v59) = 11;
  long long v79 = 0u;
  long long v80 = 0u;
  strcpy((char *)v58, "hsp_version");
  uint64_t v63 = v58;
  uint64_t v16 = sub_8FFD4((uint64_t)&v79, (uint64_t)v58, (uint64_t)&unk_20F06E0, (long long **)&v63);
  sub_6277C((uint64_t)(v16 + 40), &v71);
  if (SBYTE7(v59) < 0) {
    operator delete(v58[0]);
  }
  BYTE7(v59) = 7;
  strcpy((char *)v58, "Sources");
  uint64_t v63 = v58;
  uint64_t v17 = sub_8FFD4((uint64_t)&v73, (uint64_t)v58, (uint64_t)&unk_20F06E0, (long long **)&v63);
  sub_39BA44(*((_DWORD *)v17 + 12), (void ***)v17 + 5, (uint64_t)&v79);
  *((_DWORD *)v17 + 12) = 2;
  if (SBYTE7(v59) < 0) {
    operator delete(v58[0]);
  }
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  unint64_t v65 = 0;
  unint64_t v18 = *a2;
  if (*a2 != a2[1])
  {
    if (*((char *)v18 + 23) < 0)
    {
      sub_4200(__dst, *(void **)v18, *((void *)v18 + 1));
    }
    else
    {
      long long v19 = *v18;
      uint64_t v62 = *((void *)v18 + 2);
      *(_OWORD *)long long __dst = v19;
    }
    *(_OWORD *)uint64_t v58 = *(_OWORD *)__dst;
    *(void *)&long long v59 = v62;
    __dst[1] = 0;
    uint64_t v62 = 0;
    __dst[0] = 0;
    if ((unint64_t)v64 < v65) {
      operator new();
    }
    sub_3CC8D8(&v63);
  }
  uint64_t v20 = (void *)sub_374D14(a1);
  int v60 = 1065353216;
  *((unsigned char *)&v57.__r_.__value_.__s + 23) = 12;
  *(_OWORD *)uint64_t v58 = 0u;
  long long v59 = 0u;
  strcpy((char *)&v57, "snapshot_ids");
  v77[0] = (long long *)&v57;
  char v21 = sub_8FFD4((uint64_t)v58, (uint64_t)&v57, (uint64_t)&unk_20F06E0, v77);
  sub_9051C(*((_DWORD *)v21 + 12), (uint64_t **)v21 + 5, (uint64_t *)&v63);
  *((_DWORD *)v21 + 12) = 3;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  BOOL v22 = sub_299C50(v20);
  if (*((char *)v22 + 23) < 0)
  {
    sub_4200(&v56, (void *)*v22, v22[1]);
  }
  else
  {
    long long v23 = *(_OWORD *)v22;
    v56.__r_.__value_.__r.__words[2] = v22[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v23;
  }
  std::string v57 = v56;
  char v78 = 12;
  memset(&v56, 0, sizeof(v56));
  double v76 = COERCE_DOUBLE(v77);
  strcpy((char *)v77, "code_version");
  long long v24 = sub_8FFD4((uint64_t)v58, (uint64_t)v77, (uint64_t)&unk_20F06E0, (long long **)&v76);
  sub_6277C((uint64_t)(v24 + 40), &v57);
  if ((v78 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_38;
    }
LABEL_42:
    operator delete(v57.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_43;
  }
  operator delete(v77[0]);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_42;
  }
LABEL_38:
  if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_39;
  }
LABEL_43:
  operator delete(v56.__r_.__value_.__l.__data_);
LABEL_39:
  uint64_t v25 = sub_299CE4(v20);
  if (*((char *)v25 + 23) < 0)
  {
    sub_4200(&v55, (void *)*v25, v25[1]);
  }
  else
  {
    long long v26 = *(_OWORD *)v25;
    v55.__r_.__value_.__r.__words[2] = v25[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v26;
  }
  std::string v57 = v55;
  char v78 = 12;
  memset(&v55, 0, sizeof(v55));
  double v76 = COERCE_DOUBLE(v77);
  strcpy((char *)v77, "data_version");
  uint64_t v27 = sub_8FFD4((uint64_t)v58, (uint64_t)v77, (uint64_t)&unk_20F06E0, (long long **)&v76);
  sub_6277C((uint64_t)(v27 + 40), &v57);
  if ((v78 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_47;
    }
LABEL_57:
    operator delete(v57.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_58;
  }
  operator delete(v77[0]);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_57;
  }
LABEL_47:
  if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_48;
  }
LABEL_58:
  operator delete(v55.__r_.__value_.__l.__data_);
LABEL_48:
  if (sub_299C38((uint64_t)v20) == 0x7FFFFFFF) {
    goto LABEL_62;
  }
  double v76 = (double)(int)sub_299C38((uint64_t)v20);
  *((unsigned char *)&v57.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v57, "download_time");
  v77[0] = (long long *)&v57;
  uint64_t v28 = sub_8FFD4((uint64_t)v58, (uint64_t)&v57, (uint64_t)&unk_20F06E0, v77);
  uint64_t v29 = (uint64_t *)(v28 + 40);
  uint64_t v30 = *((unsigned int *)v28 + 12);
  if (v30 == 1) {
    goto LABEL_55;
  }
  if (!v30)
  {
    uint64_t v31 = *v29;
    *uint64_t v29 = 0;
    if (v31)
    {
      if (*(char *)(v31 + 23) < 0) {
        operator delete(*(void **)v31);
      }
      operator delete();
    }
LABEL_55:
    *(double *)uint64_t v29 = v76;
    goto LABEL_60;
  }
  sub_3CCA68(v30, v29, (uint64_t *)&v76);
LABEL_60:
  *((_DWORD *)v28 + 12) = 1;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
LABEL_62:
  *((unsigned char *)&v57.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&v57, "TrafficApi");
  v77[0] = (long long *)&v57;
  unsigned int v32 = sub_8FFD4((uint64_t)&v73, (uint64_t)&v57, (uint64_t)&unk_20F06E0, v77);
  sub_39BA44(*((_DWORD *)v32 + 12), (void ***)v32 + 5, (uint64_t)v58);
  *((_DWORD *)v32 + 12) = 2;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  *((unsigned char *)&v57.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v57, "DataVersions");
  v77[0] = (long long *)&v57;
  uint64_t v33 = sub_8FFD4(a3, (uint64_t)&v57, (uint64_t)&unk_20F06E0, v77);
  sub_39BA44(*((_DWORD *)v33 + 12), (void ***)v33 + 5, (uint64_t)&v73);
  *((_DWORD *)v33 + 12) = 2;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  uint64_t v34 = sub_69510();
  if (!sub_6913C((uint64_t)v34)) {
    goto LABEL_81;
  }
  LODWORD(v77[1]) = 4;
  v57.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v57.__r_.__value_.__r.__words[1] = xmmword_20B8870;
  strcpy(v57.__r_.__value_.__l.__data_, "economic_path_computation");
  double v76 = COERCE_DOUBLE(&v57);
  unint64_t v35 = sub_8FFD4(a3, (uint64_t)&v57, (uint64_t)&unk_20F06E0, (long long **)&v76);
  sub_58A78((uint64_t)(v35 + 40), (uint64_t)v77);
  if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    int v36 = (int)v77[1];
    if (LODWORD(v77[1]) != 3) {
      goto LABEL_69;
    }
LABEL_76:
    unint64_t v38 = (uint64_t *)v77[0];
    v77[0] = 0;
    if (v38)
    {
      sub_55500(v38);
      goto LABEL_80;
    }
    goto LABEL_81;
  }
  operator delete(v57.__r_.__value_.__l.__data_);
  int v36 = (int)v77[1];
  if (LODWORD(v77[1]) == 3) {
    goto LABEL_76;
  }
LABEL_69:
  if (v36 == 2)
  {
    uint64_t v39 = v77[0];
    v77[0] = 0;
    if (v39)
    {
      sub_5450C((uint64_t)v39);
      goto LABEL_80;
    }
  }
  else if (!v36)
  {
    BOOL v37 = v77[0];
    v77[0] = 0;
    if (v37)
    {
      if (*((char *)v37 + 23) < 0) {
        operator delete(*(void **)v37);
      }
LABEL_80:
      operator delete();
    }
  }
LABEL_81:
  uint64_t v40 = (void *)v59;
  if ((void)v59)
  {
    do
    {
      uint64_t v41 = (void *)*v40;
      sub_5AF78((uint64_t)(v40 + 2));
      operator delete(v40);
      uint64_t v40 = v41;
    }
    while (v41);
  }
  uint64_t v42 = v58[0];
  v58[0] = 0;
  if (v42) {
    operator delete(v42);
  }
  uint64_t v43 = v63;
  if (v63)
  {
    uint64_t v44 = (uint64_t)v64;
    uint64_t v45 = v63;
    if (v64 != v63)
    {
      do
        uint64_t v44 = sub_55198(v44 - 16);
      while ((void *)v44 != v43);
      uint64_t v45 = v63;
    }
    uint64_t v64 = v43;
    operator delete(v45);
  }
  long long v46 = (void *)v80;
  if ((void)v80)
  {
    do
    {
      long long v47 = (void *)*v46;
      sub_5AF78((uint64_t)(v46 + 2));
      operator delete(v46);
      long long v46 = v47;
    }
    while (v47);
  }
  uint64_t v48 = (void *)v79;
  *(void *)&long long v79 = 0;
  if (v48) {
    operator delete(v48);
  }
  uint64_t v49 = (void *)v67;
  if ((void)v67)
  {
    do
    {
      uint64_t v50 = (void *)*v49;
      sub_5AF78((uint64_t)(v49 + 2));
      operator delete(v49);
      uint64_t v49 = v50;
    }
    while (v50);
  }
  unsigned int v51 = v66[0];
  v66[0] = 0;
  if (v51) {
    operator delete(v51);
  }
  if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_100;
    }
LABEL_106:
    operator delete(__str.__r_.__value_.__l.__data_);
    unsigned int v52 = (void *)v74;
    if (!(void)v74) {
      goto LABEL_102;
    }
    goto LABEL_101;
  }
  operator delete(v71.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_106;
  }
LABEL_100:
  unsigned int v52 = (void *)v74;
  if (!(void)v74) {
    goto LABEL_102;
  }
  do
  {
LABEL_101:
    int v53 = (void *)*v52;
    sub_5AF78((uint64_t)(v52 + 2));
    operator delete(v52);
    unsigned int v52 = v53;
  }
  while (v53);
LABEL_102:
  long long v54 = (void *)v73;
  *(void *)&long long v73 = 0;
  if (v54) {
    operator delete(v54);
  }
}

void sub_3CC520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a53 < 0)
  {
    operator delete(__p);
    if (*(char *)(v53 - 217) < 0)
    {
LABEL_5:
      operator delete(*(void **)(v53 - 240));
      if ((*(char *)(v53 - 193) & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_8;
    }
  }
  else if (*(char *)(v53 - 217) < 0)
  {
    goto LABEL_5;
  }
  if ((*(char *)(v53 - 193) & 0x80000000) == 0)
  {
LABEL_6:
    sub_553C0(v53 - 192);
    _Unwind_Resume(a1);
  }
LABEL_8:
  operator delete(*(void **)(v53 - 216));
  sub_553C0(v53 - 192);
  _Unwind_Resume(a1);
}

uint64_t sub_3CC750(void *a1)
{
  if (*a1 == a1[1]) {
    return 0;
  }
  uint64_t v1 = sub_50BE8(*a1 + 48);
  unint64_t v4 = *(unsigned __int8 **)(v1 + 24);
  uint64_t v2 = v1 + 24;
  uint64_t v3 = v4;
  uint64_t v5 = (unsigned __int8 *)*(unsigned __int8 *)(v2 + 23);
  if ((char)v5 < 0) {
    uint64_t v5 = *(unsigned __int8 **)(v2 + 8);
  }
  else {
    uint64_t v3 = (unsigned __int8 *)v2;
  }
  v15[0] = v3;
  v15[1] = v5;
  sub_230E8(v15, 0x5Fu, (uint64_t)&__p);
  uint64_t v6 = (const std::string *)__p;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v17 - (unsigned char *)__p) >> 3) < 2)
  {
LABEL_16:
    uint64_t v11 = 0;
    if (__p) {
      goto LABEL_17;
    }
    return v11;
  }
  data = (unsigned __int8 *)v17[-1].__r_.__value_.__l.__data_;
  int v8 = SHIBYTE(v17[-1].__r_.__value_.__r.__words[2]);
  BOOL v9 = v8 < 0;
  if (v8 >= 0) {
    data = (unsigned __int8 *)&v17[-1];
  }
  std::string::size_type size = HIBYTE(v17[-1].__r_.__value_.__r.__words[2]);
  if (v9) {
    std::string::size_type size = v17[-1].__r_.__value_.__l.__size_;
  }
  if (size)
  {
    while (((char)*data & 0x80000000) == 0 && (_DefaultRuneLocale.__runetype[*data] & 0x400) != 0)
    {
      ++data;
      if (!--size) {
        goto LABEL_14;
      }
    }
    goto LABEL_16;
  }
LABEL_14:
  uint64_t v11 = std::stoi(v17 - 1, 0, 10);
  uint64_t v6 = (const std::string *)__p;
  if (!__p) {
    return v11;
  }
LABEL_17:
  p_data = (void **)&v17->__r_.__value_.__l.__data_;
  char v14 = (void *)v6;
  if (v17 != v6)
  {
    do
    {
      if (*((char *)p_data - 1) < 0) {
        operator delete(*(p_data - 3));
      }
      p_data -= 3;
    }
    while (p_data != (void **)v6);
    char v14 = __p;
  }
  uint64_t v17 = v6;
  operator delete(v14);
  return v11;
}

void sub_3CC8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_3CC8D8(void *a1)
{
  unint64_t v1 = ((uint64_t)(a1[1] - *a1) >> 4) + 1;
  if (!(v1 >> 60))
  {
    uint64_t v2 = a1[2] - *a1;
    if (v2 >> 3 > v1) {
      unint64_t v1 = v2 >> 3;
    }
    if ((unint64_t)v2 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v3 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v3 = v1;
    }
    if (v3)
    {
      if (v3 >> 60) {
        sub_188D718();
      }
      operator new(16 * v3);
    }
    operator new();
  }
  sub_2E00();
}

void sub_3CCA54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5844C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_3CCA68(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  if (result == 3)
  {
    unint64_t v3 = (void **)*a2;
    *a2 = 0;
    if (v3)
    {
      unint64_t v4 = *v3;
      if (*v3)
      {
        uint64_t v5 = (uint64_t)v3[1];
        uint64_t v6 = *v3;
        if ((void *)v5 != v4)
        {
          do
            uint64_t v5 = sub_55198(v5 - 16);
          while ((void *)v5 != v4);
          uint64_t v6 = *v3;
        }
        v3[1] = v4;
        operator delete(v6);
      }
LABEL_11:
      operator delete();
    }
  }
  else if (result == 2)
  {
    uint64_t result = *a2;
    *a2 = 0;
    if (result)
    {
      sub_5450C(result);
      goto LABEL_11;
    }
  }
  *a2 = *a3;
  return result;
}

void sub_3CCB2C()
{
  unk_2557D6F = 16641;
  word_2557D58 = 65;
  byte_2557D87 = 1;
  byte_2557D71 = 0;
}

uint64_t sub_3CCB54(uint64_t a1, void *a2)
{
  *(_DWORD *)a1 = 0;
  *(_WORD *)(a1 + 4) = 0;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "transition_max_angle");
  unint64_t v4 = sub_58070(a2, (uint64_t)__p);
  if (v4 && *((_DWORD *)v4 + 12) == 1)
  {
    *(_WORD *)a1 = (int)*((double *)v4 + 5);
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_6;
    }
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a1;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_6:
    }
      operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "transition_min_u_turn_angle");
  uint64_t v5 = sub_58070(a2, (uint64_t)__p);
  if (v5 && *((_DWORD *)v5 + 12) == 1)
  {
    *(_WORD *)(a1 + 2) = (int)*((double *)v5 + 5);
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_12;
    }
  }
  else
  {
    *(_WORD *)(a1 + 2) = *(_WORD *)(a1 + 2);
    if (SHIBYTE(__p[2]) < 0) {
LABEL_12:
    }
      operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9240;
  strcpy((char *)__p[0], "transition_same_name_min_u_turn_angle");
  uint64_t v6 = sub_58070(a2, (uint64_t)__p);
  if (v6 && *((_DWORD *)v6 + 12) == 1)
  {
    *(_WORD *)(a1 + 4) = (int)*((double *)v6 + 5);
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_19;
    }
    return a1;
  }
  *(_WORD *)(a1 + 4) = *(_WORD *)(a1 + 4);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
    return a1;
  }
LABEL_19:
  operator delete(__p[0]);
  return a1;
}

void sub_3CCD14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_3CCD38(uint64_t *a1, void *a2)
{
  *a1 = sub_3750CC(a2);
  uint64_t v11 = 0;
  std::string::size_type v12 = operator new(0x20uLL);
  long long v13 = xmmword_20B8890;
  strcpy((char *)v12, "DigitizationTransitionChecker");
  std::string __p = 0;
  char v10 = 0;
  unint64_t v4 = sub_374CDC((uint64_t)a2, (uint64_t)&v12, (uint64_t *)&__p);
  sub_3CCB54((uint64_t)(a1 + 1), v4);
  uint64_t v5 = (void **)__p;
  if (__p)
  {
    uint64_t v6 = v10;
    uint64_t v7 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      uint64_t v7 = __p;
    }
    char v10 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12);
  }
  return a1;
}

void sub_3CCE40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_3CCE68(uint64_t a1, unsigned int **a2)
{
  uint64_t v3 = *(void *)a1;
  sub_2D5904(*(void *)a1, *a2, 0, (char **)(*(void *)a1 + 7800));
  unint64_t v4 = *(unsigned char **)(v3 + 7800);
  uint64_t v5 = *(unsigned char **)(v3 + 7808);
  uint64_t v6 = v5 - v4;
  if (v5 == v4) {
    return v6;
  }
  if (v6 < 0) {
    sub_2E00();
  }
  uint64_t v7 = operator new(v5 - v4);
  uint64_t v8 = v6 >> 3;
  memcpy(v7, v4, v6 - 1);
  if (v6 != 24) {
    goto LABEL_107;
  }
  uint64_t v9 = 0;
  uint64_t v10 = 8 * v8;
  while (1)
  {
    uint64_t v11 = (int *)sub_2D5D58(*(void *)a1, *(void *)((unsigned char *)v7 + v9) & 0xFFFFFFFFFFFFLL);
    std::string::size_type v12 = (unsigned __int16 *)((char *)v11 - *v11);
    unsigned int v13 = *v12;
    if (v13 < 0x2F)
    {
      if (v13 < 0xB) {
        goto LABEL_6;
      }
    }
    else if (v12[23] && *((unsigned char *)v11 + v12[23]) == 23)
    {
      goto LABEL_14;
    }
    uint64_t v14 = v12[5];
    if (!v14 || (*((unsigned char *)v11 + v14) & 4) == 0) {
      goto LABEL_6;
    }
LABEL_14:
    uint64_t v15 = *(void *)((char *)v7 + v9);
    uint64_t v16 = (int *)sub_2D5D58(*(void *)a1, v15 & 0xFFFFFFFFFFFFLL);
    uint64_t v17 = (unsigned __int16 *)((char *)v16 - *v16);
    unsigned int v18 = *v17;
    if ((v15 & 0xFF000000000000) != 0)
    {
      if (v18 < 0xB) {
        goto LABEL_6;
      }
      unsigned int v19 = v17[5];
      if (!v19) {
        goto LABEL_6;
      }
      int v20 = 1;
    }
    else
    {
      if (v18 < 0xB) {
        goto LABEL_6;
      }
      unsigned int v19 = v17[5];
      if (!v19) {
        goto LABEL_6;
      }
      int v20 = 2;
    }
    if ((*(int *)((char *)v16 + v19) & v20) != 0) {
      break;
    }
LABEL_6:
    v9 += 8;
    if (v10 == v9) {
      goto LABEL_107;
    }
  }
  if (v9 == 8 * v8) {
    goto LABEL_107;
  }
  uint64_t v21 = 8 * v8;
  BOOL v22 = (uint64_t *)v7;
  while (1)
  {
    long long v23 = (int *)sub_2D5D58(*(void *)a1, *v22 & 0xFFFFFFFFFFFFLL);
    long long v24 = (unsigned __int16 *)((char *)v23 - *v23);
    unsigned int v25 = *v24;
    if (v25 < 0x2F)
    {
      if (v25 < 0xB) {
        goto LABEL_23;
      }
    }
    else if (v24[23] && *((unsigned char *)v23 + v24[23]) == 23)
    {
      goto LABEL_31;
    }
    uint64_t v26 = v24[5];
    if (!v26 || (*((unsigned char *)v23 + v26) & 4) == 0) {
      goto LABEL_23;
    }
LABEL_31:
    uint64_t v27 = *v22;
    uint64_t v28 = (int *)sub_2D5D58(*(void *)a1, *v22 & 0xFFFFFFFFFFFFLL);
    uint64_t v29 = (unsigned __int16 *)((char *)v28 - *v28);
    unsigned int v30 = *v29;
    if ((v27 & 0xFF000000000000) == 0) {
      break;
    }
    if (v30 >= 0xB)
    {
      unsigned int v31 = v29[5];
      if (v31)
      {
        if ((*(int *)((char *)v28 + v31) & 2) != 0) {
          goto LABEL_39;
        }
      }
    }
LABEL_23:
    uint64_t v6 = 0;
    ++v22;
    v21 -= 8;
    if (!v21) {
      goto LABEL_108;
    }
  }
  if (v30 < 0xB) {
    goto LABEL_23;
  }
  unsigned int v32 = v29[5];
  if (!v32 || (*(int *)((char *)v28 + v32) & 1) == 0) {
    goto LABEL_23;
  }
LABEL_39:
  if (!v21) {
    goto LABEL_107;
  }
  uint64_t v33 = (uint64_t *)v7;
  while (2)
  {
    uint64_t v34 = (int *)sub_2D5D58(*(void *)a1, *v33 & 0xFFFFFFFFFFFFLL);
    unint64_t v35 = (unsigned __int16 *)((char *)v34 - *v34);
    unsigned int v36 = *v35;
    if (v36 >= 0x2F)
    {
      if (!v35[23] || *((unsigned char *)v34 + v35[23]) != 23)
      {
LABEL_48:
        uint64_t v37 = v35[5];
        if (!v37 || (*((unsigned char *)v34 + v37) & 4) == 0) {
          goto LABEL_50;
        }
      }
LABEL_42:
      uint64_t v6 = 0;
      ++v33;
      v10 -= 8;
      if (!v10) {
        goto LABEL_108;
      }
      continue;
    }
    break;
  }
  if (v36 >= 0xB) {
    goto LABEL_48;
  }
LABEL_50:
  uint64_t v38 = *v33;
  uint64_t v39 = (int *)sub_2D5D58(*(void *)a1, *v33 & 0xFFFFFFFFFFFFLL);
  uint64_t v40 = (unsigned __int16 *)((char *)v39 - *v39);
  unsigned int v41 = *v40;
  if ((v38 & 0xFF000000000000) != 0)
  {
    if (v41 < 0xB) {
      goto LABEL_42;
    }
    unsigned int v42 = v40[5];
    if (!v42) {
      goto LABEL_42;
    }
    int v43 = 1;
  }
  else
  {
    if (v41 < 0xB) {
      goto LABEL_42;
    }
    unsigned int v42 = v40[5];
    if (!v42) {
      goto LABEL_42;
    }
    int v43 = 2;
  }
  if ((*(int *)((char *)v39 + v42) & v43) == 0) {
    goto LABEL_42;
  }
  uint64_t v44 = *v33;
  uint64_t v45 = (int *)sub_2D5D58(*(void *)a1, *v33 & 0xFFFFFFFFFFFFLL);
  long long v46 = (unsigned __int16 *)((char *)v45 - *v45);
  unsigned int v47 = *v46;
  if ((v44 & 0xFF000000000000) != 0)
  {
    if (v47 < 0xB) {
      goto LABEL_42;
    }
    unsigned int v48 = v46[5];
    if (!v48) {
      goto LABEL_42;
    }
    int v49 = 2;
  }
  else
  {
    if (v47 < 0xB) {
      goto LABEL_42;
    }
    unsigned int v48 = v46[5];
    if (!v48) {
      goto LABEL_42;
    }
    int v49 = 1;
  }
  if ((*(int *)((char *)v45 + v48) & v49) == 0) {
    goto LABEL_42;
  }
  if (!v10) {
    goto LABEL_107;
  }
  uint64_t v50 = *(void *)((char *)v7 + v9);
  unsigned int v51 = (int *)sub_2D5D58(*(void *)a1, v50 & 0xFFFFFFFFFFFFLL);
  unsigned int v52 = (unsigned __int16 *)((char *)v51 - *v51);
  unsigned int v53 = *v52;
  if ((v50 & 0xFF000000000000) != 0)
  {
    if (v53 < 0x4B) {
      goto LABEL_73;
    }
    unsigned int v54 = v52[37];
    if (!v54) {
      goto LABEL_73;
    }
LABEL_72:
    int v55 = *(unsigned __int16 *)((char *)v51 + v54);
  }
  else
  {
    if (v53 >= 0x49)
    {
      unsigned int v54 = v52[36];
      if (v54) {
        goto LABEL_72;
      }
    }
LABEL_73:
    int v55 = 0xFFFF;
  }
  uint64_t v56 = *v22;
  std::string v57 = (int *)sub_2D5D58(*(void *)a1, *v22 & 0xFFFFFFFFFFFFLL);
  uint64_t v58 = (unsigned __int16 *)((char *)v57 - *v57);
  unsigned int v59 = *v58;
  if ((v56 & 0xFF000000000000) != 0)
  {
    if (v59 < 0x4B) {
      goto LABEL_81;
    }
    unsigned int v60 = v58[37];
    if (!v60) {
      goto LABEL_81;
    }
LABEL_80:
    __int32 v61 = *(unsigned __int16 *)((char *)v57 + v60);
  }
  else
  {
    if (v59 >= 0x49)
    {
      unsigned int v60 = v58[36];
      if (v60) {
        goto LABEL_80;
      }
    }
LABEL_81:
    __int32 v61 = 0xFFFF;
  }
  uint64_t v62 = *v33;
  uint64_t v63 = (int *)sub_2D5D58(*(void *)a1, *v33 & 0xFFFFFFFFFFFFLL);
  uint64_t v64 = (unsigned __int16 *)((char *)v63 - *v63);
  unsigned int v65 = *v64;
  if ((v62 & 0xFF000000000000) != 0)
  {
    if (v65 < 0x4B) {
      goto LABEL_89;
    }
    unsigned int v66 = v64[37];
    if (!v66) {
      goto LABEL_89;
    }
LABEL_88:
    int v67 = *(unsigned __int16 *)((char *)v63 + v66);
  }
  else
  {
    if (v65 >= 0x49)
    {
      unsigned int v66 = v64[36];
      if (v66) {
        goto LABEL_88;
      }
    }
LABEL_89:
    int v67 = 0xFFFF;
  }
  int32x2_t v68 = vdup_n_s32(0x4650u);
  int8x8_t v69 = (int8x8_t)vadd_s32((int32x2_t)__PAIR64__(v67, v55), v68);
  int32x2_t v70 = vdup_n_s32(0x8CA0u);
  int32x2_t v71 = (int32x2_t)vand_s8(vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)v70, (uint32x2_t)vand_s8(v69, (int8x8_t)0xFFFF0000FFFFLL)), v69, (int8x8_t)vadd_s32((int32x2_t)__PAIR64__(v67, v55), vdup_n_s32(0xB9B0u))), (int8x8_t)0xFFFF0000FFFFLL);
  v72.i32[0] = (unsigned __int16)v67;
  v72.i32[1] = v61;
  __int32 v88 = v71.i32[0];
  int32x2_t v73 = vsub_s32(v72, v71);
  int32x2_t v74 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32(v73, v68), (int8x8_t)vadd_s32(v73, vdup_n_s32(0xFFFF7360)), (int8x8_t)v73);
  int8x8_t v75 = vbsl_s8((int8x8_t)vcgt_s32(vdup_n_s32(0xFFFFB9B1), v74), (int8x8_t)vadd_s32(v74, v70), (int8x8_t)v74);
  v76.i64[0] = v75.i32[0];
  v76.i64[1] = v75.i32[1];
  float64x2_t v77 = vabsq_f64(vdivq_f64(vcvtq_f64_s64(v76), (float64x2_t)vdupq_n_s64(0x4059000000000000uLL)));
  int16x4_t v78 = *(int16x4_t *)&v77.f64[1];
  if (v77.f64[0] < v77.f64[1]) {
    v77.f64[0] = v77.f64[1];
  }
  v78.i16[0] = *(_WORD *)(a1 + 8);
  if (v77.f64[0] > (double)vmovl_s16(v78).i32[0]) {
    goto LABEL_107;
  }
  long long v79 = (__int16 *)(sub_2E79EC(*(void *)a1, *(void *)((char *)v7 + v9), *v22)
                 && sub_2E79EC(*(void *)a1, *(void *)((char *)v7 + v9), *v33)
                  ? a1 + 12
                  : a1 + 10);
  __int16 v80 = *v79;
  int v81 = v61 - v88;
  if (v61 - v88 > 18000) {
    int v81 = v61 - v88 - 36000;
  }
  int v82 = v81 >= -17999 ? v81 : v81 + 36000;
  uint64_t v83 = (int *)sub_2D5D58(*(void *)a1, *(unsigned int *)((char *)v7 + v9) | ((unint64_t)*(unsigned __int16 *)((char *)v7 + v9 + 4) << 32));
  double v84 = (double)v82 / 100.0;
  BOOL v85 = (unsigned __int16 *)((char *)v83 - *v83);
  if (*v85 < 0xBu)
  {
    LODWORD(v86) = 0;
  }
  else
  {
    uint64_t v86 = v85[5];
    if (v86) {
      LODWORD(v86) = *((unsigned __int8 *)v83 + v86 + 1) >> 7;
    }
  }
  if (fabs(v84) >= (double)v80) {
    uint64_t v6 = (v84 < 0.0) ^ v86;
  }
  else {
LABEL_107:
  }
    uint64_t v6 = 0;
LABEL_108:
  operator delete(v7);
  return v6;
}

void sub_3CD494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_3CD4D8()
{
  unk_2557D9F = 16641;
  word_2557D88 = 65;
  byte_2557DB7 = 1;
  byte_2557DA1 = 0;
}

uint64_t sub_3CD500(unsigned int a1)
{
  return (a1 < 0xF) & (0x6800u >> a1);
}

char *sub_3CD518@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  switch((int)result)
  {
    case 1:
      *(unsigned char *)(a2 + 23) = 11;
      strcpy((char *)a2, "TestOrDebug");
      break;
    case 2:
      *(unsigned char *)(a2 + 23) = 3;
      *(_DWORD *)a2 = 4281413;
      break;
    case 3:
      *(unsigned char *)(a2 + 23) = 8;
      strcpy((char *)a2, "QuickETA");
      break;
    case 4:
      *(unsigned char *)(a2 + 23) = 5;
      strcpy((char *)a2, "Route");
      break;
    case 5:
      *(unsigned char *)(a2 + 23) = 7;
      strcpy((char *)a2, "Reroute");
      break;
    case 6:
      *(unsigned char *)(a2 + 23) = 11;
      strcpy((char *)a2, "RouteGenius");
      break;
    case 7:
      *(unsigned char *)(a2 + 23) = 16;
      strcpy((char *)a2, "SearchAlongRoute");
      break;
    case 8:
      strcpy((char *)a2, "DodgeballOutsideOfMaps");
      *(unsigned char *)(a2 + 23) = 22;
      break;
    case 9:
      *(unsigned char *)(a2 + 23) = 11;
      strcpy((char *)a2, "TimeToLeave");
      break;
    case 10:
      *(unsigned char *)(a2 + 23) = 11;
      strcpy((char *)a2, "LaunchAndGo");
      break;
    case 11:
      *(unsigned char *)(a2 + 23) = 21;
      strcpy((char *)a2, "TransitionFromDriving");
      break;
    case 12:
      uint64_t result = (char *)operator new(0x20uLL);
      *(void *)a2 = result;
      *(_OWORD *)(a2 + 8) = xmmword_20B91A0;
      strcpy(result, "TransitionFromPrepareToPark");
      break;
    case 13:
      uint64_t result = (char *)operator new(0x28uLL);
      *(void *)a2 = result;
      *(_OWORD *)(a2 + 8) = xmmword_20B9280;
      strcpy(result, "TransitionFromDrivingBeforeArrival");
      break;
    case 14:
      uint64_t result = (char *)operator new(0x28uLL);
      *(void *)a2 = result;
      *(_OWORD *)(a2 + 8) = xmmword_20B9260;
      strcpy(result, "TransitionFromDrivingAfterArrival");
      break;
    default:
      *(unsigned char *)(a2 + 23) = 14;
      strcpy((char *)a2, "UnknownPurpose");
      break;
  }
  return result;
}

void *sub_3CD878(void *a1, uint64_t a2)
{
  uint64_t v16 = 0;
  uint64_t v17 = operator new(0x28uLL);
  long long v18 = xmmword_20B9260;
  strcpy((char *)v17, "AreaIncidentDisputedTerritoryRule");
  std::string __p = 0;
  uint64_t v15 = 0;
  unint64_t v4 = sub_374CDC(a2, (uint64_t)&v17, (uint64_t *)&__p);
  sub_3CB370(v4, 0, 0, a1);
  uint64_t v5 = (void **)__p;
  if (__p)
  {
    uint64_t v6 = v15;
    uint64_t v7 = __p;
    if (v15 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      uint64_t v7 = __p;
    }
    uint64_t v15 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17);
  }
  uint64_t v8 = operator new(0x30uLL);
  uint64_t v16 = 0;
  uint64_t v17 = v8;
  long long v18 = xmmword_20B9A40;
  strcpy((char *)v8, "UserGeneratedIncidentDisputedTerritoryRule");
  std::string __p = 0;
  uint64_t v15 = 0;
  uint64_t v9 = sub_374CDC(a2, (uint64_t)&v17, (uint64_t *)&__p);
  sub_3CB370(v9, 0, 0, a1 + 5);
  uint64_t v10 = (void **)__p;
  if (__p)
  {
    uint64_t v11 = v15;
    std::string::size_type v12 = __p;
    if (v15 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      std::string::size_type v12 = __p;
    }
    uint64_t v15 = v10;
    operator delete(v12);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17);
  }
  return a1;
}

void sub_3CDA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_5450C(v17);
  _Unwind_Resume(a1);
}

void sub_3CDA58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_3CDA80(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  unint64_t v4 = *(uint64_t **)(a3 + 16);
  if (!v4) {
    return 0;
  }
  long long v46 = (void *)(a2[4] + 112);
  while (1)
  {
    if (*((_DWORD *)v4 + 12) != 2)
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    uint64_t v8 = (void *)v4[5];
    HIBYTE(__p[2]) = 21;
    strcpy((char *)__p, "excluded_country_list");
    uint64_t v9 = sub_5C4AC(v8, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = a4;
    if (*(_DWORD **)(v9 + 8) != sub_3CE248(v9, (unsigned __int8 **)__p)) {
      goto LABEL_6;
    }
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_20B91C0;
    strcpy((char *)__p[0], "source_country_code_list");
    uint64_t v10 = sub_5C4AC(v8, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = v46;
    if (*(_DWORD **)(v10 + 8) == sub_3CE248(v10, (unsigned __int8 **)__p)) {
      goto LABEL_6;
    }
    strcpy((char *)v47, "disputed_area_geometry");
    HIBYTE(v47[2]) = 22;
    uint64_t v11 = (uint64_t *)sub_561B0(v8, (uint64_t)v47);
    sub_4B898(v11, __p);
    if (SHIBYTE(v47[2]) < 0) {
      operator delete(v47[0]);
    }
    sub_33E8C((uint64_t)v47, (unsigned int ****)__p);
    uint64_t v12 = a2[1];
    uint64_t v13 = a2[2];
    while (1)
    {
      if (v12 == v13)
      {
        int v33 = 1;
        uint64_t v34 = (void **)__p[0];
        if (!__p[0]) {
          goto LABEL_5;
        }
LABEL_50:
        unint64_t v35 = (void **)__p[1];
        uint64_t v7 = v34;
        if (__p[1] != v34)
        {
          unsigned int v36 = (void **)__p[1];
          do
          {
            uint64_t v39 = (char *)*(v36 - 3);
            v36 -= 3;
            uint64_t v38 = v39;
            if (v39)
            {
              uint64_t v40 = (char *)*(v35 - 2);
              uint64_t v37 = v38;
              if (v40 != v38)
              {
                unsigned int v41 = (char *)*(v35 - 2);
                do
                {
                  int v43 = (void *)*((void *)v41 - 3);
                  v41 -= 24;
                  unsigned int v42 = v43;
                  if (v43)
                  {
                    *((void *)v40 - 2) = v42;
                    operator delete(v42);
                  }
                  uint64_t v40 = v41;
                }
                while (v41 != v38);
                uint64_t v37 = *v36;
              }
              *(v35 - 2) = v38;
              operator delete(v37);
            }
            unint64_t v35 = v36;
          }
          while (v36 != v34);
          uint64_t v7 = (void **)__p[0];
        }
        __p[1] = v34;
        operator delete(v7);
        goto LABEL_5;
      }
      uint64_t v14 = *(void *)(v12 + 8);
      if (sub_34658(v47, (_DWORD *)(v14 + 128)))
      {
        uint64_t v16 = *(_DWORD ****)v14;
        uint64_t v15 = *(_DWORD ****)(v14 + 8);
        if (*(_DWORD ****)v14 != v15) {
          break;
        }
      }
LABEL_17:
      v12 += 16;
    }
LABEL_21:
    uint64_t v17 = **v16;
    long long v18 = (*v16)[1];
    while (1)
    {
      if (v17 == v18)
      {
        v16 += 3;
        if (v16 == v15) {
          goto LABEL_17;
        }
        goto LABEL_21;
      }
      if (sub_34554(v47, v17))
      {
        BOOL v22 = __p[0];
        if (__p[0] != __p[1]) {
          break;
        }
      }
LABEL_22:
      v17 += 3;
    }
    unsigned int v23 = v17[1];
    LODWORD(v19) = *v17;
    double v24 = (double)v19;
    while (2)
    {
      unsigned int v25 = (void *)*v22;
      uint64_t v26 = (void *)v22[1];
      if ((void *)*v22 == v26)
      {
LABEL_28:
        v22 += 3;
        if (v22 == __p[1]) {
          goto LABEL_22;
        }
        continue;
      }
      break;
    }
    int v27 = 0;
    while (2)
    {
      uint64_t v28 = (_DWORD *)v25[1];
      uint64_t v29 = (_DWORD *)(*v25 + 12);
      if ((_DWORD *)*v25 != v28 && v29 != v28)
      {
        while (2)
        {
          unsigned int v31 = *(v29 - 2);
          unsigned int v32 = v29[1];
          if (v31 >= v23)
          {
            if (v32 < v23)
            {
LABEL_43:
              LODWORD(v20) = *v29;
              LODWORD(v21) = *(v29 - 3);
              double v21 = (double)*(unint64_t *)&v21;
              double v20 = ((double)v23 - (double)v31)
                  / ((double)v32 - (double)v31)
                  * ((double)*(unint64_t *)&v20 - v21)
                  + v21;
              if (v20 < v24) {
                v27 ^= 1u;
              }
            }
          }
          else if (v32 >= v23)
          {
            goto LABEL_43;
          }
          v29 += 3;
          if (v29 == v28) {
            break;
          }
          continue;
        }
      }
      v25 += 3;
      if (v25 != v26) {
        continue;
      }
      break;
    }
    if (!v27) {
      goto LABEL_28;
    }
    int v33 = 0;
    uint64_t v34 = (void **)__p[0];
    if (__p[0]) {
      goto LABEL_50;
    }
LABEL_5:
    if (!v33) {
      return 1;
    }
LABEL_6:
    unint64_t v4 = (uint64_t *)*v4;
    if (!v4) {
      return 0;
    }
  }
}

void sub_3CDE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
}

uint64_t sub_3CDEB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *(uint64_t **)(a3 + 16);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = a4;
  uint64_t v6 = a2;
  uint64_t v45 = (_DWORD *)(a2 + 28);
  uint64_t v7 = "excluded_country_list";
  uint64_t v8 = "disputed_area_geometry";
  while (1)
  {
    if (*((_DWORD *)v4 + 12) != 2)
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    uint64_t v10 = (void *)v4[5];
    char v50 = 21;
    *(_OWORD *)std::string __p = *(_OWORD *)v7;
    *(void *)&__p[13] = *(void *)(v7 + 13);
    char v49 = 0;
    uint64_t v11 = sub_5C4AC(v10, (uint64_t)__p);
    if (v50 < 0) {
      operator delete(*(void **)__p);
    }
    *(void *)std::string __p = v5;
    if (*(_DWORD **)(v11 + 8) != sub_3CE248(v11, (unsigned __int8 **)__p)) {
      goto LABEL_6;
    }
    *(_OWORD *)long long v46 = *(_OWORD *)v8;
    *(void *)&v46[14] = *(void *)(v8 + 14);
    __int16 v47 = 5632;
    uint64_t v12 = (uint64_t *)sub_561B0(v10, (uint64_t)v46);
    sub_4B898(v12, __p);
    if (SHIBYTE(v47) < 0) {
      operator delete(*(void **)v46);
    }
    sub_33E8C((uint64_t)v46, (unsigned int ****)__p);
    if (*(_DWORD *)(v6 + 28) == -1 && *(_DWORD *)(v6 + 32) == -1)
    {
      int v13 = 1;
      uint64_t v14 = *(void ***)__p;
      if (!*(void *)__p) {
        goto LABEL_5;
      }
      goto LABEL_39;
    }
    int v15 = sub_34554(v46, v45);
    uint64_t v14 = *(void ***)__p;
    if (v15 && *(void *)__p != *(void *)&__p[8])
    {
      unsigned int v19 = *(_DWORD *)(v6 + 32);
      LODWORD(v16) = *(_DWORD *)(v6 + 28);
      double v20 = (double)v16;
      for (uint64_t i = *(void *)__p; i != *(void *)&__p[8]; i += 24)
      {
        BOOL v22 = *(void **)i;
        unsigned int v23 = *(void **)(i + 8);
        if (*(void **)i != v23)
        {
          int v24 = 0;
          do
          {
            unsigned int v25 = (_DWORD *)v22[1];
            uint64_t v26 = (_DWORD *)(*v22 + 12);
            if ((_DWORD *)*v22 != v25 && v26 != v25)
            {
              do
              {
                unsigned int v28 = *(v26 - 2);
                unsigned int v29 = v26[1];
                if (v28 >= v19)
                {
                  if (v29 < v19)
                  {
LABEL_36:
                    LODWORD(v17) = *v26;
                    LODWORD(v18) = *(v26 - 3);
                    double v18 = (double)*(unint64_t *)&v18;
                    double v17 = ((double)v19 - (double)v28)
                        / ((double)v29 - (double)v28)
                        * ((double)*(unint64_t *)&v17 - v18)
                        + v18;
                    if (v17 < v20) {
                      v24 ^= 1u;
                    }
                  }
                }
                else if (v29 >= v19)
                {
                  goto LABEL_36;
                }
                v26 += 3;
              }
              while (v26 != v25);
            }
            v22 += 3;
          }
          while (v22 != v23);
          if (v24)
          {
            int v13 = 0;
            if (!*(void *)__p) {
              goto LABEL_5;
            }
            goto LABEL_39;
          }
        }
      }
    }
    int v13 = 1;
    if (!*(void *)__p) {
      goto LABEL_5;
    }
LABEL_39:
    unsigned int v30 = *(void ***)&__p[8];
    uint64_t v9 = v14;
    if (*(void ***)&__p[8] != v14)
    {
      unsigned int v31 = v7;
      uint64_t v32 = v6;
      int v33 = v8;
      uint64_t v34 = *(void ***)&__p[8];
      do
      {
        uint64_t v37 = (char *)*(v34 - 3);
        v34 -= 3;
        unsigned int v36 = v37;
        if (v37)
        {
          uint64_t v38 = (char *)*(v30 - 2);
          unint64_t v35 = v36;
          if (v38 != v36)
          {
            uint64_t v39 = (char *)*(v30 - 2);
            do
            {
              unsigned int v41 = (void *)*((void *)v39 - 3);
              v39 -= 24;
              uint64_t v40 = v41;
              if (v41)
              {
                *((void *)v38 - 2) = v40;
                operator delete(v40);
              }
              uint64_t v38 = v39;
            }
            while (v39 != v36);
            unint64_t v35 = *v34;
          }
          *(v30 - 2) = v36;
          operator delete(v35);
        }
        unsigned int v30 = v34;
      }
      while (v34 != v14);
      uint64_t v9 = *(void ***)__p;
      uint64_t v8 = v33;
      uint64_t v6 = v32;
      uint64_t v7 = v31;
      uint64_t v5 = a4;
    }
    *(void *)&__p[8] = v14;
    operator delete(v9);
LABEL_5:
    if (!v13) {
      return 1;
    }
LABEL_6:
    unint64_t v4 = (uint64_t *)*v4;
    if (!v4) {
      return 0;
    }
  }
}

void sub_3CE1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_4CBF8((void ***)va);
  _Unwind_Resume(a1);
}

void sub_3CE210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_3CE248(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v2 = *(_DWORD **)a1;
  uint64_t v3 = *(_DWORD **)(a1 + 8);
  if (*(_DWORD **)a1 == v3) {
    return v2;
  }
  unint64_t v4 = *a2;
  do
  {
    if (v2[2])
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    uint64_t v5 = *(const void ***)v2;
    uint64_t v6 = *(unsigned __int8 *)(*(void *)v2 + 23);
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = *(unsigned __int8 *)(*(void *)v2 + 23);
    }
    else {
      uint64_t v7 = *(void *)(*(void *)v2 + 8);
    }
    uint64_t v8 = v4[23];
    int v9 = (char)v8;
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = *((void *)v4 + 1);
    }
    if (v7 == v8)
    {
      if (v9 >= 0) {
        uint64_t v10 = v4;
      }
      else {
        uint64_t v10 = *(unsigned __int8 **)v4;
      }
      if ((v6 & 0x80) != 0)
      {
        if (!memcmp(*v5, v10, *(void *)(*(void *)v2 + 8))) {
          return v2;
        }
      }
      else
      {
        if (!*(unsigned char *)(*(void *)v2 + 23)) {
          return v2;
        }
        while (*(unsigned __int8 *)v5 == *v10)
        {
          uint64_t v5 = (const void **)((char *)v5 + 1);
          ++v10;
          if (!--v6) {
            return v2;
          }
        }
      }
    }
    v2 += 4;
  }
  while (v2 != v3);
  return v3;
}

void *sub_3CE364(void *a1, uint64_t a2)
{
  uint64_t v16 = 0;
  double v17 = operator new(0x28uLL);
  long long v18 = xmmword_20B9260;
  strcpy((char *)v17, "AreaIncidentDisputedTerritoryRule");
  std::string __p = 0;
  int v15 = 0;
  unint64_t v4 = sub_374CDC(a2, (uint64_t)&v17, (uint64_t *)&__p);
  sub_3CB370(v4, 0, 0, a1);
  uint64_t v5 = (void **)__p;
  if (__p)
  {
    uint64_t v6 = v15;
    uint64_t v7 = __p;
    if (v15 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      uint64_t v7 = __p;
    }
    int v15 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17);
  }
  uint64_t v8 = operator new(0x30uLL);
  uint64_t v16 = 0;
  double v17 = v8;
  long long v18 = xmmword_20B9A40;
  strcpy((char *)v8, "UserGeneratedIncidentDisputedTerritoryRule");
  std::string __p = 0;
  int v15 = 0;
  int v9 = sub_374CDC(a2, (uint64_t)&v17, (uint64_t *)&__p);
  sub_3CB370(v9, 0, 0, a1 + 5);
  uint64_t v10 = (void **)__p;
  if (__p)
  {
    uint64_t v11 = v15;
    uint64_t v12 = __p;
    if (v15 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      uint64_t v12 = __p;
    }
    int v15 = v10;
    operator delete(v12);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17);
  }
  return a1;
}

void sub_3CE510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_5450C(v17);
  _Unwind_Resume(a1);
}

void sub_3CE544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_3CE56C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  unint64_t v4 = *(uint64_t **)(a3 + 16);
  if (!v4) {
    return 0;
  }
  long long v46 = (void *)(a2[4] + 112);
  while (1)
  {
    if (*((_DWORD *)v4 + 12) != 2)
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    uint64_t v8 = (void *)v4[5];
    HIBYTE(__p[2]) = 21;
    strcpy((char *)__p, "excluded_country_list");
    uint64_t v9 = sub_5C4AC(v8, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = a4;
    if (*(_DWORD **)(v9 + 8) != sub_3CE248(v9, (unsigned __int8 **)__p)) {
      goto LABEL_6;
    }
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_20B91C0;
    strcpy((char *)__p[0], "source_country_code_list");
    uint64_t v10 = sub_5C4AC(v8, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = v46;
    if (*(_DWORD **)(v10 + 8) == sub_3CE248(v10, (unsigned __int8 **)__p)) {
      goto LABEL_6;
    }
    strcpy((char *)v47, "disputed_area_geometry");
    HIBYTE(v47[2]) = 22;
    uint64_t v11 = (uint64_t *)sub_561B0(v8, (uint64_t)v47);
    sub_4B898(v11, __p);
    if (SHIBYTE(v47[2]) < 0) {
      operator delete(v47[0]);
    }
    sub_33E8C((uint64_t)v47, (unsigned int ****)__p);
    uint64_t v12 = a2[1];
    uint64_t v13 = a2[2];
    while (1)
    {
      if (v12 == v13)
      {
        int v33 = 1;
        uint64_t v34 = (void **)__p[0];
        if (!__p[0]) {
          goto LABEL_5;
        }
LABEL_50:
        unint64_t v35 = (void **)__p[1];
        uint64_t v7 = v34;
        if (__p[1] != v34)
        {
          unsigned int v36 = (void **)__p[1];
          do
          {
            uint64_t v39 = (char *)*(v36 - 3);
            v36 -= 3;
            uint64_t v38 = v39;
            if (v39)
            {
              uint64_t v40 = (char *)*(v35 - 2);
              uint64_t v37 = v38;
              if (v40 != v38)
              {
                unsigned int v41 = (char *)*(v35 - 2);
                do
                {
                  int v43 = (void *)*((void *)v41 - 3);
                  v41 -= 24;
                  unsigned int v42 = v43;
                  if (v43)
                  {
                    *((void *)v40 - 2) = v42;
                    operator delete(v42);
                  }
                  uint64_t v40 = v41;
                }
                while (v41 != v38);
                uint64_t v37 = *v36;
              }
              *(v35 - 2) = v38;
              operator delete(v37);
            }
            unint64_t v35 = v36;
          }
          while (v36 != v34);
          uint64_t v7 = (void **)__p[0];
        }
        __p[1] = v34;
        operator delete(v7);
        goto LABEL_5;
      }
      uint64_t v14 = *(void *)(v12 + 8);
      if (sub_34658(v47, (_DWORD *)(v14 + 128)))
      {
        uint64_t v16 = *(_DWORD ****)v14;
        int v15 = *(_DWORD ****)(v14 + 8);
        if (*(_DWORD ****)v14 != v15) {
          break;
        }
      }
LABEL_17:
      v12 += 16;
    }
LABEL_21:
    uint64_t v17 = **v16;
    long long v18 = (*v16)[1];
    while (1)
    {
      if (v17 == v18)
      {
        v16 += 3;
        if (v16 == v15) {
          goto LABEL_17;
        }
        goto LABEL_21;
      }
      if (sub_34554(v47, v17))
      {
        BOOL v22 = __p[0];
        if (__p[0] != __p[1]) {
          break;
        }
      }
LABEL_22:
      v17 += 3;
    }
    unsigned int v23 = v17[1];
    LODWORD(v19) = *v17;
    double v24 = (double)v19;
    while (2)
    {
      unsigned int v25 = (void *)*v22;
      uint64_t v26 = (void *)v22[1];
      if ((void *)*v22 == v26)
      {
LABEL_28:
        v22 += 3;
        if (v22 == __p[1]) {
          goto LABEL_22;
        }
        continue;
      }
      break;
    }
    int v27 = 0;
    while (2)
    {
      unsigned int v28 = (_DWORD *)v25[1];
      unsigned int v29 = (_DWORD *)(*v25 + 12);
      if ((_DWORD *)*v25 != v28 && v29 != v28)
      {
        while (2)
        {
          unsigned int v31 = *(v29 - 2);
          unsigned int v32 = v29[1];
          if (v31 >= v23)
          {
            if (v32 < v23)
            {
LABEL_43:
              LODWORD(v20) = *v29;
              LODWORD(v21) = *(v29 - 3);
              double v21 = (double)*(unint64_t *)&v21;
              double v20 = ((double)v23 - (double)v31)
                  / ((double)v32 - (double)v31)
                  * ((double)*(unint64_t *)&v20 - v21)
                  + v21;
              if (v20 < v24) {
                v27 ^= 1u;
              }
            }
          }
          else if (v32 >= v23)
          {
            goto LABEL_43;
          }
          v29 += 3;
          if (v29 == v28) {
            break;
          }
          continue;
        }
      }
      v25 += 3;
      if (v25 != v26) {
        continue;
      }
      break;
    }
    if (!v27) {
      goto LABEL_28;
    }
    int v33 = 0;
    uint64_t v34 = (void **)__p[0];
    if (__p[0]) {
      goto LABEL_50;
    }
LABEL_5:
    if (!v33) {
      return 1;
    }
LABEL_6:
    unint64_t v4 = (uint64_t *)*v4;
    if (!v4) {
      return 0;
    }
  }
}

void sub_3CE94C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
}

uint64_t sub_3CE9A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *(uint64_t **)(a3 + 16);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = a4;
  uint64_t v6 = a2;
  uint64_t v45 = (_DWORD *)(a2 + 28);
  uint64_t v7 = "excluded_country_list";
  uint64_t v8 = "disputed_area_geometry";
  while (1)
  {
    if (*((_DWORD *)v4 + 12) != 2)
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    uint64_t v10 = (void *)v4[5];
    char v50 = 21;
    *(_OWORD *)std::string __p = *(_OWORD *)v7;
    *(void *)&__p[13] = *(void *)(v7 + 13);
    char v49 = 0;
    uint64_t v11 = sub_5C4AC(v10, (uint64_t)__p);
    if (v50 < 0) {
      operator delete(*(void **)__p);
    }
    *(void *)std::string __p = v5;
    if (*(_DWORD **)(v11 + 8) != sub_3CE248(v11, (unsigned __int8 **)__p)) {
      goto LABEL_6;
    }
    *(_OWORD *)long long v46 = *(_OWORD *)v8;
    *(void *)&v46[14] = *(void *)(v8 + 14);
    __int16 v47 = 5632;
    uint64_t v12 = (uint64_t *)sub_561B0(v10, (uint64_t)v46);
    sub_4B898(v12, __p);
    if (SHIBYTE(v47) < 0) {
      operator delete(*(void **)v46);
    }
    sub_33E8C((uint64_t)v46, (unsigned int ****)__p);
    if (*(_DWORD *)(v6 + 28) == -1 && *(_DWORD *)(v6 + 32) == -1)
    {
      int v13 = 1;
      uint64_t v14 = *(void ***)__p;
      if (!*(void *)__p) {
        goto LABEL_5;
      }
      goto LABEL_39;
    }
    int v15 = sub_34554(v46, v45);
    uint64_t v14 = *(void ***)__p;
    if (v15 && *(void *)__p != *(void *)&__p[8])
    {
      unsigned int v19 = *(_DWORD *)(v6 + 32);
      LODWORD(v16) = *(_DWORD *)(v6 + 28);
      double v20 = (double)v16;
      for (uint64_t i = *(void *)__p; i != *(void *)&__p[8]; i += 24)
      {
        BOOL v22 = *(void **)i;
        unsigned int v23 = *(void **)(i + 8);
        if (*(void **)i != v23)
        {
          int v24 = 0;
          do
          {
            unsigned int v25 = (_DWORD *)v22[1];
            uint64_t v26 = (_DWORD *)(*v22 + 12);
            if ((_DWORD *)*v22 != v25 && v26 != v25)
            {
              do
              {
                unsigned int v28 = *(v26 - 2);
                unsigned int v29 = v26[1];
                if (v28 >= v19)
                {
                  if (v29 < v19)
                  {
LABEL_36:
                    LODWORD(v17) = *v26;
                    LODWORD(v18) = *(v26 - 3);
                    double v18 = (double)*(unint64_t *)&v18;
                    double v17 = ((double)v19 - (double)v28)
                        / ((double)v29 - (double)v28)
                        * ((double)*(unint64_t *)&v17 - v18)
                        + v18;
                    if (v17 < v20) {
                      v24 ^= 1u;
                    }
                  }
                }
                else if (v29 >= v19)
                {
                  goto LABEL_36;
                }
                v26 += 3;
              }
              while (v26 != v25);
            }
            v22 += 3;
          }
          while (v22 != v23);
          if (v24)
          {
            int v13 = 0;
            if (!*(void *)__p) {
              goto LABEL_5;
            }
            goto LABEL_39;
          }
        }
      }
    }
    int v13 = 1;
    if (!*(void *)__p) {
      goto LABEL_5;
    }
LABEL_39:
    unsigned int v30 = *(void ***)&__p[8];
    uint64_t v9 = v14;
    if (*(void ***)&__p[8] != v14)
    {
      unsigned int v31 = v7;
      uint64_t v32 = v6;
      int v33 = v8;
      uint64_t v34 = *(void ***)&__p[8];
      do
      {
        uint64_t v37 = (char *)*(v34 - 3);
        v34 -= 3;
        unsigned int v36 = v37;
        if (v37)
        {
          uint64_t v38 = (char *)*(v30 - 2);
          unint64_t v35 = v36;
          if (v38 != v36)
          {
            uint64_t v39 = (char *)*(v30 - 2);
            do
            {
              unsigned int v41 = (void *)*((void *)v39 - 3);
              v39 -= 24;
              uint64_t v40 = v41;
              if (v41)
              {
                *((void *)v38 - 2) = v40;
                operator delete(v40);
              }
              uint64_t v38 = v39;
            }
            while (v39 != v36);
            unint64_t v35 = *v34;
          }
          *(v30 - 2) = v36;
          operator delete(v35);
        }
        unsigned int v30 = v34;
      }
      while (v34 != v14);
      uint64_t v9 = *(void ***)__p;
      uint64_t v8 = v33;
      uint64_t v6 = v32;
      uint64_t v7 = v31;
      uint64_t v5 = a4;
    }
    *(void *)&__p[8] = v14;
    operator delete(v9);
LABEL_5:
    if (!v13) {
      return 1;
    }
LABEL_6:
    unint64_t v4 = (uint64_t *)*v4;
    if (!v4) {
      return 0;
    }
  }
}

void sub_3CECE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_4CBF8((void ***)va);
  _Unwind_Resume(a1);
}

void sub_3CECFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_3CED34(void *a1, uint64_t a2)
{
  uint64_t v16 = 0;
  double v17 = operator new(0x28uLL);
  long long v18 = xmmword_20B9260;
  strcpy((char *)v17, "AreaIncidentDisputedTerritoryRule");
  std::string __p = 0;
  int v15 = 0;
  unint64_t v4 = sub_374CDC(a2, (uint64_t)&v17, (uint64_t *)&__p);
  sub_3CB370(v4, 2, 0, a1);
  uint64_t v5 = (void **)__p;
  if (__p)
  {
    uint64_t v6 = v15;
    uint64_t v7 = __p;
    if (v15 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      uint64_t v7 = __p;
    }
    int v15 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17);
  }
  uint64_t v8 = operator new(0x30uLL);
  uint64_t v16 = 0;
  double v17 = v8;
  long long v18 = xmmword_20B9A40;
  strcpy((char *)v8, "UserGeneratedIncidentDisputedTerritoryRule");
  std::string __p = 0;
  int v15 = 0;
  uint64_t v9 = sub_374CDC(a2, (uint64_t)&v17, (uint64_t *)&__p);
  sub_3CB370(v9, 2, 0, a1 + 5);
  uint64_t v10 = (void **)__p;
  if (__p)
  {
    uint64_t v11 = v15;
    uint64_t v12 = __p;
    if (v15 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      uint64_t v12 = __p;
    }
    int v15 = v10;
    operator delete(v12);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17);
  }
  return a1;
}

void sub_3CEEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_5450C(v17);
  _Unwind_Resume(a1);
}

void sub_3CEF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_3CEF3C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  unint64_t v4 = *(uint64_t **)(a3 + 16);
  if (!v4) {
    return 0;
  }
  long long v46 = (void *)(a2[4] + 112);
  while (1)
  {
    if (*((_DWORD *)v4 + 12) != 2)
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    uint64_t v8 = (void *)v4[5];
    HIBYTE(__p[2]) = 21;
    strcpy((char *)__p, "excluded_country_list");
    uint64_t v9 = sub_5C4AC(v8, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = a4;
    if (*(_DWORD **)(v9 + 8) != sub_3CE248(v9, (unsigned __int8 **)__p)) {
      goto LABEL_6;
    }
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_20B91C0;
    strcpy((char *)__p[0], "source_country_code_list");
    uint64_t v10 = sub_5C4AC(v8, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = v46;
    if (*(_DWORD **)(v10 + 8) == sub_3CE248(v10, (unsigned __int8 **)__p)) {
      goto LABEL_6;
    }
    strcpy((char *)v47, "disputed_area_geometry");
    HIBYTE(v47[2]) = 22;
    uint64_t v11 = (uint64_t *)sub_561B0(v8, (uint64_t)v47);
    sub_4B898(v11, __p);
    if (SHIBYTE(v47[2]) < 0) {
      operator delete(v47[0]);
    }
    sub_33E8C((uint64_t)v47, (unsigned int ****)__p);
    uint64_t v12 = a2[1];
    uint64_t v13 = a2[2];
    while (1)
    {
      if (v12 == v13)
      {
        int v33 = 1;
        uint64_t v34 = (void **)__p[0];
        if (!__p[0]) {
          goto LABEL_5;
        }
LABEL_50:
        unint64_t v35 = (void **)__p[1];
        uint64_t v7 = v34;
        if (__p[1] != v34)
        {
          unsigned int v36 = (void **)__p[1];
          do
          {
            uint64_t v39 = (char *)*(v36 - 3);
            v36 -= 3;
            uint64_t v38 = v39;
            if (v39)
            {
              uint64_t v40 = (char *)*(v35 - 2);
              uint64_t v37 = v38;
              if (v40 != v38)
              {
                unsigned int v41 = (char *)*(v35 - 2);
                do
                {
                  int v43 = (void *)*((void *)v41 - 3);
                  v41 -= 24;
                  unsigned int v42 = v43;
                  if (v43)
                  {
                    *((void *)v40 - 2) = v42;
                    operator delete(v42);
                  }
                  uint64_t v40 = v41;
                }
                while (v41 != v38);
                uint64_t v37 = *v36;
              }
              *(v35 - 2) = v38;
              operator delete(v37);
            }
            unint64_t v35 = v36;
          }
          while (v36 != v34);
          uint64_t v7 = (void **)__p[0];
        }
        __p[1] = v34;
        operator delete(v7);
        goto LABEL_5;
      }
      uint64_t v14 = *(void *)(v12 + 8);
      if (sub_34658(v47, (_DWORD *)(v14 + 128)))
      {
        uint64_t v16 = *(_DWORD ****)v14;
        int v15 = *(_DWORD ****)(v14 + 8);
        if (*(_DWORD ****)v14 != v15) {
          break;
        }
      }
LABEL_17:
      v12 += 16;
    }
LABEL_21:
    uint64_t v17 = **v16;
    long long v18 = (*v16)[1];
    while (1)
    {
      if (v17 == v18)
      {
        v16 += 3;
        if (v16 == v15) {
          goto LABEL_17;
        }
        goto LABEL_21;
      }
      if (sub_34554(v47, v17))
      {
        BOOL v22 = __p[0];
        if (__p[0] != __p[1]) {
          break;
        }
      }
LABEL_22:
      v17 += 3;
    }
    unsigned int v23 = v17[1];
    LODWORD(v19) = *v17;
    double v24 = (double)v19;
    while (2)
    {
      unsigned int v25 = (void *)*v22;
      uint64_t v26 = (void *)v22[1];
      if ((void *)*v22 == v26)
      {
LABEL_28:
        v22 += 3;
        if (v22 == __p[1]) {
          goto LABEL_22;
        }
        continue;
      }
      break;
    }
    int v27 = 0;
    while (2)
    {
      unsigned int v28 = (_DWORD *)v25[1];
      unsigned int v29 = (_DWORD *)(*v25 + 12);
      if ((_DWORD *)*v25 != v28 && v29 != v28)
      {
        while (2)
        {
          unsigned int v31 = *(v29 - 2);
          unsigned int v32 = v29[1];
          if (v31 >= v23)
          {
            if (v32 < v23)
            {
LABEL_43:
              LODWORD(v20) = *v29;
              LODWORD(v21) = *(v29 - 3);
              double v21 = (double)*(unint64_t *)&v21;
              double v20 = ((double)v23 - (double)v31)
                  / ((double)v32 - (double)v31)
                  * ((double)*(unint64_t *)&v20 - v21)
                  + v21;
              if (v20 < v24) {
                v27 ^= 1u;
              }
            }
          }
          else if (v32 >= v23)
          {
            goto LABEL_43;
          }
          v29 += 3;
          if (v29 == v28) {
            break;
          }
          continue;
        }
      }
      v25 += 3;
      if (v25 != v26) {
        continue;
      }
      break;
    }
    if (!v27) {
      goto LABEL_28;
    }
    int v33 = 0;
    uint64_t v34 = (void **)__p[0];
    if (__p[0]) {
      goto LABEL_50;
    }
LABEL_5:
    if (!v33) {
      return 1;
    }
LABEL_6:
    unint64_t v4 = (uint64_t *)*v4;
    if (!v4) {
      return 0;
    }
  }
}

void sub_3CF31C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
}

uint64_t sub_3CF374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *(uint64_t **)(a3 + 16);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = a4;
  uint64_t v6 = a2;
  uint64_t v45 = (_DWORD *)(a2 + 28);
  uint64_t v7 = "excluded_country_list";
  uint64_t v8 = "disputed_area_geometry";
  while (1)
  {
    if (*((_DWORD *)v4 + 12) != 2)
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    uint64_t v10 = (void *)v4[5];
    char v50 = 21;
    *(_OWORD *)std::string __p = *(_OWORD *)v7;
    *(void *)&__p[13] = *(void *)(v7 + 13);
    char v49 = 0;
    uint64_t v11 = sub_5C4AC(v10, (uint64_t)__p);
    if (v50 < 0) {
      operator delete(*(void **)__p);
    }
    *(void *)std::string __p = v5;
    if (*(_DWORD **)(v11 + 8) != sub_3CE248(v11, (unsigned __int8 **)__p)) {
      goto LABEL_6;
    }
    *(_OWORD *)long long v46 = *(_OWORD *)v8;
    *(void *)&v46[14] = *(void *)(v8 + 14);
    __int16 v47 = 5632;
    uint64_t v12 = (uint64_t *)sub_561B0(v10, (uint64_t)v46);
    sub_4B898(v12, __p);
    if (SHIBYTE(v47) < 0) {
      operator delete(*(void **)v46);
    }
    sub_33E8C((uint64_t)v46, (unsigned int ****)__p);
    if (*(_DWORD *)(v6 + 28) == -1 && *(_DWORD *)(v6 + 32) == -1)
    {
      int v13 = 1;
      uint64_t v14 = *(void ***)__p;
      if (!*(void *)__p) {
        goto LABEL_5;
      }
      goto LABEL_39;
    }
    int v15 = sub_34554(v46, v45);
    uint64_t v14 = *(void ***)__p;
    if (v15 && *(void *)__p != *(void *)&__p[8])
    {
      unsigned int v19 = *(_DWORD *)(v6 + 32);
      LODWORD(v16) = *(_DWORD *)(v6 + 28);
      double v20 = (double)v16;
      for (uint64_t i = *(void *)__p; i != *(void *)&__p[8]; i += 24)
      {
        BOOL v22 = *(void **)i;
        unsigned int v23 = *(void **)(i + 8);
        if (*(void **)i != v23)
        {
          int v24 = 0;
          do
          {
            unsigned int v25 = (_DWORD *)v22[1];
            uint64_t v26 = (_DWORD *)(*v22 + 12);
            if ((_DWORD *)*v22 != v25 && v26 != v25)
            {
              do
              {
                unsigned int v28 = *(v26 - 2);
                unsigned int v29 = v26[1];
                if (v28 >= v19)
                {
                  if (v29 < v19)
                  {
LABEL_36:
                    LODWORD(v17) = *v26;
                    LODWORD(v18) = *(v26 - 3);
                    double v18 = (double)*(unint64_t *)&v18;
                    double v17 = ((double)v19 - (double)v28)
                        / ((double)v29 - (double)v28)
                        * ((double)*(unint64_t *)&v17 - v18)
                        + v18;
                    if (v17 < v20) {
                      v24 ^= 1u;
                    }
                  }
                }
                else if (v29 >= v19)
                {
                  goto LABEL_36;
                }
                v26 += 3;
              }
              while (v26 != v25);
            }
            v22 += 3;
          }
          while (v22 != v23);
          if (v24)
          {
            int v13 = 0;
            if (!*(void *)__p) {
              goto LABEL_5;
            }
            goto LABEL_39;
          }
        }
      }
    }
    int v13 = 1;
    if (!*(void *)__p) {
      goto LABEL_5;
    }
LABEL_39:
    unsigned int v30 = *(void ***)&__p[8];
    uint64_t v9 = v14;
    if (*(void ***)&__p[8] != v14)
    {
      unsigned int v31 = v7;
      uint64_t v32 = v6;
      int v33 = v8;
      uint64_t v34 = *(void ***)&__p[8];
      do
      {
        uint64_t v37 = (char *)*(v34 - 3);
        v34 -= 3;
        unsigned int v36 = v37;
        if (v37)
        {
          uint64_t v38 = (char *)*(v30 - 2);
          unint64_t v35 = v36;
          if (v38 != v36)
          {
            uint64_t v39 = (char *)*(v30 - 2);
            do
            {
              unsigned int v41 = (void *)*((void *)v39 - 3);
              v39 -= 24;
              uint64_t v40 = v41;
              if (v41)
              {
                *((void *)v38 - 2) = v40;
                operator delete(v40);
              }
              uint64_t v38 = v39;
            }
            while (v39 != v36);
            unint64_t v35 = *v34;
          }
          *(v30 - 2) = v36;
          operator delete(v35);
        }
        unsigned int v30 = v34;
      }
      while (v34 != v14);
      uint64_t v9 = *(void ***)__p;
      uint64_t v8 = v33;
      uint64_t v6 = v32;
      uint64_t v7 = v31;
      uint64_t v5 = a4;
    }
    *(void *)&__p[8] = v14;
    operator delete(v9);
LABEL_5:
    if (!v13) {
      return 1;
    }
LABEL_6:
    unint64_t v4 = (uint64_t *)*v4;
    if (!v4) {
      return 0;
    }
  }
}

void sub_3CF6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_4CBF8((void ***)va);
  _Unwind_Resume(a1);
}

void sub_3CF6CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_3CF704(void *a1, uint64_t a2)
{
  uint64_t v16 = 0;
  double v17 = operator new(0x28uLL);
  long long v18 = xmmword_20B9260;
  strcpy((char *)v17, "AreaIncidentDisputedTerritoryRule");
  std::string __p = 0;
  int v15 = 0;
  unint64_t v4 = sub_374CDC(a2, (uint64_t)&v17, (uint64_t *)&__p);
  sub_3CB370(v4, 3, 0, a1);
  uint64_t v5 = (void **)__p;
  if (__p)
  {
    uint64_t v6 = v15;
    uint64_t v7 = __p;
    if (v15 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      uint64_t v7 = __p;
    }
    int v15 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17);
  }
  uint64_t v8 = operator new(0x30uLL);
  uint64_t v16 = 0;
  double v17 = v8;
  long long v18 = xmmword_20B9A40;
  strcpy((char *)v8, "UserGeneratedIncidentDisputedTerritoryRule");
  std::string __p = 0;
  int v15 = 0;
  uint64_t v9 = sub_374CDC(a2, (uint64_t)&v17, (uint64_t *)&__p);
  sub_3CB370(v9, 3, 0, a1 + 5);
  uint64_t v10 = (void **)__p;
  if (__p)
  {
    uint64_t v11 = v15;
    uint64_t v12 = __p;
    if (v15 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      uint64_t v12 = __p;
    }
    int v15 = v10;
    operator delete(v12);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17);
  }
  return a1;
}

void sub_3CF8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_5450C(v17);
  _Unwind_Resume(a1);
}

void sub_3CF8E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_3CF90C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  unint64_t v4 = *(uint64_t **)(a3 + 16);
  if (!v4) {
    return 0;
  }
  long long v46 = (void *)(a2[4] + 112);
  while (1)
  {
    if (*((_DWORD *)v4 + 12) != 2)
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    uint64_t v8 = (void *)v4[5];
    HIBYTE(__p[2]) = 21;
    strcpy((char *)__p, "excluded_country_list");
    uint64_t v9 = sub_5C4AC(v8, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = a4;
    if (*(_DWORD **)(v9 + 8) != sub_3CE248(v9, (unsigned __int8 **)__p)) {
      goto LABEL_6;
    }
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_20B91C0;
    strcpy((char *)__p[0], "source_country_code_list");
    uint64_t v10 = sub_5C4AC(v8, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = v46;
    if (*(_DWORD **)(v10 + 8) == sub_3CE248(v10, (unsigned __int8 **)__p)) {
      goto LABEL_6;
    }
    strcpy((char *)v47, "disputed_area_geometry");
    HIBYTE(v47[2]) = 22;
    uint64_t v11 = (uint64_t *)sub_561B0(v8, (uint64_t)v47);
    sub_4B898(v11, __p);
    if (SHIBYTE(v47[2]) < 0) {
      operator delete(v47[0]);
    }
    sub_33E8C((uint64_t)v47, (unsigned int ****)__p);
    uint64_t v12 = a2[1];
    uint64_t v13 = a2[2];
    while (1)
    {
      if (v12 == v13)
      {
        int v33 = 1;
        uint64_t v34 = (void **)__p[0];
        if (!__p[0]) {
          goto LABEL_5;
        }
LABEL_50:
        unint64_t v35 = (void **)__p[1];
        uint64_t v7 = v34;
        if (__p[1] != v34)
        {
          unsigned int v36 = (void **)__p[1];
          do
          {
            uint64_t v39 = (char *)*(v36 - 3);
            v36 -= 3;
            uint64_t v38 = v39;
            if (v39)
            {
              uint64_t v40 = (char *)*(v35 - 2);
              uint64_t v37 = v38;
              if (v40 != v38)
              {
                unsigned int v41 = (char *)*(v35 - 2);
                do
                {
                  int v43 = (void *)*((void *)v41 - 3);
                  v41 -= 24;
                  unsigned int v42 = v43;
                  if (v43)
                  {
                    *((void *)v40 - 2) = v42;
                    operator delete(v42);
                  }
                  uint64_t v40 = v41;
                }
                while (v41 != v38);
                uint64_t v37 = *v36;
              }
              *(v35 - 2) = v38;
              operator delete(v37);
            }
            unint64_t v35 = v36;
          }
          while (v36 != v34);
          uint64_t v7 = (void **)__p[0];
        }
        __p[1] = v34;
        operator delete(v7);
        goto LABEL_5;
      }
      uint64_t v14 = *(void *)(v12 + 8);
      if (sub_34658(v47, (_DWORD *)(v14 + 128)))
      {
        uint64_t v16 = *(_DWORD ****)v14;
        int v15 = *(_DWORD ****)(v14 + 8);
        if (*(_DWORD ****)v14 != v15) {
          break;
        }
      }
LABEL_17:
      v12 += 16;
    }
LABEL_21:
    uint64_t v17 = **v16;
    long long v18 = (*v16)[1];
    while (1)
    {
      if (v17 == v18)
      {
        v16 += 3;
        if (v16 == v15) {
          goto LABEL_17;
        }
        goto LABEL_21;
      }
      if (sub_34554(v47, v17))
      {
        BOOL v22 = __p[0];
        if (__p[0] != __p[1]) {
          break;
        }
      }
LABEL_22:
      v17 += 3;
    }
    unsigned int v23 = v17[1];
    LODWORD(v19) = *v17;
    double v24 = (double)v19;
    while (2)
    {
      unsigned int v25 = (void *)*v22;
      uint64_t v26 = (void *)v22[1];
      if ((void *)*v22 == v26)
      {
LABEL_28:
        v22 += 3;
        if (v22 == __p[1]) {
          goto LABEL_22;
        }
        continue;
      }
      break;
    }
    int v27 = 0;
    while (2)
    {
      unsigned int v28 = (_DWORD *)v25[1];
      unsigned int v29 = (_DWORD *)(*v25 + 12);
      if ((_DWORD *)*v25 != v28 && v29 != v28)
      {
        while (2)
        {
          unsigned int v31 = *(v29 - 2);
          unsigned int v32 = v29[1];
          if (v31 >= v23)
          {
            if (v32 < v23)
            {
LABEL_43:
              LODWORD(v20) = *v29;
              LODWORD(v21) = *(v29 - 3);
              double v21 = (double)*(unint64_t *)&v21;
              double v20 = ((double)v23 - (double)v31)
                  / ((double)v32 - (double)v31)
                  * ((double)*(unint64_t *)&v20 - v21)
                  + v21;
              if (v20 < v24) {
                v27 ^= 1u;
              }
            }
          }
          else if (v32 >= v23)
          {
            goto LABEL_43;
          }
          v29 += 3;
          if (v29 == v28) {
            break;
          }
          continue;
        }
      }
      v25 += 3;
      if (v25 != v26) {
        continue;
      }
      break;
    }
    if (!v27) {
      goto LABEL_28;
    }
    int v33 = 0;
    uint64_t v34 = (void **)__p[0];
    if (__p[0]) {
      goto LABEL_50;
    }
LABEL_5:
    if (!v33) {
      return 1;
    }
LABEL_6:
    unint64_t v4 = (uint64_t *)*v4;
    if (!v4) {
      return 0;
    }
  }
}

void sub_3CFCEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
}

uint64_t sub_3CFD44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *(uint64_t **)(a3 + 16);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = a4;
  uint64_t v6 = a2;
  uint64_t v45 = (_DWORD *)(a2 + 28);
  uint64_t v7 = "excluded_country_list";
  uint64_t v8 = "disputed_area_geometry";
  while (1)
  {
    if (*((_DWORD *)v4 + 12) != 2)
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    uint64_t v10 = (void *)v4[5];
    char v50 = 21;
    *(_OWORD *)std::string __p = *(_OWORD *)v7;
    *(void *)&__p[13] = *(void *)(v7 + 13);
    char v49 = 0;
    uint64_t v11 = sub_5C4AC(v10, (uint64_t)__p);
    if (v50 < 0) {
      operator delete(*(void **)__p);
    }
    *(void *)std::string __p = v5;
    if (*(_DWORD **)(v11 + 8) != sub_3CE248(v11, (unsigned __int8 **)__p)) {
      goto LABEL_6;
    }
    *(_OWORD *)long long v46 = *(_OWORD *)v8;
    *(void *)&v46[14] = *(void *)(v8 + 14);
    __int16 v47 = 5632;
    uint64_t v12 = (uint64_t *)sub_561B0(v10, (uint64_t)v46);
    sub_4B898(v12, __p);
    if (SHIBYTE(v47) < 0) {
      operator delete(*(void **)v46);
    }
    sub_33E8C((uint64_t)v46, (unsigned int ****)__p);
    if (*(_DWORD *)(v6 + 28) == -1 && *(_DWORD *)(v6 + 32) == -1)
    {
      int v13 = 1;
      uint64_t v14 = *(void ***)__p;
      if (!*(void *)__p) {
        goto LABEL_5;
      }
      goto LABEL_39;
    }
    int v15 = sub_34554(v46, v45);
    uint64_t v14 = *(void ***)__p;
    if (v15 && *(void *)__p != *(void *)&__p[8])
    {
      unsigned int v19 = *(_DWORD *)(v6 + 32);
      LODWORD(v16) = *(_DWORD *)(v6 + 28);
      double v20 = (double)v16;
      for (uint64_t i = *(void *)__p; i != *(void *)&__p[8]; i += 24)
      {
        BOOL v22 = *(void **)i;
        unsigned int v23 = *(void **)(i + 8);
        if (*(void **)i != v23)
        {
          int v24 = 0;
          do
          {
            unsigned int v25 = (_DWORD *)v22[1];
            uint64_t v26 = (_DWORD *)(*v22 + 12);
            if ((_DWORD *)*v22 != v25 && v26 != v25)
            {
              do
              {
                unsigned int v28 = *(v26 - 2);
                unsigned int v29 = v26[1];
                if (v28 >= v19)
                {
                  if (v29 < v19)
                  {
LABEL_36:
                    LODWORD(v17) = *v26;
                    LODWORD(v18) = *(v26 - 3);
                    double v18 = (double)*(unint64_t *)&v18;
                    double v17 = ((double)v19 - (double)v28)
                        / ((double)v29 - (double)v28)
                        * ((double)*(unint64_t *)&v17 - v18)
                        + v18;
                    if (v17 < v20) {
                      v24 ^= 1u;
                    }
                  }
                }
                else if (v29 >= v19)
                {
                  goto LABEL_36;
                }
                v26 += 3;
              }
              while (v26 != v25);
            }
            v22 += 3;
          }
          while (v22 != v23);
          if (v24)
          {
            int v13 = 0;
            if (!*(void *)__p) {
              goto LABEL_5;
            }
            goto LABEL_39;
          }
        }
      }
    }
    int v13 = 1;
    if (!*(void *)__p) {
      goto LABEL_5;
    }
LABEL_39:
    unsigned int v30 = *(void ***)&__p[8];
    uint64_t v9 = v14;
    if (*(void ***)&__p[8] != v14)
    {
      unsigned int v31 = v7;
      uint64_t v32 = v6;
      int v33 = v8;
      uint64_t v34 = *(void ***)&__p[8];
      do
      {
        uint64_t v37 = (char *)*(v34 - 3);
        v34 -= 3;
        unsigned int v36 = v37;
        if (v37)
        {
          uint64_t v38 = (char *)*(v30 - 2);
          unint64_t v35 = v36;
          if (v38 != v36)
          {
            uint64_t v39 = (char *)*(v30 - 2);
            do
            {
              unsigned int v41 = (void *)*((void *)v39 - 3);
              v39 -= 24;
              uint64_t v40 = v41;
              if (v41)
              {
                *((void *)v38 - 2) = v40;
                operator delete(v40);
              }
              uint64_t v38 = v39;
            }
            while (v39 != v36);
            unint64_t v35 = *v34;
          }
          *(v30 - 2) = v36;
          operator delete(v35);
        }
        unsigned int v30 = v34;
      }
      while (v34 != v14);
      uint64_t v9 = *(void ***)__p;
      uint64_t v8 = v33;
      uint64_t v6 = v32;
      uint64_t v7 = v31;
      uint64_t v5 = a4;
    }
    *(void *)&__p[8] = v14;
    operator delete(v9);
LABEL_5:
    if (!v13) {
      return 1;
    }
LABEL_6:
    unint64_t v4 = (uint64_t *)*v4;
    if (!v4) {
      return 0;
    }
  }
}

void sub_3D0088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_4CBF8((void ***)va);
  _Unwind_Resume(a1);
}

void sub_3D009C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_3D00D4(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  if (*a4) {
    uint64_t v7 = (void *)(a1 + 40);
  }
  else {
    uint64_t v7 = (void *)a1;
  }
  if (sub_58070(v7, a3))
  {
    uint64_t v8 = sub_560F4(v7, a3);
    if (sub_3CDEB8(a1, a2, v8, a3)) {
      return (void *)(&def_332C + 1);
    }
  }
  uint64_t result = sub_3D01F0(v7, "world");
  if (result)
  {
    char v12 = 5;
    strcpy((char *)__p, "world");
    uint64_t v10 = sub_560F4(v7, (uint64_t)__p);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    return (uint64_t *)sub_3CDEB8(a1, a2, v10, a3);
  }
  return result;
}

void sub_3D01D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_3D01F0(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  uint64_t v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = (void **)operator new(v7 + 1);
    __dst[1] = v5;
    unint64_t v12 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_8;
  }
  HIBYTE(v12) = v4;
  uint64_t v6 = __dst;
  if (v4) {
LABEL_8:
  }
    memcpy(v6, __s, (size_t)v5);
  *((unsigned char *)v5 + (void)v6) = 0;
  uint64_t v9 = sub_58070(a1, (uint64_t)__dst);
  if (SHIBYTE(v12) < 0) {
    operator delete(__dst[0]);
  }
  return v9;
}

void sub_3D02CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_3D02E8(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  if (*a4) {
    uint64_t v7 = (void *)(a1 + 40);
  }
  else {
    uint64_t v7 = (void *)a1;
  }
  if (sub_58070(v7, a3))
  {
    uint64_t v8 = sub_560F4(v7, a3);
    if (sub_3CE9A4(a1, a2, v8, a3)) {
      return (void *)(&def_332C + 1);
    }
  }
  uint64_t result = sub_3D01F0(v7, "world");
  if (result)
  {
    char v12 = 5;
    strcpy((char *)__p, "world");
    uint64_t v10 = sub_560F4(v7, (uint64_t)__p);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    return (uint64_t *)sub_3CE9A4(a1, a2, v10, a3);
  }
  return result;
}

void sub_3D03E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_3D0404(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  if (*a4) {
    uint64_t v7 = (void *)(a1 + 40);
  }
  else {
    uint64_t v7 = (void *)a1;
  }
  if (sub_58070(v7, a3))
  {
    uint64_t v8 = sub_560F4(v7, a3);
    if (sub_3CF374(a1, a2, v8, a3)) {
      return (void *)(&def_332C + 1);
    }
  }
  uint64_t result = sub_3D01F0(v7, "world");
  if (result)
  {
    char v12 = 5;
    strcpy((char *)__p, "world");
    uint64_t v10 = sub_560F4(v7, (uint64_t)__p);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    return (uint64_t *)sub_3CF374(a1, a2, v10, a3);
  }
  return result;
}

void sub_3D0504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_3D0520(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  if (*a4) {
    uint64_t v7 = (void *)(a1 + 40);
  }
  else {
    uint64_t v7 = (void *)a1;
  }
  if (sub_58070(v7, a3))
  {
    uint64_t v8 = sub_560F4(v7, a3);
    if (sub_3CFD44(a1, a2, v8, a3)) {
      return (void *)(&def_332C + 1);
    }
  }
  uint64_t result = sub_3D01F0(v7, "world");
  if (result)
  {
    char v12 = 5;
    strcpy((char *)__p, "world");
    uint64_t v10 = sub_560F4(v7, (uint64_t)__p);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    return (uint64_t *)sub_3CFD44(a1, a2, v10, a3);
  }
  return result;
}

void sub_3D0620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3D063C(uint64_t a1, uint64_t *a2, void *a3, _DWORD *a4)
{
  if (*a4) {
    uint64_t v7 = (void *)(a1 + 40);
  }
  else {
    uint64_t v7 = (void *)a1;
  }
  if (sub_58070(v7, (uint64_t)a3))
  {
    uint64_t v8 = sub_560F4(v7, (uint64_t)a3);
    uint64_t v9 = (unsigned char *)a2[1];
    uint64_t v31 = *a2;
    std::string __p = 0;
    int v33 = 0;
    uint64_t v34 = 0;
    uint64_t v10 = (unsigned char *)a2[2];
    int64_t v11 = v10 - v9;
    if (v10 != v9)
    {
      if (v11 < 0) {
        sub_2E00();
      }
      char v12 = (char *)operator new(v10 - v9);
      int v13 = &v12[16 * (v11 >> 4)];
      std::string __p = v12;
      uint64_t v34 = v13;
      memcpy(v12, v9, v11);
      int v33 = v13;
    }
    uint64_t v35 = a2[4];
    char v14 = sub_3CDA80(a1, &v31, v8, a3);
    if (__p)
    {
      int v33 = __p;
      operator delete(__p);
    }
    if (v14) {
      return 1;
    }
  }
  if (!sub_3D01F0(v7, "world")) {
    return 0;
  }
  char v30 = 5;
  strcpy((char *)v29, "world");
  uint64_t v16 = sub_560F4(v7, (uint64_t)v29);
  if (v30 < 0)
  {
    operator delete(v29[0]);
    double v17 = (unsigned char *)a2[1];
    uint64_t v24 = *a2;
    unsigned int v25 = 0;
    uint64_t v26 = 0;
    int v27 = 0;
    double v20 = (unsigned char *)a2[2];
    int64_t v19 = v20 - v17;
    if (v20 == v17) {
      goto LABEL_20;
    }
LABEL_18:
    if (v19 < 0) {
      sub_2E00();
    }
    double v21 = (char *)operator new(v19);
    BOOL v22 = &v21[16 * (v19 >> 4)];
    unsigned int v25 = v21;
    int v27 = v22;
    memcpy(v21, v17, v19);
    uint64_t v26 = v22;
    goto LABEL_20;
  }
  double v17 = (unsigned char *)a2[1];
  uint64_t v24 = *a2;
  unsigned int v25 = 0;
  uint64_t v26 = 0;
  int v27 = 0;
  double v18 = (unsigned char *)a2[2];
  int64_t v19 = v18 - v17;
  if (v18 != v17) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v28 = a2[4];
  uint64_t v15 = sub_3CDA80(a1, &v24, v16, a3);
  if (v25)
  {
    uint64_t v26 = v25;
    operator delete(v25);
  }
  return v15;
}

void sub_3D0848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3D0894(uint64_t a1, uint64_t *a2, void *a3, _DWORD *a4)
{
  if (*a4) {
    uint64_t v7 = (void *)(a1 + 40);
  }
  else {
    uint64_t v7 = (void *)a1;
  }
  if (sub_58070(v7, (uint64_t)a3))
  {
    uint64_t v8 = sub_560F4(v7, (uint64_t)a3);
    uint64_t v9 = (unsigned char *)a2[1];
    uint64_t v31 = *a2;
    std::string __p = 0;
    int v33 = 0;
    uint64_t v34 = 0;
    uint64_t v10 = (unsigned char *)a2[2];
    int64_t v11 = v10 - v9;
    if (v10 != v9)
    {
      if (v11 < 0) {
        sub_2E00();
      }
      char v12 = (char *)operator new(v10 - v9);
      int v13 = &v12[16 * (v11 >> 4)];
      std::string __p = v12;
      uint64_t v34 = v13;
      memcpy(v12, v9, v11);
      int v33 = v13;
    }
    uint64_t v35 = a2[4];
    char v14 = sub_3CE56C(a1, &v31, v8, a3);
    if (__p)
    {
      int v33 = __p;
      operator delete(__p);
    }
    if (v14) {
      return 1;
    }
  }
  if (!sub_3D01F0(v7, "world")) {
    return 0;
  }
  char v30 = 5;
  strcpy((char *)v29, "world");
  uint64_t v16 = sub_560F4(v7, (uint64_t)v29);
  if (v30 < 0)
  {
    operator delete(v29[0]);
    double v17 = (unsigned char *)a2[1];
    uint64_t v24 = *a2;
    unsigned int v25 = 0;
    uint64_t v26 = 0;
    int v27 = 0;
    double v20 = (unsigned char *)a2[2];
    int64_t v19 = v20 - v17;
    if (v20 == v17) {
      goto LABEL_20;
    }
LABEL_18:
    if (v19 < 0) {
      sub_2E00();
    }
    double v21 = (char *)operator new(v19);
    BOOL v22 = &v21[16 * (v19 >> 4)];
    unsigned int v25 = v21;
    int v27 = v22;
    memcpy(v21, v17, v19);
    uint64_t v26 = v22;
    goto LABEL_20;
  }
  double v17 = (unsigned char *)a2[1];
  uint64_t v24 = *a2;
  unsigned int v25 = 0;
  uint64_t v26 = 0;
  int v27 = 0;
  double v18 = (unsigned char *)a2[2];
  int64_t v19 = v18 - v17;
  if (v18 != v17) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v28 = a2[4];
  uint64_t v15 = sub_3CE56C(a1, &v24, v16, a3);
  if (v25)
  {
    uint64_t v26 = v25;
    operator delete(v25);
  }
  return v15;
}

void sub_3D0AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3D0AEC(uint64_t a1, uint64_t *a2, void *a3, _DWORD *a4)
{
  if (*a4) {
    uint64_t v7 = (void *)(a1 + 40);
  }
  else {
    uint64_t v7 = (void *)a1;
  }
  if (sub_58070(v7, (uint64_t)a3))
  {
    uint64_t v8 = sub_560F4(v7, (uint64_t)a3);
    uint64_t v9 = (unsigned char *)a2[1];
    uint64_t v31 = *a2;
    std::string __p = 0;
    int v33 = 0;
    uint64_t v34 = 0;
    uint64_t v10 = (unsigned char *)a2[2];
    int64_t v11 = v10 - v9;
    if (v10 != v9)
    {
      if (v11 < 0) {
        sub_2E00();
      }
      char v12 = (char *)operator new(v10 - v9);
      int v13 = &v12[16 * (v11 >> 4)];
      std::string __p = v12;
      uint64_t v34 = v13;
      memcpy(v12, v9, v11);
      int v33 = v13;
    }
    uint64_t v35 = a2[4];
    char v14 = sub_3CEF3C(a1, &v31, v8, a3);
    if (__p)
    {
      int v33 = __p;
      operator delete(__p);
    }
    if (v14) {
      return 1;
    }
  }
  if (!sub_3D01F0(v7, "world")) {
    return 0;
  }
  char v30 = 5;
  strcpy((char *)v29, "world");
  uint64_t v16 = sub_560F4(v7, (uint64_t)v29);
  if (v30 < 0)
  {
    operator delete(v29[0]);
    double v17 = (unsigned char *)a2[1];
    uint64_t v24 = *a2;
    unsigned int v25 = 0;
    uint64_t v26 = 0;
    int v27 = 0;
    double v20 = (unsigned char *)a2[2];
    int64_t v19 = v20 - v17;
    if (v20 == v17) {
      goto LABEL_20;
    }
LABEL_18:
    if (v19 < 0) {
      sub_2E00();
    }
    double v21 = (char *)operator new(v19);
    BOOL v22 = &v21[16 * (v19 >> 4)];
    unsigned int v25 = v21;
    int v27 = v22;
    memcpy(v21, v17, v19);
    uint64_t v26 = v22;
    goto LABEL_20;
  }
  double v17 = (unsigned char *)a2[1];
  uint64_t v24 = *a2;
  unsigned int v25 = 0;
  uint64_t v26 = 0;
  int v27 = 0;
  double v18 = (unsigned char *)a2[2];
  int64_t v19 = v18 - v17;
  if (v18 != v17) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v28 = a2[4];
  uint64_t v15 = sub_3CEF3C(a1, &v24, v16, a3);
  if (v25)
  {
    uint64_t v26 = v25;
    operator delete(v25);
  }
  return v15;
}

void sub_3D0CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3D0D44(uint64_t a1, uint64_t *a2, void *a3, _DWORD *a4)
{
  if (*a4) {
    uint64_t v7 = (void *)(a1 + 40);
  }
  else {
    uint64_t v7 = (void *)a1;
  }
  if (sub_58070(v7, (uint64_t)a3))
  {
    uint64_t v8 = sub_560F4(v7, (uint64_t)a3);
    uint64_t v9 = (unsigned char *)a2[1];
    uint64_t v31 = *a2;
    std::string __p = 0;
    int v33 = 0;
    uint64_t v34 = 0;
    uint64_t v10 = (unsigned char *)a2[2];
    int64_t v11 = v10 - v9;
    if (v10 != v9)
    {
      if (v11 < 0) {
        sub_2E00();
      }
      char v12 = (char *)operator new(v10 - v9);
      int v13 = &v12[16 * (v11 >> 4)];
      std::string __p = v12;
      uint64_t v34 = v13;
      memcpy(v12, v9, v11);
      int v33 = v13;
    }
    uint64_t v35 = a2[4];
    char v14 = sub_3CF90C(a1, &v31, v8, a3);
    if (__p)
    {
      int v33 = __p;
      operator delete(__p);
    }
    if (v14) {
      return 1;
    }
  }
  if (!sub_3D01F0(v7, "world")) {
    return 0;
  }
  char v30 = 5;
  strcpy((char *)v29, "world");
  uint64_t v16 = sub_560F4(v7, (uint64_t)v29);
  if (v30 < 0)
  {
    operator delete(v29[0]);
    double v17 = (unsigned char *)a2[1];
    uint64_t v24 = *a2;
    unsigned int v25 = 0;
    uint64_t v26 = 0;
    int v27 = 0;
    double v20 = (unsigned char *)a2[2];
    int64_t v19 = v20 - v17;
    if (v20 == v17) {
      goto LABEL_20;
    }
LABEL_18:
    if (v19 < 0) {
      sub_2E00();
    }
    double v21 = (char *)operator new(v19);
    BOOL v22 = &v21[16 * (v19 >> 4)];
    unsigned int v25 = v21;
    int v27 = v22;
    memcpy(v21, v17, v19);
    uint64_t v26 = v22;
    goto LABEL_20;
  }
  double v17 = (unsigned char *)a2[1];
  uint64_t v24 = *a2;
  unsigned int v25 = 0;
  uint64_t v26 = 0;
  int v27 = 0;
  double v18 = (unsigned char *)a2[2];
  int64_t v19 = v18 - v17;
  if (v18 != v17) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v28 = a2[4];
  uint64_t v15 = sub_3CF90C(a1, &v24, v16, a3);
  if (v25)
  {
    uint64_t v26 = v25;
    operator delete(v25);
  }
  return v15;
}

void sub_3D0F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_3D0F9C()
{
  byte_2557DCF = 8;
  strcpy((char *)&qword_2557DB8, "any_mode");
  byte_2557DE7 = 7;
  strcpy((char *)&dword_2557DD0, "cycling");
  byte_2557DFF = 7;
  strcpy((char *)&dword_2557DE8, "driving");
  byte_2557E17 = 7;
  strcpy((char *)&dword_2557E00, "walking");
  byte_2557E2F = 1;
  word_2557E18 = 65;
  byte_2557E47 = 1;
  word_2557E30 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_2557E78 = 0u;
  *(_OWORD *)&qword_2557E88 = 0u;
  dword_2557E98 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2557E78, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_2557E78, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_2557E78, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_2557E78, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  qword_2557E50 = 0;
  qword_2557E58 = 0;
  qword_2557E48 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_2557E48 = (uint64_t)v0;
  qword_2557E50 = (uint64_t)(v0 + 9);
  qword_2557E58 = (uint64_t)(v0 + 9);
  qword_2557E60 = 0;
  qword_2557E68 = 0;
  unk_2557E70 = 0;
  unint64_t v1 = (char *)operator new(9uLL);
  qword_2557E68 = (uint64_t)(v1 + 9);
  unk_2557E70 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)unint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_2557E60 = (uint64_t)v1;
  return result;
}

void sub_3D1258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_2557E88) {
    sub_20A8064((void **)qword_2557E88);
  }
  uint64_t v37 = (void *)xmmword_2557E78;
  *(void *)&xmmword_2557E78 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_3D12F8(uint64_t *a1, const char *a2, uint64_t a3, const char *a4, const char *a5, const char *a6)
{
  sub_E1B4((uint64_t)v17);
  sub_2DD928(v18, *a1);
  size_t v11 = strlen(a2);
  sub_188FC78(v18, (uint64_t)a2, v11);
  std::ostream::operator<<();
  size_t v12 = strlen(a4);
  sub_188FC78(v18, (uint64_t)a4, v12);
  size_t v13 = strlen(a5);
  sub_188FC78(v18, (uint64_t)a5, v13);
  size_t v14 = strlen(a6);
  sub_188FC78(v18, (uint64_t)a6, v14);
  std::stringbuf::str();
  *(void *)((char *)v17
  v18[0] = v15;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_3D14FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_3D1510(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_3D1524(unint64_t *a1, uint64_t a2)
{
  unint64_t v4 = *a1;
  unint64_t v13 = (HIDWORD(*a1) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(*a1) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((*a1 >> 1) & 1) << 48)) ^ 0x1000000000000;
  int v12 = (unsigned __int16)v4 >> 2;
  if (v4) {
    int v5 = "y";
  }
  else {
    int v5 = "n";
  }
  sub_3D12F8((uint64_t *)&v13, "(+", (uint64_t)&v12, ",r=", v5, ")");
  unint64_t v6 = *a1;
  char v7 = (int *)sub_2D5D58(a2, HIDWORD(v6) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v6) << 32));
  int v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 < 0x1Du)
  {
    unint64_t v9 = 0;
  }
  else
  {
    unint64_t v9 = v8[14];
    if (v9) {
      unint64_t v9 = *(void *)((char *)v7 + v9);
    }
  }
  if ((v6 & 2) == 0) {
    unint64_t v9 = -(uint64_t)v9;
  }
  unint64_t v13 = v9;
  sub_3D1670((uint64_t)&__p, "(geo_id: ", (uint64_t)&v13, ")");
  if (v11 < 0) {
    operator delete(__p);
  }
}

void sub_3D1654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3D1670(uint64_t a1, const char *a2, uint64_t a3, const char *a4)
{
  sub_E1B4((uint64_t)v14);
  int v7 = *(char *)(a1 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a1;
  }
  else {
    uint64_t v8 = *(void *)a1;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a1 + 8);
  }
  sub_188FC78(v15, v8, v9);
  size_t v10 = strlen(a2);
  sub_188FC78(v15, (uint64_t)a2, v10);
  std::ostream::operator<<();
  size_t v11 = strlen(a4);
  sub_188FC78(v15, (uint64_t)a4, v11);
  std::stringbuf::str();
  *(void *)((char *)v14
  v15[0] = v12;
  if (v16 < 0) {
    operator delete((void *)v15[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_3D1848(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_3D185C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_3D1870(void *a1, unint64_t a2)
{
  unint64_t v10 = (HIDWORD(a2) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(a2) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((a2 >> 1) & 1) << 48)) ^ 0x1000000000000;
  int v9 = (unsigned __int16)a2 >> 2;
  if (a2) {
    uint64_t v3 = "y";
  }
  else {
    uint64_t v3 = "n";
  }
  sub_3D12F8((uint64_t *)&v10, "(+", (uint64_t)&v9, ",r=", v3, ")");
  if ((v8 & 0x80u) == 0) {
    unint64_t v4 = __p;
  }
  else {
    unint64_t v4 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v5 = v8;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  sub_188FC78(a1, (uint64_t)v4, v5);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_3D1948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_3D1964()
{
  byte_2557EB7 = 1;
  word_2557EA0 = 65;
}

__n128 sub_3D1980@<Q0>(int a1@<W0>, uint64_t a2@<X8>, __n128 result@<Q0>)
{
  switch(a1)
  {
    case 0:
      *(unsigned char *)(a2 + 23) = 7;
      strcpy((char *)a2, "Success");
      return result;
    case 1:
      unint64_t v4 = "InvalidRequest";
      goto LABEL_49;
    case 2:
      *(unsigned char *)(a2 + 23) = 16;
      result.n128_u64[0] = *(void *)"EVInvalidRequest";
      strcpy((char *)a2, "EVInvalidRequest");
      return result;
    case 3:
      uint64_t v5 = "InvalidResponse";
      goto LABEL_24;
    case 4:
      *(unsigned char *)(a2 + 23) = 18;
      result.n128_u64[0] = *(void *)"UnsupportedRequest";
      strcpy((char *)a2, "UnsupportedRequest");
      return result;
    case 5:
      *(unsigned char *)(a2 + 23) = 20;
      result.n128_u64[0] = *(void *)"EVUnsupportedRequest";
      strcpy((char *)a2, "EVUnsupportedRequest");
      return result;
    case 6:
      *(unsigned char *)(a2 + 23) = 19;
      result.n128_u64[0] = *(void *)"MissingSessionState";
      strcpy((char *)a2, "MissingSessionState");
      return result;
    case 7:
      *(unsigned char *)(a2 + 23) = 19;
      result.n128_u64[0] = *(void *)"InvalidSessionState";
      strcpy((char *)a2, "InvalidSessionState");
      return result;
    case 8:
      unint64_t v6 = (char *)operator new(0x20uLL);
      *(void *)a2 = v6;
      *(_OWORD *)(a2 + 8) = xmmword_20B8890;
      strcpy(v6, "TransitionFromDrivingDisabled");
      result.n128_u64[0] = *(void *)"mDrivingDisabled";
      return result;
    case 9:
      *(unsigned char *)(a2 + 23) = 19;
      result.n128_u64[0] = *(void *)"AnchorLimitExceeded";
      strcpy((char *)a2, "AnchorLimitExceeded");
      return result;
    case 10:
      *(unsigned char *)(a2 + 23) = 7;
      strcpy((char *)a2, "NoRoute");
      return result;
    case 11:
      *(unsigned char *)(a2 + 23) = 19;
      result.n128_u64[0] = *(void *)"PathDecodingFailure";
      strcpy((char *)a2, "PathDecodingFailure");
      return result;
    case 12:
      *(unsigned char *)(a2 + 23) = 12;
      strcpy((char *)a2, "BlockedRoads");
      return result;
    case 13:
      int v7 = "WalkingTooFar";
      goto LABEL_20;
    case 14:
      *(unsigned char *)(a2 + 23) = 12;
      strcpy((char *)a2, "EVOutOfRange");
      return result;
    case 15:
      *(unsigned char *)(a2 + 23) = 19;
      result.n128_u64[0] = *(void *)"MaxDistanceExceeded";
      strcpy((char *)a2, "MaxDistanceExceeded");
      return result;
    case 16:
      int v7 = "OutOfCoverage";
LABEL_20:
      *(unsigned char *)(a2 + 23) = 13;
      *(void *)a2 = *(void *)v7;
      *(void *)(a2 + 5) = *(void *)(v7 + 5);
      *(unsigned char *)(a2 + 13) = 0;
      return result;
    case 17:
      *(unsigned char *)(a2 + 23) = 19;
      result.n128_u64[0] = *(void *)"FarFromTransitStops";
      strcpy((char *)a2, "FarFromTransitStops");
      return result;
    case 18:
      *(unsigned char *)(a2 + 23) = 20;
      result.n128_u64[0] = *(void *)"OutOfTransitCoverage";
      strcpy((char *)a2, "OutOfTransitCoverage");
      return result;
    case 19:
      uint64_t v5 = "EVOutOfCoverage";
LABEL_24:
      *(unsigned char *)(a2 + 23) = 15;
      *(void *)a2 = *(void *)v5;
      *(void *)(a2 + 7) = *(void *)(v5 + 7);
      *(unsigned char *)(a2 + 15) = 0;
      return result;
    case 20:
      *(unsigned char *)(a2 + 23) = 17;
      result.n128_u64[0] = *(void *)"RoadsNonNavigable";
      strcpy((char *)a2, "RoadsNonNavigable");
      return result;
    case 21:
      *(unsigned char *)(a2 + 23) = 11;
      strcpy((char *)a2, "AcrossWater");
      return result;
    case 22:
      *(unsigned char *)(a2 + 23) = 12;
      strcpy((char *)a2, "FarFromRoads");
      return result;
    case 23:
      unsigned __int8 v8 = (char *)operator new(0x19uLL);
      *(void *)a2 = v8;
      long long v9 = xmmword_20B9250;
      unint64_t v10 = "InsufficientOfflineData";
      goto LABEL_37;
    case 24:
      *(unsigned char *)(a2 + 23) = 18;
      result.n128_u64[0] = *(void *)"OriginFarFromRoads";
      strcpy((char *)a2, "OriginFarFromRoads");
      return result;
    case 25:
      *(unsigned char *)(a2 + 23) = 19;
      result.n128_u64[0] = *(void *)"OriginOutOfCoverage";
      strcpy((char *)a2, "OriginOutOfCoverage");
      return result;
    case 26:
      size_t v11 = "OriginEVOutOfCoverage";
      goto LABEL_45;
    case 27:
      uint64_t v12 = (char *)operator new(0x20uLL);
      *(void *)a2 = v12;
      *(_OWORD *)(a2 + 8) = xmmword_20B8870;
      strcpy(v12, "OriginFarFromTransitStops");
      result.n128_u64[0] = *(void *)"FromTransitStops";
      return result;
    case 28:
      unint64_t v13 = (char *)operator new(0x20uLL);
      *(void *)a2 = v13;
      long long v14 = xmmword_20B5EB0;
      uint64_t v15 = "OriginOutOfTransitCoverage";
      goto LABEL_51;
    case 29:
      unsigned __int8 v8 = (char *)operator new(0x19uLL);
      *(void *)a2 = v8;
      long long v9 = xmmword_20B9250;
      unint64_t v10 = "OriginRoadsNonNavigable";
      goto LABEL_37;
    case 30:
      *(unsigned char *)(a2 + 23) = 17;
      result.n128_u64[0] = *(void *)"OriginAcrossWater";
      strcpy((char *)a2, "OriginAcrossWater");
      return result;
    case 31:
      unsigned __int8 v8 = (char *)operator new(0x19uLL);
      *(void *)a2 = v8;
      long long v9 = xmmword_20B9250;
      unint64_t v10 = "DestinationFarFromRoads";
LABEL_37:
      *(_OWORD *)(a2 + 8) = v9;
      double result = *(__n128 *)v10;
      *(_OWORD *)unsigned __int8 v8 = *(_OWORD *)v10;
      *(void *)(v8 + 15) = *(void *)(v10 + 15);
      v8[23] = 0;
      return result;
    case 32:
      char v16 = (char *)operator new(0x20uLL);
      *(void *)a2 = v16;
      *(_OWORD *)(a2 + 8) = xmmword_20B91C0;
      result.n128_u64[0] = *(void *)"DestinationOutOfCoverage";
      strcpy(v16, "DestinationOutOfCoverage");
      return result;
    case 33:
      unint64_t v13 = (char *)operator new(0x20uLL);
      *(void *)a2 = v13;
      long long v14 = xmmword_20B5EB0;
      uint64_t v15 = "DestinationEVOutOfCoverage";
      goto LABEL_51;
    case 34:
      double v17 = (char *)operator new(0x20uLL);
      *(void *)a2 = v17;
      *(_OWORD *)(a2 + 8) = xmmword_20B9800;
      strcpy(v17, "DestinationFarFromTransitStops");
      result.n128_u64[0] = *(void *)"FromTransitStops";
      return result;
    case 35:
      double v18 = (char *)operator new(0x20uLL);
      *(void *)a2 = v18;
      *(_OWORD *)(a2 + 8) = xmmword_20B8E90;
      strcpy(v18, "DestinationOutOfTransitCoverage");
      result.n128_u64[0] = *(void *)"fTransitCoverage";
      return result;
    case 36:
      char v19 = (char *)operator new(0x20uLL);
      *(void *)a2 = v19;
      *(_OWORD *)(a2 + 8) = xmmword_20B91B0;
      strcpy(v19, "DestinationRoadsNonNavigable");
      result.n128_u64[0] = *(void *)"oadsNonNavigable";
      return result;
    case 37:
      result.n128_u64[0] = *(void *)"DestinationAcrossWater";
      strcpy((char *)a2, "DestinationAcrossWater");
      *(unsigned char *)(a2 + 23) = 22;
      return result;
    case 38:
      size_t v11 = "IncorrectNumSolutions";
LABEL_45:
      *(unsigned char *)(a2 + 23) = 21;
      double result = *(__n128 *)v11;
      *(_OWORD *)a2 = *(_OWORD *)v11;
      *(void *)(a2 + 13) = *(void *)(v11 + 13);
      *(unsigned char *)(a2 + 21) = 0;
      return result;
    case 39:
      *(unsigned char *)(a2 + 23) = 19;
      result.n128_u64[0] = *(void *)"OutOfValidityPeriod";
      strcpy((char *)a2, "OutOfValidityPeriod");
      return result;
    case 40:
      unint64_t v4 = "NoTransitRoute";
      goto LABEL_49;
    case 41:
      unint64_t v4 = "BlockedTransit";
LABEL_49:
      *(unsigned char *)(a2 + 23) = 14;
      *(void *)a2 = *(void *)v4;
      *(void *)(a2 + 6) = *(void *)(v4 + 6);
      *(unsigned char *)(a2 + 14) = 0;
      break;
    case 42:
      unint64_t v13 = (char *)operator new(0x20uLL);
      *(void *)a2 = v13;
      long long v14 = xmmword_20B5EB0;
      uint64_t v15 = "TransitEntityLookupFailure";
LABEL_51:
      *(_OWORD *)(a2 + 8) = v14;
      *(_OWORD *)unint64_t v13 = *(_OWORD *)v15;
      double result = *(__n128 *)(v15 + 10);
      *(__n128 *)(v13 + 10) = result;
      v13[26] = 0;
      break;
    default:
      *(unsigned char *)(a2 + 23) = 7;
      strcpy((char *)a2, "Unknown");
      break;
  }
  return result;
}

uint64_t *sub_3D2274@<X0>(uint64_t *result@<X0>, double *a2@<X8>)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  if (*result == v3) {
    goto LABEL_11;
  }
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = (v3 - v2) >> 3;
  double v9 = 0.0;
  double v10 = 0.0;
  do
  {
    double v10 = v10 + *(double *)(v2 + 8 * v7);
    if (v10 > v9)
    {
      uint64_t v5 = v6;
      uint64_t v4 = v7;
      double v9 = v10;
    }
    if (v10 < 0.0) {
      uint64_t v6 = v7 + 1;
    }
    uint64_t v11 = v7 + 1;
    if (v10 < 0.0) {
      double v10 = 0.0;
    }
    ++v7;
  }
  while (v8 != v11);
  if (v9 == 0.0)
  {
LABEL_11:
    *a2 = 0.0;
    a2[1] = 0.0;
    a2[2] = 0.0;
  }
  else
  {
    *(void *)a2 = v5;
    *((void *)a2 + 1) = v4 + 1;
    a2[2] = v9;
  }
  return result;
}

uint64_t sub_3D22FC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = xmmword_20B8E30;
  *(void *)(a1 + 16) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  double v4 = *(double *)(a2 + 56);
  uint64_t v5 = -1;
  if (v4 <= 180.0)
  {
    double v6 = *(double *)(a2 + 48);
    if (v6 >= -85.0511288 && v6 <= 85.0511288 && v4 >= -180.0)
    {
      double v7 = fmax(v6, -85.0511288);
      double v8 = v7 * 3.14159265 / 180.0;
      BOOL v9 = v7 < 85.0511288;
      double v10 = 1.48442223;
      if (v9) {
        double v10 = v8;
      }
      long double v11 = sin(v10);
      LODWORD(v12) = ((log((v11 + 1.0) / (1.0 - v11)) / -12.5663706 + 0.5) * 4294967300.0);
      if (v12 >= 0xFFFFFFFE) {
        uint64_t v12 = 4294967294;
      }
      else {
        uint64_t v12 = v12;
      }
      uint64_t v5 = ((v4 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v12 << 32);
    }
  }
  uint64_t v29 = v5;
  int v30 = 0x7FFFFFFF;
  double v13 = *(double *)(a2 + 72);
  uint64_t v14 = -1;
  if (v13 <= 180.0)
  {
    double v15 = *(double *)(a2 + 64);
    if (v15 >= -85.0511288 && v15 <= 85.0511288 && v13 >= -180.0)
    {
      double v16 = fmax(v15, -85.0511288);
      double v17 = v16 * 3.14159265 / 180.0;
      BOOL v9 = v16 < 85.0511288;
      double v18 = 1.48442223;
      if (v9) {
        double v18 = v17;
      }
      long double v19 = sin(v18);
      LODWORD(v20) = ((log((v19 + 1.0) / (1.0 - v19)) / -12.5663706 + 0.5) * 4294967300.0);
      if (v20 >= 0xFFFFFFFE) {
        uint64_t v20 = 4294967294;
      }
      else {
        uint64_t v20 = v20;
      }
      uint64_t v14 = ((v13 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v20 << 32);
    }
  }
  uint64_t v27 = v14;
  int v28 = 0x7FFFFFFF;
  sub_3392C((uint64_t)&v25, (unsigned int *)&v29, (unsigned int *)&v27);
  *(_OWORD *)a1 = v25;
  *(void *)(a1 + 16) = v26;
  int v21 = *(_DWORD *)(a2 + 80);
  unsigned int v22 = v21 - 2;
  int v23 = v21 - 1;
  if (v22 >= 0xC) {
    int v23 = 0;
  }
  *(_DWORD *)(a1 + 48) = v23;
  return a1;
}

void sub_3D25A8(_Unwind_Exception *a1)
{
  sub_36094(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_3D25C0(uint64_t a1, uint64_t a2, int a3)
{
  *(_OWORD *)a1 = xmmword_20B8E30;
  *(void *)(a1 + 16) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  if (a1 + 24 != a2) {
    sub_31ACC4(a1 + 24, *(char ***)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
  *(_DWORD *)(a1 + 48) = a3;
  return a1;
}

void sub_3D2648(_Unwind_Exception *exception_object)
{
  if (*v2) {
    sub_20A80A8(v1, *v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3D2668(uint64_t a1, uint64_t a2, int a3)
{
  *(_OWORD *)a1 = xmmword_20B8E30;
  *(void *)(a1 + 16) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  if (a1 + 24 != a2) {
    sub_31ACC4(a1 + 24, *(char ***)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
  *(_DWORD *)(a1 + 48) = a3;
  return a1;
}

void sub_3D26F0(_Unwind_Exception *exception_object)
{
  if (*v2) {
    sub_20A80A8(v1, *v2);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_3D2710(uint64_t a1, __n128 *a2, int a3)
{
  *(_OWORD *)a1 = xmmword_20B8E30;
  *(void *)(a1 + 16) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  __n128 result = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  *(__n128 *)a1 = result;
  *(_DWORD *)(a1 + 48) = a3;
  return result;
}

void sub_3D274C(uint64_t a1, uint64_t a2)
{
  double v6 = *(void **)(a1 + 24);
  uint64_t v4 = a1 + 24;
  uint64_t v5 = v6;
  int v7 = *(_DWORD *)(v4 + 24);
  if ((v7 - 1) < 0xC) {
    int v8 = v7 + 1;
  }
  else {
    int v8 = 1;
  }
  *(_DWORD *)(a2 + 16) |= 0x10u;
  *(_DWORD *)(a2 + 80) = v8;
  if (*(void *)(v4 + 8) - (void)v5 == 24 && *v5 != v5[1])
  {
    BOOL v9 = (int **)sub_3D29F4((void *)v4, 0);
    long double v11 = *v9;
    uint64_t v12 = v9[1];
    if (*v9 != v12)
    {
      do
      {
        uint64_t v20 = *(_DWORD **)(a2 + 40);
        if (v20 && (uint64_t v21 = *(int *)(a2 + 32), (int)v21 < *v20))
        {
          *(_DWORD *)(a2 + 32) = v21 + 1;
          uint64_t v14 = *(void *)&v20[2 * v21 + 2];
        }
        else
        {
          uint64_t v13 = sub_15C1918(*(void *)(a2 + 24));
          uint64_t v14 = sub_188CDC8(a2 + 24, v13);
        }
        LODWORD(v10) = v11[1];
        long double v15 = exp((double)*(unint64_t *)&v10 * -6.28318531 / 4294967300.0 + 3.14159265);
        long double v16 = atan((v15 + -1.0 / v15) * 0.5);
        int v17 = *(_DWORD *)(v14 + 40);
        *(_DWORD *)(v14 + 40) = v17 | 1;
        int v18 = *v11;
        v11 += 3;
        LODWORD(v19) = v18;
        double v10 = v16 * 57.2957795;
        *(_DWORD *)(v14 + 40) = v17 | 3;
        *(double *)(v14 + 48) = v10;
        *(double *)(v14 + 56) = (double)v19 * 360.0 / 4294967300.0 + -180.0;
      }
      while (v11 != v12);
    }
  }
  if (sub_344C4((_DWORD *)a1))
  {
    LODWORD(v22) = *(_DWORD *)(a1 + 4);
    long double v23 = exp(3.14159265 - (double)v22 * 6.28318531 / 4294967300.0);
    long double v24 = atan((v23 - 1.0 / v23) * 0.5) * 57.2957795;
    int v25 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = v25 | 1;
    LODWORD(v26) = *(_DWORD *)a1;
    *(_DWORD *)(a2 + 16) = v25 | 3;
    *(long double *)(a2 + 48) = v24;
    *(double *)(a2 + 56) = (double)v26 * 360.0 / 4294967300.0 + -180.0;
    LODWORD(v24) = *(_DWORD *)(a1 + 16);
    long double v27 = exp(3.14159265 - (double)*(unint64_t *)&v24 * 6.28318531 / 4294967300.0);
    long double v28 = atan((v27 - 1.0 / v27) * 0.5);
    *(_DWORD *)(a2 + 16) = v25 | 7;
    LODWORD(v29) = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a2 + 16) = v25 | 0xF;
    *(long double *)(a2 + 64) = v28 * 57.2957795;
    *(double *)(a2 + 72) = (double)v29 * 360.0 / 4294967300.0 + -180.0;
  }
}

uint64_t sub_3D29F4(void *a1, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    double v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    int v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v10 = &v15;
    }
    else {
      double v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    uint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 24 * a2;
}

void sub_3D2B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_3D2C24(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_3D2C3C(uint64_t a1, int **a2, char **a3)
{
  uint64_t v5 = (unsigned __int16 *)((char *)*a2 - **a2);
  if (*v5 >= 0xDu && (uint64_t v6 = v5[6]) != 0)
  {
    int v7 = *(unsigned __int16 *)((char *)*a2 + v6);
    int v8 = *a3;
    long long v9 = &(*a3)[-*(int *)*a3];
    if (*(unsigned __int16 *)v9 < 0xDu)
    {
LABEL_23:
      if (!v7) {
        return 0;
      }
      goto LABEL_8;
    }
  }
  else
  {
    int v7 = 0;
    int v8 = *a3;
    long long v9 = &(*a3)[-*(int *)*a3];
    if (*(unsigned __int16 *)v9 < 0xDu) {
      goto LABEL_23;
    }
  }
  uint64_t v10 = *((unsigned __int16 *)v9 + 6);
  if (!v10) {
    goto LABEL_23;
  }
  if (*(unsigned __int16 *)&v8[v10] == v7) {
    return 0;
  }
LABEL_8:
  unint64_t v11 = *((unsigned int *)a2 + 8) | ((unint64_t)*((unsigned __int16 *)a2 + 18) << 32);
  std::mutex::lock((std::mutex *)(a1 + 7840));
  sub_3D63DC(a1 + 16, v11, &__s1);
  std::mutex::unlock((std::mutex *)(a1 + 7840));
  uint64_t v12 = *((unsigned __int16 *)a3 + 18);
  uint64_t v13 = *((unsigned int *)a3 + 8);
  std::mutex::lock((std::mutex *)(a1 + 7840));
  sub_3D63DC(a1 + 16, v13 | (v12 << 32), &__p);
  std::mutex::unlock((std::mutex *)(a1 + 7840));
  uint64_t v14 = v38;
  if ((v38 & 0x80u) == 0) {
    size_t v15 = v38;
  }
  else {
    size_t v15 = __n;
  }
  size_t v16 = v35;
  if ((v35 & 0x80u) != 0) {
    size_t v16 = v34;
  }
  if (v15 != v16) {
    goto LABEL_26;
  }
  if ((v35 & 0x80u) == 0) {
    p_p = (unsigned __int8 *)&__p;
  }
  else {
    p_p = (unsigned __int8 *)__p;
  }
  if ((v38 & 0x80) != 0)
  {
    if (memcmp(__s1, p_p, __n)) {
      goto LABEL_26;
    }
LABEL_59:
    uint64_t v19 = 0;
    if ((char)v35 < 0) {
      goto LABEL_55;
    }
    goto LABEL_56;
  }
  if (!v38) {
    goto LABEL_59;
  }
  p_s1 = &__s1;
  while (*(unsigned __int8 *)p_s1 == *p_p)
  {
    p_s1 = (void **)((char *)p_s1 + 1);
    ++p_p;
    if (!--v14) {
      goto LABEL_59;
    }
  }
LABEL_26:
  if (!sub_3D2F30(a1, (unsigned __int8 *)&__s1) || !sub_3D2F30(a1, (unsigned __int8 *)&__p))
  {
    uint64_t v19 = 4;
    if (((char)v35 & 0x80000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  if ((v38 & 0x80u) == 0) {
    size_t v20 = v38;
  }
  else {
    size_t v20 = __n;
  }
  if ((v38 & 0x80u) == 0) {
    uint64_t v21 = &__s1;
  }
  else {
    uint64_t v21 = __s1;
  }
  if ((v35 & 0x80u) == 0) {
    size_t v22 = v35;
  }
  else {
    size_t v22 = v34;
  }
  if ((v35 & 0x80u) == 0) {
    long double v23 = &__p;
  }
  else {
    long double v23 = __p;
  }
  if (v22 >= v20) {
    size_t v24 = v20;
  }
  else {
    size_t v24 = v22;
  }
  int v25 = memcmp(v21, v23, v24);
  BOOL v26 = v20 < v22;
  if (v25) {
    BOOL v26 = v25 < 0;
  }
  BOOL v27 = !v26;
  if (v26) {
    long double v28 = &__s1;
  }
  else {
    long double v28 = &__p;
  }
  if (v27) {
    unint64_t v29 = &__s1;
  }
  else {
    unint64_t v29 = &__p;
  }
  v32[0] = (const void **)v28;
  v32[1] = (const void **)v29;
  uint64_t v30 = sub_3D3060((uint64_t *)(a1 + 8008), v32);
  if (*(void *)(a1 + 8016) != v30)
  {
    uint64_t v19 = *(unsigned __int8 *)(v30 + 48);
    if (((char)v35 & 0x80000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  uint64_t v19 = 1;
  if ((char)v35 < 0) {
LABEL_55:
  }
    operator delete(__p);
LABEL_56:
  if ((char)v38 < 0) {
    operator delete(__s1);
  }
  return v19;
}

void sub_3D2ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3D2F30(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2[23];
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *((void *)a2 + 1);
  }
  if (!v2) {
    return 2;
  }
  uint64_t v5 = *(const void ***)(a1 + 7904);
  uint64_t v15 = *(void *)(a1 + 7912);
  size_t v16 = v5;
  uint64_t v6 = sub_3D800C(&v16, &v15, (const void **)a2);
  if (*(const void ***)(a1 + 7912) == v6) {
    return 4 * *(unsigned __int8 *)(a1 + 8000);
  }
  int v7 = v6;
  uint64_t v8 = *((unsigned __int8 *)v6 + 23);
  if ((v8 & 0x80u) == 0) {
    long long v9 = (const void *)*((unsigned __int8 *)v6 + 23);
  }
  else {
    long long v9 = v6[1];
  }
  uint64_t v10 = (const void *)a2[23];
  int v11 = (char)v10;
  if ((char)v10 < 0) {
    uint64_t v10 = (const void *)*((void *)a2 + 1);
  }
  if (v9 != v10) {
    return 4 * *(unsigned __int8 *)(a1 + 8000);
  }
  if (v11 >= 0) {
    uint64_t v12 = a2;
  }
  else {
    uint64_t v12 = *(unsigned __int8 **)a2;
  }
  if ((v8 & 0x80) != 0)
  {
    if (memcmp(*v6, v12, (size_t)v6[1])) {
      return 4 * *(unsigned __int8 *)(a1 + 8000);
    }
  }
  else if (*((unsigned char *)v6 + 23))
  {
    for (uint64_t i = v6; *(unsigned __int8 *)i == *v12; uint64_t i = (const void **)((char *)i + 1))
    {
      ++v12;
      if (!--v8) {
        return *((unsigned int *)v7 + 6);
      }
    }
    return 4 * *(unsigned __int8 *)(a1 + 8000);
  }
  return *((unsigned int *)v7 + 6);
}

uint64_t sub_3D3060(uint64_t *a1, const void ***a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 == v3) {
    return v2;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int v6 = *((char *)*a2 + 23);
  if (v6 >= 0) {
    int v7 = (const void *)*((unsigned __int8 *)*a2 + 23);
  }
  else {
    int v7 = (*a2)[1];
  }
  do
  {
    uint64_t v8 = *(unsigned __int8 *)(v2 + 23);
    if ((v8 & 0x80u) == 0) {
      long long v9 = (const void *)*(unsigned __int8 *)(v2 + 23);
    }
    else {
      long long v9 = *(const void **)(v2 + 8);
    }
    if (v9 != v7) {
      goto LABEL_6;
    }
    if (v6 >= 0) {
      uint64_t v10 = (unsigned __int8 *)v4;
    }
    else {
      uint64_t v10 = (unsigned __int8 *)*v4;
    }
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v2, v10, *(void *)(v2 + 8))) {
        goto LABEL_6;
      }
    }
    else if (*(unsigned char *)(v2 + 23))
    {
      uint64_t v11 = 0;
      while (*(unsigned __int8 *)(v2 + v11) == v10[v11])
      {
        if (v8 == ++v11) {
          goto LABEL_21;
        }
      }
      goto LABEL_6;
    }
LABEL_21:
    uint64_t v12 = *(unsigned __int8 *)(v2 + 47);
    if ((v12 & 0x80u) == 0) {
      uint64_t v13 = (unsigned __int8 *)*(unsigned __int8 *)(v2 + 47);
    }
    else {
      uint64_t v13 = *(unsigned __int8 **)(v2 + 32);
    }
    uint64_t v14 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    int v15 = (char)v14;
    if ((char)v14 < 0) {
      uint64_t v14 = (unsigned __int8 *)v5[1];
    }
    if (v13 == v14)
    {
      if (v15 >= 0) {
        size_t v16 = (unsigned __int8 *)v5;
      }
      else {
        size_t v16 = (unsigned __int8 *)*v5;
      }
      if ((v12 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)(v2 + 24), v16, *(void *)(v2 + 32))) {
          return v2;
        }
      }
      else
      {
        if (!*(unsigned char *)(v2 + 47)) {
          return v2;
        }
        uint64_t v17 = 0;
        while (*(unsigned __int8 *)(v2 + v17 + 24) == v16[v17])
        {
          if (v12 == ++v17) {
            return v2;
          }
        }
      }
    }
LABEL_6:
    v2 += 56;
  }
  while (v2 != v3);
  return v3;
}

uint64_t sub_3D31B4(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v5 = (int *)*((void *)a2 + 1);
  int v6 = (unsigned __int16 *)((char *)v5 - *v5);
  if (*v6 >= 0xDu && (uint64_t v7 = v6[6]) != 0)
  {
    int v8 = *(unsigned __int16 *)((char *)v5 + v7);
    long long v9 = (int *)*((void *)a3 + 1);
    uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
    if (*v10 < 0xDu)
    {
LABEL_23:
      if (!v8) {
        return 0;
      }
      goto LABEL_8;
    }
  }
  else
  {
    int v8 = 0;
    long long v9 = (int *)*((void *)a3 + 1);
    uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
    if (*v10 < 0xDu) {
      goto LABEL_23;
    }
  }
  uint64_t v11 = v10[6];
  if (!v11) {
    goto LABEL_23;
  }
  if (*(unsigned __int16 *)((char *)v9 + v11) == v8) {
    return 0;
  }
LABEL_8:
  unint64_t v12 = *a2 | ((unint64_t)(a2[1] & 0x1FFFFFFF) << 32);
  std::mutex::lock((std::mutex *)(a1 + 7840));
  sub_3D63DC(a1 + 16, v12, &__s1);
  std::mutex::unlock((std::mutex *)(a1 + 7840));
  uint64_t v14 = a3;
  uint64_t v13 = *a3;
  LODWORD(v12) = v14[1];
  std::mutex::lock((std::mutex *)(a1 + 7840));
  sub_3D63DC(a1 + 16, v13 | ((v12 & 0x1FFFFFFF) << 32), &__p);
  std::mutex::unlock((std::mutex *)(a1 + 7840));
  uint64_t v15 = v39;
  if ((v39 & 0x80u) == 0) {
    size_t v16 = v39;
  }
  else {
    size_t v16 = __n;
  }
  size_t v17 = v36;
  if ((v36 & 0x80u) != 0) {
    size_t v17 = v35;
  }
  if (v16 != v17) {
    goto LABEL_26;
  }
  if ((v36 & 0x80u) == 0) {
    p_p = (unsigned __int8 *)&__p;
  }
  else {
    p_p = (unsigned __int8 *)__p;
  }
  if ((v39 & 0x80) != 0)
  {
    if (memcmp(__s1, p_p, __n)) {
      goto LABEL_26;
    }
LABEL_59:
    uint64_t v20 = 0;
    if ((char)v36 < 0) {
      goto LABEL_55;
    }
    goto LABEL_56;
  }
  if (!v39) {
    goto LABEL_59;
  }
  p_s1 = &__s1;
  while (*(unsigned __int8 *)p_s1 == *p_p)
  {
    p_s1 = (void **)((char *)p_s1 + 1);
    ++p_p;
    if (!--v15) {
      goto LABEL_59;
    }
  }
LABEL_26:
  if (!sub_3D2F30(a1, (unsigned __int8 *)&__s1) || !sub_3D2F30(a1, (unsigned __int8 *)&__p))
  {
    uint64_t v20 = 4;
    if (((char)v36 & 0x80000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  if ((v39 & 0x80u) == 0) {
    size_t v21 = v39;
  }
  else {
    size_t v21 = __n;
  }
  if ((v39 & 0x80u) == 0) {
    size_t v22 = &__s1;
  }
  else {
    size_t v22 = __s1;
  }
  if ((v36 & 0x80u) == 0) {
    size_t v23 = v36;
  }
  else {
    size_t v23 = v35;
  }
  if ((v36 & 0x80u) == 0) {
    size_t v24 = &__p;
  }
  else {
    size_t v24 = __p;
  }
  if (v23 >= v21) {
    size_t v25 = v21;
  }
  else {
    size_t v25 = v23;
  }
  int v26 = memcmp(v22, v24, v25);
  BOOL v27 = v21 < v23;
  if (v26) {
    BOOL v27 = v26 < 0;
  }
  BOOL v28 = !v27;
  if (v27) {
    unint64_t v29 = &__s1;
  }
  else {
    unint64_t v29 = &__p;
  }
  if (v28) {
    uint64_t v30 = &__s1;
  }
  else {
    uint64_t v30 = &__p;
  }
  v33[0] = (const void **)v29;
  v33[1] = (const void **)v30;
  uint64_t v31 = sub_3D3060((uint64_t *)(a1 + 8008), v33);
  if (*(void *)(a1 + 8016) != v31)
  {
    uint64_t v20 = *(unsigned __int8 *)(v31 + 48);
    if (((char)v36 & 0x80000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  uint64_t v20 = 1;
  if ((char)v36 < 0) {
LABEL_55:
  }
    operator delete(__p);
LABEL_56:
  if ((char)v39 < 0) {
    operator delete(__s1);
  }
  return v20;
}

void sub_3D344C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3D34A8(uint64_t a1, uint64_t a2, int a3)
{
  char v21 = a3;
  sub_46B058();
  int v6 = v5;
  unint64_t v8 = v7;
  sub_46B060();
  uint64_t v11 = v9;
  unint64_t v12 = v10;
  if (!v6)
  {
    if (!v9 || v10 >= sub_46C760(v9)) {
      return 2;
    }
    goto LABEL_11;
  }
  unint64_t v13 = sub_46C760(v6);
  unint64_t v14 = v13;
  if (!v11)
  {
    if (v8 < v13) {
      goto LABEL_11;
    }
    return 2;
  }
  unint64_t v15 = sub_46C760(v11);
  if (v8 >= v14 || v12 >= v15)
  {
    if (v8 < v14 != v12 < v15) {
      goto LABEL_11;
    }
    return 2;
  }
  uint64_t v16 = sub_46C8EC(v6, v8);
  if (v16 == sub_46C8EC(v11, v12)) {
    return 2;
  }
LABEL_11:
  uint64_t v18 = sub_46C8EC(v6, v8);
  v19[0] = *(unsigned int *)(v18 + 32) | ((unint64_t)*(unsigned __int16 *)(v18 + 36) << 32);
  unsigned int v20 = sub_3D3604(a1, v19, a3);
  v19[0] = a1;
  v19[1] = (unint64_t)&v20;
  v19[2] = (unint64_t)&v21;
  sub_3D36F0(v6, v8, v11, v12, (uint64_t)v19);
  return v20;
}

uint64_t sub_3D3604(uint64_t a1, unint64_t *a2, int a3)
{
  unint64_t v5 = *a2;
  int v6 = (std::mutex *)(a1 + 7840);
  std::mutex::lock((std::mutex *)(a1 + 7840));
  sub_3D63DC(a1 + 16, v5, __p);
  std::mutex::unlock(v6);
  unsigned int v7 = sub_3D2F30(a1, (unsigned __int8 *)__p);
  if (a3) {
    unsigned int v8 = 2;
  }
  else {
    unsigned int v8 = 0;
  }
  if (a3) {
    unsigned int v9 = 2;
  }
  else {
    unsigned int v9 = 1;
  }
  if (v7 != 3) {
    unsigned int v9 = v7;
  }
  if (v7 == 4) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = v9;
  }
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  return v10;
}

void sub_3D36C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_3D36F0(void *result, unint64_t a2, void *a3, unint64_t a4, uint64_t a5)
{
  unsigned int v9 = result;
  if (result)
  {
    __n128 result = (void *)sub_46C760(result);
    uint64_t v10 = result;
    if (a3)
    {
      __n128 result = (void *)sub_46C760(a3);
      if (a2 >= (unint64_t)v10 || a4 >= (unint64_t)result)
      {
        if (a2 < (unint64_t)v10 != a4 < (unint64_t)result) {
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v11 = sub_46C8EC(v9, a2);
        __n128 result = (void *)sub_46C8EC(a3, a4);
        if ((void *)v11 != result)
        {
          while (1)
          {
LABEL_20:
            unint64_t v20 = a2 + 1;
            unint64_t v21 = sub_46C760(v9);
            __n128 result = (void *)sub_46C760(a3);
            if (a2 + 1 >= v21 || a4 >= (unint64_t)result)
            {
              if (v20 < v21 == a4 < (unint64_t)result) {
                return result;
              }
            }
            else
            {
              uint64_t v22 = sub_46C8EC(v9, a2 + 1);
              __n128 result = (void *)sub_46C8EC(a3, a4);
              if ((void *)v22 == result) {
                return result;
              }
            }
            uint64_t v18 = (void *)sub_46C8EC(v9, a2);
            uint64_t v19 = (char **)sub_46C8EC(v9, v20);
            sub_3D86D0(a5, v18, v19);
            a2 = v20;
          }
        }
      }
    }
    else if (a2 < (unint64_t)result)
    {
      __n128 result = (void *)sub_46C760(v9);
      if (a2 + 1 < (unint64_t)result)
      {
        do
        {
          unint64_t v15 = (void *)sub_46C8EC(v9, a2);
          uint64_t v16 = (char **)sub_46C8EC(v9, a2 + 1);
          sub_3D86D0(a5, v15, v16);
          __n128 result = (void *)sub_46C760(v9);
          unint64_t v17 = a2 + 2;
          ++a2;
        }
        while (v17 < (unint64_t)result);
      }
    }
  }
  else if (a3)
  {
    __n128 result = (void *)sub_46C760(a3);
    if (a4 < (unint64_t)result)
    {
      for (__n128 result = (void *)sub_46C760(a3); a4 < (unint64_t)result; a2 = v12)
      {
        uint64_t v12 = a2 + 1;
        char v13 = (void *)sub_46C8EC(0, a2);
        unint64_t v14 = (char **)sub_46C8EC(0, v12);
        sub_3D86D0(a5, v13, v14);
        __n128 result = (void *)sub_46C760(a3);
      }
    }
  }
  return result;
}

uint64_t sub_3D3910(uint64_t a1, uint64_t a2, int a3)
{
  char v21 = a3;
  sub_46B058();
  int v6 = v5;
  unint64_t v8 = v7;
  sub_46B060();
  uint64_t v11 = v9;
  unint64_t v12 = v10;
  if (!v6)
  {
    if (!v9 || v10 >= sub_46C760(v9)) {
      return 2;
    }
    goto LABEL_11;
  }
  unint64_t v13 = sub_46C760(v6);
  unint64_t v14 = v13;
  if (!v11)
  {
    if (v8 < v13) {
      goto LABEL_11;
    }
    return 2;
  }
  unint64_t v15 = sub_46C760(v11);
  if (v8 >= v14 || v12 >= v15)
  {
    if (v8 < v14 != v12 < v15) {
      goto LABEL_11;
    }
    return 2;
  }
  uint64_t v16 = sub_46C8EC(v6, v8);
  if (v16 == sub_46C8EC(v11, v12)) {
    return 2;
  }
LABEL_11:
  uint64_t v18 = sub_46C8EC(v6, v8);
  v19[0] = *(unsigned int *)(v18 + 32) | ((unint64_t)*(unsigned __int16 *)(v18 + 36) << 32);
  unsigned int v20 = sub_3D3604(a1, v19, a3);
  v19[0] = a1;
  v19[1] = (unint64_t)&v20;
  v19[2] = (unint64_t)&v21;
  sub_3D3A6C(v6, v8, v11, v12, (uint64_t)v19);
  return v20;
}

void *sub_3D3A6C(void *result, unint64_t a2, void *a3, unint64_t a4, uint64_t a5)
{
  unsigned int v9 = result;
  if (result)
  {
    __n128 result = (void *)sub_46C760(result);
    unint64_t v10 = result;
    if (a3)
    {
      __n128 result = (void *)sub_46C760(a3);
      if (a2 >= (unint64_t)v10 || a4 >= (unint64_t)result)
      {
        if (a2 < (unint64_t)v10 != a4 < (unint64_t)result) {
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v11 = sub_46C8EC(v9, a2);
        __n128 result = (void *)sub_46C8EC(a3, a4);
        if ((void *)v11 != result)
        {
          while (1)
          {
LABEL_20:
            unint64_t v20 = a2 + 1;
            unint64_t v21 = sub_46C760(v9);
            __n128 result = (void *)sub_46C760(a3);
            if (a2 + 1 >= v21 || a4 >= (unint64_t)result)
            {
              if (v20 < v21 == a4 < (unint64_t)result) {
                return result;
              }
            }
            else
            {
              uint64_t v22 = sub_46C8EC(v9, a2 + 1);
              __n128 result = (void *)sub_46C8EC(a3, a4);
              if ((void *)v22 == result) {
                return result;
              }
            }
            uint64_t v18 = (void *)sub_46C8EC(v9, a2);
            uint64_t v19 = (char **)sub_46C8EC(v9, v20);
            sub_3D88E0(a5, v18, v19);
            a2 = v20;
          }
        }
      }
    }
    else if (a2 < (unint64_t)result)
    {
      __n128 result = (void *)sub_46C760(v9);
      if (a2 + 1 < (unint64_t)result)
      {
        do
        {
          unint64_t v15 = (void *)sub_46C8EC(v9, a2);
          uint64_t v16 = (char **)sub_46C8EC(v9, a2 + 1);
          sub_3D88E0(a5, v15, v16);
          __n128 result = (void *)sub_46C760(v9);
          unint64_t v17 = a2 + 2;
          ++a2;
        }
        while (v17 < (unint64_t)result);
      }
    }
  }
  else if (a3)
  {
    __n128 result = (void *)sub_46C760(a3);
    if (a4 < (unint64_t)result)
    {
      for (__n128 result = (void *)sub_46C760(a3); a4 < (unint64_t)result; a2 = v12)
      {
        uint64_t v12 = a2 + 1;
        unint64_t v13 = (void *)sub_46C8EC(0, a2);
        unint64_t v14 = (char **)sub_46C8EC(0, v12);
        sub_3D88E0(a5, v13, v14);
        __n128 result = (void *)sub_46C760(a3);
      }
    }
  }
  return result;
}

uint64_t sub_3D3C8C(uint64_t a1, uint64_t a2, int a3)
{
  char v21 = a3;
  sub_46B058();
  int v6 = v5;
  unint64_t v8 = v7;
  sub_46FF18();
  uint64_t v11 = v9;
  unint64_t v12 = v10;
  if (!v6)
  {
    if (!v9 || v10 >= sub_470ADC(v9)) {
      return 2;
    }
    goto LABEL_11;
  }
  unint64_t v13 = sub_470ADC(v6);
  unint64_t v14 = v13;
  if (!v11)
  {
    if (v8 < v13) {
      goto LABEL_11;
    }
    return 2;
  }
  unint64_t v15 = sub_470ADC(v11);
  if (v8 >= v14 || v12 >= v15)
  {
    if (v8 < v14 != v12 < v15) {
      goto LABEL_11;
    }
    return 2;
  }
  uint64_t v16 = sub_470B40(v6, v8);
  if (v16 == sub_470B40(v11, v12)) {
    return 2;
  }
LABEL_11:
  uint64_t v18 = (unsigned int *)sub_470B40(v6, v8);
  v19[0] = *v18 | ((unint64_t)(v18[1] & 0x1FFFFFFF) << 32);
  unsigned int v20 = sub_3D3604(a1, v19, a3);
  v19[0] = a1;
  v19[1] = (unint64_t)&v20;
  v19[2] = (unint64_t)&v21;
  sub_3D3DE8(v6, v8, v11, v12, (uint64_t)v19);
  return v20;
}

void *sub_3D3DE8(void *result, unint64_t a2, void *a3, unint64_t a4, uint64_t a5)
{
  unsigned int v9 = result;
  if (result)
  {
    __n128 result = (void *)sub_470ADC(result);
    unint64_t v10 = result;
    if (a3)
    {
      __n128 result = (void *)sub_470ADC(a3);
      if (a2 >= (unint64_t)v10 || a4 >= (unint64_t)result)
      {
        if (a2 < (unint64_t)v10 != a4 < (unint64_t)result) {
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v11 = sub_470B40(v9, a2);
        __n128 result = (void *)sub_470B40(a3, a4);
        if ((void *)v11 != result)
        {
          while (1)
          {
LABEL_20:
            unint64_t v20 = a2 + 1;
            unint64_t v21 = sub_470ADC(v9);
            __n128 result = (void *)sub_470ADC(a3);
            if (a2 + 1 >= v21 || a4 >= (unint64_t)result)
            {
              if (v20 < v21 == a4 < (unint64_t)result) {
                return result;
              }
            }
            else
            {
              uint64_t v22 = sub_470B40(v9, a2 + 1);
              __n128 result = (void *)sub_470B40(a3, a4);
              if ((void *)v22 == result) {
                return result;
              }
            }
            uint64_t v18 = sub_470B40(v9, a2);
            uint64_t v19 = sub_470B40(v9, v20);
            sub_3D8AF0(a5, v18, v19);
            a2 = v20;
          }
        }
      }
    }
    else if (a2 < (unint64_t)result)
    {
      __n128 result = (void *)sub_470ADC(v9);
      if (a2 + 1 < (unint64_t)result)
      {
        do
        {
          uint64_t v15 = sub_470B40(v9, a2);
          uint64_t v16 = sub_470B40(v9, a2 + 1);
          sub_3D8AF0(a5, v15, v16);
          __n128 result = (void *)sub_470ADC(v9);
          unint64_t v17 = a2 + 2;
          ++a2;
        }
        while (v17 < (unint64_t)result);
      }
    }
  }
  else if (a3)
  {
    __n128 result = (void *)sub_470ADC(a3);
    if (a4 < (unint64_t)result)
    {
      for (__n128 result = (void *)sub_470ADC(a3); a4 < (unint64_t)result; a2 = v12)
      {
        uint64_t v12 = a2 + 1;
        uint64_t v13 = sub_470B40(0, a2);
        uint64_t v14 = sub_470B40(0, v12);
        sub_3D8AF0(a5, v13, v14);
        __n128 result = (void *)sub_470ADC(a3);
      }
    }
  }
  return result;
}

uint64_t sub_3D4008(uint64_t a1, char *a2, int a3)
{
  char v43 = a3;
  sub_45E97C(a2, (uint64_t)&v37);
  sub_45EA74(a2, (uint64_t)&v31);
  if (v41 == v42 || v35 == v36)
  {
    if ((v41 == v42) != (v35 == v36)) {
      goto LABEL_23;
    }
    goto LABEL_7;
  }
  if (v38 != v32) {
    goto LABEL_23;
  }
  if (!(void)v37)
  {
    uint64_t v12 = (void *)v31;
    if (!(void)v31) {
      goto LABEL_7;
    }
    BOOL v11 = 0;
    goto LABEL_16;
  }
  unint64_t v9 = *((void *)&v37 + 1);
  unint64_t v10 = sub_46C760((void *)v37);
  BOOL v11 = v9 < v10;
  uint64_t v12 = (void *)v31;
  if ((void)v31)
  {
LABEL_16:
    unint64_t v13 = *((void *)&v31 + 1);
    unint64_t v14 = sub_46C760(v12);
    if (v13 < v14 && v11)
    {
      uint64_t v16 = sub_46C8EC((void *)v37, *((uint64_t *)&v37 + 1));
      if (v16 != sub_46C8EC((void *)v31, *((uint64_t *)&v31 + 1))) {
        goto LABEL_23;
      }
    }
    else if ((v11 ^ (v13 < v14)))
    {
      goto LABEL_23;
    }
    goto LABEL_7;
  }
  if (v9 < v10)
  {
LABEL_23:
    uint64_t v17 = sub_46C8EC((void *)v37, *((uint64_t *)&v37 + 1));
    v19[0] = *(unsigned int *)(v17 + 32) | ((unint64_t)*(unsigned __int16 *)(v17 + 36) << 32);
    unsigned int v30 = sub_3D3604(a1, v19, a3);
    sub_39ECCC((uint64_t)&v25, &v37);
    sub_39ECCC((uint64_t)v20, &v31);
    v19[0] = a1;
    v19[1] = (unint64_t)&v30;
    v19[2] = (unint64_t)&v43;
    sub_3D428C(&v25, (uint64_t)v20, (uint64_t)v19);
    if (__p)
    {
      size_t v24 = __p;
      operator delete(__p);
    }
    if (v21)
    {
      uint64_t v22 = v21;
      operator delete(v21);
    }
    if (v28)
    {
      unint64_t v29 = v28;
      operator delete(v28);
    }
    if (v26)
    {
      BOOL v27 = v26;
      operator delete(v26);
    }
    uint64_t v7 = v30;
    unint64_t v8 = v35;
    if (v35) {
      goto LABEL_32;
    }
    goto LABEL_33;
  }
LABEL_7:
  uint64_t v7 = 2;
  unint64_t v8 = v35;
  if (v35)
  {
LABEL_32:
    unsigned __int8 v36 = v8;
    operator delete(v8);
  }
LABEL_33:
  if (v33)
  {
    size_t v34 = v33;
    operator delete(v33);
  }
  if (v41)
  {
    unsigned int v42 = v41;
    operator delete(v41);
  }
  if (v39)
  {
    uint64_t v40 = v39;
    operator delete(v39);
  }
  return v7;
}

void sub_3D4220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  sub_39EB70(&a32);
  sub_39EB70((void *)(v32 - 128));
  _Unwind_Resume(a1);
}

void sub_3D428C(long long *a1, uint64_t a2, uint64_t a3)
{
  if (!sub_3AA3AC((uint64_t)a1, a2))
  {
    sub_39ECCC((uint64_t)v8, a1);
    sub_39EBB4((void **)a1);
    while (!sub_3AA3AC((uint64_t)a1, a2))
    {
      int v6 = (void *)sub_46C8EC(v8[0], (uint64_t)v8[1]);
      uint64_t v7 = (char **)sub_46C8EC(*(void **)a1, *((void *)a1 + 1));
      sub_3D8D00(a3, v6, v7);
      sub_39EBB4((void **)a1);
      sub_39EBB4(v8);
    }
    if (__p)
    {
      uint64_t v12 = __p;
      operator delete(__p);
    }
    if (v9)
    {
      unint64_t v10 = v9;
      operator delete(v9);
    }
  }
}

void sub_3D4348(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_39EB70((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_3D435C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_39EB70((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_3D4370(uint64_t a1, void *a2, int a3)
{
  if (sub_EAE144(a2)) {
    return 2;
  }
  uint64_t v8 = sub_EADD1C((uint64_t)a2);
  unint64_t v13 = *(unsigned int *)(v8 + 32) | ((unint64_t)*(unsigned __int16 *)(v8 + 36) << 32);
  uint64_t v6 = sub_3D3604(a1, &v13, a3);
  unint64_t v9 = (uint64_t *)sub_5231C((uint64_t)a2);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  while (v10 != v11)
  {
    if (sub_3D2C3C(a1, (int **)v10, (char **)(v10 + 40)))
    {
      unint64_t v13 = *(unsigned int *)(v10 + 72) | ((unint64_t)*(unsigned __int16 *)(v10 + 76) << 32);
      int v12 = sub_3D3604(a1, &v13, a3);
      if ((int)v6 >= v12) {
        uint64_t v6 = v12;
      }
      else {
        uint64_t v6 = v6;
      }
    }
    v10 += 96;
  }
  return v6;
}

uint64_t sub_3D4450(uint64_t a1, uint64_t *a2, int a3)
{
  if (sub_EA8E90(a2)) {
    return 2;
  }
  uint64_t v7 = (unsigned int *)sub_EA9074(a2);
  *(void *)&long long v29 = *v7 | ((unint64_t)(v7[1] & 0x1FFFFFFF) << 32);
  uint64_t v6 = sub_3D3604(a1, (unint64_t *)&v29, a3);
  sub_EA8B50(a2, (uint64_t)&v29);
  sub_3D6680((uint64_t)&v23, &v29);
  sub_3D6680((uint64_t)v18, &v34);
  uint64_t v8 = v27;
  unint64_t v9 = v28;
  while (v8 == v9 || v21 == v22)
  {
    if ((v8 == v9) == (v21 == v22)) {
      goto LABEL_22;
    }
    uint64_t v10 = v23;
LABEL_14:
    if (sub_3D31B4(a1, v10, v10 + 12))
    {
      unint64_t v17 = v10[12] | ((unint64_t)(v10[13] & 0x1FFFFFFF) << 32);
      int v12 = sub_3D3604(a1, &v17, a3);
      if ((int)v6 >= v12) {
        uint64_t v6 = v12;
      }
      else {
        uint64_t v6 = v6;
      }
    }
    unint64_t v13 = v24;
    unint64_t v14 = v23 + 26;
    uint64_t v8 = v27;
    unint64_t v9 = v28;
    unint64_t v15 = ((v28 - (unsigned char *)v27) >> 3) - 1;
    v23 += 26;
    if (v24 < v15)
    {
      do
      {
        if (v14 != *((unsigned int **)v27 + v13)) {
          break;
        }
        unint64_t v24 = v13 + 1;
        unint64_t v14 = (unsigned int *)*((void *)v25 + v13 + 1);
        size_t v23 = v14;
        ++v13;
      }
      while (v15 != v24);
    }
  }
  uint64_t v10 = v23;
  if (v24 != v18[1] || v23 != (unsigned int *)v18[0]) {
    goto LABEL_14;
  }
LABEL_22:
  if (v21)
  {
    uint64_t v22 = v21;
    operator delete(v21);
  }
  if (__p)
  {
    unint64_t v20 = __p;
    operator delete(__p);
  }
  if (v27)
  {
    BOOL v28 = v27;
    operator delete(v27);
  }
  if (v25)
  {
    int v26 = v25;
    operator delete(v25);
  }
  if (v37)
  {
    uint64_t v38 = v37;
    operator delete(v37);
  }
  if (v35)
  {
    unsigned __int8 v36 = v35;
    operator delete(v35);
  }
  if (v32)
  {
    uint64_t v33 = v32;
    operator delete(v32);
  }
  if (v30)
  {
    long long v31 = v30;
    operator delete(v30);
  }
  return v6;
}

void sub_3D4660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
}

uint64_t sub_3D4688(uint64_t a1, void *a2)
{
  unint64_t v4 = sub_46C760(a2);
  if (v4)
  {
    unint64_t v5 = v4;
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v7 = (void *)sub_46C8EC(a2, i);
      uint64_t v8 = v7;
      if (i)
      {
        unint64_t v9 = (unsigned __int16 *)(*v7 - *(int *)*v7);
        if (*v9 >= 0xDu && (uint64_t v10 = v9[6]) != 0) {
          int v11 = *(unsigned __int16 *)(*v7 + v10);
        }
        else {
          int v11 = 0;
        }
        int v12 = (void *)sub_46C8EC(a2, i - 1);
        unint64_t v13 = (unsigned __int16 *)(*v12 - *(int *)*v12);
        if (*v13 >= 0xDu && (uint64_t v14 = v13[6]) != 0)
        {
          if (*(unsigned __int16 *)(*v12 + v14) == v11) {
            continue;
          }
        }
        else if (!v11)
        {
          continue;
        }
      }
      unint64_t v15 = *((unsigned int *)v8 + 8) | ((unint64_t)*((unsigned __int16 *)v8 + 18) << 32);
      std::mutex::lock((std::mutex *)(a1 + 7840));
      sub_3D63DC(a1 + 16, v15, &__p);
      std::mutex::unlock((std::mutex *)(a1 + 7840));
      uint64_t v16 = *(const void ***)(a1 + 7968);
      uint64_t v36 = *(void *)(a1 + 7976);
      long long v37 = v16;
      unint64_t v17 = sub_3D8148(&v37, &v36, (const void **)&__p);
      if (*(const void ***)(a1 + 7976) != v17)
      {
        uint64_t v18 = *((unsigned __int8 *)v17 + 23);
        if ((v18 & 0x80u) == 0) {
          uint64_t v19 = (const void *)*((unsigned __int8 *)v17 + 23);
        }
        else {
          uint64_t v19 = v17[1];
        }
        unint64_t v20 = v35;
        int v21 = (char)v35;
        if ((v35 & 0x80u) != 0) {
          unint64_t v20 = v34;
        }
        if (v19 == (const void *)v20)
        {
          if ((v35 & 0x80u) == 0) {
            p_p = (unsigned __int8 *)&__p;
          }
          else {
            p_p = (unsigned __int8 *)__p;
          }
          if ((v18 & 0x80) != 0)
          {
            if (!memcmp(*v17, p_p, (size_t)v17[1]))
            {
LABEL_45:
              char v30 = 0;
              int v31 = 3;
              if (v21 < 0) {
                goto LABEL_49;
              }
              goto LABEL_50;
            }
          }
          else
          {
            if (!*((unsigned char *)v17 + 23)) {
              goto LABEL_45;
            }
            while (*(unsigned __int8 *)v17 == *p_p)
            {
              unint64_t v17 = (const void **)((char *)v17 + 1);
              ++p_p;
              if (!--v18) {
                goto LABEL_45;
              }
            }
          }
        }
      }
      size_t v23 = *(const void ***)(a1 + 7936);
      uint64_t v36 = *(void *)(a1 + 7944);
      long long v37 = v23;
      unint64_t v24 = sub_3D8148(&v37, &v36, (const void **)&__p);
      unint64_t v25 = v35;
      int v26 = (char)v35;
      if (*(const void ***)(a1 + 7944) != v24)
      {
        uint64_t v27 = *((unsigned __int8 *)v24 + 23);
        if ((v27 & 0x80u) == 0) {
          BOOL v28 = (const void *)*((unsigned __int8 *)v24 + 23);
        }
        else {
          BOOL v28 = v24[1];
        }
        if ((v35 & 0x80u) != 0) {
          unint64_t v25 = v34;
        }
        if (v28 == (const void *)v25)
        {
          if ((v35 & 0x80u) == 0) {
            long long v29 = (unsigned __int8 *)&__p;
          }
          else {
            long long v29 = (unsigned __int8 *)__p;
          }
          if ((v27 & 0x80) != 0)
          {
            if (!memcmp(*v24, v29, (size_t)v24[1]))
            {
LABEL_54:
              int v31 = 0;
              char v30 = 1;
              if ((v26 & 0x80000000) == 0) {
                goto LABEL_50;
              }
LABEL_49:
              operator delete(__p);
              goto LABEL_50;
            }
          }
          else
          {
            if (!*((unsigned char *)v24 + 23)) {
              goto LABEL_54;
            }
            while (*(unsigned __int8 *)v24 == *v29)
            {
              unint64_t v24 = (const void **)((char *)v24 + 1);
              ++v29;
              if (!--v27) {
                goto LABEL_54;
              }
            }
          }
        }
      }
      char v30 = 0;
      int v31 = 1;
      if (v26 < 0) {
        goto LABEL_49;
      }
LABEL_50:
      if ((v30 & 1) == 0 && v31 != 3 && v31) {
        return 0;
      }
    }
  }
  return 1;
}

void sub_3D4950(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_3D4964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_3D4980(uint64_t a1, const void **a2)
{
  unint64_t v4 = *(const void ***)(a1 + 7968);
  uint64_t v21 = *(void *)(a1 + 7976);
  uint64_t v22 = v4;
  unint64_t v5 = sub_3D8148(&v22, &v21, a2);
  if (*(const void ***)(a1 + 7976) == v5) {
    return 0;
  }
  uint64_t v6 = *((unsigned __int8 *)v5 + 23);
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = (const void *)*((unsigned __int8 *)v5 + 23);
  }
  else {
    uint64_t v7 = v5[1];
  }
  uint64_t v8 = (const void *)*((unsigned __int8 *)a2 + 23);
  int v9 = (char)v8;
  if ((char)v8 < 0) {
    uint64_t v8 = a2[1];
  }
  if (v7 != v8) {
    return 0;
  }
  if (v9 >= 0) {
    uint64_t v10 = (unsigned __int8 *)a2;
  }
  else {
    uint64_t v10 = (unsigned __int8 *)*a2;
  }
  if ((v6 & 0x80) != 0) {
    return memcmp(*v5, v10, (size_t)v5[1]) == 0;
  }
  if (!*((unsigned char *)v5 + 23)) {
    return 1;
  }
  uint64_t v11 = v6 - 1;
  do
  {
    int v13 = *(unsigned __int8 *)v5;
    unint64_t v5 = (const void **)((char *)v5 + 1);
    int v12 = v13;
    int v15 = *v10++;
    int v14 = v15;
    BOOL v17 = v11-- != 0;
    BOOL v18 = v12 == v14;
    BOOL v19 = v12 == v14;
  }
  while (v18 && v17);
  return v19;
}

uint64_t sub_3D4A98(uint64_t a1, void *a2)
{
  unint64_t v4 = sub_46C760(a2);
  if (v4)
  {
    unint64_t v5 = v4;
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v7 = (void *)sub_46C8EC(a2, i);
      uint64_t v8 = v7;
      if (i)
      {
        int v9 = (unsigned __int16 *)(*v7 - *(int *)*v7);
        if (*v9 >= 0xDu && (uint64_t v10 = v9[6]) != 0) {
          int v11 = *(unsigned __int16 *)(*v7 + v10);
        }
        else {
          int v11 = 0;
        }
        int v12 = (void *)sub_46C8EC(a2, i - 1);
        int v13 = (unsigned __int16 *)(*v12 - *(int *)*v12);
        if (*v13 >= 0xDu && (uint64_t v14 = v13[6]) != 0)
        {
          if (*(unsigned __int16 *)(*v12 + v14) == v11) {
            continue;
          }
        }
        else if (!v11)
        {
          continue;
        }
      }
      unint64_t v15 = *((unsigned int *)v8 + 8) | ((unint64_t)*((unsigned __int16 *)v8 + 18) << 32);
      std::mutex::lock((std::mutex *)(a1 + 7840));
      sub_3D63DC(a1 + 16, v15, &__p);
      std::mutex::unlock((std::mutex *)(a1 + 7840));
      uint64_t v16 = *(const void ***)(a1 + 7968);
      uint64_t v36 = *(void *)(a1 + 7976);
      long long v37 = v16;
      BOOL v17 = sub_3D8148(&v37, &v36, (const void **)&__p);
      if (*(const void ***)(a1 + 7976) != v17)
      {
        uint64_t v18 = *((unsigned __int8 *)v17 + 23);
        if ((v18 & 0x80u) == 0) {
          BOOL v19 = (const void *)*((unsigned __int8 *)v17 + 23);
        }
        else {
          BOOL v19 = v17[1];
        }
        unint64_t v20 = v35;
        int v21 = (char)v35;
        if ((v35 & 0x80u) != 0) {
          unint64_t v20 = v34;
        }
        if (v19 == (const void *)v20)
        {
          if ((v35 & 0x80u) == 0) {
            p_p = (unsigned __int8 *)&__p;
          }
          else {
            p_p = (unsigned __int8 *)__p;
          }
          if ((v18 & 0x80) != 0)
          {
            if (!memcmp(*v17, p_p, (size_t)v17[1]))
            {
LABEL_45:
              char v30 = 0;
              int v31 = 3;
              if (v21 < 0) {
                goto LABEL_49;
              }
              goto LABEL_50;
            }
          }
          else
          {
            if (!*((unsigned char *)v17 + 23)) {
              goto LABEL_45;
            }
            while (*(unsigned __int8 *)v17 == *p_p)
            {
              BOOL v17 = (const void **)((char *)v17 + 1);
              ++p_p;
              if (!--v18) {
                goto LABEL_45;
              }
            }
          }
        }
      }
      size_t v23 = *(const void ***)(a1 + 7936);
      uint64_t v36 = *(void *)(a1 + 7944);
      long long v37 = v23;
      unint64_t v24 = sub_3D8148(&v37, &v36, (const void **)&__p);
      unint64_t v25 = v35;
      int v26 = (char)v35;
      if (*(const void ***)(a1 + 7944) != v24)
      {
        uint64_t v27 = *((unsigned __int8 *)v24 + 23);
        if ((v27 & 0x80u) == 0) {
          BOOL v28 = (const void *)*((unsigned __int8 *)v24 + 23);
        }
        else {
          BOOL v28 = v24[1];
        }
        if ((v35 & 0x80u) != 0) {
          unint64_t v25 = v34;
        }
        if (v28 == (const void *)v25)
        {
          if ((v35 & 0x80u) == 0) {
            long long v29 = (unsigned __int8 *)&__p;
          }
          else {
            long long v29 = (unsigned __int8 *)__p;
          }
          if ((v27 & 0x80) != 0)
          {
            if (!memcmp(*v24, v29, (size_t)v24[1]))
            {
LABEL_54:
              int v31 = 0;
              char v30 = 1;
              if ((v26 & 0x80000000) == 0) {
                goto LABEL_50;
              }
LABEL_49:
              operator delete(__p);
              goto LABEL_50;
            }
          }
          else
          {
            if (!*((unsigned char *)v24 + 23)) {
              goto LABEL_54;
            }
            while (*(unsigned __int8 *)v24 == *v29)
            {
              unint64_t v24 = (const void **)((char *)v24 + 1);
              ++v29;
              if (!--v27) {
                goto LABEL_54;
              }
            }
          }
        }
      }
      char v30 = 0;
      int v31 = 1;
      if (v26 < 0) {
        goto LABEL_49;
      }
LABEL_50:
      if ((v30 & 1) == 0 && v31 != 3 && v31) {
        return 0;
      }
    }
  }
  return 1;
}

void sub_3D4D60(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_3D4D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **sub_3D4D90(void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 9) < 0) {
          operator delete(*(v3 - 4));
        }
        v3 -= 4;
      }
      while (v3 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_3D4E04(uint64_t *a1, uint64_t a2, void *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  unint64_t v5 = (std::__shared_weak_count *)a1[1];
  uint64_t v103 = *a1;
  int v104 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_327C18((uint64_t)(a1 + 2), &v103);
  uint64_t v6 = v104;
  if (v104 && !atomic_fetch_add(&v104->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  a1[980] = 850045863;
  a1[992] = 0;
  int v87 = (void **)(a1 + 988);
  a1[994] = 0;
  uint64_t v86 = (void **)(a1 + 992);
  a1[993] = 0;
  *((unsigned char *)a1 + 7960) = 0;
  BOOL v85 = (void **)(a1 + 996);
  a1[996] = 0;
  a1[998] = 0;
  a1[997] = 0;
  *((unsigned char *)a1 + 7992) = 0;
  *((unsigned char *)a1 + 8000) = 0;
  a1[1001] = 0;
  a1[1003] = 0;
  a1[1002] = 0;
  *(_OWORD *)(a1 + 981) = 0u;
  *(_OWORD *)(a1 + 983) = 0u;
  *(_OWORD *)(a1 + 985) = 0u;
  *(_OWORD *)(a1 + 987) = 0u;
  *(_OWORD *)(a1 + 989) = 0u;
  *((unsigned char *)a1 + 7928) = 0;
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "standard_regions");
  uint64_t v7 = (uint64_t *)sub_5C4AC(a3, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __int32 v88 = a3;
  uint64_t v101 = 0;
  unint64_t v102 = 0;
  long long v100 = 0;
  sub_3D5DEC((uint64_t)&v100, (v7[1] - *v7) >> 4);
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  if (*v7 != v9)
  {
    while (1)
    {
      if (*(_DWORD *)(v8 + 8) != 2)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      uint64_t v10 = *(void **)v8;
      char v99 = 7;
      strcpy((char *)v98, "country");
      int v11 = sub_58070(v10, (uint64_t)v98);
      if (v11 && !*((_DWORD *)v11 + 12))
      {
        uint64_t v20 = v11[5];
        if (*(char *)(v20 + 23) < 0)
        {
          sub_4200(__p, *(void **)v20, *(void *)(v20 + 8));
        }
        else
        {
          long long v21 = *(_OWORD *)v20;
          __p[2] = *(void **)(v20 + 16);
          *(_OWORD *)std::string __p = v21;
        }
      }
      else
      {
        __p[0] = 0;
        HIBYTE(__p[2]) = 0;
      }
      if (v99 < 0)
      {
        operator delete(v98[0]);
        uint64_t v14 = (void *)HIBYTE(__p[2]);
        char v13 = HIBYTE(__p[2]);
        if (SHIBYTE(__p[2]) < 0) {
          uint64_t v14 = __p[1];
        }
        if (v14) {
          goto LABEL_24;
        }
LABEL_10:
        if (v13 < 0) {
          goto LABEL_33;
        }
LABEL_11:
        v8 += 16;
        if (v8 == v9) {
          break;
        }
      }
      else
      {
        int v12 = (void *)HIBYTE(__p[2]);
        char v13 = HIBYTE(__p[2]);
        if (SHIBYTE(__p[2]) < 0) {
          int v12 = __p[1];
        }
        if (!v12) {
          goto LABEL_10;
        }
LABEL_24:
        LODWORD(v94) = 0;
        char v99 = 8;
        strcpy((char *)v98, "coverage");
        unint64_t v15 = (unint64_t *)sub_561B0(v10, (uint64_t)v98);
        int v16 = sub_3D5F00((uint64_t)v15, v15);
        int v17 = v16;
        if (v99 < 0)
        {
          operator delete(v98[0]);
          LODWORD(v94) = v17;
          uint64_t v18 = v101;
          if ((unint64_t)v101 >= v102)
          {
LABEL_32:
            uint64_t v101 = (char *)sub_3D69C4(&v100, (uint64_t)__p, &v94);
            if ((HIBYTE(__p[2]) & 0x80) == 0) {
              goto LABEL_11;
            }
            goto LABEL_33;
          }
        }
        else
        {
          LODWORD(v94) = v16;
          uint64_t v18 = v101;
          if ((unint64_t)v101 >= v102) {
            goto LABEL_32;
          }
        }
        if (SHIBYTE(__p[2]) < 0)
        {
          sub_4200(v18, __p[0], (unint64_t)__p[1]);
          *((_DWORD *)v18 + 6) = v94;
          uint64_t v101 = v18 + 32;
          if ((HIBYTE(__p[2]) & 0x80) == 0) {
            goto LABEL_11;
          }
        }
        else
        {
          long long v19 = *(_OWORD *)__p;
          *((void **)v18 + 2) = __p[2];
          *(_OWORD *)uint64_t v18 = v19;
          *((_DWORD *)v18 + 6) = v17;
          uint64_t v101 = v18 + 32;
          if ((HIBYTE(__p[2]) & 0x80) == 0) {
            goto LABEL_11;
          }
        }
LABEL_33:
        operator delete(__p[0]);
        v8 += 16;
        if (v8 == v9) {
          break;
        }
      }
    }
  }
  unint64_t v22 = 126 - 2 * __clz((v101 - v100) >> 5);
  if (v101 == v100) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = v22;
  }
  sub_3D6C94((uint64_t)v100, v101, (uint64_t)__p, v23, 1);
  sub_3D6BB8((unsigned __int8 **)&v100);
  memset(__p, 0, sizeof(__p));
  sub_3D6794((char *)__p, (uint64_t)v100, (uint64_t)v101, (v101 - v100) >> 5);
  char v97 = 0;
  sub_3D7A08((uint64_t)__p);
  char v24 = 1;
  char v97 = 1;
  unint64_t v25 = (void **)*v87;
  if (*v87)
  {
    int v26 = (void **)a1[989];
    uint64_t v27 = *v87;
    if (v26 != v25)
    {
      do
      {
        if (*((char *)v26 - 9) < 0) {
          operator delete(*(v26 - 4));
        }
        v26 -= 4;
      }
      while (v26 != v25);
      uint64_t v27 = *v87;
    }
    a1[989] = (uint64_t)v25;
    operator delete(v27);
    *int v87 = 0;
    a1[989] = 0;
    a1[990] = 0;
    char v24 = v97;
  }
  *((_OWORD *)a1 + 494) = *(_OWORD *)__p;
  a1[990] = (uint64_t)__p[2];
  *((unsigned char *)a1 + 7928) = v24;
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "traffic_countries");
  BOOL v28 = (void *)sub_5C4AC(a3, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  sub_3D6180((uint64_t)v98, v28);
  unint64_t v29 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v98[1] - v98[0]));
  if (v98[1] == v98[0]) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = v29;
  }
  sub_6EA30((uint64_t)v98[0], v98[1], (uint64_t)__p, v30, 1);
  sub_86E88(v98);
  memset(__p, 0, sizeof(__p));
  sub_8A6F8((char *)__p, (uint64_t)v98[0], (uint64_t)v98[1], 0xAAAAAAAAAAAAAAABLL * (v98[1] - v98[0]));
  char v97 = 0;
  sub_3D7B24((uint64_t)__p);
  char v31 = 1;
  char v97 = 1;
  uint64_t v32 = (void **)*v86;
  if (*v86)
  {
    uint64_t v33 = (void **)a1[993];
    unint64_t v34 = *v86;
    if (v33 != v32)
    {
      do
      {
        if (*((char *)v33 - 1) < 0) {
          operator delete(*(v33 - 3));
        }
        v33 -= 3;
      }
      while (v33 != v32);
      unint64_t v34 = *v86;
    }
    a1[993] = (uint64_t)v32;
    operator delete(v34);
    *uint64_t v86 = 0;
    a1[993] = 0;
    a1[994] = 0;
    char v31 = v97;
  }
  *((_OWORD *)a1 + 496) = *(_OWORD *)__p;
  a1[994] = (uint64_t)__p[2];
  *((unsigned char *)a1 + 7960) = v31;
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "fake_countries");
  unsigned __int8 v35 = (void *)sub_5C4AC(a3, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  sub_3D6180((uint64_t)&v94, v35);
  unint64_t v36 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v95 - (unsigned char *)v94) >> 3));
  if (v95 == v94) {
    uint64_t v37 = 0;
  }
  else {
    uint64_t v37 = v36;
  }
  sub_6EA30((uint64_t)v94, v95, (uint64_t)__p, v37, 1);
  sub_86E88((const void ***)&v94);
  memset(__p, 0, sizeof(__p));
  sub_8A6F8((char *)__p, (uint64_t)v94, (uint64_t)v95, 0xAAAAAAAAAAAAAAABLL * (((char *)v95 - (unsigned char *)v94) >> 3));
  char v97 = 0;
  sub_3D7B24((uint64_t)__p);
  char v38 = 1;
  char v97 = 1;
  unsigned __int8 v39 = (void **)*v85;
  if (*v85)
  {
    uint64_t v40 = (void **)a1[997];
    unsigned int v41 = *v85;
    if (v40 != v39)
    {
      do
      {
        if (*((char *)v40 - 1) < 0) {
          operator delete(*(v40 - 3));
        }
        v40 -= 3;
      }
      while (v40 != v39);
      unsigned int v41 = *v85;
    }
    a1[997] = (uint64_t)v39;
    operator delete(v41);
    *BOOL v85 = 0;
    a1[997] = 0;
    a1[998] = 0;
    char v38 = v97;
  }
  *((_OWORD *)a1 + 498) = *(_OWORD *)__p;
  a1[998] = (uint64_t)__p[2];
  *((unsigned char *)a1 + 7992) = v38;
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "border_types");
  unsigned int v42 = (uint64_t *)sub_5C4AC(a3, (uint64_t)__p);
  char v43 = v42;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    uint64_t v45 = *v43;
    uint64_t v44 = v43[1];
    if (*v43 == v44) {
      goto LABEL_149;
    }
    while (1)
    {
LABEL_82:
      if (*(_DWORD *)(v45 + 8) != 3)
      {
        int v82 = __cxa_allocate_exception(8uLL);
        *int v82 = &off_23FDF58;
      }
      long long v46 = *(void **)v45;
      __int16 v47 = (_DWORD *)sub_319D38(*(void **)v45, 2uLL);
      if (v47[2])
      {
        int v81 = __cxa_allocate_exception(8uLL);
        *int v81 = &off_23FDF58;
      }
      unsigned int v48 = *(long long **)v47;
      if (*(char *)(*(void *)v47 + 23) < 0)
      {
        sub_4200(__dst, *(void **)v48, *((void *)v48 + 1));
      }
      else
      {
        long long v49 = *v48;
        unint64_t v93 = *((void *)v48 + 2);
        *(_OWORD *)long long __dst = v49;
      }
      if (SHIBYTE(v93) < 0)
      {
        sub_4200(__p, __dst[0], (unint64_t)__dst[1]);
        if (SHIBYTE(v93) < 0)
        {
          operator delete(__dst[0]);
          LODWORD(v50) = HIBYTE(__p[2]);
          if ((HIBYTE(__p[2]) & 0x80) != 0)
          {
LABEL_89:
            if (__p[1] != (char *)&dword_8 + 3
              || (*(void *)__p[0] == 0x616E65705F776F6CLL
                ? (BOOL v51 = *(void *)((char *)__p[0] + 3) == 0x79746C616E65705FLL)
                : (BOOL v51 = 0),
                  !v51))
            {
              if (__p[1] != &dword_C
                || (*(void *)__p[0] == 0x6E65705F68676968
                  ? (BOOL v52 = *((_DWORD *)__p[0] + 2) == 2037673057)
                  : (BOOL v52 = 0),
                    !v52))
              {
LABEL_176:
                int16x4_t v78 = __cxa_allocate_exception(0x40uLL);
                std::operator+<char>();
                long long v79 = (void *)sub_2F404((uint64_t)v78, (long long *)__dst);
              }
            }
            goto LABEL_109;
          }
        }
        else
        {
          LODWORD(v50) = HIBYTE(__p[2]);
          if ((HIBYTE(__p[2]) & 0x80) != 0) {
            goto LABEL_89;
          }
        }
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)__dst;
        __p[2] = (void *)v93;
        unint64_t v50 = HIBYTE(v93);
        if ((v93 & 0x8000000000000000) != 0) {
          goto LABEL_89;
        }
      }
      if (v50 == 11)
      {
        if (__p[0] != (void *)0x616E65705F776F6CLL || *(void **)((char *)__p + 3) != (void *)0x79746C616E65705FLL) {
          goto LABEL_176;
        }
        goto LABEL_122;
      }
      if (v50 != 12) {
        goto LABEL_176;
      }
      if (__p[0] != (void *)0x6E65705F68676968 || LODWORD(__p[1]) != 2037673057) {
        goto LABEL_176;
      }
LABEL_109:
      if ((v50 & 0x80) != 0)
      {
        if (__p[1] == &dword_C)
        {
          unsigned int v54 = (void **)__p[0];
LABEL_119:
          unint64_t v56 = bswap64((unint64_t)*v54);
          unint64_t v57 = 0x686967685F70656ELL;
          if (v56 == 0x686967685F70656ELL
            && (unint64_t v56 = bswap32(*((_DWORD *)v54 + 2)), v57 = 1634497657, v56 == 1634497657))
          {
            int v58 = 0;
          }
          else if (v56 < v57)
          {
            int v58 = -1;
          }
          else
          {
            int v58 = 1;
          }
          if (v58) {
            char v59 = 2;
          }
          else {
            char v59 = 3;
          }
          goto LABEL_129;
        }
      }
      else if (v50 == 12)
      {
        unsigned int v54 = __p;
        goto LABEL_119;
      }
LABEL_122:
      char v59 = 2;
LABEL_129:
      char v91 = v59;
      unsigned int v60 = (_DWORD *)sub_319D38(v46, 0);
      if (v60[2])
      {
        double v84 = __cxa_allocate_exception(8uLL);
        *double v84 = &off_23FDF58;
      }
      __int32 v61 = *(long long **)v60;
      if (*(char *)(*(void *)v60 + 23) < 0)
      {
        sub_4200(__dst, *(void **)v61, *((void *)v61 + 1));
      }
      else
      {
        long long v62 = *v61;
        unint64_t v93 = *((void *)v61 + 2);
        *(_OWORD *)long long __dst = v62;
      }
      uint64_t v63 = (_DWORD *)sub_319D38(v46, 1uLL);
      if (v63[2])
      {
        uint64_t v83 = __cxa_allocate_exception(8uLL);
        *uint64_t v83 = &off_23FDF58;
      }
      uint64_t v64 = *(long long **)v63;
      if (*(char *)(*(void *)v63 + 23) < 0)
      {
        sub_4200(v89, *(void **)v64, *((void *)v64 + 1));
      }
      else
      {
        long long v65 = *v64;
        uint64_t v90 = *((void *)v64 + 2);
        *(_OWORD *)uint64_t v89 = v65;
      }
      unint64_t v66 = a1[1002];
      if (v66 >= a1[1003])
      {
        uint64_t v67 = sub_3D7C7C(a1 + 1001, (long long *)__dst, (long long *)v89, &v91);
      }
      else
      {
        sub_3D7E88(a1[1002], (long long *)__dst, (long long *)v89, v91);
        uint64_t v67 = v66 + 56;
        a1[1002] = v66 + 56;
      }
      a1[1002] = v67;
      if (SHIBYTE(v90) < 0)
      {
        operator delete(v89[0]);
        if (SHIBYTE(v93) < 0) {
          goto LABEL_80;
        }
LABEL_144:
        if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
          goto LABEL_81;
        }
LABEL_145:
        operator delete(__p[0]);
        v45 += 16;
        if (v45 == v44) {
          goto LABEL_149;
        }
      }
      else
      {
        if ((SHIBYTE(v93) & 0x80000000) == 0) {
          goto LABEL_144;
        }
LABEL_80:
        operator delete(__dst[0]);
        if (SHIBYTE(__p[2]) < 0) {
          goto LABEL_145;
        }
LABEL_81:
        v45 += 16;
        if (v45 == v44) {
          goto LABEL_149;
        }
      }
    }
  }
  uint64_t v45 = *v42;
  uint64_t v44 = v42[1];
  if (*v42 != v44) {
    goto LABEL_82;
  }
LABEL_149:
  __p[0] = operator new(0x38uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9A10;
  strcpy((char *)__p[0], "treat_unknown_regions_as_preflight_tbt_or_nothing");
  *((unsigned char *)a1 + 8000) = sub_29D62C(v88, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int32x2_t v68 = (const void **)v94;
  if (v94)
  {
    int8x8_t v69 = v95;
    int32x2_t v70 = v94;
    if (v95 != v94)
    {
      do
      {
        if (*((char *)v69 - 1) < 0) {
          operator delete((void *)*(v69 - 3));
        }
        v69 -= 3;
      }
      while (v69 != v68);
      int32x2_t v70 = v94;
    }
    unint64_t v95 = v68;
    operator delete(v70);
  }
  int32x2_t v71 = v98[0];
  if (v98[0])
  {
    int32x2_t v72 = v98[1];
    int32x2_t v73 = v98[0];
    if (v98[1] != v98[0])
    {
      do
      {
        if (*((char *)v72 - 1) < 0) {
          operator delete((void *)*(v72 - 3));
        }
        v72 -= 3;
      }
      while (v72 != v71);
      int32x2_t v73 = v98[0];
    }
    v98[1] = v71;
    operator delete(v73);
  }
  int32x2_t v74 = v100;
  if (v100)
  {
    int8x8_t v75 = v101;
    int64x2_t v76 = (unsigned __int8 *)v100;
    if (v101 != v100)
    {
      do
      {
        if (*(v75 - 9) < 0) {
          operator delete(*((void **)v75 - 4));
        }
        v75 -= 32;
      }
      while (v75 != v74);
      int64x2_t v76 = (unsigned __int8 *)v100;
    }
    uint64_t v101 = v74;
    operator delete(v76);
  }
  return a1;
}

void sub_3D5B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, void *a10, void **a11, void **a12, void **a13, uint64_t a14, uint64_t a15, void **a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  sub_1A668(&a30);
  sub_1A668((void **)(v39 - 152));
  sub_3D4D90((void **)(v39 - 128));
  sub_2DE3B8(a16);
  sub_1A668(a11);
  sub_1A668(a12);
  sub_3D4D90(a13);
  std::mutex::~mutex(a9);
  sub_32834C(a10);
  sub_14A84(v38);
  _Unwind_Resume(a1);
}

void sub_3D5DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    JUMPOUT(0x3D5D5CLL);
  }
  JUMPOUT(0x3D5D78);
}

void sub_3D5DEC(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void ***)a1;
  if (a2 <= (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5) {
    return;
  }
  if (a2 >> 59) {
    sub_2E00();
  }
  unint64_t v4 = *(void ***)(a1 + 8);
  uint64_t v5 = 32 * a2;
  uint64_t v6 = (char *)operator new(32 * a2);
  uint64_t v7 = &v6[v5];
  uint64_t v8 = &v6[(char *)v4 - (char *)v2];
  if (v4 == v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_13;
  }
  uint64_t v9 = &v6[(char *)v4 - (char *)v2];
  do
  {
    long long v10 = *((_OWORD *)v4 - 2);
    *((void *)v9 - 2) = *(v4 - 2);
    *((_OWORD *)v9 - 2) = v10;
    *(v4 - 3) = 0;
    *(v4 - 2) = 0;
    *(v4 - 4) = 0;
    *((_DWORD *)v9 - 2) = *((_DWORD *)v4 - 2);
    v9 -= 32;
    v4 -= 4;
  }
  while (v4 != v2);
  int v11 = *(void ***)a1;
  uint64_t v2 = *(void ***)(a1 + 8);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  if (v2 != v11)
  {
    do
    {
      if (*((char *)v2 - 9) < 0) {
        operator delete(*(v2 - 4));
      }
      v2 -= 4;
    }
    while (v2 != v11);
    uint64_t v2 = v11;
  }
  if (v2)
  {
LABEL_13:
    operator delete(v2);
  }
}

uint64_t sub_3D5F00(uint64_t a1, unint64_t *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    unint64_t v5 = a2[1];
    if (v5 == 3 && (*(_WORD *)*a2 == 25204 ? (BOOL v6 = *(unsigned char *)(*a2 + 2) == 116) : (BOOL v6 = 0), v6))
    {
      return 2;
    }
    else
    {
      if (v5 == 10)
      {
        if (*(void *)*a2 == 0x6F69746365726964 && *(_WORD *)(*a2 + 8) == 29550) {
          return 1;
        }
        unint64_t v5 = a2[1];
      }
      if (v5 == 13)
      {
        if (*(void *)*a2 == 0x6867696C66657270 && *(void *)(*a2 + 5) == 0x7462745F74686769) {
          return 3;
        }
        unint64_t v5 = a2[1];
      }
      if (v5 == 24)
      {
        a2 = (unint64_t *)*a2;
LABEL_29:
        unint64_t v9 = 0x707265666C696768;
        unint64_t v10 = bswap64(*a2);
        if (v10 == 0x707265666C696768
          && (unint64_t v9 = 0x745F7462745F6F72, v10 = bswap64(a2[1]), v10 == 0x745F7462745F6F72)
          && (unint64_t v9 = 0x5F6E6F7468696E67, v10 = bswap64(a2[2]), v10 == 0x5F6E6F7468696E67))
        {
          int v11 = 0;
        }
        else if (v10 < v9)
        {
          int v11 = -1;
        }
        else
        {
          int v11 = 1;
        }
        return 4 * (v11 == 0);
      }
      else
      {
        return 0;
      }
    }
  }
  else
  {
    uint64_t result = 0;
    switch(*((unsigned char *)a2 + 23))
    {
      case 3:
        BOOL v4 = *(_WORD *)a2 == 25204 && *((unsigned char *)a2 + 2) == 116;
        uint64_t result = (2 * v4);
        break;
      case 0xA:
        uint64_t result = *a2 == 0x6F69746365726964 && *((_WORD *)a2 + 4) == 29550;
        break;
      case 0xD:
        if (*a2 ^ 0x6867696C66657270 | *(unint64_t *)((char *)a2 + 5) ^ 0x7462745F74686769) {
          uint64_t result = 0;
        }
        else {
          uint64_t result = 3;
        }
        break;
      case 0x18:
        goto LABEL_29;
      default:
        return result;
    }
  }
  return result;
}

void sub_3D6180(uint64_t a1, void *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_23708(a1, (uint64_t)(a2[1] - *a2) >> 4);
  BOOL v4 = (_DWORD *)*a2;
  unint64_t v5 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v5)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    do
    {
      if (v4[2])
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      uint64_t v7 = *(long long **)v4;
      if (*(char *)(*(void *)v4 + 23) < 0)
      {
        sub_4200(__p, *(void **)v7, *((void *)v7 + 1));
      }
      else
      {
        long long v8 = *v7;
        uint64_t v12 = *((void *)v7 + 2);
        *(_OWORD *)std::string __p = v8;
      }
      uint64_t v9 = sub_8B3D0((void ***)a1, v6, (__n128 *)__p);
      if (SHIBYTE(v12) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v6 = v9 + 24;
      v4 += 4;
    }
    while (v4 != v5);
  }
}

void sub_3D6290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  int v16 = (void **)*v14;
  if (!*v14) {
    _Unwind_Resume(exception_object);
  }
  int v17 = (void **)v14[1];
  uint64_t v18 = *v14;
  if (v17 != v16)
  {
    do
    {
      if (*((char *)v17 - 1) < 0) {
        operator delete(*(v17 - 3));
      }
      v17 -= 3;
    }
    while (v17 != v16);
    uint64_t v18 = *v14;
  }
  v14[1] = v16;
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_3D6320(uint64_t a1, char **a2, int a3)
{
  if (sub_EA80FC(a2)) {
    return 2;
  }
  uint64_t v8 = sub_EA8438((uint64_t *)a2);
  unint64_t v13 = *(unsigned int *)(v8 + 32) | ((unint64_t)*(unsigned __int16 *)(v8 + 36) << 32);
  uint64_t v6 = sub_3D3604(a1, &v13, a3);
  uint64_t v9 = nullsub_1(a2);
  unint64_t v10 = *(void **)v9;
  int v11 = *(void **)(v9 + 8);
  if (*(void **)v9 != v11)
  {
    do
    {
      int v12 = sub_3D4370(a1, v10, a3);
      if (v12 >= (int)v6) {
        uint64_t v6 = v6;
      }
      else {
        uint64_t v6 = v12;
      }
      v10 += 59;
    }
    while (v10 != v11);
  }
  return v6;
}

int *sub_3D63DC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v5 = (int *)sub_2D5D58(a1, a2);
  uint64_t v6 = (unsigned __int16 *)((char *)v5 - *v5);
  if (*v6 >= 0xDu && (uint64_t v7 = v6[6]) != 0) {
    uint64_t v8 = 4 * *(unsigned __int16 *)((char *)v5 + v7);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t result = (int *)sub_290DEC(a1 + 3896, 1u, 0);
  unint64_t v10 = (unsigned __int16 *)((char *)result - *result);
  if (*v10 < 0xBu)
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = v10[5];
    if (v11) {
      v11 += (uint64_t)result + *(unsigned int *)((char *)result + v11);
    }
  }
  int v12 = (int *)(v11 + v8 + 4 + *(unsigned int *)(v11 + v8 + 4));
  unint64_t v13 = (unsigned __int16 *)((char *)v12 - *v12);
  if (*v13 >= 5u && (uint64_t v14 = v13[2]) != 0)
  {
    unint64_t v15 = (unsigned int *)((char *)v12 + v14);
    uint64_t v16 = *v15;
    uint64_t v18 = (char *)v15 + v16 + 4;
    size_t v17 = *(unsigned int *)((char *)v15 + v16);
    if (v17 >= 0x17)
    {
      if ((v17 | 7) == 0x17) {
        uint64_t v19 = (v17 & 0xFFFFFFF8) + 8;
      }
      else {
        uint64_t v19 = v17 | 7;
      }
      uint64_t v20 = operator new(v19 + 1);
      *((void *)a3 + 1) = v17;
      *((void *)a3 + 2) = v19 - 0x7FFFFFFFFFFFFFFFLL;
      *(void *)a3 = v20;
      a3 = v20;
    }
    else
    {
      a3[23] = v17;
      if (!v17)
      {
        a3[v17] = 0;
        return result;
      }
    }
    uint64_t result = (int *)memcpy(a3, v18, v17);
    a3[v17] = 0;
  }
  else
  {
    a3[23] = 0;
    *a3 = 0;
  }
  return result;
}

void sub_3D6530(uint64_t a1@<X0>, unsigned __int16 a2@<W1>, unsigned char *a3@<X8>)
{
  uint64_t v6 = (std::mutex *)(a1 + 7840);
  std::mutex::lock((std::mutex *)(a1 + 7840));
  uint64_t v7 = sub_290DEC(a1 + 3912, 1u, 0);
  uint64_t v8 = &v7[-*(int *)v7];
  if (*(unsigned __int16 *)v8 < 0xBu)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = *((unsigned __int16 *)v8 + 5);
    if (v9) {
      v9 += (uint64_t)&v7[*(unsigned int *)&v7[v9]];
    }
  }
  unint64_t v10 = (int *)(v9 + 4 * a2 + 4 + *(unsigned int *)(v9 + 4 * a2 + 4));
  uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v11 < 5u || (uint64_t v12 = v11[2]) == 0)
  {
    a3[23] = 0;
    *a3 = 0;
    goto LABEL_16;
  }
  unint64_t v13 = (unsigned int *)((char *)v10 + v12);
  uint64_t v14 = *v13;
  uint64_t v16 = (char *)v13 + v14 + 4;
  size_t v15 = *(unsigned int *)((char *)v13 + v14);
  if (v15 >= 0x17)
  {
    uint64_t v17 = (v15 & 0xFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v17 = v15 | 7;
    }
    uint64_t v18 = v17 + 1;
    uint64_t v19 = operator new(v17 + 1);
    *((void *)a3 + 1) = v15;
    *((void *)a3 + 2) = v18 | 0x8000000000000000;
    *(void *)a3 = v19;
    a3 = v19;
  }
  else
  {
    a3[23] = v15;
    if (!v15) {
      goto LABEL_15;
    }
  }
  memcpy(a3, v16, v15);
LABEL_15:
  a3[v15] = 0;
LABEL_16:

  std::mutex::unlock(v6);
}

void sub_3D666C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_3D6680(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = (unsigned char *)*((void *)a2 + 2);
  unint64_t v5 = (unsigned char *)*((void *)a2 + 3);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 32) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 24) = v9;
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v11 = (unsigned char *)*((void *)a2 + 5);
  unint64_t v10 = (unsigned char *)*((void *)a2 + 6);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      sub_2E00();
    }
    unint64_t v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v13;
    uint64_t v14 = &v13[8 * (v12 >> 3)];
    *(void *)(a1 + 56) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 48) = v14;
  }
  return a1;
}

void sub_3D6760(_Unwind_Exception *exception_object)
{
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

char *sub_3D6794(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v5 = result;
    if (a4 >> 59) {
      sub_2E00();
    }
    uint64_t result = (char *)operator new(32 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = &result[32 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = &v8[v9];
        uint64_t v10 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          uint64_t result = (char *)sub_4200(result, *(void **)v10, *(void *)(v10 + 8));
        }
        else
        {
          *(_OWORD *)uint64_t result = *(_OWORD *)v10;
          *((void *)result + 2) = *(void *)(v10 + 16);
        }
        *(_DWORD *)&v8[v9 + 24] = *(_DWORD *)(a2 + v9 + 24);
        v9 += 32;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_3D6874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_3D6888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 32)
  {
    if (*(char *)(v10 + v11 - 9) < 0) {
      operator delete(*(void **)(v10 + v11 - 32));
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_3D68C4(&a9);
  _Unwind_Resume(a1);
}

void ***sub_3D68C4(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (void **)**result;
    if (v3)
    {
      long long v4 = (void **)v2[1];
      unint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 9) < 0) {
            operator delete(*(v4 - 4));
          }
          v4 -= 4;
        }
        while (v4 != v3);
        unint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_3D695C(uint64_t a1)
{
  uint64_t v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      unint64_t v5 = v2 - 4;
      *(void *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v5);
        unint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_3D69C4(char **a1, uint64_t a2, _DWORD *a3)
{
  long long v4 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v6 = (v5 - *a1) >> 5;
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v7) {
    unint64_t v7 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v7;
  }
  if (v11)
  {
    if (v11 >> 59) {
      sub_188D718();
    }
    int64_t v12 = operator new(32 * v11);
    uint64_t v13 = (uint64_t)&v12[8 * v6];
    uint64_t v19 = v13;
    uint64_t v20 = v13;
    long long v21 = (char *)&v12[8 * v11];
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_10:
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a2;
      *(void *)(v13 + 16) = *(void *)(a2 + 16);
      v12[8 * v6 + 6] = *a3;
      uint64_t v14 = v13 + 32;
      if (v5 == v4) {
        goto LABEL_16;
      }
      goto LABEL_14;
    }
  }
  else
  {
    int64_t v12 = 0;
    uint64_t v13 = 32 * v6;
    uint64_t v19 = 32 * v6;
    uint64_t v20 = 32 * v6;
    long long v21 = 0;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
      goto LABEL_10;
    }
  }
  sub_4200((unsigned char *)v13, *(void **)a2, *(void *)(a2 + 8));
  long long v4 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v13 = v19;
  v12[8 * v6 + 6] = *a3;
  uint64_t v14 = v20 + 32;
  if (v5 == v4)
  {
LABEL_16:
    uint64_t v16 = v4;
    goto LABEL_17;
  }
  do
  {
LABEL_14:
    long long v15 = *((_OWORD *)v5 - 2);
    *(void *)(v13 - 16) = *((void *)v5 - 2);
    *(_OWORD *)(v13 - 32) = v15;
    *((void *)v5 - 3) = 0;
    *((void *)v5 - 2) = 0;
    *((void *)v5 - 4) = 0;
    *(_DWORD *)(v13 - 8) = *((_DWORD *)v5 - 2);
    v13 -= 32;
    v5 -= 32;
  }
  while (v5 != v4);
  uint64_t v16 = *a1;
  long long v4 = a1[1];
LABEL_17:
  *a1 = (char *)v13;
  a1[1] = (char *)v14;
  a1[2] = v21;
  if (v4 != v16)
  {
    uint64_t v17 = (void **)(v4 - 32);
    do
    {
      if (*((char *)v17 + 23) < 0) {
        operator delete(*v17);
      }
      v17 -= 4;
    }
    while (v17 + 4 != (void **)v16);
    long long v4 = v16;
  }
  if (v4) {
    operator delete(v4);
  }
  return v14;
}

void sub_3D6BA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3D695C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_3D6BB8(unsigned __int8 **a1)
{
  uint64_t v2 = sub_3D77DC(*a1, a1[1]);
  uint64_t v3 = (void **)a1[1];
  if (v3 != v2)
  {
    long long v4 = (unsigned __int8 *)v2;
    while (v3 != (void **)v4)
    {
      if (*((char *)v3 - 9) < 0) {
        operator delete(*(v3 - 4));
      }
      v3 -= 4;
    }
    a1[1] = v4;
  }
}

void sub_3D6C94(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, char a5)
{
BOOL sub_3D7208(uint64_t a1, const void **a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = ((uint64_t)a2 - a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v7 = a2 - 4;
      int v8 = *(char *)(a1 + 23);
      int v9 = *((char *)a2 - 9);
      if (v9 >= 0) {
        size_t v10 = *((unsigned __int8 *)a2 - 9);
      }
      else {
        size_t v10 = (size_t)*(a2 - 3);
      }
      if (v9 >= 0) {
        unint64_t v11 = a2 - 4;
      }
      else {
        unint64_t v11 = (const void **)*(a2 - 4);
      }
      if (v8 >= 0) {
        size_t v12 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        size_t v12 = *(void *)(a1 + 8);
      }
      if (v8 >= 0) {
        uint64_t v13 = (const void *)a1;
      }
      else {
        uint64_t v13 = *(const void **)a1;
      }
      if (v12 >= v10) {
        size_t v14 = v10;
      }
      else {
        size_t v14 = v12;
      }
      int v15 = memcmp(v11, v13, v14);
      BOOL v16 = v10 < v12;
      if (v15) {
        BOOL v16 = v15 < 0;
      }
      if (v16) {
        goto LABEL_24;
      }
      int v17 = memcmp(v13, v11, v14);
      BOOL v18 = v12 < v10;
      if (v17) {
        BOOL v18 = v17 < 0;
      }
      if (!v18 && *((_DWORD *)a2 - 2) < *(_DWORD *)(a1 + 24))
      {
LABEL_24:
        long long v19 = *(const void **)(a1 + 16);
        long long v20 = *(_OWORD *)a1;
        int v21 = v7[2];
        *(_OWORD *)a1 = *(_OWORD *)v7;
        *(void *)(a1 + 16) = v21;
        *(_OWORD *)unint64_t v7 = v20;
        v7[2] = v19;
        LODWORD(v19) = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 - 2);
        *((_DWORD *)a2 - 2) = v19;
      }
      return 1;
    case 3:
      sub_AA798((const void **)a1, (const void **)(a1 + 32), a2 - 4);
      return 1;
    case 4:
      sub_AB920((long long *)a1, (long long *)(a1 + 32), (long long *)(a1 + 64), a2 - 4);
      return 1;
    case 5:
      sub_ABBDC(a1, a1 + 32, a1 + 64, (long long *)(a1 + 96), a2 - 4);
      return 1;
    default:
      uint64_t v22 = a1 + 64;
      sub_AA798((const void **)a1, (const void **)(a1 + 32), (const void **)(a1 + 64));
      size_t v23 = (const void **)(a1 + 96);
      if ((const void **)(a1 + 96) == v2) {
        return 1;
      }
      uint64_t v55 = 0;
      int v24 = 0;
      unsigned int v53 = v2;
      break;
  }
  while (2)
  {
    int v26 = *(char *)(v22 + 23);
    int v27 = *((char *)v23 + 23);
    if (v27 >= 0) {
      size_t v28 = *((unsigned __int8 *)v23 + 23);
    }
    else {
      size_t v28 = (size_t)v23[1];
    }
    if (v27 >= 0) {
      BOOL v29 = v23;
    }
    else {
      BOOL v29 = *v23;
    }
    if (v26 >= 0) {
      size_t v30 = *(unsigned __int8 *)(v22 + 23);
    }
    else {
      size_t v30 = *(void *)(v22 + 8);
    }
    if (v26 >= 0) {
      BOOL v31 = (const void *)v22;
    }
    else {
      BOOL v31 = *(const void **)v22;
    }
    if (v30 >= v28) {
      size_t v32 = v28;
    }
    else {
      size_t v32 = v30;
    }
    int v33 = memcmp(v29, v31, v32);
    BOOL v34 = v28 < v30;
    if (v33) {
      BOOL v34 = v33 < 0;
    }
    if (v34)
    {
      int v35 = *((_DWORD *)v23 + 6);
    }
    else
    {
      int v36 = memcmp(v31, v29, v32);
      BOOL v37 = v30 < v28;
      if (v36) {
        BOOL v37 = v36 < 0;
      }
      if (v37) {
        goto LABEL_28;
      }
      int v35 = *((_DWORD *)v23 + 6);
      if (v35 >= *(_DWORD *)(v22 + 24)) {
        goto LABEL_28;
      }
    }
    int v54 = v24;
    char v38 = 0;
    long long v56 = *(_OWORD *)v23;
    uint64_t v57 = v23[2];
    v23[1] = 0;
    v23[2] = 0;
    unsigned int *v23 = 0;
    int v58 = v35;
    for (uint64_t i = v55; ; i -= 32)
    {
      uint64_t v40 = a1 + i;
      unsigned int v41 = (void **)(a1 + i + 96);
      if (v38 < 0) {
        operator delete(*v41);
      }
      *(_OWORD *)unsigned int v41 = *(_OWORD *)(v40 + 64);
      *(void *)(a1 + i + 112) = *(void *)(v40 + 80);
      *(unsigned char *)(v40 + 87) = 0;
      *(unsigned char *)(v40 + 64) = 0;
      *(_DWORD *)(v40 + 120) = *(_DWORD *)(v40 + 88);
      if (i == -64)
      {
        uint64_t v22 = a1;
LABEL_81:
        uint64_t v2 = v53;
        int v52 = v54;
        if ((*(char *)(v22 + 23) & 0x80000000) == 0) {
          goto LABEL_27;
        }
LABEL_82:
        operator delete(*(void **)v22);
        goto LABEL_27;
      }
      int v42 = *(char *)(a1 + i + 55);
      if (SHIBYTE(v57) >= 0) {
        size_t v43 = HIBYTE(v57);
      }
      else {
        size_t v43 = *((void *)&v56 + 1);
      }
      if (SHIBYTE(v57) >= 0) {
        BOOL v44 = &v56;
      }
      else {
        BOOL v44 = (long long *)v56;
      }
      if (v42 >= 0) {
        size_t v45 = *(unsigned __int8 *)(a1 + i + 55);
      }
      else {
        size_t v45 = *(void *)(a1 + i + 40);
      }
      if (v42 >= 0) {
        BOOL v46 = (const void *)(a1 + i + 32);
      }
      else {
        BOOL v46 = *(const void **)(a1 + i + 32);
      }
      if (v45 >= v43) {
        size_t v47 = v43;
      }
      else {
        size_t v47 = v45;
      }
      int v48 = memcmp(v44, v46, v47);
      BOOL v49 = v43 < v45;
      if (v48) {
        BOOL v49 = v48 < 0;
      }
      if (!v49) {
        break;
      }
LABEL_53:
      v22 -= 32;
      char v38 = *(unsigned char *)(v40 + 87);
    }
    int v50 = memcmp(v46, v44, v47);
    BOOL v51 = v45 < v43;
    if (v50) {
      BOOL v51 = v50 < 0;
    }
    if (!v51)
    {
      if (v58 >= *(_DWORD *)(a1 + i + 56)) {
        goto LABEL_81;
      }
      goto LABEL_53;
    }
    uint64_t v22 = a1 + i + 64;
    uint64_t v2 = v53;
    int v52 = v54;
    if (*(char *)(a1 + i + 87) < 0) {
      goto LABEL_82;
    }
LABEL_27:
    long long v25 = v56;
    *(void *)(v22 + 16) = v57;
    *(_OWORD *)uint64_t v22 = v25;
    HIBYTE(v57) = 0;
    LOBYTE(v56) = 0;
    *(_DWORD *)(v22 + 24) = v58;
    int v24 = v52 + 1;
    if (v24 == 8) {
      return v23 + 4 == v2;
    }
LABEL_28:
    uint64_t v22 = (uint64_t)v23;
    v55 += 32;
    v23 += 4;
    if (v23 != v2) {
      continue;
    }
    return 1;
  }
}

void sub_3D765C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v7 = *(void *)a1;
    *(void *)BOOL v16 = *(void *)(a1 + 8);
    *(void *)&v16[7] = *(void *)(a1 + 15);
    char v8 = *(unsigned char *)(a1 + 23);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    int v9 = *(_DWORD *)(a1 + 24);
    size_t v10 = sub_AC4CC((long long *)a1, a3, a4);
    unint64_t v11 = v10;
    size_t v12 = (void **)(a2 - 32);
    int v13 = *((char *)v10 + 23);
    if (v10 == (long long *)(a2 - 32))
    {
      if (v13 < 0) {
        operator delete(*(void **)v10);
      }
      *(void *)unint64_t v11 = v7;
      *((void *)v11 + 1) = *(void *)v16;
      *(void *)((char *)v11 + 15) = *(void *)&v16[7];
      *((unsigned char *)v11 + 23) = v8;
      *((_DWORD *)v11 + 6) = v9;
    }
    else
    {
      if (v13 < 0) {
        operator delete(*(void **)v10);
      }
      long long v14 = *(_OWORD *)v12;
      *((void *)v11 + 2) = *(void *)(a2 - 16);
      *unint64_t v11 = v14;
      *(unsigned char *)(a2 - 9) = 0;
      *(unsigned char *)(a2 - 32) = 0;
      *((_DWORD *)v11 + 6) = *(_DWORD *)(a2 - 8);
      uint64_t v15 = (uint64_t)(v11 + 2);
      if (*(char *)(a2 - 9) < 0) {
        operator delete(*v12);
      }
      *(void *)(a2 - 32) = v7;
      *(void *)(a2 - 24) = *(void *)v16;
      *(void *)(a2 - 17) = *(void *)&v16[7];
      *(unsigned char *)(a2 - 9) = v8;
      *(_DWORD *)(a2 - 8) = v9;
      sub_AC658(a1, v15, a3, (v15 - a1) >> 5);
    }
  }
}

void sub_3D77C4(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void **sub_3D77DC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 == a2) {
    return (void **)a2;
  }
  uint64_t v3 = a1;
  uint64_t v4 = a1 + 32;
  if (a1 + 32 == a2) {
    return (void **)a2;
  }
  while (1)
  {
    uint64_t v6 = v3[23];
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = v3[23];
    }
    else {
      uint64_t v7 = *((void *)v3 + 1);
    }
    uint64_t v8 = v3[55];
    int v9 = (char)v8;
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = *((void *)v3 + 5);
    }
    if (v7 != v8) {
      goto LABEL_6;
    }
    size_t v10 = v9 >= 0 ? v4 : *(unsigned __int8 **)v4;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v3, v10, *((void *)v3 + 1))) {
        goto LABEL_6;
      }
    }
    else if (v3[23])
    {
      uint64_t v11 = 0;
      while (v3[v11] == v10[v11])
      {
        if (v6 == ++v11) {
          goto LABEL_5;
        }
      }
      goto LABEL_6;
    }
LABEL_5:
    if (*((_DWORD *)v3 + 6) == *((_DWORD *)v3 + 14)) {
      break;
    }
LABEL_6:
    v4 += 32;
    v3 += 32;
    if (v4 == a2) {
      return (void **)a2;
    }
  }
  if (v3 == a2) {
    return (void **)v3;
  }
  size_t v12 = v3 + 64;
  if (v3 + 64 != a2)
  {
    int v13 = v3 + 32;
    while (1)
    {
      BOOL v16 = v12;
      uint64_t v17 = v3[23];
      if ((v17 & 0x80u) == 0) {
        uint64_t v18 = v3[23];
      }
      else {
        uint64_t v18 = *((void *)v3 + 1);
      }
      uint64_t v19 = v13[55];
      int v20 = (char)v19;
      if ((v19 & 0x80u) != 0) {
        uint64_t v19 = *((void *)v13 + 5);
      }
      if (v18 != v19) {
        goto LABEL_27;
      }
      if (v20 >= 0) {
        int v21 = v16;
      }
      else {
        int v21 = *(unsigned __int8 **)v16;
      }
      if ((v17 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v3, v21, *((void *)v3 + 1))) {
          goto LABEL_45;
        }
LABEL_27:
        long long v14 = (void **)(v3 + 32);
        if ((char)v3[55] < 0) {
          operator delete(*v14);
        }
        long long v15 = *(_OWORD *)v16;
        *((void *)v3 + 6) = *((void *)v16 + 2);
        *(_OWORD *)long long v14 = v15;
        v13[55] = 0;
        unsigned __int8 *v16 = 0;
        *((_DWORD *)v3 + 14) = *((_DWORD *)v13 + 14);
        v3 += 32;
        size_t v12 = v16 + 32;
        int v13 = v16;
        if (v16 + 32 == a2) {
          return v14 + 4;
        }
      }
      else
      {
        uint64_t v22 = v3;
        if (v3[23])
        {
          while (*v22 == *v21)
          {
            ++v22;
            ++v21;
            if (!--v17) {
              goto LABEL_45;
            }
          }
          goto LABEL_27;
        }
LABEL_45:
        if (*((_DWORD *)v3 + 6) != *((_DWORD *)v13 + 14)) {
          goto LABEL_27;
        }
        long long v14 = (void **)v3;
        size_t v12 = v16 + 32;
        int v13 = v16;
        if (v16 + 32 == a2) {
          return v14 + 4;
        }
      }
    }
  }
  long long v14 = (void **)v3;
  return v14 + 4;
}

void sub_3D7A08(uint64_t a1)
{
  int v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)a1;
  uint64_t v4 = *(void *)(a1 + 16) - *(void *)a1;
  int64_t v5 = (int64_t)v2 - *(void *)a1;
  uint64_t v6 = v5 >> 5;
  if (v5 >> 5 >= (unint64_t)(v4 >> 5)) {
    return;
  }
  if (v2 == v3)
  {
    *(void *)a1 = 32 * v6;
    *(void *)(a1 + 8) = 32 * v6;
    *(void *)(a1 + 16) = 32 * v6;
    if (!v3) {
      return;
    }
    goto LABEL_15;
  }
  if (v5 < 0) {
    sub_188D718();
  }
  uint64_t v7 = (char *)operator new(v5) + 32 * v6;
  uint64_t v8 = v7;
  do
  {
    long long v9 = *((_OWORD *)v2 - 2);
    *((void *)v8 - 2) = *(v2 - 2);
    *((_OWORD *)v8 - 2) = v9;
    *(v2 - 3) = 0;
    *(v2 - 2) = 0;
    *(v2 - 4) = 0;
    *((_DWORD *)v8 - 2) = *((_DWORD *)v2 - 2);
    v8 -= 32;
    v2 -= 4;
  }
  while (v2 != v3);
  size_t v10 = *(void ***)a1;
  uint64_t v3 = *(void ***)(a1 + 8);
  *(void *)a1 = v8;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v7;
  if (v3 != v10)
  {
    do
    {
      if (*((char *)v3 - 9) < 0) {
        operator delete(*(v3 - 4));
      }
      v3 -= 4;
    }
    while (v3 != v10);
    uint64_t v3 = v10;
  }
  if (v3)
  {
LABEL_15:
    operator delete(v3);
  }
}

void sub_3D7B24(uint64_t a1)
{
  uint64_t v1 = *(void ***)a1;
  int64x2_t v2 = *(int64x2_t *)(a1 + 8);
  int64x2_t v3 = vsubq_s64(v2, vdupq_n_s64(*(void *)a1));
  int64x2_t v4 = vshrq_n_s64(v3, 3uLL);
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * v4.i64[0];
  if (0xAAAAAAAAAAAAAAABLL * v4.i64[1] <= v5) {
    return;
  }
  uint64_t v7 = *(void ***)(a1 + 8);
  if ((void **)v2.i64[0] == v1)
  {
    *(void *)a1 = 24 * v5;
    *(void *)(a1 + 8) = 24 * v5;
    *(void *)(a1 + 16) = 24 * v5;
    if (!v1) {
      return;
    }
    goto LABEL_15;
  }
  if (v5 >= 0xAAAAAAAAAAAAAABLL) {
    sub_188D718();
  }
  uint64_t v8 = (char *)operator new(v3.u64[0]) + 24 * v5;
  long long v9 = v8;
  do
  {
    long long v10 = *(_OWORD *)(v7 - 3);
    *((void *)v9 - 1) = *(v7 - 1);
    *(_OWORD *)(v9 - 24) = v10;
    v9 -= 24;
    *(v7 - 2) = 0;
    *(v7 - 1) = 0;
    *(v7 - 3) = 0;
    v7 -= 3;
  }
  while (v7 != v1);
  unint64_t v11 = *(void *)a1;
  uint64_t v1 = *(void ***)(a1 + 8);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v8;
  if (v1 != (void **)v11)
  {
    do
    {
      if (*((char *)v1 - 1) < 0) {
        operator delete(*(v1 - 3));
      }
      v1 -= 3;
    }
    while (v1 != (void **)v11);
    uint64_t v1 = (void **)v11;
  }
  if (v1)
  {
LABEL_15:
    operator delete(v1);
  }
}

uint64_t sub_3D7C7C(uint64_t *a1, long long *a2, long long *a3, char *a4)
{
  uint64_t v5 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x492492492492492) {
    sub_2E00();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v6) {
    unint64_t v6 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249) {
    unint64_t v10 = 0x492492492492492;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x492492492492492) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(56 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[56 * v5];
  int v21 = &v11[56 * v10];
  sub_3D7E88(v20, a2, a3, *a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 56;
  long long v14 = (char *)*a1;
  long long v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    goto LABEL_23;
  }
  do
  {
    long long v16 = *(_OWORD *)(v15 - 56);
    *(void *)(v12 - 40) = *((void *)v15 - 5);
    *(_OWORD *)(v12 - 56) = v16;
    *((void *)v15 - 6) = 0;
    *((void *)v15 - 5) = 0;
    *((void *)v15 - 7) = 0;
    long long v17 = *((_OWORD *)v15 - 2);
    *(void *)(v12 - 16) = *((void *)v15 - 2);
    *(_OWORD *)(v12 - 32) = v17;
    *((void *)v15 - 3) = 0;
    *((void *)v15 - 2) = 0;
    *((void *)v15 - 4) = 0;
    *(unsigned char *)(v12 - 8) = *(v15 - 8);
    v12 -= 56;
    v15 -= 56;
  }
  while (v15 != v14);
  uint64_t v18 = (char *)*a1;
  long long v15 = (char *)a1[1];
  *a1 = v12;
  a1[1] = v13;
  a1[2] = (uint64_t)v21;
  if (v15 == v18) {
    goto LABEL_23;
  }
  do
  {
    if (*(v15 - 9) < 0)
    {
      operator delete(*((void **)v15 - 4));
      if ((*(v15 - 33) & 0x80000000) == 0) {
        goto LABEL_16;
      }
    }
    else if ((*(v15 - 33) & 0x80000000) == 0)
    {
      goto LABEL_16;
    }
    operator delete(*((void **)v15 - 7));
LABEL_16:
    v15 -= 56;
  }
  while (v15 != v18);
  long long v15 = v18;
LABEL_23:
  if (v15) {
    operator delete(v15);
  }
  return v20 + 56;
}

void sub_3D7E74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2DEC3C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_3D7E88(uint64_t a1, long long *a2, long long *a3, char a4)
{
  int v8 = *((char *)a3 + 23);
  long long v9 = *(void **)a3;
  int v10 = *((char *)a2 + 23);
  unint64_t v11 = *(void **)a2;
  if (v10 >= 0) {
    size_t v12 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v12 = *((void *)a2 + 1);
  }
  if (v10 >= 0) {
    uint64_t v13 = a2;
  }
  else {
    uint64_t v13 = *(const void **)a2;
  }
  if (v8 >= 0) {
    size_t v14 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v14 = *((void *)a3 + 1);
  }
  if (v8 >= 0) {
    long long v15 = a3;
  }
  else {
    long long v15 = *(const void **)a3;
  }
  if (v14 >= v12) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v14;
  }
  int v17 = memcmp(v13, v15, v16);
  BOOL v18 = v17 < 0;
  if (!v17) {
    BOOL v18 = v12 < v14;
  }
  if (v18) {
    uint64_t v19 = a2;
  }
  else {
    uint64_t v19 = a3;
  }
  if (*((char *)v19 + 23) < 0)
  {
    if (v18) {
      int v21 = v11;
    }
    else {
      int v21 = v9;
    }
    sub_4200((unsigned char *)a1, v21, *((void *)v19 + 1));
  }
  else
  {
    long long v20 = *v19;
    *(void *)(a1 + 16) = *((void *)v19 + 2);
    *(_OWORD *)a1 = v20;
  }
  int v22 = *((char *)a3 + 23);
  size_t v23 = *(void **)a3;
  int v24 = *((char *)a2 + 23);
  long long v25 = *(void **)a2;
  if (v24 >= 0) {
    size_t v26 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v26 = *((void *)a2 + 1);
  }
  if (v24 >= 0) {
    int v27 = a2;
  }
  else {
    int v27 = *(const void **)a2;
  }
  if (v22 >= 0) {
    size_t v28 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v28 = *((void *)a3 + 1);
  }
  if (v22 >= 0) {
    BOOL v29 = a3;
  }
  else {
    BOOL v29 = *(const void **)a3;
  }
  if (v28 >= v26) {
    size_t v30 = v26;
  }
  else {
    size_t v30 = v28;
  }
  int v31 = memcmp(v27, v29, v30);
  BOOL v32 = v31 < 0;
  if (!v31) {
    BOOL v32 = v26 < v28;
  }
  if (v32) {
    int v33 = a3;
  }
  else {
    int v33 = a2;
  }
  if (*((char *)v33 + 23) < 0)
  {
    if (v32) {
      int v35 = v23;
    }
    else {
      int v35 = v25;
    }
    sub_4200((unsigned char *)(a1 + 24), v35, *((void *)v33 + 1));
  }
  else
  {
    long long v34 = *v33;
    *(void *)(a1 + 40) = *((void *)v33 + 2);
    *(_OWORD *)(a1 + 24) = v34;
  }
  *(unsigned char *)(a1 + 48) = a4;
  return a1;
}

void sub_3D7FF0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

const void **sub_3D800C(const void ***a1, void *a2, const void **a3)
{
  int64x2_t v3 = *a1;
  uint64_t v4 = *a2 - (void)*a1;
  if (v4 >= 32)
  {
    size_t v6 = *((unsigned __int8 *)a3 + 23);
    uint64_t v7 = (const void **)*a3;
    size_t v8 = (size_t)a3[1];
    if (v4 != 32)
    {
      unint64_t v9 = v4 >> 5;
      if ((v6 & 0x80u) == 0) {
        size_t v10 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        size_t v10 = (size_t)a3[1];
      }
      if ((v6 & 0x80u) == 0) {
        unint64_t v11 = a3;
      }
      else {
        unint64_t v11 = *a3;
      }
      do
      {
        unint64_t v12 = (8 * v9) & 0xFFFFFFFFFFFFFFE0;
        _X9 = (char *)v3 + v12;
        __asm { PRFM            #0, [X9] }
        uint64_t v19 = &v3[4 * (v9 >> 1)];
        _X8 = (uint64_t)v19 + v12;
        __asm { PRFM            #0, [X8] }
        int v22 = *((char *)v19 + 23);
        if (v22 >= 0) {
          size_t v23 = *((unsigned __int8 *)v19 + 23);
        }
        else {
          size_t v23 = (size_t)v19[1];
        }
        if (v22 >= 0) {
          int v24 = &v3[4 * (v9 >> 1)];
        }
        else {
          int v24 = (const void **)*v19;
        }
        if (v10 >= v23) {
          size_t v25 = v23;
        }
        else {
          size_t v25 = v10;
        }
        int v26 = memcmp(v24, v11, v25);
        BOOL v27 = v23 < v10;
        if (v26) {
          BOOL v27 = v26 < 0;
        }
        if (v27) {
          unint64_t v28 = v9 >> 1;
        }
        else {
          unint64_t v28 = 0;
        }
        v3 += 4 * v28;
        v9 -= v9 >> 1;
      }
      while ((uint64_t)v9 > 1);
    }
    int v29 = *((char *)v3 + 23);
    if (v29 >= 0) {
      size_t v30 = *((unsigned __int8 *)v3 + 23);
    }
    else {
      size_t v30 = (size_t)v3[1];
    }
    if (v29 >= 0) {
      int v31 = v3;
    }
    else {
      int v31 = *v3;
    }
    if ((v6 & 0x80u) == 0)
    {
      BOOL v32 = a3;
    }
    else
    {
      size_t v6 = v8;
      BOOL v32 = v7;
    }
    if (v6 >= v30) {
      size_t v33 = v30;
    }
    else {
      size_t v33 = v6;
    }
    int v34 = memcmp(v31, v32, v33);
    if (v34) {
      BOOL v35 = v34 < 0;
    }
    else {
      BOOL v35 = v30 < v6;
    }
    v3 += 4 * v35;
  }
  return v3;
}

const void **sub_3D8148(const void ***a1, void *a2, const void **a3)
{
  int64x2_t v3 = *a1;
  uint64_t v4 = *a2 - (void)*a1;
  if (v4 >= 24)
  {
    size_t v6 = *((unsigned __int8 *)a3 + 23);
    size_t v7 = (size_t)a3[1];
    int v36 = (const void **)*a3;
    if (v4 != 24)
    {
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
      if ((v6 & 0x80u) == 0) {
        size_t v9 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        size_t v9 = (size_t)a3[1];
      }
      if ((v6 & 0x80u) == 0) {
        size_t v10 = a3;
      }
      else {
        size_t v10 = *a3;
      }
      do
      {
        uint64_t v11 = 3 * (v8 >> 2);
        _X9 = &v3[v11];
        __asm { PRFM            #0, [X9] }
        int v17 = &v3[3 * (v8 >> 1)];
        _X8 = &v17[v11];
        __asm { PRFM            #0, [X8] }
        int v20 = *((char *)v17 + 23);
        if (v20 >= 0) {
          size_t v21 = *((unsigned __int8 *)v17 + 23);
        }
        else {
          size_t v21 = (size_t)v17[1];
        }
        if (v20 >= 0) {
          int v22 = &v3[3 * (v8 >> 1)];
        }
        else {
          int v22 = (const void **)*v17;
        }
        if (v9 >= v21) {
          size_t v23 = v21;
        }
        else {
          size_t v23 = v9;
        }
        int v24 = memcmp(v22, v10, v23);
        BOOL v25 = v21 < v9;
        if (v24) {
          BOOL v25 = v24 < 0;
        }
        if (v25) {
          unint64_t v26 = v8 >> 1;
        }
        else {
          unint64_t v26 = 0;
        }
        v3 += 3 * v26;
        v8 -= v8 >> 1;
      }
      while ((uint64_t)v8 > 1);
    }
    int v27 = *((char *)v3 + 23);
    if (v27 >= 0) {
      size_t v28 = *((unsigned __int8 *)v3 + 23);
    }
    else {
      size_t v28 = (size_t)v3[1];
    }
    if (v27 >= 0) {
      int v29 = v3;
    }
    else {
      int v29 = *v3;
    }
    _NF = (v6 & 0x80u) != 0;
    if ((v6 & 0x80u) != 0) {
      size_t v6 = v7;
    }
    if (_NF) {
      int v31 = v36;
    }
    else {
      int v31 = a3;
    }
    if (v6 >= v28) {
      size_t v32 = v28;
    }
    else {
      size_t v32 = v6;
    }
    int v33 = memcmp(v29, v31, v32);
    BOOL v34 = v28 < v6;
    if (v33) {
      BOOL v34 = v33 < 0;
    }
    v3 += 3 * v34;
  }
  return v3;
}

unsigned __int8 *sub_3D82AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_B128((uint64_t)v41, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      size_t v14 = (unsigned __int8 *)*v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          uint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = *((void *)v14 + 1);
            if (v21 == v10)
            {
              uint64_t v22 = v14[39];
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = v14[39];
              }
              else {
                uint64_t v23 = *((void *)v14 + 3);
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v14 + 2), v5, *((void *)v14 + 3))) {
                    return v14;
                  }
                }
                else
                {
                  if (!v14[39]) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (v14[v24 + 16] == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            size_t v14 = *(unsigned __int8 **)v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = *((void *)v14 + 1);
          if (v17 == v10)
          {
            uint64_t v18 = v14[39];
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = v14[39];
            }
            else {
              uint64_t v19 = *((void *)v14 + 3);
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v14 + 2), v5, *((void *)v14 + 3))) {
                  return v14;
                }
              }
              else
              {
                if (!v14[39]) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (v14[v20 + 16] == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          size_t v14 = *(unsigned __int8 **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  BOOL v25 = (void *)(a1 + 16);
  size_t v14 = (unsigned __int8 *)operator new(0x28uLL);
  v41[0] = v14;
  v41[1] = a1 + 16;
  *(void *)size_t v14 = 0;
  *((void *)v14 + 1) = v10;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((void *)v14 + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  char v42 = 1;
  float v26 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v27 = *(float *)(a1 + 32);
  if (v11 && (float)(v27 * (float)v11) >= v26)
  {
    uint64_t v28 = *(void *)a1;
    int v29 = *(void **)(*(void *)a1 + 8 * v3);
    if (v29)
    {
LABEL_54:
      *(void *)size_t v14 = *v29;
LABEL_89:
      *int v29 = v14;
      goto LABEL_90;
    }
  }
  else
  {
    BOOL v30 = 1;
    if (v11 >= 3) {
      BOOL v30 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v31 = v30 | (2 * v11);
    unint64_t v32 = vcvtps_u32_f32(v26 / v27);
    if (v31 <= v32) {
      size_t prime = v32;
    }
    else {
      size_t prime = v31;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v34) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v34)
    {
      unint64_t v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v34 < 3uLL || (uint8x8_t v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        unint64_t v35 = std::__next_prime(v35);
      }
      else
      {
        uint64_t v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2) {
          unint64_t v35 = v37;
        }
      }
      if (prime <= v35) {
        size_t prime = v35;
      }
      if (prime < *(void *)&v34) {
LABEL_65:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v38 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        uint64_t v28 = *(void *)a1;
        int v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v29) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v3 = v10;
        uint64_t v28 = *(void *)a1;
        int v29 = *(void **)(*(void *)a1 + 8 * v10);
        if (v29) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v3 = v38 & v10;
      uint64_t v28 = *(void *)a1;
      int v29 = *(void **)(*(void *)a1 + 8 * (v38 & v10));
      if (v29) {
        goto LABEL_54;
      }
    }
  }
  *(void *)size_t v14 = *v25;
  *BOOL v25 = v14;
  *(void *)(v28 + 8 * v3) = v25;
  if (*(void *)v14)
  {
    unint64_t v39 = *(void *)(*(void *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v39 >= v11) {
        v39 %= v11;
      }
    }
    else
    {
      v39 &= v11 - 1;
    }
    int v29 = (void *)(*(void *)a1 + 8 * v39);
    goto LABEL_89;
  }
LABEL_90:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_3D86B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_3D86D0(uint64_t a1, void *a2, char **a3)
{
  uint64_t v4 = (unsigned __int16 *)(*a2 - *(int *)*a2);
  if (*v4 >= 0xDu && (uint64_t v5 = v4[6]) != 0)
  {
    uint64_t v6 = *(unsigned __int16 *)(*a2 + v5);
    unint64_t v7 = *a3;
    unint64_t v8 = &(*a3)[-*(int *)*a3];
    if (*(unsigned __int16 *)v8 < 0xDu) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = *a3;
    unint64_t v8 = &(*a3)[-*(int *)*a3];
    if (*(unsigned __int16 *)v8 < 0xDu) {
      goto LABEL_9;
    }
  }
  uint64_t v9 = *((unsigned __int16 *)v8 + 6);
  if (v9)
  {
    uint64_t v10 = *(unsigned __int16 *)&v7[v9];
    if (v10 == v6) {
      return;
    }
    goto LABEL_10;
  }
LABEL_9:
  LOWORD(v10) = 0;
  if (!v6) {
    return;
  }
LABEL_10:
  uint64_t v11 = *(void *)a1;
  sub_3D6530(*(void *)a1, v6, &__s1);
  sub_3D6530(v11, v10, __p);
  uint64_t v12 = v28;
  int v13 = (char)v28;
  if ((v28 & 0x80u) == 0) {
    size_t v14 = v28;
  }
  else {
    size_t v14 = __n;
  }
  unint64_t v15 = v25;
  unsigned __int8 v16 = v25;
  if ((v25 & 0x80u) != 0) {
    unint64_t v15 = (unint64_t)__p[1];
  }
  if (v14 == v15)
  {
    if ((v25 & 0x80u) == 0) {
      unint64_t v17 = __p;
    }
    else {
      unint64_t v17 = (void **)__p[0];
    }
    if ((char)v28 < 0)
    {
      if (!memcmp(__s1, v17, __n)) {
        goto LABEL_36;
      }
    }
    else
    {
      if (!v28) {
        goto LABEL_36;
      }
      p_s1 = &__s1;
      while (*(unsigned __int8 *)p_s1 == *(unsigned __int8 *)v17)
      {
        p_s1 = (void **)((char *)p_s1 + 1);
        unint64_t v17 = (void **)((char *)v17 + 1);
        if (!--v12) {
          goto LABEL_36;
        }
      }
    }
  }
  int v19 = **(unsigned __int8 **)(a1 + 16);
  int v20 = sub_3D2F30(v11, (unsigned __int8 *)__p);
  int v21 = 2 * (v19 != 0);
  if (v19) {
    int v22 = 2;
  }
  else {
    int v22 = 1;
  }
  if (v20 != 3) {
    int v22 = v20;
  }
  if (v20 != 4) {
    int v21 = v22;
  }
  uint64_t v23 = *(int **)(a1 + 8);
  if (*v23 < v21) {
    int v21 = *v23;
  }
  int *v23 = v21;
  unsigned __int8 v16 = v25;
LABEL_36:
  if ((v16 & 0x80) == 0)
  {
    if ((v13 & 0x80000000) == 0) {
      return;
    }
LABEL_40:
    operator delete(__s1);
    return;
  }
  operator delete(__p[0]);
  if (v13 < 0) {
    goto LABEL_40;
  }
}

void sub_3D889C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if (v20 < 0)
    {
LABEL_5:
      operator delete(a15);
      _Unwind_Resume(a1);
    }
  }
  else if (v20 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

void sub_3D88E0(uint64_t a1, void *a2, char **a3)
{
  uint64_t v4 = (unsigned __int16 *)(*a2 - *(int *)*a2);
  if (*v4 >= 0xDu && (uint64_t v5 = v4[6]) != 0)
  {
    uint64_t v6 = *(unsigned __int16 *)(*a2 + v5);
    unint64_t v7 = *a3;
    unint64_t v8 = &(*a3)[-*(int *)*a3];
    if (*(unsigned __int16 *)v8 < 0xDu) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = *a3;
    unint64_t v8 = &(*a3)[-*(int *)*a3];
    if (*(unsigned __int16 *)v8 < 0xDu) {
      goto LABEL_9;
    }
  }
  uint64_t v9 = *((unsigned __int16 *)v8 + 6);
  if (v9)
  {
    uint64_t v10 = *(unsigned __int16 *)&v7[v9];
    if (v10 == v6) {
      return;
    }
    goto LABEL_10;
  }
LABEL_9:
  LOWORD(v10) = 0;
  if (!v6) {
    return;
  }
LABEL_10:
  uint64_t v11 = *(void *)a1;
  sub_3D6530(*(void *)a1, v6, &__s1);
  sub_3D6530(v11, v10, __p);
  uint64_t v12 = v28;
  int v13 = (char)v28;
  if ((v28 & 0x80u) == 0) {
    size_t v14 = v28;
  }
  else {
    size_t v14 = __n;
  }
  unint64_t v15 = v25;
  unsigned __int8 v16 = v25;
  if ((v25 & 0x80u) != 0) {
    unint64_t v15 = (unint64_t)__p[1];
  }
  if (v14 == v15)
  {
    if ((v25 & 0x80u) == 0) {
      unint64_t v17 = __p;
    }
    else {
      unint64_t v17 = (void **)__p[0];
    }
    if ((char)v28 < 0)
    {
      if (!memcmp(__s1, v17, __n)) {
        goto LABEL_36;
      }
    }
    else
    {
      if (!v28) {
        goto LABEL_36;
      }
      p_s1 = &__s1;
      while (*(unsigned __int8 *)p_s1 == *(unsigned __int8 *)v17)
      {
        p_s1 = (void **)((char *)p_s1 + 1);
        unint64_t v17 = (void **)((char *)v17 + 1);
        if (!--v12) {
          goto LABEL_36;
        }
      }
    }
  }
  int v19 = **(unsigned __int8 **)(a1 + 16);
  int v20 = sub_3D2F30(v11, (unsigned __int8 *)__p);
  int v21 = 2 * (v19 != 0);
  if (v19) {
    int v22 = 2;
  }
  else {
    int v22 = 1;
  }
  if (v20 != 3) {
    int v22 = v20;
  }
  if (v20 != 4) {
    int v21 = v22;
  }
  uint64_t v23 = *(int **)(a1 + 8);
  if (*v23 < v21) {
    int v21 = *v23;
  }
  int *v23 = v21;
  unsigned __int8 v16 = v25;
LABEL_36:
  if ((v16 & 0x80) == 0)
  {
    if ((v13 & 0x80000000) == 0) {
      return;
    }
LABEL_40:
    operator delete(__s1);
    return;
  }
  operator delete(__p[0]);
  if (v13 < 0) {
    goto LABEL_40;
  }
}

void sub_3D8AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if (v20 < 0)
    {
LABEL_5:
      operator delete(a15);
      _Unwind_Resume(a1);
    }
  }
  else if (v20 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

void sub_3D8AF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(int **)(a2 + 8);
  uint64_t v5 = (unsigned __int16 *)((char *)v4 - *v4);
  if (*v5 >= 0xDu && (uint64_t v6 = v5[6]) != 0)
  {
    uint64_t v7 = *(unsigned __int16 *)((char *)v4 + v6);
    unint64_t v8 = *(int **)(a3 + 8);
    uint64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
    if (*v9 < 0xDu) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v8 = *(int **)(a3 + 8);
    uint64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
    if (*v9 < 0xDu) {
      goto LABEL_9;
    }
  }
  uint64_t v10 = v9[6];
  if (v10)
  {
    uint64_t v11 = *(unsigned __int16 *)((char *)v8 + v10);
    if (v11 == v7) {
      return;
    }
    goto LABEL_10;
  }
LABEL_9:
  LOWORD(v11) = 0;
  if (!v7) {
    return;
  }
LABEL_10:
  uint64_t v12 = *(void *)a1;
  sub_3D6530(*(void *)a1, v7, &__s1);
  sub_3D6530(v12, v11, __p);
  uint64_t v13 = v29;
  int v14 = (char)v29;
  if ((v29 & 0x80u) == 0) {
    size_t v15 = v29;
  }
  else {
    size_t v15 = __n;
  }
  unint64_t v16 = v26;
  unsigned __int8 v17 = v26;
  if ((v26 & 0x80u) != 0) {
    unint64_t v16 = (unint64_t)__p[1];
  }
  if (v15 == v16)
  {
    if ((v26 & 0x80u) == 0) {
      uint64_t v18 = __p;
    }
    else {
      uint64_t v18 = (void **)__p[0];
    }
    if ((char)v29 < 0)
    {
      if (!memcmp(__s1, v18, __n)) {
        goto LABEL_36;
      }
    }
    else
    {
      if (!v29) {
        goto LABEL_36;
      }
      p_s1 = &__s1;
      while (*(unsigned __int8 *)p_s1 == *(unsigned __int8 *)v18)
      {
        p_s1 = (void **)((char *)p_s1 + 1);
        uint64_t v18 = (void **)((char *)v18 + 1);
        if (!--v13) {
          goto LABEL_36;
        }
      }
    }
  }
  int v20 = **(unsigned __int8 **)(a1 + 16);
  int v21 = sub_3D2F30(v12, (unsigned __int8 *)__p);
  int v22 = 2 * (v20 != 0);
  if (v20) {
    int v23 = 2;
  }
  else {
    int v23 = 1;
  }
  if (v21 != 3) {
    int v23 = v21;
  }
  if (v21 != 4) {
    int v22 = v23;
  }
  uint64_t v24 = *(int **)(a1 + 8);
  if (*v24 < v22) {
    int v22 = *v24;
  }
  *uint64_t v24 = v22;
  unsigned __int8 v17 = v26;
LABEL_36:
  if ((v17 & 0x80) == 0)
  {
    if ((v14 & 0x80000000) == 0) {
      return;
    }
LABEL_40:
    operator delete(__s1);
    return;
  }
  operator delete(__p[0]);
  if (v14 < 0) {
    goto LABEL_40;
  }
}

void sub_3D8CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if (v20 < 0)
    {
LABEL_5:
      operator delete(a15);
      _Unwind_Resume(a1);
    }
  }
  else if (v20 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

void sub_3D8D00(uint64_t a1, void *a2, char **a3)
{
  uint64_t v4 = (unsigned __int16 *)(*a2 - *(int *)*a2);
  if (*v4 >= 0xDu && (uint64_t v5 = v4[6]) != 0)
  {
    uint64_t v6 = *(unsigned __int16 *)(*a2 + v5);
    uint64_t v7 = *a3;
    unint64_t v8 = &(*a3)[-*(int *)*a3];
    if (*(unsigned __int16 *)v8 < 0xDu) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    unint64_t v8 = &(*a3)[-*(int *)*a3];
    if (*(unsigned __int16 *)v8 < 0xDu) {
      goto LABEL_9;
    }
  }
  uint64_t v9 = *((unsigned __int16 *)v8 + 6);
  if (v9)
  {
    uint64_t v10 = *(unsigned __int16 *)&v7[v9];
    if (v10 == v6) {
      return;
    }
    goto LABEL_10;
  }
LABEL_9:
  LOWORD(v10) = 0;
  if (!v6) {
    return;
  }
LABEL_10:
  uint64_t v11 = *(void *)a1;
  sub_3D6530(*(void *)a1, v6, &__s1);
  sub_3D6530(v11, v10, __p);
  uint64_t v12 = v28;
  int v13 = (char)v28;
  if ((v28 & 0x80u) == 0) {
    size_t v14 = v28;
  }
  else {
    size_t v14 = __n;
  }
  unint64_t v15 = v25;
  unsigned __int8 v16 = v25;
  if ((v25 & 0x80u) != 0) {
    unint64_t v15 = (unint64_t)__p[1];
  }
  if (v14 == v15)
  {
    if ((v25 & 0x80u) == 0) {
      unsigned __int8 v17 = __p;
    }
    else {
      unsigned __int8 v17 = (void **)__p[0];
    }
    if ((char)v28 < 0)
    {
      if (!memcmp(__s1, v17, __n)) {
        goto LABEL_36;
      }
    }
    else
    {
      if (!v28) {
        goto LABEL_36;
      }
      p_s1 = &__s1;
      while (*(unsigned __int8 *)p_s1 == *(unsigned __int8 *)v17)
      {
        p_s1 = (void **)((char *)p_s1 + 1);
        unsigned __int8 v17 = (void **)((char *)v17 + 1);
        if (!--v12) {
          goto LABEL_36;
        }
      }
    }
  }
  int v19 = **(unsigned __int8 **)(a1 + 16);
  int v20 = sub_3D2F30(v11, (unsigned __int8 *)__p);
  int v21 = 2 * (v19 != 0);
  if (v19) {
    int v22 = 2;
  }
  else {
    int v22 = 1;
  }
  if (v20 != 3) {
    int v22 = v20;
  }
  if (v20 != 4) {
    int v21 = v22;
  }
  int v23 = *(int **)(a1 + 8);
  if (*v23 < v21) {
    int v21 = *v23;
  }
  int *v23 = v21;
  unsigned __int8 v16 = v25;
LABEL_36:
  if ((v16 & 0x80) == 0)
  {
    if ((v13 & 0x80000000) == 0) {
      return;
    }
LABEL_40:
    operator delete(__s1);
    return;
  }
  operator delete(__p[0]);
  if (v13 < 0) {
    goto LABEL_40;
  }
}

void sub_3D8ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if (v20 < 0)
    {
LABEL_5:
      operator delete(a15);
      _Unwind_Resume(a1);
    }
  }
  else if (v20 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

double sub_3D8F10()
{
  byte_2557ECF = 1;
  word_2557EB8 = 65;
  byte_2557EE7 = 1;
  word_2557ED0 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_2557F18 = 0u;
  *(_OWORD *)&qword_2557F28 = 0u;
  dword_2557F38 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2557F18, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_2557F18, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_2557F18, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_2557F18, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  qword_2557EF0 = 0;
  qword_2557EF8 = 0;
  qword_2557EE8 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_2557EE8 = (uint64_t)v0;
  qword_2557EF0 = (uint64_t)(v0 + 9);
  qword_2557EF8 = (uint64_t)(v0 + 9);
  qword_2557F00 = 0;
  qword_2557F08 = 0;
  unk_2557F10 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_2557F08 = (uint64_t)(v1 + 9);
  unk_2557F10 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_2557F00 = (uint64_t)v1;
  return result;
}

void sub_3D914C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_2557F28) {
    sub_20A8110((void **)qword_2557F28);
  }
  uint64_t v37 = (void *)xmmword_2557F18;
  *(void *)&xmmword_2557F18 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t *sub_3D91EC(uint64_t *a1, void *a2)
{
  *a1 = sub_3750CC(a2);
  a1[1] = sub_375394(a2);
  sub_3E1B78(a1 + 2, a2);
  HIBYTE(v12[2]) = 18;
  strcpy((char *)v12, "RestrictionChecker");
  std::string __p = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  char v4 = sub_374CDC((uint64_t)a2, (uint64_t)v12, (uint64_t *)&__p);
  sub_3DC8A8((uint64_t)(a1 + 8), v4);
  int v5 = (void **)__p;
  if (__p)
  {
    uint64_t v6 = v10;
    char v7 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      char v7 = __p;
    }
    char v10 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v12[2]) < 0) {
    operator delete(v12[0]);
  }
  return a1;
}

void sub_3D9300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_1A668(&a10);
  if (a18 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v18 + 63) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else if ((*(char *)(v18 + 63) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v18 + 40));
  _Unwind_Resume(a1);
}

void sub_3D9348(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v16[0] = 0;
  v16[1] = 0;
  int v14 = &v15;
  unint64_t v15 = v16;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  int v13 = 1065353216;
  sub_40EFE8(a2);
  uint64_t v5 = *a1;
  uint64_t v6 = sub_40EFE8(a2);
  sub_3BDCD8(v5, *(unsigned int *)(v6 + 32) | ((unint64_t)*(unsigned __int16 *)(v6 + 36) << 32), __p);
  unint64_t v7 = v9;
  if ((v9 & 0x80u) != 0) {
    unint64_t v7 = (unint64_t)__p[1];
  }
  if (v7) {
    sub_26A18((uint64_t)v10, (const char *)__p);
  }
  else {
    sub_26908((uint64_t)v10);
  }
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
  sub_480C((uint64_t)__p, *(_DWORD *)(a2 + 512));
}

void sub_3D9E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  sub_1A668(&a15);
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a30)
  {
    a31 = (uint64_t)a30;
    operator delete(a30);
  }
  sub_4814((uint64_t)&a34);
  sub_26C4C((const void **)(v39 - 192));
  sub_31B778(v39 - 176);
  unsigned int v41 = *(void **)a10;
  if (*(void *)a10)
  {
    *(void *)(a10 + 8) = v41;
    operator delete(v41);
  }
  sub_22EFF4(v39 - 120, *(void **)(v39 - 112));
  _Unwind_Resume(a1);
}

BOOL sub_3DA024(uint64_t *a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = *(void **)a3;
  unint64_t v8 = *(void *)(a3 + 8);
  if (*(void *)a3)
  {
LABEL_4:
    char v10 = *(void **)(a3 + 16);
    unint64_t v9 = *(void *)(a3 + 24);
    unint64_t v11 = sub_46C760(v7);
    if (v10)
    {
LABEL_5:
      unint64_t v12 = sub_46C760(v10);
      if (v8 >= v11 || v9 >= v12)
      {
        if (v8 < v11 != v9 < v12) {
          goto LABEL_12;
        }
      }
      else
      {
        uint64_t v13 = sub_46C8EC(v7, v8);
        if (v13 != sub_46C8EC(v10, v9)) {
          goto LABEL_12;
        }
      }
    }
    else
    {
      while (v8 < v11)
      {
LABEL_12:
        if (v6 == a2[1]) {
          return v6 == a2[1];
        }
        uint64_t v14 = *(void *)(sub_46C8EC(v7, v8) + 32);
        if ((v14 & 0xFFFFFFFFFFFFLL) == (*v6 & 0xFFFFFFFFFFFFLL)
          && ((v14 & 0xFF000000000000) == 0) != (HIWORD(*v6) & 1))
        {
          ++v6;
          ++v8;
          goto LABEL_4;
        }
        uint64_t v15 = *a1;
        uint64_t v16 = sub_46C8EC(v7, v8);
        unsigned __int8 v17 = (int *)sub_2D5D58(v15, *(unsigned int *)(v16 + 32) | ((unint64_t)*(unsigned __int16 *)(v16 + 36) << 32));
        uint64_t v18 = (unsigned __int16 *)((char *)v17 - *v17);
        if (*v18 < 0xBu) {
          return v6 == a2[1];
        }
        uint64_t v19 = v18[5];
        if (!v19 || (*((unsigned char *)v17 + v19 + 2) & 1) == 0) {
          return v6 == a2[1];
        }
        ++v8;
        char v10 = *(void **)(a3 + 16);
        unint64_t v9 = *(void *)(a3 + 24);
        unint64_t v11 = sub_46C760(v7);
        if (v10) {
          goto LABEL_5;
        }
      }
    }
  }
  else
  {
    while (1)
    {
      char v20 = *(void **)(a3 + 16);
      if (!v20) {
        break;
      }
      unint64_t v21 = *(void *)(a3 + 24);
      if (v21 >= sub_46C760(v20) || v6 == a2[1]) {
        break;
      }
      uint64_t v23 = *(void *)(sub_46C8EC(0, v8) + 32);
      if ((v23 & 0xFFFFFFFFFFFFLL) == (*v6 & 0xFFFFFFFFFFFFLL)
        && ((v23 & 0xFF000000000000) == 0) != (HIWORD(*v6) & 1))
      {
        ++v6;
      }
      else
      {
        uint64_t v24 = *a1;
        uint64_t v25 = sub_46C8EC(0, v8);
        unsigned __int8 v26 = (int *)sub_2D5D58(v24, *(unsigned int *)(v25 + 32) | ((unint64_t)*(unsigned __int16 *)(v25 + 36) << 32));
        float v27 = (unsigned __int16 *)((char *)v26 - *v26);
        if (*v27 < 0xBu) {
          return v6 == a2[1];
        }
        uint64_t v28 = v27[5];
        if (!v28 || (*((unsigned char *)v26 + v28 + 2) & 1) == 0) {
          return v6 == a2[1];
        }
      }
      ++v8;
    }
  }
  return v6 == a2[1];
}

double sub_3DA260@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = (int *)sub_2DBC9C(a1, a2);
  uint64_t v5 = (unsigned __int16 *)((char *)v4 - *v4);
  if (*v5 >= 9u && (uint64_t v6 = v5[4]) != 0)
  {
    unint64_t v7 = (unsigned int *)((char *)v4 + v6 + *(unsigned int *)((char *)v4 + v6));
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    sub_23708((uint64_t)&v10, *v7);
    sub_3E2110(v7, (void ***)&v10, *((uint64_t *)&v10 + 1));
    double result = *(double *)&v10;
    uint64_t v9 = v11;
    *(_OWORD *)a3 = v10;
    *(void *)(a3 + 16) = v9;
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_3DA30C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9)
{
  if (a9) {
    sub_20A81AC(&a9, a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_3DA328(uint64_t *result, uint64_t *a2, unsigned int a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *result;
  unint64_t v8 = (uint64_t **)(*result + 8);
  unint64_t v7 = *v8;
  if (*v8)
  {
    uint64_t v9 = *(uint64_t **)(*result + 8);
    while (1)
    {
      while (1)
      {
        long long v10 = (uint64_t **)v9;
        unint64_t v11 = v9[4];
        if (v11 <= (unint64_t)a2) {
          break;
        }
        uint64_t v9 = *v10;
        unint64_t v8 = v10;
        if (!*v10) {
          goto LABEL_9;
        }
      }
      if (v11 >= (unint64_t)a2) {
        break;
      }
      uint64_t v9 = v10[1];
      if (!v9)
      {
        unint64_t v8 = v10 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    long long v10 = (uint64_t **)(*result + 8);
LABEL_9:
    unint64_t v12 = (uint64_t *)v10;
    long long v10 = (uint64_t **)operator new(0x30uLL);
    v10[4] = a2;
    *((unsigned char *)v10 + 40) = 0;
    void *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *unint64_t v8 = (uint64_t *)v10;
    uint64_t v13 = **(void **)v6;
    uint64_t v14 = (uint64_t *)v10;
    if (v13)
    {
      *(void *)uint64_t v6 = v13;
      uint64_t v14 = *v8;
    }
    double result = sub_2F250(*(uint64_t **)(v6 + 8), v14);
    ++*(void *)(v6 + 16);
    uint64_t v6 = *v5;
    unint64_t v7 = *(uint64_t **)(*v5 + 8);
  }
  unsigned int v15 = *((unsigned __int8 *)v10 + 40);
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        unsigned __int8 v17 = (uint64_t **)v7;
        unint64_t v18 = v7[4];
        if (v18 <= (unint64_t)a2) {
          break;
        }
        unint64_t v7 = *v17;
        uint64_t v16 = v17;
        if (!*v17) {
          goto LABEL_19;
        }
      }
      if (v18 >= (unint64_t)a2) {
        break;
      }
      unint64_t v7 = v17[1];
      if (!v7)
      {
        uint64_t v16 = v17 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v16 = (uint64_t **)(v6 + 8);
    unsigned __int8 v17 = (uint64_t **)(v6 + 8);
LABEL_19:
    uint64_t v19 = (uint64_t *)v17;
    unsigned __int8 v17 = (uint64_t **)operator new(0x30uLL);
    v17[4] = a2;
    *((unsigned char *)v17 + 40) = 0;
    *unsigned __int8 v17 = 0;
    v17[1] = 0;
    void v17[2] = v19;
    unsigned __int8 *v16 = (uint64_t *)v17;
    uint64_t v20 = **(void **)v6;
    unint64_t v21 = (uint64_t *)v17;
    if (v20)
    {
      *(void *)uint64_t v6 = v20;
      unint64_t v21 = *v16;
    }
    double result = sub_2F250(*(uint64_t **)(v6 + 8), v21);
    ++*(void *)(v6 + 16);
  }
  if (v15 <= a3) {
    char v22 = a3;
  }
  else {
    char v22 = v15;
  }
  *((unsigned char *)v17 + 40) = v22;
  return result;
}

BOOL sub_3DA4A8(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    return 0;
  }
  uint64_t v6 = (int *)sub_2D5D58(a1, a2 & 0xFFFFFFFFFFFFLL);
  unint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 < 0x41u) {
    return 0;
  }
  uint64_t v8 = v7[32];
  if (!v8) {
    return 0;
  }
  sub_3BD900((unsigned int *)((char *)v6 + v8 + *(unsigned int *)((char *)v6 + v8)), (a2 & 0xFF000000000000) != 0, 4, (uint64_t)&__p);
  uint64_t v9 = (void **)__p;
  long long v10 = v13;
  BOOL v3 = __p != v13;
  if (!__p) {
    return v3;
  }
  unint64_t v11 = __p;
  if (__p != v13)
  {
    do
    {
      if (*((char *)v10 - 1) < 0) {
        operator delete(*(v10 - 3));
      }
      v10 -= 3;
    }
    while (v10 != v9);
    unint64_t v11 = __p;
  }
  uint64_t v13 = v9;
  operator delete(v11);
  return v3;
}

void sub_3DA5AC(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v3 = (void *)a2;
  uint64_t v5 = a3;
  *(void *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  if (!sub_EADC78(a2))
  {
    uint64_t v6 = (uint64_t *)sub_5231C((uint64_t)v3);
    LODWORD(v128) = 0;
    WORD2(v128) = 0;
    BYTE6(v128) = 1;
    uint64_t v7 = sub_EAE104(v3);
    if (v7)
    {
      uint64_t v118 = 0;
      unint64_t v8 = 0;
      BOOL v109 = (char **)(v5 + 48);
      uint64_t v110 = v5;
      uint64_t v111 = (char **)(v5 + 24);
      uint64_t v113 = v7;
      uint64_t v114 = 72;
      uint64_t v115 = 32;
      int64_t v116 = a1;
      while (1)
      {
        uint64_t v9 = sub_EAE1B8(v3, v8);
        uint64_t v10 = *(void *)(v9 + 32);
        uint64_t v127 = v10;
        uint64_t v11 = *a1;
        unint64_t v12 = (int *)sub_2D5D58(*a1, v10 & 0xFFFFFFFFFFFFLL);
        uint64_t v13 = (unsigned __int16 *)((char *)v12 - *v12);
        if (*v13 >= 0x41u && v13[32])
        {
          uint64_t v14 = (int *)sub_2D5D58(v11, v10 & 0xFFFFFFFFFFFFLL);
          unsigned int v15 = (unsigned __int16 *)((char *)v14 - *v14);
          if (*v15 >= 0x41u && (uint64_t v16 = v15[32]) != 0) {
            unsigned __int8 v17 = (unsigned int *)((char *)v14 + v16 + *(unsigned int *)((char *)v14 + v16));
          }
          else {
            unsigned __int8 v17 = 0;
          }
          sub_3BD900(v17, (v10 & 0xFF000000000000) != 0, 5, (uint64_t)&v129);
          unint64_t v18 = v129;
          uint64_t v19 = v130;
          if (v129)
          {
            uint64_t v20 = v129;
            if (v129 != v130)
            {
              unint64_t v21 = v130;
              do
              {
                if (*((char *)v21 - 1) < 0) {
                  operator delete((void *)*(v21 - 3));
                }
                v21 -= 3;
              }
              while (v21 != v18);
              uint64_t v20 = v129;
              uint64_t v5 = v110;
            }
            long long v130 = v18;
            operator delete(v20);
          }
          if (v18 != v19) {
            sub_2D5B74((char **)v5, &v127);
          }
        }
        uint64_t v22 = v113;
        if (v128)
        {
          uint64_t v23 = *(void *)(sub_EAE1B8(v3, 0) + 32);
          if (v128 != v23
            || WORD2(v128) != WORD2(v23)
            || ((v23 & 0x1000000000000) == 0) != (BYTE6(v128) == 0))
          {
            sub_2D5B74((char **)v5, &v128);
            long long v129 = *(unint64_t **)(sub_EAE1B8(v3, v8 - 1) + 32);
            sub_2D5B74((char **)v5, &v129);
            LODWORD(v128) = 0;
            WORD2(v128) = 0;
            BYTE6(v128) = 1;
          }
        }
        if (v8 == sub_EAE104(v3) - 1) {
          return;
        }
        uint64_t v24 = (void *)*a1;
        BOOL v121 = *(void **)(v9 + 32);
        long long v130 = 0;
        uint64_t v131 = 0;
        long long v129 = 0;
        std::string __p = v24;
        unsigned int v125 = &v121;
        sub_3E1DFC((uint64_t)v24, (uint64_t)v121, (uint64_t)&v129, (uint64_t)&__p);
        uint64_t v25 = v129;
        unsigned int v120 = v130;
        if (v129 != v130) {
          break;
        }
LABEL_144:
        if (v25)
        {
          long long v130 = v25;
          operator delete(v25);
        }
        ++v8;
        --v118;
        v114 += 88;
        v115 += 88;
        if (v8 == v22) {
          return;
        }
      }
      char v119 = 0;
      unint64_t v112 = 0;
      while (1)
      {
        uint64_t v26 = *a1;
        unint64_t v27 = *v25;
        unsigned int v125 = 0;
        BOOL v126 = 0;
        std::string __p = 0;
        uint64_t v28 = (int *)sub_2DBC9C(v26, v27);
        unsigned __int8 v29 = (unsigned __int16 *)((char *)v28 - *v28);
        if (*v29 >= 7u)
        {
          uint64_t v30 = v29[3];
          if (v30)
          {
            unint64_t v31 = (unsigned int *)((char *)v28 + v30 + *(unsigned int *)((char *)v28 + v30));
            uint64_t v32 = *v31;
            if (v32)
            {
              uint64_t v33 = 8 * v32;
              int8x8_t v34 = (char *)operator new(8 * v32);
              std::string __p = v34;
              unsigned int v125 = v34;
              BOOL v126 = &v34[8 * v32];
              unint64_t v35 = (uint64_t *)(v31 + 1);
              do
              {
                uint64_t v36 = *v35;
                unint64_t v37 = HIDWORD(*v35);
                LODWORD(v121) = *v35;
                WORD2(v121) = v37;
                BYTE6(v121) = (v36 & 0xFF000000000000) == 0;
                int8x8_t v34 = sub_2D6254((unint64_t *)&__p, v34, (int *)&v121) + 8;
                ++v35;
                v33 -= 8;
              }
              while (v33);
            }
          }
        }
        unint64_t v38 = __p;
        if (__p == v125)
        {
          int v49 = 5;
          if (!__p) {
            goto LABEL_61;
          }
          goto LABEL_60;
        }
        uint64_t v39 = (int *)sub_2DBC9C(*a1, *v25);
        uint64_t v40 = (unsigned __int16 *)((char *)v39 - *v39);
        if (*v40 >= 0xFu
          && v40[7]
          && (*((unsigned char *)v39 + v40[7]) & 4) != 0
          && (!v40[2] || *((unsigned __int8 *)v39 + v40[2]) - 1 >= 5)
          && v40[4])
        {
          if (sub_3DB3AC(a1, (uint64_t)&__p, v6, v8))
          {
            uint64_t v41 = v125 - (unsigned char *)__p;
            if (v125 - (unsigned char *)__p == 16)
            {
              sub_3DB530(v111, *v6 + 88 * v8);
              goto LABEL_102;
            }
            if ((unint64_t)v41 >= 0x11)
            {
              int v50 = v3;
              uint64_t v51 = 0;
              uint64_t v117 = v41 >> 3;
              BOOL v121 = 0;
              BOOL v122 = 0;
              uint64_t v123 = 0;
              while (1)
              {
                unsigned int v53 = v6;
                unint64_t v54 = v8;
                unint64_t v55 = v51 + v8;
                long long v56 = v50;
                uint64_t v57 = *(void *)(sub_EAE1B8(v50, v55) + 32);
                int v58 = v122;
                if (v122 >= v123) {
                  break;
                }
                *(void *)BOOL v122 = v57;
                int v52 = v58 + 8;
                unint64_t v8 = v54;
                a1 = v116;
LABEL_75:
                BOOL v122 = v52;
                if (++v51 == v117)
                {
                  uint64_t v5 = v110;
                  int32x2_t v70 = *(void **)(v110 + 56);
                  if ((unint64_t)v70 >= *(void *)(v110 + 64))
                  {
                    int64x2_t v76 = sub_3E3880(v109, (uint64_t)&v121);
                    BOOL v3 = v50;
                  }
                  else
                  {
                    *int32x2_t v70 = 0;
                    v70[1] = 0;
                    v70[2] = 0;
                    int32x2_t v71 = v121;
                    uint64_t v72 = v122 - (unsigned char *)v121;
                    BOOL v3 = v50;
                    if (v122 != v121)
                    {
                      if (v72 < 0) {
                        sub_2E00();
                      }
                      int32x2_t v73 = (char *)operator new(v122 - (unsigned char *)v121);
                      *int32x2_t v70 = v73;
                      v70[1] = v73;
                      uint64_t v74 = v72;
                      int8x8_t v75 = &v73[8 * (v72 >> 3)];
                      v70[2] = v75;
                      memcpy(v73, v71, v74 - 1);
                      v70[1] = v75;
                    }
                    int64x2_t v76 = (char *)(v70 + 3);
                    *(void *)(v110 + 56) = v70 + 3;
                  }
                  *(void *)(v110 + 56) = v76;
                  if (v121)
                  {
                    BOOL v122 = (char *)v121;
                    operator delete(v121);
                  }
                  goto LABEL_102;
                }
              }
              char v59 = (char *)v121;
              uint64_t v60 = (v122 - (unsigned char *)v121) >> 3;
              unint64_t v61 = v60 + 1;
              if ((unint64_t)(v60 + 1) >> 61) {
                sub_2E00();
              }
              uint64_t v62 = v123 - (unsigned char *)v121;
              if ((v123 - (unsigned char *)v121) >> 2 > v61) {
                unint64_t v61 = v62 >> 2;
              }
              if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v63 = v61;
              }
              if (v63)
              {
                if (v63 >> 61) {
                  sub_188D718();
                }
                unint64_t v64 = v63;
                long long v65 = (char *)operator new(8 * v63);
                unint64_t v63 = v64;
                unint64_t v66 = &v65[8 * v60];
                *(void *)unint64_t v66 = v57;
                int v52 = v66 + 8;
                int v50 = v56;
                if (v58 == v59) {
                  goto LABEL_90;
                }
                do
                {
LABEL_88:
                  int v68 = *((_DWORD *)v58 - 2);
                  v58 -= 8;
                  int v69 = *(_DWORD *)(v58 + 3);
                  *((_DWORD *)v66 - 2) = v68;
                  v66 -= 8;
                  *(_DWORD *)(v66 + 3) = v69;
                }
                while (v58 != v59);
                int v58 = (char *)v121;
              }
              else
              {
                long long v65 = 0;
                unint64_t v66 = (char *)(8 * v60);
                uint64_t v67 = (void *)(8 * v60);
                *uint64_t v67 = v57;
                int v52 = (char *)(v67 + 1);
                if (v58 != v59) {
                  goto LABEL_88;
                }
              }
LABEL_90:
              uint64_t v6 = v53;
              unint64_t v8 = v54;
              BOOL v121 = v66;
              BOOL v122 = v52;
              uint64_t v123 = &v65[8 * v63];
              a1 = v116;
              if (v58) {
                operator delete(v58);
              }
              goto LABEL_75;
            }
LABEL_102:
            int v49 = 4;
            unint64_t v38 = __p;
            if (!__p) {
              goto LABEL_61;
            }
          }
          else
          {
            int v49 = 5;
            unint64_t v38 = __p;
            if (!__p) {
              goto LABEL_61;
            }
          }
          goto LABEL_60;
        }
        char v42 = (int *)sub_2DBC9C(*a1, *v25);
        size_t v43 = (unsigned __int16 *)((char *)v42 - *v42);
        if (*v43 >= 0xFu && v43[7] && (*((unsigned char *)v42 + v43[7]) & 4) != 0 && v43[2] && *((unsigned char *)v42 + v43[2]) == 1) {
          break;
        }
        int v49 = 0;
        unint64_t v38 = __p;
        if (__p) {
          goto LABEL_60;
        }
LABEL_61:
        if ((v49 == 5 || !v49) && ++v25 != v120) {
          continue;
        }
        uint64_t v22 = v113;
        if (!(v119 & 1 | (v112 == 0)))
        {
          if (v112 == 1)
          {
            sub_3DB530(v111, *v6 + 88 * v8);
          }
          else
          {
            std::string __p = 0;
            unsigned int v125 = 0;
            BOOL v126 = 0;
            if (v112 >> 61) {
              sub_2E00();
            }
            char v91 = v3;
            unint64_t v92 = (char *)operator new(8 * v112);
            unint64_t v93 = &v92[8 * v112];
            std::string __p = v92;
            BOOL v126 = v93;
            memset_pattern16(v92, &unk_20E6E70, 8 * v112);
            uint64_t v94 = 0;
            uint64_t v95 = 0;
            unsigned int v125 = v93;
            uint64_t v96 = v115;
            do
            {
              uint64_t v97 = v6[1];
              uint64_t v98 = 0x2E8BA2E8BA2E8BA3 * ((v97 - *v6) >> 3);
              char v99 = (uint64_t *)(v97 - 16);
              if (v8 + v95 == v98) {
                long long v100 = v99;
              }
              else {
                long long v100 = (uint64_t *)(*v6 + v96);
              }
              uint64_t v101 = *v100;
              unint64_t v102 = (char *)__p + v94;
              *(_DWORD *)unint64_t v102 = v101;
              v102[6] = BYTE6(v101);
              *((_WORD *)v102 + 2) = WORD2(v101);
              ++v95;
              v96 += 88;
              v94 += 8;
            }
            while (v112 != v95);
            uint64_t v103 = *(void **)(v5 + 56);
            if ((unint64_t)v103 >= *(void *)(v5 + 64))
            {
              unsigned int v108 = sub_3E3880(v109, (uint64_t)&__p);
              uint64_t v22 = v113;
            }
            else
            {
              *uint64_t v103 = 0;
              v103[1] = 0;
              v103[2] = 0;
              int v104 = __p;
              uint64_t v105 = v125 - (unsigned char *)__p;
              uint64_t v22 = v113;
              if (v125 != __p)
              {
                if (v105 < 0) {
                  sub_2E00();
                }
                uint64_t v106 = (char *)operator new(v125 - (unsigned char *)__p);
                *uint64_t v103 = v106;
                v103[1] = v106;
                unsigned int v107 = &v106[8 * (v105 >> 3)];
                v103[2] = v107;
                memcpy(v106, v104, v105 - 1);
                v103[1] = v107;
                uint64_t v22 = v113;
              }
              unsigned int v108 = (char *)(v103 + 3);
              *(void *)(v5 + 56) = v103 + 3;
            }
            BOOL v3 = v91;
            *(void *)(v5 + 56) = v108;
            if (__p)
            {
              unsigned int v125 = __p;
              operator delete(__p);
            }
          }
        }
        uint64_t v25 = v129;
        goto LABEL_144;
      }
      int v44 = v43[4];
      BOOL v45 = v44 == 0;
      BOOL v46 = v44 != 0;
      char v47 = v45;
      char v48 = v47 | v119;
      if (v45) {
        int v49 = 0;
      }
      else {
        int v49 = 5;
      }
      if (v48)
      {
        v119 |= v46;
        unint64_t v38 = __p;
        if (!__p) {
          goto LABEL_61;
        }
        goto LABEL_60;
      }
      if (v118 + 1 + 0x2E8BA2E8BA2E8BA3 * ((v6[1] - *v6) >> 3) < (unint64_t)((v125 - (unsigned char *)__p) >> 3)
        || (sub_3DB3AC(a1, (uint64_t)&__p, v6, v8) & 1) != 0)
      {
        int v49 = 5;
        char v119 = 1;
        unint64_t v38 = __p;
        if (!__p) {
          goto LABEL_61;
        }
        goto LABEL_60;
      }
      uint64_t v77 = v125 - (unsigned char *)__p;
      if (v125 - (unsigned char *)__p == 16)
      {
        unint64_t v78 = 1;
        goto LABEL_108;
      }
      uint64_t v79 = *v6;
      uint64_t v80 = *(void *)(*v6 + 88 * v8 + 32);
      if (__PAIR64__(*((unsigned __int16 *)__p + 2), *(_DWORD *)__p) == __PAIR64__(WORD2(v80), v80)
        && ((v80 & 0x1000000000000) == 0) == (*((unsigned char *)__p + 6) == 0))
      {
        uint64_t v81 = v77 >> 3;
        if ((unint64_t)(v77 >> 3) <= 1) {
          uint64_t v83 = 1;
        }
        else {
          uint64_t v83 = v77 >> 3;
        }
        if ((unint64_t)v77 < 0x10) {
          goto LABEL_107;
        }
        uint64_t v84 = 0;
        unint64_t v85 = (v6[1] - v79) / 88;
        uint64_t v86 = v83 - 1;
        int v87 = (char *)__p + 14;
        __int32 v88 = (void *)(v79 + v114);
        if (v85 <= v8) {
          unint64_t v85 = v8;
        }
        uint64_t v89 = v118 + v85;
        uint64_t v90 = 1;
        while (v89 != v84)
        {
          if (__PAIR64__(*((unsigned __int16 *)v87 - 1), *(_DWORD *)(v87 - 6)) != __PAIR64__((unsigned __int16)WORD2(*v88), *v88))
          {
            uint64_t v81 = v90;
            goto LABEL_107;
          }
          if (((*v88 & 0x1000000000000) == 0) != (*v87 == 0))
          {
            uint64_t v81 = v84 + 1;
            goto LABEL_107;
          }
          ++v90;
          ++v84;
          v87 += 8;
          v88 += 11;
          if (v86 == v84) {
            goto LABEL_107;
          }
        }
      }
      uint64_t v81 = 0;
LABEL_107:
      unint64_t v78 = v81 + 1;
LABEL_108:
      char v119 = 0;
      int v49 = 0;
      unint64_t v82 = v112;
      if (v112 <= v78) {
        unint64_t v82 = v78;
      }
      unint64_t v112 = v82;
      unint64_t v38 = __p;
      if (!__p) {
        goto LABEL_61;
      }
LABEL_60:
      unsigned int v125 = v38;
      operator delete(v38);
      goto LABEL_61;
    }
  }
}

void sub_3DAFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  uint64_t v30 = *(void **)v27;
  if (*(void *)v27)
  {
    *(void *)(v27 + 8) = v30;
    operator delete(v30);
  }
  *(void *)(a11 + 56) = v27;
  if (__p) {
    operator delete(__p);
  }
  if (a26) {
    operator delete(a26);
  }
  unint64_t v31 = *(void **)(v28 - 112);
  if (!v31)
  {
    sub_3DB6CC(a11);
    _Unwind_Resume(a1);
  }
  *(void *)(v28 - 104) = v31;
  operator delete(v31);
  sub_3DB6CC(a11);
  _Unwind_Resume(a1);
}

BOOL sub_3DB1A4(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    return 0;
  }
  uint64_t v6 = (int *)sub_2D5D58(a1, a2 & 0xFFFFFFFFFFFFLL);
  uint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 < 0x41u) {
    return 0;
  }
  uint64_t v8 = v7[32];
  if (!v8) {
    return 0;
  }
  sub_3BD900((unsigned int *)((char *)v6 + v8 + *(unsigned int *)((char *)v6 + v8)), (a2 & 0xFF000000000000) != 0, 2, (uint64_t)&__p);
  uint64_t v9 = (void **)__p;
  uint64_t v10 = v13;
  BOOL v3 = __p != v13;
  if (!__p) {
    return v3;
  }
  uint64_t v11 = __p;
  if (__p != v13)
  {
    do
    {
      if (*((char *)v10 - 1) < 0) {
        operator delete(*(v10 - 3));
      }
      v10 -= 3;
    }
    while (v10 != v9);
    uint64_t v11 = __p;
  }
  uint64_t v13 = v9;
  operator delete(v11);
  return v3;
}

BOOL sub_3DB2A8(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    return 0;
  }
  uint64_t v6 = (int *)sub_2D5D58(a1, a2 & 0xFFFFFFFFFFFFLL);
  uint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 < 0x41u) {
    return 0;
  }
  uint64_t v8 = v7[32];
  if (!v8) {
    return 0;
  }
  sub_3BD900((unsigned int *)((char *)v6 + v8 + *(unsigned int *)((char *)v6 + v8)), (a2 & 0xFF000000000000) != 0, 3, (uint64_t)&__p);
  uint64_t v9 = (void **)__p;
  uint64_t v10 = v13;
  BOOL v3 = __p != v13;
  if (!__p) {
    return v3;
  }
  uint64_t v11 = __p;
  if (__p != v13)
  {
    do
    {
      if (*((char *)v10 - 1) < 0) {
        operator delete(*(v10 - 3));
      }
      v10 -= 3;
    }
    while (v10 != v9);
    uint64_t v11 = __p;
  }
  uint64_t v13 = v9;
  operator delete(v11);
  return v3;
}

uint64_t sub_3DB3AC(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *(void **)a2;
  char v4 = *(void **)(a2 + 8);
  uint64_t v7 = *a3;
  uint64_t v6 = a3[1];
  if (a4 + (((uint64_t)v4 - *(void *)a2) >> 3) > (unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v6 - *a3) >> 3) + 1)) {
    return 0;
  }
  if (v7 + 88 * a4 != v6 && v5 != v4)
  {
    uint64_t v12 = v7 + 88 * a4 + 88;
    while (1)
    {
      uint64_t v13 = *(void *)(v12 - 56);
      if ((v13 & 0xFFFFFFFFFFFFLL) != (*v5 & 0xFFFFFFFFFFFFLL)
        || ((v13 & 0xFF000000000000) == 0) == (HIWORD(*v5) & 1))
      {
        uint64_t v14 = (int *)sub_2D5D58(*a1, v13 & 0xFFFFFFFFFFFFLL);
        unsigned int v15 = (unsigned __int16 *)((char *)v14 - *v14);
        if (*v15 < 0xBu || (uint64_t v16 = v15[5]) == 0 || (*((unsigned char *)v14 + v16 + 2) & 1) == 0)
        {
LABEL_16:
          char v4 = *(void **)(a2 + 8);
          break;
        }
        uint64_t v6 = a3[1];
        char v4 = *(void **)(a2 + 8);
      }
      else
      {
        ++v5;
      }
      if (v12 != v6)
      {
        v12 += 88;
        if (v5 != v4) {
          continue;
        }
      }
      goto LABEL_16;
    }
  }
  if (v5 != v4)
  {
    if (v5 == v4 - 1)
    {
      uint64_t v17 = *(void *)(a3[1] - 16);
      if ((v17 & 0xFFFFFFFFFFFFLL) == (*v5 & 0xFFFFFFFFFFFFLL)) {
        return ((v17 & 0xFF000000000000) == 0) ^ HIWORD(*v5) & 1;
      }
    }
    return 0;
  }
  return 1;
}

char *sub_3DB530(char **a1, uint64_t a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v11 = *a1;
    uint64_t v12 = 0x2E8BA2E8BA2E8BA3 * ((v5 - *a1) >> 3);
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) > 0x2E8BA2E8BA2E8BALL) {
      sub_2E00();
    }
    unint64_t v14 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v4 - (void)v11) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x1745D1745D1745DLL) {
      unint64_t v15 = 0x2E8BA2E8BA2E8BALL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 > 0x2E8BA2E8BA2E8BALL) {
        sub_188D718();
      }
      uint64_t v16 = (char *)operator new(88 * v15);
    }
    else
    {
      uint64_t v16 = 0;
    }
    long long v17 = *(_OWORD *)(a2 + 48);
    unint64_t v18 = &v16[88 * v12];
    *((_OWORD *)v18 + 2) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)v18 + 3) = v17;
    *((_OWORD *)v18 + 4) = *(_OWORD *)(a2 + 64);
    *((void *)v18 + 10) = *(void *)(a2 + 80);
    long long v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)unint64_t v18 = *(_OWORD *)a2;
    *((_OWORD *)v18 + 1) = v19;
    uint64_t v10 = v18 + 88;
    if (v5 != v11)
    {
      do
      {
        long long v20 = *(_OWORD *)(v5 - 88);
        *(_OWORD *)(v18 - 72) = *(_OWORD *)(v5 - 72);
        *(_OWORD *)(v18 - 88) = v20;
        long long v21 = *(_OWORD *)(v5 - 56);
        long long v22 = *(_OWORD *)(v5 - 40);
        long long v23 = *(_OWORD *)(v5 - 24);
        *((void *)v18 - 1) = *((void *)v5 - 1);
        *(_OWORD *)(v18 - 24) = v23;
        *(_OWORD *)(v18 - 40) = v22;
        *(_OWORD *)(v18 - 56) = v21;
        v18 -= 88;
        v5 -= 88;
      }
      while (v5 != v11);
      uint64_t v5 = *a1;
    }
    *a1 = v18;
    a1[1] = v10;
    a1[2] = &v16[88 * v15];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
    *((_OWORD *)v5 + 1) = v6;
    long long v7 = *(_OWORD *)(a2 + 32);
    long long v8 = *(_OWORD *)(a2 + 48);
    long long v9 = *(_OWORD *)(a2 + 64);
    *((void *)v5 + 10) = *(void *)(a2 + 80);
    *((_OWORD *)v5 + 3) = v8;
    *((_OWORD *)v5 + 4) = v9;
    *((_OWORD *)v5 + 2) = v7;
    uint64_t v10 = v5 + 88;
  }
  a1[1] = v10;
  return v10 - 88;
}

uint64_t sub_3DB6CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 56);
    unint64_t v4 = *(void **)(a1 + 48);
    if (v3 != v2)
    {
      uint64_t v5 = *(void *)(a1 + 56);
      do
      {
        long long v7 = *(void **)(v5 - 24);
        v5 -= 24;
        long long v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      unint64_t v4 = *(void **)(a1 + 48);
    }
    *(void *)(a1 + 56) = v2;
    operator delete(v4);
  }
  long long v8 = *(void **)(a1 + 24);
  if (v8)
  {
    *(void *)(a1 + 32) = v8;
    operator delete(v8);
  }
  long long v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    operator delete(v9);
  }
  return a1;
}

BOOL sub_3DB764@<W0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W3>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 64) = 0;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  BOOL result = sub_EADC78(a2);
  if (!result)
  {
    long long v14 = 0u;
    long long v15 = 0u;
    int v16 = 1065353216;
    sub_EADD1C(a2);
    uint64_t v8 = *a1;
    uint64_t v9 = sub_EADD1C(a2);
    sub_3BDCD8(v8, *(unsigned int *)(v9 + 32) | ((unint64_t)*(unsigned __int16 *)(v9 + 36) << 32), v11);
    unint64_t v10 = v12;
    if ((v12 & 0x80u) != 0) {
      unint64_t v10 = (unint64_t)v11[1];
    }
    if (v10) {
      sub_26A18((uint64_t)v13, (const char *)v11);
    }
    else {
      sub_26908((uint64_t)v13);
    }
    if ((char)v12 < 0) {
      operator delete(v11[0]);
    }
    sub_480C((uint64_t)v11, a3);
  }
  return result;
}

void sub_3DC594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35)
{
  unint64_t v38 = *(void **)v35;
  if (*(void *)v35)
  {
    *(void *)(v35 + 8) = v38;
    operator delete(v38);
  }
  *(void *)(a15 + 56) = v35;
  if (__p) {
    operator delete(__p);
  }
  sub_1A668(&a26);
  if (a29)
  {
    a30 = (uint64_t)a29;
    operator delete(a29);
  }
  if (a32)
  {
    a33 = (uint64_t)a32;
    operator delete(a32);
  }
  sub_1A668(&a35);
  sub_1A668((void **)(v36 - 120));
  sub_4814(v36 - 224);
  sub_26C4C((const void **)(v36 - 176));
  sub_31B778(v36 - 160);
  sub_3DB6CC(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_3DC780(void *a1, unsigned int *a2, uint64_t *a3, int a4)
{
  int v12 = a4;
  if (*a3 == a3[1]) {
    return 0;
  }
  if (sub_11E64(a1, a2, a3)) {
    return 1;
  }
  uint64_t v8 = 0;
  if (a4 && a4 != 0x7FFFFFFF)
  {
    sub_57CC((uint64_t)a2, &v12, (uint64_t)v11);
    if (sub_11E64(a1, v11, a3))
    {
      uint64_t v8 = 1;
    }
    else
    {
      sub_566C((uint64_t)a2, &v12, (uint64_t)v10);
      uint64_t v8 = sub_11E64(a1, v10, a3);
      sub_4814((uint64_t)v10);
    }
    sub_4814((uint64_t)v11);
  }
  return v8;
}

void sub_3DC864(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_4814((uint64_t)va);
  sub_4814((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_3DC880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_3DC894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_3DC8A8(uint64_t a1, void *a2)
{
  std::string __p = operator new(0x28uLL);
  long long v9 = xmmword_20B9280;
  strcpy((char *)__p, "enable_congestion_zone_calculation");
  BOOL v4 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)a1 = v4;
  std::string __p = operator new(0x20uLL);
  long long v9 = xmmword_20B5EB0;
  strcpy((char *)__p, "min_route_length_in_zone_m");
  *(void *)(a1 + 8) = sub_5CDE0(a2, &__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  std::string __p = operator new(0x30uLL);
  long long v9 = xmmword_20B9A40;
  strcpy((char *)__p, "mark_user_entered_restrictions_on_freeways");
  BOOL v5 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 16) = v5;
  std::string __p = operator new(0x30uLL);
  long long v9 = xmmword_20B9380;
  strcpy((char *)__p, "mark_user_entered_restrictions_on_regular_roads");
  BOOL v6 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 17) = v6;
  return a1;
}

void sub_3DCA3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_3DCA64(uint64_t *a1, void *a2)
{
  *a1 = sub_3750CC(a2);
  a1[1] = sub_375394(a2);
  sub_3E1B78(a1 + 2, a2);
  HIBYTE(v12[2]) = 18;
  strcpy((char *)v12, "RestrictionChecker");
  std::string __p = 0;
  unint64_t v10 = 0;
  uint64_t v11 = 0;
  BOOL v4 = sub_374CDC((uint64_t)a2, (uint64_t)v12, (uint64_t *)&__p);
  sub_3E16A4((uint64_t)(a1 + 8), v4);
  BOOL v5 = (void **)__p;
  if (__p)
  {
    BOOL v6 = v10;
    uint64_t v7 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      uint64_t v7 = __p;
    }
    unint64_t v10 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v12[2]) < 0) {
    operator delete(v12[0]);
  }
  return a1;
}

void sub_3DCB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_1A668(&a10);
  if (a18 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v18 + 63) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else if ((*(char *)(v18 + 63) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v18 + 40));
  _Unwind_Resume(a1);
}

void sub_3DCBC0(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v16[0] = 0;
  v16[1] = 0;
  long long v14 = &v15;
  long long v15 = v16;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  int v13 = 1065353216;
  sub_40EFE8(a2);
  uint64_t v4 = *a1;
  uint64_t v5 = sub_40EFE8(a2);
  sub_3BDCD8(v4, *(unsigned int *)(v5 + 32) | ((unint64_t)*(unsigned __int16 *)(v5 + 36) << 32), __p);
  unint64_t v6 = v9;
  if ((v9 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  if (v6) {
    sub_26A18((uint64_t)v10, (const char *)__p);
  }
  else {
    sub_26908((uint64_t)v10);
  }
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
  sub_480C((uint64_t)__p, *(_DWORD *)(a2 + 512));
}

void sub_3DDE8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  sub_4814((uint64_t)&__p);
  sub_26C4C((const void **)(v47 - 192));
  sub_31B778(v47 - 176);
  int v49 = *(void **)a15;
  if (*(void *)a15)
  {
    *(void *)(a15 + 8) = v49;
    operator delete(v49);
  }
  sub_22EFF4(v47 - 120, *(void **)(v47 - 112));
  _Unwind_Resume(a1);
}

void sub_3DE070(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = (void *)a2;
  *(void *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  if (!sub_EADC78(a2))
  {
    uint64_t v5 = sub_5231C((uint64_t)v3);
    LODWORD(v130) = 0;
    WORD2(v130) = 0;
    BYTE6(v130) = 1;
    unint64_t v6 = sub_EB04C4(v3);
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      uint64_t v111 = (char **)(a3 + 48);
      unint64_t v112 = (char **)(a3 + 24);
      uint64_t v116 = 72;
      uint64_t v117 = 32;
      uint64_t v113 = (uint64_t *)v5;
      unint64_t v114 = v6;
      while (1)
      {
        uint64_t v118 = v7;
        unsigned __int8 v9 = v3;
        unint64_t v120 = v8;
        uint64_t v10 = sub_EB0624(v3, v8);
        uint64_t v11 = *(void *)(v10 + 32);
        uint64_t v129 = v11;
        uint64_t v12 = *a1;
        int v13 = (int *)sub_2D5D58(*a1, v11 & 0xFFFFFFFFFFFFLL);
        long long v14 = (unsigned __int16 *)((char *)v13 - *v13);
        if (*v14 >= 0x41u && v14[32])
        {
          long long v15 = (int *)sub_2D5D58(v12, v11 & 0xFFFFFFFFFFFFLL);
          int v16 = (unsigned __int16 *)((char *)v15 - *v15);
          if (*v16 >= 0x41u && (uint64_t v17 = v16[32]) != 0) {
            uint64_t v18 = (unsigned int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
          }
          else {
            uint64_t v18 = 0;
          }
          sub_3BD900(v18, (v11 & 0xFF000000000000) != 0, 1, (uint64_t)&v131);
          long long v19 = v131;
          long long v20 = v132;
          if (v131)
          {
            long long v21 = v131;
            if (v131 != v132)
            {
              long long v22 = v132;
              do
              {
                if (*((char *)v22 - 1) < 0) {
                  operator delete((void *)*(v22 - 3));
                }
                v22 -= 3;
              }
              while (v22 != v19);
              long long v21 = v131;
            }
            unsigned int v132 = v19;
            operator delete(v21);
          }
          if (v19 != v20) {
            goto LABEL_22;
          }
        }
        if (v120 && sub_3DB1A4(*a1, v11, 0)) {
LABEL_22:
        }
          sub_2D5B74((char **)a3, &v129);
        uint64_t v24 = v113;
        unint64_t v23 = v114;
        uint64_t v3 = v9;
        if (sub_3DA4A8(*a1, v11, 0))
        {
          if (!v130)
          {
            LODWORD(v130) = v129;
            *(_DWORD *)((char *)&v130 + 3) = *(_DWORD *)((char *)&v129 + 3);
          }
        }
        else if (v130)
        {
          uint64_t v25 = *(void *)(sub_EB0624(v9, 0) + 32);
          if (v130 != v25
            || WORD2(v130) != WORD2(v25)
            || ((v25 & 0x1000000000000) == 0) != (BYTE6(v130) == 0))
          {
            sub_2D5B74((char **)a3, &v130);
            uint64_t v131 = *(unint64_t **)(sub_EB0624(v9, v120 - 1) + 32);
            sub_2D5B74((char **)a3, &v131);
            LODWORD(v130) = 0;
            WORD2(v130) = 0;
            BYTE6(v130) = 1;
          }
        }
        if (v120 == sub_EB04C4(v9) - 1) {
          return;
        }
        if (sub_3DB2A8(*a1, v11, 0)) {
          sub_2D5B74((char **)a3, &v129);
        }
        uint64_t v26 = (void *)*a1;
        uint64_t v123 = *(void **)(v10 + 32);
        unsigned int v132 = 0;
        uint64_t v133 = 0;
        uint64_t v131 = 0;
        std::string __p = v26;
        uint64_t v127 = &v123;
        sub_3E1DFC((uint64_t)v26, (uint64_t)v123, (uint64_t)&v131, (uint64_t)&__p);
        uint64_t v27 = v131;
        BOOL v122 = v132;
        unint64_t v28 = v120;
        if (v131 != v132) {
          break;
        }
LABEL_164:
        if (v27)
        {
          unsigned int v132 = v27;
          operator delete(v27);
        }
        unint64_t v8 = v28 + 1;
        --v7;
        v116 += 96;
        v117 += 96;
        if (v8 == v23) {
          return;
        }
      }
      char v121 = 0;
      unint64_t v115 = 0;
      while (1)
      {
        uint64_t v29 = *a1;
        unint64_t v30 = *v27;
        uint64_t v127 = 0;
        uint64_t v128 = 0;
        std::string __p = 0;
        unint64_t v31 = (int *)sub_2DBC9C(v29, v30);
        uint64_t v32 = (unsigned __int16 *)((char *)v31 - *v31);
        if (*v32 >= 7u)
        {
          uint64_t v33 = v32[3];
          if (v33)
          {
            int8x8_t v34 = (unsigned int *)((char *)v31 + v33 + *(unsigned int *)((char *)v31 + v33));
            uint64_t v35 = *v34;
            if (v35)
            {
              uint64_t v36 = 8 * v35;
              unint64_t v37 = (char *)operator new(8 * v35);
              std::string __p = v37;
              uint64_t v127 = (void **)v37;
              uint64_t v128 = &v37[8 * v35];
              unint64_t v38 = (uint64_t *)(v34 + 1);
              do
              {
                uint64_t v39 = *v38;
                unint64_t v40 = HIDWORD(*v38);
                LODWORD(v123) = *v38;
                WORD2(v123) = v40;
                BYTE6(v123) = (v39 & 0xFF000000000000) == 0;
                unint64_t v37 = sub_2D6254((unint64_t *)&__p, v37, (int *)&v123) + 8;
                ++v38;
                v36 -= 8;
              }
              while (v36);
            }
          }
        }
        uint64_t v41 = (void **)__p;
        if (__p == v127)
        {
          int v45 = 5;
          if (!__p) {
            goto LABEL_73;
          }
          goto LABEL_72;
        }
        char v42 = (int *)sub_2DBC9C(*a1, *v27);
        size_t v43 = (unsigned __int16 *)((char *)v42 - *v42);
        unsigned int v44 = *v43;
        if (v44 < 0xF)
        {
          if (v44 < 5) {
            goto LABEL_61;
          }
        }
        else if (v43[7] && (*((unsigned char *)v42 + v43[7]) & 1) == 0)
        {
          goto LABEL_61;
        }
        if (v43[2])
        {
          if (v44 < 9 || *((unsigned __int8 *)v42 + v43[2]) - 6 >= 0xFFFFFFFB) {
            goto LABEL_61;
          }
        }
        else if (v44 < 9)
        {
          goto LABEL_61;
        }
        if (v43[4])
        {
          if ((sub_3DED08(a1, (uint64_t)&__p, v24, v28) & 1) == 0)
          {
            int v45 = 5;
            uint64_t v41 = (void **)__p;
            if (!__p) {
              goto LABEL_73;
            }
            goto LABEL_72;
          }
          uint64_t v47 = (char *)v127 - (unsigned char *)__p;
          if ((char *)v127 - (unsigned char *)__p == 16)
          {
            sub_3DEE84(v112, (_OWORD *)(*v24 + 96 * v28));
            goto LABEL_122;
          }
          if ((unint64_t)v47 < 0x11)
          {
LABEL_122:
            int v45 = 4;
            uint64_t v41 = (void **)__p;
            if (!__p) {
              goto LABEL_73;
            }
            goto LABEL_72;
          }
          uint64_t v57 = 0;
          uint64_t v58 = v47 >> 3;
          uint64_t v123 = 0;
          unsigned int v124 = 0;
          unsigned int v125 = 0;
          while (2)
          {
            uint64_t v60 = *(void *)(sub_EB0624(v9, v57 + v28) + 32);
            unint64_t v61 = v124;
            if (v124 < v125)
            {
              *(void *)unsigned int v124 = v60;
              char v59 = v61 + 8;
              goto LABEL_94;
            }
            uint64_t v62 = (char *)v123;
            uint64_t v63 = (v124 - (unsigned char *)v123) >> 3;
            unint64_t v64 = v63 + 1;
            if ((unint64_t)(v63 + 1) >> 61) {
              sub_2E00();
            }
            uint64_t v65 = v125 - (unsigned char *)v123;
            if ((v125 - (unsigned char *)v123) >> 2 > v64) {
              unint64_t v64 = v65 >> 2;
            }
            if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v66 = v64;
            }
            if (v66)
            {
              if (v66 >> 61) {
                sub_188D718();
              }
              uint64_t v67 = (char *)operator new(8 * v66);
              int v68 = &v67[8 * v63];
              *(void *)int v68 = v60;
              char v59 = v68 + 8;
              if (v61 == v62)
              {
LABEL_110:
                uint64_t v123 = v68;
                unsigned int v124 = v59;
                unsigned int v125 = &v67[8 * v66];
                if (v61) {
                  goto LABEL_111;
                }
                goto LABEL_94;
              }
            }
            else
            {
              uint64_t v67 = 0;
              int v68 = (char *)(8 * v63);
              int v69 = (void *)(8 * v63);
              *int v69 = v60;
              char v59 = (char *)(v69 + 1);
              if (v61 == v62) {
                goto LABEL_110;
              }
            }
            do
            {
              int v70 = *((_DWORD *)v61 - 2);
              v61 -= 8;
              int v71 = *(_DWORD *)(v61 + 3);
              *((_DWORD *)v68 - 2) = v70;
              v68 -= 8;
              *(_DWORD *)(v68 + 3) = v71;
            }
            while (v61 != v62);
            unint64_t v61 = (char *)v123;
            uint64_t v123 = v68;
            unsigned int v124 = v59;
            unsigned int v125 = &v67[8 * v66];
            if (v61) {
LABEL_111:
            }
              operator delete(v61);
LABEL_94:
            unint64_t v28 = v120;
            unsigned int v124 = v59;
            if (++v57 == v58)
            {
              uint64_t v72 = *(void **)(a3 + 56);
              if ((unint64_t)v72 >= *(void *)(a3 + 64))
              {
                uint64_t v24 = v113;
                unint64_t v23 = v114;
                uint64_t v7 = v118;
                unint64_t v28 = v120;
                *(void *)(a3 + 56) = sub_3E3880(v111, (uint64_t)&v123);
                unint64_t v78 = (char *)v123;
                if (!v123) {
                  goto LABEL_122;
                }
              }
              else
              {
                *uint64_t v72 = 0;
                v72[1] = 0;
                v72[2] = 0;
                int32x2_t v73 = v123;
                uint64_t v74 = v124 - (unsigned char *)v123;
                if (v124 != v123)
                {
                  if (v74 < 0) {
                    sub_2E00();
                  }
                  int8x8_t v75 = (char *)operator new(v124 - (unsigned char *)v123);
                  *uint64_t v72 = v75;
                  v72[1] = v75;
                  int64x2_t v76 = &v75[8 * (v74 >> 3)];
                  v72[2] = v76;
                  memcpy(v75, v73, v74 - 1);
                  v72[1] = v76;
                }
                uint64_t v77 = v72 + 3;
                uint64_t v7 = v118;
                *(void *)(a3 + 56) = v72 + 3;
                uint64_t v24 = v113;
                unint64_t v23 = v114;
                unint64_t v28 = v120;
                *(void *)(a3 + 56) = v77;
                unint64_t v78 = (char *)v123;
                if (!v123) {
                  goto LABEL_122;
                }
              }
              unsigned int v124 = v78;
              operator delete(v78);
              goto LABEL_122;
            }
            continue;
          }
        }
LABEL_61:
        char v48 = (int *)sub_2DBC9C(*a1, *v27);
        int v49 = (unsigned __int16 *)((char *)v48 - *v48);
        unsigned int v50 = *v49;
        if (v50 < 0xF)
        {
          if (v50 < 5) {
            goto LABEL_71;
          }
        }
        else if (v49[7] && (*((unsigned char *)v48 + v49[7]) & 1) == 0)
        {
          goto LABEL_71;
        }
        if (v49[2])
        {
          if (v50 >= 9 && *((unsigned char *)v48 + v49[2]) == 1)
          {
            int v52 = v49[4];
            BOOL v53 = v52 == 0;
            BOOL v54 = v52 != 0;
            char v55 = v53;
            char v56 = v55 | v121;
            if (v53) {
              int v45 = 0;
            }
            else {
              int v45 = 5;
            }
            if (v56)
            {
              v121 |= v54;
              uint64_t v41 = (void **)__p;
              if (!__p) {
                goto LABEL_73;
              }
              goto LABEL_72;
            }
            if (v118 + 1 - 0x5555555555555555 * ((v24[1] - *v24) >> 5) < (unint64_t)(((char *)v127
                                                                                              - (unsigned char *)__p) >> 3)
              || (sub_3DED08(a1, (uint64_t)&__p, v24, v28) & 1) != 0)
            {
              int v45 = 5;
              char v121 = 1;
              uint64_t v41 = (void **)__p;
              if (!__p) {
                goto LABEL_73;
              }
              goto LABEL_72;
            }
            uint64_t v79 = (char *)v127 - (unsigned char *)__p;
            if ((char *)v127 - (unsigned char *)__p == 16)
            {
              unint64_t v80 = 1;
LABEL_128:
              char v121 = 0;
              int v45 = 0;
              unint64_t v84 = v115;
              if (v115 <= v80) {
                unint64_t v84 = v80;
              }
              unint64_t v115 = v84;
              uint64_t v41 = (void **)__p;
              if (!__p) {
                goto LABEL_73;
              }
LABEL_72:
              uint64_t v127 = v41;
              operator delete(v41);
              goto LABEL_73;
            }
            uint64_t v81 = *v24;
            uint64_t v82 = *(void *)(*v24 + 96 * v28 + 32);
            if (__PAIR64__(*((unsigned __int16 *)__p + 2), *(_DWORD *)__p) == __PAIR64__(WORD2(v82), v82)
              && ((v82 & 0x1000000000000) == 0) == (*((unsigned char *)__p + 6) == 0))
            {
              uint64_t v83 = v79 >> 3;
              if ((unint64_t)(v79 >> 3) <= 1) {
                uint64_t v85 = 1;
              }
              else {
                uint64_t v85 = v79 >> 3;
              }
              if ((unint64_t)v79 >= 0x10)
              {
                uint64_t v86 = 0;
                unint64_t v87 = (v24[1] - v81) / 96;
                uint64_t v88 = v85 - 1;
                uint64_t v89 = (char *)__p + 14;
                uint64_t v90 = (void *)(v81 + v116);
                if (v87 <= v28) {
                  unint64_t v87 = v28;
                }
                uint64_t v91 = v7 + v87;
                uint64_t v92 = 1;
                while (v91 != v86)
                {
                  if (__PAIR64__(*((unsigned __int16 *)v89 - 1), *(_DWORD *)(v89 - 6)) != __PAIR64__((unsigned __int16)WORD2(*v90), *v90))
                  {
                    uint64_t v83 = v92;
                    goto LABEL_127;
                  }
                  if (((*v90 & 0x1000000000000) == 0) != (*v89 == 0))
                  {
                    uint64_t v83 = v86 + 1;
                    goto LABEL_127;
                  }
                  ++v92;
                  ++v86;
                  v89 += 8;
                  v90 += 12;
                  if (v88 == v86) {
                    goto LABEL_127;
                  }
                }
                goto LABEL_126;
              }
            }
            else
            {
LABEL_126:
              uint64_t v83 = 0;
            }
LABEL_127:
            unint64_t v80 = v83 + 1;
            goto LABEL_128;
          }
        }
LABEL_71:
        int v45 = 0;
        uint64_t v41 = (void **)__p;
        if (__p) {
          goto LABEL_72;
        }
LABEL_73:
        if ((v45 == 5 || !v45) && ++v27 != v122) {
          continue;
        }
        uint64_t v3 = v9;
        if (!(v121 & 1 | (v115 == 0)))
        {
          if (v115 != 1)
          {
            std::string __p = 0;
            uint64_t v127 = 0;
            uint64_t v128 = 0;
            if (v115 >> 61) {
              sub_2E00();
            }
            unint64_t v93 = (char *)operator new(8 * v115);
            uint64_t v94 = (void **)&v93[8 * v115];
            std::string __p = v93;
            uint64_t v128 = (char *)v94;
            memset_pattern16(v93, &unk_20E6E70, 8 * v115);
            uint64_t v95 = 0;
            uint64_t v96 = 0;
            uint64_t v127 = v94;
            uint64_t v97 = v117;
            do
            {
              uint64_t v98 = v24[1];
              unint64_t v99 = 0xAAAAAAAAAAAAAAABLL * ((v98 - *v24) >> 5);
              long long v100 = (uint64_t *)(v98 - 24);
              if (v28 + v96 == v99) {
                uint64_t v101 = v100;
              }
              else {
                uint64_t v101 = (uint64_t *)(*v24 + v97);
              }
              uint64_t v102 = *v101;
              uint64_t v103 = (char *)__p + v95;
              *(_DWORD *)uint64_t v103 = v102;
              v103[6] = BYTE6(v102);
              *((_WORD *)v103 + 2) = WORD2(v102);
              ++v96;
              v97 += 96;
              v95 += 8;
            }
            while (v115 != v96);
            int v104 = *(void **)(a3 + 56);
            if ((unint64_t)v104 >= *(void *)(a3 + 64))
            {
              uint64_t v3 = v9;
              unint64_t v28 = v120;
              *(void *)(a3 + 56) = sub_3E3880(v111, (uint64_t)&__p);
              uint64_t v110 = (void **)__p;
              if (!__p) {
                goto LABEL_163;
              }
            }
            else
            {
              *int v104 = 0;
              v104[1] = 0;
              v104[2] = 0;
              uint64_t v105 = __p;
              uint64_t v106 = (char *)v127 - (unsigned char *)__p;
              if (v127 != __p)
              {
                if (v106 < 0) {
                  sub_2E00();
                }
                unsigned int v107 = (char *)operator new((char *)v127 - (unsigned char *)__p);
                *int v104 = v107;
                v104[1] = v107;
                unsigned int v108 = &v107[8 * (v106 >> 3)];
                v104[2] = v108;
                memcpy(v107, v105, v106 - 1);
                v104[1] = v108;
              }
              BOOL v109 = v104 + 3;
              uint64_t v7 = v118;
              *(void *)(a3 + 56) = v104 + 3;
              unint64_t v23 = v114;
              unint64_t v28 = v120;
              uint64_t v3 = v9;
              *(void *)(a3 + 56) = v109;
              uint64_t v110 = (void **)__p;
              if (!__p) {
                goto LABEL_163;
              }
            }
            uint64_t v127 = v110;
            operator delete(v110);
            goto LABEL_163;
          }
          sub_3DEE84(v112, (_OWORD *)(*v24 + 96 * v28));
        }
LABEL_163:
        uint64_t v27 = v131;
        goto LABEL_164;
      }
    }
  }
}

void sub_3DEB4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  unint64_t v30 = *(void **)v27;
  if (*(void *)v27)
  {
    *(void *)(v27 + 8) = v30;
    operator delete(v30);
  }
  *(void *)(a19 + 56) = v27;
  if (__p) {
    operator delete(__p);
  }
  unint64_t v31 = *(void **)(v28 - 112);
  if (v31)
  {
    *(void *)(v28 - 104) = v31;
    operator delete(v31);
  }
  sub_3DB6CC(a19);
  _Unwind_Resume(a1);
}

uint64_t sub_3DED08(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v7 = *a3;
  uint64_t v6 = a3[1];
  if (a4 + (((uint64_t)v4 - *(void *)a2) >> 3) > 0xAAAAAAAAAAAAAAABLL * ((v6 - *a3) >> 5) + 1) {
    return 0;
  }
  if (v7 + 96 * a4 != v6 && v5 != v4)
  {
    uint64_t v12 = v7 + 96 * a4 + 96;
    while (1)
    {
      uint64_t v13 = *(void *)(v12 - 64);
      if ((v13 & 0xFFFFFFFFFFFFLL) != (*v5 & 0xFFFFFFFFFFFFLL)
        || ((v13 & 0xFF000000000000) == 0) == (HIWORD(*v5) & 1))
      {
        long long v14 = (int *)sub_2D5D58(*a1, v13 & 0xFFFFFFFFFFFFLL);
        long long v15 = (unsigned __int16 *)((char *)v14 - *v14);
        if (*v15 < 0xBu || (uint64_t v16 = v15[5]) == 0 || (*((unsigned char *)v14 + v16 + 2) & 1) == 0)
        {
LABEL_16:
          uint64_t v4 = *(void **)(a2 + 8);
          break;
        }
        uint64_t v6 = a3[1];
        uint64_t v4 = *(void **)(a2 + 8);
      }
      else
      {
        ++v5;
      }
      if (v12 != v6)
      {
        v12 += 96;
        if (v5 != v4) {
          continue;
        }
      }
      goto LABEL_16;
    }
  }
  if (v5 != v4)
  {
    if (v5 == v4 - 1)
    {
      uint64_t v17 = *(void *)(a3[1] - 24);
      if ((v17 & 0xFFFFFFFFFFFFLL) == (*v5 & 0xFFFFFFFFFFFFLL)) {
        return ((v17 & 0xFF000000000000) == 0) ^ HIWORD(*v5) & 1;
      }
    }
    return 0;
  }
  return 1;
}

char *sub_3DEE84(char **a1, _OWORD *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v11 = *a1;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 5);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0x2AAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)v11) >> 5);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x155555555555555) {
      unint64_t v15 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 > 0x2AAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      uint64_t v16 = (char *)operator new(96 * v15);
    }
    else
    {
      uint64_t v16 = 0;
    }
    long long v17 = a2[3];
    uint64_t v18 = &v16[96 * v12];
    *((_OWORD *)v18 + 2) = a2[2];
    *((_OWORD *)v18 + 3) = v17;
    long long v19 = a2[5];
    *((_OWORD *)v18 + 4) = a2[4];
    *((_OWORD *)v18 + 5) = v19;
    long long v20 = a2[1];
    *(_OWORD *)uint64_t v18 = *a2;
    *((_OWORD *)v18 + 1) = v20;
    uint64_t v10 = v18 + 96;
    if (v5 != v11)
    {
      do
      {
        long long v21 = *((_OWORD *)v5 - 5);
        *((_OWORD *)v18 - 6) = *((_OWORD *)v5 - 6);
        *((_OWORD *)v18 - 5) = v21;
        long long v22 = *((_OWORD *)v5 - 4);
        long long v23 = *((_OWORD *)v5 - 3);
        long long v24 = *((_OWORD *)v5 - 2);
        *(_OWORD *)(v18 - 20) = *(_OWORD *)(v5 - 20);
        *((_OWORD *)v18 - 3) = v23;
        *((_OWORD *)v18 - 2) = v24;
        *((_OWORD *)v18 - 4) = v22;
        v18 -= 96;
        v5 -= 96;
      }
      while (v5 != v11);
      uint64_t v5 = *a1;
    }
    *a1 = v18;
    a1[1] = v10;
    a1[2] = &v16[96 * v15];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    long long v6 = a2[1];
    *(_OWORD *)uint64_t v5 = *a2;
    *((_OWORD *)v5 + 1) = v6;
    long long v7 = a2[2];
    long long v8 = a2[3];
    long long v9 = a2[5];
    *((_OWORD *)v5 + 4) = a2[4];
    *((_OWORD *)v5 + 5) = v9;
    *((_OWORD *)v5 + 2) = v7;
    *((_OWORD *)v5 + 3) = v8;
    uint64_t v10 = v5 + 96;
  }
  a1[1] = v10;
  return v10 - 96;
}

BOOL sub_3DEFE8@<W0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W3>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 64) = 0;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  BOOL result = sub_EADC78(a2);
  if (!result)
  {
    long long v15 = 0u;
    long long v14 = 0u;
    int v16 = 1065353216;
    sub_EADD1C(a2);
    uint64_t v8 = *a1;
    uint64_t v9 = sub_EADD1C(a2);
    sub_3BDCD8(v8, *(unsigned int *)(v9 + 32) | ((unint64_t)*(unsigned __int16 *)(v9 + 36) << 32), v11);
    unint64_t v10 = v12;
    if ((v12 & 0x80u) != 0) {
      unint64_t v10 = (unint64_t)v11[1];
    }
    if (v10) {
      sub_26A18((uint64_t)v13, (const char *)v11);
    }
    else {
      sub_26908((uint64_t)v13);
    }
    if ((char)v12 < 0) {
      operator delete(v11[0]);
    }
    sub_480C((uint64_t)v11, a3);
  }
  return result;
}

void sub_3E0188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
  char v42 = *(void **)v39;
  if (*(void *)v39)
  {
    *(void *)(v39 + 8) = v42;
    operator delete(v42);
  }
  *(void *)(a18 + 56) = v39;
  if (__p) {
    operator delete(__p);
  }
  sub_1A668(&a28);
  if (a31)
  {
    a32 = (uint64_t)a31;
    operator delete(a31);
  }
  if (a35)
  {
    a36 = (uint64_t)a35;
    operator delete(a35);
  }
  sub_1A668(&a39);
  sub_1A668((void **)(v40 - 120));
  sub_4814(v40 - 224);
  sub_26C4C((const void **)(v40 - 176));
  sub_31B778(v40 - 160);
  sub_3DB6CC(a18);
  _Unwind_Resume(a1);
}

void sub_3E03C4(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  if (!*(unsigned char *)(a1 + 64)) {
    return;
  }
  sub_46C7A0(a2, v44);
  sub_46C7C4((uint64_t)a2, v43);
  sub_3E084C(v44, (uint64_t)v43, &v45);
  sub_46C7C4((uint64_t)a2, v38);
  long long v6 = v46;
  unint64_t v7 = v47;
  long long v8 = v39;
  if (!v46)
  {
    if (!(void)v39) {
      return;
    }
    BOOL v10 = 0;
LABEL_8:
    unint64_t v11 = sub_46C760((void *)v8);
    if (*((void *)&v8 + 1) < v11 && v10)
    {
      uint64_t v13 = sub_46C8EC(v6, v7);
      if (v13 == sub_46C8EC((void *)v8, *((uint64_t *)&v8 + 1))) {
        return;
      }
    }
    else if (((v10 ^ (*((void *)&v8 + 1) < v11)) & 1) == 0)
    {
      return;
    }
    goto LABEL_15;
  }
  unint64_t v9 = sub_46C760(v46);
  BOOL v10 = v7 < v9;
  if ((void)v8) {
    goto LABEL_8;
  }
  if (v7 >= v9) {
    return;
  }
LABEL_15:
  unint64_t v14 = v47;
  sub_46C7C4((uint64_t)a2, v41);
  uint64_t v15 = v14 - v42;
  __n128 v16 = 0uLL;
  *(_OWORD *)unint64_t v38 = 0u;
  long long v39 = 0u;
  int v40 = 1065353216;
  *(_OWORD *)std::string __p = 0u;
  long long v36 = 0u;
  int v37 = 1065353216;
  uint64_t v17 = v14 - v42;
  if (v14 == v42)
  {
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v19 = 0;
    do
    {
      uint64_t v20 = sub_46C8EC(a2, v19);
      sub_3E09A8(v20, (uint64_t)&v32);
      long long v21 = v32;
      long long v22 = v33;
      if (v32 != v33)
      {
        do
        {
          *(void *)&long long v31 = v19;
          *((void *)&v31 + 1) = v19;
          *((void *)sub_3E3A78((uint64_t)__p, v21, v21, &v31) + 4) = v19;
          ++v21;
        }
        while (v21 != v22);
        long long v21 = v32;
      }
      if (v21)
      {
        uint64_t v33 = v21;
        operator delete(v21);
      }
      ++v19;
    }
    while (v19 != v17);
    uint64_t v18 = (void *)v36;
    uint64_t v32 = (void *)a1;
    uint64_t v33 = a2;
    int8x8_t v34 = v38;
    if ((void)v36) {
      sub_3E56A4((uint64_t)&v32, (unint64_t *)(v36 + 16));
    }
  }
  if (*((void *)&v36 + 1))
  {
    for (; v18; uint64_t v18 = (void *)*v18)
      sub_3E0B08((uint64_t *)a1, (uint64_t)(v18 + 2), a2, v15 - 1, (unint64_t **)a3);
    long long v23 = *(_OWORD **)(a3 + 8);
    unint64_t v24 = 126 - 2 * __clz(((uint64_t)v23 - *(void *)a3) >> 5);
    if (v23 == *(_OWORD **)a3) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = v24;
    }
    sub_3E3DE0(*(void *)a3, v23, (uint64_t)&v32, v25, 1, v16);
    uint64_t v18 = (void *)v36;
  }
  if (v18)
  {
    do
    {
      uint64_t v26 = (void *)*v18;
      operator delete(v18);
      uint64_t v18 = v26;
    }
    while (v26);
  }
  uint64_t v27 = __p[0];
  __p[0] = 0;
  if (v27) {
    operator delete(v27);
  }
  uint64_t v28 = (void *)v39;
  if ((void)v39)
  {
    do
    {
      uint64_t v29 = (void *)*v28;
      sub_25F44((uint64_t)(v28 + 2));
      operator delete(v28);
      uint64_t v28 = v29;
    }
    while (v29);
  }
  unint64_t v30 = v38[0];
  v38[0] = 0;
  if (v30) {
    operator delete(v30);
  }
}

void sub_3E07B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  sub_12168((uint64_t)&a15);
  sub_31B778((uint64_t)&a21);
  long long v23 = *(void **)v21;
  if (!*(void *)v21) {
    _Unwind_Resume(a1);
  }
  *(void *)(v21 + 8) = v23;
  operator delete(v23);
  _Unwind_Resume(a1);
}

__n128 sub_3E084C@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  for (unint64_t i = a1[1].n128_u64[1]; ; a1[1].n128_u64[1] = i)
  {
    unint64_t v7 = (void *)a1[1].n128_u64[0];
    unint64_t v9 = *(void **)(a2 + 16);
    unint64_t v8 = *(void *)(a2 + 24);
    if (!v7) {
      break;
    }
    unint64_t v10 = sub_46C760((void *)a1[1].n128_u64[0]);
    unint64_t v11 = v10;
    if (v9)
    {
      unint64_t v12 = sub_46C760(v9);
      if (i >= v11 || v8 >= v12)
      {
        if (i < v11 == v8 < v12) {
          goto LABEL_27;
        }
      }
      else
      {
        uint64_t v14 = sub_46C8EC(v7, i);
        if (v14 == sub_46C8EC(v9, v8)) {
          goto LABEL_27;
        }
      }
    }
    else if (i >= v10)
    {
      goto LABEL_27;
    }
LABEL_19:
    uint64_t v15 = (int **)sub_46C8EC((void *)a1[1].n128_u64[0], a1[1].n128_u64[1] - 1);
    __n128 v16 = (char *)*v15;
    uint64_t v17 = (unsigned __int16 *)((char *)*v15 - **v15);
    unsigned int v18 = *v17;
    if (*((unsigned char *)v15 + 38))
    {
      if (v18 >= 0xB)
      {
        unsigned int v19 = v17[5];
        if (v19)
        {
          if ((*(_DWORD *)&v16[v19] & 2) != 0) {
            goto LABEL_27;
          }
        }
      }
    }
    else if (v18 >= 0xB)
    {
      unsigned int v20 = v17[5];
      if (v20)
      {
        if (*(_DWORD *)&v16[v20]) {
          goto LABEL_27;
        }
      }
    }
    unint64_t i = a1[1].n128_u64[1] - 1;
  }
  if (v9 && v8 < sub_46C760(*(void **)(a2 + 16))) {
    goto LABEL_19;
  }
LABEL_27:
  __n128 result = *a1;
  __n128 v22 = a1[1];
  *a3 = *a1;
  a3[1] = v22;
  return result;
}

void sub_3E09A8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(int **)(a1 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = -v4;
  long long v6 = (unsigned __int16 *)((char *)v3 - v4);
  if (*v6 >= 0x17u)
  {
    uint64_t v7 = v6[11];
    if (v7)
    {
      unint64_t v8 = (unsigned int *)((char *)v3 + v7);
      uint64_t v9 = *v8;
      unint64_t v11 = (void *)((char *)v8 + v9 + 4);
      uint64_t v10 = *(unsigned int *)((char *)v8 + v9);
      if (v10)
      {
        uint64_t v13 = 8 * v10;
        do
        {
          sub_3E35D0(a2, v11++);
          v13 -= 8;
        }
        while (v13);
        uint64_t v3 = *(int **)(a1 + 8);
        uint64_t v5 = -(uint64_t)*v3;
      }
    }
  }
  long long v23 = 0;
  unint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v14 = (unsigned __int16 *)((char *)v3 + v5);
  if (*v14 >= 0x19u)
  {
    uint64_t v15 = v14[12];
    if (v15)
    {
      __n128 v16 = (unsigned int *)((char *)v3 + v15);
      uint64_t v17 = *v16;
      unsigned int v19 = (void *)((char *)v16 + v17 + 4);
      uint64_t v18 = *(unsigned int *)((char *)v16 + v17);
      if (v18)
      {
        uint64_t v20 = 8 * v18;
        do
        {
          sub_3E35D0((uint64_t)&v23, v19++);
          v20 -= 8;
        }
        while (v20);
        __n128 v22 = v23;
        uint64_t v21 = v24;
        uint64_t v26 = (void **)a2;
        if (v23 != v24)
        {
          do
            sub_2A98DC(&v26, v22++);
          while (v22 != v21);
          uint64_t v21 = v23;
        }
        if (v21)
        {
          unint64_t v24 = v21;
          operator delete(v21);
        }
      }
    }
  }
}

void sub_3E0AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  unint64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_3E0B08(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4, unint64_t **a5)
{
  unint64_t v7 = *(void *)a2;
  unint64_t v8 = (int *)sub_3E2234(a1[1], *(void *)a2);
  uint64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v9 < 7u || (uint64_t v10 = v9[3]) == 0)
  {
    BOOL v12 = 1;
    goto LABEL_6;
  }
  unsigned int v11 = *((unsigned __int8 *)v8 + v10);
  if (v11 <= 2)
  {
    BOOL v12 = (v11 & 7) == 0;
LABEL_6:
    BOOL v109 = v12;
    goto LABEL_7;
  }
  BOOL v109 = 0;
LABEL_7:
  uint64_t v13 = *a1;
  uint64_t v14 = sub_40EFE8((uint64_t)a3);
  sub_2954EC(v13, *(void *)(v14 + 32), (uint64_t)&v131);
  sub_2E4B5C((uint64_t)&v131, &v133);
  if ((void)v132)
  {
    *((void *)&v132 + 1) = v132;
    operator delete((void *)v132);
  }
  unsigned int v15 = sub_46CABC((uint64_t)a3);
  sub_32F08((uint64_t *)&v133, 1, 0, &v131, 1.0);
  sub_32F08((uint64_t *)&v131, 0, 0, __p, fmin((double)v15 / -1000000000.0 + 1.0, 1.0));
  if (v131)
  {
    *(void *)&long long v132 = v131;
    operator delete(v131);
  }
  if ((void)v133)
  {
    *((void *)&v133 + 1) = v133;
    operator delete((void *)v133);
  }
  __n128 v16 = *(_DWORD **)__p;
  long long v133 = *(_OWORD *)__p;
  uint64_t v134 = *(void *)&__p[16];
  uint64_t v17 = (void *)a1[1];
  *(void *)std::string __p = *(void *)a2;
  uint64_t v131 = v17;
  *(void *)&long long v132 = __p;
  unsigned int v111 = sub_3E272C((uint64_t)v17 + 3888, v16, &v131);
  uint64_t v18 = *a1;
  uint64_t v19 = sub_46C8EC(a3, a4);
  sub_2954EC(v18, *(void *)(v19 + 32), (uint64_t)&v131);
  sub_2E4B5C((uint64_t)&v131, __p);
  if ((void)v132)
  {
    *((void *)&v132 + 1) = v132;
    operator delete((void *)v132);
  }
  if (a4 + 1 == sub_46C760(a3))
  {
    unsigned int v20 = sub_46CAC4((uint64_t)a3);
    sub_31854((uint64_t *)__p, 0, &v131, 0.0, (double)v20 / 1000000000.0);
    if (*(void *)__p)
    {
      *(void *)&__p[8] = *(void *)__p;
      operator delete(*(void **)__p);
    }
    *(void *)std::string __p = v131;
    *(_OWORD *)&__p[8] = v132;
    uint64_t v21 = v132;
  }
  else
  {
    uint64_t v21 = *(void *)&__p[8];
  }
  __n128 v22 = (void *)a1[1];
  uint64_t v127 = *(void **)a2;
  uint64_t v131 = v22;
  *(void *)&long long v132 = &v127;
  char v108 = sub_3E272C((uint64_t)v22 + 3888, (_DWORD *)(v21 - 12), &v131);
  if (a4 == -1) {
    goto LABEL_139;
  }
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = v111 - 1;
  uint64_t v115 = v7;
  uint64_t v116 = a3;
  unint64_t v112 = v7;
  uint64_t v117 = a1;
  while (2)
  {
    uint64_t v120 = v23;
    uint64_t v26 = sub_46C8EC(a3, v23);
    uint64_t v127 = 0;
    uint64_t v128 = 0;
    uint64_t v129 = 0;
    uint64_t v28 = *(int **)(v26 + 8);
    uint64_t v29 = *v28;
    uint64_t v30 = -v29;
    long long v31 = (unsigned __int16 *)((char *)v28 - v29);
    uint64_t v119 = v24;
    if (*v31 < 0x17u
      || (uint64_t v32 = v31[11]) == 0
      || (uint64_t v33 = (unsigned int *)((char *)v28 + v32),
          uint64_t v34 = *v33,
          long long v36 = (uint64_t *)((char *)v33 + v34 + 4),
          uint64_t v35 = *(unsigned int *)((char *)v33 + v34),
          !v35))
    {
      long long v39 = 0;
      unsigned int v124 = 0;
      unsigned int v125 = 0;
      BOOL v126 = 0;
      char v56 = (unsigned __int16 *)((char *)v28 + v30);
      if (*v56 >= 0x19u) {
        goto LABEL_55;
      }
LABEL_86:
      unint64_t v64 = 0;
      uint64_t v82 = (char *)v127;
      uint64_t v83 = v39;
      if (v127 == v39) {
        goto LABEL_95;
      }
      goto LABEL_91;
    }
    uint64_t v113 = v25;
    int v37 = 0;
    unint64_t v38 = 0;
    long long v39 = 0;
    int v40 = &v36[v35];
    do
    {
      while (v39 < v38)
      {
        uint64_t v41 = *v36++;
        *(void *)&long long v27 = v41;
        *(void *)long long v39 = v41;
        v39 += 8;
        uint64_t v128 = v39;
        if (v36 == v40) {
          goto LABEL_85;
        }
      }
      uint64_t v42 = (v39 - v37) >> 3;
      unint64_t v43 = v42 + 1;
      if ((unint64_t)(v42 + 1) >> 61) {
        sub_2E00();
      }
      if ((v38 - v37) >> 2 > v43) {
        unint64_t v43 = (v38 - v37) >> 2;
      }
      if ((unint64_t)(v38 - v37) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v44 = v43;
      }
      if (v44 >> 61) {
        sub_188D718();
      }
      __n128 v45 = operator new(8 * v44);
      BOOL v46 = (uint64_t *)&v45[8 * v42];
      *(void *)&long long v27 = *v36;
      *BOOL v46 = *v36;
      unint64_t v47 = (char *)(v46 + 1);
      if (v39 != v37)
      {
        unint64_t v48 = v39 - 8 - v37;
        if (v48 < 0x168)
        {
          int v49 = v39;
          goto LABEL_39;
        }
        if (&v45[v39 - v37 - 8 - (v48 & 0xFFFFFFFFFFFFFFF8)] > &v45[v39 - v37 - 8])
        {
          int v49 = v39;
          do
          {
LABEL_39:
            uint64_t v50 = *((void *)v49 - 1);
            v49 -= 8;
            *--BOOL v46 = v50;
          }
          while (v49 != v37);
          goto LABEL_40;
        }
        if (&v39[-(v48 & 0xFFFFFFFFFFFFFFF8) - 8] > v39 - 8)
        {
          int v49 = v39;
          goto LABEL_39;
        }
        if ((unint64_t)(v37 - v45) < 0x20)
        {
          int v49 = v39;
          goto LABEL_39;
        }
        uint64_t v51 = (v48 >> 3) + 1;
        uint64_t v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
        int v49 = &v39[-v52];
        BOOL v46 = (uint64_t *)((char *)v46 - v52);
        BOOL v53 = &v45[8 * v42 - 16];
        BOOL v54 = (long long *)(v39 - 16);
        uint64_t v55 = v51 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v27 = *v54;
          *(v53 - 1) = *(v54 - 1);
          *BOOL v53 = v27;
          v53 -= 2;
          v54 -= 2;
          v55 -= 4;
        }
        while (v55);
        if (v51 != (v51 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_39;
        }
      }
LABEL_40:
      unint64_t v38 = &v45[8 * v44];
      uint64_t v127 = v46;
      uint64_t v128 = v47;
      uint64_t v129 = v38;
      if (v37) {
        operator delete(v37);
      }
      int v37 = (char *)v46;
      long long v39 = v47;
      uint64_t v128 = v47;
      ++v36;
    }
    while (v36 != v40);
LABEL_85:
    uint64_t v28 = *(int **)(v26 + 8);
    uint64_t v81 = -(uint64_t)*v28;
    unint64_t v7 = v112;
    uint64_t v25 = v113;
    unsigned int v124 = 0;
    unsigned int v125 = 0;
    BOOL v126 = 0;
    char v56 = (unsigned __int16 *)((char *)v28 + v81);
    if (*v56 < 0x19u) {
      goto LABEL_86;
    }
LABEL_55:
    uint64_t v57 = v56[12];
    if (!v57) {
      goto LABEL_86;
    }
    uint64_t v114 = v25;
    uint64_t v58 = (unsigned int *)((char *)v28 + v57);
    uint64_t v59 = *v58;
    unint64_t v61 = (uint64_t *)((char *)v58 + v59 + 4);
    uint64_t v60 = *(unsigned int *)((char *)v58 + v59);
    if (v60)
    {
      uint64_t v62 = 0;
      uint64_t v63 = 0;
      unint64_t v64 = 0;
      uint64_t v65 = &v61[v60];
      while (1)
      {
        while (v64 < v63)
        {
          uint64_t v66 = *v61++;
          *(void *)&long long v27 = v66;
          *(void *)unint64_t v64 = v66;
          v64 += 8;
          unsigned int v125 = v64;
          if (v61 == v65) {
            goto LABEL_88;
          }
        }
        uint64_t v67 = (v64 - v62) >> 3;
        unint64_t v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 61) {
          sub_2E00();
        }
        if ((v63 - v62) >> 2 > v68) {
          unint64_t v68 = (v63 - v62) >> 2;
        }
        if ((unint64_t)(v63 - v62) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v69 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v69 = v68;
        }
        if (v69 >> 61) {
          sub_188D718();
        }
        int v70 = operator new(8 * v69);
        int v71 = &v70[8 * v67];
        *(void *)&long long v27 = *v61;
        *(void *)int v71 = *v61;
        uint64_t v72 = v71 + 8;
        if (v64 == v62) {
          goto LABEL_71;
        }
        unint64_t v73 = v64 - 8 - v62;
        if (v73 >= 0x168)
        {
          if (&v70[v64 - v62 - 8 - (v73 & 0xFFFFFFFFFFFFFFF8)] > &v70[v64 - v62 - 8])
          {
            uint64_t v74 = v64;
          }
          else if (&v64[-(v73 & 0xFFFFFFFFFFFFFFF8) - 8] > v64 - 8)
          {
            uint64_t v74 = v64;
          }
          else if ((unint64_t)(v62 - v70) >= 0x20)
          {
            uint64_t v76 = (v73 >> 3) + 1;
            uint64_t v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v74 = &v64[-v77];
            v71 -= v77;
            unint64_t v78 = &v70[8 * v67 - 16];
            uint64_t v79 = v64 - 16;
            uint64_t v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v27 = *(_OWORD *)v79;
              *(v78 - 1) = *((_OWORD *)v79 - 1);
              *unint64_t v78 = v27;
              v78 -= 2;
              v79 -= 32;
              v80 -= 4;
            }
            while (v80);
            if (v76 == (v76 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_71;
            }
          }
          else
          {
            uint64_t v74 = v64;
          }
        }
        else
        {
          uint64_t v74 = v64;
        }
        do
        {
          uint64_t v75 = *((void *)v74 - 1);
          v74 -= 8;
          *((void *)v71 - 1) = v75;
          v71 -= 8;
        }
        while (v74 != v62);
LABEL_71:
        uint64_t v63 = &v70[8 * v69];
        unsigned int v124 = v71;
        unsigned int v125 = v72;
        BOOL v126 = v63;
        if (v62) {
          operator delete(v62);
        }
        uint64_t v62 = v71;
        unint64_t v64 = v72;
        unsigned int v125 = v72;
        if (++v61 == v65)
        {
LABEL_88:
          uint64_t v82 = (char *)v127;
          long long v39 = v128;
          unint64_t v7 = v112;
          uint64_t v25 = v114;
          uint64_t v83 = v128;
          if (v127 == v128) {
            goto LABEL_95;
          }
          goto LABEL_91;
        }
      }
    }
    unint64_t v64 = 0;
    uint64_t v25 = v114;
    uint64_t v82 = (char *)v127;
    uint64_t v83 = v39;
    if (v127 == v39) {
      goto LABEL_95;
    }
LABEL_91:
    uint64_t v83 = v82;
    while (*(_DWORD *)v83 != *(_DWORD *)a2 || *((_DWORD *)v83 + 1) != *(_DWORD *)(a2 + 4))
    {
      v83 += 8;
      if (v83 == v39) {
        goto LABEL_109;
      }
    }
LABEL_95:
    if (v83 == v39)
    {
LABEL_109:
      unint64_t v84 = v117;
      unint64_t v85 = v120;
      uint64_t v89 = v124;
      uint64_t v90 = v64;
      if (v124 == v64) {
        goto LABEL_114;
      }
LABEL_110:
      uint64_t v90 = v89;
      while (*(_DWORD *)v90 != *(_DWORD *)a2 || *((_DWORD *)v90 + 1) != *(_DWORD *)(a2 + 4))
      {
        v90 += 8;
        if (v90 == v64) {
          goto LABEL_118;
        }
      }
      goto LABEL_114;
    }
    unint64_t v84 = v117;
    unint64_t v85 = v120;
    if (v25 == -1)
    {
      sub_2954EC(*v117, *(void *)(v26 + 32), (uint64_t)&v131);
      sub_2E4B5C((uint64_t)&v131, &v122);
      if ((void)v132)
      {
        *((void *)&v132 + 1) = v132;
        operator delete((void *)v132);
      }
      uint64_t v86 = (void *)v117[1];
      unint64_t v87 = &v123;
      if (v120 == a4) {
        unint64_t v87 = (void **)&__p[8];
      }
      uint64_t v88 = (char *)*v87 - 12;
      unint64_t v138 = *(void *)a2;
      uint64_t v131 = v86;
      *(void *)&long long v132 = &v138;
      if (sub_3E272C((uint64_t)v86 + 3888, v88, &v131)) {
        uint64_t v25 = v120;
      }
      else {
        uint64_t v25 = -1;
      }
      if (v122)
      {
        uint64_t v123 = v122;
        operator delete(v122);
      }
      unint64_t v64 = v125;
    }
    uint64_t v89 = v124;
    uint64_t v90 = v64;
    if (v124 != v64) {
      goto LABEL_110;
    }
LABEL_114:
    if (v90 == v64)
    {
LABEL_118:
      a3 = v116;
      uint64_t v24 = v119;
    }
    else
    {
      a3 = v116;
      uint64_t v24 = sub_46CCC8(v116, v85, *(double *)&v27) + v119;
      if (v25 == -1) {
        uint64_t v25 = v85;
      }
    }
    if (v24 < v84[9] || v115 == 0 || v7 > 0xFFFFFFFEFFFFFFFFLL || v25 == -1)
    {
      if (v89) {
        operator delete(v89);
      }
      if (v127) {
        operator delete(v127);
      }
      uint64_t v23 = v85 + 1;
      if (v85 == a4) {
        goto LABEL_139;
      }
      continue;
    }
    break;
  }
  uint64_t v95 = a5[1];
  unint64_t v94 = (unint64_t)a5[2];
  if ((unint64_t)v95 >= v94)
  {
    uint64_t v96 = v25;
    uint64_t v97 = *a5;
    uint64_t v98 = ((char *)v95 - (char *)*a5) >> 5;
    unint64_t v99 = v98 + 1;
    if ((unint64_t)(v98 + 1) >> 59) {
      sub_2E00();
    }
    uint64_t v100 = v94 - (void)v97;
    if (v100 >> 4 > v99) {
      unint64_t v99 = v100 >> 4;
    }
    if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v101 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v101 = v99;
    }
    if (v101)
    {
      if (v101 >> 59) {
        sub_188D718();
      }
      uint64_t v102 = (char *)operator new(32 * v101);
    }
    else
    {
      uint64_t v102 = 0;
    }
    uint64_t v103 = &v102[32 * v98];
    *(void *)uint64_t v103 = v7;
    v103[8] = v109;
    int v104 = (unint64_t *)&v102[32 * v101];
    *(_DWORD *)(v103 + 9) = *(_DWORD *)v137;
    *((_DWORD *)v103 + 3) = *(_DWORD *)&v137[3];
    *((void *)v103 + 2) = v96;
    v103[24] = v111;
    v103[25] = v108;
    *(_DWORD *)(v103 + 26) = v135;
    uint64_t v105 = (unint64_t *)(v103 + 32);
    *((_WORD *)v103 + 15) = v136;
    if (v95 == v97)
    {
      unsigned int v107 = a5;
      *a5 = (unint64_t *)v103;
      a5[1] = v105;
      a5[2] = v104;
      if (v95) {
        goto LABEL_158;
      }
    }
    else
    {
      do
      {
        long long v106 = *((_OWORD *)v95 - 2);
        *(_OWORD *)(v103 - 22) = *(_OWORD *)((char *)v95 - 22);
        *((_OWORD *)v103 - 2) = v106;
        v103 -= 32;
        v95 -= 4;
      }
      while (v95 != v97);
      unsigned int v107 = a5;
      uint64_t v95 = *a5;
      *a5 = (unint64_t *)v103;
      a5[1] = v105;
      a5[2] = v104;
      if (v95)
      {
LABEL_158:
        operator delete(v95);
        a5[1] = v105;
        if (!v89) {
          goto LABEL_137;
        }
        goto LABEL_136;
      }
    }
    v107[1] = v105;
    if (!v89) {
      goto LABEL_137;
    }
LABEL_136:
    operator delete(v89);
    goto LABEL_137;
  }
  *uint64_t v95 = v7;
  *((unsigned char *)v95 + 8) = v109;
  *(_DWORD *)((char *)v95 + 9) = *(_DWORD *)v137;
  *((_DWORD *)v95 + 3) = *(_DWORD *)&v137[3];
  v95[2] = v25;
  *((unsigned char *)v95 + 24) = v111;
  *((unsigned char *)v95 + 25) = v108;
  *(_DWORD *)((char *)v95 + 26) = v135;
  *((_WORD *)v95 + 15) = v136;
  a5[1] = v95 + 4;
  if (v89) {
    goto LABEL_136;
  }
LABEL_137:
  if (v127) {
    operator delete(v127);
  }
LABEL_139:
  if (*(void *)__p)
  {
    *(void *)&__p[8] = *(void *)__p;
    operator delete(*(void **)__p);
  }
  if ((void)v133)
  {
    *((void *)&v133 + 1) = v133;
    operator delete((void *)v133);
  }
}

void sub_3E158C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,void *a33,uint64_t a34)
{
  if (v34) {
    operator delete(v34);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a33) {
    operator delete(a33);
  }
  int v37 = *(void **)(v35 - 160);
  if (v37)
  {
    *(void *)(v35 - 152) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3E16A4(uint64_t a1, void *a2)
{
  std::string __p = operator new(0x28uLL);
  long long v9 = xmmword_20B9280;
  strcpy((char *)__p, "enable_congestion_zone_calculation");
  BOOL v4 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)a1 = v4;
  std::string __p = operator new(0x20uLL);
  long long v9 = xmmword_20B5EB0;
  strcpy((char *)__p, "min_route_length_in_zone_m");
  *(void *)(a1 + 8) = sub_5CDE0(a2, &__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  std::string __p = operator new(0x30uLL);
  long long v9 = xmmword_20B9A40;
  strcpy((char *)__p, "mark_user_entered_restrictions_on_freeways");
  BOOL v5 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 16) = v5;
  std::string __p = operator new(0x30uLL);
  long long v9 = xmmword_20B9380;
  strcpy((char *)__p, "mark_user_entered_restrictions_on_regular_roads");
  BOOL v6 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 17) = v6;
  return a1;
}

void sub_3E1838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_3E1860(uint64_t *a1, void *a2)
{
  *a1 = sub_3750CC(a2);
  a1[1] = sub_375394(a2);
  sub_3E1B78(a1 + 2, a2);
  HIBYTE(v12[2]) = 18;
  strcpy((char *)v12, "RestrictionChecker");
  std::string __p = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  BOOL v4 = sub_374CDC((uint64_t)a2, (uint64_t)v12, (uint64_t *)&__p);
  sub_3E19BC((uint64_t)(a1 + 8), v4);
  BOOL v5 = (void **)__p;
  if (__p)
  {
    BOOL v6 = v10;
    unint64_t v7 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      unint64_t v7 = __p;
    }
    uint64_t v10 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v12[2]) < 0) {
    operator delete(v12[0]);
  }
  return a1;
}

void sub_3E1974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_1A668(&a10);
  if (a18 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v18 + 63) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else if ((*(char *)(v18 + 63) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v18 + 40));
  _Unwind_Resume(a1);
}

uint64_t sub_3E19BC(uint64_t a1, void *a2)
{
  std::string __p = operator new(0x28uLL);
  long long v9 = xmmword_20B9280;
  strcpy((char *)__p, "enable_congestion_zone_calculation");
  BOOL v4 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)a1 = v4;
  std::string __p = operator new(0x20uLL);
  long long v9 = xmmword_20B5EB0;
  strcpy((char *)__p, "min_route_length_in_zone_m");
  *(void *)(a1 + 8) = sub_5CDE0(a2, &__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  std::string __p = operator new(0x30uLL);
  long long v9 = xmmword_20B9A40;
  strcpy((char *)__p, "mark_user_entered_restrictions_on_freeways");
  BOOL v5 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 16) = v5;
  std::string __p = operator new(0x30uLL);
  long long v9 = xmmword_20B9380;
  strcpy((char *)__p, "mark_user_entered_restrictions_on_regular_roads");
  BOOL v6 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 17) = v6;
  return a1;
}

void sub_3E1B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_3E1B78(uint64_t *a1, void *a2)
{
  *a1 = sub_375394(a2);
  a1[1] = sub_374D14(a2);
  uint64_t v11 = 0;
  BOOL v12 = operator new(0x20uLL);
  long long v13 = xmmword_20B8890;
  strcpy((char *)v12, "TrafficCongestionZoneAccessor");
  std::string __p = 0;
  uint64_t v10 = 0;
  BOOL v4 = sub_374CDC((uint64_t)a2, (uint64_t)&v12, (uint64_t *)&__p);
  sub_3E1CB0((uint64_t)(a1 + 2), v4);
  BOOL v5 = (void **)__p;
  if (__p)
  {
    BOOL v6 = v10;
    unint64_t v7 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      unint64_t v7 = __p;
    }
    uint64_t v10 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12);
  }
  return a1;
}

void sub_3E1C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_3E1CB0(uint64_t a1, void *a2)
{
  std::string __p = operator new(0x38uLL);
  long long v9 = xmmword_20B8DF0;
  strcpy((char *)__p, "enable_overwrite_congestion_zone_from_traffic_incident");
  BOOL v4 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)a1 = v4;
  std::string __p = operator new(0x19uLL);
  long long v9 = xmmword_20B9250;
  strcpy((char *)__p, "fake_incident_id_prefix");
  uint64_t v5 = sub_561B0(a2, (uint64_t)&__p);
  if (*(char *)(v5 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 8), *(void **)v5, *(void *)(v5 + 8));
  }
  else
  {
    long long v6 = *(_OWORD *)v5;
    *(void *)(a1 + 24) = *(void *)(v5 + 16);
    *(_OWORD *)(a1 + 8) = v6;
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_3E1DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **sub_3E1DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = a2;
  *(void *)(a3 + 8) = *(void *)a3;
  __n128 result = (void **)sub_2D5D58(a1, a2 & 0xFFFFFFFFFFFFLL);
  unint64_t v8 = (unsigned __int16 *)((char *)result - *(int *)result);
  if (*v8 >= 0x21u)
  {
    uint64_t v9 = v8[16];
    if (v9)
    {
      uint64_t v10 = (unsigned int *)((char *)result + v9 + *(unsigned int *)((char *)result + v9));
      unint64_t v11 = *v10;
      BOOL v12 = *(unsigned char **)a3;
      if (v11 <= (uint64_t)(*(void *)(a3 + 16) - *(void *)a3) >> 3)
      {
LABEL_14:
        v30[0] = a1;
        v30[1] = &v32;
        void v30[2] = a4;
        int v29 = *v10;
        uint64_t v28 = (unint64_t *)(v10 + 1);
        uint64_t v33 = &v28[v29];
        uint64_t v34 = v28;
        return sub_3E1F90(&v34, &v33, (void **)a3, (uint64_t)&v31, (uint64_t)v30);
      }
      long long v13 = *(unsigned char **)(a3 + 8);
      uint64_t v14 = 8 * v11;
      unsigned int v15 = (char *)operator new(8 * v11);
      uint64_t v16 = v13 - v12;
      uint64_t v17 = &v15[(v13 - v12) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v18 = v17;
      if (v13 != v12)
      {
        if ((unint64_t)(v16 - 8) >= 0x58)
        {
          uint64_t v18 = &v15[(v13 - v12) & 0xFFFFFFFFFFFFFFF8];
          if ((unint64_t)(v13 - &v15[v16 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
          {
            uint64_t v19 = v16 >> 3;
            unint64_t v20 = ((unint64_t)(v16 - 8) >> 3) + 1;
            uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
            __n128 v22 = &v13[-v21];
            uint64_t v18 = &v17[-v21];
            uint64_t v23 = &v15[8 * v19 - 16];
            uint64_t v24 = (long long *)(v13 - 16);
            uint64_t v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v26 = *v24;
              *((_OWORD *)v23 - 1) = *(v24 - 1);
              *(_OWORD *)uint64_t v23 = v26;
              v23 -= 32;
              v24 -= 2;
              v25 -= 4;
            }
            while (v25);
            long long v13 = v22;
            if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_12;
            }
          }
        }
        else
        {
          uint64_t v18 = &v15[(v13 - v12) & 0xFFFFFFFFFFFFFFF8];
        }
        do
        {
          uint64_t v27 = *((void *)v13 - 1);
          v13 -= 8;
          *((void *)v18 - 1) = v27;
          v18 -= 8;
        }
        while (v13 != v12);
      }
LABEL_12:
      *(void *)a3 = v18;
      *(void *)(a3 + 8) = v17;
      *(void *)(a3 + 16) = &v15[v14];
      if (v12) {
        operator delete(v12);
      }
      goto LABEL_14;
    }
  }
  return result;
}

void **sub_3E1F90(unint64_t **a1, unint64_t **a2, void **a3, uint64_t a4, uint64_t a5)
{
  for (unint64_t i = *a1; i != *a2; *a1 = i)
  {
    unint64_t v10 = *i;
    uint64_t v11 = *(void *)a5;
    if (sub_2E7CD8(*(void *)a5, *i))
    {
      BOOL v12 = (int *)sub_2DBC9C(v11, v10);
      long long v13 = (unsigned int *)((char *)v12 + *(unsigned __int16 *)((char *)v12 - *v12 + 6));
      uint64_t v14 = (unsigned int *)((char *)v13 + *v13);
      unsigned int v17 = *v14;
      unsigned int v15 = v14 + 1;
      uint64_t v16 = v17;
      if (v17)
      {
        uint64_t v18 = 8 * v16;
        unint64_t v19 = **(unsigned int **)(a5 + 8) | ((unint64_t)(*(unsigned __int16 *)(*(void *)(a5 + 8) + 4) | (*(unsigned __int8 *)(*(void *)(a5 + 8) + 6) << 16)) << 32);
        while ((*v15 & 0xFFFFFFFFFFFFLL) != (v19 & 0xFFFFFFFFFFFFLL)
             || (HIWORD(v19) & 1) == ((*v15 & 0xFF000000000000) != 0))
        {
          ++v15;
          v18 -= 8;
          if (!v18) {
            goto LABEL_3;
          }
        }
        uint64_t v20 = *(void *)(a5 + 16);
        uint64_t v21 = (int *)sub_2DBC9C(*(void *)v20, v10);
        __n128 v22 = (unsigned int *)((char *)v21 + *(unsigned __int16 *)((char *)v21 - *v21 + 6));
        uint64_t v23 = *(void *)((char *)v22 + *v22 + 4);
        unint64_t v24 = **(void **)(v20 + 8);
        if ((v23 & 0xFFFFFFFFFFFFLL) == (v24 & 0xFFFFFFFFFFFFLL)
          && ((v23 & 0xFF000000000000) != 0) != (HIWORD(v24) & 1))
        {
          unint64_t v26 = **a1;
          sub_29603C(a3, &v26);
        }
      }
    }
LABEL_3:
    unint64_t i = *a1 + 1;
  }
  return a3;
}

void ***sub_3E2110(unsigned int *a1, void ***a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  if (v5)
  {
    long long v6 = a1;
    for (uint64_t i = 4 * v5; i; i -= 4)
    {
      unint64_t v8 = (char *)v6 + v6[1];
      size_t v9 = *((unsigned int *)v8 + 1);
      if (v9 >= 0x17)
      {
        if ((v9 | 7) == 0x17) {
          uint64_t v11 = (v9 & 0xFFFFFFF8) + 8;
        }
        else {
          uint64_t v11 = v9 | 7;
        }
        p_dst = (__n128 *)operator new(v11 + 1);
        __dst.n128_u64[1] = v9;
        uint64_t v15 = v11 - 0x7FFFFFFFFFFFFFFFLL;
        __dst.n128_u64[0] = (unint64_t)p_dst;
      }
      else
      {
        HIBYTE(v15) = *((_DWORD *)v8 + 1);
        p_dst = &__dst;
        if (!v9) {
          goto LABEL_12;
        }
      }
      memcpy(p_dst, v8 + 8, v9);
LABEL_12:
      p_dst->n128_u8[v9] = 0;
      uint64_t v12 = sub_8B3D0(a2, a3, &__dst);
      if (SHIBYTE(v15) < 0) {
        operator delete((void *)__dst.n128_u64[0]);
      }
      a3 = v12 + 24;
      ++v6;
    }
  }
  return a2;
}

void sub_3E2218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3E2234(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = sub_3E2370(a1 + 16, a2, 1);
  if (!v3 || (BOOL v4 = &v3[-*(int *)v3], *(unsigned __int16 *)v4 < 5u) || (v5 = *((unsigned __int16 *)v4 + 2)) == 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v12, a2);
    size_t v9 = std::string::insert(&v12, 0, "Congestion zone access could not find quad node ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v9->__r_.__value_.__r.__words[2];
    long long v13 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    uint64_t v11 = (void *)sub_2F404((uint64_t)exception, &v13);
  }
  uint64_t v6 = (uint64_t)&v3[4 * HIDWORD(a2) + v5 + *(unsigned int *)&v3[v5]];
  return v6 + 4 + *(unsigned int *)(v6 + 4);
}

void sub_3E2318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_3E2370(uint64_t a1, unsigned int a2, int a3)
{
  int v25 = a3;
  unsigned int v26 = a2;
  v24[0] = &v25;
  v24[1] = (int *)&v26;
  unint64_t v4 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v4;
  uint64_t v5 = *(void *)a1;
  if (v5)
  {
    uint64_t v6 = a1 + 16;
    if (*(_DWORD *)(a1 + 1456) == a2)
    {
      unsigned int v7 = 60;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 1480) == a2)
    {
      unsigned int v7 = 61;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 1504) == a2)
    {
      unsigned int v7 = 62;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 1528) == a2)
    {
      unsigned int v7 = 63;
LABEL_10:
      ++*(void *)(a1 + 3864);
      uint64_t v8 = v6 + 24 * v7;
      *(void *)(v8 + 8) = v4;
      size_t v9 = *(unsigned int **)(v8 + 16);
      if (v9) {
        return (char *)v9 + *v9;
      }
      goto LABEL_32;
    }
    unint64_t v11 = *(void *)(a1 + 1512);
    unint64_t v12 = *(void *)(a1 + 1488);
    unint64_t v13 = *(void *)(a1 + 1464);
    BOOL v14 = v13 >= v4;
    if (v13 < v4) {
      unint64_t v4 = *(void *)(a1 + 1464);
    }
    int v15 = 60;
    if (v14) {
      int v15 = 0;
    }
    BOOL v16 = v12 >= v4;
    if (v12 < v4) {
      unint64_t v4 = *(void *)(a1 + 1488);
    }
    int v17 = 61;
    if (v16) {
      int v17 = v15;
    }
    if (v11 >= v4) {
      unint64_t v18 = v4;
    }
    else {
      unint64_t v18 = *(void *)(a1 + 1512);
    }
    unint64_t v19 = *(void *)(a1 + 1536);
    if (v11 >= v4) {
      int v20 = v17;
    }
    else {
      int v20 = 62;
    }
    uint64_t v21 = (unsigned int *)sub_2AB884(v5, 15, a2, 1);
    unsigned int v22 = 63;
    if (v19 >= v18) {
      unsigned int v22 = v20;
    }
    uint64_t v23 = v6 + 24 * v22;
    *(_DWORD *)uint64_t v23 = v26;
    *(void *)(v23 + 8) = *(void *)(a1 + 3856);
    *(void *)(v23 + 16) = v21;
    if (v21) {
      return (char *)v21 + *v21;
    }
  }
LABEL_32:
  sub_3E2500(v24);
  return 0;
}

uint64_t sub_3E2500(int **a1)
{
  int v1 = **a1;
  if (v1 != 1)
  {
    if (!v1)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      std::to_string(&v15, *a1[1]);
      uint64_t v5 = std::string::insert(&v15, 0, "Failed to acquire Flatbuffer data in quad node ");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v16.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      unsigned int v7 = std::string::append(&v16, " on layer ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      size_t v9 = sub_736EC(0xFu);
      long long v10 = std::string::append(&v17, v9);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v19 = v10->__r_.__value_.__r.__words[2];
      long long v18 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unint64_t v12 = (void *)sub_2F404((uint64_t)exception, &v18);
    }
    unint64_t v13 = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v18, "Unknown data access error policy");
    BOOL v14 = (void *)sub_2F404((uint64_t)v13, &v18);
  }
  return 0;
}

void sub_3E2658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_6;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_6:
  operator delete(__p);
  goto LABEL_9;
}

uint64_t sub_3E272C(uint64_t a1, _DWORD *a2, void *a3)
{
  sub_518C8(*a2 >> 17, a2[1] >> 17);
  unsigned int v7 = v6 | 0x40000000;
  while (2)
  {
    unsigned int v8 = v7;
    size_t v9 = sub_3E2370(a1, v7, 1);
    if (!v9) {
      goto LABEL_3;
    }
    long long v10 = &v9[-*(int *)v9];
    if (*(unsigned __int16 *)v10 < 7u || !*((_WORD *)v10 + 3)) {
      goto LABEL_3;
    }
    sub_3E29E8(a1, v8, (uint64_t)&__p);
    long long v11 = (unint64_t *)__p;
    unint64_t v12 = v32;
    if (__p != v32)
    {
      unint64_t v13 = (_DWORD *)a3[1];
      uint64_t v14 = *a3 + 3888;
      do
      {
        std::string v15 = sub_3E2C48(v14, *v11);
        std::string v16 = &v15[-*(int *)v15];
        if (*(unsigned __int16 *)v16 >= 5u && (unsigned __int16 v17 = *((_WORD *)v16 + 2)) != 0)
        {
          uint64_t v18 = __ROR8__(*(unsigned int *)&v15[v17 + 4] | ((unint64_t)*(unsigned int *)&v15[v17] << 32), 32);
          if (*v13 == v18) {
            goto LABEL_9;
          }
        }
        else
        {
          uint64_t v18 = __ROR8__(0xFFFFFFFFLL, 32);
          if (*v13 == v18)
          {
LABEL_9:
            if (v13[1] == HIDWORD(v18))
            {
              int v21 = 1;
              uint64_t v27 = (unint64_t *)__p;
              if (__p) {
                goto LABEL_33;
              }
              goto LABEL_2;
            }
          }
        }
        ++v11;
      }
      while (v11 != v12);
    }
    sub_3E2B18(a1, v8, (uint64_t)&v29);
    std::string::size_type v19 = v29;
    int v20 = v30;
    if (v29 == v30)
    {
      int v21 = 0;
      if (v29) {
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    do
    {
      unint64_t v33 = *v19;
      unsigned int v22 = sub_3E2C48(*a3 + 3888, v33);
      uint64_t v23 = &v22[-*(int *)v22];
      if (*(unsigned __int16 *)v23 >= 5u && (unsigned __int16 v24 = *((_WORD *)v23 + 2)) != 0)
      {
        uint64_t v25 = __ROR8__(*(unsigned int *)&v22[v24 + 4] | ((unint64_t)*(unsigned int *)&v22[v24] << 32), 32);
        unsigned int v26 = (_DWORD *)a3[1];
        if (*v26 != v25) {
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v25 = __ROR8__(0xFFFFFFFFLL, 32);
        unsigned int v26 = (_DWORD *)a3[1];
        if (*v26 != v25) {
          goto LABEL_20;
        }
      }
      if (v26[1] == HIDWORD(v25) && (sub_3E2FD0(a1, &v33, a2) & 1) != 0)
      {
        int v21 = 1;
        std::string::size_type v19 = v29;
        if (v29) {
          goto LABEL_31;
        }
        goto LABEL_32;
      }
LABEL_20:
      ++v19;
    }
    while (v19 != v20);
    int v21 = 0;
    std::string::size_type v19 = v29;
    if (!v29) {
      goto LABEL_32;
    }
LABEL_31:
    uint64_t v30 = v19;
    operator delete(v19);
LABEL_32:
    uint64_t v27 = (unint64_t *)__p;
    if (__p)
    {
LABEL_33:
      uint64_t v32 = v27;
      operator delete(v27);
    }
LABEL_2:
    if (v21) {
      return 1;
    }
LABEL_3:
    unsigned int v7 = v8 >> 2;
    if (v8 > 3) {
      continue;
    }
    return 0;
  }
}

void sub_3E2998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_3E29E8@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  __n128 result = sub_3E2370(a1, a2, 1);
  if (result
    && (uint64_t v5 = &result[-*(int *)result], *(unsigned __int16 *)v5 >= 7u)
    && (uint64_t v6 = *((unsigned __int16 *)v5 + 3)) != 0)
  {
    unsigned int v7 = &result[v6 + *(unsigned int *)&result[v6]];
    unsigned int v8 = &v7[-*(int *)v7];
    if (*(unsigned __int16 *)v8 >= 7u
      && (uint64_t v9 = *((unsigned __int16 *)v8 + 3)) != 0
      && (v10 = &v7[v9 + *(unsigned int *)&v7[v9]], uint64_t v11 = *(unsigned int *)v10, v11))
    {
      uint64_t v12 = v11;
      unint64_t v13 = operator new(8 * v11);
      *(void *)&long long v17 = v13;
      *((void *)&v17 + 1) = v13;
      uint64_t v18 = &v13[v12];
      uint64_t v14 = (uint64_t *)(v10 + 4);
      do
      {
        uint64_t v19 = *v14;
        __n128 result = sub_2A8034((unint64_t *)&v17, v13, &v19);
        unint64_t v13 = result + 8;
        ++v14;
        --v12;
      }
      while (v12 * 8);
      long long v15 = v17;
      std::string v16 = v18;
    }
    else
    {
      std::string v16 = 0;
      long long v15 = 0uLL;
    }
    *(_OWORD *)a3 = v15;
    *(void *)(a3 + 16) = v16;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_3E2AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_3E2B18@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  __n128 result = sub_3E2370(a1, a2, 1);
  if (result
    && (uint64_t v5 = &result[-*(int *)result], *(unsigned __int16 *)v5 >= 7u)
    && (uint64_t v6 = *((unsigned __int16 *)v5 + 3)) != 0)
  {
    unsigned int v7 = &result[v6 + *(unsigned int *)&result[v6]];
    unsigned int v8 = &v7[-*(int *)v7];
    if (*(unsigned __int16 *)v8 >= 9u
      && (uint64_t v9 = *((unsigned __int16 *)v8 + 4)) != 0
      && (v10 = &v7[v9 + *(unsigned int *)&v7[v9]], uint64_t v11 = *(unsigned int *)v10, v11))
    {
      uint64_t v12 = v11;
      unint64_t v13 = operator new(8 * v11);
      *(void *)&long long v17 = v13;
      *((void *)&v17 + 1) = v13;
      uint64_t v18 = &v13[v12];
      uint64_t v14 = (uint64_t *)(v10 + 4);
      do
      {
        uint64_t v19 = *v14;
        __n128 result = sub_2A8034((unint64_t *)&v17, v13, &v19);
        unint64_t v13 = result + 8;
        ++v14;
        --v12;
      }
      while (v12 * 8);
      long long v15 = v17;
      std::string v16 = v18;
    }
    else
    {
      std::string v16 = 0;
      long long v15 = 0uLL;
    }
    *(_OWORD *)a3 = v15;
    *(void *)(a3 + 16) = v16;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_3E2C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_3E2C48(uint64_t a1, unint64_t a2)
{
  unint64_t v26 = a2;
  uint64_t v3 = sub_3E2370(a1, a2, 1);
  if (!v3
    || (unint64_t v4 = &v3[-*(int *)v3], *(unsigned __int16 *)v4 < 7u)
    || (uint64_t v5 = *((unsigned __int16 *)v4 + 3)) == 0
    || (v6 = &v3[v5 + *(unsigned int *)&v3[v5]], unsigned int v7 = &v6[-*(int *)v6], *(unsigned __int16 *)v7 < 5u)
    || !*((_WORD *)v7 + 2)
    || (unsigned int v8 = &v6[*((unsigned __int16 *)v7 + 2) + *(unsigned int *)&v6[*((unsigned __int16 *)v7 + 2)]],
        *(_DWORD *)v8 <= HIDWORD(a2)))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_2A746C((unsigned int *)&v26, &v24);
    uint64_t v19 = std::string::insert(&v24, 0, "Referenced polygon ");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    int v21 = std::string::append(&v25, " does not exist.");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    uint64_t v28 = v21->__r_.__value_.__r.__words[2];
    long long v27 = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    uint64_t v23 = (void *)sub_2F404((uint64_t)exception, &v27);
  }
  uint64_t v9 = &v8[4 * HIDWORD(a2) + 4 + *(unsigned int *)&v8[4 * HIDWORD(a2) + 4]];
  long long v10 = &v9[-*(int *)v9];
  if (*(unsigned __int16 *)v10 < 9u) {
    return 0;
  }
  uint64_t v11 = *((unsigned __int16 *)v10 + 4);
  if (!v11) {
    return 0;
  }
  __n128 result = 0;
  unint64_t v13 = (unsigned int *)&v9[v11 + *(unsigned int *)&v9[v11]];
  unsigned int v16 = *v13;
  long long v15 = v13 + 1;
  uint64_t v14 = v16;
  *((void *)&v27 + 1) = v16;
  uint64_t v28 = 0xF424000000040;
  int v29 = 257;
  *(void *)&long long v27 = v15;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  if (v16 < 0xC) {
    return result;
  }
  unint64_t v17 = *v15;
  if ((int)v17 < 1) {
    return 0;
  }
  if (v14 - 1 >= v17)
  {
    if (sub_3E2ECC((int *)((char *)v15 + v17), (uint64_t *)&v27)) {
      return (char *)v15 + *v15;
    }
    return 0;
  }
  return 0;
}

void sub_3E2E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_3E2ECC(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (unint64_t)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  BOOL v7 = v6 >= 5 && v6 - 4 >= v3;
  if (!v7) {
    return 0;
  }
  uint64_t v8 = *a1;
  int v9 = *((_DWORD *)a2 + 10);
  unsigned int v10 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v9 + 1;
  *((_DWORD *)a2 + 11) = v10;
  if ((v9 + 1) > *((_DWORD *)a2 + 4) || v10 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v13 = v3 - v8;
  if ((v3 - v8))
  {
    uint64_t v14 = 0;
    if (v4 || v6 - 2 < v13) {
      return v14;
    }
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v7 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v7 || v16 < v13) {
    return 0;
  }
  uint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v18 < 5u) {
    goto LABEL_35;
  }
  uint64_t v19 = v18[2];
  if (!v19) {
    goto LABEL_35;
  }
  unint64_t v20 = v3 + v19;
  if ((v20 & 3) != 0 && v4) {
    return 0;
  }
  uint64_t v14 = 0;
  if (v6 >= 9 && v6 - 8 >= v20)
  {
LABEL_35:
    *((_DWORD *)a2 + 10) = v9;
    return 1;
  }
  return v14;
}

uint64_t sub_3E2FD0(uint64_t a1, unint64_t *a2, _DWORD *a3)
{
  sub_3E31B4(a1, *a2, (uint64_t)v35);
  if (!sub_34554(v35, a3)) {
    return 0;
  }
  sub_3E33D8(a1, *a2, &__p);
  int v9 = (void **)__p;
  unsigned int v10 = v34;
  if (__p == v34)
  {
    uint64_t v22 = 0;
    uint64_t v23 = __p;
    if (!__p) {
      return v22;
    }
  }
  else
  {
    unsigned int v11 = a3[1];
    LODWORD(v6) = *a3;
    double v12 = (double)v6;
    unint64_t v13 = (void **)__p;
    while (1)
    {
      uint64_t v14 = *v13;
      unint64_t v15 = v13[1];
      if (*v13 != v15)
      {
        int v16 = 0;
        do
        {
          unint64_t v17 = (_DWORD *)v14[1];
          uint64_t v18 = (_DWORD *)(*v14 + 12);
          if ((_DWORD *)*v14 != v17 && v18 != v17)
          {
            do
            {
              unsigned int v20 = *(v18 - 2);
              unsigned int v21 = v18[1];
              if (v20 >= v11)
              {
                if (v21 < v11)
                {
LABEL_20:
                  LODWORD(v7) = *v18;
                  LODWORD(v8) = *(v18 - 3);
                  double v8 = (double)*(unint64_t *)&v8;
                  double v7 = ((double)v11 - (double)v20)
                     / ((double)v21 - (double)v20)
                     * ((double)*(unint64_t *)&v7 - v8)
                     + v8;
                  if (v7 < v12) {
                    v16 ^= 1u;
                  }
                }
              }
              else if (v21 >= v11)
              {
                goto LABEL_20;
              }
              v18 += 3;
            }
            while (v18 != v17);
          }
          v14 += 3;
        }
        while (v14 != v15);
        if (v16) {
          break;
        }
      }
      v13 += 3;
      if (v13 == v34)
      {
        uint64_t v22 = 0;
        if (!__p) {
          return v22;
        }
        goto LABEL_28;
      }
    }
    uint64_t v22 = 1;
    if (!__p) {
      return v22;
    }
LABEL_28:
    std::string v24 = v34;
    do
    {
      long long v27 = (char *)*(v24 - 3);
      v24 -= 3;
      unint64_t v26 = v27;
      if (v27)
      {
        uint64_t v28 = (char *)*(v10 - 2);
        std::string v25 = v26;
        if (v28 != v26)
        {
          int v29 = (char *)*(v10 - 2);
          do
          {
            uint64_t v31 = (void *)*((void *)v29 - 3);
            v29 -= 24;
            uint64_t v30 = v31;
            if (v31)
            {
              *((void *)v28 - 2) = v30;
              operator delete(v30);
            }
            uint64_t v28 = v29;
          }
          while (v29 != v26);
          std::string v25 = *v24;
        }
        *(v10 - 2) = v26;
        operator delete(v25);
      }
      unsigned int v10 = v24;
    }
    while (v24 != v9);
    uint64_t v23 = __p;
  }
  uint64_t v34 = v9;
  operator delete(v23);
  return v22;
}

uint64_t sub_3E31B4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v26 = a2;
  uint64_t v5 = sub_3E2370(a1, a2, 1);
  if (!v5
    || (unint64_t v6 = &v5[-*(int *)v5], *(unsigned __int16 *)v6 < 7u)
    || (uint64_t v7 = *((unsigned __int16 *)v6 + 3)) == 0
    || (double v8 = &v5[v7 + *(unsigned int *)&v5[v7]], v9 = &v8[-*(int *)v8], *(unsigned __int16 *)v9 < 5u)
    || !*((_WORD *)v9 + 2)
    || (unsigned int v10 = &v8[*((unsigned __int16 *)v9 + 2) + *(unsigned int *)&v8[*((unsigned __int16 *)v9 + 2)]],
        *(_DWORD *)v10 <= HIDWORD(a2)))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_2A746C((unsigned int *)&v26, &v22);
    unint64_t v17 = std::string::insert(&v22, 0, "Referenced polygon ");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    uint64_t v19 = std::string::append(&v23, " does not exist.");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    std::string::size_type v25 = v19->__r_.__value_.__r.__words[2];
    long long v24 = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    unsigned int v21 = (void *)sub_2F404((uint64_t)exception, &v24);
  }
  unsigned int v11 = &v10[4 * HIDWORD(a2) + 4 + *(unsigned int *)&v10[4 * HIDWORD(a2) + 4]];
  uint64_t v12 = (uint64_t)&v11[*(unsigned __int16 *)&v11[-*(int *)v11 + 6]];
  LODWORD(v13) = *(_DWORD *)(v12 + 4);
  if (v13 >= 0xFFFFFFFE) {
    uint64_t v13 = 4294967294;
  }
  else {
    uint64_t v13 = v13;
  }
  *(void *)&long long v24 = *(unsigned int *)v12 | (unint64_t)(v13 << 32);
  DWORD2(v24) = 0x7FFFFFFF;
  uint64_t v14 = *(unsigned int *)(v12 + 8);
  LODWORD(v12) = *(_DWORD *)(v12 + 12);
  if (v12 >= 0xFFFFFFFE) {
    uint64_t v12 = 4294967294;
  }
  else {
    uint64_t v12 = v12;
  }
  v23.__r_.__value_.__r.__words[0] = v14 | (v12 << 32);
  LODWORD(v23.__r_.__value_.__r.__words[1]) = 0x7FFFFFFF;
  return sub_3392C(a3, (unsigned int *)&v24, (unsigned int *)&v23);
}

void sub_3E3358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void sub_3E33D8(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v24 = a2;
  uint64_t v5 = sub_3E2370(a1, a2, 1);
  if (!v5
    || (unint64_t v6 = &v5[-*(int *)v5], *(unsigned __int16 *)v6 < 7u)
    || (uint64_t v7 = *((unsigned __int16 *)v6 + 3)) == 0
    || (double v8 = &v5[v7 + *(unsigned int *)&v5[v7]], v9 = &v8[-*(int *)v8], *(unsigned __int16 *)v9 < 5u)
    || !*((_WORD *)v9 + 2)
    || (unsigned int v10 = &v8[*((unsigned __int16 *)v9 + 2) + *(unsigned int *)&v8[*((unsigned __int16 *)v9 + 2)]],
        *(_DWORD *)v10 <= HIDWORD(a2)))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_2A746C((unsigned int *)&v24, &v20);
    unint64_t v15 = std::string::insert(&v20, 0, "Referenced polygon ");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    unint64_t v17 = std::string::append(&v21, " does not exist.");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    std::string::size_type v23 = v17->__r_.__value_.__r.__words[2];
    long long v22 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    uint64_t v19 = (void *)sub_2F404((uint64_t)exception, &v22);
  }
  unsigned int v11 = &v10[4 * HIDWORD(a2) + 4 + *(unsigned int *)&v10[4 * HIDWORD(a2) + 4]];
  uint64_t v12 = &v11[*(unsigned __int16 *)&v11[-*(int *)v11 + 4]];
  uint64_t v13 = (int *)&v12[*(unsigned int *)v12];

  sub_2A9A54(v13, a3);
}

void sub_3E3550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void *sub_3E35D0(uint64_t a1, void *a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    double v8 = *(char **)a1;
    uint64_t v9 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v10 = v9 >> 3;
    unint64_t v11 = (v9 >> 3) + 1;
    if (v11 >> 61) {
      sub_2E00();
    }
    uint64_t v12 = v4 - (void)v8;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    BOOL v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v11;
    }
    if (v14 >> 61) {
      sub_188D718();
    }
    uint64_t v15 = 8 * v14;
    long long v16 = operator new(8 * v14);
    unint64_t v17 = &v16[8 * v10];
    *unint64_t v17 = *a2;
    uint64_t v7 = v17 + 1;
    if (v5 != v8)
    {
      unint64_t v18 = v5 - v8 - 8;
      if (v18 < 0x58) {
        goto LABEL_23;
      }
      if ((unint64_t)(&v5[-v9] - v16) < 0x20) {
        goto LABEL_23;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v6 = &v5[-v20];
      unint64_t v17 = (void *)((char *)v17 - v20);
      std::string v21 = &v16[8 * v10 - 16];
      long long v22 = v5 - 16;
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        _OWORD *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_23:
        do
        {
          uint64_t v25 = *((void *)v6 - 1);
          v6 -= 8;
          *--unint64_t v17 = v25;
        }
        while (v6 != v8);
      }
    }
    *(void *)a1 = v17;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v16[v15];
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(void *)uint64_t v5 = *a2;
    uint64_t v7 = v5 + 8;
  }
  *(void *)(a1 + 8) = v7;
  return v7 - 1;
}

unsigned char *sub_3E3730(void *a1, char *a2)
{
  uint64_t v5 = (unsigned char *)a1[1];
  unint64_t v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = (unsigned char *)*a1;
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v5[-*a1] >> 3);
    unint64_t v9 = v8 + 1;
    if (v8 + 1 > 0x666666666666666) {
      sub_2E00();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - (void)v7) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0x666666666666666) {
        sub_188D718();
      }
      uint64_t v12 = (char *)operator new(40 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    BOOL v13 = &v12[40 * v8];
    *BOOL v13 = *a2;
    *(_OWORD *)(v13 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(v13 + 24) = *(_OWORD *)(a2 + 24);
    unint64_t v6 = v13 + 40;
    if (v5 != v7)
    {
      do
      {
        char v14 = *(v5 - 40);
        v5 -= 40;
        *(v13 - 40) = v14;
        v13 -= 40;
        *(_OWORD *)(v13 + 8) = *(_OWORD *)(v5 + 8);
        *(_OWORD *)(v13 + 24) = *(_OWORD *)(v5 + 24);
      }
      while (v5 != v7);
      uint64_t v5 = (unsigned char *)*a1;
    }
    *a1 = v13;
    a1[1] = v6;
    a1[2] = &v12[40 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    unsigned char *v5 = *a2;
    *(_OWORD *)(v5 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(v5 + 24) = *(_OWORD *)(a2 + 24);
    unint64_t v6 = v5 + 40;
  }
  a1[1] = v6;
  return v6 - 40;
}

char *sub_3E3880(char **a1, uint64_t a2)
{
  unint64_t v4 = *a1;
  unint64_t v3 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    unint64_t v9 = (char *)operator new(24 * v8);
  }
  else
  {
    unint64_t v9 = 0;
  }
  unint64_t v10 = &v9[24 * v5];
  unint64_t v11 = &v9[24 * v8];
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)unint64_t v10 = 0;
  uint64_t v12 = *(const void **)a2;
  int64_t v13 = *(void *)(a2 + 8) - *(void *)a2;
  if (v13)
  {
    if (v13 < 0) {
      sub_2E00();
    }
    char v14 = (char *)operator new(v13);
    *(void *)unint64_t v10 = v14;
    *((void *)v10 + 1) = v14;
    uint64_t v15 = &v14[8 * (v13 >> 3)];
    *((void *)v10 + 2) = v15;
    memcpy(v14, v12, v13 - 1);
    *((void *)v10 + 1) = v15;
  }
  long long v16 = v10 + 24;
  long long v24 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v16;
    a1[2] = v11;
  }
  else
  {
    do
    {
      unint64_t v17 = v10;
      *((void *)v10 - 2) = 0;
      *((void *)v10 - 1) = 0;
      long long v18 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v18;
      v10 -= 24;
      *((void *)v17 - 1) = *((void *)v3 + 2);
      *(void *)unint64_t v3 = 0;
      *((void *)v3 + 1) = 0;
      *((void *)v3 + 2) = 0;
    }
    while (v3 != v4);
    uint64_t v19 = *a1;
    unint64_t v3 = a1[1];
    long long v16 = v24;
    *a1 = v10;
    a1[1] = v24;
    a1[2] = v11;
    if (v3 != v19)
    {
      uint64_t v20 = v3;
      do
      {
        long long v22 = (void *)*((void *)v20 - 3);
        v20 -= 24;
        std::string v21 = v22;
        if (v22)
        {
          *((void *)v3 - 2) = v21;
          operator delete(v21);
        }
        unint64_t v3 = v20;
      }
      while (v20 != v19);
      unint64_t v3 = v19;
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v16;
}

void sub_3E3A54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  unint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  sub_2A6E80((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_3E3A78(uint64_t a1, void *a2, void *a3, _OWORD *a4)
{
  uint64_t v8 = *a2;
  unint64_t v9 = __ROR8__(*a2, 32);
  unint64_t v10 = 0xC4CEB9FE1A85EC53
      * ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) >> 33));
  unint64_t v11 = v10 ^ (v10 >> 33);
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10 ^ (v10 >> 33);
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
    }
    else
    {
      unint64_t v4 = v11 & (v12 - 1);
    }
    char v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = (char *)*v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v18 = *((void *)v15 + 1);
            if (v18 == v11)
            {
              if (*((_DWORD *)v15 + 4) == v8 && *((_DWORD *)v15 + 5) == HIDWORD(v8)) {
                return v15;
              }
            }
            else if ((v18 & (v12 - 1)) != v4)
            {
              goto LABEL_31;
            }
            uint64_t v15 = *(char **)v15;
            if (!v15) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v16 = *((void *)v15 + 1);
          if (v16 == v11)
          {
            if (*((_DWORD *)v15 + 4) == v8 && *((_DWORD *)v15 + 5) == HIDWORD(v8)) {
              return v15;
            }
          }
          else
          {
            if (v16 >= v12) {
              v16 %= v12;
            }
            if (v16 != v4) {
              break;
            }
          }
          uint64_t v15 = *(char **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_31:
  uint64_t v15 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = v11;
  *((void *)v15 + 2) = *a3;
  *(_OWORD *)(v15 + 24) = *a4;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v12 && (float)(v21 * (float)v12) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
    if (v23)
    {
LABEL_34:
      *(void *)uint64_t v15 = *v23;
LABEL_69:
      void *v23 = v15;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v12 >= 3) {
      BOOL v24 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v12);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v12 = *(void *)(a1 + 8);
    }
    if (prime > v12) {
      goto LABEL_45;
    }
    if (prime < v12)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v12 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v12) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v31 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        if (v23) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * v11);
        if (v23) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v31 & v11;
      uint64_t v22 = *(void *)a1;
      uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v31 & v11));
      if (v23) {
        goto LABEL_34;
      }
    }
  }
  *(void *)uint64_t v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v22 + 8 * v4) = a1 + 16;
  if (*(void *)v15)
  {
    unint64_t v32 = *(void *)(*(void *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v32 >= v12) {
        v32 %= v12;
      }
    }
    else
    {
      v32 &= v12 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_3E3DCC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_3E3DE0(unint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, char a5, __n128 result)
{
  while (2)
  {
    uint8x8_t v13 = a2 - 2;
    uint64_t v129 = a2 - 4;
    char v14 = a2 - 6;
    unint64_t v15 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v15;
          uint64_t v16 = (uint64_t)a2 - v15;
          unint64_t v17 = (uint64_t)((uint64_t)a2 - v15) >> 5;
          if (v7 || !v6)
          {
            switch(v17)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                if (*((void *)a2 - 2) < *(void *)(v15 + 16))
                {
                  *(_OWORD *)uint64_t v156 = *(_OWORD *)v15;
                  *(_OWORD *)&v156[16] = *(_OWORD *)(v15 + 16);
                  long long v99 = *(a2 - 2);
                  *(_OWORD *)(v15 + 10) = *(_OWORD *)((char *)a2 - 22);
                  *(_OWORD *)unint64_t v15 = v99;
                  __n128 result = *(__n128 *)v156;
                  *(_OWORD *)((char *)a2 - 22) = *(_OWORD *)&v156[10];
                  *(a2 - 2) = *(_OWORD *)v156;
                }
                return result;
              case 3uLL:
                uint64_t v100 = (_OWORD *)(v15 + 32);
                unint64_t v101 = *(void *)(v15 + 48);
                unint64_t v102 = *((void *)a2 - 2);
                if (v101 >= *(void *)(v15 + 16))
                {
                  if (v102 >= v101) {
                    return result;
                  }
                  *(_OWORD *)BOOL v160 = *v100;
                  __n128 result = *(__n128 *)v100;
                  *(_OWORD *)&v160[16] = *(_OWORD *)(v15 + 48);
                  long long v119 = *(_OWORD *)((char *)a2 - 22);
                  *uint64_t v100 = *v13;
                  *(_OWORD *)(v15 + 42) = v119;
                  *(_OWORD *)((char *)a2 - 22) = *(_OWORD *)&v160[10];
                  *uint8x8_t v13 = result;
                  goto LABEL_152;
                }
                if (v102 >= v101)
                {
                  *(_OWORD *)uint64_t v164 = *(_OWORD *)v15;
                  *(_OWORD *)&v164[16] = *(_OWORD *)(v15 + 16);
                  *(_OWORD *)unint64_t v15 = *v100;
                  *(_OWORD *)(v15 + 10) = *(_OWORD *)(v15 + 42);
                  *uint64_t v100 = *(_OWORD *)v164;
                  __n128 result = *(__n128 *)&v164[10];
                  *(_OWORD *)(v15 + 42) = *(_OWORD *)&v164[10];
                  if (*((void *)a2 - 2) >= *(void *)(v15 + 48)) {
                    return result;
                  }
                  __n128 result = *(__n128 *)v100;
                  *(_OWORD *)unsigned int v157 = *v100;
                  *(_OWORD *)&v157[16] = *(_OWORD *)(v15 + 48);
                  long long v126 = *(_OWORD *)((char *)a2 - 22);
                  *uint64_t v100 = *v13;
                  *(_OWORD *)(v15 + 42) = v126;
                }
                else
                {
                  *(_OWORD *)unsigned int v157 = *(_OWORD *)v15;
                  *(_OWORD *)&v157[16] = *(_OWORD *)(v15 + 16);
                  long long v103 = *v13;
                  *(_OWORD *)(v15 + 10) = *(_OWORD *)((char *)a2 - 22);
                  *(_OWORD *)unint64_t v15 = v103;
                  __n128 result = *(__n128 *)v157;
                }
                *(_OWORD *)((char *)a2 - 22) = *(_OWORD *)&v157[10];
                *uint8x8_t v13 = result;
                return result;
              case 4uLL:
                uint64_t v100 = (_OWORD *)(v15 + 32);
                int v104 = (_OWORD *)(v15 + 64);
                unint64_t v105 = *(void *)(v15 + 48);
                unint64_t v106 = *(void *)(v15 + 80);
                if (v105 >= *(void *)(v15 + 16))
                {
                  if (v106 < v105)
                  {
                    *(_OWORD *)long long v161 = *v100;
                    long long v120 = *v100;
                    *(_OWORD *)&v161[16] = *(_OWORD *)(v15 + 48);
                    *uint64_t v100 = *v104;
                    *(_OWORD *)(v15 + 42) = *(_OWORD *)(v15 + 74);
                    *int v104 = v120;
                    __n128 result = *(__n128 *)&v161[10];
                    *(_OWORD *)(v15 + 74) = *(_OWORD *)&v161[10];
                    if (*(void *)(v15 + 48) < *(void *)(v15 + 16))
                    {
                      *(_OWORD *)long long v162 = *(_OWORD *)v15;
                      *(_OWORD *)&v162[16] = *(_OWORD *)(v15 + 16);
                      *(_OWORD *)unint64_t v15 = *v100;
                      *(_OWORD *)(v15 + 10) = *(_OWORD *)(v15 + 42);
                      *uint64_t v100 = *(_OWORD *)v162;
                      __n128 result = *(__n128 *)&v162[10];
                      *(_OWORD *)(v15 + 42) = *(_OWORD *)&v162[10];
                    }
                  }
                }
                else
                {
                  if (v106 >= v105)
                  {
                    *(_OWORD *)uint64_t v165 = *(_OWORD *)v15;
                    *(_OWORD *)&v165[16] = *(_OWORD *)(v15 + 16);
                    *(_OWORD *)unint64_t v15 = *v100;
                    *(_OWORD *)(v15 + 10) = *(_OWORD *)(v15 + 42);
                    *uint64_t v100 = *(_OWORD *)v165;
                    __n128 result = *(__n128 *)&v165[10];
                    *(_OWORD *)(v15 + 42) = *(_OWORD *)&v165[10];
                    if (v106 >= *(void *)(v15 + 48)) {
                      goto LABEL_149;
                    }
                    long long v107 = *v100;
                    *(_OWORD *)unsigned int v158 = *v100;
                    *(_OWORD *)&v158[16] = *(_OWORD *)(v15 + 48);
                    *uint64_t v100 = *v104;
                    *(_OWORD *)(v15 + 42) = *(_OWORD *)(v15 + 74);
                  }
                  else
                  {
                    *(_OWORD *)unsigned int v158 = *(_OWORD *)v15;
                    *(_OWORD *)&v158[16] = *(_OWORD *)(v15 + 16);
                    *(_OWORD *)unint64_t v15 = *v104;
                    *(_OWORD *)(v15 + 10) = *(_OWORD *)(v15 + 74);
                    long long v107 = *(_OWORD *)v158;
                  }
                  *int v104 = v107;
                  __n128 result = *(__n128 *)&v158[10];
                  *(_OWORD *)(v15 + 74) = *(_OWORD *)&v158[10];
                }
LABEL_149:
                if (*((void *)a2 - 2) < *(void *)(v15 + 80))
                {
                  *(_OWORD *)long long v166 = *v104;
                  __n128 result = *(__n128 *)v104;
                  *(_OWORD *)&v166[16] = *(_OWORD *)(v15 + 80);
                  long long v127 = *(_OWORD *)((char *)a2 - 22);
                  *int v104 = *v13;
                  *(_OWORD *)(v15 + 74) = v127;
                  *(_OWORD *)((char *)a2 - 22) = *(_OWORD *)&v166[10];
                  *uint8x8_t v13 = result;
                  if (*(void *)(v15 + 80) < *(void *)(v15 + 48))
                  {
                    *(_OWORD *)uint64_t v167 = *v100;
                    long long v128 = *v100;
                    *(_OWORD *)&v167[16] = *(_OWORD *)(v15 + 48);
                    *uint64_t v100 = *v104;
                    *(_OWORD *)(v15 + 42) = *(_OWORD *)(v15 + 74);
                    *int v104 = v128;
                    __n128 result = *(__n128 *)&v167[10];
                    *(_OWORD *)(v15 + 74) = *(_OWORD *)&v167[10];
LABEL_152:
                    if (*(void *)(v15 + 48) < *(void *)(v15 + 16))
                    {
                      *(_OWORD *)long long v168 = *(_OWORD *)v15;
                      *(_OWORD *)&v168[16] = *(_OWORD *)(v15 + 16);
                      *(_OWORD *)unint64_t v15 = *v100;
                      *(_OWORD *)(v15 + 10) = *(_OWORD *)((char *)v100 + 10);
                      *uint64_t v100 = *(_OWORD *)v168;
                      __n128 result = *(__n128 *)&v168[10];
                      *(_OWORD *)((char *)v100 + 10) = *(_OWORD *)&v168[10];
                    }
                  }
                }
                break;
              case 5uLL:
                result.n128_u64[0] = sub_3E501C((_OWORD *)v15, (long long *)(v15 + 32), (long long *)(v15 + 64), (long long *)(v15 + 96), a2 - 2, result).n128_u64[0];
                return result;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v16 <= 767)
          {
            char v108 = (_OWORD *)(v15 + 32);
            BOOL v110 = (_OWORD *)v15 == a2 || v108 == a2;
            if (a5)
            {
              if (!v110)
              {
                uint64_t v111 = 0;
                unint64_t v112 = (_OWORD *)v15;
                do
                {
                  uint64_t v114 = v108;
                  unint64_t v115 = *((void *)v112 + 6);
                  if (v115 < *((void *)v112 + 2))
                  {
                    __n128 v159 = *(__n128 *)v114;
                    __int16 v116 = *((_WORD *)v112 + 28);
                    uint64_t v117 = v111;
                    do
                    {
                      uint64_t v118 = v15 + v117;
                      *(_OWORD *)(v118 + 32) = *(_OWORD *)(v15 + v117);
                      *(_OWORD *)(v118 + 42) = *(_OWORD *)(v15 + v117 + 10);
                      if (!v117)
                      {
                        uint64_t v113 = v15;
                        goto LABEL_120;
                      }
                      v117 -= 32;
                    }
                    while (v115 < *(void *)(v118 - 16));
                    uint64_t v113 = v15 + v117 + 32;
LABEL_120:
                    __n128 result = v159;
                    *(__n128 *)uint64_t v113 = v159;
                    *(void *)(v113 + 16) = v115;
                    *(_WORD *)(v113 + 24) = v116;
                  }
                  char v108 = v114 + 2;
                  v111 += 32;
                  unint64_t v112 = v114;
                }
                while (v114 + 2 != a2);
              }
            }
            else if (!v110)
            {
              do
              {
                char v121 = v108;
                unint64_t v122 = *(void *)(a1 + 48);
                if (v122 < *(void *)(a1 + 16))
                {
                  __n128 v163 = *(__n128 *)v108;
                  uint64_t v123 = *(void *)(a1 + 56);
                  unsigned int v124 = (__n128 *)v121;
                  do
                  {
                    *unsigned int v124 = v124[-2];
                    *(__n128 *)((char *)v124 + 10) = *(__n128 *)((char *)v124 - 22);
                    unint64_t v125 = v124[-3].n128_u64[0];
                    v124 -= 2;
                  }
                  while (v122 < v125);
                  __n128 result = v163;
                  *unsigned int v124 = v163;
                  v124[1].n128_u64[0] = v122;
                  v124[1].n128_u16[4] = v123;
                }
                char v108 = v121 + 2;
                a1 = (unint64_t)v121;
              }
              while (v121 + 2 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if ((_OWORD *)v15 != a2)
            {
              sub_3E5288(v15, a2, a2);
            }
            return result;
          }
          unint64_t v18 = v17 >> 1;
          uint64_t v19 = (long long *)(v15 + 32 * (v17 >> 1));
          unint64_t v20 = *((void *)a2 - 2);
          if ((unint64_t)v16 > 0x1000) {
            break;
          }
          unint64_t v24 = *(void *)(v15 + 16);
          unint64_t v25 = (unint64_t *)(v15 + 16 + 32 * v18);
          if (v24 < *v25)
          {
            if (v20 >= v24)
            {
              *(_OWORD *)uint64_t v142 = *v19;
              *(_OWORD *)&v142[16] = v19[1];
              long long v45 = *(_OWORD *)v15;
              *(long long *)((char *)v19 + 10) = *(_OWORD *)(v15 + 10);
              *uint64_t v19 = v45;
              *(_OWORD *)(v15 + 10) = *(_OWORD *)&v142[10];
              *(_OWORD *)unint64_t v15 = *(_OWORD *)v142;
              if (*((void *)a2 - 2) >= *(void *)(v15 + 16)) {
                goto LABEL_32;
              }
              *(_OWORD *)long long v133 = *(_OWORD *)v15;
              *(_OWORD *)&v133[16] = *(_OWORD *)(v15 + 16);
              long long v46 = *v13;
              *(_OWORD *)(v15 + 10) = *(_OWORD *)((char *)a2 - 22);
              *(_OWORD *)unint64_t v15 = v46;
            }
            else
            {
              *(_OWORD *)long long v133 = *v19;
              *(_OWORD *)&v133[16] = v19[1];
              long long v26 = *v13;
              *(long long *)((char *)v19 + 10) = *(_OWORD *)((char *)a2 - 22);
              *uint64_t v19 = v26;
            }
            *(_OWORD *)((char *)a2 - 22) = *(_OWORD *)&v133[10];
            *uint8x8_t v13 = *(_OWORD *)v133;
LABEL_32:
            --a4;
            if ((a5 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_33;
          }
          if (v20 >= v24) {
            goto LABEL_32;
          }
          *(_OWORD *)__int16 v136 = *(_OWORD *)v15;
          *(_OWORD *)&v136[16] = *(_OWORD *)(v15 + 16);
          long long v29 = *v13;
          *(_OWORD *)(v15 + 10) = *(_OWORD *)((char *)a2 - 22);
          *(_OWORD *)unint64_t v15 = v29;
          *(_OWORD *)((char *)a2 - 22) = *(_OWORD *)&v136[10];
          *uint8x8_t v13 = *(_OWORD *)v136;
          if (*(void *)(v15 + 16) >= *v25) {
            goto LABEL_32;
          }
          *(_OWORD *)long long v137 = *v19;
          *(_OWORD *)&v137[16] = v19[1];
          long long v30 = *(_OWORD *)v15;
          *(long long *)((char *)v19 + 10) = *(_OWORD *)(v15 + 10);
          *uint64_t v19 = v30;
          *(_OWORD *)(v15 + 10) = *(_OWORD *)&v137[10];
          *(_OWORD *)unint64_t v15 = *(_OWORD *)v137;
          --a4;
          if (a5) {
            goto LABEL_33;
          }
LABEL_55:
          unint64_t v47 = *(void *)(v15 + 16);
          if (*(void *)(v15 - 16) < v47) {
            goto LABEL_56;
          }
          __n128 v131 = *(__n128 *)v15;
          if (v47 < *((void *)a2 - 2))
          {
            unint64_t v86 = v15;
            do
            {
              unint64_t v15 = v86 + 32;
              unint64_t v87 = *(void *)(v86 + 48);
              v86 += 32;
            }
            while (v47 >= v87);
          }
          else
          {
            unint64_t v88 = v15 + 32;
            do
            {
              unint64_t v15 = v88;
              if (v88 >= (unint64_t)a2) {
                break;
              }
              unint64_t v89 = *(void *)(v88 + 16);
              v88 += 32;
            }
            while (v47 >= v89);
          }
          uint64_t v90 = a2;
          if (v15 < (unint64_t)a2)
          {
            uint64_t v91 = a2;
            do
            {
              uint64_t v90 = v91 - 2;
              unint64_t v92 = *((void *)v91 - 2);
              v91 -= 2;
            }
            while (v47 < v92);
          }
          uint64_t v93 = *(void *)(a1 + 24);
          while (v15 < (unint64_t)v90)
          {
            *(_OWORD *)long long v155 = *(_OWORD *)v15;
            *(_OWORD *)&v155[16] = *(_OWORD *)(v15 + 16);
            long long v94 = *v90;
            *(_OWORD *)(v15 + 10) = *(_OWORD *)((char *)v90 + 10);
            *(_OWORD *)unint64_t v15 = v94;
            *(_OWORD *)((char *)v90 + 10) = *(_OWORD *)&v155[10];
            *uint64_t v90 = *(_OWORD *)v155;
            do
            {
              unint64_t v95 = *(void *)(v15 + 48);
              v15 += 32;
            }
            while (v47 >= v95);
            do
            {
              unint64_t v96 = *((void *)v90 - 2);
              v90 -= 2;
            }
            while (v47 < v96);
          }
          uint64_t v97 = (__n128 *)(v15 - 32);
          BOOL v6 = v15 - 32 >= a1;
          BOOL v7 = v15 - 32 == a1;
          if (v15 - 32 != a1)
          {
            __n128 v98 = *v97;
            *(_OWORD *)(a1 + 10) = *(_OWORD *)(v15 - 22);
            *(__n128 *)a1 = v98;
          }
          a5 = 0;
          __n128 result = v131;
          *uint64_t v97 = v131;
          *(void *)(v15 - 16) = v47;
          *(_WORD *)(v15 - 8) = v93;
        }
        float v21 = (unint64_t *)(v15 + 16 + 32 * v18);
        unint64_t v22 = *v21;
        if (*v21 >= *(void *)(v15 + 16))
        {
          if (v20 < v22)
          {
            *(_OWORD *)uint64_t v134 = *v19;
            *(_OWORD *)&v134[16] = v19[1];
            long long v27 = *v13;
            *(long long *)((char *)v19 + 10) = *(_OWORD *)((char *)a2 - 22);
            *uint64_t v19 = v27;
            *(_OWORD *)((char *)a2 - 22) = *(_OWORD *)&v134[10];
            *uint8x8_t v13 = *(_OWORD *)v134;
            if (*v21 < *(void *)(v15 + 16))
            {
              *(_OWORD *)int v135 = *(_OWORD *)v15;
              *(_OWORD *)&v135[16] = *(_OWORD *)(v15 + 16);
              long long v28 = *v19;
              *(_OWORD *)(v15 + 10) = *(long long *)((char *)v19 + 10);
              *(_OWORD *)unint64_t v15 = v28;
              *(long long *)((char *)v19 + 10) = *(_OWORD *)&v135[10];
              *uint64_t v19 = *(_OWORD *)v135;
            }
          }
        }
        else
        {
          if (v20 >= v22)
          {
            *(_OWORD *)unint64_t v138 = *(_OWORD *)v15;
            *(_OWORD *)&v138[16] = *(_OWORD *)(v15 + 16);
            long long v31 = *v19;
            *(_OWORD *)(v15 + 10) = *(long long *)((char *)v19 + 10);
            *(_OWORD *)unint64_t v15 = v31;
            *(long long *)((char *)v19 + 10) = *(_OWORD *)&v138[10];
            *uint64_t v19 = *(_OWORD *)v138;
            if (*((void *)a2 - 2) >= *v21) {
              goto LABEL_23;
            }
            *(_OWORD *)long long v132 = *v19;
            *(_OWORD *)&v132[16] = v19[1];
            long long v32 = *v13;
            *(long long *)((char *)v19 + 10) = *(_OWORD *)((char *)a2 - 22);
            *uint64_t v19 = v32;
          }
          else
          {
            *(_OWORD *)long long v132 = *(_OWORD *)v15;
            *(_OWORD *)&v132[16] = *(_OWORD *)(v15 + 16);
            long long v23 = *v13;
            *(_OWORD *)(v15 + 10) = *(_OWORD *)((char *)a2 - 22);
            *(_OWORD *)unint64_t v15 = v23;
          }
          *(_OWORD *)((char *)a2 - 22) = *(_OWORD *)&v132[10];
          *uint8x8_t v13 = *(_OWORD *)v132;
        }
LABEL_23:
        unint64_t v33 = (long long *)(v15 + 32);
        unint64_t v34 = v15 + 32 * v18;
        unint64_t v37 = *(void *)(v34 - 16);
        uint64_t v35 = (_OWORD *)(v34 - 16);
        unint64_t v36 = v37;
        unint64_t v38 = v35 - 1;
        unint64_t v39 = *((void *)a2 - 6);
        if (v37 >= *(void *)(v15 + 48))
        {
          if (v39 < v36)
          {
            *(_OWORD *)uint64_t v140 = *v38;
            *(_OWORD *)&v140[16] = *v35;
            long long v42 = *v129;
            *(_OWORD *)((char *)v35 - 6) = *(_OWORD *)((char *)a2 - 54);
            long long *v38 = v42;
            *(_OWORD *)((char *)a2 - 54) = *(_OWORD *)&v140[10];
            *uint64_t v129 = *(_OWORD *)v140;
            if (*(void *)v35 < *(void *)(v15 + 48))
            {
              *(_OWORD *)uint64_t v141 = *v33;
              long long v43 = *v33;
              *(_OWORD *)&v141[16] = *(_OWORD *)(v15 + 48);
              long long v44 = *(_OWORD *)((char *)v35 - 6);
              *unint64_t v33 = *v38;
              *(_OWORD *)(v15 + 42) = v44;
              *(_OWORD *)((char *)v35 - 6) = *(_OWORD *)&v141[10];
              long long *v38 = v43;
            }
          }
        }
        else if (v39 >= v36)
        {
          *(_OWORD *)long long v143 = *v33;
          long long v48 = *v33;
          *(_OWORD *)&v143[16] = *(_OWORD *)(v15 + 48);
          long long v49 = *(_OWORD *)((char *)v35 - 6);
          *unint64_t v33 = *v38;
          *(_OWORD *)(v15 + 42) = v49;
          *(_OWORD *)((char *)v35 - 6) = *(_OWORD *)&v143[10];
          long long *v38 = v48;
          if (*((void *)a2 - 6) < *(void *)v35)
          {
            *(_OWORD *)uint64_t v144 = *v38;
            *(_OWORD *)&v144[16] = *v35;
            long long v50 = *v129;
            *(_OWORD *)((char *)v35 - 6) = *(_OWORD *)((char *)a2 - 54);
            long long *v38 = v50;
            *(_OWORD *)((char *)a2 - 54) = *(_OWORD *)&v144[10];
            *uint64_t v129 = *(_OWORD *)v144;
          }
        }
        else
        {
          *(_OWORD *)uint64_t v139 = *v33;
          long long v40 = *v33;
          *(_OWORD *)&v139[16] = *(_OWORD *)(v15 + 48);
          long long v41 = *(_OWORD *)((char *)a2 - 54);
          *unint64_t v33 = *v129;
          *(_OWORD *)(v15 + 42) = v41;
          *(_OWORD *)((char *)a2 - 54) = *(_OWORD *)&v139[10];
          *uint64_t v129 = v40;
        }
        uint64_t v51 = (long long *)(v15 + 64);
        unint64_t v52 = v15 + 32 * v18;
        unint64_t v55 = *(void *)(v52 + 48);
        BOOL v53 = (_OWORD *)(v52 + 48);
        unint64_t v54 = v55;
        char v56 = v53 - 1;
        unint64_t v57 = *((void *)a2 - 10);
        if (v55 >= *(void *)(v15 + 80))
        {
          if (v57 < v54)
          {
            *(_OWORD *)unsigned int v146 = *v56;
            *(_OWORD *)&v146[16] = *v53;
            long long v60 = *v14;
            *(_OWORD *)((char *)v53 - 6) = *(_OWORD *)((char *)a2 - 86);
            *char v56 = v60;
            *(_OWORD *)((char *)a2 - 86) = *(_OWORD *)&v146[10];
            long long *v14 = *(_OWORD *)v146;
            if (*(void *)v53 < *(void *)(v15 + 80))
            {
              *(_OWORD *)unsigned int v147 = *v51;
              long long v61 = *v51;
              *(_OWORD *)&v147[16] = *(_OWORD *)(v15 + 80);
              long long v62 = *(_OWORD *)((char *)v53 - 6);
              *uint64_t v51 = *v56;
              *(_OWORD *)(v15 + 74) = v62;
              *(_OWORD *)((char *)v53 - 6) = *(_OWORD *)&v147[10];
              *char v56 = v61;
            }
          }
        }
        else
        {
          if (v57 >= v54)
          {
            *(_OWORD *)BOOL v148 = *v51;
            long long v63 = *v51;
            *(_OWORD *)&v148[16] = *(_OWORD *)(v15 + 80);
            long long v64 = *(_OWORD *)((char *)v53 - 6);
            *uint64_t v51 = *v56;
            *(_OWORD *)(v15 + 74) = v64;
            *(_OWORD *)((char *)v53 - 6) = *(_OWORD *)&v148[10];
            *char v56 = v63;
            if (*((void *)a2 - 10) >= *(void *)v53) {
              goto LABEL_45;
            }
            *(_OWORD *)uint64_t v145 = *v56;
            *(_OWORD *)&v145[16] = *v53;
            long long v65 = *v14;
            *(_OWORD *)((char *)v53 - 6) = *(_OWORD *)((char *)a2 - 86);
            *char v56 = v65;
            long long v58 = *(_OWORD *)v145;
          }
          else
          {
            long long v58 = *v51;
            *(_OWORD *)uint64_t v145 = *v51;
            *(_OWORD *)&v145[16] = *(_OWORD *)(v15 + 80);
            long long v59 = *(_OWORD *)((char *)a2 - 86);
            *uint64_t v51 = *v14;
            *(_OWORD *)(v15 + 74) = v59;
          }
          *(_OWORD *)((char *)a2 - 86) = *(_OWORD *)&v145[10];
          long long *v14 = v58;
        }
LABEL_45:
        unint64_t v66 = *v21;
        unint64_t v67 = *(void *)v53;
        if (*v21 >= *(void *)v35)
        {
          if (v67 < v66)
          {
            *(_OWORD *)long long v150 = *v19;
            *(_OWORD *)&v150[16] = v19[1];
            *uint64_t v19 = *v56;
            *(long long *)((char *)v19 + 10) = *(_OWORD *)((char *)v53 - 6);
            *(_OWORD *)((char *)v53 - 6) = *(_OWORD *)&v150[10];
            *char v56 = *(_OWORD *)v150;
            if (*v21 < *(void *)v35)
            {
              *(_OWORD *)long long v151 = *v38;
              *(_OWORD *)&v151[16] = *v35;
              long long *v38 = *v19;
              *(_OWORD *)((char *)v35 - 6) = *(long long *)((char *)v19 + 10);
              *(long long *)((char *)v19 + 10) = *(_OWORD *)&v151[10];
              *uint64_t v19 = *(_OWORD *)v151;
            }
          }
        }
        else
        {
          if (v67 >= v66)
          {
            *(_OWORD *)long long v152 = *v38;
            *(_OWORD *)&v152[16] = *v35;
            long long *v38 = *v19;
            *(_OWORD *)((char *)v35 - 6) = *(long long *)((char *)v19 + 10);
            *(long long *)((char *)v19 + 10) = *(_OWORD *)&v152[10];
            *uint64_t v19 = *(_OWORD *)v152;
            if (*(void *)v53 >= *v21) {
              goto LABEL_54;
            }
            *(_OWORD *)BOOL v149 = *v19;
            *(_OWORD *)&v149[16] = v19[1];
            *uint64_t v19 = *v56;
            *(long long *)((char *)v19 + 10) = *(_OWORD *)((char *)v53 - 6);
          }
          else
          {
            *(_OWORD *)BOOL v149 = *v38;
            *(_OWORD *)&v149[16] = *v35;
            long long *v38 = *v56;
            *(_OWORD *)((char *)v35 - 6) = *(_OWORD *)((char *)v53 - 6);
          }
          *(_OWORD *)((char *)v53 - 6) = *(_OWORD *)&v149[10];
          *char v56 = *(_OWORD *)v149;
        }
LABEL_54:
        *(_OWORD *)uint64_t v153 = *(_OWORD *)v15;
        *(_OWORD *)&v153[16] = *(_OWORD *)(v15 + 16);
        long long v68 = *v19;
        *(_OWORD *)(v15 + 10) = *(long long *)((char *)v19 + 10);
        *(_OWORD *)unint64_t v15 = v68;
        *(long long *)((char *)v19 + 10) = *(_OWORD *)&v153[10];
        *uint64_t v19 = *(_OWORD *)v153;
        --a4;
        if ((a5 & 1) == 0) {
          goto LABEL_55;
        }
LABEL_33:
        unint64_t v47 = *(void *)(v15 + 16);
LABEL_56:
        uint64_t v69 = 0;
        __n128 v130 = *(__n128 *)v15;
        uint64_t v70 = *(void *)(v15 + 24);
        do
        {
          unint64_t v71 = *(void *)(v15 + v69 + 48);
          v69 += 32;
        }
        while (v71 < v47);
        unint64_t v72 = v15 + v69;
        unint64_t v73 = a2;
        if (v69 == 32)
        {
          uint64_t v76 = a2;
          while (v72 < (unint64_t)v76)
          {
            uint64_t v74 = v76 - 2;
            unint64_t v77 = *((void *)v76 - 2);
            v76 -= 2;
            if (v77 < v47) {
              goto LABEL_64;
            }
          }
          uint64_t v74 = v76;
          unint64_t v15 = v72;
        }
        else
        {
          do
          {
            uint64_t v74 = v73 - 2;
            unint64_t v75 = *((void *)v73 - 2);
            v73 -= 2;
          }
          while (v75 >= v47);
LABEL_64:
          unint64_t v15 = v72;
          if (v72 < (unint64_t)v74)
          {
            unint64_t v78 = v74;
            do
            {
              *(_OWORD *)long long v154 = *(_OWORD *)v15;
              *(_OWORD *)&v154[16] = *(_OWORD *)(v15 + 16);
              long long v79 = *v78;
              *(_OWORD *)(v15 + 10) = *(_OWORD *)((char *)v78 + 10);
              *(_OWORD *)unint64_t v15 = v79;
              *(_OWORD *)((char *)v78 + 10) = *(_OWORD *)&v154[10];
              *unint64_t v78 = *(_OWORD *)v154;
              do
              {
                unint64_t v80 = *(void *)(v15 + 48);
                v15 += 32;
              }
              while (v80 < v47);
              do
              {
                unint64_t v81 = *((void *)v78 - 2);
                v78 -= 2;
              }
              while (v81 >= v47);
            }
            while (v15 < (unint64_t)v78);
          }
        }
        uint64_t v82 = (__n128 *)(v15 - 32);
        if (v15 - 32 != a1)
        {
          __n128 v83 = *v82;
          *(_OWORD *)(a1 + 10) = *(_OWORD *)(v15 - 22);
          *(__n128 *)a1 = v83;
        }
        *uint64_t v82 = v130;
        *(void *)(v15 - 16) = v47;
        *(_WORD *)(v15 - 8) = v70;
        if (v72 >= (unint64_t)v74) {
          break;
        }
LABEL_75:
        sub_3E3DE0(a1, v15 - 32, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v84 = sub_3E4B0C(a1, v15 - 32, v130);
      if (sub_3E4B0C(v15, (uint64_t)a2, v85)) {
        break;
      }
      if (!v84) {
        goto LABEL_75;
      }
    }
    a2 = (_OWORD *)(v15 - 32);
    if (!v84) {
      continue;
    }
    return result;
  }
}

BOOL sub_3E4B0C(uint64_t a1, uint64_t a2, __n128 a3)
{
  switch((a2 - a1) >> 5)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      if (*(void *)(a2 - 16) < *(void *)(a1 + 16))
      {
        *(_OWORD *)long long v46 = *(_OWORD *)a1;
        long long v10 = *(_OWORD *)a1;
        *(_OWORD *)&v46[16] = *(_OWORD *)(a1 + 16);
        long long v11 = *(_OWORD *)(a2 - 22);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 10) = v11;
        *(_OWORD *)(a2 - 32) = v10;
        *(_OWORD *)(a2 - 22) = *(_OWORD *)&v46[10];
      }
      return 1;
    case 3:
      unint64_t v12 = (long long *)(a1 + 32);
      uint8x8_t v13 = (long long *)(a2 - 32);
      unint64_t v14 = *(void *)(a1 + 48);
      unint64_t v15 = *(void *)(a2 - 16);
      if (v14 >= *(void *)(a1 + 16))
      {
        if (v15 >= v14) {
          return 1;
        }
        long long v24 = *v12;
        *(_OWORD *)uint64_t v51 = *v12;
        *(_OWORD *)&v51[16] = *(_OWORD *)(a1 + 48);
        long long v25 = *(_OWORD *)(a2 - 22);
        *unint64_t v12 = *v13;
        goto LABEL_46;
      }
      if (v15 >= v14)
      {
        *(_OWORD *)char v56 = *(_OWORD *)a1;
        long long v38 = *(_OWORD *)a1;
        *(_OWORD *)&v56[16] = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *v12;
        *(_OWORD *)(a1 + 10) = *(_OWORD *)(a1 + 42);
        *unint64_t v12 = v38;
        *(_OWORD *)(a1 + 42) = *(_OWORD *)&v56[10];
        if (*(void *)(a2 - 16) >= *(void *)(a1 + 48)) {
          return 1;
        }
        long long v16 = *v12;
        *(_OWORD *)unint64_t v47 = *v12;
        *(_OWORD *)&v47[16] = *(_OWORD *)(a1 + 48);
        long long v39 = *(_OWORD *)(a2 - 22);
        *unint64_t v12 = *v13;
        *(_OWORD *)(a1 + 42) = v39;
      }
      else
      {
        long long v16 = *(_OWORD *)a1;
        *(_OWORD *)unint64_t v47 = *(_OWORD *)a1;
        *(_OWORD *)&v47[16] = *(_OWORD *)(a1 + 16);
        long long v17 = *(_OWORD *)(a2 - 22);
        *(_OWORD *)a1 = *v13;
        *(_OWORD *)(a1 + 10) = v17;
      }
      *uint8x8_t v13 = v16;
      *(_OWORD *)(a2 - 22) = *(_OWORD *)&v47[10];
      return 1;
    case 4:
      unint64_t v12 = (long long *)(a1 + 32);
      uint8x8_t v13 = (long long *)(a1 + 64);
      unint64_t v18 = *(void *)(a1 + 16);
      unint64_t v19 = *(void *)(a1 + 48);
      unint64_t v20 = *(void *)(a1 + 80);
      if (v19 >= v18)
      {
        if (v20 < v19)
        {
          *(_OWORD *)unint64_t v52 = *v12;
          long long v26 = *v12;
          *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 48);
          *unint64_t v12 = *v13;
          *(_OWORD *)(a1 + 42) = *(_OWORD *)(a1 + 74);
          *uint8x8_t v13 = v26;
          *(_OWORD *)(a1 + 74) = *(_OWORD *)&v52[10];
          if (*(void *)(a1 + 48) < v18)
          {
            *(_OWORD *)BOOL v53 = *(_OWORD *)a1;
            long long v27 = *(_OWORD *)a1;
            *(_OWORD *)&v53[16] = *(_OWORD *)(a1 + 16);
            *(_OWORD *)a1 = *v12;
            *(_OWORD *)(a1 + 10) = *(_OWORD *)(a1 + 42);
            *unint64_t v12 = v27;
            *(_OWORD *)(a1 + 42) = *(_OWORD *)&v53[10];
          }
        }
      }
      else
      {
        if (v20 >= v19)
        {
          *(_OWORD *)unint64_t v57 = *(_OWORD *)a1;
          long long v40 = *(_OWORD *)a1;
          *(_OWORD *)&v57[16] = *(_OWORD *)(a1 + 16);
          *(_OWORD *)a1 = *v12;
          *(_OWORD *)(a1 + 10) = *(_OWORD *)(a1 + 42);
          *unint64_t v12 = v40;
          *(_OWORD *)(a1 + 42) = *(_OWORD *)&v57[10];
          if (v20 >= *(void *)(a1 + 48)) {
            goto LABEL_43;
          }
          long long v21 = *v12;
          *(_OWORD *)long long v48 = *v12;
          *(_OWORD *)&v48[16] = *(_OWORD *)(a1 + 48);
          *unint64_t v12 = *v13;
          *(_OWORD *)(a1 + 42) = *(_OWORD *)(a1 + 74);
        }
        else
        {
          long long v21 = *(_OWORD *)a1;
          *(_OWORD *)long long v48 = *(_OWORD *)a1;
          *(_OWORD *)&v48[16] = *(_OWORD *)(a1 + 16);
          *(_OWORD *)a1 = *v13;
          *(_OWORD *)(a1 + 10) = *(_OWORD *)(a1 + 74);
        }
        *uint8x8_t v13 = v21;
        *(_OWORD *)(a1 + 74) = *(_OWORD *)&v48[10];
      }
LABEL_43:
      if (*(void *)(a2 - 16) >= *(void *)(a1 + 80)) {
        return 1;
      }
      long long v41 = (_OWORD *)(a2 - 32);
      *(_OWORD *)long long v58 = *v13;
      long long v42 = *v13;
      *(_OWORD *)&v58[16] = *(_OWORD *)(a1 + 80);
      long long v43 = *(_OWORD *)(a2 - 22);
      *uint8x8_t v13 = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 74) = v43;
      *long long v41 = v42;
      *(_OWORD *)((char *)v41 + 10) = *(_OWORD *)&v58[10];
      if (*(void *)(a1 + 80) >= *(void *)(a1 + 48)) {
        return 1;
      }
      long long v24 = *v12;
      *(_OWORD *)uint64_t v51 = *v12;
      *(_OWORD *)&v51[16] = *(_OWORD *)(a1 + 48);
      *unint64_t v12 = *v13;
      long long v25 = *(_OWORD *)(a1 + 74);
LABEL_46:
      *(long long *)((char *)v12 + 10) = v25;
      *uint8x8_t v13 = v24;
      *(long long *)((char *)v13 + 10) = *(_OWORD *)&v51[10];
      if (*(void *)(a1 + 48) >= *(void *)(a1 + 16)) {
        return 1;
      }
      *(_OWORD *)long long v59 = *(_OWORD *)a1;
      long long v44 = *(_OWORD *)a1;
      *(_OWORD *)&v59[16] = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a1 = *v12;
      *(_OWORD *)(a1 + 10) = *(long long *)((char *)v12 + 10);
      *unint64_t v12 = v44;
      *(long long *)((char *)v12 + 10) = *(_OWORD *)&v59[10];
      return 1;
    case 5:
      sub_3E501C((_OWORD *)a1, (long long *)(a1 + 32), (long long *)(a1 + 64), (long long *)(a1 + 96), (long long *)(a2 - 32), a3);
      return 1;
    default:
      uint64_t v4 = a1 + 64;
      unint64_t v5 = (_OWORD *)(a1 + 32);
      unint64_t v6 = *(void *)(a1 + 16);
      unint64_t v7 = *(void *)(a1 + 48);
      unint64_t v8 = *(void *)(a1 + 80);
      if (v7 >= v6)
      {
        if (v8 < v7)
        {
          *(_OWORD *)long long v49 = *v5;
          long long v22 = *v5;
          *(_OWORD *)&v49[16] = *(_OWORD *)(a1 + 48);
          _OWORD *v5 = *(_OWORD *)v4;
          *(_OWORD *)(a1 + 42) = *(_OWORD *)(a1 + 74);
          *(_OWORD *)uint64_t v4 = v22;
          *(_OWORD *)(a1 + 74) = *(_OWORD *)&v49[10];
          if (*(void *)(a1 + 48) < v6)
          {
            *(_OWORD *)long long v50 = *(_OWORD *)a1;
            long long v23 = *(_OWORD *)a1;
            *(_OWORD *)&v50[16] = *(_OWORD *)(a1 + 16);
            *(_OWORD *)a1 = *v5;
            *(_OWORD *)(a1 + 10) = *(_OWORD *)(a1 + 42);
            _OWORD *v5 = v23;
            *(_OWORD *)(a1 + 42) = *(_OWORD *)&v50[10];
          }
        }
      }
      else
      {
        if (v8 >= v7)
        {
          *(_OWORD *)unint64_t v54 = *(_OWORD *)a1;
          long long v28 = *(_OWORD *)a1;
          *(_OWORD *)&v54[16] = *(_OWORD *)(a1 + 16);
          *(_OWORD *)a1 = *v5;
          *(_OWORD *)(a1 + 10) = *(_OWORD *)(a1 + 42);
          _OWORD *v5 = v28;
          *(_OWORD *)(a1 + 42) = *(_OWORD *)&v54[10];
          if (v8 >= *(void *)(a1 + 48)) {
            goto LABEL_27;
          }
          long long v9 = *v5;
          *(_OWORD *)long long v45 = *v5;
          *(_OWORD *)&v45[16] = *(_OWORD *)(a1 + 48);
          _OWORD *v5 = *(_OWORD *)v4;
          *(_OWORD *)(a1 + 42) = *(_OWORD *)(a1 + 74);
        }
        else
        {
          long long v9 = *(_OWORD *)a1;
          *(_OWORD *)long long v45 = *(_OWORD *)a1;
          *(_OWORD *)&v45[16] = *(_OWORD *)(a1 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v4;
          *(_OWORD *)(a1 + 10) = *(_OWORD *)(a1 + 74);
        }
        *(_OWORD *)uint64_t v4 = v9;
        *(_OWORD *)(a1 + 74) = *(_OWORD *)&v45[10];
      }
LABEL_27:
      uint64_t v29 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v30 = 0;
      int v31 = 0;
      break;
  }
  while (1)
  {
    unint64_t v33 = *(void *)(v4 + 16);
    unint64_t v34 = *(void *)(v29 + 16);
    if (v34 < v33)
    {
      long long v55 = *(_OWORD *)v29;
      __int16 v35 = *(_WORD *)(v29 + 24);
      uint64_t v36 = v30;
      do
      {
        uint64_t v37 = a1 + v36;
        *(_OWORD *)(v37 + 96) = *(_OWORD *)(a1 + v36 + 64);
        *(_OWORD *)(v37 + 106) = *(_OWORD *)(a1 + v36 + 74);
        if (v36 == -64)
        {
          uint64_t v32 = a1;
          goto LABEL_30;
        }
        v36 -= 32;
      }
      while (v34 < *(void *)(v37 + 48));
      uint64_t v32 = a1 + v36 + 96;
LABEL_30:
      *(_OWORD *)uint64_t v32 = v55;
      *(void *)(v32 + 16) = v34;
      *(_WORD *)(v32 + 24) = v35;
      if (++v31 == 8) {
        return v29 + 32 == a2;
      }
    }
    uint64_t v4 = v29;
    v30 += 32;
    v29 += 32;
    if (v29 == a2) {
      return 1;
    }
  }
}

__n128 sub_3E501C(_OWORD *a1, long long *a2, long long *a3, long long *a4, long long *a5, __n128 result)
{
  unint64_t v6 = *((void *)a2 + 2);
  unint64_t v7 = *((void *)a3 + 2);
  if (v6 >= *((void *)a1 + 2))
  {
    if (v7 < v6)
    {
      *(_OWORD *)uint64_t v32 = *a2;
      long long v10 = *a2;
      *(_OWORD *)&v32[16] = a2[1];
      long long v11 = *(long long *)((char *)a3 + 10);
      *a2 = *a3;
      *(long long *)((char *)a2 + 10) = v11;
      *a3 = v10;
      __n128 result = *(__n128 *)&v32[10];
      *(long long *)((char *)a3 + 10) = *(_OWORD *)&v32[10];
      if (*((void *)a2 + 2) < *((void *)a1 + 2))
      {
        *(_OWORD *)unint64_t v33 = *a1;
        long long v12 = *a1;
        *(_OWORD *)&v33[16] = a1[1];
        long long v13 = *(long long *)((char *)a2 + 10);
        *a1 = *a2;
        *(_OWORD *)((char *)a1 + 10) = v13;
        *a2 = v12;
        __n128 result = *(__n128 *)&v33[10];
        *(long long *)((char *)a2 + 10) = *(_OWORD *)&v33[10];
      }
    }
  }
  else
  {
    if (v7 < v6)
    {
      long long v8 = *a1;
      *(_OWORD *)int v31 = *a1;
      *(_OWORD *)&v31[16] = a1[1];
      long long v9 = *(long long *)((char *)a3 + 10);
      *a1 = *a3;
      *(_OWORD *)((char *)a1 + 10) = v9;
LABEL_9:
      *a3 = v8;
      __n128 result = *(__n128 *)&v31[10];
      *(long long *)((char *)a3 + 10) = *(_OWORD *)&v31[10];
      goto LABEL_10;
    }
    *(_OWORD *)unint64_t v34 = *a1;
    long long v14 = *a1;
    *(_OWORD *)&v34[16] = a1[1];
    long long v15 = *(long long *)((char *)a2 + 10);
    *a1 = *a2;
    *(_OWORD *)((char *)a1 + 10) = v15;
    *a2 = v14;
    __n128 result = *(__n128 *)&v34[10];
    *(long long *)((char *)a2 + 10) = *(_OWORD *)&v34[10];
    if (*((void *)a3 + 2) < *((void *)a2 + 2))
    {
      long long v8 = *a2;
      *(_OWORD *)int v31 = *a2;
      *(_OWORD *)&v31[16] = a2[1];
      long long v16 = *(long long *)((char *)a3 + 10);
      *a2 = *a3;
      *(long long *)((char *)a2 + 10) = v16;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*((void *)a4 + 2) < *((void *)a3 + 2))
  {
    *(_OWORD *)__int16 v35 = *a3;
    long long v17 = *a3;
    *(_OWORD *)&v35[16] = a3[1];
    long long v18 = *(long long *)((char *)a4 + 10);
    *a3 = *a4;
    *(long long *)((char *)a3 + 10) = v18;
    *a4 = v17;
    __n128 result = *(__n128 *)&v35[10];
    *(long long *)((char *)a4 + 10) = *(_OWORD *)&v35[10];
    if (*((void *)a3 + 2) < *((void *)a2 + 2))
    {
      *(_OWORD *)uint64_t v36 = *a2;
      long long v19 = *a2;
      *(_OWORD *)&v36[16] = a2[1];
      long long v20 = *(long long *)((char *)a3 + 10);
      *a2 = *a3;
      *(long long *)((char *)a2 + 10) = v20;
      *a3 = v19;
      __n128 result = *(__n128 *)&v36[10];
      *(long long *)((char *)a3 + 10) = *(_OWORD *)&v36[10];
      if (*((void *)a2 + 2) < *((void *)a1 + 2))
      {
        *(_OWORD *)uint64_t v37 = *a1;
        long long v21 = *a1;
        *(_OWORD *)&v37[16] = a1[1];
        long long v22 = *(long long *)((char *)a2 + 10);
        *a1 = *a2;
        *(_OWORD *)((char *)a1 + 10) = v22;
        *a2 = v21;
        __n128 result = *(__n128 *)&v37[10];
        *(long long *)((char *)a2 + 10) = *(_OWORD *)&v37[10];
      }
    }
  }
  if (*((void *)a5 + 2) < *((void *)a4 + 2))
  {
    *(_OWORD *)long long v38 = *a4;
    long long v23 = *a4;
    *(_OWORD *)&v38[16] = a4[1];
    long long v24 = *(long long *)((char *)a5 + 10);
    *a4 = *a5;
    *(long long *)((char *)a4 + 10) = v24;
    *a5 = v23;
    __n128 result = *(__n128 *)&v38[10];
    *(long long *)((char *)a5 + 10) = *(_OWORD *)&v38[10];
    if (*((void *)a4 + 2) < *((void *)a3 + 2))
    {
      *(_OWORD *)long long v39 = *a3;
      long long v25 = *a3;
      *(_OWORD *)&v39[16] = a3[1];
      long long v26 = *(long long *)((char *)a4 + 10);
      *a3 = *a4;
      *(long long *)((char *)a3 + 10) = v26;
      *a4 = v25;
      __n128 result = *(__n128 *)&v39[10];
      *(long long *)((char *)a4 + 10) = *(_OWORD *)&v39[10];
      if (*((void *)a3 + 2) < *((void *)a2 + 2))
      {
        *(_OWORD *)long long v40 = *a2;
        long long v27 = *a2;
        *(_OWORD *)&v40[16] = a2[1];
        long long v28 = *(long long *)((char *)a3 + 10);
        *a2 = *a3;
        *(long long *)((char *)a2 + 10) = v28;
        *a3 = v27;
        __n128 result = *(__n128 *)&v40[10];
        *(long long *)((char *)a3 + 10) = *(_OWORD *)&v40[10];
        if (*((void *)a2 + 2) < *((void *)a1 + 2))
        {
          *(_OWORD *)long long v41 = *a1;
          long long v29 = *a1;
          *(_OWORD *)&v41[16] = a1[1];
          long long v30 = *(long long *)((char *)a2 + 10);
          *a1 = *a2;
          *(_OWORD *)((char *)a1 + 10) = v30;
          *a2 = v29;
          __n128 result = *(__n128 *)&v41[10];
          *(long long *)((char *)a2 + 10) = *(_OWORD *)&v41[10];
        }
      }
    }
  }
  return result;
}

_OWORD *sub_3E5288(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  if ((_OWORD *)a1 == a2) {
    return a3;
  }
  uint64_t v3 = (uint64_t)a2 - a1;
  uint64_t v4 = ((uint64_t)a2 - a1) >> 5;
  if ((uint64_t)a2 - a1 >= 33 && (unint64_t)v3 >= 0x40)
  {
    int64_t v44 = (unint64_t)(v4 - 2) >> 1;
    int64_t v45 = v44;
    do
    {
      if (v44 >= v45)
      {
        uint64_t v46 = (2 * v45) | 1;
        unint64_t v47 = (long long *)(a1 + 32 * v46);
        if (2 * v45 + 2 < v4)
        {
          unint64_t v48 = *((void *)v47 + 6);
          unint64_t v49 = *((void *)v47 + 2);
          v47 += 2 * (v49 < v48);
          if (v49 < v48) {
            uint64_t v46 = 2 * v45 + 2;
          }
        }
        unint64_t v50 = *(void *)(a1 + 32 * v45 + 16);
        if (*((void *)v47 + 2) >= v50)
        {
          uint64_t v51 = (long long *)(a1 + 32 * v45);
          long long v63 = *v51;
          __int16 v52 = *((_WORD *)v51 + 12);
          do
          {
            BOOL v53 = v51;
            uint64_t v51 = v47;
            long long v54 = *v47;
            *(_OWORD *)((char *)v53 + 10) = *(long long *)((char *)v47 + 10);
            *BOOL v53 = v54;
            if (v44 < v46) {
              break;
            }
            uint64_t v55 = (2 * v46) | 1;
            unint64_t v47 = (long long *)(a1 + 32 * v55);
            uint64_t v56 = 2 * v46 + 2;
            if (v56 < v4)
            {
              unint64_t v57 = *((void *)v47 + 6);
              unint64_t v58 = *((void *)v47 + 2);
              v47 += 2 * (v58 < v57);
              if (v58 < v57) {
                uint64_t v55 = v56;
              }
            }
            uint64_t v46 = v55;
          }
          while (*((void *)v47 + 2) >= v50);
          *uint64_t v51 = v63;
          *((void *)v51 + 2) = v50;
          *((_WORD *)v51 + 12) = v52;
        }
      }
      BOOL v27 = v45-- <= 0;
    }
    while (!v27);
  }
  unint64_t v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 64)
    {
      unint64_t v6 = a2;
      do
      {
        if (*((void *)v6 + 2) < *(void *)(a1 + 16))
        {
          *(_OWORD *)long long v59 = *v6;
          long long v7 = *v6;
          *(_OWORD *)&v59[16] = v6[1];
          long long v8 = *(_OWORD *)(a1 + 10);
          *unint64_t v6 = *(_OWORD *)a1;
          *(_OWORD *)((char *)v6 + 10) = v8;
          *(_OWORD *)a1 = v7;
          *(_OWORD *)(a1 + 10) = *(_OWORD *)&v59[10];
        }
        v6 += 2;
      }
      while (v6 != a3);
LABEL_28:
      unint64_t v5 = a3;
      goto LABEL_29;
    }
    long long v9 = a2;
    while (1)
    {
      if (*((void *)v9 + 2) < *(void *)(a1 + 16))
      {
        *(_OWORD *)long long v60 = *v9;
        long long v10 = *v9;
        *(_OWORD *)&v60[16] = v9[1];
        long long v11 = *(_OWORD *)(a1 + 10);
        *long long v9 = *(_OWORD *)a1;
        *(_OWORD *)((char *)v9 + 10) = v11;
        *(_OWORD *)a1 = v10;
        *(_OWORD *)(a1 + 10) = *(_OWORD *)&v60[10];
        if (v3 == 64)
        {
          uint64_t v12 = a1 + 32;
          int64_t v13 = 1;
          unint64_t v14 = *(void *)(a1 + 16);
          if (*(void *)(a1 + 48) >= v14) {
            goto LABEL_21;
          }
        }
        else
        {
          unint64_t v15 = *(void *)(a1 + 80);
          unint64_t v16 = *(void *)(a1 + 48);
          BOOL v17 = v16 >= v15;
          uint64_t v12 = a1 + 32 + 32 * (v16 < v15);
          if (v17) {
            int64_t v13 = 1;
          }
          else {
            int64_t v13 = 2;
          }
          unint64_t v14 = *(void *)(a1 + 16);
          if (*(void *)(v12 + 16) >= v14)
          {
LABEL_21:
            long long v61 = *(_OWORD *)a1;
            __int16 v18 = *(_WORD *)(a1 + 24);
            uint64_t v19 = a1;
            do
            {
              long long v20 = (_OWORD *)v19;
              uint64_t v19 = v12;
              long long v21 = *(_OWORD *)v12;
              *(_OWORD *)((char *)v20 + 10) = *(_OWORD *)(v12 + 10);
              *long long v20 = v21;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v13) {
                break;
              }
              uint64_t v22 = (2 * v13) | 1;
              uint64_t v12 = a1 + 32 * v22;
              uint64_t v23 = 2 * v13 + 2;
              if (v23 < v4)
              {
                unint64_t v24 = *(void *)(v12 + 48);
                unint64_t v25 = *(void *)(v12 + 16);
                v12 += 32 * (v25 < v24);
                if (v25 < v24) {
                  uint64_t v22 = v23;
                }
              }
              int64_t v13 = v22;
            }
            while (*(void *)(v12 + 16) >= v14);
            *(_OWORD *)uint64_t v19 = v61;
            *(void *)(v19 + 16) = v14;
            *(_WORD *)(v19 + 24) = v18;
          }
        }
      }
      v9 += 2;
      if (v9 == a3) {
        goto LABEL_28;
      }
    }
  }
LABEL_29:
  if (v3 >= 33)
  {
    uint64_t v26 = (unint64_t)v3 >> 5;
    do
    {
      uint64_t v28 = 0;
      *(_OWORD *)long long v62 = *(_OWORD *)a1;
      *(_OWORD *)&v62[16] = *(_OWORD *)(a1 + 16);
      long long v29 = (_OWORD *)a1;
      do
      {
        int v31 = &v29[2 * v28 + 2];
        uint64_t v32 = (2 * v28) | 1;
        uint64_t v33 = 2 * v28 + 2;
        if (v33 < v26)
        {
          unint64_t v34 = *((void *)v31 + 6);
          unint64_t v35 = *((void *)v31 + 2);
          v31 += 2 * (v35 < v34);
          if (v35 < v34) {
            uint64_t v32 = v33;
          }
        }
        long long v30 = *v31;
        *(_OWORD *)((char *)v29 + 10) = *(_OWORD *)((char *)v31 + 10);
        *long long v29 = v30;
        long long v29 = v31;
        uint64_t v28 = v32;
      }
      while (v32 <= (uint64_t)((unint64_t)(v26 - 2) >> 1));
      a2 -= 2;
      if (v31 == a2)
      {
        *(_OWORD *)((char *)v31 + 10) = *(_OWORD *)&v62[10];
        _OWORD *v31 = *(_OWORD *)v62;
      }
      else
      {
        long long v36 = *a2;
        *(_OWORD *)((char *)v31 + 10) = *(_OWORD *)((char *)a2 + 10);
        _OWORD *v31 = v36;
        *a2 = *(_OWORD *)v62;
        *(_OWORD *)((char *)a2 + 10) = *(_OWORD *)&v62[10];
        uint64_t v37 = (uint64_t)v31 - a1 + 32;
        if (v37 >= 33)
        {
          unint64_t v38 = (((unint64_t)v37 >> 5) - 2) >> 1;
          unint64_t v39 = *((void *)v31 + 2);
          if (*(void *)(a1 + 32 * v38 + 16) < v39)
          {
            long long v64 = *v31;
            __int16 v40 = *((_WORD *)v31 + 12);
            do
            {
              long long v41 = v31;
              int v31 = (_OWORD *)(a1 + 32 * v38);
              long long v42 = *v31;
              *(_OWORD *)((char *)v41 + 10) = *(_OWORD *)((char *)v31 + 10);
              *long long v41 = v42;
              if (!v38) {
                break;
              }
              unint64_t v38 = (v38 - 1) >> 1;
            }
            while (*(void *)(a1 + 32 * v38 + 16) < v39);
            _OWORD *v31 = v64;
            *((void *)v31 + 2) = v39;
            *((_WORD *)v31 + 12) = v40;
          }
        }
      }
      BOOL v27 = v26-- <= 2;
    }
    while (!v27);
  }
  return v5;
}

void sub_3E56A4(uint64_t a1, unint64_t *a2)
{
  uint64_t v3 = *(uint64_t **)a1;
  uint64_t v4 = a2[1];
  unint64_t v17 = *a2;
  sub_3E5954((uint64_t)(v3 + 2), &v17, (uint64_t)&v16);
  uint64_t v5 = *(void *)(a1 + 8);
  int v6 = sub_46E210((uint64_t *)v5, 0, v4, 0);
  int v7 = *(_DWORD *)(v5 + 512);
  if (v6 < 0) {
    char v8 = -5;
  }
  else {
    char v8 = 5;
  }
  uint64_t v9 = *v3;
  uint64_t v10 = sub_46C8EC(*(void **)(a1 + 8), v4);
  sub_3BDCD8(v9, *(unsigned int *)(v10 + 32) | ((unint64_t)*(unsigned __int16 *)(v10 + 36) << 32), __p);
  unint64_t v11 = v19;
  if ((v19 & 0x80u) != 0) {
    unint64_t v11 = (unint64_t)__p[1];
  }
  if (v11) {
    sub_26A18((uint64_t)v14, (const char *)__p);
  }
  else {
    sub_26908((uint64_t)v14);
  }
  int v12 = 103 * (char)(v8 + v6 % 10);
  int v13 = v6 / 10 + v7 + ((v12 >> 15) & 1) + (v12 >> 10);
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  sub_480C((uint64_t)v15, v13);
}

void sub_3E58D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_26C4C((const void **)va);
  sub_1A668((void **)va1);
  _Unwind_Resume(a1);
}

void sub_3E58EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
  {
    operator delete(__p);
    sub_1A668(&a18);
    _Unwind_Resume(a1);
  }
  sub_1A668(&a18);
  _Unwind_Resume(a1);
}

void sub_3E5954(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  sub_3E5D78(*(void *)a1, *a2, (uint64_t)&v20);
  if (!*(unsigned char *)(a1 + 16))
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_8A6F8((char *)a3, (uint64_t)v20, (uint64_t)v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (unsigned char *)v20) >> 3));
    goto LABEL_26;
  }
  uint64_t v6 = (int *)sub_3E2234(*(void *)a1, *a2);
  uint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 >= 5u && (uint64_t v8 = v7[2]) != 0) {
    uint64_t v9 = *(void *)((char *)v6 + v8);
  }
  else {
    uint64_t v9 = 0;
  }
  sub_29AEFC(*(uint64_t **)(a1 + 8), v9, (uint64_t)&__p);
  uint64_t v10 = v26;
  unint64_t v11 = v27;
  *(_DWORD *)unsigned __int8 v19 = v28;
  *(_DWORD *)&unint64_t v19[3] = *(_DWORD *)((char *)&v28 + 3);
  int v12 = HIBYTE(v28);
  unint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v26 = 0;
  if (v25 < 0) {
    operator delete(__p);
  }
  int v13 = (int *)sub_3E2234(*(void *)a1, *a2);
  unint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 < 7u || (uint64_t v15 = v14[3]) == 0 || *((unsigned char *)v13 + v15) != 2)
  {
    if ((v12 & 0x80) != 0)
    {
      if (v11)
      {
LABEL_19:
        sub_4200(&__p, v10, v11);
LABEL_20:
        sub_28C774((void *)a3, (uint64_t)&__p, 1uLL);
        if (v25 < 0)
        {
          operator delete(__p);
          if ((v12 & 0x80) == 0) {
            goto LABEL_26;
          }
          goto LABEL_25;
        }
LABEL_24:
        if ((v12 & 0x80) == 0) {
          goto LABEL_26;
        }
        goto LABEL_25;
      }
    }
    else if (v12)
    {
      std::string __p = v10;
      unint64_t v23 = v11;
      *(_DWORD *)unint64_t v24 = *(_DWORD *)v19;
      *(_DWORD *)&v24[3] = *(_DWORD *)&v19[3];
      char v25 = v12;
      goto LABEL_20;
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_8A6F8((char *)a3, (uint64_t)v20, (uint64_t)v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (unsigned char *)v20) >> 3));
    goto LABEL_24;
  }
  if ((v12 & 0x80) != 0)
  {
    if (!v11) {
      goto LABEL_36;
    }
    goto LABEL_19;
  }
  if (v12)
  {
    std::string __p = v10;
    unint64_t v23 = v11;
    *(_DWORD *)unint64_t v24 = *(_DWORD *)v19;
    *(_DWORD *)&v24[3] = *(_DWORD *)&v19[3];
    char v25 = v12;
    goto LABEL_20;
  }
LABEL_36:
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  if ((v12 & 0x80) != 0) {
LABEL_25:
  }
    operator delete(v10);
LABEL_26:
  unint64_t v16 = (void **)v20;
  if (v20)
  {
    unint64_t v17 = v21;
    __int16 v18 = v20;
    if (v21 != v20)
    {
      do
      {
        if (*((char *)v17 - 1) < 0) {
          operator delete(*(v17 - 3));
        }
        v17 -= 3;
      }
      while (v17 != v16);
      __int16 v18 = v20;
    }
    long long v21 = v16;
    operator delete(v18);
  }
}

void sub_3E5BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if ((v20 & 0x80) == 0)
  {
    sub_1A668(&a11);
    _Unwind_Resume(a1);
  }
  operator delete(v19);
  sub_1A668(&a11);
  _Unwind_Resume(a1);
}

BOOL sub_3E5C84(uint64_t a1, unint64_t *a2)
{
  uint64_t v3 = (int *)sub_3E2234(*(void *)a1, *a2);
  uint64_t v4 = (unsigned __int16 *)((char *)v3 - *v3);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0)
  {
    uint64_t v6 = *(void *)((char *)v3 + v5);
    if (!*(unsigned char *)(a1 + 16)) {
      return v6 != 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  else
  {
    uint64_t v6 = 0;
    if (!*(unsigned char *)(a1 + 16)) {
      return v6 != 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  sub_29AEFC(*(uint64_t **)(a1 + 8), v6, (uint64_t)v9);
  BOOL v8 = sub_359144((uint64_t)v9);
  if (v12 < 0)
  {
    operator delete(__p);
    if ((v10 & 0x80000000) == 0) {
      return v8;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    return v8;
  }
  operator delete(v9[0]);
  return v8;
}

void sub_3E5D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_3E5D78(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (int *)sub_3E2234(a1, a2);
  uint64_t v5 = (unsigned __int16 *)((char *)v4 - *v4);
  if (*v5 >= 0xFu && (uint64_t v6 = v5[7]) != 0)
  {
    uint64_t v7 = (unsigned int *)((char *)v4 + v6 + *(unsigned int *)((char *)v4 + v6));
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v8 = *v7;
    if (v8)
    {
      for (uint64_t i = 4 * v8; i; i -= 4)
      {
        unint64_t v11 = (char *)v7 + v7[1];
        size_t v12 = *((unsigned int *)v11 + 1);
        if (v12 >= 0x17)
        {
          uint64_t v15 = (v12 & 0xFFFFFFF8) + 8;
          if ((v12 | 7) != 0x17) {
            uint64_t v15 = v12 | 7;
          }
          uint64_t v16 = v15 + 1;
          p_dst = (long long *)operator new(v15 + 1);
          *((void *)&__dst + 1) = v12;
          unint64_t v20 = v16 | 0x8000000000000000;
          *(void *)&long long __dst = p_dst;
        }
        else
        {
          HIBYTE(v20) = *((_DWORD *)v11 + 1);
          p_dst = &__dst;
          if (!v12)
          {
            *((unsigned char *)&__dst + v12) = 0;
            unint64_t v14 = *(void *)(a3 + 8);
            if (v14 >= *(void *)(a3 + 16)) {
              goto LABEL_15;
            }
            goto LABEL_5;
          }
        }
        memcpy(p_dst, v11 + 8, v12);
        *((unsigned char *)p_dst + v12) = 0;
        unint64_t v14 = *(void *)(a3 + 8);
        if (v14 >= *(void *)(a3 + 16))
        {
LABEL_15:
          unint64_t v17 = sub_6E8C4((void **)a3, (uint64_t)&__dst);
          int v18 = SHIBYTE(v20);
          *(void *)(a3 + 8) = v17;
          if (v18 < 0) {
            operator delete((void *)__dst);
          }
          goto LABEL_6;
        }
LABEL_5:
        long long v10 = __dst;
        *(void *)(v14 + 16) = v20;
        *(_OWORD *)unint64_t v14 = v10;
        *(void *)(a3 + 8) = v14 + 24;
LABEL_6:
        ++v7;
      }
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
}

void sub_3E5ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_1A668(v15);
    _Unwind_Resume(a1);
  }
  sub_1A668(v15);
  _Unwind_Resume(a1);
}

void sub_3E5F04()
{
  unk_2557F57 = 16641;
  word_2557F40 = 65;
  byte_2557F6F = 1;
  byte_2557F59 = 0;
}

uint64_t *sub_3E5F2C(uint64_t *a1, void *a2, long long *a3)
{
  char v16 = 14;
  strcpy((char *)v15, "RoadClassifier");
  if (*((char *)a3 + 23) < 0)
  {
    sub_4200(&__dst, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long __dst = *a3;
    uint64_t v20 = *((void *)a3 + 2);
  }
  sub_28C774(&v13, (uint64_t)&__dst, 1uLL);
  uint64_t v5 = sub_374CDC((uint64_t)a2, (uint64_t)v15, (uint64_t *)&v13);
  sub_3CB2F0(v5, (uint64_t)__p);
  *a1 = sub_3766F8(a2);
  sub_3E6B38((uint64_t)(a1 + 1), __p);
  uint64_t v6 = v18;
  if (v18)
  {
    do
    {
      unint64_t v11 = *(char **)v6;
      sub_57AC8((uint64_t *)v6 + 5);
      if (v6[39] < 0) {
        operator delete(*((void **)v6 + 2));
      }
      operator delete(v6);
      uint64_t v6 = v11;
    }
    while (v11);
  }
  uint64_t v7 = __p[0];
  __p[0] = 0;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = (void **)v13;
  if (v13)
  {
    uint64_t v9 = v14;
    long long v10 = v13;
    if (v14 != v13)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      long long v10 = v13;
    }
    unint64_t v14 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v20) < 0)
  {
    operator delete((void *)__dst);
    if ((v16 & 0x80000000) == 0) {
      return a1;
    }
LABEL_22:
    operator delete(v15[0]);
    return a1;
  }
  if (v16 < 0) {
    goto LABEL_22;
  }
  return a1;
}

void sub_3E60F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if ((a18 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_3E6164(uint64_t a1, int **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v4 = *v3;
  if (!*((unsigned char *)a2 + 38))
  {
    if (v4 < 0x47) {
      return 0;
    }
    unsigned int v6 = v3[35];
    if (!v6 || (*(int *)((char *)v2 + v6) & 1) == 0) {
      return 0;
    }
    return sub_3E61C8(a1, a2);
  }
  if (v4 >= 0x47)
  {
    unsigned int v5 = v3[35];
    if (v5)
    {
      if ((*(int *)((char *)v2 + v5) & 2) != 0) {
        return sub_3E61C8(a1, a2);
      }
    }
  }
  return 0;
}

BOOL sub_3E61C8(uint64_t a1, int **a2)
{
  if (!*(unsigned char *)(a1 + 32)) {
    return 0;
  }
  unsigned int v4 = a2[1];
  if (v4)
  {
    unsigned int v5 = (unsigned __int16 *)((char *)v4 - *v4);
    if (*v5 >= 0x11u)
    {
      uint64_t v6 = v5[8];
      if (v6)
      {
        if ((*(_WORD *)((unsigned char *)v4 + v6) & 4) != 0) {
          return 0;
        }
      }
    }
  }
  uint64_t v7 = *a2;
  uint64_t v8 = **a2;
  uint64_t v9 = (unsigned __int16 *)((char *)*a2 - v8);
  unsigned int v10 = *v9;
  if (v10 >= 0xB && v9[5] && (*((unsigned char *)v7 + v9[5] + 3) & 4) != 0) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 33))
  {
    int v13 = (unsigned __int16 *)((char *)v7 - v8);
    unsigned int v14 = *(unsigned __int16 *)((char *)v7 - v8);
    if (v14 < 0xB) {
      goto LABEL_27;
    }
    goto LABEL_18;
  }
  int v11 = *(unsigned __int8 *)(a1 + 34);
  if (v10 >= 0x63 && (uint64_t v12 = v9[49]) != 0)
  {
    if (sub_3E737C(*((unsigned __int8 *)v7 + v12), v11 != 0)) {
      return 0;
    }
  }
  else if (sub_3E737C(0, v11 != 0))
  {
    return 0;
  }
  uint64_t v7 = *a2;
  int v13 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v14 = *v13;
  if (v14 >= 0xB)
  {
LABEL_18:
    if (v13[5] && (*((unsigned char *)v7 + v13[5] + 2) & 0x20) != 0) {
      return 0;
    }
    if (v14 >= 0x2F)
    {
      uint64_t v15 = v13[23];
      if (v15)
      {
        unsigned int v16 = *((unsigned __int8 *)v7 + v15);
        BOOL v17 = v16 > 0x2D;
        uint64_t v18 = (1 << v16) & 0x208040000000;
        if (!v17 && v18 != 0) {
          return 0;
        }
      }
    }
  }
LABEL_27:
  double v21 = sub_3E6EAC(a2);
  unsigned int v22 = sub_2E35CC(a2);
  unsigned int v23 = sub_3E70B4(a2);
  if (v22 <= v23) {
    unsigned int v24 = v23;
  }
  else {
    unsigned int v24 = v22;
  }
  BOOL v27 = *(uint64_t *)&v21 > -1 && ((*(void *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
     || (unint64_t)(*(void *)&v21 - 1) < 0xFFFFFFFFFFFFFLL
     || (*(void *)&v21 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (v27 && v21 > 0.0 && v21 > *(double *)(a1 + 8)) {
    return 1;
  }
  uint64_t v28 = (unsigned __int16 *)((char *)*a2 - **a2);
  if (*v28 < 0x43u || (uint64_t v29 = v28[33]) == 0)
  {
    if (!*(unsigned char *)(a1 + 16)) {
      goto LABEL_48;
    }
    return 1;
  }
  if (*((unsigned __int8 *)*a2 + v29) < *(unsigned __int8 *)(a1 + 16)) {
    return 1;
  }
LABEL_48:
  if (v24 > *(unsigned __int8 *)(a1 + 17)) {
    return 1;
  }
  return sub_3E71F8(*(void *)a1, (uint64_t)a2) > *(double *)(a1 + 24);
}

BOOL sub_3E6428(uint64_t a1, int **a2)
{
  uint64_t v3 = *a2;
  unsigned int v4 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v5 = *v4;
  if (*((unsigned char *)a2 + 38))
  {
    if (v5 < 0x47) {
      return 0;
    }
    unsigned int v6 = v4[35];
    if (!v6) {
      return 0;
    }
    if ((*(int *)((char *)v3 + v6) & 2) != 0) {
      goto LABEL_5;
    }
    return 0;
  }
  if (v5 < 0x47) {
    return 0;
  }
  unsigned int v11 = v4[35];
  if (!v11) {
    return 0;
  }
  if ((*(int *)((char *)v3 + v11) & 1) == 0) {
    return 0;
  }
LABEL_5:
  BOOL result = sub_3E61C8(a1, a2);
  if (!result) {
    return result;
  }
  uint64_t v8 = (unsigned __int16 *)((char *)*a2 - **a2);
  if (*v8 < 0xBu) {
    return 0;
  }
  uint64_t v9 = v8[5];
  if (!v9) {
    return 0;
  }
  unsigned int v10 = *(int *)((char *)*a2 + v9);
  if (v10) {
    return 1;
  }
  else {
    return (v10 >> 1) & 1;
  }
}

uint64_t *sub_3E6504(uint64_t *a1, void *a2, long long *a3)
{
  char v16 = 14;
  strcpy((char *)v15, "RoadClassifier");
  if (*((char *)a3 + 23) < 0)
  {
    sub_4200(&__dst, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long __dst = *a3;
    uint64_t v20 = *((void *)a3 + 2);
  }
  sub_28C774(&v13, (uint64_t)&__dst, 1uLL);
  unsigned int v5 = sub_374CDC((uint64_t)a2, (uint64_t)v15, (uint64_t *)&v13);
  sub_3CB560(v5, (uint64_t)__p);
  *a1 = sub_3766F8(a2);
  sub_3E6B38((uint64_t)(a1 + 1), __p);
  unsigned int v6 = v18;
  if (v18)
  {
    do
    {
      unsigned int v11 = *(char **)v6;
      sub_57AC8((uint64_t *)v6 + 5);
      if (v6[39] < 0) {
        operator delete(*((void **)v6 + 2));
      }
      operator delete(v6);
      unsigned int v6 = v11;
    }
    while (v11);
  }
  uint64_t v7 = __p[0];
  __p[0] = 0;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = (void **)v13;
  if (v13)
  {
    uint64_t v9 = v14;
    unsigned int v10 = v13;
    if (v14 != v13)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      unsigned int v10 = v13;
    }
    unsigned int v14 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v20) < 0)
  {
    operator delete((void *)__dst);
    if ((v16 & 0x80000000) == 0) {
      return a1;
    }
LABEL_22:
    operator delete(v15[0]);
    return a1;
  }
  if (v16 < 0) {
    goto LABEL_22;
  }
  return a1;
}

void sub_3E66CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if ((a18 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_3E673C(uint64_t a1, int **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v4 = *v3;
  if (!*((unsigned char *)a2 + 38))
  {
    if (v4 < 0xB) {
      return 0;
    }
    unsigned int v6 = v3[5];
    if (!v6 || (*(int *)((char *)v2 + v6) & 1) == 0) {
      return 0;
    }
    return sub_3E61C8(a1, a2);
  }
  if (v4 >= 0xB)
  {
    unsigned int v5 = v3[5];
    if (v5)
    {
      if ((*(int *)((char *)v2 + v5) & 2) != 0) {
        return sub_3E61C8(a1, a2);
      }
    }
  }
  return 0;
}

uint64_t *sub_3E67A0(uint64_t *a1, void *a2, long long *a3)
{
  char v16 = 14;
  strcpy((char *)v15, "RoadClassifier");
  if (*((char *)a3 + 23) < 0)
  {
    sub_4200(&__dst, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long __dst = *a3;
    uint64_t v20 = *((void *)a3 + 2);
  }
  sub_28C774(&v13, (uint64_t)&__dst, 1uLL);
  unsigned int v5 = sub_374CDC((uint64_t)a2, (uint64_t)v15, (uint64_t *)&v13);
  sub_3CB5E0(v5, (uint64_t)__p);
  *a1 = sub_3766F8(a2);
  sub_3E6B38((uint64_t)(a1 + 1), __p);
  unsigned int v6 = v18;
  if (v18)
  {
    do
    {
      unsigned int v11 = *(char **)v6;
      sub_57AC8((uint64_t *)v6 + 5);
      if (v6[39] < 0) {
        operator delete(*((void **)v6 + 2));
      }
      operator delete(v6);
      unsigned int v6 = v11;
    }
    while (v11);
  }
  uint64_t v7 = __p[0];
  __p[0] = 0;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = (void **)v13;
  if (v13)
  {
    uint64_t v9 = v14;
    unsigned int v10 = v13;
    if (v14 != v13)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      unsigned int v10 = v13;
    }
    unsigned int v14 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v20) < 0)
  {
    operator delete((void *)__dst);
    if ((v16 & 0x80000000) == 0) {
      return a1;
    }
LABEL_22:
    operator delete(v15[0]);
    return a1;
  }
  if (v16 < 0) {
    goto LABEL_22;
  }
  return a1;
}

void sub_3E6968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if ((a18 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_3E69D8(uint64_t a1, int **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v4 = *v3;
  if (*((unsigned char *)a2 + 38))
  {
    if (v4 < 0x39) {
      return 0;
    }
    uint64_t v5 = v3[28];
    if (!v5) {
      return 0;
    }
    int v6 = *(int *)((char *)v2 + v5);
    if ((v6 & 2) != 0) {
      return sub_3E61C8(a1, a2);
    }
LABEL_9:
    if ((v6 & 7) == 4 || (v6 & 0x23) == 0x20) {
      return sub_3E61C8(a1, a2);
    }
    return 0;
  }
  if (v4 < 0x39) {
    return 0;
  }
  uint64_t v7 = v3[28];
  if (!v7) {
    return 0;
  }
  int v6 = *(int *)((char *)v2 + v7);
  if ((v6 & 1) == 0) {
    goto LABEL_9;
  }
  return sub_3E61C8(a1, a2);
}

BOOL sub_3E6A48(uint64_t a1, int **a2)
{
  uint64_t v3 = *a2;
  unsigned int v4 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v5 = *v4;
  if (*((unsigned char *)a2 + 38))
  {
    if (v5 < 0x39) {
      return 0;
    }
    uint64_t v6 = v4[28];
    if (!v6) {
      return 0;
    }
    int v7 = *(int *)((char *)v3 + v6);
    if ((v7 & 2) != 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  if (v5 < 0x39) {
    return 0;
  }
  uint64_t v8 = v4[28];
  if (!v8) {
    return 0;
  }
  int v7 = *(int *)((char *)v3 + v8);
  if ((v7 & 1) == 0)
  {
LABEL_9:
    if ((v7 & 7) != 4 && (v7 & 0x23) != 0x20) {
      return 0;
    }
  }
LABEL_12:
  BOOL result = sub_3E61C8(a1, a2);
  if (!result) {
    return result;
  }
  unsigned int v10 = (unsigned __int16 *)((char *)*a2 - **a2);
  if (*v10 < 0xBu) {
    return 0;
  }
  uint64_t v11 = v10[5];
  if (!v11) {
    return 0;
  }
  unsigned int v12 = *(int *)((char *)*a2 + v11);
  if (v12) {
    return 1;
  }
  else {
    return (v12 >> 1) & 1;
  }
}

uint64_t sub_3E6B38(uint64_t a1, void *a2)
{
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "side_road_max_speed_mph");
  *(double *)a1 = sub_5D138(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "side_road_min_display_class");
  char v4 = sub_31AB44(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 8) = v4;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "side_road_max_lane_count");
  char v5 = sub_31AB44(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 9) = v5;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9280;
  strcpy((char *)__p[0], "side_road_max_normalized_car_trips");
  double v6 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 16) = v6;
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "enable_main_road");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 24) = v7;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "enable_vendor_intersection_internal");
  BOOL v8 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 25) = v8;
  __p[0] = operator new(0x38uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9AC0;
  strcpy((char *)__p[0], "enable_additional_vendor_intersection_internal_types");
  BOOL v9 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 26) = v9;
  return a1;
}

void sub_3E6DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_3E6E08(uint64_t a1, char **a2)
{
  uint64_t v2 = (int *)a2[1];
  if (v2)
  {
    uint64_t v3 = (unsigned __int16 *)((char *)v2 - *v2);
    if (*v3 >= 0x11u)
    {
      uint64_t v4 = v3[8];
      if (v4)
      {
        if ((*(_WORD *)((unsigned char *)v2 + v4) & 4) != 0) {
          return 1;
        }
      }
    }
  }
  char v5 = *a2;
  double v6 = &(*a2)[-*(int *)*a2];
  unsigned int v7 = *(unsigned __int16 *)v6;
  if (v7 >= 0xB && *((_WORD *)v6 + 5) && (v5[*((unsigned __int16 *)v6 + 5) + 3] & 4) != 0) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 33)) {
    return 0;
  }
  int v8 = *(unsigned __int8 *)(a1 + 34);
  if (v7 >= 0x63 && (uint64_t v9 = *((unsigned __int16 *)v6 + 49)) != 0)
  {
    int v10 = v5[v9];
    BOOL v11 = v8 != 0;
  }
  else
  {
    int v10 = 0;
    BOOL v11 = v8 != 0;
  }
  return sub_3E737C(v10, v11);
}

double sub_3E6EAC(int **a1)
{
  uint64_t v1 = 3;
  if (!*((unsigned char *)a1 + 38)) {
    uint64_t v1 = 2;
  }
  uint64_t v2 = a1[v1];
  uint64_t v3 = (char *)*a1;
  uint64_t v4 = (unsigned __int16 *)((char *)*a1 - **a1);
  unsigned int v5 = *v4;
  double result = -1.0;
  if (*((unsigned char *)a1 + 38))
  {
    if (v5 < 0x11) {
      goto LABEL_11;
    }
    unsigned int v7 = v4[8];
    if (!v4[8]) {
      goto LABEL_11;
    }
  }
  else
  {
    if (v5 < 0xF) {
      goto LABEL_11;
    }
    unsigned int v7 = v4[7];
    if (!v4[7]) {
      goto LABEL_11;
    }
  }
  unsigned int v8 = v3[v7];
  double result = (double)v8;
  if (!v8) {
    double result = -1.0;
  }
LABEL_11:
  double v9 = -1.0;
  if (v2)
  {
    int v10 = (unsigned __int16 *)((char *)v2 - *v2);
    if (*v10 >= 9u)
    {
      uint64_t v11 = v10[4];
      if (v11)
      {
        unsigned int v12 = *(unsigned __int16 *)((char *)v2 + v11);
        if ((unsigned __int16)(v12 - 1) <= 0xFFFDu) {
          double v9 = (double)v12 / 100.0;
        }
      }
    }
  }
  uint64_t v13 = 2;
  if (!*((unsigned char *)a1 + 38)) {
    uint64_t v13 = 3;
  }
  unsigned int v14 = a1[v13];
  double v15 = -1.0;
  if (*((unsigned char *)a1 + 38))
  {
    if (v5 < 0xF) {
      goto LABEL_26;
    }
    unsigned int v16 = v4[7];
    if (!v16) {
      goto LABEL_26;
    }
  }
  else
  {
    if (v5 < 0x11) {
      goto LABEL_26;
    }
    unsigned int v16 = v4[8];
    if (!v16) {
      goto LABEL_26;
    }
  }
  unsigned int v17 = v3[v16];
  double v15 = (double)v17;
  if (!v17) {
    double v15 = -1.0;
  }
LABEL_26:
  double v18 = -1.0;
  if (v14)
  {
    unsigned __int8 v19 = (unsigned __int16 *)((char *)v14 - *v14);
    if (*v19 >= 9u)
    {
      uint64_t v20 = v19[4];
      if (v20)
      {
        unsigned int v21 = *(unsigned __int16 *)((char *)v14 + v20);
        if ((unsigned __int16)(v21 - 1) <= 0xFFFDu) {
          double v18 = (double)v21 / 100.0;
        }
      }
    }
  }
  if ((*(uint64_t *)&result <= -1 || ((*(void *)&result & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && *(void *)&result != 0
    || result <= 0.0)
  {
    double result = 0.0;
  }
  if ((*(uint64_t *)&v9 <= -1 || ((*(void *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(*(void *)&v9 - 1) >= 0xFFFFFFFFFFFFFLL)
  {
    double v9 = 0.0;
  }
  if (result < v9) {
    double result = v9;
  }
  if ((*(uint64_t *)&v15 <= -1 || ((*(void *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && *(void *)&v15 != 0
    || v15 <= 0.0)
  {
    double v30 = 0.0;
  }
  else
  {
    double v30 = v15;
  }
  if ((*(uint64_t *)&v18 <= -1 || ((*(void *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(*(void *)&v18 - 1) >= 0xFFFFFFFFFFFFFLL)
  {
    double v33 = 0.0;
  }
  else
  {
    double v33 = v18;
  }
  if (v30 < v33) {
    double v30 = v33;
  }
  if (result < v30) {
    return v30;
  }
  return result;
}

uint64_t sub_3E70B4(int **a1)
{
  uint64_t v1 = (char *)*a1;
  uint64_t v2 = (unsigned __int16 *)((char *)*a1 - **a1);
  unsigned int v3 = *v2;
  if (!*((unsigned char *)a1 + 38))
  {
    if (v3 >= 0x29)
    {
      unsigned int v4 = v2[20];
      if (v2[20]) {
        goto LABEL_7;
      }
LABEL_16:
      if (v2[10])
      {
        unsigned int v13 = v1[v2[10]];
        if (v1[v2[10]])
        {
          uint64_t v14 = v2[5];
          if (v14)
          {
            int v15 = *(_DWORD *)&v1[v14];
            if ((~v15 & 3) != 0)
            {
LABEL_20:
              if (*((unsigned char *)a1 + 38)) {
                int v16 = 1;
              }
              else {
                int v16 = 2;
              }
              if ((v15 & v16) != 0) {
                return v13;
              }
              else {
                return 0;
              }
            }
LABEL_33:
            if (v13 >> 1 <= 1) {
              return 1;
            }
            else {
              return v13 >> 1;
            }
          }
          return 0;
        }
      }
LABEL_28:
      uint64_t v17 = v2[5];
      if (v17)
      {
        int v15 = *(_DWORD *)&v1[v17];
        if ((~v15 & 3) != 0) {
          unsigned int v13 = 1;
        }
        else {
          unsigned int v13 = 2;
        }
        if ((~v15 & 3) != 0) {
          goto LABEL_20;
        }
        goto LABEL_33;
      }
      return 0;
    }
LABEL_15:
    if (v3 < 0x15)
    {
      if (v3 < 0xB) {
        return 0;
      }
      goto LABEL_28;
    }
    goto LABEL_16;
  }
  if (v3 < 0x27) {
    goto LABEL_15;
  }
  unsigned int v4 = v2[19];
  if (!v2[19]) {
    goto LABEL_16;
  }
LABEL_7:
  unsigned int v5 = &v1[v4 + *(unsigned int *)&v1[v4]];
  uint64_t v6 = *(unsigned int *)v5;
  if (!v6) {
    return 0;
  }
  unint64_t v7 = 0;
  uint64_t result = 0;
  uint64_t v9 = 4 * v6;
  do
  {
    uint64_t v10 = *(unsigned int *)&v5[v7 + 4];
    uint64_t v11 = &v5[v7 + v10 - *(int *)&v5[v7 + 4 + v10]];
    if (*((unsigned __int16 *)v11 + 2) < 5u
      || (uint64_t v12 = *((unsigned __int16 *)v11 + 4)) == 0
      || (v5[v7 + 4 + v10 + v12] & 4) == 0)
    {
      uint64_t result = (result + 1);
    }
    v7 += 4;
  }
  while (v9 != v7);
  return result;
}

double sub_3E71F8(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v4 = sub_2E5B50((int **)a2);
  uint64_t v5 = *(void *)(a2 + 32);
  unsigned int v6 = (unsigned __int16)sub_3E73C4(a1, v5);
  unsigned int v7 = (unsigned __int16)sub_3E73C4(a1, v5 ^ 0x1000000000000);
  if (v7 <= v6) {
    unsigned int v7 = v6;
  }
  if (v7) {
    return (double)v4 / (double)v7;
  }
  else {
    return 0.0;
  }
}

BOOL sub_3E7284(uint64_t a1, int **a2)
{
  uint64_t v2 = *a2;
  unsigned int v3 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v4 = *v3;
  if (v4 < 0x2F)
  {
    LOBYTE(v7) = 1;
    if (v4 <= 0xA) {
      goto LABEL_13;
    }
    uint64_t v8 = v3[5];
    if (!v3[5]) {
      goto LABEL_13;
    }
  }
  else if (v3[23])
  {
    unsigned int v5 = *((unsigned __int8 *)v2 + v3[23]);
    BOOL v6 = v5 >= 0x2D;
    unint64_t v7 = (0x7FFFFFFEDBFuLL >> v5) & 1;
    if (v6) {
      LOBYTE(v7) = 1;
    }
    uint64_t v8 = v3[5];
    if (!v3[5]) {
      goto LABEL_13;
    }
  }
  else
  {
    LOBYTE(v7) = 1;
    uint64_t v8 = v3[5];
    if (!v3[5]) {
      goto LABEL_13;
    }
  }
  if ((*((unsigned char *)v2 + v8 + 2) & 0x20) != 0) {
    return 0;
  }
LABEL_13:
  if (*((unsigned char *)a2 + 38))
  {
    if (v4 < 0x47) {
      return 0;
    }
    uint64_t v10 = v3[35];
    if (!v10) {
      return 0;
    }
    BOOL v11 = (*((unsigned char *)v2 + v10) & 2) == 0;
    char v12 = v7 ^ 1;
    if (v11) {
      char v12 = 1;
    }
    if (v12) {
      return 0;
    }
    return !sub_3E61C8(a1, a2);
  }
  if (v4 >= 0x47)
  {
    uint64_t v13 = v3[35];
    if (v13)
    {
      if (*((unsigned char *)v2 + v13) & v7) {
        return !sub_3E61C8(a1, a2);
      }
    }
  }
  return 0;
}

BOOL sub_3E737C(int a1, uint64_t a2)
{
  if ((a1 - 2) >= 0xA) {
    return a1 == 1;
  }
  else {
    return a2;
  }
}

char *sub_3E73C4(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_2E5E08(a1, a2, 1);
  if (result)
  {
    unsigned int v5 = &result[-*(int *)result];
    if (*(unsigned __int16 *)v5 < 0xBu)
    {
      return 0;
    }
    else
    {
      if (!*((_WORD *)v5 + 5)) {
        return 0;
      }
      BOOL v6 = &result[*((unsigned __int16 *)v5 + 5) + *(unsigned int *)&result[*((unsigned __int16 *)v5 + 5)]];
      if (*(_DWORD *)v6 <= WORD2(a2)) {
        return 0;
      }
      uint64_t v7 = (uint64_t)&v6[8 * WORD2(a2) + 4];
      if (!*(_DWORD *)v7) {
        return 0;
      }
      uint64_t result = sub_2E5F98(a1, *(_DWORD *)v7, 1);
      if (result)
      {
        uint64_t v8 = (unsigned __int16 *)&result[-*(int *)result];
        unsigned int v9 = *v8;
        if (((a2 & 0xFF000000000000) != 0) == (*(unsigned char *)(v7 + 6) & 2) >> 1)
        {
          if (v9 < 0xD) {
            goto LABEL_17;
          }
          int v10 = v8[6];
          if (!v8[6]) {
            goto LABEL_17;
          }
        }
        else
        {
          if (v9 < 0xB) {
            goto LABEL_17;
          }
          int v10 = v8[5];
          if (!v8[5]) {
            goto LABEL_17;
          }
        }
        BOOL v11 = &result[v10 + *(unsigned int *)&result[v10]];
        uint64_t v12 = *(unsigned __int16 *)(v7 + 4);
        if (*(_DWORD *)v11 > v12) {
          return (char *)*(unsigned __int16 *)&v11[2 * v12 + 4];
        }
LABEL_17:
        if (*v8 >= 9u)
        {
          uint64_t v13 = v8[4];
          if (v13) {
            return (char *)*(unsigned __int16 *)&result[v13];
          }
        }
        return 0;
      }
    }
  }
  return result;
}

void sub_3E7518()
{
  unk_2557F87 = 16641;
  word_2557F70 = 65;
  byte_2557F9F = 1;
  byte_2557F89 = 0;
  byte_2557FB7 = 8;
  strcpy((char *)&qword_2557FA0, "any_mode");
  byte_2557FCF = 7;
  strcpy((char *)&dword_2557FB8, "cycling");
  byte_2557FE7 = 7;
  strcpy((char *)&dword_2557FD0, "driving");
  byte_2557FFF = 7;
  strcpy((char *)&dword_2557FE8, "walking");
}

void sub_3E75C4()
{
  byte_2558017 = 1;
  word_2558000 = 65;
}

uint64_t sub_3E75E0(uint64_t a1, uint64_t a2, int **a3, int **a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  if (!a3[1]) {
    return 0;
  }
  if (!a4[1]) {
    return 0;
  }
  *(void *)&v37[0] = sub_2E4738(a3);
  if (sub_3CCE68(a2, (unsigned int **)v37)) {
    return 0;
  }
  unint64_t v39 = (unsigned int *)sub_2E48C4(a4);
  if (sub_3CCE68(a2, &v39)) {
    return 0;
  }
  uint64_t v17 = a3[1];
  double v18 = (unsigned __int16 *)((char *)v17 - *v17);
  double v19 = 0.0;
  if (*v18 >= 0x13u)
  {
    uint64_t v20 = v18[9];
    if (v20)
    {
      LOWORD(v19) = *(_WORD *)((char *)v17 + v20);
      double v19 = (double)*(unint64_t *)&v19;
    }
  }
  if (v19 >= a7) {
    return 1;
  }
  unsigned int v21 = a4[1];
  unsigned int v22 = (unsigned __int16 *)((char *)v21 - *v21);
  double v23 = 0.0;
  if (*v22 >= 0x13u)
  {
    uint64_t v24 = v22[9];
    if (v24)
    {
      LOWORD(v23) = *(_WORD *)((char *)v21 + v24);
      double v23 = (double)*(unint64_t *)&v23;
    }
  }
  if (v23 >= a7) {
    return 1;
  }
  char v25 = *a3;
  uint64_t v26 = (unsigned __int16 *)((char *)*a3 - **a3);
  unsigned int v27 = *v26;
  if (v27 < 9)
  {
    uint64_t v28 = 0;
  }
  else
  {
    uint64_t v28 = v26[4];
    if (v26[4]) {
      uint64_t v28 = *(unsigned int *)((char *)v25 + v28);
    }
  }
  if (v28 <= a5) {
    return 1;
  }
  uint64_t v29 = *a4;
  double v30 = (unsigned __int16 *)((char *)*a4 - **a4);
  unsigned int v31 = *v30;
  if (v31 < 9)
  {
    uint64_t v32 = 0;
  }
  else
  {
    uint64_t v32 = v30[4];
    if (v30[4]) {
      uint64_t v32 = *(unsigned int *)((char *)v29 + v32);
    }
  }
  if (v32 <= a5) {
    return 1;
  }
  if (v27 >= 9 && (uint64_t v33 = v26[4]) != 0) {
    uint64_t v34 = *(unsigned int *)((char *)v25 + v33);
  }
  else {
    uint64_t v34 = 0;
  }
  if (v34 >= a6) {
    return 1;
  }
  if (v31 < 9)
  {
    uint64_t v35 = 0;
  }
  else
  {
    uint64_t v35 = v30[4];
    if (v30[4]) {
      uint64_t v35 = *(unsigned int *)((char *)v29 + v35);
    }
  }
  if (v35 >= a6) {
    return 1;
  }
  unint64_t v38 = a3[4];
  long long v36 = *((_OWORD *)a3 + 1);
  v37[0] = *(_OWORD *)a3;
  v37[1] = v36;
  BYTE6(v38) ^= 1u;
  if (sub_2E4A50(a1, (int **)v37, a8)) {
    return 1;
  }
  else {
    return sub_2E4A50(a1, a4, a8);
  }
}

void sub_3E77EC()
{
  unk_255802F = 16641;
  word_2558018 = 65;
  byte_2558047 = 1;
  byte_2558031 = 0;
}

__n128 sub_3E7814(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[1] = 0;
  a1[2].n128_u64[0] = 0;
  a1[1].n128_u64[0] = 0;
  a1[2].n128_u32[2] = -1;
  return result;
}

uint64_t sub_3E7830(uint64_t a1, _OWORD *a2, uint64_t *a3)
{
  *(_OWORD *)a1 = *a2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  sub_3E7BF4((unsigned char *)(a1 + 16), *a3, a3[1], (a3[1] - *a3) >> 5);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

__n128 sub_3E787C(uint64_t a1, _OWORD *a2, __n128 *a3)
{
  *(_OWORD *)a1 = *a2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  __n128 result = *a3;
  *(__n128 *)(a1 + 16) = *a3;
  *(void *)(a1 + 32) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  *(_DWORD *)(a1 + 40) = -1;
  return result;
}

__n128 sub_3E78B0(__n128 *a1, __n128 *a2, unsigned __int32 a3)
{
  __n128 result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[1] = 0;
  a1[2].n128_u64[0] = 0;
  a1[1].n128_u64[0] = 0;
  a1[2].n128_u32[2] = a3;
  return result;
}

uint64_t sub_3E78C8(uint64_t a1, _OWORD *a2, uint64_t *a3, int a4)
{
  *(_OWORD *)a1 = *a2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  sub_3E7BF4((unsigned char *)(a1 + 16), *a3, a3[1], (a3[1] - *a3) >> 5);
  *(_DWORD *)(a1 + 40) = a4;
  return a1;
}

void sub_3E7914(char a1@<W0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  v6[0] = a1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(&__p, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long __p = *a2;
    uint64_t v8 = *((void *)a2 + 2);
  }
  sub_3E7DA4(&v4, (uint64_t)v6, 1uLL);
  *(void *)a3 = 1;
  *(void *)(a3 + 8) = &off_2439090;
  *(_OWORD *)(a3 + 16) = v4;
  *(void *)(a3 + 32) = v5;
  long long v4 = 0uLL;
  uint64_t v5 = 0;
  *(_DWORD *)(a3 + 40) = -1;
  if (SHIBYTE(v8) < 0) {
    operator delete((void *)__p);
  }
}

void sub_3E79F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3E7A10(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = a2;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(v3 + 40);
  *(_OWORD *)a1 = *(_OWORD *)v3;
  sub_3E7ED8((void **)(a1 + 16), *(char **)(a1 + 24), *(unsigned char **)(a2 + 16), *(unsigned char **)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 5);
  return a1;
}

uint64_t sub_3E7A68(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = a2;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(v3 + 40);
  *(_OWORD *)a1 = *(_OWORD *)v3;
  sub_3E82BC((char **)(a1 + 16), *(void *)(a1 + 24), *(char **)(a2 + 16), *(char **)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 5);
  return a1;
}

BOOL sub_3E7AC0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) == *(void *)(a2 + 8) && *(_DWORD *)a1 == *(_DWORD *)a2)
  {
    BOOL v6 = *(unsigned __int8 **)(a1 + 16);
    uint64_t v5 = *(unsigned __int8 **)(a1 + 24);
    uint64_t v7 = *(unsigned __int8 **)(a2 + 16);
    if (v5 - v6 == *(void *)(a2 + 24) - (void)v7)
    {
      if (v6 == v5) {
        return *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
      }
      while (*v6 == *v7)
      {
        uint64_t v8 = v6[31];
        if ((v8 & 0x80u) == 0) {
          uint64_t v9 = v6[31];
        }
        else {
          uint64_t v9 = *((void *)v6 + 2);
        }
        uint64_t v10 = v7[31];
        int v11 = (char)v10;
        if ((v10 & 0x80u) != 0) {
          uint64_t v10 = *((void *)v7 + 2);
        }
        if (v9 != v10) {
          break;
        }
        if (v11 >= 0) {
          uint64_t v12 = v7 + 8;
        }
        else {
          uint64_t v12 = (unsigned __int8 *)*((void *)v7 + 1);
        }
        if ((v8 & 0x80) != 0)
        {
          if (memcmp(*((const void **)v6 + 1), v12, *((void *)v6 + 2))) {
            return 0;
          }
        }
        else if (v6[31])
        {
          uint64_t v13 = 0;
          while (v6[v13 + 8] == v12[v13])
          {
            if (v8 == ++v13) {
              goto LABEL_25;
            }
          }
          return 0;
        }
LABEL_25:
        v6 += 32;
        v7 += 32;
        if (v6 == v5) {
          return *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
        }
      }
    }
  }
  return 0;
}

unsigned char *sub_3E7BF4(unsigned char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >> 59) {
      sub_2E00();
    }
    __n128 result = operator new(32 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = &result[32 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = a2 + v9;
        v8[v9] = *(unsigned char *)(a2 + v9);
        __n128 result = &v8[v9 + 8];
        int v11 = (void **)(a2 + v9 + 8);
        if (*(char *)(a2 + v9 + 31) < 0)
        {
          __n128 result = sub_4200(result, *v11, *(void *)(v10 + 16));
        }
        else
        {
          *(_OWORD *)__n128 result = *(_OWORD *)v11;
          *(void *)&v8[v9 + 24] = *(void *)(a2 + v9 + 24);
        }
        v9 += 32;
      }
      while (v10 + 32 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_3E7CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_3E7CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 32)
  {
    if (*(char *)(v10 + v11 - 1) < 0) {
      operator delete(*(void **)(v10 + v11 - 24));
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_360970(&a9);
  _Unwind_Resume(a1);
}

void sub_3E7D28(std::error_category *a1)
{
  std::error_category::~error_category(a1);

  operator delete();
}

const char *sub_3E7D60()
{
  return "RoutingError";
}

uint64_t sub_3E7D6C(uint64_t a1, unsigned int a2)
{
  return a2;
}

BOOL sub_3E7D7C(uint64_t a1, int a2, uint64_t a3)
{
  return *(void (****)(std::error_category *__hidden))(a3 + 8) == &off_2439090 && *(_DWORD *)a3 == a2;
}

double sub_3E7D9C@<D0>(int a1@<W1>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  *(void *)&double result = sub_3D1980(a1, a2, a3).n128_u64[0];
  return result;
}

void *sub_3E7DA4(void *a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 59) {
      sub_2E00();
    }
    uint64_t v5 = 32 * a3;
    BOOL v6 = operator new(32 * a3);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    uint64_t v8 = a2 + v5;
    do
    {
      uint64_t v10 = a2 + v7;
      v6[v7] = *(unsigned char *)(a2 + v7);
      uint64_t v11 = &v6[v7 + 8];
      uint64_t v12 = (void **)(a2 + v7 + 8);
      if (*(char *)(a2 + v7 + 31) < 0)
      {
        sub_4200(v11, *v12, *(void *)(v10 + 16));
      }
      else
      {
        long long v9 = *(_OWORD *)v12;
        *(void *)&v6[v7 + 24] = *(void *)(a2 + v7 + 24);
        *(_OWORD *)uint64_t v11 = v9;
      }
      v7 += 32;
    }
    while (v10 + 32 != v8);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_3E7E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_3E7E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 32)
  {
    if (*(char *)(v10 + v11 - 1) < 0) {
      operator delete(*(void **)(v10 + v11 - 24));
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_360970(&a9);
  _Unwind_Resume(a1);
}

char *sub_3E7ED8(void **a1, char *a2, unsigned char *a3, unsigned char *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = a3;
  uint64_t v9 = a1[2];
  uint64_t v10 = a1[1];
  if (a5 <= (v9 - v10) >> 5)
  {
    uint64_t v16 = v10 - a2;
    uint64_t v17 = (v10 - a2) >> 5;
    if (v17 >= a5)
    {
      double v19 = &a3[32 * a5];
      char v25 = (char *)a1[1];
      goto LABEL_42;
    }
    double v19 = &a3[32 * v17];
    if (v19 != a4)
    {
      uint64_t v20 = 0;
      do
      {
        unsigned int v22 = &v19[v20];
        v10[v20] = v19[v20];
        double v23 = &v10[v20 + 8];
        uint64_t v24 = (void **)&v19[v20 + 8];
        if ((char)v19[v20 + 31] < 0)
        {
          sub_4200(v23, *v24, *((void *)v22 + 2));
        }
        else
        {
          long long v21 = *(_OWORD *)v24;
          *(void *)&v10[v20 + 24] = *(void *)&v19[v20 + 24];
          *(_OWORD *)double v23 = v21;
        }
        v20 += 32;
      }
      while (v22 + 32 != a4);
      char v25 = &v10[v20];
      a1[1] = &v10[v20];
      if (v16 < 1) {
        return v5;
      }
LABEL_42:
      long long v42 = &v5[32 * a5];
      unint64_t v43 = (unint64_t)&v25[-32 * a5];
      int64_t v44 = v25;
      if (v43 < (unint64_t)v10)
      {
        int64_t v44 = v25;
        do
        {
          *int64_t v44 = *(unsigned char *)v43;
          long long v45 = *(_OWORD *)(v43 + 8);
          *((void *)v44 + 3) = *(void *)(v43 + 24);
          *(_OWORD *)(v44 + 8) = v45;
          *(void *)(v43 + 16) = 0;
          *(void *)(v43 + 24) = 0;
          *(void *)(v43 + 8) = 0;
          v44 += 32;
          v43 += 32;
        }
        while (v43 < (unint64_t)v10);
      }
      a1[1] = v44;
      if (v25 != v42)
      {
        uint64_t v46 = 32 * ((v25 - v42) >> 5);
        unint64_t v47 = v25 - 32;
        do
        {
          unint64_t v49 = &v5[v46];
          *unint64_t v47 = v5[v46 - 32];
          unint64_t v50 = (void **)(v47 + 8);
          if (v47[31] < 0) {
            operator delete(*v50);
          }
          long long v48 = *(_OWORD *)(v49 - 24);
          *((void *)v47 + 3) = *((void *)v49 - 1);
          *(_OWORD *)unint64_t v50 = v48;
          *(v49 - 1) = 0;
          *(v49 - 24) = 0;
          v47 -= 32;
          v46 -= 32;
        }
        while (v46);
      }
      if (v19 != v7)
      {
        uint64_t v51 = v5;
        do
        {
          __int16 v52 = (const std::string *)(v7 + 8);
          char v53 = *v7;
          v7 += 32;
          long long v54 = (std::string *)(v51 + 8);
          *uint64_t v51 = v53;
          v51 += 32;
          std::string::operator=(v54, v52);
        }
        while (v7 != v19);
      }
      return v5;
    }
    char v25 = (char *)a1[1];
    a1[1] = v10;
    if (v16 >= 1) {
      goto LABEL_42;
    }
    return v5;
  }
  uint64_t v11 = *a1;
  unint64_t v12 = a5 + ((v10 - (unsigned char *)*a1) >> 5);
  if (v12 >> 59) {
    sub_2E00();
  }
  uint64_t v13 = v9 - v11;
  if (v13 >> 4 > v12) {
    unint64_t v12 = v13 >> 4;
  }
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v14 = v12;
  }
  if (v14)
  {
    if (v14 >> 59) {
      sub_188D718();
    }
    int v15 = (char *)operator new(32 * v14);
  }
  else
  {
    int v15 = 0;
  }
  uint64_t v26 = 0;
  unsigned int v27 = &v15[32 * ((v5 - v11) >> 5)];
  uint64_t v56 = &v15[32 * v14];
  uint64_t v28 = 32 * a5;
  uint64_t v29 = &v27[v28];
  do
  {
    v27[v26] = v7[v26];
    unsigned int v31 = &v27[v26 + 8];
    uint64_t v32 = (void **)&v7[v26 + 8];
    if ((char)v7[v26 + 31] < 0)
    {
      sub_4200(v31, *v32, *(void *)&v7[v26 + 16]);
    }
    else
    {
      long long v30 = *(_OWORD *)v32;
      *(void *)&v27[v26 + 24] = *(void *)&v7[v26 + 24];
      *(_OWORD *)unsigned int v31 = v30;
    }
    v26 += 32;
  }
  while (v28 != v26);
  uint64_t v33 = v27;
  uint64_t v34 = (char *)*a1;
  uint64_t v35 = v27;
  if (*a1 != v5)
  {
    uint64_t v35 = v27;
    long long v36 = v5;
    do
    {
      char v37 = *(v36 - 32);
      v36 -= 32;
      *(v35 - 32) = v37;
      v35 -= 32;
      long long v38 = *(_OWORD *)(v36 + 8);
      *((void *)v35 + 3) = *((void *)v36 + 3);
      *(_OWORD *)(v35 + 8) = v38;
      *((void *)v36 + 2) = 0;
      *((void *)v36 + 3) = 0;
      *((void *)v36 + 1) = 0;
    }
    while (v36 != v34);
  }
  unint64_t v39 = (char *)a1[1];
  if (v39 != v5)
  {
    do
    {
      *uint64_t v29 = *v5;
      long long v40 = *(_OWORD *)(v5 + 8);
      *((void *)v29 + 3) = *((void *)v5 + 3);
      *(_OWORD *)(v29 + 8) = v40;
      *((void *)v5 + 2) = 0;
      *((void *)v5 + 3) = 0;
      *((void *)v5 + 1) = 0;
      v29 += 32;
      v5 += 32;
    }
    while (v5 != v39);
    uint64_t v5 = (char *)a1[1];
  }
  long long v41 = (char *)*a1;
  *a1 = v35;
  a1[1] = v29;
  a1[2] = v56;
  while (v5 != v41)
  {
    if (*(v5 - 1) < 0) {
      operator delete(*((void **)v5 - 3));
    }
    v5 -= 32;
  }
  if (v41) {
    operator delete(v41);
  }
  return v33;
}

void sub_3E82A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  a12 = v13 + v12;
  sub_21F404((uint64_t)&a10);
  _Unwind_Resume(a1);
}

unint64_t sub_3E82BC(char **a1, uint64_t a2, char *a3, char *a4, uint64_t a5)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a2 - (void)*a1;
  unint64_t v7 = (unint64_t)&(*a1)[v6 & 0xFFFFFFFFFFFFFFE0];
  if (a5 < 1) {
    return v7;
  }
  uint64_t v9 = a3;
  unint64_t v11 = (unint64_t)a1[1];
  uint64_t v12 = a1[2];
  if (a5 <= (uint64_t)&v12[-v11] >> 5)
  {
    uint64_t v17 = (uint64_t)(v11 - v7) >> 5;
    if (v17 >= a5)
    {
      double v18 = &a3[32 * a5];
      double v19 = a1[1];
      unint64_t v23 = v7 + 32 * a5;
      unint64_t v24 = v11 - 32 * a5;
      char v25 = v19;
      if (v24 >= v11)
      {
LABEL_22:
        a1[1] = v25;
        if (v19 != (char *)v23)
        {
          uint64_t v27 = 32 * ((uint64_t)&v19[-v23] >> 5);
          uint64_t v28 = v19 - 32;
          do
          {
            unint64_t v30 = v7 + v27;
            *uint64_t v28 = *(unsigned char *)(v7 + v27 - 32);
            unsigned int v31 = (void **)(v28 + 8);
            if (v28[31] < 0) {
              operator delete(*v31);
            }
            long long v29 = *(_OWORD *)(v30 - 24);
            *((void *)v28 + 3) = *(void *)(v30 - 8);
            *(_OWORD *)unsigned int v31 = v29;
            *(unsigned char *)(v30 - 1) = 0;
            *(unsigned char *)(v30 - 24) = 0;
            v28 -= 32;
            v27 -= 32;
          }
          while (v27);
        }
        if (v18 != v9)
        {
          unint64_t v32 = v7;
          do
          {
            *(unsigned char *)unint64_t v32 = *v9;
            uint64_t v34 = (void **)(v32 + 8);
            if (*(char *)(v32 + 31) < 0) {
              operator delete(*v34);
            }
            long long v33 = *(_OWORD *)(v9 + 8);
            *(void *)(v32 + 24) = *((void *)v9 + 3);
            *(_OWORD *)uint64_t v34 = v33;
            v9[31] = 0;
            v9[8] = 0;
            v32 += 32;
            v9 += 32;
          }
          while (v9 != v18);
        }
        return v7;
      }
    }
    else
    {
      double v18 = &a3[32 * v17];
      double v19 = a1[1];
      if (v18 != a4)
      {
        uint64_t v20 = v18;
        long long v21 = a1[1];
        do
        {
          char *v21 = *v20;
          long long v22 = *(_OWORD *)(v20 + 8);
          *((void *)v21 + 3) = *((void *)v20 + 3);
          *(_OWORD *)(v21 + 8) = v22;
          *((void *)v20 + 2) = 0;
          *((void *)v20 + 3) = 0;
          *((void *)v20 + 1) = 0;
          v19 += 32;
          v20 += 32;
          v21 += 32;
        }
        while (v20 != a4);
      }
      a1[1] = v19;
      if ((uint64_t)(v11 - v7) < 1) {
        return v7;
      }
      unint64_t v23 = v7 + 32 * a5;
      unint64_t v24 = (unint64_t)&v19[-32 * a5];
      char v25 = v19;
      if (v24 >= v11) {
        goto LABEL_22;
      }
    }
    char v25 = v19;
    do
    {
      *char v25 = *(unsigned char *)v24;
      long long v26 = *(_OWORD *)(v24 + 8);
      *((void *)v25 + 3) = *(void *)(v24 + 24);
      *(_OWORD *)(v25 + 8) = v26;
      *(void *)(v24 + 16) = 0;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 8) = 0;
      v25 += 32;
      v24 += 32;
    }
    while (v24 < v11);
    goto LABEL_22;
  }
  unint64_t v13 = a5 + ((uint64_t)(v11 - (void)v5) >> 5);
  if (v13 >> 59) {
    sub_2E00();
  }
  uint64_t v14 = v12 - v5;
  if (v14 >> 4 > v13) {
    unint64_t v13 = v14 >> 4;
  }
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v15 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v15 = v13;
  }
  if (v15)
  {
    if (v15 >> 59) {
      sub_188D718();
    }
    uint64_t v16 = (char *)operator new(32 * v15);
  }
  else
  {
    uint64_t v16 = 0;
  }
  uint64_t v36 = v6 >> 5;
  uint64_t v35 = &v16[32 * (v6 >> 5)];
  char v37 = &v16[32 * v15];
  long long v38 = &v35[32 * a5];
  unint64_t v39 = v35;
  do
  {
    *unint64_t v39 = *v9;
    long long v40 = *(_OWORD *)(v9 + 8);
    *((void *)v39 + 3) = *((void *)v9 + 3);
    *(_OWORD *)(v39 + 8) = v40;
    *((void *)v9 + 2) = 0;
    *((void *)v9 + 3) = 0;
    *((void *)v9 + 1) = 0;
    v39 += 32;
    v9 += 32;
  }
  while (v39 != v38);
  long long v41 = *a1;
  long long v42 = v35;
  if (*a1 != (char *)v7)
  {
    uint64_t v43 = 32 * v36;
    do
    {
      int64_t v44 = &v16[v43];
      long long v45 = &v5[v43];
      *(v44 - 32) = v5[v43 - 32];
      long long v46 = *(_OWORD *)&v5[v43 - 24];
      *((void *)v44 - 1) = *(void *)&v5[v43 - 8];
      *(_OWORD *)(v44 - 24) = v46;
      *((void *)v45 - 2) = 0;
      *((void *)v45 - 1) = 0;
      *((void *)v45 - 3) = 0;
      v16 -= 32;
      v5 -= 32;
    }
    while (&v5[v43] != v41);
    long long v42 = &v16[32 * v36];
  }
  unint64_t v47 = a1[1];
  if (v47 != (char *)v7)
  {
    do
    {
      char *v38 = *(unsigned char *)v7;
      long long v48 = *(_OWORD *)(v7 + 8);
      *((void *)v38 + 3) = *(void *)(v7 + 24);
      *(_OWORD *)(v38 + 8) = v48;
      *(void *)(v7 + 16) = 0;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 8) = 0;
      v38 += 32;
      v7 += 32;
    }
    while ((char *)v7 != v47);
    unint64_t v7 = (unint64_t)a1[1];
  }
  unint64_t v49 = *a1;
  *a1 = v42;
  a1[1] = v38;
  a1[2] = v37;
  while ((char *)v7 != v49)
  {
    if (*(char *)(v7 - 1) < 0) {
      operator delete(*(void **)(v7 - 24));
    }
    v7 -= 32;
  }
  if (v49) {
    operator delete(v49);
  }
  return (unint64_t)v35;
}

char *sub_3E8634@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  switch((int)result)
  {
    case 1:
      *(unsigned char *)(a2 + 23) = 20;
      strcpy((char *)a2, "[UnsupportedRequest]");
      return result;
    case 2:
      double result = (char *)operator new(0x20uLL);
      *(void *)a2 = result;
      long long v3 = xmmword_20B91C0;
      long long v4 = "[UserLocationValidation]";
      goto LABEL_9;
    case 3:
      double result = (char *)operator new(0x20uLL);
      *(void *)a2 = result;
      *(_OWORD *)(a2 + 8) = xmmword_20B5EB0;
      strcpy(result, "[RequestOptionsValidation]");
      return result;
    case 4:
      double result = (char *)operator new(0x20uLL);
      *(void *)a2 = result;
      *(_OWORD *)(a2 + 8) = xmmword_20B91A0;
      strcpy(result, "[RouteAttributesValidation]");
      return result;
    case 5:
      double result = (char *)operator new(0x20uLL);
      *(void *)a2 = result;
      *(_OWORD *)(a2 + 8) = xmmword_20B9800;
      strcpy(result, "[ClientCapabilitiesValidation]");
      return result;
    case 6:
      double result = (char *)operator new(0x20uLL);
      *(void *)a2 = result;
      long long v3 = xmmword_20B91C0;
      long long v4 = "[SessionStateValidation]";
LABEL_9:
      *(_OWORD *)(a2 + 8) = v3;
      *(_OWORD *)double result = *(_OWORD *)v4;
      *((void *)result + 2) = *((void *)v4 + 2);
      result[24] = 0;
      return result;
    case 7:
      uint64_t v5 = "[UserRouteValidation]";
      goto LABEL_14;
    case 8:
      *(unsigned char *)(a2 + 23) = 20;
      strcpy((char *)a2, "[WaypointValidation]");
      return result;
    case 9:
      double result = (char *)operator new(0x20uLL);
      *(void *)a2 = result;
      *(_OWORD *)(a2 + 8) = xmmword_20B91B0;
      strcpy(result, "[MultiStopRoutingValidation]");
      return result;
    case 10:
      uint64_t v5 = "[EVRequestValidation]";
LABEL_14:
      *(unsigned char *)(a2 + 23) = 21;
      *(_OWORD *)a2 = *(_OWORD *)v5;
      *(void *)(a2 + 13) = *(void *)(v5 + 13);
      *(unsigned char *)(a2 + 21) = 0;
      break;
    case 11:
      *(unsigned char *)(a2 + 23) = 19;
      strcpy((char *)a2, "[EVModelValidation]");
      break;
    case 12:
      double result = (char *)operator new(0x28uLL);
      *(void *)a2 = result;
      *(_OWORD *)(a2 + 8) = xmmword_20B9260;
      strcpy(result, "[EVChargingPreferencesValidation]");
      break;
    case 13:
      double result = (char *)operator new(0x19uLL);
      *(void *)a2 = result;
      *(_OWORD *)(a2 + 8) = xmmword_20B9250;
      strcpy(result, "[DistanceLimitExceeded]");
      break;
    default:
      *(unsigned char *)(a2 + 23) = 0;
      *(unsigned char *)a2 = 0;
      break;
  }
  return result;
}

uint64_t sub_3E8978(uint64_t a1)
{
  uint64_t v2 = sub_3E8FF4(&xmmword_2558048, a1);
  if (v2) {
    return *((unsigned __int8 *)v2 + 40);
  }
  uint64_t result = sub_723EC(3u);
  if (result)
  {
    sub_6BAC((uint64_t)v11);
    long long v4 = sub_188FC78(v11, (uint64_t)"Tag ", 4);
    int v5 = *(char *)(a1 + 23);
    if (v5 >= 0) {
      uint64_t v6 = a1;
    }
    else {
      uint64_t v6 = *(void *)a1;
    }
    if (v5 >= 0) {
      uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v7 = *(void *)(a1 + 8);
    }
    uint64_t v8 = sub_188FC78(v4, v6, v7);
    sub_188FC78(v8, (uint64_t)" is not defined in routing error tags", 37);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (v10 < 0) {
      operator delete(__p);
    }
    if (v12 < 0) {
      operator delete((void *)v11[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    return 0;
  }
  return result;
}

void sub_3E8B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *sub_3E8B80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_B128((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    unint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          int v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            uint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  char v25 = (char *)operator new(0x30uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *(void *)char v25 = 0;
  *((void *)v25 + 1) = v10;
  long long v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v26, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)long long v26 = *(_OWORD *)a3;
    *((void *)v25 + 4) = *(void *)(a3 + 16);
  }
  v25[40] = *(unsigned char *)(a3 + 24);
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        long long v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        unint64_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        long long v29 = *(void **)(*(void *)a1 + 8 * v10);
        unint64_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      long long v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      unint64_t v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *unint64_t v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  long long v29 = *(void **)(*(void *)a1 + 8 * v3);
  unint64_t v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  *unint64_t v30 = *v29;
  *long long v29 = v42[0];
LABEL_92:
  uint64_t v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_3E8FC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_3E8FDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_3E8FF4(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint8x8_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    unint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          unint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        unint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

void sub_3E9224()
{
  __int16 v1 = 275;
  strcpy(v0, "unsupported_request");
  uint64_t v2 = operator new(0x20uLL);
  long long v3 = xmmword_20B91C0;
  strcpy((char *)v2, "user_location_validation");
  char v4 = 2;
  unint64_t v5 = operator new(0x20uLL);
  long long v6 = xmmword_20B5EB0;
  strcpy((char *)v5, "request_options_validation");
  char v7 = 3;
  unint64_t v8 = operator new(0x20uLL);
  long long v9 = xmmword_20B91A0;
  strcpy((char *)v8, "route_attributes_validation");
  char v10 = 4;
  unint64_t v11 = operator new(0x20uLL);
  long long v12 = xmmword_20B9800;
  strcpy((char *)v11, "client_capabilities_validation");
  char v13 = 5;
  char v14 = operator new(0x20uLL);
  long long v15 = xmmword_20B91C0;
  strcpy((char *)v14, "session_state_validation");
  char v16 = 6;
  *(_WORD *)((char *)&v17[2] + 7) = 1813;
  strcpy((char *)v17, "user_route_validation");
  HIBYTE(v18[2]) = 19;
  strcpy((char *)v18, "waypoint_validation");
  char v19 = 8;
  v20[0] = operator new(0x20uLL);
  v20[1] = &dword_1C + 1;
  unint64_t v21 = 0x8000000000000020;
  strcpy((char *)v20[0], "multi_stop_routing_validation");
  char v22 = 9;
  *(_WORD *)((char *)&v23[2] + 7) = 2581;
  strcpy((char *)v23, "ev_request_validation");
  HIBYTE(v24[2]) = 19;
  strcpy((char *)v24, "ev_model_validation");
  char v25 = 11;
  v26[0] = operator new(0x28uLL);
  v26[1] = &stru_20 + 2;
  unint64_t v27 = 0x8000000000000028;
  strcpy((char *)v26[0], "ev_charging_preferences_validation");
  char v28 = 12;
  __p[0] = operator new(0x19uLL);
  __p[1] = &dword_14 + 3;
  unint64_t v30 = 0x8000000000000019;
  strcpy((char *)__p[0], "distance_limit_exceeded");
  char v31 = 13;
  xmmword_2558048 = 0u;
  *(_OWORD *)&qword_2558058 = 0u;
  dword_2558068 = 1065353216;
  sub_3E8B80((uint64_t)&xmmword_2558048, (uint64_t)v0, (uint64_t)v0);
  sub_3E8B80((uint64_t)&xmmword_2558048, (uint64_t)&v2, (uint64_t)&v2);
  sub_3E8B80((uint64_t)&xmmword_2558048, (uint64_t)&v5, (uint64_t)&v5);
  sub_3E8B80((uint64_t)&xmmword_2558048, (uint64_t)&v8, (uint64_t)&v8);
  sub_3E8B80((uint64_t)&xmmword_2558048, (uint64_t)&v11, (uint64_t)&v11);
  sub_3E8B80((uint64_t)&xmmword_2558048, (uint64_t)&v14, (uint64_t)&v14);
  sub_3E8B80((uint64_t)&xmmword_2558048, (uint64_t)v17, (uint64_t)v17);
  sub_3E8B80((uint64_t)&xmmword_2558048, (uint64_t)v18, (uint64_t)v18);
  sub_3E8B80((uint64_t)&xmmword_2558048, (uint64_t)v20, (uint64_t)v20);
  sub_3E8B80((uint64_t)&xmmword_2558048, (uint64_t)v23, (uint64_t)v23);
  sub_3E8B80((uint64_t)&xmmword_2558048, (uint64_t)v24, (uint64_t)v24);
  sub_3E8B80((uint64_t)&xmmword_2558048, (uint64_t)v26, (uint64_t)v26);
  sub_3E8B80((uint64_t)&xmmword_2558048, (uint64_t)__p, (uint64_t)__p);
  if (SHIBYTE(v30) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v27) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SHIBYTE(v24[2]) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v26[0]);
  if ((SHIBYTE(v24[2]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((SHIBYTE(v23[2]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(v24[0]);
  if ((SHIBYTE(v23[2]) & 0x80000000) == 0)
  {
LABEL_5:
    if ((SHIBYTE(v21) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(v23[0]);
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
LABEL_6:
    if ((SHIBYTE(v18[2]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(v20[0]);
  if ((SHIBYTE(v18[2]) & 0x80000000) == 0)
  {
LABEL_7:
    if ((SHIBYTE(v17[2]) & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(v18[0]);
  if ((SHIBYTE(v17[2]) & 0x80000000) == 0)
  {
LABEL_8:
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(v17[0]);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_9:
    if ((SHIBYTE(v12) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(v14);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v9) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete(v11);
  if ((SHIBYTE(v9) & 0x80000000) == 0)
  {
LABEL_11:
    if ((SHIBYTE(v6) & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  operator delete(v8);
  if ((SHIBYTE(v6) & 0x80000000) == 0)
  {
LABEL_12:
    if ((SHIBYTE(v3) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete(v5);
  if ((SHIBYTE(v3) & 0x80000000) == 0)
  {
LABEL_13:
    if (((char)v1 & 0x80000000) == 0) {
      return;
    }
LABEL_27:
    operator delete(*(void **)v0);
    return;
  }
LABEL_26:
  operator delete(v2);
  if ((char)v1 < 0) {
    goto LABEL_27;
  }
}

void sub_3E97DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  long long v15 = v13;
  while (1)
  {
    if (*((char *)v15 - 9) < 0) {
      operator delete(*(v15 - 4));
    }
    v15 -= 4;
    if (v15 == &a13) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_3E99C8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(int64x2_t *)a2 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(void *)(a2 + 16) = 0x7FEFFFFFFFFFFFFFLL;
  *(unsigned char *)(a2 + 24) = 1;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 32) = 0;
  *(int64x2_t *)(a2 + 56) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  long long v3 = *(uint64_t (****)())(result + 72);
  if (v3) {
    char v4 = *(uint64_t (****)())(result + 72);
  }
  else {
    char v4 = &off_2539DC0;
  }
  unint64_t v5 = &off_2539D48;
  if (v4[3]) {
    unint64_t v5 = (uint64_t (***)())v4[3];
  }
  if ((~*((_DWORD *)v5 + 4) & 7) == 0 && ((unint64_t)v5[3] & 0x7FFFFFFFFFFFFFFFLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    unint64_t v6 = (unint64_t)v5[4];
    if ((v6 & 0x7FFFFFFFFFFFFFFFLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      unint64_t v7 = (unint64_t)v5[5];
      if ((v7 & 0x7FFFFFFFFFFFFFFFLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        *(void *)a2 = v5[3];
        *(void *)(a2 + 8) = v6;
        *(void *)(a2 + 16) = v7;
        *(unsigned char *)(a2 + 24) = 0;
        *(_OWORD *)(a2 + 32) = *((_OWORD *)v5 + 3);
        *(void *)(a2 + 48) = v5[8];
        if (((_BYTE)v4[2] & 4) != 0)
        {
          uint64_t v8 = result;
          uint64_t result = sub_3E9AE8(*((double *)v4 + 5));
          *(void *)(a2 + 64) = result;
          long long v3 = *(uint64_t (****)())(v8 + 72);
        }
        if (!v3) {
          long long v3 = &off_2539DC0;
        }
        if (((_BYTE)v3[2] & 2) != 0)
        {
          uint64_t result = sub_3E9AE8(*((double *)v3 + 4));
          *(void *)(a2 + 56) = result;
        }
      }
    }
  }
  return result;
}

uint64_t sub_3E9AE8(double a1)
{
  double v1 = a1 * 100.0;
  if (v1 >= 0.0)
  {
    double v2 = v1;
    if (v1 >= 4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v3 = (uint64_t)(v1 + v1) + 1;
  }
  else
  {
    double v2 = v1;
    if (v1 <= -4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v3 = (uint64_t)(v1 + v1);
    if (v3 >= 1) {
      --v3;
    }
  }
  double v2 = (double)(v3 >> 1);
LABEL_9:
  if (v2 >= 9.22337204e18) {
    return 0x7FFFFFFFFFFFFFFELL;
  }
  if (v1 >= 0.0)
  {
    if (v1 < 4.50359963e15)
    {
      uint64_t v4 = (uint64_t)(v1 + v1) + 1;
      return (uint64_t)(double)(v4 >> 1);
    }
  }
  else if (v1 > -4.50359963e15)
  {
    uint64_t v4 = (uint64_t)(v1 + v1);
    if (v4 >= 1) {
      --v4;
    }
    return (uint64_t)(double)(v4 >> 1);
  }
  return (uint64_t)v1;
}

double sub_3E9BBC(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 16) |= 1u;
  uint64_t v4 = *(void *)(a2 + 24);
  if (!v4)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    unint64_t v6 = (void *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
    if (v5) {
      unint64_t v6 = (void *)*v6;
    }
    sub_1481D2C((uint64_t)v6);
    *(void *)(a2 + 24) = v4;
  }
  int v7 = *(_DWORD *)(v4 + 16);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)a1;
  *(void *)(v4 + 40) = *(void *)(a1 + 16);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a1 + 32);
  double result = *(double *)(a1 + 48);
  *(_DWORD *)(v4 + 16) = v7 | 0x3F;
  *(double *)(v4 + 64) = result;
  uint64_t v9 = *(void *)(a1 + 56);
  if (v9 == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v10 = *(void *)(a1 + 64);
    if (v10 == 0x7FFFFFFFFFFFFFFFLL) {
      return result;
    }
LABEL_9:
    double result = (double)v10 / 100.0;
    *(_DWORD *)(a2 + 16) |= 4u;
    *(double *)(a2 + 40) = result;
    return result;
  }
  double result = (double)v9 / 100.0;
  *(_DWORD *)(a2 + 16) |= 2u;
  *(double *)(a2 + 32) = result;
  uint64_t v10 = *(void *)(a1 + 64);
  if (v10 != 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_3E9CB0(uint64_t result, uint64_t a2)
{
  double v2 = *(int **)result;
  uint64_t v3 = *(int **)(result + 8);
  if (*(int **)result != v3)
  {
    uint64_t v5 = (uint64_t *)(a2 + 48);
    do
    {
      uint64_t v10 = *(_DWORD **)(a2 + 64);
      if (v10 && (uint64_t v11 = *(int *)(a2 + 56), (int)v11 < *v10))
      {
        *(_DWORD *)(a2 + 56) = v11 + 1;
        double result = *(void *)&v10[2 * v11 + 2];
      }
      else
      {
        unint64_t v6 = sub_1478BE8(*v5);
        double result = sub_188CDC8((uint64_t)v5, (uint64_t)v6);
      }
      int v7 = *v2;
      int v8 = *(_DWORD *)(result + 16);
      *(_DWORD *)(result + 16) = v8 | 1;
      *(_DWORD *)(result + 24) = v7;
      int v9 = v2[1];
      *(_DWORD *)(result + 16) = v8 | 3;
      *(_DWORD *)(result + 28) = v9;
      v2 += 2;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t *sub_3E9D5C(uint64_t *a1, void *a2)
{
  uint64_t v4 = sub_3750CC(a2);
  *a1 = v4;
  uint64_t v5 = a1 + 1;
  unint64_t v6 = sub_290DEC(v4 + 3896, 1u, 1);
  if (v6 && (int v7 = &v6[-*(int *)v6], *(unsigned __int16 *)v7 >= 0xBu) && (v8 = *((unsigned __int16 *)v7 + 5)) != 0)
  {
    unint64_t v9 = *(unsigned int *)&v6[v8 + *(unsigned int *)&v6[v8]];
    uint64_t *v5 = 0;
    a1[2] = 0;
    a1[3] = 0;
    if (v9)
    {
      unint64_t v10 = ((v9 - 1) >> 6) + 1;
      a1[1] = (uint64_t)operator new(8 * v10);
      a1[2] = 0;
      a1[3] = v10;
      sub_43284(a1 + 1, v9, 0);
    }
  }
  else
  {
    uint64_t *v5 = 0;
    a1[2] = 0;
    a1[3] = 0;
  }
  HIBYTE(v29) = 14;
  strcpy((char *)v28, "TollClassifier");
  memset(__p, 0, sizeof(__p));
  uint64_t v11 = sub_374CDC((uint64_t)a2, (uint64_t)v28, (uint64_t *)__p);
  long long v12 = (void **)__p[0];
  if (__p[0])
  {
    char v13 = (void **)__p[1];
    char v14 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v13 - 1) < 0) {
          operator delete(*(v13 - 3));
        }
        v13 -= 3;
      }
      while (v13 != v12);
      char v14 = __p[0];
    }
    __p[1] = v12;
    operator delete(v14);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete(v28[0]);
  }
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "annual_pass_countries");
  long long v15 = (uint64_t *)sub_5C4AC(v11, (uint64_t)__p);
  v28[0] = 0;
  v28[1] = 0;
  uint64_t v29 = 0;
  sub_54DE8(v28, *v15, v15[1], (v15[1] - *v15) >> 4);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    char v16 = (unsigned __int8 ***)v28[0];
    unint64_t v17 = (unsigned __int8 ***)v28[1];
    if (v28[0] == v28[1])
    {
LABEL_19:
      if (!v16) {
        return a1;
      }
      goto LABEL_31;
    }
  }
  else
  {
    char v16 = (unsigned __int8 ***)v28[0];
    unint64_t v17 = (unsigned __int8 ***)v28[1];
    if (v28[0] == v28[1]) {
      goto LABEL_19;
    }
  }
  do
  {
    if (*((_DWORD *)v16 + 2))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    sub_3279E4(*a1, *v16, __p);
    uint64_t v18 = __p[0];
    char v19 = (unsigned __int16 *)__p[1];
    if (__p[0] != __p[1])
    {
      uint64_t v20 = *v5;
      unint64_t v21 = (unsigned __int16 *)__p[0];
      do
      {
        unsigned int v22 = *v21++;
        *(void *)(v20 + (((unint64_t)v22 >> 3) & 0x1FF8)) |= 1 << v22;
      }
      while (v21 != v19);
    }
    if (v18)
    {
      __p[1] = v18;
      operator delete(v18);
    }
    v16 += 2;
  }
  while (v16 != v17);
  char v16 = (unsigned __int8 ***)v28[0];
  if (v28[0])
  {
LABEL_31:
    uint64_t v23 = (unsigned __int8 ***)v28[1];
    uint64_t v24 = v16;
    if (v28[1] != v16)
    {
      do
        uint64_t v23 = (unsigned __int8 ***)sub_55198((uint64_t)(v23 - 2));
      while (v23 != v16);
      uint64_t v24 = (unsigned __int8 ***)v28[0];
    }
    v28[1] = v16;
    operator delete(v24);
  }
  return a1;
}

void sub_3EA02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_1A668(&a9);
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*v20) {
    operator delete(*v20);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_3EA08C(uint64_t a1, char **a2)
{
  double v2 = *a2;
  uint64_t v3 = &(*a2)[-*(int *)*a2];
  unsigned int v4 = *(unsigned __int16 *)v3;
  if (v4 < 0xB || !*((_WORD *)v3 + 5) || (v2[*((unsigned __int16 *)v3 + 5) + 1] & 1) == 0) {
    return 0;
  }
  if (v4 < 0xD)
  {
    unint64_t v6 = 0;
  }
  else
  {
    unint64_t v6 = *((unsigned __int16 *)v3 + 6);
    if (v6) {
      unint64_t v6 = *(unsigned __int16 *)&v2[v6];
    }
  }
  uint64_t v7 = 1;
  if (*(void *)(a1 + 16) > v6)
  {
    if ((*(void *)(*(void *)(a1 + 8) + ((v6 >> 3) & 0x1FF8)) >> v6)) {
      return 2;
    }
    else {
      return 1;
    }
  }
  return v7;
}

void sub_3EA110()
{
  unk_2558087 = 16641;
  word_2558070 = 65;
  byte_255809F = 1;
  byte_2558089 = 0;
}

uint64_t sub_3EA138(uint64_t a1, void *a2, int a3)
{
  *(void *)a1 = sub_374D14(a2);
  *(void *)(a1 + 8) = sub_3750CC(a2);
  *(void *)(a1 + 16) = sub_37B3A8((uint64_t)a2);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0x8000000080000000;
  uint64_t v16 = 0;
  v17[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v17[1] = xmmword_20B91C0;
  strcpy(v17[0], "TrafficIncidentsAccessor");
  long long __p = 0;
  long long v15 = 0;
  unint64_t v6 = sub_374CDC((uint64_t)a2, (uint64_t)v17, (uint64_t *)&__p);
  uint64_t v7 = (void **)__p;
  if (__p)
  {
    uint64_t v8 = v15;
    unint64_t v9 = __p;
    if (v15 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unint64_t v9 = __p;
    }
    long long v15 = v7;
    operator delete(v9);
  }
  if ((SHIBYTE(v17[2]) & 0x80000000) == 0)
  {
    unint64_t v10 = "placeIN3msl6common4http10HttpClientENS_9allocatorIS4_EEEE";
    if (a3) {
      goto LABEL_11;
    }
LABEL_15:
    v17[0] = (char *)operator new(0x19uLL);
    *(_OWORD *)&v17[1] = xmmword_20B9250;
    strcpy(v17[0], "use_for_static_requests");
    BOOL v11 = sub_29D62C(v6, (uint64_t)v17);
    goto LABEL_17;
  }
  operator delete(v17[0]);
  unint64_t v10 = "NSt3__120__shared_ptr_emplaceIN3msl6common4http10HttpClientENS_9allocatorIS4_EEEE" + 24;
  if (!a3) {
    goto LABEL_15;
  }
LABEL_11:
  if (a3 == 1)
  {
    v17[0] = (char *)operator new(0x20uLL);
    *(_OWORD *)&v17[1] = *((_OWORD *)v10 + 26);
    strcpy(v17[0], "use_for_historical_requests");
    BOOL v11 = sub_29D62C(v6, (uint64_t)v17);
  }
  else
  {
    if (a3 != 2) {
      goto LABEL_19;
    }
    HIBYTE(v17[2]) = 21;
    strcpy((char *)v17, "use_for_live_requests");
    BOOL v11 = sub_29D62C(v6, (uint64_t)v17);
  }
LABEL_17:
  *(unsigned char *)(a1 + 25) = v11;
  if (SHIBYTE(v17[2]) < 0) {
    operator delete(v17[0]);
  }
LABEL_19:
  v17[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v17[1] = xmmword_20B91C0;
  strcpy(v17[0], "enable_maneuver_closures");
  *(unsigned char *)(a1 + 26) = sub_29D62C(v6, (uint64_t)v17);
  if (SHIBYTE(v17[2]) < 0) {
    operator delete(v17[0]);
  }
  v17[0] = (char *)operator new(0x20uLL);
  long long v13 = *((_OWORD *)v10 + 26);
  *(_OWORD *)&v17[1] = v13;
  strcpy(v17[0], "enable_no_through_incidents");
  *(unsigned char *)(a1 + 27) = sub_29D62C(v6, (uint64_t)v17);
  if (SHIBYTE(v17[2]) < 0) {
    operator delete(v17[0]);
  }
  v17[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v17[1] = xmmword_20B8FD0;
  strcpy(v17[0], "filter_lane_closures_without_traffic");
  *(unsigned char *)(a1 + 28) = sub_29D62C(v6, (uint64_t)v17);
  if (SHIBYTE(v17[2]) < 0) {
    operator delete(v17[0]);
  }
  HIBYTE(v17[2]) = 21;
  strcpy((char *)v17, "enable_area_incidents");
  *(unsigned char *)(a1 + 29) = sub_29D62C(v6, (uint64_t)v17);
  if (SHIBYTE(v17[2]) < 0) {
    operator delete(v17[0]);
  }
  HIBYTE(v17[2]) = 20;
  strcpy((char *)v17, "enable_soft_closures");
  *(unsigned char *)(a1 + 30) = sub_29D62C(v6, (uint64_t)v17);
  if (SHIBYTE(v17[2]) < 0) {
    operator delete(v17[0]);
  }
  v17[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v17[1] = xmmword_20B8FD0;
  strcpy(v17[0], "enable_siri_user_generated_incidents");
  *(unsigned char *)(a1 + 31) = sub_29D62C(v6, (uint64_t)v17);
  if (SHIBYTE(v17[2]) < 0) {
    operator delete(v17[0]);
  }
  v17[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v17[1] = xmmword_20B8870;
  strcpy(v17[0], "incident_end_ignore_slack");
  *(_DWORD *)(a1 + 32) = 600 * sub_319F48(v6, (uint64_t)v17);
  if (SHIBYTE(v17[2]) < 0) {
    operator delete(v17[0]);
  }
  v17[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v17[1] = v13;
  strcpy(v17[0], "incident_start_ignore_slack");
  *(_DWORD *)(a1 + 36) = 600 * sub_319F48(v6, (uint64_t)v17);
  if (SHIBYTE(v17[2]) < 0) {
    operator delete(v17[0]);
  }
  return a1;
}

void sub_3EA5CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_3EA6A4(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t ***a4@<X8>)
{
  if (a2 && *(unsigned char *)(a1 + 25))
  {
    sub_3F57C8(*(uint64_t **)a1, a2, a3, *(_DWORD *)(*(void *)a1 + 48), a4);
    if (*(unsigned char *)(a1 + 28))
    {
      unint64_t v6 = *(uint64_t **)a1;
      uint64_t v7 = *a4;
      uint64_t v8 = a4[1];
      v10[0] = a1;
      v10[1] = (uint64_t)v6;
      if (v7 != v8)
      {
        while ((sub_3F5A54(v10, v7) & 1) == 0)
        {
          v7 += 2;
          if (v7 == v8)
          {
            uint64_t v7 = v8;
            goto LABEL_16;
          }
        }
      }
      if (v7 != v8)
      {
        for (uint64_t i = v7 + 2; i != v8; i += 2)
        {
          if ((sub_3F5A54(v10, i) & 1) == 0)
          {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)i;
            v7 += 2;
          }
        }
      }
LABEL_16:
      if (v7 != a4[1]) {
        a4[1] = v7;
      }
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void sub_3EA7B8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_3EA7D8(void *a1)
{
  double v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t sub_3EA868@<X0>(uint64_t result@<X0>, int **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = (char *)*a2;
  unsigned int v4 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v5 = *v4;
  if (!*((unsigned char *)a2 + 38))
  {
    if (v5 < 0x47)
    {
      if (v5 <= 0x38) {
        goto LABEL_20;
      }
    }
    else if (v4[35] && (v3[v4[35]] & 1) != 0)
    {
LABEL_9:
      unint64_t v6 = (unint64_t)a2[4];
      v11[0] = off_2439288;
      long long v12 = v11;
      sub_3EA6A4(result, v6, (uint64_t)v11, (uint64_t ***)a3);
      double result = (uint64_t)v12;
      if (v12 != v11) {
        goto LABEL_22;
      }
      return (*(uint64_t (**)(void *))(v11[0] + 32))(v11);
    }
    uint64_t v9 = v4[28];
    if (v9)
    {
      int v8 = *(_DWORD *)&v3[v9];
      if (v8) {
        goto LABEL_21;
      }
      goto LABEL_18;
    }
LABEL_20:
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    return result;
  }
  if (v5 < 0x47)
  {
    if (v5 > 0x38) {
      goto LABEL_12;
    }
    goto LABEL_20;
  }
  if (v4[35] && (v3[v4[35]] & 2) != 0) {
    goto LABEL_9;
  }
LABEL_12:
  uint64_t v7 = v4[28];
  if (!v7) {
    goto LABEL_20;
  }
  int v8 = *(_DWORD *)&v3[v7];
  if ((v8 & 2) != 0) {
    goto LABEL_21;
  }
LABEL_18:
  if ((v8 & 7) != 4 && (v8 & 0x23) != 0x20) {
    goto LABEL_20;
  }
LABEL_21:
  unint64_t v10 = (unint64_t)a2[4];
  v11[0] = off_2439308;
  long long v12 = v11;
  sub_3EA6A4(result, v10, (uint64_t)v11, (uint64_t ***)a3);
  double result = (uint64_t)v12;
  if (v12 == v11) {
    return (*(uint64_t (**)(void *))(v11[0] + 32))(v11);
  }
LABEL_22:
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

void sub_3EAA2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3EA7D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_3EAA40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3EA7D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_3EAA54(uint64_t a1, void *a2, int a3)
{
  *(void *)a1 = sub_374D14(a2);
  *(void *)(a1 + 8) = sub_3750CC(a2);
  *(void *)(a1 + 16) = sub_37B3A8((uint64_t)a2);
  char v6 = sub_DC6EDC((uint64_t)a2);
  *(_DWORD *)(a1 + 25) = 0;
  *(unsigned char *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 28) = 0;
  *(void *)(a1 + 32) = 0x8000000080000000;
  uint64_t v17 = 0;
  v18[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v18[1] = xmmword_20B91C0;
  strcpy(v18[0], "TrafficIncidentsAccessor");
  long long __p = 0;
  uint64_t v16 = 0;
  uint64_t v7 = sub_374CDC((uint64_t)a2, (uint64_t)v18, (uint64_t *)&__p);
  int v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v16;
    unint64_t v10 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      unint64_t v10 = __p;
    }
    uint64_t v16 = v8;
    operator delete(v10);
  }
  if ((SHIBYTE(v18[2]) & 0x80000000) == 0)
  {
    BOOL v11 = "placeIN3msl6common4http10HttpClientENS_9allocatorIS4_EEEE";
    if (a3) {
      goto LABEL_11;
    }
LABEL_15:
    v18[0] = (char *)operator new(0x19uLL);
    *(_OWORD *)&v18[1] = xmmword_20B9250;
    strcpy(v18[0], "use_for_static_requests");
    BOOL v12 = sub_29D62C(v7, (uint64_t)v18);
    goto LABEL_17;
  }
  operator delete(v18[0]);
  BOOL v11 = "NSt3__120__shared_ptr_emplaceIN3msl6common4http10HttpClientENS_9allocatorIS4_EEEE" + 24;
  if (!a3) {
    goto LABEL_15;
  }
LABEL_11:
  if (a3 == 1)
  {
    v18[0] = (char *)operator new(0x20uLL);
    *(_OWORD *)&v18[1] = *((_OWORD *)v11 + 26);
    strcpy(v18[0], "use_for_historical_requests");
    BOOL v12 = sub_29D62C(v7, (uint64_t)v18);
  }
  else
  {
    if (a3 != 2) {
      goto LABEL_19;
    }
    HIBYTE(v18[2]) = 21;
    strcpy((char *)v18, "use_for_live_requests");
    BOOL v12 = sub_29D62C(v7, (uint64_t)v18);
  }
LABEL_17:
  *(unsigned char *)(a1 + 25) = v12;
  if (SHIBYTE(v18[2]) < 0) {
    operator delete(v18[0]);
  }
LABEL_19:
  v18[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v18[1] = xmmword_20B91C0;
  strcpy(v18[0], "enable_maneuver_closures");
  *(unsigned char *)(a1 + 26) = sub_29D62C(v7, (uint64_t)v18);
  if (SHIBYTE(v18[2]) < 0) {
    operator delete(v18[0]);
  }
  v18[0] = (char *)operator new(0x20uLL);
  long long v14 = *((_OWORD *)v11 + 26);
  *(_OWORD *)&v18[1] = v14;
  strcpy(v18[0], "enable_no_through_incidents");
  *(unsigned char *)(a1 + 27) = sub_29D62C(v7, (uint64_t)v18);
  if (SHIBYTE(v18[2]) < 0) {
    operator delete(v18[0]);
  }
  v18[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v18[1] = xmmword_20B8FD0;
  strcpy(v18[0], "filter_lane_closures_without_traffic");
  *(unsigned char *)(a1 + 28) = sub_29D62C(v7, (uint64_t)v18);
  if (SHIBYTE(v18[2]) < 0) {
    operator delete(v18[0]);
  }
  HIBYTE(v18[2]) = 21;
  strcpy((char *)v18, "enable_area_incidents");
  *(unsigned char *)(a1 + 29) = sub_29D62C(v7, (uint64_t)v18);
  if (SHIBYTE(v18[2]) < 0) {
    operator delete(v18[0]);
  }
  HIBYTE(v18[2]) = 20;
  strcpy((char *)v18, "enable_soft_closures");
  *(unsigned char *)(a1 + 30) = sub_29D62C(v7, (uint64_t)v18);
  if (SHIBYTE(v18[2]) < 0) {
    operator delete(v18[0]);
  }
  v18[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v18[1] = xmmword_20B8FD0;
  strcpy(v18[0], "enable_siri_user_generated_incidents");
  *(unsigned char *)(a1 + 31) = sub_29D62C(v7, (uint64_t)v18);
  if (SHIBYTE(v18[2]) < 0) {
    operator delete(v18[0]);
  }
  v18[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v18[1] = xmmword_20B8870;
  strcpy(v18[0], "incident_end_ignore_slack");
  *(_DWORD *)(a1 + 32) = 600 * sub_319F48(v7, (uint64_t)v18);
  if (SHIBYTE(v18[2]) < 0) {
    operator delete(v18[0]);
  }
  v18[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v18[1] = v14;
  strcpy(v18[0], "incident_start_ignore_slack");
  *(_DWORD *)(a1 + 36) = 600 * sub_319F48(v7, (uint64_t)v18);
  if (SHIBYTE(v18[2]) < 0) {
    operator delete(v18[0]);
  }
  return a1;
}

void sub_3EAF00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_3EAFD8(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t ***a4@<X8>)
{
  if (a2 && *(unsigned char *)(a1 + 25))
  {
    sub_3F57C8(*(uint64_t **)a1, a2, a3, *(_DWORD *)(*(void *)a1 + 48), a4);
    if (*(unsigned char *)(a1 + 28))
    {
      char v6 = *(uint64_t **)a1;
      uint64_t v7 = *a4;
      int v8 = a4[1];
      v10[0] = a1;
      v10[1] = (uint64_t)v6;
      if (v7 != v8)
      {
        while ((sub_3F5E24(v10, v7) & 1) == 0)
        {
          v7 += 2;
          if (v7 == v8)
          {
            uint64_t v7 = v8;
            goto LABEL_16;
          }
        }
      }
      if (v7 != v8)
      {
        for (uint64_t i = v7 + 2; i != v8; i += 2)
        {
          if ((sub_3F5E24(v10, i) & 1) == 0)
          {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)i;
            v7 += 2;
          }
        }
      }
LABEL_16:
      if (v7 != a4[1]) {
        a4[1] = v7;
      }
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void sub_3EB0EC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3EB10C@<X0>(uint64_t result@<X0>, int **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = (char *)*a2;
  unsigned int v4 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v5 = *v4;
  if (!*((unsigned char *)a2 + 38))
  {
    if (v5 < 0xB) {
      goto LABEL_22;
    }
    if (v4[5])
    {
      if (v3[v4[5]]) {
        goto LABEL_14;
      }
      if (v5 < 0x39)
      {
LABEL_22:
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        return result;
      }
    }
    else if (v5 <= 0x38)
    {
      goto LABEL_22;
    }
    uint64_t v9 = v4[28];
    if (v9)
    {
      int v7 = *(_DWORD *)&v3[v9];
      if (v7) {
        goto LABEL_24;
      }
      goto LABEL_20;
    }
    goto LABEL_22;
  }
  if (v5 < 0xB) {
    goto LABEL_22;
  }
  if (v4[5] && (v3[v4[5]] & 2) != 0)
  {
LABEL_14:
    unint64_t v8 = (unint64_t)a2[4];
    v11[0] = off_2439408;
    BOOL v12 = v11;
    sub_3EAFD8(result, v8, (uint64_t)v11, (uint64_t ***)a3);
    double result = (uint64_t)v12;
    if (v12 == v11) {
      return (*(uint64_t (**)(void *))(v11[0] + 32))(v11);
    }
    goto LABEL_15;
  }
  if (v5 <= 0x38) {
    goto LABEL_22;
  }
  uint64_t v6 = v4[28];
  if (!v6) {
    goto LABEL_22;
  }
  int v7 = *(_DWORD *)&v3[v6];
  if ((v7 & 2) != 0) {
    goto LABEL_24;
  }
LABEL_20:
  if ((v7 & 7) != 4 && (v7 & 0x23) != 0x20) {
    goto LABEL_22;
  }
LABEL_24:
  unint64_t v10 = (unint64_t)a2[4];
  v11[0] = off_2439488;
  BOOL v12 = v11;
  sub_3EAFD8(result, v10, (uint64_t)v11, (uint64_t ***)a3);
  double result = (uint64_t)v12;
  if (v12 == v11) {
    return (*(uint64_t (**)(void *))(v11[0] + 32))(v11);
  }
LABEL_15:
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

void sub_3EB304(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3EA7D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_3EB318(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3EA7D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_3EB32C(uint64_t a1, int **a2)
{
  sub_3EB374(a1, a2, (uint64_t)&v5);
  double v2 = v5;
  uint64_t v3 = v6;
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  return v2 != v3;
}

uint64_t sub_3EB374@<X0>(uint64_t result@<X0>, int **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = (char *)*a2;
  unsigned int v4 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v5 = *v4;
  if (!*((unsigned char *)a2 + 38))
  {
    if (v5 < 0xB) {
      goto LABEL_22;
    }
    if (v4[5])
    {
      if (v3[v4[5]]) {
        goto LABEL_14;
      }
      if (v5 < 0x39)
      {
LABEL_22:
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        return result;
      }
    }
    else if (v5 <= 0x38)
    {
      goto LABEL_22;
    }
    uint64_t v9 = v4[28];
    if (v9)
    {
      int v7 = *(_DWORD *)&v3[v9];
      if (v7) {
        goto LABEL_24;
      }
      goto LABEL_20;
    }
    goto LABEL_22;
  }
  if (v5 < 0xB) {
    goto LABEL_22;
  }
  if (v4[5] && (v3[v4[5]] & 2) != 0)
  {
LABEL_14:
    unint64_t v8 = (unint64_t)a2[4];
    v11[0] = off_2439108;
    BOOL v12 = v11;
    sub_3EAFD8(result, v8, (uint64_t)v11, (uint64_t ***)a3);
    double result = (uint64_t)v12;
    if (v12 == v11) {
      return (*(uint64_t (**)(void *))(v11[0] + 32))(v11);
    }
    goto LABEL_15;
  }
  if (v5 <= 0x38) {
    goto LABEL_22;
  }
  uint64_t v6 = v4[28];
  if (!v6) {
    goto LABEL_22;
  }
  int v7 = *(_DWORD *)&v3[v6];
  if ((v7 & 2) != 0) {
    goto LABEL_24;
  }
LABEL_20:
  if ((v7 & 7) != 4 && (v7 & 0x23) != 0x20) {
    goto LABEL_22;
  }
LABEL_24:
  unint64_t v10 = (unint64_t)a2[4];
  v11[0] = off_2439188;
  BOOL v12 = v11;
  sub_3EAFD8(result, v10, (uint64_t)v11, (uint64_t ***)a3);
  double result = (uint64_t)v12;
  if (v12 == v11) {
    return (*(uint64_t (**)(void *))(v11[0] + 32))(v11);
  }
LABEL_15:
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

void sub_3EB56C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3EA7D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_3EB580(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3EA7D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_3EB594@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(unsigned char *)(result + 27))
  {
    v3[0] = off_2439508;
    unsigned int v4 = v3;
    sub_3EAFD8(result, a2, (uint64_t)v3, (uint64_t ***)a3);
    double result = (uint64_t)v4;
    if (v4 == v3)
    {
      return (*(uint64_t (**)(void *))(v3[0] + 32))(v3);
    }
    else if (v4)
    {
      return (*(uint64_t (**)(void))(*v4 + 40))();
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_3EB6B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3EA7D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_3EB6C8@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(unsigned char *)(result + 26))
  {
    v3[0] = off_2439588;
    unsigned int v4 = v3;
    sub_3EAFD8(result, a2, (uint64_t)v3, (uint64_t ***)a3);
    double result = (uint64_t)v4;
    if (v4 == v3)
    {
      return (*(uint64_t (**)(void *))(v3[0] + 32))(v3);
    }
    else if (v4)
    {
      return (*(uint64_t (**)(void))(*v4 + 40))();
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_3EB7E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3EA7D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_3EB7FC(uint64_t a1, void *a2, int a3)
{
  *(void *)a1 = sub_374D14(a2);
  *(void *)(a1 + 8) = sub_3750CC(a2);
  *(void *)(a1 + 16) = sub_37B3A8((uint64_t)a2);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0x8000000080000000;
  uint64_t v16 = 0;
  v17[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v17[1] = xmmword_20B91C0;
  strcpy(v17[0], "TrafficIncidentsAccessor");
  long long __p = 0;
  long long v15 = 0;
  uint64_t v6 = sub_374CDC((uint64_t)a2, (uint64_t)v17, (uint64_t *)&__p);
  int v7 = (void **)__p;
  if (__p)
  {
    unint64_t v8 = v15;
    uint64_t v9 = __p;
    if (v15 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      uint64_t v9 = __p;
    }
    long long v15 = v7;
    operator delete(v9);
  }
  if ((SHIBYTE(v17[2]) & 0x80000000) == 0)
  {
    unint64_t v10 = "placeIN3msl6common4http10HttpClientENS_9allocatorIS4_EEEE";
    if (a3) {
      goto LABEL_11;
    }
LABEL_15:
    v17[0] = (char *)operator new(0x19uLL);
    *(_OWORD *)&v17[1] = xmmword_20B9250;
    strcpy(v17[0], "use_for_static_requests");
    BOOL v11 = sub_29D62C(v6, (uint64_t)v17);
    goto LABEL_17;
  }
  operator delete(v17[0]);
  unint64_t v10 = "NSt3__120__shared_ptr_emplaceIN3msl6common4http10HttpClientENS_9allocatorIS4_EEEE" + 24;
  if (!a3) {
    goto LABEL_15;
  }
LABEL_11:
  if (a3 == 1)
  {
    v17[0] = (char *)operator new(0x20uLL);
    *(_OWORD *)&v17[1] = *((_OWORD *)v10 + 26);
    strcpy(v17[0], "use_for_historical_requests");
    BOOL v11 = sub_29D62C(v6, (uint64_t)v17);
  }
  else
  {
    if (a3 != 2) {
      goto LABEL_19;
    }
    HIBYTE(v17[2]) = 21;
    strcpy((char *)v17, "use_for_live_requests");
    BOOL v11 = sub_29D62C(v6, (uint64_t)v17);
  }
LABEL_17:
  *(unsigned char *)(a1 + 25) = v11;
  if (SHIBYTE(v17[2]) < 0) {
    operator delete(v17[0]);
  }
LABEL_19:
  v17[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v17[1] = xmmword_20B91C0;
  strcpy(v17[0], "enable_maneuver_closures");
  *(unsigned char *)(a1 + 26) = sub_29D62C(v6, (uint64_t)v17);
  if (SHIBYTE(v17[2]) < 0) {
    operator delete(v17[0]);
  }
  v17[0] = (char *)operator new(0x20uLL);
  long long v13 = *((_OWORD *)v10 + 26);
  *(_OWORD *)&v17[1] = v13;
  strcpy(v17[0], "enable_no_through_incidents");
  *(unsigned char *)(a1 + 27) = sub_29D62C(v6, (uint64_t)v17);
  if (SHIBYTE(v17[2]) < 0) {
    operator delete(v17[0]);
  }
  v17[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v17[1] = xmmword_20B8FD0;
  strcpy(v17[0], "filter_lane_closures_without_traffic");
  *(unsigned char *)(a1 + 28) = sub_29D62C(v6, (uint64_t)v17);
  if (SHIBYTE(v17[2]) < 0) {
    operator delete(v17[0]);
  }
  HIBYTE(v17[2]) = 21;
  strcpy((char *)v17, "enable_area_incidents");
  *(unsigned char *)(a1 + 29) = sub_29D62C(v6, (uint64_t)v17);
  if (SHIBYTE(v17[2]) < 0) {
    operator delete(v17[0]);
  }
  HIBYTE(v17[2]) = 20;
  strcpy((char *)v17, "enable_soft_closures");
  *(unsigned char *)(a1 + 30) = sub_29D62C(v6, (uint64_t)v17);
  if (SHIBYTE(v17[2]) < 0) {
    operator delete(v17[0]);
  }
  v17[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v17[1] = xmmword_20B8FD0;
  strcpy(v17[0], "enable_siri_user_generated_incidents");
  *(unsigned char *)(a1 + 31) = sub_29D62C(v6, (uint64_t)v17);
  if (SHIBYTE(v17[2]) < 0) {
    operator delete(v17[0]);
  }
  v17[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v17[1] = xmmword_20B8870;
  strcpy(v17[0], "incident_end_ignore_slack");
  *(_DWORD *)(a1 + 32) = 600 * sub_319F48(v6, (uint64_t)v17);
  if (SHIBYTE(v17[2]) < 0) {
    operator delete(v17[0]);
  }
  v17[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v17[1] = v13;
  strcpy(v17[0], "incident_start_ignore_slack");
  *(_DWORD *)(a1 + 36) = 600 * sub_319F48(v6, (uint64_t)v17);
  if (SHIBYTE(v17[2]) < 0) {
    operator delete(v17[0]);
  }
  return a1;
}

void sub_3EBC90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_3EBD68(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t ***a4@<X8>)
{
  if (a2 && *(unsigned char *)(a1 + 25))
  {
    sub_3F57C8(*(uint64_t **)a1, a2, a3, *(_DWORD *)(*(void *)a1 + 48), a4);
    if (*(unsigned char *)(a1 + 28))
    {
      uint64_t v6 = *(uint64_t **)a1;
      int v7 = *a4;
      unint64_t v8 = a4[1];
      v10[0] = a1;
      v10[1] = (uint64_t)v6;
      if (v7 != v8)
      {
        while ((sub_3F66A4(v10, v7) & 1) == 0)
        {
          v7 += 2;
          if (v7 == v8)
          {
            int v7 = v8;
            goto LABEL_16;
          }
        }
      }
      if (v7 != v8)
      {
        for (uint64_t i = v7 + 2; i != v8; i += 2)
        {
          if ((sub_3F66A4(v10, i) & 1) == 0)
          {
            *(_OWORD *)int v7 = *(_OWORD *)i;
            v7 += 2;
          }
        }
      }
LABEL_16:
      if (v7 != a4[1]) {
        a4[1] = v7;
      }
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void sub_3EBE7C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3EBE9C@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (int **)(a2 + 2);
  unsigned int v7 = a2[1];
  if ((v7 & 0x40000000) != 0) {
    int v8 = 2;
  }
  else {
    int v8 = v7 >> 31;
  }
  uint64_t result = sub_3F4FC8(v6, v8);
  if (result)
  {
    unint64_t v10 = (((unint64_t)(a2[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)a2[1] << 32) | *a2) ^ 0x1000000000000;
    v11[0] = off_2439388;
    BOOL v12 = v11;
    sub_3EBD68(a1, v10, (uint64_t)v11, (uint64_t ***)a3);
    uint64_t result = (uint64_t)v12;
    if (v12 == v11)
    {
      return (*(uint64_t (**)(void *))(v11[0] + 32))(v11);
    }
    else if (v12)
    {
      return (*(uint64_t (**)(void))(*v12 + 40))();
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_3EC00C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3EA7D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_3EC020(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if (*(unsigned char *)(a1 + 25) && (unsigned int v4 = (uint64_t *)a1, *(unsigned char *)(a1 + 29)) && (v5 = a2, sub_46DFC8(a2)))
  {
    int8x8_t v35 = a3;
    long long v46 = 0;
    unint64_t v47 = 0;
    unint64_t v48 = 0;
    long long __p = 0;
    int64_t v44 = 0;
    uint64_t v45 = 0;
    long long v41 = xmmword_20B8E30;
    uint64_t v42 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v37 = sub_46C760(v5);
    if (v37)
    {
      uint64_t v6 = 0;
      unint64_t v36 = v4;
      do
      {
        uint64_t v7 = v4[1];
        int v8 = v5;
        uint64_t v9 = sub_46C8EC(v5, v6);
        sub_295BE0(v7, *(void *)(v9 + 32), (unint64_t *)&__p);
        unint64_t v10 = (int *)__p;
        BOOL v11 = v44;
        while (v10 != v11)
        {
          int v12 = *v10;
          int v40 = *v10;
          long long v13 = v46;
          long long v14 = v47;
          if (v46 == v47 || v12 != *(v47 - 2))
          {
            if ((unint64_t)v47 < v48)
            {
              *unint64_t v47 = v12;
              v14[1] = v6;
              long long v15 = v14 + 2;
LABEL_32:
              unint64_t v47 = v15;
              sub_383CC((unsigned int *)&v40, (uint64_t)&v38);
              sub_33998((uint64_t)&v41, (uint64_t)&v38);
              goto LABEL_8;
            }
            uint64_t v16 = ((char *)v47 - (char *)v46) >> 3;
            unint64_t v17 = v16 + 1;
            if ((unint64_t)(v16 + 1) >> 61) {
              sub_2E00();
            }
            uint64_t v18 = v48 - (void)v46;
            if ((uint64_t)(v48 - (void)v46) >> 2 > v17) {
              unint64_t v17 = v18 >> 2;
            }
            if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v19 = v17;
            }
            if (v19 >> 61) {
              sub_188D718();
            }
            uint64_t v20 = operator new(8 * v19);
            unint64_t v21 = (int *)&v20[8 * v16];
            int *v21 = v12;
            v21[1] = v6;
            if (v13 == v14)
            {
              uint64_t v23 = (int *)&v20[8 * v16];
            }
            else
            {
              unint64_t v22 = (char *)(v14 - 2) - (char *)v13;
              if (v22 < 0x58)
              {
                uint64_t v23 = (int *)&v20[8 * v16];
                goto LABEL_29;
              }
              uint64_t v23 = (int *)&v20[8 * v16];
              if ((unint64_t)((char *)v13 - v20) < 0x20) {
                goto LABEL_48;
              }
              uint64_t v24 = (v22 >> 3) + 1;
              uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
              long long v26 = &v14[v25 / 0xFFFFFFFFFFFFFFFCLL];
              uint64_t v23 = &v21[v25 / 0xFFFFFFFFFFFFFFFCLL];
              unint64_t v27 = &v20[8 * v16 - 16];
              char v28 = v14 - 4;
              uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v30 = *(_OWORD *)v28;
                *(v27 - 1) = *((_OWORD *)v28 - 1);
                *unint64_t v27 = v30;
                v27 -= 2;
                v28 -= 8;
                v29 -= 4;
              }
              while (v29);
              long long v14 = v26;
              if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_48:
                do
                {
LABEL_29:
                  uint64_t v31 = *((void *)v14 - 1);
                  v14 -= 2;
                  *((void *)v23 - 1) = v31;
                  v23 -= 2;
                }
                while (v14 != v13);
              }
            }
            unint64_t v32 = &v20[8 * v19];
            long long v15 = v21 + 2;
            long long v46 = v23;
            unint64_t v47 = v21 + 2;
            unint64_t v48 = (unint64_t)v32;
            if (v13) {
              operator delete(v13);
            }
            goto LABEL_32;
          }
LABEL_8:
          ++v10;
        }
        ++v6;
        unsigned int v4 = v36;
        unsigned int v5 = v8;
      }
      while (v6 != v37);
    }
    LODWORD(v38) = 0;
    int v40 = sub_46C760(v5) - 1;
    sub_3EC418((uint64_t)&v46, &v38, &v40);
    sub_29AA4C(*v4, &v41, 0, &v38);
    uint64_t v34 = v38;
    unint64_t v33 = v39;
    v35[1] = 0;
    v35[2] = 0;
    *int8x8_t v35 = 0;
    if (v34 != v33)
    {
      do
      {
        sub_3EC590((uint64_t)v4, v5, (uint64_t *)&v46, &v41, (uint64_t)v34, (uint64_t)v35);
        v34 += 16;
      }
      while (v34 != v33);
      uint64_t v34 = v38;
    }
    if (v34)
    {
      unint64_t v39 = v34;
      operator delete(v34);
    }
    if (__p)
    {
      int64_t v44 = (int *)__p;
      operator delete(__p);
    }
    if (v46)
    {
      unint64_t v47 = v46;
      operator delete(v46);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_3EC34C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v24 = *(void **)(v22 - 104);
    if (!v24) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v24 = *(void **)(v22 - 104);
    if (!v24) {
      goto LABEL_3;
    }
  }
  *(void *)(v22 - 96) = v24;
  operator delete(v24);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_3EC418(uint64_t a1, _DWORD *a2, int *a3)
{
  uint64_t v7 = *(char **)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  int v8 = v7;
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v10 = *(char **)a1;
    uint64_t v11 = (uint64_t)&v7[-*(void *)a1];
    uint64_t v12 = v11 >> 3;
    unint64_t v13 = (v11 >> 3) + 1;
    if (v13 >> 61) {
      sub_2E00();
    }
    uint64_t v14 = v6 - (void)v10;
    if (v14 >> 2 > v13) {
      unint64_t v13 = v14 >> 2;
    }
    BOOL v15 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v15) {
      unint64_t v16 = v13;
    }
    if (v16 >> 61) {
      sub_188D718();
    }
    uint64_t v17 = 8 * v16;
    uint64_t v18 = operator new(8 * v16);
    int v19 = *a3;
    uint64_t v20 = &v18[8 * v12];
    *uint64_t v20 = *a2;
    v20[1] = v19;
    uint64_t v9 = v20 + 2;
    if (v7 != v10)
    {
      unint64_t v21 = v7 - v10 - 8;
      if (v21 < 0x58) {
        goto LABEL_23;
      }
      if ((unint64_t)(&v7[-v11] - v18) < 0x20) {
        goto LABEL_23;
      }
      uint64_t v22 = (v21 >> 3) + 1;
      uint64_t v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
      int v8 = &v7[-v23];
      uint64_t v20 = (_DWORD *)((char *)v20 - v23);
      uint64_t v24 = &v18[8 * v12 - 16];
      uint64_t v25 = v7 - 16;
      uint64_t v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v27 = *(_OWORD *)v25;
        *(v24 - 1) = *((_OWORD *)v25 - 1);
        *uint64_t v24 = v27;
        v24 -= 2;
        v25 -= 32;
        v26 -= 4;
      }
      while (v26);
      if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_23:
        do
        {
          uint64_t v28 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v20 - 1) = v28;
          v20 -= 2;
        }
        while (v8 != v10);
      }
    }
    *(void *)a1 = v20;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = &v18[v17];
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v7 = *a2;
    *((_DWORD *)v7 + 1) = *a3;
    uint64_t v9 = v7 + 8;
  }
  *(void *)(a1 + 8) = v9;
  return v9 - 2;
}

void sub_3EC590(uint64_t a1, void *a2, uint64_t *a3, _DWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = **(void **)a5 + 648 * *(void *)(a5 + 8);
  uint64_t v7 = *(void *)(v6 + 456);
  uint64_t v8 = *(void *)(v6 + 464) - v7;
  if (v8 <= 183) {
    return;
  }
  uint64_t v9 = a6;
  unsigned int v10 = a4[3];
  uint64_t v11 = v7;
  if (v8 != 184)
  {
    unint64_t v12 = v8 / 0xB8uLL;
    uint64_t v11 = v7;
    do
    {
      uint64_t v13 = 184 * (v12 >> 2);
      _X14 = v11 + v13;
      __asm { PRFM            #0, [X14] }
      unint64_t v19 = v11 + 184 * (v12 >> 1);
      _X13 = v19 + v13;
      __asm { PRFM            #0, [X13] }
      if (*(_DWORD *)(v19 + 128) >= v10) {
        unint64_t v22 = 0;
      }
      else {
        unint64_t v22 = v12 >> 1;
      }
      v11 += 184 * v22;
      v12 -= v12 >> 1;
    }
    while ((uint64_t)v12 > 1);
  }
  BOOL v23 = *(_DWORD *)(v11 + 128) < v10;
  v359 = 0;
  v360 = 0;
  unint64_t v361 = 0;
  uint64_t v325 = v11 + 184 * v23;
  if (v325 == v7) {
    return;
  }
  BOOL v24 = sub_34658((_DWORD *)(v7 + 128), a4);
  while (2)
  {
    if (!v24) {
      goto LABEL_10;
    }
    uint64_t v25 = *a3;
    uint64_t v327 = ((a3[1] - *a3) >> 3) - 1;
    if ((a3[1] - *a3) >> 3 == 1) {
      goto LABEL_10;
    }
    uint64_t v26 = 0;
    v333 = (uint64_t *)v7;
    while (1)
    {
      uint64_t v27 = v26;
      if (!sub_358BA4(v7, *(_DWORD *)(v25 + 8 * v26)))
      {
        uint64_t v26 = v27 + 1;
        goto LABEL_498;
      }
      unsigned int v28 = *(_DWORD *)(*a3 + 8 * v27 + 4);
      uint64_t v26 = v27 + 1;
      int v29 = *(_DWORD *)(*a3 + 8 * (v27 + 1) + 4);
      unsigned int v30 = v29 + 1;
      int v31 = v28 <= v29 + 1 ? v29 + 1 : *(_DWORD *)(*a3 + 8 * v27 + 4);
      int v334 = v31;
      if (v28 < v30) {
        break;
      }
LABEL_498:
      if (v26 == v327) {
        goto LABEL_10;
      }
LABEL_16:
      uint64_t v25 = *a3;
    }
    uint64_t v326 = v27 + 1;
    char v329 = 0;
    do
    {
      uint64_t v33 = *(void *)(sub_46C8EC(a2, v28) + 32);
      sub_2954EC(*(void *)(a1 + 8), v33, (uint64_t)&v355);
      if (v358)
      {
        if (v356 == v357) {
          goto LABEL_36;
        }
        unint64_t v37 = *((void *)v357 - 1);
        uint64_t v38 = v355;
        int v367 = 1;
        v368[0] = v37;
        v365 = &v367;
        v366 = v368;
        unint64_t v39 = *(void *)(v355 + 3856) + 1;
        *(void *)(v355 + 3856) = v39;
        if (!*(void *)v38) {
          goto LABEL_79;
        }
        uint64_t v40 = v38 + 16;
        if (*(_DWORD *)(v38 + 112) == v37)
        {
          unsigned int v41 = 4;
        }
        else if (*(_DWORD *)(v38 + 136) == v37)
        {
          unsigned int v41 = 5;
        }
        else if (*(_DWORD *)(v38 + 160) == v37)
        {
          unsigned int v41 = 6;
        }
        else
        {
          if (*(_DWORD *)(v38 + 184) != v37)
          {
            unint64_t v66 = *(void *)(v38 + 168);
            unint64_t v67 = *(void *)(v38 + 144);
            unint64_t v68 = *(void *)(v38 + 120);
            unint64_t v69 = *(void *)(v38 + 192);
            unint64_t v57 = (unsigned int *)sub_2AB884(*(void *)v38, 1, v37, 1);
            if (v68 >= v39) {
              unint64_t v70 = v39;
            }
            else {
              unint64_t v70 = v68;
            }
            _CF = v67 >= v70;
            if (v67 < v70) {
              unint64_t v70 = v67;
            }
            unsigned int v72 = 4 * (v68 < v39);
            if (!_CF) {
              unsigned int v72 = 5;
            }
            if (v66 < v70)
            {
              unsigned int v72 = 6;
              unint64_t v70 = v66;
            }
            if (v69 < v70) {
              unsigned int v72 = 7;
            }
            uint64_t v73 = v40 + 24 * v72;
            *(_DWORD *)uint64_t v73 = v368[0];
            *(void *)(v73 + 8) = *(void *)(v38 + 3856);
            *(void *)(v73 + 16) = v57;
            if (v57) {
              goto LABEL_57;
            }
            goto LABEL_79;
          }
          unsigned int v41 = 7;
        }
        ++*(void *)(v38 + 3864);
        uint64_t v56 = v40 + 24 * v41;
        *(void *)(v56 + 8) = v39;
        unint64_t v57 = *(unsigned int **)(v56 + 16);
        if (v57)
        {
LABEL_57:
          unint64_t v58 = (int *)((char *)v57 + *v57);
          goto LABEL_80;
        }
LABEL_79:
        sub_296654(&v365);
        unint64_t v58 = 0;
LABEL_80:
        uint64_t v74 = (unsigned int *)((char *)v58 + *(unsigned __int16 *)((char *)v58 - *v58 + 4));
        uint64_t v75 = (uint64_t)&v74[HIDWORD(v37)] + *v74;
        uint64_t v76 = (int *)(v75 + 4 + *(unsigned int *)(v75 + 4));
        unint64_t v77 = (unsigned int *)((char *)v76 + *(unsigned __int16 *)((char *)v76 - *v76 + 6));
        LODWORD(v77) = *(unsigned int *)((char *)v77 + *v77) - 1;
        *(void *)&long long v362 = v355;
        *((void *)&v362 + 1) = &v356;
        long long v363 = 0u;
        v364[0] = 0u;
        LODWORD(v364[1]) = ((unint64_t)(v357 - (unsigned char *)v356) >> 3) - 1;
        DWORD1(v364[1]) = v77;
        BYTE8(v364[1]) = 1;
        sub_2E1D08((uint64_t)&v362);
        unint64_t v49 = (char *)v356;
        unint64_t v48 = v357;
        int v336 = v28;
        unint64_t v337 = v33;
        if (!v358) {
          goto LABEL_37;
        }
        goto LABEL_81;
      }
      if (v356 == v357)
      {
LABEL_36:
        double v43 = 0.0;
        long long v363 = 0u;
        memset(v364, 0, sizeof(v364));
        long long v362 = 0u;
        unint64_t v49 = (char *)v356;
        unint64_t v48 = v357;
        int v336 = v28;
        unint64_t v337 = v33;
        if (!v358) {
          goto LABEL_37;
        }
        goto LABEL_81;
      }
      uint64_t v42 = v355;
      *(void *)&long long v362 = v355;
      *((void *)&v362 + 1) = &v356;
      double v43 = 0.0;
      long long v363 = 0u;
      memset(v364, 0, 25);
      unint64_t v44 = *(void *)v356;
      DWORD2(v364[0]) = *(void *)v356;
      int v367 = 1;
      v368[0] = v44;
      v365 = &v367;
      v366 = v368;
      unint64_t v45 = *(void *)(v355 + 3856) + 1;
      *(void *)(v355 + 3856) = v45;
      if (!*(void *)v42)
      {
LABEL_97:
        sub_296654(&v365);
        long long v61 = 0;
        long long v62 = (_WORD *)(&loc_1120530 + 1);
        if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 7u) {
          goto LABEL_100;
        }
        goto LABEL_98;
      }
      uint64_t v46 = v42 + 16;
      if (*(_DWORD *)(v42 + 112) == v44)
      {
        unsigned int v47 = 4;
        goto LABEL_60;
      }
      if (*(_DWORD *)(v42 + 136) == v44)
      {
        unsigned int v47 = 5;
        goto LABEL_60;
      }
      if (*(_DWORD *)(v42 + 160) == v44)
      {
        unsigned int v47 = 6;
        goto LABEL_60;
      }
      if (*(_DWORD *)(v42 + 184) == v44)
      {
        unsigned int v47 = 7;
LABEL_60:
        ++*(void *)(v42 + 3864);
        uint64_t v59 = v46 + 24 * v47;
        *(void *)(v59 + 8) = v45;
        long long v60 = *(unsigned int **)(v59 + 16);
        if (!v60) {
          goto LABEL_97;
        }
        goto LABEL_61;
      }
      unint64_t v78 = *(void *)(v42 + 168);
      unint64_t v79 = *(void *)(v42 + 144);
      unint64_t v80 = *(void *)(v42 + 120);
      unint64_t v81 = *(void *)(v42 + 192);
      long long v60 = (unsigned int *)sub_2AB884(*(void *)v42, 1, v44, 1);
      if (v80 >= v45) {
        unint64_t v82 = v45;
      }
      else {
        unint64_t v82 = v80;
      }
      BOOL v83 = v79 >= v82;
      if (v79 < v82) {
        unint64_t v82 = v79;
      }
      unsigned int v84 = 4 * (v80 < v45);
      if (!v83) {
        unsigned int v84 = 5;
      }
      if (v78 < v82)
      {
        unsigned int v84 = 6;
        unint64_t v82 = v78;
      }
      if (v81 < v82) {
        unsigned int v84 = 7;
      }
      uint64_t v85 = v46 + 24 * v84;
      *(_DWORD *)uint64_t v85 = v368[0];
      *(void *)(v85 + 8) = *(void *)(v42 + 3856);
      *(void *)(v85 + 16) = v60;
      if (!v60) {
        goto LABEL_97;
      }
LABEL_61:
      long long v61 = (int *)((char *)v60 + *v60);
      long long v62 = (unsigned __int16 *)((char *)v61 - *v61);
      if (*v62 < 7u) {
        goto LABEL_100;
      }
LABEL_98:
      uint64_t v86 = v62[3];
      if (v86)
      {
        int v87 = *(int *)((char *)v61 + v86);
        goto LABEL_101;
      }
LABEL_100:
      int v87 = 0;
LABEL_101:
      HIDWORD(v364[0]) = v87;
      uint64_t v88 = v362;
      unsigned int v89 = DWORD2(v364[0]);
      int v367 = 1;
      v368[0] = DWORD2(v364[0]);
      v365 = &v367;
      v366 = v368;
      unint64_t v90 = *(void *)(v362 + 3856) + 1;
      *(void *)(v362 + 3856) = v90;
      if (!*(void *)v88) {
        goto LABEL_125;
      }
      uint64_t v91 = v88 + 16;
      if (*(_DWORD *)(v88 + 112) == v89)
      {
        unsigned int v92 = 4;
        goto LABEL_110;
      }
      if (*(_DWORD *)(v88 + 136) == v89)
      {
        unsigned int v92 = 5;
        goto LABEL_110;
      }
      if (*(_DWORD *)(v88 + 160) == v89)
      {
        unsigned int v92 = 6;
        goto LABEL_110;
      }
      if (*(_DWORD *)(v88 + 184) == v89)
      {
        unsigned int v92 = 7;
LABEL_110:
        ++*(void *)(v88 + 3864);
        uint64_t v93 = v91 + 24 * v92;
        *(void *)(v93 + 8) = v90;
        long long v94 = *(unsigned int **)(v93 + 16);
        if (!v94) {
          goto LABEL_125;
        }
        goto LABEL_111;
      }
      unint64_t v97 = *(void *)(v88 + 168);
      unint64_t v98 = *(void *)(v88 + 144);
      unint64_t v99 = *(void *)(v88 + 120);
      unint64_t v100 = *(void *)(v88 + 192);
      long long v94 = (unsigned int *)sub_2AB884(*(void *)v88, 1, v89, 1);
      if (v99 >= v90) {
        unint64_t v101 = v90;
      }
      else {
        unint64_t v101 = v99;
      }
      BOOL v102 = v98 >= v101;
      if (v98 < v101) {
        unint64_t v101 = v98;
      }
      unsigned int v103 = 4 * (v99 < v90);
      if (!v102) {
        unsigned int v103 = 5;
      }
      if (v97 < v101)
      {
        unsigned int v103 = 6;
        unint64_t v101 = v97;
      }
      if (v100 < v101) {
        unsigned int v103 = 7;
      }
      uint64_t v104 = v91 + 24 * v103;
      *(_DWORD *)uint64_t v104 = v368[0];
      *(void *)(v104 + 8) = *(void *)(v88 + 3856);
      *(void *)(v104 + 16) = v94;
      if (!v94)
      {
LABEL_125:
        sub_296654(&v365);
        unint64_t v95 = 0;
        unint64_t v96 = (_WORD *)(&loc_1120530 + 1);
        if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
          goto LABEL_128;
        }
        goto LABEL_126;
      }
LABEL_111:
      unint64_t v95 = (int *)((char *)v94 + *v94);
      unint64_t v96 = (unsigned __int16 *)((char *)v95 - *v95);
      if (*v96 < 5u) {
        goto LABEL_128;
      }
LABEL_126:
      uint64_t v105 = v96[2];
      if (v105)
      {
        unint64_t v106 = (char *)v95 + v105 + *(unsigned int *)((char *)v95 + v105);
        goto LABEL_129;
      }
LABEL_128:
      unint64_t v106 = 0;
LABEL_129:
      long long v107 = &v106[4 * HIDWORD(v44) + 4 + *(unsigned int *)&v106[4 * HIDWORD(v44) + 4]];
      *(void *)&long long v363 = v107;
      char v108 = &v107[-*(int *)v107];
      unsigned int v109 = *(unsigned __int16 *)v108;
      if (v109 <= 6)
      {
        *((void *)&v363 + 1) = 0;
        *(void *)&v364[0] = 0;
        unint64_t v49 = (char *)v356;
        unint64_t v48 = v357;
        int v336 = v28;
        unint64_t v337 = v33;
        if (!v358) {
          goto LABEL_37;
        }
      }
      else
      {
        uint64_t v110 = *((unsigned __int16 *)v108 + 3);
        if (*((_WORD *)v108 + 3)) {
          v110 += (uint64_t)&v107[*(unsigned int *)&v107[v110]];
        }
        *((void *)&v363 + 1) = v110;
        if (v109 >= 0xB)
        {
          uint64_t v111 = *((unsigned __int16 *)v108 + 5);
          if (v111)
          {
            *(void *)&v364[0] = &v107[v111 + *(unsigned int *)&v107[v111]];
            unint64_t v49 = (char *)v356;
            unint64_t v48 = v357;
            int v336 = v28;
            unint64_t v337 = v33;
            if (!v358) {
              goto LABEL_37;
            }
            goto LABEL_81;
          }
          *(void *)&v364[0] = 0;
          unint64_t v49 = (char *)v356;
          unint64_t v48 = v357;
          int v336 = v28;
          unint64_t v337 = v33;
          if (v358) {
            goto LABEL_81;
          }
LABEL_37:
          if (v49 == v48)
          {
            LODWORD(v55) = 0;
            unsigned int v339 = 0;
            goto LABEL_156;
          }
          unint64_t v50 = *((void *)v48 - 1);
          uint64_t v51 = v355;
          int v367 = 1;
          v368[0] = v50;
          v365 = &v367;
          v366 = v368;
          unint64_t v52 = *(void *)(v355 + 3856) + 1;
          *(void *)(v355 + 3856) = v52;
          if (!*(void *)v51) {
            goto LABEL_154;
          }
          uint64_t v53 = v51 + 16;
          if (*(_DWORD *)(v51 + 112) == v50)
          {
            unsigned int v54 = 4;
          }
          else if (*(_DWORD *)(v51 + 136) == v50)
          {
            unsigned int v54 = 5;
          }
          else if (*(_DWORD *)(v51 + 160) == v50)
          {
            unsigned int v54 = 6;
          }
          else
          {
            if (*(_DWORD *)(v51 + 184) != v50)
            {
              unint64_t v112 = *(void *)(v51 + 168);
              unint64_t v113 = *(void *)(v51 + 144);
              unint64_t v114 = *(void *)(v51 + 120);
              unint64_t v115 = *(void *)(v51 + 192);
              long long v64 = (unsigned int *)sub_2AB884(*(void *)v51, 1, v50, 1);
              if (v114 >= v52) {
                unint64_t v116 = v52;
              }
              else {
                unint64_t v116 = v114;
              }
              BOOL v117 = v113 >= v116;
              if (v113 < v116) {
                unint64_t v116 = v113;
              }
              unsigned int v118 = 4 * (v114 < v52);
              if (!v117) {
                unsigned int v118 = 5;
              }
              if (v112 < v116)
              {
                unsigned int v118 = 6;
                unint64_t v116 = v112;
              }
              if (v115 < v116) {
                unsigned int v118 = 7;
              }
              uint64_t v119 = v53 + 24 * v118;
              *(_DWORD *)uint64_t v119 = v368[0];
              *(void *)(v119 + 8) = *(void *)(v51 + 3856);
              *(void *)(v119 + 16) = v64;
              if (v64) {
                goto LABEL_66;
              }
              goto LABEL_154;
            }
            unsigned int v54 = 7;
          }
          ++*(void *)(v51 + 3864);
          uint64_t v63 = v53 + 24 * v54;
          *(void *)(v63 + 8) = v52;
          long long v64 = *(unsigned int **)(v63 + 16);
          if (v64)
          {
LABEL_66:
            long long v65 = (int *)((char *)v64 + *v64);
LABEL_155:
            long long v120 = (unsigned int *)((char *)v65 + *(unsigned __int16 *)((char *)v65 - *v65 + 4));
            uint64_t v121 = (uint64_t)&v120[HIDWORD(v50)] + *v120;
            unint64_t v122 = (int *)(v121 + 4 + *(unsigned int *)(v121 + 4));
            uint64_t v123 = (unsigned int *)((char *)v122 + *(unsigned __int16 *)((char *)v122 - *v122 + 6));
            unsigned int v339 = *(unsigned int *)((char *)v123 + *v123);
            unint64_t v55 = (unint64_t)(v357 - (unsigned char *)v356) >> 3;
            goto LABEL_156;
          }
LABEL_154:
          sub_296654(&v365);
          long long v65 = 0;
          goto LABEL_155;
        }
        *(void *)&v364[0] = 0;
        unint64_t v49 = (char *)v356;
        unint64_t v48 = v357;
        int v336 = v28;
        unint64_t v337 = v33;
        if (!v358) {
          goto LABEL_37;
        }
      }
LABEL_81:
      if (v49 == v48) {
        LODWORD(v55) = 0;
      }
      else {
        LODWORD(v55) = -1;
      }
      unsigned int v339 = v55;
LABEL_156:
      long long v124 = v362;
      unsigned int v349 = DWORD2(v364[0]);
      unint64_t v125 = LODWORD(v364[1]);
      int v350 = HIDWORD(v364[0]);
      unsigned int v126 = DWORD1(v364[1]);
      int v338 = BYTE8(v364[1]);
      v353 = 0;
      v354 = 0;
      long long __p = 0;
      if (*(void *)&v364[1] == __PAIR64__(v339, v55)) {
        goto LABEL_474;
      }
      v335 = (unsigned int *)*((void *)&v363 + 1);
      v345 = (int *)v363;
      int v346 = v55;
      uint64_t v351 = v362 + 16;
      if (!BYTE8(v364[1]))
      {
        unint64_t v127 = 0;
        uint64_t v169 = (char *)*((void *)&v363 + 1);
        int v170 = DWORD1(v364[1]);
        LODWORD(v171) = v364[1];
        while (1)
        {
          unint64_t v347 = v127;
          int v172 = v170 + 1;
          if ((v170 + 1) >= *(_DWORD *)v169)
          {
            uint64_t v175 = **((void **)&v124 + 1);
            unint64_t v171 = (v171 + 1);
            if (v171 < (uint64_t)(*(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1)) >> 3) {
              goto LABEL_240;
            }
LABEL_238:
            int v170 = v172;
            goto LABEL_301;
          }
          uint64_t v173 = &v169[4 * v170 + 4];
          unsigned int v174 = &v169[4 * v172 + 4];
          if (*(unsigned __int16 *)v173 != *(unsigned __int16 *)v174) {
            goto LABEL_238;
          }
          if (*((unsigned __int16 *)v173 + 1) != *((unsigned __int16 *)v174 + 1)) {
            goto LABEL_238;
          }
          uint64_t v175 = **((void **)&v124 + 1);
          uint64_t v176 = *(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1);
          if (*(_DWORD *)v169 == 2 && v176 == 8) {
            goto LABEL_238;
          }
          int v172 = v170 + 2;
          unint64_t v171 = (v171 + 1);
          if (v171 >= v176 >> 3) {
            goto LABEL_238;
          }
          while (1)
          {
LABEL_240:
            unint64_t v177 = *(void *)(v175 + 8 * v171);
            int v367 = 1;
            v368[0] = v177;
            v365 = &v367;
            v366 = v368;
            unint64_t v178 = *(void *)(v124 + 3856) + 1;
            *(void *)(v124 + 3856) = v178;
            if (!*(void *)v124) {
              goto LABEL_250;
            }
            if (*(_DWORD *)(v124 + 112) == v177)
            {
              unsigned int v179 = 4;
              goto LABEL_249;
            }
            if (*(_DWORD *)(v124 + 136) == v177)
            {
              unsigned int v179 = 5;
              goto LABEL_249;
            }
            if (*(_DWORD *)(v124 + 160) == v177)
            {
              unsigned int v179 = 6;
              goto LABEL_249;
            }
            if (*(_DWORD *)(v124 + 184) == v177)
            {
              unsigned int v179 = 7;
LABEL_249:
              ++*(void *)(v124 + 3864);
              uint64_t v180 = v351 + 24 * v179;
              *(void *)(v180 + 8) = v178;
              if (*(void *)(v180 + 16)) {
                goto LABEL_251;
              }
LABEL_250:
              sub_296654(&v365);
              goto LABEL_251;
            }
            unint64_t v187 = *(void *)(v124 + 168);
            unint64_t v188 = *(void *)(v124 + 144);
            unint64_t v189 = *(void *)(v124 + 120);
            unint64_t v342 = *(void *)(v124 + 192);
            uint64_t v190 = sub_2AB884(*(void *)v124, 1, v177, 1);
            if (v189 >= v178) {
              unint64_t v191 = v178;
            }
            else {
              unint64_t v191 = v189;
            }
            BOOL v192 = v188 >= v191;
            if (v188 < v191) {
              unint64_t v191 = v188;
            }
            unsigned int v193 = 4 * (v189 < v178);
            if (!v192) {
              unsigned int v193 = 5;
            }
            if (v187 < v191)
            {
              unsigned int v193 = 6;
              unint64_t v191 = v187;
            }
            if (v342 < v191) {
              unsigned int v193 = 7;
            }
            uint64_t v194 = v351 + 24 * v193;
            *(_DWORD *)uint64_t v194 = v368[0];
            *(void *)(v194 + 8) = *(void *)(v124 + 3856);
            *(void *)(v194 + 16) = v190;
            if (!v190) {
              goto LABEL_250;
            }
LABEL_251:
            int v367 = 1;
            v368[0] = v177;
            v365 = &v367;
            v366 = v368;
            unint64_t v181 = *(void *)(v124 + 3856) + 1;
            *(void *)(v124 + 3856) = v181;
            if (!*(void *)v124) {
              goto LABEL_288;
            }
            if (*(_DWORD *)(v124 + 112) == v177)
            {
              unsigned int v182 = 4;
              goto LABEL_260;
            }
            if (*(_DWORD *)(v124 + 136) == v177)
            {
              unsigned int v182 = 5;
              goto LABEL_260;
            }
            if (*(_DWORD *)(v124 + 160) == v177)
            {
              unsigned int v182 = 6;
              goto LABEL_260;
            }
            if (*(_DWORD *)(v124 + 184) == v177)
            {
              unsigned int v182 = 7;
LABEL_260:
              ++*(void *)(v124 + 3864);
              uint64_t v183 = v351 + 24 * v182;
              *(void *)(v183 + 8) = v181;
              int64_t v184 = *(unsigned int **)(v183 + 16);
              if (v184) {
                goto LABEL_261;
              }
              goto LABEL_288;
            }
            unint64_t v195 = *(void *)(v124 + 168);
            unint64_t v196 = *(void *)(v124 + 144);
            unint64_t v197 = *(void *)(v124 + 120);
            unint64_t v343 = *(void *)(v124 + 192);
            int64_t v184 = (unsigned int *)sub_2AB884(*(void *)v124, 1, v177, 1);
            if (v197 >= v181) {
              unint64_t v198 = v181;
            }
            else {
              unint64_t v198 = v197;
            }
            BOOL v199 = v196 >= v198;
            if (v196 < v198) {
              unint64_t v198 = v196;
            }
            unsigned int v200 = 4 * (v197 < v181);
            if (!v199) {
              unsigned int v200 = 5;
            }
            if (v195 < v198)
            {
              unsigned int v200 = 6;
              unint64_t v198 = v195;
            }
            if (v343 < v198) {
              unsigned int v200 = 7;
            }
            uint64_t v201 = v351 + 24 * v200;
            *(_DWORD *)uint64_t v201 = v368[0];
            *(void *)(v201 + 8) = *(void *)(v124 + 3856);
            *(void *)(v201 + 16) = v184;
            if (v184)
            {
LABEL_261:
              uint64_t v185 = (int *)((char *)v184 + *v184);
              unint64_t v186 = (unsigned __int16 *)((char *)v185 - *v185);
              if (*v186 < 5u) {
                goto LABEL_291;
              }
              goto LABEL_289;
            }
LABEL_288:
            sub_296654(&v365);
            uint64_t v185 = 0;
            unint64_t v186 = (_WORD *)(&loc_1120530 + 1);
            if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
              goto LABEL_291;
            }
LABEL_289:
            uint64_t v202 = v186[2];
            if (!v202)
            {
LABEL_291:
              uint64_t v203 = 0;
              goto LABEL_292;
            }
            uint64_t v203 = (char *)v185 + v202 + *(unsigned int *)((char *)v185 + v202);
LABEL_292:
            uint64_t v204 = &v203[4 * HIDWORD(v177) + 4 + *(unsigned int *)&v203[4 * HIDWORD(v177) + 4]];
            uint64_t v205 = &v204[-*(int *)v204];
            if (*(unsigned __int16 *)v205 < 7u) {
              break;
            }
            uint64_t v206 = *((unsigned __int16 *)v205 + 3);
            if (!v206) {
              break;
            }
            uint64_t v169 = &v204[v206 + *(unsigned int *)&v204[v206]];
            if (*((unsigned __int16 *)v169 + 2) != *((unsigned __int16 *)v169 + 4)
              || *((unsigned __int16 *)v169 + 3) != *((unsigned __int16 *)v169 + 5))
            {
              goto LABEL_300;
            }
            unint64_t v171 = (v171 + 1);
            uint64_t v175 = **((void **)&v124 + 1);
            if (v171 >= (uint64_t)(*(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1)) >> 3)
            {
              int v170 = 2;
              goto LABEL_301;
            }
          }
          uint64_t v169 = 0;
LABEL_300:
          int v170 = 1;
LABEL_301:
          ++v127;
          if (v171 == v346 && v170 == v339) {
            goto LABEL_303;
          }
        }
      }
      unint64_t v127 = 0;
      long long v128 = (unsigned int *)*((void *)&v363 + 1);
      unsigned int v129 = **((_DWORD **)&v363 + 1);
      unsigned int v130 = DWORD1(v364[1]);
      LODWORD(v131) = v364[1];
      do
      {
        unint64_t v347 = v127;
        unsigned int v132 = v130 - 1;
        if (v130 - 1 >= v129)
        {
          uint64_t v135 = **((void **)&v124 + 1);
          unint64_t v131 = (v131 - 1);
          if (v131 < (uint64_t)(*(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1)) >> 3) {
            goto LABEL_166;
          }
          goto LABEL_227;
        }
        long long v133 = &v128[v130 + 1];
        uint64_t v134 = &v128[v132 + 1];
        if (*(unsigned __int16 *)v133 != *(unsigned __int16 *)v134
          || *((unsigned __int16 *)v133 + 1) != *((unsigned __int16 *)v134 + 1))
        {
          goto LABEL_227;
        }
        uint64_t v135 = **((void **)&v124 + 1);
        uint64_t v136 = *(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1);
        if (v129 == 2 && v136 == 8)
        {
          unsigned int v129 = 2;
LABEL_227:
          unsigned int v130 = v132;
          goto LABEL_228;
        }
        unsigned int v132 = v130 - 2;
        unint64_t v131 = (v131 - 1);
        if (v131 >= v136 >> 3) {
          goto LABEL_227;
        }
        do
        {
LABEL_166:
          unint64_t v137 = *(void *)(v135 + 8 * v131);
          int v367 = 1;
          v368[0] = v137;
          v365 = &v367;
          v366 = v368;
          unint64_t v138 = *(void *)(v124 + 3856) + 1;
          *(void *)(v124 + 3856) = v138;
          if (!*(void *)v124) {
            goto LABEL_176;
          }
          if (*(_DWORD *)(v124 + 112) == v137)
          {
            unsigned int v139 = 4;
            goto LABEL_175;
          }
          if (*(_DWORD *)(v124 + 136) == v137)
          {
            unsigned int v139 = 5;
            goto LABEL_175;
          }
          if (*(_DWORD *)(v124 + 160) == v137)
          {
            unsigned int v139 = 6;
            goto LABEL_175;
          }
          if (*(_DWORD *)(v124 + 184) == v137)
          {
            unsigned int v139 = 7;
LABEL_175:
            ++*(void *)(v124 + 3864);
            uint64_t v140 = v351 + 24 * v139;
            *(void *)(v140 + 8) = v138;
            if (*(void *)(v140 + 16)) {
              goto LABEL_177;
            }
LABEL_176:
            sub_296654(&v365);
            goto LABEL_177;
          }
          unint64_t v147 = *(void *)(v124 + 168);
          unint64_t v148 = *(void *)(v124 + 144);
          unint64_t v149 = *(void *)(v124 + 120);
          unint64_t v340 = *(void *)(v124 + 192);
          uint64_t v150 = sub_2AB884(*(void *)v124, 1, v137, 1);
          if (v149 >= v138) {
            unint64_t v151 = v138;
          }
          else {
            unint64_t v151 = v149;
          }
          BOOL v152 = v148 >= v151;
          if (v148 < v151) {
            unint64_t v151 = v148;
          }
          unsigned int v153 = 4 * (v149 < v138);
          if (!v152) {
            unsigned int v153 = 5;
          }
          if (v147 < v151)
          {
            unsigned int v153 = 6;
            unint64_t v151 = v147;
          }
          if (v340 < v151) {
            unsigned int v153 = 7;
          }
          uint64_t v154 = v351 + 24 * v153;
          *(_DWORD *)uint64_t v154 = v368[0];
          *(void *)(v154 + 8) = *(void *)(v124 + 3856);
          *(void *)(v154 + 16) = v150;
          if (!v150) {
            goto LABEL_176;
          }
LABEL_177:
          int v367 = 1;
          v368[0] = v137;
          v365 = &v367;
          v366 = v368;
          unint64_t v141 = *(void *)(v124 + 3856) + 1;
          *(void *)(v124 + 3856) = v141;
          if (!*(void *)v124) {
            goto LABEL_214;
          }
          if (*(_DWORD *)(v124 + 112) == v137)
          {
            unsigned int v142 = 4;
            goto LABEL_186;
          }
          if (*(_DWORD *)(v124 + 136) == v137)
          {
            unsigned int v142 = 5;
            goto LABEL_186;
          }
          if (*(_DWORD *)(v124 + 160) == v137)
          {
            unsigned int v142 = 6;
            goto LABEL_186;
          }
          if (*(_DWORD *)(v124 + 184) == v137)
          {
            unsigned int v142 = 7;
LABEL_186:
            ++*(void *)(v124 + 3864);
            uint64_t v143 = v351 + 24 * v142;
            *(void *)(v143 + 8) = v141;
            uint64_t v144 = *(unsigned int **)(v143 + 16);
            if (v144) {
              goto LABEL_187;
            }
            goto LABEL_214;
          }
          unint64_t v155 = *(void *)(v124 + 168);
          unint64_t v156 = *(void *)(v124 + 144);
          unint64_t v157 = *(void *)(v124 + 120);
          unint64_t v341 = *(void *)(v124 + 192);
          uint64_t v144 = (unsigned int *)sub_2AB884(*(void *)v124, 1, v137, 1);
          if (v157 >= v141) {
            unint64_t v158 = v141;
          }
          else {
            unint64_t v158 = v157;
          }
          BOOL v159 = v156 >= v158;
          if (v156 < v158) {
            unint64_t v158 = v156;
          }
          unsigned int v160 = 4 * (v157 < v141);
          if (!v159) {
            unsigned int v160 = 5;
          }
          if (v155 < v158)
          {
            unsigned int v160 = 6;
            unint64_t v158 = v155;
          }
          if (v341 < v158) {
            unsigned int v160 = 7;
          }
          uint64_t v161 = v351 + 24 * v160;
          *(_DWORD *)uint64_t v161 = v368[0];
          *(void *)(v161 + 8) = *(void *)(v124 + 3856);
          *(void *)(v161 + 16) = v144;
          if (v144)
          {
LABEL_187:
            uint64_t v145 = (int *)((char *)v144 + *v144);
            unsigned int v146 = (unsigned __int16 *)((char *)v145 - *v145);
            if (*v146 < 5u) {
              goto LABEL_217;
            }
            goto LABEL_215;
          }
LABEL_214:
          sub_296654(&v365);
          uint64_t v145 = 0;
          unsigned int v146 = (_WORD *)(&loc_1120530 + 1);
          if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
            goto LABEL_217;
          }
LABEL_215:
          uint64_t v162 = v146[2];
          if (!v162)
          {
LABEL_217:
            __n128 v163 = 0;
            goto LABEL_218;
          }
          __n128 v163 = (char *)v145 + v162 + *(unsigned int *)((char *)v145 + v162);
LABEL_218:
          uint64_t v164 = &v163[4 * HIDWORD(v137) + 4 + *(unsigned int *)&v163[4 * HIDWORD(v137) + 4]];
          uint64_t v165 = &v164[-*(int *)v164];
          if (*(unsigned __int16 *)v165 >= 7u && (uint64_t v166 = *((unsigned __int16 *)v165 + 3)) != 0) {
            long long v128 = (unsigned int *)&v164[v166 + *(unsigned int *)&v164[v166]];
          }
          else {
            long long v128 = 0;
          }
          unsigned int v129 = *v128;
          unsigned int v130 = *v128 - 2;
          uint64_t v167 = &v128[*v128];
          long long v168 = &v128[v130 + 1];
          if (*(unsigned __int16 *)v167 != *(unsigned __int16 *)v168
            || *((unsigned __int16 *)v167 + 1) != *((unsigned __int16 *)v168 + 1))
          {
            goto LABEL_228;
          }
          unint64_t v131 = (v131 - 1);
          uint64_t v135 = **((void **)&v124 + 1);
        }
        while (v131 < (uint64_t)(*(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1)) >> 3);
        unsigned int v130 = v129 - 3;
LABEL_228:
        ++v127;
      }
      while (v131 != v346 || v130 != v339);
LABEL_303:
      if (v347 >= 0x1555555555555555) {
        sub_2E00();
      }
      long long __p = operator new(12 * v127);
      v353 = __p;
      v348 = __p;
      v354 = (char *)__p + 12 * v127;
      v207 = v335;
      unsigned int v208 = v126;
      while (2)
      {
        unint64_t v344 = v125;
        long long v209 = v207;
        long long v210 = v207 + 1;
        unsigned int v211 = v208;
        v212 = &v207[v208 + 1];
        int v213 = *(unsigned __int16 *)v212;
        int v214 = *((unsigned __int16 *)v212 + 1);
        unsigned int v215 = sub_511FC(v349);
        unsigned int v216 = v349 & ~(-1 << (v215 & 0xFE));
        int v217 = sub_51938(v216);
        int v218 = sub_51938(v216 >> 1);
        uint64_t v219 = v211;
        long long v220 = (unsigned __int16 *)((char *)v345 - *v345);
        unsigned int v221 = *v220;
        if (v221 < 0xD)
        {
          long long v222 = v348;
          if (v221 >= 0xB) {
            goto LABEL_309;
          }
LABEL_314:
          int v223 = 0x7FFFFFFF;
          goto LABEL_315;
        }
        long long v222 = v348;
        if (v220[6])
        {
          int v223 = *(int *)((char *)&v345[v219 + 1] + v220[6] + *(unsigned int *)((char *)v345 + v220[6]));
          goto LABEL_315;
        }
LABEL_309:
        if (!v220[5]) {
          goto LABEL_314;
        }
        int v224 = *(unsigned __int16 *)((char *)v345 + 2 * v219 + v220[5] + *(unsigned int *)((char *)v345 + v220[5]) + 4);
        if (v224 == 0xFFFF) {
          goto LABEL_314;
        }
        uint64_t v225 = v220[4];
        if (v225) {
          LODWORD(v225) = *(int *)((char *)v345 + v225);
        }
        int v223 = v350 + v224 + v225;
LABEL_315:
        int v226 = 1 << -(v215 >> 1);
        if (v215 < 2) {
          int v226 = -2;
        }
        LODWORD(v227) = v218 * v226 + 4 * v214;
        if (v227 >= 0xFFFFFFFE) {
          uint64_t v227 = 4294967294;
        }
        else {
          uint64_t v227 = v227;
        }
        *(void *)long long v222 = (v217 * v226 + 4 * v213) | (unint64_t)(v227 << 32);
        v222[2] = v223;
        unsigned int v228 = *v209;
        if (!v338)
        {
          unsigned int v208 = v219 + 1;
          if ((int)v219 + 1 >= v228)
          {
            uint64_t v233 = **((void **)&v124 + 1);
            v207 = v209;
            unint64_t v125 = (v344 + 1);
            if (v125 < (uint64_t)(*(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1)) >> 3) {
              goto LABEL_402;
            }
            goto LABEL_468;
          }
          BOOL v232 = &v210[v208];
          if (*(unsigned __int16 *)v212 != *(unsigned __int16 *)v232
            || *((unsigned __int16 *)v212 + 1) != *((unsigned __int16 *)v232 + 1))
          {
LABEL_334:
            int v235 = v346;
            v207 = v209;
            unint64_t v125 = v344;
            goto LABEL_469;
          }
          uint64_t v233 = **((void **)&v124 + 1);
          uint64_t v234 = *(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1);
          v207 = v209;
          if (v228 == 2 && v234 == 8) {
            goto LABEL_333;
          }
          unsigned int v208 = v219 + 2;
          unint64_t v125 = (v344 + 1);
          if (v125 >= v234 >> 3) {
            goto LABEL_468;
          }
LABEL_402:
          while (2)
          {
            unint64_t v273 = *(void *)(v233 + 8 * v125);
            int v367 = 1;
            v368[0] = v273;
            v365 = &v367;
            v366 = v368;
            unint64_t v274 = *(void *)(v124 + 3856) + 1;
            *(void *)(v124 + 3856) = v274;
            if (*(void *)v124)
            {
              if (*(_DWORD *)(v124 + 112) == v273)
              {
                unsigned int v275 = 4;
                goto LABEL_411;
              }
              if (*(_DWORD *)(v124 + 136) == v273)
              {
                unsigned int v275 = 5;
                goto LABEL_411;
              }
              if (*(_DWORD *)(v124 + 160) == v273)
              {
                unsigned int v275 = 6;
                goto LABEL_411;
              }
              if (*(_DWORD *)(v124 + 184) == v273)
              {
                unsigned int v275 = 7;
LABEL_411:
                ++*(void *)(v124 + 3864);
                uint64_t v276 = v351 + 24 * v275;
                *(void *)(v276 + 8) = v274;
                long long v277 = *(unsigned int **)(v276 + 16);
                if (v277)
                {
LABEL_412:
                  long long v278 = (int *)((char *)v277 + *v277);
                  uint64_t v279 = (unsigned __int16 *)((char *)v278 - *v278);
                  if (*v279 < 7u)
                  {
LABEL_429:
                    int v350 = 0;
                    goto LABEL_430;
                  }
LABEL_427:
                  uint64_t v288 = v279[3];
                  if (!v288) {
                    goto LABEL_429;
                  }
                  int v350 = *(int *)((char *)v278 + v288);
LABEL_430:
                  int v367 = 1;
                  v368[0] = v273;
                  v365 = &v367;
                  v366 = v368;
                  unint64_t v289 = *(void *)(v124 + 3856) + 1;
                  *(void *)(v124 + 3856) = v289;
                  if (*(void *)v124)
                  {
                    if (*(_DWORD *)(v124 + 112) == v273)
                    {
                      unsigned int v290 = 4;
                      goto LABEL_439;
                    }
                    if (*(_DWORD *)(v124 + 136) == v273)
                    {
                      unsigned int v290 = 5;
                      goto LABEL_439;
                    }
                    if (*(_DWORD *)(v124 + 160) == v273)
                    {
                      unsigned int v290 = 6;
                      goto LABEL_439;
                    }
                    if (*(_DWORD *)(v124 + 184) == v273)
                    {
                      unsigned int v290 = 7;
LABEL_439:
                      ++*(void *)(v124 + 3864);
                      uint64_t v291 = v351 + 24 * v290;
                      *(void *)(v291 + 8) = v289;
                      long long v292 = *(unsigned int **)(v291 + 16);
                      if (v292)
                      {
LABEL_440:
                        long long v293 = (int *)((char *)v292 + *v292);
                        long long v294 = (unsigned __int16 *)((char *)v293 - *v293);
                        if (*v294 < 5u)
                        {
LABEL_457:
                          v304 = 0;
                          goto LABEL_458;
                        }
LABEL_455:
                        uint64_t v303 = v294[2];
                        if (!v303) {
                          goto LABEL_457;
                        }
                        v304 = (char *)v293 + v303 + *(unsigned int *)((char *)v293 + v303);
LABEL_458:
                        v305 = &v304[4 * HIDWORD(v273) + 4 + *(unsigned int *)&v304[4 * HIDWORD(v273) + 4]];
                        v306 = &v305[-*(int *)v305];
                        if (*(unsigned __int16 *)v306 < 7u || (uint64_t v307 = *((unsigned __int16 *)v306 + 3)) == 0)
                        {
                          v207 = 0;
LABEL_467:
                          v345 = (int *)v305;
                          unsigned int v349 = v273;
                          unsigned int v208 = 1;
LABEL_468:
                          int v235 = v346;
                          goto LABEL_469;
                        }
                        v207 = (unsigned int *)&v305[v307 + *(unsigned int *)&v305[v307]];
                        if (*((unsigned __int16 *)v207 + 2) != *((unsigned __int16 *)v207 + 4)
                          || *((unsigned __int16 *)v207 + 3) != *((unsigned __int16 *)v207 + 5))
                        {
                          goto LABEL_467;
                        }
                        unint64_t v125 = (v125 + 1);
                        uint64_t v233 = **((void **)&v124 + 1);
                        if (v125 >= (uint64_t)(*(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1)) >> 3)
                        {
                          v345 = (int *)v305;
                          unsigned int v349 = v273;
                          unsigned int v208 = 2;
                          goto LABEL_468;
                        }
                        continue;
                      }
                    }
                    else
                    {
                      unint64_t v295 = *(void *)(v124 + 168);
                      unint64_t v296 = *(void *)(v124 + 144);
                      unint64_t v297 = *(void *)(v124 + 120);
                      unint64_t v298 = *(void *)(v124 + 192);
                      long long v292 = (unsigned int *)sub_2AB884(*(void *)v124, 1, v273, 1);
                      if (v297 >= v289) {
                        unint64_t v299 = v289;
                      }
                      else {
                        unint64_t v299 = v297;
                      }
                      BOOL v300 = v296 >= v299;
                      if (v296 < v299) {
                        unint64_t v299 = v296;
                      }
                      unsigned int v301 = 4 * (v297 < v289);
                      if (!v300) {
                        unsigned int v301 = 5;
                      }
                      if (v295 < v299)
                      {
                        unsigned int v301 = 6;
                        unint64_t v299 = v295;
                      }
                      if (v298 < v299) {
                        unsigned int v301 = 7;
                      }
                      uint64_t v302 = v351 + 24 * v301;
                      *(_DWORD *)uint64_t v302 = v368[0];
                      *(void *)(v302 + 8) = *(void *)(v124 + 3856);
                      *(void *)(v302 + 16) = v292;
                      if (v292) {
                        goto LABEL_440;
                      }
                    }
                  }
                  sub_296654(&v365);
                  long long v293 = 0;
                  long long v294 = (_WORD *)(&loc_1120530 + 1);
                  if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
                    goto LABEL_457;
                  }
                  goto LABEL_455;
                }
              }
              else
              {
                unint64_t v280 = *(void *)(v124 + 168);
                unint64_t v281 = *(void *)(v124 + 144);
                unint64_t v282 = *(void *)(v124 + 120);
                unint64_t v283 = *(void *)(v124 + 192);
                long long v277 = (unsigned int *)sub_2AB884(*(void *)v124, 1, v273, 1);
                if (v282 >= v274) {
                  unint64_t v284 = v274;
                }
                else {
                  unint64_t v284 = v282;
                }
                BOOL v285 = v281 >= v284;
                if (v281 < v284) {
                  unint64_t v284 = v281;
                }
                unsigned int v286 = 4 * (v282 < v274);
                if (!v285) {
                  unsigned int v286 = 5;
                }
                if (v280 < v284)
                {
                  unsigned int v286 = 6;
                  unint64_t v284 = v280;
                }
                if (v283 < v284) {
                  unsigned int v286 = 7;
                }
                uint64_t v287 = v351 + 24 * v286;
                *(_DWORD *)uint64_t v287 = v368[0];
                *(void *)(v287 + 8) = *(void *)(v124 + 3856);
                *(void *)(v287 + 16) = v277;
                if (v277) {
                  goto LABEL_412;
                }
              }
            }
            break;
          }
          sub_296654(&v365);
          long long v278 = 0;
          uint64_t v279 = (_WORD *)(&loc_1120530 + 1);
          if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 7u) {
            goto LABEL_429;
          }
          goto LABEL_427;
        }
        unsigned int v208 = v219 - 1;
        if ((int)v219 - 1 >= v228)
        {
          uint64_t v230 = **((void **)&v124 + 1);
          v207 = v209;
          unint64_t v125 = (v344 - 1);
          if (v125 >= (uint64_t)(*(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1)) >> 3) {
            goto LABEL_468;
          }
LABEL_336:
          while (2)
          {
            unint64_t v236 = *(void *)(v230 + 8 * v125);
            int v367 = 1;
            v368[0] = v236;
            v365 = &v367;
            v366 = v368;
            unint64_t v237 = *(void *)(v124 + 3856) + 1;
            *(void *)(v124 + 3856) = v237;
            if (*(void *)v124)
            {
              if (*(_DWORD *)(v124 + 112) == v236)
              {
                unsigned int v238 = 4;
                goto LABEL_345;
              }
              if (*(_DWORD *)(v124 + 136) == v236)
              {
                unsigned int v238 = 5;
                goto LABEL_345;
              }
              if (*(_DWORD *)(v124 + 160) == v236)
              {
                unsigned int v238 = 6;
                goto LABEL_345;
              }
              if (*(_DWORD *)(v124 + 184) == v236)
              {
                unsigned int v238 = 7;
LABEL_345:
                ++*(void *)(v124 + 3864);
                uint64_t v239 = v351 + 24 * v238;
                *(void *)(v239 + 8) = v237;
                uint64_t v240 = *(unsigned int **)(v239 + 16);
                if (v240)
                {
LABEL_346:
                  uint64_t v241 = (int *)((char *)v240 + *v240);
                  v242 = (unsigned __int16 *)((char *)v241 - *v241);
                  if (*v242 < 7u)
                  {
LABEL_363:
                    int v350 = 0;
                    goto LABEL_364;
                  }
LABEL_361:
                  uint64_t v251 = v242[3];
                  if (!v251) {
                    goto LABEL_363;
                  }
                  int v350 = *(int *)((char *)v241 + v251);
LABEL_364:
                  int v367 = 1;
                  v368[0] = v236;
                  v365 = &v367;
                  v366 = v368;
                  unint64_t v252 = *(void *)(v124 + 3856) + 1;
                  *(void *)(v124 + 3856) = v252;
                  if (*(void *)v124)
                  {
                    if (*(_DWORD *)(v124 + 112) == v236)
                    {
                      unsigned int v253 = 4;
                      goto LABEL_373;
                    }
                    if (*(_DWORD *)(v124 + 136) == v236)
                    {
                      unsigned int v253 = 5;
                      goto LABEL_373;
                    }
                    if (*(_DWORD *)(v124 + 160) == v236)
                    {
                      unsigned int v253 = 6;
                      goto LABEL_373;
                    }
                    if (*(_DWORD *)(v124 + 184) == v236)
                    {
                      unsigned int v253 = 7;
LABEL_373:
                      ++*(void *)(v124 + 3864);
                      uint64_t v254 = v351 + 24 * v253;
                      *(void *)(v254 + 8) = v252;
                      v255 = *(unsigned int **)(v254 + 16);
                      if (v255)
                      {
LABEL_374:
                        uint64_t v256 = (int *)((char *)v255 + *v255);
                        uint64_t v257 = (unsigned __int16 *)((char *)v256 - *v256);
                        if (*v257 < 5u)
                        {
LABEL_391:
                          unsigned int v267 = 0;
                          goto LABEL_392;
                        }
LABEL_389:
                        uint64_t v266 = v257[2];
                        if (!v266) {
                          goto LABEL_391;
                        }
                        unsigned int v267 = (char *)v256 + v266 + *(unsigned int *)((char *)v256 + v266);
LABEL_392:
                        BOOL v268 = &v267[4 * HIDWORD(v236) + 4 + *(unsigned int *)&v267[4 * HIDWORD(v236) + 4]];
                        long long v269 = &v268[-*(int *)v268];
                        if (*(unsigned __int16 *)v269 >= 7u && (uint64_t v270 = *((unsigned __int16 *)v269 + 3)) != 0) {
                          v207 = (unsigned int *)&v268[v270 + *(unsigned int *)&v268[v270]];
                        }
                        else {
                          v207 = 0;
                        }
                        v271 = &v207[*v207];
                        uint64_t v272 = &v207[*v207 - 1];
                        if (*(unsigned __int16 *)v271 != *(unsigned __int16 *)v272
                          || *((unsigned __int16 *)v271 + 1) != *((unsigned __int16 *)v272 + 1))
                        {
                          v345 = (int *)v268;
                          unsigned int v349 = v236;
                          int v235 = v346;
                          unsigned int v208 = *v207 - 2;
                          goto LABEL_469;
                        }
                        unint64_t v125 = (v125 - 1);
                        uint64_t v230 = **((void **)&v124 + 1);
                        if (v125 >= (uint64_t)(*(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1)) >> 3)
                        {
                          v345 = (int *)v268;
                          unsigned int v208 = *v207 - 3;
                          unsigned int v349 = v236;
                          goto LABEL_468;
                        }
                        continue;
                      }
                    }
                    else
                    {
                      unint64_t v258 = *(void *)(v124 + 168);
                      unint64_t v259 = *(void *)(v124 + 144);
                      unint64_t v260 = *(void *)(v124 + 120);
                      unint64_t v261 = *(void *)(v124 + 192);
                      v255 = (unsigned int *)sub_2AB884(*(void *)v124, 1, v236, 1);
                      if (v260 >= v252) {
                        unint64_t v262 = v252;
                      }
                      else {
                        unint64_t v262 = v260;
                      }
                      BOOL v263 = v259 >= v262;
                      if (v259 < v262) {
                        unint64_t v262 = v259;
                      }
                      unsigned int v264 = 4 * (v260 < v252);
                      if (!v263) {
                        unsigned int v264 = 5;
                      }
                      if (v258 < v262)
                      {
                        unsigned int v264 = 6;
                        unint64_t v262 = v258;
                      }
                      if (v261 < v262) {
                        unsigned int v264 = 7;
                      }
                      uint64_t v265 = v351 + 24 * v264;
                      *(_DWORD *)uint64_t v265 = v368[0];
                      *(void *)(v265 + 8) = *(void *)(v124 + 3856);
                      *(void *)(v265 + 16) = v255;
                      if (v255) {
                        goto LABEL_374;
                      }
                    }
                  }
                  sub_296654(&v365);
                  uint64_t v256 = 0;
                  uint64_t v257 = (_WORD *)(&loc_1120530 + 1);
                  if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
                    goto LABEL_391;
                  }
                  goto LABEL_389;
                }
              }
              else
              {
                unint64_t v243 = *(void *)(v124 + 168);
                unint64_t v244 = *(void *)(v124 + 144);
                unint64_t v245 = *(void *)(v124 + 120);
                unint64_t v246 = *(void *)(v124 + 192);
                uint64_t v240 = (unsigned int *)sub_2AB884(*(void *)v124, 1, v236, 1);
                if (v245 >= v237) {
                  unint64_t v247 = v237;
                }
                else {
                  unint64_t v247 = v245;
                }
                BOOL v248 = v244 >= v247;
                if (v244 < v247) {
                  unint64_t v247 = v244;
                }
                unsigned int v249 = 4 * (v245 < v237);
                if (!v248) {
                  unsigned int v249 = 5;
                }
                if (v243 < v247)
                {
                  unsigned int v249 = 6;
                  unint64_t v247 = v243;
                }
                if (v246 < v247) {
                  unsigned int v249 = 7;
                }
                uint64_t v250 = v351 + 24 * v249;
                *(_DWORD *)uint64_t v250 = v368[0];
                *(void *)(v250 + 8) = *(void *)(v124 + 3856);
                *(void *)(v250 + 16) = v240;
                if (v240) {
                  goto LABEL_346;
                }
              }
            }
            break;
          }
          sub_296654(&v365);
          uint64_t v241 = 0;
          v242 = (_WORD *)(&loc_1120530 + 1);
          if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 7u) {
            goto LABEL_363;
          }
          goto LABEL_361;
        }
        unsigned int v229 = &v210[v208];
        if (*(unsigned __int16 *)v212 != *(unsigned __int16 *)v229
          || *((unsigned __int16 *)v212 + 1) != *((unsigned __int16 *)v229 + 1))
        {
          goto LABEL_334;
        }
        uint64_t v230 = **((void **)&v124 + 1);
        uint64_t v231 = *(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1);
        v207 = v209;
        if (v228 != 2 || v231 != 8)
        {
          unsigned int v208 = v219 - 2;
          unint64_t v125 = (v344 - 1);
          if (v125 < v231 >> 3) {
            goto LABEL_336;
          }
          goto LABEL_468;
        }
LABEL_333:
        int v235 = v346;
        unint64_t v125 = v344;
LABEL_469:
        v348 = v222 + 3;
        if (v125 != v235 || v208 != v339) {
          continue;
        }
        break;
      }
      v353 = v222 + 3;
LABEL_474:
      uint64_t v7 = (uint64_t)v333;
      BOOL v308 = sub_358C68(v333, v337, (uint64_t)&__p, v43, v34, v35, v36);
      if (__p)
      {
        v353 = __p;
        operator delete(__p);
      }
      uint64_t v9 = a6;
      if (v308)
      {
        v309 = v360;
        if ((unint64_t)v360 >= v361)
        {
          uint64_t v311 = v360 - v359;
          if ((unint64_t)(v311 + 1) >> 60) {
            sub_2E00();
          }
          unint64_t v312 = (uint64_t)(v361 - (void)v359) >> 3;
          if (v312 <= v311 + 1) {
            unint64_t v312 = v311 + 1;
          }
          if (v361 - (unint64_t)v359 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v313 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v313 = v312;
          }
          if (v313)
          {
            if (v313 >> 60) {
              sub_188D718();
            }
            v314 = (char *)operator new(16 * v313);
          }
          else
          {
            v314 = 0;
          }
          v315 = (__n128 *)sub_358F6C((uint64_t)&v314[16 * v311], v336, (uint64_t)v333);
          v317 = v359;
          v316 = v360;
          v318 = v315;
          if (v360 != v359)
          {
            do
            {
              v318[-1] = v316[-1];
              --v318;
              --v316;
            }
            while (v316 != v317);
            v316 = v359;
          }
          v319 = &v314[16 * v313];
          v310 = v315 + 1;
          v359 = v318;
          v360 = v315 + 1;
          unint64_t v361 = (unint64_t)v319;
          if (v316) {
            operator delete(v316);
          }
        }
        else
        {
          sub_358F6C((uint64_t)v360, v336, (uint64_t)v333);
          v310 = v309 + 1;
        }
        v360 = v310;
        char v329 = 1;
      }
      if (v356)
      {
        v357 = (char *)v356;
        operator delete(v356);
      }
      unsigned int v28 = v336 + 1;
      char v32 = v336 + 1 == v334 || v308;
    }
    while ((v32 & 1) == 0);
    uint64_t v26 = v326;
    if (!(v329 & 1 | (v326 == v327))) {
      goto LABEL_16;
    }
LABEL_10:
    v7 += 184;
    if (v7 != v325)
    {
      BOOL v24 = sub_34658((_DWORD *)(v7 + 128), a4);
      continue;
    }
    break;
  }
  v320 = v360;
  if (v359 != v360)
  {
    sub_3F6A74(v359, v360, (uint64_t)&v362, 126 - 2 * __clz(v360 - v359), 1);
    *(void *)&long long v362 = **(void **)a5 + 648 * *(void *)(a5 + 8);
    uint64_t v355 = v362 + 480;
    unint64_t v321 = *(void *)(v9 + 8);
    if (v321 >= *(void *)(v9 + 16))
    {
      v322 = sub_3F7E3C((void **)v9, (uint64_t *)&v362, (uint64_t)&v359, &v355);
    }
    else
    {
      sub_358F78(*(void **)(v9 + 8), (uint64_t *)&v362, (uint64_t)&v359, &v355);
      v322 = (char *)(v321 + 40);
      *(void *)(v9 + 8) = v321 + 40;
    }
    *(void *)(v9 + 8) = v322;
    v320 = v359;
  }
  if (v320)
  {
    v360 = v320;
    operator delete(v320);
  }
}

void sub_3EE3C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41)
{
  double v43 = *(void **)(v41 - 216);
  if (!v43) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v41 - 208) = v43;
  operator delete(v43);
  _Unwind_Resume(exception_object);
}

void **sub_3EE4A4(void **a1)
{
  double v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    unsigned int v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        unsigned int v5 = (void *)*((void *)v3 - 4);
        if (v5)
        {
          *((void *)v3 - 3) = v5;
          operator delete(v5);
        }
        v3 -= 40;
      }
      while (v3 != v2);
      unsigned int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_3EE518(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(unsigned char *)(a1 + 25) && (unsigned int v4 = (uint64_t *)a1, *(unsigned char *)(a1 + 29)) && (v5 = (void *)a2, sub_64F1E8(a2)))
  {
    double v35 = a3;
    uint64_t v46 = 0;
    unsigned int v47 = 0;
    unint64_t v48 = 0;
    long long __p = 0;
    unint64_t v44 = 0;
    uint64_t v45 = 0;
    long long v41 = xmmword_20B8E30;
    uint64_t v42 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v37 = sub_46C760(v5);
    if (v37)
    {
      uint64_t v6 = 0;
      double v36 = v4;
      do
      {
        uint64_t v7 = v4[1];
        uint64_t v8 = v5;
        uint64_t v9 = sub_46C8EC(v5, v6);
        sub_295BE0(v7, *(void *)(v9 + 32), (unint64_t *)&__p);
        unsigned int v10 = (int *)__p;
        uint64_t v11 = v44;
        while (v10 != v11)
        {
          int v12 = *v10;
          int v40 = *v10;
          uint64_t v13 = v46;
          uint64_t v14 = v47;
          if (v46 == v47 || v12 != *(v47 - 2))
          {
            if ((unint64_t)v47 < v48)
            {
              *unsigned int v47 = v12;
              v14[1] = v6;
              BOOL v15 = v14 + 2;
LABEL_32:
              unsigned int v47 = v15;
              sub_383CC((unsigned int *)&v40, (uint64_t)&v38);
              sub_33998((uint64_t)&v41, (uint64_t)&v38);
              goto LABEL_8;
            }
            uint64_t v16 = ((char *)v47 - (char *)v46) >> 3;
            unint64_t v17 = v16 + 1;
            if ((unint64_t)(v16 + 1) >> 61) {
              sub_2E00();
            }
            uint64_t v18 = v48 - (void)v46;
            if ((uint64_t)(v48 - (void)v46) >> 2 > v17) {
              unint64_t v17 = v18 >> 2;
            }
            if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v19 = v17;
            }
            if (v19 >> 61) {
              sub_188D718();
            }
            uint64_t v20 = operator new(8 * v19);
            unint64_t v21 = (int *)&v20[8 * v16];
            int *v21 = v12;
            v21[1] = v6;
            if (v13 == v14)
            {
              BOOL v23 = (int *)&v20[8 * v16];
            }
            else
            {
              unint64_t v22 = (char *)(v14 - 2) - (char *)v13;
              if (v22 < 0x58)
              {
                BOOL v23 = (int *)&v20[8 * v16];
                goto LABEL_29;
              }
              BOOL v23 = (int *)&v20[8 * v16];
              if ((unint64_t)((char *)v13 - v20) < 0x20) {
                goto LABEL_48;
              }
              uint64_t v24 = (v22 >> 3) + 1;
              uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v26 = &v14[v25 / 0xFFFFFFFFFFFFFFFCLL];
              BOOL v23 = &v21[v25 / 0xFFFFFFFFFFFFFFFCLL];
              uint64_t v27 = &v20[8 * v16 - 16];
              unsigned int v28 = v14 - 4;
              uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v30 = *(_OWORD *)v28;
                *(v27 - 1) = *((_OWORD *)v28 - 1);
                *uint64_t v27 = v30;
                v27 -= 2;
                v28 -= 8;
                v29 -= 4;
              }
              while (v29);
              uint64_t v14 = v26;
              if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_48:
                do
                {
LABEL_29:
                  uint64_t v31 = *((void *)v14 - 1);
                  v14 -= 2;
                  *((void *)v23 - 1) = v31;
                  v23 -= 2;
                }
                while (v14 != v13);
              }
            }
            char v32 = &v20[8 * v19];
            BOOL v15 = v21 + 2;
            uint64_t v46 = v23;
            unsigned int v47 = v21 + 2;
            unint64_t v48 = (unint64_t)v32;
            if (v13) {
              operator delete(v13);
            }
            goto LABEL_32;
          }
LABEL_8:
          ++v10;
        }
        ++v6;
        unsigned int v4 = v36;
        unsigned int v5 = v8;
      }
      while (v6 != v37);
    }
    LODWORD(v38) = 0;
    int v40 = sub_46C760(v5) - 1;
    sub_3EC418((uint64_t)&v46, &v38, &v40);
    sub_29AA4C(*v4, &v41, 0, &v38);
    double v34 = v38;
    uint64_t v33 = v39;
    v35[1] = 0;
    v35[2] = 0;
    *double v35 = 0;
    if (v34 != v33)
    {
      do
      {
        sub_3EE910((uint64_t)v4, v5, (uint64_t *)&v46, &v41, (uint64_t)v34, (uint64_t)v35);
        v34 += 16;
      }
      while (v34 != v33);
      double v34 = v38;
    }
    if (v34)
    {
      unint64_t v39 = v34;
      operator delete(v34);
    }
    if (__p)
    {
      unint64_t v44 = (int *)__p;
      operator delete(__p);
    }
    if (v46)
    {
      unsigned int v47 = v46;
      operator delete(v46);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_3EE844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v24 = *(void **)(v22 - 104);
    if (!v24) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v24 = *(void **)(v22 - 104);
    if (!v24) {
      goto LABEL_3;
    }
  }
  *(void *)(v22 - 96) = v24;
  operator delete(v24);
  _Unwind_Resume(exception_object);
}

void sub_3EE910(uint64_t a1, void *a2, uint64_t *a3, _DWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = **(void **)a5 + 648 * *(void *)(a5 + 8);
  uint64_t v7 = *(void *)(v6 + 456);
  uint64_t v8 = *(void *)(v6 + 464) - v7;
  if (v8 <= 183) {
    return;
  }
  uint64_t v9 = a6;
  unsigned int v10 = a4[3];
  uint64_t v11 = v7;
  if (v8 != 184)
  {
    unint64_t v12 = v8 / 0xB8uLL;
    uint64_t v11 = v7;
    do
    {
      uint64_t v13 = 184 * (v12 >> 2);
      _X14 = v11 + v13;
      __asm { PRFM            #0, [X14] }
      unint64_t v19 = v11 + 184 * (v12 >> 1);
      _X13 = v19 + v13;
      __asm { PRFM            #0, [X13] }
      if (*(_DWORD *)(v19 + 128) >= v10) {
        unint64_t v22 = 0;
      }
      else {
        unint64_t v22 = v12 >> 1;
      }
      v11 += 184 * v22;
      v12 -= v12 >> 1;
    }
    while ((uint64_t)v12 > 1);
  }
  BOOL v23 = *(_DWORD *)(v11 + 128) < v10;
  v359 = 0;
  v360 = 0;
  unint64_t v361 = 0;
  uint64_t v325 = v11 + 184 * v23;
  if (v325 == v7) {
    return;
  }
  BOOL v24 = sub_34658((_DWORD *)(v7 + 128), a4);
  while (2)
  {
    if (!v24) {
      goto LABEL_10;
    }
    uint64_t v25 = *a3;
    uint64_t v327 = ((a3[1] - *a3) >> 3) - 1;
    if ((a3[1] - *a3) >> 3 == 1) {
      goto LABEL_10;
    }
    uint64_t v26 = 0;
    v333 = (uint64_t *)v7;
    while (1)
    {
      uint64_t v27 = v26;
      if (!sub_358BA4(v7, *(_DWORD *)(v25 + 8 * v26)))
      {
        uint64_t v26 = v27 + 1;
        goto LABEL_498;
      }
      unsigned int v28 = *(_DWORD *)(*a3 + 8 * v27 + 4);
      uint64_t v26 = v27 + 1;
      int v29 = *(_DWORD *)(*a3 + 8 * (v27 + 1) + 4);
      unsigned int v30 = v29 + 1;
      int v31 = v28 <= v29 + 1 ? v29 + 1 : *(_DWORD *)(*a3 + 8 * v27 + 4);
      int v334 = v31;
      if (v28 < v30) {
        break;
      }
LABEL_498:
      if (v26 == v327) {
        goto LABEL_10;
      }
LABEL_16:
      uint64_t v25 = *a3;
    }
    uint64_t v326 = v27 + 1;
    char v329 = 0;
    do
    {
      uint64_t v33 = *(void *)(sub_46C8EC(a2, v28) + 32);
      sub_2954EC(*(void *)(a1 + 8), v33, (uint64_t)&v355);
      if (v358)
      {
        if (v356 == v357) {
          goto LABEL_36;
        }
        unint64_t v37 = *((void *)v357 - 1);
        uint64_t v38 = v355;
        int v367 = 1;
        v368[0] = v37;
        v365 = &v367;
        v366 = v368;
        unint64_t v39 = *(void *)(v355 + 3856) + 1;
        *(void *)(v355 + 3856) = v39;
        if (!*(void *)v38) {
          goto LABEL_79;
        }
        uint64_t v40 = v38 + 16;
        if (*(_DWORD *)(v38 + 112) == v37)
        {
          unsigned int v41 = 4;
        }
        else if (*(_DWORD *)(v38 + 136) == v37)
        {
          unsigned int v41 = 5;
        }
        else if (*(_DWORD *)(v38 + 160) == v37)
        {
          unsigned int v41 = 6;
        }
        else
        {
          if (*(_DWORD *)(v38 + 184) != v37)
          {
            unint64_t v66 = *(void *)(v38 + 168);
            unint64_t v67 = *(void *)(v38 + 144);
            unint64_t v68 = *(void *)(v38 + 120);
            unint64_t v69 = *(void *)(v38 + 192);
            unint64_t v57 = (unsigned int *)sub_2AB884(*(void *)v38, 1, v37, 1);
            if (v68 >= v39) {
              unint64_t v70 = v39;
            }
            else {
              unint64_t v70 = v68;
            }
            _CF = v67 >= v70;
            if (v67 < v70) {
              unint64_t v70 = v67;
            }
            unsigned int v72 = 4 * (v68 < v39);
            if (!_CF) {
              unsigned int v72 = 5;
            }
            if (v66 < v70)
            {
              unsigned int v72 = 6;
              unint64_t v70 = v66;
            }
            if (v69 < v70) {
              unsigned int v72 = 7;
            }
            uint64_t v73 = v40 + 24 * v72;
            *(_DWORD *)uint64_t v73 = v368[0];
            *(void *)(v73 + 8) = *(void *)(v38 + 3856);
            *(void *)(v73 + 16) = v57;
            if (v57) {
              goto LABEL_57;
            }
            goto LABEL_79;
          }
          unsigned int v41 = 7;
        }
        ++*(void *)(v38 + 3864);
        uint64_t v56 = v40 + 24 * v41;
        *(void *)(v56 + 8) = v39;
        unint64_t v57 = *(unsigned int **)(v56 + 16);
        if (v57)
        {
LABEL_57:
          unint64_t v58 = (int *)((char *)v57 + *v57);
          goto LABEL_80;
        }
LABEL_79:
        sub_296654(&v365);
        unint64_t v58 = 0;
LABEL_80:
        uint64_t v74 = (unsigned int *)((char *)v58 + *(unsigned __int16 *)((char *)v58 - *v58 + 4));
        uint64_t v75 = (uint64_t)&v74[HIDWORD(v37)] + *v74;
        uint64_t v76 = (int *)(v75 + 4 + *(unsigned int *)(v75 + 4));
        unint64_t v77 = (unsigned int *)((char *)v76 + *(unsigned __int16 *)((char *)v76 - *v76 + 6));
        LODWORD(v77) = *(unsigned int *)((char *)v77 + *v77) - 1;
        *(void *)&long long v362 = v355;
        *((void *)&v362 + 1) = &v356;
        long long v363 = 0u;
        v364[0] = 0u;
        LODWORD(v364[1]) = ((unint64_t)(v357 - (unsigned char *)v356) >> 3) - 1;
        DWORD1(v364[1]) = v77;
        BYTE8(v364[1]) = 1;
        sub_2E1D08((uint64_t)&v362);
        unint64_t v49 = (char *)v356;
        unint64_t v48 = v357;
        int v336 = v28;
        unint64_t v337 = v33;
        if (!v358) {
          goto LABEL_37;
        }
        goto LABEL_81;
      }
      if (v356 == v357)
      {
LABEL_36:
        double v43 = 0.0;
        long long v363 = 0u;
        memset(v364, 0, sizeof(v364));
        long long v362 = 0u;
        unint64_t v49 = (char *)v356;
        unint64_t v48 = v357;
        int v336 = v28;
        unint64_t v337 = v33;
        if (!v358) {
          goto LABEL_37;
        }
        goto LABEL_81;
      }
      uint64_t v42 = v355;
      *(void *)&long long v362 = v355;
      *((void *)&v362 + 1) = &v356;
      double v43 = 0.0;
      long long v363 = 0u;
      memset(v364, 0, 25);
      unint64_t v44 = *(void *)v356;
      DWORD2(v364[0]) = *(void *)v356;
      int v367 = 1;
      v368[0] = v44;
      v365 = &v367;
      v366 = v368;
      unint64_t v45 = *(void *)(v355 + 3856) + 1;
      *(void *)(v355 + 3856) = v45;
      if (!*(void *)v42)
      {
LABEL_97:
        sub_296654(&v365);
        long long v61 = 0;
        long long v62 = (_WORD *)(&loc_1120530 + 1);
        if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 7u) {
          goto LABEL_100;
        }
        goto LABEL_98;
      }
      uint64_t v46 = v42 + 16;
      if (*(_DWORD *)(v42 + 112) == v44)
      {
        unsigned int v47 = 4;
        goto LABEL_60;
      }
      if (*(_DWORD *)(v42 + 136) == v44)
      {
        unsigned int v47 = 5;
        goto LABEL_60;
      }
      if (*(_DWORD *)(v42 + 160) == v44)
      {
        unsigned int v47 = 6;
        goto LABEL_60;
      }
      if (*(_DWORD *)(v42 + 184) == v44)
      {
        unsigned int v47 = 7;
LABEL_60:
        ++*(void *)(v42 + 3864);
        uint64_t v59 = v46 + 24 * v47;
        *(void *)(v59 + 8) = v45;
        long long v60 = *(unsigned int **)(v59 + 16);
        if (!v60) {
          goto LABEL_97;
        }
        goto LABEL_61;
      }
      unint64_t v78 = *(void *)(v42 + 168);
      unint64_t v79 = *(void *)(v42 + 144);
      unint64_t v80 = *(void *)(v42 + 120);
      unint64_t v81 = *(void *)(v42 + 192);
      long long v60 = (unsigned int *)sub_2AB884(*(void *)v42, 1, v44, 1);
      if (v80 >= v45) {
        unint64_t v82 = v45;
      }
      else {
        unint64_t v82 = v80;
      }
      BOOL v83 = v79 >= v82;
      if (v79 < v82) {
        unint64_t v82 = v79;
      }
      unsigned int v84 = 4 * (v80 < v45);
      if (!v83) {
        unsigned int v84 = 5;
      }
      if (v78 < v82)
      {
        unsigned int v84 = 6;
        unint64_t v82 = v78;
      }
      if (v81 < v82) {
        unsigned int v84 = 7;
      }
      uint64_t v85 = v46 + 24 * v84;
      *(_DWORD *)uint64_t v85 = v368[0];
      *(void *)(v85 + 8) = *(void *)(v42 + 3856);
      *(void *)(v85 + 16) = v60;
      if (!v60) {
        goto LABEL_97;
      }
LABEL_61:
      long long v61 = (int *)((char *)v60 + *v60);
      long long v62 = (unsigned __int16 *)((char *)v61 - *v61);
      if (*v62 < 7u) {
        goto LABEL_100;
      }
LABEL_98:
      uint64_t v86 = v62[3];
      if (v86)
      {
        int v87 = *(int *)((char *)v61 + v86);
        goto LABEL_101;
      }
LABEL_100:
      int v87 = 0;
LABEL_101:
      HIDWORD(v364[0]) = v87;
      uint64_t v88 = v362;
      unsigned int v89 = DWORD2(v364[0]);
      int v367 = 1;
      v368[0] = DWORD2(v364[0]);
      v365 = &v367;
      v366 = v368;
      unint64_t v90 = *(void *)(v362 + 3856) + 1;
      *(void *)(v362 + 3856) = v90;
      if (!*(void *)v88) {
        goto LABEL_125;
      }
      uint64_t v91 = v88 + 16;
      if (*(_DWORD *)(v88 + 112) == v89)
      {
        unsigned int v92 = 4;
        goto LABEL_110;
      }
      if (*(_DWORD *)(v88 + 136) == v89)
      {
        unsigned int v92 = 5;
        goto LABEL_110;
      }
      if (*(_DWORD *)(v88 + 160) == v89)
      {
        unsigned int v92 = 6;
        goto LABEL_110;
      }
      if (*(_DWORD *)(v88 + 184) == v89)
      {
        unsigned int v92 = 7;
LABEL_110:
        ++*(void *)(v88 + 3864);
        uint64_t v93 = v91 + 24 * v92;
        *(void *)(v93 + 8) = v90;
        long long v94 = *(unsigned int **)(v93 + 16);
        if (!v94) {
          goto LABEL_125;
        }
        goto LABEL_111;
      }
      unint64_t v97 = *(void *)(v88 + 168);
      unint64_t v98 = *(void *)(v88 + 144);
      unint64_t v99 = *(void *)(v88 + 120);
      unint64_t v100 = *(void *)(v88 + 192);
      long long v94 = (unsigned int *)sub_2AB884(*(void *)v88, 1, v89, 1);
      if (v99 >= v90) {
        unint64_t v101 = v90;
      }
      else {
        unint64_t v101 = v99;
      }
      BOOL v102 = v98 >= v101;
      if (v98 < v101) {
        unint64_t v101 = v98;
      }
      unsigned int v103 = 4 * (v99 < v90);
      if (!v102) {
        unsigned int v103 = 5;
      }
      if (v97 < v101)
      {
        unsigned int v103 = 6;
        unint64_t v101 = v97;
      }
      if (v100 < v101) {
        unsigned int v103 = 7;
      }
      uint64_t v104 = v91 + 24 * v103;
      *(_DWORD *)uint64_t v104 = v368[0];
      *(void *)(v104 + 8) = *(void *)(v88 + 3856);
      *(void *)(v104 + 16) = v94;
      if (!v94)
      {
LABEL_125:
        sub_296654(&v365);
        unint64_t v95 = 0;
        unint64_t v96 = (_WORD *)(&loc_1120530 + 1);
        if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
          goto LABEL_128;
        }
        goto LABEL_126;
      }
LABEL_111:
      unint64_t v95 = (int *)((char *)v94 + *v94);
      unint64_t v96 = (unsigned __int16 *)((char *)v95 - *v95);
      if (*v96 < 5u) {
        goto LABEL_128;
      }
LABEL_126:
      uint64_t v105 = v96[2];
      if (v105)
      {
        unint64_t v106 = (char *)v95 + v105 + *(unsigned int *)((char *)v95 + v105);
        goto LABEL_129;
      }
LABEL_128:
      unint64_t v106 = 0;
LABEL_129:
      long long v107 = &v106[4 * HIDWORD(v44) + 4 + *(unsigned int *)&v106[4 * HIDWORD(v44) + 4]];
      *(void *)&long long v363 = v107;
      char v108 = &v107[-*(int *)v107];
      unsigned int v109 = *(unsigned __int16 *)v108;
      if (v109 <= 6)
      {
        *((void *)&v363 + 1) = 0;
        *(void *)&v364[0] = 0;
        unint64_t v49 = (char *)v356;
        unint64_t v48 = v357;
        int v336 = v28;
        unint64_t v337 = v33;
        if (!v358) {
          goto LABEL_37;
        }
      }
      else
      {
        uint64_t v110 = *((unsigned __int16 *)v108 + 3);
        if (*((_WORD *)v108 + 3)) {
          v110 += (uint64_t)&v107[*(unsigned int *)&v107[v110]];
        }
        *((void *)&v363 + 1) = v110;
        if (v109 >= 0xB)
        {
          uint64_t v111 = *((unsigned __int16 *)v108 + 5);
          if (v111)
          {
            *(void *)&v364[0] = &v107[v111 + *(unsigned int *)&v107[v111]];
            unint64_t v49 = (char *)v356;
            unint64_t v48 = v357;
            int v336 = v28;
            unint64_t v337 = v33;
            if (!v358) {
              goto LABEL_37;
            }
            goto LABEL_81;
          }
          *(void *)&v364[0] = 0;
          unint64_t v49 = (char *)v356;
          unint64_t v48 = v357;
          int v336 = v28;
          unint64_t v337 = v33;
          if (v358) {
            goto LABEL_81;
          }
LABEL_37:
          if (v49 == v48)
          {
            LODWORD(v55) = 0;
            unsigned int v339 = 0;
            goto LABEL_156;
          }
          unint64_t v50 = *((void *)v48 - 1);
          uint64_t v51 = v355;
          int v367 = 1;
          v368[0] = v50;
          v365 = &v367;
          v366 = v368;
          unint64_t v52 = *(void *)(v355 + 3856) + 1;
          *(void *)(v355 + 3856) = v52;
          if (!*(void *)v51) {
            goto LABEL_154;
          }
          uint64_t v53 = v51 + 16;
          if (*(_DWORD *)(v51 + 112) == v50)
          {
            unsigned int v54 = 4;
          }
          else if (*(_DWORD *)(v51 + 136) == v50)
          {
            unsigned int v54 = 5;
          }
          else if (*(_DWORD *)(v51 + 160) == v50)
          {
            unsigned int v54 = 6;
          }
          else
          {
            if (*(_DWORD *)(v51 + 184) != v50)
            {
              unint64_t v112 = *(void *)(v51 + 168);
              unint64_t v113 = *(void *)(v51 + 144);
              unint64_t v114 = *(void *)(v51 + 120);
              unint64_t v115 = *(void *)(v51 + 192);
              long long v64 = (unsigned int *)sub_2AB884(*(void *)v51, 1, v50, 1);
              if (v114 >= v52) {
                unint64_t v116 = v52;
              }
              else {
                unint64_t v116 = v114;
              }
              BOOL v117 = v113 >= v116;
              if (v113 < v116) {
                unint64_t v116 = v113;
              }
              unsigned int v118 = 4 * (v114 < v52);
              if (!v117) {
                unsigned int v118 = 5;
              }
              if (v112 < v116)
              {
                unsigned int v118 = 6;
                unint64_t v116 = v112;
              }
              if (v115 < v116) {
                unsigned int v118 = 7;
              }
              uint64_t v119 = v53 + 24 * v118;
              *(_DWORD *)uint64_t v119 = v368[0];
              *(void *)(v119 + 8) = *(void *)(v51 + 3856);
              *(void *)(v119 + 16) = v64;
              if (v64) {
                goto LABEL_66;
              }
              goto LABEL_154;
            }
            unsigned int v54 = 7;
          }
          ++*(void *)(v51 + 3864);
          uint64_t v63 = v53 + 24 * v54;
          *(void *)(v63 + 8) = v52;
          long long v64 = *(unsigned int **)(v63 + 16);
          if (v64)
          {
LABEL_66:
            long long v65 = (int *)((char *)v64 + *v64);
LABEL_155:
            long long v120 = (unsigned int *)((char *)v65 + *(unsigned __int16 *)((char *)v65 - *v65 + 4));
            uint64_t v121 = (uint64_t)&v120[HIDWORD(v50)] + *v120;
            unint64_t v122 = (int *)(v121 + 4 + *(unsigned int *)(v121 + 4));
            uint64_t v123 = (unsigned int *)((char *)v122 + *(unsigned __int16 *)((char *)v122 - *v122 + 6));
            unsigned int v339 = *(unsigned int *)((char *)v123 + *v123);
            unint64_t v55 = (unint64_t)(v357 - (unsigned char *)v356) >> 3;
            goto LABEL_156;
          }
LABEL_154:
          sub_296654(&v365);
          long long v65 = 0;
          goto LABEL_155;
        }
        *(void *)&v364[0] = 0;
        unint64_t v49 = (char *)v356;
        unint64_t v48 = v357;
        int v336 = v28;
        unint64_t v337 = v33;
        if (!v358) {
          goto LABEL_37;
        }
      }
LABEL_81:
      if (v49 == v48) {
        LODWORD(v55) = 0;
      }
      else {
        LODWORD(v55) = -1;
      }
      unsigned int v339 = v55;
LABEL_156:
      long long v124 = v362;
      unsigned int v349 = DWORD2(v364[0]);
      unint64_t v125 = LODWORD(v364[1]);
      int v350 = HIDWORD(v364[0]);
      unsigned int v126 = DWORD1(v364[1]);
      int v338 = BYTE8(v364[1]);
      v353 = 0;
      v354 = 0;
      long long __p = 0;
      if (*(void *)&v364[1] == __PAIR64__(v339, v55)) {
        goto LABEL_474;
      }
      v335 = (unsigned int *)*((void *)&v363 + 1);
      v345 = (int *)v363;
      int v346 = v55;
      uint64_t v351 = v362 + 16;
      if (!BYTE8(v364[1]))
      {
        unint64_t v127 = 0;
        uint64_t v169 = (char *)*((void *)&v363 + 1);
        int v170 = DWORD1(v364[1]);
        LODWORD(v171) = v364[1];
        while (1)
        {
          unint64_t v347 = v127;
          int v172 = v170 + 1;
          if ((v170 + 1) >= *(_DWORD *)v169)
          {
            uint64_t v175 = **((void **)&v124 + 1);
            unint64_t v171 = (v171 + 1);
            if (v171 < (uint64_t)(*(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1)) >> 3) {
              goto LABEL_240;
            }
LABEL_238:
            int v170 = v172;
            goto LABEL_301;
          }
          uint64_t v173 = &v169[4 * v170 + 4];
          unsigned int v174 = &v169[4 * v172 + 4];
          if (*(unsigned __int16 *)v173 != *(unsigned __int16 *)v174) {
            goto LABEL_238;
          }
          if (*((unsigned __int16 *)v173 + 1) != *((unsigned __int16 *)v174 + 1)) {
            goto LABEL_238;
          }
          uint64_t v175 = **((void **)&v124 + 1);
          uint64_t v176 = *(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1);
          if (*(_DWORD *)v169 == 2 && v176 == 8) {
            goto LABEL_238;
          }
          int v172 = v170 + 2;
          unint64_t v171 = (v171 + 1);
          if (v171 >= v176 >> 3) {
            goto LABEL_238;
          }
          while (1)
          {
LABEL_240:
            unint64_t v177 = *(void *)(v175 + 8 * v171);
            int v367 = 1;
            v368[0] = v177;
            v365 = &v367;
            v366 = v368;
            unint64_t v178 = *(void *)(v124 + 3856) + 1;
            *(void *)(v124 + 3856) = v178;
            if (!*(void *)v124) {
              goto LABEL_250;
            }
            if (*(_DWORD *)(v124 + 112) == v177)
            {
              unsigned int v179 = 4;
              goto LABEL_249;
            }
            if (*(_DWORD *)(v124 + 136) == v177)
            {
              unsigned int v179 = 5;
              goto LABEL_249;
            }
            if (*(_DWORD *)(v124 + 160) == v177)
            {
              unsigned int v179 = 6;
              goto LABEL_249;
            }
            if (*(_DWORD *)(v124 + 184) == v177)
            {
              unsigned int v179 = 7;
LABEL_249:
              ++*(void *)(v124 + 3864);
              uint64_t v180 = v351 + 24 * v179;
              *(void *)(v180 + 8) = v178;
              if (*(void *)(v180 + 16)) {
                goto LABEL_251;
              }
LABEL_250:
              sub_296654(&v365);
              goto LABEL_251;
            }
            unint64_t v187 = *(void *)(v124 + 168);
            unint64_t v188 = *(void *)(v124 + 144);
            unint64_t v189 = *(void *)(v124 + 120);
            unint64_t v342 = *(void *)(v124 + 192);
            uint64_t v190 = sub_2AB884(*(void *)v124, 1, v177, 1);
            if (v189 >= v178) {
              unint64_t v191 = v178;
            }
            else {
              unint64_t v191 = v189;
            }
            BOOL v192 = v188 >= v191;
            if (v188 < v191) {
              unint64_t v191 = v188;
            }
            unsigned int v193 = 4 * (v189 < v178);
            if (!v192) {
              unsigned int v193 = 5;
            }
            if (v187 < v191)
            {
              unsigned int v193 = 6;
              unint64_t v191 = v187;
            }
            if (v342 < v191) {
              unsigned int v193 = 7;
            }
            uint64_t v194 = v351 + 24 * v193;
            *(_DWORD *)uint64_t v194 = v368[0];
            *(void *)(v194 + 8) = *(void *)(v124 + 3856);
            *(void *)(v194 + 16) = v190;
            if (!v190) {
              goto LABEL_250;
            }
LABEL_251:
            int v367 = 1;
            v368[0] = v177;
            v365 = &v367;
            v366 = v368;
            unint64_t v181 = *(void *)(v124 + 3856) + 1;
            *(void *)(v124 + 3856) = v181;
            if (!*(void *)v124) {
              goto LABEL_288;
            }
            if (*(_DWORD *)(v124 + 112) == v177)
            {
              unsigned int v182 = 4;
              goto LABEL_260;
            }
            if (*(_DWORD *)(v124 + 136) == v177)
            {
              unsigned int v182 = 5;
              goto LABEL_260;
            }
            if (*(_DWORD *)(v124 + 160) == v177)
            {
              unsigned int v182 = 6;
              goto LABEL_260;
            }
            if (*(_DWORD *)(v124 + 184) == v177)
            {
              unsigned int v182 = 7;
LABEL_260:
              ++*(void *)(v124 + 3864);
              uint64_t v183 = v351 + 24 * v182;
              *(void *)(v183 + 8) = v181;
              int64_t v184 = *(unsigned int **)(v183 + 16);
              if (v184) {
                goto LABEL_261;
              }
              goto LABEL_288;
            }
            unint64_t v195 = *(void *)(v124 + 168);
            unint64_t v196 = *(void *)(v124 + 144);
            unint64_t v197 = *(void *)(v124 + 120);
            unint64_t v343 = *(void *)(v124 + 192);
            int64_t v184 = (unsigned int *)sub_2AB884(*(void *)v124, 1, v177, 1);
            if (v197 >= v181) {
              unint64_t v198 = v181;
            }
            else {
              unint64_t v198 = v197;
            }
            BOOL v199 = v196 >= v198;
            if (v196 < v198) {
              unint64_t v198 = v196;
            }
            unsigned int v200 = 4 * (v197 < v181);
            if (!v199) {
              unsigned int v200 = 5;
            }
            if (v195 < v198)
            {
              unsigned int v200 = 6;
              unint64_t v198 = v195;
            }
            if (v343 < v198) {
              unsigned int v200 = 7;
            }
            uint64_t v201 = v351 + 24 * v200;
            *(_DWORD *)uint64_t v201 = v368[0];
            *(void *)(v201 + 8) = *(void *)(v124 + 3856);
            *(void *)(v201 + 16) = v184;
            if (v184)
            {
LABEL_261:
              uint64_t v185 = (int *)((char *)v184 + *v184);
              unint64_t v186 = (unsigned __int16 *)((char *)v185 - *v185);
              if (*v186 < 5u) {
                goto LABEL_291;
              }
              goto LABEL_289;
            }
LABEL_288:
            sub_296654(&v365);
            uint64_t v185 = 0;
            unint64_t v186 = (_WORD *)(&loc_1120530 + 1);
            if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
              goto LABEL_291;
            }
LABEL_289:
            uint64_t v202 = v186[2];
            if (!v202)
            {
LABEL_291:
              uint64_t v203 = 0;
              goto LABEL_292;
            }
            uint64_t v203 = (char *)v185 + v202 + *(unsigned int *)((char *)v185 + v202);
LABEL_292:
            uint64_t v204 = &v203[4 * HIDWORD(v177) + 4 + *(unsigned int *)&v203[4 * HIDWORD(v177) + 4]];
            uint64_t v205 = &v204[-*(int *)v204];
            if (*(unsigned __int16 *)v205 < 7u) {
              break;
            }
            uint64_t v206 = *((unsigned __int16 *)v205 + 3);
            if (!v206) {
              break;
            }
            uint64_t v169 = &v204[v206 + *(unsigned int *)&v204[v206]];
            if (*((unsigned __int16 *)v169 + 2) != *((unsigned __int16 *)v169 + 4)
              || *((unsigned __int16 *)v169 + 3) != *((unsigned __int16 *)v169 + 5))
            {
              goto LABEL_300;
            }
            unint64_t v171 = (v171 + 1);
            uint64_t v175 = **((void **)&v124 + 1);
            if (v171 >= (uint64_t)(*(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1)) >> 3)
            {
              int v170 = 2;
              goto LABEL_301;
            }
          }
          uint64_t v169 = 0;
LABEL_300:
          int v170 = 1;
LABEL_301:
          ++v127;
          if (v171 == v346 && v170 == v339) {
            goto LABEL_303;
          }
        }
      }
      unint64_t v127 = 0;
      long long v128 = (unsigned int *)*((void *)&v363 + 1);
      unsigned int v129 = **((_DWORD **)&v363 + 1);
      unsigned int v130 = DWORD1(v364[1]);
      LODWORD(v131) = v364[1];
      do
      {
        unint64_t v347 = v127;
        unsigned int v132 = v130 - 1;
        if (v130 - 1 >= v129)
        {
          uint64_t v135 = **((void **)&v124 + 1);
          unint64_t v131 = (v131 - 1);
          if (v131 < (uint64_t)(*(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1)) >> 3) {
            goto LABEL_166;
          }
          goto LABEL_227;
        }
        long long v133 = &v128[v130 + 1];
        uint64_t v134 = &v128[v132 + 1];
        if (*(unsigned __int16 *)v133 != *(unsigned __int16 *)v134
          || *((unsigned __int16 *)v133 + 1) != *((unsigned __int16 *)v134 + 1))
        {
          goto LABEL_227;
        }
        uint64_t v135 = **((void **)&v124 + 1);
        uint64_t v136 = *(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1);
        if (v129 == 2 && v136 == 8)
        {
          unsigned int v129 = 2;
LABEL_227:
          unsigned int v130 = v132;
          goto LABEL_228;
        }
        unsigned int v132 = v130 - 2;
        unint64_t v131 = (v131 - 1);
        if (v131 >= v136 >> 3) {
          goto LABEL_227;
        }
        do
        {
LABEL_166:
          unint64_t v137 = *(void *)(v135 + 8 * v131);
          int v367 = 1;
          v368[0] = v137;
          v365 = &v367;
          v366 = v368;
          unint64_t v138 = *(void *)(v124 + 3856) + 1;
          *(void *)(v124 + 3856) = v138;
          if (!*(void *)v124) {
            goto LABEL_176;
          }
          if (*(_DWORD *)(v124 + 112) == v137)
          {
            unsigned int v139 = 4;
            goto LABEL_175;
          }
          if (*(_DWORD *)(v124 + 136) == v137)
          {
            unsigned int v139 = 5;
            goto LABEL_175;
          }
          if (*(_DWORD *)(v124 + 160) == v137)
          {
            unsigned int v139 = 6;
            goto LABEL_175;
          }
          if (*(_DWORD *)(v124 + 184) == v137)
          {
            unsigned int v139 = 7;
LABEL_175:
            ++*(void *)(v124 + 3864);
            uint64_t v140 = v351 + 24 * v139;
            *(void *)(v140 + 8) = v138;
            if (*(void *)(v140 + 16)) {
              goto LABEL_177;
            }
LABEL_176:
            sub_296654(&v365);
            goto LABEL_177;
          }
          unint64_t v147 = *(void *)(v124 + 168);
          unint64_t v148 = *(void *)(v124 + 144);
          unint64_t v149 = *(void *)(v124 + 120);
          unint64_t v340 = *(void *)(v124 + 192);
          uint64_t v150 = sub_2AB884(*(void *)v124, 1, v137, 1);
          if (v149 >= v138) {
            unint64_t v151 = v138;
          }
          else {
            unint64_t v151 = v149;
          }
          BOOL v152 = v148 >= v151;
          if (v148 < v151) {
            unint64_t v151 = v148;
          }
          unsigned int v153 = 4 * (v149 < v138);
          if (!v152) {
            unsigned int v153 = 5;
          }
          if (v147 < v151)
          {
            unsigned int v153 = 6;
            unint64_t v151 = v147;
          }
          if (v340 < v151) {
            unsigned int v153 = 7;
          }
          uint64_t v154 = v351 + 24 * v153;
          *(_DWORD *)uint64_t v154 = v368[0];
          *(void *)(v154 + 8) = *(void *)(v124 + 3856);
          *(void *)(v154 + 16) = v150;
          if (!v150) {
            goto LABEL_176;
          }
LABEL_177:
          int v367 = 1;
          v368[0] = v137;
          v365 = &v367;
          v366 = v368;
          unint64_t v141 = *(void *)(v124 + 3856) + 1;
          *(void *)(v124 + 3856) = v141;
          if (!*(void *)v124) {
            goto LABEL_214;
          }
          if (*(_DWORD *)(v124 + 112) == v137)
          {
            unsigned int v142 = 4;
            goto LABEL_186;
          }
          if (*(_DWORD *)(v124 + 136) == v137)
          {
            unsigned int v142 = 5;
            goto LABEL_186;
          }
          if (*(_DWORD *)(v124 + 160) == v137)
          {
            unsigned int v142 = 6;
            goto LABEL_186;
          }
          if (*(_DWORD *)(v124 + 184) == v137)
          {
            unsigned int v142 = 7;
LABEL_186:
            ++*(void *)(v124 + 3864);
            uint64_t v143 = v351 + 24 * v142;
            *(void *)(v143 + 8) = v141;
            uint64_t v144 = *(unsigned int **)(v143 + 16);
            if (v144) {
              goto LABEL_187;
            }
            goto LABEL_214;
          }
          unint64_t v155 = *(void *)(v124 + 168);
          unint64_t v156 = *(void *)(v124 + 144);
          unint64_t v157 = *(void *)(v124 + 120);
          unint64_t v341 = *(void *)(v124 + 192);
          uint64_t v144 = (unsigned int *)sub_2AB884(*(void *)v124, 1, v137, 1);
          if (v157 >= v141) {
            unint64_t v158 = v141;
          }
          else {
            unint64_t v158 = v157;
          }
          BOOL v159 = v156 >= v158;
          if (v156 < v158) {
            unint64_t v158 = v156;
          }
          unsigned int v160 = 4 * (v157 < v141);
          if (!v159) {
            unsigned int v160 = 5;
          }
          if (v155 < v158)
          {
            unsigned int v160 = 6;
            unint64_t v158 = v155;
          }
          if (v341 < v158) {
            unsigned int v160 = 7;
          }
          uint64_t v161 = v351 + 24 * v160;
          *(_DWORD *)uint64_t v161 = v368[0];
          *(void *)(v161 + 8) = *(void *)(v124 + 3856);
          *(void *)(v161 + 16) = v144;
          if (v144)
          {
LABEL_187:
            uint64_t v145 = (int *)((char *)v144 + *v144);
            unsigned int v146 = (unsigned __int16 *)((char *)v145 - *v145);
            if (*v146 < 5u) {
              goto LABEL_217;
            }
            goto LABEL_215;
          }
LABEL_214:
          sub_296654(&v365);
          uint64_t v145 = 0;
          unsigned int v146 = (_WORD *)(&loc_1120530 + 1);
          if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
            goto LABEL_217;
          }
LABEL_215:
          uint64_t v162 = v146[2];
          if (!v162)
          {
LABEL_217:
            __n128 v163 = 0;
            goto LABEL_218;
          }
          __n128 v163 = (char *)v145 + v162 + *(unsigned int *)((char *)v145 + v162);
LABEL_218:
          uint64_t v164 = &v163[4 * HIDWORD(v137) + 4 + *(unsigned int *)&v163[4 * HIDWORD(v137) + 4]];
          uint64_t v165 = &v164[-*(int *)v164];
          if (*(unsigned __int16 *)v165 >= 7u && (uint64_t v166 = *((unsigned __int16 *)v165 + 3)) != 0) {
            long long v128 = (unsigned int *)&v164[v166 + *(unsigned int *)&v164[v166]];
          }
          else {
            long long v128 = 0;
          }
          unsigned int v129 = *v128;
          unsigned int v130 = *v128 - 2;
          uint64_t v167 = &v128[*v128];
          long long v168 = &v128[v130 + 1];
          if (*(unsigned __int16 *)v167 != *(unsigned __int16 *)v168
            || *((unsigned __int16 *)v167 + 1) != *((unsigned __int16 *)v168 + 1))
          {
            goto LABEL_228;
          }
          unint64_t v131 = (v131 - 1);
          uint64_t v135 = **((void **)&v124 + 1);
        }
        while (v131 < (uint64_t)(*(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1)) >> 3);
        unsigned int v130 = v129 - 3;
LABEL_228:
        ++v127;
      }
      while (v131 != v346 || v130 != v339);
LABEL_303:
      if (v347 >= 0x1555555555555555) {
        sub_2E00();
      }
      long long __p = operator new(12 * v127);
      v353 = __p;
      v348 = __p;
      v354 = (char *)__p + 12 * v127;
      v207 = v335;
      unsigned int v208 = v126;
      while (2)
      {
        unint64_t v344 = v125;
        long long v209 = v207;
        long long v210 = v207 + 1;
        unsigned int v211 = v208;
        v212 = &v207[v208 + 1];
        int v213 = *(unsigned __int16 *)v212;
        int v214 = *((unsigned __int16 *)v212 + 1);
        unsigned int v215 = sub_511FC(v349);
        unsigned int v216 = v349 & ~(-1 << (v215 & 0xFE));
        int v217 = sub_51938(v216);
        int v218 = sub_51938(v216 >> 1);
        uint64_t v219 = v211;
        long long v220 = (unsigned __int16 *)((char *)v345 - *v345);
        unsigned int v221 = *v220;
        if (v221 < 0xD)
        {
          long long v222 = v348;
          if (v221 >= 0xB) {
            goto LABEL_309;
          }
LABEL_314:
          int v223 = 0x7FFFFFFF;
          goto LABEL_315;
        }
        long long v222 = v348;
        if (v220[6])
        {
          int v223 = *(int *)((char *)&v345[v219 + 1] + v220[6] + *(unsigned int *)((char *)v345 + v220[6]));
          goto LABEL_315;
        }
LABEL_309:
        if (!v220[5]) {
          goto LABEL_314;
        }
        int v224 = *(unsigned __int16 *)((char *)v345 + 2 * v219 + v220[5] + *(unsigned int *)((char *)v345 + v220[5]) + 4);
        if (v224 == 0xFFFF) {
          goto LABEL_314;
        }
        uint64_t v225 = v220[4];
        if (v225) {
          LODWORD(v225) = *(int *)((char *)v345 + v225);
        }
        int v223 = v350 + v224 + v225;
LABEL_315:
        int v226 = 1 << -(v215 >> 1);
        if (v215 < 2) {
          int v226 = -2;
        }
        LODWORD(v227) = v218 * v226 + 4 * v214;
        if (v227 >= 0xFFFFFFFE) {
          uint64_t v227 = 4294967294;
        }
        else {
          uint64_t v227 = v227;
        }
        *(void *)long long v222 = (v217 * v226 + 4 * v213) | (unint64_t)(v227 << 32);
        v222[2] = v223;
        unsigned int v228 = *v209;
        if (!v338)
        {
          unsigned int v208 = v219 + 1;
          if ((int)v219 + 1 >= v228)
          {
            uint64_t v233 = **((void **)&v124 + 1);
            v207 = v209;
            unint64_t v125 = (v344 + 1);
            if (v125 < (uint64_t)(*(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1)) >> 3) {
              goto LABEL_402;
            }
            goto LABEL_468;
          }
          BOOL v232 = &v210[v208];
          if (*(unsigned __int16 *)v212 != *(unsigned __int16 *)v232
            || *((unsigned __int16 *)v212 + 1) != *((unsigned __int16 *)v232 + 1))
          {
LABEL_334:
            int v235 = v346;
            v207 = v209;
            unint64_t v125 = v344;
            goto LABEL_469;
          }
          uint64_t v233 = **((void **)&v124 + 1);
          uint64_t v234 = *(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1);
          v207 = v209;
          if (v228 == 2 && v234 == 8) {
            goto LABEL_333;
          }
          unsigned int v208 = v219 + 2;
          unint64_t v125 = (v344 + 1);
          if (v125 >= v234 >> 3) {
            goto LABEL_468;
          }
LABEL_402:
          while (2)
          {
            unint64_t v273 = *(void *)(v233 + 8 * v125);
            int v367 = 1;
            v368[0] = v273;
            v365 = &v367;
            v366 = v368;
            unint64_t v274 = *(void *)(v124 + 3856) + 1;
            *(void *)(v124 + 3856) = v274;
            if (*(void *)v124)
            {
              if (*(_DWORD *)(v124 + 112) == v273)
              {
                unsigned int v275 = 4;
                goto LABEL_411;
              }
              if (*(_DWORD *)(v124 + 136) == v273)
              {
                unsigned int v275 = 5;
                goto LABEL_411;
              }
              if (*(_DWORD *)(v124 + 160) == v273)
              {
                unsigned int v275 = 6;
                goto LABEL_411;
              }
              if (*(_DWORD *)(v124 + 184) == v273)
              {
                unsigned int v275 = 7;
LABEL_411:
                ++*(void *)(v124 + 3864);
                uint64_t v276 = v351 + 24 * v275;
                *(void *)(v276 + 8) = v274;
                long long v277 = *(unsigned int **)(v276 + 16);
                if (v277)
                {
LABEL_412:
                  long long v278 = (int *)((char *)v277 + *v277);
                  uint64_t v279 = (unsigned __int16 *)((char *)v278 - *v278);
                  if (*v279 < 7u)
                  {
LABEL_429:
                    int v350 = 0;
                    goto LABEL_430;
                  }
LABEL_427:
                  uint64_t v288 = v279[3];
                  if (!v288) {
                    goto LABEL_429;
                  }
                  int v350 = *(int *)((char *)v278 + v288);
LABEL_430:
                  int v367 = 1;
                  v368[0] = v273;
                  v365 = &v367;
                  v366 = v368;
                  unint64_t v289 = *(void *)(v124 + 3856) + 1;
                  *(void *)(v124 + 3856) = v289;
                  if (*(void *)v124)
                  {
                    if (*(_DWORD *)(v124 + 112) == v273)
                    {
                      unsigned int v290 = 4;
                      goto LABEL_439;
                    }
                    if (*(_DWORD *)(v124 + 136) == v273)
                    {
                      unsigned int v290 = 5;
                      goto LABEL_439;
                    }
                    if (*(_DWORD *)(v124 + 160) == v273)
                    {
                      unsigned int v290 = 6;
                      goto LABEL_439;
                    }
                    if (*(_DWORD *)(v124 + 184) == v273)
                    {
                      unsigned int v290 = 7;
LABEL_439:
                      ++*(void *)(v124 + 3864);
                      uint64_t v291 = v351 + 24 * v290;
                      *(void *)(v291 + 8) = v289;
                      long long v292 = *(unsigned int **)(v291 + 16);
                      if (v292)
                      {
LABEL_440:
                        long long v293 = (int *)((char *)v292 + *v292);
                        long long v294 = (unsigned __int16 *)((char *)v293 - *v293);
                        if (*v294 < 5u)
                        {
LABEL_457:
                          v304 = 0;
                          goto LABEL_458;
                        }
LABEL_455:
                        uint64_t v303 = v294[2];
                        if (!v303) {
                          goto LABEL_457;
                        }
                        v304 = (char *)v293 + v303 + *(unsigned int *)((char *)v293 + v303);
LABEL_458:
                        v305 = &v304[4 * HIDWORD(v273) + 4 + *(unsigned int *)&v304[4 * HIDWORD(v273) + 4]];
                        v306 = &v305[-*(int *)v305];
                        if (*(unsigned __int16 *)v306 < 7u || (uint64_t v307 = *((unsigned __int16 *)v306 + 3)) == 0)
                        {
                          v207 = 0;
LABEL_467:
                          v345 = (int *)v305;
                          unsigned int v349 = v273;
                          unsigned int v208 = 1;
LABEL_468:
                          int v235 = v346;
                          goto LABEL_469;
                        }
                        v207 = (unsigned int *)&v305[v307 + *(unsigned int *)&v305[v307]];
                        if (*((unsigned __int16 *)v207 + 2) != *((unsigned __int16 *)v207 + 4)
                          || *((unsigned __int16 *)v207 + 3) != *((unsigned __int16 *)v207 + 5))
                        {
                          goto LABEL_467;
                        }
                        unint64_t v125 = (v125 + 1);
                        uint64_t v233 = **((void **)&v124 + 1);
                        if (v125 >= (uint64_t)(*(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1)) >> 3)
                        {
                          v345 = (int *)v305;
                          unsigned int v349 = v273;
                          unsigned int v208 = 2;
                          goto LABEL_468;
                        }
                        continue;
                      }
                    }
                    else
                    {
                      unint64_t v295 = *(void *)(v124 + 168);
                      unint64_t v296 = *(void *)(v124 + 144);
                      unint64_t v297 = *(void *)(v124 + 120);
                      unint64_t v298 = *(void *)(v124 + 192);
                      long long v292 = (unsigned int *)sub_2AB884(*(void *)v124, 1, v273, 1);
                      if (v297 >= v289) {
                        unint64_t v299 = v289;
                      }
                      else {
                        unint64_t v299 = v297;
                      }
                      BOOL v300 = v296 >= v299;
                      if (v296 < v299) {
                        unint64_t v299 = v296;
                      }
                      unsigned int v301 = 4 * (v297 < v289);
                      if (!v300) {
                        unsigned int v301 = 5;
                      }
                      if (v295 < v299)
                      {
                        unsigned int v301 = 6;
                        unint64_t v299 = v295;
                      }
                      if (v298 < v299) {
                        unsigned int v301 = 7;
                      }
                      uint64_t v302 = v351 + 24 * v301;
                      *(_DWORD *)uint64_t v302 = v368[0];
                      *(void *)(v302 + 8) = *(void *)(v124 + 3856);
                      *(void *)(v302 + 16) = v292;
                      if (v292) {
                        goto LABEL_440;
                      }
                    }
                  }
                  sub_296654(&v365);
                  long long v293 = 0;
                  long long v294 = (_WORD *)(&loc_1120530 + 1);
                  if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
                    goto LABEL_457;
                  }
                  goto LABEL_455;
                }
              }
              else
              {
                unint64_t v280 = *(void *)(v124 + 168);
                unint64_t v281 = *(void *)(v124 + 144);
                unint64_t v282 = *(void *)(v124 + 120);
                unint64_t v283 = *(void *)(v124 + 192);
                long long v277 = (unsigned int *)sub_2AB884(*(void *)v124, 1, v273, 1);
                if (v282 >= v274) {
                  unint64_t v284 = v274;
                }
                else {
                  unint64_t v284 = v282;
                }
                BOOL v285 = v281 >= v284;
                if (v281 < v284) {
                  unint64_t v284 = v281;
                }
                unsigned int v286 = 4 * (v282 < v274);
                if (!v285) {
                  unsigned int v286 = 5;
                }
                if (v280 < v284)
                {
                  unsigned int v286 = 6;
                  unint64_t v284 = v280;
                }
                if (v283 < v284) {
                  unsigned int v286 = 7;
                }
                uint64_t v287 = v351 + 24 * v286;
                *(_DWORD *)uint64_t v287 = v368[0];
                *(void *)(v287 + 8) = *(void *)(v124 + 3856);
                *(void *)(v287 + 16) = v277;
                if (v277) {
                  goto LABEL_412;
                }
              }
            }
            break;
          }
          sub_296654(&v365);
          long long v278 = 0;
          uint64_t v279 = (_WORD *)(&loc_1120530 + 1);
          if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 7u) {
            goto LABEL_429;
          }
          goto LABEL_427;
        }
        unsigned int v208 = v219 - 1;
        if ((int)v219 - 1 >= v228)
        {
          uint64_t v230 = **((void **)&v124 + 1);
          v207 = v209;
          unint64_t v125 = (v344 - 1);
          if (v125 >= (uint64_t)(*(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1)) >> 3) {
            goto LABEL_468;
          }
LABEL_336:
          while (2)
          {
            unint64_t v236 = *(void *)(v230 + 8 * v125);
            int v367 = 1;
            v368[0] = v236;
            v365 = &v367;
            v366 = v368;
            unint64_t v237 = *(void *)(v124 + 3856) + 1;
            *(void *)(v124 + 3856) = v237;
            if (*(void *)v124)
            {
              if (*(_DWORD *)(v124 + 112) == v236)
              {
                unsigned int v238 = 4;
                goto LABEL_345;
              }
              if (*(_DWORD *)(v124 + 136) == v236)
              {
                unsigned int v238 = 5;
                goto LABEL_345;
              }
              if (*(_DWORD *)(v124 + 160) == v236)
              {
                unsigned int v238 = 6;
                goto LABEL_345;
              }
              if (*(_DWORD *)(v124 + 184) == v236)
              {
                unsigned int v238 = 7;
LABEL_345:
                ++*(void *)(v124 + 3864);
                uint64_t v239 = v351 + 24 * v238;
                *(void *)(v239 + 8) = v237;
                uint64_t v240 = *(unsigned int **)(v239 + 16);
                if (v240)
                {
LABEL_346:
                  uint64_t v241 = (int *)((char *)v240 + *v240);
                  v242 = (unsigned __int16 *)((char *)v241 - *v241);
                  if (*v242 < 7u)
                  {
LABEL_363:
                    int v350 = 0;
                    goto LABEL_364;
                  }
LABEL_361:
                  uint64_t v251 = v242[3];
                  if (!v251) {
                    goto LABEL_363;
                  }
                  int v350 = *(int *)((char *)v241 + v251);
LABEL_364:
                  int v367 = 1;
                  v368[0] = v236;
                  v365 = &v367;
                  v366 = v368;
                  unint64_t v252 = *(void *)(v124 + 3856) + 1;
                  *(void *)(v124 + 3856) = v252;
                  if (*(void *)v124)
                  {
                    if (*(_DWORD *)(v124 + 112) == v236)
                    {
                      unsigned int v253 = 4;
                      goto LABEL_373;
                    }
                    if (*(_DWORD *)(v124 + 136) == v236)
                    {
                      unsigned int v253 = 5;
                      goto LABEL_373;
                    }
                    if (*(_DWORD *)(v124 + 160) == v236)
                    {
                      unsigned int v253 = 6;
                      goto LABEL_373;
                    }
                    if (*(_DWORD *)(v124 + 184) == v236)
                    {
                      unsigned int v253 = 7;
LABEL_373:
                      ++*(void *)(v124 + 3864);
                      uint64_t v254 = v351 + 24 * v253;
                      *(void *)(v254 + 8) = v252;
                      v255 = *(unsigned int **)(v254 + 16);
                      if (v255)
                      {
LABEL_374:
                        uint64_t v256 = (int *)((char *)v255 + *v255);
                        uint64_t v257 = (unsigned __int16 *)((char *)v256 - *v256);
                        if (*v257 < 5u)
                        {
LABEL_391:
                          unsigned int v267 = 0;
                          goto LABEL_392;
                        }
LABEL_389:
                        uint64_t v266 = v257[2];
                        if (!v266) {
                          goto LABEL_391;
                        }
                        unsigned int v267 = (char *)v256 + v266 + *(unsigned int *)((char *)v256 + v266);
LABEL_392:
                        BOOL v268 = &v267[4 * HIDWORD(v236) + 4 + *(unsigned int *)&v267[4 * HIDWORD(v236) + 4]];
                        long long v269 = &v268[-*(int *)v268];
                        if (*(unsigned __int16 *)v269 >= 7u && (uint64_t v270 = *((unsigned __int16 *)v269 + 3)) != 0) {
                          v207 = (unsigned int *)&v268[v270 + *(unsigned int *)&v268[v270]];
                        }
                        else {
                          v207 = 0;
                        }
                        v271 = &v207[*v207];
                        uint64_t v272 = &v207[*v207 - 1];
                        if (*(unsigned __int16 *)v271 != *(unsigned __int16 *)v272
                          || *((unsigned __int16 *)v271 + 1) != *((unsigned __int16 *)v272 + 1))
                        {
                          v345 = (int *)v268;
                          unsigned int v349 = v236;
                          int v235 = v346;
                          unsigned int v208 = *v207 - 2;
                          goto LABEL_469;
                        }
                        unint64_t v125 = (v125 - 1);
                        uint64_t v230 = **((void **)&v124 + 1);
                        if (v125 >= (uint64_t)(*(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1)) >> 3)
                        {
                          v345 = (int *)v268;
                          unsigned int v208 = *v207 - 3;
                          unsigned int v349 = v236;
                          goto LABEL_468;
                        }
                        continue;
                      }
                    }
                    else
                    {
                      unint64_t v258 = *(void *)(v124 + 168);
                      unint64_t v259 = *(void *)(v124 + 144);
                      unint64_t v260 = *(void *)(v124 + 120);
                      unint64_t v261 = *(void *)(v124 + 192);
                      v255 = (unsigned int *)sub_2AB884(*(void *)v124, 1, v236, 1);
                      if (v260 >= v252) {
                        unint64_t v262 = v252;
                      }
                      else {
                        unint64_t v262 = v260;
                      }
                      BOOL v263 = v259 >= v262;
                      if (v259 < v262) {
                        unint64_t v262 = v259;
                      }
                      unsigned int v264 = 4 * (v260 < v252);
                      if (!v263) {
                        unsigned int v264 = 5;
                      }
                      if (v258 < v262)
                      {
                        unsigned int v264 = 6;
                        unint64_t v262 = v258;
                      }
                      if (v261 < v262) {
                        unsigned int v264 = 7;
                      }
                      uint64_t v265 = v351 + 24 * v264;
                      *(_DWORD *)uint64_t v265 = v368[0];
                      *(void *)(v265 + 8) = *(void *)(v124 + 3856);
                      *(void *)(v265 + 16) = v255;
                      if (v255) {
                        goto LABEL_374;
                      }
                    }
                  }
                  sub_296654(&v365);
                  uint64_t v256 = 0;
                  uint64_t v257 = (_WORD *)(&loc_1120530 + 1);
                  if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
                    goto LABEL_391;
                  }
                  goto LABEL_389;
                }
              }
              else
              {
                unint64_t v243 = *(void *)(v124 + 168);
                unint64_t v244 = *(void *)(v124 + 144);
                unint64_t v245 = *(void *)(v124 + 120);
                unint64_t v246 = *(void *)(v124 + 192);
                uint64_t v240 = (unsigned int *)sub_2AB884(*(void *)v124, 1, v236, 1);
                if (v245 >= v237) {
                  unint64_t v247 = v237;
                }
                else {
                  unint64_t v247 = v245;
                }
                BOOL v248 = v244 >= v247;
                if (v244 < v247) {
                  unint64_t v247 = v244;
                }
                unsigned int v249 = 4 * (v245 < v237);
                if (!v248) {
                  unsigned int v249 = 5;
                }
                if (v243 < v247)
                {
                  unsigned int v249 = 6;
                  unint64_t v247 = v243;
                }
                if (v246 < v247) {
                  unsigned int v249 = 7;
                }
                uint64_t v250 = v351 + 24 * v249;
                *(_DWORD *)uint64_t v250 = v368[0];
                *(void *)(v250 + 8) = *(void *)(v124 + 3856);
                *(void *)(v250 + 16) = v240;
                if (v240) {
                  goto LABEL_346;
                }
              }
            }
            break;
          }
          sub_296654(&v365);
          uint64_t v241 = 0;
          v242 = (_WORD *)(&loc_1120530 + 1);
          if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 7u) {
            goto LABEL_363;
          }
          goto LABEL_361;
        }
        unsigned int v229 = &v210[v208];
        if (*(unsigned __int16 *)v212 != *(unsigned __int16 *)v229
          || *((unsigned __int16 *)v212 + 1) != *((unsigned __int16 *)v229 + 1))
        {
          goto LABEL_334;
        }
        uint64_t v230 = **((void **)&v124 + 1);
        uint64_t v231 = *(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1);
        v207 = v209;
        if (v228 != 2 || v231 != 8)
        {
          unsigned int v208 = v219 - 2;
          unint64_t v125 = (v344 - 1);
          if (v125 < v231 >> 3) {
            goto LABEL_336;
          }
          goto LABEL_468;
        }
LABEL_333:
        int v235 = v346;
        unint64_t v125 = v344;
LABEL_469:
        v348 = v222 + 3;
        if (v125 != v235 || v208 != v339) {
          continue;
        }
        break;
      }
      v353 = v222 + 3;
LABEL_474:
      uint64_t v7 = (uint64_t)v333;
      BOOL v308 = sub_358C68(v333, v337, (uint64_t)&__p, v43, v34, v35, v36);
      if (__p)
      {
        v353 = __p;
        operator delete(__p);
      }
      uint64_t v9 = a6;
      if (v308)
      {
        v309 = v360;
        if ((unint64_t)v360 >= v361)
        {
          uint64_t v311 = v360 - v359;
          if ((unint64_t)(v311 + 1) >> 60) {
            sub_2E00();
          }
          unint64_t v312 = (uint64_t)(v361 - (void)v359) >> 3;
          if (v312 <= v311 + 1) {
            unint64_t v312 = v311 + 1;
          }
          if (v361 - (unint64_t)v359 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v313 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v313 = v312;
          }
          if (v313)
          {
            if (v313 >> 60) {
              sub_188D718();
            }
            v314 = (char *)operator new(16 * v313);
          }
          else
          {
            v314 = 0;
          }
          v315 = (__n128 *)sub_358F6C((uint64_t)&v314[16 * v311], v336, (uint64_t)v333);
          v317 = v359;
          v316 = v360;
          v318 = v315;
          if (v360 != v359)
          {
            do
            {
              v318[-1] = v316[-1];
              --v318;
              --v316;
            }
            while (v316 != v317);
            v316 = v359;
          }
          v319 = &v314[16 * v313];
          v310 = v315 + 1;
          v359 = v318;
          v360 = v315 + 1;
          unint64_t v361 = (unint64_t)v319;
          if (v316) {
            operator delete(v316);
          }
        }
        else
        {
          sub_358F6C((uint64_t)v360, v336, (uint64_t)v333);
          v310 = v309 + 1;
        }
        v360 = v310;
        char v329 = 1;
      }
      if (v356)
      {
        v357 = (char *)v356;
        operator delete(v356);
      }
      unsigned int v28 = v336 + 1;
      char v32 = v336 + 1 == v334 || v308;
    }
    while ((v32 & 1) == 0);
    uint64_t v26 = v326;
    if (!(v329 & 1 | (v326 == v327))) {
      goto LABEL_16;
    }
LABEL_10:
    v7 += 184;
    if (v7 != v325)
    {
      BOOL v24 = sub_34658((_DWORD *)(v7 + 128), a4);
      continue;
    }
    break;
  }
  v320 = v360;
  if (v359 != v360)
  {
    sub_3F6A74(v359, v360, (uint64_t)&v362, 126 - 2 * __clz(v360 - v359), 1);
    *(void *)&long long v362 = **(void **)a5 + 648 * *(void *)(a5 + 8);
    uint64_t v355 = v362 + 480;
    unint64_t v321 = *(void *)(v9 + 8);
    if (v321 >= *(void *)(v9 + 16))
    {
      v322 = sub_3F7E3C((void **)v9, (uint64_t *)&v362, (uint64_t)&v359, &v355);
    }
    else
    {
      sub_358F78(*(void **)(v9 + 8), (uint64_t *)&v362, (uint64_t)&v359, &v355);
      v322 = (char *)(v321 + 40);
      *(void *)(v9 + 8) = v321 + 40;
    }
    *(void *)(v9 + 8) = v322;
    v320 = v359;
  }
  if (v320)
  {
    v360 = v320;
    operator delete(v320);
  }
}

void sub_3F0748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41)
{
  double v43 = *(void **)(v41 - 216);
  if (!v43) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v41 - 208) = v43;
  operator delete(v43);
  _Unwind_Resume(exception_object);
}

void sub_3F0824(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(unsigned char *)(a1 + 25) && (unsigned int v4 = (uint64_t *)a1, *(unsigned char *)(a1 + 29)) && (v5 = (void *)a2, sub_64F1E8(a2)))
  {
    double v35 = a3;
    uint64_t v46 = 0;
    unsigned int v47 = 0;
    unint64_t v48 = 0;
    long long __p = 0;
    unint64_t v44 = 0;
    uint64_t v45 = 0;
    long long v41 = xmmword_20B8E30;
    uint64_t v42 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v37 = sub_470ADC(v5);
    if (v37)
    {
      uint64_t v6 = 0;
      double v36 = v4;
      do
      {
        uint64_t v7 = v4[1];
        uint64_t v8 = v5;
        uint64_t v9 = (unsigned int *)sub_470B40(v5, v6);
        sub_295BE0(v7, (((unint64_t)(v9[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v9[1] << 32) | *v9) ^ 0x1000000000000, (unint64_t *)&__p);
        unsigned int v10 = (int *)__p;
        uint64_t v11 = v44;
        while (v10 != v11)
        {
          int v12 = *v10;
          int v40 = *v10;
          uint64_t v13 = v46;
          uint64_t v14 = v47;
          if (v46 == v47 || v12 != *(v47 - 2))
          {
            if ((unint64_t)v47 < v48)
            {
              *unsigned int v47 = v12;
              v14[1] = v6;
              BOOL v15 = v14 + 2;
LABEL_32:
              unsigned int v47 = v15;
              sub_383CC((unsigned int *)&v40, (uint64_t)&v38);
              sub_33998((uint64_t)&v41, (uint64_t)&v38);
              goto LABEL_8;
            }
            uint64_t v16 = ((char *)v47 - (char *)v46) >> 3;
            unint64_t v17 = v16 + 1;
            if ((unint64_t)(v16 + 1) >> 61) {
              sub_2E00();
            }
            uint64_t v18 = v48 - (void)v46;
            if ((uint64_t)(v48 - (void)v46) >> 2 > v17) {
              unint64_t v17 = v18 >> 2;
            }
            if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v19 = v17;
            }
            if (v19 >> 61) {
              sub_188D718();
            }
            uint64_t v20 = operator new(8 * v19);
            unint64_t v21 = (int *)&v20[8 * v16];
            int *v21 = v12;
            v21[1] = v6;
            if (v13 == v14)
            {
              BOOL v23 = (int *)&v20[8 * v16];
            }
            else
            {
              unint64_t v22 = (char *)(v14 - 2) - (char *)v13;
              if (v22 < 0x58)
              {
                BOOL v23 = (int *)&v20[8 * v16];
                goto LABEL_29;
              }
              BOOL v23 = (int *)&v20[8 * v16];
              if ((unint64_t)((char *)v13 - v20) < 0x20) {
                goto LABEL_48;
              }
              uint64_t v24 = (v22 >> 3) + 1;
              uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v26 = &v14[v25 / 0xFFFFFFFFFFFFFFFCLL];
              BOOL v23 = &v21[v25 / 0xFFFFFFFFFFFFFFFCLL];
              uint64_t v27 = &v20[8 * v16 - 16];
              unsigned int v28 = v14 - 4;
              uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v30 = *(_OWORD *)v28;
                *(v27 - 1) = *((_OWORD *)v28 - 1);
                *uint64_t v27 = v30;
                v27 -= 2;
                v28 -= 8;
                v29 -= 4;
              }
              while (v29);
              uint64_t v14 = v26;
              if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_48:
                do
                {
LABEL_29:
                  uint64_t v31 = *((void *)v14 - 1);
                  v14 -= 2;
                  *((void *)v23 - 1) = v31;
                  v23 -= 2;
                }
                while (v14 != v13);
              }
            }
            char v32 = &v20[8 * v19];
            BOOL v15 = v21 + 2;
            uint64_t v46 = v23;
            unsigned int v47 = v21 + 2;
            unint64_t v48 = (unint64_t)v32;
            if (v13) {
              operator delete(v13);
            }
            goto LABEL_32;
          }
LABEL_8:
          ++v10;
        }
        ++v6;
        unsigned int v4 = v36;
        unsigned int v5 = v8;
      }
      while (v6 != v37);
    }
    LODWORD(v38) = 0;
    int v40 = sub_470ADC(v5) - 1;
    sub_3EC418((uint64_t)&v46, &v38, &v40);
    sub_29AA4C(*v4, &v41, 2, &v38);
    double v34 = v38;
    uint64_t v33 = v39;
    v35[1] = 0;
    v35[2] = 0;
    *double v35 = 0;
    if (v34 != v33)
    {
      do
      {
        sub_3F0C34((uint64_t)v4, v5, (uint64_t *)&v46, &v41, (uint64_t)v34, (uint64_t)v35);
        v34 += 16;
      }
      while (v34 != v33);
      double v34 = v38;
    }
    if (v34)
    {
      unint64_t v39 = v34;
      operator delete(v34);
    }
    if (__p)
    {
      unint64_t v44 = (int *)__p;
      operator delete(__p);
    }
    if (v46)
    {
      unsigned int v47 = v46;
      operator delete(v46);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_3F0B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v24 = *(void **)(v22 - 104);
    if (!v24) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v24 = *(void **)(v22 - 104);
    if (!v24) {
      goto LABEL_3;
    }
  }
  *(void *)(v22 - 96) = v24;
  operator delete(v24);
  _Unwind_Resume(exception_object);
}

void sub_3F0C34(uint64_t a1, void *a2, uint64_t *a3, _DWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = **(void **)a5 + 648 * *(void *)(a5 + 8);
  uint64_t v7 = *(void *)(v6 + 456);
  uint64_t v8 = *(void *)(v6 + 464) - v7;
  if (v8 <= 183) {
    return;
  }
  uint64_t v9 = a6;
  unsigned int v10 = a4[3];
  uint64_t v11 = v7;
  if (v8 != 184)
  {
    unint64_t v12 = v8 / 0xB8uLL;
    uint64_t v11 = v7;
    do
    {
      uint64_t v13 = 184 * (v12 >> 2);
      _X14 = v11 + v13;
      __asm { PRFM            #0, [X14] }
      unint64_t v19 = v11 + 184 * (v12 >> 1);
      _X13 = v19 + v13;
      __asm { PRFM            #0, [X13] }
      if (*(_DWORD *)(v19 + 128) >= v10) {
        unint64_t v22 = 0;
      }
      else {
        unint64_t v22 = v12 >> 1;
      }
      v11 += 184 * v22;
      v12 -= v12 >> 1;
    }
    while ((uint64_t)v12 > 1);
  }
  BOOL v23 = *(_DWORD *)(v11 + 128) < v10;
  v360 = 0;
  unint64_t v361 = 0;
  unint64_t v362 = 0;
  uint64_t v326 = v11 + 184 * v23;
  if (v326 == v7) {
    return;
  }
  BOOL v24 = sub_34658((_DWORD *)(v7 + 128), a4);
  while (2)
  {
    if (!v24) {
      goto LABEL_10;
    }
    uint64_t v25 = *a3;
    uint64_t v328 = ((a3[1] - *a3) >> 3) - 1;
    if ((a3[1] - *a3) >> 3 == 1) {
      goto LABEL_10;
    }
    uint64_t v26 = 0;
    int v334 = (uint64_t *)v7;
    while (1)
    {
      uint64_t v27 = v26;
      if (!sub_358BA4(v7, *(_DWORD *)(v25 + 8 * v26)))
      {
        uint64_t v26 = v27 + 1;
        goto LABEL_498;
      }
      unsigned int v28 = *(_DWORD *)(*a3 + 8 * v27 + 4);
      uint64_t v26 = v27 + 1;
      int v29 = *(_DWORD *)(*a3 + 8 * (v27 + 1) + 4);
      unsigned int v30 = v29 + 1;
      int v31 = v28 <= v29 + 1 ? v29 + 1 : *(_DWORD *)(*a3 + 8 * v27 + 4);
      int v335 = v31;
      if (v28 < v30) {
        break;
      }
LABEL_498:
      if (v26 == v328) {
        goto LABEL_10;
      }
LABEL_16:
      uint64_t v25 = *a3;
    }
    uint64_t v327 = v27 + 1;
    char v330 = 0;
    do
    {
      uint64_t v33 = (unsigned int *)sub_470B40(a2, v28);
      unint64_t v34 = (((unint64_t)(v33[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v33[1] << 32) | *v33) ^ 0x1000000000000;
      sub_2954EC(*(void *)(a1 + 8), v34, (uint64_t)&v356);
      if (v359)
      {
        if (v357 == v358) {
          goto LABEL_36;
        }
        unint64_t v38 = *((void *)v358 - 1);
        uint64_t v39 = v356;
        int v368 = 1;
        v369[0] = v38;
        v366 = &v368;
        int v367 = v369;
        unint64_t v40 = *(void *)(v356 + 3856) + 1;
        *(void *)(v356 + 3856) = v40;
        if (!*(void *)v39) {
          goto LABEL_79;
        }
        uint64_t v41 = v39 + 16;
        if (*(_DWORD *)(v39 + 112) == v38)
        {
          unsigned int v42 = 4;
        }
        else if (*(_DWORD *)(v39 + 136) == v38)
        {
          unsigned int v42 = 5;
        }
        else if (*(_DWORD *)(v39 + 160) == v38)
        {
          unsigned int v42 = 6;
        }
        else
        {
          if (*(_DWORD *)(v39 + 184) != v38)
          {
            unint64_t v67 = *(void *)(v39 + 168);
            unint64_t v68 = *(void *)(v39 + 144);
            unint64_t v69 = *(void *)(v39 + 120);
            unint64_t v70 = *(void *)(v39 + 192);
            unint64_t v58 = (unsigned int *)sub_2AB884(*(void *)v39, 1, v38, 1);
            if (v69 >= v40) {
              unint64_t v71 = v40;
            }
            else {
              unint64_t v71 = v69;
            }
            _CF = v68 >= v71;
            if (v68 < v71) {
              unint64_t v71 = v68;
            }
            unsigned int v73 = 4 * (v69 < v40);
            if (!_CF) {
              unsigned int v73 = 5;
            }
            if (v67 < v71)
            {
              unsigned int v73 = 6;
              unint64_t v71 = v67;
            }
            if (v70 < v71) {
              unsigned int v73 = 7;
            }
            uint64_t v74 = v41 + 24 * v73;
            *(_DWORD *)uint64_t v74 = v369[0];
            *(void *)(v74 + 8) = *(void *)(v39 + 3856);
            *(void *)(v74 + 16) = v58;
            if (v58) {
              goto LABEL_57;
            }
            goto LABEL_79;
          }
          unsigned int v42 = 7;
        }
        ++*(void *)(v39 + 3864);
        uint64_t v57 = v41 + 24 * v42;
        *(void *)(v57 + 8) = v40;
        unint64_t v58 = *(unsigned int **)(v57 + 16);
        if (v58)
        {
LABEL_57:
          uint64_t v59 = (int *)((char *)v58 + *v58);
          goto LABEL_80;
        }
LABEL_79:
        sub_296654(&v366);
        uint64_t v59 = 0;
LABEL_80:
        uint64_t v75 = (unsigned int *)((char *)v59 + *(unsigned __int16 *)((char *)v59 - *v59 + 4));
        uint64_t v76 = (uint64_t)&v75[HIDWORD(v38)] + *v75;
        unint64_t v77 = (int *)(v76 + 4 + *(unsigned int *)(v76 + 4));
        unint64_t v78 = (unsigned int *)((char *)v77 + *(unsigned __int16 *)((char *)v77 - *v77 + 6));
        LODWORD(v78) = *(unsigned int *)((char *)v78 + *v78) - 1;
        *(void *)&long long v363 = v356;
        *((void *)&v363 + 1) = &v357;
        long long v364 = 0u;
        v365[0] = 0u;
        LODWORD(v365[1]) = ((unint64_t)(v358 - (unsigned char *)v357) >> 3) - 1;
        DWORD1(v365[1]) = v78;
        BYTE8(v365[1]) = 1;
        sub_2E1D08((uint64_t)&v363);
        unint64_t v50 = (char *)v357;
        unint64_t v49 = v358;
        int v337 = v28;
        unint64_t v338 = v34;
        if (!v359) {
          goto LABEL_37;
        }
        goto LABEL_81;
      }
      if (v357 == v358)
      {
LABEL_36:
        double v44 = 0.0;
        long long v364 = 0u;
        memset(v365, 0, sizeof(v365));
        long long v363 = 0u;
        unint64_t v50 = (char *)v357;
        unint64_t v49 = v358;
        int v337 = v28;
        unint64_t v338 = v34;
        if (!v359) {
          goto LABEL_37;
        }
        goto LABEL_81;
      }
      uint64_t v43 = v356;
      *(void *)&long long v363 = v356;
      *((void *)&v363 + 1) = &v357;
      double v44 = 0.0;
      long long v364 = 0u;
      memset(v365, 0, 25);
      unint64_t v45 = *(void *)v357;
      DWORD2(v365[0]) = *(void *)v357;
      int v368 = 1;
      v369[0] = v45;
      v366 = &v368;
      int v367 = v369;
      unint64_t v46 = *(void *)(v356 + 3856) + 1;
      *(void *)(v356 + 3856) = v46;
      if (!*(void *)v43)
      {
LABEL_97:
        sub_296654(&v366);
        long long v62 = 0;
        uint64_t v63 = (_WORD *)(&loc_1120530 + 1);
        if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 7u) {
          goto LABEL_100;
        }
        goto LABEL_98;
      }
      uint64_t v47 = v43 + 16;
      if (*(_DWORD *)(v43 + 112) == v45)
      {
        unsigned int v48 = 4;
        goto LABEL_60;
      }
      if (*(_DWORD *)(v43 + 136) == v45)
      {
        unsigned int v48 = 5;
        goto LABEL_60;
      }
      if (*(_DWORD *)(v43 + 160) == v45)
      {
        unsigned int v48 = 6;
        goto LABEL_60;
      }
      if (*(_DWORD *)(v43 + 184) == v45)
      {
        unsigned int v48 = 7;
LABEL_60:
        ++*(void *)(v43 + 3864);
        uint64_t v60 = v47 + 24 * v48;
        *(void *)(v60 + 8) = v46;
        long long v61 = *(unsigned int **)(v60 + 16);
        if (!v61) {
          goto LABEL_97;
        }
        goto LABEL_61;
      }
      unint64_t v79 = *(void *)(v43 + 168);
      unint64_t v80 = *(void *)(v43 + 144);
      unint64_t v81 = *(void *)(v43 + 120);
      unint64_t v82 = *(void *)(v43 + 192);
      long long v61 = (unsigned int *)sub_2AB884(*(void *)v43, 1, v45, 1);
      if (v81 >= v46) {
        unint64_t v83 = v46;
      }
      else {
        unint64_t v83 = v81;
      }
      BOOL v84 = v80 >= v83;
      if (v80 < v83) {
        unint64_t v83 = v80;
      }
      unsigned int v85 = 4 * (v81 < v46);
      if (!v84) {
        unsigned int v85 = 5;
      }
      if (v79 < v83)
      {
        unsigned int v85 = 6;
        unint64_t v83 = v79;
      }
      if (v82 < v83) {
        unsigned int v85 = 7;
      }
      uint64_t v86 = v47 + 24 * v85;
      *(_DWORD *)uint64_t v86 = v369[0];
      *(void *)(v86 + 8) = *(void *)(v43 + 3856);
      *(void *)(v86 + 16) = v61;
      if (!v61) {
        goto LABEL_97;
      }
LABEL_61:
      long long v62 = (int *)((char *)v61 + *v61);
      uint64_t v63 = (unsigned __int16 *)((char *)v62 - *v62);
      if (*v63 < 7u) {
        goto LABEL_100;
      }
LABEL_98:
      uint64_t v87 = v63[3];
      if (v87)
      {
        int v88 = *(int *)((char *)v62 + v87);
        goto LABEL_101;
      }
LABEL_100:
      int v88 = 0;
LABEL_101:
      HIDWORD(v365[0]) = v88;
      uint64_t v89 = v363;
      unsigned int v90 = DWORD2(v365[0]);
      int v368 = 1;
      v369[0] = DWORD2(v365[0]);
      v366 = &v368;
      int v367 = v369;
      unint64_t v91 = *(void *)(v363 + 3856) + 1;
      *(void *)(v363 + 3856) = v91;
      if (!*(void *)v89) {
        goto LABEL_125;
      }
      uint64_t v92 = v89 + 16;
      if (*(_DWORD *)(v89 + 112) == v90)
      {
        unsigned int v93 = 4;
        goto LABEL_110;
      }
      if (*(_DWORD *)(v89 + 136) == v90)
      {
        unsigned int v93 = 5;
        goto LABEL_110;
      }
      if (*(_DWORD *)(v89 + 160) == v90)
      {
        unsigned int v93 = 6;
        goto LABEL_110;
      }
      if (*(_DWORD *)(v89 + 184) == v90)
      {
        unsigned int v93 = 7;
LABEL_110:
        ++*(void *)(v89 + 3864);
        uint64_t v94 = v92 + 24 * v93;
        *(void *)(v94 + 8) = v91;
        unint64_t v95 = *(unsigned int **)(v94 + 16);
        if (!v95) {
          goto LABEL_125;
        }
        goto LABEL_111;
      }
      unint64_t v98 = *(void *)(v89 + 168);
      unint64_t v99 = *(void *)(v89 + 144);
      unint64_t v100 = *(void *)(v89 + 120);
      unint64_t v101 = *(void *)(v89 + 192);
      unint64_t v95 = (unsigned int *)sub_2AB884(*(void *)v89, 1, v90, 1);
      if (v100 >= v91) {
        unint64_t v102 = v91;
      }
      else {
        unint64_t v102 = v100;
      }
      BOOL v103 = v99 >= v102;
      if (v99 < v102) {
        unint64_t v102 = v99;
      }
      unsigned int v104 = 4 * (v100 < v91);
      if (!v103) {
        unsigned int v104 = 5;
      }
      if (v98 < v102)
      {
        unsigned int v104 = 6;
        unint64_t v102 = v98;
      }
      if (v101 < v102) {
        unsigned int v104 = 7;
      }
      uint64_t v105 = v92 + 24 * v104;
      *(_DWORD *)uint64_t v105 = v369[0];
      *(void *)(v105 + 8) = *(void *)(v89 + 3856);
      *(void *)(v105 + 16) = v95;
      if (!v95)
      {
LABEL_125:
        sub_296654(&v366);
        unint64_t v96 = 0;
        unint64_t v97 = (_WORD *)(&loc_1120530 + 1);
        if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
          goto LABEL_128;
        }
        goto LABEL_126;
      }
LABEL_111:
      unint64_t v96 = (int *)((char *)v95 + *v95);
      unint64_t v97 = (unsigned __int16 *)((char *)v96 - *v96);
      if (*v97 < 5u) {
        goto LABEL_128;
      }
LABEL_126:
      uint64_t v106 = v97[2];
      if (v106)
      {
        long long v107 = (char *)v96 + v106 + *(unsigned int *)((char *)v96 + v106);
        goto LABEL_129;
      }
LABEL_128:
      long long v107 = 0;
LABEL_129:
      char v108 = &v107[4 * HIDWORD(v45) + 4 + *(unsigned int *)&v107[4 * HIDWORD(v45) + 4]];
      *(void *)&long long v364 = v108;
      unsigned int v109 = &v108[-*(int *)v108];
      unsigned int v110 = *(unsigned __int16 *)v109;
      if (v110 <= 6)
      {
        *((void *)&v364 + 1) = 0;
        *(void *)&v365[0] = 0;
        unint64_t v50 = (char *)v357;
        unint64_t v49 = v358;
        int v337 = v28;
        unint64_t v338 = v34;
        if (!v359) {
          goto LABEL_37;
        }
      }
      else
      {
        uint64_t v111 = *((unsigned __int16 *)v109 + 3);
        if (*((_WORD *)v109 + 3)) {
          v111 += (uint64_t)&v108[*(unsigned int *)&v108[v111]];
        }
        *((void *)&v364 + 1) = v111;
        if (v110 >= 0xB)
        {
          uint64_t v112 = *((unsigned __int16 *)v109 + 5);
          if (v112)
          {
            *(void *)&v365[0] = &v108[v112 + *(unsigned int *)&v108[v112]];
            unint64_t v50 = (char *)v357;
            unint64_t v49 = v358;
            int v337 = v28;
            unint64_t v338 = v34;
            if (!v359) {
              goto LABEL_37;
            }
            goto LABEL_81;
          }
          *(void *)&v365[0] = 0;
          unint64_t v50 = (char *)v357;
          unint64_t v49 = v358;
          int v337 = v28;
          unint64_t v338 = v34;
          if (v359) {
            goto LABEL_81;
          }
LABEL_37:
          if (v50 == v49)
          {
            LODWORD(v56) = 0;
            unsigned int v340 = 0;
            goto LABEL_156;
          }
          unint64_t v51 = *((void *)v49 - 1);
          uint64_t v52 = v356;
          int v368 = 1;
          v369[0] = v51;
          v366 = &v368;
          int v367 = v369;
          unint64_t v53 = *(void *)(v356 + 3856) + 1;
          *(void *)(v356 + 3856) = v53;
          if (!*(void *)v52) {
            goto LABEL_154;
          }
          uint64_t v54 = v52 + 16;
          if (*(_DWORD *)(v52 + 112) == v51)
          {
            unsigned int v55 = 4;
          }
          else if (*(_DWORD *)(v52 + 136) == v51)
          {
            unsigned int v55 = 5;
          }
          else if (*(_DWORD *)(v52 + 160) == v51)
          {
            unsigned int v55 = 6;
          }
          else
          {
            if (*(_DWORD *)(v52 + 184) != v51)
            {
              unint64_t v113 = *(void *)(v52 + 168);
              unint64_t v114 = *(void *)(v52 + 144);
              unint64_t v115 = *(void *)(v52 + 120);
              unint64_t v116 = *(void *)(v52 + 192);
              long long v65 = (unsigned int *)sub_2AB884(*(void *)v52, 1, v51, 1);
              if (v115 >= v53) {
                unint64_t v117 = v53;
              }
              else {
                unint64_t v117 = v115;
              }
              BOOL v118 = v114 >= v117;
              if (v114 < v117) {
                unint64_t v117 = v114;
              }
              unsigned int v119 = 4 * (v115 < v53);
              if (!v118) {
                unsigned int v119 = 5;
              }
              if (v113 < v117)
              {
                unsigned int v119 = 6;
                unint64_t v117 = v113;
              }
              if (v116 < v117) {
                unsigned int v119 = 7;
              }
              uint64_t v120 = v54 + 24 * v119;
              *(_DWORD *)uint64_t v120 = v369[0];
              *(void *)(v120 + 8) = *(void *)(v52 + 3856);
              *(void *)(v120 + 16) = v65;
              if (v65) {
                goto LABEL_66;
              }
              goto LABEL_154;
            }
            unsigned int v55 = 7;
          }
          ++*(void *)(v52 + 3864);
          uint64_t v64 = v54 + 24 * v55;
          *(void *)(v64 + 8) = v53;
          long long v65 = *(unsigned int **)(v64 + 16);
          if (v65)
          {
LABEL_66:
            unint64_t v66 = (int *)((char *)v65 + *v65);
LABEL_155:
            uint64_t v121 = (unsigned int *)((char *)v66 + *(unsigned __int16 *)((char *)v66 - *v66 + 4));
            uint64_t v122 = (uint64_t)&v121[HIDWORD(v51)] + *v121;
            uint64_t v123 = (int *)(v122 + 4 + *(unsigned int *)(v122 + 4));
            long long v124 = (unsigned int *)((char *)v123 + *(unsigned __int16 *)((char *)v123 - *v123 + 6));
            unsigned int v340 = *(unsigned int *)((char *)v124 + *v124);
            unint64_t v56 = (unint64_t)(v358 - (unsigned char *)v357) >> 3;
            goto LABEL_156;
          }
LABEL_154:
          sub_296654(&v366);
          unint64_t v66 = 0;
          goto LABEL_155;
        }
        *(void *)&v365[0] = 0;
        unint64_t v50 = (char *)v357;
        unint64_t v49 = v358;
        int v337 = v28;
        unint64_t v338 = v34;
        if (!v359) {
          goto LABEL_37;
        }
      }
LABEL_81:
      if (v50 == v49) {
        LODWORD(v56) = 0;
      }
      else {
        LODWORD(v56) = -1;
      }
      unsigned int v340 = v56;
LABEL_156:
      long long v125 = v363;
      unsigned int v350 = DWORD2(v365[0]);
      unint64_t v126 = LODWORD(v365[1]);
      int v351 = HIDWORD(v365[0]);
      unsigned int v127 = DWORD1(v365[1]);
      int v339 = BYTE8(v365[1]);
      v354 = 0;
      uint64_t v355 = 0;
      long long __p = 0;
      if (*(void *)&v365[1] == __PAIR64__(v340, v56)) {
        goto LABEL_474;
      }
      int v336 = (unsigned int *)*((void *)&v364 + 1);
      int v346 = (int *)v364;
      int v347 = v56;
      uint64_t v352 = v363 + 16;
      if (!BYTE8(v365[1]))
      {
        unint64_t v128 = 0;
        int v170 = (char *)*((void *)&v364 + 1);
        int v171 = DWORD1(v365[1]);
        LODWORD(v172) = v365[1];
        while (1)
        {
          unint64_t v348 = v128;
          int v173 = v171 + 1;
          if ((v171 + 1) >= *(_DWORD *)v170)
          {
            uint64_t v176 = **((void **)&v125 + 1);
            unint64_t v172 = (v172 + 1);
            if (v172 < (uint64_t)(*(void *)(*((void *)&v125 + 1) + 8) - **((void **)&v125 + 1)) >> 3) {
              goto LABEL_240;
            }
LABEL_238:
            int v171 = v173;
            goto LABEL_301;
          }
          unsigned int v174 = &v170[4 * v171 + 4];
          uint64_t v175 = &v170[4 * v173 + 4];
          if (*(unsigned __int16 *)v174 != *(unsigned __int16 *)v175) {
            goto LABEL_238;
          }
          if (*((unsigned __int16 *)v174 + 1) != *((unsigned __int16 *)v175 + 1)) {
            goto LABEL_238;
          }
          uint64_t v176 = **((void **)&v125 + 1);
          uint64_t v177 = *(void *)(*((void *)&v125 + 1) + 8) - **((void **)&v125 + 1);
          if (*(_DWORD *)v170 == 2 && v177 == 8) {
            goto LABEL_238;
          }
          int v173 = v171 + 2;
          unint64_t v172 = (v172 + 1);
          if (v172 >= v177 >> 3) {
            goto LABEL_238;
          }
          while (1)
          {
LABEL_240:
            unint64_t v178 = *(void *)(v176 + 8 * v172);
            int v368 = 1;
            v369[0] = v178;
            v366 = &v368;
            int v367 = v369;
            unint64_t v179 = *(void *)(v125 + 3856) + 1;
            *(void *)(v125 + 3856) = v179;
            if (!*(void *)v125) {
              goto LABEL_250;
            }
            if (*(_DWORD *)(v125 + 112) == v178)
            {
              unsigned int v180 = 4;
              goto LABEL_249;
            }
            if (*(_DWORD *)(v125 + 136) == v178)
            {
              unsigned int v180 = 5;
              goto LABEL_249;
            }
            if (*(_DWORD *)(v125 + 160) == v178)
            {
              unsigned int v180 = 6;
              goto LABEL_249;
            }
            if (*(_DWORD *)(v125 + 184) == v178)
            {
              unsigned int v180 = 7;
LABEL_249:
              ++*(void *)(v125 + 3864);
              uint64_t v181 = v352 + 24 * v180;
              *(void *)(v181 + 8) = v179;
              if (*(void *)(v181 + 16)) {
                goto LABEL_251;
              }
LABEL_250:
              sub_296654(&v366);
              goto LABEL_251;
            }
            unint64_t v188 = *(void *)(v125 + 168);
            unint64_t v189 = *(void *)(v125 + 144);
            unint64_t v190 = *(void *)(v125 + 120);
            unint64_t v343 = *(void *)(v125 + 192);
            uint64_t v191 = sub_2AB884(*(void *)v125, 1, v178, 1);
            if (v190 >= v179) {
              unint64_t v192 = v179;
            }
            else {
              unint64_t v192 = v190;
            }
            BOOL v193 = v189 >= v192;
            if (v189 < v192) {
              unint64_t v192 = v189;
            }
            unsigned int v194 = 4 * (v190 < v179);
            if (!v193) {
              unsigned int v194 = 5;
            }
            if (v188 < v192)
            {
              unsigned int v194 = 6;
              unint64_t v192 = v188;
            }
            if (v343 < v192) {
              unsigned int v194 = 7;
            }
            uint64_t v195 = v352 + 24 * v194;
            *(_DWORD *)uint64_t v195 = v369[0];
            *(void *)(v195 + 8) = *(void *)(v125 + 3856);
            *(void *)(v195 + 16) = v191;
            if (!v191) {
              goto LABEL_250;
            }
LABEL_251:
            int v368 = 1;
            v369[0] = v178;
            v366 = &v368;
            int v367 = v369;
            unint64_t v182 = *(void *)(v125 + 3856) + 1;
            *(void *)(v125 + 3856) = v182;
            if (!*(void *)v125) {
              goto LABEL_288;
            }
            if (*(_DWORD *)(v125 + 112) == v178)
            {
              unsigned int v183 = 4;
              goto LABEL_260;
            }
            if (*(_DWORD *)(v125 + 136) == v178)
            {
              unsigned int v183 = 5;
              goto LABEL_260;
            }
            if (*(_DWORD *)(v125 + 160) == v178)
            {
              unsigned int v183 = 6;
              goto LABEL_260;
            }
            if (*(_DWORD *)(v125 + 184) == v178)
            {
              unsigned int v183 = 7;
LABEL_260:
              ++*(void *)(v125 + 3864);
              uint64_t v184 = v352 + 24 * v183;
              *(void *)(v184 + 8) = v182;
              uint64_t v185 = *(unsigned int **)(v184 + 16);
              if (v185) {
                goto LABEL_261;
              }
              goto LABEL_288;
            }
            unint64_t v196 = *(void *)(v125 + 168);
            unint64_t v197 = *(void *)(v125 + 144);
            unint64_t v198 = *(void *)(v125 + 120);
            unint64_t v344 = *(void *)(v125 + 192);
            uint64_t v185 = (unsigned int *)sub_2AB884(*(void *)v125, 1, v178, 1);
            if (v198 >= v182) {
              unint64_t v199 = v182;
            }
            else {
              unint64_t v199 = v198;
            }
            BOOL v200 = v197 >= v199;
            if (v197 < v199) {
              unint64_t v199 = v197;
            }
            unsigned int v201 = 4 * (v198 < v182);
            if (!v200) {
              unsigned int v201 = 5;
            }
            if (v196 < v199)
            {
              unsigned int v201 = 6;
              unint64_t v199 = v196;
            }
            if (v344 < v199) {
              unsigned int v201 = 7;
            }
            uint64_t v202 = v352 + 24 * v201;
            *(_DWORD *)uint64_t v202 = v369[0];
            *(void *)(v202 + 8) = *(void *)(v125 + 3856);
            *(void *)(v202 + 16) = v185;
            if (v185)
            {
LABEL_261:
              unint64_t v186 = (int *)((char *)v185 + *v185);
              unint64_t v187 = (unsigned __int16 *)((char *)v186 - *v186);
              if (*v187 < 5u) {
                goto LABEL_291;
              }
              goto LABEL_289;
            }
LABEL_288:
            sub_296654(&v366);
            unint64_t v186 = 0;
            unint64_t v187 = (_WORD *)(&loc_1120530 + 1);
            if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
              goto LABEL_291;
            }
LABEL_289:
            uint64_t v203 = v187[2];
            if (!v203)
            {
LABEL_291:
              uint64_t v204 = 0;
              goto LABEL_292;
            }
            uint64_t v204 = (char *)v186 + v203 + *(unsigned int *)((char *)v186 + v203);
LABEL_292:
            uint64_t v205 = &v204[4 * HIDWORD(v178) + 4 + *(unsigned int *)&v204[4 * HIDWORD(v178) + 4]];
            uint64_t v206 = &v205[-*(int *)v205];
            if (*(unsigned __int16 *)v206 < 7u) {
              break;
            }
            uint64_t v207 = *((unsigned __int16 *)v206 + 3);
            if (!v207) {
              break;
            }
            int v170 = &v205[v207 + *(unsigned int *)&v205[v207]];
            if (*((unsigned __int16 *)v170 + 2) != *((unsigned __int16 *)v170 + 4)
              || *((unsigned __int16 *)v170 + 3) != *((unsigned __int16 *)v170 + 5))
            {
              goto LABEL_300;
            }
            unint64_t v172 = (v172 + 1);
            uint64_t v176 = **((void **)&v125 + 1);
            if (v172 >= (uint64_t)(*(void *)(*((void *)&v125 + 1) + 8) - **((void **)&v125 + 1)) >> 3)
            {
              int v171 = 2;
              goto LABEL_301;
            }
          }
          int v170 = 0;
LABEL_300:
          int v171 = 1;
LABEL_301:
          ++v128;
          if (v172 == v347 && v171 == v340) {
            goto LABEL_303;
          }
        }
      }
      unint64_t v128 = 0;
      unsigned int v129 = (unsigned int *)*((void *)&v364 + 1);
      unsigned int v130 = **((_DWORD **)&v364 + 1);
      unsigned int v131 = DWORD1(v365[1]);
      LODWORD(v132) = v365[1];
      do
      {
        unint64_t v348 = v128;
        unsigned int v133 = v131 - 1;
        if (v131 - 1 >= v130)
        {
          uint64_t v136 = **((void **)&v125 + 1);
          unint64_t v132 = (v132 - 1);
          if (v132 < (uint64_t)(*(void *)(*((void *)&v125 + 1) + 8) - **((void **)&v125 + 1)) >> 3) {
            goto LABEL_166;
          }
          goto LABEL_227;
        }
        uint64_t v134 = &v129[v131 + 1];
        uint64_t v135 = &v129[v133 + 1];
        if (*(unsigned __int16 *)v134 != *(unsigned __int16 *)v135
          || *((unsigned __int16 *)v134 + 1) != *((unsigned __int16 *)v135 + 1))
        {
          goto LABEL_227;
        }
        uint64_t v136 = **((void **)&v125 + 1);
        uint64_t v137 = *(void *)(*((void *)&v125 + 1) + 8) - **((void **)&v125 + 1);
        if (v130 == 2 && v137 == 8)
        {
          unsigned int v130 = 2;
LABEL_227:
          unsigned int v131 = v133;
          goto LABEL_228;
        }
        unsigned int v133 = v131 - 2;
        unint64_t v132 = (v132 - 1);
        if (v132 >= v137 >> 3) {
          goto LABEL_227;
        }
        do
        {
LABEL_166:
          unint64_t v138 = *(void *)(v136 + 8 * v132);
          int v368 = 1;
          v369[0] = v138;
          v366 = &v368;
          int v367 = v369;
          unint64_t v139 = *(void *)(v125 + 3856) + 1;
          *(void *)(v125 + 3856) = v139;
          if (!*(void *)v125) {
            goto LABEL_176;
          }
          if (*(_DWORD *)(v125 + 112) == v138)
          {
            unsigned int v140 = 4;
            goto LABEL_175;
          }
          if (*(_DWORD *)(v125 + 136) == v138)
          {
            unsigned int v140 = 5;
            goto LABEL_175;
          }
          if (*(_DWORD *)(v125 + 160) == v138)
          {
            unsigned int v140 = 6;
            goto LABEL_175;
          }
          if (*(_DWORD *)(v125 + 184) == v138)
          {
            unsigned int v140 = 7;
LABEL_175:
            ++*(void *)(v125 + 3864);
            uint64_t v141 = v352 + 24 * v140;
            *(void *)(v141 + 8) = v139;
            if (*(void *)(v141 + 16)) {
              goto LABEL_177;
            }
LABEL_176:
            sub_296654(&v366);
            goto LABEL_177;
          }
          unint64_t v148 = *(void *)(v125 + 168);
          unint64_t v149 = *(void *)(v125 + 144);
          unint64_t v150 = *(void *)(v125 + 120);
          unint64_t v341 = *(void *)(v125 + 192);
          uint64_t v151 = sub_2AB884(*(void *)v125, 1, v138, 1);
          if (v150 >= v139) {
            unint64_t v152 = v139;
          }
          else {
            unint64_t v152 = v150;
          }
          BOOL v153 = v149 >= v152;
          if (v149 < v152) {
            unint64_t v152 = v149;
          }
          unsigned int v154 = 4 * (v150 < v139);
          if (!v153) {
            unsigned int v154 = 5;
          }
          if (v148 < v152)
          {
            unsigned int v154 = 6;
            unint64_t v152 = v148;
          }
          if (v341 < v152) {
            unsigned int v154 = 7;
          }
          uint64_t v155 = v352 + 24 * v154;
          *(_DWORD *)uint64_t v155 = v369[0];
          *(void *)(v155 + 8) = *(void *)(v125 + 3856);
          *(void *)(v155 + 16) = v151;
          if (!v151) {
            goto LABEL_176;
          }
LABEL_177:
          int v368 = 1;
          v369[0] = v138;
          v366 = &v368;
          int v367 = v369;
          unint64_t v142 = *(void *)(v125 + 3856) + 1;
          *(void *)(v125 + 3856) = v142;
          if (!*(void *)v125) {
            goto LABEL_214;
          }
          if (*(_DWORD *)(v125 + 112) == v138)
          {
            unsigned int v143 = 4;
            goto LABEL_186;
          }
          if (*(_DWORD *)(v125 + 136) == v138)
          {
            unsigned int v143 = 5;
            goto LABEL_186;
          }
          if (*(_DWORD *)(v125 + 160) == v138)
          {
            unsigned int v143 = 6;
            goto LABEL_186;
          }
          if (*(_DWORD *)(v125 + 184) == v138)
          {
            unsigned int v143 = 7;
LABEL_186:
            ++*(void *)(v125 + 3864);
            uint64_t v144 = v352 + 24 * v143;
            *(void *)(v144 + 8) = v142;
            uint64_t v145 = *(unsigned int **)(v144 + 16);
            if (v145) {
              goto LABEL_187;
            }
            goto LABEL_214;
          }
          unint64_t v156 = *(void *)(v125 + 168);
          unint64_t v157 = *(void *)(v125 + 144);
          unint64_t v158 = *(void *)(v125 + 120);
          unint64_t v342 = *(void *)(v125 + 192);
          uint64_t v145 = (unsigned int *)sub_2AB884(*(void *)v125, 1, v138, 1);
          if (v158 >= v142) {
            unint64_t v159 = v142;
          }
          else {
            unint64_t v159 = v158;
          }
          BOOL v160 = v157 >= v159;
          if (v157 < v159) {
            unint64_t v159 = v157;
          }
          unsigned int v161 = 4 * (v158 < v142);
          if (!v160) {
            unsigned int v161 = 5;
          }
          if (v156 < v159)
          {
            unsigned int v161 = 6;
            unint64_t v159 = v156;
          }
          if (v342 < v159) {
            unsigned int v161 = 7;
          }
          uint64_t v162 = v352 + 24 * v161;
          *(_DWORD *)uint64_t v162 = v369[0];
          *(void *)(v162 + 8) = *(void *)(v125 + 3856);
          *(void *)(v162 + 16) = v145;
          if (v145)
          {
LABEL_187:
            unsigned int v146 = (int *)((char *)v145 + *v145);
            unint64_t v147 = (unsigned __int16 *)((char *)v146 - *v146);
            if (*v147 < 5u) {
              goto LABEL_217;
            }
            goto LABEL_215;
          }
LABEL_214:
          sub_296654(&v366);
          unsigned int v146 = 0;
          unint64_t v147 = (_WORD *)(&loc_1120530 + 1);
          if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
            goto LABEL_217;
          }
LABEL_215:
          uint64_t v163 = v147[2];
          if (!v163)
          {
LABEL_217:
            uint64_t v164 = 0;
            goto LABEL_218;
          }
          uint64_t v164 = (char *)v146 + v163 + *(unsigned int *)((char *)v146 + v163);
LABEL_218:
          uint64_t v165 = &v164[4 * HIDWORD(v138) + 4 + *(unsigned int *)&v164[4 * HIDWORD(v138) + 4]];
          uint64_t v166 = &v165[-*(int *)v165];
          if (*(unsigned __int16 *)v166 >= 7u && (uint64_t v167 = *((unsigned __int16 *)v166 + 3)) != 0) {
            unsigned int v129 = (unsigned int *)&v165[v167 + *(unsigned int *)&v165[v167]];
          }
          else {
            unsigned int v129 = 0;
          }
          unsigned int v130 = *v129;
          unsigned int v131 = *v129 - 2;
          long long v168 = &v129[*v129];
          uint64_t v169 = &v129[v131 + 1];
          if (*(unsigned __int16 *)v168 != *(unsigned __int16 *)v169
            || *((unsigned __int16 *)v168 + 1) != *((unsigned __int16 *)v169 + 1))
          {
            goto LABEL_228;
          }
          unint64_t v132 = (v132 - 1);
          uint64_t v136 = **((void **)&v125 + 1);
        }
        while (v132 < (uint64_t)(*(void *)(*((void *)&v125 + 1) + 8) - **((void **)&v125 + 1)) >> 3);
        unsigned int v131 = v130 - 3;
LABEL_228:
        ++v128;
      }
      while (v132 != v347 || v131 != v340);
LABEL_303:
      if (v348 >= 0x1555555555555555) {
        sub_2E00();
      }
      long long __p = operator new(12 * v128);
      v354 = __p;
      unsigned int v349 = __p;
      uint64_t v355 = (char *)__p + 12 * v128;
      unsigned int v208 = v336;
      unsigned int v209 = v127;
      while (2)
      {
        unint64_t v345 = v126;
        long long v210 = v208;
        unsigned int v211 = v208 + 1;
        unsigned int v212 = v209;
        int v213 = &v208[v209 + 1];
        int v214 = *(unsigned __int16 *)v213;
        int v215 = *((unsigned __int16 *)v213 + 1);
        unsigned int v216 = sub_511FC(v350);
        unsigned int v217 = v350 & ~(-1 << (v216 & 0xFE));
        int v218 = sub_51938(v217);
        int v219 = sub_51938(v217 >> 1);
        uint64_t v220 = v212;
        unsigned int v221 = (unsigned __int16 *)((char *)v346 - *v346);
        unsigned int v222 = *v221;
        if (v222 < 0xD)
        {
          int v223 = v349;
          if (v222 >= 0xB) {
            goto LABEL_309;
          }
LABEL_314:
          int v224 = 0x7FFFFFFF;
          goto LABEL_315;
        }
        int v223 = v349;
        if (v221[6])
        {
          int v224 = *(int *)((char *)&v346[v220 + 1] + v221[6] + *(unsigned int *)((char *)v346 + v221[6]));
          goto LABEL_315;
        }
LABEL_309:
        if (!v221[5]) {
          goto LABEL_314;
        }
        int v225 = *(unsigned __int16 *)((char *)v346 + 2 * v220 + v221[5] + *(unsigned int *)((char *)v346 + v221[5]) + 4);
        if (v225 == 0xFFFF) {
          goto LABEL_314;
        }
        uint64_t v226 = v221[4];
        if (v226) {
          LODWORD(v226) = *(int *)((char *)v346 + v226);
        }
        int v224 = v351 + v225 + v226;
LABEL_315:
        int v227 = 1 << -(v216 >> 1);
        if (v216 < 2) {
          int v227 = -2;
        }
        LODWORD(v228) = v219 * v227 + 4 * v215;
        if (v228 >= 0xFFFFFFFE) {
          uint64_t v228 = 4294967294;
        }
        else {
          uint64_t v228 = v228;
        }
        *(void *)int v223 = (v218 * v227 + 4 * v214) | (unint64_t)(v228 << 32);
        v223[2] = v224;
        unsigned int v229 = *v210;
        if (!v339)
        {
          unsigned int v209 = v220 + 1;
          if ((int)v220 + 1 >= v229)
          {
            uint64_t v234 = **((void **)&v125 + 1);
            unsigned int v208 = v210;
            unint64_t v126 = (v345 + 1);
            if (v126 < (uint64_t)(*(void *)(*((void *)&v125 + 1) + 8) - **((void **)&v125 + 1)) >> 3) {
              goto LABEL_402;
            }
            goto LABEL_468;
          }
          uint64_t v233 = &v211[v209];
          if (*(unsigned __int16 *)v213 != *(unsigned __int16 *)v233
            || *((unsigned __int16 *)v213 + 1) != *((unsigned __int16 *)v233 + 1))
          {
LABEL_334:
            int v236 = v347;
            unsigned int v208 = v210;
            unint64_t v126 = v345;
            goto LABEL_469;
          }
          uint64_t v234 = **((void **)&v125 + 1);
          uint64_t v235 = *(void *)(*((void *)&v125 + 1) + 8) - **((void **)&v125 + 1);
          unsigned int v208 = v210;
          if (v229 == 2 && v235 == 8) {
            goto LABEL_333;
          }
          unsigned int v209 = v220 + 2;
          unint64_t v126 = (v345 + 1);
          if (v126 >= v235 >> 3) {
            goto LABEL_468;
          }
LABEL_402:
          while (2)
          {
            unint64_t v274 = *(void *)(v234 + 8 * v126);
            int v368 = 1;
            v369[0] = v274;
            v366 = &v368;
            int v367 = v369;
            unint64_t v275 = *(void *)(v125 + 3856) + 1;
            *(void *)(v125 + 3856) = v275;
            if (*(void *)v125)
            {
              if (*(_DWORD *)(v125 + 112) == v274)
              {
                unsigned int v276 = 4;
                goto LABEL_411;
              }
              if (*(_DWORD *)(v125 + 136) == v274)
              {
                unsigned int v276 = 5;
                goto LABEL_411;
              }
              if (*(_DWORD *)(v125 + 160) == v274)
              {
                unsigned int v276 = 6;
                goto LABEL_411;
              }
              if (*(_DWORD *)(v125 + 184) == v274)
              {
                unsigned int v276 = 7;
LABEL_411:
                ++*(void *)(v125 + 3864);
                uint64_t v277 = v352 + 24 * v276;
                *(void *)(v277 + 8) = v275;
                long long v278 = *(unsigned int **)(v277 + 16);
                if (v278)
                {
LABEL_412:
                  uint64_t v279 = (int *)((char *)v278 + *v278);
                  unint64_t v280 = (unsigned __int16 *)((char *)v279 - *v279);
                  if (*v280 < 7u)
                  {
LABEL_429:
                    int v351 = 0;
                    goto LABEL_430;
                  }
LABEL_427:
                  uint64_t v289 = v280[3];
                  if (!v289) {
                    goto LABEL_429;
                  }
                  int v351 = *(int *)((char *)v279 + v289);
LABEL_430:
                  int v368 = 1;
                  v369[0] = v274;
                  v366 = &v368;
                  int v367 = v369;
                  unint64_t v290 = *(void *)(v125 + 3856) + 1;
                  *(void *)(v125 + 3856) = v290;
                  if (*(void *)v125)
                  {
                    if (*(_DWORD *)(v125 + 112) == v274)
                    {
                      unsigned int v291 = 4;
                      goto LABEL_439;
                    }
                    if (*(_DWORD *)(v125 + 136) == v274)
                    {
                      unsigned int v291 = 5;
                      goto LABEL_439;
                    }
                    if (*(_DWORD *)(v125 + 160) == v274)
                    {
                      unsigned int v291 = 6;
                      goto LABEL_439;
                    }
                    if (*(_DWORD *)(v125 + 184) == v274)
                    {
                      unsigned int v291 = 7;
LABEL_439:
                      ++*(void *)(v125 + 3864);
                      uint64_t v292 = v352 + 24 * v291;
                      *(void *)(v292 + 8) = v290;
                      long long v293 = *(unsigned int **)(v292 + 16);
                      if (v293)
                      {
LABEL_440:
                        long long v294 = (int *)((char *)v293 + *v293);
                        unint64_t v295 = (unsigned __int16 *)((char *)v294 - *v294);
                        if (*v295 < 5u)
                        {
LABEL_457:
                          v305 = 0;
                          goto LABEL_458;
                        }
LABEL_455:
                        uint64_t v304 = v295[2];
                        if (!v304) {
                          goto LABEL_457;
                        }
                        v305 = (char *)v294 + v304 + *(unsigned int *)((char *)v294 + v304);
LABEL_458:
                        v306 = &v305[4 * HIDWORD(v274) + 4 + *(unsigned int *)&v305[4 * HIDWORD(v274) + 4]];
                        uint64_t v307 = &v306[-*(int *)v306];
                        if (*(unsigned __int16 *)v307 < 7u || (uint64_t v308 = *((unsigned __int16 *)v307 + 3)) == 0)
                        {
                          unsigned int v208 = 0;
LABEL_467:
                          int v346 = (int *)v306;
                          unsigned int v350 = v274;
                          unsigned int v209 = 1;
LABEL_468:
                          int v236 = v347;
                          goto LABEL_469;
                        }
                        unsigned int v208 = (unsigned int *)&v306[v308 + *(unsigned int *)&v306[v308]];
                        if (*((unsigned __int16 *)v208 + 2) != *((unsigned __int16 *)v208 + 4)
                          || *((unsigned __int16 *)v208 + 3) != *((unsigned __int16 *)v208 + 5))
                        {
                          goto LABEL_467;
                        }
                        unint64_t v126 = (v126 + 1);
                        uint64_t v234 = **((void **)&v125 + 1);
                        if (v126 >= (uint64_t)(*(void *)(*((void *)&v125 + 1) + 8) - **((void **)&v125 + 1)) >> 3)
                        {
                          int v346 = (int *)v306;
                          unsigned int v350 = v274;
                          unsigned int v209 = 2;
                          goto LABEL_468;
                        }
                        continue;
                      }
                    }
                    else
                    {
                      unint64_t v296 = *(void *)(v125 + 168);
                      unint64_t v297 = *(void *)(v125 + 144);
                      unint64_t v298 = *(void *)(v125 + 120);
                      unint64_t v299 = *(void *)(v125 + 192);
                      long long v293 = (unsigned int *)sub_2AB884(*(void *)v125, 1, v274, 1);
                      if (v298 >= v290) {
                        unint64_t v300 = v290;
                      }
                      else {
                        unint64_t v300 = v298;
                      }
                      BOOL v301 = v297 >= v300;
                      if (v297 < v300) {
                        unint64_t v300 = v297;
                      }
                      unsigned int v302 = 4 * (v298 < v290);
                      if (!v301) {
                        unsigned int v302 = 5;
                      }
                      if (v296 < v300)
                      {
                        unsigned int v302 = 6;
                        unint64_t v300 = v296;
                      }
                      if (v299 < v300) {
                        unsigned int v302 = 7;
                      }
                      uint64_t v303 = v352 + 24 * v302;
                      *(_DWORD *)uint64_t v303 = v369[0];
                      *(void *)(v303 + 8) = *(void *)(v125 + 3856);
                      *(void *)(v303 + 16) = v293;
                      if (v293) {
                        goto LABEL_440;
                      }
                    }
                  }
                  sub_296654(&v366);
                  long long v294 = 0;
                  unint64_t v295 = (_WORD *)(&loc_1120530 + 1);
                  if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
                    goto LABEL_457;
                  }
                  goto LABEL_455;
                }
              }
              else
              {
                unint64_t v281 = *(void *)(v125 + 168);
                unint64_t v282 = *(void *)(v125 + 144);
                unint64_t v283 = *(void *)(v125 + 120);
                unint64_t v284 = *(void *)(v125 + 192);
                long long v278 = (unsigned int *)sub_2AB884(*(void *)v125, 1, v274, 1);
                if (v283 >= v275) {
                  unint64_t v285 = v275;
                }
                else {
                  unint64_t v285 = v283;
                }
                BOOL v286 = v282 >= v285;
                if (v282 < v285) {
                  unint64_t v285 = v282;
                }
                unsigned int v287 = 4 * (v283 < v275);
                if (!v286) {
                  unsigned int v287 = 5;
                }
                if (v281 < v285)
                {
                  unsigned int v287 = 6;
                  unint64_t v285 = v281;
                }
                if (v284 < v285) {
                  unsigned int v287 = 7;
                }
                uint64_t v288 = v352 + 24 * v287;
                *(_DWORD *)uint64_t v288 = v369[0];
                *(void *)(v288 + 8) = *(void *)(v125 + 3856);
                *(void *)(v288 + 16) = v278;
                if (v278) {
                  goto LABEL_412;
                }
              }
            }
            break;
          }
          sub_296654(&v366);
          uint64_t v279 = 0;
          unint64_t v280 = (_WORD *)(&loc_1120530 + 1);
          if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 7u) {
            goto LABEL_429;
          }
          goto LABEL_427;
        }
        unsigned int v209 = v220 - 1;
        if ((int)v220 - 1 >= v229)
        {
          uint64_t v231 = **((void **)&v125 + 1);
          unsigned int v208 = v210;
          unint64_t v126 = (v345 - 1);
          if (v126 >= (uint64_t)(*(void *)(*((void *)&v125 + 1) + 8) - **((void **)&v125 + 1)) >> 3) {
            goto LABEL_468;
          }
LABEL_336:
          while (2)
          {
            unint64_t v237 = *(void *)(v231 + 8 * v126);
            int v368 = 1;
            v369[0] = v237;
            v366 = &v368;
            int v367 = v369;
            unint64_t v238 = *(void *)(v125 + 3856) + 1;
            *(void *)(v125 + 3856) = v238;
            if (*(void *)v125)
            {
              if (*(_DWORD *)(v125 + 112) == v237)
              {
                unsigned int v239 = 4;
                goto LABEL_345;
              }
              if (*(_DWORD *)(v125 + 136) == v237)
              {
                unsigned int v239 = 5;
                goto LABEL_345;
              }
              if (*(_DWORD *)(v125 + 160) == v237)
              {
                unsigned int v239 = 6;
                goto LABEL_345;
              }
              if (*(_DWORD *)(v125 + 184) == v237)
              {
                unsigned int v239 = 7;
LABEL_345:
                ++*(void *)(v125 + 3864);
                uint64_t v240 = v352 + 24 * v239;
                *(void *)(v240 + 8) = v238;
                uint64_t v241 = *(unsigned int **)(v240 + 16);
                if (v241)
                {
LABEL_346:
                  v242 = (int *)((char *)v241 + *v241);
                  unint64_t v243 = (unsigned __int16 *)((char *)v242 - *v242);
                  if (*v243 < 7u)
                  {
LABEL_363:
                    int v351 = 0;
                    goto LABEL_364;
                  }
LABEL_361:
                  uint64_t v252 = v243[3];
                  if (!v252) {
                    goto LABEL_363;
                  }
                  int v351 = *(int *)((char *)v242 + v252);
LABEL_364:
                  int v368 = 1;
                  v369[0] = v237;
                  v366 = &v368;
                  int v367 = v369;
                  unint64_t v253 = *(void *)(v125 + 3856) + 1;
                  *(void *)(v125 + 3856) = v253;
                  if (*(void *)v125)
                  {
                    if (*(_DWORD *)(v125 + 112) == v237)
                    {
                      unsigned int v254 = 4;
                      goto LABEL_373;
                    }
                    if (*(_DWORD *)(v125 + 136) == v237)
                    {
                      unsigned int v254 = 5;
                      goto LABEL_373;
                    }
                    if (*(_DWORD *)(v125 + 160) == v237)
                    {
                      unsigned int v254 = 6;
                      goto LABEL_373;
                    }
                    if (*(_DWORD *)(v125 + 184) == v237)
                    {
                      unsigned int v254 = 7;
LABEL_373:
                      ++*(void *)(v125 + 3864);
                      uint64_t v255 = v352 + 24 * v254;
                      *(void *)(v255 + 8) = v253;
                      uint64_t v256 = *(unsigned int **)(v255 + 16);
                      if (v256)
                      {
LABEL_374:
                        uint64_t v257 = (int *)((char *)v256 + *v256);
                        unint64_t v258 = (unsigned __int16 *)((char *)v257 - *v257);
                        if (*v258 < 5u)
                        {
LABEL_391:
                          BOOL v268 = 0;
                          goto LABEL_392;
                        }
LABEL_389:
                        uint64_t v267 = v258[2];
                        if (!v267) {
                          goto LABEL_391;
                        }
                        BOOL v268 = (char *)v257 + v267 + *(unsigned int *)((char *)v257 + v267);
LABEL_392:
                        long long v269 = &v268[4 * HIDWORD(v237) + 4 + *(unsigned int *)&v268[4 * HIDWORD(v237) + 4]];
                        uint64_t v270 = &v269[-*(int *)v269];
                        if (*(unsigned __int16 *)v270 >= 7u && (uint64_t v271 = *((unsigned __int16 *)v270 + 3)) != 0) {
                          unsigned int v208 = (unsigned int *)&v269[v271 + *(unsigned int *)&v269[v271]];
                        }
                        else {
                          unsigned int v208 = 0;
                        }
                        uint64_t v272 = &v208[*v208];
                        unint64_t v273 = &v208[*v208 - 1];
                        if (*(unsigned __int16 *)v272 != *(unsigned __int16 *)v273
                          || *((unsigned __int16 *)v272 + 1) != *((unsigned __int16 *)v273 + 1))
                        {
                          int v346 = (int *)v269;
                          unsigned int v350 = v237;
                          int v236 = v347;
                          unsigned int v209 = *v208 - 2;
                          goto LABEL_469;
                        }
                        unint64_t v126 = (v126 - 1);
                        uint64_t v231 = **((void **)&v125 + 1);
                        if (v126 >= (uint64_t)(*(void *)(*((void *)&v125 + 1) + 8) - **((void **)&v125 + 1)) >> 3)
                        {
                          int v346 = (int *)v269;
                          unsigned int v209 = *v208 - 3;
                          unsigned int v350 = v237;
                          goto LABEL_468;
                        }
                        continue;
                      }
                    }
                    else
                    {
                      unint64_t v259 = *(void *)(v125 + 168);
                      unint64_t v260 = *(void *)(v125 + 144);
                      unint64_t v261 = *(void *)(v125 + 120);
                      unint64_t v262 = *(void *)(v125 + 192);
                      uint64_t v256 = (unsigned int *)sub_2AB884(*(void *)v125, 1, v237, 1);
                      if (v261 >= v253) {
                        unint64_t v263 = v253;
                      }
                      else {
                        unint64_t v263 = v261;
                      }
                      BOOL v264 = v260 >= v263;
                      if (v260 < v263) {
                        unint64_t v263 = v260;
                      }
                      unsigned int v265 = 4 * (v261 < v253);
                      if (!v264) {
                        unsigned int v265 = 5;
                      }
                      if (v259 < v263)
                      {
                        unsigned int v265 = 6;
                        unint64_t v263 = v259;
                      }
                      if (v262 < v263) {
                        unsigned int v265 = 7;
                      }
                      uint64_t v266 = v352 + 24 * v265;
                      *(_DWORD *)uint64_t v266 = v369[0];
                      *(void *)(v266 + 8) = *(void *)(v125 + 3856);
                      *(void *)(v266 + 16) = v256;
                      if (v256) {
                        goto LABEL_374;
                      }
                    }
                  }
                  sub_296654(&v366);
                  uint64_t v257 = 0;
                  unint64_t v258 = (_WORD *)(&loc_1120530 + 1);
                  if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
                    goto LABEL_391;
                  }
                  goto LABEL_389;
                }
              }
              else
              {
                unint64_t v244 = *(void *)(v125 + 168);
                unint64_t v245 = *(void *)(v125 + 144);
                unint64_t v246 = *(void *)(v125 + 120);
                unint64_t v247 = *(void *)(v125 + 192);
                uint64_t v241 = (unsigned int *)sub_2AB884(*(void *)v125, 1, v237, 1);
                if (v246 >= v238) {
                  unint64_t v248 = v238;
                }
                else {
                  unint64_t v248 = v246;
                }
                BOOL v249 = v245 >= v248;
                if (v245 < v248) {
                  unint64_t v248 = v245;
                }
                unsigned int v250 = 4 * (v246 < v238);
                if (!v249) {
                  unsigned int v250 = 5;
                }
                if (v244 < v248)
                {
                  unsigned int v250 = 6;
                  unint64_t v248 = v244;
                }
                if (v247 < v248) {
                  unsigned int v250 = 7;
                }
                uint64_t v251 = v352 + 24 * v250;
                *(_DWORD *)uint64_t v251 = v369[0];
                *(void *)(v251 + 8) = *(void *)(v125 + 3856);
                *(void *)(v251 + 16) = v241;
                if (v241) {
                  goto LABEL_346;
                }
              }
            }
            break;
          }
          sub_296654(&v366);
          v242 = 0;
          unint64_t v243 = (_WORD *)(&loc_1120530 + 1);
          if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 7u) {
            goto LABEL_363;
          }
          goto LABEL_361;
        }
        uint64_t v230 = &v211[v209];
        if (*(unsigned __int16 *)v213 != *(unsigned __int16 *)v230
          || *((unsigned __int16 *)v213 + 1) != *((unsigned __int16 *)v230 + 1))
        {
          goto LABEL_334;
        }
        uint64_t v231 = **((void **)&v125 + 1);
        uint64_t v232 = *(void *)(*((void *)&v125 + 1) + 8) - **((void **)&v125 + 1);
        unsigned int v208 = v210;
        if (v229 != 2 || v232 != 8)
        {
          unsigned int v209 = v220 - 2;
          unint64_t v126 = (v345 - 1);
          if (v126 < v232 >> 3) {
            goto LABEL_336;
          }
          goto LABEL_468;
        }
LABEL_333:
        int v236 = v347;
        unint64_t v126 = v345;
LABEL_469:
        unsigned int v349 = v223 + 3;
        if (v126 != v236 || v209 != v340) {
          continue;
        }
        break;
      }
      v354 = v223 + 3;
LABEL_474:
      uint64_t v7 = (uint64_t)v334;
      BOOL v309 = sub_358C68(v334, v338, (uint64_t)&__p, v44, v35, v36, v37);
      if (__p)
      {
        v354 = __p;
        operator delete(__p);
      }
      uint64_t v9 = a6;
      if (v309)
      {
        v310 = v361;
        if ((unint64_t)v361 >= v362)
        {
          uint64_t v312 = v361 - v360;
          if ((unint64_t)(v312 + 1) >> 60) {
            sub_2E00();
          }
          unint64_t v313 = (uint64_t)(v362 - (void)v360) >> 3;
          if (v313 <= v312 + 1) {
            unint64_t v313 = v312 + 1;
          }
          if (v362 - (unint64_t)v360 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v314 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v314 = v313;
          }
          if (v314)
          {
            if (v314 >> 60) {
              sub_188D718();
            }
            v315 = (char *)operator new(16 * v314);
          }
          else
          {
            v315 = 0;
          }
          v316 = (__n128 *)sub_358F6C((uint64_t)&v315[16 * v312], v337, (uint64_t)v334);
          v318 = v360;
          v317 = v361;
          v319 = v316;
          if (v361 != v360)
          {
            do
            {
              v319[-1] = v317[-1];
              --v319;
              --v317;
            }
            while (v317 != v318);
            v317 = v360;
          }
          v320 = &v315[16 * v314];
          uint64_t v311 = v316 + 1;
          v360 = v319;
          unint64_t v361 = v316 + 1;
          unint64_t v362 = (unint64_t)v320;
          if (v317) {
            operator delete(v317);
          }
        }
        else
        {
          sub_358F6C((uint64_t)v361, v337, (uint64_t)v334);
          uint64_t v311 = v310 + 1;
        }
        unint64_t v361 = v311;
        char v330 = 1;
      }
      if (v357)
      {
        char v358 = (char *)v357;
        operator delete(v357);
      }
      unsigned int v28 = v337 + 1;
      char v32 = v337 + 1 == v335 || v309;
    }
    while ((v32 & 1) == 0);
    uint64_t v26 = v327;
    if (!(v330 & 1 | (v327 == v328))) {
      goto LABEL_16;
    }
LABEL_10:
    v7 += 184;
    if (v7 != v326)
    {
      BOOL v24 = sub_34658((_DWORD *)(v7 + 128), a4);
      continue;
    }
    break;
  }
  unint64_t v321 = v361;
  if (v360 != v361)
  {
    sub_3F6A74(v360, v361, (uint64_t)&v363, 126 - 2 * __clz(v361 - v360), 1);
    *(void *)&long long v363 = **(void **)a5 + 648 * *(void *)(a5 + 8);
    uint64_t v356 = v363 + 480;
    unint64_t v322 = *(void *)(v9 + 8);
    if (v322 >= *(void *)(v9 + 16))
    {
      v323 = sub_3F7E3C((void **)v9, (uint64_t *)&v363, (uint64_t)&v360, &v356);
    }
    else
    {
      sub_358F78(*(void **)(v9 + 8), (uint64_t *)&v363, (uint64_t)&v360, &v356);
      v323 = (char *)(v322 + 40);
      *(void *)(v9 + 8) = v322 + 40;
    }
    *(void *)(v9 + 8) = v323;
    unint64_t v321 = v360;
  }
  if (v321)
  {
    unint64_t v361 = v321;
    operator delete(v321);
  }
}

void sub_3F2A84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41)
{
  uint64_t v43 = *(void **)(v41 - 216);
  if (!v43) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v41 - 208) = v43;
  operator delete(v43);
  _Unwind_Resume(exception_object);
}

void sub_3F2B60(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(unsigned char *)(a1 + 25) && (unsigned int v4 = (uint64_t *)a1, *(unsigned char *)(a1 + 29)) && (v5 = (void *)a2, sub_64F1E8(a2)))
  {
    double v35 = a3;
    unint64_t v46 = 0;
    uint64_t v47 = 0;
    unint64_t v48 = 0;
    long long __p = 0;
    double v44 = 0;
    uint64_t v45 = 0;
    long long v41 = xmmword_20B8E30;
    uint64_t v42 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v37 = sub_46C760(v5);
    if (v37)
    {
      uint64_t v6 = 0;
      double v36 = v4;
      do
      {
        uint64_t v7 = v4[1];
        uint64_t v8 = v5;
        uint64_t v9 = sub_46C8EC(v5, v6);
        sub_295BE0(v7, *(void *)(v9 + 32), (unint64_t *)&__p);
        unsigned int v10 = (int *)__p;
        uint64_t v11 = v44;
        while (v10 != v11)
        {
          int v12 = *v10;
          int v40 = *v10;
          uint64_t v13 = v46;
          uint64_t v14 = v47;
          if (v46 == v47 || v12 != *(v47 - 2))
          {
            if ((unint64_t)v47 < v48)
            {
              *uint64_t v47 = v12;
              v14[1] = v6;
              BOOL v15 = v14 + 2;
LABEL_32:
              uint64_t v47 = v15;
              sub_383CC((unsigned int *)&v40, (uint64_t)&v38);
              sub_33998((uint64_t)&v41, (uint64_t)&v38);
              goto LABEL_8;
            }
            uint64_t v16 = ((char *)v47 - (char *)v46) >> 3;
            unint64_t v17 = v16 + 1;
            if ((unint64_t)(v16 + 1) >> 61) {
              sub_2E00();
            }
            uint64_t v18 = v48 - (void)v46;
            if ((uint64_t)(v48 - (void)v46) >> 2 > v17) {
              unint64_t v17 = v18 >> 2;
            }
            if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v19 = v17;
            }
            if (v19 >> 61) {
              sub_188D718();
            }
            uint64_t v20 = operator new(8 * v19);
            unint64_t v21 = (int *)&v20[8 * v16];
            int *v21 = v12;
            v21[1] = v6;
            if (v13 == v14)
            {
              BOOL v23 = (int *)&v20[8 * v16];
            }
            else
            {
              unint64_t v22 = (char *)(v14 - 2) - (char *)v13;
              if (v22 < 0x58)
              {
                BOOL v23 = (int *)&v20[8 * v16];
                goto LABEL_29;
              }
              BOOL v23 = (int *)&v20[8 * v16];
              if ((unint64_t)((char *)v13 - v20) < 0x20) {
                goto LABEL_48;
              }
              uint64_t v24 = (v22 >> 3) + 1;
              uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v26 = &v14[v25 / 0xFFFFFFFFFFFFFFFCLL];
              BOOL v23 = &v21[v25 / 0xFFFFFFFFFFFFFFFCLL];
              uint64_t v27 = &v20[8 * v16 - 16];
              unsigned int v28 = v14 - 4;
              uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v30 = *(_OWORD *)v28;
                *(v27 - 1) = *((_OWORD *)v28 - 1);
                *uint64_t v27 = v30;
                v27 -= 2;
                v28 -= 8;
                v29 -= 4;
              }
              while (v29);
              uint64_t v14 = v26;
              if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_48:
                do
                {
LABEL_29:
                  uint64_t v31 = *((void *)v14 - 1);
                  v14 -= 2;
                  *((void *)v23 - 1) = v31;
                  v23 -= 2;
                }
                while (v14 != v13);
              }
            }
            char v32 = &v20[8 * v19];
            BOOL v15 = v21 + 2;
            unint64_t v46 = v23;
            uint64_t v47 = v21 + 2;
            unint64_t v48 = (unint64_t)v32;
            if (v13) {
              operator delete(v13);
            }
            goto LABEL_32;
          }
LABEL_8:
          ++v10;
        }
        ++v6;
        unsigned int v4 = v36;
        unsigned int v5 = v8;
      }
      while (v6 != v37);
    }
    LODWORD(v38) = 0;
    int v40 = sub_46C760(v5) - 1;
    sub_3EC418((uint64_t)&v46, &v38, &v40);
    sub_29AA4C(*v4, &v41, 3, &v38);
    unint64_t v34 = v38;
    uint64_t v33 = v39;
    v35[1] = 0;
    v35[2] = 0;
    *double v35 = 0;
    if (v34 != v33)
    {
      do
      {
        sub_3F2F58((uint64_t)v4, v5, (uint64_t *)&v46, &v41, (uint64_t)v34, (uint64_t)v35);
        v34 += 16;
      }
      while (v34 != v33);
      unint64_t v34 = v38;
    }
    if (v34)
    {
      uint64_t v39 = v34;
      operator delete(v34);
    }
    if (__p)
    {
      double v44 = (int *)__p;
      operator delete(__p);
    }
    if (v46)
    {
      uint64_t v47 = v46;
      operator delete(v46);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_3F2E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v24 = *(void **)(v22 - 104);
    if (!v24) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v24 = *(void **)(v22 - 104);
    if (!v24) {
      goto LABEL_3;
    }
  }
  *(void *)(v22 - 96) = v24;
  operator delete(v24);
  _Unwind_Resume(exception_object);
}

void sub_3F2F58(uint64_t a1, void *a2, uint64_t *a3, _DWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = **(void **)a5 + 648 * *(void *)(a5 + 8);
  uint64_t v7 = *(void *)(v6 + 456);
  uint64_t v8 = *(void *)(v6 + 464) - v7;
  if (v8 <= 183) {
    return;
  }
  uint64_t v9 = a6;
  unsigned int v10 = a4[3];
  uint64_t v11 = v7;
  if (v8 != 184)
  {
    unint64_t v12 = v8 / 0xB8uLL;
    uint64_t v11 = v7;
    do
    {
      uint64_t v13 = 184 * (v12 >> 2);
      _X14 = v11 + v13;
      __asm { PRFM            #0, [X14] }
      unint64_t v19 = v11 + 184 * (v12 >> 1);
      _X13 = v19 + v13;
      __asm { PRFM            #0, [X13] }
      if (*(_DWORD *)(v19 + 128) >= v10) {
        unint64_t v22 = 0;
      }
      else {
        unint64_t v22 = v12 >> 1;
      }
      v11 += 184 * v22;
      v12 -= v12 >> 1;
    }
    while ((uint64_t)v12 > 1);
  }
  BOOL v23 = *(_DWORD *)(v11 + 128) < v10;
  char v359 = 0;
  v360 = 0;
  unint64_t v361 = 0;
  uint64_t v325 = v11 + 184 * v23;
  if (v325 == v7) {
    return;
  }
  BOOL v24 = sub_34658((_DWORD *)(v7 + 128), a4);
  while (2)
  {
    if (!v24) {
      goto LABEL_10;
    }
    uint64_t v25 = *a3;
    uint64_t v327 = ((a3[1] - *a3) >> 3) - 1;
    if ((a3[1] - *a3) >> 3 == 1) {
      goto LABEL_10;
    }
    uint64_t v26 = 0;
    v333 = (uint64_t *)v7;
    while (1)
    {
      uint64_t v27 = v26;
      if (!sub_358BA4(v7, *(_DWORD *)(v25 + 8 * v26)))
      {
        uint64_t v26 = v27 + 1;
        goto LABEL_498;
      }
      unsigned int v28 = *(_DWORD *)(*a3 + 8 * v27 + 4);
      uint64_t v26 = v27 + 1;
      int v29 = *(_DWORD *)(*a3 + 8 * (v27 + 1) + 4);
      unsigned int v30 = v29 + 1;
      int v31 = v28 <= v29 + 1 ? v29 + 1 : *(_DWORD *)(*a3 + 8 * v27 + 4);
      int v334 = v31;
      if (v28 < v30) {
        break;
      }
LABEL_498:
      if (v26 == v327) {
        goto LABEL_10;
      }
LABEL_16:
      uint64_t v25 = *a3;
    }
    uint64_t v326 = v27 + 1;
    char v329 = 0;
    do
    {
      uint64_t v33 = *(void *)(sub_46C8EC(a2, v28) + 32);
      sub_2954EC(*(void *)(a1 + 8), v33, (uint64_t)&v355);
      if (v358)
      {
        if (v356 == v357) {
          goto LABEL_36;
        }
        unint64_t v37 = *((void *)v357 - 1);
        uint64_t v38 = v355;
        int v367 = 1;
        v368[0] = v37;
        v365 = &v367;
        v366 = v368;
        unint64_t v39 = *(void *)(v355 + 3856) + 1;
        *(void *)(v355 + 3856) = v39;
        if (!*(void *)v38) {
          goto LABEL_79;
        }
        uint64_t v40 = v38 + 16;
        if (*(_DWORD *)(v38 + 112) == v37)
        {
          unsigned int v41 = 4;
        }
        else if (*(_DWORD *)(v38 + 136) == v37)
        {
          unsigned int v41 = 5;
        }
        else if (*(_DWORD *)(v38 + 160) == v37)
        {
          unsigned int v41 = 6;
        }
        else
        {
          if (*(_DWORD *)(v38 + 184) != v37)
          {
            unint64_t v66 = *(void *)(v38 + 168);
            unint64_t v67 = *(void *)(v38 + 144);
            unint64_t v68 = *(void *)(v38 + 120);
            unint64_t v69 = *(void *)(v38 + 192);
            uint64_t v57 = (unsigned int *)sub_2AB884(*(void *)v38, 1, v37, 1);
            if (v68 >= v39) {
              unint64_t v70 = v39;
            }
            else {
              unint64_t v70 = v68;
            }
            _CF = v67 >= v70;
            if (v67 < v70) {
              unint64_t v70 = v67;
            }
            unsigned int v72 = 4 * (v68 < v39);
            if (!_CF) {
              unsigned int v72 = 5;
            }
            if (v66 < v70)
            {
              unsigned int v72 = 6;
              unint64_t v70 = v66;
            }
            if (v69 < v70) {
              unsigned int v72 = 7;
            }
            uint64_t v73 = v40 + 24 * v72;
            *(_DWORD *)uint64_t v73 = v368[0];
            *(void *)(v73 + 8) = *(void *)(v38 + 3856);
            *(void *)(v73 + 16) = v57;
            if (v57) {
              goto LABEL_57;
            }
            goto LABEL_79;
          }
          unsigned int v41 = 7;
        }
        ++*(void *)(v38 + 3864);
        uint64_t v56 = v40 + 24 * v41;
        *(void *)(v56 + 8) = v39;
        uint64_t v57 = *(unsigned int **)(v56 + 16);
        if (v57)
        {
LABEL_57:
          unint64_t v58 = (int *)((char *)v57 + *v57);
          goto LABEL_80;
        }
LABEL_79:
        sub_296654(&v365);
        unint64_t v58 = 0;
LABEL_80:
        uint64_t v74 = (unsigned int *)((char *)v58 + *(unsigned __int16 *)((char *)v58 - *v58 + 4));
        uint64_t v75 = (uint64_t)&v74[HIDWORD(v37)] + *v74;
        uint64_t v76 = (int *)(v75 + 4 + *(unsigned int *)(v75 + 4));
        unint64_t v77 = (unsigned int *)((char *)v76 + *(unsigned __int16 *)((char *)v76 - *v76 + 6));
        LODWORD(v77) = *(unsigned int *)((char *)v77 + *v77) - 1;
        *(void *)&long long v362 = v355;
        *((void *)&v362 + 1) = &v356;
        long long v363 = 0u;
        v364[0] = 0u;
        LODWORD(v364[1]) = ((unint64_t)(v357 - (unsigned char *)v356) >> 3) - 1;
        DWORD1(v364[1]) = v77;
        BYTE8(v364[1]) = 1;
        sub_2E1D08((uint64_t)&v362);
        unint64_t v49 = (char *)v356;
        unint64_t v48 = v357;
        int v336 = v28;
        unint64_t v337 = v33;
        if (!v358) {
          goto LABEL_37;
        }
        goto LABEL_81;
      }
      if (v356 == v357)
      {
LABEL_36:
        double v43 = 0.0;
        long long v363 = 0u;
        memset(v364, 0, sizeof(v364));
        long long v362 = 0u;
        unint64_t v49 = (char *)v356;
        unint64_t v48 = v357;
        int v336 = v28;
        unint64_t v337 = v33;
        if (!v358) {
          goto LABEL_37;
        }
        goto LABEL_81;
      }
      uint64_t v42 = v355;
      *(void *)&long long v362 = v355;
      *((void *)&v362 + 1) = &v356;
      double v43 = 0.0;
      long long v363 = 0u;
      memset(v364, 0, 25);
      unint64_t v44 = *(void *)v356;
      DWORD2(v364[0]) = *(void *)v356;
      int v367 = 1;
      v368[0] = v44;
      v365 = &v367;
      v366 = v368;
      unint64_t v45 = *(void *)(v355 + 3856) + 1;
      *(void *)(v355 + 3856) = v45;
      if (!*(void *)v42)
      {
LABEL_97:
        sub_296654(&v365);
        long long v61 = 0;
        long long v62 = (_WORD *)(&loc_1120530 + 1);
        if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 7u) {
          goto LABEL_100;
        }
        goto LABEL_98;
      }
      uint64_t v46 = v42 + 16;
      if (*(_DWORD *)(v42 + 112) == v44)
      {
        unsigned int v47 = 4;
        goto LABEL_60;
      }
      if (*(_DWORD *)(v42 + 136) == v44)
      {
        unsigned int v47 = 5;
        goto LABEL_60;
      }
      if (*(_DWORD *)(v42 + 160) == v44)
      {
        unsigned int v47 = 6;
        goto LABEL_60;
      }
      if (*(_DWORD *)(v42 + 184) == v44)
      {
        unsigned int v47 = 7;
LABEL_60:
        ++*(void *)(v42 + 3864);
        uint64_t v59 = v46 + 24 * v47;
        *(void *)(v59 + 8) = v45;
        uint64_t v60 = *(unsigned int **)(v59 + 16);
        if (!v60) {
          goto LABEL_97;
        }
        goto LABEL_61;
      }
      unint64_t v78 = *(void *)(v42 + 168);
      unint64_t v79 = *(void *)(v42 + 144);
      unint64_t v80 = *(void *)(v42 + 120);
      unint64_t v81 = *(void *)(v42 + 192);
      uint64_t v60 = (unsigned int *)sub_2AB884(*(void *)v42, 1, v44, 1);
      if (v80 >= v45) {
        unint64_t v82 = v45;
      }
      else {
        unint64_t v82 = v80;
      }
      BOOL v83 = v79 >= v82;
      if (v79 < v82) {
        unint64_t v82 = v79;
      }
      unsigned int v84 = 4 * (v80 < v45);
      if (!v83) {
        unsigned int v84 = 5;
      }
      if (v78 < v82)
      {
        unsigned int v84 = 6;
        unint64_t v82 = v78;
      }
      if (v81 < v82) {
        unsigned int v84 = 7;
      }
      uint64_t v85 = v46 + 24 * v84;
      *(_DWORD *)uint64_t v85 = v368[0];
      *(void *)(v85 + 8) = *(void *)(v42 + 3856);
      *(void *)(v85 + 16) = v60;
      if (!v60) {
        goto LABEL_97;
      }
LABEL_61:
      long long v61 = (int *)((char *)v60 + *v60);
      long long v62 = (unsigned __int16 *)((char *)v61 - *v61);
      if (*v62 < 7u) {
        goto LABEL_100;
      }
LABEL_98:
      uint64_t v86 = v62[3];
      if (v86)
      {
        int v87 = *(int *)((char *)v61 + v86);
        goto LABEL_101;
      }
LABEL_100:
      int v87 = 0;
LABEL_101:
      HIDWORD(v364[0]) = v87;
      uint64_t v88 = v362;
      unsigned int v89 = DWORD2(v364[0]);
      int v367 = 1;
      v368[0] = DWORD2(v364[0]);
      v365 = &v367;
      v366 = v368;
      unint64_t v90 = *(void *)(v362 + 3856) + 1;
      *(void *)(v362 + 3856) = v90;
      if (!*(void *)v88) {
        goto LABEL_125;
      }
      uint64_t v91 = v88 + 16;
      if (*(_DWORD *)(v88 + 112) == v89)
      {
        unsigned int v92 = 4;
        goto LABEL_110;
      }
      if (*(_DWORD *)(v88 + 136) == v89)
      {
        unsigned int v92 = 5;
        goto LABEL_110;
      }
      if (*(_DWORD *)(v88 + 160) == v89)
      {
        unsigned int v92 = 6;
        goto LABEL_110;
      }
      if (*(_DWORD *)(v88 + 184) == v89)
      {
        unsigned int v92 = 7;
LABEL_110:
        ++*(void *)(v88 + 3864);
        uint64_t v93 = v91 + 24 * v92;
        *(void *)(v93 + 8) = v90;
        uint64_t v94 = *(unsigned int **)(v93 + 16);
        if (!v94) {
          goto LABEL_125;
        }
        goto LABEL_111;
      }
      unint64_t v97 = *(void *)(v88 + 168);
      unint64_t v98 = *(void *)(v88 + 144);
      unint64_t v99 = *(void *)(v88 + 120);
      unint64_t v100 = *(void *)(v88 + 192);
      uint64_t v94 = (unsigned int *)sub_2AB884(*(void *)v88, 1, v89, 1);
      if (v99 >= v90) {
        unint64_t v101 = v90;
      }
      else {
        unint64_t v101 = v99;
      }
      BOOL v102 = v98 >= v101;
      if (v98 < v101) {
        unint64_t v101 = v98;
      }
      unsigned int v103 = 4 * (v99 < v90);
      if (!v102) {
        unsigned int v103 = 5;
      }
      if (v97 < v101)
      {
        unsigned int v103 = 6;
        unint64_t v101 = v97;
      }
      if (v100 < v101) {
        unsigned int v103 = 7;
      }
      uint64_t v104 = v91 + 24 * v103;
      *(_DWORD *)uint64_t v104 = v368[0];
      *(void *)(v104 + 8) = *(void *)(v88 + 3856);
      *(void *)(v104 + 16) = v94;
      if (!v94)
      {
LABEL_125:
        sub_296654(&v365);
        unint64_t v95 = 0;
        unint64_t v96 = (_WORD *)(&loc_1120530 + 1);
        if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
          goto LABEL_128;
        }
        goto LABEL_126;
      }
LABEL_111:
      unint64_t v95 = (int *)((char *)v94 + *v94);
      unint64_t v96 = (unsigned __int16 *)((char *)v95 - *v95);
      if (*v96 < 5u) {
        goto LABEL_128;
      }
LABEL_126:
      uint64_t v105 = v96[2];
      if (v105)
      {
        uint64_t v106 = (char *)v95 + v105 + *(unsigned int *)((char *)v95 + v105);
        goto LABEL_129;
      }
LABEL_128:
      uint64_t v106 = 0;
LABEL_129:
      long long v107 = &v106[4 * HIDWORD(v44) + 4 + *(unsigned int *)&v106[4 * HIDWORD(v44) + 4]];
      *(void *)&long long v363 = v107;
      char v108 = &v107[-*(int *)v107];
      unsigned int v109 = *(unsigned __int16 *)v108;
      if (v109 <= 6)
      {
        *((void *)&v363 + 1) = 0;
        *(void *)&v364[0] = 0;
        unint64_t v49 = (char *)v356;
        unint64_t v48 = v357;
        int v336 = v28;
        unint64_t v337 = v33;
        if (!v358) {
          goto LABEL_37;
        }
      }
      else
      {
        uint64_t v110 = *((unsigned __int16 *)v108 + 3);
        if (*((_WORD *)v108 + 3)) {
          v110 += (uint64_t)&v107[*(unsigned int *)&v107[v110]];
        }
        *((void *)&v363 + 1) = v110;
        if (v109 >= 0xB)
        {
          uint64_t v111 = *((unsigned __int16 *)v108 + 5);
          if (v111)
          {
            *(void *)&v364[0] = &v107[v111 + *(unsigned int *)&v107[v111]];
            unint64_t v49 = (char *)v356;
            unint64_t v48 = v357;
            int v336 = v28;
            unint64_t v337 = v33;
            if (!v358) {
              goto LABEL_37;
            }
            goto LABEL_81;
          }
          *(void *)&v364[0] = 0;
          unint64_t v49 = (char *)v356;
          unint64_t v48 = v357;
          int v336 = v28;
          unint64_t v337 = v33;
          if (v358) {
            goto LABEL_81;
          }
LABEL_37:
          if (v49 == v48)
          {
            LODWORD(v55) = 0;
            unsigned int v339 = 0;
            goto LABEL_156;
          }
          unint64_t v50 = *((void *)v48 - 1);
          uint64_t v51 = v355;
          int v367 = 1;
          v368[0] = v50;
          v365 = &v367;
          v366 = v368;
          unint64_t v52 = *(void *)(v355 + 3856) + 1;
          *(void *)(v355 + 3856) = v52;
          if (!*(void *)v51) {
            goto LABEL_154;
          }
          uint64_t v53 = v51 + 16;
          if (*(_DWORD *)(v51 + 112) == v50)
          {
            unsigned int v54 = 4;
          }
          else if (*(_DWORD *)(v51 + 136) == v50)
          {
            unsigned int v54 = 5;
          }
          else if (*(_DWORD *)(v51 + 160) == v50)
          {
            unsigned int v54 = 6;
          }
          else
          {
            if (*(_DWORD *)(v51 + 184) != v50)
            {
              unint64_t v112 = *(void *)(v51 + 168);
              unint64_t v113 = *(void *)(v51 + 144);
              unint64_t v114 = *(void *)(v51 + 120);
              unint64_t v115 = *(void *)(v51 + 192);
              uint64_t v64 = (unsigned int *)sub_2AB884(*(void *)v51, 1, v50, 1);
              if (v114 >= v52) {
                unint64_t v116 = v52;
              }
              else {
                unint64_t v116 = v114;
              }
              BOOL v117 = v113 >= v116;
              if (v113 < v116) {
                unint64_t v116 = v113;
              }
              unsigned int v118 = 4 * (v114 < v52);
              if (!v117) {
                unsigned int v118 = 5;
              }
              if (v112 < v116)
              {
                unsigned int v118 = 6;
                unint64_t v116 = v112;
              }
              if (v115 < v116) {
                unsigned int v118 = 7;
              }
              uint64_t v119 = v53 + 24 * v118;
              *(_DWORD *)uint64_t v119 = v368[0];
              *(void *)(v119 + 8) = *(void *)(v51 + 3856);
              *(void *)(v119 + 16) = v64;
              if (v64) {
                goto LABEL_66;
              }
              goto LABEL_154;
            }
            unsigned int v54 = 7;
          }
          ++*(void *)(v51 + 3864);
          uint64_t v63 = v53 + 24 * v54;
          *(void *)(v63 + 8) = v52;
          uint64_t v64 = *(unsigned int **)(v63 + 16);
          if (v64)
          {
LABEL_66:
            long long v65 = (int *)((char *)v64 + *v64);
LABEL_155:
            uint64_t v120 = (unsigned int *)((char *)v65 + *(unsigned __int16 *)((char *)v65 - *v65 + 4));
            uint64_t v121 = (uint64_t)&v120[HIDWORD(v50)] + *v120;
            uint64_t v122 = (int *)(v121 + 4 + *(unsigned int *)(v121 + 4));
            uint64_t v123 = (unsigned int *)((char *)v122 + *(unsigned __int16 *)((char *)v122 - *v122 + 6));
            unsigned int v339 = *(unsigned int *)((char *)v123 + *v123);
            unint64_t v55 = (unint64_t)(v357 - (unsigned char *)v356) >> 3;
            goto LABEL_156;
          }
LABEL_154:
          sub_296654(&v365);
          long long v65 = 0;
          goto LABEL_155;
        }
        *(void *)&v364[0] = 0;
        unint64_t v49 = (char *)v356;
        unint64_t v48 = v357;
        int v336 = v28;
        unint64_t v337 = v33;
        if (!v358) {
          goto LABEL_37;
        }
      }
LABEL_81:
      if (v49 == v48) {
        LODWORD(v55) = 0;
      }
      else {
        LODWORD(v55) = -1;
      }
      unsigned int v339 = v55;
LABEL_156:
      long long v124 = v362;
      unsigned int v349 = DWORD2(v364[0]);
      unint64_t v125 = LODWORD(v364[1]);
      int v350 = HIDWORD(v364[0]);
      unsigned int v126 = DWORD1(v364[1]);
      int v338 = BYTE8(v364[1]);
      v353 = 0;
      v354 = 0;
      long long __p = 0;
      if (*(void *)&v364[1] == __PAIR64__(v339, v55)) {
        goto LABEL_474;
      }
      int v335 = (unsigned int *)*((void *)&v363 + 1);
      unint64_t v345 = (int *)v363;
      int v346 = v55;
      uint64_t v351 = v362 + 16;
      if (!BYTE8(v364[1]))
      {
        unint64_t v127 = 0;
        uint64_t v169 = (char *)*((void *)&v363 + 1);
        int v170 = DWORD1(v364[1]);
        LODWORD(v171) = v364[1];
        while (1)
        {
          unint64_t v347 = v127;
          int v172 = v170 + 1;
          if ((v170 + 1) >= *(_DWORD *)v169)
          {
            uint64_t v175 = **((void **)&v124 + 1);
            unint64_t v171 = (v171 + 1);
            if (v171 < (uint64_t)(*(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1)) >> 3) {
              goto LABEL_240;
            }
LABEL_238:
            int v170 = v172;
            goto LABEL_301;
          }
          int v173 = &v169[4 * v170 + 4];
          unsigned int v174 = &v169[4 * v172 + 4];
          if (*(unsigned __int16 *)v173 != *(unsigned __int16 *)v174) {
            goto LABEL_238;
          }
          if (*((unsigned __int16 *)v173 + 1) != *((unsigned __int16 *)v174 + 1)) {
            goto LABEL_238;
          }
          uint64_t v175 = **((void **)&v124 + 1);
          uint64_t v176 = *(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1);
          if (*(_DWORD *)v169 == 2 && v176 == 8) {
            goto LABEL_238;
          }
          int v172 = v170 + 2;
          unint64_t v171 = (v171 + 1);
          if (v171 >= v176 >> 3) {
            goto LABEL_238;
          }
          while (1)
          {
LABEL_240:
            unint64_t v177 = *(void *)(v175 + 8 * v171);
            int v367 = 1;
            v368[0] = v177;
            v365 = &v367;
            v366 = v368;
            unint64_t v178 = *(void *)(v124 + 3856) + 1;
            *(void *)(v124 + 3856) = v178;
            if (!*(void *)v124) {
              goto LABEL_250;
            }
            if (*(_DWORD *)(v124 + 112) == v177)
            {
              unsigned int v179 = 4;
              goto LABEL_249;
            }
            if (*(_DWORD *)(v124 + 136) == v177)
            {
              unsigned int v179 = 5;
              goto LABEL_249;
            }
            if (*(_DWORD *)(v124 + 160) == v177)
            {
              unsigned int v179 = 6;
              goto LABEL_249;
            }
            if (*(_DWORD *)(v124 + 184) == v177)
            {
              unsigned int v179 = 7;
LABEL_249:
              ++*(void *)(v124 + 3864);
              uint64_t v180 = v351 + 24 * v179;
              *(void *)(v180 + 8) = v178;
              if (*(void *)(v180 + 16)) {
                goto LABEL_251;
              }
LABEL_250:
              sub_296654(&v365);
              goto LABEL_251;
            }
            unint64_t v187 = *(void *)(v124 + 168);
            unint64_t v188 = *(void *)(v124 + 144);
            unint64_t v189 = *(void *)(v124 + 120);
            unint64_t v342 = *(void *)(v124 + 192);
            uint64_t v190 = sub_2AB884(*(void *)v124, 1, v177, 1);
            if (v189 >= v178) {
              unint64_t v191 = v178;
            }
            else {
              unint64_t v191 = v189;
            }
            BOOL v192 = v188 >= v191;
            if (v188 < v191) {
              unint64_t v191 = v188;
            }
            unsigned int v193 = 4 * (v189 < v178);
            if (!v192) {
              unsigned int v193 = 5;
            }
            if (v187 < v191)
            {
              unsigned int v193 = 6;
              unint64_t v191 = v187;
            }
            if (v342 < v191) {
              unsigned int v193 = 7;
            }
            uint64_t v194 = v351 + 24 * v193;
            *(_DWORD *)uint64_t v194 = v368[0];
            *(void *)(v194 + 8) = *(void *)(v124 + 3856);
            *(void *)(v194 + 16) = v190;
            if (!v190) {
              goto LABEL_250;
            }
LABEL_251:
            int v367 = 1;
            v368[0] = v177;
            v365 = &v367;
            v366 = v368;
            unint64_t v181 = *(void *)(v124 + 3856) + 1;
            *(void *)(v124 + 3856) = v181;
            if (!*(void *)v124) {
              goto LABEL_288;
            }
            if (*(_DWORD *)(v124 + 112) == v177)
            {
              unsigned int v182 = 4;
              goto LABEL_260;
            }
            if (*(_DWORD *)(v124 + 136) == v177)
            {
              unsigned int v182 = 5;
              goto LABEL_260;
            }
            if (*(_DWORD *)(v124 + 160) == v177)
            {
              unsigned int v182 = 6;
              goto LABEL_260;
            }
            if (*(_DWORD *)(v124 + 184) == v177)
            {
              unsigned int v182 = 7;
LABEL_260:
              ++*(void *)(v124 + 3864);
              uint64_t v183 = v351 + 24 * v182;
              *(void *)(v183 + 8) = v181;
              uint64_t v184 = *(unsigned int **)(v183 + 16);
              if (v184) {
                goto LABEL_261;
              }
              goto LABEL_288;
            }
            unint64_t v195 = *(void *)(v124 + 168);
            unint64_t v196 = *(void *)(v124 + 144);
            unint64_t v197 = *(void *)(v124 + 120);
            unint64_t v343 = *(void *)(v124 + 192);
            uint64_t v184 = (unsigned int *)sub_2AB884(*(void *)v124, 1, v177, 1);
            if (v197 >= v181) {
              unint64_t v198 = v181;
            }
            else {
              unint64_t v198 = v197;
            }
            BOOL v199 = v196 >= v198;
            if (v196 < v198) {
              unint64_t v198 = v196;
            }
            unsigned int v200 = 4 * (v197 < v181);
            if (!v199) {
              unsigned int v200 = 5;
            }
            if (v195 < v198)
            {
              unsigned int v200 = 6;
              unint64_t v198 = v195;
            }
            if (v343 < v198) {
              unsigned int v200 = 7;
            }
            uint64_t v201 = v351 + 24 * v200;
            *(_DWORD *)uint64_t v201 = v368[0];
            *(void *)(v201 + 8) = *(void *)(v124 + 3856);
            *(void *)(v201 + 16) = v184;
            if (v184)
            {
LABEL_261:
              uint64_t v185 = (int *)((char *)v184 + *v184);
              unint64_t v186 = (unsigned __int16 *)((char *)v185 - *v185);
              if (*v186 < 5u) {
                goto LABEL_291;
              }
              goto LABEL_289;
            }
LABEL_288:
            sub_296654(&v365);
            uint64_t v185 = 0;
            unint64_t v186 = (_WORD *)(&loc_1120530 + 1);
            if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
              goto LABEL_291;
            }
LABEL_289:
            uint64_t v202 = v186[2];
            if (!v202)
            {
LABEL_291:
              uint64_t v203 = 0;
              goto LABEL_292;
            }
            uint64_t v203 = (char *)v185 + v202 + *(unsigned int *)((char *)v185 + v202);
LABEL_292:
            uint64_t v204 = &v203[4 * HIDWORD(v177) + 4 + *(unsigned int *)&v203[4 * HIDWORD(v177) + 4]];
            uint64_t v205 = &v204[-*(int *)v204];
            if (*(unsigned __int16 *)v205 < 7u) {
              break;
            }
            uint64_t v206 = *((unsigned __int16 *)v205 + 3);
            if (!v206) {
              break;
            }
            uint64_t v169 = &v204[v206 + *(unsigned int *)&v204[v206]];
            if (*((unsigned __int16 *)v169 + 2) != *((unsigned __int16 *)v169 + 4)
              || *((unsigned __int16 *)v169 + 3) != *((unsigned __int16 *)v169 + 5))
            {
              goto LABEL_300;
            }
            unint64_t v171 = (v171 + 1);
            uint64_t v175 = **((void **)&v124 + 1);
            if (v171 >= (uint64_t)(*(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1)) >> 3)
            {
              int v170 = 2;
              goto LABEL_301;
            }
          }
          uint64_t v169 = 0;
LABEL_300:
          int v170 = 1;
LABEL_301:
          ++v127;
          if (v171 == v346 && v170 == v339) {
            goto LABEL_303;
          }
        }
      }
      unint64_t v127 = 0;
      unint64_t v128 = (unsigned int *)*((void *)&v363 + 1);
      unsigned int v129 = **((_DWORD **)&v363 + 1);
      unsigned int v130 = DWORD1(v364[1]);
      LODWORD(v131) = v364[1];
      do
      {
        unint64_t v347 = v127;
        unsigned int v132 = v130 - 1;
        if (v130 - 1 >= v129)
        {
          uint64_t v135 = **((void **)&v124 + 1);
          unint64_t v131 = (v131 - 1);
          if (v131 < (uint64_t)(*(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1)) >> 3) {
            goto LABEL_166;
          }
          goto LABEL_227;
        }
        unsigned int v133 = &v128[v130 + 1];
        uint64_t v134 = &v128[v132 + 1];
        if (*(unsigned __int16 *)v133 != *(unsigned __int16 *)v134
          || *((unsigned __int16 *)v133 + 1) != *((unsigned __int16 *)v134 + 1))
        {
          goto LABEL_227;
        }
        uint64_t v135 = **((void **)&v124 + 1);
        uint64_t v136 = *(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1);
        if (v129 == 2 && v136 == 8)
        {
          unsigned int v129 = 2;
LABEL_227:
          unsigned int v130 = v132;
          goto LABEL_228;
        }
        unsigned int v132 = v130 - 2;
        unint64_t v131 = (v131 - 1);
        if (v131 >= v136 >> 3) {
          goto LABEL_227;
        }
        do
        {
LABEL_166:
          unint64_t v137 = *(void *)(v135 + 8 * v131);
          int v367 = 1;
          v368[0] = v137;
          v365 = &v367;
          v366 = v368;
          unint64_t v138 = *(void *)(v124 + 3856) + 1;
          *(void *)(v124 + 3856) = v138;
          if (!*(void *)v124) {
            goto LABEL_176;
          }
          if (*(_DWORD *)(v124 + 112) == v137)
          {
            unsigned int v139 = 4;
            goto LABEL_175;
          }
          if (*(_DWORD *)(v124 + 136) == v137)
          {
            unsigned int v139 = 5;
            goto LABEL_175;
          }
          if (*(_DWORD *)(v124 + 160) == v137)
          {
            unsigned int v139 = 6;
            goto LABEL_175;
          }
          if (*(_DWORD *)(v124 + 184) == v137)
          {
            unsigned int v139 = 7;
LABEL_175:
            ++*(void *)(v124 + 3864);
            uint64_t v140 = v351 + 24 * v139;
            *(void *)(v140 + 8) = v138;
            if (*(void *)(v140 + 16)) {
              goto LABEL_177;
            }
LABEL_176:
            sub_296654(&v365);
            goto LABEL_177;
          }
          unint64_t v147 = *(void *)(v124 + 168);
          unint64_t v148 = *(void *)(v124 + 144);
          unint64_t v149 = *(void *)(v124 + 120);
          unint64_t v340 = *(void *)(v124 + 192);
          uint64_t v150 = sub_2AB884(*(void *)v124, 1, v137, 1);
          if (v149 >= v138) {
            unint64_t v151 = v138;
          }
          else {
            unint64_t v151 = v149;
          }
          BOOL v152 = v148 >= v151;
          if (v148 < v151) {
            unint64_t v151 = v148;
          }
          unsigned int v153 = 4 * (v149 < v138);
          if (!v152) {
            unsigned int v153 = 5;
          }
          if (v147 < v151)
          {
            unsigned int v153 = 6;
            unint64_t v151 = v147;
          }
          if (v340 < v151) {
            unsigned int v153 = 7;
          }
          uint64_t v154 = v351 + 24 * v153;
          *(_DWORD *)uint64_t v154 = v368[0];
          *(void *)(v154 + 8) = *(void *)(v124 + 3856);
          *(void *)(v154 + 16) = v150;
          if (!v150) {
            goto LABEL_176;
          }
LABEL_177:
          int v367 = 1;
          v368[0] = v137;
          v365 = &v367;
          v366 = v368;
          unint64_t v141 = *(void *)(v124 + 3856) + 1;
          *(void *)(v124 + 3856) = v141;
          if (!*(void *)v124) {
            goto LABEL_214;
          }
          if (*(_DWORD *)(v124 + 112) == v137)
          {
            unsigned int v142 = 4;
            goto LABEL_186;
          }
          if (*(_DWORD *)(v124 + 136) == v137)
          {
            unsigned int v142 = 5;
            goto LABEL_186;
          }
          if (*(_DWORD *)(v124 + 160) == v137)
          {
            unsigned int v142 = 6;
            goto LABEL_186;
          }
          if (*(_DWORD *)(v124 + 184) == v137)
          {
            unsigned int v142 = 7;
LABEL_186:
            ++*(void *)(v124 + 3864);
            uint64_t v143 = v351 + 24 * v142;
            *(void *)(v143 + 8) = v141;
            uint64_t v144 = *(unsigned int **)(v143 + 16);
            if (v144) {
              goto LABEL_187;
            }
            goto LABEL_214;
          }
          unint64_t v155 = *(void *)(v124 + 168);
          unint64_t v156 = *(void *)(v124 + 144);
          unint64_t v157 = *(void *)(v124 + 120);
          unint64_t v341 = *(void *)(v124 + 192);
          uint64_t v144 = (unsigned int *)sub_2AB884(*(void *)v124, 1, v137, 1);
          if (v157 >= v141) {
            unint64_t v158 = v141;
          }
          else {
            unint64_t v158 = v157;
          }
          BOOL v159 = v156 >= v158;
          if (v156 < v158) {
            unint64_t v158 = v156;
          }
          unsigned int v160 = 4 * (v157 < v141);
          if (!v159) {
            unsigned int v160 = 5;
          }
          if (v155 < v158)
          {
            unsigned int v160 = 6;
            unint64_t v158 = v155;
          }
          if (v341 < v158) {
            unsigned int v160 = 7;
          }
          uint64_t v161 = v351 + 24 * v160;
          *(_DWORD *)uint64_t v161 = v368[0];
          *(void *)(v161 + 8) = *(void *)(v124 + 3856);
          *(void *)(v161 + 16) = v144;
          if (v144)
          {
LABEL_187:
            uint64_t v145 = (int *)((char *)v144 + *v144);
            unsigned int v146 = (unsigned __int16 *)((char *)v145 - *v145);
            if (*v146 < 5u) {
              goto LABEL_217;
            }
            goto LABEL_215;
          }
LABEL_214:
          sub_296654(&v365);
          uint64_t v145 = 0;
          unsigned int v146 = (_WORD *)(&loc_1120530 + 1);
          if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
            goto LABEL_217;
          }
LABEL_215:
          uint64_t v162 = v146[2];
          if (!v162)
          {
LABEL_217:
            uint64_t v163 = 0;
            goto LABEL_218;
          }
          uint64_t v163 = (char *)v145 + v162 + *(unsigned int *)((char *)v145 + v162);
LABEL_218:
          uint64_t v164 = &v163[4 * HIDWORD(v137) + 4 + *(unsigned int *)&v163[4 * HIDWORD(v137) + 4]];
          uint64_t v165 = &v164[-*(int *)v164];
          if (*(unsigned __int16 *)v165 >= 7u && (uint64_t v166 = *((unsigned __int16 *)v165 + 3)) != 0) {
            unint64_t v128 = (unsigned int *)&v164[v166 + *(unsigned int *)&v164[v166]];
          }
          else {
            unint64_t v128 = 0;
          }
          unsigned int v129 = *v128;
          unsigned int v130 = *v128 - 2;
          uint64_t v167 = &v128[*v128];
          long long v168 = &v128[v130 + 1];
          if (*(unsigned __int16 *)v167 != *(unsigned __int16 *)v168
            || *((unsigned __int16 *)v167 + 1) != *((unsigned __int16 *)v168 + 1))
          {
            goto LABEL_228;
          }
          unint64_t v131 = (v131 - 1);
          uint64_t v135 = **((void **)&v124 + 1);
        }
        while (v131 < (uint64_t)(*(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1)) >> 3);
        unsigned int v130 = v129 - 3;
LABEL_228:
        ++v127;
      }
      while (v131 != v346 || v130 != v339);
LABEL_303:
      if (v347 >= 0x1555555555555555) {
        sub_2E00();
      }
      long long __p = operator new(12 * v127);
      v353 = __p;
      unint64_t v348 = __p;
      v354 = (char *)__p + 12 * v127;
      uint64_t v207 = v335;
      unsigned int v208 = v126;
      while (2)
      {
        unint64_t v344 = v125;
        unsigned int v209 = v207;
        long long v210 = v207 + 1;
        unsigned int v211 = v208;
        unsigned int v212 = &v207[v208 + 1];
        int v213 = *(unsigned __int16 *)v212;
        int v214 = *((unsigned __int16 *)v212 + 1);
        unsigned int v215 = sub_511FC(v349);
        unsigned int v216 = v349 & ~(-1 << (v215 & 0xFE));
        int v217 = sub_51938(v216);
        int v218 = sub_51938(v216 >> 1);
        uint64_t v219 = v211;
        uint64_t v220 = (unsigned __int16 *)((char *)v345 - *v345);
        unsigned int v221 = *v220;
        if (v221 < 0xD)
        {
          unsigned int v222 = v348;
          if (v221 >= 0xB) {
            goto LABEL_309;
          }
LABEL_314:
          int v223 = 0x7FFFFFFF;
          goto LABEL_315;
        }
        unsigned int v222 = v348;
        if (v220[6])
        {
          int v223 = *(int *)((char *)&v345[v219 + 1] + v220[6] + *(unsigned int *)((char *)v345 + v220[6]));
          goto LABEL_315;
        }
LABEL_309:
        if (!v220[5]) {
          goto LABEL_314;
        }
        int v224 = *(unsigned __int16 *)((char *)v345 + 2 * v219 + v220[5] + *(unsigned int *)((char *)v345 + v220[5]) + 4);
        if (v224 == 0xFFFF) {
          goto LABEL_314;
        }
        uint64_t v225 = v220[4];
        if (v225) {
          LODWORD(v225) = *(int *)((char *)v345 + v225);
        }
        int v223 = v350 + v224 + v225;
LABEL_315:
        int v226 = 1 << -(v215 >> 1);
        if (v215 < 2) {
          int v226 = -2;
        }
        LODWORD(v227) = v218 * v226 + 4 * v214;
        if (v227 >= 0xFFFFFFFE) {
          uint64_t v227 = 4294967294;
        }
        else {
          uint64_t v227 = v227;
        }
        *(void *)unsigned int v222 = (v217 * v226 + 4 * v213) | (unint64_t)(v227 << 32);
        v222[2] = v223;
        unsigned int v228 = *v209;
        if (!v338)
        {
          unsigned int v208 = v219 + 1;
          if ((int)v219 + 1 >= v228)
          {
            uint64_t v233 = **((void **)&v124 + 1);
            uint64_t v207 = v209;
            unint64_t v125 = (v344 + 1);
            if (v125 < (uint64_t)(*(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1)) >> 3) {
              goto LABEL_402;
            }
            goto LABEL_468;
          }
          uint64_t v232 = &v210[v208];
          if (*(unsigned __int16 *)v212 != *(unsigned __int16 *)v232
            || *((unsigned __int16 *)v212 + 1) != *((unsigned __int16 *)v232 + 1))
          {
LABEL_334:
            int v235 = v346;
            uint64_t v207 = v209;
            unint64_t v125 = v344;
            goto LABEL_469;
          }
          uint64_t v233 = **((void **)&v124 + 1);
          uint64_t v234 = *(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1);
          uint64_t v207 = v209;
          if (v228 == 2 && v234 == 8) {
            goto LABEL_333;
          }
          unsigned int v208 = v219 + 2;
          unint64_t v125 = (v344 + 1);
          if (v125 >= v234 >> 3) {
            goto LABEL_468;
          }
LABEL_402:
          while (2)
          {
            unint64_t v273 = *(void *)(v233 + 8 * v125);
            int v367 = 1;
            v368[0] = v273;
            v365 = &v367;
            v366 = v368;
            unint64_t v274 = *(void *)(v124 + 3856) + 1;
            *(void *)(v124 + 3856) = v274;
            if (*(void *)v124)
            {
              if (*(_DWORD *)(v124 + 112) == v273)
              {
                unsigned int v275 = 4;
                goto LABEL_411;
              }
              if (*(_DWORD *)(v124 + 136) == v273)
              {
                unsigned int v275 = 5;
                goto LABEL_411;
              }
              if (*(_DWORD *)(v124 + 160) == v273)
              {
                unsigned int v275 = 6;
                goto LABEL_411;
              }
              if (*(_DWORD *)(v124 + 184) == v273)
              {
                unsigned int v275 = 7;
LABEL_411:
                ++*(void *)(v124 + 3864);
                uint64_t v276 = v351 + 24 * v275;
                *(void *)(v276 + 8) = v274;
                uint64_t v277 = *(unsigned int **)(v276 + 16);
                if (v277)
                {
LABEL_412:
                  long long v278 = (int *)((char *)v277 + *v277);
                  uint64_t v279 = (unsigned __int16 *)((char *)v278 - *v278);
                  if (*v279 < 7u)
                  {
LABEL_429:
                    int v350 = 0;
                    goto LABEL_430;
                  }
LABEL_427:
                  uint64_t v288 = v279[3];
                  if (!v288) {
                    goto LABEL_429;
                  }
                  int v350 = *(int *)((char *)v278 + v288);
LABEL_430:
                  int v367 = 1;
                  v368[0] = v273;
                  v365 = &v367;
                  v366 = v368;
                  unint64_t v289 = *(void *)(v124 + 3856) + 1;
                  *(void *)(v124 + 3856) = v289;
                  if (*(void *)v124)
                  {
                    if (*(_DWORD *)(v124 + 112) == v273)
                    {
                      unsigned int v290 = 4;
                      goto LABEL_439;
                    }
                    if (*(_DWORD *)(v124 + 136) == v273)
                    {
                      unsigned int v290 = 5;
                      goto LABEL_439;
                    }
                    if (*(_DWORD *)(v124 + 160) == v273)
                    {
                      unsigned int v290 = 6;
                      goto LABEL_439;
                    }
                    if (*(_DWORD *)(v124 + 184) == v273)
                    {
                      unsigned int v290 = 7;
LABEL_439:
                      ++*(void *)(v124 + 3864);
                      uint64_t v291 = v351 + 24 * v290;
                      *(void *)(v291 + 8) = v289;
                      uint64_t v292 = *(unsigned int **)(v291 + 16);
                      if (v292)
                      {
LABEL_440:
                        long long v293 = (int *)((char *)v292 + *v292);
                        long long v294 = (unsigned __int16 *)((char *)v293 - *v293);
                        if (*v294 < 5u)
                        {
LABEL_457:
                          uint64_t v304 = 0;
                          goto LABEL_458;
                        }
LABEL_455:
                        uint64_t v303 = v294[2];
                        if (!v303) {
                          goto LABEL_457;
                        }
                        uint64_t v304 = (char *)v293 + v303 + *(unsigned int *)((char *)v293 + v303);
LABEL_458:
                        v305 = &v304[4 * HIDWORD(v273) + 4 + *(unsigned int *)&v304[4 * HIDWORD(v273) + 4]];
                        v306 = &v305[-*(int *)v305];
                        if (*(unsigned __int16 *)v306 < 7u || (uint64_t v307 = *((unsigned __int16 *)v306 + 3)) == 0)
                        {
                          uint64_t v207 = 0;
LABEL_467:
                          unint64_t v345 = (int *)v305;
                          unsigned int v349 = v273;
                          unsigned int v208 = 1;
LABEL_468:
                          int v235 = v346;
                          goto LABEL_469;
                        }
                        uint64_t v207 = (unsigned int *)&v305[v307 + *(unsigned int *)&v305[v307]];
                        if (*((unsigned __int16 *)v207 + 2) != *((unsigned __int16 *)v207 + 4)
                          || *((unsigned __int16 *)v207 + 3) != *((unsigned __int16 *)v207 + 5))
                        {
                          goto LABEL_467;
                        }
                        unint64_t v125 = (v125 + 1);
                        uint64_t v233 = **((void **)&v124 + 1);
                        if (v125 >= (uint64_t)(*(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1)) >> 3)
                        {
                          unint64_t v345 = (int *)v305;
                          unsigned int v349 = v273;
                          unsigned int v208 = 2;
                          goto LABEL_468;
                        }
                        continue;
                      }
                    }
                    else
                    {
                      unint64_t v295 = *(void *)(v124 + 168);
                      unint64_t v296 = *(void *)(v124 + 144);
                      unint64_t v297 = *(void *)(v124 + 120);
                      unint64_t v298 = *(void *)(v124 + 192);
                      uint64_t v292 = (unsigned int *)sub_2AB884(*(void *)v124, 1, v273, 1);
                      if (v297 >= v289) {
                        unint64_t v299 = v289;
                      }
                      else {
                        unint64_t v299 = v297;
                      }
                      BOOL v300 = v296 >= v299;
                      if (v296 < v299) {
                        unint64_t v299 = v296;
                      }
                      unsigned int v301 = 4 * (v297 < v289);
                      if (!v300) {
                        unsigned int v301 = 5;
                      }
                      if (v295 < v299)
                      {
                        unsigned int v301 = 6;
                        unint64_t v299 = v295;
                      }
                      if (v298 < v299) {
                        unsigned int v301 = 7;
                      }
                      uint64_t v302 = v351 + 24 * v301;
                      *(_DWORD *)uint64_t v302 = v368[0];
                      *(void *)(v302 + 8) = *(void *)(v124 + 3856);
                      *(void *)(v302 + 16) = v292;
                      if (v292) {
                        goto LABEL_440;
                      }
                    }
                  }
                  sub_296654(&v365);
                  long long v293 = 0;
                  long long v294 = (_WORD *)(&loc_1120530 + 1);
                  if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
                    goto LABEL_457;
                  }
                  goto LABEL_455;
                }
              }
              else
              {
                unint64_t v280 = *(void *)(v124 + 168);
                unint64_t v281 = *(void *)(v124 + 144);
                unint64_t v282 = *(void *)(v124 + 120);
                unint64_t v283 = *(void *)(v124 + 192);
                uint64_t v277 = (unsigned int *)sub_2AB884(*(void *)v124, 1, v273, 1);
                if (v282 >= v274) {
                  unint64_t v284 = v274;
                }
                else {
                  unint64_t v284 = v282;
                }
                BOOL v285 = v281 >= v284;
                if (v281 < v284) {
                  unint64_t v284 = v281;
                }
                unsigned int v286 = 4 * (v282 < v274);
                if (!v285) {
                  unsigned int v286 = 5;
                }
                if (v280 < v284)
                {
                  unsigned int v286 = 6;
                  unint64_t v284 = v280;
                }
                if (v283 < v284) {
                  unsigned int v286 = 7;
                }
                uint64_t v287 = v351 + 24 * v286;
                *(_DWORD *)uint64_t v287 = v368[0];
                *(void *)(v287 + 8) = *(void *)(v124 + 3856);
                *(void *)(v287 + 16) = v277;
                if (v277) {
                  goto LABEL_412;
                }
              }
            }
            break;
          }
          sub_296654(&v365);
          long long v278 = 0;
          uint64_t v279 = (_WORD *)(&loc_1120530 + 1);
          if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 7u) {
            goto LABEL_429;
          }
          goto LABEL_427;
        }
        unsigned int v208 = v219 - 1;
        if ((int)v219 - 1 >= v228)
        {
          uint64_t v230 = **((void **)&v124 + 1);
          uint64_t v207 = v209;
          unint64_t v125 = (v344 - 1);
          if (v125 >= (uint64_t)(*(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1)) >> 3) {
            goto LABEL_468;
          }
LABEL_336:
          while (2)
          {
            unint64_t v236 = *(void *)(v230 + 8 * v125);
            int v367 = 1;
            v368[0] = v236;
            v365 = &v367;
            v366 = v368;
            unint64_t v237 = *(void *)(v124 + 3856) + 1;
            *(void *)(v124 + 3856) = v237;
            if (*(void *)v124)
            {
              if (*(_DWORD *)(v124 + 112) == v236)
              {
                unsigned int v238 = 4;
                goto LABEL_345;
              }
              if (*(_DWORD *)(v124 + 136) == v236)
              {
                unsigned int v238 = 5;
                goto LABEL_345;
              }
              if (*(_DWORD *)(v124 + 160) == v236)
              {
                unsigned int v238 = 6;
                goto LABEL_345;
              }
              if (*(_DWORD *)(v124 + 184) == v236)
              {
                unsigned int v238 = 7;
LABEL_345:
                ++*(void *)(v124 + 3864);
                uint64_t v239 = v351 + 24 * v238;
                *(void *)(v239 + 8) = v237;
                uint64_t v240 = *(unsigned int **)(v239 + 16);
                if (v240)
                {
LABEL_346:
                  uint64_t v241 = (int *)((char *)v240 + *v240);
                  v242 = (unsigned __int16 *)((char *)v241 - *v241);
                  if (*v242 < 7u)
                  {
LABEL_363:
                    int v350 = 0;
                    goto LABEL_364;
                  }
LABEL_361:
                  uint64_t v251 = v242[3];
                  if (!v251) {
                    goto LABEL_363;
                  }
                  int v350 = *(int *)((char *)v241 + v251);
LABEL_364:
                  int v367 = 1;
                  v368[0] = v236;
                  v365 = &v367;
                  v366 = v368;
                  unint64_t v252 = *(void *)(v124 + 3856) + 1;
                  *(void *)(v124 + 3856) = v252;
                  if (*(void *)v124)
                  {
                    if (*(_DWORD *)(v124 + 112) == v236)
                    {
                      unsigned int v253 = 4;
                      goto LABEL_373;
                    }
                    if (*(_DWORD *)(v124 + 136) == v236)
                    {
                      unsigned int v253 = 5;
                      goto LABEL_373;
                    }
                    if (*(_DWORD *)(v124 + 160) == v236)
                    {
                      unsigned int v253 = 6;
                      goto LABEL_373;
                    }
                    if (*(_DWORD *)(v124 + 184) == v236)
                    {
                      unsigned int v253 = 7;
LABEL_373:
                      ++*(void *)(v124 + 3864);
                      uint64_t v254 = v351 + 24 * v253;
                      *(void *)(v254 + 8) = v252;
                      uint64_t v255 = *(unsigned int **)(v254 + 16);
                      if (v255)
                      {
LABEL_374:
                        uint64_t v256 = (int *)((char *)v255 + *v255);
                        uint64_t v257 = (unsigned __int16 *)((char *)v256 - *v256);
                        if (*v257 < 5u)
                        {
LABEL_391:
                          uint64_t v267 = 0;
                          goto LABEL_392;
                        }
LABEL_389:
                        uint64_t v266 = v257[2];
                        if (!v266) {
                          goto LABEL_391;
                        }
                        uint64_t v267 = (char *)v256 + v266 + *(unsigned int *)((char *)v256 + v266);
LABEL_392:
                        BOOL v268 = &v267[4 * HIDWORD(v236) + 4 + *(unsigned int *)&v267[4 * HIDWORD(v236) + 4]];
                        long long v269 = &v268[-*(int *)v268];
                        if (*(unsigned __int16 *)v269 >= 7u && (uint64_t v270 = *((unsigned __int16 *)v269 + 3)) != 0) {
                          uint64_t v207 = (unsigned int *)&v268[v270 + *(unsigned int *)&v268[v270]];
                        }
                        else {
                          uint64_t v207 = 0;
                        }
                        uint64_t v271 = &v207[*v207];
                        uint64_t v272 = &v207[*v207 - 1];
                        if (*(unsigned __int16 *)v271 != *(unsigned __int16 *)v272
                          || *((unsigned __int16 *)v271 + 1) != *((unsigned __int16 *)v272 + 1))
                        {
                          unint64_t v345 = (int *)v268;
                          unsigned int v349 = v236;
                          int v235 = v346;
                          unsigned int v208 = *v207 - 2;
                          goto LABEL_469;
                        }
                        unint64_t v125 = (v125 - 1);
                        uint64_t v230 = **((void **)&v124 + 1);
                        if (v125 >= (uint64_t)(*(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1)) >> 3)
                        {
                          unint64_t v345 = (int *)v268;
                          unsigned int v208 = *v207 - 3;
                          unsigned int v349 = v236;
                          goto LABEL_468;
                        }
                        continue;
                      }
                    }
                    else
                    {
                      unint64_t v258 = *(void *)(v124 + 168);
                      unint64_t v259 = *(void *)(v124 + 144);
                      unint64_t v260 = *(void *)(v124 + 120);
                      unint64_t v261 = *(void *)(v124 + 192);
                      uint64_t v255 = (unsigned int *)sub_2AB884(*(void *)v124, 1, v236, 1);
                      if (v260 >= v252) {
                        unint64_t v262 = v252;
                      }
                      else {
                        unint64_t v262 = v260;
                      }
                      BOOL v263 = v259 >= v262;
                      if (v259 < v262) {
                        unint64_t v262 = v259;
                      }
                      unsigned int v264 = 4 * (v260 < v252);
                      if (!v263) {
                        unsigned int v264 = 5;
                      }
                      if (v258 < v262)
                      {
                        unsigned int v264 = 6;
                        unint64_t v262 = v258;
                      }
                      if (v261 < v262) {
                        unsigned int v264 = 7;
                      }
                      uint64_t v265 = v351 + 24 * v264;
                      *(_DWORD *)uint64_t v265 = v368[0];
                      *(void *)(v265 + 8) = *(void *)(v124 + 3856);
                      *(void *)(v265 + 16) = v255;
                      if (v255) {
                        goto LABEL_374;
                      }
                    }
                  }
                  sub_296654(&v365);
                  uint64_t v256 = 0;
                  uint64_t v257 = (_WORD *)(&loc_1120530 + 1);
                  if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
                    goto LABEL_391;
                  }
                  goto LABEL_389;
                }
              }
              else
              {
                unint64_t v243 = *(void *)(v124 + 168);
                unint64_t v244 = *(void *)(v124 + 144);
                unint64_t v245 = *(void *)(v124 + 120);
                unint64_t v246 = *(void *)(v124 + 192);
                uint64_t v240 = (unsigned int *)sub_2AB884(*(void *)v124, 1, v236, 1);
                if (v245 >= v237) {
                  unint64_t v247 = v237;
                }
                else {
                  unint64_t v247 = v245;
                }
                BOOL v248 = v244 >= v247;
                if (v244 < v247) {
                  unint64_t v247 = v244;
                }
                unsigned int v249 = 4 * (v245 < v237);
                if (!v248) {
                  unsigned int v249 = 5;
                }
                if (v243 < v247)
                {
                  unsigned int v249 = 6;
                  unint64_t v247 = v243;
                }
                if (v246 < v247) {
                  unsigned int v249 = 7;
                }
                uint64_t v250 = v351 + 24 * v249;
                *(_DWORD *)uint64_t v250 = v368[0];
                *(void *)(v250 + 8) = *(void *)(v124 + 3856);
                *(void *)(v250 + 16) = v240;
                if (v240) {
                  goto LABEL_346;
                }
              }
            }
            break;
          }
          sub_296654(&v365);
          uint64_t v241 = 0;
          v242 = (_WORD *)(&loc_1120530 + 1);
          if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 7u) {
            goto LABEL_363;
          }
          goto LABEL_361;
        }
        unsigned int v229 = &v210[v208];
        if (*(unsigned __int16 *)v212 != *(unsigned __int16 *)v229
          || *((unsigned __int16 *)v212 + 1) != *((unsigned __int16 *)v229 + 1))
        {
          goto LABEL_334;
        }
        uint64_t v230 = **((void **)&v124 + 1);
        uint64_t v231 = *(void *)(*((void *)&v124 + 1) + 8) - **((void **)&v124 + 1);
        uint64_t v207 = v209;
        if (v228 != 2 || v231 != 8)
        {
          unsigned int v208 = v219 - 2;
          unint64_t v125 = (v344 - 1);
          if (v125 < v231 >> 3) {
            goto LABEL_336;
          }
          goto LABEL_468;
        }
LABEL_333:
        int v235 = v346;
        unint64_t v125 = v344;
LABEL_469:
        unint64_t v348 = v222 + 3;
        if (v125 != v235 || v208 != v339) {
          continue;
        }
        break;
      }
      v353 = v222 + 3;
LABEL_474:
      uint64_t v7 = (uint64_t)v333;
      BOOL v308 = sub_358C68(v333, v337, (uint64_t)&__p, v43, v34, v35, v36);
      if (__p)
      {
        v353 = __p;
        operator delete(__p);
      }
      uint64_t v9 = a6;
      if (v308)
      {
        BOOL v309 = v360;
        if ((unint64_t)v360 >= v361)
        {
          uint64_t v311 = v360 - v359;
          if ((unint64_t)(v311 + 1) >> 60) {
            sub_2E00();
          }
          unint64_t v312 = (uint64_t)(v361 - (void)v359) >> 3;
          if (v312 <= v311 + 1) {
            unint64_t v312 = v311 + 1;
          }
          if (v361 - (unint64_t)v359 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v313 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v313 = v312;
          }
          if (v313)
          {
            if (v313 >> 60) {
              sub_188D718();
            }
            unint64_t v314 = (char *)operator new(16 * v313);
          }
          else
          {
            unint64_t v314 = 0;
          }
          v315 = (__n128 *)sub_358F6C((uint64_t)&v314[16 * v311], v336, (uint64_t)v333);
          v317 = v359;
          v316 = v360;
          v318 = v315;
          if (v360 != v359)
          {
            do
            {
              v318[-1] = v316[-1];
              --v318;
              --v316;
            }
            while (v316 != v317);
            v316 = v359;
          }
          v319 = &v314[16 * v313];
          v310 = v315 + 1;
          char v359 = v318;
          v360 = v315 + 1;
          unint64_t v361 = (unint64_t)v319;
          if (v316) {
            operator delete(v316);
          }
        }
        else
        {
          sub_358F6C((uint64_t)v360, v336, (uint64_t)v333);
          v310 = v309 + 1;
        }
        v360 = v310;
        char v329 = 1;
      }
      if (v356)
      {
        v357 = (char *)v356;
        operator delete(v356);
      }
      unsigned int v28 = v336 + 1;
      char v32 = v336 + 1 == v334 || v308;
    }
    while ((v32 & 1) == 0);
    uint64_t v26 = v326;
    if (!(v329 & 1 | (v326 == v327))) {
      goto LABEL_16;
    }
LABEL_10:
    v7 += 184;
    if (v7 != v325)
    {
      BOOL v24 = sub_34658((_DWORD *)(v7 + 128), a4);
      continue;
    }
    break;
  }
  v320 = v360;
  if (v359 != v360)
  {
    sub_3F6A74(v359, v360, (uint64_t)&v362, 126 - 2 * __clz(v360 - v359), 1);
    *(void *)&long long v362 = **(void **)a5 + 648 * *(void *)(a5 + 8);
    uint64_t v355 = v362 + 480;
    unint64_t v321 = *(void *)(v9 + 8);
    if (v321 >= *(void *)(v9 + 16))
    {
      unint64_t v322 = sub_3F7E3C((void **)v9, (uint64_t *)&v362, (uint64_t)&v359, &v355);
    }
    else
    {
      sub_358F78(*(void **)(v9 + 8), (uint64_t *)&v362, (uint64_t)&v359, &v355);
      unint64_t v322 = (char *)(v321 + 40);
      *(void *)(v9 + 8) = v321 + 40;
    }
    *(void *)(v9 + 8) = v322;
    v320 = v359;
  }
  if (v320)
  {
    v360 = v320;
    operator delete(v320);
  }
}

void sub_3F4D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41)
{
  double v43 = *(void **)(v41 - 216);
  if (!v43) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v41 - 208) = v43;
  operator delete(v43);
  _Unwind_Resume(exception_object);
}

uint64_t sub_3F4E6C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(unsigned char *)(result + 30))
  {
    unint64_t v3 = *(void *)(a2 + 32);
    v4[0] = off_2439208;
    unsigned int v5 = v4;
    sub_3EAFD8(result, v3, (uint64_t)v4, (uint64_t ***)a3);
    uint64_t result = (uint64_t)v5;
    if (v5 == v4)
    {
      return (*(uint64_t (**)(void *))(v4[0] + 32))(v4);
    }
    else if (v5)
    {
      return (*(uint64_t (**)(void))(*v5 + 40))();
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_3F4F90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3EA7D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_3F4FA4(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_3F4FB0(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (*(unsigned char *)(a1 + 25)) {
    return sub_29A88C(*(void *)a1, a2, a3);
  }
  else {
    return 0;
  }
}

BOOL sub_3F4FC8(int **a1, int a2)
{
  if (a2 != 2)
  {
    if (a2 == 1)
    {
      double v2 = (char *)*a1;
      unint64_t v3 = (unsigned __int16 *)((char *)*a1 - **a1);
      BOOL v4 = *v3 >= 0x39u;
      if (!*((unsigned char *)a1 + 38)) {
        goto LABEL_4;
      }
    }
    else
    {
      double v2 = (char *)*a1;
      unint64_t v3 = (unsigned __int16 *)((char *)*a1 - **a1);
      BOOL v4 = *v3 >= 0x39u;
      if (*((unsigned char *)a1 + 38))
      {
LABEL_4:
        if (v4)
        {
          uint64_t v5 = v3[28];
          if (v5)
          {
            unsigned int v6 = *(_DWORD *)&v2[v5];
            if ((v6 & 3) == 0) {
              return (v6 >> 5) & 1;
            }
          }
        }
        return 0;
      }
    }
    if (v4)
    {
      uint64_t v12 = v3[28];
      if (v12)
      {
        unsigned int v13 = *(_DWORD *)&v2[v12];
        if ((v13 & 3) == 0) {
          return (v13 >> 2) & 1;
        }
      }
    }
    return 0;
  }
  uint64_t v8 = (char *)*a1;
  uint64_t v9 = (unsigned __int16 *)((char *)*a1 - **a1);
  unsigned int v10 = *v9;
  if (*((unsigned char *)a1 + 38))
  {
    if (v10 >= 0x39)
    {
      unsigned int v11 = v9[28];
      if (v11) {
        return (*(_DWORD *)&v8[v11] & 2) != 0;
      }
    }
  }
  else if (v10 >= 0x39)
  {
    unsigned int v14 = v9[28];
    if (v14) {
      return (*(_DWORD *)&v8[v14] & 1) != 0;
    }
  }
  return 0;
}

void sub_3F50B8()
{
}

void *sub_3F50CC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_2439108;
  return result;
}

void sub_3F5104(uint64_t a1, void *a2)
{
  *a2 = off_2439108;
}

uint64_t sub_3F512C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_35870C(a2);
  if (result) {
    return sub_3588EC(a2) ^ 1;
  }
  return result;
}

uint64_t sub_3F5164(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing24TrafficIncidentsAccessorINS0_11DrivingModeEE22get_blocking_incidentsERKNS_4data19D"
                     "irectedRoadSegmentEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl7routing24TrafficIncidentsAccessorINS0_11DrivingModeEE22get_blocking_incidentsERK"
                                "NS_4data19DirectedRoadSegmentEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing24TrafficIncidentsAccessorINS0_11DrivingModeEE22get_blocking_incidentsERKNS_4data19DirectedRoadSegmentEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing24TrafficIncidentsAccessorINS0_11DrivingModeEE22get_blocking_incidentsERKNS_4data19DirectedRoadSegmentEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_3F51D4()
{
}

void sub_3F51E4()
{
}

void *sub_3F51F8()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_2439188;
  return result;
}

void sub_3F5230(uint64_t a1, void *a2)
{
  *a2 = off_2439188;
}

uint64_t sub_3F5258(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_35873C(a2);
  if (result) {
    return sub_3588EC(a2) ^ 1;
  }
  return result;
}

uint64_t sub_3F5290(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing24TrafficIncidentsAccessorINS0_11DrivingModeEE22get_blocking_incidentsERKNS_4data19D"
                     "irectedRoadSegmentEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl7routing24TrafficIncidentsAccessorINS0_11DrivingModeEE22get_blocking_incidentsERK"
                                "NS_4data19DirectedRoadSegmentEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing24TrafficIncidentsAccessorINS0_11DrivingModeEE22get_blocking_incidentsERKNS_4data19DirectedRoadSegmentEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing24TrafficIncidentsAccessorINS0_11DrivingModeEE22get_blocking_incidentsERKNS_4data19DirectedRoadSegmentEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_3F5300()
{
}

void sub_3F5310()
{
}

void *sub_3F5324()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_2439208;
  return result;
}

void sub_3F535C(uint64_t a1, void *a2)
{
  *a2 = off_2439208;
}

uint64_t sub_3F5384(uint64_t a1, uint64_t a2)
{
  BOOL v3 = sub_3586AC(a2, 0);
  uint64_t result = 0;
  if (v3) {
    return sub_3588EC(a2) ^ 1;
  }
  return result;
}

uint64_t sub_3F53C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing24TrafficIncidentsAccessorINS0_11DrivingModeEE26get_soft_closure_incidentsERKNS_4dat"
                     "a19DirectedRoadSegmentEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl7routing24TrafficIncidentsAccessorINS0_11DrivingModeEE26get_soft_closure_incident"
                                "sERKNS_4data19DirectedRoadSegmentEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing24TrafficIncidentsAccessorINS0_11DrivingModeEE26get_soft_closure_incidentsERKNS_4data19DirectedRoadSegmentEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing24TrafficIncidentsAccessorINS0_11DrivingModeEE26get_soft_closure_incidentsERKNS_4data19DirectedRoadSegmentEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_3F5438()
{
}

void sub_3F5448()
{
}

void *sub_3F545C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_2439288;
  return result;
}

void sub_3F5494(uint64_t a1, void *a2)
{
  *a2 = off_2439288;
}

uint64_t sub_3F54BC(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_3586DC(a2);
  if (result) {
    return sub_3588EC(a2) ^ 1;
  }
  return result;
}

uint64_t sub_3F54F4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing24TrafficIncidentsAccessorINS0_11CyclingModeEE22get_blocking_incidentsERKNS_4data19D"
                     "irectedRoadSegmentEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl7routing24TrafficIncidentsAccessorINS0_11CyclingModeEE22get_blocking_incidentsERK"
                                "NS_4data19DirectedRoadSegmentEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing24TrafficIncidentsAccessorINS0_11CyclingModeEE22get_blocking_incidentsERKNS_4data19DirectedRoadSegmentEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing24TrafficIncidentsAccessorINS0_11CyclingModeEE22get_blocking_incidentsERKNS_4data19DirectedRoadSegmentEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_3F5564()
{
}

void sub_3F5574()
{
}

void *sub_3F5588()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_2439308;
  return result;
}

void sub_3F55C0(uint64_t a1, void *a2)
{
  *a2 = off_2439308;
}

uint64_t sub_3F55E8(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_35873C(a2);
  if (result) {
    return sub_3588EC(a2) ^ 1;
  }
  return result;
}

uint64_t sub_3F5620(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing24TrafficIncidentsAccessorINS0_11CyclingModeEE22get_blocking_incidentsERKNS_4data19D"
                     "irectedRoadSegmentEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl7routing24TrafficIncidentsAccessorINS0_11CyclingModeEE22get_blocking_incidentsERK"
                                "NS_4data19DirectedRoadSegmentEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing24TrafficIncidentsAccessorINS0_11CyclingModeEE22get_blocking_incidentsERKNS_4data19DirectedRoadSegmentEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing24TrafficIncidentsAccessorINS0_11CyclingModeEE22get_blocking_incidentsERKNS_4data19DirectedRoadSegmentEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_3F5690()
{
}

void sub_3F56A0()
{
}

void *sub_3F56B4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_2439388;
  return result;
}

void sub_3F56EC(uint64_t a1, void *a2)
{
  *a2 = off_2439388;
}

uint64_t sub_3F5714(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_35873C(a2);
  if (result) {
    return sub_3588EC(a2) ^ 1;
  }
  return result;
}

uint64_t sub_3F574C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing24TrafficIncidentsAccessorINS0_11WalkingModeEE22get_blocking_incidentsERKNS_4data24D"
                     "irectedSidedWalkSegmentEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl7routing24TrafficIncidentsAccessorINS0_11WalkingModeEE22get_blocking_incidentsERK"
                                "NS_4data24DirectedSidedWalkSegmentEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing24TrafficIncidentsAccessorINS0_11WalkingModeEE22get_blocking_incidentsERKNS_4data24DirectedSidedWalkSegmentEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing24TrafficIncidentsAccessorINS0_11WalkingModeEE22get_blocking_incidentsERKNS_4data24DirectedSidedWalkSegmentEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_3F57BC()
{
}

void sub_3F57C8(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t v5 = *a1;
  if (*a1)
  {
    unsigned int v10 = *(unsigned int **)(v5 + 176);
    unsigned int v11 = *(unsigned int **)(v5 + 184);
    uint64_t v12 = (char *)v11 - (char *)v10;
    if ((char *)v11 - (char *)v10 >= 24)
    {
      uint64_t v13 = (a2 >> 16) & 0xFFFF0000 | (a2 << 32);
      uint64_t v14 = a2 & 0xFF000000000000;
      if (v12 != 24)
      {
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 3);
        do
        {
          uint64_t v16 = 6 * (v15 >> 2);
          _X17 = &v10[v16];
          __asm { PRFM            #0, [X17] }
          BOOL v23 = &v10[6 * (v15 >> 1)];
          _X16 = &v23[v16];
          __asm { PRFM            #0, [X16] }
          if ((((unint64_t)*v23 << 32) | ((unint64_t)*((unsigned __int16 *)v23 + 2) << 16) | (*((unsigned char *)v23 + 6) == 0)) >= (v13 | (unint64_t)(v14 == 0))) {
            unint64_t v26 = 0;
          }
          else {
            unint64_t v26 = v15 >> 1;
          }
          v10 += 6 * v26;
          v15 -= v15 >> 1;
        }
        while ((uint64_t)v15 > 1);
      }
      v10 += 6
           * ((((unint64_t)*v10 << 32) | ((unint64_t)*((unsigned __int16 *)v10 + 2) << 16) | (*((unsigned char *)v10 + 6) == 0)) < (v13 | (unint64_t)(v14 == 0)));
    }
    if (v10 != v11)
    {
      int v27 = 1 << a4;
      int v28 = WORD2(a2);
      int v29 = (uint64_t *)(v10 + 4);
      uint64_t v30 = HIWORD(a2) & 1;
      do
      {
        int v31 = v29 - 2;
        if (*((_DWORD *)v29 - 4) != a2
          || *((unsigned __int16 *)v29 - 6) != v28
          || ((v30 ^ (*((unsigned char *)v29 - 10) == 0)) & 1) == 0)
        {
          break;
        }
        if ((*(_DWORD *)(v29 - 1) & v27) - 1 <= 0xFFFFFFFD)
        {
          uint64_t v32 = *(void *)(a3 + 24);
          if (!v32) {
            sub_29F82C();
          }
          if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v32 + 48))(v32, *(void *)(*a1 + 152) + 424 * *v29)&& (sub_3588EC(*(void *)(*a1 + 152) + 424 * *v29) & 1) == 0)
          {
            uint64_t v33 = *a1 + 152;
            sub_29AC28((uint64_t)a5, &v33, v29);
          }
        }
        v29 += 3;
      }
      while (v31 + 3 != *(uint64_t **)(v5 + 184));
    }
    if (*((unsigned char *)a1 + 32)) {
      sub_29BE60(a1, a2, a5, a3);
    }
  }
}

void sub_3F5A28(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3F5A54(uint64_t *a1, uint64_t **a2)
{
  uint64_t v3 = *a1;
  BOOL v4 = a2[1];
  uint64_t v5 = **a2;
  if (!*(unsigned char *)(*a1 + 30) && sub_358820(v5 + 424 * (void)v4)) {
    goto LABEL_14;
  }
  if (*(unsigned char *)(v3 + 24))
  {
    uint64_t v6 = v5 + 424 * (void)v4;
    uint64_t v7 = *(int **)(v3 + 16);
    int v8 = *v7;
    int v9 = *(_DWORD *)(v3 + 36);
    if (v9 < 0) {
      char v10 = -5;
    }
    else {
      char v10 = 5;
    }
    int v11 = *(_DWORD *)(v6 + 148);
    if (v11) {
      BOOL v12 = v11 == 0x7FFFFFFF;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12)
    {
      BOOL v13 = 0;
      int v14 = *(_DWORD *)(v6 + 144);
      if (v7[2] != 1) {
        goto LABEL_19;
      }
    }
    else
    {
      int v16 = *(_DWORD *)(v3 + 32);
      if (v16 < 0) {
        char v17 = -5;
      }
      else {
        char v17 = 5;
      }
      BOOL v13 = v11 < (int)(v16 / -10
                      + v8
                      + (((-103 * (char)(v17 + v16 % 10)) >> 15) & 1)
                      + ((-103 * (char)(v17 + v16 % 10)) >> 10));
      int v14 = *(_DWORD *)(v6 + 144);
      if (v7[2] != 1)
      {
LABEL_19:
        int v18 = v9 / 10;
        int v19 = 103 * (char)(v10 + v9 % 10);
        char v20 = v14 > (int)(v18 + v8 + ((v19 >> 15) & 1) + (v19 >> 10)) || v13;
        if ((v20 & 1) == 0) {
          goto LABEL_23;
        }
LABEL_14:
        char v15 = 1;
        return v15 & 1;
      }
    }
    if (v8 < v14) {
      goto LABEL_14;
    }
  }
LABEL_23:
  if (*(_DWORD *)(v5 + 424 * (void)v4 + 88) != 5)
  {
    char v15 = 0;
    return v15 & 1;
  }
  sub_3585E0((char *)(v5 + 424 * (void)v4), (uint64_t)&v51);
  sub_2FCB1C((uint64_t)&v45, &v51);
  sub_2FCB1C((uint64_t)v40, &v56);
  char v15 = 1;
  unint64_t v21 = v49;
  unint64_t v22 = v50;
  while (1)
  {
    BOOL v23 = v43;
    if (v21 == v22 || v43 == v44)
    {
      if ((v21 == v22) == (v43 == v44)) {
        goto LABEL_55;
      }
      BOOL v24 = v45;
    }
    else
    {
      BOOL v24 = v45;
      if (v46 == v40[1] && v45 == (uint64_t *)v40[0])
      {
LABEL_55:
        char v15 = 1;
        if (!v43) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
    }
    uint64_t v26 = *v24;
    int v27 = (int *)sub_2D5D58(*(void *)(v3 + 8), *v24 & 0xFFFFFFFFFFFFLL);
    int v28 = (unsigned __int16 *)((char *)v27 - *v27);
    if (*v28 < 0x1Du)
    {
      uint64_t v29 = 0;
    }
    else
    {
      uint64_t v29 = v28[14];
      if (v29) {
        uint64_t v29 = *(void *)((char *)v27 + v29);
      }
    }
    if ((v26 & 0xFF000000000000) != 0) {
      uint64_t v30 = -v29;
    }
    else {
      uint64_t v30 = v29;
    }
    sub_29A494(a1[1], v30, &v38);
    int v31 = v38;
    if (v38 == v39)
    {
LABEL_45:
      BOOL v33 = 1;
      if (!v38) {
        goto LABEL_47;
      }
LABEL_46:
      unint64_t v39 = v38;
      operator delete(v38);
      goto LABEL_47;
    }
    while (1)
    {
      unsigned int v32 = v31[3] - 4;
      BOOL v33 = v32 < 0xFFFFFFFD;
      if (v32 >= 0xFFFFFFFD) {
        break;
      }
      v31 += 8;
      if (v31 == v39) {
        goto LABEL_45;
      }
    }
    char v15 = 0;
    if (v38) {
      goto LABEL_46;
    }
LABEL_47:
    if (!v33) {
      break;
    }
    unint64_t v34 = v46;
    double v35 = v45 + 1;
    unint64_t v21 = v49;
    unint64_t v22 = v50;
    unint64_t v36 = ((v50 - (unsigned char *)v49) >> 3) - 1;
    ++v45;
    if (v46 < v36)
    {
      do
      {
        if (v35 != *((uint64_t **)v49 + v34)) {
          break;
        }
        unint64_t v46 = v34 + 1;
        double v35 = (uint64_t *)*((void *)v47 + v34 + 1);
        unint64_t v45 = v35;
        ++v34;
      }
      while (v36 != v46);
    }
  }
  BOOL v23 = v43;
  if (v43)
  {
LABEL_56:
    unint64_t v44 = v23;
    operator delete(v23);
  }
LABEL_57:
  if (__p)
  {
    uint64_t v42 = __p;
    operator delete(__p);
  }
  if (v49)
  {
    unint64_t v50 = v49;
    operator delete(v49);
  }
  if (v47)
  {
    unint64_t v48 = v47;
    operator delete(v47);
  }
  if (v59)
  {
    uint64_t v60 = v59;
    operator delete(v59);
  }
  if (v57)
  {
    unint64_t v58 = v57;
    operator delete(v57);
  }
  if (v54)
  {
    unint64_t v55 = v54;
    operator delete(v54);
  }
  if (v52)
  {
    uint64_t v53 = v52;
    operator delete(v52);
  }
  return v15 & 1;
}

void sub_3F5DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

uint64_t sub_3F5E24(uint64_t *a1, uint64_t **a2)
{
  uint64_t v3 = *a1;
  BOOL v4 = a2[1];
  uint64_t v5 = **a2;
  if (!*(unsigned char *)(*a1 + 30) && sub_358820(v5 + 424 * (void)v4)) {
    goto LABEL_14;
  }
  if (*(unsigned char *)(v3 + 24))
  {
    uint64_t v6 = v5 + 424 * (void)v4;
    uint64_t v7 = *(int **)(v3 + 16);
    int v8 = *v7;
    int v9 = *(_DWORD *)(v3 + 36);
    if (v9 < 0) {
      char v10 = -5;
    }
    else {
      char v10 = 5;
    }
    int v11 = *(_DWORD *)(v6 + 148);
    if (v11) {
      BOOL v12 = v11 == 0x7FFFFFFF;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12)
    {
      BOOL v13 = 0;
      int v14 = *(_DWORD *)(v6 + 144);
      if (v7[2] != 1) {
        goto LABEL_19;
      }
    }
    else
    {
      int v16 = *(_DWORD *)(v3 + 32);
      if (v16 < 0) {
        char v17 = -5;
      }
      else {
        char v17 = 5;
      }
      BOOL v13 = v11 < (int)(v16 / -10
                      + v8
                      + (((-103 * (char)(v17 + v16 % 10)) >> 15) & 1)
                      + ((-103 * (char)(v17 + v16 % 10)) >> 10));
      int v14 = *(_DWORD *)(v6 + 144);
      if (v7[2] != 1)
      {
LABEL_19:
        int v18 = v9 / 10;
        int v19 = 103 * (char)(v10 + v9 % 10);
        char v20 = v14 > (int)(v18 + v8 + ((v19 >> 15) & 1) + (v19 >> 10)) || v13;
        if ((v20 & 1) == 0) {
          goto LABEL_23;
        }
LABEL_14:
        char v15 = 1;
        return v15 & 1;
      }
    }
    if (v8 < v14) {
      goto LABEL_14;
    }
  }
LABEL_23:
  if (*(_DWORD *)(v5 + 424 * (void)v4 + 88) != 5)
  {
    char v15 = 0;
    return v15 & 1;
  }
  sub_3585E0((char *)(v5 + 424 * (void)v4), (uint64_t)&v51);
  sub_2FCB1C((uint64_t)&v45, &v51);
  sub_2FCB1C((uint64_t)v40, &v56);
  char v15 = 1;
  unint64_t v21 = v49;
  unint64_t v22 = v50;
  while (1)
  {
    BOOL v23 = v43;
    if (v21 == v22 || v43 == v44)
    {
      if ((v21 == v22) == (v43 == v44)) {
        goto LABEL_55;
      }
      BOOL v24 = v45;
    }
    else
    {
      BOOL v24 = v45;
      if (v46 == v40[1] && v45 == (uint64_t *)v40[0])
      {
LABEL_55:
        char v15 = 1;
        if (!v43) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
    }
    uint64_t v26 = *v24;
    int v27 = (int *)sub_2D5D58(*(void *)(v3 + 8), *v24 & 0xFFFFFFFFFFFFLL);
    int v28 = (unsigned __int16 *)((char *)v27 - *v27);
    if (*v28 < 0x1Du)
    {
      uint64_t v29 = 0;
    }
    else
    {
      uint64_t v29 = v28[14];
      if (v29) {
        uint64_t v29 = *(void *)((char *)v27 + v29);
      }
    }
    if ((v26 & 0xFF000000000000) != 0) {
      uint64_t v30 = -v29;
    }
    else {
      uint64_t v30 = v29;
    }
    sub_29A494(a1[1], v30, &v38);
    int v31 = v38;
    if (v38 == v39)
    {
LABEL_45:
      BOOL v33 = 1;
      if (!v38) {
        goto LABEL_47;
      }
LABEL_46:
      unint64_t v39 = v38;
      operator delete(v38);
      goto LABEL_47;
    }
    while (1)
    {
      unsigned int v32 = v31[3] - 4;
      BOOL v33 = v32 < 0xFFFFFFFD;
      if (v32 >= 0xFFFFFFFD) {
        break;
      }
      v31 += 8;
      if (v31 == v39) {
        goto LABEL_45;
      }
    }
    char v15 = 0;
    if (v38) {
      goto LABEL_46;
    }
LABEL_47:
    if (!v33) {
      break;
    }
    unint64_t v34 = v46;
    double v35 = v45 + 1;
    unint64_t v21 = v49;
    unint64_t v22 = v50;
    unint64_t v36 = ((v50 - (unsigned char *)v49) >> 3) - 1;
    ++v45;
    if (v46 < v36)
    {
      do
      {
        if (v35 != *((uint64_t **)v49 + v34)) {
          break;
        }
        unint64_t v46 = v34 + 1;
        double v35 = (uint64_t *)*((void *)v47 + v34 + 1);
        unint64_t v45 = v35;
        ++v34;
      }
      while (v36 != v46);
    }
  }
  BOOL v23 = v43;
  if (v43)
  {
LABEL_56:
    unint64_t v44 = v23;
    operator delete(v23);
  }
LABEL_57:
  if (__p)
  {
    uint64_t v42 = __p;
    operator delete(__p);
  }
  if (v49)
  {
    unint64_t v50 = v49;
    operator delete(v49);
  }
  if (v47)
  {
    unint64_t v48 = v47;
    operator delete(v47);
  }
  if (v59)
  {
    uint64_t v60 = v59;
    operator delete(v59);
  }
  if (v57)
  {
    unint64_t v58 = v57;
    operator delete(v57);
  }
  if (v54)
  {
    unint64_t v55 = v54;
    operator delete(v54);
  }
  if (v52)
  {
    uint64_t v53 = v52;
    operator delete(v52);
  }
  return v15 & 1;
}

void sub_3F61CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void sub_3F61F8()
{
}

void *sub_3F620C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_2439408;
  return result;
}

void sub_3F6244(uint64_t a1, void *a2)
{
  *a2 = off_2439408;
}

uint64_t sub_3F626C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_358794(a2);
  if (result) {
    return sub_3588EC(a2) ^ 1;
  }
  return result;
}

uint64_t sub_3F62A4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing24TrafficIncidentsAccessorINS0_11DrivingModeEE12get_closuresERKNS_4data19DirectedRoa"
                     "dSegmentEEUlRKNS4_8IncidentEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl7routing24TrafficIncidentsAccessorINS0_11DrivingModeEE12get_closuresERKNS_4data19"
                                "DirectedRoadSegmentEEUlRKNS4_8IncidentEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing24TrafficIncidentsAccessorINS0_11DrivingModeEE12get_closuresERKNS_4data19DirectedRoadSegmentEEUlRKNS4_8IncidentEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing24TrafficIncidentsAccessorINS0_11DrivingModeEE12get_closuresERKNS_4data19DirectedRoadSegmentEEUlRKNS4_8IncidentEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_3F6314()
{
}

void sub_3F6324()
{
}

void *sub_3F6338()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_2439488;
  return result;
}

void sub_3F6370(uint64_t a1, void *a2)
{
  *a2 = off_2439488;
}

uint64_t sub_3F6398(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_3587B8(a2);
  if (result) {
    return sub_3588EC(a2) ^ 1;
  }
  return result;
}

uint64_t sub_3F63D0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing24TrafficIncidentsAccessorINS0_11DrivingModeEE12get_closuresERKNS_4data19DirectedRoa"
                     "dSegmentEEUlRKNS4_8IncidentEE1_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl7routing24TrafficIncidentsAccessorINS0_11DrivingModeEE12get_closuresERKNS_4data19"
                                "DirectedRoadSegmentEEUlRKNS4_8IncidentEE1_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing24TrafficIncidentsAccessorINS0_11DrivingModeEE12get_closuresERKNS_4data19DirectedRoadSegmentEEUlRKNS4_8IncidentEE1_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing24TrafficIncidentsAccessorINS0_11DrivingModeEE12get_closuresERKNS_4data19DirectedRoadSegmentEEUlRKNS4_8IncidentEE1_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_3F6440()
{
}

void sub_3F6450()
{
}

void *sub_3F6464()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_2439508;
  return result;
}

void sub_3F649C(uint64_t a1, void *a2)
{
  *a2 = off_2439508;
}

uint64_t sub_3F64C4(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 88) == 14) {
    return sub_3588EC(a2) ^ 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_3F64FC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing24TrafficIncidentsAccessorINS0_11DrivingModeEE24get_no_through_incidentsENS_4data21D"
                     "irectedRoadSegmentIdEEUlRKNS4_8IncidentEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl7routing24TrafficIncidentsAccessorINS0_11DrivingModeEE24get_no_through_incidentsE"
                                "NS_4data21DirectedRoadSegmentIdEEUlRKNS4_8IncidentEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing24TrafficIncidentsAccessorINS0_11DrivingModeEE24get_no_through_incidentsENS_4data21DirectedRoadSegmentIdEEUlRKNS4_8IncidentEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing24TrafficIncidentsAccessorINS0_11DrivingModeEE24get_no_through_incidentsENS_4data21DirectedRoadSegmentIdEEUlRKNS4_8IncidentEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_3F656C()
{
}

void sub_3F657C()
{
}

void *sub_3F6590()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_2439588;
  return result;
}

void sub_3F65C8(uint64_t a1, void *a2)
{
  *a2 = off_2439588;
}

uint64_t sub_3F65F0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 88) == 9) {
    return sub_3588EC(a2) ^ 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_3F6628(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing24TrafficIncidentsAccessorINS0_11DrivingModeEE21get_maneuver_closuresENS_4data21Dire"
                     "ctedRoadSegmentIdEEUlRKNS4_8IncidentEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl7routing24TrafficIncidentsAccessorINS0_11DrivingModeEE21get_maneuver_closuresENS_"
                                "4data21DirectedRoadSegmentIdEEUlRKNS4_8IncidentEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing24TrafficIncidentsAccessorINS0_11DrivingModeEE21get_maneuver_closuresENS_4data21DirectedRoadSegmentIdEEUlRKNS4_8IncidentEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing24TrafficIncidentsAccessorINS0_11DrivingModeEE21get_maneuver_closuresENS_4data21DirectedRoadSegmentIdEEUlRKNS4_8IncidentEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_3F6698()
{
}

uint64_t sub_3F66A4(uint64_t *a1, uint64_t **a2)
{
  uint64_t v3 = *a1;
  BOOL v4 = a2[1];
  uint64_t v5 = **a2;
  if (!*(unsigned char *)(*a1 + 30) && sub_358820(v5 + 424 * (void)v4)) {
    goto LABEL_14;
  }
  if (*(unsigned char *)(v3 + 24))
  {
    uint64_t v6 = v5 + 424 * (void)v4;
    uint64_t v7 = *(int **)(v3 + 16);
    int v8 = *v7;
    int v9 = *(_DWORD *)(v3 + 36);
    if (v9 < 0) {
      char v10 = -5;
    }
    else {
      char v10 = 5;
    }
    int v11 = *(_DWORD *)(v6 + 148);
    if (v11) {
      BOOL v12 = v11 == 0x7FFFFFFF;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12)
    {
      BOOL v13 = 0;
      int v14 = *(_DWORD *)(v6 + 144);
      if (v7[2] != 1) {
        goto LABEL_19;
      }
    }
    else
    {
      int v16 = *(_DWORD *)(v3 + 32);
      if (v16 < 0) {
        char v17 = -5;
      }
      else {
        char v17 = 5;
      }
      BOOL v13 = v11 < (int)(v16 / -10
                      + v8
                      + (((-103 * (char)(v17 + v16 % 10)) >> 15) & 1)
                      + ((-103 * (char)(v17 + v16 % 10)) >> 10));
      int v14 = *(_DWORD *)(v6 + 144);
      if (v7[2] != 1)
      {
LABEL_19:
        int v18 = v9 / 10;
        int v19 = 103 * (char)(v10 + v9 % 10);
        char v20 = v14 > (int)(v18 + v8 + ((v19 >> 15) & 1) + (v19 >> 10)) || v13;
        if ((v20 & 1) == 0) {
          goto LABEL_23;
        }
LABEL_14:
        char v15 = 1;
        return v15 & 1;
      }
    }
    if (v8 < v14) {
      goto LABEL_14;
    }
  }
LABEL_23:
  if (*(_DWORD *)(v5 + 424 * (void)v4 + 88) != 5)
  {
    char v15 = 0;
    return v15 & 1;
  }
  sub_3585E0((char *)(v5 + 424 * (void)v4), (uint64_t)&v51);
  sub_2FCB1C((uint64_t)&v45, &v51);
  sub_2FCB1C((uint64_t)v40, &v56);
  char v15 = 1;
  unint64_t v21 = v49;
  unint64_t v22 = v50;
  while (1)
  {
    BOOL v23 = v43;
    if (v21 == v22 || v43 == v44)
    {
      if ((v21 == v22) == (v43 == v44)) {
        goto LABEL_55;
      }
      BOOL v24 = v45;
    }
    else
    {
      BOOL v24 = v45;
      if (v46 == v40[1] && v45 == (uint64_t *)v40[0])
      {
LABEL_55:
        char v15 = 1;
        if (!v43) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
    }
    uint64_t v26 = *v24;
    int v27 = (int *)sub_2D5D58(*(void *)(v3 + 8), *v24 & 0xFFFFFFFFFFFFLL);
    int v28 = (unsigned __int16 *)((char *)v27 - *v27);
    if (*v28 < 0x1Du)
    {
      uint64_t v29 = 0;
    }
    else
    {
      uint64_t v29 = v28[14];
      if (v29) {
        uint64_t v29 = *(void *)((char *)v27 + v29);
      }
    }
    if ((v26 & 0xFF000000000000) != 0) {
      uint64_t v30 = -v29;
    }
    else {
      uint64_t v30 = v29;
    }
    sub_29A494(a1[1], v30, &v38);
    int v31 = v38;
    if (v38 == v39)
    {
LABEL_45:
      BOOL v33 = 1;
      if (!v38) {
        goto LABEL_47;
      }
LABEL_46:
      unint64_t v39 = v38;
      operator delete(v38);
      goto LABEL_47;
    }
    while (1)
    {
      unsigned int v32 = v31[3] - 4;
      BOOL v33 = v32 < 0xFFFFFFFD;
      if (v32 >= 0xFFFFFFFD) {
        break;
      }
      v31 += 8;
      if (v31 == v39) {
        goto LABEL_45;
      }
    }
    char v15 = 0;
    if (v38) {
      goto LABEL_46;
    }
LABEL_47:
    if (!v33) {
      break;
    }
    unint64_t v34 = v46;
    double v35 = v45 + 1;
    unint64_t v21 = v49;
    unint64_t v22 = v50;
    unint64_t v36 = ((v50 - (unsigned char *)v49) >> 3) - 1;
    ++v45;
    if (v46 < v36)
    {
      do
      {
        if (v35 != *((uint64_t **)v49 + v34)) {
          break;
        }
        unint64_t v46 = v34 + 1;
        double v35 = (uint64_t *)*((void *)v47 + v34 + 1);
        unint64_t v45 = v35;
        ++v34;
      }
      while (v36 != v46);
    }
  }
  BOOL v23 = v43;
  if (v43)
  {
LABEL_56:
    unint64_t v44 = v23;
    operator delete(v23);
  }
LABEL_57:
  if (__p)
  {
    uint64_t v42 = __p;
    operator delete(__p);
  }
  if (v49)
  {
    unint64_t v50 = v49;
    operator delete(v49);
  }
  if (v47)
  {
    unint64_t v48 = v47;
    operator delete(v47);
  }
  if (v59)
  {
    uint64_t v60 = v59;
    operator delete(v59);
  }
  if (v57)
  {
    unint64_t v58 = v57;
    operator delete(v57);
  }
  if (v54)
  {
    unint64_t v55 = v54;
    operator delete(v54);
  }
  if (v52)
  {
    uint64_t v53 = v52;
    operator delete(v52);
  }
  return v15 & 1;
}

void sub_3F6A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void sub_3F6A74(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4, int a5)
{
_DWORD *sub_3F72A0(_OWORD *a1, _DWORD *a2)
{
  double v2 = a2;
  long long v9 = *a1;
  if (sub_36630(&v9, a2 - 4))
  {
    BOOL v4 = a1;
    do
      v4 += 4;
    while (!sub_36630(&v9, v4));
  }
  else
  {
    char v5 = a1 + 1;
    do
    {
      BOOL v4 = v5;
      if (v5 >= v2) {
        break;
      }
      BOOL v6 = sub_36630(&v9, v5);
      char v5 = v4 + 4;
    }
    while (!v6);
  }
  if (v4 < v2)
  {
    do
      v2 -= 4;
    while (sub_36630(&v9, v2));
  }
  while (v4 < v2)
  {
    long long v10 = *(_OWORD *)v4;
    *(_OWORD *)BOOL v4 = *(_OWORD *)v2;
    *(_OWORD *)double v2 = v10;
    do
      v4 += 4;
    while (!sub_36630(&v9, v4));
    do
      v2 -= 4;
    while (sub_36630(&v9, v2));
  }
  uint64_t v7 = v4 - 4;
  if (v4 - 4 != (_DWORD *)a1) {
    *a1 = *v7;
  }
  *uint64_t v7 = v9;
  return v4;
}

long long *sub_3F73B4(long long *a1, long long *a2)
{
  uint64_t v4 = 0;
  long long v11 = *a1;
  do
    ++v4;
  while (sub_36630(&a1[v4], &v11));
  char v5 = &a1[v4];
  BOOL v6 = &a1[v4 - 1];
  if (v4 == 1)
  {
    do
    {
      if (v5 >= a2) {
        break;
      }
      --a2;
    }
    while (!sub_36630(a2, &v11));
  }
  else
  {
    do
      --a2;
    while (!sub_36630(a2, &v11));
  }
  if (v5 < a2)
  {
    uint64_t v7 = &a1[v4];
    int v8 = a2;
    do
    {
      long long v12 = *v7;
      long long v9 = v12;
      *uint64_t v7 = *v8;
      *int v8 = v9;
      do
        ++v7;
      while (sub_36630(v7, &v11));
      do
        --v8;
      while (!sub_36630(v8, &v11));
    }
    while (v7 < v8);
    BOOL v6 = v7 - 1;
  }
  if (v6 != a1) {
    *a1 = *v6;
  }
  *BOOL v6 = v11;
  return v6;
}

BOOL sub_3F74D0(__n128 *a1, __n128 *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      BOOL v6 = a2 - 1;
      if (sub_36630(&a2[-1], a1)) {
        goto LABEL_6;
      }
      return 1;
    case 3:
      uint64_t v7 = a1 + 1;
      BOOL v6 = a2 - 1;
      BOOL v8 = sub_36630(&a1[1], a1);
      BOOL v9 = sub_36630(v6, &a1[1]);
      if (v8)
      {
        if (v9)
        {
LABEL_6:
          __n128 v10 = *a1;
          *a1 = *v6;
          *BOOL v6 = v10;
        }
        else
        {
          __n128 v20 = *a1;
          *a1 = *v7;
          *uint64_t v7 = v20;
          if (sub_36630(v6, &a1[1]))
          {
            __n128 v21 = *v7;
            *uint64_t v7 = *v6;
            *BOOL v6 = v21;
          }
        }
      }
      else if (v9)
      {
        __n128 v16 = *v7;
        *uint64_t v7 = *v6;
        *BOOL v6 = v16;
        if (sub_36630(&a1[1], a1))
        {
          __n128 v17 = *a1;
          *a1 = *v7;
          *uint64_t v7 = v17;
        }
      }
      return 1;
    case 4:
      sub_3F77C0(a1, &a1[1], &a1[2], &a2[-1]);
      return 1;
    case 5:
      sub_3F7900(a1, &a1[1], &a1[2], &a1[3], &a2[-1]);
      return 1;
    default:
      long long v11 = a1 + 2;
      long long v12 = a1 + 1;
      BOOL v13 = sub_36630(&a1[1], a1);
      BOOL v14 = sub_36630(&a1[2], &a1[1]);
      if (v13)
      {
        if (v14)
        {
          __n128 v15 = *a1;
          *a1 = *v11;
        }
        else
        {
          __n128 v22 = *a1;
          *a1 = *v12;
          *long long v12 = v22;
          if (!sub_36630(&a1[2], &a1[1])) {
            goto LABEL_23;
          }
          __n128 v15 = *v12;
          *long long v12 = *v11;
        }
        *long long v11 = v15;
      }
      else if (v14)
      {
        __n128 v18 = *v12;
        *long long v12 = *v11;
        *long long v11 = v18;
        if (sub_36630(&a1[1], a1))
        {
          __n128 v19 = *a1;
          *a1 = *v12;
          *long long v12 = v19;
        }
      }
LABEL_23:
      BOOL v23 = a1 + 3;
      if (&a1[3] == a2) {
        return 1;
      }
      uint64_t v24 = 0;
      int v25 = 0;
      break;
  }
  while (!sub_36630(v23, v11))
  {
LABEL_32:
    long long v11 = v23;
    v24 += 16;
    if (++v23 == a2) {
      return 1;
    }
  }
  v28[0] = *v23;
  uint64_t v26 = v24;
  do
  {
    __n128 v27 = (char *)a1 + v26;
    *(__n128 *)((char *)a1 + v26 + 48) = *(__n128 *)((char *)a1 + v26 + 32);
    if (v26 == -32)
    {
      *a1 = v28[0];
      if (++v25 != 8) {
        goto LABEL_32;
      }
      return &v23[1] == a2;
    }
    v26 -= 16;
  }
  while (sub_36630(v28, (_DWORD *)v27 + 4));
  *(__n128 *)((char *)a1 + v26 + 48) = v28[0];
  if (++v25 != 8) {
    goto LABEL_32;
  }
  return &v23[1] == a2;
}

__n128 sub_3F77C0(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  BOOL v8 = sub_36630(a2, a1);
  BOOL v9 = sub_36630(a3, a2);
  if (v8)
  {
    if (v9)
    {
      long long v10 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a3;
LABEL_9:
      *(_OWORD *)a3 = v10;
      goto LABEL_10;
    }
    long long v13 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v13;
    if (sub_36630(a3, a2))
    {
      long long v10 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      goto LABEL_9;
    }
  }
  else if (v9)
  {
    long long v11 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v11;
    if (sub_36630(a2, a1))
    {
      long long v12 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)a2 = v12;
    }
  }
LABEL_10:
  if (sub_36630(a4, a3))
  {
    long long v15 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v15;
    if (sub_36630(a3, a2))
    {
      long long v16 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v16;
      if (sub_36630(a2, a1))
      {
        __n128 result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 sub_3F7900(__n128 *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  sub_3F77C0(a1, a2, a3, a4);
  if (sub_36630(a5, a4))
  {
    long long v11 = *(_OWORD *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)a5 = v11;
    if (sub_36630(a4, a3))
    {
      long long v12 = *(_OWORD *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)a4 = v12;
      if (sub_36630(a3, a2))
      {
        long long v13 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)a3 = v13;
        if (sub_36630(a2, a1))
        {
          __n128 result = *a1;
          *a1 = *(__n128 *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

_DWORD *sub_3F79D0(_DWORD *a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  if (a1 == a2) {
    return a3;
  }
  char v5 = a2;
  uint64_t v7 = (char *)a2 - (char *)a1;
  uint64_t v8 = ((char *)a2 - (char *)a1) >> 4;
  if ((char *)a2 - (char *)a1 >= 17)
  {
    unint64_t v10 = (unint64_t)(v8 - 2) >> 1;
    unint64_t v11 = v10 + 1;
    long long v12 = &a1[4 * v10];
    do
    {
      sub_3F7D18((uint64_t)a1, a4, v8, v12);
      v12 -= 4;
      --v11;
    }
    while (v11);
  }
  long long v13 = v5;
  if (v5 != (_OWORD *)a3)
  {
    if (v7 < 32)
    {
      BOOL v14 = v5;
      do
      {
        if (sub_36630(v14, a1))
        {
          long long v15 = *(_OWORD *)v14;
          *(_OWORD *)BOOL v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
        }
        v14 += 4;
      }
      while (v14 != a3);
LABEL_29:
      long long v13 = a3;
      goto LABEL_30;
    }
    long long v16 = a1 + 4;
    __n128 v17 = v5;
    uint64_t v37 = v7;
    __n128 v38 = a3;
    while (1)
    {
      if (sub_36630(v17, a1))
      {
        long long v18 = *(_OWORD *)v17;
        *(_OWORD *)__n128 v17 = *(_OWORD *)a1;
        *(_OWORD *)a1 = v18;
        if (v7 == 32)
        {
          __n128 v19 = v16;
          int64_t v20 = 1;
          if (!sub_36630(v16, a1)) {
            goto LABEL_22;
          }
        }
        else
        {
          __n128 v19 = a1 + 8;
          if (sub_36630(v16, a1 + 8))
          {
            int64_t v20 = 2;
          }
          else
          {
            __n128 v19 = v16;
            int64_t v20 = 1;
          }
          if (!sub_36630(v19, a1))
          {
LABEL_22:
            long long v40 = *(_OWORD *)a1;
            __n128 v21 = a1;
            do
            {
              BOOL v23 = v19;
              _OWORD *v21 = *(_OWORD *)v19;
              if ((uint64_t)((unint64_t)(v8 - 2) >> 1) < v20) {
                break;
              }
              uint64_t v24 = (2 * v20) | 1;
              __n128 v19 = &a1[4 * v24];
              if (2 * v20 + 2 < v8 && sub_36630(&a1[4 * v24], v19 + 4))
              {
                v19 += 4;
                uint64_t v24 = 2 * v20 + 2;
              }
              BOOL v22 = sub_36630(v19, &v40);
              __n128 v21 = v23;
              int64_t v20 = v24;
            }
            while (!v22);
            _OWORD *v23 = v40;
            uint64_t v7 = v37;
            a3 = v38;
            long long v16 = a1 + 4;
          }
        }
      }
      v17 += 4;
      if (v17 == a3) {
        goto LABEL_29;
      }
    }
  }
LABEL_30:
  if (v7 >= 17)
  {
    uint64_t v25 = (unint64_t)v7 >> 4;
    do
    {
      uint64_t v27 = 0;
      long long v39 = *(_OWORD *)a1;
      int v28 = a1;
      do
      {
        __n128 v29 = &v28[v27 + 1];
        uint64_t v30 = (2 * v27) | 1;
        uint64_t v31 = 2 * v27 + 2;
        if (v31 < v25 && sub_36630(&v28[v27 + 1], &v28[v27 + 2]))
        {
          v29 += 4;
          uint64_t v30 = v31;
        }
        *int v28 = *(_OWORD *)v29;
        int v28 = v29;
        uint64_t v27 = v30;
      }
      while (v30 <= (uint64_t)((unint64_t)(v25 - 2) >> 1));
      if (v29 == (_DWORD *)--v5)
      {
        *(_OWORD *)__n128 v29 = v39;
      }
      else
      {
        *(_OWORD *)__n128 v29 = *v5;
        _OWORD *v5 = v39;
        uint64_t v32 = (char *)v29 - (char *)a1 + 16;
        if (v32 >= 17)
        {
          unint64_t v33 = (((unint64_t)v32 >> 4) - 2) >> 1;
          BOOL v34 = &a1[4 * v33];
          if (sub_36630(v34, v29))
          {
            long long v40 = *(_OWORD *)v29;
            do
            {
              __n128 v35 = v34;
              *(_OWORD *)__n128 v29 = *(_OWORD *)v34;
              if (!v33) {
                break;
              }
              unint64_t v33 = (v33 - 1) >> 1;
              BOOL v34 = &a1[4 * v33];
              __n128 v29 = v35;
            }
            while (sub_36630(v34, &v40));
            *__n128 v35 = v40;
          }
        }
      }
    }
    while (v25-- > 2);
  }
  return v13;
}

double sub_3F7D18(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v20 = v4;
    uint64_t v21 = v5;
    uint64_t v7 = a4;
    int64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - a1) >> 4)
    {
      uint64_t v11 = ((uint64_t)a4 - a1) >> 3;
      uint64_t v12 = v11 + 1;
      long long v13 = (_DWORD *)(a1 + 16 * (v11 + 1));
      uint64_t v14 = v11 + 2;
      if (v11 + 2 < a3 && sub_36630((_DWORD *)(a1 + 16 * (v11 + 1)), v13 + 4))
      {
        v13 += 4;
        uint64_t v12 = v14;
      }
      if (!sub_36630(v13, v7))
      {
        long long v19 = *(_OWORD *)v7;
        do
        {
          long long v16 = v13;
          *(_OWORD *)uint64_t v7 = *(_OWORD *)v13;
          if (v9 < v12) {
            break;
          }
          uint64_t v17 = (2 * v12) | 1;
          long long v13 = (_DWORD *)(a1 + 16 * v17);
          uint64_t v18 = 2 * v12 + 2;
          if (v18 < a3 && sub_36630((_DWORD *)(a1 + 16 * v17), v13 + 4))
          {
            v13 += 4;
            uint64_t v17 = v18;
          }
          uint64_t v7 = v16;
          uint64_t v12 = v17;
        }
        while (!sub_36630(v13, &v19));
        double result = *(double *)&v19;
        _OWORD *v16 = v19;
      }
    }
  }
  return result;
}

char *sub_3F7E3C(void **a1, uint64_t *a2, uint64_t a3, void *a4)
{
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666) {
    sub_2E00();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v6) {
    unint64_t v6 = 0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x333333333333333) {
    unint64_t v10 = 0x666666666666666;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x666666666666666) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(40 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v21 = &v11[40 * v5];
  BOOL v22 = &v11[40 * v10];
  sub_358F78(v21, a2, a3, a4);
  uint64_t v12 = v21 + 40;
  long long v13 = (char *)*a1;
  uint64_t v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v21;
    a1[1] = v12;
    a1[2] = v22;
  }
  else
  {
    uint64_t v15 = 0;
    do
    {
      long long v16 = &v21[v15];
      uint64_t v17 = &v14[v15];
      *((void *)v16 - 5) = *(void *)&v14[v15 - 40];
      *((void *)v16 - 4) = 0;
      *((void *)v16 - 3) = 0;
      *((void *)v16 - 2) = 0;
      *((_OWORD *)v16 - 2) = *(_OWORD *)&v14[v15 - 32];
      *((void *)v16 - 2) = *(void *)&v14[v15 - 16];
      *((void *)v17 - 4) = 0;
      *((void *)v17 - 3) = 0;
      *((void *)v17 - 2) = 0;
      *((void *)v16 - 1) = *(void *)&v14[v15 - 8];
      v15 -= 40;
    }
    while (&v14[v15] != v13);
    uint64_t v18 = (char *)*a1;
    uint64_t v14 = (char *)a1[1];
    *a1 = &v21[v15];
    a1[1] = v12;
    a1[2] = v22;
    if (v14 != v18)
    {
      do
      {
        long long v19 = (void *)*((void *)v14 - 4);
        if (v19)
        {
          *((void *)v14 - 3) = v19;
          operator delete(v19);
        }
        v14 -= 40;
      }
      while (v14 != v18);
      uint64_t v14 = v18;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v21 + 40;
}

void sub_3F8000(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3F8014((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_3F8014(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v4 = v2 - 40;
        *(void *)(a1 + 16) = v2 - 40;
        unint64_t v5 = *(void **)(v2 - 32);
        if (!v5) {
          break;
        }
        *(void *)(v2 - 24) = v5;
        operator delete(v5);
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      v2 -= 40;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

double sub_3F8084()
{
  byte_25580B7 = 1;
  word_25580A0 = 65;
  byte_25580CF = 1;
  word_25580B8 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_2558100 = 0u;
  *(_OWORD *)&qword_2558110 = 0u;
  dword_2558120 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2558100, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_2558100, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_2558100, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_2558100, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  qword_25580D8 = 0;
  qword_25580E0 = 0;
  qword_25580D0 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25580D0 = (uint64_t)v0;
  qword_25580D8 = (uint64_t)(v0 + 9);
  qword_25580E0 = (uint64_t)(v0 + 9);
  qword_25580E8 = 0;
  qword_25580F0 = 0;
  unk_25580F8 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25580F0 = (uint64_t)(v1 + 9);
  unk_25580F8 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25580E8 = (uint64_t)v1;
  return result;
}

void sub_3F82C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_2558110) {
    sub_20A8254((void **)qword_2558110);
  }
  uint64_t v37 = (void *)xmmword_2558100;
  *(void *)&xmmword_2558100 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_3F8360@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (result == 1)
  {
    a2[23] = 6;
    strcpy(a2, "hiking");
  }
  else if (result)
  {
    a2[23] = 0;
    *a2 = 0;
  }
  else
  {
    a2[23] = 4;
    strcpy(a2, "none");
  }
  return result;
}

uint64_t sub_3F83B8(uint64_t *a1, const char *a2, unsigned __int8 *a3, const char *a4, const char *a5, const char *a6)
{
  sub_E1B4((uint64_t)v18);
  sub_2DD928(v19, *a1);
  size_t v12 = strlen(a2);
  sub_188FC78(v19, (uint64_t)a2, v12);
  sub_670FC(v19, *a3);
  size_t v13 = strlen(a4);
  sub_188FC78(v19, (uint64_t)a4, v13);
  size_t v14 = strlen(a5);
  sub_188FC78(v19, (uint64_t)a5, v14);
  size_t v15 = strlen(a6);
  sub_188FC78(v19, (uint64_t)a6, v15);
  std::stringbuf::str();
  *(void *)((char *)v18
  v19[0] = v16;
  if (v20 < 0) {
    operator delete((void *)v19[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_3F85BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_3F85D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_3F85E4(unsigned int *a1, uint64_t a2)
{
  int v4 = a1[1];
  unint64_t v14 = (((unint64_t)(v4 & 0x10000000) << 20) | ((unint64_t)(unsigned __int16)v4 << 32) | *a1) ^ 0x1000000000000;
  int v5 = (v4 >> 30) & 1;
  if ((v4 & 0x20000000) != 0) {
    LOBYTE(v5) = 2;
  }
  unsigned __int8 v13 = v5;
  if (v4 >= 0) {
    unint64_t v6 = "n";
  }
  else {
    unint64_t v6 = "y";
  }
  sub_3F83B8((uint64_t *)&v14, "(", &v13, ")(restricted=", v6, ")");
  unsigned int v7 = a1[1];
  int v8 = (int *)sub_2D5D58(a2, *a1 | ((unint64_t)(unsigned __int16)v7 << 32));
  int64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v9 < 0x1Du)
  {
    unint64_t v10 = 0;
  }
  else
  {
    unint64_t v10 = v9[14];
    if (v10) {
      unint64_t v10 = *(void *)((char *)v8 + v10);
    }
  }
  if ((v7 & 0x10000000) == 0) {
    unint64_t v10 = -(uint64_t)v10;
  }
  unint64_t v14 = v10;
  sub_3D1670((uint64_t)&__p, "(geo_id: ", (uint64_t)&v14, ")");
  if (v12 < 0) {
    operator delete(__p);
  }
}

void sub_3F871C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_3F8738(void *a1, uint64_t a2)
{
  unint64_t v11 = (a2 & 0xFFFFFFFFFFFFLL | ((((unint64_t)a2 >> 60) & 1) << 48)) ^ 0x1000000000000;
  if ((a2 & 0x2000000000000000) != 0) {
    char v3 = 2;
  }
  else {
    char v3 = (a2 & 0x4000000000000000) != 0;
  }
  char v10 = v3;
  if (a2 >= 0) {
    int v4 = "n";
  }
  else {
    int v4 = "y";
  }
  sub_3F83B8((uint64_t *)&v11, "(", (unsigned __int8 *)&v10, ")(restricted=", v4, ")");
  if ((v9 & 0x80u) == 0) {
    int v5 = __p;
  }
  else {
    int v5 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    uint64_t v6 = v9;
  }
  else {
    uint64_t v6 = (uint64_t)__p[1];
  }
  sub_188FC78(a1, (uint64_t)v5, v6);
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_3F8818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_3F8834()
{
  byte_255813F = 1;
  word_2558128 = 65;
}

void *sub_3F8850(void *result)
{
  *double result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

unint64_t **sub_3F885C(unint64_t **a1, unsigned int a2, unsigned int a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v6 = (unint64_t *)operator new(8uLL);
  *a1 = v6;
  *v6++ = a2 | ((unint64_t)a3 << 32);
  a1[1] = v6;
  a1[2] = v6;
  return a1;
}

__n128 sub_3F88B0(__n128 *a1, __n128 *a2)
{
  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  __n128 result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_3F88D4(unsigned int **a1)
{
  return **a1;
}

uint64_t sub_3F88E0(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) - 4);
}

uint64_t sub_3F88EC(_DWORD *a1, _DWORD *a2, int a3)
{
  int v3 = a1[1];
  double v4 = (double)(a3 - *a1) / (double)(*a2 - *a1) * (double)(a2[1] - v3);
  if (v4 >= 0.0)
  {
    if (v4 < 4.50359963e15)
    {
      uint64_t v5 = (uint64_t)(v4 + v4) + 1;
LABEL_8:
      double v4 = (double)(v5 >> 1);
    }
  }
  else if (v4 > -4.50359963e15)
  {
    uint64_t v5 = (uint64_t)(v4 + v4);
    if (v5 >= 1) {
      --v5;
    }
    goto LABEL_8;
  }
  return (v3 + (int)v4);
}

unint64_t sub_3F8970(char **a1, signed int a2)
{
  uint64_t v2 = *a1;
  int v3 = a1[1];
  if (*a1 == v3) {
    return 0x7FFFFFFF7FFFFFFFLL;
  }
  if (v3 - v2 < 8) {
    return *(void *)v2 | (HIDWORD(*(void *)v2) << 32);
  }
  double v4 = *a1;
  if (v3 - v2 != 8)
  {
    unint64_t v5 = (unint64_t)(v3 - v2) >> 3;
    double v4 = *a1;
    do
    {
      unint64_t v6 = (2 * v5) & 0xFFFFFFFFFFFFFFF8;
      _X14 = &v4[v6];
      __asm { PRFM            #0, [X14] }
      unsigned __int8 v13 = &v4[8 * (v5 >> 1)];
      _X13 = &v13[v6];
      __asm { PRFM            #0, [X13] }
      if (*((_DWORD *)v13 + 1) <= a2) {
        unint64_t v16 = v5 >> 1;
      }
      else {
        unint64_t v16 = 0;
      }
      v4 += 8 * v16;
      v5 -= v5 >> 1;
    }
    while ((uint64_t)v5 > 1);
  }
  uint64_t v17 = &v4[8 * (*((_DWORD *)v4 + 1) <= a2)];
  if (v17 == v2) {
    return *(void *)v2 | (HIDWORD(*(void *)v2) << 32);
  }
  if (v17 == v3) {
    return *((void *)v3 - 1) | (HIDWORD(*((void *)v3 - 1)) << 32);
  }
  int v18 = *((_DWORD *)v17 - 1);
  double v19 = 0.0;
  int v20 = *(_DWORD *)&v2[8 * ((v17 - v2) >> 3) + 4] - v18;
  if (v20) {
    double v19 = (double)(a2 - v18) / (double)v20;
  }
  int v21 = *((_DWORD *)v17 - 2);
  double v22 = v19 * (double)(*(_DWORD *)v17 - v21);
  if (v22 >= 0.0)
  {
    if (v22 < 4.50359963e15)
    {
      uint64_t v23 = (uint64_t)(v22 + v22) + 1;
LABEL_23:
      double v22 = (double)(v23 >> 1);
    }
  }
  else if (v22 > -4.50359963e15)
  {
    uint64_t v23 = (uint64_t)(v22 + v22);
    if (v23 >= 1) {
      --v23;
    }
    goto LABEL_23;
  }
  return (v21 + (int)v22) | ((unint64_t)a2 << 32);
}

uint64_t sub_3F8AF8(char **a1, signed int a2, signed int a3)
{
  if (*a1 == a1[1]) {
    return 0x7FFFFFFFLL;
  }
  int v5 = *(_DWORD *)*a1;
  int v6 = sub_3F8970(a1, a2);
  int v7 = sub_3F8970(a1, a3);
  return ((v7 - v6) & ~((v7 - v6) >> 31)) + v5;
}

uint64_t sub_3F8B6C(uint64_t a1, void *a2)
{
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9240;
  strcpy((char *)__p[0], "charging_station_unusable_probability");
  double v4 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)a1 = v4;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "port_unavailable_probability");
  double v5 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 8) = v5;
  __p[0] = operator new(0x40uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9A90;
  strcpy((char *)__p[0], "average_remaining_energy_charged_by_vehicles_using_ports_wh");
  *(_DWORD *)(a1 + 16) = llround(sub_5C7E8(a2, (uint64_t)__p) * 1000.0);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9260;
  strcpy((char *)__p[0], "average_direct_distance_speed_kph");
  *(double *)(a1 + 24) = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  strcpy((char *)__p, "ev_stranding_penalty_s");
  HIBYTE(__p[2]) = 22;
  *(_DWORD *)(a1 + 32) = sub_5D2EC(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "tier_1_penalty_s");
  *(_DWORD *)(a1 + 36) = sub_5D2EC(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "tier_2_penalty_s");
  *(_DWORD *)(a1 + 40) = sub_5D2EC(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "tier_3_penalty_s");
  *(_DWORD *)(a1 + 44) = sub_5D2EC(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "tier_4_penalty_s");
  *(_DWORD *)(a1 + 48) = sub_5D2EC(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_3F8E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3F8E9C(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  long long __p = operator new(0x20uLL);
  long long v23 = xmmword_20B91B0;
  strcpy((char *)__p, "charging_stop_waiting_time_s");
  *(_DWORD *)a1 = sub_5D2EC(a3, &__p);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p);
  }
  *(_DWORD *)(a1 + 4) = 0;
  long long v8 = *a4;
  long long v9 = a4[1];
  long long v10 = a4[2];
  *(void *)(a1 + 56) = *((void *)a4 + 6);
  *(_OWORD *)(a1 + 40) = v10;
  *(_OWORD *)(a1 + 24) = v9;
  *(_OWORD *)(a1 + 8) = v8;
  uint64_t v11 = sub_37D0C0(a2);
  unsigned __int8 v13 = *(char **)v11;
  char v12 = *(char **)(v11 + 8);
  if (*(char **)v11 != v12)
  {
    int v14 = *(_DWORD *)(a1 + 4);
    unint64_t v15 = v12 - v13 - 12;
    if (v15 >= 0xC)
    {
      int v17 = 0;
      unint64_t v18 = v15 / 0xC + 1;
      unint64_t v16 = &v13[12 * (v18 & 0x3FFFFFFFFFFFFFFELL)];
      uint64_t v19 = v18 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        v14 |= 1 << *v13;
        v17 |= 1 << v13[12];
        v13 += 24;
        v19 -= 2;
      }
      while (v19);
      v14 |= v17;
      if (v18 == (v18 & 0x3FFFFFFFFFFFFFFELL)) {
        goto LABEL_10;
      }
    }
    else
    {
      unint64_t v16 = *(char **)v11;
    }
    do
    {
      char v20 = *v16;
      v16 += 12;
      v14 |= 1 << v20;
    }
    while (v16 != v12);
LABEL_10:
    *(_DWORD *)(a1 + 4) = v14;
  }
  return a1;
}

void sub_3F8FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3F9018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v7 = *(unsigned char **)(a2 + 24);
  int v6 = *(unsigned char **)(a2 + 32);
  long long v8 = v7 + 48;
  BOOL v9 = v7 == v6 || v8 == v6;
  long long v10 = *(unsigned char **)(a2 + 24);
  if (!v9)
  {
    unsigned int v11 = *(_DWORD *)(a1 + 4);
    char v12 = *v7;
    long long v10 = *(unsigned char **)(a2 + 24);
    do
    {
      unsigned int v13 = v11 >> *v8;
      BOOL v14 = *((_DWORD *)v10 + 1) < *((_DWORD *)v8 + 1);
      if (((v11 >> v12) ^ v13)) {
        BOOL v14 = v13;
      }
      if (v14)
      {
        char v12 = *v8;
        long long v10 = v8;
      }
      v8 += 48;
    }
    while (v8 != v6);
  }
  unsigned int v15 = *(_DWORD *)(a1 + 4);
  if (((v15 >> *v10) & 1) == 0) {
    return 0x7FFFFFFFLL;
  }
  double v16 = (double)*((int *)v10 + 1);
  double v17 = (double)*(int *)(a1 + 24) / 1000.0 / (v16 / 1000.0) * 60.0 * 60.0 * 10.0;
  if (v17 >= 0.0)
  {
    if (v17 >= 4.50359963e15) {
      goto LABEL_21;
    }
    uint64_t v18 = (uint64_t)(v17 + v17) + 1;
  }
  else
  {
    if (v17 <= -4.50359963e15) {
      goto LABEL_21;
    }
    uint64_t v18 = (uint64_t)(v17 + v17);
    if (v18 >= 1) {
      --v18;
    }
  }
  double v17 = (double)(v18 >> 1);
LABEL_21:
  if (v7 == v6)
  {
    uint64_t v26 = 0;
    goto LABEL_56;
  }
  double v20 = v16 * 0.666;
  uint64_t v21 = (uint64_t)(v20 + v20);
  if (v21 >= 1) {
    uint64_t v22 = v21 - 1;
  }
  else {
    uint64_t v22 = (uint64_t)(v20 + v20);
  }
  unint64_t v23 = v6 - v7 - 48;
  unint64_t v24 = v23 / 0x30 + 1;
  if (v20 >= 0.0)
  {
    if (v20 < 4.50359963e15)
    {
      unint64_t v28 = (unint64_t)(v21 + 1) >> 1;
      if (v23 >= 0x30)
      {
        uint64_t v42 = 0;
        uint64_t v43 = 0;
        __n128 v29 = &v7[48 * (v24 & 0xFFFFFFFFFFFFFFELL)];
        unint64_t v44 = v7 + 52;
        uint64_t v45 = v24 & 0xFFFFFFFFFFFFFFELL;
        do
        {
          char v46 = *((unsigned char *)v44 - 52);
          char v47 = *((unsigned char *)v44 - 4);
          int v48 = *(v44 - 12);
          int v49 = *v44;
          v44 += 24;
          v42 += (v15 >> v46) & (v48 > (int)v28);
          v43 += (v15 >> v47) & (v49 > (int)v28);
          v45 -= 2;
        }
        while (v45);
        uint64_t v26 = v43 + v42;
        if (v24 == (v24 & 0xFFFFFFFFFFFFFFELL)) {
          goto LABEL_56;
        }
      }
      else
      {
        uint64_t v26 = 0;
        __n128 v29 = *(unsigned char **)(a2 + 24);
      }
      do
      {
        v26 += (v15 >> *v29) & (*((_DWORD *)v29 + 1) > (int)v28);
        v29 += 48;
      }
      while (v29 != v6);
      goto LABEL_56;
    }
    int v32 = (int)v20;
    if (v23 >= 0x30)
    {
      uint64_t v58 = 0;
      uint64_t v59 = 0;
      unint64_t v33 = &v7[48 * (v24 & 0xFFFFFFFFFFFFFFELL)];
      uint64_t v60 = v7 + 52;
      uint64_t v61 = v24 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        char v62 = *((unsigned char *)v60 - 52);
        char v63 = *((unsigned char *)v60 - 4);
        int v64 = *(v60 - 12);
        int v65 = *v60;
        v60 += 24;
        v58 += (v15 >> v62) & (v64 > v32);
        v59 += (v15 >> v63) & (v65 > v32);
        v61 -= 2;
      }
      while (v61);
      uint64_t v26 = v59 + v58;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFELL)) {
        goto LABEL_56;
      }
    }
    else
    {
      uint64_t v26 = 0;
      unint64_t v33 = *(unsigned char **)(a2 + 24);
    }
    do
    {
      v26 += (v15 >> *v33) & (*((_DWORD *)v33 + 1) > v32);
      v33 += 48;
    }
    while (v33 != v6);
    goto LABEL_56;
  }
  if (v20 <= -4.50359963e15)
  {
    int v30 = (int)v20;
    if (v23 >= 0x30)
    {
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      uint64_t v31 = &v7[48 * (v24 & 0xFFFFFFFFFFFFFFELL)];
      unint64_t v52 = v7 + 52;
      uint64_t v53 = v24 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        char v54 = *((unsigned char *)v52 - 52);
        char v55 = *((unsigned char *)v52 - 4);
        int v56 = *(v52 - 12);
        int v57 = *v52;
        v52 += 24;
        v50 += (v15 >> v54) & (v56 > v30);
        v51 += (v15 >> v55) & (v57 > v30);
        v53 -= 2;
      }
      while (v53);
      uint64_t v26 = v51 + v50;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFELL)) {
        goto LABEL_56;
      }
    }
    else
    {
      uint64_t v26 = 0;
      uint64_t v31 = *(unsigned char **)(a2 + 24);
    }
    do
    {
      v26 += (v15 >> *v31) & (*((_DWORD *)v31 + 1) > v30);
      v31 += 48;
    }
    while (v31 != v6);
    goto LABEL_56;
  }
  uint64_t v25 = v22 >> 1;
  if (v23 < 0x30)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *(unsigned char **)(a2 + 24);
    do
    {
LABEL_40:
      v26 += (v15 >> *v27) & (*((_DWORD *)v27 + 1) > (int)v25);
      v27 += 48;
    }
    while (v27 != v6);
    goto LABEL_56;
  }
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v27 = &v7[48 * (v24 & 0xFFFFFFFFFFFFFFELL)];
  unint64_t v36 = v7 + 52;
  uint64_t v37 = v24 & 0xFFFFFFFFFFFFFFELL;
  do
  {
    char v38 = *((unsigned char *)v36 - 52);
    char v39 = *((unsigned char *)v36 - 4);
    int v40 = *(v36 - 12);
    int v41 = *v36;
    v36 += 24;
    v34 += (v15 >> v38) & (v40 > (int)v25);
    v35 += (v15 >> v39) & (v41 > (int)v25);
    v37 -= 2;
  }
  while (v37);
  uint64_t v26 = v35 + v34;
  if (v24 != (v24 & 0xFFFFFFFFFFFFFFELL)) {
    goto LABEL_40;
  }
LABEL_56:
  long double v66 = *(double *)(a1 + 8);
  double v67 = pow(*(long double *)(a1 + 16), (double)v26) * (double)(int)v17;
  if (v67 >= 0.0)
  {
    if (v67 >= 4.50359963e15) {
      goto LABEL_64;
    }
    uint64_t v68 = (uint64_t)(v67 + v67) + 1;
  }
  else
  {
    if (v67 <= -4.50359963e15) {
      goto LABEL_64;
    }
    uint64_t v68 = (uint64_t)(v67 + v67);
    if (v68 >= 1) {
      --v68;
    }
  }
  double v67 = (double)(v68 >> 1);
LABEL_64:
  switch(*(unsigned char *)(a2 + 48))
  {
    case 0:
    case 4:
      int v69 = *(_DWORD *)(a1 + 56);
      break;
    case 1:
      int v69 = *(_DWORD *)(a1 + 44);
      break;
    case 2:
      int v69 = *(_DWORD *)(a1 + 48);
      break;
    case 3:
      int v69 = *(_DWORD *)(a1 + 52);
      break;
    default:
      int v69 = 0x7FFFFFFF;
      break;
  }
  double v70 = (1.0 - v66) * (double)(v69 + (int)v67);
  uint64_t v71 = (uint64_t)(v70 + v70);
  uint64_t v72 = v71 - 1;
  if (v71 < 1) {
    uint64_t v72 = (uint64_t)(v70 + v70);
  }
  uint64_t v73 = v72 >> 1;
  if (v70 > -4.50359963e15) {
    double v74 = (double)v73;
  }
  else {
    double v74 = v70;
  }
  uint64_t v75 = (v71 + 1) >> 1;
  if (v70 < 4.50359963e15) {
    double v76 = (double)v75;
  }
  else {
    double v76 = v70;
  }
  if (v70 >= 0.0) {
    double v77 = v76;
  }
  else {
    double v77 = v74;
  }
  double v78 = (double)*(uint64_t *)(a3 + 8) / 100000.0 / *(double *)(a1 + 32) * 60.0 * 60.0 * 10.0;
  if (v78 >= 0.0)
  {
    if (v78 >= 4.50359963e15) {
      goto LABEL_89;
    }
    uint64_t v79 = (uint64_t)(v78 + v78) + 1;
  }
  else
  {
    if (v78 <= -4.50359963e15) {
      goto LABEL_89;
    }
    uint64_t v79 = (uint64_t)(v78 + v78);
    if (v79 >= 1) {
      --v79;
    }
  }
  double v78 = (double)(v79 >> 1);
LABEL_89:
  int v80 = (int)v77;
  double v81 = v66 * (double)(int)v78;
  if (v81 >= 0.0)
  {
    if (v81 < 4.50359963e15)
    {
      uint64_t v82 = (uint64_t)(v81 + v81) + 1;
LABEL_96:
      double v81 = (double)(v82 >> 1);
    }
  }
  else if (v81 > -4.50359963e15)
  {
    uint64_t v82 = (uint64_t)(v81 + v81);
    if (v82 >= 1) {
      --v82;
    }
    goto LABEL_96;
  }
  int v83 = (int)v81;
  double v84 = pow(v66, (double)(*(_DWORD *)a3 + 1)) * (double)*(int *)(a1 + 40);
  uint64_t v85 = (uint64_t)(v84 + v84);
  uint64_t v86 = v85 - 1;
  if (v85 < 1) {
    uint64_t v86 = (uint64_t)(v84 + v84);
  }
  uint64_t v87 = v86 >> 1;
  if (v84 > -4.50359963e15) {
    double v88 = (double)v87;
  }
  else {
    double v88 = v84;
  }
  double v89 = (double)((v85 + 1) >> 1);
  if (v84 >= 4.50359963e15) {
    double v89 = v84;
  }
  if (v84 >= 0.0) {
    double v90 = v89;
  }
  else {
    double v90 = v88;
  }
  return (v83 + v80 + *(_DWORD *)a1 + (int)v90);
}

void sub_3F9760()
{
  unk_2558157 = 16641;
  word_2558140 = 65;
  byte_255816F = 1;
  byte_2558159 = 0;
}

BOOL *sub_3F9788(BOOL *a1, void *a2)
{
  long long __p = operator new(0x30uLL);
  long long v8 = xmmword_20B93C0;
  strcpy((char *)__p, "modify_user_route_stops_based_on_purpose");
  BOOL v4 = sub_29D62C(a2, (uint64_t)&__p);
  BOOL v5 = v4;
  if (SHIBYTE(v8) < 0)
  {
    operator delete(__p);
    *a1 = v5;
  }
  else
  {
    *a1 = v4;
  }
  return a1;
}

void sub_3F9828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_3F9844(uint64_t a1, uint64_t *a2, void *a3)
{
  if (*a2 == a2[1]) {
    return;
  }
  BOOL v5 = (uint64_t *)sub_376F8C(a3);
  int v6 = v5;
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = *a2;
  if (*a2 != v8)
  {
    uint64_t v9 = *a2;
    while (*(_DWORD *)(v9 + 104))
    {
      v9 += 376;
      if (v9 == v8) {
        goto LABEL_10;
      }
    }
  }
  if (v9 == v8)
  {
LABEL_10:
    uint64_t v12 = 0;
    unint64_t v11 = 0xFFFFFFFF00000000;
    long long __p = 0;
    int v40 = 0;
    uint64_t v41 = 0;
    p_p = &__p;
    if (v7 == v8) {
      goto LABEL_33;
    }
  }
  else
  {
    unint64_t v10 = sub_28CD20(v5, *(void *)(v9 + 16));
    unint64_t v11 = v10 & 0xFFFFFFFF00000000;
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    uint64_t v12 = v10;
    long long __p = 0;
    int v40 = 0;
    uint64_t v41 = 0;
    p_p = &__p;
    if (v7 == v8) {
      goto LABEL_33;
    }
  }
  do
  {
    if (*(_DWORD *)(v7 + 104) == 2)
    {
      unint64_t v42 = sub_28CD20(v6, *(void *)(v7 + 16));
      sub_2A98DC(&p_p, &v42);
    }
    v7 += 376;
  }
  while (v7 != v8);
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  if (*a2 == v14) {
    goto LABEL_33;
  }
  unint64_t v15 = v14 - v13 - 376;
  if (v15 < 0x178)
  {
    uint64_t v16 = 0;
    uint64_t v17 = *a2;
    do
    {
LABEL_25:
      if (*(_DWORD *)(v17 + 104) == 1) {
        ++v16;
      }
      v17 += 376;
    }
    while (v17 != v14);
    goto LABEL_28;
  }
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  unint64_t v20 = v15 / 0x178 + 1;
  uint64_t v17 = v13 + 376 * (v20 & 0x1FFFFFFFFFFFFFELL);
  uint64_t v21 = v20 & 0x1FFFFFFFFFFFFFELL;
  uint64_t v22 = *a2;
  do
  {
    if (*(_DWORD *)(v22 + 104) == 1) {
      ++v18;
    }
    if (*(_DWORD *)(v22 + 480) == 1) {
      ++v19;
    }
    v22 += 752;
    v21 -= 2;
  }
  while (v21);
  uint64_t v16 = v19 + v18;
  if (v20 != (v20 & 0x1FFFFFFFFFFFFFELL)) {
    goto LABEL_25;
  }
LABEL_28:
  if (v16 == 1)
  {
    while (*(_DWORD *)(v13 + 104) != 1)
    {
      v13 += 376;
      if (v13 == v14)
      {
        uint64_t v13 = a2[1];
        break;
      }
    }
    unint64_t v23 = sub_28CD20(v6, *(void *)(v13 + 16));
    unint64_t v24 = v23 & 0xFFFFFFFF00000000;
    uint64_t v25 = v23;
    goto LABEL_34;
  }
LABEL_33:
  uint64_t v25 = 0;
  unint64_t v24 = 0xFFFFFFFF00000000;
LABEL_34:
  uint64_t v26 = *(void *)(a1 + 8);
  uint64_t v28 = *(void *)(a1 + 16);
  uint64_t v27 = (void *)(a1 + 8);
  unint64_t v29 = ((v40 - (unsigned char *)__p) >> 3) + 1;
  unint64_t v30 = 0x6DB6DB6DB6DB6DB7 * ((v28 - v26) >> 3);
  if (v29 <= v30)
  {
    if (v29 < v30)
    {
      uint64_t v31 = v26 + 56 * v29;
      while (v28 != v31)
      {
        int v32 = *(void **)(v28 - 24);
        if (v32)
        {
          do
          {
            unint64_t v33 = (void *)*v32;
            operator delete(v32);
            int v32 = v33;
          }
          while (v33);
        }
        uint64_t v34 = *(void **)(v28 - 40);
        *(void *)(v28 - 40) = 0;
        if (v34) {
          operator delete(v34);
        }
        v28 -= 56;
      }
      *(void *)(a1 + 16) = v31;
    }
  }
  else
  {
    sub_3FA7EC((void **)(a1 + 8), v29 - v30);
  }
  if (v40 != __p)
  {
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = (v40 - (unsigned char *)__p) >> 3;
    do
    {
      uint64_t v38 = 8 * v36;
      *(void *)(*v27 + v35 + 8) = *((void *)__p + v36++);
      *(void *)(*v27 + v35 + 56) = *(void *)((char *)__p + v38);
      v35 += 56;
    }
    while (v37 != v36);
  }
  **(void **)(a1 + 8) = v11 | v12;
  *(void *)(*(void *)(a1 + 16) - 48) = v24 | v25;
  if (__p)
  {
    int v40 = __p;
    operator delete(__p);
  }
}

void sub_3F9B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3F9B90(uint64_t a1, uint64_t *a2, unint64_t **a3, unsigned char *a4, void *a5)
{
  *(unsigned char *)a1 = *a4;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 32) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  uint64_t v8 = a1 + 80;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  uint64_t v9 = *a3;
  unint64_t v10 = a3[1];
  if (*a3 != v10)
  {
    do
    {
      sub_3FA3B0(v8, v9, v9);
      ++v9;
    }
    while (v9 != v10);
  }
  sub_3F9844(a1, a2, a5);
  return a1;
}

void sub_3F9C50(_Unwind_Exception *exception_object)
{
  int v6 = *(void **)(v1 + 96);
  if (v6)
  {
    do
    {
      uint64_t v7 = (void *)*v6;
      operator delete(v6);
      int v6 = v7;
    }
    while (v7);
  }
  uint64_t v8 = *v2;
  char *v2 = 0;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v9 = *(void **)(v1 + 56);
  if (v9)
  {
    do
    {
      unint64_t v10 = (void *)*v9;
      operator delete(v9);
      uint64_t v9 = v10;
    }
    while (v10);
  }
  unint64_t v11 = *v4;
  char *v4 = 0;
  if (v11) {
    operator delete(v11);
  }
  if (*v3) {
    sub_20A8298(v1, *v3, (void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3F9CC4(uint64_t a1)
{
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
}

unint64_t sub_3F9CE8(uint64_t a1, char **a2, int a3, void *a4)
{
  unint64_t result = sub_EA80FC(a2);
  if (result) {
    return result;
  }
  if (*(unsigned char *)a1) {
    BOOL v9 = a3 == 1;
  }
  else {
    BOOL v9 = 0;
  }
  if (*(unsigned char *)a1) {
    BOOL v10 = a3 == 9;
  }
  else {
    BOOL v10 = 0;
  }
  unint64_t v11 = (uint64_t *)sub_376F8C(a4);
  uint64_t v12 = sub_40EFE8((uint64_t)a2);
  uint64_t v13 = (_DWORD *)sub_EADA60(v12);
  if (*v13 == 0x7FFFFFFF || v13[9] == 0x7FFFFFFF) {
    goto LABEL_17;
  }
  unint64_t v15 = v13;
  if (!sub_40A45C(v13 + 2)) {
    goto LABEL_17;
  }
  int v16 = v15[28];
  if (v16 == -1) {
    goto LABEL_17;
  }
  if (v16 == 1)
  {
    unint64_t v17 = *((void *)v15 + 13);
    unsigned int v18 = 2;
    if (v17 > 0xFFFFFFFEFFFFFFFFLL || !*((void *)v15 + 13))
    {
LABEL_18:
      uint64_t v19 = sub_404710(a2);
      unint64_t result = sub_52058((uint64_t)a2);
      if (v19 != result)
      {
        uint64_t v20 = sub_EADA60(v19);
        int v21 = *(_DWORD *)(v20 + 112);
        if (v21 == 1)
        {
          uint64_t v23 = *(void *)(v20 + 104);
          int v34 = 1;
          uint64_t v33 = v23;
        }
        else if (v21)
        {
          int v34 = *(_DWORD *)(v20 + 112);
        }
        else
        {
          uint64_t v22 = *(void *)(v20 + 104);
          int v34 = 0;
          uint64_t v33 = v22;
        }
        unint64_t result = sub_28CDA4(v11, (uint64_t)&v33);
        unint64_t v24 = result;
        *(void *)(a1 + 32) = result;
        uint64_t v25 = *(void *)(a1 + 8);
        if (a3 == 7)
        {
          uint64_t v26 = *(void *)(a1 + 16);
          while (v25 != v26)
          {
            unint64_t v32 = v24;
            char v31 = v18;
            unint64_t result = (unint64_t)sub_3FAA8C((void *)(v25 + 16), &v32);
            if (!result || *(unsigned __int8 *)(result + 24) <= v18) {
              unint64_t result = (unint64_t)sub_3FABAC(v25 + 16, &v32, &v32, &v31);
            }
            v25 += 56;
          }
        }
        else
        {
          unint64_t v32 = result;
          char v31 = v18;
          unint64_t result = (unint64_t)sub_3FAA8C((void *)(v25 + 16), &v32);
          if (!result || *(unsigned __int8 *)(result + 24) <= v18) {
            return (unint64_t)sub_3FABAC(v25 + 16, &v32, &v32, &v31);
          }
        }
      }
      return result;
    }
  }
  else
  {
    if (v16)
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    unint64_t v17 = *((void *)v15 + 13);
    if (v17 == -1)
    {
LABEL_17:
      unsigned int v18 = 2;
      goto LABEL_18;
    }
  }
  int v36 = v15[28];
  unint64_t v35 = v17;
  unint64_t v27 = sub_28CDA4(v11, (uint64_t)&v35);
  if (!v9)
  {
    if (!v10) {
      **(void **)(a1 + 8) = v27;
    }
    unsigned int v18 = 1;
    goto LABEL_18;
  }
  *(void *)(a1 + 32) = v27;
  uint64_t v28 = *(void *)(a1 + 8);
  unint64_t v32 = v27;
  char v31 = 2;
  uint64_t v29 = v28 + 16;
  unint64_t result = (unint64_t)sub_3FAA8C((void *)(v28 + 16), &v32);
  if (!result || *(unsigned __int8 *)(result + 24) <= 2u) {
    return (unint64_t)sub_3FABAC(v29, &v32, &v32, &v31);
  }
  return result;
}

uint64_t sub_3F9FD8(uint64_t result, unint64_t **a2)
{
  uint64_t v2 = *a2;
  int v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = result + 40;
    BOOL v5 = (void *)(result + 80);
    do
    {
      sub_3FA3B0(v4, v2, v2);
      unint64_t result = sub_3FA6D4(v5, v2);
      v2 += 2;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t sub_3FA038(uint64_t a1)
{
  sub_2F99CC(&v2, *(void *)(a1 + 8), a1);
  return v2;
}

uint64_t sub_3FA068(uint64_t a1)
{
  sub_2F99CC(&v2, *(void *)(a1 + 16), a1);
  return v2;
}

BOOL sub_3FA098(uint64_t a1)
{
  return *(void *)(a1 + 64) || *(void *)(a1 + 104) != 0;
}

uint64_t sub_3FA0B8(void *a1, unint64_t a2)
{
  if (a1[8])
  {
    int8x8_t v2 = (int8x8_t)a1[6];
    if (v2)
    {
      uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
      v3.i16[0] = vaddlv_u8(v3);
      if (v3.u32[0] > 1uLL)
      {
        unint64_t v4 = a2;
        if (*(void *)&v2 <= a2) {
          unint64_t v4 = a2 % *(void *)&v2;
        }
      }
      else
      {
        unint64_t v4 = (*(void *)&v2 - 1) & a2;
      }
      uint64_t v8 = *(void **)(a1[5] + 8 * v4);
      if (v8)
      {
        uint64_t v8 = (void *)*v8;
        if (v8)
        {
          if (v3.u32[0] < 2uLL)
          {
            uint64_t v10 = *(void *)&v2 - 1;
            while (1)
            {
              uint64_t v12 = v8[1];
              if (v12 == a2)
              {
                if (v8[2] == a2) {
                  return v8 != 0;
                }
              }
              else if ((v12 & v10) != v4)
              {
                return 0;
              }
              uint64_t v8 = (void *)*v8;
              if (!v8) {
                return v8 != 0;
              }
            }
          }
          do
          {
            unint64_t v11 = v8[1];
            if (v11 == a2)
            {
              if (v8[2] == a2) {
                return v8 != 0;
              }
            }
            else
            {
              if (v11 >= *(void *)&v2) {
                v11 %= *(void *)&v2;
              }
              if (v11 != v4) {
                return 0;
              }
            }
            uint64_t v8 = (void *)*v8;
          }
          while (v8);
        }
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    return v8 != 0;
  }
  int8x8_t v5 = (int8x8_t)a1[11];
  if (!*(void *)&v5)
  {
    uint64_t v13 = 0;
    return v13 == 0;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = a2;
    if (*(void *)&v5 <= a2) {
      unint64_t v7 = a2 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & a2;
  }
  uint64_t v13 = *(void **)(a1[10] + 8 * v7);
  if (!v13) {
    return v13 == 0;
  }
  uint64_t v13 = (void *)*v13;
  if (!v13) {
    return v13 == 0;
  }
  if (v6.u32[0] >= 2uLL)
  {
    do
    {
      unint64_t v15 = v13[1];
      if (v15 == a2)
      {
        if (v13[2] == a2) {
          return v13 == 0;
        }
      }
      else
      {
        if (v15 >= *(void *)&v5) {
          v15 %= *(void *)&v5;
        }
        if (v15 != v7) {
          return 1;
        }
      }
      uint64_t v13 = (void *)*v13;
    }
    while (v13);
    return v13 == 0;
  }
  uint64_t v14 = *(void *)&v5 - 1;
  while (1)
  {
    uint64_t v16 = v13[1];
    if (v16 == a2)
    {
      if (v13[2] == a2) {
        return v13 == 0;
      }
      goto LABEL_44;
    }
    if ((v16 & v14) != v7) {
      return 1;
    }
LABEL_44:
    uint64_t v13 = (void *)*v13;
    if (!v13) {
      return v13 == 0;
    }
  }
}

BOOL sub_3FA2B0(int8x8_t *a1, unint64_t a2)
{
  int8x8_t v2 = a1[11];
  if (!*(void *)&v2)
  {
    int8x8_t v5 = 0;
    return v5 != 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v4 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & a2;
  }
  int8x8_t v5 = *(void **)(*(void *)&a1[10] + 8 * v4);
  if (!v5) {
    return v5 != 0;
  }
  int8x8_t v5 = (void *)*v5;
  if (!v5) {
    return v5 != 0;
  }
  if (v3.u32[0] >= 2uLL)
  {
    do
    {
      unint64_t v8 = v5[1];
      if (v8 == a2)
      {
        if (v5[2] == a2) {
          return v5 != 0;
        }
      }
      else
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
        if (v8 != v4) {
          return 0;
        }
      }
      int8x8_t v5 = (void *)*v5;
    }
    while (v5);
    return v5 != 0;
  }
  uint64_t v7 = *(void *)&v2 - 1;
  while (1)
  {
    uint64_t v9 = v5[1];
    if (v9 == a2)
    {
      if (v5[2] == a2) {
        return v5 != 0;
      }
      goto LABEL_20;
    }
    if ((v9 & v7) != v4) {
      return 0;
    }
LABEL_20:
    int8x8_t v5 = (void *)*v5;
    if (!v5) {
      return v5 != 0;
    }
  }
}

uint64_t sub_3FA3A8(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void *sub_3FA3B0(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (void *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  uint64_t v14 = operator new(0x18uLL);
  void *v14 = 0;
  v14[1] = v6;
  void v14[2] = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    uint64_t v17 = *(void *)a1;
    unsigned int v18 = *(void **)(*(void *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      void *v14 = *v18;
LABEL_61:
      void *v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if (v7 >= 3) {
      BOOL v19 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v7);
    unint64_t v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_37;
    }
    if (prime < v7)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v7) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    unint64_t v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        unint64_t v3 = v6 % v7;
        uint64_t v17 = *(void *)a1;
        unsigned int v18 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        if (v18) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v6;
        uint64_t v17 = *(void *)a1;
        unsigned int v18 = *(void **)(*(void *)a1 + 8 * v6);
        if (v18) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v26 & v6;
      uint64_t v17 = *(void *)a1;
      unsigned int v18 = *(void **)(*(void *)a1 + 8 * (v26 & v6));
      if (v18) {
        goto LABEL_26;
      }
    }
  }
  void *v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v27 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7) {
        v27 %= v7;
      }
    }
    else
    {
      v27 &= v7 - 1;
    }
    unsigned int v18 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_3FA6C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_3FA6D4(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  unint64_t v6 = *(void ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *v6;
  if (!*v6) {
    return 0;
  }
  if (v4.u32[0] < 2uLL)
  {
    uint64_t v8 = *(void *)&v2 - 1;
    while (1)
    {
      uint64_t v10 = v7[1];
      if (v10 == v3)
      {
        if (v7[2] == v3) {
          goto LABEL_22;
        }
      }
      else if ((v10 & v8) != v5)
      {
        return 0;
      }
      unint64_t v7 = (void *)*v7;
      if (!v7) {
        return 0;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = v7[1];
    if (v9 == v3) {
      break;
    }
    if (v9 >= *(void *)&v2) {
      v9 %= *(void *)&v2;
    }
    if (v9 != v5) {
      return 0;
    }
LABEL_11:
    unint64_t v7 = (void *)*v7;
    if (!v7) {
      return 0;
    }
  }
  if (v7[2] != v3) {
    goto LABEL_11;
  }
LABEL_22:
  sub_256F0(a1, v7, (uint64_t)&__p);
  uint64_t v12 = __p;
  long long __p = 0;
  if (v12) {
    operator delete(v12);
  }
  return 1;
}

void sub_3FA7EC(void **a1, unint64_t a2)
{
  uint8x8_t v4 = a1[1];
  unint64_t v5 = a1[2];
  if (0x6DB6DB6DB6DB6DB7 * ((v5 - (unsigned char *)v4) >> 3) >= a2)
  {
    if (a2)
    {
      unint64_t v11 = &v4[7 * a2];
      do
      {
        v4[6] = 0;
        *((_OWORD *)v4 + 1) = 0uLL;
        *((_OWORD *)v4 + 2) = 0uLL;
        *(_OWORD *)uint8x8_t v4 = 0uLL;
        *((_DWORD *)v4 + 1) = -1;
        *((_DWORD *)v4 + 3) = -1;
        *((_DWORD *)v4 + 12) = 1065353216;
        v4 += 7;
      }
      while (v4 != v11);
      uint8x8_t v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    uint64_t v6 = 0x6DB6DB6DB6DB6DB7 * (((char *)v4 - (unsigned char *)*a1) >> 3);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x492492492492492) {
      sub_2E00();
    }
    unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x249249249249249) {
      unint64_t v9 = 0x492492492492492;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0x492492492492492) {
        sub_188D718();
      }
      uint64_t v10 = (char *)operator new(56 * v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v12 = &v10[56 * v6];
    uint64_t v13 = &v10[56 * v9];
    uint64_t v14 = &v12[56 * a2];
    float v15 = v12;
    do
    {
      *((void *)v15 + 6) = 0;
      *((_OWORD *)v15 + 1) = 0uLL;
      *((_OWORD *)v15 + 2) = 0uLL;
      *(_OWORD *)float v15 = 0uLL;
      *((_DWORD *)v15 + 1) = -1;
      *((_DWORD *)v15 + 3) = -1;
      *((_DWORD *)v15 + 12) = 1065353216;
      v15 += 56;
    }
    while (v15 != v14);
    float v16 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 == *a1)
    {
      *a1 = v12;
      a1[1] = v14;
      a1[2] = v13;
      if (!v17) {
        return;
      }
      goto LABEL_37;
    }
    uint64_t v18 = 0;
    do
    {
      unint64_t v20 = &v12[v18];
      unint64_t v21 = &v17[v18];
      *(_OWORD *)(v20 - 56) = *(_OWORD *)&v17[v18 - 56];
      uint64_t v22 = *(void *)&v17[v18 - 40];
      *((void *)v21 - 5) = 0;
      *((void *)v20 - 5) = v22;
      *((void *)v20 - 4) = *(void *)&v17[v18 - 32];
      *((void *)v21 - 4) = 0;
      uint64_t v23 = *(void *)&v17[v18 - 24];
      *(void *)&v12[v18 - 24] = v23;
      uint64_t v24 = *(void *)&v17[v18 - 16];
      *((void *)v20 - 2) = v24;
      *((_DWORD *)v20 - 2) = *(_DWORD *)&v17[v18 - 8];
      if (v24)
      {
        unint64_t v19 = *(void *)(v23 + 8);
        unint64_t v25 = *((void *)v20 - 4);
        if ((v25 & (v25 - 1)) != 0)
        {
          if (v19 >= v25) {
            v19 %= v25;
          }
        }
        else
        {
          v19 &= v25 - 1;
        }
        *(void *)(v22 + 8 * v19) = &v12[v18 - 24];
        *(void *)&v17[v18 - 24] = 0;
        *(void *)&v17[v18 - 16] = 0;
      }
      v18 -= 56;
    }
    while (&v17[v18] != v16);
    unint64_t v26 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    *a1 = &v12[v18];
    a1[1] = v14;
    a1[2] = v13;
    if (v17 != v26)
    {
      do
      {
        unint64_t v27 = (void *)*((void *)v17 - 3);
        if (v27)
        {
          do
          {
            uint64_t v28 = (void *)*v27;
            operator delete(v27);
            unint64_t v27 = v28;
          }
          while (v28);
        }
        uint64_t v29 = (void *)*((void *)v17 - 5);
        *((void *)v17 - 5) = 0;
        if (v29) {
          operator delete(v29);
        }
        v17 -= 56;
      }
      while (v17 != v26);
      uint64_t v17 = v26;
    }
    if (v17)
    {
LABEL_37:
      operator delete(v17);
    }
  }
}

uint64_t *sub_3FAA8C(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  unint64_t v4 = __ROR8__(*a2, 32);
  unint64_t v5 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v4 ^ (v4 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v4 ^ (v4 >> 33))) >> 33));
  unint64_t v6 = v5 ^ (v5 >> 33);
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v2);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v6;
    if (v6 >= *(void *)&v2) {
      unint64_t v8 = v6 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v8 = v6 & (*(void *)&v2 - 1);
  }
  unint64_t v9 = *(uint64_t ***)(*a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  unint64_t result = *v9;
  if (*v9)
  {
    if (v7.u32[0] < 2uLL)
    {
      uint64_t v11 = *(void *)&v2 - 1;
      while (1)
      {
        uint64_t v15 = result[1];
        if (v15 == v6)
        {
          if (*((_DWORD *)result + 4) == v3 && *((_DWORD *)result + 5) == HIDWORD(v3)) {
            return result;
          }
        }
        else if ((v15 & v11) != v8)
        {
          return 0;
        }
        unint64_t result = (uint64_t *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v13 = result[1];
      if (v13 == v6)
      {
        if (*((_DWORD *)result + 4) == v3 && *((_DWORD *)result + 5) == HIDWORD(v3)) {
          return result;
        }
      }
      else
      {
        if (v13 >= *(void *)&v2) {
          v13 %= *(void *)&v2;
        }
        if (v13 != v8) {
          return 0;
        }
      }
      unint64_t result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

void *sub_3FABAC(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  uint64_t v8 = *a2;
  unint64_t v9 = __ROR8__(*a2, 32);
  unint64_t v10 = 0xC4CEB9FE1A85EC53
      * ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) >> 33));
  unint64_t v11 = v10 ^ (v10 >> 33);
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10 ^ (v10 >> 33);
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
    }
    else
    {
      unint64_t v4 = v11 & (v12 - 1);
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v18 = v15[1];
            if (v18 == v11)
            {
              if (*((_DWORD *)v15 + 4) == v8 && *((_DWORD *)v15 + 5) == HIDWORD(v8)) {
                return v15;
              }
            }
            else if ((v18 & (v12 - 1)) != v4)
            {
              goto LABEL_31;
            }
            uint64_t v15 = (void *)*v15;
            if (!v15) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v11)
          {
            if (*((_DWORD *)v15 + 4) == v8 && *((_DWORD *)v15 + 5) == HIDWORD(v8)) {
              return v15;
            }
          }
          else
          {
            if (v16 >= v12) {
              v16 %= v12;
            }
            if (v16 != v4) {
              break;
            }
          }
          uint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_31:
  uint64_t v15 = operator new(0x20uLL);
  void *v15 = 0;
  v15[1] = v11;
  v15[2] = *a3;
  *((unsigned char *)v15 + 24) = *a4;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v12 && (float)(v21 * (float)v12) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
    if (v23)
    {
LABEL_34:
      void *v15 = *v23;
LABEL_69:
      void *v23 = v15;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v12 >= 3) {
      BOOL v24 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v12);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v12 = *(void *)(a1 + 8);
    }
    if (prime > v12) {
      goto LABEL_45;
    }
    if (prime < v12)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v12 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v12) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v31 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        if (v23) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * v11);
        if (v23) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v31 & v11;
      uint64_t v22 = *(void *)a1;
      uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v31 & v11));
      if (v23) {
        goto LABEL_34;
      }
    }
  }
  void *v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v22 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    unint64_t v32 = *(void *)(*v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v32 >= v12) {
        v32 %= v12;
      }
    }
    else
    {
      v32 &= v12 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_3FAF00(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_3FAF14()
{
  unk_2558187 = 16641;
  word_2558170 = 65;
  byte_255819F = 1;
  byte_2558189 = 0;
}

__n128 *sub_3FAF3C(__n128 *a1)
{
  a1->n128_u64[0] = 0x7FFFFFFFFFFFFFFFLL;
  a1->n128_u64[1] = 0x7FFFFFFFFFFFFFFFLL;
  sub_40AAF8(a1 + 1);
  return a1;
}

__n128 sub_3FAF7C(_OWORD *a1, _OWORD *a2, __n128 *a3)
{
  *a1 = *a2;
  __n128 result = *a3;
  a1[1] = *a3;
  return result;
}

uint64_t sub_3FAF90@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_40AB18();
  *a1 = 0;
  a1[1] = 0;
  a1[2] = result;
  a1[3] = v3;
  return result;
}

BOOL sub_3FAFBC(uint64_t a1)
{
  return *(_DWORD *)a1 != -1
      && *(_DWORD *)(a1 + 4) != 0x7FFFFFFF
      && *(void *)(a1 + 8) != 0x7FFFFFFFFFFFFFFFLL
      && sub_40AB7C((unsigned int *)(a1 + 16));
}

int32x2_t *sub_3FAFF8(int32x2_t *a1, int32x2_t *a2)
{
  *a1 = vadd_s32(*a2, *a1);
  *(void *)&a1[1] += *(void *)&a2[1];
  sub_40AB2C((unsigned int *)&a1[2], &a2[2]);
  return a1;
}

_DWORD *sub_3FB048(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int v6 = sub_9E49C(a3);
  unsigned int v7 = sub_9E4B8(a3);
  uint64_t result = sub_40A2D8((_DWORD *)a1, a2, v6, v7);
  *(void *)(a1 + 16) = a3;
  return result;
}

_DWORD *sub_3FB0A4(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  unsigned int v6 = sub_9E49C(*a3);
  unsigned int v7 = sub_9E4B8(v4);
  uint64_t result = sub_40A2D8((_DWORD *)a1, a2, v6, v7);
  *(void *)(a1 + 16) = v4;
  return result;
}

uint64_t sub_3FB100(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)uint64_t result = v3;
  *(void *)(result + 16) = a3;
  return result;
}

uint64_t sub_3FB118(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)uint64_t result = v4;
  *(void *)(result + 16) = v3;
  return result;
}

unint64_t sub_3FB134@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v6[0] = sub_9E49C(a1);
  v6[1] = sub_9E4B8(a1);
  unint64_t result = sub_40A2F4(v6);
  *(void *)a2 = result;
  *(_DWORD *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = a1;
  return result;
}

unint64_t sub_3FB190@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  v6[0] = sub_9E49C(*a1);
  v6[1] = sub_9E4B8(v3);
  unint64_t result = sub_40A2F4(v6);
  *(void *)a2 = result;
  *(_DWORD *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_3FB1F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  LODWORD(v6) = sub_9E49C(a1);
  HIDWORD(v6) = sub_9E4B8(a1);
  uint64_t result = sub_40A30C(&v6);
  *(void *)a2 = result;
  *(_DWORD *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = a1;
  return result;
}

uint64_t sub_3FB24C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  LODWORD(v6) = sub_9E49C(*a1);
  HIDWORD(v6) = sub_9E4B8(v3);
  uint64_t result = sub_40A30C(&v6);
  *(void *)a2 = result;
  *(_DWORD *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v3;
  return result;
}

_DWORD *sub_3FB2AC@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_9E49C(a2);
  sub_9E4B8(a2);
  int v6 = sub_286C14(a2, (double)a1, 1.0);
  unsigned int v7 = sub_9E49C(a2);
  unsigned int v8 = sub_9E4B8(a2);
  uint64_t result = sub_40A2D8((_DWORD *)a3, v6, v7, v8);
  *(void *)(a3 + 16) = a2;
  return result;
}

double sub_3FB32C(uint64_t a1)
{
  int v2 = sub_4F44((unsigned int *)a1);
  double v3 = 0.0;
  if (v2 != 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    int v5 = sub_4F44((unsigned int *)a1);
    sub_92070(v4, v5);
    double v3 = sub_287C50(*(void *)(a1 + 16));
  }
  return v3 / 100.0;
}

uint64_t sub_3FB38C(uint64_t a1)
{
  int v2 = sub_4F44((unsigned int *)a1);
  double v3 = 0.0;
  if (v2 != 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    int v5 = sub_4F44((unsigned int *)a1);
    sub_92070(v4, v5);
    double v3 = sub_287C50(*(void *)(a1 + 16));
    if (v3 < 0.0)
    {
      uint64_t v6 = (uint64_t)(v3 + v3);
      if (v6 >= 1) {
        --v6;
      }
      if (v3 > -4.50359963e15) {
        return (double)(v6 >> 1);
      }
      return v3;
    }
    if (v3 >= 4.50359963e15) {
      return v3;
    }
  }
  return (double)(((uint64_t)(v3 + v3) + 1) >> 1);
}

uint64_t sub_3FB448@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_40A5CC(a1, a2);
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)a3 = result;
  *(_DWORD *)(a3 + 8) = v7;
  *(void *)(a3 + 16) = v6;
  return result;
}

uint64_t sub_3FB480(uint64_t a1, void *a2, uint64_t a3)
{
  char v9 = 12;
  strcpy((char *)__p, "min_num_pois");
  int v6 = sub_31AC04(a2, (uint64_t)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)a1 = v6;
  char v9 = 8;
  strcpy((char *)__p, "radius_m");
  *(void *)(a1 + 8) = sub_5CDE0(a2, __p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  sub_3FB578(a2, a3, a1 + 16);
  return a1;
}

void sub_3FB558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_3FB578@<Q0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v17 = 7;
  strcpy((char *)__p, "percent");
  int v6 = sub_58070(a1, (uint64_t)__p);
  if (v6 && *((_DWORD *)v6 + 12) == 1)
  {
    unsigned int v7 = *((double *)v6 + 5);
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }
  else
  {
    unsigned int v7 = 100;
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }
  operator delete(__p[0]);
LABEL_7:
  sub_3FB2AC(v7, a2, (uint64_t)__p);
  char v14 = 9;
  strcpy((char *)v13, "energy_wh");
  v12[0] = 0x413E848000000000;
  unsigned int v8 = sub_58070(a1, (uint64_t)v13);
  if (v8)
  {
    char v9 = (double *)(v8 + 5);
    if (*((_DWORD *)v8 + 12) != 1) {
      char v9 = (double *)v12;
    }
    unsigned int v15 = llround(*v9 * 1000.0);
    if (v14 < 0) {
      goto LABEL_11;
    }
  }
  else
  {
    unsigned int v15 = llround(2000000000.0);
    if (v14 < 0) {
LABEL_11:
    }
      operator delete(v13[0]);
  }
  sub_3FB134(a2, (uint64_t)v12);
  sub_3FB448((uint64_t)v12, &v15, (uint64_t)v13);
  if (sub_40A52C(v13, __p)) {
    unint64_t v10 = v13;
  }
  else {
    unint64_t v10 = __p;
  }
  __n128 result = *(__n128 *)v10;
  *(_OWORD *)a3 = *(_OWORD *)v10;
  *(void *)(a3 + 16) = v10[2];
  return result;
}

void sub_3FB708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3FB738(void *a1, unsigned int a2)
{
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "oem_consumption_configs");
  uint64_t v4 = (uint64_t *)sub_5C4AC(a1, (uint64_t)__p);
  int v5 = v4;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1] - *v5;
    _ZF = v7 == 16;
    if (v7 < 16) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v6 = *v4;
    uint64_t v7 = v4[1] - *v4;
    _ZF = v7 == 16;
    if (v7 < 16) {
      goto LABEL_11;
    }
  }
  if (!_ZF)
  {
    unint64_t v12 = v7 >> 4;
    while (1)
    {
      unint64_t v14 = (4 * v12) & 0xFFFFFFFFFFFFFFF0;
      _X8 = v6 + v14;
      __asm { PRFM            #0, [X8] }
      uint64_t v20 = v6 + 16 * (v12 >> 1);
      _X9 = v20 + v14;
      __asm { PRFM            #0, [X9] }
      if (*(_DWORD *)(v20 + 8) != 2) {
        break;
      }
      uint64_t v23 = *(void **)v20;
      HIBYTE(__p[2]) = 20;
      strcpy((char *)__p, "consumption_model_id");
      unsigned int v24 = sub_31AC04(v23, (uint64_t)__p);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      if (v24 <= a2) {
        unint64_t v13 = v12 >> 1;
      }
      else {
        unint64_t v13 = 0;
      }
      v6 += 16 * v13;
      v12 -= v12 >> 1;
      if ((uint64_t)v12 <= 1) {
        goto LABEL_7;
      }
    }
LABEL_20:
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_23FDF58;
  }
LABEL_7:
  if (*(_DWORD *)(v6 + 8) != 2) {
    goto LABEL_20;
  }
  char v9 = *(void **)v6;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "consumption_model_id");
  unsigned int v10 = sub_31AC04(v9, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  v6 += 16 * (v10 <= a2);
LABEL_11:
  if (*(_DWORD *)(v6 - 8) != 2) {
    goto LABEL_20;
  }
  return *(void *)(v6 - 16);
}

void sub_3FB938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3FB95C(void *a1, unsigned int a2)
{
  char v26 = 20;
  strcpy(__p, "oem_charging_configs");
  double v3 = (uint64_t *)sub_5C4AC(a1, (uint64_t)__p);
  uint64_t v4 = v3;
  if (v26 < 0)
  {
    operator delete(*(void **)__p);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1] - *v4;
    _ZF = v6 == 16;
    if (v6 < 16) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v5 = *v3;
    uint64_t v6 = v3[1] - *v3;
    _ZF = v6 == 16;
    if (v6 < 16) {
      goto LABEL_11;
    }
  }
  if (!_ZF)
  {
    unint64_t v11 = v6 >> 4;
    while (1)
    {
      unint64_t v13 = (4 * v11) & 0xFFFFFFFFFFFFFFF0;
      _X8 = v5 + v13;
      __asm { PRFM            #0, [X8] }
      uint64_t v19 = v5 + 16 * (v11 >> 1);
      _X9 = v19 + v13;
      __asm { PRFM            #0, [X9] }
      if (*(_DWORD *)(v19 + 8) != 2) {
        break;
      }
      uint64_t v22 = *(void **)v19;
      char v26 = 17;
      strcpy(__p, "charging_model_id");
      unsigned int v23 = sub_31AC04(v22, (uint64_t)__p);
      if (v26 < 0) {
        operator delete(*(void **)__p);
      }
      if (v23 <= a2) {
        unint64_t v12 = v11 >> 1;
      }
      else {
        unint64_t v12 = 0;
      }
      v5 += 16 * v12;
      v11 -= v11 >> 1;
      if ((uint64_t)v11 <= 1) {
        goto LABEL_7;
      }
    }
LABEL_20:
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_23FDF58;
  }
LABEL_7:
  if (*(_DWORD *)(v5 + 8) != 2) {
    goto LABEL_20;
  }
  unsigned int v8 = *(void **)v5;
  char v26 = 17;
  strcpy(__p, "charging_model_id");
  unsigned int v9 = sub_31AC04(v8, (uint64_t)__p);
  if (v26 < 0) {
    operator delete(*(void **)__p);
  }
  v5 += 16 * (v9 <= a2);
LABEL_11:
  if (*(_DWORD *)(v5 - 8) != 2) {
    goto LABEL_20;
  }
  return *(void *)(v5 - 16);
}

void sub_3FBB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3FBB5C(void *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = (void *)sub_3FB738(a1, a2);
  char v17 = 20;
  strcpy(__p, "soc_threshold_config");
  uint64_t v6 = sub_561B0(v5, (uint64_t)__p);
  if (v17 < 0) {
    operator delete(*(void **)__p);
  }
  char v17 = 20;
  strcpy(__p, "soc_threshold_config");
  uint64_t v7 = (void *)sub_560F4(a1, (uint64_t)__p);
  unsigned int v8 = (void *)sub_560F4(v7, v6);
  if (v17 < 0) {
    operator delete(*(void **)__p);
  }
  char v17 = 20;
  strcpy(__p, "soc_threshold_config");
  unsigned int v9 = (void *)sub_560F4(a1, (uint64_t)__p);
  char v15 = 7;
  strcpy((char *)v14, "default");
  unsigned int v10 = (void *)sub_560F4(v9, (uint64_t)v14);
  if (v15 < 0)
  {
    operator delete(v14[0]);
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_12:
    operator delete(*(void **)__p);
    goto LABEL_7;
  }
  if (v17 < 0) {
    goto LABEL_12;
  }
LABEL_7:
  uint64_t v11 = sub_560F4(v10, a3);
  unint64_t v12 = sub_58070(v8, a3);
  if (v12 && *((_DWORD *)v12 + 12) == 2) {
    return v12[5];
  }
  return v11;
}

void sub_3FBCE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  _Unwind_Resume(exception_object);
}

double sub_3FBD50@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v7 = sub_29AEBC(a2);
  char v11 = 13;
  strcpy((char *)__p, "low_threshold");
  unsigned int v8 = (void *)sub_3FBB5C(a1, v7, (uint64_t)__p);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  *(void *)&double result = sub_3FB578(v8, a3, a4).n128_u64[0];
  return result;
}

void sub_3FBDE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_3FBE04@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v7 = sub_29AEBC(a2);
  char v11 = 18;
  strcpy(__p, "critical_threshold");
  unsigned int v8 = (void *)sub_3FBB5C(a1, v7, (uint64_t)__p);
  if (v11 < 0) {
    operator delete(*(void **)__p);
  }
  *(void *)&double result = sub_3FB578(v8, a3, a4).n128_u64[0];
  return result;
}

void sub_3FBE9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_3FBEB8@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v7 = sub_29AEBC(a2);
  char v11 = 14;
  strcpy((char *)__p, "high_threshold");
  unsigned int v8 = (void *)sub_3FBB5C(a1, v7, (uint64_t)__p);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  *(void *)&double result = sub_3FB578(v8, a3, a4).n128_u64[0];
  return result;
}

void sub_3FBF50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_3FBF6C@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v7 = sub_29AEBC(a2);
  char v11 = 17;
  strcpy(__p, "arrival_threshold");
  unsigned int v8 = (void *)sub_3FBB5C(a1, v7, (uint64_t)__p);
  if (v11 < 0) {
    operator delete(*(void **)__p);
  }
  *(void *)&double result = sub_3FB578(v8, a3, a4).n128_u64[0];
  return result;
}

void sub_3FC000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_3FC01C@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8 = sub_29AEBC(a2);
  unsigned int v9 = (void *)sub_3FB738(a1, v8);
  BYTE7(v26[1]) = 20;
  *(_OWORD *)&v23[48] = *(_OWORD *)"soc_threshold_config";
  strcpy((char *)v26, "soc_threshold_config");
  uint64_t v10 = sub_561B0(v9, (uint64_t)v26);
  if (SBYTE7(v26[1]) < 0) {
    operator delete(*(void **)&v26[0]);
  }
  BYTE7(v26[1]) = 20;
  strcpy((char *)&v26[1], "nfig");
  v26[0] = *(_OWORD *)&v23[48];
  char v11 = (void *)sub_560F4(a1, (uint64_t)v26);
  unint64_t v12 = (void *)sub_560F4(v11, v10);
  if (SBYTE7(v26[1]) < 0) {
    operator delete(*(void **)&v26[0]);
  }
  BYTE7(v26[1]) = 20;
  strcpy((char *)&v26[1], "nfig");
  v26[0] = *(_OWORD *)&v23[48];
  unint64_t v13 = (void *)sub_560F4(a1, (uint64_t)v26);
  HIBYTE(v25) = 7;
  strcpy((char *)&__p, "default");
  unint64_t v14 = (void *)sub_560F4(v13, (uint64_t)&__p);
  if (SHIBYTE(v25) < 0)
  {
    operator delete(__p);
    if ((SBYTE7(v26[1]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_16:
    operator delete(*(void **)&v26[0]);
    goto LABEL_7;
  }
  if (SBYTE7(v26[1]) < 0) {
    goto LABEL_16;
  }
LABEL_7:
  *(void *)&v26[0] = operator new(0x30uLL);
  *(_WORD *)&v23[50] = 0;
  *(_DWORD *)&v23[52] = 0;
  *(void *)&v23[56] = 0x8000000000000030;
  *(_OWORD *)((char *)v26 + 8) = xmmword_20B93B0;
  strcpy(*(char **)&v26[0], "dense_charging_poi_regions_arrival_thresholds");
  strcpy(v23, "rival_thresholdsoi_regions_arrivdense_charging_p-");
  char v15 = operator new(0x30uLL);
  long long __p = v15;
  long long v25 = *(_OWORD *)&v23[48];
  _OWORD *v15 = *(_OWORD *)&v23[32];
  v15[1] = *(_OWORD *)&v23[16];
  *(_OWORD *)((char *)v15 + 29) = *(_OWORD *)v23;
  *((unsigned char *)v15 + 45) = 0;
  unint64_t v16 = (uint64_t *)sub_5C4AC(v14, (uint64_t)&__p);
  char v17 = sub_58070(v12, (uint64_t)v26);
  if (v17 && *((_DWORD *)v17 + 12) == 3) {
    unint64_t v16 = (uint64_t *)v17[5];
  }
  if ((SHIBYTE(v25) & 0x80000000) == 0)
  {
    if ((SBYTE7(v26[1]) & 0x80000000) == 0) {
      goto LABEL_12;
    }
LABEL_18:
    operator delete(*(void **)&v26[0]);
    uint64_t v18 = *v16;
    if (*v16 != v16[1]) {
      goto LABEL_13;
    }
    goto LABEL_19;
  }
  operator delete(__p);
  if (SBYTE7(v26[1]) < 0) {
    goto LABEL_18;
  }
LABEL_12:
  uint64_t v18 = *v16;
  if (*v16 != v16[1])
  {
LABEL_13:
    if (*(_DWORD *)(v18 + 8) != 2)
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    uint64_t v19 = *(void **)v18;
    goto LABEL_21;
  }
LABEL_19:
  unsigned int v20 = sub_29AEBC(a2);
  BYTE7(v26[1]) = 17;
  strcpy((char *)v26, "arrival_threshold");
  uint64_t v19 = (void *)sub_3FBB5C(a1, v20, (uint64_t)v26);
  if (SBYTE7(v26[1]) < 0) {
    operator delete(*(void **)&v26[0]);
  }
LABEL_21:
  *(void *)&double result = sub_3FB578(v19, a3, a4).n128_u64[0];
  return result;
}

void sub_3FC314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (*(char *)(v23 - 57) < 0) {
    operator delete(*(void **)(v23 - 80));
  }
  _Unwind_Resume(exception_object);
}

void sub_3FC35C(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v93[1].n128_u8[7] = 9;
  strcpy((char *)v93, "EVRouting");
  long long __p = 0;
  long long v92 = 0uLL;
  unint64_t v12 = sub_374CDC((uint64_t)a3, (uint64_t)v93, (uint64_t *)&__p);
  unint64_t v13 = (void **)__p;
  uint64_t v85 = v12;
  if (__p)
  {
    unint64_t v14 = (void **)v92;
    char v15 = __p;
    if ((void *)v92 != __p)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      char v15 = __p;
    }
    *(void *)&long long v92 = v13;
    operator delete(v15);
    unint64_t v12 = v85;
  }
  if (v93[1].n128_i8[7] < 0) {
    operator delete((void *)v93[0].n128_u64[0]);
  }
  uint64_t v16 = nullsub_1(a1);
  sub_40A454(v16);
  unsigned int v17 = sub_29AEBC(a1);
  uint64_t v18 = (void *)sub_3FB738(v12, v17);
  v93[1].n128_u8[7] = 20;
  *(_OWORD *)&v84[48] = *(_OWORD *)"soc_threshold_config";
  strcpy((char *)v93, "soc_threshold_config");
  uint64_t v19 = sub_561B0(v18, (uint64_t)v93);
  if (v93[1].n128_i8[7] < 0) {
    operator delete((void *)v93[0].n128_u64[0]);
  }
  v93[1].n128_u8[7] = 20;
  strcpy((char *)&v93[1], "nfig");
  v93[0] = *(__n128 *)&v84[48];
  unsigned int v20 = (void *)sub_560F4(v12, (uint64_t)v93);
  float v21 = (void *)sub_560F4(v20, v19);
  if (v93[1].n128_i8[7] < 0) {
    operator delete((void *)v93[0].n128_u64[0]);
  }
  v93[1].n128_u8[7] = 20;
  strcpy((char *)&v93[1], "nfig");
  v93[0] = *(__n128 *)&v84[48];
  uint64_t v22 = (void *)sub_560F4(v12, (uint64_t)v93);
  HIBYTE(v92) = 7;
  strcpy((char *)&__p, "default");
  uint64_t v23 = (void *)sub_560F4(v22, (uint64_t)&__p);
  if (SHIBYTE(v92) < 0)
  {
    operator delete(__p);
    if ((v93[1].n128_i8[7] & 0x80000000) == 0) {
      goto LABEL_17;
    }
LABEL_25:
    operator delete((void *)v93[0].n128_u64[0]);
    goto LABEL_17;
  }
  if (v93[1].n128_i8[7] < 0) {
    goto LABEL_25;
  }
LABEL_17:
  v93[0].n128_u64[0] = (unint64_t)operator new(0x30uLL);
  *(_WORD *)&v84[50] = 0;
  *(_DWORD *)&v84[52] = 0;
  *(void *)&v84[56] = 0x8000000000000030;
  *(__n128 *)((char *)v93 + 8) = (__n128)xmmword_20B93B0;
  strcpy((char *)v93[0].n128_u64[0], "dense_charging_poi_regions_arrival_thresholds");
  strcpy(v84, "rival_thresholdsoi_regions_arrivdense_charging_p-");
  unsigned int v24 = operator new(0x30uLL);
  long long __p = v24;
  long long v92 = *(_OWORD *)&v84[48];
  *unsigned int v24 = *(_OWORD *)&v84[32];
  v24[1] = *(_OWORD *)&v84[16];
  *(_OWORD *)((char *)v24 + 29) = *(_OWORD *)v84;
  *((unsigned char *)v24 + 45) = 0;
  long long v25 = (uint64_t *)sub_5C4AC(v23, (uint64_t)&__p);
  char v26 = sub_58070(v21, (uint64_t)v93);
  if (v26 && *((_DWORD *)v26 + 12) == 3) {
    long long v25 = (uint64_t *)v26[5];
  }
  if ((SHIBYTE(v92) & 0x80000000) == 0)
  {
    if ((v93[1].n128_i8[7] & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_27:
    operator delete((void *)v93[0].n128_u64[0]);
    uint64_t v27 = *v25;
    uint64_t v28 = v25[1];
    long long __p = 0;
    long long v92 = 0uLL;
    uint64_t v29 = v28 - v27;
    if (v28 == v27) {
      goto LABEL_34;
    }
    goto LABEL_28;
  }
  operator delete(__p);
  if (v93[1].n128_i8[7] < 0) {
    goto LABEL_27;
  }
LABEL_22:
  uint64_t v27 = *v25;
  uint64_t v28 = v25[1];
  long long __p = 0;
  long long v92 = 0uLL;
  uint64_t v29 = v28 - v27;
  if (v28 == v27) {
    goto LABEL_34;
  }
LABEL_28:
  if ((unint64_t)v29 >= 0x6666666666666661) {
    sub_2E00();
  }
  uint64_t v30 = a1;
  uint64_t v31 = v29 >> 4;
  unint64_t v32 = (__int8 *)operator new(40 * (v29 >> 4));
  long long __p = v32;
  *(void *)&long long v92 = v32;
  *((void *)&v92 + 1) = &v32[40 * v31];
  a1 = v30;
  do
  {
    if (*(_DWORD *)(v27 + 8) != 2)
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    sub_3FB480((uint64_t)v93, *(void **)v27, a2);
    unint64_t v32 = &sub_3FD218((char **)&__p, (uint64_t)v32, v93)[2].n128_i8[8];
    v27 += 16;
  }
  while (v27 != v28);
  if (__p != (void *)v92)
  {
    uint64_t v33 = *(void *)(v92 - 32);
    goto LABEL_35;
  }
LABEL_34:
  uint64_t v33 = 0;
LABEL_35:
  unsigned int v34 = sub_491B8C(a1);
  unint64_t v35 = (void *)sub_3FB95C(v85, v34);
  v93[1].n128_u8[7] = 13;
  strcpy((char *)v93, "oem_filter_id");
  char v36 = sub_31AB44(v35, (uint64_t)v93);
  if (v93[1].n128_i8[7] < 0) {
    operator delete((void *)v93[0].n128_u64[0]);
  }
  sub_4068B4((uint64_t)v90, a1, v36, a3);
  sub_4068BC((uint64_t)v90, a4, v33, 0, &v89, v37);
  uint64_t v87 = 0;
  double v88 = 0;
  uint64_t v86 = 0;
  uint64_t v38 = v92 - (void)__p;
  uint64_t v83 = a2;
  if ((void *)v92 == __p)
  {
    int v40 = 0;
  }
  else
  {
    uint64_t v39 = v38 / 40;
    if ((unint64_t)(v38 / 40) >> 62) {
      sub_2E00();
    }
    int v40 = (int32x4_t *)operator new(4 * v39);
    uint64_t v86 = v40;
    double v88 = &v40->i8[4 * v39];
    bzero(v40, 4 * v39);
    uint64_t v87 = v88;
  }
  uint64_t v41 = sub_376F8C(a3);
  *(void *)&v84[32] = a6;
  *(void *)&v84[48] = a5;
  uint64_t v43 = v89.i64[1];
  uint64_t v42 = v89.i64[0];
  if (v89.i64[0] != v89.i64[1])
  {
    uint64_t v44 = v41;
    do
    {
      unint64_t v45 = sub_28E018(v44, *(void *)(v42 + 52));
      unint64_t v46 = a4[1] - HIDWORD(v45);
      double v47 = sqrt((double)((*a4 - (unint64_t)v45)
                        * (*a4 - (unint64_t)v45)
                        + v46 * v46))
          / 100.0
          * 100.0;
      if (v47 >= 0.0)
      {
        double v48 = v47;
        if (v47 >= 4.50359963e15) {
          goto LABEL_52;
        }
        uint64_t v49 = (uint64_t)(v47 + v47) + 1;
      }
      else
      {
        double v48 = v47;
        if (v47 <= -4.50359963e15) {
          goto LABEL_52;
        }
        uint64_t v49 = (uint64_t)(v47 + v47);
        if (v49 >= 1) {
          --v49;
        }
      }
      double v48 = (double)(v49 >> 1);
LABEL_52:
      if (v48 < 9.22337204e18)
      {
        if (v47 >= 0.0)
        {
          if (v47 < 4.50359963e15)
          {
            uint64_t v50 = (uint64_t)(v47 + v47) + 1;
            goto LABEL_62;
          }
        }
        else if (v47 > -4.50359963e15)
        {
          uint64_t v50 = (uint64_t)(v47 + v47);
          if (v50 >= 1) {
            --v50;
          }
LABEL_62:
          double v47 = (double)(v50 >> 1);
        }
        int64_t v51 = (uint64_t)v47;
        unint64_t v52 = (char *)__p;
        uint64_t v53 = v92 - (void)__p;
        if ((void *)v92 == __p) {
          goto LABEL_43;
        }
        goto LABEL_64;
      }
      int64_t v51 = 0x7FFFFFFFFFFFFFFELL;
      unint64_t v52 = (char *)__p;
      uint64_t v53 = v92 - (void)__p;
      if ((void *)v92 == __p) {
        goto LABEL_43;
      }
LABEL_64:
      unint64_t v54 = v53 / 40;
      if (v54 < 4)
      {
        unint64_t v55 = 0;
LABEL_69:
        int v64 = &v40->i32[v55];
        unint64_t v65 = v54 - v55;
        long double v66 = (int64_t *)&v52[40 * v55 + 8];
        do
        {
          int64_t v67 = *v66;
          v66 += 5;
          __int32 v68 = *v64;
          if (v51 <= v67) {
            ++v68;
          }
          *v64++ = v68;
          --v65;
        }
        while (v65);
        goto LABEL_43;
      }
      unint64_t v55 = v54 & 0xFFFFFFFFFFFFFFFCLL;
      int64x2_t v56 = vdupq_n_s64(v51);
      int v57 = (uint64_t *)(v52 + 88);
      unint64_t v58 = v54 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v59 = v40;
      do
      {
        uint64_t v60 = v57 + 5;
        v61.i64[0] = *(v57 - 10);
        v61.i64[1] = *(v57 - 5);
        uint64_t v62 = *v57;
        v57 += 20;
        v63.i64[0] = v62;
        v63.i64[1] = *v60;
        int32x4_t *v59 = vsubq_s32(*v59, vuzp1q_s32((int32x4_t)vcgeq_s64(v61, v56), (int32x4_t)vcgeq_s64(v63, v56)));
        ++v59;
        v58 -= 4;
      }
      while (v58);
      if (v54 != v55) {
        goto LABEL_69;
      }
LABEL_43:
      v42 += 80;
    }
    while (v42 != v43);
  }
  unsigned int v69 = sub_29AEBC(a1);
  uint64_t v70 = *(void *)&v84[48];
  uint64_t v71 = *(_OWORD **)&v84[32];
  v93[1].n128_u8[7] = 17;
  strcpy((char *)v93, "arrival_threshold");
  uint64_t v72 = (void *)sub_3FBB5C(v85, v69, (uint64_t)v93);
  if (v93[1].n128_i8[7] < 0) {
    operator delete((void *)v93[0].n128_u64[0]);
  }
  sub_3FB578(v72, v83, *(uint64_t *)&v84[32]);
  if ((void *)v92 != __p)
  {
    uint64_t v73 = ((void)v92 - (void)__p) / 40;
    double v74 = (char *)__p + 16;
    uint64_t v75 = v40;
    while (1)
    {
      unsigned int v76 = v75->i32[0];
      uint64_t v75 = (int32x4_t *)((char *)v75 + 4);
      if (v76 >= *((_DWORD *)v74 - 4)) {
        break;
      }
      v74 += 40;
      if (!--v73) {
        goto LABEL_82;
      }
    }
    long long v77 = *(_OWORD *)v74;
    *(void *)(*(void *)&v84[32] + 16) = *((void *)v74 + 2);
    *uint64_t v71 = v77;
  }
LABEL_82:
  v93[0].n128_u64[0] = (unint64_t)operator new(0x30uLL);
  *(__n128 *)((char *)v93 + 8) = (__n128)xmmword_20B9A40;
  strcpy((char *)v93[0].n128_u64[0], "num_charging_stations_close_to_destination");
  double v95 = (double)(0xCCCCCCCCCCCCCCCDLL * ((v89.i64[1] - v89.i64[0]) >> 4));
  unsigned int v96 = 1;
  uint64_t v78 = sub_55FA4((void *)(v70 + 24), v70);
  uint64_t v94 = v93;
  uint64_t v79 = sub_8FFD4(v78, (uint64_t)v93, (uint64_t)&unk_20F06E0, (long long **)&v94);
  sub_58A78((uint64_t)(v79 + 40), (uint64_t)&v95);
  sub_5521C((uint64_t *)v96, (uint64_t *)&v95);
  if (v93[1].n128_i8[7] < 0) {
    operator delete((void *)v93[0].n128_u64[0]);
  }
  v93[1].n128_u8[7] = 15;
  strcpy((char *)v93, "min_arrival_soc");
  double v95 = (double)sub_3FB38C((uint64_t)v71);
  unsigned int v96 = 1;
  uint64_t v80 = sub_55FA4((void *)(v70 + 24), v70);
  uint64_t v94 = v93;
  double v81 = sub_8FFD4(v80, (uint64_t)v93, (uint64_t)&unk_20F06E0, (long long **)&v94);
  sub_58A78((uint64_t)(v81 + 40), (uint64_t)&v95);
  sub_5521C((uint64_t *)v96, (uint64_t *)&v95);
  if (v93[1].n128_i8[7] < 0) {
    operator delete((void *)v93[0].n128_u64[0]);
  }
  if (v40) {
    operator delete(v40);
  }
  if (v89.i64[0])
  {
    sub_28F794((uint64_t)&v89, (void **)v89.i64[0]);
    operator delete((void *)v89.i64[0]);
  }
  if (__p)
  {
    *(void *)&long long v92 = __p;
    operator delete(__p);
  }
}

void sub_3FCC9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3FCDB4(void *a1, uint64_t a2)
{
  unsigned int v3 = sub_491B8C(a2);
  uint64_t v4 = (void *)sub_3FB95C(a1, v3);
  char v8 = 13;
  strcpy((char *)__p, "oem_filter_id");
  uint64_t result = sub_31AB44(v4, (uint64_t)__p);
  uint64_t v6 = result;
  if (v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_3FCE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3FCE64(void *a1, _DWORD *a2)
{
  long long __p = operator new(0x30uLL);
  long long v11 = xmmword_20B9380;
  strcpy((char *)__p, "min_charged_energy_per_charging_stop_percentage");
  unsigned int v4 = sub_31AC04(a1, (uint64_t)&__p);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
  long long __p = (void *)sub_40A3AC(v4, a2);
  LODWORD(v11) = v5;
  int v6 = sub_40A440(&__p);
  long long __p = operator new(0x28uLL);
  long long v11 = xmmword_20B9960;
  strcpy((char *)__p, "min_charged_energy_per_charging_stop_wh");
  int v7 = sub_319F48(a1, (uint64_t)&__p);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
  int v8 = 1000 * v7;
  if (1000 * v7 >= v6) {
    int v8 = v6;
  }
  return v8 & ~(v8 >> 31);
}

void sub_3FCF74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_3FCF94(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v5 = sub_491B8C(a2);
  int v6 = (void *)sub_3FB95C(a1, v5);
  long long __p = operator new(0x20uLL);
  long long v16 = xmmword_20B8870;
  strcpy((char *)__p, "avoided_charging_networks");
  int v7 = (uint64_t *)sub_5C4AC(v6, (uint64_t)&__p);
  int v8 = v7;
  if (SHIBYTE(v16) < 0)
  {
    operator delete(__p);
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v11 = v10 - v9;
    if (v10 == v9) {
      return;
    }
  }
  else
  {
    uint64_t v9 = *v7;
    uint64_t v10 = v7[1];
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v11 = v10 - v9;
    if (v10 == v9) {
      return;
    }
  }
  if (v11 < 0) {
    sub_2E00();
  }
  unint64_t v12 = (char *)operator new((unint64_t)v11 >> 1);
  *(void *)a3 = v12;
  *(void *)(a3 + 8) = v12;
  *(void *)(a3 + 16) = &v12[8 * (v11 >> 4)];
  do
  {
    if (*(_DWORD *)(v9 + 8))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    unint64_t v13 = std::stoull(*(const std::string **)v9, 0, 10);
    long long __p = (void *)nullsub_1(v13);
    unint64_t v12 = sub_3FD5B4((void **)a3, v12, &__p) + 8;
    v9 += 16;
  }
  while (v9 != v10);
}

void sub_3FD118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_3FD150(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v5 = sub_29AEBC(a2);
  int v6 = (void *)sub_3FB738(a1, v5);
  char v10 = 5;
  strcpy((char *)__p, "patch");
  uint64_t v7 = sub_561B0(v6, (uint64_t)__p);
  if (*(char *)(v7 + 23) < 0)
  {
    sub_4200((unsigned char *)a3, *(void **)v7, *(void *)(v7 + 8));
  }
  else
  {
    long long v8 = *(_OWORD *)v7;
    *(void *)(a3 + 16) = *(void *)(v7 + 16);
    *(_OWORD *)a3 = v8;
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_3FD1FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 *sub_3FD218(char **a1, uint64_t a2, __n128 *a3)
{
  int v6 = (__n128 *)*a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 40;
  long long v8 = (__n128 *)&(*a1)[40 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 >= v9)
  {
    unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - (void)v6) >> 3) + 1;
    if (v17 > 0x666666666666666) {
      sub_2E00();
    }
    unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - (void)v6) >> 3);
    if (2 * v18 > v17) {
      unint64_t v17 = 2 * v18;
    }
    if (v18 >= 0x333333333333333) {
      unint64_t v19 = 0x666666666666666;
    }
    else {
      unint64_t v19 = v17;
    }
    int v40 = a1 + 2;
    if (v19)
    {
      if (v19 > 0x666666666666666) {
        sub_188D718();
      }
      unsigned int v20 = (__n128 *)operator new(40 * v19);
    }
    else
    {
      unsigned int v20 = 0;
    }
    char v36 = v20;
    double v37 = (char *)v20 + 40 * v7;
    long long __dst = v37;
    uint64_t v39 = (char *)v20 + 40 * v19;
    sub_2E8294((uint64_t)&v36, a3);
    uint64_t v23 = v37;
    unsigned int v24 = (__n128 *)*a1;
    long long v25 = v37;
    if (*a1 != (char *)v8)
    {
      char v26 = v8;
      uint64_t v27 = v37;
      do
      {
        long long v28 = *(long long *)((char *)&v26[-3] + 8);
        long long v29 = *(long long *)((char *)&v26[-2] + 8);
        long long v25 = v27 - 40;
        *((void *)v27 - 1) = v26[-1].n128_u64[1];
        *(_OWORD *)(v27 - 24) = v29;
        *(_OWORD *)(v27 - 40) = v28;
        char v26 = (__n128 *)((char *)v26 - 40);
        v27 -= 40;
      }
      while (v26 != v24);
    }
    double v37 = v25;
    uint64_t v30 = (__n128 *)a1[1];
    uint64_t v31 = (char *)__dst;
    int64_t v32 = (char *)v30 - (char *)v8;
    if (v30 != v8)
    {
      memmove(__dst, v8, (char *)v30 - (char *)v8);
      long long v25 = v37;
      long long v8 = (__n128 *)a1[1];
    }
    uint64_t v33 = (__n128 *)*a1;
    *a1 = v25;
    a1[1] = &v31[v32];
    unsigned int v34 = a1[2];
    a1[2] = v39;
    long long __dst = v8;
    uint64_t v39 = v34;
    char v36 = v33;
    double v37 = (char *)v33;
    if (v8 != v33) {
      long long __dst = (char *)v33 + ((char *)v8 - (char *)v33 - 40) % 0x28uLL;
    }
    if (v33) {
      operator delete(v33);
    }
    return (__n128 *)v23;
  }
  else if (v8 == (__n128 *)v5)
  {
    __n128 v21 = *a3;
    __n128 v22 = a3[1];
    v8[2].n128_u64[0] = a3[2].n128_u64[0];
    *long long v8 = v21;
    v8[1] = v22;
    a1[1] = &v8[2].n128_i8[8];
  }
  else
  {
    char v10 = &v8[2].n128_i8[8];
    unint64_t v11 = v5 - 40;
    unint64_t v12 = a1[1];
    if (v5 >= 0x28)
    {
      do
      {
        long long v13 = *(_OWORD *)v11;
        long long v14 = *(_OWORD *)(v11 + 16);
        *((void *)v12 + 4) = *(void *)(v11 + 32);
        *(_OWORD *)unint64_t v12 = v13;
        *((_OWORD *)v12 + 1) = v14;
        v11 += 40;
        v12 += 40;
      }
      while (v11 < v5);
    }
    a1[1] = v12;
    if ((char *)v5 != v10) {
      memmove(&v8[2].n128_i8[8], v8, v5 - (void)v10);
    }
    __n128 v15 = *a3;
    __n128 v16 = a3[1];
    v8[2].n128_u64[0] = a3[2].n128_u64[0];
    *long long v8 = v15;
    v8[1] = v16;
  }
  return v8;
}

void sub_3FD488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (a12 == a11)
  {
    long long v13 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v13 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

unint64_t sub_3FD4E4(uint64_t a1, void *a2, char a3)
{
  sub_2954EC(a1, (HIDWORD(*a2) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(*a2) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((*a2 >> 1) & 1) << 48)) ^ 0x1000000000000, (uint64_t)v10);
  unsigned int v4 = __p;
  if (__p == v12)
  {
    unint64_t v6 = 0xFFFFFFFF00000000;
    uint64_t v7 = 0xFFFFFFFFLL;
    if (!__p) {
      return v6 | v7;
    }
    goto LABEL_8;
  }
  if (a3) {
    unint64_t v5 = sub_2E40A4((uint64_t)v10);
  }
  else {
    unint64_t v5 = sub_2E1AA4((uint64_t)v10);
  }
  unsigned int v8 = v5;
  unint64_t v6 = v5 & 0xFFFFFFFF00000000;
  unsigned int v4 = __p;
  uint64_t v7 = v8;
  if (__p)
  {
LABEL_8:
    unint64_t v12 = v4;
    operator delete(v4);
  }
  return v6 | v7;
}

void sub_3FD598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_3FD5B4(void **a1, unsigned char *a2, void *a3)
{
  unint64_t v6 = (unint64_t)*a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (unsigned char *)*a1;
  uint64_t v8 = v7 >> 3;
  unint64_t v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)unint64_t v9 = *a3;
      a1[1] = v9 + 8;
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    long long v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      unint64_t v19 = a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      __n128 v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = (unint64_t)a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        unint64_t v19 = a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        unint64_t v19 = a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          long long v13 = (uint64_t *)((char *)v13 + v21);
          unint64_t v19 = (void *)(v5 + v21);
          __n128 v22 = (_OWORD *)(v5 + 16);
          uint64_t v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *__n128 v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v55 = *v13++;
        *v19++ = v55;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)unint64_t v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    uint64_t v30 = (char *)operator new(8 * v29);
    uint64_t v31 = &v30[8 * v8];
    int64_t v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v30 = 0;
    uint64_t v31 = (char *)(8 * v8);
    int64_t v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((unsigned char *)v6 == a2) {
      unint64_t v52 = 1;
    }
    else {
      unint64_t v52 = v7 >> 2;
    }
    if (v52 >> 61) {
      sub_188D718();
    }
    uint64_t v53 = (char *)operator new(8 * v52);
    uint64_t v31 = &v53[8 * (v52 >> 2)];
    int64_t v32 = &v53[8 * v52];
    if (v30)
    {
      unint64_t v54 = &v53[8 * v52];
      operator delete(v30);
      int64_t v32 = v54;
      unsigned int v34 = (char *)*a1;
      *(void *)uint64_t v31 = *a3;
      unint64_t v35 = v31 + 8;
      char v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  unsigned int v34 = (char *)v6;
  *(void *)uint64_t v31 = *a3;
  unint64_t v35 = v31 + 8;
  char v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    double v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    uint64_t v39 = v9;
    char v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    uint64_t v39 = v9;
    char v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v39 = &v9[-v41];
    char v36 = &v31[-v41];
    uint64_t v42 = v31 - 16;
    uint64_t v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)uint64_t v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  double v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    uint64_t v49 = v9;
    size_t v50 = v47 - v9;
    int64_t v51 = v32;
    memmove(v35, v49, v50);
    int64_t v32 = v51;
    unsigned int v34 = (char *)*a1;
  }
  *a1 = v36;
  a1[1] = &v35[v48];
  a1[2] = v32;
  if (v34) {
    operator delete(v34);
  }
  return v31;
}

void sub_3FD90C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_3FD924()
{
  unk_25581B7 = 16641;
  word_25581A0 = 65;
  byte_25581CF = 1;
  byte_25581B9 = 0;
}

uint64_t sub_3FD94C(uint64_t a1)
{
  sub_9BFD0(*(void *)(a1 + 280), 100000);
  sub_9BFE8(*(void *)(a1 + 280), 80.0);
  sub_9BFFC(*(void *)(a1 + 280), 80.0);
  sub_9C010(*(void *)(a1 + 280), 450);
  sub_9C024(*(void *)(a1 + 280), 0);
  sub_9E4D4(*(void *)(a1 + 280), 0);
  sub_9E4E8(*(void *)(a1 + 280), 0x48CA6u);
  sub_9C03C(*(void *)(a1 + 280), 0.0);
  sub_9C044(*(void *)(a1 + 280), 0.0);
  uint64_t v2 = *(void *)(a1 + 280);
  unsigned int v3 = (unsigned int *)nullsub_1(a1);
  int v4 = sub_4F44(v3);
  sub_92070(v2, v4);
  uint64_t v5 = *(void *)(a1 + 280);
  unint64_t v6 = (_DWORD *)nullsub_1(a1);
  unsigned int v7 = sub_40A4FC(v6);
  sub_9C058(v5, v7);
  uint64_t v8 = *(void *)(a1 + 280);

  return sub_9C064(v8);
}

uint64_t sub_3FDA3C(int *a1, uint64_t a2)
{
  if (sub_40A4AC(a1)) {
    return 0;
  }
  int v5 = sub_3FD94C(a2);
  if (v5 > 0)
  {
    int v6 = sub_40A440(a1);
    double v7 = (double)v6 / (double)v5 * 100000.0;
    if (v7 >= 0.0)
    {
      double v8 = (double)v6 / (double)v5 * 100000.0;
      if (v7 >= 4.50359963e15) {
        goto LABEL_18;
      }
      uint64_t v9 = (uint64_t)(v7 + v7) + 1;
    }
    else
    {
      double v8 = (double)v6 / (double)v5 * 100000.0;
      if (v7 <= -4.50359963e15) {
        goto LABEL_18;
      }
      uint64_t v9 = (uint64_t)(v7 + v7);
      if (v9 >= 1) {
        --v9;
      }
    }
    double v8 = (double)(v9 >> 1);
LABEL_18:
    if (v8 >= 9.22337204e18) {
      return 0x7FFFFFFFFFFFFFFELL;
    }
    if (v7 >= 0.0)
    {
      if (v7 < 4.50359963e15)
      {
        uint64_t v12 = (uint64_t)(v7 + v7) + 1;
        return (uint64_t)(double)(v12 >> 1);
      }
    }
    else if (v7 > -4.50359963e15)
    {
      uint64_t v12 = (uint64_t)(v7 + v7);
      if (v12 >= 1) {
        --v12;
      }
      return (uint64_t)(double)(v12 >> 1);
    }
    return (uint64_t)v7;
  }
  uint64_t v4 = 100000000;
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v16);
    sub_188FC78(v16, (uint64_t)"Got non-positive energy consumption per kilometer (", 51);
    unint64_t v10 = (void *)std::ostream::operator<<();
    int64_t v11 = sub_188FC78(v10, (uint64_t)" kWh) without elevation for consumption model with id ", 54);
    sub_4F44(*(unsigned int **)(a2 + 280));
    std::ostream::operator<<();
    sub_188FC78(v11, (uint64_t)".", 1);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v15 < 0) {
      operator delete(__p);
    }
    if (v17 < 0) {
      operator delete((void *)v16[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return v4;
}

void sub_3FDD18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

__n128 sub_3FDD64@<Q0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((a1 - 2) < 2)
  {
    int v5 = (__n128 *)(a2 + 312);
    int v6 = (__n128 *)(a2 + 384);
    if (sub_40A52C((_DWORD *)(a2 + 384), (_DWORD *)(a2 + 312))) {
      double v7 = v6;
    }
    else {
      double v7 = v5;
    }
    __n128 result = *v7;
    *(__n128 *)a3 = *v7;
    *(void *)(a3 + 16) = v7[1].n128_u64[0];
  }
  else if (a1)
  {
    sub_3FB190((uint64_t *)(a2 + 288), a3);
  }
  else
  {
    *(void *)(a3 + 16) = *(void *)(a2 + 328);
    __n128 result = *(__n128 *)(a2 + 312);
    *(__n128 *)a3 = result;
  }
  return result;
}

uint64_t sub_3FDE18(int a1, uint64_t a2)
{
  if ((a1 - 2) >= 2)
  {
    if (a1) {
      return 0;
    }
    else {
      return *(unsigned int *)(a2 + 4);
    }
  }
  else
  {
    unsigned int v2 = *(_DWORD *)(a2 + 28);
    unsigned int v3 = *(_DWORD *)(a2 + 4);
    if ((int)v2 >= (int)v3) {
      return v3;
    }
    else {
      return v2;
    }
  }
}

__n128 sub_3FDE4C@<Q0>(int a1@<W0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  if ((a1 - 2) < 2)
  {
    int v5 = a2 + 21;
    int v6 = a2 + 24;
    if (sub_40A52C(&a2[24], &a2[21])) {
      double v7 = v6;
    }
    else {
      double v7 = v5;
    }
    __n128 result = *v7;
    *(__n128 *)a3 = *v7;
    *(void *)(a3 + 16) = v7[1].n128_u64[0];
  }
  else if (a1)
  {
    sub_3FB190((uint64_t *)&a2[18], a3);
  }
  else
  {
    __n128 result = a2[21];
    *(__n128 *)a3 = result;
    *(void *)(a3 + 16) = a2[22].n128_u64[0];
  }
  return result;
}

uint64_t sub_3FDEFC(int a1, uint64_t a2)
{
  if ((a1 - 2) >= 2)
  {
    if (a1) {
      return 0;
    }
    else {
      return *(unsigned int *)(a2 + 12);
    }
  }
  else
  {
    unsigned int v2 = *(_DWORD *)(a2 + 28);
    unsigned int v3 = *(_DWORD *)(a2 + 12);
    if ((int)v2 >= (int)v3) {
      return v3;
    }
    else {
      return v2;
    }
  }
}

__n128 sub_3FDF30@<Q0>(int a1@<W0>, __n128 *a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v4 = a2 + 24;
  if (a1 == 2)
  {
    int v5 = (__n128 *)((char *)a2 + 312);
    if (sub_40A52C(&a2[19].n128_u32[2], &a2[24])) {
      uint64_t v4 = v5;
    }
  }
  __n128 result = *v4;
  *a3 = *v4;
  a3[1].n128_u64[0] = v4[1].n128_u64[0];
  return result;
}

uint64_t sub_3FDF8C(char a1, uint64_t a2)
{
  if ((a1 & 0xFD) != 0) {
    return 0;
  }
  else {
    return *(unsigned int *)(a2 + 20);
  }
}

void sub_3FDFA0()
{
  unk_25581E7 = 16641;
  word_25581D0 = 65;
  byte_25581FF = 1;
  byte_25581E9 = 0;
}

uint64_t *sub_3FDFC8(uint64_t *a1, void *a2)
{
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  uint64_t v4 = (void **)(a1 + 3);
  *(_OWORD *)a1 = 0u;
  a1[6] = sub_3750CC(a2);
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 18;
  strcpy((char *)&__dst, "EVRegionClassifier");
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v33 = 0;
  int v5 = sub_374CDC((uint64_t)a2, (uint64_t)&__dst, (uint64_t *)__p);
  int v6 = (void **)__p[0];
  if (__p[0])
  {
    double v7 = (void **)__p[1];
    double v8 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      double v8 = __p[0];
    }
    __p[1] = v6;
    operator delete(v8);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&__dst, "ev_countries");
  uint64_t v9 = (void *)sub_5C4AC(v5, (uint64_t)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v33 = 0;
  sub_23708((uint64_t)__p, (uint64_t)(v9[1] - *v9) >> 4);
  unint64_t v10 = (_DWORD *)*v9;
  int64_t v11 = (_DWORD *)v9[1];
  if ((_DWORD *)*v9 != v11)
  {
    uint64_t v12 = (std::string *)__p[1];
    do
    {
      if (v10[2])
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      long long v13 = *(long long **)v10;
      if (*(char *)(*(void *)v10 + 23) < 0)
      {
        sub_4200(&__dst, *(void **)v13, *((void *)v13 + 1));
      }
      else
      {
        long long v14 = *v13;
        __dst.__r_.__value_.__r.__words[2] = *((void *)v13 + 2);
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v14;
      }
      char v15 = sub_5D6D4((std::string **)__p, (uint64_t)v12, &__dst);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      uint64_t v12 = v15 + 1;
      v10 += 4;
    }
    while (v10 != v11);
  }
  uint64_t v16 = *a1;
  if (*a1)
  {
    uint64_t v17 = a1[1];
    unint64_t v18 = (void *)*a1;
    if (v17 != v16)
    {
      do
      {
        if (*(char *)(v17 - 1) < 0) {
          operator delete(*(void **)(v17 - 24));
        }
        v17 -= 24;
      }
      while (v17 != v16);
      unint64_t v18 = (void *)*a1;
    }
    a1[1] = v16;
    operator delete(v18);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)__p;
  a1[2] = v33;
  strcpy((char *)&__dst, "preflight_ev_countries");
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 22;
  unint64_t v19 = (void *)sub_5C4AC(v5, (uint64_t)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v33 = 0;
  sub_23708((uint64_t)__p, (uint64_t)(v19[1] - *v19) >> 4);
  uint64_t v20 = (_DWORD *)*v19;
  uint64_t v21 = (_DWORD *)v19[1];
  if ((_DWORD *)*v19 != v21)
  {
    __n128 v22 = (std::string *)__p[1];
    do
    {
      if (v20[2])
      {
        uint64_t v31 = __cxa_allocate_exception(8uLL);
        void *v31 = &off_23FDF58;
      }
      uint64_t v23 = *(long long **)v20;
      if (*(char *)(*(void *)v20 + 23) < 0)
      {
        sub_4200(&__dst, *(void **)v23, *((void *)v23 + 1));
      }
      else
      {
        long long v24 = *v23;
        __dst.__r_.__value_.__r.__words[2] = *((void *)v23 + 2);
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v24;
      }
      long long v25 = sub_5D6D4((std::string **)__p, (uint64_t)v22, &__dst);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      __n128 v22 = v25 + 1;
      v20 += 4;
    }
    while (v20 != v21);
  }
  unint64_t v26 = (void **)*v4;
  if (*v4)
  {
    uint64_t v27 = (void **)a1[4];
    uint64_t v28 = *v4;
    if (v27 != v26)
    {
      do
      {
        if (*((char *)v27 - 1) < 0) {
          operator delete(*(v27 - 3));
        }
        v27 -= 3;
      }
      while (v27 != v26);
      uint64_t v28 = *v4;
    }
    a1[4] = (uint64_t)v26;
    operator delete(v28);
    __n128 *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(_OWORD *)(a1 + 3) = *(_OWORD *)__p;
  a1[5] = v33;
  return a1;
}

void sub_3FE3C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_1A668((void **)&a9);
  sub_1A668(v19);
  sub_1A668(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_3FE478(uint64_t *a1, unint64_t a2, int a3)
{
  p_p = (unsigned __int8 *)&__p;
  sub_3D63DC(a1[6], a2, &__p);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if (*a1 != v7)
  {
    if ((v23 & 0x80u) == 0) {
      uint64_t v8 = v23;
    }
    else {
      uint64_t v8 = v22;
    }
    if ((v23 & 0x80u) != 0) {
      p_p = (unsigned __int8 *)__p;
    }
    while (1)
    {
      uint64_t v9 = *(unsigned __int8 *)(v6 + 23);
      if ((v9 & 0x80u) == 0) {
        uint64_t v10 = *(unsigned __int8 *)(v6 + 23);
      }
      else {
        uint64_t v10 = *(void *)(v6 + 8);
      }
      if (v10 == v8)
      {
        if ((v9 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v6, p_p, *(void *)(v6 + 8))) {
            break;
          }
        }
        else
        {
          if (!*(unsigned char *)(v6 + 23)) {
            break;
          }
          uint64_t v11 = 0;
          while (*(unsigned __int8 *)(v6 + v11) == p_p[v11])
          {
            if (v9 == ++v11) {
              goto LABEL_19;
            }
          }
        }
      }
      v6 += 24;
      if (v6 == v7) {
        goto LABEL_23;
      }
    }
  }
LABEL_19:
  if (v6 == v7)
  {
LABEL_23:
    if (!a3) {
      goto LABEL_43;
    }
    uint64_t v14 = a1[3];
    uint64_t v15 = a1[4];
    if (v14 != v15)
    {
      if ((v23 & 0x80u) == 0) {
        uint64_t v16 = v23;
      }
      else {
        uint64_t v16 = v22;
      }
      if ((v23 & 0x80u) == 0) {
        uint64_t v17 = (unsigned __int8 *)&__p;
      }
      else {
        uint64_t v17 = (unsigned __int8 *)__p;
      }
      while (1)
      {
        uint64_t v18 = *(unsigned __int8 *)(v14 + 23);
        if ((v18 & 0x80u) == 0) {
          uint64_t v19 = *(unsigned __int8 *)(v14 + 23);
        }
        else {
          uint64_t v19 = *(void *)(v14 + 8);
        }
        if (v19 == v16)
        {
          if ((v18 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v14, v17, *(void *)(v14 + 8))) {
              break;
            }
          }
          else
          {
            if (!*(unsigned char *)(v14 + 23)) {
              break;
            }
            uint64_t v20 = 0;
            while (*(unsigned __int8 *)(v14 + v20) == v17[v20])
            {
              if (v18 == ++v20) {
                goto LABEL_42;
              }
            }
          }
        }
        v14 += 24;
        if (v14 == v15) {
          goto LABEL_43;
        }
      }
    }
LABEL_42:
    if (v14 == v15)
    {
LABEL_43:
      uint64_t v12 = 0;
      if (((char)v23 & 0x80000000) == 0) {
        return v12;
      }
      goto LABEL_21;
    }
  }
  uint64_t v12 = 1;
  if ((char)v23 < 0) {
LABEL_21:
  }
    operator delete(__p);
  return v12;
}

void sub_3FE630()
{
  unk_2558217 = 16641;
  word_2558200 = 65;
  byte_255822F = 1;
  byte_2558219 = 0;
}

void sub_3FE658(uint64_t a1)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)a1 = 0x7FFFFFFF;
  *(void *)(a1 + 4) = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(void *)(a1 + 144) = 0x8000000080000000;
  *(_DWORD *)(a1 + 152) = -1;
  *(_OWORD *)(a1 + 252) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 220) = 0u;
  *(_OWORD *)(a1 + 204) = 0u;
  *(_OWORD *)(a1 + 188) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  *(_OWORD *)(a1 + 156) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 196) = -1;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 232) = 1065353216;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 272) = 1065353216;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 312) = 0x7FFFFFFF;
  *(void *)(a1 + 316) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 336) = 0x7FFFFFFF;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 340) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 360) = 0x7FFFFFFF;
  *(void *)(a1 + 364) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 384) = 0x7FFFFFFF;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 388) = 0x7FFFFFFF7FFFFFFFLL;
  *(unsigned char *)(a1 + 408) = -1;
  BYTE7(v1[1]) = 16;
  strcpy((char *)v1, "EVRequestContext");
  sub_401FE8(a1 + 416, v1);
}

void sub_3FF170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void **a15, uint64_t *a16, uint64_t *a17, void *a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a43 < 0) {
    operator delete(__p);
  }
  if (a30) {
    operator delete(a30);
  }
  sub_40062C(a13);
  sub_400098(a14);
  sub_3FFDA4(a15);
  sub_3FFAB0(a16);
  uint64_t v45 = *a17;
  *a17 = 0;
  if (v45) {
    sub_402DD0((uint64_t)a17, v45);
  }
  sub_4026F4(a18);
  sub_402628(v43);
  _Unwind_Resume(a1);
}

void sub_3FF2B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = sub_29AEBC(a2);
  std::to_string(&v18, v5);
  HIBYTE(v15[2]) = 19;
  strcpy((char *)v15, "EVConsumptionModels");
  memset(__p, 0, 24);
  uint64_t v6 = sub_374CDC(a3, (uint64_t)v15, (uint64_t *)__p);
  sub_54214((uint64_t)v17, (uint64_t)v6);
  uint64_t v7 = (void **)__p[0];
  if (__p[0])
  {
    uint64_t v8 = (void **)__p[1];
    uint64_t v9 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      uint64_t v9 = __p[0];
    }
    __p[1] = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v15[2]) < 0) {
    operator delete(v15[0]);
  }
  uint64_t v10 = sub_560F4(v17, (uint64_t)&v18);
  sub_54214((uint64_t)v15, v10);
  int v14 = sub_29AEBC(a2);
  uint64_t v11 = nullsub_1(a2);
  sub_53FA4(v11);
  uint64_t v12 = nullsub_1(a2);
  sub_40A44C(v12);
  long long v13 = (void *)sub_68E9C(a2);
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "vehicle_parameters");
  sub_560F4(v13, (uint64_t)__p);
  operator new();
}

void sub_3FF524(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
}

void sub_3FF5D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  HIBYTE(v28[2]) = 16;
  strcpy((char *)v28, "EVChargingModels");
  long long __p = 0;
  unint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v4 = sub_374CDC(a3, (uint64_t)v28, (uint64_t *)&__p);
  sub_54214((uint64_t)v33, (uint64_t)v4);
  unsigned int v5 = (void **)__p;
  if (__p)
  {
    uint64_t v6 = v26;
    uint64_t v7 = __p;
    if (v26 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      uint64_t v7 = __p;
    }
    unint64_t v26 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v28[2]) < 0) {
    operator delete(v28[0]);
  }
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  unsigned int v8 = sub_491B8C(a2);
  std::to_string(&v29, v8);
  uint64_t v9 = sub_560F4(v33, (uint64_t)&v29);
  sub_54214((uint64_t)v28, v9);
  HIBYTE(v24[2]) = 19;
  strcpy((char *)v24, "soc_display_formula");
  uint64_t v10 = sub_58070(v28, (uint64_t)v24);
  if (v10 && *((_DWORD *)v10 + 12) == 3)
  {
    uint64_t v11 = (uint64_t *)v10[5];
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    uint64_t v14 = v30;
    if (v13 - *v11 == v31 - v30) {
      goto LABEL_18;
    }
LABEL_16:
    int v15 = 0;
    uint64_t v16 = v28;
  }
  else
  {
    uint64_t v12 = v30;
    uint64_t v13 = v31;
    uint64_t v14 = v30;
LABEL_18:
    while (v12 != v13)
    {
      int v17 = *(_DWORD *)(v12 + 8);
      if (v17 != *(_DWORD *)(v14 + 8) || v17 != -1 && !sub_4027D0(v17, (double *)v12, (double *)v14)) {
        goto LABEL_16;
      }
      v12 += 16;
      v14 += 16;
    }
    int v15 = 1;
    char v23 = 1;
    LOWORD(v22) = 48;
    uint64_t v16 = (void **)sub_560F4(v33, (uint64_t)&v22);
  }
  sub_54214((uint64_t)&__p, (uint64_t)v16);
  if (v15 && v23 < 0)
  {
    operator delete(v22);
    if ((SHIBYTE(v24[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
  }
  else if ((SHIBYTE(v24[2]) & 0x80000000) == 0)
  {
LABEL_28:
    if (sub_DAFFC0(a2) == -1 || sub_DAFFC0(a2) > 0x64)
    {
      std::string v18 = (_DWORD *)nullsub_1(a2);
      sub_40A4FC(v18);
    }
    else
    {
      sub_DAFFC0(a2);
    }
    sub_491B8C(a2);
    sub_68EAC(a2);
    uint64_t v19 = nullsub_1(a2);
    sub_53FA4(v19);
    uint64_t v20 = nullsub_1(a2);
    sub_40A44C(v20);
    uint64_t v21 = (unsigned int *)nullsub_1(a2);
    sub_4F44(v21);
    operator new();
  }
  operator delete(v24[0]);
  goto LABEL_28;
}

void sub_3FF9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  sub_5450C((uint64_t)&a27);
  if (a40 < 0) {
    operator delete(a35);
  }
  sub_62CF0((uint64_t *)(v40 - 144));
  sub_5450C(v40 - 120);
  _Unwind_Resume(a1);
}

uint64_t *sub_3FFAB0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_9FDC0(v2);
    operator delete();
  }
  return a1;
}

void sub_3FFAF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6 = sub_491B8C(a2);
  std::to_string(&v19, v6);
  HIBYTE(v14[2]) = 16;
  strcpy((char *)v14, "EVChargingModels");
  long long __p = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v7 = sub_374CDC(a4, (uint64_t)v14, (uint64_t *)&__p);
  sub_54214((uint64_t)v18, (uint64_t)v7);
  unsigned int v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v16;
    uint64_t v10 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    uint64_t v16 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14[2]) < 0) {
    operator delete(v14[0]);
  }
  uint64_t v11 = sub_560F4(v18, (uint64_t)&v19);
  sub_54214((uint64_t)v14, v11);
  sub_491B8C(a2);
  sub_68EAC(a2);
  uint64_t v12 = nullsub_1(a2);
  sub_53FA4(v12);
  uint64_t v13 = nullsub_1(a2);
  sub_40A44C(v13);
  operator new();
}

void sub_3FFD1C()
{
}

void sub_3FFD84(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x3FFD64);
}

void **sub_3FFDA4(void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_99C04(v2);
    operator delete();
  }
  return a1;
}

void sub_3FFDEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6 = sub_491B8C(a2);
  std::to_string(&v19, v6);
  HIBYTE(v14[2]) = 16;
  strcpy((char *)v14, "EVChargingModels");
  long long __p = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v7 = sub_374CDC(a4, (uint64_t)v14, (uint64_t *)&__p);
  sub_54214((uint64_t)v18, (uint64_t)v7);
  unsigned int v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v16;
    uint64_t v10 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    uint64_t v16 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14[2]) < 0) {
    operator delete(v14[0]);
  }
  uint64_t v11 = sub_560F4(v18, (uint64_t)&v19);
  sub_54214((uint64_t)v14, v11);
  sub_491B8C(a2);
  sub_68EAC(a2);
  uint64_t v12 = nullsub_1(a2);
  sub_53FA4(v12);
  uint64_t v13 = nullsub_1(a2);
  sub_40A44C(v13);
  operator new();
}

void sub_400010()
{
}

void sub_400078(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x400058);
}

void **sub_400098(void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_8CE50(v2);
    operator delete();
  }
  return a1;
}

void sub_4000E0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  char v15 = 9;
  uint64_t v13 = 0;
  strcpy((char *)v14, "EVRouting");
  long long __p = 0;
  uint64_t v12 = 0;
  uint64_t v7 = sub_374CDC(a4, (uint64_t)v14, (uint64_t *)&__p);
  sub_3FBD50(v7, a2, *a3, a1);
  unsigned int v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    uint64_t v12 = v8;
    operator delete(v10);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
}

void sub_4001C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_4001EC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  char v15 = 9;
  uint64_t v13 = 0;
  strcpy((char *)v14, "EVRouting");
  long long __p = 0;
  uint64_t v12 = 0;
  uint64_t v7 = sub_374CDC(a4, (uint64_t)v14, (uint64_t *)&__p);
  sub_3FBE04(v7, a2, *a3, a1);
  unsigned int v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    uint64_t v12 = v8;
    operator delete(v10);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
}

void sub_4002D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_4002F8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  char v15 = 9;
  uint64_t v13 = 0;
  strcpy((char *)v14, "EVRouting");
  long long __p = 0;
  uint64_t v12 = 0;
  uint64_t v7 = sub_374CDC(a4, (uint64_t)v14, (uint64_t *)&__p);
  sub_3FBEB8(v7, a2, *a3, a1);
  unsigned int v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v12;
    uint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    uint64_t v12 = v8;
    operator delete(v10);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
}

void sub_4003E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_400404(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a5 == a6) {
    goto LABEL_24;
  }
  unint64_t v10 = a6 - a5 - 376;
  if (v10 >= 0x178)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    unint64_t v15 = v10 / 0x178 + 1;
    uint64_t v12 = a5 + 376 * (v15 & 0x1FFFFFFFFFFFFFELL);
    uint64_t v16 = v15 & 0x1FFFFFFFFFFFFFELL;
    uint64_t v17 = a5;
    do
    {
      if (*(_DWORD *)(v17 + 104) == 1) {
        ++v13;
      }
      if (*(_DWORD *)(v17 + 480) == 1) {
        ++v14;
      }
      v17 += 752;
      v16 -= 2;
    }
    while (v16);
    uint64_t v11 = v14 + v13;
    if (v15 == (v15 & 0x1FFFFFFFFFFFFFELL)) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = a5;
  }
  do
  {
    if (*(_DWORD *)(v12 + 104) == 1) {
      ++v11;
    }
    v12 += 376;
  }
  while (v12 != a6);
LABEL_14:
  uint64_t v29 = -1;
  int v30 = 0x7FFFFFFF;
  if (v11 == 1)
  {
    while (*(_DWORD *)(a5 + 104) != 1)
    {
      a5 += 376;
      if (a5 == a6)
      {
        a5 = a6;
        break;
      }
    }
    int v18 = *(_DWORD *)(a5 + 8);
    uint64_t v29 = *(void *)a5;
    int v30 = v18;
    if (v29 != -1 || HIDWORD(v29) != -1)
    {
      sub_3FC35C(a2, *a3, a4, (int *)&v29, a7, a1);
      return;
    }
  }
LABEL_24:
  char v28 = 9;
  uint64_t v26 = 0;
  strcpy((char *)v27, "EVRouting");
  long long __p = 0;
  long long v25 = 0;
  uint64_t v20 = sub_374CDC((uint64_t)a4, (uint64_t)v27, (uint64_t *)&__p);
  sub_3FBF6C(v20, a2, *a3, a1);
  uint64_t v21 = (void **)__p;
  if (__p)
  {
    uint64_t v22 = v25;
    char v23 = __p;
    if (v25 != __p)
    {
      do
      {
        if (*((char *)v22 - 1) < 0) {
          operator delete(*(v22 - 3));
        }
        v22 -= 3;
      }
      while (v22 != v21);
      char v23 = __p;
    }
    long long v25 = v21;
    operator delete(v23);
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
}

void sub_400608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_40062C(uint64_t a1)
{
  uint64_t v2 = *(char **)(a1 + 40);
  if (v2)
  {
    do
    {
      unsigned int v5 = *(char **)v2;
      sub_57AC8((uint64_t *)v2 + 5);
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  unsigned int v3 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v3) {
    operator delete(v3);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_4006C8(uint64_t a1)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)a1 = 0x7FFFFFFF;
  *(void *)(a1 + 4) = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(void *)(a1 + 144) = 0x8000000080000000;
  *(_DWORD *)(a1 + 152) = -1;
  *(_OWORD *)(a1 + 252) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 220) = 0u;
  *(_OWORD *)(a1 + 204) = 0u;
  *(_OWORD *)(a1 + 188) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  *(_OWORD *)(a1 + 156) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 196) = -1;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 232) = 1065353216;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 272) = 1065353216;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 312) = 0x7FFFFFFF;
  *(void *)(a1 + 316) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 336) = 0x7FFFFFFF;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 340) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 360) = 0x7FFFFFFF;
  *(void *)(a1 + 364) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 384) = 0x7FFFFFFF;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 388) = 0x7FFFFFFF7FFFFFFFLL;
  *(unsigned char *)(a1 + 408) = -1;
  BYTE7(v1[1]) = 16;
  strcpy((char *)v1, "EVRequestContext");
  sub_401FE8(a1 + 416, v1);
}

void sub_4011E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void **a15, uint64_t *a16, uint64_t *a17, void *a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a43 < 0) {
    operator delete(__p);
  }
  if (a30) {
    operator delete(a30);
  }
  sub_40062C(a13);
  sub_400098(a14);
  sub_3FFDA4(a15);
  sub_3FFAB0(a16);
  uint64_t v45 = *a17;
  *a17 = 0;
  if (v45) {
    sub_402DD0((uint64_t)a17, v45);
  }
  sub_4026F4(a18);
  sub_402628(v43);
  _Unwind_Resume(a1);
}

void sub_401328(uint64_t a1)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)a1 = 0x7FFFFFFF;
  *(void *)(a1 + 4) = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(void *)(a1 + 144) = 0x8000000080000000;
  *(_DWORD *)(a1 + 152) = -1;
  *(_OWORD *)(a1 + 252) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 220) = 0u;
  *(_OWORD *)(a1 + 204) = 0u;
  *(_OWORD *)(a1 + 188) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  *(_OWORD *)(a1 + 156) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 196) = -1;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 232) = 1065353216;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 272) = 1065353216;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 312) = 0x7FFFFFFF;
  *(void *)(a1 + 316) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 336) = 0x7FFFFFFF;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 340) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 360) = 0x7FFFFFFF;
  *(void *)(a1 + 364) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 384) = 0x7FFFFFFF;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 388) = 0x7FFFFFFF7FFFFFFFLL;
  *(unsigned char *)(a1 + 408) = -1;
  BYTE7(v1[1]) = 16;
  strcpy((char *)v1, "EVRequestContext");
  sub_401FE8(a1 + 416, v1);
}

void sub_401E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void **a15, uint64_t *a16, uint64_t *a17, void *a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a43 < 0) {
    operator delete(__p);
  }
  if (a30) {
    operator delete(a30);
  }
  sub_40062C(a13);
  sub_400098(a14);
  sub_3FFDA4(a15);
  sub_3FFAB0(a16);
  uint64_t v45 = *a17;
  *a17 = 0;
  if (v45) {
    sub_402DD0((uint64_t)a17, v45);
  }
  sub_4026F4(a18);
  sub_402628(v43);
  _Unwind_Resume(a1);
}

void **sub_401F88(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_402C7C(v3 - 376);
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_401FE8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_4200(__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a1;
    uint64_t v4 = *(void *)(a1 + 16);
  }
  operator new();
}

void sub_40210C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_5450C((uint64_t)&a9);
  sub_5450C(v21);
  if ((*(char *)(v20 + 23) & 0x80000000) == 0) {
    _Unwind_Resume(a1);
  }
  operator delete(*(void **)v20);
  _Unwind_Resume(a1);
}

uint64_t *sub_4021B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_B128((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          unsigned int v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            uint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  long long v25 = operator new(0x38uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *long long v25 = 0;
  v25[1] = v10;
  uint64_t v26 = v25 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v26, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v26 = *(_OWORD *)a3;
    v25[4] = *(void *)(a3 + 16);
  }
  sub_584A4((uint64_t)(v25 + 5), a3 + 24);
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        uint64_t v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        int v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        uint64_t v29 = *(void **)(*(void *)a1 + 8 * v10);
        int v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      uint64_t v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      int v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *int v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  uint64_t v29 = *(void **)(*(void *)a1 + 8 * v3);
  int v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  *int v30 = *v29;
  *uint64_t v29 = v42[0];
LABEL_92:
  uint64_t v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_4025FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_54A10((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_402610(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_54A10((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_402628(void *a1)
{
  long long v2 = (char *)a1[15];
  if (v2)
  {
    do
    {
      unint64_t v8 = *(char **)v2;
      sub_57AC8((uint64_t *)v2 + 5);
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      long long v2 = v8;
    }
    while (v8);
  }
  unint64_t v3 = (void *)a1[13];
  a1[13] = 0;
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = (char *)a1[9];
  if (v4)
  {
    do
    {
      unint64_t v9 = *(char **)v4;
      sub_57AC8((uint64_t *)v4 + 5);
      if (v4[39] < 0) {
        operator delete(*((void **)v4 + 2));
      }
      operator delete(v4);
      uint64_t v4 = v9;
    }
    while (v9);
  }
  unsigned int v5 = (void *)a1[7];
  a1[7] = 0;
  if (v5) {
    operator delete(v5);
  }
  unsigned int v6 = (void *)a1[2];
  if (v6)
  {
    a1[3] = v6;
    operator delete(v6);
  }
  return a1;
}

void *sub_4026F4(void *a1)
{
  long long v2 = (void *)a1[12];
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      long long v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)a1[10];
  a1[10] = 0;
  if (v4) {
    operator delete(v4);
  }
  unsigned int v5 = (void *)a1[7];
  if (v5)
  {
    do
    {
      unsigned int v6 = (void *)*v5;
      operator delete(v5);
      unsigned int v5 = v6;
    }
    while (v6);
  }
  unint64_t v7 = (void *)a1[5];
  a1[5] = 0;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = a1[1];
  if (v8)
  {
    uint64_t v9 = a1[2];
    unint64_t v10 = (void *)a1[1];
    if (v9 != v8)
    {
      do
      {
        unint64_t v11 = *(void **)(v9 - 24);
        if (v11)
        {
          do
          {
            uint8x8_t v12 = (void *)*v11;
            operator delete(v11);
            unint64_t v11 = v12;
          }
          while (v12);
        }
        uint64_t v13 = *(void **)(v9 - 40);
        *(void *)(v9 - 40) = 0;
        if (v13) {
          operator delete(v13);
        }
        v9 -= 56;
      }
      while (v9 != v8);
      unint64_t v10 = (void *)a1[1];
    }
    a1[2] = v8;
    operator delete(v10);
  }
  return a1;
}

uint64_t sub_4027D0(int a1, double *a2, double *a3)
{
  switch(a1)
  {
    case 0:
      unint64_t v3 = *(unsigned __int8 **)a2;
      double v4 = *a3;
      uint64_t result = (*(void *)a2 | *(void *)a3) == 0;
      if (*(void *)a2) {
        BOOL v6 = *(void *)&v4 == 0;
      }
      else {
        BOOL v6 = 1;
      }
      if (!v6)
      {
        uint64_t v7 = v3[23];
        if ((v7 & 0x80u) == 0) {
          uint64_t v8 = v3[23];
        }
        else {
          uint64_t v8 = *((void *)v3 + 1);
        }
        uint64_t v9 = *(unsigned __int8 *)(*(void *)&v4 + 23);
        int v10 = (char)v9;
        if ((v9 & 0x80u) != 0) {
          uint64_t v9 = *(void *)(*(void *)&v4 + 8);
        }
        if (v8 != v9) {
          return 0;
        }
        if (v10 >= 0) {
          unint64_t v11 = *(unsigned __int8 **)a3;
        }
        else {
          unint64_t v11 = **(unsigned __int8 ***)&v4;
        }
        if ((v7 & 0x80) != 0)
        {
          return memcmp(*(const void **)v3, v11, *((void *)v3 + 1)) == 0;
        }
        else
        {
          if (!v3[23]) {
            return 1;
          }
          uint64_t v12 = v7 - 1;
          do
          {
            int v14 = *v3++;
            int v13 = v14;
            int v16 = *v11++;
            int v15 = v16;
            BOOL v18 = v12-- != 0;
            uint64_t result = v13 == v15;
          }
          while (v13 == v15 && v18);
        }
      }
      return result;
    case 1:
      return vabdd_f64(*a2, *a3) < 2.22044605e-16 || *a2 == *a3;
    case 2:
      return sub_402A00((uint64_t *)a2, (void **)a3);
    case 3:
      uint64_t v19 = *(unsigned __int8 **)a2;
      uint64_t v20 = *(unsigned __int8 **)a3;
      uint64_t result = (*(void *)a2 | *(void *)a3) == 0;
      if (*(void *)a2) {
        BOOL v21 = v20 == 0;
      }
      else {
        BOOL v21 = 1;
      }
      if (v21) {
        return result;
      }
      uint64_t v22 = *(void *)v19;
      uint64_t v23 = *((void *)v19 + 1);
      uint64_t v24 = *(void *)v20;
      if (v23 - *(void *)v19 != *((void *)v20 + 1) - *(void *)v20) {
        return 0;
      }
      if (v22 == v23) {
        return 1;
      }
      while (1)
      {
        uint64_t v25 = *(unsigned int *)(v22 + 8);
        if (v25 != *(_DWORD *)(v24 + 8)) {
          break;
        }
        if (v25 == -1 || (uint64_t result = sub_4027D0(v25, v22, v24), result))
        {
          v22 += 16;
          v24 += 16;
          uint64_t result = 1;
          if (v22 != v23) {
            continue;
          }
        }
        return result;
      }
      return 0;
    default:
      return (a1 - 4) < 3;
  }
}

uint64_t sub_402A00(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = *a2;
  uint64_t result = (*a1 | (unint64_t)*a2) == 0;
  if (v2) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (*(void *)(v2 + 24) == v3[3])
    {
      BOOL v6 = *(uint64_t **)(v2 + 16);
      if (v6)
      {
        while (1)
        {
          uint64_t v7 = (const void **)(v6 + 2);
          uint64_t v8 = sub_58070(v3, (uint64_t)(v6 + 2));
          uint64_t v9 = v8;
          if (!v8) {
            return 0;
          }
          uint64_t v10 = *((unsigned __int8 *)v6 + 39);
          if ((v10 & 0x80u) == 0) {
            uint64_t v11 = *((unsigned __int8 *)v6 + 39);
          }
          else {
            uint64_t v11 = v6[3];
          }
          uint64_t v12 = *((unsigned __int8 *)v8 + 39);
          int v13 = (char)v12;
          if ((v12 & 0x80u) != 0) {
            uint64_t v12 = v8[3];
          }
          if (v11 != v12) {
            return 0;
          }
          if (v13 >= 0) {
            int v14 = (unsigned __int8 *)(v8 + 2);
          }
          else {
            int v14 = (unsigned __int8 *)v8[2];
          }
          if ((v10 & 0x80) != 0)
          {
            if (memcmp(*v7, v14, v6[3])) {
              return 0;
            }
          }
          else if (*((unsigned char *)v6 + 39))
          {
            while (*(unsigned __int8 *)v7 == *v14)
            {
              uint64_t v7 = (const void **)((char *)v7 + 1);
              ++v14;
              if (!--v10) {
                goto LABEL_23;
              }
            }
            return 0;
          }
LABEL_23:
          uint64_t v15 = *((unsigned int *)v6 + 12);
          if (v15 != *((_DWORD *)v9 + 12)) {
            return 0;
          }
          if (v15 == -1 || (uint64_t result = sub_4027D0(v15, v6 + 5, v9 + 5), result))
          {
            BOOL v6 = (uint64_t *)*v6;
            uint64_t result = 1;
            if (v6) {
              continue;
            }
          }
          return result;
        }
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_402B58(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = v4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  BOOL v6 = (unsigned char *)a2[2];
  BOOL v5 = (unsigned char *)a2[3];
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 2) >= 0x1555555555555556) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v7);
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = &v8[4 * (v7 >> 2)];
    *(void *)(a1 + 32) = v9;
    memcpy(v8, v6, v7 - 3);
    *(void *)(a1 + 24) = v9;
  }
  uint64_t v10 = a2[5];
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  *(void *)(a1 + 40) = v10;
  sub_54214(a1 + 56, (uint64_t)(a2 + 7));
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 24);
  sub_54214(a1 + 104, (uint64_t)(a2 + 13));
  *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
  return a1;
}

void sub_402C4C(_Unwind_Exception *a1)
{
  sub_5450C(v3);
  BOOL v5 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_402C7C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 336);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 344);
    uint64_t v4 = *(void **)(a1 + 336);
    if (v3 != v2)
    {
      uint64_t v5 = *(void *)(a1 + 344);
      do
      {
        int64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        BOOL v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *(void **)(a1 + 336);
    }
    *(void *)(a1 + 344) = v2;
    operator delete(v4);
  }
  uint64_t v8 = *(void **)(a1 + 288);
  if (v8)
  {
    *(void *)(a1 + 296) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)(a1 + 264);
  if (v9)
  {
    *(void *)(a1 + 272) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *(void *)(a1 + 240);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 248);
    uint64_t v12 = *(void **)(a1 + 240);
    if (v11 != v10)
    {
      do
      {
        int v13 = *(void **)(v11 - 32);
        if (v13)
        {
          *(void *)(v11 - 24) = v13;
          operator delete(v13);
        }
        v11 -= 104;
      }
      while (v11 != v10);
      uint64_t v12 = *(void **)(a1 + 240);
    }
    *(void *)(a1 + 248) = v10;
    operator delete(v12);
  }
  if (*(char *)(a1 + 215) < 0)
  {
    operator delete(*(void **)(a1 + 192));
    if ((*(char *)(a1 + 191) & 0x80000000) == 0)
    {
LABEL_23:
      if ((*(char *)(a1 + 167) & 0x80000000) == 0) {
        goto LABEL_24;
      }
      goto LABEL_30;
    }
  }
  else if ((*(char *)(a1 + 191) & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(*(void **)(a1 + 168));
  if ((*(char *)(a1 + 167) & 0x80000000) == 0)
  {
LABEL_24:
    if ((*(char *)(a1 + 143) & 0x80000000) == 0) {
      goto LABEL_25;
    }
LABEL_31:
    operator delete(*(void **)(a1 + 120));
    int v14 = *(void **)(a1 + 72);
    if (!v14) {
      return a1;
    }
    goto LABEL_26;
  }
LABEL_30:
  operator delete(*(void **)(a1 + 144));
  if (*(char *)(a1 + 143) < 0) {
    goto LABEL_31;
  }
LABEL_25:
  int v14 = *(void **)(a1 + 72);
  if (v14)
  {
LABEL_26:
    *(void *)(a1 + 80) = v14;
    operator delete(v14);
  }
  return a1;
}

void sub_402DD0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void **)(a2 + 520);
    if (v3)
    {
      uint64_t v4 = *(void *)(a2 + 488);
      if (v4)
      {
        uint64_t v5 = 0;
        do
        {
          uint64_t v6 = *(void *)(a2 + 520) + v5;
          if (*(char *)(v6 + 23) < 0) {
            operator delete(*(void **)v6);
          }
          v5 += 24;
          --v4;
        }
        while (v4);
        uint64_t v3 = *(void **)(a2 + 520);
      }
      free(v3);
    }
    if (*(char *)(a2 + 519) < 0)
    {
      operator delete(*(void **)(a2 + 496));
      if ((*(char *)(a2 + 471) & 0x80000000) == 0) {
        goto LABEL_13;
      }
    }
    else if ((*(char *)(a2 + 471) & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(*(void **)(a2 + 448));
LABEL_13:
    sub_9FDC0(a2);
    operator delete();
  }
}

void sub_402E9C()
{
  unk_2558247 = 16641;
  word_2558230 = 65;
  byte_255825F = 1;
  byte_2558249 = 0;
}

uint64_t sub_402EC4(uint64_t a1, int **a2, int a3, unsigned int a4, int a5, unsigned int *a6, uint64_t a7, double a8, double a9, double a10)
{
  uint64_t v19 = (char *)*a2;
  uint64_t v20 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v21 = *v20;
  if (*((unsigned char *)a2 + 38))
  {
    if (v21 < 0xB
      || (unsigned int v22 = v20[5]) == 0
      || ((v23 = *(_DWORD *)&v19[v22], int v24 = v23 & 2, v25 = v23 & 8, v24) ? (v26 = v25 == 0) : (v26 = 0), !v26))
    {
LABEL_16:
      return sub_40AB18();
    }
  }
  else
  {
    if (v21 < 0xB) {
      goto LABEL_16;
    }
    unsigned int v27 = v20[5];
    if (!v27) {
      goto LABEL_16;
    }
    int v28 = *(_DWORD *)&v19[v27];
    int v29 = v28 & 1;
    int v30 = v28 & 8;
    if (!v29 || v30 != 0) {
      goto LABEL_16;
    }
  }
  sub_29549C(a1, *((unsigned int *)a2 + 8) | ((unint64_t)*((unsigned __int16 *)a2 + 18) << 32), (uint64_t)v63);
  uint64_t v33 = sub_403410((uint64_t)v63, 1);
  sub_9BFD0(a7, v33);
  sub_9BFE8(a7, a8);
  sub_9BFFC(a7, a9);
  sub_9C010(a7, a3);
  sub_9E4D4(a7, a5);
  sub_9E4E8(a7, a4);
  sub_9C03C(a7, 0.0);
  sub_9C044(a7, 0.0);
  if (sub_40A45C((int *)a6)) {
    int v34 = sub_4F44(a6);
  }
  else {
    int v34 = sub_53FA4((uint64_t)a6);
  }
  sub_92070(a7, v34);
  unsigned int v35 = sub_40A45C((int *)a6);
  if (v35) {
    unsigned int v35 = sub_40A4FC(a6);
  }
  sub_9C058(a7, v35);
  uint64_t v36 = (uint64_t)*a2;
  uint8x8_t v37 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v38 = *v37;
  if (*((unsigned char *)a2 + 38))
  {
    if (v38 >= 0x57)
    {
      if (v37[43])
      {
        unint64_t v39 = (int *)(v36 + v37[43] + *(unsigned int *)(v36 + v37[43]));
        unint64_t v40 = (unsigned __int16 *)((char *)v39 - *v39);
        double v41 = 0.0;
        if (*v40 < 7u) {
          goto LABEL_45;
        }
        unsigned int v42 = v40[3];
        if (!v42) {
          goto LABEL_45;
        }
        goto LABEL_44;
      }
      double v41 = 0.0;
      if (v38 < 0x7D) {
        goto LABEL_45;
      }
      unsigned int v42 = v37[62];
      goto LABEL_43;
    }
  }
  else if (v38 >= 0x57)
  {
    if (v37[43])
    {
      unint64_t v39 = (int *)(v36 + v37[43] + *(unsigned int *)(v36 + v37[43]));
      char v43 = (unsigned __int16 *)((char *)v39 - *v39);
      double v41 = 0.0;
      if (*v43 < 5u) {
        goto LABEL_45;
      }
      unsigned int v42 = v43[2];
      if (!v42) {
        goto LABEL_45;
      }
      goto LABEL_44;
    }
    double v41 = 0.0;
    if (v38 < 0x7B)
    {
LABEL_45:
      double v44 = v41 / 65535.0;
      goto LABEL_46;
    }
    unsigned int v42 = v37[61];
LABEL_43:
    unint64_t v39 = *a2;
    if (v42)
    {
LABEL_44:
      LOWORD(v41) = *(_WORD *)((char *)v39 + v42);
      double v41 = (double)*(unint64_t *)&v41 + (double)*(unint64_t *)&v41;
      goto LABEL_45;
    }
    goto LABEL_45;
  }
  double v44 = 0.0;
  if (v38 < 9)
  {
    int v45 = 0;
    double v46 = 0.0 * (double)0;
    if (v46 >= 0.0) {
      goto LABEL_37;
    }
    goto LABEL_50;
  }
LABEL_46:
  if (v37[4])
  {
    int v45 = 1;
    double v46 = v44 * (double)*(unsigned int *)(v36 + v37[4]);
    if (v46 < 0.0) {
      goto LABEL_50;
    }
LABEL_37:
    if (v46 >= 4.50359963e15) {
      goto LABEL_54;
    }
    uint64_t v47 = (uint64_t)(v46 + v46) + 1;
    goto LABEL_53;
  }
  int v45 = 1;
  double v46 = v44 * (double)0;
  if (v46 >= 0.0) {
    goto LABEL_37;
  }
LABEL_50:
  if (v46 <= -4.50359963e15) {
    goto LABEL_54;
  }
  uint64_t v47 = (uint64_t)(v46 + v46);
  if (v47 >= 1) {
    --v47;
  }
LABEL_53:
  double v46 = (double)(v47 >> 1);
LABEL_54:
  double v48 = 0.0;
  if (*((unsigned char *)a2 + 38))
  {
    if (v38 < 0x57) {
      goto LABEL_71;
    }
    if (v37[43])
    {
      uint64_t v49 = (int *)(v36 + v37[43] + *(unsigned int *)(v36 + v37[43]));
      size_t v50 = (unsigned __int16 *)((char *)v49 - *v49);
      if (*v50 < 5u) {
        goto LABEL_71;
      }
      unsigned int v51 = v50[2];
      if (!v51) {
        goto LABEL_71;
      }
LABEL_70:
      LOWORD(v48) = *(_WORD *)((char *)v49 + v51);
      double v48 = (double)*(unint64_t *)&v48 + (double)*(unint64_t *)&v48;
      goto LABEL_71;
    }
    if (v38 < 0x7B) {
      goto LABEL_71;
    }
    unsigned int v51 = v37[61];
LABEL_69:
    uint64_t v49 = *a2;
    if (!v51) {
      goto LABEL_71;
    }
    goto LABEL_70;
  }
  if (v38 < 0x57) {
    goto LABEL_71;
  }
  if (!v37[43])
  {
    if (v38 < 0x7D) {
      goto LABEL_71;
    }
    unsigned int v51 = v37[62];
    goto LABEL_69;
  }
  uint64_t v49 = (int *)(v36 + v37[43] + *(unsigned int *)(v36 + v37[43]));
  unint64_t v52 = (unsigned __int16 *)((char *)v49 - *v49);
  if (*v52 >= 7u)
  {
    unsigned int v51 = v52[3];
    if (v51) {
      goto LABEL_70;
    }
  }
LABEL_71:
  uint64_t v53 = (uint64_t)v46;
  double v54 = 0.0;
  double v55 = v48 / 65535.0;
  if (v45)
  {
    uint64_t v56 = v37[4];
    if (v56)
    {
      LODWORD(v48) = *(_DWORD *)(v36 + v56);
      double v54 = (double)*(unint64_t *)&v48;
    }
  }
  double v57 = v55 * v54;
  if (v57 >= 0.0)
  {
    if (v57 >= 4.50359963e15) {
      goto LABEL_82;
    }
    uint64_t v58 = (uint64_t)(v57 + v57) + 1;
  }
  else
  {
    if (v57 <= -4.50359963e15) {
      goto LABEL_82;
    }
    uint64_t v58 = (uint64_t)(v57 + v57);
    if (v58 >= 1) {
      --v58;
    }
  }
  double v57 = (double)(v58 >> 1);
LABEL_82:
  sub_9C024(a7, v53 - (uint64_t)v57);
  double v59 = (double)(int)sub_9C064(a7) * a10;
  if (v59 >= 0.0)
  {
    if (v59 < 4.50359963e15)
    {
      uint64_t v60 = (uint64_t)(v59 + v59) + 1;
LABEL_89:
      double v59 = (double)(v60 >> 1);
    }
  }
  else if (v59 > -4.50359963e15)
  {
    uint64_t v60 = (uint64_t)(v59 + v59);
    if (v60 >= 1) {
      --v60;
    }
    goto LABEL_89;
  }
  int v62 = (int)v59;
  uint64_t v61 = sub_40AB04(&v62);
  if (__p)
  {
    unint64_t v65 = __p;
    operator delete(__p);
  }
  return v61;
}

void sub_4033E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_403410(uint64_t a1, char a2)
{
  sub_2E51EC(a1, (uint64_t)v23);
  if (*(unsigned char *)(a1 + 32))
  {
    if (*(void *)(a1 + 8) != *(void *)(a1 + 16))
    {
      uint64_t v4 = *(void *)a1;
      long long v21 = 0u;
      long long v22 = 0u;
      char v5 = 1;
      LODWORD(v6) = -1;
      int v7 = -1;
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (*(void *)(a1 + 8) != v8)
    {
      unint64_t v9 = *(void *)(v8 - 8);
      uint64_t v10 = sub_2964C4(*(void *)a1, v9, 1);
      char v5 = 0;
      uint64_t v11 = &v10[*(unsigned __int16 *)&v10[-*(int *)v10 + 4]];
      uint64_t v12 = (uint64_t)&v11[4 * HIDWORD(v9) + *(unsigned int *)v11];
      int v13 = (int *)(v12 + 4 + *(unsigned int *)(v12 + 4));
      int v14 = (unsigned int *)((char *)v13 + *(unsigned __int16 *)((char *)v13 - *v13 + 6));
      int v7 = *(unsigned int *)((char *)v14 + *v14);
      uint64_t v4 = *(void *)a1;
      uint64_t v6 = (*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3;
      long long v21 = 0u;
      long long v22 = 0u;
      goto LABEL_7;
    }
  }
  uint64_t v4 = 0;
  LODWORD(v6) = 0;
  int v7 = 0;
  char v5 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  memset(v20, 0, 7);
LABEL_7:
  v33[0] = v23[0];
  v33[1] = v23[1];
  void v33[2] = v23[2];
  v33[3] = v23[3];
  long long v26 = v21;
  long long v27 = v22;
  uint64_t v25 = v4;
  uint64_t v28 = 0;
  int v29 = v6;
  int v30 = v7;
  char v31 = v5;
  *(_DWORD *)unint64_t v32 = v20[0];
  *(_DWORD *)&v32[3] = *(_DWORD *)((char *)v20 + 3);
  char v35 = a2;
  double v34 = 0.0;
  v24[0] = &v34;
  v24[1] = (double *)&v35;
  sub_40458C((uint64_t)v33, (uint64_t)&v25, v24);
  double v15 = v34 * 100.0;
  if (v34 * 100.0 >= 0.0)
  {
    double v16 = v34 * 100.0;
    if (v15 >= 4.50359963e15) {
      goto LABEL_15;
    }
    uint64_t v17 = (uint64_t)(v15 + v15) + 1;
  }
  else
  {
    double v16 = v34 * 100.0;
    if (v15 <= -4.50359963e15) {
      goto LABEL_15;
    }
    uint64_t v17 = (uint64_t)(v15 + v15);
    if (v17 >= 1) {
      --v17;
    }
  }
  double v16 = (double)(v17 >> 1);
LABEL_15:
  if (v16 >= 9.22337204e18) {
    return 0x7FFFFFFFFFFFFFFELL;
  }
  if (v15 >= 0.0)
  {
    if (v15 < 4.50359963e15)
    {
      uint64_t v18 = (uint64_t)(v15 + v15) + 1;
      return (uint64_t)(double)(v18 >> 1);
    }
  }
  else if (v15 > -4.50359963e15)
  {
    uint64_t v18 = (uint64_t)(v15 + v15);
    if (v18 >= 1) {
      --v18;
    }
    return (uint64_t)(double)(v18 >> 1);
  }
  return (uint64_t)v15;
}

uint64_t sub_403680(uint64_t a1, int **a2, int a3, unsigned int a4, int a5, unsigned int *a6, void *a7, double a8, double a9, double a10, double a11)
{
  long long v22 = (char *)*a2;
  int v23 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v24 = *v23;
  if (*((unsigned char *)a2 + 38))
  {
    if (v24 < 0xB) {
      return sub_40AB18();
    }
    unsigned int v25 = v23[5];
    if (!v25) {
      return sub_40AB18();
    }
    int v26 = *(_DWORD *)&v22[v25];
    int v27 = v26 & 2;
    int v28 = v26 & 8;
    if (!v27 || v28 != 0) {
      return sub_40AB18();
    }
  }
  else
  {
    if (v24 < 0xB) {
      return sub_40AB18();
    }
    unsigned int v30 = v23[5];
    if (!v30) {
      return sub_40AB18();
    }
    int v31 = *(_DWORD *)&v22[v30];
    int v32 = v31 & 1;
    int v33 = v31 & 8;
    if (!v32 || v33 != 0) {
      return sub_40AB18();
    }
  }
  sub_2954EC(a1, (uint64_t)a2[4], (uint64_t)__p);
  sub_2E4B5C((uint64_t)__p, &v79);
  if (__p[1])
  {
    __p[2] = __p[1];
    operator delete(__p[1]);
  }
  if (v80 - v79 > 23)
  {
    sub_31854((uint64_t *)&v79, 1, &v73, a10, a11);
    if (0xAAAAAAAAAAAAAAABLL * ((v74 - (unsigned char *)v73) >> 2) <= 1)
    {
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)__p);
        unint64_t v39 = sub_188FC78(__p, (uint64_t)"Cut geometry points ", 20);
        unint64_t v40 = sub_2DD928(v39, (uint64_t)a2[4]);
        sub_188FC78(v40, (uint64_t)" have <2 points", 15);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v71, 3u);
        if (v72 < 0) {
          operator delete(v71[0]);
        }
        if (v78 < 0) {
          operator delete(v77);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      uint64_t v81 = sub_40AB18();
      uint64_t v82 = v41;
      goto LABEL_114;
    }
    uint64_t v81 = sub_40AB18();
    uint64_t v82 = v42;
    HIBYTE(__p[2]) = 13;
    strcpy((char *)__p, "road_length_m");
    BOOL v43 = sub_9BF18(a7, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    if (v43)
    {
      sub_29549C(a1, *((unsigned int *)a2 + 8) | ((unint64_t)*((unsigned __int16 *)a2 + 18) << 32), (uint64_t)__p);
      uint64_t v44 = sub_403410((uint64_t)__p, 1);
      sub_9BFD0((uint64_t)a7, v44);
      if (__p[1])
      {
        __p[2] = __p[1];
        operator delete(__p[1]);
      }
    }
    HIBYTE(__p[2]) = 14;
    strcpy((char *)__p, "road_speed_mps");
    BOOL v45 = sub_9BF18(a7, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    if (v45) {
      sub_9BFE8((uint64_t)a7, a8);
    }
    __p[0] = operator new(0x19uLL);
    *(_OWORD *)&__p[1] = xmmword_20B9250;
    strcpy((char *)__p[0], "road_freeflow_speed_mps");
    BOOL v46 = sub_9BF18(a7, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    if (v46) {
      sub_9BFFC((uint64_t)a7, a9);
    }
    HIBYTE(__p[2]) = 11;
    strcpy((char *)__p, "road_time_s");
    BOOL v47 = sub_9BF18(a7, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    if (v47) {
      sub_9C010((uint64_t)a7, a3);
    }
    HIBYTE(__p[2]) = 19;
    strcpy((char *)__p, "trip_elapsed_time_s");
    BOOL v48 = sub_9BF18(a7, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    if (v48) {
      sub_9E4D4((uint64_t)a7, a5);
    }
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_20B5EB0;
    strcpy((char *)__p[0], "road_ambient_temperature_c");
    BOOL v49 = sub_9BF18(a7, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    if (v49) {
      sub_9E4E8((uint64_t)a7, a4);
    }
    HIBYTE(__p[2]) = 21;
    strcpy((char *)__p, "road_speed_volatility");
    BOOL v50 = sub_9BF18(a7, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    if (v50) {
      sub_9C03C((uint64_t)a7, 0.0);
    }
    strcpy((char *)__p, "road_acceleration_mps2");
    HIBYTE(__p[2]) = 22;
    BOOL v51 = sub_9BF18(a7, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    if (v51) {
      sub_9C044((uint64_t)a7, 0.0);
    }
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_20B8870;
    strcpy((char *)__p[0], "battery_current_energy_wh");
    BOOL v52 = sub_9BF18(a7, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    if (v52)
    {
      if (sub_40A45C((int *)a6)) {
        int v53 = sub_4F44(a6);
      }
      else {
        int v53 = sub_53FA4((uint64_t)a6);
      }
      sub_92070((uint64_t)a7, v53);
    }
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_20B9800;
    strcpy((char *)__p[0], "battery_current_soc_percentage");
    BOOL v54 = sub_9BF18(a7, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    if (v54)
    {
      unsigned int v55 = sub_40A45C((int *)a6);
      if (v55) {
        unsigned int v55 = sub_40A4FC(a6);
      }
      sub_9C058((uint64_t)a7, v55);
    }
    __p[0] = operator new(0x19uLL);
    *(_OWORD *)&__p[1] = xmmword_20B9250;
    strcpy((char *)__p[0], "road_elevation_change_m");
    BOOL v56 = sub_9BF18(a7, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    if (v56)
    {
      LODWORD(v71[0]) = a5;
      double v57 = v73;
      uint64_t v58 = v74;
      if (v73 != v74 && (char *)v73 + 12 != v74)
      {
        do
        {
          if (v57[5] >= v57[2])
          {
            double v59 = (char *)(v57 - 3);
            while (v59 + 24 != v58)
            {
              int v62 = *((_DWORD *)v59 + 8);
              int v63 = *((_DWORD *)v59 + 5);
              v59 += 12;
              if (v62 < v63) {
                goto LABEL_96;
              }
            }
          }
          else
          {
            double v59 = (char *)(v57 - 3);
            while (v59 + 24 != v58)
            {
              int v60 = *((_DWORD *)v59 + 8);
              int v61 = *((_DWORD *)v59 + 5);
              v59 += 12;
              if (v60 > v61) {
                goto LABEL_96;
              }
            }
          }
          double v59 = v58;
LABEL_96:
          if (v59 == v58) {
            uint64_t v64 = -1;
          }
          else {
            uint64_t v64 = 0;
          }
          uint64_t v65 = (uint64_t)&v59[12 * v64];
          __p[0] = (void *)sub_40418C((uint64_t)&v73, (uint64_t)v57, v65, (int *)v71, (uint64_t)a7, a8);
          __p[1] = v66;
          sub_40AB2C((unsigned int *)&v81, __p);
          uint64_t v58 = v74;
          BOOL v67 = (char *)v65 == v74 || v65 + 12 == (void)v74;
          double v57 = (_DWORD *)v65;
        }
        while (!v67);
      }
      goto LABEL_114;
    }
    double v68 = (a11 - a10) * (double)(int)sub_9C064((uint64_t)a7);
    if (v68 >= 0.0)
    {
      if (v68 < 4.50359963e15)
      {
        uint64_t v69 = (uint64_t)(v68 + v68) + 1;
LABEL_112:
        double v68 = (double)(v69 >> 1);
      }
    }
    else if (v68 > -4.50359963e15)
    {
      uint64_t v69 = (uint64_t)(v68 + v68);
      if (v69 >= 1) {
        --v69;
      }
      goto LABEL_112;
    }
    LODWORD(v71[0]) = (int)v68;
    __p[0] = (void *)sub_40AB04((int *)v71);
    __p[1] = v70;
    sub_40AB2C((unsigned int *)&v81, __p);
LABEL_114:
    if (v73)
    {
      double v74 = (char *)v73;
      operator delete(v73);
    }
    goto LABEL_116;
  }
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)__p);
    uint64_t v36 = sub_188FC78(__p, (uint64_t)"Directed road segment ", 22);
    uint8x8_t v37 = sub_2DD928(v36, (uint64_t)a2[4]);
    sub_188FC78(v37, (uint64_t)" has <2 geometry points", 23);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v73, 3u);
    if (v75 < 0) {
      operator delete(v73);
    }
    if (v78 < 0) {
      operator delete(v77);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  uint64_t v81 = sub_40AB18();
  uint64_t v82 = v38;
LABEL_116:
  if (v79)
  {
    uint64_t v80 = v79;
    operator delete(v79);
  }
  return v81;
}

void sub_404064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,void *a24,int a25,__int16 a26,char a27,char a28)
{
  if (__p) {
    operator delete(__p);
  }
  unsigned int v30 = *(void **)(v28 - 152);
  if (v30)
  {
    *(void *)(v28 - 144) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_40418C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, double a6)
{
  uint64_t v10 = a2;
  uint64_t v11 = *(void *)(a1 + 8);
  BOOL v12 = v11 == a2 || v11 == a3;
  if (v12 && sub_723EC(3u))
  {
    sub_6BAC((uint64_t)v30);
    sub_188FC78(v30, (uint64_t)"iterator should be at a valid coordinate", 40);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (v29 < 0) {
      operator delete(__p);
    }
    if (v31 < 0) {
      operator delete((void *)v30[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  int v13 = *(_DWORD *)(v10 + 8);
  int v14 = *(_DWORD *)(a3 + 8);
  if (v14 == 0x7FFFFFFF || v13 == 0x7FFFFFFF) {
    int v16 = 0;
  }
  else {
    int v16 = v14 - v13;
  }
  sub_9C024(a5, v16);
  double v17 = 0.0;
  if (v10 == a3 || a3 + 12 == v10) {
    goto LABEL_28;
  }
  double v18 = 0.0;
  do
  {
    sub_33150(v10, (unsigned int *)(v10 + 12), v17);
    double v18 = v18 + v17;
    v10 += 12;
  }
  while (v10 != a3);
  double v17 = v18 * 100.0;
  if (v18 * 100.0 >= 0.0)
  {
    if (v17 >= 4.50359963e15)
    {
      char v21 = 0;
      double v20 = v18 * 100.0;
      goto LABEL_29;
    }
LABEL_28:
    char v21 = 0;
    double v20 = (double)(((uint64_t)(v17 + v17) + 1) >> 1);
    goto LABEL_29;
  }
  if (v17 <= -4.50359963e15)
  {
    char v21 = 1;
    double v20 = v18 * 100.0;
  }
  else
  {
    uint64_t v19 = (uint64_t)(v17 + v17);
    if (v19 >= 1) {
      --v19;
    }
    double v20 = (double)(v19 >> 1);
    char v21 = 1;
  }
LABEL_29:
  if (v20 >= 9.22337204e18)
  {
    uint64_t v23 = 0x7FFFFFFFFFFFFFFELL;
    goto LABEL_40;
  }
  if (v21)
  {
    if (v17 > -4.50359963e15)
    {
      uint64_t v22 = (uint64_t)(v17 + v17);
      if (v22 >= 1) {
        --v22;
      }
      goto LABEL_38;
    }
  }
  else if (v17 < 4.50359963e15)
  {
    uint64_t v22 = (uint64_t)(v17 + v17) + 1;
LABEL_38:
    double v17 = (double)(v22 >> 1);
  }
  uint64_t v23 = (uint64_t)v17;
LABEL_40:
  sub_9BFD0(a5, v23);
  double v24 = (double)v23 / 100.0 * 1000.0 / (a6 / 3.6) / 100.0;
  if (v24 >= 0.0)
  {
    if (v24 < 4.50359963e15)
    {
      uint64_t v25 = (uint64_t)(v24 + v24) + 1;
LABEL_47:
      double v24 = (double)(v25 >> 1);
    }
  }
  else if (v24 > -4.50359963e15)
  {
    uint64_t v25 = (uint64_t)(v24 + v24);
    if (v25 >= 1) {
      --v25;
    }
    goto LABEL_47;
  }
  int v26 = (int)v24;
  sub_9C010(a5, (int)v24);
  sub_9E4D4(a5, *a4);
  *a4 += v26;
  LODWORD(v30[0]) = sub_9C064(a5);
  return sub_40AB04((int *)v30);
}

void sub_404540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_40458C(uint64_t result, uint64_t a2, double **a3)
{
  uint64_t v5 = result;
  if (*(_DWORD *)(result + 48) != *(_DWORD *)(a2 + 48) || *(_DWORD *)(result + 52) != *(_DWORD *)(a2 + 52))
  {
    long long v6 = *(_OWORD *)(result + 16);
    v16[0] = *(_OWORD *)result;
    v16[1] = v6;
    long long v7 = *(_OWORD *)(result + 48);
    void v16[2] = *(_OWORD *)(result + 32);
    long long v17 = v7;
    if (*(unsigned char *)(result + 56))
    {
      uint64_t result = sub_2E7608(result);
      if (*(_DWORD *)(v5 + 48) != *(_DWORD *)(a2 + 48)) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t result = sub_2E74E8(result);
      if (*(_DWORD *)(v5 + 48) != *(_DWORD *)(a2 + 48)) {
        goto LABEL_9;
      }
    }
LABEL_8:
    if (*(_DWORD *)(v5 + 52) != *(_DWORD *)(a2 + 52))
    {
      while (1)
      {
LABEL_9:
        unint64_t v14 = sub_2E1BC0((uint64_t)v16);
        int v15 = v8;
        unint64_t v12 = sub_2E1BC0(v5);
        int v13 = v9;
        sub_33150((uint64_t)&v14, (unsigned int *)&v12, v10);
        **a3 = v11 + **a3;
        if (*(unsigned char *)(v5 + 56))
        {
          sub_2E7608(v5);
          if (!BYTE8(v17)) {
            goto LABEL_13;
          }
LABEL_15:
          uint64_t result = sub_2E7608((uint64_t)v16);
          if (*(_DWORD *)(v5 + 48) == *(_DWORD *)(a2 + 48)) {
            goto LABEL_8;
          }
        }
        else
        {
          sub_2E74E8(v5);
          if (BYTE8(v17)) {
            goto LABEL_15;
          }
LABEL_13:
          uint64_t result = sub_2E74E8((uint64_t)v16);
          if (*(_DWORD *)(v5 + 48) == *(_DWORD *)(a2 + 48)) {
            goto LABEL_8;
          }
        }
      }
    }
  }
  return result;
}

void sub_4046E8()
{
  unk_2558277 = 16641;
  word_2558260 = 65;
  byte_255828F = 1;
  byte_2558279 = 0;
}

uint64_t sub_404710(void *a1)
{
  if (sub_EA8440(a1) > 1)
  {
    uint64_t v3 = sub_40EFE8((uint64_t)a1) + 472;
    uint64_t v4 = sub_52058((uint64_t)a1);
    if (v3 == v4)
    {
      return v3;
    }
    else
    {
      uint64_t v5 = v4;
      do
      {
        long long v6 = (_DWORD *)sub_EADA60(v3);
        if (*v6 != 0x7FFFFFFF && v6[9] != 0x7FFFFFFF)
        {
          int v8 = v6;
          if (sub_40A45C(v6 + 2))
          {
            int v9 = v8[28];
            if (v9 != -1)
            {
              if (v9 == 1)
              {
                if (*((void *)v8 + 13) <= 0xFFFFFFFEFFFFFFFFLL && *((void *)v8 + 13)) {
                  return v3;
                }
              }
              else
              {
                if (v9)
                {
                  exception = __cxa_allocate_exception(8uLL);
                  void *exception = &off_23FDF58;
                }
                if (*((void *)v8 + 13) != -1) {
                  return v3;
                }
              }
            }
          }
        }
        v3 += 472;
      }
      while (v3 != v5);
      return v5;
    }
  }
  else
  {
    return sub_52058((uint64_t)a1);
  }
}

uint64_t sub_404874(void *a1)
{
  if ((unint64_t)sub_45FC7C(a1) > 1)
  {
    uint64_t v3 = sub_40EFE8((uint64_t)a1) + 1056;
    uint64_t v4 = sub_52058((uint64_t)a1);
    if (v3 == v4)
    {
      return v3;
    }
    else
    {
      uint64_t v5 = v4;
      do
      {
        long long v6 = (_DWORD *)sub_374DF4(v3);
        if (*v6 != 0x7FFFFFFF && v6[9] != 0x7FFFFFFF)
        {
          int v8 = v6;
          if (sub_40A45C(v6 + 2))
          {
            int v9 = v8[28];
            if (v9 != -1)
            {
              if (v9 == 1)
              {
                if (*((void *)v8 + 13) <= 0xFFFFFFFEFFFFFFFFLL && *((void *)v8 + 13)) {
                  return v3;
                }
              }
              else
              {
                if (v9)
                {
                  exception = __cxa_allocate_exception(8uLL);
                  void *exception = &off_23FDF58;
                }
                if (*((void *)v8 + 13) != -1) {
                  return v3;
                }
              }
            }
          }
        }
        v3 += 1056;
      }
      while (v3 != v5);
      return v5;
    }
  }
  else
  {
    return sub_52058((uint64_t)a1);
  }
}

uint64_t sub_4049D8(void *a1)
{
  if ((unint64_t)sub_45FC7C(a1) > 1)
  {
    sub_45E964((uint64_t)a1);
    uint64_t v3 = v2;
    sub_45E970((uint64_t)a1);
    uint64_t v5 = v4 + 1056;
    if (v4 + 1056 != v3)
    {
      do
      {
        uint64_t v7 = v3 - 1056;
        int v8 = (_DWORD *)sub_374DF4(v3 - 1056);
        if (*v8 != 0x7FFFFFFF && v8[9] != 0x7FFFFFFF)
        {
          double v10 = v8;
          if (sub_40A45C(v8 + 2))
          {
            int v11 = v10[28];
            if (v11 != -1)
            {
              if (v11 == 1)
              {
                if (*((void *)v10 + 13) <= 0xFFFFFFFEFFFFFFFFLL && *((void *)v10 + 13) != 0) {
                  goto LABEL_21;
                }
              }
              else
              {
                if (v11)
                {
                  exception = __cxa_allocate_exception(8uLL);
                  void *exception = &off_23FDF58;
                }
                if (*((void *)v10 + 13) != -1) {
                  goto LABEL_21;
                }
              }
            }
          }
        }
        v3 -= 1056;
      }
      while (v7 != v5);
    }
    uint64_t v3 = v5;
LABEL_21:
    sub_45E970((uint64_t)a1);
    if (v3 != v12 + 1056) {
      return v3 - 1056;
    }
  }

  return sub_52058((uint64_t)a1);
}

uint64_t sub_404B48(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(_DWORD *)(sub_374DF4(a1) + 112) == -1) {
    return 0;
  }
  long long v6 = (uint64_t *)sub_376F8C(a3);
  uint64_t v7 = sub_374DF4(a1);
  unint64_t v8 = *(unsigned int *)(v7 + 112);
  int v12 = v8;
  if (v8 <= 1)
  {
    unint64_t v8 = *(void *)(v7 + 104);
    unint64_t v11 = v8;
  }
  unint64_t v9 = sub_28F27C(v6, (uint64_t *)&v11, v8);
  return sub_3FA0B8((void *)(a2 + 160), v9) ^ 1;
}

uint64_t sub_404C28(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(_DWORD *)(sub_374DF4(a1) + 112) == -1) {
    return 0;
  }
  long long v6 = (uint64_t *)sub_376F8C(a3);
  uint64_t v7 = sub_374DF4(a1);
  unint64_t v8 = *(unsigned int *)(v7 + 112);
  int v12 = v8;
  if (v8 <= 1)
  {
    unint64_t v8 = *(void *)(v7 + 104);
    unint64_t v11 = v8;
  }
  unint64_t v9 = sub_28F27C(v6, (uint64_t *)&v11, v8);
  return sub_3FA0B8((void *)(a2 + 160), v9) ^ 1;
}

uint64_t sub_404D08(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(_DWORD *)(sub_374DF4(a1) + 112) == -1) {
    return 0;
  }
  long long v6 = (uint64_t *)sub_376F8C(a3);
  uint64_t v7 = sub_374DF4(a1);
  unint64_t v8 = *(unsigned int *)(v7 + 112);
  int v12 = v8;
  if (v8 <= 1)
  {
    unint64_t v8 = *(void *)(v7 + 104);
    unint64_t v11 = v8;
  }
  unint64_t v9 = sub_28F27C(v6, (uint64_t *)&v11, v8);
  return sub_3FA0B8((void *)(a2 + 160), v9) ^ 1;
}

uint64_t sub_404DE8(void *a1)
{
  if ((unint64_t)sub_45FC7C(a1) >= 2)
  {
    uint64_t v4 = sub_40EFE8((uint64_t)a1) + 1056;
    uint64_t v5 = sub_52058((uint64_t)a1);
    if (v4 == v5) {
      return 0;
    }
    uint64_t v6 = v5;
    uint64_t v2 = 0;
    while (1)
    {
      uint64_t v7 = (_DWORD *)sub_374DF4(v4);
      if (*v7 == 0x7FFFFFFF || v7[9] == 0x7FFFFFFF) {
        goto LABEL_7;
      }
      unint64_t v9 = v7;
      if (!sub_40A45C(v7 + 2)) {
        goto LABEL_7;
      }
      int v10 = v9[28];
      if (v10 == -1) {
        goto LABEL_7;
      }
      if (v10 == 1)
      {
        unint64_t v11 = *((void *)v9 + 13);
        if (v11) {
          BOOL v12 = v11 >= 0xFFFFFFFF00000000;
        }
        else {
          BOOL v12 = 1;
        }
        if (v12) {
          goto LABEL_7;
        }
      }
      else
      {
        if (v10)
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_23FDF58;
        }
        if (*((void *)v9 + 13) == -1) {
          goto LABEL_7;
        }
      }
      ++v2;
LABEL_7:
      v4 += 1056;
      if (v4 == v6) {
        return v2;
      }
    }
  }
  return 0;
}

uint64_t sub_404F30(void *a1)
{
  if (sub_646938(a1) >= 2)
  {
    uint64_t v2 = sub_40EFE8((uint64_t)a1) + 12328;
    uint64_t v3 = sub_52058((uint64_t)a1);
    if (v2 != v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = 0;
      while (1)
      {
        uint64_t v6 = (_DWORD *)sub_374DF4(v2);
        if (*v6 == 0x7FFFFFFF || v6[9] == 0x7FFFFFFF) {
          goto LABEL_5;
        }
        unint64_t v8 = v6;
        if (!sub_40A45C(v6 + 2)) {
          goto LABEL_5;
        }
        int v9 = v8[28];
        if (v9 == -1) {
          goto LABEL_5;
        }
        if (v9 == 1)
        {
          unint64_t v10 = *((void *)v8 + 13);
          if (v10) {
            BOOL v11 = v10 >= 0xFFFFFFFF00000000;
          }
          else {
            BOOL v11 = 1;
          }
          if (v11) {
            goto LABEL_5;
          }
        }
        else
        {
          if (v9)
          {
            exception = __cxa_allocate_exception(8uLL);
            void *exception = &off_23FDF58;
          }
          if (*((void *)v8 + 13) == -1) {
            goto LABEL_5;
          }
        }
        ++v5;
LABEL_5:
        v2 += 12328;
        if (v2 == v4) {
          return v5;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_40506C@<X0>(__n128 *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_45E958(a1, &v7);
  uint64_t v6 = a2;
  return sub_40602C(v7.n128_i64[0], v7.n128_i64[1], (uint64_t)a3, &v6);
}

void sub_4050C0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4050DC@<X0>(__n128 *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_45E958(a1, &v7);
  uint64_t v6 = a2;
  return sub_4061D0(v7.n128_i64[0], v7.n128_i64[1], (uint64_t)a3, &v6);
}

void sub_405130(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_40514C(int a1, int a2, int a3, int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(a6 + 296);
  double v12 = *(double *)(a5 + 16) * (double)a4[1];
  if (v12 >= 0.0)
  {
    if (v12 >= 4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v13 = (uint64_t)(v12 + v12) + 1;
  }
  else
  {
    if (v12 <= -4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v13 = (uint64_t)(v12 + v12);
    if (v13 >= 1) {
      --v13;
    }
  }
  double v12 = (double)(v13 >> 1);
LABEL_9:
  sub_920F4(*(void *)(a6 + 296), (int)v12);
  sub_920A8(v11, a4[2]);
  sub_920C4(v11, *(unsigned __int8 *)a4, a4[3]);
  sub_9E4D4(v11, *(_DWORD *)a5);
  sub_92110(v11, *(_DWORD *)(a5 + 4));
  sub_9E4E8(v11, *(_DWORD *)(a5 + 8));
  sub_92054(v11, a1);
  sub_92070(v11, a2);
  sub_9208C(v11, a3);

  return sub_986E8(v11);
}

uint64_t sub_405278(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5, int a6, unsigned int *a7, void *a8)
{
  uint64_t v11 = a2;
  sub_1080B04(a1, a3, a4, a5, a6, a7, a8, v10);
  if (!sub_3FAFBC((uint64_t)v10)) {
    return 0x7FFFFFFF7FFFFFFFLL;
  }
  unint64_t v8 = (unsigned int *)sub_37D0C0((uint64_t)v10);
  return sub_40A6A0(v8, &v11);
}

_DWORD *sub_4052F0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = sub_46C760(a1);
  uint64_t v5 = (uint64_t)(a1 + 56);
  uint64_t result = (_DWORD *)sub_47513C(v5);
  if (result)
  {
    sub_474F54(v5, 0, v13);
    sub_474FC0(v5, 0, v12);
    uint64_t result = (_DWORD *)sub_47541C((uint64_t)v13, (uint64_t)v12);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    if ((result & 1) == 0)
    {
      if (v4)
      {
        if (v4 >> 62) {
          sub_2E00();
        }
        __n128 v7 = (char *)operator new(4 * v4);
        *(void *)a2 = v7;
        *(void *)(a2 + 8) = v7;
        *(void *)(a2 + 16) = &v7[4 * v4];
      }
      sub_47537C((uint64_t)v13, 1, (uint64_t)v11);
      v10[0] = v12[0];
      v10[1] = v12[1];
      int v15 = (void **)a2;
      while (sub_475430((uint64_t)v11, (uint64_t)v10))
      {
        unint64_t v8 = (unsigned int *)nullsub_1(v11);
        int v14 = sub_4F44(v8);
        sub_3B7B3C(&v15, &v14);
        sub_475300((uint64_t)v11);
      }
      int v9 = (unsigned int *)nullsub_1(v12);
      LODWORD(v15) = sub_4F44(v9);
      return sub_3B79D0((void **)a2, &v15);
    }
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  return result;
}

void sub_405438(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_40545C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 448;
  uint64_t v15 = sub_475024(a1 + 448);
  int v16 = v6;
  if (sub_40A4AC((int *)&v15)) {
    return (_DWORD *)sub_3FB24C(a2, a3);
  }
  uint64_t v15 = sub_474FB0(v5);
  int v16 = v8;
  uint64_t v9 = sub_475100(v5);
  int v10 = *(_DWORD *)(v9 + 8);
  uint64_t v13 = *(void *)v9;
  int v14 = v10;
  int v11 = sub_40AA28((int *)&v13, (unsigned int *)&v15);
  int v12 = sub_53FA4((uint64_t)&v15);
  return sub_3FB0A4(a3, v12 + v11, a2);
}

uint64_t sub_405520@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  if (a1 == a2) {
    goto LABEL_14;
  }
  uint64_t v7 = (uint64_t)a1;
  int v8 = a1;
  do
  {
    BOOL v9 = sub_46DFC8(v8);
    if (!v9) {
      break;
    }
    v8 += 132;
  }
  while (v8 != a2);
  if (v9 && sub_475124((int *)(v7 + 448)))
  {
    uint64_t v14 = sub_474FB0(v7 + 448);
    int v15 = v10;
    sub_3FB118((uint64_t)&v16, &v14, a3);
    while (1)
    {
      sub_40545C(v7, a3, (uint64_t)&v14);
      if (!sub_40A45C((int *)&v14)) {
        break;
      }
      uint64_t result = sub_40A52C(&v14, &v16);
      if (result) {
        int v12 = &v14;
      }
      else {
        int v12 = (uint64_t *)&v16;
      }
      uint64_t v13 = v12[2];
      long long v16 = *(_OWORD *)v12;
      uint64_t v17 = v13;
      v7 += 1056;
      if ((void *)v7 == a2)
      {
        *(_OWORD *)a4 = v16;
        *(void *)(a4 + 16) = v17;
        return result;
      }
    }
    return sub_3FB24C(a3, a4);
  }
  else
  {
LABEL_14:
    return sub_3FB24C(a3, a4);
  }
}

uint64_t sub_405674@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = (void *)sub_40EFE8(a1);
  uint64_t v7 = (void *)sub_52058(a1);

  return sub_405520(v6, v7, a2, a3);
}

double sub_4056D4(uint64_t a1)
{
  if (!sub_45FB48(a1)) {
    return 0.0;
  }
  uint64_t v2 = (uint64_t *)nullsub_1(a1);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  double v5 = 1.79769313e308;
  while (v3 != v4)
  {
    uint64_t v17 = sub_475024(v3 + 448);
    int v18 = v6;
    if (sub_40A4AC((int *)&v17)) {
      return 0.0;
    }
    uint64_t v17 = sub_474FB0(v3 + 448);
    int v18 = v7;
    uint64_t v8 = sub_475100(v3 + 448);
    int v9 = *(_DWORD *)(v8 + 8);
    uint64_t v15 = *(void *)v8;
    int v16 = v9;
    int v10 = sub_40AA28((int *)&v15, (unsigned int *)&v17);
    int v11 = v15;
    int v12 = sub_53FA4((uint64_t)&v17);
    int v13 = v11 - v12;
    if (v11 != v12 && (double)v10 / (double)v13 < v5) {
      double v5 = (double)v10 / (double)v13;
    }
    v3 += 1056;
  }
  return v5;
}

uint64_t sub_4057C4(void *a1, int a2, int a3, uint64_t a4, void *a5, void *a6)
{
  int v66 = a3;
  uint64_t v10 = nullsub_1(a5);
  int v11 = *(_DWORD *)(v10 + 8);
  uint64_t v64 = *(void *)v10;
  int v65 = v11;
  uint64_t v63 = sub_40A454((uint64_t)&v64);
  sub_EE8244(v62, a6);
  sub_EA7908(v41, a1);
  sub_EEA50C((uint64_t)v62, (uint64_t)v41, &v66, 0, (uint64_t)&v60);
  if (v42 < 0) {
    operator delete(v41[3]);
  }
  int v12 = v41[0];
  if (v41[0])
  {
    int v13 = v41[1];
    uint64_t v14 = v41[0];
    if (v41[1] != v41[0])
    {
      do
        int v13 = (void *)sub_405F44((uint64_t)v13 - 472);
      while (v13 != v12);
      uint64_t v14 = v41[0];
    }
    v41[1] = v12;
    operator delete(v14);
  }
  HIBYTE(v41[2]) = 9;
  strcpy((char *)v41, "EVRouting");
  BOOL v52 = 0;
  int v53 = 0;
  uint64_t v54 = 0;
  uint64_t v15 = sub_374CDC((uint64_t)a6, (uint64_t)v41, (uint64_t *)&v52);
  sub_54214((uint64_t)v58, (uint64_t)v15);
  int v16 = (void **)v52;
  if (v52)
  {
    uint64_t v17 = v53;
    int v18 = v52;
    if (v53 != v52)
    {
      do
      {
        if (*((char *)v17 - 1) < 0) {
          operator delete(*(v17 - 3));
        }
        v17 -= 3;
      }
      while (v17 != v16);
      int v18 = v52;
    }
    int v53 = v16;
    operator delete(v18);
  }
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B8890;
  strcpy((char *)v41[0], "EnergyConsumptionETAEvaluator");
  BOOL v52 = 0;
  int v53 = 0;
  uint64_t v54 = 0;
  uint64_t v19 = sub_374CDC((uint64_t)a6, (uint64_t)v41, (uint64_t *)&v52);
  sub_54214((uint64_t)v56, (uint64_t)v19);
  double v20 = (void **)v52;
  if (v52)
  {
    char v21 = v53;
    uint64_t v22 = v52;
    if (v53 != v52)
    {
      do
      {
        if (*((char *)v21 - 1) < 0) {
          operator delete(*(v21 - 3));
        }
        v21 -= 3;
      }
      while (v21 != v20);
      uint64_t v22 = v52;
    }
    int v53 = v20;
    operator delete(v22);
  }
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  sub_EEFAA0(v55, v58, v56, a5);
  sub_EEFAA4((uint64_t)&v52, a6, a5, v55);
  v41[0] = (void *)sub_40A454((uint64_t)&v64);
  unint64_t v50 = sub_40A300((unsigned int *)v41);
  int v51 = v23;
  sub_EF08B4((uint64_t *)&v52, a1, (int *)v60, (uint64_t)&v50, 0, (uint64_t)v47);
  uint64_t v24 = sub_475100((uint64_t)v47);
  uint64_t v25 = *(void *)v24;
  int v46 = *(_DWORD *)(v24 + 8);
  uint64_t v45 = v25;
  if (sub_40A820(&v45))
  {
    int v26 = sub_40A9DC((int *)&v45, a2);
    if (v26 == 0x7FFFFFFF)
    {
      if (SHIDWORD(v45) >= a2) {
        int v26 = v45;
      }
      else {
        int v26 = sub_40A9DC((int *)&v45, SHIDWORD(v45));
      }
    }
    int v27 = HIDWORD(v63);
    if (SHIDWORD(v63) >= v26) {
      int v27 = v26;
    }
    if ((int)v63 <= v27) {
      int v28 = v27;
    }
    else {
      int v28 = v63;
    }
    sub_40A2E4((uint64_t)&v67, v28, &v63);
  }
  else
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)v41);
      sub_188FC78(v41, (uint64_t)"User route has invalid energy consumption (or energy consumption that exceeds the battery capacity) on its first leg in EV request.", 131);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v39, 1u);
      if (v40 < 0) {
        operator delete(v39);
      }
      if (v44 < 0) {
        operator delete(v43);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    uint64_t v67 = v64;
    int v68 = v65;
  }
  if (v48)
  {
    BOOL v49 = v48;
    operator delete(v48);
  }
  char v29 = v57;
  if (v57)
  {
    do
    {
      uint8x8_t v37 = (void **)*v29;
      sub_55198((uint64_t)(v29 + 5));
      if (*((char *)v29 + 39) < 0) {
        operator delete(v29[2]);
      }
      operator delete(v29);
      char v29 = v37;
    }
    while (v37);
  }
  unsigned int v30 = v56[0];
  v56[0] = 0;
  if (v30) {
    operator delete(v30);
  }
  char v31 = v59;
  if (v59)
  {
    do
    {
      uint64_t v38 = (void **)*v31;
      sub_55198((uint64_t)(v31 + 5));
      if (*((char *)v31 + 39) < 0) {
        operator delete(v31[2]);
      }
      operator delete(v31);
      char v31 = v38;
    }
    while (v38);
  }
  int v32 = v58[0];
  v58[0] = 0;
  if (v32) {
    operator delete(v32);
  }
  int v33 = v60;
  if (v60)
  {
    double v34 = v61;
    char v35 = v60;
    if (v61 != v60)
    {
      do
        double v34 = sub_3B0290(v34 - 36);
      while (v34 != v33);
      char v35 = v60;
    }
    int v61 = v33;
    operator delete(v35);
  }
  sub_3C7848(v62);
  return v67;
}

void sub_405D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  sub_5450C((uint64_t)&STACK[0x238]);
  sub_5450C((uint64_t)&STACK[0x260]);
  sub_3C7768((void **)&STACK[0x288]);
  sub_3C7848(&STACK[0x2A0]);
  _Unwind_Resume(a1);
}

uint64_t sub_405E28(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    uint64_t v2 = *(void **)a1;
    if (!*(void *)a1) {
      return a1;
    }
  }
  else
  {
    uint64_t v2 = *(void **)a1;
    if (!*(void *)a1) {
      return a1;
    }
  }
  uint64_t v4 = *(void *)(a1 + 8);
  double v5 = v2;
  if ((void *)v4 != v2)
  {
    do
      uint64_t v4 = sub_405F44(v4 - 472);
    while ((void *)v4 != v2);
    double v5 = *(void **)a1;
  }
  *(void *)(a1 + 8) = v2;
  operator delete(v5);
  return a1;
}

BOOL sub_405EAC(void *a1, void *a2)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = (void *)a1[1];
  uint64_t v4 = (uint64_t)v3 - *a1;
  double v5 = (void *)*a2;
  int v6 = (void *)a2[1];
  uint64_t v7 = (uint64_t)v6 - *a2;
  if (v4 == v7)
  {
    if (v2 == v3) {
      return 0;
    }
    uint64_t v8 = (void *)*a2;
    int v9 = (void *)*a1;
    while (*v9 == *v8)
    {
      ++v9;
      ++v8;
      if (v9 == v3) {
        return 0;
      }
    }
  }
  unint64_t v11 = v4 >> 3;
  BOOL v13 = v3 == v2;
  unint64_t v12 = 0;
  BOOL v13 = v13 || v6 == v5;
  if (!v13)
  {
    unint64_t v14 = 0;
    unint64_t v15 = v7 >> 3;
    do
    {
      if (v2[v12] == v5[v14]) {
        ++v12;
      }
      ++v14;
    }
    while (v12 < v11 && v14 < v15);
  }
  return v12 == v11;
}

uint64_t sub_405F44(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 248);
  if (v2)
  {
    *(void *)(a1 + 256) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 224);
  if (v3)
  {
    *(void *)(a1 + 232) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 160);
  if (v4)
  {
    *(void *)(a1 + 168) = v4;
    operator delete(v4);
  }
  double v5 = *(void **)(a1 + 136);
  if (v5)
  {
    *(void *)(a1 + 144) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void *)(a1 + 112);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 120);
    uint64_t v8 = *(void **)(a1 + 112);
    if (v7 != v6)
    {
      do
      {
        int v9 = *(void **)(v7 - 24);
        if (v9)
        {
          *(void *)(v7 - 16) = v9;
          operator delete(v9);
        }
        v7 -= 56;
      }
      while (v7 != v6);
      uint64_t v8 = *(void **)(a1 + 112);
    }
    *(void *)(a1 + 120) = v6;
    operator delete(v8);
  }
  uint64_t v10 = *(void **)(a1 + 24);
  if (v10)
  {
    *(void *)(a1 + 32) = v10;
    operator delete(v10);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_40602C(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v15 = a3;
  if (a1 != a2)
  {
    uint64_t v6 = a1;
    while (1)
    {
      uint64_t v7 = (_DWORD *)sub_374DF4(v6);
      uint64_t v8 = v7;
      if (*v7 != 0x7FFFFFFF && v7[9] != 0x7FFFFFFF && sub_40A45C(v7 + 2))
      {
        int v10 = v8[28];
        if (v10 != -1)
        {
          if (v10 != 1)
          {
            if (v10)
            {
              exception = __cxa_allocate_exception(8uLL);
              void *exception = &off_23FDF58;
            }
            if (*((void *)v8 + 13) == -1) {
              goto LABEL_3;
            }
LABEL_16:
            if (*(_DWORD *)(v6 + 128) == -1)
            {
              uint64_t v11 = sub_376F8C(*a4);
              uint64_t v12 = sub_374DF4(v6);
              unsigned int v17 = *(_DWORD *)(v12 + 112);
              if (v17 <= 1) {
                uint64_t v16 = *(void *)(v12 + 104);
              }
              uint64_t v16 = sub_28CF4C(v11, &v16);
              sub_32B48C(&v15, &v16);
            }
            goto LABEL_3;
          }
          if (*((void *)v8 + 13) <= 0xFFFFFFFEFFFFFFFFLL && *((void *)v8 + 13)) {
            goto LABEL_16;
          }
        }
      }
LABEL_3:
      v6 += 1056;
      if (v6 == a2) {
        return v15;
      }
    }
  }
  return a3;
}

uint64_t sub_4061D0(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v15 = a3;
  if (a1 != a2)
  {
    uint64_t v6 = a1;
    while (1)
    {
      uint64_t v7 = (_DWORD *)sub_374DF4(v6);
      uint64_t v8 = v7;
      if (*v7 != 0x7FFFFFFF && v7[9] != 0x7FFFFFFF && sub_40A45C(v7 + 2))
      {
        int v10 = v8[28];
        if (v10 != -1)
        {
          if (v10 != 1)
          {
            if (v10)
            {
              exception = __cxa_allocate_exception(8uLL);
              void *exception = &off_23FDF58;
            }
            if (*((void *)v8 + 13) == -1) {
              goto LABEL_3;
            }
LABEL_16:
            if (*(_DWORD *)(v6 + 128) == -1)
            {
              uint64_t v11 = sub_376F8C(*a4);
              uint64_t v12 = sub_374DF4(v6);
              unsigned int v17 = *(_DWORD *)(v12 + 112);
              if (v17 <= 1) {
                uint64_t v16 = *(void *)(v12 + 104);
              }
              uint64_t v16 = sub_28CF4C(v11, &v16);
              sub_32B48C(&v15, &v16);
            }
            goto LABEL_3;
          }
          if (*((void *)v8 + 13) <= 0xFFFFFFFEFFFFFFFFLL && *((void *)v8 + 13)) {
            goto LABEL_16;
          }
        }
      }
LABEL_3:
      v6 += 12328;
      if (v6 == a2) {
        return v15;
      }
    }
  }
  return a3;
}

double sub_406380()
{
  byte_25582A7 = 1;
  word_2558290 = 65;
  byte_25582BF = 1;
  word_25582A8 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_2558368 = 0u;
  xmmword_2558378 = 0u;
  dword_2558388 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2558368, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_2558368, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_2558368, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_2558368, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25582D7 = 8;
  strcpy((char *)&qword_25582C0, "any_mode");
  byte_25582EF = 7;
  strcpy((char *)&dword_25582D8, "cycling");
  byte_2558307 = 7;
  strcpy((char *)&dword_25582F0, "driving");
  byte_255831F = 7;
  strcpy((char *)&dword_2558308, "walking");
  qword_2558328 = 0;
  qword_2558330 = 0;
  qword_2558320 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_2558320 = (uint64_t)v0;
  qword_2558328 = (uint64_t)(v0 + 9);
  qword_2558330 = (uint64_t)(v0 + 9);
  qword_2558338 = 0;
  qword_2558340 = 0;
  unk_2558348 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_2558340 = (uint64_t)(v1 + 9);
  unk_2558348 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_2558338 = (uint64_t)v1;
  byte_2558367 = 3;
  dword_2558350 = 7105633;
  return result;
}

void sub_406660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if ((void)xmmword_2558378) {
    sub_20A832C((void **)xmmword_2558378);
  }
  uint8x8_t v37 = (void *)xmmword_2558368;
  *(void *)&xmmword_2558368 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_406700(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = sub_376F8C(a4);
  char v18 = 9;
  uint64_t v16 = 0;
  strcpy((char *)v17, "EVRouting");
  int v14 = 0;
  uint64_t v15 = 0;
  char v7 = sub_374CDC((uint64_t)a4, (uint64_t)v17, (uint64_t *)&v14);
  long long __p = operator new(0x28uLL);
  long long v13 = xmmword_20B8FD0;
  strcpy((char *)__p, "charging_station_poi_quad_node_level");
  *(_DWORD *)(a1 + 16) = sub_31AC04(v7, (uint64_t)&__p);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p);
  }
  int v8 = (void **)v14;
  if (v14)
  {
    int v9 = v15;
    char v10 = v14;
    if (v15 != v14)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      char v10 = v14;
    }
    uint64_t v15 = v8;
    operator delete(v10);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  *(unsigned char *)(a1 + 20) = a3;
  return a1;
}

void sub_406838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_1A668(&a16);
    if ((a24 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_1A668(&a16);
    if ((a24 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(a19);
  _Unwind_Resume(a1);
}

uint64_t sub_4068B4(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  return sub_406700(a1, a2, a3, a4);
}

void sub_4068BC(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, int64x2_t *a5@<X8>, double a6@<D0>)
{
  uint64_t v28 = a3;
  sub_365DC(a2, &v28, (uint64_t)v27, a6);
  int v10 = *(_DWORD *)(a1 + 16);
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  long long __p = 0;
  sub_2F9430(v27, v10, (int **)&__p);
  sub_29722C((int **)&__p);
  int v11 = (unsigned int *)__p;
  uint64_t v12 = v25;
  long long v13 = (char **)sub_37D0C0(*(void *)a1);
  int v14 = *(unsigned __int8 *)(a1 + 20);
  int v15 = sub_89DD4(v13);
  sub_87F08((uint64_t)v23, (uint64_t *)a2, v28, a4);
  int v18 = v15;
  uint64_t v16 = 1 << v14;
  if (v14 == 255) {
    uint64_t v16 = 0;
  }
  __int16 v19 = 512;
  uint64_t v20 = v16;
  long long v21 = v23[0];
  long long v22 = v23[1];
  unsigned int v17 = *(uint64_t **)(a1 + 8);
  a5->i64[1] = 0;
  a5[1].i64[0] = 0;
  for (a5->i64[0] = 0; v11 != v12; ++v11)
    sub_406A14(v17, *v11, (uint64_t)&v18, a5);
  if (__p)
  {
    uint64_t v25 = (unsigned int *)__p;
    operator delete(__p);
  }
}

void sub_4069DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_406A14(uint64_t *a1, unsigned int a2, uint64_t a3, int64x2_t *a4)
{
  uint64_t v7 = a2;
  int v8 = (unsigned int *)sub_2AB884(*a1, 16, a2, 1);
  if (v9)
  {
    int v10 = (int *)((char *)v8 + *v8);
    int v11 = (unsigned __int16 *)((char *)v10 - *v10);
    if (*v11 >= 5u)
    {
      uint64_t v12 = v11[2];
      if (v12)
      {
        long long v13 = (unsigned int *)((char *)v10 + v12);
        uint64_t v14 = *v13;
        uint64_t v16 = (unsigned int *)((char *)v13 + v14 + 4);
        uint64_t v15 = *(unsigned int *)((char *)v13 + v14);
        if (v15)
        {
          uint64_t v17 = 0;
          int v18 = &v16[v15];
          do
          {
            __int16 v19 = (char *)v16 + *v16;
            if (sub_28E11C((int *)v19))
            {
              char v35 = v19;
              uint64_t v36 = (void (__cdecl **)(std::stringbuf *__hidden))(v7 | (v17 << 32));
              if (!sub_28D6E4(a3, (char **)&v35) && !sub_87F24((unsigned int *)(a3 + 16), &v35))
              {
                sub_28D220((uint64_t)a1, (int *)v19, v7 | (v17 << 32), (uint64_t)&v35);
                if (v39 && v40 != -1)
                {
                  unint64_t v20 = a4->u64[1];
                  if (v20 >= a4[1].i64[0])
                  {
                    uint64_t v21 = sub_28FB30(a4, (uint64_t)&v35);
                  }
                  else
                  {
                    sub_28FA7C((uint64_t)a4, (uint64_t)&v35);
                    uint64_t v21 = v20 + 80;
                  }
                  a4->i64[1] = v21;
                }
                uint64_t v24 = (void **)v37;
                if (v37)
                {
                  uint64_t v25 = v38;
                  uint64_t v26 = v37;
                  if (v38 != v37)
                  {
                    do
                    {
                      if (*((char *)v25 - 1) < 0) {
                        operator delete(*(v25 - 3));
                      }
                      v25 -= 6;
                    }
                    while (v25 != v24);
                    uint64_t v26 = v37;
                  }
                  uint64_t v38 = v24;
                  operator delete(v26);
                }
                int v27 = (void (__cdecl **)(std::stringbuf *__hidden))v35;
                if (v35)
                {
                  uint64_t v28 = v36;
                  char v29 = v35;
                  if (v36 != v35)
                  {
                    do
                    {
                      unsigned int v30 = *(v28 - 3);
                      if (v30)
                      {
                        *(v28 - 2) = v30;
                        operator delete(v30);
                      }
                      v28 -= 6;
                    }
                    while (v28 != v27);
                    char v29 = v35;
                  }
                  uint64_t v36 = v27;
                  operator delete(v29);
                }
              }
            }
            else if (sub_723EC(3u))
            {
              sub_6BAC((uint64_t)&v35);
              long long v22 = sub_188FC78(&v35, (uint64_t)"Found invalid charging station POI in quad node ", 48);
              int v23 = sub_51960(v22, v7);
              sub_188FC78(v23, (uint64_t)".", 1);
              std::stringbuf::str();
              sub_7246C((uint64_t *)&__p, 3u);
              if (v34 < 0) {
                operator delete(__p);
              }
              char v35 = v32;
              *(void **)((char *)&v35 + *((void *)v32 - 3)) = v31;
              if (v42 < 0) {
                operator delete(v41);
              }
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              std::ios::~ios();
            }
            ++v17;
            ++v16;
          }
          while (v16 != v18);
        }
      }
    }
  }
}

void sub_406D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_28F1C0((void **)va);
  _Unwind_Resume(a1);
}

void sub_406D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a20);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_406DCC()
{
  unk_25583A7 = 16641;
  word_2558390 = 65;
  byte_25583BF = 1;
  byte_25583A9 = 0;
}

uint64_t **sub_406DF4(uint64_t **a1, void *a2)
{
  uint64_t v11 = 0;
  uint64_t v12 = operator new(0x19uLL);
  long long v13 = xmmword_20B9250;
  strcpy((char *)v12, "RegionEVConnectorFilter");
  long long __p = 0;
  int v10 = 0;
  char v4 = sub_374CDC((uint64_t)a2, (uint64_t)&v12, (uint64_t *)&__p);
  int v5 = (void **)__p;
  if (__p)
  {
    uint64_t v6 = v10;
    uint64_t v7 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      uint64_t v7 = __p;
    }
    int v10 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12);
  }
  *a1 = v4;
  a1[1] = (uint64_t *)sub_3750CC(a2);
  return a1;
}

void sub_406EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_406F10(uint64_t a1@<X0>, uint64_t **a2@<X1>, unsigned int **a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  if (*a3 != v7)
  {
    unsigned int v9 = -1;
    while (1)
    {
      uint64_t v10 = *(void *)(a1 + 8);
      sub_4071CC(v10, v6, 1u, 1000000, (uint64_t)sub_29C8, (char **)&__p);
      uint64_t v11 = __p;
      if (__p == v18) {
        break;
      }
      sub_3D63DC(v10, *((void *)__p + 1), v15);
      uint64_t v11 = __p;
      if (__p) {
        goto LABEL_6;
      }
LABEL_7:
      int v12 = sub_407090((void **)a1, (uint64_t)v15);
      if (SHIBYTE(v16) < 0) {
        operator delete(v15[0]);
      }
      v9 &= v12;
      v6 += 94;
      if (v6 == v7) {
        goto LABEL_12;
      }
    }
    v15[0] = 0;
    v15[1] = 0;
    uint64_t v16 = 0;
    if (!__p) {
      goto LABEL_7;
    }
LABEL_6:
    int v18 = v11;
    operator delete(v11);
    goto LABEL_7;
  }
  unsigned int v9 = -1;
LABEL_12:
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v14 = *a2;
  long long v13 = a2[1];
  long long __p = a4;
  while (v14 != v13)
  {
    if (((v9 >> *(unsigned char *)v14) & 1) == 0) {
      sub_409EC8((uint64_t)&__p, v14);
    }
    uint64_t v14 = (uint64_t *)((char *)v14 + 12);
  }
}

void sub_40704C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16)
{
  int v18 = *(void **)v16;
  if (*(void *)v16)
  {
    *(void *)(v16 + 8) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_407090(void **a1, uint64_t a2)
{
  uint64_t v2 = sub_58070(*a1, a2);
  if (!v2) {
    return 0;
  }
  if (*((_DWORD *)v2 + 12) != 3) {
    return 0;
  }
  uint64_t v3 = (uint64_t *)v2[5];
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3 == v5) {
    return 0;
  }
  LODWORD(v7) = 0;
  do
  {
    if (*(_DWORD *)(v4 + 8))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    uint64_t v7 = (1 << sub_89E80(*(char **)v4)) | v7;
    v4 += 16;
  }
  while (v4 != v5);
  return v7;
}

void sub_407190(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_55758((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_4071A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_55758((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_4071B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_55758((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_4071CC(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char **a6@<X8>)
{
  uint64_t v181 = a5;
  BOOL v7 = *a2 == -1 && a2[1] == -1;
  if (v7
    || (unsigned int v174 = (uint64_t *)(a1 + 3880), (sub_73930((void ***)(a1 + 3880), a2) & 1) == 0)
    || (v179[0] = a1, v179[1] = &v181, v179[2] = &v180, uint64_t v180 = a1, !a3)
    || (*a2 & a2[1]) == 0xFFFFFFFF)
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    return;
  }
  if (a4 == 0x7FFFFFFFFFFFFFFFLL)
  {
    double v12 = 1.79769313e308;
  }
  else
  {
    if (a4 < 0) {
      __int16 v13 = -50;
    }
    else {
      __int16 v13 = 50;
    }
    double v12 = (double)(a4 / 100
                 + (int)(((5243 * (__int16)(v13 + a4 % 100)) >> 19)
                       + ((5243 * (__int16)(v13 + a4 % 100)) >> 31)));
  }
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  sub_40889C((uint64_t)&__p, a3);
  char v187 = 0;
  uint64_t v185 = 0x3E4CCCCD3F000000;
  int v188 = 0;
  int v189 = 0;
  uint64_t v190 = 0;
  uint64_t v191 = 0;
  uint64_t v192 = 32;
  uint64_t v194 = 0;
  long long v184 = xmmword_20B98A0;
  __int16 v186 = 256;
  unsigned int v193 = 1;
  unint64_t v178 = a6;
  uint64_t v14 = (int32x4_t *)malloc_type_malloc(0x80uLL, 0x100004052888210uLL);
  uint64_t v194 = v14;
  uint64_t v15 = v192;
  if (v192)
  {
    unsigned int v16 = v193;
    unint64_t v17 = (v192 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    int v18 = (unsigned int *)v14;
    if (v17 < 7) {
      goto LABEL_21;
    }
    unint64_t v19 = v17 + 1;
    int v18 = (unsigned int *)v14 + (v19 & 0x7FFFFFFFFFFFFFF8);
    int32x4_t v20 = vdupq_n_s32(v193);
    uint64_t v21 = v14 + 1;
    uint64_t v22 = v19 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v21[-1] = v20;
      int32x4_t *v21 = v20;
      v21 += 2;
      v22 -= 8;
    }
    while (v22);
    if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_21:
      int v23 = (unsigned int *)v14 + v15;
      do
        *v18++ = v16;
      while (v18 != v23);
    }
  }
  unint64_t v177 = a2;
  sub_518C8(*a2 >> 17, a2[1] >> 17);
  int v25 = v24 | 0x40000000;
  int v183 = v24 | 0x40000000;
  uint64_t v26 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v26 = 0;
  *((_DWORD *)v26 + 14) = 0;
  *((_DWORD *)v26 + 2) = v25;
  sub_408B84((uint64_t)&v184, 1);
  sub_408E60((uint64_t)&v184, (unsigned int *)&v183, (uint64_t)v199);
  uint64_t v28 = v26 + 64;
  unint64_t v175 = a3;
  uint64_t v176 = v26 + 64;
  while (0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 4) < v175)
  {
    double v29 = *(double *)v26;
    unsigned int v30 = (long long *)(v26 + 8);
    int v31 = *((_DWORD *)v26 + 14);
    int v200 = v31;
    if (v31 == 1)
    {
      long long v33 = *v30;
      long long v34 = *(_OWORD *)(v26 + 40);
      v199[1] = *(_OWORD *)(v26 + 24);
      v199[2] = v34;
      v199[0] = v33;
      uint64_t v32 = v28 - v26;
      if (v28 - v26 < 65) {
        goto LABEL_85;
      }
    }
    else
    {
      if (!v31)
      {
        LODWORD(v27) = *(_DWORD *)v30;
        LODWORD(v199[0]) = *(_DWORD *)v30;
      }
      uint64_t v32 = v28 - v26;
      if (v28 - v26 < 65) {
        goto LABEL_85;
      }
    }
    double v35 = *(double *)v26;
    if (v31 == 1)
    {
      LODWORD(v27) = *((_DWORD *)v26 + 2);
      long long v36 = *(_OWORD *)(v26 + 12);
      long long v37 = *(_OWORD *)(v26 + 28);
      *(_OWORD *)&v198[28] = *(_OWORD *)(v26 + 40);
      *(_OWORD *)unint64_t v198 = v36;
      *(_OWORD *)&v198[16] = v37;
    }
    else if (!v31)
    {
      LODWORD(v27) = *(_DWORD *)v30;
    }
    uint64_t v38 = 0;
    uint64_t v39 = v32 >> 6;
    int64_t v40 = (unint64_t)((v32 >> 6) - 2) >> 1;
    uint64_t v41 = v26;
    do
    {
      char v44 = v41;
      v41 += 64 * v38 + 64;
      uint64_t v45 = 2 * v38;
      uint64_t v38 = (2 * v38) | 1;
      uint64_t v46 = v45 + 2;
      if (v46 < v39 && *(double *)v41 > *((double *)v41 + 8))
      {
        v41 += 64;
        uint64_t v38 = v46;
      }
      BOOL v47 = (long long *)(v41 + 8);
      *(void *)char v44 = *(void *)v41;
      BOOL v48 = v44 + 8;
      if (v44 != v41)
      {
        int v49 = *((_DWORD *)v44 + 14);
        int v50 = *((_DWORD *)v41 + 14);
        if (v49 == v50)
        {
          if (v49 == 1)
          {
            long long v51 = *v47;
            long long v52 = *(_OWORD *)(v41 + 24);
            *(_OWORD *)(v44 + 36) = *(_OWORD *)(v41 + 36);
            *BOOL v48 = v51;
            *(_OWORD *)(v44 + 24) = v52;
          }
          else if (!v49)
          {
            *(_DWORD *)BOOL v48 = *(_DWORD *)v47;
          }
        }
        else
        {
          if (v50 == 1)
          {
            long long v42 = *v47;
            long long v43 = *(_OWORD *)(v41 + 40);
            *(_OWORD *)(v44 + 24) = *(_OWORD *)(v41 + 24);
            *(_OWORD *)(v44 + 40) = v43;
            *BOOL v48 = v42;
          }
          else if (!v50)
          {
            *(_DWORD *)BOOL v48 = *(_DWORD *)v47;
          }
          *((_DWORD *)v44 + 14) = *((_DWORD *)v41 + 14);
        }
      }
    }
    while (v38 <= v40);
    if (v41 != v28 - 64)
    {
      *(void *)uint64_t v41 = *((void *)v28 - 8);
      int v53 = v28 - 56;
      int v54 = *((_DWORD *)v41 + 14);
      int v55 = *((_DWORD *)v28 - 2);
      if (v54 == v55)
      {
        if (v54 == 1)
        {
          long long v56 = *(_OWORD *)v53;
          long long v57 = *(_OWORD *)(v28 - 40);
          *(_OWORD *)(v41 + 36) = *(_OWORD *)(v28 - 28);
          *BOOL v47 = v56;
          *(_OWORD *)(v41 + 24) = v57;
        }
        else if (!v54)
        {
          *(_DWORD *)BOOL v47 = *(_DWORD *)v53;
          *((double *)v28 - 8) = v35;
          if (*((_DWORD *)v28 - 2) != v31) {
            goto LABEL_68;
          }
LABEL_76:
          if (v31 == 1)
          {
            *((_DWORD *)v28 - 14) = v27;
            long long v62 = *(_OWORD *)v198;
            long long v63 = *(_OWORD *)&v198[16];
            *(void *)(v28 - 20) = *(void *)&v198[32];
            *(_OWORD *)(v28 - 36) = v63;
            *(_OWORD *)(v28 - 52) = v62;
          }
          else if (!v31)
          {
            *(_DWORD *)int v53 = v27;
          }
LABEL_84:
          sub_4089D4((uint64_t)v26, (uint64_t)(v41 + 64), (v41 + 64 - v26) >> 6);
          goto LABEL_85;
        }
        *((double *)v28 - 8) = v35;
        if (*((_DWORD *)v28 - 2) != v31) {
          goto LABEL_68;
        }
        goto LABEL_76;
      }
      if (v55 == 1)
      {
        long long v58 = *(_OWORD *)v53;
        long long v59 = *(_OWORD *)(v28 - 24);
        *(_OWORD *)(v41 + 24) = *(_OWORD *)(v28 - 40);
        *(_OWORD *)(v41 + 40) = v59;
        *BOOL v47 = v58;
        *((_DWORD *)v41 + 14) = *((_DWORD *)v28 - 2);
        *((double *)v28 - 8) = v35;
        if (*((_DWORD *)v28 - 2) == v31) {
          goto LABEL_76;
        }
      }
      else
      {
        if (!v55) {
          *(_DWORD *)BOOL v47 = *(_DWORD *)v53;
        }
        *((_DWORD *)v41 + 14) = *((_DWORD *)v28 - 2);
        *((double *)v28 - 8) = v35;
        if (*((_DWORD *)v28 - 2) == v31) {
          goto LABEL_76;
        }
      }
LABEL_68:
      if (v31 == 1)
      {
        *((_DWORD *)v28 - 14) = v27;
        long long v60 = *(_OWORD *)v198;
        long long v61 = *(_OWORD *)&v198[16];
        *(_OWORD *)(v28 - 24) = *(_OWORD *)&v198[28];
        *(_OWORD *)(v28 - 36) = v61;
        *(_OWORD *)(v28 - 52) = v60;
      }
      else if (!v31)
      {
        *(_DWORD *)int v53 = v27;
      }
      *((_DWORD *)v28 - 2) = v31;
      goto LABEL_84;
    }
    *(double *)uint64_t v41 = v35;
    if (*((_DWORD *)v41 + 14) == v31)
    {
      if (v31 == 1)
      {
        *((_DWORD *)v41 + 2) = v27;
        long long v168 = *(_OWORD *)v198;
        long long v169 = *(_OWORD *)&v198[16];
        *(void *)(v41 + 44) = *(void *)&v198[32];
        *(_OWORD *)(v41 + 28) = v169;
        *(_OWORD *)(v41 + 12) = v168;
      }
      else if (!v31)
      {
        *(_DWORD *)BOOL v47 = v27;
      }
    }
    else
    {
      if (v31 == 1)
      {
        *((_DWORD *)v41 + 2) = v27;
        long long v170 = *(_OWORD *)v198;
        long long v171 = *(_OWORD *)&v198[16];
        *(_OWORD *)(v41 + 40) = *(_OWORD *)&v198[28];
        *(_OWORD *)(v41 + 28) = v171;
        *(_OWORD *)(v41 + 12) = v170;
LABEL_248:
        *((_DWORD *)v41 + 14) = v31;
        goto LABEL_85;
      }
      if (v31) {
        goto LABEL_248;
      }
      *(_DWORD *)BOOL v47 = v27;
      *((_DWORD *)v41 + 14) = 0;
    }
LABEL_85:
    if (v29 > v12) {
      break;
    }
    LODWORD(v27) = v197;
    double v64 = v197 == (v196 - (unsigned char *)__p) >> 3 ? *(double *)__p : 1.79769313e308;
    if (v29 > v64) {
      break;
    }
    v28 -= 64;
    if (v200 != 1)
    {
      uint64_t v68 = LODWORD(v199[0]);
      uint64_t v69 = (unsigned int *)sub_2AB884(*v174, 1, v199[0], 1);
      if (v70)
      {
        uint64_t v71 = (int *)((char *)v69 + *v69);
        char v72 = (unsigned __int16 *)((char *)v71 - *v71);
        if (*v72 >= 5u)
        {
          uint64_t v73 = v72[2];
          if (v73)
          {
            double v74 = (unsigned int *)((char *)v71 + v73 + *(unsigned int *)((char *)v71 + v73));
            uint64_t v75 = *v74;
            if (v75)
            {
              uint64_t v76 = 0;
              long long v77 = v74 + 1;
              uint64_t v78 = v68 << 32;
              int v173 = (int *)((char *)v69 + *v69);
              while (2)
              {
                uint64_t v81 = (int *)((char *)&v77[v76] + v77[v76]);
                *(void *)&long long v201 = __PAIR64__(v68, v76);
                sub_408360(v81, v177, v71, (uint64_t)&v201, (uint64_t)v198);
                if (*(double *)v198 != 1.79769313e308)
                {
                  if (v197 == (v196 - (unsigned char *)__p) >> 3)
                  {
                    if (*(double *)v198 >= *(double *)__p || *(double *)v198 >= v12) {
                      goto LABEL_106;
                    }
                  }
                  else if (*(double *)v198 >= 1.79769313e308 || *(double *)v198 >= v12)
                  {
                    goto LABEL_106;
                  }
                  if (sub_40860C((int *)v179, *(unint64_t *)&v198[8], v76 | v78))
                  {
                    *(void *)&long long v201 = *(void *)v198;
                    sub_408754((uint64_t)&__p, (double *)&v201);
                    uint64_t v84 = *(void *)v198;
                    int v85 = *(_DWORD *)v198;
                    if (v28 < v176)
                    {
                      long long v201 = *(_OWORD *)&v198[4];
                      v202[0] = *(_OWORD *)&v198[20];
                      *(_OWORD *)((char *)v202 + 12) = *(_OWORD *)&v198[32];
                      *(void *)uint64_t v28 = *(void *)v198;
                      *((_DWORD *)v28 + 14) = 1;
                      *((_DWORD *)v28 + 2) = v85;
                      long long v80 = v201;
                      long long v79 = v202[0];
                      *(_OWORD *)(v28 + 40) = *(_OWORD *)((char *)v202 + 12);
                      *(_OWORD *)(v28 + 12) = v80;
                      *(_OWORD *)(v28 + 28) = v79;
                      v28 += 64;
                    }
                    else
                    {
                      uint64_t v86 = (v28 - v26) >> 6;
                      unint64_t v87 = v86 + 1;
                      if ((unint64_t)(v86 + 1) >> 58) {
                        sub_2E00();
                      }
                      if ((v176 - v26) >> 5 > v87) {
                        unint64_t v87 = (v176 - v26) >> 5;
                      }
                      if ((unint64_t)(v176 - v26) >= 0x7FFFFFFFFFFFFFC0) {
                        unint64_t v88 = 0x3FFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v88 = v87;
                      }
                      if (v88)
                      {
                        if (v88 >> 58) {
                          sub_188D718();
                        }
                        int v89 = *(_DWORD *)v198;
                        uint64_t v90 = v75;
                        uint64_t v91 = v77;
                        unint64_t v92 = v88;
                        uint64_t v93 = (char *)operator new(v88 << 6);
                        unint64_t v88 = v92;
                        long long v77 = v91;
                        uint64_t v75 = v90;
                        int v85 = v89;
                        uint64_t v71 = v173;
                      }
                      else
                      {
                        uint64_t v93 = 0;
                      }
                      uint64_t v94 = &v93[64 * v86];
                      *(void *)uint64_t v94 = v84;
                      *((_DWORD *)v94 + 14) = 1;
                      *((_DWORD *)v94 + 2) = v85;
                      long long v95 = *(_OWORD *)&v198[20];
                      *(_OWORD *)(v94 + 12) = *(_OWORD *)&v198[4];
                      *(_OWORD *)(v94 + 28) = v95;
                      *(_OWORD *)(v94 + 40) = *(_OWORD *)&v198[32];
                      if (v28 == v26)
                      {
                        unsigned int v103 = &v93[64 * v86];
                        uint64_t v176 = &v93[64 * v88];
                        uint64_t v28 = v94 + 64;
                        if (v26) {
                          goto LABEL_140;
                        }
                      }
                      else
                      {
                        uint64_t v96 = 0;
                        do
                        {
                          unint64_t v99 = &v94[v96];
                          *((void *)v99 - 8) = *(void *)&v28[v96 - 64];
                          unint64_t v100 = &v94[v96 - 56];
                          unint64_t v101 = &v28[v96 - 56];
                          int v102 = *(_DWORD *)&v28[v96 - 8];
                          *((_DWORD *)v99 - 2) = v102;
                          if (v102 == 1)
                          {
                            long long v97 = *(_OWORD *)v101;
                            long long v98 = *(_OWORD *)&v28[v96 - 24];
                            *(_OWORD *)&v94[v96 - 40] = *(_OWORD *)&v28[v96 - 40];
                            *(_OWORD *)&v94[v96 - 24] = v98;
                            *(_OWORD *)unint64_t v100 = v97;
                          }
                          else if (!v102)
                          {
                            *(_DWORD *)unint64_t v100 = *(_DWORD *)v101;
                          }
                          v96 -= 64;
                        }
                        while (&v28[v96] != v26);
                        unsigned int v103 = &v94[v96];
                        uint64_t v176 = &v93[64 * v88];
                        uint64_t v28 = v94 + 64;
                        if (v26) {
LABEL_140:
                        }
                          operator delete(v26);
                      }
                      uint64_t v26 = v103;
                    }
                    sub_4089D4((uint64_t)v26, (uint64_t)v28, (v28 - v26) >> 6);
                    uint64_t v78 = v68 << 32;
                  }
                }
LABEL_106:
                if (++v76 == v75) {
                  break;
                }
                continue;
              }
            }
          }
        }
      }
      int v104 = -1;
      while (2)
      {
        int v105 = -1;
LABEL_149:
        unsigned int v106 = sub_511FC(v68);
        char v107 = v106 & 0xFE;
        unsigned int v108 = v68 & ~(-1 << (v106 & 0xFE));
        int v109 = sub_51938(v108);
        int v110 = sub_51938(v108 >> 1);
        int v111 = 1 << (v106 >> 1);
        unsigned int v112 = (int)(((((((v109 + v104) & ~((v109 + v104) >> 31)) - (v109 + v104) + ((v109 + v104) >> 31)) >> (v106 >> 1))
                     + ((v109 + v104) >> 31)) << (v106 >> 1))
                   + v109
                   + v104)
             % v111;
        unsigned int v113 = (int)(((((((v110 + v105) & ~((v110 + v105) >> 31)) - (v110 + v105) + ((v110 + v105) >> 31)) >> (v106 >> 1))
                     + ((v110 + v105) >> 31)) << (v106 >> 1))
                   + v110
                   + v105)
             % v111;
        int v114 = -1 << (v106 >> 1);
        if (~v114 < v112) {
          unsigned int v115 = ~v114;
        }
        else {
          unsigned int v115 = v112;
        }
        if (~v114 < v113) {
          unsigned int v116 = ~v114;
        }
        else {
          unsigned int v116 = v113;
        }
        sub_518C8(v115, v116);
        uint64_t v118 = v117 | (1 << v107);
        int v182 = v117 | (1 << v107);
        unint64_t v27 = v192 - 1;
        uint64_t v119 = (v192 - 1) & v118;
        int v120 = *((_DWORD *)v194 + v119);
        if (v193 != v120)
        {
          if (v190)
          {
            uint64_t v129 = 1;
            while (v189 == v120 || v118 != v120)
            {
              uint64_t v119 = (v119 + v129) & v27;
              int v120 = *((_DWORD *)v194 + v119);
              ++v129;
              if (v193 == v120) {
                goto LABEL_156;
              }
            }
          }
          else
          {
            uint64_t v145 = 1;
            while (v118 != v120)
            {
              uint64_t v119 = (v119 + v145) & v27;
              int v120 = *((_DWORD *)v194 + v119);
              ++v145;
              if (v193 == v120) {
                goto LABEL_156;
              }
            }
          }
          if (v119 != -1)
          {
            a6 = v178;
            goto LABEL_148;
          }
        }
LABEL_156:
        sub_408B84((uint64_t)&v184, 1);
        uint64_t v121 = v190;
        uint64_t v122 = v192 - 1;
        uint64_t v123 = (v192 - 1) & v182;
        int v124 = *((_DWORD *)v194 + v123);
        if (v193 == v124)
        {
          a6 = v178;
          goto LABEL_158;
        }
        a6 = v178;
        if (v190)
        {
          uint64_t v125 = -1;
          uint64_t v130 = 1;
          do
          {
            if (v189 == v124)
            {
              if (v125 == -1) {
                uint64_t v125 = v123;
              }
            }
            else if (v182 == v124)
            {
              goto LABEL_182;
            }
            uint64_t v123 = (v123 + v130) & v122;
            int v124 = *((_DWORD *)v194 + v123);
            ++v130;
          }
          while (v193 != v124);
          if (v125 == -1) {
LABEL_158:
          }
            uint64_t v125 = v123;
        }
        else
        {
          uint64_t v146 = 1;
          while (v182 != v124)
          {
            uint64_t v123 = (v123 + v146) & v122;
            int v124 = *((_DWORD *)v194 + v123);
            ++v146;
            if (v193 == v124)
            {
              uint64_t v121 = 0;
              goto LABEL_158;
            }
          }
LABEL_182:
          if (v123 != -1) {
            goto LABEL_165;
          }
          uint64_t v125 = -1;
        }
        if ((unint64_t)(v191 - v121) >= 0x3FFFFFFFFFFFFFFFLL)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "insert overflow");
        }
        if (v121 && v189 == *((_DWORD *)v194 + v125)) {
          uint64_t v190 = v121 - 1;
        }
        else {
          ++v191;
        }
        *((_DWORD *)v194 + v125) = v182;
LABEL_165:
        sub_383CC((unsigned int *)&v182, (uint64_t)&v201);
        double v127 = sub_35C04((unsigned int *)&v201, v177, 0, v126);
        int v128 = v196 - __p;
        LODWORD(v27) = v197;
        if (v197 == (v196 - (unsigned char *)__p) >> 3)
        {
          if (v127 >= *(double *)__p) {
            goto LABEL_148;
          }
        }
        else if (v127 >= 1.79769313e308)
        {
          goto LABEL_148;
        }
        if (v127 >= v12) {
          goto LABEL_148;
        }
        unsigned int v131 = v182;
        if (v28 < v176)
        {
          *(double *)uint64_t v28 = v127;
          *((_DWORD *)v28 + 14) = 0;
          *((_DWORD *)v28 + 2) = v131;
          v28 += 64;
          unint64_t v132 = v28 - v26;
          if (v28 - v26 < 65) {
            goto LABEL_148;
          }
          goto LABEL_216;
        }
        uint64_t v133 = (v28 - v26) >> 6;
        unint64_t v134 = v133 + 1;
        if ((unint64_t)(v133 + 1) >> 58) {
          sub_2E00();
        }
        if ((v176 - v26) >> 5 > v134) {
          unint64_t v134 = (v176 - v26) >> 5;
        }
        if ((unint64_t)(v176 - v26) >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v135 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v135 = v134;
        }
        if (v135 >> 58) {
          sub_188D718();
        }
        uint64_t v136 = (char *)operator new(v135 << 6);
        unint64_t v137 = &v136[64 * v133];
        *(double *)unint64_t v137 = v127;
        *((_DWORD *)v137 + 14) = 0;
        *((_DWORD *)v137 + 2) = v131;
        if (v28 == v26)
        {
          unint64_t v147 = &v136[64 * v133];
          int v128 = v136 + (v135 << 6);
          uint64_t v176 = &v136[64 * v135];
          uint64_t v28 = v137 + 64;
          if (v26) {
            goto LABEL_214;
          }
        }
        else
        {
          uint64_t v138 = 0;
          do
          {
            unint64_t v141 = &v137[v138];
            *((void *)v141 - 8) = *(void *)&v28[v138 - 64];
            unsigned int v142 = &v137[v138 - 56];
            uint64_t v143 = &v28[v138 - 56];
            int v144 = *(_DWORD *)&v28[v138 - 8];
            *((_DWORD *)v141 - 2) = v144;
            if (v144 == 1)
            {
              long long v139 = *(_OWORD *)v143;
              long long v140 = *(_OWORD *)&v28[v138 - 24];
              *(_OWORD *)&v137[v138 - 40] = *(_OWORD *)&v28[v138 - 40];
              *(_OWORD *)&v137[v138 - 24] = v140;
              *(_OWORD *)unsigned int v142 = v139;
            }
            else if (!v144)
            {
              *(_DWORD *)unsigned int v142 = *(_DWORD *)v143;
            }
            v138 -= 64;
            LODWORD(v27) = v28 + v138;
          }
          while (&v28[v138] != v26);
          unint64_t v147 = &v137[v138];
          int v128 = v136 + (v135 << 6);
          uint64_t v176 = &v136[64 * v135];
          uint64_t v28 = v137 + 64;
          if (v26) {
LABEL_214:
          }
            operator delete(v26);
        }
        uint64_t v26 = v147;
        unint64_t v132 = v28 - v147;
        if (v28 - v147 < 65) {
          goto LABEL_148;
        }
LABEL_216:
        unint64_t v27 = ((v132 >> 6) - 2) >> 1;
        unint64_t v148 = (double *)&v26[64 * v27];
        unint64_t v149 = v28 - 64;
        double v150 = *((double *)v28 - 8);
        double v151 = *v148;
        if (*v148 <= v150) {
          goto LABEL_148;
        }
        int v152 = *((_DWORD *)v28 - 2);
        if (v152 == 1)
        {
          int v128 = *((_DWORD *)v28 - 14);
          long long v153 = *(_OWORD *)(v28 - 52);
          long long v154 = *(_OWORD *)(v28 - 36);
          *(_OWORD *)&v198[28] = *(_OWORD *)(v28 - 24);
          *(_OWORD *)unint64_t v198 = v153;
          *(_OWORD *)&v198[16] = v154;
        }
        else if (!v152)
        {
          int v128 = *((_DWORD *)v28 - 14);
        }
        do
        {
          unint64_t v155 = v148;
          *(double *)unint64_t v149 = v151;
          unint64_t v156 = v149 + 8;
          unint64_t v157 = (long long *)(v155 + 1);
          if (v149 != (char *)v155)
          {
            int v158 = *((_DWORD *)v149 + 14);
            int v159 = *((_DWORD *)v155 + 14);
            if (v158 == v159)
            {
              if (v158 == 1)
              {
                long long v160 = *v157;
                long long v161 = *(_OWORD *)(v155 + 3);
                *(_OWORD *)(v149 + 36) = *(_OWORD *)((char *)v155 + 36);
                *unint64_t v156 = v160;
                *(_OWORD *)(v149 + 24) = v161;
              }
              else if (!v158)
              {
                *(_DWORD *)unint64_t v156 = *(_DWORD *)v157;
              }
            }
            else
            {
              if (v159 == 1)
              {
                long long v162 = *v157;
                long long v163 = *(_OWORD *)(v155 + 5);
                *(_OWORD *)(v149 + 24) = *(_OWORD *)(v155 + 3);
                *(_OWORD *)(v149 + 40) = v163;
                *unint64_t v156 = v162;
              }
              else if (!v159)
              {
                *(_DWORD *)unint64_t v156 = *(_DWORD *)v157;
              }
              *((_DWORD *)v149 + 14) = *((_DWORD *)v155 + 14);
            }
          }
          if (!v27) {
            break;
          }
          unint64_t v27 = (v27 - 1) >> 1;
          unint64_t v148 = (double *)&v26[64 * v27];
          double v151 = *v148;
          unint64_t v149 = (char *)v155;
        }
        while (*v148 > v150);
        double *v155 = v150;
        LODWORD(v27) = *((_DWORD *)v155 + 14);
        if (v27 == v152)
        {
          if (v152 == 1)
          {
            *((_DWORD *)v155 + 2) = v128;
            long long v164 = *(_OWORD *)v198;
            long long v165 = *(_OWORD *)&v198[16];
            *(double *)((char *)v155 + 44) = *(double *)&v198[32];
            *(_OWORD *)((char *)v155 + 28) = v165;
            *(_OWORD *)((char *)v155 + 12) = v164;
          }
          else if (!v152)
          {
            *(_DWORD *)unint64_t v157 = v128;
          }
        }
        else
        {
          if (v152 == 1)
          {
            *((_DWORD *)v155 + 2) = v128;
            long long v166 = *(_OWORD *)v198;
            long long v167 = *(_OWORD *)&v198[16];
            *(_OWORD *)(v155 + 5) = *(_OWORD *)&v198[28];
            *(_OWORD *)((char *)v155 + 28) = v167;
            *(_OWORD *)((char *)v155 + 12) = v166;
          }
          else if (!v152)
          {
            *(_DWORD *)unint64_t v157 = v128;
            *((_DWORD *)v155 + 14) = 0;
            goto LABEL_148;
          }
          *((_DWORD *)v155 + 14) = v152;
        }
LABEL_148:
        if (++v105 == 2)
        {
          if (++v104 == 2) {
            goto LABEL_26;
          }
          continue;
        }
        goto LABEL_149;
      }
    }
    int v65 = *a6;
    int v66 = a6[1];
    if (*a6 != v66)
    {
      LODWORD(v27) = DWORD2(v199[0]);
      while (*((_DWORD *)v65 + 2) != DWORD2(v199[0]) || *((_DWORD *)v65 + 3) != HIDWORD(v199[0]))
      {
        v65 += 48;
        if (v65 == v66)
        {
          int v65 = a6[1];
          break;
        }
      }
    }
    if (v65 == v66) {
      sub_408220(a6, v199);
    }
LABEL_26:
    if (v26 == v28) {
      goto LABEL_250;
    }
  }
  uint64_t v28 = v26;
LABEL_250:
  if (v194) {
    free(v194);
  }
  if (v28) {
    operator delete(v28);
  }
  if (__p)
  {
    unint64_t v196 = __p;
    operator delete(__p);
  }
}

void sub_408154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,void *__p,uint64_t a37)
{
  if (a34)
  {
    free(a34);
    if (!v37)
    {
LABEL_3:
      uint64_t v39 = __p;
      if (!__p) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if (!v37)
  {
    goto LABEL_3;
  }
  operator delete(v37);
  uint64_t v39 = __p;
  if (!__p)
  {
LABEL_4:
    int64_t v40 = *(void **)a18;
    if (!*(void *)a18) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(v39);
  int64_t v40 = *(void **)a18;
  if (!*(void *)a18) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  *(void *)(a18 + 8) = v40;
  operator delete(v40);
  _Unwind_Resume(exception_object);
}

char *sub_408220(char **a1, _OWORD *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    unsigned int v9 = *a1;
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0x555555555555555) {
      sub_2E00();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)v9) >> 4);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v13 = 0x555555555555555;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 > 0x555555555555555) {
        sub_188D718();
      }
      uint64_t v14 = (char *)operator new(48 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[48 * v10];
    long long v16 = a2[1];
    *(_OWORD *)uint64_t v15 = *a2;
    *((_OWORD *)v15 + 1) = v16;
    *((_OWORD *)v15 + 2) = a2[2];
    int v8 = v15 + 48;
    if (v5 != v9)
    {
      do
      {
        long long v17 = *((_OWORD *)v5 - 3);
        long long v18 = *((_OWORD *)v5 - 2);
        *(_OWORD *)(v15 - 20) = *(_OWORD *)(v5 - 20);
        *((_OWORD *)v15 - 3) = v17;
        *((_OWORD *)v15 - 2) = v18;
        v15 -= 48;
        v5 -= 48;
      }
      while (v5 != v9);
      uint64_t v5 = *a1;
    }
    *a1 = v15;
    a1[1] = v8;
    a1[2] = &v14[48 * v13];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    long long v6 = *a2;
    long long v7 = a2[2];
    *((_OWORD *)v5 + 1) = a2[1];
    *((_OWORD *)v5 + 2) = v7;
    *(_OWORD *)uint64_t v5 = v6;
    int v8 = v5 + 48;
  }
  a1[1] = v8;
  return v8 - 48;
}

void sub_408360(int *a1@<X1>, unsigned int *a2@<X2>, int *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v39 = -1;
  uint64_t v40 = 0x7FEFFFFFFFFFFFFFLL;
  uint64_t v37 = -1;
  int v38 = 0x7FFFFFFF;
  uint64_t v35 = -1;
  int v36 = 0x7FFFFFFF;
  uint64_t v34 = 0;
  unsigned int v8 = *(_DWORD *)(a4 + 4);
  unsigned int v9 = (unsigned __int16 *)((char *)a3 - *a3);
  if (*v9 >= 7u && (uint64_t v10 = v9[3]) != 0) {
    int v11 = *(int *)((char *)a3 + v10);
  }
  else {
    int v11 = 0;
  }
  v33[0] = &v35;
  v33[1] = a2;
  void v33[2] = &v40;
  v33[3] = &v37;
  _OWORD v33[4] = &v39;
  v33[5] = &v34;
  sub_40959C(a1, v8, v11, (uint64_t)v33);
  if (v37 == -1 && (unsigned int v12 = v35, v35 != -1))
  {
    long double v17 = exp(3.14159265 - (double)HIDWORD(v35) * 6.28318531 / 4294967300.0);
    *(double *)&unint64_t v18 = atan((v17 - 1.0 / v17) * 0.5) * 57.2957795;
    long double v19 = *(double *)&v18 * 0.0174532925;
    LODWORD(v18) = a2[1];
    long double v20 = exp(3.14159265 - (double)v18 * 6.28318531 / 4294967300.0);
    long double v21 = atan((v20 - 1.0 / v20) * 0.5) * 57.2957795 * 0.0174532925;
    v22.i64[0] = v12;
    v22.i64[1] = *a2;
    float64x2_t v23 = vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v22), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
    double v32 = vsubq_f64(v23, (float64x2_t)vdupq_laneq_s64((int64x2_t)v23, 1)).f64[0];
    long double v24 = sin((v19 - v21) * 0.5);
    long double v25 = v24 * v24;
    double v26 = cos(v19);
    long double v27 = v26 * cos(v21);
    long double v28 = sin(0.5 * v32);
    long double v29 = atan2(sqrt(v25 + v27 * (v28 * v28)), sqrt(1.0 - (v25 + v27 * (v28 * v28))));
    uint64_t v16 = 0;
    double v13 = (v29 + v29) * 6372797.56;
    unsigned __int16 v14 = *(_WORD *)((char *)a1 - *a1 + 4);
    uint64_t v15 = &v35;
  }
  else
  {
    double v13 = *(double *)&v40;
    unsigned __int16 v14 = *(_WORD *)((char *)a1 - *a1 + 4);
    uint64_t v15 = &v37;
    uint64_t v16 = v39;
  }
  uint64_t v30 = *(void *)((char *)a1 + v14);
  *(double *)a5 = v13;
  uint64_t v31 = *v15;
  *(void *)(a5 + 8) = v30;
  *(void *)(a5 + 16) = v31;
  *(_DWORD *)(a5 + 24) = *((_DWORD *)v15 + 2);
  *(void *)(a5 + 32) = v16;
  *(_DWORD *)(a5 + 40) = 0;
}

int *sub_40860C(int *result, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *(void *)result;
  if (!*(unsigned char *)(*(void *)result + 7774)) {
    goto LABEL_7;
  }
  double result = (int *)sub_290DEC(v6 + 3896, a2, 1);
  if (result)
  {
    long long v7 = (unsigned __int16 *)((char *)result - *result);
    if (*v7 < 5u) {
      return 0;
    }
    uint64_t v8 = v7[2];
    if (!v8 || *(unsigned int *)((char *)result + v8 + *(unsigned int *)((char *)result + v8)) <= HIDWORD(a2)) {
      return 0;
    }
    double result = (int *)sub_295DB4(v6, a2);
    if (result)
    {
LABEL_7:
      double result = (int *)(**((uint64_t (***)(int *, unint64_t, uint64_t))v5 + 1))(result, a2, a3);
      if (result)
      {
        sub_295550(**((void **)v5 + 2), a2, (unint64_t *)&v12);
        unsigned int v9 = v13;
        uint64_t v10 = v12;
        if (v12 != v13)
        {
          uint64_t v10 = v12;
          while (HIDWORD(a3) != *v10 || a3 != v10[1])
          {
            v10 += 2;
            if (v10 == v13)
            {
              uint64_t v10 = v13;
              break;
            }
          }
        }
        if (v12)
        {
          double v13 = v12;
          operator delete(v12);
        }
        return (int *)(v10 != v9);
      }
    }
  }
  return result;
}

void sub_408754(uint64_t a1, double *a2)
{
  unint64_t v4 = *(double **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v5 = v3 - *(void *)a1;
  uint64_t v6 = v5 >> 3;
  if (v5 >> 3 < (unint64_t)*(unsigned int *)(a1 + 32)) {
    goto LABEL_16;
  }
  double v7 = *v4;
  if (*a2 < *v4)
  {
    if (v5 >= 9)
    {
      uint64_t v8 = 0;
      unsigned int v9 = *(double **)a1;
      do
      {
        uint64_t v10 = v9;
        v9 += v8 + 1;
        uint64_t v11 = 2 * v8;
        uint64_t v8 = (2 * v8) | 1;
        uint64_t v12 = v11 + 2;
        if (v12 < v6 && *v9 < v9[1])
        {
          ++v9;
          uint64_t v8 = v12;
        }
        double *v10 = *v9;
      }
      while (v8 <= (uint64_t)((unint64_t)(v6 - 2) >> 1));
      double v13 = (double *)(v3 - 8);
      if (v9 != (double *)(v3 - 8))
      {
        *unsigned int v9 = *v13;
        *double v13 = v7;
        uint64_t v14 = (char *)v9 - (char *)v4 + 8;
        if (v14 < 9) {
          goto LABEL_15;
        }
        unint64_t v15 = (((unint64_t)v14 >> 3) - 2) >> 1;
        uint64_t v16 = &v4[v15];
        double v17 = *v16;
        double v7 = *v9;
        if (*v16 >= *v9) {
          goto LABEL_15;
        }
        do
        {
          *unsigned int v9 = v17;
          unsigned int v9 = v16;
          if (!v15) {
            break;
          }
          unint64_t v15 = (v15 - 1) >> 1;
          uint64_t v16 = &v4[v15];
          double v17 = *v16;
        }
        while (*v16 < v7);
      }
      *unsigned int v9 = v7;
    }
LABEL_15:
    *(void *)(a1 + 8) = v3 - 8;
LABEL_16:
    sub_409D0C(a1, a2);
  }
  ++*(_DWORD *)(a1 + 28);
}

uint64_t sub_40889C(uint64_t result, int a2)
{
  *(void *)double result = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 28) = 0;
  *(_DWORD *)(result + 32) = a2;
  if (!a2)
  {
    sub_E1B4((uint64_t)v8);
    uint64_t v2 = sub_188FC78(v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/common/api/common/algorithms/StreamingKthElement.h", 127);
    sub_188FC78(v2, (uint64_t)":", 1);
    uint64_t v3 = (void *)std::ostream::operator<<();
    unint64_t v4 = sub_188FC78(v3, (uint64_t)":", 1);
    sub_188FC78(v4, (uint64_t)"Illegal value of 0 provided as window size (\"k\"-value)", 54);
    exception = __cxa_allocate_exception(0x40uLL);
    std::stringbuf::str();
    uint64_t v6 = (void *)sub_2F404((uint64_t)exception, &v7);
  }
  return result;
}

void sub_408980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1C02990((uint64_t)&a15);
  double v17 = *(void **)v15;
  if (*(void *)v15)
  {
    *(void *)(v15 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_4089D4(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (double *)(result + (v4 >> 1 << 6));
    long long v7 = (double *)(a2 - 64);
    double v8 = *(double *)(a2 - 64);
    double v9 = *v6;
    if (*v6 > v8)
    {
      int v10 = *(_DWORD *)(a2 - 8);
      if (v10 == 1)
      {
        int v3 = *(_DWORD *)(a2 - 56);
        long long v20 = *(_OWORD *)(a2 - 52);
        *(_OWORD *)long double v21 = *(_OWORD *)(a2 - 36);
        *(_OWORD *)&v21[12] = *(_OWORD *)(a2 - 24);
      }
      else if (!v10)
      {
        int v3 = *(_DWORD *)(a2 - 56);
      }
      do
      {
        uint64_t v11 = v6;
        *long long v7 = v9;
        uint64_t v12 = v7 + 1;
        double v13 = (long long *)(v11 + 1);
        if (v7 != v11)
        {
          int v14 = *((_DWORD *)v7 + 14);
          int v15 = *((_DWORD *)v11 + 14);
          if (v14 == v15)
          {
            if (v14 == 1)
            {
              long long v16 = *v13;
              long long v17 = *(_OWORD *)(v11 + 3);
              *(_OWORD *)((char *)v7 + 36) = *(_OWORD *)((char *)v11 + 36);
              *uint64_t v12 = v16;
              *(_OWORD *)(v7 + 3) = v17;
            }
            else if (!v14)
            {
              *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
            }
          }
          else
          {
            if (v15 == 1)
            {
              long long v18 = *v13;
              long long v19 = *(_OWORD *)(v11 + 5);
              *(_OWORD *)(v7 + 3) = *(_OWORD *)(v11 + 3);
              *(_OWORD *)(v7 + 5) = v19;
              *uint64_t v12 = v18;
            }
            else if (!v15)
            {
              *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
            }
            *((_DWORD *)v7 + 14) = *((_DWORD *)v11 + 14);
          }
        }
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v6 = (double *)(result + (v5 << 6));
        double v9 = *v6;
        long long v7 = v11;
      }
      while (*v6 > v8);
      *uint64_t v11 = v8;
      if (*((_DWORD *)v11 + 14) == v10)
      {
        if (v10 == 1)
        {
          *((_DWORD *)v11 + 2) = v3;
          *(_OWORD *)((char *)v11 + 12) = v20;
          *(_OWORD *)((char *)v11 + 28) = *(_OWORD *)v21;
          *(double *)((char *)v11 + 44) = *(double *)&v21[16];
        }
        else if (!v10)
        {
          *(_DWORD *)double v13 = v3;
        }
      }
      else
      {
        if (v10 == 1)
        {
          *((_DWORD *)v11 + 2) = v3;
          *(_OWORD *)((char *)v11 + 12) = v20;
          *(_OWORD *)((char *)v11 + 28) = *(_OWORD *)v21;
          *(_OWORD *)(v11 + 5) = *(_OWORD *)&v21[12];
        }
        else if (!v10)
        {
          *(_DWORD *)double v13 = v3;
        }
        *((_DWORD *)v11 + 14) = v10;
      }
    }
  }
  return result;
}

uint64_t sub_408B84(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t result = sub_408FE4(a1);
    unint64_t v5 = *(void *)(a1 + 48);
    if (v5 >= ~a2) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t result = 0;
    unint64_t v5 = *(void *)(a1 + 48);
    if (v5 >= ~a2) {
      goto LABEL_27;
    }
  }
  unint64_t v6 = *(void *)(a1 + 56);
  unint64_t v7 = v5 + a2;
  if (v6 < 4 || v7 > *(void *)a1)
  {
    float v8 = *(float *)(a1 + 16);
    unint64_t v9 = vcvts_n_u32_f32(v8, 2uLL);
    unint64_t v10 = 4;
    if (v7 >= v9)
    {
      while ((v10 & 0x8000000000000000) == 0)
      {
        v10 *= 2;
        if (v7 < (unint64_t)(float)(v8 * (float)v10)) {
          goto LABEL_8;
        }
      }
LABEL_27:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_2E18(exception, "resize overflow");
    }
LABEL_8:
    if (v10 > v6)
    {
      unint64_t v11 = *(void *)(a1 + 40);
      unint64_t v12 = v5 - v11 + a2;
      unint64_t v13 = 4;
      if (v6 > 4) {
        goto LABEL_11;
      }
LABEL_10:
      if (v12 >= (unint64_t)(float)(v8 * (float)v13))
      {
LABEL_11:
        while ((v13 & 0x8000000000000000) == 0)
        {
          v13 *= 2;
          if (v13 >= v6) {
            goto LABEL_10;
          }
        }
        goto LABEL_27;
      }
      unint64_t v14 = v7 - (v11 >> 2);
      unint64_t v15 = 4;
      if (v14 >= v9)
      {
        while ((v15 & 0x8000000000000000) == 0)
        {
          v15 *= 2;
          if (v14 < (unint64_t)(float)(v8 * (float)v15)) {
            goto LABEL_19;
          }
        }
        goto LABEL_27;
      }
LABEL_19:
      if (v13 <= 0x7FFFFFFFFFFFFFFELL
        && v13 < v15
        && v12 >= (unint64_t)(float)(*(float *)(a1 + 20) * (float)(2 * v13)))
      {
        v13 *= 2;
      }
      sub_409124((uint64_t)&v26, a1, v13);
      uint64x2_t v17 = *(uint64x2_t *)a1;
      long long v16 = *(_OWORD *)(a1 + 16);
      long long v18 = v27;
      *(uint64x2_t *)a1 = v26;
      *(_OWORD *)(a1 + 16) = v18;
      uint64x2_t v26 = v17;
      long long v27 = v16;
      int v19 = *(_DWORD *)(a1 + 32);
      *(_DWORD *)(a1 + 32) = v28;
      int v28 = v19;
      long long v20 = *(_OWORD *)(a1 + 40);
      *(_OWORD *)(a1 + 40) = v29;
      long long v29 = v20;
      unint64_t v21 = *(void *)(a1 + 56);
      unint64_t v22 = v30;
      *(void *)(a1 + 56) = v30;
      unint64_t v30 = v21;
      int v23 = *(_DWORD *)(a1 + 64);
      *(_DWORD *)(a1 + 64) = v31;
      int v31 = v23;
      long double v24 = *(void **)(a1 + 72);
      *(void *)(a1 + 72) = v32;
      double v32 = v24;
      *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)v22)));
      *(unsigned char *)(a1 + 24) = 0;
      uint64x2_t v26 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v27, (float)v21)));
      BYTE8(v27) = 0;
      if (v24) {
        free(v24);
      }
      return 1;
    }
  }
  return result;
}

void sub_408E10(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_408E24(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_408E38(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_408E4C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_408E60@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(result + 56);
  uint64_t v4 = v3 - 1;
  uint64_t v5 = *a2;
  uint64_t v6 = (v3 - 1) & v5;
  uint64_t v7 = *(void *)(result + 72);
  int v8 = *(_DWORD *)(result + 64);
  int v9 = *(_DWORD *)(v7 + 4 * v6);
  uint64_t v10 = *(void *)(result + 40);
  if (v8 == v9)
  {
LABEL_2:
    uint64_t v11 = v6;
    goto LABEL_3;
  }
  if (v10)
  {
    uint64_t v11 = -1;
    uint64_t v15 = 1;
    do
    {
      if (*(_DWORD *)(result + 32) == v9)
      {
        if (v11 == -1) {
          uint64_t v11 = v6;
        }
      }
      else if (v5 == v9)
      {
        goto LABEL_17;
      }
      uint64_t v6 = (v6 + v15) & v4;
      int v9 = *(_DWORD *)(v7 + 4 * v6);
      ++v15;
    }
    while (v8 != v9);
    if (v11 != -1) {
      goto LABEL_3;
    }
    goto LABEL_2;
  }
  uint64_t v16 = 1;
  while (v5 != v9)
  {
    uint64_t v6 = (v6 + v16) & v4;
    int v9 = *(_DWORD *)(v7 + 4 * v6);
    ++v16;
    if (v8 == v9)
    {
      uint64_t v10 = 0;
      goto LABEL_2;
    }
  }
LABEL_17:
  if (v6 != -1)
  {
    char v14 = 0;
    unint64_t v13 = (_DWORD *)(v7 + 4 * v6);
    goto LABEL_9;
  }
  uint64_t v11 = -1;
LABEL_3:
  uint64_t v12 = *(void *)(result + 48);
  if ((unint64_t)(v12 - v10) >= 0x3FFFFFFFFFFFFFFFLL)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2E18(exception, "insert overflow");
  }
  if (v10 && *(_DWORD *)(result + 32) == *(_DWORD *)(v7 + 4 * v11)) {
    *(void *)(result + 40) = v10 - 1;
  }
  else {
    *(void *)(result + 48) = v12 + 1;
  }
  unint64_t v13 = (_DWORD *)(v7 + 4 * v11);
  *unint64_t v13 = v5;
  char v14 = 1;
LABEL_9:
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v13;
  *(void *)(a3 + 16) = v7 + 4 * v3;
  *(unsigned char *)(a3 + 24) = v14;
  return result;
}

void sub_408FD0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_408FE4(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 48) - *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = v2 >= v3;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || (unint64_t v5 = *(void *)(a1 + 56), v5 < 0x21))
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    float v6 = (float)v2;
    do
    {
      unint64_t v7 = v5;
      v5 >>= 1;
    }
    while (v7 >= 0x42 && (float)(*(float *)(a1 + 20) * (float)v5) > v6);
    sub_409124((uint64_t)&v18, a1, v5);
    uint64x2_t v9 = *(uint64x2_t *)a1;
    long long v8 = *(_OWORD *)(a1 + 16);
    long long v10 = v19;
    *(uint64x2_t *)a1 = v18;
    *(_OWORD *)(a1 + 16) = v10;
    uint64x2_t v18 = v9;
    long long v19 = v8;
    int v11 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v20;
    int v20 = v11;
    long long v12 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v21;
    long long v21 = v12;
    unint64_t v13 = *(void *)(a1 + 56);
    unint64_t v14 = v22;
    *(void *)(a1 + 56) = v22;
    unint64_t v22 = v13;
    int v15 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v23;
    int v23 = v15;
    uint64_t v16 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v24;
    long double v24 = v16;
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)v14)));
    *(unsigned char *)(a1 + 24) = 0;
    uint64x2_t v18 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v19, (float)v13)));
    BYTE8(v19) = 0;
    if (v16) {
      free(v16);
    }
    uint64_t result = 1;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

float sub_409124(uint64_t a1, uint64_t a2, unint64_t a3)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72) = 0;
  if (*(unsigned char *)(a2 + 25))
  {
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)(a1 + 16), 0)));
    *(unsigned char *)(a1 + 24) = 0;
    sub_409268(a1, a2, a3);
  }
  else
  {
    unint64_t v5 = 4;
    if (a3 > 4) {
      goto LABEL_5;
    }
    while (1)
    {
      float v6 = *(float *)(a1 + 16) * (float)v5;
      if (*(void *)(a2 + 48) - *(void *)(a2 + 40) < (unint64_t)v6) {
        break;
      }
      do
      {
LABEL_5:
        if ((v5 & 0x8000000000000000) != 0)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "resize overflow");
        }
        v5 *= 2;
      }
      while (v5 < a3);
    }
    *(void *)(a1 + 56) = v5;
    float result = *(float *)(a1 + 20) * (float)v5;
    *(void *)a1 = (unint64_t)v6;
    *(void *)(a1 + 8) = (unint64_t)result;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

void sub_409254(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_409268(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = *(void *)(a2 + 48) - *(void *)(a2 + 40);
  unint64_t v6 = 4;
  if (a3 > 4) {
    goto LABEL_3;
  }
  while (v5 >= (unint64_t)(float)(*(float *)(a1 + 16) * (float)v6))
  {
    do
    {
LABEL_3:
      if ((v6 & 0x8000000000000000) != 0)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_2E18(exception, "resize overflow");
      }
      v6 *= 2;
    }
    while (v6 < a3);
  }
  sub_409450(a1, v6);
  uint64_t v7 = *(void *)(a2 + 56);
  if (v7)
  {
    int v8 = *(_DWORD *)(a2 + 64);
    if (*(void *)(a2 + 40))
    {
      uint64_t v9 = 4 * v7;
      long long v10 = *(_DWORD **)(a2 + 72);
      while (v8 == *v10 || *(_DWORD *)(a2 + 32) == *v10)
      {
        ++v10;
        v9 -= 4;
        if (!v9) {
          goto LABEL_38;
        }
      }
    }
    else
    {
      uint64_t v21 = 4 * v7;
      long long v10 = *(_DWORD **)(a2 + 72);
      while (v8 == *v10)
      {
        ++v10;
        v21 -= 4;
        if (!v21) {
          goto LABEL_38;
        }
      }
    }
  }
  else
  {
    long long v10 = *(_DWORD **)(a2 + 72);
  }
  uint64_t v12 = *(void *)(a2 + 72) + 4 * v7;
  if (v10 != (_DWORD *)v12)
  {
    uint64_t v13 = *(void *)(a1 + 56) - 1;
    uint64_t v14 = *(void *)(a1 + 72);
    do
    {
      uint64_t v15 = *v10;
      int v16 = *(_DWORD *)(a1 + 64);
      uint64_t v17 = v13 & v15;
      if (v16 != *(_DWORD *)(v14 + 4 * (v13 & v15)))
      {
        uint64_t v18 = 1;
        do
          uint64_t v17 = (v17 + v18++) & v13;
        while (v16 != *(_DWORD *)(v14 + 4 * v17));
      }
      *(_DWORD *)(v14 + 4 * v17) = v15;
      ++*(void *)(a1 + 48);
      if (++v10 == (_DWORD *)v12) {
        break;
      }
      int v19 = *(_DWORD *)(a2 + 64);
      if (*(void *)(a2 + 40))
      {
        while (v19 == *v10 || *(_DWORD *)(a2 + 32) == *v10)
        {
          if (++v10 == (_DWORD *)v12) {
            goto LABEL_38;
          }
        }
      }
      else
      {
        while (v19 == *v10)
        {
          if (++v10 == (_DWORD *)v12) {
            goto LABEL_38;
          }
        }
      }
    }
    while (v10 != (_DWORD *)v12);
  }
LABEL_38:
  ++*(_DWORD *)(a1 + 28);
}

void sub_40943C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64x2_t sub_409450(uint64_t a1, unint64_t a2)
{
  BOOL v4 = *(float32x4_t **)(a1 + 72);
  if (!v4)
  {
    unint64_t v5 = (float32x4_t *)malloc_type_malloc(4 * a2, 0x100004052888210uLL);
LABEL_6:
    *(void *)(a1 + 72) = v5;
    BOOL v4 = v5;
    goto LABEL_7;
  }
  if (*(void *)(a1 + 56) != a2)
  {
    unint64_t v5 = (float32x4_t *)malloc_type_realloc(*(void **)(a1 + 72), 4 * a2, 0x100004052888210uLL);
    if (!v5)
    {
      fprintf(__stderrp, "sparsehash: FATAL ERROR: failed to reallocate %lu elements for ptr %p", a2, v4);
      exit(1);
    }
    goto LABEL_6;
  }
LABEL_7:
  if (a2)
  {
    unint64_t v6 = (const float *)(a1 + 64);
    unint64_t v7 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    int v8 = (char *)v4;
    if (v7 < 0xF) {
      goto LABEL_18;
    }
    if ((unint64_t)v4 < a1 + 68)
    {
      int v8 = (char *)v4;
      if (v6 < &v4->f32[a2]) {
        goto LABEL_18;
      }
    }
    unint64_t v9 = v7 + 1;
    int v8 = &v4->i8[4 * (v9 & 0x7FFFFFFFFFFFFFF8)];
    float32x4_t v10 = vld1q_dup_f32(v6);
    int v11 = v4 + 1;
    uint64_t v12 = v9 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v11[-1] = v10;
      *int v11 = v10;
      v11 += 2;
      v12 -= 8;
    }
    while (v12);
    if (v9 != (v9 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_18:
      do
      {
        *(float *)int v8 = *v6;
        v8 += 4;
      }
      while (v8 != (char *)&v4->f32[a2]);
    }
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = a2;
  uint64x2_t result = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)a2)));
  *(uint64x2_t *)a1 = result;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

void sub_40959C(int *a1, unsigned int a2, int a3, uint64_t a4)
{
  unint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v7 = *v6;
  if (v7 < 0xB)
  {
    if (v7 < 7) {
      return;
    }
    goto LABEL_8;
  }
  if (!v6[5])
  {
    if (v7 >= 0xD)
    {
      BOOL v8 = v6[6] != 0;
      goto LABEL_9;
    }
LABEL_8:
    BOOL v8 = 0;
    goto LABEL_9;
  }
  BOOL v8 = 1;
LABEL_9:
  uint64_t v9 = v6[3];
  if (v6[3])
  {
    float32x4_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    if (*v10)
    {
      uint64_t v64 = *v10;
      uint64_t v62 = *(unsigned int *)((char *)a1 + v9);
      int v11 = *((unsigned __int16 *)v10 + 2);
      int v12 = *((unsigned __int16 *)v10 + 3);
      unsigned int v13 = sub_511FC(a2);
      unsigned int v14 = a2 & ~(-1 << (v13 & 0xFE));
      int v15 = sub_51938(v14);
      int v16 = sub_51938(v14 >> 1);
      int v21 = 1 << -(char)(v13 >> 1);
      if (v13 < 2) {
        int v21 = -2;
      }
      uint64_t v22 = (v21 * v15 + 4 * v11);
      LODWORD(v23) = v21 * v16 + 4 * v12;
      if (v23 >= 0xFFFFFFFE) {
        uint64_t v23 = 4294967294;
      }
      else {
        uint64_t v23 = v23;
      }
      uint64_t v67 = v22 | (v23 << 32);
      int v68 = 0x7FFFFFFF;
      if (v8)
      {
        long double v24 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v24 >= 0xDu && v24[6])
        {
          int v25 = *(int *)((char *)a1 + v24[6] + *(unsigned int *)((char *)a1 + v24[6]) + 4);
        }
        else
        {
          int v41 = *(unsigned __int16 *)((char *)a1 + v24[5] + *(unsigned int *)((char *)a1 + v24[5]) + 4);
          if (v41 == 0xFFFF)
          {
LABEL_37:
            sub_40999C(a4, &v67, v17, v18, v19, v20);
            if (v64 == 1) {
              return;
            }
            uint64_t v43 = 0;
            uint64_t v65 = v64 - 1;
            for (uint64_t i = v9 + v62 + 10; ; i += 4)
            {
              int v46 = *(unsigned __int16 *)((char *)a1 + i - 2);
              if (*(unsigned __int16 *)((char *)a1 + i - 6) == v46)
              {
                int v46 = *(unsigned __int16 *)((char *)a1 + i - 6);
                if (*(unsigned __int16 *)((char *)a1 + i - 4) == *(unsigned __int16 *)((char *)a1 + i)) {
                  goto LABEL_44;
                }
              }
              int v47 = *(unsigned __int16 *)((char *)a1 + i);
              unsigned int v48 = sub_511FC(a2);
              unsigned int v49 = a2 & ~(-1 << (v48 & 0xFE));
              int v50 = sub_51938(v49);
              int v51 = sub_51938(v49 >> 1);
              int v56 = 1 << -(char)(v48 >> 1);
              if (v48 < 2) {
                int v56 = -2;
              }
              uint64_t v57 = (v56 * v50 + 4 * v46);
              LODWORD(v58) = v56 * v51 + 4 * v47;
              if (v58 >= 0xFFFFFFFE) {
                uint64_t v58 = 4294967294;
              }
              else {
                uint64_t v58 = v58;
              }
              uint64_t v67 = v57 | (v58 << 32);
              int v68 = 0x7FFFFFFF;
              long long v59 = (unsigned __int16 *)((char *)a1 - *a1);
              if (*v59 >= 0xDu && v59[6])
              {
                int v45 = *(int *)((char *)&a1[v43 + 2] + v59[6] + *(unsigned int *)((char *)a1 + v59[6]));
              }
              else
              {
                int v60 = *(unsigned __int16 *)((char *)a1 + 2 * v43 + v59[5] + *(unsigned int *)((char *)a1 + v59[5]) + 6);
                if (v60 == 0xFFFF) {
                  goto LABEL_43;
                }
                uint64_t v61 = v59[4];
                if (v61) {
                  LODWORD(v61) = *(int *)((char *)a1 + v61);
                }
                int v45 = v60 + a3 + v61;
              }
              int v68 = v45;
LABEL_43:
              sub_40999C(a4, &v67, v52, v53, v54, v55);
LABEL_44:
              if (v65 == ++v43) {
                return;
              }
            }
          }
          uint64_t v42 = v24[4];
          if (v42) {
            LODWORD(v42) = *(int *)((char *)a1 + v42);
          }
          int v25 = v41 + a3 + v42;
        }
        int v68 = v25;
        goto LABEL_37;
      }
      sub_40999C(a4, &v67, v17, v18, v19, v20);
      if (v64 != 1)
      {
        uint64_t v26 = v64 - 1;
        long long v27 = (unsigned __int16 *)((char *)a1 + v62 + v9 + 10);
        do
        {
          int v40 = *(v27 - 1);
          if (*(v27 - 3) != v40 || (int v40 = *(v27 - 3), *(v27 - 2) != *v27))
          {
            int v28 = *v27;
            unsigned int v29 = sub_511FC(a2);
            unsigned int v30 = a2 & ~(-1 << (v29 & 0xFE));
            int v31 = sub_51938(v30);
            int v32 = sub_51938(v30 >> 1);
            int v37 = 1 << -(char)(v29 >> 1);
            if (v29 < 2) {
              int v37 = -2;
            }
            uint64_t v38 = (v37 * v31 + 4 * v40);
            LODWORD(v39) = v37 * v32 + 4 * v28;
            if (v39 >= 0xFFFFFFFE) {
              uint64_t v39 = 4294967294;
            }
            else {
              uint64_t v39 = v39;
            }
            uint64_t v67 = v38 | (v39 << 32);
            int v68 = 0x7FFFFFFF;
            sub_40999C(a4, &v67, v33, v34, v35, v36);
          }
          v27 += 2;
          --v26;
        }
        while (v26);
      }
    }
  }
}

void sub_40999C(uint64_t a1, uint64_t *a2, double a3, double a4, double a5, double a6)
{
  unsigned int v7 = *(unsigned int **)a1;
  unsigned int v8 = **(_DWORD **)a1;
  unsigned int v9 = *(_DWORD *)(*(void *)a1 + 4);
  BOOL v10 = v8 == -1 && v9 == -1;
  if (v10)
  {
    uint64_t v27 = *a2;
    v7[2] = *((_DWORD *)a2 + 2);
    *(void *)unsigned int v7 = v27;
    return;
  }
  int v12 = *(unsigned int **)(a1 + 8);
  double v13 = (double)v8;
  double v14 = (double)v9;
  LODWORD(a3) = *(_DWORD *)a2;
  LODWORD(a6) = *((_DWORD *)a2 + 1);
  double v15 = (double)*(unint64_t *)&a6;
  double v16 = (double)*(unint64_t *)&a3 - (double)v8;
  double v17 = v15 - (double)v9;
  double v18 = v16 * v16 + v17 * v17;
  double v19 = fabs(v18);
  unsigned int v21 = *v12;
  unsigned int v20 = v12[1];
  if (v18 == 0.0 || v19 < 2.22044605e-16)
  {
    double v23 = (double)v20;
    double v58 = (double)v21;
  }
  else
  {
    double v23 = (double)v20;
    double v28 = (v16 * ((double)v21 - v13) + v17 * ((double)v20 - v14)) / v18;
    double v58 = (double)v21;
    if (v28 <= 0.0)
    {
      uint64_t v24 = *(void *)v7;
      uint64_t v25 = HIDWORD(*(void *)v7);
      unsigned int v26 = v7[2];
      goto LABEL_35;
    }
    if (v28 < 1.0)
    {
      int v29 = v7[2];
      if (v29 == 0x7FFFFFFF)
      {
        BOOL v30 = 0;
        double v31 = 0.0;
      }
      else
      {
        double v32 = (double)v29;
        int v33 = *((_DWORD *)a2 + 2);
        BOOL v10 = v33 == 0x7FFFFFFF;
        double v31 = v28 * ((double)v33 - v32) + v32;
        BOOL v30 = v33 != 0x7FFFFFFF;
        if (v10) {
          double v31 = 0.0;
        }
      }
      double v34 = v17 * v28;
      double v35 = v16 * v28 + v13;
      if (v35 < 0.0) {
        double v36 = -0.5;
      }
      else {
        double v36 = 0.5;
      }
      LODWORD(v24) = (v35 + v36);
      double v37 = v34 + v14;
      if (v37 < 0.0) {
        double v38 = -0.5;
      }
      else {
        double v38 = 0.5;
      }
      unsigned int v39 = (v37 + v38);
      if (v31 < 0.0) {
        double v40 = -0.5;
      }
      else {
        double v40 = 0.5;
      }
      if (v30) {
        unsigned int v26 = (v31 + v40);
      }
      else {
        unsigned int v26 = 0x7FFFFFFF;
      }
      if (v39 >= 0xFFFFFFFE) {
        LODWORD(v25) = -2;
      }
      else {
        LODWORD(v25) = v39;
      }
      goto LABEL_35;
    }
  }
  uint64_t v24 = *a2;
  uint64_t v25 = HIDWORD(*a2);
  unsigned int v26 = *((_DWORD *)a2 + 2);
LABEL_35:
  long double v41 = exp(3.14159265 - v23 * 6.28318531 / 4294967300.0);
  long double v42 = atan((v41 - 1.0 / v41) * 0.5) * 57.2957795 * 0.0174532925;
  long double v43 = exp(3.14159265 - (double)v25 * 6.28318531 / 4294967300.0);
  long double v44 = atan((v43 - 1.0 / v43) * 0.5);
  v45.f64[0] = v58;
  v45.f64[1] = (double)v24;
  long double v46 = v44 * 57.2957795 * 0.0174532925;
  float64x2_t v47 = vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(v45, (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  double v59 = vsubq_f64(v47, (float64x2_t)vdupq_laneq_s64((int64x2_t)v47, 1)).f64[0];
  long double v48 = sin((v42 - v46) * 0.5);
  long double v49 = v48 * v48;
  double v50 = cos(v42);
  long double v51 = v50 * cos(v46);
  long double v52 = sin(0.5 * v59);
  long double v53 = atan2(sqrt(v49 + v51 * (v52 * v52)), sqrt(1.0 - (v49 + v51 * (v52 * v52))));
  double v54 = (v53 + v53) * 6372797.56;
  double v55 = *(double **)(a1 + 16);
  if (v54 < *v55)
  {
    *double v55 = v54;
    uint64_t v56 = *(void *)(a1 + 24);
    *(void *)uint64_t v56 = v24 | ((unint64_t)v25 << 32);
    *(_DWORD *)(v56 + 8) = v26;
    **(void **)(a1 + 32) = **(void **)(a1 + 40);
    unsigned int v7 = *(unsigned int **)a1;
  }
  uint64_t v57 = *a2;
  v7[2] = *((_DWORD *)a2 + 2);
  *(void *)unsigned int v7 = v57;
  ++**(void **)(a1 + 40);
}

void sub_409D0C(uint64_t a1, void *a2)
{
  unint64_t v5 = *(char **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    unsigned int v8 = *(char **)a1;
    uint64_t v9 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v10 = v9 >> 3;
    unint64_t v11 = (v9 >> 3) + 1;
    if (v11 >> 61) {
      sub_2E00();
    }
    uint64_t v12 = v4 - (void)v8;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 61) {
        sub_188D718();
      }
      double v14 = operator new(8 * v13);
    }
    else
    {
      double v14 = 0;
    }
    double v15 = &v14[8 * v10];
    void *v15 = *a2;
    unsigned int v7 = (double *)(v15 + 1);
    if (v5 != v8)
    {
      unint64_t v16 = v5 - v8 - 8;
      if (v16 < 0x58) {
        goto LABEL_32;
      }
      if ((unint64_t)(v5 - v14 - v9) < 0x20) {
        goto LABEL_32;
      }
      uint64_t v17 = (v16 >> 3) + 1;
      uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v6 = &v5[-v18];
      double v15 = (void *)((char *)v15 - v18);
      double v19 = &v14[8 * v10 - 16];
      unsigned int v20 = v5 - 16;
      uint64_t v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        *double v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 4;
      }
      while (v21);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_32:
        do
        {
          uint64_t v23 = *((void *)v6 - 1);
          v6 -= 8;
          *--double v15 = v23;
        }
        while (v6 != v8);
      }
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v14[8 * v13];
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(void *)unint64_t v5 = *a2;
    unsigned int v7 = (double *)(v5 + 8);
  }
  *(void *)(a1 + 8) = v7;
  uint64_t v24 = *(char **)a1;
  uint64_t v25 = (uint64_t)v7 - *(void *)a1;
  if (v25 >= 9)
  {
    unint64_t v26 = (((unint64_t)v25 >> 3) - 2) >> 1;
    uint64_t v27 = (double *)&v24[8 * v26];
    double v29 = *(v7 - 1);
    double v28 = v7 - 1;
    double v30 = v29;
    double v31 = *v27;
    if (*v27 < v29)
    {
      do
      {
        *double v28 = v31;
        double v28 = v27;
        if (!v26) {
          break;
        }
        unint64_t v26 = (v26 - 1) >> 1;
        uint64_t v27 = (double *)&v24[8 * v26];
        double v31 = *v27;
      }
      while (*v27 < v30);
      *double v28 = v30;
    }
  }
}

uint64_t sub_409EC8(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = *(void **)a1;
  unint64_t v6 = *(unsigned char **)(*(void *)a1 + 8);
  unint64_t v5 = *(void *)(*(void *)a1 + 16);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v9 = (unsigned char *)*v4;
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*v4] >> 2);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0x1555555555555555) {
      sub_2E00();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)v9) >> 2);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v13 = 0x1555555555555555;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 > 0x1555555555555555) {
        sub_188D718();
      }
      double v14 = (char *)operator new(12 * v13);
    }
    else
    {
      double v14 = 0;
    }
    double v15 = &v14[12 * v10];
    *(void *)double v15 = *a2;
    *((_DWORD *)v15 + 2) = *((_DWORD *)a2 + 2);
    unsigned int v8 = v15 + 12;
    if (v6 != v9)
    {
      do
      {
        uint64_t v16 = *(void *)(v6 - 12);
        v6 -= 12;
        char v17 = v6[8];
        *(void *)(v15 - 12) = v16;
        v15 -= 12;
        v15[8] = v17;
      }
      while (v6 != v9);
      unint64_t v6 = (unsigned char *)*v4;
    }
    void *v4 = v15;
    v4[1] = v8;
    v4[2] = &v14[12 * v13];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    uint64_t v7 = *a2;
    *((_DWORD *)v6 + 2) = *((_DWORD *)a2 + 2);
    *(void *)unint64_t v6 = v7;
    unsigned int v8 = v6 + 12;
  }
  v4[1] = v8;
  return a1;
}

void sub_40A00C()
{
  unk_25583D7 = 16641;
  word_25583C0 = 65;
  byte_25583EF = 1;
  byte_25583D9 = 0;
}

void *sub_40A034(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  a1[1] = 0x8000000080000000;
  a1[2] = 0x7FFFFFFF7FFFFFFFLL;
  v14[23] = 9;
  uint64_t v13 = 0;
  strcpy(v14, "EVRouting");
  long long __p = 0;
  unint64_t v12 = 0;
  unint64_t v4 = sub_374CDC(a3, (uint64_t)v14, (uint64_t *)&__p);
  unint64_t v5 = (void **)__p;
  if (__p)
  {
    unint64_t v6 = v12;
    uint64_t v7 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      uint64_t v7 = __p;
    }
    unint64_t v12 = v5;
    operator delete(v7);
  }
  if ((v14[23] & 0x80000000) != 0) {
    operator delete(*(void **)v14);
  }
  *(void *)double v14 = operator new(0x28uLL);
  *(_OWORD *)&v14[8] = xmmword_20B9260;
  strcpy(*(char **)v14, "stale_ev_info_mode_exit_limit_min");
  int v8 = sub_5D2EC(v4, v14);
  if ((v14[23] & 0x80000000) != 0) {
    operator delete(*(void **)v14);
  }
  if (v8 <= 0) {
    int v9 = 0x7FFFFFFF;
  }
  else {
    int v9 = v8;
  }
  *((_DWORD *)a1 + 2) = v9;
  return a1;
}

void sub_40A170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_40A1A0(uint64_t *a1)
{
  unint64_t v2 = (uint64_t *)((char *)a1 + 12);
  BOOL v3 = sub_40A45C((int *)a1 + 3);
  if (v3) {
    sub_475128(*a1, v2);
  }
  return v3;
}

BOOL sub_40A1EC(void *a1)
{
  if (*((_DWORD *)a1 + 2) == 0x7FFFFFFF) {
    return 0;
  }
  BOOL result = sub_401FE4(*a1);
  if (result)
  {
    BOOL result = sub_DAFBE4(*a1);
    if (result)
    {
      if ((int)sub_46CABC(*a1) <= *((_DWORD *)a1 + 2))
      {
        return 0;
      }
      else
      {
        uint64_t v3 = nullsub_1(*a1);
        int v4 = *(_DWORD *)(v3 + 8);
        *(void *)((char *)a1 + 12) = *(void *)v3;
        *((_DWORD *)a1 + 5) = v4;
        uint64_t v5 = *a1;
        int v6 = 0x7FFFFFFF;
        uint64_t v7 = 0x7FFFFFFF7FFFFFFFLL;
        sub_475128(v5, (uint64_t *)&v6);
        return 1;
      }
    }
  }
  return result;
}

void sub_40A2B0()
{
  unk_2558407 = 16641;
  word_25583F0 = 65;
  byte_255841F = 1;
  byte_2558409 = 0;
}

_DWORD *sub_40A2D8(_DWORD *result, int a2, int a3, int a4)
{
  *BOOL result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

uint64_t sub_40A2E4(uint64_t result, int a2, void *a3)
{
  *(_DWORD *)BOOL result = a2;
  *(void *)(result + 4) = *a3;
  return result;
}

unint64_t sub_40A2F4(unsigned int *a1)
{
  return *a1 | ((unint64_t)*a1 << 32);
}

unint64_t sub_40A300(unsigned int *a1)
{
  return a1[1] | ((unint64_t)*a1 << 32);
}

uint64_t sub_40A30C(void *a1)
{
  *(void *)&v2[4] = *a1;
  return *(void *)v2;
}

uint64_t sub_40A328(_DWORD *a1, double a2)
{
  double v2 = (double)(a1[1] - *a1) * a2;
  if (v2 >= 0.0)
  {
    if (v2 < 4.50359963e15)
    {
      uint64_t v3 = (uint64_t)(v2 + v2) + 1;
LABEL_8:
      double v2 = (double)(v3 >> 1);
    }
  }
  else if (v2 > -4.50359963e15)
  {
    uint64_t v3 = (uint64_t)(v2 + v2);
    if (v3 >= 1) {
      --v3;
    }
    goto LABEL_8;
  }
  LODWORD(v5) = *a1 + (int)v2;
  *(void *)((char *)&v5 + 4) = *(void *)a1;
  return v5;
}

uint64_t sub_40A3AC(unsigned int a1, _DWORD *a2)
{
  double v2 = (double)a1 / 100.0 * (double)(a2[1] - *a2);
  if (v2 >= 0.0)
  {
    if (v2 < 4.50359963e15)
    {
      uint64_t v3 = (uint64_t)(v2 + v2) + 1;
LABEL_8:
      double v2 = (double)(v3 >> 1);
    }
  }
  else if (v2 > -4.50359963e15)
  {
    uint64_t v3 = (uint64_t)(v2 + v2);
    if (v3 >= 1) {
      --v3;
    }
    goto LABEL_8;
  }
  LODWORD(v5) = *a2 + (int)v2;
  *(void *)((char *)&v5 + 4) = *(void *)a2;
  return v5;
}

uint64_t sub_40A440(_DWORD *a1)
{
  return (*a1 - a1[1]);
}

uint64_t sub_40A44C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_40A454(uint64_t a1)
{
  return *(void *)(a1 + 4);
}

BOOL sub_40A45C(int *a1)
{
  int v1 = *a1;
  if (*a1 == 0x7FFFFFFF) {
    return 0;
  }
  int v3 = a1[1];
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  int v4 = a1[2];
  return v4 != 0x7FFFFFFF && v3 <= v4 && v3 >= 0 && v3 <= v1 && v1 <= v4;
}

BOOL sub_40A4AC(int *a1)
{
  int v1 = *a1;
  if (*a1 == 0x7FFFFFFF) {
    return 1;
  }
  int v3 = a1[1];
  if (v3 == 0x7FFFFFFF) {
    return 1;
  }
  int v4 = a1[2];
  return v4 == 0x7FFFFFFF || v3 > v4 || v3 < 0 || v3 > v1 || v1 > v4;
}

unsigned int sub_40A4FC(_DWORD *a1)
{
  return vcvtad_u64_f64((double)(*a1 - a1[1]) / (double)(a1[2] - a1[1]) * 100.0);
}

BOOL sub_40A52C(_DWORD *a1, _DWORD *a2)
{
  return *a1 < *a2;
}

BOOL sub_40A540(_DWORD *a1, _DWORD *a2)
{
  return *a1 > *a2;
}

BOOL sub_40A554(_DWORD *a1, _DWORD *a2)
{
  return a1[1] == a2[1] && a1[2] == a2[2] && *a1 == *a2;
}

BOOL sub_40A590(_DWORD *a1, _DWORD *a2)
{
  return a1[1] != a2[1] || a1[2] != a2[2] || *a1 != *a2;
}

uint64_t sub_40A5CC(uint64_t a1, _DWORD *a2)
{
  int v2 = *a2 + *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 8) < v2) {
    int v2 = *(_DWORD *)(a1 + 8);
  }
  if (v2 >= *(_DWORD *)(a1 + 4))
  {
    LODWORD(v4) = v2;
    *(void *)((char *)&v4 + 4) = *(void *)(a1 + 4);
    return v4;
  }
  else
  {
    LODWORD(v5) = 0x7FFFFFFF;
    *(void *)((char *)&v5 + 4) = *(void *)(a1 + 4);
    return v5;
  }
}

_DWORD *sub_40A628(_DWORD *result, _DWORD *a2)
{
  int v2 = *a2 + *result;
  if (result[2] < v2) {
    int v2 = result[2];
  }
  if (v2 < result[1]) {
    int v2 = 0x7FFFFFFF;
  }
  LODWORD(v3) = v2;
  *(void *)((char *)&v3 + 4) = *(void *)(result + 1);
  *(void *)BOOL result = v3;
  result[2] = DWORD2(v3);
  return result;
}

uint64_t sub_40A674(uint64_t a1)
{
  return *(void *)a1;
}

unint64_t sub_40A680(int *a1, _DWORD *a2)
{
  return (*a2 + (*a1 & ~(*a1 >> 31))) | ((unint64_t)(a2[1] - (*a1 & ~(*a1 >> 31))) << 32);
}

uint64_t sub_40A6A0(unsigned int *a1, _DWORD *a2)
{
  if ((int)sub_40A44C((uint64_t)a1) > a2[1] - *a2) {
    return 0x7FFFFFFF7FFFFFFFLL;
  }
  uint64_t v5 = *a2 + sub_4F44(a1);
  uint64_t v6 = a2[1] - sub_53FA4((uint64_t)a1);
  sub_40AB24((uint64_t)a1);
  return v5 | (v6 << 32);
}

uint64_t sub_40A72C(int *a1, int *a2, _DWORD *a3)
{
  uint64_t v3 = *(void *)a3;
  int v4 = a3[2];
  if (a1 == a2) {
    return *(void *)a3;
  }
  while (1)
  {
    uint64_t v8 = 0x7FFFFFFF7FFFFFFFLL;
    if (v4 == 0x7FFFFFFF) {
      break;
    }
    if (v3 == 0x7FFFFFFF) {
      break;
    }
    if (v4 > (int)v3) {
      break;
    }
    if (HIDWORD(v3) == 0x7FFFFFFF) {
      break;
    }
    int v9 = a1[2];
    if (v9 == 0x7FFFFFFF) {
      break;
    }
    int v10 = *a1;
    if (*a1 == 0x7FFFFFFF) {
      break;
    }
    if (v9 > v10) {
      break;
    }
    int v11 = a1[1];
    if (v11 == 0x7FFFFFFF) {
      break;
    }
    if (v10 <= SHIDWORD(v3))
    {
      LODWORD(v5) = v10 + v4;
      if ((int)v3 <= v10 + v4) {
        uint64_t v5 = v5;
      }
      else {
        uint64_t v5 = v3;
      }
      LODWORD(v6) = HIDWORD(v3) - v9;
      if (HIDWORD(v3) - v9 >= v11) {
        uint64_t v6 = v11;
      }
      else {
        uint64_t v6 = v6;
      }
      v4 += v9;
      int v7 = v3 - v11;
      if (v4 <= v7) {
        int v4 = v7;
      }
      uint64_t v3 = v5 | (v6 << 32);
      a1 += 3;
      uint64_t v8 = v3;
      if (a1 == a2) {
        return v8;
      }
    }
    else
    {
      uint64_t v3 = 0x7FFFFFFF7FFFFFFFLL;
      int v4 = 0x7FFFFFFF;
      a1 += 3;
      uint64_t v8 = 0x7FFFFFFF7FFFFFFFLL;
      if (a1 == a2) {
        return v8;
      }
    }
  }
  return v8;
}

BOOL sub_40A820(_DWORD *a1)
{
  int v1 = a1[2];
  if (v1 == 0x7FFFFFFF) {
    return 0;
  }
  if (*a1 == 0x7FFFFFFF) {
    return 0;
  }
  return v1 <= *a1 && a1[1] != 0x7FFFFFFF;
}

unsigned int *sub_40A864(unsigned int *result, _DWORD *a2)
{
  int v2 = result[1];
  if (v2 >= *a2)
  {
    unsigned int v3 = result[2];
    LODWORD(v4) = v3 + *a2;
    unsigned int v5 = *result;
    if ((int)*result <= (int)v4) {
      uint64_t v4 = v4;
    }
    else {
      uint64_t v4 = v5;
    }
    unsigned int v7 = a2[1];
    int v6 = a2[2];
    unsigned int v8 = v2 - v6;
    if ((int)v8 >= (int)v7) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = v8;
    }
    unsigned int v10 = v6 + v3;
    if ((int)(v6 + v3) <= (int)(v5 - v7)) {
      unsigned int v10 = v5 - v7;
    }
    *(void *)BOOL result = v4 | (v9 << 32);
    result[2] = v10;
  }
  else
  {
    *(void *)BOOL result = 0x7FFFFFFF7FFFFFFFLL;
    result[2] = 0x7FFFFFFF;
  }
  return result;
}

uint64_t sub_40A8CC(int *a1, int a2)
{
  int v2 = a1[2];
  if (v2 == 0x7FFFFFFF) {
    return 0x7FFFFFFFLL;
  }
  int v3 = *a1;
  if (*a1 == 0x7FFFFFFF) {
    return 0x7FFFFFFFLL;
  }
  unsigned int v4 = a1[1];
  BOOL v5 = v2 > v3 || v4 == 0x7FFFFFFF;
  if (v5 || v3 > a2) {
    return 0x7FFFFFFFLL;
  }
  unsigned int v8 = a2 - v2;
  if ((int)v8 >= (int)v4) {
    return v4;
  }
  else {
    return v8;
  }
}

uint64_t sub_40A918(int *a1, unsigned int *a2)
{
  int v4 = sub_4F44(a2);
  int v5 = a1[2];
  if (v5 == 0x7FFFFFFF
    || (int v6 = *a1, *a1 == 0x7FFFFFFF)
    || ((int v7 = a1[1], v5 <= v6) ? (v8 = v7 == 0x7FFFFFFF) : (v8 = 1), !v8 ? (v9 = v6 <= v4) : (v9 = 0), !v9))
  {
    uint64_t v13 = sub_40A454((uint64_t)a2);
    return sub_40A30C(&v13);
  }
  else
  {
    int v11 = v4 - v5;
    if (v11 >= v7) {
      int v12 = a1[1];
    }
    else {
      int v12 = v11;
    }
    uint64_t v14 = sub_40A454((uint64_t)a2);
    sub_40A2E4((uint64_t)&v15, v12, &v14);
    return v15;
  }
}

uint64_t sub_40A9DC(int *a1, int a2)
{
  int v3 = a1[2];
  uint64_t result = 0x7FFFFFFFLL;
  if (v3 != 0x7FFFFFFF)
  {
    int v5 = *a1;
    if (*a1 != 0x7FFFFFFF)
    {
      int v6 = a1[1];
      if (v5 - v3 <= a2) {
        unsigned int v7 = v3 + a2;
      }
      else {
        unsigned int v7 = 0x7FFFFFFF;
      }
      if (v5 < v3 || v6 == 0x7FFFFFFF || v6 < a2) {
        return 0x7FFFFFFFLL;
      }
      else {
        return v7;
      }
    }
  }
  return result;
}

uint64_t sub_40AA28(int *a1, unsigned int *a2)
{
  if ((int)sub_4F44(a2) < *a1) {
    return 0x7FFFFFFFLL;
  }
  int v5 = sub_4F44(a2);
  int v6 = *a1;
  int v7 = a1[1];
  unsigned int v8 = v5 - v6;
  unsigned int v9 = v7 - sub_53FA4((uint64_t)a2);
  if ((int)v9 >= (int)v8) {
    return v8;
  }
  else {
    return v9;
  }
}

uint64_t sub_40AAA0(int *a1, signed int *a2)
{
  signed int v2 = a1[1];
  if (v2 < *a2) {
    return 0x7FFFFFFF7FFFFFFFLL;
  }
  LODWORD(v4) = a1[2] + *a2;
  if (*a1 <= (int)v4) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = *a1;
  }
  int v5 = a2[1];
  LODWORD(v6) = v2 - a2[2];
  if ((int)v6 >= v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = v6;
  }
  return v4 | (v6 << 32);
}

__n128 sub_40AAF8(__n128 *a1)
{
  result.n128_u64[0] = 0x8000000080000000;
  result.n128_u64[1] = 0x8000000080000000;
  *a1 = result;
  return result;
}

uint64_t sub_40AB04(int *a1)
{
  uint64_t v1 = *a1 & ~(*a1 >> 31);
  return v1 | (v1 << 32);
}

uint64_t sub_40AB18()
{
  return 0;
}

uint64_t sub_40AB24(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

unsigned int *sub_40AB2C(unsigned int *result, _DWORD *a2)
{
  LODWORD(v2) = a2[1];
  int v4 = result[2];
  unsigned int v3 = result[3];
  LODWORD(v5) = *a2 + v3;
  unsigned int v6 = result[1];
  if ((int)*result <= (int)v5) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = *result;
  }
  int v7 = a2[3];
  if ((int)(v7 + v6) <= (int)v2) {
    uint64_t v2 = v2;
  }
  else {
    uint64_t v2 = v7 + v6;
  }
  if (v4 <= a2[2]) {
    int v4 = a2[2];
  }
  LODWORD(v8) = v6 + *a2;
  if (v4 <= (int)v8) {
    uint64_t v8 = v8;
  }
  else {
    uint64_t v8 = v4;
  }
  *(void *)__n128 result = v5 | (v2 << 32);
  *((void *)result + 1) = v8 | ((unint64_t)(v7 + v3) << 32);
  return result;
}

BOOL sub_40AB7C(unsigned int *a1)
{
  unsigned int v1 = *a1;
  if (*a1 == 0x7FFFFFFF) {
    return 0;
  }
  unsigned int v3 = a1[1];
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  unsigned int v4 = a1[2];
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  return ((v3 | v1 | v4) & 0x80000000) == 0 && a1[3] != 0x7FFFFFFF && v1 <= v4 && v3 <= v4;
}

__n128 sub_40ABE4(uint64_t a1, uint64_t a2, __n128 *a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 61) = *(_OWORD *)(a2 + 61);
  *(_OWORD *)(a1 + 48) = v3;
  __n128 result = *a3;
  *(__n128 *)(a1 + 80) = *a3;
  return result;
}

uint64_t sub_40AC40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a4;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a2;
  *(void *)(a1 + 32) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  char v32 = 9;
  uint64_t v30 = 0;
  strcpy((char *)v31, "EVRouting");
  double v28 = 0;
  double v29 = 0;
  int v7 = sub_374CDC(a4, (uint64_t)v31, (uint64_t *)&v28);
  long long __p = operator new(0x20uLL);
  long long v27 = xmmword_20B8890;
  strcpy((char *)__p, "charging_power_scaling_factor");
  double v8 = sub_5C7E8(v7, (uint64_t)&__p);
  if (SHIBYTE(v27) < 0) {
    operator delete(__p);
  }
  unsigned int v9 = (void **)v28;
  if (v28)
  {
    unsigned int v10 = v29;
    int v11 = v28;
    if (v29 != v28)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      int v11 = v28;
    }
    double v29 = v9;
    operator delete(v11);
  }
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  *(double *)(a1 + 40) = v8;
  char v32 = 9;
  uint64_t v30 = 0;
  strcpy((char *)v31, "EVRouting");
  double v28 = 0;
  double v29 = 0;
  int v12 = sub_374CDC(a4, (uint64_t)v31, (uint64_t *)&v28);
  long long __p = operator new(0x28uLL);
  long long v27 = xmmword_20B93A0;
  strcpy((char *)__p, "max_approximate_charging_curve_size");
  int v13 = sub_31AC04(v12, (uint64_t)&__p);
  if (SHIBYTE(v27) < 0) {
    operator delete(__p);
  }
  uint64_t v14 = (void **)v28;
  if (v28)
  {
    uint64_t v15 = v29;
    uint64_t v16 = v28;
    if (v29 != v28)
    {
      do
      {
        if (*((char *)v15 - 1) < 0) {
          operator delete(*(v15 - 3));
        }
        v15 -= 3;
      }
      while (v15 != v14);
      uint64_t v16 = v28;
    }
    double v29 = v14;
    operator delete(v16);
  }
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  uint64_t v17 = *(void *)(a3 + 304);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 48) = v13;
  *(void *)(a1 + 56) = v17;
  *(_WORD *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 114) = 0;
  *(_DWORD *)(a1 + 116) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 104) = 0x3E4CCCCD3F000000;
  *(unsigned char *)(a1 + 120) = 0;
  *(void *)(a1 + 124) = 0x8000000080000000;
  *(_DWORD *)(a1 + 132) = 0x7FFFFFFF;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 32;
  *(_OWORD *)(a1 + 160) = xmmword_20E12E0;
  sub_3F8850((void *)(a1 + 176));
  *(void *)(a1 + 200) = 0;
  *(uint64x2_t *)(a1 + 88) = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 104), (float)*(unint64_t *)(a1 + 152))));
  *(unsigned char *)(a1 + 112) = 0;
  memset_pattern16((void *)(a1 + 208), &unk_20B8FB0, 0x2CuLL);
  *(unsigned char *)(a1 + 252) = 0;
  *(void *)(a1 + 256) = 0x8000000080000000;
  *(_DWORD *)(a1 + 264) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 268) = 0;
  *(void *)(a1 + 272) = 0x8000000080000000;
  *(_DWORD *)(a1 + 280) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 284) = 0;
  *(void *)(a1 + 288) = 0x8000000080000000;
  *(_DWORD *)(a1 + 296) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 300) = 0;
  *(void *)(a1 + 304) = 0x8000000080000000;
  *(_DWORD *)(a1 + 312) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 316) = 0;
  *(void *)(a1 + 320) = 0x8000000080000000;
  *(_DWORD *)(a1 + 328) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 332) = 0;
  *(void *)(a1 + 336) = 0x8000000080000000;
  *(_DWORD *)(a1 + 344) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 348) = 0;
  *(void *)(a1 + 352) = 0x8000000080000000;
  *(_DWORD *)(a1 + 360) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 364) = 0;
  *(void *)(a1 + 368) = 0x8000000080000000;
  *(_DWORD *)(a1 + 376) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 380) = 0;
  *(void *)(a1 + 384) = 0x8000000080000000;
  *(_DWORD *)(a1 + 392) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 396) = 0;
  *(void *)(a1 + 400) = 0x8000000080000000;
  *(_DWORD *)(a1 + 408) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 412) = 0;
  *(void *)(a1 + 416) = 0x8000000080000000;
  *(_DWORD *)(a1 + 424) = 0x7FFFFFFF;
  *(_OWORD *)double v31 = xmmword_20E12E0;
  sub_40B0E4((void *)(a1 + 88), (long long *)v31);
  unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 5);
  double v19 = *(unsigned char **)(a1 + 64);
  if (v18 > (uint64_t)(*(void *)(a1 + 80) - (void)v19) >> 4)
  {
    if (v18 >> 60) {
      sub_2E00();
    }
    unsigned int v20 = *(unsigned char **)(a1 + 72);
    uint64_t v21 = (char *)operator new(0xAAAAAAAAAAAAAAB0 * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 5));
    long long v22 = &v21[(v20 - v19) & 0xFFFFFFFFFFFFFFF0];
    uint64_t v23 = v22;
    if (v20 != v19)
    {
      uint64_t v24 = &v21[(v20 - v19) & 0xFFFFFFFFFFFFFFF0];
      do
      {
        uint64_t v23 = v24 - 16;
        *((_OWORD *)v24 - 1) = *((_OWORD *)v20 - 1);
        v20 -= 16;
        v24 -= 16;
      }
      while (v20 != v19);
    }
    *(void *)(a1 + 64) = v23;
    *(void *)(a1 + 72) = v22;
    *(void *)(a1 + 80) = &v21[16 * v18];
    if (v19) {
      operator delete(v19);
    }
  }
  sub_40B19C(a1);
  return a1;
}

void sub_40B068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  sub_40B2D4(v28);
  uint64_t v30 = *v27;
  if (*v27)
  {
    *(void *)(v26 + 72) = v30;
    operator delete(v30);
  }
  sub_40B358(v25);
  _Unwind_Resume(a1);
}

void sub_40B0E4(void *a1, long long *a2)
{
  sub_3F8850(v4);
  long long v6 = *a2;
  *(_OWORD *)long long __p = *(_OWORD *)v4;
  uint64_t v8 = v5;
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v5 = 0;
  sub_40CBC8(a1, (uint64_t)&v6);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v4[0])
  {
    v4[1] = v4[0];
    operator delete(v4[0]);
  }
}

void sub_40B160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v17 = a9;
    if (!a9) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v17 = a9;
    if (!a9) {
      goto LABEL_3;
    }
  }
  operator delete(v17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_40B19C(uint64_t a1)
{
  uint64_t v2 = nullsub_1(*(void *)(a1 + 8));
  uint64_t v3 = sub_40A454(v2);
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  uint64_t v4 = a1 + 208;
  *(_OWORD *)(a1 + 236) = 0u;
  uint64_t result = sub_37D0C0(*(void *)(a1 + 8));
  long long v6 = *(unsigned __int8 **)result;
  int v7 = *(unsigned __int8 **)(result + 8);
  if (*(unsigned __int8 **)result != v7)
  {
    do
    {
      int v8 = *(_DWORD *)(v4 + 4 * *v6);
      if (v8 <= *((_DWORD *)v6 + 1)) {
        int v8 = *((_DWORD *)v6 + 1);
      }
      *(_DWORD *)(v4 + 4 * *v6) = v8;
      v6 += 12;
    }
    while (v6 != v7);
  }
  uint64_t v9 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v9 / 96;
    do
    {
      while (1)
      {
        uint64_t v13 = *(void *)(a1 + 16) + v10;
        if (*(void *)(v13 + 24) == *(void *)(v13 + 32)) {
          break;
        }
        *(void *)&long long v14 = sub_40BD04(a1, v13, v3, SHIDWORD(v3));
        *((void *)&v14 + 1) = v12;
        uint64_t result = (uint64_t)sub_3BFF8((char **)(a1 + 64), &v14);
        v10 += 96;
        if (!--v11) {
          return result;
        }
      }
      long long v14 = xmmword_20E12E0;
      uint64_t result = (uint64_t)sub_3BFF8((char **)(a1 + 64), &v14);
      v10 += 96;
      --v11;
    }
    while (v11);
  }
  return result;
}

void *sub_40B2D4(void *a1)
{
  uint64_t v2 = (void *)a1[14];
  if (v2)
  {
    uint64_t v3 = a1[8];
    if (v3)
    {
      uint64_t v4 = 0;
      do
      {
        uint64_t v5 = a1[14] + v4;
        long long v6 = *(void **)(v5 + 16);
        if (v6)
        {
          *(void *)(v5 + 24) = v6;
          operator delete(v6);
        }
        v4 += 40;
        --v3;
      }
      while (v3);
      uint64_t v2 = (void *)a1[14];
    }
    free(v2);
  }
  int v7 = (void *)a1[11];
  if (v7)
  {
    a1[12] = v7;
    operator delete(v7);
  }
  return a1;
}

void ***sub_40B358(void ***a1)
{
  if (*a1)
  {
    sub_40CAE4((uint64_t)a1, *a1);
    operator delete(*a1);
  }
  return a1;
}

uint64_t sub_40B398(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a4;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0;
  uint64_t v35 = a1 + 16;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  char v41 = 9;
  strcpy((char *)v40, "EVRouting");
  v38[0] = 0;
  v38[1] = 0;
  uint64_t v39 = 0;
  int v7 = sub_374CDC(a4, (uint64_t)v40, (uint64_t *)v38);
  long long __p = operator new(0x20uLL);
  long long v37 = xmmword_20B8890;
  strcpy((char *)__p, "charging_power_scaling_factor");
  double v8 = sub_5C7E8(v7, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  uint64_t v9 = (void **)v38[0];
  if (v38[0])
  {
    uint64_t v10 = (void **)v38[1];
    uint64_t v11 = v38[0];
    if (v38[1] != v38[0])
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      uint64_t v11 = v38[0];
    }
    v38[1] = v9;
    operator delete(v11);
  }
  if (v41 < 0) {
    operator delete(v40[0]);
  }
  uint64_t v12 = *(void *)(a3 + 304);
  *(_OWORD *)(a1 + 64) = 0u;
  *(double *)(a1 + 40) = v8;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = v12;
  *(_WORD *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 114) = 0;
  *(_DWORD *)(a1 + 116) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 104) = 0x3E4CCCCD3F000000;
  *(unsigned char *)(a1 + 120) = 0;
  *(void *)(a1 + 124) = 0x8000000080000000;
  *(_DWORD *)(a1 + 132) = 0x7FFFFFFF;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 32;
  *(_OWORD *)(a1 + 160) = xmmword_20E12E0;
  sub_3F8850((void *)(a1 + 176));
  *(void *)(a1 + 200) = 0;
  *(uint64x2_t *)(a1 + 88) = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 104), (float)*(unint64_t *)(a1 + 152))));
  *(unsigned char *)(a1 + 112) = 0;
  memset_pattern16((void *)(a1 + 208), &unk_20B8FB0, 0x2CuLL);
  *(unsigned char *)(a1 + 252) = 0;
  *(void *)(a1 + 256) = 0x8000000080000000;
  *(_DWORD *)(a1 + 264) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 268) = 0;
  *(void *)(a1 + 272) = 0x8000000080000000;
  *(_DWORD *)(a1 + 280) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 284) = 0;
  *(void *)(a1 + 288) = 0x8000000080000000;
  *(_DWORD *)(a1 + 296) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 300) = 0;
  *(void *)(a1 + 304) = 0x8000000080000000;
  *(_DWORD *)(a1 + 312) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 316) = 0;
  *(void *)(a1 + 320) = 0x8000000080000000;
  *(_DWORD *)(a1 + 328) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 332) = 0;
  *(void *)(a1 + 336) = 0x8000000080000000;
  *(_DWORD *)(a1 + 344) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 348) = 0;
  *(void *)(a1 + 352) = 0x8000000080000000;
  *(_DWORD *)(a1 + 360) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 364) = 0;
  *(void *)(a1 + 368) = 0x8000000080000000;
  *(_DWORD *)(a1 + 376) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 380) = 0;
  *(void *)(a1 + 384) = 0x8000000080000000;
  *(_DWORD *)(a1 + 392) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 396) = 0;
  *(void *)(a1 + 400) = 0x8000000080000000;
  *(_DWORD *)(a1 + 408) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 412) = 0;
  *(void *)(a1 + 416) = 0x8000000080000000;
  *(_DWORD *)(a1 + 424) = 0x7FFFFFFF;
  uint64_t v13 = (a2[1] - *a2) >> 4;
  v38[0] = 0;
  v38[1] = 0;
  uint64_t v39 = 0;
  uint64_t v14 = v35;
  sub_40CE04((unint64_t *)v38, 0xCCCCCCCCCCCCCCCDLL * v13);
  uint64_t v15 = *a2;
  uint64_t v16 = a2[1];
  if (*a2 != v16)
  {
    uint64_t v17 = (char *)v38[1];
    do
    {
      sub_28FD54(v40, (long long **)v15);
      long double v42 = 0;
      long double v43 = 0;
      uint64_t v44 = 0;
      sub_28FF98(&v42, *(void *)(v15 + 24), *(void *)(v15 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v15 + 32) - *(void *)(v15 + 24)) >> 4));
      long long v19 = *(_OWORD *)(v15 + 48);
      *(_OWORD *)((char *)v45 + 13) = *(_OWORD *)(v15 + 61);
      v45[0] = v19;
      uint64_t v46 = 0;
      uint64_t v47 = 0x7FFFFFFFFFFFFFFFLL;
      unsigned int v20 = sub_40D05C(v38, v17, (uint64_t)v40);
      uint64_t v21 = (void **)v42;
      if (v42)
      {
        long long v22 = v43;
        uint64_t v23 = v42;
        if (v43 != v42)
        {
          do
          {
            if (*((char *)v22 - 1) < 0) {
              operator delete(*(v22 - 3));
            }
            v22 -= 6;
          }
          while (v22 != v21);
          uint64_t v23 = v42;
        }
        long double v43 = v21;
        operator delete(v23);
      }
      uint64_t v24 = (char *)v40[0];
      if (v40[0])
      {
        uint64_t v25 = (char *)v40[1];
        unint64_t v18 = v40[0];
        if (v40[1] != v40[0])
        {
          do
          {
            uint64_t v26 = (void *)*((void *)v25 - 3);
            if (v26)
            {
              *((void *)v25 - 2) = v26;
              operator delete(v26);
            }
            v25 -= 48;
          }
          while (v25 != v24);
          unint64_t v18 = v40[0];
        }
        v40[1] = v24;
        operator delete(v18);
      }
      uint64_t v17 = v20 + 96;
      v15 += 80;
      uint64_t v14 = v35;
    }
    while (v15 != v16);
  }
  if (*(void *)v14)
  {
    sub_40CAE4(v14, *(void ***)v14);
    operator delete(*(void **)v14);
    *(void *)uint64_t v14 = 0;
    *(void *)(v14 + 8) = 0;
    *(void *)(v14 + 16) = 0;
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v38;
  *(void *)(a1 + 32) = v39;
  *(_OWORD *)double v40 = xmmword_20E12E0;
  sub_40B0E4((void *)(a1 + 88), (long long *)v40);
  unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 5);
  double v28 = *(unsigned char **)(a1 + 64);
  if (v27 > (uint64_t)(*(void *)(a1 + 80) - (void)v28) >> 4)
  {
    if (v27 >> 60) {
      sub_2E00();
    }
    double v29 = *(unsigned char **)(a1 + 72);
    uint64_t v30 = (char *)operator new(0xAAAAAAAAAAAAAAB0 * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 5));
    double v31 = &v30[(v29 - v28) & 0xFFFFFFFFFFFFFFF0];
    char v32 = v31;
    if (v29 != v28)
    {
      int v33 = &v30[(v29 - v28) & 0xFFFFFFFFFFFFFFF0];
      do
      {
        char v32 = v33 - 16;
        *((_OWORD *)v33 - 1) = *((_OWORD *)v29 - 1);
        v29 -= 16;
        v33 -= 16;
      }
      while (v29 != v28);
    }
    *(void *)(a1 + 64) = v32;
    *(void *)(a1 + 72) = v31;
    *(void *)(a1 + 80) = &v30[16 * v27];
    if (v28) {
      operator delete(v28);
    }
  }
  sub_40B19C(a1);
  return a1;
}

void sub_40B868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void ***a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32)
{
  sub_40B2D4(a14);
  double v34 = *a10;
  if (*a10)
  {
    *(void *)(v32 + 72) = v34;
    operator delete(v34);
  }
  sub_40B358(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_40B954(uint64_t a1, unsigned __int16 a2)
{
  return *(void *)(a1 + 16) + 96 * a2;
}

uint64_t sub_40B968(uint64_t a1)
{
  return -1431655765 * ((*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 5);
}

uint64_t sub_40B984(void *a1, unsigned __int16 a2)
{
  if (a1[18] == a1[17])
  {
    uint64_t v3 = a1[25];
  }
  else
  {
    uint64_t v4 = sub_40D794((uint64_t)(a1 + 11), (int *)(a1[8] + 16 * a2));
    uint64_t v3 = a1[25];
    if (v4 != -1) {
      return v3 + 40 * v4 + 16;
    }
  }
  return v3 + 40 * a1[19] + 16;
}

void sub_40B9FC(void *a1@<X0>, unsigned __int16 a2@<W1>, signed int a3@<W2>, signed int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v31 = a1[2] + 96 * a2;
  uint64_t v39 = sub_40BD04((uint64_t)a1, v31, a3, a4);
  uint64_t v40 = v9;
  if (a1[18] == a1[17])
  {
    uint64_t v10 = a1[25];
    goto LABEL_6;
  }
  uint64_t v11 = sub_40D794((uint64_t)(a1 + 11), (int *)&v39);
  uint64_t v10 = a1[25];
  if (v11 == -1)
  {
LABEL_6:
    uint64_t v16 = v10 + 40 * a1[19];
    long long v37 = 0;
    double v38 = 0;
    long long __p = 0;
    uint64_t v14 = *(unsigned char **)(v16 + 16);
    uint64_t v17 = *(unsigned char **)(v16 + 24);
    int64_t v15 = v17 - v14;
    if (v17 != v14) {
      goto LABEL_7;
    }
    goto LABEL_9;
  }
  uint64_t v12 = v10 + 40 * v11;
  long long v37 = 0;
  double v38 = 0;
  long long __p = 0;
  uint64_t v14 = *(unsigned char **)(v12 + 16);
  uint64_t v13 = *(unsigned char **)(v12 + 24);
  int64_t v15 = v13 - v14;
  if (v13 != v14)
  {
LABEL_7:
    if (v15 < 0) {
      sub_2E00();
    }
    unint64_t v18 = (char *)operator new(v15);
    long long v19 = &v18[8 * (v15 >> 3)];
    long long __p = v18;
    double v38 = v19;
    memcpy(v18, v14, v15);
    long long v37 = v19;
  }
LABEL_9:
  uint64_t v20 = sub_3F8AF8((char **)&__p, a3, a4);
  int v21 = v20;
  uint64_t v22 = 0;
  *a5 = 0;
  a5[1] = 0;
  uint64_t v23 = (long long *)((char *)a1 + 252);
  a5[2] = 0;
  do
  {
    long long v35 = *v23;
    if (!DWORD1(v35)) {
      goto LABEL_12;
    }
    char v34 = v22;
    BOOL v24 = v35 == v39 && DWORD1(v35) == HIDWORD(v39);
    if (v24 && *((void *)&v35 + 1) == v40)
    {
      uint64_t v25 = sub_40C10C(v20, v31, (unsigned __int8 *)&v34);
      int v33 = HIDWORD(v25);
      char v32 = 0;
      unint64_t v26 = a5[1];
      if (v26 < a5[2])
      {
        sub_87E68(a5[1], v22, SHIDWORD(v25), 0);
        goto LABEL_30;
      }
LABEL_10:
      uint64_t v20 = sub_40D8E4(a5, &v34, &v33, &v32);
      goto LABEL_11;
    }
    if (a1[18] == a1[17])
    {
      uint64_t v27 = a1[25];
    }
    else
    {
      uint64_t v28 = sub_40D794((uint64_t)(a1 + 11), (int *)&v35);
      uint64_t v27 = a1[25];
      if (v28 != -1)
      {
        uint64_t v29 = v27 + 40 * v28;
        goto LABEL_27;
      }
    }
    uint64_t v29 = v27 + 40 * a1[19];
LABEL_27:
    uint64_t v20 = sub_3F8AF8((char **)(v29 + 16), a3, a4);
    if (v20 == v21)
    {
      uint64_t v30 = sub_40C10C(v20, v31, (unsigned __int8 *)&v34);
      int v33 = HIDWORD(v30);
      char v32 = 0;
      unint64_t v26 = a5[1];
      if (v26 >= a5[2]) {
        goto LABEL_10;
      }
      sub_87E68(a5[1], v34, SHIDWORD(v30), 0);
LABEL_30:
      uint64_t v20 = v26 + 12;
      a5[1] = v26 + 12;
LABEL_11:
      a5[1] = v20;
    }
LABEL_12:
    ++v22;
    ++v23;
  }
  while (v22 != 11);
  if (__p)
  {
    long long v37 = __p;
    operator delete(__p);
  }
}

void sub_40BCB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_40BD04(uint64_t a1, uint64_t a2, signed int a3, signed int a4)
{
  *(_OWORD *)(a1 + 252) = xmmword_20E7B20;
  *(_OWORD *)(a1 + 268) = xmmword_20E7B20;
  uint64_t v36 = a1 + 252;
  *(_OWORD *)(a1 + 284) = xmmword_20E7B20;
  *(_OWORD *)(a1 + 300) = xmmword_20E7B20;
  *(_OWORD *)(a1 + 316) = xmmword_20E7B20;
  *(_OWORD *)(a1 + 332) = xmmword_20E7B20;
  *(_OWORD *)(a1 + 348) = xmmword_20E7B20;
  *(_OWORD *)(a1 + 364) = xmmword_20E7B20;
  *(_OWORD *)(a1 + 380) = xmmword_20E7B20;
  *(_OWORD *)(a1 + 396) = xmmword_20E7B20;
  *(_OWORD *)(a1 + 412) = xmmword_20E7B20;
  memset_pattern16(__b, &unk_20B8FB0, 0x2CuLL);
  long long v42 = xmmword_20E7B20;
  double v8 = *(unsigned char **)(a2 + 24);
  uint64_t v9 = *(unsigned char **)(a2 + 32);
  if (v8 == v9) {
    return 1;
  }
  uint64_t v10 = a1 + 88;
  signed int v11 = a3;
  signed int v12 = a4;
  uint64_t v13 = v8 + 16;
  int v14 = 0x7FFFFFFF;
  signed int v35 = a4;
  do
  {
    uint64_t v16 = v13 - 16;
    uint64_t v15 = *(v13 - 16);
    int v17 = *(_DWORD *)(a1 + 208 + 4 * v15);
    if (v17 >= *((_DWORD *)v13 - 3)) {
      int v17 = *((_DWORD *)v13 - 3);
    }
    if (v17)
    {
      LOBYTE(v40) = *v13;
      DWORD1(v40) = v17;
      *((void *)&v40 + 1) = *((void *)v13 - 1);
      int v37 = v14;
      if (*(void *)(a1 + 144) == *(void *)(a1 + 136)
        || (v18 = sub_40D794(v10, (int *)&v40), uint64_t v19 = *(void *)(a1 + 200), v18 == -1)
        || (uint64_t v20 = v19 + 40 * v18, v20 == v19 + 40 * *(void *)(a1 + 152)))
      {
        sub_40C8C4(a1, (int *)&v40, &v38);
        int v21 = (__n128 *)sub_40DEDC(v10, (int *)&v40);
        uint64_t v22 = (void *)v21[1].n128_u64[0];
        if (v22)
        {
          v21[1].n128_u64[1] = (unint64_t)v22;
          operator delete(v22);
          v21[1].n128_u64[0] = 0;
          v21[1].n128_u64[1] = 0;
          v21[2].n128_u64[0] = 0;
        }
        v21[1] = v38;
        v21[2].n128_u64[0] = v39;
        if (*(void *)(a1 + 144) == *(void *)(a1 + 136))
        {
          uint64_t v20 = *(void *)(a1 + 200) + 40 * *(void *)(a1 + 152);
        }
        else
        {
          uint64_t v23 = sub_40D794(v10, (int *)&v40);
          uint64_t v24 = *(void *)(a1 + 200);
          if (v23 == -1) {
            uint64_t v20 = v24 + 40 * *(void *)(a1 + 152);
          }
          else {
            uint64_t v20 = v24 + 40 * v23;
          }
        }
        signed int v12 = v35;
      }
      int v25 = sub_3F8AF8((char **)(v20 + 16), v11, v12);
      int v26 = __b[v15];
      if (v25 == v26)
      {
        uint64_t v27 = (unsigned __int8 *)(v36 + 16 * v15);
        int v28 = *((_DWORD *)v27 + 1);
        int v14 = v37;
        if (v28 < SDWORD1(v40)
          || (uint64_t v29 = (long long *)(v36 + 16 * v15), SDWORD1(v40) >= v28)
          && ((unsigned int v30 = *v27, v30 < v40)
           || (uint64_t v29 = (long long *)(v36 + 16 * v15), v40 >= v30)
           && ((int v33 = *((_DWORD *)v27 + 2), v33 < SDWORD2(v40))
            || (uint64_t v29 = (long long *)(v36 + 16 * v15), SDWORD2(v40) >= v33)
            && (uint64_t v29 = (long long *)(v36 + 16 * v15), *((_DWORD *)v27 + 3) < SHIDWORD(v40)))))
        {
          uint64_t v29 = &v40;
        }
        *(_OWORD *)uint64_t v27 = *v29;
      }
      else
      {
        int v14 = v37;
        if (v25 != 0x7FFFFFFF && (v26 == 0x7FFFFFFF || v25 < v26))
        {
          __b[v15] = v25;
          *(_OWORD *)(v36 + 16 * v15) = v40;
        }
      }
      if (v25 == v14)
      {
        if (SDWORD1(v42) >= SDWORD1(v40)
          && (SDWORD1(v40) < SDWORD1(v42)
           || v42 >= v40
           && (v40 < v42
            || SDWORD2(v42) >= SDWORD2(v40) && (SDWORD2(v40) < SDWORD2(v42) || SHIDWORD(v42) >= SHIDWORD(v40)))))
        {
          char v32 = &v42;
        }
        else
        {
          char v32 = &v40;
        }
        long long v42 = *v32;
      }
      if (v25 != 0x7FFFFFFF && (v14 == 0x7FFFFFFF || v25 < v14))
      {
        long long v42 = v40;
        int v14 = v25;
      }
    }
    v13 += 48;
  }
  while (v16 + 48 != v9);
  return v42;
}

void sub_40C0F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_40C10C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  long long v16 = xmmword_20E7B20;
  uint64_t v3 = *(unsigned __int8 **)(a2 + 24);
  uint64_t v4 = *(unsigned __int8 **)(a2 + 32);
  if (v3 == v4) {
    return 1;
  }
  int v5 = *a3;
  do
  {
    if (*v3 == v5)
    {
      unsigned int v7 = v3[16];
      int v9 = *((_DWORD *)v3 + 1);
      int v8 = *((_DWORD *)v3 + 2);
      int v10 = *((_DWORD *)v3 + 3);
      v12[0] = v3[16];
      int v13 = v9;
      int v14 = v8;
      int v15 = v10;
      if (v9)
      {
        long long v6 = (long long *)v12;
        if (DWORD1(v16) != 0x7FFFFFFF && DWORD2(v16) != 0x7FFFFFFF && HIDWORD(v16) != 0x7FFFFFFF)
        {
          if ((_BYTE)v16)
          {
            long long v6 = &v16;
            if (v9 != 0x7FFFFFFF
              && v8 != 0x7FFFFFFF
              && v10 != 0x7FFFFFFF
              && v7
              && (SDWORD1(v16) < v9
               || v9 >= SDWORD1(v16)
               && (v16 < v7
                || v7 >= v16 && (SDWORD2(v16) < v8 || v8 >= SDWORD2(v16) && SHIDWORD(v16) < v10))))
            {
              long long v6 = (long long *)v12;
            }
          }
        }
        long long v16 = *v6;
      }
    }
    v3 += 48;
  }
  while (v3 != v4);
  return v16;
}

unint64_t sub_40C21C@<X0>(uint64_t a1@<X0>, unsigned __int16 a2@<W1>, uint64_t *a3@<X8>)
{
  *(_OWORD *)(a1 + 252) = xmmword_20E7B20;
  int v5 = (long long *)(a1 + 252);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 268) = xmmword_20E7B20;
  *(_OWORD *)(a1 + 284) = xmmword_20E7B20;
  *(_OWORD *)(a1 + 300) = xmmword_20E7B20;
  *(_OWORD *)(a1 + 316) = xmmword_20E7B20;
  *(_OWORD *)(a1 + 332) = xmmword_20E7B20;
  *(_OWORD *)(a1 + 348) = xmmword_20E7B20;
  *(_OWORD *)(a1 + 364) = xmmword_20E7B20;
  *(_OWORD *)(a1 + 380) = xmmword_20E7B20;
  *(_OWORD *)(a1 + 396) = xmmword_20E7B20;
  *(_OWORD *)(a1 + 412) = xmmword_20E7B20;
  uint64_t v7 = v6 + 96 * a2;
  int v8 = *(unsigned __int8 **)(v7 + 24);
  int v9 = *(unsigned __int8 **)(v7 + 32);
  while (v8 != v9)
  {
    uint64_t v11 = *v8;
    if (*v8)
    {
      unsigned int v12 = v8[16];
      signed int v14 = *((_DWORD *)v8 + 1);
      signed int v13 = *((_DWORD *)v8 + 2);
      int v15 = *((_DWORD *)v8 + 3);
      LOBYTE(v23) = v8[16];
      *(void *)((char *)&v23 + 4) = __PAIR64__(v13, v14);
      HIDWORD(v23) = v15;
      long long v16 = (unsigned __int8 *)&v5[v11];
      int v17 = *((_DWORD *)v16 + 1);
      if (v17 < v14
        || (int v10 = (long long *)v16, v14 >= v17)
        && ((unsigned int v18 = *v16, v18 < v12)
         || (int v10 = (long long *)v16, v12 >= v18)
         && ((int v19 = *((_DWORD *)v16 + 2), v19 < v13)
          || (int v10 = (long long *)v16, v13 >= v19) && (int v10 = (long long *)v16, *((_DWORD *)v16 + 3) < v15))))
      {
        int v10 = &v23;
      }
      *(_OWORD *)long long v16 = *v10;
    }
    v8 += 48;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t result = (unint64_t)operator new(0x84uLL);
  unint64_t v21 = result;
  *a3 = result;
  a3[1] = result;
  a3[2] = result + 132;
  long long v23 = *v5;
  if ((uint64_t)v23 > 0)
  {
    __int16 v22 = 0;
    if (result >= a3[2])
    {
      unint64_t result = sub_40DA28(a3, (char *)&v22 + 1, (int *)&v23 + 1, (char *)&v22);
      unint64_t v21 = result;
    }
    else
    {
      unint64_t result = sub_87E68(result, 0, SDWORD1(v23), 0);
      v21 += 12;
      a3[1] = v21;
    }
    a3[1] = v21;
  }
  long long v23 = *(_OWORD *)(a1 + 268);
  if (SDWORD1(v23) >= 1)
  {
    __int16 v22 = 256;
    if (v21 >= a3[2])
    {
      unint64_t result = sub_40DA28(a3, (char *)&v22 + 1, (int *)&v23 + 1, (char *)&v22);
      unint64_t v21 = result;
    }
    else
    {
      unint64_t result = sub_87E68(v21, 1, SDWORD1(v23), 0);
      v21 += 12;
      a3[1] = v21;
    }
    a3[1] = v21;
  }
  long long v23 = *(_OWORD *)(a1 + 284);
  if (SDWORD1(v23) >= 1)
  {
    __int16 v22 = 512;
    if (v21 >= a3[2])
    {
      unint64_t result = sub_40DA28(a3, (char *)&v22 + 1, (int *)&v23 + 1, (char *)&v22);
      unint64_t v21 = result;
    }
    else
    {
      unint64_t result = sub_87E68(v21, 2, SDWORD1(v23), 0);
      v21 += 12;
      a3[1] = v21;
    }
    a3[1] = v21;
  }
  long long v23 = *(_OWORD *)(a1 + 300);
  if (SDWORD1(v23) >= 1)
  {
    __int16 v22 = 768;
    if (v21 >= a3[2])
    {
      unint64_t result = sub_40DA28(a3, (char *)&v22 + 1, (int *)&v23 + 1, (char *)&v22);
      unint64_t v21 = result;
    }
    else
    {
      unint64_t result = sub_87E68(v21, 3, SDWORD1(v23), 0);
      v21 += 12;
      a3[1] = v21;
    }
    a3[1] = v21;
  }
  long long v23 = *(_OWORD *)(a1 + 316);
  if (SDWORD1(v23) >= 1)
  {
    __int16 v22 = 1024;
    if (v21 >= a3[2])
    {
      unint64_t result = sub_40DA28(a3, (char *)&v22 + 1, (int *)&v23 + 1, (char *)&v22);
      unint64_t v21 = result;
    }
    else
    {
      unint64_t result = sub_87E68(v21, 4, SDWORD1(v23), 0);
      v21 += 12;
      a3[1] = v21;
    }
    a3[1] = v21;
  }
  long long v23 = *(_OWORD *)(a1 + 332);
  if (SDWORD1(v23) >= 1)
  {
    __int16 v22 = 1280;
    if (v21 >= a3[2])
    {
      unint64_t result = sub_40DA28(a3, (char *)&v22 + 1, (int *)&v23 + 1, (char *)&v22);
      unint64_t v21 = result;
    }
    else
    {
      unint64_t result = sub_87E68(v21, 5, SDWORD1(v23), 0);
      v21 += 12;
      a3[1] = v21;
    }
    a3[1] = v21;
  }
  long long v23 = *(_OWORD *)(a1 + 348);
  if (SDWORD1(v23) >= 1)
  {
    __int16 v22 = 1536;
    if (v21 >= a3[2])
    {
      unint64_t result = sub_40DA28(a3, (char *)&v22 + 1, (int *)&v23 + 1, (char *)&v22);
      unint64_t v21 = result;
    }
    else
    {
      unint64_t result = sub_87E68(v21, 6, SDWORD1(v23), 0);
      v21 += 12;
      a3[1] = v21;
    }
    a3[1] = v21;
  }
  long long v23 = *(_OWORD *)(a1 + 364);
  if (SDWORD1(v23) >= 1)
  {
    __int16 v22 = 1792;
    if (v21 >= a3[2])
    {
      unint64_t result = sub_40DA28(a3, (char *)&v22 + 1, (int *)&v23 + 1, (char *)&v22);
      unint64_t v21 = result;
    }
    else
    {
      unint64_t result = sub_87E68(v21, 7, SDWORD1(v23), 0);
      v21 += 12;
      a3[1] = v21;
    }
    a3[1] = v21;
  }
  long long v23 = *(_OWORD *)(a1 + 380);
  if (SDWORD1(v23) >= 1)
  {
    __int16 v22 = 2048;
    if (v21 >= a3[2])
    {
      unint64_t result = sub_40DA28(a3, (char *)&v22 + 1, (int *)&v23 + 1, (char *)&v22);
      unint64_t v21 = result;
    }
    else
    {
      unint64_t result = sub_87E68(v21, 8, SDWORD1(v23), 0);
      v21 += 12;
      a3[1] = v21;
    }
    a3[1] = v21;
  }
  long long v23 = *(_OWORD *)(a1 + 396);
  if (SDWORD1(v23) >= 1)
  {
    __int16 v22 = 2304;
    if (v21 >= a3[2])
    {
      unint64_t result = sub_40DA28(a3, (char *)&v22 + 1, (int *)&v23 + 1, (char *)&v22);
      unint64_t v21 = result;
    }
    else
    {
      unint64_t result = sub_87E68(v21, 9, SDWORD1(v23), 0);
      v21 += 12;
      a3[1] = v21;
    }
    a3[1] = v21;
  }
  long long v23 = *(_OWORD *)(a1 + 412);
  if (SDWORD1(v23) >= 1)
  {
    __int16 v22 = 2560;
    if (v21 >= a3[2])
    {
      unint64_t result = sub_40DA28(a3, (char *)&v22 + 1, (int *)&v23 + 1, (char *)&v22);
    }
    else
    {
      sub_87E68(v21, 10, SDWORD1(v23), 0);
      unint64_t result = v21 + 12;
      a3[1] = v21 + 12;
    }
    a3[1] = result;
  }
  return result;
}

void sub_40C7CC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_40C7F4(uint64_t a1, unsigned __int16 a2, signed int a3, signed int a4)
{
  uint64_t v4 = 0;
  unint64_t v5 = 0x7FFFFFFF00000000;
  if (a3 == 0x7FFFFFFFLL || a4 == 0x7FFFFFFFLL) {
    return 0x7FFFFFFF00000000;
  }
  uint64_t v6 = 0;
  if (a2 != 0xFFFFLL)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 24) - v7) >> 5) < a2
      || (uint64_t v8 = v7 + 96 * a2, !*(_DWORD *)(v8 + 52))
      || *(_DWORD *)(v8 + 56) == -1)
    {
      uint64_t v4 = 0;
      uint64_t v6 = 0;
      unint64_t v5 = 0x7FFFFFFF00000000;
    }
    else
    {
      uint64_t v9 = sub_40BD04(a1, v8, a3, a4);
      unint64_t v5 = v9 & 0xFFFFFFFF00000000;
      uint64_t v4 = v9 & 0xFFFFFF00;
      uint64_t v6 = v9;
    }
  }
  return v4 | v5 | v6;
}

void sub_40C8C4(uint64_t a1@<X0>, int *a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 56);
  double v7 = *(double *)(a1 + 40) * (double)a2[1];
  if (v7 >= 0.0)
  {
    if (v7 >= 4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v8 = (uint64_t)(v7 + v7) + 1;
  }
  else
  {
    if (v7 <= -4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v8 = (uint64_t)(v7 + v7);
    if (v8 >= 1) {
      --v8;
    }
  }
  double v7 = (double)(v8 >> 1);
LABEL_9:
  sub_920F4(v6, (int)v7);
  sub_920A8(*(void *)(a1 + 56), a2[2]);
  sub_920C4(*(void *)(a1 + 56), *(unsigned __int8 *)a2, a2[3]);
  sub_9E4D4(*(void *)(a1 + 56), 36000);
  sub_92110(*(void *)(a1 + 56), 36000);
  sub_9E4E8(*(void *)(a1 + 56), 0x48CA6u);
  uint64_t v9 = nullsub_1(*(void *)(a1 + 8));
  unint64_t v10 = sub_40A454(v9);
  unint64_t v11 = HIDWORD(v10);
  int v12 = v10;
  sub_92054(*(void *)(a1 + 56), v10);
  sub_92070(*(void *)(a1 + 56), v12);
  sub_9208C(*(void *)(a1 + 56), v11);
  sub_8CEE4(*(void *)(a1 + 56), *(_DWORD *)(a1 + 48), (uint64_t)&v20);
  int v13 = v20;
  signed int v14 = v21;
  int v15 = v22;
  int v19 = 0;
  __n128 __p = 0uLL;
  uint64_t v16 = v22 - (unsigned char *)v21;
  if (v22 != v21)
  {
    if (v16 < 0) {
      sub_2E00();
    }
    int v17 = (char *)operator new(v22 - (unsigned char *)v21);
    __p.n128_u64[0] = (unint64_t)v17;
    __p.n128_u64[1] = (unint64_t)v17;
    int v19 = &v17[8 * (v16 >> 3)];
    do
    {
      unint64_t v23 = (*v14 + v13) | ((unint64_t)v14[1] << 32);
      int v17 = sub_40DB6C(__p.n128_u64, v17, &v23) + 8;
      v14 += 2;
    }
    while (v14 != v15);
  }
  sub_3F88B0(a3, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v21)
  {
    __int16 v22 = v21;
    operator delete(v21);
  }
}

void sub_40CAA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
  {
    operator delete(__p);
    int v15 = a13;
    if (!a13) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    int v15 = a13;
    if (!a13) {
      goto LABEL_3;
    }
  }
  operator delete(v15);
  _Unwind_Resume(exception_object);
}

void sub_40CAE4(uint64_t a1, void **a2)
{
  uint64_t v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      uint64_t v6 = (void **)*(v4 - 9);
      if (v6)
      {
        double v7 = (void **)*(v4 - 8);
        uint64_t v8 = *(v4 - 9);
        if (v7 != v6)
        {
          do
          {
            if (*((char *)v7 - 1) < 0) {
              operator delete(*(v7 - 3));
            }
            v7 -= 6;
          }
          while (v7 != v6);
          uint64_t v8 = *(v4 - 9);
        }
        *(v4 - 8) = v6;
        operator delete(v8);
      }
      uint64_t v9 = v4 - 12;
      unint64_t v10 = (char *)*(v4 - 12);
      if (v10)
      {
        unint64_t v11 = (char *)*(v4 - 11);
        unint64_t v5 = *(v4 - 12);
        if (v11 != v10)
        {
          do
          {
            int v12 = (void *)*((void *)v11 - 3);
            if (v12)
            {
              *((void *)v11 - 2) = v12;
              operator delete(v12);
            }
            v11 -= 48;
          }
          while (v11 != v10);
          unint64_t v5 = *v9;
        }
        *(v4 - 11) = v10;
        operator delete(v5);
      }
      v4 -= 12;
    }
    while (v9 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t sub_40CBC8(void *a1, uint64_t a2)
{
  unint64_t v5 = a1 + 11;
  uint64_t v4 = (void *)a1[11];
  *((unsigned char *)v5 - 63) = 1;
  uint64_t v6 = v5 - 2;
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  *uint64_t v6 = *(_OWORD *)a2;
  v5[1] = 0;
  v5[2] = 0;
  void *v5 = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 16);
  double v7 = *(unsigned char **)(a2 + 24);
  int64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0) {
      sub_2E00();
    }
    unint64_t v10 = (char *)operator new(v7 - v8);
    a1[11] = v10;
    a1[12] = v10;
    unint64_t v11 = &v10[8 * (v9 >> 3)];
    a1[13] = v11;
    memcpy(v10, v8, v9);
    a1[12] = v11;
  }
  int v12 = malloc_type_malloc(40 * a1[8], 0x10200408CE6DADBuLL);
  a1[14] = v12;
  uint64_t v13 = (uint64_t)v12 + 40 * a1[8];

  return sub_40CCD0((uint64_t)v12, v13, (uint64_t)v6);
}

void sub_40CCB4(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 96) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_40CCD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = v3 + v6;
      *(_OWORD *)uint64_t v7 = *(_OWORD *)a3;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(void *)(v7 + 16) = 0;
      int64_t v9 = *(unsigned char **)(a3 + 16);
      uint64_t v8 = *(unsigned char **)(a3 + 24);
      int64_t v10 = v8 - v9;
      if (v8 != v9)
      {
        if (v10 < 0) {
          sub_2E00();
        }
        unint64_t v11 = (char *)operator new(v8 - v9);
        *(void *)(v7 + 16) = v11;
        *(void *)(v7 + 24) = v11;
        int v12 = &v11[8 * (v10 >> 3)];
        *(void *)(v7 + 32) = v12;
        memcpy(v11, v9, v10);
        *(void *)(v7 + 24) = v12;
      }
      v6 += 40;
    }
    while (v3 + v6 != a2);
    return a2;
  }
  return v3;
}

void sub_40CD94()
{
}

void sub_40CDF0(_Unwind_Exception *a1)
{
}

void sub_40CE04(unint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - *a1) >> 5) < a2)
  {
    if (a2 >= 0x2AAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    unint64_t v5 = a1[1];
    unint64_t v15 = 0;
    uint64_t v16 = a1 + 2;
    uint64_t v6 = 96 * a2;
    uint64_t v7 = (char *)operator new(96 * a2);
    uint64_t v8 = &v7[v5 - v3];
    if (v5 == v3)
    {
      int64x2_t v12 = vdupq_n_s64(v3);
      int64_t v9 = &v7[v5 - v3];
    }
    else
    {
      int64_t v9 = &v7[v5 - v3];
      do
      {
        long long v10 = *(_OWORD *)(v5 - 96);
        v5 -= 96;
        *((_OWORD *)v9 - 6) = v10;
        v9 -= 96;
        *((void *)v9 + 2) = *(void *)(v5 + 16);
        *(void *)unint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        *(void *)(v5 + 16) = 0;
        *(_OWORD *)(v9 + 24) = *(_OWORD *)(v5 + 24);
        *((void *)v9 + 5) = *(void *)(v5 + 40);
        *(void *)(v5 + 24) = 0;
        *(void *)(v5 + 32) = 0;
        *(void *)(v5 + 40) = 0;
        long long v11 = *(_OWORD *)(v5 + 48);
        *(_OWORD *)(v9 + 61) = *(_OWORD *)(v5 + 61);
        *((_OWORD *)v9 + 3) = v11;
        *((_OWORD *)v9 + 5) = *(_OWORD *)(v5 + 80);
      }
      while (v5 != v3);
      int64x2_t v12 = *(int64x2_t *)a1;
      unint64_t v2 = a1[2];
    }
    *a1 = (unint64_t)v9;
    a1[1] = (unint64_t)v8;
    int64x2_t v14 = v12;
    a1[2] = (unint64_t)&v7[v6];
    unint64_t v15 = v2;
    __n128 __p = (void *)v12.i64[0];
    sub_40CF74((uint64_t)&__p, v12.i64[0]);
    if (__p) {
      operator delete(__p);
    }
  }
}

uint64_t sub_40CF3C(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_40CF74(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v6 = (void **)(i - 96);
    *(void *)(a1 + 16) = i - 96;
    uint64_t v7 = *(void *)(i - 72);
    if (v7)
    {
      uint64_t v8 = *(void *)(i - 64);
      int64_t v9 = *(void **)(i - 72);
      if (v8 != v7)
      {
        do
        {
          if (*(char *)(v8 - 1) < 0) {
            operator delete(*(void **)(v8 - 24));
          }
          v8 -= 48;
        }
        while (v8 != v7);
        int64_t v9 = *(void **)(i - 72);
      }
      *(void *)(i - 64) = v7;
      operator delete(v9);
    }
    long long v10 = (char *)*v6;
    if (*v6)
    {
      long long v11 = *(char **)(i - 88);
      unint64_t v5 = *v6;
      if (v11 != v10)
      {
        do
        {
          int64x2_t v12 = (void *)*((void *)v11 - 3);
          if (v12)
          {
            *((void *)v11 - 2) = v12;
            operator delete(v12);
          }
          v11 -= 48;
        }
        while (v11 != v10);
        unint64_t v5 = *v6;
      }
      *(void *)(i - 88) = v10;
      operator delete(v5);
    }
  }
}

char *sub_40D05C(void *a1, char *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v7 = (char *)*a1;
  unint64_t v6 = a1[1];
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&a2[-*a1] >> 5);
  unint64_t v9 = a1[2];
  if (v6 >= v9)
  {
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v7) >> 5) + 1;
    if (v15 > 0x2AAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v7) >> 5);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x155555555555555) {
      unint64_t v17 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v17 = v15;
    }
    int v37 = a1 + 2;
    if (v17)
    {
      if (v17 > 0x2AAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      unsigned int v18 = (char *)operator new(96 * v17);
    }
    else
    {
      unsigned int v18 = 0;
    }
    __n128 __p = v18;
    char v34 = &v18[96 * v8];
    signed int v35 = v34;
    uint64_t v36 = &v18[96 * v17];
    sub_40D428((uint64_t)&__p, a3);
    int v20 = v34;
    unint64_t v21 = (char *)*a1;
    __int16 v22 = v34;
    if ((char *)*a1 != v4)
    {
      __int16 v22 = v34;
      unint64_t v23 = v4;
      do
      {
        *((void *)v22 - 12) = 0;
        *((void *)v22 - 11) = 0;
        v22 -= 96;
        *((void *)v22 + 2) = 0;
        long long v24 = *((_OWORD *)v23 - 6);
        v23 -= 96;
        *(_OWORD *)__int16 v22 = v24;
        *((void *)v22 + 2) = *((void *)v23 + 2);
        *(void *)unint64_t v23 = 0;
        *((void *)v23 + 1) = 0;
        *((void *)v23 + 2) = 0;
        *((void *)v22 + 3) = 0;
        *((void *)v22 + 4) = 0;
        *((void *)v22 + 5) = 0;
        *(_OWORD *)(v22 + 24) = *(_OWORD *)(v23 + 24);
        *((void *)v22 + 5) = *((void *)v23 + 5);
        *((void *)v23 + 3) = 0;
        *((void *)v23 + 4) = 0;
        *((void *)v23 + 5) = 0;
        long long v25 = *((_OWORD *)v23 + 3);
        *(_OWORD *)(v22 + 61) = *(_OWORD *)(v23 + 61);
        *((_OWORD *)v22 + 3) = v25;
        *((_OWORD *)v22 + 5) = *((_OWORD *)v23 + 5);
      }
      while (v23 != v21);
    }
    char v34 = v22;
    int v26 = (char *)a1[1];
    uint64_t v27 = v35;
    if (v26 != v4)
    {
      do
      {
        *(void *)uint64_t v27 = 0;
        *((void *)v27 + 1) = 0;
        *((void *)v27 + 2) = 0;
        *(_OWORD *)uint64_t v27 = *(_OWORD *)v4;
        *((void *)v27 + 2) = *((void *)v4 + 2);
        *(void *)uint64_t v4 = 0;
        *((void *)v4 + 1) = 0;
        *((void *)v4 + 2) = 0;
        *((void *)v27 + 3) = 0;
        *((void *)v27 + 4) = 0;
        *((void *)v27 + 5) = 0;
        *(_OWORD *)(v27 + 24) = *(_OWORD *)(v4 + 24);
        *((void *)v27 + 5) = *((void *)v4 + 5);
        *((void *)v4 + 3) = 0;
        *((void *)v4 + 4) = 0;
        *((void *)v4 + 5) = 0;
        long long v28 = *((_OWORD *)v4 + 3);
        *(_OWORD *)(v27 + 61) = *(_OWORD *)(v4 + 61);
        *((_OWORD *)v27 + 3) = v28;
        *((_OWORD *)v27 + 5) = *((_OWORD *)v4 + 5);
        v27 += 96;
        v4 += 96;
      }
      while (v4 != v26);
      __int16 v22 = v34;
      uint64_t v4 = (char *)a1[1];
    }
    uint64_t v29 = (char *)*a1;
    *a1 = v22;
    a1[1] = v27;
    unsigned int v30 = (char *)a1[2];
    a1[2] = v36;
    signed int v35 = v4;
    uint64_t v36 = v30;
    __n128 __p = v29;
    char v34 = v29;
    sub_40CF74((uint64_t)&__p, (uint64_t)v29);
    if (__p) {
      operator delete(__p);
    }
    return v20;
  }
  else
  {
    if (a2 != (char *)v6)
    {
      long long v10 = a2 + 96;
      unint64_t v11 = v6 - 96;
      if (v6 < 0x60)
      {
        a1[1] = v6;
        if ((char *)v6 == v10)
        {
LABEL_31:
          sub_40D678((char **)v4, a3);
          *(_OWORD *)&v7[96 * v8 + 80] = *(_OWORD *)(a3 + 80);
          return v4;
        }
      }
      else
      {
        unint64_t v12 = v6 - 96;
        uint64_t v13 = a1[1];
        do
        {
          *(void *)uint64_t v13 = 0;
          *(void *)(v13 + 8) = 0;
          *(void *)(v13 + 16) = 0;
          *(_OWORD *)uint64_t v13 = *(_OWORD *)v12;
          *(void *)(v13 + 16) = *(void *)(v12 + 16);
          *(void *)unint64_t v12 = 0;
          *(void *)(v12 + 8) = 0;
          *(void *)(v12 + 16) = 0;
          *(void *)(v13 + 24) = 0;
          *(void *)(v13 + 32) = 0;
          *(void *)(v13 + 40) = 0;
          *(_OWORD *)(v13 + 24) = *(_OWORD *)(v12 + 24);
          *(void *)(v13 + 40) = *(void *)(v12 + 40);
          *(void *)(v12 + 24) = 0;
          *(void *)(v12 + 32) = 0;
          *(void *)(v12 + 40) = 0;
          long long v14 = *(_OWORD *)(v12 + 48);
          *(_OWORD *)(v13 + 61) = *(_OWORD *)(v12 + 61);
          *(_OWORD *)(v13 + 48) = v14;
          *(_OWORD *)(v13 + 80) = *(_OWORD *)(v12 + 80);
          v13 += 96;
          v12 += 96;
        }
        while (v12 < v6);
        a1[1] = v13;
        if ((char *)v6 == v10) {
          goto LABEL_31;
        }
      }
      uint64_t v31 = 32 * ((uint64_t)(v6 - (void)v10) >> 5);
      do
      {
        sub_40D678((char **)v11, (uint64_t)&v4[v31 - 96]);
        *(_OWORD *)(v11 + 80) = *(_OWORD *)&v4[v31 - 16];
        v11 -= 96;
        v31 -= 96;
      }
      while (v31);
      goto LABEL_31;
    }
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((void *)a2 + 2) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *((void *)a2 + 3) = 0;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
    *((void *)a2 + 5) = *(void *)(a3 + 40);
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    long long v19 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 61) = *(_OWORD *)(a3 + 61);
    *((_OWORD *)a2 + 3) = v19;
    *(_OWORD *)&v7[96 * v8 + 80] = *(_OWORD *)(a3 + 80);
    a1[1] = a2 + 96;
  }
  return v4;
}

void sub_40D414(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_40CF3C((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_40D428(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 == *(void *)(a1 + 24))
  {
    unint64_t v6 = *(void **)a1;
    unint64_t v5 = *(void *)(a1 + 8);
    if (v5 <= *(void *)a1)
    {
      unint64_t v13 = 0x5555555555555556 * ((uint64_t)(v4 - (void)v6) >> 5);
      if ((void *)v4 == v6) {
        unint64_t v13 = 1;
      }
      uint64_t v14 = *(void *)(a1 + 32);
      unint64_t v27 = 0;
      uint64_t v28 = v14;
      if (v13 >= 0x2AAAAAAAAAAAAABLL) {
        sub_188D718();
      }
      unint64_t v15 = v13 >> 2;
      uint64_t v16 = 96 * v13;
      unint64_t v17 = (char *)operator new(96 * v13);
      unsigned int v18 = &v17[96 * v15];
      if (v4 == v5)
      {
        int64x2_t v22 = vdupq_n_s64(v4);
        long long v19 = &v17[96 * v15];
      }
      else
      {
        long long v19 = &v18[v4 - v5];
        int v20 = &v17[96 * v15];
        do
        {
          *(_OWORD *)int v20 = *(_OWORD *)v5;
          *((void *)v20 + 2) = *(void *)(v5 + 16);
          *(void *)unint64_t v5 = 0;
          *(void *)(v5 + 8) = 0;
          *(void *)(v5 + 16) = 0;
          *(_OWORD *)(v20 + 24) = *(_OWORD *)(v5 + 24);
          *((void *)v20 + 5) = *(void *)(v5 + 40);
          *(void *)(v5 + 24) = 0;
          *(void *)(v5 + 32) = 0;
          *(void *)(v5 + 40) = 0;
          long long v21 = *(_OWORD *)(v5 + 48);
          *(_OWORD *)(v20 + 61) = *(_OWORD *)(v5 + 61);
          *((_OWORD *)v20 + 3) = v21;
          *((_OWORD *)v20 + 5) = *(_OWORD *)(v5 + 80);
          v20 += 96;
          v5 += 96;
        }
        while (v20 != v19);
        unint64_t v6 = *(void **)a1;
        int64x2_t v22 = *(int64x2_t *)(a1 + 8);
        unint64_t v4 = *(void *)(a1 + 24);
      }
      __n128 __p = v6;
      *(void *)a1 = v17;
      *(void *)(a1 + 8) = v18;
      int64x2_t v26 = v22;
      *(void *)(a1 + 16) = v19;
      *(void *)(a1 + 24) = &v17[v16];
      unint64_t v27 = v4;
      sub_40CF74((uint64_t)&__p, v22.i64[0]);
      if (__p) {
        operator delete(__p);
      }
      unint64_t v4 = *(void *)(a1 + 16);
    }
    else
    {
      int64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *(void *)a1) >> 5);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      if (v5 == v4)
      {
        unint64_t v12 = v5 - 96 * v9;
      }
      else
      {
        uint64_t v11 = -96 * v9;
        do
        {
          sub_40D678((char **)(v5 + v11), v5);
          *(_OWORD *)(v5 + v11 + 80) = *(_OWORD *)(v5 + 80);
          v5 += 96;
        }
        while (v5 != v4);
        unint64_t v4 = *(void *)(a1 + 8);
        unint64_t v12 = v5 + 96 * v10;
      }
      *(void *)(a1 + 8) = v4 + 96 * v10;
      *(void *)(a1 + 16) = v12;
      unint64_t v4 = v12;
    }
  }
  *(void *)unint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  *(_OWORD *)unint64_t v4 = *(_OWORD *)a2;
  *(void *)(v4 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 40) = 0;
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(v4 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  long long v23 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v4 + 61) = *(_OWORD *)(a2 + 61);
  *(_OWORD *)(v4 + 48) = v23;
  __n128 result = *(__n128 *)(a2 + 80);
  *(__n128 *)(v4 + 80) = result;
  *(void *)(a1 + 16) += 96;
  return result;
}