uint64_t sub_10BDB60(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  float v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  long long v16;
  uint64x2_t v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  char v25;
  __int16 v26;
  char v27;
  int v28;
  void *v29;
  std::logic_error *exception;
  uint64x2_t v31;
  long long v32;
  long long v33;
  long long v34;
  unint64_t v35;
  long long v36;
  int v37;
  void *v38;
  __int16 v39;
  char v40;

  if (*(unsigned char *)(a1 + 24))
  {
    result = sub_10BDE64(a1);
    v5 = *(void *)(a1 + 56);
    if (v5 >= ~a2) {
      goto LABEL_27;
    }
  }
  else
  {
    result = 0;
    v5 = *(void *)(a1 + 56);
    if (v5 >= ~a2) {
      goto LABEL_27;
    }
  }
  v6 = *(void *)(a1 + 64);
  v7 = v5 + a2;
  if (v6 < 4 || v7 > *(void *)a1)
  {
    v8 = *(float *)(a1 + 16);
    v9 = vcvts_n_u32_f32(v8, 2uLL);
    v10 = 4;
    if (v7 >= v9)
    {
      while ((v10 & 0x8000000000000000) == 0)
      {
        v10 *= 2;
        if (v7 < (unint64_t)(float)(v8 * (float)v10)) {
          goto LABEL_8;
        }
      }
LABEL_27:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_2E18(exception, "resize overflow");
    }
LABEL_8:
    if (v10 > v6)
    {
      v11 = *(void *)(a1 + 48);
      v12 = v5 - v11 + a2;
      v13 = 4;
      if (v6 > 4) {
        goto LABEL_11;
      }
LABEL_10:
      if (v12 >= (unint64_t)(float)(v8 * (float)v13))
      {
LABEL_11:
        while ((v13 & 0x8000000000000000) == 0)
        {
          v13 *= 2;
          if (v13 >= v6) {
            goto LABEL_10;
          }
        }
        goto LABEL_27;
      }
      v14 = v7 - (v11 >> 2);
      v15 = 4;
      if (v14 >= v9)
      {
        while ((v15 & 0x8000000000000000) == 0)
        {
          v15 *= 2;
          if (v14 < (unint64_t)(float)(v8 * (float)v15)) {
            goto LABEL_19;
          }
        }
        goto LABEL_27;
      }
LABEL_19:
      if (v13 <= 0x7FFFFFFFFFFFFFFELL
        && v13 < v15
        && v12 >= (unint64_t)(float)(*(float *)(a1 + 20) * (float)(2 * v13)))
      {
        v13 *= 2;
      }
      sub_329090((uint64_t)&v31, a1, v13);
      v17 = *(uint64x2_t *)a1;
      v16 = *(_OWORD *)(a1 + 16);
      v18 = v32;
      *(uint64x2_t *)a1 = v31;
      *(_OWORD *)(a1 + 16) = v18;
      v31 = v17;
      v32 = v16;
      v19 = v34;
      v20 = *(_OWORD *)(a1 + 32);
      v21 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(a1 + 32) = v33;
      *(_OWORD *)(a1 + 48) = v19;
      v33 = v20;
      v34 = v21;
      v22 = *(void *)(a1 + 64);
      v23 = v35;
      *(void *)(a1 + 64) = v35;
      v35 = v22;
      v24 = *(_DWORD *)(a1 + 80);
      v25 = *(unsigned char *)(a1 + 84);
      v39 = *(_WORD *)(a1 + 85);
      v26 = v39;
      v40 = *(unsigned char *)(a1 + 87);
      v27 = v40;
      v28 = *(_DWORD *)(a1 + 88);
      *(void *)&v16 = *(void *)(a1 + 72);
      *(_OWORD *)(a1 + 72) = v36;
      *(_DWORD *)(a1 + 88) = v37;
      *(void *)&v36 = v16;
      DWORD2(v36) = v24;
      BYTE12(v36) = v25;
      HIBYTE(v36) = v27;
      *(_WORD *)((char *)&v36 + 13) = v26;
      v37 = v28;
      v29 = *(void **)(a1 + 96);
      *(void *)(a1 + 96) = v38;
      v38 = v29;
      *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)v23)));
      *(unsigned char *)(a1 + 24) = 0;
      v31 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v32, (float)v22)));
      BYTE8(v32) = 0;
      if (v29) {
        free(v29);
      }
      return 1;
    }
  }
  return result;
}

void sub_10BDE14(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10BDE28(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10BDE3C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10BDE50(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10BDE64(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 56) - *(void *)(a1 + 48);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = v2 >= v3;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || (unint64_t v5 = *(void *)(a1 + 64), v5 < 0x21))
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    float v6 = (float)v2;
    do
    {
      unint64_t v7 = v5;
      v5 >>= 1;
    }
    while (v7 >= 0x42 && (float)(*(float *)(a1 + 20) * (float)v5) > v6);
    sub_329090((uint64_t)&v23, a1, v5);
    uint64x2_t v9 = *(uint64x2_t *)a1;
    long long v8 = *(_OWORD *)(a1 + 16);
    long long v10 = v24;
    *(uint64x2_t *)a1 = v23;
    *(_OWORD *)(a1 + 16) = v10;
    uint64x2_t v23 = v9;
    long long v24 = v8;
    long long v11 = v26;
    long long v12 = *(_OWORD *)(a1 + 32);
    long long v13 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 32) = v25;
    *(_OWORD *)(a1 + 48) = v11;
    long long v25 = v12;
    long long v26 = v13;
    unint64_t v14 = *(void *)(a1 + 64);
    unint64_t v15 = v27;
    *(void *)(a1 + 64) = v27;
    unint64_t v27 = v14;
    int v16 = *(_DWORD *)(a1 + 80);
    char v17 = *(unsigned char *)(a1 + 84);
    __int16 v31 = *(_WORD *)(a1 + 85);
    __int16 v18 = v31;
    char v32 = *(unsigned char *)(a1 + 87);
    char v19 = v32;
    int v20 = *(_DWORD *)(a1 + 88);
    *(void *)&long long v8 = *(void *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = v28;
    *(_DWORD *)(a1 + 88) = v29;
    *(void *)&long long v28 = v8;
    DWORD2(v28) = v16;
    BYTE12(v28) = v17;
    HIBYTE(v28) = v19;
    *(_WORD *)((char *)&v28 + 13) = v18;
    int v29 = v20;
    v21 = *(void **)(a1 + 96);
    *(void *)(a1 + 96) = v30;
    v30 = v21;
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)v15)));
    *(unsigned char *)(a1 + 24) = 0;
    uint64x2_t v23 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v24, (float)v14)));
    BYTE8(v24) = 0;
    if (v21) {
      free(v21);
    }
    uint64_t result = 1;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

void sub_10BDFCC()
{
  unk_25FE217 = 16641;
  word_25FE200 = 65;
  byte_25FE22F = 1;
  byte_25FE219 = 0;
}

void sub_10BDFF4(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
    unint64_t v5 = __dst + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
    unint64_t v5 = __dst + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *(long long *)((char *)a2 + 24);
      *((void *)v5 + 2) = *((void *)a2 + 5);
      *(_OWORD *)unint64_t v5 = v6;
      goto LABEL_6;
    }
  }
  sub_4200(v5, *((void **)a2 + 3), *((void *)a2 + 4));
LABEL_6:
  unint64_t v7 = __dst + 48;
  if (*((char *)a2 + 71) < 0)
  {
    sub_4200(v7, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v8 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *(_OWORD *)unint64_t v7 = v8;
  }
  uint64_t v9 = *((void *)a2 + 9);
  *((_DWORD *)__dst + 20) = *((_DWORD *)a2 + 20);
  *((void *)__dst + 9) = v9;
  operator new();
}

void sub_10BE1F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  if (*(char *)(v32 + 47) < 0) {
    operator delete(*v33);
  }
  if (*(char *)(v32 + 23) < 0)
  {
    operator delete(*(void **)v32);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10BE298(_Unwind_Exception *a1)
{
  sub_29D7B0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10BE2B0(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 112));
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(void *)(a1 + 88);
    *(void *)(a1 + 88) = 0;
    if (v3)
    {
LABEL_4:
      long long v4 = *(void **)(v3 + 16);
      if (v4)
      {
        do
        {
          unint64_t v5 = (void *)*v4;
          sub_151AFE4(v4 + 9);
          sub_1518448(v4 + 2);
          operator delete(v4);
          long long v4 = v5;
        }
        while (v5);
      }
      long long v6 = *(void **)v3;
      *(void *)uint64_t v3 = 0;
      if (v6) {
        operator delete(v6);
      }
      operator delete();
    }
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 88);
    *(void *)(a1 + 88) = 0;
    if (v3) {
      goto LABEL_4;
    }
  }
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      goto LABEL_11;
    }
LABEL_14:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_15;
  }
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0) {
    goto LABEL_14;
  }
LABEL_11:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
    return a1;
  }
LABEL_15:
  operator delete(*(void **)a1);
  return a1;
}

void sub_10BE404(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_725D0((uint64_t)v89);
  std::mutex::lock((std::mutex *)(a1 + 112));
  sub_1517674((uint64_t)v80, 0, 0);
  long long v8 = (long long *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
  v82 |= 1u;
  uint64_t v9 = (uint64_t *)(v81 & 0xFFFFFFFFFFFFFFFCLL);
  if (v81) {
    uint64_t v9 = (uint64_t *)*v9;
  }
  sub_1881DF4(&v86, v8, v9);
  char v87 = *(unsigned char *)(a2 + 56);
  int v10 = *(_DWORD *)(a2 + 60);
  v82 |= 6u;
  int v88 = v10;
  uint64_t v11 = *(int *)(a2 + 32);
  v78 = 0;
  v79 = 0;
  v77 = 0;
  if (v11)
  {
    if ((v11 & 0x80000000) != 0) {
      sub_2E00();
    }
    long long v12 = (char *)operator new(4 * v11);
    v77 = (int *)v12;
    v79 = &v12[4 * v11];
    memset(v12, 255, 4 * v11);
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    v78 = v79;
    uint64_t v15 = v11;
    do
    {
      uint64_t v16 = *(void *)(*(void *)(a2 + 40) + 8 * v13 + 8);
      if (sub_10C3B78(*(void **)(a1 + 88), v16))
      {
        ++v14;
      }
      else
      {
        uint64_t v17 = v84;
        *(_DWORD *)&v12[4 * v13] = v84;
        if (v85 && (int)v17 < *v85)
        {
          int v84 = v17 + 1;
          uint64_t v18 = *(void *)&v85[2 * v17 + 2];
        }
        else
        {
          char v19 = sub_152001C(v83);
          uint64_t v18 = sub_188CDC8((uint64_t)&v83, (uint64_t)v19);
        }
        sub_1518C18(v18, v16);
      }
      ++v13;
    }
    while (v15 != v13);
  }
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v75);
    sub_188FC78(v75, (uint64_t)"Processing fare request with ", 29);
    int v20 = (void *)std::ostream::operator<<();
    sub_188FC78(v20, (uint64_t)" routes (", 9);
    v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)" cached).", 9);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (SBYTE7(v69) < 0) {
      operator delete((void *)__p);
    }
    if (v76 < 0) {
      operator delete((void *)v75[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  HIBYTE(v56[2]) = 19;
  strcpy((char *)v56, "FareRoutesRequested");
  v73[0] = 0;
  v73[1] = 0;
  uint64_t v74 = 0;
  uint64_t v72 = 0;
  long long v70 = 0u;
  long long v71 = 0u;
  long long __p = 0u;
  long long v69 = 0u;
  HIBYTE(v67) = 0;
  LOBYTE(v66) = 0;
  uint64_t v64 = 0;
  v65 = 0;
  uint64_t v62 = 0;
  v63 = 0;
  sub_29DC44((uint64_t)v75, v73, &__p, &v66, &v64, 0, (uint64_t)&v62, 1);
  nullsub_1(10);
  sub_29E11C((uint64_t)v75);
  v22 = v63;
  if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    uint64x2_t v23 = v65;
    if (!v65)
    {
LABEL_24:
      if ((SHIBYTE(v67) & 0x80000000) == 0) {
        goto LABEL_25;
      }
      goto LABEL_42;
    }
  }
  else
  {
    uint64x2_t v23 = v65;
    if (!v65) {
      goto LABEL_24;
    }
  }
  if (atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
  std::__shared_weak_count::__release_weak(v23);
  if ((SHIBYTE(v67) & 0x80000000) == 0)
  {
LABEL_25:
    if ((SHIBYTE(v72) & 0x80000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete((void *)v66);
  if ((SHIBYTE(v72) & 0x80000000) == 0)
  {
LABEL_26:
    if ((SHIBYTE(v70) & 0x80000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete((void *)v71);
  if ((SHIBYTE(v70) & 0x80000000) == 0)
  {
LABEL_27:
    if ((SBYTE7(v69) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_45;
  }
LABEL_44:
  operator delete(*((void **)&v69 + 1));
  if ((SBYTE7(v69) & 0x80000000) == 0)
  {
LABEL_28:
    long long v24 = v73[0];
    if (v73[0]) {
      goto LABEL_29;
    }
LABEL_46:
    if (SHIBYTE(v56[2]) < 0) {
      goto LABEL_31;
    }
    goto LABEL_47;
  }
LABEL_45:
  operator delete((void *)__p);
  long long v24 = v73[0];
  if (!v73[0]) {
    goto LABEL_46;
  }
LABEL_29:
  long long v25 = v73[1];
  if (v73[1] == v24)
  {
    v73[1] = v24;
    operator delete(v24);
    if (SHIBYTE(v56[2]) < 0) {
      goto LABEL_31;
    }
    goto LABEL_47;
  }
  do
  {
    while (*((char *)v25 - 1) < 0)
    {
      operator delete(*((void **)v25 - 3));
      if (*((char *)v25 - 25) < 0) {
        goto LABEL_36;
      }
LABEL_33:
      v25 -= 3;
      if (v25 == v24) {
        goto LABEL_37;
      }
    }
    if ((*((char *)v25 - 25) & 0x80000000) == 0) {
      goto LABEL_33;
    }
LABEL_36:
    operator delete(*((void **)v25 - 6));
    v25 -= 3;
  }
  while (v25 != v24);
LABEL_37:
  v73[1] = v24;
  operator delete(v73[0]);
  if (SHIBYTE(v56[2]) < 0) {
LABEL_31:
  }
    operator delete(v56[0]);
LABEL_47:
  HIBYTE(v56[2]) = 16;
  strcpy((char *)v56, "FareRoutesCached");
  v73[0] = 0;
  v73[1] = 0;
  uint64_t v74 = 0;
  uint64_t v72 = 0;
  long long v70 = 0u;
  long long v71 = 0u;
  long long __p = 0u;
  long long v69 = 0u;
  HIBYTE(v67) = 0;
  LOBYTE(v66) = 0;
  uint64_t v60 = 0;
  v61 = 0;
  uint64_t v58 = 0;
  v59 = 0;
  sub_29DC44((uint64_t)v75, v73, &__p, &v66, &v60, 0, (uint64_t)&v58, 1);
  nullsub_1(10);
  sub_29E11C((uint64_t)v75);
  long long v26 = v59;
  if (!v59 || atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    unint64_t v27 = v61;
    if (v61) {
      goto LABEL_50;
    }
LABEL_51:
    if ((SHIBYTE(v67) & 0x80000000) == 0) {
      goto LABEL_52;
    }
LABEL_69:
    operator delete((void *)v66);
    if (SHIBYTE(v72) < 0) {
      goto LABEL_70;
    }
LABEL_53:
    if ((SHIBYTE(v70) & 0x80000000) == 0) {
      goto LABEL_54;
    }
LABEL_71:
    operator delete(*((void **)&v69 + 1));
    if (SBYTE7(v69) < 0) {
      goto LABEL_72;
    }
LABEL_55:
    long long v28 = v73[0];
    if (v73[0]) {
      goto LABEL_56;
    }
LABEL_73:
    if (SHIBYTE(v56[2]) < 0) {
      goto LABEL_58;
    }
    goto LABEL_74;
  }
  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
  std::__shared_weak_count::__release_weak(v26);
  unint64_t v27 = v61;
  if (!v61) {
    goto LABEL_51;
  }
LABEL_50:
  if (atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_51;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  if (SHIBYTE(v67) < 0) {
    goto LABEL_69;
  }
LABEL_52:
  if ((SHIBYTE(v72) & 0x80000000) == 0) {
    goto LABEL_53;
  }
LABEL_70:
  operator delete((void *)v71);
  if (SHIBYTE(v70) < 0) {
    goto LABEL_71;
  }
LABEL_54:
  if ((SBYTE7(v69) & 0x80000000) == 0) {
    goto LABEL_55;
  }
LABEL_72:
  operator delete((void *)__p);
  long long v28 = v73[0];
  if (!v73[0]) {
    goto LABEL_73;
  }
LABEL_56:
  int v29 = v73[1];
  if (v73[1] == v28)
  {
    v73[1] = v28;
    operator delete(v28);
    if (SHIBYTE(v56[2]) < 0) {
      goto LABEL_58;
    }
    goto LABEL_74;
  }
  while (2)
  {
    while (2)
    {
      if (*((char *)v29 - 1) < 0)
      {
        operator delete(*((void **)v29 - 3));
        if (*((char *)v29 - 25) < 0) {
          break;
        }
        goto LABEL_60;
      }
      if ((*((char *)v29 - 25) & 0x80000000) == 0)
      {
LABEL_60:
        v29 -= 3;
        if (v29 == v28) {
          goto LABEL_64;
        }
        continue;
      }
      break;
    }
    operator delete(*((void **)v29 - 6));
    v29 -= 3;
    if (v29 != v28) {
      continue;
    }
    break;
  }
LABEL_64:
  v73[1] = v28;
  operator delete(v73[0]);
  if (SHIBYTE(v56[2]) < 0) {
LABEL_58:
  }
    operator delete(v56[0]);
LABEL_74:
  sub_10BF184(a1, (uint64_t)v80, a3, (uint64_t)v56);
  sub_151A144(a4, 0, 0);
  uint64_t v30 = *(unsigned int *)(a2 + 32);
  if ((int)v30 >= 1)
  {
    for (uint64_t i = 0; v30 != i; ++i)
    {
      uint64_t v32 = *(void *)(*(void *)(a2 + 40) + 8 * i + 8);
      v33 = *(_DWORD **)(a4 + 40);
      if (v33 && (uint64_t v34 = *(int *)(a4 + 32), (int)v34 < *v33))
      {
        *(_DWORD *)(a4 + 32) = v34 + 1;
        uint64_t v35 = *(void *)&v33[2 * v34 + 2];
        uint64_t v36 = v77[i];
        if (v36 == -1) {
          goto LABEL_80;
        }
      }
      else
      {
        uint64_t v38 = sub_1520260(*(void *)(a4 + 24));
        uint64_t v35 = sub_188CDC8(a4 + 24, v38);
        uint64_t v36 = v77[i];
        if (v36 == -1)
        {
LABEL_80:
          v37 = sub_10C3CC0(*(void **)(a1 + 88), v32);
          if (!v37) {
            sub_5AE8("unordered_map::at: key not found");
          }
          sub_151BE3C(v35, (uint64_t)(v37 + 9));
          continue;
        }
      }
      sub_151BE3C(v35, *((void *)v56[5] + v36 + 1));
      uint64_t v39 = *(void *)(a1 + 88);
      v75[0] = v32;
      v40 = sub_10C3E08(v39, v32, (uint64_t)&unk_20F06E0, v75);
      sub_151BE3C((uint64_t)(v40 + 9), v35);
    }
  }
  int v41 = *(_DWORD *)(a4 + 16);
  *(_DWORD *)(a4 + 56) = v57;
  v42 = (long long *)((unint64_t)v56[6] & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a4 + 16) = v41 | 3;
  uint64_t v43 = *(void *)(a4 + 8);
  v44 = (uint64_t *)(v43 & 0xFFFFFFFFFFFFFFFCLL);
  if (v43) {
    v44 = (uint64_t *)*v44;
  }
  sub_1881DF4((std::string **)(a4 + 48), v42, v44);
  HIBYTE(v74) = 13;
  strcpy((char *)v73, "Runtime.Total");
  sub_72688((uint64_t)v89);
  long long v66 = 0uLL;
  uint64_t v67 = 0;
  uint64_t v72 = 0;
  long long v70 = 0u;
  long long v71 = 0u;
  long long __p = 0u;
  long long v69 = 0u;
  char v55 = 0;
  LOBYTE(v54) = 0;
  uint64_t v52 = 0;
  v53 = 0;
  uint64_t v50 = 0;
  v51 = 0;
  sub_29DC44((uint64_t)v75, (long long **)&v66, &__p, &v54, &v52, 0, (uint64_t)&v50, 1);
  nullsub_1(10);
  sub_29E11C((uint64_t)v75);
  v45 = v51;
  if (!v51 || atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    v46 = v53;
    if (v53) {
      goto LABEL_89;
    }
LABEL_90:
    if ((v55 & 0x80000000) == 0) {
      goto LABEL_91;
    }
LABEL_109:
    operator delete((void *)v54);
    if (SHIBYTE(v72) < 0) {
      goto LABEL_110;
    }
LABEL_92:
    if ((SHIBYTE(v70) & 0x80000000) == 0) {
      goto LABEL_93;
    }
LABEL_111:
    operator delete(*((void **)&v69 + 1));
    if (SBYTE7(v69) < 0) {
      goto LABEL_112;
    }
LABEL_94:
    v47 = (void **)v66;
    if ((void)v66) {
      goto LABEL_95;
    }
LABEL_113:
    if (SHIBYTE(v74) < 0) {
      goto LABEL_97;
    }
LABEL_114:
    sub_151A3A4(v56);
    v49 = v77;
    if (v77) {
      goto LABEL_115;
    }
    goto LABEL_116;
  }
  ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
  std::__shared_weak_count::__release_weak(v45);
  v46 = v53;
  if (!v53) {
    goto LABEL_90;
  }
LABEL_89:
  if (atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_90;
  }
  ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
  std::__shared_weak_count::__release_weak(v46);
  if (v55 < 0) {
    goto LABEL_109;
  }
LABEL_91:
  if ((SHIBYTE(v72) & 0x80000000) == 0) {
    goto LABEL_92;
  }
LABEL_110:
  operator delete((void *)v71);
  if (SHIBYTE(v70) < 0) {
    goto LABEL_111;
  }
LABEL_93:
  if ((SBYTE7(v69) & 0x80000000) == 0) {
    goto LABEL_94;
  }
LABEL_112:
  operator delete((void *)__p);
  v47 = (void **)v66;
  if (!(void)v66) {
    goto LABEL_113;
  }
LABEL_95:
  v48 = (void **)*((void *)&v66 + 1);
  if (*((void ***)&v66 + 1) == v47)
  {
    *((void *)&v66 + 1) = v47;
    operator delete(v47);
    if (SHIBYTE(v74) < 0) {
      goto LABEL_97;
    }
    goto LABEL_114;
  }
  while (2)
  {
    while (2)
    {
      if (*((char *)v48 - 1) < 0)
      {
        operator delete(*(v48 - 3));
        if (*((char *)v48 - 25) < 0) {
          break;
        }
        goto LABEL_100;
      }
      if ((*((char *)v48 - 25) & 0x80000000) == 0)
      {
LABEL_100:
        v48 -= 6;
        if (v48 == v47) {
          goto LABEL_104;
        }
        continue;
      }
      break;
    }
    operator delete(*(v48 - 6));
    v48 -= 6;
    if (v48 != v47) {
      continue;
    }
    break;
  }
LABEL_104:
  *((void *)&v66 + 1) = v47;
  operator delete((void *)v66);
  if ((SHIBYTE(v74) & 0x80000000) == 0) {
    goto LABEL_114;
  }
LABEL_97:
  operator delete(v73[0]);
  sub_151A3A4(v56);
  v49 = v77;
  if (!v77) {
    goto LABEL_116;
  }
LABEL_115:
  operator delete(v49);
LABEL_116:
  sub_1517768(v80);
  std::mutex::unlock((std::mutex *)(a1 + 112));
}

void sub_10BEF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::mutex *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,char a53)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a53);
  char v55 = *(void **)(v53 - 224);
  if (v55) {
    operator delete(v55);
  }
  sub_1517768(v53 - 200);
  std::mutex::unlock(a9);
  _Unwind_Resume(a1);
}

void sub_10BF170()
{
  if (!*(void *)(v0 - 224)) {
    JUMPOUT(0x10BF158);
  }
  JUMPOUT(0x10BF154);
}

uint64_t sub_10BF184@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v7 = *(int *)(a2 + 32);
  if (!v7)
  {
    unint64_t v7 = 0;
LABEL_29:
    unint64_t v27 = (long long *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
    return sub_10C177C(v27, v7, a4);
  }
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (uint64_t *)(v8 + 8);
  if (!v8) {
    uint64_t v9 = 0;
  }
  int v10 = 0;
  uint64_t v11 = (v7 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (!v11)
  {
    uint64_t v15 = v9;
LABEL_11:
    uint64_t v18 = &v9[v7];
    do
    {
      uint64_t v19 = *v15++;
      v10 += *(_DWORD *)(v19 + 32);
    }
    while (v15 != v18);
    goto LABEL_13;
  }
  int v12 = 0;
  uint64_t v13 = v11 + 1;
  uint64_t v14 = (v11 + 1) & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v15 = &v9[v14];
  uint64_t v16 = v9 + 1;
  uint64_t v17 = v14;
  do
  {
    v10 += *(_DWORD *)(*(v16 - 1) + 32);
    v12 += *(_DWORD *)(*v16 + 32);
    v16 += 2;
    v17 -= 2;
  }
  while (v17);
  v10 += v12;
  if (v13 != v14) {
    goto LABEL_11;
  }
LABEL_13:
  if (!v10) {
    goto LABEL_29;
  }
  sub_10C1900(a1, a2, a3, (uint64_t)v183);
  if (!v189)
  {
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v177);
      sub_188FC78(&v177, (uint64_t)"Generating empty fare route responses for ", 42);
      int v29 = (void *)std::ostream::operator<<();
      sub_188FC78(v29, (uint64_t)" fare routes.", 13);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 2u);
      if (SBYTE7(v169) < 0) {
        operator delete((void *)__p);
      }
      if (v181 < 0) {
        operator delete(v180);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    uint64_t result = sub_10C177C((long long *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL), *(int *)(a2 + 32), a4);
    goto LABEL_374;
  }
  int v20 = (unsigned __int8 *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v21 = v187 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v22 = v20[23];
  if ((v22 & 0x80u) == 0) {
    uint64_t v23 = v20[23];
  }
  else {
    uint64_t v23 = *((void *)v20 + 1);
  }
  uint64_t v24 = *(unsigned __int8 *)(v21 + 23);
  int v25 = (char)v24;
  if ((v24 & 0x80u) != 0) {
    uint64_t v24 = *(void *)(v21 + 8);
  }
  if (v23 == v24)
  {
    if (v25 >= 0) {
      long long v26 = (unsigned __int8 *)(v187 & 0xFFFFFFFFFFFFFFFELL);
    }
    else {
      long long v26 = *(unsigned __int8 **)v21;
    }
    if ((v22 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)v20, v26, *((void *)v20 + 1))) {
        goto LABEL_68;
      }
    }
    else
    {
      if (!v20[23]) {
        goto LABEL_68;
      }
      while (*v20 == *v26)
      {
        ++v20;
        ++v26;
        if (!--v22) {
          goto LABEL_68;
        }
      }
    }
  }
  uint64_t v175 = 0;
  v176[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v176[1] = xmmword_20B9280;
  strcpy(v176[0], "Warn.FareResponse.PrecacheMismatch");
  v173 = 0;
  v174 = 0;
  uint64_t v172 = 0;
  long long v170 = 0u;
  long long v171 = 0u;
  long long __p = 0u;
  long long v169 = 0u;
  char v167 = 0;
  LOBYTE(v166[0]) = 0;
  uint64_t v164 = 0;
  v165 = 0;
  uint64_t v162 = 0;
  v163 = 0;
  sub_29DC44((uint64_t)&v177, (long long **)&v173, &__p, (long long *)v166, &v164, 0, (uint64_t)&v162, 1);
  nullsub_1(10);
  sub_29E11C((uint64_t)&v177);
  uint64_t v30 = v163;
  if (v163 && !atomic_fetch_add(&v163->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  __int16 v31 = v165;
  if (v165 && !atomic_fetch_add(&v165->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  if (v167 < 0)
  {
    operator delete(v166[0]);
    if ((SHIBYTE(v172) & 0x80000000) == 0)
    {
LABEL_48:
      if ((SHIBYTE(v170) & 0x80000000) == 0) {
        goto LABEL_49;
      }
      goto LABEL_64;
    }
  }
  else if ((SHIBYTE(v172) & 0x80000000) == 0)
  {
    goto LABEL_48;
  }
  operator delete((void *)v171);
  if ((SHIBYTE(v170) & 0x80000000) == 0)
  {
LABEL_49:
    if ((SBYTE7(v169) & 0x80000000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_65;
  }
LABEL_64:
  operator delete(*((void **)&v169 + 1));
  if ((SBYTE7(v169) & 0x80000000) == 0)
  {
LABEL_50:
    uint64_t v32 = (void **)v173;
    if (v173) {
      goto LABEL_51;
    }
LABEL_66:
    if (SHIBYTE(v176[2]) < 0) {
      goto LABEL_53;
    }
LABEL_67:
    if (!v189) {
      goto LABEL_372;
    }
    goto LABEL_68;
  }
LABEL_65:
  operator delete((void *)__p);
  uint64_t v32 = (void **)v173;
  if (!v173) {
    goto LABEL_66;
  }
LABEL_51:
  v33 = v174;
  if (v174 == v32)
  {
    v174 = v32;
    operator delete(v32);
    if (SHIBYTE(v176[2]) < 0) {
      goto LABEL_53;
    }
    goto LABEL_67;
  }
  do
  {
    while (*((char *)v33 - 1) < 0)
    {
      operator delete(*(v33 - 3));
      if (*((char *)v33 - 25) < 0) {
        goto LABEL_59;
      }
LABEL_56:
      v33 -= 6;
      if (v33 == v32) {
        goto LABEL_60;
      }
    }
    if ((*((char *)v33 - 25) & 0x80000000) == 0) {
      goto LABEL_56;
    }
LABEL_59:
    operator delete(*(v33 - 6));
    v33 -= 6;
  }
  while (v33 != v32);
LABEL_60:
  v174 = v32;
  operator delete(v173);
  if ((SHIBYTE(v176[2]) & 0x80000000) == 0) {
    goto LABEL_67;
  }
LABEL_53:
  operator delete(v176[0]);
  if (!v189) {
    goto LABEL_372;
  }
LABEL_68:
  if (v188 != 1)
  {
    int v41 = sub_1517000(v188);
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)&v177);
      v42 = sub_188FC78(&v177, (uint64_t)"The external fare service failed with a fare response status of ", 64);
      int v43 = *((char *)v41 + 23);
      if (v43 >= 0) {
        uint64_t v44 = (uint64_t)v41;
      }
      else {
        uint64_t v44 = *v41;
      }
      if (v43 >= 0) {
        uint64_t v45 = *((unsigned __int8 *)v41 + 23);
      }
      else {
        uint64_t v45 = v41[1];
      }
      v46 = sub_188FC78(v42, v44, v45);
      v47 = sub_188FC78(v46, (uint64_t)" (precache: ", 12);
      unint64_t v48 = *(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL;
      int v49 = *(char *)(v48 + 23);
      if (v49 >= 0) {
        unint64_t v50 = *(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL;
      }
      else {
        unint64_t v50 = *(void *)v48;
      }
      if (v49 >= 0) {
        uint64_t v51 = *(unsigned __int8 *)(v48 + 23);
      }
      else {
        uint64_t v51 = *(void *)(v48 + 8);
      }
      uint64_t v52 = sub_188FC78(v47, v50, v51);
      sub_188FC78(v52, (uint64_t)").", 2);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if (SBYTE7(v169) < 0) {
        operator delete((void *)__p);
      }
      if (v181 < 0) {
        operator delete(v180);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    std::operator+<char>();
    v173 = 0;
    v174 = 0;
    uint64_t v175 = 0;
    uint64_t v172 = 0;
    long long v170 = 0u;
    long long v171 = 0u;
    long long __p = 0u;
    long long v169 = 0u;
    char v167 = 0;
    LOBYTE(v166[0]) = 0;
    uint64_t v160 = 0;
    v161 = 0;
    uint64_t v158 = 0;
    v159 = 0;
    sub_29DC44((uint64_t)&v177, (long long **)&v173, &__p, (long long *)v166, &v160, 0, (uint64_t)&v158, 1);
    nullsub_1(10);
    sub_29E11C((uint64_t)&v177);
    uint64_t v53 = v159;
    if (v159 && !atomic_fetch_add(&v159->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
    long long v54 = v161;
    if (v161 && !atomic_fetch_add(&v161->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
    if (v167 < 0)
    {
      operator delete(v166[0]);
      if ((SHIBYTE(v172) & 0x80000000) == 0)
      {
LABEL_116:
        if ((SHIBYTE(v170) & 0x80000000) == 0) {
          goto LABEL_117;
        }
        goto LABEL_138;
      }
    }
    else if ((SHIBYTE(v172) & 0x80000000) == 0)
    {
      goto LABEL_116;
    }
    operator delete((void *)v171);
    if ((SHIBYTE(v170) & 0x80000000) == 0)
    {
LABEL_117:
      if ((SBYTE7(v169) & 0x80000000) == 0) {
        goto LABEL_118;
      }
      goto LABEL_139;
    }
LABEL_138:
    operator delete(*((void **)&v169 + 1));
    if ((SBYTE7(v169) & 0x80000000) == 0)
    {
LABEL_118:
      char v55 = (void **)v173;
      if (v173) {
        goto LABEL_119;
      }
      goto LABEL_140;
    }
LABEL_139:
    operator delete((void *)__p);
    char v55 = (void **)v173;
    if (v173)
    {
LABEL_119:
      v56 = v174;
      int v57 = v55;
      if (v174 == v55)
      {
LABEL_127:
        v174 = v55;
        operator delete(v57);
        if ((SHIBYTE(v176[2]) & 0x80000000) == 0)
        {
LABEL_141:
          v59 = (char *)operator new(0x20uLL);
          uint64_t v175 = 0;
          v176[0] = v59;
          *(_OWORD *)&v176[1] = xmmword_20B8870;
          strcpy(v59, "Error.FareResponse.Status");
          v173 = 0;
          v174 = 0;
          uint64_t v172 = 0;
          long long v170 = 0u;
          long long v171 = 0u;
          long long __p = 0u;
          long long v169 = 0u;
          char v167 = 0;
          LOBYTE(v166[0]) = 0;
          uint64_t v156 = 0;
          v157 = 0;
          uint64_t v154 = 0;
          v155 = 0;
          sub_29DC44((uint64_t)&v177, (long long **)&v173, &__p, (long long *)v166, &v156, 0, (uint64_t)&v154, 1);
          nullsub_1(10);
          sub_29E11C((uint64_t)&v177);
          uint64_t v60 = v155;
          if (v155 && !atomic_fetch_add(&v155->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
          v61 = v157;
          if (v157 && !atomic_fetch_add(&v157->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
          if (v167 < 0)
          {
            operator delete(v166[0]);
            if ((SHIBYTE(v172) & 0x80000000) == 0)
            {
LABEL_149:
              if ((SHIBYTE(v170) & 0x80000000) == 0) {
                goto LABEL_150;
              }
              goto LABEL_155;
            }
          }
          else if ((SHIBYTE(v172) & 0x80000000) == 0)
          {
            goto LABEL_149;
          }
          operator delete((void *)v171);
          if ((SHIBYTE(v170) & 0x80000000) == 0)
          {
LABEL_150:
            if ((SBYTE7(v169) & 0x80000000) == 0) {
              goto LABEL_151;
            }
            goto LABEL_156;
          }
LABEL_155:
          operator delete(*((void **)&v169 + 1));
          if ((SBYTE7(v169) & 0x80000000) == 0)
          {
LABEL_151:
            v40 = (void **)v173;
            if (!v173) {
              goto LABEL_178;
            }
            goto LABEL_157;
          }
LABEL_156:
          operator delete((void *)__p);
          v40 = (void **)v173;
          if (!v173) {
            goto LABEL_178;
          }
LABEL_157:
          uint64_t v62 = v174;
          v63 = v40;
          if (v174 == v40) {
            goto LABEL_177;
          }
          while (1)
          {
            if (*((char *)v62 - 1) < 0)
            {
              operator delete(*(v62 - 3));
              if ((*((char *)v62 - 25) & 0x80000000) == 0) {
                goto LABEL_160;
              }
LABEL_163:
              operator delete(*(v62 - 6));
              v62 -= 6;
              if (v62 == v40)
              {
LABEL_176:
                v63 = v173;
                goto LABEL_177;
              }
            }
            else
            {
              if (*((char *)v62 - 25) < 0) {
                goto LABEL_163;
              }
LABEL_160:
              v62 -= 6;
              if (v62 == v40) {
                goto LABEL_176;
              }
            }
          }
        }
LABEL_128:
        operator delete(v176[0]);
        goto LABEL_141;
      }
      while (1)
      {
        if (*((char *)v56 - 1) < 0)
        {
          operator delete(*(v56 - 3));
          if ((*((char *)v56 - 25) & 0x80000000) == 0) {
            goto LABEL_122;
          }
LABEL_125:
          operator delete(*(v56 - 6));
          v56 -= 6;
          if (v56 == v55)
          {
LABEL_126:
            int v57 = v173;
            goto LABEL_127;
          }
        }
        else
        {
          if (*((char *)v56 - 25) < 0) {
            goto LABEL_125;
          }
LABEL_122:
          v56 -= 6;
          if (v56 == v55) {
            goto LABEL_126;
          }
        }
      }
    }
LABEL_140:
    if ((SHIBYTE(v176[2]) & 0x80000000) == 0) {
      goto LABEL_141;
    }
    goto LABEL_128;
  }
  if (v185 <= *(_DWORD *)(a2 + 32))
  {
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v177);
      sub_188FC78(&v177, (uint64_t)"Successfully received ", 22);
      if (!v189)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      uint64_t v58 = (void *)std::ostream::operator<<();
      sub_188FC78(v58, (uint64_t)" fare route responses from the fare service.", 44);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 2u);
      if (SBYTE7(v169) < 0) {
        operator delete((void *)__p);
      }
      if (v181 < 0) {
        operator delete(v180);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    goto LABEL_180;
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v177);
    sub_188FC78(&v177, (uint64_t)"Requested ", 10);
    uint64_t v34 = (void *)std::ostream::operator<<();
    sub_188FC78(v34, (uint64_t)" fare route responses from the fare service but received ", 57);
    if (!v189 || (uint64_t v35 = (void *)std::ostream::operator<<(), sub_188FC78(v35, (uint64_t)". Ignoring ", 11), !v189))
    {
      v126 = __cxa_allocate_exception(8uLL);
      void *v126 = &off_2439078;
    }
    uint64_t v36 = (void *)std::ostream::operator<<();
    sub_188FC78(v36, (uint64_t)" fare routes.", 13);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (SBYTE7(v169) < 0) {
      operator delete((void *)__p);
    }
    if (v181 < 0) {
      operator delete(v180);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  v37 = (char *)operator new(0x20uLL);
  uint64_t v175 = 0;
  v176[0] = v37;
  *(_OWORD *)&v176[1] = xmmword_20B91A0;
  strcpy(v37, "Error.FareResponse.TooLarge");
  v173 = 0;
  v174 = 0;
  uint64_t v172 = 0;
  long long v170 = 0u;
  long long v171 = 0u;
  long long __p = 0u;
  long long v169 = 0u;
  char v167 = 0;
  LOBYTE(v166[0]) = 0;
  uint64_t v152 = 0;
  v153 = 0;
  uint64_t v150 = 0;
  v151 = 0;
  sub_29DC44((uint64_t)&v177, (long long **)&v173, &__p, (long long *)v166, &v152, 0, (uint64_t)&v150, 1);
  nullsub_1(10);
  sub_29E11C((uint64_t)&v177);
  uint64_t v38 = v151;
  if (v151 && !atomic_fetch_add(&v151->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  uint64_t v39 = v153;
  if (v153 && !atomic_fetch_add(&v153->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  if (v167 < 0)
  {
    operator delete(v166[0]);
    if (SHIBYTE(v172) < 0) {
      goto LABEL_166;
    }
LABEL_86:
    if ((SHIBYTE(v170) & 0x80000000) == 0) {
      goto LABEL_87;
    }
LABEL_167:
    operator delete(*((void **)&v169 + 1));
    if (SBYTE7(v169) < 0) {
      goto LABEL_168;
    }
LABEL_88:
    v40 = (void **)v173;
    if (!v173) {
      goto LABEL_178;
    }
LABEL_169:
    uint64_t v64 = v174;
    v63 = v40;
    if (v174 == v40)
    {
LABEL_177:
      v174 = v40;
      operator delete(v63);
      goto LABEL_178;
    }
    while (1)
    {
      if (*((char *)v64 - 1) < 0)
      {
        operator delete(*(v64 - 3));
        if ((*((char *)v64 - 25) & 0x80000000) == 0) {
          goto LABEL_172;
        }
LABEL_175:
        operator delete(*(v64 - 6));
        v64 -= 6;
        if (v64 == v40) {
          goto LABEL_176;
        }
      }
      else
      {
        if (*((char *)v64 - 25) < 0) {
          goto LABEL_175;
        }
LABEL_172:
        v64 -= 6;
        if (v64 == v40) {
          goto LABEL_176;
        }
      }
    }
  }
  if ((SHIBYTE(v172) & 0x80000000) == 0) {
    goto LABEL_86;
  }
LABEL_166:
  operator delete((void *)v171);
  if (SHIBYTE(v170) < 0) {
    goto LABEL_167;
  }
LABEL_87:
  if ((SBYTE7(v169) & 0x80000000) == 0) {
    goto LABEL_88;
  }
LABEL_168:
  operator delete((void *)__p);
  v40 = (void **)v173;
  if (v173) {
    goto LABEL_169;
  }
LABEL_178:
  if (SHIBYTE(v176[2]) < 0) {
    operator delete(v176[0]);
  }
LABEL_180:
  if (!v189)
  {
    v124 = __cxa_allocate_exception(8uLL);
    void *v124 = &off_2439078;
  }
  unsigned int v65 = *(_DWORD *)(a2 + 32);
  if ((int)v65 >= v185) {
    uint64_t v66 = v185;
  }
  else {
    uint64_t v66 = v65;
  }
  if ((int)v66 >= 1)
  {
    uint64_t v67 = 0;
    while (1)
    {
      if (!v189)
      {
        v122 = __cxa_allocate_exception(8uLL);
        void *v122 = &off_2439078;
      }
      uint64_t v68 = *(void *)(*(void *)(a2 + 40) + 8 * v67 + 8);
      uint64_t v69 = *(void *)&v186[2 * v67 + 2];
      int v70 = *(_DWORD *)(v69 + 112);
      if (v70 == 1) {
        goto LABEL_267;
      }
      long long v71 = sub_15170E8(v70);
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)&v177);
        sub_188FC78(&v177, (uint64_t)"Fare route response ", 20);
        uint64_t v72 = (void *)std::ostream::operator<<();
        sub_188FC78(v72, (uint64_t)" of ", 4);
        v73 = (void *)std::ostream::operator<<();
        uint64_t v74 = sub_188FC78(v73, (uint64_t)" has status ", 12);
        int v75 = *((char *)v71 + 23);
        if (v75 >= 0) {
          uint64_t v76 = (uint64_t)v71;
        }
        else {
          uint64_t v76 = *v71;
        }
        if (v75 >= 0) {
          uint64_t v77 = *((unsigned __int8 *)v71 + 23);
        }
        else {
          uint64_t v77 = v71[1];
        }
        v78 = sub_188FC78(v74, v76, v77);
        v79 = sub_188FC78(v78, (uint64_t)" (request precache: ", 20);
        unint64_t v80 = *(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL;
        int v81 = *(char *)(v80 + 23);
        if (v81 >= 0) {
          unint64_t v82 = *(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL;
        }
        else {
          unint64_t v82 = *(void *)v80;
        }
        if (v81 >= 0) {
          uint64_t v83 = *(unsigned __int8 *)(v80 + 23);
        }
        else {
          uint64_t v83 = *(void *)(v80 + 8);
        }
        int v84 = sub_188FC78(v79, v82, v83);
        v85 = sub_188FC78(v84, (uint64_t)"; response precache: ", 21);
        if (!v189)
        {
          v123 = __cxa_allocate_exception(8uLL);
          void *v123 = &off_2439078;
        }
        unint64_t v86 = v187 & 0xFFFFFFFFFFFFFFFELL;
        int v87 = *(char *)((v187 & 0xFFFFFFFFFFFFFFFELL) + 23);
        if (v87 >= 0) {
          unint64_t v88 = v187 & 0xFFFFFFFFFFFFFFFELL;
        }
        else {
          unint64_t v88 = *(void *)v86;
        }
        if (v87 >= 0) {
          uint64_t v89 = *(unsigned __int8 *)(v86 + 23);
        }
        else {
          uint64_t v89 = *(void *)(v86 + 8);
        }
        v90 = sub_188FC78(v85, v88, v89);
        sub_188FC78(v90, (uint64_t)"). Using empty fare route instead.", 34);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 1u);
        if (SBYTE7(v169) < 0) {
          operator delete((void *)__p);
        }
        uint64_t v177 = v129;
        *(uint64_t *)((char *)&v177 + *(void *)(v129 - 24)) = v128;
        if (v181 < 0) {
          operator delete(v180);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      sub_151AC70((uint64_t)&v177, 0, 0);
      v179 |= 1u;
      int v182 = 0;
      sub_151BE3C(v69, (uint64_t)&v177);
      sub_151AFE4(&v177);
      std::operator+<char>();
      v173 = 0;
      v174 = 0;
      uint64_t v175 = 0;
      uint64_t v172 = 0;
      long long v170 = 0u;
      long long v171 = 0u;
      long long __p = 0u;
      long long v169 = 0u;
      char v167 = 0;
      LOBYTE(v166[0]) = 0;
      uint64_t v148 = 0;
      v149 = 0;
      uint64_t v146 = 0;
      v147 = 0;
      sub_29DC44((uint64_t)&v177, (long long **)&v173, &__p, (long long *)v166, &v148, 0, (uint64_t)&v146, 1);
      nullsub_1(10);
      sub_29E11C((uint64_t)&v177);
      v91 = v147;
      if (v147 && !atomic_fetch_add(&v147->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
        v92 = v149;
        if (!v149) {
          goto LABEL_221;
        }
      }
      else
      {
        v92 = v149;
        if (!v149) {
          goto LABEL_221;
        }
      }
      if (!atomic_fetch_add(&v92->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
LABEL_221:
      if (v167 < 0)
      {
        operator delete(v166[0]);
        if ((SHIBYTE(v172) & 0x80000000) == 0)
        {
LABEL_223:
          if ((SHIBYTE(v170) & 0x80000000) == 0) {
            goto LABEL_224;
          }
          goto LABEL_238;
        }
      }
      else if ((SHIBYTE(v172) & 0x80000000) == 0)
      {
        goto LABEL_223;
      }
      operator delete((void *)v171);
      if ((SHIBYTE(v170) & 0x80000000) == 0)
      {
LABEL_224:
        if (SBYTE7(v169) < 0) {
          goto LABEL_239;
        }
        goto LABEL_225;
      }
LABEL_238:
      operator delete(*((void **)&v169 + 1));
      if (SBYTE7(v169) < 0)
      {
LABEL_239:
        operator delete((void *)__p);
        v93 = (void **)v173;
        if (!v173)
        {
LABEL_240:
          if (SHIBYTE(v176[2]) < 0) {
            goto LABEL_228;
          }
          goto LABEL_241;
        }
        goto LABEL_226;
      }
LABEL_225:
      v93 = (void **)v173;
      if (!v173) {
        goto LABEL_240;
      }
LABEL_226:
      v94 = v174;
      if (v174 == v93)
      {
        v174 = v93;
        operator delete(v93);
        if (SHIBYTE(v176[2]) < 0) {
          goto LABEL_228;
        }
        goto LABEL_241;
      }
      do
      {
        while (*((char *)v94 - 1) < 0)
        {
          operator delete(*(v94 - 3));
          if (*((char *)v94 - 25) < 0) {
            goto LABEL_233;
          }
LABEL_230:
          v94 -= 6;
          if (v94 == v93) {
            goto LABEL_234;
          }
        }
        if ((*((char *)v94 - 25) & 0x80000000) == 0) {
          goto LABEL_230;
        }
LABEL_233:
        operator delete(*(v94 - 6));
        v94 -= 6;
      }
      while (v94 != v93);
LABEL_234:
      v174 = v93;
      operator delete(v173);
      if (SHIBYTE(v176[2]) < 0) {
LABEL_228:
      }
        operator delete(v176[0]);
LABEL_241:
      strcpy((char *)v176, "Error.FareRoute.Status");
      HIBYTE(v176[2]) = 22;
      v173 = 0;
      v174 = 0;
      uint64_t v175 = 0;
      uint64_t v172 = 0;
      long long v170 = 0u;
      long long v171 = 0u;
      long long __p = 0u;
      long long v169 = 0u;
      char v167 = 0;
      LOBYTE(v166[0]) = 0;
      uint64_t v144 = 0;
      v145 = 0;
      uint64_t v142 = 0;
      v143 = 0;
      sub_29DC44((uint64_t)&v177, (long long **)&v173, &__p, (long long *)v166, &v144, 0, (uint64_t)&v142, 1);
      nullsub_1(10);
      sub_29E11C((uint64_t)&v177);
      v95 = v143;
      if (v143 && !atomic_fetch_add(&v143->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
        v96 = v145;
        if (v145) {
          goto LABEL_244;
        }
      }
      else
      {
        v96 = v145;
        if (v145)
        {
LABEL_244:
          if (!atomic_fetch_add(&v96->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
          }
        }
      }
      if (v167 < 0)
      {
        operator delete(v166[0]);
        if (SHIBYTE(v172) < 0) {
          goto LABEL_263;
        }
LABEL_249:
        if ((SHIBYTE(v170) & 0x80000000) == 0) {
          goto LABEL_250;
        }
LABEL_264:
        operator delete(*((void **)&v169 + 1));
        if (SBYTE7(v169) < 0) {
          goto LABEL_265;
        }
LABEL_251:
        v97 = (void **)v173;
        if (!v173)
        {
LABEL_266:
          if (SHIBYTE(v176[2]) < 0) {
            goto LABEL_254;
          }
          goto LABEL_267;
        }
      }
      else
      {
        if ((SHIBYTE(v172) & 0x80000000) == 0) {
          goto LABEL_249;
        }
LABEL_263:
        operator delete((void *)v171);
        if (SHIBYTE(v170) < 0) {
          goto LABEL_264;
        }
LABEL_250:
        if ((SBYTE7(v169) & 0x80000000) == 0) {
          goto LABEL_251;
        }
LABEL_265:
        operator delete((void *)__p);
        v97 = (void **)v173;
        if (!v173) {
          goto LABEL_266;
        }
      }
      v98 = v174;
      if (v174 == v97)
      {
        v174 = v97;
        operator delete(v97);
        if (SHIBYTE(v176[2]) < 0) {
          goto LABEL_254;
        }
        goto LABEL_267;
      }
      while (2)
      {
        while (2)
        {
          if (*((char *)v98 - 1) < 0)
          {
            operator delete(*(v98 - 3));
            if (*((char *)v98 - 25) < 0) {
              goto LABEL_259;
            }
LABEL_256:
            v98 -= 6;
            if (v98 == v97) {
              goto LABEL_260;
            }
            continue;
          }
          break;
        }
        if ((*((char *)v98 - 25) & 0x80000000) == 0) {
          goto LABEL_256;
        }
LABEL_259:
        operator delete(*(v98 - 6));
        v98 -= 6;
        if (v98 != v97) {
          continue;
        }
        break;
      }
LABEL_260:
      v174 = v97;
      operator delete(v173);
      if (SHIBYTE(v176[2]) < 0) {
LABEL_254:
      }
        operator delete(v176[0]);
LABEL_267:
      if (sub_10C46A0(v68, v69)) {
        goto LABEL_301;
      }
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)&v177);
        sub_188FC78(&v177, (uint64_t)"Fare route response ", 20);
        v99 = (void *)std::ostream::operator<<();
        sub_188FC78(v99, (uint64_t)" of ", 4);
        v100 = (void *)std::ostream::operator<<();
        sub_188FC78(v100, (uint64_t)" is inconsistent. Using empty fare route instead.", 49);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 1u);
        if (SBYTE7(v169) < 0) {
          operator delete((void *)__p);
        }
        uint64_t v177 = v129;
        *(uint64_t *)((char *)&v177 + *(void *)(v129 - 24)) = v128;
        if (v181 < 0) {
          operator delete(v180);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      sub_151AC70((uint64_t)&v177, 0, 0);
      v179 |= 1u;
      int v182 = 0;
      sub_151BE3C(v69, (uint64_t)&v177);
      sub_151AFE4(&v177);
      v101 = (char *)operator new(0x20uLL);
      uint64_t v175 = 0;
      v176[0] = v101;
      *(_OWORD *)&v176[1] = xmmword_20B91A0;
      strcpy(v101, "Error.FareRoute.Consistency");
      v173 = 0;
      v174 = 0;
      uint64_t v172 = 0;
      long long v170 = 0u;
      long long v171 = 0u;
      long long __p = 0u;
      long long v169 = 0u;
      char v167 = 0;
      LOBYTE(v166[0]) = 0;
      uint64_t v140 = 0;
      v141 = 0;
      uint64_t v138 = 0;
      v139 = 0;
      sub_29DC44((uint64_t)&v177, (long long **)&v173, &__p, (long long *)v166, &v140, 0, (uint64_t)&v138, 1);
      nullsub_1(10);
      sub_29E11C((uint64_t)&v177);
      v102 = v139;
      if (v139 && !atomic_fetch_add(&v139->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
        v103 = v141;
        if (v141) {
          goto LABEL_277;
        }
      }
      else
      {
        v103 = v141;
        if (v141)
        {
LABEL_277:
          if (!atomic_fetch_add(&v103->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
            std::__shared_weak_count::__release_weak(v103);
          }
        }
      }
      if (v167 < 0)
      {
        operator delete(v166[0]);
        if (SHIBYTE(v172) < 0) {
          goto LABEL_297;
        }
LABEL_282:
        if ((SHIBYTE(v170) & 0x80000000) == 0) {
          goto LABEL_283;
        }
LABEL_298:
        operator delete(*((void **)&v169 + 1));
        if (SBYTE7(v169) < 0) {
          goto LABEL_299;
        }
LABEL_284:
        v104 = (void **)v173;
        if (v173) {
          goto LABEL_285;
        }
LABEL_300:
        if ((SHIBYTE(v176[2]) & 0x80000000) == 0) {
          goto LABEL_301;
        }
LABEL_287:
        operator delete(v176[0]);
        if (*(_DWORD *)(v69 + 112) != 1) {
          goto LABEL_187;
        }
        goto LABEL_302;
      }
      if ((SHIBYTE(v172) & 0x80000000) == 0) {
        goto LABEL_282;
      }
LABEL_297:
      operator delete((void *)v171);
      if (SHIBYTE(v170) < 0) {
        goto LABEL_298;
      }
LABEL_283:
      if ((SBYTE7(v169) & 0x80000000) == 0) {
        goto LABEL_284;
      }
LABEL_299:
      operator delete((void *)__p);
      v104 = (void **)v173;
      if (!v173) {
        goto LABEL_300;
      }
LABEL_285:
      v105 = v174;
      if (v174 == v104)
      {
        v174 = v104;
        operator delete(v104);
        if ((SHIBYTE(v176[2]) & 0x80000000) == 0) {
          goto LABEL_301;
        }
        goto LABEL_287;
      }
      while (2)
      {
        while (2)
        {
          if (*((char *)v105 - 1) < 0)
          {
            operator delete(*(v105 - 3));
            if (*((char *)v105 - 25) < 0) {
              goto LABEL_293;
            }
LABEL_290:
            v105 -= 6;
            if (v105 == v104) {
              goto LABEL_294;
            }
            continue;
          }
          break;
        }
        if ((*((char *)v105 - 25) & 0x80000000) == 0) {
          goto LABEL_290;
        }
LABEL_293:
        operator delete(*(v105 - 6));
        v105 -= 6;
        if (v105 != v104) {
          continue;
        }
        break;
      }
LABEL_294:
      v174 = v104;
      operator delete(v173);
      if (SHIBYTE(v176[2]) < 0) {
        goto LABEL_287;
      }
LABEL_301:
      if (*(_DWORD *)(v69 + 112) != 1) {
        goto LABEL_187;
      }
LABEL_302:
      sub_15170E8(1);
      std::operator+<char>();
      v173 = 0;
      v174 = 0;
      uint64_t v175 = 0;
      uint64_t v172 = 0;
      long long v170 = 0u;
      long long v171 = 0u;
      long long __p = 0u;
      long long v169 = 0u;
      char v167 = 0;
      LOBYTE(v166[0]) = 0;
      uint64_t v136 = 0;
      v137 = 0;
      uint64_t v134 = 0;
      v135 = 0;
      sub_29DC44((uint64_t)&v177, (long long **)&v173, &__p, (long long *)v166, &v136, 0, (uint64_t)&v134, 1);
      nullsub_1(10);
      sub_29E11C((uint64_t)&v177);
      v106 = v135;
      if (v135 && !atomic_fetch_add(&v135->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
        v107 = v137;
        if (v137) {
          goto LABEL_305;
        }
      }
      else
      {
        v107 = v137;
        if (v137)
        {
LABEL_305:
          if (!atomic_fetch_add(&v107->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
          }
        }
      }
      if ((v167 & 0x80000000) == 0)
      {
        if ((SHIBYTE(v172) & 0x80000000) == 0) {
          goto LABEL_310;
        }
LABEL_315:
        operator delete((void *)v171);
        if (SHIBYTE(v170) < 0) {
          goto LABEL_316;
        }
LABEL_311:
        if ((SBYTE7(v169) & 0x80000000) == 0) {
          goto LABEL_312;
        }
LABEL_317:
        operator delete((void *)__p);
        v108 = (void **)v173;
        if (v173) {
          goto LABEL_318;
        }
LABEL_186:
        if (SHIBYTE(v176[2]) < 0) {
          goto LABEL_327;
        }
        goto LABEL_187;
      }
      operator delete(v166[0]);
      if (SHIBYTE(v172) < 0) {
        goto LABEL_315;
      }
LABEL_310:
      if ((SHIBYTE(v170) & 0x80000000) == 0) {
        goto LABEL_311;
      }
LABEL_316:
      operator delete(*((void **)&v169 + 1));
      if (SBYTE7(v169) < 0) {
        goto LABEL_317;
      }
LABEL_312:
      v108 = (void **)v173;
      if (!v173) {
        goto LABEL_186;
      }
LABEL_318:
      v109 = v174;
      if (v174 != v108)
      {
        while (1)
        {
          if (*((char *)v109 - 1) < 0)
          {
            operator delete(*(v109 - 3));
            if ((*((char *)v109 - 25) & 0x80000000) == 0) {
              goto LABEL_322;
            }
LABEL_325:
            operator delete(*(v109 - 6));
            v109 -= 6;
            if (v109 == v108)
            {
LABEL_326:
              v174 = v108;
              operator delete(v173);
              if (SHIBYTE(v176[2]) < 0) {
                goto LABEL_327;
              }
              goto LABEL_187;
            }
          }
          else
          {
            if (*((char *)v109 - 25) < 0) {
              goto LABEL_325;
            }
LABEL_322:
            v109 -= 6;
            if (v109 == v108) {
              goto LABEL_326;
            }
          }
        }
      }
      v174 = v108;
      operator delete(v108);
      if (SHIBYTE(v176[2]) < 0) {
LABEL_327:
      }
        operator delete(v176[0]);
LABEL_187:
      if (++v67 == v66)
      {
        if (!v189) {
          goto LABEL_372;
        }
        break;
      }
    }
  }
  if (v185 >= *(_DWORD *)(a2 + 32)) {
    goto LABEL_373;
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v177);
    sub_188FC78(&v177, (uint64_t)"Requested ", 10);
    v110 = (void *)std::ostream::operator<<();
    sub_188FC78(v110, (uint64_t)" fare route responses from the fare service but only received ", 62);
    if (!v189
      || (v111 = (void *)std::ostream::operator<<(),
          sub_188FC78(v111, (uint64_t)". Generating empty fare route responses for ", 44),
          !v189))
    {
      v125 = __cxa_allocate_exception(8uLL);
      void *v125 = &off_2439078;
    }
    v112 = (void *)std::ostream::operator<<();
    sub_188FC78(v112, (uint64_t)" missing fare routes.", 21);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (SBYTE7(v169) < 0) {
      operator delete((void *)__p);
    }
    if (v181 < 0) {
      operator delete(v180);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  v113 = (char *)operator new(0x20uLL);
  uint64_t v175 = 0;
  v176[0] = v113;
  *(_OWORD *)&v176[1] = xmmword_20B91A0;
  strcpy(v113, "Error.FareResponse.TooSmall");
  v173 = 0;
  v174 = 0;
  uint64_t v172 = 0;
  long long v170 = 0u;
  long long v171 = 0u;
  long long __p = 0u;
  long long v169 = 0u;
  char v167 = 0;
  LOBYTE(v166[0]) = 0;
  uint64_t v132 = 0;
  v133 = 0;
  uint64_t v130 = 0;
  v131 = 0;
  sub_29DC44((uint64_t)&v177, (long long **)&v173, &__p, (long long *)v166, &v132, 0, (uint64_t)&v130, 1);
  nullsub_1(10);
  sub_29E11C((uint64_t)&v177);
  v114 = v131;
  if (v131 && !atomic_fetch_add(&v131->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
    std::__shared_weak_count::__release_weak(v114);
  }
  v115 = v133;
  if (v133 && !atomic_fetch_add(&v133->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
    std::__shared_weak_count::__release_weak(v115);
  }
  if (v167 < 0)
  {
    operator delete(v166[0]);
    if ((SHIBYTE(v172) & 0x80000000) == 0)
    {
LABEL_346:
      if ((SHIBYTE(v170) & 0x80000000) == 0) {
        goto LABEL_347;
      }
      goto LABEL_362;
    }
  }
  else if ((SHIBYTE(v172) & 0x80000000) == 0)
  {
    goto LABEL_346;
  }
  operator delete((void *)v171);
  if ((SHIBYTE(v170) & 0x80000000) == 0)
  {
LABEL_347:
    if ((SBYTE7(v169) & 0x80000000) == 0) {
      goto LABEL_348;
    }
    goto LABEL_363;
  }
LABEL_362:
  operator delete(*((void **)&v169 + 1));
  if ((SBYTE7(v169) & 0x80000000) == 0)
  {
LABEL_348:
    v116 = (void **)v173;
    if (v173) {
      goto LABEL_349;
    }
LABEL_364:
    if ((SHIBYTE(v176[2]) & 0x80000000) == 0) {
      goto LABEL_365;
    }
    goto LABEL_351;
  }
LABEL_363:
  operator delete((void *)__p);
  v116 = (void **)v173;
  if (!v173) {
    goto LABEL_364;
  }
LABEL_349:
  v117 = v174;
  if (v174 == v116)
  {
    v174 = v116;
    operator delete(v116);
    if ((SHIBYTE(v176[2]) & 0x80000000) == 0) {
      goto LABEL_365;
    }
LABEL_351:
    operator delete(v176[0]);
    if (v189) {
      goto LABEL_366;
    }
    goto LABEL_372;
  }
  do
  {
    while (*((char *)v117 - 1) < 0)
    {
      operator delete(*(v117 - 3));
      if (*((char *)v117 - 25) < 0) {
        goto LABEL_357;
      }
LABEL_354:
      v117 -= 6;
      if (v117 == v116) {
        goto LABEL_358;
      }
    }
    if ((*((char *)v117 - 25) & 0x80000000) == 0) {
      goto LABEL_354;
    }
LABEL_357:
    operator delete(*(v117 - 6));
    v117 -= 6;
  }
  while (v117 != v116);
LABEL_358:
  v174 = v116;
  operator delete(v173);
  if (SHIBYTE(v176[2]) < 0) {
    goto LABEL_351;
  }
LABEL_365:
  if (!v189)
  {
LABEL_372:
    v121 = __cxa_allocate_exception(8uLL);
    void *v121 = &off_2439078;
  }
LABEL_366:
  while (1)
  {
    uint64_t v118 = v185;
    if (v185 >= *(_DWORD *)(a2 + 32)) {
      break;
    }
    if (v186 && v185 < *v186)
    {
      ++v185;
      uint64_t v119 = *(void *)&v186[2 * v118 + 2];
    }
    else
    {
      uint64_t v120 = sub_1520260(v184);
      uint64_t v119 = sub_188CDC8((uint64_t)&v184, v120);
    }
    sub_151AC70((uint64_t)&v177, 0, 0);
    v179 |= 1u;
    int v182 = 0;
    sub_151BE3C(v119, (uint64_t)&v177);
    sub_151AFE4(&v177);
    if (!v189) {
      goto LABEL_372;
    }
  }
LABEL_373:
  uint64_t result = sub_151A2F8(a4, v183);
LABEL_374:
  if (v189) {
    return sub_151A3A4(v183);
  }
  return result;
}

void sub_10C14B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t exception_object,uint64_t exception_object_8,uint64_t exception_object_16,uint64_t exception_object_24,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a60 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a72);
  if (!*(unsigned char *)(v72 - 112)) {
    _Unwind_Resume(a1);
  }
  sub_151A3A4(v72 - 176);
  _Unwind_Resume(a1);
}

unint64_t sub_10C177C@<X0>(long long *a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  sub_151A144(a3, 0, 0);
  *(_DWORD *)(a3 + 16) |= 1u;
  uint64_t v6 = *(void *)(a3 + 8);
  unint64_t v7 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
  if (v6) {
    unint64_t v7 = (uint64_t *)*v7;
  }
  sub_1881DF4((std::string **)(a3 + 48), a1, v7);
  *(_DWORD *)(a3 + 16) |= 2u;
  *(_DWORD *)(a3 + 56) = 0;
  while (1)
  {
    int v8 = *(_DWORD *)(a3 + 32);
    unint64_t result = sub_9CD338(a2);
    if (v8 >= (int)result) {
      break;
    }
    int v10 = *(_DWORD **)(a3 + 40);
    if (v10 && (uint64_t v11 = *(int *)(a3 + 32), (int)v11 < *v10))
    {
      *(_DWORD *)(a3 + 32) = v11 + 1;
      uint64_t v12 = *(void *)&v10[2 * v11 + 2];
    }
    else
    {
      uint64_t v13 = sub_1520260(*(void *)(a3 + 24));
      uint64_t v12 = sub_188CDC8(a3 + 24, v13);
    }
    sub_151AC70((uint64_t)v14, 0, 0);
    v15 |= 1u;
    int v16 = 0;
    sub_151BE3C(v12, (uint64_t)v14);
    sub_151AFE4(v14);
  }
  return result;
}

void sub_10C1894(_Unwind_Exception *a1)
{
  sub_151A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_10C18A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_151AFE4(va);
  sub_151A3A4(v2);
  _Unwind_Resume(a1);
}

void sub_10C18C4(_Unwind_Exception *a1)
{
  sub_151A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_10C18D8(_Unwind_Exception *a1)
{
  sub_151A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_10C18EC(_Unwind_Exception *a1)
{
  sub_151A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_10C1900(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(a1 + 96))
  {
    memset(&v127, 0, sizeof(v127));
    sub_1880F60(a2, &v127);
    long long v124 = 0u;
    long long v125 = 0u;
    int v126 = 1065353216;
    if (*(char *)(a1 + 71) < 0)
    {
      if (!*(void *)(a1 + 56)) {
        goto LABEL_14;
      }
    }
    else if (!*(unsigned char *)(a1 + 71))
    {
LABEL_14:
      unint64_t v7 = (void *)(a3 + 8);
      int v8 = *(char *)(a3 + 31);
      if (v8 < 0)
      {
        if (*(void *)(a3 + 16) != 27) {
          goto LABEL_31;
        }
        unint64_t v7 = (void *)*v7;
      }
      else if (v8 != 27)
      {
        goto LABEL_31;
      }
      uint64_t v9 = (void *)*v7;
      uint64_t v10 = v7[1];
      uint64_t v11 = v7[2];
      uint64_t v12 = *(void *)((char *)v7 + 19);
      if (v9 == (void *)0x6C7070612E6D6F63
        && v10 == 0x6F722E6F65672E65
        && v11 == 0x65642E676E697475
        && v12 == 0x6C657665642E676ELL)
      {
        sub_10C4418(&v124, "X-Apple-Internal-Test", "true");
      }
LABEL_31:
      int v16 = *(_DWORD *)(a1 + 80);
      LOBYTE(v117) = 1;
      *(void *)((char *)&v117 + 4) = *(void *)(a1 + 72);
      HIDWORD(v117) = v16;
      *(_OWORD *)uint64_t v128 = 0u;
      long long v129 = 0u;
      int v130 = 1065353216;
      sub_50A00(__p);
      uint64_t v17 = (char *)v129;
      if (!(void)v129)
      {
LABEL_38:
        uint64_t v19 = v128[0];
        v128[0] = 0;
        if (v19) {
          operator delete(v19);
        }
        sub_50A04((uint64_t)__p, (const std::string *)(a1 + 24));
        if (sub_723EC(2u))
        {
          sub_6BAC((uint64_t)v128);
          int v20 = sub_188FC78(v128, (uint64_t)"Sending fare request to ", 24);
          int v21 = *(char *)(a1 + 23);
          if (v21 >= 0) {
            uint64_t v22 = a1;
          }
          else {
            uint64_t v22 = *(void *)a1;
          }
          if (v21 >= 0) {
            uint64_t v23 = *(unsigned __int8 *)(a1 + 23);
          }
          else {
            uint64_t v23 = *(void *)(a1 + 8);
          }
          uint64_t v24 = sub_188FC78(v20, v22, v23);
          int v25 = sub_188FC78(v24, (uint64_t)" (proxy: ", 9);
          int v26 = *(char *)(a1 + 47);
          if (v26 >= 0) {
            uint64_t v27 = a1 + 24;
          }
          else {
            uint64_t v27 = *(void *)(a1 + 24);
          }
          if (v26 >= 0) {
            uint64_t v28 = *(unsigned __int8 *)(a1 + 47);
          }
          else {
            uint64_t v28 = *(void *)(a1 + 32);
          }
          int v29 = sub_188FC78(v25, v27, v28);
          sub_188FC78(v29, (uint64_t)", number of fare routes: ", 25);
          uint64_t v30 = (void *)std::ostream::operator<<();
          sub_188FC78(v30, (uint64_t)").", 2);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&v117, 2u);
          if (v118 < 0) {
            operator delete((void *)v117);
          }
          if (v132 < 0) {
            operator delete(v131);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        sub_50BC0((uint64_t)&v117);
        sub_725D0((uint64_t)v116);
        int v31 = sub_50520();
        BYTE7(v99[1]) = 18;
        strcpy((char *)v99, "CallTo.FareService");
        sub_72688((uint64_t)v116);
        memset(&v115, 0, sizeof(v115));
        uint64_t v114 = 0;
        long long v112 = 0u;
        long long v113 = 0u;
        long long v110 = 0u;
        long long v111 = 0u;
        HIBYTE(v109) = 0;
        LOBYTE(v108) = 0;
        uint64_t v106 = 0;
        v107 = 0;
        uint64_t v104 = 0;
        v105 = 0;
        sub_29DC44((uint64_t)v128, (long long **)&v115, &v110, &v108, &v106, 0, (uint64_t)&v104, 1);
        nullsub_1(10);
        sub_29E11C((uint64_t)v128);
        uint64_t v32 = v105;
        if (v105 && !atomic_fetch_add(&v105->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
          v33 = v107;
          if (!v107) {
            goto LABEL_62;
          }
        }
        else
        {
          v33 = v107;
          if (!v107) {
            goto LABEL_62;
          }
        }
        if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
          if ((SHIBYTE(v109) & 0x80000000) == 0)
          {
LABEL_63:
            if ((SHIBYTE(v114) & 0x80000000) == 0) {
              goto LABEL_64;
            }
            goto LABEL_103;
          }
LABEL_102:
          operator delete((void *)v108);
          if ((SHIBYTE(v114) & 0x80000000) == 0)
          {
LABEL_64:
            if ((SHIBYTE(v112) & 0x80000000) == 0) {
              goto LABEL_65;
            }
            goto LABEL_104;
          }
LABEL_103:
          operator delete((void *)v113);
          if ((SHIBYTE(v112) & 0x80000000) == 0)
          {
LABEL_65:
            if ((SBYTE7(v111) & 0x80000000) == 0) {
              goto LABEL_66;
            }
            goto LABEL_105;
          }
LABEL_104:
          operator delete(*((void **)&v111 + 1));
          if ((SBYTE7(v111) & 0x80000000) == 0)
          {
LABEL_66:
            uint64_t v34 = (void *)v115.__r_.__value_.__r.__words[0];
            if (v115.__r_.__value_.__r.__words[0]) {
              goto LABEL_67;
            }
            goto LABEL_106;
          }
LABEL_105:
          operator delete((void *)v110);
          uint64_t v34 = (void *)v115.__r_.__value_.__r.__words[0];
          if (v115.__r_.__value_.__r.__words[0])
          {
LABEL_67:
            std::string::size_type size = v115.__r_.__value_.__l.__size_;
            if ((void *)v115.__r_.__value_.__l.__size_ == v34)
            {
              v115.__r_.__value_.__l.__size_ = (std::string::size_type)v34;
              operator delete(v34);
              if (SBYTE7(v99[1]) < 0) {
                goto LABEL_69;
              }
              goto LABEL_107;
            }
            while (1)
            {
              if (*(char *)(size - 1) < 0)
              {
                operator delete(*(void **)(size - 24));
                if ((*(char *)(size - 25) & 0x80000000) == 0) {
                  goto LABEL_85;
                }
LABEL_88:
                operator delete(*(void **)(size - 48));
                size -= 48;
                if ((void *)size == v34)
                {
LABEL_89:
                  v115.__r_.__value_.__l.__size_ = (std::string::size_type)v34;
                  operator delete(v115.__r_.__value_.__l.__data_);
                  if (SBYTE7(v99[1]) < 0)
                  {
LABEL_69:
                    operator delete(*(void **)&v99[0]);
                    if (!v31) {
                      goto LABEL_70;
                    }
LABEL_108:
                    if (sub_723EC(1u))
                    {
                      sub_6BAC((uint64_t)v128);
                      int v41 = sub_188FC78(v128, (uint64_t)"The external fare service call failed with the error ", 53);
                      sub_506A4(v31);
                      if ((SBYTE7(v111) & 0x80u) == 0) {
                        uint64_t v42 = (uint64_t)&v110;
                      }
                      else {
                        uint64_t v42 = v110;
                      }
                      if ((SBYTE7(v111) & 0x80u) == 0) {
                        uint64_t v43 = BYTE7(v111);
                      }
                      else {
                        uint64_t v43 = *((void *)&v110 + 1);
                      }
                      sub_188FC78(v41, v42, v43);
                      if (SBYTE7(v111) < 0) {
                        operator delete((void *)v110);
                      }
                      std::stringbuf::str();
                      sub_7246C((uint64_t *)&v110, 1u);
                      if (SBYTE7(v111) < 0) {
                        operator delete((void *)v110);
                      }
                      if (v132 < 0) {
                        operator delete(v131);
                      }
                      std::streambuf::~streambuf();
                      std::ostream::~ostream();
                      std::ios::~ios();
                    }
                    *(void *)&v99[0] = operator new(0x20uLL);
                    *(_OWORD *)((char *)v99 + 8) = xmmword_20B91C0;
                    strcpy(*(char **)&v99[0], "CallTo.FareService.Error");
                    memset(&v115, 0, sizeof(v115));
                    uint64_t v114 = 0;
                    long long v112 = 0u;
                    long long v113 = 0u;
                    long long v110 = 0u;
                    long long v111 = 0u;
                    HIBYTE(v109) = 0;
                    LOBYTE(v108) = 0;
                    uint64_t v83 = 0;
                    int v84 = 0;
                    uint64_t v81 = 0;
                    unint64_t v82 = 0;
                    sub_29DC44((uint64_t)v128, (long long **)&v115, &v110, &v108, &v83, 0, (uint64_t)&v81, 1);
                    nullsub_1(10);
                    sub_29E11C((uint64_t)v128);
                    uint64_t v44 = v82;
                    if (!v82 || atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      uint64_t v45 = v84;
                      if (v84) {
                        goto LABEL_125;
                      }
LABEL_126:
                      if ((SHIBYTE(v109) & 0x80000000) == 0) {
                        goto LABEL_127;
                      }
LABEL_173:
                      operator delete((void *)v108);
                      if (SHIBYTE(v114) < 0) {
                        goto LABEL_174;
                      }
LABEL_128:
                      if ((SHIBYTE(v112) & 0x80000000) == 0) {
                        goto LABEL_129;
                      }
LABEL_175:
                      operator delete(*((void **)&v111 + 1));
                      if (SBYTE7(v111) < 0) {
                        goto LABEL_176;
                      }
LABEL_130:
                      v46 = (void *)v115.__r_.__value_.__r.__words[0];
                      if (v115.__r_.__value_.__r.__words[0]) {
                        goto LABEL_131;
                      }
LABEL_177:
                      if ((SBYTE7(v99[1]) & 0x80000000) == 0) {
                        goto LABEL_178;
                      }
LABEL_133:
                      operator delete(*(void **)&v99[0]);
                      if (v31 != 2) {
                        goto LABEL_264;
                      }
                      goto LABEL_179;
                    }
                    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                    std::__shared_weak_count::__release_weak(v44);
                    uint64_t v45 = v84;
                    if (!v84) {
                      goto LABEL_126;
                    }
LABEL_125:
                    if (atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
                      goto LABEL_126;
                    }
                    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                    std::__shared_weak_count::__release_weak(v45);
                    if (SHIBYTE(v109) < 0) {
                      goto LABEL_173;
                    }
LABEL_127:
                    if ((SHIBYTE(v114) & 0x80000000) == 0) {
                      goto LABEL_128;
                    }
LABEL_174:
                    operator delete((void *)v113);
                    if (SHIBYTE(v112) < 0) {
                      goto LABEL_175;
                    }
LABEL_129:
                    if ((SBYTE7(v111) & 0x80000000) == 0) {
                      goto LABEL_130;
                    }
LABEL_176:
                    operator delete((void *)v110);
                    v46 = (void *)v115.__r_.__value_.__r.__words[0];
                    if (!v115.__r_.__value_.__r.__words[0]) {
                      goto LABEL_177;
                    }
LABEL_131:
                    std::string::size_type v47 = v115.__r_.__value_.__l.__size_;
                    if ((void *)v115.__r_.__value_.__l.__size_ == v46)
                    {
                      v115.__r_.__value_.__l.__size_ = (std::string::size_type)v46;
                      operator delete(v46);
                      if ((SBYTE7(v99[1]) & 0x80000000) == 0) {
                        goto LABEL_178;
                      }
                      goto LABEL_133;
                    }
                    while (1)
                    {
                      if (*(char *)(v47 - 1) < 0)
                      {
                        operator delete(*(void **)(v47 - 24));
                        if ((*(char *)(v47 - 25) & 0x80000000) == 0) {
                          goto LABEL_136;
                        }
                      }
                      else if ((*(char *)(v47 - 25) & 0x80000000) == 0)
                      {
LABEL_136:
                        v47 -= 48;
                        if ((void *)v47 == v46) {
                          goto LABEL_140;
                        }
                        continue;
                      }
                      operator delete(*(void **)(v47 - 48));
                      v47 -= 48;
                      if ((void *)v47 == v46)
                      {
LABEL_140:
                        v115.__r_.__value_.__l.__size_ = (std::string::size_type)v46;
                        operator delete(v115.__r_.__value_.__l.__data_);
                        if (SBYTE7(v99[1]) < 0) {
                          goto LABEL_133;
                        }
LABEL_178:
                        if (v31 != 2) {
                          goto LABEL_264;
                        }
LABEL_179:
                        *(void *)&v99[0] = operator new(0x28uLL);
                        *(_OWORD *)((char *)v99 + 8) = xmmword_20B9390;
                        strcpy(*(char **)&v99[0], "CallTo.FareService.Error.Timeout");
                        memset(&v115, 0, sizeof(v115));
                        uint64_t v114 = 0;
                        long long v112 = 0u;
                        long long v113 = 0u;
                        long long v110 = 0u;
                        long long v111 = 0u;
                        HIBYTE(v109) = 0;
                        LOBYTE(v108) = 0;
                        uint64_t v79 = 0;
                        unint64_t v80 = 0;
                        uint64_t v77 = 0;
                        v78 = 0;
                        sub_29DC44((uint64_t)v128, (long long **)&v115, &v110, &v108, &v79, 0, (uint64_t)&v77, 1);
                        nullsub_1(10);
                        sub_29E11C((uint64_t)v128);
                        v56 = v78;
                        if (v78 && !atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                          std::__shared_weak_count::__release_weak(v56);
                        }
                        int v57 = v80;
                        if (v80 && !atomic_fetch_add(&v80->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                          std::__shared_weak_count::__release_weak(v57);
                        }
                        if (SHIBYTE(v109) < 0)
                        {
                          operator delete((void *)v108);
                          if (SHIBYTE(v114) < 0) {
                            goto LABEL_192;
                          }
LABEL_187:
                          if ((SHIBYTE(v112) & 0x80000000) == 0) {
                            goto LABEL_188;
                          }
LABEL_193:
                          operator delete(*((void **)&v111 + 1));
                          if (SBYTE7(v111) < 0) {
                            goto LABEL_194;
                          }
LABEL_189:
                          std::string::size_type v58 = v115.__r_.__value_.__r.__words[0];
                          if (!v115.__r_.__value_.__r.__words[0]) {
                            goto LABEL_262;
                          }
                        }
                        else
                        {
                          if ((SHIBYTE(v114) & 0x80000000) == 0) {
                            goto LABEL_187;
                          }
LABEL_192:
                          operator delete((void *)v113);
                          if (SHIBYTE(v112) < 0) {
                            goto LABEL_193;
                          }
LABEL_188:
                          if ((SBYTE7(v111) & 0x80000000) == 0) {
                            goto LABEL_189;
                          }
LABEL_194:
                          operator delete((void *)v110);
                          std::string::size_type v58 = v115.__r_.__value_.__r.__words[0];
                          if (!v115.__r_.__value_.__r.__words[0]) {
                            goto LABEL_262;
                          }
                        }
                        std::string::size_type v59 = v115.__r_.__value_.__l.__size_;
                        uint64_t v60 = (void *)v58;
                        if (v115.__r_.__value_.__l.__size_ == v58) {
                          goto LABEL_261;
                        }
                        while (1)
                        {
                          if (*(char *)(v59 - 1) < 0)
                          {
                            operator delete(*(void **)(v59 - 24));
                            if ((*(char *)(v59 - 25) & 0x80000000) == 0) {
                              goto LABEL_198;
                            }
                          }
                          else if ((*(char *)(v59 - 25) & 0x80000000) == 0)
                          {
LABEL_198:
                            v59 -= 48;
                            if (v59 == v58) {
                              goto LABEL_260;
                            }
                            continue;
                          }
                          operator delete(*(void **)(v59 - 48));
                          v59 -= 48;
                          if (v59 == v58)
                          {
LABEL_260:
                            uint64_t v60 = (void *)v115.__r_.__value_.__r.__words[0];
                            goto LABEL_261;
                          }
                        }
                      }
                    }
                  }
LABEL_107:
                  if (v31) {
                    goto LABEL_108;
                  }
LABEL_70:
                  if (sub_4F44((unsigned int *)&v117) == 200)
                  {
                    *(void *)&v99[0] = operator new(0x20uLL);
                    *(_OWORD *)((char *)v99 + 8) = xmmword_20B5EB0;
                    strcpy(*(char **)&v99[0], "CallTo.FareService.Success");
                    memset(&v115, 0, sizeof(v115));
                    uint64_t v114 = 0;
                    long long v112 = 0u;
                    long long v113 = 0u;
                    long long v110 = 0u;
                    long long v111 = 0u;
                    HIBYTE(v109) = 0;
                    LOBYTE(v108) = 0;
                    uint64_t v102 = 0;
                    v103 = 0;
                    uint64_t v100 = 0;
                    v101 = 0;
                    sub_29DC44((uint64_t)v128, (long long **)&v115, &v110, &v108, &v102, 0, (uint64_t)&v100, 1);
                    nullsub_1(10);
                    sub_29E11C((uint64_t)v128);
                    uint64_t v36 = v101;
                    if (v101 && !atomic_fetch_add(&v101->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                      std::__shared_weak_count::__release_weak(v36);
                    }
                    v37 = v103;
                    if (v103 && !atomic_fetch_add(&v103->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                      std::__shared_weak_count::__release_weak(v37);
                    }
                    if ((SHIBYTE(v109) & 0x80000000) == 0)
                    {
                      if ((SHIBYTE(v114) & 0x80000000) == 0) {
                        goto LABEL_79;
                      }
LABEL_204:
                      operator delete((void *)v113);
                      if (SHIBYTE(v112) < 0) {
                        goto LABEL_205;
                      }
LABEL_80:
                      if ((SBYTE7(v111) & 0x80000000) == 0) {
                        goto LABEL_81;
                      }
LABEL_206:
                      operator delete((void *)v110);
                      std::string::size_type v38 = v115.__r_.__value_.__r.__words[0];
                      if (!v115.__r_.__value_.__r.__words[0]) {
                        goto LABEL_207;
                      }
LABEL_82:
                      std::string::size_type v39 = v115.__r_.__value_.__l.__size_;
                      v40 = (void *)v38;
                      if (v115.__r_.__value_.__l.__size_ == v38)
                      {
LABEL_97:
                        v115.__r_.__value_.__l.__size_ = v38;
                        operator delete(v40);
                        if (SBYTE7(v99[1]) < 0) {
                          goto LABEL_98;
                        }
                        goto LABEL_208;
                      }
                      while (1)
                      {
                        if (*(char *)(v39 - 1) < 0)
                        {
                          operator delete(*(void **)(v39 - 24));
                          if ((*(char *)(v39 - 25) & 0x80000000) == 0) {
                            goto LABEL_92;
                          }
                        }
                        else if ((*(char *)(v39 - 25) & 0x80000000) == 0)
                        {
LABEL_92:
                          v39 -= 48;
                          if (v39 == v38) {
                            goto LABEL_96;
                          }
                          continue;
                        }
                        operator delete(*(void **)(v39 - 48));
                        v39 -= 48;
                        if (v39 == v38)
                        {
LABEL_96:
                          v40 = (void *)v115.__r_.__value_.__r.__words[0];
                          goto LABEL_97;
                        }
                      }
                    }
                    operator delete((void *)v108);
                    if (SHIBYTE(v114) < 0) {
                      goto LABEL_204;
                    }
LABEL_79:
                    if ((SHIBYTE(v112) & 0x80000000) == 0) {
                      goto LABEL_80;
                    }
LABEL_205:
                    operator delete(*((void **)&v111 + 1));
                    if (SBYTE7(v111) < 0) {
                      goto LABEL_206;
                    }
LABEL_81:
                    std::string::size_type v38 = v115.__r_.__value_.__r.__words[0];
                    if (v115.__r_.__value_.__r.__words[0]) {
                      goto LABEL_82;
                    }
LABEL_207:
                    if (SBYTE7(v99[1]) < 0) {
LABEL_98:
                    }
                      operator delete(*(void **)&v99[0]);
LABEL_208:
                    sub_151A144((uint64_t)v99, 0, 0);
                    sub_50BF0((char *)&v117, (uint64_t)v128);
                    int v61 = sub_1880FAC(v99, v128);
                    int v62 = v61;
                    if (SBYTE7(v129) < 0)
                    {
                      operator delete(v128[0]);
                      if (v62)
                      {
LABEL_210:
                        *(unsigned char *)(a4 + 64) = 1;
                        sub_151A2F8(a4, v99);
                        sub_151A3A4(v99);
                        if (v121 < 0) {
                          goto LABEL_265;
                        }
                        goto LABEL_266;
                      }
                    }
                    else if (v61)
                    {
                      goto LABEL_210;
                    }
                    if (sub_723EC(1u))
                    {
                      sub_6BAC((uint64_t)v128);
                      sub_188FC78(v128, (uint64_t)"The external fare service provided an invalid fare response, which could not be parsed.", 87);
                      std::stringbuf::str();
                      sub_7246C((uint64_t *)&v110, 1u);
                      if (SBYTE7(v111) < 0) {
                        operator delete((void *)v110);
                      }
                      if (v132 < 0) {
                        operator delete(v131);
                      }
                      std::streambuf::~streambuf();
                      std::ostream::~ostream();
                      std::ios::~ios();
                    }
                    v115.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
                    *(_OWORD *)&v115.__r_.__value_.__r.__words[1] = xmmword_20B5EB0;
                    strcpy(v115.__r_.__value_.__l.__data_, "Error.FareResponse.Invalid");
                    long long v108 = 0uLL;
                    uint64_t v109 = 0;
                    uint64_t v114 = 0;
                    long long v112 = 0u;
                    long long v113 = 0u;
                    long long v110 = 0u;
                    long long v111 = 0u;
                    char v98 = 0;
                    LOBYTE(v97[0]) = 0;
                    uint64_t v95 = 0;
                    v96 = 0;
                    uint64_t v93 = 0;
                    v94 = 0;
                    sub_29DC44((uint64_t)v128, (long long **)&v108, &v110, (long long *)v97, &v95, 0, (uint64_t)&v93, 1);
                    nullsub_1(10);
                    sub_29E11C((uint64_t)v128);
                    v63 = v94;
                    if (v94 && !atomic_fetch_add(&v94->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                      std::__shared_weak_count::__release_weak(v63);
                    }
                    uint64_t v64 = v96;
                    if (v96 && !atomic_fetch_add(&v96->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                      std::__shared_weak_count::__release_weak(v64);
                    }
                    if ((v98 & 0x80000000) == 0)
                    {
                      if ((SHIBYTE(v114) & 0x80000000) == 0) {
                        goto LABEL_227;
                      }
LABEL_288:
                      operator delete((void *)v113);
                      if (SHIBYTE(v112) < 0) {
                        goto LABEL_289;
                      }
LABEL_228:
                      if ((SBYTE7(v111) & 0x80000000) == 0) {
                        goto LABEL_229;
                      }
LABEL_290:
                      operator delete((void *)v110);
                      unsigned int v65 = (void **)v108;
                      if ((void)v108) {
                        goto LABEL_291;
                      }
LABEL_300:
                      if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v115.__r_.__value_.__l.__data_);
                      }
                      sub_151A3A4(v99);
                      *(void *)(a4 + 64) = 0;
                      *(_OWORD *)(a4 + 32) = 0u;
                      *(_OWORD *)(a4 + 48) = 0u;
                      *(_OWORD *)a4 = 0u;
                      *(_OWORD *)(a4 + 16) = 0u;
                      if (v121 < 0) {
                        goto LABEL_265;
                      }
                      goto LABEL_266;
                    }
                    operator delete(v97[0]);
                    if (SHIBYTE(v114) < 0) {
                      goto LABEL_288;
                    }
LABEL_227:
                    if ((SHIBYTE(v112) & 0x80000000) == 0) {
                      goto LABEL_228;
                    }
LABEL_289:
                    operator delete(*((void **)&v111 + 1));
                    if (SBYTE7(v111) < 0) {
                      goto LABEL_290;
                    }
LABEL_229:
                    unsigned int v65 = (void **)v108;
                    if (!(void)v108) {
                      goto LABEL_300;
                    }
LABEL_291:
                    int v75 = (void **)*((void *)&v108 + 1);
                    uint64_t v76 = v65;
                    if (*((void ***)&v108 + 1) == v65)
                    {
LABEL_299:
                      *((void *)&v108 + 1) = v65;
                      operator delete(v76);
                      goto LABEL_300;
                    }
                    while (1)
                    {
                      if (*((char *)v75 - 1) < 0)
                      {
                        operator delete(*(v75 - 3));
                        if ((*((char *)v75 - 25) & 0x80000000) == 0) {
                          goto LABEL_294;
                        }
                      }
                      else if ((*((char *)v75 - 25) & 0x80000000) == 0)
                      {
LABEL_294:
                        v75 -= 6;
                        if (v75 == v65) {
                          goto LABEL_298;
                        }
                        continue;
                      }
                      operator delete(*(v75 - 6));
                      v75 -= 6;
                      if (v75 == v65)
                      {
LABEL_298:
                        uint64_t v76 = (void **)v108;
                        goto LABEL_299;
                      }
                    }
                  }
                  if (sub_723EC(1u))
                  {
                    sub_6BAC((uint64_t)v128);
                    unint64_t v48 = sub_188FC78(v128, (uint64_t)"The external fare service call failed with an http response code of ", 68);
                    sub_4F44((unsigned int *)&v117);
                    std::ostream::operator<<();
                    sub_188FC78(v48, (uint64_t)".", 1);
                    std::stringbuf::str();
                    sub_7246C((uint64_t *)&v110, 1u);
                    if (SBYTE7(v111) < 0) {
                      operator delete((void *)v110);
                    }
                    if (v132 < 0) {
                      operator delete(v131);
                    }
                    std::streambuf::~streambuf();
                    std::ostream::~ostream();
                    std::ios::~ios();
                  }
                  int v49 = sub_4F44((unsigned int *)&v117);
                  std::to_string(&v115, v49);
                  unint64_t v50 = std::string::insert(&v115, 0, "CallTo.FareService.Error.Http.");
                  long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
                  *(void *)&v99[1] = *((void *)&v50->__r_.__value_.__l + 2);
                  v99[0] = v51;
                  v50->__r_.__value_.__l.__size_ = 0;
                  v50->__r_.__value_.__r.__words[2] = 0;
                  v50->__r_.__value_.__r.__words[0] = 0;
                  long long v108 = 0uLL;
                  uint64_t v109 = 0;
                  uint64_t v114 = 0;
                  long long v112 = 0u;
                  long long v113 = 0u;
                  long long v110 = 0u;
                  long long v111 = 0u;
                  char v98 = 0;
                  LOBYTE(v97[0]) = 0;
                  uint64_t v91 = 0;
                  v92 = 0;
                  uint64_t v89 = 0;
                  v90 = 0;
                  sub_29DC44((uint64_t)v128, (long long **)&v108, &v110, (long long *)v97, &v91, 0, (uint64_t)&v89, 1);
                  nullsub_1(10);
                  sub_29E11C((uint64_t)v128);
                  uint64_t v52 = v90;
                  if (v90 && !atomic_fetch_add(&v90->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                    std::__shared_weak_count::__release_weak(v52);
                  }
                  uint64_t v53 = v92;
                  if (v92 && !atomic_fetch_add(&v92->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                    std::__shared_weak_count::__release_weak(v53);
                  }
                  if (v98 < 0)
                  {
                    operator delete(v97[0]);
                    if (SHIBYTE(v114) < 0) {
                      goto LABEL_232;
                    }
LABEL_156:
                    if ((SHIBYTE(v112) & 0x80000000) == 0) {
                      goto LABEL_157;
                    }
LABEL_233:
                    operator delete(*((void **)&v111 + 1));
                    if (SBYTE7(v111) < 0) {
                      goto LABEL_234;
                    }
LABEL_158:
                    long long v54 = (void **)v108;
                    if (!(void)v108)
                    {
LABEL_235:
                      if (SBYTE7(v99[1]) < 0) {
                        goto LABEL_161;
                      }
                      goto LABEL_236;
                    }
                  }
                  else
                  {
                    if ((SHIBYTE(v114) & 0x80000000) == 0) {
                      goto LABEL_156;
                    }
LABEL_232:
                    operator delete((void *)v113);
                    if (SHIBYTE(v112) < 0) {
                      goto LABEL_233;
                    }
LABEL_157:
                    if ((SBYTE7(v111) & 0x80000000) == 0) {
                      goto LABEL_158;
                    }
LABEL_234:
                    operator delete((void *)v110);
                    long long v54 = (void **)v108;
                    if (!(void)v108) {
                      goto LABEL_235;
                    }
                  }
                  char v55 = (void **)*((void *)&v108 + 1);
                  if (*((void ***)&v108 + 1) == v54)
                  {
                    *((void *)&v108 + 1) = v54;
                    operator delete(v54);
                    if (SBYTE7(v99[1]) < 0) {
                      goto LABEL_161;
                    }
                    goto LABEL_236;
                  }
                  while (1)
                  {
                    if (*((char *)v55 - 1) < 0)
                    {
                      operator delete(*(v55 - 3));
                      if ((*((char *)v55 - 25) & 0x80000000) == 0) {
                        goto LABEL_164;
                      }
                    }
                    else if ((*((char *)v55 - 25) & 0x80000000) == 0)
                    {
LABEL_164:
                      v55 -= 6;
                      if (v55 == v54) {
                        goto LABEL_168;
                      }
                      continue;
                    }
                    operator delete(*(v55 - 6));
                    v55 -= 6;
                    if (v55 == v54)
                    {
LABEL_168:
                      *((void *)&v108 + 1) = v54;
                      operator delete((void *)v108);
                      if (SBYTE7(v99[1]) < 0)
                      {
LABEL_161:
                        operator delete(*(void **)&v99[0]);
                        if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
                          goto LABEL_162;
                        }
                        goto LABEL_237;
                      }
LABEL_236:
                      if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
LABEL_162:
                      }
                        operator delete(v115.__r_.__value_.__l.__data_);
LABEL_237:
                      *(void *)&v99[0] = operator new(0x20uLL);
                      *(_OWORD *)((char *)v99 + 8) = xmmword_20B91C0;
                      strcpy(*(char **)&v99[0], "CallTo.FareService.Error");
                      memset(&v115, 0, sizeof(v115));
                      uint64_t v114 = 0;
                      long long v112 = 0u;
                      long long v113 = 0u;
                      long long v110 = 0u;
                      long long v111 = 0u;
                      HIBYTE(v109) = 0;
                      LOBYTE(v108) = 0;
                      uint64_t v87 = 0;
                      unint64_t v88 = 0;
                      uint64_t v85 = 0;
                      unint64_t v86 = 0;
                      sub_29DC44((uint64_t)v128, (long long **)&v115, &v110, &v108, &v87, 0, (uint64_t)&v85, 1);
                      nullsub_1(10);
                      sub_29E11C((uint64_t)v128);
                      uint64_t v66 = v86;
                      if (v86 && !atomic_fetch_add(&v86->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                        std::__shared_weak_count::__release_weak(v66);
                      }
                      uint64_t v67 = v88;
                      if (v88 && !atomic_fetch_add(&v88->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                        std::__shared_weak_count::__release_weak(v67);
                      }
                      if ((SHIBYTE(v109) & 0x80000000) == 0)
                      {
                        if ((SHIBYTE(v114) & 0x80000000) == 0) {
                          goto LABEL_245;
                        }
LABEL_250:
                        operator delete((void *)v113);
                        if (SHIBYTE(v112) < 0) {
                          goto LABEL_251;
                        }
LABEL_246:
                        if ((SBYTE7(v111) & 0x80000000) == 0) {
                          goto LABEL_247;
                        }
LABEL_252:
                        operator delete((void *)v110);
                        std::string::size_type v58 = v115.__r_.__value_.__r.__words[0];
                        if (v115.__r_.__value_.__r.__words[0]) {
                          goto LABEL_253;
                        }
LABEL_262:
                        if (SBYTE7(v99[1]) < 0) {
                          operator delete(*(void **)&v99[0]);
                        }
LABEL_264:
                        *(void *)(a4 + 64) = 0;
                        *(_OWORD *)(a4 + 32) = 0u;
                        *(_OWORD *)(a4 + 48) = 0u;
                        *(_OWORD *)a4 = 0u;
                        *(_OWORD *)(a4 + 16) = 0u;
                        if (v121 < 0) {
LABEL_265:
                        }
                          operator delete(v120);
LABEL_266:
                        uint64_t v69 = v119;
                        if (!v119)
                        {
LABEL_273:
                          long long v71 = (void *)*((void *)&v117 + 1);
                          *((void *)&v117 + 1) = 0;
                          if (v71) {
                            operator delete(v71);
                          }
                          sub_319BFC((uint64_t)__p);
                          uint64_t v72 = (uint64_t **)v125;
                          if (!(void)v125)
                          {
LABEL_282:
                            uint64_t v74 = (void *)v124;
                            *(void *)&long long v124 = 0;
                            if (v74) {
                              operator delete(v74);
                            }
                            if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v127.__r_.__value_.__l.__data_);
                            }
                            return;
                          }
                          while (1)
                          {
                            v73 = *v72;
                            if (*((char *)v72 + 63) < 0)
                            {
                              operator delete(v72[5]);
                              if ((*((char *)v72 + 39) & 0x80000000) == 0) {
                                goto LABEL_278;
                              }
                            }
                            else if ((*((char *)v72 + 39) & 0x80000000) == 0)
                            {
LABEL_278:
                              operator delete(v72);
                              uint64_t v72 = (uint64_t **)v73;
                              if (!v73) {
                                goto LABEL_282;
                              }
                              continue;
                            }
                            operator delete(v72[2]);
                            operator delete(v72);
                            uint64_t v72 = (uint64_t **)v73;
                            if (!v73) {
                              goto LABEL_282;
                            }
                          }
                        }
                        while (1)
                        {
                          int v70 = *v69;
                          if (*((char *)v69 + 63) < 0)
                          {
                            operator delete(v69[5]);
                            if ((*((char *)v69 + 39) & 0x80000000) == 0) {
                              goto LABEL_269;
                            }
                          }
                          else if ((*((char *)v69 + 39) & 0x80000000) == 0)
                          {
LABEL_269:
                            operator delete(v69);
                            uint64_t v69 = (uint64_t **)v70;
                            if (!v70) {
                              goto LABEL_273;
                            }
                            continue;
                          }
                          operator delete(v69[2]);
                          operator delete(v69);
                          uint64_t v69 = (uint64_t **)v70;
                          if (!v70) {
                            goto LABEL_273;
                          }
                        }
                      }
                      operator delete((void *)v108);
                      if (SHIBYTE(v114) < 0) {
                        goto LABEL_250;
                      }
LABEL_245:
                      if ((SHIBYTE(v112) & 0x80000000) == 0) {
                        goto LABEL_246;
                      }
LABEL_251:
                      operator delete(*((void **)&v111 + 1));
                      if (SBYTE7(v111) < 0) {
                        goto LABEL_252;
                      }
LABEL_247:
                      std::string::size_type v58 = v115.__r_.__value_.__r.__words[0];
                      if (!v115.__r_.__value_.__r.__words[0]) {
                        goto LABEL_262;
                      }
LABEL_253:
                      std::string::size_type v68 = v115.__r_.__value_.__l.__size_;
                      uint64_t v60 = (void *)v58;
                      if (v115.__r_.__value_.__l.__size_ == v58)
                      {
LABEL_261:
                        v115.__r_.__value_.__l.__size_ = v58;
                        operator delete(v60);
                        goto LABEL_262;
                      }
                      while (1)
                      {
                        if (*(char *)(v68 - 1) < 0)
                        {
                          operator delete(*(void **)(v68 - 24));
                          if ((*(char *)(v68 - 25) & 0x80000000) == 0) {
                            goto LABEL_256;
                          }
                        }
                        else if ((*(char *)(v68 - 25) & 0x80000000) == 0)
                        {
LABEL_256:
                          v68 -= 48;
                          if (v68 == v58) {
                            goto LABEL_260;
                          }
                          continue;
                        }
                        operator delete(*(void **)(v68 - 48));
                        v68 -= 48;
                        if (v68 == v58) {
                          goto LABEL_260;
                        }
                      }
                    }
                  }
                }
              }
              else
              {
                if (*(char *)(size - 25) < 0) {
                  goto LABEL_88;
                }
LABEL_85:
                size -= 48;
                if ((void *)size == v34) {
                  goto LABEL_89;
                }
              }
            }
          }
LABEL_106:
          if (SBYTE7(v99[1]) < 0) {
            goto LABEL_69;
          }
          goto LABEL_107;
        }
LABEL_62:
        if ((SHIBYTE(v109) & 0x80000000) == 0) {
          goto LABEL_63;
        }
        goto LABEL_102;
      }
      while (1)
      {
        uint64_t v18 = *(char **)v17;
        if (v17[63] < 0)
        {
          operator delete(*((void **)v17 + 5));
          if ((v17[39] & 0x80000000) == 0) {
            goto LABEL_34;
          }
LABEL_37:
          operator delete(*((void **)v17 + 2));
          operator delete(v17);
          uint64_t v17 = v18;
          if (!v18) {
            goto LABEL_38;
          }
        }
        else
        {
          if (v17[39] < 0) {
            goto LABEL_37;
          }
LABEL_34:
          operator delete(v17);
          uint64_t v17 = v18;
          if (!v18) {
            goto LABEL_38;
          }
        }
      }
    }
    sub_10C41D0(&v124, "X-Apple-Internal-Token", (long long *)(a1 + 48));
    goto LABEL_14;
  }
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v128);
    sub_188FC78(v128, (uint64_t)"No external fare service call made because external service calls are disabled. ", 80);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 2u);
    if (v123 < 0) {
      operator delete(__p[0]);
    }
    if (v132 < 0) {
      operator delete(v131);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  *(void *)(a4 + 64) = 0;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
}

void sub_10C3294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a60 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&STACK[0x330]);
  sub_151A3A4(&a35);
  sub_31903C((uint64_t)&a72);
  sub_319BFC((uint64_t)&STACK[0x238]);
  sub_50828((uint64_t)&STACK[0x2F0]);
  if (SLOBYTE(STACK[0x32F]) < 0) {
    operator delete((void *)STACK[0x318]);
  }
  _Unwind_Resume(a1);
}

void *sub_10C3618(void *a1, uint64_t a2)
{
  sub_15181C4(a1, 0, 0);
  if (a1 != (void *)a2)
  {
    uint64_t v4 = a1[1];
    if ((v4 & 2) != 0)
    {
      unint64_t v5 = 0;
    }
    else
    {
      unint64_t v5 = (void *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
      if (v4) {
        unint64_t v5 = (void *)*v5;
      }
    }
    uint64_t v6 = *(void *)(a2 + 8);
    if ((v6 & 2) != 0)
    {
      unint64_t v7 = 0;
    }
    else
    {
      unint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6) {
        unint64_t v7 = (void *)*v7;
      }
    }
    if (v5 == v7) {
      sub_123A04C((uint64_t)a1, a2);
    }
    else {
      sub_1518C18((uint64_t)a1, a2);
    }
  }
  return a1;
}

uint64_t sub_10C36B8(uint64_t a1, uint64_t a2)
{
  sub_151AC70(a1, 0, 0);
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if ((v4 & 2) != 0)
    {
      unint64_t v5 = 0;
    }
    else
    {
      unint64_t v5 = (void *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
      if (v4) {
        unint64_t v5 = (void *)*v5;
      }
    }
    uint64_t v6 = *(void *)(a2 + 8);
    if ((v6 & 2) != 0)
    {
      unint64_t v7 = 0;
    }
    else
    {
      unint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6) {
        unint64_t v7 = (void *)*v7;
      }
    }
    if (v5 == v7) {
      sub_151BE90(a1, a2);
    }
    else {
      sub_151BE3C(a1, a2);
    }
  }
  return a1;
}

void *sub_10C3758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_10C9DC8(a1 + 24, a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v12 = *(void **)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = (void *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v13[1];
            if (v15 == v9)
            {
              if (sub_10C9C90(a1 + 32, (uint64_t)(v13 + 2), a2)) {
                return v13;
              }
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint64_t v13 = (void *)*v13;
            if (!v13) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (sub_10C9C90(a1 + 32, (uint64_t)(v13 + 2), a2)) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  int v31 = operator new(0xC0uLL);
  *int v31 = 0;
  v31[1] = v9;
  sub_1518384(v31 + 2, a3);
  sub_151AF44(v31 + 9, a3 + 56);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v20 = 1;
    if (v10 >= 3) {
      BOOL v20 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v10);
    unint64_t v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22) {
      size_t prime = v22;
    }
    else {
      size_t prime = v21;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v24 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v24) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v24)
    {
      unint64_t v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v24 < 3uLL || (uint8x8_t v26 = (uint8x8_t)vcnt_s8(v24), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        unint64_t v25 = std::__next_prime(v25);
      }
      else
      {
        uint64_t v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2) {
          unint64_t v25 = v27;
        }
      }
      if (prime <= v25) {
        size_t prime = v25;
      }
      if (prime < *(void *)&v24) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v28 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v3 = v9 % v10;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        uint64_t v19 = v31;
        if (v18) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v9;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * v9);
        uint64_t v19 = v31;
        if (v18) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v28 & v9;
      uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v28 & v9));
      uint64_t v19 = v31;
      if (v18) {
        goto LABEL_26;
      }
    }
LABEL_50:
    *uint64_t v19 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v31;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*v31)
    {
      unint64_t v29 = *(void *)(*v31 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v29 >= v10) {
          v29 %= v10;
        }
      }
      else
      {
        v29 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v29) = v31;
    }
    goto LABEL_61;
  }
  uint64_t v18 = *(void **)(*(void *)a1 + 8 * v3);
  uint64_t v19 = v31;
  if (!v18) {
    goto LABEL_50;
  }
LABEL_26:
  *uint64_t v19 = *v18;
  *uint64_t v18 = v31;
LABEL_61:
  uint64_t v13 = v31;
  ++*v7;
  return v13;
}

void sub_10C3AD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10C3B1C((char **)va);
  _Unwind_Resume(a1);
}

void sub_10C3AEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1518448(v2);
  sub_10C3B1C((char **)va);
  _Unwind_Resume(a1);
}

void sub_10C3B08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10C3B1C((char **)va);
  _Unwind_Resume(a1);
}

char **sub_10C3B1C(char **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      sub_151AFE4(v2 + 72);
      sub_1518448(v2 + 16);
    }
    operator delete(v2);
  }
  return a1;
}

void *sub_10C3B78(void *a1, uint64_t a2)
{
  unint64_t v4 = sub_10C9DC8((uint64_t)(a1 + 3), a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v8 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v8 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(void **)(*a1 + 8 * v8);
  if (!v10) {
    return 0;
  }
  unint64_t v9 = (void *)*v10;
  if (*v10)
  {
    uint64_t v11 = (uint64_t)(a1 + 4);
    if (v7.u32[0] < 2uLL)
    {
      uint64_t v12 = *(void *)&v5 - 1;
      while (1)
      {
        uint64_t v14 = v9[1];
        if (v6 == v14)
        {
          if (sub_10C9C90(v11, (uint64_t)(v9 + 2), a2)) {
            return v9;
          }
        }
        else if ((v14 & v12) != v8)
        {
          return 0;
        }
        unint64_t v9 = (void *)*v9;
        if (!v9) {
          return v9;
        }
      }
    }
    do
    {
      unint64_t v13 = v9[1];
      if (v6 == v13)
      {
        if (sub_10C9C90(v11, (uint64_t)(v9 + 2), a2)) {
          return v9;
        }
      }
      else
      {
        if (v13 >= *(void *)&v5) {
          v13 %= *(void *)&v5;
        }
        if (v13 != v8) {
          return 0;
        }
      }
      unint64_t v9 = (void *)*v9;
    }
    while (v9);
  }
  return v9;
}

void *sub_10C3CC0(void *a1, uint64_t a2)
{
  unint64_t v4 = sub_10C9DC8((uint64_t)(a1 + 3), a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v8 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v8 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(void **)(*a1 + 8 * v8);
  if (!v10) {
    return 0;
  }
  unint64_t v9 = (void *)*v10;
  if (*v10)
  {
    uint64_t v11 = (uint64_t)(a1 + 4);
    if (v7.u32[0] < 2uLL)
    {
      uint64_t v12 = *(void *)&v5 - 1;
      while (1)
      {
        uint64_t v14 = v9[1];
        if (v14 == v6)
        {
          if (sub_10C9C90(v11, (uint64_t)(v9 + 2), a2)) {
            return v9;
          }
        }
        else if ((v14 & v12) != v8)
        {
          return 0;
        }
        unint64_t v9 = (void *)*v9;
        if (!v9) {
          return v9;
        }
      }
    }
    do
    {
      unint64_t v13 = v9[1];
      if (v13 == v6)
      {
        if (sub_10C9C90(v11, (uint64_t)(v9 + 2), a2)) {
          return v9;
        }
      }
      else
      {
        if (v13 >= *(void *)&v5) {
          v13 %= *(void *)&v5;
        }
        if (v13 != v8) {
          return 0;
        }
      }
      unint64_t v9 = (void *)*v9;
    }
    while (v9);
  }
  return v9;
}

void *sub_10C3E08(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_10C9DC8(a1 + 24, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    unint64_t v13 = *(void **)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = (void *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v14[1];
            if (v16 == v10)
            {
              if (sub_10C9C90(a1 + 32, (uint64_t)(v14 + 2), a2)) {
                return v14;
              }
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (sub_10C9C90(a1 + 32, (uint64_t)(v14 + 2), a2)) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  uint64_t v32 = operator new(0xC0uLL);
  *uint64_t v32 = 0;
  v32[1] = v10;
  sub_1518384(v32 + 2, *a4);
  sub_151AC70((uint64_t)(v32 + 9), 0, 0);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v21 = 1;
    if (v11 >= 3) {
      BOOL v21 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v11);
    unint64_t v23 = vcvtps_u32_f32(v17 / v18);
    if (v22 <= v23) {
      size_t prime = v23;
    }
    else {
      size_t prime = v22;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v25 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v25) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v25)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v25 < 3uLL || (uint8x8_t v27 = (uint8x8_t)vcnt_s8(v25), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime < *(void *)&v25) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v29 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v19 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        BOOL v20 = v32;
        if (v19) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v19 = *(void **)(*(void *)a1 + 8 * v10);
        BOOL v20 = v32;
        if (v19) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v29 & v10;
      uint64_t v19 = *(void **)(*(void *)a1 + 8 * (v29 & v10));
      BOOL v20 = v32;
      if (v19) {
        goto LABEL_26;
      }
    }
LABEL_50:
    *BOOL v20 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v32;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v32)
    {
      unint64_t v30 = *(void *)(*v32 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v30 >= v11) {
          v30 %= v11;
        }
      }
      else
      {
        v30 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v30) = v32;
    }
    goto LABEL_61;
  }
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v4);
  BOOL v20 = v32;
  if (!v19) {
    goto LABEL_50;
  }
LABEL_26:
  *BOOL v20 = *v19;
  *uint64_t v19 = v32;
LABEL_61:
  uint64_t v14 = v32;
  ++*v8;
  return v14;
}

void sub_10C418C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10C3B1C((char **)va);
  _Unwind_Resume(a1);
}

void sub_10C41A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1518448(v2);
  sub_10C3B1C((char **)va);
  _Unwind_Resume(a1);
}

void sub_10C41BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10C3B1C((char **)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_10C41D0(void *a1, char *a2, long long *a3)
{
  unint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v6 = 0;
  *((void *)v6 + 1) = 0;
  uint8x8_t v7 = sub_10C42FC((void *)v6 + 2, a2, a3);
  int v8 = v6[39];
  if (v8 >= 0) {
    unint64_t v9 = v7;
  }
  else {
    unint64_t v9 = (uint64_t *)*((void *)v6 + 2);
  }
  if (v8 >= 0) {
    unint64_t v10 = v6[39];
  }
  else {
    unint64_t v10 = *((void *)v6 + 3);
  }
  *((void *)v6 + 1) = sub_B128((uint64_t)&v14, v9, v10);
  unint64_t v11 = sub_31A4E8(a1, (uint64_t)v6);
  if ((v12 & 1) == 0 && v6)
  {
    if (v6[63] < 0)
    {
      operator delete(*((void **)v6 + 5));
      if ((v6[39] & 0x80000000) == 0) {
        goto LABEL_11;
      }
    }
    else if ((v6[39] & 0x80000000) == 0)
    {
LABEL_11:
      operator delete(v6);
      return v11;
    }
    operator delete(*((void **)v6 + 2));
    goto LABEL_11;
  }
  return v11;
}

void sub_10C42D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10C42E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_10C42FC(void *a1, char *__s, long long *a3)
{
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v12 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v12 = v6 | 7;
    }
    uint64_t v13 = v12 + 1;
    int v8 = operator new(v12 + 1);
    a1[1] = v7;
    a1[2] = v13 | 0x8000000000000000;
    *a1 = v8;
LABEL_9:
    memmove(v8, __s, v7);
    *((unsigned char *)v8 + v7) = 0;
    unint64_t v9 = (char *)(a1 + 3);
    if ((*((char *)a3 + 23) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  *((unsigned char *)a1 + 23) = v6;
  int v8 = a1;
  if (v6) {
    goto LABEL_9;
  }
  *(unsigned char *)a1 = 0;
  unint64_t v9 = (char *)(a1 + 3);
  if ((*((char *)a3 + 23) & 0x80000000) == 0)
  {
LABEL_5:
    long long v10 = *a3;
    *((void *)v9 + 2) = *((void *)a3 + 2);
    *(_OWORD *)unint64_t v9 = v10;
    return a1;
  }
LABEL_10:
  sub_4200(v9, *(void **)a3, *((void *)a3 + 1));
  return a1;
}

void sub_10C43FC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10C4418(void *a1, char *a2, const char *a3)
{
  size_t v6 = (char *)operator new(0x40uLL);
  *(void *)size_t v6 = 0;
  *((void *)v6 + 1) = 0;
  uint64_t v7 = sub_10C4544((uint64_t)(v6 + 16), a2, a3);
  int v8 = v6[39];
  if (v8 >= 0) {
    unint64_t v9 = (uint64_t *)v7;
  }
  else {
    unint64_t v9 = (uint64_t *)*((void *)v6 + 2);
  }
  if (v8 >= 0) {
    unint64_t v10 = v6[39];
  }
  else {
    unint64_t v10 = *((void *)v6 + 3);
  }
  *((void *)v6 + 1) = sub_B128((uint64_t)&v14, v9, v10);
  unint64_t v11 = sub_31A4E8(a1, (uint64_t)v6);
  if ((v12 & 1) == 0 && v6)
  {
    if (v6[63] < 0)
    {
      operator delete(*((void **)v6 + 5));
      if ((v6[39] & 0x80000000) == 0) {
        goto LABEL_11;
      }
    }
    else if ((v6[39] & 0x80000000) == 0)
    {
LABEL_11:
      operator delete(v6);
      return v11;
    }
    operator delete(*((void **)v6 + 2));
    goto LABEL_11;
  }
  return v11;
}

void sub_10C4518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10C4530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10C4544(uint64_t a1, char *__s, const char *a3)
{
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    int v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  int v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  unint64_t v11 = (void *)(a1 + 24);
  size_t v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    unint64_t v11 = operator new(v14 + 1);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v15 | 0x8000000000000000;
    *(void *)(a1 + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((unsigned char *)v11 + v13) = 0;
  return a1;
}

void sub_10C4684(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10C46A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a2 + 32);
  if ((int)v4 >= 1)
  {
    uint64_t v5 = *(void *)(*(void *)(a2 + 40) + 8);
    size_t v6 = *(uint64_t (****)())(v5 + 56);
    if (!v6) {
      size_t v6 = &off_253C7D8;
    }
    if (*(_DWORD *)(v5 + 76))
    {
      int v7 = *((_DWORD *)v6 + 6);
      if ((int)sub_920D68(*(unsigned int *)(v5 + 72)) >= *(_DWORD *)(a1 + 32))
      {
LABEL_56:
        BOOL result = sub_723EC(1u);
        if (!result) {
          return result;
        }
        sub_6BAC((uint64_t)v53);
        sub_188FC78(v53, (uint64_t)"Base fare in fare route references start leg ", 45);
        uint64_t v34 = (void *)std::ostream::operator<<();
        sub_188FC78(v34, (uint64_t)" which is out of range (", 24);
        uint64_t v35 = (void *)std::ostream::operator<<();
        sub_188FC78(v35, (uint64_t)" legs in fare route request)", 28);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
      }
      else
      {
        if ((int)sub_920D68((*(_DWORD *)(v5 + 76) + *(_DWORD *)(v5 + 72))) > *(_DWORD *)(a1 + 32))
        {
LABEL_7:
          BOOL result = sub_723EC(1u);
          if (result)
          {
            sub_6BAC((uint64_t)v53);
            sub_188FC78(v53, (uint64_t)"Base fare in fare route references start leg ", 45);
            uint64_t v9 = (void *)std::ostream::operator<<();
            sub_188FC78(v9, (uint64_t)" + range length ", 16);
            uint64_t v10 = (void *)std::ostream::operator<<();
            sub_188FC78(v10, (uint64_t)" which is out of range (", 24);
            unint64_t v11 = (void *)std::ostream::operator<<();
            sub_188FC78(v11, (uint64_t)" legs in fare route request)", 28);
            std::stringbuf::str();
            sub_7246C((uint64_t *)__p, 1u);
            goto LABEL_70;
          }
          return result;
        }
        int8x8_t v25 = *(uint64_t (****)())(v5 + 56);
        if (!v25) {
          int8x8_t v25 = &off_253C7D8;
        }
        if (v7 == *((_DWORD *)v25 + 6))
        {
          if (v4 == 1)
          {
            int v12 = 1;
            goto LABEL_10;
          }
          uint64_t v26 = 0;
          uint64_t v27 = v4 - 1;
          while (1)
          {
            uint64_t v28 = *(void *)(a2 + 40);
            uint64_t v29 = *(void *)(v28 + 8 * v26 + 16);
            uint64_t v30 = *(void *)(v28 + 8 * v26 + 8);
            uint64_t v31 = *(unsigned int *)(v29 + 72);
            if (*(_DWORD *)(v30 + 76) + *(_DWORD *)(v30 + 72) > v31) {
              break;
            }
            if (!*(_DWORD *)(v29 + 76)) {
              goto LABEL_54;
            }
            if ((int)sub_920D68(v31) >= *(_DWORD *)(a1 + 32)) {
              goto LABEL_56;
            }
            if ((int)sub_920D68((*(_DWORD *)(v29 + 76) + *(_DWORD *)(v29 + 72))) > *(_DWORD *)(a1 + 32)) {
              goto LABEL_7;
            }
            uint64_t v32 = *(uint64_t (****)())(v29 + 56);
            if (!v32) {
              uint64_t v32 = &off_253C7D8;
            }
            if (v7 != *((_DWORD *)v32 + 6)) {
              goto LABEL_58;
            }
            ++v26;
            int v12 = 1;
            if (v27 == v26) {
              goto LABEL_10;
            }
          }
          BOOL result = sub_723EC(1u);
          if (!result) {
            return result;
          }
          sub_6BAC((uint64_t)v53);
          sub_188FC78(v53, (uint64_t)"Base fare reference legs in non-increasing order. Previous base fare at index ", 78);
          std::string::size_type v47 = (void *)std::ostream::operator<<();
          sub_188FC78(v47, (uint64_t)" has start leg ", 15);
          unint64_t v48 = (void *)std::ostream::operator<<();
          sub_188FC78(v48, (uint64_t)" and range length ", 18);
          int v49 = (void *)std::ostream::operator<<();
          sub_188FC78(v49, (uint64_t)"; base fare at index ", 21);
          unint64_t v50 = (void *)std::ostream::operator<<();
          sub_188FC78(v50, (uint64_t)" has start leg ", 15);
          std::ostream::operator<<();
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 1u);
        }
        else
        {
LABEL_58:
          BOOL result = sub_723EC(1u);
          if (!result) {
            return result;
          }
          sub_6BAC((uint64_t)v53);
          sub_188FC78(v53, (uint64_t)"Fare route response has base fare of mismatching currencies. Expected ", 70);
          uint64_t v36 = (void *)std::ostream::operator<<();
          sub_188FC78(v36, (uint64_t)" but got ", 9);
          std::ostream::operator<<();
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 1u);
        }
      }
    }
    else
    {
LABEL_54:
      BOOL result = sub_723EC(1u);
      if (!result) {
        return result;
      }
      sub_6BAC((uint64_t)v53);
      sub_188FC78(v53, (uint64_t)"Base fare in fare route has a range length of ", 46);
      v33 = (void *)std::ostream::operator<<();
      sub_188FC78(v33, (uint64_t)", which is too short", 20);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
    }
LABEL_70:
    if (v52 < 0) {
      operator delete(__p[0]);
    }
    if (v54 < 0) {
      operator delete((void *)v53[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    return 0;
  }
  int v7 = 0;
  int v12 = 0;
LABEL_10:
  uint64_t v13 = *(unsigned int *)(a2 + 56);
  if ((int)v13 < 1) {
    return 1;
  }
  uint64_t v14 = 0;
  while (1)
  {
    uint64_t v15 = *(void *)(a2 + 64);
    uint64_t v16 = *(void *)(v15 + 8 * v14 + 8);
    if (v14)
    {
      uint64_t v17 = *(void *)(v15 + 8 * (v14 - 1) + 8);
      if ((*(_DWORD *)(v17 + 60) + *(_DWORD *)(v17 + 56)) > *(_DWORD *)(v16 + 56))
      {
        BOOL result = sub_723EC(1u);
        if (!result) {
          return result;
        }
        sub_6BAC((uint64_t)v53);
        sub_188FC78(v53, (uint64_t)"Surcharge reference legs in non-increasing order. Previous surcharge at index ", 78);
        uint64_t v43 = (void *)std::ostream::operator<<();
        sub_188FC78(v43, (uint64_t)" has start leg ", 15);
        uint64_t v44 = (void *)std::ostream::operator<<();
        sub_188FC78(v44, (uint64_t)" and range length ", 18);
        uint64_t v45 = (void *)std::ostream::operator<<();
        sub_188FC78(v45, (uint64_t)"; surcharge at index ", 21);
        v46 = (void *)std::ostream::operator<<();
        sub_188FC78(v46, (uint64_t)" has start leg ", 15);
        std::ostream::operator<<();
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
        goto LABEL_70;
      }
    }
    if (!*(_DWORD *)(v16 + 60))
    {
      BOOL result = sub_723EC(1u);
      if (!result) {
        return result;
      }
      sub_6BAC((uint64_t)v53);
      sub_188FC78(v53, (uint64_t)"Surcharge in fare route has a range length of ", 46);
      v37 = (void *)std::ostream::operator<<();
      sub_188FC78(v37, (uint64_t)", which is too short", 20);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      goto LABEL_70;
    }
    if ((int)sub_920D68(*(unsigned int *)(v16 + 56)) >= *(_DWORD *)(a1 + 32))
    {
      BOOL result = sub_723EC(1u);
      if (!result) {
        return result;
      }
      sub_6BAC((uint64_t)v53);
      sub_188FC78(v53, (uint64_t)"Surcharge in fare route references start leg ", 45);
      std::string::size_type v38 = (void *)std::ostream::operator<<();
      sub_188FC78(v38, (uint64_t)" which is out of range (", 24);
      std::string::size_type v39 = (void *)std::ostream::operator<<();
      sub_188FC78(v39, (uint64_t)" legs in fare route request)", 28);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      goto LABEL_70;
    }
    if ((int)sub_920D68((*(_DWORD *)(v16 + 60) + *(_DWORD *)(v16 + 56))) > *(_DWORD *)(a1 + 32))
    {
      BOOL result = sub_723EC(1u);
      if (!result) {
        return result;
      }
      sub_6BAC((uint64_t)v53);
      sub_188FC78(v53, (uint64_t)"Surcharge in fare route references start leg ", 45);
      v40 = (void *)std::ostream::operator<<();
      sub_188FC78(v40, (uint64_t)" + range length ", 16);
      int v41 = (void *)std::ostream::operator<<();
      sub_188FC78(v41, (uint64_t)" which is out of range (", 24);
      uint64_t v42 = (void *)std::ostream::operator<<();
      sub_188FC78(v42, (uint64_t)" legs in fare route request)", 28);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      goto LABEL_70;
    }
    uint64_t v18 = *(void *)(v16 + 40);
    uint64_t v19 = v18 ? v18 + 8 : 0;
    uint64_t v20 = *(int *)(v16 + 32);
    if (v20) {
      break;
    }
LABEL_12:
    ++v14;
    BOOL result = 1;
    if (v14 == v13) {
      return result;
    }
  }
  uint64_t v21 = 8 * v20;
  while (1)
  {
    unint64_t v22 = *(uint64_t (****)())(*(void *)v19 + 48);
    if (!v12) {
      break;
    }
    if (!v22) {
      unint64_t v22 = &off_253C7D8;
    }
    if (v7 != *((_DWORD *)v22 + 6)) {
      goto LABEL_36;
    }
LABEL_34:
    v19 += 8;
    v21 -= 8;
    if (!v21) {
      goto LABEL_12;
    }
  }
  if (v22) {
    unint64_t v23 = *(uint64_t (****)())(*(void *)v19 + 48);
  }
  else {
    unint64_t v23 = &off_253C7D8;
  }
  int v7 = *((_DWORD *)v23 + 6);
  int v12 = 1;
  if (!v22) {
    unint64_t v22 = &off_253C7D8;
  }
  if (v7 == *((_DWORD *)v22 + 6)) {
    goto LABEL_34;
  }
LABEL_36:
  BOOL result = sub_723EC(1u);
  if (result)
  {
    sub_6BAC((uint64_t)v53);
    sub_188FC78(v53, (uint64_t)"Fare route response has surcharge unit of mismatching currencies. Expected ", 75);
    int8x8_t v24 = (void *)std::ostream::operator<<();
    sub_188FC78(v24, (uint64_t)" but got ", 9);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
    goto LABEL_70;
  }
  return result;
}

void sub_10C4F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_10C512C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 32))
  {
    if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 56)) {
      uint64_t v4 = *(uint64_t (****)())(*(void *)(*(void *)(a1 + 40) + 8) + 56);
    }
    else {
      uint64_t v4 = &off_253C7D8;
    }
    sub_151C904(v15, v4);
    uint64_t v5 = *(unsigned int *)(a1 + 32);
    if ((int)v5 < 2)
    {
LABEL_11:
      *(unsigned char *)a2 = 1;
      sub_10C5A50((std::string *)(a2 + 8), (uint64_t)v15);
    }
    else
    {
      int v6 = v18;
      int v7 = v16 | 2;
      uint64_t v8 = *(void *)(a1 + 40) + 16;
      uint64_t v9 = v5 - 1;
      while (1)
      {
        uint64_t v10 = *(uint64_t (****)())(*(void *)v8 + 56);
        if (!v10) {
          uint64_t v10 = &off_253C7D8;
        }
        if (*((_DWORD *)v10 + 6) != v17) {
          break;
        }
        v6 += *((_DWORD *)v10 + 7);
        int v16 = v7;
        int v18 = v6;
        v8 += 8;
        if (!--v9) {
          goto LABEL_11;
        }
      }
      uint64_t v13 = sub_10C7C84(3);
      *(unsigned char *)a2 = 0;
      *(void *)(a2 + 8) = v13;
      *(void *)(a2 + 16) = v14;
    }
    return sub_151C978(v15);
  }
  else
  {
    uint64_t result = sub_10C7C84(1);
    *(unsigned char *)a2 = 0;
    *(void *)(a2 + 8) = result;
    *(void *)(a2 + 16) = v12;
  }
  return result;
}

double sub_10C5244@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string **a4@<X8>)
{
  int v7 = sub_360CE4(*(void *)(*(void *)(*(void *)(a2 + 40) + 8 + 8 * (*(_DWORD *)(a1 + 56) + *(_DWORD *)(a1 + 60) - 1))+ 64)- *(void *)(*(void *)(*(void *)(a2 + 40) + 8 + 8 * *(int *)(a1 + 56)) + 56));
  if (v7 < 0)
  {
    int v18 = v7;
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v25, v18);
    uint64_t v20 = std::string::insert(&v25, 0, "Surcharge covers a trip with a negative duration of ");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    unint64_t v22 = std::string::append(&v26, " sec");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    std::string::size_type v28 = v22->__r_.__value_.__r.__words[2];
    long long v27 = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    int8x8_t v24 = (void *)sub_2F404((uint64_t)exception, &v27);
  }
  int v8 = 10 * v7;
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    uint64_t v10 = (void *)(v9 + 8);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = *(int *)(a1 + 32);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  sub_10C5B90(a4, v10, &v10[v11], v11);
  sub_10C9E4C((int *)&v26, (unsigned char *)(a3 + 1), v8);
  uint64_t v12 = *a4;
  uint64_t v13 = a4[1];
  unint64_t v14 = 126 - 2 * __clz(((char *)v13 - (char *)*a4) >> 6);
  BOOL v15 = v13 == *a4;
  LODWORD(v27) = v26.__r_.__value_.__l.__data_;
  if (v15) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v14;
  }
  return sub_10C5D08(v12, v13, (unsigned int *)&v27, v16, 1);
}

void sub_10C53C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void **sub_10C5460(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_151F028(v3 - 64);
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_10C54BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (!*(_DWORD *)(a2 + 56))
  {
    uint64_t result = sub_10C7C84(2);
    *(unsigned char *)a4 = 0;
    *(void *)(a4 + 8) = result;
    *(void *)(a4 + 16) = v18;
    return result;
  }
  sub_151C828(v26, 0, 0);
  uint64_t v8 = *(void *)(a2 + 64);
  if (v8) {
    uint64_t v9 = (uint64_t *)(v8 + 8);
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(int *)(a2 + 56);
  if (!v10)
  {
LABEL_17:
    *(unsigned char *)a4 = 1;
    sub_10C5A50((std::string *)(a4 + 8), (uint64_t)v26);
    return sub_151C978(v26);
  }
  unint64_t v11 = &v9[v10];
  while (1)
  {
    sub_10C5244(*v9, a1, a3, (std::string **)&__p);
    uint64_t v12 = __p;
    uint64_t v13 = (uint64_t (***)())*((void *)__p + 6);
    if (!v13) {
      uint64_t v13 = &off_253C7D8;
    }
    if (HIDWORD(v28)) {
      break;
    }
    v27 |= 3u;
    std::string::size_type v28 = v13[3];
    uint64_t v15 = (uint64_t)v25;
    uint64_t v16 = __p;
    if (v25 != __p)
    {
      do
LABEL_15:
        uint64_t v15 = sub_151F028(v15 - 64);
      while ((void *)v15 != v12);
      uint64_t v16 = __p;
    }
LABEL_7:
    std::string v25 = v12;
    operator delete(v16);
    if (++v9 == v11) {
      goto LABEL_17;
    }
  }
  if (*((_DWORD *)v13 + 6) == v28)
  {
    int v14 = *((_DWORD *)v13 + 7) + HIDWORD(v28);
    v27 |= 2u;
    HIDWORD(v28) = v14;
    uint64_t v15 = (uint64_t)v25;
    uint64_t v16 = __p;
    if (v25 != __p) {
      goto LABEL_15;
    }
    goto LABEL_7;
  }
  uint64_t v19 = sub_10C7C84(3);
  *(unsigned char *)a4 = 0;
  *(void *)(a4 + 8) = v19;
  *(void *)(a4 + 16) = v20;
  long long v21 = __p;
  if (__p)
  {
    uint64_t v22 = (uint64_t)v25;
    long long v23 = __p;
    if (v25 != __p)
    {
      do
        uint64_t v22 = sub_151F028(v22 - 64);
      while ((void *)v22 != v21);
      long long v23 = __p;
    }
    std::string v25 = v21;
    operator delete(v23);
  }
  return sub_151C978(v26);
}

void sub_10C5688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_151C978(va);
  _Unwind_Resume(a1);
}

uint64_t sub_10C569C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_10C512C(a2, (uint64_t)v14);
  if (!v14[0])
  {
    *(unsigned char *)a4 = 0;
    uint64_t v10 = (std::string *)(a4 + 8);
LABEL_8:
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v15;
    goto LABEL_9;
  }
  uint64_t result = sub_10C54BC(a1, a2, a3, (uint64_t)v12);
  if (!v12[0])
  {
LABEL_5:
    int v9 = v14[0];
    *(unsigned char *)a4 = v14[0];
    uint64_t v10 = (std::string *)(a4 + 8);
    if (v9)
    {
      uint64_t result = (uint64_t)sub_10C5A50(v10, (uint64_t)&v15);
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (v13[6] == v17)
  {
    v16 |= 2u;
    v18 += v13[7];
    uint64_t result = sub_151C978(v13);
    goto LABEL_5;
  }
  uint64_t result = sub_10C7C84(3);
  *(unsigned char *)a4 = 0;
  *(void *)(a4 + 8) = result;
  *(void *)(a4 + 16) = v11;
  if (v12[0]) {
    uint64_t result = sub_151C978(v13);
  }
LABEL_9:
  if (v14[0]) {
    return sub_151C978(&v15);
  }
  return result;
}

void sub_10C57BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15)
{
  if (a14) {
    sub_151C978(&a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10C57DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = (uint64_t *)(v4 + 8);
  if (!v4) {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(int *)(a1 + 32);
  if (v6)
  {
    uint64_t v7 = 8 * v6;
    while (1)
    {
      uint64_t v8 = *v5;
      if (*(_DWORD *)(*v5 + 72) == a2) {
        break;
      }
      ++v5;
      v7 -= 8;
      if (!v7) {
        goto LABEL_7;
      }
    }
    *(unsigned char *)a3 = 1;
    return sub_151D100(a3 + 8, v8);
  }
  else
  {
LABEL_7:
    uint64_t result = sub_10C7C84(1);
    *(unsigned char *)a3 = 0;
    *(void *)(a3 + 8) = result;
    *(void *)(a3 + 16) = v10;
  }
  return result;
}

void sub_10C5874(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 64);
  if (v6) {
    uint64_t v7 = (uint64_t *)(v6 + 8);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(int *)(a2 + 56);
  if (v8)
  {
    uint64_t v9 = 8 * v8;
    while (1)
    {
      uint64_t v10 = *v7;
      if (*(_DWORD *)(*v7 + 56) == a4) {
        break;
      }
      ++v7;
      v9 -= 8;
      if (!v9) {
        goto LABEL_8;
      }
    }
    double v13 = sub_10C5244(v10, a1, a3, (std::string **)&__p);
    sub_151E290(v24, v10, v13);
    uint64_t v14 = v26;
    if (v26 >= 1)
    {
      long long v15 = (uint64_t *)(v27 + 2);
      do
      {
        sub_151F064(*v15++);
        --v14;
      }
      while (v14);
      int v26 = 0;
    }
    int v16 = (char *)__p;
    int v17 = v29;
    if (__p != v29)
    {
      do
      {
        if (v27 && (uint64_t v18 = v26, v26 < *v27))
        {
          ++v26;
          uint64_t v19 = *(std::string **)&v27[2 * v18 + 2];
        }
        else
        {
          uint64_t v20 = sub_1520554(v25);
          uint64_t v19 = (std::string *)sub_188CDC8((uint64_t)&v25, v20);
        }
        sub_151F9F0(v19, (uint64_t)v16);
        v16 += 64;
      }
      while (v16 != v17);
    }
    *(unsigned char *)a5 = 1;
    sub_10C5AF0((std::string *)(a5 + 8), (uint64_t)v24);
    sub_151E354(v24);
    long long v21 = (char *)__p;
    if (__p)
    {
      uint64_t v22 = (uint64_t)v29;
      long long v23 = __p;
      if (v29 != __p)
      {
        do
          uint64_t v22 = sub_151F028(v22 - 64);
        while ((char *)v22 != v21);
        long long v23 = __p;
      }
      uint64_t v29 = v21;
      operator delete(v23);
    }
  }
  else
  {
LABEL_8:
    uint64_t v11 = sub_10C7C84(2);
    *(unsigned char *)a5 = 0;
    *(void *)(a5 + 8) = v11;
    *(void *)(a5 + 16) = v12;
  }
}

void sub_10C5A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_10C5460((void **)va);
  _Unwind_Resume(a1);
}

void sub_10C5A30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_151E354((uint64_t *)va);
  sub_10C5460((void **)va1);
  _Unwind_Resume(a1);
}

std::string *sub_10C5A50(std::string *a1, uint64_t a2)
{
  sub_151C828(a1, 0, 0);
  if (a1 != (std::string *)a2)
  {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
    if ((size & 2) != 0)
    {
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v5 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
      if (size) {
        uint64_t v5 = (void *)*v5;
      }
    }
    uint64_t v6 = *(void *)(a2 + 8);
    if ((v6 & 2) != 0)
    {
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6) {
        uint64_t v7 = (void *)*v7;
      }
    }
    if (v5 == v7) {
      sub_151CEBC((uint64_t)a1, a2);
    }
    else {
      sub_151CE68(a1, a2);
    }
  }
  return a1;
}

std::string *sub_10C5AF0(std::string *a1, uint64_t a2)
{
  sub_151E0C8((uint64_t)a1, 0, 0);
  if (a1 != (std::string *)a2)
  {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
    if ((size & 2) != 0)
    {
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v5 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
      if (size) {
        uint64_t v5 = (void *)*v5;
      }
    }
    uint64_t v6 = *(void *)(a2 + 8);
    if ((v6 & 2) != 0)
    {
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6) {
        uint64_t v7 = (void *)*v7;
      }
    }
    if (v5 == v7) {
      sub_11C7674((uint64_t)a1, a2);
    }
    else {
      sub_151ED14(a1, a2);
    }
  }
  return a1;
}

void *sub_10C5B90(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >> 58) {
      sub_2E00();
    }
    uint64_t result = operator new(a4 << 6);
    uint64_t v8 = result;
    *uint64_t v5 = result;
    v5[1] = result;
    v5[2] = &result[8 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = (void *)sub_151EF54(&v8[v9], *a2++);
        v9 += 8;
      }
      while (a2 != a3);
      uint64_t v8 = (void *)((char *)v8 + v9 * 8);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_10C5C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_10C5C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 64)
    sub_151F028(v10 - 64 + v11);
  *(void *)(v9 + 8) = v10;
  sub_10C5C80(&a9);
  _Unwind_Resume(a1);
}

void ***sub_10C5C80(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      uint64_t v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          uint64_t v4 = sub_151F028(v4 - 64);
        while ((void *)v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

double sub_10C5D08(std::string *a1, std::string *a2, unsigned int *a3, uint64_t a4, char a5)
{
uint64_t sub_10C61DC(uint64_t result, uint64_t a2, unsigned int *a3)
{
  if (result == a2) {
    return result;
  }
  uint64_t v4 = (std::string *)result;
  uint64_t v5 = result + 64;
  if (result + 64 == a2) {
    return result;
  }
  uint64_t v7 = 0;
  uint64_t v8 = result;
  while (2)
  {
    uint64_t v9 = v8;
    uint64_t v8 = v5;
    double result = sub_10C9EC8(a3, v5, v9);
    if (!result) {
      goto LABEL_6;
    }
    sub_10C7540(v22, v8);
    uint64_t v10 = v7;
    while (1)
    {
      uint64_t v11 = (uint64_t)v4 + v10;
      uint64_t v12 = *(uint64_t *)((char *)&v4[3].__r_.__value_.__l.__data_ + v10);
      if ((v12 & 2) != 0)
      {
        uint64_t v13 = 0;
        uint64_t v14 = *(void *)(v11 + 8);
        if ((v14 & 2) != 0) {
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t v13 = (void *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
        if (v12) {
          uint64_t v13 = (void *)*v13;
        }
        uint64_t v14 = *(void *)(v11 + 8);
        if ((v14 & 2) != 0)
        {
LABEL_16:
          uint64_t v15 = 0;
          goto LABEL_17;
        }
      }
      uint64_t v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
      if (v14) {
        uint64_t v15 = (void *)*v15;
      }
LABEL_17:
      unint64_t v16 = (std::string *)(v11 + 64);
      if (v13 == v15) {
        sub_151FA44((uint64_t)v16, v11);
      }
      else {
        sub_151F9F0(v16, v11);
      }
      if (!v10) {
        break;
      }
      char v17 = sub_10C9EC8(a3, (uint64_t)v22, (uint64_t)&v4[-2] + v10 - 16);
      v10 -= 64;
      if ((v17 & 1) == 0)
      {
        unint64_t v18 = (std::string *)((char *)v4 + v10 + 64);
        if (v18 == v22) {
          goto LABEL_5;
        }
        goto LABEL_25;
      }
    }
    unint64_t v18 = v4;
    if (v4 == v22) {
      goto LABEL_5;
    }
LABEL_25:
    std::string::size_type size = v18->__r_.__value_.__l.__size_;
    if ((size & 2) != 0)
    {
      std::string::size_type v20 = 0;
    }
    else
    {
      std::string::size_type v20 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
      if (size) {
        std::string::size_type v20 = (void *)*v20;
      }
    }
    if ((v22[0].__r_.__value_.__s.__data_[8] & 2) != 0)
    {
      long long v21 = 0;
    }
    else
    {
      long long v21 = (void *)(v22[0].__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFFCLL);
      if (v22[0].__r_.__value_.__s.__data_[8]) {
        long long v21 = (void *)*v21;
      }
    }
    if (v20 == v21) {
      sub_151FA44((uint64_t)v18, (uint64_t)v22);
    }
    else {
      sub_151F9F0(v18, (uint64_t)v22);
    }
LABEL_5:
    double result = sub_151F028(v22);
LABEL_6:
    uint64_t v5 = v8 + 64;
    v7 += 64;
    if (v8 + 64 != a2) {
      continue;
    }
    return result;
  }
}

void sub_10C6378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10C6390(uint64_t result, uint64_t a2, unsigned int *a3)
{
  if (result == a2) {
    return result;
  }
  uint64_t v4 = result;
  uint64_t v5 = result + 64;
  if (result + 64 == a2) {
    return result;
  }
  while (2)
  {
    uint64_t v7 = v5;
    double result = sub_10C9EC8(a3, v5, v4);
    if (!result) {
      goto LABEL_6;
    }
    sub_10C7540(v17, v7);
    do
    {
      uint64_t v8 = *(void *)(v4 + 72);
      if ((v8 & 2) != 0)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *(void *)(v4 + 8);
        if ((v10 & 2) != 0) {
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
        if (v8) {
          uint64_t v9 = (void *)*v9;
        }
        uint64_t v10 = *(void *)(v4 + 8);
        if ((v10 & 2) != 0)
        {
LABEL_16:
          uint64_t v11 = 0;
          goto LABEL_17;
        }
      }
      uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
      if (v10) {
        uint64_t v11 = (void *)*v11;
      }
LABEL_17:
      uint64_t v12 = (std::string *)(v4 + 64);
      if (v9 == v11) {
        sub_151FA44((uint64_t)v12, v4);
      }
      else {
        sub_151F9F0(v12, v4);
      }
      v4 -= 64;
    }
    while ((sub_10C9EC8(a3, (uint64_t)v17, v4) & 1) != 0);
    uint64_t v13 = (std::string *)(v4 + 64);
    if ((std::string *)(v4 + 64) != v17)
    {
      uint64_t v14 = *(void *)(v4 + 72);
      if ((v14 & 2) != 0)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
        if (v14) {
          uint64_t v15 = (void *)*v15;
        }
      }
      if ((v17[0].__r_.__value_.__s.__data_[8] & 2) != 0)
      {
        unint64_t v16 = 0;
      }
      else
      {
        unint64_t v16 = (void *)(v17[0].__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFFCLL);
        if (v17[0].__r_.__value_.__s.__data_[8]) {
          unint64_t v16 = (void *)*v16;
        }
      }
      if (v15 == v16) {
        sub_151FA44((uint64_t)v13, (uint64_t)v17);
      }
      else {
        sub_151F9F0(v13, (uint64_t)v17);
      }
    }
    double result = sub_151F028(v17);
LABEL_6:
    uint64_t v5 = v7 + 64;
    uint64_t v4 = v7;
    if (v7 + 64 != a2) {
      continue;
    }
    return result;
  }
}

void sub_10C6500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10C6518(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  char v8 = sub_10C9EC8(a4, a2, a1);
  uint64_t result = sub_10C9EC8(a4, a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    if (a3 != a2)
    {
      uint64_t v12 = *(void *)(a2 + 8);
      if ((v12 & 2) != 0)
      {
        uint64_t v13 = 0;
      }
      else
      {
        uint64_t v13 = (void *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
        if (v12) {
          uint64_t v13 = (void *)*v13;
        }
      }
      uint64_t v18 = *(void *)(a3 + 8);
      if ((v18 & 2) != 0)
      {
        uint64_t v19 = 0;
      }
      else
      {
        uint64_t v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
        if (v18) {
          uint64_t v19 = (void *)*v19;
        }
      }
      if (v13 == v19)
      {
        sub_151FA44(a2, a3);
        if (!sub_10C9EC8(a4, a2, a1)) {
          return 1;
        }
        goto LABEL_37;
      }
      sub_188A09C(a2, a3);
    }
    if (!sub_10C9EC8(a4, a2, a1)) {
      return 1;
    }
LABEL_37:
    if (a2 == a1) {
      return 2;
    }
    uint64_t v22 = *(void *)(a1 + 8);
    if ((v22 & 2) != 0)
    {
      long long v23 = 0;
    }
    else
    {
      long long v23 = (void *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
      if (v22) {
        long long v23 = (void *)*v23;
      }
    }
    uint64_t v26 = *(void *)(a2 + 8);
    if ((v26 & 2) != 0)
    {
      int v27 = 0;
    }
    else
    {
      int v27 = (void *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
      if (v26)
      {
        uint64_t v28 = a1;
        uint64_t v29 = a2;
        if (v23 == (void *)*v27) {
          goto LABEL_69;
        }
        goto LABEL_65;
      }
    }
    uint64_t v28 = a1;
    uint64_t v29 = a2;
    if (v23 == v27)
    {
LABEL_69:
      sub_151FA44(v28, v29);
      return 2;
    }
LABEL_65:
    sub_188A09C(v28, v29);
    return 2;
  }
  if (!result)
  {
    if (a2 != a1)
    {
      uint64_t v14 = *(void *)(a1 + 8);
      if ((v14 & 2) != 0)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
        if (v14) {
          uint64_t v15 = (void *)*v15;
        }
      }
      uint64_t v20 = *(void *)(a2 + 8);
      if ((v20 & 2) != 0)
      {
        long long v21 = 0;
      }
      else
      {
        long long v21 = (void *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
        if (v20) {
          long long v21 = (void *)*v21;
        }
      }
      if (v15 == v21)
      {
        sub_151FA44(a1, a2);
        if (sub_10C9EC8(a4, a3, a2))
        {
LABEL_45:
          if (a3 != a2)
          {
            uint64_t v24 = *(void *)(a2 + 8);
            if ((v24 & 2) != 0)
            {
              char v25 = 0;
            }
            else
            {
              char v25 = (void *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
              if (v24) {
                char v25 = (void *)*v25;
              }
            }
            uint64_t v30 = *(void *)(a3 + 8);
            if ((v30 & 2) != 0)
            {
              unint64_t v31 = 0;
            }
            else
            {
              unint64_t v31 = (void *)(v30 & 0xFFFFFFFFFFFFFFFCLL);
              if (v30) {
                unint64_t v31 = (void *)*v31;
              }
            }
            uint64_t v28 = a2;
            uint64_t v29 = a3;
            if (v25 == v31) {
              goto LABEL_69;
            }
            goto LABEL_65;
          }
          return 2;
        }
        return 1;
      }
      sub_188A09C(a1, a2);
    }
    if (sub_10C9EC8(a4, a3, a2)) {
      goto LABEL_45;
    }
    return 1;
  }
  if (a3 != a1)
  {
    uint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & 2) != 0)
    {
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
      if (v10) {
        uint64_t v11 = (void *)*v11;
      }
    }
    uint64_t v16 = *(void *)(a3 + 8);
    if ((v16 & 2) != 0)
    {
      char v17 = 0;
    }
    else
    {
      char v17 = (void *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
      if (v16) {
        char v17 = (void *)*v17;
      }
    }
    if (v11 == v17) {
      sub_151FA44(a1, a3);
    }
    else {
      sub_188A09C(a1, a3);
    }
    return 1;
  }
  return 1;
}

unint64_t sub_10C6824(std::string *a1, unint64_t a2, unsigned int *a3)
{
  sub_10C7540(v21, (uint64_t)a1);
  if (sub_10C9EC8(a3, (uint64_t)v21, a2 - 64))
  {
    unint64_t v6 = (unint64_t)a1;
    do
      v6 += 64;
    while ((sub_10C9EC8(a3, (uint64_t)v21, v6) & 1) == 0);
  }
  else
  {
    unint64_t v7 = (unint64_t)&a1[2].__r_.__value_.__r.__words[2];
    do
    {
      unint64_t v6 = v7;
      if (v7 >= a2) {
        break;
      }
      int v8 = sub_10C9EC8(a3, (uint64_t)v21, v7);
      unint64_t v7 = v6 + 64;
    }
    while (!v8);
  }
  if (v6 < a2)
  {
    do
      a2 -= 64;
    while ((sub_10C9EC8(a3, (uint64_t)v21, a2) & 1) != 0);
  }
  while (v6 < a2)
  {
    uint64_t v9 = *(void *)(v6 + 8);
    if ((v9 & 2) != 0)
    {
      uint64_t v10 = 0;
    }
    else
    {
      uint64_t v10 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
      if (v9) {
        uint64_t v10 = (void *)*v10;
      }
    }
    uint64_t v11 = *(void *)(a2 + 8);
    if ((v11 & 2) != 0)
    {
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      if (v11) {
        uint64_t v12 = (void *)*v12;
      }
    }
    if (v10 == v12) {
      sub_151FA44(v6, a2);
    }
    else {
      sub_188A09C(v6, a2);
    }
    do
      v6 += 64;
    while (!sub_10C9EC8(a3, (uint64_t)v21, v6));
    do
      a2 -= 64;
    while ((sub_10C9EC8(a3, (uint64_t)v21, a2) & 1) != 0);
  }
  if ((std::string *)(v6 - 64) != a1)
  {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
    if ((size & 2) != 0)
    {
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v14 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
      if (size) {
        uint64_t v14 = (void *)*v14;
      }
    }
    uint64_t v15 = *(void *)(v6 - 56);
    if ((v15 & 2) != 0)
    {
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
      if (v15) {
        uint64_t v16 = (void *)*v16;
      }
    }
    if (v14 == v16) {
      sub_151FA44((uint64_t)a1, v6 - 64);
    }
    else {
      sub_151F9F0(a1, v6 - 64);
    }
  }
  if ((std::string *)(v6 - 64) != v21)
  {
    uint64_t v17 = *(void *)(v6 - 56);
    if ((v17 & 2) != 0)
    {
      uint64_t v18 = 0;
    }
    else
    {
      uint64_t v18 = (void *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
      if (v17) {
        uint64_t v18 = (void *)*v18;
      }
    }
    if ((v21[0].__r_.__value_.__s.__data_[8] & 2) != 0)
    {
      uint64_t v19 = 0;
    }
    else
    {
      uint64_t v19 = (void *)(v21[0].__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFFCLL);
      if (v21[0].__r_.__value_.__s.__data_[8]) {
        uint64_t v19 = (void *)*v19;
      }
    }
    if (v18 == v19) {
      sub_151FA44(v6 - 64, (uint64_t)v21);
    }
    else {
      sub_151F9F0((std::string *)(v6 - 64), (uint64_t)v21);
    }
  }
  sub_151F028(v21);
  return v6;
}

void sub_10C6A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10C6A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10C6A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10C6A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10C6AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10C6AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10C6AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t sub_10C6AEC(std::string *a1, unint64_t a2, unsigned int *a3)
{
  sub_10C7540(v23, (uint64_t)a1);
  uint64_t v6 = 0;
  do
  {
    char v7 = sub_10C9EC8(a3, (uint64_t)&a1[2].__r_.__value_.__r.__words[v6 + 2], (uint64_t)v23);
    v6 += 8;
  }
  while ((v7 & 1) != 0);
  int v8 = (char *)a1 + v6 * 8;
  if (v6 == 8)
  {
    do
    {
      if ((unint64_t)v8 >= a2) {
        break;
      }
      a2 -= 64;
    }
    while ((sub_10C9EC8(a3, a2, (uint64_t)v23) & 1) == 0);
  }
  else
  {
    do
      a2 -= 64;
    while (!sub_10C9EC8(a3, a2, (uint64_t)v23));
  }
  unint64_t v9 = (unint64_t)a1 + v6 * 8;
  if ((unint64_t)v8 < a2)
  {
    unint64_t v10 = a2;
    do
    {
      uint64_t v11 = *(void *)(v9 + 8);
      if ((v11 & 2) != 0)
      {
        uint64_t v12 = 0;
      }
      else
      {
        uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
        if (v11) {
          uint64_t v12 = (void *)*v12;
        }
      }
      uint64_t v13 = *(void *)(v10 + 8);
      if ((v13 & 2) != 0)
      {
        uint64_t v14 = 0;
      }
      else
      {
        uint64_t v14 = (void *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
        if (v13) {
          uint64_t v14 = (void *)*v14;
        }
      }
      if (v12 == v14) {
        sub_151FA44(v9, v10);
      }
      else {
        sub_188A09C(v9, v10);
      }
      do
        v9 += 64;
      while ((sub_10C9EC8(a3, v9, (uint64_t)v23) & 1) != 0);
      do
        v10 -= 64;
      while (!sub_10C9EC8(a3, v10, (uint64_t)v23));
    }
    while (v9 < v10);
  }
  if ((std::string *)(v9 - 64) != a1)
  {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
    if ((size & 2) != 0)
    {
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v16 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
      if (size) {
        uint64_t v16 = (void *)*v16;
      }
    }
    uint64_t v17 = *(void *)(v9 - 56);
    if ((v17 & 2) != 0)
    {
      uint64_t v18 = 0;
    }
    else
    {
      uint64_t v18 = (void *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
      if (v17) {
        uint64_t v18 = (void *)*v18;
      }
    }
    if (v16 == v18) {
      sub_151FA44((uint64_t)a1, v9 - 64);
    }
    else {
      sub_151F9F0(a1, v9 - 64);
    }
  }
  if ((std::string *)(v9 - 64) != v23)
  {
    uint64_t v19 = *(void *)(v9 - 56);
    if ((v19 & 2) != 0)
    {
      uint64_t v20 = 0;
    }
    else
    {
      uint64_t v20 = (void *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
      if (v19) {
        uint64_t v20 = (void *)*v20;
      }
    }
    if ((v23[0].__r_.__value_.__s.__data_[8] & 2) != 0)
    {
      long long v21 = 0;
    }
    else
    {
      long long v21 = (void *)(v23[0].__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFFCLL);
      if (v23[0].__r_.__value_.__s.__data_[8]) {
        long long v21 = (void *)*v21;
      }
    }
    if (v20 == v21) {
      sub_151FA44(v9 - 64, (uint64_t)v23);
    }
    else {
      sub_151F9F0((std::string *)(v9 - 64), (uint64_t)v23);
    }
  }
  sub_151F028(v23);
  return v9 - 64;
}

void sub_10C6D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10C6D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10C6D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10C6D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10C6D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10C6D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10C6DAC(std::string *a1, std::string *a2, unsigned int *a3)
{
  BOOL v6 = 1;
  switch(((char *)a2 - (char *)a1) >> 6)
  {
    case 0:
    case 1:
      return v6;
    case 2:
      char v7 = (std::string *)((char *)a2 - 64);
      int v8 = sub_10C9EC8(a3, (uint64_t)&a2[-3].__r_.__value_.__l.__size_, (uint64_t)a1);
      if (v7 != a1 && v8)
      {
        std::string::size_type size = a1->__r_.__value_.__l.__size_;
        if ((size & 2) != 0)
        {
          unint64_t v10 = 0;
        }
        else
        {
          unint64_t v10 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
          if (size) {
            unint64_t v10 = (void *)*v10;
          }
        }
        std::string::size_type v28 = a2[-3].__r_.__value_.__r.__words[2];
        if ((v28 & 2) != 0)
        {
          uint64_t v29 = 0;
        }
        else
        {
          uint64_t v29 = (void *)(v28 & 0xFFFFFFFFFFFFFFFCLL);
          if (v28) {
            uint64_t v29 = (void *)*v29;
          }
        }
        p_std::string::size_type size = (uint64_t)&a2[-3].__r_.__value_.__l.__size_;
        if (v10 == v29) {
          sub_151FA44((uint64_t)a1, p_size);
        }
        else {
          sub_188A09C((uint64_t)a1, p_size);
        }
      }
      return v6;
    case 3:
      sub_10C6518((uint64_t)a1, (uint64_t)&a1[2].__r_.__value_.__r.__words[2], (uint64_t)&a2[-3].__r_.__value_.__l.__size_, a3);
      return v6;
    case 4:
      sub_10C70C0((uint64_t)a1, (uint64_t)&a1[2].__r_.__value_.__r.__words[2], (uint64_t)&a1[5].__r_.__value_.__l.__size_, (uint64_t)&a2[-3].__r_.__value_.__l.__size_, a3);
      return v6;
    case 5:
      sub_10C72BC((uint64_t)a1, (uint64_t)&a1[2].__r_.__value_.__r.__words[2], (uint64_t)&a1[5].__r_.__value_.__l.__size_, (uint64_t)&a1[8], (uint64_t)&a2[-3].__r_.__value_.__l.__size_, a3);
      return v6;
    default:
      uint64_t v11 = (uint64_t)&a1[5].__r_.__value_.__l.__size_;
      sub_10C6518((uint64_t)a1, (uint64_t)&a1[2].__r_.__value_.__r.__words[2], (uint64_t)&a1[5].__r_.__value_.__l.__size_, a3);
      uint64_t v12 = (uint64_t)&a1[8];
      if (&a1[8] == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (!sub_10C9EC8(a3, v12, v11))
  {
LABEL_9:
    uint64_t v11 = v12;
    v13 += 64;
    v12 += 64;
    if ((std::string *)v12 == a2) {
      return 1;
    }
  }
  sub_10C7540(v32, v12);
  uint64_t v15 = v13;
  while (1)
  {
    uint64_t v16 = (std::string *)((char *)a1 + v15);
    uint64_t v17 = *(std::string::size_type *)((char *)&a1[8].__r_.__value_.__l.__size_ + v15);
    if ((v17 & 2) != 0)
    {
      uint64_t v18 = 0;
    }
    else
    {
      uint64_t v18 = (void *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
      if (v17) {
        uint64_t v18 = (void *)*v18;
      }
    }
    std::string::size_type v19 = v16[5].__r_.__value_.__r.__words[2];
    if ((v19 & 2) != 0)
    {
      uint64_t v20 = 0;
    }
    else
    {
      uint64_t v20 = (void *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
      if (v19) {
        uint64_t v20 = (void *)*v20;
      }
    }
    long long v21 = v16 + 8;
    uint64_t v22 = (uint64_t)&v16[5].__r_.__value_.__l.__size_;
    if (v18 == v20) {
      sub_151FA44((uint64_t)v21, v22);
    }
    else {
      sub_151F9F0(v21, v22);
    }
    if (v15 == -128) {
      break;
    }
    char v23 = sub_10C9EC8(a3, (uint64_t)v32, (uint64_t)&a1[2].__r_.__value_.__r.__words[2] + v15);
    v15 -= 64;
    if ((v23 & 1) == 0)
    {
      uint64_t v24 = (std::string *)((char *)a1 + v15 + 192);
      if (v24 == v32) {
        goto LABEL_39;
      }
      goto LABEL_28;
    }
  }
  uint64_t v24 = a1;
  if (a1 == v32) {
    goto LABEL_39;
  }
LABEL_28:
  std::string::size_type v25 = v24->__r_.__value_.__l.__size_;
  if ((v25 & 2) != 0)
  {
    uint64_t v26 = 0;
  }
  else
  {
    uint64_t v26 = (void *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
    if (v25) {
      uint64_t v26 = (void *)*v26;
    }
  }
  if ((v32[0].__r_.__value_.__s.__data_[8] & 2) != 0)
  {
    int v27 = 0;
  }
  else
  {
    int v27 = (void *)(v32[0].__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFFCLL);
    if (v32[0].__r_.__value_.__s.__data_[8]) {
      int v27 = (void *)*v27;
    }
  }
  if (v26 == v27) {
    sub_151FA44((uint64_t)v24, (uint64_t)v32);
  }
  else {
    sub_151F9F0(v24, (uint64_t)v32);
  }
LABEL_39:
  if (++v14 != 8)
  {
    sub_151F028(v32);
    goto LABEL_9;
  }
  BOOL v6 = v12 + 64 == (void)a2;
  sub_151F028(v32);
  return v6;
}

void sub_10C7090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_10C70C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  sub_10C6518(a1, a2, a3, a5);
  if (!sub_10C9EC8(a5, a4, a3)) {
    return result;
  }
  if (a4 != a3)
  {
    uint64_t v11 = *(void *)(a3 + 8);
    if ((v11 & 2) != 0)
    {
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      if (v11) {
        uint64_t v12 = (void *)*v12;
      }
    }
    uint64_t v13 = *(void *)(a4 + 8);
    if ((v13 & 2) != 0)
    {
      int v14 = 0;
    }
    else
    {
      int v14 = (void *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
      if (v13) {
        int v14 = (void *)*v14;
      }
    }
    if (v12 == v14)
    {
      sub_151FA44(a3, a4);
      if (!sub_10C9EC8(a5, a3, a2)) {
        return result;
      }
      goto LABEL_14;
    }
    sub_188A09C(a3, a4);
  }
  if (!sub_10C9EC8(a5, a3, a2)) {
    return result;
  }
LABEL_14:
  if (a3 != a2)
  {
    uint64_t v15 = *(void *)(a2 + 8);
    if ((v15 & 2) != 0)
    {
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
      if (v15) {
        uint64_t v16 = (void *)*v16;
      }
    }
    uint64_t v17 = *(void *)(a3 + 8);
    if ((v17 & 2) != 0)
    {
      uint64_t v18 = 0;
    }
    else
    {
      uint64_t v18 = (void *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
      if (v17) {
        uint64_t v18 = (void *)*v18;
      }
    }
    if (v16 == v18)
    {
      sub_151FA44(a2, a3);
      int v19 = sub_10C9EC8(a5, a2, a1);
      if (a2 == a1) {
        return result;
      }
      goto LABEL_28;
    }
    sub_188A09C(a2, a3);
  }
  int v19 = sub_10C9EC8(a5, a2, a1);
  if (a2 == a1) {
    return result;
  }
LABEL_28:
  if (v19)
  {
    uint64_t v20 = *(void *)(a1 + 8);
    if ((v20 & 2) != 0)
    {
      long long v21 = 0;
    }
    else
    {
      long long v21 = (void *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
      if (v20) {
        long long v21 = (void *)*v21;
      }
    }
    uint64_t v22 = *(void *)(a2 + 8);
    if ((v22 & 2) != 0)
    {
      char v23 = 0;
    }
    else
    {
      char v23 = (void *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
      if (v22) {
        char v23 = (void *)*v23;
      }
    }
    if (v21 == v23)
    {
      *(void *)&double result = sub_151FA44(a1, a2).n128_u64[0];
    }
    else
    {
      sub_188A09C(a1, a2);
    }
  }
  return result;
}

double sub_10C72BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6)
{
  sub_10C70C0(a1, a2, a3, a4, a6);
  if (!sub_10C9EC8(a6, a5, a4)) {
    return result;
  }
  if (a5 != a4)
  {
    uint64_t v13 = *(void *)(a4 + 8);
    if ((v13 & 2) != 0)
    {
      int v14 = 0;
    }
    else
    {
      int v14 = (void *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
      if (v13) {
        int v14 = (void *)*v14;
      }
    }
    uint64_t v15 = *(void *)(a5 + 8);
    if ((v15 & 2) != 0)
    {
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
      if (v15) {
        uint64_t v16 = (void *)*v16;
      }
    }
    if (v14 == v16)
    {
      sub_151FA44(a4, a5);
      if (!sub_10C9EC8(a6, a4, a3)) {
        return result;
      }
      goto LABEL_14;
    }
    sub_188A09C(a4, a5);
  }
  if (!sub_10C9EC8(a6, a4, a3)) {
    return result;
  }
LABEL_14:
  if (a4 != a3)
  {
    uint64_t v17 = *(void *)(a3 + 8);
    if ((v17 & 2) != 0)
    {
      uint64_t v18 = 0;
    }
    else
    {
      uint64_t v18 = (void *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
      if (v17) {
        uint64_t v18 = (void *)*v18;
      }
    }
    uint64_t v19 = *(void *)(a4 + 8);
    if ((v19 & 2) != 0)
    {
      uint64_t v20 = 0;
    }
    else
    {
      uint64_t v20 = (void *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
      if (v19) {
        uint64_t v20 = (void *)*v20;
      }
    }
    if (v18 == v20)
    {
      sub_151FA44(a3, a4);
      if (!sub_10C9EC8(a6, a3, a2)) {
        return result;
      }
      goto LABEL_28;
    }
    sub_188A09C(a3, a4);
  }
  if (!sub_10C9EC8(a6, a3, a2)) {
    return result;
  }
LABEL_28:
  if (a3 != a2)
  {
    uint64_t v21 = *(void *)(a2 + 8);
    if ((v21 & 2) != 0)
    {
      uint64_t v22 = 0;
    }
    else
    {
      uint64_t v22 = (void *)(v21 & 0xFFFFFFFFFFFFFFFCLL);
      if (v21) {
        uint64_t v22 = (void *)*v22;
      }
    }
    uint64_t v23 = *(void *)(a3 + 8);
    if ((v23 & 2) != 0)
    {
      uint64_t v24 = 0;
    }
    else
    {
      uint64_t v24 = (void *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
      if (v23) {
        uint64_t v24 = (void *)*v24;
      }
    }
    if (v22 == v24)
    {
      sub_151FA44(a2, a3);
      int v25 = sub_10C9EC8(a6, a2, a1);
      if (a2 == a1) {
        return result;
      }
      goto LABEL_42;
    }
    sub_188A09C(a2, a3);
  }
  int v25 = sub_10C9EC8(a6, a2, a1);
  if (a2 == a1) {
    return result;
  }
LABEL_42:
  if (v25)
  {
    uint64_t v26 = *(void *)(a1 + 8);
    if ((v26 & 2) != 0)
    {
      int v27 = 0;
    }
    else
    {
      int v27 = (void *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
      if (v26) {
        int v27 = (void *)*v27;
      }
    }
    uint64_t v28 = *(void *)(a2 + 8);
    if ((v28 & 2) != 0)
    {
      uint64_t v29 = 0;
    }
    else
    {
      uint64_t v29 = (void *)(v28 & 0xFFFFFFFFFFFFFFFCLL);
      if (v28) {
        uint64_t v29 = (void *)*v29;
      }
    }
    if (v27 == v29)
    {
      *(void *)&double result = sub_151FA44(a1, a2).n128_u64[0];
    }
    else
    {
      sub_188A09C(a1, a2);
    }
  }
  return result;
}

std::string *sub_10C7540(std::string *a1, uint64_t a2)
{
  sub_151ED78((uint64_t)a1, 0, 0);
  if (a1 != (std::string *)a2)
  {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
    if ((size & 2) != 0)
    {
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v5 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
      if (size) {
        uint64_t v5 = (void *)*v5;
      }
    }
    uint64_t v6 = *(void *)(a2 + 8);
    if ((v6 & 2) != 0)
    {
      char v7 = 0;
    }
    else
    {
      char v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6) {
        char v7 = (void *)*v7;
      }
    }
    if (v5 == v7) {
      sub_151FA44((uint64_t)a1, a2);
    }
    else {
      sub_151F9F0(a1, a2);
    }
  }
  return a1;
}

uint64_t sub_10C75E0(uint64_t result, unsigned int *a2, uint64_t a3, std::string *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v6 = result;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 6)
    {
      uint64_t v10 = ((uint64_t)a4 - result) >> 5;
      uint64_t v11 = v10 + 1;
      uint64_t v12 = result + ((v10 + 1) << 6);
      uint64_t v13 = v10 + 2;
      if (v10 + 2 < a3 && sub_10C9EC8(a2, result + ((v10 + 1) << 6), v12 + 64))
      {
        v12 += 64;
        uint64_t v11 = v13;
      }
      double result = sub_10C9EC8(a2, v12, (uint64_t)v5);
      if ((result & 1) == 0)
      {
        sub_10C7540(v23, (uint64_t)v5);
        do
        {
          int v14 = (std::string *)v12;
          if (v5 != (std::string *)v12)
          {
            std::string::size_type size = v5->__r_.__value_.__l.__size_;
            if ((size & 2) != 0)
            {
              uint64_t v16 = 0;
            }
            else
            {
              uint64_t v16 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
              if (size) {
                uint64_t v16 = (void *)*v16;
              }
            }
            uint64_t v17 = *(void *)(v12 + 8);
            if ((v17 & 2) != 0)
            {
              uint64_t v18 = 0;
            }
            else
            {
              uint64_t v18 = (void *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
              if (v17) {
                uint64_t v18 = (void *)*v18;
              }
            }
            if (v16 == v18) {
              sub_151FA44((uint64_t)v5, v12);
            }
            else {
              sub_151F9F0(v5, v12);
            }
          }
          if (v7 < v11) {
            break;
          }
          uint64_t v19 = (2 * v11) | 1;
          uint64_t v12 = v6 + (v19 << 6);
          uint64_t v11 = 2 * v11 + 2;
          if (v11 >= a3)
          {
            uint64_t v11 = v19;
          }
          else if (sub_10C9EC8(a2, v6 + (v19 << 6), v12 + 64))
          {
            v12 += 64;
          }
          else
          {
            uint64_t v11 = v19;
          }
          uint64_t v5 = v14;
        }
        while (!sub_10C9EC8(a2, v12, (uint64_t)v23));
        if (v14 != v23)
        {
          std::string::size_type v20 = v14->__r_.__value_.__l.__size_;
          if ((v20 & 2) != 0)
          {
            uint64_t v21 = 0;
          }
          else
          {
            uint64_t v21 = (void *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
            if (v20) {
              uint64_t v21 = (void *)*v21;
            }
          }
          if ((v23[0].__r_.__value_.__s.__data_[8] & 2) != 0)
          {
            uint64_t v22 = 0;
          }
          else
          {
            uint64_t v22 = (void *)(v23[0].__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFFCLL);
            if (v23[0].__r_.__value_.__s.__data_[8]) {
              uint64_t v22 = (void *)*v22;
            }
          }
          if (v21 == v22) {
            sub_151FA44((uint64_t)v14, (uint64_t)v23);
          }
          else {
            sub_151F9F0(v14, (uint64_t)v23);
          }
        }
        return sub_151F028(v23);
      }
    }
  }
  return result;
}

void sub_10C77E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10C77FC(uint64_t result, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v7 = result;
    sub_10C7540(v20, result);
    int v8 = (std::string *)sub_10C79E4(v7, a3, a4);
    unint64_t v9 = v8;
    if (v8 == (std::string *)(a2 - 64))
    {
      if (v8 != v20)
      {
        std::string::size_type size = v8->__r_.__value_.__l.__size_;
        if ((size & 2) != 0)
        {
          uint64_t v13 = 0;
        }
        else
        {
          uint64_t v13 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
          if (size) {
            uint64_t v13 = (void *)*v13;
          }
        }
        if ((v20[0].__r_.__value_.__s.__data_[8] & 2) != 0)
        {
          uint64_t v19 = 0;
        }
        else
        {
          uint64_t v19 = (void *)(v20[0].__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFFCLL);
          if (v20[0].__r_.__value_.__s.__data_[8]) {
            uint64_t v19 = (void *)*v19;
          }
        }
        if (v13 == v19) {
          sub_151FA44((uint64_t)v8, (uint64_t)v20);
        }
        else {
          sub_151F9F0(v8, (uint64_t)v20);
        }
      }
    }
    else
    {
      std::string::size_type v10 = v8->__r_.__value_.__l.__size_;
      if ((v10 & 2) != 0)
      {
        uint64_t v11 = 0;
      }
      else
      {
        uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
        if (v10) {
          uint64_t v11 = (void *)*v11;
        }
      }
      uint64_t v14 = *(void *)(a2 - 56);
      if ((v14 & 2) != 0)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
        if (v14) {
          uint64_t v15 = (void *)*v15;
        }
      }
      if (v11 == v15) {
        sub_151FA44((uint64_t)v8, a2 - 64);
      }
      else {
        sub_151F9F0(v8, a2 - 64);
      }
      if ((std::string *)(a2 - 64) != v20)
      {
        uint64_t v16 = *(void *)(a2 - 56);
        if ((v16 & 2) != 0)
        {
          uint64_t v17 = 0;
        }
        else
        {
          uint64_t v17 = (void *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
          if (v16) {
            uint64_t v17 = (void *)*v17;
          }
        }
        if ((v20[0].__r_.__value_.__s.__data_[8] & 2) != 0)
        {
          uint64_t v18 = 0;
        }
        else
        {
          uint64_t v18 = (void *)(v20[0].__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFFCLL);
          if (v20[0].__r_.__value_.__s.__data_[8]) {
            uint64_t v18 = (void *)*v18;
          }
        }
        if (v17 == v18) {
          sub_151FA44(a2 - 64, (uint64_t)v20);
        }
        else {
          sub_151F9F0((std::string *)(a2 - 64), (uint64_t)v20);
        }
      }
      sub_10C7AF8(v7, (uint64_t)&v9[2].__r_.__value_.__r.__words[2], a3, ((uint64_t)&v9[2].__r_.__value_.__r.__words[2] - v7) >> 6);
    }
    return sub_151F028(v20);
  }
  return result;
}

void sub_10C79D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10C79E4(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    unint64_t v9 = (std::string *)a1;
    a1 += (v6 << 6) + 64;
    uint64_t v10 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < a3 && sub_10C9EC8(a2, a1, a1 + 64))
    {
      a1 += 64;
      uint64_t v6 = v11;
    }
    if (v9 != (std::string *)a1)
    {
      std::string::size_type size = v9->__r_.__value_.__l.__size_;
      if ((size & 2) != 0)
      {
        uint64_t v13 = 0;
      }
      else
      {
        uint64_t v13 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
        if (size) {
          uint64_t v13 = (void *)*v13;
        }
      }
      uint64_t v14 = *(void *)(a1 + 8);
      if ((v14 & 2) != 0)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
        if (v14) {
          uint64_t v15 = (void *)*v15;
        }
      }
      if (v13 == v15) {
        sub_151FA44((uint64_t)v9, a1);
      }
      else {
        sub_151F9F0(v9, a1);
      }
    }
  }
  while (v6 <= v8);
  return a1;
}

uint64_t sub_10C7AF8(uint64_t result, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = result + (v4 >> 1 << 6);
    unint64_t v9 = (std::string *)(a2 - 64);
    double result = sub_10C9EC8(a3, v8, a2 - 64);
    if (result)
    {
      sub_10C7540(v18, (uint64_t)v9);
      do
      {
        uint64_t v10 = (std::string *)v8;
        if (v9 != (std::string *)v8)
        {
          std::string::size_type size = v9->__r_.__value_.__l.__size_;
          if ((size & 2) != 0)
          {
            uint64_t v12 = 0;
          }
          else
          {
            uint64_t v12 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
            if (size) {
              uint64_t v12 = (void *)*v12;
            }
          }
          uint64_t v13 = *(void *)(v8 + 8);
          if ((v13 & 2) != 0)
          {
            uint64_t v14 = 0;
          }
          else
          {
            uint64_t v14 = (void *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
            if (v13) {
              uint64_t v14 = (void *)*v14;
            }
          }
          if (v12 == v14) {
            sub_151FA44((uint64_t)v9, v8);
          }
          else {
            sub_151F9F0(v9, v8);
          }
        }
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = v6 + (v7 << 6);
        unint64_t v9 = v10;
      }
      while ((sub_10C9EC8(a3, v8, (uint64_t)v18) & 1) != 0);
      if (v10 != v18)
      {
        std::string::size_type v15 = v10->__r_.__value_.__l.__size_;
        if ((v15 & 2) != 0)
        {
          uint64_t v16 = 0;
        }
        else
        {
          uint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
          if (v15) {
            uint64_t v16 = (void *)*v16;
          }
        }
        if ((v18[0].__r_.__value_.__s.__data_[8] & 2) != 0)
        {
          uint64_t v17 = 0;
        }
        else
        {
          uint64_t v17 = (void *)(v18[0].__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFFCLL);
          if (v18[0].__r_.__value_.__s.__data_[8]) {
            uint64_t v17 = (void *)*v17;
          }
        }
        if (v16 == v17) {
          sub_151FA44((uint64_t)v10, (uint64_t)v18);
        }
        else {
          sub_151F9F0(v10, (uint64_t)v18);
        }
      }
      return sub_151F028(v18);
    }
  }
  return result;
}

void sub_10C7C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10C7C84(uint64_t result)
{
  return result;
}

void sub_10C7C98(std::error_category *a1)
{
  std::error_category::~error_category(a1);

  operator delete();
}

const char *sub_10C7CD0()
{
  return "FareProcessing";
}

void sub_10C7CDC(int a1@<W1>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 0:
      *(unsigned char *)(a2 + 23) = 2;
      strcpy((char *)a2, "OK");
      break;
    case 1:
      uint64_t v2 = "no base fare provided";
      goto LABEL_6;
    case 2:
      uint64_t v2 = "no surcharge provided";
LABEL_6:
      *(unsigned char *)(a2 + 23) = 21;
      *(_OWORD *)a2 = *(_OWORD *)v2;
      *(void *)(a2 + 13) = *(void *)(v2 + 13);
      *(unsigned char *)(a2 + 21) = 0;
      break;
    case 3:
      *(unsigned char *)(a2 + 23) = 20;
      strcpy((char *)a2, "currencies are mixed");
      break;
    default:
      *(unsigned char *)(a2 + 23) = 18;
      strcpy((char *)a2, "unrecognised error");
      break;
  }
}

BOOL *sub_10C7DBC(BOOL *a1, void *a2)
{
  char v7 = 21;
  strcpy(__p, "check_fare_enablement");
  BOOL v3 = sub_29D62C(a2, (uint64_t)__p);
  BOOL v4 = v3;
  if (v7 < 0)
  {
    operator delete(*(void **)__p);
    *a1 = v4;
  }
  else
  {
    *a1 = v3;
  }
  return a1;
}

void sub_10C7E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10C7E68@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X3>, uint64_t a5@<X8>)
{
  sub_1517674(a5, 0, 0);
  uint64_t v10 = sub_398020(*(void *)(a2 + 4072) + 24, 0);
  uint64_t v11 = &v10[-*(int *)v10];
  if (*(unsigned __int16 *)v11 < 5u || (uint64_t v12 = *((unsigned __int16 *)v11 + 2)) == 0)
  {
    HIBYTE(v32) = 0;
    LOBYTE(__dst) = 0;
    goto LABEL_12;
  }
  uint64_t v13 = &v10[v12];
  uint64_t v14 = *(unsigned int *)v13;
  uint64_t v16 = &v13[v14 + 4];
  size_t v15 = *(unsigned int *)&v13[v14];
  if (v15 >= 0x17)
  {
    uint64_t v18 = (v15 & 0xFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v18 = v15 | 7;
    }
    uint64_t v19 = v18 + 1;
    p_dst = (long long *)operator new(v18 + 1);
    *((void *)&__dst + 1) = v15;
    unint64_t v32 = v19 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v32) = *(_DWORD *)&v13[v14];
    p_dst = &__dst;
    if (!v15) {
      goto LABEL_11;
    }
  }
  memcpy(p_dst, v16, v15);
LABEL_11:
  *((unsigned char *)p_dst + v15) = 0;
LABEL_12:
  *(_DWORD *)(a5 + 16) |= 1u;
  uint64_t v20 = *(void *)(a5 + 8);
  uint64_t v21 = (uint64_t *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
  if (v20) {
    uint64_t v21 = (uint64_t *)*v21;
  }
  sub_1881E08((uint64_t *)(a5 + 48), &__dst, v21);
  if (SHIBYTE(v32) < 0) {
    operator delete((void *)__dst);
  }
  uint64_t result = sub_51D60((unsigned __int8 *)(a2 + 3896));
  int v23 = *(_DWORD *)(a5 + 16);
  *(unsigned char *)(a5 + 56) = result;
  if (*a4 == 2) {
    int v24 = 2;
  }
  else {
    int v24 = 1;
  }
  *(_DWORD *)(a5 + 16) = v23 | 6;
  *(_DWORD *)(a5 + 60) = v24;
  uint64_t v25 = *(void *)(a3 + 8);
  for (uint64_t i = *(void *)(a3 + 16); v25 != i; v25 += 296)
  {
    int v27 = *(_DWORD **)(a5 + 40);
    if (v27 && (uint64_t v28 = *(int *)(a5 + 32), (int)v28 < *v27))
    {
      *(_DWORD *)(a5 + 32) = v28 + 1;
      uint64_t v29 = *(void *)&v27[2 * v28 + 2];
    }
    else
    {
      uint64_t v30 = sub_152001C(*(void *)(a5 + 24));
      uint64_t v29 = sub_188CDC8(a5 + 24, (uint64_t)v30);
    }
    uint64_t result = sub_10C8090(a1, v29, a2, v25, a4);
  }
  return result;
}

void sub_10C8050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_1517768(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_10C8090(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  *(_DWORD *)(a2 + 16) |= 1u;
  uint64_t result = *(void *)(a2 + 48);
  if (result)
  {
    int v11 = a5[2];
    if (!a5[2]) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a2 + 8);
    uint64_t v13 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
    if (v12)
    {
      uint64_t result = sub_15205FC(*v13);
      *(void *)(a2 + 48) = result;
      int v11 = a5[2];
      if (!a5[2]) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t result = sub_15205FC((uint64_t)v13);
      *(void *)(a2 + 48) = result;
      int v11 = a5[2];
      if (!a5[2])
      {
LABEL_7:
        *(_DWORD *)(result + 16) |= 1u;
        *(_DWORD *)(result + 24) = v11;
        goto LABEL_8;
      }
    }
  }
  if (v11 == 1) {
    goto LABEL_7;
  }
LABEL_8:
  uint64_t v14 = *(void *)(a4 + 200);
  uint64_t v15 = *(void *)(a4 + 208);
  while (v14 != v15)
  {
    if (!*(unsigned char *)(v14 + 24))
    {
      if (*(void *)v14 == *(void *)(v14 + 8))
      {
        exception = __cxa_allocate_exception(0x40uLL);
        sub_5E5C(&v18, "SPA journey has an empty public transport bundle");
        uint64_t v17 = (void *)sub_2F404((uint64_t)exception, &v18);
      }
      uint64_t result = sub_10C8EE8(a1, a2, a3, a4, *(int **)v14, a5);
      if (!result)
      {
        uint64_t result = sub_1518484(a2);
        break;
      }
    }
    v14 += 72;
  }
  if (!*(_DWORD *)(a2 + 32))
  {
    return sub_1518484(a2);
  }
  return result;
}

void sub_10C8218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10C8248@<X0>(unsigned char *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, unsigned char *a4@<X3>, uint64_t a5@<X8>)
{
  sub_1517674(a5, 0, 0);
  uint64_t v10 = sub_3757C8(a2);
  int v11 = sub_398020(v10, 0);
  uint64_t v12 = &v11[-*(int *)v11];
  if (*(unsigned __int16 *)v12 < 5u || (uint64_t v13 = *((unsigned __int16 *)v12 + 2)) == 0)
  {
    HIBYTE(v33) = 0;
    LOBYTE(__dst) = 0;
    goto LABEL_12;
  }
  uint64_t v14 = &v11[v13];
  uint64_t v15 = *(unsigned int *)v14;
  uint64_t v17 = &v14[v15 + 4];
  size_t v16 = *(unsigned int *)&v14[v15];
  if (v16 >= 0x17)
  {
    uint64_t v19 = (v16 & 0xFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v19 = v16 | 7;
    }
    uint64_t v20 = v19 + 1;
    p_dst = (long long *)operator new(v19 + 1);
    *((void *)&__dst + 1) = v16;
    unint64_t v33 = v20 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v33) = *(_DWORD *)&v14[v15];
    p_dst = &__dst;
    if (!v16) {
      goto LABEL_11;
    }
  }
  memcpy(p_dst, v17, v16);
LABEL_11:
  *((unsigned char *)p_dst + v16) = 0;
LABEL_12:
  *(_DWORD *)(a5 + 16) |= 1u;
  uint64_t v21 = *(void *)(a5 + 8);
  uint64_t v22 = (uint64_t *)(v21 & 0xFFFFFFFFFFFFFFFCLL);
  if (v21) {
    uint64_t v22 = (uint64_t *)*v22;
  }
  sub_1881E08((uint64_t *)(a5 + 48), &__dst, v22);
  if (SHIBYTE(v33) < 0) {
    operator delete((void *)__dst);
  }
  uint64_t result = sub_375C30((uint64_t)a2);
  int v24 = *(_DWORD *)(a5 + 16);
  *(unsigned char *)(a5 + 56) = result;
  if (*a4 == 2) {
    int v25 = 2;
  }
  else {
    int v25 = 1;
  }
  *(_DWORD *)(a5 + 16) = v24 | 6;
  *(_DWORD *)(a5 + 60) = v25;
  uint64_t v26 = *a3;
  uint64_t v27 = a3[1];
  if (*a3 != v27)
  {
    do
    {
      uint64_t v28 = *(_DWORD **)(a5 + 40);
      if (v28 && (uint64_t v29 = *(int *)(a5 + 32), (int)v29 < *v28))
      {
        *(_DWORD *)(a5 + 32) = v29 + 1;
        uint64_t v30 = *(void *)&v28[2 * v29 + 2];
      }
      else
      {
        unint64_t v31 = sub_152001C(*(void *)(a5 + 24));
        uint64_t v30 = sub_188CDC8(a5 + 24, (uint64_t)v31);
      }
      uint64_t result = sub_10C8470(a1, v30, a2, v26, a4);
      v26 += 176;
    }
    while (v26 != v27);
  }
  return result;
}

void sub_10C8430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_1517768(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_10C8470(unsigned char *a1, uint64_t a2, void *a3, uint64_t a4, unsigned char *a5)
{
  uint64_t v57 = sub_3755E4(a3);
  uint64_t v56 = sub_3757C8(a3);
  *(_DWORD *)(a2 + 16) |= 1u;
  uint64_t result = *(void *)(a2 + 48);
  if (result)
  {
    int v10 = a5[2];
    if (!a5[2]) {
      goto LABEL_7;
    }
LABEL_6:
    if (v10 != 1) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v11 = *(void *)(a2 + 8);
  uint64_t v12 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
  if (v11)
  {
    uint64_t result = sub_15205FC(*v12);
    *(void *)(a2 + 48) = result;
    int v10 = a5[2];
    if (!a5[2]) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t result = sub_15205FC((uint64_t)v12);
  *(void *)(a2 + 48) = result;
  int v10 = a5[2];
  if (a5[2]) {
    goto LABEL_6;
  }
LABEL_7:
  *(_DWORD *)(result + 16) |= 1u;
  *(_DWORD *)(result + 24) = v10;
LABEL_8:
  char v55 = a5;
  uint64_t v13 = *(uint64_t **)(a4 + 24);
  char v54 = *(uint64_t **)(a4 + 32);
  if (v13 != v54)
  {
    uint64_t v14 = (uint64_t *)(a2 + 24);
    while (1)
    {
      uint64_t v16 = *v13;
      uint64_t v15 = v13[1];
      if (*v13 != v15)
      {
        while (*(_DWORD *)v16)
        {
          v16 += 144;
          if (v16 == v15) {
            goto LABEL_73;
          }
        }
      }
      if (v16 == v15)
      {
LABEL_73:
        exception = __cxa_allocate_exception(0x40uLL);
        sub_5E5C(&v59, "Journey has a segment bundle without a main segment");
        uint64_t v53 = (void *)sub_2F404((uint64_t)exception, &v59);
      }
      long long v18 = *(unsigned int **)(v16 + 8);
      uint64_t v17 = *(unsigned int **)(v16 + 16);
      int64_t v19 = (char *)v17 - (char *)v18;
      if (v17 == v18) {
        goto LABEL_10;
      }
      if (!v18[272]) {
        break;
      }
      if (v19 != 1096) {
        goto LABEL_35;
      }
LABEL_10:
      v13 += 8;
      if (v13 == v54) {
        goto LABEL_67;
      }
    }
    uint64_t v20 = sub_369F8C(v57, v18[2] | ((unint64_t)v18[1] << 32), 0, "trip");
    int v21 = 0;
    unint64_t v22 = *(void *)(v20 + *(unsigned __int16 *)(v20 - *(int *)v20 + 46));
    if (v22 > 0xFFFFFFFEFFFFFFFFLL
      || *(void *)(v20 + *(unsigned __int16 *)(v20 - *(int *)v20 + 46)) == 0)
    {
LABEL_28:
      if (*a1) {
        goto LABEL_29;
      }
      goto LABEL_30;
    }
    uint64_t v20 = sub_10C9714(v56, v22, 0, "fare_provider");
    int v24 = (unsigned __int16 *)(v20 - *(int *)v20);
    if (*v24 >= 9u && (uint64_t v25 = v24[4]) != 0)
    {
      if ((*(unsigned char *)(v20 + v25) - 1) >= *v55)
      {
LABEL_27:
        int v21 = 0;
        goto LABEL_28;
      }
    }
    else if (!*v55)
    {
      goto LABEL_27;
    }
    unint64_t v48 = (int *)sub_10C9714(v56, v22, 0, "fare_provider");
    BOOL v49 = 0;
    unint64_t v50 = (unsigned __int16 *)((char *)v48 - *v48);
    if (*v50 >= 7u)
    {
      uint64_t v51 = v50[3];
      if (v51) {
        BOOL v49 = *((unsigned __int8 *)v48 + v51) != 0;
      }
      else {
        BOOL v49 = 0;
      }
    }
    uint64_t v20 = sub_375C30((uint64_t)a3);
    int v21 = v20 | !v49;
    if (*a1)
    {
LABEL_29:
      if (!v21) {
        goto LABEL_68;
      }
    }
LABEL_30:
    uint64_t v26 = *(_DWORD **)(a2 + 40);
    if (v26 && (uint64_t v27 = *(int *)(a2 + 32), (int)v27 < *v26))
    {
      *(_DWORD *)(a2 + 32) = v27 + 1;
      uint64_t v28 = *(void *)&v26[2 * v27 + 2];
    }
    else
    {
      sub_1520134(*v14);
      uint64_t v20 = sub_188CDC8(a2 + 24, v29);
      uint64_t v28 = v20;
    }
    uint64_t result = (uint64_t)sub_10C8A00(v20, v28, a3, a4, (uint64_t)v18, 0);
    if (v19 == 1096) {
      goto LABEL_10;
    }
LABEL_35:
    uint64_t v30 = v19 / 1096 - 1;
    uint64_t v31 = 2184;
    while (1)
    {
      uint64_t v35 = (_DWORD *)(*(void *)(v16 + 8) + v31);
      if (!*v35) {
        break;
      }
LABEL_38:
      v31 += 1096;
      if (!--v30) {
        goto LABEL_10;
      }
    }
    uint64_t v33 = sub_369F8C(v57, *(v35 - 270) | ((unint64_t)*(v35 - 271) << 32), 0, "trip");
    int v36 = 0;
    unint64_t v37 = *(void *)(v33 + *(unsigned __int16 *)(v33 - *(int *)v33 + 46));
    if (v37 > 0xFFFFFFFEFFFFFFFFLL
      || *(void *)(v33 + *(unsigned __int16 *)(v33 - *(int *)v33 + 46)) == 0)
    {
LABEL_48:
      if (*a1) {
        goto LABEL_49;
      }
      goto LABEL_50;
    }
    uint64_t v33 = sub_10C9714(v56, v37, 0, "fare_provider");
    std::string::size_type v39 = (unsigned __int16 *)(v33 - *(int *)v33);
    if (*v39 >= 9u && (uint64_t v40 = v39[4]) != 0)
    {
      if ((*(unsigned char *)(v33 + v40) - 1) >= *v55)
      {
LABEL_47:
        int v36 = 0;
        goto LABEL_48;
      }
    }
    else if (!*v55)
    {
      goto LABEL_47;
    }
    uint64_t v44 = (int *)sub_10C9714(v56, v37, 0, "fare_provider");
    BOOL v45 = 0;
    v46 = (unsigned __int16 *)((char *)v44 - *v44);
    if (*v46 >= 7u)
    {
      uint64_t v47 = v46[3];
      if (v47) {
        BOOL v45 = *((unsigned __int8 *)v44 + v47) != 0;
      }
      else {
        BOOL v45 = 0;
      }
    }
    uint64_t v33 = sub_375C30((uint64_t)a3);
    int v36 = v33 | !v45;
    if (*a1)
    {
LABEL_49:
      if (!v36) {
        goto LABEL_68;
      }
    }
LABEL_50:
    int v41 = *(_DWORD *)(*(void *)(v16 + 8) + v31 - 1096);
    uint64_t v42 = *(_DWORD **)(a2 + 40);
    if (v42 && (uint64_t v43 = *(int *)(a2 + 32), (int)v43 < *v42))
    {
      *(_DWORD *)(a2 + 32) = v43 + 1;
      uint64_t v34 = *(void *)&v42[2 * v43 + 2];
    }
    else
    {
      sub_1520134(*v14);
      uint64_t v33 = sub_188CDC8(a2 + 24, v32);
      uint64_t v34 = v33;
    }
    uint64_t result = (uint64_t)sub_10C8A00(v33, v34, a3, a4, (uint64_t)(v35 - 272), v41 == 0);
    goto LABEL_38;
  }
LABEL_67:
  if (!*(_DWORD *)(a2 + 32))
  {
LABEL_68:
    return sub_1518484(a2);
  }
  return result;
}

void sub_10C89D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10C8A00(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v11 = sub_3755E4(a3);
  uint64_t v12 = sub_375500(a3);
  uint64_t v13 = *(unsigned int *)(a5 + 4);
  unint64_t v14 = *(unsigned int *)(a5 + 8) | (unint64_t)(v13 << 32);
  uint64_t v15 = (int *)sub_369F8C(v11, v14, 0, "trip");
  uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 >= 5u && (uint64_t v17 = v16[2]) != 0) {
    uint64_t v18 = *(void *)((char *)v15 + v17);
  }
  else {
    uint64_t v18 = 0;
  }
  int64_t v19 = sub_398020(v11, 0);
  uint64_t v20 = &v19[-*(int *)v19];
  if (*(unsigned __int16 *)v20 >= 0xBu)
  {
    uint64_t v21 = *((unsigned __int16 *)v20 + 5);
    if (v21)
    {
      if (v19[v21]) {
        uint64_t v18 = nullsub_1(v18);
      }
    }
  }
  *(_DWORD *)(a2 + 16) |= 2u;
  *(void *)(a2 + 32) = v18;
  int v22 = *(_DWORD *)(a5 + 16);
  int v23 = sub_369B60(v11, v14, 0);
  int v24 = &v23[-*(int *)v23];
  if (*(unsigned __int16 *)v24 < 5u)
  {
    uint64_t v25 = 0;
  }
  else
  {
    uint64_t v25 = *((unsigned __int16 *)v24 + 2);
    if (*((_WORD *)v24 + 2)) {
      v25 += (uint64_t)&v23[*(unsigned int *)&v23[v25]];
    }
  }
  uint64_t v26 = 4 * v13;
  uint64_t v27 = (int *)(v25 + v26 + 4 + *(unsigned int *)(v25 + v26 + 4));
  uint64_t v28 = (unsigned __int16 *)((char *)v27 - *v27);
  if (*v28 >= 0xDu && (uint64_t v29 = v28[6]) != 0) {
    int v30 = *(int *)((char *)v27 + v29);
  }
  else {
    int v30 = -1;
  }
  uint64_t v31 = (int *)sub_498D5C(v12, *(void *)&v23[24 * (v30 + v22)+ 4+ *((unsigned __int16 *)v24 + 3)+ *(unsigned int *)&v23[*((unsigned __int16 *)v24 + 3)]], 0, "stop");
  uint64_t v32 = (unsigned __int16 *)((char *)v31 - *v31);
  if (*v32 >= 5u && (uint64_t v33 = v32[2]) != 0) {
    uint64_t v34 = *(void *)((char *)v31 + v33);
  }
  else {
    uint64_t v34 = 0;
  }
  uint64_t v35 = sub_398020(v12, 0);
  int v36 = &v35[-*(int *)v35];
  if (*(unsigned __int16 *)v36 >= 0xBu)
  {
    uint64_t v37 = *((unsigned __int16 *)v36 + 5);
    if (v37)
    {
      if (v35[v37]) {
        uint64_t v34 = nullsub_1(v34);
      }
    }
  }
  *(_DWORD *)(a2 + 16) |= 4u;
  *(void *)(a2 + 40) = v34;
  int v38 = *(_DWORD *)(a5 + 20);
  std::string::size_type v39 = sub_369B60(v11, v14, 0);
  uint64_t v40 = &v39[-*(int *)v39];
  if (*(unsigned __int16 *)v40 < 5u)
  {
    uint64_t v41 = 0;
  }
  else
  {
    uint64_t v41 = *((unsigned __int16 *)v40 + 2);
    if (*((_WORD *)v40 + 2)) {
      v41 += (uint64_t)&v39[*(unsigned int *)&v39[v41]];
    }
  }
  uint64_t v42 = (int *)(v41 + v26 + 4 + *(unsigned int *)(v41 + v26 + 4));
  uint64_t v43 = (unsigned __int16 *)((char *)v42 - *v42);
  if (*v43 >= 0xDu && (uint64_t v44 = v43[6]) != 0) {
    int v45 = *(int *)((char *)v42 + v44);
  }
  else {
    int v45 = -1;
  }
  v46 = (int *)sub_498D5C(v12, *(void *)&v39[24 * (v45 + v38)+ 4+ *((unsigned __int16 *)v40 + 3)+ *(unsigned int *)&v39[*((unsigned __int16 *)v40 + 3)]], 0, "stop");
  uint64_t v47 = (unsigned __int16 *)((char *)v46 - *v46);
  if (*v47 >= 5u && (uint64_t v48 = v47[2]) != 0) {
    uint64_t v49 = *(void *)((char *)v46 + v48);
  }
  else {
    uint64_t v49 = 0;
  }
  unint64_t v50 = sub_398020(v12, 0);
  uint64_t v51 = &v50[-*(int *)v50];
  if (*(unsigned __int16 *)v51 >= 0xBu)
  {
    uint64_t v52 = *((unsigned __int16 *)v51 + 5);
    if (v52)
    {
      if (v50[v52]) {
        uint64_t v49 = nullsub_1(v49);
      }
    }
  }
  int v53 = *(_DWORD *)(a2 + 16);
  *(void *)(a2 + 48) = v49;
  *(_DWORD *)(a2 + 16) = v53 | 9;
  char v54 = *(_DWORD **)(a2 + 24);
  if (!v54)
  {
    uint64_t v55 = *(void *)(a2 + 8);
    uint64_t v56 = (void *)(v55 & 0xFFFFFFFFFFFFFFFCLL);
    if (v55) {
      uint64_t v56 = (void *)*v56;
    }
    char v54 = (_DWORD *)sub_15200B8((uint64_t)v56);
    *(void *)(a2 + 24) = v54;
  }
  uint64_t v57 = *(unsigned int *)(a5 + 4);
  int v58 = *(_DWORD *)(a5 + 12);
  uint64_t result = sub_369B60(v11, *(unsigned int *)(a5 + 8) | (unint64_t)(v57 << 32), 0);
  uint64_t v60 = &result[-*(int *)result];
  unsigned int v61 = *(unsigned __int16 *)v60;
  if (v61 <= 4)
  {
    uint64_t v64 = 0;
    v63 = (int *)(4 * v57 + 4 + dword_4[v57]);
    goto LABEL_53;
  }
  uint64_t v62 = *((unsigned __int16 *)v60 + 2);
  if (*((_WORD *)v60 + 2)) {
    v62 += (uint64_t)&result[*(unsigned int *)&result[v62]];
  }
  v63 = (int *)(v62 + 4 * v57 + 4 + *(unsigned int *)(v62 + 4 * v57 + 4));
  if (v61 < 0xD)
  {
    uint64_t v64 = 0;
    unsigned int v65 = (unsigned __int16 *)((char *)v63 - *v63);
    if (*v65 < 0x15u) {
      goto LABEL_58;
    }
    goto LABEL_56;
  }
  uint64_t v64 = *((unsigned __int16 *)v60 + 6);
  if (!v64)
  {
LABEL_53:
    unsigned int v65 = (unsigned __int16 *)((char *)v63 - *v63);
    if (*v65 < 0x15u) {
      goto LABEL_58;
    }
    goto LABEL_56;
  }
  v64 += (uint64_t)&result[*(unsigned int *)&result[v64]];
  unsigned int v65 = (unsigned __int16 *)((char *)v63 - *v63);
  if (*v65 < 0x15u) {
    goto LABEL_58;
  }
LABEL_56:
  uint64_t v66 = v65[10];
  if (v66)
  {
    int v67 = *(int *)((char *)v63 + v66);
    goto LABEL_59;
  }
LABEL_58:
  int v67 = -1;
LABEL_59:
  uint64_t v68 = v64 + 8 * (v67 + v58);
  int v69 = *(unsigned __int16 *)(v68 + 4);
  int v70 = *(unsigned __int8 *)(v68 + 6);
  LODWORD(v68) = *(unsigned __int8 *)(v68 + 7);
  int v71 = v54[4];
  v54[6] = v69;
  v54[7] = v70;
  v54[4] = v71 | 7;
  v54[8] = v68;
  uint64_t v72 = *(int *)(a5 + 24);
  int v73 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v73 | 0x10;
  uint64_t v74 = *(int *)(a5 + 36);
  int v75 = v73 | 0x30;
  *(_DWORD *)(a2 + 16) = v73 | 0x30;
  *(void *)(a2 + 56) = v72;
  *(void *)(a2 + 64) = v74;
  if (*(_DWORD *)(a4 + 128) == 2)
  {
    uint64_t v76 = *(int *)(a5 + 28);
    if (v76 != 0x7FFFFFFF && *(unsigned char *)(a5 + 32) == 1)
    {
      int v75 = v73 | 0x70;
      *(_DWORD *)(a2 + 16) = v73 | 0x70;
      *(void *)(a2 + 72) = v76;
    }
    uint64_t v77 = *(int *)(a5 + 40);
    if (v77 != 0x7FFFFFFF && *(unsigned char *)(a5 + 44) == 1)
    {
      v75 |= 0x80u;
      *(void *)(a2 + 80) = v77;
    }
  }
  *(_DWORD *)(a2 + 16) = v75 | 0x100;
  *(unsigned char *)(a2 + 88) = a6;
  return result;
}

unint64_t sub_10C8EE8(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, unsigned char *a6)
{
  sub_A26A18(a3, (uint64_t)a5, &v109);
  uint64_t v8 = v110;
  if (v110 != v109)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v104 = (v110 - v109) / 20;
    uint64_t v105 = a2;
    uint64_t v11 = (void *)(a3 + 4184);
    long long v108 = (uint64_t *)(a2 + 24);
    while (1)
    {
      uint64_t v16 = v109;
      uint64_t v17 = (unsigned int *)&v109[v9];
      uint64_t v18 = (int *)sub_369F8C(*v11 + 24, __ROR8__(*(void *)&v109[v9], 32), 0, "trip");
      int64_t v19 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v19 >= 0x2Fu)
      {
        unsigned __int16 v20 = v19[23];
        if (v20)
        {
          uint64_t v22 = *(unsigned int *)((char *)v18 + v20);
          uint64_t v21 = *(unsigned int *)((char *)v18 + v20 + 4);
          if (v21 != -1 && v22 != 0)
          {
            unint64_t v24 = __ROR8__(v21 | (v22 << 32), 32);
            uint64_t v25 = (int *)sub_10C9714(*(void *)(a3 + 4032) + 24, v24, 0, "fare_provider");
            uint64_t v26 = (unsigned __int16 *)((char *)v25 - *v25);
            if (*v26 >= 9u && (uint64_t v27 = v26[4]) != 0)
            {
              if ((*((unsigned char *)v25 + v27) - 1) < *a6) {
                goto LABEL_91;
              }
            }
            else if (*a6)
            {
LABEL_91:
              v96 = (int *)sub_10C9714(*(void *)(a3 + 4032) + 24, v24, 0, "fare_provider");
              v97 = (unsigned __int16 *)((char *)v96 - *v96);
              v99 = *v97 >= 7u && (uint64_t v98 = v97[3]) != 0 && *((unsigned char *)v96 + v98) != 0;
              char v28 = sub_51D60((unsigned __int8 *)(a3 + 3896)) | !v99;
              uint64_t v29 = v105;
              if (!*a1) {
                goto LABEL_16;
              }
              goto LABEL_15;
            }
          }
        }
      }
      char v28 = 0;
      uint64_t v29 = v105;
      if (!*a1) {
        goto LABEL_16;
      }
LABEL_15:
      if ((v28 & 1) == 0)
      {
        unint64_t v100 = 0;
        uint64_t v8 = v109;
        if (v109) {
          goto LABEL_98;
        }
        return v100;
      }
LABEL_16:
      int v30 = *(_DWORD **)(v29 + 40);
      if (v30 && (uint64_t v31 = *(int *)(v29 + 32), (int)v31 < *v30))
      {
        *(_DWORD *)(v29 + 32) = v31 + 1;
        uint64_t v32 = *(void *)&v30[2 * v31 + 2];
      }
      else
      {
        sub_1520134(*v108);
        uint64_t v32 = sub_188CDC8((uint64_t)v108, v33);
      }
      uint64_t v34 = (int *)sub_369F8C(*v11 + 24, __ROR8__(*(void *)v17, 32), 0, "trip");
      uint64_t v35 = (unsigned __int16 *)((char *)v34 - *v34);
      if (*v35 >= 5u && (uint64_t v36 = v35[2]) != 0) {
        uint64_t v37 = *(void *)((char *)v34 + v36);
      }
      else {
        uint64_t v37 = 0;
      }
      int v38 = sub_398020(*v11 + 24, 0);
      std::string::size_type v39 = &v38[-*(int *)v38];
      if (*(unsigned __int16 *)v39 >= 0xBu)
      {
        uint64_t v40 = *((unsigned __int16 *)v39 + 5);
        if (v40)
        {
          if (v38[v40]) {
            uint64_t v37 = nullsub_1(v37);
          }
        }
      }
      *(_DWORD *)(v32 + 16) |= 2u;
      *(void *)(v32 + 32) = v37;
      uint64_t v41 = &v16[v9];
      uint64_t v42 = *(void *)&v16[v9];
      int v43 = *(_DWORD *)&v16[v9 + 12];
      uint64_t v44 = sub_369B60(*v11 + 24, __ROR8__(v42, 32), 0);
      int v45 = &v44[-*(int *)v44];
      unsigned int v46 = *(unsigned __int16 *)v45;
      if (v46 <= 4)
      {
        unint64_t v50 = 0;
        uint64_t v48 = (int *)(4 * v42 + 4 + dword_4[v42]);
        uint64_t v51 = (unsigned __int16 *)((char *)v48 - *v48);
        if (*v51 < 0xDu) {
          goto LABEL_40;
        }
      }
      else
      {
        uint64_t v47 = *((unsigned __int16 *)v45 + 2);
        if (*((_WORD *)v45 + 2)) {
          v47 += (uint64_t)&v44[*(unsigned int *)&v44[v47]];
        }
        uint64_t v48 = (int *)(v47 + 4 * v42 + 4 + *(unsigned int *)(v47 + 4 * v42 + 4));
        if (v46 >= 7 && (uint64_t v49 = *((unsigned __int16 *)v45 + 3)) != 0)
        {
          unint64_t v50 = (unsigned int *)&v44[v49 + *(unsigned int *)&v44[v49]];
          uint64_t v51 = (unsigned __int16 *)((char *)v48 - *v48);
          if (*v51 < 0xDu) {
            goto LABEL_40;
          }
        }
        else
        {
          unint64_t v50 = 0;
          uint64_t v51 = (unsigned __int16 *)((char *)v48 - *v48);
          if (*v51 < 0xDu) {
            goto LABEL_40;
          }
        }
      }
      uint64_t v52 = v51[6];
      if (v52)
      {
        int v53 = *(int *)((char *)v48 + v52);
        goto LABEL_41;
      }
LABEL_40:
      int v53 = -1;
LABEL_41:
      unint64_t v54 = __ROR8__(*(void *)sub_36A650(v50, v53 + v43), 32);
      if (HIDWORD(v54) != 1 || (v54 + 3) >= 2)
      {
        uint64_t v56 = (int *)sub_498D5C(*(void *)(a3 + 4120) + 24, __ROR8__(v54, 32), 0, "stop");
        uint64_t v57 = (unsigned __int16 *)((char *)v56 - *v56);
        if (*v57 >= 5u && (uint64_t v58 = v57[2]) != 0) {
          uint64_t v59 = *(void *)((char *)v56 + v58);
        }
        else {
          uint64_t v59 = 0;
        }
        uint64_t v60 = sub_398020(*(void *)(a3 + 4120) + 24, 0);
        unsigned int v61 = &v60[-*(int *)v60];
        if (*(unsigned __int16 *)v61 >= 0xBu)
        {
          uint64_t v62 = *((unsigned __int16 *)v61 + 5);
          if (v62)
          {
            if (v60[v62]) {
              uint64_t v59 = nullsub_1(v59);
            }
          }
        }
      }
      else
      {
        uint64_t v59 = -1;
      }
      *(_DWORD *)(v32 + 16) |= 4u;
      *(void *)(v32 + 40) = v59;
      v63 = &v16[v9];
      uint64_t v64 = *(void *)&v16[v9];
      int v65 = *((_DWORD *)v63 + 4);
      uint64_t v66 = sub_369B60(*v11 + 24, __ROR8__(v64, 32), 0);
      int v67 = &v66[-*(int *)v66];
      unsigned int v68 = *(unsigned __int16 *)v67;
      if (v68 <= 4)
      {
        uint64_t v72 = 0;
        int v70 = (int *)(4 * v64 + 4 + dword_4[v64]);
        int v73 = (unsigned __int16 *)((char *)v70 - *v70);
        if (*v73 < 0xDu) {
          goto LABEL_66;
        }
      }
      else
      {
        uint64_t v69 = *((unsigned __int16 *)v67 + 2);
        if (*((_WORD *)v67 + 2)) {
          v69 += (uint64_t)&v66[*(unsigned int *)&v66[v69]];
        }
        int v70 = (int *)(v69 + 4 * v64 + 4 + *(unsigned int *)(v69 + 4 * v64 + 4));
        if (v68 >= 7 && (uint64_t v71 = *((unsigned __int16 *)v67 + 3)) != 0)
        {
          uint64_t v72 = (unsigned int *)&v66[v71 + *(unsigned int *)&v66[v71]];
          int v73 = (unsigned __int16 *)((char *)v70 - *v70);
          if (*v73 < 0xDu) {
            goto LABEL_66;
          }
        }
        else
        {
          uint64_t v72 = 0;
          int v73 = (unsigned __int16 *)((char *)v70 - *v70);
          if (*v73 < 0xDu) {
            goto LABEL_66;
          }
        }
      }
      uint64_t v74 = v73[6];
      if (v74)
      {
        int v75 = *(int *)((char *)v70 + v74);
        goto LABEL_67;
      }
LABEL_66:
      int v75 = -1;
LABEL_67:
      unint64_t v76 = __ROR8__(*(void *)sub_36A650(v72, v75 + v65), 32);
      if (HIDWORD(v76) == 1 && (v76 + 3) < 2)
      {
        uint64_t v77 = -1;
      }
      else
      {
        v78 = (int *)sub_498D5C(*(void *)(a3 + 4120) + 24, __ROR8__(v76, 32), 0, "stop");
        uint64_t v79 = (unsigned __int16 *)((char *)v78 - *v78);
        if (*v79 >= 5u && (uint64_t v80 = v79[2]) != 0) {
          uint64_t v77 = *(void *)((char *)v78 + v80);
        }
        else {
          uint64_t v77 = 0;
        }
        uint64_t v81 = sub_398020(*(void *)(a3 + 4120) + 24, 0);
        unint64_t v82 = &v81[-*(int *)v81];
        if (*(unsigned __int16 *)v82 >= 0xBu)
        {
          uint64_t v83 = *((unsigned __int16 *)v82 + 5);
          if (v83)
          {
            if (v81[v83]) {
              uint64_t v77 = nullsub_1(v77);
            }
          }
        }
      }
      int v84 = *(_DWORD *)(v32 + 16);
      *(void *)(v32 + 48) = v77;
      *(_DWORD *)(v32 + 16) = v84 | 9;
      uint64_t v85 = *(_DWORD **)(v32 + 24);
      if (!v85)
      {
        uint64_t v86 = *(void *)(v32 + 8);
        uint64_t v87 = (void *)(v86 & 0xFFFFFFFFFFFFFFFCLL);
        if (v86) {
          uint64_t v87 = (void *)*v87;
        }
        uint64_t v85 = (_DWORD *)sub_15200B8((uint64_t)v87);
        *(void *)(v32 + 24) = v85;
      }
      unsigned int v88 = sub_B6E7A0((void *)(a3 + 4184), v17);
      int v89 = v85[4];
      v85[6] = (unsigned __int16)v88;
      v85[7] = BYTE2(v88);
      v85[4] = v89 | 7;
      v85[8] = HIBYTE(v88);
      if (a5[11] == -1)
      {
        int64_t v90 = sub_A0FAA0((uint64_t *)(a3 + 4184), v17, *((_DWORD *)v41 + 3), 0x7FFFFFFF);
        char v92 = v91;
        int64_t v93 = sub_A0FDF4((uint64_t *)(a3 + 4184), v17, *((_DWORD *)v63 + 4), 0x7FFFFFFF);
        int v95 = *(_DWORD *)(v32 + 16);
        int v15 = v95 | 0x30;
        *(_DWORD *)(v32 + 16) = v95 | 0x30;
        *(void *)(v32 + 56) = (int)v90;
        *(void *)(v32 + 64) = (int)v93;
        if (*(_DWORD *)(a4 + 4) == 2)
        {
          if (HIDWORD(v90) != 0x7FFFFFFF && v92 == 1)
          {
            int v15 = v95 | 0x70;
            *(_DWORD *)(v32 + 16) = v95 | 0x70;
            *(void *)(v32 + 72) = v90 >> 32;
          }
          if (HIDWORD(v93) != 0x7FFFFFFF && v94 == 1)
          {
            v15 |= 0x80u;
            *(_DWORD *)(v32 + 16) = v15;
            *(void *)(v32 + 80) = v93 >> 32;
          }
        }
      }
      else
      {
        uint64_t v12 = a5[2];
        int v13 = *(_DWORD *)(v32 + 16);
        *(_DWORD *)(v32 + 16) = v13 | 0x10;
        *(void *)(v32 + 56) = v12;
        uint64_t v14 = a5[5];
        int v15 = v13 | 0x30;
        *(_DWORD *)(v32 + 16) = v13 | 0x30;
        *(void *)(v32 + 64) = v14;
      }
      *(_DWORD *)(v32 + 16) = v15 | 0x100;
      *(unsigned char *)(v32 + 88) = v10++ != 0;
      v9 += 20;
      if (v104 == v10)
      {
        uint64_t v8 = v109;
        unint64_t v100 = 0xCCCCCCCCCCCCCCCDLL * ((v110 - v109) >> 2);
        if (v109) {
          goto LABEL_98;
        }
        return v100;
      }
    }
  }
  unint64_t v100 = 0;
  if (v110)
  {
LABEL_98:
    long long v110 = v8;
    operator delete(v8);
  }
  return v100;
}

void sub_10C96D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10C9714(uint64_t a1, unint64_t a2, int a3, char *a4)
{
  unsigned int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  LODWORD(v61.__r_.__value_.__l.__data_) = a2;
  LODWORD(v60.__r_.__value_.__l.__data_) = a3;
  *(void *)&long long v62 = &v60;
  *((void *)&v62 + 1) = &v61;
  unint64_t v9 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v9;
  uint64_t v10 = *(void *)a1;
  if (!v10) {
    goto LABEL_38;
  }
  uint64_t v11 = a1 + 16;
  if (*(_DWORD *)(a1 + 592) == a2)
  {
    unsigned int v12 = 24;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 616) == a2)
  {
    unsigned int v12 = 25;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 640) == a2)
  {
    unsigned int v12 = 26;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 664) == a2)
  {
    unsigned int v12 = 27;
LABEL_10:
    ++*(void *)(a1 + 3864);
    uint64_t v13 = v11 + 24 * v12;
    *(void *)(v13 + 8) = v9;
    uint64_t v14 = *(unsigned int **)(v13 + 16);
    if (v14) {
      goto LABEL_11;
    }
LABEL_38:
    sub_2A54B4((int **)&v62);
    uint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
    return 0;
  }
  unint64_t v20 = *(void *)(a1 + 648);
  unint64_t v21 = *(void *)(a1 + 624);
  if (*(void *)(a1 + 600) >= v9)
  {
    int v22 = 0;
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + 600);
    int v22 = 24;
  }
  BOOL v23 = v21 >= v9;
  if (v21 < v9) {
    unint64_t v9 = *(void *)(a1 + 624);
  }
  int v24 = 25;
  if (v23) {
    int v24 = v22;
  }
  if (v20 >= v9) {
    unint64_t v25 = v9;
  }
  else {
    unint64_t v25 = *(void *)(a1 + 648);
  }
  unint64_t v26 = *(void *)(a1 + 672);
  if (v20 >= v9) {
    int v27 = v24;
  }
  else {
    int v27 = 26;
  }
  uint64_t v14 = (unsigned int *)sub_2AB884(v10, 6, a2, 1);
  unsigned int v28 = 27;
  if (v26 >= v25) {
    unsigned int v28 = v27;
  }
  uint64_t v29 = v11 + 24 * v28;
  *(_DWORD *)uint64_t v29 = v61.__r_.__value_.__l.__data_;
  *(void *)(v29 + 8) = *(void *)(a1 + 3856);
  *(void *)(v29 + 16) = v14;
  if (!v14) {
    goto LABEL_38;
  }
LABEL_11:
  int v15 = (int *)((char *)v14 + *v14);
  uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 0x33u)
  {
    uint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v17 = v16[25];
    if (v17)
    {
      uint64_t v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
      if (*v18 > v8) {
        return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
      }
    }
    else
    {
      uint64_t v18 = 0;
    }
    if (a3 != 1)
    {
LABEL_19:
      if (!a3)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        uint64_t v31 = a4;
        uint64_t v32 = (uint64_t)exception;
        sub_5E5C(&v55, v31);
        uint64_t v33 = std::string::insert(&v55, 0, "Failed to acquire entity \"");
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        uint64_t v35 = std::string::append(&v56, "\" in quad node ");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v57.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v54, v6);
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v37 = &v54;
        }
        else {
          uint64_t v37 = (std::string *)v54.__r_.__value_.__r.__words[0];
        }
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v54.__r_.__value_.__l.__size_;
        }
        std::string::size_type v39 = std::string::append(&v57, (const std::string::value_type *)v37, size);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        uint64_t v41 = std::string::append(&v58, " at position ");
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v53, v8);
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v43 = &v53;
        }
        else {
          int v43 = (std::string *)v53.__r_.__value_.__r.__words[0];
        }
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v44 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v44 = v53.__r_.__value_.__l.__size_;
        }
        int v45 = std::string::append(&v59, (const std::string::value_type *)v43, v44);
        long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        uint64_t v47 = std::string::append(&v60, " on layer ");
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        uint64_t v49 = sub_736EC(6u);
        unint64_t v50 = std::string::append(&v61, v49);
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        std::string::size_type v63 = v50->__r_.__value_.__r.__words[2];
        long long v62 = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        uint64_t v52 = (void *)sub_2F404(v32, &v62);
      }
      return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
    }
  }
  return 0;
}

void sub_10C9AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 105) < 0) {
    operator delete(*(void **)(v54 - 128));
  }
  if (*(char *)(v54 - 137) < 0)
  {
    operator delete(*(void **)(v54 - 160));
    if ((*(char *)(v54 - 169) & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  else if ((*(char *)(v54 - 169) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v54 - 192));
  if ((a15 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a10);
  if ((a54 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a42);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a16);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_12;
  }
LABEL_20:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
LABEL_21:
  }
    _Unwind_Resume(a1);
LABEL_12:
  operator delete(__p);
  goto LABEL_21;
}

void sub_10C9C68()
{
  unk_25FE247 = 16641;
  word_25FE230 = 65;
  byte_25FE25F = 1;
  byte_25FE249 = 0;
}

BOOL sub_10C9C90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_188B428(a2, (uint64_t)&__s1);
  sub_188B428(a3, (uint64_t)__p);
  unsigned __int8 v4 = v23;
  if ((v23 & 0x80u) == 0) {
    size_t v5 = v23;
  }
  else {
    size_t v5 = __n;
  }
  unint64_t v6 = v20;
  int v7 = (char)v20;
  if ((v20 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  if (v5 != v6)
  {
    BOOL v17 = 0;
    if (((char)v20 & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_26;
  }
  if ((v20 & 0x80u) == 0) {
    unint64_t v8 = __p;
  }
  else {
    unint64_t v8 = (void **)__p[0];
  }
  if ((char)v23 < 0)
  {
    BOOL v17 = memcmp(__s1, v8, __n) == 0;
    goto LABEL_22;
  }
  if (v23)
  {
    uint64_t v9 = v23 - 1;
    p_s1 = &__s1;
    do
    {
      int v12 = *(unsigned __int8 *)p_s1;
      p_s1 = (void **)((char *)p_s1 + 1);
      int v11 = v12;
      int v14 = *(unsigned __int8 *)v8;
      unint64_t v8 = (void **)((char *)v8 + 1);
      int v13 = v14;
      BOOL v16 = v9-- != 0;
      BOOL v17 = v11 == v13;
    }
    while (v11 == v13 && v16);
LABEL_22:
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_23;
    }
LABEL_26:
    operator delete(__p[0]);
    if ((v23 & 0x80) == 0) {
      return v17;
    }
    goto LABEL_27;
  }
  BOOL v17 = 1;
  if ((char)v20 < 0) {
    goto LABEL_26;
  }
LABEL_23:
  if ((v4 & 0x80) == 0) {
    return v17;
  }
LABEL_27:
  operator delete(__s1);
  return v17;
}

void sub_10C9DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_10C9DC8(uint64_t a1, uint64_t a2)
{
  sub_188B428(a2, (uint64_t)__p);
  if ((v7 & 0x80u) == 0) {
    uint64_t v2 = (uint64_t *)__p;
  }
  else {
    uint64_t v2 = (uint64_t *)__p[0];
  }
  if ((v7 & 0x80u) == 0) {
    unint64_t v3 = v7;
  }
  else {
    unint64_t v3 = (unint64_t)__p[1];
  }
  unint64_t result = sub_B128((uint64_t)&v8, v2, v3);
  unint64_t v5 = result;
  if ((char)v7 < 0)
  {
    operator delete(__p[0]);
    return v5;
  }
  return result;
}

int *sub_10C9E4C(int *result, unsigned char *a2, int a3)
{
  int v3 = 8;
  switch(*a2)
  {
    case 0:
      if (a3 < 36000) {
        int v4 = 7;
      }
      else {
        int v4 = 8;
      }
      *unint64_t result = v4;
      break;
    case 1:
      goto LABEL_7;
    case 2:
      *unint64_t result = 7;
      break;
    case 3:
      *unint64_t result = 9;
      break;
    default:
      int v3 = 0;
LABEL_7:
      *unint64_t result = v3;
      break;
  }
  return result;
}

uint64_t sub_10C9EC8(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = 10;
  char v4 = 1;
  switch(*(_DWORD *)(a2 + 56))
  {
    case 1:
      unsigned int v3 = 8;
      unsigned int v5 = *(_DWORD *)(a3 + 56) - 1;
      if (v5 > 0xD) {
        goto LABEL_16;
      }
      goto LABEL_8;
    case 2:
      unsigned int v3 = 7;
      unsigned int v5 = *(_DWORD *)(a3 + 56) - 1;
      if (v5 > 0xD) {
        goto LABEL_16;
      }
      goto LABEL_8;
    case 3:
      unsigned int v3 = 9;
      goto LABEL_7;
    case 0xE:
LABEL_7:
      unsigned int v5 = *(_DWORD *)(a3 + 56) - 1;
      goto LABEL_8;
    default:
      char v4 = 0;
      unsigned int v3 = 0;
      unsigned int v5 = *(_DWORD *)(a3 + 56) - 1;
      if (v5 <= 0xD)
      {
LABEL_8:
        char v6 = 0;
        unsigned int v7 = 10;
        switch(v5)
        {
          case 0u:
            char v6 = 0;
            unsigned int v7 = 8;
            unsigned int v8 = *a1;
            uint64_t result = v3 == *a1;
            if (v3 != v8 && v8 != 8) {
              goto LABEL_27;
            }
            return result;
          case 1u:
            char v6 = 0;
            unsigned int v7 = 7;
            goto LABEL_23;
          case 2u:
            char v6 = 0;
            unsigned int v7 = 9;
            unsigned int v8 = *a1;
            uint64_t result = v3 == *a1;
            if (v3 != v8 && v8 != 9) {
              goto LABEL_27;
            }
            return result;
          case 0xDu:
LABEL_23:
            unsigned int v8 = *a1;
            uint64_t result = v3 == *a1;
            if (v3 != v8 && v7 != v8) {
              goto LABEL_27;
            }
            return result;
          default:
            break;
        }
      }
LABEL_16:
      unsigned int v7 = 0;
      char v6 = 1;
      unsigned int v8 = *a1;
      uint64_t result = v3 == *a1;
      if (v3 != v8 && v8 != 0)
      {
LABEL_27:
        if (v3 >= v8) {
          char v4 = 0;
        }
        if (v3 > v7 && (v4 & 1) != 0)
        {
          return 1;
        }
        else if ((v6 & 1) != 0 || v7 <= v3 || v7 >= v8)
        {
          int v14 = *(uint64_t (****)())(a2 + 48);
          int v15 = &off_253C7D8;
          if (!v14) {
            int v14 = &off_253C7D8;
          }
          unsigned int v16 = *((_DWORD *)v14 + 7);
          if (*(void *)(a3 + 48)) {
            int v15 = *(uint64_t (****)())(a3 + 48);
          }
          return v16 < *((_DWORD *)v15 + 7);
        }
        else
        {
          return 0;
        }
      }
      return result;
  }
}

int64x2_t *sub_10CA0DC(int64x2_t *a1, void *a2)
{
  uint64_t v11 = 0;
  int v12 = operator new(0x28uLL);
  long long v13 = xmmword_20B9260;
  strcpy((char *)v12, "DrivingToWalkingTransitionChecker");
  long long __p = 0;
  uint64_t v10 = 0;
  char v4 = sub_374CDC((uint64_t)a2, (uint64_t)&v12, (uint64_t *)&__p);
  sub_10CA218((uint64_t)a1, v4);
  unsigned int v5 = (void **)__p;
  if (__p)
  {
    char v6 = v10;
    unsigned int v7 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      unsigned int v7 = __p;
    }
    uint64_t v10 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12);
  }
  a1[9].i64[0] = (uint64_t)a2;
  a1[9].i64[1] = sub_3750CC(a2);
  a1[10] = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  a1[11].i64[0] = 0x7FFFFFFFFFFFFFFFLL;
  return a1;
}

void sub_10CA1DC(_Unwind_Exception *a1)
{
  sub_C801E0(v1);
  _Unwind_Resume(a1);
}

void sub_10CA1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10CA218(uint64_t a1, void *a2)
{
  __p[23] = 6;
  strcpy(__p, "enable");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)a1 = v4;
  *(void *)long long __p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_20B91A0;
  strcpy(*(char **)__p, "enable_route_distance_check");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)(a1 + 1) = v5;
  *(void *)long long __p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_20B5EB0;
  strcpy(*(char **)__p, "route_distance_threshold_m");
  *(void *)(a1 + 8) = sub_5CDE0(a2, __p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)long long __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20E12D0;
  strcpy(*(char **)__p, "excluded_from_ap_checks_poi_categories");
  sub_5C308(a2, (uint64_t)__p, a1 + 16);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)long long __p = operator new(0x30uLL);
  *(_OWORD *)&__p[8] = xmmword_20B93C0;
  strcpy(*(char **)__p, "enable_destination_to_end_distance_check");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)(a1 + 40) = v6;
  *(void *)long long __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20B9960;
  strcpy(*(char **)__p, "destination_to_end_distance_threshold_m");
  *(void *)(a1 + 48) = sub_5CDE0(a2, __p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)long long __p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_20B8870;
  strcpy(*(char **)__p, "enable_detour_index_check");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)(a1 + 56) = v7;
  __p[23] = 12;
  strcpy(__p, "detour_index");
  double v8 = sub_5C7E8(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(double *)(a1 + 64) = v8;
  *(void *)long long __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20B9240;
  strcpy(*(char **)__p, "detour_index_minimum_route_distance_m");
  *(void *)(a1 + 72) = sub_5CDE0(a2, __p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)long long __p = operator new(0x38uLL);
  *(_OWORD *)&__p[8] = xmmword_20B99F0;
  strcpy(*(char **)__p, "enable_destination_to_end_over_route_distance_check");
  BOOL v9 = sub_29D62C(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)(a1 + 80) = v9;
  *(void *)long long __p = operator new(0x30uLL);
  *(_OWORD *)&__p[8] = xmmword_20E1380;
  strcpy(*(char **)__p, "destination_to_end_over_route_distance_index");
  double v10 = sub_5C7E8(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(double *)(a1 + 88) = v10;
  *(void *)long long __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20B9280;
  strcpy(*(char **)__p, "enable_origin_not_on_freeway_check");
  BOOL v11 = sub_29D62C(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)(a1 + 96) = v11;
  *(void *)long long __p = operator new(0x30uLL);
  *(_OWORD *)&__p[8] = xmmword_20B93E0;
  strcpy(*(char **)__p, "origin_not_on_freeway_max_search_distance_m");
  *(void *)(a1 + 104) = sub_5CDE0(a2, __p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)long long __p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_20B8870;
  strcpy(*(char **)__p, "always_pass_country_codes");
  sub_5C308(a2, (uint64_t)__p, a1 + 112);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)long long __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20B93A0;
  strcpy(*(char **)__p, "always_pass_for_user_created_routes");
  BOOL v12 = sub_29D62C(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)(a1 + 136) = v12;
  *(void *)long long __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20B8FD0;
  strcpy(*(char **)__p, "always_pass_for_apple_curated_routes");
  BOOL v13 = sub_29D62C(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)(a1 + 137) = v13;
  __p[23] = 11;
  strcpy(__p, "always_fail");
  BOOL v14 = sub_29D62C(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)(a1 + 138) = v14;
  return a1;
}

void sub_10CA810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_1A668(v18);
  sub_1A668(v17);
  _Unwind_Resume(a1);
}

void sub_10CA8CC()
{
}

void sub_10CA8D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x10CA8C4);
}

uint64_t sub_10CA8FC(unsigned char *a1, void *a2, void *a3)
{
  if (!*a1 || *a3 == a3[1]) {
    return 1;
  }
  BOOL v5 = (_DWORD *)*a2;
  uint64_t v4 = a2[1];
  if ((unint64_t)(0x51B3BEA3677D46CFLL * ((v4 - *a2) >> 3)) < 2) {
    return 1;
  }
  if (*v5 == -1 && v5[1] == -1 || *(_DWORD *)(v4 - 376) == -1 && *(_DWORD *)(v4 - 372) == -1) {
    return 1;
  }
  if (a1[138]) {
    return 0;
  }
  double v8 = (uint64_t *)sub_10CAA04(a3, 0);
  uint64_t result = sub_10CAC34((uint64_t)a1, v8, (uint64_t)a2);
  if (result)
  {
    return sub_10CACF4((uint64_t)a1);
  }
  return result;
}

uint64_t sub_10CAA04(void *a1, unint64_t a2)
{
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    BOOL v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    double v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v10 = &v15;
    }
    else {
      double v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    BOOL v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    BOOL v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 120 * a2;
}

void sub_10CAB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_10CAC34(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (sub_10CC2C8(a1, (uint64_t)a2, a3)) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 1) && sub_45FD6C(a2) <= *(void *)(a1 + 8)) {
    return 0;
  }
  uint64_t result = sub_10CAF6C(a1, (uint64_t)a2, a3);
  if (result)
  {
    uint64_t result = sub_10CB5DC(a1, a2, a3);
    if (result)
    {
      return sub_10CBFD4(a1, (uint64_t)a2, a3);
    }
  }
  return result;
}

uint64_t sub_10CACF4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96)) {
    sub_10A42F0((uint64_t)v2, *(void **)(a1 + 144), 0, 0, 0);
  }
  return 1;
}

void sub_10CAF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_10CAF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_4364F4((void **)va);
  sub_10A4318((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_10CAF6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 40)) {
    return 1;
  }
  uint64_t v6 = *(void *)(a3 + 8);
  int v7 = *(char *)(v6 - 161);
  if ((*(unsigned char *)(v6 - 161) & 0x80) != 0)
  {
    if (!*(void *)(v6 - 176)) {
      goto LABEL_32;
    }
  }
  else if (!*(unsigned char *)(v6 - 161))
  {
    goto LABEL_32;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  if (v8 != v9)
  {
    double v10 = (const void **)(v6 - 184);
    size_t v11 = *(void *)(v6 - 176);
    if (v7 >= 0) {
      size_t v12 = v7;
    }
    else {
      size_t v12 = v11;
    }
    if (v7 < 0)
    {
      while (1)
      {
        int v16 = *(char *)(v8 + 23);
        size_t v17 = v16 >= 0 ? *(unsigned __int8 *)(v8 + 23) : *(void *)(v8 + 8);
        if (v17 <= v12)
        {
          std::string v18 = v16 >= 0 ? (const void *)v8 : *(const void **)v8;
          if (!memcmp(v18, *v10, v17)) {
            break;
          }
        }
        v8 += 24;
        if (v8 == v9) {
          goto LABEL_32;
        }
      }
    }
    else
    {
      while (1)
      {
        int v13 = *(char *)(v8 + 23);
        size_t v14 = v13 >= 0 ? *(unsigned __int8 *)(v8 + 23) : *(void *)(v8 + 8);
        if (v14 <= v12)
        {
          std::string v15 = v13 >= 0 ? (const void *)v8 : *(const void **)v8;
          if (!memcmp(v15, v10, v14)) {
            break;
          }
        }
        v8 += 24;
        if (v8 == v9) {
          goto LABEL_32;
        }
      }
    }
    return 1;
  }
LABEL_32:
  uint64_t v20 = sub_10CB254(a1, a2, a3);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v24);
    sub_188FC78(v24, (uint64_t)"destination_to_route_end_distance: ", 35);
    unint64_t v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)" m", 2);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v23 < 0) {
      operator delete(__p);
    }
    if (v25 < 0) {
      operator delete((void *)v24[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return v20 < *(void *)(a1 + 48);
}

void sub_10CB208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10CB254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 168);
  if (result != 0x7FFFFFFFFFFFFFFFLL) {
    return result;
  }
  uint64_t v6 = *(void *)(a3 + 8);
  int v7 = (unsigned int *)sub_460E10(a2);
  sub_2954EC(*(void *)(a1 + 152), (((unint64_t)(v7[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v7[1] << 32) | *v7) ^ 0x1000000000000, (uint64_t)v35);
  LODWORD(v8) = *(_DWORD *)(sub_45FC5C(a2) + 8);
  sub_E8979C((uint64_t)v35, 0, &__p, 0.0, (double)v8 / 1000000000.0);
  unsigned int v10 = *(v34 - 3);
  unsigned int v9 = *(v34 - 2);
  if (v10 != -1 || v9 != -1)
  {
    unsigned int v12 = *(_DWORD *)(v6 - 376);
    unsigned int v13 = *(_DWORD *)(v6 - 372);
    if (v12 != -1 || v13 != -1)
    {
      long double v15 = exp(3.14159265 - (double)v9 * 6.28318531 / 4294967300.0);
      long double v16 = atan((v15 - 1.0 / v15) * 0.5) * 57.2957795 * 0.0174532925;
      v17.i64[0] = v10;
      v17.i64[1] = v12;
      long double v18 = exp(3.14159265 - (double)v13 * 6.28318531 / 4294967300.0);
      long double v19 = atan((v18 - 1.0 / v18) * 0.5) * 57.2957795 * 0.0174532925;
      int64x2_t v20 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v17), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
      double v32 = vsubq_f64((float64x2_t)v20, (float64x2_t)vdupq_laneq_s64(v20, 1)).f64[0];
      long double v21 = sin((v16 - v19) * 0.5);
      long double v22 = v21 * v21;
      double v23 = cos(v16);
      long double v24 = v23 * cos(v19);
      long double v25 = sin(0.5 * v32);
      long double v26 = atan2(sqrt(v25 * v25 * v24 + v22), sqrt(1.0 - (v25 * v25 * v24 + v22)));
      double v27 = (v26 + v26) * 6372797.56 * 100.0;
      if (v27 >= 0.0)
      {
        double v28 = v27;
        if (v27 >= 4.50359963e15) {
          goto LABEL_24;
        }
        uint64_t v29 = (uint64_t)(v27 + v27) + 1;
      }
      else
      {
        double v28 = v27;
        if (v27 <= -4.50359963e15) {
          goto LABEL_24;
        }
        uint64_t v29 = (uint64_t)(v27 + v27);
        if (v29 >= 1) {
          --v29;
        }
      }
      double v28 = (double)(v29 >> 1);
LABEL_24:
      if (v28 >= 9.22337204e18)
      {
        *(void *)(a1 + 168) = 0x7FFFFFFFFFFFFFFELL;
        int v30 = __p;
        if (!__p) {
          goto LABEL_17;
        }
        goto LABEL_16;
      }
      if (v27 >= 0.0)
      {
        if (v27 >= 4.50359963e15) {
          goto LABEL_35;
        }
        uint64_t v31 = (uint64_t)(v27 + v27) + 1;
      }
      else
      {
        if (v27 <= -4.50359963e15) {
          goto LABEL_35;
        }
        uint64_t v31 = (uint64_t)(v27 + v27);
        if (v31 >= 1) {
          --v31;
        }
      }
      double v27 = (double)(v31 >> 1);
LABEL_35:
      *(void *)(a1 + 168) = (uint64_t)v27;
      int v30 = __p;
      if (!__p) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }
  *(void *)(a1 + 168) = 0x7FFFFFFFFFFFFFFFLL;
  int v30 = __p;
  if (__p)
  {
LABEL_16:
    long long v34 = v30;
    operator delete(v30);
  }
LABEL_17:
  if (v36)
  {
    uint64_t v37 = v36;
    operator delete(v36);
  }
  return *(void *)(a1 + 168);
}

void sub_10CB5C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10CB5DC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 56)) {
    return 1;
  }
  uint64_t v6 = *(void *)(a3 + 8);
  int v7 = *(char *)(v6 - 161);
  if ((*(unsigned char *)(v6 - 161) & 0x80) != 0)
  {
    if (!*(void *)(v6 - 176)) {
      goto LABEL_32;
    }
  }
  else if (!*(unsigned char *)(v6 - 161))
  {
    goto LABEL_32;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  if (v8 != v9)
  {
    unsigned int v10 = (const void **)(v6 - 184);
    size_t v11 = *(void *)(v6 - 176);
    if (v7 >= 0) {
      size_t v12 = v7;
    }
    else {
      size_t v12 = v11;
    }
    if (v7 < 0)
    {
      while (1)
      {
        int v16 = *(char *)(v8 + 23);
        size_t v17 = v16 >= 0 ? *(unsigned __int8 *)(v8 + 23) : *(void *)(v8 + 8);
        if (v17 <= v12)
        {
          long double v18 = v16 >= 0 ? (const void *)v8 : *(const void **)v8;
          if (!memcmp(v18, *v10, v17)) {
            break;
          }
        }
        v8 += 24;
        if (v8 == v9) {
          goto LABEL_32;
        }
      }
    }
    else
    {
      while (1)
      {
        int v13 = *(char *)(v8 + 23);
        size_t v14 = v13 >= 0 ? *(unsigned __int8 *)(v8 + 23) : *(void *)(v8 + 8);
        if (v14 <= v12)
        {
          long double v15 = v13 >= 0 ? (const void *)v8 : *(const void **)v8;
          if (!memcmp(v15, v10, v14)) {
            break;
          }
        }
        v8 += 24;
        if (v8 == v9) {
          goto LABEL_32;
        }
      }
    }
    return 1;
  }
LABEL_32:
  if (sub_45FD6C(a2) < *(void *)(a1 + 72)) {
    return 1;
  }
  uint64_t v20 = sub_10CB910(a1, a2, (unsigned int **)a3);
  uint64_t v21 = sub_10CB254(a1, (uint64_t)a2, a3);
  unint64_t v22 = sub_10CBD14(a1, (unsigned int **)a3);
  uint64_t v23 = v21 + v20 + sub_45FD6C(a2);
  if (v22 <= 1) {
    uint64_t v24 = 1;
  }
  else {
    uint64_t v24 = v22;
  }
  double v25 = (double)v23 / (double)v24;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v28);
    sub_188FC78(v28, (uint64_t)"detour_index: ", 14);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v27 < 0) {
      operator delete(__p);
    }
    if (v29 < 0) {
      operator delete((void *)v28[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return v25 < *(double *)(a1 + 64);
}

void sub_10CB8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10CB910(uint64_t a1, uint64_t *a2, unsigned int **a3)
{
  uint64_t result = *(void *)(a1 + 160);
  if (result == 0x7FFFFFFFFFFFFFFFLL)
  {
    BOOL v5 = a2;
    uint64_t v6 = *a3;
    int v7 = (unsigned int *)sub_45FC68(a2);
    sub_2954EC(*(void *)(a1 + 152), (((unint64_t)(v7[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v7[1] << 32) | *v7) ^ 0x1000000000000, (uint64_t)v33);
    LODWORD(v5) = *(_DWORD *)(sub_45FC54(v5) + 8);
    sub_9F0DE8((uint64_t)v33, 1, 0, __p, 1.0);
    sub_32F08((uint64_t *)__p, 0, 0, &v31, fmin((double)(1000000000 - v5) / 1000000000.0, 1.0));
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    uint64_t v8 = v31;
    unsigned int v10 = *(_DWORD *)v31;
    unsigned int v9 = *((_DWORD *)v31 + 1);
    if (*(_DWORD *)v31 == -1 && v9 == -1 || (v12 = *v6, unsigned int v11 = v6[1], v12 == -1) && v11 == -1)
    {
      *(void *)(a1 + 160) = 0x7FFFFFFFFFFFFFFFLL;
      double v32 = v8;
      operator delete(v8);
      int v13 = v34;
      if (!v34) {
        return *(void *)(a1 + 160);
      }
LABEL_9:
      uint64_t v35 = v13;
      operator delete(v13);
      return *(void *)(a1 + 160);
    }
    long double v14 = exp(3.14159265 - (double)v9 * 6.28318531 / 4294967300.0);
    long double v15 = atan((v14 - 1.0 / v14) * 0.5) * 57.2957795 * 0.0174532925;
    v16.i64[0] = v10;
    v16.i64[1] = v12;
    long double v17 = exp(3.14159265 - (double)v11 * 6.28318531 / 4294967300.0);
    long double v18 = atan((v17 - 1.0 / v17) * 0.5) * 57.2957795 * 0.0174532925;
    int64x2_t v19 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v16), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
    double v30 = vsubq_f64((float64x2_t)v19, (float64x2_t)vdupq_laneq_s64(v19, 1)).f64[0];
    long double v20 = sin((v15 - v18) * 0.5);
    long double v21 = v20 * v20;
    double v22 = cos(v15);
    long double v23 = v22 * cos(v18);
    long double v24 = sin(0.5 * v30);
    long double v25 = atan2(sqrt(v24 * v24 * v23 + v21), sqrt(1.0 - (v24 * v24 * v23 + v21)));
    double v26 = (v25 + v25) * 6372797.56 * 100.0;
    if (v26 >= 0.0)
    {
      double v27 = v26;
      if (v26 >= 4.50359963e15) {
        goto LABEL_20;
      }
      uint64_t v28 = (uint64_t)(v26 + v26) + 1;
    }
    else
    {
      double v27 = v26;
      if (v26 <= -4.50359963e15) {
        goto LABEL_20;
      }
      uint64_t v28 = (uint64_t)(v26 + v26);
      if (v28 >= 1) {
        --v28;
      }
    }
    double v27 = (double)(v28 >> 1);
LABEL_20:
    if (v27 >= 9.22337204e18)
    {
      *(void *)(a1 + 160) = 0x7FFFFFFFFFFFFFFELL;
      double v32 = v8;
      operator delete(v8);
      int v13 = v34;
      if (!v34) {
        return *(void *)(a1 + 160);
      }
      goto LABEL_9;
    }
    if (v26 >= 0.0)
    {
      if (v26 >= 4.50359963e15) {
        goto LABEL_31;
      }
      uint64_t v29 = (uint64_t)(v26 + v26) + 1;
    }
    else
    {
      if (v26 <= -4.50359963e15) {
        goto LABEL_31;
      }
      uint64_t v29 = (uint64_t)(v26 + v26);
      if (v29 >= 1) {
        --v29;
      }
    }
    double v26 = (double)(v29 >> 1);
LABEL_31:
    *(void *)(a1 + 160) = (uint64_t)v26;
    double v32 = v8;
    operator delete(v8);
    int v13 = v34;
    if (!v34) {
      return *(void *)(a1 + 160);
    }
    goto LABEL_9;
  }
  return result;
}

void sub_10CBCC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
  {
    operator delete(__p);
    double v22 = a16;
    if (!a16) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    double v22 = a16;
    if (!a16) {
      goto LABEL_3;
    }
  }
  operator delete(v22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10CBD14(uint64_t a1, unsigned int **a2)
{
  uint64_t result = *(void *)(a1 + 176);
  if (result == 0x7FFFFFFFFFFFFFFFLL)
  {
    unsigned int v5 = **a2;
    unsigned int v4 = (*a2)[1];
    BOOL v6 = v5 == -1 && v4 == -1;
    if (v6 || ((v8 = *(a2[1] - 94), unsigned int v7 = *(a2[1] - 93), v8 == -1) ? (v9 = v7 == -1) : (v9 = 0), v9))
    {
      uint64_t result = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_16;
    }
    long double v10 = exp(3.14159265 - (double)v4 * 6.28318531 / 4294967300.0);
    long double v11 = atan((v10 - 1.0 / v10) * 0.5) * 57.2957795 * 0.0174532925;
    v12.i64[0] = v5;
    v12.i64[1] = v8;
    long double v13 = exp(3.14159265 - (double)v7 * 6.28318531 / 4294967300.0);
    long double v14 = atan((v13 - 1.0 / v13) * 0.5) * 57.2957795 * 0.0174532925;
    int64x2_t v15 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v12), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
    double v26 = vsubq_f64((float64x2_t)v15, (float64x2_t)vdupq_laneq_s64(v15, 1)).f64[0];
    long double v16 = sin((v11 - v14) * 0.5);
    long double v17 = v16 * v16;
    double v18 = cos(v11);
    long double v19 = v18 * cos(v14);
    long double v20 = sin(0.5 * v26);
    long double v21 = atan2(sqrt(v20 * v20 * v19 + v17), sqrt(1.0 - (v20 * v20 * v19 + v17)));
    double v22 = (v21 + v21) * 6372797.56 * 100.0;
    if (v22 >= 0.0)
    {
      double v23 = v22;
      if (v22 < 4.50359963e15)
      {
        uint64_t v24 = (uint64_t)(v22 + v22) + 1;
LABEL_20:
        double v23 = (double)(v24 >> 1);
      }
    }
    else
    {
      double v23 = v22;
      if (v22 > -4.50359963e15)
      {
        uint64_t v24 = (uint64_t)(v22 + v22);
        if (v24 >= 1) {
          --v24;
        }
        goto LABEL_20;
      }
    }
    if (v23 < 9.22337204e18)
    {
      if (v22 >= 0.0)
      {
        if (v22 < 4.50359963e15)
        {
          uint64_t v25 = (uint64_t)(v22 + v22) + 1;
LABEL_30:
          double v22 = (double)(v25 >> 1);
        }
      }
      else if (v22 > -4.50359963e15)
      {
        uint64_t v25 = (uint64_t)(v22 + v22);
        if (v25 >= 1) {
          --v25;
        }
        goto LABEL_30;
      }
      uint64_t result = (uint64_t)v22;
      goto LABEL_16;
    }
    uint64_t result = 0x7FFFFFFFFFFFFFFELL;
LABEL_16:
    *(void *)(a1 + 176) = result;
  }
  return result;
}

BOOL sub_10CBFD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 80)) {
    return 1;
  }
  uint64_t v6 = *(void *)(a3 + 8);
  int v7 = *(char *)(v6 - 161);
  if ((*(unsigned char *)(v6 - 161) & 0x80) != 0)
  {
    if (!*(void *)(v6 - 176)) {
      goto LABEL_32;
    }
  }
  else if (!*(unsigned char *)(v6 - 161))
  {
    goto LABEL_32;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  if (v8 != v9)
  {
    long double v10 = (const void **)(v6 - 184);
    size_t v11 = *(void *)(v6 - 176);
    if (v7 >= 0) {
      size_t v12 = v7;
    }
    else {
      size_t v12 = v11;
    }
    if (v7 < 0)
    {
      while (1)
      {
        int v16 = *(char *)(v8 + 23);
        size_t v17 = v16 >= 0 ? *(unsigned __int8 *)(v8 + 23) : *(void *)(v8 + 8);
        if (v17 <= v12)
        {
          double v18 = v16 >= 0 ? (const void *)v8 : *(const void **)v8;
          if (!memcmp(v18, *v10, v17)) {
            break;
          }
        }
        v8 += 24;
        if (v8 == v9) {
          goto LABEL_32;
        }
      }
    }
    else
    {
      while (1)
      {
        int v13 = *(char *)(v8 + 23);
        size_t v14 = v13 >= 0 ? *(unsigned __int8 *)(v8 + 23) : *(void *)(v8 + 8);
        if (v14 <= v12)
        {
          int64x2_t v15 = v13 >= 0 ? (const void *)v8 : *(const void **)v8;
          if (!memcmp(v15, v10, v14)) {
            break;
          }
        }
        v8 += 24;
        if (v8 == v9) {
          goto LABEL_32;
        }
      }
    }
    return 1;
  }
LABEL_32:
  uint64_t v20 = sub_10CB254(a1, a2, a3);
  unint64_t v21 = sub_10CBD14(a1, (unsigned int **)a3);
  if (v21 <= 1) {
    uint64_t v22 = 1;
  }
  else {
    uint64_t v22 = v21;
  }
  double v23 = (double)v20 / (double)v22;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v26);
    sub_188FC78(v26, (uint64_t)"destination_to_end_over_route_index: ", 37);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v25 < 0) {
      operator delete(__p);
    }
    if (v27 < 0) {
      operator delete((void *)v26[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return v23 < *(double *)(a1 + 88);
}

void sub_10CC27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10CC2C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = (unsigned int *)sub_460E10(a2);
  int v6 = *(_DWORD *)(*(void *)(a3 + 8) - 264);
  if (v6 == 3)
  {
    if (*(unsigned char *)(a1 + 137)) {
      return 1;
    }
  }
  else if (v6 == 4 && *(unsigned char *)(a1 + 136))
  {
    return 1;
  }
  if (*(void *)(a1 + 112) == *(void *)(a1 + 120)) {
    return 0;
  }
  sub_3D63DC(*(void *)(a1 + 152), *v5 | ((unint64_t)(v5[1] & 0x1FFFFFFF) << 32), __p);
  uint64_t v8 = *(void *)(a1 + 112);
  uint64_t v9 = *(void *)(a1 + 120);
  unsigned __int8 v10 = v18;
  if (v8 == v9)
  {
LABEL_25:
    BOOL v7 = v8 != v9;
    if ((v10 & 0x80) == 0) {
      return v7;
    }
LABEL_26:
    operator delete(__p[0]);
    return v7;
  }
  if ((v18 & 0x80u) == 0) {
    unint64_t v11 = v18;
  }
  else {
    unint64_t v11 = (unint64_t)__p[1];
  }
  if ((v18 & 0x80u) == 0) {
    size_t v12 = __p;
  }
  else {
    size_t v12 = (void **)__p[0];
  }
  do
  {
    uint64_t v13 = *(unsigned __int8 *)(v8 + 23);
    if ((v13 & 0x80u) == 0) {
      size_t v14 = (void *)*(unsigned __int8 *)(v8 + 23);
    }
    else {
      size_t v14 = *(void **)(v8 + 8);
    }
    if (v14 == (void *)v11)
    {
      if ((v13 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v8, v12, *(void *)(v8 + 8))) {
          goto LABEL_25;
        }
      }
      else
      {
        if (!*(unsigned char *)(v8 + 23)) {
          goto LABEL_25;
        }
        uint64_t v15 = 0;
        while (*(unsigned __int8 *)(v8 + v15) == *((unsigned __int8 *)v12 + v15))
        {
          if (v13 == ++v15) {
            goto LABEL_25;
          }
        }
      }
    }
    v8 += 24;
  }
  while (v8 != v9);
  BOOL v7 = 0;
  if ((v10 & 0x80) != 0) {
    goto LABEL_26;
  }
  return v7;
}

void sub_10CC424()
{
  unk_25FE277 = 16641;
  word_25FE260 = 65;
  byte_25FE28F = 1;
  byte_25FE279 = 0;
}

void sub_10CC44C(uint64_t a1, uint64_t *a2, void *a3)
{
  v26[0] = (uint64_t)a2;
  v26[1] = a1;
  void v26[2] = (uint64_t)a3;
  if ((sub_37C1D8(a2) & 1) != 0
    || sub_DBD904(a1) && (sub_37B608(a2) & 1) != 0
    || sub_DBD8E0(a1) && (sub_37B8FC(a2) & 1) != 0
    || sub_DBD3E8(a1) && (sub_37BEE4(a2) & 1) != 0
    || sub_DBD928(a1) && sub_37BBF0(a2))
  {
    long long __p = operator new(0x30uLL);
    long long v28 = xmmword_20B93D0;
    strcpy((char *)__p, "Requested type or transport mode disabled");
    sub_10CD154(v26, &__p);
    goto LABEL_3;
  }
  int v6 = sub_69510();
  sub_DC6B80(a1);
  nullsub_1(v6);
  sub_DBE84C(a1);
  nullsub_1(v6);
  sub_DC5C6C(a1);
  nullsub_1(v6);
  int v7 = sub_DB7034(a1);
  uint64_t v8 = *(uint64_t (****)())(a1 + 304);
  if (!v8) {
    uint64_t v8 = &off_2535C50;
  }
  int v9 = v7;
  switch(*((_DWORD *)v8 + 32))
  {
    case 0:
      if ((*(_DWORD *)(a1 + 456) & 0xFFFFFFFE) != 2)
      {
        if (sub_DC08E0(a1))
        {
          sub_10F5D3C((uint64_t)&__p, 0, 0);
          sub_1880FAC(&__p, *(void *)(a1 + 280) & 0xFFFFFFFFFFFFFFFELL);
          uint64_t v15 = v29;
          if (!v29) {
            uint64_t v15 = &off_24F7B28;
          }
          uint64_t v16 = *((int *)v15 + 31);
          if (v16 < 7)
          {
            size_t v17 = "\r";
LABEL_43:
            int v14 = *(_DWORD *)&v17[4 * v16];
LABEL_44:
            sub_10F6120(&__p);
            switch(v14)
            {
              case 12:
                uint64_t v24 = (void *)a3[3];
                if (v24)
                {
                  if (v24 == a3)
                  {
                    uint64_t v41 = v40;
                    (*(void (**)(void *, void *))(*a3 + 24))(a3, v40);
                  }
                  else
                  {
                    uint64_t v41 = (void *)(*(uint64_t (**)(void *))(*v24 + 16))(v24);
                  }
                }
                else
                {
                  uint64_t v41 = 0;
                }
                sub_D58C78();
                long double v19 = v41;
                if (v41 == v40)
                {
                  (*(void (**)(void *))(v40[0] + 32))(v40);
                  return;
                }
                goto LABEL_114;
              case 13:
                char v25 = (void *)a3[3];
                if (v25)
                {
                  if (v25 == a3)
                  {
                    std::string::size_type v39 = v38;
                    (*(void (**)(void *, void *))(*a3 + 24))(a3, v38);
                  }
                  else
                  {
                    std::string::size_type v39 = (void *)(*(uint64_t (**)(void *))(*v25 + 16))(v25);
                  }
                }
                else
                {
                  std::string::size_type v39 = 0;
                }
                sub_D59408();
                long double v19 = v39;
                if (v39 == v38)
                {
                  (*(void (**)(void *))(v38[0] + 32))(v38);
                  return;
                }
                goto LABEL_114;
              case 14:
                unsigned __int8 v18 = (void *)a3[3];
                if (v18)
                {
                  if (v18 == a3)
                  {
                    uint64_t v37 = v36;
                    (*(void (**)(void *, void *))(*a3 + 24))(a3, v36);
                  }
                  else
                  {
                    uint64_t v37 = (void *)(*(uint64_t (**)(void *))(*v18 + 16))(v18);
                  }
                }
                else
                {
                  uint64_t v37 = 0;
                }
                sub_D59B00();
                long double v19 = v37;
                if (v37 == v36)
                {
                  (*(void (**)(void *))(v36[0] + 32))(v36);
                  return;
                }
                goto LABEL_114;
            }
LABEL_50:
            long long __p = operator new(0x28uLL);
            long long v28 = xmmword_20E12D0;
            strcpy((char *)__p, "Unsupported DirectionsRequest sub-type");
            sub_10CD154(v26, &__p);
LABEL_3:
            if (SHIBYTE(v28) < 0) {
              operator delete(__p);
            }
            return;
          }
          sub_10F6120(&__p);
        }
        if (v9 == 3 || v9 == 12)
        {
          uint64_t v20 = (void *)a3[3];
          if (v20)
          {
            if (v20 == a3)
            {
              uint64_t v33 = v32;
              (*(void (**)(void *, void *))(*a3 + 24))(a3, v32);
            }
            else
            {
              uint64_t v33 = (void *)(*(uint64_t (**)(void *))(*v20 + 16))(v20);
            }
          }
          else
          {
            uint64_t v33 = 0;
          }
          sub_D604A0();
        }
        unint64_t v21 = (void *)a3[3];
        if (v21)
        {
          if (v21 == a3)
          {
            uint64_t v49 = v48;
            (*(void (**)(void *, void *))(*a3 + 24))(a3, v48);
          }
          else
          {
            uint64_t v49 = (void *)(*(uint64_t (**)(void *))(*v21 + 16))(v21);
          }
        }
        else
        {
          uint64_t v49 = 0;
        }
        sub_D08060();
      }
      nullsub_1(v6);
      unsigned __int8 v10 = (void *)a3[3];
      if (v10)
      {
        if (v10 == a3)
        {
          int v45 = v44;
          (*(void (**)(void *, void *))(*a3 + 24))(a3, v44);
        }
        else
        {
          int v45 = (void *)(*(uint64_t (**)(void *))(*v10 + 16))(v10);
        }
      }
      else
      {
        int v45 = 0;
      }
      sub_D2EE44();
      long double v19 = v45;
      if (v45 == v44)
      {
        (*(void (**)(void *))(v44[0] + 32))(v44);
        return;
      }
LABEL_114:
      if (v19) {
        (*(void (**)(void *))(*v19 + 40))(v19);
      }
      return;
    case 1:
      unint64_t v11 = (void *)a3[3];
      if (v11)
      {
        if (v11 == a3)
        {
          int v43 = v42;
          (*(void (**)(void *, void *))(*a3 + 24))(a3, v42);
        }
        else
        {
          int v43 = (void *)(*(uint64_t (**)(void *))(*v11 + 16))(v11);
        }
      }
      else
      {
        int v43 = 0;
      }
      sub_D70EBC();
      long double v19 = v43;
      if (v43 != v42) {
        goto LABEL_114;
      }
      (*(void (**)(void *))(v42[0] + 32))(v42);
      return;
    case 2:
      if ((v7 - 3) >= 2)
      {
        if (v7 == 8)
        {
          sub_D7E5F0();
        }
        if (v7 != 12)
        {
          sub_D85D20();
        }
      }
      size_t v12 = (void *)a3[3];
      if (v12)
      {
        if (v12 == a3)
        {
          uint64_t v31 = v30;
          (*(void (**)(void *, void *))(*a3 + 24))(a3, v30);
        }
        else
        {
          uint64_t v31 = (void *)(*(uint64_t (**)(void *))(*v12 + 16))(v12);
        }
      }
      else
      {
        uint64_t v31 = 0;
      }
      sub_D61FB4();
    case 3:
      if (!sub_DC08E0(a1)) {
        goto LABEL_74;
      }
      sub_10F5D3C((uint64_t)&__p, 0, 0);
      sub_1880FAC(&__p, *(void *)(a1 + 280) & 0xFFFFFFFFFFFFFFFELL);
      uint64_t v13 = v29;
      if (!v29) {
        uint64_t v13 = &off_24F7B28;
      }
      if (((_BYTE)v13[2] & 0x40) == 0)
      {
        int v14 = 12;
        goto LABEL_44;
      }
      uint64_t v16 = *((int *)v13 + 31);
      if (v16 > 6)
      {
        sub_10F6120(&__p);
LABEL_74:
        if (v9 == 3 || v9 == 12)
        {
          uint64_t v22 = (void *)a3[3];
          if (v22)
          {
            if (v22 == a3)
            {
              uint64_t v35 = v34;
              (*(void (**)(void *, void *))(*a3 + 24))(a3, v34);
            }
            else
            {
              uint64_t v35 = (void *)(*(uint64_t (**)(void *))(*v22 + 16))(v22);
            }
          }
          else
          {
            uint64_t v35 = 0;
          }
          sub_D5E9BC();
        }
        double v23 = (void *)a3[3];
        if (v23)
        {
          if (v23 == a3)
          {
            uint64_t v47 = v46;
            (*(void (**)(void *, void *))(*a3 + 24))(a3, v46);
          }
          else
          {
            uint64_t v47 = (void *)(*(uint64_t (**)(void *))(*v23 + 16))(v23);
          }
        }
        else
        {
          uint64_t v47 = 0;
        }
        sub_CEAD40();
      }
      size_t v17 = (const char *)&unk_20F2C94;
      goto LABEL_43;
    default:
      goto LABEL_50;
  }
}

void sub_10CD030(_Unwind_Exception *a1)
{
  sub_10CD5FC((void *)(v1 - 248));
  _Unwind_Resume(a1);
}

void sub_10CD044(_Unwind_Exception *a1)
{
  sub_10CD5FC((void *)(v1 - 216));
  _Unwind_Resume(a1);
}

void sub_10CD058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
}

void sub_10CD06C(_Unwind_Exception *a1)
{
  sub_10CD5FC((void *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_10CD080(_Unwind_Exception *a1)
{
  sub_10CD5FC((void *)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_10CD094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
}

void sub_10CD0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10F6120(va);
  _Unwind_Resume(a1);
}

void sub_10CD0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
}

void sub_10CD0D0(_Unwind_Exception *a1)
{
  sub_10CD5FC((void *)(v1 - 152));
  _Unwind_Resume(a1);
}

void sub_10CD0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10F6120(va);
  _Unwind_Resume(a1);
}

void sub_10CD0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
}

void sub_10CD10C(_Unwind_Exception *a1)
{
  sub_10CD5FC((void *)(v1 - 184));
  _Unwind_Resume(a1);
}

void sub_10CD120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10CD154(uint64_t *a1, void **a2)
{
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v24);
    int v4 = *((char *)a2 + 23);
    if (v4 >= 0) {
      unsigned int v5 = a2;
    }
    else {
      unsigned int v5 = *a2;
    }
    if (v4 >= 0) {
      uint64_t v6 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      uint64_t v6 = (uint64_t)a2[1];
    }
    sub_188FC78(&v24, (uint64_t)v5, v6);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v22, 1u);
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    if (v27 < 0) {
      operator delete(v26);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  uint64_t v24 = (char *)operator new(0x30uLL);
  long long v25 = xmmword_20B93E0;
  strcpy(v24, "InternalError.DirectionsRequest.Unsupported");
  int v7 = (uint64_t *)sub_37D0C0(*a1);
  sub_710A8(1, (uint64_t)&v24, *v7);
  if (SHIBYTE(v25) < 0) {
    operator delete(v24);
  }
  uint64_t v8 = a1[2];
  long long v29 = (unint64_t)a1[1];
  *(void *)&long long v17 = 1;
  *((void *)&v17 + 1) = &off_2439090;
  v30[0] = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(&v31, *a2, (unint64_t)a2[1]);
  }
  else
  {
    long long v31 = *(_OWORD *)a2;
    double v32 = a2[2];
  }
  sub_3E7DA4(&v16, (uint64_t)v30, 1uLL);
  sub_3E787C((uint64_t)v18, &v17, &v16);
  sub_CF1ACC((uint64_t)v21, 5, (uint64_t)v18, *a1, a1[1], &v29);
  sub_CBB384(v21, (uint64_t)v22);
  sub_C6B2B4((uint64_t)&v24, (uint64_t)v22);
  sub_162C594(v28, 0, 0);
  uint64_t v9 = *(void *)(v8 + 24);
  if (!v9) {
    sub_29F82C();
  }
  (*(void (**)(uint64_t, char **))(*(void *)v9 + 48))(v9, &v24);
  sub_162D64C(v28);
  sub_162D64C(&v24);
  sub_162D64C(v22);
  sub_CF22FC((uint64_t)v21);
  unsigned __int8 v10 = (void **)__p;
  if (__p)
  {
    unint64_t v11 = v20;
    size_t v12 = __p;
    if (v20 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 4;
      }
      while (v11 != v10);
      size_t v12 = __p;
    }
    uint64_t v20 = v10;
    operator delete(v12);
  }
  unint64_t v13 = v16.n128_u64[0];
  if (v16.n128_u64[0])
  {
    unint64_t v14 = v16.n128_u64[1];
    uint64_t v15 = (void *)v16.n128_u64[0];
    if (v16.n128_u64[1] != v16.n128_u64[0])
    {
      do
      {
        if (*(char *)(v14 - 1) < 0) {
          operator delete(*(void **)(v14 - 24));
        }
        v14 -= 32;
      }
      while (v14 != v13);
      uint64_t v15 = (void *)v16.n128_u64[0];
    }
    v16.n128_u64[1] = v13;
    operator delete(v15);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete((void *)v31);
  }
}

void sub_10CD518(_Unwind_Exception *a1)
{
}

void sub_10CD594()
{
  sub_162D64C(v0);
  JUMPOUT(0x10CD5A0);
}

void sub_10CD5E0(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x3DF]) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(a1);
}

void *sub_10CD5FC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void sub_10CD68C()
{
  unk_25FE2A7 = 16641;
  word_25FE290 = 65;
  byte_25FE2BF = 1;
  byte_25FE2A9 = 0;
}

void sub_10CD6B4(uint64_t a1, uint64_t *a2, void *a3)
{
  v12[0] = (uint64_t)a2;
  v12[1] = (uint64_t)a3;
  if ((sub_37C1D8(a2) & 1) != 0 || sub_DBD94C(a1) && sub_37B8FC(a2))
  {
    long long __p = operator new(0x30uLL);
    long long v11 = xmmword_20B93D0;
    strcpy((char *)__p, "Requested type or transport mode disabled");
    sub_10CDA34(v12, (uint64_t)&__p);
  }
  else
  {
    uint64_t v6 = sub_69510();
    sub_DBE834(a1);
    nullsub_1(v6);
    sub_DBE88C(a1);
    nullsub_1(v6);
    int v7 = *(uint64_t (****)())(a1 + 288);
    if (!v7) {
      int v7 = &off_2535C50;
    }
    if (!*((_DWORD *)v7 + 32))
    {
      char v8 = sub_DC082C(a1);
      uint64_t v9 = (void *)a3[3];
      if (v8)
      {
        if (v9)
        {
          if (v9 == a3)
          {
            unint64_t v14 = v13;
            (*(void (**)(void *, void *))(*a3 + 24))(a3, v13);
          }
          else
          {
            unint64_t v14 = (void *)(*(uint64_t (**)(void *))(*v9 + 16))(v9);
          }
        }
        else
        {
          unint64_t v14 = 0;
        }
        sub_D34158();
      }
      if (v9)
      {
        if (v9 == a3)
        {
          __n128 v16 = v15;
          (*(void (**)(void *, void *))(*a3 + 24))(a3, v15);
        }
        else
        {
          __n128 v16 = (void *)(*(uint64_t (**)(void *))(*v9 + 16))(v9);
        }
      }
      else
      {
        __n128 v16 = 0;
      }
      sub_D1EFCC();
    }
    long long __p = operator new(0x30uLL);
    long long v11 = xmmword_20E1380;
    strcpy((char *)__p, "Unsupported ETATrafficUpdateRequest sub-type");
    sub_10CDA34(v12, (uint64_t)&__p);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
}

void sub_10CD9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_10CDD7C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10CDA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_10CDD7C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10CDA14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10CDA34(uint64_t *a1, uint64_t a2)
{
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v18);
    int v4 = *(char *)(a2 + 23);
    if (v4 >= 0) {
      uint64_t v5 = a2;
    }
    else {
      uint64_t v5 = *(void *)a2;
    }
    if (v4 >= 0) {
      uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v6 = *(void *)(a2 + 8);
    }
    int v7 = sub_188FC78(&v18, v5, v6);
    char v8 = sub_188FC78(v7, (uint64_t)": ", 2);
    uint64_t v9 = sub_69510();
    uint64_t v10 = sub_68EE4((uint64_t)v9);
    int v11 = *(char *)(v10 + 23);
    if (v11 >= 0) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = *(void *)v10;
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(v10 + 23);
    }
    else {
      uint64_t v13 = *(void *)(v10 + 8);
    }
    sub_188FC78(v8, v12, v13);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unsigned __int8 v18 = operator new(0x38uLL);
  long long v19 = xmmword_20B9A10;
  strcpy((char *)v18, "InternalError.ETATrafficUpdateRequest.Unsupported");
  unint64_t v14 = (uint64_t *)sub_37D0C0(*a1);
  sub_710A8(1, (uint64_t)&v18, *v14);
  if (SHIBYTE(v19) < 0) {
    operator delete(v18);
  }
  sub_13E6614(__p, 0, 0);
  v25 |= 0x80u;
  int v26 = 5;
  uint64_t v15 = a1[1];
  sub_C86114((uint64_t)&v18, (uint64_t)__p);
  sub_13E6614(v22, 0, 0);
  uint64_t v16 = *(void *)(v15 + 24);
  if (!v16) {
    sub_29F82C();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v16 + 48))(v16, &v18);
  sub_13E6DAC(v22);
  sub_13E6DAC(&v18);
  return sub_13E6DAC(__p);
}

void sub_10CDCE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  if (SLOBYTE(STACK[0x217]) < 0)
  {
    operator delete((void *)STACK[0x200]);
    sub_111ECAC((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *sub_10CDD7C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void sub_10CDE0C()
{
  unk_25FE2D7 = 16641;
  word_25FE2C0 = 65;
  byte_25FE2EF = 1;
  byte_25FE2D9 = 0;
}

void sub_10CDE34(uint64_t a1, uint64_t *a2, void *a3)
{
  v22[0] = (uint64_t)a2;
  v22[1] = (uint64_t)a3;
  if (sub_37C1D8(a2))
  {
    long long __p = operator new(0x30uLL);
    long long v21 = xmmword_20B93D0;
    strcpy((char *)__p, "Requested type or transport mode disabled");
    sub_10CE3D8(v22, (uint64_t)&__p);
    goto LABEL_3;
  }
  uint64_t v6 = sub_69510();
  sub_DBE834(a1);
  nullsub_1(v6);
  sub_DBE86C(a1);
  nullsub_1(v6);
  BOOL v7 = sub_DBDC20(a1);
  int v8 = sub_DBDBD8(a1);
  BOOL v9 = sub_DBDC4C(a1);
  int v10 = v8 + v7 + v9 + sub_DBD40C(a1);
  if (*(_DWORD *)(a1 + 104))
  {
    BOOL v11 = 0;
    BOOL v12 = v10 == 1 && v7;
  }
  else
  {
    BOOL v11 = (*(unsigned char *)(a1 + 42) & 2) == 0;
    BOOL v12 = v10 == 1 && v7;
    if ((*(unsigned char *)(a1 + 42) & 2) == 0) {
      goto LABEL_17;
    }
  }
  if (v12)
  {
    uint64_t v13 = (void *)a3[3];
    if (v13)
    {
      if (v13 == a3)
      {
        double v30 = v29;
        (*(void (**)(void *, void *))(*a3 + 24))(a3, v29);
      }
      else
      {
        double v30 = (void *)(*(uint64_t (**)(void *))(*v13 + 16))(v13);
      }
    }
    else
    {
      double v30 = 0;
    }
    sub_CFEC48((void ***)a1, a2, (uint64_t)v29);
    long long v19 = v30;
    if (v30 == v29)
    {
      (*(void (**)(void *))(v29[0] + 32))(v29);
      return;
    }
    goto LABEL_50;
  }
LABEL_17:
  if (v10 == 1) {
    int v14 = v8;
  }
  else {
    int v14 = 0;
  }
  if ((v11 | v14 ^ 1) == 1)
  {
    if (*(int *)(a1 + 128) > 0) {
      char v15 = v14;
    }
    else {
      char v15 = 0;
    }
    if (v15)
    {
      uint64_t v16 = (void *)a3[3];
      if (v16)
      {
        if (v16 == a3)
        {
          char v24 = v23;
          (*(void (**)(void *, void *))(*a3 + 24))(a3, v23);
        }
        else
        {
          char v24 = (void *)(*(uint64_t (**)(void *))(*v16 + 16))(v16);
        }
      }
      else
      {
        char v24 = 0;
      }
      sub_D3F1E8(a1, (uint64_t)a2);
    }
    if (!v10)
    {
      long long __p = operator new(0x20uLL);
      long long v21 = xmmword_20B8E90;
      strcpy((char *)__p, "Unsupported ETARequest sub-type");
      sub_10CE3D8(v22, (uint64_t)&__p);
LABEL_3:
      if (SHIBYTE(v21) < 0) {
        operator delete(__p);
      }
      return;
    }
    unsigned __int8 v18 = (void *)a3[3];
    if (v18)
    {
      if (v18 == a3)
      {
        long long v28 = v27;
        (*(void (**)(void *, void *))(*a3 + 24))(a3, v27);
      }
      else
      {
        long long v28 = (void *)(*(uint64_t (**)(void *))(*v18 + 16))(v18);
      }
    }
    else
    {
      long long v28 = 0;
    }
    sub_D4405C(a1, a2, (uint64_t)v27);
    long long v19 = v28;
    if (v28 == v27)
    {
      (*(void (**)(void *))(v27[0] + 32))(v27);
      return;
    }
  }
  else
  {
    long long v17 = (void *)a3[3];
    if (v17)
    {
      if (v17 == a3)
      {
        int v26 = v25;
        (*(void (**)(void *, void *))(*a3 + 24))(a3, v25);
      }
      else
      {
        int v26 = (void *)(*(uint64_t (**)(void *))(*v17 + 16))(v17);
      }
    }
    else
    {
      int v26 = 0;
    }
    sub_D38190(a1, (uint64_t)a2, (uint64_t)v25);
    long long v19 = v26;
    if (v26 == v25)
    {
      (*(void (**)(void *))(v25[0] + 32))(v25);
      return;
    }
  }
LABEL_50:
  if (v19) {
    (*(void (**)(void *))(*v19 + 40))(v19);
  }
}

void sub_10CE364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10CE3D8(uint64_t *a1, uint64_t a2)
{
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v11);
    int v4 = *(char *)(a2 + 23);
    if (v4 >= 0) {
      uint64_t v5 = a2;
    }
    else {
      uint64_t v5 = *(void *)a2;
    }
    if (v4 >= 0) {
      uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v6 = *(void *)(a2 + 8);
    }
    sub_188FC78(&v11, v5, v6);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v16, 1u);
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    if (v14 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  BOOL v11 = operator new(0x28uLL);
  long long v12 = xmmword_20B8FD0;
  strcpy((char *)v11, "InternalError.ETARequest.Unsupported");
  BOOL v7 = (uint64_t *)sub_37D0C0(*a1);
  sub_710A8(1, (uint64_t)&v11, *v7);
  if (SHIBYTE(v12) < 0) {
    operator delete(v11);
  }
  sub_13F1D90(v16, 0, 0);
  v18 |= 0x20u;
  int v19 = 5;
  uint64_t v8 = a1[1];
  sub_C5EEF0((uint64_t)&v11, (uint64_t)v16);
  sub_13F1D90(v15, 0, 0);
  uint64_t v9 = *(void *)(v8 + 24);
  if (!v9) {
    sub_29F82C();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v9 + 48))(v9, &v11);
  sub_13F22FC(v15);
  sub_13F22FC(&v11);
  return sub_13F22FC(v16);
}

void sub_10CE650(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 - 193) < 0)
  {
    operator delete(*(void **)(v2 - 216));
    sub_111ECAC((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10CE69C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_13F22FC(va);
  sub_13F22FC(v2 - 216);
  _Unwind_Resume(a1);
}

void sub_10CE6C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10CE6E4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void sub_10CE774()
{
  unk_25FE307 = 16641;
  word_25FE2F0 = 65;
  byte_25FE31F = 1;
  byte_25FE309 = 0;
}

BOOL *sub_10CE79C(BOOL *a1, void *a2)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B5EB0;
  strcpy((char *)__p[0], "enable_directions_requests");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *a1 = v4;
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "enable_eta_requests");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[1] = v5;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9280;
  strcpy((char *)__p[0], "enable_eta_traffic_update_requests");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[2] = v6;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8FD0;
  strcpy((char *)__p[0], "enable_transit_route_update_requests");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[3] = v7;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_place_requests");
  BOOL v8 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[4] = v8;
  return a1;
}

void sub_10CE974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL *sub_10CE9A0(BOOL *a1, void *a2)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "enable_data_compatibility_check");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *a1 = v4;
  strcpy((char *)__p, "load_all_localizations");
  HIBYTE(__p[2]) = 22;
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[1] = v5;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "load_feature_polygons");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[2] = v6;
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "request_type_filter");
  BOOL v7 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_10CE79C(a1 + 3, v7);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_10CEB24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_10CEB4C(uint64_t a1, uint64_t a2, long long *a3, __n128 *a4)
{
  *(void *)a1 = off_243F9B0;
  *(void *)(a1 + 8) = off_243F9F8;
  *(void *)(a1 + 16) = off_243FA20;
  *(void *)(a1 + 24) = off_243FA48;
  *(void *)(a1 + 32) = off_243FA70;
  *(_DWORD *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 44) = 256;
  *(unsigned char *)(a1 + 46) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  long long v4 = *a3;
  *(void *)(a1 + 80) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 64) = v4;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  __n128 result = *a4;
  *(void *)(a1 + 104) = a4[1].n128_u64[0];
  *(__n128 *)(a1 + 88) = result;
  a4->n128_u64[1] = 0;
  a4[1].n128_u64[0] = 0;
  a4->n128_u64[0] = 0;
  return result;
}

void sub_10CEC38(uint64_t a1, uint64_t a2, void *a3)
{
  BOOL v5 = (void *)a3[3];
  if (v5)
  {
    if (v5 == a3)
    {
      BOOL v8 = v7;
      (*(void (**)(void *, void *))(*a3 + 24))(a3, v7);
    }
    else
    {
      BOOL v8 = (void *)a3[3];
      a3[3] = 0;
    }
  }
  else
  {
    BOOL v8 = 0;
  }
  v6[3] = 0;
  sub_10CEE28(a1, a2, v7, v6);
}

void sub_10CEDF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10CEE28(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  sub_725D0((uint64_t)&v16);
  int v8 = *(_DWORD *)(a2 + 544);
  sub_1627A14(v22, a2);
  sub_1643AB4(v23, a2 + 480);
  v23[18] = v8;
  long long v24 = v16;
  char v25 = v17;
  uint64_t v9 = a3[3];
  if (v9)
  {
    if ((void *)v9 == a3)
    {
      char v27 = &v26;
      (*(void (**)(void *))(*a3 + 24))(a3);
LABEL_6:
      uint64_t v10 = a4[3];
      if (v10)
      {
        if ((void *)v10 == a4)
        {
          long long v29 = v28;
          (*(void (**)(void *, void *))(*a4 + 24))(a4, v28);
LABEL_11:
          if (*(void *)(a1 + 48))
          {
            BOOL v11 = operator new(0x928uLL);
            v11[1] = 0;
            v11[2] = 0;
            *BOOL v11 = off_243FB68;
            bzero(v11 + 3, 0x910uLL);
            uint64_t v20 = v11 + 3;
            long long v21 = v11;
            sub_725D0((uint64_t)v19);
            uint64_t v12 = *(void *)(a1 + 56);
            v18[0] = *(void *)(a1 + 48);
            v18[1] = v12;
            if (v12) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
            }
            if (*(_DWORD *)(a1 + 40) == 1) {
              char v13 = 2;
            }
            else {
              char v13 = 1;
            }
            sub_39D840((uint64_t)v18, a1 + 64, v13, a1 + 88, 0, 1, *(unsigned __int8 *)(a1 + 44), *(unsigned char *)(a1 + 46));
          }
          exception = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(__t, "Offline data provider in offline service is nullptr");
          char v15 = (void *)sub_2F404((uint64_t)exception, (long long *)&__t[0].__d_.__rep_);
        }
        uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
      }
      long long v29 = (void *)v10;
      goto LABEL_11;
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
  }
  char v27 = (uint64_t *)v9;
  goto LABEL_6;
}

void sub_10CFFD0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a2)
  {
    sub_16449AC(v42);
    sub_162D64C(&STACK[0x3A8]);
    if (a41 < 0) {
      operator delete(__p);
    }
    sub_14A84((uint64_t)&a20);
    sub_14A84((uint64_t)&a22);
    sub_14A84((uint64_t)&a26);
    sub_14A84((uint64_t)&a31);
    __cxa_begin_catch(a1);
    if (*(unsigned char *)(v41 + 45)) {
      sub_10D76D8();
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_10D03E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

void sub_10D03FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

void sub_10D0414(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x10D032CLL);
  }
  JUMPOUT(0x10D0044);
}

void *sub_10D0430(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void *sub_10D04C0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void sub_10D0550(uint64_t a1, uint64_t a2, void *a3)
{
}

void sub_10D0558(uint64_t a1, uint64_t a2, void *a3)
{
  BOOL v5 = (void *)a3[3];
  if (v5)
  {
    if (v5 == a3)
    {
      int v8 = v7;
      (*(void (**)(void *, void *))(*a3 + 24))(a3, v7);
    }
    else
    {
      int v8 = (void *)a3[3];
      a3[3] = 0;
    }
  }
  else
  {
    int v8 = 0;
  }
  v6[3] = 0;
  sub_10D0748(a1, a2, v7, v6);
}

void sub_10D0714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10D0748(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  sub_725D0((uint64_t)&v16);
  int v7 = *(_DWORD *)(a2 + 504);
  sub_13E9AE8(v22, a2);
  sub_1643AB4(v23, a2 + 440);
  v23[18] = v7;
  long long v24 = v16;
  char v25 = v17;
  uint64_t v8 = a3[3];
  if (v8)
  {
    if ((void *)v8 == a3)
    {
      char v27 = &v26;
      (*(void (**)(void *))(*a3 + 24))(a3);
LABEL_6:
      uint64_t v9 = a4[3];
      if (v9)
      {
        if ((void *)v9 == a4)
        {
          long long v29 = &v28;
          (*(void (**)(void *))(*a4 + 24))(a4);
LABEL_11:
          if (*(void *)(a1 + 48))
          {
            uint64_t v10 = operator new(0x928uLL);
            v10[1] = 0;
            v10[2] = 0;
            *uint64_t v10 = off_243FB68;
            bzero(v10 + 3, 0x910uLL);
            uint64_t v20 = v10 + 3;
            long long v21 = v10;
            sub_725D0((uint64_t)v19);
            uint64_t v11 = *(void *)(a1 + 56);
            v18[0] = *(void *)(a1 + 48);
            v18[1] = v11;
            if (v11) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
            }
            if (*(_DWORD *)(a1 + 40) == 1) {
              char v12 = 2;
            }
            else {
              char v12 = 1;
            }
            sub_39D840((uint64_t)v18, a1 + 64, v12, a1 + 88, 0, 1, *(unsigned __int8 *)(a1 + 44), *(unsigned char *)(a1 + 46));
          }
          exception = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(__t, "Offline data provider in offline service is nullptr");
          char v14 = (void *)sub_2F404((uint64_t)exception, (long long *)&__t[0].__d_.__rep_);
        }
        uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
      }
      long long v29 = (uint64_t *)v9;
      goto LABEL_11;
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
  }
  char v27 = (uint64_t *)v8;
  goto LABEL_6;
}

void sub_10D1734(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_58CC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10D1A4C()
{
}

void sub_10D1A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
}

void sub_10D1A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
}

void sub_10D1A88(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x10D19ACLL);
  }
  JUMPOUT(0x10D1748);
}

void *sub_10D1AA0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void sub_10D1B30(uint64_t a1, uint64_t a2, void *a3)
{
}

void sub_10D1B38(uint64_t a1, uint64_t a2, void *a3)
{
  BOOL v5 = (void *)a3[3];
  if (v5)
  {
    if (v5 == a3)
    {
      uint64_t v8 = v7;
      (*(void (**)(void *, void *))(*a3 + 24))(a3, v7);
    }
    else
    {
      uint64_t v8 = (void *)a3[3];
      a3[3] = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  v6[3] = 0;
  sub_10D1D28(a1, a2, v7, v6);
}

void sub_10D1CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10D1D28(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  sub_725D0((uint64_t)&v16);
  int v7 = *(_DWORD *)(a2 + 488);
  sub_13E1D64(v22, a2);
  sub_1643AB4(v23, a2 + 424);
  v23[18] = v7;
  long long v24 = v16;
  char v25 = v17;
  uint64_t v8 = a3[3];
  if (v8)
  {
    if ((void *)v8 == a3)
    {
      char v27 = &v26;
      (*(void (**)(void *))(*a3 + 24))(a3);
LABEL_6:
      uint64_t v9 = a4[3];
      if (v9)
      {
        if ((void *)v9 == a4)
        {
          long long v29 = &v28;
          (*(void (**)(void *))(*a4 + 24))(a4);
LABEL_11:
          if (*(void *)(a1 + 48))
          {
            uint64_t v10 = operator new(0x928uLL);
            v10[1] = 0;
            v10[2] = 0;
            *uint64_t v10 = off_243FB68;
            bzero(v10 + 3, 0x910uLL);
            uint64_t v20 = v10 + 3;
            long long v21 = v10;
            sub_725D0((uint64_t)v19);
            uint64_t v11 = *(void *)(a1 + 56);
            v18[0] = *(void *)(a1 + 48);
            v18[1] = v11;
            if (v11) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
            }
            if (*(_DWORD *)(a1 + 40) == 1) {
              char v12 = 2;
            }
            else {
              char v12 = 1;
            }
            sub_39D840((uint64_t)v18, a1 + 64, v12, a1 + 88, 0, 1, *(unsigned __int8 *)(a1 + 44), *(unsigned char *)(a1 + 46));
          }
          exception = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(__t, "Offline data provider in offline service is nullptr");
          char v14 = (void *)sub_2F404((uint64_t)exception, (long long *)&__t[0].__d_.__rep_);
        }
        uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
      }
      long long v29 = (uint64_t *)v9;
      goto LABEL_11;
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
  }
  char v27 = (uint64_t *)v8;
  goto LABEL_6;
}

void sub_10D2D14(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_58CC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10D302C()
{
}

void sub_10D303C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
}

void sub_10D3050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
}

void sub_10D3068(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x10D2F8CLL);
  }
  JUMPOUT(0x10D2D28);
}

void *sub_10D3080(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void sub_10D3110(uint64_t a1, uint64_t a2, void *a3)
{
}

void sub_10D3118(uint64_t a1, uint64_t a2, void *a3)
{
  BOOL v5 = (void *)a3[3];
  if (v5)
  {
    if (v5 == a3)
    {
      uint64_t v8 = v7;
      (*(void (**)(void *, void *))(*a3 + 24))(a3, v7);
    }
    else
    {
      uint64_t v8 = (void *)a3[3];
      a3[3] = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  v6[3] = 0;
  sub_10D3308(a1, a2, v7, v6);
}

void sub_10D32D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10D3308(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  sub_725D0((uint64_t)&v16);
  int v8 = *(_DWORD *)(a2 + 288);
  sub_182B188(v22, a2);
  sub_1643AB4(v23, a2 + 224);
  v23[18] = v8;
  long long v24 = v16;
  char v25 = v17;
  uint64_t v9 = a3[3];
  if (v9)
  {
    if ((void *)v9 == a3)
    {
      char v27 = &v26;
      (*(void (**)(void *))(*a3 + 24))(a3);
LABEL_6:
      uint64_t v10 = a4[3];
      if (v10)
      {
        if ((void *)v10 == a4)
        {
          long long v29 = v28;
          (*(void (**)(void *, void *))(*a4 + 24))(a4, v28);
LABEL_11:
          if (*(void *)(a1 + 48))
          {
            uint64_t v11 = operator new(0x928uLL);
            v11[1] = 0;
            v11[2] = 0;
            *uint64_t v11 = off_243FB68;
            bzero(v11 + 3, 0x910uLL);
            uint64_t v20 = v11 + 3;
            long long v21 = v11;
            sub_725D0((uint64_t)v19);
            uint64_t v12 = *(void *)(a1 + 56);
            v18[0] = *(void *)(a1 + 48);
            v18[1] = v12;
            if (v12) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
            }
            if (*(_DWORD *)(a1 + 40) == 1) {
              char v13 = 2;
            }
            else {
              char v13 = 1;
            }
            sub_39D840((uint64_t)v18, a1 + 64, v13, a1 + 88, 0, 1, *(unsigned __int8 *)(a1 + 44), *(unsigned char *)(a1 + 46));
          }
          exception = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(__t, "Offline data provider in offline service is nullptr");
          char v15 = (void *)sub_2F404((uint64_t)exception, (long long *)&__t[0].__d_.__rep_);
        }
        uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
      }
      long long v29 = (void *)v10;
      goto LABEL_11;
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
  }
  char v27 = (uint64_t *)v9;
  goto LABEL_6;
}

void sub_10D4304(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_58CC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10D4660()
{
}

void sub_10D4674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

void sub_10D4688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

void sub_10D46A0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x10D45B8);
  }
  JUMPOUT(0x10D4318);
}

void *sub_10D46BC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void sub_10D474C(uint64_t a1, uint64_t a2, void *a3)
{
  BOOL v5 = (void *)a3[3];
  if (v5)
  {
    if (v5 == a3)
    {
      int v8 = v7;
      (*(void (**)(void *, void *))(*a3 + 24))(a3, v7);
    }
    else
    {
      int v8 = (void *)a3[3];
      a3[3] = 0;
    }
  }
  else
  {
    int v8 = 0;
  }
  v6[3] = 0;
  sub_10D493C(a1, a2, v7, v6);
}

void sub_10D4908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10D493C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  sub_725D0((uint64_t)&v16);
  int v8 = *(_DWORD *)(a2 + 256);
  sub_1351FFC(v22, a2);
  sub_1643AB4(v23, a2 + 192);
  v23[18] = v8;
  long long v24 = v16;
  char v25 = v17;
  uint64_t v9 = a3[3];
  if (v9)
  {
    if ((void *)v9 == a3)
    {
      char v27 = &v26;
      (*(void (**)(void *))(*a3 + 24))(a3);
LABEL_6:
      uint64_t v10 = a4[3];
      if (v10)
      {
        if ((void *)v10 == a4)
        {
          long long v29 = v28;
          (*(void (**)(void *, void *))(*a4 + 24))(a4, v28);
LABEL_11:
          if (*(void *)(a1 + 48))
          {
            uint64_t v11 = operator new(0x928uLL);
            v11[1] = 0;
            v11[2] = 0;
            *uint64_t v11 = off_243FB68;
            bzero(v11 + 3, 0x910uLL);
            uint64_t v20 = v11 + 3;
            long long v21 = v11;
            sub_725D0((uint64_t)v19);
            uint64_t v12 = *(void *)(a1 + 56);
            v18[0] = *(void *)(a1 + 48);
            v18[1] = v12;
            if (v12) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
            }
            if (*(_DWORD *)(a1 + 40) == 1) {
              char v13 = 2;
            }
            else {
              char v13 = 1;
            }
            sub_39D840((uint64_t)v18, a1 + 64, v13, a1 + 88, 0, 1, *(unsigned __int8 *)(a1 + 44), *(unsigned char *)(a1 + 46));
          }
          exception = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(__t, "Offline data provider in offline service is nullptr");
          char v15 = (void *)sub_2F404((uint64_t)exception, (long long *)&__t[0].__d_.__rep_);
        }
        uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
      }
      long long v29 = (void *)v10;
      goto LABEL_11;
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
  }
  char v27 = (uint64_t *)v9;
  goto LABEL_6;
}

void sub_10D5938(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_58CC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10D5C94()
{
}

void sub_10D5CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

void sub_10D5CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

void sub_10D5CD4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x10D5BECLL);
  }
  JUMPOUT(0x10D594CLL);
}

void *sub_10D5CF0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void sub_10D5D80(uint64_t a1, uint64_t a2, void *a3)
{
}

uint64_t sub_10D5D88(uint64_t a1)
{
  uint64_t v2 = a1 + 616;
  uint64_t v3 = *(void *)(a1 + 640);
  if (v3 != v2)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    uint64_t v4 = a1 + 584;
    uint64_t v5 = *(void *)(a1 + 608);
    if (v5 != a1 + 584) {
      goto LABEL_5;
    }
LABEL_8:
    (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
    goto LABEL_9;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  uint64_t v4 = a1 + 584;
  uint64_t v5 = *(void *)(a1 + 608);
  if (v5 == a1 + 584) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
  }
LABEL_9:
  sub_1643B60(a1 + 480);

  return sub_1627DB4(a1);
}

uint64_t sub_10D5E98(uint64_t a1)
{
  uint64_t v2 = a1 + 576;
  uint64_t v3 = *(void *)(a1 + 600);
  if (v3 != v2)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    uint64_t v4 = a1 + 544;
    uint64_t v5 = *(void *)(a1 + 568);
    if (v5 != a1 + 544) {
      goto LABEL_5;
    }
LABEL_8:
    (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
    goto LABEL_9;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  uint64_t v4 = a1 + 544;
  uint64_t v5 = *(void *)(a1 + 568);
  if (v5 == a1 + 544) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
  }
LABEL_9:
  sub_1643B60(a1 + 440);

  return sub_13E9E88(a1);
}

uint64_t sub_10D5FA8(uint64_t a1)
{
  uint64_t v2 = a1 + 560;
  uint64_t v3 = *(void *)(a1 + 584);
  if (v3 != v2)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    uint64_t v4 = a1 + 528;
    uint64_t v5 = *(void *)(a1 + 552);
    if (v5 != a1 + 528) {
      goto LABEL_5;
    }
LABEL_8:
    (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
    goto LABEL_9;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  uint64_t v4 = a1 + 528;
  uint64_t v5 = *(void *)(a1 + 552);
  if (v5 == a1 + 528) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
  }
LABEL_9:
  sub_1643B60(a1 + 424);

  return sub_13E2098(a1);
}

uint64_t sub_10D60B8(uint64_t a1)
{
  uint64_t v2 = a1 + 360;
  uint64_t v3 = *(void *)(a1 + 384);
  if (v3 != v2)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    uint64_t v4 = a1 + 328;
    uint64_t v5 = *(void *)(a1 + 352);
    if (v5 != a1 + 328) {
      goto LABEL_5;
    }
LABEL_8:
    (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
    goto LABEL_9;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  uint64_t v4 = a1 + 328;
  uint64_t v5 = *(void *)(a1 + 352);
  if (v5 == a1 + 328) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
  }
LABEL_9:
  sub_1643B60(a1 + 224);

  return sub_182B32C(a1);
}

uint64_t sub_10D61C8(uint64_t a1)
{
  uint64_t v2 = a1 + 328;
  uint64_t v3 = *(void *)(a1 + 352);
  if (v3 != v2)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    uint64_t v4 = a1 + 296;
    uint64_t v5 = *(void *)(a1 + 320);
    if (v5 != a1 + 296) {
      goto LABEL_5;
    }
LABEL_8:
    (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
    goto LABEL_9;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  uint64_t v4 = a1 + 296;
  uint64_t v5 = *(void *)(a1 + 320);
  if (v5 == a1 + 296) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
  }
LABEL_9:
  sub_1643B60(a1 + 192);

  return sub_13521E4(a1);
}

uint64_t sub_10D62D8(uint64_t a1)
{
  *(void *)a1 = off_243F9B0;
  *(void *)(a1 + 8) = off_243F9F8;
  *(void *)(a1 + 16) = off_243FA20;
  *(void *)(a1 + 24) = off_243FA48;
  *(void *)(a1 + 32) = off_243FA70;
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 87) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    operator delete(*(void **)(a1 + 64));
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
    if (!v2) {
      return a1;
    }
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2) {
    return a1;
  }
LABEL_7:
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_10D6420(uint64_t a1)
{
  *(void *)a1 = off_243F9B0;
  *(void *)(a1 + 8) = off_243F9F8;
  *(void *)(a1 + 16) = off_243FA20;
  *(void *)(a1 + 24) = off_243FA48;
  *(void *)(a1 + 32) = off_243FA70;
  if (*(char *)(a1 + 111) < 0)
  {
    operator delete(*(void **)(a1 + 88));
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
      if (!v2) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 64));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2) {
    goto LABEL_9;
  }
LABEL_7:
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
LABEL_9:

  operator delete();
}

void sub_10D657C(uint64_t a1)
{
  *(void *)(a1 - 8) = off_243F9B0;
  *(void *)a1 = off_243F9F8;
  *(void *)(a1 + 8) = off_243FA20;
  *(void *)(a1 + 16) = off_243FA48;
  *(void *)(a1 + 24) = off_243FA70;
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 79) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    operator delete(*(void **)(a1 + 56));
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v2) {
      return;
    }
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2) {
    return;
  }
LABEL_7:
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_10D66BC(uint64_t a1)
{
  *(void *)(a1 - 8) = off_243F9B0;
  *(void *)a1 = off_243F9F8;
  *(void *)(a1 + 8) = off_243FA20;
  *(void *)(a1 + 16) = off_243FA48;
  *(void *)(a1 + 24) = off_243FA70;
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
      if (!v2) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2) {
    goto LABEL_9;
  }
LABEL_7:
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
LABEL_9:

  operator delete();
}

void sub_10D6818(uint64_t a1)
{
  *(void *)(a1 - 16) = off_243F9B0;
  *(void *)(a1 - 8) = off_243F9F8;
  *(void *)a1 = off_243FA20;
  *(void *)(a1 + 8) = off_243FA48;
  *(void *)(a1 + 16) = off_243FA70;
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 71) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    operator delete(*(void **)(a1 + 48));
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v2) {
      return;
    }
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2) {
    return;
  }
LABEL_7:
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_10D6958(uint64_t a1)
{
  *(void *)(a1 - 16) = off_243F9B0;
  *(void *)(a1 - 8) = off_243F9F8;
  *(void *)a1 = off_243FA20;
  *(void *)(a1 + 8) = off_243FA48;
  *(void *)(a1 + 16) = off_243FA70;
  if (*(char *)(a1 + 95) < 0)
  {
    operator delete(*(void **)(a1 + 72));
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
      if (!v2) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 48));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2) {
    goto LABEL_9;
  }
LABEL_7:
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
LABEL_9:

  operator delete();
}

void sub_10D6AB4(uint64_t a1)
{
  *(void *)(a1 - 24) = off_243F9B0;
  *(void *)(a1 - 16) = off_243F9F8;
  *(void *)(a1 - 8) = off_243FA20;
  *(void *)a1 = off_243FA48;
  *(void *)(a1 + 8) = off_243FA70;
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    operator delete(*(void **)(a1 + 40));
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v2) {
      return;
    }
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2) {
    return;
  }
LABEL_7:
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_10D6BF4(uint64_t a1)
{
  *(void *)(a1 - 24) = off_243F9B0;
  *(void *)(a1 - 16) = off_243F9F8;
  *(void *)(a1 - 8) = off_243FA20;
  *(void *)a1 = off_243FA48;
  *(void *)(a1 + 8) = off_243FA70;
  if (*(char *)(a1 + 87) < 0)
  {
    operator delete(*(void **)(a1 + 64));
    if ((*(char *)(a1 + 63) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (!v2) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 63) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 40));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2) {
    goto LABEL_9;
  }
LABEL_7:
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
LABEL_9:

  operator delete();
}

void sub_10D6D50(uint64_t a1)
{
  *(void *)(a1 - 32) = off_243F9B0;
  *(void *)(a1 - 24) = off_243F9F8;
  *(void *)(a1 - 16) = off_243FA20;
  *(void *)(a1 - 8) = off_243FA48;
  *(void *)a1 = off_243FA70;
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    operator delete(*(void **)(a1 + 32));
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
    if (!v2) {
      return;
    }
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v2) {
    return;
  }
LABEL_7:
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_10D6E90(uint64_t a1)
{
  *(void *)(a1 - 32) = off_243F9B0;
  *(void *)(a1 - 24) = off_243F9F8;
  *(void *)(a1 - 16) = off_243FA20;
  *(void *)(a1 - 8) = off_243FA48;
  *(void *)a1 = off_243FA70;
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v2) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 32));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v2) {
    goto LABEL_9;
  }
LABEL_7:
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
LABEL_9:

  operator delete();
}

void sub_10D6FEC(uint64_t a1, char **a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_76C8C(a1, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4));
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    while (1)
    {
      int v7 = v4[23];
      if (v7 >= 0) {
        int v8 = v4;
      }
      else {
        int v8 = *(char **)v4;
      }
      if (v7 >= 0) {
        unint64_t v9 = v4[23];
      }
      else {
        unint64_t v9 = *((void *)v4 + 1);
      }
      if (v9 >= 0x7FFFFFFFFFFFFFF8) {
        sub_188D690();
      }
      if (v9 >= 0x17)
      {
        uint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v9 | 7) != 0x17) {
          uint64_t v11 = v9 | 7;
        }
        uint64_t v12 = v11 + 1;
        uint64_t v10 = (long long *)operator new(v11 + 1);
        *((void *)&v27 + 1) = v9;
        int64_t v28 = v12 | 0x8000000000000000;
        *(void *)&long long v27 = v10;
        if (v9 >= 0x20 && (unint64_t)((char *)v10 - v8) >= 0x20)
        {
          char v13 = &v8[v9 & 0xFFFFFFFFFFFFFFE0];
          char v14 = (long long *)((char *)v10 + (v9 & 0xFFFFFFFFFFFFFFE0));
          char v15 = v10 + 1;
          long long v16 = (long long *)(v8 + 16);
          unint64_t v17 = v9 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v18 = *v16;
            *(v15 - 1) = *(v16 - 1);
            *char v15 = v18;
            v15 += 2;
            v16 += 2;
            v17 -= 32;
          }
          while (v17);
          if (v9 == (v9 & 0x7FFFFFFFFFFFFFE0)) {
            goto LABEL_25;
          }
          goto LABEL_24;
        }
      }
      else
      {
        HIBYTE(v28) = v9;
        if (!v9)
        {
          LOBYTE(v27) = 0;
          *(_OWORD *)char v23 = v27;
          int64_t v24 = v28;
          if (v4[47] < 0) {
            goto LABEL_32;
          }
          goto LABEL_30;
        }
        uint64_t v10 = &v27;
      }
      char v13 = v8;
      char v14 = v10;
      do
      {
LABEL_24:
        char v19 = *v13++;
        *(unsigned char *)char v14 = v19;
        char v14 = (long long *)((char *)v14 + 1);
      }
      while (v13 != &v8[v9]);
LABEL_25:
      *(unsigned char *)char v14 = 0;
      if (v28 >= 0) {
        uint64_t v20 = &v27;
      }
      else {
        uint64_t v20 = (long long *)v27;
      }
      do
      {
        *(unsigned char *)uint64_t v20 = __tolower(*v8);
        uint64_t v20 = (long long *)((char *)v20 + 1);
        ++v8;
        --v9;
      }
      while (v9);
      *(_OWORD *)char v23 = v27;
      int64_t v24 = v28;
      if (v4[47] < 0)
      {
LABEL_32:
        sub_4200(&__p, *((void **)v4 + 3), *((void *)v4 + 4));
        goto LABEL_33;
      }
LABEL_30:
      long long v21 = *(_OWORD *)(v4 + 24);
      uint64_t v26 = *((void *)v4 + 5);
      long long __p = v21;
LABEL_33:
      uint64_t v22 = sub_10D824C((long long **)a1, v6, (uint64_t)v23);
      if (SHIBYTE(v26) < 0)
      {
        operator delete((void *)__p);
        if ((SHIBYTE(v24) & 0x80000000) == 0) {
          goto LABEL_4;
        }
LABEL_35:
        operator delete(v23[0]);
        uint64_t v6 = (uint64_t)(v22 + 3);
        v4 += 48;
        if (v4 == v5) {
          return;
        }
      }
      else
      {
        if (SHIBYTE(v24) < 0) {
          goto LABEL_35;
        }
LABEL_4:
        uint64_t v6 = (uint64_t)(v22 + 3);
        v4 += 48;
        if (v4 == v5) {
          return;
        }
      }
    }
  }
}

void sub_10D7248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  long long v29 = (void **)*v27;
  if (!*v27) {
LABEL_11:
  }
    _Unwind_Resume(exception_object);
  double v30 = (void **)v27[1];
  long long v31 = *v27;
  if (v30 == v29)
  {
LABEL_10:
    v27[1] = v29;
    operator delete(v31);
    goto LABEL_11;
  }
  while (1)
  {
    if (*((char *)v30 - 1) < 0)
    {
      operator delete(*(v30 - 3));
      if ((*((char *)v30 - 25) & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_8:
      operator delete(*(v30 - 6));
      v30 -= 6;
      if (v30 == v29)
      {
LABEL_9:
        long long v31 = *v27;
        goto LABEL_10;
      }
    }
    else
    {
      if (*((char *)v30 - 25) < 0) {
        goto LABEL_8;
      }
LABEL_5:
      v30 -= 6;
      if (v30 == v29) {
        goto LABEL_9;
      }
    }
  }
}

uint64_t sub_10D7308(int a1)
{
  uint64_t result = sub_723EC(1u);
  if (result)
  {
    sub_6BAC((uint64_t)v11);
    uint64_t v3 = sub_188FC78(v11, (uint64_t)"Stopped processing request of type ", 35);
    uint64_t v4 = sub_16422A0(a1);
    int v5 = *((char *)v4 + 23);
    if (v5 >= 0) {
      uint64_t v6 = (uint64_t)v4;
    }
    else {
      uint64_t v6 = *v4;
    }
    if (v5 >= 0) {
      uint64_t v7 = *((unsigned __int8 *)v4 + 23);
    }
    else {
      uint64_t v7 = v4[1];
    }
    int v8 = sub_188FC78(v3, v6, v7);
    sub_188FC78(v8, (uint64_t)", as it is disabled via the offline routing service configuration.", 66);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v10 < 0) {
      operator delete(__p);
    }
    if (v12 < 0) {
      operator delete((void *)v11[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return std::ios::~ios();
  }
  return result;
}

void sub_10D74A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10D74F0(int a1)
{
  uint64_t result = sub_723EC(3u);
  if (result)
  {
    sub_6BAC((uint64_t)v11);
    uint64_t v3 = sub_188FC78(v11, (uint64_t)"Stopped processing request of type ", 35);
    uint64_t v4 = sub_16422A0(a1);
    int v5 = *((char *)v4 + 23);
    if (v5 >= 0) {
      uint64_t v6 = (uint64_t)v4;
    }
    else {
      uint64_t v6 = *v4;
    }
    if (v5 >= 0) {
      uint64_t v7 = *((unsigned __int8 *)v4 + 23);
    }
    else {
      uint64_t v7 = v4[1];
    }
    int v8 = sub_188FC78(v3, v6, v7);
    sub_188FC78(v8, (uint64_t)", as the downloaded data is not compatible with the offline routing service.", 76);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (v10 < 0) {
      operator delete(__p);
    }
    if (v12 < 0) {
      operator delete((void *)v11[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return std::ios::~ios();
  }
  return result;
}

void sub_10D768C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_10D76D8()
{
}

void sub_10D7700()
{
}

void sub_10D7E54(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x737]) < 0) {
    operator delete((void *)STACK[0x720]);
  }
  sub_111ECAC((uint64_t)&STACK[0x738]);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_10D8024(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243FB68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10D8044(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243FB68;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10D8098(uint64_t result)
{
  if (*(unsigned char *)(result + 2336)) {
    *(unsigned char *)(result + 2336) = 0;
  }
  return result;
}

void sub_10D80AC(uint64_t a1, uint64_t a2, long long **a3)
{
  uint64_t v15 = 0;
  long long v13 = 0u;
  *(_OWORD *)char v14 = 0u;
  *(_OWORD *)uint64_t v11 = 0u;
  *(_OWORD *)char v12 = 0u;
  char v10 = 0;
  LOBYTE(__p) = 0;
  uint64_t v7 = 0;
  int v8 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  sub_29DC44(a2, a3, (long long *)v11, &__p, &v7, 0, (uint64_t)&v5, 1);
  uint64_t v3 = v6;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = v8;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_7:
      if ((SHIBYTE(v15) & 0x80000000) == 0) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete((void *)__p);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_8:
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(v14[0]);
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
LABEL_9:
    if ((SHIBYTE(v12[0]) & 0x80000000) == 0) {
      return;
    }
LABEL_15:
    operator delete(v11[0]);
    return;
  }
LABEL_14:
  operator delete(v12[1]);
  if (SHIBYTE(v12[0]) < 0) {
    goto LABEL_15;
  }
}

void sub_10D8218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_29D7B0((uint64_t)&a20);
  _Unwind_Resume(a1);
}

long long *sub_10D824C(long long **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 48;
  int v8 = &(*a1)[3 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v5) >> 4) + 1;
    if (v26 > 0x555555555555555) {
      sub_2E00();
    }
    unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v5) >> 4);
    if (2 * v27 > v26) {
      unint64_t v26 = 2 * v27;
    }
    if (v27 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v28 = 0x555555555555555;
    }
    else {
      unint64_t v28 = v26;
    }
    uint64_t v54 = a1 + 2;
    if (v28)
    {
      if (v28 > 0x555555555555555) {
        sub_188D718();
      }
      long long v29 = (long long *)operator new(48 * v28);
    }
    else
    {
      long long v29 = 0;
    }
    unint64_t v50 = v29;
    long long v51 = &v29[3 * v7];
    uint64_t v52 = v51;
    std::string v53 = &v29[3 * v28];
    sub_294A40(&v50, (long long *)a3);
    long long v36 = v51;
    uint64_t v37 = *a1;
    int v38 = v51;
    if (*a1 != v8)
    {
      std::string::size_type v39 = v51;
      long long v40 = v8;
      do
      {
        int v38 = v39 - 3;
        long long v41 = *(v40 - 3);
        *((void *)v39 - 4) = *((void *)v40 - 4);
        *(v39 - 3) = v41;
        *((void *)v40 - 5) = 0;
        *((void *)v40 - 4) = 0;
        *((void *)v40 - 6) = 0;
        long long v42 = *(long long *)((char *)v40 - 24);
        *((void *)v39 - 1) = *((void *)v40 - 1);
        *(long long *)((char *)v39 - 24) = v42;
        *((void *)v40 - 2) = 0;
        *((void *)v40 - 1) = 0;
        *((void *)v40 - 3) = 0;
        v39 -= 3;
        v40 -= 3;
      }
      while (v40 != v37);
    }
    long long v51 = v38;
    int v43 = a1[1];
    std::string::size_type v44 = v52;
    if (v43 != v8)
    {
      do
      {
        long long v45 = *v8;
        *((void *)v44 + 2) = *((void *)v8 + 2);
        long long *v44 = v45;
        *((void *)v8 + 1) = 0;
        *((void *)v8 + 2) = 0;
        *(void *)int v8 = 0;
        long long v46 = *(long long *)((char *)v8 + 24);
        *((void *)v44 + 5) = *((void *)v8 + 5);
        *(long long *)((char *)v44 + 24) = v46;
        *((void *)v8 + 4) = 0;
        *((void *)v8 + 5) = 0;
        *((void *)v8 + 3) = 0;
        v44 += 3;
        v8 += 3;
      }
      while (v8 != v43);
      int v38 = v51;
      int v8 = a1[1];
    }
    uint64_t v47 = *a1;
    *a1 = v38;
    a1[1] = v44;
    long long v48 = a1[2];
    a1[2] = v53;
    uint64_t v52 = v8;
    std::string v53 = v48;
    unint64_t v50 = v47;
    long long v51 = v47;
    if (v8 == v47)
    {
      if (!v8) {
        return v36;
      }
      goto LABEL_36;
    }
    while (1)
    {
      uint64_t v52 = v8 - 3;
      if (*((char *)v8 - 1) < 0)
      {
        operator delete(*((void **)v8 - 3));
        if (*((char *)v8 - 25) < 0) {
LABEL_44:
        }
          operator delete(*((void **)v8 - 6));
      }
      else if (*((char *)v8 - 25) < 0)
      {
        goto LABEL_44;
      }
      int v8 = v52;
      if (v52 == v47)
      {
        int v8 = v50;
        if (!v50) {
          return v36;
        }
LABEL_36:
        operator delete(v8);
        return v36;
      }
    }
  }
  if (v8 == (long long *)v6)
  {
    long long v33 = *(_OWORD *)a3;
    *((void *)v8 + 2) = *(void *)(a3 + 16);
    *int v8 = v33;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    long long v34 = &v5[3 * v7];
    long long v35 = *(_OWORD *)(a3 + 24);
    *((void *)v34 + 5) = *(void *)(a3 + 40);
    *(long long *)((char *)v34 + 24) = v35;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 24) = 0;
    a1[1] = v8 + 3;
  }
  else
  {
    char v10 = v8 + 3;
    unint64_t v11 = v6 - 48;
    char v12 = a1[1];
    if (v6 >= 0x30)
    {
      do
      {
        long long v13 = *(_OWORD *)v11;
        *((void *)v12 + 2) = *(void *)(v11 + 16);
        *char v12 = v13;
        *(void *)(v11 + 8) = 0;
        *(void *)(v11 + 16) = 0;
        *(void *)unint64_t v11 = 0;
        long long v14 = *(_OWORD *)(v11 + 24);
        *((void *)v12 + 5) = *(void *)(v11 + 40);
        *(long long *)((char *)v12 + 24) = v14;
        *(void *)(v11 + 32) = 0;
        *(void *)(v11 + 40) = 0;
        *(void *)(v11 + 24) = 0;
        v12 += 3;
        v11 += 48;
      }
      while (v11 < v6);
    }
    a1[1] = v12;
    if ((long long *)v6 != v10)
    {
      unint64_t v15 = 0;
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v10) >> 4);
      uint64_t v17 = -48 * v16;
      long long v18 = &v5[3 * v7 + 3 * v16];
      do
      {
        unint64_t v21 = v6 + v15;
        uint64_t v22 = (void **)(v6 + v15 - 48);
        if (*(char *)(v6 + v15 - 25) < 0) {
          operator delete(*v22);
        }
        char v23 = &v18[v15 / 0x10 - 3];
        long long v24 = *v23;
        *(void *)(v6 + v15 - 32) = *(void *)&v18[v15 / 0x10 - 2];
        *(_OWORD *)uint64_t v22 = v24;
        *((unsigned char *)&v18[v15 / 0x10 - 1] - 9) = 0;
        *(unsigned char *)char v23 = 0;
        char v25 = (void **)(v21 - 24);
        if (*(char *)(v21 - 1) < 0) {
          operator delete(*v25);
        }
        char v19 = &v18[v15 / 0x10];
        long long v20 = *(long long *)((char *)&v18[v15 / 0x10 - 1] - 8);
        *(void *)(v21 - 8) = *((void *)&v18[v15 / 0x10 - 1] + 1);
        *(_OWORD *)char v25 = v20;
        *((unsigned char *)v19 - 1) = 0;
        *((unsigned char *)v19 - 24) = 0;
        v15 -= 48;
      }
      while (v17 != v15);
    }
    if (*((char *)v8 + 23) < 0) {
      operator delete(*(void **)v8);
    }
    long long v30 = *(_OWORD *)a3;
    *((void *)v8 + 2) = *(void *)(a3 + 16);
    *int v8 = v30;
    *(unsigned char *)(a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
    long long v31 = (void **)&v5[3 * v7 + 1] + 1;
    if (*((char *)v8 + 47) < 0) {
      operator delete(*v31);
    }
    long long v32 = *(_OWORD *)(a3 + 24);
    *((void *)&v5[3 * v7 + 2] + 1) = *(void *)(a3 + 40);
    *(_OWORD *)long long v31 = v32;
    *(unsigned char *)(a3 + 47) = 0;
    *(unsigned char *)(a3 + 24) = 0;
  }
  return v8;
}

void sub_10D8674(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_75890((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10D8688(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243FBB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10D86A8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243FBB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10D86FC(uint64_t a1)
{
  return sub_373C88(a1 + 24);
}

void *sub_10D8708(void *a1)
{
  uint64_t v2 = a1 + 14;
  uint64_t v3 = (void *)a1[17];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    uint64_t v4 = a1 + 10;
    uint64_t v5 = (void *)a1[13];
    if (v5 != a1 + 10) {
      goto LABEL_5;
    }
LABEL_10:
    (*(void (**)(void *))(*v4 + 32))(v4);
    unint64_t v6 = (std::__shared_weak_count *)a1[9];
    if (!v6) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v3) {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  uint64_t v4 = a1 + 10;
  uint64_t v5 = (void *)a1[13];
  if (v5 == a1 + 10) {
    goto LABEL_10;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  unint64_t v6 = (std::__shared_weak_count *)a1[9];
  if (!v6)
  {
LABEL_12:
    uint64_t v7 = (std::__shared_weak_count *)a1[7];
    if (!v7) {
      goto LABEL_16;
    }
    goto LABEL_13;
  }
LABEL_11:
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_12;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  uint64_t v7 = (std::__shared_weak_count *)a1[7];
  if (!v7) {
    goto LABEL_16;
  }
LABEL_13:
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_16:
  int v8 = (std::__shared_weak_count *)a1[5];
  if (!v8 || atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void *sub_10D88FC(void *a1)
{
  *a1 = off_243FC08;
  sub_10D8708(a1 + 1);
  return a1;
}

void sub_10D8940(void *a1)
{
  *a1 = off_243FC08;
  sub_10D8708(a1 + 1);

  operator delete();
}

void *sub_10D89A4(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 + 8);
  uint64_t v2 = operator new(0x98uLL);
  *uint64_t v2 = off_243FC08;
  sub_10D8DC8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_10D89F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10D8A0C(uint64_t a1, void *a2)
{
  *a2 = off_243FC08;
  return sub_10D8DC8((uint64_t)(a2 + 1), (long long *)(a1 + 8));
}

void *sub_10D8A38(uint64_t a1)
{
  return sub_10D8708((void *)(a1 + 8));
}

void sub_10D8A40(void *a1)
{
  sub_10D8708(a1 + 1);

  operator delete(a1);
}

void sub_10D8A7C(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 8);
  int v5 = *(_DWORD *)(a2 + 536);
  sub_72688(a1 + 16);
  sub_2ABE08(*(void *)(a1 + 40));
  sub_10D9070(v4, v5, (uint64_t)__src);
  sub_10DE1C4(*(void *)(a1 + 56), (uint64_t)__src);
  sub_71740(1, (uint64_t)__src, *(void *)(a1 + 72));
  uint64_t v6 = *(void *)&__src[24];
  if (*(void *)&__src[24])
  {
    uint64_t v7 = *(void *)&__src[32];
    int v8 = *(void **)&__src[24];
    if (*(void *)&__src[32] != *(void *)&__src[24])
    {
      do
      {
        if (*(char *)(v7 - 25) < 0) {
          operator delete(*(void **)(v7 - 48));
        }
        v7 -= 48;
      }
      while (v7 != v6);
      int v8 = *(void **)&__src[24];
    }
    *(void *)&__src[32] = v6;
    operator delete(v8);
  }
  if ((__src[23] & 0x80000000) != 0) {
    operator delete(*(void **)__src);
  }
  sub_707AC(*(void *)(a1 + 72));
  if (*(void *)(a1 + 112))
  {
    sub_C6B2B4((uint64_t)__src, a2);
    sub_1644770(v17, 0, 0);
    sub_C6B2B4((uint64_t)v15, (uint64_t)__src);
    sub_10D950C(&v16, (uint64_t)v17);
    sub_16449AC(v17);
    sub_162D64C(__src);
    uint64_t v9 = *(void *)(a1 + 112);
    if (!v9) {
      sub_29F82C();
    }
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v9 + 48))(v9, v15);
    sub_16449AC(&v16);
    sub_162D64C(v15);
  }
  if (*(void *)(a1 + 144))
  {
    sub_2ABE08(*(void *)(a1 + 40));
    uint64_t v10 = *(void *)(a1 + 56);
    int v11 = *(unsigned __int8 *)(v10 + 2312);
    if (__src[2296])
    {
      memcpy((void *)(v10 + 16), __src, 0x8F8uLL);
      if (v11)
      {
LABEL_19:
        uint64_t v13 = *(void *)(a1 + 56);
        *(_OWORD *)__src = *(_OWORD *)v13;
        if (*(unsigned char *)(v13 + 2312)) {
          memcpy(&__src[16], (const void *)(v13 + 16), 0x8F8uLL);
        }
        uint64_t v14 = *(void *)(a1 + 144);
        if (!v14) {
          sub_29F82C();
        }
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v14 + 48))(v14, __src);
        return;
      }
      char v12 = 1;
    }
    else
    {
      if (!*(unsigned char *)(v10 + 2312)) {
        goto LABEL_19;
      }
      char v12 = 0;
    }
    *(unsigned char *)(v10 + 2312) = v12;
    goto LABEL_19;
  }
}

void sub_10D8CE8(_Unwind_Exception *a1)
{
}

void sub_10D8CFC(_Unwind_Exception *a1)
{
  if (STACK[0x298]) {
    sub_20B022C((uint64_t)&STACK[0x280], STACK[0x298]);
  }
  sub_20B1E48((uint64_t)&STACK[0x280]);
  _Unwind_Resume(a1);
}

uint64_t sub_10D8D4C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZN3msl21OfflineRoutingService13handleRequestERKN4maps7offline21ServiceRequestWrapperIN4geo317Direc"
                     "tionsRequestEEENSt3__18functionIFvNS2_22ServiceResponseWrapperINS4_18DirectionsResponseEEEEEENSA_IF"
                     "vNS_39OfflineRoutingServicePerformanceFiguresEEEERKNS9_6vectorINS9_4pairINS9_12basic_stringIcNS9_11"
                     "char_traitsIcEENS9_9allocatorIcEEEESQ_EENSO_ISR_EEEEENK3$_0clENS9_10shared_ptrINS_7routing18Routing"
                     "DataContextEEENSX_ISG_EEEUlONS_6common9ResponsesISC_EEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN3msl21OfflineRoutingService13handleRequestERKN4maps7offline21ServiceRequestWrapperIN4"
                                "geo317DirectionsRequestEEENSt3__18functionIFvNS2_22ServiceResponseWrapperINS4_18Directio"
                                "nsResponseEEEEEENSA_IFvNS_39OfflineRoutingServicePerformanceFiguresEEEERKNS9_6vectorINS9"
                                "_4pairINS9_12basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEESQ_EENSO_ISR_EEEEENK"
                                "3$_0clENS9_10shared_ptrINS_7routing18RoutingDataContextEEENSX_ISG_EEEUlONS_6common9ResponsesISC_EEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN3msl21OfflineRoutingService13handleRequestERKN4maps7offline21ServiceRequestWrapperIN4geo317DirectionsRequestEEENSt3__18functionIFvNS2_22ServiceResponseWrapperINS4_18DirectionsResponseEEEEEENSA_IFvNS_39OfflineRoutingServicePerformanceFiguresEEEERKNS9_6vectorINS9_4pairINS9_12basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEESQ_EENSO_ISR_EEEEENK3$_0clENS9_10shared_ptrINS_7routing18RoutingDataContextEEENSX_ISG_EEEUlONS_6common9ResponsesISC_EEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN3msl21OfflineRoutingService13handleRequestERKN4maps7offline21ServiceRequestWrapperIN4geo317DirectionsRequestEEENSt3__18functionIFvNS2_22ServiceResponseWrapperINS4_18DirectionsResponseEEEEEENSA_IFvNS_39OfflineRoutingServicePerformanceFiguresEEEERKNS9_6vectorINS9_4pairINS9_12basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEESQ_EENSO_ISR_EEEEENK3$_0clENS9_10shared_ptrINS_7routing18RoutingDataContextEEENSX_ISG_EEEUlONS_6common9ResponsesISC_EEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_10D8DBC()
{
}

uint64_t sub_10D8DC8(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_OWORD *)(a1 + 9) = *(long long *)((char *)a2 + 9);
  *(_OWORD *)a1 = v4;
  uint64_t v5 = *((void *)a2 + 5);
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(void *)(a1 + 40) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *((void *)a2 + 7);
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *((void *)a2 + 9);
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(void *)(a1 + 72) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = a1 + 80;
  uint64_t v9 = *((void *)a2 + 13);
  if (!v9) {
    goto LABEL_10;
  }
  if ((long long *)v9 != a2 + 5)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
LABEL_10:
    *(void *)(a1 + 104) = v9;
    goto LABEL_12;
  }
  *(void *)(a1 + 104) = v8;
  (*(void (**)(void, uint64_t))(**((void **)a2 + 13) + 24))(*((void *)a2 + 13), a1 + 80);
LABEL_12:
  uint64_t v10 = *((void *)a2 + 17);
  if (!v10)
  {
LABEL_15:
    *(void *)(a1 + 136) = v10;
    return a1;
  }
  if ((long long *)v10 != a2 + 7)
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
    goto LABEL_15;
  }
  *(void *)(a1 + 136) = a1 + 112;
  (*(void (**)(void))(**((void **)a2 + 17) + 24))(*((void *)a2 + 17));
  return a1;
}

void sub_10D8F44(_Unwind_Exception *a1)
{
  uint64_t v4 = v1[13];
  if (v4 == v2)
  {
    sub_20B1E6C(v2);
  }
  else if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)v1[9];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)v1[7];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)v1[5];
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10D9070(int a1, int a2, uint64_t a3)
{
  int v6 = *(unsigned __int8 *)(a3 + 2296);
  uint64_t result = sub_723EC(1u);
  if (v6)
  {
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v43);
    uint64_t v8 = sub_188FC78(v43, (uint64_t)"Completed ", 10);
    uint64_t v9 = sub_16422A0(a1);
    int v10 = *((char *)v9 + 23);
    if (v10 >= 0) {
      uint64_t v11 = (uint64_t)v9;
    }
    else {
      uint64_t v11 = *v9;
    }
    if (v10 >= 0) {
      uint64_t v12 = *((unsigned __int8 *)v9 + 23);
    }
    else {
      uint64_t v12 = v9[1];
    }
    uint64_t v13 = sub_188FC78(v8, v11, v12);
    uint64_t v14 = sub_188FC78(v13, (uint64_t)" with ", 6);
    unint64_t v15 = sub_144CF40(a2);
    int v16 = *((char *)v15 + 23);
    if (v16 >= 0) {
      uint64_t v17 = (uint64_t)v15;
    }
    else {
      uint64_t v17 = *v15;
    }
    if (v16 >= 0) {
      uint64_t v18 = *((unsigned __int8 *)v15 + 23);
    }
    else {
      uint64_t v18 = v15[1];
    }
    char v19 = sub_188FC78(v14, v17, v18);
    sub_188FC78(v19, (uint64_t)" in ", 4);
    long long v20 = (void *)std::ostream::operator<<();
    sub_188FC78(v20, (uint64_t)" ms; data access: ", 18);
    if (!*(unsigned char *)(a3 + 2296)) {
      goto LABEL_42;
    }
    sub_2F2644(a3);
    unint64_t v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)" non-empty and ", 15);
    if (!*(unsigned char *)(a3 + 2296)) {
      goto LABEL_42;
    }
    sub_2F23DC((double *)a3);
    uint64_t v22 = (void *)std::ostream::operator<<();
    sub_188FC78(v22, (uint64_t)" empty quad nodes, ", 19);
    if (!*(unsigned char *)(a3 + 2296)) {
      goto LABEL_42;
    }
    sub_2F2674((double *)a3);
    char v23 = (void *)std::ostream::operator<<();
    sub_188FC78(v23, (uint64_t)" MiB, ", 6);
    if (!*(unsigned char *)(a3 + 2296)
      || (sub_2F27BC((double *)a3),
          long long v24 = (void *)std::ostream::operator<<(),
          sub_188FC78(v24, (uint64_t)" MiB (< ", 8),
          !*(unsigned char *)(a3 + 2296))
      || (char v25 = (void *)std::ostream::operator<<(), sub_188FC78(v25, (uint64_t)" KiB), ", 7), !*(unsigned char *)(a3 + 2296)))
    {
LABEL_42:
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    unint64_t v26 = (void *)std::ostream::operator<<();
    sub_188FC78(v26, (uint64_t)" ms.", 4);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
  }
  else
  {
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v43);
    unint64_t v27 = sub_188FC78(v43, (uint64_t)"Completed ", 10);
    unint64_t v28 = sub_16422A0(a1);
    int v29 = *((char *)v28 + 23);
    if (v29 >= 0) {
      uint64_t v30 = (uint64_t)v28;
    }
    else {
      uint64_t v30 = *v28;
    }
    if (v29 >= 0) {
      uint64_t v31 = *((unsigned __int8 *)v28 + 23);
    }
    else {
      uint64_t v31 = v28[1];
    }
    long long v32 = sub_188FC78(v27, v30, v31);
    long long v33 = sub_188FC78(v32, (uint64_t)" request with ", 14);
    long long v34 = sub_144CF40(a2);
    int v35 = *((char *)v34 + 23);
    if (v35 >= 0) {
      uint64_t v36 = (uint64_t)v34;
    }
    else {
      uint64_t v36 = *v34;
    }
    if (v35 >= 0) {
      uint64_t v37 = *((unsigned __int8 *)v34 + 23);
    }
    else {
      uint64_t v37 = v34[1];
    }
    int v38 = sub_188FC78(v33, v36, v37);
    sub_188FC78(v38, (uint64_t)" in ", 4);
    std::string::size_type v39 = (void *)std::ostream::operator<<();
    sub_188FC78(v39, (uint64_t)" ms.", 4);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
  }
  if (v42 < 0) {
    operator delete(__p[0]);
  }
  if (v44 < 0) {
    operator delete((void *)v43[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_10D9494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

std::string *sub_10D950C(std::string *a1, uint64_t a2)
{
  sub_1644770(a1, 0, 0);
  if (a1 != (std::string *)a2)
  {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
    if ((size & 2) != 0)
    {
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v5 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
      if (size) {
        uint64_t v5 = (void *)*v5;
      }
    }
    uint64_t v6 = *(void *)(a2 + 8);
    if ((v6 & 2) != 0)
    {
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6) {
        uint64_t v7 = (void *)*v7;
      }
    }
    if (v5 == v7) {
      sub_1645020((uint64_t)a1, a2);
    }
    else {
      sub_1644FCC(a1, a2);
    }
  }
  return a1;
}

void sub_10D95AC()
{
}

void sub_10D95D4()
{
}

void sub_10D9D28(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x2A7]) < 0) {
    operator delete((void *)STACK[0x290]);
  }
  sub_111ECAC((uint64_t)&STACK[0x2A8]);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void *sub_10D9EF8(void *a1)
{
  uint64_t v2 = a1 + 14;
  unint64_t v3 = (void *)a1[17];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    uint64_t v4 = a1 + 10;
    uint64_t v5 = (void *)a1[13];
    if (v5 != a1 + 10) {
      goto LABEL_5;
    }
LABEL_10:
    (*(void (**)(void *))(*v4 + 32))(v4);
    uint64_t v6 = (std::__shared_weak_count *)a1[9];
    if (!v6) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v3) {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  uint64_t v4 = a1 + 10;
  uint64_t v5 = (void *)a1[13];
  if (v5 == a1 + 10) {
    goto LABEL_10;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[9];
  if (!v6)
  {
LABEL_12:
    uint64_t v7 = (std::__shared_weak_count *)a1[7];
    if (!v7) {
      goto LABEL_16;
    }
    goto LABEL_13;
  }
LABEL_11:
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_12;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  uint64_t v7 = (std::__shared_weak_count *)a1[7];
  if (!v7) {
    goto LABEL_16;
  }
LABEL_13:
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_16:
  uint64_t v8 = (std::__shared_weak_count *)a1[5];
  if (!v8 || atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void *sub_10DA0EC(void *a1)
{
  *a1 = off_243FC98;
  sub_10D9EF8(a1 + 1);
  return a1;
}

void sub_10DA130(void *a1)
{
  *a1 = off_243FC98;
  sub_10D9EF8(a1 + 1);

  operator delete();
}

void *sub_10DA194(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 + 8);
  uint64_t v2 = operator new(0x98uLL);
  *uint64_t v2 = off_243FC98;
  sub_10DA5B8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_10DA1E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10DA1FC(uint64_t a1, void *a2)
{
  *a2 = off_243FC98;
  return sub_10DA5B8((uint64_t)(a2 + 1), (long long *)(a1 + 8));
}

void *sub_10DA228(uint64_t a1)
{
  return sub_10D9EF8((void *)(a1 + 8));
}

void sub_10DA230(void *a1)
{
  sub_10D9EF8(a1 + 1);

  operator delete(a1);
}

void sub_10DA26C(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 8);
  int v5 = *(_DWORD *)(a2 + 160);
  sub_72688(a1 + 16);
  sub_2ABE08(*(void *)(a1 + 40));
  sub_10D9070(v4, v5, (uint64_t)__src);
  sub_10DE1C4(*(void *)(a1 + 56), (uint64_t)__src);
  sub_71740(1, (uint64_t)__src, *(void *)(a1 + 72));
  uint64_t v6 = *(void *)&__src[24];
  if (*(void *)&__src[24])
  {
    uint64_t v7 = *(void *)&__src[32];
    uint64_t v8 = *(void **)&__src[24];
    if (*(void *)&__src[32] != *(void *)&__src[24])
    {
      do
      {
        if (*(char *)(v7 - 25) < 0) {
          operator delete(*(void **)(v7 - 48));
        }
        v7 -= 48;
      }
      while (v7 != v6);
      uint64_t v8 = *(void **)&__src[24];
    }
    *(void *)&__src[32] = v6;
    operator delete(v8);
  }
  if ((__src[23] & 0x80000000) != 0) {
    operator delete(*(void **)__src);
  }
  sub_707AC(*(void *)(a1 + 72));
  if (*(void *)(a1 + 112))
  {
    sub_C5EEF0((uint64_t)__src, a2);
    sub_1644770(v17, 0, 0);
    sub_C5EEF0((uint64_t)v15, (uint64_t)__src);
    sub_10D950C(&v16, (uint64_t)v17);
    sub_16449AC(v17);
    sub_13F22FC(__src);
    uint64_t v9 = *(void *)(a1 + 112);
    if (!v9) {
      sub_29F82C();
    }
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v9 + 48))(v9, v15);
    sub_16449AC(&v16);
    sub_13F22FC(v15);
  }
  if (*(void *)(a1 + 144))
  {
    sub_2ABE08(*(void *)(a1 + 40));
    uint64_t v10 = *(void *)(a1 + 56);
    int v11 = *(unsigned __int8 *)(v10 + 2312);
    if (__src[2296])
    {
      memcpy((void *)(v10 + 16), __src, 0x8F8uLL);
      if (v11)
      {
LABEL_19:
        uint64_t v13 = *(void *)(a1 + 56);
        *(_OWORD *)__src = *(_OWORD *)v13;
        if (*(unsigned char *)(v13 + 2312)) {
          memcpy(&__src[16], (const void *)(v13 + 16), 0x8F8uLL);
        }
        uint64_t v14 = *(void *)(a1 + 144);
        if (!v14) {
          sub_29F82C();
        }
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v14 + 48))(v14, __src);
        return;
      }
      char v12 = 1;
    }
    else
    {
      if (!*(unsigned char *)(v10 + 2312)) {
        goto LABEL_19;
      }
      char v12 = 0;
    }
    *(unsigned char *)(v10 + 2312) = v12;
    goto LABEL_19;
  }
}

void sub_10DA4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_10DA4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  if (a44) {
    sub_20B022C((uint64_t)&a41, a44);
  }
  sub_20B1E48((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t sub_10DA53C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZN3msl21OfflineRoutingService13handleRequestERKN4maps7offline21ServiceRequestWrapperIN4geo310ETARe"
                     "questEEENSt3__18functionIFvNS2_22ServiceResponseWrapperINS4_11ETAResponseEEEEEENSA_IFvNS_39OfflineR"
                     "outingServicePerformanceFiguresEEEERKNS9_6vectorINS9_4pairINS9_12basic_stringIcNS9_11char_traitsIcE"
                     "ENS9_9allocatorIcEEEESQ_EENSO_ISR_EEEEENK3$_0clENS9_10shared_ptrINS_7routing18RoutingDataContextEEE"
                     "NSX_ISG_EEEUlONS_6common9ResponsesISC_EEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN3msl21OfflineRoutingService13handleRequestERKN4maps7offline21ServiceRequestWrapperIN4"
                                "geo310ETARequestEEENSt3__18functionIFvNS2_22ServiceResponseWrapperINS4_11ETAResponseEEEE"
                                "EENSA_IFvNS_39OfflineRoutingServicePerformanceFiguresEEEERKNS9_6vectorINS9_4pairINS9_12b"
                                "asic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEESQ_EENSO_ISR_EEEEENK3$_0clENS9_10s"
                                "hared_ptrINS_7routing18RoutingDataContextEEENSX_ISG_EEEUlONS_6common9ResponsesISC_EEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN3msl21OfflineRoutingService13handleRequestERKN4maps7offline21ServiceRequestWrapperIN4geo310ETARequestEEENSt3__18functionIFvNS2_22ServiceResponseWrapperINS4_11ETAResponseEEEEEENSA_IFvNS_39OfflineRoutingServicePerformanceFiguresEEEERKNS9_6vectorINS9_4pairINS9_12basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEESQ_EENSO_ISR_EEEEENK3$_0clENS9_10shared_ptrINS_7routing18RoutingDataContextEEENSX_ISG_EEEUlONS_6common9ResponsesISC_EEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN3msl21OfflineRoutingService13handleRequestERKN4maps7offline21ServiceRequestWrapperIN4geo310ETARequestEEENSt3__18functionIFvNS2_22ServiceResponseWrapperINS4_11ETAResponseEEEEEENSA_IFvNS_39OfflineRoutingServicePerformanceFiguresEEEERKNS9_6vectorINS9_4pairINS9_12basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEESQ_EENSO_ISR_EEEEENK3$_0clENS9_10shared_ptrINS_7routing18RoutingDataContextEEENSX_ISG_EEEUlONS_6common9ResponsesISC_EEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_10DA5AC()
{
}

uint64_t sub_10DA5B8(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_OWORD *)(a1 + 9) = *(long long *)((char *)a2 + 9);
  *(_OWORD *)a1 = v4;
  uint64_t v5 = *((void *)a2 + 5);
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(void *)(a1 + 40) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *((void *)a2 + 7);
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *((void *)a2 + 9);
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(void *)(a1 + 72) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = a1 + 80;
  uint64_t v9 = *((void *)a2 + 13);
  if (!v9) {
    goto LABEL_10;
  }
  if ((long long *)v9 != a2 + 5)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
LABEL_10:
    *(void *)(a1 + 104) = v9;
    goto LABEL_12;
  }
  *(void *)(a1 + 104) = v8;
  (*(void (**)(void, uint64_t))(**((void **)a2 + 13) + 24))(*((void *)a2 + 13), a1 + 80);
LABEL_12:
  uint64_t v10 = *((void *)a2 + 17);
  if (!v10)
  {
LABEL_15:
    *(void *)(a1 + 136) = v10;
    return a1;
  }
  if ((long long *)v10 != a2 + 7)
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
    goto LABEL_15;
  }
  *(void *)(a1 + 136) = a1 + 112;
  (*(void (**)(void))(**((void **)a2 + 17) + 24))(*((void *)a2 + 17));
  return a1;
}

void sub_10DA734(_Unwind_Exception *a1)
{
  uint64_t v4 = v1[13];
  if (v4 == v2)
  {
    sub_20B1E90(v2);
  }
  else if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)v1[9];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)v1[7];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)v1[5];
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  _Unwind_Resume(a1);
}

void sub_10DA860()
{
}

void sub_10DA888()
{
}

void sub_10DAFDC(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x3A7]) < 0) {
    operator delete((void *)STACK[0x390]);
  }
  sub_111ECAC((uint64_t)&STACK[0x3A8]);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void *sub_10DB1AC(void *a1)
{
  uint64_t v2 = a1 + 14;
  unint64_t v3 = (void *)a1[17];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    uint64_t v4 = a1 + 10;
    uint64_t v5 = (void *)a1[13];
    if (v5 != a1 + 10) {
      goto LABEL_5;
    }
LABEL_10:
    (*(void (**)(void *))(*v4 + 32))(v4);
    uint64_t v6 = (std::__shared_weak_count *)a1[9];
    if (!v6) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v3) {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  uint64_t v4 = a1 + 10;
  uint64_t v5 = (void *)a1[13];
  if (v5 == a1 + 10) {
    goto LABEL_10;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[9];
  if (!v6)
  {
LABEL_12:
    uint64_t v7 = (std::__shared_weak_count *)a1[7];
    if (!v7) {
      goto LABEL_16;
    }
    goto LABEL_13;
  }
LABEL_11:
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_12;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  uint64_t v7 = (std::__shared_weak_count *)a1[7];
  if (!v7) {
    goto LABEL_16;
  }
LABEL_13:
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_16:
  uint64_t v8 = (std::__shared_weak_count *)a1[5];
  if (!v8 || atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void *sub_10DB3A0(void *a1)
{
  *a1 = off_243FD28;
  sub_10DB1AC(a1 + 1);
  return a1;
}

void sub_10DB3E4(void *a1)
{
  *a1 = off_243FD28;
  sub_10DB1AC(a1 + 1);

  operator delete();
}

void *sub_10DB448(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 + 8);
  uint64_t v2 = operator new(0x98uLL);
  *uint64_t v2 = off_243FD28;
  sub_10DB86C((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_10DB49C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10DB4B0(uint64_t a1, void *a2)
{
  *a2 = off_243FD28;
  return sub_10DB86C((uint64_t)(a2 + 1), (long long *)(a1 + 8));
}

void *sub_10DB4DC(uint64_t a1)
{
  return sub_10DB1AC((void *)(a1 + 8));
}

void sub_10DB4E4(void *a1)
{
  sub_10DB1AC(a1 + 1);

  operator delete(a1);
}

void sub_10DB520(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 8);
  int v5 = *(_DWORD *)(a2 + 248);
  sub_72688(a1 + 16);
  sub_2ABE08(*(void *)(a1 + 40));
  sub_10D9070(v4, v5, (uint64_t)__src);
  sub_10DE1C4(*(void *)(a1 + 56), (uint64_t)__src);
  sub_71740(1, (uint64_t)__src, *(void *)(a1 + 72));
  uint64_t v6 = *(void *)&__src[24];
  if (*(void *)&__src[24])
  {
    uint64_t v7 = *(void *)&__src[32];
    uint64_t v8 = *(void **)&__src[24];
    if (*(void *)&__src[32] != *(void *)&__src[24])
    {
      do
      {
        if (*(char *)(v7 - 25) < 0) {
          operator delete(*(void **)(v7 - 48));
        }
        v7 -= 48;
      }
      while (v7 != v6);
      uint64_t v8 = *(void **)&__src[24];
    }
    *(void *)&__src[32] = v6;
    operator delete(v8);
  }
  if ((__src[23] & 0x80000000) != 0) {
    operator delete(*(void **)__src);
  }
  sub_707AC(*(void *)(a1 + 72));
  if (*(void *)(a1 + 112))
  {
    sub_C86114((uint64_t)__src, a2);
    sub_1644770(v17, 0, 0);
    sub_C86114((uint64_t)v15, (uint64_t)__src);
    sub_10D950C(&v16, (uint64_t)v17);
    sub_16449AC(v17);
    sub_13E6DAC(__src);
    uint64_t v9 = *(void *)(a1 + 112);
    if (!v9) {
      sub_29F82C();
    }
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v9 + 48))(v9, v15);
    sub_16449AC(&v16);
    sub_13E6DAC(v15);
  }
  if (*(void *)(a1 + 144))
  {
    sub_2ABE08(*(void *)(a1 + 40));
    uint64_t v10 = *(void *)(a1 + 56);
    int v11 = *(unsigned __int8 *)(v10 + 2312);
    if (__src[2296])
    {
      memcpy((void *)(v10 + 16), __src, 0x8F8uLL);
      if (v11)
      {
LABEL_19:
        uint64_t v13 = *(void *)(a1 + 56);
        *(_OWORD *)__src = *(_OWORD *)v13;
        if (*(unsigned char *)(v13 + 2312)) {
          memcpy(&__src[16], (const void *)(v13 + 16), 0x8F8uLL);
        }
        uint64_t v14 = *(void *)(a1 + 144);
        if (!v14) {
          sub_29F82C();
        }
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v14 + 48))(v14, __src);
        return;
      }
      char v12 = 1;
    }
    else
    {
      if (!*(unsigned char *)(v10 + 2312)) {
        goto LABEL_19;
      }
      char v12 = 0;
    }
    *(unsigned char *)(v10 + 2312) = v12;
    goto LABEL_19;
  }
}

void sub_10DB78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

void sub_10DB7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  if (a54) {
    sub_20B022C((uint64_t)&a51, a54);
  }
  sub_20B1E48((uint64_t)&a51);
  _Unwind_Resume(a1);
}

uint64_t sub_10DB7F0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZN3msl21OfflineRoutingService13handleRequestERKN4maps7offline21ServiceRequestWrapperIN4geo323ETATr"
                     "afficUpdateRequestEEENSt3__18functionIFvNS2_22ServiceResponseWrapperINS4_24ETATrafficUpdateResponse"
                     "EEEEEENSA_IFvNS_39OfflineRoutingServicePerformanceFiguresEEEERKNS9_6vectorINS9_4pairINS9_12basic_st"
                     "ringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEESQ_EENSO_ISR_EEEEENK3$_0clENS9_10shared_ptrINS_7rout"
                     "ing18RoutingDataContextEEENSX_ISG_EEEUlONS_6common9ResponsesISC_EEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN3msl21OfflineRoutingService13handleRequestERKN4maps7offline21ServiceRequestWrapperIN4"
                                "geo323ETATrafficUpdateRequestEEENSt3__18functionIFvNS2_22ServiceResponseWrapperINS4_24ET"
                                "ATrafficUpdateResponseEEEEEENSA_IFvNS_39OfflineRoutingServicePerformanceFiguresEEEERKNS9"
                                "_6vectorINS9_4pairINS9_12basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEESQ_EENSO"
                                "_ISR_EEEEENK3$_0clENS9_10shared_ptrINS_7routing18RoutingDataContextEEENSX_ISG_EEEUlONS_6"
                                "common9ResponsesISC_EEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN3msl21OfflineRoutingService13handleRequestERKN4maps7offline21ServiceRequestWrapperIN4geo323ETATrafficUpdateRequestEEENSt3__18functionIFvNS2_22ServiceResponseWrapperINS4_24ETATrafficUpdateResponseEEEEEENSA_IFvNS_39OfflineRoutingServicePerformanceFiguresEEEERKNS9_6vectorINS9_4pairINS9_12basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEESQ_EENSO_ISR_EEEEENK3$_0clENS9_10shared_ptrINS_7routing18RoutingDataContextEEENSX_ISG_EEEUlONS_6common9ResponsesISC_EEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN3msl21OfflineRoutingService13handleRequestERKN4maps7offline21ServiceRequestWrapperIN4geo323ETATrafficUpdateRequestEEENSt3__18functionIFvNS2_22ServiceResponseWrapperINS4_24ETATrafficUpdateResponseEEEEEENSA_IFvNS_39OfflineRoutingServicePerformanceFiguresEEEERKNS9_6vectorINS9_4pairINS9_12basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEESQ_EENSO_ISR_EEEEENK3$_0clENS9_10shared_ptrINS_7routing18RoutingDataContextEEENSX_ISG_EEEUlONS_6common9ResponsesISC_EEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_10DB860()
{
}

uint64_t sub_10DB86C(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_OWORD *)(a1 + 9) = *(long long *)((char *)a2 + 9);
  *(_OWORD *)a1 = v4;
  uint64_t v5 = *((void *)a2 + 5);
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(void *)(a1 + 40) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *((void *)a2 + 7);
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *((void *)a2 + 9);
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(void *)(a1 + 72) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = a1 + 80;
  uint64_t v9 = *((void *)a2 + 13);
  if (!v9) {
    goto LABEL_10;
  }
  if ((long long *)v9 != a2 + 5)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
LABEL_10:
    *(void *)(a1 + 104) = v9;
    goto LABEL_12;
  }
  *(void *)(a1 + 104) = v8;
  (*(void (**)(void, uint64_t))(**((void **)a2 + 13) + 24))(*((void *)a2 + 13), a1 + 80);
LABEL_12:
  uint64_t v10 = *((void *)a2 + 17);
  if (!v10)
  {
LABEL_15:
    *(void *)(a1 + 136) = v10;
    return a1;
  }
  if ((long long *)v10 != a2 + 7)
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
    goto LABEL_15;
  }
  *(void *)(a1 + 136) = a1 + 112;
  (*(void (**)(void))(**((void **)a2 + 17) + 24))(*((void *)a2 + 17));
  return a1;
}

void sub_10DB9E8(_Unwind_Exception *a1)
{
  uint64_t v4 = v1[13];
  if (v4 == v2)
  {
    sub_20B1EB4(v2);
  }
  else if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)v1[9];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)v1[7];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)v1[5];
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  _Unwind_Resume(a1);
}

void sub_10DBB14()
{
}

void sub_10DBB3C()
{
}

void sub_10DC290(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x337]) < 0) {
    operator delete((void *)STACK[0x320]);
  }
  sub_111ECAC((uint64_t)&STACK[0x338]);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void *sub_10DC460(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void *sub_10DC4F0(void *a1)
{
  uint64_t v2 = a1 + 14;
  unint64_t v3 = (void *)a1[17];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    uint64_t v4 = a1 + 10;
    uint64_t v5 = (void *)a1[13];
    if (v5 != a1 + 10) {
      goto LABEL_5;
    }
LABEL_10:
    (*(void (**)(void *))(*v4 + 32))(v4);
    uint64_t v6 = (std::__shared_weak_count *)a1[9];
    if (!v6) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v3) {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  uint64_t v4 = a1 + 10;
  uint64_t v5 = (void *)a1[13];
  if (v5 == a1 + 10) {
    goto LABEL_10;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[9];
  if (!v6)
  {
LABEL_12:
    uint64_t v7 = (std::__shared_weak_count *)a1[7];
    if (!v7) {
      goto LABEL_16;
    }
    goto LABEL_13;
  }
LABEL_11:
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_12;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  uint64_t v7 = (std::__shared_weak_count *)a1[7];
  if (!v7) {
    goto LABEL_16;
  }
LABEL_13:
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_16:
  uint64_t v8 = (std::__shared_weak_count *)a1[5];
  if (!v8 || atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void *sub_10DC6E4(void *a1)
{
  *a1 = off_243FDB8;
  sub_10DC4F0(a1 + 1);
  return a1;
}

void sub_10DC728(void *a1)
{
  *a1 = off_243FDB8;
  sub_10DC4F0(a1 + 1);

  operator delete();
}

void *sub_10DC78C(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 + 8);
  uint64_t v2 = operator new(0x98uLL);
  *uint64_t v2 = off_243FDB8;
  sub_10DCBB0((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_10DC7E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10DC7F4(uint64_t a1, void *a2)
{
  *a2 = off_243FDB8;
  return sub_10DCBB0((uint64_t)(a2 + 1), (long long *)(a1 + 8));
}

void *sub_10DC820(uint64_t a1)
{
  return sub_10DC4F0((void *)(a1 + 8));
}

void sub_10DC828(void *a1)
{
  sub_10DC4F0(a1 + 1);

  operator delete(a1);
}

void sub_10DC864(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 8);
  int v5 = *(_DWORD *)(a2 + 208);
  sub_72688(a1 + 16);
  sub_2ABE08(*(void *)(a1 + 40));
  sub_10D9070(v4, v5, (uint64_t)__src);
  sub_10DE1C4(*(void *)(a1 + 56), (uint64_t)__src);
  sub_71740(1, (uint64_t)__src, *(void *)(a1 + 72));
  uint64_t v6 = *(void *)&__src[24];
  if (*(void *)&__src[24])
  {
    uint64_t v7 = *(void *)&__src[32];
    uint64_t v8 = *(void **)&__src[24];
    if (*(void *)&__src[32] != *(void *)&__src[24])
    {
      do
      {
        if (*(char *)(v7 - 25) < 0) {
          operator delete(*(void **)(v7 - 48));
        }
        v7 -= 48;
      }
      while (v7 != v6);
      uint64_t v8 = *(void **)&__src[24];
    }
    *(void *)&__src[32] = v6;
    operator delete(v8);
  }
  if ((__src[23] & 0x80000000) != 0) {
    operator delete(*(void **)__src);
  }
  sub_707AC(*(void *)(a1 + 72));
  if (*(void *)(a1 + 112))
  {
    sub_CB2BC8((uint64_t)__src, a2);
    sub_1644770(v17, 0, 0);
    sub_CB2BC8((uint64_t)v15, (uint64_t)__src);
    sub_10D950C(&v16, (uint64_t)v17);
    sub_16449AC(v17);
    sub_182E7B8(__src);
    uint64_t v9 = *(void *)(a1 + 112);
    if (!v9) {
      sub_29F82C();
    }
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v9 + 48))(v9, v15);
    sub_16449AC(&v16);
    sub_182E7B8(v15);
  }
  if (*(void *)(a1 + 144))
  {
    sub_2ABE08(*(void *)(a1 + 40));
    uint64_t v10 = *(void *)(a1 + 56);
    int v11 = *(unsigned __int8 *)(v10 + 2312);
    if (__src[2296])
    {
      memcpy((void *)(v10 + 16), __src, 0x8F8uLL);
      if (v11)
      {
LABEL_19:
        uint64_t v13 = *(void *)(a1 + 56);
        *(_OWORD *)__src = *(_OWORD *)v13;
        if (*(unsigned char *)(v13 + 2312)) {
          memcpy(&__src[16], (const void *)(v13 + 16), 0x8F8uLL);
        }
        uint64_t v14 = *(void *)(a1 + 144);
        if (!v14) {
          sub_29F82C();
        }
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v14 + 48))(v14, __src);
        return;
      }
      char v12 = 1;
    }
    else
    {
      if (!*(unsigned char *)(v10 + 2312)) {
        goto LABEL_19;
      }
      char v12 = 0;
    }
    *(unsigned char *)(v10 + 2312) = v12;
    goto LABEL_19;
  }
}

void sub_10DCAD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

void sub_10DCAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  if (a50) {
    sub_20B022C((uint64_t)&a47, a50);
  }
  sub_20B1E48((uint64_t)&a47);
  _Unwind_Resume(a1);
}

uint64_t sub_10DCB34(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZN3msl21OfflineRoutingService13handleRequestERKN4maps7offline21ServiceRequestWrapperIN4geo39placed"
                     "ata12PlaceRequestEEENSt3__18functionIFvNS2_22ServiceResponseWrapperINS5_13PlaceResponseEEEEEENSB_IF"
                     "vNS_39OfflineRoutingServicePerformanceFiguresEEEERKNSA_6vectorINSA_4pairINSA_12basic_stringIcNSA_11"
                     "char_traitsIcEENSA_9allocatorIcEEEESR_EENSP_ISS_EEEEENK3$_0clENSA_10shared_ptrINS_7routing18Routing"
                     "DataContextEEENSY_ISH_EEEUlOSD_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN3msl21OfflineRoutingService13handleRequestERKN4maps7offline21ServiceRequestWrapperIN4"
                                "geo39placedata12PlaceRequestEEENSt3__18functionIFvNS2_22ServiceResponseWrapperINS5_13Pla"
                                "ceResponseEEEEEENSB_IFvNS_39OfflineRoutingServicePerformanceFiguresEEEERKNSA_6vectorINSA"
                                "_4pairINSA_12basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEESR_EENSP_ISS_EEEEENK"
                                "3$_0clENSA_10shared_ptrINS_7routing18RoutingDataContextEEENSY_ISH_EEEUlOSD_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN3msl21OfflineRoutingService13handleRequestERKN4maps7offline21ServiceRequestWrapperIN4geo39placedata12PlaceRequestEEENSt3__18functionIFvNS2_22ServiceResponseWrapperINS5_13PlaceResponseEEEEEENSB_IFvNS_39OfflineRoutingServicePerformanceFiguresEEEERKNSA_6vectorINSA_4pairINSA_12basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEESR_EENSP_ISS_EEEEENK3$_0clENSA_10shared_ptrINS_7routing18RoutingDataContextEEENSY_ISH_EEEUlOSD_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN3msl21OfflineRoutingService13handleRequestERKN4maps7offline21ServiceRequestWrapperIN4geo39placedata12PlaceRequestEEENSt3__18functionIFvNS2_22ServiceResponseWrapperINS5_13PlaceResponseEEEEEENSB_IFvNS_39OfflineRoutingServicePerformanceFiguresEEEERKNSA_6vectorINSA_4pairINSA_12basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEESR_EENSP_ISS_EEEEENK3$_0clENSA_10shared_ptrINS_7routing18RoutingDataContextEEENSY_ISH_EEEUlOSD_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_10DCBA4()
{
}

uint64_t sub_10DCBB0(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_OWORD *)(a1 + 9) = *(long long *)((char *)a2 + 9);
  *(_OWORD *)a1 = v4;
  uint64_t v5 = *((void *)a2 + 5);
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(void *)(a1 + 40) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *((void *)a2 + 7);
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *((void *)a2 + 9);
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(void *)(a1 + 72) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = a1 + 80;
  uint64_t v9 = *((void *)a2 + 13);
  if (!v9) {
    goto LABEL_10;
  }
  if ((long long *)v9 != a2 + 5)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
LABEL_10:
    *(void *)(a1 + 104) = v9;
    goto LABEL_12;
  }
  *(void *)(a1 + 104) = v8;
  (*(void (**)(void, uint64_t))(**((void **)a2 + 13) + 24))(*((void *)a2 + 13), a1 + 80);
LABEL_12:
  uint64_t v10 = *((void *)a2 + 17);
  if (!v10)
  {
LABEL_15:
    *(void *)(a1 + 136) = v10;
    return a1;
  }
  if ((long long *)v10 != a2 + 7)
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
    goto LABEL_15;
  }
  *(void *)(a1 + 136) = a1 + 112;
  (*(void (**)(void))(**((void **)a2 + 17) + 24))(*((void *)a2 + 17));
  return a1;
}

void sub_10DCD2C(_Unwind_Exception *a1)
{
  uint64_t v4 = v1[13];
  if (v4 == v2)
  {
    sub_20B1ED8(v2);
  }
  else if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)v1[9];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)v1[7];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)v1[5];
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  _Unwind_Resume(a1);
}

void sub_10DCE58()
{
}

void sub_10DCE80()
{
}

void sub_10DD5D4(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  sub_111ECAC((uint64_t)&STACK[0x218]);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void *sub_10DD7A4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void *sub_10DD834(void *a1)
{
  uint64_t v2 = a1 + 14;
  unint64_t v3 = (void *)a1[17];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    uint64_t v4 = a1 + 10;
    uint64_t v5 = (void *)a1[13];
    if (v5 != a1 + 10) {
      goto LABEL_5;
    }
LABEL_10:
    (*(void (**)(void *))(*v4 + 32))(v4);
    uint64_t v6 = (std::__shared_weak_count *)a1[9];
    if (!v6) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v3) {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  uint64_t v4 = a1 + 10;
  uint64_t v5 = (void *)a1[13];
  if (v5 == a1 + 10) {
    goto LABEL_10;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[9];
  if (!v6)
  {
LABEL_12:
    uint64_t v7 = (std::__shared_weak_count *)a1[7];
    if (!v7) {
      goto LABEL_16;
    }
    goto LABEL_13;
  }
LABEL_11:
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_12;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  uint64_t v7 = (std::__shared_weak_count *)a1[7];
  if (!v7) {
    goto LABEL_16;
  }
LABEL_13:
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_16:
  uint64_t v8 = (std::__shared_weak_count *)a1[5];
  if (!v8 || atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void *sub_10DDA28(void *a1)
{
  *a1 = off_243FE48;
  sub_10DD834(a1 + 1);
  return a1;
}

void sub_10DDA6C(void *a1)
{
  *a1 = off_243FE48;
  sub_10DD834(a1 + 1);

  operator delete();
}

void *sub_10DDAD0(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 + 8);
  uint64_t v2 = operator new(0x98uLL);
  *uint64_t v2 = off_243FE48;
  sub_10DDEF4((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_10DDB24(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10DDB38(uint64_t a1, void *a2)
{
  *a2 = off_243FE48;
  return sub_10DDEF4((uint64_t)(a2 + 1), (long long *)(a1 + 8));
}

void *sub_10DDB64(uint64_t a1)
{
  return sub_10DD834((void *)(a1 + 8));
}

void sub_10DDB6C(void *a1)
{
  sub_10DD834(a1 + 1);

  operator delete(a1);
}

void sub_10DDBA8(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 8);
  int v5 = *(_DWORD *)(a2 + 112);
  sub_72688(a1 + 16);
  sub_2ABE08(*(void *)(a1 + 40));
  sub_10D9070(v4, v5, (uint64_t)__src);
  sub_10DE1C4(*(void *)(a1 + 56), (uint64_t)__src);
  sub_71740(1, (uint64_t)__src, *(void *)(a1 + 72));
  uint64_t v6 = *(void *)&__src[24];
  if (*(void *)&__src[24])
  {
    uint64_t v7 = *(void *)&__src[32];
    uint64_t v8 = *(void **)&__src[24];
    if (*(void *)&__src[32] != *(void *)&__src[24])
    {
      do
      {
        if (*(char *)(v7 - 25) < 0) {
          operator delete(*(void **)(v7 - 48));
        }
        v7 -= 48;
      }
      while (v7 != v6);
      uint64_t v8 = *(void **)&__src[24];
    }
    *(void *)&__src[32] = v6;
    operator delete(v8);
  }
  if ((__src[23] & 0x80000000) != 0) {
    operator delete(*(void **)__src);
  }
  sub_707AC(*(void *)(a1 + 72));
  if (*(void *)(a1 + 112))
  {
    sub_CDA0FC((uint64_t)__src, a2);
    sub_1644770(v17, 0, 0);
    sub_CDA0FC((uint64_t)v15, (uint64_t)__src);
    sub_10D950C(&v16, (uint64_t)v17);
    sub_16449AC(v17);
    sub_1354024(__src);
    uint64_t v9 = *(void *)(a1 + 112);
    if (!v9) {
      sub_29F82C();
    }
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v9 + 48))(v9, v15);
    sub_16449AC(&v16);
    sub_1354024(v15);
  }
  if (*(void *)(a1 + 144))
  {
    sub_2ABE08(*(void *)(a1 + 40));
    uint64_t v10 = *(void *)(a1 + 56);
    int v11 = *(unsigned __int8 *)(v10 + 2312);
    if (__src[2296])
    {
      memcpy((void *)(v10 + 16), __src, 0x8F8uLL);
      if (v11)
      {
LABEL_19:
        uint64_t v13 = *(void *)(a1 + 56);
        *(_OWORD *)__src = *(_OWORD *)v13;
        if (*(unsigned char *)(v13 + 2312)) {
          memcpy(&__src[16], (const void *)(v13 + 16), 0x8F8uLL);
        }
        uint64_t v14 = *(void *)(a1 + 144);
        if (!v14) {
          sub_29F82C();
        }
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v14 + 48))(v14, __src);
        return;
      }
      char v12 = 1;
    }
    else
    {
      if (!*(unsigned char *)(v10 + 2312)) {
        goto LABEL_19;
      }
      char v12 = 0;
    }
    *(unsigned char *)(v10 + 2312) = v12;
    goto LABEL_19;
  }
}

void sub_10DDE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_10DDE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (a38) {
    sub_20B022C((uint64_t)&a35, a38);
  }
  sub_20B1E48((uint64_t)&a35);
  _Unwind_Resume(a1);
}

uint64_t sub_10DDE78(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZN3msl21OfflineRoutingService13handleRequestERKN4maps7offline21ServiceRequestWrapperIN4geo37transi"
                     "t18RouteUpdateRequestEEENSt3__18functionIFvNS2_22ServiceResponseWrapperINS5_19RouteUpdateResponseEE"
                     "EEEENSB_IFvNS_39OfflineRoutingServicePerformanceFiguresEEEERKNSA_6vectorINSA_4pairINSA_12basic_stri"
                     "ngIcNSA_11char_traitsIcEENSA_9allocatorIcEEEESR_EENSP_ISS_EEEEENK3$_0clENSA_10shared_ptrINS_7routin"
                     "g18RoutingDataContextEEENSY_ISH_EEEUlOSD_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN3msl21OfflineRoutingService13handleRequestERKN4maps7offline21ServiceRequestWrapperIN4"
                                "geo37transit18RouteUpdateRequestEEENSt3__18functionIFvNS2_22ServiceResponseWrapperINS5_1"
                                "9RouteUpdateResponseEEEEEENSB_IFvNS_39OfflineRoutingServicePerformanceFiguresEEEERKNSA_6"
                                "vectorINSA_4pairINSA_12basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEESR_EENSP_I"
                                "SS_EEEEENK3$_0clENSA_10shared_ptrINS_7routing18RoutingDataContextEEENSY_ISH_EEEUlOSD_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN3msl21OfflineRoutingService13handleRequestERKN4maps7offline21ServiceRequestWrapperIN4geo37transit18RouteUpdateRequestEEENSt3__18functionIFvNS2_22ServiceResponseWrapperINS5_19RouteUpdateResponseEEEEEENSB_IFvNS_39OfflineRoutingServicePerformanceFiguresEEEERKNSA_6vectorINSA_4pairINSA_12basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEESR_EENSP_ISS_EEEEENK3$_0clENSA_10shared_ptrINS_7routing18RoutingDataContextEEENSY_ISH_EEEUlOSD_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN3msl21OfflineRoutingService13handleRequestERKN4maps7offline21ServiceRequestWrapperIN4geo37transit18RouteUpdateRequestEEENSt3__18functionIFvNS2_22ServiceResponseWrapperINS5_19RouteUpdateResponseEEEEEENSB_IFvNS_39OfflineRoutingServicePerformanceFiguresEEEERKNSA_6vectorINSA_4pairINSA_12basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEESR_EENSP_ISS_EEEEENK3$_0clENSA_10shared_ptrINS_7routing18RoutingDataContextEEENSY_ISH_EEEUlOSD_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_10DDEE8()
{
}

uint64_t sub_10DDEF4(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_OWORD *)(a1 + 9) = *(long long *)((char *)a2 + 9);
  *(_OWORD *)a1 = v4;
  uint64_t v5 = *((void *)a2 + 5);
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(void *)(a1 + 40) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *((void *)a2 + 7);
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *((void *)a2 + 9);
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(void *)(a1 + 72) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = a1 + 80;
  uint64_t v9 = *((void *)a2 + 13);
  if (!v9) {
    goto LABEL_10;
  }
  if ((long long *)v9 != a2 + 5)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
LABEL_10:
    *(void *)(a1 + 104) = v9;
    goto LABEL_12;
  }
  *(void *)(a1 + 104) = v8;
  (*(void (**)(void, uint64_t))(**((void **)a2 + 13) + 24))(*((void *)a2 + 13), a1 + 80);
LABEL_12:
  uint64_t v10 = *((void *)a2 + 17);
  if (!v10)
  {
LABEL_15:
    *(void *)(a1 + 136) = v10;
    return a1;
  }
  if ((long long *)v10 != a2 + 7)
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
    goto LABEL_15;
  }
  *(void *)(a1 + 136) = a1 + 112;
  (*(void (**)(void))(**((void **)a2 + 17) + 24))(*((void *)a2 + 17));
  return a1;
}

void sub_10DE070(_Unwind_Exception *a1)
{
  uint64_t v4 = v1[13];
  if (v4 == v2)
  {
    sub_20B1EFC(v2);
  }
  else if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)v1[9];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)v1[7];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)v1[5];
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  _Unwind_Resume(a1);
}

void sub_10DE19C()
{
  unk_25FE337 = 16641;
  word_25FE320 = 65;
  byte_25FE34F = 1;
  byte_25FE339 = 0;
}

uint64_t sub_10DE1C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "OfflineRoutingService");
  unint64_t v4 = *(void *)(a2 + 40);
  LOBYTE(v23) = 0;
  unint64_t v5 = *(void *)(a2 + 32);
  if (v5 >= v4)
  {
    uint64_t result = sub_C55C14((uint64_t *)(a2 + 24), "DataAge", (char *)&v23, (double *)(a1 + 8));
  }
  else
  {
    sub_C55DE4(a2 + 40, *(void *)(a2 + 32), "DataAge", (char *)&v23, (double *)(a1 + 8));
    uint64_t result = v5 + 48;
    *(void *)(a2 + 32) = v5 + 48;
  }
  *(void *)(a2 + 32) = result;
  if (*(unsigned char *)(a1 + 2312))
  {
    char v24 = 4;
    double v23 = sub_2F2644(a1 + 16);
    unint64_t v7 = *(void *)(a2 + 32);
    if (v7 >= *(void *)(a2 + 40))
    {
      uint64_t v8 = sub_D73D50((uint64_t *)(a2 + 24), "NumNonEmptyQuadNodes", &v24, &v23);
    }
    else
    {
      sub_D73F20(a2 + 40, *(void *)(a2 + 32), "NumNonEmptyQuadNodes", &v24, &v23);
      uint64_t v8 = v7 + 48;
      *(void *)(a2 + 32) = v7 + 48;
    }
    *(void *)(a2 + 32) = v8;
    char v24 = 4;
    if (!*(unsigned char *)(a1 + 2312))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    double v23 = sub_2F23DC((double *)(a1 + 16));
    unint64_t v9 = *(void *)(a2 + 32);
    if (v9 >= *(void *)(a2 + 40))
    {
      uint64_t v10 = sub_10DE768((uint64_t *)(a2 + 24), "NumEmptyQuadNodes", &v24, &v23);
    }
    else
    {
      sub_10DE938(a2 + 40, *(void *)(a2 + 32), "NumEmptyQuadNodes", &v24, &v23);
      uint64_t v10 = v9 + 48;
      *(void *)(a2 + 32) = v9 + 48;
    }
    *(void *)(a2 + 32) = v10;
    char v24 = 4;
    if (!*(unsigned char *)(a1 + 2312) || (double v11 = sub_2F2644(a1 + 16), !*(unsigned char *)(a1 + 2312)))
    {
      uint64_t v18 = __cxa_allocate_exception(8uLL);
      *uint64_t v18 = &off_2439078;
    }
    double v23 = v11 + sub_2F23DC((double *)(a1 + 16));
    unint64_t v12 = *(void *)(a2 + 32);
    if (v12 >= *(void *)(a2 + 40))
    {
      uint64_t v13 = sub_10DE768((uint64_t *)(a2 + 24), "NumTotalQuadNodes", &v24, &v23);
    }
    else
    {
      sub_10DE938(a2 + 40, *(void *)(a2 + 32), "NumTotalQuadNodes", &v24, &v23);
      uint64_t v13 = v12 + 48;
      *(void *)(a2 + 32) = v12 + 48;
    }
    *(void *)(a2 + 32) = v13;
    char v24 = 3;
    if (!*(unsigned char *)(a1 + 2312))
    {
      long long v20 = __cxa_allocate_exception(8uLL);
      *long long v20 = &off_2439078;
    }
    double v23 = sub_2F27BC((double *)(a1 + 16));
    unint64_t v14 = *(void *)(a2 + 32);
    if (v14 >= *(void *)(a2 + 40))
    {
      uint64_t v15 = sub_10DEAAC((uint64_t *)(a2 + 24), "SmallQuadNodesSize", &v24, &v23);
    }
    else
    {
      sub_10DEC7C(a2 + 40, *(void *)(a2 + 32), "SmallQuadNodesSize", &v24, &v23);
      uint64_t v15 = v14 + 48;
      *(void *)(a2 + 32) = v14 + 48;
    }
    *(void *)(a2 + 32) = v15;
    char v24 = 3;
    if (!*(unsigned char *)(a1 + 2312))
    {
      unint64_t v21 = __cxa_allocate_exception(8uLL);
      void *v21 = &off_2439078;
    }
    double v23 = sub_2F2674((double *)(a1 + 16));
    unint64_t v16 = *(void *)(a2 + 32);
    if (v16 >= *(void *)(a2 + 40))
    {
      unint64_t v17 = sub_10DEAAC((uint64_t *)(a2 + 24), "TotalQuadNodesSize", &v24, &v23);
    }
    else
    {
      sub_10DEC7C(a2 + 40, *(void *)(a2 + 32), "TotalQuadNodesSize", &v24, &v23);
      unint64_t v17 = v16 + 48;
      *(void *)(a2 + 32) = v17;
    }
    *(void *)(a2 + 32) = v17;
    char v24 = 1;
    if (!*(unsigned char *)(a1 + 2312))
    {
      uint64_t v22 = __cxa_allocate_exception(8uLL);
      void *v22 = &off_2439078;
    }
    double v23 = *(double *)(a1 + 2288) + *(double *)(a1 + 2296);
    if (v17 >= *(void *)(a2 + 40))
    {
      uint64_t result = sub_10DEAAC((uint64_t *)(a2 + 24), "QuadNodesFetchTime", &v24, &v23);
    }
    else
    {
      sub_10DEC7C(a2 + 40, v17, "QuadNodesFetchTime", &v24, &v23);
      uint64_t result = v17 + 48;
      *(void *)(a2 + 32) = v17 + 48;
    }
    *(void *)(a2 + 32) = result;
  }
  return result;
}

void sub_10DE684(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_10DE6DC(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_10DE6F0(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_10DE704(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_10DE718(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_10DE72C(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_10DE740(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_10DE754(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10DE768(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_10DE938(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  unint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    uint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_10DE924(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10DE938(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_10DEA98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10DEAAC(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_10DEC7C(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_10DEC68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10DEC7C(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_10DEDDC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10DEDF0(_DWORD *a1, uint64_t *a2, void *a3)
{
  v18[0] = (uint64_t)a2;
  v18[1] = (uint64_t)a3;
  if ((sub_37C4CC(a2) & 1) == 0)
  {
    switch(a1[53])
    {
      case 5:
      case 0x17:
      case 0x27:
        if ((sub_37BBF0(a2) & 1) == 0) {
          break;
        }
        goto LABEL_2;
      case 0x25:
        if ((sub_37BBF0(a2) & 1) == 0 && !sub_37CDBC(a2)) {
          break;
        }
        goto LABEL_2;
      case 0x32:
        if ((sub_37BBF0(a2) & 1) == 0 && (sub_37C7C0(a2) & 1) == 0) {
          break;
        }
        goto LABEL_2;
      case 0x39:
        if ((sub_37BBF0(a2) & 1) == 0 && (sub_37CAC0(a2) & 1) == 0) {
          break;
        }
        goto LABEL_2;
      default:
        break;
    }
    unint64_t v7 = sub_69510();
    sub_DC6BA0((uint64_t)a1);
    nullsub_1(v7);
    sub_DC6BE0();
    nullsub_1(v7);
    switch(a1[53])
    {
      case 5:
      case 0x15:
      case 0x17:
      case 0x27:
        uint64_t v8 = (void *)a3[3];
        if (v8)
        {
          if (v8 == a3)
          {
            long long v34 = v33;
            (*(void (**)(void *, void *))(*a3 + 24))(a3, v33);
          }
          else
          {
            long long v34 = (void *)(*(uint64_t (**)(void *))(*v8 + 16))(v8);
          }
        }
        else
        {
          long long v34 = 0;
        }
        long long v32 = 0;
        sub_D51928();
        if (v32 == v31)
        {
          (*(void (**)(void *))(v31[0] + 32))(v31);
          uint64_t result = (uint64_t)v34;
          if (v34 == v33) {
            return (*(uint64_t (**)(void *))(v33[0] + 32))(v33);
          }
        }
        else
        {
          if (v32) {
            (*(void (**)(void *))(*v32 + 40))(v32);
          }
          uint64_t result = (uint64_t)v34;
          if (v34 == v33) {
            return (*(uint64_t (**)(void *))(v33[0] + 32))(v33);
          }
        }
LABEL_73:
        if (result) {
          return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
        }
        return result;
      case 0x25:
        size_t v9 = (void *)a3[3];
        if (v9)
        {
          if (v9 == a3)
          {
            uint64_t v22 = v21;
            (*(void (**)(void *, void *))(*a3 + 24))(a3, v21);
          }
          else
          {
            uint64_t v22 = (void *)(*(uint64_t (**)(void *))(*v9 + 16))(v9);
          }
        }
        else
        {
          uint64_t v22 = 0;
        }
        uint64_t v20 = 0;
        sub_D7D3A0((uint64_t)a1, a2, (uint64_t)v21, (uint64_t)v19);
        if (v20 == v19)
        {
          (*(void (**)(void *))(v19[0] + 32))(v19);
        }
        else if (v20)
        {
          (*(void (**)(void))(*v20 + 40))();
        }
        uint64_t result = (uint64_t)v22;
        if (v22 != v21) {
          goto LABEL_73;
        }
        return (*(uint64_t (**)(void *))(v21[0] + 32))(v21);
      case 0x32:
        size_t v10 = (void *)a3[3];
        if (v10)
        {
          if (v10 == a3)
          {
            uint64_t v30 = v29;
            (*(void (**)(void *, void *))(*a3 + 24))(a3, v29);
          }
          else
          {
            uint64_t v30 = (void *)(*(uint64_t (**)(void *))(*v10 + 16))(v10);
          }
        }
        else
        {
          uint64_t v30 = 0;
        }
        unint64_t v28 = 0;
        sub_D794E4();
        if (v28 == v27)
        {
          (*(void (**)(void *))(v27[0] + 32))(v27);
        }
        else if (v28)
        {
          (*(void (**)(void *))(*v28 + 40))(v28);
        }
        uint64_t result = (uint64_t)v30;
        if (v30 != v29) {
          goto LABEL_73;
        }
        return (*(uint64_t (**)(void *))(v29[0] + 32))(v29);
      case 0x39:
        double v11 = (void *)a3[3];
        if (v11)
        {
          if (v11 == a3)
          {
            unint64_t v26 = v25;
            (*(void (**)(void *, void *))(*a3 + 24))(a3, v25);
          }
          else
          {
            unint64_t v26 = (void *)(*(uint64_t (**)(void *))(*v11 + 16))(v11);
          }
        }
        else
        {
          unint64_t v26 = 0;
        }
        char v24 = 0;
        sub_D77E0C(a1, a2, (uint64_t)v25, (uint64_t)v23);
        if (v24 == v23)
        {
          (*(void (**)(void *))(v23[0] + 32))(v23);
        }
        else if (v24)
        {
          (*(void (**)(void *))(*v24 + 40))(v24);
        }
        uint64_t result = (uint64_t)v26;
        if (v26 != v25) {
          goto LABEL_73;
        }
        return (*(uint64_t (**)(void *))(v25[0] + 32))(v25);
      default:
        if (sub_723EC(1u))
        {
          sub_6BAC((uint64_t)&v14);
          sub_188FC78(&v14, (uint64_t)"Place request type not supported.", 33);
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 1u);
          if (v13 < 0) {
            operator delete(__p[0]);
          }
          if (v17 < 0) {
            operator delete(v16);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        return sub_10DF970(v18);
    }
  }
LABEL_2:
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v14);
    sub_188FC78(&v14, (uint64_t)"Requested type or transport mode disabled.", 42);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0) {
      operator delete(v16);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return sub_10DF970(v18);
}

void sub_10DF6DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_10DF970(uint64_t *a1)
{
  long long __p = operator new(0x28uLL);
  long long v6 = xmmword_20E12D0;
  strcpy((char *)__p, "InternalError.PlaceRequest.Unsupported");
  uint64_t v2 = (uint64_t *)sub_37D0C0(*a1);
  sub_710A8(1, (uint64_t)&__p, *v2);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p);
  }
  sub_182E158(&__p, 0, 0);
  v7 |= 0x20u;
  int v8 = 5;
  uint64_t v3 = *(void *)(a1[1] + 24);
  if (!v3) {
    sub_29F82C();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v3 + 48))(v3, &__p);
  return sub_182E7B8(&__p);
}

void sub_10DFA60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_182E7B8(va);
  _Unwind_Resume(a1);
}

void sub_10DFA74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10DFA90(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void *sub_10DFB20(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void *sub_10DFBB0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void *sub_10DFC40(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void sub_10DFCD0()
{
  unk_25FE367 = 16641;
  word_25FE350 = 65;
  byte_25FE37F = 1;
  byte_25FE369 = 0;
}

uint64_t sub_10DFCF8@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (result == 1)
  {
    a2[23] = 7;
    strcpy(a2, "watchos");
  }
  else if (result)
  {
    a2[23] = 7;
    strcpy(a2, "unknown");
  }
  else
  {
    a2[23] = 3;
    *(_WORD *)a2 = 28521;
    a2[2] = 115;
    a2[3] = 0;
  }
  return result;
}

uint64_t sub_10DFD74(uint64_t a1, uint64_t *a2, void *a3)
{
  if ((sub_37C1D8(a2) & 1) != 0 || sub_37BBF0(a2))
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)&v13);
      sub_188FC78(&v13, (uint64_t)"Requested type or transport mode disabled.", 42);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if (v12 < 0) {
        operator delete(__p);
      }
      if (v17 < 0) {
        operator delete(v16);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    char v13 = operator new(0x38uLL);
    long long v14 = xmmword_20B99F0;
    strcpy((char *)v13, "InternalError.TransitRouteUpdateRequest.Unsupported");
    long long v6 = (uint64_t *)sub_37D0C0((uint64_t)a2);
    sub_710A8(1, (uint64_t)&v13, *v6);
    if (SHIBYTE(v14) < 0) {
      operator delete(v13);
    }
    sub_1353BF0(&v13, 0, 0);
    v15 |= 0x20u;
    int v18 = 5;
    uint64_t v7 = a3[3];
    if (!v7) {
      sub_29F82C();
    }
    (*(void (**)(uint64_t, void **))(*(void *)v7 + 48))(v7, &v13);
    return sub_1354024(&v13);
  }
  else
  {
    size_t v9 = sub_69510();
    sub_DBE840(a1);
    nullsub_1(v9);
    sub_DC6BC0(a1);
    nullsub_1(v9);
    size_t v10 = (void *)a3[3];
    if (v10)
    {
      if (v10 == a3)
      {
        uint64_t v20 = v19;
        (*(void (**)(void *, void *))(*a3 + 24))(a3, v19);
      }
      else
      {
        uint64_t v20 = (void *)(*(uint64_t (**)(void *))(*v10 + 16))(v10);
      }
    }
    else
    {
      uint64_t v20 = 0;
    }
    sub_D7AE80();
    uint64_t result = (uint64_t)v20;
    if (v20 == v19)
    {
      return (*(uint64_t (**)(void *))(v19[0] + 32))(v19);
    }
    else if (v20)
    {
      return (*(uint64_t (**)(void *))(*v20 + 40))(v20);
    }
  }
  return result;
}

void sub_10E011C(_Unwind_Exception *a1)
{
  sub_10DD7A4((void *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_10E0130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_10E017C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1354024(va);
  _Unwind_Resume(a1);
}

void sub_10E0190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10E01B8()
{
  unk_25FE397 = 16641;
  word_25FE380 = 65;
  byte_25FE3AF = 1;
  byte_25FE399 = 0;
}

void *sub_10E01E0(void *a1)
{
  *a1 = off_24E6998;
  uint64_t v2 = a1[1];
  if ((v2 & 2) != 0)
  {
    uint64_t v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v3)
      {
LABEL_4:
        sub_1881618();
        operator delete();
      }
    }
    else if (v3)
    {
      goto LABEL_4;
    }
  }
  return a1;
}

void *sub_10E0258(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    unint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }
  return a1;
}

void sub_10E02F8(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    unint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }

  operator delete();
}

uint64_t sub_10E03B8(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 3) != 0) {
    *(void *)(a1 + 24) = 0;
  }
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_10E03DC(_DWORD *a1, char *a2, int32x2_t *a3)
{
  int v6 = 0;
  uint64_t v7 = (uint64_t *)(a1 + 2);
  while (1)
  {
    if ((unint64_t)a2 < *(void *)a3) {
      goto LABEL_5;
    }
    int v20 = a2 - a3[1].i32[0];
    if (a3[3].i32[1] == v20) {
      break;
    }
    a2 = sub_188BB90((uint64_t)a3, v20, a3[11].i32[1]);
    if (v21) {
      goto LABEL_43;
    }
LABEL_5:
    size_t v9 = a2 + 1;
    unsigned int v10 = *a2;
    if (*a2 < 0)
    {
      unsigned int v13 = v10 + (*v9 << 7);
      unsigned int v10 = v13 - 128;
      if (*v9 < 0)
      {
        size_t v9 = (char *)sub_188C180((uint64_t)a2, v13 - 128);
        unsigned int v10 = v16;
        unsigned int v11 = v16 >> 3;
        if (v16 >> 3 != 2) {
          goto LABEL_7;
        }
      }
      else
      {
        size_t v9 = a2 + 2;
        unsigned int v11 = v10 >> 3;
        if (v10 >> 3 != 2) {
          goto LABEL_7;
        }
      }
      goto LABEL_18;
    }
    unsigned int v11 = v10 >> 3;
    if (v10 >> 3 == 2)
    {
LABEL_18:
      if (v10 != 16) {
        goto LABEL_11;
      }
      v6 |= 2u;
      a2 = v9 + 1;
      LODWORD(v14) = *v9;
      if ((v14 & 0x80) != 0)
      {
        int v15 = *a2;
        uint64_t v14 = v14 + (v15 << 7) - 128;
        if ((v15 & 0x80000000) == 0)
        {
          a2 = v9 + 2;
          goto LABEL_22;
        }
        a2 = (char *)sub_188C138((uint64_t)v9, v14);
        a1[7] = v18;
        if (!a2) {
          goto LABEL_35;
        }
      }
      else
      {
LABEL_22:
        a1[7] = v14;
      }
    }
    else
    {
LABEL_7:
      if (v11 == 1 && v10 == 8)
      {
        v6 |= 1u;
        a2 = v9 + 1;
        LODWORD(v8) = *v9;
        if ((v8 & 0x80) == 0) {
          goto LABEL_3;
        }
        int v17 = *a2;
        uint64_t v8 = v8 + (v17 << 7) - 128;
        if (v17 < 0)
        {
          a2 = (char *)sub_188C138((uint64_t)v9, v8);
          a1[6] = v19;
          if (!a2) {
            goto LABEL_35;
          }
        }
        else
        {
          a2 = v9 + 2;
LABEL_3:
          a1[6] = v8;
        }
      }
      else
      {
LABEL_11:
        if (!v10 || (v10 & 7) == 4)
        {
          if (v9) {
            a3[10].i32[0] = v10 - 1;
          }
          goto LABEL_38;
        }
        if (*v7)
        {
          a2 = (char *)sub_1885AC0(v10, (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8), v9, a3);
          if (!a2) {
            goto LABEL_35;
          }
        }
        else
        {
          uint64_t v22 = (std::string *)sub_188DBD8(v7);
          a2 = (char *)sub_1885AC0(v10, v22, v9, a3);
          if (!a2)
          {
LABEL_35:
            size_t v9 = 0;
            goto LABEL_38;
          }
        }
      }
    }
  }
  if (v20 < 1)
  {
LABEL_43:
    size_t v9 = a2;
    goto LABEL_38;
  }
  if (a3[2]) {
    size_t v9 = a2;
  }
  else {
    size_t v9 = 0;
  }
LABEL_38:
  a1[4] |= v6;
  return v9;
}

unsigned char *sub_10E060C(uint64_t a1, unsigned char *__dst, _DWORD *a3)
{
  unint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*(void *)a3 <= (unint64_t)__dst)
    {
      unint64_t v4 = sub_188A3FC((uint64_t)a3, (int)__dst);
      unint64_t v7 = *(int *)(a1 + 24);
      *unint64_t v4 = 8;
      v4[1] = v7;
      if (v7 <= 0x7F) {
        goto LABEL_4;
      }
    }
    else
    {
      unint64_t v7 = *(int *)(a1 + 24);
      *long long __dst = 8;
      __dst[1] = v7;
      if (v7 <= 0x7F)
      {
LABEL_4:
        v4 += 2;
        goto LABEL_8;
      }
    }
    v4[1] = v7 | 0x80;
    unint64_t v8 = v7 >> 7;
    v4[2] = v7 >> 7;
    v4 += 3;
    if (v7 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unint64_t v9 = v8 >> 14;
        v8 >>= 7;
        *v4++ = v8;
      }
      while (v9);
    }
  }
LABEL_8:
  if ((v6 & 2) == 0) {
    goto LABEL_15;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    unint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unint64_t v10 = *(int *)(a1 + 28);
    *unint64_t v4 = 16;
    v4[1] = v10;
    if (v10 <= 0x7F) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v10 = *(int *)(a1 + 28);
    *unint64_t v4 = 16;
    v4[1] = v10;
    if (v10 <= 0x7F)
    {
LABEL_11:
      v4 += 2;
      goto LABEL_15;
    }
  }
  v4[1] = v10 | 0x80;
  unint64_t v11 = v10 >> 7;
  v4[2] = v10 >> 7;
  v4 += 3;
  if (v10 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unint64_t v12 = v11 >> 14;
      v11 >>= 7;
      *v4++ = v11;
    }
    while (v12);
  }
LABEL_15:
  uint64_t v13 = *(void *)(a1 + 8);
  if ((v13 & 1) == 0) {
    return v4;
  }
  unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v15 + 31) < 0)
  {
    unsigned int v16 = *(char **)(v15 + 8);
    uint64_t v17 = *(void *)(v15 + 16);
  }
  else
  {
    unsigned int v16 = (char *)(v15 + 8);
    LODWORD(v17) = *(unsigned __int8 *)(v15 + 31);
  }
  uint64_t v18 = (int)v17;
  if (*(void *)a3 - (void)v4 < (int)v17)
  {
    return (unsigned char *)sub_188A528(a3, v16, v17, v4);
  }
  else
  {
    memcpy(v4, v16, (int)v17);
    return &v4[v18];
  }
}

uint64_t sub_10E07E8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0)
  {
    uint64_t v2 = 0;
    goto LABEL_14;
  }
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 2) == 0) {
      goto LABEL_14;
    }
LABEL_10:
    int v4 = *(_DWORD *)(a1 + 28);
    if (v4 < 0) {
      uint64_t v5 = 11;
    }
    else {
      uint64_t v5 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v2 += v5;
    goto LABEL_14;
  }
  int v3 = *(_DWORD *)(a1 + 24);
  if (v3 < 0)
  {
    uint64_t v2 = 11;
    if ((v1 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_10;
  }
  uint64_t v2 = ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_14:
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    unint64_t v8 = v6 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v8 + 31) < 0) {
      uint64_t v9 = *(void *)(v8 + 16) + v2;
    }
    else {
      uint64_t v9 = *(unsigned __int8 *)(v8 + 31) + v2;
    }
    *(_DWORD *)(a1 + 20) = v9;
    return v9;
  }
  else
  {
    *(_DWORD *)(a1 + 20) = v2;
    return v2;
  }
}

std::string *sub_10E08B8(std::string *result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 16);
  if ((v2 & 3) != 0)
  {
    if (v2) {
      LODWORD(result[1].__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 24);
    }
    if ((v2 & 2) != 0) {
      HIDWORD(result[1].__r_.__value_.__r.__words[0]) = *(_DWORD *)(a2 + 28);
    }
    LODWORD(result->__r_.__value_.__r.__words[2]) |= v2;
  }
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3) {
    return sub_188B4F8((uint64_t *)&result->__r_.__value_.__l.__size_, (v3 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_10E0904()
{
  return 1;
}

char *sub_10E090C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_20B91C0;
  strcpy(result, "geo3.internal.UDegLatLng");
  return result;
}

void *sub_10E0960(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_5;
    }
  }
  else if (v4)
  {
    goto LABEL_5;
  }
  sub_10E0A94((uint64_t)a1);
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_5:
  uint64_t v5 = (unsigned int *)a1[11];
  if (v5 && !a1[9])
  {
    uint64_t v6 = v5 + 2;
    uint64_t v7 = *v5;
    if ((int)v7 >= 1)
    {
      do
      {
        if (*v6)
        {
          sub_15B0994();
          operator delete();
        }
        ++v6;
        --v7;
      }
      while (v7);
      uint64_t v5 = (unsigned int *)a1[11];
    }
    operator delete(v5);
  }
  a1[11] = 0;
  sub_1889DA8((uint64_t)(a1 + 7));
  sub_1889DA8((uint64_t)(a1 + 5));
  sub_1889DA8((uint64_t)(a1 + 3));
  *a1 = off_24E6998;
  uint64_t v8 = a1[1];
  if ((v8 & 2) != 0)
  {
    uint64_t v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
    if (v8)
    {
      if (*v9)
      {
LABEL_17:
        sub_1881618();
        operator delete();
      }
    }
    else if (v9)
    {
      goto LABEL_17;
    }
  }
  return a1;
}

void ***sub_10E0A94(uint64_t a1)
{
  uint64_t v3 = *(uint64_t **)(a1 + 96);
  uint64_t result = (void ***)(a1 + 96);
  if (v3 != &qword_2550250) {
    sub_1881C6C(result);
  }
  if ((uint64_t (***)())a1 != &off_24F7630)
  {
    int v4 = *(void **)(a1 + 104);
    if (v4)
    {
      uint64_t v5 = v4[1];
      if ((v5 & 1) != 0 && !*(void *)(v5 & 0xFFFFFFFFFFFFFFFCLL))
      {
        sub_10E4F74(v4 + 1);
        uint64_t v5 = v4[1];
      }
      *int v4 = off_24E6998;
      if ((v5 & 2) != 0)
      {
        uint64_t v6 = (void *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
        if (v5)
        {
          if (*v6)
          {
LABEL_9:
            sub_1881618();
            operator delete();
          }
        }
        else if (v6)
        {
          goto LABEL_9;
        }
      }
      operator delete();
    }
    uint64_t v7 = *(void **)(a1 + 112);
    if (v7)
    {
      uint64_t v8 = v7[1];
      if ((v8 & 1) != 0 && !*(void *)(v8 & 0xFFFFFFFFFFFFFFFCLL))
      {
        sub_10E4F74(v7 + 1);
        uint64_t v8 = v7[1];
      }
      *uint64_t v7 = off_24E6998;
      if ((v8 & 2) != 0)
      {
        uint64_t v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
        if (v8)
        {
          if (*v9)
          {
LABEL_16:
            sub_1881618();
            operator delete();
          }
        }
        else if (v9)
        {
          goto LABEL_16;
        }
      }
      operator delete();
    }
  }
  return result;
}

void sub_10E0C44(void *a1)
{
  sub_10E0960(a1);

  operator delete();
}

uint64_t sub_10E0C7C(uint64_t result)
{
  uint64_t v1 = result;
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 56) = 0;
  uint64_t v2 = *(unsigned int *)(result + 80);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(result + 88) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = (uint64_t)sub_15B09D0(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 80) = 0;
  }
  int v5 = *(_DWORD *)(v1 + 16);
  if ((v5 & 7) != 0)
  {
    if (v5)
    {
      unint64_t v6 = *(void *)(v1 + 96) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v6 + 23) < 0)
      {
        **(unsigned char **)unint64_t v6 = 0;
        *(void *)(v6 + 8) = 0;
        if ((v5 & 2) != 0) {
          goto LABEL_10;
        }
        goto LABEL_15;
      }
      *(unsigned char *)unint64_t v6 = 0;
      *(unsigned char *)(v6 + 23) = 0;
    }
    if ((v5 & 2) != 0)
    {
LABEL_10:
      uint64_t v7 = *(void *)(v1 + 104);
      if ((*(unsigned char *)(v7 + 16) & 3) != 0) {
        *(void *)(v7 + 24) = 0;
      }
      char v8 = *(unsigned char *)(v7 + 8);
      uint64_t result = v7 + 8;
      *(_DWORD *)(result + 8) = 0;
      if (v8) {
        uint64_t result = sub_188B4AC((uint64_t *)result);
      }
    }
LABEL_15:
    if ((v5 & 4) != 0)
    {
      uint64_t v9 = *(void *)(v1 + 112);
      if ((*(unsigned char *)(v9 + 16) & 3) != 0) {
        *(void *)(v9 + 24) = 0;
      }
      char v10 = *(unsigned char *)(v9 + 8);
      uint64_t result = v9 + 8;
      *(_DWORD *)(result + 8) = 0;
      if (v10) {
        uint64_t result = sub_188B4AC((uint64_t *)result);
      }
    }
  }
  if ((v5 & 0xF8) != 0)
  {
    *(_OWORD *)(v1 + 136) = 0u;
    *(_OWORD *)(v1 + 120) = 0u;
  }
  if ((v5 & 0x700) != 0)
  {
    *(void *)(v1 + 152) = 0;
    *(void *)(v1 + 160) = 0;
    *(_DWORD *)(v1 + 168) = 0;
  }
  char v12 = *(unsigned char *)(v1 + 8);
  uint64_t v11 = v1 + 8;
  *(_DWORD *)(v11 + 8) = 0;
  if (v12)
  {
    return sub_188B4AC((uint64_t *)v11);
  }
  return result;
}

char *sub_10E0DB8(uint64_t a1, char *a2, int32x2_t *a3)
{
  int v6 = 0;
  uint64_t v7 = (uint64_t *)(a1 + 8);
  char v8 = (uint64_t *)(a1 + 72);
  uint64_t v54 = a1 + 40;
  uint64_t v55 = a1 + 56;
  uint64_t v9 = a1 + 24;
  char v10 = (void *)(a1 + 96);
  while (1)
  {
LABEL_6:
    if ((unint64_t)a2 < *(void *)a3) {
      goto LABEL_7;
    }
    int v51 = a2 - a3[1].i32[0];
    if (a3[3].i32[1] == v51) {
      break;
    }
    a2 = sub_188BB90((uint64_t)a3, v51, a3[11].i32[1]);
    if (v52) {
      goto LABEL_129;
    }
LABEL_7:
    uint64_t v13 = a2 + 1;
    unsigned int v14 = *a2;
    if ((*a2 & 0x80000000) == 0)
    {
      unsigned int v15 = (v14 >> 3) - 1;
LABEL_9:
      switch(v15)
      {
        case 0u:
          if (v14 != 10) {
            goto LABEL_18;
          }
          *(_DWORD *)(a1 + 16) |= 1u;
          uint64_t v16 = *(void *)(a1 + 8);
          uint64_t v17 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
          if (v16) {
            uint64_t v17 = (uint64_t *)*v17;
          }
          uint64_t v18 = (std::string *)sub_1880F84(v10, v17);
          char v12 = (char *)sub_188C244(v18, v13, (uint64_t)a3);
          goto LABEL_5;
        case 1u:
          if (v14 != 16) {
            goto LABEL_18;
          }
          a2 = v13 + 1;
          unint64_t v23 = *v13;
          if (*v13 < 0)
          {
            int v39 = v23 + (*a2 << 7);
            unint64_t v23 = (v39 - 128);
            if (*a2 < 0)
            {
              uint64_t v49 = sub_188C138((uint64_t)v13, (v39 - 128));
              if (!v49)
              {
LABEL_123:
                uint64_t v13 = 0;
                goto LABEL_124;
              }
              a2 = (char *)v49;
              unint64_t v23 = v50;
              if (sub_138DE04(v50))
              {
LABEL_28:
                *(_DWORD *)(a1 + 16) |= 0x20u;
                *(_DWORD *)(a1 + 136) = v23;
                continue;
              }
            }
            else
            {
              a2 = v13 + 2;
              if (sub_138DE04(v39 - 128)) {
                goto LABEL_28;
              }
            }
          }
          else if (sub_138DE04(*v13))
          {
            goto LABEL_28;
          }
          if (*v7) {
            long long v40 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            long long v40 = (std::string *)sub_188DBD8(v7);
          }
          sub_188C020(2, v23, v40);
          continue;
        case 2u:
          if (v14 != 25) {
            goto LABEL_18;
          }
          v6 |= 8u;
          *(void *)(a1 + 120) = *(void *)v13;
          a2 = v13 + 8;
          continue;
        case 3u:
          if (v14 != 32) {
            goto LABEL_18;
          }
          v6 |= 0x10u;
          a2 = v13 + 1;
          uint64_t v24 = *v13;
          if ((*v13 & 0x80000000) == 0) {
            goto LABEL_35;
          }
          uint64_t v24 = v24 + (*a2 << 7) - 128;
          if (*a2 < 0)
          {
            a2 = (char *)sub_188C138((uint64_t)v13, v24);
            *(void *)(a1 + 128) = v45;
            if (!a2) {
              goto LABEL_123;
            }
          }
          else
          {
            a2 = v13 + 2;
LABEL_35:
            *(void *)(a1 + 128) = v24;
          }
          continue;
        case 4u:
          if (v14 == 42)
          {
            uint64_t v11 = v9;
            goto LABEL_4;
          }
          if (v14 != 41) {
            goto LABEL_18;
          }
          sub_10E15BC(a1, *(void *)v13);
          a2 = v13 + 8;
          continue;
        case 5u:
          if (v14 != 48) {
            goto LABEL_18;
          }
          v6 |= 0x40u;
          a2 = v13 + 1;
          int v25 = *v13;
          if ((*v13 & 0x80000000) == 0) {
            goto LABEL_40;
          }
          int v25 = v25 + (*a2 << 7) - 128;
          if (*a2 < 0)
          {
            a2 = (char *)sub_188C0D0((uint64_t)v13, v25);
            *(_DWORD *)(a1 + 140) = v46;
            if (!a2) {
              goto LABEL_123;
            }
          }
          else
          {
            a2 = v13 + 2;
LABEL_40:
            *(_DWORD *)(a1 + 140) = v25;
          }
          continue;
        case 6u:
          if (v14 != 57) {
            goto LABEL_18;
          }
          v6 |= 0x80u;
          *(void *)(a1 + 144) = *(void *)v13;
          a2 = v13 + 8;
          continue;
        case 7u:
          if (v14 == 66)
          {
            char v12 = (char *)sub_188C33C(v54, v13, a3);
            goto LABEL_5;
          }
          if (v14 != 69) {
            goto LABEL_18;
          }
          sub_10E1640(a1, *(_DWORD *)v13);
          a2 = v13 + 4;
          continue;
        case 8u:
          if (v14 == 74)
          {
            uint64_t v11 = v55;
LABEL_4:
            char v12 = (char *)sub_188C3D4(v11, v13, a3);
            goto LABEL_5;
          }
          if (v14 != 73) {
            goto LABEL_18;
          }
          sub_10E16C4(a1, *(void *)v13);
          a2 = v13 + 8;
          continue;
        case 9u:
          if (v14 != 81) {
            goto LABEL_18;
          }
          v6 |= 0x100u;
          *(void *)(a1 + 152) = *(void *)v13;
          a2 = v13 + 8;
          continue;
        case 0xAu:
          if (v14 != 88) {
            goto LABEL_18;
          }
          v6 |= 0x200u;
          a2 = v13 + 1;
          uint64_t v26 = *v13;
          if ((*v13 & 0x80000000) == 0) {
            goto LABEL_53;
          }
          uint64_t v26 = v26 + (*a2 << 7) - 128;
          if (*a2 < 0)
          {
            a2 = (char *)sub_188C138((uint64_t)v13, v26);
            *(void *)(a1 + 160) = v47;
            if (!a2) {
              goto LABEL_123;
            }
          }
          else
          {
            a2 = v13 + 2;
LABEL_53:
            *(void *)(a1 + 160) = v26;
          }
          continue;
        case 0xBu:
          if (v14 != 98) {
            goto LABEL_18;
          }
          a2 = v13 - 1;
          break;
        case 0xDu:
          if (v14 != 112) {
            goto LABEL_18;
          }
          v6 |= 0x400u;
          a2 = v13 + 1;
          int v34 = *v13;
          if ((*v13 & 0x80000000) == 0) {
            goto LABEL_71;
          }
          int v34 = v34 + (*a2 << 7) - 128;
          if (*a2 < 0)
          {
            a2 = (char *)sub_188C0D0((uint64_t)v13, v34);
            *(_DWORD *)(a1 + 168) = v48;
            if (!a2) {
              goto LABEL_123;
            }
          }
          else
          {
            a2 = v13 + 2;
LABEL_71:
            *(_DWORD *)(a1 + 168) = v34;
          }
          continue;
        case 0xEu:
          if (v14 != 122) {
            goto LABEL_18;
          }
          *(_DWORD *)(a1 + 16) |= 2u;
          int v35 = *(void **)(a1 + 104);
          if (v35)
          {
            int v57 = 0;
            uint64_t v36 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)v13, &v57);
            if (v36) {
              goto LABEL_75;
            }
          }
          else
          {
            long long v41 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
            if (*v7) {
              long long v41 = (void *)*v41;
            }
            int v35 = sub_10E49FC((uint64_t)v41);
            *(void *)(a1 + 104) = v35;
            int v57 = 0;
            uint64_t v36 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)v13, &v57);
            if (v36)
            {
LABEL_75:
              a2 = sub_10E03DC(v35, v36, a3);
              ++a3[11].i32[0];
              if (a3[10].i32[0]) {
                goto LABEL_123;
              }
              goto LABEL_91;
            }
          }
          a2 = 0;
          ++a3[11].i32[0];
          if (a3[10].i32[0]) {
            goto LABEL_123;
          }
LABEL_91:
          int v42 = v57;
          goto LABEL_97;
        case 0xFu:
          if (v14 != 130) {
            goto LABEL_18;
          }
          *(_DWORD *)(a1 + 16) |= 4u;
          uint64_t v37 = *(void **)(a1 + 112);
          if (v37)
          {
            int v58 = 0;
            int v38 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)v13, &v58);
            if (v38) {
              goto LABEL_80;
            }
          }
          else
          {
            int v43 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
            if (*v7) {
              int v43 = (void *)*v43;
            }
            uint64_t v37 = sub_10E49FC((uint64_t)v43);
            *(void *)(a1 + 112) = v37;
            int v58 = 0;
            int v38 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)v13, &v58);
            if (v38)
            {
LABEL_80:
              a2 = sub_10E03DC(v37, v38, a3);
              ++a3[11].i32[0];
              if (a3[10].i32[0]) {
                goto LABEL_123;
              }
              goto LABEL_96;
            }
          }
          a2 = 0;
          ++a3[11].i32[0];
          if (a3[10].i32[0]) {
            goto LABEL_123;
          }
LABEL_96:
          int v42 = v58;
LABEL_97:
          int v44 = a3[3].i32[1] + v42;
          a3[3].i32[1] = v44;
          *a3 = (int32x2_t)(*(void *)&a3[1] + (v44 & (v44 >> 31)));
          if (!a2) {
            goto LABEL_123;
          }
          continue;
        default:
          goto LABEL_18;
      }
      while (1)
      {
        unint64_t v27 = *(_DWORD **)(a1 + 88);
        if (v27 && (uint64_t v28 = *(int *)(a1 + 80), (int)v28 < *v27))
        {
          *(_DWORD *)(a1 + 80) = v28 + 1;
          uint64_t v29 = *(void *)&v27[2 * v28 + 2];
          int v56 = 0;
          uint64_t v30 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)a2 + 1, &v56);
          if (v30) {
            goto LABEL_62;
          }
        }
        else
        {
          uint64_t v31 = sub_15C1918(*v8);
          uint64_t v29 = sub_188CDC8((uint64_t)v8, v31);
          int v56 = 0;
          uint64_t v30 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)a2 + 1, &v56);
          if (v30)
          {
LABEL_62:
            a2 = sub_15B0A38(v29, v30, a3);
            ++a3[11].i32[0];
            if (a3[10].i32[0]) {
              goto LABEL_123;
            }
            goto LABEL_63;
          }
        }
        a2 = 0;
        ++a3[11].i32[0];
        if (a3[10].i32[0]) {
          goto LABEL_123;
        }
LABEL_63:
        int v32 = a3[3].i32[1] + v56;
        a3[3].i32[1] = v32;
        int32x2_t v33 = (int32x2_t)(*(void *)&a3[1] + (v32 & (v32 >> 31)));
        *a3 = v33;
        if (!a2) {
          goto LABEL_123;
        }
        if (*(void *)&v33 <= (unint64_t)a2 || *a2 != 98) {
          goto LABEL_6;
        }
      }
    }
    unsigned int v19 = v14 + (*v13 << 7);
    unsigned int v14 = v19 - 128;
    if (*v13 < 0)
    {
      uint64_t v13 = (char *)sub_188C180((uint64_t)a2, v19 - 128);
      unsigned int v14 = v20;
      unsigned int v15 = (v20 >> 3) - 1;
      if (v15 <= 0xF) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v13 = a2 + 2;
      unsigned int v15 = (v14 >> 3) - 1;
      if (v15 <= 0xF) {
        goto LABEL_9;
      }
    }
LABEL_18:
    if (v14) {
      BOOL v21 = (v14 & 7) == 4;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21)
    {
      if (v13) {
        a3[10].i32[0] = v14 - 1;
      }
      goto LABEL_124;
    }
    if (*v7) {
      uint64_t v22 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else {
      uint64_t v22 = (std::string *)sub_188DBD8(v7);
    }
    char v12 = (char *)sub_1885AC0(v14, v22, v13, a3);
LABEL_5:
    a2 = v12;
    if (!v12) {
      goto LABEL_123;
    }
  }
  if (v51 < 1)
  {
LABEL_129:
    uint64_t v13 = a2;
  }
  else if (a3[2])
  {
    uint64_t v13 = a2;
  }
  else
  {
    uint64_t v13 = 0;
  }
LABEL_124:
  *(_DWORD *)(a1 + 16) |= v6;
  return v13;
}

void sub_10E15BC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(unsigned int *)(a1 + 24);
  uint64_t v4 = (_DWORD *)(a1 + 24);
  if (v5 == *(_DWORD *)(a1 + 28))
  {
    sub_188CA54((unsigned int *)(a1 + 24), v5 + 1);
    *(void *)(*(void *)(a1 + 32) + 8 * v5) = a2;
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + 8 * v5) = a2;
  }
  *uint64_t v4 = v5 + 1;
}

void sub_10E1640(uint64_t a1, int a2)
{
  uint64_t v5 = *(unsigned int *)(a1 + 40);
  uint64_t v4 = (_DWORD *)(a1 + 40);
  if (v5 == *(_DWORD *)(a1 + 44))
  {
    sub_188C80C((unsigned int *)(a1 + 40), v5 + 1);
    *(_DWORD *)(*(void *)(a1 + 48) + 4 * v5) = a2;
  }
  else
  {
    *(_DWORD *)(*(void *)(a1 + 48) + 4 * v5) = a2;
  }
  *uint64_t v4 = v5 + 1;
}

void sub_10E16C4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(unsigned int *)(a1 + 56);
  uint64_t v4 = (_DWORD *)(a1 + 56);
  if (v5 == *(_DWORD *)(a1 + 60))
  {
    sub_188CA54((unsigned int *)(a1 + 56), v5 + 1);
    *(void *)(*(void *)(a1 + 64) + 8 * v5) = a2;
  }
  else
  {
    *(void *)(*(void *)(a1 + 64) + 8 * v5) = a2;
  }
  *uint64_t v4 = v5 + 1;
}

unsigned char *sub_10E1748(uint64_t a1, unsigned char *__dst, void *a3)
{
  uint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 1) == 0) {
    goto LABEL_10;
  }
  unint64_t v7 = *(void *)(a1 + 96) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v7 + 23) < 0)
  {
    int64_t v8 = *(void *)(v7 + 8);
    if (v8 > 127) {
      goto LABEL_14;
    }
  }
  else
  {
    int64_t v8 = *(unsigned __int8 *)(v7 + 23);
  }
  if (*a3 - (void)__dst + 14 < v8)
  {
LABEL_14:
    uint64_t v4 = sub_188A6CC(a3, 1, (void **)v7, __dst);
    if ((v6 & 0x20) == 0) {
      goto LABEL_19;
    }
    goto LABEL_11;
  }
  *long long __dst = 10;
  __dst[1] = v8;
  if (*(char *)(v7 + 23) >= 0) {
    uint64_t v9 = (const void *)v7;
  }
  else {
    uint64_t v9 = *(const void **)v7;
  }
  memcpy(v4 + 2, v9, v8);
  v4 += v8 + 2;
LABEL_10:
  if ((v6 & 0x20) == 0) {
    goto LABEL_19;
  }
LABEL_11:
  if (*a3 <= (unint64_t)v4)
  {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unint64_t v10 = *(int *)(a1 + 136);
    *uint64_t v4 = 16;
    v4[1] = v10;
    if (v10 <= 0x7F) {
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v10 = *(int *)(a1 + 136);
    *uint64_t v4 = 16;
    v4[1] = v10;
    if (v10 <= 0x7F)
    {
LABEL_13:
      v4 += 2;
      goto LABEL_19;
    }
  }
  v4[1] = v10 | 0x80;
  unint64_t v11 = v10 >> 7;
  v4[2] = v10 >> 7;
  v4 += 3;
  if (v10 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unint64_t v12 = v11 >> 14;
      v11 >>= 7;
      *v4++ = v11;
    }
    while (v12);
  }
LABEL_19:
  if ((v6 & 8) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v13 = *(void *)(a1 + 120);
    *uint64_t v4 = 25;
    *(void *)(v4 + 1) = v13;
    v4 += 9;
  }
  if ((v6 & 0x10) != 0)
  {
    if (*a3 <= (unint64_t)v4)
    {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      unint64_t v14 = *(void *)(a1 + 128);
      *uint64_t v4 = 32;
      v4[1] = v14;
      if (v14 <= 0x7F) {
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v14 = *(void *)(a1 + 128);
      *uint64_t v4 = 32;
      v4[1] = v14;
      if (v14 <= 0x7F)
      {
LABEL_26:
        v4 += 2;
        goto LABEL_30;
      }
    }
    v4[1] = v14 | 0x80;
    unint64_t v15 = v14 >> 7;
    v4[2] = v14 >> 7;
    v4 += 3;
    if (v14 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unint64_t v16 = v15 >> 14;
        v15 >>= 7;
        *v4++ = v15;
      }
      while (v16);
    }
  }
LABEL_30:
  int v17 = *(_DWORD *)(a1 + 24);
  if (v17 >= 1)
  {
    if (*a3 <= (unint64_t)v4)
    {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      int v17 = *(_DWORD *)(a1 + 24);
    }
    int v18 = 8 * v17;
    *uint64_t v4 = 42;
    unsigned int v19 = v4 + 1;
    unsigned int v20 = v18;
    if (v18 >= 0x80)
    {
      do
      {
        *v19++ = v20 | 0x80;
        unsigned int v25 = v20 >> 14;
        v20 >>= 7;
      }
      while (v25);
      uint64_t v4 = v19 - 1;
    }
    BOOL v21 = v4 + 2;
    *unsigned int v19 = v20;
    uint64_t v22 = *(char **)(a1 + 32);
    uint64_t v23 = v18;
    if (*a3 - (void)v21 < v18)
    {
      uint64_t v4 = (unsigned char *)sub_188A528(a3, v22, v18, v21);
      if ((v6 & 0x40) == 0) {
        goto LABEL_47;
      }
      goto LABEL_37;
    }
    memcpy(v21, v22, v18);
    uint64_t v4 = (char *)v21 + v23;
  }
  if ((v6 & 0x40) == 0) {
    goto LABEL_47;
  }
LABEL_37:
  if (*a3 <= (unint64_t)v4)
  {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unsigned int v24 = *(_DWORD *)(a1 + 140);
    *uint64_t v4 = 48;
    v4[1] = v24;
    if (v24 <= 0x7F) {
      goto LABEL_39;
    }
  }
  else
  {
    unsigned int v24 = *(_DWORD *)(a1 + 140);
    *uint64_t v4 = 48;
    v4[1] = v24;
    if (v24 <= 0x7F)
    {
LABEL_39:
      v4 += 2;
      goto LABEL_47;
    }
  }
  v4[1] = v24 | 0x80;
  unsigned int v26 = v24 >> 7;
  v4[2] = v24 >> 7;
  v4 += 3;
  if (v24 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unsigned int v27 = v26 >> 14;
      v26 >>= 7;
      *v4++ = v26;
    }
    while (v27);
  }
LABEL_47:
  if ((v6 & 0x80) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v28 = *(void *)(a1 + 144);
    *uint64_t v4 = 57;
    *(void *)(v4 + 1) = v28;
    v4 += 9;
  }
  int v29 = *(_DWORD *)(a1 + 40);
  if (v29 >= 1)
  {
    if (*a3 <= (unint64_t)v4)
    {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      int v29 = *(_DWORD *)(a1 + 40);
    }
    int v30 = 4 * v29;
    *uint64_t v4 = 66;
    uint64_t v31 = v4 + 1;
    unsigned int v32 = v30;
    if (v30 >= 0x80)
    {
      do
      {
        *v31++ = v32 | 0x80;
        unsigned int v45 = v32 >> 14;
        v32 >>= 7;
      }
      while (v45);
      uint64_t v4 = v31 - 1;
    }
    int32x2_t v33 = v4 + 2;
    *uint64_t v31 = v32;
    int v34 = *(char **)(a1 + 48);
    uint64_t v35 = v30;
    if (*a3 - (void)v33 < v30)
    {
      uint64_t v4 = (unsigned char *)sub_188A528(a3, v34, v30, v33);
      int v36 = *(_DWORD *)(a1 + 56);
      if (v36 < 1) {
        goto LABEL_63;
      }
      goto LABEL_58;
    }
    memcpy(v33, v34, v30);
    uint64_t v4 = (char *)v33 + v35;
  }
  int v36 = *(_DWORD *)(a1 + 56);
  if (v36 < 1) {
    goto LABEL_63;
  }
LABEL_58:
  if (*a3 <= (unint64_t)v4)
  {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    int v36 = *(_DWORD *)(a1 + 56);
  }
  int v37 = 8 * v36;
  *uint64_t v4 = 74;
  int v38 = v4 + 1;
  unsigned int v39 = v37;
  if (v37 >= 0x80)
  {
    do
    {
      *v38++ = v39 | 0x80;
      unsigned int v46 = v39 >> 14;
      v39 >>= 7;
    }
    while (v46);
    uint64_t v4 = v38 - 1;
  }
  long long v40 = v4 + 2;
  *int v38 = v39;
  long long v41 = *(char **)(a1 + 64);
  uint64_t v42 = v37;
  if (*a3 - (void)v40 < v37)
  {
    uint64_t v4 = (unsigned char *)sub_188A528(a3, v41, v37, v40);
  }
  else
  {
    memcpy(v40, v41, v37);
    uint64_t v4 = (char *)v40 + v42;
  }
LABEL_63:
  if ((v6 & 0x100) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v43 = *(void *)(a1 + 152);
    *uint64_t v4 = 81;
    *(void *)(v4 + 1) = v43;
    v4 += 9;
  }
  if ((v6 & 0x200) != 0)
  {
    if (*a3 <= (unint64_t)v4)
    {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      unint64_t v44 = *(void *)(a1 + 160);
      *uint64_t v4 = 88;
      v4[1] = v44;
      if (v44 <= 0x7F) {
        goto LABEL_70;
      }
    }
    else
    {
      unint64_t v44 = *(void *)(a1 + 160);
      *uint64_t v4 = 88;
      v4[1] = v44;
      if (v44 <= 0x7F)
      {
LABEL_70:
        v4 += 2;
        goto LABEL_81;
      }
    }
    v4[1] = v44 | 0x80;
    unint64_t v47 = v44 >> 7;
    v4[2] = v44 >> 7;
    v4 += 3;
    if (v44 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unint64_t v48 = v47 >> 14;
        v47 >>= 7;
        *v4++ = v47;
      }
      while (v48);
    }
  }
LABEL_81:
  int v49 = *(_DWORD *)(a1 + 80);
  if (v49)
  {
    for (int i = 0; i != v49; ++i)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v52 = *(void *)(*(void *)(a1 + 88) + 8 * i + 8);
      *uint64_t v4 = 98;
      unsigned int v53 = *(_DWORD *)(v52 + 44);
      v4[1] = v53;
      if (v53 > 0x7F) {
        int v51 = sub_188A9CC(v53, v4 + 1);
      }
      else {
        int v51 = v4 + 2;
      }
      uint64_t v4 = sub_15B0C0C(v52, v51, a3);
    }
  }
  if ((v6 & 0x400) != 0)
  {
    if (*a3 <= (unint64_t)v4)
    {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      unsigned int v54 = *(_DWORD *)(a1 + 168);
      *uint64_t v4 = 112;
      v4[1] = v54;
      if (v54 <= 0x7F) {
        goto LABEL_92;
      }
    }
    else
    {
      unsigned int v54 = *(_DWORD *)(a1 + 168);
      *uint64_t v4 = 112;
      v4[1] = v54;
      if (v54 <= 0x7F)
      {
LABEL_92:
        v4 += 2;
        goto LABEL_96;
      }
    }
    v4[1] = v54 | 0x80;
    unsigned int v55 = v54 >> 7;
    v4[2] = v54 >> 7;
    v4 += 3;
    if (v54 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unsigned int v56 = v55 >> 14;
        v55 >>= 7;
        *v4++ = v55;
      }
      while (v56);
    }
  }
LABEL_96:
  if ((v6 & 2) == 0)
  {
    if ((v6 & 4) == 0) {
      goto LABEL_98;
    }
LABEL_106:
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v61 = *(void *)(a1 + 112);
    *(_WORD *)uint64_t v4 = 386;
    unsigned int v62 = *(_DWORD *)(v61 + 20);
    v4[2] = v62;
    if (v62 > 0x7F) {
      std::string::size_type v63 = sub_188A9CC(v62, v4 + 2);
    }
    else {
      std::string::size_type v63 = v4 + 3;
    }
    uint64_t v4 = sub_10E060C(v61, v63, a3);
    uint64_t v57 = *(void *)(a1 + 8);
    if ((v57 & 1) == 0) {
      return v4;
    }
    goto LABEL_113;
  }
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v58 = *(void *)(a1 + 104);
  *uint64_t v4 = 122;
  unsigned int v59 = *(_DWORD *)(v58 + 20);
  v4[1] = v59;
  if (v59 > 0x7F)
  {
    std::string v60 = sub_188A9CC(v59, v4 + 1);
    uint64_t v4 = sub_10E060C(v58, v60, a3);
    if ((v6 & 4) != 0) {
      goto LABEL_106;
    }
  }
  else
  {
    uint64_t v4 = sub_10E060C(v58, v4 + 2, a3);
    if ((v6 & 4) != 0) {
      goto LABEL_106;
    }
  }
LABEL_98:
  uint64_t v57 = *(void *)(a1 + 8);
  if ((v57 & 1) == 0) {
    return v4;
  }
LABEL_113:
  unint64_t v65 = v57 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v65 + 31) < 0)
  {
    uint64_t v66 = *(void **)(v65 + 8);
    uint64_t v67 = *(void *)(v65 + 16);
  }
  else
  {
    uint64_t v66 = (void *)(v65 + 8);
    LODWORD(v67) = *(unsigned __int8 *)(v65 + 31);
  }
  uint64_t v68 = (int)v67;
  if (*a3 - (void)v4 >= (int)v67)
  {
    memcpy(v4, v66, (int)v67);
    v4 += v68;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v66, v67, v4);
}

uint64_t sub_10E1F90(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  uint64_t v3 = 8 * v2;
  if (!v2)
  {
    uint64_t v5 = *(unsigned int *)(a1 + 40);
    uint64_t v6 = 4 * v5;
    if (!v5) {
      goto LABEL_12;
    }
    goto LABEL_8;
  }
  if ((v3 & 0x80000000) != 0) {
    uint64_t v4 = 10;
  }
  else {
    uint64_t v4 = (9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6;
  }
  v3 += v4 + 1;
  uint64_t v7 = *(unsigned int *)(a1 + 40);
  uint64_t v6 = 4 * v7;
  if (v7)
  {
LABEL_8:
    if ((v6 & 0x80000000) != 0) {
      uint64_t v8 = 10;
    }
    else {
      uint64_t v8 = (9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6;
    }
    v3 += v8 + 1;
  }
LABEL_12:
  uint64_t v9 = v3 + v6;
  uint64_t v10 = *(unsigned int *)(a1 + 56);
  uint64_t v11 = 8 * v10;
  if (v10)
  {
    uint64_t v12 = 10;
    uint64_t v13 = (9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6;
    if ((int)v11 >= 0) {
      uint64_t v12 = v13;
    }
    v9 += v12 + 1;
  }
  uint64_t v14 = *(int *)(a1 + 80);
  uint64_t v15 = v9 + v11 + v14;
  uint64_t v16 = *(void *)(a1 + 88);
  if (v16) {
    int v17 = (uint64_t *)(v16 + 8);
  }
  else {
    int v17 = 0;
  }
  if (v14)
  {
    uint64_t v18 = 8 * v14;
    do
    {
      uint64_t v19 = *v17++;
      uint64_t v20 = sub_15B0D90(v19);
      v15 += v20 + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6);
      v18 -= 8;
    }
    while (v18);
  }
  int v21 = *(_DWORD *)(a1 + 16);
  if ((_BYTE)v21)
  {
    if (v21)
    {
      unint64_t v25 = *(void *)(a1 + 96) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v26 = *(unsigned __int8 *)(v25 + 23);
      uint64_t v27 = *(void *)(v25 + 8);
      if ((v26 & 0x80u) == 0) {
        uint64_t v27 = v26;
      }
      v15 += v27 + ((9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v21 & 2) == 0)
      {
LABEL_25:
        if ((v21 & 4) == 0) {
          goto LABEL_26;
        }
        goto LABEL_62;
      }
    }
    else if ((v21 & 2) == 0)
    {
      goto LABEL_25;
    }
    uint64_t v28 = *(void *)(a1 + 104);
    int v29 = *(_DWORD *)(v28 + 16);
    if ((v29 & 3) == 0)
    {
      uint64_t v30 = 0;
      goto LABEL_60;
    }
    if (v29)
    {
      int v31 = *(_DWORD *)(v28 + 24);
      if (v31 < 0)
      {
        uint64_t v30 = 11;
        if ((v29 & 2) == 0) {
          goto LABEL_60;
        }
      }
      else
      {
        uint64_t v30 = ((9 * (__clz(v31 | 1) ^ 0x1F) + 73) >> 6) + 1;
        if ((v29 & 2) == 0) {
          goto LABEL_60;
        }
      }
    }
    else
    {
      uint64_t v30 = 0;
      if ((v29 & 2) == 0) {
        goto LABEL_60;
      }
    }
    int v32 = *(_DWORD *)(v28 + 28);
    if (v32 < 0) {
      uint64_t v33 = 11;
    }
    else {
      uint64_t v33 = ((9 * (__clz(v32 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v30 += v33;
LABEL_60:
    uint64_t v34 = *(void *)(v28 + 8);
    if (v34)
    {
      unint64_t v49 = v34 & 0xFFFFFFFFFFFFFFFCLL;
      if (*(char *)(v49 + 31) < 0) {
        uint64_t v50 = *(void *)(v49 + 16);
      }
      else {
        uint64_t v50 = *(unsigned __int8 *)(v49 + 31);
      }
      v30 += v50;
    }
    *(_DWORD *)(v28 + 20) = v30;
    v15 += v30 + ((9 * (__clz(v30 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v21 & 4) == 0)
    {
LABEL_26:
      uint64_t v22 = v15 + 9;
      if ((v21 & 8) == 0) {
        uint64_t v22 = v15;
      }
      if ((v21 & 0x10) == 0) {
        goto LABEL_29;
      }
      goto LABEL_79;
    }
LABEL_62:
    uint64_t v35 = *(void *)(a1 + 112);
    int v36 = *(_DWORD *)(v35 + 16);
    if ((v36 & 3) == 0)
    {
      uint64_t v37 = 0;
      goto LABEL_75;
    }
    if (v36)
    {
      int v38 = *(_DWORD *)(v35 + 24);
      if (v38 < 0)
      {
        uint64_t v37 = 11;
        if ((v36 & 2) == 0) {
          goto LABEL_75;
        }
      }
      else
      {
        uint64_t v37 = ((9 * (__clz(v38 | 1) ^ 0x1F) + 73) >> 6) + 1;
        if ((v36 & 2) == 0) {
          goto LABEL_75;
        }
      }
    }
    else
    {
      uint64_t v37 = 0;
      if ((v36 & 2) == 0) {
        goto LABEL_75;
      }
    }
    int v39 = *(_DWORD *)(v35 + 28);
    if (v39 < 0) {
      uint64_t v40 = 11;
    }
    else {
      uint64_t v40 = ((9 * (__clz(v39 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v37 += v40;
LABEL_75:
    uint64_t v41 = *(void *)(v35 + 8);
    if (v41)
    {
      unint64_t v51 = v41 & 0xFFFFFFFFFFFFFFFCLL;
      if (*(char *)(v51 + 31) < 0) {
        uint64_t v52 = *(void *)(v51 + 16);
      }
      else {
        uint64_t v52 = *(unsigned __int8 *)(v51 + 31);
      }
      v37 += v52;
    }
    *(_DWORD *)(v35 + 20) = v37;
    uint64_t v42 = v15 + v37 + ((9 * (__clz(v37 | 1) ^ 0x1F) + 73) >> 6) + 2;
    uint64_t v22 = v42 + 9;
    if ((v21 & 8) == 0) {
      uint64_t v22 = v42;
    }
    if ((v21 & 0x10) == 0)
    {
LABEL_29:
      if ((v21 & 0x20) == 0) {
        goto LABEL_30;
      }
      goto LABEL_80;
    }
LABEL_79:
    v22 += ((9 * (__clz(*(void *)(a1 + 128) | 1) ^ 0x3F) + 73) >> 6) + 1;
    if ((v21 & 0x20) == 0)
    {
LABEL_30:
      if ((v21 & 0x40) == 0) {
        goto LABEL_32;
      }
      goto LABEL_31;
    }
LABEL_80:
    int v43 = *(_DWORD *)(a1 + 136);
    uint64_t v44 = ((9 * (__clz(v43 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if (v43 >= 0) {
      uint64_t v45 = v44;
    }
    else {
      uint64_t v45 = 11;
    }
    v22 += v45;
    if ((v21 & 0x40) == 0) {
      goto LABEL_32;
    }
LABEL_31:
    v22 += ((9 * (__clz(*(_DWORD *)(a1 + 140) | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_32:
    if ((v21 & 0x80) != 0) {
      uint64_t v15 = v22 + 9;
    }
    else {
      uint64_t v15 = v22;
    }
  }
  if ((v21 & 0x700) != 0)
  {
    if ((v21 & 0x100) != 0) {
      v15 += 9;
    }
    if ((v21 & 0x200) != 0) {
      v15 += ((9 * (__clz(*(void *)(a1 + 160) | 1) ^ 0x3F) + 73) >> 6) + 1;
    }
    if ((v21 & 0x400) != 0) {
      v15 += ((9 * (__clz(*(_DWORD *)(a1 + 168) | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  uint64_t v23 = *(void *)(a1 + 8);
  if (v23)
  {
    unint64_t v46 = v23 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v46 + 31) < 0) {
      uint64_t v47 = *(void *)(v46 + 16);
    }
    else {
      uint64_t v47 = *(unsigned __int8 *)(v46 + 31);
    }
    uint64_t v48 = v47 + v15;
    *(_DWORD *)(a1 + 20) = v48;
    return v48;
  }
  else
  {
    *(_DWORD *)(a1 + 20) = v15;
    return v15;
  }
}

void sub_10E2444(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = (_DWORD *)(a1 + 24);
    uint64_t v6 = *(int *)(a1 + 24);
    sub_188CA54((unsigned int *)(a1 + 24), v6 + v4);
    uint64_t v7 = *(void *)(a1 + 32);
    *v5 += *(_DWORD *)(a2 + 24);
    memcpy((void *)(v7 + 8 * v6), *(const void **)(a2 + 32), 8 * *(int *)(a2 + 24));
  }
  int v8 = *(_DWORD *)(a2 + 40);
  if (v8)
  {
    uint64_t v9 = *(int *)(a1 + 40);
    sub_188C80C((unsigned int *)(a1 + 40), v9 + v8);
    uint64_t v10 = *(void *)(a1 + 48);
    *(_DWORD *)(a1 + 40) += *(_DWORD *)(a2 + 40);
    memcpy((void *)(v10 + 4 * v9), *(const void **)(a2 + 48), 4 * *(int *)(a2 + 40));
  }
  int v11 = *(_DWORD *)(a2 + 56);
  if (v11)
  {
    uint64_t v12 = *(int *)(a1 + 56);
    sub_188CA54((unsigned int *)(a1 + 56), v12 + v11);
    uint64_t v13 = *(void *)(a1 + 64);
    *(_DWORD *)(a1 + 56) += *(_DWORD *)(a2 + 56);
    memcpy((void *)(v13 + 8 * v12), *(const void **)(a2 + 64), 8 * *(int *)(a2 + 56));
  }
  int v14 = *(_DWORD *)(a2 + 80);
  if (v14)
  {
    uint64_t v15 = (uint64_t *)(*(void *)(a2 + 88) + 8);
    uint64_t v16 = (uint64_t *)sub_188CCE4(a1 + 72, *(_DWORD *)(a2 + 80));
    sub_10E4FFC((uint64_t *)(a1 + 72), v16, v15, v14, **(_DWORD **)(a1 + 88) - *(_DWORD *)(a1 + 80));
    int v17 = *(_DWORD *)(a1 + 80) + v14;
    *(_DWORD *)(a1 + 80) = v17;
    uint64_t v18 = *(int **)(a1 + 88);
    if (*v18 < v17) {
      *uint64_t v18 = v17;
    }
  }
  int v19 = *(_DWORD *)(a2 + 16);
  if ((_BYTE)v19)
  {
    if (v19)
    {
      uint64_t v20 = (long long *)(*(void *)(a2 + 96) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v21 = *(void *)(a1 + 8);
      uint64_t v22 = (uint64_t *)(v21 & 0xFFFFFFFFFFFFFFFCLL);
      if (v21) {
        uint64_t v22 = (uint64_t *)*v22;
      }
      sub_1881DF4((std::string **)(a1 + 96), v20, v22);
    }
    if ((v19 & 2) != 0)
    {
      *(_DWORD *)(a1 + 16) |= 2u;
      uint64_t v23 = *(void **)(a1 + 104);
      if (!v23)
      {
        uint64_t v24 = *(void *)(a1 + 8);
        unint64_t v25 = (void *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
        if (v24) {
          unint64_t v25 = (void *)*v25;
        }
        uint64_t v23 = sub_10E49FC((uint64_t)v25);
        *(void *)(a1 + 104) = v23;
      }
      uint64_t v26 = *(uint64_t (****)())(a2 + 104);
      if (!v26) {
        uint64_t v26 = &off_24F7610;
      }
      int v27 = *((_DWORD *)v26 + 4);
      if ((v27 & 3) != 0)
      {
        if (v27) {
          *((_DWORD *)v23 + 6) = *((_DWORD *)v26 + 6);
        }
        if ((v27 & 2) != 0) {
          *((_DWORD *)v23 + 7) = *((_DWORD *)v26 + 7);
        }
        *((_DWORD *)v23 + 4) |= v27;
      }
      unint64_t v28 = (unint64_t)v26[1];
      if (v28) {
        sub_188B4F8(v23 + 1, (v28 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
    }
    if ((v19 & 4) != 0)
    {
      *(_DWORD *)(a1 + 16) |= 4u;
      int v29 = *(void **)(a1 + 112);
      if (!v29)
      {
        uint64_t v30 = *(void *)(a1 + 8);
        int v31 = (void *)(v30 & 0xFFFFFFFFFFFFFFFCLL);
        if (v30) {
          int v31 = (void *)*v31;
        }
        int v29 = sub_10E49FC((uint64_t)v31);
        *(void *)(a1 + 112) = v29;
      }
      int v32 = *(uint64_t (****)())(a2 + 112);
      if (!v32) {
        int v32 = &off_24F7610;
      }
      int v33 = *((_DWORD *)v32 + 4);
      if ((v33 & 3) != 0)
      {
        if (v33) {
          *((_DWORD *)v29 + 6) = *((_DWORD *)v32 + 6);
        }
        if ((v33 & 2) != 0) {
          *((_DWORD *)v29 + 7) = *((_DWORD *)v32 + 7);
        }
        *((_DWORD *)v29 + 4) |= v33;
      }
      unint64_t v34 = (unint64_t)v32[1];
      if (v34) {
        sub_188B4F8(v29 + 1, (v34 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
    }
    if ((v19 & 8) != 0)
    {
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      if ((v19 & 0x10) == 0)
      {
LABEL_47:
        if ((v19 & 0x20) == 0) {
          goto LABEL_48;
        }
        goto LABEL_64;
      }
    }
    else if ((v19 & 0x10) == 0)
    {
      goto LABEL_47;
    }
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    if ((v19 & 0x20) == 0)
    {
LABEL_48:
      if ((v19 & 0x40) == 0) {
        goto LABEL_49;
      }
      goto LABEL_65;
    }
LABEL_64:
    *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
    if ((v19 & 0x40) == 0)
    {
LABEL_49:
      if ((v19 & 0x80) == 0)
      {
LABEL_51:
        *(_DWORD *)(a1 + 16) |= v19;
        goto LABEL_52;
      }
LABEL_50:
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      goto LABEL_51;
    }
LABEL_65:
    *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
    if ((v19 & 0x80) == 0) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }
LABEL_52:
  if ((v19 & 0x700) == 0) {
    goto LABEL_58;
  }
  if ((v19 & 0x100) == 0)
  {
    if ((v19 & 0x200) == 0) {
      goto LABEL_55;
    }
LABEL_68:
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    if ((v19 & 0x400) == 0) {
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  if ((v19 & 0x200) != 0) {
    goto LABEL_68;
  }
LABEL_55:
  if ((v19 & 0x400) != 0) {
LABEL_56:
  }
    *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
LABEL_57:
  *(_DWORD *)(a1 + 16) |= v19;
LABEL_58:
  uint64_t v35 = *(void *)(a2 + 8);
  if (v35)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v35 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

BOOL sub_10E27D8(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  do
  {
    int v3 = v2;
    if ((int)v2 < 1) {
      break;
    }
    uint64_t v4 = v2 - 1;
    char v5 = sub_15B0F18(*(void *)(*(void *)(a1 + 88) + 8 * v2));
    uint64_t v2 = v4;
  }
  while ((v5 & 1) != 0);
  return v3 < 1;
}

char *sub_10E2830@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_20B9390;
  strcpy(result, "geo3.internal.RouteHandleSubpath");
  return result;
}

void *sub_10E287C(void *a1)
{
  int v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }
  return a1;
}

void sub_10E291C(void *a1)
{
  int v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }

  operator delete();
}

uint64_t sub_10E29DC(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 0xF) != 0)
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    *(void *)(a1 + 40) = 0;
  }
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_10E2A08(uint64_t a1, char *a2, int32x2_t *a3)
{
  int v6 = 0;
  uint64_t v7 = (uint64_t *)(a1 + 8);
  while ((unint64_t)a2 < *(void *)a3)
  {
LABEL_5:
    int v8 = a2 + 1;
    unsigned int v9 = *a2;
    if (*a2 < 0)
    {
      unsigned int v13 = v9 + (*v8 << 7);
      unsigned int v9 = v13 - 128;
      if (*v8 < 0)
      {
        int v8 = (char *)sub_188C180((uint64_t)a2, v13 - 128);
        unsigned int v9 = v21;
        unsigned int v10 = (v21 >> 3) - 1;
        if (v10 <= 3) {
          goto LABEL_7;
        }
      }
      else
      {
        int v8 = a2 + 2;
        unsigned int v10 = (v9 >> 3) - 1;
        if (v10 <= 3) {
          goto LABEL_7;
        }
      }
LABEL_32:
      if (v9) {
        BOOL v22 = (v9 & 7) == 4;
      }
      else {
        BOOL v22 = 1;
      }
      if (v22)
      {
        if (v8) {
          a3[10].i32[0] = v9 - 1;
        }
        goto LABEL_52;
      }
      if (*v7)
      {
        a2 = (char *)sub_1885AC0(v9, (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8), v8, a3);
        if (!a2) {
          goto LABEL_49;
        }
      }
      else
      {
        unint64_t v28 = (std::string *)sub_188DBD8(v7);
        a2 = (char *)sub_1885AC0(v9, v28, v8, a3);
        if (!a2)
        {
LABEL_49:
          int v8 = 0;
          goto LABEL_52;
        }
      }
    }
    else
    {
      unsigned int v10 = (v9 >> 3) - 1;
LABEL_7:
      switch(v10)
      {
        case 0u:
          if (v9 != 8) {
            goto LABEL_32;
          }
          v6 |= 1u;
          a2 = v8 + 1;
          uint64_t v11 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_12;
          }
          int v12 = *a2;
          uint64_t v11 = v11 + (v12 << 7) - 128;
          if (v12 < 0)
          {
            a2 = (char *)sub_188C138((uint64_t)v8, v11);
            *(void *)(a1 + 24) = v23;
            if (!a2) {
              goto LABEL_49;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_12:
            *(void *)(a1 + 24) = v11;
          }
          continue;
        case 1u:
          if (v9 != 16) {
            goto LABEL_32;
          }
          v6 |= 2u;
          a2 = v8 + 1;
          uint64_t v14 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_20;
          }
          int v15 = *a2;
          uint64_t v14 = v14 + (v15 << 7) - 128;
          if (v15 < 0)
          {
            a2 = (char *)sub_188C138((uint64_t)v8, v14);
            *(void *)(a1 + 32) = v24;
            if (!a2) {
              goto LABEL_49;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_20:
            *(void *)(a1 + 32) = v14;
          }
          continue;
        case 2u:
          if (v9 != 24) {
            goto LABEL_32;
          }
          v6 |= 4u;
          a2 = v8 + 1;
          uint64_t v16 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_25;
          }
          int v17 = *a2;
          uint64_t v16 = v16 + (v17 << 7) - 128;
          if (v17 < 0)
          {
            a2 = (char *)sub_188C138((uint64_t)v8, v16);
            *(void *)(a1 + 40) = v25;
            if (!a2) {
              goto LABEL_49;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_25:
            *(void *)(a1 + 40) = v16;
          }
          break;
        case 3u:
          if (v9 != 32) {
            goto LABEL_32;
          }
          v6 |= 8u;
          a2 = v8 + 1;
          int v18 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_3;
          }
          int v19 = *a2;
          int v18 = v18 + (v19 << 7) - 128;
          if (v19 < 0)
          {
            a2 = (char *)sub_188C0D0((uint64_t)v8, v18);
            *(_DWORD *)(a1 + 48) = v20;
            if (!a2) {
              goto LABEL_49;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_3:
            *(_DWORD *)(a1 + 48) = v18;
          }
          continue;
        default:
          goto LABEL_32;
      }
    }
  }
  int v26 = a2 - a3[1].i32[0];
  if (a3[3].i32[1] != v26)
  {
    a2 = sub_188BB90((uint64_t)a3, v26, a3[11].i32[1]);
    if (v27) {
      goto LABEL_57;
    }
    goto LABEL_5;
  }
  if (v26 < 1)
  {
LABEL_57:
    int v8 = a2;
    goto LABEL_52;
  }
  if (a3[2]) {
    int v8 = a2;
  }
  else {
    int v8 = 0;
  }
LABEL_52:
  *(_DWORD *)(a1 + 16) |= v6;
  return v8;
}

unsigned char *sub_10E2D24(uint64_t a1, unsigned char *__dst, _DWORD *a3)
{
  uint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*(void *)a3 <= (unint64_t)__dst)
    {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)__dst);
      unint64_t v7 = *(void *)(a1 + 24);
      *uint64_t v4 = 8;
      v4[1] = v7;
      if (v7 <= 0x7F) {
        goto LABEL_4;
      }
    }
    else
    {
      unint64_t v7 = *(void *)(a1 + 24);
      *long long __dst = 8;
      __dst[1] = v7;
      if (v7 <= 0x7F)
      {
LABEL_4:
        v4 += 2;
        goto LABEL_8;
      }
    }
    v4[1] = v7 | 0x80;
    unint64_t v8 = v7 >> 7;
    v4[2] = v7 >> 7;
    v4 += 3;
    if (v7 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unint64_t v9 = v8 >> 14;
        v8 >>= 7;
        *v4++ = v8;
      }
      while (v9);
    }
  }
LABEL_8:
  if ((v6 & 2) == 0) {
    goto LABEL_15;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unint64_t v10 = *(void *)(a1 + 32);
    *uint64_t v4 = 16;
    v4[1] = v10;
    if (v10 <= 0x7F) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + 32);
    *uint64_t v4 = 16;
    v4[1] = v10;
    if (v10 <= 0x7F)
    {
LABEL_11:
      v4 += 2;
      goto LABEL_15;
    }
  }
  v4[1] = v10 | 0x80;
  unint64_t v11 = v10 >> 7;
  v4[2] = v10 >> 7;
  v4 += 3;
  if (v10 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unint64_t v12 = v11 >> 14;
      v11 >>= 7;
      *v4++ = v11;
    }
    while (v12);
  }
LABEL_15:
  if ((v6 & 4) == 0) {
    goto LABEL_22;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unint64_t v13 = *(void *)(a1 + 40);
    *uint64_t v4 = 24;
    v4[1] = v13;
    if (v13 <= 0x7F) {
      goto LABEL_18;
    }
  }
  else
  {
    unint64_t v13 = *(void *)(a1 + 40);
    *uint64_t v4 = 24;
    v4[1] = v13;
    if (v13 <= 0x7F)
    {
LABEL_18:
      v4 += 2;
      goto LABEL_22;
    }
  }
  v4[1] = v13 | 0x80;
  unint64_t v14 = v13 >> 7;
  v4[2] = v13 >> 7;
  v4 += 3;
  if (v13 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unint64_t v15 = v14 >> 14;
      v14 >>= 7;
      *v4++ = v14;
    }
    while (v15);
  }
LABEL_22:
  if ((v6 & 8) == 0) {
    goto LABEL_29;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unsigned int v16 = *(_DWORD *)(a1 + 48);
    *uint64_t v4 = 32;
    v4[1] = v16;
    if (v16 <= 0x7F) {
      goto LABEL_25;
    }
  }
  else
  {
    unsigned int v16 = *(_DWORD *)(a1 + 48);
    *uint64_t v4 = 32;
    v4[1] = v16;
    if (v16 <= 0x7F)
    {
LABEL_25:
      v4 += 2;
      goto LABEL_29;
    }
  }
  v4[1] = v16 | 0x80;
  unsigned int v17 = v16 >> 7;
  v4[2] = v16 >> 7;
  v4 += 3;
  if (v16 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unsigned int v18 = v17 >> 14;
      v17 >>= 7;
      *v4++ = v17;
    }
    while (v18);
  }
LABEL_29:
  uint64_t v19 = *(void *)(a1 + 8);
  if ((v19 & 1) == 0) {
    return v4;
  }
  unint64_t v21 = v19 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v21 + 31) < 0)
  {
    BOOL v22 = *(char **)(v21 + 8);
    uint64_t v23 = *(void *)(v21 + 16);
  }
  else
  {
    BOOL v22 = (char *)(v21 + 8);
    LODWORD(v23) = *(unsigned __int8 *)(v21 + 31);
  }
  uint64_t v24 = (int)v23;
  if (*(void *)a3 - (void)v4 < (int)v23)
  {
    return (unsigned char *)sub_188A528(a3, v22, v23, v4);
  }
  else
  {
    memcpy(v4, v22, (int)v23);
    return &v4[v24];
  }
}

unint64_t sub_10E3020(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 0xF) != 0)
  {
    if (v1)
    {
      unint64_t v2 = ((9 * (__clz(*(void *)(a1 + 24) | 1) ^ 0x3F) + 73) >> 6) + 1;
      if ((v1 & 2) == 0) {
        goto LABEL_9;
      }
    }
    else
    {
      unint64_t v2 = 0;
      if ((v1 & 2) == 0)
      {
LABEL_9:
        if ((v1 & 4) != 0)
        {
          v2 += ((9 * (__clz(*(void *)(a1 + 40) | 1) ^ 0x3F) + 73) >> 6) + 1;
          if ((v1 & 8) == 0)
          {
LABEL_11:
            uint64_t v3 = *(void *)(a1 + 8);
            if ((v3 & 1) == 0) {
              goto LABEL_12;
            }
            goto LABEL_15;
          }
        }
        else if ((v1 & 8) == 0)
        {
          goto LABEL_11;
        }
        v2 += ((9 * (__clz(*(_DWORD *)(a1 + 48) | 1) ^ 0x1F) + 73) >> 6) + 1;
        uint64_t v3 = *(void *)(a1 + 8);
        if ((v3 & 1) == 0) {
          goto LABEL_12;
        }
        goto LABEL_15;
      }
    }
    v2 += ((9 * (__clz(*(void *)(a1 + 32) | 1) ^ 0x3F) + 73) >> 6) + 1;
    goto LABEL_9;
  }
  unint64_t v2 = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 1) == 0)
  {
LABEL_12:
    *(_DWORD *)(a1 + 20) = v2;
    return v2;
  }
LABEL_15:
  unint64_t v5 = v3 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v5 + 31) < 0) {
    unint64_t v6 = *(void *)(v5 + 16) + v2;
  }
  else {
    unint64_t v6 = *(unsigned __int8 *)(v5 + 31) + v2;
  }
  *(_DWORD *)(a1 + 20) = v6;
  return v6;
}

std::string *sub_10E3130(std::string *result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 16);
  if ((v2 & 0xF) == 0) {
    goto LABEL_8;
  }
  if (v2)
  {
    result[1].__r_.__value_.__r.__words[0] = *(void *)(a2 + 24);
    if ((v2 & 2) == 0)
    {
LABEL_4:
      if ((v2 & 4) == 0) {
        goto LABEL_5;
      }
LABEL_12:
      result[1].__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
      if ((v2 & 8) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_4;
  }
  result[1].__r_.__value_.__l.__size_ = *(void *)(a2 + 32);
  if ((v2 & 4) != 0) {
    goto LABEL_12;
  }
LABEL_5:
  if ((v2 & 8) != 0) {
LABEL_6:
  }
    LODWORD(result[2].__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 48);
LABEL_7:
  LODWORD(result->__r_.__value_.__r.__words[2]) |= v2;
LABEL_8:
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3) {
    return sub_188B4F8((uint64_t *)&result->__r_.__value_.__l.__size_, (v3 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_10E31A4()
{
  return 1;
}

double sub_10E31AC@<D0>(uint64_t a1@<X8>)
{
  int v2 = (char *)operator new(0x20uLL);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_20B91B0;
  strcpy(v2, "geo3.internal.RouteHandleLeg");
  return *(double *)"l.RouteHandleLeg";
}

double sub_10E3200(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = a2 | 2;
  if (!a3) {
    uint64_t v3 = a2;
  }
  *(void *)a1 = off_2440058;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = a2;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &qword_2550250;
  double result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 1;
  return result;
}

uint64_t sub_10E3258(uint64_t a1)
{
  uint64_t v3 = (void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_14;
    }
  }
  else if (v4)
  {
    goto LABEL_14;
  }
  unint64_t v5 = (void ***)(a1 + 72);
  if (*(uint64_t **)(a1 + 72) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if ((uint64_t (***)())a1 != &off_24F76E0)
  {
    if (*(void *)(a1 + 80))
    {
      sub_15B0994();
      operator delete();
    }
    if (*(void *)(a1 + 88))
    {
      sub_15B0994();
      operator delete();
    }
    if (*(void *)(a1 + 96))
    {
      sub_11024FC();
      operator delete();
    }
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_14:
  sub_10E4E50((void *)(a1 + 48));
  unint64_t v6 = *(unsigned int **)(a1 + 40);
  if (v6 && !*(void *)(a1 + 24))
  {
    unint64_t v9 = (void **)(v6 + 2);
    uint64_t v10 = *v6;
    if ((int)v10 >= 1)
    {
      do
      {
        if (*v9)
        {
          sub_10E0960(*v9);
          operator delete();
        }
        ++v9;
        --v10;
      }
      while (v10);
      unint64_t v6 = *(unsigned int **)(a1 + 40);
    }
    operator delete(v6);
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = off_24E6998;
    uint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & 2) == 0) {
      return a1;
    }
  }
  else
  {
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = off_24E6998;
    uint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & 2) == 0) {
      return a1;
    }
  }
  unint64_t v8 = (void *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
  if (v7)
  {
    if (*v8)
    {
LABEL_19:
      sub_1881618();
      operator delete();
    }
  }
  else if (v8)
  {
    goto LABEL_19;
  }
  return a1;
}

void sub_10E3444(uint64_t a1)
{
  sub_10E3258(a1);

  operator delete();
}

uint64_t sub_10E347C(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 32);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(result + 40) + 8);
    do
    {
      uint64_t v4 = *v3++;
      double result = sub_10E0C7C(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 32) = 0;
  }
  uint64_t v5 = *(unsigned int *)(v1 + 56);
  if ((int)v5 >= 1)
  {
    uint64_t v6 = *(void *)(v1 + 64) + 8;
    do
    {
      uint64_t v7 = *(void *)v6;
      if ((*(unsigned char *)(*(void *)v6 + 16) & 0xF) != 0)
      {
        *(void *)(v7 + 24) = 0;
        *(void *)(v7 + 32) = 0;
        *(_DWORD *)(v7 + 48) = 0;
        *(void *)(v7 + 40) = 0;
      }
      char v8 = *(unsigned char *)(v7 + 8);
      double result = v7 + 8;
      *(_DWORD *)(result + 8) = 0;
      if (v8) {
        double result = sub_188B4AC((uint64_t *)result);
      }
      v6 += 8;
      --v5;
    }
    while (v5);
    *(_DWORD *)(v1 + 56) = 0;
  }
  int v9 = *(_DWORD *)(v1 + 16);
  if ((v9 & 0xF) == 0) {
    goto LABEL_19;
  }
  if ((v9 & 1) == 0)
  {
    if ((v9 & 2) == 0) {
      goto LABEL_16;
    }
LABEL_29:
    double result = (uint64_t)sub_15B09D0(*(void *)(v1 + 80));
    if ((v9 & 4) == 0)
    {
LABEL_17:
      if ((v9 & 8) == 0) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
    goto LABEL_30;
  }
  unint64_t v12 = *(void *)(v1 + 72) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v12 + 23) < 0)
  {
    **(unsigned char **)unint64_t v12 = 0;
    *(void *)(v12 + 8) = 0;
    if ((v9 & 2) != 0) {
      goto LABEL_29;
    }
  }
  else
  {
    *(unsigned char *)unint64_t v12 = 0;
    *(unsigned char *)(v12 + 23) = 0;
    if ((v9 & 2) != 0) {
      goto LABEL_29;
    }
  }
LABEL_16:
  if ((v9 & 4) == 0) {
    goto LABEL_17;
  }
LABEL_30:
  double result = (uint64_t)sub_15B09D0(*(void *)(v1 + 88));
  if ((v9 & 8) != 0) {
LABEL_18:
  }
    double result = sub_1102538(*(void *)(v1 + 96));
LABEL_19:
  if ((v9 & 0xF0) != 0)
  {
    *(void *)(v1 + 104) = 0;
    *(void *)(v1 + 112) = 0;
  }
  char v11 = *(unsigned char *)(v1 + 8);
  uint64_t v10 = v1 + 8;
  *(void *)(v10 + 112) = 1;
  *(_DWORD *)(v10 + 8) = 0;
  if (v11)
  {
    return sub_188B4AC((uint64_t *)v10);
  }
  return result;
}

unsigned __int8 *sub_10E35D8(uint64_t a1, unsigned __int8 *a2, int32x2_t *a3)
{
  int v6 = 0;
  uint64_t v7 = (uint64_t *)(a1 + 8);
  char v8 = (void *)(a1 + 72);
  int v9 = (uint64_t *)(a1 + 48);
  uint64_t v10 = (uint64_t *)(a1 + 24);
  while (1)
  {
LABEL_4:
    if ((unint64_t)a2 < *(void *)a3) {
      goto LABEL_5;
    }
    int v53 = a2 - a3[1].i32[0];
    if (a3[3].i32[1] == v53) {
      break;
    }
    a2 = (unsigned __int8 *)sub_188BB90((uint64_t)a3, v53, a3[11].i32[1]);
    if (v54) {
      goto LABEL_118;
    }
LABEL_5:
    char v11 = a2 + 1;
    unsigned int v12 = *a2;
    if (((char)*a2 & 0x80000000) == 0)
    {
      unsigned int v13 = (v12 >> 3) - 1;
LABEL_7:
      switch(v13)
      {
        case 0u:
          if (v12 != 8) {
            goto LABEL_17;
          }
          v6 |= 0x100u;
          a2 = v11 + 1;
          uint64_t v14 = *v11;
          if (((char)*v11 & 0x80000000) == 0) {
            goto LABEL_12;
          }
          uint64_t v14 = v14 + (*a2 << 7) - 128;
          if ((char)*a2 < 0)
          {
            a2 = (unsigned __int8 *)sub_188C138((uint64_t)v11, v14);
            *(void *)(a1 + 120) = v50;
            if (!a2) {
              goto LABEL_112;
            }
          }
          else
          {
            a2 = v11 + 2;
LABEL_12:
            *(void *)(a1 + 120) = v14;
          }
          continue;
        case 1u:
          if (v12 != 18) {
            goto LABEL_17;
          }
          *(_DWORD *)(a1 + 16) |= 2u;
          uint64_t v19 = *(void *)(a1 + 80);
          if (v19) {
            goto LABEL_46;
          }
          int v20 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v7) {
            int v20 = (void *)*v20;
          }
          uint64_t v19 = sub_15C1918((uint64_t)v20);
          *(void *)(a1 + 80) = v19;
          int v56 = 0;
          unint64_t v21 = (char *)sub_188BEE0((uint64_t)a3, v11, &v56);
          if (!v21) {
            goto LABEL_97;
          }
          goto LABEL_47;
        case 2u:
          if (v12 != 26) {
            goto LABEL_17;
          }
          a2 = v11 - 1;
          while (1)
          {
            BOOL v22 = *(_DWORD **)(a1 + 40);
            if (v22 && (uint64_t v23 = *(int *)(a1 + 32), (int)v23 < *v22))
            {
              *(_DWORD *)(a1 + 32) = v23 + 1;
              uint64_t v24 = *(void *)&v22[2 * v23 + 2];
              int v56 = 0;
              uint64_t v25 = (char *)sub_188BEE0((uint64_t)a3, a2 + 1, &v56);
              if (v25) {
                goto LABEL_39;
              }
            }
            else
            {
              uint64_t v26 = sub_10E4A74(*v10);
              uint64_t v24 = sub_188CDC8((uint64_t)v10, v26);
              int v56 = 0;
              uint64_t v25 = (char *)sub_188BEE0((uint64_t)a3, a2 + 1, &v56);
              if (v25)
              {
LABEL_39:
                a2 = (unsigned __int8 *)sub_10E0DB8(v24, v25, a3);
                ++a3[11].i32[0];
                if (a3[10].i32[0]) {
                  goto LABEL_112;
                }
                goto LABEL_40;
              }
            }
            a2 = 0;
            ++a3[11].i32[0];
            if (a3[10].i32[0]) {
              goto LABEL_112;
            }
LABEL_40:
            int v27 = a3[3].i32[1] + v56;
            a3[3].i32[1] = v27;
            int32x2_t v28 = (int32x2_t)(*(void *)&a3[1] + (v27 & (v27 >> 31)));
            *a3 = v28;
            if (!a2) {
              goto LABEL_112;
            }
            if (*(void *)&v28 <= (unint64_t)a2 || *a2 != 26) {
              goto LABEL_4;
            }
          }
        case 3u:
          if (v12 != 34) {
            goto LABEL_17;
          }
          *(_DWORD *)(a1 + 16) |= 4u;
          uint64_t v19 = *(void *)(a1 + 88);
          if (v19)
          {
LABEL_46:
            int v56 = 0;
            unint64_t v21 = (char *)sub_188BEE0((uint64_t)a3, v11, &v56);
            if (!v21) {
              goto LABEL_97;
            }
LABEL_47:
            int v29 = (unsigned __int8 *)sub_15B0A38(v19, v21, a3);
            goto LABEL_95;
          }
          unint64_t v46 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v7) {
            unint64_t v46 = (void *)*v46;
          }
          uint64_t v19 = sub_15C1918((uint64_t)v46);
          *(void *)(a1 + 88) = v19;
          int v56 = 0;
          unint64_t v21 = (char *)sub_188BEE0((uint64_t)a3, v11, &v56);
          if (v21) {
            goto LABEL_47;
          }
LABEL_97:
          a2 = 0;
          ++a3[11].i32[0];
          if (a3[10].i32[0]) {
            goto LABEL_112;
          }
LABEL_98:
          int v49 = a3[3].i32[1] + v56;
          a3[3].i32[1] = v49;
          *a3 = (int32x2_t)(*(void *)&a3[1] + (v49 & (v49 >> 31)));
          if (a2) {
            continue;
          }
LABEL_112:
          char v11 = 0;
          goto LABEL_113;
        case 4u:
          if (v12 != 42) {
            goto LABEL_17;
          }
          a2 = v11 - 1;
          break;
        case 5u:
          if (v12 != 48) {
            goto LABEL_17;
          }
          v6 |= 0x10u;
          a2 = v11 + 1;
          uint64_t v37 = *v11;
          if (((char)*v11 & 0x80000000) == 0) {
            goto LABEL_65;
          }
          uint64_t v37 = v37 + (*a2 << 7) - 128;
          if ((char)*a2 < 0)
          {
            a2 = (unsigned __int8 *)sub_188C138((uint64_t)v11, v37);
            *(unsigned char *)(a1 + 104) = v51 != 0;
            if (!a2) {
              goto LABEL_112;
            }
          }
          else
          {
            a2 = v11 + 2;
LABEL_65:
            *(unsigned char *)(a1 + 104) = v37 != 0;
          }
          continue;
        case 6u:
          if (v12 != 58) {
            goto LABEL_17;
          }
          *(_DWORD *)(a1 + 16) |= 8u;
          uint64_t v38 = *(void *)(a1 + 96);
          if (v38)
          {
            int v56 = 0;
            int v39 = (unsigned __int8 *)sub_188BEE0((uint64_t)a3, v11, &v56);
            if (!v39) {
              goto LABEL_97;
            }
          }
          else
          {
            uint64_t v47 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
            if (*v7) {
              uint64_t v47 = (void *)*v47;
            }
            sub_11039CC((uint64_t)v47);
            uint64_t v38 = v48;
            *(void *)(a1 + 96) = v48;
            int v56 = 0;
            int v39 = (unsigned __int8 *)sub_188BEE0((uint64_t)a3, v11, &v56);
            if (!v39) {
              goto LABEL_97;
            }
          }
          int v29 = sub_1102608(v38, v39, a3);
LABEL_95:
          a2 = v29;
          ++a3[11].i32[0];
          if (a3[10].i32[0]) {
            goto LABEL_112;
          }
          goto LABEL_98;
        case 7u:
          if (v12 != 64) {
            goto LABEL_17;
          }
          v6 |= 0x20u;
          a2 = v11 + 1;
          LODWORD(v40) = *v11;
          if ((v40 & 0x80) == 0) {
            goto LABEL_74;
          }
          uint64_t v40 = v40 + (*a2 << 7) - 128;
          if ((char)*a2 < 0)
          {
            a2 = (unsigned __int8 *)sub_188C138((uint64_t)v11, v40);
            *(_DWORD *)(a1 + 108) = v52;
            if (!a2) {
              goto LABEL_112;
            }
          }
          else
          {
            a2 = v11 + 2;
LABEL_74:
            *(_DWORD *)(a1 + 108) = v40;
          }
          continue;
        case 8u:
          if (v12 != 74) {
            goto LABEL_17;
          }
          *(_DWORD *)(a1 + 16) |= 1u;
          uint64_t v41 = *(void *)(a1 + 8);
          uint64_t v42 = (uint64_t *)(v41 & 0xFFFFFFFFFFFFFFFCLL);
          if (v41) {
            uint64_t v42 = (uint64_t *)*v42;
          }
          int v43 = (std::string *)sub_1880F84(v8, v42);
          a2 = (unsigned __int8 *)sub_188C244(v43, (char *)v11, (uint64_t)a3);
          if (!a2) {
            goto LABEL_112;
          }
          continue;
        case 0x10u:
          if (v12 != 141) {
            goto LABEL_17;
          }
          v6 |= 0x40u;
          *(_DWORD *)(a1 + 112) = *(_DWORD *)v11;
          a2 = v11 + 4;
          continue;
        case 0x11u:
          if (v12 != 144) {
            goto LABEL_17;
          }
          v6 |= 0x80u;
          a2 = v11 + 1;
          int v44 = *v11;
          if (((char)*v11 & 0x80000000) == 0) {
            goto LABEL_3;
          }
          int v44 = v44 + (*a2 << 7) - 128;
          if ((char)*a2 < 0)
          {
            a2 = (unsigned __int8 *)sub_188C0D0((uint64_t)v11, v44);
            *(_DWORD *)(a1 + 116) = v45;
            if (!a2) {
              goto LABEL_112;
            }
          }
          else
          {
            a2 = v11 + 2;
LABEL_3:
            *(_DWORD *)(a1 + 116) = v44;
          }
          continue;
        default:
          goto LABEL_17;
      }
      while (1)
      {
        uint64_t v30 = *(_DWORD **)(a1 + 64);
        if (v30 && (uint64_t v31 = *(int *)(a1 + 56), (int)v31 < *v30))
        {
          *(_DWORD *)(a1 + 56) = v31 + 1;
          uint64_t v32 = *(void *)&v30[2 * v31 + 2];
          int v56 = 0;
          int v33 = (char *)sub_188BEE0((uint64_t)a3, a2 + 1, &v56);
          if (v33) {
            goto LABEL_56;
          }
        }
        else
        {
          sub_10E4B4C(*v9);
          uint64_t v32 = sub_188CDC8((uint64_t)v9, v34);
          int v56 = 0;
          int v33 = (char *)sub_188BEE0((uint64_t)a3, a2 + 1, &v56);
          if (v33)
          {
LABEL_56:
            a2 = (unsigned __int8 *)sub_10E2A08(v32, v33, a3);
            ++a3[11].i32[0];
            if (a3[10].i32[0]) {
              goto LABEL_112;
            }
            goto LABEL_57;
          }
        }
        a2 = 0;
        ++a3[11].i32[0];
        if (a3[10].i32[0]) {
          goto LABEL_112;
        }
LABEL_57:
        int v35 = a3[3].i32[1] + v56;
        a3[3].i32[1] = v35;
        int32x2_t v36 = (int32x2_t)(*(void *)&a3[1] + (v35 & (v35 >> 31)));
        *a3 = v36;
        if (!a2) {
          goto LABEL_112;
        }
        if (*(void *)&v36 <= (unint64_t)a2 || *a2 != 42) {
          goto LABEL_4;
        }
      }
    }
    unsigned int v15 = v12 + (*v11 << 7);
    unsigned int v12 = v15 - 128;
    if ((char)*v11 < 0)
    {
      char v11 = (unsigned __int8 *)sub_188C180((uint64_t)a2, v15 - 128);
      unsigned int v12 = v16;
      unsigned int v13 = (v16 >> 3) - 1;
      if (v13 <= 0x11) {
        goto LABEL_7;
      }
    }
    else
    {
      char v11 = a2 + 2;
      unsigned int v13 = (v12 >> 3) - 1;
      if (v13 <= 0x11) {
        goto LABEL_7;
      }
    }
LABEL_17:
    if (v12) {
      BOOL v17 = (v12 & 7) == 4;
    }
    else {
      BOOL v17 = 1;
    }
    if (v17)
    {
      if (v11) {
        a3[10].i32[0] = v12 - 1;
      }
      goto LABEL_113;
    }
    if (*v7) {
      unsigned int v18 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else {
      unsigned int v18 = (std::string *)sub_188DBD8(v7);
    }
    a2 = sub_1885AC0(v12, v18, (char *)v11, a3);
    if (!a2) {
      goto LABEL_112;
    }
  }
  if (v53 < 1)
  {
LABEL_118:
    char v11 = a2;
  }
  else if (a3[2])
  {
    char v11 = a2;
  }
  else
  {
    char v11 = 0;
  }
LABEL_113:
  *(_DWORD *)(a1 + 16) |= v6;
  return v11;
}

unsigned char *sub_10E3D78(uint64_t a1, unsigned char *__dst, _DWORD *a3)
{
  uint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 0x100) != 0)
  {
    if (*(void *)a3 <= (unint64_t)__dst)
    {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)__dst);
      unint64_t v7 = *(void *)(a1 + 120);
      *uint64_t v4 = 8;
      v4[1] = v7;
      if (v7 <= 0x7F) {
        goto LABEL_4;
      }
    }
    else
    {
      unint64_t v7 = *(void *)(a1 + 120);
      *long long __dst = 8;
      __dst[1] = v7;
      if (v7 <= 0x7F)
      {
LABEL_4:
        v4 += 2;
        goto LABEL_8;
      }
    }
    v4[1] = v7 | 0x80;
    unint64_t v8 = v7 >> 7;
    v4[2] = v7 >> 7;
    v4 += 3;
    if (v7 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unint64_t v9 = v8 >> 14;
        v8 >>= 7;
        *v4++ = v8;
      }
      while (v9);
    }
  }
LABEL_8:
  if ((v6 & 2) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v10 = *(void *)(a1 + 80);
    *uint64_t v4 = 18;
    unsigned int v11 = *(_DWORD *)(v10 + 44);
    v4[1] = v11;
    if (v11 > 0x7F) {
      unsigned int v12 = sub_188A9CC(v11, v4 + 1);
    }
    else {
      unsigned int v12 = v4 + 2;
    }
    uint64_t v4 = sub_15B0C0C(v10, v12, a3);
  }
  int v13 = *(_DWORD *)(a1 + 32);
  if (v13)
  {
    for (int i = 0; i != v13; ++i)
    {
      if (*(void *)a3 <= (unint64_t)v4) {
        uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 8 * i + 8);
      *uint64_t v4 = 26;
      unsigned int v17 = *(_DWORD *)(v16 + 20);
      v4[1] = v17;
      if (v17 > 0x7F) {
        unsigned int v15 = sub_188A9CC(v17, v4 + 1);
      }
      else {
        unsigned int v15 = v4 + 2;
      }
      uint64_t v4 = sub_10E1748(v16, v15, a3);
    }
  }
  if ((v6 & 4) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v18 = *(void *)(a1 + 88);
    *uint64_t v4 = 34;
    unsigned int v19 = *(_DWORD *)(v18 + 44);
    v4[1] = v19;
    if (v19 > 0x7F) {
      int v20 = sub_188A9CC(v19, v4 + 1);
    }
    else {
      int v20 = v4 + 2;
    }
    uint64_t v4 = sub_15B0C0C(v18, v20, a3);
  }
  int v21 = *(_DWORD *)(a1 + 56);
  if (v21)
  {
    for (int j = 0; j != v21; ++j)
    {
      if (*(void *)a3 <= (unint64_t)v4) {
        uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v24 = *(void *)(*(void *)(a1 + 64) + 8 * j + 8);
      *uint64_t v4 = 42;
      unsigned int v25 = *(_DWORD *)(v24 + 20);
      v4[1] = v25;
      if (v25 > 0x7F) {
        uint64_t v23 = sub_188A9CC(v25, v4 + 1);
      }
      else {
        uint64_t v23 = v4 + 2;
      }
      uint64_t v4 = sub_10E2D24(v24, v23, a3);
    }
  }
  if ((v6 & 0x10) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    char v26 = *(unsigned char *)(a1 + 104);
    *uint64_t v4 = 48;
    v4[1] = v26;
    v4 += 2;
    if ((v6 & 8) == 0)
    {
LABEL_40:
      if ((v6 & 0x20) == 0) {
        goto LABEL_57;
      }
      goto LABEL_51;
    }
  }
  else if ((v6 & 8) == 0)
  {
    goto LABEL_40;
  }
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v27 = *(void *)(a1 + 96);
  *uint64_t v4 = 58;
  unsigned int v28 = *(_DWORD *)(v27 + 20);
  v4[1] = v28;
  if (v28 > 0x7F)
  {
    int v29 = sub_188A9CC(v28, v4 + 1);
    uint64_t v4 = sub_1102C34(v27, v29, a3);
    if ((v6 & 0x20) == 0) {
      goto LABEL_57;
    }
  }
  else
  {
    uint64_t v4 = sub_1102C34(v27, v4 + 2, a3);
    if ((v6 & 0x20) == 0) {
      goto LABEL_57;
    }
  }
LABEL_51:
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unint64_t v30 = *(int *)(a1 + 108);
    *uint64_t v4 = 64;
    v4[1] = v30;
    if (v30 <= 0x7F) {
      goto LABEL_53;
    }
  }
  else
  {
    unint64_t v30 = *(int *)(a1 + 108);
    *uint64_t v4 = 64;
    v4[1] = v30;
    if (v30 <= 0x7F)
    {
LABEL_53:
      v4 += 2;
      goto LABEL_57;
    }
  }
  v4[1] = v30 | 0x80;
  unint64_t v31 = v30 >> 7;
  v4[2] = v30 >> 7;
  v4 += 3;
  if (v30 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unint64_t v32 = v31 >> 14;
      v31 >>= 7;
      *v4++ = v31;
    }
    while (v32);
  }
LABEL_57:
  if ((v6 & 1) == 0)
  {
    if ((v6 & 0x40) == 0) {
      goto LABEL_59;
    }
LABEL_69:
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    int v36 = *(_DWORD *)(a1 + 112);
    *(_WORD *)uint64_t v4 = 397;
    *(_DWORD *)(v4 + 2) = v36;
    v4 += 6;
    if ((v6 & 0x80) == 0) {
      goto LABEL_80;
    }
    goto LABEL_72;
  }
  unint64_t v33 = *(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v33 + 23) < 0)
  {
    int64_t v34 = *(void *)(v33 + 8);
    if (v34 > 127) {
      goto LABEL_75;
    }
  }
  else
  {
    int64_t v34 = *(unsigned __int8 *)(v33 + 23);
  }
  if (*(void *)a3 - (void)v4 + 14 < v34)
  {
LABEL_75:
    uint64_t v4 = sub_188A6CC(a3, 9, (void **)v33, v4);
    if ((v6 & 0x40) != 0) {
      goto LABEL_69;
    }
    goto LABEL_59;
  }
  *uint64_t v4 = 74;
  v4[1] = v34;
  if (*(char *)(v33 + 23) >= 0) {
    int v35 = (const void *)v33;
  }
  else {
    int v35 = *(const void **)v33;
  }
  memcpy(v4 + 2, v35, v34);
  v4 += v34 + 2;
  if ((v6 & 0x40) != 0) {
    goto LABEL_69;
  }
LABEL_59:
  if ((v6 & 0x80) == 0) {
    goto LABEL_80;
  }
LABEL_72:
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unsigned int v37 = *(_DWORD *)(a1 + 116);
    *(_WORD *)uint64_t v4 = 400;
    v4[2] = v37;
    if (v37 <= 0x7F) {
      goto LABEL_74;
    }
  }
  else
  {
    unsigned int v37 = *(_DWORD *)(a1 + 116);
    *(_WORD *)uint64_t v4 = 400;
    v4[2] = v37;
    if (v37 <= 0x7F)
    {
LABEL_74:
      v4 += 3;
      goto LABEL_80;
    }
  }
  v4[2] = v37 | 0x80;
  unsigned int v38 = v37 >> 7;
  v4[3] = v37 >> 7;
  v4 += 4;
  if (v37 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unsigned int v39 = v38 >> 14;
      v38 >>= 7;
      *v4++ = v38;
    }
    while (v39);
  }
LABEL_80:
  uint64_t v40 = *(void *)(a1 + 8);
  if ((v40 & 1) == 0) {
    return v4;
  }
  unint64_t v42 = v40 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v42 + 31) < 0)
  {
    int v43 = *(void **)(v42 + 8);
    uint64_t v44 = *(void *)(v42 + 16);
  }
  else
  {
    int v43 = (void *)(v42 + 8);
    LODWORD(v44) = *(unsigned __int8 *)(v42 + 31);
  }
  uint64_t v45 = (int)v44;
  if (*(void *)a3 - (void)v4 >= (int)v44)
  {
    memcpy(v4, v43, (int)v44);
    v4 += v45;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v43, v44, v4);
}

uint64_t sub_10E4344(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = (uint64_t *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = sub_10E1F90(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v8 = *(int *)(a1 + 56);
  uint64_t v9 = v2 + v8;
  uint64_t v10 = *(void *)(a1 + 64);
  if (v10) {
    unsigned int v11 = (uint64_t *)(v10 + 8);
  }
  else {
    unsigned int v11 = 0;
  }
  if (v8)
  {
    uint64_t v12 = 8 * v8;
    do
    {
      uint64_t v13 = *v11++;
      unint64_t v14 = sub_10E3020(v13);
      v9 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6);
      v12 -= 8;
    }
    while (v12);
  }
  int v15 = *(_DWORD *)(a1 + 16);
  if (!(_BYTE)v15) {
    goto LABEL_28;
  }
  if (v15)
  {
    unint64_t v21 = *(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v22 = *(unsigned __int8 *)(v21 + 23);
    uint64_t v23 = *(void *)(v21 + 8);
    if ((v22 & 0x80u) == 0) {
      uint64_t v23 = v22;
    }
    v9 += v23 + ((9 * (__clz(v23 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v15 & 2) == 0)
    {
LABEL_18:
      if ((v15 & 4) == 0) {
        goto LABEL_19;
      }
      goto LABEL_38;
    }
  }
  else if ((v15 & 2) == 0)
  {
    goto LABEL_18;
  }
  uint64_t v24 = sub_15B0D90(*(void *)(a1 + 80));
  v9 += v24 + ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v15 & 4) == 0)
  {
LABEL_19:
    if ((v15 & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t v25 = sub_15B0D90(*(void *)(a1 + 88));
  v9 += v25 + ((9 * (__clz(v25 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v15 & 8) == 0)
  {
LABEL_20:
    uint64_t v16 = v9 + 2;
    if ((v15 & 0x10) == 0) {
      uint64_t v16 = v9;
    }
    if ((v15 & 0x20) == 0) {
      goto LABEL_23;
    }
LABEL_42:
    int v28 = *(_DWORD *)(a1 + 108);
    uint64_t v29 = ((9 * (__clz(v28 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if (v28 >= 0) {
      uint64_t v30 = v29;
    }
    else {
      uint64_t v30 = 11;
    }
    uint64_t v31 = v30 + v16;
    if ((v15 & 0x40) != 0) {
      uint64_t v9 = v31 + 6;
    }
    else {
      uint64_t v9 = v31;
    }
    if ((v15 & 0x80) != 0) {
      goto LABEL_27;
    }
    goto LABEL_28;
  }
LABEL_39:
  uint64_t v26 = sub_11030B8(*(void *)(a1 + 96));
  uint64_t v27 = v9 + v26 + ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6) + 1;
  uint64_t v16 = v27 + 2;
  if ((v15 & 0x10) == 0) {
    uint64_t v16 = v27;
  }
  if ((v15 & 0x20) != 0) {
    goto LABEL_42;
  }
LABEL_23:
  if ((v15 & 0x40) != 0) {
    uint64_t v9 = v16 + 6;
  }
  else {
    uint64_t v9 = v16;
  }
  if ((v15 & 0x80) != 0) {
LABEL_27:
  }
    v9 += ((9 * (__clz(*(_DWORD *)(a1 + 116) | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_28:
  if ((v15 & 0x100) != 0)
  {
    v9 += ((9 * (__clz(*(void *)(a1 + 120) | 1) ^ 0x3F) + 73) >> 6) + 1;
    uint64_t v17 = *(void *)(a1 + 8);
    if ((v17 & 1) == 0) {
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v17 = *(void *)(a1 + 8);
    if ((v17 & 1) == 0)
    {
LABEL_30:
      *(_DWORD *)(a1 + 20) = v9;
      return v9;
    }
  }
  unint64_t v19 = v17 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v19 + 31) < 0) {
    uint64_t v20 = *(void *)(v19 + 16);
  }
  else {
    uint64_t v20 = *(unsigned __int8 *)(v19 + 31);
  }
  uint64_t v32 = v20 + v9;
  *(_DWORD *)(a1 + 20) = v32;
  return v32;
}

void sub_10E4608(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 40) + 8);
    uint64_t v6 = (uint64_t *)sub_188CCE4(a1 + 24, *(_DWORD *)(a2 + 32));
    sub_10E5088((uint64_t *)(a1 + 24), v6, v5, v4, **(_DWORD **)(a1 + 40) - *(_DWORD *)(a1 + 32));
    int v7 = *(_DWORD *)(a1 + 32) + v4;
    *(_DWORD *)(a1 + 32) = v7;
    uint64_t v8 = *(int **)(a1 + 40);
    if (*v8 < v7) {
      *uint64_t v8 = v7;
    }
  }
  int v9 = *(_DWORD *)(a2 + 56);
  if (v9)
  {
    uint64_t v10 = (std::string **)(*(void *)(a2 + 64) + 8);
    unsigned int v11 = (uint64_t *)sub_188CCE4(a1 + 48, *(_DWORD *)(a2 + 56));
    sub_10E5114((uint64_t *)(a1 + 48), v11, v10, v9, **(_DWORD **)(a1 + 64) - *(_DWORD *)(a1 + 56));
    int v12 = *(_DWORD *)(a1 + 56) + v9;
    *(_DWORD *)(a1 + 56) = v12;
    uint64_t v13 = *(int **)(a1 + 64);
    if (*v13 < v12) {
      *uint64_t v13 = v12;
    }
  }
  int v14 = *(_DWORD *)(a2 + 16);
  if ((_BYTE)v14)
  {
    if ((v14 & 1) == 0)
    {
      if ((v14 & 2) == 0) {
        goto LABEL_10;
      }
LABEL_26:
      *(_DWORD *)(a1 + 16) |= 2u;
      uint64_t v21 = *(void *)(a1 + 80);
      if (!v21)
      {
        uint64_t v22 = *(void *)(a1 + 8);
        uint64_t v23 = (void *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
        if (v22) {
          uint64_t v23 = (void *)*v23;
        }
        uint64_t v21 = sub_15C1918((uint64_t)v23);
        *(void *)(a1 + 80) = v21;
      }
      if (*(void *)(a2 + 80)) {
        uint64_t v24 = *(uint64_t (****)())(a2 + 80);
      }
      else {
        uint64_t v24 = &off_253F1A0;
      }
      sub_15B0E24(v21, (uint64_t)v24);
      if ((v14 & 4) == 0)
      {
LABEL_11:
        if ((v14 & 8) == 0) {
          goto LABEL_12;
        }
        goto LABEL_42;
      }
LABEL_34:
      *(_DWORD *)(a1 + 16) |= 4u;
      uint64_t v25 = *(void *)(a1 + 88);
      if (!v25)
      {
        uint64_t v26 = *(void *)(a1 + 8);
        uint64_t v27 = (void *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
        if (v26) {
          uint64_t v27 = (void *)*v27;
        }
        uint64_t v25 = sub_15C1918((uint64_t)v27);
        *(void *)(a1 + 88) = v25;
      }
      if (*(void *)(a2 + 88)) {
        int v28 = *(uint64_t (****)())(a2 + 88);
      }
      else {
        int v28 = &off_253F1A0;
      }
      sub_15B0E24(v25, (uint64_t)v28);
      if ((v14 & 8) == 0)
      {
LABEL_12:
        if ((v14 & 0x10) == 0) {
          goto LABEL_13;
        }
        goto LABEL_50;
      }
LABEL_42:
      *(_DWORD *)(a1 + 16) |= 8u;
      uint64_t v29 = *(void *)(a1 + 96);
      if (!v29)
      {
        uint64_t v30 = *(void *)(a1 + 8);
        uint64_t v31 = (void *)(v30 & 0xFFFFFFFFFFFFFFFCLL);
        if (v30) {
          uint64_t v31 = (void *)*v31;
        }
        sub_11039CC((uint64_t)v31);
        *(void *)(a1 + 96) = v29;
      }
      if (*(void *)(a2 + 96)) {
        uint64_t v32 = *(uint64_t (****)())(a2 + 96);
      }
      else {
        uint64_t v32 = &off_24F7E48;
      }
      sub_11032E8(v29, (uint64_t)v32);
      if ((v14 & 0x10) == 0)
      {
LABEL_13:
        if ((v14 & 0x20) == 0) {
          goto LABEL_14;
        }
        goto LABEL_51;
      }
LABEL_50:
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      if ((v14 & 0x20) == 0)
      {
LABEL_14:
        if ((v14 & 0x40) == 0) {
          goto LABEL_15;
        }
        goto LABEL_52;
      }
LABEL_51:
      *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
      if ((v14 & 0x40) == 0)
      {
LABEL_15:
        if ((v14 & 0x80) == 0)
        {
LABEL_17:
          *(_DWORD *)(a1 + 16) |= v14;
          goto LABEL_18;
        }
LABEL_16:
        *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
        goto LABEL_17;
      }
LABEL_52:
      *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
      if ((v14 & 0x80) == 0) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
    uint64_t v17 = (long long *)(*(void *)(a2 + 72) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v18 = (std::string **)(a1 + 72);
    uint64_t v19 = *(void *)(a1 + 8);
    uint64_t v20 = (uint64_t **)(v19 & 0xFFFFFFFFFFFFFFFCLL);
    if (v19)
    {
      sub_1881DF4(v18, v17, *v20);
      if ((v14 & 2) != 0) {
        goto LABEL_26;
      }
    }
    else
    {
      sub_1881DF4(v18, v17, (uint64_t *)v20);
      if ((v14 & 2) != 0) {
        goto LABEL_26;
      }
    }
LABEL_10:
    if ((v14 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_34;
  }
LABEL_18:
  if ((v14 & 0x100) != 0)
  {
    uint64_t v15 = *(void *)(a2 + 120);
    *(_DWORD *)(a1 + 16) |= 0x100u;
    *(void *)(a1 + 120) = v15;
  }
  uint64_t v16 = *(void *)(a2 + 8);
  if (v16)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v16 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

uint64_t sub_10E48E4(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 32);
  if ((int)v2 >= 1)
  {
    do
    {
      uint64_t v3 = v2--;
      uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8 * v2 + 8);
      uint64_t v5 = *(unsigned int *)(v4 + 80);
      while ((int)v5 >= 1)
      {
        uint64_t v6 = v5 - 1;
        char v7 = sub_15B0F18(*(void *)(*(void *)(v4 + 88) + 8 * v5));
        uint64_t v5 = v6;
        if ((v7 & 1) == 0) {
          return 0;
        }
      }
    }
    while (v3 >= 2);
  }
  int v8 = *(_DWORD *)(a1 + 16);
  if ((v8 & 2) != 0)
  {
    uint64_t result = sub_15B0F18(*(void *)(a1 + 80));
    if (!result) {
      return result;
    }
    int v8 = *(_DWORD *)(a1 + 16);
  }
  if ((v8 & 4) == 0) {
    return 1;
  }
  uint64_t result = sub_15B0F18(*(void *)(a1 + 88));
  if (result) {
    return 1;
  }
  return result;
}

double sub_10E49A8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_20B8870;
  strcpy(v2, "geo3.internal.RouteHandle");
  return *(double *)"rnal.RouteHandle";
}

void *sub_10E49FC(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = off_243FED8;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t sub_10E4A74(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t result = &off_243FF58;
  *(void *)(result + 8) = a1;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = a1;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = a1;
  *(void *)(result + 56) = 0;
  *(void *)(result + 64) = a1;
  *(void *)(result + 72) = a1;
  *(void *)(result + 80) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 96) = &qword_2550250;
  *(_OWORD *)(result + 104) = 0u;
  *(_OWORD *)(result + 120) = 0u;
  *(_OWORD *)(result + 136) = 0u;
  *(_OWORD *)(result + 152) = 0u;
  *(_DWORD *)(result + 168) = 0;
  return result;
}

double sub_10E4B4C(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(v2 + 8) = a1;
  *(void *)uint64_t v2 = off_243FFD8;
  double result = 0.0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_DWORD *)(v2 + 48) = 0;
  return result;
}

double sub_10E4BCC(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t v2 = off_2440058;
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = 0;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 72) = &qword_2550250;
  double result = 0.0;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(void *)(v2 + 112) = 0;
  *(void *)(v2 + 120) = 1;
  return result;
}

void sub_10E4C8C()
{
}

void *sub_10E4CD8(uint64_t a1, uint64_t a2)
{
  return sub_10E49FC(a2);
}

uint64_t sub_10E4CE0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_10E4CE8()
{
}

uint64_t sub_10E4D60(uint64_t a1, uint64_t a2)
{
  return sub_10E4A74(a2);
}

uint64_t sub_10E4D68(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_10E4D70()
{
}

double sub_10E4DC4(uint64_t a1, uint64_t a2)
{
  return sub_10E4B4C(a2);
}

uint64_t sub_10E4DCC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_10E4DD4()
{
}

double sub_10E4E40(uint64_t a1, uint64_t a2)
{
  return sub_10E4BCC(a2);
}

uint64_t sub_10E4E48(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_10E4E50(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[2];
  if (!v2 || *a1)
  {
    a1[2] = 0;
    return;
  }
  uint64_t v3 = (void **)(v2 + 2);
  uint64_t v4 = *v2;
  if ((int)v4 >= 1)
  {
    while (1)
    {
      uint64_t v5 = *v3;
      if (*v3) {
        break;
      }
      ++v3;
      if (!--v4)
      {
        uint64_t v2 = (unsigned int *)a1[2];
        goto LABEL_19;
      }
    }
    uint64_t v6 = v5[1];
    if ((v6 & 1) != 0 && !*(void *)(v6 & 0xFFFFFFFFFFFFFFFCLL))
    {
      sub_10E4F74(v5 + 1);
      uint64_t v6 = v5[1];
    }
    *uint64_t v5 = off_24E6998;
    if ((v6 & 2) != 0)
    {
      char v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6)
      {
        if (*v7)
        {
LABEL_13:
          sub_1881618();
          operator delete();
        }
      }
      else if (v7)
      {
        goto LABEL_13;
      }
    }
    operator delete();
  }
LABEL_19:
  operator delete(v2);
  a1[2] = 0;
}

void *sub_10E4F74(void *result)
{
  unint64_t v1 = *result & 0xFFFFFFFFFFFFFFFCLL;
  if (*result)
  {
    if (*(void *)v1) {
      BOOL v3 = 1;
    }
    else {
      BOOL v3 = v1 == 0;
    }
    if (!v3)
    {
LABEL_12:
      if (*(char *)(v1 + 31) < 0) {
        operator delete(*(void **)(v1 + 8));
      }
      operator delete();
    }
  }
  else if ((*result & 0xFFFFFFFFFFFFFFFCLL) == 0 && v1 != 0)
  {
    goto LABEL_12;
  }
  return result;
}

void sub_10E4FFC(uint64_t *a1, uint64_t *a2, uint64_t *a3, int a4, int a5)
{
  LODWORD(v5) = a4;
  char v7 = a2;
  int v8 = a4 - a5;
  if (a4 > a5)
  {
    uint64_t v9 = *a1;
    uint64_t v10 = &a2[a5];
    do
    {
      *v10++ = sub_15C1918(v9);
      --v8;
    }
    while (v8);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v12 = *a3++;
      uint64_t v11 = v12;
      uint64_t v13 = *v7++;
      sub_10E5078(v11, v13);
      --v5;
    }
    while (v5);
  }
}

void sub_10E5078(uint64_t a1, uint64_t a2)
{
}

void sub_10E5088(uint64_t *a1, uint64_t *a2, uint64_t *a3, int a4, int a5)
{
  LODWORD(v5) = a4;
  char v7 = a2;
  int v8 = a4 - a5;
  if (a4 > a5)
  {
    uint64_t v9 = *a1;
    uint64_t v10 = &a2[a5];
    do
    {
      *v10++ = sub_10E4A74(v9);
      --v8;
    }
    while (v8);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v12 = *a3++;
      uint64_t v11 = v12;
      uint64_t v13 = *v7++;
      sub_10E5104(v11, v13);
      --v5;
    }
    while (v5);
  }
}

void sub_10E5104(uint64_t a1, uint64_t a2)
{
}

void sub_10E5114(uint64_t *a1, uint64_t *a2, std::string **a3, int a4, int a5)
{
  LODWORD(v5) = a4;
  char v7 = a2;
  int v8 = a4 - a5;
  if (a4 > a5)
  {
    uint64_t v9 = *a1;
    uint64_t v10 = &a2[a5];
    do
    {
      sub_10E4B4C(v9);
      *v10++ = v11;
      --v8;
    }
    while (v8);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v13 = *a3++;
      uint64_t v12 = v13;
      uint64_t v14 = *v7++;
      sub_10E5190(v12, v14);
      --v5;
    }
    while (v5);
  }
}

std::string *sub_10E5190(std::string *result, uint64_t a2)
{
  int v2 = result->__r_.__value_.__r.__words[2];
  if ((v2 & 0xF) == 0) {
    goto LABEL_8;
  }
  if (v2)
  {
    *(void *)(a2 + 24) = result[1].__r_.__value_.__l.__data_;
    if ((v2 & 2) == 0)
    {
LABEL_4:
      if ((v2 & 4) == 0) {
        goto LABEL_5;
      }
LABEL_12:
      *(void *)(a2 + 40) = *((void *)&result[1].__r_.__value_.__l + 2);
      if ((v2 & 8) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_4;
  }
  *(void *)(a2 + 32) = result[1].__r_.__value_.__l.__size_;
  if ((v2 & 4) != 0) {
    goto LABEL_12;
  }
LABEL_5:
  if ((v2 & 8) != 0) {
LABEL_6:
  }
    *(_DWORD *)(a2 + 48) = result[2].__r_.__value_.__l.__data_;
LABEL_7:
  *(_DWORD *)(a2 + 16) |= v2;
LABEL_8:
  std::string::size_type size = result->__r_.__value_.__l.__size_;
  if (size) {
    return sub_188B4F8((uint64_t *)(a2 + 8), (size & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_10E5204(uint64_t a1)
{
  BOOL v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_8;
    }
  }
  else if (v4)
  {
    goto LABEL_8;
  }
  if ((uint64_t (***)())a1 != &off_24F7760)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5)
    {
      sub_15B3DFC(v5);
      operator delete();
    }
  }
  if (v2)
  {
    sub_10E4F74(v3);
    uint64_t v2 = *v3;
  }
LABEL_8:
  *(void *)a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    uint64_t v6 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v6)
      {
LABEL_11:
        sub_1881618();
        operator delete();
      }
    }
    else if (v6)
    {
      goto LABEL_11;
    }
  }
  return a1;
}

void sub_10E52EC(uint64_t a1)
{
  sub_10E5204(a1);

  operator delete();
}

uint64_t sub_10E5324(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if (v2) {
    double result = sub_15B043C(*(void *)(result + 24));
  }
  if ((v2 & 0x1E) != 0)
  {
    *(void *)(v1 + 32) = 0;
    *(void *)(v1 + 40) = 0;
    *(_DWORD *)(v1 + 48) = 1;
  }
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = v1 + 8;
  *(_DWORD *)(v3 + 8) = 0;
  if (v4)
  {
    return sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

char *sub_10E5394(uint64_t a1, char *a2, int32x2_t *a3)
{
  int v6 = 0;
  char v7 = (uint64_t *)(a1 + 8);
  while ((unint64_t)a2 < *(void *)a3)
  {
LABEL_5:
    int v8 = a2 + 1;
    unsigned int v9 = *a2;
    if (*a2 < 0)
    {
      unsigned int v12 = v9 + (*v8 << 7);
      unsigned int v9 = v12 - 128;
      if (*v8 < 0)
      {
        int v8 = (char *)sub_188C180((uint64_t)a2, v12 - 128);
        unsigned int v9 = v19;
        unsigned int v10 = (v19 >> 3) - 1;
        if (v10 <= 4) {
          goto LABEL_7;
        }
      }
      else
      {
        int v8 = a2 + 2;
        unsigned int v10 = (v9 >> 3) - 1;
        if (v10 <= 4) {
          goto LABEL_7;
        }
      }
LABEL_36:
      if (v9) {
        BOOL v20 = (v9 & 7) == 4;
      }
      else {
        BOOL v20 = 1;
      }
      if (v20)
      {
        if (v8) {
          a3[10].i32[0] = v9 - 1;
        }
        goto LABEL_69;
      }
      if (*v7)
      {
        a2 = (char *)sub_1885AC0(v9, (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8), v8, a3);
        if (!a2) {
          goto LABEL_70;
        }
      }
      else
      {
        uint64_t v31 = (std::string *)sub_188DBD8(v7);
        a2 = (char *)sub_1885AC0(v9, v31, v8, a3);
        if (!a2)
        {
LABEL_70:
          int v8 = 0;
          goto LABEL_69;
        }
      }
    }
    else
    {
      unsigned int v10 = (v9 >> 3) - 1;
LABEL_7:
      switch(v10)
      {
        case 0u:
          if (v9 != 8) {
            goto LABEL_36;
          }
          a2 = v8 + 1;
          unint64_t v11 = *v8;
          if (*v8 < 0)
          {
            int v21 = v11 + (*a2 << 7);
            unint64_t v11 = (v21 - 128);
            if (*a2 < 0)
            {
              uint64_t v27 = sub_188C138((uint64_t)v8, (v21 - 128));
              if (!v27) {
                goto LABEL_70;
              }
              a2 = (char *)v27;
              unint64_t v11 = v28;
              if ((v28 - 1) <= 1)
              {
LABEL_11:
                *(_DWORD *)(a1 + 16) |= 0x10u;
                *(_DWORD *)(a1 + 48) = v11;
                continue;
              }
            }
            else
            {
              a2 = v8 + 2;
              if ((v21 - 129) <= 1) {
                goto LABEL_11;
              }
            }
          }
          else if ((v11 - 1) <= 1)
          {
            goto LABEL_11;
          }
          if (*v7) {
            uint64_t v22 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            uint64_t v22 = (std::string *)sub_188DBD8(v7);
          }
          sub_188C020(1, v11, v22);
          break;
        case 1u:
          if (v9 != 16) {
            goto LABEL_36;
          }
          v6 |= 2u;
          a2 = v8 + 1;
          unint64_t v13 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_19;
          }
          unint64_t v13 = v13 + (*a2 << 7) - 128;
          if (*a2 < 0)
          {
            a2 = (char *)sub_188C138((uint64_t)v8, v13);
            *(void *)(a1 + 32) = -(uint64_t)(v25 & 1) ^ (v25 >> 1);
            if (!a2) {
              goto LABEL_70;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_19:
            *(void *)(a1 + 32) = -(uint64_t)(v13 & 1) ^ (v13 >> 1);
          }
          continue;
        case 2u:
          if (v9 != 26) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 16) |= 1u;
          uint64_t v14 = *(void *)(a1 + 24);
          if (v14)
          {
            int v33 = 0;
            uint64_t v15 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)v8, &v33);
            if (v15) {
              goto LABEL_23;
            }
          }
          else
          {
            uint64_t v23 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
            if (*v7) {
              uint64_t v23 = (void *)*v23;
            }
            uint64_t v14 = sub_15C1CB4((uint64_t)v23);
            *(void *)(a1 + 24) = v14;
            int v33 = 0;
            uint64_t v15 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)v8, &v33);
            if (v15)
            {
LABEL_23:
              a2 = sub_15B3E38(v14, v15, a3);
              ++a3[11].i32[0];
              if (a3[10].i32[0]) {
                goto LABEL_70;
              }
              goto LABEL_52;
            }
          }
          a2 = 0;
          ++a3[11].i32[0];
          if (a3[10].i32[0]) {
            goto LABEL_70;
          }
LABEL_52:
          int v24 = a3[3].i32[1] + v33;
          a3[3].i32[1] = v24;
          *a3 = (int32x2_t)(*(void *)&a3[1] + (v24 & (v24 >> 31)));
          if (!a2) {
            goto LABEL_70;
          }
          continue;
        case 3u:
          if (v9 != 32) {
            goto LABEL_36;
          }
          v6 |= 4u;
          a2 = v8 + 1;
          int v16 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_29;
          }
          int v16 = v16 + (*a2 << 7) - 128;
          if (*a2 < 0)
          {
            a2 = (char *)sub_188C0D0((uint64_t)v8, v16);
            *(_DWORD *)(a1 + 40) = v26;
            if (!a2) {
              goto LABEL_70;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_29:
            *(_DWORD *)(a1 + 40) = v16;
          }
          continue;
        case 4u:
          if (v9 != 40) {
            goto LABEL_36;
          }
          v6 |= 8u;
          a2 = v8 + 1;
          int v17 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_3;
          }
          int v17 = v17 + (*a2 << 7) - 128;
          if (*a2 < 0)
          {
            a2 = (char *)sub_188C0D0((uint64_t)v8, v17);
            *(_DWORD *)(a1 + 44) = v18;
            if (!a2) {
              goto LABEL_70;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_3:
            *(_DWORD *)(a1 + 44) = v17;
          }
          continue;
        default:
          goto LABEL_36;
      }
    }
  }
  int v29 = a2 - a3[1].i32[0];
  if (a3[3].i32[1] != v29)
  {
    a2 = sub_188BB90((uint64_t)a3, v29, a3[11].i32[1]);
    if (v30) {
      goto LABEL_75;
    }
    goto LABEL_5;
  }
  if (v29 < 1)
  {
LABEL_75:
    int v8 = a2;
    goto LABEL_69;
  }
  if (a3[2]) {
    int v8 = a2;
  }
  else {
    int v8 = 0;
  }
LABEL_69:
  *(_DWORD *)(a1 + 16) |= v6;
  return v8;
}

char *sub_10E581C(uint64_t a1, char *__dst, _DWORD *a3)
{
  char v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 0x10) != 0)
  {
    if (*(void *)a3 <= (unint64_t)__dst)
    {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      unint64_t v7 = *(int *)(a1 + 48);
      *char v4 = 8;
      v4[1] = v7;
      if (v7 <= 0x7F) {
        goto LABEL_4;
      }
    }
    else
    {
      unint64_t v7 = *(int *)(a1 + 48);
      *long long __dst = 8;
      __dst[1] = v7;
      if (v7 <= 0x7F)
      {
LABEL_4:
        v4 += 2;
        goto LABEL_8;
      }
    }
    v4[1] = v7 | 0x80;
    unint64_t v8 = v7 >> 7;
    v4[2] = v7 >> 7;
    v4 += 3;
    if (v7 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unint64_t v9 = v8 >> 14;
        v8 >>= 7;
        *v4++ = v8;
      }
      while (v9);
    }
  }
LABEL_8:
  if ((v6 & 2) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v10 = *(void *)(a1 + 32);
    *char v4 = 16;
    unint64_t v11 = (2 * v10) ^ (v10 >> 63);
    v4[1] = v11;
    if (v11 > 0x7F)
    {
      v4[1] = v11 | 0x80;
      unint64_t v12 = v11 >> 7;
      v4[2] = v11 >> 7;
      v4 += 3;
      if (v11 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v13 = v12 >> 14;
          v12 >>= 7;
          *v4++ = v12;
        }
        while (v13);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if (v6)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v14 = *(void *)(a1 + 24);
    *char v4 = 26;
    unsigned int v15 = *(_DWORD *)(v14 + 44);
    v4[1] = v15;
    if (v15 > 0x7F) {
      int v16 = sub_188A9CC(v15, v4 + 1);
    }
    else {
      int v16 = v4 + 2;
    }
    char v4 = sub_15B43E4(v14, v16, a3);
  }
  if ((v6 & 4) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4)
    {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      unsigned int v17 = *(_DWORD *)(a1 + 40);
      *char v4 = 32;
      v4[1] = v17;
      if (v17 <= 0x7F) {
        goto LABEL_25;
      }
    }
    else
    {
      unsigned int v17 = *(_DWORD *)(a1 + 40);
      *char v4 = 32;
      v4[1] = v17;
      if (v17 <= 0x7F)
      {
LABEL_25:
        v4 += 2;
        goto LABEL_29;
      }
    }
    v4[1] = v17 | 0x80;
    unsigned int v18 = v17 >> 7;
    v4[2] = v17 >> 7;
    v4 += 3;
    if (v17 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unsigned int v19 = v18 >> 14;
        v18 >>= 7;
        *v4++ = v18;
      }
      while (v19);
    }
  }
LABEL_29:
  if ((v6 & 8) == 0) {
    goto LABEL_36;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    unsigned int v20 = *(_DWORD *)(a1 + 44);
    *char v4 = 40;
    v4[1] = v20;
    if (v20 <= 0x7F) {
      goto LABEL_32;
    }
  }
  else
  {
    unsigned int v20 = *(_DWORD *)(a1 + 44);
    *char v4 = 40;
    v4[1] = v20;
    if (v20 <= 0x7F)
    {
LABEL_32:
      v4 += 2;
      goto LABEL_36;
    }
  }
  v4[1] = v20 | 0x80;
  unsigned int v21 = v20 >> 7;
  v4[2] = v20 >> 7;
  v4 += 3;
  if (v20 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unsigned int v22 = v21 >> 14;
      v21 >>= 7;
      *v4++ = v21;
    }
    while (v22);
  }
LABEL_36:
  uint64_t v23 = *(void *)(a1 + 8);
  if ((v23 & 1) == 0) {
    return v4;
  }
  unint64_t v25 = v23 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v25 + 31) < 0)
  {
    int v26 = *(char **)(v25 + 8);
    uint64_t v27 = *(void *)(v25 + 16);
  }
  else
  {
    int v26 = (char *)(v25 + 8);
    LODWORD(v27) = *(unsigned __int8 *)(v25 + 31);
  }
  uint64_t v28 = (int)v27;
  if (*(void *)a3 - (void)v4 < (int)v27)
  {
    return (char *)sub_188A528(a3, v26, v27, v4);
  }
  else
  {
    memcpy(v4, v26, (int)v27);
    return &v4[v28];
  }
}

uint64_t sub_10E5B80(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 0x1F) != 0)
  {
    if (v2)
    {
      uint64_t v5 = sub_15B4924(*(void *)(a1 + 24));
      uint64_t result = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v2 & 2) == 0) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t result = 0;
      if ((v2 & 2) == 0)
      {
LABEL_9:
        if ((v2 & 4) != 0)
        {
          result += ((9 * (__clz(*(_DWORD *)(a1 + 40) | 1) ^ 0x1F) + 73) >> 6) + 1;
          if ((v2 & 8) == 0)
          {
LABEL_11:
            if ((v2 & 0x10) == 0) {
              goto LABEL_12;
            }
            goto LABEL_16;
          }
        }
        else if ((v2 & 8) == 0)
        {
          goto LABEL_11;
        }
        result += ((9 * (__clz(*(_DWORD *)(a1 + 44) | 1) ^ 0x1F) + 73) >> 6) + 1;
        if ((v2 & 0x10) == 0)
        {
LABEL_12:
          uint64_t v4 = *(void *)(a1 + 8);
          if ((v4 & 1) == 0) {
            goto LABEL_13;
          }
          goto LABEL_20;
        }
LABEL_16:
        int v6 = *(_DWORD *)(a1 + 48);
        if (v6 < 0)
        {
          result += 11;
          uint64_t v4 = *(void *)(a1 + 8);
          if ((v4 & 1) == 0) {
            goto LABEL_13;
          }
        }
        else
        {
          result += ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
          uint64_t v4 = *(void *)(a1 + 8);
          if ((v4 & 1) == 0) {
            goto LABEL_13;
          }
        }
        goto LABEL_20;
      }
    }
    result += ((9 * (__clz((2 * *(void *)(a1 + 32)) ^ (*(uint64_t *)(a1 + 32) >> 63) | 1) ^ 0x3F) + 73) >> 6) + 1;
    goto LABEL_9;
  }
  uint64_t result = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  if ((v4 & 1) == 0)
  {
LABEL_13:
    *(_DWORD *)(a1 + 20) = result;
    return result;
  }
LABEL_20:
  unint64_t v7 = v4 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v7 + 31) < 0) {
    result += *(void *)(v7 + 16);
  }
  else {
    result += *(unsigned __int8 *)(v7 + 31);
  }
  *(_DWORD *)(a1 + 20) = result;
  return result;
}

void sub_10E5D0C(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 0x1F) != 0)
  {
    if (v4)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v6 = *(void *)(a1 + 24);
      if (!v6)
      {
        uint64_t v7 = *(void *)(a1 + 8);
        unint64_t v8 = (void *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
        if (v7) {
          unint64_t v8 = (void *)*v8;
        }
        uint64_t v6 = sub_15C1CB4((uint64_t)v8);
        *(void *)(a1 + 24) = v6;
      }
      if (*(void *)(a2 + 24)) {
        unint64_t v9 = *(uint64_t (****)())(a2 + 24);
      }
      else {
        unint64_t v9 = &off_253F2E8;
      }
      sub_15B04F0(v6, (uint64_t)v9);
      if ((v4 & 2) == 0)
      {
LABEL_4:
        if ((v4 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_22;
      }
    }
    else if ((v4 & 2) == 0)
    {
      goto LABEL_4;
    }
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_5:
      if ((v4 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_23;
    }
LABEL_22:
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_6:
      if ((v4 & 0x10) == 0)
      {
LABEL_8:
        *(_DWORD *)(a1 + 16) |= v4;
        goto LABEL_9;
      }
LABEL_7:
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
      goto LABEL_8;
    }
LABEL_23:
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
    if ((v4 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_9:
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

uint64_t sub_10E5E14(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 1) == 0) {
    return 1;
  }
  uint64_t result = sub_15B06D8(*(void *)(a1 + 24));
  if (result) {
    return 1;
  }
  return result;
}

double sub_10E5E40@<D0>(uint64_t a1@<X8>)
{
  int v2 = (char *)operator new(0x20uLL);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_20B91A0;
  strcpy(v2, "geo3.LegacyRoutingPathPoint");
  return *(double *)"RoutingPathPoint";
}

void *sub_10E5E94(void *a1)
{
  uint64_t v4 = a1[1];
  int v2 = a1 + 1;
  uint64_t v3 = v4;
  if ((v4 & 1) != 0 && !*(void *)(v3 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(v2);
  }
  uint64_t v5 = (uint64_t *)a1[4];
  if (v5 && !a1[2])
  {
    unint64_t v8 = v5 + 1;
    uint64_t v9 = *(unsigned int *)v5;
    if ((int)v9 >= 1)
    {
      do
      {
        if (*v8)
        {
          sub_10E5204(*v8);
          operator delete();
        }
        ++v8;
        --v9;
      }
      while (v9);
      uint64_t v5 = (uint64_t *)a1[4];
    }
    operator delete(v5);
    a1[4] = 0;
    *a1 = off_24E6998;
    uint64_t v6 = a1[1];
    if ((v6 & 2) == 0) {
      return a1;
    }
  }
  else
  {
    a1[4] = 0;
    *a1 = off_24E6998;
    uint64_t v6 = a1[1];
    if ((v6 & 2) == 0) {
      return a1;
    }
  }
  uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
  if (v6)
  {
    if (*v7)
    {
LABEL_7:
      sub_1881618();
      operator delete();
    }
  }
  else if (v7)
  {
    goto LABEL_7;
  }
  return a1;
}

void sub_10E5FD4(void *a1)
{
  sub_10E5E94(a1);

  operator delete();
}

uint64_t sub_10E600C(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 24);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = *(void *)(result + 32) + 8;
    do
    {
      uint64_t v4 = *(void *)v3;
      int v5 = *(_DWORD *)(*(void *)v3 + 16);
      if (v5) {
        uint64_t result = sub_15B043C(*(void *)(v4 + 24));
      }
      if ((v5 & 0x1E) != 0)
      {
        *(void *)(v4 + 32) = 0;
        *(void *)(v4 + 40) = 0;
        *(_DWORD *)(v4 + 48) = 1;
      }
      char v7 = *(unsigned char *)(v4 + 8);
      uint64_t v6 = v4 + 8;
      *(_DWORD *)(v6 + 8) = 0;
      if (v7) {
        uint64_t result = sub_188B4AC((uint64_t *)v6);
      }
      v3 += 8;
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 24) = 0;
  }
  char v9 = *(unsigned char *)(v1 + 8);
  unint64_t v8 = (uint64_t *)(v1 + 8);
  if (v9)
  {
    return sub_188B4AC(v8);
  }
  return result;
}

char *sub_10E60D4(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v6 = (uint64_t *)(a1 + 8);
  char v7 = (uint64_t *)(a1 + 16);
  while (1)
  {
LABEL_2:
    if ((unint64_t)a2 >= *(void *)a3)
    {
      int v20 = a2 - a3[1].i32[0];
      if (a3[3].i32[1] == v20)
      {
        if (v20 >= 1 && !*(void *)&a3[2]) {
          return 0;
        }
        return a2;
      }
      a2 = sub_188BB90((uint64_t)a3, v20, a3[11].i32[1]);
      if (v21) {
        return a2;
      }
    }
    unint64_t v8 = a2 + 1;
    unsigned int v9 = *a2;
    if ((*a2 & 0x80000000) == 0)
    {
      if (v9 == 10) {
        goto LABEL_14;
      }
      goto LABEL_5;
    }
    unsigned int v11 = v9 + (*v8 << 7);
    unsigned int v9 = v11 - 128;
    if (*v8 < 0)
    {
      unint64_t v8 = (char *)sub_188C180((uint64_t)a2, v11 - 128);
      unsigned int v9 = v19;
      if (v19 != 10) {
        goto LABEL_5;
      }
LABEL_14:
      a2 = v8 - 1;
      while (1)
      {
        unint64_t v12 = *(_DWORD **)(a1 + 32);
        if (v12 && (uint64_t v13 = *(int *)(a1 + 24), (int)v13 < *v12))
        {
          *(_DWORD *)(a1 + 24) = v13 + 1;
          uint64_t v14 = *(void *)&v12[2 * v13 + 2];
          int v24 = 0;
          unsigned int v15 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)a2 + 1, &v24);
          if (v15) {
            goto LABEL_21;
          }
        }
        else
        {
          sub_10F8D64(*v7);
          uint64_t v14 = sub_188CDC8((uint64_t)v7, v16);
          int v24 = 0;
          unsigned int v15 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)a2 + 1, &v24);
          if (v15)
          {
LABEL_21:
            a2 = sub_10E5394(v14, v15, a3);
            ++a3[11].i32[0];
            if (a3[10].i32[0]) {
              return 0;
            }
            goto LABEL_22;
          }
        }
        a2 = 0;
        ++a3[11].i32[0];
        if (a3[10].i32[0]) {
          return 0;
        }
LABEL_22:
        int v17 = a3[3].i32[1] + v24;
        a3[3].i32[1] = v17;
        int32x2_t v18 = (int32x2_t)(*(void *)&a3[1] + (v17 & (v17 >> 31)));
        *a3 = v18;
        if (!a2) {
          return a2;
        }
        if (*(void *)&v18 <= (unint64_t)a2 || *a2 != 10) {
          goto LABEL_2;
        }
      }
    }
    unint64_t v8 = a2 + 2;
    if (v11 == 138) {
      goto LABEL_14;
    }
LABEL_5:
    if (!v9 || (v9 & 7) == 4) {
      break;
    }
    if (*v6)
    {
      a2 = (char *)sub_1885AC0(v9, (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8), v8, a3);
      if (!a2) {
        return a2;
      }
    }
    else
    {
      unsigned int v22 = (std::string *)sub_188DBD8(v6);
      a2 = (char *)sub_1885AC0(v9, v22, v8, a3);
      if (!a2) {
        return a2;
      }
    }
  }
  if (!v8) {
    return 0;
  }
  a3[10].i32[0] = v9 - 1;
  return v8;
}

char *sub_10E6340(uint64_t a1, char *__dst, _DWORD *a3)
{
  int v6 = *(_DWORD *)(a1 + 24);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
    {
      if (*(void *)a3 <= (unint64_t)__dst) {
        long long __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      }
      uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8 * i + 8);
      *long long __dst = 10;
      unsigned int v10 = *(_DWORD *)(v9 + 20);
      __dst[1] = v10;
      if (v10 > 0x7F) {
        unint64_t v8 = sub_188A9CC(v10, __dst + 1);
      }
      else {
        unint64_t v8 = __dst + 2;
      }
      long long __dst = sub_10E581C(v9, v8, a3);
    }
  }
  uint64_t v11 = *(void *)(a1 + 8);
  if ((v11 & 1) == 0) {
    return __dst;
  }
  unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v13 + 31) < 0)
  {
    uint64_t v14 = *(void **)(v13 + 8);
    uint64_t v15 = *(void *)(v13 + 16);
  }
  else
  {
    uint64_t v14 = (void *)(v13 + 8);
    LODWORD(v15) = *(unsigned __int8 *)(v13 + 31);
  }
  uint64_t v16 = (int)v15;
  if (*(void *)a3 - (void)__dst >= (int)v15)
  {
    memcpy(__dst, v14, (int)v15);
    __dst += v16;
    return __dst;
  }

  return (char *)sub_188A528(a3, (char *)v14, v15, __dst);
}

uint64_t sub_10E6484(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    uint64_t v4 = (uint64_t *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = sub_10E5B80(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
    uint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & 1) == 0)
    {
LABEL_8:
      *(_DWORD *)(a1 + 40) = v2;
      return v2;
    }
  }
  unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v10 + 31) < 0) {
    uint64_t v11 = *(void *)(v10 + 16);
  }
  else {
    uint64_t v11 = *(unsigned __int8 *)(v10 + 31);
  }
  uint64_t v12 = v11 + v2;
  *(_DWORD *)(a1 + 40) = v12;
  return v12;
}

void sub_10E6548(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 32) + 8);
    uint64_t v6 = (uint64_t *)sub_188CCE4(a1 + 16, *(_DWORD *)(a2 + 24));
    sub_10FA8C8((uint64_t *)(a1 + 16), v6, v5, v4, **(_DWORD **)(a1 + 32) - *(_DWORD *)(a1 + 24));
    int v7 = *(_DWORD *)(a1 + 24) + v4;
    *(_DWORD *)(a1 + 24) = v7;
    uint64_t v8 = *(int **)(a1 + 32);
    if (*v8 < v7) {
      *uint64_t v8 = v7;
    }
  }
  uint64_t v9 = *(void *)(a2 + 8);
  if (v9)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v9 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

uint64_t sub_10E6618(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 24);
  if ((int)v1 < 1) {
    return 1;
  }
  uint64_t v3 = v1 - 1;
  while (1)
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8 * v3 + 8);
    if (*(unsigned char *)(v4 + 16))
    {
      uint64_t result = sub_15B06D8(*(void *)(v4 + 24));
      if (!result) {
        break;
      }
    }
    if ((unint64_t)--v3 >= 0xFFFFFFFFFFFFFFFELL) {
      return 1;
    }
  }
  return result;
}

double sub_10E6688@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_20B8870;
  strcpy(v2, "geo3.LegacyRoutingPathLeg");
  return *(double *)"cyRoutingPathLeg";
}

uint64_t sub_10E66DC(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_8;
    }
  }
  else if (v4)
  {
    goto LABEL_8;
  }
  if ((uint64_t (***)())a1 != &off_24F77C8 && *(void *)(a1 + 24))
  {
    sub_15B0994();
    operator delete();
  }
  if (v2)
  {
    sub_10E4F74(v3);
    uint64_t v2 = *v3;
  }
LABEL_8:
  *(void *)a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    uint64_t v5 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v5)
      {
LABEL_11:
        sub_1881618();
        operator delete();
      }
    }
    else if (v5)
    {
      goto LABEL_11;
    }
  }
  return a1;
}

void sub_10E67C4(uint64_t a1)
{
  sub_10E66DC(a1);

  operator delete();
}

unsigned char *sub_10E67FC(unsigned char *result)
{
  uint64_t v1 = result;
  int v2 = *((_DWORD *)result + 4);
  if (v2) {
    uint64_t result = sub_15B09D0(*((void *)result + 3));
  }
  if ((v2 & 0x3E) != 0)
  {
    *((void *)v1 + 4) = 0;
    *((void *)v1 + 5) = 0;
    *((void *)v1 + 6) = 0;
  }
  char v4 = v1[8];
  uint64_t v3 = v1 + 8;
  *((_DWORD *)v3 + 2) = 0;
  if (v4)
  {
    return (unsigned char *)sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

char *sub_10E6868(uint64_t a1, char *a2, int32x2_t *a3)
{
  int v6 = 0;
  int v7 = (uint64_t *)(a1 + 8);
  while ((unint64_t)a2 < *(void *)a3)
  {
LABEL_5:
    uint64_t v8 = a2 + 1;
    unsigned int v9 = *a2;
    if (*a2 < 0)
    {
      unsigned int v13 = v9 + (*v8 << 7);
      unsigned int v9 = v13 - 128;
      if (*v8 < 0)
      {
        uint64_t v8 = (char *)sub_188C180((uint64_t)a2, v13 - 128);
        unsigned int v9 = v25;
        unsigned int v10 = (v25 >> 3) - 1;
        if (v10 <= 5) {
          goto LABEL_7;
        }
      }
      else
      {
        uint64_t v8 = a2 + 2;
        unsigned int v10 = (v9 >> 3) - 1;
        if (v10 <= 5) {
          goto LABEL_7;
        }
      }
LABEL_42:
      if (v9) {
        BOOL v26 = (v9 & 7) == 4;
      }
      else {
        BOOL v26 = 1;
      }
      if (v26)
      {
        if (v8) {
          a3[10].i32[0] = v9 - 1;
        }
        goto LABEL_70;
      }
      if (*v7)
      {
        a2 = (char *)sub_1885AC0(v9, (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8), v8, a3);
        if (!a2) {
          goto LABEL_71;
        }
      }
      else
      {
        int v35 = (std::string *)sub_188DBD8(v7);
        a2 = (char *)sub_1885AC0(v9, v35, v8, a3);
        if (!a2)
        {
LABEL_71:
          uint64_t v8 = 0;
          goto LABEL_70;
        }
      }
    }
    else
    {
      unsigned int v10 = (v9 >> 3) - 1;
LABEL_7:
      switch(v10)
      {
        case 0u:
          if (v9 != 8) {
            goto LABEL_42;
          }
          v6 |= 2u;
          a2 = v8 + 1;
          unint64_t v11 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_12;
          }
          int v12 = *a2;
          unint64_t v11 = v11 + (v12 << 7) - 128;
          if (v12 < 0)
          {
            a2 = (char *)sub_188C138((uint64_t)v8, v11);
            *(void *)(a1 + 32) = -(uint64_t)(v29 & 1) ^ (v29 >> 1);
            if (!a2) {
              goto LABEL_71;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_12:
            *(void *)(a1 + 32) = -(uint64_t)(v11 & 1) ^ (v11 >> 1);
          }
          continue;
        case 1u:
          if (v9 != 18) {
            goto LABEL_42;
          }
          *(_DWORD *)(a1 + 16) |= 1u;
          uint64_t v14 = *(void *)(a1 + 24);
          if (v14)
          {
            int v37 = 0;
            uint64_t v15 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)v8, &v37);
            if (v15) {
              goto LABEL_19;
            }
          }
          else
          {
            uint64_t v27 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
            if (*v7) {
              uint64_t v27 = (void *)*v27;
            }
            uint64_t v14 = sub_15C1918((uint64_t)v27);
            *(void *)(a1 + 24) = v14;
            int v37 = 0;
            uint64_t v15 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)v8, &v37);
            if (v15)
            {
LABEL_19:
              a2 = sub_15B0A38(v14, v15, a3);
              ++a3[11].i32[0];
              if (a3[10].i32[0]) {
                goto LABEL_71;
              }
              goto LABEL_53;
            }
          }
          a2 = 0;
          ++a3[11].i32[0];
          if (a3[10].i32[0]) {
            goto LABEL_71;
          }
LABEL_53:
          int v28 = a3[3].i32[1] + v37;
          a3[3].i32[1] = v28;
          *a3 = (int32x2_t)(*(void *)&a3[1] + (v28 & (v28 >> 31)));
          if (!a2) {
            goto LABEL_71;
          }
          continue;
        case 2u:
          if (v9 != 24) {
            goto LABEL_42;
          }
          v6 |= 4u;
          a2 = v8 + 1;
          int v16 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_25;
          }
          int v17 = *a2;
          int v16 = v16 + (v17 << 7) - 128;
          if (v17 < 0)
          {
            a2 = (char *)sub_188C0D0((uint64_t)v8, v16);
            *(_DWORD *)(a1 + 40) = v30;
            if (!a2) {
              goto LABEL_71;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_25:
            *(_DWORD *)(a1 + 40) = v16;
          }
          continue;
        case 3u:
          if (v9 != 32) {
            goto LABEL_42;
          }
          v6 |= 8u;
          a2 = v8 + 1;
          int v18 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_30;
          }
          int v19 = *a2;
          int v18 = v18 + (v19 << 7) - 128;
          if (v19 < 0)
          {
            a2 = (char *)sub_188C0D0((uint64_t)v8, v18);
            *(_DWORD *)(a1 + 44) = v31;
            if (!a2) {
              goto LABEL_71;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_30:
            *(_DWORD *)(a1 + 44) = v18;
          }
          continue;
        case 4u:
          if (v9 != 40) {
            goto LABEL_42;
          }
          v6 |= 0x10u;
          a2 = v8 + 1;
          int v20 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_35;
          }
          int v21 = *a2;
          int v20 = v20 + (v21 << 7) - 128;
          if (v21 < 0)
          {
            a2 = (char *)sub_188C0D0((uint64_t)v8, v20);
            *(_DWORD *)(a1 + 48) = v32;
            if (!a2) {
              goto LABEL_71;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_35:
            *(_DWORD *)(a1 + 48) = v20;
          }
          break;
        case 5u:
          if (v9 != 48) {
            goto LABEL_42;
          }
          v6 |= 0x20u;
          a2 = v8 + 1;
          int v22 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_3;
          }
          int v23 = *a2;
          int v22 = v22 + (v23 << 7) - 128;
          if (v23 < 0)
          {
            a2 = (char *)sub_188C0D0((uint64_t)v8, v22);
            *(_DWORD *)(a1 + 52) = v24;
            if (!a2) {
              goto LABEL_71;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_3:
            *(_DWORD *)(a1 + 52) = v22;
          }
          continue;
        default:
          goto LABEL_42;
      }
    }
  }
  int v33 = a2 - a3[1].i32[0];
  if (a3[3].i32[1] != v33)
  {
    a2 = sub_188BB90((uint64_t)a3, v33, a3[11].i32[1]);
    if (v34) {
      goto LABEL_76;
    }
    goto LABEL_5;
  }
  if (v33 < 1)
  {
LABEL_76:
    uint64_t v8 = a2;
    goto LABEL_70;
  }
  if (a3[2]) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = 0;
  }
LABEL_70:
  *(_DWORD *)(a1 + 16) |= v6;
  return v8;
}

char *sub_10E6CE4(uint64_t a1, unint64_t __dst, _DWORD *a3)
{
  char v4 = (char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 2) != 0)
  {
    if (*(void *)a3 <= __dst) {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v7 = *(void *)(a1 + 32);
    *char v4 = 8;
    unint64_t v8 = (2 * v7) ^ (v7 >> 63);
    v4[1] = v8;
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      unint64_t v9 = v8 >> 7;
      v4[2] = v8 >> 7;
      v4 += 3;
      if (v8 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v10 = v9 >> 14;
          v9 >>= 7;
          *v4++ = v9;
        }
        while (v10);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if (v6)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v11 = *(void *)(a1 + 24);
    *char v4 = 18;
    unsigned int v12 = *(_DWORD *)(v11 + 44);
    v4[1] = v12;
    if (v12 > 0x7F) {
      unsigned int v13 = sub_188A9CC(v12, v4 + 1);
    }
    else {
      unsigned int v13 = v4 + 2;
    }
    char v4 = sub_15B0C0C(v11, v13, a3);
  }
  if ((v6 & 4) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4)
    {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      unsigned int v14 = *(_DWORD *)(a1 + 40);
      *char v4 = 24;
      v4[1] = v14;
      if (v14 <= 0x7F) {
        goto LABEL_18;
      }
    }
    else
    {
      unsigned int v14 = *(_DWORD *)(a1 + 40);
      *char v4 = 24;
      v4[1] = v14;
      if (v14 <= 0x7F)
      {
LABEL_18:
        v4 += 2;
        goto LABEL_22;
      }
    }
    v4[1] = v14 | 0x80;
    unsigned int v15 = v14 >> 7;
    v4[2] = v14 >> 7;
    v4 += 3;
    if (v14 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unsigned int v16 = v15 >> 14;
        v15 >>= 7;
        *v4++ = v15;
      }
      while (v16);
    }
  }
LABEL_22:
  if ((v6 & 8) == 0) {
    goto LABEL_29;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    unsigned int v17 = *(_DWORD *)(a1 + 44);
    *char v4 = 32;
    v4[1] = v17;
    if (v17 <= 0x7F) {
      goto LABEL_25;
    }
  }
  else
  {
    unsigned int v17 = *(_DWORD *)(a1 + 44);
    *char v4 = 32;
    v4[1] = v17;
    if (v17 <= 0x7F)
    {
LABEL_25:
      v4 += 2;
      goto LABEL_29;
    }
  }
  v4[1] = v17 | 0x80;
  unsigned int v18 = v17 >> 7;
  v4[2] = v17 >> 7;
  v4 += 3;
  if (v17 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unsigned int v19 = v18 >> 14;
      v18 >>= 7;
      *v4++ = v18;
    }
    while (v19);
  }
LABEL_29:
  if ((v6 & 0x10) == 0) {
    goto LABEL_36;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    unsigned int v20 = *(_DWORD *)(a1 + 48);
    *char v4 = 40;
    v4[1] = v20;
    if (v20 <= 0x7F) {
      goto LABEL_32;
    }
  }
  else
  {
    unsigned int v20 = *(_DWORD *)(a1 + 48);
    *char v4 = 40;
    v4[1] = v20;
    if (v20 <= 0x7F)
    {
LABEL_32:
      v4 += 2;
      goto LABEL_36;
    }
  }
  v4[1] = v20 | 0x80;
  unsigned int v21 = v20 >> 7;
  v4[2] = v20 >> 7;
  v4 += 3;
  if (v20 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unsigned int v22 = v21 >> 14;
      v21 >>= 7;
      *v4++ = v21;
    }
    while (v22);
  }
LABEL_36:
  if ((v6 & 0x20) == 0) {
    goto LABEL_43;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    unsigned int v23 = *(_DWORD *)(a1 + 52);
    *char v4 = 48;
    v4[1] = v23;
    if (v23 <= 0x7F) {
      goto LABEL_39;
    }
  }
  else
  {
    unsigned int v23 = *(_DWORD *)(a1 + 52);
    *char v4 = 48;
    v4[1] = v23;
    if (v23 <= 0x7F)
    {
LABEL_39:
      v4 += 2;
      goto LABEL_43;
    }
  }
  v4[1] = v23 | 0x80;
  unsigned int v24 = v23 >> 7;
  v4[2] = v23 >> 7;
  v4 += 3;
  if (v23 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unsigned int v25 = v24 >> 14;
      v24 >>= 7;
      *v4++ = v24;
    }
    while (v25);
  }
LABEL_43:
  uint64_t v26 = *(void *)(a1 + 8);
  if ((v26 & 1) == 0) {
    return v4;
  }
  unint64_t v28 = v26 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v28 + 31) < 0)
  {
    unint64_t v29 = *(char **)(v28 + 8);
    uint64_t v30 = *(void *)(v28 + 16);
  }
  else
  {
    unint64_t v29 = (char *)(v28 + 8);
    LODWORD(v30) = *(unsigned __int8 *)(v28 + 31);
  }
  uint64_t v31 = (int)v30;
  if (*(void *)a3 - (void)v4 < (int)v30)
  {
    return (char *)sub_188A528(a3, v29, v30, v4);
  }
  else
  {
    memcpy(v4, v29, (int)v30);
    return &v4[v31];
  }
}

uint64_t sub_10E70D8(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 0x3F) != 0)
  {
    if (v2)
    {
      uint64_t v5 = sub_15B0D90(*(void *)(a1 + 24));
      uint64_t result = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v2 & 2) == 0) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t result = 0;
      if ((v2 & 2) == 0)
      {
LABEL_9:
        if ((v2 & 4) != 0)
        {
          result += ((9 * (__clz(*(_DWORD *)(a1 + 40) | 1) ^ 0x1F) + 73) >> 6) + 1;
          if ((v2 & 8) == 0)
          {
LABEL_11:
            if ((v2 & 0x10) == 0) {
              goto LABEL_12;
            }
            goto LABEL_17;
          }
        }
        else if ((v2 & 8) == 0)
        {
          goto LABEL_11;
        }
        result += ((9 * (__clz(*(_DWORD *)(a1 + 44) | 1) ^ 0x1F) + 73) >> 6) + 1;
        if ((v2 & 0x10) == 0)
        {
LABEL_12:
          if ((v2 & 0x20) == 0) {
            goto LABEL_13;
          }
          goto LABEL_18;
        }
LABEL_17:
        result += ((9 * (__clz(*(_DWORD *)(a1 + 48) | 1) ^ 0x1F) + 73) >> 6) + 1;
        if ((v2 & 0x20) == 0)
        {
LABEL_13:
          uint64_t v4 = *(void *)(a1 + 8);
          if ((v4 & 1) == 0) {
            goto LABEL_14;
          }
          goto LABEL_19;
        }
LABEL_18:
        result += ((9 * (__clz(*(_DWORD *)(a1 + 52) | 1) ^ 0x1F) + 73) >> 6) + 1;
        uint64_t v4 = *(void *)(a1 + 8);
        if ((v4 & 1) == 0) {
          goto LABEL_14;
        }
        goto LABEL_19;
      }
    }
    result += ((9 * (__clz((2 * *(void *)(a1 + 32)) ^ (*(uint64_t *)(a1 + 32) >> 63) | 1) ^ 0x3F) + 73) >> 6) + 1;
    goto LABEL_9;
  }
  uint64_t result = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  if ((v4 & 1) == 0)
  {
LABEL_14:
    *(_DWORD *)(a1 + 20) = result;
    return result;
  }
LABEL_19:
  unint64_t v6 = v4 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v6 + 31) < 0) {
    result += *(void *)(v6 + 16);
  }
  else {
    result += *(unsigned __int8 *)(v6 + 31);
  }
  *(_DWORD *)(a1 + 20) = result;
  return result;
}

void sub_10E7278(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 0x3F) != 0)
  {
    if (v4)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v6 = *(void *)(a1 + 24);
      if (!v6)
      {
        uint64_t v7 = *(void *)(a1 + 8);
        unint64_t v8 = (void *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
        if (v7) {
          unint64_t v8 = (void *)*v8;
        }
        uint64_t v6 = sub_15C1918((uint64_t)v8);
        *(void *)(a1 + 24) = v6;
      }
      if (*(void *)(a2 + 24)) {
        unint64_t v9 = *(uint64_t (****)())(a2 + 24);
      }
      else {
        unint64_t v9 = &off_253F1A0;
      }
      sub_15B0E24(v6, (uint64_t)v9);
      if ((v4 & 2) == 0)
      {
LABEL_4:
        if ((v4 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_23;
      }
    }
    else if ((v4 & 2) == 0)
    {
      goto LABEL_4;
    }
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_5:
      if ((v4 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_24;
    }
LABEL_23:
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_6:
      if ((v4 & 0x10) == 0) {
        goto LABEL_7;
      }
      goto LABEL_25;
    }
LABEL_24:
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
    if ((v4 & 0x10) == 0)
    {
LABEL_7:
      if ((v4 & 0x20) == 0)
      {
LABEL_9:
        *(_DWORD *)(a1 + 16) |= v4;
        goto LABEL_10;
      }
LABEL_8:
      *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
      goto LABEL_9;
    }
LABEL_25:
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    if ((v4 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_10:
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

uint64_t sub_10E7390(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 1) == 0) {
    return 1;
  }
  uint64_t result = sub_15B0F18(*(void *)(a1 + 24));
  if (result) {
    return 1;
  }
  return result;
}

double sub_10E73BC@<D0>(uint64_t a1@<X8>)
{
  int v2 = (char *)operator new(0x20uLL);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_20B91A0;
  strcpy(v2, "geo3.SessionState.PathPoint");
  return *(double *)"nState.PathPoint";
}

void *sub_10E7410(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }
  return a1;
}

void sub_10E74B0(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }

  operator delete();
}

uint64_t sub_10E7570(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_10E7588(uint64_t a1, char *a2, int32x2_t *a3)
{
  int v6 = 0;
  uint64_t v7 = (uint64_t *)(a1 + 8);
  while ((unint64_t)a2 < *(void *)a3)
  {
LABEL_5:
    unint64_t v9 = a2 + 1;
    unsigned int v10 = *a2;
    if (*a2 < 0)
    {
      unsigned int v12 = v10 + (*v9 << 7);
      unsigned int v10 = v12 - 128;
      if (*v9 < 0)
      {
        unint64_t v9 = (char *)sub_188C180((uint64_t)a2, v12 - 128);
        unsigned int v10 = v14;
        if (v14 == 8) {
          goto LABEL_2;
        }
      }
      else
      {
        unint64_t v9 = a2 + 2;
        if (v12 == 136) {
          goto LABEL_2;
        }
      }
LABEL_7:
      if (v10) {
        BOOL v11 = (v10 & 7) == 4;
      }
      else {
        BOOL v11 = 1;
      }
      if (v11)
      {
        if (v9) {
          a3[10].i32[0] = v10 - 1;
        }
        goto LABEL_30;
      }
      if (*v7)
      {
        a2 = (char *)sub_1885AC0(v10, (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8), v9, a3);
        if (!a2) {
          goto LABEL_27;
        }
      }
      else
      {
        unsigned int v18 = (std::string *)sub_188DBD8(v7);
        a2 = (char *)sub_1885AC0(v10, v18, v9, a3);
        if (!a2)
        {
LABEL_27:
          unint64_t v9 = 0;
          goto LABEL_30;
        }
      }
    }
    else
    {
      if (v10 != 8) {
        goto LABEL_7;
      }
LABEL_2:
      a2 = v9 + 1;
      int v8 = *v9;
      if ((*v9 & 0x80000000) == 0) {
        goto LABEL_3;
      }
      int v13 = *a2;
      int v8 = v8 + (v13 << 7) - 128;
      if (v13 < 0)
      {
        a2 = (char *)sub_188C0D0((uint64_t)v9, v8);
        *(_DWORD *)(a1 + 24) = v15;
        int v6 = 1;
        if (!a2) {
          goto LABEL_27;
        }
      }
      else
      {
        a2 = v9 + 2;
LABEL_3:
        *(_DWORD *)(a1 + 24) = v8;
        int v6 = 1;
      }
    }
  }
  int v16 = a2 - a3[1].i32[0];
  if (a3[3].i32[1] != v16)
  {
    a2 = sub_188BB90((uint64_t)a3, v16, a3[11].i32[1]);
    if (v17) {
      goto LABEL_35;
    }
    goto LABEL_5;
  }
  if (v16 < 1)
  {
LABEL_35:
    unint64_t v9 = a2;
    goto LABEL_30;
  }
  if (a3[2]) {
    unint64_t v9 = a2;
  }
  else {
    unint64_t v9 = 0;
  }
LABEL_30:
  *(_DWORD *)(a1 + 16) |= v6;
  return v9;
}

_OWORD *sub_10E7754(uint64_t a1, unsigned char *__dst, _DWORD *a3)
{
  int v4 = __dst;
  if (*(unsigned char *)(a1 + 16))
  {
    if (*(void *)a3 <= (unint64_t)__dst)
    {
      int v4 = sub_188A3FC((uint64_t)a3, (int)__dst);
      unsigned int v6 = *(_DWORD *)(a1 + 24);
      *(unsigned char *)int v4 = 8;
      *((unsigned char *)v4 + 1) = v6;
      if (v6 <= 0x7F) {
        goto LABEL_4;
      }
    }
    else
    {
      unsigned int v6 = *(_DWORD *)(a1 + 24);
      *long long __dst = 8;
      __dst[1] = v6;
      if (v6 <= 0x7F)
      {
LABEL_4:
        int v4 = (_OWORD *)((char *)v4 + 2);
        goto LABEL_8;
      }
    }
    *((unsigned char *)v4 + 1) = v6 | 0x80;
    unsigned int v7 = v6 >> 7;
    *((unsigned char *)v4 + 2) = v6 >> 7;
    int v4 = (_OWORD *)((char *)v4 + 3);
    if (v6 >= 0x4000)
    {
      do
      {
        *((unsigned char *)v4 - 1) |= 0x80u;
        unsigned int v8 = v7 >> 14;
        v7 >>= 7;
        *(unsigned char *)int v4 = v7;
        int v4 = (_OWORD *)((char *)v4 + 1);
      }
      while (v8);
    }
  }
LABEL_8:
  uint64_t v9 = *(void *)(a1 + 8);
  if ((v9 & 1) == 0) {
    return v4;
  }
  unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v11 + 31) < 0)
  {
    unsigned int v12 = *(char **)(v11 + 8);
    uint64_t v13 = *(void *)(v11 + 16);
  }
  else
  {
    unsigned int v12 = (char *)(v11 + 8);
    LODWORD(v13) = *(unsigned __int8 *)(v11 + 31);
  }
  uint64_t v14 = (int)v13;
  if (*(void *)a3 - (void)v4 < (int)v13)
  {
    return (_OWORD *)sub_188A528(a3, v12, v13, v4);
  }
  else
  {
    memcpy(v4, v12, (int)v13);
    return (_OWORD *)((char *)v4 + v14);
  }
}

uint64_t sub_10E78A0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v1 = ((9 * (__clz(*(_DWORD *)(a1 + 24) | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else {
    uint64_t v1 = 0;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    unint64_t v4 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v4 + 31) < 0) {
      uint64_t v5 = *(void *)(v4 + 16) + v1;
    }
    else {
      uint64_t v5 = *(unsigned __int8 *)(v4 + 31) + v1;
    }
    *(_DWORD *)(a1 + 20) = v5;
    return v5;
  }
  else
  {
    *(_DWORD *)(a1 + 20) = v1;
    return v1;
  }
}

std::string *sub_10E7918(std::string *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16))
  {
    int v2 = *(_DWORD *)(a2 + 24);
    LODWORD(result->__r_.__value_.__r.__words[2]) |= 1u;
    LODWORD(result[1].__r_.__value_.__l.__data_) = v2;
  }
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3) {
    return sub_188B4F8((uint64_t *)&result->__r_.__value_.__l.__size_, (v3 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_10E7950()
{
  return 1;
}

double sub_10E7958@<D0>(uint64_t a1@<X8>)
{
  int v2 = (char *)operator new(0x30uLL);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_20B9A40;
  strcpy(v2, "geo3.SessionState.SoftClosure.IncidentData");
  return *(double *)"ure.IncidentData";
}

void *sub_10E79AC(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    unint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }
  return a1;
}

void sub_10E7A4C(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    unint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }

  operator delete();
}

uint64_t *sub_10E7B0C(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = (uint64_t *)(a1 + 8);
  if (v2) {
    return (uint64_t *)sub_188B4AC(result);
  }
  return result;
}

char *sub_10E7B1C(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v5 = (uint64_t *)(a1 + 8);
  while (1)
  {
    if ((unint64_t)a2 >= *(void *)a3)
    {
      int v12 = a2 - a3[1].i32[0];
      if (a3[3].i32[1] == v12)
      {
        if (v12 < 1) {
          return a2;
        }
        if (!*(void *)&a3[2]) {
          return 0;
        }
        return a2;
      }
      a2 = sub_188BB90((uint64_t)a3, v12, a3[11].i32[1]);
      if (v13) {
        return a2;
      }
    }
    unsigned int v6 = a2 + 1;
    unsigned int v7 = *a2;
    if ((*a2 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    unsigned int v8 = v7 + (*v6 << 7);
    unsigned int v7 = v8 - 128;
    if (*v6 < 0) {
      break;
    }
    unsigned int v6 = a2 + 2;
LABEL_6:
    if (v7) {
      BOOL v9 = (v7 & 7) == 4;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9) {
      goto LABEL_24;
    }
LABEL_10:
    if (*v5)
    {
      a2 = (char *)sub_1885AC0(v7, (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFCLL) + 8), v6, a3);
      if (!a2) {
        return a2;
      }
    }
    else
    {
      uint64_t v14 = (std::string *)sub_188DBD8(v5);
      a2 = (char *)sub_1885AC0(v7, v14, v6, a3);
      if (!a2) {
        return a2;
      }
    }
  }
  unsigned int v6 = (char *)sub_188C180((uint64_t)a2, v8 - 128);
  unsigned int v7 = v10;
  if (v10) {
    BOOL v11 = (v10 & 7) == 4;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11) {
    goto LABEL_10;
  }
LABEL_24:
  if (v6)
  {
    a3[10].i32[0] = v7 - 1;
    return v6;
  }
  return 0;
}

_OWORD *sub_10E7C8C(uint64_t a1, _OWORD *__dst, _DWORD *a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if ((v4 & 1) == 0) {
    return __dst;
  }
  unint64_t v6 = v4 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v6 + 31) < 0)
  {
    unsigned int v7 = *(char **)(v6 + 8);
    unint64_t v6 = *(void *)(v6 + 16);
  }
  else
  {
    unsigned int v7 = (char *)(v6 + 8);
    LODWORD(v6) = *(unsigned __int8 *)(v6 + 31);
  }
  uint64_t v8 = (int)v6;
  if (*(void *)a3 - (void)__dst < (int)v6)
  {
    return (_OWORD *)sub_188A528(a3, v7, v6, __dst);
  }
  else
  {
    memcpy(__dst, v7, (int)v6);
    return (_OWORD *)((char *)__dst + v8);
  }
}

uint64_t sub_10E7D30(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    unint64_t v3 = v1 & 0xFFFFFFFFFFFFFFFCLL;
    int v4 = *(char *)(v3 + 31);
    if (v4 < 0)
    {
      uint64_t v5 = *(void *)(v3 + 16);
      *(_DWORD *)(a1 + 16) = v5;
      return v5;
    }
    else
    {
      *(_DWORD *)(a1 + 16) = *(unsigned __int8 *)(v3 + 31);
      return v4;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 16) = 0;
    return 0;
  }
}

std::string *sub_10E7D74(std::string *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2) {
    return sub_188B4F8((uint64_t *)&result->__r_.__value_.__l.__size_, (v2 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_10E7D90()
{
  return 1;
}

char *sub_10E7D98@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_20B9240;
  strcpy(result, "geo3.SessionState.SoftClosure.Reroute");
  return result;
}

void *sub_10E7DEC(void *a1)
{
  unint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_5;
    }
  }
  else if (v4)
  {
    goto LABEL_5;
  }
  sub_10E7EAC((uint64_t)a1);
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_5:
  sub_10FA438(a1 + 3);
  *a1 = off_24E6998;
  uint64_t v5 = a1[1];
  if ((v5 & 2) != 0)
  {
    unint64_t v6 = (void *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
    if (v5)
    {
      if (*v6)
      {
LABEL_8:
        sub_1881618();
        operator delete();
      }
    }
    else if (v6)
    {
      goto LABEL_8;
    }
  }
  return a1;
}

void ***sub_10E7EAC(uint64_t a1)
{
  unint64_t v3 = *(uint64_t **)(a1 + 48);
  uint64_t result = (void ***)(a1 + 48);
  if (v3 != &qword_2550250) {
    sub_1881C6C(result);
  }
  if ((uint64_t (***)())a1 != &off_24F7820)
  {
    int v4 = *(void **)(a1 + 56);
    if (v4)
    {
      uint64_t v5 = v4[1];
      if ((v5 & 1) != 0 && !*(void *)(v5 & 0xFFFFFFFFFFFFFFFCLL))
      {
        sub_10E4F74(v4 + 1);
        uint64_t v5 = v4[1];
      }
      *int v4 = off_24E6998;
      if ((v5 & 2) != 0)
      {
        unint64_t v6 = (void *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
        if (v5)
        {
          if (*v6)
          {
LABEL_9:
            sub_1881618();
            operator delete();
          }
        }
        else if (v6)
        {
          goto LABEL_9;
        }
      }
      operator delete();
    }
  }
  return result;
}

void sub_10E7FC0(void *a1)
{
  sub_10E7DEC(a1);

  operator delete();
}

uint64_t sub_10E7FF8(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 32);
  if ((int)v2 >= 1)
  {
    unint64_t v3 = (void *)(*(void *)(result + 40) + 8);
    do
    {
      uint64_t result = *v3 + 8;
      if (*(unsigned char *)result) {
        uint64_t result = sub_188B4AC((uint64_t *)result);
      }
      ++v3;
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 32) = 0;
  }
  int v4 = *(_DWORD *)(v1 + 16);
  if ((v4 & 3) != 0)
  {
    if (v4)
    {
      unint64_t v5 = *(void *)(v1 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v5 + 23) < 0)
      {
        **(unsigned char **)unint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        if ((v4 & 2) == 0) {
          goto LABEL_15;
        }
        goto LABEL_12;
      }
      *(unsigned char *)unint64_t v5 = 0;
      *(unsigned char *)(v5 + 23) = 0;
    }
    if ((v4 & 2) == 0) {
      goto LABEL_15;
    }
LABEL_12:
    uint64_t v6 = *(void *)(v1 + 56);
    char v7 = *(unsigned char *)(v6 + 8);
    uint64_t result = v6 + 8;
    *(_DWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 8) = 0;
    if (v7) {
      uint64_t result = sub_188B4AC((uint64_t *)result);
    }
  }
LABEL_15:
  char v9 = *(unsigned char *)(v1 + 8);
  uint64_t v8 = v1 + 8;
  *(_DWORD *)(v8 + 8) = 0;
  if (v9)
  {
    return sub_188B4AC((uint64_t *)v8);
  }
  return result;
}

unsigned __int8 *sub_10E80E4(uint64_t a1, unsigned __int8 *a2, int32x2_t *a3)
{
  uint64_t v6 = (uint64_t *)(a1 + 24);
  char v7 = (uint64_t *)(a1 + 8);
  uint64_t v8 = (void *)(a1 + 48);
  while (1)
  {
    while (1)
    {
      while (1)
      {
LABEL_4:
        if ((unint64_t)a2 >= *(void *)a3)
        {
          int v30 = a2 - a3[1].i32[0];
          if (a3[3].i32[1] == v30)
          {
            if (v30 >= 1 && !*(void *)&a3[2]) {
              return 0;
            }
            return a2;
          }
          a2 = (unsigned __int8 *)sub_188BB90((uint64_t)a3, v30, a3[11].i32[1]);
          if (v31) {
            return a2;
          }
        }
        unsigned int v10 = a2 + 1;
        unsigned int v11 = *a2;
        if (((char)*a2 & 0x80000000) == 0)
        {
          unsigned int v12 = v11 >> 3;
          if (v11 >> 3 == 3) {
            goto LABEL_20;
          }
          goto LABEL_7;
        }
        unsigned int v15 = v11 + (*v10 << 7);
        unsigned int v11 = v15 - 128;
        if ((char)*v10 < 0)
        {
          unsigned int v10 = (unsigned __int8 *)sub_188C180((uint64_t)a2, v15 - 128);
          unsigned int v11 = v28;
          unsigned int v12 = v28 >> 3;
          if (v28 >> 3 != 3) {
            goto LABEL_7;
          }
LABEL_20:
          if (v11 != 26) {
            goto LABEL_12;
          }
          a2 = v10 - 1;
          while (1)
          {
            int v16 = *(_DWORD **)(a1 + 40);
            if (v16 && (uint64_t v17 = *(int *)(a1 + 32), (int)v17 < *v16))
            {
              *(_DWORD *)(a1 + 32) = v17 + 1;
              uint64_t v18 = *(void *)&v16[2 * v17 + 2];
              int v34 = 0;
              unsigned int v19 = (char *)sub_188BEE0((uint64_t)a3, a2 + 1, &v34);
              if (v19) {
                goto LABEL_28;
              }
            }
            else
            {
              uint64_t v20 = sub_10F8F8C(*v6);
              uint64_t v18 = sub_188CDC8((uint64_t)v6, v20);
              int v34 = 0;
              unsigned int v19 = (char *)sub_188BEE0((uint64_t)a3, a2 + 1, &v34);
              if (v19)
              {
LABEL_28:
                a2 = (unsigned __int8 *)sub_10E7B1C(v18, v19, a3);
                ++a3[11].i32[0];
                if (a3[10].i32[0]) {
                  return 0;
                }
                goto LABEL_29;
              }
            }
            a2 = 0;
            ++a3[11].i32[0];
            if (a3[10].i32[0]) {
              return 0;
            }
LABEL_29:
            int v21 = a3[3].i32[1] + v34;
            a3[3].i32[1] = v21;
            int32x2_t v22 = (int32x2_t)(*(void *)&a3[1] + (v21 & (v21 >> 31)));
            *a3 = v22;
            if (!a2) {
              return a2;
            }
            if (*(void *)&v22 <= (unint64_t)a2 || *a2 != 26) {
              goto LABEL_4;
            }
          }
        }
        unsigned int v10 = a2 + 2;
        unsigned int v12 = v11 >> 3;
        if (v11 >> 3 == 3) {
          goto LABEL_20;
        }
LABEL_7:
        if (v12 != 2) {
          break;
        }
        if (v11 != 18) {
          goto LABEL_12;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v23 = *(void *)(a1 + 56);
        if (v23)
        {
          int v33 = 0;
          unsigned int v24 = (char *)sub_188BEE0((uint64_t)a3, v10, &v33);
          if (!v24) {
            goto LABEL_2;
          }
        }
        else
        {
          unint64_t v29 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v7) {
            unint64_t v29 = (void *)*v29;
          }
          uint64_t v23 = sub_10F8F10((uint64_t)v29);
          *(void *)(a1 + 56) = v23;
          int v33 = 0;
          unsigned int v24 = (char *)sub_188BEE0((uint64_t)a3, v10, &v33);
          if (!v24)
          {
LABEL_2:
            a2 = 0;
            ++a3[11].i32[0];
            if (a3[10].i32[0]) {
              return 0;
            }
            goto LABEL_3;
          }
        }
        a2 = (unsigned __int8 *)sub_10E7588(v23, v24, a3);
        ++a3[11].i32[0];
        if (a3[10].i32[0]) {
          return 0;
        }
LABEL_3:
        int v9 = a3[3].i32[1] + v33;
        a3[3].i32[1] = v9;
        *a3 = (int32x2_t)(*(void *)&a3[1] + (v9 & (v9 >> 31)));
        if (!a2) {
          return a2;
        }
      }
      if (v12 != 1 || v11 != 10) {
        break;
      }
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v25 = *(void *)(a1 + 8);
      uint64_t v26 = (uint64_t *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
      if (v25) {
        uint64_t v26 = (uint64_t *)*v26;
      }
      uint64_t v27 = (std::string *)sub_1880F84(v8, v26);
      a2 = (unsigned __int8 *)sub_188C244(v27, (char *)v10, (uint64_t)a3);
      if (!a2) {
        return a2;
      }
    }
LABEL_12:
    if (!v11 || (v11 & 7) == 4) {
      break;
    }
    if (*v7) {
      uint64_t v14 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else {
      uint64_t v14 = (std::string *)sub_188DBD8(v7);
    }
    a2 = sub_1885AC0(v11, v14, (char *)v10, a3);
    if (!a2) {
      return a2;
    }
  }
  if (!v10) {
    return 0;
  }
  a3[10].i32[0] = v11 - 1;
  return v10;
}

char *sub_10E848C(uint64_t a1, char *__dst, void *a3)
{
  int v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    unint64_t v8 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v8 + 23) < 0)
    {
      int64_t v9 = *(void *)(v8 + 8);
      if (v9 > 127) {
        goto LABEL_38;
      }
    }
    else
    {
      int64_t v9 = *(unsigned __int8 *)(v8 + 23);
    }
    if (*a3 - (void)__dst + 14 >= v9)
    {
      *long long __dst = 10;
      __dst[1] = v9;
      if (*(char *)(v8 + 23) >= 0) {
        unsigned int v10 = (const void *)v8;
      }
      else {
        unsigned int v10 = *(const void **)v8;
      }
      memcpy(v4 + 2, v10, v9);
      v4 += v9 + 2;
      if ((v6 & 2) != 0) {
        goto LABEL_13;
      }
LABEL_3:
      int v7 = *(_DWORD *)(a1 + 32);
      if (!v7) {
        goto LABEL_34;
      }
      goto LABEL_19;
    }
LABEL_38:
    int v4 = sub_188A6CC(a3, 1, (void **)v8, __dst);
    if ((v6 & 2) != 0) {
      goto LABEL_13;
    }
    goto LABEL_3;
  }
  if ((v6 & 2) == 0) {
    goto LABEL_3;
  }
LABEL_13:
  if (*a3 <= (unint64_t)v4) {
    int v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v11 = *(void *)(a1 + 56);
  *int v4 = 18;
  unsigned int v12 = *(_DWORD *)(v11 + 20);
  v4[1] = v12;
  if (v12 > 0x7F) {
    char v13 = sub_188A9CC(v12, v4 + 1);
  }
  else {
    char v13 = v4 + 2;
  }
  int v4 = (char *)sub_10E7754(v11, v13, a3);
  int v7 = *(_DWORD *)(a1 + 32);
  if (v7)
  {
LABEL_19:
    for (int i = 0; i != v7; ++i)
    {
      if (*a3 <= (unint64_t)v4) {
        int v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 8 * i + 8);
      *int v4 = 26;
      unsigned int v16 = *(_DWORD *)(v15 + 16);
      v4[1] = v16;
      if (v16 > 0x7F) {
        int v4 = sub_188A9CC(v16, v4 + 1);
      }
      else {
        v4 += 2;
      }
      uint64_t v17 = *(void *)(v15 + 8);
      if (v17)
      {
        unint64_t v18 = v17 & 0xFFFFFFFFFFFFFFFCLL;
        if (*(char *)(v18 + 31) < 0)
        {
          unsigned int v19 = *(char **)(v18 + 8);
          uint64_t v20 = *(void *)(v18 + 16);
        }
        else
        {
          unsigned int v19 = (char *)(v18 + 8);
          LODWORD(v20) = *(unsigned __int8 *)(v18 + 31);
        }
        uint64_t v21 = (int)v20;
        if (*a3 - (void)v4 < (int)v20)
        {
          int v4 = (char *)sub_188A528(a3, v19, v20, v4);
        }
        else
        {
          memcpy(v4, v19, (int)v20);
          v4 += v21;
        }
      }
    }
  }
LABEL_34:
  uint64_t v22 = *(void *)(a1 + 8);
  if ((v22 & 1) == 0) {
    return v4;
  }
  unint64_t v24 = v22 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v24 + 31) < 0)
  {
    uint64_t v25 = *(void **)(v24 + 8);
    uint64_t v26 = *(void *)(v24 + 16);
  }
  else
  {
    uint64_t v25 = (void *)(v24 + 8);
    LODWORD(v26) = *(unsigned __int8 *)(v24 + 31);
  }
  uint64_t v27 = (int)v26;
  if (*a3 - (void)v4 >= (int)v26)
  {
    memcpy(v4, v25, (int)v26);
    v4 += v27;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v25, v26, v4);
}

uint64_t sub_10E8720(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    uint64_t v3 = v2 + 8;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v1)
  {
    uint64_t v4 = 8 * v1;
    do
    {
      uint64_t v5 = *(void *)(*(void *)v3 + 8);
      if (v5)
      {
        unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL;
        if (*(char *)(v7 + 31) < 0) {
          uint64_t v6 = *(void *)(v7 + 16);
        }
        else {
          uint64_t v6 = *(unsigned __int8 *)(v7 + 31);
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      *(_DWORD *)(*(void *)v3 + 16) = v6;
      v1 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      v3 += 8;
      v4 -= 8;
    }
    while (v4);
  }
  else
  {
    uint64_t v1 = 0;
  }
  int v8 = *(_DWORD *)(a1 + 16);
  if ((v8 & 3) != 0)
  {
    if (v8)
    {
      unint64_t v9 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
      uint64_t v11 = *(void *)(v9 + 8);
      if ((v10 & 0x80u) == 0) {
        uint64_t v11 = v10;
      }
      v1 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v8 & 2) != 0)
    {
      uint64_t v12 = *(void *)(a1 + 56);
      if (*(unsigned char *)(v12 + 16)) {
        uint64_t v13 = ((9 * (__clz(*(_DWORD *)(v12 + 24) | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = *(void *)(v12 + 8);
      if (v14)
      {
        unint64_t v19 = v14 & 0xFFFFFFFFFFFFFFFCLL;
        if (*(char *)(v19 + 31) < 0) {
          uint64_t v20 = *(void *)(v19 + 16);
        }
        else {
          uint64_t v20 = *(unsigned __int8 *)(v19 + 31);
        }
        v13 += v20;
      }
      *(_DWORD *)(v12 + 20) = v13;
      v1 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  uint64_t v15 = *(void *)(a1 + 8);
  if (v15)
  {
    unint64_t v17 = v15 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v17 + 31) < 0) {
      uint64_t v18 = *(void *)(v17 + 16) + v1;
    }
    else {
      uint64_t v18 = *(unsigned __int8 *)(v17 + 31) + v1;
    }
    *(_DWORD *)(a1 + 20) = v18;
    return v18;
  }
  else
  {
    *(_DWORD *)(a1 + 20) = v1;
    return v1;
  }
}

std::string *sub_10E88C4(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (std::string **)(*(void *)(a2 + 40) + 8);
    uint64_t v6 = (uint64_t *)sub_188CCE4((uint64_t)&result[1], *(_DWORD *)(a2 + 32));
    uint64_t result = (std::string *)sub_10FA954((uint64_t *)&v3[1], v6, v5, v4, *(_DWORD *)v3[1].__r_.__value_.__r.__words[2]- LODWORD(v3[1].__r_.__value_.__r.__words[1]));
    int v7 = LODWORD(v3[1].__r_.__value_.__r.__words[1]) + v4;
    LODWORD(v3[1].__r_.__value_.__r.__words[1]) = v7;
    int v8 = (int *)v3[1].__r_.__value_.__r.__words[2];
    if (*v8 < v7) {
      *int v8 = v7;
    }
  }
  int v9 = *(_DWORD *)(a2 + 16);
  if ((v9 & 3) != 0)
  {
    if (v9)
    {
      uint64_t v10 = (long long *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
      LODWORD(v3->__r_.__value_.__r.__words[2]) |= 1u;
      std::string::size_type size = v3->__r_.__value_.__l.__size_;
      uint64_t v12 = (uint64_t *)(size & 0xFFFFFFFFFFFFFFFCLL);
      if (size) {
        uint64_t v12 = (uint64_t *)*v12;
      }
      uint64_t result = sub_1881DF4((std::string **)&v3[2], v10, v12);
    }
    if ((v9 & 2) != 0)
    {
      LODWORD(v3->__r_.__value_.__r.__words[2]) |= 2u;
      uint64_t result = (std::string *)v3[2].__r_.__value_.__l.__size_;
      if (!result)
      {
        std::string::size_type v13 = v3->__r_.__value_.__l.__size_;
        uint64_t v14 = (void *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
        if (v13) {
          uint64_t v14 = (void *)*v14;
        }
        uint64_t result = (std::string *)sub_10F8F10((uint64_t)v14);
        v3[2].__r_.__value_.__l.__size_ = (std::string::size_type)result;
      }
      uint64_t v15 = *(uint64_t (****)())(a2 + 56);
      if (!v15) {
        uint64_t v15 = &off_24F7800;
      }
      if ((_BYTE)v15[2])
      {
        int v16 = *((_DWORD *)v15 + 6);
        LODWORD(result->__r_.__value_.__r.__words[2]) |= 1u;
        LODWORD(result[1].__r_.__value_.__l.__data_) = v16;
      }
      unint64_t v17 = (unint64_t)v15[1];
      if (v17) {
        uint64_t result = sub_188B4F8((uint64_t *)&result->__r_.__value_.__l.__size_, (v17 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
    }
  }
  uint64_t v18 = *(void *)(a2 + 8);
  if (v18)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v18 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_10E8A50()
{
  return 1;
}

double sub_10E8A58@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_20B8890;
  strcpy(v2, "geo3.SessionState.SoftClosure");
  return *(double *)"tate.SoftClosure";
}

void *sub_10E8AAC(void *a1)
{
  uint64_t v4 = a1[1];
  uint64_t v2 = a1 + 1;
  uint64_t v3 = v4;
  if ((v4 & 1) != 0 && !*(void *)(v3 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(v2);
  }
  sub_1889DA8((uint64_t)(a1 + 2));
  *a1 = off_24E6998;
  uint64_t v5 = a1[1];
  if ((v5 & 2) != 0)
  {
    uint64_t v6 = (void *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
    if (v5)
    {
      if (*v6)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v6)
    {
      goto LABEL_5;
    }
  }
  return a1;
}

void sub_10E8B50(void *a1)
{
  sub_10E8AAC(a1);

  operator delete();
}

uint64_t sub_10E8B88(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_10E8B9C(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v6 = (unsigned int *)(a1 + 16);
  int v7 = (uint64_t *)(a1 + 8);
  while (1)
  {
LABEL_3:
    if ((unint64_t)a2 < *(void *)a3) {
      goto LABEL_4;
    }
    int v18 = a2 - a3[1].i32[0];
    if (a3[3].i32[1] == v18) {
      break;
    }
    a2 = sub_188BB90((uint64_t)a3, v18, a3[11].i32[1]);
    if (v19) {
      return a2;
    }
LABEL_4:
    int v8 = a2 + 1;
    unsigned int v9 = *a2;
    if (*a2 < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if (*v8 < 0)
      {
        int v8 = (char *)sub_188C180((uint64_t)a2, v10 - 128);
        unsigned int v9 = v15;
        if ((v15 & 0xFFFFFFF8) != 8) {
          goto LABEL_17;
        }
        goto LABEL_8;
      }
      int v8 = a2 + 2;
    }
    if ((v9 & 0xFFFFFFF8) != 8) {
      goto LABEL_17;
    }
LABEL_8:
    if (v9 == 9)
    {
      unsigned int v11 = *v6;
      uint64_t v12 = (unsigned __int8 *)(v8 + 8);
      while (1)
      {
        uint64_t v13 = *((void *)v12 - 1);
        if (v11 == *(_DWORD *)(a1 + 20))
        {
          sub_188CA54(v6, v11 + 1);
          *(void *)(*(void *)(a1 + 24) + 8 * v11++) = v13;
          *uint64_t v6 = v11;
          if (*(void *)a3 <= (unint64_t)v12) {
            goto LABEL_2;
          }
        }
        else
        {
          *(void *)(*(void *)(a1 + 24) + 8 * v11++) = v13;
          *uint64_t v6 = v11;
          if (*(void *)a3 <= (unint64_t)v12)
          {
LABEL_2:
            a2 = (char *)v12;
            goto LABEL_3;
          }
        }
        a2 = (char *)v12;
        int v14 = *v12;
        v12 += 9;
        if (v14 != 9) {
          goto LABEL_3;
        }
      }
    }
    if (v9 == 10)
    {
      a2 = (char *)sub_188C3D4(v6, v8, a3);
      if (!a2) {
        return a2;
      }
    }
    else
    {
LABEL_17:
      if (v9) {
        BOOL v16 = (v9 & 7) == 4;
      }
      else {
        BOOL v16 = 1;
      }
      if (v16)
      {
        if (!v8) {
          return 0;
        }
        a3[10].i32[0] = v9 - 1;
        return v8;
      }
      if (*v7) {
        unint64_t v17 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
      else {
        unint64_t v17 = (std::string *)sub_188DBD8(v7);
      }
      a2 = (char *)sub_1885AC0(v9, v17, v8, a3);
      if (!a2) {
        return a2;
      }
    }
  }
  if (v18 >= 1 && !*(void *)&a3[2]) {
    return 0;
  }
  return a2;
}

_OWORD *sub_10E8D9C(uint64_t a1, _OWORD *__dst, _DWORD *a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 8 * v6;
    do
    {
      if (*(void *)a3 <= (unint64_t)__dst) {
        long long __dst = sub_188A3FC((uint64_t)a3, (int)__dst);
      }
      uint64_t v9 = *(void *)(*(void *)(a1 + 24) + v7);
      *(unsigned char *)long long __dst = 9;
      *(void *)((char *)__dst + 1) = v9;
      long long __dst = (_OWORD *)((char *)__dst + 9);
      v7 += 8;
    }
    while (v8 != v7);
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if ((v10 & 1) == 0) {
    return __dst;
  }
  unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v12 + 31) < 0)
  {
    uint64_t v13 = *(char **)(v12 + 8);
    uint64_t v14 = *(void *)(v12 + 16);
  }
  else
  {
    uint64_t v13 = (char *)(v12 + 8);
    LODWORD(v14) = *(unsigned __int8 *)(v12 + 31);
  }
  uint64_t v15 = (int)v14;
  if (*(void *)a3 - (void)__dst < (int)v14)
  {
    return (_OWORD *)sub_188A528(a3, v13, v14, __dst);
  }
  else
  {
    memcpy(__dst, v13, (int)v14);
    return (_OWORD *)((char *)__dst + v15);
  }
}

uint64_t sub_10E8EC0(uint64_t a1)
{
  uint64_t v1 = 9 * *(unsigned int *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    unint64_t v4 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v4 + 31) < 0) {
      uint64_t v5 = *(void *)(v4 + 16) + v1;
    }
    else {
      uint64_t v5 = *(unsigned __int8 *)(v4 + 31) + v1;
    }
    *(_DWORD *)(a1 + 32) = v5;
    return v5;
  }
  else
  {
    *(_DWORD *)(a1 + 32) = v1;
    return v1;
  }
}

std::string *sub_10E8F10(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = &result->__r_.__value_.__r.__words[2];
    uint64_t v6 = SLODWORD(result->__r_.__value_.__r.__words[2]);
    sub_188CA54((unsigned int *)&result->__r_.__value_.__r.__words[2], v6 + v4);
    std::string::pointer data = v3[1].__r_.__value_.__l.__data_;
    *(_DWORD *)v5 += *(_DWORD *)(a2 + 16);
    uint64_t result = (std::string *)memcpy(&data[8 * v6], *(const void **)(a2 + 24), 8 * *(int *)(a2 + 16));
  }
  uint64_t v8 = *(void *)(a2 + 8);
  if (v8)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v8 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_10E8FB4()
{
  return 1;
}

char *sub_10E8FBC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_20B9960;
  strcpy(result, "geo3.SessionState.UpcomingPathletGeoIds");
  return result;
}

void *sub_10E9010(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }
  return a1;
}

void sub_10E90B0(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }

  operator delete();
}

uint64_t sub_10E9170(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 7) != 0)
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
  }
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_10E9198(uint64_t a1, char *a2, int32x2_t *a3)
{
  int v6 = 0;
  uint64_t v7 = (uint64_t *)(a1 + 8);
  while (1)
  {
    if ((unint64_t)a2 < *(void *)a3) {
      goto LABEL_4;
    }
    int v17 = a2 - a3[1].i32[0];
    if (a3[3].i32[1] == v17) {
      break;
    }
    a2 = sub_188BB90((uint64_t)a3, v17, a3[11].i32[1]);
    if (v18) {
      goto LABEL_41;
    }
LABEL_4:
    uint64_t v8 = a2 + 1;
    unsigned int v9 = *a2;
    if (*a2 < 0)
    {
      unsigned int v12 = v9 + (*v8 << 7);
      unsigned int v9 = v12 - 128;
      if (*v8 < 0)
      {
        uint64_t v8 = (char *)sub_188C180((uint64_t)a2, v12 - 128);
        unsigned int v9 = v15;
        unsigned int v10 = v15 >> 3;
        if (v15 >> 3 != 3) {
          goto LABEL_6;
        }
      }
      else
      {
        uint64_t v8 = a2 + 2;
        unsigned int v10 = v9 >> 3;
        if (v9 >> 3 != 3) {
          goto LABEL_6;
        }
      }
      goto LABEL_18;
    }
    unsigned int v10 = v9 >> 3;
    if (v9 >> 3 == 3)
    {
LABEL_18:
      if (v9 != 24) {
        goto LABEL_11;
      }
      v6 |= 4u;
      a2 = v8 + 1;
      int v13 = *v8;
      if (*v8 < 0)
      {
        int v14 = *a2;
        int v13 = v13 + (v14 << 7) - 128;
        if ((v14 & 0x80000000) == 0)
        {
          a2 = v8 + 2;
          goto LABEL_22;
        }
        a2 = (char *)sub_188C0D0((uint64_t)v8, v13);
        *(_DWORD *)(a1 + 40) = v16;
        if (!a2) {
          goto LABEL_33;
        }
      }
      else
      {
LABEL_22:
        *(_DWORD *)(a1 + 40) = v13;
      }
    }
    else
    {
LABEL_6:
      if (v10 == 2)
      {
        if (v9 != 17) {
          goto LABEL_11;
        }
        v6 |= 2u;
        *(void *)(a1 + 32) = *(void *)v8;
        a2 = v8 + 8;
      }
      else if (v10 == 1 && v9 == 9)
      {
        v6 |= 1u;
        *(void *)(a1 + 24) = *(void *)v8;
        a2 = v8 + 8;
      }
      else
      {
LABEL_11:
        if (!v9 || (v9 & 7) == 4)
        {
          if (v8) {
            a3[10].i32[0] = v9 - 1;
          }
          goto LABEL_36;
        }
        if (*v7)
        {
          a2 = (char *)sub_1885AC0(v9, (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8), v8, a3);
          if (!a2) {
            goto LABEL_33;
          }
        }
        else
        {
          char v19 = (std::string *)sub_188DBD8(v7);
          a2 = (char *)sub_1885AC0(v9, v19, v8, a3);
          if (!a2)
          {
LABEL_33:
            uint64_t v8 = 0;
            goto LABEL_36;
          }
        }
      }
    }
  }
  if (v17 < 1)
  {
LABEL_41:
    uint64_t v8 = a2;
    goto LABEL_36;
  }
  if (a3[2]) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = 0;
  }
LABEL_36:
  *(_DWORD *)(a1 + 16) |= v6;
  return v8;
}

_OWORD *sub_10E93BC(uint64_t a1, unint64_t __dst, _DWORD *a3)
{
  int v4 = (_OWORD *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    if (*(void *)a3 <= (unint64_t)v4) {
      int v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    *(unsigned char *)int v4 = 17;
    *(void *)((char *)v4 + 1) = v8;
    int v4 = (_OWORD *)((char *)v4 + 9);
    if ((v6 & 4) == 0) {
      goto LABEL_17;
    }
    goto LABEL_11;
  }
  if (*(void *)a3 <= __dst) {
    int v4 = sub_188A3FC((uint64_t)a3, __dst);
  }
  uint64_t v7 = *(void *)(a1 + 24);
  *(unsigned char *)int v4 = 9;
  *(void *)((char *)v4 + 1) = v7;
  int v4 = (_OWORD *)((char *)v4 + 9);
  if ((v6 & 2) != 0) {
    goto LABEL_8;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    goto LABEL_17;
  }
LABEL_11:
  if (*(void *)a3 <= (unint64_t)v4)
  {
    int v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unsigned int v9 = *(_DWORD *)(a1 + 40);
    *(unsigned char *)int v4 = 24;
    *((unsigned char *)v4 + 1) = v9;
    if (v9 <= 0x7F) {
      goto LABEL_13;
    }
  }
  else
  {
    unsigned int v9 = *(_DWORD *)(a1 + 40);
    *(unsigned char *)int v4 = 24;
    *((unsigned char *)v4 + 1) = v9;
    if (v9 <= 0x7F)
    {
LABEL_13:
      int v4 = (_OWORD *)((char *)v4 + 2);
      goto LABEL_17;
    }
  }
  *((unsigned char *)v4 + 1) = v9 | 0x80;
  unsigned int v10 = v9 >> 7;
  *((unsigned char *)v4 + 2) = v9 >> 7;
  int v4 = (_OWORD *)((char *)v4 + 3);
  if (v9 >= 0x4000)
  {
    do
    {
      *((unsigned char *)v4 - 1) |= 0x80u;
      unsigned int v11 = v10 >> 14;
      v10 >>= 7;
      *(unsigned char *)int v4 = v10;
      int v4 = (_OWORD *)((char *)v4 + 1);
    }
    while (v11);
  }
LABEL_17:
  uint64_t v12 = *(void *)(a1 + 8);
  if ((v12 & 1) == 0) {
    return v4;
  }
  unint64_t v14 = v12 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v14 + 31) < 0)
  {
    unsigned int v15 = *(char **)(v14 + 8);
    uint64_t v16 = *(void *)(v14 + 16);
  }
  else
  {
    unsigned int v15 = (char *)(v14 + 8);
    LODWORD(v16) = *(unsigned __int8 *)(v14 + 31);
  }
  uint64_t v17 = (int)v16;
  if (*(void *)a3 - (void)v4 < (int)v16)
  {
    return (_OWORD *)sub_188A528(a3, v15, v16, v4);
  }
  else
  {
    memcpy(v4, v15, (int)v16);
    return (_OWORD *)((char *)v4 + v17);
  }
}

uint64_t sub_10E9584(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 7) != 0)
  {
    uint64_t v2 = 9;
    if ((v1 & 1) == 0) {
      uint64_t v2 = 0;
    }
    if ((v1 & 2) != 0) {
      v2 += 9;
    }
    if ((v1 & 4) != 0)
    {
      v2 += ((9 * (__clz(*(_DWORD *)(a1 + 40) | 1) ^ 0x1F) + 73) >> 6) + 1;
      uint64_t v3 = *(void *)(a1 + 8);
      if ((v3 & 1) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v3 = *(void *)(a1 + 8);
      if ((v3 & 1) == 0)
      {
LABEL_8:
        *(_DWORD *)(a1 + 20) = v2;
        return v2;
      }
    }
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v3 = *(void *)(a1 + 8);
    if ((v3 & 1) == 0) {
      goto LABEL_8;
    }
  }
  unint64_t v5 = v3 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v5 + 31) < 0) {
    uint64_t v6 = *(void *)(v5 + 16) + v2;
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 31) + v2;
  }
  *(_DWORD *)(a1 + 20) = v6;
  return v6;
}

std::string *sub_10E9630(std::string *result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 16);
  if ((v2 & 7) == 0) {
    goto LABEL_7;
  }
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0) {
      goto LABEL_4;
    }
LABEL_10:
    result[1].__r_.__value_.__l.__size_ = *(void *)(a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  result[1].__r_.__value_.__r.__words[0] = *(void *)(a2 + 24);
  if ((v2 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_4:
  if ((v2 & 4) != 0) {
LABEL_5:
  }
    LODWORD(result[1].__r_.__value_.__r.__words[2]) = *(_DWORD *)(a2 + 40);
LABEL_6:
  LODWORD(result->__r_.__value_.__r.__words[2]) |= v2;
LABEL_7:
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3) {
    return sub_188B4F8((uint64_t *)&result->__r_.__value_.__l.__size_, (v3 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_10E9694()
{
  return 1;
}

double sub_10E969C@<D0>(uint64_t a1@<X8>)
{
  int v2 = (char *)operator new(0x48uLL);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_20B9270;
  strcpy(v2, "geo3.SessionState.UpcomingScenarioInstances.UpcomingScenarioInstance");
  return *(double *)"ioInstances.UpcomingScenarioInstance";
}

void *sub_10E96FC(void *a1)
{
  uint64_t v4 = a1[1];
  int v2 = a1 + 1;
  uint64_t v3 = v4;
  if ((v4 & 1) != 0 && !*(void *)(v3 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(v2);
  }
  sub_10FA55C(a1 + 3);
  *a1 = off_24E6998;
  uint64_t v5 = a1[1];
  if ((v5 & 2) != 0)
  {
    uint64_t v6 = (void *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
    if (v5)
    {
      if (*v6)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v6)
    {
      goto LABEL_5;
    }
  }
  return a1;
}

void sub_10E97A4(void *a1)
{
  sub_10E96FC(a1);

  operator delete();
}

uint64_t sub_10E97DC(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 32);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = *(void *)(result + 40) + 8;
    do
    {
      uint64_t v4 = *(void *)v3;
      if ((*(unsigned char *)(*(void *)v3 + 16) & 7) != 0)
      {
        *(void *)(v4 + 24) = 0;
        *(void *)(v4 + 32) = 0;
        *(_DWORD *)(v4 + 40) = 0;
      }
      char v5 = *(unsigned char *)(v4 + 8);
      uint64_t result = v4 + 8;
      *(_DWORD *)(result + 8) = 0;
      if (v5) {
        uint64_t result = sub_188B4AC((uint64_t *)result);
      }
      v3 += 8;
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 32) = 0;
  }
  char v7 = *(unsigned char *)(v1 + 8);
  uint64_t v6 = v1 + 8;
  *(_DWORD *)(v6 + 40) = 0;
  *(_DWORD *)(v6 + 8) = 0;
  if (v7)
  {
    return sub_188B4AC((uint64_t *)v6);
  }
  return result;
}

char *sub_10E988C(uint64_t a1, char *a2, int32x2_t *a3)
{
  int v6 = 0;
  char v7 = (uint64_t *)(a1 + 24);
  uint64_t v8 = (uint64_t *)(a1 + 8);
  while (1)
  {
    if ((unint64_t)a2 < *(void *)a3) {
      goto LABEL_5;
    }
    int v24 = a2 - a3[1].i32[0];
    if (a3[3].i32[1] == v24) {
      break;
    }
    a2 = sub_188BB90((uint64_t)a3, v24, a3[11].i32[1]);
    if (v25) {
      goto LABEL_49;
    }
LABEL_5:
    unsigned int v10 = a2 + 1;
    unsigned int v11 = *a2;
    if (*a2 < 0)
    {
      unsigned int v14 = v11 + (*v10 << 7);
      unsigned int v11 = v14 - 128;
      if ((*v10 & 0x80000000) == 0)
      {
        unsigned int v10 = a2 + 2;
        unsigned int v12 = v11 >> 3;
        if (v11 >> 3 == 2) {
          goto LABEL_18;
        }
        goto LABEL_7;
      }
      unsigned int v10 = (char *)sub_188C180((uint64_t)a2, v14 - 128);
      unsigned int v11 = v22;
      unsigned int v12 = v22 >> 3;
      if (v22 >> 3 == 2)
      {
LABEL_18:
        if (v11 != 18) {
          goto LABEL_11;
        }
        a2 = v10 - 1;
LABEL_20:
        unsigned int v15 = *(_DWORD **)(a1 + 40);
        if (v15 && (uint64_t v16 = *(int *)(a1 + 32), (int)v16 < *v15))
        {
          *(_DWORD *)(a1 + 32) = v16 + 1;
          uint64_t v17 = *(void *)&v15[2 * v16 + 2];
          int v28 = 0;
          char v18 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)a2 + 1, &v28);
          if (!v18)
          {
LABEL_23:
            a2 = 0;
            ++a3[11].i32[0];
            if (a3[10].i32[0]) {
              goto LABEL_41;
            }
            goto LABEL_27;
          }
        }
        else
        {
          uint64_t v19 = sub_10F915C(*v7);
          uint64_t v17 = sub_188CDC8((uint64_t)v7, v19);
          int v28 = 0;
          char v18 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)a2 + 1, &v28);
          if (!v18) {
            goto LABEL_23;
          }
        }
        a2 = sub_10E9198(v17, v18, a3);
        ++a3[11].i32[0];
        if (a3[10].i32[0]) {
          goto LABEL_41;
        }
LABEL_27:
        int v20 = a3[3].i32[1] + v28;
        a3[3].i32[1] = v20;
        int32x2_t v21 = (int32x2_t)(*(void *)&a3[1] + (v20 & (v20 >> 31)));
        *a3 = v21;
        if (!a2) {
          goto LABEL_41;
        }
        if (*(void *)&v21 <= (unint64_t)a2 || *a2 != 18) {
          continue;
        }
        goto LABEL_20;
      }
    }
    else
    {
      unsigned int v12 = v11 >> 3;
      if (v11 >> 3 == 2) {
        goto LABEL_18;
      }
    }
LABEL_7:
    if (v12 == 1 && v11 == 8)
    {
      a2 = v10 + 1;
      int v9 = *v10;
      if ((*v10 & 0x80000000) == 0) {
        goto LABEL_3;
      }
      int v9 = v9 + (*a2 << 7) - 128;
      if (*a2 < 0)
      {
        a2 = (char *)sub_188C0D0((uint64_t)v10, v9);
        *(_DWORD *)(a1 + 48) = v23;
        int v6 = 1;
        if (!a2) {
          goto LABEL_41;
        }
      }
      else
      {
        a2 = v10 + 2;
LABEL_3:
        *(_DWORD *)(a1 + 48) = v9;
        int v6 = 1;
      }
    }
    else
    {
LABEL_11:
      if (!v11 || (v11 & 7) == 4)
      {
        if (v10) {
          a3[10].i32[0] = v11 - 1;
        }
        goto LABEL_44;
      }
      if (*v8)
      {
        a2 = (char *)sub_1885AC0(v11, (std::string *)((*v8 & 0xFFFFFFFFFFFFFFFCLL) + 8), v10, a3);
        if (!a2) {
          goto LABEL_41;
        }
      }
      else
      {
        uint64_t v26 = (std::string *)sub_188DBD8(v8);
        a2 = (char *)sub_1885AC0(v11, v26, v10, a3);
        if (!a2)
        {
LABEL_41:
          unsigned int v10 = 0;
          goto LABEL_44;
        }
      }
    }
  }
  if (v24 < 1)
  {
LABEL_49:
    unsigned int v10 = a2;
  }
  else if (a3[2])
  {
    unsigned int v10 = a2;
  }
  else
  {
    unsigned int v10 = 0;
  }
LABEL_44:
  *(_DWORD *)(a1 + 16) |= v6;
  return v10;
}

unsigned char *sub_10E9B84(uint64_t a1, unsigned char *__dst, _DWORD *a3)
{
  uint64_t v4 = __dst;
  if (*(unsigned char *)(a1 + 16))
  {
    if (*(void *)a3 <= (unint64_t)__dst)
    {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)__dst);
      unsigned int v6 = *(_DWORD *)(a1 + 48);
      *uint64_t v4 = 8;
      v4[1] = v6;
      if (v6 <= 0x7F) {
        goto LABEL_4;
      }
    }
    else
    {
      unsigned int v6 = *(_DWORD *)(a1 + 48);
      *long long __dst = 8;
      __dst[1] = v6;
      if (v6 <= 0x7F)
      {
LABEL_4:
        v4 += 2;
        goto LABEL_8;
      }
    }
    v4[1] = v6 | 0x80;
    unsigned int v7 = v6 >> 7;
    v4[2] = v6 >> 7;
    v4 += 3;
    if (v6 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unsigned int v8 = v7 >> 14;
        v7 >>= 7;
        *v4++ = v7;
      }
      while (v8);
    }
  }
LABEL_8:
  int v9 = *(_DWORD *)(a1 + 32);
  if (v9)
  {
    for (int i = 0; i != v9; ++i)
    {
      if (*(void *)a3 <= (unint64_t)v4) {
        uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8 * i + 8);
      *uint64_t v4 = 18;
      unsigned int v13 = *(_DWORD *)(v12 + 20);
      v4[1] = v13;
      if (v13 > 0x7F) {
        unsigned int v11 = sub_188A9CC(v13, v4 + 1);
      }
      else {
        unsigned int v11 = v4 + 2;
      }
      uint64_t v4 = sub_10E93BC(v12, (unint64_t)v11, a3);
    }
  }
  uint64_t v14 = *(void *)(a1 + 8);
  if ((v14 & 1) == 0) {
    return v4;
  }
  unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v16 + 31) < 0)
  {
    uint64_t v17 = *(void **)(v16 + 8);
    uint64_t v18 = *(void *)(v16 + 16);
  }
  else
  {
    uint64_t v17 = (void *)(v16 + 8);
    LODWORD(v18) = *(unsigned __int8 *)(v16 + 31);
  }
  uint64_t v19 = (int)v18;
  if (*(void *)a3 - (void)v4 >= (int)v18)
  {
    memcpy(v4, v17, (int)v18);
    v4 += v19;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v17, v18, v4);
}

uint64_t sub_10E9D5C(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    uint64_t v3 = (uint64_t *)(v2 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  if (v1)
  {
    uint64_t v4 = 8 * v1;
    do
    {
      uint64_t v5 = *v3;
      int v6 = *(_DWORD *)(*v3 + 16);
      if ((v6 & 7) != 0)
      {
        if (v6) {
          uint64_t v7 = 9;
        }
        else {
          uint64_t v7 = 0;
        }
        if ((v6 & 2) != 0) {
          v7 += 9;
        }
        if ((v6 & 4) != 0) {
          v7 += ((9 * (__clz(*(_DWORD *)(v5 + 40) | 1) ^ 0x1F) + 73) >> 6) + 1;
        }
      }
      else
      {
        uint64_t v7 = 0;
      }
      uint64_t v8 = *(void *)(v5 + 8);
      if (v8)
      {
        unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFFCLL;
        if (*(char *)(v9 + 31) < 0) {
          uint64_t v10 = *(void *)(v9 + 16);
        }
        else {
          uint64_t v10 = *(unsigned __int8 *)(v9 + 31);
        }
        v7 += v10;
      }
      *(_DWORD *)(v5 + 20) = v7;
      v1 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  else
  {
    uint64_t v1 = 0;
  }
  if (*(unsigned char *)(a1 + 16))
  {
    v1 += ((9 * (__clz(*(_DWORD *)(a1 + 48) | 1) ^ 0x1F) + 73) >> 6) + 1;
    uint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & 1) == 0) {
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & 1) == 0)
    {
LABEL_25:
      *(_DWORD *)(a1 + 20) = v1;
      return v1;
    }
  }
  unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v13 + 31) < 0) {
    uint64_t v14 = *(void *)(v13 + 16) + v1;
  }
  else {
    uint64_t v14 = *(unsigned __int8 *)(v13 + 31) + v1;
  }
  *(_DWORD *)(a1 + 20) = v14;
  return v14;
}

std::string *sub_10E9EAC(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (std::string **)(*(void *)(a2 + 40) + 8);
    int v6 = (uint64_t *)sub_188CCE4((uint64_t)&result[1], *(_DWORD *)(a2 + 32));
    uint64_t result = (std::string *)sub_10FA9EC((uint64_t *)&v3[1], v6, v5, v4, *(_DWORD *)v3[1].__r_.__value_.__r.__words[2]- LODWORD(v3[1].__r_.__value_.__r.__words[1]));
    int v7 = LODWORD(v3[1].__r_.__value_.__r.__words[1]) + v4;
    LODWORD(v3[1].__r_.__value_.__r.__words[1]) = v7;
    uint64_t v8 = (int *)v3[1].__r_.__value_.__r.__words[2];
    if (*v8 < v7) {
      *uint64_t v8 = v7;
    }
  }
  if (*(unsigned char *)(a2 + 16))
  {
    int v9 = *(_DWORD *)(a2 + 48);
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 1u;
    LODWORD(v3[2].__r_.__value_.__l.__data_) = v9;
  }
  uint64_t v10 = *(void *)(a2 + 8);
  if (v10)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v10 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_10E9F98()
{
  return 1;
}

double sub_10E9FA0@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_20B93E0;
  strcpy(v2, "geo3.SessionState.UpcomingScenarioInstances");
  return *(double *)"cenarioInstances";
}

void *sub_10E9FF4(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_5;
    }
  }
  else if (v4)
  {
    goto LABEL_5;
  }
  sub_10EA1D8((uint64_t)a1);
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_5:
  uint64_t v5 = (unsigned int *)a1[13];
  if (v5 && !a1[11])
  {
    int v6 = (void **)(v5 + 2);
    uint64_t v7 = *v5;
    if ((int)v7 >= 1)
    {
      do
      {
        if (*v6)
        {
          sub_10E96FC(*v6);
          operator delete();
        }
        ++v6;
        --v7;
      }
      while (v7);
      uint64_t v5 = (unsigned int *)a1[13];
    }
    operator delete(v5);
  }
  a1[13] = 0;
  uint64_t v8 = (unsigned int *)a1[10];
  if (v8 && !a1[8])
  {
    int v9 = (void **)(v8 + 2);
    uint64_t v10 = *v8;
    if ((int)v10 >= 1)
    {
      do
      {
        if (*v9)
        {
          sub_10E8AAC(*v9);
          operator delete();
        }
        ++v9;
        --v10;
      }
      while (v10);
      uint64_t v8 = (unsigned int *)a1[10];
    }
    operator delete(v8);
  }
  a1[10] = 0;
  uint64_t v11 = (unsigned int *)a1[7];
  if (v11 && !a1[5])
  {
    uint64_t v12 = (void **)(v11 + 2);
    uint64_t v13 = *v11;
    if ((int)v13 >= 1)
    {
      do
      {
        if (*v12)
        {
          sub_10E7DEC(*v12);
          operator delete();
        }
        ++v12;
        --v13;
      }
      while (v13);
      uint64_t v11 = (unsigned int *)a1[7];
    }
    operator delete(v11);
  }
  a1[7] = 0;
  sub_1889DA8((uint64_t)(a1 + 3));
  *a1 = off_24E6998;
  uint64_t v14 = a1[1];
  if ((v14 & 2) != 0)
  {
    unsigned int v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
    if (v14)
    {
      if (*v15)
      {
LABEL_35:
        sub_1881618();
        operator delete();
      }
    }
    else if (v15)
    {
      goto LABEL_35;
    }
  }
  return a1;
}

void ***sub_10EA1D8(uint64_t a1)
{
  uint64_t v3 = *(uint64_t **)(a1 + 112);
  uint64_t result = (void ***)(a1 + 112);
  if (v3 != &qword_2550250) {
    sub_1881C6C(result);
  }
  if ((uint64_t (***)())a1 != &off_24F7888)
  {
    int v4 = *(void **)(a1 + 120);
    if (v4)
    {
      sub_10E5E94(v4);
      operator delete();
    }
    uint64_t v5 = *(void **)(a1 + 128);
    if (v5)
    {
      uint64_t v6 = v5[1];
      if ((v6 & 1) != 0 && !*(void *)(v6 & 0xFFFFFFFFFFFFFFFCLL))
      {
        sub_10E4F74(v5 + 1);
        uint64_t v6 = v5[1];
      }
      *uint64_t v5 = off_24E6998;
      if ((v6 & 2) != 0)
      {
        uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
        if (v6)
        {
          if (*v7)
          {
LABEL_11:
            sub_1881618();
            operator delete();
          }
        }
        else if (v7)
        {
          goto LABEL_11;
        }
      }
      operator delete();
    }
    uint64_t result = *(void ****)(a1 + 136);
    if (result)
    {
      sub_10E8AAC(result);
      operator delete();
    }
  }
  return result;
}

void sub_10EA32C(void *a1)
{
  sub_10E9FF4(a1);

  operator delete();
}

uint64_t sub_10EA364(uint64_t result)
{
  uint64_t v1 = result;
  *(_DWORD *)(result + 24) = 0;
  uint64_t v2 = *(unsigned int *)(result + 48);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(result + 56) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_10E7FF8(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 48) = 0;
  }
  uint64_t v5 = *(unsigned int *)(v1 + 72);
  if ((int)v5 >= 1)
  {
    uint64_t v6 = *(void *)(v1 + 80) + 8;
    do
    {
      uint64_t result = *(void *)v6 + 8;
      char v7 = *(unsigned char *)result;
      *(_DWORD *)(*(void *)v6 + 16) = 0;
      if (v7) {
        uint64_t result = sub_188B4AC((uint64_t *)result);
      }
      v6 += 8;
      --v5;
    }
    while (v5);
    *(_DWORD *)(v1 + 72) = 0;
  }
  uint64_t v8 = *(unsigned int *)(v1 + 96);
  if ((int)v8 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(v1 + 104) + 8;
    do
    {
      uint64_t v11 = *(void *)(v10 + 8 * v9);
      uint64_t v12 = *(unsigned int *)(v11 + 32);
      if ((int)v12 >= 1)
      {
        uint64_t v13 = *(void *)(v11 + 40) + 8;
        do
        {
          uint64_t v14 = *(void *)v13;
          if ((*(unsigned char *)(*(void *)v13 + 16) & 7) != 0)
          {
            *(void *)(v14 + 24) = 0;
            *(void *)(v14 + 32) = 0;
            *(_DWORD *)(v14 + 40) = 0;
          }
          char v15 = *(unsigned char *)(v14 + 8);
          uint64_t result = v14 + 8;
          *(_DWORD *)(result + 8) = 0;
          if (v15) {
            uint64_t result = sub_188B4AC((uint64_t *)result);
          }
          v13 += 8;
          --v12;
        }
        while (v12);
        *(_DWORD *)(v11 + 32) = 0;
      }
      char v17 = *(unsigned char *)(v11 + 8);
      uint64_t v16 = v11 + 8;
      *(_DWORD *)(v16 + 40) = 0;
      *(_DWORD *)(v16 + 8) = 0;
      if (v17) {
        uint64_t result = sub_188B4AC((uint64_t *)v16);
      }
      ++v9;
    }
    while (v9 != v8);
    *(_DWORD *)(v1 + 96) = 0;
  }
  int v18 = *(_DWORD *)(v1 + 16);
  if ((v18 & 0xF) != 0)
  {
    if (v18)
    {
      unint64_t v19 = *(void *)(v1 + 112) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v19 + 23) < 0)
      {
        **(unsigned char **)unint64_t v19 = 0;
        *(void *)(v19 + 8) = 0;
        if ((v18 & 2) != 0) {
          goto LABEL_30;
        }
        goto LABEL_43;
      }
      *(unsigned char *)unint64_t v19 = 0;
      *(unsigned char *)(v19 + 23) = 0;
    }
    if ((v18 & 2) != 0)
    {
LABEL_30:
      uint64_t v20 = *(void *)(v1 + 120);
      uint64_t v21 = *(unsigned int *)(v20 + 24);
      if ((int)v21 >= 1)
      {
        uint64_t v22 = *(void *)(v20 + 32) + 8;
        do
        {
          uint64_t v23 = *(void *)v22;
          int v24 = *(_DWORD *)(*(void *)v22 + 16);
          if (v24) {
            uint64_t result = sub_15B043C(*(void *)(v23 + 24));
          }
          if ((v24 & 0x1E) != 0)
          {
            *(void *)(v23 + 32) = 0;
            *(void *)(v23 + 40) = 0;
            *(_DWORD *)(v23 + 48) = 1;
          }
          char v26 = *(unsigned char *)(v23 + 8);
          uint64_t v25 = v23 + 8;
          *(_DWORD *)(v25 + 8) = 0;
          if (v26) {
            uint64_t result = sub_188B4AC((uint64_t *)v25);
          }
          v22 += 8;
          --v21;
        }
        while (v21);
        *(_DWORD *)(v20 + 24) = 0;
      }
      char v28 = *(unsigned char *)(v20 + 8);
      uint64_t v27 = (uint64_t *)(v20 + 8);
      if (v28) {
        uint64_t result = sub_188B4AC(v27);
      }
    }
LABEL_43:
    if ((v18 & 4) != 0)
    {
      uint64_t v29 = *(void *)(v1 + 128);
      if ((*(unsigned char *)(v29 + 16) & 3) != 0) {
        *(void *)(v29 + 24) = 0;
      }
      char v30 = *(unsigned char *)(v29 + 8);
      uint64_t result = v29 + 8;
      *(_DWORD *)(result + 8) = 0;
      if (v30) {
        uint64_t result = sub_188B4AC((uint64_t *)result);
      }
    }
    if ((v18 & 8) != 0)
    {
      uint64_t v31 = *(void *)(v1 + 136);
      char v32 = *(unsigned char *)(v31 + 8);
      uint64_t result = v31 + 8;
      *(_DWORD *)(result + 8) = 0;
      if (v32) {
        uint64_t result = sub_188B4AC((uint64_t *)result);
      }
    }
  }
  char v34 = *(unsigned char *)(v1 + 8);
  uint64_t v33 = v1 + 8;
  *(_DWORD *)(v33 + 136) = 0;
  *(_DWORD *)(v33 + 8) = 0;
  if (v34)
  {
    return sub_188B4AC((uint64_t *)v33);
  }
  return result;
}

uint64_t sub_10EA5E0(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 3) != 0) {
    *(void *)(a1 + 24) = 0;
  }
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

unsigned __int8 *sub_10EA604(uint64_t a1, unsigned __int8 *a2, int32x2_t *a3)
{
  int v65 = 0;
  uint64_t v66 = (uint64_t *)(a1 + 8);
  uint64_t v64 = (void *)(a1 + 112);
  uint64_t v6 = (uint64_t *)(a1 + 88);
  char v7 = (uint64_t *)(a1 + 64);
  uint64_t v8 = (uint64_t *)(a1 + 40);
  uint64_t v9 = (unsigned int *)(a1 + 24);
  while (1)
  {
LABEL_4:
    if ((unint64_t)a2 >= *(void *)a3)
    {
      int v59 = a2 - a3[1].i32[0];
      if (a3[3].i32[1] == v59)
      {
        int v62 = v65;
        if (v59 < 1)
        {
          uint64_t v12 = a2;
        }
        else if (a3[2])
        {
          uint64_t v12 = a2;
        }
        else
        {
          uint64_t v12 = 0;
        }
        goto LABEL_121;
      }
      std::string v60 = sub_188BB90((uint64_t)a3, v59, a3[11].i32[1]);
      a2 = (unsigned __int8 *)v60;
      if (v61)
      {
        uint64_t v12 = (unsigned __int8 *)v60;
        goto LABEL_120;
      }
    }
    uint64_t v12 = a2 + 1;
    unsigned int v13 = *a2;
    if (((char)*a2 & 0x80000000) == 0)
    {
      unsigned int v14 = (v13 >> 3) - 1;
LABEL_7:
      switch(v14)
      {
        case 0u:
          if (v13 != 8) {
            goto LABEL_17;
          }
          v65 |= 0x10u;
          a2 = v12 + 1;
          int v15 = *v12;
          if (((char)*v12 & 0x80000000) == 0) {
            goto LABEL_12;
          }
          int v15 = v15 + (*a2 << 7) - 128;
          if ((char)*a2 < 0)
          {
            a2 = (unsigned __int8 *)sub_188C0D0((uint64_t)v12, v15);
            *(_DWORD *)(a1 + 144) = v58;
            if (!a2) {
              goto LABEL_117;
            }
          }
          else
          {
            a2 = v12 + 2;
LABEL_12:
            *(_DWORD *)(a1 + 144) = v15;
          }
          continue;
        case 1u:
          if (v13 == 16)
          {
            a2 = v12 - 1;
            while (1)
            {
              int v20 = a2[1];
              if ((char)a2[1] < 0)
              {
                int v22 = v20 + (a2[2] << 7);
                int v20 = v22 - 128;
                if ((char)a2[2] < 0)
                {
                  a2 = (unsigned __int8 *)sub_188C0D0((uint64_t)(a2 + 1), v22 - 128);
                  int v20 = v23;
                  uint64_t v21 = *(unsigned int *)(a1 + 24);
                  if (v21 != *(_DWORD *)(a1 + 28))
                  {
LABEL_32:
                    *(_DWORD *)(*(void *)(a1 + 32) + 4 * v21) = v20;
                    *uint64_t v9 = v21 + 1;
                    if (!a2) {
                      goto LABEL_117;
                    }
                    goto LABEL_33;
                  }
                }
                else
                {
                  a2 += 3;
                  uint64_t v21 = *(unsigned int *)(a1 + 24);
                  if (v21 != *(_DWORD *)(a1 + 28)) {
                    goto LABEL_32;
                  }
                }
              }
              else
              {
                a2 += 2;
                uint64_t v21 = *(unsigned int *)(a1 + 24);
                if (v21 != *(_DWORD *)(a1 + 28)) {
                  goto LABEL_32;
                }
              }
              sub_188C80C(v9, v21 + 1);
              *(_DWORD *)(*(void *)(a1 + 32) + 4 * v21) = v20;
              *uint64_t v9 = v21 + 1;
              if (!a2) {
                goto LABEL_117;
              }
LABEL_33:
              if (*(void *)a3 <= (unint64_t)a2 || *a2 != 16) {
                goto LABEL_4;
              }
            }
          }
          if (v13 != 18) {
            goto LABEL_17;
          }
          uint64_t v11 = sub_188C2CC(v9, v12, (uint64_t)a3);
          goto LABEL_3;
        case 2u:
          if (v13 != 26) {
            goto LABEL_17;
          }
          *(_DWORD *)(a1 + 16) |= 2u;
          uint64_t v24 = *(void *)(a1 + 120);
          if (v24)
          {
            int v67 = 0;
            uint64_t v25 = (char *)sub_188BEE0((uint64_t)a3, v12, &v67);
            if (!v25) {
              goto LABEL_106;
            }
LABEL_95:
            char v54 = sub_10E60D4(v24, v25, a3);
            goto LABEL_104;
          }
          int v53 = (void *)(*v66 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v66) {
            int v53 = (void *)*v53;
          }
          uint64_t v24 = sub_10F8DE8((uint64_t)v53);
          *(void *)(a1 + 120) = v24;
          int v67 = 0;
          uint64_t v25 = (char *)sub_188BEE0((uint64_t)a3, v12, &v67);
          if (v25) {
            goto LABEL_95;
          }
          goto LABEL_106;
        case 3u:
          if (v13 != 34) {
            goto LABEL_17;
          }
          *(_DWORD *)(a1 + 16) |= 4u;
          char v26 = *(void **)(a1 + 128);
          if (v26)
          {
            int v67 = 0;
            uint64_t v27 = (char *)sub_188BEE0((uint64_t)a3, v12, &v67);
            if (!v27) {
              goto LABEL_106;
            }
LABEL_99:
            char v54 = sub_10EC688(v26, v27, a3);
            goto LABEL_104;
          }
          unsigned int v55 = (void *)(*v66 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v66) {
            unsigned int v55 = (void *)*v55;
          }
          char v26 = sub_10F93C4((uint64_t)v55);
          *(void *)(a1 + 128) = v26;
          int v67 = 0;
          uint64_t v27 = (char *)sub_188BEE0((uint64_t)a3, v12, &v67);
          if (v27) {
            goto LABEL_99;
          }
LABEL_106:
          a2 = 0;
          ++a3[11].i32[0];
          if (a3[10].i32[0]) {
            goto LABEL_117;
          }
LABEL_107:
          int v57 = a3[3].i32[1] + v67;
          a3[3].i32[1] = v57;
          *a3 = (int32x2_t)(*(void *)&a3[1] + (v57 & (v57 >> 31)));
          if (a2) {
            continue;
          }
LABEL_117:
          uint64_t v12 = 0;
          goto LABEL_120;
        case 0x12u:
          if (v13 != 154) {
            goto LABEL_17;
          }
          a2 = v12 - 2;
          while (1)
          {
            char v28 = *(_DWORD **)(a1 + 56);
            if (v28 && (uint64_t v29 = *(int *)(a1 + 48), (int)v29 < *v28))
            {
              *(_DWORD *)(a1 + 48) = v29 + 1;
              uint64_t v30 = *(void *)&v28[2 * v29 + 2];
              int v67 = 0;
              uint64_t v31 = (unsigned __int8 *)sub_188BEE0((uint64_t)a3, a2 + 2, &v67);
              if (v31) {
                goto LABEL_54;
              }
            }
            else
            {
              char v32 = sub_10F9004(*v8);
              uint64_t v30 = sub_188CDC8((uint64_t)v8, (uint64_t)v32);
              int v67 = 0;
              uint64_t v31 = (unsigned __int8 *)sub_188BEE0((uint64_t)a3, a2 + 2, &v67);
              if (v31)
              {
LABEL_54:
                a2 = sub_10E80E4(v30, v31, a3);
                ++a3[11].i32[0];
                if (a3[10].i32[0]) {
                  goto LABEL_117;
                }
                goto LABEL_55;
              }
            }
            a2 = 0;
            ++a3[11].i32[0];
            if (a3[10].i32[0]) {
              goto LABEL_117;
            }
LABEL_55:
            int v33 = a3[3].i32[1] + v67;
            a3[3].i32[1] = v33;
            int32x2_t v34 = (int32x2_t)(*(void *)&a3[1] + (v33 & (v33 >> 31)));
            *a3 = v34;
            if (!a2) {
              goto LABEL_117;
            }
            if (*(void *)&v34 <= (unint64_t)a2 || *(_WORD *)a2 != 410) {
              goto LABEL_4;
            }
          }
        case 0x13u:
          if (v13 != 162) {
            goto LABEL_17;
          }
          *(_DWORD *)(a1 + 16) |= 8u;
          uint64_t v35 = *(void *)(a1 + 136);
          if (v35)
          {
            int v67 = 0;
            int v36 = (char *)sub_188BEE0((uint64_t)a3, v12, &v67);
            if (!v36) {
              goto LABEL_106;
            }
          }
          else
          {
            int v56 = (void *)(*v66 & 0xFFFFFFFFFFFFFFFCLL);
            if (*v66) {
              int v56 = (void *)*v56;
            }
            uint64_t v35 = sub_10F90BC((uint64_t)v56);
            *(void *)(a1 + 136) = v35;
            int v67 = 0;
            int v36 = (char *)sub_188BEE0((uint64_t)a3, v12, &v67);
            if (!v36) {
              goto LABEL_106;
            }
          }
          char v54 = sub_10E8B9C(v35, v36, a3);
LABEL_104:
          a2 = (unsigned __int8 *)v54;
          ++a3[11].i32[0];
          if (a3[10].i32[0]) {
            goto LABEL_117;
          }
          goto LABEL_107;
        case 0x14u:
          if (v13 != 170) {
            goto LABEL_17;
          }
          a2 = v12 - 2;
          while (1)
          {
            int v37 = *(_DWORD **)(a1 + 80);
            if (v37 && (uint64_t v38 = *(int *)(a1 + 72), (int)v38 < *v37))
            {
              *(_DWORD *)(a1 + 72) = v38 + 1;
              uint64_t v39 = *(void *)&v37[2 * v38 + 2];
              int v67 = 0;
              uint64_t v40 = (char *)sub_188BEE0((uint64_t)a3, a2 + 2, &v67);
              if (v40) {
                goto LABEL_71;
              }
            }
            else
            {
              uint64_t v41 = sub_10F90BC(*v7);
              uint64_t v39 = sub_188CDC8((uint64_t)v7, v41);
              int v67 = 0;
              uint64_t v40 = (char *)sub_188BEE0((uint64_t)a3, a2 + 2, &v67);
              if (v40)
              {
LABEL_71:
                a2 = (unsigned __int8 *)sub_10E8B9C(v39, v40, a3);
                ++a3[11].i32[0];
                if (a3[10].i32[0]) {
                  goto LABEL_117;
                }
                goto LABEL_72;
              }
            }
            a2 = 0;
            ++a3[11].i32[0];
            if (a3[10].i32[0]) {
              goto LABEL_117;
            }
LABEL_72:
            int v42 = a3[3].i32[1] + v67;
            a3[3].i32[1] = v42;
            int32x2_t v43 = (int32x2_t)(*(void *)&a3[1] + (v42 & (v42 >> 31)));
            *a3 = v43;
            if (!a2) {
              goto LABEL_117;
            }
            if (*(void *)&v43 <= (unint64_t)a2 || *(_WORD *)a2 != 426) {
              goto LABEL_4;
            }
          }
        case 0x15u:
          if (v13 != 178) {
            goto LABEL_17;
          }
          a2 = v12 - 2;
          break;
        case 0x16u:
          if (v13 != 186) {
            goto LABEL_17;
          }
          *(_DWORD *)(a1 + 16) |= 1u;
          uint64_t v51 = *(void *)(a1 + 8);
          int v52 = (uint64_t *)(v51 & 0xFFFFFFFFFFFFFFFCLL);
          if (v51) {
            int v52 = (uint64_t *)*v52;
          }
          uint64_t v10 = (std::string *)sub_1880F84(v64, v52);
          uint64_t v11 = (unsigned __int8 *)sub_188C244(v10, (char *)v12, (uint64_t)a3);
          goto LABEL_3;
        default:
          goto LABEL_17;
      }
      while (1)
      {
        uint64_t v44 = *(_DWORD **)(a1 + 104);
        if (v44 && (uint64_t v45 = *(int *)(a1 + 96), (int)v45 < *v44))
        {
          *(_DWORD *)(a1 + 96) = v45 + 1;
          uint64_t v46 = *(void *)&v44[2 * v45 + 2];
          int v67 = 0;
          uint64_t v47 = (char *)sub_188BEE0((uint64_t)a3, a2 + 2, &v67);
          if (v47) {
            goto LABEL_84;
          }
        }
        else
        {
          uint64_t v48 = sub_10F91DC(*v6);
          uint64_t v46 = sub_188CDC8((uint64_t)v6, v48);
          int v67 = 0;
          uint64_t v47 = (char *)sub_188BEE0((uint64_t)a3, a2 + 2, &v67);
          if (v47)
          {
LABEL_84:
            a2 = (unsigned __int8 *)sub_10E988C(v46, v47, a3);
            ++a3[11].i32[0];
            if (a3[10].i32[0]) {
              goto LABEL_117;
            }
            goto LABEL_85;
          }
        }
        a2 = 0;
        ++a3[11].i32[0];
        if (a3[10].i32[0]) {
          goto LABEL_117;
        }
LABEL_85:
        int v49 = a3[3].i32[1] + v67;
        a3[3].i32[1] = v49;
        int32x2_t v50 = (int32x2_t)(*(void *)&a3[1] + (v49 & (v49 >> 31)));
        *a3 = v50;
        if (!a2) {
          goto LABEL_117;
        }
        if (*(void *)&v50 <= (unint64_t)a2 || *(_WORD *)a2 != 434) {
          goto LABEL_4;
        }
      }
    }
    unsigned int v16 = v13 + (*v12 << 7);
    unsigned int v13 = v16 - 128;
    if ((char)*v12 < 0)
    {
      uint64_t v12 = (unsigned __int8 *)sub_188C180((uint64_t)a2, v16 - 128);
      unsigned int v13 = v17;
      unsigned int v14 = (v17 >> 3) - 1;
      if (v14 <= 0x16) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v12 = a2 + 2;
      unsigned int v14 = (v13 >> 3) - 1;
      if (v14 <= 0x16) {
        goto LABEL_7;
      }
    }
LABEL_17:
    if (!v13 || (v13 & 7) == 4) {
      break;
    }
    if (*v66) {
      unint64_t v19 = (std::string *)((*v66 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else {
      unint64_t v19 = (std::string *)sub_188DBD8(v66);
    }
    uint64_t v11 = sub_1885AC0(v13, v19, (char *)v12, a3);
LABEL_3:
    a2 = v11;
    if (!v11) {
      goto LABEL_117;
    }
  }
  if (v12) {
    a3[10].i32[0] = v13 - 1;
  }
LABEL_120:
  int v62 = v65;
LABEL_121:
  *(_DWORD *)(a1 + 16) |= v62;
  return v12;
}

unsigned char *sub_10EAEC8(uint64_t a1, unsigned char *a2, _DWORD *a3)
{
  uint64_t v4 = a2;
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 0x10) != 0)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)a2);
      unsigned int v7 = *(_DWORD *)(a1 + 144);
      *uint64_t v4 = 8;
      v4[1] = v7;
      if (v7 <= 0x7F) {
        goto LABEL_4;
      }
    }
    else
    {
      unsigned int v7 = *(_DWORD *)(a1 + 144);
      *a2 = 8;
      a2[1] = v7;
      if (v7 <= 0x7F)
      {
LABEL_4:
        v4 += 2;
        goto LABEL_8;
      }
    }
    v4[1] = v7 | 0x80;
    unsigned int v8 = v7 >> 7;
    v4[2] = v7 >> 7;
    v4 += 3;
    if (v7 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unsigned int v9 = v8 >> 14;
        v8 >>= 7;
        *v4++ = v8;
      }
      while (v9);
    }
  }
LABEL_8:
  uint64_t v10 = *(unsigned int *)(a1 + 24);
  if ((int)v10 >= 1)
  {
    for (uint64_t i = 0; i != v10; ++i)
    {
      if (*(void *)a3 <= (unint64_t)v4)
      {
        uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
        unsigned int v12 = *(_DWORD *)(*(void *)(a1 + 32) + 4 * i);
        *uint64_t v4 = 16;
        v4[1] = v12;
        if (v12 > 0x7F)
        {
LABEL_14:
          v4[1] = v12 | 0x80;
          unsigned int v13 = v12 >> 7;
          v4[2] = v12 >> 7;
          v4 += 3;
          if (v12 >= 0x4000)
          {
            do
            {
              *(v4 - 1) |= 0x80u;
              unsigned int v14 = v13 >> 14;
              v13 >>= 7;
              *v4++ = v13;
            }
            while (v14);
          }
          continue;
        }
      }
      else
      {
        unsigned int v12 = *(_DWORD *)(*(void *)(a1 + 32) + 4 * i);
        *uint64_t v4 = 16;
        v4[1] = v12;
        if (v12 > 0x7F) {
          goto LABEL_14;
        }
      }
      v4 += 2;
    }
  }
  if ((v6 & 2) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v16 = *(void *)(a1 + 120);
    *uint64_t v4 = 26;
    unsigned int v17 = *(_DWORD *)(v16 + 40);
    v4[1] = v17;
    if (v17 > 0x7F)
    {
      int v18 = sub_188A9CC(v17, v4 + 1);
      uint64_t v4 = sub_10E6340(v16, v18, a3);
      if ((v6 & 4) != 0) {
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v4 = sub_10E6340(v16, v4 + 2, a3);
      if ((v6 & 4) != 0) {
        goto LABEL_29;
      }
    }
LABEL_21:
    int v15 = *(_DWORD *)(a1 + 48);
    if (!v15) {
      goto LABEL_42;
    }
    goto LABEL_35;
  }
  if ((v6 & 4) == 0) {
    goto LABEL_21;
  }
LABEL_29:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v19 = *(void *)(a1 + 128);
  *uint64_t v4 = 34;
  unsigned int v20 = *(_DWORD *)(v19 + 20);
  v4[1] = v20;
  if (v20 > 0x7F) {
    uint64_t v21 = sub_188A9CC(v20, v4 + 1);
  }
  else {
    uint64_t v21 = v4 + 2;
  }
  uint64_t v4 = sub_10EC8C0(v19, v21, a3);
  int v15 = *(_DWORD *)(a1 + 48);
  if (v15)
  {
LABEL_35:
    for (int j = 0; j != v15; ++j)
    {
      if (*(void *)a3 <= (unint64_t)v4) {
        uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v24 = *(void *)(*(void *)(a1 + 56) + 8 * j + 8);
      *(_WORD *)uint64_t v4 = 410;
      unsigned int v25 = *(_DWORD *)(v24 + 20);
      v4[2] = v25;
      if (v25 > 0x7F) {
        int v23 = sub_188A9CC(v25, v4 + 2);
      }
      else {
        int v23 = v4 + 3;
      }
      uint64_t v4 = sub_10E848C(v24, v23, a3);
    }
  }
LABEL_42:
  if ((v6 & 8) == 0) {
    goto LABEL_54;
  }
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v26 = *(void *)(a1 + 136);
  *(_WORD *)uint64_t v4 = 418;
  unsigned int v27 = *(_DWORD *)(v26 + 32);
  v4[2] = v27;
  if (v27 > 0x7F)
  {
    uint64_t v4 = sub_188A9CC(v27, v4 + 2);
    uint64_t v28 = *(unsigned int *)(v26 + 16);
    if ((int)v28 < 1) {
      goto LABEL_53;
    }
LABEL_49:
    uint64_t v29 = 0;
    uint64_t v30 = 8 * v28;
    do
    {
      if (*(void *)a3 <= (unint64_t)v4) {
        uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v31 = *(void *)(*(void *)(v26 + 24) + v29);
      *uint64_t v4 = 9;
      *(void *)(v4 + 1) = v31;
      v4 += 9;
      v29 += 8;
    }
    while (v30 != v29);
    goto LABEL_53;
  }
  v4 += 3;
  uint64_t v28 = *(unsigned int *)(v26 + 16);
  if ((int)v28 >= 1) {
    goto LABEL_49;
  }
LABEL_53:
  uint64_t v32 = *(void *)(v26 + 8);
  if (v32)
  {
    unint64_t v60 = v32 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v60 + 31) < 0)
    {
      char v61 = *(char **)(v60 + 8);
      uint64_t v62 = *(void *)(v60 + 16);
    }
    else
    {
      char v61 = (char *)(v60 + 8);
      LODWORD(v62) = *(unsigned __int8 *)(v60 + 31);
    }
    uint64_t v64 = (int)v62;
    if (*(void *)a3 - (void)v4 < (int)v62)
    {
      uint64_t v4 = (unsigned char *)sub_188A528(a3, v61, v62, v4);
    }
    else
    {
      memcpy(v4, v61, (int)v62);
      v4 += v64;
    }
  }
LABEL_54:
  int v33 = *(_DWORD *)(a1 + 72);
  if (v33)
  {
    for (int k = 0; k != v33; ++k)
    {
      if (*(void *)a3 <= (unint64_t)v4) {
        uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v35 = *(void *)(*(void *)(a1 + 80) + 8 * k + 8);
      *(_WORD *)uint64_t v4 = 426;
      unsigned int v36 = *(_DWORD *)(v35 + 32);
      v4[2] = v36;
      if (v36 > 0x7F)
      {
        uint64_t v4 = sub_188A9CC(v36, v4 + 2);
        uint64_t v37 = *(unsigned int *)(v35 + 16);
        if ((int)v37 >= 1)
        {
LABEL_62:
          uint64_t v38 = 0;
          uint64_t v39 = 8 * v37;
          do
          {
            if (*(void *)a3 <= (unint64_t)v4) {
              uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
            }
            uint64_t v40 = *(void *)(*(void *)(v35 + 24) + v38);
            *uint64_t v4 = 9;
            *(void *)(v4 + 1) = v40;
            v4 += 9;
            v38 += 8;
          }
          while (v39 != v38);
        }
      }
      else
      {
        v4 += 3;
        uint64_t v37 = *(unsigned int *)(v35 + 16);
        if ((int)v37 >= 1) {
          goto LABEL_62;
        }
      }
      uint64_t v41 = *(void *)(v35 + 8);
      if (v41)
      {
        unint64_t v42 = v41 & 0xFFFFFFFFFFFFFFFCLL;
        if (*(char *)(v42 + 31) < 0)
        {
          int32x2_t v43 = *(char **)(v42 + 8);
          uint64_t v44 = *(void *)(v42 + 16);
        }
        else
        {
          int32x2_t v43 = (char *)(v42 + 8);
          LODWORD(v44) = *(unsigned __int8 *)(v42 + 31);
        }
        uint64_t v45 = (int)v44;
        if (*(void *)a3 - (void)v4 < (int)v44)
        {
          uint64_t v4 = (unsigned char *)sub_188A528(a3, v43, v44, v4);
        }
        else
        {
          memcpy(v4, v43, (int)v44);
          v4 += v45;
        }
      }
    }
  }
  int v46 = *(_DWORD *)(a1 + 96);
  if (v46)
  {
    int v47 = 0;
    char v48 = v6;
    do
    {
      if (*(void *)a3 <= (unint64_t)v4) {
        uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v50 = *(void *)(*(void *)(a1 + 104) + 8 * v47 + 8);
      *(_WORD *)uint64_t v4 = 434;
      unsigned int v51 = *(_DWORD *)(v50 + 20);
      v4[2] = v51;
      if (v51 > 0x7F) {
        int v49 = sub_188A9CC(v51, v4 + 2);
      }
      else {
        int v49 = v4 + 3;
      }
      uint64_t v4 = sub_10E9B84(v50, v49, a3);
      ++v47;
    }
    while (v46 != v47);
  }
  else
  {
    char v48 = v6;
  }
  if (v48)
  {
    unint64_t v52 = *(void *)(a1 + 112) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v52 + 23) < 0)
    {
      int64_t v53 = *(void *)(v52 + 8);
      if (v53 > 127) {
        goto LABEL_95;
      }
    }
    else
    {
      int64_t v53 = *(unsigned __int8 *)(v52 + 23);
    }
    if (*(void *)a3 - (void)v4 + 13 >= v53)
    {
      *(_WORD *)uint64_t v4 = 442;
      v4[2] = v53;
      if (*(char *)(v52 + 23) >= 0) {
        char v54 = (const void *)v52;
      }
      else {
        char v54 = *(const void **)v52;
      }
      memcpy(v4 + 3, v54, v53);
      v4 += v53 + 3;
      goto LABEL_93;
    }
LABEL_95:
    uint64_t v4 = sub_188A6CC(a3, 23, (void **)v52, v4);
    uint64_t v55 = *(void *)(a1 + 8);
    if ((v55 & 1) == 0) {
      return v4;
    }
    goto LABEL_96;
  }
LABEL_93:
  uint64_t v55 = *(void *)(a1 + 8);
  if ((v55 & 1) == 0) {
    return v4;
  }
LABEL_96:
  unint64_t v57 = v55 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v57 + 31) < 0)
  {
    int v58 = *(void **)(v57 + 8);
    uint64_t v59 = *(void *)(v57 + 16);
  }
  else
  {
    int v58 = (void *)(v57 + 8);
    LODWORD(v59) = *(unsigned __int8 *)(v57 + 31);
  }
  uint64_t v63 = (int)v59;
  if (*(void *)a3 - (void)v4 >= (int)v59)
  {
    memcpy(v4, v58, (int)v59);
    v4 += v63;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v58, v59, v4);
}

uint64_t sub_10EB5C8(uint64_t a1)
{
  uint64_t v2 = sub_188D4F0((unsigned int *)(a1 + 24));
  uint64_t v3 = *(int *)(a1 + 48);
  uint64_t v4 = v2 + *(unsigned int *)(a1 + 24) + 2 * v3;
  uint64_t v5 = *(void *)(a1 + 56);
  if (v5) {
    int v6 = (uint64_t *)(v5 + 8);
  }
  else {
    int v6 = 0;
  }
  if (v3)
  {
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t v8 = *v6++;
      uint64_t v9 = sub_10E8720(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  uint64_t v10 = *(int *)(a1 + 72);
  uint64_t v11 = v4 + 2 * v10;
  uint64_t v12 = *(void *)(a1 + 80);
  if (v12) {
    uint64_t v13 = v12 + 8;
  }
  else {
    uint64_t v13 = 0;
  }
  if (v10)
  {
    uint64_t v14 = 8 * v10;
    do
    {
      uint64_t v15 = 9 * *(unsigned int *)(*(void *)v13 + 16);
      uint64_t v16 = *(void *)(*(void *)v13 + 8);
      if (v16)
      {
        unint64_t v17 = v16 & 0xFFFFFFFFFFFFFFFCLL;
        if (*(char *)(v17 + 31) < 0) {
          uint64_t v18 = *(void *)(v17 + 16);
        }
        else {
          uint64_t v18 = *(unsigned __int8 *)(v17 + 31);
        }
        v15 += v18;
      }
      *(_DWORD *)(*(void *)v13 + 32) = v15;
      v11 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6);
      v13 += 8;
      v14 -= 8;
    }
    while (v14);
  }
  uint64_t v19 = *(int *)(a1 + 96);
  uint64_t v20 = v11 + 2 * v19;
  uint64_t v21 = *(void *)(a1 + 104);
  if (v21) {
    int v22 = (uint64_t *)(v21 + 8);
  }
  else {
    int v22 = 0;
  }
  if (v19)
  {
    uint64_t v23 = 8 * v19;
    do
    {
      uint64_t v24 = *v22++;
      uint64_t v25 = sub_10E9D5C(v24);
      v20 += v25 + ((9 * (__clz(v25 | 1) ^ 0x1F) + 73) >> 6);
      v23 -= 8;
    }
    while (v23);
  }
  int v26 = *(_DWORD *)(a1 + 16);
  if ((v26 & 0x1F) == 0) {
    goto LABEL_32;
  }
  if (v26)
  {
    unint64_t v29 = *(void *)(a1 + 112) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v30 = *(unsigned __int8 *)(v29 + 23);
    uint64_t v31 = *(void *)(v29 + 8);
    if ((v30 & 0x80u) == 0) {
      uint64_t v31 = v30;
    }
    v20 += v31 + ((9 * (__clz(v31 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if ((v26 & 2) == 0)
    {
LABEL_28:
      if ((v26 & 4) == 0) {
        goto LABEL_29;
      }
LABEL_47:
      uint64_t v40 = *(void *)(a1 + 128);
      int v41 = *(_DWORD *)(v40 + 16);
      if ((v41 & 3) == 0)
      {
        uint64_t v42 = 0;
        goto LABEL_54;
      }
      if (v41)
      {
        uint64_t v42 = ((9 * (__clz(*(_DWORD *)(v40 + 24) | 1) ^ 0x1F) + 73) >> 6) + 1;
        if ((v41 & 2) == 0) {
          goto LABEL_54;
        }
      }
      else
      {
        uint64_t v42 = 0;
        if ((v41 & 2) == 0)
        {
LABEL_54:
          uint64_t v43 = *(void *)(v40 + 8);
          if (v43)
          {
            unint64_t v51 = v43 & 0xFFFFFFFFFFFFFFFCLL;
            if (*(char *)(v51 + 31) < 0) {
              uint64_t v52 = *(void *)(v51 + 16);
            }
            else {
              uint64_t v52 = *(unsigned __int8 *)(v51 + 31);
            }
            v42 += v52;
          }
          *(_DWORD *)(v40 + 20) = v42;
          v20 += v42 + ((9 * (__clz(v42 | 1) ^ 0x1F) + 73) >> 6) + 1;
          if ((v26 & 8) == 0)
          {
LABEL_30:
            if ((v26 & 0x10) == 0) {
              goto LABEL_32;
            }
            goto LABEL_31;
          }
          goto LABEL_56;
        }
      }
      v42 += ((9 * (__clz(*(_DWORD *)(v40 + 28) | 1) ^ 0x1F) + 73) >> 6) + 1;
      goto LABEL_54;
    }
  }
  else if ((v26 & 2) == 0)
  {
    goto LABEL_28;
  }
  uint64_t v32 = *(void *)(a1 + 120);
  uint64_t v33 = *(int *)(v32 + 24);
  uint64_t v34 = *(void *)(v32 + 32);
  if (v34) {
    uint64_t v35 = (uint64_t *)(v34 + 8);
  }
  else {
    uint64_t v35 = 0;
  }
  if (v33)
  {
    uint64_t v36 = 8 * v33;
    do
    {
      uint64_t v37 = *v35++;
      uint64_t v38 = sub_10E5B80(v37);
      v33 += v38 + ((9 * (__clz(v38 | 1) ^ 0x1F) + 73) >> 6);
      v36 -= 8;
    }
    while (v36);
    uint64_t v39 = *(void *)(v32 + 8);
    if ((v39 & 1) == 0) {
      goto LABEL_46;
    }
  }
  else
  {
    uint64_t v33 = 0;
    uint64_t v39 = *(void *)(v32 + 8);
    if ((v39 & 1) == 0) {
      goto LABEL_46;
    }
  }
  unint64_t v49 = v39 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v49 + 31) < 0) {
    uint64_t v50 = *(void *)(v49 + 16);
  }
  else {
    uint64_t v50 = *(unsigned __int8 *)(v49 + 31);
  }
  v33 += v50;
LABEL_46:
  *(_DWORD *)(v32 + 40) = v33;
  v20 += v33 + ((9 * (__clz(v33 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v26 & 4) != 0) {
    goto LABEL_47;
  }
LABEL_29:
  if ((v26 & 8) == 0) {
    goto LABEL_30;
  }
LABEL_56:
  uint64_t v44 = *(void *)(a1 + 136);
  uint64_t v45 = 9 * *(unsigned int *)(v44 + 16);
  uint64_t v46 = *(void *)(v44 + 8);
  if (v46)
  {
    unint64_t v53 = v46 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v53 + 31) < 0) {
      uint64_t v54 = *(void *)(v53 + 16);
    }
    else {
      uint64_t v54 = *(unsigned __int8 *)(v53 + 31);
    }
    v45 += v54;
  }
  *(_DWORD *)(v44 + 32) = v45;
  v20 += v45 + ((9 * (__clz(v45 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v26 & 0x10) != 0) {
LABEL_31:
  }
    v20 += ((9 * (__clz(*(_DWORD *)(a1 + 144) | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_32:
  uint64_t v27 = *(void *)(a1 + 8);
  if (v27)
  {
    unint64_t v47 = v27 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v47 + 31) < 0) {
      uint64_t v48 = *(void *)(v47 + 16);
    }
    else {
      uint64_t v48 = *(unsigned __int8 *)(v47 + 31);
    }
    v20 += v48;
  }
  *(_DWORD *)(a1 + 20) = v20;
  return v20;
}

void sub_10EB9D0(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = (_DWORD *)(a1 + 24);
    uint64_t v6 = *(int *)(a1 + 24);
    sub_188C80C((unsigned int *)(a1 + 24), v6 + v4);
    uint64_t v7 = *(void *)(a1 + 32);
    *v5 += *(_DWORD *)(a2 + 24);
    memcpy((void *)(v7 + 4 * v6), *(const void **)(a2 + 32), 4 * *(int *)(a2 + 24));
  }
  int v8 = *(_DWORD *)(a2 + 48);
  if (v8)
  {
    uint64_t v9 = (uint64_t *)(*(void *)(a2 + 56) + 8);
    uint64_t v10 = (std::string **)sub_188CCE4(a1 + 40, *(_DWORD *)(a2 + 48));
    sub_10FAACC((std::string *)(a1 + 40), v10, v9, v8, **(_DWORD **)(a1 + 56) - *(_DWORD *)(a1 + 48));
    int v11 = *(_DWORD *)(a1 + 48) + v8;
    *(_DWORD *)(a1 + 48) = v11;
    uint64_t v12 = *(int **)(a1 + 56);
    if (*v12 < v11) {
      *uint64_t v12 = v11;
    }
  }
  int v13 = *(_DWORD *)(a2 + 72);
  if (v13)
  {
    uint64_t v14 = (std::string **)(*(void *)(a2 + 80) + 8);
    uint64_t v15 = (uint64_t *)sub_188CCE4(a1 + 64, *(_DWORD *)(a2 + 72));
    sub_10FAB58((uint64_t *)(a1 + 64), v15, v14, v13, **(_DWORD **)(a1 + 80) - *(_DWORD *)(a1 + 72));
    int v16 = *(_DWORD *)(a1 + 72) + v13;
    *(_DWORD *)(a1 + 72) = v16;
    unint64_t v17 = *(int **)(a1 + 80);
    if (*v17 < v16) {
      *unint64_t v17 = v16;
    }
  }
  int v18 = *(_DWORD *)(a2 + 96);
  if (v18)
  {
    uint64_t v19 = (std::string **)(*(void *)(a2 + 104) + 8);
    uint64_t v20 = (uint64_t *)sub_188CCE4(a1 + 88, *(_DWORD *)(a2 + 96));
    sub_10FAC78((uint64_t *)(a1 + 88), v20, v19, v18, **(_DWORD **)(a1 + 104) - *(_DWORD *)(a1 + 96));
    int v21 = *(_DWORD *)(a1 + 96) + v18;
    *(_DWORD *)(a1 + 96) = v21;
    int v22 = *(int **)(a1 + 104);
    if (*v22 < v21) {
      int *v22 = v21;
    }
  }
  int v23 = *(_DWORD *)(a2 + 16);
  if ((v23 & 0x1F) != 0)
  {
    if (v23)
    {
      uint64_t v24 = (long long *)(*(void *)(a2 + 112) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v25 = *(void *)(a1 + 8);
      int v26 = (uint64_t *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
      if (v25) {
        int v26 = (uint64_t *)*v26;
      }
      sub_1881DF4((std::string **)(a1 + 112), v24, v26);
    }
    if ((v23 & 2) != 0)
    {
      *(_DWORD *)(a1 + 16) |= 2u;
      uint64_t v27 = *(void *)(a1 + 120);
      if (!v27)
      {
        uint64_t v28 = *(void *)(a1 + 8);
        unint64_t v29 = (void *)(v28 & 0xFFFFFFFFFFFFFFFCLL);
        if (v28) {
          unint64_t v29 = (void *)*v29;
        }
        uint64_t v27 = sub_10F8DE8((uint64_t)v29);
        *(void *)(a1 + 120) = v27;
      }
      if (*(void *)(a2 + 120)) {
        uint64_t v30 = *(uint64_t (****)())(a2 + 120);
      }
      else {
        uint64_t v30 = &off_24F7798;
      }
      int v31 = *((_DWORD *)v30 + 6);
      if (v31)
      {
        uint64_t v32 = (uint64_t *)(v30[4] + 1);
        uint64_t v33 = (uint64_t *)sub_188CCE4(v27 + 16, *((_DWORD *)v30 + 6));
        sub_10FA8C8((uint64_t *)(v27 + 16), v33, v32, v31, **(_DWORD **)(v27 + 32) - *(_DWORD *)(v27 + 24));
        int v34 = *(_DWORD *)(v27 + 24) + v31;
        *(_DWORD *)(v27 + 24) = v34;
        uint64_t v35 = *(int **)(v27 + 32);
        if (*v35 < v34) {
          *uint64_t v35 = v34;
        }
      }
      unint64_t v36 = (unint64_t)v30[1];
      if (v36) {
        sub_188B4F8((uint64_t *)(v27 + 8), (v36 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
    }
    if ((v23 & 4) != 0)
    {
      *(_DWORD *)(a1 + 16) |= 4u;
      uint64_t v37 = *(void **)(a1 + 128);
      if (!v37)
      {
        uint64_t v38 = *(void *)(a1 + 8);
        uint64_t v39 = (void *)(v38 & 0xFFFFFFFFFFFFFFFCLL);
        if (v38) {
          uint64_t v39 = (void *)*v39;
        }
        uint64_t v37 = sub_10F93C4((uint64_t)v39);
        *(void *)(a1 + 128) = v37;
      }
      uint64_t v40 = *(uint64_t (****)())(a2 + 128);
      if (!v40) {
        uint64_t v40 = &off_24F7920;
      }
      int v41 = *((_DWORD *)v40 + 4);
      if ((v41 & 3) != 0)
      {
        if (v41) {
          *((_DWORD *)v37 + 6) = *((_DWORD *)v40 + 6);
        }
        if ((v41 & 2) != 0) {
          *((_DWORD *)v37 + 7) = *((_DWORD *)v40 + 7);
        }
        *((_DWORD *)v37 + 4) |= v41;
      }
      unint64_t v42 = (unint64_t)v40[1];
      if (v42) {
        sub_188B4F8(v37 + 1, (v42 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
    }
    if ((v23 & 8) != 0)
    {
      *(_DWORD *)(a1 + 16) |= 8u;
      uint64_t v43 = *(void *)(a1 + 136);
      if (!v43)
      {
        uint64_t v44 = *(void *)(a1 + 8);
        uint64_t v45 = (void *)(v44 & 0xFFFFFFFFFFFFFFFCLL);
        if (v44) {
          uint64_t v45 = (void *)*v45;
        }
        uint64_t v43 = sub_10F90BC((uint64_t)v45);
        *(void *)(a1 + 136) = v43;
      }
      if (*(void *)(a2 + 136)) {
        uint64_t v46 = *(const void ***)(a2 + 136);
      }
      else {
        uint64_t v46 = (const void **)&off_24F7860;
      }
      int v47 = *((_DWORD *)v46 + 4);
      if (v47)
      {
        uint64_t v48 = *(int *)(v43 + 16);
        sub_188CA54((unsigned int *)(v43 + 16), v48 + v47);
        uint64_t v49 = *(void *)(v43 + 24);
        *(_DWORD *)(v43 + 16) += *((_DWORD *)v46 + 4);
        memcpy((void *)(v49 + 8 * v48), v46[3], 8 * *((int *)v46 + 4));
      }
      unint64_t v50 = (unint64_t)v46[1];
      if (v50) {
        sub_188B4F8((uint64_t *)(v43 + 8), (v50 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
    }
    if ((v23 & 0x10) != 0) {
      *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
    }
    *(_DWORD *)(a1 + 16) |= v23;
  }
  uint64_t v51 = *(void *)(a2 + 8);
  if (v51)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v51 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

uint64_t sub_10EBE10(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 2) == 0) {
    return 1;
  }
  uint64_t v1 = *(void *)(a1 + 120);
  uint64_t v2 = *(unsigned int *)(v1 + 24);
  if ((int)v2 < 1) {
    return 1;
  }
  uint64_t v3 = v2 + 1;
  while (1)
  {
    uint64_t v4 = *(void *)(*(void *)(v1 + 32) + 8 * (v3 - 2) + 8);
    if (*(unsigned char *)(v4 + 16))
    {
      uint64_t result = sub_15B06D8(*(void *)(v4 + 24));
      if (!result) {
        break;
      }
    }
    if ((unint64_t)--v3 <= 1) {
      return 1;
    }
  }
  return result;
}

double sub_10EBE8C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_20B5EB0;
  strcpy(v2, "geo3.SessionState.RouteLeg");
  return *(double *)"onState.RouteLeg";
}

void *sub_10EBEE0(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }
  return a1;
}

void sub_10EBF80(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }

  operator delete();
}

uint64_t sub_10EC040(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 3) != 0)
  {
    *(_DWORD *)(a1 + 32) = 0;
    *(void *)(a1 + 24) = 0;
  }
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_10EC068(uint64_t a1, char *a2, int32x2_t *a3)
{
  int v6 = 0;
  uint64_t v7 = (uint64_t *)(a1 + 8);
  while (1)
  {
    if ((unint64_t)a2 < *(void *)a3) {
      goto LABEL_4;
    }
    int v17 = a2 - a3[1].i32[0];
    if (a3[3].i32[1] == v17) {
      break;
    }
    a2 = sub_188BB90((uint64_t)a3, v17, a3[11].i32[1]);
    if (v18) {
      goto LABEL_38;
    }
LABEL_4:
    int v8 = a2 + 1;
    unsigned int v9 = *a2;
    if (*a2 < 0)
    {
      unsigned int v12 = v9 + (*v8 << 7);
      unsigned int v9 = v12 - 128;
      if (*v8 < 0)
      {
        int v8 = (char *)sub_188C180((uint64_t)a2, v12 - 128);
        unsigned int v9 = v15;
        unsigned int v10 = v15 >> 3;
        if (v15 >> 3 != 2) {
          goto LABEL_6;
        }
      }
      else
      {
        int v8 = a2 + 2;
        unsigned int v10 = v9 >> 3;
        if (v9 >> 3 != 2) {
          goto LABEL_6;
        }
      }
      goto LABEL_17;
    }
    unsigned int v10 = v9 >> 3;
    if (v9 >> 3 == 2)
    {
LABEL_17:
      if (v9 != 16) {
        goto LABEL_10;
      }
      v6 |= 2u;
      a2 = v8 + 1;
      int v13 = *v8;
      if (*v8 < 0)
      {
        int v14 = *a2;
        int v13 = v13 + (v14 << 7) - 128;
        if ((v14 & 0x80000000) == 0)
        {
          a2 = v8 + 2;
          goto LABEL_21;
        }
        a2 = (char *)sub_188C0D0((uint64_t)v8, v13);
        *(_DWORD *)(a1 + 32) = v16;
        if (!a2) {
          goto LABEL_30;
        }
      }
      else
      {
LABEL_21:
        *(_DWORD *)(a1 + 32) = v13;
      }
    }
    else
    {
LABEL_6:
      if (v10 == 1 && v9 == 9)
      {
        v6 |= 1u;
        *(void *)(a1 + 24) = *(void *)v8;
        a2 = v8 + 8;
      }
      else
      {
LABEL_10:
        if (!v9 || (v9 & 7) == 4)
        {
          if (v8) {
            a3[10].i32[0] = v9 - 1;
          }
          goto LABEL_33;
        }
        if (*v7)
        {
          a2 = (char *)sub_1885AC0(v9, (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8), v8, a3);
          if (!a2) {
            goto LABEL_30;
          }
        }
        else
        {
          uint64_t v19 = (std::string *)sub_188DBD8(v7);
          a2 = (char *)sub_1885AC0(v9, v19, v8, a3);
          if (!a2)
          {
LABEL_30:
            int v8 = 0;
            goto LABEL_33;
          }
        }
      }
    }
  }
  if (v17 < 1)
  {
LABEL_38:
    int v8 = a2;
    goto LABEL_33;
  }
  if (a3[2]) {
    int v8 = a2;
  }
  else {
    int v8 = 0;
  }
LABEL_33:
  *(_DWORD *)(a1 + 16) |= v6;
  return v8;
}

_OWORD *sub_10EC264(uint64_t a1, unint64_t __dst, _DWORD *a3)
{
  uint64_t v4 = (_OWORD *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*(void *)a3 <= __dst) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v7 = *(void *)(a1 + 24);
    *(unsigned char *)uint64_t v4 = 9;
    *(void *)((char *)v4 + 1) = v7;
    uint64_t v4 = (_OWORD *)((char *)v4 + 9);
  }
  if ((v6 & 2) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      unsigned int v8 = *(_DWORD *)(a1 + 32);
      *(unsigned char *)uint64_t v4 = 16;
      *((unsigned char *)v4 + 1) = v8;
      if (v8 <= 0x7F) {
        goto LABEL_8;
      }
    }
    else
    {
      unsigned int v8 = *(_DWORD *)(a1 + 32);
      *(unsigned char *)uint64_t v4 = 16;
      *((unsigned char *)v4 + 1) = v8;
      if (v8 <= 0x7F)
      {
LABEL_8:
        uint64_t v4 = (_OWORD *)((char *)v4 + 2);
        goto LABEL_12;
      }
    }
    *((unsigned char *)v4 + 1) = v8 | 0x80;
    unsigned int v9 = v8 >> 7;
    *((unsigned char *)v4 + 2) = v8 >> 7;
    uint64_t v4 = (_OWORD *)((char *)v4 + 3);
    if (v8 >= 0x4000)
    {
      do
      {
        *((unsigned char *)v4 - 1) |= 0x80u;
        unsigned int v10 = v9 >> 14;
        v9 >>= 7;
        *(unsigned char *)uint64_t v4 = v9;
        uint64_t v4 = (_OWORD *)((char *)v4 + 1);
      }
      while (v10);
    }
  }
LABEL_12:
  uint64_t v11 = *(void *)(a1 + 8);
  if ((v11 & 1) == 0) {
    return v4;
  }
  unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v13 + 31) < 0)
  {
    int v14 = *(char **)(v13 + 8);
    uint64_t v15 = *(void *)(v13 + 16);
  }
  else
  {
    int v14 = (char *)(v13 + 8);
    LODWORD(v15) = *(unsigned __int8 *)(v13 + 31);
  }
  uint64_t v16 = (int)v15;
  if (*(void *)a3 - (void)v4 < (int)v15)
  {
    return (_OWORD *)sub_188A528(a3, v14, v15, v4);
  }
  else
  {
    memcpy(v4, v14, (int)v15);
    return (_OWORD *)((char *)v4 + v16);
  }
}

uint64_t sub_10EC3E8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) != 0)
  {
    uint64_t v2 = 9;
    if ((v1 & 1) == 0) {
      uint64_t v2 = 0;
    }
    if ((v1 & 2) != 0)
    {
      v2 += ((9 * (__clz(*(_DWORD *)(a1 + 32) | 1) ^ 0x1F) + 73) >> 6) + 1;
      uint64_t v3 = *(void *)(a1 + 8);
      if ((v3 & 1) == 0) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v3 = *(void *)(a1 + 8);
      if ((v3 & 1) == 0)
      {
LABEL_6:
        *(_DWORD *)(a1 + 20) = v2;
        return v2;
      }
    }
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v3 = *(void *)(a1 + 8);
    if ((v3 & 1) == 0) {
      goto LABEL_6;
    }
  }
  unint64_t v5 = v3 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v5 + 31) < 0) {
    uint64_t v6 = *(void *)(v5 + 16) + v2;
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 31) + v2;
  }
  *(_DWORD *)(a1 + 20) = v6;
  return v6;
}

std::string *sub_10EC488(std::string *result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 16);
  if ((v2 & 3) != 0)
  {
    if (v2) {
      result[1].__r_.__value_.__r.__words[0] = *(void *)(a2 + 24);
    }
    if ((v2 & 2) != 0) {
      LODWORD(result[1].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 32);
    }
    LODWORD(result->__r_.__value_.__r.__words[2]) |= v2;
  }
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3) {
    return sub_188B4F8((uint64_t *)&result->__r_.__value_.__l.__size_, (v3 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_10EC4D4()
{
  return 1;
}

char *sub_10EC4DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_20B9390;
  strcpy(result, "geo3.SessionState.DeclinedDetour");
  return result;
}

void *sub_10EC528(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }
  return a1;
}

void sub_10EC5C8(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }

  operator delete();
}

char *sub_10EC688(_DWORD *a1, char *a2, int32x2_t *a3)
{
  int v6 = 0;
  uint64_t v7 = (uint64_t *)(a1 + 2);
  while (1)
  {
    if ((unint64_t)a2 < *(void *)a3) {
      goto LABEL_5;
    }
    int v20 = a2 - a3[1].i32[0];
    if (a3[3].i32[1] == v20) {
      break;
    }
    a2 = sub_188BB90((uint64_t)a3, v20, a3[11].i32[1]);
    if (v21) {
      goto LABEL_43;
    }
LABEL_5:
    unsigned int v9 = a2 + 1;
    unsigned int v10 = *a2;
    if (*a2 < 0)
    {
      unsigned int v13 = v10 + (*v9 << 7);
      unsigned int v10 = v13 - 128;
      if (*v9 < 0)
      {
        unsigned int v9 = (char *)sub_188C180((uint64_t)a2, v13 - 128);
        unsigned int v10 = v16;
        unsigned int v11 = v16 >> 3;
        if (v16 >> 3 != 2) {
          goto LABEL_7;
        }
      }
      else
      {
        unsigned int v9 = a2 + 2;
        unsigned int v11 = v10 >> 3;
        if (v10 >> 3 != 2) {
          goto LABEL_7;
        }
      }
      goto LABEL_18;
    }
    unsigned int v11 = v10 >> 3;
    if (v10 >> 3 == 2)
    {
LABEL_18:
      if (v10 != 16) {
        goto LABEL_11;
      }
      v6 |= 2u;
      a2 = v9 + 1;
      int v14 = *v9;
      if (*v9 < 0)
      {
        int v15 = *a2;
        int v14 = v14 + (v15 << 7) - 128;
        if ((v15 & 0x80000000) == 0)
        {
          a2 = v9 + 2;
          goto LABEL_22;
        }
        a2 = (char *)sub_188C0D0((uint64_t)v9, v14);
        a1[7] = v18;
        if (!a2) {
          goto LABEL_35;
        }
      }
      else
      {
LABEL_22:
        a1[7] = v14;
      }
    }
    else
    {
LABEL_7:
      if (v11 == 1 && v10 == 8)
      {
        v6 |= 1u;
        a2 = v9 + 1;
        int v8 = *v9;
        if ((*v9 & 0x80000000) == 0) {
          goto LABEL_3;
        }
        int v17 = *a2;
        int v8 = v8 + (v17 << 7) - 128;
        if (v17 < 0)
        {
          a2 = (char *)sub_188C0D0((uint64_t)v9, v8);
          a1[6] = v19;
          if (!a2) {
            goto LABEL_35;
          }
        }
        else
        {
          a2 = v9 + 2;
LABEL_3:
          a1[6] = v8;
        }
      }
      else
      {
LABEL_11:
        if (!v10 || (v10 & 7) == 4)
        {
          if (v9) {
            a3[10].i32[0] = v10 - 1;
          }
          goto LABEL_38;
        }
        if (*v7)
        {
          a2 = (char *)sub_1885AC0(v10, (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8), v9, a3);
          if (!a2) {
            goto LABEL_35;
          }
        }
        else
        {
          int v22 = (std::string *)sub_188DBD8(v7);
          a2 = (char *)sub_1885AC0(v10, v22, v9, a3);
          if (!a2)
          {
LABEL_35:
            unsigned int v9 = 0;
            goto LABEL_38;
          }
        }
      }
    }
  }
  if (v20 < 1)
  {
LABEL_43:
    unsigned int v9 = a2;
    goto LABEL_38;
  }
  if (a3[2]) {
    unsigned int v9 = a2;
  }
  else {
    unsigned int v9 = 0;
  }
LABEL_38:
  a1[4] |= v6;
  return v9;
}

unsigned char *sub_10EC8C0(uint64_t a1, unsigned char *__dst, _DWORD *a3)
{
  uint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*(void *)a3 <= (unint64_t)__dst)
    {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)__dst);
      unsigned int v7 = *(_DWORD *)(a1 + 24);
      *uint64_t v4 = 8;
      v4[1] = v7;
      if (v7 <= 0x7F) {
        goto LABEL_4;
      }
    }
    else
    {
      unsigned int v7 = *(_DWORD *)(a1 + 24);
      *long long __dst = 8;
      __dst[1] = v7;
      if (v7 <= 0x7F)
      {
LABEL_4:
        v4 += 2;
        goto LABEL_8;
      }
    }
    v4[1] = v7 | 0x80;
    unsigned int v8 = v7 >> 7;
    v4[2] = v7 >> 7;
    v4 += 3;
    if (v7 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unsigned int v9 = v8 >> 14;
        v8 >>= 7;
        *v4++ = v8;
      }
      while (v9);
    }
  }
LABEL_8:
  if ((v6 & 2) == 0) {
    goto LABEL_15;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unsigned int v10 = *(_DWORD *)(a1 + 28);
    *uint64_t v4 = 16;
    v4[1] = v10;
    if (v10 <= 0x7F) {
      goto LABEL_11;
    }
  }
  else
  {
    unsigned int v10 = *(_DWORD *)(a1 + 28);
    *uint64_t v4 = 16;
    v4[1] = v10;
    if (v10 <= 0x7F)
    {
LABEL_11:
      v4 += 2;
      goto LABEL_15;
    }
  }
  v4[1] = v10 | 0x80;
  unsigned int v11 = v10 >> 7;
  v4[2] = v10 >> 7;
  v4 += 3;
  if (v10 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unsigned int v12 = v11 >> 14;
      v11 >>= 7;
      *v4++ = v11;
    }
    while (v12);
  }
LABEL_15:
  uint64_t v13 = *(void *)(a1 + 8);
  if ((v13 & 1) == 0) {
    return v4;
  }
  unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v15 + 31) < 0)
  {
    unsigned int v16 = *(char **)(v15 + 8);
    uint64_t v17 = *(void *)(v15 + 16);
  }
  else
  {
    unsigned int v16 = (char *)(v15 + 8);
    LODWORD(v17) = *(unsigned __int8 *)(v15 + 31);
  }
  uint64_t v18 = (int)v17;
  if (*(void *)a3 - (void)v4 < (int)v17)
  {
    return (unsigned char *)sub_188A528(a3, v16, v17, v4);
  }
  else
  {
    memcpy(v4, v16, (int)v17);
    return &v4[v18];
  }
}

uint64_t sub_10ECA9C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0)
  {
    uint64_t v2 = 0;
    goto LABEL_8;
  }
  if (v1)
  {
    uint64_t v2 = ((9 * (__clz(*(_DWORD *)(a1 + 24) | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v1 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v2 = 0;
  if ((v1 & 2) != 0) {
LABEL_7:
  }
    v2 += ((9 * (__clz(*(_DWORD *)(a1 + 28) | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    unint64_t v5 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v5 + 31) < 0) {
      uint64_t v6 = *(void *)(v5 + 16) + v2;
    }
    else {
      uint64_t v6 = *(unsigned __int8 *)(v5 + 31) + v2;
    }
    *(_DWORD *)(a1 + 20) = v6;
    return v6;
  }
  else
  {
    *(_DWORD *)(a1 + 20) = v2;
    return v2;
  }
}

std::string *sub_10ECB50(std::string *result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 16);
  if ((v2 & 3) != 0)
  {
    if (v2) {
      LODWORD(result[1].__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 24);
    }
    if ((v2 & 2) != 0) {
      HIDWORD(result[1].__r_.__value_.__r.__words[0]) = *(_DWORD *)(a2 + 28);
    }
    LODWORD(result->__r_.__value_.__r.__words[2]) |= v2;
  }
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3) {
    return sub_188B4F8((uint64_t *)&result->__r_.__value_.__l.__size_, (v3 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_10ECB9C()
{
  return 1;
}

char *sub_10ECBA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_20B9280;
  strcpy(result, "geo3.SessionState.TrafficDelayInfo");
  return result;
}

void *sub_10ECBF8(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }
  return a1;
}

void sub_10ECC98(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }

  operator delete();
}

uint64_t sub_10ECD58(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 0xF) != 0)
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_10ECD7C(_DWORD *a1, char *a2, int32x2_t *a3)
{
  int v6 = 0;
  unsigned int v7 = (uint64_t *)(a1 + 2);
  while ((unint64_t)a2 < *(void *)a3)
  {
LABEL_5:
    unsigned int v8 = a2 + 1;
    unsigned int v9 = *a2;
    if (*a2 < 0)
    {
      unsigned int v13 = v9 + (*v8 << 7);
      unsigned int v9 = v13 - 128;
      if (*v8 < 0)
      {
        unsigned int v8 = (char *)sub_188C180((uint64_t)a2, v13 - 128);
        unsigned int v9 = v21;
        unsigned int v10 = (v21 >> 3) - 1;
        if (v10 <= 3) {
          goto LABEL_7;
        }
      }
      else
      {
        unsigned int v8 = a2 + 2;
        unsigned int v10 = (v9 >> 3) - 1;
        if (v10 <= 3) {
          goto LABEL_7;
        }
      }
LABEL_32:
      if (v9) {
        BOOL v22 = (v9 & 7) == 4;
      }
      else {
        BOOL v22 = 1;
      }
      if (v22)
      {
        if (v8) {
          a3[10].i32[0] = v9 - 1;
        }
        goto LABEL_52;
      }
      if (*v7)
      {
        a2 = (char *)sub_1885AC0(v9, (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8), v8, a3);
        if (!a2) {
          goto LABEL_49;
        }
      }
      else
      {
        uint64_t v28 = (std::string *)sub_188DBD8(v7);
        a2 = (char *)sub_1885AC0(v9, v28, v8, a3);
        if (!a2)
        {
LABEL_49:
          unsigned int v8 = 0;
          goto LABEL_52;
        }
      }
    }
    else
    {
      unsigned int v10 = (v9 >> 3) - 1;
LABEL_7:
      switch(v10)
      {
        case 0u:
          if (v9 != 8) {
            goto LABEL_32;
          }
          v6 |= 1u;
          a2 = v8 + 1;
          int v11 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_12;
          }
          int v12 = *a2;
          int v11 = v11 + (v12 << 7) - 128;
          if (v12 < 0)
          {
            a2 = (char *)sub_188C0D0((uint64_t)v8, v11);
            a1[6] = v23;
            if (!a2) {
              goto LABEL_49;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_12:
            a1[6] = v11;
          }
          continue;
        case 1u:
          if (v9 != 16) {
            goto LABEL_32;
          }
          v6 |= 2u;
          a2 = v8 + 1;
          int v14 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_20;
          }
          int v15 = *a2;
          int v14 = v14 + (v15 << 7) - 128;
          if (v15 < 0)
          {
            a2 = (char *)sub_188C0D0((uint64_t)v8, v14);
            a1[7] = v24;
            if (!a2) {
              goto LABEL_49;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_20:
            a1[7] = v14;
          }
          continue;
        case 2u:
          if (v9 != 24) {
            goto LABEL_32;
          }
          v6 |= 4u;
          a2 = v8 + 1;
          int v16 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_25;
          }
          int v17 = *a2;
          int v16 = v16 + (v17 << 7) - 128;
          if (v17 < 0)
          {
            a2 = (char *)sub_188C0D0((uint64_t)v8, v16);
            a1[8] = v25;
            if (!a2) {
              goto LABEL_49;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_25:
            a1[8] = v16;
          }
          break;
        case 3u:
          if (v9 != 32) {
            goto LABEL_32;
          }
          v6 |= 8u;
          a2 = v8 + 1;
          int v18 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_3;
          }
          int v19 = *a2;
          int v18 = v18 + (v19 << 7) - 128;
          if (v19 < 0)
          {
            a2 = (char *)sub_188C0D0((uint64_t)v8, v18);
            a1[9] = v20;
            if (!a2) {
              goto LABEL_49;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_3:
            a1[9] = v18;
          }
          continue;
        default:
          goto LABEL_32;
      }
    }
  }
  int v26 = a2 - a3[1].i32[0];
  if (a3[3].i32[1] != v26)
  {
    a2 = sub_188BB90((uint64_t)a3, v26, a3[11].i32[1]);
    if (v27) {
      goto LABEL_57;
    }
    goto LABEL_5;
  }
  if (v26 < 1)
  {
LABEL_57:
    unsigned int v8 = a2;
    goto LABEL_52;
  }
  if (a3[2]) {
    unsigned int v8 = a2;
  }
  else {
    unsigned int v8 = 0;
  }
LABEL_52:
  a1[4] |= v6;
  return v8;
}

unsigned char *sub_10ED098(uint64_t a1, unsigned char *__dst, _DWORD *a3)
{
  uint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*(void *)a3 <= (unint64_t)__dst)
    {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)__dst);
      unsigned int v7 = *(_DWORD *)(a1 + 24);
      *uint64_t v4 = 8;
      v4[1] = v7;
      if (v7 <= 0x7F) {
        goto LABEL_4;
      }
    }
    else
    {
      unsigned int v7 = *(_DWORD *)(a1 + 24);
      *long long __dst = 8;
      __dst[1] = v7;
      if (v7 <= 0x7F)
      {
LABEL_4:
        v4 += 2;
        goto LABEL_8;
      }
    }
    v4[1] = v7 | 0x80;
    unsigned int v8 = v7 >> 7;
    v4[2] = v7 >> 7;
    v4 += 3;
    if (v7 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unsigned int v9 = v8 >> 14;
        v8 >>= 7;
        *v4++ = v8;
      }
      while (v9);
    }
  }
LABEL_8:
  if ((v6 & 2) == 0) {
    goto LABEL_15;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unsigned int v10 = *(_DWORD *)(a1 + 28);
    *uint64_t v4 = 16;
    v4[1] = v10;
    if (v10 <= 0x7F) {
      goto LABEL_11;
    }
  }
  else
  {
    unsigned int v10 = *(_DWORD *)(a1 + 28);
    *uint64_t v4 = 16;
    v4[1] = v10;
    if (v10 <= 0x7F)
    {
LABEL_11:
      v4 += 2;
      goto LABEL_15;
    }
  }
  v4[1] = v10 | 0x80;
  unsigned int v11 = v10 >> 7;
  v4[2] = v10 >> 7;
  v4 += 3;
  if (v10 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unsigned int v12 = v11 >> 14;
      v11 >>= 7;
      *v4++ = v11;
    }
    while (v12);
  }
LABEL_15:
  if ((v6 & 4) == 0) {
    goto LABEL_22;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unsigned int v13 = *(_DWORD *)(a1 + 32);
    *uint64_t v4 = 24;
    v4[1] = v13;
    if (v13 <= 0x7F) {
      goto LABEL_18;
    }
  }
  else
  {
    unsigned int v13 = *(_DWORD *)(a1 + 32);
    *uint64_t v4 = 24;
    v4[1] = v13;
    if (v13 <= 0x7F)
    {
LABEL_18:
      v4 += 2;
      goto LABEL_22;
    }
  }
  v4[1] = v13 | 0x80;
  unsigned int v14 = v13 >> 7;
  v4[2] = v13 >> 7;
  v4 += 3;
  if (v13 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unsigned int v15 = v14 >> 14;
      v14 >>= 7;
      *v4++ = v14;
    }
    while (v15);
  }
LABEL_22:
  if ((v6 & 8) == 0) {
    goto LABEL_29;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unsigned int v16 = *(_DWORD *)(a1 + 36);
    *uint64_t v4 = 32;
    v4[1] = v16;
    if (v16 <= 0x7F) {
      goto LABEL_25;
    }
  }
  else
  {
    unsigned int v16 = *(_DWORD *)(a1 + 36);
    *uint64_t v4 = 32;
    v4[1] = v16;
    if (v16 <= 0x7F)
    {
LABEL_25:
      v4 += 2;
      goto LABEL_29;
    }
  }
  v4[1] = v16 | 0x80;
  unsigned int v17 = v16 >> 7;
  v4[2] = v16 >> 7;
  v4 += 3;
  if (v16 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unsigned int v18 = v17 >> 14;
      v17 >>= 7;
      *v4++ = v17;
    }
    while (v18);
  }
LABEL_29:
  uint64_t v19 = *(void *)(a1 + 8);
  if ((v19 & 1) == 0) {
    return v4;
  }
  unint64_t v21 = v19 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v21 + 31) < 0)
  {
    BOOL v22 = *(char **)(v21 + 8);
    uint64_t v23 = *(void *)(v21 + 16);
  }
  else
  {
    BOOL v22 = (char *)(v21 + 8);
    LODWORD(v23) = *(unsigned __int8 *)(v21 + 31);
  }
  uint64_t v24 = (int)v23;
  if (*(void *)a3 - (void)v4 < (int)v23)
  {
    return (unsigned char *)sub_188A528(a3, v22, v23, v4);
  }
  else
  {
    memcpy(v4, v22, (int)v23);
    return &v4[v24];
  }
}

uint64_t sub_10ED394(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 0xF) != 0)
  {
    if (v1)
    {
      uint64_t v2 = ((9 * (__clz(*(_DWORD *)(a1 + 24) | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v1 & 2) == 0) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v2 = 0;
      if ((v1 & 2) == 0)
      {
LABEL_9:
        if ((v1 & 4) != 0)
        {
          v2 += ((9 * (__clz(*(_DWORD *)(a1 + 32) | 1) ^ 0x1F) + 73) >> 6) + 1;
          if ((v1 & 8) == 0)
          {
LABEL_11:
            uint64_t v3 = *(void *)(a1 + 8);
            if ((v3 & 1) == 0) {
              goto LABEL_12;
            }
            goto LABEL_15;
          }
        }
        else if ((v1 & 8) == 0)
        {
          goto LABEL_11;
        }
        v2 += ((9 * (__clz(*(_DWORD *)(a1 + 36) | 1) ^ 0x1F) + 73) >> 6) + 1;
        uint64_t v3 = *(void *)(a1 + 8);
        if ((v3 & 1) == 0) {
          goto LABEL_12;
        }
        goto LABEL_15;
      }
    }
    v2 += ((9 * (__clz(*(_DWORD *)(a1 + 28) | 1) ^ 0x1F) + 73) >> 6) + 1;
    goto LABEL_9;
  }
  uint64_t v2 = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 1) == 0)
  {
LABEL_12:
    *(_DWORD *)(a1 + 20) = v2;
    return v2;
  }
LABEL_15:
  unint64_t v5 = v3 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v5 + 31) < 0) {
    uint64_t v6 = *(void *)(v5 + 16) + v2;
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 31) + v2;
  }
  *(_DWORD *)(a1 + 20) = v6;
  return v6;
}

std::string *sub_10ED4AC(std::string *result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 16);
  if ((v2 & 0xF) == 0) {
    goto LABEL_8;
  }
  if (v2)
  {
    LODWORD(result[1].__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 24);
    if ((v2 & 2) == 0)
    {
LABEL_4:
      if ((v2 & 4) == 0) {
        goto LABEL_5;
      }
LABEL_12:
      LODWORD(result[1].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 32);
      if ((v2 & 8) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_4;
  }
  HIDWORD(result[1].__r_.__value_.__r.__words[0]) = *(_DWORD *)(a2 + 28);
  if ((v2 & 4) != 0) {
    goto LABEL_12;
  }
LABEL_5:
  if ((v2 & 8) != 0) {
LABEL_6:
  }
    HIDWORD(result[1].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 36);
LABEL_7:
  LODWORD(result->__r_.__value_.__r.__words[2]) |= v2;
LABEL_8:
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3) {
    return sub_188B4F8((uint64_t *)&result->__r_.__value_.__l.__size_, (v3 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_10ED520()
{
  return 1;
}

double sub_10ED528@<D0>(uint64_t a1@<X8>)
{
  int v2 = (char *)operator new(0x20uLL);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_20B91B0;
  strcpy(v2, "geo3.SessionState.DisplayETA");
  return *(double *)"State.DisplayETA";
}

uint64_t sub_10ED57C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v3) {
      goto LABEL_13;
    }
  }
  else if (v3)
  {
    goto LABEL_13;
  }
  if ((uint64_t (***)())a1 != &off_24F7968)
  {
    uint64_t v4 = *(void **)(a1 + 136);
    if (v4)
    {
      uint64_t v5 = v4[1];
      if (v5)
      {
        uint64_t v19 = v4 + 1;
        if (!*(void *)(v5 & 0xFFFFFFFFFFFFFFFCLL))
        {
          sub_10E4F74(v19);
          uint64_t v5 = *v19;
        }
      }
      *uint64_t v4 = off_24E6998;
      if ((v5 & 2) != 0)
      {
        uint64_t v6 = (void *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
        if (v5)
        {
          if (*v6)
          {
LABEL_9:
            sub_1881618();
            operator delete();
          }
        }
        else if (v6)
        {
          goto LABEL_9;
        }
      }
      operator delete();
    }
  }
  if (*(void *)(a1 + 8)) {
    sub_10E4F74((void *)(a1 + 8));
  }
LABEL_13:
  unsigned int v7 = *(unsigned int **)(a1 + 128);
  if (v7 && !*(void *)(a1 + 112))
  {
    unsigned int v8 = v7 + 2;
    uint64_t v9 = *v7;
    if ((int)v9 >= 1)
    {
      do
      {
        if (*v8)
        {
          sub_13C26A8();
          operator delete();
        }
        ++v8;
        --v9;
      }
      while (v9);
      unsigned int v7 = *(unsigned int **)(a1 + 128);
    }
    operator delete(v7);
  }
  *(void *)(a1 + 128) = 0;
  sub_10FA680((void *)(a1 + 88));
  unsigned int v10 = *(unsigned int **)(a1 + 80);
  if (v10 && !*(void *)(a1 + 64))
  {
    unsigned int v11 = (void **)(v10 + 2);
    uint64_t v12 = *v10;
    if ((int)v12 >= 1)
    {
      do
      {
        if (*v11)
        {
          sub_10E9FF4(*v11);
          operator delete();
        }
        ++v11;
        --v12;
      }
      while (v12);
      unsigned int v10 = *(unsigned int **)(a1 + 80);
    }
    operator delete(v10);
  }
  *(void *)(a1 + 80) = 0;
  sub_1889DA8(a1 + 48);
  unsigned int v13 = *(uint64_t **)(a1 + 40);
  if (v13 && !*(void *)(a1 + 24))
  {
    unsigned int v16 = v13 + 1;
    uint64_t v17 = *(unsigned int *)v13;
    if ((int)v17 >= 1)
    {
      do
      {
        if (*v16)
        {
          sub_10E66DC(*v16);
          operator delete();
        }
        ++v16;
        --v17;
      }
      while (v17);
      unsigned int v13 = *(uint64_t **)(a1 + 40);
    }
    operator delete(v13);
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = off_24E6998;
    uint64_t v14 = *(void *)(a1 + 8);
    if ((v14 & 2) == 0) {
      return a1;
    }
  }
  else
  {
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = off_24E6998;
    uint64_t v14 = *(void *)(a1 + 8);
    if ((v14 & 2) == 0) {
      return a1;
    }
  }
  unsigned int v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
  if (v14)
  {
    if (*v15)
    {
LABEL_36:
      sub_1881618();
      operator delete();
    }
  }
  else if (v15)
  {
    goto LABEL_36;
  }
  return a1;
}

void sub_10ED86C(uint64_t a1)
{
  sub_10ED57C(a1);

  operator delete();
}

uint64_t sub_10ED8A4(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 32);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = *(void *)(result + 40) + 8;
    do
    {
      uint64_t v4 = *(void *)v3;
      int v5 = *(_DWORD *)(*(void *)v3 + 16);
      if (v5) {
        uint64_t result = (uint64_t)sub_15B09D0(*(void *)(v4 + 24));
      }
      if ((v5 & 0x3E) != 0)
      {
        *(void *)(v4 + 32) = 0;
        *(void *)(v4 + 40) = 0;
        *(void *)(v4 + 48) = 0;
      }
      char v7 = *(unsigned char *)(v4 + 8);
      uint64_t v6 = v4 + 8;
      *(_DWORD *)(v6 + 8) = 0;
      if (v7) {
        uint64_t result = sub_188B4AC((uint64_t *)v6);
      }
      v3 += 8;
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 32) = 0;
  }
  *(_DWORD *)(v1 + 48) = 0;
  uint64_t v8 = *(unsigned int *)(v1 + 72);
  if ((int)v8 >= 1)
  {
    uint64_t v9 = (uint64_t *)(*(void *)(v1 + 80) + 8);
    do
    {
      uint64_t v10 = *v9++;
      uint64_t result = sub_10EA364(v10);
      --v8;
    }
    while (v8);
    *(_DWORD *)(v1 + 72) = 0;
  }
  uint64_t v11 = *(unsigned int *)(v1 + 96);
  if ((int)v11 >= 1)
  {
    uint64_t v12 = *(void *)(v1 + 104) + 8;
    do
    {
      uint64_t v13 = *(void *)v12;
      if ((*(unsigned char *)(*(void *)v12 + 16) & 3) != 0)
      {
        *(_DWORD *)(v13 + 32) = 0;
        *(void *)(v13 + 24) = 0;
      }
      char v14 = *(unsigned char *)(v13 + 8);
      uint64_t result = v13 + 8;
      *(_DWORD *)(result + 8) = 0;
      if (v14) {
        uint64_t result = sub_188B4AC((uint64_t *)result);
      }
      v12 += 8;
      --v11;
    }
    while (v11);
    *(_DWORD *)(v1 + 96) = 0;
  }
  uint64_t v15 = *(unsigned int *)(v1 + 120);
  if ((int)v15 >= 1)
  {
    unsigned int v16 = (uint64_t *)(*(void *)(v1 + 128) + 8);
    do
    {
      uint64_t v17 = *v16++;
      uint64_t result = sub_13C26E4(v17);
      --v15;
    }
    while (v15);
    *(_DWORD *)(v1 + 120) = 0;
  }
  int v18 = *(_DWORD *)(v1 + 16);
  if (v18)
  {
    uint64_t v19 = *(void *)(v1 + 136);
    if ((*(unsigned char *)(v19 + 16) & 0xF) != 0)
    {
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0;
    }
    char v20 = *(unsigned char *)(v19 + 8);
    uint64_t result = v19 + 8;
    *(_DWORD *)(result + 8) = 0;
    if (v20) {
      uint64_t result = sub_188B4AC((uint64_t *)result);
    }
  }
  if ((v18 & 0xFE) != 0)
  {
    *(void *)(v1 + 144) = 0;
    *(void *)(v1 + 152) = 0;
    *(_DWORD *)(v1 + 159) = 0;
  }
  if ((v18 & 0x3F00) != 0)
  {
    *(void *)(v1 + 171) = 0;
    *(void *)(v1 + 163) = 0;
    *(void *)(v1 + 176) = 0;
  }
  char v22 = *(unsigned char *)(v1 + 8);
  uint64_t v21 = v1 + 8;
  *(_DWORD *)(v21 + 8) = 0;
  if (v22)
  {
    return sub_188B4AC((uint64_t *)v21);
  }
  return result;
}

unsigned __int8 *sub_10EDA64(uint64_t a1, unsigned __int8 *a2, int32x2_t *a3)
{
  int v92 = 0;
  int64_t v90 = (uint64_t *)(a1 + 8);
  char v91 = (uint64_t *)(a1 + 112);
  uint64_t v6 = (uint64_t *)(a1 + 88);
  char v7 = (uint64_t *)(a1 + 64);
  uint64_t v8 = (unsigned int *)(a1 + 48);
  uint64_t v9 = (uint64_t *)(a1 + 24);
  while (1)
  {
LABEL_4:
    if ((unint64_t)a2 >= *(void *)a3)
    {
      int v85 = a2 - a3[1].i32[0];
      if (a3[3].i32[1] == v85)
      {
        int v88 = v92;
        if (v85 < 1)
        {
          uint64_t v10 = a2;
        }
        else if (a3[2])
        {
          uint64_t v10 = a2;
        }
        else
        {
          uint64_t v10 = 0;
        }
        goto LABEL_216;
      }
      uint64_t v86 = sub_188BB90((uint64_t)a3, v85, a3[11].i32[1]);
      a2 = (unsigned __int8 *)v86;
      if (v87)
      {
        uint64_t v10 = (unsigned __int8 *)v86;
        goto LABEL_215;
      }
    }
    uint64_t v10 = a2 + 1;
    unsigned int v11 = *a2;
    if (((char)*a2 & 0x80000000) == 0)
    {
      unsigned int v12 = (v11 >> 3) - 1;
LABEL_7:
      switch(v12)
      {
        case 0u:
          if (v11 != 8) {
            goto LABEL_17;
          }
          v92 |= 2u;
          a2 = v10 + 1;
          int v13 = *v10;
          if (((char)*v10 & 0x80000000) == 0) {
            goto LABEL_12;
          }
          int v13 = v13 + (*a2 << 7) - 128;
          if ((char)*a2 < 0)
          {
            a2 = (unsigned __int8 *)sub_188C0D0((uint64_t)v10, v13);
            *(_DWORD *)(a1 + 144) = v70;
            if (!a2) {
              goto LABEL_212;
            }
          }
          else
          {
            a2 = v10 + 2;
LABEL_12:
            *(_DWORD *)(a1 + 144) = v13;
          }
          continue;
        case 1u:
          if (v11 != 16) {
            goto LABEL_17;
          }
          a2 = v10 + 1;
          unint64_t v18 = *v10;
          if ((char)*v10 < 0)
          {
            int v66 = v18 + (*a2 << 7);
            unint64_t v18 = (v66 - 128);
            if ((char)*a2 < 0)
            {
              uint64_t v81 = sub_188C138((uint64_t)v10, (v66 - 128));
              if (!v81) {
                goto LABEL_212;
              }
              a2 = (unsigned __int8 *)v81;
              unint64_t v18 = v82;
              if (sub_129EB9C(v82))
              {
LABEL_28:
                *(_DWORD *)(a1 + 16) |= 4u;
                *(_DWORD *)(a1 + 148) = v18;
                continue;
              }
            }
            else
            {
              a2 = v10 + 2;
              if (sub_129EB9C(v66 - 128)) {
                goto LABEL_28;
              }
            }
          }
          else if (sub_129EB9C(*v10))
          {
            goto LABEL_28;
          }
          if (*v90) {
            uint64_t v64 = (std::string *)((*v90 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            uint64_t v64 = (std::string *)sub_188DBD8(v90);
          }
          int v65 = 2;
          goto LABEL_174;
        case 2u:
          if (v11 != 24) {
            goto LABEL_17;
          }
          v92 |= 0x40u;
          a2 = v10 + 1;
          uint64_t v19 = *v10;
          if (((char)*v10 & 0x80000000) == 0) {
            goto LABEL_33;
          }
          uint64_t v19 = v19 + (*a2 << 7) - 128;
          if ((char)*a2 < 0)
          {
            a2 = (unsigned __int8 *)sub_188C138((uint64_t)v10, v19);
            *(unsigned char *)(a1 + 161) = v71 != 0;
            if (!a2) {
              goto LABEL_212;
            }
          }
          else
          {
            a2 = v10 + 2;
LABEL_33:
            *(unsigned char *)(a1 + 161) = v19 != 0;
          }
          continue;
        case 3u:
          if (v11 != 32) {
            goto LABEL_17;
          }
          v92 |= 0x80u;
          a2 = v10 + 1;
          uint64_t v20 = *v10;
          if (((char)*v10 & 0x80000000) == 0) {
            goto LABEL_38;
          }
          uint64_t v20 = v20 + (*a2 << 7) - 128;
          if ((char)*a2 < 0)
          {
            a2 = (unsigned __int8 *)sub_188C138((uint64_t)v10, v20);
            *(unsigned char *)(a1 + 162) = v72 != 0;
            if (!a2) {
              goto LABEL_212;
            }
          }
          else
          {
            a2 = v10 + 2;
LABEL_38:
            *(unsigned char *)(a1 + 162) = v20 != 0;
          }
          continue;
        case 4u:
          if (v11 != 40) {
            goto LABEL_17;
          }
          v92 |= 8u;
          a2 = v10 + 1;
          int v21 = *v10;
          if (((char)*v10 & 0x80000000) == 0) {
            goto LABEL_43;
          }
          int v21 = v21 + (*a2 << 7) - 128;
          if ((char)*a2 < 0)
          {
            a2 = (unsigned __int8 *)sub_188C0D0((uint64_t)v10, v21);
            *(_DWORD *)(a1 + 152) = v73;
            if (!a2) {
              goto LABEL_212;
            }
          }
          else
          {
            a2 = v10 + 2;
LABEL_43:
            *(_DWORD *)(a1 + 152) = v21;
          }
          continue;
        case 5u:
          if (v11 != 48) {
            goto LABEL_17;
          }
          v92 |= 0x10u;
          a2 = v10 + 1;
          int v22 = *v10;
          if (((char)*v10 & 0x80000000) == 0) {
            goto LABEL_48;
          }
          int v22 = v22 + (*a2 << 7) - 128;
          if ((char)*a2 < 0)
          {
            a2 = (unsigned __int8 *)sub_188C0D0((uint64_t)v10, v22);
            *(_DWORD *)(a1 + 156) = v74;
            if (!a2) {
              goto LABEL_212;
            }
          }
          else
          {
            a2 = v10 + 2;
LABEL_48:
            *(_DWORD *)(a1 + 156) = v22;
          }
          continue;
        case 6u:
          if (v11 != 58) {
            goto LABEL_17;
          }
          a2 = v10 - 1;
          while (1)
          {
            uint64_t v23 = *(_DWORD **)(a1 + 40);
            if (v23 && (uint64_t v24 = *(int *)(a1 + 32), (int)v24 < *v23))
            {
              *(_DWORD *)(a1 + 32) = v24 + 1;
              uint64_t v25 = *(void *)&v23[2 * v24 + 2];
              int v93 = 0;
              int v26 = (char *)sub_188BEE0((uint64_t)a3, a2 + 1, &v93);
              if (v26) {
                goto LABEL_57;
              }
            }
            else
            {
              sub_10F8E90(*v9);
              uint64_t v25 = sub_188CDC8((uint64_t)v9, v27);
              int v93 = 0;
              int v26 = (char *)sub_188BEE0((uint64_t)a3, a2 + 1, &v93);
              if (v26)
              {
LABEL_57:
                a2 = (unsigned __int8 *)sub_10E6868(v25, v26, a3);
                ++a3[11].i32[0];
                if (a3[10].i32[0]) {
                  goto LABEL_212;
                }
                goto LABEL_58;
              }
            }
            a2 = 0;
            ++a3[11].i32[0];
            if (a3[10].i32[0]) {
              goto LABEL_212;
            }
LABEL_58:
            int v28 = a3[3].i32[1] + v93;
            a3[3].i32[1] = v28;
            int32x2_t v29 = (int32x2_t)(*(void *)&a3[1] + (v28 & (v28 >> 31)));
            *a3 = v29;
            if (!a2) {
              goto LABEL_212;
            }
            if (*(void *)&v29 <= (unint64_t)a2 || *a2 != 58) {
              goto LABEL_4;
            }
          }
        case 7u:
          if (v11 != 64) {
            goto LABEL_17;
          }
          v92 |= 0x20u;
          a2 = v10 + 1;
          uint64_t v30 = *v10;
          if (((char)*v10 & 0x80000000) == 0) {
            goto LABEL_66;
          }
          uint64_t v30 = v30 + (*a2 << 7) - 128;
          if ((char)*a2 < 0)
          {
            a2 = (unsigned __int8 *)sub_188C138((uint64_t)v10, v30);
            *(unsigned char *)(a1 + 160) = v75 != 0;
            if (!a2) {
              goto LABEL_212;
            }
          }
          else
          {
            a2 = v10 + 2;
LABEL_66:
            *(unsigned char *)(a1 + 160) = v30 != 0;
          }
          continue;
        case 8u:
          if (v11 == 72)
          {
            a2 = v10 - 1;
            while (1)
            {
              int v31 = a2[1];
              if ((char)a2[1] < 0)
              {
                int v33 = v31 + (a2[2] << 7);
                int v31 = v33 - 128;
                if ((char)a2[2] < 0)
                {
                  a2 = (unsigned __int8 *)sub_188C0D0((uint64_t)(a2 + 1), v33 - 128);
                  int v31 = v34;
                  uint64_t v32 = *(unsigned int *)(a1 + 48);
                  if (v32 != *(_DWORD *)(a1 + 52))
                  {
LABEL_75:
                    *(_DWORD *)(*(void *)(a1 + 56) + 4 * v32) = v31;
                    *uint64_t v8 = v32 + 1;
                    if (!a2) {
                      goto LABEL_212;
                    }
                    goto LABEL_76;
                  }
                }
                else
                {
                  a2 += 3;
                  uint64_t v32 = *(unsigned int *)(a1 + 48);
                  if (v32 != *(_DWORD *)(a1 + 52)) {
                    goto LABEL_75;
                  }
                }
              }
              else
              {
                a2 += 2;
                uint64_t v32 = *(unsigned int *)(a1 + 48);
                if (v32 != *(_DWORD *)(a1 + 52)) {
                  goto LABEL_75;
                }
              }
              sub_188C80C(v8, v32 + 1);
              *(_DWORD *)(*(void *)(a1 + 56) + 4 * v32) = v31;
              *uint64_t v8 = v32 + 1;
              if (!a2) {
                goto LABEL_212;
              }
LABEL_76:
              if (*(void *)a3 <= (unint64_t)a2 || *a2 != 72) {
                goto LABEL_4;
              }
            }
          }
          if (v11 != 74) {
            goto LABEL_17;
          }
          a2 = sub_188C2CC(v8, v10, (uint64_t)a3);
          if (!a2) {
            goto LABEL_212;
          }
          continue;
        case 9u:
          if (v11 != 80) {
            goto LABEL_17;
          }
          v92 |= 0x400u;
          a2 = v10 + 1;
          int v35 = *v10;
          if (((char)*v10 & 0x80000000) == 0) {
            goto LABEL_85;
          }
          int v35 = v35 + (*a2 << 7) - 128;
          if ((char)*a2 < 0)
          {
            a2 = (unsigned __int8 *)sub_188C0D0((uint64_t)v10, v35);
            *(_DWORD *)(a1 + 168) = v76;
            if (!a2) {
              goto LABEL_212;
            }
          }
          else
          {
            a2 = v10 + 2;
LABEL_85:
            *(_DWORD *)(a1 + 168) = v35;
          }
          continue;
        case 0xAu:
          if (v11 != 88) {
            goto LABEL_17;
          }
          v92 |= 0x800u;
          a2 = v10 + 1;
          int v36 = *v10;
          if (((char)*v10 & 0x80000000) == 0) {
            goto LABEL_90;
          }
          int v36 = v36 + (*a2 << 7) - 128;
          if ((char)*a2 < 0)
          {
            a2 = (unsigned __int8 *)sub_188C0D0((uint64_t)v10, v36);
            *(_DWORD *)(a1 + 172) = v77;
            if (!a2) {
              goto LABEL_212;
            }
          }
          else
          {
            a2 = v10 + 2;
LABEL_90:
            *(_DWORD *)(a1 + 172) = v36;
          }
          continue;
        case 0xBu:
          if (v11 != 98) {
            goto LABEL_17;
          }
          a2 = v10 - 1;
          while (1)
          {
            uint64_t v37 = *(_DWORD **)(a1 + 80);
            if (v37 && (uint64_t v38 = *(int *)(a1 + 72), (int)v38 < *v37))
            {
              *(_DWORD *)(a1 + 72) = v38 + 1;
              uint64_t v39 = *(void *)&v37[2 * v38 + 2];
              int v93 = 0;
              uint64_t v40 = (unsigned __int8 *)sub_188BEE0((uint64_t)a3, a2 + 1, &v93);
              if (v40) {
                goto LABEL_99;
              }
            }
            else
            {
              uint64_t v41 = sub_10F9284(*v7);
              uint64_t v39 = sub_188CDC8((uint64_t)v7, v41);
              int v93 = 0;
              uint64_t v40 = (unsigned __int8 *)sub_188BEE0((uint64_t)a3, a2 + 1, &v93);
              if (v40)
              {
LABEL_99:
                a2 = sub_10EA604(v39, v40, a3);
                ++a3[11].i32[0];
                if (a3[10].i32[0]) {
                  goto LABEL_212;
                }
                goto LABEL_100;
              }
            }
            a2 = 0;
            ++a3[11].i32[0];
            if (a3[10].i32[0]) {
              goto LABEL_212;
            }
LABEL_100:
            int v42 = a3[3].i32[1] + v93;
            a3[3].i32[1] = v42;
            int32x2_t v43 = (int32x2_t)(*(void *)&a3[1] + (v42 & (v42 >> 31)));
            *a3 = v43;
            if (!a2) {
              goto LABEL_212;
            }
            if (*(void *)&v43 <= (unint64_t)a2 || *a2 != 98) {
              goto LABEL_4;
            }
          }
        case 0xCu:
          if (v11 != 104) {
            goto LABEL_17;
          }
          v92 |= 0x100u;
          a2 = v10 + 1;
          uint64_t v44 = *v10;
          if (((char)*v10 & 0x80000000) == 0) {
            goto LABEL_108;
          }
          uint64_t v44 = v44 + (*a2 << 7) - 128;
          if ((char)*a2 < 0)
          {
            a2 = (unsigned __int8 *)sub_188C138((uint64_t)v10, v44);
            *(unsigned char *)(a1 + 163) = v78 != 0;
            if (!a2) {
              goto LABEL_212;
            }
          }
          else
          {
            a2 = v10 + 2;
LABEL_108:
            *(unsigned char *)(a1 + 163) = v44 != 0;
          }
          continue;
        case 0xDu:
          if (v11 != 112) {
            goto LABEL_17;
          }
          v92 |= 0x200u;
          a2 = v10 + 1;
          uint64_t v45 = *v10;
          if (((char)*v10 & 0x80000000) == 0) {
            goto LABEL_3;
          }
          uint64_t v45 = v45 + (*a2 << 7) - 128;
          if ((char)*a2 < 0)
          {
            a2 = (unsigned __int8 *)sub_188C138((uint64_t)v10, v45);
            *(unsigned char *)(a1 + 164) = v46 != 0;
            if (!a2) {
              goto LABEL_212;
            }
          }
          else
          {
            a2 = v10 + 2;
LABEL_3:
            *(unsigned char *)(a1 + 164) = v45 != 0;
          }
          continue;
        case 0xEu:
          if (v11 != 122) {
            goto LABEL_17;
          }
          a2 = v10 - 1;
          while (1)
          {
            int v47 = *(_DWORD **)(a1 + 104);
            if (v47 && (uint64_t v48 = *(int *)(a1 + 96), (int)v48 < *v47))
            {
              *(_DWORD *)(a1 + 96) = v48 + 1;
              uint64_t v49 = *(void *)&v47[2 * v48 + 2];
              int v93 = 0;
              unint64_t v50 = (char *)sub_188BEE0((uint64_t)a3, a2 + 1, &v93);
              if (v50) {
                goto LABEL_122;
              }
            }
            else
            {
              uint64_t v51 = sub_10F9348(*v6);
              uint64_t v49 = sub_188CDC8((uint64_t)v6, v51);
              int v93 = 0;
              unint64_t v50 = (char *)sub_188BEE0((uint64_t)a3, a2 + 1, &v93);
              if (v50)
              {
LABEL_122:
                a2 = (unsigned __int8 *)sub_10EC068(v49, v50, a3);
                ++a3[11].i32[0];
                if (a3[10].i32[0]) {
                  goto LABEL_212;
                }
                goto LABEL_123;
              }
            }
            a2 = 0;
            ++a3[11].i32[0];
            if (a3[10].i32[0]) {
              goto LABEL_212;
            }
LABEL_123:
            int v52 = a3[3].i32[1] + v93;
            a3[3].i32[1] = v52;
            int32x2_t v53 = (int32x2_t)(*(void *)&a3[1] + (v52 & (v52 >> 31)));
            *a3 = v53;
            if (!a2) {
              goto LABEL_212;
            }
            if (*(void *)&v53 <= (unint64_t)a2 || *a2 != 122) {
              goto LABEL_4;
            }
          }
        case 0xFu:
          if (v11 != 130) {
            goto LABEL_17;
          }
          a2 = v10 - 2;
          break;
        case 0x13u:
          if (v11 != 162) {
            goto LABEL_17;
          }
          *(_DWORD *)(a1 + 16) |= 1u;
          char v61 = *(void **)(a1 + 136);
          if (v61)
          {
            int v93 = 0;
            uint64_t v62 = (char *)sub_188BEE0((uint64_t)a3, v10, &v93);
            if (v62) {
              goto LABEL_143;
            }
          }
          else
          {
            int v67 = (void *)(*v90 & 0xFFFFFFFFFFFFFFFCLL);
            if (*v90) {
              int v67 = (void *)*v67;
            }
            char v61 = sub_10F943C((uint64_t)v67);
            *(void *)(a1 + 136) = v61;
            int v93 = 0;
            uint64_t v62 = (char *)sub_188BEE0((uint64_t)a3, v10, &v93);
            if (v62)
            {
LABEL_143:
              a2 = (unsigned __int8 *)sub_10ECD7C(v61, v62, a3);
              ++a3[11].i32[0];
              if (a3[10].i32[0]) {
                goto LABEL_212;
              }
              goto LABEL_167;
            }
          }
          a2 = 0;
          ++a3[11].i32[0];
          if (a3[10].i32[0]) {
            goto LABEL_212;
          }
LABEL_167:
          int v68 = a3[3].i32[1] + v93;
          a3[3].i32[1] = v68;
          *a3 = (int32x2_t)(*(void *)&a3[1] + (v68 & (v68 >> 31)));
          if (!a2) {
            goto LABEL_212;
          }
          continue;
        case 0x14u:
          if (v11 != 168) {
            goto LABEL_17;
          }
          a2 = v10 + 1;
          unint64_t v18 = *v10;
          if ((char)*v10 < 0)
          {
            int v69 = v18 + (*a2 << 7);
            unint64_t v18 = (v69 - 128);
            if ((char)*a2 < 0)
            {
              uint64_t v83 = sub_188C138((uint64_t)v10, (v69 - 128));
              if (!v83) {
                goto LABEL_212;
              }
              a2 = (unsigned __int8 *)v83;
              unint64_t v18 = v84;
              if (sub_119BBA8(v84))
              {
LABEL_148:
                *(_DWORD *)(a1 + 16) |= 0x1000u;
                *(_DWORD *)(a1 + 176) = v18;
                continue;
              }
            }
            else
            {
              a2 = v10 + 2;
              if (sub_119BBA8(v69 - 128)) {
                goto LABEL_148;
              }
            }
          }
          else if (sub_119BBA8(*v10))
          {
            goto LABEL_148;
          }
          if (*v90) {
            uint64_t v64 = (std::string *)((*v90 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            uint64_t v64 = (std::string *)sub_188DBD8(v90);
          }
          int v65 = 21;
LABEL_174:
          sub_188C020(v65, v18, v64);
          continue;
        case 0x15u:
          if (v11 != 176) {
            goto LABEL_17;
          }
          a2 = v10 + 1;
          unint64_t v18 = *v10;
          if ((char)*v10 < 0)
          {
            int v63 = v18 + (*a2 << 7);
            unint64_t v18 = (v63 - 128);
            if ((char)*a2 < 0)
            {
              uint64_t v79 = sub_188C138((uint64_t)v10, (v63 - 128));
              if (!v79) {
                goto LABEL_212;
              }
              a2 = (unsigned __int8 *)v79;
              unint64_t v18 = v80;
              if (sub_119BBA8(v80))
              {
LABEL_152:
                *(_DWORD *)(a1 + 16) |= 0x2000u;
                *(_DWORD *)(a1 + 180) = v18;
                continue;
              }
            }
            else
            {
              a2 = v10 + 2;
              if (sub_119BBA8(v63 - 128)) {
                goto LABEL_152;
              }
            }
          }
          else if (sub_119BBA8(*v10))
          {
            goto LABEL_152;
          }
          if (*v90) {
            uint64_t v64 = (std::string *)((*v90 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            uint64_t v64 = (std::string *)sub_188DBD8(v90);
          }
          int v65 = 22;
          goto LABEL_174;
        default:
          goto LABEL_17;
      }
      while (1)
      {
        uint64_t v54 = *(_DWORD **)(a1 + 128);
        if (v54 && (uint64_t v55 = *(int *)(a1 + 120), (int)v55 < *v54))
        {
          *(_DWORD *)(a1 + 120) = v55 + 1;
          uint64_t v56 = *(void *)&v54[2 * v55 + 2];
          int v93 = 0;
          unint64_t v57 = (char *)sub_188BEE0((uint64_t)a3, a2 + 2, &v93);
          if (v57) {
            goto LABEL_135;
          }
        }
        else
        {
          uint64_t v58 = sub_13D9CE0(*v91);
          uint64_t v56 = sub_188CDC8((uint64_t)v91, v58);
          int v93 = 0;
          unint64_t v57 = (char *)sub_188BEE0((uint64_t)a3, a2 + 2, &v93);
          if (v57)
          {
LABEL_135:
            a2 = (unsigned __int8 *)sub_13C2744(v56, v57, a3);
            ++a3[11].i32[0];
            if (a3[10].i32[0]) {
              goto LABEL_212;
            }
            goto LABEL_136;
          }
        }
        a2 = 0;
        ++a3[11].i32[0];
        if (a3[10].i32[0]) {
          goto LABEL_212;
        }
LABEL_136:
        int v59 = a3[3].i32[1] + v93;
        a3[3].i32[1] = v59;
        int32x2_t v60 = (int32x2_t)(*(void *)&a3[1] + (v59 & (v59 >> 31)));
        *a3 = v60;
        if (!a2) {
          goto LABEL_212;
        }
        if (*(void *)&v60 <= (unint64_t)a2 || *(_WORD *)a2 != 386) {
          goto LABEL_4;
        }
      }
    }
    unsigned int v14 = v11 + (*v10 << 7);
    unsigned int v11 = v14 - 128;
    if ((char)*v10 < 0)
    {
      uint64_t v10 = (unsigned __int8 *)sub_188C180((uint64_t)a2, v14 - 128);
      unsigned int v11 = v15;
      unsigned int v12 = (v15 >> 3) - 1;
      if (v12 <= 0x15) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v10 = a2 + 2;
      unsigned int v12 = (v11 >> 3) - 1;
      if (v12 <= 0x15) {
        goto LABEL_7;
      }
    }
LABEL_17:
    if (!v11 || (v11 & 7) == 4) {
      break;
    }
    if (*v90) {
      uint64_t v17 = (std::string *)((*v90 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else {
      uint64_t v17 = (std::string *)sub_188DBD8(v90);
    }
    a2 = sub_1885AC0(v11, v17, (char *)v10, a3);
    if (!a2)
    {
LABEL_212:
      uint64_t v10 = 0;
      goto LABEL_215;
    }
  }
  if (v10) {
    a3[10].i32[0] = v11 - 1;
  }
LABEL_215:
  int v88 = v92;
LABEL_216:
  *(_DWORD *)(a1 + 16) |= v88;
  return v10;
}

unsigned char *sub_10EE8A4(uint64_t a1, unsigned char *__dst, _DWORD *a3)
{
  uint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 2) != 0)
  {
    if (*(void *)a3 <= (unint64_t)__dst)
    {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)__dst);
      unsigned int v7 = *(_DWORD *)(a1 + 144);
      *uint64_t v4 = 8;
      v4[1] = v7;
      if (v7 <= 0x7F) {
        goto LABEL_4;
      }
    }
    else
    {
      unsigned int v7 = *(_DWORD *)(a1 + 144);
      *long long __dst = 8;
      __dst[1] = v7;
      if (v7 <= 0x7F)
      {
LABEL_4:
        v4 += 2;
        goto LABEL_8;
      }
    }
    v4[1] = v7 | 0x80;
    unsigned int v8 = v7 >> 7;
    v4[2] = v7 >> 7;
    v4 += 3;
    if (v7 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unsigned int v9 = v8 >> 14;
        v8 >>= 7;
        *v4++ = v8;
      }
      while (v9);
    }
  }
LABEL_8:
  if ((v6 & 4) == 0) {
    goto LABEL_15;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unint64_t v10 = *(int *)(a1 + 148);
    *uint64_t v4 = 16;
    v4[1] = v10;
    if (v10 <= 0x7F) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v10 = *(int *)(a1 + 148);
    *uint64_t v4 = 16;
    v4[1] = v10;
    if (v10 <= 0x7F)
    {
LABEL_11:
      v4 += 2;
      goto LABEL_15;
    }
  }
  v4[1] = v10 | 0x80;
  unint64_t v11 = v10 >> 7;
  v4[2] = v10 >> 7;
  v4 += 3;
  if (v10 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unint64_t v12 = v11 >> 14;
      v11 >>= 7;
      *v4++ = v11;
    }
    while (v12);
  }
LABEL_15:
  if ((v6 & 0x40) == 0)
  {
    if ((v6 & 0x80) == 0) {
      goto LABEL_17;
    }
LABEL_22:
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    char v14 = *(unsigned char *)(a1 + 162);
    *uint64_t v4 = 32;
    v4[1] = v14;
    v4 += 2;
    if ((v6 & 8) == 0) {
      goto LABEL_31;
    }
    goto LABEL_25;
  }
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  char v13 = *(unsigned char *)(a1 + 161);
  *uint64_t v4 = 24;
  v4[1] = v13;
  v4 += 2;
  if ((v6 & 0x80) != 0) {
    goto LABEL_22;
  }
LABEL_17:
  if ((v6 & 8) == 0) {
    goto LABEL_31;
  }
LABEL_25:
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unsigned int v15 = *(_DWORD *)(a1 + 152);
    *uint64_t v4 = 40;
    v4[1] = v15;
    if (v15 <= 0x7F) {
      goto LABEL_27;
    }
  }
  else
  {
    unsigned int v15 = *(_DWORD *)(a1 + 152);
    *uint64_t v4 = 40;
    v4[1] = v15;
    if (v15 <= 0x7F)
    {
LABEL_27:
      v4 += 2;
      goto LABEL_31;
    }
  }
  v4[1] = v15 | 0x80;
  unsigned int v16 = v15 >> 7;
  v4[2] = v15 >> 7;
  v4 += 3;
  if (v15 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unsigned int v17 = v16 >> 14;
      v16 >>= 7;
      *v4++ = v16;
    }
    while (v17);
  }
LABEL_31:
  if ((v6 & 0x10) == 0) {
    goto LABEL_38;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unsigned int v18 = *(_DWORD *)(a1 + 156);
    *uint64_t v4 = 48;
    v4[1] = v18;
    if (v18 <= 0x7F) {
      goto LABEL_34;
    }
  }
  else
  {
    unsigned int v18 = *(_DWORD *)(a1 + 156);
    *uint64_t v4 = 48;
    v4[1] = v18;
    if (v18 <= 0x7F)
    {
LABEL_34:
      v4 += 2;
      goto LABEL_38;
    }
  }
  v4[1] = v18 | 0x80;
  unsigned int v19 = v18 >> 7;
  v4[2] = v18 >> 7;
  v4 += 3;
  if (v18 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unsigned int v20 = v19 >> 14;
      v19 >>= 7;
      *v4++ = v19;
    }
    while (v20);
  }
LABEL_38:
  int v21 = *(_DWORD *)(a1 + 32);
  if (v21)
  {
    for (int i = 0; i != v21; ++i)
    {
      if (*(void *)a3 <= (unint64_t)v4) {
        uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v24 = *(void *)(*(void *)(a1 + 40) + 8 * i + 8);
      *uint64_t v4 = 58;
      unsigned int v25 = *(_DWORD *)(v24 + 20);
      v4[1] = v25;
      if (v25 > 0x7F) {
        uint64_t v23 = sub_188A9CC(v25, v4 + 1);
      }
      else {
        uint64_t v23 = v4 + 2;
      }
      uint64_t v4 = sub_10E6CE4(v24, (unint64_t)v23, a3);
    }
  }
  if ((v6 & 0x20) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    char v26 = *(unsigned char *)(a1 + 160);
    *uint64_t v4 = 64;
    v4[1] = v26;
    v4 += 2;
  }
  uint64_t v27 = *(unsigned int *)(a1 + 48);
  if ((int)v27 >= 1)
  {
    for (uint64_t j = 0; j != v27; ++j)
    {
      if (*(void *)a3 <= (unint64_t)v4)
      {
        uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
        unsigned int v29 = *(_DWORD *)(*(void *)(a1 + 56) + 4 * j);
        *uint64_t v4 = 72;
        v4[1] = v29;
        if (v29 > 0x7F)
        {
LABEL_56:
          v4[1] = v29 | 0x80;
          unsigned int v30 = v29 >> 7;
          v4[2] = v29 >> 7;
          v4 += 3;
          if (v29 >= 0x4000)
          {
            do
            {
              *(v4 - 1) |= 0x80u;
              unsigned int v31 = v30 >> 14;
              v30 >>= 7;
              *v4++ = v30;
            }
            while (v31);
          }
          continue;
        }
      }
      else
      {
        unsigned int v29 = *(_DWORD *)(*(void *)(a1 + 56) + 4 * j);
        *uint64_t v4 = 72;
        v4[1] = v29;
        if (v29 > 0x7F) {
          goto LABEL_56;
        }
      }
      v4 += 2;
    }
  }
  if ((v6 & 0x400) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      unsigned int v32 = *(_DWORD *)(a1 + 168);
      *uint64_t v4 = 80;
      v4[1] = v32;
      if (v32 <= 0x7F) {
        goto LABEL_64;
      }
    }
    else
    {
      unsigned int v32 = *(_DWORD *)(a1 + 168);
      *uint64_t v4 = 80;
      v4[1] = v32;
      if (v32 <= 0x7F)
      {
LABEL_64:
        v4 += 2;
        goto LABEL_68;
      }
    }
    v4[1] = v32 | 0x80;
    unsigned int v33 = v32 >> 7;
    v4[2] = v32 >> 7;
    v4 += 3;
    if (v32 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unsigned int v34 = v33 >> 14;
        v33 >>= 7;
        *v4++ = v33;
      }
      while (v34);
    }
  }
LABEL_68:
  if ((v6 & 0x800) == 0) {
    goto LABEL_75;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unsigned int v35 = *(_DWORD *)(a1 + 172);
    *uint64_t v4 = 88;
    v4[1] = v35;
    if (v35 <= 0x7F) {
      goto LABEL_71;
    }
  }
  else
  {
    unsigned int v35 = *(_DWORD *)(a1 + 172);
    *uint64_t v4 = 88;
    v4[1] = v35;
    if (v35 <= 0x7F)
    {
LABEL_71:
      v4 += 2;
      goto LABEL_75;
    }
  }
  v4[1] = v35 | 0x80;
  unsigned int v36 = v35 >> 7;
  v4[2] = v35 >> 7;
  v4 += 3;
  if (v35 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unsigned int v37 = v36 >> 14;
      v36 >>= 7;
      *v4++ = v36;
    }
    while (v37);
  }
LABEL_75:
  int v38 = *(_DWORD *)(a1 + 72);
  if (v38)
  {
    for (int k = 0; k != v38; ++k)
    {
      if (*(void *)a3 <= (unint64_t)v4) {
        uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v41 = *(void *)(*(void *)(a1 + 80) + 8 * k + 8);
      *uint64_t v4 = 98;
      unsigned int v42 = *(_DWORD *)(v41 + 20);
      v4[1] = v42;
      if (v42 > 0x7F) {
        uint64_t v40 = sub_188A9CC(v42, v4 + 1);
      }
      else {
        uint64_t v40 = v4 + 2;
      }
      uint64_t v4 = sub_10EAEC8(v41, v40, a3);
    }
  }
  if ((v6 & 0x100) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    char v44 = *(unsigned char *)(a1 + 163);
    *uint64_t v4 = 104;
    v4[1] = v44;
    v4 += 2;
    if ((v6 & 0x200) == 0)
    {
LABEL_85:
      int v43 = *(_DWORD *)(a1 + 96);
      if (!v43) {
        goto LABEL_100;
      }
      goto LABEL_93;
    }
  }
  else if ((v6 & 0x200) == 0)
  {
    goto LABEL_85;
  }
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  char v45 = *(unsigned char *)(a1 + 164);
  *uint64_t v4 = 112;
  v4[1] = v45;
  v4 += 2;
  int v43 = *(_DWORD *)(a1 + 96);
  if (v43)
  {
LABEL_93:
    for (int m = 0; m != v43; ++m)
    {
      if (*(void *)a3 <= (unint64_t)v4) {
        uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v48 = *(void *)(*(void *)(a1 + 104) + 8 * m + 8);
      *uint64_t v4 = 122;
      unsigned int v49 = *(_DWORD *)(v48 + 20);
      v4[1] = v49;
      if (v49 > 0x7F) {
        int v47 = sub_188A9CC(v49, v4 + 1);
      }
      else {
        int v47 = v4 + 2;
      }
      uint64_t v4 = sub_10EC264(v48, (unint64_t)v47, a3);
    }
  }
LABEL_100:
  int v50 = *(_DWORD *)(a1 + 120);
  if (v50)
  {
    for (int n = 0; n != v50; ++n)
    {
      if (*(void *)a3 <= (unint64_t)v4) {
        uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v53 = *(void *)(*(void *)(a1 + 128) + 8 * n + 8);
      *(_WORD *)uint64_t v4 = 386;
      unsigned int v54 = *(_DWORD *)(v53 + 20);
      v4[2] = v54;
      if (v54 > 0x7F) {
        int v52 = sub_188A9CC(v54, v4 + 2);
      }
      else {
        int v52 = v4 + 3;
      }
      uint64_t v4 = sub_13C29E4(v53, (unint64_t)v52, a3);
    }
  }
  if (v6)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v55 = *(void *)(a1 + 136);
    *(_WORD *)uint64_t v4 = 418;
    unsigned int v56 = *(_DWORD *)(v55 + 20);
    v4[2] = v56;
    if (v56 > 0x7F) {
      unint64_t v57 = sub_188A9CC(v56, v4 + 2);
    }
    else {
      unint64_t v57 = v4 + 3;
    }
    uint64_t v4 = sub_10ED098(v55, v57, a3);
  }
  if ((v6 & 0x1000) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      unint64_t v58 = *(int *)(a1 + 176);
      *(_WORD *)uint64_t v4 = 424;
      v4[2] = v58;
      if (v58 <= 0x7F) {
        goto LABEL_118;
      }
    }
    else
    {
      unint64_t v58 = *(int *)(a1 + 176);
      *(_WORD *)uint64_t v4 = 424;
      v4[2] = v58;
      if (v58 <= 0x7F)
      {
LABEL_118:
        v4 += 3;
        goto LABEL_122;
      }
    }
    v4[2] = v58 | 0x80;
    unint64_t v59 = v58 >> 7;
    v4[3] = v58 >> 7;
    v4 += 4;
    if (v58 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unint64_t v60 = v59 >> 14;
        v59 >>= 7;
        *v4++ = v59;
      }
      while (v60);
    }
  }
LABEL_122:
  if ((v6 & 0x2000) == 0) {
    goto LABEL_129;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unint64_t v61 = *(int *)(a1 + 180);
    *(_WORD *)uint64_t v4 = 432;
    v4[2] = v61;
    if (v61 <= 0x7F) {
      goto LABEL_125;
    }
  }
  else
  {
    unint64_t v61 = *(int *)(a1 + 180);
    *(_WORD *)uint64_t v4 = 432;
    v4[2] = v61;
    if (v61 <= 0x7F)
    {
LABEL_125:
      v4 += 3;
      goto LABEL_129;
    }
  }
  v4[2] = v61 | 0x80;
  unint64_t v62 = v61 >> 7;
  v4[3] = v61 >> 7;
  v4 += 4;
  if (v61 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unint64_t v63 = v62 >> 14;
      v62 >>= 7;
      *v4++ = v62;
    }
    while (v63);
  }
LABEL_129:
  uint64_t v64 = *(void *)(a1 + 8);
  if ((v64 & 1) == 0) {
    return v4;
  }
  unint64_t v66 = v64 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v66 + 31) < 0)
  {
    int v67 = *(void **)(v66 + 8);
    uint64_t v68 = *(void *)(v66 + 16);
  }
  else
  {
    int v67 = (void *)(v66 + 8);
    LODWORD(v68) = *(unsigned __int8 *)(v66 + 31);
  }
  uint64_t v69 = (int)v68;
  if (*(void *)a3 - (void)v4 >= (int)v68)
  {
    memcpy(v4, v67, (int)v68);
    v4 += v69;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v67, v68, v4);
}

uint64_t sub_10EF244(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = (uint64_t *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = sub_10E70D8(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v8 = sub_188D4F0((unsigned int *)(a1 + 48));
  uint64_t v9 = *(int *)(a1 + 72);
  uint64_t v10 = v8 + v2 + *(unsigned int *)(a1 + 48) + v9;
  uint64_t v11 = *(void *)(a1 + 80);
  if (v11) {
    unint64_t v12 = (uint64_t *)(v11 + 8);
  }
  else {
    unint64_t v12 = 0;
  }
  if (v9)
  {
    uint64_t v13 = 8 * v9;
    do
    {
      uint64_t v14 = *v12++;
      uint64_t v15 = sub_10EB5C8(v14);
      v10 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6);
      v13 -= 8;
    }
    while (v13);
  }
  uint64_t v16 = *(int *)(a1 + 96);
  uint64_t v17 = v10 + v16;
  uint64_t v18 = *(void *)(a1 + 104);
  if (v18) {
    unsigned int v19 = (uint64_t *)(v18 + 8);
  }
  else {
    unsigned int v19 = 0;
  }
  if (v16)
  {
    uint64_t v20 = 8 * v16;
    do
    {
      uint64_t v21 = *v19;
      int v22 = *(_DWORD *)(*v19 + 16);
      if ((v22 & 3) != 0)
      {
        if (v22) {
          uint64_t v23 = 9;
        }
        else {
          uint64_t v23 = 0;
        }
        if ((v22 & 2) != 0) {
          v23 += ((9 * (__clz(*(_DWORD *)(v21 + 32) | 1) ^ 0x1F) + 73) >> 6) + 1;
        }
      }
      else
      {
        uint64_t v23 = 0;
      }
      uint64_t v24 = *(void *)(v21 + 8);
      if (v24)
      {
        unint64_t v25 = v24 & 0xFFFFFFFFFFFFFFFCLL;
        if (*(char *)(v25 + 31) < 0) {
          uint64_t v26 = *(void *)(v25 + 16);
        }
        else {
          uint64_t v26 = *(unsigned __int8 *)(v25 + 31);
        }
        v23 += v26;
      }
      *(_DWORD *)(v21 + 20) = v23;
      v17 += v23 + ((9 * (__clz(v23 | 1) ^ 0x1F) + 73) >> 6);
      ++v19;
      v20 -= 8;
    }
    while (v20);
  }
  uint64_t v27 = *(int *)(a1 + 120);
  uint64_t v28 = v17 + 2 * v27;
  uint64_t v29 = *(void *)(a1 + 128);
  if (v29) {
    unsigned int v30 = (uint64_t *)(v29 + 8);
  }
  else {
    unsigned int v30 = 0;
  }
  if (v27)
  {
    uint64_t v31 = 8 * v27;
    do
    {
      uint64_t v32 = *v30++;
      uint64_t v33 = sub_13C2B7C(v32);
      v28 += v33 + ((9 * (__clz(v33 | 1) ^ 0x1F) + 73) >> 6);
      v31 -= 8;
    }
    while (v31);
  }
  int v34 = *(_DWORD *)(a1 + 16);
  if ((_BYTE)v34)
  {
    if (v34)
    {
      uint64_t v42 = sub_10ED394(*(void *)(a1 + 136));
      v28 += v42 + ((9 * (__clz(v42 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if ((v34 & 2) == 0)
      {
LABEL_43:
        if ((v34 & 4) == 0) {
          goto LABEL_44;
        }
        goto LABEL_72;
      }
    }
    else if ((v34 & 2) == 0)
    {
      goto LABEL_43;
    }
    v28 += ((9 * (__clz(*(_DWORD *)(a1 + 144) | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v34 & 4) == 0)
    {
LABEL_44:
      if ((v34 & 8) == 0) {
        goto LABEL_45;
      }
      goto LABEL_76;
    }
LABEL_72:
    int v43 = *(_DWORD *)(a1 + 148);
    uint64_t v44 = ((9 * (__clz(v43 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if (v43 >= 0) {
      uint64_t v45 = v44;
    }
    else {
      uint64_t v45 = 11;
    }
    v28 += v45;
    if ((v34 & 8) == 0)
    {
LABEL_45:
      if ((v34 & 0x10) == 0)
      {
LABEL_47:
        uint64_t v35 = v28 + 2;
        if ((v34 & 0x20) == 0) {
          uint64_t v35 = v28;
        }
        if ((v34 & 0x40) != 0) {
          v35 += 2;
        }
        if ((v34 & 0x80) != 0) {
          uint64_t v28 = v35 + 2;
        }
        else {
          uint64_t v28 = v35;
        }
        goto LABEL_54;
      }
LABEL_46:
      v28 += ((9 * (__clz(*(_DWORD *)(a1 + 156) | 1) ^ 0x1F) + 73) >> 6) + 1;
      goto LABEL_47;
    }
LABEL_76:
    v28 += ((9 * (__clz(*(_DWORD *)(a1 + 152) | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v34 & 0x10) == 0) {
      goto LABEL_47;
    }
    goto LABEL_46;
  }
LABEL_54:
  if ((v34 & 0x3F00) == 0) {
    goto LABEL_68;
  }
  uint64_t v36 = v28 + 2;
  if ((v34 & 0x100) == 0) {
    uint64_t v36 = v28;
  }
  if ((v34 & 0x200) != 0) {
    uint64_t v28 = v36 + 2;
  }
  else {
    uint64_t v28 = v36;
  }
  if ((v34 & 0x400) != 0)
  {
    v28 += ((9 * (__clz(*(_DWORD *)(a1 + 168) | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v34 & 0x800) == 0)
    {
LABEL_62:
      if ((v34 & 0x1000) == 0) {
        goto LABEL_63;
      }
LABEL_80:
      int v46 = *(_DWORD *)(a1 + 176);
      uint64_t v47 = ((9 * (__clz(v46 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if (v46 >= 0) {
        uint64_t v48 = v47;
      }
      else {
        uint64_t v48 = 12;
      }
      v28 += v48;
      if ((v34 & 0x2000) == 0) {
        goto LABEL_68;
      }
      goto LABEL_64;
    }
  }
  else if ((v34 & 0x800) == 0)
  {
    goto LABEL_62;
  }
  v28 += ((9 * (__clz(*(_DWORD *)(a1 + 172) | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v34 & 0x1000) != 0) {
    goto LABEL_80;
  }
LABEL_63:
  if ((v34 & 0x2000) != 0)
  {
LABEL_64:
    int v37 = *(_DWORD *)(a1 + 180);
    uint64_t v38 = ((9 * (__clz(v37 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v37 >= 0) {
      uint64_t v39 = v38;
    }
    else {
      uint64_t v39 = 12;
    }
    v28 += v39;
  }
LABEL_68:
  uint64_t v40 = *(void *)(a1 + 8);
  if (v40)
  {
    unint64_t v49 = v40 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v49 + 31) < 0) {
      uint64_t v50 = *(void *)(v49 + 16);
    }
    else {
      uint64_t v50 = *(unsigned __int8 *)(v49 + 31);
    }
    uint64_t v51 = v50 + v28;
    *(_DWORD *)(a1 + 20) = v51;
    return v51;
  }
  else
  {
    *(_DWORD *)(a1 + 20) = v28;
    return v28;
  }
}

void sub_10EF68C(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 40) + 8);
    uint64_t v6 = (uint64_t *)sub_188CCE4(a1 + 24, *(_DWORD *)(a2 + 32));
    sub_10FADE0((uint64_t *)(a1 + 24), v6, v5, v4, **(_DWORD **)(a1 + 40) - *(_DWORD *)(a1 + 32));
    int v7 = *(_DWORD *)(a1 + 32) + v4;
    *(_DWORD *)(a1 + 32) = v7;
    uint64_t v8 = *(int **)(a1 + 40);
    if (*v8 < v7) {
      *uint64_t v8 = v7;
    }
  }
  int v9 = *(_DWORD *)(a2 + 48);
  if (v9)
  {
    uint64_t v10 = *(int *)(a1 + 48);
    sub_188C80C((unsigned int *)(a1 + 48), v10 + v9);
    uint64_t v11 = *(void *)(a1 + 56);
    *(_DWORD *)(a1 + 48) += *(_DWORD *)(a2 + 48);
    memcpy((void *)(v11 + 4 * v10), *(const void **)(a2 + 56), 4 * *(int *)(a2 + 48));
  }
  int v12 = *(_DWORD *)(a2 + 72);
  if (v12)
  {
    uint64_t v13 = (uint64_t *)(*(void *)(a2 + 80) + 8);
    uint64_t v14 = (uint64_t *)sub_188CCE4(a1 + 64, *(_DWORD *)(a2 + 72));
    sub_10FAE6C((uint64_t *)(a1 + 64), v14, v13, v12, **(_DWORD **)(a1 + 80) - *(_DWORD *)(a1 + 72));
    int v15 = *(_DWORD *)(a1 + 72) + v12;
    *(_DWORD *)(a1 + 72) = v15;
    uint64_t v16 = *(int **)(a1 + 80);
    if (*v16 < v15) {
      *uint64_t v16 = v15;
    }
  }
  int v17 = *(_DWORD *)(a2 + 96);
  if (v17)
  {
    uint64_t v18 = (std::string **)(*(void *)(a2 + 104) + 8);
    unsigned int v19 = (uint64_t *)sub_188CCE4(a1 + 88, *(_DWORD *)(a2 + 96));
    sub_10FAEF8((uint64_t *)(a1 + 88), v19, v18, v17, **(_DWORD **)(a1 + 104) - *(_DWORD *)(a1 + 96));
    int v20 = *(_DWORD *)(a1 + 96) + v17;
    *(_DWORD *)(a1 + 96) = v20;
    uint64_t v21 = *(int **)(a1 + 104);
    if (*v21 < v20) {
      int *v21 = v20;
    }
  }
  int v22 = *(_DWORD *)(a2 + 120);
  if (v22)
  {
    uint64_t v23 = (uint64_t *)(*(void *)(a2 + 128) + 8);
    uint64_t v24 = (std::string **)sub_188CCE4(a1 + 112, *(_DWORD *)(a2 + 120));
    sub_10FAFC0((uint64_t *)(a1 + 112), v24, v23, v22, **(_DWORD **)(a1 + 128) - *(_DWORD *)(a1 + 120));
    int v25 = *(_DWORD *)(a1 + 120) + v22;
    *(_DWORD *)(a1 + 120) = v25;
    uint64_t v26 = *(int **)(a1 + 128);
    if (*v26 < v25) {
      *uint64_t v26 = v25;
    }
  }
  int v27 = *(_DWORD *)(a2 + 16);
  if ((_BYTE)v27)
  {
    if ((v27 & 1) == 0) {
      goto LABEL_32;
    }
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v28 = *(void **)(a1 + 136);
    if (!v28)
    {
      uint64_t v29 = *(void *)(a1 + 8);
      unsigned int v30 = (void *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
      if (v29) {
        unsigned int v30 = (void *)*v30;
      }
      uint64_t v28 = sub_10F943C((uint64_t)v30);
      *(void *)(a1 + 136) = v28;
    }
    uint64_t v31 = *(uint64_t (****)())(a2 + 136);
    if (!v31) {
      uint64_t v31 = &off_24F7940;
    }
    int v32 = *((_DWORD *)v31 + 4);
    if ((v32 & 0xF) == 0)
    {
LABEL_30:
      unint64_t v33 = (unint64_t)v31[1];
      if (v33) {
        sub_188B4F8(v28 + 1, (v33 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
LABEL_32:
      if ((v27 & 2) != 0)
      {
        *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
        if ((v27 & 4) == 0)
        {
LABEL_34:
          if ((v27 & 8) == 0) {
            goto LABEL_35;
          }
          goto LABEL_56;
        }
      }
      else if ((v27 & 4) == 0)
      {
        goto LABEL_34;
      }
      *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
      if ((v27 & 8) == 0)
      {
LABEL_35:
        if ((v27 & 0x10) == 0) {
          goto LABEL_36;
        }
        goto LABEL_57;
      }
LABEL_56:
      *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
      if ((v27 & 0x10) == 0)
      {
LABEL_36:
        if ((v27 & 0x20) == 0) {
          goto LABEL_37;
        }
        goto LABEL_58;
      }
LABEL_57:
      *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
      if ((v27 & 0x20) == 0)
      {
LABEL_37:
        if ((v27 & 0x40) == 0) {
          goto LABEL_38;
        }
        goto LABEL_59;
      }
LABEL_58:
      *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
      if ((v27 & 0x40) == 0)
      {
LABEL_38:
        if ((v27 & 0x80) == 0)
        {
LABEL_40:
          *(_DWORD *)(a1 + 16) |= v27;
          goto LABEL_41;
        }
LABEL_39:
        *(unsigned char *)(a1 + 162) = *(unsigned char *)(a2 + 162);
        goto LABEL_40;
      }
LABEL_59:
      *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
      if ((v27 & 0x80) == 0) {
        goto LABEL_40;
      }
      goto LABEL_39;
    }
    if (v32)
    {
      *((_DWORD *)v28 + 6) = *((_DWORD *)v31 + 6);
      if ((v32 & 2) == 0)
      {
LABEL_26:
        if ((v32 & 4) == 0) {
          goto LABEL_27;
        }
        goto LABEL_69;
      }
    }
    else if ((v32 & 2) == 0)
    {
      goto LABEL_26;
    }
    *((_DWORD *)v28 + 7) = *((_DWORD *)v31 + 7);
    if ((v32 & 4) == 0)
    {
LABEL_27:
      if ((v32 & 8) == 0)
      {
LABEL_29:
        *((_DWORD *)v28 + 4) |= v32;
        goto LABEL_30;
      }
LABEL_28:
      *((_DWORD *)v28 + 9) = *((_DWORD *)v31 + 9);
      goto LABEL_29;
    }
LABEL_69:
    *((_DWORD *)v28 + 8) = *((_DWORD *)v31 + 8);
    if ((v32 & 8) == 0) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
LABEL_41:
  if ((v27 & 0x3F00) == 0) {
    goto LABEL_50;
  }
  if ((v27 & 0x100) != 0)
  {
    *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
    if ((v27 & 0x200) == 0)
    {
LABEL_44:
      if ((v27 & 0x400) == 0) {
        goto LABEL_45;
      }
      goto LABEL_63;
    }
  }
  else if ((v27 & 0x200) == 0)
  {
    goto LABEL_44;
  }
  *(unsigned char *)(a1 + 164) = *(unsigned char *)(a2 + 164);
  if ((v27 & 0x400) == 0)
  {
LABEL_45:
    if ((v27 & 0x800) == 0) {
      goto LABEL_46;
    }
    goto LABEL_64;
  }
LABEL_63:
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  if ((v27 & 0x800) == 0)
  {
LABEL_46:
    if ((v27 & 0x1000) == 0) {
      goto LABEL_47;
    }
LABEL_65:
    *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
    if ((v27 & 0x2000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_48;
  }
LABEL_64:
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  if ((v27 & 0x1000) != 0) {
    goto LABEL_65;
  }
LABEL_47:
  if ((v27 & 0x2000) != 0) {
LABEL_48:
  }
    *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
LABEL_49:
  *(_DWORD *)(a1 + 16) |= v27;
LABEL_50:
  uint64_t v34 = *(void *)(a2 + 8);
  if (v34)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v34 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

uint64_t sub_10EFA80(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 32);
  if ((int)v2 < 1)
  {
LABEL_7:
    uint64_t v6 = *(unsigned int *)(a1 + 72);
    if ((int)v6 >= 1)
    {
      while (1)
      {
        uint64_t v8 = *(void *)(*(void *)(a1 + 80) + 8 * (v6 - 1) + 8);
        if ((*(unsigned char *)(v8 + 16) & 2) != 0)
        {
          uint64_t v9 = *(void *)(v8 + 120);
          uint64_t v10 = *(unsigned int *)(v9 + 24);
          if ((int)v10 >= 1) {
            break;
          }
        }
LABEL_9:
        if (v6-- <= 1) {
          return 1;
        }
      }
      uint64_t v11 = v10 + 1;
      while (1)
      {
        uint64_t v12 = *(void *)(*(void *)(v9 + 32) + 8 * (v11 - 2) + 8);
        if (*(unsigned char *)(v12 + 16))
        {
          uint64_t result = sub_15B06D8(*(void *)(v12 + 24));
          if (!result) {
            break;
          }
        }
        if ((unint64_t)--v11 <= 1) {
          goto LABEL_9;
        }
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    uint64_t v3 = v2 - 1;
    while (1)
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8 * v3 + 8);
      if (*(unsigned char *)(v4 + 16))
      {
        uint64_t result = sub_15B0F18(*(void *)(v4 + 24));
        if (!result) {
          break;
        }
      }
      if ((unint64_t)--v3 >= 0xFFFFFFFFFFFFFFFELL) {
        goto LABEL_7;
      }
    }
  }
  return result;
}

double sub_10EFB84@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_20B91A0;
  strcpy(v2, "geo3.SessionState.RouteData");
  return *(double *)"nState.RouteData";
}

uint64_t sub_10EFBD8(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_8;
    }
  }
  else if (v4)
  {
    goto LABEL_8;
  }
  if ((uint64_t (***)())a1 != &off_24F7A20)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5)
    {
      sub_15B3DFC(v5);
      operator delete();
    }
  }
  if (v2)
  {
    sub_10E4F74(v3);
    uint64_t v2 = *v3;
  }
LABEL_8:
  *(void *)a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    uint64_t v6 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v6)
      {
LABEL_11:
        sub_1881618();
        operator delete();
      }
    }
    else if (v6)
    {
      goto LABEL_11;
    }
  }
  return a1;
}

void sub_10EFCC0(uint64_t a1)
{
  sub_10EFBD8(a1);

  operator delete();
}

uint64_t sub_10EFCF8(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if (v2) {
    uint64_t result = sub_15B043C(*(void *)(result + 24));
  }
  if ((v2 & 0x3E) != 0)
  {
    *(void *)(v1 + 32) = 0;
    *(void *)(v1 + 40) = 0;
    *(unsigned char *)(v1 + 48) = 0;
  }
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = v1 + 8;
  *(_DWORD *)(v3 + 8) = 0;
  if (v4)
  {
    return sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

char *sub_10EFD64(uint64_t a1, char *a2, int32x2_t *a3)
{
  int v6 = 0;
  int v7 = (uint64_t *)(a1 + 8);
  while ((unint64_t)a2 < *(void *)a3)
  {
LABEL_5:
    uint64_t v8 = a2 + 1;
    unsigned int v9 = *a2;
    if (*a2 < 0)
    {
      unsigned int v13 = v9 + (*v8 << 7);
      unsigned int v9 = v13 - 128;
      if (*v8 < 0)
      {
        uint64_t v8 = (char *)sub_188C180((uint64_t)a2, v13 - 128);
        unsigned int v9 = v25;
        unsigned int v10 = (v25 >> 3) - 1;
        if (v10 <= 5) {
          goto LABEL_7;
        }
      }
      else
      {
        uint64_t v8 = a2 + 2;
        unsigned int v10 = (v9 >> 3) - 1;
        if (v10 <= 5) {
          goto LABEL_7;
        }
      }
LABEL_42:
      if (v9) {
        BOOL v26 = (v9 & 7) == 4;
      }
      else {
        BOOL v26 = 1;
      }
      if (v26)
      {
        if (v8) {
          a3[10].i32[0] = v9 - 1;
        }
        goto LABEL_70;
      }
      if (*v7)
      {
        a2 = (char *)sub_1885AC0(v9, (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8), v8, a3);
        if (!a2) {
          goto LABEL_71;
        }
      }
      else
      {
        uint64_t v35 = (std::string *)sub_188DBD8(v7);
        a2 = (char *)sub_1885AC0(v9, v35, v8, a3);
        if (!a2)
        {
LABEL_71:
          uint64_t v8 = 0;
          goto LABEL_70;
        }
      }
    }
    else
    {
      unsigned int v10 = (v9 >> 3) - 1;
LABEL_7:
      switch(v10)
      {
        case 0u:
          if (v9 != 8) {
            goto LABEL_42;
          }
          v6 |= 2u;
          a2 = v8 + 1;
          int v11 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_12;
          }
          int v12 = *a2;
          int v11 = v11 + (v12 << 7) - 128;
          if (v12 < 0)
          {
            a2 = (char *)sub_188C0D0((uint64_t)v8, v11);
            *(_DWORD *)(a1 + 32) = v29;
            if (!a2) {
              goto LABEL_71;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_12:
            *(_DWORD *)(a1 + 32) = v11;
          }
          continue;
        case 1u:
          if (v9 != 16) {
            goto LABEL_42;
          }
          v6 |= 4u;
          a2 = v8 + 1;
          int v14 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_20;
          }
          int v15 = *a2;
          int v14 = v14 + (v15 << 7) - 128;
          if (v15 < 0)
          {
            a2 = (char *)sub_188C0D0((uint64_t)v8, v14);
            *(_DWORD *)(a1 + 36) = v30;
            if (!a2) {
              goto LABEL_71;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_20:
            *(_DWORD *)(a1 + 36) = v14;
          }
          continue;
        case 2u:
          if (v9 != 24) {
            goto LABEL_42;
          }
          v6 |= 8u;
          a2 = v8 + 1;
          int v16 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_25;
          }
          int v17 = *a2;
          int v16 = v16 + (v17 << 7) - 128;
          if (v17 < 0)
          {
            a2 = (char *)sub_188C0D0((uint64_t)v8, v16);
            *(_DWORD *)(a1 + 40) = v31;
            if (!a2) {
              goto LABEL_71;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_25:
            *(_DWORD *)(a1 + 40) = v16;
          }
          continue;
        case 3u:
          if (v9 != 32) {
            goto LABEL_42;
          }
          v6 |= 0x10u;
          a2 = v8 + 1;
          int v18 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_30;
          }
          int v19 = *a2;
          int v18 = v18 + (v19 << 7) - 128;
          if (v19 < 0)
          {
            a2 = (char *)sub_188C0D0((uint64_t)v8, v18);
            *(_DWORD *)(a1 + 44) = v32;
            if (!a2) {
              goto LABEL_71;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_30:
            *(_DWORD *)(a1 + 44) = v18;
          }
          break;
        case 4u:
          if (v9 != 40) {
            goto LABEL_42;
          }
          v6 |= 0x20u;
          a2 = v8 + 1;
          uint64_t v20 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_3;
          }
          int v21 = *a2;
          uint64_t v20 = v20 + (v21 << 7) - 128;
          if (v21 < 0)
          {
            a2 = (char *)sub_188C138((uint64_t)v8, v20);
            *(unsigned char *)(a1 + 48) = v22 != 0;
            if (!a2) {
              goto LABEL_71;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_3:
            *(unsigned char *)(a1 + 48) = v20 != 0;
          }
          continue;
        case 5u:
          if (v9 != 50) {
            goto LABEL_42;
          }
          *(_DWORD *)(a1 + 16) |= 1u;
          uint64_t v23 = *(void *)(a1 + 24);
          if (v23)
          {
            int v37 = 0;
            uint64_t v24 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)v8, &v37);
            if (v24) {
              goto LABEL_39;
            }
          }
          else
          {
            int v27 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
            if (*v7) {
              int v27 = (void *)*v27;
            }
            uint64_t v23 = sub_15C1CB4((uint64_t)v27);
            *(void *)(a1 + 24) = v23;
            int v37 = 0;
            uint64_t v24 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)v8, &v37);
            if (v24)
            {
LABEL_39:
              a2 = sub_15B3E38(v23, v24, a3);
              ++a3[11].i32[0];
              if (a3[10].i32[0]) {
                goto LABEL_71;
              }
              goto LABEL_53;
            }
          }
          a2 = 0;
          ++a3[11].i32[0];
          if (a3[10].i32[0]) {
            goto LABEL_71;
          }
LABEL_53:
          int v28 = a3[3].i32[1] + v37;
          a3[3].i32[1] = v28;
          *a3 = (int32x2_t)(*(void *)&a3[1] + (v28 & (v28 >> 31)));
          if (!a2) {
            goto LABEL_71;
          }
          continue;
        default:
          goto LABEL_42;
      }
    }
  }
  int v33 = a2 - a3[1].i32[0];
  if (a3[3].i32[1] != v33)
  {
    a2 = sub_188BB90((uint64_t)a3, v33, a3[11].i32[1]);
    if (v34) {
      goto LABEL_76;
    }
    goto LABEL_5;
  }
  if (v33 < 1)
  {
LABEL_76:
    uint64_t v8 = a2;
    goto LABEL_70;
  }
  if (a3[2]) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = 0;
  }
LABEL_70:
  *(_DWORD *)(a1 + 16) |= v6;
  return v8;
}

char *sub_10F01D8(uint64_t a1, char *__dst, _DWORD *a3)
{
  char v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 2) != 0)
  {
    if (*(void *)a3 <= (unint64_t)__dst)
    {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      unsigned int v7 = *(_DWORD *)(a1 + 32);
      *char v4 = 8;
      v4[1] = v7;
      if (v7 <= 0x7F) {
        goto LABEL_4;
      }
    }
    else
    {
      unsigned int v7 = *(_DWORD *)(a1 + 32);
      *long long __dst = 8;
      __dst[1] = v7;
      if (v7 <= 0x7F)
      {
LABEL_4:
        v4 += 2;
        goto LABEL_8;
      }
    }
    v4[1] = v7 | 0x80;
    unsigned int v8 = v7 >> 7;
    v4[2] = v7 >> 7;
    v4 += 3;
    if (v7 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unsigned int v9 = v8 >> 14;
        v8 >>= 7;
        *v4++ = v8;
      }
      while (v9);
    }
  }
LABEL_8:
  if ((v6 & 4) == 0) {
    goto LABEL_15;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    unsigned int v10 = *(_DWORD *)(a1 + 36);
    *char v4 = 16;
    v4[1] = v10;
    if (v10 <= 0x7F) {
      goto LABEL_11;
    }
  }
  else
  {
    unsigned int v10 = *(_DWORD *)(a1 + 36);
    *char v4 = 16;
    v4[1] = v10;
    if (v10 <= 0x7F)
    {
LABEL_11:
      v4 += 2;
      goto LABEL_15;
    }
  }
  v4[1] = v10 | 0x80;
  unsigned int v11 = v10 >> 7;
  v4[2] = v10 >> 7;
  v4 += 3;
  if (v10 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unsigned int v12 = v11 >> 14;
      v11 >>= 7;
      *v4++ = v11;
    }
    while (v12);
  }
LABEL_15:
  if ((v6 & 8) == 0) {
    goto LABEL_22;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    unsigned int v13 = *(_DWORD *)(a1 + 40);
    *char v4 = 24;
    v4[1] = v13;
    if (v13 <= 0x7F) {
      goto LABEL_18;
    }
  }
  else
  {
    unsigned int v13 = *(_DWORD *)(a1 + 40);
    *char v4 = 24;
    v4[1] = v13;
    if (v13 <= 0x7F)
    {
LABEL_18:
      v4 += 2;
      goto LABEL_22;
    }
  }
  v4[1] = v13 | 0x80;
  unsigned int v14 = v13 >> 7;
  v4[2] = v13 >> 7;
  v4 += 3;
  if (v13 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unsigned int v15 = v14 >> 14;
      v14 >>= 7;
      *v4++ = v14;
    }
    while (v15);
  }
LABEL_22:
  if ((v6 & 0x10) == 0) {
    goto LABEL_29;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    unsigned int v16 = *(_DWORD *)(a1 + 44);
    *char v4 = 32;
    v4[1] = v16;
    if (v16 <= 0x7F) {
      goto LABEL_25;
    }
  }
  else
  {
    unsigned int v16 = *(_DWORD *)(a1 + 44);
    *char v4 = 32;
    v4[1] = v16;
    if (v16 <= 0x7F)
    {
LABEL_25:
      v4 += 2;
      goto LABEL_29;
    }
  }
  v4[1] = v16 | 0x80;
  unsigned int v17 = v16 >> 7;
  v4[2] = v16 >> 7;
  v4 += 3;
  if (v16 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unsigned int v18 = v17 >> 14;
      v17 >>= 7;
      *v4++ = v17;
    }
    while (v18);
  }
LABEL_29:
  if ((v6 & 0x20) == 0)
  {
    if ((v6 & 1) == 0) {
      goto LABEL_31;
    }
LABEL_36:
    if (*(void *)a3 <= (unint64_t)v4) {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v22 = *(void *)(a1 + 24);
    *char v4 = 50;
    unsigned int v23 = *(_DWORD *)(v22 + 44);
    v4[1] = v23;
    if (v23 > 0x7F) {
      uint64_t v24 = sub_188A9CC(v23, v4 + 1);
    }
    else {
      uint64_t v24 = v4 + 2;
    }
    char v4 = sub_15B43E4(v22, v24, a3);
    uint64_t v19 = *(void *)(a1 + 8);
    if ((v19 & 1) == 0) {
      return v4;
    }
    goto LABEL_42;
  }
  if (*(void *)a3 <= (unint64_t)v4) {
    char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  char v21 = *(unsigned char *)(a1 + 48);
  *char v4 = 40;
  v4[1] = v21;
  v4 += 2;
  if (v6) {
    goto LABEL_36;
  }
LABEL_31:
  uint64_t v19 = *(void *)(a1 + 8);
  if ((v19 & 1) == 0) {
    return v4;
  }
LABEL_42:
  unint64_t v25 = v19 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v25 + 31) < 0)
  {
    BOOL v26 = *(char **)(v25 + 8);
    uint64_t v27 = *(void *)(v25 + 16);
  }
  else
  {
    BOOL v26 = (char *)(v25 + 8);
    LODWORD(v27) = *(unsigned __int8 *)(v25 + 31);
  }
  uint64_t v28 = (int)v27;
  if (*(void *)a3 - (void)v4 < (int)v27)
  {
    return (char *)sub_188A528(a3, v26, v27, v4);
  }
  else
  {
    memcpy(v4, v26, (int)v27);
    return &v4[v28];
  }
}

uint64_t sub_10F057C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 0x3F) == 0)
  {
    uint64_t result = 0;
    goto LABEL_15;
  }
  if (v2)
  {
    uint64_t v5 = sub_15B4924(*(void *)(a1 + 24));
    uint64_t v3 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v3 = 0;
  if ((v2 & 2) != 0) {
LABEL_7:
  }
    v3 += ((9 * (__clz(*(_DWORD *)(a1 + 32) | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  if ((v2 & 4) != 0)
  {
    v3 += ((9 * (__clz(*(_DWORD *)(a1 + 36) | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 8) == 0)
    {
LABEL_10:
      if ((v2 & 0x10) == 0) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_10;
  }
  v3 += ((9 * (__clz(*(_DWORD *)(a1 + 40) | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x10) != 0) {
LABEL_11:
  }
    v3 += ((9 * (__clz(*(_DWORD *)(a1 + 44) | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_12:
  if ((v2 & 0x20) != 0) {
    uint64_t result = v3 + 2;
  }
  else {
    uint64_t result = v3;
  }
LABEL_15:
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v7 + 31) < 0) {
      result += *(void *)(v7 + 16);
    }
    else {
      result += *(unsigned __int8 *)(v7 + 31);
    }
    *(_DWORD *)(a1 + 20) = result;
  }
  else
  {
    *(_DWORD *)(a1 + 20) = result;
  }
  return result;
}

void sub_10F06EC(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 0x3F) != 0)
  {
    if (v4)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v6 = *(void *)(a1 + 24);
      if (!v6)
      {
        uint64_t v7 = *(void *)(a1 + 8);
        unsigned int v8 = (void *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
        if (v7) {
          unsigned int v8 = (void *)*v8;
        }
        uint64_t v6 = sub_15C1CB4((uint64_t)v8);
        *(void *)(a1 + 24) = v6;
      }
      if (*(void *)(a2 + 24)) {
        unsigned int v9 = *(uint64_t (****)())(a2 + 24);
      }
      else {
        unsigned int v9 = &off_253F2E8;
      }
      sub_15B04F0(v6, (uint64_t)v9);
      if ((v4 & 2) == 0)
      {
LABEL_4:
        if ((v4 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_23;
      }
    }
    else if ((v4 & 2) == 0)
    {
      goto LABEL_4;
    }
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_5:
      if ((v4 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_24;
    }
LABEL_23:
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
    if ((v4 & 8) == 0)
    {
LABEL_6:
      if ((v4 & 0x10) == 0) {
        goto LABEL_7;
      }
      goto LABEL_25;
    }
LABEL_24:
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    if ((v4 & 0x10) == 0)
    {
LABEL_7:
      if ((v4 & 0x20) == 0)
      {
LABEL_9:
        *(_DWORD *)(a1 + 16) |= v4;
        goto LABEL_10;
      }
LABEL_8:
      *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
      goto LABEL_9;
    }
LABEL_25:
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
    if ((v4 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_10:
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

uint64_t sub_10F0804(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 1) == 0) {
    return 1;
  }
  uint64_t result = sub_15B06D8(*(void *)(a1 + 24));
  if (result) {
    return 1;
  }
  return result;
}

char *sub_10F0830@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_20B93A0;
  strcpy(result, "geo3.SessionState.StateOfChargeData");
  return result;
}

void *sub_10F0888(void *a1)
{
  uint64_t v4 = a1[1];
  int v2 = a1 + 1;
  uint64_t v3 = v4;
  if ((v4 & 1) != 0 && !*(void *)(v3 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(v2);
  }
  uint64_t v5 = (uint64_t *)a1[5];
  if (v5 && !a1[3])
  {
    unsigned int v8 = v5 + 1;
    uint64_t v9 = *(unsigned int *)v5;
    if ((int)v9 >= 1)
    {
      do
      {
        if (*v8)
        {
          sub_10EFBD8(*v8);
          operator delete();
        }
        ++v8;
        --v9;
      }
      while (v9);
      uint64_t v5 = (uint64_t *)a1[5];
    }
    operator delete(v5);
    a1[5] = 0;
    *a1 = off_24E6998;
    uint64_t v6 = a1[1];
    if ((v6 & 2) == 0) {
      return a1;
    }
  }
  else
  {
    a1[5] = 0;
    *a1 = off_24E6998;
    uint64_t v6 = a1[1];
    if ((v6 & 2) == 0) {
      return a1;
    }
  }
  uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
  if (v6)
  {
    if (*v7)
    {
LABEL_7:
      sub_1881618();
      operator delete();
    }
  }
  else if (v7)
  {
    goto LABEL_7;
  }
  return a1;
}

void sub_10F09C8(void *a1)
{
  sub_10F0888(a1);

  operator delete();
}

uint64_t sub_10F0A00(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 32);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = *(void *)(result + 40) + 8;
    do
    {
      uint64_t v4 = *(void *)v3;
      int v5 = *(_DWORD *)(*(void *)v3 + 16);
      if (v5) {
        uint64_t result = sub_15B043C(*(void *)(v4 + 24));
      }
      if ((v5 & 0x3E) != 0)
      {
        *(void *)(v4 + 32) = 0;
        *(void *)(v4 + 40) = 0;
        *(unsigned char *)(v4 + 48) = 0;
      }
      char v7 = *(unsigned char *)(v4 + 8);
      uint64_t v6 = v4 + 8;
      *(_DWORD *)(v6 + 8) = 0;
      if (v7) {
        uint64_t result = sub_188B4AC((uint64_t *)v6);
      }
      v3 += 8;
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 32) = 0;
  }
  char v9 = *(unsigned char *)(v1 + 8);
  uint64_t v8 = v1 + 8;
  *(void *)(v8 + 40) = 0;
  *(_DWORD *)(v8 + 8) = 0;
  if (v9)
  {
    return sub_188B4AC((uint64_t *)v8);
  }
  return result;
}

char *sub_10F0ACC(uint64_t a1, char *a2, int32x2_t *a3)
{
  int v6 = 0;
  char v7 = (uint64_t *)(a1 + 24);
  uint64_t v8 = (uint64_t *)(a1 + 8);
  while (1)
  {
    while (1)
    {
LABEL_2:
      if ((unint64_t)a2 >= *(void *)a3)
      {
        int v22 = a2 - a3[1].i32[0];
        if (a3[3].i32[1] == v22)
        {
          if (v22 >= 1 && !*(void *)&a3[2]) {
            a2 = 0;
          }
          goto LABEL_40;
        }
        a2 = sub_188BB90((uint64_t)a3, v22, a3[11].i32[1]);
        if (v23) {
          goto LABEL_40;
        }
      }
      char v9 = a2 + 1;
      unsigned int v10 = *a2;
      if (*a2 < 0) {
        break;
      }
      unsigned int v11 = v10 >> 3;
      if (v10 >> 3 != 2) {
        goto LABEL_5;
      }
LABEL_16:
      if (v10 != 17) {
        goto LABEL_9;
      }
      *(void *)(a1 + 48) = *(void *)v9;
      int v6 = 1;
      a2 = v9 + 8;
    }
    unsigned int v13 = v10 + (*v9 << 7);
    unsigned int v10 = v13 - 128;
    if (*v9 < 0)
    {
      char v9 = (char *)sub_188C180((uint64_t)a2, v13 - 128);
      unsigned int v10 = v21;
      unsigned int v11 = v21 >> 3;
      if (v21 >> 3 == 2) {
        goto LABEL_16;
      }
    }
    else
    {
      char v9 = a2 + 2;
      unsigned int v11 = v10 >> 3;
      if (v10 >> 3 == 2) {
        goto LABEL_16;
      }
    }
LABEL_5:
    if (v11 == 1 && v10 == 10)
    {
      a2 = v9 - 1;
      while (1)
      {
        unsigned int v14 = *(_DWORD **)(a1 + 40);
        if (v14 && (uint64_t v15 = *(int *)(a1 + 32), (int)v15 < *v14))
        {
          *(_DWORD *)(a1 + 32) = v15 + 1;
          uint64_t v16 = *(void *)&v14[2 * v15 + 2];
          int v26 = 0;
          unsigned int v17 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)a2 + 1, &v26);
          if (v17) {
            goto LABEL_25;
          }
        }
        else
        {
          sub_10F9594(*v7);
          uint64_t v16 = sub_188CDC8((uint64_t)v7, v18);
          int v26 = 0;
          unsigned int v17 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)a2 + 1, &v26);
          if (v17)
          {
LABEL_25:
            a2 = sub_10EFD64(v16, v17, a3);
            ++a3[11].i32[0];
            if (a3[10].i32[0]) {
              goto LABEL_39;
            }
            goto LABEL_26;
          }
        }
        a2 = 0;
        ++a3[11].i32[0];
        if (a3[10].i32[0]) {
          goto LABEL_39;
        }
LABEL_26:
        int v19 = a3[3].i32[1] + v26;
        a3[3].i32[1] = v19;
        int32x2_t v20 = (int32x2_t)(*(void *)&a3[1] + (v19 & (v19 >> 31)));
        *a3 = v20;
        if (!a2) {
          goto LABEL_40;
        }
        if (*(void *)&v20 <= (unint64_t)a2 || *a2 != 10) {
          goto LABEL_2;
        }
      }
    }
LABEL_9:
    if (!v10 || (v10 & 7) == 4) {
      break;
    }
    if (*v8)
    {
      a2 = (char *)sub_1885AC0(v10, (std::string *)((*v8 & 0xFFFFFFFFFFFFFFFCLL) + 8), v9, a3);
      if (!a2) {
        goto LABEL_40;
      }
    }
    else
    {
      uint64_t v24 = (std::string *)sub_188DBD8(v8);
      a2 = (char *)sub_1885AC0(v10, v24, v9, a3);
      if (!a2) {
        goto LABEL_40;
      }
    }
  }
  if (v9)
  {
    a3[10].i32[0] = v10 - 1;
    a2 = v9;
  }
  else
  {
LABEL_39:
    a2 = 0;
  }
LABEL_40:
  *(_DWORD *)(a1 + 16) |= v6;
  return a2;
}

char *sub_10F0D84(uint64_t a1, char *__dst, _DWORD *a3)
{
  int v6 = *(_DWORD *)(a1 + 32);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
    {
      if (*(void *)a3 <= (unint64_t)__dst) {
        long long __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      }
      uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8 * i + 8);
      *long long __dst = 10;
      unsigned int v10 = *(_DWORD *)(v9 + 20);
      __dst[1] = v10;
      if (v10 > 0x7F) {
        uint64_t v8 = sub_188A9CC(v10, __dst + 1);
      }
      else {
        uint64_t v8 = __dst + 2;
      }
      long long __dst = sub_10F01D8(v9, v8, a3);
    }
  }
  if (*(unsigned char *)(a1 + 16))
  {
    if (*(void *)a3 <= (unint64_t)__dst) {
      long long __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
    }
    uint64_t v11 = *(void *)(a1 + 48);
    *long long __dst = 17;
    *(void *)(__dst + 1) = v11;
    __dst += 9;
  }
  uint64_t v12 = *(void *)(a1 + 8);
  if ((v12 & 1) == 0) {
    return __dst;
  }
  unint64_t v14 = v12 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v14 + 31) < 0)
  {
    uint64_t v15 = *(void **)(v14 + 8);
    uint64_t v16 = *(void *)(v14 + 16);
  }
  else
  {
    uint64_t v15 = (void *)(v14 + 8);
    LODWORD(v16) = *(unsigned __int8 *)(v14 + 31);
  }
  uint64_t v17 = (int)v16;
  if (*(void *)a3 - (void)__dst >= (int)v16)
  {
    memcpy(__dst, v15, (int)v16);
    __dst += v17;
    return __dst;
  }

  return (char *)sub_188A528(a3, (char *)v15, v16, __dst);
}

uint64_t sub_10F0F04(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = (uint64_t *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = sub_10F057C(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
    if (*(unsigned char *)(a1 + 16)) {
      uint64_t result = v2 + 9;
    }
    else {
      uint64_t result = v2;
    }
    uint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & 1) == 0)
    {
LABEL_11:
      *(_DWORD *)(a1 + 20) = result;
      return result;
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 16)) {
      uint64_t result = 9;
    }
    else {
      uint64_t result = 0;
    }
    uint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & 1) == 0) {
      goto LABEL_11;
    }
  }
  unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v10 + 31) < 0) {
    result += *(void *)(v10 + 16);
  }
  else {
    result += *(unsigned __int8 *)(v10 + 31);
  }
  *(_DWORD *)(a1 + 20) = result;
  return result;
}

void sub_10F0FF4(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 40) + 8);
    uint64_t v6 = (uint64_t *)sub_188CCE4(a1 + 24, *(_DWORD *)(a2 + 32));
    sub_10FB04C((uint64_t *)(a1 + 24), v6, v5, v4, **(_DWORD **)(a1 + 40) - *(_DWORD *)(a1 + 32));
    int v7 = *(_DWORD *)(a1 + 32) + v4;
    *(_DWORD *)(a1 + 32) = v7;
    uint64_t v8 = *(int **)(a1 + 40);
    if (*v8 < v7) {
      *uint64_t v8 = v7;
    }
  }
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v9 = *(void *)(a2 + 48);
    *(_DWORD *)(a1 + 16) |= 1u;
    *(void *)(a1 + 48) = v9;
  }
  uint64_t v10 = *(void *)(a2 + 8);
  if (v10)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v10 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

uint64_t sub_10F10E0(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 32);
  if ((int)v1 < 1) {
    return 1;
  }
  uint64_t v3 = v1 - 1;
  while (1)
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8 * v3 + 8);
    if (*(unsigned char *)(v4 + 16))
    {
      uint64_t result = sub_15B06D8(*(void *)(v4 + 24));
      if (!result) {
        break;
      }
    }
    if ((unint64_t)--v3 >= 0xFFFFFFFFFFFFFFFELL) {
      return 1;
    }
  }
  return result;
}

char *sub_10F1150@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_20B91C0;
  strcpy(result, "geo3.SessionState.EVData");
  return result;
}

void *sub_10F11A4(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }
  return a1;
}

void sub_10F1244(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }

  operator delete();
}

uint64_t sub_10F1304(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 7) != 0)
  {
    *(_DWORD *)(a1 + 32) = 0;
    *(void *)(a1 + 24) = 0;
  }
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_10F132C(_DWORD *a1, char *a2, int32x2_t *a3)
{
  int v6 = 0;
  int v7 = (uint64_t *)(a1 + 2);
  while (1)
  {
    if ((unint64_t)a2 < *(void *)a3) {
      goto LABEL_5;
    }
    int v23 = a2 - a3[1].i32[0];
    if (a3[3].i32[1] == v23) {
      break;
    }
    a2 = sub_188BB90((uint64_t)a3, v23, a3[11].i32[1]);
    if (v24) {
      goto LABEL_51;
    }
LABEL_5:
    uint64_t v9 = a2 + 1;
    unsigned int v10 = *a2;
    if (*a2 < 0)
    {
      unsigned int v13 = v10 + (*v9 << 7);
      unsigned int v10 = v13 - 128;
      if (*v9 < 0)
      {
        uint64_t v9 = (char *)sub_188C180((uint64_t)a2, v13 - 128);
        unsigned int v10 = v18;
        unsigned int v11 = v18 >> 3;
        if (v18 >> 3 != 3) {
          goto LABEL_7;
        }
      }
      else
      {
        uint64_t v9 = a2 + 2;
        unsigned int v11 = v10 >> 3;
        if (v10 >> 3 != 3) {
          goto LABEL_7;
        }
      }
      goto LABEL_19;
    }
    unsigned int v11 = v10 >> 3;
    if (v10 >> 3 == 3)
    {
LABEL_19:
      if (v10 != 24) {
        goto LABEL_12;
      }
      v6 |= 4u;
      a2 = v9 + 1;
      int v14 = *v9;
      if (*v9 < 0)
      {
        int v15 = *a2;
        int v14 = v14 + (v15 << 7) - 128;
        if ((v15 & 0x80000000) == 0)
        {
          a2 = v9 + 2;
          goto LABEL_23;
        }
        a2 = (char *)sub_188C0D0((uint64_t)v9, v14);
        a1[8] = v20;
        if (!a2) {
          goto LABEL_43;
        }
      }
      else
      {
LABEL_23:
        a1[8] = v14;
      }
    }
    else
    {
LABEL_7:
      if (v11 == 2)
      {
        if (v10 != 16) {
          goto LABEL_12;
        }
        v6 |= 2u;
        a2 = v9 + 1;
        int v16 = *v9;
        if (*v9 < 0)
        {
          int v17 = *a2;
          int v16 = v16 + (v17 << 7) - 128;
          if ((v17 & 0x80000000) == 0)
          {
            a2 = v9 + 2;
            goto LABEL_28;
          }
          a2 = (char *)sub_188C0D0((uint64_t)v9, v16);
          a1[7] = v21;
          if (!a2) {
            goto LABEL_43;
          }
        }
        else
        {
LABEL_28:
          a1[7] = v16;
        }
      }
      else if (v11 == 1 && v10 == 8)
      {
        v6 |= 1u;
        a2 = v9 + 1;
        int v8 = *v9;
        if ((*v9 & 0x80000000) == 0) {
          goto LABEL_3;
        }
        int v19 = *a2;
        int v8 = v8 + (v19 << 7) - 128;
        if (v19 < 0)
        {
          a2 = (char *)sub_188C0D0((uint64_t)v9, v8);
          a1[6] = v22;
          if (!a2) {
            goto LABEL_43;
          }
        }
        else
        {
          a2 = v9 + 2;
LABEL_3:
          a1[6] = v8;
        }
      }
      else
      {
LABEL_12:
        if (!v10 || (v10 & 7) == 4)
        {
          if (v9) {
            a3[10].i32[0] = v10 - 1;
          }
          goto LABEL_46;
        }
        if (*v7)
        {
          a2 = (char *)sub_1885AC0(v10, (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8), v9, a3);
          if (!a2) {
            goto LABEL_43;
          }
        }
        else
        {
          unint64_t v25 = (std::string *)sub_188DBD8(v7);
          a2 = (char *)sub_1885AC0(v10, v25, v9, a3);
          if (!a2)
          {
LABEL_43:
            uint64_t v9 = 0;
            goto LABEL_46;
          }
        }
      }
    }
  }
  if (v23 < 1)
  {
LABEL_51:
    uint64_t v9 = a2;
    goto LABEL_46;
  }
  if (a3[2]) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = 0;
  }
LABEL_46:
  a1[4] |= v6;
  return v9;
}

unsigned char *sub_10F15C4(uint64_t a1, unsigned char *__dst, _DWORD *a3)
{
  uint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*(void *)a3 <= (unint64_t)__dst)
    {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)__dst);
      unsigned int v7 = *(_DWORD *)(a1 + 24);
      *uint64_t v4 = 8;
      v4[1] = v7;
      if (v7 <= 0x7F) {
        goto LABEL_4;
      }
    }
    else
    {
      unsigned int v7 = *(_DWORD *)(a1 + 24);
      *long long __dst = 8;
      __dst[1] = v7;
      if (v7 <= 0x7F)
      {
LABEL_4:
        v4 += 2;
        goto LABEL_8;
      }
    }
    v4[1] = v7 | 0x80;
    unsigned int v8 = v7 >> 7;
    v4[2] = v7 >> 7;
    v4 += 3;
    if (v7 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unsigned int v9 = v8 >> 14;
        v8 >>= 7;
        *v4++ = v8;
      }
      while (v9);
    }
  }
LABEL_8:
  if ((v6 & 2) == 0) {
    goto LABEL_15;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unsigned int v10 = *(_DWORD *)(a1 + 28);
    *uint64_t v4 = 16;
    v4[1] = v10;
    if (v10 <= 0x7F) {
      goto LABEL_11;
    }
  }
  else
  {
    unsigned int v10 = *(_DWORD *)(a1 + 28);
    *uint64_t v4 = 16;
    v4[1] = v10;
    if (v10 <= 0x7F)
    {
LABEL_11:
      v4 += 2;
      goto LABEL_15;
    }
  }
  v4[1] = v10 | 0x80;
  unsigned int v11 = v10 >> 7;
  v4[2] = v10 >> 7;
  v4 += 3;
  if (v10 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unsigned int v12 = v11 >> 14;
      v11 >>= 7;
      *v4++ = v11;
    }
    while (v12);
  }
LABEL_15:
  if ((v6 & 4) == 0) {
    goto LABEL_22;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unsigned int v13 = *(_DWORD *)(a1 + 32);
    *uint64_t v4 = 24;
    v4[1] = v13;
    if (v13 <= 0x7F) {
      goto LABEL_18;
    }
  }
  else
  {
    unsigned int v13 = *(_DWORD *)(a1 + 32);
    *uint64_t v4 = 24;
    v4[1] = v13;
    if (v13 <= 0x7F)
    {
LABEL_18:
      v4 += 2;
      goto LABEL_22;
    }
  }
  v4[1] = v13 | 0x80;
  unsigned int v14 = v13 >> 7;
  v4[2] = v13 >> 7;
  v4 += 3;
  if (v13 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unsigned int v15 = v14 >> 14;
      v14 >>= 7;
      *v4++ = v14;
    }
    while (v15);
  }
LABEL_22:
  uint64_t v16 = *(void *)(a1 + 8);
  if ((v16 & 1) == 0) {
    return v4;
  }
  unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v18 + 31) < 0)
  {
    int v19 = *(char **)(v18 + 8);
    uint64_t v20 = *(void *)(v18 + 16);
  }
  else
  {
    int v19 = (char *)(v18 + 8);
    LODWORD(v20) = *(unsigned __int8 *)(v18 + 31);
  }
  uint64_t v21 = (int)v20;
  if (*(void *)a3 - (void)v4 < (int)v20)
  {
    return (unsigned char *)sub_188A528(a3, v19, v20, v4);
  }
  else
  {
    memcpy(v4, v19, (int)v20);
    return &v4[v21];
  }
}

uint64_t sub_10F1830(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 7) != 0)
  {
    if (v1)
    {
      uint64_t v2 = ((9 * (__clz(*(_DWORD *)(a1 + 24) | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v1 & 2) == 0) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v2 = 0;
      if ((v1 & 2) == 0)
      {
LABEL_9:
        if ((v1 & 4) != 0)
        {
          v2 += ((9 * (__clz(*(_DWORD *)(a1 + 32) | 1) ^ 0x1F) + 73) >> 6) + 1;
          uint64_t v3 = *(void *)(a1 + 8);
          if ((v3 & 1) == 0) {
            goto LABEL_11;
          }
        }
        else
        {
          uint64_t v3 = *(void *)(a1 + 8);
          if ((v3 & 1) == 0) {
            goto LABEL_11;
          }
        }
        goto LABEL_13;
      }
    }
    v2 += ((9 * (__clz(*(_DWORD *)(a1 + 28) | 1) ^ 0x1F) + 73) >> 6) + 1;
    goto LABEL_9;
  }
  uint64_t v2 = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 1) == 0)
  {
LABEL_11:
    *(_DWORD *)(a1 + 20) = v2;
    return v2;
  }
LABEL_13:
  unint64_t v5 = v3 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v5 + 31) < 0) {
    uint64_t v6 = *(void *)(v5 + 16) + v2;
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 31) + v2;
  }
  *(_DWORD *)(a1 + 20) = v6;
  return v6;
}

std::string *sub_10F191C(std::string *result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 16);
  if ((v2 & 7) == 0) {
    goto LABEL_7;
  }
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0) {
      goto LABEL_4;
    }
LABEL_10:
    HIDWORD(result[1].__r_.__value_.__r.__words[0]) = *(_DWORD *)(a2 + 28);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  LODWORD(result[1].__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 24);
  if ((v2 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_4:
  if ((v2 & 4) != 0) {
LABEL_5:
  }
    LODWORD(result[1].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 32);
LABEL_6:
  LODWORD(result->__r_.__value_.__r.__words[2]) |= v2;
LABEL_7:
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3) {
    return sub_188B4F8((uint64_t *)&result->__r_.__value_.__l.__size_, (v3 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_10F1980()
{
  return 1;
}

double sub_10F1988@<D0>(uint64_t a1@<X8>)
{
  int v2 = (char *)operator new(0x38uLL);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_20B9A10;
  strcpy(v2, "geo3.SessionState.HistoricalPrediction.Prediction");
  return *(double *)"iction.Prediction";
}

void *sub_10F19E0(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }
  return a1;
}

void sub_10F1A80(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }

  operator delete();
}

uint64_t sub_10F1B40(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 0xF) != 0)
  {
    *(_WORD *)(a1 + 32) = 0;
    *(void *)(a1 + 24) = 0;
  }
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_10F1B68(uint64_t a1, char *a2, int32x2_t *a3)
{
  int v6 = 0;
  unsigned int v7 = (uint64_t *)(a1 + 8);
  while ((unint64_t)a2 < *(void *)a3)
  {
LABEL_5:
    unsigned int v8 = a2 + 1;
    unsigned int v9 = *a2;
    if (*a2 < 0)
    {
      unsigned int v13 = v9 + (*v8 << 7);
      unsigned int v9 = v13 - 128;
      if (*v8 < 0)
      {
        unsigned int v8 = (char *)sub_188C180((uint64_t)a2, v13 - 128);
        unsigned int v9 = v21;
        unsigned int v10 = (v21 >> 3) - 1;
        if (v10 <= 3) {
          goto LABEL_7;
        }
      }
      else
      {
        unsigned int v8 = a2 + 2;
        unsigned int v10 = (v9 >> 3) - 1;
        if (v10 <= 3) {
          goto LABEL_7;
        }
      }
LABEL_32:
      if (v9) {
        BOOL v22 = (v9 & 7) == 4;
      }
      else {
        BOOL v22 = 1;
      }
      if (v22)
      {
        if (v8) {
          a3[10].i32[0] = v9 - 1;
        }
        goto LABEL_52;
      }
      if (*v7)
      {
        a2 = (char *)sub_1885AC0(v9, (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8), v8, a3);
        if (!a2) {
          goto LABEL_49;
        }
      }
      else
      {
        uint64_t v28 = (std::string *)sub_188DBD8(v7);
        a2 = (char *)sub_1885AC0(v9, v28, v8, a3);
        if (!a2)
        {
LABEL_49:
          unsigned int v8 = 0;
          goto LABEL_52;
        }
      }
    }
    else
    {
      unsigned int v10 = (v9 >> 3) - 1;
LABEL_7:
      switch(v10)
      {
        case 0u:
          if (v9 != 8) {
            goto LABEL_32;
          }
          v6 |= 1u;
          a2 = v8 + 1;
          int v11 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_12;
          }
          int v12 = *a2;
          int v11 = v11 + (v12 << 7) - 128;
          if (v12 < 0)
          {
            a2 = (char *)sub_188C0D0((uint64_t)v8, v11);
            *(_DWORD *)(a1 + 24) = v23;
            if (!a2) {
              goto LABEL_49;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_12:
            *(_DWORD *)(a1 + 24) = v11;
          }
          continue;
        case 1u:
          if (v9 != 16) {
            goto LABEL_32;
          }
          v6 |= 2u;
          a2 = v8 + 1;
          int v14 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_20;
          }
          int v15 = *a2;
          int v14 = v14 + (v15 << 7) - 128;
          if (v15 < 0)
          {
            a2 = (char *)sub_188C0D0((uint64_t)v8, v14);
            *(_DWORD *)(a1 + 28) = v24;
            if (!a2) {
              goto LABEL_49;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_20:
            *(_DWORD *)(a1 + 28) = v14;
          }
          continue;
        case 2u:
          if (v9 != 24) {
            goto LABEL_32;
          }
          v6 |= 4u;
          a2 = v8 + 1;
          uint64_t v16 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_25;
          }
          int v17 = *a2;
          uint64_t v16 = v16 + (v17 << 7) - 128;
          if (v17 < 0)
          {
            a2 = (char *)sub_188C138((uint64_t)v8, v16);
            *(unsigned char *)(a1 + 32) = v25 != 0;
            if (!a2) {
              goto LABEL_49;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_25:
            *(unsigned char *)(a1 + 32) = v16 != 0;
          }
          break;
        case 3u:
          if (v9 != 32) {
            goto LABEL_32;
          }
          v6 |= 8u;
          a2 = v8 + 1;
          uint64_t v18 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_3;
          }
          int v19 = *a2;
          uint64_t v18 = v18 + (v19 << 7) - 128;
          if (v19 < 0)
          {
            a2 = (char *)sub_188C138((uint64_t)v8, v18);
            *(unsigned char *)(a1 + 33) = v20 != 0;
            if (!a2) {
              goto LABEL_49;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_3:
            *(unsigned char *)(a1 + 33) = v18 != 0;
          }
          continue;
        default:
          goto LABEL_32;
      }
    }
  }
  int v26 = a2 - a3[1].i32[0];
  if (a3[3].i32[1] != v26)
  {
    a2 = sub_188BB90((uint64_t)a3, v26, a3[11].i32[1]);
    if (v27) {
      goto LABEL_57;
    }
    goto LABEL_5;
  }
  if (v26 < 1)
  {
LABEL_57:
    unsigned int v8 = a2;
    goto LABEL_52;
  }
  if (a3[2]) {
    unsigned int v8 = a2;
  }
  else {
    unsigned int v8 = 0;
  }
LABEL_52:
  *(_DWORD *)(a1 + 16) |= v6;
  return v8;
}

unsigned char *sub_10F1EA4(uint64_t a1, unsigned char *__dst, _DWORD *a3)
{
  uint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*(void *)a3 <= (unint64_t)__dst)
    {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)__dst);
      unsigned int v7 = *(_DWORD *)(a1 + 24);
      *uint64_t v4 = 8;
      v4[1] = v7;
      if (v7 <= 0x7F) {
        goto LABEL_4;
      }
    }
    else
    {
      unsigned int v7 = *(_DWORD *)(a1 + 24);
      *long long __dst = 8;
      __dst[1] = v7;
      if (v7 <= 0x7F)
      {
LABEL_4:
        v4 += 2;
        goto LABEL_8;
      }
    }
    v4[1] = v7 | 0x80;
    unsigned int v8 = v7 >> 7;
    v4[2] = v7 >> 7;
    v4 += 3;
    if (v7 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unsigned int v9 = v8 >> 14;
        v8 >>= 7;
        *v4++ = v8;
      }
      while (v9);
    }
  }
LABEL_8:
  if ((v6 & 2) == 0) {
    goto LABEL_15;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unsigned int v10 = *(_DWORD *)(a1 + 28);
    *uint64_t v4 = 16;
    v4[1] = v10;
    if (v10 <= 0x7F) {
      goto LABEL_11;
    }
  }
  else
  {
    unsigned int v10 = *(_DWORD *)(a1 + 28);
    *uint64_t v4 = 16;
    v4[1] = v10;
    if (v10 <= 0x7F)
    {
LABEL_11:
      v4 += 2;
      goto LABEL_15;
    }
  }
  v4[1] = v10 | 0x80;
  unsigned int v11 = v10 >> 7;
  v4[2] = v10 >> 7;
  v4 += 3;
  if (v10 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unsigned int v12 = v11 >> 14;
      v11 >>= 7;
      *v4++ = v11;
    }
    while (v12);
  }
LABEL_15:
  if ((v6 & 4) == 0)
  {
    if ((v6 & 8) == 0) {
      goto LABEL_17;
    }
LABEL_22:
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    char v16 = *(unsigned char *)(a1 + 33);
    *uint64_t v4 = 32;
    v4[1] = v16;
    v4 += 2;
    uint64_t v13 = *(void *)(a1 + 8);
    if ((v13 & 1) == 0) {
      return v4;
    }
    goto LABEL_25;
  }
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  char v15 = *(unsigned char *)(a1 + 32);
  *uint64_t v4 = 24;
  v4[1] = v15;
  v4 += 2;
  if ((v6 & 8) != 0) {
    goto LABEL_22;
  }
LABEL_17:
  uint64_t v13 = *(void *)(a1 + 8);
  if ((v13 & 1) == 0) {
    return v4;
  }
LABEL_25:
  unint64_t v17 = v13 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v17 + 31) < 0)
  {
    uint64_t v18 = *(char **)(v17 + 8);
    uint64_t v19 = *(void *)(v17 + 16);
  }
  else
  {
    uint64_t v18 = (char *)(v17 + 8);
    LODWORD(v19) = *(unsigned __int8 *)(v17 + 31);
  }
  uint64_t v20 = (int)v19;
  if (*(void *)a3 - (void)v4 < (int)v19)
  {
    return (unsigned char *)sub_188A528(a3, v18, v19, v4);
  }
  else
  {
    memcpy(v4, v18, (int)v19);
    return &v4[v20];
  }
}

uint64_t sub_10F20FC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 0xF) == 0)
  {
    uint64_t v3 = 0;
    goto LABEL_13;
  }
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v2 = ((9 * (__clz(*(_DWORD *)(a1 + 24) | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0) {
LABEL_7:
  }
    v2 += ((9 * (__clz(*(_DWORD *)(a1 + 28) | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  if ((v1 & 4) != 0) {
    v2 += 2;
  }
  if ((v1 & 8) != 0) {
    uint64_t v3 = v2 + 2;
  }
  else {
    uint64_t v3 = v2;
  }
LABEL_13:
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    unint64_t v6 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v6 + 31) < 0) {
      uint64_t v7 = *(void *)(v6 + 16) + v3;
    }
    else {
      uint64_t v7 = *(unsigned __int8 *)(v6 + 31) + v3;
    }
    *(_DWORD *)(a1 + 20) = v7;
    return v7;
  }
  else
  {
    *(_DWORD *)(a1 + 20) = v3;
    return v3;
  }
}

std::string *sub_10F21C8(std::string *result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 16);
  if ((v2 & 0xF) == 0) {
    goto LABEL_8;
  }
  if (v2)
  {
    LODWORD(result[1].__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 24);
    if ((v2 & 2) == 0)
    {
LABEL_4:
      if ((v2 & 4) == 0) {
        goto LABEL_5;
      }
LABEL_12:
      result[1].__r_.__value_.__s.__data_[8] = *(unsigned char *)(a2 + 32);
      if ((v2 & 8) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_4;
  }
  HIDWORD(result[1].__r_.__value_.__r.__words[0]) = *(_DWORD *)(a2 + 28);
  if ((v2 & 4) != 0) {
    goto LABEL_12;
  }
LABEL_5:
  if ((v2 & 8) != 0) {
LABEL_6:
  }
    result[1].__r_.__value_.__s.__data_[9] = *(unsigned char *)(a2 + 33);
LABEL_7:
  LODWORD(result->__r_.__value_.__r.__words[2]) |= v2;
LABEL_8:
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3) {
    return sub_188B4F8((uint64_t *)&result->__r_.__value_.__l.__size_, (v3 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_10F223C()
{
  return 1;
}

double sub_10F2244@<D0>(uint64_t a1@<X8>)
{
  int v2 = (char *)operator new(0x40uLL);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_20B98C0;
  strcpy(v2, "geo3.SessionState.HistoricalPrediction.StateAtPrediction");
  return *(double *)"iction.StateAtPrediction";
}

uint64_t sub_10F22A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v3) {
      goto LABEL_13;
    }
  }
  else if (v3)
  {
    goto LABEL_13;
  }
  if ((uint64_t (***)())a1 != &off_24F7AB8)
  {
    uint64_t v4 = *(void **)(a1 + 48);
    if (v4)
    {
      uint64_t v5 = v4[1];
      if (v5)
      {
        unsigned int v10 = v4 + 1;
        if (!*(void *)(v5 & 0xFFFFFFFFFFFFFFFCLL))
        {
          sub_10E4F74(v10);
          uint64_t v5 = *v10;
        }
      }
      *uint64_t v4 = off_24E6998;
      if ((v5 & 2) != 0)
      {
        unint64_t v6 = (void *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
        if (v5)
        {
          if (*v6)
          {
LABEL_9:
            sub_1881618();
            operator delete();
          }
        }
        else if (v6)
        {
          goto LABEL_9;
        }
      }
      operator delete();
    }
  }
  if (*(void *)(a1 + 8)) {
    sub_10E4F74((void *)(a1 + 8));
  }
LABEL_13:
  sub_10FA7A4((void *)(a1 + 24));
  *(void *)a1 = off_24E6998;
  uint64_t v7 = *(void *)(a1 + 8);
  if ((v7 & 2) != 0)
  {
    unsigned int v8 = (void *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
    if (v7)
    {
      if (*v8)
      {
LABEL_16:
        sub_1881618();
        operator delete();
      }
    }
    else if (v8)
    {
      goto LABEL_16;
    }
  }
  return a1;
}

void sub_10F2428(uint64_t a1)
{
  sub_10F22A0(a1);

  operator delete();
}

uint64_t sub_10F2460(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 32);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = *(void *)(result + 40) + 8;
    do
    {
      uint64_t v4 = *(void *)v3;
      if ((*(unsigned char *)(*(void *)v3 + 16) & 7) != 0)
      {
        *(_DWORD *)(v4 + 32) = 0;
        *(void *)(v4 + 24) = 0;
      }
      char v5 = *(unsigned char *)(v4 + 8);
      uint64_t result = v4 + 8;
      *(_DWORD *)(result + 8) = 0;
      if (v5) {
        uint64_t result = sub_188B4AC((uint64_t *)result);
      }
      v3 += 8;
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 32) = 0;
  }
  if (*(unsigned char *)(v1 + 16))
  {
    uint64_t v6 = *(void *)(v1 + 48);
    if ((*(unsigned char *)(v6 + 16) & 0xF) != 0)
    {
      *(_WORD *)(v6 + 32) = 0;
      *(void *)(v6 + 24) = 0;
    }
    char v7 = *(unsigned char *)(v6 + 8);
    uint64_t result = v6 + 8;
    *(_DWORD *)(result + 8) = 0;
    if (v7) {
      uint64_t result = sub_188B4AC((uint64_t *)result);
    }
  }
  char v9 = *(unsigned char *)(v1 + 8);
  uint64_t v8 = v1 + 8;
  *(_DWORD *)(v8 + 8) = 0;
  if (v9)
  {
    return sub_188B4AC((uint64_t *)v8);
  }
  return result;
}

unsigned __int8 *sub_10F253C(uint64_t a1, unsigned __int8 *a2, int32x2_t *a3)
{
  uint64_t v6 = (uint64_t *)(a1 + 8);
  char v7 = (uint64_t *)(a1 + 24);
  while (1)
  {
    while (1)
    {
LABEL_4:
      if ((unint64_t)a2 >= *(void *)a3)
      {
        int v25 = a2 - a3[1].i32[0];
        if (a3[3].i32[1] == v25)
        {
          if (v25 >= 1 && !*(void *)&a3[2]) {
            return 0;
          }
          return a2;
        }
        a2 = (unsigned __int8 *)sub_188BB90((uint64_t)a3, v25, a3[11].i32[1]);
        if (v26) {
          return a2;
        }
      }
      char v9 = a2 + 1;
      unsigned int v10 = *a2;
      if ((char)*a2 < 0) {
        break;
      }
      unsigned int v11 = v10 >> 3;
      if (v10 >> 3 != 2) {
        goto LABEL_7;
      }
LABEL_18:
      if (v10 != 18) {
        goto LABEL_11;
      }
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v14 = *(void *)(a1 + 48);
      if (v14)
      {
        int v30 = 0;
        char v15 = (char *)sub_188BEE0((uint64_t)a3, v9, &v30);
        if (!v15) {
          goto LABEL_2;
        }
      }
      else
      {
        int v24 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
        if (*v6) {
          int v24 = (void *)*v24;
        }
        uint64_t v14 = sub_10F9738((uint64_t)v24);
        *(void *)(a1 + 48) = v14;
        int v30 = 0;
        char v15 = (char *)sub_188BEE0((uint64_t)a3, v9, &v30);
        if (!v15)
        {
LABEL_2:
          a2 = 0;
          ++a3[11].i32[0];
          if (a3[10].i32[0]) {
            return 0;
          }
          goto LABEL_3;
        }
      }
      a2 = (unsigned __int8 *)sub_10F1B68(v14, v15, a3);
      ++a3[11].i32[0];
      if (a3[10].i32[0]) {
        return 0;
      }
LABEL_3:
      int v8 = a3[3].i32[1] + v30;
      a3[3].i32[1] = v8;
      *a3 = (int32x2_t)(*(void *)&a3[1] + (v8 & (v8 >> 31)));
      if (!a2) {
        return a2;
      }
    }
    unsigned int v13 = v10 + (*v9 << 7);
    unsigned int v10 = v13 - 128;
    if ((char)*v9 < 0)
    {
      char v9 = (unsigned __int8 *)sub_188C180((uint64_t)a2, v13 - 128);
      unsigned int v10 = v23;
      unsigned int v11 = v23 >> 3;
      if (v23 >> 3 == 2) {
        goto LABEL_18;
      }
    }
    else
    {
      char v9 = a2 + 2;
      unsigned int v11 = v10 >> 3;
      if (v10 >> 3 == 2) {
        goto LABEL_18;
      }
    }
LABEL_7:
    if (v11 == 1 && v10 == 10)
    {
      a2 = v9 - 1;
      while (1)
      {
        char v16 = *(_DWORD **)(a1 + 40);
        if (v16 && (uint64_t v17 = *(int *)(a1 + 32), (int)v17 < *v16))
        {
          *(_DWORD *)(a1 + 32) = v17 + 1;
          uint64_t v18 = *(_DWORD **)&v16[2 * v17 + 2];
          int v29 = 0;
          uint64_t v19 = (char *)sub_188BEE0((uint64_t)a3, a2 + 1, &v29);
          if (v19) {
            goto LABEL_29;
          }
        }
        else
        {
          uint64_t v20 = sub_10F96BC(*v7);
          uint64_t v18 = (_DWORD *)sub_188CDC8((uint64_t)v7, v20);
          int v29 = 0;
          uint64_t v19 = (char *)sub_188BEE0((uint64_t)a3, a2 + 1, &v29);
          if (v19)
          {
LABEL_29:
            a2 = (unsigned __int8 *)sub_10F132C(v18, v19, a3);
            ++a3[11].i32[0];
            if (a3[10].i32[0]) {
              return 0;
            }
            goto LABEL_30;
          }
        }
        a2 = 0;
        ++a3[11].i32[0];
        if (a3[10].i32[0]) {
          return 0;
        }
LABEL_30:
        int v21 = a3[3].i32[1] + v29;
        a3[3].i32[1] = v21;
        int32x2_t v22 = (int32x2_t)(*(void *)&a3[1] + (v21 & (v21 >> 31)));
        *a3 = v22;
        if (!a2) {
          return a2;
        }
        if (*(void *)&v22 <= (unint64_t)a2 || *a2 != 10) {
          goto LABEL_4;
        }
      }
    }
LABEL_11:
    if (!v10 || (v10 & 7) == 4) {
      break;
    }
    if (*v6)
    {
      a2 = sub_1885AC0(v10, (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8), (char *)v9, a3);
      if (!a2) {
        return a2;
      }
    }
    else
    {
      char v27 = (std::string *)sub_188DBD8(v6);
      a2 = sub_1885AC0(v10, v27, (char *)v9, a3);
      if (!a2) {
        return a2;
      }
    }
  }
  if (!v9) {
    return 0;
  }
  a3[10].i32[0] = v10 - 1;
  return v9;
}

char *sub_10F28A4(uint64_t a1, char *__dst, _DWORD *a3)
{
  int v6 = *(_DWORD *)(a1 + 32);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
    {
      if (*(void *)a3 <= (unint64_t)__dst) {
        long long __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      }
      uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8 * i + 8);
      *long long __dst = 10;
      unsigned int v10 = *(_DWORD *)(v9 + 20);
      __dst[1] = v10;
      if (v10 > 0x7F) {
        int v8 = sub_188A9CC(v10, __dst + 1);
      }
      else {
        int v8 = __dst + 2;
      }
      long long __dst = sub_10F15C4(v9, v8, a3);
    }
  }
  if (*(unsigned char *)(a1 + 16))
  {
    if (*(void *)a3 <= (unint64_t)__dst) {
      long long __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
    }
    uint64_t v11 = *(void *)(a1 + 48);
    *long long __dst = 18;
    unsigned int v12 = *(_DWORD *)(v11 + 20);
    __dst[1] = v12;
    if (v12 > 0x7F) {
      unsigned int v13 = sub_188A9CC(v12, __dst + 1);
    }
    else {
      unsigned int v13 = __dst + 2;
    }
    long long __dst = sub_10F1EA4(v11, v13, a3);
  }
  uint64_t v14 = *(void *)(a1 + 8);
  if ((v14 & 1) == 0) {
    return __dst;
  }
  unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v16 + 31) < 0)
  {
    uint64_t v17 = *(void **)(v16 + 8);
    uint64_t v18 = *(void *)(v16 + 16);
  }
  else
  {
    uint64_t v17 = (void *)(v16 + 8);
    LODWORD(v18) = *(unsigned __int8 *)(v16 + 31);
  }
  uint64_t v19 = (int)v18;
  if (*(void *)a3 - (void)__dst >= (int)v18)
  {
    memcpy(__dst, v17, (int)v18);
    __dst += v19;
    return __dst;
  }

  return (char *)sub_188A528(a3, (char *)v17, v18, __dst);
}

uint64_t sub_10F2A50(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    uint64_t v3 = (uint64_t *)(v2 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  if (v1)
  {
    uint64_t v4 = 8 * v1;
    while (1)
    {
      uint64_t v5 = *v3;
      int v6 = *(_DWORD *)(*v3 + 16);
      if ((v6 & 7) == 0)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(v5 + 8);
        if (v8) {
          goto LABEL_20;
        }
        goto LABEL_18;
      }
      if (v6) {
        break;
      }
      uint64_t v7 = 0;
      if ((v6 & 2) != 0) {
        goto LABEL_13;
      }
LABEL_14:
      if ((v6 & 4) != 0)
      {
        v7 += ((9 * (__clz(*(_DWORD *)(v5 + 32) | 1) ^ 0x1F) + 73) >> 6) + 1;
        uint64_t v8 = *(void *)(v5 + 8);
        if (v8)
        {
LABEL_20:
          unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFFCLL;
          if (*(char *)(v9 + 31) < 0) {
            uint64_t v10 = *(void *)(v9 + 16);
          }
          else {
            uint64_t v10 = *(unsigned __int8 *)(v9 + 31);
          }
          v7 += v10;
        }
      }
      else
      {
        uint64_t v8 = *(void *)(v5 + 8);
        if (v8) {
          goto LABEL_20;
        }
      }
LABEL_18:
      *(_DWORD *)(v5 + 20) = v7;
      v1 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
      v4 -= 8;
      if (!v4) {
        goto LABEL_25;
      }
    }
    uint64_t v7 = ((9 * (__clz(*(_DWORD *)(v5 + 24) | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v6 & 2) == 0) {
      goto LABEL_14;
    }
LABEL_13:
    v7 += ((9 * (__clz(*(_DWORD *)(v5 + 28) | 1) ^ 0x1F) + 73) >> 6) + 1;
    goto LABEL_14;
  }
  uint64_t v1 = 0;
LABEL_25:
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v13 = *(void *)(a1 + 48);
    int v14 = *(_DWORD *)(v13 + 16);
    if ((v14 & 0xF) == 0)
    {
      uint64_t v16 = 0;
      goto LABEL_40;
    }
    if (v14)
    {
      uint64_t v15 = ((9 * (__clz(*(_DWORD *)(v13 + 24) | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v14 & 2) == 0)
      {
LABEL_35:
        if ((v14 & 4) != 0) {
          v15 += 2;
        }
        if ((v14 & 8) != 0) {
          uint64_t v16 = v15 + 2;
        }
        else {
          uint64_t v16 = v15;
        }
LABEL_40:
        uint64_t v17 = *(void *)(v13 + 8);
        if (v17)
        {
          unint64_t v20 = v17 & 0xFFFFFFFFFFFFFFFCLL;
          if (*(char *)(v20 + 31) < 0) {
            uint64_t v21 = *(void *)(v20 + 16);
          }
          else {
            uint64_t v21 = *(unsigned __int8 *)(v20 + 31);
          }
          v16 += v21;
        }
        *(_DWORD *)(v13 + 20) = v16;
        v1 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
        uint64_t v11 = *(void *)(a1 + 8);
        if ((v11 & 1) == 0) {
          goto LABEL_27;
        }
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v15 = 0;
      if ((v14 & 2) == 0) {
        goto LABEL_35;
      }
    }
    v15 += ((9 * (__clz(*(_DWORD *)(v13 + 28) | 1) ^ 0x1F) + 73) >> 6) + 1;
    goto LABEL_35;
  }
  uint64_t v11 = *(void *)(a1 + 8);
  if ((v11 & 1) == 0)
  {
LABEL_27:
    *(_DWORD *)(a1 + 20) = v1;
    return v1;
  }
LABEL_42:
  unint64_t v18 = v11 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v18 + 31) < 0) {
    uint64_t v19 = *(void *)(v18 + 16) + v1;
  }
  else {
    uint64_t v19 = *(unsigned __int8 *)(v18 + 31) + v1;
  }
  *(_DWORD *)(a1 + 20) = v19;
  return v19;
}

std::string *sub_10F2CAC(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (std::string **)(*(void *)(a2 + 40) + 8);
    int v6 = (uint64_t *)sub_188CCE4((uint64_t)&result[1], *(_DWORD *)(a2 + 32));
    uint64_t result = (std::string *)sub_10FB0D8((uint64_t *)&v3[1], v6, v5, v4, *(_DWORD *)v3[1].__r_.__value_.__r.__words[2]- LODWORD(v3[1].__r_.__value_.__r.__words[1]));
    int v7 = LODWORD(v3[1].__r_.__value_.__r.__words[1]) + v4;
    LODWORD(v3[1].__r_.__value_.__r.__words[1]) = v7;
    uint64_t v8 = (int *)v3[1].__r_.__value_.__r.__words[2];
    if (*v8 < v7) {
      *uint64_t v8 = v7;
    }
  }
  if (*(unsigned char *)(a2 + 16))
  {
    unint64_t v9 = *(uint64_t (****)())(a2 + 48);
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 1u;
    uint64_t result = (std::string *)v3[2].__r_.__value_.__l.__data_;
    if (!result)
    {
      std::string::size_type size = v3->__r_.__value_.__l.__size_;
      uint64_t v11 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
      if (size) {
        uint64_t v11 = (void *)*v11;
      }
      uint64_t result = (std::string *)sub_10F9738((uint64_t)v11);
      v3[2].__r_.__value_.__r.__words[0] = (std::string::size_type)result;
      unint64_t v9 = *(uint64_t (****)())(a2 + 48);
    }
    if (!v9) {
      unint64_t v9 = &off_24F7A90;
    }
    int v12 = *((_DWORD *)v9 + 4);
    if ((v12 & 0xF) == 0) {
      goto LABEL_18;
    }
    if (v12)
    {
      LODWORD(result[1].__r_.__value_.__l.__data_) = *((_DWORD *)v9 + 6);
      if ((v12 & 2) == 0)
      {
LABEL_14:
        if ((v12 & 4) == 0) {
          goto LABEL_15;
        }
        goto LABEL_26;
      }
    }
    else if ((v12 & 2) == 0)
    {
      goto LABEL_14;
    }
    HIDWORD(result[1].__r_.__value_.__r.__words[0]) = *((_DWORD *)v9 + 7);
    if ((v12 & 4) == 0)
    {
LABEL_15:
      if ((v12 & 8) == 0)
      {
LABEL_17:
        LODWORD(result->__r_.__value_.__r.__words[2]) |= v12;
LABEL_18:
        unint64_t v13 = (unint64_t)v9[1];
        if (v13) {
          uint64_t result = sub_188B4F8((uint64_t *)&result->__r_.__value_.__l.__size_, (v13 & 0xFFFFFFFFFFFFFFFCLL) + 8);
        }
        goto LABEL_20;
      }
LABEL_16:
      result[1].__r_.__value_.__s.__data_[9] = *((unsigned char *)v9 + 33);
      goto LABEL_17;
    }
LABEL_26:
    result[1].__r_.__value_.__s.__data_[8] = *((unsigned char *)v9 + 32);
    if ((v12 & 8) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_20:
  uint64_t v14 = *(void *)(a2 + 8);
  if (v14)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v14 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_10F2E3C()
{
  return 1;
}

char *sub_10F2E44@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_20E12D0;
  strcpy(result, "geo3.SessionState.HistoricalPrediction");
  return result;
}

uint64_t sub_10F2E98(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_10;
    }
  }
  else if (v4)
  {
    goto LABEL_10;
  }
  if ((uint64_t (***)())a1 != &off_24F7AF0)
  {
    if (*(void *)(a1 + 24))
    {
      sub_1472844();
      operator delete();
    }
    if (*(void *)(a1 + 32))
    {
      sub_15B0994();
      operator delete();
    }
  }
  uint64_t v2 = *v3;
  if (*v3)
  {
    sub_10E4F74(v3);
    uint64_t v2 = *v3;
  }
LABEL_10:
  *(void *)a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    uint64_t v5 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v5)
      {
LABEL_13:
        sub_1881618();
        operator delete();
      }
    }
    else if (v5)
    {
      goto LABEL_13;
    }
  }
  return a1;
}

void sub_10F2F98(uint64_t a1)
{
  sub_10F2E98(a1);

  operator delete();
}

uint64_t sub_10F2FD0(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 3) != 0)
  {
    if (v2) {
      uint64_t result = sub_1396114(*(void *)(result + 24));
    }
    if ((v2 & 2) != 0) {
      uint64_t result = (uint64_t)sub_15B09D0(*(void *)(v1 + 32));
    }
  }
  if ((v2 & 0x1C) != 0)
  {
    *(void *)(v1 + 40) = 0;
    *(void *)(v1 + 48) = 0;
  }
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = v1 + 8;
  *(_DWORD *)(v3 + 8) = 0;
  if (v4)
  {
    return sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

char *sub_10F304C(uint64_t a1, char *a2, int32x2_t *a3)
{
  int v6 = 0;
  int v7 = (uint64_t *)(a1 + 8);
  while ((unint64_t)a2 < *(void *)a3)
  {
LABEL_6:
    uint64_t v10 = a2 + 1;
    unsigned int v11 = *a2;
    if (*a2 < 0)
    {
      unsigned int v15 = v11 + (*v10 << 7);
      unsigned int v11 = v15 - 128;
      if (*v10 < 0)
      {
        uint64_t v10 = (char *)sub_188C180((uint64_t)a2, v15 - 128);
        unsigned int v11 = v21;
        unsigned int v12 = (v21 >> 3) - 1;
        if (v12 <= 4) {
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v10 = a2 + 2;
        unsigned int v12 = (v11 >> 3) - 1;
        if (v12 <= 4) {
          goto LABEL_8;
        }
      }
LABEL_36:
      if (v11) {
        BOOL v22 = (v11 & 7) == 4;
      }
      else {
        BOOL v22 = 1;
      }
      if (v22)
      {
        if (v10) {
          a3[10].i32[0] = v11 - 1;
        }
        goto LABEL_73;
      }
      if (*v7)
      {
        a2 = (char *)sub_1885AC0(v11, (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8), v10, a3);
        if (!a2) {
          goto LABEL_74;
        }
      }
      else
      {
        int v33 = (std::string *)sub_188DBD8(v7);
        a2 = (char *)sub_1885AC0(v11, v33, v10, a3);
        if (!a2)
        {
LABEL_74:
          uint64_t v10 = 0;
          goto LABEL_73;
        }
      }
    }
    else
    {
      unsigned int v12 = (v11 >> 3) - 1;
LABEL_8:
      switch(v12)
      {
        case 0u:
          if (v11 != 10) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 16) |= 1u;
          unint64_t v13 = *(void **)(a1 + 24);
          if (v13)
          {
            int v35 = 0;
            uint64_t v14 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)v10, &v35);
            if (!v14) {
              goto LABEL_2;
            }
          }
          else
          {
            unsigned int v23 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
            if (*v7) {
              unsigned int v23 = (void *)*v23;
            }
            unint64_t v13 = sub_1479600((uint64_t)v23);
            *(void *)(a1 + 24) = v13;
            int v35 = 0;
            uint64_t v14 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)v10, &v35);
            if (!v14)
            {
LABEL_2:
              a2 = 0;
              ++a3[11].i32[0];
              if (a3[10].i32[0]) {
                goto LABEL_74;
              }
              goto LABEL_3;
            }
          }
          a2 = sub_1472880((uint64_t)v13, v14, a3);
          ++a3[11].i32[0];
          if (a3[10].i32[0]) {
            goto LABEL_74;
          }
LABEL_3:
          int v8 = v35;
          goto LABEL_4;
        case 1u:
          if (v11 != 18) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 16) |= 2u;
          uint64_t v16 = *(void *)(a1 + 32);
          if (v16)
          {
            int v36 = 0;
            uint64_t v17 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)v10, &v36);
            if (v17) {
              goto LABEL_19;
            }
          }
          else
          {
            int v24 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
            if (*v7) {
              int v24 = (void *)*v24;
            }
            uint64_t v16 = sub_15C1918((uint64_t)v24);
            *(void *)(a1 + 32) = v16;
            int v36 = 0;
            uint64_t v17 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)v10, &v36);
            if (v17)
            {
LABEL_19:
              a2 = sub_15B0A38(v16, v17, a3);
              ++a3[11].i32[0];
              if (a3[10].i32[0]) {
                goto LABEL_74;
              }
              goto LABEL_52;
            }
          }
          a2 = 0;
          ++a3[11].i32[0];
          if (a3[10].i32[0]) {
            goto LABEL_74;
          }
LABEL_52:
          int v8 = v36;
LABEL_4:
          int v9 = a3[3].i32[1] + v8;
          a3[3].i32[1] = v9;
          *a3 = (int32x2_t)(*(void *)&a3[1] + (v9 & (v9 >> 31)));
          if (!a2) {
            goto LABEL_74;
          }
          continue;
        case 2u:
          if (v11 != 24) {
            goto LABEL_36;
          }
          v6 |= 4u;
          a2 = v10 + 1;
          int v18 = *v10;
          if ((*v10 & 0x80000000) == 0) {
            goto LABEL_25;
          }
          int v18 = v18 + (*a2 << 7) - 128;
          if (*a2 < 0)
          {
            a2 = (char *)sub_188C0D0((uint64_t)v10, v18);
            *(_DWORD *)(a1 + 40) = v27;
            if (!a2) {
              goto LABEL_74;
            }
          }
          else
          {
            a2 = v10 + 2;
LABEL_25:
            *(_DWORD *)(a1 + 40) = v18;
          }
          continue;
        case 3u:
          if (v11 != 32) {
            goto LABEL_36;
          }
          a2 = v10 + 1;
          unint64_t v19 = *v10;
          if (*v10 < 0)
          {
            int v25 = v19 + (*a2 << 7);
            unint64_t v19 = (v25 - 128);
            if (*a2 < 0)
            {
              uint64_t v29 = sub_188C138((uint64_t)v10, (v25 - 128));
              if (!v29) {
                goto LABEL_74;
              }
              a2 = (char *)v29;
              unint64_t v19 = v30;
              if (v30 <= 2)
              {
LABEL_29:
                *(_DWORD *)(a1 + 16) |= 8u;
                *(_DWORD *)(a1 + 44) = v19;
                continue;
              }
            }
            else
            {
              a2 = v10 + 2;
              if (v19 <= 2) {
                goto LABEL_29;
              }
            }
          }
          else if (v19 <= 2)
          {
            goto LABEL_29;
          }
          if (*v7) {
            char v26 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            char v26 = (std::string *)sub_188DBD8(v7);
          }
          sub_188C020(4, v19, v26);
          break;
        case 4u:
          if (v11 != 40) {
            goto LABEL_36;
          }
          v6 |= 0x10u;
          a2 = v10 + 1;
          uint64_t v20 = *v10;
          if ((*v10 & 0x80000000) == 0) {
            goto LABEL_34;
          }
          uint64_t v20 = v20 + (*a2 << 7) - 128;
          if (*a2 < 0)
          {
            a2 = (char *)sub_188C138((uint64_t)v10, v20);
            *(void *)(a1 + 48) = v28;
            if (!a2) {
              goto LABEL_74;
            }
          }
          else
          {
            a2 = v10 + 2;
LABEL_34:
            *(void *)(a1 + 48) = v20;
          }
          continue;
        default:
          goto LABEL_36;
      }
    }
  }
  int v31 = a2 - a3[1].i32[0];
  if (a3[3].i32[1] != v31)
  {
    a2 = sub_188BB90((uint64_t)a3, v31, a3[11].i32[1]);
    if (v32) {
      goto LABEL_79;
    }
    goto LABEL_6;
  }
  if (v31 < 1)
  {
LABEL_79:
    uint64_t v10 = a2;
    goto LABEL_73;
  }
  if (a3[2]) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = 0;
  }
LABEL_73:
  *(_DWORD *)(a1 + 16) |= v6;
  return v10;
}

char *sub_10F3518(uint64_t a1, unint64_t __dst, _DWORD *a3)
{
  char v4 = (char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*(void *)a3 <= __dst) {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v7 = *(void *)(a1 + 24);
    *char v4 = 10;
    unsigned int v8 = *(_DWORD *)(v7 + 20);
    v4[1] = v8;
    if (v8 > 0x7F)
    {
      int v9 = sub_188A9CC(v8, v4 + 1);
      char v4 = sub_1472A70(v7, (unint64_t)v9, a3);
      if ((v6 & 2) != 0) {
        goto LABEL_11;
      }
    }
    else
    {
      char v4 = sub_1472A70(v7, (unint64_t)(v4 + 2), a3);
      if ((v6 & 2) != 0) {
        goto LABEL_11;
      }
    }
LABEL_3:
    if ((v6 & 4) == 0) {
      goto LABEL_23;
    }
    goto LABEL_17;
  }
  if ((v6 & 2) == 0) {
    goto LABEL_3;
  }
LABEL_11:
  if (*(void *)a3 <= (unint64_t)v4) {
    char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v10 = *(void *)(a1 + 32);
  *char v4 = 18;
  unsigned int v11 = *(_DWORD *)(v10 + 44);
  v4[1] = v11;
  if (v11 > 0x7F)
  {
    unsigned int v12 = sub_188A9CC(v11, v4 + 1);
    char v4 = sub_15B0C0C(v10, v12, a3);
    if ((v6 & 4) == 0) {
      goto LABEL_23;
    }
  }
  else
  {
    char v4 = sub_15B0C0C(v10, v4 + 2, a3);
    if ((v6 & 4) == 0) {
      goto LABEL_23;
    }
  }
LABEL_17:
  if (*(void *)a3 <= (unint64_t)v4)
  {
    char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    unsigned int v13 = *(_DWORD *)(a1 + 40);
    *char v4 = 24;
    v4[1] = v13;
    if (v13 <= 0x7F) {
      goto LABEL_19;
    }
  }
  else
  {
    unsigned int v13 = *(_DWORD *)(a1 + 40);
    *char v4 = 24;
    v4[1] = v13;
    if (v13 <= 0x7F)
    {
LABEL_19:
      v4 += 2;
      goto LABEL_23;
    }
  }
  v4[1] = v13 | 0x80;
  unsigned int v14 = v13 >> 7;
  v4[2] = v13 >> 7;
  v4 += 3;
  if (v13 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unsigned int v15 = v14 >> 14;
      v14 >>= 7;
      *v4++ = v14;
    }
    while (v15);
  }
LABEL_23:
  if ((v6 & 8) == 0) {
    goto LABEL_30;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    unint64_t v16 = *(int *)(a1 + 44);
    *char v4 = 32;
    v4[1] = v16;
    if (v16 <= 0x7F) {
      goto LABEL_26;
    }
  }
  else
  {
    unint64_t v16 = *(int *)(a1 + 44);
    *char v4 = 32;
    v4[1] = v16;
    if (v16 <= 0x7F)
    {
LABEL_26:
      v4 += 2;
      goto LABEL_30;
    }
  }
  v4[1] = v16 | 0x80;
  unint64_t v17 = v16 >> 7;
  v4[2] = v16 >> 7;
  v4 += 3;
  if (v16 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unint64_t v18 = v17 >> 14;
      v17 >>= 7;
      *v4++ = v17;
    }
    while (v18);
  }
LABEL_30:
  if ((v6 & 0x10) == 0) {
    goto LABEL_37;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    unint64_t v19 = *(void *)(a1 + 48);
    *char v4 = 40;
    v4[1] = v19;
    if (v19 <= 0x7F) {
      goto LABEL_33;
    }
  }
  else
  {
    unint64_t v19 = *(void *)(a1 + 48);
    *char v4 = 40;
    v4[1] = v19;
    if (v19 <= 0x7F)
    {
LABEL_33:
      v4 += 2;
      goto LABEL_37;
    }
  }
  v4[1] = v19 | 0x80;
  unint64_t v20 = v19 >> 7;
  v4[2] = v19 >> 7;
  v4 += 3;
  if (v19 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unint64_t v21 = v20 >> 14;
      v20 >>= 7;
      *v4++ = v20;
    }
    while (v21);
  }
LABEL_37:
  uint64_t v22 = *(void *)(a1 + 8);
  if ((v22 & 1) == 0) {
    return v4;
  }
  unint64_t v24 = v22 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v24 + 31) < 0)
  {
    int v25 = *(char **)(v24 + 8);
    uint64_t v26 = *(void *)(v24 + 16);
  }
  else
  {
    int v25 = (char *)(v24 + 8);
    LODWORD(v26) = *(unsigned __int8 *)(v24 + 31);
  }
  uint64_t v27 = (int)v26;
  if (*(void *)a3 - (void)v4 < (int)v26)
  {
    return (char *)sub_188A528(a3, v25, v26, v4);
  }
  else
  {
    memcpy(v4, v25, (int)v26);
    return &v4[v27];
  }
}

uint64_t sub_10F3890(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 0x1F) != 0)
  {
    if (v2)
    {
      unint64_t v5 = sub_1472C14(*(void *)(a1 + 24));
      uint64_t v3 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v2 & 2) == 0) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v3 = 0;
      if ((v2 & 2) == 0)
      {
LABEL_9:
        if ((v2 & 4) != 0)
        {
          v3 += ((9 * (__clz(*(_DWORD *)(a1 + 40) | 1) ^ 0x1F) + 73) >> 6) + 1;
          if ((v2 & 8) == 0)
          {
LABEL_11:
            if ((v2 & 0x10) == 0) {
              goto LABEL_12;
            }
LABEL_19:
            v3 += ((9 * (__clz(*(void *)(a1 + 48) | 1) ^ 0x3F) + 73) >> 6) + 1;
            uint64_t v4 = *(void *)(a1 + 8);
            if ((v4 & 1) == 0) {
              goto LABEL_13;
            }
            goto LABEL_20;
          }
        }
        else if ((v2 & 8) == 0)
        {
          goto LABEL_11;
        }
        int v8 = *(_DWORD *)(a1 + 44);
        if (v8 < 0)
        {
          v3 += 11;
          if ((v2 & 0x10) != 0) {
            goto LABEL_19;
          }
        }
        else
        {
          v3 += ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
          if ((v2 & 0x10) != 0) {
            goto LABEL_19;
          }
        }
LABEL_12:
        uint64_t v4 = *(void *)(a1 + 8);
        if ((v4 & 1) == 0) {
          goto LABEL_13;
        }
        goto LABEL_20;
      }
    }
    uint64_t v6 = sub_15B0D90(*(void *)(a1 + 32));
    v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    goto LABEL_9;
  }
  uint64_t v3 = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  if ((v4 & 1) == 0)
  {
LABEL_13:
    *(_DWORD *)(a1 + 20) = v3;
    return v3;
  }
LABEL_20:
  unint64_t v9 = v4 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v9 + 31) < 0) {
    uint64_t v10 = *(void *)(v9 + 16);
  }
  else {
    uint64_t v10 = *(unsigned __int8 *)(v9 + 31);
  }
  uint64_t v11 = v10 + v3;
  *(_DWORD *)(a1 + 20) = v11;
  return v11;
}

void sub_10F3A1C(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 0x1F) != 0)
  {
    if (v4)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v6 = *(std::string **)(a1 + 24);
      if (!v6)
      {
        uint64_t v7 = *(void *)(a1 + 8);
        int v8 = (void *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
        if (v7) {
          int v8 = (void *)*v8;
        }
        uint64_t v6 = (std::string *)sub_1479600((uint64_t)v8);
        *(void *)(a1 + 24) = v6;
      }
      if (*(void *)(a2 + 24)) {
        unint64_t v9 = *(uint64_t (****)())(a2 + 24);
      }
      else {
        unint64_t v9 = &off_2539AC8;
      }
      sub_1113E40(v6, (uint64_t)v9);
      if ((v4 & 2) == 0)
      {
LABEL_4:
        if ((v4 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_29;
      }
    }
    else if ((v4 & 2) == 0)
    {
      goto LABEL_4;
    }
    *(_DWORD *)(a1 + 16) |= 2u;
    uint64_t v10 = *(void *)(a1 + 32);
    if (!v10)
    {
      uint64_t v11 = *(void *)(a1 + 8);
      unsigned int v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      if (v11) {
        unsigned int v12 = (void *)*v12;
      }
      uint64_t v10 = sub_15C1918((uint64_t)v12);
      *(void *)(a1 + 32) = v10;
    }
    if (*(void *)(a2 + 32)) {
      unsigned int v13 = *(uint64_t (****)())(a2 + 32);
    }
    else {
      unsigned int v13 = &off_253F1A0;
    }
    sub_15B0E24(v10, (uint64_t)v13);
    if ((v4 & 4) == 0)
    {
LABEL_5:
      if ((v4 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_30;
    }
LABEL_29:
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_6:
      if ((v4 & 0x10) == 0)
      {
LABEL_8:
        *(_DWORD *)(a1 + 16) |= v4;
        goto LABEL_9;
      }
LABEL_7:
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      goto LABEL_8;
    }
LABEL_30:
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
    if ((v4 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_9:
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

uint64_t sub_10F3B64(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 2) == 0) {
    return 1;
  }
  uint64_t result = sub_15B0F18(*(void *)(a1 + 32));
  if (result) {
    return 1;
  }
  return result;
}

char *sub_10F3B90@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_20E12D0;
  strcpy(result, "geo3.SessionState.TripData.RerouteInfo");
  return result;
}

uint64_t sub_10F3BE4(uint64_t a1)
{
  uint64_t v3 = (void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_8;
    }
  }
  else if (v4)
  {
    goto LABEL_8;
  }
  uint64_t v5 = *(void *)(a1 + 8) & 1;
  if ((uint64_t (***)())a1 != &off_24F7B28)
  {
    uint64_t v6 = *(void **)(a1 + 96);
    if (v6)
    {
      sub_10F0888(v6);
      operator delete();
    }
  }
  if (v5) {
    sub_10E4F74(v3);
  }
LABEL_8:
  uint64_t v7 = *(uint64_t **)(a1 + 88);
  if (v7 && !*(void *)(a1 + 72))
  {
    int v8 = v7 + 1;
    uint64_t v9 = *(unsigned int *)v7;
    if ((int)v9 >= 1)
    {
      do
      {
        if (*v8)
        {
          sub_10F2E98(*v8);
          operator delete();
        }
        ++v8;
        --v9;
      }
      while (v9);
      uint64_t v7 = *(uint64_t **)(a1 + 88);
    }
    operator delete(v7);
  }
  *(void *)(a1 + 88) = 0;
  uint64_t v10 = *(uint64_t **)(a1 + 64);
  if (v10 && !*(void *)(a1 + 48))
  {
    uint64_t v11 = v10 + 1;
    uint64_t v12 = *(unsigned int *)v10;
    if ((int)v12 >= 1)
    {
      do
      {
        if (*v11)
        {
          sub_10F22A0(*v11);
          operator delete();
        }
        ++v11;
        --v12;
      }
      while (v12);
      uint64_t v10 = *(uint64_t **)(a1 + 64);
    }
    operator delete(v10);
  }
  *(void *)(a1 + 64) = 0;
  unsigned int v13 = *(unsigned int **)(a1 + 40);
  if (v13 && !*(void *)(a1 + 24))
  {
    unint64_t v16 = (void **)(v13 + 2);
    uint64_t v17 = *v13;
    if ((int)v17 >= 1)
    {
      do
      {
        if (*v16)
        {
          sub_10E7DEC(*v16);
          operator delete();
        }
        ++v16;
        --v17;
      }
      while (v17);
      unsigned int v13 = *(unsigned int **)(a1 + 40);
    }
    operator delete(v13);
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = off_24E6998;
    uint64_t v14 = *(void *)(a1 + 8);
    if ((v14 & 2) == 0) {
      return a1;
    }
  }
  else
  {
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = off_24E6998;
    uint64_t v14 = *(void *)(a1 + 8);
    if ((v14 & 2) == 0) {
      return a1;
    }
  }
  unsigned int v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
  if (v14)
  {
    if (*v15)
    {
LABEL_31:
      sub_1881618();
      operator delete();
    }
  }
  else if (v15)
  {
    goto LABEL_31;
  }
  return a1;
}

void sub_10F3E30(uint64_t a1)
{
  sub_10F3BE4(a1);

  operator delete();
}

uint64_t sub_10F3E68(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 32);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(result + 40) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_10E7FF8(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 32) = 0;
  }
  uint64_t v5 = *(unsigned int *)(v1 + 56);
  if ((int)v5 >= 1)
  {
    uint64_t v6 = (uint64_t *)(*(void *)(v1 + 64) + 8);
    do
    {
      uint64_t v7 = *v6++;
      uint64_t result = sub_10F2460(v7);
      --v5;
    }
    while (v5);
    *(_DWORD *)(v1 + 56) = 0;
  }
  uint64_t v8 = *(unsigned int *)(v1 + 80);
  if ((int)v8 >= 1)
  {
    uint64_t v9 = *(void *)(v1 + 88) + 8;
    do
    {
      uint64_t v10 = *(void *)v9;
      int v11 = *(_DWORD *)(*(void *)v9 + 16);
      if ((v11 & 3) != 0)
      {
        if (v11) {
          uint64_t result = sub_1396114(*(void *)(v10 + 24));
        }
        if ((v11 & 2) != 0) {
          uint64_t result = (uint64_t)sub_15B09D0(*(void *)(v10 + 32));
        }
      }
      if ((v11 & 0x1C) != 0)
      {
        *(void *)(v10 + 40) = 0;
        *(void *)(v10 + 48) = 0;
      }
      char v13 = *(unsigned char *)(v10 + 8);
      uint64_t v12 = v10 + 8;
      *(_DWORD *)(v12 + 8) = 0;
      if (v13) {
        uint64_t result = sub_188B4AC((uint64_t *)v12);
      }
      v9 += 8;
      --v8;
    }
    while (v8);
    *(_DWORD *)(v1 + 80) = 0;
  }
  int v14 = *(_DWORD *)(v1 + 16);
  if (v14)
  {
    uint64_t v15 = *(void *)(v1 + 96);
    uint64_t v16 = *(unsigned int *)(v15 + 32);
    if ((int)v16 >= 1)
    {
      uint64_t v17 = *(void *)(v15 + 40) + 8;
      do
      {
        uint64_t v18 = *(void *)v17;
        int v19 = *(_DWORD *)(*(void *)v17 + 16);
        if (v19) {
          uint64_t result = sub_15B043C(*(void *)(v18 + 24));
        }
        if ((v19 & 0x3E) != 0)
        {
          *(void *)(v18 + 32) = 0;
          *(void *)(v18 + 40) = 0;
          *(unsigned char *)(v18 + 48) = 0;
        }
        char v21 = *(unsigned char *)(v18 + 8);
        uint64_t v20 = v18 + 8;
        *(_DWORD *)(v20 + 8) = 0;
        if (v21) {
          uint64_t result = sub_188B4AC((uint64_t *)v20);
        }
        v17 += 8;
        --v16;
      }
      while (v16);
      *(_DWORD *)(v15 + 32) = 0;
    }
    char v23 = *(unsigned char *)(v15 + 8);
    uint64_t v22 = v15 + 8;
    *(void *)(v22 + 40) = 0;
    *(_DWORD *)(v22 + 8) = 0;
    if (v23) {
      uint64_t result = sub_188B4AC((uint64_t *)v22);
    }
  }
  if ((v14 & 0x7E) != 0)
  {
    *(void *)(v1 + 104) = 0;
    *(void *)(v1 + 112) = 0;
    *(void *)(v1 + 120) = 0;
  }
  char v25 = *(unsigned char *)(v1 + 8);
  uint64_t v24 = v1 + 8;
  *(_DWORD *)(v24 + 8) = 0;
  if (v25)
  {
    return sub_188B4AC((uint64_t *)v24);
  }
  return result;
}

unsigned __int8 *sub_10F4034(uint64_t a1, unsigned __int8 *a2, int32x2_t *a3)
{
  int v6 = 0;
  uint64_t v7 = (uint64_t *)(a1 + 8);
  uint64_t v8 = (uint64_t *)(a1 + 72);
  uint64_t v9 = (uint64_t *)(a1 + 48);
  uint64_t v10 = (uint64_t *)(a1 + 24);
  while (1)
  {
LABEL_4:
    if ((unint64_t)a2 < *(void *)a3) {
      goto LABEL_5;
    }
    int v57 = a2 - a3[1].i32[0];
    if (a3[3].i32[1] == v57) {
      break;
    }
    a2 = (unsigned __int8 *)sub_188BB90((uint64_t)a3, v57, a3[11].i32[1]);
    if (v58) {
      goto LABEL_128;
    }
LABEL_5:
    int v11 = a2 + 1;
    unsigned int v12 = *a2;
    if (((char)*a2 & 0x80000000) == 0)
    {
      unsigned int v13 = (v12 >> 3) - 1;
LABEL_7:
      switch(v13)
      {
        case 0u:
          if (v12 != 8) {
            goto LABEL_17;
          }
          v6 |= 2u;
          a2 = v11 + 1;
          int v14 = *v11;
          if (((char)*v11 & 0x80000000) == 0) {
            goto LABEL_12;
          }
          int v14 = v14 + (*a2 << 7) - 128;
          if ((char)*a2 < 0)
          {
            a2 = (unsigned __int8 *)sub_188C0D0((uint64_t)v11, v14);
            *(_DWORD *)(a1 + 104) = v51;
            if (!a2) {
              goto LABEL_122;
            }
          }
          else
          {
            a2 = v11 + 2;
LABEL_12:
            *(_DWORD *)(a1 + 104) = v14;
          }
          continue;
        case 1u:
          if (v12 != 16) {
            goto LABEL_17;
          }
          v6 |= 4u;
          a2 = v11 + 1;
          int v18 = *v11;
          if (((char)*v11 & 0x80000000) == 0) {
            goto LABEL_28;
          }
          int v18 = v18 + (*a2 << 7) - 128;
          if ((char)*a2 < 0)
          {
            a2 = (unsigned __int8 *)sub_188C0D0((uint64_t)v11, v18);
            *(_DWORD *)(a1 + 108) = v52;
            if (!a2) {
              goto LABEL_122;
            }
          }
          else
          {
            a2 = v11 + 2;
LABEL_28:
            *(_DWORD *)(a1 + 108) = v18;
          }
          continue;
        case 2u:
          if (v12 != 26) {
            goto LABEL_17;
          }
          *(_DWORD *)(a1 + 16) |= 1u;
          int v19 = *(void **)(a1 + 96);
          if (v19)
          {
            int v61 = 0;
            uint64_t v20 = (char *)sub_188BEE0((uint64_t)a3, v11, &v61);
            if (v20) {
              goto LABEL_32;
            }
          }
          else
          {
            uint64_t v47 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
            if (*v7) {
              uint64_t v47 = (void *)*v47;
            }
            int v19 = sub_10F9614((uint64_t)v47);
            *(void *)(a1 + 96) = v19;
            int v61 = 0;
            uint64_t v20 = (char *)sub_188BEE0((uint64_t)a3, v11, &v61);
            if (v20)
            {
LABEL_32:
              a2 = (unsigned __int8 *)sub_10F0ACC((uint64_t)v19, v20, a3);
              ++a3[11].i32[0];
              if (a3[10].i32[0]) {
                goto LABEL_122;
              }
              goto LABEL_96;
            }
          }
          a2 = 0;
          ++a3[11].i32[0];
          if (a3[10].i32[0]) {
            goto LABEL_122;
          }
LABEL_96:
          int v48 = a3[3].i32[1] + v61;
          a3[3].i32[1] = v48;
          *a3 = (int32x2_t)(*(void *)&a3[1] + (v48 & (v48 >> 31)));
          if (!a2) {
            goto LABEL_122;
          }
          continue;
        case 3u:
          if (v12 != 34) {
            goto LABEL_17;
          }
          a2 = v11 - 1;
          while (1)
          {
            char v21 = *(_DWORD **)(a1 + 40);
            if (v21 && (uint64_t v22 = *(int *)(a1 + 32), (int)v22 < *v21))
            {
              *(_DWORD *)(a1 + 32) = v22 + 1;
              uint64_t v23 = *(void *)&v21[2 * v22 + 2];
              int v61 = 0;
              uint64_t v24 = (unsigned __int8 *)sub_188BEE0((uint64_t)a3, a2 + 1, &v61);
              if (v24) {
                goto LABEL_42;
              }
            }
            else
            {
              char v25 = sub_10F9004(*v10);
              uint64_t v23 = sub_188CDC8((uint64_t)v10, (uint64_t)v25);
              int v61 = 0;
              uint64_t v24 = (unsigned __int8 *)sub_188BEE0((uint64_t)a3, a2 + 1, &v61);
              if (v24)
              {
LABEL_42:
                a2 = sub_10E80E4(v23, v24, a3);
                ++a3[11].i32[0];
                if (a3[10].i32[0]) {
                  goto LABEL_122;
                }
                goto LABEL_43;
              }
            }
            a2 = 0;
            ++a3[11].i32[0];
            if (a3[10].i32[0]) {
              goto LABEL_122;
            }
LABEL_43:
            int v26 = a3[3].i32[1] + v61;
            a3[3].i32[1] = v26;
            int32x2_t v27 = (int32x2_t)(*(void *)&a3[1] + (v26 & (v26 >> 31)));
            *a3 = v27;
            if (!a2) {
              goto LABEL_122;
            }
            if (*(void *)&v27 <= (unint64_t)a2 || *a2 != 34) {
              goto LABEL_4;
            }
          }
        case 4u:
          if (v12 != 42) {
            goto LABEL_17;
          }
          a2 = v11 - 1;
          while (1)
          {
            uint64_t v28 = *(_DWORD **)(a1 + 64);
            if (v28 && (uint64_t v29 = *(int *)(a1 + 56), (int)v29 < *v28))
            {
              *(_DWORD *)(a1 + 56) = v29 + 1;
              uint64_t v30 = *(void *)&v28[2 * v29 + 2];
              int v61 = 0;
              int v31 = (unsigned __int8 *)sub_188BEE0((uint64_t)a3, a2 + 1, &v61);
              if (v31) {
                goto LABEL_55;
              }
            }
            else
            {
              char v32 = sub_10F97B4(*v9);
              uint64_t v30 = sub_188CDC8((uint64_t)v9, (uint64_t)v32);
              int v61 = 0;
              int v31 = (unsigned __int8 *)sub_188BEE0((uint64_t)a3, a2 + 1, &v61);
              if (v31)
              {
LABEL_55:
                a2 = sub_10F253C(v30, v31, a3);
                ++a3[11].i32[0];
                if (a3[10].i32[0]) {
                  goto LABEL_122;
                }
                goto LABEL_56;
              }
            }
            a2 = 0;
            ++a3[11].i32[0];
            if (a3[10].i32[0]) {
              goto LABEL_122;
            }
LABEL_56:
            int v33 = a3[3].i32[1] + v61;
            a3[3].i32[1] = v33;
            int32x2_t v34 = (int32x2_t)(*(void *)&a3[1] + (v33 & (v33 >> 31)));
            *a3 = v34;
            if (!a2) {
              goto LABEL_122;
            }
            if (*(void *)&v34 <= (unint64_t)a2 || *a2 != 42) {
              goto LABEL_4;
            }
          }
        case 5u:
          if (v12 != 48) {
            goto LABEL_17;
          }
          v6 |= 8u;
          a2 = v11 + 1;
          int v35 = *v11;
          if (((char)*v11 & 0x80000000) == 0) {
            goto LABEL_64;
          }
          int v35 = v35 + (*a2 << 7) - 128;
          if ((char)*a2 < 0)
          {
            a2 = (unsigned __int8 *)sub_188C0D0((uint64_t)v11, v35);
            *(_DWORD *)(a1 + 112) = v53;
            if (!a2) {
              goto LABEL_122;
            }
          }
          else
          {
            a2 = v11 + 2;
LABEL_64:
            *(_DWORD *)(a1 + 112) = v35;
          }
          continue;
        case 6u:
          if (v12 != 56) {
            goto LABEL_17;
          }
          v6 |= 0x10u;
          a2 = v11 + 1;
          int v36 = *v11;
          if (((char)*v11 & 0x80000000) == 0) {
            goto LABEL_69;
          }
          int v36 = v36 + (*a2 << 7) - 128;
          if ((char)*a2 < 0)
          {
            a2 = (unsigned __int8 *)sub_188C0D0((uint64_t)v11, v36);
            *(_DWORD *)(a1 + 116) = v54;
            if (!a2) {
              goto LABEL_122;
            }
          }
          else
          {
            a2 = v11 + 2;
LABEL_69:
            *(_DWORD *)(a1 + 116) = v36;
          }
          continue;
        case 7u:
          if (v12 != 64) {
            goto LABEL_17;
          }
          v6 |= 0x20u;
          a2 = v11 + 1;
          int v37 = *v11;
          if (((char)*v11 & 0x80000000) == 0) {
            goto LABEL_3;
          }
          int v37 = v37 + (*a2 << 7) - 128;
          if ((char)*a2 < 0)
          {
            a2 = (unsigned __int8 *)sub_188C0D0((uint64_t)v11, v37);
            *(_DWORD *)(a1 + 120) = v38;
            if (!a2) {
              goto LABEL_122;
            }
          }
          else
          {
            a2 = v11 + 2;
LABEL_3:
            *(_DWORD *)(a1 + 120) = v37;
          }
          continue;
        case 8u:
          if (v12 != 74) {
            goto LABEL_17;
          }
          a2 = v11 - 1;
          break;
        case 0x1Au:
          if (v12 != 216) {
            goto LABEL_17;
          }
          a2 = v11 + 1;
          unint64_t v46 = *v11;
          if ((char)*v11 < 0)
          {
            int v49 = v46 + (*a2 << 7);
            unint64_t v46 = (v49 - 128);
            if ((char)*a2 < 0)
            {
              uint64_t v55 = sub_188C138((uint64_t)v11, (v49 - 128));
              if (!v55) {
                goto LABEL_122;
              }
              a2 = (unsigned __int8 *)v55;
              unint64_t v46 = v56;
              if (sub_138DE04(v56))
              {
LABEL_91:
                *(_DWORD *)(a1 + 16) |= 0x40u;
                *(_DWORD *)(a1 + 124) = v46;
                continue;
              }
            }
            else
            {
              a2 = v11 + 2;
              if (sub_138DE04(v49 - 128)) {
                goto LABEL_91;
              }
            }
          }
          else if (sub_138DE04(*v11))
          {
            goto LABEL_91;
          }
          if (*v7) {
            uint64_t v50 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            uint64_t v50 = (std::string *)sub_188DBD8(v7);
          }
          sub_188C020(27, v46, v50);
          continue;
        default:
          goto LABEL_17;
      }
      while (1)
      {
        uint64_t v39 = *(_DWORD **)(a1 + 88);
        if (v39 && (uint64_t v40 = *(int *)(a1 + 80), (int)v40 < *v39))
        {
          *(_DWORD *)(a1 + 80) = v40 + 1;
          uint64_t v41 = *(void *)&v39[2 * v40 + 2];
          int v61 = 0;
          uint64_t v42 = (char *)sub_188BEE0((uint64_t)a3, a2 + 1, &v61);
          if (v42) {
            goto LABEL_83;
          }
        }
        else
        {
          sub_10F985C(*v8);
          uint64_t v41 = sub_188CDC8((uint64_t)v8, v43);
          int v61 = 0;
          uint64_t v42 = (char *)sub_188BEE0((uint64_t)a3, a2 + 1, &v61);
          if (v42)
          {
LABEL_83:
            a2 = (unsigned __int8 *)sub_10F304C(v41, v42, a3);
            ++a3[11].i32[0];
            if (a3[10].i32[0]) {
              goto LABEL_122;
            }
            goto LABEL_84;
          }
        }
        a2 = 0;
        ++a3[11].i32[0];
        if (a3[10].i32[0]) {
          goto LABEL_122;
        }
LABEL_84:
        int v44 = a3[3].i32[1] + v61;
        a3[3].i32[1] = v44;
        int32x2_t v45 = (int32x2_t)(*(void *)&a3[1] + (v44 & (v44 >> 31)));
        *a3 = v45;
        if (!a2) {
          goto LABEL_122;
        }
        if (*(void *)&v45 <= (unint64_t)a2 || *a2 != 74) {
          goto LABEL_4;
        }
      }
    }
    unsigned int v15 = v12 + (*v11 << 7);
    unsigned int v12 = v15 - 128;
    if ((char)*v11 < 0)
    {
      int v11 = (unsigned __int8 *)sub_188C180((uint64_t)a2, v15 - 128);
      unsigned int v12 = v16;
      unsigned int v13 = (v16 >> 3) - 1;
      if (v13 <= 0x1A) {
        goto LABEL_7;
      }
    }
    else
    {
      int v11 = a2 + 2;
      unsigned int v13 = (v12 >> 3) - 1;
      if (v13 <= 0x1A) {
        goto LABEL_7;
      }
    }
LABEL_17:
    if (v12) {
      BOOL v17 = (v12 & 7) == 4;
    }
    else {
      BOOL v17 = 1;
    }
    if (v17)
    {
      if (v11) {
        a3[10].i32[0] = v12 - 1;
      }
      goto LABEL_123;
    }
    if (*v7)
    {
      a2 = sub_1885AC0(v12, (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8), (char *)v11, a3);
      if (!a2) {
        goto LABEL_122;
      }
    }
    else
    {
      unint64_t v59 = (std::string *)sub_188DBD8(v7);
      a2 = sub_1885AC0(v12, v59, (char *)v11, a3);
      if (!a2)
      {
LABEL_122:
        int v11 = 0;
        goto LABEL_123;
      }
    }
  }
  if (v57 < 1)
  {
LABEL_128:
    int v11 = a2;
  }
  else if (a3[2])
  {
    int v11 = a2;
  }
  else
  {
    int v11 = 0;
  }
LABEL_123:
  *(_DWORD *)(a1 + 16) |= v6;
  return v11;
}

unsigned char *sub_10F48C0(uint64_t a1, unsigned char *__dst, _DWORD *a3)
{
  uint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 2) != 0)
  {
    if (*(void *)a3 <= (unint64_t)__dst)
    {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)__dst);
      unsigned int v7 = *(_DWORD *)(a1 + 104);
      *uint64_t v4 = 8;
      v4[1] = v7;
      if (v7 <= 0x7F) {
        goto LABEL_4;
      }
    }
    else
    {
      unsigned int v7 = *(_DWORD *)(a1 + 104);
      *long long __dst = 8;
      __dst[1] = v7;
      if (v7 <= 0x7F)
      {
LABEL_4:
        v4 += 2;
        goto LABEL_8;
      }
    }
    v4[1] = v7 | 0x80;
    unsigned int v8 = v7 >> 7;
    v4[2] = v7 >> 7;
    v4 += 3;
    if (v7 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unsigned int v9 = v8 >> 14;
        v8 >>= 7;
        *v4++ = v8;
      }
      while (v9);
    }
  }
LABEL_8:
  if ((v6 & 4) == 0) {
    goto LABEL_15;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unsigned int v10 = *(_DWORD *)(a1 + 108);
    *uint64_t v4 = 16;
    v4[1] = v10;
    if (v10 <= 0x7F) {
      goto LABEL_11;
    }
  }
  else
  {
    unsigned int v10 = *(_DWORD *)(a1 + 108);
    *uint64_t v4 = 16;
    v4[1] = v10;
    if (v10 <= 0x7F)
    {
LABEL_11:
      v4 += 2;
      goto LABEL_15;
    }
  }
  v4[1] = v10 | 0x80;
  unsigned int v11 = v10 >> 7;
  v4[2] = v10 >> 7;
  v4 += 3;
  if (v10 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unsigned int v12 = v11 >> 14;
      v11 >>= 7;
      *v4++ = v11;
    }
    while (v12);
  }
LABEL_15:
  if (v6)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v13 = *(void *)(a1 + 96);
    *uint64_t v4 = 26;
    unsigned int v14 = *(_DWORD *)(v13 + 20);
    v4[1] = v14;
    if (v14 > 0x7F) {
      unsigned int v15 = sub_188A9CC(v14, v4 + 1);
    }
    else {
      unsigned int v15 = v4 + 2;
    }
    uint64_t v4 = sub_10F0D84(v13, v15, a3);
  }
  int v16 = *(_DWORD *)(a1 + 32);
  if (v16)
  {
    for (int i = 0; i != v16; ++i)
    {
      if (*(void *)a3 <= (unint64_t)v4) {
        uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v19 = *(void *)(*(void *)(a1 + 40) + 8 * i + 8);
      *uint64_t v4 = 34;
      unsigned int v20 = *(_DWORD *)(v19 + 20);
      v4[1] = v20;
      if (v20 > 0x7F) {
        int v18 = sub_188A9CC(v20, v4 + 1);
      }
      else {
        int v18 = v4 + 2;
      }
      uint64_t v4 = sub_10E848C(v19, v18, a3);
    }
  }
  int v21 = *(_DWORD *)(a1 + 56);
  if (v21)
  {
    for (int j = 0; j != v21; ++j)
    {
      if (*(void *)a3 <= (unint64_t)v4) {
        uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v24 = *(void *)(*(void *)(a1 + 64) + 8 * j + 8);
      *uint64_t v4 = 42;
      unsigned int v25 = *(_DWORD *)(v24 + 20);
      v4[1] = v25;
      if (v25 > 0x7F) {
        uint64_t v23 = sub_188A9CC(v25, v4 + 1);
      }
      else {
        uint64_t v23 = v4 + 2;
      }
      uint64_t v4 = sub_10F28A4(v24, v23, a3);
    }
  }
  if ((v6 & 8) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      unsigned int v26 = *(_DWORD *)(a1 + 112);
      *uint64_t v4 = 48;
      v4[1] = v26;
      if (v26 <= 0x7F) {
        goto LABEL_41;
      }
    }
    else
    {
      unsigned int v26 = *(_DWORD *)(a1 + 112);
      *uint64_t v4 = 48;
      v4[1] = v26;
      if (v26 <= 0x7F)
      {
LABEL_41:
        v4 += 2;
        goto LABEL_45;
      }
    }
    v4[1] = v26 | 0x80;
    unsigned int v27 = v26 >> 7;
    v4[2] = v26 >> 7;
    v4 += 3;
    if (v26 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unsigned int v28 = v27 >> 14;
        v27 >>= 7;
        *v4++ = v27;
      }
      while (v28);
    }
  }
LABEL_45:
  if ((v6 & 0x10) == 0) {
    goto LABEL_52;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unsigned int v29 = *(_DWORD *)(a1 + 116);
    *uint64_t v4 = 56;
    v4[1] = v29;
    if (v29 <= 0x7F) {
      goto LABEL_48;
    }
  }
  else
  {
    unsigned int v29 = *(_DWORD *)(a1 + 116);
    *uint64_t v4 = 56;
    v4[1] = v29;
    if (v29 <= 0x7F)
    {
LABEL_48:
      v4 += 2;
      goto LABEL_52;
    }
  }
  v4[1] = v29 | 0x80;
  unsigned int v30 = v29 >> 7;
  v4[2] = v29 >> 7;
  v4 += 3;
  if (v29 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unsigned int v31 = v30 >> 14;
      v30 >>= 7;
      *v4++ = v30;
    }
    while (v31);
  }
LABEL_52:
  if ((v6 & 0x20) == 0) {
    goto LABEL_59;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unsigned int v32 = *(_DWORD *)(a1 + 120);
    *uint64_t v4 = 64;
    v4[1] = v32;
    if (v32 <= 0x7F) {
      goto LABEL_55;
    }
  }
  else
  {
    unsigned int v32 = *(_DWORD *)(a1 + 120);
    *uint64_t v4 = 64;
    v4[1] = v32;
    if (v32 <= 0x7F)
    {
LABEL_55:
      v4 += 2;
      goto LABEL_59;
    }
  }
  v4[1] = v32 | 0x80;
  unsigned int v33 = v32 >> 7;
  v4[2] = v32 >> 7;
  v4 += 3;
  if (v32 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unsigned int v34 = v33 >> 14;
      v33 >>= 7;
      *v4++ = v33;
    }
    while (v34);
  }
LABEL_59:
  int v35 = *(_DWORD *)(a1 + 80);
  if (v35)
  {
    for (int k = 0; k != v35; ++k)
    {
      if (*(void *)a3 <= (unint64_t)v4) {
        uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v38 = *(void *)(*(void *)(a1 + 88) + 8 * k + 8);
      *uint64_t v4 = 74;
      unsigned int v39 = *(_DWORD *)(v38 + 20);
      v4[1] = v39;
      if (v39 > 0x7F) {
        int v37 = sub_188A9CC(v39, v4 + 1);
      }
      else {
        int v37 = v4 + 2;
      }
      uint64_t v4 = sub_10F3518(v38, (unint64_t)v37, a3);
    }
  }
  if ((v6 & 0x40) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      unint64_t v40 = *(int *)(a1 + 124);
      *(_WORD *)uint64_t v4 = 472;
      v4[2] = v40;
      if (v40 <= 0x7F) {
        goto LABEL_70;
      }
    }
    else
    {
      unint64_t v40 = *(int *)(a1 + 124);
      *(_WORD *)uint64_t v4 = 472;
      v4[2] = v40;
      if (v40 <= 0x7F)
      {
LABEL_70:
        v4 += 3;
        goto LABEL_74;
      }
    }
    v4[2] = v40 | 0x80;
    unint64_t v41 = v40 >> 7;
    v4[3] = v40 >> 7;
    v4 += 4;
    if (v40 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unint64_t v42 = v41 >> 14;
        v41 >>= 7;
        *v4++ = v41;
      }
      while (v42);
    }
  }
LABEL_74:
  uint64_t v43 = *(void *)(a1 + 8);
  if ((v43 & 1) == 0) {
    return v4;
  }
  unint64_t v45 = v43 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v45 + 31) < 0)
  {
    unint64_t v46 = *(void **)(v45 + 8);
    uint64_t v47 = *(void *)(v45 + 16);
  }
  else
  {
    unint64_t v46 = (void *)(v45 + 8);
    LODWORD(v47) = *(unsigned __int8 *)(v45 + 31);
  }
  uint64_t v48 = (int)v47;
  if (*(void *)a3 - (void)v4 >= (int)v47)
  {
    memcpy(v4, v46, (int)v47);
    v4 += v48;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v46, v47, v4);
}

uint64_t sub_10F4ED4(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = (uint64_t *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = sub_10E8720(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v8 = *(int *)(a1 + 56);
  uint64_t v9 = v2 + v8;
  uint64_t v10 = *(void *)(a1 + 64);
  if (v10) {
    unsigned int v11 = (uint64_t *)(v10 + 8);
  }
  else {
    unsigned int v11 = 0;
  }
  if (v8)
  {
    uint64_t v12 = 8 * v8;
    do
    {
      uint64_t v13 = *v11++;
      uint64_t v14 = sub_10F2A50(v13);
      v9 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6);
      v12 -= 8;
    }
    while (v12);
  }
  uint64_t v15 = *(int *)(a1 + 80);
  uint64_t v16 = v9 + v15;
  uint64_t v17 = *(void *)(a1 + 88);
  if (v17) {
    int v18 = (uint64_t *)(v17 + 8);
  }
  else {
    int v18 = 0;
  }
  if (v15)
  {
    uint64_t v19 = 8 * v15;
    do
    {
      uint64_t v20 = *v18++;
      uint64_t v21 = sub_10F3890(v20);
      v16 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6);
      v19 -= 8;
    }
    while (v19);
  }
  int v22 = *(_DWORD *)(a1 + 16);
  if ((v22 & 0x7F) != 0)
  {
    if ((v22 & 1) == 0)
    {
      if ((v22 & 2) == 0) {
        goto LABEL_24;
      }
      goto LABEL_49;
    }
    uint64_t v28 = *(void *)(a1 + 96);
    uint64_t v29 = *(int *)(v28 + 32);
    uint64_t v30 = *(void *)(v28 + 40);
    if (v30) {
      unsigned int v31 = (uint64_t *)(v30 + 8);
    }
    else {
      unsigned int v31 = 0;
    }
    if (v29)
    {
      uint64_t v32 = 8 * v29;
      do
      {
        uint64_t v33 = *v31++;
        uint64_t v34 = sub_10F057C(v33);
        v29 += v34 + ((9 * (__clz(v34 | 1) ^ 0x1F) + 73) >> 6);
        v32 -= 8;
      }
      while (v32);
      uint64_t v35 = v29 + 9;
      if ((*(unsigned char *)(v28 + 16) & 1) == 0) {
        uint64_t v35 = v29;
      }
      uint64_t v36 = *(void *)(v28 + 8);
      if (v36)
      {
LABEL_59:
        unint64_t v39 = v36 & 0xFFFFFFFFFFFFFFFCLL;
        if (*(char *)(v39 + 31) < 0) {
          uint64_t v40 = *(void *)(v39 + 16);
        }
        else {
          uint64_t v40 = *(unsigned __int8 *)(v39 + 31);
        }
        v35 += v40;
      }
    }
    else
    {
      uint64_t v35 = 9;
      if ((*(unsigned char *)(v28 + 16) & 1) == 0) {
        uint64_t v35 = 0;
      }
      uint64_t v36 = *(void *)(v28 + 8);
      if (v36) {
        goto LABEL_59;
      }
    }
    *(_DWORD *)(v28 + 20) = v35;
    v16 += v35 + ((9 * (__clz(v35 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v22 & 2) == 0)
    {
LABEL_24:
      if ((v22 & 4) == 0) {
        goto LABEL_25;
      }
      goto LABEL_50;
    }
LABEL_49:
    v16 += ((9 * (__clz(*(_DWORD *)(a1 + 104) | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v22 & 4) == 0)
    {
LABEL_25:
      if ((v22 & 8) == 0) {
        goto LABEL_26;
      }
      goto LABEL_51;
    }
LABEL_50:
    v16 += ((9 * (__clz(*(_DWORD *)(a1 + 108) | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v22 & 8) == 0)
    {
LABEL_26:
      if ((v22 & 0x10) == 0) {
        goto LABEL_27;
      }
      goto LABEL_52;
    }
LABEL_51:
    v16 += ((9 * (__clz(*(_DWORD *)(a1 + 112) | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v22 & 0x10) == 0)
    {
LABEL_27:
      if ((v22 & 0x20) == 0) {
        goto LABEL_28;
      }
      goto LABEL_53;
    }
LABEL_52:
    v16 += ((9 * (__clz(*(_DWORD *)(a1 + 116) | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v22 & 0x20) == 0)
    {
LABEL_28:
      if ((v22 & 0x40) == 0) {
        goto LABEL_33;
      }
LABEL_29:
      int v23 = *(_DWORD *)(a1 + 124);
      uint64_t v24 = ((9 * (__clz(v23 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if (v23 >= 0) {
        uint64_t v25 = v24;
      }
      else {
        uint64_t v25 = 12;
      }
      v16 += v25;
      goto LABEL_33;
    }
LABEL_53:
    v16 += ((9 * (__clz(*(_DWORD *)(a1 + 120) | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v22 & 0x40) == 0) {
      goto LABEL_33;
    }
    goto LABEL_29;
  }
LABEL_33:
  uint64_t v26 = *(void *)(a1 + 8);
  if (v26)
  {
    unint64_t v37 = v26 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v37 + 31) < 0) {
      uint64_t v38 = *(void *)(v37 + 16);
    }
    else {
      uint64_t v38 = *(unsigned __int8 *)(v37 + 31);
    }
    v16 += v38;
  }
  *(_DWORD *)(a1 + 20) = v16;
  return v16;
}

void sub_10F522C(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 40) + 8);
    uint64_t v6 = (std::string **)sub_188CCE4(a1 + 24, *(_DWORD *)(a2 + 32));
    sub_10FAACC((std::string *)(a1 + 24), v6, v5, v4, **(_DWORD **)(a1 + 40) - *(_DWORD *)(a1 + 32));
    int v7 = *(_DWORD *)(a1 + 32) + v4;
    *(_DWORD *)(a1 + 32) = v7;
    uint64_t v8 = *(int **)(a1 + 40);
    if (*v8 < v7) {
      *uint64_t v8 = v7;
    }
  }
  int v9 = *(_DWORD *)(a2 + 56);
  if (v9)
  {
    uint64_t v10 = (uint64_t *)(*(void *)(a2 + 64) + 8);
    unsigned int v11 = (std::string **)sub_188CCE4(a1 + 48, *(_DWORD *)(a2 + 56));
    sub_10FB1B8((std::string *)(a1 + 48), v11, v10, v9, **(_DWORD **)(a1 + 64) - *(_DWORD *)(a1 + 56));
    int v12 = *(_DWORD *)(a1 + 56) + v9;
    *(_DWORD *)(a1 + 56) = v12;
    uint64_t v13 = *(int **)(a1 + 64);
    if (*v13 < v12) {
      *uint64_t v13 = v12;
    }
  }
  int v14 = *(_DWORD *)(a2 + 80);
  if (v14)
  {
    uint64_t v15 = (uint64_t *)(*(void *)(a2 + 88) + 8);
    uint64_t v16 = (uint64_t *)sub_188CCE4(a1 + 72, *(_DWORD *)(a2 + 80));
    sub_10FB244((uint64_t *)(a1 + 72), v16, v15, v14, **(_DWORD **)(a1 + 88) - *(_DWORD *)(a1 + 80));
    int v17 = *(_DWORD *)(a1 + 80) + v14;
    *(_DWORD *)(a1 + 80) = v17;
    int v18 = *(int **)(a1 + 88);
    if (*v18 < v17) {
      *int v18 = v17;
    }
  }
  int v19 = *(_DWORD *)(a2 + 16);
  if ((v19 & 0x7F) != 0)
  {
    if (v19)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v20 = *(void **)(a1 + 96);
      if (!v20)
      {
        uint64_t v21 = *(void *)(a1 + 8);
        int v22 = (void *)(v21 & 0xFFFFFFFFFFFFFFFCLL);
        if (v21) {
          int v22 = (void *)*v22;
        }
        uint64_t v20 = sub_10F9614((uint64_t)v22);
        *(void *)(a1 + 96) = v20;
      }
      if (*(void *)(a2 + 96)) {
        int v23 = *(uint64_t (****)())(a2 + 96);
      }
      else {
        int v23 = &off_24F7A58;
      }
      int v24 = *((_DWORD *)v23 + 8);
      if (v24)
      {
        uint64_t v25 = (uint64_t *)(v23[5] + 1);
        uint64_t v26 = (uint64_t *)sub_188CCE4((uint64_t)(v20 + 3), *((_DWORD *)v23 + 8));
        sub_10FB04C(v20 + 3, v26, v25, v24, *(_DWORD *)v20[5] - *((_DWORD *)v20 + 8));
        int v27 = *((_DWORD *)v20 + 8) + v24;
        *((_DWORD *)v20 + 8) = v27;
        uint64_t v28 = (int *)v20[5];
        if (*v28 < v27) {
          *uint64_t v28 = v27;
        }
      }
      if ((_BYTE)v23[2])
      {
        uint64_t v29 = v23[6];
        *((_DWORD *)v20 + 4) |= 1u;
        v20[6] = v29;
      }
      unint64_t v30 = (unint64_t)v23[1];
      if (v30) {
        sub_188B4F8(v20 + 1, (v30 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
    }
    if ((v19 & 2) != 0)
    {
      *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
      if ((v19 & 4) == 0)
      {
LABEL_28:
        if ((v19 & 8) == 0) {
          goto LABEL_29;
        }
        goto LABEL_40;
      }
    }
    else if ((v19 & 4) == 0)
    {
      goto LABEL_28;
    }
    *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
    if ((v19 & 8) == 0)
    {
LABEL_29:
      if ((v19 & 0x10) == 0) {
        goto LABEL_30;
      }
      goto LABEL_41;
    }
LABEL_40:
    *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
    if ((v19 & 0x10) == 0)
    {
LABEL_30:
      if ((v19 & 0x20) == 0) {
        goto LABEL_31;
      }
      goto LABEL_42;
    }
LABEL_41:
    *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
    if ((v19 & 0x20) == 0)
    {
LABEL_31:
      if ((v19 & 0x40) == 0)
      {
LABEL_33:
        *(_DWORD *)(a1 + 16) |= v19;
        goto LABEL_34;
      }
LABEL_32:
      *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
      goto LABEL_33;
    }
LABEL_42:
    *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
    if ((v19 & 0x40) == 0) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
LABEL_34:
  uint64_t v31 = *(void *)(a2 + 8);
  if (v31)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v31 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

uint64_t sub_10F552C(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if ((int)v2 < 1)
  {
LABEL_7:
    if ((*(unsigned char *)(a1 + 16) & 1) != 0 && (uint64_t v6 = *(void *)(a1 + 96), v7 = *(unsigned int *)(v6 + 32), (int)v7 >= 1))
    {
      uint64_t v8 = v7 + 1;
      while (1)
      {
        uint64_t v9 = *(void *)(*(void *)(v6 + 40) + 8 * (v8 - 2) + 8);
        if (*(unsigned char *)(v9 + 16))
        {
          uint64_t result = sub_15B06D8(*(void *)(v9 + 24));
          if (!result) {
            break;
          }
        }
        if ((unint64_t)--v8 <= 1) {
          return 1;
        }
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    uint64_t v3 = v2 - 1;
    while (1)
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 88) + 8 * v3 + 8);
      if ((*(unsigned char *)(v4 + 16) & 2) != 0)
      {
        uint64_t result = sub_15B0F18(*(void *)(v4 + 32));
        if (!result) {
          break;
        }
      }
      if ((unint64_t)--v3 >= 0xFFFFFFFFFFFFFFFELL) {
        goto LABEL_7;
      }
    }
  }
  return result;
}

double sub_10F55F0@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_20B5EB0;
  strcpy(v2, "geo3.SessionState.TripData");
  return *(double *)"onState.TripData";
}

void *sub_10F5644(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }
  return a1;
}

void sub_10F56E4(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }

  operator delete();
}

uint64_t sub_10F57A4(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 3) != 0)
  {
    *(_DWORD *)(a1 + 32) = 0;
    *(void *)(a1 + 24) = 0;
  }
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_10F57CC(uint64_t a1, char *a2, int32x2_t *a3)
{
  int v6 = 0;
  uint64_t v7 = (uint64_t *)(a1 + 8);
  while (1)
  {
    if ((unint64_t)a2 < *(void *)a3) {
      goto LABEL_5;
    }
    int v20 = a2 - a3[1].i32[0];
    if (a3[3].i32[1] == v20) {
      break;
    }
    a2 = sub_188BB90((uint64_t)a3, v20, a3[11].i32[1]);
    if (v21) {
      goto LABEL_43;
    }
LABEL_5:
    uint64_t v9 = a2 + 1;
    unsigned int v10 = *a2;
    if (*a2 < 0)
    {
      unsigned int v13 = v10 + (*v9 << 7);
      unsigned int v10 = v13 - 128;
      if (*v9 < 0)
      {
        uint64_t v9 = (char *)sub_188C180((uint64_t)a2, v13 - 128);
        unsigned int v10 = v16;
        unsigned int v11 = v16 >> 3;
        if (v16 >> 3 != 2) {
          goto LABEL_7;
        }
      }
      else
      {
        uint64_t v9 = a2 + 2;
        unsigned int v11 = v10 >> 3;
        if (v10 >> 3 != 2) {
          goto LABEL_7;
        }
      }
      goto LABEL_18;
    }
    unsigned int v11 = v10 >> 3;
    if (v10 >> 3 == 2)
    {
LABEL_18:
      if (v10 != 16) {
        goto LABEL_11;
      }
      v6 |= 2u;
      a2 = v9 + 1;
      int v14 = *v9;
      if (*v9 < 0)
      {
        int v15 = *a2;
        int v14 = v14 + (v15 << 7) - 128;
        if ((v15 & 0x80000000) == 0)
        {
          a2 = v9 + 2;
          goto LABEL_22;
        }
        a2 = (char *)sub_188C0D0((uint64_t)v9, v14);
        *(_DWORD *)(a1 + 32) = v18;
        if (!a2) {
          goto LABEL_35;
        }
      }
      else
      {
LABEL_22:
        *(_DWORD *)(a1 + 32) = v14;
      }
    }
    else
    {
LABEL_7:
      if (v11 == 1 && v10 == 8)
      {
        v6 |= 1u;
        a2 = v9 + 1;
        uint64_t v8 = *v9;
        if ((*v9 & 0x80000000) == 0) {
          goto LABEL_3;
        }
        int v17 = *a2;
        uint64_t v8 = v8 + (v17 << 7) - 128;
        if (v17 < 0)
        {
          a2 = (char *)sub_188C138((uint64_t)v9, v8);
          *(void *)(a1 + 24) = v19;
          if (!a2) {
            goto LABEL_35;
          }
        }
        else
        {
          a2 = v9 + 2;
LABEL_3:
          *(void *)(a1 + 24) = v8;
        }
      }
      else
      {
LABEL_11:
        if (!v10 || (v10 & 7) == 4)
        {
          if (v9) {
            a3[10].i32[0] = v10 - 1;
          }
          goto LABEL_38;
        }
        if (*v7)
        {
          a2 = (char *)sub_1885AC0(v10, (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8), v9, a3);
          if (!a2) {
            goto LABEL_35;
          }
        }
        else
        {
          int v22 = (std::string *)sub_188DBD8(v7);
          a2 = (char *)sub_1885AC0(v10, v22, v9, a3);
          if (!a2)
          {
LABEL_35:
            uint64_t v9 = 0;
            goto LABEL_38;
          }
        }
      }
    }
  }
  if (v20 < 1)
  {
LABEL_43:
    uint64_t v9 = a2;
    goto LABEL_38;
  }
  if (a3[2]) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = 0;
  }
LABEL_38:
  *(_DWORD *)(a1 + 16) |= v6;
  return v9;
}

unsigned char *sub_10F5A04(uint64_t a1, unsigned char *__dst, _DWORD *a3)
{
  uint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*(void *)a3 <= (unint64_t)__dst)
    {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)__dst);
      unint64_t v7 = *(void *)(a1 + 24);
      *uint64_t v4 = 8;
      v4[1] = v7;
      if (v7 <= 0x7F) {
        goto LABEL_4;
      }
    }
    else
    {
      unint64_t v7 = *(void *)(a1 + 24);
      *long long __dst = 8;
      __dst[1] = v7;
      if (v7 <= 0x7F)
      {
LABEL_4:
        v4 += 2;
        goto LABEL_8;
      }
    }
    v4[1] = v7 | 0x80;
    unint64_t v8 = v7 >> 7;
    v4[2] = v7 >> 7;
    v4 += 3;
    if (v7 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unint64_t v9 = v8 >> 14;
        v8 >>= 7;
        *v4++ = v8;
      }
      while (v9);
    }
  }
LABEL_8:
  if ((v6 & 2) == 0) {
    goto LABEL_15;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unsigned int v10 = *(_DWORD *)(a1 + 32);
    *uint64_t v4 = 16;
    v4[1] = v10;
    if (v10 <= 0x7F) {
      goto LABEL_11;
    }
  }
  else
  {
    unsigned int v10 = *(_DWORD *)(a1 + 32);
    *uint64_t v4 = 16;
    v4[1] = v10;
    if (v10 <= 0x7F)
    {
LABEL_11:
      v4 += 2;
      goto LABEL_15;
    }
  }
  v4[1] = v10 | 0x80;
  unsigned int v11 = v10 >> 7;
  v4[2] = v10 >> 7;
  v4 += 3;
  if (v10 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unsigned int v12 = v11 >> 14;
      v11 >>= 7;
      *v4++ = v11;
    }
    while (v12);
  }
LABEL_15:
  uint64_t v13 = *(void *)(a1 + 8);
  if ((v13 & 1) == 0) {
    return v4;
  }
  unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v15 + 31) < 0)
  {
    unsigned int v16 = *(char **)(v15 + 8);
    uint64_t v17 = *(void *)(v15 + 16);
  }
  else
  {
    unsigned int v16 = (char *)(v15 + 8);
    LODWORD(v17) = *(unsigned __int8 *)(v15 + 31);
  }
  uint64_t v18 = (int)v17;
  if (*(void *)a3 - (void)v4 < (int)v17)
  {
    return (unsigned char *)sub_188A528(a3, v16, v17, v4);
  }
  else
  {
    memcpy(v4, v16, (int)v17);
    return &v4[v18];
  }
}

unint64_t sub_10F5BE0(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0)
  {
    unint64_t v2 = 0;
    goto LABEL_8;
  }
  if (v1)
  {
    unint64_t v2 = ((9 * (__clz(*(void *)(a1 + 24) | 1) ^ 0x3F) + 73) >> 6) + 1;
    if ((v1 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  unint64_t v2 = 0;
  if ((v1 & 2) != 0) {
LABEL_7:
  }
    v2 += ((9 * (__clz(*(_DWORD *)(a1 + 32) | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    unint64_t v5 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v5 + 31) < 0) {
      unint64_t v6 = *(void *)(v5 + 16) + v2;
    }
    else {
      unint64_t v6 = *(unsigned __int8 *)(v5 + 31) + v2;
    }
    *(_DWORD *)(a1 + 20) = v6;
    return v6;
  }
  else
  {
    *(_DWORD *)(a1 + 20) = v2;
    return v2;
  }
}

std::string *sub_10F5C94(std::string *result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 16);
  if ((v2 & 3) != 0)
  {
    if (v2) {
      result[1].__r_.__value_.__r.__words[0] = *(void *)(a2 + 24);
    }
    if ((v2 & 2) != 0) {
      LODWORD(result[1].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 32);
    }
    LODWORD(result->__r_.__value_.__r.__words[2]) |= v2;
  }
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3) {
    return sub_188B4F8((uint64_t *)&result->__r_.__value_.__l.__size_, (v3 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_10F5CE0()
{
  return 1;
}

double sub_10F5CE8@<D0>(uint64_t a1@<X8>)
{
  int v2 = (char *)operator new(0x30uLL);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_20B93B0;
  strcpy(v2, "geo3.SessionState.ExperimentalAccessPointData");
  return *(double *)"lAccessPointData";
}

double sub_10F5D3C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = a2 | 2;
  if (!a3) {
    uint64_t v3 = a2;
  }
  *(void *)a1 = off_2440C60;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = a2;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = a2;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = a2;
  *(void *)(a1 + 112) = a2;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = a2;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = &qword_2550250;
  *(void *)(a1 + 168) = &qword_2550250;
  *(void *)(a1 + 176) = &qword_2550250;
  double result = 0.0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 226) = 0u;
  return result;
}

void *sub_10F5DB0(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_5;
    }
  }
  else if (v4)
  {
    goto LABEL_5;
  }
  sub_10F5F88((uint64_t)a1);
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_5:
  sub_1889DE8(a1 + 17);
  sub_1889DE8(a1 + 14);
  sub_1889DA8((uint64_t)(a1 + 12));
  unint64_t v5 = (unsigned int *)a1[11];
  if (v5 && !a1[9])
  {
    unint64_t v6 = v5 + 2;
    uint64_t v7 = *v5;
    if ((int)v7 >= 1)
    {
      do
      {
        if (*v6)
        {
          sub_15B0994();
          operator delete();
        }
        ++v6;
        --v7;
      }
      while (v7);
      unint64_t v5 = (unsigned int *)a1[11];
    }
    operator delete(v5);
  }
  a1[11] = 0;
  sub_1889DE8(a1 + 6);
  unint64_t v8 = (uint64_t *)a1[5];
  if (v8 && !a1[3])
  {
    unsigned int v11 = v8 + 1;
    uint64_t v12 = *(unsigned int *)v8;
    if ((int)v12 >= 1)
    {
      do
      {
        if (*v11)
        {
          sub_10ED57C(*v11);
          operator delete();
        }
        ++v11;
        --v12;
      }
      while (v12);
      unint64_t v8 = (uint64_t *)a1[5];
    }
    operator delete(v8);
    a1[5] = 0;
    *a1 = off_24E6998;
    uint64_t v9 = a1[1];
    if ((v9 & 2) == 0) {
      return a1;
    }
  }
  else
  {
    a1[5] = 0;
    *a1 = off_24E6998;
    uint64_t v9 = a1[1];
    if ((v9 & 2) == 0) {
      return a1;
    }
  }
  unsigned int v10 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
  if (v9)
  {
    if (*v10)
    {
LABEL_19:
      sub_1881618();
      operator delete();
    }
  }
  else if (v10)
  {
    goto LABEL_19;
  }
  return a1;
}

void ***sub_10F5F88(uint64_t a1)
{
  uint64_t v3 = *(uint64_t **)(a1 + 160);
  uint64_t v2 = (void ***)(a1 + 160);
  if (v3 != &qword_2550250) {
    sub_1881C6C(v2);
  }
  if (*(uint64_t **)(a1 + 168) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 168));
  }
  double result = (void ***)(a1 + 176);
  if (*(uint64_t **)(a1 + 176) != &qword_2550250) {
    sub_1881C6C(result);
  }
  if ((uint64_t (***)())a1 != &off_24F7BD0)
  {
    uint64_t v5 = *(void *)(a1 + 184);
    if (v5)
    {
      sub_10F3BE4(v5);
      operator delete();
    }
    if (*(void *)(a1 + 192))
    {
      sub_15B0994();
      operator delete();
    }
    unint64_t v6 = *(void **)(a1 + 200);
    if (v6)
    {
      uint64_t v7 = v6[1];
      if ((v7 & 1) != 0 && !*(void *)(v7 & 0xFFFFFFFFFFFFFFFCLL))
      {
        sub_10E4F74(v6 + 1);
        uint64_t v7 = v6[1];
      }
      *unint64_t v6 = off_24E6998;
      if ((v7 & 2) != 0)
      {
        unint64_t v8 = (void *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
        if (v7)
        {
          if (*v8)
          {
LABEL_17:
            sub_1881618();
            operator delete();
          }
        }
        else if (v8)
        {
          goto LABEL_17;
        }
      }
      operator delete();
    }
    double result = *(void ****)(a1 + 208);
    if (result)
    {
      sub_1472DE8();
      operator delete();
    }
  }
  return result;
}

void sub_10F6124(void *a1)
{
  sub_10F5DB0(a1);

  operator delete();
}

uint64_t sub_10F615C(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 32);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(result + 40) + 8);
    do
    {
      uint64_t v4 = *v3++;
      double result = sub_10ED8A4(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 32) = 0;
  }
  uint64_t v5 = *(unsigned int *)(v1 + 56);
  if ((int)v5 >= 1)
  {
    uint64_t v6 = *(void *)(v1 + 64) + 8;
    do
    {
      while (1)
      {
        uint64_t v7 = *(void *)v6;
        if (*(char *)(*(void *)v6 + 23) < 0) {
          break;
        }
        *(unsigned char *)uint64_t v7 = 0;
        *(unsigned char *)(v7 + 23) = 0;
        v6 += 8;
        if (!--v5) {
          goto LABEL_10;
        }
      }
      **(unsigned char **)uint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      v6 += 8;
      --v5;
    }
    while (v5);
LABEL_10:
    *(_DWORD *)(v1 + 56) = 0;
  }
  uint64_t v8 = *(unsigned int *)(v1 + 80);
  if ((int)v8 >= 1)
  {
    uint64_t v9 = (uint64_t *)(*(void *)(v1 + 88) + 8);
    do
    {
      uint64_t v10 = *v9++;
      double result = (uint64_t)sub_15B09D0(v10);
      --v8;
    }
    while (v8);
    *(_DWORD *)(v1 + 80) = 0;
  }
  *(_DWORD *)(v1 + 96) = 0;
  uint64_t v11 = *(unsigned int *)(v1 + 120);
  if ((int)v11 >= 1)
  {
    uint64_t v12 = *(void *)(v1 + 128) + 8;
    do
    {
      while (1)
      {
        uint64_t v13 = *(void *)v12;
        if (*(char *)(*(void *)v12 + 23) < 0) {
          break;
        }
        *(unsigned char *)uint64_t v13 = 0;
        *(unsigned char *)(v13 + 23) = 0;
        v12 += 8;
        if (!--v11) {
          goto LABEL_20;
        }
      }
      **(unsigned char **)uint64_t v13 = 0;
      *(void *)(v13 + 8) = 0;
      v12 += 8;
      --v11;
    }
    while (v11);
LABEL_20:
    *(_DWORD *)(v1 + 120) = 0;
  }
  uint64_t v14 = *(unsigned int *)(v1 + 144);
  if ((int)v14 >= 1)
  {
    uint64_t v15 = *(void *)(v1 + 152) + 8;
    do
    {
      while (1)
      {
        uint64_t v16 = *(void *)v15;
        if (*(char *)(*(void *)v15 + 23) < 0) {
          break;
        }
        *(unsigned char *)uint64_t v16 = 0;
        *(unsigned char *)(v16 + 23) = 0;
        v15 += 8;
        if (!--v14) {
          goto LABEL_26;
        }
      }
      **(unsigned char **)uint64_t v16 = 0;
      *(void *)(v16 + 8) = 0;
      v15 += 8;
      --v14;
    }
    while (v14);
LABEL_26:
    *(_DWORD *)(v1 + 144) = 0;
  }
  int v17 = *(_DWORD *)(v1 + 16);
  if ((v17 & 0x7F) != 0)
  {
    if ((v17 & 1) == 0)
    {
      if ((v17 & 2) == 0) {
        goto LABEL_30;
      }
LABEL_39:
      unint64_t v19 = *(void *)(v1 + 168) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v19 + 23) < 0)
      {
        **(unsigned char **)unint64_t v19 = 0;
        *(void *)(v19 + 8) = 0;
        if ((v17 & 4) != 0) {
          goto LABEL_43;
        }
      }
      else
      {
        *(unsigned char *)unint64_t v19 = 0;
        *(unsigned char *)(v19 + 23) = 0;
        if ((v17 & 4) != 0) {
          goto LABEL_43;
        }
      }
LABEL_31:
      if ((v17 & 8) == 0) {
        goto LABEL_32;
      }
LABEL_47:
      double result = sub_10F3E68(*(void *)(v1 + 184));
      if ((v17 & 0x10) == 0)
      {
LABEL_33:
        if ((v17 & 0x20) == 0)
        {
LABEL_53:
          if ((v17 & 0x40) != 0) {
            double result = sub_13E6514(*(void *)(v1 + 208));
          }
          goto LABEL_55;
        }
LABEL_49:
        uint64_t v21 = *(void *)(v1 + 200);
        if ((*(unsigned char *)(v21 + 16) & 3) != 0)
        {
          *(_DWORD *)(v21 + 32) = 0;
          *(void *)(v21 + 24) = 0;
        }
        char v22 = *(unsigned char *)(v21 + 8);
        double result = v21 + 8;
        *(_DWORD *)(result + 8) = 0;
        if (v22) {
          double result = sub_188B4AC((uint64_t *)result);
        }
        goto LABEL_53;
      }
LABEL_48:
      double result = (uint64_t)sub_15B09D0(*(void *)(v1 + 192));
      if ((v17 & 0x20) == 0) {
        goto LABEL_53;
      }
      goto LABEL_49;
    }
    unint64_t v18 = *(void *)(v1 + 160) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v18 + 23) < 0)
    {
      **(unsigned char **)unint64_t v18 = 0;
      *(void *)(v18 + 8) = 0;
      if ((v17 & 2) != 0) {
        goto LABEL_39;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v18 = 0;
      *(unsigned char *)(v18 + 23) = 0;
      if ((v17 & 2) != 0) {
        goto LABEL_39;
      }
    }
LABEL_30:
    if ((v17 & 4) == 0) {
      goto LABEL_31;
    }
LABEL_43:
    unint64_t v20 = *(void *)(v1 + 176) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v20 + 23) < 0)
    {
      **(unsigned char **)unint64_t v20 = 0;
      *(void *)(v20 + 8) = 0;
      if ((v17 & 8) != 0) {
        goto LABEL_47;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v20 = 0;
      *(unsigned char *)(v20 + 23) = 0;
      if ((v17 & 8) != 0) {
        goto LABEL_47;
      }
    }
LABEL_32:
    if ((v17 & 0x10) == 0) {
      goto LABEL_33;
    }
    goto LABEL_48;
  }
LABEL_55:
  *(_DWORD *)(v1 + 216) = 0;
  if ((v17 & 0x7F00) != 0)
  {
    *(void *)(v1 + 228) = 0;
    *(void *)(v1 + 220) = 0;
    *(void *)(v1 + 234) = 0;
  }
  char v24 = *(unsigned char *)(v1 + 8);
  uint64_t v23 = v1 + 8;
  *(_DWORD *)(v23 + 8) = 0;
  if (v24)
  {
    return sub_188B4AC((uint64_t *)v23);
  }
  return result;
}

unsigned __int8 *sub_10F6420(uint64_t a1, unsigned __int8 *a2, int32x2_t *a3)
{
  int v102 = 0;
  v103 = (uint64_t **)(a1 + 112);
  uint64_t v104 = (uint64_t **)(a1 + 136);
  unint64_t v100 = (void *)(a1 + 176);
  v101 = (uint64_t *)(a1 + 8);
  uint64_t v6 = (unsigned int *)(a1 + 96);
  uint64_t v98 = (void *)(a1 + 160);
  BOOL v99 = (void *)(a1 + 168);
  uint64_t v7 = (uint64_t *)(a1 + 72);
  uint64_t v8 = (uint64_t **)(a1 + 48);
  uint64_t v9 = (uint64_t *)(a1 + 24);
  while (1)
  {
LABEL_5:
    if ((unint64_t)a2 >= *(void *)a3)
    {
      int v94 = a2 - a3[1].i32[0];
      if (a3[3].i32[1] == v94)
      {
        if (v94 < 1)
        {
LABEL_224:
          uint64_t v13 = a2;
        }
        else if (a3[2])
        {
          uint64_t v13 = a2;
        }
        else
        {
          uint64_t v13 = 0;
        }
        goto LABEL_216;
      }
      a2 = (unsigned __int8 *)sub_188BB90((uint64_t)a3, v94, a3[11].i32[1]);
      if (v95) {
        goto LABEL_224;
      }
    }
    uint64_t v13 = a2 + 1;
    unsigned int v14 = *a2;
    if (((char)*a2 & 0x80000000) == 0)
    {
      unsigned int v15 = (v14 >> 3) - 11;
LABEL_8:
      switch(v15)
      {
        case 0u:
          if (v14 != 90) {
            goto LABEL_26;
          }
          a2 = v13 - 1;
          while (1)
          {
            uint64_t v16 = *(_DWORD **)(a1 + 40);
            if (v16 && (uint64_t v17 = *(int *)(a1 + 32), (int)v17 < *v16))
            {
              *(_DWORD *)(a1 + 32) = v17 + 1;
              uint64_t v18 = *(void *)&v16[2 * v17 + 2];
              int v105 = 0;
              unint64_t v19 = (unsigned __int8 *)sub_188BEE0((uint64_t)a3, a2 + 1, &v105);
              if (v19) {
                goto LABEL_17;
              }
            }
            else
            {
              sub_10F94B8(*v9);
              uint64_t v18 = sub_188CDC8((uint64_t)v9, v20);
              int v105 = 0;
              unint64_t v19 = (unsigned __int8 *)sub_188BEE0((uint64_t)a3, a2 + 1, &v105);
              if (v19)
              {
LABEL_17:
                a2 = sub_10EDA64(v18, v19, a3);
                ++a3[11].i32[0];
                if (a3[10].i32[0]) {
                  goto LABEL_215;
                }
                goto LABEL_18;
              }
            }
            a2 = 0;
            ++a3[11].i32[0];
            if (a3[10].i32[0]) {
              goto LABEL_215;
            }
LABEL_18:
            int v21 = a3[3].i32[1] + v105;
            a3[3].i32[1] = v21;
            int32x2_t v22 = (int32x2_t)(*(void *)&a3[1] + (v21 & (v21 >> 31)));
            *a3 = v22;
            if (!a2) {
              goto LABEL_215;
            }
            if (*(void *)&v22 <= (unint64_t)a2 || *a2 != 90) {
              goto LABEL_5;
            }
          }
        case 1u:
          if (v14 != 96) {
            goto LABEL_26;
          }
          v102 |= 0x80u;
          a2 = v13 + 1;
          int v27 = *v13;
          if (((char)*v13 & 0x80000000) == 0) {
            goto LABEL_37;
          }
          int v27 = v27 + (*a2 << 7) - 128;
          if ((char)*a2 < 0)
          {
            a2 = (unsigned __int8 *)sub_188C0D0((uint64_t)v13, v27);
            *(_DWORD *)(a1 + 216) = v85;
            if (!a2) {
              goto LABEL_215;
            }
          }
          else
          {
            a2 = v13 + 2;
LABEL_37:
            *(_DWORD *)(a1 + 216) = v27;
          }
          continue;
        case 2u:
          if (v14 != 104) {
            goto LABEL_26;
          }
          v102 |= 0x100u;
          a2 = v13 + 1;
          int v28 = *v13;
          if (((char)*v13 & 0x80000000) == 0) {
            goto LABEL_42;
          }
          int v28 = v28 + (*a2 << 7) - 128;
          if ((char)*a2 < 0)
          {
            a2 = (unsigned __int8 *)sub_188C0D0((uint64_t)v13, v28);
            *(_DWORD *)(a1 + 220) = v86;
            if (!a2) {
              goto LABEL_215;
            }
          }
          else
          {
            a2 = v13 + 2;
LABEL_42:
            *(_DWORD *)(a1 + 220) = v28;
          }
          continue;
        case 3u:
          if (v14 != 112) {
            goto LABEL_26;
          }
          v102 |= 0x200u;
          a2 = v13 + 1;
          int v29 = *v13;
          if (((char)*v13 & 0x80000000) == 0) {
            goto LABEL_47;
          }
          int v29 = v29 + (*a2 << 7) - 128;
          if ((char)*a2 < 0)
          {
            a2 = (unsigned __int8 *)sub_188C0D0((uint64_t)v13, v29);
            *(_DWORD *)(a1 + 224) = v87;
            if (!a2) {
              goto LABEL_215;
            }
          }
          else
          {
            a2 = v13 + 2;
LABEL_47:
            *(_DWORD *)(a1 + 224) = v29;
          }
          continue;
        case 4u:
          if (v14 != 122) {
            goto LABEL_26;
          }
          a2 = v13 - 1;
LABEL_50:
          unint64_t v30 = *(_DWORD **)(a1 + 64);
          if (v30)
          {
            uint64_t v31 = *(int *)(a1 + 56);
            if ((int)v31 < *v30)
            {
              *(_DWORD *)(a1 + 56) = v31 + 1;
              uint64_t v32 = sub_188C244(*(std::string **)&v30[2 * v31 + 2], (char *)a2 + 1, (uint64_t)a3);
              if (!v32) {
                goto LABEL_215;
              }
LABEL_58:
              a2 = (unsigned __int8 *)v32;
              if (*(void *)a3 <= (unint64_t)v32 || *v32 != 122) {
                continue;
              }
              goto LABEL_50;
            }
          }
          if (!*v8) {
            operator new();
          }
          *uint64_t v34 = v33;
          v34[1] = sub_3A6EDC;
          void *v33 = 0;
          v33[1] = 0;
          v33[2] = 0;
          uint64_t v35 = (std::string *)sub_188CDC8((uint64_t)v8, (uint64_t)v33);
          uint64_t v32 = sub_188C244(v35, (char *)a2 + 1, (uint64_t)a3);
          if (v32) {
            goto LABEL_58;
          }
          goto LABEL_215;
        case 5u:
          if (v14 != 130) {
            goto LABEL_26;
          }
          a2 = v13 - 2;
          while (1)
          {
            uint64_t v36 = *(_DWORD **)(a1 + 88);
            if (v36 && (uint64_t v37 = *(int *)(a1 + 80), (int)v37 < *v36))
            {
              *(_DWORD *)(a1 + 80) = v37 + 1;
              uint64_t v38 = *(void *)&v36[2 * v37 + 2];
              int v105 = 0;
              unint64_t v39 = (char *)sub_188BEE0((uint64_t)a3, a2 + 2, &v105);
              if (v39) {
                goto LABEL_69;
              }
            }
            else
            {
              uint64_t v40 = sub_15C1918(*v7);
              uint64_t v38 = sub_188CDC8((uint64_t)v7, v40);
              int v105 = 0;
              unint64_t v39 = (char *)sub_188BEE0((uint64_t)a3, a2 + 2, &v105);
              if (v39)
              {
LABEL_69:
                a2 = (unsigned __int8 *)sub_15B0A38(v38, v39, a3);
                ++a3[11].i32[0];
                if (a3[10].i32[0]) {
                  goto LABEL_215;
                }
                goto LABEL_70;
              }
            }
            a2 = 0;
            ++a3[11].i32[0];
            if (a3[10].i32[0]) {
              goto LABEL_215;
            }
LABEL_70:
            int v41 = a3[3].i32[1] + v105;
            a3[3].i32[1] = v41;
            int32x2_t v42 = (int32x2_t)(*(void *)&a3[1] + (v41 & (v41 >> 31)));
            *a3 = v42;
            if (!a2) {
              goto LABEL_215;
            }
            if (*(void *)&v42 <= (unint64_t)a2 || *(_WORD *)a2 != 386) {
              goto LABEL_5;
            }
          }
        case 7u:
          if (v14 != 144) {
            goto LABEL_26;
          }
          a2 = v13 + 1;
          unint64_t v43 = *v13;
          if ((char)*v13 < 0)
          {
            int v76 = v43 + (*a2 << 7);
            unint64_t v43 = (v76 - 128);
            if ((char)*a2 < 0)
            {
              uint64_t v92 = sub_188C138((uint64_t)v13, (v76 - 128));
              if (!v92) {
                goto LABEL_215;
              }
              a2 = (unsigned __int8 *)v92;
              unint64_t v43 = v93;
              if (v93 <= 1)
              {
LABEL_77:
                *(_DWORD *)(a1 + 16) |= 0x400u;
                *(_DWORD *)(a1 + 228) = v43;
                continue;
              }
            }
            else
            {
              a2 = v13 + 2;
              if (v43 <= 1) {
                goto LABEL_77;
              }
            }
          }
          else if (v43 <= 1)
          {
            goto LABEL_77;
          }
          if (*v101) {
            int v77 = (std::string *)((*v101 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            int v77 = (std::string *)sub_188DBD8(v101);
          }
          sub_188C020(18, v43, v77);
          continue;
        case 8u:
          if (v14 != 154) {
            goto LABEL_26;
          }
          *(_DWORD *)(a1 + 16) |= 8u;
          uint64_t v44 = *(void *)(a1 + 184);
          if (v44)
          {
            int v105 = 0;
            unint64_t v45 = (unsigned __int8 *)sub_188BEE0((uint64_t)a3, v13, &v105);
            if (!v45) {
              goto LABEL_188;
            }
LABEL_173:
            unint64_t v80 = sub_10F4034(v44, v45, a3);
            goto LABEL_186;
          }
          uint64_t v78 = (void *)(*v101 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v101) {
            uint64_t v78 = (void *)*v78;
          }
          sub_10F98DC((uint64_t)v78);
          uint64_t v44 = v79;
          *(void *)(a1 + 184) = v79;
          int v105 = 0;
          unint64_t v45 = (unsigned __int8 *)sub_188BEE0((uint64_t)a3, v13, &v105);
          if (v45) {
            goto LABEL_173;
          }
          goto LABEL_188;
        case 9u:
          if (v14 != 162) {
            goto LABEL_26;
          }
          *(_DWORD *)(a1 + 16) |= 1u;
          uint64_t v46 = *(void *)(a1 + 8);
          uint64_t v47 = (uint64_t *)(v46 & 0xFFFFFFFFFFFFFFFCLL);
          if (v46) {
            uint64_t v47 = (uint64_t *)*v47;
          }
          uint64_t v10 = v98;
          goto LABEL_3;
        case 0xAu:
          if (v14 == 168)
          {
            a2 = v13 - 2;
            while (1)
            {
              int v48 = a2[2];
              if ((char)a2[2] < 0)
              {
                int v50 = v48 + (a2[3] << 7);
                int v48 = v50 - 128;
                if ((char)a2[3] < 0)
                {
                  a2 = (unsigned __int8 *)sub_188C0D0((uint64_t)(a2 + 2), v50 - 128);
                  int v48 = v51;
                  uint64_t v49 = *(unsigned int *)(a1 + 96);
                  if (v49 != *(_DWORD *)(a1 + 100))
                  {
LABEL_93:
                    *(_DWORD *)(*(void *)(a1 + 104) + 4 * v49) = v48;
                    *uint64_t v6 = v49 + 1;
                    if (!a2) {
                      goto LABEL_215;
                    }
                    goto LABEL_94;
                  }
                }
                else
                {
                  a2 += 4;
                  uint64_t v49 = *(unsigned int *)(a1 + 96);
                  if (v49 != *(_DWORD *)(a1 + 100)) {
                    goto LABEL_93;
                  }
                }
              }
              else
              {
                a2 += 3;
                uint64_t v49 = *(unsigned int *)(a1 + 96);
                if (v49 != *(_DWORD *)(a1 + 100)) {
                  goto LABEL_93;
                }
              }
              sub_188C80C(v6, v49 + 1);
              *(_DWORD *)(*(void *)(a1 + 104) + 4 * v49) = v48;
              *uint64_t v6 = v49 + 1;
              if (!a2) {
                goto LABEL_215;
              }
LABEL_94:
              if (*(void *)a3 <= (unint64_t)a2 || *(_WORD *)a2 != 424) {
                goto LABEL_5;
              }
            }
          }
          if (v14 != 170) {
            goto LABEL_26;
          }
          uint64_t v12 = sub_188C2CC(v6, v13, (uint64_t)a3);
          goto LABEL_4;
        case 0xBu:
          if (v14 != 178) {
            goto LABEL_26;
          }
          *(_DWORD *)(a1 + 16) |= 2u;
          uint64_t v52 = *(void *)(a1 + 8);
          uint64_t v47 = (uint64_t *)(v52 & 0xFFFFFFFFFFFFFFFCLL);
          if (v52) {
            uint64_t v47 = (uint64_t *)*v47;
          }
          uint64_t v10 = v99;
          goto LABEL_3;
        case 0xCu:
          if (v14 != 186) {
            goto LABEL_26;
          }
          *(_DWORD *)(a1 + 16) |= 0x10u;
          uint64_t v53 = *(void *)(a1 + 192);
          if (v53)
          {
            int v105 = 0;
            int v54 = (char *)sub_188BEE0((uint64_t)a3, v13, &v105);
            if (!v54) {
              goto LABEL_188;
            }
LABEL_177:
            unint64_t v80 = (unsigned __int8 *)sub_15B0A38(v53, v54, a3);
            goto LABEL_186;
          }
          uint64_t v81 = (void *)(*v101 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v101) {
            uint64_t v81 = (void *)*v81;
          }
          uint64_t v53 = sub_15C1918((uint64_t)v81);
          *(void *)(a1 + 192) = v53;
          int v105 = 0;
          int v54 = (char *)sub_188BEE0((uint64_t)a3, v13, &v105);
          if (v54) {
            goto LABEL_177;
          }
          goto LABEL_188;
        case 0xDu:
          if (v14 != 192) {
            goto LABEL_26;
          }
          v102 |= 0x1000u;
          a2 = v13 + 1;
          int v55 = *v13;
          if (((char)*v13 & 0x80000000) == 0) {
            goto LABEL_111;
          }
          int v55 = v55 + (*a2 << 7) - 128;
          if ((char)*a2 < 0)
          {
            a2 = (unsigned __int8 *)sub_188C0D0((uint64_t)v13, v55);
            *(_DWORD *)(a1 + 236) = v88;
            if (!a2) {
              goto LABEL_215;
            }
          }
          else
          {
            a2 = v13 + 2;
LABEL_111:
            *(_DWORD *)(a1 + 236) = v55;
          }
          continue;
        case 0xFu:
          if (v14 != 210) {
            goto LABEL_26;
          }
          *(_DWORD *)(a1 + 16) |= 4u;
          uint64_t v56 = *(void *)(a1 + 8);
          uint64_t v47 = (uint64_t *)(v56 & 0xFFFFFFFFFFFFFFFCLL);
          if (v56) {
            uint64_t v47 = (uint64_t *)*v47;
          }
          uint64_t v10 = v100;
LABEL_3:
          uint64_t v11 = (std::string *)sub_1880F84(v10, v47);
          uint64_t v12 = (unsigned __int8 *)sub_188C244(v11, (char *)v13, (uint64_t)a3);
          goto LABEL_4;
        case 0x10u:
          if (v14 != 216) {
            goto LABEL_26;
          }
          v102 |= 0x2000u;
          a2 = v13 + 1;
          uint64_t v57 = *v13;
          if (((char)*v13 & 0x80000000) == 0) {
            goto LABEL_120;
          }
          uint64_t v57 = v57 + (*a2 << 7) - 128;
          if ((char)*a2 < 0)
          {
            a2 = (unsigned __int8 *)sub_188C138((uint64_t)v13, v57);
            *(unsigned char *)(a1 + 240) = v89 != 0;
            if (!a2) {
              goto LABEL_215;
            }
          }
          else
          {
            a2 = v13 + 2;
LABEL_120:
            *(unsigned char *)(a1 + 240) = v57 != 0;
          }
          continue;
        case 0x11u:
          if (v14 != 226) {
            goto LABEL_26;
          }
          *(_DWORD *)(a1 + 16) |= 0x20u;
          uint64_t v58 = *(void *)(a1 + 200);
          if (v58)
          {
            int v105 = 0;
            unint64_t v59 = (char *)sub_188BEE0((uint64_t)a3, v13, &v105);
            if (!v59) {
              goto LABEL_188;
            }
LABEL_181:
            unint64_t v80 = (unsigned __int8 *)sub_10F57CC(v58, v59, a3);
            goto LABEL_186;
          }
          unint64_t v82 = (void *)(*v101 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v101) {
            unint64_t v82 = (void *)*v82;
          }
          uint64_t v58 = sub_10F999C((uint64_t)v82);
          *(void *)(a1 + 200) = v58;
          int v105 = 0;
          unint64_t v59 = (char *)sub_188BEE0((uint64_t)a3, v13, &v105);
          if (v59) {
            goto LABEL_181;
          }
LABEL_188:
          a2 = 0;
          ++a3[11].i32[0];
          if (a3[10].i32[0]) {
            goto LABEL_215;
          }
LABEL_189:
          int v84 = a3[3].i32[1] + v105;
          a3[3].i32[1] = v84;
          *a3 = (int32x2_t)(*(void *)&a3[1] + (v84 & (v84 >> 31)));
          if (!a2) {
            goto LABEL_215;
          }
          continue;
        case 0x13u:
          if (v14 != 242) {
            goto LABEL_26;
          }
          a2 = v13 - 2;
LABEL_127:
          unint64_t v60 = *(_DWORD **)(a1 + 128);
          if (v60)
          {
            uint64_t v61 = *(int *)(a1 + 120);
            if ((int)v61 < *v60)
            {
              *(_DWORD *)(a1 + 120) = v61 + 1;
              unint64_t v62 = sub_188C244(*(std::string **)&v60[2 * v61 + 2], (char *)a2 + 2, (uint64_t)a3);
              if (!v62) {
                goto LABEL_215;
              }
LABEL_135:
              a2 = (unsigned __int8 *)v62;
              if (*(void *)a3 <= (unint64_t)v62 || *(_WORD *)v62 != 498) {
                continue;
              }
              goto LABEL_127;
            }
          }
          if (!*v103) {
            operator new();
          }
          *uint64_t v64 = v63;
          v64[1] = sub_3A6EDC;
          void *v63 = 0;
          v63[1] = 0;
          v63[2] = 0;
          int v65 = (std::string *)sub_188CDC8((uint64_t)v103, (uint64_t)v63);
          unint64_t v62 = sub_188C244(v65, (char *)a2 + 2, (uint64_t)a3);
          if (v62) {
            goto LABEL_135;
          }
          goto LABEL_215;
        case 0x14u:
          if (v14 != 250) {
            goto LABEL_26;
          }
          a2 = v13 - 2;
LABEL_140:
          unint64_t v66 = *(_DWORD **)(a1 + 152);
          if (v66)
          {
            uint64_t v67 = *(int *)(a1 + 144);
            if ((int)v67 < *v66)
            {
              *(_DWORD *)(a1 + 144) = v67 + 1;
              uint64_t v68 = sub_188C244(*(std::string **)&v66[2 * v67 + 2], (char *)a2 + 2, (uint64_t)a3);
              if (!v68) {
                goto LABEL_215;
              }
LABEL_148:
              a2 = (unsigned __int8 *)v68;
              if (*(void *)a3 <= (unint64_t)v68 || *(_WORD *)v68 != 506) {
                continue;
              }
              goto LABEL_140;
            }
          }
          if (!*v104) {
            operator new();
          }
          *int v70 = v69;
          v70[1] = sub_3A6EDC;
          *uint64_t v69 = 0;
          v69[1] = 0;
          v69[2] = 0;
          uint64_t v71 = (std::string *)sub_188CDC8((uint64_t)v104, (uint64_t)v69);
          uint64_t v68 = sub_188C244(v71, (char *)a2 + 2, (uint64_t)a3);
          if (v68) {
            goto LABEL_148;
          }
LABEL_215:
          uint64_t v13 = 0;
          break;
        case 0x15u:
          if ((_BYTE)v14) {
            goto LABEL_26;
          }
          v102 |= 0x4000u;
          a2 = v13 + 1;
          uint64_t v72 = *v13;
          if (((char)*v13 & 0x80000000) == 0) {
            goto LABEL_155;
          }
          uint64_t v72 = v72 + (*a2 << 7) - 128;
          if ((char)*a2 < 0)
          {
            a2 = (unsigned __int8 *)sub_188C138((uint64_t)v13, v72);
            *(unsigned char *)(a1 + 241) = v90 != 0;
            if (!a2) {
              goto LABEL_215;
            }
          }
          else
          {
            a2 = v13 + 2;
LABEL_155:
            *(unsigned char *)(a1 + 241) = v72 != 0;
          }
          continue;
        case 0x16u:
          if (v14 != 10) {
            goto LABEL_26;
          }
          *(_DWORD *)(a1 + 16) |= 0x40u;
          int v73 = *(void **)(a1 + 208);
          if (v73)
          {
            int v105 = 0;
            int v74 = (char *)sub_188BEE0((uint64_t)a3, v13, &v105);
            if (!v74) {
              goto LABEL_188;
            }
          }
          else
          {
            uint64_t v83 = (void *)(*v101 & 0xFFFFFFFFFFFFFFFCLL);
            if (*v101) {
              uint64_t v83 = (void *)*v83;
            }
            int v73 = sub_147967C((uint64_t)v83);
            *(void *)(a1 + 208) = v73;
            int v105 = 0;
            int v74 = (char *)sub_188BEE0((uint64_t)a3, v13, &v105);
            if (!v74) {
              goto LABEL_188;
            }
          }
          unint64_t v80 = (unsigned __int8 *)sub_1472E24((uint64_t)v73, v74, a3);
LABEL_186:
          a2 = v80;
          ++a3[11].i32[0];
          if (a3[10].i32[0]) {
            goto LABEL_215;
          }
          goto LABEL_189;
        case 0x17u:
          if (v14 != 16) {
            goto LABEL_26;
          }
          v102 |= 0x800u;
          a2 = v13 + 1;
          int v75 = *v13;
          if (((char)*v13 & 0x80000000) == 0) {
            goto LABEL_164;
          }
          int v75 = v75 + (*a2 << 7) - 128;
          if ((char)*a2 < 0)
          {
            a2 = (unsigned __int8 *)sub_188C0D0((uint64_t)v13, v75);
            *(_DWORD *)(a1 + 232) = v91;
            if (!a2) {
              goto LABEL_215;
            }
          }
          else
          {
            a2 = v13 + 2;
LABEL_164:
            *(_DWORD *)(a1 + 232) = v75;
          }
          continue;
        default:
          goto LABEL_26;
      }
LABEL_216:
      int v96 = v102;
      goto LABEL_219;
    }
    unsigned int v23 = v14 + (*v13 << 7);
    unsigned int v14 = v23 - 128;
    if ((char)*v13 < 0)
    {
      uint64_t v13 = (unsigned __int8 *)sub_188C180((uint64_t)a2, v23 - 128);
      unsigned int v14 = v24;
      unsigned int v15 = (v24 >> 3) - 11;
      if (v15 <= 0x17) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v13 = a2 + 2;
      unsigned int v15 = (v14 >> 3) - 11;
      if (v15 <= 0x17) {
        goto LABEL_8;
      }
    }
LABEL_26:
    if (!v14 || (v14 & 7) == 4) {
      break;
    }
    if (*v101) {
      uint64_t v26 = (std::string *)((*v101 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else {
      uint64_t v26 = (std::string *)sub_188DBD8(v101);
    }
    uint64_t v12 = sub_1885AC0(v14, v26, (char *)v13, a3);
LABEL_4:
    a2 = v12;
    if (!v12) {
      goto LABEL_215;
    }
  }
  int v96 = v102;
  if (v13) {
    a3[10].i32[0] = v14 - 1;
  }
LABEL_219:
  *(_DWORD *)(a1 + 16) |= v96;
  return v13;
}

char *sub_10F7290(uint64_t a1, char *__dst, _DWORD *a3)
{
  int v6 = *(_DWORD *)(a1 + 32);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
    {
      if (*(void *)a3 <= (unint64_t)__dst) {
        long long __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      }
      uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8 * i + 8);
      *long long __dst = 90;
      unsigned int v10 = *(_DWORD *)(v9 + 20);
      __dst[1] = v10;
      if (v10 > 0x7F) {
        uint64_t v8 = sub_188A9CC(v10, __dst + 1);
      }
      else {
        uint64_t v8 = __dst + 2;
      }
      long long __dst = sub_10EE8A4(v9, v8, a3);
    }
  }
  int v11 = *(_DWORD *)(a1 + 16);
  if ((v11 & 0x80) != 0)
  {
    if (*(void *)a3 <= (unint64_t)__dst)
    {
      long long __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      unsigned int v12 = *(_DWORD *)(a1 + 216);
      *long long __dst = 96;
      __dst[1] = v12;
      if (v12 <= 0x7F) {
        goto LABEL_12;
      }
    }
    else
    {
      unsigned int v12 = *(_DWORD *)(a1 + 216);
      *long long __dst = 96;
      __dst[1] = v12;
      if (v12 <= 0x7F)
      {
LABEL_12:
        __dst += 2;
        goto LABEL_16;
      }
    }
    __dst[1] = v12 | 0x80;
    unsigned int v13 = v12 >> 7;
    __dst[2] = v12 >> 7;
    __dst += 3;
    if (v12 >= 0x4000)
    {
      do
      {
        *(__dst - 1) |= 0x80u;
        unsigned int v14 = v13 >> 14;
        v13 >>= 7;
        *__dst++ = v13;
      }
      while (v14);
    }
  }
LABEL_16:
  if ((v11 & 0x100) == 0) {
    goto LABEL_23;
  }
  if (*(void *)a3 <= (unint64_t)__dst)
  {
    long long __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
    unsigned int v15 = *(_DWORD *)(a1 + 220);
    *long long __dst = 104;
    __dst[1] = v15;
    if (v15 <= 0x7F) {
      goto LABEL_19;
    }
  }
  else
  {
    unsigned int v15 = *(_DWORD *)(a1 + 220);
    *long long __dst = 104;
    __dst[1] = v15;
    if (v15 <= 0x7F)
    {
LABEL_19:
      __dst += 2;
      goto LABEL_23;
    }
  }
  __dst[1] = v15 | 0x80;
  unsigned int v16 = v15 >> 7;
  __dst[2] = v15 >> 7;
  __dst += 3;
  if (v15 >= 0x4000)
  {
    do
    {
      *(__dst - 1) |= 0x80u;
      unsigned int v17 = v16 >> 14;
      v16 >>= 7;
      *__dst++ = v16;
    }
    while (v17);
  }
LABEL_23:
  if ((v11 & 0x200) == 0) {
    goto LABEL_30;
  }
  if (*(void *)a3 <= (unint64_t)__dst)
  {
    long long __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
    unsigned int v18 = *(_DWORD *)(a1 + 224);
    *long long __dst = 112;
    __dst[1] = v18;
    if (v18 <= 0x7F) {
      goto LABEL_26;
    }
  }
  else
  {
    unsigned int v18 = *(_DWORD *)(a1 + 224);
    *long long __dst = 112;
    __dst[1] = v18;
    if (v18 <= 0x7F)
    {
LABEL_26:
      __dst += 2;
      goto LABEL_30;
    }
  }
  __dst[1] = v18 | 0x80;
  unsigned int v19 = v18 >> 7;
  __dst[2] = v18 >> 7;
  __dst += 3;
  if (v18 >= 0x4000)
  {
    do
    {
      *(__dst - 1) |= 0x80u;
      unsigned int v20 = v19 >> 14;
      v19 >>= 7;
      *__dst++ = v19;
    }
    while (v20);
  }
LABEL_30:
  uint64_t v21 = *(unsigned int *)(a1 + 56);
  if ((int)v21 >= 1)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 8 * v21;
    while (1)
    {
      unsigned int v24 = *(unsigned __int8 **)(*(void *)(a1 + 64) + v22 + 8);
      if (((char)v24[23] & 0x80000000) == 0) {
        break;
      }
      int64_t v25 = *((void *)v24 + 1);
      if (v25 > 127)
      {
LABEL_40:
        long long __dst = (char *)sub_188A868(a3, 15, (uint64_t)v24, __dst);
        v22 += 8;
        if (v23 == v22) {
          goto LABEL_41;
        }
      }
      else
      {
LABEL_35:
        if (*(void *)a3 - (void)__dst + 14 < v25) {
          goto LABEL_40;
        }
        *long long __dst = 122;
        __dst[1] = v25;
        if ((char)v24[23] < 0) {
          unsigned int v24 = *(unsigned __int8 **)v24;
        }
        uint64_t v26 = __dst + 2;
        memcpy(v26, v24, v25);
        long long __dst = &v26[v25];
        v22 += 8;
        if (v23 == v22) {
          goto LABEL_41;
        }
      }
    }
    int64_t v25 = v24[23];
    goto LABEL_35;
  }
LABEL_41:
  int v27 = *(_DWORD *)(a1 + 80);
  if (v27)
  {
    for (int j = 0; j != v27; ++j)
    {
      if (*(void *)a3 <= (unint64_t)__dst) {
        long long __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      }
      uint64_t v30 = *(void *)(*(void *)(a1 + 88) + 8 * j + 8);
      *(_WORD *)long long __dst = 386;
      unsigned int v31 = *(_DWORD *)(v30 + 44);
      __dst[2] = v31;
      if (v31 > 0x7F) {
        int v29 = sub_188A9CC(v31, __dst + 2);
      }
      else {
        int v29 = __dst + 3;
      }
      long long __dst = sub_15B0C0C(v30, v29, a3);
    }
  }
  if ((v11 & 0x400) != 0)
  {
    if (*(void *)a3 <= (unint64_t)__dst)
    {
      long long __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      unint64_t v32 = *(int *)(a1 + 228);
      *(_WORD *)long long __dst = 400;
      __dst[2] = v32;
      if (v32 <= 0x7F) {
        goto LABEL_52;
      }
    }
    else
    {
      unint64_t v32 = *(int *)(a1 + 228);
      *(_WORD *)long long __dst = 400;
      __dst[2] = v32;
      if (v32 <= 0x7F)
      {
LABEL_52:
        __dst += 3;
        goto LABEL_56;
      }
    }
    __dst[2] = v32 | 0x80;
    unint64_t v33 = v32 >> 7;
    __dst[3] = v32 >> 7;
    __dst += 4;
    if (v32 >= 0x4000)
    {
      do
      {
        *(__dst - 1) |= 0x80u;
        unint64_t v34 = v33 >> 14;
        v33 >>= 7;
        *__dst++ = v33;
      }
      while (v34);
    }
  }
LABEL_56:
  if ((v11 & 8) != 0)
  {
    if (*(void *)a3 <= (unint64_t)__dst) {
      long long __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
    }
    uint64_t v36 = *(void *)(a1 + 184);
    *(_WORD *)long long __dst = 410;
    unsigned int v37 = *(_DWORD *)(v36 + 20);
    __dst[2] = v37;
    if (v37 > 0x7F)
    {
      uint64_t v38 = sub_188A9CC(v37, __dst + 2);
      long long __dst = sub_10F48C0(v36, v38, a3);
      if (v11) {
        goto LABEL_66;
      }
    }
    else
    {
      long long __dst = sub_10F48C0(v36, __dst + 3, a3);
      if (v11) {
        goto LABEL_66;
      }
    }
LABEL_58:
    uint64_t v35 = *(unsigned int *)(a1 + 96);
    if ((int)v35 < 1) {
      goto LABEL_85;
    }
    goto LABEL_74;
  }
  if ((v11 & 1) == 0) {
    goto LABEL_58;
  }
LABEL_66:
  unint64_t v39 = *(void *)(a1 + 160) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v39 + 23) < 0)
  {
    int64_t v40 = *(void *)(v39 + 8);
    if (v40 > 127) {
      goto LABEL_84;
    }
  }
  else
  {
    int64_t v40 = *(unsigned __int8 *)(v39 + 23);
  }
  if (*(void *)a3 - (void)__dst + 13 < v40)
  {
LABEL_84:
    long long __dst = sub_188A6CC(a3, 20, (void **)v39, __dst);
    uint64_t v35 = *(unsigned int *)(a1 + 96);
    if ((int)v35 < 1) {
      goto LABEL_85;
    }
    goto LABEL_74;
  }
  *(_WORD *)long long __dst = 418;
  __dst[2] = v40;
  if (*(char *)(v39 + 23) >= 0) {
    int v41 = (const void *)v39;
  }
  else {
    int v41 = *(const void **)v39;
  }
  memcpy(__dst + 3, v41, v40);
  __dst += v40 + 3;
  uint64_t v35 = *(unsigned int *)(a1 + 96);
  if ((int)v35 >= 1)
  {
LABEL_74:
    for (uint64_t k = 0; k != v35; ++k)
    {
      if (*(void *)a3 <= (unint64_t)__dst)
      {
        long long __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
        unsigned int v43 = *(_DWORD *)(*(void *)(a1 + 104) + 4 * k);
        *(_WORD *)long long __dst = 424;
        __dst[2] = v43;
        if (v43 > 0x7F)
        {
LABEL_79:
          __dst[2] = v43 | 0x80;
          unsigned int v44 = v43 >> 7;
          __dst[3] = v43 >> 7;
          __dst += 4;
          if (v43 >= 0x4000)
          {
            do
            {
              *(__dst - 1) |= 0x80u;
              unsigned int v45 = v44 >> 14;
              v44 >>= 7;
              *__dst++ = v44;
            }
            while (v45);
          }
          continue;
        }
      }
      else
      {
        unsigned int v43 = *(_DWORD *)(*(void *)(a1 + 104) + 4 * k);
        *(_WORD *)long long __dst = 424;
        __dst[2] = v43;
        if (v43 > 0x7F) {
          goto LABEL_79;
        }
      }
      __dst += 3;
    }
  }
LABEL_85:
  if ((v11 & 2) != 0)
  {
    unint64_t v46 = *(void *)(a1 + 168) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v46 + 23) < 0)
    {
      int64_t v47 = *(void *)(v46 + 8);
      if (v47 > 127) {
        goto LABEL_106;
      }
    }
    else
    {
      int64_t v47 = *(unsigned __int8 *)(v46 + 23);
    }
    if (*(void *)a3 - (void)__dst + 13 >= v47)
    {
      *(_WORD *)long long __dst = 434;
      __dst[2] = v47;
      if (*(char *)(v46 + 23) >= 0) {
        int v48 = (const void *)v46;
      }
      else {
        int v48 = *(const void **)v46;
      }
      memcpy(__dst + 3, v48, v47);
      __dst += v47 + 3;
      if ((v11 & 0x10) != 0) {
        goto LABEL_97;
      }
LABEL_87:
      if ((v11 & 0x1000) == 0) {
        goto LABEL_111;
      }
      goto LABEL_103;
    }
LABEL_106:
    long long __dst = sub_188A6CC(a3, 22, (void **)v46, __dst);
    if ((v11 & 0x10) != 0) {
      goto LABEL_97;
    }
    goto LABEL_87;
  }
  if ((v11 & 0x10) == 0) {
    goto LABEL_87;
  }
LABEL_97:
  if (*(void *)a3 <= (unint64_t)__dst) {
    long long __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
  }
  uint64_t v49 = *(void *)(a1 + 192);
  *(_WORD *)long long __dst = 442;
  unsigned int v50 = *(_DWORD *)(v49 + 44);
  __dst[2] = v50;
  if (v50 > 0x7F)
  {
    int v51 = sub_188A9CC(v50, __dst + 2);
    long long __dst = sub_15B0C0C(v49, v51, a3);
    if ((v11 & 0x1000) == 0) {
      goto LABEL_111;
    }
  }
  else
  {
    long long __dst = sub_15B0C0C(v49, __dst + 3, a3);
    if ((v11 & 0x1000) == 0) {
      goto LABEL_111;
    }
  }
LABEL_103:
  if (*(void *)a3 <= (unint64_t)__dst)
  {
    long long __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
    unsigned int v52 = *(_DWORD *)(a1 + 236);
    *(_WORD *)long long __dst = 448;
    __dst[2] = v52;
    if (v52 <= 0x7F) {
      goto LABEL_105;
    }
  }
  else
  {
    unsigned int v52 = *(_DWORD *)(a1 + 236);
    *(_WORD *)long long __dst = 448;
    __dst[2] = v52;
    if (v52 <= 0x7F)
    {
LABEL_105:
      __dst += 3;
      goto LABEL_111;
    }
  }
  __dst[2] = v52 | 0x80;
  unsigned int v53 = v52 >> 7;
  __dst[3] = v52 >> 7;
  __dst += 4;
  if (v52 >= 0x4000)
  {
    do
    {
      *(__dst - 1) |= 0x80u;
      unsigned int v54 = v53 >> 14;
      v53 >>= 7;
      *__dst++ = v53;
    }
    while (v54);
  }
LABEL_111:
  if ((v11 & 4) != 0)
  {
    unint64_t v56 = *(void *)(a1 + 176) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v56 + 23) < 0)
    {
      int64_t v57 = *(void *)(v56 + 8);
      if (v57 > 127) {
        goto LABEL_170;
      }
    }
    else
    {
      int64_t v57 = *(unsigned __int8 *)(v56 + 23);
    }
    if (*(void *)a3 - (void)__dst + 13 >= v57)
    {
      *(_WORD *)long long __dst = 466;
      __dst[2] = v57;
      if (*(char *)(v56 + 23) >= 0) {
        uint64_t v58 = (const void *)v56;
      }
      else {
        uint64_t v58 = *(const void **)v56;
      }
      memcpy(__dst + 3, v58, v57);
      __dst += v57 + 3;
      if ((v11 & 0x2000) != 0) {
        goto LABEL_124;
      }
LABEL_113:
      if ((v11 & 0x20) == 0) {
        goto LABEL_114;
      }
      goto LABEL_127;
    }
LABEL_170:
    long long __dst = sub_188A6CC(a3, 26, (void **)v56, __dst);
    if ((v11 & 0x2000) != 0) {
      goto LABEL_124;
    }
    goto LABEL_113;
  }
  if ((v11 & 0x2000) == 0) {
    goto LABEL_113;
  }
LABEL_124:
  if (*(void *)a3 <= (unint64_t)__dst) {
    long long __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
  }
  char v59 = *(unsigned char *)(a1 + 240);
  *(_WORD *)long long __dst = 472;
  __dst[2] = v59;
  __dst += 3;
  if ((v11 & 0x20) == 0)
  {
LABEL_114:
    uint64_t v55 = *(unsigned int *)(a1 + 120);
    if ((int)v55 < 1) {
      goto LABEL_143;
    }
    goto LABEL_133;
  }
LABEL_127:
  if (*(void *)a3 <= (unint64_t)__dst) {
    long long __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
  }
  uint64_t v60 = *(void *)(a1 + 200);
  *(_WORD *)long long __dst = 482;
  unsigned int v61 = *(_DWORD *)(v60 + 20);
  __dst[2] = v61;
  if (v61 > 0x7F) {
    unint64_t v62 = sub_188A9CC(v61, __dst + 2);
  }
  else {
    unint64_t v62 = __dst + 3;
  }
  long long __dst = sub_10F5A04(v60, v62, a3);
  uint64_t v55 = *(unsigned int *)(a1 + 120);
  if ((int)v55 >= 1)
  {
LABEL_133:
    uint64_t v63 = 0;
    uint64_t v64 = 8 * v55;
    while (1)
    {
      int v65 = *(unsigned __int8 **)(*(void *)(a1 + 128) + v63 + 8);
      if (((char)v65[23] & 0x80000000) == 0) {
        break;
      }
      int64_t v66 = *((void *)v65 + 1);
      if (v66 > 127)
      {
LABEL_142:
        long long __dst = (char *)sub_188A868(a3, 30, (uint64_t)v65, __dst);
        v63 += 8;
        if (v64 == v63) {
          goto LABEL_143;
        }
      }
      else
      {
LABEL_137:
        if (*(void *)a3 - (void)__dst + 13 < v66) {
          goto LABEL_142;
        }
        *(_WORD *)long long __dst = 498;
        __dst[2] = v66;
        if ((char)v65[23] < 0) {
          int v65 = *(unsigned __int8 **)v65;
        }
        uint64_t v67 = __dst + 3;
        memcpy(v67, v65, v66);
        long long __dst = &v67[v66];
        v63 += 8;
        if (v64 == v63) {
          goto LABEL_143;
        }
      }
    }
    int64_t v66 = v65[23];
    goto LABEL_137;
  }
LABEL_143:
  uint64_t v68 = *(unsigned int *)(a1 + 144);
  if ((int)v68 >= 1)
  {
    uint64_t v69 = 0;
    uint64_t v70 = 8 * v68;
    while (1)
    {
      uint64_t v71 = *(unsigned __int8 **)(*(void *)(a1 + 152) + v69 + 8);
      if (((char)v71[23] & 0x80000000) == 0) {
        break;
      }
      int64_t v72 = *((void *)v71 + 1);
      if (v72 > 127)
      {
LABEL_153:
        long long __dst = (char *)sub_188A868(a3, 31, (uint64_t)v71, __dst);
        v69 += 8;
        if (v70 == v69) {
          goto LABEL_154;
        }
      }
      else
      {
LABEL_148:
        if (*(void *)a3 - (void)__dst + 13 < v72) {
          goto LABEL_153;
        }
        *(_WORD *)long long __dst = 506;
        __dst[2] = v72;
        if ((char)v71[23] < 0) {
          uint64_t v71 = *(unsigned __int8 **)v71;
        }
        int v73 = __dst + 3;
        memcpy(v73, v71, v72);
        long long __dst = &v73[v72];
        v69 += 8;
        if (v70 == v69) {
          goto LABEL_154;
        }
      }
    }
    int64_t v72 = v71[23];
    goto LABEL_148;
  }
LABEL_154:
  if ((v11 & 0x4000) != 0)
  {
    if (*(void *)a3 <= (unint64_t)__dst) {
      long long __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
    }
    char v74 = *(unsigned char *)(a1 + 241);
    *(_WORD *)long long __dst = 640;
    __dst[2] = v74;
    __dst += 3;
    if ((v11 & 0x40) == 0)
    {
LABEL_156:
      if ((v11 & 0x800) == 0) {
        goto LABEL_175;
      }
      goto LABEL_167;
    }
  }
  else if ((v11 & 0x40) == 0)
  {
    goto LABEL_156;
  }
  if (*(void *)a3 <= (unint64_t)__dst) {
    long long __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
  }
  uint64_t v75 = *(void *)(a1 + 208);
  *(_WORD *)long long __dst = 650;
  unsigned int v76 = *(_DWORD *)(v75 + 20);
  __dst[2] = v76;
  if (v76 > 0x7F)
  {
    int v77 = sub_188A9CC(v76, __dst + 2);
    long long __dst = sub_1473014(v75, (unint64_t)v77, a3);
    if ((v11 & 0x800) == 0) {
      goto LABEL_175;
    }
  }
  else
  {
    long long __dst = sub_1473014(v75, (unint64_t)(__dst + 3), a3);
    if ((v11 & 0x800) == 0) {
      goto LABEL_175;
    }
  }
LABEL_167:
  if (*(void *)a3 <= (unint64_t)__dst)
  {
    long long __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
    unsigned int v78 = *(_DWORD *)(a1 + 232);
    *(_WORD *)long long __dst = 656;
    __dst[2] = v78;
    if (v78 <= 0x7F) {
      goto LABEL_169;
    }
  }
  else
  {
    unsigned int v78 = *(_DWORD *)(a1 + 232);
    *(_WORD *)long long __dst = 656;
    __dst[2] = v78;
    if (v78 <= 0x7F)
    {
LABEL_169:
      __dst += 3;
      goto LABEL_175;
    }
  }
  __dst[2] = v78 | 0x80;
  unsigned int v79 = v78 >> 7;
  __dst[3] = v78 >> 7;
  __dst += 4;
  if (v78 >= 0x4000)
  {
    do
    {
      *(__dst - 1) |= 0x80u;
      unsigned int v80 = v79 >> 14;
      v79 >>= 7;
      *__dst++ = v79;
    }
    while (v80);
  }
LABEL_175:
  uint64_t v81 = *(void *)(a1 + 8);
  if ((v81 & 1) == 0) {
    return __dst;
  }
  unint64_t v83 = v81 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v83 + 31) < 0)
  {
    int v84 = *(void **)(v83 + 8);
    uint64_t v85 = *(void *)(v83 + 16);
  }
  else
  {
    int v84 = (void *)(v83 + 8);
    LODWORD(v85) = *(unsigned __int8 *)(v83 + 31);
  }
  uint64_t v86 = (int)v85;
  if (*(void *)a3 - (void)__dst >= (int)v85)
  {
    memcpy(__dst, v84, (int)v85);
    __dst += v86;
    return __dst;
  }

  return (char *)sub_188A528(a3, (char *)v84, v85, __dst);
}

uint64_t sub_10F7E9C(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = (uint64_t *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = sub_10EF244(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
    uint64_t v8 = *(unsigned int *)(a1 + 56);
    uint64_t v9 = v2 + v8;
    if ((int)v8 < 1) {
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v8 = *(unsigned int *)(a1 + 56);
    uint64_t v9 = v8;
    if ((int)v8 < 1) {
      goto LABEL_23;
    }
  }
  uint64_t v10 = *(void *)(a1 + 64);
  if (v8 == 1)
  {
    uint64_t v11 = 0;
LABEL_19:
    unsigned int v19 = (uint64_t *)(v10 + 8 * v11 + 8);
    uint64_t v20 = v8 - v11;
    do
    {
      uint64_t v21 = *v19++;
      uint64_t v22 = *(unsigned __int8 *)(v21 + 23);
      uint64_t v23 = *(void *)(v21 + 8);
      if ((v22 & 0x80u) == 0) {
        uint64_t v23 = v22;
      }
      v9 += v23 + ((9 * (__clz(v23 | 1) ^ 0x1F) + 73) >> 6);
      --v20;
    }
    while (v20);
    goto LABEL_23;
  }
  uint64_t v12 = 0;
  uint64_t v11 = v8 & 0xFFFFFFFE;
  uint64_t v13 = v10 + 16;
  uint64_t v14 = v11;
  do
  {
    uint64_t v15 = *(void *)(v13 - 8);
    uint64_t v16 = *(unsigned __int8 *)(v15 + 23);
    uint64_t v17 = *(void *)(v15 + 8);
    uint64_t v18 = *(void *)(*(void *)v13 + 8);
    if ((v16 & 0x80u) == 0) {
      uint64_t v17 = v16;
    }
    if (*(char *)(*(void *)v13 + 23) >= 0) {
      uint64_t v18 = *(unsigned __int8 *)(*(void *)v13 + 23);
    }
    v9 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6);
    v12 += v18 + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6);
    v13 += 16;
    v14 -= 2;
  }
  while (v14);
  v9 += v12;
  if (v11 != v8) {
    goto LABEL_19;
  }
LABEL_23:
  uint64_t v24 = *(int *)(a1 + 80);
  uint64_t v25 = v9 + 2 * v24;
  uint64_t v26 = *(void *)(a1 + 88);
  if (v26) {
    int v27 = (uint64_t *)(v26 + 8);
  }
  else {
    int v27 = 0;
  }
  if (v24)
  {
    uint64_t v28 = 8 * v24;
    do
    {
      uint64_t v29 = *v27++;
      uint64_t v30 = sub_15B0D90(v29);
      v25 += v30 + ((9 * (__clz(v30 | 1) ^ 0x1F) + 73) >> 6);
      v28 -= 8;
    }
    while (v28);
  }
  uint64_t v31 = sub_188D4F0((unsigned int *)(a1 + 96));
  uint64_t v32 = *(unsigned int *)(a1 + 120);
  uint64_t v33 = v31 + v25 + 2 * (v32 + *(unsigned int *)(a1 + 96));
  if ((int)v32 >= 1)
  {
    uint64_t v34 = *(void *)(a1 + 128);
    if (v32 == 1)
    {
      uint64_t v35 = 0;
LABEL_39:
      unsigned int v43 = (uint64_t *)(v34 + 8 * v35 + 8);
      uint64_t v44 = v32 - v35;
      do
      {
        uint64_t v45 = *v43++;
        uint64_t v46 = *(unsigned __int8 *)(v45 + 23);
        uint64_t v47 = *(void *)(v45 + 8);
        if ((v46 & 0x80u) == 0) {
          uint64_t v47 = v46;
        }
        v33 += v47 + ((9 * (__clz(v47 | 1) ^ 0x1F) + 73) >> 6);
        --v44;
      }
      while (v44);
      goto LABEL_43;
    }
    uint64_t v36 = 0;
    uint64_t v35 = v32 & 0xFFFFFFFE;
    uint64_t v37 = v34 + 16;
    uint64_t v38 = v35;
    do
    {
      uint64_t v39 = *(void *)(v37 - 8);
      uint64_t v40 = *(unsigned __int8 *)(v39 + 23);
      uint64_t v41 = *(void *)(v39 + 8);
      uint64_t v42 = *(void *)(*(void *)v37 + 8);
      if ((v40 & 0x80u) == 0) {
        uint64_t v41 = v40;
      }
      if (*(char *)(*(void *)v37 + 23) >= 0) {
        uint64_t v42 = *(unsigned __int8 *)(*(void *)v37 + 23);
      }
      v33 += v41 + ((9 * (__clz(v41 | 1) ^ 0x1F) + 73) >> 6);
      v36 += v42 + ((9 * (__clz(v42 | 1) ^ 0x1F) + 73) >> 6);
      v37 += 16;
      v38 -= 2;
    }
    while (v38);
    v33 += v36;
    if (v35 != v32) {
      goto LABEL_39;
    }
  }
LABEL_43:
  uint64_t v48 = *(unsigned int *)(a1 + 144);
  uint64_t v49 = v33 + 2 * v48;
  if ((int)v48 < 1) {
    goto LABEL_57;
  }
  uint64_t v50 = *(void *)(a1 + 152);
  if (v48 == 1)
  {
    uint64_t v51 = 0;
LABEL_53:
    char v59 = (uint64_t *)(v50 + 8 * v51 + 8);
    uint64_t v60 = v48 - v51;
    do
    {
      uint64_t v61 = *v59++;
      uint64_t v62 = *(unsigned __int8 *)(v61 + 23);
      uint64_t v63 = *(void *)(v61 + 8);
      if ((v62 & 0x80u) == 0) {
        uint64_t v63 = v62;
      }
      v49 += v63 + ((9 * (__clz(v63 | 1) ^ 0x1F) + 73) >> 6);
      --v60;
    }
    while (v60);
    goto LABEL_57;
  }
  uint64_t v52 = 0;
  uint64_t v51 = v48 & 0xFFFFFFFE;
  uint64_t v53 = v50 + 16;
  uint64_t v54 = v51;
  do
  {
    uint64_t v55 = *(void *)(v53 - 8);
    uint64_t v56 = *(unsigned __int8 *)(v55 + 23);
    uint64_t v57 = *(void *)(v55 + 8);
    uint64_t v58 = *(void *)(*(void *)v53 + 8);
    if ((v56 & 0x80u) == 0) {
      uint64_t v57 = v56;
    }
    if (*(char *)(*(void *)v53 + 23) >= 0) {
      uint64_t v58 = *(unsigned __int8 *)(*(void *)v53 + 23);
    }
    v49 += v57 + ((9 * (__clz(v57 | 1) ^ 0x1F) + 73) >> 6);
    v52 += v58 + ((9 * (__clz(v58 | 1) ^ 0x1F) + 73) >> 6);
    v53 += 16;
    v54 -= 2;
  }
  while (v54);
  v49 += v52;
  if (v51 != v48) {
    goto LABEL_53;
  }
LABEL_57:
  int v64 = *(_DWORD *)(a1 + 16);
  if (!(_BYTE)v64) {
    goto LABEL_67;
  }
  if (v64)
  {
    unint64_t v68 = *(void *)(a1 + 160) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v69 = *(unsigned __int8 *)(v68 + 23);
    uint64_t v70 = *(void *)(v68 + 8);
    if ((v69 & 0x80u) == 0) {
      uint64_t v70 = v69;
    }
    v49 += v70 + ((9 * (__clz(v70 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if ((v64 & 2) == 0)
    {
LABEL_60:
      if ((v64 & 4) == 0) {
        goto LABEL_61;
      }
      goto LABEL_87;
    }
  }
  else if ((v64 & 2) == 0)
  {
    goto LABEL_60;
  }
  unint64_t v71 = *(void *)(a1 + 168) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v72 = *(unsigned __int8 *)(v71 + 23);
  uint64_t v73 = *(void *)(v71 + 8);
  if ((v72 & 0x80u) == 0) {
    uint64_t v73 = v72;
  }
  v49 += v73 + ((9 * (__clz(v73 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v64 & 4) == 0)
  {
LABEL_61:
    if ((v64 & 8) == 0) {
      goto LABEL_62;
    }
    goto LABEL_90;
  }
LABEL_87:
  unint64_t v74 = *(void *)(a1 + 176) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v75 = *(unsigned __int8 *)(v74 + 23);
  uint64_t v76 = *(void *)(v74 + 8);
  if ((v75 & 0x80u) == 0) {
    uint64_t v76 = v75;
  }
  v49 += v76 + ((9 * (__clz(v76 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v64 & 8) == 0)
  {
LABEL_62:
    if ((v64 & 0x10) == 0) {
      goto LABEL_63;
    }
    goto LABEL_91;
  }
LABEL_90:
  uint64_t v77 = sub_10F4ED4(*(void *)(a1 + 184));
  v49 += v77 + ((9 * (__clz(v77 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v64 & 0x10) == 0)
  {
LABEL_63:
    if ((v64 & 0x20) == 0) {
      goto LABEL_64;
    }
    goto LABEL_92;
  }
LABEL_91:
  uint64_t v78 = sub_15B0D90(*(void *)(a1 + 192));
  v49 += v78 + ((9 * (__clz(v78 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v64 & 0x20) == 0)
  {
LABEL_64:
    if ((v64 & 0x40) == 0) {
      goto LABEL_65;
    }
    goto LABEL_109;
  }
LABEL_92:
  uint64_t v79 = *(void *)(a1 + 200);
  int v80 = *(_DWORD *)(v79 + 16);
  if ((v80 & 3) == 0)
  {
    unint64_t v81 = 0;
    goto LABEL_107;
  }
  if (v80)
  {
    unint64_t v81 = ((9 * (__clz(*(void *)(v79 + 24) | 1) ^ 0x3F) + 73) >> 6) + 1;
    if ((v80 & 2) == 0) {
      goto LABEL_107;
    }
    goto LABEL_106;
  }
  unint64_t v81 = 0;
  if ((v80 & 2) != 0) {
LABEL_106:
  }
    v81 += ((9 * (__clz(*(_DWORD *)(v79 + 32) | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_107:
  uint64_t v85 = *(void *)(v79 + 8);
  if (v85)
  {
    unint64_t v90 = v85 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v90 + 31) < 0) {
      uint64_t v91 = *(void *)(v90 + 16);
    }
    else {
      uint64_t v91 = *(unsigned __int8 *)(v90 + 31);
    }
    v81 += v91;
  }
  *(_DWORD *)(v79 + 20) = v81;
  v49 += v81 + ((9 * (__clz(v81 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v64 & 0x40) == 0)
  {
LABEL_65:
    if ((v64 & 0x80) == 0) {
      goto LABEL_67;
    }
    goto LABEL_66;
  }
LABEL_109:
  unint64_t v86 = sub_14731B8(*(void *)(a1 + 208));
  v49 += v86 + ((9 * (__clz(v86 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v64 & 0x80) != 0) {
LABEL_66:
  }
    v49 += ((9 * (__clz(*(_DWORD *)(a1 + 216) | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_67:
  if ((v64 & 0x7F00) == 0) {
    goto LABEL_79;
  }
  if ((v64 & 0x100) != 0)
  {
    v49 += ((9 * (__clz(*(_DWORD *)(a1 + 220) | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v64 & 0x200) == 0)
    {
LABEL_70:
      if ((v64 & 0x400) == 0) {
        goto LABEL_71;
      }
      goto LABEL_98;
    }
  }
  else if ((v64 & 0x200) == 0)
  {
    goto LABEL_70;
  }
  v49 += ((9 * (__clz(*(_DWORD *)(a1 + 224) | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v64 & 0x400) == 0)
  {
LABEL_71:
    if ((v64 & 0x800) == 0) {
      goto LABEL_72;
    }
LABEL_102:
    v49 += ((9 * (__clz(*(_DWORD *)(a1 + 232) | 1) ^ 0x1F) + 73) >> 6) + 2;
    if ((v64 & 0x1000) == 0) {
      goto LABEL_74;
    }
    goto LABEL_73;
  }
LABEL_98:
  int v82 = *(_DWORD *)(a1 + 228);
  uint64_t v83 = ((9 * (__clz(v82 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if (v82 >= 0) {
    uint64_t v84 = v83;
  }
  else {
    uint64_t v84 = 12;
  }
  v49 += v84;
  if ((v64 & 0x800) != 0) {
    goto LABEL_102;
  }
LABEL_72:
  if ((v64 & 0x1000) != 0) {
LABEL_73:
  }
    v49 += ((9 * (__clz(*(_DWORD *)(a1 + 236) | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_74:
  uint64_t v65 = v49 + 3;
  if ((v64 & 0x2000) == 0) {
    uint64_t v65 = v49;
  }
  if ((v64 & 0x4000) != 0) {
    uint64_t v49 = v65 + 3;
  }
  else {
    uint64_t v49 = v65;
  }
LABEL_79:
  uint64_t v66 = *(void *)(a1 + 8);
  if (v66)
  {
    unint64_t v87 = v66 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v87 + 31) < 0) {
      uint64_t v88 = *(void *)(v87 + 16);
    }
    else {
      uint64_t v88 = *(unsigned __int8 *)(v87 + 31);
    }
    uint64_t v89 = v88 + v49;
    *(_DWORD *)(a1 + 20) = v89;
    return v89;
  }
  else
  {
    *(_DWORD *)(a1 + 20) = v49;
    return v49;
  }
}

void sub_10F865C(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 40) + 8);
    uint64_t v6 = (uint64_t *)sub_188CCE4(a1 + 24, *(_DWORD *)(a2 + 32));
    sub_10FB2D0((uint64_t *)(a1 + 24), v6, v5, v4, **(_DWORD **)(a1 + 40) - *(_DWORD *)(a1 + 32));
    int v7 = *(_DWORD *)(a1 + 32) + v4;
    *(_DWORD *)(a1 + 32) = v7;
    uint64_t v8 = *(int **)(a1 + 40);
    if (*v8 < v7) {
      *uint64_t v8 = v7;
    }
  }
  int v9 = *(_DWORD *)(a2 + 56);
  if (v9)
  {
    uint64_t v10 = (const std::string **)(*(void *)(a2 + 64) + 8);
    uint64_t v11 = (std::string **)sub_188CCE4(a1 + 48, *(_DWORD *)(a2 + 56));
    sub_188FB98(a1 + 48, v11, v10, v9, **(_DWORD **)(a1 + 64) - *(_DWORD *)(a1 + 56));
    int v12 = *(_DWORD *)(a1 + 56) + v9;
    *(_DWORD *)(a1 + 56) = v12;
    uint64_t v13 = *(int **)(a1 + 64);
    if (*v13 < v12) {
      *uint64_t v13 = v12;
    }
  }
  int v14 = *(_DWORD *)(a2 + 80);
  if (v14)
  {
    uint64_t v15 = (uint64_t *)(*(void *)(a2 + 88) + 8);
    uint64_t v16 = (uint64_t *)sub_188CCE4(a1 + 72, *(_DWORD *)(a2 + 80));
    sub_10E4FFC((uint64_t *)(a1 + 72), v16, v15, v14, **(_DWORD **)(a1 + 88) - *(_DWORD *)(a1 + 80));
    int v17 = *(_DWORD *)(a1 + 80) + v14;
    *(_DWORD *)(a1 + 80) = v17;
    uint64_t v18 = *(int **)(a1 + 88);
    if (*v18 < v17) {
      *uint64_t v18 = v17;
    }
  }
  int v19 = *(_DWORD *)(a2 + 96);
  if (v19)
  {
    uint64_t v20 = *(int *)(a1 + 96);
    sub_188C80C((unsigned int *)(a1 + 96), v20 + v19);
    uint64_t v21 = *(void *)(a1 + 104);
    *(_DWORD *)(a1 + 96) += *(_DWORD *)(a2 + 96);
    memcpy((void *)(v21 + 4 * v20), *(const void **)(a2 + 104), 4 * *(int *)(a2 + 96));
  }
  int v22 = *(_DWORD *)(a2 + 120);
  if (v22)
  {
    uint64_t v23 = (const std::string **)(*(void *)(a2 + 128) + 8);
    uint64_t v24 = (std::string **)sub_188CCE4(a1 + 112, *(_DWORD *)(a2 + 120));
    sub_188FB98(a1 + 112, v24, v23, v22, **(_DWORD **)(a1 + 128) - *(_DWORD *)(a1 + 120));
    int v25 = *(_DWORD *)(a1 + 120) + v22;
    *(_DWORD *)(a1 + 120) = v25;
    uint64_t v26 = *(int **)(a1 + 128);
    if (*v26 < v25) {
      *uint64_t v26 = v25;
    }
  }
  int v27 = *(_DWORD *)(a2 + 144);
  if (v27)
  {
    uint64_t v28 = (const std::string **)(*(void *)(a2 + 152) + 8);
    uint64_t v29 = (std::string **)sub_188CCE4(a1 + 136, *(_DWORD *)(a2 + 144));
    sub_188FB98(a1 + 136, v29, v28, v27, **(_DWORD **)(a1 + 152) - *(_DWORD *)(a1 + 144));
    int v30 = *(_DWORD *)(a1 + 144) + v27;
    *(_DWORD *)(a1 + 144) = v30;
    uint64_t v31 = *(int **)(a1 + 152);
    if (*v31 < v30) {
      *uint64_t v31 = v30;
    }
  }
  int v32 = *(_DWORD *)(a2 + 16);
  if ((_BYTE)v32)
  {
    if ((v32 & 1) == 0)
    {
      if ((v32 & 2) == 0) {
        goto LABEL_21;
      }
LABEL_28:
      uint64_t v37 = (long long *)(*(void *)(a2 + 168) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 16) |= 2u;
      uint64_t v38 = (std::string **)(a1 + 168);
      uint64_t v39 = *(void *)(a1 + 8);
      uint64_t v40 = (uint64_t **)(v39 & 0xFFFFFFFFFFFFFFFCLL);
      if (v39)
      {
        sub_1881DF4(v38, v37, *v40);
        if ((v32 & 4) != 0) {
          goto LABEL_30;
        }
      }
      else
      {
        sub_1881DF4(v38, v37, (uint64_t *)v40);
        if ((v32 & 4) != 0) {
          goto LABEL_30;
        }
      }
LABEL_22:
      if ((v32 & 8) == 0) {
        goto LABEL_23;
      }
LABEL_32:
      *(_DWORD *)(a1 + 16) |= 8u;
      uint64_t v45 = *(void *)(a1 + 184);
      if (!v45)
      {
        uint64_t v46 = *(void *)(a1 + 8);
        uint64_t v47 = (void *)(v46 & 0xFFFFFFFFFFFFFFFCLL);
        if (v46) {
          uint64_t v47 = (void *)*v47;
        }
        sub_10F98DC((uint64_t)v47);
        *(void *)(a1 + 184) = v45;
      }
      if (*(void *)(a2 + 184)) {
        uint64_t v48 = *(uint64_t (****)())(a2 + 184);
      }
      else {
        uint64_t v48 = &off_24F7B28;
      }
      sub_10F522C(v45, (uint64_t)v48);
      if ((v32 & 0x10) == 0)
      {
LABEL_24:
        if ((v32 & 0x20) == 0)
        {
LABEL_62:
          if ((v32 & 0x40) != 0)
          {
            *(_DWORD *)(a1 + 16) |= 0x40u;
            char v59 = *(std::string **)(a1 + 208);
            if (!v59)
            {
              uint64_t v60 = *(void *)(a1 + 8);
              uint64_t v61 = (void *)(v60 & 0xFFFFFFFFFFFFFFFCLL);
              if (v60) {
                uint64_t v61 = (void *)*v61;
              }
              char v59 = (std::string *)sub_147967C((uint64_t)v61);
              *(void *)(a1 + 208) = v59;
            }
            if (*(void *)(a2 + 208)) {
              uint64_t v62 = *(uint64_t (****)())(a2 + 208);
            }
            else {
              uint64_t v62 = &off_2539AF0;
            }
            sub_1113E40(v59, (uint64_t)v62);
          }
          if ((v32 & 0x80) != 0) {
            *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
          }
          *(_DWORD *)(a1 + 16) |= v32;
          goto LABEL_74;
        }
LABEL_48:
        *(_DWORD *)(a1 + 16) |= 0x20u;
        uint64_t v53 = *(void *)(a1 + 200);
        if (!v53)
        {
          uint64_t v54 = *(void *)(a1 + 8);
          uint64_t v55 = (void *)(v54 & 0xFFFFFFFFFFFFFFFCLL);
          if (v54) {
            uint64_t v55 = (void *)*v55;
          }
          uint64_t v53 = sub_10F999C((uint64_t)v55);
          *(void *)(a1 + 200) = v53;
        }
        uint64_t v56 = *(uint64_t (****)())(a2 + 200);
        if (!v56) {
          uint64_t v56 = &off_24F7BA8;
        }
        int v57 = *((_DWORD *)v56 + 4);
        if ((v57 & 3) != 0)
        {
          if (v57) {
            *(void *)(v53 + 24) = v56[3];
          }
          if ((v57 & 2) != 0) {
            *(_DWORD *)(v53 + 32) = *((_DWORD *)v56 + 8);
          }
          *(_DWORD *)(v53 + 16) |= v57;
        }
        unint64_t v58 = (unint64_t)v56[1];
        if (v58) {
          sub_188B4F8((uint64_t *)(v53 + 8), (v58 & 0xFFFFFFFFFFFFFFFCLL) + 8);
        }
        goto LABEL_62;
      }
LABEL_40:
      *(_DWORD *)(a1 + 16) |= 0x10u;
      uint64_t v49 = *(void *)(a1 + 192);
      if (!v49)
      {
        uint64_t v50 = *(void *)(a1 + 8);
        uint64_t v51 = (void *)(v50 & 0xFFFFFFFFFFFFFFFCLL);
        if (v50) {
          uint64_t v51 = (void *)*v51;
        }
        uint64_t v49 = sub_15C1918((uint64_t)v51);
        *(void *)(a1 + 192) = v49;
      }
      if (*(void *)(a2 + 192)) {
        uint64_t v52 = *(uint64_t (****)())(a2 + 192);
      }
      else {
        uint64_t v52 = &off_253F1A0;
      }
      sub_15B0E24(v49, (uint64_t)v52);
      if ((v32 & 0x20) == 0) {
        goto LABEL_62;
      }
      goto LABEL_48;
    }
    uint64_t v33 = (long long *)(*(void *)(a2 + 160) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v34 = (std::string **)(a1 + 160);
    uint64_t v35 = *(void *)(a1 + 8);
    uint64_t v36 = (uint64_t **)(v35 & 0xFFFFFFFFFFFFFFFCLL);
    if (v35)
    {
      sub_1881DF4(v34, v33, *v36);
      if ((v32 & 2) != 0) {
        goto LABEL_28;
      }
    }
    else
    {
      sub_1881DF4(v34, v33, (uint64_t *)v36);
      if ((v32 & 2) != 0) {
        goto LABEL_28;
      }
    }
LABEL_21:
    if ((v32 & 4) == 0) {
      goto LABEL_22;
    }
LABEL_30:
    uint64_t v41 = (long long *)(*(void *)(a2 + 176) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 16) |= 4u;
    uint64_t v42 = (std::string **)(a1 + 176);
    uint64_t v43 = *(void *)(a1 + 8);
    uint64_t v44 = (uint64_t **)(v43 & 0xFFFFFFFFFFFFFFFCLL);
    if (v43)
    {
      sub_1881DF4(v42, v41, *v44);
      if ((v32 & 8) != 0) {
        goto LABEL_32;
      }
    }
    else
    {
      sub_1881DF4(v42, v41, (uint64_t *)v44);
      if ((v32 & 8) != 0) {
        goto LABEL_32;
      }
    }
LABEL_23:
    if ((v32 & 0x10) == 0) {
      goto LABEL_24;
    }
    goto LABEL_40;
  }
LABEL_74:
  if ((v32 & 0x7F00) == 0) {
    goto LABEL_84;
  }
  if ((v32 & 0x100) != 0)
  {
    *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
    if ((v32 & 0x200) == 0)
    {
LABEL_77:
      if ((v32 & 0x400) == 0) {
        goto LABEL_78;
      }
      goto LABEL_90;
    }
  }
  else if ((v32 & 0x200) == 0)
  {
    goto LABEL_77;
  }
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  if ((v32 & 0x400) == 0)
  {
LABEL_78:
    if ((v32 & 0x800) == 0) {
      goto LABEL_79;
    }
    goto LABEL_91;
  }
LABEL_90:
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  if ((v32 & 0x800) == 0)
  {
LABEL_79:
    if ((v32 & 0x1000) == 0) {
      goto LABEL_80;
    }
    goto LABEL_92;
  }
LABEL_91:
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  if ((v32 & 0x1000) == 0)
  {
LABEL_80:
    if ((v32 & 0x2000) == 0) {
      goto LABEL_81;
    }
LABEL_93:
    *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
    if ((v32 & 0x4000) == 0) {
      goto LABEL_83;
    }
    goto LABEL_82;
  }
LABEL_92:
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(a2 + 236);
  if ((v32 & 0x2000) != 0) {
    goto LABEL_93;
  }
LABEL_81:
  if ((v32 & 0x4000) != 0) {
LABEL_82:
  }
    *(unsigned char *)(a1 + 241) = *(unsigned char *)(a2 + 241);
LABEL_83:
  *(_DWORD *)(a1 + 16) |= v32;
LABEL_84:
  uint64_t v63 = *(void *)(a2 + 8);
  if (v63)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v63 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

uint64_t sub_10F8BE8(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 32);
  while ((int)v2 >= 1)
  {
    uint64_t v3 = v2 - 1;
    char v4 = sub_10EFA80(*(void *)(*(void *)(a1 + 40) + 8 * v2));
    uint64_t v2 = v3;
    if ((v4 & 1) == 0) {
      return 0;
    }
  }
  uint64_t v6 = *(unsigned int *)(a1 + 80);
  while ((int)v6 >= 1)
  {
    uint64_t v7 = v6 - 1;
    char v8 = sub_15B0F18(*(void *)(*(void *)(a1 + 88) + 8 * v6));
    uint64_t v6 = v7;
    if ((v8 & 1) == 0) {
      return 0;
    }
  }
  if ((*(unsigned char *)(a1 + 16) & 8) == 0) {
    goto LABEL_24;
  }
  uint64_t v9 = *(void *)(a1 + 184);
  uint64_t v10 = *(unsigned int *)(v9 + 80);
  if ((int)v10 < 1)
  {
LABEL_17:
    if (*(unsigned char *)(v9 + 16))
    {
      uint64_t v13 = *(void *)(v9 + 96);
      uint64_t v14 = *(unsigned int *)(v13 + 32);
      if ((int)v14 >= 1)
      {
        uint64_t v15 = v14 + 1;
        do
        {
          uint64_t v16 = *(void *)(*(void *)(v13 + 40) + 8 * (v15 - 2) + 8);
          if (*(unsigned char *)(v16 + 16))
          {
            uint64_t result = sub_15B06D8(*(void *)(v16 + 24));
            if (!result) {
              return result;
            }
          }
        }
        while ((unint64_t)--v15 > 1);
      }
    }
LABEL_24:
    if ((*(unsigned char *)(a1 + 16) & 0x10) == 0) {
      return 1;
    }
    uint64_t result = sub_15B0F18(*(void *)(a1 + 192));
    if (result) {
      return 1;
    }
    return result;
  }
  uint64_t v11 = v10 + 1;
  while (1)
  {
    uint64_t v12 = *(void *)(*(void *)(v9 + 88) + 8 * (v11 - 2) + 8);
    if ((*(unsigned char *)(v12 + 16) & 2) != 0)
    {
      uint64_t result = sub_15B0F18(*(void *)(v12 + 32));
      if (!result) {
        return result;
      }
    }
    if ((unint64_t)--v11 <= 1) {
      goto LABEL_17;
    }
  }
}

void sub_10F8D40(char *a1@<X8>)
{
  a1[23] = 17;
  strcpy(a1, "geo3.SessionState");
}

double sub_10F8D64(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(v2 + 8) = a1;
  *(void *)uint64_t v2 = off_2440160;
  double result = 0.0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_DWORD *)(v2 + 48) = 1;
  return result;
}

uint64_t sub_10F8DE8(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t result = off_24401E0;
  *(void *)(result + 8) = a1;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = a1;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

double sub_10F8E90(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(v2 + 8) = a1;
  *(void *)uint64_t v2 = &off_2440260;
  double result = 0.0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(void *)(v2 + 48) = 0;
  return result;
}

uint64_t sub_10F8F10(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = off_24402E0;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_10F8F8C(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = off_2440360;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void *sub_10F9004(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *uint64_t result = off_24403E0;
  result[1] = a1;
  result[2] = 0;
  result[3] = a1;
  result[4] = 0;
  result[5] = 0;
  result[6] = &qword_2550250;
  result[7] = 0;
  return result;
}

uint64_t sub_10F90BC(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t result = &off_2440460;
  *(void *)(result + 8) = a1;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a1;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_10F915C(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = off_24404E0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_10F91DC(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t result = off_2440560;
  *(void *)(result + 8) = a1;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a1;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t sub_10F9284(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t result = off_24405E0;
  *(void *)(result + 8) = a1;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = a1;
  *(void *)(result + 40) = a1;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 64) = a1;
  *(void *)(result + 72) = 0;
  *(void *)(result + 80) = 0;
  *(void *)(result + 88) = a1;
  *(void *)(result + 96) = 0;
  *(void *)(result + 104) = 0;
  *(void *)(result + 112) = &qword_2550250;
  *(void *)(result + 120) = 0;
  *(void *)(result + 128) = 0;
  *(void *)(result + 136) = 0;
  *(_DWORD *)(result + 144) = 0;
  return result;
}

uint64_t sub_10F9348(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = off_2440660;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void *sub_10F93C4(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = off_24406E0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void *sub_10F943C(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = off_2440760;
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

double sub_10F94B8(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t v2 = off_24407E0;
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = 0;
  *(void *)(v2 + 80) = 0;
  *(void *)(v2 + 88) = a1;
  *(void *)(v2 + 96) = 0;
  *(void *)(v2 + 104) = 0;
  *(void *)(v2 + 112) = a1;
  double result = 0.0;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  return result;
}

double sub_10F9594(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(v2 + 8) = a1;
  *(void *)uint64_t v2 = off_2440860;
  double result = 0.0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(unsigned char *)(v2 + 48) = 0;
  return result;
}

void *sub_10F9614(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *double result = off_24408E0;
  result[1] = a1;
  result[2] = 0;
  result[3] = a1;
  result[4] = 0;
  result[5] = 0;
  result[6] = 0;
  return result;
}

uint64_t sub_10F96BC(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = off_2440960;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_10F9738(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = off_24409E0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_WORD *)(result + 32) = 0;
  return result;
}

void *sub_10F97B4(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *uint64_t result = off_2440A60;
  result[1] = a1;
  result[2] = 0;
  result[3] = a1;
  result[4] = 0;
  result[5] = 0;
  result[6] = 0;
  return result;
}

double sub_10F985C(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(v2 + 8) = a1;
  *(void *)uint64_t v2 = off_2440AE0;
  double result = 0.0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(void *)(v2 + 48) = 0;
  return result;
}

double sub_10F98DC(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t v2 = off_2440B60;
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = 0;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 72) = a1;
  double result = 0.0;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  return result;
}

uint64_t sub_10F999C(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = off_2440BE0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

double sub_10F9A18(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t v2 = off_2440C60;
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = 0;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 72) = a1;
  *(void *)(v2 + 80) = 0;
  *(void *)(v2 + 88) = 0;
  *(void *)(v2 + 96) = 0;
  *(void *)(v2 + 104) = a1;
  *(void *)(v2 + 112) = a1;
  *(void *)(v2 + 120) = 0;
  *(void *)(v2 + 128) = 0;
  *(void *)(v2 + 136) = a1;
  *(void *)(v2 + 144) = 0;
  *(void *)(v2 + 152) = 0;
  *(void *)(v2 + 160) = &qword_2550250;
  *(void *)(v2 + 168) = &qword_2550250;
  *(void *)(v2 + 176) = &qword_2550250;
  double result = 0.0;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 226) = 0u;
  return result;
}

void sub_10F9B00()
{
}

double sub_10F9B58(uint64_t a1, uint64_t a2)
{
  return sub_10F8D64(a2);
}

uint64_t sub_10F9B60(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_10F9B68()
{
}

uint64_t sub_10F9BBC(uint64_t a1, uint64_t a2)
{
  return sub_10F8DE8(a2);
}

uint64_t sub_10F9BC4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

void sub_10F9BCC()
{
}

double sub_10F9C20(uint64_t a1, uint64_t a2)
{
  return sub_10F8E90(a2);
}

uint64_t sub_10F9C28(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_10F9C30()
{
}

uint64_t sub_10F9C80(uint64_t a1, uint64_t a2)
{
  return sub_10F8F10(a2);
}

uint64_t sub_10F9C88(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_10F9C90()
{
}

uint64_t sub_10F9CDC(uint64_t a1, uint64_t a2)
{
  return sub_10F8F8C(a2);
}

uint64_t sub_10F9CE4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

void sub_10F9CEC()
{
}

void *sub_10F9D48(uint64_t a1, uint64_t a2)
{
  return sub_10F9004(a2);
}

uint64_t sub_10F9D50(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_10F9D58()
{
}

uint64_t sub_10F9DA8(uint64_t a1, uint64_t a2)
{
  return sub_10F90BC(a2);
}

uint64_t sub_10F9DB0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

void sub_10F9DB8()
{
}

uint64_t sub_10F9E0C(uint64_t a1, uint64_t a2)
{
  return sub_10F915C(a2);
}

uint64_t sub_10F9E14(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_10F9E1C()
{
}

uint64_t sub_10F9E70(uint64_t a1, uint64_t a2)
{
  return sub_10F91DC(a2);
}

uint64_t sub_10F9E78(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_10F9E80()
{
}

uint64_t sub_10F9EEC(uint64_t a1, uint64_t a2)
{
  return sub_10F9284(a2);
}

uint64_t sub_10F9EF4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_10F9EFC()
{
}

uint64_t sub_10F9F4C(uint64_t a1, uint64_t a2)
{
  return sub_10F9348(a2);
}

uint64_t sub_10F9F54(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_10F9F5C()
{
}

void *sub_10F9FA8(uint64_t a1, uint64_t a2)
{
  return sub_10F93C4(a2);
}

uint64_t sub_10F9FB0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_10F9FB8()
{
}

void *sub_10FA008(uint64_t a1, uint64_t a2)
{
  return sub_10F943C(a2);
}

uint64_t sub_10FA010(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_10FA018()
{
}

double sub_10FA07C(uint64_t a1, uint64_t a2)
{
  return sub_10F94B8(a2);
}

uint64_t sub_10FA084(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_10FA08C()
{
}

double sub_10FA0E0(uint64_t a1, uint64_t a2)
{
  return sub_10F9594(a2);
}

uint64_t sub_10FA0E8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_10FA0F0()
{
}

void *sub_10FA144(uint64_t a1, uint64_t a2)
{
  return sub_10F9614(a2);
}

uint64_t sub_10FA14C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_10FA154()
{
}

uint64_t sub_10FA1A4(uint64_t a1, uint64_t a2)
{
  return sub_10F96BC(a2);
}

uint64_t sub_10FA1AC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_10FA1B4()
{
}

uint64_t sub_10FA204(uint64_t a1, uint64_t a2)
{
  return sub_10F9738(a2);
}

uint64_t sub_10FA20C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_10FA214()
{
}

void *sub_10FA268(uint64_t a1, uint64_t a2)
{
  return sub_10F97B4(a2);
}

uint64_t sub_10FA270(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_10FA278()
{
}

double sub_10FA2CC(uint64_t a1, uint64_t a2)
{
  return sub_10F985C(a2);
}

uint64_t sub_10FA2D4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_10FA2DC()
{
}

double sub_10FA338(uint64_t a1, uint64_t a2)
{
  return sub_10F98DC(a2);
}

uint64_t sub_10FA340(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_10FA348()
{
}

uint64_t sub_10FA398(uint64_t a1, uint64_t a2)
{
  return sub_10F999C(a2);
}

uint64_t sub_10FA3A0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_10FA3A8()
{
}

double sub_10FA428(uint64_t a1, uint64_t a2)
{
  return sub_10F9A18(a2);
}

uint64_t sub_10FA430(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_10FA438(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[2];
  if (!v2 || *a1)
  {
    a1[2] = 0;
    return;
  }
  uint64_t v3 = (void **)(v2 + 2);
  uint64_t v4 = *v2;
  if ((int)v4 >= 1)
  {
    while (1)
    {
      uint64_t v5 = *v3;
      if (*v3) {
        break;
      }
      ++v3;
      if (!--v4)
      {
        uint64_t v2 = (unsigned int *)a1[2];
        goto LABEL_19;
      }
    }
    uint64_t v6 = v5[1];
    if ((v6 & 1) != 0 && !*(void *)(v6 & 0xFFFFFFFFFFFFFFFCLL))
    {
      sub_10E4F74(v5 + 1);
      uint64_t v6 = v5[1];
    }
    *uint64_t v5 = off_24E6998;
    if ((v6 & 2) != 0)
    {
      uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6)
      {
        if (*v7)
        {
LABEL_13:
          sub_1881618();
          operator delete();
        }
      }
      else if (v7)
      {
        goto LABEL_13;
      }
    }
    operator delete();
  }
LABEL_19:
  operator delete(v2);
  a1[2] = 0;
}

void sub_10FA55C(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[2];
  if (!v2 || *a1)
  {
    a1[2] = 0;
    return;
  }
  uint64_t v3 = (void **)(v2 + 2);
  uint64_t v4 = *v2;
  if ((int)v4 >= 1)
  {
    while (1)
    {
      uint64_t v5 = *v3;
      if (*v3) {
        break;
      }
      ++v3;
      if (!--v4)
      {
        uint64_t v2 = (unsigned int *)a1[2];
        goto LABEL_19;
      }
    }
    uint64_t v6 = v5[1];
    if ((v6 & 1) != 0 && !*(void *)(v6 & 0xFFFFFFFFFFFFFFFCLL))
    {
      sub_10E4F74(v5 + 1);
      uint64_t v6 = v5[1];
    }
    *uint64_t v5 = off_24E6998;
    if ((v6 & 2) != 0)
    {
      uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6)
      {
        if (*v7)
        {
LABEL_13:
          sub_1881618();
          operator delete();
        }
      }
      else if (v7)
      {
        goto LABEL_13;
      }
    }
    operator delete();
  }
LABEL_19:
  operator delete(v2);
  a1[2] = 0;
}

void sub_10FA680(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[2];
  if (!v2 || *a1)
  {
    a1[2] = 0;
    return;
  }
  uint64_t v3 = (void **)(v2 + 2);
  uint64_t v4 = *v2;
  if ((int)v4 >= 1)
  {
    while (1)
    {
      uint64_t v5 = *v3;
      if (*v3) {
        break;
      }
      ++v3;
      if (!--v4)
      {
        uint64_t v2 = (unsigned int *)a1[2];
        goto LABEL_19;
      }
    }
    uint64_t v6 = v5[1];
    if ((v6 & 1) != 0 && !*(void *)(v6 & 0xFFFFFFFFFFFFFFFCLL))
    {
      sub_10E4F74(v5 + 1);
      uint64_t v6 = v5[1];
    }
    *uint64_t v5 = off_24E6998;
    if ((v6 & 2) != 0)
    {
      uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6)
      {
        if (*v7)
        {
LABEL_13:
          sub_1881618();
          operator delete();
        }
      }
      else if (v7)
      {
        goto LABEL_13;
      }
    }
    operator delete();
  }
LABEL_19:
  operator delete(v2);
  a1[2] = 0;
}

void sub_10FA7A4(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[2];
  if (!v2 || *a1)
  {
    a1[2] = 0;
    return;
  }
  uint64_t v3 = (void **)(v2 + 2);
  uint64_t v4 = *v2;
  if ((int)v4 >= 1)
  {
    while (1)
    {
      uint64_t v5 = *v3;
      if (*v3) {
        break;
      }
      ++v3;
      if (!--v4)
      {
        uint64_t v2 = (unsigned int *)a1[2];
        goto LABEL_19;
      }
    }
    uint64_t v6 = v5[1];
    if ((v6 & 1) != 0 && !*(void *)(v6 & 0xFFFFFFFFFFFFFFFCLL))
    {
      sub_10E4F74(v5 + 1);
      uint64_t v6 = v5[1];
    }
    *uint64_t v5 = off_24E6998;
    if ((v6 & 2) != 0)
    {
      uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6)
      {
        if (*v7)
        {
LABEL_13:
          sub_1881618();
          operator delete();
        }
      }
      else if (v7)
      {
        goto LABEL_13;
      }
    }
    operator delete();
  }
LABEL_19:
  operator delete(v2);
  a1[2] = 0;
}

void sub_10FA8C8(uint64_t *a1, uint64_t *a2, uint64_t *a3, int a4, int a5)
{
  LODWORD(v5) = a4;
  uint64_t v7 = a2;
  int v8 = a4 - a5;
  if (a4 > a5)
  {
    uint64_t v9 = *a1;
    uint64_t v10 = &a2[a5];
    do
    {
      sub_10F8D64(v9);
      *v10++ = v11;
      --v8;
    }
    while (v8);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v13 = *a3++;
      uint64_t v12 = v13;
      uint64_t v14 = *v7++;
      sub_10FA944(v12, v14);
      --v5;
    }
    while (v5);
  }
}

void sub_10FA944(uint64_t a1, uint64_t a2)
{
}

uint64_t *sub_10FA954(uint64_t *result, uint64_t *a2, std::string **a3, int a4, int a5)
{
  LODWORD(v5) = a4;
  uint64_t v7 = a2;
  int v8 = a4 - a5;
  if (a4 > a5)
  {
    uint64_t v9 = *result;
    uint64_t v10 = (uint64_t **)&a2[a5];
    do
    {
      double result = (uint64_t *)sub_10F8F8C(v9);
      *v10++ = result;
      --v8;
    }
    while (v8);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v12 = *a3++;
      uint64_t v11 = v12;
      uint64_t v13 = *v7++;
      double result = (uint64_t *)sub_10FA9D0(v11, v13);
      --v5;
    }
    while (v5);
  }
  return result;
}

std::string *sub_10FA9D0(std::string *result, uint64_t a2)
{
  std::string::size_type size = result->__r_.__value_.__l.__size_;
  if (size) {
    return sub_188B4F8((uint64_t *)(a2 + 8), (size & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t *sub_10FA9EC(uint64_t *result, uint64_t *a2, std::string **a3, int a4, int a5)
{
  LODWORD(v5) = a4;
  uint64_t v7 = a2;
  int v8 = a4 - a5;
  if (a4 > a5)
  {
    uint64_t v9 = *result;
    uint64_t v10 = (uint64_t **)&a2[a5];
    do
    {
      double result = (uint64_t *)sub_10F915C(v9);
      *v10++ = result;
      --v8;
    }
    while (v8);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v12 = *a3++;
      uint64_t v11 = v12;
      uint64_t v13 = *v7++;
      double result = (uint64_t *)sub_10FAA68(v11, v13);
      --v5;
    }
    while (v5);
  }
  return result;
}

std::string *sub_10FAA68(std::string *result, uint64_t a2)
{
  int v2 = result->__r_.__value_.__r.__words[2];
  if ((v2 & 7) == 0) {
    goto LABEL_7;
  }
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0) {
      goto LABEL_4;
    }
LABEL_10:
    *(void *)(a2 + 32) = result[1].__r_.__value_.__l.__size_;
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  *(void *)(a2 + 24) = result[1].__r_.__value_.__l.__data_;
  if ((v2 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_4:
  if ((v2 & 4) != 0) {
LABEL_5:
  }
    *(_DWORD *)(a2 + 40) = result[1].__r_.__value_.__r.__words[2];
LABEL_6:
  *(_DWORD *)(a2 + 16) |= v2;
LABEL_7:
  std::string::size_type size = result->__r_.__value_.__l.__size_;
  if (size) {
    return sub_188B4F8((uint64_t *)(a2 + 8), (size & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

std::string *sub_10FAACC(std::string *result, std::string **a2, uint64_t *a3, int a4, int a5)
{
  LODWORD(v5) = a4;
  uint64_t v7 = a2;
  int v8 = a4 - a5;
  if (a4 > a5)
  {
    uint64_t v9 = result->__r_.__value_.__r.__words[0];
    uint64_t v10 = &a2[a5];
    do
    {
      double result = (std::string *)sub_10F9004(v9);
      *v10++ = result;
      --v8;
    }
    while (v8);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v12 = *a3++;
      uint64_t v11 = v12;
      uint64_t v13 = *v7++;
      double result = sub_10FAB48(v11, v13);
      --v5;
    }
    while (v5);
  }
  return result;
}

std::string *sub_10FAB48(uint64_t a1, std::string *a2)
{
  return sub_10E88C4(a2, a1);
}

uint64_t *sub_10FAB58(uint64_t *result, uint64_t *a2, std::string **a3, int a4, int a5)
{
  LODWORD(v5) = a4;
  uint64_t v7 = a2;
  int v8 = a4 - a5;
  if (a4 > a5)
  {
    uint64_t v9 = *result;
    uint64_t v10 = (uint64_t **)&a2[a5];
    do
    {
      double result = (uint64_t *)sub_10F90BC(v9);
      *v10++ = result;
      --v8;
    }
    while (v8);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v12 = *a3++;
      uint64_t v11 = v12;
      uint64_t v13 = *v7++;
      double result = (uint64_t *)sub_10FABD4(v11, v13);
      --v5;
    }
    while (v5);
  }
  return result;
}

std::string *sub_10FABD4(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = result->__r_.__value_.__r.__words[2];
  if (v4)
  {
    uint64_t v5 = (_DWORD *)(a2 + 16);
    uint64_t v6 = *(int *)(a2 + 16);
    sub_188CA54((unsigned int *)(a2 + 16), v6 + v4);
    uint64_t v7 = *(void *)(a2 + 24);
    *v5 += LODWORD(v3->__r_.__value_.__r.__words[2]);
    double result = (std::string *)memcpy((void *)(v7 + 8 * v6), v3[1].__r_.__value_.__l.__data_, 8 * SLODWORD(v3->__r_.__value_.__r.__words[2]));
  }
  std::string::size_type size = v3->__r_.__value_.__l.__size_;
  if (size)
  {
    return sub_188B4F8((uint64_t *)(a2 + 8), (size & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t *sub_10FAC78(uint64_t *result, uint64_t *a2, std::string **a3, int a4, int a5)
{
  LODWORD(v5) = a4;
  uint64_t v7 = a2;
  int v8 = a4 - a5;
  if (a4 > a5)
  {
    uint64_t v9 = *result;
    uint64_t v10 = (uint64_t **)&a2[a5];
    do
    {
      double result = (uint64_t *)sub_10F91DC(v9);
      *v10++ = result;
      --v8;
    }
    while (v8);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v12 = *a3++;
      uint64_t v11 = v12;
      uint64_t v13 = *v7++;
      double result = (uint64_t *)sub_10FACF4(v11, v13);
      --v5;
    }
    while (v5);
  }
  return result;
}

std::string *sub_10FACF4(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = result[1].__r_.__value_.__r.__words[1];
  if (v4)
  {
    uint64_t v5 = (std::string **)(result[1].__r_.__value_.__r.__words[2] + 8);
    uint64_t v6 = (uint64_t *)sub_188CCE4(a2 + 24, v4);
    double result = (std::string *)sub_10FA9EC((uint64_t *)(a2 + 24), v6, v5, v4, **(_DWORD **)(a2 + 40) - *(_DWORD *)(a2 + 32));
    int v7 = *(_DWORD *)(a2 + 32) + v4;
    *(_DWORD *)(a2 + 32) = v7;
    int v8 = *(int **)(a2 + 40);
    if (*v8 < v7) {
      *int v8 = v7;
    }
  }
  if (v3->__r_.__value_.__s.__data_[16])
  {
    int data = (int)v3[2].__r_.__value_.__l.__data_;
    *(_DWORD *)(a2 + 16) |= 1u;
    *(_DWORD *)(a2 + 48) = data;
  }
  std::string::size_type size = v3->__r_.__value_.__l.__size_;
  if (size)
  {
    return sub_188B4F8((uint64_t *)(a2 + 8), (size & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

void sub_10FADE0(uint64_t *a1, uint64_t *a2, uint64_t *a3, int a4, int a5)
{
  LODWORD(v5) = a4;
  int v7 = a2;
  int v8 = a4 - a5;
  if (a4 > a5)
  {
    uint64_t v9 = *a1;
    uint64_t v10 = &a2[a5];
    do
    {
      sub_10F8E90(v9);
      *v10++ = v11;
      --v8;
    }
    while (v8);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v13 = *a3++;
      uint64_t v12 = v13;
      uint64_t v14 = *v7++;
      sub_10FAE5C(v12, v14);
      --v5;
    }
    while (v5);
  }
}

void sub_10FAE5C(uint64_t a1, uint64_t a2)
{
}

void sub_10FAE6C(uint64_t *a1, uint64_t *a2, uint64_t *a3, int a4, int a5)
{
  LODWORD(v5) = a4;
  int v7 = a2;
  int v8 = a4 - a5;
  if (a4 > a5)
  {
    uint64_t v9 = *a1;
    uint64_t v10 = &a2[a5];
    do
    {
      *v10++ = sub_10F9284(v9);
      --v8;
    }
    while (v8);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v12 = *a3++;
      uint64_t v11 = v12;
      uint64_t v13 = *v7++;
      sub_10FAEE8(v11, v13);
      --v5;
    }
    while (v5);
  }
}

void sub_10FAEE8(uint64_t a1, uint64_t a2)
{
}

uint64_t *sub_10FAEF8(uint64_t *result, uint64_t *a2, std::string **a3, int a4, int a5)
{
  LODWORD(v5) = a4;
  int v7 = a2;
  int v8 = a4 - a5;
  if (a4 > a5)
  {
    uint64_t v9 = *result;
    uint64_t v10 = (uint64_t **)&a2[a5];
    do
    {
      double result = (uint64_t *)sub_10F9348(v9);
      *v10++ = result;
      --v8;
    }
    while (v8);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v12 = *a3++;
      uint64_t v11 = v12;
      uint64_t v13 = *v7++;
      double result = (uint64_t *)sub_10FAF74(v11, v13);
      --v5;
    }
    while (v5);
  }
  return result;
}

std::string *sub_10FAF74(std::string *result, uint64_t a2)
{
  int v2 = result->__r_.__value_.__r.__words[2];
  if ((v2 & 3) != 0)
  {
    if (v2) {
      *(void *)(a2 + 24) = result[1].__r_.__value_.__l.__data_;
    }
    if ((v2 & 2) != 0) {
      *(_DWORD *)(a2 + 32) = result[1].__r_.__value_.__r.__words[1];
    }
    *(_DWORD *)(a2 + 16) |= v2;
  }
  std::string::size_type size = result->__r_.__value_.__l.__size_;
  if (size) {
    return sub_188B4F8((uint64_t *)(a2 + 8), (size & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t *sub_10FAFC0(uint64_t *result, std::string **a2, uint64_t *a3, int a4, int a5)
{
  LODWORD(v5) = a4;
  int v7 = a2;
  int v8 = a4 - a5;
  if (a4 > a5)
  {
    uint64_t v9 = *result;
    uint64_t v10 = (uint64_t **)&a2[a5];
    do
    {
      double result = (uint64_t *)sub_13D9CE0(v9);
      *v10++ = result;
      --v8;
    }
    while (v8);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v12 = *a3++;
      uint64_t v11 = v12;
      uint64_t v13 = *v7++;
      double result = (uint64_t *)sub_10FB03C(v11, v13);
      --v5;
    }
    while (v5);
  }
  return result;
}

std::string *sub_10FB03C(uint64_t a1, std::string *a2)
{
  return sub_13C2C4C(a2, a1);
}

void sub_10FB04C(uint64_t *a1, uint64_t *a2, uint64_t *a3, int a4, int a5)
{
  LODWORD(v5) = a4;
  int v7 = a2;
  int v8 = a4 - a5;
  if (a4 > a5)
  {
    uint64_t v9 = *a1;
    uint64_t v10 = &a2[a5];
    do
    {
      sub_10F9594(v9);
      *v10++ = v11;
      --v8;
    }
    while (v8);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v13 = *a3++;
      uint64_t v12 = v13;
      uint64_t v14 = *v7++;
      sub_10FB0C8(v12, v14);
      --v5;
    }
    while (v5);
  }
}

void sub_10FB0C8(uint64_t a1, uint64_t a2)
{
}

uint64_t *sub_10FB0D8(uint64_t *result, uint64_t *a2, std::string **a3, int a4, int a5)
{
  LODWORD(v5) = a4;
  int v7 = a2;
  int v8 = a4 - a5;
  if (a4 > a5)
  {
    uint64_t v9 = *result;
    uint64_t v10 = (uint64_t **)&a2[a5];
    do
    {
      double result = (uint64_t *)sub_10F96BC(v9);
      *v10++ = result;
      --v8;
    }
    while (v8);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v12 = *a3++;
      uint64_t v11 = v12;
      uint64_t v13 = *v7++;
      double result = (uint64_t *)sub_10FB154(v11, v13);
      --v5;
    }
    while (v5);
  }
  return result;
}

std::string *sub_10FB154(std::string *result, uint64_t a2)
{
  int v2 = result->__r_.__value_.__r.__words[2];
  if ((v2 & 7) == 0) {
    goto LABEL_7;
  }
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0) {
      goto LABEL_4;
    }
LABEL_10:
    *(_DWORD *)(a2 + 28) = HIDWORD(result[1].__r_.__value_.__r.__words[0]);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  *(_DWORD *)(a2 + 24) = result[1].__r_.__value_.__l.__data_;
  if ((v2 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_4:
  if ((v2 & 4) != 0) {
LABEL_5:
  }
    *(_DWORD *)(a2 + 32) = result[1].__r_.__value_.__r.__words[1];
LABEL_6:
  *(_DWORD *)(a2 + 16) |= v2;
LABEL_7:
  std::string::size_type size = result->__r_.__value_.__l.__size_;
  if (size) {
    return sub_188B4F8((uint64_t *)(a2 + 8), (size & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

std::string *sub_10FB1B8(std::string *result, std::string **a2, uint64_t *a3, int a4, int a5)
{
  LODWORD(v5) = a4;
  int v7 = a2;
  int v8 = a4 - a5;
  if (a4 > a5)
  {
    uint64_t v9 = result->__r_.__value_.__r.__words[0];
    uint64_t v10 = &a2[a5];
    do
    {
      double result = (std::string *)sub_10F97B4(v9);
      *v10++ = result;
      --v8;
    }
    while (v8);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v12 = *a3++;
      uint64_t v11 = v12;
      uint64_t v13 = *v7++;
      double result = sub_10FB234(v11, v13);
      --v5;
    }
    while (v5);
  }
  return result;
}

std::string *sub_10FB234(uint64_t a1, std::string *a2)
{
  return sub_10F2CAC(a2, a1);
}

void sub_10FB244(uint64_t *a1, uint64_t *a2, uint64_t *a3, int a4, int a5)
{
  LODWORD(v5) = a4;
  int v7 = a2;
  int v8 = a4 - a5;
  if (a4 > a5)
  {
    uint64_t v9 = *a1;
    uint64_t v10 = &a2[a5];
    do
    {
      sub_10F985C(v9);
      *v10++ = v11;
      --v8;
    }
    while (v8);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v13 = *a3++;
      uint64_t v12 = v13;
      uint64_t v14 = *v7++;
      sub_10FB2C0(v12, v14);
      --v5;
    }
    while (v5);
  }
}

void sub_10FB2C0(uint64_t a1, uint64_t a2)
{
}

void sub_10FB2D0(uint64_t *a1, uint64_t *a2, uint64_t *a3, int a4, int a5)
{
  LODWORD(v5) = a4;
  int v7 = a2;
  int v8 = a4 - a5;
  if (a4 > a5)
  {
    uint64_t v9 = *a1;
    uint64_t v10 = &a2[a5];
    do
    {
      sub_10F94B8(v9);
      *v10++ = v11;
      --v8;
    }
    while (v8);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v13 = *a3++;
      uint64_t v12 = v13;
      uint64_t v14 = *v7++;
      sub_10FB34C(v12, v14);
      --v5;
    }
    while (v5);
  }
}

void sub_10FB34C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10FB35C(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3 = a2 | 2;
  if (!a3) {
    uint64_t v3 = a2;
  }
  *(void *)double result = off_2440F08;
  *(void *)(result + 8) = v3;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a2;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void *sub_10FB390(void *a1)
{
  uint64_t v4 = a1[1];
  int v2 = a1 + 1;
  uint64_t v3 = v4;
  if ((v4 & 1) != 0 && !*(void *)(v3 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(v2);
  }
  sub_1889DA8((uint64_t)(a1 + 2));
  *a1 = off_24E6998;
  uint64_t v5 = a1[1];
  if ((v5 & 2) != 0)
  {
    uint64_t v6 = (void *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
    if (v5)
    {
      if (*v6)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v6)
    {
      goto LABEL_5;
    }
  }
  return a1;
}

void sub_10FB434(void *a1)
{
  sub_10FB390(a1);

  operator delete();
}

uint64_t sub_10FB46C(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

unsigned __int8 *sub_10FB480(uint64_t a1, unsigned __int8 *a2, int32x2_t *a3)
{
  uint64_t v6 = (unsigned int *)(a1 + 16);
  int v7 = (uint64_t *)(a1 + 8);
  while (1)
  {
LABEL_2:
    if ((unint64_t)a2 < *(void *)a3) {
      goto LABEL_3;
    }
    int v18 = a2 - a3[1].i32[0];
    if (a3[3].i32[1] == v18) {
      break;
    }
    a2 = (unsigned __int8 *)sub_188BB90((uint64_t)a3, v18, a3[11].i32[1]);
    if (v19) {
      return a2;
    }
LABEL_3:
    int v8 = a2 + 1;
    unsigned int v9 = *a2;
    if ((char)*a2 < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if ((char)*v8 < 0)
      {
        int v8 = (unsigned __int8 *)sub_188C180((uint64_t)a2, v10 - 128);
        unsigned int v9 = v15;
        if ((v15 & 0xFFFFFFF8) != 8) {
          goto LABEL_22;
        }
        goto LABEL_7;
      }
      int v8 = a2 + 2;
    }
    if ((v9 & 0xFFFFFFF8) != 8) {
      goto LABEL_22;
    }
LABEL_7:
    if (v9 == 8)
    {
      a2 = v8 - 1;
      while (1)
      {
        uint64_t v11 = a2[1];
        if ((char)a2[1] < 0)
        {
          int v13 = v11 + (a2[2] << 7);
          uint64_t v11 = (v13 - 128);
          if ((char)a2[2] < 0)
          {
            a2 = (unsigned __int8 *)sub_188C138((uint64_t)(a2 + 1), (v13 - 128));
            uint64_t v11 = v14;
            uint64_t v12 = *(unsigned int *)(a1 + 16);
            if (v12 != *(_DWORD *)(a1 + 20))
            {
LABEL_17:
              *(void *)(*(void *)(a1 + 24) + 8 * v12) = v11;
              *uint64_t v6 = v12 + 1;
              if (!a2) {
                return a2;
              }
              goto LABEL_18;
            }
          }
          else
          {
            a2 += 3;
            uint64_t v12 = *(unsigned int *)(a1 + 16);
            if (v12 != *(_DWORD *)(a1 + 20)) {
              goto LABEL_17;
            }
          }
        }
        else
        {
          a2 += 2;
          uint64_t v12 = *(unsigned int *)(a1 + 16);
          if (v12 != *(_DWORD *)(a1 + 20)) {
            goto LABEL_17;
          }
        }
        sub_188CA54(v6, v12 + 1);
        *(void *)(*(void *)(a1 + 24) + 8 * v12) = v11;
        *uint64_t v6 = v12 + 1;
        if (!a2) {
          return a2;
        }
LABEL_18:
        if (*(void *)a3 <= (unint64_t)a2 || *a2 != 8) {
          goto LABEL_2;
        }
      }
    }
    if (v9 == 10)
    {
      a2 = sub_188C2EC(v6, v8, (uint64_t)a3);
      if (!a2) {
        return a2;
      }
    }
    else
    {
LABEL_22:
      if (v9) {
        BOOL v16 = (v9 & 7) == 4;
      }
      else {
        BOOL v16 = 1;
      }
      if (v16)
      {
        if (!v8) {
          return 0;
        }
        a3[10].i32[0] = v9 - 1;
        return v8;
      }
      if (*v7) {
        int v17 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
      else {
        int v17 = (std::string *)sub_188DBD8(v7);
      }
      a2 = sub_1885AC0(v9, v17, (char *)v8, a3);
      if (!a2) {
        return a2;
      }
    }
  }
  if (v18 >= 1 && !*(void *)&a3[2]) {
    return 0;
  }
  return a2;
}

char *sub_10FB6C0(uint64_t a1, char *__dst, _DWORD *a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if ((int)v6 >= 1)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      if (*(void *)a3 <= (unint64_t)__dst)
      {
        long long __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
        unint64_t v8 = *(void *)(*(void *)(a1 + 24) + 8 * i);
        *long long __dst = 8;
        __dst[1] = v8;
        if (v8 > 0x7F)
        {
LABEL_7:
          __dst[1] = v8 | 0x80;
          unint64_t v9 = v8 >> 7;
          __dst[2] = v8 >> 7;
          __dst += 3;
          if (v8 >= 0x4000)
          {
            do
            {
              *(__dst - 1) |= 0x80u;
              unint64_t v10 = v9 >> 14;
              v9 >>= 7;
              *__dst++ = v9;
            }
            while (v10);
          }
          continue;
        }
      }
      else
      {
        unint64_t v8 = *(void *)(*(void *)(a1 + 24) + 8 * i);
        *long long __dst = 8;
        __dst[1] = v8;
        if (v8 > 0x7F) {
          goto LABEL_7;
        }
      }
      __dst += 2;
    }
  }
  uint64_t v11 = *(void *)(a1 + 8);
  if ((v11 & 1) == 0) {
    return __dst;
  }
  unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v13 + 31) < 0)
  {
    uint64_t v14 = *(char **)(v13 + 8);
    uint64_t v15 = *(void *)(v13 + 16);
  }
  else
  {
    uint64_t v14 = (char *)(v13 + 8);
    LODWORD(v15) = *(unsigned __int8 *)(v13 + 31);
  }
  uint64_t v16 = (int)v15;
  if (*(void *)a3 - (void)__dst < (int)v15)
  {
    return (char *)sub_188A528(a3, v14, v15, __dst);
  }
  else
  {
    memcpy(__dst, v14, (int)v15);
    return &__dst[v16];
  }
}

uint64_t sub_10FB83C(uint64_t a1)
{
  uint64_t result = sub_188D5A8((unsigned int *)(a1 + 16)) + *(unsigned int *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v4 + 31) < 0) {
      result += *(void *)(v4 + 16);
    }
    else {
      result += *(unsigned __int8 *)(v4 + 31);
    }
    *(_DWORD *)(a1 + 32) = result;
  }
  else
  {
    *(_DWORD *)(a1 + 32) = result;
  }
  return result;
}

std::string *sub_10FB8B4(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = &result->__r_.__value_.__r.__words[2];
    uint64_t v6 = SLODWORD(result->__r_.__value_.__r.__words[2]);
    sub_188CA54((unsigned int *)&result->__r_.__value_.__r.__words[2], v6 + v4);
    std::string::pointer data = v3[1].__r_.__value_.__l.__data_;
    *(_DWORD *)v5 += *(_DWORD *)(a2 + 16);
    uint64_t result = (std::string *)memcpy(&data[8 * v6], *(const void **)(a2 + 24), 8 * *(int *)(a2 + 16));
  }
  uint64_t v8 = *(void *)(a2 + 8);
  if (v8)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v8 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_10FB958()
{
  return 1;
}

double sub_10FB960@<D0>(uint64_t a1@<X8>)
{
  char v2 = (char *)operator new(0x40uLL);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_20B98C0;
  strcpy(v2, "geo3.internal.transit.AdditionalScheduleLookupParameters");
  return *(double *)"ScheduleLookupParameters";
}

uint64_t sub_10FB9BC(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t result = off_2440F08;
  *(void *)(result + 8) = a1;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a1;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_10FBA5C()
{
}

uint64_t sub_10FBAAC(uint64_t a1, uint64_t a2)
{
  return sub_10FB9BC(a2);
}

uint64_t sub_10FBAB4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

void *sub_10FBABC(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }
  return a1;
}

void sub_10FBB5C(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }

  operator delete();
}

uint64_t sub_10FBC1C(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 7) != 0)
  {
    *(_DWORD *)(a1 + 32) = 0;
    *(void *)(a1 + 24) = 0;
  }
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_10FBC44(_DWORD *a1, char *a2, int32x2_t *a3)
{
  int v6 = 0;
  int v7 = (uint64_t *)(a1 + 2);
  while (1)
  {
    if ((unint64_t)a2 < *(void *)a3) {
      goto LABEL_5;
    }
    int v23 = a2 - a3[1].i32[0];
    if (a3[3].i32[1] == v23) {
      break;
    }
    a2 = sub_188BB90((uint64_t)a3, v23, a3[11].i32[1]);
    if (v24) {
      goto LABEL_51;
    }
LABEL_5:
    unint64_t v9 = a2 + 1;
    unsigned int v10 = *a2;
    if (*a2 < 0)
    {
      unsigned int v13 = v10 + (*v9 << 7);
      unsigned int v10 = v13 - 128;
      if (*v9 < 0)
      {
        unint64_t v9 = (char *)sub_188C180((uint64_t)a2, v13 - 128);
        unsigned int v10 = v18;
        unsigned int v11 = v18 >> 3;
        if (v18 >> 3 != 3) {
          goto LABEL_7;
        }
      }
      else
      {
        unint64_t v9 = a2 + 2;
        unsigned int v11 = v10 >> 3;
        if (v10 >> 3 != 3) {
          goto LABEL_7;
        }
      }
      goto LABEL_19;
    }
    unsigned int v11 = v10 >> 3;
    if (v10 >> 3 == 3)
    {
LABEL_19:
      if (v10 != 24) {
        goto LABEL_12;
      }
      v6 |= 4u;
      a2 = v9 + 1;
      int v14 = *v9;
      if (*v9 < 0)
      {
        int v15 = *a2;
        int v14 = v14 + (v15 << 7) - 128;
        if ((v15 & 0x80000000) == 0)
        {
          a2 = v9 + 2;
          goto LABEL_23;
        }
        a2 = (char *)sub_188C0D0((uint64_t)v9, v14);
        a1[8] = v20;
        if (!a2) {
          goto LABEL_43;
        }
      }
      else
      {
LABEL_23:
        a1[8] = v14;
      }
    }
    else
    {
LABEL_7:
      if (v11 == 2)
      {
        if (v10 != 16) {
          goto LABEL_12;
        }
        v6 |= 2u;
        a2 = v9 + 1;
        int v16 = *v9;
        if (*v9 < 0)
        {
          int v17 = *a2;
          int v16 = v16 + (v17 << 7) - 128;
          if ((v17 & 0x80000000) == 0)
          {
            a2 = v9 + 2;
            goto LABEL_28;
          }
          a2 = (char *)sub_188C0D0((uint64_t)v9, v16);
          a1[7] = v21;
          if (!a2) {
            goto LABEL_43;
          }
        }
        else
        {
LABEL_28:
          a1[7] = v16;
        }
      }
      else if (v11 == 1 && v10 == 8)
      {
        v6 |= 1u;
        a2 = v9 + 1;
        int v8 = *v9;
        if ((*v9 & 0x80000000) == 0) {
          goto LABEL_3;
        }
        int v19 = *a2;
        int v8 = v8 + (v19 << 7) - 128;
        if (v19 < 0)
        {
          a2 = (char *)sub_188C0D0((uint64_t)v9, v8);
          a1[6] = v22;
          if (!a2) {
            goto LABEL_43;
          }
        }
        else
        {
          a2 = v9 + 2;
LABEL_3:
          a1[6] = v8;
        }
      }
      else
      {
LABEL_12:
        if (!v10 || (v10 & 7) == 4)
        {
          if (v9) {
            a3[10].i32[0] = v10 - 1;
          }
          goto LABEL_46;
        }
        if (*v7)
        {
          a2 = (char *)sub_1885AC0(v10, (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8), v9, a3);
          if (!a2) {
            goto LABEL_43;
          }
        }
        else
        {
          int v25 = (std::string *)sub_188DBD8(v7);
          a2 = (char *)sub_1885AC0(v10, v25, v9, a3);
          if (!a2)
          {
LABEL_43:
            unint64_t v9 = 0;
            goto LABEL_46;
          }
        }
      }
    }
  }
  if (v23 < 1)
  {
LABEL_51:
    unint64_t v9 = a2;
    goto LABEL_46;
  }
  if (a3[2]) {
    unint64_t v9 = a2;
  }
  else {
    unint64_t v9 = 0;
  }
LABEL_46:
  a1[4] |= v6;
  return v9;
}

unsigned char *sub_10FBEDC(uint64_t a1, unsigned char *__dst, _DWORD *a3)
{
  int v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*(void *)a3 <= (unint64_t)__dst)
    {
      int v4 = sub_188A3FC((uint64_t)a3, (int)__dst);
      unsigned int v7 = *(_DWORD *)(a1 + 24);
      *int v4 = 8;
      v4[1] = v7;
      if (v7 <= 0x7F) {
        goto LABEL_4;
      }
    }
    else
    {
      unsigned int v7 = *(_DWORD *)(a1 + 24);
      *long long __dst = 8;
      __dst[1] = v7;
      if (v7 <= 0x7F)
      {
LABEL_4:
        v4 += 2;
        goto LABEL_8;
      }
    }
    v4[1] = v7 | 0x80;
    unsigned int v8 = v7 >> 7;
    v4[2] = v7 >> 7;
    v4 += 3;
    if (v7 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unsigned int v9 = v8 >> 14;
        v8 >>= 7;
        *v4++ = v8;
      }
      while (v9);
    }
  }
LABEL_8:
  if ((v6 & 2) == 0) {
    goto LABEL_15;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    int v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unsigned int v10 = *(_DWORD *)(a1 + 28);
    *int v4 = 16;
    v4[1] = v10;
    if (v10 <= 0x7F) {
      goto LABEL_11;
    }
  }
  else
  {
    unsigned int v10 = *(_DWORD *)(a1 + 28);
    *int v4 = 16;
    v4[1] = v10;
    if (v10 <= 0x7F)
    {
LABEL_11:
      v4 += 2;
      goto LABEL_15;
    }
  }
  v4[1] = v10 | 0x80;
  unsigned int v11 = v10 >> 7;
  v4[2] = v10 >> 7;
  v4 += 3;
  if (v10 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unsigned int v12 = v11 >> 14;
      v11 >>= 7;
      *v4++ = v11;
    }
    while (v12);
  }
LABEL_15:
  if ((v6 & 4) == 0) {
    goto LABEL_22;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    int v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unsigned int v13 = *(_DWORD *)(a1 + 32);
    *int v4 = 24;
    v4[1] = v13;
    if (v13 <= 0x7F) {
      goto LABEL_18;
    }
  }
  else
  {
    unsigned int v13 = *(_DWORD *)(a1 + 32);
    *int v4 = 24;
    v4[1] = v13;
    if (v13 <= 0x7F)
    {
LABEL_18:
      v4 += 2;
      goto LABEL_22;
    }
  }
  v4[1] = v13 | 0x80;
  unsigned int v14 = v13 >> 7;
  v4[2] = v13 >> 7;
  v4 += 3;
  if (v13 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unsigned int v15 = v14 >> 14;
      v14 >>= 7;
      *v4++ = v14;
    }
    while (v15);
  }
LABEL_22:
  uint64_t v16 = *(void *)(a1 + 8);
  if ((v16 & 1) == 0) {
    return v4;
  }
  unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v18 + 31) < 0)
  {
    int v19 = *(char **)(v18 + 8);
    uint64_t v20 = *(void *)(v18 + 16);
  }
  else
  {
    int v19 = (char *)(v18 + 8);
    LODWORD(v20) = *(unsigned __int8 *)(v18 + 31);
  }
  uint64_t v21 = (int)v20;
  if (*(void *)a3 - (void)v4 < (int)v20)
  {
    return (unsigned char *)sub_188A528(a3, v19, v20, v4);
  }
  else
  {
    memcpy(v4, v19, (int)v20);
    return &v4[v21];
  }
}

uint64_t sub_10FC148(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 7) != 0)
  {
    if (v1)
    {
      uint64_t v2 = ((9 * (__clz(*(_DWORD *)(a1 + 24) | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v1 & 2) == 0) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v2 = 0;
      if ((v1 & 2) == 0)
      {
LABEL_9:
        if ((v1 & 4) != 0)
        {
          v2 += ((9 * (__clz(*(_DWORD *)(a1 + 32) | 1) ^ 0x1F) + 73) >> 6) + 1;
          uint64_t v3 = *(void *)(a1 + 8);
          if ((v3 & 1) == 0) {
            goto LABEL_11;
          }
        }
        else
        {
          uint64_t v3 = *(void *)(a1 + 8);
          if ((v3 & 1) == 0) {
            goto LABEL_11;
          }
        }
        goto LABEL_13;
      }
    }
    v2 += ((9 * (__clz(*(_DWORD *)(a1 + 28) | 1) ^ 0x1F) + 73) >> 6) + 1;
    goto LABEL_9;
  }
  uint64_t v2 = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 1) == 0)
  {
LABEL_11:
    *(_DWORD *)(a1 + 20) = v2;
    return v2;
  }
LABEL_13:
  unint64_t v5 = v3 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v5 + 31) < 0) {
    uint64_t v6 = *(void *)(v5 + 16) + v2;
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 31) + v2;
  }
  *(_DWORD *)(a1 + 20) = v6;
  return v6;
}

std::string *sub_10FC234(std::string *result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 16);
  if ((v2 & 7) == 0) {
    goto LABEL_7;
  }
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0) {
      goto LABEL_4;
    }
LABEL_10:
    HIDWORD(result[1].__r_.__value_.__r.__words[0]) = *(_DWORD *)(a2 + 28);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  LODWORD(result[1].__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 24);
  if ((v2 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_4:
  if ((v2 & 4) != 0) {
LABEL_5:
  }
    LODWORD(result[1].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 32);
LABEL_6:
  LODWORD(result->__r_.__value_.__r.__words[2]) |= v2;
LABEL_7:
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3) {
    return sub_188B4F8((uint64_t *)&result->__r_.__value_.__l.__size_, (v3 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_10FC298()
{
  return 1;
}

double sub_10FC2A0@<D0>(uint64_t a1@<X8>)
{
  int v2 = (char *)operator new(0x20uLL);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_20B5EB0;
  strcpy(v2, "geo3.internal.transit.Date");
  return *(double *)"nal.transit.Date";
}

void *sub_10FC2F4(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }
  return a1;
}

void sub_10FC394(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }

  operator delete();
}

uint64_t sub_10FC454(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_10FC46C(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v6 = (uint64_t *)(a1 + 8);
  while (1)
  {
    while (1)
    {
      if ((unint64_t)a2 >= *(void *)a3)
      {
        int v13 = a2 - a3[1].i32[0];
        if (a3[3].i32[1] == v13)
        {
          if (v13 >= 1 && !*(void *)&a3[2]) {
            return 0;
          }
          return a2;
        }
        a2 = sub_188BB90((uint64_t)a3, v13, a3[11].i32[1]);
        if (v14) {
          return a2;
        }
      }
      unsigned int v7 = a2 + 1;
      unsigned int v8 = *a2;
      if (*a2 < 0) {
        break;
      }
LABEL_6:
      if (v8 != 8) {
        goto LABEL_7;
      }
LABEL_15:
      a2 = v7 + 1;
      unint64_t v12 = *v7;
      if (*v7 < 0)
      {
        unint64_t v12 = v12 + (*a2 << 7) - 128;
        if (*a2 < 0)
        {
          a2 = (char *)sub_188C138((uint64_t)v7, v12);
          if (!a2) {
            return a2;
          }
        }
        else
        {
          a2 = v7 + 2;
        }
      }
      if (v12 > 5)
      {
        if (*v6)
        {
          unsigned int v15 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
        }
        else
        {
          unint64_t v17 = v12;
          uint64_t v18 = sub_188DBD8(v6);
          unint64_t v12 = v17;
          unsigned int v15 = (std::string *)v18;
        }
        sub_188C020(1, v12, v15);
      }
      else
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 24) = v12;
      }
    }
    unsigned int v9 = v8 + (*v7 << 7);
    unsigned int v8 = v9 - 128;
    if ((*v7 & 0x80000000) == 0)
    {
      unsigned int v7 = a2 + 2;
      goto LABEL_6;
    }
    unsigned int v7 = (char *)sub_188C180((uint64_t)a2, v9 - 128);
    unsigned int v8 = v11;
    if (v11 == 8) {
      goto LABEL_15;
    }
LABEL_7:
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    if (*v6)
    {
      a2 = (char *)sub_1885AC0(v8, (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8), v7, a3);
      if (!a2) {
        return a2;
      }
    }
    else
    {
      uint64_t v16 = (std::string *)sub_188DBD8(v6);
      a2 = (char *)sub_1885AC0(v8, v16, v7, a3);
      if (!a2) {
        return a2;
      }
    }
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return v7;
  }
  return 0;
}

_OWORD *sub_10FC678(uint64_t a1, unsigned char *__dst, _DWORD *a3)
{
  int v4 = __dst;
  if (*(unsigned char *)(a1 + 16))
  {
    if (*(void *)a3 <= (unint64_t)__dst)
    {
      int v4 = sub_188A3FC((uint64_t)a3, (int)__dst);
      unint64_t v6 = *(int *)(a1 + 24);
      *(unsigned char *)int v4 = 8;
      *((unsigned char *)v4 + 1) = v6;
      if (v6 <= 0x7F) {
        goto LABEL_4;
      }
    }
    else
    {
      unint64_t v6 = *(int *)(a1 + 24);
      *long long __dst = 8;
      __dst[1] = v6;
      if (v6 <= 0x7F)
      {
LABEL_4:
        int v4 = (_OWORD *)((char *)v4 + 2);
        goto LABEL_8;
      }
    }
    *((unsigned char *)v4 + 1) = v6 | 0x80;
    unint64_t v7 = v6 >> 7;
    *((unsigned char *)v4 + 2) = v6 >> 7;
    int v4 = (_OWORD *)((char *)v4 + 3);
    if (v6 >= 0x4000)
    {
      do
      {
        *((unsigned char *)v4 - 1) |= 0x80u;
        unint64_t v8 = v7 >> 14;
        v7 >>= 7;
        *(unsigned char *)int v4 = v7;
        int v4 = (_OWORD *)((char *)v4 + 1);
      }
      while (v8);
    }
  }
LABEL_8:
  uint64_t v9 = *(void *)(a1 + 8);
  if ((v9 & 1) == 0) {
    return v4;
  }
  unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v11 + 31) < 0)
  {
    unint64_t v12 = *(char **)(v11 + 8);
    uint64_t v13 = *(void *)(v11 + 16);
  }
  else
  {
    unint64_t v12 = (char *)(v11 + 8);
    LODWORD(v13) = *(unsigned __int8 *)(v11 + 31);
  }
  uint64_t v14 = (int)v13;
  if (*(void *)a3 - (void)v4 < (int)v13)
  {
    return (_OWORD *)sub_188A528(a3, v12, v13, v4);
  }
  else
  {
    memcpy(v4, v12, (int)v13);
    return (_OWORD *)((char *)v4 + v14);
  }
}

uint64_t sub_10FC7C4(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 1) == 0)
  {
    uint64_t v1 = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2) {
      goto LABEL_8;
    }
LABEL_6:
    *(_DWORD *)(a1 + 20) = v1;
    return v1;
  }
  int v3 = *(_DWORD *)(a1 + 24);
  if (v3 < 0)
  {
    uint64_t v1 = 11;
    uint64_t v2 = *(void *)(a1 + 8);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v1 = ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    uint64_t v2 = *(void *)(a1 + 8);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
  }
LABEL_8:
  unint64_t v5 = v2 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v5 + 31) < 0) {
    uint64_t v6 = *(void *)(v5 + 16) + v1;
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 31) + v1;
  }
  *(_DWORD *)(a1 + 20) = v6;
  return v6;
}

std::string *sub_10FC854(std::string *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16))
  {
    int v2 = *(_DWORD *)(a2 + 24);
    LODWORD(result->__r_.__value_.__r.__words[2]) |= 1u;
    LODWORD(result[1].__r_.__value_.__l.__data_) = v2;
  }
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3) {
    return sub_188B4F8((uint64_t *)&result->__r_.__value_.__l.__size_, (v3 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_10FC88C()
{
  return 1;
}

double sub_10FC894@<D0>(uint64_t a1@<X8>)
{
  int v2 = (char *)operator new(0x48uLL);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_20B9A00;
  strcpy(v2, "geo3.internal.transit.PublicTransportJourneyLegDisplayProperties");
  return *(double *)"sportJourneyLegDisplayProperties";
}

uint64_t sub_10FC8E8(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_5;
    }
  }
  else if (v4)
  {
    goto LABEL_5;
  }
  sub_10FC99C((uint64_t (***)())a1);
  uint64_t v2 = *v3;
  if (*v3)
  {
    sub_10E4F74(v3);
    uint64_t v2 = *v3;
  }
LABEL_5:
  *(void *)a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    unint64_t v5 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v5)
      {
LABEL_8:
        sub_1881618();
        operator delete();
      }
    }
    else if (v5)
    {
      goto LABEL_8;
    }
  }
  return a1;
}

uint64_t (***sub_10FC99C(uint64_t (***result)()))()
{
  if (result != &off_24F7D10)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[3];
    if (v2)
    {
      uint64_t v3 = v2[1];
      if ((v3 & 1) != 0 && !*(void *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFFCLL))
      {
        sub_10E4F74(v2 + 1);
        uint64_t v3 = v2[1];
      }
      *uint64_t v2 = (uint64_t (*)())off_24E6998;
      if ((v3 & 2) != 0)
      {
        int v4 = (void *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFFCLL);
        if (v3)
        {
          if (*v4)
          {
LABEL_7:
            sub_1881618();
            operator delete();
          }
        }
        else if (v4)
        {
          goto LABEL_7;
        }
      }
      operator delete();
    }
    unint64_t v5 = result[4];
    if (v5)
    {
      uint64_t v6 = v5[1];
      if ((v6 & 1) != 0 && !*(void *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFFCLL))
      {
        sub_10E4F74(v5 + 1);
        uint64_t v6 = v5[1];
      }
      *unint64_t v5 = (uint64_t (*)())off_24E6998;
      if ((v6 & 2) != 0)
      {
        unint64_t v7 = (void *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFFCLL);
        if (v6)
        {
          if (*v7)
          {
LABEL_14:
            sub_1881618();
            operator delete();
          }
        }
        else if (v7)
        {
          goto LABEL_14;
        }
      }
      operator delete();
    }
    unint64_t v8 = result[5];
    if (v8)
    {
      sub_11043C4(v8);
      operator delete();
    }
    uint64_t result = (uint64_t (***)())v1[6];
    if (result)
    {
      sub_11043C4(result);
      operator delete();
    }
  }
  return result;
}

void sub_10FCB7C(uint64_t a1)
{
  sub_10FC8E8(a1);

  operator delete();
}

uint64_t sub_10FCBB4(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 0xF) != 0)
  {
    if (v2)
    {
      uint64_t v3 = *(void *)(result + 24);
      if ((*(unsigned char *)(v3 + 16) & 7) != 0)
      {
        *(_DWORD *)(v3 + 32) = 0;
        *(void *)(v3 + 24) = 0;
      }
      char v4 = *(unsigned char *)(v3 + 8);
      uint64_t result = v3 + 8;
      *(_DWORD *)(result + 8) = 0;
      if (v4) {
        uint64_t result = sub_188B4AC((uint64_t *)result);
      }
    }
    if ((v2 & 2) != 0)
    {
      uint64_t v5 = *(void *)(v1 + 32);
      char v6 = *(unsigned char *)(v5 + 8);
      uint64_t result = v5 + 8;
      *(_DWORD *)(result + 16) = 0;
      *(_DWORD *)(result + 8) = 0;
      if (v6) {
        uint64_t result = sub_188B4AC((uint64_t *)result);
      }
    }
    if ((v2 & 4) != 0) {
      uint64_t result = sub_1104524(*(void *)(v1 + 40));
    }
    if ((v2 & 8) != 0) {
      uint64_t result = sub_1104524(*(void *)(v1 + 48));
    }
  }
  if ((v2 & 0xF0) != 0)
  {
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = 0;
    *(_DWORD *)(v1 + 72) = 0;
  }
  if ((v2 & 0x700) != 0)
  {
    *(void *)(v1 + 84) = 0;
    *(void *)(v1 + 76) = 0;
    *(_DWORD *)(v1 + 92) = 0;
  }
  char v8 = *(unsigned char *)(v1 + 8);
  uint64_t v7 = v1 + 8;
  *(_DWORD *)(v7 + 8) = 0;
  if (v8)
  {
    return sub_188B4AC((uint64_t *)v7);
  }
  return result;
}

char *sub_10FCC90(uint64_t a1, char *a2, int32x2_t *a3)
{
  int v6 = 0;
  uint64_t v7 = (uint64_t *)(a1 + 8);
  while ((unint64_t)a2 < *(void *)a3)
  {
LABEL_5:
    uint64_t v9 = a2 + 1;
    unsigned int v10 = *a2;
    if (*a2 < 0)
    {
      unsigned int v14 = v10 + (*v9 << 7);
      unsigned int v10 = v14 - 128;
      if (*v9 < 0)
      {
        uint64_t v9 = (char *)sub_188C180((uint64_t)a2, v14 - 128);
        unsigned int v10 = v15;
        unsigned int v11 = (v15 >> 3) - 2;
        if (v11 <= 0xA) {
          goto LABEL_7;
        }
      }
      else
      {
        uint64_t v9 = a2 + 2;
        unsigned int v11 = (v10 >> 3) - 2;
        if (v11 <= 0xA) {
          goto LABEL_7;
        }
      }
LABEL_17:
      if (v10) {
        BOOL v16 = (v10 & 7) == 4;
      }
      else {
        BOOL v16 = 1;
      }
      if (v16)
      {
        if (v9) {
          a3[10].i32[0] = v10 - 1;
        }
        goto LABEL_108;
      }
      if (*v7)
      {
        a2 = (char *)sub_1885AC0(v10, (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8), v9, a3);
        if (!a2) {
          goto LABEL_109;
        }
      }
      else
      {
        uint64_t v48 = (std::string *)sub_188DBD8(v7);
        a2 = (char *)sub_1885AC0(v10, v48, v9, a3);
        if (!a2)
        {
LABEL_109:
          uint64_t v9 = 0;
          goto LABEL_108;
        }
      }
    }
    else
    {
      unsigned int v11 = (v10 >> 3) - 2;
LABEL_7:
      switch(v11)
      {
        case 0u:
          if (v10 != 16) {
            goto LABEL_17;
          }
          v6 |= 0x10u;
          a2 = v9 + 1;
          uint64_t v12 = *v9;
          if ((*v9 & 0x80000000) == 0) {
            goto LABEL_12;
          }
          int v13 = *a2;
          uint64_t v12 = v12 + (v13 << 7) - 128;
          if (v13 < 0)
          {
            a2 = (char *)sub_188C138((uint64_t)v9, v12);
            *(void *)(a1 + 56) = v39;
            if (!a2) {
              goto LABEL_109;
            }
          }
          else
          {
            a2 = v9 + 2;
LABEL_12:
            *(void *)(a1 + 56) = v12;
          }
          continue;
        case 1u:
          if (v10 != 26) {
            goto LABEL_17;
          }
          *(_DWORD *)(a1 + 16) |= 1u;
          unint64_t v17 = *(_DWORD **)(a1 + 24);
          if (v17)
          {
            int v50 = 0;
            uint64_t v18 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)v9, &v50);
            if (!v18) {
              goto LABEL_2;
            }
          }
          else
          {
            uint64_t v36 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
            if (*v7) {
              uint64_t v36 = (void *)*v36;
            }
            unint64_t v17 = (_DWORD *)sub_1103504((uint64_t)v36);
            *(void *)(a1 + 24) = v17;
            int v50 = 0;
            uint64_t v18 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)v9, &v50);
            if (!v18) {
              goto LABEL_2;
            }
          }
          a2 = sub_10FBC44(v17, v18, a3);
          ++a3[11].i32[0];
          if (a3[10].i32[0]) {
            goto LABEL_109;
          }
          goto LABEL_3;
        case 2u:
          if (v10 != 32) {
            goto LABEL_17;
          }
          v6 |= 0x20u;
          a2 = v9 + 1;
          int v19 = *v9;
          if ((*v9 & 0x80000000) == 0) {
            goto LABEL_32;
          }
          int v20 = *a2;
          int v19 = v19 + (v20 << 7) - 128;
          if (v20 < 0)
          {
            a2 = (char *)sub_188C0D0((uint64_t)v9, v19);
            *(_DWORD *)(a1 + 64) = v40;
            if (!a2) {
              goto LABEL_109;
            }
          }
          else
          {
            a2 = v9 + 2;
LABEL_32:
            *(_DWORD *)(a1 + 64) = v19;
          }
          continue;
        case 3u:
          if (v10 != 40) {
            goto LABEL_17;
          }
          v6 |= 0x40u;
          a2 = v9 + 1;
          int v21 = *v9;
          if ((*v9 & 0x80000000) == 0) {
            goto LABEL_37;
          }
          int v22 = *a2;
          int v21 = v21 + (v22 << 7) - 128;
          if (v22 < 0)
          {
            a2 = (char *)sub_188C0D0((uint64_t)v9, v21);
            *(_DWORD *)(a1 + 68) = v41;
            if (!a2) {
              goto LABEL_109;
            }
          }
          else
          {
            a2 = v9 + 2;
LABEL_37:
            *(_DWORD *)(a1 + 68) = v21;
          }
          continue;
        case 4u:
          if (v10 != 48) {
            goto LABEL_17;
          }
          v6 |= 0x80u;
          a2 = v9 + 1;
          LODWORD(v23) = *v9;
          if ((v23 & 0x80) == 0) {
            goto LABEL_42;
          }
          int v24 = *a2;
          uint64_t v23 = v23 + (v24 << 7) - 128;
          if (v24 < 0)
          {
            a2 = (char *)sub_188C138((uint64_t)v9, v23);
            *(_DWORD *)(a1 + 72) = v42;
            if (!a2) {
              goto LABEL_109;
            }
          }
          else
          {
            a2 = v9 + 2;
LABEL_42:
            *(_DWORD *)(a1 + 72) = v23;
          }
          continue;
        case 5u:
          if (v10 != 56) {
            goto LABEL_17;
          }
          v6 |= 0x100u;
          a2 = v9 + 1;
          LODWORD(v25) = *v9;
          if ((v25 & 0x80) == 0) {
            goto LABEL_47;
          }
          int v26 = *a2;
          uint64_t v25 = v25 + (v26 << 7) - 128;
          if (v26 < 0)
          {
            a2 = (char *)sub_188C138((uint64_t)v9, v25);
            *(_DWORD *)(a1 + 76) = v43;
            if (!a2) {
              goto LABEL_109;
            }
          }
          else
          {
            a2 = v9 + 2;
LABEL_47:
            *(_DWORD *)(a1 + 76) = v25;
          }
          continue;
        case 6u:
          if (v10 != 66) {
            goto LABEL_17;
          }
          *(_DWORD *)(a1 + 16) |= 2u;
          uint64_t v27 = *(void *)(a1 + 32);
          if (v27)
          {
            int v50 = 0;
            uint64_t v28 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)v9, &v50);
            if (!v28) {
              goto LABEL_2;
            }
          }
          else
          {
            uint64_t v37 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
            if (*v7) {
              uint64_t v37 = (void *)*v37;
            }
            uint64_t v27 = sub_1103580((uint64_t)v37);
            *(void *)(a1 + 32) = v27;
            int v50 = 0;
            uint64_t v28 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)v9, &v50);
            if (!v28)
            {
LABEL_2:
              a2 = 0;
              ++a3[11].i32[0];
              if (a3[10].i32[0]) {
                goto LABEL_109;
              }
              goto LABEL_3;
            }
          }
          a2 = sub_10FC46C(v27, v28, a3);
          ++a3[11].i32[0];
          if (a3[10].i32[0]) {
            goto LABEL_109;
          }
LABEL_3:
          int v8 = a3[3].i32[1] + v50;
          a3[3].i32[1] = v8;
          *a3 = (int32x2_t)(*(void *)&a3[1] + (v8 & (v8 >> 31)));
          if (!a2) {
            goto LABEL_109;
          }
          continue;
        case 7u:
          if (v10 != 74) {
            goto LABEL_17;
          }
          *(_DWORD *)(a1 + 16) |= 4u;
          uint64_t v29 = *(void **)(a1 + 40);
          if (v29) {
            goto LABEL_60;
          }
          int v30 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v7) {
            int v30 = (void *)*v30;
          }
          uint64_t v29 = sub_1104EA8((uint64_t)v30);
          *(void *)(a1 + 40) = v29;
          int v50 = 0;
          uint64_t v31 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)v9, &v50);
          if (!v31) {
            goto LABEL_2;
          }
          goto LABEL_61;
        case 8u:
          if (v10 != 82) {
            goto LABEL_17;
          }
          *(_DWORD *)(a1 + 16) |= 8u;
          uint64_t v29 = *(void **)(a1 + 48);
          if (v29)
          {
LABEL_60:
            int v50 = 0;
            uint64_t v31 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)v9, &v50);
            if (!v31) {
              goto LABEL_2;
            }
          }
          else
          {
            uint64_t v38 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
            if (*v7) {
              uint64_t v38 = (void *)*v38;
            }
            uint64_t v29 = sub_1104EA8((uint64_t)v38);
            *(void *)(a1 + 48) = v29;
            int v50 = 0;
            uint64_t v31 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)v9, &v50);
            if (!v31) {
              goto LABEL_2;
            }
          }
LABEL_61:
          a2 = sub_1104548(v29, v31, a3);
          ++a3[11].i32[0];
          if (a3[10].i32[0]) {
            goto LABEL_109;
          }
          goto LABEL_3;
        case 9u:
          if (v10 != 88) {
            goto LABEL_17;
          }
          v6 |= 0x200u;
          a2 = v9 + 1;
          uint64_t v32 = *v9;
          if ((*v9 & 0x80000000) == 0) {
            goto LABEL_67;
          }
          int v33 = *a2;
          uint64_t v32 = v32 + (v33 << 7) - 128;
          if (v33 < 0)
          {
            a2 = (char *)sub_188C138((uint64_t)v9, v32);
            *(void *)(a1 + 80) = v44;
            if (!a2) {
              goto LABEL_109;
            }
          }
          else
          {
            a2 = v9 + 2;
LABEL_67:
            *(void *)(a1 + 80) = v32;
          }
          continue;
        case 0xAu:
          if (v10 != 96) {
            goto LABEL_17;
          }
          v6 |= 0x400u;
          a2 = v9 + 1;
          uint64_t v34 = *v9;
          if ((*v9 & 0x80000000) == 0) {
            goto LABEL_72;
          }
          int v35 = *a2;
          uint64_t v34 = v34 + (v35 << 7) - 128;
          if (v35 < 0)
          {
            a2 = (char *)sub_188C138((uint64_t)v9, v34);
            *(void *)(a1 + 88) = v45;
            if (!a2) {
              goto LABEL_109;
            }
          }
          else
          {
            a2 = v9 + 2;
LABEL_72:
            *(void *)(a1 + 88) = v34;
          }
          break;
        default:
          goto LABEL_17;
      }
    }
  }
  int v46 = a2 - a3[1].i32[0];
  if (a3[3].i32[1] != v46)
  {
    a2 = sub_188BB90((uint64_t)a3, v46, a3[11].i32[1]);
    if (v47) {
      goto LABEL_114;
    }
    goto LABEL_5;
  }
  if (v46 < 1)
  {
LABEL_114:
    uint64_t v9 = a2;
    goto LABEL_108;
  }
  if (a3[2]) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = 0;
  }
LABEL_108:
  *(_DWORD *)(a1 + 16) |= v6;
  return v9;
}

unsigned char *sub_10FD350(uint64_t a1, unsigned char *__dst, _DWORD *a3)
{
  char v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 0x10) != 0)
  {
    if (*(void *)a3 <= (unint64_t)__dst)
    {
      char v4 = sub_188A3FC((uint64_t)a3, (int)__dst);
      unint64_t v7 = *(void *)(a1 + 56);
      *char v4 = 16;
      v4[1] = v7;
      if (v7 <= 0x7F) {
        goto LABEL_4;
      }
    }
    else
    {
      unint64_t v7 = *(void *)(a1 + 56);
      *long long __dst = 16;
      __dst[1] = v7;
      if (v7 <= 0x7F)
      {
LABEL_4:
        v4 += 2;
        goto LABEL_8;
      }
    }
    v4[1] = v7 | 0x80;
    unint64_t v8 = v7 >> 7;
    v4[2] = v7 >> 7;
    v4 += 3;
    if (v7 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unint64_t v9 = v8 >> 14;
        v8 >>= 7;
        *v4++ = v8;
      }
      while (v9);
    }
  }
LABEL_8:
  if (v6)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v10 = *(void *)(a1 + 24);
    *char v4 = 26;
    unsigned int v11 = *(_DWORD *)(v10 + 20);
    v4[1] = v11;
    if (v11 > 0x7F) {
      uint64_t v12 = sub_188A9CC(v11, v4 + 1);
    }
    else {
      uint64_t v12 = v4 + 2;
    }
    char v4 = sub_10FBEDC(v10, v12, a3);
  }
  if ((v6 & 0x20) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4)
    {
      char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      unsigned int v13 = *(_DWORD *)(a1 + 64);
      *char v4 = 32;
      v4[1] = v13;
      if (v13 <= 0x7F) {
        goto LABEL_18;
      }
    }
    else
    {
      unsigned int v13 = *(_DWORD *)(a1 + 64);
      *char v4 = 32;
      v4[1] = v13;
      if (v13 <= 0x7F)
      {
LABEL_18:
        v4 += 2;
        goto LABEL_22;
      }
    }
    v4[1] = v13 | 0x80;
    unsigned int v14 = v13 >> 7;
    v4[2] = v13 >> 7;
    v4 += 3;
    if (v13 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unsigned int v15 = v14 >> 14;
        v14 >>= 7;
        *v4++ = v14;
      }
      while (v15);
    }
  }
LABEL_22:
  if ((v6 & 0x40) == 0) {
    goto LABEL_29;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unsigned int v16 = *(_DWORD *)(a1 + 68);
    *char v4 = 40;
    v4[1] = v16;
    if (v16 <= 0x7F) {
      goto LABEL_25;
    }
  }
  else
  {
    unsigned int v16 = *(_DWORD *)(a1 + 68);
    *char v4 = 40;
    v4[1] = v16;
    if (v16 <= 0x7F)
    {
LABEL_25:
      v4 += 2;
      goto LABEL_29;
    }
  }
  v4[1] = v16 | 0x80;
  unsigned int v17 = v16 >> 7;
  v4[2] = v16 >> 7;
  v4 += 3;
  if (v16 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unsigned int v18 = v17 >> 14;
      v17 >>= 7;
      *v4++ = v17;
    }
    while (v18);
  }
LABEL_29:
  if ((v6 & 0x80) == 0) {
    goto LABEL_36;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unint64_t v19 = *(int *)(a1 + 72);
    *char v4 = 48;
    v4[1] = v19;
    if (v19 <= 0x7F) {
      goto LABEL_32;
    }
  }
  else
  {
    unint64_t v19 = *(int *)(a1 + 72);
    *char v4 = 48;
    v4[1] = v19;
    if (v19 <= 0x7F)
    {
LABEL_32:
      v4 += 2;
      goto LABEL_36;
    }
  }
  v4[1] = v19 | 0x80;
  unint64_t v20 = v19 >> 7;
  v4[2] = v19 >> 7;
  v4 += 3;
  if (v19 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unint64_t v21 = v20 >> 14;
      v20 >>= 7;
      *v4++ = v20;
    }
    while (v21);
  }
LABEL_36:
  if ((v6 & 0x100) == 0) {
    goto LABEL_43;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unint64_t v22 = *(int *)(a1 + 76);
    *char v4 = 56;
    v4[1] = v22;
    if (v22 <= 0x7F) {
      goto LABEL_39;
    }
  }
  else
  {
    unint64_t v22 = *(int *)(a1 + 76);
    *char v4 = 56;
    v4[1] = v22;
    if (v22 <= 0x7F)
    {
LABEL_39:
      v4 += 2;
      goto LABEL_43;
    }
  }
  v4[1] = v22 | 0x80;
  unint64_t v23 = v22 >> 7;
  v4[2] = v22 >> 7;
  v4 += 3;
  if (v22 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unint64_t v24 = v23 >> 14;
      v23 >>= 7;
      *v4++ = v23;
    }
    while (v24);
  }
LABEL_43:
  if ((v6 & 2) == 0)
  {
    if ((v6 & 4) == 0) {
      goto LABEL_45;
    }
LABEL_54:
    if (*(void *)a3 <= (unint64_t)v4) {
      char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v28 = *(void *)(a1 + 40);
    *char v4 = 74;
    unsigned int v29 = *(_DWORD *)(v28 + 20);
    v4[1] = v29;
    if (v29 > 0x7F)
    {
      int v30 = sub_188A9CC(v29, v4 + 1);
      char v4 = sub_1104908(v28, v30, a3);
      if ((v6 & 8) != 0) {
        goto LABEL_60;
      }
    }
    else
    {
      char v4 = sub_1104908(v28, v4 + 2, a3);
      if ((v6 & 8) != 0) {
        goto LABEL_60;
      }
    }
LABEL_46:
    if ((v6 & 0x200) == 0) {
      goto LABEL_72;
    }
    goto LABEL_66;
  }
  if (*(void *)a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v25 = *(void *)(a1 + 32);
  *char v4 = 66;
  unsigned int v26 = *(_DWORD *)(v25 + 20);
  v4[1] = v26;
  if (v26 > 0x7F)
  {
    uint64_t v27 = sub_188A9CC(v26, v4 + 1);
    char v4 = sub_10FC678(v25, v27, a3);
    if ((v6 & 4) != 0) {
      goto LABEL_54;
    }
  }
  else
  {
    char v4 = sub_10FC678(v25, v4 + 2, a3);
    if ((v6 & 4) != 0) {
      goto LABEL_54;
    }
  }
LABEL_45:
  if ((v6 & 8) == 0) {
    goto LABEL_46;
  }
LABEL_60:
  if (*(void *)a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v31 = *(void *)(a1 + 48);
  *char v4 = 82;
  unsigned int v32 = *(_DWORD *)(v31 + 20);
  v4[1] = v32;
  if (v32 > 0x7F)
  {
    int v33 = sub_188A9CC(v32, v4 + 1);
    char v4 = sub_1104908(v31, v33, a3);
    if ((v6 & 0x200) == 0) {
      goto LABEL_72;
    }
  }
  else
  {
    char v4 = sub_1104908(v31, v4 + 2, a3);
    if ((v6 & 0x200) == 0) {
      goto LABEL_72;
    }
  }
LABEL_66:
  if (*(void *)a3 <= (unint64_t)v4)
  {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unint64_t v34 = *(void *)(a1 + 80);
    *char v4 = 88;
    v4[1] = v34;
    if (v34 <= 0x7F) {
      goto LABEL_68;
    }
  }
  else
  {
    unint64_t v34 = *(void *)(a1 + 80);
    *char v4 = 88;
    v4[1] = v34;
    if (v34 <= 0x7F)
    {
LABEL_68:
      v4 += 2;
      goto LABEL_72;
    }
  }
  v4[1] = v34 | 0x80;
  unint64_t v35 = v34 >> 7;
  v4[2] = v34 >> 7;
  v4 += 3;
  if (v34 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unint64_t v36 = v35 >> 14;
      v35 >>= 7;
      *v4++ = v35;
    }
    while (v36);
  }
LABEL_72:
  if ((v6 & 0x400) == 0) {
    goto LABEL_79;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unint64_t v37 = *(void *)(a1 + 88);
    *char v4 = 96;
    v4[1] = v37;
    if (v37 <= 0x7F) {
      goto LABEL_75;
    }
  }
  else
  {
    unint64_t v37 = *(void *)(a1 + 88);
    *char v4 = 96;
    v4[1] = v37;
    if (v37 <= 0x7F)
    {
LABEL_75:
      v4 += 2;
      goto LABEL_79;
    }
  }
  v4[1] = v37 | 0x80;
  unint64_t v38 = v37 >> 7;
  v4[2] = v37 >> 7;
  v4 += 3;
  if (v37 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unint64_t v39 = v38 >> 14;
      v38 >>= 7;
      *v4++ = v38;
    }
    while (v39);
  }
LABEL_79:
  uint64_t v40 = *(void *)(a1 + 8);
  if ((v40 & 1) == 0) {
    return v4;
  }
  unint64_t v42 = v40 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v42 + 31) < 0)
  {
    int v43 = *(char **)(v42 + 8);
    uint64_t v44 = *(void *)(v42 + 16);
  }
  else
  {
    int v43 = (char *)(v42 + 8);
    LODWORD(v44) = *(unsigned __int8 *)(v42 + 31);
  }
  uint64_t v45 = (int)v44;
  if (*(void *)a3 - (void)v4 < (int)v44)
  {
    return (unsigned char *)sub_188A528(a3, v43, v44, v4);
  }
  else
  {
    memcpy(v4, v43, (int)v44);
    return &v4[v45];
  }
}

uint64_t sub_10FD9E8(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    if ((v2 & 0x700) == 0) {
      goto LABEL_49;
    }
    goto LABEL_45;
  }
  if (v2)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    int v5 = *(_DWORD *)(v4 + 16);
    if ((v5 & 7) == 0)
    {
      uint64_t v6 = 0;
      uint64_t v7 = *(void *)(v4 + 8);
      if ((v7 & 1) == 0) {
        goto LABEL_19;
      }
      goto LABEL_61;
    }
    if (v5)
    {
      uint64_t v6 = ((9 * (__clz(*(_DWORD *)(v4 + 24) | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v5 & 2) == 0) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v6 = 0;
      if ((v5 & 2) == 0)
      {
LABEL_15:
        if ((v5 & 4) != 0)
        {
          v6 += ((9 * (__clz(*(_DWORD *)(v4 + 32) | 1) ^ 0x1F) + 73) >> 6) + 1;
          uint64_t v7 = *(void *)(v4 + 8);
          if ((v7 & 1) == 0) {
            goto LABEL_19;
          }
        }
        else
        {
          uint64_t v7 = *(void *)(v4 + 8);
          if ((v7 & 1) == 0) {
            goto LABEL_19;
          }
        }
LABEL_61:
        unint64_t v21 = v7 & 0xFFFFFFFFFFFFFFFCLL;
        if (*(char *)(v21 + 31) < 0) {
          uint64_t v22 = *(void *)(v21 + 16);
        }
        else {
          uint64_t v22 = *(unsigned __int8 *)(v21 + 31);
        }
        v6 += v22;
LABEL_19:
        *(_DWORD *)(v4 + 20) = v6;
        uint64_t v3 = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
        if ((v2 & 2) == 0) {
          goto LABEL_28;
        }
LABEL_20:
        uint64_t v8 = *(void *)(a1 + 32);
        if (*(unsigned char *)(v8 + 16))
        {
          int v11 = *(_DWORD *)(v8 + 24);
          if (v11 < 0)
          {
            uint64_t v9 = 11;
            uint64_t v10 = *(void *)(v8 + 8);
            if (v10)
            {
LABEL_63:
              unint64_t v23 = v10 & 0xFFFFFFFFFFFFFFFCLL;
              if (*(char *)(v23 + 31) < 0) {
                uint64_t v24 = *(void *)(v23 + 16);
              }
              else {
                uint64_t v24 = *(unsigned __int8 *)(v23 + 31);
              }
              v9 += v24;
            }
          }
          else
          {
            uint64_t v9 = ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
            uint64_t v10 = *(void *)(v8 + 8);
            if (v10) {
              goto LABEL_63;
            }
          }
        }
        else
        {
          uint64_t v9 = 0;
          uint64_t v10 = *(void *)(v8 + 8);
          if (v10) {
            goto LABEL_63;
          }
        }
        *(_DWORD *)(v8 + 20) = v9;
        v3 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
        goto LABEL_28;
      }
    }
    v6 += ((9 * (__clz(*(_DWORD *)(v4 + 28) | 1) ^ 0x1F) + 73) >> 6) + 1;
    goto LABEL_15;
  }
  uint64_t v3 = 0;
  if ((v2 & 2) != 0) {
    goto LABEL_20;
  }
LABEL_28:
  if ((v2 & 4) != 0)
  {
    uint64_t v12 = sub_1104C04(*(void *)(a1 + 40));
    v3 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 8) == 0)
    {
LABEL_30:
      if ((v2 & 0x10) == 0) {
        goto LABEL_31;
      }
      goto LABEL_38;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_30;
  }
  uint64_t v13 = sub_1104C04(*(void *)(a1 + 48));
  v3 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x10) == 0)
  {
LABEL_31:
    if ((v2 & 0x20) == 0) {
      goto LABEL_32;
    }
    goto LABEL_39;
  }
LABEL_38:
  v3 += ((9 * (__clz(*(void *)(a1 + 56) | 1) ^ 0x3F) + 73) >> 6) + 1;
  if ((v2 & 0x20) == 0)
  {
LABEL_32:
    if ((v2 & 0x40) == 0) {
      goto LABEL_33;
    }
    goto LABEL_40;
  }
LABEL_39:
  v3 += ((9 * (__clz(*(_DWORD *)(a1 + 64) | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x40) == 0)
  {
LABEL_33:
    if ((v2 & 0x80) == 0) {
      goto LABEL_34;
    }
    goto LABEL_41;
  }
LABEL_40:
  v3 += ((9 * (__clz(*(_DWORD *)(a1 + 68) | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x80) == 0)
  {
LABEL_34:
    if ((v2 & 0x700) == 0) {
      goto LABEL_49;
    }
    goto LABEL_45;
  }
LABEL_41:
  int v14 = *(_DWORD *)(a1 + 72);
  if (v14 < 0)
  {
    v3 += 11;
    if ((v2 & 0x700) == 0) {
      goto LABEL_49;
    }
  }
  else
  {
    v3 += ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 0x700) == 0) {
      goto LABEL_49;
    }
  }
LABEL_45:
  if ((v2 & 0x100) == 0)
  {
    if ((v2 & 0x200) == 0) {
      goto LABEL_47;
    }
    goto LABEL_55;
  }
  int v17 = *(_DWORD *)(a1 + 76);
  if (v17 < 0)
  {
    v3 += 11;
    if ((v2 & 0x200) != 0) {
      goto LABEL_55;
    }
LABEL_47:
    if ((v2 & 0x400) == 0) {
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  v3 += ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x200) == 0) {
    goto LABEL_47;
  }
LABEL_55:
  v3 += ((9 * (__clz(*(void *)(a1 + 80) | 1) ^ 0x3F) + 73) >> 6) + 1;
  if ((v2 & 0x400) != 0) {
LABEL_48:
  }
    v3 += ((9 * (__clz(*(void *)(a1 + 88) | 1) ^ 0x3F) + 73) >> 6) + 1;
LABEL_49:
  uint64_t v15 = *(void *)(a1 + 8);
  if (v15)
  {
    unint64_t v18 = v15 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v18 + 31) < 0) {
      uint64_t v19 = *(void *)(v18 + 16);
    }
    else {
      uint64_t v19 = *(unsigned __int8 *)(v18 + 31);
    }
    uint64_t v20 = v19 + v3;
    *(_DWORD *)(a1 + 20) = v20;
    return v20;
  }
  else
  {
    *(_DWORD *)(a1 + 20) = v3;
    return v3;
  }
}

std::string *sub_10FDDEC(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 16);
  if ((_BYTE)v4)
  {
    if ((v4 & 1) == 0) {
      goto LABEL_17;
    }
    LODWORD(result->__r_.__value_.__r.__words[2]) |= 1u;
    uint64_t result = (std::string *)result[1].__r_.__value_.__l.__data_;
    if (!result)
    {
      std::string::size_type size = v3->__r_.__value_.__l.__size_;
      uint64_t v6 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
      if (size) {
        uint64_t v6 = (void *)*v6;
      }
      uint64_t result = (std::string *)sub_1103504((uint64_t)v6);
      v3[1].__r_.__value_.__r.__words[0] = (std::string::size_type)result;
    }
    uint64_t v7 = *(uint64_t (****)())(a2 + 24);
    if (!v7) {
      uint64_t v7 = &off_24F7CC8;
    }
    int v8 = *((_DWORD *)v7 + 4);
    if ((v8 & 7) == 0)
    {
LABEL_15:
      unint64_t v9 = (unint64_t)v7[1];
      if (v9) {
        uint64_t result = sub_188B4F8((uint64_t *)&result->__r_.__value_.__l.__size_, (v9 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
LABEL_17:
      if ((v4 & 2) != 0)
      {
        LODWORD(v3->__r_.__value_.__r.__words[2]) |= 2u;
        uint64_t result = (std::string *)v3[1].__r_.__value_.__l.__size_;
        if (!result)
        {
          std::string::size_type v10 = v3->__r_.__value_.__l.__size_;
          int v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
          if (v10) {
            int v11 = (void *)*v11;
          }
          uint64_t result = (std::string *)sub_1103580((uint64_t)v11);
          v3[1].__r_.__value_.__l.__size_ = (std::string::size_type)result;
        }
        uint64_t v12 = *(uint64_t (****)())(a2 + 32);
        if (!v12) {
          uint64_t v12 = &off_24F7CF0;
        }
        if ((_BYTE)v12[2])
        {
          int v13 = *((_DWORD *)v12 + 6);
          LODWORD(result->__r_.__value_.__r.__words[2]) |= 1u;
          LODWORD(result[1].__r_.__value_.__l.__data_) = v13;
        }
        unint64_t v14 = (unint64_t)v12[1];
        if (v14) {
          uint64_t result = sub_188B4F8((uint64_t *)&result->__r_.__value_.__l.__size_, (v14 & 0xFFFFFFFFFFFFFFFCLL) + 8);
        }
      }
      if ((v4 & 4) != 0)
      {
        LODWORD(v3->__r_.__value_.__r.__words[2]) |= 4u;
        unsigned int v16 = (std::string *)v3[1].__r_.__value_.__r.__words[2];
        if (!v16)
        {
          std::string::size_type v17 = v3->__r_.__value_.__l.__size_;
          unint64_t v18 = (void *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
          if (v17) {
            unint64_t v18 = (void *)*v18;
          }
          unsigned int v16 = (std::string *)sub_1104EA8((uint64_t)v18);
          v3[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v16;
        }
        if (*(void *)(a2 + 40)) {
          uint64_t v19 = *(uint64_t (****)())(a2 + 40);
        }
        else {
          uint64_t v19 = &off_24F7E98;
        }
        uint64_t result = sub_1104DD8(v16, (uint64_t)v19);
        if ((v4 & 8) == 0)
        {
LABEL_30:
          if ((v4 & 0x10) == 0) {
            goto LABEL_31;
          }
          goto LABEL_62;
        }
      }
      else if ((v4 & 8) == 0)
      {
        goto LABEL_30;
      }
      LODWORD(v3->__r_.__value_.__r.__words[2]) |= 8u;
      std::string::pointer data = (std::string *)v3[2].__r_.__value_.__l.__data_;
      if (!data)
      {
        std::string::size_type v21 = v3->__r_.__value_.__l.__size_;
        uint64_t v22 = (void *)(v21 & 0xFFFFFFFFFFFFFFFCLL);
        if (v21) {
          uint64_t v22 = (void *)*v22;
        }
        std::string::pointer data = (std::string *)sub_1104EA8((uint64_t)v22);
        v3[2].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
      }
      if (*(void *)(a2 + 48)) {
        unint64_t v23 = *(uint64_t (****)())(a2 + 48);
      }
      else {
        unint64_t v23 = &off_24F7E98;
      }
      uint64_t result = sub_1104DD8(data, (uint64_t)v23);
      if ((v4 & 0x10) == 0)
      {
LABEL_31:
        if ((v4 & 0x20) == 0) {
          goto LABEL_32;
        }
        goto LABEL_63;
      }
LABEL_62:
      v3[2].__r_.__value_.__l.__size_ = *(void *)(a2 + 56);
      if ((v4 & 0x20) == 0)
      {
LABEL_32:
        if ((v4 & 0x40) == 0) {
          goto LABEL_33;
        }
        goto LABEL_64;
      }
LABEL_63:
      LODWORD(v3[2].__r_.__value_.__r.__words[2]) = *(_DWORD *)(a2 + 64);
      if ((v4 & 0x40) == 0)
      {
LABEL_33:
        if ((v4 & 0x80) == 0)
        {
LABEL_35:
          LODWORD(v3->__r_.__value_.__r.__words[2]) |= v4;
          goto LABEL_36;
        }
LABEL_34:
        LODWORD(v3[3].__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 72);
        goto LABEL_35;
      }
LABEL_64:
      HIDWORD(v3[2].__r_.__value_.__r.__words[2]) = *(_DWORD *)(a2 + 68);
      if ((v4 & 0x80) == 0) {
        goto LABEL_35;
      }
      goto LABEL_34;
    }
    if (v8)
    {
      LODWORD(result[1].__r_.__value_.__l.__data_) = *((_DWORD *)v7 + 6);
      if ((v8 & 2) == 0)
      {
LABEL_12:
        if ((v8 & 4) == 0)
        {
LABEL_14:
          LODWORD(result->__r_.__value_.__r.__words[2]) |= v8;
          goto LABEL_15;
        }
LABEL_13:
        LODWORD(result[1].__r_.__value_.__r.__words[1]) = *((_DWORD *)v7 + 8);
        goto LABEL_14;
      }
    }
    else if ((v8 & 2) == 0)
    {
      goto LABEL_12;
    }
    HIDWORD(result[1].__r_.__value_.__r.__words[0]) = *((_DWORD *)v7 + 7);
    if ((v8 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_36:
  if ((v4 & 0x700) == 0) {
    goto LABEL_42;
  }
  if ((v4 & 0x100) == 0)
  {
    if ((v4 & 0x200) == 0) {
      goto LABEL_39;
    }
LABEL_67:
    v3[3].__r_.__value_.__l.__size_ = *(void *)(a2 + 80);
    if ((v4 & 0x400) == 0) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
  HIDWORD(v3[3].__r_.__value_.__r.__words[0]) = *(_DWORD *)(a2 + 76);
  if ((v4 & 0x200) != 0) {
    goto LABEL_67;
  }
LABEL_39:
  if ((v4 & 0x400) != 0) {
LABEL_40:
  }
    v3[3].__r_.__value_.__r.__words[2] = *(void *)(a2 + 88);
LABEL_41:
  LODWORD(v3->__r_.__value_.__r.__words[2]) |= v4;
LABEL_42:
  uint64_t v15 = *(void *)(a2 + 8);
  if (v15)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v15 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_10FE0A4()
{
  return 1;
}

double sub_10FE0AC@<D0>(uint64_t a1@<X8>)
{
  int v2 = (char *)operator new(0x30uLL);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_20B9380;
  strcpy(v2, "geo3.internal.transit.PublicTransportJourneyLeg");
  return *(double *)"nsportJourneyLeg";
}

void *sub_10FE100(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }
  return a1;
}

void sub_10FE1A0(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }

  operator delete();
}

uint64_t sub_10FE260(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 0x1F) != 0)
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 40) = 0;
  }
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_10FE28C(uint64_t a1, char *a2, int32x2_t *a3)
{
  int v6 = 0;
  uint64_t v7 = (uint64_t *)(a1 + 8);
  while ((unint64_t)a2 < *(void *)a3)
  {
LABEL_5:
    int v8 = a2 + 1;
    unsigned int v9 = *a2;
    if (*a2 < 0)
    {
      unsigned int v13 = v9 + (*v8 << 7);
      unsigned int v9 = v13 - 128;
      if (*v8 < 0)
      {
        int v8 = (char *)sub_188C180((uint64_t)a2, v13 - 128);
        unsigned int v9 = v23;
        unsigned int v10 = (v23 >> 3) - 1;
        if (v10 <= 4) {
          goto LABEL_7;
        }
      }
      else
      {
        int v8 = a2 + 2;
        unsigned int v10 = (v9 >> 3) - 1;
        if (v10 <= 4) {
          goto LABEL_7;
        }
      }
LABEL_37:
      if (v9) {
        BOOL v24 = (v9 & 7) == 4;
      }
      else {
        BOOL v24 = 1;
      }
      if (v24)
      {
        if (v8) {
          a3[10].i32[0] = v9 - 1;
        }
        goto LABEL_59;
      }
      if (*v7)
      {
        a2 = (char *)sub_1885AC0(v9, (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8), v8, a3);
        if (!a2) {
          goto LABEL_56;
        }
      }
      else
      {
        uint64_t v31 = (std::string *)sub_188DBD8(v7);
        a2 = (char *)sub_1885AC0(v9, v31, v8, a3);
        if (!a2)
        {
LABEL_56:
          int v8 = 0;
          goto LABEL_59;
        }
      }
    }
    else
    {
      unsigned int v10 = (v9 >> 3) - 1;
LABEL_7:
      switch(v10)
      {
        case 0u:
          if (v9 != 8) {
            goto LABEL_37;
          }
          v6 |= 1u;
          a2 = v8 + 1;
          uint64_t v11 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_12;
          }
          int v12 = *a2;
          uint64_t v11 = v11 + (v12 << 7) - 128;
          if (v12 < 0)
          {
            a2 = (char *)sub_188C138((uint64_t)v8, v11);
            *(void *)(a1 + 24) = v25;
            if (!a2) {
              goto LABEL_56;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_12:
            *(void *)(a1 + 24) = v11;
          }
          continue;
        case 1u:
          if (v9 != 16) {
            goto LABEL_37;
          }
          v6 |= 2u;
          a2 = v8 + 1;
          uint64_t v14 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_20;
          }
          int v15 = *a2;
          uint64_t v14 = v14 + (v15 << 7) - 128;
          if (v15 < 0)
          {
            a2 = (char *)sub_188C138((uint64_t)v8, v14);
            *(void *)(a1 + 32) = v26;
            if (!a2) {
              goto LABEL_56;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_20:
            *(void *)(a1 + 32) = v14;
          }
          continue;
        case 2u:
          if (v9 != 24) {
            goto LABEL_37;
          }
          v6 |= 4u;
          a2 = v8 + 1;
          LODWORD(v16) = *v8;
          if ((v16 & 0x80) == 0) {
            goto LABEL_25;
          }
          int v17 = *a2;
          uint64_t v16 = v16 + (v17 << 7) - 128;
          if (v17 < 0)
          {
            a2 = (char *)sub_188C138((uint64_t)v8, v16);
            *(_DWORD *)(a1 + 40) = v27;
            if (!a2) {
              goto LABEL_56;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_25:
            *(_DWORD *)(a1 + 40) = v16;
          }
          continue;
        case 3u:
          if (v9 != 32) {
            goto LABEL_37;
          }
          v6 |= 8u;
          a2 = v8 + 1;
          LODWORD(v18) = *v8;
          if ((v18 & 0x80) == 0) {
            goto LABEL_30;
          }
          int v19 = *a2;
          uint64_t v18 = v18 + (v19 << 7) - 128;
          if (v19 < 0)
          {
            a2 = (char *)sub_188C138((uint64_t)v8, v18);
            *(_DWORD *)(a1 + 44) = v28;
            if (!a2) {
              goto LABEL_56;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_30:
            *(_DWORD *)(a1 + 44) = v18;
          }
          break;
        case 4u:
          if (v9 != 40) {
            goto LABEL_37;
          }
          v6 |= 0x10u;
          a2 = v8 + 1;
          uint64_t v20 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_3;
          }
          int v21 = *a2;
          uint64_t v20 = v20 + (v21 << 7) - 128;
          if (v21 < 0)
          {
            a2 = (char *)sub_188C138((uint64_t)v8, v20);
            *(unsigned char *)(a1 + 48) = v22 != 0;
            if (!a2) {
              goto LABEL_56;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_3:
            *(unsigned char *)(a1 + 48) = v20 != 0;
          }
          continue;
        default:
          goto LABEL_37;
      }
    }
  }
  int v29 = a2 - a3[1].i32[0];
  if (a3[3].i32[1] != v29)
  {
    a2 = sub_188BB90((uint64_t)a3, v29, a3[11].i32[1]);
    if (v30) {
      goto LABEL_64;
    }
    goto LABEL_5;
  }
  if (v29 < 1)
  {
LABEL_64:
    int v8 = a2;
    goto LABEL_59;
  }
  if (a3[2]) {
    int v8 = a2;
  }
  else {
    int v8 = 0;
  }
LABEL_59:
  *(_DWORD *)(a1 + 16) |= v6;
  return v8;
}

unsigned char *sub_10FE60C(uint64_t a1, unsigned char *__dst, _DWORD *a3)
{
  int v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*(void *)a3 <= (unint64_t)__dst)
    {
      int v4 = sub_188A3FC((uint64_t)a3, (int)__dst);
      unint64_t v7 = *(void *)(a1 + 24);
      *int v4 = 8;
      v4[1] = v7;
      if (v7 <= 0x7F) {
        goto LABEL_4;
      }
    }
    else
    {
      unint64_t v7 = *(void *)(a1 + 24);
      *long long __dst = 8;
      __dst[1] = v7;
      if (v7 <= 0x7F)
      {
LABEL_4:
        v4 += 2;
        goto LABEL_8;
      }
    }
    v4[1] = v7 | 0x80;
    unint64_t v8 = v7 >> 7;
    v4[2] = v7 >> 7;
    v4 += 3;
    if (v7 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unint64_t v9 = v8 >> 14;
        v8 >>= 7;
        *v4++ = v8;
      }
      while (v9);
    }
  }
LABEL_8:
  if ((v6 & 2) == 0) {
    goto LABEL_15;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    int v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unint64_t v10 = *(void *)(a1 + 32);
    *int v4 = 16;
    v4[1] = v10;
    if (v10 <= 0x7F) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + 32);
    *int v4 = 16;
    v4[1] = v10;
    if (v10 <= 0x7F)
    {
LABEL_11:
      v4 += 2;
      goto LABEL_15;
    }
  }
  v4[1] = v10 | 0x80;
  unint64_t v11 = v10 >> 7;
  v4[2] = v10 >> 7;
  v4 += 3;
  if (v10 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unint64_t v12 = v11 >> 14;
      v11 >>= 7;
      *v4++ = v11;
    }
    while (v12);
  }
LABEL_15:
  if ((v6 & 4) == 0) {
    goto LABEL_22;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    int v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unint64_t v13 = *(int *)(a1 + 40);
    *int v4 = 24;
    v4[1] = v13;
    if (v13 <= 0x7F) {
      goto LABEL_18;
    }
  }
  else
  {
    unint64_t v13 = *(int *)(a1 + 40);
    *int v4 = 24;
    v4[1] = v13;
    if (v13 <= 0x7F)
    {
LABEL_18:
      v4 += 2;
      goto LABEL_22;
    }
  }
  v4[1] = v13 | 0x80;
  unint64_t v14 = v13 >> 7;
  v4[2] = v13 >> 7;
  v4 += 3;
  if (v13 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unint64_t v15 = v14 >> 14;
      v14 >>= 7;
      *v4++ = v14;
    }
    while (v15);
  }
LABEL_22:
  if ((v6 & 8) == 0) {
    goto LABEL_29;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    int v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unint64_t v16 = *(int *)(a1 + 44);
    *int v4 = 32;
    v4[1] = v16;
    if (v16 <= 0x7F) {
      goto LABEL_25;
    }
  }
  else
  {
    unint64_t v16 = *(int *)(a1 + 44);
    *int v4 = 32;
    v4[1] = v16;
    if (v16 <= 0x7F)
    {
LABEL_25:
      v4 += 2;
      goto LABEL_29;
    }
  }
  v4[1] = v16 | 0x80;
  unint64_t v17 = v16 >> 7;
  v4[2] = v16 >> 7;
  v4 += 3;
  if (v16 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unint64_t v18 = v17 >> 14;
      v17 >>= 7;
      *v4++ = v17;
    }
    while (v18);
  }
LABEL_29:
  if ((v6 & 0x10) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      int v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    char v19 = *(unsigned char *)(a1 + 48);
    *int v4 = 40;
    v4[1] = v19;
    v4 += 2;
  }
  uint64_t v20 = *(void *)(a1 + 8);
  if ((v20 & 1) == 0) {
    return v4;
  }
  unint64_t v22 = v20 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v22 + 31) < 0)
  {
    unsigned int v23 = *(char **)(v22 + 8);
    uint64_t v24 = *(void *)(v22 + 16);
  }
  else
  {
    unsigned int v23 = (char *)(v22 + 8);
    LODWORD(v24) = *(unsigned __int8 *)(v22 + 31);
  }
  uint64_t v25 = (int)v24;
  if (*(void *)a3 - (void)v4 < (int)v24)
  {
    return (unsigned char *)sub_188A528(a3, v23, v24, v4);
  }
  else
  {
    memcpy(v4, v23, (int)v24);
    return &v4[v25];
  }
}

unint64_t sub_10FE940(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 0x1F) == 0)
  {
    unint64_t v3 = 0;
    goto LABEL_22;
  }
  if (v1)
  {
    unint64_t v2 = ((9 * (__clz(*(void *)(a1 + 24) | 1) ^ 0x3F) + 73) >> 6) + 1;
    if ((v1 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  unint64_t v2 = 0;
  if ((v1 & 2) != 0) {
LABEL_7:
  }
    v2 += ((9 * (__clz(*(void *)(a1 + 32) | 1) ^ 0x3F) + 73) >> 6) + 1;
LABEL_8:
  if ((v1 & 4) == 0)
  {
    if ((v1 & 8) == 0) {
      goto LABEL_19;
    }
LABEL_15:
    int v5 = *(_DWORD *)(a1 + 44);
    if (v5 < 0) {
      uint64_t v6 = 11;
    }
    else {
      uint64_t v6 = ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v2 += v6;
    goto LABEL_19;
  }
  int v4 = *(_DWORD *)(a1 + 40);
  if (v4 < 0)
  {
    v2 += 11;
    if ((v1 & 8) == 0) {
      goto LABEL_19;
    }
    goto LABEL_15;
  }
  v2 += ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 8) != 0) {
    goto LABEL_15;
  }
LABEL_19:
  if ((v1 & 0x10) != 0) {
    unint64_t v3 = v2 + 2;
  }
  else {
    unint64_t v3 = v2;
  }
LABEL_22:
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v9 + 31) < 0) {
      unint64_t v10 = *(void *)(v9 + 16) + v3;
    }
    else {
      unint64_t v10 = *(unsigned __int8 *)(v9 + 31) + v3;
    }
    *(_DWORD *)(a1 + 20) = v10;
    return v10;
  }
  else
  {
    *(_DWORD *)(a1 + 20) = v3;
    return v3;
  }
}

std::string *sub_10FEA74(std::string *result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 16);
  if ((v2 & 0x1F) == 0) {
    goto LABEL_9;
  }
  if (v2)
  {
    result[1].__r_.__value_.__r.__words[0] = *(void *)(a2 + 24);
    if ((v2 & 2) == 0)
    {
LABEL_4:
      if ((v2 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_13;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_4;
  }
  result[1].__r_.__value_.__l.__size_ = *(void *)(a2 + 32);
  if ((v2 & 4) == 0)
  {
LABEL_5:
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
LABEL_14:
    HIDWORD(result[1].__r_.__value_.__r.__words[2]) = *(_DWORD *)(a2 + 44);
    if ((v2 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_13:
  LODWORD(result[1].__r_.__value_.__r.__words[2]) = *(_DWORD *)(a2 + 40);
  if ((v2 & 8) != 0) {
    goto LABEL_14;
  }
LABEL_6:
  if ((v2 & 0x10) != 0) {
LABEL_7:
  }
    result[2].__r_.__value_.__s.__data_[0] = *(unsigned char *)(a2 + 48);
LABEL_8:
  LODWORD(result->__r_.__value_.__r.__words[2]) |= v2;
LABEL_9:
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3) {
    return sub_188B4F8((uint64_t *)&result->__r_.__value_.__l.__size_, (v3 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_10FEAF8()
{
  return 1;
}

double sub_10FEB00@<D0>(uint64_t a1@<X8>)
{
  int v2 = (char *)operator new(0x38uLL);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_20B9A60;
  strcpy(v2, "geo3.internal.transit.InStationWalkingJourneyLeg");
  return *(double *)"alkingJourneyLeg";
}

void *sub_10FEB54(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }
  return a1;
}

void sub_10FEBF4(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }

  operator delete();
}

uint64_t sub_10FECB4(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 7) != 0)
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_10FECD8(uint64_t a1, char *a2, int32x2_t *a3)
{
  int v6 = 0;
  uint64_t v7 = (uint64_t *)(a1 + 8);
  while (1)
  {
    if ((unint64_t)a2 < *(void *)a3) {
      goto LABEL_5;
    }
    int v23 = a2 - a3[1].i32[0];
    if (a3[3].i32[1] == v23) {
      break;
    }
    a2 = sub_188BB90((uint64_t)a3, v23, a3[11].i32[1]);
    if (v24) {
      goto LABEL_51;
    }
LABEL_5:
    unint64_t v9 = a2 + 1;
    unsigned int v10 = *a2;
    if (*a2 < 0)
    {
      unsigned int v13 = v10 + (*v9 << 7);
      unsigned int v10 = v13 - 128;
      if (*v9 < 0)
      {
        unint64_t v9 = (char *)sub_188C180((uint64_t)a2, v13 - 128);
        unsigned int v10 = v18;
        unsigned int v11 = v18 >> 3;
        if (v18 >> 3 != 3) {
          goto LABEL_7;
        }
      }
      else
      {
        unint64_t v9 = a2 + 2;
        unsigned int v11 = v10 >> 3;
        if (v10 >> 3 != 3) {
          goto LABEL_7;
        }
      }
      goto LABEL_19;
    }
    unsigned int v11 = v10 >> 3;
    if (v10 >> 3 == 3)
    {
LABEL_19:
      if (v10 != 24) {
        goto LABEL_12;
      }
      v6 |= 4u;
      a2 = v9 + 1;
      uint64_t v14 = *v9;
      if (*v9 < 0)
      {
        int v15 = *a2;
        uint64_t v14 = v14 + (v15 << 7) - 128;
        if ((v15 & 0x80000000) == 0)
        {
          a2 = v9 + 2;
          goto LABEL_23;
        }
        a2 = (char *)sub_188C138((uint64_t)v9, v14);
        *(void *)(a1 + 32) = v20;
        if (!a2) {
          goto LABEL_43;
        }
      }
      else
      {
LABEL_23:
        *(void *)(a1 + 32) = v14;
      }
    }
    else
    {
LABEL_7:
      if (v11 == 2)
      {
        if (v10 != 16) {
          goto LABEL_12;
        }
        v6 |= 2u;
        a2 = v9 + 1;
        LODWORD(v16) = *v9;
        if ((v16 & 0x80) != 0)
        {
          int v17 = *a2;
          uint64_t v16 = v16 + (v17 << 7) - 128;
          if ((v17 & 0x80000000) == 0)
          {
            a2 = v9 + 2;
            goto LABEL_28;
          }
          a2 = (char *)sub_188C138((uint64_t)v9, v16);
          *(_DWORD *)(a1 + 28) = v21;
          if (!a2) {
            goto LABEL_43;
          }
        }
        else
        {
LABEL_28:
          *(_DWORD *)(a1 + 28) = v16;
        }
      }
      else if (v11 == 1 && v10 == 8)
      {
        v6 |= 1u;
        a2 = v9 + 1;
        LODWORD(v8) = *v9;
        if ((v8 & 0x80) == 0) {
          goto LABEL_3;
        }
        int v19 = *a2;
        uint64_t v8 = v8 + (v19 << 7) - 128;
        if (v19 < 0)
        {
          a2 = (char *)sub_188C138((uint64_t)v9, v8);
          *(_DWORD *)(a1 + 24) = v22;
          if (!a2) {
            goto LABEL_43;
          }
        }
        else
        {
          a2 = v9 + 2;
LABEL_3:
          *(_DWORD *)(a1 + 24) = v8;
        }
      }
      else
      {
LABEL_12:
        if (!v10 || (v10 & 7) == 4)
        {
          if (v9) {
            a3[10].i32[0] = v10 - 1;
          }
          goto LABEL_46;
        }
        if (*v7)
        {
          a2 = (char *)sub_1885AC0(v10, (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8), v9, a3);
          if (!a2) {
            goto LABEL_43;
          }
        }
        else
        {
          uint64_t v25 = (std::string *)sub_188DBD8(v7);
          a2 = (char *)sub_1885AC0(v10, v25, v9, a3);
          if (!a2)
          {
LABEL_43:
            unint64_t v9 = 0;
            goto LABEL_46;
          }
        }
      }
    }
  }
  if (v23 < 1)
  {
LABEL_51:
    unint64_t v9 = a2;
    goto LABEL_46;
  }
  if (a3[2]) {
    unint64_t v9 = a2;
  }
  else {
    unint64_t v9 = 0;
  }
LABEL_46:
  *(_DWORD *)(a1 + 16) |= v6;
  return v9;
}

unsigned char *sub_10FEF68(uint64_t a1, unsigned char *__dst, _DWORD *a3)
{
  int v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*(void *)a3 <= (unint64_t)__dst)
    {
      int v4 = sub_188A3FC((uint64_t)a3, (int)__dst);
      unint64_t v7 = *(int *)(a1 + 24);
      *int v4 = 8;
      v4[1] = v7;
      if (v7 <= 0x7F) {
        goto LABEL_4;
      }
    }
    else
    {
      unint64_t v7 = *(int *)(a1 + 24);
      *long long __dst = 8;
      __dst[1] = v7;
      if (v7 <= 0x7F)
      {
LABEL_4:
        v4 += 2;
        goto LABEL_8;
      }
    }
    v4[1] = v7 | 0x80;
    unint64_t v8 = v7 >> 7;
    v4[2] = v7 >> 7;
    v4 += 3;
    if (v7 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unint64_t v9 = v8 >> 14;
        v8 >>= 7;
        *v4++ = v8;
      }
      while (v9);
    }
  }
LABEL_8:
  if ((v6 & 2) == 0) {
    goto LABEL_15;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    int v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unint64_t v10 = *(int *)(a1 + 28);
    *int v4 = 16;
    v4[1] = v10;
    if (v10 <= 0x7F) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v10 = *(int *)(a1 + 28);
    *int v4 = 16;
    v4[1] = v10;
    if (v10 <= 0x7F)
    {
LABEL_11:
      v4 += 2;
      goto LABEL_15;
    }
  }
  v4[1] = v10 | 0x80;
  unint64_t v11 = v10 >> 7;
  v4[2] = v10 >> 7;
  v4 += 3;
  if (v10 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unint64_t v12 = v11 >> 14;
      v11 >>= 7;
      *v4++ = v11;
    }
    while (v12);
  }
LABEL_15:
  if ((v6 & 4) == 0) {
    goto LABEL_22;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    int v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unint64_t v13 = *(void *)(a1 + 32);
    *int v4 = 24;
    v4[1] = v13;
    if (v13 <= 0x7F) {
      goto LABEL_18;
    }
  }
  else
  {
    unint64_t v13 = *(void *)(a1 + 32);
    *int v4 = 24;
    v4[1] = v13;
    if (v13 <= 0x7F)
    {
LABEL_18:
      v4 += 2;
      goto LABEL_22;
    }
  }
  v4[1] = v13 | 0x80;
  unint64_t v14 = v13 >> 7;
  v4[2] = v13 >> 7;
  v4 += 3;
  if (v13 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unint64_t v15 = v14 >> 14;
      v14 >>= 7;
      *v4++ = v14;
    }
    while (v15);
  }
LABEL_22:
  uint64_t v16 = *(void *)(a1 + 8);
  if ((v16 & 1) == 0) {
    return v4;
  }
  unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v18 + 31) < 0)
  {
    int v19 = *(char **)(v18 + 8);
    uint64_t v20 = *(void *)(v18 + 16);
  }
  else
  {
    int v19 = (char *)(v18 + 8);
    LODWORD(v20) = *(unsigned __int8 *)(v18 + 31);
  }
  uint64_t v21 = (int)v20;
  if (*(void *)a3 - (void)v4 < (int)v20)
  {
    return (unsigned char *)sub_188A528(a3, v19, v20, v4);
  }
  else
  {
    memcpy(v4, v19, (int)v20);
    return &v4[v21];
  }
}

uint64_t sub_10FF1D4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 7) != 0)
  {
    if (v1)
    {
      int v4 = *(_DWORD *)(a1 + 24);
      if (v4 < 0)
      {
        uint64_t v2 = 11;
        if ((v1 & 2) == 0) {
          goto LABEL_15;
        }
      }
      else
      {
        uint64_t v2 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
        if ((v1 & 2) == 0) {
          goto LABEL_15;
        }
      }
    }
    else
    {
      uint64_t v2 = 0;
      if ((v1 & 2) == 0) {
        goto LABEL_15;
      }
    }
    int v5 = *(_DWORD *)(a1 + 28);
    if (v5 < 0) {
      uint64_t v6 = 11;
    }
    else {
      uint64_t v6 = ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v2 += v6;
LABEL_15:
    if ((v1 & 4) != 0)
    {
      v2 += ((9 * (__clz(*(void *)(a1 + 32) | 1) ^ 0x3F) + 73) >> 6) + 1;
      uint64_t v3 = *(void *)(a1 + 8);
      if ((v3 & 1) == 0) {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v3 = *(void *)(a1 + 8);
      if ((v3 & 1) == 0) {
        goto LABEL_17;
      }
    }
    goto LABEL_19;
  }
  uint64_t v2 = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 1) == 0)
  {
LABEL_17:
    *(_DWORD *)(a1 + 20) = v2;
    return v2;
  }
LABEL_19:
  unint64_t v8 = v3 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v8 + 31) < 0) {
    uint64_t v9 = *(void *)(v8 + 16) + v2;
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(v8 + 31) + v2;
  }
  *(_DWORD *)(a1 + 20) = v9;
  return v9;
}

std::string *sub_10FF2D8(std::string *result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 16);
  if ((v2 & 7) == 0) {
    goto LABEL_7;
  }
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0) {
      goto LABEL_4;
    }
LABEL_10:
    HIDWORD(result[1].__r_.__value_.__r.__words[0]) = *(_DWORD *)(a2 + 28);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  LODWORD(result[1].__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 24);
  if ((v2 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_4:
  if ((v2 & 4) != 0) {
LABEL_5:
  }
    result[1].__r_.__value_.__l.__size_ = *(void *)(a2 + 32);
LABEL_6:
  LODWORD(result->__r_.__value_.__r.__words[2]) |= v2;
LABEL_7:
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3) {
    return sub_188B4F8((uint64_t *)&result->__r_.__value_.__l.__size_, (v3 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_10FF33C()
{
  return 1;
}

double sub_10FF344@<D0>(uint64_t a1@<X8>)
{
  int v2 = (char *)operator new(0x30uLL);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_20B9380;
  strcpy(v2, "geo3.internal.transit.RoadAccessPointJourneyLeg");
  return *(double *)"sPointJourneyLeg";
}

void *sub_10FF398(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }
  return a1;
}

void sub_10FF438(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }

  operator delete();
}

uint64_t sub_10FF4F8(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 0x1F) != 0)
  {
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
  }
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_10FF524(uint64_t a1, char *a2, int32x2_t *a3)
{
  int v6 = 0;
  unint64_t v7 = (uint64_t *)(a1 + 8);
  while ((unint64_t)a2 < *(void *)a3)
  {
LABEL_5:
    unint64_t v8 = a2 + 1;
    unsigned int v9 = *a2;
    if (*a2 < 0)
    {
      unsigned int v13 = v9 + (*v8 << 7);
      unsigned int v9 = v13 - 128;
      if (*v8 < 0)
      {
        unint64_t v8 = (char *)sub_188C180((uint64_t)a2, v13 - 128);
        unsigned int v9 = v23;
        unsigned int v10 = (v23 >> 3) - 1;
        if (v10 <= 4) {
          goto LABEL_7;
        }
      }
      else
      {
        unint64_t v8 = a2 + 2;
        unsigned int v10 = (v9 >> 3) - 1;
        if (v10 <= 4) {
          goto LABEL_7;
        }
      }
LABEL_37:
      if (v9) {
        BOOL v24 = (v9 & 7) == 4;
      }
      else {
        BOOL v24 = 1;
      }
      if (v24)
      {
        if (v8) {
          a3[10].i32[0] = v9 - 1;
        }
        goto LABEL_59;
      }
      if (*v7)
      {
        a2 = (char *)sub_1885AC0(v9, (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8), v8, a3);
        if (!a2) {
          goto LABEL_56;
        }
      }
      else
      {
        uint64_t v31 = (std::string *)sub_188DBD8(v7);
        a2 = (char *)sub_1885AC0(v9, v31, v8, a3);
        if (!a2)
        {
LABEL_56:
          unint64_t v8 = 0;
          goto LABEL_59;
        }
      }
    }
    else
    {
      unsigned int v10 = (v9 >> 3) - 1;
LABEL_7:
      switch(v10)
      {
        case 0u:
          if (v9 != 8) {
            goto LABEL_37;
          }
          v6 |= 1u;
          a2 = v8 + 1;
          uint64_t v11 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_12;
          }
          int v12 = *a2;
          uint64_t v11 = v11 + (v12 << 7) - 128;
          if (v12 < 0)
          {
            a2 = (char *)sub_188C138((uint64_t)v8, v11);
            *(void *)(a1 + 24) = v25;
            if (!a2) {
              goto LABEL_56;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_12:
            *(void *)(a1 + 24) = v11;
          }
          continue;
        case 1u:
          if (v9 != 16) {
            goto LABEL_37;
          }
          v6 |= 2u;
          a2 = v8 + 1;
          uint64_t v14 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_20;
          }
          int v15 = *a2;
          uint64_t v14 = v14 + (v15 << 7) - 128;
          if (v15 < 0)
          {
            a2 = (char *)sub_188C138((uint64_t)v8, v14);
            *(void *)(a1 + 32) = v26;
            if (!a2) {
              goto LABEL_56;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_20:
            *(void *)(a1 + 32) = v14;
          }
          continue;
        case 2u:
          if (v9 != 24) {
            goto LABEL_37;
          }
          v6 |= 4u;
          a2 = v8 + 1;
          LODWORD(v16) = *v8;
          if ((v16 & 0x80) == 0) {
            goto LABEL_25;
          }
          int v17 = *a2;
          uint64_t v16 = v16 + (v17 << 7) - 128;
          if (v17 < 0)
          {
            a2 = (char *)sub_188C138((uint64_t)v8, v16);
            *(_DWORD *)(a1 + 40) = v27;
            if (!a2) {
              goto LABEL_56;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_25:
            *(_DWORD *)(a1 + 40) = v16;
          }
          continue;
        case 3u:
          if (v9 != 32) {
            goto LABEL_37;
          }
          v6 |= 8u;
          a2 = v8 + 1;
          LODWORD(v18) = *v8;
          if ((v18 & 0x80) == 0) {
            goto LABEL_30;
          }
          int v19 = *a2;
          uint64_t v18 = v18 + (v19 << 7) - 128;
          if (v19 < 0)
          {
            a2 = (char *)sub_188C138((uint64_t)v8, v18);
            *(_DWORD *)(a1 + 44) = v28;
            if (!a2) {
              goto LABEL_56;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_30:
            *(_DWORD *)(a1 + 44) = v18;
          }
          break;
        case 4u:
          if (v9 != 40) {
            goto LABEL_37;
          }
          v6 |= 0x10u;
          a2 = v8 + 1;
          uint64_t v20 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_3;
          }
          int v21 = *a2;
          uint64_t v20 = v20 + (v21 << 7) - 128;
          if (v21 < 0)
          {
            a2 = (char *)sub_188C138((uint64_t)v8, v20);
            *(void *)(a1 + 48) = v22;
            if (!a2) {
              goto LABEL_56;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_3:
            *(void *)(a1 + 48) = v20;
          }
          continue;
        default:
          goto LABEL_37;
      }
    }
  }
  int v29 = a2 - a3[1].i32[0];
  if (a3[3].i32[1] != v29)
  {
    a2 = sub_188BB90((uint64_t)a3, v29, a3[11].i32[1]);
    if (v30) {
      goto LABEL_64;
    }
    goto LABEL_5;
  }
  if (v29 < 1)
  {
LABEL_64:
    unint64_t v8 = a2;
    goto LABEL_59;
  }
  if (a3[2]) {
    unint64_t v8 = a2;
  }
  else {
    unint64_t v8 = 0;
  }
LABEL_59:
  *(_DWORD *)(a1 + 16) |= v6;
  return v8;
}

unsigned char *sub_10FF894(uint64_t a1, unsigned char *__dst, _DWORD *a3)
{
  int v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*(void *)a3 <= (unint64_t)__dst)
    {
      int v4 = sub_188A3FC((uint64_t)a3, (int)__dst);
      unint64_t v7 = *(void *)(a1 + 24);
      *int v4 = 8;
      v4[1] = v7;
      if (v7 <= 0x7F) {
        goto LABEL_4;
      }
    }
    else
    {
      unint64_t v7 = *(void *)(a1 + 24);
      *long long __dst = 8;
      __dst[1] = v7;
      if (v7 <= 0x7F)
      {
LABEL_4:
        v4 += 2;
        goto LABEL_8;
      }
    }
    v4[1] = v7 | 0x80;
    unint64_t v8 = v7 >> 7;
    v4[2] = v7 >> 7;
    v4 += 3;
    if (v7 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unint64_t v9 = v8 >> 14;
        v8 >>= 7;
        *v4++ = v8;
      }
      while (v9);
    }
  }
LABEL_8:
  if ((v6 & 2) == 0) {
    goto LABEL_15;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    int v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unint64_t v10 = *(void *)(a1 + 32);
    *int v4 = 16;
    v4[1] = v10;
    if (v10 <= 0x7F) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + 32);
    *int v4 = 16;
    v4[1] = v10;
    if (v10 <= 0x7F)
    {
LABEL_11:
      v4 += 2;
      goto LABEL_15;
    }
  }
  v4[1] = v10 | 0x80;
  unint64_t v11 = v10 >> 7;
  v4[2] = v10 >> 7;
  v4 += 3;
  if (v10 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unint64_t v12 = v11 >> 14;
      v11 >>= 7;
      *v4++ = v11;
    }
    while (v12);
  }
LABEL_15:
  if ((v6 & 4) == 0) {
    goto LABEL_22;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    int v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unint64_t v13 = *(int *)(a1 + 40);
    *int v4 = 24;
    v4[1] = v13;
    if (v13 <= 0x7F) {
      goto LABEL_18;
    }
  }
  else
  {
    unint64_t v13 = *(int *)(a1 + 40);
    *int v4 = 24;
    v4[1] = v13;
    if (v13 <= 0x7F)
    {
LABEL_18:
      v4 += 2;
      goto LABEL_22;
    }
  }
  v4[1] = v13 | 0x80;
  unint64_t v14 = v13 >> 7;
  v4[2] = v13 >> 7;
  v4 += 3;
  if (v13 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unint64_t v15 = v14 >> 14;
      v14 >>= 7;
      *v4++ = v14;
    }
    while (v15);
  }
LABEL_22:
  if ((v6 & 8) == 0) {
    goto LABEL_29;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    int v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unint64_t v16 = *(int *)(a1 + 44);
    *int v4 = 32;
    v4[1] = v16;
    if (v16 <= 0x7F) {
      goto LABEL_25;
    }
  }
  else
  {
    unint64_t v16 = *(int *)(a1 + 44);
    *int v4 = 32;
    v4[1] = v16;
    if (v16 <= 0x7F)
    {
LABEL_25:
      v4 += 2;
      goto LABEL_29;
    }
  }
  v4[1] = v16 | 0x80;
  unint64_t v17 = v16 >> 7;
  v4[2] = v16 >> 7;
  v4 += 3;
  if (v16 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unint64_t v18 = v17 >> 14;
      v17 >>= 7;
      *v4++ = v17;
    }
    while (v18);
  }
LABEL_29:
  if ((v6 & 0x10) == 0) {
    goto LABEL_36;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    int v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unint64_t v19 = *(void *)(a1 + 48);
    *int v4 = 40;
    v4[1] = v19;
    if (v19 <= 0x7F) {
      goto LABEL_32;
    }
  }
  else
  {
    unint64_t v19 = *(void *)(a1 + 48);
    *int v4 = 40;
    v4[1] = v19;
    if (v19 <= 0x7F)
    {
LABEL_32:
      v4 += 2;
      goto LABEL_36;
    }
  }
  v4[1] = v19 | 0x80;
  unint64_t v20 = v19 >> 7;
  v4[2] = v19 >> 7;
  v4 += 3;
  if (v19 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unint64_t v21 = v20 >> 14;
      v20 >>= 7;
      *v4++ = v20;
    }
    while (v21);
  }
LABEL_36:
  uint64_t v22 = *(void *)(a1 + 8);
  if ((v22 & 1) == 0) {
    return v4;
  }
  unint64_t v24 = v22 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v24 + 31) < 0)
  {
    uint64_t v25 = *(char **)(v24 + 8);
    uint64_t v26 = *(void *)(v24 + 16);
  }
  else
  {
    uint64_t v25 = (char *)(v24 + 8);
    LODWORD(v26) = *(unsigned __int8 *)(v24 + 31);
  }
  uint64_t v27 = (int)v26;
  if (*(void *)a3 - (void)v4 < (int)v26)
  {
    return (unsigned char *)sub_188A528(a3, v25, v26, v4);
  }
  else
  {
    memcpy(v4, v25, (int)v26);
    return &v4[v27];
  }
}

unint64_t sub_10FFC20(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 0x1F) != 0)
  {
    if (v1)
    {
      unint64_t v2 = ((9 * (__clz(*(void *)(a1 + 24) | 1) ^ 0x3F) + 73) >> 6) + 1;
      if ((v1 & 2) == 0) {
        goto LABEL_9;
      }
    }
    else
    {
      unint64_t v2 = 0;
      if ((v1 & 2) == 0)
      {
LABEL_9:
        if ((v1 & 4) == 0)
        {
          if ((v1 & 8) == 0) {
            goto LABEL_11;
          }
LABEL_18:
          int v6 = *(_DWORD *)(a1 + 44);
          if (v6 < 0)
          {
            v2 += 11;
            if ((v1 & 0x10) != 0) {
              goto LABEL_22;
            }
          }
          else
          {
            v2 += ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
            if ((v1 & 0x10) != 0) {
              goto LABEL_22;
            }
          }
LABEL_12:
          uint64_t v3 = *(void *)(a1 + 8);
          if ((v3 & 1) == 0) {
            goto LABEL_13;
          }
          goto LABEL_23;
        }
        int v5 = *(_DWORD *)(a1 + 40);
        if (v5 < 0)
        {
          v2 += 11;
          if ((v1 & 8) != 0) {
            goto LABEL_18;
          }
        }
        else
        {
          v2 += ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
          if ((v1 & 8) != 0) {
            goto LABEL_18;
          }
        }
LABEL_11:
        if ((v1 & 0x10) == 0) {
          goto LABEL_12;
        }
LABEL_22:
        v2 += ((9 * (__clz(*(void *)(a1 + 48) | 1) ^ 0x3F) + 73) >> 6) + 1;
        uint64_t v3 = *(void *)(a1 + 8);
        if ((v3 & 1) == 0) {
          goto LABEL_13;
        }
        goto LABEL_23;
      }
    }
    v2 += ((9 * (__clz(*(void *)(a1 + 32) | 1) ^ 0x3F) + 73) >> 6) + 1;
    goto LABEL_9;
  }
  unint64_t v2 = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 1) == 0)
  {
LABEL_13:
    *(_DWORD *)(a1 + 20) = v2;
    return v2;
  }
LABEL_23:
  unint64_t v7 = v3 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v7 + 31) < 0) {
    unint64_t v8 = *(void *)(v7 + 16) + v2;
  }
  else {
    unint64_t v8 = *(unsigned __int8 *)(v7 + 31) + v2;
  }
  *(_DWORD *)(a1 + 20) = v8;
  return v8;
}

std::string *sub_10FFD84(std::string *result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 16);
  if ((v2 & 0x1F) == 0) {
    goto LABEL_9;
  }
  if (v2)
  {
    result[1].__r_.__value_.__r.__words[0] = *(void *)(a2 + 24);
    if ((v2 & 2) == 0)
    {
LABEL_4:
      if ((v2 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_13;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_4;
  }
  result[1].__r_.__value_.__l.__size_ = *(void *)(a2 + 32);
  if ((v2 & 4) == 0)
  {
LABEL_5:
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
LABEL_14:
    HIDWORD(result[1].__r_.__value_.__r.__words[2]) = *(_DWORD *)(a2 + 44);
    if ((v2 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_13:
  LODWORD(result[1].__r_.__value_.__r.__words[2]) = *(_DWORD *)(a2 + 40);
  if ((v2 & 8) != 0) {
    goto LABEL_14;
  }
LABEL_6:
  if ((v2 & 0x10) != 0) {
LABEL_7:
  }
    result[2].__r_.__value_.__r.__words[0] = *(void *)(a2 + 48);
LABEL_8:
  LODWORD(result->__r_.__value_.__r.__words[2]) |= v2;
LABEL_9:
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3) {
    return sub_188B4F8((uint64_t *)&result->__r_.__value_.__l.__size_, (v3 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_10FFE08()
{
  return 1;
}

double sub_10FFE10@<D0>(uint64_t a1@<X8>)
{
  int v2 = (char *)operator new(0x30uLL);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_20B93B0;
  strcpy(v2, "geo3.internal.transit.StreetWalkingJourneyLeg");
  return *(double *)"alkingJourneyLeg";
}

void *sub_10FFE64(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_5;
    }
  }
  else if (v4)
  {
    goto LABEL_5;
  }
  sub_10FFF18((uint64_t)a1);
  uint64_t v2 = *v3;
  if (*v3)
  {
    sub_10E4F74(v3);
    uint64_t v2 = *v3;
  }
LABEL_5:
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    int v5 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v5)
      {
LABEL_8:
        sub_1881618();
        operator delete();
      }
    }
    else if (v5)
    {
      goto LABEL_8;
    }
  }
  return a1;
}

uint64_t sub_10FFF18(uint64_t result)
{
  if ((uint64_t (***)())result != &off_24F7E08)
  {
    int v1 = (void *)result;
    uint64_t result = *(void *)(result + 24);
    if (result)
    {
      sub_10FC8E8(result);
      operator delete();
    }
    uint64_t v2 = (void *)v1[4];
    if (v2)
    {
      uint64_t v3 = v2[1];
      if ((v3 & 1) != 0 && !*(void *)(v3 & 0xFFFFFFFFFFFFFFFCLL))
      {
        sub_10E4F74(v2 + 1);
        uint64_t v3 = v2[1];
      }
      *uint64_t v2 = off_24E6998;
      if ((v3 & 2) != 0)
      {
        int v4 = (void *)(v3 & 0xFFFFFFFFFFFFFFFCLL);
        if (v3)
        {
          if (*v4)
          {
LABEL_9:
            sub_1881618();
            operator delete();
          }
        }
        else if (v4)
        {
          goto LABEL_9;
        }
      }
      operator delete();
    }
    int v5 = (void *)v1[5];
    if (v5)
    {
      uint64_t v6 = v5[1];
      if ((v6 & 1) != 0 && !*(void *)(v6 & 0xFFFFFFFFFFFFFFFCLL))
      {
        sub_10E4F74(v5 + 1);
        uint64_t v6 = v5[1];
      }
      *int v5 = off_24E6998;
      if ((v6 & 2) != 0)
      {
        unint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
        if (v6)
        {
          if (*v7)
          {
LABEL_16:
            sub_1881618();
            operator delete();
          }
        }
        else if (v7)
        {
          goto LABEL_16;
        }
      }
      operator delete();
    }
    unint64_t v8 = (void *)v1[6];
    if (v8)
    {
      uint64_t v9 = v8[1];
      if ((v9 & 1) != 0 && !*(void *)(v9 & 0xFFFFFFFFFFFFFFFCLL))
      {
        sub_10E4F74(v8 + 1);
        uint64_t v9 = v8[1];
      }
      *unint64_t v8 = off_24E6998;
      if ((v9 & 2) != 0)
      {
        unint64_t v10 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
        if (v9)
        {
          if (*v10)
          {
LABEL_23:
            sub_1881618();
            operator delete();
          }
        }
        else if (v10)
        {
          goto LABEL_23;
        }
      }
      operator delete();
    }
  }
  return result;
}

void sub_1100174(void *a1)
{
  sub_10FFE64(a1);

  operator delete();
}

uint64_t sub_11001AC(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 0xF) != 0)
  {
    if (v2) {
      uint64_t result = sub_10FCBB4(*(void *)(result + 24));
    }
    if ((v2 & 2) != 0)
    {
      uint64_t v3 = *(void *)(v1 + 32);
      if ((*(unsigned char *)(v3 + 16) & 0x1F) != 0)
      {
        *(void *)(v3 + 24) = 0;
        *(void *)(v3 + 32) = 0;
        *(unsigned char *)(v3 + 48) = 0;
        *(void *)(v3 + 40) = 0;
      }
      char v4 = *(unsigned char *)(v3 + 8);
      uint64_t result = v3 + 8;
      *(_DWORD *)(result + 8) = 0;
      if (v4) {
        uint64_t result = sub_188B4AC((uint64_t *)result);
      }
    }
    if ((v2 & 4) != 0)
    {
      uint64_t v5 = *(void *)(v1 + 40);
      if ((*(unsigned char *)(v5 + 16) & 7) != 0)
      {
        *(void *)(v5 + 24) = 0;
        *(void *)(v5 + 32) = 0;
      }
      char v6 = *(unsigned char *)(v5 + 8);
      uint64_t result = v5 + 8;
      *(_DWORD *)(result + 8) = 0;
      if (v6) {
        uint64_t result = sub_188B4AC((uint64_t *)result);
      }
    }
    if ((v2 & 8) != 0)
    {
      uint64_t v7 = *(void *)(v1 + 48);
      if ((*(unsigned char *)(v7 + 16) & 0x1F) != 0)
      {
        *(_OWORD *)(v7 + 40) = 0u;
        *(_OWORD *)(v7 + 24) = 0u;
      }
      char v8 = *(unsigned char *)(v7 + 8);
      uint64_t result = v7 + 8;
      *(_DWORD *)(result + 8) = 0;
      if (v8) {
        uint64_t result = sub_188B4AC((uint64_t *)result);
      }
    }
  }
  if ((v2 & 0x30) != 0) {
    *(void *)(v1 + 56) = 0;
  }
  char v10 = *(unsigned char *)(v1 + 8);
  uint64_t v9 = v1 + 8;
  *(_DWORD *)(v9 + 8) = 0;
  if (v10)
  {
    return sub_188B4AC((uint64_t *)v9);
  }
  return result;
}

char *sub_11002A4(uint64_t a1, char *a2, int32x2_t *a3)
{
  int v6 = 0;
  uint64_t v7 = (uint64_t *)(a1 + 8);
  while (1)
  {
LABEL_4:
    if ((unint64_t)a2 >= *(void *)a3)
    {
      int v41 = a2 - a3[1].i32[0];
      if (a3[3].i32[1] == v41)
      {
        if (v41 < 1)
        {
LABEL_98:
          char v8 = a2;
        }
        else if (a3[2])
        {
          char v8 = a2;
        }
        else
        {
          char v8 = 0;
        }
        goto LABEL_92;
      }
      a2 = sub_188BB90((uint64_t)a3, v41, a3[11].i32[1]);
      if (v42) {
        goto LABEL_98;
      }
    }
    char v8 = a2 + 1;
    unsigned int v9 = *a2;
    if ((*a2 & 0x80000000) == 0) {
      break;
    }
    unsigned int v13 = v9 + (*v8 << 7);
    unsigned int v9 = v13 - 128;
    if (*v8 < 0)
    {
      char v8 = (char *)sub_188C180((uint64_t)a2, v13 - 128);
      unsigned int v9 = v24;
      unsigned int v10 = (v24 >> 3) - 1;
      if (v10 <= 6) {
        goto LABEL_7;
      }
    }
    else
    {
      char v8 = a2 + 2;
      unsigned int v10 = (v9 >> 3) - 1;
      if (v10 <= 6) {
        goto LABEL_7;
      }
    }
LABEL_40:
    if (v9) {
      BOOL v25 = (v9 & 7) == 4;
    }
    else {
      BOOL v25 = 1;
    }
    if (v25)
    {
      if (v8) {
        a3[10].i32[0] = v9 - 1;
      }
      goto LABEL_92;
    }
    if (*v7)
    {
      a2 = (char *)sub_1885AC0(v9, (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8), v8, a3);
      if (!a2) {
        goto LABEL_93;
      }
    }
    else
    {
      int v43 = (std::string *)sub_188DBD8(v7);
      a2 = (char *)sub_1885AC0(v9, v43, v8, a3);
      if (!a2) {
        goto LABEL_93;
      }
    }
  }
  unsigned int v10 = (v9 >> 3) - 1;
LABEL_7:
  switch(v10)
  {
    case 0u:
      if (v9 != 8) {
        goto LABEL_40;
      }
      a2 = v8 + 1;
      unint64_t v11 = *v8;
      if (*v8 < 0)
      {
        int v26 = v11 + (*a2 << 7);
        unint64_t v11 = (v26 - 128);
        if (*a2 < 0)
        {
          uint64_t v38 = sub_188C138((uint64_t)v8, (v26 - 128));
          if (!v38) {
            goto LABEL_93;
          }
          a2 = (char *)v38;
          unint64_t v11 = v39;
          if (v39 <= 4 && v39 != 1)
          {
LABEL_14:
            *(_DWORD *)(a1 + 16) |= 0x10u;
            *(_DWORD *)(a1 + 56) = v11;
            goto LABEL_4;
          }
        }
        else
        {
          a2 = v8 + 2;
          if (v11 <= 4 && v11 != 1) {
            goto LABEL_14;
          }
        }
      }
      else if (v11 <= 4 && v11 != 1)
      {
        goto LABEL_14;
      }
      if (*v7) {
        int v28 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
      else {
        int v28 = (std::string *)sub_188DBD8(v7);
      }
      sub_188C020(1, v11, v28);
      goto LABEL_4;
    case 1u:
      if (v9 != 18) {
        goto LABEL_40;
      }
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v14 = *(void *)(a1 + 24);
      if (v14)
      {
        int v45 = 0;
        unint64_t v15 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)v8, &v45);
        if (!v15) {
          goto LABEL_74;
        }
LABEL_59:
        uint64_t v31 = sub_10FCC90(v14, v15, a3);
        goto LABEL_72;
      }
      int v29 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
      if (*v7) {
        int v29 = (void *)*v29;
      }
      sub_11035FC((uint64_t)v29);
      uint64_t v14 = v30;
      *(void *)(a1 + 24) = v30;
      int v45 = 0;
      unint64_t v15 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)v8, &v45);
      if (v15) {
        goto LABEL_59;
      }
      goto LABEL_74;
    case 3u:
      if (v9 != 32) {
        goto LABEL_40;
      }
      v6 |= 0x20u;
      a2 = v8 + 1;
      int v16 = *v8;
      if ((*v8 & 0x80000000) == 0) {
        goto LABEL_3;
      }
      int v16 = v16 + (*a2 << 7) - 128;
      if (*a2 < 0)
      {
        a2 = (char *)sub_188C0D0((uint64_t)v8, v16);
        *(_DWORD *)(a1 + 60) = v17;
        if (!a2) {
          goto LABEL_93;
        }
      }
      else
      {
        a2 = v8 + 2;
LABEL_3:
        *(_DWORD *)(a1 + 60) = v16;
      }
      goto LABEL_4;
    case 4u:
      if (v9 != 42) {
        goto LABEL_40;
      }
      *(_DWORD *)(a1 + 16) |= 2u;
      uint64_t v18 = *(void *)(a1 + 32);
      if (v18)
      {
        int v45 = 0;
        unint64_t v19 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)v8, &v45);
        if (!v19) {
          goto LABEL_74;
        }
LABEL_63:
        uint64_t v31 = sub_10FE28C(v18, v19, a3);
        goto LABEL_72;
      }
      unsigned int v32 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
      if (*v7) {
        unsigned int v32 = (void *)*v32;
      }
      sub_1103680((uint64_t)v32);
      uint64_t v18 = v33;
      *(void *)(a1 + 32) = v33;
      int v45 = 0;
      unint64_t v19 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)v8, &v45);
      if (v19) {
        goto LABEL_63;
      }
      goto LABEL_74;
    case 5u:
      if (v9 != 50) {
        goto LABEL_40;
      }
      *(_DWORD *)(a1 + 16) |= 4u;
      unint64_t v20 = *(void **)(a1 + 40);
      if (v20)
      {
        int v45 = 0;
        unint64_t v21 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)v8, &v45);
        if (!v21) {
          goto LABEL_74;
        }
LABEL_67:
        uint64_t v31 = sub_10FECD8((uint64_t)v20, v21, a3);
        goto LABEL_72;
      }
      unint64_t v34 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
      if (*v7) {
        unint64_t v34 = (void *)*v34;
      }
      unint64_t v20 = sub_1103700((uint64_t)v34);
      *(void *)(a1 + 40) = v20;
      int v45 = 0;
      unint64_t v21 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)v8, &v45);
      if (v21) {
        goto LABEL_67;
      }
LABEL_74:
      a2 = 0;
      ++a3[11].i32[0];
      if (a3[10].i32[0]) {
        goto LABEL_93;
      }
LABEL_75:
      int v37 = a3[3].i32[1] + v45;
      a3[3].i32[1] = v37;
      *a3 = (int32x2_t)(*(void *)&a3[1] + (v37 & (v37 >> 31)));
      if (a2) {
        goto LABEL_4;
      }
LABEL_93:
      char v8 = 0;
      break;
    case 6u:
      if (v9 != 58) {
        goto LABEL_40;
      }
      *(_DWORD *)(a1 + 16) |= 8u;
      uint64_t v22 = *(void *)(a1 + 48);
      if (v22)
      {
        int v45 = 0;
        unsigned int v23 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)v8, &v45);
        if (!v23) {
          goto LABEL_74;
        }
      }
      else
      {
        unint64_t v35 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
        if (*v7) {
          unint64_t v35 = (void *)*v35;
        }
        sub_110377C((uint64_t)v35);
        uint64_t v22 = v36;
        *(void *)(a1 + 48) = v36;
        int v45 = 0;
        unsigned int v23 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)v8, &v45);
        if (!v23) {
          goto LABEL_74;
        }
      }
      uint64_t v31 = sub_10FF524(v22, v23, a3);
LABEL_72:
      a2 = v31;
      ++a3[11].i32[0];
      if (a3[10].i32[0]) {
        goto LABEL_93;
      }
      goto LABEL_75;
    default:
      goto LABEL_40;
  }
LABEL_92:
  *(_DWORD *)(a1 + 16) |= v6;
  return v8;
}

unsigned char *sub_1100808(uint64_t a1, unsigned char *__dst, _DWORD *a3)
{
  char v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 0x10) != 0)
  {
    if (*(void *)a3 <= (unint64_t)__dst)
    {
      char v4 = sub_188A3FC((uint64_t)a3, (int)__dst);
      unint64_t v7 = *(int *)(a1 + 56);
      *char v4 = 8;
      v4[1] = v7;
      if (v7 <= 0x7F) {
        goto LABEL_4;
      }
    }
    else
    {
      unint64_t v7 = *(int *)(a1 + 56);
      *long long __dst = 8;
      __dst[1] = v7;
      if (v7 <= 0x7F)
      {
LABEL_4:
        v4 += 2;
        goto LABEL_8;
      }
    }
    v4[1] = v7 | 0x80;
    unint64_t v8 = v7 >> 7;
    v4[2] = v7 >> 7;
    v4 += 3;
    if (v7 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unint64_t v9 = v8 >> 14;
        v8 >>= 7;
        *v4++ = v8;
      }
      while (v9);
    }
  }
LABEL_8:
  if (v6)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v10 = *(void *)(a1 + 24);
    *char v4 = 18;
    unsigned int v11 = *(_DWORD *)(v10 + 20);
    v4[1] = v11;
    if (v11 > 0x7F) {
      unint64_t v12 = sub_188A9CC(v11, v4 + 1);
    }
    else {
      unint64_t v12 = v4 + 2;
    }
    char v4 = sub_10FD350(v10, v12, a3);
  }
  if ((v6 & 0x20) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4)
    {
      char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      unsigned int v13 = *(_DWORD *)(a1 + 60);
      *char v4 = 32;
      v4[1] = v13;
      if (v13 <= 0x7F) {
        goto LABEL_18;
      }
    }
    else
    {
      unsigned int v13 = *(_DWORD *)(a1 + 60);
      *char v4 = 32;
      v4[1] = v13;
      if (v13 <= 0x7F)
      {
LABEL_18:
        v4 += 2;
        goto LABEL_22;
      }
    }
    v4[1] = v13 | 0x80;
    unsigned int v14 = v13 >> 7;
    v4[2] = v13 >> 7;
    v4 += 3;
    if (v13 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unsigned int v15 = v14 >> 14;
        v14 >>= 7;
        *v4++ = v14;
      }
      while (v15);
    }
  }
LABEL_22:
  if ((v6 & 2) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v18 = *(void *)(a1 + 32);
    *char v4 = 42;
    unsigned int v19 = *(_DWORD *)(v18 + 20);
    v4[1] = v19;
    if (v19 > 0x7F)
    {
      unint64_t v20 = sub_188A9CC(v19, v4 + 1);
      char v4 = sub_10FE60C(v18, v20, a3);
      if ((v6 & 4) != 0) {
        goto LABEL_33;
      }
    }
    else
    {
      char v4 = sub_10FE60C(v18, v4 + 2, a3);
      if ((v6 & 4) != 0) {
        goto LABEL_33;
      }
    }
LABEL_24:
    if ((v6 & 8) == 0) {
      goto LABEL_25;
    }
LABEL_39:
    if (*(void *)a3 <= (unint64_t)v4) {
      char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v24 = *(void *)(a1 + 48);
    *char v4 = 58;
    unsigned int v25 = *(_DWORD *)(v24 + 20);
    v4[1] = v25;
    if (v25 > 0x7F) {
      int v26 = sub_188A9CC(v25, v4 + 1);
    }
    else {
      int v26 = v4 + 2;
    }
    char v4 = sub_10FF894(v24, v26, a3);
    uint64_t v16 = *(void *)(a1 + 8);
    if ((v16 & 1) == 0) {
      return v4;
    }
    goto LABEL_45;
  }
  if ((v6 & 4) == 0) {
    goto LABEL_24;
  }
LABEL_33:
  if (*(void *)a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v21 = *(void *)(a1 + 40);
  *char v4 = 50;
  unsigned int v22 = *(_DWORD *)(v21 + 20);
  v4[1] = v22;
  if (v22 > 0x7F)
  {
    unsigned int v23 = sub_188A9CC(v22, v4 + 1);
    char v4 = sub_10FEF68(v21, v23, a3);
    if ((v6 & 8) != 0) {
      goto LABEL_39;
    }
  }
  else
  {
    char v4 = sub_10FEF68(v21, v4 + 2, a3);
    if ((v6 & 8) != 0) {
      goto LABEL_39;
    }
  }
LABEL_25:
  uint64_t v16 = *(void *)(a1 + 8);
  if ((v16 & 1) == 0) {
    return v4;
  }
LABEL_45:
  unint64_t v27 = v16 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v27 + 31) < 0)
  {
    int v28 = *(char **)(v27 + 8);
    uint64_t v29 = *(void *)(v27 + 16);
  }
  else
  {
    int v28 = (char *)(v27 + 8);
    LODWORD(v29) = *(unsigned __int8 *)(v27 + 31);
  }
  uint64_t v30 = (int)v29;
  if (*(void *)a3 - (void)v4 < (int)v29)
  {
    return (unsigned char *)sub_188A528(a3, v28, v29, v4);
  }
  else
  {
    memcpy(v4, v28, (int)v29);
    return &v4[v30];
  }
}

uint64_t sub_1100BBC(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 0x3F) != 0)
  {
    if (v2)
    {
      uint64_t v5 = sub_10FD9E8(*(void *)(a1 + 24));
      uint64_t v3 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v2 & 2) == 0) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v3 = 0;
      if ((v2 & 2) == 0)
      {
LABEL_9:
        if ((v2 & 4) == 0)
        {
          if ((v2 & 8) == 0) {
            goto LABEL_11;
          }
          goto LABEL_34;
        }
        uint64_t v8 = *(void *)(a1 + 40);
        int v9 = *(_DWORD *)(v8 + 16);
        if ((v9 & 7) == 0)
        {
          uint64_t v10 = 0;
          uint64_t v11 = *(void *)(v8 + 8);
          if ((v11 & 1) == 0) {
            goto LABEL_33;
          }
          goto LABEL_44;
        }
        if (v9)
        {
          int v12 = *(_DWORD *)(v8 + 24);
          if (v12 < 0)
          {
            uint64_t v10 = 11;
            if ((v9 & 2) == 0) {
              goto LABEL_29;
            }
          }
          else
          {
            uint64_t v10 = ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
            if ((v9 & 2) == 0) {
              goto LABEL_29;
            }
          }
        }
        else
        {
          uint64_t v10 = 0;
          if ((v9 & 2) == 0) {
            goto LABEL_29;
          }
        }
        int v13 = *(_DWORD *)(v8 + 28);
        if (v13 < 0) {
          uint64_t v14 = 11;
        }
        else {
          uint64_t v14 = ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
        }
        v10 += v14;
LABEL_29:
        if ((v9 & 4) != 0)
        {
          v10 += ((9 * (__clz(*(void *)(v8 + 32) | 1) ^ 0x3F) + 73) >> 6) + 1;
          uint64_t v11 = *(void *)(v8 + 8);
          if ((v11 & 1) == 0) {
            goto LABEL_33;
          }
        }
        else
        {
          uint64_t v11 = *(void *)(v8 + 8);
          if ((v11 & 1) == 0) {
            goto LABEL_33;
          }
        }
LABEL_44:
        unint64_t v20 = v11 & 0xFFFFFFFFFFFFFFFCLL;
        if (*(char *)(v20 + 31) < 0) {
          uint64_t v21 = *(void *)(v20 + 16);
        }
        else {
          uint64_t v21 = *(unsigned __int8 *)(v20 + 31);
        }
        v10 += v21;
LABEL_33:
        *(_DWORD *)(v8 + 20) = v10;
        v3 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
        if ((v2 & 8) == 0)
        {
LABEL_11:
          if ((v2 & 0x10) == 0) {
            goto LABEL_12;
          }
          goto LABEL_35;
        }
LABEL_34:
        unint64_t v15 = sub_10FFC20(*(void *)(a1 + 48));
        v3 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
        if ((v2 & 0x10) == 0)
        {
LABEL_12:
          if ((v2 & 0x20) == 0) {
            goto LABEL_13;
          }
LABEL_39:
          v3 += ((9 * (__clz(*(_DWORD *)(a1 + 60) | 1) ^ 0x1F) + 73) >> 6) + 1;
          uint64_t v4 = *(void *)(a1 + 8);
          if ((v4 & 1) == 0) {
            goto LABEL_14;
          }
          goto LABEL_40;
        }
LABEL_35:
        int v16 = *(_DWORD *)(a1 + 56);
        if (v16 < 0)
        {
          v3 += 11;
          if ((v2 & 0x20) != 0) {
            goto LABEL_39;
          }
        }
        else
        {
          v3 += ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
          if ((v2 & 0x20) != 0) {
            goto LABEL_39;
          }
        }
LABEL_13:
        uint64_t v4 = *(void *)(a1 + 8);
        if ((v4 & 1) == 0) {
          goto LABEL_14;
        }
        goto LABEL_40;
      }
    }
    unint64_t v6 = sub_10FE940(*(void *)(a1 + 32));
    v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    goto LABEL_9;
  }
  uint64_t v3 = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  if ((v4 & 1) == 0)
  {
LABEL_14:
    *(_DWORD *)(a1 + 20) = v3;
    return v3;
  }
LABEL_40:
  unint64_t v17 = v4 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v17 + 31) < 0) {
    uint64_t v18 = *(void *)(v17 + 16);
  }
  else {
    uint64_t v18 = *(unsigned __int8 *)(v17 + 31);
  }
  uint64_t v19 = v18 + v3;
  *(_DWORD *)(a1 + 20) = v19;
  return v19;
}

void sub_1100E70(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 0x3F) == 0) {
    goto LABEL_65;
  }
  if (v4)
  {
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v5 = *(std::string **)(a1 + 24);
    if (!v5)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      unint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6) {
        unint64_t v7 = (void *)*v7;
      }
      sub_11035FC((uint64_t)v7);
      *(void *)(a1 + 24) = v5;
    }
    if (*(void *)(a2 + 24)) {
      uint64_t v8 = *(uint64_t (****)())(a2 + 24);
    }
    else {
      uint64_t v8 = &off_24F7D10;
    }
    sub_10FDDEC(v5, (uint64_t)v8);
  }
  if ((v4 & 2) != 0)
  {
    *(_DWORD *)(a1 + 16) |= 2u;
    uint64_t v9 = *(void *)(a1 + 32);
    if (!v9)
    {
      uint64_t v10 = *(void *)(a1 + 8);
      uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
      if (v10) {
        uint64_t v11 = (void *)*v11;
      }
      sub_1103680((uint64_t)v11);
      *(void *)(a1 + 32) = v9;
    }
    int v12 = *(uint64_t (****)())(a2 + 32);
    if (!v12) {
      int v12 = &off_24F7D70;
    }
    int v13 = *((_DWORD *)v12 + 4);
    if ((v13 & 0x1F) == 0) {
      goto LABEL_26;
    }
    if (v13)
    {
      *(void *)(v9 + 24) = v12[3];
      if ((v13 & 2) == 0)
      {
LABEL_21:
        if ((v13 & 4) == 0) {
          goto LABEL_22;
        }
        goto LABEL_71;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_21;
    }
    *(void *)(v9 + 32) = v12[4];
    if ((v13 & 4) == 0)
    {
LABEL_22:
      if ((v13 & 8) == 0) {
        goto LABEL_23;
      }
      goto LABEL_72;
    }
LABEL_71:
    *(_DWORD *)(v9 + 40) = *((_DWORD *)v12 + 10);
    if ((v13 & 8) == 0)
    {
LABEL_23:
      if ((v13 & 0x10) == 0)
      {
LABEL_25:
        *(_DWORD *)(v9 + 16) |= v13;
LABEL_26:
        unint64_t v14 = (unint64_t)v12[1];
        if (v14) {
          sub_188B4F8((uint64_t *)(v9 + 8), (v14 & 0xFFFFFFFFFFFFFFFCLL) + 8);
        }
        goto LABEL_28;
      }
LABEL_24:
      *(unsigned char *)(v9 + 48) = *((unsigned char *)v12 + 48);
      goto LABEL_25;
    }
LABEL_72:
    *(_DWORD *)(v9 + 44) = *((_DWORD *)v12 + 11);
    if ((v13 & 0x10) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
LABEL_28:
  if ((v4 & 4) == 0) {
    goto LABEL_43;
  }
  *(_DWORD *)(a1 + 16) |= 4u;
  unint64_t v15 = *(void **)(a1 + 40);
  if (!v15)
  {
    uint64_t v16 = *(void *)(a1 + 8);
    unint64_t v17 = (void *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
    if (v16) {
      unint64_t v17 = (void *)*v17;
    }
    unint64_t v15 = sub_1103700((uint64_t)v17);
    *(void *)(a1 + 40) = v15;
  }
  uint64_t v18 = *(uint64_t (****)())(a2 + 40);
  if (!v18) {
    uint64_t v18 = &off_24F7DA8;
  }
  int v19 = *((_DWORD *)v18 + 4);
  if ((v19 & 7) != 0)
  {
    if (v19)
    {
      *((_DWORD *)v15 + 6) = *((_DWORD *)v18 + 6);
      if ((v19 & 2) == 0)
      {
LABEL_38:
        if ((v19 & 4) == 0)
        {
LABEL_40:
          *((_DWORD *)v15 + 4) |= v19;
          goto LABEL_41;
        }
LABEL_39:
        v15[4] = v18[4];
        goto LABEL_40;
      }
    }
    else if ((v19 & 2) == 0)
    {
      goto LABEL_38;
    }
    *((_DWORD *)v15 + 7) = *((_DWORD *)v18 + 7);
    if ((v19 & 4) == 0) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
LABEL_41:
  unint64_t v20 = (unint64_t)v18[1];
  if (v20) {
    sub_188B4F8(v15 + 1, (v20 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
LABEL_43:
  if ((v4 & 8) != 0)
  {
    *(_DWORD *)(a1 + 16) |= 8u;
    uint64_t v21 = *(void *)(a1 + 48);
    if (!v21)
    {
      uint64_t v22 = *(void *)(a1 + 8);
      unsigned int v23 = (void *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
      if (v22) {
        unsigned int v23 = (void *)*v23;
      }
      sub_110377C((uint64_t)v23);
      *(void *)(a1 + 48) = v21;
    }
    uint64_t v24 = *(uint64_t (****)())(a2 + 48);
    if (!v24) {
      uint64_t v24 = &off_24F7DD0;
    }
    int v25 = *((_DWORD *)v24 + 4);
    if ((v25 & 0x1F) == 0) {
      goto LABEL_58;
    }
    if (v25)
    {
      *(void *)(v21 + 24) = v24[3];
      if ((v25 & 2) == 0)
      {
LABEL_53:
        if ((v25 & 4) == 0) {
          goto LABEL_54;
        }
        goto LABEL_79;
      }
    }
    else if ((v25 & 2) == 0)
    {
      goto LABEL_53;
    }
    *(void *)(v21 + 32) = v24[4];
    if ((v25 & 4) == 0)
    {
LABEL_54:
      if ((v25 & 8) == 0) {
        goto LABEL_55;
      }
      goto LABEL_80;
    }
LABEL_79:
    *(_DWORD *)(v21 + 40) = *((_DWORD *)v24 + 10);
    if ((v25 & 8) == 0)
    {
LABEL_55:
      if ((v25 & 0x10) == 0)
      {
LABEL_57:
        *(_DWORD *)(v21 + 16) |= v25;
LABEL_58:
        unint64_t v26 = (unint64_t)v24[1];
        if (v26) {
          sub_188B4F8((uint64_t *)(v21 + 8), (v26 & 0xFFFFFFFFFFFFFFFCLL) + 8);
        }
        goto LABEL_60;
      }
LABEL_56:
      *(void *)(v21 + 48) = v24[6];
      goto LABEL_57;
    }
LABEL_80:
    *(_DWORD *)(v21 + 44) = *((_DWORD *)v24 + 11);
    if ((v25 & 0x10) == 0) {
      goto LABEL_57;
    }
    goto LABEL_56;
  }
LABEL_60:
  if ((v4 & 0x10) != 0) {
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  }
  if ((v4 & 0x20) != 0) {
    *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  }
  *(_DWORD *)(a1 + 16) |= v4;
LABEL_65:
  uint64_t v27 = *(void *)(a2 + 8);
  if (v27)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v27 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

uint64_t sub_1101184()
{
  return 1;
}

char *sub_110118C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_20B9390;
  strcpy(result, "geo3.internal.transit.JourneyLeg");
  return result;
}

void *sub_11011D8(void *a1)
{
  uint64_t v4 = a1[1];
  int v2 = a1 + 1;
  uint64_t v3 = v4;
  if ((v4 & 1) != 0 && !*(void *)(v3 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(v2);
  }
  uint64_t v5 = (unsigned int *)a1[5];
  if (v5 && !a1[3])
  {
    uint64_t v8 = (void **)(v5 + 2);
    uint64_t v9 = *v5;
    if ((int)v9 >= 1)
    {
      do
      {
        if (*v8)
        {
          sub_10FFE64(*v8);
          operator delete();
        }
        ++v8;
        --v9;
      }
      while (v9);
      uint64_t v5 = (unsigned int *)a1[5];
    }
    operator delete(v5);
    a1[5] = 0;
    *a1 = off_24E6998;
    uint64_t v6 = a1[1];
    if ((v6 & 2) == 0) {
      return a1;
    }
  }
  else
  {
    a1[5] = 0;
    *a1 = off_24E6998;
    uint64_t v6 = a1[1];
    if ((v6 & 2) == 0) {
      return a1;
    }
  }
  unint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
  if (v6)
  {
    if (*v7)
    {
LABEL_7:
      sub_1881618();
      operator delete();
    }
  }
  else if (v7)
  {
    goto LABEL_7;
  }
  return a1;
}

void sub_1101318(void *a1)
{
  sub_11011D8(a1);

  operator delete();
}

uint64_t sub_1101350(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 32);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(result + 40) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_11001AC(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 32) = 0;
  }
  char v6 = *(unsigned char *)(v1 + 8);
  uint64_t v5 = v1 + 8;
  *(_DWORD *)(v5 + 40) = 0;
  *(_DWORD *)(v5 + 8) = 0;
  if (v6)
  {
    return sub_188B4AC((uint64_t *)v5);
  }
  return result;
}

char *sub_11013D4(uint64_t a1, char *a2, int32x2_t *a3)
{
  char v6 = (uint64_t *)(a1 + 24);
  unint64_t v7 = (uint64_t *)(a1 + 8);
  while (1)
  {
    while (1)
    {
LABEL_2:
      if ((unint64_t)a2 >= *(void *)a3)
      {
        int v25 = a2 - a3[1].i32[0];
        if (a3[3].i32[1] == v25)
        {
          if (v25 >= 1 && !*(void *)&a3[2]) {
            return 0;
          }
          return a2;
        }
        a2 = sub_188BB90((uint64_t)a3, v25, a3[11].i32[1]);
        if (v26) {
          return a2;
        }
      }
      uint64_t v8 = a2 + 1;
      unsigned int v9 = *a2;
      if ((*a2 & 0x80000000) == 0)
      {
        unsigned int v10 = v9 >> 3;
        if (v9 >> 3 == 2) {
          goto LABEL_16;
        }
        goto LABEL_5;
      }
      unsigned int v12 = v9 + (*v8 << 7);
      unsigned int v9 = v12 - 128;
      if (*v8 < 0)
      {
        uint64_t v8 = (char *)sub_188C180((uint64_t)a2, v12 - 128);
        unsigned int v9 = v21;
        unsigned int v10 = v21 >> 3;
        if (v21 >> 3 != 2) {
          goto LABEL_5;
        }
LABEL_16:
        if (v9 != 18) {
          break;
        }
        a2 = v8 - 1;
        while (1)
        {
          int v13 = *(_DWORD **)(a1 + 40);
          if (v13 && (uint64_t v14 = *(int *)(a1 + 32), (int)v14 < *v13))
          {
            *(_DWORD *)(a1 + 32) = v14 + 1;
            uint64_t v15 = *(void *)&v13[2 * v14 + 2];
            int v29 = 0;
            uint64_t v16 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)a2 + 1, &v29);
            if (v16) {
              goto LABEL_24;
            }
          }
          else
          {
            sub_11037FC(*v6);
            uint64_t v15 = sub_188CDC8((uint64_t)v6, v17);
            int v29 = 0;
            uint64_t v16 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)a2 + 1, &v29);
            if (v16)
            {
LABEL_24:
              a2 = sub_11002A4(v15, v16, a3);
              ++a3[11].i32[0];
              if (a3[10].i32[0]) {
                return 0;
              }
              goto LABEL_25;
            }
          }
          a2 = 0;
          ++a3[11].i32[0];
          if (a3[10].i32[0]) {
            return 0;
          }
LABEL_25:
          int v18 = a3[3].i32[1] + v29;
          a3[3].i32[1] = v18;
          int32x2_t v19 = (int32x2_t)(*(void *)&a3[1] + (v18 & (v18 >> 31)));
          *a3 = v19;
          if (!a2) {
            return a2;
          }
          if (*(void *)&v19 <= (unint64_t)a2 || *a2 != 18) {
            goto LABEL_2;
          }
        }
      }
      uint64_t v8 = a2 + 2;
      unsigned int v10 = v9 >> 3;
      if (v9 >> 3 == 2) {
        goto LABEL_16;
      }
LABEL_5:
      if (v10 != 1 || v9 != 8) {
        break;
      }
      a2 = v8 + 1;
      unint64_t v20 = *v8;
      if (*v8 < 0)
      {
        int v22 = v20 + (*a2 << 7);
        unint64_t v20 = (v22 - 128);
        if (*a2 < 0)
        {
          a2 = (char *)sub_188C138((uint64_t)v8, (v22 - 128));
          if (!a2) {
            return a2;
          }
          unint64_t v20 = v24;
          if (v24 > 1) {
            goto LABEL_36;
          }
        }
        else
        {
          a2 = v8 + 2;
          if (v20 > 1) {
            goto LABEL_36;
          }
        }
LABEL_31:
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 48) = v20;
      }
      else
      {
        if (v20 <= 1) {
          goto LABEL_31;
        }
LABEL_36:
        if (*v7) {
          unsigned int v23 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
        }
        else {
          unsigned int v23 = (std::string *)sub_188DBD8(v7);
        }
        sub_188C020(1, v20, v23);
      }
    }
    if (!v9 || (v9 & 7) == 4) {
      break;
    }
    if (*v7)
    {
      a2 = (char *)sub_1885AC0(v9, (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8), v8, a3);
      if (!a2) {
        return a2;
      }
    }
    else
    {
      uint64_t v27 = (std::string *)sub_188DBD8(v7);
      a2 = (char *)sub_1885AC0(v9, v27, v8, a3);
      if (!a2) {
        return a2;
      }
    }
  }
  if (!v8) {
    return 0;
  }
  a3[10].i32[0] = v9 - 1;
  return v8;
}

unsigned char *sub_1101708(uint64_t a1, unsigned char *__dst, _DWORD *a3)
{
  uint64_t v4 = __dst;
  if (*(unsigned char *)(a1 + 16))
  {
    if (*(void *)a3 <= (unint64_t)__dst)
    {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)__dst);
      unint64_t v6 = *(int *)(a1 + 48);
      *uint64_t v4 = 8;
      v4[1] = v6;
      if (v6 <= 0x7F) {
        goto LABEL_4;
      }
    }
    else
    {
      unint64_t v6 = *(int *)(a1 + 48);
      *long long __dst = 8;
      __dst[1] = v6;
      if (v6 <= 0x7F)
      {
LABEL_4:
        v4 += 2;
        goto LABEL_8;
      }
    }
    v4[1] = v6 | 0x80;
    unint64_t v7 = v6 >> 7;
    v4[2] = v6 >> 7;
    v4 += 3;
    if (v6 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unint64_t v8 = v7 >> 14;
        v7 >>= 7;
        *v4++ = v7;
      }
      while (v8);
    }
  }
LABEL_8:
  int v9 = *(_DWORD *)(a1 + 32);
  if (v9)
  {
    for (int i = 0; i != v9; ++i)
    {
      if (*(void *)a3 <= (unint64_t)v4) {
        uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8 * i + 8);
      *uint64_t v4 = 18;
      unsigned int v13 = *(_DWORD *)(v12 + 20);
      v4[1] = v13;
      if (v13 > 0x7F) {
        uint64_t v11 = sub_188A9CC(v13, v4 + 1);
      }
      else {
        uint64_t v11 = v4 + 2;
      }
      uint64_t v4 = sub_1100808(v12, v11, a3);
    }
  }
  uint64_t v14 = *(void *)(a1 + 8);
  if ((v14 & 1) == 0) {
    return v4;
  }
  unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v16 + 31) < 0)
  {
    uint64_t v17 = *(void **)(v16 + 8);
    uint64_t v18 = *(void *)(v16 + 16);
  }
  else
  {
    uint64_t v17 = (void *)(v16 + 8);
    LODWORD(v18) = *(unsigned __int8 *)(v16 + 31);
  }
  uint64_t v19 = (int)v18;
  if (*(void *)a3 - (void)v4 >= (int)v18)
  {
    memcpy(v4, v17, (int)v18);
    v4 += v19;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v17, v18, v4);
}

uint64_t sub_11018E0(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = (uint64_t *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (!v2)
  {
    uint64_t v2 = 0;
    if ((*(unsigned char *)(a1 + 16) & 1) == 0) {
      goto LABEL_8;
    }
LABEL_11:
    int v10 = *(_DWORD *)(a1 + 48);
    if (v10 < 0)
    {
      v2 += 11;
      uint64_t v8 = *(void *)(a1 + 8);
      if ((v8 & 1) == 0) {
        goto LABEL_9;
      }
    }
    else
    {
      v2 += ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
      uint64_t v8 = *(void *)(a1 + 8);
      if ((v8 & 1) == 0) {
        goto LABEL_9;
      }
    }
    goto LABEL_15;
  }
  uint64_t v5 = 8 * v2;
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v7 = sub_1100BBC(v6);
    v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
    v5 -= 8;
  }
  while (v5);
  if (*(unsigned char *)(a1 + 16)) {
    goto LABEL_11;
  }
LABEL_8:
  uint64_t v8 = *(void *)(a1 + 8);
  if ((v8 & 1) == 0)
  {
LABEL_9:
    *(_DWORD *)(a1 + 20) = v2;
    return v2;
  }
LABEL_15:
  unint64_t v11 = v8 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v11 + 31) < 0) {
    uint64_t v12 = *(void *)(v11 + 16);
  }
  else {
    uint64_t v12 = *(unsigned __int8 *)(v11 + 31);
  }
  uint64_t v13 = v12 + v2;
  *(_DWORD *)(a1 + 20) = v13;
  return v13;
}

void sub_11019F0(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 40) + 8);
    uint64_t v6 = (uint64_t *)sub_188CCE4(a1 + 24, *(_DWORD *)(a2 + 32));
    sub_1104084((uint64_t *)(a1 + 24), v6, v5, v4, **(_DWORD **)(a1 + 40) - *(_DWORD *)(a1 + 32));
    int v7 = *(_DWORD *)(a1 + 32) + v4;
    *(_DWORD *)(a1 + 32) = v7;
    uint64_t v8 = *(int **)(a1 + 40);
    if (*v8 < v7) {
      *uint64_t v8 = v7;
    }
  }
  if (*(unsigned char *)(a2 + 16))
  {
    int v9 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_DWORD *)(a1 + 48) = v9;
  }
  uint64_t v10 = *(void *)(a2 + 8);
  if (v10)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v10 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

uint64_t sub_1101ADC()
{
  return 1;
}

char *sub_1101AE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_20B8FD0;
  strcpy(result, "geo3.internal.transit.JourneySegment");
  return result;
}

void *sub_1101B3C(void *a1)
{
  uint64_t v4 = a1[1];
  uint64_t v2 = a1 + 1;
  uint64_t v3 = v4;
  if ((v4 & 1) != 0 && !*(void *)(v3 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(v2);
  }
  uint64_t v5 = (unsigned int *)a1[4];
  if (v5 && !a1[2])
  {
    uint64_t v8 = (void **)(v5 + 2);
    uint64_t v9 = *v5;
    if ((int)v9 >= 1)
    {
      do
      {
        if (*v8)
        {
          sub_11011D8(*v8);
          operator delete();
        }
        ++v8;
        --v9;
      }
      while (v9);
      uint64_t v5 = (unsigned int *)a1[4];
    }
    operator delete(v5);
    a1[4] = 0;
    *a1 = off_24E6998;
    uint64_t v6 = a1[1];
    if ((v6 & 2) == 0) {
      return a1;
    }
  }
  else
  {
    a1[4] = 0;
    *a1 = off_24E6998;
    uint64_t v6 = a1[1];
    if ((v6 & 2) == 0) {
      return a1;
    }
  }
  int v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
  if (v6)
  {
    if (*v7)
    {
LABEL_7:
      sub_1881618();
      operator delete();
    }
  }
  else if (v7)
  {
    goto LABEL_7;
  }
  return a1;
}

void sub_1101C7C(void *a1)
{
  sub_1101B3C(a1);

  operator delete();
}

uint64_t sub_1101CB4(uint64_t a1)
{
  uint64_t result = sub_1103E5C(a1 + 16);
  char v4 = *(unsigned char *)(a1 + 8);
  uint64_t v3 = (uint64_t *)(a1 + 8);
  if (v4)
  {
    return sub_188B4AC(v3);
  }
  return result;
}

char *sub_1101D04(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v6 = (uint64_t *)(a1 + 8);
  int v7 = (uint64_t *)(a1 + 16);
  while (1)
  {
LABEL_2:
    if ((unint64_t)a2 >= *(void *)a3)
    {
      int v20 = a2 - a3[1].i32[0];
      if (a3[3].i32[1] == v20)
      {
        if (v20 >= 1 && !*(void *)&a3[2]) {
          return 0;
        }
        return a2;
      }
      a2 = sub_188BB90((uint64_t)a3, v20, a3[11].i32[1]);
      if (v21) {
        return a2;
      }
    }
    uint64_t v8 = a2 + 1;
    unsigned int v9 = *a2;
    if ((*a2 & 0x80000000) == 0)
    {
      if (v9 == 10) {
        goto LABEL_14;
      }
      goto LABEL_5;
    }
    unsigned int v11 = v9 + (*v8 << 7);
    unsigned int v9 = v11 - 128;
    if (*v8 < 0)
    {
      uint64_t v8 = (char *)sub_188C180((uint64_t)a2, v11 - 128);
      unsigned int v9 = v19;
      if (v19 != 10) {
        goto LABEL_5;
      }
LABEL_14:
      a2 = v8 - 1;
      while (1)
      {
        uint64_t v12 = *(_DWORD **)(a1 + 32);
        if (v12 && (uint64_t v13 = *(int *)(a1 + 24), (int)v13 < *v12))
        {
          *(_DWORD *)(a1 + 24) = v13 + 1;
          uint64_t v14 = *(void *)&v12[2 * v13 + 2];
          int v24 = 0;
          uint64_t v15 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)a2 + 1, &v24);
          if (v15) {
            goto LABEL_21;
          }
        }
        else
        {
          uint64_t v16 = sub_110387C(*v7);
          uint64_t v14 = sub_188CDC8((uint64_t)v7, v16);
          int v24 = 0;
          uint64_t v15 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)a2 + 1, &v24);
          if (v15)
          {
LABEL_21:
            a2 = sub_11013D4(v14, v15, a3);
            ++a3[11].i32[0];
            if (a3[10].i32[0]) {
              return 0;
            }
            goto LABEL_22;
          }
        }
        a2 = 0;
        ++a3[11].i32[0];
        if (a3[10].i32[0]) {
          return 0;
        }
LABEL_22:
        int v17 = a3[3].i32[1] + v24;
        a3[3].i32[1] = v17;
        int32x2_t v18 = (int32x2_t)(*(void *)&a3[1] + (v17 & (v17 >> 31)));
        *a3 = v18;
        if (!a2) {
          return a2;
        }
        if (*(void *)&v18 <= (unint64_t)a2 || *a2 != 10) {
          goto LABEL_2;
        }
      }
    }
    uint64_t v8 = a2 + 2;
    if (v11 == 138) {
      goto LABEL_14;
    }
LABEL_5:
    if (!v9 || (v9 & 7) == 4) {
      break;
    }
    if (*v6)
    {
      a2 = (char *)sub_1885AC0(v9, (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8), v8, a3);
      if (!a2) {
        return a2;
      }
    }
    else
    {
      int v22 = (std::string *)sub_188DBD8(v6);
      a2 = (char *)sub_1885AC0(v9, v22, v8, a3);
      if (!a2) {
        return a2;
      }
    }
  }
  if (!v8) {
    return 0;
  }
  a3[10].i32[0] = v9 - 1;
  return v8;
}

char *sub_1101F70(uint64_t a1, char *__dst, _DWORD *a3)
{
  int v6 = *(_DWORD *)(a1 + 24);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
    {
      if (*(void *)a3 <= (unint64_t)__dst) {
        long long __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      }
      uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8 * i + 8);
      *long long __dst = 10;
      unsigned int v10 = *(_DWORD *)(v9 + 20);
      __dst[1] = v10;
      if (v10 > 0x7F) {
        uint64_t v8 = sub_188A9CC(v10, __dst + 1);
      }
      else {
        uint64_t v8 = __dst + 2;
      }
      long long __dst = sub_1101708(v9, v8, a3);
    }
  }
  uint64_t v11 = *(void *)(a1 + 8);
  if ((v11 & 1) == 0) {
    return __dst;
  }
  unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v13 + 31) < 0)
  {
    uint64_t v14 = *(void **)(v13 + 8);
    uint64_t v15 = *(void *)(v13 + 16);
  }
  else
  {
    uint64_t v14 = (void *)(v13 + 8);
    LODWORD(v15) = *(unsigned __int8 *)(v13 + 31);
  }
  uint64_t v16 = (int)v15;
  if (*(void *)a3 - (void)__dst >= (int)v15)
  {
    memcpy(__dst, v14, (int)v15);
    __dst += v16;
    return __dst;
  }

  return (char *)sub_188A528(a3, (char *)v14, v15, __dst);
}

uint64_t sub_11020B4(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    char v4 = (uint64_t *)(v3 + 8);
  }
  else {
    char v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = &v4[v2];
    while (1)
    {
      uint64_t v6 = *v4;
      uint64_t v7 = *(int *)(*v4 + 32);
      uint64_t v8 = *(void *)(*v4 + 40);
      if (v8) {
        uint64_t v9 = (uint64_t *)(v8 + 8);
      }
      else {
        uint64_t v9 = 0;
      }
      if (v7)
      {
        uint64_t v10 = 8 * v7;
        do
        {
          uint64_t v11 = *v9++;
          uint64_t v12 = sub_1100BBC(v11);
          v7 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
          v10 -= 8;
        }
        while (v10);
        if (*(unsigned char *)(v6 + 16))
        {
LABEL_15:
          int v13 = *(_DWORD *)(v6 + 48);
          if (v13 < 0) {
            uint64_t v14 = 11;
          }
          else {
            uint64_t v14 = ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
          }
          v7 += v14;
        }
      }
      else
      {
        uint64_t v7 = 0;
        if (*(unsigned char *)(v6 + 16)) {
          goto LABEL_15;
        }
      }
      uint64_t v15 = *(void *)(v6 + 8);
      if (v15)
      {
        unint64_t v16 = v15 & 0xFFFFFFFFFFFFFFFCLL;
        if (*(char *)(v16 + 31) < 0) {
          uint64_t v17 = *(void *)(v16 + 16);
        }
        else {
          uint64_t v17 = *(unsigned __int8 *)(v16 + 31);
        }
        v7 += v17;
      }
      *(_DWORD *)(v6 + 20) = v7;
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      if (++v4 == v5) {
        goto LABEL_27;
      }
    }
  }
  uint64_t v2 = 0;
LABEL_27:
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18)
  {
    unint64_t v20 = v18 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v20 + 31) < 0) {
      uint64_t v21 = *(void *)(v20 + 16);
    }
    else {
      uint64_t v21 = *(unsigned __int8 *)(v20 + 31);
    }
    v2 += v21;
  }
  *(_DWORD *)(a1 + 40) = v2;
  return v2;
}

void sub_1102230(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 32) + 8);
    uint64_t v6 = (uint64_t *)sub_188CCE4(a1 + 16, *(_DWORD *)(a2 + 24));
    sub_1104110((uint64_t *)(a1 + 16), v6, v5, v4, **(_DWORD **)(a1 + 32) - *(_DWORD *)(a1 + 24));
    int v7 = *(_DWORD *)(a1 + 24) + v4;
    *(_DWORD *)(a1 + 24) = v7;
    uint64_t v8 = *(int **)(a1 + 32);
    if (*v8 < v7) {
      *uint64_t v8 = v7;
    }
  }
  uint64_t v9 = *(void *)(a2 + 8);
  if (v9)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v9 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

uint64_t sub_1102300()
{
  return 1;
}

double sub_1102308@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_20B9A40;
  strcpy(v2, "geo3.internal.transit.JourneySegmentBundle");
  return *(double *)"neySegmentBundle";
}

uint64_t sub_110235C(uint64_t a1)
{
  uint64_t v3 = (void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_10;
    }
  }
  else if (v4)
  {
    goto LABEL_10;
  }
  if ((uint64_t (***)())a1 != &off_24F7E48)
  {
    uint64_t v5 = *(void **)(a1 + 48);
    if (v5)
    {
      sub_11043C4(v5);
      operator delete();
    }
    uint64_t v6 = *(void **)(a1 + 56);
    if (v6)
    {
      sub_11043C4(v6);
      operator delete();
    }
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_10:
  int v7 = *(unsigned int **)(a1 + 40);
  if (v7 && !*(void *)(a1 + 24))
  {
    uint64_t v10 = (void **)(v7 + 2);
    uint64_t v11 = *v7;
    if ((int)v11 >= 1)
    {
      do
      {
        if (*v10)
        {
          sub_1101B3C(*v10);
          operator delete();
        }
        ++v10;
        --v11;
      }
      while (v11);
      int v7 = *(unsigned int **)(a1 + 40);
    }
    operator delete(v7);
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = off_24E6998;
    uint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & 2) == 0) {
      return a1;
    }
  }
  else
  {
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = off_24E6998;
    uint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & 2) == 0) {
      return a1;
    }
  }
  uint64_t v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
  if (v8)
  {
    if (*v9)
    {
LABEL_15:
      sub_1881618();
      operator delete();
    }
  }
  else if (v9)
  {
    goto LABEL_15;
  }
  return a1;
}

void sub_1102500(uint64_t a1)
{
  sub_110235C(a1);

  operator delete();
}

uint64_t sub_1102538(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 32);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(result + 40) + 8);
    do
    {
      uint64_t v4 = *v3;
      uint64_t result = sub_1103E5C(*v3 + 16);
      char v6 = *(unsigned char *)(v4 + 8);
      uint64_t v5 = (uint64_t *)(v4 + 8);
      if (v6) {
        uint64_t result = sub_188B4AC(v5);
      }
      ++v3;
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 32) = 0;
  }
  int v7 = *(_DWORD *)(v1 + 16);
  if ((v7 & 3) != 0)
  {
    if (v7) {
      uint64_t result = sub_1104524(*(void *)(v1 + 48));
    }
    if ((v7 & 2) != 0) {
      uint64_t result = sub_1104524(*(void *)(v1 + 56));
    }
  }
  if ((v7 & 0x3C) != 0)
  {
    *(void *)(v1 + 64) = 0;
    *(void *)(v1 + 72) = 0;
  }
  char v9 = *(unsigned char *)(v1 + 8);
  uint64_t v8 = v1 + 8;
  *(_DWORD *)(v8 + 8) = 0;
  if (v9)
  {
    return sub_188B4AC((uint64_t *)v8);
  }
  return result;
}

unsigned __int8 *sub_1102608(uint64_t a1, unsigned __int8 *a2, int32x2_t *a3)
{
  int v6 = 0;
  int v7 = (uint64_t *)(a1 + 8);
  uint64_t v8 = (uint64_t *)(a1 + 24);
  while (1)
  {
LABEL_5:
    if ((unint64_t)a2 < *(void *)a3) {
      goto LABEL_6;
    }
    int v41 = a2 - a3[1].i32[0];
    if (a3[3].i32[1] == v41) {
      break;
    }
    a2 = (unsigned __int8 *)sub_188BB90((uint64_t)a3, v41, a3[11].i32[1]);
    if (v42) {
      goto LABEL_99;
    }
LABEL_6:
    uint64_t v11 = a2 + 1;
    unsigned int v12 = *a2;
    if (((char)*a2 & 0x80000000) == 0)
    {
      unsigned int v13 = (v12 >> 3) - 1;
LABEL_8:
      switch(v13)
      {
        case 0u:
          if (v12 != 10) {
            goto LABEL_26;
          }
          a2 = v11 - 1;
          break;
        case 1u:
          if (v12 != 16) {
            goto LABEL_26;
          }
          v6 |= 4u;
          a2 = v11 + 1;
          LODWORD(v24) = *v11;
          if ((v24 & 0x80) == 0) {
            goto LABEL_37;
          }
          uint64_t v24 = v24 + (*a2 << 7) - 128;
          if ((char)*a2 < 0)
          {
            a2 = (unsigned __int8 *)sub_188C138((uint64_t)v11, v24);
            *(_DWORD *)(a1 + 64) = v36;
            if (!a2) {
              goto LABEL_93;
            }
          }
          else
          {
            a2 = v11 + 2;
LABEL_37:
            *(_DWORD *)(a1 + 64) = v24;
          }
          continue;
        case 2u:
          if (v12 != 24) {
            goto LABEL_26;
          }
          v6 |= 8u;
          a2 = v11 + 1;
          LODWORD(v25) = *v11;
          if ((v25 & 0x80) == 0) {
            goto LABEL_42;
          }
          uint64_t v25 = v25 + (*a2 << 7) - 128;
          if ((char)*a2 < 0)
          {
            a2 = (unsigned __int8 *)sub_188C138((uint64_t)v11, v25);
            *(_DWORD *)(a1 + 68) = v37;
            if (!a2) {
              goto LABEL_93;
            }
          }
          else
          {
            a2 = v11 + 2;
LABEL_42:
            *(_DWORD *)(a1 + 68) = v25;
          }
          continue;
        case 3u:
          if (v12 != 34) {
            goto LABEL_26;
          }
          *(_DWORD *)(a1 + 16) |= 1u;
          char v26 = *(void **)(a1 + 48);
          if (v26)
          {
            int v46 = 0;
            uint64_t v27 = (char *)sub_188BEE0((uint64_t)a3, v11, &v46);
            if (!v27) {
              goto LABEL_2;
            }
          }
          else
          {
            unsigned int v32 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
            if (*v7) {
              unsigned int v32 = (void *)*v32;
            }
            char v26 = sub_1104EA8((uint64_t)v32);
            *(void *)(a1 + 48) = v26;
            int v46 = 0;
            uint64_t v27 = (char *)sub_188BEE0((uint64_t)a3, v11, &v46);
            if (!v27)
            {
LABEL_2:
              a2 = 0;
              ++a3[11].i32[0];
              if (a3[10].i32[0]) {
                goto LABEL_93;
              }
              goto LABEL_3;
            }
          }
          a2 = (unsigned __int8 *)sub_1104548(v26, v27, a3);
          ++a3[11].i32[0];
          if (a3[10].i32[0]) {
            goto LABEL_93;
          }
LABEL_3:
          int v9 = v46;
          goto LABEL_4;
        case 4u:
          if (v12 != 42) {
            goto LABEL_26;
          }
          *(_DWORD *)(a1 + 16) |= 2u;
          int v28 = *(void **)(a1 + 56);
          if (v28)
          {
            int v47 = 0;
            int v29 = (char *)sub_188BEE0((uint64_t)a3, v11, &v47);
            if (v29) {
              goto LABEL_50;
            }
          }
          else
          {
            uint64_t v33 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
            if (*v7) {
              uint64_t v33 = (void *)*v33;
            }
            int v28 = sub_1104EA8((uint64_t)v33);
            *(void *)(a1 + 56) = v28;
            int v47 = 0;
            int v29 = (char *)sub_188BEE0((uint64_t)a3, v11, &v47);
            if (v29)
            {
LABEL_50:
              a2 = (unsigned __int8 *)sub_1104548(v28, v29, a3);
              ++a3[11].i32[0];
              if (a3[10].i32[0]) {
                goto LABEL_93;
              }
              goto LABEL_70;
            }
          }
          a2 = 0;
          ++a3[11].i32[0];
          if (a3[10].i32[0]) {
            goto LABEL_93;
          }
LABEL_70:
          int v9 = v47;
LABEL_4:
          int v10 = a3[3].i32[1] + v9;
          a3[3].i32[1] = v10;
          *a3 = (int32x2_t)(*(void *)&a3[1] + (v10 & (v10 >> 31)));
          if (!a2) {
            goto LABEL_93;
          }
          continue;
        case 6u:
          if (v12 != 56) {
            goto LABEL_26;
          }
          a2 = v11 + 1;
          unint64_t v30 = *v11;
          if ((char)*v11 < 0)
          {
            int v34 = v30 + (*a2 << 7);
            unint64_t v30 = (v34 - 128);
            if ((char)*a2 < 0)
            {
              uint64_t v39 = sub_188C138((uint64_t)v11, (v34 - 128));
              if (!v39) {
                goto LABEL_93;
              }
              a2 = (unsigned __int8 *)v39;
              unint64_t v30 = v40;
              if (v40 <= 2)
              {
LABEL_55:
                *(_DWORD *)(a1 + 16) |= 0x10u;
                *(_DWORD *)(a1 + 72) = v30;
                continue;
              }
            }
            else
            {
              a2 = v11 + 2;
              if (v30 <= 2) {
                goto LABEL_55;
              }
            }
          }
          else if (v30 <= 2)
          {
            goto LABEL_55;
          }
          if (*v7) {
            unint64_t v35 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            unint64_t v35 = (std::string *)sub_188DBD8(v7);
          }
          sub_188C020(7, v30, v35);
          continue;
        case 7u:
          if (v12 != 64) {
            goto LABEL_26;
          }
          v6 |= 0x20u;
          a2 = v11 + 1;
          int v31 = *v11;
          if (((char)*v11 & 0x80000000) == 0) {
            goto LABEL_60;
          }
          int v31 = v31 + (*a2 << 7) - 128;
          if ((char)*a2 < 0)
          {
            a2 = (unsigned __int8 *)sub_188C0D0((uint64_t)v11, v31);
            *(_DWORD *)(a1 + 76) = v38;
            if (!a2) {
              goto LABEL_93;
            }
          }
          else
          {
            a2 = v11 + 2;
LABEL_60:
            *(_DWORD *)(a1 + 76) = v31;
          }
          continue;
        default:
          goto LABEL_26;
      }
      while (1)
      {
        uint64_t v14 = *(_DWORD **)(a1 + 40);
        if (v14 && (uint64_t v15 = *(int *)(a1 + 32), (int)v15 < *v14))
        {
          *(_DWORD *)(a1 + 32) = v15 + 1;
          uint64_t v16 = *(void *)&v14[2 * v15 + 2];
          int v45 = 0;
          uint64_t v17 = (char *)sub_188BEE0((uint64_t)a3, a2 + 1, &v45);
          if (v17) {
            goto LABEL_17;
          }
        }
        else
        {
          uint64_t v18 = sub_1103924(*v8);
          uint64_t v16 = sub_188CDC8((uint64_t)v8, v18);
          int v45 = 0;
          uint64_t v17 = (char *)sub_188BEE0((uint64_t)a3, a2 + 1, &v45);
          if (v17)
          {
LABEL_17:
            a2 = (unsigned __int8 *)sub_1101D04(v16, v17, a3);
            ++a3[11].i32[0];
            if (a3[10].i32[0]) {
              goto LABEL_93;
            }
            goto LABEL_18;
          }
        }
        a2 = 0;
        ++a3[11].i32[0];
        if (a3[10].i32[0]) {
          goto LABEL_93;
        }
LABEL_18:
        int v19 = a3[3].i32[1] + v45;
        a3[3].i32[1] = v19;
        int32x2_t v20 = (int32x2_t)(*(void *)&a3[1] + (v19 & (v19 >> 31)));
        *a3 = v20;
        if (!a2) {
          goto LABEL_93;
        }
        if (*(void *)&v20 <= (unint64_t)a2 || *a2 != 10) {
          goto LABEL_5;
        }
      }
    }
    unsigned int v21 = v12 + (*v11 << 7);
    unsigned int v12 = v21 - 128;
    if ((char)*v11 < 0)
    {
      uint64_t v11 = (unsigned __int8 *)sub_188C180((uint64_t)a2, v21 - 128);
      unsigned int v12 = v22;
      unsigned int v13 = (v22 >> 3) - 1;
      if (v13 <= 7) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v11 = a2 + 2;
      unsigned int v13 = (v12 >> 3) - 1;
      if (v13 <= 7) {
        goto LABEL_8;
      }
    }
LABEL_26:
    if (v12) {
      BOOL v23 = (v12 & 7) == 4;
    }
    else {
      BOOL v23 = 1;
    }
    if (v23)
    {
      if (v11) {
        a3[10].i32[0] = v12 - 1;
      }
      goto LABEL_94;
    }
    if (*v7)
    {
      a2 = sub_1885AC0(v12, (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8), (char *)v11, a3);
      if (!a2) {
        goto LABEL_93;
      }
    }
    else
    {
      int v43 = (std::string *)sub_188DBD8(v7);
      a2 = sub_1885AC0(v12, v43, (char *)v11, a3);
      if (!a2)
      {
LABEL_93:
        uint64_t v11 = 0;
        goto LABEL_94;
      }
    }
  }
  if (v41 < 1)
  {
LABEL_99:
    uint64_t v11 = a2;
  }
  else if (a3[2])
  {
    uint64_t v11 = a2;
  }
  else
  {
    uint64_t v11 = 0;
  }
LABEL_94:
  *(_DWORD *)(a1 + 16) |= v6;
  return v11;
}

char *sub_1102C34(uint64_t a1, char *__dst, _DWORD *a3)
{
  int v6 = *(_DWORD *)(a1 + 32);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
    {
      if (*(void *)a3 <= (unint64_t)__dst) {
        long long __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      }
      uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8 * i + 8);
      *long long __dst = 10;
      unsigned int v10 = *(_DWORD *)(v9 + 40);
      __dst[1] = v10;
      if (v10 > 0x7F) {
        uint64_t v8 = sub_188A9CC(v10, __dst + 1);
      }
      else {
        uint64_t v8 = __dst + 2;
      }
      long long __dst = sub_1101F70(v9, v8, a3);
    }
  }
  int v11 = *(_DWORD *)(a1 + 16);
  if ((v11 & 4) != 0)
  {
    if (*(void *)a3 <= (unint64_t)__dst)
    {
      long long __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      unint64_t v12 = *(int *)(a1 + 64);
      *long long __dst = 16;
      __dst[1] = v12;
      if (v12 <= 0x7F) {
        goto LABEL_12;
      }
    }
    else
    {
      unint64_t v12 = *(int *)(a1 + 64);
      *long long __dst = 16;
      __dst[1] = v12;
      if (v12 <= 0x7F)
      {
LABEL_12:
        __dst += 2;
        goto LABEL_16;
      }
    }
    __dst[1] = v12 | 0x80;
    unint64_t v13 = v12 >> 7;
    __dst[2] = v12 >> 7;
    __dst += 3;
    if (v12 >= 0x4000)
    {
      do
      {
        *(__dst - 1) |= 0x80u;
        unint64_t v14 = v13 >> 14;
        v13 >>= 7;
        *__dst++ = v13;
      }
      while (v14);
    }
  }
LABEL_16:
  if ((v11 & 8) == 0) {
    goto LABEL_23;
  }
  if (*(void *)a3 <= (unint64_t)__dst)
  {
    long long __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
    unint64_t v15 = *(int *)(a1 + 68);
    *long long __dst = 24;
    __dst[1] = v15;
    if (v15 <= 0x7F) {
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v15 = *(int *)(a1 + 68);
    *long long __dst = 24;
    __dst[1] = v15;
    if (v15 <= 0x7F)
    {
LABEL_19:
      __dst += 2;
      goto LABEL_23;
    }
  }
  __dst[1] = v15 | 0x80;
  unint64_t v16 = v15 >> 7;
  __dst[2] = v15 >> 7;
  __dst += 3;
  if (v15 >= 0x4000)
  {
    do
    {
      *(__dst - 1) |= 0x80u;
      unint64_t v17 = v16 >> 14;
      v16 >>= 7;
      *__dst++ = v16;
    }
    while (v17);
  }
LABEL_23:
  if (v11)
  {
    if (*(void *)a3 <= (unint64_t)__dst) {
      long long __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
    }
    uint64_t v18 = *(void *)(a1 + 48);
    *long long __dst = 34;
    unsigned int v19 = *(_DWORD *)(v18 + 20);
    __dst[1] = v19;
    if (v19 > 0x7F)
    {
      int32x2_t v20 = sub_188A9CC(v19, __dst + 1);
      long long __dst = sub_1104908(v18, v20, a3);
      if ((v11 & 2) != 0) {
        goto LABEL_33;
      }
    }
    else
    {
      long long __dst = sub_1104908(v18, __dst + 2, a3);
      if ((v11 & 2) != 0) {
        goto LABEL_33;
      }
    }
LABEL_25:
    if ((v11 & 0x10) == 0) {
      goto LABEL_45;
    }
    goto LABEL_39;
  }
  if ((v11 & 2) == 0) {
    goto LABEL_25;
  }
LABEL_33:
  if (*(void *)a3 <= (unint64_t)__dst) {
    long long __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
  }
  uint64_t v21 = *(void *)(a1 + 56);
  *long long __dst = 42;
  unsigned int v22 = *(_DWORD *)(v21 + 20);
  __dst[1] = v22;
  if (v22 > 0x7F)
  {
    BOOL v23 = sub_188A9CC(v22, __dst + 1);
    long long __dst = sub_1104908(v21, v23, a3);
    if ((v11 & 0x10) == 0) {
      goto LABEL_45;
    }
  }
  else
  {
    long long __dst = sub_1104908(v21, __dst + 2, a3);
    if ((v11 & 0x10) == 0) {
      goto LABEL_45;
    }
  }
LABEL_39:
  if (*(void *)a3 <= (unint64_t)__dst)
  {
    long long __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
    unint64_t v24 = *(int *)(a1 + 72);
    *long long __dst = 56;
    __dst[1] = v24;
    if (v24 <= 0x7F) {
      goto LABEL_41;
    }
  }
  else
  {
    unint64_t v24 = *(int *)(a1 + 72);
    *long long __dst = 56;
    __dst[1] = v24;
    if (v24 <= 0x7F)
    {
LABEL_41:
      __dst += 2;
      goto LABEL_45;
    }
  }
  __dst[1] = v24 | 0x80;
  unint64_t v25 = v24 >> 7;
  __dst[2] = v24 >> 7;
  __dst += 3;
  if (v24 >= 0x4000)
  {
    do
    {
      *(__dst - 1) |= 0x80u;
      unint64_t v26 = v25 >> 14;
      v25 >>= 7;
      *__dst++ = v25;
    }
    while (v26);
  }
LABEL_45:
  if ((v11 & 0x20) == 0) {
    goto LABEL_52;
  }
  if (*(void *)a3 <= (unint64_t)__dst)
  {
    long long __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
    unsigned int v27 = *(_DWORD *)(a1 + 76);
    *long long __dst = 64;
    __dst[1] = v27;
    if (v27 <= 0x7F) {
      goto LABEL_48;
    }
  }
  else
  {
    unsigned int v27 = *(_DWORD *)(a1 + 76);
    *long long __dst = 64;
    __dst[1] = v27;
    if (v27 <= 0x7F)
    {
LABEL_48:
      __dst += 2;
      goto LABEL_52;
    }
  }
  __dst[1] = v27 | 0x80;
  unsigned int v28 = v27 >> 7;
  __dst[2] = v27 >> 7;
  __dst += 3;
  if (v27 >= 0x4000)
  {
    do
    {
      *(__dst - 1) |= 0x80u;
      unsigned int v29 = v28 >> 14;
      v28 >>= 7;
      *__dst++ = v28;
    }
    while (v29);
  }
LABEL_52:
  uint64_t v30 = *(void *)(a1 + 8);
  if ((v30 & 1) == 0) {
    return __dst;
  }
  unint64_t v32 = v30 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v32 + 31) < 0)
  {
    uint64_t v33 = *(void **)(v32 + 8);
    uint64_t v34 = *(void *)(v32 + 16);
  }
  else
  {
    uint64_t v33 = (void *)(v32 + 8);
    LODWORD(v34) = *(unsigned __int8 *)(v32 + 31);
  }
  uint64_t v35 = (int)v34;
  if (*(void *)a3 - (void)__dst >= (int)v34)
  {
    memcpy(__dst, v33, (int)v34);
    __dst += v35;
    return __dst;
  }

  return (char *)sub_188A528(a3, (char *)v33, v34, __dst);
}

uint64_t sub_11030B8(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = (uint64_t *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (!v2)
  {
    uint64_t v2 = 0;
    int v8 = *(_DWORD *)(a1 + 16);
    if ((v8 & 0x3F) == 0) {
      goto LABEL_17;
    }
LABEL_10:
    if (v8)
    {
      uint64_t v11 = sub_1104C04(*(void *)(a1 + 48));
      v2 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v8 & 2) == 0)
      {
LABEL_12:
        if ((v8 & 4) == 0) {
          goto LABEL_13;
        }
        goto LABEL_21;
      }
    }
    else if ((v8 & 2) == 0)
    {
      goto LABEL_12;
    }
    uint64_t v12 = sub_1104C04(*(void *)(a1 + 56));
    v2 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v8 & 4) == 0)
    {
LABEL_13:
      if ((v8 & 8) == 0) {
        goto LABEL_14;
      }
LABEL_25:
      int v14 = *(_DWORD *)(a1 + 68);
      if (v14 < 0)
      {
        v2 += 11;
        if ((v8 & 0x10) != 0) {
          goto LABEL_29;
        }
      }
      else
      {
        v2 += ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
        if ((v8 & 0x10) != 0) {
          goto LABEL_29;
        }
      }
LABEL_15:
      if ((v8 & 0x20) == 0) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
LABEL_21:
    int v13 = *(_DWORD *)(a1 + 64);
    if (v13 < 0)
    {
      v2 += 11;
      if ((v8 & 8) != 0) {
        goto LABEL_25;
      }
    }
    else
    {
      v2 += ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v8 & 8) != 0) {
        goto LABEL_25;
      }
    }
LABEL_14:
    if ((v8 & 0x10) == 0) {
      goto LABEL_15;
    }
LABEL_29:
    int v15 = *(_DWORD *)(a1 + 72);
    if (v15 < 0)
    {
      v2 += 11;
      if ((v8 & 0x20) == 0) {
        goto LABEL_17;
      }
    }
    else
    {
      v2 += ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v8 & 0x20) == 0) {
        goto LABEL_17;
      }
    }
LABEL_16:
    v2 += ((9 * (__clz(*(_DWORD *)(a1 + 76) | 1) ^ 0x1F) + 73) >> 6) + 1;
    goto LABEL_17;
  }
  uint64_t v5 = 8 * v2;
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v7 = sub_11020B4(v6);
    v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
    v5 -= 8;
  }
  while (v5);
  int v8 = *(_DWORD *)(a1 + 16);
  if ((v8 & 0x3F) != 0) {
    goto LABEL_10;
  }
LABEL_17:
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    unint64_t v16 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v16 + 31) < 0) {
      uint64_t v17 = *(void *)(v16 + 16);
    }
    else {
      uint64_t v17 = *(unsigned __int8 *)(v16 + 31);
    }
    uint64_t v18 = v17 + v2;
    *(_DWORD *)(a1 + 20) = v18;
    return v18;
  }
  else
  {
    *(_DWORD *)(a1 + 20) = v2;
    return v2;
  }
}

void sub_11032E8(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 40) + 8);
    uint64_t v6 = (uint64_t *)sub_188CCE4(a1 + 24, *(_DWORD *)(a2 + 32));
    sub_1104278((uint64_t *)(a1 + 24), v6, v5, v4, **(_DWORD **)(a1 + 40) - *(_DWORD *)(a1 + 32));
    int v7 = *(_DWORD *)(a1 + 32) + v4;
    *(_DWORD *)(a1 + 32) = v7;
    int v8 = *(int **)(a1 + 40);
    if (*v8 < v7) {
      *int v8 = v7;
    }
  }
  int v9 = *(_DWORD *)(a2 + 16);
  if ((v9 & 0x3F) != 0)
  {
    if (v9)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v11 = *(std::string **)(a1 + 48);
      if (!v11)
      {
        uint64_t v12 = *(void *)(a1 + 8);
        int v13 = (void *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
        if (v12) {
          int v13 = (void *)*v13;
        }
        uint64_t v11 = (std::string *)sub_1104EA8((uint64_t)v13);
        *(void *)(a1 + 48) = v11;
      }
      if (*(void *)(a2 + 48)) {
        int v14 = *(uint64_t (****)())(a2 + 48);
      }
      else {
        int v14 = &off_24F7E98;
      }
      sub_1104DD8(v11, (uint64_t)v14);
      if ((v9 & 2) == 0)
      {
LABEL_7:
        if ((v9 & 4) == 0) {
          goto LABEL_8;
        }
        goto LABEL_33;
      }
    }
    else if ((v9 & 2) == 0)
    {
      goto LABEL_7;
    }
    *(_DWORD *)(a1 + 16) |= 2u;
    int v15 = *(std::string **)(a1 + 56);
    if (!v15)
    {
      uint64_t v16 = *(void *)(a1 + 8);
      uint64_t v17 = (void *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
      if (v16) {
        uint64_t v17 = (void *)*v17;
      }
      int v15 = (std::string *)sub_1104EA8((uint64_t)v17);
      *(void *)(a1 + 56) = v15;
    }
    if (*(void *)(a2 + 56)) {
      uint64_t v18 = *(uint64_t (****)())(a2 + 56);
    }
    else {
      uint64_t v18 = &off_24F7E98;
    }
    sub_1104DD8(v15, (uint64_t)v18);
    if ((v9 & 4) == 0)
    {
LABEL_8:
      if ((v9 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_34;
    }
LABEL_33:
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
    if ((v9 & 8) == 0)
    {
LABEL_9:
      if ((v9 & 0x10) == 0) {
        goto LABEL_10;
      }
      goto LABEL_35;
    }
LABEL_34:
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
    if ((v9 & 0x10) == 0)
    {
LABEL_10:
      if ((v9 & 0x20) == 0)
      {
LABEL_12:
        *(_DWORD *)(a1 + 16) |= v9;
        goto LABEL_13;
      }
LABEL_11:
      *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
      goto LABEL_12;
    }
LABEL_35:
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
    if ((v9 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_13:
  uint64_t v10 = *(void *)(a2 + 8);
  if (v10)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v10 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

uint64_t sub_11034A8()
{
  return 1;
}

double sub_11034B0@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_20B8890;
  strcpy(v2, "geo3.internal.transit.Journey");
  return *(double *)".transit.Journey";
}

uint64_t sub_1103504(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = off_2440FA0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_1103580(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = off_2441020;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

double sub_11035FC(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(v2 + 8) = a1;
  *(void *)uint64_t v2 = off_24410A0;
  double result = 0.0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  return result;
}

double sub_1103680(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(v2 + 8) = a1;
  *(void *)uint64_t v2 = off_2441120;
  double result = 0.0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(unsigned char *)(v2 + 48) = 0;
  return result;
}

void *sub_1103700(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *double result = off_24411A0;
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

double sub_110377C(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(v2 + 8) = a1;
  *(void *)uint64_t v2 = off_2441220;
  double result = 0.0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(void *)(v2 + 48) = 0;
  return result;
}

double sub_11037FC(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(v2 + 8) = a1;
  *(void *)uint64_t v2 = off_24412A0;
  double result = 0.0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  return result;
}

uint64_t sub_110387C(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t result = off_2441320;
  *(void *)(result + 8) = a1;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a1;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t sub_1103924(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t result = off_24413A0;
  *(void *)(result + 8) = a1;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = a1;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

double sub_11039CC(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t v2 = off_2441420;
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = a1;
  double result = 0.0;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  return result;
}

void sub_1103A7C()
{
}

uint64_t sub_1103ACC(uint64_t a1, uint64_t a2)
{
  return sub_1103504(a2);
}

uint64_t sub_1103AD4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_1103ADC()
{
}

uint64_t sub_1103B2C(uint64_t a1, uint64_t a2)
{
  return sub_1103580(a2);
}

uint64_t sub_1103B34(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_1103B3C()
{
}

double sub_1103B94(uint64_t a1, uint64_t a2)
{
  return sub_11035FC(a2);
}

uint64_t sub_1103B9C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_1103BA4()
{
}

double sub_1103BF8(uint64_t a1, uint64_t a2)
{
  return sub_1103680(a2);
}

uint64_t sub_1103C00(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_1103C08()
{
}

void *sub_1103C58(uint64_t a1, uint64_t a2)
{
  return sub_1103700(a2);
}

uint64_t sub_1103C60(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_1103C68()
{
}

double sub_1103CBC(uint64_t a1, uint64_t a2)
{
  return sub_110377C(a2);
}

uint64_t sub_1103CC4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_1103CCC()
{
}

double sub_1103D20(uint64_t a1, uint64_t a2)
{
  return sub_11037FC(a2);
}

uint64_t sub_1103D28(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_1103D30()
{
}

uint64_t sub_1103D84(uint64_t a1, uint64_t a2)
{
  return sub_110387C(a2);
}

uint64_t sub_1103D8C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_1103D94()
{
}

uint64_t sub_1103DE8(uint64_t a1, uint64_t a2)
{
  return sub_1103924(a2);
}

uint64_t sub_1103DF0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

void sub_1103DF8()
{
}

double sub_1103E4C(uint64_t a1, uint64_t a2)
{
  return sub_11039CC(a2);
}

uint64_t sub_1103E54(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_1103E5C(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 8);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v27 = result;
    uint64_t v3 = *(void *)(result + 16) + 8;
    do
    {
      uint64_t v4 = *(void *)(v3 + 8 * v2);
      uint64_t v5 = *(unsigned int *)(v4 + 32);
      if ((int)v5 >= 1)
      {
        uint64_t v6 = *(void *)(v4 + 40) + 8;
        do
        {
          uint64_t v7 = *(void *)v6;
          int v8 = *(_DWORD *)(*(void *)v6 + 16);
          if ((v8 & 0xF) != 0)
          {
            if (v8)
            {
              uint64_t v9 = *(void *)(v7 + 24);
              int v10 = *(_DWORD *)(v9 + 16);
              if ((v10 & 0xF) != 0)
              {
                if (v10)
                {
                  uint64_t v11 = *(void *)(v9 + 24);
                  if ((*(unsigned char *)(v11 + 16) & 7) != 0)
                  {
                    *(_DWORD *)(v11 + 32) = 0;
                    *(void *)(v11 + 24) = 0;
                  }
                  char v12 = *(unsigned char *)(v11 + 8);
                  double result = v11 + 8;
                  *(_DWORD *)(result + 8) = 0;
                  if (v12) {
                    double result = sub_188B4AC((uint64_t *)result);
                  }
                }
                if ((v10 & 2) != 0)
                {
                  uint64_t v13 = *(void *)(v9 + 32);
                  char v14 = *(unsigned char *)(v13 + 8);
                  double result = v13 + 8;
                  *(_DWORD *)(result + 16) = 0;
                  *(_DWORD *)(result + 8) = 0;
                  if (v14) {
                    double result = sub_188B4AC((uint64_t *)result);
                  }
                }
                if ((v10 & 4) != 0) {
                  double result = sub_1104524(*(void *)(v9 + 40));
                }
                if ((v10 & 8) != 0) {
                  double result = sub_1104524(*(void *)(v9 + 48));
                }
              }
              if ((v10 & 0xF0) != 0)
              {
                *(void *)(v9 + 56) = 0;
                *(void *)(v9 + 64) = 0;
                *(_DWORD *)(v9 + 72) = 0;
              }
              if ((v10 & 0x700) != 0)
              {
                *(void *)(v9 + 84) = 0;
                *(void *)(v9 + 76) = 0;
                *(_DWORD *)(v9 + 92) = 0;
              }
              char v16 = *(unsigned char *)(v9 + 8);
              uint64_t v15 = v9 + 8;
              *(_DWORD *)(v15 + 8) = 0;
              if (v16) {
                double result = sub_188B4AC((uint64_t *)v15);
              }
            }
            if ((v8 & 2) != 0)
            {
              uint64_t v17 = *(void *)(v7 + 32);
              if ((*(unsigned char *)(v17 + 16) & 0x1F) != 0)
              {
                *(void *)(v17 + 24) = 0;
                *(void *)(v17 + 32) = 0;
                *(unsigned char *)(v17 + 48) = 0;
                *(void *)(v17 + 40) = 0;
              }
              char v18 = *(unsigned char *)(v17 + 8);
              double result = v17 + 8;
              *(_DWORD *)(result + 8) = 0;
              if (v18) {
                double result = sub_188B4AC((uint64_t *)result);
              }
            }
            if ((v8 & 4) != 0)
            {
              uint64_t v19 = *(void *)(v7 + 40);
              if ((*(unsigned char *)(v19 + 16) & 7) != 0)
              {
                *(void *)(v19 + 24) = 0;
                *(void *)(v19 + 32) = 0;
              }
              char v20 = *(unsigned char *)(v19 + 8);
              double result = v19 + 8;
              *(_DWORD *)(result + 8) = 0;
              if (v20) {
                double result = sub_188B4AC((uint64_t *)result);
              }
            }
            if ((v8 & 8) != 0)
            {
              uint64_t v21 = *(void *)(v7 + 48);
              if ((*(unsigned char *)(v21 + 16) & 0x1F) != 0)
              {
                *(_OWORD *)(v21 + 40) = 0u;
                *(_OWORD *)(v21 + 24) = 0u;
              }
              char v22 = *(unsigned char *)(v21 + 8);
              double result = v21 + 8;
              *(_DWORD *)(result + 8) = 0;
              if (v22) {
                double result = sub_188B4AC((uint64_t *)result);
              }
            }
          }
          if ((v8 & 0x30) != 0) {
            *(void *)(v7 + 56) = 0;
          }
          char v24 = *(unsigned char *)(v7 + 8);
          uint64_t v23 = v7 + 8;
          *(_DWORD *)(v23 + 8) = 0;
          if (v24) {
            double result = sub_188B4AC((uint64_t *)v23);
          }
          v6 += 8;
          --v5;
        }
        while (v5);
        *(_DWORD *)(v4 + 32) = 0;
      }
      char v26 = *(unsigned char *)(v4 + 8);
      uint64_t v25 = v4 + 8;
      *(_DWORD *)(v25 + 40) = 0;
      *(_DWORD *)(v25 + 8) = 0;
      if (v26) {
        double result = sub_188B4AC((uint64_t *)v25);
      }
      ++v2;
    }
    while (v2 != v1);
    *(_DWORD *)(v27 + 8) = 0;
  }
  return result;
}

void sub_1104084(uint64_t *a1, uint64_t *a2, uint64_t *a3, int a4, int a5)
{
  LODWORD(v5) = a4;
  uint64_t v7 = a2;
  int v8 = a4 - a5;
  if (a4 > a5)
  {
    uint64_t v9 = *a1;
    int v10 = &a2[a5];
    do
    {
      sub_11037FC(v9);
      *v10++ = v11;
      --v8;
    }
    while (v8);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v13 = *a3++;
      uint64_t v12 = v13;
      uint64_t v14 = *v7++;
      sub_1104100(v12, v14);
      --v5;
    }
    while (v5);
  }
}

void sub_1104100(uint64_t a1, uint64_t a2)
{
}

void sub_1104110(uint64_t *a1, uint64_t *a2, uint64_t *a3, int a4, int a5)
{
  LODWORD(v5) = a4;
  uint64_t v7 = a2;
  int v8 = a4 - a5;
  if (a4 > a5)
  {
    uint64_t v9 = *a1;
    int v10 = &a2[a5];
    do
    {
      *v10++ = sub_110387C(v9);
      --v8;
    }
    while (v8);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v12 = *a3++;
      uint64_t v11 = v12;
      uint64_t v13 = *v7++;
      sub_110418C(v11, v13);
      --v5;
    }
    while (v5);
  }
}

void sub_110418C(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a1 + 40) + 8);
    uint64_t v6 = (uint64_t *)sub_188CCE4(a2 + 24, v4);
    sub_1104084((uint64_t *)(a2 + 24), v6, v5, v4, **(_DWORD **)(a2 + 40) - *(_DWORD *)(a2 + 32));
    int v7 = *(_DWORD *)(a2 + 32) + v4;
    *(_DWORD *)(a2 + 32) = v7;
    int v8 = *(int **)(a2 + 40);
    if (*v8 < v7) {
      *int v8 = v7;
    }
  }
  if (*(unsigned char *)(a1 + 16))
  {
    int v9 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a2 + 16) |= 1u;
    *(_DWORD *)(a2 + 48) = v9;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    sub_188B4F8((uint64_t *)(a2 + 8), (v10 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

void sub_1104278(uint64_t *a1, uint64_t *a2, uint64_t *a3, int a4, int a5)
{
  LODWORD(v5) = a4;
  int v7 = a2;
  int v8 = a4 - a5;
  if (a4 > a5)
  {
    uint64_t v9 = *a1;
    uint64_t v10 = &a2[a5];
    do
    {
      *v10++ = sub_1103924(v9);
      --v8;
    }
    while (v8);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v12 = *a3++;
      uint64_t v11 = v12;
      uint64_t v13 = *v7++;
      sub_11042F4(v11, v13);
      --v5;
    }
    while (v5);
  }
}

void sub_11042F4(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 24);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a1 + 32) + 8);
    uint64_t v6 = (uint64_t *)sub_188CCE4(a2 + 16, v4);
    sub_1104110((uint64_t *)(a2 + 16), v6, v5, v4, **(_DWORD **)(a2 + 32) - *(_DWORD *)(a2 + 24));
    int v7 = *(_DWORD *)(a2 + 24) + v4;
    *(_DWORD *)(a2 + 24) = v7;
    int v8 = *(int **)(a2 + 32);
    if (*v8 < v7) {
      *int v8 = v7;
    }
  }
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    sub_188B4F8((uint64_t *)(a2 + 8), (v9 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

void *sub_11043C4(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }
  return a1;
}

void sub_1104464(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }

  operator delete();
}

uint64_t sub_1104524(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 0xF) != 0)
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_1104548(_DWORD *a1, char *a2, int32x2_t *a3)
{
  int v6 = 0;
  int v7 = (uint64_t *)(a1 + 2);
  while ((unint64_t)a2 < *(void *)a3)
  {
LABEL_5:
    int v8 = a2 + 1;
    unsigned int v9 = *a2;
    if (*a2 < 0)
    {
      unsigned int v12 = v9 + (*v8 << 7);
      unsigned int v9 = v12 - 128;
      if (*v8 < 0)
      {
        int v8 = (char *)sub_188C180((uint64_t)a2, v12 - 128);
        unsigned int v9 = v16;
        unsigned int v10 = (v16 >> 3) - 1;
        if (v10 <= 3) {
          goto LABEL_7;
        }
      }
      else
      {
        int v8 = a2 + 2;
        unsigned int v10 = (v9 >> 3) - 1;
        if (v10 <= 3) {
          goto LABEL_7;
        }
      }
LABEL_30:
      if (v9) {
        BOOL v17 = (v9 & 7) == 4;
      }
      else {
        BOOL v17 = 1;
      }
      if (v17)
      {
        if (v8) {
          a3[10].i32[0] = v9 - 1;
        }
        goto LABEL_65;
      }
      if (*v7)
      {
        a2 = (char *)sub_1885AC0(v9, (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8), v8, a3);
        if (!a2) {
          goto LABEL_66;
        }
      }
      else
      {
        unsigned int v29 = (std::string *)sub_188DBD8(v7);
        a2 = (char *)sub_1885AC0(v9, v29, v8, a3);
        if (!a2)
        {
LABEL_66:
          int v8 = 0;
          goto LABEL_65;
        }
      }
    }
    else
    {
      unsigned int v10 = (v9 >> 3) - 1;
LABEL_7:
      switch(v10)
      {
        case 0u:
          if (v9 != 8) {
            goto LABEL_30;
          }
          v6 |= 1u;
          a2 = v8 + 1;
          LODWORD(v11) = *v8;
          if ((v11 & 0x80) == 0) {
            goto LABEL_12;
          }
          uint64_t v11 = v11 + (*a2 << 7) - 128;
          if (*a2 < 0)
          {
            a2 = (char *)sub_188C138((uint64_t)v8, v11);
            a1[6] = v22;
            if (!a2) {
              goto LABEL_66;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_12:
            a1[6] = v11;
          }
          continue;
        case 1u:
          if (v9 != 16) {
            goto LABEL_30;
          }
          v6 |= 2u;
          a2 = v8 + 1;
          LODWORD(v13) = *v8;
          if ((v13 & 0x80) == 0) {
            goto LABEL_3;
          }
          uint64_t v13 = v13 + (*a2 << 7) - 128;
          if (*a2 < 0)
          {
            a2 = (char *)sub_188C138((uint64_t)v8, v13);
            a1[7] = v14;
            if (!a2) {
              goto LABEL_66;
            }
          }
          else
          {
            a2 = v8 + 2;
LABEL_3:
            a1[7] = v13;
          }
          continue;
        case 2u:
          if (v9 != 24) {
            goto LABEL_30;
          }
          a2 = v8 + 1;
          unint64_t v15 = *v8;
          if (*v8 < 0)
          {
            int v18 = v15 + (*a2 << 7);
            unint64_t v15 = (v18 - 128);
            if (*a2 < 0)
            {
              uint64_t v23 = sub_188C138((uint64_t)v8, (v18 - 128));
              if (!v23) {
                goto LABEL_66;
              }
              a2 = (char *)v23;
              unint64_t v15 = v24;
              if (v24 <= 1)
              {
LABEL_24:
                a1[4] |= 4u;
                a1[8] = v15;
                continue;
              }
            }
            else
            {
              a2 = v8 + 2;
              if (v15 <= 1) {
                goto LABEL_24;
              }
            }
          }
          else if (v15 <= 1)
          {
            goto LABEL_24;
          }
          if (*v7) {
            uint64_t v19 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            uint64_t v19 = (std::string *)sub_188DBD8(v7);
          }
          int v20 = 3;
          goto LABEL_47;
        case 3u:
          if (v9 != 32) {
            goto LABEL_30;
          }
          a2 = v8 + 1;
          unint64_t v15 = *v8;
          if (*v8 < 0)
          {
            int v21 = v15 + (*a2 << 7);
            unint64_t v15 = (v21 - 128);
            if (*a2 < 0)
            {
              uint64_t v25 = sub_188C138((uint64_t)v8, (v21 - 128));
              if (!v25) {
                goto LABEL_66;
              }
              a2 = (char *)v25;
              unint64_t v15 = v26;
              if (v26 <= 2)
              {
LABEL_28:
                a1[4] |= 8u;
                a1[9] = v15;
                continue;
              }
            }
            else
            {
              a2 = v8 + 2;
              if (v15 <= 2) {
                goto LABEL_28;
              }
            }
          }
          else if (v15 <= 2)
          {
            goto LABEL_28;
          }
          if (*v7) {
            uint64_t v19 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            uint64_t v19 = (std::string *)sub_188DBD8(v7);
          }
          int v20 = 4;
LABEL_47:
          sub_188C020(v20, v15, v19);
          break;
        default:
          goto LABEL_30;
      }
    }
  }
  int v27 = a2 - a3[1].i32[0];
  if (a3[3].i32[1] != v27)
  {
    a2 = sub_188BB90((uint64_t)a3, v27, a3[11].i32[1]);
    if (v28) {
      goto LABEL_71;
    }
    goto LABEL_5;
  }
  if (v27 < 1)
  {
LABEL_71:
    int v8 = a2;
    goto LABEL_65;
  }
  if (a3[2]) {
    int v8 = a2;
  }
  else {
    int v8 = 0;
  }
LABEL_65:
  a1[4] |= v6;
  return v8;
}

unsigned char *sub_1104908(uint64_t a1, unsigned char *__dst, _DWORD *a3)
{
  int v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*(void *)a3 <= (unint64_t)__dst)
    {
      int v4 = sub_188A3FC((uint64_t)a3, (int)__dst);
      unint64_t v7 = *(int *)(a1 + 24);
      *int v4 = 8;
      v4[1] = v7;
      if (v7 <= 0x7F) {
        goto LABEL_4;
      }
    }
    else
    {
      unint64_t v7 = *(int *)(a1 + 24);
      *long long __dst = 8;
      __dst[1] = v7;
      if (v7 <= 0x7F)
      {
LABEL_4:
        v4 += 2;
        goto LABEL_8;
      }
    }
    v4[1] = v7 | 0x80;
    unint64_t v8 = v7 >> 7;
    v4[2] = v7 >> 7;
    v4 += 3;
    if (v7 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unint64_t v9 = v8 >> 14;
        v8 >>= 7;
        *v4++ = v8;
      }
      while (v9);
    }
  }
LABEL_8:
  if ((v6 & 2) == 0) {
    goto LABEL_15;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    int v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unint64_t v10 = *(int *)(a1 + 28);
    *int v4 = 16;
    v4[1] = v10;
    if (v10 <= 0x7F) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v10 = *(int *)(a1 + 28);
    *int v4 = 16;
    v4[1] = v10;
    if (v10 <= 0x7F)
    {
LABEL_11:
      v4 += 2;
      goto LABEL_15;
    }
  }
  v4[1] = v10 | 0x80;
  unint64_t v11 = v10 >> 7;
  v4[2] = v10 >> 7;
  v4 += 3;
  if (v10 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unint64_t v12 = v11 >> 14;
      v11 >>= 7;
      *v4++ = v11;
    }
    while (v12);
  }
LABEL_15:
  if ((v6 & 4) == 0) {
    goto LABEL_22;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    int v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unint64_t v13 = *(int *)(a1 + 32);
    *int v4 = 24;
    v4[1] = v13;
    if (v13 <= 0x7F) {
      goto LABEL_18;
    }
  }
  else
  {
    unint64_t v13 = *(int *)(a1 + 32);
    *int v4 = 24;
    v4[1] = v13;
    if (v13 <= 0x7F)
    {
LABEL_18:
      v4 += 2;
      goto LABEL_22;
    }
  }
  v4[1] = v13 | 0x80;
  unint64_t v14 = v13 >> 7;
  v4[2] = v13 >> 7;
  v4 += 3;
  if (v13 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unint64_t v15 = v14 >> 14;
      v14 >>= 7;
      *v4++ = v14;
    }
    while (v15);
  }
LABEL_22:
  if ((v6 & 8) == 0) {
    goto LABEL_29;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    int v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unint64_t v16 = *(int *)(a1 + 36);
    *int v4 = 32;
    v4[1] = v16;
    if (v16 <= 0x7F) {
      goto LABEL_25;
    }
  }
  else
  {
    unint64_t v16 = *(int *)(a1 + 36);
    *int v4 = 32;
    v4[1] = v16;
    if (v16 <= 0x7F)
    {
LABEL_25:
      v4 += 2;
      goto LABEL_29;
    }
  }
  v4[1] = v16 | 0x80;
  unint64_t v17 = v16 >> 7;
  v4[2] = v16 >> 7;
  v4 += 3;
  if (v16 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unint64_t v18 = v17 >> 14;
      v17 >>= 7;
      *v4++ = v17;
    }
    while (v18);
  }
LABEL_29:
  uint64_t v19 = *(void *)(a1 + 8);
  if ((v19 & 1) == 0) {
    return v4;
  }
  unint64_t v21 = v19 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v21 + 31) < 0)
  {
    int v22 = *(char **)(v21 + 8);
    uint64_t v23 = *(void *)(v21 + 16);
  }
  else
  {
    int v22 = (char *)(v21 + 8);
    LODWORD(v23) = *(unsigned __int8 *)(v21 + 31);
  }
  uint64_t v24 = (int)v23;
  if (*(void *)a3 - (void)v4 < (int)v23)
  {
    return (unsigned char *)sub_188A528(a3, v22, v23, v4);
  }
  else
  {
    memcpy(v4, v22, (int)v23);
    return &v4[v24];
  }
}

uint64_t sub_1104C04(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 0xF) != 0)
  {
    if (v1)
    {
      int v4 = *(_DWORD *)(a1 + 24);
      if (v4 < 0)
      {
        uint64_t v2 = 11;
        if ((v1 & 2) == 0) {
          goto LABEL_15;
        }
      }
      else
      {
        uint64_t v2 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
        if ((v1 & 2) == 0) {
          goto LABEL_15;
        }
      }
    }
    else
    {
      uint64_t v2 = 0;
      if ((v1 & 2) == 0) {
        goto LABEL_15;
      }
    }
    int v5 = *(_DWORD *)(a1 + 28);
    if (v5 < 0) {
      uint64_t v6 = 11;
    }
    else {
      uint64_t v6 = ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v2 += v6;
LABEL_15:
    if ((v1 & 4) == 0)
    {
      if ((v1 & 8) == 0) {
        goto LABEL_17;
      }
LABEL_23:
      int v9 = *(_DWORD *)(a1 + 36);
      if (v9 < 0)
      {
        v2 += 11;
        uint64_t v3 = *(void *)(a1 + 8);
        if ((v3 & 1) == 0) {
          goto LABEL_18;
        }
      }
      else
      {
        v2 += ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
        uint64_t v3 = *(void *)(a1 + 8);
        if ((v3 & 1) == 0) {
          goto LABEL_18;
        }
      }
      goto LABEL_27;
    }
    int v8 = *(_DWORD *)(a1 + 32);
    if (v8 < 0)
    {
      v2 += 11;
      if ((v1 & 8) != 0) {
        goto LABEL_23;
      }
    }
    else
    {
      v2 += ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v1 & 8) != 0) {
        goto LABEL_23;
      }
    }
LABEL_17:
    uint64_t v3 = *(void *)(a1 + 8);
    if ((v3 & 1) == 0) {
      goto LABEL_18;
    }
    goto LABEL_27;
  }
  uint64_t v2 = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 1) == 0)
  {
LABEL_18:
    *(_DWORD *)(a1 + 20) = v2;
    return v2;
  }
LABEL_27:
  unint64_t v10 = v3 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v10 + 31) < 0) {
    uint64_t v11 = *(void *)(v10 + 16) + v2;
  }
  else {
    uint64_t v11 = *(unsigned __int8 *)(v10 + 31) + v2;
  }
  *(_DWORD *)(a1 + 20) = v11;
  return v11;
}

std::string *sub_1104D64(std::string *result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 16);
  if ((v2 & 0xF) == 0) {
    goto LABEL_8;
  }
  if (v2)
  {
    LODWORD(result[1].__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 24);
    if ((v2 & 2) == 0)
    {
LABEL_4:
      if ((v2 & 4) == 0) {
        goto LABEL_5;
      }
LABEL_12:
      LODWORD(result[1].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 32);
      if ((v2 & 8) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_4;
  }
  HIDWORD(result[1].__r_.__value_.__r.__words[0]) = *(_DWORD *)(a2 + 28);
  if ((v2 & 4) != 0) {
    goto LABEL_12;
  }
LABEL_5:
  if ((v2 & 8) != 0) {
LABEL_6:
  }
    HIDWORD(result[1].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 36);
LABEL_7:
  LODWORD(result->__r_.__value_.__r.__words[2]) |= v2;
LABEL_8:
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3) {
    return sub_188B4F8((uint64_t *)&result->__r_.__value_.__l.__size_, (v3 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

std::string *sub_1104DD8(std::string *result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 16);
  if ((v2 & 0xF) == 0) {
    goto LABEL_8;
  }
  if (v2)
  {
    LODWORD(result[1].__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 24);
    if ((v2 & 2) == 0)
    {
LABEL_4:
      if ((v2 & 4) == 0) {
        goto LABEL_5;
      }
LABEL_12:
      LODWORD(result[1].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 32);
      if ((v2 & 8) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_4;
  }
  HIDWORD(result[1].__r_.__value_.__r.__words[0]) = *(_DWORD *)(a2 + 28);
  if ((v2 & 4) != 0) {
    goto LABEL_12;
  }
LABEL_5:
  if ((v2 & 8) != 0) {
LABEL_6:
  }
    HIDWORD(result[1].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 36);
LABEL_7:
  LODWORD(result->__r_.__value_.__r.__words[2]) |= v2;
LABEL_8:
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3) {
    return sub_188B4F8((uint64_t *)&result->__r_.__value_.__l.__size_, (v3 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_1104E4C()
{
  return 1;
}

double sub_1104E54@<D0>(uint64_t a1@<X8>)
{
  int v2 = (char *)operator new(0x20uLL);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_20B8E90;
  strcpy(v2, "geo3.internal.transit.TimeStamp");
  return *(double *)"ransit.TimeStamp";
}

void *sub_1104EA8(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = off_2441590;
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

void sub_1104F24()
{
}

void *sub_1104F74(uint64_t a1, uint64_t a2)
{
  return sub_1104EA8(a2);
}

uint64_t sub_1104F7C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_1104F84()
{
  return 0x8000;
}

_WORD *sub_1104F8C(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

double sub_1104F94(_WORD *a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3 = (uint64_t)a3;
  int v6 = sub_4F44(a3);
  int v7 = sub_4F44(a2);
  int v20 = sub_1106C5C(v6, v7);
  int v8 = sub_53FA4(v3);
  int v9 = sub_53FA4((uint64_t)a2);
  int v19 = sub_1106B44(v8, v9);
  LODWORD(a2) = sub_53FA4((uint64_t)a2);
  int v10 = sub_53FA4(v3);
  LODWORD(v3) = sub_1106AC0((int)a2, v10);
  double v12 = sub_1106ACC(&v19, v11);
  double v13 = sub_1106B54(v3);
  long double v14 = v12 * v13;
  double v15 = sub_1106C0C(&v20, v13);
  long double v16 = 1.57079633 - atan2(v14, v15);
  double v17 = fmod(v16, 6.28318531);
  if (v16 < 0.0) {
    double v17 = v17 + 6.28318531;
  }
  double result = v17 * 65536.0 / 6.28318531;
  *a1 = (int)result;
  return result;
}

_WORD *sub_11050BC(_WORD *a1, unsigned int *a2, unsigned int *a3)
{
  *a1 = 0;
  sub_1104F94(a1, a2, a3);
  return a1;
}

uint64_t sub_11050E8(long double a1)
{
  double v2 = fmod(a1, 360.0);
  if (a1 < 0.0) {
    double v2 = v2 + 360.0;
  }
  return (int)(v2 * 65536.0 / 360.0);
}

double sub_110513C(_WORD *a1, double a2)
{
  LOWORD(a2) = *a1;
  return (double)*(unint64_t *)&a2 * 360.0 * 0.0000152587891;
}

uint64_t sub_1105164(unsigned __int16 *a1)
{
  return *a1;
}

uint64_t sub_110516C(unsigned __int16 *a1, int a2)
{
  return *a1 + a2;
}

double sub_1105178(_WORD *a1, unsigned __int16 a2, double a3)
{
  LOWORD(a3) = *a1;
  double v3 = (double)*(unint64_t *)&a3 * 6.28318531 * 0.0000152587891 - (double)a2 * 6.28318531 * 0.0000152587891;
  if (v3 > 3.14159265)
  {
    double v3 = v3 + -6.28318531;
    return fabs(fmod(v3, 6.28318531));
  }
  if (v3 >= -3.14159265) {
    return fabs(fmod(v3, 6.28318531));
  }
  return fabs(fmod(v3 + 6.28318531, 6.28318531));
}

double sub_1105208(_WORD *a1, unsigned __int16 a2, double a3)
{
  LOWORD(a3) = *a1;
  double v3 = (double)*(unint64_t *)&a3 * 6.28318531 * 0.0000152587891 - (double)a2 * 6.28318531 * 0.0000152587891;
  if (v3 <= 3.14159265)
  {
    if (v3 < -3.14159265) {
      double v3 = v3 + 6.28318531;
    }
  }
  else
  {
    double v3 = v3 + -6.28318531;
  }
  return fabs(fmod(v3, 6.28318531)) * 360.0 / 6.28318531;
}

double sub_11052AC(unsigned __int16 a1)
{
  int v1 = (__int16)(a1 + 0x4000);
  if ((unsigned __int16)(a1 >> 14) > 2u)
  {
LABEL_4:
    return sin((double)(unsigned __int16)v1 * 6.28318531 * 0.0000152587891);
  }
  if ((v1 & 0x80000000) == 0)
  {
    LOWORD(v1) = 0x4000 - a1;
    goto LABEL_4;
  }
  if ((a1 & 0x8000) != 0) {
    unsigned __int16 v3 = -16384 - a1;
  }
  else {
    unsigned __int16 v3 = a1 - 0x4000;
  }
  return sin((double)v3 * -6.28318531 * 0.0000152587891);
}

uint64_t sub_1105350(uint64_t a1)
{
  *(_DWORD *)a1 = 1;
  sub_1105674((_DWORD *)(a1 + 4));
  sub_1104F8C((_WORD *)(a1 + 16));
  sub_BB6C((_DWORD *)(a1 + 20), 0);
  sub_BB6C((_DWORD *)(a1 + 24), 9);
  *(_DWORD *)(a1 + 28) = 0;
  return a1;
}

uint64_t sub_11053A4(uint64_t a1, uint64_t *a2, __int16 a3)
{
  *(_DWORD *)a1 = 0;
  uint64_t v4 = *a2;
  *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 2);
  *(void *)(a1 + 4) = v4;
  *(_WORD *)(a1 + 16) = a3;
  sub_BB6C((_DWORD *)(a1 + 20), 0);
  sub_BB6C((_DWORD *)(a1 + 24), 9);
  *(_DWORD *)(a1 + 28) = 0;
  return a1;
}

uint64_t sub_11053FC(uint64_t a1, uint64_t *a2)
{
  *(_DWORD *)a1 = 1;
  uint64_t v3 = *a2;
  *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 2);
  *(void *)(a1 + 4) = v3;
  sub_1104F8C((_WORD *)(a1 + 16));
  sub_BB6C((_DWORD *)(a1 + 20), 0);
  sub_BB6C((_DWORD *)(a1 + 24), 9);
  *(_DWORD *)(a1 + 28) = 0;
  return a1;
}

uint64_t sub_110545C(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 16);
}

uint64_t sub_1105464(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_110546C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1105474(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 12) = *((_DWORD *)a2 + 2);
  *(void *)(result + 4) = v2;
  return result;
}

uint64_t sub_1105488(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 16) = a2;
  return result;
}

uint64_t sub_1105490(uint64_t result, int a2)
{
  *(_DWORD *)(result + 20) = a2;
  return result;
}

_DWORD *sub_1105498@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 1;
  sub_1105674((_DWORD *)(a1 + 4));
  sub_1104F8C((_WORD *)(a1 + 16));
  sub_BB6C((_DWORD *)(a1 + 20), 0);
  double result = sub_BB6C((_DWORD *)(a1 + 24), 9);
  *(_DWORD *)(a1 + 28) = 0;
  return result;
}

BOOL sub_11054EC(uint64_t a1, uint64_t a2)
{
  BOOL result = 1;
  if (*(_DWORD *)a1 == *(_DWORD *)a2 && !sub_110570C((_DWORD *)(a1 + 4), (unsigned int *)(a2 + 4)))
  {
    if (*(_DWORD *)a1 == 1) {
      return 0;
    }
    double v6 = sub_110513C((_WORD *)(a1 + 16), v4);
    if (vabdd_f64(v6, sub_110513C((_WORD *)(a2 + 16), v6)) < 1.0
      && !sub_11055B4((_DWORD *)(a1 + 20), *(_DWORD *)(a2 + 20))
      && !sub_11055B4((_DWORD *)(a1 + 24), *(_DWORD *)(a2 + 24)))
    {
      return 0;
    }
  }
  return result;
}

BOOL sub_11055A4(_DWORD *a1, int a2)
{
  return *a1 == a2;
}

BOOL sub_11055B4(_DWORD *a1, int a2)
{
  return *a1 != a2;
}

int *sub_11055C4(int *result, unsigned int a2)
{
  if (a2 >= 9) {
    int v2 = 9;
  }
  else {
    int v2 = a2;
  }
  *BOOL result = v2;
  return result;
}

_DWORD *sub_11055D8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25FE3B0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_25FE3B0))
  {
    return &dword_25FE3B8;
  }
  sub_1106A2C(&dword_25FE3B8);
  sub_1106A2C(&dword_25FE3BC);
  dword_25FE3C0 = 0x7FFFFFFF;
  __cxa_guard_release(&qword_25FE3B0);
  return &dword_25FE3B8;
}

void sub_110565C(_Unwind_Exception *a1)
{
}

_DWORD *sub_1105674(_DWORD *a1)
{
  int v2 = sub_1106A2C(a1);
  sub_1106A2C(v2 + 1);
  a1[2] = 0x7FFFFFFF;
  return a1;
}

_DWORD *sub_11056AC(_DWORD *result, int a2, int a3)
{
  *BOOL result = a2;
  result[1] = a3;
  result[2] = 0x7FFFFFFF;
  return result;
}

BOOL sub_11056BC(_DWORD *a1, unsigned int *a2)
{
  BOOL result = sub_1106B28(a1, *a2);
  if (result)
  {
    BOOL result = sub_1106B28(a1 + 1, a2[1]);
    if (result) {
      return a1[2] == a2[2];
    }
  }
  return result;
}

BOOL sub_110570C(_DWORD *a1, unsigned int *a2)
{
  return !sub_1106B28(a1, *a2) || !sub_1106B28(a1 + 1, a2[1]) || a1[2] != a2[2];
}

size_t sub_110576C@<X0>(_DWORD *a1@<X0>, void *a2@<X8>, double a3@<D0>)
{
  double v5 = sub_1106ACC(a1 + 1, a3);
  double v6 = sub_1106C0C(a1, v5);
  snprintf(__str, 0x400uLL, "LatLng(%f, %f, %d)", v5, v6, a1[2]);
  size_t result = strlen(__str);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v8 = result;
  if (result >= 0x17)
  {
    uint64_t v9 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v9 = result | 7;
    }
    uint64_t v10 = v9 + 1;
    double v11 = operator new(v9 + 1);
    a2[1] = v8;
    a2[2] = v10 | 0x8000000000000000;
    *a2 = v11;
    a2 = v11;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result) {
      goto LABEL_9;
    }
  }
  size_t result = (size_t)memcpy(a2, __str, v8);
LABEL_9:
  *((unsigned char *)a2 + v8) = 0;
  return result;
}

uint64_t sub_1105880(unsigned int *a1, unsigned int *a2)
{
  int v4 = sub_4F44(a1);
  int v5 = v4 - sub_4F44(a2);
  if (v5 >= 0) {
    unsigned int v6 = v5;
  }
  else {
    unsigned int v6 = -v5;
  }
  int v7 = sub_4F44(a1 + 1);
  size_t v8 = a2 + 1;
  int v9 = v7 - sub_4F44(v8);
  if (v9 >= 0) {
    unsigned int v10 = v9;
  }
  else {
    unsigned int v10 = -v9;
  }
  int v11 = sub_4F44(v8);
  unsigned __int16 v12 = nullsub_1((unsigned __int16)(((v11 + (v10 >> 1)) >> 16) - 0x4000));
  double v13 = sub_11052AC(v12);
  return sqrt((double)(((40008000 * (unint64_t)v10) >> 32)
                                   * ((40008000 * (unint64_t)v10) >> 32)
                                   + ((unint64_t)(v13 * (double)(40075160 * (unint64_t)v6)) >> 32)
                                   * ((unint64_t)(v13 * (double)(40075160 * (unint64_t)v6)) >> 32)));
}

uint64_t sub_1105950(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)size_t result = v3;
  uint64_t v4 = *a3;
  *(_DWORD *)(result + 20) = *((_DWORD *)a3 + 2);
  *(void *)(result + 12) = v4;
  return result;
}

uint64_t sub_1105974(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4 = (uint64_t)(a1 + 3);
  int v30 = sub_4F44(a1 + 3);
  double v6 = sub_1106C0C(&v30, v5);
  int v29 = sub_4F44(a1);
  double v8 = v6 - sub_1106C0C(&v29, v7);
  int v30 = sub_53FA4(v4);
  double v10 = sub_1106ACC(&v30, v9);
  int v29 = sub_53FA4((uint64_t)a1);
  double v12 = v10 - sub_1106ACC(&v29, v11);
  int v30 = sub_4F44(a2);
  double v14 = sub_1106C0C(&v30, v13);
  int v29 = sub_4F44(a1);
  double v16 = v14 - sub_1106C0C(&v29, v15);
  int v30 = sub_53FA4((uint64_t)a2);
  double v18 = sub_1106ACC(&v30, v17);
  int v29 = sub_53FA4((uint64_t)a1);
  double v20 = (v8 * v16 + v12 * (v18 - sub_1106ACC(&v29, v19))) / (v8 * v8 + v12 * v12);
  if (v20 <= 0.0)
  {
    uint64_t v31 = *(void *)a1;
    unsigned int v27 = a1[2];
LABEL_6:
    unsigned int v32 = v27;
    return v31;
  }
  if (v20 >= 1.0)
  {
    uint64_t v31 = *(void *)v4;
    unsigned int v27 = *(_DWORD *)(v4 + 8);
    goto LABEL_6;
  }
  int v30 = sub_4F44(a1);
  double v22 = v8 * v20 + sub_1106C0C(&v30, v21);
  int v30 = sub_53FA4((uint64_t)a1);
  double v24 = v12 * v20 + sub_1106ACC(&v30, v23);
  int v25 = sub_1106B8C(v22);
  int v26 = sub_1106A34(v24);
  sub_11056AC(&v31, v25, v26);
  return v31;
}

uint64_t sub_1105B34(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  uint64_t v3 = sub_1105674((_DWORD *)(a1 + 20));
  uint64_t v4 = *(unsigned int ****)a1;
  double v5 = **(unsigned int ****)a1;
  if (v5)
  {
    double v6 = *v5;
    uint64_t v7 = (char *)v5[1] - (char *)*v5;
    if (!v7) {
      goto LABEL_6;
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 2) - 1;
    if (*((_DWORD *)v4 + 4) != 1) {
      unint64_t v8 = 0;
    }
    double v9 = &v6[3 * v8];
    uint64_t v10 = *(void *)v9;
    v3[2] = v9[2];
    *(void *)uint64_t v3 = v10;
    double v5 = *v4;
    if (*v4)
    {
LABEL_6:
      double v11 = *v5;
      double v12 = v5[1];
      if (0xAAAAAAAAAAAAAAABLL * (v12 - *v5) >= 2)
      {
        if (v12 == v11)
        {
          double v13 = sub_11055D8();
          uint64_t v4 = *(unsigned int ****)a1;
          double v5 = **(unsigned int ****)a1;
          if (!v5) {
            goto LABEL_15;
          }
        }
        else if (*((_DWORD *)v4 + 4) == 1)
        {
          double v13 = &v11[v12 - *v5 - 3];
        }
        else
        {
          double v13 = *v5;
        }
        double v15 = v5;
        double v14 = *v5;
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (v15[1] - v14);
        if (v16 > 1)
        {
          if (*((_DWORD *)v4 + 4) == 1) {
            double v17 = &v14[3 * v16 - 6];
          }
          else {
            double v17 = v14 + 3;
          }
          goto LABEL_17;
        }
LABEL_15:
        double v17 = sub_11055D8();
LABEL_17:
        *(_DWORD *)(a1 + 16) = sub_1105880(v13, v17);
      }
    }
  }
  return a1;
}

unint64_t sub_1105C70(uint64_t a1)
{
  if (*(void *)a1) {
    return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 2);
  }
  else {
    return 0;
  }
}

_DWORD *sub_1105C9C(_DWORD *a1, unint64_t a2)
{
  if (!*(void *)a1) {
    return sub_11055D8();
  }
  uint64_t v2 = **(void **)a1;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(*(void *)a1 + 8) - v2) >> 2);
  if (v3 <= a2) {
    return sub_11055D8();
  }
  int v4 = a1[4];
  uint64_t v5 = v2 + 12 * (v3 + ~a2);
  uint64_t v6 = v2 + 12 * a2;
  uint64_t v7 = v6;
  if (v4) {
    uint64_t v7 = v6;
  }
  if (v4 == 1) {
    return (_DWORD *)v5;
  }
  else {
    return (_DWORD *)v7;
  }
}

BOOL sub_1105D00(uint64_t a1)
{
  unint64_t v1 = **(void **)a1;
  if (v1) {
    unint64_t v1 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v1 + 8) - *(void *)v1) >> 2);
  }
  return *(void *)(a1 + 8) + 1 >= v1;
}

uint64_t sub_1105D34(uint64_t a1)
{
  return *(void *)(a1 + 20);
}

uint64_t sub_1105D44(_OWORD *a1)
{
  unsigned long long v2 = a1[1];
  long long v18 = *a1;
  unsigned long long v19 = v2;
  uint64_t v16 = v2 >> 32;
  int v17 = HIDWORD(v2);
  if (sub_1105EF8((unsigned int *)&v18, 0x32u, *(double *)&v2, *(double *)&v18))
  {
    *(void *)&long long v11 = *(void *)((char *)&v19 + 4);
    DWORD2(v11) = HIDWORD(v19);
    sub_11050BC(&v20, (unsigned int *)&v16, (unsigned int *)&v11);
    return v20;
  }
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(std::__shared_weak_count **)(*(void *)a1 + 8);
  uint64_t v13 = **(void **)a1;
  double v14 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v6 = *(_DWORD *)(v4 + 16);
  int v15 = v6;
  if (!v6)
  {
    int v7 = 1;
    goto LABEL_10;
  }
  if (v6 == 1)
  {
    int v7 = 0;
LABEL_10:
    int v15 = v7;
  }
  sub_1105B34((uint64_t)&v11, (uint64_t)&v13);
  long long v18 = v11;
  unsigned long long v19 = v12;
  uint64_t v16 = v12 >> 32;
  int v17 = HIDWORD(v12);
  sub_1105EF8((unsigned int *)&v18, 0x32u, *(double *)&v12, *(double *)&v11);
  *(void *)&long long v11 = *(void *)((char *)&v19 + 4);
  DWORD2(v11) = HIDWORD(v19);
  sub_11050BC(&v10, (unsigned int *)&v16, (unsigned int *)&v11);
  unsigned __int16 v8 = sub_1104F84();
  unsigned __int16 v20 = sub_110516C(&v10, v8);
  double v9 = v14;
  if (!v14 || atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return v20;
}

void sub_1105EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1105ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1105EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1105EF8(unsigned int *a1, unsigned int a2, double a3, double a4)
{
  uint64_t v5 = *(uint64_t ***)a1;
  int v6 = **(uint64_t ***)a1;
  if (v6)
  {
    unsigned __int16 v8 = (void *)*((void *)a1 + 1);
    uint64_t v9 = *v6;
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(**(void **)a1 + 8) - v9) >> 2);
    for (unint64_t i = (unint64_t)v8 + 1; (unint64_t)v8 + 1 < v10; unint64_t i = (unint64_t)v8 + 1)
    {
      unsigned int v12 = a1[4];
      BOOL v13 = a2 >= v12;
      unsigned int v14 = a2 - v12;
      if (!v13) {
        break;
      }
      a2 = v14;
      sub_1106108((uint64_t)a1);
      uint64_t v5 = *(uint64_t ***)a1;
      int v15 = **(uint64_t ***)a1;
      if (!v15) {
        return a2 == 0;
      }
      unsigned __int16 v8 = (void *)*((void *)a1 + 1);
      uint64_t v9 = *v15;
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(**(void **)a1 + 8) - v9) >> 2);
    }
    if (i < v10 && a2)
    {
      LODWORD(a4) = a1[4];
      double v16 = (double)*(unint64_t *)&a4;
      uint64_t v35 = *(void *)(a1 + 5);
      unsigned int v36 = a1[7];
      uint64_t v17 = v10 - (void)v8 - 2;
      if (*((_DWORD *)v5 + 4) == 1) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = i;
      }
      unsigned long long v19 = (uint64_t *)(v9 + 12 * v18);
      int v20 = *((_DWORD *)v19 + 2);
      double v21 = (double)a2 / v16;
      uint64_t v33 = *v19;
      int v34 = v20;
      unsigned int v32 = sub_4F44((unsigned int *)&v33);
      int v22 = sub_4F44(&v32);
      unsigned int v31 = sub_4F44((unsigned int *)&v35);
      int v23 = v22 - sub_4F44(&v31);
      unsigned int v32 = sub_53FA4((uint64_t)&v33);
      int v24 = sub_4F44(&v32);
      unsigned int v31 = sub_53FA4((uint64_t)&v35);
      int v25 = v24 - sub_4F44(&v31);
      unsigned int v32 = sub_4F44((unsigned int *)&v35);
      uint64_t v26 = (v21 * (double)v23 + (double)sub_4F44(&v32));
      unsigned int v32 = sub_53FA4((uint64_t)&v35);
      uint64_t v27 = (v21 * (double)v25 + (double)sub_4F44(&v32));
      LODWORD(v26) = nullsub_1(v26);
      int v28 = nullsub_1(v27);
      sub_BB5C(a1 + 5, v26, v28);
      unsigned int v29 = a1[4] - a2;
      a2 = 0;
      a1[4] = v29;
    }
  }
  return a2 == 0;
}

uint64_t sub_11060FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1105B34(a2, a1);
}

uint64_t sub_1106108(uint64_t a1)
{
  unsigned long long v2 = *(uint64_t ***)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = v3 + 1;
  *(void *)(a1 + 8) = v3 + 1;
  if (*v2 && (uint64_t v5 = **v2, v6 = 0xAAAAAAAAAAAAAAABLL * (((*v2)[1] - v5) >> 2), v6 > v4))
  {
    if (*((_DWORD *)v2 + 4) == 1) {
      int v7 = (_DWORD *)(v5 + 12 * (v6 - v3) - 24);
    }
    else {
      int v7 = (_DWORD *)(v5 + 12 * v4);
    }
  }
  else
  {
    int v7 = sub_11055D8();
    unsigned long long v2 = *(uint64_t ***)a1;
    unint64_t v4 = *(void *)(a1 + 8);
  }
  int v8 = v7[2];
  *(void *)(a1 + 20) = *(void *)v7;
  *(_DWORD *)(a1 + 28) = v8;
  if (*v2 && (uint64_t v9 = v4 + 1, v10 = **v2, v11 = 0xAAAAAAAAAAAAAAABLL * (((*v2)[1] - v10) >> 2), v4 + 1 < v11))
  {
    uint64_t v12 = v11 - v4 - 2;
    if (*((_DWORD *)v2 + 4) != 1) {
      uint64_t v12 = v9;
    }
    uint64_t result = sub_1105880((unsigned int *)(a1 + 20), (unsigned int *)(v10 + 12 * v12));
    *(_DWORD *)(a1 + 16) = result;
  }
  else
  {
    uint64_t result = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
  return result;
}

BOOL sub_1106208(uint64_t **a1, unsigned int *a2, unsigned __int16 *a3)
{
  uint64_t v3 = (void *)**a1;
  if (!v3 || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 2) < 2) {
    return 0;
  }
  sub_1105674(&v50);
  uint64_t v7 = **a1;
  if (v7 && (int v8 = *(_DWORD **)v7, (v9 = *(void *)(v7 + 8) - *(void *)v7) != 0))
  {
    if (*((_DWORD *)*a1 + 4) == 1) {
      int v8 = &v8[(v9 >> 2) - 3];
    }
  }
  else
  {
    int v8 = sub_11055D8();
  }
  uint64_t v10 = *(void *)v8;
  int v49 = v8[2];
  uint64_t v48 = v10;
  unint64_t v11 = *a1;
  uint64_t v12 = (void *)**a1;
  if (v12)
  {
    BOOL v13 = 0;
    uint64_t v41 = -1;
    unsigned int v14 = 1000000;
    uint64_t v15 = -2;
    unint64_t v16 = 1;
    uint64_t v17 = 12;
    while (1)
    {
      if (v16 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12[1] - *v12) >> 2)) {
        goto LABEL_38;
      }
      unsigned long long v19 = v12;
      uint64_t v18 = *v12;
      unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v19[1] - v18) >> 2);
      if (v20 <= v16)
      {
        int v24 = sub_11055D8();
      }
      else
      {
        int v21 = *((_DWORD *)v11 + 4);
        if (v21 == 1)
        {
          int v24 = (_DWORD *)(v18 + 12 * (v15 + v20));
        }
        else
        {
          uint64_t v22 = v18 + 12 * v16;
          uint64_t v23 = v18 + v17;
          int v24 = (_DWORD *)(v21 ? v22 : v23);
        }
      }
      uint64_t v25 = *(void *)v24;
      int v47 = v24[2];
      uint64_t v46 = v25;
      sub_1105950((uint64_t)v45, &v48, &v46);
      uint64_t v43 = sub_1105974(v45, a2);
      int v44 = v26;
      unsigned int v27 = sub_1105880((unsigned int *)&v43, a2);
      if (v27 <= 9) {
        break;
      }
LABEL_12:
      uint64_t v48 = v46;
      int v49 = v47;
      ++v16;
      unint64_t v11 = *a1;
      uint64_t v12 = (void *)**a1;
      --v15;
      v17 += 12;
      if (!v12) {
        goto LABEL_38;
      }
    }
    unsigned int v28 = v27;
    if (a3)
    {
      long long v52 = *(_OWORD *)a1;
      unsigned int v29 = a1[2];
      *((void *)&v52 + 1) = v16 - 1;
      v53[0] = v29;
      v53[3] = v44;
      *(void *)&v53[1] = v43;
      if (*(void *)v52
        && (uint64_t v30 = **(void **)v52, v16 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(*(void *)v52 + 8) - v30) >> 2)))
      {
        if (*(_DWORD *)(v52 + 16) == 1) {
          unint64_t v31 = v15 - 0x5555555555555555 * ((*(void *)(*(void *)v52 + 8) - v30) >> 2);
        }
        else {
          unint64_t v31 = v16;
        }
        int v32 = sub_1105880(&v53[1], (unsigned int *)(v30 + 12 * v31));
      }
      else
      {
        int v32 = 0;
      }
      v53[0] = v32;
      LOWORD(v52) = sub_1105D44(&v52);
      BOOL v34 = sub_1105178(&v52, *a3, v33) < 0.785398163;
      if (v14 > 0xA) {
        goto LABEL_11;
      }
    }
    else
    {
      BOOL v34 = 0;
      if (v14 > 0xA)
      {
LABEL_11:
        int v50 = (uint64_t *)v43;
        int v51 = v44;
        uint64_t v41 = v16 - !sub_11056BC(&v43, (unsigned int *)&v46);
        BOOL v13 = v34;
        unsigned int v14 = v28;
        goto LABEL_12;
      }
    }
    if ((v13 || !v34) && (((v13 ^ v34) & 1) != 0 || v28 >= v14)) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  uint64_t v41 = -1;
LABEL_38:
  BOOL v4 = v41 != -1;
  if (v41 != -1)
  {
    *(uint64_t **)((char *)a1 + 20) = v50;
    a1[1] = (uint64_t *)v41;
    *((_DWORD *)a1 + 7) = v51;
    if (*v11
      && (uint64_t v35 = *(void *)*v11, v36 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(*v11 + 8) - v35) >> 2), v41 + 1 < v36))
    {
      uint64_t v37 = v36 - v41 - 2;
      if (*((_DWORD *)v11 + 4) == 1) {
        uint64_t v38 = v37;
      }
      else {
        uint64_t v38 = v41 + 1;
      }
      int v39 = sub_1105880((unsigned int *)a1 + 5, (unsigned int *)(v35 + 12 * v38));
    }
    else
    {
      int v39 = 0;
    }
    *((_DWORD *)a1 + 4) = v39;
  }
  return v4;
}

uint64_t sub_11065B0(uint64_t result, void *a2, int a3)
{
  uint64_t v3 = a2[1];
  *(void *)uint64_t result = *a2;
  *(void *)(result + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(result + 16) = a3;
  return result;
}

uint64_t sub_11065D0(uint64_t result)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_11065DC(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    *(_DWORD *)(a1 + 16) = a3;
  }
  else
  {
    *(_DWORD *)(a1 + 16) = a3;
  }
}

uint64_t sub_1106680(uint64_t **a1, unsigned int *a2, unsigned int *a3, unint64_t *a4)
{
  sub_1105674(&v35);
  if (!*a1 || (uint64_t v6 = **a1, v7 = (*a1)[1], v7 == v6))
  {
    uint64_t v9 = sub_11055D8();
    uint64_t v6 = **a1;
    uint64_t v7 = (*a1)[1];
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 2);
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 2);
    if (*((_DWORD *)a1 + 4) == 1) {
      uint64_t v9 = (_DWORD *)(v6 + 4 * ((v7 - v6) >> 2) - 12);
    }
    else {
      uint64_t v9 = (_DWORD *)**a1;
    }
  }
  unsigned int v10 = 40030230;
  uint64_t v11 = *(void *)v9;
  int v34 = v9[2];
  uint64_t v33 = v11;
  if (v8 < 2)
  {
    unint64_t v12 = 0;
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t v13 = -2;
    unint64_t v14 = 1;
    uint64_t v15 = 12;
    do
    {
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 2);
      if (v16 <= v14)
      {
        unint64_t v20 = sub_11055D8();
      }
      else
      {
        int v17 = *((_DWORD *)a1 + 4);
        if (v17 == 1)
        {
          unint64_t v20 = (_DWORD *)(v6 + 12 * (v13 + v16));
        }
        else
        {
          uint64_t v18 = (_DWORD *)(v6 + 12 * v14);
          unsigned long long v19 = (_DWORD *)(v6 + v15);
          if (v17) {
            unint64_t v20 = v18;
          }
          else {
            unint64_t v20 = v19;
          }
        }
      }
      uint64_t v21 = *(void *)v20;
      int v32 = v20[2];
      uint64_t v31 = v21;
      sub_1105950((uint64_t)v30, &v33, &v31);
      uint64_t v28 = sub_1105974(v30, a2);
      int v29 = v22;
      unsigned int v23 = sub_1105880((unsigned int *)&v28, a2);
      if (v23 < v10)
      {
        unsigned int v24 = v23;
        uint64_t v35 = v28;
        int v36 = v29;
        unint64_t v12 = v14 - !sub_11056BC(&v28, (unsigned int *)&v31);
        unsigned int v10 = v24;
      }
      uint64_t v33 = v31;
      int v34 = v32;
      ++v14;
      uint64_t v6 = **a1;
      uint64_t v7 = (*a1)[1];
      --v13;
      v15 += 12;
    }
    while (v14 < 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 2));
  }
  if (a3) {
    *a3 = v10;
  }
  if (a4) {
    *a4 = v12;
  }
  return v35;
}

uint64_t sub_1106898(uint64_t a1)
{
  sub_1105B34((uint64_t)v2, a1);
  return sub_1105D44(v2);
}

uint64_t sub_11068C8(uint64_t *a1)
{
  unint64_t v1 = (std::__shared_weak_count *)a1[1];
  uint64_t v9 = *a1;
  unsigned int v10 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v2 = *((_DWORD *)a1 + 4);
  int v11 = v2;
  if (v2)
  {
    if (v2 != 1) {
      goto LABEL_8;
    }
    int v3 = 0;
  }
  else
  {
    int v3 = 1;
  }
  int v11 = v3;
LABEL_8:
  sub_1105B34((uint64_t)v12, (uint64_t)&v9);
  unsigned __int16 v8 = sub_1105D44(v12);
  unsigned __int16 v4 = sub_1104F84();
  uint64_t result = sub_110516C(&v8, v4);
  uint64_t v6 = result;
  uint64_t v7 = v10;
  if (v10)
  {
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      return v6;
    }
  }
  return result;
}

void sub_11069B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_11069C8(uint64_t a1, unsigned int *a2)
{
  sub_1105B34((uint64_t)v4, a1);
  if (sub_1106208((uint64_t **)v4, a2, 0)) {
    return sub_1105D44(v4);
  }
  else {
    return sub_35E640();
  }
}

_DWORD *sub_1106A2C(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t sub_1106A34(double a1)
{
  for (double i = a1 + 90.0; i < 0.0; double i = i + 360.0)
    ;
  for (; i >= 360.0; double i = i + -360.0)
    ;
  return (i * 4294967300.0 / 360.0);
}

uint64_t sub_1106AC0(int a1, int a2)
{
  return (a2 + a1) >> 1;
}

double sub_1106ACC(_DWORD *a1, double a2)
{
  LODWORD(a2) = *a1;
  double result = (double)*(unint64_t *)&a2 * 360.0 * 2.32830644e-10 + -90.0;
  if (result >= 180.0) {
    return result + -360.0;
  }
  return result;
}

BOOL sub_1106B28(_DWORD *a1, unsigned int a2)
{
  unsigned int v2 = *a1 - a2;
  if (*a1 < a2) {
    unsigned int v2 = a2 - *a1;
  }
  return v2 < 2;
}

uint64_t sub_1106B44(int a1, int a2)
{
  return (a1 - a2 + 0x40000000);
}

double sub_1106B54(int a1)
{
  unsigned __int16 v1 = nullsub_1((a1 - 0x40000000) >> 16);

  return sub_11052AC(v1);
}

uint64_t sub_1106B8C(double a1)
{
  for (; a1 < 0.0; a1 = a1 + 360.0)
    ;
  for (; a1 >= 360.0; a1 = a1 + -360.0)
    ;
  return (a1 * 4294967300.0 / 360.0);
}

double sub_1106C0C(_DWORD *a1, double a2)
{
  LODWORD(a2) = *a1;
  double result = (double)*(unint64_t *)&a2 * 360.0 / 4294967300.0;
  if (result >= 180.0) {
    return result + -360.0;
  }
  return result;
}

uint64_t sub_1106C5C(int a1, int a2)
{
  return (a1 - a2);
}

void sub_1106C64()
{
}

uint64_t *sub_1106CAC(uint64_t *result)
{
  uint64_t v1 = *result;
  *double result = 0;
  if (v1)
  {
    unsigned int v2 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v2;
      operator delete(v2);
    }
    operator delete();
  }
  return result;
}

uint64_t sub_1106D04(char ***a1, uint64_t a2)
{
  unsigned __int16 v4 = **a1;
  if ((*a1)[1] != v4) {
    (*a1)[1] = v4;
  }
  int v5 = sub_1108BBC(a2, 8);
  if (v5 > 3)
  {
    if (v5 == 4)
    {
      uint64_t v6 = a1;
      uint64_t v7 = a2;
      int v8 = 1;
      return sub_1108388(v6, v7, v8);
    }
    if (v5 != 64) {
      return 2;
    }
  }
  else if (v5 != 2)
  {
    if (v5 == 3)
    {
      uint64_t v6 = a1;
      uint64_t v7 = a2;
      int v8 = 0;
      return sub_1108388(v6, v7, v8);
    }
    return 2;
  }

  return sub_1107F00(a1, a2);
}

uint64_t sub_1106DE8(void **a1, unsigned int a2)
{
  return **a1 + 32 * a2;
}

uint64_t sub_1106DFC(uint64_t a1)
{
  return (*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 5;
}

void sub_1106E10(char ***a1, _OWORD *a2)
{
  sub_1105498((uint64_t)v18);
  if (sub_11054EC((uint64_t)a2, (uint64_t)v18))
  {
    unsigned __int16 v4 = *a1;
    uint64_t v6 = v4[1];
    unint64_t v5 = (unint64_t)v4[2];
    if ((unint64_t)v6 >= v5)
    {
      uint64_t v9 = *v4;
      uint64_t v10 = (v6 - *v4) >> 5;
      unint64_t v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 59) {
        sub_2E00();
      }
      uint64_t v12 = v5 - (void)v9;
      if (v12 >> 4 > v11) {
        unint64_t v11 = v12 >> 4;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13)
      {
        if (v13 >> 59) {
          sub_188D718();
        }
        unint64_t v14 = (char *)operator new(32 * v13);
      }
      else
      {
        unint64_t v14 = 0;
      }
      uint64_t v15 = &v14[32 * v10];
      long long v16 = a2[1];
      *(_OWORD *)uint64_t v15 = *a2;
      *((_OWORD *)v15 + 1) = v16;
      int v8 = v15 + 32;
      if (v6 != v9)
      {
        do
        {
          long long v17 = *((_OWORD *)v6 - 1);
          *((_OWORD *)v15 - 2) = *((_OWORD *)v6 - 2);
          *((_OWORD *)v15 - 1) = v17;
          v15 -= 32;
          v6 -= 32;
        }
        while (v6 != v9);
        uint64_t v6 = *v4;
      }
      *unsigned __int16 v4 = v15;
      v4[1] = v8;
      _OWORD v4[2] = &v14[32 * v13];
      if (v6) {
        operator delete(v6);
      }
    }
    else
    {
      long long v7 = a2[1];
      *(_OWORD *)uint64_t v6 = *a2;
      *((_OWORD *)v6 + 1) = v7;
      int v8 = v6 + 32;
    }
    v4[1] = v8;
  }
}

void sub_1106F34(char **a1, _OWORD *a2)
{
  unint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    long long v6 = a2[1];
    *(_OWORD *)unint64_t v5 = *a2;
    *((_OWORD *)v5 + 1) = v6;
    long long v7 = v5 + 32;
LABEL_3:
    a1[1] = v7;
    return;
  }
  int v8 = *a1;
  uint64_t v9 = (v5 - *a1) >> 5;
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v11 = v4 - (void)v8;
  if (v11 >> 4 > v10) {
    unint64_t v10 = v11 >> 4;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 >> 59) {
      sub_188D718();
    }
    unint64_t v13 = (char *)operator new(32 * v12);
  }
  else
  {
    unint64_t v13 = 0;
  }
  unint64_t v14 = &v13[32 * v9];
  long long v15 = a2[1];
  *(_OWORD *)unint64_t v14 = *a2;
  *((_OWORD *)v14 + 1) = v15;
  long long v7 = v14 + 32;
  if (v5 != v8)
  {
    do
    {
      long long v16 = *((_OWORD *)v5 - 1);
      *((_OWORD *)v14 - 2) = *((_OWORD *)v5 - 2);
      *((_OWORD *)v14 - 1) = v16;
      v14 -= 32;
      v5 -= 32;
    }
    while (v5 != v8);
    unint64_t v5 = *a1;
  }
  *a1 = v14;
  a1[1] = v7;
  a1[2] = &v13[32 * v12];
  if (!v5) {
    goto LABEL_3;
  }
  operator delete(v5);
  a1[1] = v7;
}

void sub_1107048(uint64_t **a1, uint64_t *a2, int a3)
{
  switch(a3)
  {
    case 4:
      sub_1109044((uint64_t)a2, 0);
      sub_110936C(a2, 4u, 8);
      unint64_t v5 = a1;
      long long v6 = a2;
      int v7 = 1;
      goto LABEL_9;
    case 3:
      sub_1109044((uint64_t)a2, 0);
      sub_110936C(a2, 3u, 8);
      unint64_t v5 = a1;
      long long v6 = a2;
      int v7 = 0;
LABEL_9:
      sub_1107468(v5, v6, v7);
      return;
    case 2:
      sub_1109044((uint64_t)a2, 1);
      sub_110936C(a2, 2u, 8);
      sub_110714C(a1, a2);
      break;
  }
}

void sub_110714C(uint64_t **a1, uint64_t *a2)
{
  unint64_t v4 = (*a1)[1] - **a1;
  sub_110936C(a2, v4 >> 5, 32);
  sub_110936C(a2, 0, 1);
  unint64_t v5 = (unsigned int *)sub_BBB4(**a1);
  unsigned int v33 = sub_4F44(v5);
  unsigned int v6 = sub_4F44(&v33);
  uint64_t v7 = sub_BBB4(**a1);
  unsigned int v33 = sub_53FA4(v7);
  unsigned int v8 = sub_4F44(&v33);
  sub_110936C(a2, v6, 32);
  sub_110936C(a2, v8, 32);
  LOWORD(v33) = sub_110545C(**a1);
  unsigned int v9 = sub_1105164((unsigned __int16 *)&v33);
  sub_110936C(a2, v9, 16);
  unsigned int v33 = sub_1105464(**a1);
  unsigned int v10 = sub_4F44(&v33);
  sub_110936C(a2, v10, 5);
  uint64_t v31 = a1;
  unsigned int v33 = sub_110546C(**a1);
  unsigned int v11 = sub_4F44(&v33);
  sub_110936C(a2, v11, 4);
  if ((v4 >> 5) >= 2)
  {
    uint64_t v12 = (v4 >> 5) - 1;
    uint64_t v13 = 32;
    do
    {
      unint64_t v14 = (unsigned int *)sub_BBB4(**v31 + v13);
      unsigned int v33 = sub_4F44(v14);
      unsigned int v15 = sub_4F44(&v33);
      uint64_t v16 = sub_BBB4(**v31 + v13);
      unsigned int v33 = sub_53FA4(v16);
      unsigned int v17 = sub_4F44(&v33);
      unsigned int v32 = v17;
      BOOL v18 = v15 < v6;
      if (v15 >= v6) {
        unsigned int v19 = v15 - v6;
      }
      else {
        unsigned int v19 = v6 - v15;
      }
      unsigned int v20 = v8 - v17;
      BOOL v21 = v17 >= v8;
      unsigned int v22 = v17 - v8;
      BOOL v23 = v17 < v8;
      if (v21) {
        unsigned int v24 = v22;
      }
      else {
        unsigned int v24 = v20;
      }
      sub_1109050(a2, v18);
      if (HIWORD(v19)) {
        int v25 = 24;
      }
      else {
        int v25 = 16;
      }
      sub_1109050(a2, HIWORD(v19) != 0);
      sub_110936C(a2, v19, v25);
      sub_1109050(a2, v23);
      if (HIWORD(v24)) {
        int v26 = 24;
      }
      else {
        int v26 = 16;
      }
      sub_1109050(a2, HIWORD(v24) != 0);
      sub_110936C(a2, v24, v26);
      unsigned int v27 = sub_4F44((unsigned int *)(**v31 + v13));
      sub_110936C(a2, v27, 2);
      if (sub_4F44((unsigned int *)(**v31 + v13)) != 1)
      {
        LOWORD(v33) = sub_110545C(**v31 + v13);
        unsigned int v28 = sub_1105164((unsigned __int16 *)&v33);
        sub_110936C(a2, v28, 16);
        unsigned int v33 = sub_1105464(**v31 + v13);
        unsigned int v29 = sub_4F44(&v33);
        sub_110936C(a2, v29, 5);
        unsigned int v33 = sub_110546C(**v31 + v13);
        unsigned int v30 = sub_4F44(&v33);
        sub_110936C(a2, v30, 4);
      }
      v13 += 32;
      unsigned int v8 = v32;
      unsigned int v6 = v15;
      --v12;
    }
    while (v12);
  }
}

void sub_1107468(uint64_t **a1, uint64_t *a2, int a3)
{
  unint64_t v4 = a2;
  unint64_t v6 = (*a1)[1] - **a1;
  unint64_t v7 = v6 >> 5;
  sub_11093EC(a2, v6 >> 5);
  char v132 = 0;
  v133 = 0;
  uint64_t v134 = 0;
  long long v129 = 0;
  int v130 = 0;
  v131 = 0;
  *(void *)&v126[4] = 0;
  std::string v127 = 0;
  uint64_t v128 = 0;
  long long v125 = a1;
  unsigned int v8 = (unsigned int *)sub_BBB4(**a1);
  *(void *)int v126 = sub_4F44(v8);
  int v9 = sub_4F44((unsigned int *)v126);
  uint64_t v10 = sub_BBB4(**a1);
  *(_DWORD *)int v126 = sub_53FA4(v10);
  int v11 = sub_4F44((unsigned int *)v126);
  if (a3)
  {
    uint64_t v12 = sub_BBB4(**a1);
    int v13 = sub_40A44C(v12);
  }
  else
  {
    int v13 = 0;
  }
  uint64_t v14 = **a1;
  v122 = v4;
  if ((unint64_t)((*a1)[1] - v14) < 0x21)
  {
    uint64_t v45 = 0;
    uint64_t v83 = 0;
    uint64_t v84 = 0;
    goto LABEL_91;
  }
  unint64_t v113 = v6 >> 5;
  unint64_t v114 = v6;
  unint64_t v15 = 1;
  int v118 = a3;
  do
  {
    int v120 = v13;
    unsigned int v17 = (unsigned int *)sub_BBB4(v14 + 32 * v15);
    *(_DWORD *)int v126 = sub_4F44(v17);
    int v18 = sub_4F44((unsigned int *)v126);
    uint64_t v19 = sub_BBB4(**v125 + 32 * v15);
    *(_DWORD *)int v126 = sub_53FA4(v19);
    int v20 = sub_4F44((unsigned int *)v126);
    if (a3)
    {
      uint64_t v21 = sub_BBB4(**v125 + 32 * v15);
      int v13 = sub_40A44C(v21);
      if (v18 - v9 >= 0) {
        int v22 = v18 - v9;
      }
      else {
        int v22 = v9 - v18;
      }
      unsigned int v24 = v133;
      BOOL v23 = v134;
      int v123 = v13;
      if (v133 < v134) {
        goto LABEL_14;
      }
    }
    else
    {
      int v13 = 0;
      if (v18 - v9 >= 0) {
        int v22 = v18 - v9;
      }
      else {
        int v22 = v9 - v18;
      }
      unsigned int v24 = v133;
      BOOL v23 = v134;
      int v123 = 0;
      if (v133 < v134)
      {
LABEL_14:
        *(_DWORD *)unsigned int v24 = v22;
        int v25 = v24 + 4;
        goto LABEL_39;
      }
    }
    int v26 = v132;
    uint64_t v27 = (v24 - v132) >> 2;
    unint64_t v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 62) {
      sub_2E00();
    }
    uint64_t v29 = v23 - v132;
    if (v29 >> 1 > v28) {
      unint64_t v28 = v29 >> 1;
    }
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v30 = v28;
    }
    if (v30)
    {
      if (v30 >> 62) {
        sub_188D718();
      }
      uint64_t v31 = operator new(4 * v30);
      unsigned int v32 = &v31[4 * v27];
      *(_DWORD *)unsigned int v32 = v22;
      uint64_t v33 = (uint64_t)(v32 + 4);
      if (v24 == v26) {
        goto LABEL_36;
      }
LABEL_30:
      unint64_t v34 = v24 - 4 - v26;
      if (v34 < 0x2C) {
        goto LABEL_138;
      }
      if ((unint64_t)(v26 - v31) < 0x20) {
        goto LABEL_138;
      }
      uint64_t v35 = (v34 >> 2) + 1;
      uint64_t v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v37 = &v24[-v36];
      v32 -= v36;
      uint64_t v38 = &v31[4 * v27 - 16];
      int v39 = (long long *)(v24 - 16);
      uint64_t v40 = v35 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v41 = *v39;
        *(v38 - 1) = *(v39 - 1);
        *uint64_t v38 = v41;
        v38 -= 2;
        v39 -= 2;
        v40 -= 8;
      }
      while (v40);
      unsigned int v24 = v37;
      if (v35 != (v35 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_138:
        do
        {
          int v42 = *((_DWORD *)v24 - 1);
          v24 -= 4;
          *((_DWORD *)v32 - 1) = v42;
          v32 -= 4;
        }
        while (v24 != v26);
      }
      goto LABEL_36;
    }
    uint64_t v31 = 0;
    unsigned int v32 = (char *)(4 * v27);
    *(_DWORD *)(4 * v27) = v22;
    uint64_t v33 = 4 * v27 + 4;
    if (v24 != v26) {
      goto LABEL_30;
    }
LABEL_36:
    char v132 = v32;
    uint64_t v134 = &v31[4 * v30];
    if (v26) {
      operator delete(v26);
    }
    a3 = v118;
    int v13 = v123;
    int v25 = (_DWORD *)v33;
LABEL_39:
    v116 = v25;
    v133 = (char *)v25;
    if (v20 - v11 >= 0) {
      int v43 = v20 - v11;
    }
    else {
      int v43 = v11 - v20;
    }
    int v44 = v130;
    if (v130 < v131)
    {
      *(_DWORD *)int v130 = v43;
      uint64_t v45 = (uint64_t)(v44 + 4);
      int v130 = v44 + 4;
      if (a3) {
        goto LABEL_65;
      }
      goto LABEL_8;
    }
    uint64_t v46 = v129;
    int64_t v47 = v130 - v129;
    uint64_t v48 = (v130 - v129) >> 2;
    unint64_t v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 62) {
      sub_2E00();
    }
    uint64_t v50 = v131 - v129;
    if ((v131 - v129) >> 1 > v49) {
      unint64_t v49 = v50 >> 1;
    }
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v51 = v49;
    }
    if (!v51)
    {
      long long v52 = 0;
      uint64_t v53 = (char *)(4 * v48);
      *(_DWORD *)(4 * v48) = v43;
      uint64_t v45 = 4 * v48 + 4;
      if (v44 == v46) {
        goto LABEL_62;
      }
LABEL_56:
      unint64_t v54 = v44 - 4 - v46;
      if (v54 < 0x2C) {
        goto LABEL_139;
      }
      if ((unint64_t)(v44 - &v52[v47]) < 0x20) {
        goto LABEL_139;
      }
      uint64_t v55 = (v54 >> 2) + 1;
      uint64_t v56 = 4 * (v55 & 0x7FFFFFFFFFFFFFF8);
      int v57 = &v44[-v56];
      v53 -= v56;
      unint64_t v58 = &v52[4 * v48 - 16];
      char v59 = v44 - 16;
      uint64_t v60 = v55 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v61 = *(_OWORD *)v59;
        *((_OWORD *)v58 - 1) = *((_OWORD *)v59 - 1);
        *(_OWORD *)unint64_t v58 = v61;
        v58 -= 32;
        v59 -= 32;
        v60 -= 8;
      }
      while (v60);
      int v44 = v57;
      if (v55 != (v55 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_139:
        do
        {
          int v62 = *((_DWORD *)v44 - 1);
          v44 -= 4;
          *((_DWORD *)v53 - 1) = v62;
          v53 -= 4;
        }
        while (v44 != v46);
      }
      goto LABEL_62;
    }
    if (v51 >> 62) {
      sub_188D718();
    }
    long long v52 = (char *)operator new(4 * v51);
    uint64_t v53 = &v52[4 * v48];
    *(_DWORD *)uint64_t v53 = v43;
    uint64_t v45 = (uint64_t)(v53 + 4);
    if (v44 != v46) {
      goto LABEL_56;
    }
LABEL_62:
    long long v129 = v53;
    v131 = &v52[4 * v51];
    if (v46) {
      operator delete(v46);
    }
    a3 = v118;
    int v13 = v123;
    int v130 = (char *)v45;
    if (v118)
    {
LABEL_65:
      if (v13 - v120 >= 0) {
        int v63 = v13 - v120;
      }
      else {
        int v63 = v120 - v13;
      }
      int v64 = v127;
      if (v127 >= v128)
      {
        uint64_t v65 = *(char **)&v126[4];
        uint64_t v66 = &v127[-*(void *)&v126[4]];
        uint64_t v67 = (uint64_t)&v127[-*(void *)&v126[4]] >> 2;
        unint64_t v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 62) {
          sub_2E00();
        }
        uint64_t v69 = (uint64_t)&v128[-*(void *)&v126[4]];
        if ((uint64_t)&v128[-*(void *)&v126[4]] >> 1 > v68) {
          unint64_t v68 = v69 >> 1;
        }
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v70 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v70 = v68;
        }
        if (v70)
        {
          if (v70 >> 62) {
            sub_188D718();
          }
          unint64_t v71 = v70;
          uint64_t v72 = operator new(4 * v70);
          unint64_t v70 = v71;
          uint64_t v73 = (char *)v72 + 4 * v67;
          *(_DWORD *)uint64_t v73 = v63;
          uint64_t v16 = (uint64_t)(v73 + 4);
          if (v64 == v65)
          {
LABEL_86:
            *(void *)&v126[4] = v73;
            uint64_t v128 = (char *)v72 + 4 * v70;
            if (v65) {
              operator delete(v65);
            }
            a3 = v118;
            int v13 = v123;
            goto LABEL_7;
          }
        }
        else
        {
          uint64_t v72 = 0;
          uint64_t v73 = (char *)(4 * v67);
          *(_DWORD *)(4 * v67) = v63;
          uint64_t v16 = 4 * v67 + 4;
          if (v64 == v65) {
            goto LABEL_86;
          }
        }
        unint64_t v74 = v64 - 4 - v65;
        if (v74 < 0x2C) {
          goto LABEL_140;
        }
        if ((unint64_t)(v64 - &v66[(void)v72]) < 0x20) {
          goto LABEL_140;
        }
        uint64_t v75 = (v74 >> 2) + 1;
        uint64_t v76 = 4 * (v75 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v77 = &v64[-v76];
        v73 -= v76;
        uint64_t v78 = (char *)v72 + 4 * v67 - 16;
        uint64_t v79 = v64 - 16;
        uint64_t v80 = v75 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v81 = *(_OWORD *)v79;
          *((_OWORD *)v78 - 1) = *((_OWORD *)v79 - 1);
          *(_OWORD *)uint64_t v78 = v81;
          v78 -= 32;
          v79 -= 32;
          v80 -= 8;
        }
        while (v80);
        int v64 = v77;
        if (v75 != (v75 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_140:
          do
          {
            int v82 = *((_DWORD *)v64 - 1);
            v64 -= 4;
            *((_DWORD *)v73 - 1) = v82;
            v73 -= 4;
          }
          while (v64 != v65);
        }
        goto LABEL_86;
      }
      *(_DWORD *)std::string v127 = v63;
      uint64_t v16 = (uint64_t)(v64 + 4);
LABEL_7:
      std::string v127 = (char *)v16;
    }
LABEL_8:
    unint64_t v15 = (v15 + 1);
    uint64_t v14 = **v125;
    int v11 = v20;
    int v9 = v18;
  }
  while (v15 < ((*v125)[1] - v14) >> 5);
  uint64_t v84 = v132;
  unint64_t v4 = v122;
  LODWORD(v7) = v113;
  unint64_t v6 = v114;
  uint64_t v83 = (char *)v116;
LABEL_91:
  int v124 = sub_1109710(v84, (v83 - v84) >> 2);
  uint64_t v85 = v129;
  int v121 = sub_1109710(v129, (v45 - (uint64_t)v129) >> 2);
  if (a3)
  {
    int v119 = sub_1109710(*(_DWORD **)&v126[4], (uint64_t)&v127[-*(void *)&v126[4]] >> 2);
    unint64_t v4 = v122;
  }
  else
  {
    int v119 = 0;
  }
  sub_11093EC(v4, v124 + 1);
  sub_11093EC(v122, v121 + 1);
  if (a3) {
    sub_11093EC(v122, v119 + 1);
  }
  unint64_t v86 = (unsigned int *)sub_BBB4(**v125);
  *(_DWORD *)int v126 = sub_4F44(v86);
  unsigned int v87 = sub_4F44((unsigned int *)v126);
  uint64_t v88 = sub_BBB4(**v125);
  *(_DWORD *)int v126 = sub_53FA4(v88);
  unsigned int v89 = sub_4F44((unsigned int *)v126);
  if (a3)
  {
    uint64_t v90 = sub_BBB4(**v125);
    int v91 = sub_40A44C(v90);
  }
  else
  {
    int v91 = 0;
  }
  sub_110936C(v122, v87, 32);
  sub_110936C(v122, v89, 32);
  if (a3)
  {
    sub_1109050(v122, v91 >> 31);
    if (v91 >= 0) {
      unsigned int v92 = v91;
    }
    else {
      unsigned int v92 = -v91;
    }
    sub_110936C(v122, v92, 32);
  }
  *(_WORD *)int v126 = sub_110545C(**v125);
  double v94 = sub_110513C(v126, v93);
  sub_110936C(v122, rint(v94), 9);
  long long v117 = v84;
  *(_DWORD *)int v126 = sub_1105464(**v125);
  unsigned int v95 = sub_4F44((unsigned int *)v126);
  sub_110936C(v122, v95, 5);
  std::string v115 = v85;
  *(_DWORD *)int v126 = sub_110546C(**v125);
  unsigned int v96 = sub_4F44((unsigned int *)v126);
  sub_110936C(v122, v96, 4);
  if (v7 >= 2)
  {
    uint64_t v97 = (v6 >> 5) - 1;
    uint64_t v98 = 32;
    do
    {
      BOOL v99 = (unsigned int *)sub_BBB4(**v125 + v98);
      *(_DWORD *)int v126 = sub_4F44(v99);
      int v100 = sub_4F44((unsigned int *)v126);
      uint64_t v101 = sub_BBB4(**v125 + v98);
      *(_DWORD *)int v126 = sub_53FA4(v101);
      int v102 = sub_4F44((unsigned int *)v126);
      if (a3)
      {
        uint64_t v103 = sub_BBB4(**v125 + v98);
        int v104 = sub_40A44C(v103);
      }
      else
      {
        int v104 = 0;
      }
      sub_1109050(v122, (v100 - v87) >> 31);
      if ((int)(v100 - v87) >= 0) {
        unsigned int v105 = v100 - v87;
      }
      else {
        unsigned int v105 = v87 - v100;
      }
      sub_1109638(v122, v105, v124);
      sub_1109050(v122, (v102 - v89) >> 31);
      if ((int)(v102 - v89) >= 0) {
        unsigned int v106 = v102 - v89;
      }
      else {
        unsigned int v106 = v89 - v102;
      }
      sub_1109638(v122, v106, v121);
      if (a3)
      {
        sub_1109050(v122, (v104 - v91) >> 31);
        if (v104 - v91 >= 0) {
          unsigned int v107 = v104 - v91;
        }
        else {
          unsigned int v107 = v91 - v104;
        }
        sub_1109638(v122, v107, v119);
      }
      unsigned int v108 = sub_4F44((unsigned int *)(**v125 + v98));
      sub_110936C(v122, v108, 2);
      if (sub_4F44((unsigned int *)(**v125 + v98)) != 1)
      {
        *(_WORD *)int v126 = sub_110545C(**v125 + v98);
        double v110 = sub_110513C(v126, v109);
        sub_110936C(v122, rint(v110), 9);
        *(_DWORD *)int v126 = sub_1105464(**v125 + v98);
        unsigned int v111 = sub_4F44((unsigned int *)v126);
        sub_110936C(v122, v111, 5);
        *(_DWORD *)int v126 = sub_110546C(**v125 + v98);
        unsigned int v112 = sub_4F44((unsigned int *)v126);
        sub_110936C(v122, v112, 4);
      }
      v98 += 32;
      int v91 = v104;
      unsigned int v89 = v102;
      unsigned int v87 = v100;
      --v97;
    }
    while (v97);
  }
  if (*(void *)&v126[4]) {
    operator delete(*(void **)&v126[4]);
  }
  if (v115) {
    operator delete(v115);
  }
  if (v117) {
    operator delete(v117);
  }
}

void sub_1107E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p)
  {
    operator delete(__p);
    unsigned int v24 = a21;
    if (!a21)
    {
LABEL_3:
      int v25 = *(void **)(v22 - 104);
      if (!v25) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    unsigned int v24 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  operator delete(v24);
  int v25 = *(void **)(v22 - 104);
  if (!v25) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  *(void *)(v22 - 96) = v25;
  operator delete(v25);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1107F00(char ***a1, uint64_t a2)
{
  sub_1108BB4(a2, 1);
  uint64_t v4 = sub_1108BBC(a2, 32);
  sub_1108BBC(a2, 1);
  sub_1105350((uint64_t)&v68);
  uint64_t v5 = sub_1108BBC(a2, 32);
  uint64_t v6 = sub_1108BBC(a2, 32);
  sub_BB6C(&v68, 0);
  int v7 = nullsub_1(v5);
  int v8 = nullsub_1(v6);
  sub_11056AC(&v67, v7, v8);
  sub_1105474((uint64_t)&v68, &v67);
  unsigned __int16 v9 = sub_1108BBC(a2, 16);
  __int16 v10 = nullsub_1(v9);
  sub_1105488((uint64_t)&v68, v10);
  int v11 = sub_1108BBC(a2, 5);
  sub_BB6C(&v66, v11);
  sub_1105490((uint64_t)&v68, v66);
  unsigned int v12 = sub_1108BBC(a2, 4);
  sub_11055C4(&v65, v12);
  sub_FE4750((uint64_t)&v68, v65);
  int v13 = *a1;
  unint64_t v15 = (*a1)[1];
  unint64_t v14 = (unint64_t)(*a1)[2];
  if ((unint64_t)v15 >= v14)
  {
    int v18 = *v13;
    uint64_t v19 = (v15 - *v13) >> 5;
    unint64_t v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 59) {
LABEL_59:
    }
      sub_2E00();
    uint64_t v21 = v14 - (void)v18;
    if (v21 >> 4 > v20) {
      unint64_t v20 = v21 >> 4;
    }
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v22 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v20;
    }
    if (v22)
    {
      if (v22 >> 59) {
LABEL_60:
      }
        sub_188D718();
      BOOL v23 = (char *)operator new(32 * v22);
    }
    else
    {
      BOOL v23 = 0;
    }
    unsigned int v24 = &v23[32 * v19];
    long long v25 = v69;
    *(_OWORD *)unsigned int v24 = v68;
    *((_OWORD *)v24 + 1) = v25;
    unsigned int v17 = v24 + 32;
    if (v15 != v18)
    {
      do
      {
        long long v26 = *((_OWORD *)v15 - 1);
        *((_OWORD *)v24 - 2) = *((_OWORD *)v15 - 2);
        *((_OWORD *)v24 - 1) = v26;
        v24 -= 32;
        v15 -= 32;
      }
      while (v15 != v18);
      unint64_t v15 = *v13;
    }
    *int v13 = v24;
    v13[1] = v17;
    v13[2] = &v23[32 * v22];
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    long long v16 = v69;
    *(_OWORD *)unint64_t v15 = v68;
    *((_OWORD *)v15 + 1) = v16;
    unsigned int v17 = v15 + 32;
  }
  v13[1] = v17;
  int v27 = *(unsigned __int8 *)(a2 + 36);
  if (v4 >= 2 && !*(unsigned char *)(a2 + 36))
  {
    unsigned int v28 = 1;
    do
    {
      int v29 = sub_1108BBC(a2, 1);
      if (sub_1108BBC(a2, 1)) {
        int v30 = 24;
      }
      else {
        int v30 = 16;
      }
      int v31 = sub_1108BBC(a2, v30);
      if (v29) {
        int v32 = -v31;
      }
      else {
        int v32 = v31;
      }
      uint64_t v5 = (v32 + v5);
      int v33 = sub_1108BBC(a2, 1);
      if (sub_1108BBC(a2, 1)) {
        int v34 = 24;
      }
      else {
        int v34 = 16;
      }
      int v35 = sub_1108BBC(a2, v34);
      if (v33) {
        int v36 = -v35;
      }
      else {
        int v36 = v35;
      }
      uint64_t v6 = (v36 + v6);
      int v37 = nullsub_1(v5);
      int v38 = nullsub_1(v6);
      sub_11056AC(&v67, v37, v38);
      sub_1105474((uint64_t)&v68, &v67);
      int v39 = sub_1108BBC(a2, 2);
      sub_BB6C(&v68, v39);
      if (!sub_50E294(&v68))
      {
        unsigned __int16 v40 = sub_1108BBC(a2, 16);
        __int16 v41 = nullsub_1(v40);
        sub_1105488((uint64_t)&v68, v41);
        int v42 = sub_1108BBC(a2, 5);
        sub_BB6C(&v64, v42);
        sub_1105490((uint64_t)&v68, v64);
        unsigned int v43 = sub_1108BBC(a2, 4);
        sub_11055C4(&v63, v43);
        sub_FE4750((uint64_t)&v68, v63);
      }
      int v44 = *a1;
      uint64_t v46 = (*a1)[1];
      unint64_t v45 = (unint64_t)(*a1)[2];
      if ((unint64_t)v46 >= v45)
      {
        int v62 = v6;
        int v48 = v5;
        uint64_t v5 = v4;
        unint64_t v49 = a1;
        uint64_t v50 = *v44;
        uint64_t v51 = (v46 - *v44) >> 5;
        unint64_t v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 59) {
          goto LABEL_59;
        }
        uint64_t v53 = v45 - (void)v50;
        if (v53 >> 4 > v52) {
          unint64_t v52 = v53 >> 4;
        }
        if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v54 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v54 = v52;
        }
        if (v54)
        {
          if (v54 >> 59) {
            goto LABEL_60;
          }
          uint64_t v55 = (char *)operator new(32 * v54);
        }
        else
        {
          uint64_t v55 = 0;
        }
        long long v56 = v69;
        int v57 = &v55[32 * v51];
        *(_OWORD *)int v57 = v68;
        *((_OWORD *)v57 + 1) = v56;
        unint64_t v58 = v57;
        a1 = v49;
        if (v46 != v50)
        {
          do
          {
            long long v59 = *((_OWORD *)v46 - 1);
            *((_OWORD *)v58 - 2) = *((_OWORD *)v46 - 2);
            *((_OWORD *)v58 - 1) = v59;
            v58 -= 32;
            v46 -= 32;
          }
          while (v46 != v50);
          uint64_t v46 = *v44;
        }
        uint64_t v4 = v5;
        uint64_t v60 = v57 + 32;
        char *v44 = v58;
        v44[1] = v57 + 32;
        v44[2] = &v55[32 * v54];
        LODWORD(v5) = v48;
        if (v46) {
          operator delete(v46);
        }
        LODWORD(v6) = v62;
        v44[1] = v60;
        ++v28;
        int v27 = *(unsigned __int8 *)(a2 + 36);
        if (v28 >= v4) {
          break;
        }
      }
      else
      {
        long long v47 = v69;
        *(_OWORD *)uint64_t v46 = v68;
        *((_OWORD *)v46 + 1) = v47;
        v44[1] = v46 + 32;
        ++v28;
        int v27 = *(unsigned __int8 *)(a2 + 36);
        if (v28 >= v4) {
          break;
        }
      }
    }
    while (!v27);
  }
  if (!v27) {
    return 0;
  }
  (*a1)[1] = **a1;
  return 1;
}

uint64_t sub_1108388(char ***a1, uint64_t a2, int a3)
{
  sub_1108BB4(a2, 0);
  unsigned int v71 = 0;
  uint64_t result = sub_1108CBC(a2, &v71);
  if (!result)
  {
    int v70 = 0;
    uint64_t result = sub_1108CBC(a2, &v70);
    if (!result)
    {
      if (--v70 > 0x20) {
        return 1;
      }
      int v69 = 0;
      uint64_t result = sub_1108CBC(a2, &v69);
      if (!result)
      {
        if (--v69 > 0x20) {
          return 1;
        }
        int v68 = 0;
        if (a3)
        {
          uint64_t result = sub_1108CBC(a2, &v68);
          if (result) {
            return result;
          }
          if (--v68 > 0x20) {
            return 1;
          }
        }
        sub_1105350((uint64_t)v67);
        uint64_t v7 = sub_1108BBC(a2, 32);
        uint64_t v8 = sub_1108BBC(a2, 32);
        if (a3)
        {
          int v9 = sub_1108870(a2);
          int v10 = sub_1108BBC(a2, 32);
          if (v9) {
            int v11 = -v10;
          }
          else {
            int v11 = v10;
          }
          sub_BB6C(v67, 0);
          int v12 = nullsub_1(v7);
          int v13 = nullsub_1(v8);
          sub_40A2D8(&v63, v12, v13, v11);
        }
        else
        {
          sub_BB6C(v67, 0);
          int v14 = nullsub_1(v7);
          int v15 = nullsub_1(v8);
          sub_11056AC(&v63, v14, v15);
          int v11 = 0;
        }
        sub_1105474((uint64_t)v67, (uint64_t *)&v63);
        unsigned int v16 = sub_1108BBC(a2, 9);
        __int16 v17 = sub_11050E8((double)v16);
        sub_1105488((uint64_t)v67, v17);
        int v18 = sub_1108BBC(a2, 5);
        sub_BB6C(&v66, v18);
        sub_1105490((uint64_t)v67, v66);
        unsigned int v19 = sub_1108BBC(a2, 4);
        sub_11055C4(&v65, v19);
        sub_FE4750((uint64_t)v67, v65);
        sub_1106F34(*a1, v67);
        int v20 = *(unsigned __int8 *)(a2 + 36);
        if (v71 >= 2 && !*(unsigned char *)(a2 + 36))
        {
          unsigned int v21 = 1;
          int v58 = a3;
          do
          {
            sub_1105350((uint64_t)&v63);
            int v22 = sub_1108BBC(a2, 1);
            int v23 = sub_1108E40((uint64_t *)a2, v70);
            if (v22) {
              int v24 = -v23;
            }
            else {
              int v24 = v23;
            }
            uint64_t v7 = (v24 + v7);
            int v25 = sub_1108BBC(a2, 1);
            int v26 = sub_1108E40((uint64_t *)a2, v69);
            if (v25) {
              int v27 = -v26;
            }
            else {
              int v27 = v26;
            }
            uint64_t v8 = (v27 + v8);
            if (a3)
            {
              int v28 = sub_1108BBC(a2, 1);
              int v29 = sub_1108E40((uint64_t *)a2, v68);
              if (v28) {
                int v30 = -v29;
              }
              else {
                int v30 = v29;
              }
              v11 += v30;
              int v31 = nullsub_1(v7);
              int v32 = nullsub_1(v8);
              sub_40A2D8(&v62, v31, v32, v11);
            }
            else
            {
              int v33 = nullsub_1(v7);
              int v34 = nullsub_1(v8);
              sub_11056AC(&v62, v33, v34);
              int v11 = 0;
            }
            sub_1105474((uint64_t)&v63, &v62);
            int v35 = sub_1108BBC(a2, 2);
            sub_BB6C(&v63, v35);
            if (!sub_50E294(&v63))
            {
              unsigned int v36 = sub_1108BBC(a2, 9);
              __int16 v37 = sub_11050E8((double)v36);
              sub_1105488((uint64_t)&v63, v37);
              int v38 = sub_1108BBC(a2, 5);
              sub_BB6C(&v61, v38);
              sub_1105490((uint64_t)&v63, v61);
              unsigned int v39 = sub_1108BBC(a2, 4);
              sub_11055C4(&v60, v39);
              sub_FE4750((uint64_t)&v63, v60);
            }
            unsigned __int16 v40 = *a1;
            int v42 = (*a1)[1];
            __int16 v41 = (*a1)[2];
            if (v42 >= v41)
            {
              int v59 = v11;
              unint64_t v45 = a1;
              int v46 = v8;
              int v47 = v7;
              int v48 = *v40;
              uint64_t v49 = (v42 - *v40) >> 5;
              unint64_t v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 59) {
                sub_2E00();
              }
              uint64_t v51 = v41 - v48;
              if (v51 >> 4 > v50) {
                unint64_t v50 = v51 >> 4;
              }
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v52 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v52 = v50;
              }
              if (v52)
              {
                if (v52 >> 59) {
                  sub_188D718();
                }
                uint64_t v53 = (char *)operator new(32 * v52);
              }
              else
              {
                uint64_t v53 = 0;
              }
              long long v54 = v64;
              uint64_t v55 = &v53[32 * v49];
              *(_OWORD *)uint64_t v55 = v63;
              *((_OWORD *)v55 + 1) = v54;
              long long v56 = v55;
              if (v42 != v48)
              {
                do
                {
                  long long v57 = *((_OWORD *)v42 - 1);
                  *((_OWORD *)v56 - 2) = *((_OWORD *)v42 - 2);
                  *((_OWORD *)v56 - 1) = v57;
                  v56 -= 32;
                  v42 -= 32;
                }
                while (v42 != v48);
                int v42 = *v40;
              }
              int v44 = v55 + 32;
              unsigned char *v40 = v56;
              v40[1] = v55 + 32;
              v40[2] = &v53[32 * v52];
              LODWORD(v7) = v47;
              if (v42) {
                operator delete(v42);
              }
              LODWORD(v8) = v46;
              a1 = v45;
              a3 = v58;
              int v11 = v59;
            }
            else
            {
              long long v43 = v64;
              *(_OWORD *)int v42 = v63;
              *((_OWORD *)v42 + 1) = v43;
              int v44 = v42 + 32;
            }
            v40[1] = v44;
            ++v21;
            int v20 = *(unsigned __int8 *)(a2 + 36);
          }
          while (v21 < v71 && !*(unsigned char *)(a2 + 36));
        }
        if (v20)
        {
          (*a1)[1] = **a1;
          return 1;
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1108870(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (v1 >= *(void *)(a1 + 8))
  {
    *(unsigned char *)(a1 + 36) = 1;
    return 0;
  }
  else
  {
    int v2 = *(_DWORD *)(a1 + 32);
    uint64_t v3 = (*(_DWORD *)(*(void *)a1 + 4 * v1) >> v2) & 1;
    *(_DWORD *)(a1 + 32) = v2 + 1;
    if (v2 >= 31)
    {
      *(_DWORD *)(a1 + 32) = 0;
      *(void *)(a1 + 24) = v1 + 1;
    }
    return v3;
  }
}

uint64_t sub_11088C8(uint64_t result, int a2, uint64_t a3)
{
  *(void *)uint64_t result = off_24398B8;
  *(_DWORD *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  return result;
}

std::string *sub_11088F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + 23) = 20;
  double v3 = *(double *)"GeometryPathElement(";
  strcpy((char *)a2, "GeometryPathElement(");
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 32) != v4)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      sub_110576C((_DWORD *)(v4 + v6), __p, v3);
      if ((v13 & 0x80u) == 0) {
        uint64_t v8 = __p;
      }
      else {
        uint64_t v8 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        std::string::size_type v9 = v13;
      }
      else {
        std::string::size_type v9 = (std::string::size_type)__p[1];
      }
      std::string::append((std::string *)a2, (const std::string::value_type *)v8, v9);
      if ((char)v13 < 0) {
        operator delete(__p[0]);
      }
      ++v7;
      uint64_t v4 = *(void *)(a1 + 24);
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 32) - v4) >> 2);
      if (v7 < v10)
      {
        std::string::append((std::string *)a2, ",");
        uint64_t v4 = *(void *)(a1 + 24);
        unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 32) - v4) >> 2);
      }
      v6 += 12;
    }
    while (v7 < v10);
  }
  return std::string::append((std::string *)a2, ")");
}

void sub_1108A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0)
  {
    operator delete(*(void **)v15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1108A70(void *a1)
{
  *a1 = off_2441628;
  int v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1108AC0(void *a1)
{
  *a1 = off_2441628;
  int v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  operator delete();
}

double *sub_1108B30(double *result, double a2)
{
  *uint64_t result = a2;
  return result;
}

double sub_1108B38()
{
  return 1.0;
}

double sub_1108B40(double *a1, double a2)
{
  double result = a2 * *a1;
  *a1 = result;
  return result;
}

BOOL sub_1108B50(double *a1, double a2)
{
  return *a1 < a2;
}

BOOL sub_1108B60(double *a1, double a2)
{
  return *a1 >= a2;
}

double sub_1108B70(double *a1, double a2)
{
  return a2 * *a1;
}

double sub_1108B7C(double *a1, double a2)
{
  double v2 = *a1 - a2;
  BOOL v3 = a2 < *a1;
  double result = 0.0;
  if (v3) {
    return v2;
  }
  return result;
}

uint64_t sub_1108B94(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)double result = a2;
  *(void *)(result + 8) = (unint64_t)(a3 + 3) >> 2;
  *(unsigned char *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(unsigned char *)(result + 36) = 0;
  return result;
}

uint64_t sub_1108BB4(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

uint64_t sub_1108BBC(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 16))
  {
    uint64_t v3 = 0;
    if (a2)
    {
      unint64_t v8 = *(void *)(a1 + 8);
      unint64_t v9 = *(void *)(a1 + 24);
      int v10 = a2 - 1;
      do
      {
        if (v9 >= v8)
        {
          int v11 = 0;
          *(unsigned char *)(a1 + 36) = 1;
        }
        else
        {
          int v12 = *(_DWORD *)(a1 + 32);
          int v11 = (*(_DWORD *)(*(void *)a1 + 4 * v9) >> v12) & 1;
          *(_DWORD *)(a1 + 32) = v12 + 1;
          if (v12 >= 31)
          {
            *(_DWORD *)(a1 + 32) = 0;
            *(void *)(a1 + 24) = ++v9;
          }
        }
        uint64_t v3 = (v11 << v10--) | v3;
      }
      while (v10 != -1);
    }
    return v3;
  }
  if (a2)
  {
    int v2 = 0;
    LODWORD(v3) = 0;
    unint64_t v4 = *(void *)(a1 + 8);
    unint64_t v5 = *(void *)(a1 + 24);
    do
    {
      if (v5 >= v4)
      {
        int v6 = 0;
        *(unsigned char *)(a1 + 36) = 1;
      }
      else
      {
        int v7 = *(_DWORD *)(a1 + 32);
        int v6 = (*(_DWORD *)(*(void *)a1 + 4 * v5) >> v7) & 1;
        *(_DWORD *)(a1 + 32) = v7 + 1;
        if (v7 >= 31)
        {
          *(_DWORD *)(a1 + 32) = 0;
          *(void *)(a1 + 24) = ++v5;
        }
      }
      uint64_t v3 = (v6 << v2++) | v3;
    }
    while (a2 != v2);
    return v3;
  }
  return 0;
}

uint64_t sub_1108CBC(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 4;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 24);
  int v4 = -1;
  do
  {
    if (v3 >= v2)
    {
      LOBYTE(v6) = 0;
      *(unsigned char *)(a1 + 36) = 1;
    }
    else
    {
      int v5 = *(_DWORD *)(a1 + 32);
      int v6 = (*(_DWORD *)(*(void *)a1 + 4 * v3) >> v5) & 1;
      *(_DWORD *)(a1 + 32) = v5 + 1;
      if (v5 >= 31)
      {
        *(_DWORD *)(a1 + 32) = 0;
        *(void *)(a1 + 24) = ++v3;
      }
    }
    unsigned int v7 = ++v4;
  }
  while ((v6 & 1) == 0 && v7 < 0x20);
  uint64_t v8 = 1;
  if (v7 > 0x1F) {
    return v8;
  }
  *a2 = 1 << v4;
  if (!v4) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 16))
  {
    int v9 = 0;
    int v10 = 0;
    do
    {
      if (v3 >= v2)
      {
        int v11 = 0;
        *(unsigned char *)(a1 + 36) = 1;
      }
      else
      {
        int v12 = *(_DWORD *)(a1 + 32);
        int v11 = (*(_DWORD *)(*(void *)a1 + 4 * v3) >> v12) & 1;
        *(_DWORD *)(a1 + 32) = v12 + 1;
        if (v12 >= 31)
        {
          *(_DWORD *)(a1 + 32) = 0;
          *(void *)(a1 + 24) = ++v3;
        }
      }
      v10 |= v11 << v9++;
    }
    while (v4 != v9);
  }
  else
  {
    int v10 = 0;
    int v14 = v4 - 1;
    do
    {
      if (v3 >= v2)
      {
        int v15 = 0;
        *(unsigned char *)(a1 + 36) = 1;
      }
      else
      {
        int v16 = *(_DWORD *)(a1 + 32);
        int v15 = (*(_DWORD *)(*(void *)a1 + 4 * v3) >> v16) & 1;
        *(_DWORD *)(a1 + 32) = v16 + 1;
        if (v16 >= 31)
        {
          *(_DWORD *)(a1 + 32) = 0;
          *(void *)(a1 + 24) = ++v3;
        }
      }
      v10 |= v15 << v14--;
    }
    while (v14 != -1);
  }
  *a2 |= v10;
  return 0;
}

uint64_t sub_1108E40(uint64_t *a1, int a2)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = a1[3];
  if (v3 < v2)
  {
    int v4 = 0;
    uint64_t v5 = *a1;
    int v6 = *((_DWORD *)a1 + 8);
    while (1)
    {
      int v7 = (1 << v6) & *(_DWORD *)(v5 + 4 * v3);
      *((_DWORD *)a1 + 8) = v6 + 1;
      if (v6 >= 31)
      {
        int v6 = 0;
        *((_DWORD *)a1 + 8) = 0;
        a1[3] = ++v3;
        if (!v7) {
          goto LABEL_7;
        }
      }
      else
      {
        ++v6;
        if (!v7)
        {
LABEL_7:
          if (a2) {
            goto LABEL_8;
          }
LABEL_17:
          int v8 = 0;
          return (v8 + (v4 << a2));
        }
      }
      ++v4;
      if (v3 >= v2) {
        goto LABEL_16;
      }
    }
  }
  int v4 = 0;
LABEL_16:
  *((unsigned char *)a1 + 36) = 1;
  if (!a2) {
    goto LABEL_17;
  }
LABEL_8:
  int v8 = *((unsigned __int8 *)a1 + 16);
  if (*((unsigned char *)a1 + 16))
  {
    int v9 = 0;
    int v8 = 0;
    do
    {
      if (v3 >= v2)
      {
        int v10 = 0;
        *((unsigned char *)a1 + 36) = 1;
      }
      else
      {
        int v11 = *((_DWORD *)a1 + 8);
        int v10 = (*(_DWORD *)(*a1 + 4 * v3) >> v11) & 1;
        *((_DWORD *)a1 + 8) = v11 + 1;
        if (v11 >= 31)
        {
          *((_DWORD *)a1 + 8) = 0;
          a1[3] = ++v3;
        }
      }
      v8 |= v10 << v9++;
    }
    while (a2 != v9);
  }
  else
  {
    int v13 = a2 - 1;
    do
    {
      if (v3 >= v2)
      {
        int v14 = 0;
        *((unsigned char *)a1 + 36) = 1;
      }
      else
      {
        int v15 = *((_DWORD *)a1 + 8);
        int v14 = (*(_DWORD *)(*a1 + 4 * v3) >> v15) & 1;
        *((_DWORD *)a1 + 8) = v15 + 1;
        if (v15 >= 31)
        {
          *((_DWORD *)a1 + 8) = 0;
          a1[3] = ++v3;
        }
      }
      v8 |= v14 << v13--;
    }
    while (v13 != -1);
  }
  return (v8 + (v4 << a2));
}

void sub_1108FA0()
{
}

uint64_t *sub_1108FEC(uint64_t *result)
{
  uint64_t v1 = *result;
  *double result = 0;
  if (v1)
  {
    unint64_t v2 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v2;
      operator delete(v2);
    }
    operator delete();
  }
  return result;
}

uint64_t sub_1109044(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)result + 33) = a2;
  return result;
}

void sub_1109050(uint64_t *a1, int a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 24);
  uint64_t v5 = *(_DWORD *)(*a1 + 28) | (a2 << v4);
  *(_DWORD *)(v3 + 24) = v4 + 1;
  *(_DWORD *)(v3 + 28) = v5;
  if (v4 >= 31)
  {
    int v6 = nullsub_1(v5);
    int v7 = v6;
    int v9 = *(char **)(v3 + 8);
    unint64_t v8 = *(void *)(v3 + 16);
    if ((unint64_t)v9 < v8)
    {
      *(_DWORD *)int v9 = v6;
      uint64_t v10 = (uint64_t)(v9 + 4);
LABEL_23:
      *(void *)(v3 + 8) = v10;
      *(void *)(*a1 + 24) = 0;
      return;
    }
    int v11 = *(char **)v3;
    uint64_t v12 = (uint64_t)&v9[-*(void *)v3];
    uint64_t v13 = v12 >> 2;
    unint64_t v14 = (v12 >> 2) + 1;
    if (v14 >> 62) {
      sub_2E00();
    }
    uint64_t v15 = v8 - (void)v11;
    if (v15 >> 1 > v14) {
      unint64_t v14 = v15 >> 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 >> 62) {
        sub_188D718();
      }
      __int16 v17 = operator new(4 * v16);
      int v18 = &v17[4 * v13];
      unsigned int v19 = &v17[4 * v16];
      *int v18 = v7;
      uint64_t v10 = (uint64_t)(v18 + 1);
      int64_t v20 = v9 - v11;
      if (v9 == v11) {
        goto LABEL_21;
      }
    }
    else
    {
      __int16 v17 = 0;
      int v18 = (_DWORD *)(4 * v13);
      unsigned int v19 = 0;
      *(_DWORD *)(4 * v13) = v7;
      uint64_t v10 = 4 * v13 + 4;
      int64_t v20 = v9 - v11;
      if (v9 == v11)
      {
LABEL_21:
        *(void *)uint64_t v3 = v18;
        *(void *)(v3 + 8) = v10;
        *(void *)(v3 + 16) = v19;
        if (v11) {
          operator delete(v11);
        }
        goto LABEL_23;
      }
    }
    unint64_t v21 = v20 - 4;
    if (v21 < 0x2C) {
      goto LABEL_29;
    }
    if ((unint64_t)(v9 - &v17[v12]) < 0x20) {
      goto LABEL_29;
    }
    uint64_t v22 = (v21 >> 2) + 1;
    uint64_t v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
    int v24 = &v9[-v23];
    int v18 = (_DWORD *)((char *)v18 - v23);
    int v25 = &v17[4 * v13 - 16];
    int v26 = v9 - 16;
    uint64_t v27 = v22 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v28 = *(_OWORD *)v26;
      *(v25 - 1) = *((_OWORD *)v26 - 1);
      *int v25 = v28;
      v25 -= 2;
      v26 -= 32;
      v27 -= 8;
    }
    while (v27);
    int v9 = v24;
    if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_29:
      do
      {
        int v29 = *((_DWORD *)v9 - 1);
        v9 -= 4;
        *--int v18 = v29;
      }
      while (v9 != v11);
    }
    goto LABEL_21;
  }
}

void sub_11091F0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*(int *)(*a1 + 24) >= 1)
  {
    int v4 = *(char **)(v1 + 8);
    unint64_t v3 = *(void *)(v1 + 16);
    if ((unint64_t)v4 >= v3)
    {
      int v6 = *(char **)v1;
      uint64_t v7 = (uint64_t)&v4[-*(void *)v1];
      uint64_t v8 = v7 >> 2;
      unint64_t v9 = (v7 >> 2) + 1;
      if (v9 >> 62) {
        sub_2E00();
      }
      uint64_t v10 = v3 - (void)v6;
      if (v10 >> 1 > v9) {
        unint64_t v9 = v10 >> 1;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v9;
      }
      if (v11)
      {
        if (v11 >> 62) {
          sub_188D718();
        }
        uint64_t v12 = operator new(4 * v11);
      }
      else
      {
        uint64_t v12 = 0;
      }
      uint64_t v13 = &v12[4 * v8];
      unint64_t v14 = &v12[4 * v11];
      *uint64_t v13 = *(_DWORD *)(v1 + 28);
      uint64_t v5 = v13 + 1;
      if (v4 != v6)
      {
        unint64_t v15 = v4 - v6 - 4;
        if (v15 < 0x2C) {
          goto LABEL_29;
        }
        if ((unint64_t)(v4 - &v12[v7]) < 0x20) {
          goto LABEL_29;
        }
        uint64_t v16 = (v15 >> 2) + 1;
        uint64_t v17 = 4 * (v16 & 0x7FFFFFFFFFFFFFF8);
        int v18 = &v4[-v17];
        uint64_t v13 = (_DWORD *)((char *)v13 - v17);
        unsigned int v19 = &v12[4 * v8 - 16];
        int64_t v20 = v4 - 16;
        uint64_t v21 = v16 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v22 = *(_OWORD *)v20;
          *(v19 - 1) = *((_OWORD *)v20 - 1);
          *unsigned int v19 = v22;
          v19 -= 2;
          v20 -= 32;
          v21 -= 8;
        }
        while (v21);
        int v4 = v18;
        if (v16 != (v16 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_29:
          do
          {
            int v23 = *((_DWORD *)v4 - 1);
            v4 -= 4;
            *--uint64_t v13 = v23;
          }
          while (v4 != v6);
        }
      }
      *(void *)uint64_t v1 = v13;
      *(void *)(v1 + 8) = v5;
      *(void *)(v1 + 16) = v14;
      if (v6) {
        operator delete(v6);
      }
    }
    else
    {
      *(_DWORD *)int v4 = *(_DWORD *)(v1 + 28);
      uint64_t v5 = v4 + 4;
    }
    *(void *)(v1 + 8) = v5;
    uint64_t v1 = *a1;
  }
  *(unsigned char *)(v1 + 32) = 1;
}

void sub_110936C(uint64_t *a1, unsigned int a2, int a3)
{
  int v3 = a3;
  if (*(unsigned char *)(*a1 + 33))
  {
    if (a3)
    {
      do
      {
        sub_1109050(a1, a2 & 1);
        a2 >>= 1;
        --v3;
      }
      while (v3);
    }
  }
  else if (a3)
  {
    int v6 = a3 - 1;
    do
      sub_1109050(a1, (a2 >> v6--) & 1);
    while (v6 != -1);
  }
}

void sub_11093EC(uint64_t *a1, unsigned int a2)
{
  unsigned int v2 = a2;
  if ((a2 & 0x80000000) != 0)
  {
    int v4 = 31;
    goto LABEL_65;
  }
  if ((a2 & 0x40000000) != 0)
  {
    int v4 = 30;
    goto LABEL_65;
  }
  if ((a2 & 0x20000000) != 0)
  {
    int v4 = 29;
    goto LABEL_65;
  }
  if ((a2 & 0x10000000) != 0)
  {
    int v4 = 28;
    goto LABEL_65;
  }
  if ((a2 & 0x8000000) != 0)
  {
    int v4 = 27;
    goto LABEL_65;
  }
  if ((a2 & 0x4000000) != 0)
  {
    int v4 = 26;
    goto LABEL_65;
  }
  if ((a2 & 0x2000000) != 0)
  {
    int v4 = 25;
    goto LABEL_65;
  }
  if ((a2 & 0x1000000) != 0)
  {
    int v4 = 24;
    goto LABEL_65;
  }
  if ((a2 & 0x800000) != 0)
  {
    int v4 = 23;
    goto LABEL_65;
  }
  if ((a2 & 0x400000) != 0)
  {
    int v4 = 22;
    goto LABEL_65;
  }
  if ((a2 & 0x200000) != 0)
  {
    int v4 = 21;
    goto LABEL_65;
  }
  if ((a2 & 0x100000) != 0)
  {
    int v4 = 20;
    goto LABEL_65;
  }
  if ((a2 & 0x80000) != 0)
  {
    int v4 = 19;
    goto LABEL_65;
  }
  if ((a2 & 0x40000) != 0)
  {
    int v4 = 18;
    goto LABEL_65;
  }
  if ((a2 & 0x20000) != 0)
  {
    int v4 = 17;
    goto LABEL_65;
  }
  if ((a2 & 0x10000) != 0)
  {
    int v4 = 16;
    goto LABEL_65;
  }
  if ((a2 & 0x8000) != 0)
  {
    int v4 = 15;
    goto LABEL_65;
  }
  if ((a2 & 0x4000) != 0)
  {
    int v4 = 14;
    goto LABEL_65;
  }
  if ((a2 & 0x2000) != 0)
  {
    int v4 = 13;
    goto LABEL_65;
  }
  if ((a2 & 0x1000) != 0)
  {
    int v4 = 12;
    goto LABEL_65;
  }
  if ((a2 & 0x800) != 0)
  {
    int v4 = 11;
    goto LABEL_65;
  }
  if ((a2 & 0x400) != 0)
  {
    int v4 = 10;
    goto LABEL_65;
  }
  if ((a2 & 0x200) != 0)
  {
    int v4 = 9;
    goto LABEL_65;
  }
  if ((a2 & 0x100) != 0)
  {
    int v4 = 8;
    goto LABEL_65;
  }
  if ((a2 & 0x80) != 0)
  {
    int v4 = 7;
    goto LABEL_65;
  }
  if ((a2 & 0x40) != 0)
  {
    int v4 = 6;
    goto LABEL_65;
  }
  if ((a2 & 0x20) != 0)
  {
    int v4 = 5;
    goto LABEL_65;
  }
  if ((a2 & 0x10) != 0)
  {
    int v4 = 4;
    goto LABEL_65;
  }
  if ((a2 & 8) != 0)
  {
    int v4 = 3;
    goto LABEL_65;
  }
  if ((a2 & 4) != 0)
  {
    int v4 = 2;
    goto LABEL_65;
  }
  if ((a2 & 2) != 0)
  {
    int v4 = 1;
LABEL_65:
    if (*(unsigned char *)(*a1 + 33))
    {
      int v5 = v4;
      do
      {
        sub_1109050(a1, 0);
        --v5;
      }
      while (v5);
    }
    else
    {
      int v6 = v4;
      do
      {
        --v6;
        sub_1109050(a1, 0);
      }
      while (v6);
    }
    int v7 = v4 + 1;
    if (*(unsigned char *)(*a1 + 33)) {
      goto LABEL_72;
    }
    goto LABEL_76;
  }
  if ((a2 & 1) == 0)
  {
    int v4 = -1;
    goto LABEL_65;
  }
  int v4 = 0;
  int v7 = 1;
  if (*(unsigned char *)(*a1 + 33))
  {
LABEL_72:
    while (v7)
    {
      sub_1109050(a1, v2 & 1);
      v2 >>= 1;
      --v7;
    }
    return;
  }
LABEL_76:
  if (v7)
  {
    do
      sub_1109050(a1, (v2 >> v4--) & 1);
    while (v4 != -1);
  }
}

void sub_1109638(uint64_t *a1, unsigned int a2, int a3)
{
  int v3 = a3;
  unsigned int v6 = a2 >> a3;
  if (a2 >> a3)
  {
    unsigned int v7 = a2 >> a3;
    do
    {
      --v7;
      sub_1109050(a1, 1);
    }
    while (v7);
  }
  unsigned int v8 = a2 - (v6 << v3);
  sub_1109050(a1, 0);
  if (*(unsigned char *)(*a1 + 33))
  {
    for (; v3; --v3)
    {
      sub_1109050(a1, v8 & 1);
      v8 >>= 1;
    }
  }
  else if (v3)
  {
    int v9 = v3 - 1;
    do
      sub_1109050(a1, (v8 >> v9--) & 1);
    while (v9 != -1);
  }
}

uint64_t sub_11096F4(uint64_t a1)
{
  return **(void **)a1;
}

uint64_t sub_1109700(uint64_t a1)
{
  return *(void *)(*(void *)a1 + 8) - **(void **)a1;
}

uint64_t sub_1109710(_DWORD *a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  unsigned int v2 = 0;
  unint64_t v3 = -1;
  LODWORD(v4) = 31;
  do
  {
    unint64_t v5 = (*a1 >> v2) + v2;
    uint64_t v6 = 1;
    do
    {
      unint64_t v7 = v6;
      if (a2 == v6) {
        break;
      }
      uint64_t v8 = (a1[v6++] >> v2) + v2;
      BOOL v9 = __CFADD__(v5, v8);
      v5 += v8;
    }
    while (!v9);
    if (v7 >= a2 && v5 < v3)
    {
      unint64_t v3 = v5;
      uint64_t v4 = v2;
    }
    else
    {
      uint64_t v4 = v4;
    }
    ++v2;
  }
  while (v2 != 32);
  return v4;
}

uint64_t sub_1109790(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t result = sub_110D2C8();
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)&v255);
    sub_188FC78(&v255, (uint64_t)"The input path leg already has a compressed path populated. Skipping compression.", 81);
    v249 = operator new(0x88uLL);
    long long v250 = xmmword_20F4900;
    strcpy((char *)v249, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/src/path-codec/PathCompression.cpp");
    std::stringbuf::str();
    sub_110D2DC((uint64_t)&v249, 41, (uint64_t)&v253);
    if (v254 < 0)
    {
      operator delete(v253);
      if ((SHIBYTE(v250) & 0x80000000) == 0) {
        goto LABEL_19;
      }
    }
    else if ((SHIBYTE(v250) & 0x80000000) == 0)
    {
LABEL_19:
      if (v263 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return std::ios::~ios();
    }
    operator delete(v249);
    goto LABEL_19;
  }
  sub_1111AAC((uint64_t)&v255, 0, 0);
  unsigned int v3 = *(_DWORD *)(a2 + 32);
  unsigned int v261 = v3;
  v257 |= 9u;
  uint64_t v4 = v258;
  uint64_t v248 = a2;
  if (!v258)
  {
    unint64_t v5 = (void *)((unint64_t)v256 & 0xFFFFFFFFFFFFFFFCLL);
    if (v256) {
      unint64_t v5 = (void *)*v5;
    }
    sub_1112990((uint64_t)v5);
    uint64_t v4 = v6;
    uint64_t v258 = v6;
    unsigned int v3 = *(_DWORD *)(a2 + 32);
  }
  *(_DWORD *)(v4 + 16) |= 1u;
  v239 = (_DWORD *)(v4 + 16);
  unint64_t v7 = *(void **)(v4 + 24);
  if (!v7)
  {
    uint64_t v8 = *(void *)(v4 + 8);
    BOOL v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
    if (v8) {
      BOOL v9 = (void *)*v9;
    }
    unint64_t v7 = sub_11128D8((uint64_t)v9);
    *(void *)(v4 + 24) = v7;
  }
  *((_DWORD *)v7 + 14) = 0;
  *((_DWORD *)v7 + 4) &= ~2u;
  sub_1881FE4(v7 + 6);
  *((_DWORD *)v7 + 6) = 0;
  int v10 = *((_DWORD *)v7 + 4);
  v245 = (unsigned int *)(v7 + 3);
  *((_DWORD *)v7 + 4) = v10 & 0xFFFFFFFE;
  unsigned int v11 = v3 - 1;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = *(uint64_t (****)())(*(void *)(v12 + 8) + 32);
  if (v13) {
    unint64_t v14 = *(uint64_t (****)())(*(void *)(v12 + 8) + 32);
  }
  else {
    unint64_t v14 = &off_24F8110;
  }
  double v15 = 0.0;
  if (v3 >= 2)
  {
    if (v3 + 0x7FFFFFFF >= 0x80000002)
    {
      int v19 = 0;
      int v20 = 0;
      int v17 = v11 | 1;
      uint64_t v21 = v12 + 24;
      unsigned int v22 = v11 & 0xFFFFFFFE;
      do
      {
        int v23 = v13;
        uint64_t v13 = *(uint64_t (****)())(*(void *)v21 + 32);
        if (*(void *)(*(void *)(v21 - 8) + 32)) {
          int v24 = *(uint64_t (****)())(*(void *)(v21 - 8) + 32);
        }
        else {
          int v24 = &off_24F8110;
        }
        if (v13) {
          int v25 = *(uint64_t (****)())(*(void *)v21 + 32);
        }
        else {
          int v25 = &off_24F8110;
        }
        int v26 = *((_DWORD *)v24 + 6);
        int v27 = *((_DWORD *)v25 + 6);
        if (!v23) {
          int v23 = &off_24F8110;
        }
        int v28 = v26 - *((_DWORD *)v23 + 6);
        int v29 = v27 - v26;
        if (v28 < 0) {
          int v28 = -v28;
        }
        if (v29 < 0) {
          int v29 = -v29;
        }
        v19 += v28;
        v20 += v29;
        v21 += 16;
        v22 -= 2;
      }
      while (v22);
      int v16 = v20 + v19;
      if (v11 == (v11 & 0xFFFFFFFE)) {
        goto LABEL_45;
      }
    }
    else
    {
      int v16 = 0;
      int v17 = 1;
    }
    do
    {
      int v30 = *(uint64_t (****)())(*(void *)(v12 + 8 * v17 + 8) + 32);
      if (v30) {
        int v31 = *(uint64_t (****)())(*(void *)(v12 + 8 * v17 + 8) + 32);
      }
      else {
        int v31 = &off_24F8110;
      }
      int v32 = *((_DWORD *)v31 + 6);
      if (!v13) {
        uint64_t v13 = &off_24F8110;
      }
      int v33 = v32 - *((_DWORD *)v13 + 6);
      if (v33 < 0) {
        int v33 = -v33;
      }
      v16 += v33;
      ++v17;
      uint64_t v13 = v30;
    }
    while (v3 != v17);
LABEL_45:
    double v15 = (double)v16;
  }
  double v34 = (double)v11;
  double v35 = log2(fmax(v15 / (double)v11 * *(double *)(a1 + 104), 2.0));
  *((_DWORD *)v7 + 4) = v10 & 0xFFFFFFFA | 4;
  *((_DWORD *)v7 + 15) = 2;
  *((_DWORD *)v7 + 14) = *((_DWORD *)v14 + 6);
  *((_DWORD *)v7 + 4) = v10 | 7;
  uint64_t v36 = v7[1];
  __int16 v37 = (uint64_t *)(v36 & 0xFFFFFFFFFFFFFFFCLL);
  if (v36) {
    __int16 v37 = (uint64_t *)*v37;
  }
  int v38 = sub_1880F84(v7 + 6, v37);
  sub_110C76C(&v249, (uint64_t)v38);
  sub_110C774((std::string **)&v249, (unint64_t)((ceil(v35) + 2.0) * v34 * 0.125));
  int v39 = vcvtad_u64_f64(v35);
  sub_110C7D4(&v249, *(unsigned __int8 *)(a1 + 100), v39);
  uint64_t v241 = v4;
  if (v3 >= 2)
  {
    int v40 = 0;
    int v41 = *((_DWORD *)v7 + 14) >> 31;
    for (int i = 1; i != v3; ++i)
    {
      uint64_t v43 = *(void *)(v248 + 40) + 8;
      int v44 = *(uint64_t (****)())(*(void *)(v43 + 8 * i) + 32);
      if (!v44) {
        int v44 = &off_24F8110;
      }
      int v45 = *((_DWORD *)v44 + 6);
      int v46 = *(uint64_t (****)())(*(void *)(v43 + 8 * (i - 1)) + 32);
      if (!v46) {
        int v46 = &off_24F8110;
      }
      int v47 = v45 - *((_DWORD *)v46 + 6);
      if ((v41 & 1) != v47 >> 31)
      {
        int v48 = i - v40;
        uint64_t v49 = *((unsigned int *)v7 + 6);
        if (v49 == *((_DWORD *)v7 + 7))
        {
          unsigned int v50 = v49 + 1;
          sub_188C80C(v245, v49 + 1);
          *(_DWORD *)(v7[4] + 4 * v49) = v48;
        }
        else
        {
          *(_DWORD *)(v7[4] + 4 * v49) = v48;
          unsigned int v50 = v49 + 1;
        }
        unsigned int *v245 = v50;
        LOBYTE(v41) = v41 ^ 1;
        int v40 = i;
      }
      if (v47 >= 0) {
        unsigned int v51 = v47;
      }
      else {
        unsigned int v51 = -v47;
      }
      sub_110C8B8(&v249, v39, v51);
    }
  }
  sub_110CBD8((uint64_t)&v249);
  *(_DWORD *)(v241 + 16) |= 1u;
  unint64_t v52 = *(void **)(v241 + 24);
  if (!v52)
  {
    uint64_t v53 = *(void *)(v241 + 8);
    long long v54 = (void *)(v53 & 0xFFFFFFFFFFFFFFFCLL);
    if (v53) {
      long long v54 = (void *)*v54;
    }
    unint64_t v52 = sub_11128D8((uint64_t)v54);
    *(void *)(v241 + 24) = v52;
  }
  *((_DWORD *)v52 + 15) = 0;
  *((_DWORD *)v52 + 4) &= ~4u;
  unsigned int v55 = *(_DWORD *)(v248 + 32);
  *(_DWORD *)(v241 + 16) |= 2u;
  long long v56 = *(void **)(v241 + 32);
  if (!v56)
  {
    uint64_t v57 = *(void *)(v241 + 8);
    int v58 = (void *)(v57 & 0xFFFFFFFFFFFFFFFCLL);
    if (v57) {
      int v58 = (void *)*v58;
    }
    long long v56 = sub_11128D8((uint64_t)v58);
    *(void *)(v241 + 32) = v56;
  }
  *((_DWORD *)v56 + 14) = 0;
  *((_DWORD *)v56 + 4) &= ~2u;
  sub_1881FE4(v56 + 6);
  *((_DWORD *)v56 + 6) = 0;
  int v59 = *((_DWORD *)v56 + 4);
  v246 = (unsigned int *)(v56 + 3);
  *((_DWORD *)v56 + 4) = v59 & 0xFFFFFFFE;
  unsigned int v60 = v55 - 1;
  uint64_t v61 = *(void *)(v248 + 40);
  uint64_t v62 = *(uint64_t (****)())(*(void *)(v61 + 8) + 32);
  if (v62) {
    long long v63 = *(uint64_t (****)())(*(void *)(v61 + 8) + 32);
  }
  else {
    long long v63 = &off_24F8110;
  }
  double v64 = 0.0;
  if (v55 >= 2)
  {
    if (v55 + 0x7FFFFFFF >= 0x80000002)
    {
      int v67 = 0;
      int v68 = 0;
      int v66 = v60 | 1;
      uint64_t v69 = v61 + 24;
      unsigned int v70 = v60 & 0xFFFFFFFE;
      do
      {
        unsigned int v71 = v62;
        uint64_t v62 = *(uint64_t (****)())(*(void *)v69 + 32);
        if (*(void *)(*(void *)(v69 - 8) + 32)) {
          uint64_t v72 = *(uint64_t (****)())(*(void *)(v69 - 8) + 32);
        }
        else {
          uint64_t v72 = &off_24F8110;
        }
        if (v62) {
          uint64_t v73 = *(uint64_t (****)())(*(void *)v69 + 32);
        }
        else {
          uint64_t v73 = &off_24F8110;
        }
        int v74 = *((_DWORD *)v72 + 7);
        int v75 = *((_DWORD *)v73 + 7);
        if (!v71) {
          unsigned int v71 = &off_24F8110;
        }
        int v76 = v74 - *((_DWORD *)v71 + 7);
        int v77 = v75 - v74;
        if (v76 < 0) {
          int v76 = -v76;
        }
        if (v77 < 0) {
          int v77 = -v77;
        }
        v67 += v76;
        v68 += v77;
        v69 += 16;
        v70 -= 2;
      }
      while (v70);
      int v65 = v68 + v67;
      if (v60 == (v60 & 0xFFFFFFFE)) {
        goto LABEL_100;
      }
    }
    else
    {
      int v65 = 0;
      int v66 = 1;
    }
    do
    {
      uint64_t v78 = *(uint64_t (****)())(*(void *)(v61 + 8 * v66 + 8) + 32);
      if (v78) {
        uint64_t v79 = *(uint64_t (****)())(*(void *)(v61 + 8 * v66 + 8) + 32);
      }
      else {
        uint64_t v79 = &off_24F8110;
      }
      int v80 = *((_DWORD *)v79 + 7);
      if (!v62) {
        uint64_t v62 = &off_24F8110;
      }
      int v81 = v80 - *((_DWORD *)v62 + 7);
      if (v81 < 0) {
        int v81 = -v81;
      }
      v65 += v81;
      ++v66;
      uint64_t v62 = v78;
    }
    while (v55 != v66);
LABEL_100:
    double v64 = (double)v65;
  }
  double v82 = (double)v60;
  double v83 = log2(fmax(v64 / (double)v60 * *(double *)(a1 + 104), 2.0));
  *((_DWORD *)v56 + 4) = v59 & 0xFFFFFFFA | 4;
  *((_DWORD *)v56 + 15) = 2;
  *((_DWORD *)v56 + 14) = *((_DWORD *)v63 + 7);
  *((_DWORD *)v56 + 4) = v59 | 7;
  uint64_t v84 = v56[1];
  uint64_t v85 = (uint64_t *)(v84 & 0xFFFFFFFFFFFFFFFCLL);
  if (v84) {
    uint64_t v85 = (uint64_t *)*v85;
  }
  unint64_t v86 = sub_1880F84(v56 + 6, v85);
  sub_110C76C(&v249, (uint64_t)v86);
  sub_110C774((std::string **)&v249, (unint64_t)((ceil(v83) + 2.0) * v82 * 0.125));
  int v87 = vcvtad_u64_f64(v83);
  sub_110C7D4(&v249, *(unsigned __int8 *)(a1 + 100), v87);
  if (v55 >= 2)
  {
    int v88 = 0;
    int v89 = *((_DWORD *)v56 + 14) >> 31;
    for (int j = 1; j != v55; ++j)
    {
      uint64_t v91 = *(void *)(v248 + 40) + 8;
      unsigned int v92 = *(uint64_t (****)())(*(void *)(v91 + 8 * j) + 32);
      if (!v92) {
        unsigned int v92 = &off_24F8110;
      }
      int v93 = *((_DWORD *)v92 + 7);
      double v94 = *(uint64_t (****)())(*(void *)(v91 + 8 * (j - 1)) + 32);
      if (!v94) {
        double v94 = &off_24F8110;
      }
      int v95 = v93 - *((_DWORD *)v94 + 7);
      if ((v89 & 1) != v95 >> 31)
      {
        int v96 = j - v88;
        uint64_t v97 = *((unsigned int *)v56 + 6);
        if (v97 == *((_DWORD *)v56 + 7))
        {
          unsigned int v98 = v97 + 1;
          sub_188C80C(v246, v97 + 1);
          *(_DWORD *)(v56[4] + 4 * v97) = v96;
        }
        else
        {
          *(_DWORD *)(v56[4] + 4 * v97) = v96;
          unsigned int v98 = v97 + 1;
        }
        unsigned int *v246 = v98;
        LOBYTE(v89) = v89 ^ 1;
        int v88 = j;
      }
      if (v95 >= 0) {
        unsigned int v99 = v95;
      }
      else {
        unsigned int v99 = -v95;
      }
      sub_110C8B8(&v249, v87, v99);
    }
  }
  sub_110CBD8((uint64_t)&v249);
  *(_DWORD *)(v241 + 16) |= 2u;
  int v100 = *(void **)(v241 + 32);
  uint64_t v101 = v248;
  if (!v100)
  {
    uint64_t v102 = *(void *)(v241 + 8);
    uint64_t v103 = (void *)(v102 & 0xFFFFFFFFFFFFFFFCLL);
    if (v102) {
      uint64_t v103 = (void *)*v103;
    }
    int v100 = sub_11128D8((uint64_t)v103);
    *(void *)(v241 + 32) = v100;
  }
  *((_DWORD *)v100 + 15) = 0;
  *((_DWORD *)v100 + 4) &= ~4u;
  if ((*(unsigned char *)(*(void *)(*(void *)(v248 + 40) + 8) + 16) & 0x10) == 0)
  {
    uint64_t v104 = *(void *)(v241 + 40);
    if (v104) {
      sub_110D60C(v104);
    }
    goto LABEL_159;
  }
  unsigned int v105 = *(_DWORD *)(v248 + 32);
  *(_DWORD *)(v241 + 16) |= 4u;
  unsigned int v106 = *(void **)(v241 + 40);
  if (!v106)
  {
    uint64_t v107 = *(void *)(v241 + 8);
    unsigned int v108 = (void *)(v107 & 0xFFFFFFFFFFFFFFFCLL);
    if (v107) {
      unsigned int v108 = (void *)*v108;
    }
    unsigned int v106 = sub_11128D8((uint64_t)v108);
    *(void *)(v241 + 40) = v106;
  }
  *((_DWORD *)v106 + 14) = 0;
  *((_DWORD *)v106 + 4) &= ~2u;
  sub_1881FE4(v106 + 6);
  int v109 = *((_DWORD *)v106 + 4);
  *((_DWORD *)v106 + 4) = v109 & 0xFFFFFFFE;
  *((_DWORD *)v106 + 6) = 0;
  unsigned int v110 = v105 - 1;
  uint64_t v111 = *(void *)(v248 + 40);
  uint64_t v112 = *(void *)(v111 + 8);
  double v113 = 0.0;
  if (v105 >= 2)
  {
    int v114 = *(_DWORD *)(v112 + 56);
    if (v105 + 0x7FFFFFFF >= 0x80000002)
    {
      int v117 = 0;
      int v118 = 0;
      int v116 = v110 | 1;
      uint64_t v119 = v111 + 24;
      unsigned int v120 = v110 & 0xFFFFFFFE;
      do
      {
        int v121 = *(_DWORD *)(*(void *)(v119 - 8) + 56);
        int v123 = v121 - v114;
        BOOL v122 = v121 - v114 < 0;
        int v114 = *(_DWORD *)(*(void *)v119 + 56);
        int v124 = v114 - v121;
        if (v122) {
          int v125 = -v123;
        }
        else {
          int v125 = v123;
        }
        if (v124 < 0) {
          int v124 = -v124;
        }
        v117 += v125;
        v118 += v124;
        v119 += 16;
        v120 -= 2;
      }
      while (v120);
      int v115 = v118 + v117;
      if (v110 == (v110 & 0xFFFFFFFE)) {
        goto LABEL_145;
      }
    }
    else
    {
      int v115 = 0;
      int v116 = 1;
    }
    do
    {
      int v126 = *(_DWORD *)(*(void *)(v111 + 8 * v116 + 8) + 56);
      int v127 = v126 - v114;
      if (v127 < 0) {
        int v127 = -v127;
      }
      v115 += v127;
      ++v116;
      int v114 = v126;
    }
    while (v105 != v116);
LABEL_145:
    double v113 = (double)v115;
  }
  double v128 = (double)v110;
  double v129 = log2(fmax(v113 / (double)v110 * *(double *)(a1 + 104), 2.0));
  *((_DWORD *)v106 + 4) = v109 & 0xFFFFFFFA | 4;
  *((_DWORD *)v106 + 15) = 1;
  *((_DWORD *)v106 + 14) = *(_DWORD *)(v112 + 56);
  *((_DWORD *)v106 + 4) = v109 | 7;
  uint64_t v130 = v106[1];
  v131 = (uint64_t *)(v130 & 0xFFFFFFFFFFFFFFFCLL);
  if (v130) {
    v131 = (uint64_t *)*v131;
  }
  char v132 = sub_1880F84(v106 + 6, v131);
  uint64_t v101 = v248;
  sub_110C76C(&v249, (uint64_t)v132);
  sub_110C774((std::string **)&v249, (unint64_t)((ceil(v129) + 2.0 + 1.0) * v128 * 0.125));
  int v133 = vcvtad_u64_f64(v129);
  sub_110C7D4(&v249, *(unsigned __int8 *)(a1 + 100), v133);
  if (v105 >= 2)
  {
    for (int k = 1; k != v105; ++k)
    {
      int v135 = *(_DWORD *)(*(void *)(*(void *)(v248 + 40) + 8 + 8 * k) + 56)
           - *(_DWORD *)(*(void *)(*(void *)(v248 + 40) + 8 + 8 * (k - 1)) + 56);
      sub_110C7D4(&v249, 1u, v135 >> 31);
      if (v135 >= 0) {
        unsigned int v136 = v135;
      }
      else {
        unsigned int v136 = -v135;
      }
      sub_110C8B8(&v249, v133, v136);
    }
  }
  sub_110CBD8((uint64_t)&v249);
  *(_DWORD *)(v241 + 16) |= 4u;
  v137 = *(void **)(v241 + 40);
  if (!v137)
  {
    uint64_t v138 = *(void *)(v241 + 8);
    v139 = (void *)(v138 & 0xFFFFFFFFFFFFFFFCLL);
    if (v138) {
      v139 = (void *)*v139;
    }
    v137 = sub_11128D8((uint64_t)v139);
    *(void *)(v241 + 40) = v137;
  }
  *((_DWORD *)v137 + 15) = 0;
  v239 = v137 + 2;
LABEL_159:
  *v239 &= ~4u;
  int v140 = v257 | 2;
  v257 |= 2u;
  uint64_t v141 = v259;
  if (v259)
  {
    int v257 = v140 | 4;
    uint64_t v142 = v260;
    if (v260) {
      goto LABEL_168;
    }
    goto LABEL_165;
  }
  v143 = (void *)((unint64_t)v256 & 0xFFFFFFFFFFFFFFFCLL);
  if (v256) {
    v143 = (void *)*v143;
  }
  sub_1112A0C((uint64_t)v143);
  uint64_t v141 = v144;
  uint64_t v259 = v144;
  v257 |= 4u;
  uint64_t v142 = v260;
  if (!v260)
  {
LABEL_165:
    v145 = (void *)((unint64_t)v256 & 0xFFFFFFFFFFFFFFFCLL);
    if (v256) {
      v145 = (void *)*v145;
    }
    uint64_t v142 = sub_1112B30((uint64_t)v145);
    uint64_t v260 = v142;
  }
LABEL_168:
  sub_110AFA8((uint64_t)&v249, v101 + 24);
  uint64_t v146 = (const std::string *)v249;
  v147 = (const std::string *)v250;
  if (v249 != (void *)v250)
  {
    uint64_t v148 = (uint64_t **)(v141 + 184);
    do
    {
      v149 = *(_DWORD **)(v141 + 200);
      if (v149 && (uint64_t v150 = *(int *)(v141 + 192), (int)v150 < *v149))
      {
        *(_DWORD *)(v141 + 192) = v150 + 1;
        v151 = *(std::string **)&v149[2 * v150 + 2];
      }
      else
      {
        if (!*v148) {
          operator new();
        }
        void *v153 = v152;
        v153[1] = sub_3A6EDC;
        *uint64_t v152 = 0;
        v152[1] = 0;
        v152[2] = 0;
        v151 = (std::string *)sub_188CDC8(v141 + 184, (uint64_t)v152);
      }
      std::string::operator=(v151, v146++);
    }
    while (v146 != v147);
  }
  uint64_t v154 = v248;
  uint64_t v155 = *(void *)(*(void *)(*(void *)(v248 + 40) + 8) + 48);
  uint64_t v156 = *(unsigned int *)(v141 + 16);
  uint64_t v157 = v155;
  if (v156 == *(_DWORD *)(v141 + 20))
  {
    int v158 = v156 + 1;
    sub_188C80C((unsigned int *)(v141 + 16), v156 + 1);
    *(_DWORD *)(*(void *)(v141 + 24) + 4 * v156) = 0;
    uint64_t v155 = v157;
  }
  else
  {
    *(_DWORD *)(*(void *)(v141 + 24) + 4 * v156) = 0;
    int v158 = v156 + 1;
  }
  uint64_t v159 = *(unsigned int *)(v141 + 40);
  *(_DWORD *)(v141 + 16) = v158;
  if (v159 == *(_DWORD *)(v141 + 44))
  {
    int v160 = v159 + 1;
    sub_188CA54((unsigned int *)(v141 + 40), v159 + 1);
    *(void *)(*(void *)(v141 + 48) + 8 * v159) = v157;
  }
  else
  {
    *(void *)(*(void *)(v141 + 48) + 8 * v159) = v155;
    int v160 = v159 + 1;
  }
  uint64_t v161 = *(unsigned int *)(v141 + 136);
  *(_DWORD *)(v141 + 40) = v160;
  if (v161 == *(_DWORD *)(v141 + 140))
  {
    int v162 = v161 + 1;
    sub_188C80C((unsigned int *)(v141 + 136), v161 + 1);
    *(_DWORD *)(*(void *)(v141 + 144) + 4 * v161) = 0;
  }
  else
  {
    *(_DWORD *)(*(void *)(v141 + 144) + 4 * v161) = 0;
    int v162 = v161 + 1;
  }
  uint64_t v163 = *(unsigned int *)(v141 + 64);
  *(_DWORD *)(v141 + 136) = v162;
  uint64_t v164 = *(void *)(*(void *)(v248 + 40) + 8);
  int v165 = *(_DWORD *)(v164 + 60);
  if (v163 == *(_DWORD *)(v141 + 68))
  {
    int v166 = v163 + 1;
    sub_188C80C((unsigned int *)(v141 + 64), v163 + 1);
    *(_DWORD *)(*(void *)(v141 + 72) + 4 * v163) = v165;
    uint64_t v164 = *(void *)(*(void *)(v248 + 40) + 8);
  }
  else
  {
    *(_DWORD *)(*(void *)(v141 + 72) + 4 * v163) = v165;
    int v166 = v163 + 1;
  }
  uint64_t v167 = *(unsigned int *)(v141 + 88);
  *(_DWORD *)(v141 + 64) = v166;
  int v168 = *(_DWORD *)(v164 + 64);
  if (v167 == *(_DWORD *)(v141 + 92))
  {
    int v169 = v167 + 1;
    sub_188C80C((unsigned int *)(v141 + 88), v167 + 1);
    *(_DWORD *)(*(void *)(v141 + 96) + 4 * v167) = v168;
    uint64_t v164 = *(void *)(*(void *)(v248 + 40) + 8);
  }
  else
  {
    *(_DWORD *)(*(void *)(v141 + 96) + 4 * v167) = v168;
    int v169 = v167 + 1;
  }
  long long v170 = (unsigned int *)(v141 + 112);
  uint64_t v171 = *(unsigned int *)(v141 + 112);
  *(_DWORD *)(v141 + 88) = v169;
  int v172 = *(_DWORD *)(v164 + 68);
  if (v171 == *(_DWORD *)(v141 + 116))
  {
    sub_188C80C(v170, v171 + 1);
    *(_DWORD *)(*(void *)(v141 + 120) + 4 * v171) = v172;
    uint64_t v164 = *(void *)(*(void *)(v248 + 40) + 8);
    *(_DWORD *)(v141 + 112) = v171 + 1;
    v247 = (unsigned int *)(v141 + 112);
    if (!*(unsigned char *)(v164 + 76))
    {
LABEL_198:
      uint64_t v175 = *(unsigned int *)(v164 + 80);
      if (!v175) {
        goto LABEL_199;
      }
      goto LABEL_203;
    }
  }
  else
  {
    *(_DWORD *)(*(void *)(v141 + 120) + 4 * v171) = v172;
    *long long v170 = v171 + 1;
    v247 = (unsigned int *)(v141 + 112);
    if (!*(unsigned char *)(v164 + 76)) {
      goto LABEL_198;
    }
  }
  uint64_t v174 = *(unsigned int *)(v141 + 160);
  v173 = (_DWORD *)(v141 + 160);
  if (v174 == *(_DWORD *)(v141 + 164))
  {
    sub_188C80C((unsigned int *)(v141 + 160), v174 + 1);
    *(_DWORD *)(*(void *)(v141 + 168) + 4 * v174) = 0;
    uint64_t v164 = *(void *)(*(void *)(v248 + 40) + 8);
    _DWORD *v173 = v174 + 1;
    goto LABEL_198;
  }
  *(_DWORD *)(*(void *)(v141 + 168) + 4 * v174) = 0;
  _DWORD *v173 = v174 + 1;
  uint64_t v175 = *(unsigned int *)(v164 + 80);
  if (!v175)
  {
LABEL_199:
    int v176 = *(_DWORD *)v251;
    uint64_t v178 = *(unsigned int *)(v141 + 208);
    uint64_t v177 = (unsigned int *)(v141 + 208);
    if (v178 == *(_DWORD *)(v141 + 212)) {
      goto LABEL_200;
    }
    goto LABEL_209;
  }
LABEL_203:
  uint64_t v179 = *(unsigned int *)(v141 + 232);
  if (v179 == *(_DWORD *)(v141 + 236))
  {
    sub_188C80C((unsigned int *)(v141 + 232), v179 + 1);
    *(_DWORD *)(*(void *)(v141 + 240) + 4 * v179) = 0;
    *(_DWORD *)(v141 + 232) = v179 + 1;
    v180 = (unsigned int *)(v141 + 256);
    uint64_t v181 = *(unsigned int *)(v141 + 256);
    if (v181 != *(_DWORD *)(v141 + 260))
    {
LABEL_205:
      *(_DWORD *)(*(void *)(v141 + 264) + 4 * v181) = v175;
      unsigned int v182 = v181 + 1;
      goto LABEL_208;
    }
  }
  else
  {
    *(_DWORD *)(*(void *)(v141 + 240) + 4 * v179) = 0;
    *(_DWORD *)(v141 + 232) = v179 + 1;
    v180 = (unsigned int *)(v141 + 256);
    uint64_t v181 = *(unsigned int *)(v141 + 256);
    if (v181 != *(_DWORD *)(v141 + 260)) {
      goto LABEL_205;
    }
  }
  unsigned int v182 = v181 + 1;
  sub_188C80C(v180, v181 + 1);
  *(_DWORD *)(*(void *)(v141 + 264) + 4 * v181) = v175;
LABEL_208:
  unsigned int *v180 = v182;
  int v176 = *(_DWORD *)v251;
  uint64_t v178 = *(unsigned int *)(v141 + 208);
  uint64_t v177 = (unsigned int *)(v141 + 208);
  if (v178 == *(_DWORD *)(v141 + 212))
  {
LABEL_200:
    sub_188C80C(v177, v178 + 1);
    *(_DWORD *)(*(void *)(v141 + 216) + 4 * v178) = v176;
    *uint64_t v177 = v178 + 1;
    if ((*(unsigned char *)(*(void *)(*(void *)(v248 + 40) + 8) + 16) & 4) == 0) {
      goto LABEL_221;
    }
LABEL_210:
    uint64_t v183 = *(unsigned int *)(v142 + 16);
    if (v183 == *(_DWORD *)(v142 + 20))
    {
      sub_188C80C((unsigned int *)(v142 + 16), v183 + 1);
      *(_DWORD *)(*(void *)(v142 + 24) + 4 * v183) = 0;
      *(_DWORD *)(v142 + 16) = v183 + 1;
      uint64_t v184 = *(_DWORD **)(v142 + 56);
      if (!v184) {
        goto LABEL_216;
      }
    }
    else
    {
      *(_DWORD *)(*(void *)(v142 + 24) + 4 * v183) = 0;
      *(_DWORD *)(v142 + 16) = v183 + 1;
      uint64_t v184 = *(_DWORD **)(v142 + 56);
      if (!v184) {
        goto LABEL_216;
      }
    }
    uint64_t v185 = *(int *)(v142 + 48);
    if ((int)v185 < *v184)
    {
      *(_DWORD *)(v142 + 48) = v185 + 1;
      v186 = *(std::string **)&v184[2 * v185 + 2];
LABEL_217:
      if (*(void *)(*(void *)(*(void *)(v248 + 40) + 8) + 40)) {
        int v188 = *(uint64_t (****)())(*(void *)(*(void *)(v248 + 40) + 8) + 40);
      }
      else {
        int v188 = &off_24F8130;
      }
      sub_1113E8C(v186, (uint64_t)v188);
      goto LABEL_221;
    }
LABEL_216:
    uint64_t v187 = sub_1116FD0(*(void *)(v142 + 40));
    v186 = (std::string *)sub_188CDC8(v142 + 40, (uint64_t)v187);
    goto LABEL_217;
  }
LABEL_209:
  *(_DWORD *)(*(void *)(v141 + 216) + 4 * v178) = v176;
  *uint64_t v177 = v178 + 1;
  if ((*(unsigned char *)(*(void *)(*(void *)(v248 + 40) + 8) + 16) & 4) != 0) {
    goto LABEL_210;
  }
LABEL_221:
  v244 = v177;
  if (*(int *)(v248 + 32) >= 2)
  {
    uint64_t v189 = v157;
    uint64_t v190 = 0;
    int v240 = 0;
    int v242 = 0;
    int v191 = 0;
    v237 = (unsigned int *)(v141 + 256);
    v238 = (unsigned int *)(v141 + 160);
    v236 = (uint64_t *)(v142 + 40);
    do
    {
      uint64_t v194 = *(void *)(v154 + 40);
      uint64_t v195 = *(void *)(v194 + 8 * v190 + 16);
      if (*(_DWORD *)(v195 + 84) != 1)
      {
        uint64_t v192 = v175;
        goto LABEL_224;
      }
      int v196 = v190 + 1;
      int v197 = v190 + 1 - v191;
      uint64_t v198 = *(unsigned int *)(v141 + 16);
      if (v198 == *(_DWORD *)(v141 + 20))
      {
        sub_188C80C((unsigned int *)(v141 + 16), v198 + 1);
        *(_DWORD *)(*(void *)(v141 + 24) + 4 * v198) = v197;
        uint64_t v194 = *(void *)(v248 + 40);
        uint64_t v195 = *(void *)(v194 + 8 * v190 + 16);
        *(_DWORD *)(v141 + 16) = v198 + 1;
        uint64_t v199 = *(void *)(v195 + 48) - v189;
        uint64_t v200 = *(unsigned int *)(v141 + 40);
        if (v200 != *(_DWORD *)(v141 + 44)) {
          goto LABEL_228;
        }
      }
      else
      {
        *(_DWORD *)(*(void *)(v141 + 24) + 4 * v198) = v197;
        *(_DWORD *)(v141 + 16) = v198 + 1;
        uint64_t v199 = *(void *)(v195 + 48) - v189;
        uint64_t v200 = *(unsigned int *)(v141 + 40);
        if (v200 != *(_DWORD *)(v141 + 44))
        {
LABEL_228:
          *(void *)(*(void *)(v141 + 48) + 8 * v200) = v199;
          int v201 = v200 + 1;
          goto LABEL_231;
        }
      }
      int v201 = v200 + 1;
      sub_188CA54((unsigned int *)(v141 + 40), v200 + 1);
      *(void *)(*(void *)(v141 + 48) + 8 * v200) = v199;
      uint64_t v194 = *(void *)(v248 + 40);
      uint64_t v195 = *(void *)(v194 + 8 * v190 + 16);
LABEL_231:
      *(_DWORD *)(v141 + 40) = v201;
      int v202 = *(_DWORD *)(v195 + 72) - *(_DWORD *)(*(void *)(v194 + 8 * v191 + 8) + 72);
      uint64_t v203 = *(unsigned int *)(v141 + 136);
      if (v203 == *(_DWORD *)(v141 + 140))
      {
        sub_188C80C((unsigned int *)(v141 + 136), v203 + 1);
        *(_DWORD *)(*(void *)(v141 + 144) + 4 * v203) = v202;
        uint64_t v195 = *(void *)(*(void *)(v248 + 40) + 8 * v190 + 16);
        *(_DWORD *)(v141 + 136) = v203 + 1;
        int v204 = *(_DWORD *)(v195 + 60);
        uint64_t v205 = *(unsigned int *)(v141 + 64);
        if (v205 != *(_DWORD *)(v141 + 68)) {
          goto LABEL_233;
        }
      }
      else
      {
        *(_DWORD *)(*(void *)(v141 + 144) + 4 * v203) = v202;
        *(_DWORD *)(v141 + 136) = v203 + 1;
        int v204 = *(_DWORD *)(v195 + 60);
        uint64_t v205 = *(unsigned int *)(v141 + 64);
        if (v205 != *(_DWORD *)(v141 + 68))
        {
LABEL_233:
          *(_DWORD *)(*(void *)(v141 + 72) + 4 * v205) = v204;
          *(_DWORD *)(v141 + 64) = v205 + 1;
          int v206 = *(_DWORD *)(v195 + 64);
          uint64_t v207 = *(unsigned int *)(v141 + 88);
          if (v207 == *(_DWORD *)(v141 + 92)) {
            goto LABEL_234;
          }
          goto LABEL_240;
        }
      }
      sub_188C80C((unsigned int *)(v141 + 64), v205 + 1);
      *(_DWORD *)(*(void *)(v141 + 72) + 4 * v205) = v204;
      uint64_t v195 = *(void *)(*(void *)(v248 + 40) + 8 * v190 + 16);
      *(_DWORD *)(v141 + 64) = v205 + 1;
      int v206 = *(_DWORD *)(v195 + 64);
      uint64_t v207 = *(unsigned int *)(v141 + 88);
      if (v207 == *(_DWORD *)(v141 + 92))
      {
LABEL_234:
        sub_188C80C((unsigned int *)(v141 + 88), v207 + 1);
        *(_DWORD *)(*(void *)(v141 + 96) + 4 * v207) = v206;
        uint64_t v195 = *(void *)(*(void *)(v248 + 40) + 8 * v190 + 16);
        *(_DWORD *)(v141 + 88) = v207 + 1;
        int v208 = *(_DWORD *)(v195 + 68);
        uint64_t v209 = *(unsigned int *)(v141 + 112);
        if (v209 != *(_DWORD *)(v141 + 116)) {
          goto LABEL_235;
        }
        goto LABEL_241;
      }
LABEL_240:
      *(_DWORD *)(*(void *)(v141 + 96) + 4 * v207) = v206;
      *(_DWORD *)(v141 + 88) = v207 + 1;
      int v208 = *(_DWORD *)(v195 + 68);
      uint64_t v209 = *(unsigned int *)(v141 + 112);
      if (v209 != *(_DWORD *)(v141 + 116))
      {
LABEL_235:
        *(_DWORD *)(*(void *)(v141 + 120) + 4 * v209) = v208;
        unsigned int *v247 = v209 + 1;
        if (!*(unsigned char *)(v195 + 76)) {
          goto LABEL_236;
        }
        goto LABEL_242;
      }
LABEL_241:
      sub_188C80C(v247, v209 + 1);
      *(_DWORD *)(*(void *)(v141 + 120) + 4 * v209) = v208;
      uint64_t v195 = *(void *)(*(void *)(v248 + 40) + 8 * v190 + 16);
      unsigned int *v247 = v209 + 1;
      if (!*(unsigned char *)(v195 + 76))
      {
LABEL_236:
        uint64_t v192 = *(unsigned int *)(v195 + 80);
        if (v192 != v175) {
          goto LABEL_246;
        }
        goto LABEL_237;
      }
LABEL_242:
      uint64_t v210 = *(unsigned int *)(v141 + 160);
      if (v210 == *(_DWORD *)(v141 + 164))
      {
        sub_188C80C(v238, v210 + 1);
        *(_DWORD *)(*(void *)(v141 + 168) + 4 * v210) = v196;
        uint64_t v211 = *(void *)(*(void *)(v248 + 40) + 8 * v190 + 16);
        unsigned int *v238 = v210 + 1;
        uint64_t v192 = *(unsigned int *)(v211 + 80);
        if (v192 != v175) {
          goto LABEL_246;
        }
      }
      else
      {
        *(_DWORD *)(*(void *)(v141 + 168) + 4 * v210) = v196;
        unsigned int *v238 = v210 + 1;
        uint64_t v192 = *(unsigned int *)(v195 + 80);
        if (v192 != v175)
        {
LABEL_246:
          int v212 = v190 - v242 + 1;
          uint64_t v213 = *(unsigned int *)(v141 + 232);
          if (v213 == *(_DWORD *)(v141 + 236))
          {
            sub_188C80C((unsigned int *)(v141 + 232), v213 + 1);
            *(_DWORD *)(*(void *)(v141 + 240) + 4 * v213) = v212;
            *(_DWORD *)(v141 + 232) = v213 + 1;
            uint64_t v214 = *(unsigned int *)(v141 + 256);
            if (v214 != *(_DWORD *)(v141 + 260)) {
              goto LABEL_248;
            }
LABEL_250:
            unsigned int v215 = v214 + 1;
            sub_188C80C(v237, v214 + 1);
            *(_DWORD *)(*(void *)(v141 + 264) + 4 * v214) = v192;
          }
          else
          {
            *(_DWORD *)(*(void *)(v141 + 240) + 4 * v213) = v212;
            *(_DWORD *)(v141 + 232) = v213 + 1;
            uint64_t v214 = *(unsigned int *)(v141 + 256);
            if (v214 == *(_DWORD *)(v141 + 260)) {
              goto LABEL_250;
            }
LABEL_248:
            *(_DWORD *)(*(void *)(v141 + 264) + 4 * v214) = v192;
            unsigned int v215 = v214 + 1;
          }
          unsigned int *v237 = v215;
          int v242 = v190 + 1;
          goto LABEL_252;
        }
      }
LABEL_237:
      uint64_t v192 = v175;
LABEL_252:
      uint64_t v216 = *(int *)(v141 + 208);
      uint64_t v217 = *(unsigned int *)(v141 + 208);
      int v218 = *((_DWORD *)v251 + v216) - *((_DWORD *)v251 + (int)v216 - 1);
      if (v216 == *(_DWORD *)(v141 + 212))
      {
        unsigned int v219 = v217 + 1;
        sub_188C80C(v244, v217 + 1);
        *(_DWORD *)(*(void *)(v141 + 216) + 4 * v217) = v218;
      }
      else
      {
        *(_DWORD *)(*(void *)(v141 + 216) + 4 * v217) = v218;
        unsigned int v219 = v217 + 1;
      }
      unsigned int *v244 = v219;
      uint64_t v154 = v248;
      uint64_t v220 = *(void *)(*(void *)(v248 + 40) + 8 * v190 + 16);
      uint64_t v189 = *(void *)(v220 + 48);
      if ((*(unsigned char *)(v220 + 16) & 4) != 0)
      {
        int v221 = v190 - v240 + 1;
        uint64_t v222 = *(unsigned int *)(v142 + 16);
        if (v222 == *(_DWORD *)(v142 + 20))
        {
          sub_188C80C((unsigned int *)(v142 + 16), v222 + 1);
          *(_DWORD *)(*(void *)(v142 + 24) + 4 * v222) = v221;
          *(_DWORD *)(v142 + 16) = v222 + 1;
          v223 = *(_DWORD **)(v142 + 56);
          if (!v223)
          {
LABEL_263:
            v226 = sub_1116FD0(*v236);
            v225 = (std::string *)sub_188CDC8((uint64_t)v236, (uint64_t)v226);
            goto LABEL_264;
          }
        }
        else
        {
          *(_DWORD *)(*(void *)(v142 + 24) + 4 * v222) = v221;
          *(_DWORD *)(v142 + 16) = v222 + 1;
          v223 = *(_DWORD **)(v142 + 56);
          if (!v223) {
            goto LABEL_263;
          }
        }
        uint64_t v224 = *(int *)(v142 + 48);
        if ((int)v224 >= *v223) {
          goto LABEL_263;
        }
        *(_DWORD *)(v142 + 48) = v224 + 1;
        v225 = *(std::string **)&v223[2 * v224 + 2];
LABEL_264:
        if (*(void *)(*(void *)(*(void *)(v248 + 40) + 8 * v190 + 16) + 40)) {
          v227 = *(uint64_t (****)())(*(void *)(*(void *)(v248 + 40) + 8 * v190 + 16) + 40);
        }
        else {
          v227 = &off_24F8130;
        }
        sub_1113E8C(v225, (uint64_t)v227);
        int v191 = v190 + 1;
        int v240 = v190 + 1;
        uint64_t v154 = v248;
        goto LABEL_224;
      }
      int v191 = v190 + 1;
LABEL_224:
      uint64_t v193 = v190 + 2;
      ++v190;
      uint64_t v175 = v192;
    }
    while (v193 < *(int *)(v154 + 32));
  }
  *(_DWORD *)(v154 + 16) |= 1u;
  uint64_t v228 = *(void *)(v154 + 8);
  v229 = (uint64_t *)(v228 & 0xFFFFFFFFFFFFFFFCLL);
  if (v228) {
    v229 = (uint64_t *)*v229;
  }
  v230 = (std::string *)sub_1880F84((void *)(v154 + 48), v229);
  sub_1880F60((uint64_t)&v255, v230);
  uint64_t v231 = *(unsigned int *)(v154 + 32);
  if ((int)v231 >= 1)
  {
    v232 = (uint64_t *)(*(void *)(v154 + 40) + 8);
    do
    {
      sub_1114294(*v232++);
      --v231;
    }
    while (v231);
    *(_DWORD *)(v154 + 32) = 0;
  }
  if (v251)
  {
    v252 = v251;
    operator delete(v251);
  }
  v233 = (void **)v249;
  if (v249)
  {
    v234 = (void **)v250;
    v235 = v249;
    if ((void *)v250 != v249)
    {
      do
      {
        if (*((char *)v234 - 1) < 0) {
          operator delete(*(v234 - 3));
        }
        v234 -= 3;
      }
      while (v234 != v233);
      v235 = v249;
    }
    *(void *)&long long v250 = v233;
    operator delete(v235);
  }
  return sub_1111C00(&v255);
}

void sub_110AE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_110AE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_110AE58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  if (a38 < 0)
  {
    operator delete(__p);
    if ((a29 & 0x80000000) == 0)
    {
LABEL_3:
      sub_111ECAC((uint64_t)&a39);
      _Unwind_Resume(a1);
    }
  }
  else if ((a29 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a24);
  sub_111ECAC((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_110AEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_110AEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_110AEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_110AEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_110AF04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_110AF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

uint64_t sub_110AFA8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3) {
    uint64_t v4 = (uint64_t *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(int *)(a2 + 8);
  uint64_t v10 = a1;
  if (v5)
  {
    uint64_t v6 = 8 * v5;
    do
    {
      sub_110C260(&v10, *v4++);
      v6 -= 8;
    }
    while (v6);
    unint64_t v7 = *(_DWORD **)(a1 + 24);
    for (int i = *(_DWORD **)(a1 + 32); v7 != i; ++v7)
    {
      if (*v7 == -1) {
        *unint64_t v7 = -1431655765 * ((*(void *)(a1 + 8) - *(void *)a1) >> 3);
      }
    }
  }
  return a1;
}

void sub_110B068(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(void *)(v1 + 32) = v3;
    operator delete(v3);
  }
  sub_20B1F20((void **)v1);
  _Unwind_Resume(a1);
}

void **sub_110B08C(void **a1)
{
  unsigned int v2 = a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)*a1;
  if (*a1)
  {
    uint64_t v4 = (void **)a1[1];
    uint64_t v5 = *a1;
    if (v4 != v3)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 3;
      }
      while (v4 != v3);
      uint64_t v5 = *a1;
    }
    a1[1] = v3;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_110B110(uint64_t a1, uint64_t a2)
{
  if (*(int *)(a2 + 32) < 1)
  {
    sub_1111AAC((uint64_t)&v112, 0, 0);
    if ((sub_1880FAC(&v112, *(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL) & 1) == 0)
    {
      if (sub_110D440())
      {
        sub_6BAC((uint64_t)&v120);
        sub_188FC78(&v120, (uint64_t)"Could not parse the compressed_path bytes into a CompressedPath message.", 72);
        int v118 = operator new(0x88uLL);
        long long v119 = xmmword_20F4900;
        strcpy((char *)v118, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/src/path-codec/PathCompression.cpp");
        std::stringbuf::str();
        sub_110D454((uint64_t)&v118, 176, (uint64_t)&v110);
        if (v111 < 0) {
          operator delete(v110);
        }
        if (SHIBYTE(v119) < 0) {
          operator delete(v118);
        }
        if (v123 < 0) {
          operator delete(__p);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      return sub_1111C00(&v112);
    }
    uint64_t v5 = (uint64_t *)(a2 + 24);
    unsigned int v107 = v117;
    sub_188CC60(a2 + 24, v117);
    if (v115) {
      uint64_t v6 = v115;
    }
    else {
      uint64_t v6 = &off_24F7F78;
    }
    if (v116) {
      unint64_t v7 = v116;
    }
    else {
      unint64_t v7 = &off_24F8090;
    }
    if (*((int *)v6 + 4) < 2) {
      return sub_1111C00(&v112);
    }
    uint64_t v8 = (uint64_t)*v6[6];
    int v9 = *(_DWORD *)v6[18];
    uint64_t v10 = *(_DWORD **)(a2 + 40);
    if (v10 && (uint64_t v11 = *(int *)(a2 + 32), (int)v11 < *v10))
    {
      *(_DWORD *)(a2 + 32) = v11 + 1;
      uint64_t v12 = *(void *)&v10[2 * v11 + 2];
    }
    else
    {
      sub_111704C(*v5);
      uint64_t v12 = sub_188CDC8(a2 + 24, v13);
    }
    int v14 = *(_DWORD *)(v12 + 16);
    *(_DWORD *)(v12 + 16) = v14 | 8;
    *(void *)(v12 + 48) = v8;
    int v15 = *(_DWORD *)v6[9];
    *(_DWORD *)(v12 + 16) = v14 | 0x28;
    *(_DWORD *)(v12 + 60) = v15;
    int v16 = *(_DWORD *)v6[12];
    *(_DWORD *)(v12 + 16) = v14 | 0x68;
    *(_DWORD *)(v12 + 64) = v16;
    *(_DWORD *)(v12 + 68) = *(_DWORD *)v6[15];
    *(_DWORD *)(v12 + 72) = v9;
    int v17 = v14 | 0x9E8;
    *(_DWORD *)(v12 + 16) = v14 | 0x9E8;
    *(_DWORD *)(v12 + 84) = 1;
    if (*((int *)v6 + 40) < 1 || *(_DWORD *)v6[21])
    {
      int v18 = 0;
      uint64_t v101 = a1;
      if (*((int *)v6 + 58) < 1) {
        goto LABEL_36;
      }
    }
    else
    {
      int v17 = v14 | 0xBE8;
      *(_DWORD *)(v12 + 16) = v14 | 0xBE8;
      int v18 = 1;
      *(unsigned char *)(v12 + 76) = 1;
      uint64_t v101 = a1;
      if (*((int *)v6 + 58) < 1) {
        goto LABEL_36;
      }
    }
    if (!*(_DWORD *)v6[30])
    {
      int v19 = *(_DWORD *)v6[33];
      int v20 = 1;
      *(_DWORD *)(v12 + 16) = v17 | 0x400;
      *(_DWORD *)(v12 + 80) = v19;
      if (*((int *)v6 + 52) >= 1)
      {
LABEL_37:
        int v21 = *(_DWORD *)v6[27];
        if (v21 < *((_DWORD *)v6 + 48))
        {
          unsigned int v22 = (long long *)v6[25][v21 + 1];
          *(_DWORD *)(v12 + 16) = v17 | 0x401;
          uint64_t v23 = *(void *)(v12 + 8);
          int v24 = (uint64_t *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
          if (v23) {
            int v24 = (uint64_t *)*v24;
          }
          sub_1881DF4((std::string **)(v12 + 24), v22, v24);
        }
        uint64_t v103 = v7;
        int v100 = (void *)(a2 + 48);
        int v104 = v19;
        int v105 = v18;
        if (*((int *)v7 + 4) < 1) {
          goto LABEL_46;
        }
        goto LABEL_45;
      }
LABEL_44:
      int v21 = 0;
      uint64_t v103 = v7;
      int v100 = (void *)(a2 + 48);
      int v104 = v19;
      int v105 = v18;
      if (*((int *)v7 + 4) < 1) {
        goto LABEL_46;
      }
LABEL_45:
      if (!*(_DWORD *)v7[3])
      {
        *(_DWORD *)(v12 + 16) |= 4u;
        int v26 = *(std::string **)(v12 + 40);
        if (!v26)
        {
          uint64_t v27 = *(void *)(v12 + 8);
          int v28 = (void *)(v27 & 0xFFFFFFFFFFFFFFFCLL);
          if (v27) {
            int v28 = (void *)*v28;
          }
          int v26 = (std::string *)sub_1116FD0((uint64_t)v28);
          *(void *)(v12 + 40) = v26;
        }
        sub_1113E8C(v26, (uint64_t)v7[7][1]);
        int v25 = 1;
        if (v107 >= 2) {
          goto LABEL_53;
        }
LABEL_79:
        DWORD2(v113) |= 1u;
        uint64_t v47 = v114;
        if (!v114)
        {
          int v48 = (void *)(v113 & 0xFFFFFFFFFFFFFFFCLL);
          if (v113) {
            int v48 = (void *)*v48;
          }
          sub_1112990((uint64_t)v48);
          uint64_t v47 = v49;
          uint64_t v114 = v49;
        }
        unsigned int v108 = *(_DWORD *)(a2 + 32);
        if (*(void *)(v47 + 24)) {
          unsigned int v50 = *(uint64_t (****)())(v47 + 24);
        }
        else {
          unsigned int v50 = &off_24F7F08;
        }
        int v51 = *((_DWORD *)v50 + 14);
        uint64_t v52 = *(void *)(*(void *)(a2 + 40) + 8);
        *(_DWORD *)(v52 + 16) |= 2u;
        uint64_t v53 = *(void **)(v52 + 32);
        if (!v53)
        {
          uint64_t v54 = *(void *)(v52 + 8);
          unsigned int v55 = (void *)(v54 & 0xFFFFFFFFFFFFFFFCLL);
          if (v54) {
            unsigned int v55 = (void *)*v55;
          }
          uint64_t v53 = sub_1116F58((uint64_t)v55);
          *(void *)(v52 + 32) = v53;
        }
        *((_DWORD *)v53 + 4) |= 1u;
        *((_DWORD *)v53 + 6) = v51;
        sub_110C76C(&v120, (unint64_t)v50[6] & 0xFFFFFFFFFFFFFFFELL);
        unsigned __int8 v56 = sub_110CDE4(&v120, *(unsigned __int8 *)(v101 + 100));
        uint64_t v106 = v47;
        if (v108 >= 2)
        {
          int v57 = 0;
          int v58 = 0;
          unsigned int v59 = *((_DWORD *)v50 + 14);
          unsigned int v60 = v59 >> 31;
          int v61 = 1;
          unsigned int v62 = v56;
          do
          {
            if (v58 < *((_DWORD *)v50 + 6) && v61 - v57 == *((_DWORD *)v50[4] + v58))
            {
              ++v58;
              int v57 = v61;
              LOBYTE(v60) = v60 ^ 1;
            }
            int v63 = sub_110D10C(&v120, v62);
            if (v60) {
              int v64 = -v63;
            }
            else {
              int v64 = v63;
            }
            uint64_t v65 = *(void *)(*(void *)(a2 + 40) + 8 * v61 + 8);
            *(_DWORD *)(v65 + 16) |= 2u;
            int v66 = *(void **)(v65 + 32);
            if (!v66)
            {
              uint64_t v67 = *(void *)(v65 + 8);
              int v68 = (void *)(v67 & 0xFFFFFFFFFFFFFFFCLL);
              if (v67) {
                int v68 = (void *)*v68;
              }
              int v66 = sub_1116F58((uint64_t)v68);
              *(void *)(v65 + 32) = v66;
            }
            v59 += v64;
            *((_DWORD *)v66 + 4) |= 1u;
            *((_DWORD *)v66 + 6) = v59;
            ++v61;
          }
          while (v108 != v61);
        }
        unsigned int v109 = *(_DWORD *)(a2 + 32);
        if (*(void *)(v106 + 32)) {
          uint64_t v69 = *(uint64_t (****)())(v106 + 32);
        }
        else {
          uint64_t v69 = &off_24F7F08;
        }
        int v70 = *((_DWORD *)v69 + 14);
        uint64_t v71 = *(void *)(*(void *)(a2 + 40) + 8);
        *(_DWORD *)(v71 + 16) |= 2u;
        uint64_t v72 = *(void **)(v71 + 32);
        if (!v72)
        {
          uint64_t v73 = *(void *)(v71 + 8);
          int v74 = (void *)(v73 & 0xFFFFFFFFFFFFFFFCLL);
          if (v73) {
            int v74 = (void *)*v74;
          }
          uint64_t v72 = sub_1116F58((uint64_t)v74);
          *(void *)(v71 + 32) = v72;
        }
        *((_DWORD *)v72 + 4) |= 2u;
        *((_DWORD *)v72 + 7) = v70;
        sub_110C76C(&v120, (unint64_t)v69[6] & 0xFFFFFFFFFFFFFFFELL);
        unsigned __int8 v75 = sub_110CDE4(&v120, *(unsigned __int8 *)(v101 + 100));
        if (v109 >= 2)
        {
          int v76 = 0;
          int v77 = 0;
          unsigned int v78 = *((_DWORD *)v69 + 14);
          unsigned int v79 = v78 >> 31;
          int v80 = 1;
          unsigned int v81 = v75;
          do
          {
            if (v77 < *((_DWORD *)v69 + 6) && v80 - v76 == *((_DWORD *)v69[4] + v77))
            {
              ++v77;
              int v76 = v80;
              LOBYTE(v79) = v79 ^ 1;
            }
            int v82 = sub_110D10C(&v120, v81);
            if (v79) {
              int v83 = -v82;
            }
            else {
              int v83 = v82;
            }
            uint64_t v84 = *(void *)(*(void *)(a2 + 40) + 8 * v80 + 8);
            *(_DWORD *)(v84 + 16) |= 2u;
            uint64_t v85 = *(void **)(v84 + 32);
            if (!v85)
            {
              uint64_t v86 = *(void *)(v84 + 8);
              int v87 = (void *)(v86 & 0xFFFFFFFFFFFFFFFCLL);
              if (v86) {
                int v87 = (void *)*v87;
              }
              uint64_t v85 = sub_1116F58((uint64_t)v87);
              *(void *)(v84 + 32) = v85;
            }
            v78 += v83;
            *((_DWORD *)v85 + 4) |= 2u;
            *((_DWORD *)v85 + 7) = v78;
            ++v80;
          }
          while (v109 != v80);
        }
        if ((*(unsigned char *)(v106 + 16) & 4) != 0)
        {
          uint64_t v88 = *(void *)(v106 + 40);
          unsigned int v89 = *(_DWORD *)(a2 + 32);
          int v90 = *(_DWORD *)(v88 + 56);
          uint64_t v91 = *(void *)(*(void *)(a2 + 40) + 8);
          *(_DWORD *)(v91 + 16) |= 0x10u;
          *(_DWORD *)(v91 + 56) = v90;
          sub_110C76C(&v120, *(void *)(v88 + 48) & 0xFFFFFFFFFFFFFFFELL);
          unsigned __int8 v92 = sub_110CDE4(&v120, *(unsigned __int8 *)(v101 + 100));
          if (v89 >= 2)
          {
            int v93 = *(_DWORD *)(v88 + 56);
            int v94 = 1;
            unsigned int v95 = v92;
            do
            {
              int v96 = sub_110CDE4(&v120, 1u);
              int v97 = sub_110D10C(&v120, v95);
              if (v96) {
                int v98 = -v97;
              }
              else {
                int v98 = v97;
              }
              v93 += v98;
              uint64_t v99 = *(void *)(*(void *)(a2 + 40) + 8 * v94 + 8);
              *(_DWORD *)(v99 + 16) |= 0x10u;
              *(_DWORD *)(v99 + 56) = v93;
              ++v94;
            }
            while (v89 != v94);
          }
        }
        sub_1881FE4(v100);
        *(_DWORD *)(a2 + 16) &= ~1u;
        return sub_1111C00(&v112);
      }
LABEL_46:
      int v25 = 0;
      if (v107 >= 2)
      {
LABEL_53:
        uint64_t v102 = 0;
        int v29 = 0;
        int v30 = 1;
        int v31 = 1;
        while (1)
        {
          while (1)
          {
            int v32 = *(_DWORD **)(a2 + 40);
            if (v32)
            {
              uint64_t v33 = *(int *)(a2 + 32);
              if ((int)v33 < *v32) {
                break;
              }
            }
            sub_111704C(*v5);
            uint64_t v34 = sub_188CDC8(a2 + 24, v36);
            int v35 = *(_DWORD *)(v34 + 16);
            if (v30 - v29 == *((_DWORD *)v6[3] + v31)) {
              goto LABEL_60;
            }
LABEL_54:
            *(_DWORD *)(v34 + 16) = v35 | 0x800;
            *(_DWORD *)(v34 + 84) = 2;
            if (v107 == ++v30) {
              goto LABEL_79;
            }
          }
          *(_DWORD *)(a2 + 32) = v33 + 1;
          uint64_t v34 = *(void *)&v32[2 * v33 + 2];
          int v35 = *(_DWORD *)(v34 + 16);
          if (v30 - v29 != *((_DWORD *)v6[3] + v31)) {
            goto LABEL_54;
          }
LABEL_60:
          *(_DWORD *)(v34 + 84) = 1;
          uint64_t v37 = *(void *)(*(void *)(a2 + 40) + 8 * v29 + 8);
          int v38 = (char *)v6[6][v31] + *(void *)(v37 + 48);
          *(_DWORD *)(v34 + 16) = v35 | 0x808;
          *(void *)(v34 + 48) = v38;
          uint64_t v39 = 4 * v31;
          LODWORD(v38) = *(_DWORD *)((char *)v6[9] + v39);
          *(_DWORD *)(v34 + 16) = v35 | 0x828;
          *(_DWORD *)(v34 + 60) = v38;
          LODWORD(v38) = *(_DWORD *)((char *)v6[12] + v39);
          *(_DWORD *)(v34 + 16) = v35 | 0x868;
          *(_DWORD *)(v34 + 64) = v38;
          LODWORD(v38) = *(_DWORD *)((char *)v6[15] + v39);
          *(_DWORD *)(v34 + 16) = v35 | 0x8E8;
          *(_DWORD *)(v34 + 68) = v38;
          LODWORD(v38) = *(_DWORD *)((char *)v6[18] + v39) + *(_DWORD *)(v37 + 72);
          int v40 = v35 | 0x9E8;
          *(_DWORD *)(v34 + 16) = v35 | 0x9E8;
          *(_DWORD *)(v34 + 72) = v38;
          if (v105 < *((_DWORD *)v6 + 40) && v30 == *((_DWORD *)v6[21] + v105))
          {
            int v40 = v35 | 0xBE8;
            *(_DWORD *)(v34 + 16) = v35 | 0xBE8;
            *(unsigned char *)(v34 + 76) = 1;
            ++v105;
          }
          if (v20 < *((_DWORD *)v6 + 58) && v30 == *((_DWORD *)v6[30] + v20) + HIDWORD(v102))
          {
            int v104 = *((_DWORD *)v6[33] + v20++);
            HIDWORD(v102) = v30;
          }
          *(_DWORD *)(v34 + 16) = v40 | 0x400;
          *(_DWORD *)(v34 + 80) = v104;
          if (v31 < *((_DWORD *)v6 + 52))
          {
            v21 += *((_DWORD *)v6[27] + v31);
            if (v21 < *((_DWORD *)v6 + 48))
            {
              int v41 = (long long *)v6[25][v21 + 1];
              *(_DWORD *)(v34 + 16) = v40 | 0x401;
              uint64_t v42 = *(void *)(v34 + 8);
              uint64_t v43 = (uint64_t *)(v42 & 0xFFFFFFFFFFFFFFFCLL);
              if (v42) {
                uint64_t v43 = (uint64_t *)*v43;
              }
              sub_1881DF4((std::string **)(v34 + 24), v41, v43);
            }
          }
          ++v31;
          if (*((_DWORD *)v103 + 4) > v25 && v30 == *((_DWORD *)v103[3] + v25) + v102)
          {
            *(_DWORD *)(v34 + 16) |= 4u;
            int v44 = *(std::string **)(v34 + 40);
            if (!v44)
            {
              uint64_t v45 = *(void *)(v34 + 8);
              int v46 = (void *)(v45 & 0xFFFFFFFFFFFFFFFCLL);
              if (v45) {
                int v46 = (void *)*v46;
              }
              int v44 = (std::string *)sub_1116FD0((uint64_t)v46);
              *(void *)(v34 + 40) = v44;
            }
            sub_1113E8C(v44, (uint64_t)v103[7][++v25]);
            LODWORD(v102) = v30;
          }
          int v29 = v30++;
          if (v107 == v30) {
            goto LABEL_79;
          }
        }
      }
      goto LABEL_79;
    }
LABEL_36:
    int v19 = 0;
    int v20 = 0;
    *(_DWORD *)(v12 + 16) = v17 | 0x400;
    *(_DWORD *)(v12 + 80) = 0;
    if (*((int *)v6 + 52) >= 1) {
      goto LABEL_37;
    }
    goto LABEL_44;
  }
  uint64_t result = sub_110D2C8();
  if (!result) {
    return result;
  }
  sub_6BAC((uint64_t)&v120);
  sub_188FC78(&v120, (uint64_t)"The input path leg already has a decompressed point list. Skipping decompression.", 81);
  uint64_t v112 = operator new(0x88uLL);
  long long v113 = xmmword_20F4900;
  strcpy((char *)v112, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/src/path-codec/PathCompression.cpp");
  std::stringbuf::str();
  sub_110D2DC((uint64_t)&v112, 169, (uint64_t)&v118);
  if (SHIBYTE(v119) < 0)
  {
    operator delete(v118);
    if ((SHIBYTE(v113) & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_28:
    operator delete(v112);
    goto LABEL_5;
  }
  if (SHIBYTE(v113) < 0) {
    goto LABEL_28;
  }
LABEL_5:
  if (v123 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_110BDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1111C00(va);
  _Unwind_Resume(a1);
}

void sub_110BDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1111C00(va);
  _Unwind_Resume(a1);
}

void sub_110BDE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a34 < 0)
  {
    operator delete(a29);
    sub_111ECAC((uint64_t)&a35);
    sub_1111C00(&a22);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a35);
  sub_1111C00(&a22);
  _Unwind_Resume(a1);
}

void sub_110BE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1111C00(va);
  _Unwind_Resume(a1);
}

void sub_110BE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1111C00(va);
  _Unwind_Resume(a1);
}

void sub_110BE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1111C00(va);
  _Unwind_Resume(a1);
}

void sub_110BE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1111C00(va);
  _Unwind_Resume(a1);
}

void sub_110BE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1111C00(va);
  _Unwind_Resume(a1);
}

void sub_110BEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1111C00(va);
  _Unwind_Resume(a1);
}

void sub_110BEC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a34 < 0)
  {
    operator delete(__p);
    if (a24 < 0)
    {
LABEL_5:
      operator delete(a19);
      sub_111ECAC((uint64_t)&a35);
      _Unwind_Resume(a1);
    }
  }
  else if (a24 < 0)
  {
    goto LABEL_5;
  }
  sub_111ECAC((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_110BF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_110BF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_110BF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1111C00(va);
  _Unwind_Resume(a1);
}

void sub_110BF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1111C00(va);
  _Unwind_Resume(a1);
}

void sub_110BF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1111C00(va);
  _Unwind_Resume(a1);
}

void sub_110BF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1111C00(va);
  _Unwind_Resume(a1);
}

void sub_110BF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1111C00(va);
  _Unwind_Resume(a1);
}

uint64_t sub_110BFAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((*(unsigned char *)(a2 + 16) & 1) == 0)
  {
    sub_11161EC(a3, a2);
    return sub_1109790(a1, a3);
  }
  if (sub_110D2C8())
  {
    sub_6BAC((uint64_t)v11);
    sub_188FC78(v11, (uint64_t)"The input path leg already has a compressed path populated. Skipping compression.", 81);
    int v9 = operator new(0x88uLL);
    long long v10 = xmmword_20F4900;
    strcpy((char *)v9, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/src/path-codec/PathCompression.cpp");
    std::stringbuf::str();
    sub_110D2DC((uint64_t)&v9, 332, (uint64_t)&v7);
    if (v8 < 0)
    {
      operator delete(v7);
      if ((SHIBYTE(v10) & 0x80000000) == 0) {
        goto LABEL_6;
      }
    }
    else if ((SHIBYTE(v10) & 0x80000000) == 0)
    {
LABEL_6:
      if (v12 < 0) {
        operator delete((void *)v11[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      return sub_11161EC(a3, a2);
    }
    operator delete(v9);
    goto LABEL_6;
  }
  return sub_11161EC(a3, a2);
}

void sub_110C1C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      sub_111ECAC((uint64_t)&a22);
      _Unwind_Resume(a1);
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  sub_111ECAC((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_110C224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_110C238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_110C24C(_Unwind_Exception *a1)
{
  sub_1116458(v1);
  _Unwind_Resume(a1);
}

void sub_110C260(uint64_t *a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 84) == 1)
  {
    uint64_t v3 = *a1;
    if ((*(unsigned char *)(a2 + 16) & 1) == 0)
    {
      uint64_t v5 = *(char **)(v3 + 32);
      unint64_t v4 = *(void *)(v3 + 40);
      if ((unint64_t)v5 < v4)
      {
        *(_DWORD *)uint64_t v5 = -1;
        uint64_t v6 = (uint64_t)(v5 + 4);
LABEL_66:
        *(void *)(v3 + 32) = v6;
        return;
      }
      int v17 = *(char **)(v3 + 24);
      uint64_t v18 = (v5 - v17) >> 2;
      unint64_t v19 = v18 + 1;
      if (!((unint64_t)(v18 + 1) >> 62))
      {
        uint64_t v20 = v4 - (void)v17;
        if (v20 >> 1 > v19) {
          unint64_t v19 = v20 >> 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (!v21)
        {
          unsigned int v22 = 0;
          goto LABEL_49;
        }
        if (!(v21 >> 62))
        {
          unsigned int v22 = operator new(4 * v21);
LABEL_49:
          int v31 = &v22[4 * v18];
          int v32 = &v22[4 * v21];
          *int v31 = -1;
          uint64_t v6 = (uint64_t)(v31 + 1);
          if (v5 != v17)
          {
            unint64_t v34 = v5 - v17 - 4;
            if (v34 < 0x2C) {
              goto LABEL_99;
            }
            if ((unint64_t)(v17 - v22) < 0x20) {
              goto LABEL_99;
            }
            uint64_t v35 = (v34 >> 2) + 1;
            uint64_t v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v37 = &v5[-v36];
            int v31 = (_DWORD *)((char *)v31 - v36);
            int v38 = &v22[4 * v18 - 16];
            uint64_t v39 = v5 - 16;
            uint64_t v40 = v35 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v41 = *(_OWORD *)v39;
              *(v38 - 1) = *((_OWORD *)v39 - 1);
              *int v38 = v41;
              v38 -= 2;
              v39 -= 32;
              v40 -= 8;
            }
            while (v40);
            uint64_t v5 = v37;
            if (v35 != (v35 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_99:
              do
              {
                int v42 = *((_DWORD *)v5 - 1);
                v5 -= 4;
                *--int v31 = v42;
              }
              while (v5 != v17);
            }
          }
          goto LABEL_64;
        }
LABEL_96:
        sub_188D718();
      }
LABEL_95:
      sub_2E00();
    }
    char v8 = *(char **)v3;
    unint64_t v7 = *(void *)(v3 + 8);
    if (*(void *)v3 != v7)
    {
      unint64_t v9 = *(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL;
      char v10 = *(unsigned char *)(v9 + 23);
      if (v10 >= 0) {
        uint64_t v11 = *(unsigned __int8 *)(v9 + 23);
      }
      else {
        uint64_t v11 = *(void *)(v9 + 8);
      }
      if (v10 >= 0) {
        char v12 = (unsigned __int8 *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
      }
      else {
        char v12 = *(unsigned __int8 **)v9;
      }
      uint64_t v13 = *(char **)v3;
      while (1)
      {
        uint64_t v14 = v13[23];
        if ((v14 & 0x80u) == 0) {
          uint64_t v15 = v13[23];
        }
        else {
          uint64_t v15 = *((void *)v13 + 1);
        }
        if (v15 == v11)
        {
          if ((v14 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v13, v12, *((void *)v13 + 1))) {
              goto LABEL_35;
            }
          }
          else
          {
            if (!v13[23]) {
              goto LABEL_35;
            }
            uint64_t v16 = 0;
            while (v13[v16] == v12[v16])
            {
              if (v14 == ++v16) {
                goto LABEL_35;
              }
            }
          }
        }
        v13 += 24;
        if (v13 == (char *)v7) {
          goto LABEL_68;
        }
      }
    }
    uint64_t v13 = *(char **)v3;
LABEL_35:
    if (v13 != (char *)v7)
    {
      unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v8) >> 3);
      int v25 = *(char **)(v3 + 32);
      unint64_t v24 = *(void *)(v3 + 40);
      if ((unint64_t)v25 < v24)
      {
        *(_DWORD *)int v25 = v23;
        uint64_t v6 = (uint64_t)(v25 + 4);
        goto LABEL_66;
      }
      int v17 = *(char **)(v3 + 24);
      uint64_t v26 = (v25 - v17) >> 2;
      unint64_t v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 62) {
        goto LABEL_95;
      }
      uint64_t v28 = v24 - (void)v17;
      if (v28 >> 1 > v27) {
        unint64_t v27 = v28 >> 1;
      }
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v29 = v27;
      }
      if (v29)
      {
        if (v29 >> 62) {
          goto LABEL_96;
        }
        int v30 = operator new(4 * v29);
        int v31 = &v30[4 * v26];
        int v32 = &v30[4 * v29];
        *int v31 = v23;
        uint64_t v6 = (uint64_t)(v31 + 1);
        int64_t v33 = v25 - v17;
        if (v25 == v17)
        {
LABEL_64:
          *(void *)(v3 + 24) = v31;
          *(void *)(v3 + 32) = v6;
          *(void *)(v3 + 40) = v32;
          if (v17) {
            operator delete(v17);
          }
          goto LABEL_66;
        }
      }
      else
      {
        int v30 = 0;
        int v31 = (_DWORD *)(4 * v26);
        int v32 = 0;
        *(_DWORD *)(4 * v26) = v23;
        uint64_t v6 = 4 * v26 + 4;
        int64_t v33 = v25 - v17;
        if (v25 == v17) {
          goto LABEL_64;
        }
      }
      unint64_t v43 = v33 - 4;
      if (v43 < 0x2C) {
        goto LABEL_100;
      }
      if ((unint64_t)(v17 - v30) < 0x20) {
        goto LABEL_100;
      }
      uint64_t v44 = (v43 >> 2) + 1;
      uint64_t v45 = 4 * (v44 & 0x7FFFFFFFFFFFFFF8);
      int v46 = &v25[-v45];
      int v31 = (_DWORD *)((char *)v31 - v45);
      uint64_t v47 = &v30[4 * v26 - 16];
      int v48 = v25 - 16;
      uint64_t v49 = v44 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v50 = *(_OWORD *)v48;
        *(v47 - 1) = *((_OWORD *)v48 - 1);
        _OWORD *v47 = v50;
        v47 -= 2;
        v48 -= 32;
        v49 -= 8;
      }
      while (v49);
      int v25 = v46;
      if (v44 != (v44 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_100:
        do
        {
          int v51 = *((_DWORD *)v25 - 1);
          v25 -= 4;
          *--int v31 = v51;
        }
        while (v25 != v17);
      }
      goto LABEL_64;
    }
LABEL_68:
    unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v8) >> 3);
    uint64_t v54 = *(char **)(v3 + 32);
    unint64_t v53 = *(void *)(v3 + 40);
    if ((unint64_t)v54 >= v53)
    {
      unsigned __int8 v56 = *(char **)(v3 + 24);
      uint64_t v57 = (v54 - v56) >> 2;
      unint64_t v58 = v57 + 1;
      if ((unint64_t)(v57 + 1) >> 62) {
        goto LABEL_95;
      }
      uint64_t v59 = v53 - (void)v56;
      if (v59 >> 1 > v58) {
        unint64_t v58 = v59 >> 1;
      }
      if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v60 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v60 = v58;
      }
      if (v60)
      {
        if (v60 >> 62) {
          goto LABEL_96;
        }
        int v61 = operator new(4 * v60);
      }
      else
      {
        int v61 = 0;
      }
      unsigned int v62 = &v61[4 * v57];
      int v63 = &v61[4 * v60];
      *unsigned int v62 = v52;
      unsigned int v55 = v62 + 1;
      if (v54 != v56)
      {
        unint64_t v64 = v54 - v56 - 4;
        if (v64 < 0x2C) {
          goto LABEL_101;
        }
        if ((unint64_t)(v56 - v61) < 0x20) {
          goto LABEL_101;
        }
        uint64_t v65 = (v64 >> 2) + 1;
        uint64_t v66 = 4 * (v65 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v67 = &v54[-v66];
        unsigned int v62 = (_DWORD *)((char *)v62 - v66);
        int v68 = &v61[4 * v57 - 16];
        uint64_t v69 = v54 - 16;
        uint64_t v70 = v65 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v71 = *(_OWORD *)v69;
          *(v68 - 1) = *((_OWORD *)v69 - 1);
          *int v68 = v71;
          v68 -= 2;
          v69 -= 32;
          v70 -= 8;
        }
        while (v70);
        uint64_t v54 = v67;
        if (v65 != (v65 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_101:
          do
          {
            int v72 = *((_DWORD *)v54 - 1);
            v54 -= 4;
            *--unsigned int v62 = v72;
          }
          while (v54 != v56);
        }
      }
      *(void *)(v3 + 24) = v62;
      *(void *)(v3 + 32) = v55;
      *(void *)(v3 + 40) = v63;
      if (v56)
      {
        operator delete(v56);
        unint64_t v7 = *(void *)(v3 + 8);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v54 = v52;
      unsigned int v55 = v54 + 4;
    }
    *(void *)(v3 + 32) = v55;
    unint64_t v73 = *(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL;
    if (v7 >= *(void *)(v3 + 16))
    {
      *(void *)(v3 + 8) = sub_6E6EC((char **)v3, v73);
    }
    else
    {
      if (*(char *)(v73 + 23) < 0)
      {
        sub_4200((unsigned char *)v7, *(void **)v73, *(void *)(v73 + 8));
      }
      else
      {
        long long v74 = *(_OWORD *)v73;
        *(void *)(v7 + 16) = *(void *)(v73 + 16);
        *(_OWORD *)unint64_t v7 = v74;
      }
      *(void *)(v3 + 8) = v7 + 24;
      *(void *)(v3 + 8) = v7 + 24;
    }
  }
}

void sub_110C750(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

__n128 sub_110C758(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 1;
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 8) = result;
  return result;
}

void *sub_110C76C(void *result, uint64_t a2)
{
  *__n128 result = a2;
  result[1] = 0;
  return result;
}

void sub_110C774(std::string **a1, std::string::size_type a2)
{
  std::string::reserve(*a1, a2);
  unint64_t v4 = *a1;
  if (SHIBYTE((*a1)->__r_.__value_.__r.__words[2]) < 0) {
    std::string::size_type size = v4->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type size = HIBYTE((*a1)->__r_.__value_.__r.__words[2]);
  }
  if (size <= a2) {
    std::string::size_type v6 = a2;
  }
  else {
    std::string::size_type v6 = size;
  }

  std::string::resize(v4, v6, 0);
}

void sub_110C7D4(_DWORD *a1, unsigned int a2, int a3)
{
  int v6 = a1[3];
  unint64_t v7 = (v6 + 5);
  uint64_t v8 = *(void *)a1;
  if ((*(char *)(v8 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned __int8 *)(v8 + 23) > v7) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*(void *)(v8 + 8) <= v7) {
LABEL_3:
  }
    std::string::resize((std::string *)v8, (2 * v6 + 10), 0);
LABEL_4:
  if (a2)
  {
    unsigned int v9 = 0;
    unsigned int v10 = 1 << (a2 - 1);
    unsigned int v11 = a1[3];
    int v12 = a1[2] & 7;
    do
    {
      uint64_t v14 = *(void **)a1;
      if (*(char *)(*(void *)a1 + 23) < 0) {
        uint64_t v14 = (void *)*v14;
      }
      *((unsigned char *)v14 + v11) |= ((v10 & a3) != 0) << v12;
      int v13 = a1[2] + 1;
      LOBYTE(v12) = v13 & 7;
      if ((v13 & 7) != 0) {
        unsigned int v11 = a1[3];
      }
      else {
        unsigned int v11 = a1[3] + 1;
      }
      a1[2] = v13;
      a1[3] = v11;
      v10 >>= 1;
      ++v9;
    }
    while (v9 < a2);
  }
}

void sub_110C8B8(_DWORD *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v6 = a3 >> a2;
  unsigned int v7 = (a3 >> a2) + 31;
  if (v7 >= 0x20)
  {
    int v19 = 0;
    unsigned int v20 = v7 >> 5;
    if (v7 >> 5 <= 1) {
      int v21 = 1;
    }
    else {
      int v21 = v7 >> 5;
    }
    unsigned int v22 = a3 >> a2;
    while (1)
    {
      if (++v19 >= v20)
      {
        int v31 = *(std::string **)a1;
        if (*(char *)(*(void *)a1 + 23) < 0)
        {
          int v32 = a1[3];
          if (v31->__r_.__value_.__l.__size_ <= (v32 + 5)) {
LABEL_37:
          }
            std::string::resize(v31, (2 * v32 + 10), 0);
        }
        else
        {
          int v32 = a1[3];
          if (*(unsigned __int8 *)(*(void *)a1 + 23) <= (unint64_t)(v32 + 5)) {
            goto LABEL_37;
          }
        }
        if ((_BYTE)v22)
        {
          unsigned int v33 = 0;
          unsigned int v34 = 1 << (v22 - 1);
          unsigned int v35 = a1[3];
          int v36 = a1[2] & 7;
          do
          {
            int v38 = *(void **)a1;
            if (*(char *)(*(void *)a1 + 23) < 0) {
              int v38 = (void *)*v38;
            }
            *((unsigned char *)v38 + v35) |= ((v34 & (0xFFFFFFFF >> -(char)v22)) != 0) << v36;
            int v37 = a1[2] + 1;
            LOBYTE(v36) = v37 & 7;
            if ((v37 & 7) != 0) {
              unsigned int v35 = a1[3];
            }
            else {
              unsigned int v35 = a1[3] + 1;
            }
            a1[2] = v37;
            a1[3] = v35;
            v34 >>= 1;
            ++v33;
          }
          while (v33 < v22);
        }
        goto LABEL_23;
      }
      unint64_t v23 = *(std::string **)a1;
      if ((*(char *)(*(void *)a1 + 23) & 0x80000000) == 0) {
        break;
      }
      unsigned int v24 = a1[3];
      if (v23->__r_.__value_.__l.__size_ <= v24 + 5) {
        goto LABEL_27;
      }
LABEL_28:
      unsigned int v25 = 0;
      char v26 = a1[2] & 7;
      unsigned int v27 = 0x80000000;
      do
      {
        int v30 = *(void **)a1;
        if (*(char *)(*(void *)a1 + 23) < 0) {
          int v30 = (void *)*v30;
        }
        *((unsigned char *)v30 + v24) |= (v27 != 0) << v26;
        int v28 = a1[2] + 1;
        char v26 = v28 & 7;
        if ((v28 & 7) != 0) {
          unsigned int v24 = a1[3];
        }
        else {
          unsigned int v24 = a1[3] + 1;
        }
        a1[2] = v28;
        a1[3] = v24;
        v27 >>= 1;
      }
      while (v25++ < 0x1F);
LABEL_23:
      LOBYTE(v22) = v22 - 32;
      if (v19 == v21) {
        goto LABEL_2;
      }
    }
    unsigned int v24 = a1[3];
    if (*(unsigned __int8 *)(*(void *)a1 + 23) > (unint64_t)(v24 + 5)) {
      goto LABEL_28;
    }
LABEL_27:
    std::string::resize(v23, 2 * v24 + 10, 0);
    unsigned int v24 = a1[3];
    goto LABEL_28;
  }
LABEL_2:
  int v8 = a1[3];
  unint64_t v9 = (v8 + 5);
  uint64_t v10 = *(void *)a1;
  if ((*(char *)(*(void *)a1 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned __int8 *)(*(void *)a1 + 23) > v9) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  if (*(void *)(v10 + 8) <= v9)
  {
LABEL_4:
    std::string::resize((std::string *)v10, (2 * v8 + 10), 0);
    int v8 = a1[3];
    uint64_t v10 = *(void *)a1;
  }
LABEL_5:
  int v11 = a1[2] + 1;
  if ((v11 & 7) == 0) {
    ++v8;
  }
  a1[2] = v11;
  a1[3] = v8;
  unint64_t v12 = (v8 + 5);
  if ((*(char *)(v10 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned __int8 *)(v10 + 23) > v12) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (*(void *)(v10 + 8) <= v12) {
LABEL_9:
  }
    std::string::resize((std::string *)v10, (2 * v8 + 10), 0);
LABEL_10:
  if (a2)
  {
    unsigned int v13 = 0;
    unsigned int v14 = 1 << (a2 - 1);
    unsigned int v15 = a1[3];
    int v16 = a1[2] & 7;
    do
    {
      uint64_t v18 = *(void **)a1;
      if (*(char *)(*(void *)a1 + 23) < 0) {
        uint64_t v18 = (void *)*v18;
      }
      *((unsigned char *)v18 + v15) |= ((v14 & (a3 - (v6 << a2))) != 0) << v16;
      int v17 = a1[2] + 1;
      LOBYTE(v16) = v17 & 7;
      if ((v17 & 7) != 0) {
        unsigned int v15 = a1[3];
      }
      else {
        unsigned int v15 = a1[3] + 1;
      }
      a1[2] = v17;
      a1[3] = v15;
      v14 >>= 1;
      ++v13;
    }
    while (v13 < a2);
  }
}

void sub_110CBD8(uint64_t a1)
{
  std::string::resize(*(std::string **)a1, (*(_DWORD *)(a1 + 8) + 7) >> 3, 0);
  uint64_t v2 = *(std::string **)a1;

  sub_110CC24((unint64_t *)v2);
}

void sub_110CC24(unint64_t *__dst)
{
  uint64_t v2 = *((unsigned __int8 *)__dst + 23);
  if ((*((char *)__dst + 23) & 0x80000000) == 0)
  {
    if (v2 < 0x17) {
      return;
    }
    uint64_t v3 = v2 | 7;
    if ((v2 | 7) == 0x17)
    {
      unint64_t v4 = v2 & 0xF8;
      if (v4 <= 0xE)
      {
        size_t v5 = v4 + 9;
        unsigned int v6 = (unsigned __int8 *)*__dst;
        char v7 = 1;
        unint64_t v8 = *((unsigned __int8 *)__dst + 23);
        unint64_t v9 = __dst;
        int v10 = 1;
        size_t v11 = v2 + 1;
LABEL_21:
        memmove(v9, v6, v11);
LABEL_22:
        if (v10)
        {
          operator delete(v6);
          if (v7) {
            goto LABEL_24;
          }
        }
        else if (v7)
        {
LABEL_24:
          *((unsigned char *)__dst + 23) = v8 & 0x7F;
          return;
        }
        __dst[1] = v8;
        __dst[2] = v5 | 0x8000000000000000;
        *long long __dst = (unint64_t)v9;
        return;
      }
      uint64_t v3 = v4 + 8;
    }
    unint64_t v8 = *((unsigned __int8 *)__dst + 23);
    size_t v5 = v3 + 1;
    goto LABEL_17;
  }
  unint64_t v12 = __dst[1];
  if (v12 < 0x17)
  {
    if ((__dst[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x17) {
      return;
    }
    unint64_t v13 = 22;
    goto LABEL_13;
  }
  unint64_t v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v12 | 7) != 0x17) {
    unint64_t v13 = v12 | 7;
  }
  if (v13 != (__dst[2] & 0x7FFFFFFFFFFFFFFFLL) - 1)
  {
    if (v13 >= 0x17)
    {
      unint64_t v8 = __dst[1];
      size_t v5 = v13 + 1;
LABEL_17:
      unint64_t v9 = operator new(v5);
      char v7 = 0;
      if ((v2 & 0x80) == 0)
      {
        int v10 = 0;
        unsigned int v6 = (unsigned __int8 *)__dst;
        size_t v11 = v2 + 1;
        goto LABEL_21;
      }
      unint64_t v12 = __dst[1];
LABEL_20:
      unsigned int v6 = (unsigned __int8 *)*__dst;
      int v10 = 1;
      size_t v11 = v12 + 1;
      if (v12 == -1) {
        goto LABEL_22;
      }
      goto LABEL_21;
    }
LABEL_13:
    size_t v5 = v13 + 1;
    char v7 = 1;
    unint64_t v8 = __dst[1];
    unint64_t v9 = __dst;
    goto LABEL_20;
  }
}

void sub_110CDD4(void *a1)
{
}

uint64_t sub_110CDE4(_DWORD *a1, unsigned int a2)
{
  char v2 = a2;
  int v3 = a1[2];
  unint64_t v4 = (a2 + v3 - 1) >> 3;
  size_t v5 = *(uint64_t **)a1;
  if ((*(char *)(*(void *)a1 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned __int8 *)(*(void *)a1 + 23) > v4) {
      goto LABEL_3;
    }
LABEL_11:
    if (!sub_110D440()) {
      return 0;
    }
    sub_6BAC((uint64_t)v19);
    unint64_t v12 = sub_188FC78(v19, (uint64_t)"Prevented read past-the-end (num_bits=", 38);
    LOBYTE(v17) = v2;
    unint64_t v13 = sub_188FC78(v12, (uint64_t)&v17, 1);
    sub_188FC78(v13, (uint64_t)"). Returning 0.", 15);
    int v17 = operator new(0x90uLL);
    long long v18 = xmmword_20E7B60;
    strcpy((char *)v17, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/src/path-codec/compression/BitStream.cpp");
    std::stringbuf::str();
    sub_110D454((uint64_t)&v17, 89, (uint64_t)&v15);
    if (v16 < 0)
    {
      operator delete(v15);
      if ((SHIBYTE(v18) & 0x80000000) == 0) {
        goto LABEL_14;
      }
    }
    else if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
LABEL_14:
      if (v20 < 0) {
        operator delete((void *)v19[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      return 0;
    }
    operator delete(v17);
    goto LABEL_14;
  }
  if (v5[1] <= v4) {
    goto LABEL_11;
  }
LABEL_3:
  if (a2)
  {
    unsigned int v6 = 0;
    LODWORD(v7) = 0;
    char v8 = v3 & 7;
    unsigned int v9 = a1[3];
    int v10 = v3 + 1;
    do
    {
      size_t v11 = v5;
      if (*((char *)v5 + 23) < 0) {
        size_t v11 = (uint64_t *)*v5;
      }
      uint64_t v7 = (*((char *)v11 + v9) >> v8) & 1 | (2 * v7);
      char v8 = v10 & 7;
      if ((v10 & 7) == 0) {
        ++v9;
      }
      a1[2] = v10;
      a1[3] = v9;
      ++v6;
      ++v10;
    }
    while (v6 < a2);
    return v7;
  }
  return 0;
}

void sub_110D088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if (a21 < 0)
    {
LABEL_5:
      operator delete(a16);
      sub_111ECAC((uint64_t)&a22);
      _Unwind_Resume(a1);
    }
  }
  else if (a21 < 0)
  {
    goto LABEL_5;
  }
  sub_111ECAC((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_110D0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_110D0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_110D10C(_DWORD *a1, unsigned int a2)
{
  int v4 = -1;
  do
    ++v4;
  while (sub_110CDE4(a1, 1u));
  return sub_110CDE4(a1, a2) + (v4 << a2);
}

void sub_110D164(uint64_t a1, char a2)
{
  std::mutex::lock(&stru_24F7EC8);
  qword_254E548 = a1;
  byte_24F7EC0 = a2;

  std::mutex::unlock(&stru_24F7EC8);
}

void sub_110D1C4()
{
  std::mutex::lock(&stru_24F7EC8);
  qword_254E548 = 0;

  std::mutex::unlock(&stru_24F7EC8);
}

BOOL sub_110D20C()
{
  return byte_24F7EC0 == 0;
}

void sub_110D220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex::lock(&stru_24F7EC8);
  if (qword_254E548) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)qword_254E548 + 24))(qword_254E548, a1, a2, a3);
  }

  std::mutex::unlock(&stru_24F7EC8);
}

void sub_110D2B0(_Unwind_Exception *a1)
{
}

BOOL sub_110D2C8()
{
  return byte_24F7EC0 < 2u;
}

void sub_110D2DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex::lock(&stru_24F7EC8);
  if (qword_254E548) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)qword_254E548 + 40))(qword_254E548, a1, a2, a3);
  }

  std::mutex::unlock(&stru_24F7EC8);
}

void sub_110D36C(_Unwind_Exception *a1)
{
}

BOOL sub_110D384()
{
  return byte_24F7EC0 < 4u;
}

void sub_110D398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex::lock(&stru_24F7EC8);
  if (qword_254E548) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)qword_254E548 + 72))(qword_254E548, a1, a2, a3);
  }

  std::mutex::unlock(&stru_24F7EC8);
}

void sub_110D428(_Unwind_Exception *a1)
{
}

BOOL sub_110D440()
{
  return byte_24F7EC0 < 5u;
}

void sub_110D454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex::lock(&stru_24F7EC8);
  if (qword_254E548) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)qword_254E548 + 88))(qword_254E548, a1, a2, a3);
  }

  std::mutex::unlock(&stru_24F7EC8);
}

void sub_110D4E4(_Unwind_Exception *a1)
{
}

uint64_t sub_110D4FC(uint64_t a1)
{
  int v3 = (void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_7;
    }
  }
  else if (v4)
  {
    goto LABEL_7;
  }
  size_t v5 = (void ***)(a1 + 48);
  if (*(uint64_t **)(a1 + 48) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (v2) {
    sub_10E4F74(v3);
  }
LABEL_7:
  sub_1889DA8(a1 + 24);
  *(void *)a1 = off_24E6998;
  uint64_t v6 = *(void *)(a1 + 8);
  if ((v6 & 2) != 0)
  {
    uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
    if (v6)
    {
      if (*v7)
      {
LABEL_10:
        sub_1881618();
        operator delete();
      }
    }
    else if (v7)
    {
      goto LABEL_10;
    }
  }
  return a1;
}

void sub_110D5D4(uint64_t a1)
{
  sub_110D4FC(a1);

  operator delete();
}

uint64_t sub_110D60C(uint64_t a1)
{
  *(_DWORD *)(a1 + 24) = 0;
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 1) == 0)
  {
LABEL_4:
    if ((v1 & 6) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  unint64_t v2 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)unint64_t v2 = 0;
    *(unsigned char *)(v2 + 23) = 0;
    goto LABEL_4;
  }
  **(unsigned char **)unint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  if ((v1 & 6) != 0) {
LABEL_5:
  }
    *(void *)(a1 + 56) = 0;
LABEL_6:
  char v4 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v4) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_110D668(uint64_t a1, char *a2, int32x2_t *a3)
{
  char v4 = a2;
  int v6 = 0;
  *(void *)unsigned int v33 = a2;
  uint64_t v7 = (uint64_t *)(a1 + 8);
  char v8 = (unsigned int *)(a1 + 24);
  unsigned int v9 = (void *)(a1 + 48);
  while ((unint64_t)v4 < *(void *)a3)
  {
LABEL_5:
    unint64_t v12 = v4 + 1;
    unsigned int v13 = *v4;
    if (*v4 < 0)
    {
      unsigned int v17 = v13 + (*v12 << 7);
      unsigned int v13 = v17 - 128;
      if (*v12 < 0)
      {
        unint64_t v12 = (char *)sub_188C180((uint64_t)v4, v17 - 128);
        unsigned int v13 = v21;
        *(void *)unsigned int v33 = v12;
        unsigned int v14 = (v21 >> 3) - 1;
        if (v14 <= 3) {
          goto LABEL_7;
        }
      }
      else
      {
        unint64_t v12 = v4 + 2;
        *(void *)unsigned int v33 = v4 + 2;
        unsigned int v14 = (v13 >> 3) - 1;
        if (v14 <= 3) {
          goto LABEL_7;
        }
      }
LABEL_25:
      if (v13) {
        BOOL v22 = (v13 & 7) == 4;
      }
      else {
        BOOL v22 = 1;
      }
      if (v22)
      {
        if (v12) {
          a3[10].i32[0] = v13 - 1;
        }
        goto LABEL_53;
      }
      if (*v7)
      {
        unint64_t v23 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
      else
      {
        unint64_t v23 = (std::string *)sub_188DBD8(v7);
        unint64_t v12 = *(char **)v33;
      }
      size_t v11 = (char *)sub_1885AC0(v13, v23, v12, a3);
LABEL_3:
      char v4 = v11;
      *(void *)unsigned int v33 = v11;
      if (!v11) {
        goto LABEL_54;
      }
    }
    else
    {
      *(void *)unsigned int v33 = v4 + 1;
      unsigned int v14 = (v13 >> 3) - 1;
LABEL_7:
      switch(v14)
      {
        case 0u:
          if (v13 != 8) {
            goto LABEL_25;
          }
          char v4 = v12 + 1;
          LODWORD(v15) = *v12;
          if (*v12 < 0)
          {
            int v16 = *v4;
            uint64_t v15 = v15 + (v16 << 7) - 128;
            if (v16 < 0) {
              char v4 = (char *)sub_188C138((uint64_t)v12, v15);
            }
            else {
              char v4 = v12 + 2;
            }
          }
          *(void *)unsigned int v33 = v4;
          *(_DWORD *)(a1 + 56) = -(v15 & 1) ^ (v15 >> 1);
          int v6 = 2;
          if (!v4) {
            goto LABEL_54;
          }
          continue;
        case 1u:
          if (v13 != 18) {
            goto LABEL_25;
          }
          *(_DWORD *)(a1 + 16) |= 1u;
          uint64_t v18 = *(void *)(a1 + 8);
          int v19 = (uint64_t *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
          if (v18) {
            int v19 = (uint64_t *)*v19;
          }
          int v10 = (std::string *)sub_1880F84(v9, v19);
          size_t v11 = (char *)sub_188C244(v10, *(char **)v33, (uint64_t)a3);
          goto LABEL_3;
        case 2u:
          if (v13 == 26)
          {
            size_t v11 = (char *)sub_188C2CC(v8, (unsigned __int8 *)v12, (uint64_t)a3);
            goto LABEL_3;
          }
          if (v13 != 24) {
            goto LABEL_25;
          }
          int v31 = sub_110DAD8((uint64_t *)v33);
          sub_110DA54(a1, v31);
          char v4 = *(char **)v33;
          if (!*(void *)v33)
          {
LABEL_54:
            unint64_t v12 = 0;
            goto LABEL_53;
          }
          break;
        case 3u:
          if (v13 != 32) {
            goto LABEL_25;
          }
          char v4 = v12 + 1;
          unint64_t v20 = *v12;
          if (*v12 < 0)
          {
            int v24 = *v4;
            int v25 = v20 + (v24 << 7);
            unint64_t v20 = (v25 - 128);
            if (v24 < 0)
            {
              uint64_t v27 = sub_188C138((uint64_t)v12, (v25 - 128));
              *(void *)unsigned int v33 = v27;
              if (!v27) {
                goto LABEL_54;
              }
              char v4 = (char *)v27;
              unint64_t v20 = v28;
              if (v28 <= 2)
              {
LABEL_23:
                *(_DWORD *)(a1 + 16) |= 4u;
                *(_DWORD *)(a1 + 60) = v20;
                continue;
              }
            }
            else
            {
              char v4 = v12 + 2;
              *(void *)unsigned int v33 = v12 + 2;
              if (v20 <= 2) {
                goto LABEL_23;
              }
            }
          }
          else
          {
            *(void *)unsigned int v33 = v12 + 1;
            if (v20 <= 2) {
              goto LABEL_23;
            }
          }
          if (*v7) {
            char v26 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            char v26 = (std::string *)sub_188DBD8(v7);
          }
          sub_188C020(4, v20, v26);
          char v4 = *(char **)v33;
          continue;
        default:
          goto LABEL_25;
      }
    }
  }
  int v29 = v4 - a3[1].i32[0];
  if (a3[3].i32[1] != v29)
  {
    char v4 = sub_188BB90((uint64_t)a3, v29, a3[11].i32[1]);
    *(void *)unsigned int v33 = v4;
    if (v30) {
      goto LABEL_59;
    }
    goto LABEL_5;
  }
  if (v29 < 1)
  {
LABEL_59:
    unint64_t v12 = v4;
  }
  else if (a3[2])
  {
    unint64_t v12 = v4;
  }
  else
  {
    unint64_t v12 = 0;
  }
LABEL_53:
  *(_DWORD *)(a1 + 16) |= v6;
  return v12;
}

uint64_t sub_110D9EC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = (char *)*a1;
  int v5 = *v3;
  char v4 = v3 + 1;
  LODWORD(v6) = v5;
  if (v5 < 0)
  {
    uint64_t v6 = v6 + (*v4 << 7) - 128;
    if (*v4 < 0) {
      char v4 = (char *)sub_188C138(v2, v6);
    }
    else {
      char v4 = (char *)(v2 + 2);
    }
  }
  *a1 = (uint64_t)v4;
  return -(v6 & 1) ^ (v6 >> 1);
}

void sub_110DA54(uint64_t a1, int a2)
{
  uint64_t v5 = *(unsigned int *)(a1 + 24);
  char v4 = (_DWORD *)(a1 + 24);
  if (v5 == *(_DWORD *)(a1 + 28))
  {
    sub_188C80C((unsigned int *)(a1 + 24), v5 + 1);
    *(_DWORD *)(*(void *)(a1 + 32) + 4 * v5) = a2;
  }
  else
  {
    *(_DWORD *)(*(void *)(a1 + 32) + 4 * v5) = a2;
  }
  *char v4 = v5 + 1;
}

uint64_t sub_110DAD8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = (char *)*a1;
  int v5 = *v3;
  char v4 = v3 + 1;
  uint64_t v6 = v5;
  if (v5 < 0)
  {
    int v8 = v6 + (*v4 << 7);
    if (*v4 < 0)
    {
      *a1 = sub_188C0D0(v2, v8 - 128);
      return v9;
    }
    else
    {
      *a1 = v2 + 2;
      return (v8 - 128);
    }
  }
  else
  {
    *a1 = (uint64_t)v4;
    return v6;
  }
}

uint64_t sub_110DB5C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = (char *)*a1;
  int v5 = *v3;
  char v4 = v3 + 1;
  uint64_t v6 = v5;
  if (v5 < 0)
  {
    int v8 = v6 + (*v4 << 7);
    if (*v4 < 0)
    {
      *a1 = sub_188C138(v2, (v8 - 128));
      return v9;
    }
    else
    {
      *a1 = v2 + 2;
      return (v8 - 128);
    }
  }
  else
  {
    *a1 = (uint64_t)v4;
    return v6;
  }
}

unsigned char *sub_110DBE0(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  char v4 = (unsigned char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 2) != 0)
  {
    if (*a3 <= __dst) {
      char v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    int v7 = *(_DWORD *)(a1 + 56);
    *char v4 = 8;
    unsigned int v8 = (2 * v7) ^ (v7 >> 31);
    v4[1] = (2 * v7) ^ (v7 >> 31);
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      unsigned int v9 = v8 >> 7;
      _OWORD v4[2] = v8 >> 7;
      v4 += 3;
      if (v8 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unsigned int v10 = v9 >> 14;
          v9 >>= 7;
          *v4++ = v9;
        }
        while (v10);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if ((v6 & 1) == 0)
  {
LABEL_17:
    int v14 = *(_DWORD *)(a1 + 40);
    if (v14 >= 1) {
      goto LABEL_18;
    }
    goto LABEL_31;
  }
  unint64_t v11 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v11 + 23) < 0)
  {
    int64_t v12 = *(void *)(v11 + 8);
    if (v12 > 127) {
      goto LABEL_30;
    }
  }
  else
  {
    int64_t v12 = *(unsigned __int8 *)(v11 + 23);
  }
  if ((uint64_t)(*a3 - (void)v4 + 14) >= v12)
  {
    *char v4 = 18;
    v4[1] = v12;
    if (*(char *)(v11 + 23) >= 0) {
      unsigned int v13 = (const void *)v11;
    }
    else {
      unsigned int v13 = *(const void **)v11;
    }
    memcpy(v4 + 2, v13, v12);
    v4 += v12 + 2;
    goto LABEL_17;
  }
LABEL_30:
  char v4 = sub_188A6CC(a3, 2, (void **)v11, v4);
  int v14 = *(_DWORD *)(a1 + 40);
  if (v14 >= 1)
  {
LABEL_18:
    if (*a3 <= (unint64_t)v4)
    {
      char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      *char v4 = 26;
      uint64_t v15 = v4 + 1;
      if (v14 < 0x80) {
        goto LABEL_20;
      }
    }
    else
    {
      *char v4 = 26;
      uint64_t v15 = v4 + 1;
      if (v14 < 0x80)
      {
LABEL_20:
        v4 += 2;
        *uint64_t v15 = v14;
        int v16 = *(unsigned int **)(a1 + 32);
        unsigned int v17 = &v16[*(int *)(a1 + 24)];
        while (1)
        {
          if (*a3 <= (unint64_t)v4)
          {
            char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
            unsigned int v22 = *v16++;
            unsigned int v18 = v22;
            *char v4 = v22;
            if (v22 > 0x7F)
            {
LABEL_25:
              *char v4 = v18 | 0x80;
              unsigned int v20 = v18 >> 7;
              v4[1] = v18 >> 7;
              v4 += 2;
              if (v18 >= 0x4000)
              {
                do
                {
                  *(v4 - 1) |= 0x80u;
                  unsigned int v21 = v20 >> 14;
                  v20 >>= 7;
                  *v4++ = v20;
                }
                while (v21);
              }
              goto LABEL_22;
            }
          }
          else
          {
            unsigned int v19 = *v16++;
            unsigned int v18 = v19;
            *char v4 = v19;
            if (v19 > 0x7F) {
              goto LABEL_25;
            }
          }
          ++v4;
LABEL_22:
          if (v16 >= v17) {
            goto LABEL_31;
          }
        }
      }
    }
    do
    {
      *v15++ = v14 | 0x80;
      unsigned int v24 = v14 >> 14;
      int v14 = v14 >> 7;
    }
    while (v24);
    char v4 = v15 - 1;
    goto LABEL_20;
  }
LABEL_31:
  if ((v6 & 4) == 0) {
    goto LABEL_41;
  }
  if (*a3 <= (unint64_t)v4)
  {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unint64_t v23 = *(int *)(a1 + 60);
    *char v4 = 32;
    v4[1] = v23;
    if (v23 <= 0x7F) {
      goto LABEL_34;
    }
  }
  else
  {
    unint64_t v23 = *(int *)(a1 + 60);
    *char v4 = 32;
    v4[1] = v23;
    if (v23 <= 0x7F)
    {
LABEL_34:
      v4 += 2;
      goto LABEL_41;
    }
  }
  v4[1] = v23 | 0x80;
  unint64_t v25 = v23 >> 7;
  _OWORD v4[2] = v23 >> 7;
  v4 += 3;
  if (v23 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unint64_t v26 = v25 >> 14;
      v25 >>= 7;
      *v4++ = v25;
    }
    while (v26);
  }
LABEL_41:
  uint64_t v27 = *(void *)(a1 + 8);
  if ((v27 & 1) == 0) {
    return v4;
  }
  unint64_t v29 = v27 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v29 + 31) < 0)
  {
    char v30 = *(char **)(v29 + 8);
    uint64_t v31 = *(void *)(v29 + 16);
  }
  else
  {
    char v30 = (char *)(v29 + 8);
    LODWORD(v31) = *(unsigned __int8 *)(v29 + 31);
  }
  uint64_t v32 = (int)v31;
  if ((uint64_t)(*a3 - (void)v4) < (int)v31)
  {
    return (unsigned char *)sub_188A528(a3, v30, v31, v4);
  }
  else
  {
    memcpy(v4, v30, (int)v31);
    return &v4[v32];
  }
}

uint64_t sub_110DF58(uint64_t a1)
{
  uint64_t result = sub_188D4F0((unsigned int *)(a1 + 24));
  if (result)
  {
    if ((result & 0x80000000) != 0)
    {
      *(_DWORD *)(a1 + 40) = result;
      result += 11;
      int v3 = *(_DWORD *)(a1 + 16);
      if ((v3 & 7) == 0) {
        goto LABEL_20;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 40) = result;
      result += ((9 * (__clz(result | 1) ^ 0x1F) + 73) >> 6) + 1;
      int v3 = *(_DWORD *)(a1 + 16);
      if ((v3 & 7) == 0) {
        goto LABEL_20;
      }
    }
  }
  else
  {
    *(_DWORD *)(a1 + 40) = 0;
    int v3 = *(_DWORD *)(a1 + 16);
    if ((v3 & 7) == 0) {
      goto LABEL_20;
    }
  }
  if ((v3 & 1) == 0)
  {
    if ((v3 & 2) == 0) {
      goto LABEL_10;
    }
LABEL_15:
    result += ((9 * (__clz((2 * *(_DWORD *)(a1 + 56)) ^ (*(int *)(a1 + 56) >> 31) | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v3 & 4) == 0) {
      goto LABEL_20;
    }
LABEL_16:
    int v7 = *(_DWORD *)(a1 + 60);
    if (v7 < 0) {
      uint64_t v8 = 11;
    }
    else {
      uint64_t v8 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    result += v8;
    goto LABEL_20;
  }
  unint64_t v4 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
  uint64_t v6 = *(void *)(v4 + 8);
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = v5;
  }
  result += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 2) != 0) {
    goto LABEL_15;
  }
LABEL_10:
  if ((v3 & 4) != 0) {
    goto LABEL_16;
  }
LABEL_20:
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v10 + 31) < 0) {
      result += *(void *)(v10 + 16);
    }
    else {
      result += *(unsigned __int8 *)(v10 + 31);
    }
    *(_DWORD *)(a1 + 20) = result;
  }
  else
  {
    *(_DWORD *)(a1 + 20) = result;
  }
  return result;
}

std::string *sub_110E0F8(std::string *result, uint64_t a2)
{
  int v3 = result;
  int v4 = *(_DWORD *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = result + 1;
    uint64_t data_low = SLODWORD(result[1].__r_.__value_.__l.__data_);
    sub_188C80C((unsigned int *)&result[1], data_low + v4);
    std::string::size_type size = v3[1].__r_.__value_.__l.__size_;
    LODWORD(v5->__r_.__value_.__l.__data_) += *(_DWORD *)(a2 + 24);
    uint64_t result = (std::string *)memcpy((void *)(size + 4 * data_low), *(const void **)(a2 + 32), 4 * *(int *)(a2 + 24));
  }
  int v8 = *(_DWORD *)(a2 + 16);
  if ((v8 & 7) != 0)
  {
    if ((v8 & 1) == 0)
    {
      if ((v8 & 2) == 0) {
        goto LABEL_6;
      }
LABEL_15:
      LODWORD(v3[2].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 56);
      if ((v8 & 4) == 0) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    unint64_t v10 = (long long *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 1u;
    unint64_t v11 = (std::string **)&v3[2];
    std::string::size_type v12 = v3->__r_.__value_.__l.__size_;
    unsigned int v13 = (uint64_t **)(v12 & 0xFFFFFFFFFFFFFFFCLL);
    if (v12)
    {
      uint64_t result = sub_1881DF4(v11, v10, *v13);
      if ((v8 & 2) != 0) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t result = sub_1881DF4(v11, v10, (uint64_t *)v13);
      if ((v8 & 2) != 0) {
        goto LABEL_15;
      }
    }
LABEL_6:
    if ((v8 & 4) == 0)
    {
LABEL_8:
      LODWORD(v3->__r_.__value_.__r.__words[2]) |= v8;
      goto LABEL_9;
    }
LABEL_7:
    HIDWORD(v3[2].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 60);
    goto LABEL_8;
  }
LABEL_9:
  uint64_t v9 = *(void *)(a2 + 8);
  if (v9)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v9 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_110E214()
{
  return 1;
}

char *sub_110E21C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x30uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_20B93C0;
  strcpy(result, "maps.path_codec.geo3.RiceEncodedIntegers");
  return result;
}

uint64_t sub_110E270(uint64_t a1)
{
  int v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_12;
    }
  }
  else if (v4)
  {
    goto LABEL_12;
  }
  if ((uint64_t (***)())a1 != &off_24F7F48)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5)
    {
      sub_110D4FC(v5);
      operator delete();
    }
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6)
    {
      sub_110D4FC(v6);
      operator delete();
    }
    uint64_t v7 = *(void *)(a1 + 40);
    if (v7)
    {
      sub_110D4FC(v7);
      operator delete();
    }
  }
  uint64_t v2 = *v3;
  if (*v3)
  {
    sub_10E4F74(v3);
    uint64_t v2 = *v3;
  }
LABEL_12:
  *(void *)a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    int v8 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v8)
      {
LABEL_15:
        sub_1881618();
        operator delete();
      }
    }
    else if (v8)
    {
      goto LABEL_15;
    }
  }
  return a1;
}

void sub_110E390(uint64_t a1)
{
  sub_110E270(a1);

  operator delete();
}

uint64_t sub_110E3C8(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 7) == 0) {
    goto LABEL_26;
  }
  if (v2)
  {
    uint64_t v3 = *(void *)(result + 24);
    *(_DWORD *)(v3 + 24) = 0;
    int v4 = *(_DWORD *)(v3 + 16);
    if (v4)
    {
      unint64_t v5 = *(void *)(v3 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v5 + 23) < 0)
      {
        **(unsigned char **)unint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        if ((v4 & 6) == 0)
        {
LABEL_8:
          char v6 = *(unsigned char *)(v3 + 8);
          uint64_t result = v3 + 8;
          *(_DWORD *)(result + 8) = 0;
          if (v6) {
            uint64_t result = sub_188B4AC((uint64_t *)result);
          }
          goto LABEL_10;
        }
LABEL_7:
        *(void *)(v3 + 56) = 0;
        goto LABEL_8;
      }
      *(unsigned char *)unint64_t v5 = 0;
      *(unsigned char *)(v5 + 23) = 0;
    }
    if ((v4 & 6) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_10:
  if ((v2 & 2) == 0) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v1 + 32);
  *(_DWORD *)(v7 + 24) = 0;
  int v8 = *(_DWORD *)(v7 + 16);
  if ((v8 & 1) == 0)
  {
LABEL_14:
    if ((v8 & 6) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  unint64_t v9 = *(void *)(v7 + 48) & 0xFFFFFFFFFFFFFFFELL;
  if ((*(char *)(v9 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)unint64_t v9 = 0;
    *(unsigned char *)(v9 + 23) = 0;
    goto LABEL_14;
  }
  **(unsigned char **)unint64_t v9 = 0;
  *(void *)(v9 + 8) = 0;
  if ((v8 & 6) != 0) {
LABEL_15:
  }
    *(void *)(v7 + 56) = 0;
LABEL_16:
  char v10 = *(unsigned char *)(v7 + 8);
  uint64_t result = v7 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v10) {
    uint64_t result = sub_188B4AC((uint64_t *)result);
  }
LABEL_18:
  if ((v2 & 4) == 0) {
    goto LABEL_26;
  }
  uint64_t v11 = *(void *)(v1 + 40);
  *(_DWORD *)(v11 + 24) = 0;
  int v12 = *(_DWORD *)(v11 + 16);
  if ((v12 & 1) == 0)
  {
LABEL_22:
    if ((v12 & 6) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  unint64_t v13 = *(void *)(v11 + 48) & 0xFFFFFFFFFFFFFFFELL;
  if ((*(char *)(v13 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)unint64_t v13 = 0;
    *(unsigned char *)(v13 + 23) = 0;
    goto LABEL_22;
  }
  **(unsigned char **)unint64_t v13 = 0;
  *(void *)(v13 + 8) = 0;
  if ((v12 & 6) != 0) {
LABEL_23:
  }
    *(void *)(v11 + 56) = 0;
LABEL_24:
  char v14 = *(unsigned char *)(v11 + 8);
  uint64_t result = v11 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v14) {
    uint64_t result = sub_188B4AC((uint64_t *)result);
  }
LABEL_26:
  char v16 = *(unsigned char *)(v1 + 8);
  uint64_t v15 = v1 + 8;
  *(_DWORD *)(v15 + 8) = 0;
  if (v16)
  {
    return sub_188B4AC((uint64_t *)v15);
  }
  return result;
}

unsigned __int8 *sub_110E540(uint64_t a1, unsigned __int8 *a2, int32x2_t *a3)
{
  char v6 = (uint64_t *)(a1 + 8);
  while (1)
  {
    if ((unint64_t)a2 < *(void *)a3) {
      goto LABEL_6;
    }
    int v24 = a2 - a3[1].i32[0];
    if (a3[3].i32[1] == v24) {
      break;
    }
    a2 = (unsigned __int8 *)sub_188BB90((uint64_t)a3, v24, a3[11].i32[1]);
    if (v25) {
      return a2;
    }
LABEL_6:
    unint64_t v9 = a2 + 1;
    unsigned int v10 = *a2;
    if (((char)*a2 & 0x80000000) == 0)
    {
      unsigned int v11 = v10 >> 3;
      if (v10 >> 3 == 3) {
        goto LABEL_20;
      }
      goto LABEL_8;
    }
    unsigned int v13 = v10 + (*v9 << 7);
    unsigned int v10 = v13 - 128;
    if ((char)*v9 < 0)
    {
      unint64_t v9 = (unsigned __int8 *)sub_188C180((uint64_t)a2, v13 - 128);
      unsigned int v10 = v20;
      unsigned int v11 = v20 >> 3;
      if (v20 >> 3 != 3) {
        goto LABEL_8;
      }
LABEL_20:
      if (v10 != 26) {
        goto LABEL_13;
      }
      *(_DWORD *)(a1 + 16) |= 4u;
      char v14 = *(void **)(a1 + 40);
      if (v14)
      {
        int v30 = 0;
        uint64_t v15 = (char *)sub_188BEE0((uint64_t)a3, v9, &v30);
        if (v15)
        {
LABEL_23:
          a2 = (unsigned __int8 *)sub_110D668((uint64_t)v14, v15, a3);
          ++a3[11].i32[0];
          if (a3[10].i32[0]) {
            return 0;
          }
LABEL_39:
          int v7 = v30;
          goto LABEL_4;
        }
      }
      else
      {
        unsigned int v21 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
        if (*v6) {
          unsigned int v21 = (void *)*v21;
        }
        char v14 = sub_11128D8((uint64_t)v21);
        *(void *)(a1 + 40) = v14;
        int v30 = 0;
        uint64_t v15 = (char *)sub_188BEE0((uint64_t)a3, v9, &v30);
        if (v15) {
          goto LABEL_23;
        }
      }
      a2 = 0;
      ++a3[11].i32[0];
      if (a3[10].i32[0]) {
        return 0;
      }
      goto LABEL_39;
    }
    unint64_t v9 = a2 + 2;
    unsigned int v11 = v10 >> 3;
    if (v10 >> 3 == 3) {
      goto LABEL_20;
    }
LABEL_8:
    if (v11 == 2)
    {
      if (v10 != 18) {
        goto LABEL_13;
      }
      *(_DWORD *)(a1 + 16) |= 2u;
      char v16 = *(void **)(a1 + 32);
      if (v16)
      {
        int v29 = 0;
        unsigned int v17 = (char *)sub_188BEE0((uint64_t)a3, v9, &v29);
        if (v17) {
          goto LABEL_28;
        }
      }
      else
      {
        unsigned int v22 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
        if (*v6) {
          unsigned int v22 = (void *)*v22;
        }
        char v16 = sub_11128D8((uint64_t)v22);
        *(void *)(a1 + 32) = v16;
        int v29 = 0;
        unsigned int v17 = (char *)sub_188BEE0((uint64_t)a3, v9, &v29);
        if (v17)
        {
LABEL_28:
          a2 = (unsigned __int8 *)sub_110D668((uint64_t)v16, v17, a3);
          ++a3[11].i32[0];
          if (a3[10].i32[0]) {
            return 0;
          }
LABEL_44:
          int v7 = v29;
          goto LABEL_4;
        }
      }
      a2 = 0;
      ++a3[11].i32[0];
      if (a3[10].i32[0]) {
        return 0;
      }
      goto LABEL_44;
    }
    if (v11 == 1 && v10 == 10)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      unsigned int v18 = *(void **)(a1 + 24);
      if (v18)
      {
        int v28 = 0;
        unsigned int v19 = (char *)sub_188BEE0((uint64_t)a3, v9, &v28);
        if (v19) {
          goto LABEL_48;
        }
      }
      else
      {
        unint64_t v23 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
        if (*v6) {
          unint64_t v23 = (void *)*v23;
        }
        unsigned int v18 = sub_11128D8((uint64_t)v23);
        *(void *)(a1 + 24) = v18;
        int v28 = 0;
        unsigned int v19 = (char *)sub_188BEE0((uint64_t)a3, v9, &v28);
        if (v19)
        {
LABEL_48:
          a2 = (unsigned __int8 *)sub_110D668((uint64_t)v18, v19, a3);
          ++a3[11].i32[0];
          if (a3[10].i32[0]) {
            return 0;
          }
          goto LABEL_3;
        }
      }
      a2 = 0;
      ++a3[11].i32[0];
      if (a3[10].i32[0]) {
        return 0;
      }
LABEL_3:
      int v7 = v28;
LABEL_4:
      int v8 = a3[3].i32[1] + v7;
      a3[3].i32[1] = v8;
      *a3 = (int32x2_t)(*(void *)&a3[1] + (v8 & (v8 >> 31)));
      if (!a2) {
        return a2;
      }
    }
    else
    {
LABEL_13:
      if (!v10 || (v10 & 7) == 4)
      {
        if (v9)
        {
          a3[10].i32[0] = v10 - 1;
          return v9;
        }
        return 0;
      }
      if (*v6)
      {
        a2 = sub_1885AC0(v10, (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8), (char *)v9, a3);
        if (!a2) {
          return a2;
        }
      }
      else
      {
        unint64_t v26 = (std::string *)sub_188DBD8(v6);
        a2 = sub_1885AC0(v10, v26, (char *)v9, a3);
        if (!a2) {
          return a2;
        }
      }
    }
  }
  if (v24 >= 1 && !*(void *)&a3[2]) {
    return 0;
  }
  return a2;
}

char *sub_110E91C(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  int v4 = (char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*a3 <= __dst) {
      int v4 = (char *)sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v9 = *(void *)(a1 + 24);
    *int v4 = 10;
    unsigned int v10 = *(_DWORD *)(v9 + 20);
    v4[1] = v10;
    if (v10 > 0x7F)
    {
      unsigned int v11 = sub_188A9CC(v10, v4 + 1);
      int v4 = sub_110DBE0(v9, (unint64_t)v11, a3);
      if ((v6 & 2) != 0) {
        goto LABEL_12;
      }
    }
    else
    {
      int v4 = sub_110DBE0(v9, (unint64_t)(v4 + 2), a3);
      if ((v6 & 2) != 0) {
        goto LABEL_12;
      }
    }
LABEL_3:
    if ((v6 & 4) == 0) {
      goto LABEL_4;
    }
LABEL_18:
    if (*a3 <= (unint64_t)v4) {
      int v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v15 = *(void *)(a1 + 40);
    *int v4 = 26;
    unsigned int v16 = *(_DWORD *)(v15 + 20);
    v4[1] = v16;
    if (v16 > 0x7F) {
      unsigned int v17 = sub_188A9CC(v16, v4 + 1);
    }
    else {
      unsigned int v17 = v4 + 2;
    }
    int v4 = sub_110DBE0(v15, (unint64_t)v17, a3);
    uint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & 1) == 0) {
      return v4;
    }
    goto LABEL_24;
  }
  if ((v6 & 2) == 0) {
    goto LABEL_3;
  }
LABEL_12:
  if (*a3 <= (unint64_t)v4) {
    int v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v12 = *(void *)(a1 + 32);
  *int v4 = 18;
  unsigned int v13 = *(_DWORD *)(v12 + 20);
  v4[1] = v13;
  if (v13 > 0x7F)
  {
    char v14 = sub_188A9CC(v13, v4 + 1);
    int v4 = sub_110DBE0(v12, (unint64_t)v14, a3);
    if ((v6 & 4) != 0) {
      goto LABEL_18;
    }
  }
  else
  {
    int v4 = sub_110DBE0(v12, (unint64_t)(v4 + 2), a3);
    if ((v6 & 4) != 0) {
      goto LABEL_18;
    }
  }
LABEL_4:
  uint64_t v7 = *(void *)(a1 + 8);
  if ((v7 & 1) == 0) {
    return v4;
  }
LABEL_24:
  unint64_t v18 = v7 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v18 + 31) < 0)
  {
    unsigned int v19 = *(char **)(v18 + 8);
    uint64_t v20 = *(void *)(v18 + 16);
  }
  else
  {
    unsigned int v19 = (char *)(v18 + 8);
    LODWORD(v20) = *(unsigned __int8 *)(v18 + 31);
  }
  uint64_t v21 = (int)v20;
  if ((uint64_t)(*a3 - (void)v4) < (int)v20)
  {
    return (char *)sub_188A528(a3, v19, v20, v4);
  }
  else
  {
    memcpy(v4, v19, (int)v20);
    return &v4[v21];
  }
}

uint64_t sub_110EB4C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 7) != 0)
  {
    if (v2)
    {
      uint64_t v5 = sub_110DF58(*(void *)(a1 + 24));
      uint64_t v3 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v2 & 2) == 0) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v3 = 0;
      if ((v2 & 2) == 0)
      {
LABEL_9:
        if ((v2 & 4) != 0)
        {
          uint64_t v8 = sub_110DF58(*(void *)(a1 + 40));
          v3 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
          uint64_t v4 = *(void *)(a1 + 8);
          if ((v4 & 1) == 0) {
            goto LABEL_11;
          }
        }
        else
        {
          uint64_t v4 = *(void *)(a1 + 8);
          if ((v4 & 1) == 0) {
            goto LABEL_11;
          }
        }
        goto LABEL_13;
      }
    }
    uint64_t v6 = sub_110DF58(*(void *)(a1 + 32));
    v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    goto LABEL_9;
  }
  uint64_t v3 = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  if ((v4 & 1) == 0)
  {
LABEL_11:
    *(_DWORD *)(a1 + 20) = v3;
    return v3;
  }
LABEL_13:
  unint64_t v9 = v4 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v9 + 31) < 0) {
    uint64_t v10 = *(void *)(v9 + 16);
  }
  else {
    uint64_t v10 = *(unsigned __int8 *)(v9 + 31);
  }
  uint64_t v11 = v10 + v3;
  *(_DWORD *)(a1 + 20) = v11;
  return v11;
}

std::string *sub_110EC78(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 7) == 0) {
    goto LABEL_5;
  }
  if ((v4 & 1) == 0)
  {
    if ((v4 & 2) == 0) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  LODWORD(result->__r_.__value_.__r.__words[2]) |= 1u;
  std::string::pointer data = (std::string *)result[1].__r_.__value_.__l.__data_;
  if (!data)
  {
    std::string::size_type size = v3->__r_.__value_.__l.__size_;
    uint64_t v8 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
    if (size) {
      uint64_t v8 = (void *)*v8;
    }
    std::string::pointer data = (std::string *)sub_11128D8((uint64_t)v8);
    v3[1].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
  }
  if (*(void *)(a2 + 24)) {
    unint64_t v9 = *(uint64_t (****)())(a2 + 24);
  }
  else {
    unint64_t v9 = &off_24F7F08;
  }
  uint64_t result = sub_110E0F8(data, (uint64_t)v9);
  if ((v4 & 2) != 0)
  {
LABEL_15:
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 2u;
    uint64_t v10 = (std::string *)v3[1].__r_.__value_.__l.__size_;
    if (!v10)
    {
      std::string::size_type v11 = v3->__r_.__value_.__l.__size_;
      uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      if (v11) {
        uint64_t v12 = (void *)*v12;
      }
      uint64_t v10 = (std::string *)sub_11128D8((uint64_t)v12);
      v3[1].__r_.__value_.__l.__size_ = (std::string::size_type)v10;
    }
    if (*(void *)(a2 + 32)) {
      unsigned int v13 = *(uint64_t (****)())(a2 + 32);
    }
    else {
      unsigned int v13 = &off_24F7F08;
    }
    uint64_t result = sub_110E0F8(v10, (uint64_t)v13);
    if ((v4 & 4) != 0) {
      goto LABEL_23;
    }
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 8);
    if ((v5 & 1) == 0) {
      return result;
    }
    goto LABEL_31;
  }
LABEL_4:
  if ((v4 & 4) == 0) {
    goto LABEL_5;
  }
LABEL_23:
  LODWORD(v3->__r_.__value_.__r.__words[2]) |= 4u;
  char v14 = (std::string *)v3[1].__r_.__value_.__r.__words[2];
  if (!v14)
  {
    std::string::size_type v15 = v3->__r_.__value_.__l.__size_;
    unsigned int v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
    if (v15) {
      unsigned int v16 = (void *)*v16;
    }
    char v14 = (std::string *)sub_11128D8((uint64_t)v16);
    v3[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v14;
  }
  if (*(void *)(a2 + 40)) {
    unsigned int v17 = *(uint64_t (****)())(a2 + 40);
  }
  else {
    unsigned int v17 = &off_24F7F08;
  }
  uint64_t result = sub_110E0F8(v14, (uint64_t)v17);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
LABEL_31:
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_110EDC8()
{
  return 1;
}

char *sub_110EDD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_20B8FD0;
  strcpy(result, "maps.path_codec.geo3.CommonPointData");
  return result;
}

void *sub_110EE28(void *a1)
{
  uint64_t v4 = a1[1];
  int v2 = a1 + 1;
  uint64_t v3 = v4;
  if ((v4 & 1) != 0 && !*(void *)(v3 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(v2);
  }
  sub_1889DA8((uint64_t)(a1 + 32));
  sub_1889DA8((uint64_t)(a1 + 29));
  sub_1889DA8((uint64_t)(a1 + 26));
  sub_1889DE8(a1 + 23);
  sub_1889DA8((uint64_t)(a1 + 20));
  sub_1889DA8((uint64_t)(a1 + 17));
  sub_1889DA8((uint64_t)(a1 + 14));
  sub_1889DA8((uint64_t)(a1 + 11));
  sub_1889DA8((uint64_t)(a1 + 8));
  sub_1889DA8((uint64_t)(a1 + 5));
  sub_1889DA8((uint64_t)(a1 + 2));
  *a1 = off_24E6998;
  uint64_t v5 = a1[1];
  if ((v5 & 2) != 0)
  {
    uint64_t v6 = (void *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
    if (v5)
    {
      if (*v6)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v6)
    {
      goto LABEL_5;
    }
  }
  return a1;
}

void sub_110EF1C(void *a1)
{
  sub_110EE28(a1);

  operator delete();
}

uint64_t sub_110EF54(uint64_t a1)
{
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  uint64_t v1 = *(unsigned int *)(a1 + 192);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = *(void *)(a1 + 200) + 8;
    do
    {
      while (1)
      {
        uint64_t v3 = *(void *)v2;
        if (*(char *)(*(void *)v2 + 23) < 0) {
          break;
        }
        *(unsigned char *)uint64_t v3 = 0;
        *(unsigned char *)(v3 + 23) = 0;
        v2 += 8;
        if (!--v1) {
          goto LABEL_6;
        }
      }
      **(unsigned char **)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      v2 += 8;
      --v1;
    }
    while (v1);
LABEL_6:
    *(_DWORD *)(a1 + 192) = 0;
  }
  char v5 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 200) = 0;
  *(_DWORD *)(result + 224) = 0;
  *(_DWORD *)(result + 248) = 0;
  if (v5) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_110EFE0(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = (uint64_t *)(a1 + 8);
  uint64_t v46 = a1 + 256;
  *(void *)uint64_t v47 = a2;
  uint64_t v44 = (unsigned int *)(a1 + 208);
  uint64_t v45 = (unsigned int *)(a1 + 232);
  uint64_t v7 = (uint64_t **)(a1 + 184);
  int v42 = (unsigned int *)(a1 + 136);
  unint64_t v43 = (unsigned int *)(a1 + 160);
  long long v41 = (unsigned int *)(a1 + 112);
  uint64_t v8 = (unsigned int *)(a1 + 88);
  unint64_t v9 = (unsigned int *)(a1 + 64);
  uint64_t v10 = (unsigned int *)(a1 + 40);
  std::string::size_type v11 = (unsigned int *)(a1 + 16);
  if ((unint64_t)a2 < *(void *)a3)
  {
    do
    {
LABEL_8:
      while (2)
      {
        std::string::size_type v15 = v4 + 1;
        unsigned int v16 = *v4;
        if (*v4 < 0)
        {
          int v18 = *v15;
          unsigned int v19 = v16 + (v18 << 7);
          unsigned int v16 = v19 - 128;
          if (v18 < 0)
          {
            std::string::size_type v15 = (char *)sub_188C180((uint64_t)v4, v19 - 128);
            unsigned int v16 = v20;
            *(void *)uint64_t v47 = v15;
            unsigned int v17 = (v20 >> 3) - 1;
            if (v17 > 0xA)
            {
LABEL_18:
              if (v16) {
                BOOL v21 = (v16 & 7) == 4;
              }
              else {
                BOOL v21 = 1;
              }
              if (v21)
              {
                if (v15)
                {
                  a3[10].i32[0] = v16 - 1;
                  return v15;
                }
                return 0;
              }
              if (*v6)
              {
                *(void *)uint64_t v47 = sub_1885AC0(v16, (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8), v15, a3);
                if (!*(void *)v47) {
                  return 0;
                }
              }
              else
              {
                int v38 = (std::string *)sub_188DBD8(v6);
                *(void *)uint64_t v47 = sub_1885AC0(v16, v38, *(char **)v47, a3);
                if (!*(void *)v47) {
                  return 0;
                }
              }
              break;
            }
          }
          else
          {
            std::string::size_type v15 = v4 + 2;
            *(void *)uint64_t v47 = v4 + 2;
            unsigned int v17 = (v16 >> 3) - 1;
            if (v17 > 0xA) {
              goto LABEL_18;
            }
          }
        }
        else
        {
          *(void *)uint64_t v47 = v4 + 1;
          unsigned int v17 = (v16 >> 3) - 1;
        }
        switch(v17)
        {
          case 0u:
            if (v16 == 10)
            {
              *(void *)uint64_t v47 = sub_188C2CC(v11, (unsigned __int8 *)v15, (uint64_t)a3);
              if (!*(void *)v47) {
                return 0;
              }
              break;
            }
            if (v16 != 8) {
              goto LABEL_18;
            }
            int v28 = sub_110DAD8((uint64_t *)v47);
            sub_110F6A0(a1, v28);
            if (!*(void *)v47) {
              return 0;
            }
            break;
          case 1u:
            if (v16 == 18)
            {
              *(void *)uint64_t v47 = sub_188C30C(v10, (unsigned __int8 *)v15, (uint64_t)a3);
              if (!*(void *)v47) {
                return 0;
              }
              break;
            }
            if (v16 != 16) {
              goto LABEL_18;
            }
            unint64_t v32 = sub_110F7A8((uint64_t *)v47);
            sub_110F724(a1, v32);
            if (!*(void *)v47) {
              return 0;
            }
            break;
          case 2u:
            if (v16 == 26)
            {
              *(void *)uint64_t v47 = sub_188C2CC(v9, (unsigned __int8 *)v15, (uint64_t)a3);
              if (!*(void *)v47) {
                return 0;
              }
              break;
            }
            if (v16 != 24) {
              goto LABEL_18;
            }
            int v30 = sub_110DAD8((uint64_t *)v47);
            sub_110F810(a1, v30);
            if (!*(void *)v47) {
              return 0;
            }
            break;
          case 3u:
            if (v16 == 34)
            {
              *(void *)uint64_t v47 = sub_188C2CC(v8, (unsigned __int8 *)v15, (uint64_t)a3);
              if (!*(void *)v47) {
                return 0;
              }
              break;
            }
            if (v16 != 32) {
              goto LABEL_18;
            }
            int v31 = sub_110DAD8((uint64_t *)v47);
            sub_110F894(a1, v31);
            if (!*(void *)v47) {
              return 0;
            }
            break;
          case 4u:
            if (v16 == 42)
            {
              *(void *)uint64_t v47 = sub_188C2CC(v41, (unsigned __int8 *)v15, (uint64_t)a3);
              if (!*(void *)v47) {
                return 0;
              }
              break;
            }
            if (v16 != 40) {
              goto LABEL_18;
            }
            int v29 = sub_110DAD8((uint64_t *)v47);
            sub_110F918(a1, v29);
            if (!*(void *)v47) {
              return 0;
            }
            break;
          case 5u:
            if (v16 == 50)
            {
              *(void *)uint64_t v47 = sub_188C2CC(v42, (unsigned __int8 *)v15, (uint64_t)a3);
              if (!*(void *)v47) {
                return 0;
              }
              break;
            }
            if (v16 != 48) {
              goto LABEL_18;
            }
            int v33 = sub_110DAD8((uint64_t *)v47);
            sub_110F99C(a1, v33);
            if (!*(void *)v47) {
              return 0;
            }
            break;
          case 6u:
            if (v16 == 58)
            {
              *(void *)uint64_t v47 = sub_188C2CC(v43, (unsigned __int8 *)v15, (uint64_t)a3);
              if (!*(void *)v47) {
                return 0;
              }
              break;
            }
            if (v16 != 56) {
              goto LABEL_18;
            }
            int v34 = sub_110DAD8((uint64_t *)v47);
            sub_110FA20(a1, v34);
            if (!*(void *)v47) {
              return 0;
            }
            break;
          case 7u:
            if (v16 != 66) {
              goto LABEL_18;
            }
            unsigned int v22 = v15 - 1;
LABEL_39:
            *(void *)uint64_t v47 = v22 + 1;
            unint64_t v23 = *(_DWORD **)(a1 + 200);
            if (v23 && (uint64_t v24 = *(int *)(a1 + 192), (int)v24 < *v23))
            {
              *(_DWORD *)(a1 + 192) = v24 + 1;
              unsigned int v22 = sub_188C244(*(std::string **)&v23[2 * v24 + 2], (char *)v22 + 1, (uint64_t)a3);
              *(void *)uint64_t v47 = v22;
              if (!v22) {
                return 0;
              }
            }
            else
            {
              if (!*v7) {
                operator new();
              }
              *unint64_t v26 = v25;
              v26[1] = sub_3A6EDC;
              *char v25 = 0;
              v25[1] = 0;
              v25[2] = 0;
              uint64_t v27 = (std::string *)sub_188CDC8((uint64_t)v7, (uint64_t)v25);
              unsigned int v22 = sub_188C244(v27, *(char **)v47, (uint64_t)a3);
              *(void *)uint64_t v47 = v22;
              if (!v22) {
                return 0;
              }
            }
            if (*(void *)a3 <= (unint64_t)v22 || *v22 != 66) {
              break;
            }
            goto LABEL_39;
          case 8u:
            if (v16 == 74)
            {
              *(void *)uint64_t v47 = sub_188C2FC(v44, (unsigned __int8 *)v15, (uint64_t)a3);
              if (!*(void *)v47) {
                return 0;
              }
              break;
            }
            if (v16 != 72) {
              goto LABEL_18;
            }
            int v37 = sub_110D9EC((uint64_t *)v47);
            sub_110FAA4(a1, v37);
            if (!*(void *)v47) {
              return 0;
            }
            break;
          case 9u:
            if (v16 == 82)
            {
              *(void *)uint64_t v47 = sub_188C2CC(v45, (unsigned __int8 *)v15, (uint64_t)a3);
              if (!*(void *)v47) {
                return 0;
              }
              break;
            }
            if (v16 == 80)
            {
              int v14 = sub_110DAD8((uint64_t *)v47);
              sub_110FB28(a1, v14);
              if (!*(void *)v47) {
                return 0;
              }
              break;
            }
            goto LABEL_18;
          case 0xAu:
            if (v16 == 90)
            {
              *(void *)&long long v48 = v46;
              *((void *)&v48 + 1) = sub_1113208;
              uint64_t v49 = v6;
              int v50 = 11;
              *(void *)uint64_t v47 = sub_1112E88((uint64_t)a3, v15, &v48);
              if (!*(void *)v47) {
                return 0;
              }
              break;
            }
            if (v16 != 88) {
              goto LABEL_18;
            }
            uint64_t v35 = sub_110DB5C((uint64_t *)v47);
            if (!*(void *)v47) {
              return 0;
            }
            unint64_t v36 = v35;
            if (sub_1113208(v35))
            {
              sub_110FBAC(a1, v36);
              uint64_t v4 = *(char **)v47;
              if (*(void *)v47 >= *(void *)a3) {
                goto LABEL_2;
              }
            }
            else
            {
              if (*v6) {
                uint64_t v39 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
              }
              else {
                uint64_t v39 = (std::string *)sub_188DBD8(v6);
              }
              sub_188C020(11, v36, v39);
              uint64_t v4 = *(char **)v47;
              if (*(void *)v47 >= *(void *)a3) {
                goto LABEL_2;
              }
            }
            continue;
          default:
            goto LABEL_18;
        }
        break;
      }
      uint64_t v4 = *(char **)v47;
    }
    while (*(void *)v47 < *(void *)a3);
  }
LABEL_2:
  int v12 = v4 - a3[1].i32[0];
  if (a3[3].i32[1] == v12)
  {
    if (v12 >= 1 && !*(void *)&a3[2]) {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = sub_188BB90((uint64_t)a3, v12, a3[11].i32[1]);
    *(void *)uint64_t v47 = v4;
    if ((v13 & 1) == 0) {
      goto LABEL_8;
    }
  }
  return v4;
}

void sub_110F6A0(uint64_t a1, int a2)
{
  uint64_t v5 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = (_DWORD *)(a1 + 16);
  if (v5 == *(_DWORD *)(a1 + 20))
  {
    sub_188C80C((unsigned int *)(a1 + 16), v5 + 1);
    *(_DWORD *)(*(void *)(a1 + 24) + 4 * v5) = a2;
  }
  else
  {
    *(_DWORD *)(*(void *)(a1 + 24) + 4 * v5) = a2;
  }
  *uint64_t v4 = v5 + 1;
}

void sub_110F724(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(unsigned int *)(a1 + 40);
  uint64_t v4 = (_DWORD *)(a1 + 40);
  if (v5 == *(_DWORD *)(a1 + 44))
  {
    sub_188CA54((unsigned int *)(a1 + 40), v5 + 1);
    *(void *)(*(void *)(a1 + 48) + 8 * v5) = a2;
  }
  else
  {
    *(void *)(*(void *)(a1 + 48) + 8 * v5) = a2;
  }
  *uint64_t v4 = v5 + 1;
}

unint64_t sub_110F7A8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (char *)*a1;
  int v5 = *v3;
  uint64_t v4 = v3 + 1;
  unint64_t v6 = v5;
  if (v5 < 0)
  {
    unint64_t v6 = v6 + (*v4 << 7) - 128;
    if (*v4 < 0) {
      uint64_t v4 = (char *)sub_188C138(v2, v6);
    }
    else {
      uint64_t v4 = (char *)(v2 + 2);
    }
  }
  *a1 = (uint64_t)v4;
  return -(uint64_t)(v6 & 1) ^ (v6 >> 1);
}

void sub_110F810(uint64_t a1, int a2)
{
  uint64_t v5 = *(unsigned int *)(a1 + 64);
  uint64_t v4 = (_DWORD *)(a1 + 64);
  if (v5 == *(_DWORD *)(a1 + 68))
  {
    sub_188C80C((unsigned int *)(a1 + 64), v5 + 1);
    *(_DWORD *)(*(void *)(a1 + 72) + 4 * v5) = a2;
  }
  else
  {
    *(_DWORD *)(*(void *)(a1 + 72) + 4 * v5) = a2;
  }
  *uint64_t v4 = v5 + 1;
}

void sub_110F894(uint64_t a1, int a2)
{
  uint64_t v5 = *(unsigned int *)(a1 + 88);
  uint64_t v4 = (_DWORD *)(a1 + 88);
  if (v5 == *(_DWORD *)(a1 + 92))
  {
    sub_188C80C((unsigned int *)(a1 + 88), v5 + 1);
    *(_DWORD *)(*(void *)(a1 + 96) + 4 * v5) = a2;
  }
  else
  {
    *(_DWORD *)(*(void *)(a1 + 96) + 4 * v5) = a2;
  }
  *uint64_t v4 = v5 + 1;
}

void sub_110F918(uint64_t a1, int a2)
{
  uint64_t v5 = *(unsigned int *)(a1 + 112);
  uint64_t v4 = (_DWORD *)(a1 + 112);
  if (v5 == *(_DWORD *)(a1 + 116))
  {
    sub_188C80C((unsigned int *)(a1 + 112), v5 + 1);
    *(_DWORD *)(*(void *)(a1 + 120) + 4 * v5) = a2;
  }
  else
  {
    *(_DWORD *)(*(void *)(a1 + 120) + 4 * v5) = a2;
  }
  *uint64_t v4 = v5 + 1;
}

void sub_110F99C(uint64_t a1, int a2)
{
  uint64_t v5 = *(unsigned int *)(a1 + 136);
  uint64_t v4 = (_DWORD *)(a1 + 136);
  if (v5 == *(_DWORD *)(a1 + 140))
  {
    sub_188C80C((unsigned int *)(a1 + 136), v5 + 1);
    *(_DWORD *)(*(void *)(a1 + 144) + 4 * v5) = a2;
  }
  else
  {
    *(_DWORD *)(*(void *)(a1 + 144) + 4 * v5) = a2;
  }
  *uint64_t v4 = v5 + 1;
}

void sub_110FA20(uint64_t a1, int a2)
{
  uint64_t v5 = *(unsigned int *)(a1 + 160);
  uint64_t v4 = (_DWORD *)(a1 + 160);
  if (v5 == *(_DWORD *)(a1 + 164))
  {
    sub_188C80C((unsigned int *)(a1 + 160), v5 + 1);
    *(_DWORD *)(*(void *)(a1 + 168) + 4 * v5) = a2;
  }
  else
  {
    *(_DWORD *)(*(void *)(a1 + 168) + 4 * v5) = a2;
  }
  *uint64_t v4 = v5 + 1;
}

void sub_110FAA4(uint64_t a1, int a2)
{
  uint64_t v5 = *(unsigned int *)(a1 + 208);
  uint64_t v4 = (_DWORD *)(a1 + 208);
  if (v5 == *(_DWORD *)(a1 + 212))
  {
    sub_188C80C((unsigned int *)(a1 + 208), v5 + 1);
    *(_DWORD *)(*(void *)(a1 + 216) + 4 * v5) = a2;
  }
  else
  {
    *(_DWORD *)(*(void *)(a1 + 216) + 4 * v5) = a2;
  }
  *uint64_t v4 = v5 + 1;
}

void sub_110FB28(uint64_t a1, int a2)
{
  uint64_t v5 = *(unsigned int *)(a1 + 232);
  uint64_t v4 = (_DWORD *)(a1 + 232);
  if (v5 == *(_DWORD *)(a1 + 236))
  {
    sub_188C80C((unsigned int *)(a1 + 232), v5 + 1);
    *(_DWORD *)(*(void *)(a1 + 240) + 4 * v5) = a2;
  }
  else
  {
    *(_DWORD *)(*(void *)(a1 + 240) + 4 * v5) = a2;
  }
  *uint64_t v4 = v5 + 1;
}

void sub_110FBAC(uint64_t a1, int a2)
{
  uint64_t v4 = (_DWORD *)(a1 + 256);
  uint64_t v5 = *(unsigned int *)(a1 + 256);
  if (v5 == *(_DWORD *)(a1 + 260))
  {
    sub_188C80C((unsigned int *)(a1 + 256), v5 + 1);
    *(_DWORD *)(*(void *)(a1 + 264) + 4 * v5) = a2;
  }
  else
  {
    *(_DWORD *)(*(void *)(a1 + 264) + 4 * v5) = a2;
  }
  *uint64_t v4 = v5 + 1;
}

char *sub_110FC34(uint64_t a1, char *__dst, _DWORD *a3)
{
  uint64_t v4 = __dst;
  unsigned int v6 = *(_DWORD *)(a1 + 32);
  if ((int)v6 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)__dst)
    {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      *uint64_t v4 = 10;
      uint64_t v7 = v4 + 1;
      if (v6 < 0x80) {
        goto LABEL_4;
      }
    }
    else
    {
      *long long __dst = 10;
      uint64_t v7 = __dst + 1;
      if (v6 < 0x80)
      {
LABEL_4:
        v4 += 2;
        *uint64_t v7 = v6;
        uint64_t v8 = *(unsigned int **)(a1 + 24);
        unint64_t v9 = &v8[*(int *)(a1 + 16)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)v4)
          {
            uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
            unsigned int v14 = *v8++;
            unsigned int v10 = v14;
            *uint64_t v4 = v14;
            if (v14 > 0x7F)
            {
LABEL_9:
              *uint64_t v4 = v10 | 0x80;
              unsigned int v12 = v10 >> 7;
              v4[1] = v10 >> 7;
              v4 += 2;
              if (v10 >= 0x4000)
              {
                do
                {
                  *(v4 - 1) |= 0x80u;
                  unsigned int v13 = v12 >> 14;
                  v12 >>= 7;
                  *v4++ = v12;
                }
                while (v13);
              }
              goto LABEL_6;
            }
          }
          else
          {
            unsigned int v11 = *v8++;
            unsigned int v10 = v11;
            *uint64_t v4 = v11;
            if (v11 > 0x7F) {
              goto LABEL_9;
            }
          }
          ++v4;
LABEL_6:
          if (v8 >= v9) {
            goto LABEL_14;
          }
        }
      }
    }
    do
    {
      *v7++ = v6 | 0x80;
      unsigned int v107 = v6 >> 14;
      v6 >>= 7;
    }
    while (v107);
    uint64_t v4 = v7 - 1;
    goto LABEL_4;
  }
LABEL_14:
  unsigned int v15 = *(_DWORD *)(a1 + 56);
  if ((int)v15 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      *uint64_t v4 = 18;
      unsigned int v16 = v4 + 1;
      if (v15 < 0x80) {
        goto LABEL_17;
      }
    }
    else
    {
      *uint64_t v4 = 18;
      unsigned int v16 = v4 + 1;
      if (v15 < 0x80)
      {
LABEL_17:
        v4 += 2;
        *unsigned int v16 = v15;
        unsigned int v17 = *(uint64_t **)(a1 + 48);
        int v18 = &v17[*(int *)(a1 + 40)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)v4)
          {
            uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
            uint64_t v23 = *v17++;
            unint64_t v20 = (2 * v23) ^ (v23 >> 63);
            *uint64_t v4 = v20;
            if (v20 > 0x7F)
            {
LABEL_22:
              *uint64_t v4 = v20 | 0x80;
              unint64_t v21 = v20 >> 7;
              v4[1] = v20 >> 7;
              v4 += 2;
              if (v20 >= 0x4000)
              {
                do
                {
                  *(v4 - 1) |= 0x80u;
                  unint64_t v22 = v21 >> 14;
                  v21 >>= 7;
                  *v4++ = v21;
                }
                while (v22);
              }
              goto LABEL_19;
            }
          }
          else
          {
            uint64_t v19 = *v17++;
            unint64_t v20 = (2 * v19) ^ (v19 >> 63);
            *uint64_t v4 = v20;
            if (v20 > 0x7F) {
              goto LABEL_22;
            }
          }
          ++v4;
LABEL_19:
          if (v17 >= v18) {
            goto LABEL_27;
          }
        }
      }
    }
    do
    {
      *v16++ = v15 | 0x80;
      unsigned int v108 = v15 >> 14;
      v15 >>= 7;
    }
    while (v108);
    uint64_t v4 = v16 - 1;
    goto LABEL_17;
  }
LABEL_27:
  unsigned int v24 = *(_DWORD *)(a1 + 80);
  if ((int)v24 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      *uint64_t v4 = 26;
      char v25 = v4 + 1;
      if (v24 < 0x80) {
        goto LABEL_30;
      }
    }
    else
    {
      *uint64_t v4 = 26;
      char v25 = v4 + 1;
      if (v24 < 0x80)
      {
LABEL_30:
        v4 += 2;
        *char v25 = v24;
        unint64_t v26 = *(unsigned int **)(a1 + 72);
        uint64_t v27 = &v26[*(int *)(a1 + 64)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)v4)
          {
            uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
            unsigned int v32 = *v26++;
            unsigned int v28 = v32;
            *uint64_t v4 = v32;
            if (v32 > 0x7F)
            {
LABEL_35:
              *uint64_t v4 = v28 | 0x80;
              unsigned int v30 = v28 >> 7;
              v4[1] = v28 >> 7;
              v4 += 2;
              if (v28 >= 0x4000)
              {
                do
                {
                  *(v4 - 1) |= 0x80u;
                  unsigned int v31 = v30 >> 14;
                  v30 >>= 7;
                  *v4++ = v30;
                }
                while (v31);
              }
              goto LABEL_32;
            }
          }
          else
          {
            unsigned int v29 = *v26++;
            unsigned int v28 = v29;
            *uint64_t v4 = v29;
            if (v29 > 0x7F) {
              goto LABEL_35;
            }
          }
          ++v4;
LABEL_32:
          if (v26 >= v27) {
            goto LABEL_40;
          }
        }
      }
    }
    do
    {
      *v25++ = v24 | 0x80;
      unsigned int v109 = v24 >> 14;
      v24 >>= 7;
    }
    while (v109);
    uint64_t v4 = v25 - 1;
    goto LABEL_30;
  }
LABEL_40:
  unsigned int v33 = *(_DWORD *)(a1 + 104);
  if ((int)v33 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      *uint64_t v4 = 34;
      int v34 = v4 + 1;
      if (v33 < 0x80) {
        goto LABEL_43;
      }
    }
    else
    {
      *uint64_t v4 = 34;
      int v34 = v4 + 1;
      if (v33 < 0x80)
      {
LABEL_43:
        v4 += 2;
        *int v34 = v33;
        uint64_t v35 = *(unsigned int **)(a1 + 96);
        unint64_t v36 = &v35[*(int *)(a1 + 88)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)v4)
          {
            uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
            unsigned int v41 = *v35++;
            unsigned int v37 = v41;
            *uint64_t v4 = v41;
            if (v41 > 0x7F)
            {
LABEL_48:
              *uint64_t v4 = v37 | 0x80;
              unsigned int v39 = v37 >> 7;
              v4[1] = v37 >> 7;
              v4 += 2;
              if (v37 >= 0x4000)
              {
                do
                {
                  *(v4 - 1) |= 0x80u;
                  unsigned int v40 = v39 >> 14;
                  v39 >>= 7;
                  *v4++ = v39;
                }
                while (v40);
              }
              goto LABEL_45;
            }
          }
          else
          {
            unsigned int v38 = *v35++;
            unsigned int v37 = v38;
            *uint64_t v4 = v38;
            if (v38 > 0x7F) {
              goto LABEL_48;
            }
          }
          ++v4;
LABEL_45:
          if (v35 >= v36) {
            goto LABEL_53;
          }
        }
      }
    }
    do
    {
      *v34++ = v33 | 0x80;
      unsigned int v110 = v33 >> 14;
      v33 >>= 7;
    }
    while (v110);
    uint64_t v4 = v34 - 1;
    goto LABEL_43;
  }
LABEL_53:
  unsigned int v42 = *(_DWORD *)(a1 + 128);
  if ((int)v42 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      *uint64_t v4 = 42;
      unint64_t v43 = v4 + 1;
      if (v42 < 0x80) {
        goto LABEL_56;
      }
    }
    else
    {
      *uint64_t v4 = 42;
      unint64_t v43 = v4 + 1;
      if (v42 < 0x80)
      {
LABEL_56:
        v4 += 2;
        *unint64_t v43 = v42;
        uint64_t v44 = *(unsigned int **)(a1 + 120);
        uint64_t v45 = &v44[*(int *)(a1 + 112)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)v4)
          {
            uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
            unsigned int v50 = *v44++;
            unsigned int v46 = v50;
            *uint64_t v4 = v50;
            if (v50 > 0x7F)
            {
LABEL_61:
              *uint64_t v4 = v46 | 0x80;
              unsigned int v48 = v46 >> 7;
              v4[1] = v46 >> 7;
              v4 += 2;
              if (v46 >= 0x4000)
              {
                do
                {
                  *(v4 - 1) |= 0x80u;
                  unsigned int v49 = v48 >> 14;
                  v48 >>= 7;
                  *v4++ = v48;
                }
                while (v49);
              }
              goto LABEL_58;
            }
          }
          else
          {
            unsigned int v47 = *v44++;
            unsigned int v46 = v47;
            *uint64_t v4 = v47;
            if (v47 > 0x7F) {
              goto LABEL_61;
            }
          }
          ++v4;
LABEL_58:
          if (v44 >= v45) {
            goto LABEL_66;
          }
        }
      }
    }
    do
    {
      *v43++ = v42 | 0x80;
      unsigned int v111 = v42 >> 14;
      v42 >>= 7;
    }
    while (v111);
    uint64_t v4 = v43 - 1;
    goto LABEL_56;
  }
LABEL_66:
  unsigned int v51 = *(_DWORD *)(a1 + 152);
  if ((int)v51 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      *uint64_t v4 = 50;
      unint64_t v52 = v4 + 1;
      if (v51 < 0x80) {
        goto LABEL_69;
      }
    }
    else
    {
      *uint64_t v4 = 50;
      unint64_t v52 = v4 + 1;
      if (v51 < 0x80)
      {
LABEL_69:
        v4 += 2;
        *unint64_t v52 = v51;
        unint64_t v53 = *(unsigned int **)(a1 + 144);
        uint64_t v54 = &v53[*(int *)(a1 + 136)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)v4)
          {
            uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
            unsigned int v59 = *v53++;
            unsigned int v55 = v59;
            *uint64_t v4 = v59;
            if (v59 > 0x7F)
            {
LABEL_74:
              *uint64_t v4 = v55 | 0x80;
              unsigned int v57 = v55 >> 7;
              v4[1] = v55 >> 7;
              v4 += 2;
              if (v55 >= 0x4000)
              {
                do
                {
                  *(v4 - 1) |= 0x80u;
                  unsigned int v58 = v57 >> 14;
                  v57 >>= 7;
                  *v4++ = v57;
                }
                while (v58);
              }
              goto LABEL_71;
            }
          }
          else
          {
            unsigned int v56 = *v53++;
            unsigned int v55 = v56;
            *uint64_t v4 = v56;
            if (v56 > 0x7F) {
              goto LABEL_74;
            }
          }
          ++v4;
LABEL_71:
          if (v53 >= v54) {
            goto LABEL_79;
          }
        }
      }
    }
    do
    {
      *v52++ = v51 | 0x80;
      unsigned int v112 = v51 >> 14;
      v51 >>= 7;
    }
    while (v112);
    uint64_t v4 = v52 - 1;
    goto LABEL_69;
  }
LABEL_79:
  unsigned int v60 = *(_DWORD *)(a1 + 176);
  if ((int)v60 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      *uint64_t v4 = 58;
      int v61 = v4 + 1;
      if (v60 < 0x80) {
        goto LABEL_82;
      }
    }
    else
    {
      *uint64_t v4 = 58;
      int v61 = v4 + 1;
      if (v60 < 0x80)
      {
LABEL_82:
        v4 += 2;
        unsigned char *v61 = v60;
        unsigned int v62 = *(unsigned int **)(a1 + 168);
        int v63 = &v62[*(int *)(a1 + 160)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)v4)
          {
            uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
            unsigned int v68 = *v62++;
            unsigned int v64 = v68;
            *uint64_t v4 = v68;
            if (v68 > 0x7F)
            {
LABEL_87:
              *uint64_t v4 = v64 | 0x80;
              unsigned int v66 = v64 >> 7;
              v4[1] = v64 >> 7;
              v4 += 2;
              if (v64 >= 0x4000)
              {
                do
                {
                  *(v4 - 1) |= 0x80u;
                  unsigned int v67 = v66 >> 14;
                  v66 >>= 7;
                  *v4++ = v66;
                }
                while (v67);
              }
              goto LABEL_84;
            }
          }
          else
          {
            unsigned int v65 = *v62++;
            unsigned int v64 = v65;
            *uint64_t v4 = v65;
            if (v65 > 0x7F) {
              goto LABEL_87;
            }
          }
          ++v4;
LABEL_84:
          if (v62 >= v63) {
            goto LABEL_92;
          }
        }
      }
    }
    do
    {
      *v61++ = v60 | 0x80;
      unsigned int v113 = v60 >> 14;
      v60 >>= 7;
    }
    while (v113);
    uint64_t v4 = v61 - 1;
    goto LABEL_82;
  }
LABEL_92:
  uint64_t v69 = *(unsigned int *)(a1 + 192);
  if ((int)v69 >= 1)
  {
    uint64_t v70 = 0;
    uint64_t v71 = 8 * v69;
    while (1)
    {
      int v72 = *(unsigned __int8 **)(*(void *)(a1 + 200) + v70 + 8);
      if (((char)v72[23] & 0x80000000) == 0) {
        break;
      }
      int64_t v73 = *((void *)v72 + 1);
      if (v73 > 127)
      {
LABEL_102:
        uint64_t v4 = (char *)sub_188A868(a3, 8, (uint64_t)v72, v4);
        v70 += 8;
        if (v71 == v70) {
          goto LABEL_103;
        }
      }
      else
      {
LABEL_97:
        if (*(void *)a3 - (void)v4 + 14 < v73) {
          goto LABEL_102;
        }
        *uint64_t v4 = 66;
        v4[1] = v73;
        if ((char)v72[23] < 0) {
          int v72 = *(unsigned __int8 **)v72;
        }
        long long v74 = v4 + 2;
        memcpy(v74, v72, v73);
        uint64_t v4 = &v74[v73];
        v70 += 8;
        if (v71 == v70) {
          goto LABEL_103;
        }
      }
    }
    int64_t v73 = v72[23];
    goto LABEL_97;
  }
LABEL_103:
  unsigned int v75 = *(_DWORD *)(a1 + 224);
  if ((int)v75 > 0)
  {
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      *uint64_t v4 = 74;
      int v76 = v4 + 1;
      if (v75 < 0x80) {
        goto LABEL_106;
      }
    }
    else
    {
      *uint64_t v4 = 74;
      int v76 = v4 + 1;
      if (v75 < 0x80)
      {
LABEL_106:
        v4 += 2;
        *int v76 = v75;
        int v77 = *(int **)(a1 + 216);
        unsigned int v78 = &v77[*(int *)(a1 + 208)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)v4)
          {
            uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
            int v83 = *v77++;
            unsigned int v80 = (2 * v83) ^ (v83 >> 31);
            *uint64_t v4 = (2 * v83) ^ (v83 >> 31);
            if (v80 > 0x7F)
            {
LABEL_111:
              *uint64_t v4 = v80 | 0x80;
              unsigned int v81 = v80 >> 7;
              v4[1] = v80 >> 7;
              v4 += 2;
              if (v80 >= 0x4000)
              {
                do
                {
                  *(v4 - 1) |= 0x80u;
                  unsigned int v82 = v81 >> 14;
                  v81 >>= 7;
                  *v4++ = v81;
                }
                while (v82);
              }
              goto LABEL_108;
            }
          }
          else
          {
            int v79 = *v77++;
            unsigned int v80 = (2 * v79) ^ (v79 >> 31);
            *uint64_t v4 = (2 * v79) ^ (v79 >> 31);
            if (v80 > 0x7F) {
              goto LABEL_111;
            }
          }
          ++v4;
LABEL_108:
          if (v77 >= v78) {
            goto LABEL_116;
          }
        }
      }
    }
    do
    {
      *v76++ = v75 | 0x80;
      unsigned int v114 = v75 >> 14;
      v75 >>= 7;
    }
    while (v114);
    uint64_t v4 = v76 - 1;
    goto LABEL_106;
  }
LABEL_116:
  unsigned int v84 = *(_DWORD *)(a1 + 248);
  if ((int)v84 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      *uint64_t v4 = 82;
      uint64_t v85 = v4 + 1;
      if (v84 < 0x80) {
        goto LABEL_119;
      }
    }
    else
    {
      *uint64_t v4 = 82;
      uint64_t v85 = v4 + 1;
      if (v84 < 0x80)
      {
LABEL_119:
        v4 += 2;
        unsigned char *v85 = v84;
        uint64_t v86 = *(unsigned int **)(a1 + 240);
        int v87 = &v86[*(int *)(a1 + 232)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)v4)
          {
            uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
            unsigned int v92 = *v86++;
            unsigned int v88 = v92;
            *uint64_t v4 = v92;
            if (v92 > 0x7F)
            {
LABEL_124:
              *uint64_t v4 = v88 | 0x80;
              unsigned int v90 = v88 >> 7;
              v4[1] = v88 >> 7;
              v4 += 2;
              if (v88 >= 0x4000)
              {
                do
                {
                  *(v4 - 1) |= 0x80u;
                  unsigned int v91 = v90 >> 14;
                  v90 >>= 7;
                  *v4++ = v90;
                }
                while (v91);
              }
              goto LABEL_121;
            }
          }
          else
          {
            unsigned int v89 = *v86++;
            unsigned int v88 = v89;
            *uint64_t v4 = v89;
            if (v89 > 0x7F) {
              goto LABEL_124;
            }
          }
          ++v4;
LABEL_121:
          if (v86 >= v87) {
            goto LABEL_129;
          }
        }
      }
    }
    do
    {
      *v85++ = v84 | 0x80;
      unsigned int v115 = v84 >> 14;
      v84 >>= 7;
    }
    while (v115);
    uint64_t v4 = v85 - 1;
    goto LABEL_119;
  }
LABEL_129:
  unsigned int v93 = *(_DWORD *)(a1 + 272);
  if ((int)v93 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      *uint64_t v4 = 90;
      int v94 = v4 + 1;
      if (v93 < 0x80) {
        goto LABEL_132;
      }
    }
    else
    {
      *uint64_t v4 = 90;
      int v94 = v4 + 1;
      if (v93 < 0x80)
      {
LABEL_132:
        v4 += 2;
        unsigned char *v94 = v93;
        unsigned int v95 = *(int **)(a1 + 264);
        int v96 = &v95[*(int *)(a1 + 256)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)v4)
          {
            uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
            unint64_t v101 = *v95++;
            unint64_t v97 = v101;
            *uint64_t v4 = v101;
            if (v101 > 0x7F)
            {
LABEL_137:
              *uint64_t v4 = v97 | 0x80;
              unint64_t v99 = v97 >> 7;
              v4[1] = v97 >> 7;
              v4 += 2;
              if (v97 >= 0x4000)
              {
                do
                {
                  *(v4 - 1) |= 0x80u;
                  unint64_t v100 = v99 >> 14;
                  v99 >>= 7;
                  *v4++ = v99;
                }
                while (v100);
              }
              goto LABEL_134;
            }
          }
          else
          {
            unint64_t v98 = *v95++;
            unint64_t v97 = v98;
            *uint64_t v4 = v98;
            if (v98 > 0x7F) {
              goto LABEL_137;
            }
          }
          ++v4;
LABEL_134:
          if (v95 >= v96) {
            goto LABEL_142;
          }
        }
      }
    }
    do
    {
      *v94++ = v93 | 0x80;
      unsigned int v116 = v93 >> 14;
      v93 >>= 7;
    }
    while (v116);
    uint64_t v4 = v94 - 1;
    goto LABEL_132;
  }
LABEL_142:
  uint64_t v102 = *(void *)(a1 + 8);
  if ((v102 & 1) == 0) {
    return v4;
  }
  unint64_t v104 = v102 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v104 + 31) < 0)
  {
    int v105 = *(void **)(v104 + 8);
    uint64_t v106 = *(void *)(v104 + 16);
  }
  else
  {
    int v105 = (void *)(v104 + 8);
    LODWORD(v106) = *(unsigned __int8 *)(v104 + 31);
  }
  uint64_t v117 = (int)v106;
  if (*(void *)a3 - (void)v4 >= (int)v106)
  {
    memcpy(v4, v105, (int)v106);
    v4 += v117;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v105, v106, v4);
}

uint64_t sub_111083C(uint64_t a1)
{
  uint64_t v2 = sub_188D4F0((unsigned int *)(a1 + 16));
  if (v2)
  {
    int v3 = v2;
    if ((v2 & 0x80000000) != 0) {
      uint64_t v4 = 10;
    }
    else {
      uint64_t v4 = (9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6;
    }
    uint64_t v5 = v4 + 1;
  }
  else
  {
    int v3 = 0;
    uint64_t v5 = 0;
  }
  *(_DWORD *)(a1 + 32) = v3;
  uint64_t v6 = v5 + v2;
  uint64_t v7 = sub_188D5F8((unsigned int *)(a1 + 40));
  uint64_t v8 = 10;
  uint64_t v9 = (9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6;
  if ((int)v7 >= 0) {
    uint64_t v8 = v9;
  }
  uint64_t v10 = v6 + v8;
  if (v7) {
    int v11 = v7;
  }
  else {
    int v11 = 0;
  }
  if (v7) {
    uint64_t v12 = v10 + 1;
  }
  else {
    uint64_t v12 = v6;
  }
  *(_DWORD *)(a1 + 56) = v11;
  uint64_t v13 = v12 + v7;
  uint64_t v14 = sub_188D4F0((unsigned int *)(a1 + 64));
  uint64_t v15 = 10;
  uint64_t v16 = (9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6;
  if ((int)v14 >= 0) {
    uint64_t v15 = v16;
  }
  uint64_t v17 = v13 + v15;
  if (v14) {
    int v18 = v14;
  }
  else {
    int v18 = 0;
  }
  if (v14) {
    uint64_t v19 = v17 + 1;
  }
  else {
    uint64_t v19 = v13;
  }
  *(_DWORD *)(a1 + 80) = v18;
  uint64_t v20 = v19 + v14;
  uint64_t v21 = sub_188D4F0((unsigned int *)(a1 + 88));
  if (v21)
  {
    int v22 = v21;
    if ((v21 & 0x80000000) != 0) {
      uint64_t v23 = 10;
    }
    else {
      uint64_t v23 = (9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6;
    }
    v20 += v23 + 1;
  }
  else
  {
    int v22 = 0;
  }
  *(_DWORD *)(a1 + 104) = v22;
  uint64_t v24 = v20 + v21;
  uint64_t v25 = sub_188D4F0((unsigned int *)(a1 + 112));
  uint64_t v26 = 10;
  uint64_t v27 = (9 * (__clz(v25 | 1) ^ 0x1F) + 73) >> 6;
  if ((int)v25 >= 0) {
    uint64_t v26 = v27;
  }
  uint64_t v28 = v24 + v26;
  if (v25) {
    int v29 = v25;
  }
  else {
    int v29 = 0;
  }
  if (v25) {
    uint64_t v30 = v28 + 1;
  }
  else {
    uint64_t v30 = v24;
  }
  *(_DWORD *)(a1 + 128) = v29;
  uint64_t v31 = v30 + v25;
  uint64_t v32 = sub_188D4F0((unsigned int *)(a1 + 136));
  uint64_t v33 = 11;
  uint64_t v34 = ((9 * (__clz(v32 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((int)v32 >= 0) {
    uint64_t v33 = v34;
  }
  uint64_t v35 = v33 + v31;
  if (v32) {
    int v36 = v32;
  }
  else {
    int v36 = 0;
  }
  if (!v32) {
    uint64_t v35 = v31;
  }
  *(_DWORD *)(a1 + 152) = v36;
  uint64_t v37 = v35 + v32;
  uint64_t v38 = sub_188D4F0((unsigned int *)(a1 + 160));
  uint64_t v39 = 11;
  uint64_t v40 = ((9 * (__clz(v38 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((int)v38 >= 0) {
    uint64_t v39 = v40;
  }
  uint64_t v41 = v39 + v37;
  if (v38) {
    int v42 = v38;
  }
  else {
    int v42 = 0;
  }
  if (v38) {
    uint64_t v43 = v41;
  }
  else {
    uint64_t v43 = v37;
  }
  *(_DWORD *)(a1 + 176) = v42;
  uint64_t v44 = *(unsigned int *)(a1 + 192);
  uint64_t v45 = v43 + v38 + v44;
  if ((int)v44 >= 1)
  {
    uint64_t v46 = *(void *)(a1 + 200);
    if (v44 == 1)
    {
      uint64_t v47 = 0;
LABEL_62:
      unsigned int v55 = (uint64_t *)(v46 + 8 * v47 + 8);
      uint64_t v56 = v44 - v47;
      do
      {
        uint64_t v57 = *v55++;
        uint64_t v58 = *(unsigned __int8 *)(v57 + 23);
        uint64_t v59 = *(void *)(v57 + 8);
        if ((v58 & 0x80u) == 0) {
          uint64_t v59 = v58;
        }
        v45 += v59 + ((9 * (__clz(v59 | 1) ^ 0x1F) + 73) >> 6);
        --v56;
      }
      while (v56);
      goto LABEL_66;
    }
    uint64_t v48 = 0;
    uint64_t v47 = v44 & 0xFFFFFFFE;
    uint64_t v49 = v46 + 16;
    uint64_t v50 = v47;
    do
    {
      uint64_t v51 = *(void *)(v49 - 8);
      uint64_t v52 = *(unsigned __int8 *)(v51 + 23);
      uint64_t v53 = *(void *)(v51 + 8);
      uint64_t v54 = *(void *)(*(void *)v49 + 8);
      if ((v52 & 0x80u) == 0) {
        uint64_t v53 = v52;
      }
      if (*(char *)(*(void *)v49 + 23) >= 0) {
        uint64_t v54 = *(unsigned __int8 *)(*(void *)v49 + 23);
      }
      v45 += v53 + ((9 * (__clz(v53 | 1) ^ 0x1F) + 73) >> 6);
      v48 += v54 + ((9 * (__clz(v54 | 1) ^ 0x1F) + 73) >> 6);
      v49 += 16;
      v50 -= 2;
    }
    while (v50);
    v45 += v48;
    if (v47 != v44) {
      goto LABEL_62;
    }
  }
LABEL_66:
  uint64_t v60 = sub_188D53C((unsigned int *)(a1 + 208));
  uint64_t v61 = 11;
  uint64_t v62 = ((9 * (__clz(v60 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((int)v60 >= 0) {
    uint64_t v61 = v62;
  }
  uint64_t v63 = v61 + v45;
  if (v60) {
    int v64 = v60;
  }
  else {
    int v64 = 0;
  }
  if (!v60) {
    uint64_t v63 = v45;
  }
  *(_DWORD *)(a1 + 224) = v64;
  uint64_t v65 = v63 + v60;
  uint64_t v66 = sub_188D4F0((unsigned int *)(a1 + 232));
  uint64_t v67 = 11;
  uint64_t v68 = ((9 * (__clz(v66 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((int)v66 >= 0) {
    uint64_t v67 = v68;
  }
  uint64_t v69 = v67 + v65;
  if (v66) {
    int v70 = v66;
  }
  else {
    int v70 = 0;
  }
  if (!v66) {
    uint64_t v69 = v65;
  }
  *(_DWORD *)(a1 + 248) = v70;
  uint64_t v71 = v69 + v66;
  int v72 = *(_DWORD *)(a1 + 256);
  if (v72)
  {
    int64_t v73 = *(int32x2_t **)(a1 + 264);
    if ((v72 + 0x7FFFFFFF) >= 0x80000003)
    {
      signed int v74 = v72 & 0xFFFFFFFC;
      int v76 = v73 + 1;
      int64x2_t v77 = 0uLL;
      unsigned int v78 = v72 & 0xFFFFFFFC;
      int64x2_t v79 = 0uLL;
      do
      {
        int64x2_t v77 = (int64x2_t)vaddw_u32((uint64x2_t)v77, (uint32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v76[-1]), (int8x8_t)0xA0000000ALL, (int8x8_t)vshr_n_u32((uint32x2_t)vmla_s32((int32x2_t)0x4900000049, (int32x2_t)veor_s8((int8x8_t)vclz_s32((int32x2_t)(*(void *)&v76[-1] | 0x100000001)), (int8x8_t)0x1F0000001FLL), (int32x2_t)0x900000009), 6uLL)));
        int64x2_t v79 = (int64x2_t)vaddw_u32((uint64x2_t)v79, (uint32x2_t)vbsl_s8((int8x8_t)vcltz_s32(*v76), (int8x8_t)0xA0000000ALL, (int8x8_t)vshr_n_u32((uint32x2_t)vmla_s32((int32x2_t)0x4900000049, (int32x2_t)veor_s8((int8x8_t)vclz_s32((int32x2_t)(*(void *)v76 | 0x100000001)), (int8x8_t)0x1F0000001FLL), (int32x2_t)0x900000009), 6uLL)));
        v76 += 2;
        v78 -= 4;
      }
      while (v78);
      uint64_t v75 = vaddvq_s64(vaddq_s64(v79, v77));
      goto LABEL_91;
    }
    signed int v74 = 0;
    uint64_t v75 = 0;
    do
    {
      __int32 v80 = v73->i32[v74];
      if (v80 < 0) {
        uint64_t v81 = 10;
      }
      else {
        uint64_t v81 = (9 * (__clz(v80 | 1) ^ 0x1F) + 73) >> 6;
      }
      v75 += v81;
      ++v74;
LABEL_91:
      ;
    }
    while (v72 != v74);
    if (v75)
    {
      if ((v75 & 0x80000000) != 0) {
        uint64_t v82 = 11;
      }
      else {
        uint64_t v82 = ((9 * (__clz(v75 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      v71 += v82;
      int v72 = v75;
    }
    else
    {
      int v72 = 0;
    }
  }
  else
  {
    uint64_t v75 = 0;
  }
  *(_DWORD *)(a1 + 272) = v72;
  uint64_t result = v71 + v75;
  uint64_t v84 = *(void *)(a1 + 8);
  if (v84)
  {
    unint64_t v85 = v84 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v85 + 31) < 0) {
      result += *(void *)(v85 + 16);
    }
    else {
      result += *(unsigned __int8 *)(v85 + 31);
    }
    *(_DWORD *)(a1 + 276) = result;
  }
  else
  {
    *(_DWORD *)(a1 + 276) = result;
  }
  return result;
}

std::string *sub_1110D68(std::string *result, uint64_t a2)
{
  int v3 = result;
  int v4 = *(_DWORD *)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = &result->__r_.__value_.__r.__words[2];
    uint64_t v6 = SLODWORD(result->__r_.__value_.__r.__words[2]);
    sub_188C80C((unsigned int *)&result->__r_.__value_.__r.__words[2], v6 + v4);
    std::string::pointer data = v3[1].__r_.__value_.__l.__data_;
    *(_DWORD *)v5 += *(_DWORD *)(a2 + 16);
    uint64_t result = (std::string *)memcpy(&data[4 * v6], *(const void **)(a2 + 24), 4 * *(int *)(a2 + 16));
  }
  int v8 = *(_DWORD *)(a2 + 40);
  if (v8)
  {
    uint64_t v9 = SLODWORD(v3[1].__r_.__value_.__r.__words[2]);
    sub_188CA54((unsigned int *)&v3[1].__r_.__value_.__r.__words[2], v9 + v8);
    std::string::pointer v10 = v3[2].__r_.__value_.__l.__data_;
    LODWORD(v3[1].__r_.__value_.__r.__words[2]) += *(_DWORD *)(a2 + 40);
    uint64_t result = (std::string *)memcpy(&v10[8 * v9], *(const void **)(a2 + 48), 8 * *(int *)(a2 + 40));
  }
  int v11 = *(_DWORD *)(a2 + 64);
  if (v11)
  {
    uint64_t v12 = SLODWORD(v3[2].__r_.__value_.__r.__words[2]);
    sub_188C80C((unsigned int *)&v3[2].__r_.__value_.__r.__words[2], v12 + v11);
    std::string::pointer v13 = v3[3].__r_.__value_.__l.__data_;
    LODWORD(v3[2].__r_.__value_.__r.__words[2]) += *(_DWORD *)(a2 + 64);
    uint64_t result = (std::string *)memcpy(&v13[4 * v12], *(const void **)(a2 + 72), 4 * *(int *)(a2 + 64));
  }
  int v14 = *(_DWORD *)(a2 + 88);
  if (v14)
  {
    uint64_t v15 = SLODWORD(v3[3].__r_.__value_.__r.__words[2]);
    sub_188C80C((unsigned int *)&v3[3].__r_.__value_.__r.__words[2], v15 + v14);
    std::string::pointer v16 = v3[4].__r_.__value_.__l.__data_;
    LODWORD(v3[3].__r_.__value_.__r.__words[2]) += *(_DWORD *)(a2 + 88);
    uint64_t result = (std::string *)memcpy(&v16[4 * v15], *(const void **)(a2 + 96), 4 * *(int *)(a2 + 88));
  }
  int v17 = *(_DWORD *)(a2 + 112);
  if (v17)
  {
    uint64_t v18 = SLODWORD(v3[4].__r_.__value_.__r.__words[2]);
    sub_188C80C((unsigned int *)&v3[4].__r_.__value_.__r.__words[2], v18 + v17);
    std::string::pointer v19 = v3[5].__r_.__value_.__l.__data_;
    LODWORD(v3[4].__r_.__value_.__r.__words[2]) += *(_DWORD *)(a2 + 112);
    uint64_t result = (std::string *)memcpy(&v19[4 * v18], *(const void **)(a2 + 120), 4 * *(int *)(a2 + 112));
  }
  int v20 = *(_DWORD *)(a2 + 136);
  if (v20)
  {
    uint64_t v21 = SLODWORD(v3[5].__r_.__value_.__r.__words[2]);
    sub_188C80C((unsigned int *)&v3[5].__r_.__value_.__r.__words[2], v21 + v20);
    std::string::pointer v22 = v3[6].__r_.__value_.__l.__data_;
    LODWORD(v3[5].__r_.__value_.__r.__words[2]) += *(_DWORD *)(a2 + 136);
    uint64_t result = (std::string *)memcpy(&v22[4 * v21], *(const void **)(a2 + 144), 4 * *(int *)(a2 + 136));
  }
  int v23 = *(_DWORD *)(a2 + 160);
  if (v23)
  {
    uint64_t v24 = SLODWORD(v3[6].__r_.__value_.__r.__words[2]);
    sub_188C80C((unsigned int *)&v3[6].__r_.__value_.__r.__words[2], v24 + v23);
    std::string::pointer v25 = v3[7].__r_.__value_.__l.__data_;
    LODWORD(v3[6].__r_.__value_.__r.__words[2]) += *(_DWORD *)(a2 + 160);
    uint64_t result = (std::string *)memcpy(&v25[4 * v24], *(const void **)(a2 + 168), 4 * *(int *)(a2 + 160));
  }
  int v26 = *(_DWORD *)(a2 + 192);
  if (v26)
  {
    uint64_t v27 = (const std::string **)(*(void *)(a2 + 200) + 8);
    uint64_t v28 = (std::string **)sub_188CCE4((uint64_t)&v3[7].__r_.__value_.__r.__words[2], *(_DWORD *)(a2 + 192));
    uint64_t result = (std::string *)sub_188FB98((uint64_t)&v3[7].__r_.__value_.__r.__words[2], v28, v27, v26, *(_DWORD *)v3[8].__r_.__value_.__l.__size_ - LODWORD(v3[8].__r_.__value_.__l.__data_));
    int v29 = LODWORD(v3[8].__r_.__value_.__l.__data_) + v26;
    LODWORD(v3[8].__r_.__value_.__l.__data_) = v29;
    std::string::size_type size = (int *)v3[8].__r_.__value_.__l.__size_;
    if (*size < v29) {
      *std::string::size_type size = v29;
    }
  }
  int v31 = *(_DWORD *)(a2 + 208);
  if (v31)
  {
    uint64_t v32 = SLODWORD(v3[8].__r_.__value_.__r.__words[2]);
    sub_188C80C((unsigned int *)&v3[8].__r_.__value_.__r.__words[2], v32 + v31);
    std::string::pointer v33 = v3[9].__r_.__value_.__l.__data_;
    LODWORD(v3[8].__r_.__value_.__r.__words[2]) += *(_DWORD *)(a2 + 208);
    uint64_t result = (std::string *)memcpy(&v33[4 * v32], *(const void **)(a2 + 216), 4 * *(int *)(a2 + 208));
  }
  int v34 = *(_DWORD *)(a2 + 232);
  if (v34)
  {
    uint64_t v35 = SLODWORD(v3[9].__r_.__value_.__r.__words[2]);
    sub_188C80C((unsigned int *)&v3[9].__r_.__value_.__r.__words[2], v35 + v34);
    std::string::pointer v36 = v3[10].__r_.__value_.__l.__data_;
    LODWORD(v3[9].__r_.__value_.__r.__words[2]) += *(_DWORD *)(a2 + 232);
    uint64_t result = (std::string *)memcpy(&v36[4 * v35], *(const void **)(a2 + 240), 4 * *(int *)(a2 + 232));
  }
  int v37 = *(_DWORD *)(a2 + 256);
  if (v37)
  {
    uint64_t v38 = SLODWORD(v3[10].__r_.__value_.__r.__words[2]);
    sub_188C80C((unsigned int *)&v3[10].__r_.__value_.__r.__words[2], v38 + v37);
    std::string::pointer v39 = v3[11].__r_.__value_.__l.__data_;
    LODWORD(v3[10].__r_.__value_.__r.__words[2]) += *(_DWORD *)(a2 + 256);
    uint64_t result = (std::string *)memcpy(&v39[4 * v38], *(const void **)(a2 + 264), 4 * *(int *)(a2 + 256));
  }
  uint64_t v40 = *(void *)(a2 + 8);
  if (v40)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v40 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_11110DC()
{
  return 1;
}

char *sub_11110E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_20B9240;
  strcpy(result, "maps.path_codec.geo3.SupportPointData");
  return result;
}

void *sub_1111138(void *a1)
{
  uint64_t v4 = a1[1];
  uint64_t v2 = a1 + 1;
  uint64_t v3 = v4;
  if ((v4 & 1) != 0 && !*(void *)(v3 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(v2);
  }
  uint64_t v5 = (unsigned int *)a1[7];
  if (v5 && !a1[5])
  {
    uint64_t v6 = (void **)(v5 + 2);
    uint64_t v7 = *v5;
    if ((int)v7 >= 1)
    {
      do
      {
        if (*v6)
        {
          sub_11137AC(*v6);
          operator delete();
        }
        ++v6;
        --v7;
      }
      while (v7);
      uint64_t v5 = (unsigned int *)a1[7];
    }
    operator delete(v5);
  }
  a1[7] = 0;
  sub_1889DA8((uint64_t)(a1 + 2));
  *a1 = off_24E6998;
  uint64_t v8 = a1[1];
  if ((v8 & 2) != 0)
  {
    uint64_t v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
    if (v8)
    {
      if (*v9)
      {
LABEL_14:
        sub_1881618();
        operator delete();
      }
    }
    else if (v9)
    {
      goto LABEL_14;
    }
  }
  return a1;
}

void sub_1111244(void *a1)
{
  sub_1111138(a1);

  operator delete();
}

uint64_t sub_111127C(uint64_t result)
{
  uint64_t v1 = result;
  *(_DWORD *)(result + 16) = 0;
  uint64_t v2 = *(unsigned int *)(result + 48);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(result + 56) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_111390C(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 48) = 0;
  }
  char v6 = *(unsigned char *)(v1 + 8);
  uint64_t v5 = (uint64_t *)(v1 + 8);
  if (v6)
  {
    return sub_188B4AC(v5);
  }
  return result;
}

unsigned __int8 *sub_11112FC(uint64_t a1, unsigned __int8 *a2, int32x2_t *a3)
{
  uint64_t v4 = a2;
  uint64_t v27 = a2;
  char v6 = (uint64_t *)(a1 + 40);
  uint64_t v7 = (unsigned int *)(a1 + 16);
  uint64_t v8 = (uint64_t *)(a1 + 8);
  while (1)
  {
    while (1)
    {
LABEL_2:
      if ((unint64_t)v4 >= *(void *)a3)
      {
        int v22 = v4 - a3[1].i32[0];
        if (a3[3].i32[1] == v22)
        {
          if (v22 >= 1 && !*(void *)&a3[2]) {
            return 0;
          }
          return v4;
        }
        uint64_t v4 = (unsigned __int8 *)sub_188BB90((uint64_t)a3, v22, a3[11].i32[1]);
        uint64_t v27 = v4;
        if (v23) {
          return v4;
        }
      }
      uint64_t v9 = v4 + 1;
      unsigned int v10 = *v4;
      if (((char)*v4 & 0x80000000) == 0)
      {
        uint64_t v27 = v4 + 1;
        unsigned int v11 = v10 >> 3;
        if (v10 >> 3 == 2) {
          goto LABEL_11;
        }
        goto LABEL_5;
      }
      unsigned int v12 = v10 + (*v9 << 7);
      unsigned int v10 = v12 - 128;
      if ((char)*v9 < 0)
      {
        uint64_t v9 = (unsigned __int8 *)sub_188C180((uint64_t)v4, v12 - 128);
        unsigned int v10 = v21;
        uint64_t v27 = v9;
        unsigned int v11 = v21 >> 3;
        if (v21 >> 3 != 2) {
          goto LABEL_5;
        }
LABEL_11:
        if (v10 != 18) {
          break;
        }
        uint64_t v4 = v9 - 1;
        while (1)
        {
          std::string::pointer v13 = v4 + 1;
          uint64_t v27 = v4 + 1;
          int v14 = *(_DWORD **)(a1 + 56);
          if (v14 && (uint64_t v15 = *(int *)(a1 + 48), (int)v15 < *v14))
          {
            *(_DWORD *)(a1 + 48) = v15 + 1;
            uint64_t v16 = *(void *)&v14[2 * v15 + 2];
            int v28 = 0;
            int v17 = (char *)sub_188BEE0((uint64_t)a3, v13, &v28);
            if (v17) {
              goto LABEL_19;
            }
          }
          else
          {
            uint64_t v18 = sub_1116FD0(*v6);
            uint64_t v16 = sub_188CDC8((uint64_t)v6, (uint64_t)v18);
            int v28 = 0;
            int v17 = (char *)sub_188BEE0((uint64_t)a3, v27, &v28);
            if (v17)
            {
LABEL_19:
              uint64_t v4 = (unsigned __int8 *)sub_1113930(v16, v17, a3);
              ++a3[11].i32[0];
              if (a3[10].i32[0]) {
                return 0;
              }
              goto LABEL_20;
            }
          }
          uint64_t v4 = 0;
          ++a3[11].i32[0];
          if (a3[10].i32[0]) {
            return 0;
          }
LABEL_20:
          int v19 = a3[3].i32[1] + v28;
          a3[3].i32[1] = v19;
          int32x2_t v20 = (int32x2_t)(*(void *)&a3[1] + (v19 & (v19 >> 31)));
          *a3 = v20;
          uint64_t v27 = v4;
          if (!v4) {
            return v4;
          }
          if (*(void *)&v20 <= (unint64_t)v4 || *v4 != 18) {
            goto LABEL_2;
          }
        }
      }
      uint64_t v9 = v4 + 2;
      uint64_t v27 = v4 + 2;
      unsigned int v11 = v10 >> 3;
      if (v10 >> 3 == 2) {
        goto LABEL_11;
      }
LABEL_5:
      if (v11 != 1) {
        break;
      }
      if (v10 == 10)
      {
        uint64_t v4 = sub_188C2CC(v7, v9, (uint64_t)a3);
        uint64_t v27 = v4;
        if (!v4) {
          return v4;
        }
      }
      else
      {
        if (v10 != 8) {
          break;
        }
        int v24 = sub_110DAD8((uint64_t *)&v27);
        sub_110F6A0(a1, v24);
        uint64_t v4 = v27;
        if (!v27) {
          return v4;
        }
      }
    }
    if (!v10 || (v10 & 7) == 4) {
      break;
    }
    if (*v8)
    {
      std::string::pointer v25 = (std::string *)((*v8 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      std::string::pointer v25 = (std::string *)sub_188DBD8(v8);
      uint64_t v9 = v27;
    }
    uint64_t v4 = sub_1885AC0(v10, v25, (char *)v9, a3);
    uint64_t v27 = v4;
    if (!v4) {
      return v4;
    }
  }
  if (!v9) {
    return 0;
  }
  a3[10].i32[0] = v10 - 1;
  return v9;
}

unsigned char *sub_11115E0(uint64_t a1, char *__dst, _DWORD *a3)
{
  uint64_t v4 = __dst;
  unsigned int v6 = *(_DWORD *)(a1 + 32);
  if ((int)v6 >= 1)
  {
    if (*(void *)a3 <= (unint64_t)__dst)
    {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)__dst);
      *uint64_t v4 = 10;
      uint64_t v7 = v4 + 1;
      if (v6 < 0x80) {
        goto LABEL_4;
      }
    }
    else
    {
      *long long __dst = 10;
      uint64_t v7 = __dst + 1;
      if (v6 < 0x80)
      {
LABEL_4:
        v4 += 2;
        *uint64_t v7 = v6;
        uint64_t v8 = *(unsigned int **)(a1 + 24);
        uint64_t v9 = &v8[*(int *)(a1 + 16)];
        while (1)
        {
          if (*(void *)a3 <= (unint64_t)v4)
          {
            uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
            unsigned int v14 = *v8++;
            unsigned int v10 = v14;
            *uint64_t v4 = v14;
            if (v14 > 0x7F)
            {
LABEL_9:
              *uint64_t v4 = v10 | 0x80;
              unsigned int v12 = v10 >> 7;
              v4[1] = v10 >> 7;
              v4 += 2;
              if (v10 >= 0x4000)
              {
                do
                {
                  *(v4 - 1) |= 0x80u;
                  unsigned int v13 = v12 >> 14;
                  v12 >>= 7;
                  *v4++ = v12;
                }
                while (v13);
              }
              goto LABEL_6;
            }
          }
          else
          {
            unsigned int v11 = *v8++;
            unsigned int v10 = v11;
            *uint64_t v4 = v11;
            if (v11 > 0x7F) {
              goto LABEL_9;
            }
          }
          ++v4;
LABEL_6:
          if (v8 >= v9) {
            goto LABEL_14;
          }
        }
      }
    }
    do
    {
      *v7++ = v6 | 0x80;
      unsigned int v25 = v6 >> 14;
      v6 >>= 7;
    }
    while (v25);
    uint64_t v4 = v7 - 1;
    goto LABEL_4;
  }
LABEL_14:
  int v15 = *(_DWORD *)(a1 + 48);
  if (v15)
  {
    for (int i = 0; i != v15; ++i)
    {
      if (*(void *)a3 <= (unint64_t)v4) {
        uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8 * i + 8);
      *uint64_t v4 = 18;
      unsigned int v19 = *(_DWORD *)(v18 + 20);
      v4[1] = v19;
      if (v19 > 0x7F) {
        int v17 = sub_188A9CC(v19, v4 + 1);
      }
      else {
        int v17 = v4 + 2;
      }
      uint64_t v4 = sub_1113B68(v18, v17, a3);
    }
  }
  uint64_t v20 = *(void *)(a1 + 8);
  if ((v20 & 1) == 0) {
    return v4;
  }
  unint64_t v22 = v20 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v22 + 31) < 0)
  {
    char v23 = *(void **)(v22 + 8);
    uint64_t v24 = *(void *)(v22 + 16);
  }
  else
  {
    char v23 = (void *)(v22 + 8);
    LODWORD(v24) = *(unsigned __int8 *)(v22 + 31);
  }
  uint64_t v26 = (int)v24;
  if (*(void *)a3 - (void)v4 >= (int)v24)
  {
    memcpy(v4, v23, (int)v24);
    v4 += v26;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v23, v24, v4);
}

uint64_t sub_1111830(uint64_t a1)
{
  uint64_t v2 = sub_188D4F0((unsigned int *)(a1 + 16));
  if (v2)
  {
    int v3 = v2;
    if ((v2 & 0x80000000) != 0) {
      uint64_t v4 = 11;
    }
    else {
      uint64_t v4 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  else
  {
    int v3 = 0;
    uint64_t v4 = 0;
  }
  *(_DWORD *)(a1 + 32) = v3;
  uint64_t v5 = *(int *)(a1 + 48);
  uint64_t v6 = v4 + v2 + v5;
  uint64_t v7 = *(void *)(a1 + 56);
  if (v7) {
    uint64_t v8 = (uint64_t *)(v7 + 8);
  }
  else {
    uint64_t v8 = 0;
  }
  if (v5)
  {
    uint64_t v9 = 8 * v5;
    do
    {
      uint64_t v10 = *v8++;
      unint64_t v11 = sub_1113D44(v10);
      v6 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6);
      v9 -= 8;
    }
    while (v9);
  }
  uint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    unint64_t v14 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v14 + 31) < 0) {
      uint64_t v15 = *(void *)(v14 + 16);
    }
    else {
      uint64_t v15 = *(unsigned __int8 *)(v14 + 31);
    }
    uint64_t v16 = v15 + v6;
    *(_DWORD *)(a1 + 64) = v16;
    return v16;
  }
  else
  {
    *(_DWORD *)(a1 + 64) = v6;
    return v6;
  }
}

std::string *sub_111193C(std::string *result, uint64_t a2)
{
  int v3 = result;
  int v4 = *(_DWORD *)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = &result->__r_.__value_.__r.__words[2];
    uint64_t v6 = SLODWORD(result->__r_.__value_.__r.__words[2]);
    sub_188C80C((unsigned int *)&result->__r_.__value_.__r.__words[2], v6 + v4);
    std::string::pointer data = v3[1].__r_.__value_.__l.__data_;
    *(_DWORD *)v5 += *(_DWORD *)(a2 + 16);
    uint64_t result = (std::string *)memcpy(&data[4 * v6], *(const void **)(a2 + 24), 4 * *(int *)(a2 + 16));
  }
  int v8 = *(_DWORD *)(a2 + 48);
  if (v8)
  {
    uint64_t v9 = (uint64_t *)(*(void *)(a2 + 56) + 8);
    uint64_t v10 = (std::string **)sub_188CCE4((uint64_t)&v3[1].__r_.__value_.__r.__words[2], *(_DWORD *)(a2 + 48));
    uint64_t result = sub_111317C((std::string *)((char *)v3 + 40), v10, v9, v8, *(_DWORD *)v3[2].__r_.__value_.__l.__size_ - LODWORD(v3[2].__r_.__value_.__l.__data_));
    int v11 = LODWORD(v3[2].__r_.__value_.__l.__data_) + v8;
    LODWORD(v3[2].__r_.__value_.__l.__data_) = v11;
    std::string::size_type size = (int *)v3[2].__r_.__value_.__l.__size_;
    if (*size < v11) {
      *std::string::size_type size = v11;
    }
  }
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v13 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_1111A50()
{
  return 1;
}

double sub_1111A58@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_20B8E90;
  strcpy(v2, "maps.path_codec.geo3.AnchorData");
  return *(double *)".geo3.AnchorData";
}

double sub_1111AAC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = a2 | 2;
  if (!a3) {
    uint64_t v3 = a2;
  }
  *(void *)a1 = off_2441868;
  *(void *)(a1 + 8) = v3;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t sub_1111AE4(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_12;
    }
  }
  else if (v4)
  {
    goto LABEL_12;
  }
  if ((uint64_t (***)())a1 != &off_24F80D8)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5)
    {
      sub_110E270(v5);
      operator delete();
    }
    uint64_t v6 = *(void **)(a1 + 32);
    if (v6)
    {
      sub_110EE28(v6);
      operator delete();
    }
    uint64_t v7 = *(void **)(a1 + 40);
    if (v7)
    {
      sub_1111138(v7);
      operator delete();
    }
  }
  uint64_t v2 = *v3;
  if (*v3)
  {
    sub_10E4F74(v3);
    uint64_t v2 = *v3;
  }
LABEL_12:
  *(void *)a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    int v8 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v8)
      {
LABEL_15:
        sub_1881618();
        operator delete();
      }
    }
    else if (v8)
    {
      goto LABEL_15;
    }
  }
  return a1;
}

void sub_1111C04(uint64_t a1)
{
  sub_1111AE4(a1);

  operator delete();
}

uint64_t sub_1111C3C(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 7) != 0)
  {
    if (v2) {
      double result = sub_110E3C8(*(void *)(result + 24));
    }
    if ((v2 & 2) != 0)
    {
      uint64_t v3 = *(void *)(v1 + 32);
      *(_DWORD *)(v3 + 16) = 0;
      *(_DWORD *)(v3 + 40) = 0;
      *(_DWORD *)(v3 + 64) = 0;
      *(_DWORD *)(v3 + 88) = 0;
      *(_DWORD *)(v3 + 112) = 0;
      *(_DWORD *)(v3 + 136) = 0;
      *(_DWORD *)(v3 + 160) = 0;
      uint64_t v4 = *(unsigned int *)(v3 + 192);
      if ((int)v4 >= 1)
      {
        uint64_t v5 = *(void *)(v3 + 200) + 8;
        do
        {
          while (1)
          {
            uint64_t v6 = *(void *)v5;
            if (*(char *)(*(void *)v5 + 23) < 0) {
              break;
            }
            *(unsigned char *)uint64_t v6 = 0;
            *(unsigned char *)(v6 + 23) = 0;
            v5 += 8;
            if (!--v4) {
              goto LABEL_10;
            }
          }
          **(unsigned char **)uint64_t v6 = 0;
          *(void *)(v6 + 8) = 0;
          v5 += 8;
          --v4;
        }
        while (v4);
LABEL_10:
        *(_DWORD *)(v3 + 192) = 0;
      }
      char v7 = *(unsigned char *)(v3 + 8);
      double result = v3 + 8;
      *(_DWORD *)(result + 200) = 0;
      *(_DWORD *)(result + 224) = 0;
      *(_DWORD *)(result + 248) = 0;
      if (v7) {
        double result = sub_188B4AC((uint64_t *)result);
      }
    }
    if ((v2 & 4) != 0)
    {
      uint64_t v8 = *(void *)(v1 + 40);
      *(_DWORD *)(v8 + 16) = 0;
      uint64_t v9 = *(unsigned int *)(v8 + 48);
      if ((int)v9 >= 1)
      {
        uint64_t v10 = (uint64_t *)(*(void *)(v8 + 56) + 8);
        do
        {
          uint64_t v11 = *v10++;
          double result = sub_111390C(v11);
          --v9;
        }
        while (v9);
        *(_DWORD *)(v8 + 48) = 0;
      }
      char v13 = *(unsigned char *)(v8 + 8);
      uint64_t v12 = (uint64_t *)(v8 + 8);
      if (v13) {
        double result = sub_188B4AC(v12);
      }
    }
  }
  char v15 = *(unsigned char *)(v1 + 8);
  uint64_t v14 = v1 + 8;
  *(_DWORD *)(v14 + 40) = 0;
  *(_DWORD *)(v14 + 8) = 0;
  if (v15)
  {
    return sub_188B4AC((uint64_t *)v14);
  }
  return result;
}

unsigned __int8 *sub_1111D84(uint64_t a1, unsigned __int8 *a2, int32x2_t *a3)
{
  uint64_t v4 = a2;
  int v6 = 0;
  char v7 = (uint64_t *)(a1 + 8);
  if ((unint64_t)a2 >= *(void *)a3)
  {
LABEL_41:
    int v25 = v4 - a3[1].i32[0];
    if (a3[3].i32[1] == v25)
    {
      if (v25 >= 1)
      {
        if (a3[2]) {
          uint64_t v10 = v4;
        }
        else {
          uint64_t v10 = 0;
        }
        goto LABEL_65;
      }
    }
    else
    {
      uint64_t v4 = (unsigned __int8 *)sub_188BB90((uint64_t)a3, v25, a3[11].i32[1]);
      if ((v26 & 1) == 0) {
        goto LABEL_7;
      }
    }
    uint64_t v10 = v4;
    goto LABEL_65;
  }
  while (1)
  {
LABEL_7:
    uint64_t v10 = v4 + 1;
    unsigned int v11 = *v4;
    if (((char)*v4 & 0x80000000) == 0)
    {
      unsigned int v12 = (v11 >> 3) - 1;
LABEL_9:
      switch(v12)
      {
        case 0u:
          if (v11 != 8) {
            goto LABEL_32;
          }
          uint64_t v4 = v10 + 1;
          int v13 = *v10;
          if (((char)*v10 & 0x80000000) == 0)
          {
            *(_DWORD *)(a1 + 48) = v13;
            int v6 = 8;
            if ((unint64_t)v4 >= *(void *)a3) {
              goto LABEL_41;
            }
            continue;
          }
          int v23 = (char)*v4;
          int v24 = v13 + (v23 << 7) - 128;
          if ((v23 & 0x80000000) == 0)
          {
            uint64_t v4 = v10 + 2;
            *(_DWORD *)(a1 + 48) = v24;
            int v6 = 8;
            if ((unint64_t)(v10 + 2) >= *(void *)a3) {
              goto LABEL_41;
            }
            continue;
          }
          uint64_t v4 = (unsigned __int8 *)sub_188C0D0((uint64_t)v10, v24);
          *(_DWORD *)(a1 + 48) = v32;
          int v6 = 8;
          if (!v4) {
            goto LABEL_66;
          }
          break;
        case 1u:
          if (v11 != 18) {
            goto LABEL_32;
          }
          *(_DWORD *)(a1 + 16) |= 1u;
          uint64_t v15 = *(void *)(a1 + 24);
          if (v15)
          {
            int v35 = 0;
            uint64_t v16 = (unsigned __int8 *)sub_188BEE0((uint64_t)a3, v10, &v35);
            if (!v16) {
              goto LABEL_3;
            }
          }
          else
          {
            uint64_t v27 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
            if (*v7) {
              uint64_t v27 = (void *)*v27;
            }
            sub_1112990((uint64_t)v27);
            uint64_t v15 = v28;
            *(void *)(a1 + 24) = v28;
            int v35 = 0;
            uint64_t v16 = (unsigned __int8 *)sub_188BEE0((uint64_t)a3, v10, &v35);
            if (!v16)
            {
LABEL_3:
              uint64_t v4 = 0;
              ++a3[11].i32[0];
              if (a3[10].i32[0]) {
                goto LABEL_66;
              }
              goto LABEL_4;
            }
          }
          uint64_t v4 = sub_110E540(v15, v16, a3);
          ++a3[11].i32[0];
          if (a3[10].i32[0]) {
            goto LABEL_66;
          }
LABEL_4:
          int v8 = v35;
          goto LABEL_5;
        case 2u:
          if (v11 != 26) {
            goto LABEL_32;
          }
          *(_DWORD *)(a1 + 16) |= 2u;
          uint64_t v17 = *(void *)(a1 + 32);
          if (v17)
          {
            int v36 = 0;
            uint64_t v18 = (char *)sub_188BEE0((uint64_t)a3, v10, &v36);
            if (v18) {
              goto LABEL_24;
            }
          }
          else
          {
            int v29 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
            if (*v7) {
              int v29 = (void *)*v29;
            }
            sub_1112A0C((uint64_t)v29);
            uint64_t v17 = v30;
            *(void *)(a1 + 32) = v30;
            int v36 = 0;
            uint64_t v18 = (char *)sub_188BEE0((uint64_t)a3, v10, &v36);
            if (v18)
            {
LABEL_24:
              uint64_t v4 = (unsigned __int8 *)sub_110EFE0(v17, v18, a3);
              ++a3[11].i32[0];
              if (a3[10].i32[0]) {
                goto LABEL_66;
              }
              goto LABEL_53;
            }
          }
          uint64_t v4 = 0;
          ++a3[11].i32[0];
          if (a3[10].i32[0]) {
            goto LABEL_66;
          }
LABEL_53:
          int v8 = v36;
          goto LABEL_5;
        case 3u:
          if (v11 != 34) {
            goto LABEL_32;
          }
          *(_DWORD *)(a1 + 16) |= 4u;
          uint64_t v19 = *(void *)(a1 + 40);
          if (v19)
          {
            int v37 = 0;
            uint64_t v20 = (unsigned __int8 *)sub_188BEE0((uint64_t)a3, v10, &v37);
            if (v20) {
              goto LABEL_29;
            }
          }
          else
          {
            int v31 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
            if (*v7) {
              int v31 = (void *)*v31;
            }
            uint64_t v19 = sub_1112B30((uint64_t)v31);
            *(void *)(a1 + 40) = v19;
            int v37 = 0;
            uint64_t v20 = (unsigned __int8 *)sub_188BEE0((uint64_t)a3, v10, &v37);
            if (v20)
            {
LABEL_29:
              uint64_t v4 = sub_11112FC(v19, v20, a3);
              ++a3[11].i32[0];
              if (a3[10].i32[0]) {
                goto LABEL_66;
              }
              goto LABEL_58;
            }
          }
          uint64_t v4 = 0;
          ++a3[11].i32[0];
          if (a3[10].i32[0]) {
            goto LABEL_66;
          }
LABEL_58:
          int v8 = v37;
LABEL_5:
          int v9 = a3[3].i32[1] + v8;
          a3[3].i32[1] = v9;
          *a3 = (int32x2_t)(*(void *)&a3[1] + (v9 & (v9 >> 31)));
          if (!v4) {
            goto LABEL_66;
          }
          goto LABEL_6;
        default:
          goto LABEL_32;
      }
      goto LABEL_6;
    }
    unsigned int v14 = v11 + (*v10 << 7);
    unsigned int v11 = v14 - 128;
    if ((char)*v10 < 0)
    {
      uint64_t v10 = (unsigned __int8 *)sub_188C180((uint64_t)v4, v14 - 128);
      unsigned int v11 = v21;
      unsigned int v12 = (v21 >> 3) - 1;
      if (v12 <= 3) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v10 = v4 + 2;
      unsigned int v12 = (v11 >> 3) - 1;
      if (v12 <= 3) {
        goto LABEL_9;
      }
    }
LABEL_32:
    if (!v11 || (v11 & 7) == 4) {
      break;
    }
    if (*v7)
    {
      uint64_t v4 = sub_1885AC0(v11, (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8), (char *)v10, a3);
      if (!v4) {
        goto LABEL_66;
      }
    }
    else
    {
      std::string::pointer v33 = (std::string *)sub_188DBD8(v7);
      uint64_t v4 = sub_1885AC0(v11, v33, (char *)v10, a3);
      if (!v4)
      {
LABEL_66:
        uint64_t v10 = 0;
        goto LABEL_65;
      }
    }
LABEL_6:
    if ((unint64_t)v4 >= *(void *)a3) {
      goto LABEL_41;
    }
  }
  if (v10) {
    a3[10].i32[0] = v11 - 1;
  }
LABEL_65:
  *(_DWORD *)(a1 + 16) |= v6;
  return v10;
}

char *sub_111222C(uint64_t a1, char *__dst, unint64_t *a3)
{
  uint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 8) != 0)
  {
    if (*a3 <= (unint64_t)__dst)
    {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      unsigned int v7 = *(_DWORD *)(a1 + 48);
      *uint64_t v4 = 8;
      v4[1] = v7;
      if (v7 <= 0x7F) {
        goto LABEL_4;
      }
    }
    else
    {
      unsigned int v7 = *(_DWORD *)(a1 + 48);
      *long long __dst = 8;
      __dst[1] = v7;
      if (v7 <= 0x7F)
      {
LABEL_4:
        v4 += 2;
        goto LABEL_8;
      }
    }
    v4[1] = v7 | 0x80;
    unsigned int v8 = v7 >> 7;
    _OWORD v4[2] = v7 >> 7;
    v4 += 3;
    if (v7 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unsigned int v9 = v8 >> 14;
        v8 >>= 7;
        *v4++ = v8;
      }
      while (v9);
    }
  }
LABEL_8:
  if (v6)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v12 = *(void *)(a1 + 24);
    *uint64_t v4 = 18;
    unsigned int v13 = *(_DWORD *)(v12 + 20);
    v4[1] = v13;
    if (v13 > 0x7F)
    {
      unsigned int v14 = sub_188A9CC(v13, v4 + 1);
      uint64_t v4 = sub_110E91C(v12, (unint64_t)v14, a3);
      if ((v6 & 2) != 0) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v4 = sub_110E91C(v12, (unint64_t)(v4 + 2), a3);
      if ((v6 & 2) != 0) {
        goto LABEL_19;
      }
    }
LABEL_10:
    if ((v6 & 4) == 0) {
      goto LABEL_11;
    }
LABEL_25:
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v18 = *(void *)(a1 + 40);
    *uint64_t v4 = 34;
    unsigned int v19 = *(_DWORD *)(v18 + 64);
    v4[1] = v19;
    if (v19 > 0x7F) {
      uint64_t v20 = sub_188A9CC(v19, v4 + 1);
    }
    else {
      uint64_t v20 = v4 + 2;
    }
    uint64_t v4 = sub_11115E0(v18, v20, a3);
    uint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & 1) == 0) {
      return v4;
    }
    goto LABEL_31;
  }
  if ((v6 & 2) == 0) {
    goto LABEL_10;
  }
LABEL_19:
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v15 = *(void *)(a1 + 32);
  *uint64_t v4 = 26;
  unsigned int v16 = *(_DWORD *)(v15 + 276);
  v4[1] = v16;
  if (v16 > 0x7F)
  {
    uint64_t v17 = sub_188A9CC(v16, v4 + 1);
    uint64_t v4 = sub_110FC34(v15, v17, a3);
    if ((v6 & 4) != 0) {
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v4 = sub_110FC34(v15, v4 + 2, a3);
    if ((v6 & 4) != 0) {
      goto LABEL_25;
    }
  }
LABEL_11:
  uint64_t v10 = *(void *)(a1 + 8);
  if ((v10 & 1) == 0) {
    return v4;
  }
LABEL_31:
  unint64_t v21 = v10 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v21 + 31) < 0)
  {
    unint64_t v22 = *(char **)(v21 + 8);
    uint64_t v23 = *(void *)(v21 + 16);
  }
  else
  {
    unint64_t v22 = (char *)(v21 + 8);
    LODWORD(v23) = *(unsigned __int8 *)(v21 + 31);
  }
  uint64_t v24 = (int)v23;
  if ((uint64_t)(*a3 - (void)v4) < (int)v23)
  {
    return (char *)sub_188A528(a3, v22, v23, v4);
  }
  else
  {
    memcpy(v4, v22, (int)v23);
    return &v4[v24];
  }
}

uint64_t sub_11124EC(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 0xF) == 0)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    if ((v4 & 1) == 0) {
      goto LABEL_29;
    }
    goto LABEL_30;
  }
  if (v2)
  {
    uint64_t v5 = sub_110EB4C(*(void *)(a1 + 24));
    uint64_t v3 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_8:
    uint64_t v6 = sub_111083C(*(void *)(a1 + 32));
    v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_9:
  if ((v2 & 4) != 0)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = sub_188D4F0((unsigned int *)(v7 + 16));
    uint64_t v9 = 11;
    uint64_t v10 = ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((int)v8 >= 0) {
      uint64_t v9 = v10;
    }
    if (v8) {
      int v11 = v8;
    }
    else {
      int v11 = 0;
    }
    if (!v8) {
      uint64_t v9 = 0;
    }
    *(_DWORD *)(v7 + 32) = v11;
    uint64_t v12 = v9 + v8;
    uint64_t v13 = *(int *)(v7 + 48);
    uint64_t v14 = v12 + v13;
    uint64_t v15 = *(void *)(v7 + 56);
    if (v15) {
      unsigned int v16 = (uint64_t *)(v15 + 8);
    }
    else {
      unsigned int v16 = 0;
    }
    if (v13)
    {
      uint64_t v17 = 8 * v13;
      do
      {
        uint64_t v18 = *v16++;
        unint64_t v19 = sub_1113D44(v18);
        v14 += v19 + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6);
        v17 -= 8;
      }
      while (v17);
    }
    uint64_t v20 = *(void *)(v7 + 8);
    if (v20)
    {
      unint64_t v24 = v20 & 0xFFFFFFFFFFFFFFFCLL;
      if (*(char *)(v24 + 31) < 0) {
        uint64_t v25 = *(void *)(v24 + 16);
      }
      else {
        uint64_t v25 = *(unsigned __int8 *)(v24 + 31);
      }
      v14 += v25;
    }
    *(_DWORD *)(v7 + 64) = v14;
    v3 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 8) == 0)
    {
LABEL_11:
      uint64_t v4 = *(void *)(a1 + 8);
      if ((v4 & 1) == 0) {
        goto LABEL_29;
      }
      goto LABEL_30;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_11;
  }
  v3 += ((9 * (__clz(*(_DWORD *)(a1 + 48) | 1) ^ 0x1F) + 73) >> 6) + 1;
  uint64_t v4 = *(void *)(a1 + 8);
  if ((v4 & 1) == 0) {
    goto LABEL_29;
  }
LABEL_30:
  unint64_t v22 = v4 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v22 + 31) < 0) {
    uint64_t v23 = *(void *)(v22 + 16);
  }
  else {
    uint64_t v23 = *(unsigned __int8 *)(v22 + 31);
  }
  v3 += v23;
LABEL_29:
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

std::string *sub_1112700(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 0xF) != 0)
  {
    if (v4)
    {
      LODWORD(result->__r_.__value_.__r.__words[2]) |= 1u;
      std::string::pointer data = (std::string *)result[1].__r_.__value_.__l.__data_;
      if (!data)
      {
        std::string::size_type size = v3->__r_.__value_.__l.__size_;
        uint64_t v8 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
        if (size) {
          uint64_t v8 = (void *)*v8;
        }
        sub_1112990((uint64_t)v8);
        v3[1].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
      }
      if (*(void *)(a2 + 24)) {
        uint64_t v9 = *(uint64_t (****)())(a2 + 24);
      }
      else {
        uint64_t v9 = &off_24F7F48;
      }
      double result = sub_110EC78(data, (uint64_t)v9);
      if ((v4 & 2) == 0)
      {
LABEL_4:
        if ((v4 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_28;
      }
    }
    else if ((v4 & 2) == 0)
    {
      goto LABEL_4;
    }
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 2u;
    uint64_t v10 = (std::string *)v3[1].__r_.__value_.__l.__size_;
    if (!v10)
    {
      std::string::size_type v11 = v3->__r_.__value_.__l.__size_;
      uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      if (v11) {
        uint64_t v12 = (void *)*v12;
      }
      sub_1112A0C((uint64_t)v12);
      v3[1].__r_.__value_.__l.__size_ = (std::string::size_type)v10;
    }
    if (*(void *)(a2 + 32)) {
      uint64_t v13 = *(uint64_t (****)())(a2 + 32);
    }
    else {
      uint64_t v13 = &off_24F7F78;
    }
    double result = sub_1110D68(v10, (uint64_t)v13);
    if ((v4 & 4) == 0)
    {
LABEL_5:
      if ((v4 & 8) == 0)
      {
LABEL_7:
        LODWORD(v3->__r_.__value_.__r.__words[2]) |= v4;
        goto LABEL_8;
      }
LABEL_6:
      LODWORD(v3[2].__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 48);
      goto LABEL_7;
    }
LABEL_28:
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 4u;
    uint64_t v14 = (std::string *)v3[1].__r_.__value_.__r.__words[2];
    if (!v14)
    {
      std::string::size_type v15 = v3->__r_.__value_.__l.__size_;
      unsigned int v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
      if (v15) {
        unsigned int v16 = (void *)*v16;
      }
      uint64_t v14 = (std::string *)sub_1112B30((uint64_t)v16);
      v3[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v14;
    }
    if (*(void *)(a2 + 40)) {
      uint64_t v17 = *(uint64_t (****)())(a2 + 40);
    }
    else {
      uint64_t v17 = &off_24F8090;
    }
    double result = sub_111193C(v14, (uint64_t)v17);
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_8:
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_1112878()
{
  return 1;
}

char *sub_1112880@<X0>(uint64_t a1@<X8>)
{
  double result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_20B93A0;
  strcpy(result, "maps.path_codec.geo3.CompressedPath");
  return result;
}

void *sub_11128D8(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *double result = off_2441668;
  result[1] = a1;
  result[2] = 0;
  result[3] = 0;
  result[4] = a1;
  result[6] = &qword_2550250;
  result[7] = 0;
  return result;
}

double sub_1112990(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(v2 + 8) = a1;
  *(void *)uint64_t v2 = off_24416E8;
  double result = 0.0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  return result;
}

double sub_1112A0C(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t v2 = off_2441768;
  *(void *)(v2 + 8) = a1;
  double result = 0.0;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 72) = a1;
  *(void *)(v2 + 88) = 0;
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 112) = 0;
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 136) = 0;
  *(void *)(v2 + 144) = a1;
  *(void *)(v2 + 160) = 0;
  *(void *)(v2 + 168) = a1;
  *(void *)(v2 + 184) = a1;
  *(void *)(v2 + 192) = 0;
  *(void *)(v2 + 200) = 0;
  *(void *)(v2 + 208) = 0;
  *(void *)(v2 + 216) = a1;
  *(void *)(v2 + 232) = 0;
  *(void *)(v2 + 240) = a1;
  *(void *)(v2 + 256) = 0;
  *(void *)(v2 + 264) = a1;
  *(_DWORD *)(v2 + 276) = 0;
  return result;
}

uint64_t sub_1112B30(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t result = off_24417E8;
  *(void *)(result + 8) = a1;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a1;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 40) = a1;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

double sub_1112BE0(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(v2 + 8) = a1;
  *(void *)uint64_t v2 = off_2441868;
  double result = 0.0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_DWORD *)(v2 + 48) = 0;
  return result;
}

void sub_1112C60()
{
}

void *sub_1112CBC(uint64_t a1, uint64_t a2)
{
  return sub_11128D8(a2);
}

uint64_t sub_1112CC4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_1112CCC()
{
}

double sub_1112D1C(uint64_t a1, uint64_t a2)
{
  return sub_1112990(a2);
}

uint64_t sub_1112D24(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_1112D2C()
{
}

double sub_1112DAC(uint64_t a1, uint64_t a2)
{
  return sub_1112A0C(a2);
}

uint64_t sub_1112DB4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 276);
}

void sub_1112DBC()
{
}

uint64_t sub_1112E14(uint64_t a1, uint64_t a2)
{
  return sub_1112B30(a2);
}

uint64_t sub_1112E1C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

void sub_1112E24()
{
}

double sub_1112E78(uint64_t a1, uint64_t a2)
{
  return sub_1112BE0(a2);
}

uint64_t sub_1112E80(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

char *sub_1112E88(uint64_t a1, char *a2, _OWORD *a3)
{
  int v5 = *a2;
  if ((*a2 & 0x80000000) == 0)
  {
    double result = a2 + 1;
    unint64_t v7 = *(void *)(a1 + 8);
    int v8 = v7 - result;
    if (v5 > (int)v7 - (int)result) {
      goto LABEL_3;
    }
LABEL_8:
    long long v13 = a3[1];
    unint64_t v14 = (unint64_t)&result[v5];
    v21[0] = *a3;
    v21[1] = v13;
    double result = sub_1113038(result, v14, (unsigned int **)v21);
    if ((char *)v14 != result) {
      return 0;
    }
    return result;
  }
  double result = (char *)sub_188C1C4((uint64_t)a2, *a2);
  if (!result) {
    return result;
  }
  int v5 = v15;
  unint64_t v7 = *(void *)(a1 + 8);
  int v8 = v7 - result;
  if (v5 <= (int)v7 - (int)result) {
    goto LABEL_8;
  }
LABEL_3:
  while (1)
  {
    long long v9 = a3[1];
    v23[0] = *a3;
    v23[1] = v9;
    double result = sub_1113038(result, v7, (unsigned int **)v23);
    if (!result) {
      return result;
    }
    uint64_t v10 = *(long long **)(a1 + 8);
    int v11 = result - v10;
    int v12 = v5 - v8;
    if (v5 - v8 <= 16)
    {
      __int16 v26 = 0;
      uint64_t v25 = 0;
      long long v24 = *v10;
      uint64_t v16 = v12;
      uint64_t v17 = (char *)&v24 + v12;
      long long v18 = a3[1];
      v22[0] = *a3;
      v22[1] = v18;
      unint64_t v19 = sub_1113038((char *)&v24 + v11, (unint64_t)v17, (unsigned int **)v22);
      if (v19) {
        BOOL v20 = v19 == v17;
      }
      else {
        BOOL v20 = 0;
      }
      if (!v20) {
        return 0;
      }
      return (char *)(*(void *)(a1 + 8) + v16);
    }
    if (*(int *)(a1 + 28) < 17) {
      return 0;
    }
    double result = (char *)sub_188B760(a1);
    if (!result) {
      return result;
    }
    int v5 = v5 - v8 - v11;
    result += v11;
    unint64_t v7 = *(void *)(a1 + 8);
    int v8 = v7 - result;
    if (v5 <= (int)v7 - (int)result) {
      goto LABEL_8;
    }
  }
}

char *sub_1113038(char *a1, unint64_t a2, unsigned int **a3)
{
  uint64_t v3 = a1;
  while ((unint64_t)v3 < a2)
  {
    unint64_t v6 = *v3;
    if (*v3 < 0)
    {
      int v7 = v6 + (v3[1] << 7);
      unint64_t v6 = (v7 - 128);
      if (v3[1] < 0)
      {
        uint64_t v3 = (char *)sub_188C138((uint64_t)v3, (v7 - 128));
        if (!v3) {
          return v3;
        }
        unint64_t v6 = v10;
        if (((unsigned int (*)(unint64_t))a3[1])(v10))
        {
LABEL_9:
          int v8 = *a3;
          uint64_t v9 = **a3;
          if (v9 == (*a3)[1]) {
            sub_188C80C(*a3, v9 + 1);
          }
          *(_DWORD *)(*((void *)v8 + 1) + 4 * v9) = v6;
          *int v8 = v9 + 1;
          continue;
        }
      }
      else
      {
        v3 += 2;
        if (((unsigned int (*)(void))a3[1])((v7 - 128))) {
          goto LABEL_9;
        }
      }
    }
    else
    {
      ++v3;
      if (((unsigned int (*)(unint64_t))a3[1])(v6)) {
        goto LABEL_9;
      }
    }
    int v11 = *((_DWORD *)a3 + 6);
    int v12 = (uint64_t *)a3[2];
    if (*v12) {
      long long v13 = (std::string *)((*v12 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else {
      long long v13 = (std::string *)sub_188DBD8(v12);
    }
    sub_188C020(v11, v6, v13);
  }
  return v3;
}

std::string *sub_111317C(std::string *result, std::string **a2, uint64_t *a3, int a4, int a5)
{
  LODWORD(v5) = a4;
  int v7 = a2;
  int v8 = a4 - a5;
  if (a4 > a5)
  {
    uint64_t v9 = result->__r_.__value_.__r.__words[0];
    unint64_t v10 = &a2[a5];
    do
    {
      double result = (std::string *)sub_1116FD0(v9);
      *v10++ = result;
      --v8;
    }
    while (v8);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v12 = *a3++;
      uint64_t v11 = v12;
      long long v13 = *v7++;
      double result = sub_11131F8(v11, v13);
      --v5;
    }
    while (v5);
  }
  return result;
}

std::string *sub_11131F8(uint64_t a1, std::string *a2)
{
  return sub_1113E40(a2, a1);
}

BOOL sub_1113208(unsigned int a1)
{
  return a1 < 4;
}

void *sub_1113214(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }
  return a1;
}

void sub_11132B4(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }

  operator delete();
}

uint64_t sub_1113374(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 3) != 0) {
    *(void *)(a1 + 24) = 0;
  }
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_1113398(_DWORD *a1, char *a2, int32x2_t *a3)
{
  int v6 = 0;
  int v7 = (uint64_t *)(a1 + 2);
  while (1)
  {
    if ((unint64_t)a2 < *(void *)a3) {
      goto LABEL_4;
    }
    int v14 = a2 - a3[1].i32[0];
    if (a3[3].i32[1] == v14) {
      break;
    }
    a2 = sub_188BB90((uint64_t)a3, v14, a3[11].i32[1]);
    if (v15) {
      goto LABEL_27;
    }
LABEL_4:
    int v8 = a2 + 1;
    unsigned int v9 = *a2;
    if ((*a2 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    unsigned int v10 = v9 + (*v8 << 7);
    unsigned int v9 = v10 - 128;
    if (*v8 < 0)
    {
      int v8 = (char *)sub_188C180((uint64_t)a2, v10 - 128);
      unsigned int v9 = v13;
      unsigned int v11 = v13 >> 3;
      if (v13 >> 3 != 2) {
        goto LABEL_8;
      }
LABEL_18:
      if (v9 != 21) {
        goto LABEL_12;
      }
      v6 |= 2u;
      a1[7] = *(_DWORD *)v8;
      a2 = v8 + 4;
    }
    else
    {
      int v8 = a2 + 2;
LABEL_7:
      unsigned int v11 = v9 >> 3;
      if (v9 >> 3 == 2) {
        goto LABEL_18;
      }
LABEL_8:
      if (v11 == 1 && v9 == 13)
      {
        v6 |= 1u;
        a1[6] = *(_DWORD *)v8;
        a2 = v8 + 4;
      }
      else
      {
LABEL_12:
        if (!v9 || (v9 & 7) == 4)
        {
          if (v8)
          {
            a3[10].i32[0] = v9 - 1;
            a2 = v8;
          }
          else
          {
            a2 = 0;
          }
          goto LABEL_27;
        }
        if (*v7)
        {
          a2 = (char *)sub_1885AC0(v9, (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8), v8, a3);
          if (!a2) {
            goto LABEL_27;
          }
        }
        else
        {
          uint64_t v16 = (std::string *)sub_188DBD8(v7);
          a2 = (char *)sub_1885AC0(v9, v16, v8, a3);
          if (!a2) {
            goto LABEL_27;
          }
        }
      }
    }
  }
  if (v14 >= 1 && !*(void *)&a3[2]) {
    a2 = 0;
  }
LABEL_27:
  a1[4] |= v6;
  return a2;
}

_OWORD *sub_111354C(uint64_t a1, unint64_t __dst, _DWORD *a3)
{
  int v4 = (_OWORD *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    if (*(void *)a3 <= (unint64_t)v4) {
      int v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    int v10 = *(_DWORD *)(a1 + 28);
    *(unsigned char *)int v4 = 21;
    *(_DWORD *)((char *)v4 + 1) = v10;
    int v4 = (_OWORD *)((char *)v4 + 5);
    uint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & 1) == 0) {
      return v4;
    }
    goto LABEL_11;
  }
  if (*(void *)a3 <= __dst) {
    int v4 = sub_188A3FC((uint64_t)a3, __dst);
  }
  int v9 = *(_DWORD *)(a1 + 24);
  *(unsigned char *)int v4 = 13;
  *(_DWORD *)((char *)v4 + 1) = v9;
  int v4 = (_OWORD *)((char *)v4 + 5);
  if ((v6 & 2) != 0) {
    goto LABEL_8;
  }
LABEL_3:
  uint64_t v7 = *(void *)(a1 + 8);
  if ((v7 & 1) == 0) {
    return v4;
  }
LABEL_11:
  unint64_t v11 = v7 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v11 + 31) < 0)
  {
    uint64_t v12 = *(char **)(v11 + 8);
    uint64_t v13 = *(void *)(v11 + 16);
  }
  else
  {
    uint64_t v12 = (char *)(v11 + 8);
    LODWORD(v13) = *(unsigned __int8 *)(v11 + 31);
  }
  uint64_t v14 = (int)v13;
  if (*(void *)a3 - (void)v4 < (int)v13)
  {
    return (_OWORD *)sub_188A528(a3, v12, v13, v4);
  }
  else
  {
    memcpy(v4, v12, (int)v13);
    return (_OWORD *)((char *)v4 + v14);
  }
}

uint64_t sub_1113684(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  uint64_t v2 = 5;
  if ((v1 & 1) == 0) {
    uint64_t v2 = 0;
  }
  if ((v1 & 2) != 0) {
    v2 += 5;
  }
  BOOL v3 = (~v1 & 3) == 0;
  uint64_t v4 = 10;
  if (!v3) {
    uint64_t v4 = v2;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v7 + 31) < 0) {
      uint64_t v8 = *(void *)(v7 + 16) + v4;
    }
    else {
      uint64_t v8 = *(unsigned __int8 *)(v7 + 31) + v4;
    }
    *(_DWORD *)(a1 + 20) = v8;
    return v8;
  }
  else
  {
    *(_DWORD *)(a1 + 20) = v4;
    return v4;
  }
}

std::string *sub_11136F8(std::string *result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 16);
  if ((v2 & 3) != 0)
  {
    if (v2) {
      LODWORD(result[1].__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 24);
    }
    if ((v2 & 2) != 0) {
      HIDWORD(result[1].__r_.__value_.__r.__words[0]) = *(_DWORD *)(a2 + 28);
    }
    LODWORD(result->__r_.__value_.__r.__words[2]) |= v2;
  }
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3) {
    return sub_188B4F8((uint64_t *)&result->__r_.__value_.__l.__size_, (v3 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

BOOL sub_1113744(uint64_t a1)
{
  return (~*(_DWORD *)(a1 + 16) & 3) == 0;
}

double sub_1113758@<D0>(uint64_t a1@<X8>)
{
  int v2 = (char *)operator new(0x20uLL);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_20B8890;
  strcpy(v2, "maps.path_codec.geo3.LatLngE7");
  return *(double *)"ec.geo3.LatLngE7";
}

void *sub_11137AC(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }
  return a1;
}

void sub_111384C(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }

  operator delete();
}

uint64_t sub_111390C(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 3) != 0)
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_1113930(uint64_t a1, char *a2, int32x2_t *a3)
{
  int v6 = 0;
  unint64_t v7 = (uint64_t *)(a1 + 8);
  while (1)
  {
    if ((unint64_t)a2 < *(void *)a3) {
      goto LABEL_5;
    }
    int v20 = a2 - a3[1].i32[0];
    if (a3[3].i32[1] == v20) {
      break;
    }
    a2 = sub_188BB90((uint64_t)a3, v20, a3[11].i32[1]);
    if (v21) {
      goto LABEL_43;
    }
LABEL_5:
    int v9 = a2 + 1;
    unsigned int v10 = *a2;
    if (*a2 < 0)
    {
      unsigned int v13 = v10 + (*v9 << 7);
      unsigned int v10 = v13 - 128;
      if (*v9 < 0)
      {
        int v9 = (char *)sub_188C180((uint64_t)a2, v13 - 128);
        unsigned int v10 = v16;
        unsigned int v11 = v16 >> 3;
        if (v16 >> 3 != 2) {
          goto LABEL_7;
        }
      }
      else
      {
        int v9 = a2 + 2;
        unsigned int v11 = v10 >> 3;
        if (v10 >> 3 != 2) {
          goto LABEL_7;
        }
      }
      goto LABEL_18;
    }
    unsigned int v11 = v10 >> 3;
    if (v10 >> 3 == 2)
    {
LABEL_18:
      if (v10 != 16) {
        goto LABEL_11;
      }
      v6 |= 2u;
      a2 = v9 + 1;
      uint64_t v14 = *v9;
      if (*v9 < 0)
      {
        int v15 = *a2;
        uint64_t v14 = v14 + (v15 << 7) - 128;
        if ((v15 & 0x80000000) == 0)
        {
          a2 = v9 + 2;
          goto LABEL_22;
        }
        a2 = (char *)sub_188C138((uint64_t)v9, v14);
        *(void *)(a1 + 32) = v18;
        if (!a2) {
          goto LABEL_35;
        }
      }
      else
      {
LABEL_22:
        *(void *)(a1 + 32) = v14;
      }
    }
    else
    {
LABEL_7:
      if (v11 == 1 && v10 == 8)
      {
        v6 |= 1u;
        a2 = v9 + 1;
        uint64_t v8 = *v9;
        if ((*v9 & 0x80000000) == 0) {
          goto LABEL_3;
        }
        int v17 = *a2;
        uint64_t v8 = v8 + (v17 << 7) - 128;
        if (v17 < 0)
        {
          a2 = (char *)sub_188C138((uint64_t)v9, v8);
          *(void *)(a1 + 24) = v19;
          if (!a2) {
            goto LABEL_35;
          }
        }
        else
        {
          a2 = v9 + 2;
LABEL_3:
          *(void *)(a1 + 24) = v8;
        }
      }
      else
      {
LABEL_11:
        if (!v10 || (v10 & 7) == 4)
        {
          if (v9) {
            a3[10].i32[0] = v10 - 1;
          }
          goto LABEL_38;
        }
        if (*v7)
        {
          a2 = (char *)sub_1885AC0(v10, (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8), v9, a3);
          if (!a2) {
            goto LABEL_35;
          }
        }
        else
        {
          unint64_t v22 = (std::string *)sub_188DBD8(v7);
          a2 = (char *)sub_1885AC0(v10, v22, v9, a3);
          if (!a2)
          {
LABEL_35:
            int v9 = 0;
            goto LABEL_38;
          }
        }
      }
    }
  }
  if (v20 < 1)
  {
LABEL_43:
    int v9 = a2;
    goto LABEL_38;
  }
  if (a3[2]) {
    int v9 = a2;
  }
  else {
    int v9 = 0;
  }
LABEL_38:
  *(_DWORD *)(a1 + 16) |= v6;
  return v9;
}

unsigned char *sub_1113B68(uint64_t a1, unsigned char *__dst, _DWORD *a3)
{
  uint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*(void *)a3 <= (unint64_t)__dst)
    {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)__dst);
      unint64_t v7 = *(void *)(a1 + 24);
      *uint64_t v4 = 8;
      v4[1] = v7;
      if (v7 <= 0x7F) {
        goto LABEL_4;
      }
    }
    else
    {
      unint64_t v7 = *(void *)(a1 + 24);
      *long long __dst = 8;
      __dst[1] = v7;
      if (v7 <= 0x7F)
      {
LABEL_4:
        v4 += 2;
        goto LABEL_8;
      }
    }
    v4[1] = v7 | 0x80;
    unint64_t v8 = v7 >> 7;
    _OWORD v4[2] = v7 >> 7;
    v4 += 3;
    if (v7 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unint64_t v9 = v8 >> 14;
        v8 >>= 7;
        *v4++ = v8;
      }
      while (v9);
    }
  }
LABEL_8:
  if ((v6 & 2) == 0) {
    goto LABEL_15;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unint64_t v10 = *(void *)(a1 + 32);
    *uint64_t v4 = 16;
    v4[1] = v10;
    if (v10 <= 0x7F) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + 32);
    *uint64_t v4 = 16;
    v4[1] = v10;
    if (v10 <= 0x7F)
    {
LABEL_11:
      v4 += 2;
      goto LABEL_15;
    }
  }
  v4[1] = v10 | 0x80;
  unint64_t v11 = v10 >> 7;
  _OWORD v4[2] = v10 >> 7;
  v4 += 3;
  if (v10 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unint64_t v12 = v11 >> 14;
      v11 >>= 7;
      *v4++ = v11;
    }
    while (v12);
  }
LABEL_15:
  uint64_t v13 = *(void *)(a1 + 8);
  if ((v13 & 1) == 0) {
    return v4;
  }
  unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v15 + 31) < 0)
  {
    unsigned int v16 = *(char **)(v15 + 8);
    uint64_t v17 = *(void *)(v15 + 16);
  }
  else
  {
    unsigned int v16 = (char *)(v15 + 8);
    LODWORD(v17) = *(unsigned __int8 *)(v15 + 31);
  }
  uint64_t v18 = (int)v17;
  if (*(void *)a3 - (void)v4 < (int)v17)
  {
    return (unsigned char *)sub_188A528(a3, v16, v17, v4);
  }
  else
  {
    memcpy(v4, v16, (int)v17);
    return &v4[v18];
  }
}

unint64_t sub_1113D44(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0)
  {
    unint64_t v2 = 0;
    goto LABEL_8;
  }
  if (v1)
  {
    unint64_t v2 = ((9 * (__clz(*(void *)(a1 + 24) | 1) ^ 0x3F) + 73) >> 6) + 1;
    if ((v1 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  unint64_t v2 = 0;
  if ((v1 & 2) != 0) {
LABEL_7:
  }
    v2 += ((9 * (__clz(*(void *)(a1 + 32) | 1) ^ 0x3F) + 73) >> 6) + 1;
LABEL_8:
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    unint64_t v5 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v5 + 31) < 0) {
      unint64_t v6 = *(void *)(v5 + 16) + v2;
    }
    else {
      unint64_t v6 = *(unsigned __int8 *)(v5 + 31) + v2;
    }
    *(_DWORD *)(a1 + 20) = v6;
    return v6;
  }
  else
  {
    *(_DWORD *)(a1 + 20) = v2;
    return v2;
  }
}

std::string *sub_1113DF4(std::string *result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 16);
  if ((v2 & 3) != 0)
  {
    if (v2) {
      result[1].__r_.__value_.__r.__words[0] = *(void *)(a2 + 24);
    }
    if ((v2 & 2) != 0) {
      result[1].__r_.__value_.__l.__size_ = *(void *)(a2 + 32);
    }
    LODWORD(result->__r_.__value_.__r.__words[2]) |= v2;
  }
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3) {
    return sub_188B4F8((uint64_t *)&result->__r_.__value_.__l.__size_, (v3 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

std::string *sub_1113E40(std::string *result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 16);
  if ((v2 & 3) != 0)
  {
    if (v2) {
      result[1].__r_.__value_.__r.__words[0] = *(void *)(a2 + 24);
    }
    if ((v2 & 2) != 0) {
      result[1].__r_.__value_.__l.__size_ = *(void *)(a2 + 32);
    }
    LODWORD(result->__r_.__value_.__r.__words[2]) |= v2;
  }
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3) {
    return sub_188B4F8((uint64_t *)&result->__r_.__value_.__l.__size_, (v3 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

std::string *sub_1113E8C(std::string *result, uint64_t a2)
{
  if ((std::string *)a2 != result)
  {
    uint64_t v3 = result;
    if ((result->__r_.__value_.__s.__data_[16] & 3) != 0)
    {
      result[1].__r_.__value_.__r.__words[0] = 0;
      result[1].__r_.__value_.__l.__size_ = 0;
    }
    std::string::value_type v4 = result->__r_.__value_.__s.__data_[8];
    LODWORD(result->__r_.__value_.__r.__words[2]) = 0;
    if (v4) {
      uint64_t result = (std::string *)sub_188B4AC((uint64_t *)&result->__r_.__value_.__l.__size_);
    }
    int v5 = *(_DWORD *)(a2 + 16);
    if ((v5 & 3) != 0)
    {
      if (v5) {
        v3[1].__r_.__value_.__r.__words[0] = *(void *)(a2 + 24);
      }
      if ((v5 & 2) != 0) {
        v3[1].__r_.__value_.__l.__size_ = *(void *)(a2 + 32);
      }
      LODWORD(v3->__r_.__value_.__r.__words[2]) |= v5;
    }
    uint64_t v6 = *(void *)(a2 + 8);
    if (v6)
    {
      return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
  }
  return result;
}

uint64_t sub_1113F4C()
{
  return 1;
}

double sub_1113F54@<D0>(uint64_t a1@<X8>)
{
  int v2 = (char *)operator new(0x20uLL);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_20B8870;
  strcpy(v2, "maps.path_codec.geo3.UUID");
  return *(double *)"_codec.geo3.UUID";
}

double sub_1113FA8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = a2 | 2;
  if (!a3) {
    uint64_t v3 = a2;
  }
  *(void *)a1 = off_2441A60;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = &qword_2550250;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0x100000000;
  return result;
}

void *sub_1113FF8(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  std::string::value_type v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_5;
    }
  }
  else if (v4)
  {
    goto LABEL_5;
  }
  sub_11140AC((uint64_t)a1);
  uint64_t v2 = *v3;
  if (*v3)
  {
    sub_10E4F74(v3);
    uint64_t v2 = *v3;
  }
LABEL_5:
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    int v5 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v5)
      {
LABEL_8:
        sub_1881618();
        operator delete();
      }
    }
    else if (v5)
    {
      goto LABEL_8;
    }
  }
  return a1;
}

void ***sub_11140AC(uint64_t a1)
{
  uint64_t v3 = *(uint64_t **)(a1 + 24);
  double result = (void ***)(a1 + 24);
  if (v3 != &qword_2550250) {
    sub_1881C6C(result);
  }
  if ((uint64_t (***)())a1 != &off_24F8158)
  {
    std::string::value_type v4 = *(void **)(a1 + 32);
    if (v4)
    {
      uint64_t v5 = v4[1];
      if ((v5 & 1) != 0 && !*(void *)(v5 & 0xFFFFFFFFFFFFFFFCLL))
      {
        sub_10E4F74(v4 + 1);
        uint64_t v5 = v4[1];
      }
      *std::string::value_type v4 = off_24E6998;
      if ((v5 & 2) != 0)
      {
        uint64_t v6 = (void *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
        if (v5)
        {
          if (*v6)
          {
LABEL_9:
            sub_1881618();
            operator delete();
          }
        }
        else if (v6)
        {
          goto LABEL_9;
        }
      }
      operator delete();
    }
    unint64_t v7 = *(void **)(a1 + 40);
    if (v7)
    {
      uint64_t v8 = v7[1];
      if ((v8 & 1) != 0 && !*(void *)(v8 & 0xFFFFFFFFFFFFFFFCLL))
      {
        sub_10E4F74(v7 + 1);
        uint64_t v8 = v7[1];
      }
      *unint64_t v7 = off_24E6998;
      if ((v8 & 2) != 0)
      {
        unint64_t v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
        if (v8)
        {
          if (*v9)
          {
LABEL_16:
            sub_1881618();
            operator delete();
          }
        }
        else if (v9)
        {
          goto LABEL_16;
        }
      }
      operator delete();
    }
  }
  return result;
}

void sub_111425C(void *a1)
{
  sub_1113FF8(a1);

  operator delete();
}

uint64_t sub_1114294(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 7) == 0) {
    goto LABEL_16;
  }
  if (v2)
  {
    unint64_t v3 = *(void *)(result + 24) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      if ((v2 & 2) != 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
    *(unsigned char *)unint64_t v3 = 0;
    *(unsigned char *)(v3 + 23) = 0;
  }
  if ((v2 & 2) != 0)
  {
LABEL_6:
    uint64_t v4 = *(void *)(result + 32);
    if ((*(unsigned char *)(v4 + 16) & 3) != 0) {
      *(void *)(v4 + 24) = 0;
    }
    char v5 = *(unsigned char *)(v4 + 8);
    double result = v4 + 8;
    *(_DWORD *)(result + 8) = 0;
    if (v5) {
      double result = sub_188B4AC((uint64_t *)result);
    }
  }
LABEL_11:
  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *(void *)(v1 + 40);
    if ((*(unsigned char *)(v6 + 16) & 3) != 0)
    {
      *(void *)(v6 + 24) = 0;
      *(void *)(v6 + 32) = 0;
    }
    char v7 = *(unsigned char *)(v6 + 8);
    double result = v6 + 8;
    *(_DWORD *)(result + 8) = 0;
    if (v7) {
      double result = sub_188B4AC((uint64_t *)result);
    }
  }
LABEL_16:
  if ((v2 & 0xF8) != 0)
  {
    *(void *)(v1 + 48) = 0;
    *(void *)(v1 + 56) = 0;
    *(void *)(v1 + 64) = 0;
  }
  if ((v2 & 0xF00) != 0)
  {
    *(void *)(v1 + 72) = 0;
    *(void *)(v1 + 80) = 0x100000000;
  }
  char v9 = *(unsigned char *)(v1 + 8);
  uint64_t v8 = v1 + 8;
  *(_DWORD *)(v8 + 8) = 0;
  if (v9)
  {
    return sub_188B4AC((uint64_t *)v8);
  }
  return result;
}

char *sub_111438C(uint64_t a1, char *a2, int32x2_t *a3)
{
  int v6 = 0;
  char v7 = (uint64_t *)(a1 + 8);
  uint64_t v8 = (void *)(a1 + 24);
  while ((unint64_t)a2 < *(void *)a3)
  {
LABEL_6:
    unint64_t v11 = a2 + 1;
    unsigned int v12 = *a2;
    if (*a2 < 0)
    {
      unsigned int v15 = v12 + (*v11 << 7);
      unsigned int v12 = v15 - 128;
      if (*v11 < 0)
      {
        unint64_t v11 = (char *)sub_188C180((uint64_t)a2, v15 - 128);
        unsigned int v12 = v16;
        unsigned int v13 = (v16 >> 3) - 1;
        if (v13 <= 0xB) {
          goto LABEL_8;
        }
      }
      else
      {
        unint64_t v11 = a2 + 2;
        unsigned int v13 = (v12 >> 3) - 1;
        if (v13 <= 0xB) {
          goto LABEL_8;
        }
      }
LABEL_17:
      if (v12) {
        BOOL v17 = (v12 & 7) == 4;
      }
      else {
        BOOL v17 = 1;
      }
      if (v17)
      {
        if (v11) {
          a3[10].i32[0] = v12 - 1;
        }
        goto LABEL_122;
      }
      if (*v7) {
        uint64_t v18 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
      else {
        uint64_t v18 = (std::string *)sub_188DBD8(v7);
      }
      a2 = (char *)sub_1885AC0(v12, v18, v11, a3);
      if (!a2)
      {
LABEL_123:
        unint64_t v11 = 0;
        goto LABEL_122;
      }
    }
    else
    {
      unsigned int v13 = (v12 >> 3) - 1;
LABEL_8:
      switch(v13)
      {
        case 0u:
          if (v12 != 8) {
            goto LABEL_17;
          }
          a2 = v11 + 1;
          unint64_t v14 = *v11;
          if (*v11 < 0)
          {
            int v32 = v14 + (*a2 << 7);
            unint64_t v14 = (v32 - 128);
            if (*a2 < 0)
            {
              uint64_t v44 = sub_188C138((uint64_t)v11, (v32 - 128));
              if (!v44) {
                goto LABEL_123;
              }
              a2 = (char *)v44;
              unint64_t v14 = v45;
              if ((v45 - 1) <= 1)
              {
LABEL_12:
                *(_DWORD *)(a1 + 16) |= 0x800u;
                *(_DWORD *)(a1 + 84) = v14;
                continue;
              }
            }
            else
            {
              a2 = v11 + 2;
              if ((v32 - 129) <= 1) {
                goto LABEL_12;
              }
            }
          }
          else if ((v14 - 1) <= 1)
          {
            goto LABEL_12;
          }
          if (*v7) {
            std::string::pointer v33 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            std::string::pointer v33 = (std::string *)sub_188DBD8(v7);
          }
          int v34 = 1;
          goto LABEL_95;
        case 1u:
          if (v12 != 18) {
            goto LABEL_17;
          }
          *(_DWORD *)(a1 + 16) |= 2u;
          uint64_t v19 = *(void **)(a1 + 32);
          if (v19)
          {
            int v51 = 0;
            int v20 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)v11, &v51);
            if (!v20) {
              goto LABEL_2;
            }
          }
          else
          {
            int v35 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
            if (*v7) {
              int v35 = (void *)*v35;
            }
            uint64_t v19 = sub_1116F58((uint64_t)v35);
            *(void *)(a1 + 32) = v19;
            int v51 = 0;
            int v20 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)v11, &v51);
            if (!v20)
            {
LABEL_2:
              a2 = 0;
              ++a3[11].i32[0];
              if (a3[10].i32[0]) {
                goto LABEL_123;
              }
              goto LABEL_3;
            }
          }
          a2 = sub_1113398(v19, v20, a3);
          ++a3[11].i32[0];
          if (a3[10].i32[0]) {
            goto LABEL_123;
          }
LABEL_3:
          int v9 = v51;
          goto LABEL_4;
        case 2u:
          if (v12 != 24) {
            goto LABEL_17;
          }
          v6 |= 0x10u;
          a2 = v11 + 1;
          LODWORD(v21) = *v11;
          if ((v21 & 0x80) == 0) {
            goto LABEL_33;
          }
          uint64_t v21 = v21 + (*a2 << 7) - 128;
          if (*a2 < 0)
          {
            a2 = (char *)sub_188C138((uint64_t)v11, v21);
            *(_DWORD *)(a1 + 56) = v38;
            if (!a2) {
              goto LABEL_123;
            }
          }
          else
          {
            a2 = v11 + 2;
LABEL_33:
            *(_DWORD *)(a1 + 56) = v21;
          }
          continue;
        case 3u:
          if (v12 != 33) {
            goto LABEL_17;
          }
          v6 |= 8u;
          *(void *)(a1 + 48) = *(void *)v11;
          a2 = v11 + 8;
          continue;
        case 4u:
          if (v12 != 40) {
            goto LABEL_17;
          }
          v6 |= 0x20u;
          a2 = v11 + 1;
          int v22 = *v11;
          if ((*v11 & 0x80000000) == 0) {
            goto LABEL_40;
          }
          int v22 = v22 + (*a2 << 7) - 128;
          if (*a2 < 0)
          {
            a2 = (char *)sub_188C0D0((uint64_t)v11, v22);
            *(_DWORD *)(a1 + 60) = v39;
            if (!a2) {
              goto LABEL_123;
            }
          }
          else
          {
            a2 = v11 + 2;
LABEL_40:
            *(_DWORD *)(a1 + 60) = v22;
          }
          continue;
        case 5u:
          if (v12 != 48) {
            goto LABEL_17;
          }
          v6 |= 0x40u;
          a2 = v11 + 1;
          int v23 = *v11;
          if ((*v11 & 0x80000000) == 0) {
            goto LABEL_45;
          }
          int v23 = v23 + (*a2 << 7) - 128;
          if (*a2 < 0)
          {
            a2 = (char *)sub_188C0D0((uint64_t)v11, v23);
            *(_DWORD *)(a1 + 64) = v40;
            if (!a2) {
              goto LABEL_123;
            }
          }
          else
          {
            a2 = v11 + 2;
LABEL_45:
            *(_DWORD *)(a1 + 64) = v23;
          }
          continue;
        case 6u:
          if (v12 != 56) {
            goto LABEL_17;
          }
          v6 |= 0x80u;
          a2 = v11 + 1;
          int v24 = *v11;
          if ((*v11 & 0x80000000) == 0) {
            goto LABEL_50;
          }
          int v24 = v24 + (*a2 << 7) - 128;
          if (*a2 < 0)
          {
            a2 = (char *)sub_188C0D0((uint64_t)v11, v24);
            *(_DWORD *)(a1 + 68) = v41;
            if (!a2) {
              goto LABEL_123;
            }
          }
          else
          {
            a2 = v11 + 2;
LABEL_50:
            *(_DWORD *)(a1 + 68) = v24;
          }
          continue;
        case 7u:
          if (v12 != 64) {
            goto LABEL_17;
          }
          v6 |= 0x100u;
          a2 = v11 + 1;
          int v25 = *v11;
          if ((*v11 & 0x80000000) == 0) {
            goto LABEL_55;
          }
          int v25 = v25 + (*a2 << 7) - 128;
          if (*a2 < 0)
          {
            a2 = (char *)sub_188C0D0((uint64_t)v11, v25);
            *(_DWORD *)(a1 + 72) = v42;
            if (!a2) {
              goto LABEL_123;
            }
          }
          else
          {
            a2 = v11 + 2;
LABEL_55:
            *(_DWORD *)(a1 + 72) = v25;
          }
          continue;
        case 8u:
          if (v12 != 72) {
            goto LABEL_17;
          }
          v6 |= 0x200u;
          a2 = v11 + 1;
          uint64_t v26 = *v11;
          if ((*v11 & 0x80000000) == 0) {
            goto LABEL_60;
          }
          uint64_t v26 = v26 + (*a2 << 7) - 128;
          if (*a2 < 0)
          {
            a2 = (char *)sub_188C138((uint64_t)v11, v26);
            *(unsigned char *)(a1 + 76) = v43 != 0;
            if (!a2) {
              goto LABEL_123;
            }
          }
          else
          {
            a2 = v11 + 2;
LABEL_60:
            *(unsigned char *)(a1 + 76) = v26 != 0;
          }
          continue;
        case 9u:
          if (v12 != 82) {
            goto LABEL_17;
          }
          *(_DWORD *)(a1 + 16) |= 4u;
          uint64_t v27 = *(void **)(a1 + 40);
          if (v27)
          {
            int v52 = 0;
            uint64_t v28 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)v11, &v52);
            if (v28) {
              goto LABEL_64;
            }
          }
          else
          {
            int v36 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
            if (*v7) {
              int v36 = (void *)*v36;
            }
            uint64_t v27 = sub_1116FD0((uint64_t)v36);
            *(void *)(a1 + 40) = v27;
            int v52 = 0;
            uint64_t v28 = (char *)sub_188BEE0((uint64_t)a3, (unsigned __int8 *)v11, &v52);
            if (v28)
            {
LABEL_64:
              a2 = sub_1113930((uint64_t)v27, v28, a3);
              ++a3[11].i32[0];
              if (a3[10].i32[0]) {
                goto LABEL_123;
              }
              goto LABEL_89;
            }
          }
          a2 = 0;
          ++a3[11].i32[0];
          if (a3[10].i32[0]) {
            goto LABEL_123;
          }
LABEL_89:
          int v9 = v52;
LABEL_4:
          int v10 = a3[3].i32[1] + v9;
          a3[3].i32[1] = v10;
          *a3 = (int32x2_t)(*(void *)&a3[1] + (v10 & (v10 >> 31)));
          if (!a2) {
            goto LABEL_123;
          }
          continue;
        case 0xAu:
          if (v12 != 90) {
            goto LABEL_17;
          }
          *(_DWORD *)(a1 + 16) |= 1u;
          uint64_t v29 = *(void *)(a1 + 8);
          uint64_t v30 = (uint64_t *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
          if (v29) {
            uint64_t v30 = (uint64_t *)*v30;
          }
          int v31 = (std::string *)sub_1880F84(v8, v30);
          a2 = (char *)sub_188C244(v31, v11, (uint64_t)a3);
          if (!a2) {
            goto LABEL_123;
          }
          continue;
        case 0xBu:
          if (v12 != 96) {
            goto LABEL_17;
          }
          a2 = v11 + 1;
          unint64_t v14 = *v11;
          if (*v11 < 0)
          {
            int v37 = v14 + (*a2 << 7);
            unint64_t v14 = (v37 - 128);
            if (*a2 < 0)
            {
              uint64_t v46 = sub_188C138((uint64_t)v11, (v37 - 128));
              if (!v46) {
                goto LABEL_123;
              }
              a2 = (char *)v46;
              unint64_t v14 = v47;
              if (v47 <= 3)
              {
LABEL_74:
                *(_DWORD *)(a1 + 16) |= 0x400u;
                *(_DWORD *)(a1 + 80) = v14;
                continue;
              }
            }
            else
            {
              a2 = v11 + 2;
              if (v14 <= 3) {
                goto LABEL_74;
              }
            }
          }
          else if (v14 <= 3)
          {
            goto LABEL_74;
          }
          if (*v7) {
            std::string::pointer v33 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            std::string::pointer v33 = (std::string *)sub_188DBD8(v7);
          }
          int v34 = 12;
LABEL_95:
          sub_188C020(v34, v14, v33);
          break;
        default:
          goto LABEL_17;
      }
    }
  }
  int v48 = a2 - a3[1].i32[0];
  if (a3[3].i32[1] != v48)
  {
    a2 = sub_188BB90((uint64_t)a3, v48, a3[11].i32[1]);
    if (v49) {
      goto LABEL_128;
    }
    goto LABEL_6;
  }
  if (v48 < 1)
  {
LABEL_128:
    unint64_t v11 = a2;
    goto LABEL_122;
  }
  if (a3[2]) {
    unint64_t v11 = a2;
  }
  else {
    unint64_t v11 = 0;
  }
LABEL_122:
  *(_DWORD *)(a1 + 16) |= v6;
  return v11;
}

unsigned char *sub_1114AE8(uint64_t a1, unsigned char *__dst, _DWORD *a3)
{
  uint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 0x800) != 0)
  {
    if (*(void *)a3 <= (unint64_t)__dst)
    {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)__dst);
      unint64_t v7 = *(int *)(a1 + 84);
      *uint64_t v4 = 8;
      v4[1] = v7;
      if (v7 <= 0x7F) {
        goto LABEL_4;
      }
    }
    else
    {
      unint64_t v7 = *(int *)(a1 + 84);
      *long long __dst = 8;
      __dst[1] = v7;
      if (v7 <= 0x7F)
      {
LABEL_4:
        v4 += 2;
        goto LABEL_8;
      }
    }
    v4[1] = v7 | 0x80;
    unint64_t v8 = v7 >> 7;
    _OWORD v4[2] = v7 >> 7;
    v4 += 3;
    if (v7 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unint64_t v9 = v8 >> 14;
        v8 >>= 7;
        *v4++ = v8;
      }
      while (v9);
    }
  }
LABEL_8:
  if ((v6 & 2) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v10 = *(void *)(a1 + 32);
    *uint64_t v4 = 18;
    unsigned int v11 = *(_DWORD *)(v10 + 20);
    v4[1] = v11;
    if (v11 > 0x7F) {
      unsigned int v12 = sub_188A9CC(v11, v4 + 1);
    }
    else {
      unsigned int v12 = v4 + 2;
    }
    uint64_t v4 = sub_111354C(v10, (unint64_t)v12, a3);
  }
  if ((v6 & 0x10) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      unint64_t v13 = *(int *)(a1 + 56);
      *uint64_t v4 = 24;
      v4[1] = v13;
      if (v13 <= 0x7F) {
        goto LABEL_18;
      }
    }
    else
    {
      unint64_t v13 = *(int *)(a1 + 56);
      *uint64_t v4 = 24;
      v4[1] = v13;
      if (v13 <= 0x7F)
      {
LABEL_18:
        v4 += 2;
        goto LABEL_22;
      }
    }
    v4[1] = v13 | 0x80;
    unint64_t v14 = v13 >> 7;
    _OWORD v4[2] = v13 >> 7;
    v4 += 3;
    if (v13 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unint64_t v15 = v14 >> 14;
        v14 >>= 7;
        *v4++ = v14;
      }
      while (v15);
    }
  }
LABEL_22:
  if ((v6 & 8) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v16 = *(void *)(a1 + 48);
    *uint64_t v4 = 33;
    *(void *)(v4 + 1) = v16;
    v4 += 9;
  }
  if ((v6 & 0x20) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      unsigned int v17 = *(_DWORD *)(a1 + 60);
      *uint64_t v4 = 40;
      v4[1] = v17;
      if (v17 <= 0x7F) {
        goto LABEL_29;
      }
    }
    else
    {
      unsigned int v17 = *(_DWORD *)(a1 + 60);
      *uint64_t v4 = 40;
      v4[1] = v17;
      if (v17 <= 0x7F)
      {
LABEL_29:
        v4 += 2;
        goto LABEL_33;
      }
    }
    v4[1] = v17 | 0x80;
    unsigned int v18 = v17 >> 7;
    _OWORD v4[2] = v17 >> 7;
    v4 += 3;
    if (v17 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unsigned int v19 = v18 >> 14;
        v18 >>= 7;
        *v4++ = v18;
      }
      while (v19);
    }
  }
LABEL_33:
  if ((v6 & 0x40) == 0) {
    goto LABEL_40;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unsigned int v20 = *(_DWORD *)(a1 + 64);
    *uint64_t v4 = 48;
    v4[1] = v20;
    if (v20 <= 0x7F) {
      goto LABEL_36;
    }
  }
  else
  {
    unsigned int v20 = *(_DWORD *)(a1 + 64);
    *uint64_t v4 = 48;
    v4[1] = v20;
    if (v20 <= 0x7F)
    {
LABEL_36:
      v4 += 2;
      goto LABEL_40;
    }
  }
  v4[1] = v20 | 0x80;
  unsigned int v21 = v20 >> 7;
  _OWORD v4[2] = v20 >> 7;
  v4 += 3;
  if (v20 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unsigned int v22 = v21 >> 14;
      v21 >>= 7;
      *v4++ = v21;
    }
    while (v22);
  }
LABEL_40:
  if ((v6 & 0x80) == 0) {
    goto LABEL_47;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unsigned int v23 = *(_DWORD *)(a1 + 68);
    *uint64_t v4 = 56;
    v4[1] = v23;
    if (v23 <= 0x7F) {
      goto LABEL_43;
    }
  }
  else
  {
    unsigned int v23 = *(_DWORD *)(a1 + 68);
    *uint64_t v4 = 56;
    v4[1] = v23;
    if (v23 <= 0x7F)
    {
LABEL_43:
      v4 += 2;
      goto LABEL_47;
    }
  }
  v4[1] = v23 | 0x80;
  unsigned int v24 = v23 >> 7;
  _OWORD v4[2] = v23 >> 7;
  v4 += 3;
  if (v23 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unsigned int v25 = v24 >> 14;
      v24 >>= 7;
      *v4++ = v24;
    }
    while (v25);
  }
LABEL_47:
  if ((v6 & 0x100) == 0) {
    goto LABEL_54;
  }
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unsigned int v26 = *(_DWORD *)(a1 + 72);
    *uint64_t v4 = 64;
    v4[1] = v26;
    if (v26 <= 0x7F) {
      goto LABEL_50;
    }
  }
  else
  {
    unsigned int v26 = *(_DWORD *)(a1 + 72);
    *uint64_t v4 = 64;
    v4[1] = v26;
    if (v26 <= 0x7F)
    {
LABEL_50:
      v4 += 2;
      goto LABEL_54;
    }
  }
  v4[1] = v26 | 0x80;
  unsigned int v27 = v26 >> 7;
  _OWORD v4[2] = v26 >> 7;
  v4 += 3;
  if (v26 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unsigned int v28 = v27 >> 14;
      v27 >>= 7;
      *v4++ = v27;
    }
    while (v28);
  }
LABEL_54:
  if ((v6 & 0x200) == 0)
  {
    if ((v6 & 4) == 0) {
      goto LABEL_56;
    }
LABEL_62:
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v30 = *(void *)(a1 + 40);
    *uint64_t v4 = 82;
    unsigned int v31 = *(_DWORD *)(v30 + 20);
    v4[1] = v31;
    if (v31 > 0x7F)
    {
      int v32 = sub_188A9CC(v31, v4 + 1);
      uint64_t v4 = sub_1113B68(v30, v32, a3);
      if (v6) {
        goto LABEL_68;
      }
    }
    else
    {
      uint64_t v4 = sub_1113B68(v30, v4 + 2, a3);
      if (v6) {
        goto LABEL_68;
      }
    }
LABEL_57:
    if ((v6 & 0x400) == 0) {
      goto LABEL_84;
    }
    goto LABEL_76;
  }
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  char v29 = *(unsigned char *)(a1 + 76);
  *uint64_t v4 = 72;
  v4[1] = v29;
  v4 += 2;
  if ((v6 & 4) != 0) {
    goto LABEL_62;
  }
LABEL_56:
  if ((v6 & 1) == 0) {
    goto LABEL_57;
  }
LABEL_68:
  unint64_t v33 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v33 + 23) < 0)
  {
    int64_t v34 = *(void *)(v33 + 8);
    if (v34 > 127) {
      goto LABEL_79;
    }
  }
  else
  {
    int64_t v34 = *(unsigned __int8 *)(v33 + 23);
  }
  if (*(void *)a3 - (void)v4 + 14 < v34)
  {
LABEL_79:
    uint64_t v4 = sub_188A6CC(a3, 11, (void **)v33, v4);
    if ((v6 & 0x400) == 0) {
      goto LABEL_84;
    }
    goto LABEL_76;
  }
  *uint64_t v4 = 90;
  v4[1] = v34;
  if (*(char *)(v33 + 23) >= 0) {
    int v35 = (const void *)v33;
  }
  else {
    int v35 = *(const void **)v33;
  }
  memcpy(v4 + 2, v35, v34);
  v4 += v34 + 2;
  if ((v6 & 0x400) == 0) {
    goto LABEL_84;
  }
LABEL_76:
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    unint64_t v36 = *(int *)(a1 + 80);
    *uint64_t v4 = 96;
    v4[1] = v36;
    if (v36 <= 0x7F) {
      goto LABEL_78;
    }
  }
  else
  {
    unint64_t v36 = *(int *)(a1 + 80);
    *uint64_t v4 = 96;
    v4[1] = v36;
    if (v36 <= 0x7F)
    {
LABEL_78:
      v4 += 2;
      goto LABEL_84;
    }
  }
  v4[1] = v36 | 0x80;
  unint64_t v37 = v36 >> 7;
  _OWORD v4[2] = v36 >> 7;
  v4 += 3;
  if (v36 >= 0x4000)
  {
    do
    {
      *(v4 - 1) |= 0x80u;
      unint64_t v38 = v37 >> 14;
      v37 >>= 7;
      *v4++ = v37;
    }
    while (v38);
  }
LABEL_84:
  uint64_t v39 = *(void *)(a1 + 8);
  if ((v39 & 1) == 0) {
    return v4;
  }
  unint64_t v41 = v39 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v41 + 31) < 0)
  {
    int v42 = *(char **)(v41 + 8);
    uint64_t v43 = *(void *)(v41 + 16);
  }
  else
  {
    int v42 = (char *)(v41 + 8);
    LODWORD(v43) = *(unsigned __int8 *)(v41 + 31);
  }
  uint64_t v44 = (int)v43;
  if (*(void *)a3 - (void)v4 < (int)v43)
  {
    return (unsigned char *)sub_188A528(a3, v42, v43, v4);
  }
  else
  {
    memcpy(v4, v42, (int)v43);
    return &v4[v44];
  }
}

uint64_t sub_1115188(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if (!(_BYTE)v1)
  {
    uint64_t v2 = 0;
    if ((v1 & 0xF00) == 0) {
      goto LABEL_55;
    }
LABEL_46:
    if ((v1 & 0x100) != 0)
    {
      v2 += ((9 * (__clz(*(_DWORD *)(a1 + 72) | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v1 & 0x200) != 0) {
        v2 += 2;
      }
      if ((v1 & 0x400) == 0)
      {
LABEL_50:
        if ((v1 & 0x800) == 0) {
          goto LABEL_55;
        }
LABEL_51:
        int v16 = *(_DWORD *)(a1 + 84);
        uint64_t v17 = ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
        if (v16 >= 0) {
          uint64_t v18 = v17;
        }
        else {
          uint64_t v18 = 11;
        }
        v2 += v18;
        goto LABEL_55;
      }
    }
    else
    {
      if ((v1 & 0x200) != 0) {
        v2 += 2;
      }
      if ((v1 & 0x400) == 0) {
        goto LABEL_50;
      }
    }
    int v21 = *(_DWORD *)(a1 + 80);
    uint64_t v22 = ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if (v21 >= 0) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 11;
    }
    v2 += v23;
    if ((v1 & 0x800) == 0) {
      goto LABEL_55;
    }
    goto LABEL_51;
  }
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 2) == 0) {
      goto LABEL_19;
    }
    goto LABEL_10;
  }
  unint64_t v3 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v4 = *(unsigned __int8 *)(v3 + 23);
  uint64_t v5 = *(void *)(v3 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = v4;
  }
  uint64_t v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_10:
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = *(_DWORD *)(v6 + 16);
    if ((~v7 & 3) != 0)
    {
      uint64_t v9 = 5;
      if ((v7 & 1) == 0) {
        uint64_t v9 = 0;
      }
      if ((v7 & 2) != 0) {
        uint64_t v8 = v9 + 5;
      }
      else {
        uint64_t v8 = v9;
      }
    }
    else
    {
      uint64_t v8 = 10;
    }
    uint64_t v10 = *(void *)(v6 + 8);
    if (v10)
    {
      unint64_t v26 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      if (*(char *)(v26 + 31) < 0) {
        uint64_t v27 = *(void *)(v26 + 16);
      }
      else {
        uint64_t v27 = *(unsigned __int8 *)(v26 + 31);
      }
      v8 += v27;
    }
    *(_DWORD *)(v6 + 20) = v8;
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_19:
  if ((v1 & 4) == 0)
  {
    if ((v1 & 8) != 0) {
      v2 += 9;
    }
    if ((v1 & 0x10) == 0) {
      goto LABEL_23;
    }
LABEL_39:
    int v15 = *(_DWORD *)(a1 + 56);
    if (v15 < 0)
    {
      v2 += 11;
      if ((v1 & 0x20) != 0) {
        goto LABEL_43;
      }
    }
    else
    {
      v2 += ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v1 & 0x20) != 0) {
        goto LABEL_43;
      }
    }
LABEL_24:
    if ((v1 & 0x40) == 0) {
      goto LABEL_25;
    }
    goto LABEL_44;
  }
  uint64_t v11 = *(void *)(a1 + 40);
  int v12 = *(_DWORD *)(v11 + 16);
  if ((v12 & 3) == 0)
  {
    unint64_t v13 = 0;
    goto LABEL_35;
  }
  if (v12)
  {
    unint64_t v13 = ((9 * (__clz(*(void *)(v11 + 24) | 1) ^ 0x3F) + 73) >> 6) + 1;
    if ((v12 & 2) == 0) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  unint64_t v13 = 0;
  if ((v12 & 2) != 0) {
LABEL_34:
  }
    v13 += ((9 * (__clz(*(void *)(v11 + 32) | 1) ^ 0x3F) + 73) >> 6) + 1;
LABEL_35:
  uint64_t v14 = *(void *)(v11 + 8);
  if (v14)
  {
    unint64_t v28 = v14 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v28 + 31) < 0) {
      uint64_t v29 = *(void *)(v28 + 16);
    }
    else {
      uint64_t v29 = *(unsigned __int8 *)(v28 + 31);
    }
    v13 += v29;
  }
  *(_DWORD *)(v11 + 20) = v13;
  v2 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 8) != 0) {
    v2 += 9;
  }
  if ((v1 & 0x10) != 0) {
    goto LABEL_39;
  }
LABEL_23:
  if ((v1 & 0x20) == 0) {
    goto LABEL_24;
  }
LABEL_43:
  v2 += ((9 * (__clz(*(_DWORD *)(a1 + 60) | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 0x40) == 0)
  {
LABEL_25:
    if ((v1 & 0x80) == 0) {
      goto LABEL_26;
    }
    goto LABEL_45;
  }
LABEL_44:
  v2 += ((9 * (__clz(*(_DWORD *)(a1 + 64) | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 0x80) != 0)
  {
LABEL_45:
    v2 += ((9 * (__clz(*(_DWORD *)(a1 + 68) | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v1 & 0xF00) == 0) {
      goto LABEL_55;
    }
    goto LABEL_46;
  }
LABEL_26:
  if ((v1 & 0xF00) != 0) {
    goto LABEL_46;
  }
LABEL_55:
  uint64_t v19 = *(void *)(a1 + 8);
  if (v19)
  {
    unint64_t v24 = v19 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v24 + 31) < 0) {
      uint64_t v25 = *(void *)(v24 + 16) + v2;
    }
    else {
      uint64_t v25 = *(unsigned __int8 *)(v24 + 31) + v2;
    }
    *(_DWORD *)(a1 + 20) = v25;
    return v25;
  }
  else
  {
    *(_DWORD *)(a1 + 20) = v2;
    return v2;
  }
}

std::string *sub_1115528(std::string *result, uint64_t a2)
{
  unint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 16);
  if ((_BYTE)v4)
  {
    if (v4)
    {
      uint64_t v5 = (long long *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
      LODWORD(result->__r_.__value_.__r.__words[2]) |= 1u;
      uint64_t v6 = (std::string **)&result[1];
      std::string::size_type size = v3->__r_.__value_.__l.__size_;
      uint64_t v8 = (uint64_t *)(size & 0xFFFFFFFFFFFFFFFCLL);
      if (size) {
        uint64_t v8 = (uint64_t *)*v8;
      }
      double result = sub_1881DF4(v6, v5, v8);
    }
    if ((v4 & 2) != 0)
    {
      LODWORD(v3->__r_.__value_.__r.__words[2]) |= 2u;
      double result = (std::string *)v3[1].__r_.__value_.__l.__size_;
      if (!result)
      {
        std::string::size_type v9 = v3->__r_.__value_.__l.__size_;
        uint64_t v10 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
        if (v9) {
          uint64_t v10 = (void *)*v10;
        }
        double result = (std::string *)sub_1116F58((uint64_t)v10);
        v3[1].__r_.__value_.__l.__size_ = (std::string::size_type)result;
      }
      uint64_t v11 = *(uint64_t (****)())(a2 + 32);
      if (!v11) {
        uint64_t v11 = &off_24F8110;
      }
      int v12 = *((_DWORD *)v11 + 4);
      if ((v12 & 3) != 0)
      {
        if (v12) {
          LODWORD(result[1].__r_.__value_.__l.__data_) = *((_DWORD *)v11 + 6);
        }
        if ((v12 & 2) != 0) {
          HIDWORD(result[1].__r_.__value_.__r.__words[0]) = *((_DWORD *)v11 + 7);
        }
        LODWORD(result->__r_.__value_.__r.__words[2]) |= v12;
      }
      unint64_t v13 = (unint64_t)v11[1];
      if (v13) {
        double result = sub_188B4F8((uint64_t *)&result->__r_.__value_.__l.__size_, (v13 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
    }
    if ((v4 & 4) != 0)
    {
      LODWORD(v3->__r_.__value_.__r.__words[2]) |= 4u;
      double result = (std::string *)v3[1].__r_.__value_.__r.__words[2];
      if (!result)
      {
        std::string::size_type v14 = v3->__r_.__value_.__l.__size_;
        int v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
        if (v14) {
          int v15 = (void *)*v15;
        }
        double result = (std::string *)sub_1116FD0((uint64_t)v15);
        v3[1].__r_.__value_.__r.__words[2] = (std::string::size_type)result;
      }
      int v16 = *(uint64_t (****)())(a2 + 40);
      if (!v16) {
        int v16 = &off_24F8130;
      }
      int v17 = *((_DWORD *)v16 + 4);
      if ((v17 & 3) != 0)
      {
        if (v17) {
          result[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v16[3];
        }
        if ((v17 & 2) != 0) {
          result[1].__r_.__value_.__l.__size_ = (std::string::size_type)v16[4];
        }
        LODWORD(result->__r_.__value_.__r.__words[2]) |= v17;
      }
      unint64_t v18 = (unint64_t)v16[1];
      if (v18) {
        double result = sub_188B4F8((uint64_t *)&result->__r_.__value_.__l.__size_, (v18 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
    }
    if ((v4 & 8) != 0)
    {
      v3[2].__r_.__value_.__r.__words[0] = *(void *)(a2 + 48);
      if ((v4 & 0x10) == 0)
      {
LABEL_38:
        if ((v4 & 0x20) == 0) {
          goto LABEL_39;
        }
        goto LABEL_56;
      }
    }
    else if ((v4 & 0x10) == 0)
    {
      goto LABEL_38;
    }
    LODWORD(v3[2].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 56);
    if ((v4 & 0x20) == 0)
    {
LABEL_39:
      if ((v4 & 0x40) == 0) {
        goto LABEL_40;
      }
      goto LABEL_57;
    }
LABEL_56:
    HIDWORD(v3[2].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 60);
    if ((v4 & 0x40) == 0)
    {
LABEL_40:
      if ((v4 & 0x80) == 0)
      {
LABEL_42:
        LODWORD(v3->__r_.__value_.__r.__words[2]) |= v4;
        goto LABEL_43;
      }
LABEL_41:
      HIDWORD(v3[2].__r_.__value_.__r.__words[2]) = *(_DWORD *)(a2 + 68);
      goto LABEL_42;
    }
LABEL_57:
    LODWORD(v3[2].__r_.__value_.__r.__words[2]) = *(_DWORD *)(a2 + 64);
    if ((v4 & 0x80) == 0) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
LABEL_43:
  if ((v4 & 0xF00) == 0) {
    goto LABEL_50;
  }
  if ((v4 & 0x100) != 0)
  {
    LODWORD(v3[3].__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 72);
    if ((v4 & 0x200) == 0)
    {
LABEL_46:
      if ((v4 & 0x400) == 0) {
        goto LABEL_47;
      }
LABEL_61:
      LODWORD(v3[3].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 80);
      if ((v4 & 0x800) == 0) {
        goto LABEL_49;
      }
      goto LABEL_48;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_46;
  }
  v3[3].__r_.__value_.__s.__data_[4] = *(unsigned char *)(a2 + 76);
  if ((v4 & 0x400) != 0) {
    goto LABEL_61;
  }
LABEL_47:
  if ((v4 & 0x800) != 0) {
LABEL_48:
  }
    HIDWORD(v3[3].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 84);
LABEL_49:
  LODWORD(v3->__r_.__value_.__r.__words[2]) |= v4;
LABEL_50:
  uint64_t v19 = *(void *)(a2 + 8);
  if (v19)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v19 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

std::string *sub_1115798(std::string *result, uint64_t a2)
{
  if ((std::string *)a2 != result)
  {
    int v4 = result;
    sub_1114294((uint64_t)result);
    return sub_1115528(v4, a2);
  }
  return result;
}

BOOL sub_11157E4(uint64_t a1)
{
  return (*(unsigned char *)(a1 + 16) & 2) == 0 || (~*(_DWORD *)(*(void *)(a1 + 32) + 16) & 3) == 0;
}

__n128 sub_1115810(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v2;
  LODWORD(v2) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a2 + 32) = v4;
  *(void *)(a2 + 40) = v5;
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a2 + 48) = v6;
  *(void *)(a2 + 56) = v7;
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 72);
  __n128 result = *(__n128 *)(a2 + 64);
  *(__n128 *)(a1 + 64) = result;
  *(void *)(a2 + 64) = v8;
  *(void *)(a2 + 72) = v9;
  LODWORD(v8) = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = v8;
  LODWORD(v8) = *(_DWORD *)(a1 + 84);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a2 + 84) = v8;
  return result;
}

char *sub_1115894@<X0>(uint64_t a1@<X8>)
{
  __n128 result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_20B9240;
  strcpy(result, "maps.path_codec.geo3.RoutingPathPoint");
  return result;
}

void *sub_11158E8(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }
  return a1;
}

void sub_1115988(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    sub_10E4F74(a1 + 1);
    uint64_t v2 = *v3;
  }
  *a1 = off_24E6998;
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (v2)
    {
      if (*v4)
      {
LABEL_5:
        sub_1881618();
        operator delete();
      }
    }
    else if (v4)
    {
      goto LABEL_5;
    }
  }

  operator delete();
}

uint64_t sub_1115A48(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_1115A60(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v6 = (uint64_t *)(a1 + 8);
  while (1)
  {
    while (1)
    {
      if ((unint64_t)a2 >= *(void *)a3)
      {
        int v13 = a2 - a3[1].i32[0];
        if (a3[3].i32[1] == v13)
        {
          if (v13 >= 1 && !*(void *)&a3[2]) {
            return 0;
          }
          return a2;
        }
        a2 = sub_188BB90((uint64_t)a3, v13, a3[11].i32[1]);
        if (v14) {
          return a2;
        }
      }
      uint64_t v7 = a2 + 1;
      unsigned int v8 = *a2;
      if (*a2 < 0) {
        break;
      }
LABEL_6:
      if (v8 != 8) {
        goto LABEL_7;
      }
LABEL_15:
      a2 = v7 + 1;
      unint64_t v12 = *v7;
      if (*v7 < 0)
      {
        unint64_t v12 = v12 + (*a2 << 7) - 128;
        if (*a2 < 0)
        {
          a2 = (char *)sub_188C138((uint64_t)v7, v12);
          if (!a2) {
            return a2;
          }
        }
        else
        {
          a2 = v7 + 2;
        }
      }
      if (v12 > 2)
      {
        if (*v6)
        {
          int v15 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
        }
        else
        {
          unint64_t v17 = v12;
          uint64_t v18 = sub_188DBD8(v6);
          unint64_t v12 = v17;
          int v15 = (std::string *)v18;
        }
        sub_188C020(1, v12, v15);
      }
      else
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 24) = v12;
      }
    }
    unsigned int v9 = v8 + (*v7 << 7);
    unsigned int v8 = v9 - 128;
    if ((*v7 & 0x80000000) == 0)
    {
      uint64_t v7 = a2 + 2;
      goto LABEL_6;
    }
    uint64_t v7 = (char *)sub_188C180((uint64_t)a2, v9 - 128);
    unsigned int v8 = v11;
    if (v11 == 8) {
      goto LABEL_15;
    }
LABEL_7:
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    if (*v6)
    {
      a2 = (char *)sub_1885AC0(v8, (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8), v7, a3);
      if (!a2) {
        return a2;
      }
    }
    else
    {
      int v16 = (std::string *)sub_188DBD8(v6);
      a2 = (char *)sub_1885AC0(v8, v16, v7, a3);
      if (!a2) {
        return a2;
      }
    }
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return v7;
  }
  return 0;
}

_OWORD *sub_1115C6C(uint64_t a1, unsigned char *__dst, _DWORD *a3)
{
  uint64_t v4 = __dst;
  if (*(unsigned char *)(a1 + 16))
  {
    if (*(void *)a3 <= (unint64_t)__dst)
    {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)__dst);
      unint64_t v6 = *(int *)(a1 + 24);
      *(unsigned char *)uint64_t v4 = 8;
      *((unsigned char *)v4 + 1) = v6;
      if (v6 <= 0x7F) {
        goto LABEL_4;
      }
    }
    else
    {
      unint64_t v6 = *(int *)(a1 + 24);
      *long long __dst = 8;
      __dst[1] = v6;
      if (v6 <= 0x7F)
      {
LABEL_4:
        uint64_t v4 = (_OWORD *)((char *)v4 + 2);
        goto LABEL_8;
      }
    }
    *((unsigned char *)v4 + 1) = v6 | 0x80;
    unint64_t v7 = v6 >> 7;
    *((unsigned char *)v4 + 2) = v6 >> 7;
    uint64_t v4 = (_OWORD *)((char *)v4 + 3);
    if (v6 >= 0x4000)
    {
      do
      {
        *((unsigned char *)v4 - 1) |= 0x80u;
        unint64_t v8 = v7 >> 14;
        v7 >>= 7;
        *(unsigned char *)uint64_t v4 = v7;
        uint64_t v4 = (_OWORD *)((char *)v4 + 1);
      }
      while (v8);
    }
  }
LABEL_8:
  uint64_t v9 = *(void *)(a1 + 8);
  if ((v9 & 1) == 0) {
    return v4;
  }
  unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v11 + 31) < 0)
  {
    unint64_t v12 = *(char **)(v11 + 8);
    uint64_t v13 = *(void *)(v11 + 16);
  }
  else
  {
    unint64_t v12 = (char *)(v11 + 8);
    LODWORD(v13) = *(unsigned __int8 *)(v11 + 31);
  }
  uint64_t v14 = (int)v13;
  if (*(void *)a3 - (void)v4 < (int)v13)
  {
    return (_OWORD *)sub_188A528(a3, v12, v13, v4);
  }
  else
  {
    memcpy(v4, v12, (int)v13);
    return (_OWORD *)((char *)v4 + v14);
  }
}

uint64_t sub_1115DB8(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 1) == 0)
  {
    uint64_t v1 = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2) {
      goto LABEL_8;
    }
LABEL_6:
    *(_DWORD *)(a1 + 20) = v1;
    return v1;
  }
  int v3 = *(_DWORD *)(a1 + 24);
  if (v3 < 0)
  {
    uint64_t v1 = 11;
    uint64_t v2 = *(void *)(a1 + 8);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v1 = ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    uint64_t v2 = *(void *)(a1 + 8);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
  }
LABEL_8:
  unint64_t v5 = v2 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v5 + 31) < 0) {
    uint64_t v6 = *(void *)(v5 + 16) + v1;
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 31) + v1;
  }
  *(_DWORD *)(a1 + 20) = v6;
  return v6;
}

std::string *sub_1115E48(std::string *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16))
  {
    int v2 = *(_DWORD *)(a2 + 24);
    LODWORD(result->__r_.__value_.__r.__words[2]) |= 1u;
    LODWORD(result[1].__r_.__value_.__l.__data_) = v2;
  }
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3) {
    return sub_188B4F8((uint64_t *)&result->__r_.__value_.__l.__size_, (v3 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_1115E80()
{
  return 1;
}

double sub_1115E88@<D0>(uint64_t a1@<X8>)
{
  int v2 = (char *)operator new(0x30uLL);
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_20E1380;
  strcpy(v2, "maps.path_codec.geo3.RoutingPathLeg.MetaData");
  return *(double *)"PathLeg.MetaData";
}

void *sub_1115EDC(void *a1)
{
  int v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    uint64_t v4 = (void **)(v2 + 2);
    uint64_t v5 = *v2;
    if ((int)v5 >= 1)
    {
      do
      {
        if (*v4)
        {
          sub_1113FF8(*v4);
          operator delete();
        }
        ++v4;
        --v5;
      }
      while (v5);
      int v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
    a1[2] = 0;
    return a1;
  }
  else
  {
    a1[2] = 0;
    return a1;
  }
}

void *sub_1115F80(void *result, uint64_t a2, int a3)
{
  uint64_t v3 = a2 | 2;
  if (!a3) {
    uint64_t v3 = a2;
  }
  *uint64_t result = off_2441B60;
  result[1] = v3;
  result[2] = 0;
  result[3] = a2;
  result[4] = 0;
  result[5] = 0;
  result[6] = &qword_2550250;
  result[7] = 0;
  return result;
}

uint64_t sub_1115FC4(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)a1 = off_2441B60;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v5 = (uint64_t *)(a1 + 24);
  *(_DWORD *)(a1 + 44) = 0;
  *(void *)(a1 + 28) = 0;
  *(void *)(a1 + 36) = 0;
  *(void *)(a1 + 20) = 0;
  int v6 = *(_DWORD *)(a2 + 32);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 40);
    unint64_t v8 = (std::string **)sub_188CCE4(a1 + 24, *(_DWORD *)(a2 + 32));
    sub_111741C(v5, v8, (uint64_t *)(v7 + 8), v6, **(_DWORD **)(a1 + 40) - *(_DWORD *)(a1 + 32));
    int v9 = *(_DWORD *)(a1 + 32) + v6;
    *(_DWORD *)(a1 + 32) = v9;
    uint64_t v10 = *(int **)(a1 + 40);
    if (*v10 < v9) {
      *uint64_t v10 = v9;
    }
  }
  uint64_t v11 = *(void *)(a2 + 8);
  if (v11) {
    sub_188B4F8(v4, (v11 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  *(void *)(a1 + 48) = &qword_2550250;
  int v12 = *(_DWORD *)(a2 + 16);
  if (v12)
  {
    uint64_t v13 = (uint64_t *)(*v4 & 0xFFFFFFFFFFFFFFFCLL);
    if (*v4) {
      uint64_t v13 = (uint64_t *)*v13;
    }
    sub_1881DF4((std::string **)(a1 + 48), (long long *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL), v13);
    int v12 = *(_DWORD *)(a2 + 16);
  }
  if ((v12 & 2) != 0) {
    operator new();
  }
  *(void *)(a1 + 56) = 0;
  return a1;
}

void sub_1116160()
{
  *uint64_t v0 = off_24E6998;
  uint64_t v1 = v0[1];
  if ((v1 & 2) != 0) {
    sub_20B1F88(v1);
  }
  operator delete();
}

void sub_11161BC(_Unwind_Exception *a1)
{
  sub_10E01E0(v1);
  _Unwind_Resume(a1);
}

void sub_11161D0(_Unwind_Exception *a1)
{
  sub_1115EDC(v2);
  sub_10E01E0(v1);
  _Unwind_Resume(a1);
}

void *sub_11161F0(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_5;
    }
  }
  else if (v4)
  {
    goto LABEL_5;
  }
  sub_1116348((uint64_t)a1);
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_5:
  uint64_t v5 = (unsigned int *)a1[5];
  if (v5 && !a1[3])
  {
    unint64_t v8 = (void **)(v5 + 2);
    uint64_t v9 = *v5;
    if ((int)v9 >= 1)
    {
      do
      {
        if (*v8)
        {
          sub_1113FF8(*v8);
          operator delete();
        }
        ++v8;
        --v9;
      }
      while (v9);
      uint64_t v5 = (unsigned int *)a1[5];
    }
    operator delete(v5);
    a1[5] = 0;
    *a1 = off_24E6998;
    uint64_t v6 = a1[1];
    if ((v6 & 2) == 0) {
      return a1;
    }
  }
  else
  {
    a1[5] = 0;
    *a1 = off_24E6998;
    uint64_t v6 = a1[1];
    if ((v6 & 2) == 0) {
      return a1;
    }
  }
  uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
  if (v6)
  {
    if (*v7)
    {
LABEL_10:
      sub_1881618();
      operator delete();
    }
  }
  else if (v7)
  {
    goto LABEL_10;
  }
  return a1;
}

void ***sub_1116348(uint64_t a1)
{
  uint64_t v3 = *(uint64_t **)(a1 + 48);
  uint64_t result = (void ***)(a1 + 48);
  if (v3 != &qword_2550250) {
    sub_1881C6C(result);
  }
  if ((uint64_t (***)())a1 != &off_24F81D0)
  {
    uint64_t v4 = *(void **)(a1 + 56);
    if (v4)
    {
      uint64_t v5 = v4[1];
      if ((v5 & 1) != 0 && !*(void *)(v5 & 0xFFFFFFFFFFFFFFFCLL))
      {
        sub_10E4F74(v4 + 1);
        uint64_t v5 = v4[1];
      }
      *uint64_t v4 = off_24E6998;
      if ((v5 & 2) != 0)
      {
        uint64_t v6 = (void *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
        if (v5)
        {
          if (*v6)
          {
LABEL_9:
            sub_1881618();
            operator delete();
          }
        }
        else if (v6)
        {
          goto LABEL_9;
        }
      }
      operator delete();
    }
  }
  return result;
}

void sub_111645C(void *a1)
{
  sub_11161F0(a1);

  operator delete();
}

uint64_t sub_1116494(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 32);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(result + 40) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_1114294(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 32) = 0;
  }
  int v5 = *(_DWORD *)(v1 + 16);
  if ((v5 & 3) != 0)
  {
    if (v5)
    {
      unint64_t v6 = *(void *)(v1 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v6 + 23) < 0)
      {
        **(unsigned char **)unint64_t v6 = 0;
        *(void *)(v6 + 8) = 0;
        if ((v5 & 2) == 0) {
          goto LABEL_13;
        }
        goto LABEL_10;
      }
      *(unsigned char *)unint64_t v6 = 0;
      *(unsigned char *)(v6 + 23) = 0;
    }
    if ((v5 & 2) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v7 = *(void *)(v1 + 56);
    char v8 = *(unsigned char *)(v7 + 8);
    uint64_t result = v7 + 8;
    *(_DWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 8) = 0;
    if (v8) {
      uint64_t result = sub_188B4AC((uint64_t *)result);
    }
  }
LABEL_13:
  char v10 = *(unsigned char *)(v1 + 8);
  uint64_t v9 = v1 + 8;
  *(_DWORD *)(v9 + 8) = 0;
  if (v10)
  {
    return sub_188B4AC((uint64_t *)v9);
  }
  return result;
}

unsigned __int8 *sub_111656C(uint64_t a1, unsigned __int8 *a2, int32x2_t *a3)
{
  unint64_t v6 = (uint64_t *)(a1 + 8);
  uint64_t v7 = (void *)(a1 + 48);
  char v8 = (uint64_t *)(a1 + 24);
  while (1)
  {
    while (1)
    {
      while (1)
      {
LABEL_4:
        if ((unint64_t)a2 >= *(void *)a3)
        {
          int v30 = a2 - a3[1].i32[0];
          if (a3[3].i32[1] == v30)
          {
            if (v30 >= 1 && !*(void *)&a3[2]) {
              return 0;
            }
            return a2;
          }
          a2 = (unsigned __int8 *)sub_188BB90((uint64_t)a3, v30, a3[11].i32[1]);
          if (v31) {
            return a2;
          }
        }
        char v10 = a2 + 1;
        unsigned int v11 = *a2;
        if ((char)*a2 < 0) {
          break;
        }
        unsigned int v12 = v11 >> 3;
        if (v11 >> 3 != 3) {
          goto LABEL_7;
        }
LABEL_20:
        if (v11 != 26) {
          goto LABEL_12;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v16 = *(void *)(a1 + 56);
        if (v16)
        {
          int v34 = 0;
          unint64_t v17 = (char *)sub_188BEE0((uint64_t)a3, v10, &v34);
          if (!v17) {
            goto LABEL_2;
          }
        }
        else
        {
          uint64_t v29 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v29 = (void *)*v29;
          }
          uint64_t v16 = sub_11170E4((uint64_t)v29);
          *(void *)(a1 + 56) = v16;
          int v34 = 0;
          unint64_t v17 = (char *)sub_188BEE0((uint64_t)a3, v10, &v34);
          if (!v17)
          {
LABEL_2:
            a2 = 0;
            ++a3[11].i32[0];
            if (a3[10].i32[0]) {
              return 0;
            }
            goto LABEL_3;
          }
        }
        a2 = (unsigned __int8 *)sub_1115A60(v16, v17, a3);
        ++a3[11].i32[0];
        if (a3[10].i32[0]) {
          return 0;
        }
LABEL_3:
        int v9 = a3[3].i32[1] + v34;
        a3[3].i32[1] = v9;
        *a3 = (int32x2_t)(*(void *)&a3[1] + (v9 & (v9 >> 31)));
        if (!a2) {
          return a2;
        }
      }
      unsigned int v15 = v11 + (*v10 << 7);
      unsigned int v11 = v15 - 128;
      if ((char)*v10 < 0)
      {
        char v10 = (unsigned __int8 *)sub_188C180((uint64_t)a2, v15 - 128);
        unsigned int v11 = v28;
        unsigned int v12 = v28 >> 3;
        if (v28 >> 3 == 3) {
          goto LABEL_20;
        }
      }
      else
      {
        char v10 = a2 + 2;
        unsigned int v12 = v11 >> 3;
        if (v11 >> 3 == 3) {
          goto LABEL_20;
        }
      }
LABEL_7:
      if (v12 != 2) {
        break;
      }
      if (v11 != 18) {
        goto LABEL_12;
      }
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v18 = *(void *)(a1 + 8);
      uint64_t v19 = (uint64_t *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
      if (v18) {
        uint64_t v19 = (uint64_t *)*v19;
      }
      unsigned int v20 = (std::string *)sub_1880F84(v7, v19);
      a2 = (unsigned __int8 *)sub_188C244(v20, (char *)v10, (uint64_t)a3);
      if (!a2) {
        return a2;
      }
    }
    if (v12 == 1 && v11 == 10)
    {
      a2 = v10 - 1;
      while (1)
      {
        int v21 = *(_DWORD **)(a1 + 40);
        if (v21 && (uint64_t v22 = *(int *)(a1 + 32), (int)v22 < *v21))
        {
          *(_DWORD *)(a1 + 32) = v22 + 1;
          uint64_t v23 = *(void *)&v21[2 * v22 + 2];
          int v33 = 0;
          unint64_t v24 = (char *)sub_188BEE0((uint64_t)a3, a2 + 1, &v33);
          if (v24) {
            goto LABEL_36;
          }
        }
        else
        {
          sub_111704C(*v8);
          uint64_t v23 = sub_188CDC8((uint64_t)v8, v25);
          int v33 = 0;
          unint64_t v24 = (char *)sub_188BEE0((uint64_t)a3, a2 + 1, &v33);
          if (v24)
          {
LABEL_36:
            a2 = (unsigned __int8 *)sub_111438C(v23, v24, a3);
            ++a3[11].i32[0];
            if (a3[10].i32[0]) {
              return 0;
            }
            goto LABEL_37;
          }
        }
        a2 = 0;
        ++a3[11].i32[0];
        if (a3[10].i32[0]) {
          return 0;
        }
LABEL_37:
        int v26 = a3[3].i32[1] + v33;
        a3[3].i32[1] = v26;
        int32x2_t v27 = (int32x2_t)(*(void *)&a3[1] + (v26 & (v26 >> 31)));
        *a3 = v27;
        if (!a2) {
          return a2;
        }
        if (*(void *)&v27 <= (unint64_t)a2 || *a2 != 10) {
          goto LABEL_4;
        }
      }
    }
LABEL_12:
    if (!v11 || (v11 & 7) == 4) {
      break;
    }
    if (*v6) {
      uint64_t v14 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else {
      uint64_t v14 = (std::string *)sub_188DBD8(v6);
    }
    a2 = sub_1885AC0(v11, v14, (char *)v10, a3);
    if (!a2) {
      return a2;
    }
  }
  if (!v10) {
    return 0;
  }
  a3[10].i32[0] = v11 - 1;
  return v10;
}

char *sub_1116914(uint64_t a1, char *__dst, _DWORD *a3)
{
  int v6 = *(_DWORD *)(a1 + 32);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
    {
      if (*(void *)a3 <= (unint64_t)__dst) {
        long long __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      }
      uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8 * i + 8);
      *long long __dst = 10;
      unsigned int v10 = *(_DWORD *)(v9 + 20);
      __dst[1] = v10;
      if (v10 > 0x7F) {
        char v8 = sub_188A9CC(v10, __dst + 1);
      }
      else {
        char v8 = __dst + 2;
      }
      long long __dst = sub_1114AE8(v9, v8, a3);
    }
  }
  int v11 = *(_DWORD *)(a1 + 16);
  if ((v11 & 1) == 0)
  {
    if ((v11 & 2) == 0) {
      goto LABEL_11;
    }
LABEL_21:
    if (*(void *)a3 <= (unint64_t)__dst) {
      long long __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
    }
    uint64_t v16 = *(void *)(a1 + 56);
    *long long __dst = 26;
    unsigned int v17 = *(_DWORD *)(v16 + 20);
    __dst[1] = v17;
    if (v17 > 0x7F) {
      uint64_t v18 = sub_188A9CC(v17, __dst + 1);
    }
    else {
      uint64_t v18 = __dst + 2;
    }
    long long __dst = (char *)sub_1115C6C(v16, v18, a3);
    uint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & 1) == 0) {
      return __dst;
    }
    goto LABEL_28;
  }
  unint64_t v13 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v13 + 23) < 0)
  {
    int64_t v14 = *(void *)(v13 + 8);
    if (v14 > 127) {
      goto LABEL_30;
    }
  }
  else
  {
    int64_t v14 = *(unsigned __int8 *)(v13 + 23);
  }
  if (*(void *)a3 - (void)__dst + 14 < v14)
  {
LABEL_30:
    long long __dst = sub_188A6CC(a3, 2, (void **)v13, __dst);
    if ((v11 & 2) != 0) {
      goto LABEL_21;
    }
    goto LABEL_11;
  }
  *long long __dst = 18;
  __dst[1] = v14;
  if (*(char *)(v13 + 23) >= 0) {
    unsigned int v15 = (const void *)v13;
  }
  else {
    unsigned int v15 = *(const void **)v13;
  }
  memcpy(__dst + 2, v15, v14);
  __dst += v14 + 2;
  if ((v11 & 2) != 0) {
    goto LABEL_21;
  }
LABEL_11:
  uint64_t v12 = *(void *)(a1 + 8);
  if ((v12 & 1) == 0) {
    return __dst;
  }
LABEL_28:
  unint64_t v20 = v12 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v20 + 31) < 0)
  {
    int v21 = *(void **)(v20 + 8);
    uint64_t v22 = *(void *)(v20 + 16);
  }
  else
  {
    int v21 = (void *)(v20 + 8);
    LODWORD(v22) = *(unsigned __int8 *)(v20 + 31);
  }
  uint64_t v23 = (int)v22;
  if (*(void *)a3 - (void)__dst >= (int)v22)
  {
    memcpy(__dst, v21, (int)v22);
    __dst += v23;
    return __dst;
  }

  return (char *)sub_188A528(a3, (char *)v21, v22, __dst);
}

uint64_t sub_1116B58(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = (uint64_t *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = sub_1115188(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
    int v8 = *(_DWORD *)(a1 + 16);
    if ((v8 & 3) == 0) {
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v2 = 0;
    int v8 = *(_DWORD *)(a1 + 16);
    if ((v8 & 3) == 0) {
      goto LABEL_23;
    }
  }
  if (v8)
  {
    unint64_t v9 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
    uint64_t v11 = *(void *)(v9 + 8);
    if ((v10 & 0x80u) == 0) {
      uint64_t v11 = v10;
    }
    v2 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  if ((v8 & 2) != 0)
  {
    uint64_t v12 = *(void *)(a1 + 56);
    if (*(unsigned char *)(v12 + 16))
    {
      int v15 = *(_DWORD *)(v12 + 24);
      if (v15 < 0)
      {
        uint64_t v13 = 11;
        uint64_t v14 = *(void *)(v12 + 8);
        if (v14)
        {
LABEL_29:
          unint64_t v21 = v14 & 0xFFFFFFFFFFFFFFFCLL;
          if (*(char *)(v21 + 31) < 0) {
            uint64_t v22 = *(void *)(v21 + 16);
          }
          else {
            uint64_t v22 = *(unsigned __int8 *)(v21 + 31);
          }
          v13 += v22;
        }
      }
      else
      {
        uint64_t v13 = ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
        uint64_t v14 = *(void *)(v12 + 8);
        if (v14) {
          goto LABEL_29;
        }
      }
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = *(void *)(v12 + 8);
      if (v14) {
        goto LABEL_29;
      }
    }
    *(_DWORD *)(v12 + 20) = v13;
    v2 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_23:
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16)
  {
    unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v18 + 31) < 0) {
      uint64_t v19 = *(void *)(v18 + 16);
    }
    else {
      uint64_t v19 = *(unsigned __int8 *)(v18 + 31);
    }
    uint64_t v20 = v19 + v2;
    *(_DWORD *)(a1 + 20) = v20;
    return v20;
  }
  else
  {
    *(_DWORD *)(a1 + 20) = v2;
    return v2;
  }
}

void sub_1116D1C(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 40) + 8);
    uint64_t v6 = (std::string **)sub_188CCE4(a1 + 24, *(_DWORD *)(a2 + 32));
    sub_111741C((uint64_t *)(a1 + 24), v6, v5, v4, **(_DWORD **)(a1 + 40) - *(_DWORD *)(a1 + 32));
    int v7 = *(_DWORD *)(a1 + 32) + v4;
    *(_DWORD *)(a1 + 32) = v7;
    int v8 = *(int **)(a1 + 40);
    if (*v8 < v7) {
      *int v8 = v7;
    }
  }
  int v9 = *(_DWORD *)(a2 + 16);
  if ((v9 & 3) != 0)
  {
    if (v9)
    {
      uint64_t v10 = (long long *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v11 = *(void *)(a1 + 8);
      uint64_t v12 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      if (v11) {
        uint64_t v12 = (uint64_t *)*v12;
      }
      sub_1881DF4((std::string **)(a1 + 48), v10, v12);
    }
    if ((v9 & 2) != 0)
    {
      *(_DWORD *)(a1 + 16) |= 2u;
      uint64_t v13 = *(void *)(a1 + 56);
      if (!v13)
      {
        uint64_t v14 = *(void *)(a1 + 8);
        int v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
        if (v14) {
          int v15 = (void *)*v15;
        }
        uint64_t v13 = sub_11170E4((uint64_t)v15);
        *(void *)(a1 + 56) = v13;
      }
      uint64_t v16 = *(uint64_t (****)())(a2 + 56);
      if (!v16) {
        uint64_t v16 = &off_24F81B0;
      }
      if ((_BYTE)v16[2])
      {
        int v17 = *((_DWORD *)v16 + 6);
        *(_DWORD *)(v13 + 16) |= 1u;
        *(_DWORD *)(v13 + 24) = v17;
      }
      unint64_t v18 = (unint64_t)v16[1];
      if (v18) {
        sub_188B4F8((uint64_t *)(v13 + 8), (v18 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
    }
  }
  uint64_t v19 = *(void *)(a2 + 8);
  if (v19)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v19 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

uint64_t sub_1116EA8(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 32);
  if ((int)v1 < 1) {
    return 1;
  }
  uint64_t v2 = v1 - 1;
  while (1)
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8 * v2 + 8);
    if ((*(unsigned char *)(v3 + 16) & 2) != 0 && (~*(_DWORD *)(*(void *)(v3 + 32) + 16) & 3) != 0) {
      break;
    }
    if ((unint64_t)--v2 >= 0xFFFFFFFFFFFFFFFELL) {
      return 1;
    }
  }
  return 0;
}

char *sub_1116F00@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_20B93A0;
  strcpy(result, "maps.path_codec.geo3.RoutingPathLeg");
  return result;
}

void *sub_1116F58(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = off_2441960;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void *sub_1116FD0(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = off_24419E0;
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

double sub_111704C(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(v2 + 8) = a1;
  *(void *)uint64_t v2 = off_2441A60;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = &qword_2550250;
  double result = 0.0;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(void *)(v2 + 80) = 0x100000000;
  return result;
}

uint64_t sub_11170E4(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = off_2441AE0;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void *sub_1117160(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *uint64_t result = off_2441B60;
  result[1] = a1;
  result[2] = 0;
  result[3] = a1;
  result[4] = 0;
  result[5] = 0;
  result[6] = &qword_2550250;
  result[7] = 0;
  return result;
}

void sub_1117218()
{
}

void *sub_1117264(uint64_t a1, uint64_t a2)
{
  return sub_1116F58(a2);
}

uint64_t sub_111726C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_1117274()
{
}

void *sub_11172C4(uint64_t a1, uint64_t a2)
{
  return sub_1116FD0(a2);
}

uint64_t sub_11172CC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_11172D4()
{
}

double sub_1117340(uint64_t a1, uint64_t a2)
{
  return sub_111704C(a2);
}

uint64_t sub_1117348(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_1117350()
{
}

uint64_t sub_11173A0(uint64_t a1, uint64_t a2)
{
  return sub_11170E4(a2);
}

uint64_t sub_11173A8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_11173B0()
{
}

void *sub_111740C(uint64_t a1, uint64_t a2)
{
  return sub_1117160(a2);
}

uint64_t sub_1117414(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_111741C(uint64_t *a1, std::string **a2, uint64_t *a3, int a4, int a5)
{
  LODWORD(v5) = a4;
  int v7 = a2;
  int v8 = a4 - a5;
  if (a4 > a5)
  {
    uint64_t v9 = *a1;
    uint64_t v10 = &a2[a5];
    do
    {
      sub_111704C(v9);
      *v10++ = v11;
      --v8;
    }
    while (v8);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v13 = *a3++;
      uint64_t v12 = v13;
      uint64_t v14 = *v7++;
      sub_1117498(v12, v14);
      --v5;
    }
    while (v5);
  }
}

std::string *sub_1117498(uint64_t a1, std::string *a2)
{
  return sub_1115528(a2, a1);
}

unint64_t sub_11174BC(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFFFFCLL;
}

double *sub_11174C8(double *a1, void *a2)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 1) = 0u;
  *(_OWORD *)(a1 + 7) = 0u;
  int v221 = (uint64_t *)(a1 + 7);
  *(_OWORD *)(a1 + 13) = 0u;
  uint64_t v222 = a1 + 13;
  *(_OWORD *)(a1 + 17) = 0u;
  unsigned int v219 = a1 + 17;
  uint64_t v3 = a1 + 10;
  *(_OWORD *)(a1 + 3) = 0u;
  *(_OWORD *)(a1 + 5) = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  *(_OWORD *)(a1 + 11) = 0u;
  *(_OWORD *)(a1 + 15) = 0u;
  *(_OWORD *)(a1 + 19) = 0u;
  *(_OWORD *)(a1 + 21) = 0u;
  *(_OWORD *)(a1 + 23) = 0u;
  a1[25] = 0.0;
  uint64_t v4 = a2[1] - *a2;
  long long __p = 0;
  uint64_t v228 = 0;
  v229 = 0;
  uint64_t v220 = a1 + 10;
  if ((unint64_t)v4 < 0x10) {
    goto LABEL_215;
  }
  if (v4 < 0) {
    sub_2E00();
  }
  unint64_t v218 = v4;
  uint64_t v216 = v4 >> 3;
  unint64_t v5 = (unint64_t)(v4 >> 3) >> 1;
  uint64_t v6 = (char *)operator new(8 * v5);
  int v7 = v6;
  uint64_t v8 = 0;
  uint64_t v9 = &v6[8 * v5];
  long long __p = v6;
  uint64_t v228 = v6;
  v229 = v9;
  unint64_t v217 = v5;
  if (v5 <= 1) {
    unint64_t v5 = 1;
  }
  float64x2_t v10 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  float64x2_t v11 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  uint64_t v12 = v6;
  do
  {
    float64x2_t v13 = *(float64x2_t *)(**(void **)a1 + 16 * v8);
    if (v7 < v9)
    {
      *(void *)int v7 = v8;
      v7 += 8;
      goto LABEL_7;
    }
    uint64_t v14 = (v7 - v12) >> 3;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
    {
      uint64_t v228 = v7;
      sub_2E00();
    }
    if ((v9 - v12) >> 2 > v15) {
      unint64_t v15 = (v9 - v12) >> 2;
    }
    if ((unint64_t)(v9 - v12) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    float64x2_t v224 = v11;
    float64x2_t v225 = v10;
    float64x2_t v223 = *(float64x2_t *)(**(void **)a1 + 16 * v8);
    if (v16)
    {
      if (v16 >> 61)
      {
        uint64_t v228 = v7;
        sub_188D718();
      }
      int v17 = operator new(8 * v16);
      float64x2_t v11 = v224;
      float64x2_t v10 = v225;
      float64x2_t v13 = v223;
      unint64_t v18 = &v17[8 * v14];
      *unint64_t v18 = v8;
      uint64_t v19 = (uint64_t)(v18 + 1);
      if (v7 == v12)
      {
LABEL_25:
        uint64_t v3 = v220;
        uint64_t v9 = &v17[8 * v16];
        long long __p = v18;
        v229 = v9;
        if (!v12) {
          goto LABEL_23;
        }
LABEL_22:
        operator delete(v12);
        float64x2_t v13 = v223;
        float64x2_t v11 = v224;
        float64x2_t v10 = v225;
        goto LABEL_23;
      }
    }
    else
    {
      int v17 = 0;
      unint64_t v18 = (void *)(8 * v14);
      *(void *)(8 * v14) = v8;
      uint64_t v19 = 8 * v14 + 8;
      if (v7 == v12) {
        goto LABEL_25;
      }
    }
    unint64_t v20 = v7 - 8 - v12;
    if (v20 < 0x168
      || &v17[v7 - v12 - 8 - (v20 & 0xFFFFFFFFFFFFFFF8)] > &v17[v7 - v12 - 8]
      || &v7[-(v20 & 0xFFFFFFFFFFFFFFF8) - 8] > v7 - 8
      || (unint64_t)(v12 - v17) < 0x20)
    {
      unint64_t v21 = v7;
      uint64_t v3 = v220;
      do
      {
LABEL_20:
        uint64_t v22 = *((void *)v21 - 1);
        v21 -= 8;
        *--unint64_t v18 = v22;
      }
      while (v21 != v12);
      goto LABEL_21;
    }
    uint64_t v23 = (v20 >> 3) + 1;
    uint64_t v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v21 = &v7[-v24];
    unint64_t v18 = (void *)((char *)v18 - v24);
    uint64_t v25 = &v17[8 * v14 - 16];
    int v26 = v7 - 16;
    uint64_t v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    uint64_t v3 = v220;
    do
    {
      long long v28 = *(_OWORD *)v26;
      *(v25 - 1) = *((_OWORD *)v26 - 1);
      *uint64_t v25 = v28;
      v25 -= 2;
      v26 -= 32;
      v27 -= 4;
    }
    while (v27);
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_20;
    }
LABEL_21:
    uint64_t v9 = &v17[8 * v16];
    long long __p = v18;
    v229 = v9;
    if (v12) {
      goto LABEL_22;
    }
LABEL_23:
    uint64_t v12 = (char *)v18;
    int v7 = (char *)v19;
LABEL_7:
    float64x2_t v11 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v11, v13), (int8x16_t)v13, (int8x16_t)v11);
    float64x2_t v10 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v13, v10), (int8x16_t)v13, (int8x16_t)v10);
    ++v8;
  }
  while (v8 != v5);
  uint64_t v29 = 0;
  uint64_t v228 = v7;
  double v30 = *a1;
  uint64_t v31 = **(void **)a1;
  __asm { FMOV            V1.2D, #0.5 }
  float64x2_t v33 = vmulq_f64(vaddq_f64(v11, v10), _Q1);
  uint64_t v34 = -1;
  double v35 = 1.79769313e308;
  do
  {
    float64x2_t v36 = vsubq_f64(v33, *(float64x2_t *)(v31 + 16 * v29));
    double v37 = vaddvq_f64(vmulq_f64(v36, v36));
    if (v37 < v35)
    {
      double v35 = v37;
      uint64_t v34 = v29;
    }
    ++v29;
  }
  while (v5 != v29);
  uint64_t v38 = 0;
  uint64_t v39 = (double *)(v31 + 16 * v34);
  double v40 = *v39;
  double v41 = v39[1];
  int v42 = (double *)(v31 + 8);
  uint64_t v43 = -1;
  double v44 = 1.79769313e308;
  do
  {
    if (v34 != v38)
    {
      double v45 = (v40 - *(v42 - 1)) * (v40 - *(v42 - 1)) + (v41 - *v42) * (v41 - *v42);
      if (v45 < v44 && v45 > 0.0)
      {
        uint64_t v43 = v38;
        double v44 = (v40 - *(v42 - 1)) * (v40 - *(v42 - 1)) + (v41 - *v42) * (v41 - *v42);
      }
    }
    ++v38;
    v42 += 2;
  }
  while (v5 != v38);
  uint64_t v46 = 0;
  unint64_t v47 = (double *)(v31 + 16 * v43);
  double v48 = *v47;
  double v49 = v47[1];
  double v50 = *v47 - v40;
  double v51 = v49 - v41;
  double v52 = v50 * v50 + v51 * v51;
  uint64_t v53 = (double *)(v31 + 8);
  uint64_t v54 = -1;
  double v55 = 1.79769313e308;
  do
  {
    if (v34 != v46 && v43 != v46)
    {
      double v56 = *(v53 - 1) - v40;
      double v57 = *v53 - v41;
      double v58 = v56 * v56 + v57 * v57;
      BOOL v59 = v58 <= 0.0 || v52 <= 0.0;
      double v60 = v50 * v57 - v51 * v56;
      double v61 = (v52 * v57 - v51 * v58) * 0.5 / v60;
      double v62 = (v50 * v58 - v52 * v56) * 0.5 / v60;
      _VF = v59 || v60 == 0.0;
      double v65 = v61 * v61 + v62 * v62;
      if (_VF) {
        double v65 = 1.79769313e308;
      }
      if (v65 < v55)
      {
        uint64_t v54 = v46;
        double v55 = v65;
      }
    }
    ++v46;
    v53 += 2;
  }
  while (v5 != v46);
  if (v55 >= 1.79769313e308)
  {
LABEL_215:
    exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "not triangulation");
  }
  uint64_t v66 = __p;
  unint64_t v67 = 126 - 2 * __clz((v7 - (unsigned char *)__p) >> 3);
  uint64_t v68 = (double *)(v31 + 16 * v54);
  double v69 = *v68;
  double v70 = v68[1];
  double v71 = v51 * (*v68 - v48) - v50 * (v70 - v49);
  if (v7 == __p) {
    uint64_t v72 = 0;
  }
  else {
    uint64_t v72 = v67;
  }
  _NF = v71 < 0.0;
  if (v71 >= 0.0) {
    double v74 = v70 - v41;
  }
  else {
    double v74 = v49 - v41;
  }
  if (_NF) {
    double v75 = v50;
  }
  else {
    double v75 = *v68 - v40;
  }
  if (_NF)
  {
    double v51 = v70 - v41;
    double v50 = *v68 - v40;
    double v76 = v49;
  }
  else
  {
    double v76 = v68[1];
  }
  if (_NF) {
    double v77 = v68[1];
  }
  else {
    double v77 = v49;
  }
  double v78 = v51 * v51 + v50 * v50;
  double v79 = v75 * v75 + v74 * v74;
  double v80 = v74 * v50 - v75 * v51;
  if (_NF) {
    double v81 = v48;
  }
  else {
    double v81 = *v68;
  }
  double v82 = v40 + (v74 * v78 - v51 * v79) * 0.5 / v80;
  double v83 = v41 + (v50 * v79 - v75 * v78) * 0.5 / v80;
  a1[20] = v82;
  a1[21] = v83;
  v226[0] = v30;
  if (_NF) {
    double v84 = v69;
  }
  else {
    double v84 = v48;
  }
  if (_NF) {
    uint64_t v85 = v43;
  }
  else {
    uint64_t v85 = v54;
  }
  if (_NF) {
    uint64_t v86 = v54;
  }
  else {
    uint64_t v86 = v43;
  }
  v226[1] = v82;
  v226[2] = v83;
  sub_1119054((uint64_t)v66, (uint64_t *)v7, v226, v72, 1);
  unint64_t v87 = llround(ceil(sqrt((double)v217)));
  *((void *)a1 + 22) = v87;
  unsigned int v88 = (char *)*((void *)a1 + 17);
  unsigned int v89 = (char *)*((void *)a1 + 18);
  unint64_t v90 = (v89 - v88) >> 3;
  if (v87 <= v90)
  {
    if (v87 < v90)
    {
      unsigned int v89 = &v88[8 * v87];
      *((void *)a1 + 18) = v89;
    }
  }
  else
  {
    sub_111A9FC((uint64_t)v219, v87 - v90);
    unsigned int v88 = (char *)*((void *)a1 + 17);
    unsigned int v89 = (char *)*((void *)a1 + 18);
  }
  uint64_t v91 = v89 - v88;
  if (v91 >= 1) {
    memset(v88, 255, 8 * (((unint64_t)v91 >> 3) - ((unint64_t)v91 > 7)) + 8);
  }
  unsigned int v92 = (void *)*((void *)a1 + 7);
  unint64_t v93 = (uint64_t)(*((void *)a1 + 8) - (void)v92) >> 3;
  if (v217 <= v93)
  {
    if (v217 < v93) {
      *((void *)a1 + 8) = &v92[v217];
    }
  }
  else
  {
    sub_111A9FC((uint64_t)v221, v217 - v93);
  }
  int v94 = (void *)*((void *)a1 + 10);
  unint64_t v95 = (uint64_t)(*((void *)a1 + 11) - (void)v94) >> 3;
  if (v217 <= v95)
  {
    if (v217 < v95) {
      *((void *)a1 + 11) = &v94[v217];
    }
  }
  else
  {
    sub_111A9FC((uint64_t)v3, v217 - v95);
  }
  int v96 = (void *)*((void *)a1 + 13);
  unint64_t v97 = (uint64_t)(*((void *)a1 + 14) - (void)v96) >> 3;
  if (v217 <= v97)
  {
    if (v217 < v97) {
      *((void *)a1 + 14) = &v96[v217];
    }
  }
  else
  {
    sub_111A9FC((uint64_t)v222, v217 - v97);
    int v96 = (void *)*v222;
  }
  *((void *)a1 + 16) = v34;
  unint64_t v98 = (void *)*((void *)a1 + 7);
  uint64_t v99 = v85;
  v98[v99] = v86;
  unint64_t v100 = (void *)*((void *)a1 + 10);
  uint64_t v101 = v34;
  v100[v101] = v86;
  v98[v101] = v85;
  uint64_t v102 = v86;
  v100[v102] = v85;
  v98[v102] = v34;
  v100[v99] = v34;
  v96[v101] = 0;
  v96[v102] = 1;
  v96[v99] = 2;
  double v103 = a1[20];
  double v104 = a1[21];
  double v105 = (v40 - v103) / (vabdd_f64(v40, v103) + vabdd_f64(v41, v104));
  double v106 = 3.0 - v105;
  double v107 = v105 + 1.0;
  if (v41 - v104 <= 0.0) {
    double v108 = v107;
  }
  else {
    double v108 = v106;
  }
  unint64_t v109 = *((void *)a1 + 22);
  unint64_t v110 = llround(floor(v108 * 0.25 * (double)v109));
  _CF = v110 >= v109;
  unint64_t v111 = v110 % v109;
  if (_CF) {
    unint64_t v110 = v111;
  }
  unsigned int v112 = (void *)*((void *)a1 + 17);
  v112[v110] = v34;
  double v113 = (v84 - v103) / (vabdd_f64(v84, v103) + vabdd_f64(v77, v104));
  double v114 = 3.0 - v113;
  double v115 = v113 + 1.0;
  if (v77 - v104 > 0.0) {
    double v115 = v114;
  }
  unint64_t v116 = *((void *)a1 + 22);
  unint64_t v117 = llround(floor(v115 * 0.25 * (double)v116));
  if (v117 >= v116) {
    v117 %= v116;
  }
  v112[v117] = v86;
  double v118 = v76 - v104;
  double v119 = (v81 - v103) / (vabdd_f64(v81, v103) + vabdd_f64(v76, v104));
  double v120 = 3.0 - v119;
  double v121 = v119 + 1.0;
  if (v118 > 0.0) {
    double v121 = v120;
  }
  unint64_t v122 = *((void *)a1 + 22);
  unint64_t v123 = llround(floor(v121 * 0.25 * (double)v122));
  if (v123 >= v122) {
    v123 %= v122;
  }
  v112[v123] = v85;
  if (v218 >= 0x30) {
    unint64_t v124 = 3 * (v216 & 0xFFFFFFFFFFFFFFFELL) - 15;
  }
  else {
    unint64_t v124 = 3;
  }
  int v125 = (unsigned char *)*((void *)a1 + 1);
  if (v124 <= (uint64_t)(*((void *)a1 + 3) - (void)v125) >> 3) {
    goto LABEL_136;
  }
  if (v124 >> 61) {
    goto LABEL_217;
  }
  int v126 = (char *)*((void *)a1 + 2);
  int v127 = (char *)operator new(8 * v124);
  uint64_t v128 = v126 - v125;
  double v129 = &v127[(v126 - v125) & 0xFFFFFFFFFFFFFFF8];
  uint64_t v130 = v129;
  if (v126 != v125)
  {
    if ((unint64_t)(v128 - 8) < 0x58)
    {
      uint64_t v130 = &v127[(v126 - v125) & 0xFFFFFFFFFFFFFFF8];
      goto LABEL_133;
    }
    uint64_t v130 = &v127[(v126 - v125) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v126[-(v128 & 0xFFFFFFFFFFFFFFF8)] - v127) < 0x20) {
      goto LABEL_220;
    }
    uint64_t v131 = v128 >> 3;
    unint64_t v132 = ((unint64_t)(v128 - 8) >> 3) + 1;
    uint64_t v133 = 8 * (v132 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v134 = &v126[-v133];
    uint64_t v130 = &v129[-v133];
    int v135 = &v127[8 * v131 - 16];
    unsigned int v136 = v126 - 16;
    uint64_t v137 = v132 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v138 = *(_OWORD *)v136;
      *((_OWORD *)v135 - 1) = *((_OWORD *)v136 - 1);
      *(_OWORD *)int v135 = v138;
      v135 -= 32;
      v136 -= 32;
      v137 -= 4;
    }
    while (v137);
    int v126 = v134;
    if (v132 != (v132 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_220:
      do
      {
LABEL_133:
        uint64_t v139 = *((void *)v126 - 1);
        v126 -= 8;
        *((void *)v130 - 1) = v139;
        v130 -= 8;
      }
      while (v126 != v125);
    }
  }
  *((void *)a1 + 1) = v130;
  *((void *)a1 + 2) = v129;
  *((void *)a1 + 3) = &v127[8 * v124];
  if (v125) {
    operator delete(v125);
  }
LABEL_136:
  int v140 = (unsigned char *)*((void *)a1 + 4);
  if (v124 <= (uint64_t)(*((void *)a1 + 6) - (void)v140) >> 3) {
    goto LABEL_148;
  }
  if (v124 >> 61) {
LABEL_217:
  }
    sub_2E00();
  uint64_t v141 = (char *)*((void *)a1 + 5);
  uint64_t v142 = (char *)operator new(8 * v124);
  uint64_t v143 = v141 - v140;
  uint64_t v144 = &v142[(v141 - v140) & 0xFFFFFFFFFFFFFFF8];
  v145 = v144;
  if (v141 != v140)
  {
    if ((unint64_t)(v143 - 8) < 0x58)
    {
      v145 = &v142[(v141 - v140) & 0xFFFFFFFFFFFFFFF8];
      goto LABEL_145;
    }
    v145 = &v142[(v141 - v140) & 0xFFFFFFFFFFFFFFF8];
    if (v141 - v142 - (v143 & 0xFFFFFFFFFFFFFFF8) < 0x20) {
      goto LABEL_221;
    }
    uint64_t v146 = v143 >> 3;
    unint64_t v147 = ((unint64_t)(v143 - 8) >> 3) + 1;
    uint64_t v148 = 8 * (v147 & 0x3FFFFFFFFFFFFFFCLL);
    v149 = &v141[-v148];
    v145 = &v144[-v148];
    uint64_t v150 = &v142[8 * v146 - 16];
    v151 = v141 - 16;
    uint64_t v152 = v147 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v153 = *(_OWORD *)v151;
      *((_OWORD *)v150 - 1) = *((_OWORD *)v151 - 1);
      *(_OWORD *)uint64_t v150 = v153;
      v150 -= 32;
      v151 -= 32;
      v152 -= 4;
    }
    while (v152);
    uint64_t v141 = v149;
    if (v147 != (v147 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_221:
      do
      {
LABEL_145:
        uint64_t v154 = *((void *)v141 - 1);
        v141 -= 8;
        *((void *)v145 - 1) = v154;
        v145 -= 8;
      }
      while (v141 != v140);
    }
  }
  *((void *)a1 + 4) = v145;
  *((void *)a1 + 5) = v144;
  *((void *)a1 + 6) = &v142[8 * v124];
  if (v140) {
    operator delete(v140);
  }
LABEL_148:
  sub_1118498(a1, v34, v86, v85, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v155 = 0;
  uint64_t v156 = **(void **)a1;
  double v157 = NAN;
  double v158 = 3.0;
  double v159 = NAN;
  while (2)
  {
    uint64_t v160 = *((void *)__p + v155);
    uint64_t v161 = (double *)(v156 + 16 * v160);
    double v163 = *v161;
    double v162 = v161[1];
    if (v155)
    {
      double v164 = vabdd_f64(v162, v157);
      if (vabdd_f64(v163, v159) <= 2.22044605e-16 && v164 <= 2.22044605e-16)
      {
        double v163 = v159;
        double v162 = v157;
        goto LABEL_149;
      }
    }
    double v166 = vabdd_f64(v162, v41);
    if (vabdd_f64(v163, v40) > 2.22044605e-16 || v166 > 2.22044605e-16)
    {
      double v168 = vabdd_f64(v162, v77);
      if (vabdd_f64(v163, v84) > 2.22044605e-16 || v168 > 2.22044605e-16)
      {
        double v170 = vabdd_f64(v162, v76);
        if (vabdd_f64(v163, v81) > 2.22044605e-16 || v170 > 2.22044605e-16)
        {
          double v172 = a1[21];
          double v173 = v162 - v172;
          double v174 = (v163 - a1[20]) / (vabdd_f64(v163, a1[20]) + vabdd_f64(v162, v172));
          double v175 = v158 - v174;
          double v176 = v174 + 1.0;
          if (v173 > 0.0) {
            double v176 = v175;
          }
          unint64_t v177 = *((void *)a1 + 22);
          unint64_t v178 = llround(floor(v176 * 0.25 * (double)v177));
          if (v178 >= v177)
          {
            if (!v177)
            {
              uint64_t v181 = 0;
LABEL_188:
              uint64_t v183 = *(void *)(*v221 + 8 * v181);
              uint64_t j = v183;
              while (1)
              {
                uint64_t v185 = *(void *)(*v3 + 8 * j);
                if ((*(double *)(v156 + 16 * j + 8) - v162)
                   * (*(double *)(v156 + 16 * v185) - *(double *)(v156 + 16 * j))
                   - (*(double *)(v156 + 16 * j) - v163)
                   * (*(double *)(v156 + 16 * v185 + 8) - *(double *)(v156 + 16 * j + 8)) < 0.0)
                  break;
                uint64_t j = *(void *)(*v3 + 8 * j);
                if (v185 == v183) {
                  goto LABEL_149;
                }
              }
              if (j != -1)
              {
                unint64_t v186 = sub_1118498(a1, j, *((void *)__p + v155), v185, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, *(void *)(*((void *)a1 + 13) + 8 * j));
                unint64_t v187 = sub_11188E8(a1, v186 + 2);
                int v188 = (void *)*v222;
                *(void *)(*v222 + 8 * v160) = v187;
                v188[j] = v186;
                uint64_t v189 = (void *)*v3;
                for (uint64_t i = *(void *)(*v3 + 8 * j); ; uint64_t i = v191)
                {
                  uint64_t v191 = v189[i];
                  uint64_t v156 = **(void **)a1;
                  if ((*(double *)(v156 + 16 * i + 8) - v162)
                     * (*(double *)(v156 + 16 * v191) - *(double *)(v156 + 16 * i))
                     - (*(double *)(v156 + 16 * i) - v163)
                     * (*(double *)(v156 + 16 * v191 + 8) - *(double *)(v156 + 16 * i + 8)) >= 0.0)
                    break;
                  unint64_t v192 = sub_1118498(a1, i, v160, v189[i], v188[v160], 0xFFFFFFFFFFFFFFFFLL, v188[i]);
                  unint64_t v193 = sub_11188E8(a1, v192 + 2);
                  int v188 = (void *)*v222;
                  *(void *)(*v222 + 8 * v160) = v193;
                  uint64_t v189 = (void *)*v3;
                  *(void *)(*v3 + 8 * i) = i;
                }
                if (j == v183)
                {
                  for (uint64_t j = v183; ; uint64_t j = v195)
                  {
                    uint64_t v194 = *v221;
                    uint64_t v195 = *(void *)(*v221 + 8 * j);
                    if ((*(double *)(v156 + 16 * v195 + 8) - v162)
                       * (*(double *)(v156 + 16 * j) - *(double *)(v156 + 16 * v195))
                       - (*(double *)(v156 + 16 * v195) - v163)
                       * (*(double *)(v156 + 16 * j + 8) - *(double *)(v156 + 16 * v195 + 8)) >= 0.0)
                      break;
                    unint64_t v196 = sub_1118498(a1, *(void *)(*v221 + 8 * j), v160, j, 0xFFFFFFFFFFFFFFFFLL, v188[j], v188[v195]);
                    sub_11188E8(a1, v196 + 2);
                    int v188 = (void *)*((void *)a1 + 13);
                    v188[v195] = v196;
                    uint64_t v189 = (void *)*((void *)a1 + 10);
                    v189[j] = j;
                    uint64_t v156 = **(void **)a1;
                  }
                }
                else
                {
                  uint64_t v194 = *v221;
                }
                uint64_t v197 = v160;
                *(void *)(v194 + v197 * 8) = j;
                *((void *)a1 + 16) = j;
                *(void *)(v194 + 8 * i) = v160;
                v189[j] = v160;
                v189[v197] = i;
                double v198 = a1[20];
                double v199 = a1[21];
                double v200 = (v163 - v198) / (vabdd_f64(v163, v198) + vabdd_f64(v162, v199));
                double v201 = 3.0 - v200;
                double v202 = v200 + 1.0;
                if (v162 - v199 > 0.0) {
                  double v202 = v201;
                }
                unint64_t v203 = *((void *)a1 + 22);
                unint64_t v204 = llround(floor(v202 * 0.25 * (double)v203));
                if (v204 >= v203) {
                  v204 %= v203;
                }
                uint64_t v205 = (void *)*((void *)a1 + 17);
                v205[v204] = v160;
                int v206 = (double *)(v156 + 16 * j);
                double v207 = v206[1];
                double v208 = v207 - v199;
                double v209 = (*v206 - v198) / (vabdd_f64(*v206, v198) + vabdd_f64(v207, v199));
                double v210 = 3.0 - v209;
                double v211 = v209 + 1.0;
                if (v208 > 0.0) {
                  double v211 = v210;
                }
                unint64_t v212 = *((void *)a1 + 22);
                unint64_t v213 = llround(floor(v211 * 0.25 * (double)v212));
                if (v213 >= v212) {
                  v213 %= v212;
                }
                v205[v213] = j;
                double v158 = 3.0;
              }
              goto LABEL_149;
            }
            v178 %= v177;
          }
          uint64_t v179 = 0;
          do
          {
            while (1)
            {
              unint64_t v180 = v179 + v178;
              if (v179 + v178 >= v177) {
                v180 %= v177;
              }
              uint64_t v181 = *(void *)(*v219 + 8 * v180);
              if (v181 != -1) {
                break;
              }
              if (++v179 >= v177) {
                goto LABEL_188;
              }
            }
            _CF = v181 != *(void *)(*v3 + 8 * v181) || ++v179 >= v177;
          }
          while (!_CF);
          goto LABEL_188;
        }
      }
    }
LABEL_149:
    ++v155;
    double v157 = v162;
    double v159 = v163;
    if (v155 != v5) {
      continue;
    }
    break;
  }
  if (__p)
  {
    uint64_t v228 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_111835C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, void **a16, void **a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p)
  {
    operator delete(__p);
    int v32 = (void *)v30[23];
    if (!v32)
    {
LABEL_3:
      float64x2_t v33 = *a15;
      if (!*a15) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else
  {
    int v32 = (void *)v30[23];
    if (!v32) {
      goto LABEL_3;
    }
  }
  v30[24] = v32;
  operator delete(v32);
  float64x2_t v33 = *a15;
  if (!*a15)
  {
LABEL_4:
    uint64_t v34 = *a18;
    if (!*a18) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  v30[18] = v33;
  operator delete(v33);
  uint64_t v34 = *a18;
  if (!*a18)
  {
LABEL_5:
    double v35 = *a16;
    if (!*a16) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  v30[14] = v34;
  operator delete(v34);
  double v35 = *a16;
  if (!*a16)
  {
LABEL_6:
    float64x2_t v36 = *a17;
    if (!*a17) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  v30[11] = v35;
  operator delete(v35);
  float64x2_t v36 = *a17;
  if (!*a17)
  {
LABEL_7:
    double v37 = *a10;
    if (!*a10) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
LABEL_15:
  char v30[8] = v36;
  operator delete(v36);
  double v37 = *a10;
  if (!*a10)
  {
LABEL_8:
    uint64_t v38 = *a11;
    if (!*a11) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
LABEL_16:
  v30[5] = v37;
  operator delete(v37);
  uint64_t v38 = *a11;
  if (!*a11) {
LABEL_9:
  }
    _Unwind_Resume(exception_object);
LABEL_17:
  v30[2] = v38;
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

unint64_t sub_1118498(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v12 = (char *)a1[1];
  float64x2_t v10 = (char *)a1[2];
  float64x2_t v11 = (void **)(a1 + 1);
  float64x2_t v13 = (char *)a1[3];
  uint64_t v14 = v10;
  unint64_t v15 = (v10 - v12) >> 3;
  if (v10 < v13)
  {
    *(void *)float64x2_t v10 = a2;
    unint64_t v16 = v10 + 8;
    goto LABEL_22;
  }
  unint64_t v17 = v15 + 1;
  if ((v15 + 1) >> 61) {
    goto LABEL_71;
  }
  uint64_t v18 = v13 - v12;
  if (v18 >> 2 > v17) {
    unint64_t v17 = v18 >> 2;
  }
  if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v19 = v17;
  }
  if (v19)
  {
    if (v19 >> 61) {
      goto LABEL_72;
    }
    unint64_t v20 = operator new(8 * v19);
    unint64_t v21 = &v20[8 * v15];
    float64x2_t v13 = &v20[8 * v19];
    void *v21 = a2;
    unint64_t v16 = (char *)(v21 + 1);
    int64_t v22 = v10 - v12;
    if (v10 == v12) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  unint64_t v20 = 0;
  unint64_t v21 = (void *)(8 * v15);
  float64x2_t v13 = 0;
  *(void *)(8 * v15) = a2;
  unint64_t v16 = (char *)(8 * v15 + 8);
  int64_t v22 = v10 - v12;
  if (v10 != v12)
  {
LABEL_14:
    unint64_t v23 = v22 - 8;
    if (v23 < 0x58) {
      goto LABEL_75;
    }
    if ((unint64_t)(v10 - &v20[(v10 - v12) & 0xFFFFFFFFFFFFFFF8]) < 0x20) {
      goto LABEL_75;
    }
    uint64_t v24 = (v23 >> 3) + 1;
    uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v14 = &v10[-v25];
    unint64_t v21 = (void *)((char *)v21 - v25);
    int v26 = &v20[8 * v15 - 16];
    uint64_t v27 = (long long *)(v10 - 16);
    uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v29 = *v27;
      *(v26 - 1) = *(v27 - 1);
      *int v26 = v29;
      v26 -= 2;
      v27 -= 2;
      v28 -= 4;
    }
    while (v28);
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_75:
      do
      {
        uint64_t v30 = *((void *)v14 - 1);
        v14 -= 8;
        *--unint64_t v21 = v30;
      }
      while (v14 != v12);
    }
  }
LABEL_20:
  a1[1] = v21;
  a1[2] = v16;
  a1[3] = v13;
  if (v12)
  {
    operator delete(v12);
    float64x2_t v13 = (char *)a1[3];
  }
LABEL_22:
  a1[2] = v16;
  if (v16 < v13)
  {
    *(void *)unint64_t v16 = a3;
    uint64_t v31 = v16 + 8;
    goto LABEL_45;
  }
  int v32 = (char *)*v11;
  uint64_t v33 = v16 - (unsigned char *)*v11;
  uint64_t v34 = v33 >> 3;
  unint64_t v35 = (v33 >> 3) + 1;
  if (v35 >> 61) {
    goto LABEL_71;
  }
  uint64_t v36 = v13 - v32;
  if (v36 >> 2 > v35) {
    unint64_t v35 = v36 >> 2;
  }
  if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v37 = v35;
  }
  if (v37)
  {
    if (v37 >> 61) {
      goto LABEL_72;
    }
    uint64_t v38 = operator new(8 * v37);
    uint64_t v39 = &v38[8 * v34];
    float64x2_t v13 = &v38[8 * v37];
    *uint64_t v39 = a3;
    uint64_t v31 = (char *)(v39 + 1);
    int64_t v40 = v16 - v32;
    if (v16 == v32) {
      goto LABEL_43;
    }
  }
  else
  {
    uint64_t v38 = 0;
    uint64_t v39 = (void *)(8 * v34);
    float64x2_t v13 = 0;
    *(void *)(8 * v34) = a3;
    uint64_t v31 = (char *)(8 * v34 + 8);
    int64_t v40 = v16 - v32;
    if (v16 == v32) {
      goto LABEL_43;
    }
  }
  unint64_t v41 = v40 - 8;
  if (v41 < 0x58)
  {
    int v42 = v16;
    goto LABEL_42;
  }
  if ((unint64_t)(v16 - &v38[v33]) < 0x20)
  {
    int v42 = v16;
    do
    {
LABEL_42:
      uint64_t v49 = *((void *)v42 - 1);
      v42 -= 8;
      *--uint64_t v39 = v49;
    }
    while (v42 != v32);
    goto LABEL_43;
  }
  uint64_t v43 = (v41 >> 3) + 1;
  uint64_t v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
  int v42 = &v16[-v44];
  uint64_t v39 = (void *)((char *)v39 - v44);
  double v45 = &v38[8 * v34 - 16];
  uint64_t v46 = v16 - 16;
  uint64_t v47 = v43 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v48 = *(_OWORD *)v46;
    *(v45 - 1) = *((_OWORD *)v46 - 1);
    _OWORD *v45 = v48;
    v45 -= 2;
    v46 -= 32;
    v47 -= 4;
  }
  while (v47);
  if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_42;
  }
LABEL_43:
  a1[1] = v39;
  a1[2] = v31;
  a1[3] = v13;
  if (v32)
  {
    operator delete(v32);
    float64x2_t v13 = (char *)a1[3];
  }
LABEL_45:
  a1[2] = v31;
  if (v31 >= v13)
  {
    uint64_t v54 = (char *)*v11;
    uint64_t v55 = v31 - (unsigned char *)*v11;
    uint64_t v56 = v55 >> 3;
    unint64_t v57 = (v55 >> 3) + 1;
    if (!(v57 >> 61))
    {
      uint64_t v58 = v13 - v54;
      if (v58 >> 2 > v57) {
        unint64_t v57 = v58 >> 2;
      }
      if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v59 = v57;
      }
      if (!v59)
      {
        double v60 = 0;
LABEL_57:
        double v61 = &v60[8 * v56];
        double v62 = &v60[8 * v59];
        void *v61 = a4;
        double v51 = v61 + 1;
        if (v31 == v54)
        {
          unint64_t v53 = a6;
          unint64_t v52 = a7;
          unint64_t v50 = a5;
          a1[1] = v61;
          a1[2] = v51;
          a1[3] = v62;
          if (!v54) {
            goto LABEL_64;
          }
          goto LABEL_63;
        }
        unint64_t v63 = v31 - v54 - 8;
        if (v63 >= 0x58 && (unint64_t)(v31 - &v60[v55]) >= 0x20)
        {
          uint64_t v67 = (v63 >> 3) + 1;
          uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
          int v64 = &v31[-v68];
          double v61 = (void *)((char *)v61 - v68);
          double v69 = &v60[8 * v56 - 16];
          double v70 = v31 - 16;
          uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v72 = *(_OWORD *)v70;
            *(v69 - 1) = *((_OWORD *)v70 - 1);
            *double v69 = v72;
            v69 -= 2;
            v70 -= 32;
            v71 -= 4;
          }
          while (v71);
          unint64_t v53 = a6;
          unint64_t v52 = a7;
          unint64_t v50 = a5;
          if (v67 == (v67 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_62:
            a1[1] = v61;
            a1[2] = v51;
            a1[3] = v62;
            if (!v54) {
              goto LABEL_64;
            }
LABEL_63:
            operator delete(v54);
            goto LABEL_64;
          }
        }
        else
        {
          int v64 = v31;
          unint64_t v53 = a6;
          unint64_t v52 = a7;
          unint64_t v50 = a5;
        }
        do
        {
          uint64_t v65 = *((void *)v64 - 1);
          v64 -= 8;
          *--double v61 = v65;
        }
        while (v64 != v54);
        goto LABEL_62;
      }
      if (!(v59 >> 61))
      {
        double v60 = operator new(8 * v59);
        goto LABEL_57;
      }
LABEL_72:
      sub_188D718();
    }
LABEL_71:
    sub_2E00();
  }
  unint64_t v50 = a5;
  *(void *)uint64_t v31 = a4;
  double v51 = v31 + 8;
  unint64_t v53 = a6;
  unint64_t v52 = a7;
LABEL_64:
  a1[2] = v51;
  sub_1118CC8(a1, v15, v50);
  sub_1118CC8(a1, v15 + 1, v53);
  sub_1118CC8(a1, v15 + 2, v52);
  return v15;
}

unint64_t sub_11188E8(void *a1, unint64_t a2)
{
  unint64_t v4 = 0;
  unint64_t v52 = a1 + 23;
  a1[24] = a1[23];
  while (1)
  {
    unint64_t v5 = 3 * (a2 / 3);
    unint64_t v6 = v5 + (a2 + 2) % 3;
    unint64_t v53 = v6;
    unint64_t v54 = v5 + (a2 + 1) % 3;
    uint64_t v7 = a1[4];
    unint64_t v8 = *(void *)(v7 + 8 * a2);
    if (v8 != -1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = 3 * (v8 / 3);
          uint64_t v10 = a1[1];
          uint64_t v11 = *(void *)(v10 + 8 * v6);
          unint64_t v12 = v9 + (v8 + 2) % 3;
          uint64_t v13 = *(void *)(v10 + 8 * v12);
          uint64_t v14 = *(void *)*a1;
          unint64_t v15 = (double *)(v14 + 16 * v11);
          unint64_t v16 = (double *)(v14 + 16 * *(void *)(v10 + 8 * a2));
          double v17 = *v16;
          double v18 = v16[1];
          unint64_t v19 = (double *)(v14 + 16 * *(void *)(v10 + 8 * v54));
          unint64_t v20 = (double *)(v14 + 16 * v13);
          double v21 = v20[1];
          double v22 = *v15 - *v20;
          double v23 = v17 - *v20;
          double v24 = v18 - v21;
          double v25 = *v19 - *v20;
          double v26 = v19[1] - v21;
          if ((v22 * v22 + (v15[1] - v21) * (v15[1] - v21)) * (v23 * v26 - v25 * v24)
             + v22 * (v24 * (v25 * v25 + v26 * v26) - v26 * (v23 * v23 + v24 * v24))
             - (v15[1] - v21) * (v23 * (v25 * v25 + v26 * v26) - v25 * (v23 * v23 + v24 * v24)) >= 0.0)
            goto LABEL_36;
          *(void *)(v10 + 8 * a2) = v13;
          *(void *)(v10 + 8 * v8) = v11;
          unint64_t v27 = *(void *)(v7 + 8 * v12);
          if (v27 == -1)
          {
            uint64_t v28 = a1[13];
            uint64_t v29 = a1[16];
            while (*(void *)(v28 + 8 * v29) != v12)
            {
              uint64_t v29 = *(void *)(a1[7] + 8 * v29);
              if (v29 == a1[16]) {
                goto LABEL_12;
              }
            }
            *(void *)(v28 + 8 * v29) = a2;
LABEL_12:
            unint64_t v27 = -1;
          }
          sub_1118CC8(a1, a2, v27);
          sub_1118CC8(a1, v8, *(void *)(a1[4] + 8 * v6));
          sub_1118CC8(a1, v6, v9 + (v8 + 2) % 3);
          unint64_t v30 = v9 + (v8 + 1) % 3;
          uint64_t v31 = (char *)a1[23];
          int v32 = (char *)a1[24];
          unint64_t v33 = (v32 - v31) >> 3;
          if (v4 >= v33) {
            break;
          }
          *(void *)&v31[8 * v4++] = v30;
          uint64_t v7 = a1[4];
          unint64_t v8 = *(void *)(v7 + 8 * a2);
          if (v8 == -1) {
            goto LABEL_36;
          }
        }
        unint64_t v34 = a1[25];
        if ((unint64_t)v32 >= v34) {
          break;
        }
        *(void *)int v32 = v30;
        uint64_t v35 = (uint64_t)(v32 + 8);
LABEL_35:
        a1[24] = v35;
        ++v4;
        uint64_t v7 = a1[4];
        unint64_t v8 = *(void *)(v7 + 8 * a2);
        if (v8 == -1) {
          goto LABEL_36;
        }
      }
      unint64_t v36 = v33 + 1;
      if ((v33 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v37 = v34 - (void)v31;
      if (v37 >> 2 > v36) {
        unint64_t v36 = v37 >> 2;
      }
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v36)
      {
        if (v36 >> 61) {
          sub_188D718();
        }
        unint64_t v38 = v36;
        uint64_t v39 = operator new(8 * v36);
        int64_t v40 = (unint64_t *)&v39[8 * v33];
        unint64_t *v40 = v30;
        uint64_t v35 = (uint64_t)(v40 + 1);
        if (v32 != v31)
        {
LABEL_24:
          unint64_t v41 = v32 - 8 - v31;
          unint64_t v42 = v38;
          if (v41 >= 0x58)
          {
            unint64_t v6 = v53;
            if ((unint64_t)(v31 - v39) >= 0x20)
            {
              uint64_t v43 = (v41 >> 3) + 1;
              uint64_t v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
              double v45 = &v32[-v44];
              int64_t v40 = (unint64_t *)((char *)v40 - v44);
              uint64_t v46 = &v39[8 * v33 - 16];
              uint64_t v47 = v32 - 16;
              uint64_t v48 = v43 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v49 = *(_OWORD *)v47;
                *(v46 - 1) = *((_OWORD *)v47 - 1);
                _OWORD *v46 = v49;
                v46 -= 2;
                v47 -= 32;
                v48 -= 4;
              }
              while (v48);
              int v32 = v45;
              if (v43 == (v43 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_33:
                a1[23] = v40;
                a1[24] = v35;
                a1[25] = &v39[8 * v42];
                if (v31) {
                  operator delete(v31);
                }
                goto LABEL_35;
              }
            }
          }
          else
          {
            unint64_t v6 = v53;
          }
          do
          {
            unint64_t v50 = *((void *)v32 - 1);
            v32 -= 8;
            *--int64_t v40 = v50;
          }
          while (v32 != v31);
          goto LABEL_33;
        }
      }
      else
      {
        unint64_t v38 = 0;
        uint64_t v39 = 0;
        int64_t v40 = (unint64_t *)(8 * v33);
        *(void *)(8 * v33) = v30;
        uint64_t v35 = 8 * v33 + 8;
        if (v32 != v31) {
          goto LABEL_24;
        }
      }
      unint64_t v42 = v38;
      unint64_t v6 = v53;
      goto LABEL_33;
    }
LABEL_36:
    if (!v4) {
      return v6;
    }
    --v4;
    a2 = *(void *)(*v52 + 8 * v4);
  }
}

void sub_1118CC8(void *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v7 = (char *)a1[4];
  unint64_t v8 = (unint64_t *)a1[5];
  unint64_t v6 = (void **)(a1 + 4);
  unint64_t v9 = (char *)v8;
  unint64_t v10 = ((char *)v8 - v7) >> 3;
  if (v10 == a2)
  {
    unint64_t v11 = a1[6];
    if ((unint64_t)v8 < v11)
    {
      *unint64_t v8 = a3;
      uint64_t v12 = (uint64_t)(v8 + 1);
      goto LABEL_27;
    }
    unint64_t v13 = a2 + 1;
    if ((a2 + 1) >> 61) {
      goto LABEL_52;
    }
    uint64_t v14 = v11 - (void)v7;
    if (v14 >> 2 > v13) {
      unint64_t v13 = v14 >> 2;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 61) {
        goto LABEL_53;
      }
      unint64_t v16 = (char *)operator new(8 * v15);
      double v17 = (unint64_t *)&v16[8 * a2];
      double v18 = &v16[8 * v15];
      *double v17 = a3;
      uint64_t v12 = (uint64_t)(v17 + 1);
      int64_t v19 = (char *)v8 - v7;
      if (v8 == (unint64_t *)v7) {
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v16 = 0;
      double v17 = (unint64_t *)(8 * a2);
      double v18 = 0;
      *(void *)(8 * a2) = a3;
      uint64_t v12 = 8 * a2 + 8;
      int64_t v19 = (char *)v8 - v7;
      if (v8 == (unint64_t *)v7)
      {
LABEL_25:
        a1[4] = v17;
        a1[5] = v12;
        a1[6] = v18;
        if (v7) {
          operator delete(v7);
        }
LABEL_27:
        a1[5] = v12;
        unint64_t v9 = (char *)v12;
        if (a3 == -1) {
          return;
        }
        goto LABEL_28;
      }
    }
    unint64_t v20 = v19 - 8;
    if (v20 < 0x58) {
      goto LABEL_56;
    }
    double v21 = &v16[8 * a2];
    if ((unint64_t)((char *)v8 - v21) < 0x20) {
      goto LABEL_56;
    }
    uint64_t v22 = (v20 >> 3) + 1;
    uint64_t v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v9 = (char *)&v8[v23 / 0xFFFFFFFFFFFFFFF8];
    double v17 = (unint64_t *)((char *)v17 - v23);
    double v24 = v21 - 16;
    double v25 = v8 - 2;
    uint64_t v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v27 = *(_OWORD *)v25;
      *((_OWORD *)v24 - 1) = *((_OWORD *)v25 - 1);
      *(_OWORD *)double v24 = v27;
      v24 -= 32;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_56:
      do
      {
        unint64_t v28 = *((void *)v9 - 1);
        v9 -= 8;
        *--double v17 = v28;
      }
      while (v9 != v7);
    }
    goto LABEL_25;
  }
  if (v10 <= a2) {
    goto LABEL_5;
  }
  *(void *)&v7[8 * a2] = a3;
  if (a3 == -1) {
    return;
  }
LABEL_28:
  uint64_t v29 = (char *)*v6;
  unint64_t v30 = (v9 - (unsigned char *)*v6) >> 3;
  if (v30 != a3)
  {
    if (v30 > a3)
    {
      *(void *)&v29[8 * a3] = a2;
      return;
    }
LABEL_5:
    exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot link edge");
  }
  unint64_t v31 = a1[6];
  if ((unint64_t)v9 < v31)
  {
    *(void *)unint64_t v9 = a2;
    a1[5] = v9 + 8;
    return;
  }
  unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
  if (a3 >= 0x1FFFFFFFFFFFFFFFLL) {
LABEL_52:
  }
    sub_2E00();
  uint64_t v33 = v31 - (void)v29;
  if (v33 >> 2 <= a3 + 1) {
    uint64_t v34 = a3 + 1;
  }
  else {
    uint64_t v34 = v33 >> 2;
  }
  if ((unint64_t)v33 < 0x7FFFFFFFFFFFFFF8) {
    unint64_t v32 = v34;
  }
  if (v32 >> 61) {
LABEL_53:
  }
    sub_188D718();
  uint64_t v35 = 8 * v32;
  unint64_t v36 = operator new(8 * v32);
  uint64_t v37 = (unint64_t *)&v36[8 * a3];
  unint64_t v38 = &v36[v35];
  unint64_t *v37 = a2;
  uint64_t v39 = v37 + 1;
  if (v9 == v29) {
    goto LABEL_49;
  }
  unint64_t v40 = v9 - v29 - 8;
  if (v40 < 0x58)
  {
    unint64_t v41 = v9;
    goto LABEL_48;
  }
  if ((unint64_t)(&v9[-8 * a3] - v36) < 0x20)
  {
    unint64_t v41 = v9;
    do
    {
LABEL_48:
      unint64_t v48 = *((void *)v41 - 1);
      v41 -= 8;
      *--uint64_t v37 = v48;
    }
    while (v41 != v29);
    goto LABEL_49;
  }
  uint64_t v42 = (v40 >> 3) + 1;
  uint64_t v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
  unint64_t v41 = &v9[-v43];
  uint64_t v37 = (unint64_t *)((char *)v37 - v43);
  uint64_t v44 = &v36[8 * a3 - 16];
  double v45 = v9 - 16;
  uint64_t v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v47 = *(_OWORD *)v45;
    *(v44 - 1) = *((_OWORD *)v45 - 1);
    _OWORD *v44 = v47;
    v44 -= 2;
    v45 -= 32;
    v46 -= 4;
  }
  while (v46);
  if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_48;
  }
LABEL_49:
  a1[4] = v37;
  a1[5] = v39;
  a1[6] = v38;
  if (v29) {
    operator delete(v29);
  }
  a1[5] = v39;
}

void sub_111902C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1119040(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1119054(uint64_t result, uint64_t *a2, double *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = (uint64_t *)result;
LABEL_2:
  unint64_t v11 = a2 - 1;
  double v51 = a2 - 3;
  unint64_t v52 = a2 - 2;
  uint64_t v12 = v10;
  unint64_t v53 = a2;
LABEL_3:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    unint64_t v10 = v12;
    uint64_t v14 = v13;
    uint64_t v15 = (char *)a2 - (char *)v12;
    unint64_t v16 = a2 - v12;
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v39 = *(a2 - 1);
          uint64_t v40 = *v12;
          uint64_t v41 = **(void **)a3;
          uint64_t v42 = (double *)(v41 + 16 * v39);
          double v43 = v42[1];
          double v44 = a3[1];
          double v45 = (double *)(v41 + 16 * *v12);
          double v46 = v45[1];
          double v47 = (*v42 - v44) * (*v42 - v44)
              + (v43 - a3[2]) * (v43 - a3[2])
              - ((*v45 - v44) * (*v45 - v44)
               + (v46 - a3[2]) * (v46 - a3[2]));
          double v48 = v43 - v46;
          double v49 = *v42 - *v45;
          if (v49 == 0.0) {
            double v49 = v48;
          }
          if (v47 == 0.0) {
            double v50 = v49;
          }
          else {
            double v50 = v47;
          }
          if (v50 < 0.0)
          {
            *uint64_t v12 = v39;
            *(a2 - 1) = v40;
          }
          break;
        case 3uLL:
          uint64_t result = sub_1119718(v12, v12 + 1, v11, a3);
          break;
        case 4uLL:
          uint64_t result = sub_111A070(v12, v12 + 1, v12 + 2, v11, a3);
          break;
        case 5uLL:
          uint64_t result = sub_111A220(v12, v12 + 1, v12 + 2, v12 + 3, v11, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v15 <= 191) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != a2)
      {
        return (uint64_t)sub_111A448(v12, a2, a2, a3);
      }
      return result;
    }
    unint64_t v17 = v16 >> 1;
    double v18 = &v12[v16 >> 1];
    if ((unint64_t)v15 >= 0x401)
    {
      sub_1119718(v12, &v12[v16 >> 1], v11, a3);
      uint64_t v19 = a5;
      unint64_t v20 = v11;
      double v21 = &v12[v17];
      sub_1119718(v12 + 1, v21 - 1, v52, a3);
      sub_1119718(v12 + 2, &v12[v17 + 1], v51, a3);
      sub_1119718(v21 - 1, v18, &v12[v17 + 1], a3);
      uint64_t v22 = *v12;
      *uint64_t v12 = *v21;
      uint64_t *v21 = v22;
      unint64_t v11 = v20;
      a5 = v19;
      a2 = v53;
      if (a5) {
        goto LABEL_19;
      }
    }
    else
    {
      sub_1119718(&v12[v16 >> 1], v12, v11, a3);
      if (a5) {
        goto LABEL_19;
      }
    }
    uint64_t v23 = **(void **)a3;
    double v24 = (double *)(v23 + 16 * *(v12 - 1));
    double v25 = *v24;
    double v26 = v24[1];
    double v27 = a3[1];
    double v28 = a3[2];
    double v29 = (*v24 - v27) * (*v24 - v27) + (v26 - v28) * (v26 - v28);
    unint64_t v30 = (double *)(v23 + 16 * *v12);
    double v31 = v30[1];
    double v32 = v29 - ((*v30 - v27) * (*v30 - v27) + (v31 - v28) * (v31 - v28));
    double v33 = v26 - v31;
    double v34 = v25 - *v30;
    if (v34 == 0.0) {
      double v34 = v33;
    }
    if (v32 == 0.0) {
      double v35 = v34;
    }
    else {
      double v35 = v32;
    }
    if (v35 >= 0.0)
    {
      uint64_t result = (uint64_t)sub_11198EC(v12, a2, a3);
      uint64_t v12 = (uint64_t *)result;
      goto LABEL_24;
    }
LABEL_19:
    unint64_t v36 = sub_1119B44(v12, a2, a3);
    if ((v37 & 1) == 0) {
      goto LABEL_22;
    }
    BOOL v38 = sub_1119D60(v12, v36, a3);
    uint64_t v12 = v36 + 1;
    uint64_t result = sub_1119D60(v36 + 1, a2, a3);
    if (result)
    {
      a4 = -v14;
      a2 = v36;
      if (v38) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v14 + 1;
    if (!v38)
    {
LABEL_22:
      uint64_t result = sub_1119054(v10, v36, a3, -v14, a5 & 1);
      uint64_t v12 = v36 + 1;
LABEL_24:
      a5 = 0;
      a4 = -v14;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)sub_11194F8(v12, a2, a3);
  }
  else
  {
    return (uint64_t)sub_1119618(v12, a2, a3);
  }
}

uint64_t *sub_11194F8(uint64_t *result, uint64_t *a2, double *a3)
{
  if (result != a2)
  {
    uint64_t v3 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v4 = 0;
      uint64_t v5 = **(void **)a3;
      double v6 = a3[1];
      double v7 = a3[2];
      unint64_t v8 = result;
      do
      {
        uint64_t v11 = *v8;
        uint64_t v10 = v8[1];
        unint64_t v8 = v3;
        uint64_t v12 = (double *)(v5 + 16 * v10);
        double v13 = *v12;
        double v14 = v12[1];
        double v15 = (*v12 - v6) * (*v12 - v6) + (v14 - v7) * (v14 - v7);
        unint64_t v16 = (double *)(v5 + 16 * v11);
        double v17 = v16[1];
        double v18 = (v17 - v7) * (v17 - v7);
        double v19 = v14 - v17;
        double v20 = v13 - *v16;
        if (v20 == 0.0) {
          double v20 = v19;
        }
        if (v15 - ((*v16 - v6) * (*v16 - v6) + v18) == 0.0) {
          double v21 = v20;
        }
        else {
          double v21 = v15 - ((*v16 - v6) * (*v16 - v6) + v18);
        }
        if (v21 < 0.0)
        {
          uint64_t v22 = v4;
          do
          {
            *(uint64_t *)((char *)result + v22 + 8) = v11;
            if (!v22)
            {
              unint64_t v9 = result;
              goto LABEL_5;
            }
            uint64_t v11 = *(uint64_t *)((char *)result + v22 - 8);
            uint64_t v23 = (double *)(v5 + 16 * v11);
            double v24 = v23[1];
            double v25 = (v24 - v7) * (v24 - v7);
            double v26 = v14 - v24;
            double v27 = v13 - *v23;
            if (v27 == 0.0) {
              double v27 = v26;
            }
            if (v15 - ((*v23 - v6) * (*v23 - v6) + v25) == 0.0) {
              double v28 = v27;
            }
            else {
              double v28 = v15 - ((*v23 - v6) * (*v23 - v6) + v25);
            }
            v22 -= 8;
          }
          while (v28 < 0.0);
          unint64_t v9 = (uint64_t *)((char *)result + v22 + 8);
LABEL_5:
          *unint64_t v9 = v10;
        }
        uint64_t v3 = v8 + 1;
        v4 += 8;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

void *sub_1119618(void *result, void *a2, double *a3)
{
  if (result != a2)
  {
    uint64_t v3 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v4 = **(void **)a3;
      double v5 = a3[1];
      double v6 = a3[2];
      do
      {
        uint64_t v8 = *result;
        uint64_t v7 = result[1];
        uint64_t result = v3;
        unint64_t v9 = (double *)(v4 + 16 * v7);
        double v10 = *v9;
        double v11 = v9[1];
        double v12 = (*v9 - v5) * (*v9 - v5) + (v11 - v6) * (v11 - v6);
        double v13 = (double *)(v4 + 16 * v8);
        double v14 = v13[1];
        double v15 = (v14 - v6) * (v14 - v6);
        double v16 = v11 - v14;
        double v17 = v10 - *v13;
        if (v17 == 0.0) {
          double v17 = v16;
        }
        if (v12 - ((*v13 - v5) * (*v13 - v5) + v15) == 0.0) {
          double v18 = v17;
        }
        else {
          double v18 = v12 - ((*v13 - v5) * (*v13 - v5) + v15);
        }
        if (v18 < 0.0)
        {
          double v19 = result;
          do
          {
            *double v19 = v8;
            uint64_t v8 = *(v19 - 2);
            double v20 = (double *)(v4 + 16 * v8);
            double v21 = v20[1];
            double v22 = (v21 - v6) * (v21 - v6);
            double v23 = v11 - v21;
            double v24 = v10 - *v20;
            if (v24 == 0.0) {
              double v24 = v23;
            }
            if (v12 - ((*v20 - v5) * (*v20 - v5) + v22) == 0.0) {
              double v25 = v24;
            }
            else {
              double v25 = v12 - ((*v20 - v5) * (*v20 - v5) + v22);
            }
            --v19;
          }
          while (v25 < 0.0);
          *double v19 = v7;
        }
        uint64_t v3 = result + 1;
      }
      while (result + 1 != a2);
    }
  }
  return result;
}

uint64_t sub_1119718(uint64_t *a1, uint64_t *a2, uint64_t *a3, double *a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  uint64_t v6 = **(void **)a4;
  uint64_t v7 = (double *)(v6 + 16 * *a2);
  double v8 = *v7;
  double v9 = v7[1];
  double v11 = a4[1];
  double v10 = a4[2];
  double v12 = (*v7 - v11) * (*v7 - v11) + (v9 - v10) * (v9 - v10);
  double v13 = (double *)(v6 + 16 * *a1);
  double v14 = *v13;
  double v15 = v13[1];
  double v16 = (*v13 - v11) * (*v13 - v11) + (v15 - v10) * (v15 - v10);
  double v17 = v12 - v16;
  double v18 = v8 - *v13;
  if (v18 == 0.0) {
    double v18 = v9 - v15;
  }
  if (v17 == 0.0) {
    double v17 = v18;
  }
  uint64_t v19 = *a3;
  double v20 = (double *)(v6 + 16 * *a3);
  double v21 = v20[1];
  double v22 = (*v20 - v11) * (*v20 - v11) + (v21 - v10) * (v21 - v10) - v12;
  double v23 = v21 - v9;
  double v24 = *v20 - v8;
  if (v24 == 0.0) {
    double v24 = v23;
  }
  if (v22 == 0.0) {
    double v25 = v24;
  }
  else {
    double v25 = v22;
  }
  if (v17 < 0.0)
  {
    if (v25 < 0.0)
    {
      *a1 = v19;
      *a3 = v5;
      return 1;
    }
    *a1 = v4;
    *a2 = v5;
    double v34 = (double *)(v6 + 16 * *a3);
    double v35 = v34[1];
    double v36 = (*v34 - v11) * (*v34 - v11) + (v35 - v10) * (v35 - v10) - v16;
    double v37 = *v34 - v14;
    if (v37 == 0.0) {
      double v37 = v35 - v15;
    }
    if (v36 == 0.0) {
      double v36 = v37;
    }
    if (v36 < 0.0)
    {
      *a2 = *a3;
      *a3 = v5;
      return 2;
    }
    return 1;
  }
  if (v25 < 0.0)
  {
    *a2 = v19;
    *a3 = v4;
    uint64_t v27 = *a1;
    double v28 = (double *)(v6 + 16 * *a2);
    double v29 = v28[1];
    unint64_t v30 = (double *)(v6 + 16 * *a1);
    double v31 = v30[1];
    double v32 = (*v28 - v11) * (*v28 - v11)
        + (v29 - v10) * (v29 - v10)
        - ((*v30 - v11) * (*v30 - v11)
         + (v31 - v10) * (v31 - v10));
    double v33 = *v28 - *v30;
    if (v33 == 0.0) {
      double v33 = v29 - v31;
    }
    if (v32 == 0.0) {
      double v32 = v33;
    }
    if (v32 < 0.0)
    {
      *a1 = *a2;
      *a2 = v27;
      return 2;
    }
    return 1;
  }
  return 0;
}

uint64_t *sub_11198EC(uint64_t *a1, uint64_t *a2, double *a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = **(void **)a3;
  uint64_t v5 = (double *)(v4 + 16 * *a1);
  double v6 = *v5;
  double v7 = v5[1];
  double v8 = a3[1];
  double v9 = a3[2];
  double v10 = (*v5 - v8) * (*v5 - v8) + (v7 - v9) * (v7 - v9);
  double v11 = (double *)(v4 + 16 * *(a2 - 1));
  double v12 = v11[1];
  double v13 = (v12 - v9) * (v12 - v9);
  double v14 = v7 - v12;
  double v15 = *v5 - *v11;
  if (v15 == 0.0) {
    double v15 = v14;
  }
  if (v10 - ((*v11 - v8) * (*v11 - v8) + v13) == 0.0) {
    double v16 = v15;
  }
  else {
    double v16 = v10 - ((*v11 - v8) * (*v11 - v8) + v13);
  }
  if (v16 >= 0.0)
  {
    double v25 = a1 + 1;
    do
    {
      double v17 = v25;
      if (v25 >= a2) {
        break;
      }
      ++v25;
      double v26 = (double *)(v4 + 16 * *v17);
      double v27 = v26[1];
      double v28 = (v27 - v9) * (v27 - v9);
      double v29 = v7 - v27;
      double v30 = v6 - *v26;
      if (v30 == 0.0) {
        double v30 = v29;
      }
      double v31 = v10 - ((*v26 - v8) * (*v26 - v8) + v28) == 0.0 ? v30 : v10 - ((*v26 - v8) * (*v26 - v8) + v28);
    }
    while (v31 >= 0.0);
  }
  else
  {
    double v17 = a1;
    do
    {
      uint64_t v18 = v17[1];
      ++v17;
      uint64_t v19 = (double *)(v4 + 16 * v18);
      double v20 = v19[1];
      double v21 = (v20 - v9) * (v20 - v9);
      double v22 = v7 - v20;
      double v23 = v6 - *v19;
      if (v23 == 0.0) {
        double v23 = v22;
      }
      if (v10 - ((*v19 - v8) * (*v19 - v8) + v21) == 0.0) {
        double v24 = v23;
      }
      else {
        double v24 = v10 - ((*v19 - v8) * (*v19 - v8) + v21);
      }
    }
    while (v24 >= 0.0);
  }
  if (v17 < a2)
  {
    do
    {
      uint64_t v32 = *--a2;
      double v33 = (double *)(v4 + 16 * v32);
      double v34 = v33[1];
      double v35 = (v34 - v9) * (v34 - v9);
      double v36 = v7 - v34;
      double v37 = v6 - *v33;
      if (v37 == 0.0) {
        double v37 = v36;
      }
      if (v10 - ((*v33 - v8) * (*v33 - v8) + v35) == 0.0) {
        double v38 = v37;
      }
      else {
        double v38 = v10 - ((*v33 - v8) * (*v33 - v8) + v35);
      }
    }
    while (v38 < 0.0);
  }
  if (v17 < a2)
  {
    uint64_t v39 = *v17;
    uint64_t v40 = *a2;
    do
    {
      *double v17 = v40;
      *a2 = v39;
      do
      {
        uint64_t v41 = v17[1];
        ++v17;
        uint64_t v39 = v41;
        uint64_t v42 = (double *)(v4 + 16 * v41);
        double v43 = v42[1];
        double v44 = (v43 - v9) * (v43 - v9);
        double v45 = v7 - v43;
        double v46 = v6 - *v42;
        if (v46 == 0.0) {
          double v46 = v45;
        }
        if (v10 - ((*v42 - v8) * (*v42 - v8) + v44) == 0.0) {
          double v47 = v46;
        }
        else {
          double v47 = v10 - ((*v42 - v8) * (*v42 - v8) + v44);
        }
      }
      while (v47 >= 0.0);
      do
      {
        uint64_t v48 = *--a2;
        uint64_t v40 = v48;
        double v49 = (double *)(v4 + 16 * v48);
        double v50 = v49[1];
        double v51 = (v50 - v9) * (v50 - v9);
        double v52 = v7 - v50;
        double v53 = v6 - *v49;
        if (v53 == 0.0) {
          double v53 = v52;
        }
        if (v10 - ((*v49 - v8) * (*v49 - v8) + v51) == 0.0) {
          double v54 = v53;
        }
        else {
          double v54 = v10 - ((*v49 - v8) * (*v49 - v8) + v51);
        }
      }
      while (v54 < 0.0);
    }
    while (v17 < a2);
  }
  if (v17 - 1 != a1) {
    *a1 = *(v17 - 1);
  }
  *(v17 - 1) = v3;
  return v17;
}

uint64_t *sub_1119B44(uint64_t *a1, uint64_t *a2, double *a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = *a1;
  uint64_t v5 = **(void **)a3;
  double v6 = a3[1];
  double v7 = a3[2];
  double v8 = (double *)(v5 + 16 * *a1);
  double v9 = *v8;
  double v10 = v8[1];
  double v11 = (*v8 - v6) * (*v8 - v6) + (v10 - v7) * (v10 - v7);
  do
  {
    uint64_t v12 = a1[v3 + 1];
    double v13 = (double *)(v5 + 16 * v12);
    double v14 = v13[1];
    double v15 = (v14 - v7) * (v14 - v7);
    double v16 = v14 - v10;
    double v17 = *v13 - v9;
    if (v17 == 0.0) {
      double v17 = v16;
    }
    if ((*v13 - v6) * (*v13 - v6) + v15 - v11 == 0.0) {
      double v18 = v17;
    }
    else {
      double v18 = (*v13 - v6) * (*v13 - v6) + v15 - v11;
    }
    ++v3;
  }
  while (v18 < 0.0);
  uint64_t v19 = &a1[v3];
  double v20 = &a1[v3 - 1];
  if (v3 == 1)
  {
    do
    {
      if (v19 >= a2) {
        break;
      }
      uint64_t v28 = *--a2;
      double v29 = (double *)(v5 + 16 * v28);
      double v30 = v29[1];
      double v31 = (v30 - v7) * (v30 - v7);
      double v32 = v30 - v10;
      double v33 = *v29 - v9;
      if (v33 == 0.0) {
        double v33 = v32;
      }
      double v34 = (*v29 - v6) * (*v29 - v6) + v31 - v11 == 0.0 ? v33 : (*v29 - v6) * (*v29 - v6) + v31 - v11;
    }
    while (v34 >= 0.0);
  }
  else
  {
    do
    {
      uint64_t v21 = *--a2;
      double v22 = (double *)(v5 + 16 * v21);
      double v23 = v22[1];
      double v24 = (v23 - v7) * (v23 - v7);
      double v25 = v23 - v10;
      double v26 = *v22 - v9;
      if (v26 == 0.0) {
        double v26 = v25;
      }
      if ((*v22 - v6) * (*v22 - v6) + v24 - v11 == 0.0) {
        double v27 = v26;
      }
      else {
        double v27 = (*v22 - v6) * (*v22 - v6) + v24 - v11;
      }
    }
    while (v27 >= 0.0);
  }
  if (v19 < a2)
  {
    uint64_t v35 = *a2;
    double v36 = v19;
    double v37 = a2;
    do
    {
      *double v36 = v35;
      uint64_t *v37 = v12;
      do
      {
        uint64_t v38 = v36[1];
        ++v36;
        uint64_t v12 = v38;
        uint64_t v39 = (double *)(v5 + 16 * v38);
        double v40 = v39[1];
        double v41 = (v40 - v7) * (v40 - v7);
        double v42 = v40 - v10;
        double v43 = *v39 - v9;
        if (v43 == 0.0) {
          double v43 = v42;
        }
        if ((*v39 - v6) * (*v39 - v6) + v41 - v11 == 0.0) {
          double v44 = v43;
        }
        else {
          double v44 = (*v39 - v6) * (*v39 - v6) + v41 - v11;
        }
      }
      while (v44 < 0.0);
      do
      {
        uint64_t v45 = *--v37;
        uint64_t v35 = v45;
        double v46 = (double *)(v5 + 16 * v45);
        double v47 = v46[1];
        double v48 = (v47 - v7) * (v47 - v7);
        double v49 = v47 - v10;
        double v50 = *v46 - v9;
        if (v50 == 0.0) {
          double v50 = v49;
        }
        if ((*v46 - v6) * (*v46 - v6) + v48 - v11 == 0.0) {
          double v51 = v50;
        }
        else {
          double v51 = (*v46 - v6) * (*v46 - v6) + v48 - v11;
        }
      }
      while (v51 >= 0.0);
    }
    while (v36 < v37);
    double v20 = v36 - 1;
  }
  if (v20 != a1) {
    *a1 = *v20;
  }
  *double v20 = v4;
  return v20;
}

BOOL sub_1119D60(uint64_t *a1, uint64_t *a2, double *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v35 = *(a2 - 1);
      uint64_t v36 = *a1;
      uint64_t v37 = **(void **)a3;
      uint64_t v38 = (double *)(v37 + 16 * v35);
      double v39 = v38[1];
      double v40 = a3[1];
      double v41 = (double *)(v37 + 16 * *a1);
      double v42 = v41[1];
      double v43 = (*v38 - v40) * (*v38 - v40)
          + (v39 - a3[2]) * (v39 - a3[2])
          - ((*v41 - v40) * (*v41 - v40)
           + (v42 - a3[2]) * (v42 - a3[2]));
      double v44 = v39 - v42;
      double v45 = *v38 - *v41;
      if (v45 == 0.0) {
        double v45 = v44;
      }
      if (v43 == 0.0) {
        double v46 = v45;
      }
      else {
        double v46 = v43;
      }
      if (v46 < 0.0)
      {
        *a1 = v35;
        *(a2 - 1) = v36;
      }
      break;
    case 3:
      sub_1119718(a1, a1 + 1, a2 - 1, a3);
      BOOL result = 1;
      break;
    case 4:
      sub_111A070(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      BOOL result = 1;
      break;
    case 5:
      sub_111A220(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      BOOL result = 1;
      break;
    default:
      double v8 = a1 + 2;
      sub_1119718(a1, a1 + 1, a1 + 2, a3);
      double v9 = a1 + 3;
      if (a1 + 3 == a2)
      {
LABEL_23:
        BOOL result = 1;
      }
      else
      {
        int v10 = 0;
        uint64_t v11 = **(void **)a3;
        double v12 = a3[1];
        double v13 = a3[2];
        uint64_t v14 = 24;
        while (1)
        {
          uint64_t v15 = *v9;
          uint64_t v16 = *v8;
          double v17 = (double *)(v11 + 16 * *v9);
          double v18 = *v17;
          double v19 = v17[1];
          double v20 = (*v17 - v12) * (*v17 - v12) + (v19 - v13) * (v19 - v13);
          uint64_t v21 = (double *)(v11 + 16 * *v8);
          double v22 = v21[1];
          double v23 = (v22 - v13) * (v22 - v13);
          double v24 = v19 - v22;
          double v25 = v18 - *v21;
          if (v25 == 0.0) {
            double v25 = v24;
          }
          double v26 = v20 - ((*v21 - v12) * (*v21 - v12) + v23) == 0.0 ? v25 : v20 - ((*v21 - v12) * (*v21 - v12) + v23);
          if (v26 < 0.0) {
            break;
          }
LABEL_22:
          double v8 = v9;
          v14 += 8;
          if (++v9 == a2) {
            goto LABEL_23;
          }
        }
        uint64_t v27 = v14;
        do
        {
          *(uint64_t *)((char *)a1 + v27) = v16;
          uint64_t v28 = v27 - 8;
          if (v27 == 8)
          {
            *a1 = v15;
            if (++v10 != 8) {
              goto LABEL_22;
            }
            goto LABEL_34;
          }
          uint64_t v16 = *(uint64_t *)((char *)a1 + v27 - 16);
          double v29 = (double *)(v11 + 16 * v16);
          double v30 = v29[1];
          double v31 = (v30 - v13) * (v30 - v13);
          double v32 = v19 - v30;
          double v33 = v18 - *v29;
          if (v33 == 0.0) {
            double v33 = v32;
          }
          if (v20 - ((*v29 - v12) * (*v29 - v12) + v31) == 0.0) {
            double v34 = v33;
          }
          else {
            double v34 = v20 - ((*v29 - v12) * (*v29 - v12) + v31);
          }
          uint64_t v27 = v28;
        }
        while (v34 < 0.0);
        *(uint64_t *)((char *)a1 + v28) = v15;
        if (++v10 != 8) {
          goto LABEL_22;
        }
LABEL_34:
        BOOL result = v9 + 1 == a2;
      }
      break;
  }
  return result;
}

uint64_t sub_111A070(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, double *a5)
{
  uint64_t result = sub_1119718(a1, a2, a3, a5);
  uint64_t v11 = *a3;
  uint64_t v12 = **(void **)a5;
  double v13 = (double *)(v12 + 16 * *a4);
  double v14 = *v13;
  double v15 = v13[1];
  double v16 = a5[1];
  double v17 = a5[2];
  double v18 = (*v13 - v16) * (*v13 - v16) + (v15 - v17) * (v15 - v17);
  double v19 = (double *)(v12 + 16 * *a3);
  double v20 = v19[1];
  double v21 = v18 - ((*v19 - v16) * (*v19 - v16) + (v20 - v17) * (v20 - v17));
  double v22 = v15 - v20;
  double v23 = v14 - *v19;
  if (v23 == 0.0) {
    double v23 = v22;
  }
  if (v21 == 0.0) {
    double v24 = v23;
  }
  else {
    double v24 = v21;
  }
  if (v24 < 0.0)
  {
    *a3 = *a4;
    *a4 = v11;
    uint64_t v25 = *a2;
    double v26 = (double *)(v12 + 16 * *a3);
    double v27 = *v26;
    double v28 = v26[1];
    double v29 = (*v26 - v16) * (*v26 - v16) + (v28 - v17) * (v28 - v17);
    double v30 = (double *)(v12 + 16 * *a2);
    double v31 = v30[1];
    double v32 = v29 - ((*v30 - v16) * (*v30 - v16) + (v31 - v17) * (v31 - v17));
    double v33 = v28 - v31;
    double v34 = v27 - *v30;
    if (v34 == 0.0) {
      double v34 = v33;
    }
    if (v32 == 0.0) {
      double v35 = v34;
    }
    else {
      double v35 = v32;
    }
    if (v35 < 0.0)
    {
      *a2 = *a3;
      *a3 = v25;
      uint64_t v36 = *a1;
      uint64_t v37 = (double *)(v12 + 16 * *a2);
      double v38 = v37[1];
      double v39 = (double *)(v12 + 16 * *a1);
      double v40 = v39[1];
      double v41 = (*v37 - v16) * (*v37 - v16)
          + (v38 - v17) * (v38 - v17)
          - ((*v39 - v16) * (*v39 - v16)
           + (v40 - v17) * (v40 - v17));
      double v42 = *v37 - *v39;
      if (v42 == 0.0) {
        double v42 = v38 - v40;
      }
      if (v41 == 0.0) {
        double v41 = v42;
      }
      if (v41 < 0.0)
      {
        *a1 = *a2;
        *a2 = v36;
      }
    }
  }
  return result;
}

uint64_t sub_111A220(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, double *a6)
{
  uint64_t result = sub_111A070(a1, a2, a3, a4, a6);
  uint64_t v13 = *a4;
  uint64_t v14 = **(void **)a6;
  double v15 = (double *)(v14 + 16 * *a5);
  double v16 = *v15;
  double v17 = v15[1];
  double v18 = a6[1];
  double v19 = a6[2];
  double v20 = (*v15 - v18) * (*v15 - v18) + (v17 - v19) * (v17 - v19);
  double v21 = (double *)(v14 + 16 * *a4);
  double v22 = v21[1];
  double v23 = v20 - ((*v21 - v18) * (*v21 - v18) + (v22 - v19) * (v22 - v19));
  double v24 = v17 - v22;
  double v25 = v16 - *v21;
  if (v25 == 0.0) {
    double v25 = v24;
  }
  if (v23 == 0.0) {
    double v26 = v25;
  }
  else {
    double v26 = v23;
  }
  if (v26 < 0.0)
  {
    *a4 = *a5;
    *a5 = v13;
    uint64_t v27 = *a3;
    double v28 = (double *)(v14 + 16 * *a4);
    double v29 = *v28;
    double v30 = v28[1];
    double v31 = (*v28 - v18) * (*v28 - v18) + (v30 - v19) * (v30 - v19);
    double v32 = (double *)(v14 + 16 * *a3);
    double v33 = v32[1];
    double v34 = v31 - ((*v32 - v18) * (*v32 - v18) + (v33 - v19) * (v33 - v19));
    double v35 = v30 - v33;
    double v36 = v29 - *v32;
    if (v36 == 0.0) {
      double v36 = v35;
    }
    if (v34 == 0.0) {
      double v37 = v36;
    }
    else {
      double v37 = v34;
    }
    if (v37 < 0.0)
    {
      *a3 = *a4;
      *a4 = v27;
      uint64_t v38 = *a2;
      double v39 = (double *)(v14 + 16 * *a3);
      double v40 = *v39;
      double v41 = v39[1];
      double v42 = (*v39 - v18) * (*v39 - v18) + (v41 - v19) * (v41 - v19);
      double v43 = (double *)(v14 + 16 * *a2);
      double v44 = v43[1];
      double v45 = v42 - ((*v43 - v18) * (*v43 - v18) + (v44 - v19) * (v44 - v19));
      double v46 = v41 - v44;
      double v47 = v40 - *v43;
      if (v47 == 0.0) {
        double v47 = v46;
      }
      if (v45 == 0.0) {
        double v48 = v47;
      }
      else {
        double v48 = v45;
      }
      if (v48 < 0.0)
      {
        *a2 = *a3;
        *a3 = v38;
        uint64_t v49 = *a1;
        double v50 = (double *)(v14 + 16 * *a2);
        double v51 = v50[1];
        double v52 = (double *)(v14 + 16 * *a1);
        double v53 = v52[1];
        double v54 = (*v50 - v18) * (*v50 - v18)
            + (v51 - v19) * (v51 - v19)
            - ((*v52 - v18) * (*v52 - v18)
             + (v53 - v19) * (v53 - v19));
        double v55 = *v50 - *v52;
        if (v55 == 0.0) {
          double v55 = v51 - v53;
        }
        if (v54 == 0.0) {
          double v54 = v55;
        }
        if (v54 < 0.0)
        {
          *a1 = *a2;
          *a2 = v49;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_111A448(uint64_t *a1, uint64_t *a2, uint64_t *a3, double *a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[v10];
      do
      {
        sub_111A6D4((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        uint64_t v15 = *v14;
        uint64_t v16 = **(void **)a4;
        double v17 = (double *)(v16 + 16 * *v14);
        double v18 = v17[1];
        double v19 = a4[1];
        double v20 = (double *)(v16 + 16 * *a1);
        double v21 = v20[1];
        double v22 = (*v17 - v19) * (*v17 - v19)
            + (v18 - a4[2]) * (v18 - a4[2])
            - ((*v20 - v19) * (*v20 - v19)
             + (v21 - a4[2]) * (v21 - a4[2]));
        double v23 = v18 - v21;
        double v24 = *v17 - *v20;
        if (v24 == 0.0) {
          double v24 = v23;
        }
        if (v22 == 0.0) {
          double v25 = v24;
        }
        else {
          double v25 = v22;
        }
        if (v25 < 0.0)
        {
          *uint64_t v14 = *a1;
          *a1 = v15;
          sub_111A6D4((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v26 = (unint64_t)v8 >> 3;
      do
      {
        while (1)
        {
          uint64_t v28 = 0;
          uint64_t v29 = *a1;
          double v30 = *(uint64_t **)a4;
          double v31 = a4[1];
          double v32 = a4[2];
          double v33 = a1;
          do
          {
            double v34 = v33;
            v33 += v28 + 1;
            uint64_t v35 = 2 * v28;
            uint64_t v28 = (2 * v28) | 1;
            uint64_t v36 = v35 + 2;
            if (v36 < v26)
            {
              double v37 = (double *)(*v30 + 16 * *v33);
              double v38 = *v37;
              double v39 = v37[1];
              double v40 = (*v37 - v31) * (*v37 - v31) + (v39 - v32) * (v39 - v32);
              double v41 = (double *)(*v30 + 16 * v33[1]);
              double v42 = v41[1];
              double v43 = v40 - ((*v41 - v31) * (*v41 - v31) + (v42 - v32) * (v42 - v32));
              double v44 = v39 - v42;
              double v45 = v38 - *v41;
              if (v45 == 0.0) {
                double v45 = v44;
              }
              if (v43 == 0.0) {
                double v46 = v45;
              }
              else {
                double v46 = v43;
              }
              if (v46 < 0.0)
              {
                ++v33;
                uint64_t v28 = v36;
              }
            }
            *double v34 = *v33;
          }
          while (v28 <= (uint64_t)((unint64_t)(v26 - 2) >> 1));
          if (v33 == --v6) {
            break;
          }
          uint64_t *v33 = *v6;
          *uint64_t v6 = v29;
          sub_111A904((uint64_t)a1, (uint64_t)(v33 + 1), a4, v33 + 1 - a1);
          BOOL v27 = v26-- <= 2;
          if (v27) {
            return v13;
          }
        }
        uint64_t *v33 = v29;
        BOOL v27 = v26-- <= 2;
      }
      while (!v27);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_111A6D4(uint64_t result, double *a2, uint64_t a3, uint64_t *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v5 = ((uint64_t)a4 - result) >> 2;
      uint64_t v6 = v5 + 1;
      double v7 = (uint64_t *)(result + 8 * (v5 + 1));
      uint64_t v8 = v5 + 2;
      uint64_t v9 = **(void **)a2;
      if (v8 >= a3)
      {
        double v13 = a2[1];
        double v14 = a2[2];
      }
      else
      {
        unint64_t v10 = (double *)(v9 + 16 * *v7);
        double v11 = *v10;
        double v12 = v10[1];
        double v13 = a2[1];
        double v14 = a2[2];
        double v15 = (*v10 - v13) * (*v10 - v13) + (v12 - v14) * (v12 - v14);
        uint64_t v16 = (double *)(v9 + 16 * v7[1]);
        double v17 = v16[1];
        double v18 = v15 - ((*v16 - v13) * (*v16 - v13) + (v17 - v14) * (v17 - v14));
        double v19 = v12 - v17;
        double v20 = v11 - *v16;
        if (v20 == 0.0) {
          double v20 = v19;
        }
        if (v18 == 0.0) {
          double v21 = v20;
        }
        else {
          double v21 = v18;
        }
        if (v21 < 0.0)
        {
          ++v7;
          uint64_t v6 = v8;
        }
      }
      uint64_t v22 = *v7;
      uint64_t v23 = *a4;
      double v24 = (double *)(v9 + 16 * *v7);
      double v25 = *v24;
      double v26 = v24[1];
      double v27 = (*v24 - v13) * (*v24 - v13) + (v26 - v14) * (v26 - v14);
      uint64_t v28 = (double *)(v9 + 16 * *a4);
      double v29 = *v28;
      double v30 = v28[1];
      double v31 = (*v28 - v13) * (*v28 - v13) + (v30 - v14) * (v30 - v14);
      double v32 = v27 - v31;
      double v33 = v26 - v30;
      double v34 = v25 - *v28;
      if (v34 == 0.0) {
        double v34 = v33;
      }
      if (v32 == 0.0) {
        double v35 = v34;
      }
      else {
        double v35 = v32;
      }
      if (v35 >= 0.0)
      {
        do
        {
          double v42 = v7;
          *a4 = v22;
          if (v4 < v6) {
            break;
          }
          uint64_t v43 = 2 * v6;
          uint64_t v6 = (2 * v6) | 1;
          double v7 = (uint64_t *)(result + 8 * v6);
          uint64_t v44 = v43 + 2;
          if (v44 < a3)
          {
            double v45 = (double *)(v9 + 16 * *v7);
            double v46 = *v45;
            double v47 = v45[1];
            double v48 = (*v45 - v13) * (*v45 - v13) + (v47 - v14) * (v47 - v14);
            uint64_t v49 = (double *)(v9 + 16 * v7[1]);
            double v50 = v49[1];
            double v51 = v48 - ((*v49 - v13) * (*v49 - v13) + (v50 - v14) * (v50 - v14));
            double v52 = v47 - v50;
            double v53 = v46 - *v49;
            if (v53 == 0.0) {
              double v53 = v52;
            }
            if (v51 == 0.0) {
              double v54 = v53;
            }
            else {
              double v54 = v51;
            }
            if (v54 < 0.0)
            {
              ++v7;
              uint64_t v6 = v44;
            }
          }
          uint64_t v22 = *v7;
          uint64_t v36 = (double *)(v9 + 16 * *v7);
          double v37 = v36[1];
          double v38 = (v37 - v14) * (v37 - v14);
          double v39 = v37 - v30;
          double v40 = *v36 - v29;
          if (v40 == 0.0) {
            double v40 = v39;
          }
          double v41 = (*v36 - v13) * (*v36 - v13) + v38 - v31 == 0.0 ? v40 : (*v36 - v13) * (*v36 - v13) + v38 - v31;
          a4 = v42;
        }
        while (v41 >= 0.0);
        uint64_t *v42 = v23;
      }
    }
  }
  return result;
}

uint64_t sub_111A904(uint64_t result, uint64_t a2, double *a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v5 = (void *)(result + 8 * v4);
    uint64_t v6 = *v5;
    uint64_t v9 = *(void *)(a2 - 8);
    double v7 = (void *)(a2 - 8);
    uint64_t v8 = v9;
    uint64_t v10 = **(void **)a3;
    double v11 = (double *)(v10 + 16 * *v5);
    double v12 = *v11;
    double v13 = v11[1];
    double v14 = a3[1];
    double v15 = a3[2];
    double v16 = (*v11 - v14) * (*v11 - v14) + (v13 - v15) * (v13 - v15);
    double v17 = (double *)(v10 + 16 * v9);
    double v18 = *v17;
    double v19 = v17[1];
    double v20 = (*v17 - v14) * (*v17 - v14) + (v19 - v15) * (v19 - v15);
    double v21 = v16 - v20;
    double v22 = v13 - v19;
    double v23 = v12 - *v17;
    if (v23 == 0.0) {
      double v23 = v22;
    }
    if (v21 == 0.0) {
      double v24 = v23;
    }
    else {
      double v24 = v21;
    }
    if (v24 < 0.0)
    {
      do
      {
        double v25 = v5;
        *double v7 = v6;
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        uint64_t v5 = (void *)(result + 8 * v4);
        uint64_t v6 = *v5;
        double v26 = (double *)(v10 + 16 * *v5);
        double v27 = v26[1];
        double v28 = (v27 - v15) * (v27 - v15);
        double v29 = v27 - v19;
        double v30 = *v26 - v18;
        if (v30 == 0.0) {
          double v30 = v29;
        }
        double v31 = (*v26 - v14) * (*v26 - v14) + v28 - v20 == 0.0 ? v30 : (*v26 - v14) * (*v26 - v14) + v28 - v20;
        double v7 = v25;
      }
      while (v31 < 0.0);
      *double v25 = v8;
    }
  }
  return result;
}

void sub_111A9FC(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      uint64_t v6 = &v5[8 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    double v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      sub_2E00();
    }
    uint64_t v11 = v4 - (void)v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        sub_188D718();
      }
      double v13 = operator new(8 * v12);
    }
    else
    {
      double v13 = 0;
    }
    double v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    double v16 = &v13[8 * v12];
    bzero(v14, v15);
    double v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 8;
      if (v18 < 0x58) {
        goto LABEL_31;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v6 = &v5[-v20];
      v14 -= v20;
      double v21 = &v13[8 * v9 - 16];
      double v22 = v5 - 16;
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        _OWORD *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          uint64_t v25 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

uint64_t sub_111ABAC(uint64_t a1)
{
  return a1;
}

void *sub_111ABDC(void *result, uint64_t a2, uint64_t a3)
{
  if (!a2 && a3)
  {
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    void *exception = &off_2441C70;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/agent.cc";
    exception[2] = 0x200000015;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/agent.cc:21: MARISA_NULL_ERROR: (ptr == NULL)"
                   " && (length != 0)";
  }
  uint64_t v3 = result[5];
  if (v3) {
    *(_DWORD *)(v3 + 108) = 0;
  }
  *uint64_t result = a2;
  result[1] = a3;
  return result;
}

void **sub_111AC68(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 40);
  if (*(void *)(a1 + 40))
  {
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    void *exception = &off_2441C70;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/agent.cc";
    exception[2] = 0x100000024;
    uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/agent.cc:36: MARISA_STATE_ERROR: state_.get() != NULL";
    goto LABEL_8;
  }
  uint64_t v2 = operator new(0x70uLL, &std::nothrow);
  if (v2)
  {
    *(_OWORD *)((char *)v2 + 25) = 0u;
    *uint64_t v2 = 0u;
    v2[1] = 0u;
    v2[3] = 0u;
    v2[4] = 0u;
    *(_OWORD *)((char *)v2 + 73) = 0u;
    *((void *)v2 + 12) = 0;
    *((void *)v2 + 13) = 0;
  }
  uint64_t result = sub_111AD74(v1, (uint64_t)v2);
  if (!*v1)
  {
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    void *exception = &off_2441C70;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/agent.cc";
    exception[2] = 0x800000026;
    uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/agent.cc:38: MARISA_MEMORY_ERROR: state_.get() == NULL";
LABEL_8:
    exception[3] = v5;
  }
  return result;
}

void **sub_111AD74(void *a1, uint64_t a2)
{
  if (a2 && *a1 == a2)
  {
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    void *exception = &off_2441C70;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/include/marisa/scoped-ptr.h";
    exception[2] = 0x600000013;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/include/marisa/scoped-ptr.h:19: MARISA_RESET_ERROR: (ptr"
                   " != NULL) && (ptr == ptr_)";
  }
  uint64_t v4 = (void *)*a1;
  *a1 = a2;
  return sub_111AE50(&v4);
}

void sub_111AE10(std::exception *a1)
{
  std::exception::~exception(a1);

  operator delete();
}

uint64_t sub_111AE48(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

void **sub_111AE50(void **result)
{
  uint64_t v1 = *result;
  if (*result)
  {
    if (v1[6]) {
      operator delete[]();
    }
    if (*v1) {
      operator delete[]();
    }
    operator delete();
  }
  return result;
}

uint64_t sub_111AECC(uint64_t result)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = -1;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = -1;
  return result;
}

uint64_t sub_111AEE4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2 != (void *)-1) {
    munmap(v2, *(void *)(a1 + 24));
  }
  int v3 = *(_DWORD *)(a1 + 32);
  if (v3 != -1) {
    close(v3);
  }
  return a1;
}

uint64_t *sub_111AF34(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *uint64_t result = *a2;
  *a2 = v2;
  uint64_t v4 = result[1];
  uint64_t v3 = result[2];
  uint64_t v5 = a2[2];
  result[1] = a2[1];
  result[2] = v5;
  a2[1] = v4;
  a2[2] = v3;
  uint64_t v6 = result[3];
  result[3] = a2[3];
  a2[3] = v6;
  LODWORD(v6) = *((_DWORD *)result + 8);
  *((_DWORD *)result + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  return result;
}

uint64_t sub_111AF78(long long *a1, uint64_t a2, uint64_t a3)
{
  if (!a2 && a3)
  {
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    void *exception = &off_2441C70;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x20000003FLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc:63: MARISA_NULL_ERROR: "
                   "(ptr == NULL) && (size != 0)";
  }
  long long v3 = *a1;
  long long v4 = a1[1];
  *(void *)a1 = a2;
  *((void *)a1 + 1) = -1;
  *((void *)a1 + 2) = a3;
  *((void *)a1 + 3) = 0;
  v8[0] = v3;
  v8[1] = v4;
  int v5 = *((_DWORD *)a1 + 8);
  *((_DWORD *)a1 + 8) = -1;
  int v9 = v5;
  return sub_111AEE4((uint64_t)v8);
}

uint64_t sub_111B028(uint64_t *a1, unint64_t a2)
{
  if (!*a1)
  {
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    void *exception = &off_2441C70;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x100000047;
    long long v4 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc:71: MARISA_STATE_ERROR: !is_open()";
    goto LABEL_8;
  }
  if (a1[2] < a2)
  {
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    void *exception = &off_2441C70;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x900000048;
    long long v4 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc:72: MARISA_IO_ERROR: size > avail_";
LABEL_8:
    exception[3] = v4;
  }

  return sub_111B104(a1, a2);
}

uint64_t sub_111B104(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (!*a1)
  {
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    void *exception = &off_2441C70;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x100000063;
    uint64_t v8 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc:99: MARISA_STATE_ERROR: !is_open()";
LABEL_6:
    exception[3] = v8;
  }
  unint64_t v3 = a1[2];
  BOOL v4 = v3 >= a2;
  unint64_t v5 = v3 - a2;
  if (!v4)
  {
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    void *exception = &off_2441C70;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x900000064;
    uint64_t v8 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc:100: MARISA_IO_ERROR: size > avail_";
    goto LABEL_6;
  }
  *a1 = v2 + a2;
  a1[2] = v5;
  return v2;
}

uint64_t sub_111B1E0(uint64_t a1)
{
  *(_OWORD *)(a1 + 25) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 137) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 185) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 89) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 233) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 345) = 0u;
  *(_OWORD *)(a1 + 393) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 297) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 441) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 553) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 601) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 505) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 649) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 697) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(void *)(a1 + 720) = 0;
  *(_DWORD *)(a1 + 728) = 0;
  *(void *)(a1 + 736) = 0;
  sub_111DA84((_OWORD *)(a1 + 744));
  *(unsigned char *)(a1 + 1048) = 0;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(void *)(a1 + 1072) = 3;
  *(void *)(a1 + 1080) = 0x100000000200;
  *(_DWORD *)(a1 + 1088) = 0x20000;
  sub_111AECC(a1 + 1096);
  return a1;
}

void sub_111B304(_Unwind_Exception *a1)
{
  if (v1[126]) {
    operator delete[]();
  }
  sub_111D9CC(v5);
  sub_111B394(v4);
  if (*v7) {
    operator delete[]();
  }
  if (*v6) {
    operator delete[]();
  }
  sub_111B444(v3);
  sub_111B444(v2);
  sub_111B444(v1);
  _Unwind_Resume(a1);
}

void *sub_111B394(void *result)
{
  if (result[26]) {
    operator delete[]();
  }
  if (result[20]) {
    operator delete[]();
  }
  if (result[14]) {
    operator delete[]();
  }
  if (result[6]) {
    operator delete[]();
  }
  if (*result) {
    operator delete[]();
  }
  return result;
}

void *sub_111B444(void *result)
{
  if (result[20]) {
    operator delete[]();
  }
  if (result[14]) {
    operator delete[]();
  }
  if (result[8]) {
    operator delete[]();
  }
  if (*result) {
    operator delete[]();
  }
  return result;
}

void *sub_111B4DC(void *a1)
{
  if (a1[126]) {
    operator delete[]();
  }
  sub_111D9CC(a1 + 125);
  if (a1[119]) {
    operator delete[]();
  }
  if (a1[113]) {
    operator delete[]();
  }
  if (a1[107]) {
    operator delete[]();
  }
  if (a1[99]) {
    operator delete[]();
  }
  if (a1[93]) {
    operator delete[]();
  }
  if (a1[84]) {
    operator delete[]();
  }
  if (a1[78]) {
    operator delete[]();
  }
  if (a1[72]) {
    operator delete[]();
  }
  if (a1[66]) {
    operator delete[]();
  }
  if (a1[60]) {
    operator delete[]();
  }
  if (a1[52]) {
    operator delete[]();
  }
  if (a1[46]) {
    operator delete[]();
  }
  if (a1[40]) {
    operator delete[]();
  }
  if (a1[34]) {
    operator delete[]();
  }
  if (a1[26]) {
    operator delete[]();
  }
  if (a1[20]) {
    operator delete[]();
  }
  if (a1[14]) {
    operator delete[]();
  }
  if (a1[8]) {
    operator delete[]();
  }
  if (*a1) {
    operator delete[]();
  }
  return a1;
}

uint64_t *sub_111B740(uint64_t a1, uint64_t a2)
{
  sub_111C2C8((uint64_t *)a1, (uint64_t *)a2);
  sub_111C2C8((uint64_t *)(a1 + 208), (uint64_t *)(a2 + 208));
  sub_111C2C8((uint64_t *)(a1 + 416), (uint64_t *)(a2 + 416));
  sub_111C340((uint64_t *)(a1 + 624), (uint64_t *)(a2 + 624));
  sub_111C340((uint64_t *)(a1 + 672), (uint64_t *)(a2 + 672));
  uint64_t v4 = *(void *)(a1 + 720);
  *(void *)(a1 + 720) = *(void *)(a2 + 720);
  *(void *)(a2 + 720) = v4;
  LODWORD(v4) = *(_DWORD *)(a1 + 728);
  *(_DWORD *)(a1 + 728) = *(_DWORD *)(a2 + 728);
  *(_DWORD *)(a2 + 728) = v4;
  uint64_t v5 = *(void *)(a1 + 736);
  *(void *)(a1 + 736) = *(void *)(a2 + 736);
  *(void *)(a2 + 736) = v5;
  sub_111DAB8((uint64_t *)(a1 + 744), (uint64_t *)(a2 + 744));
  uint64_t v6 = *(void *)(a1 + 1000);
  *(void *)(a1 + 1000) = *(void *)(a2 + 1000);
  *(void *)(a2 + 1000) = v6;
  sub_111C340((uint64_t *)(a1 + 1008), (uint64_t *)(a2 + 1008));
  uint64_t v7 = *(void *)(a1 + 1056);
  *(void *)(a1 + 1056) = *(void *)(a2 + 1056);
  *(void *)(a2 + 1056) = v7;
  uint64_t v8 = *(void *)(a1 + 1064);
  *(void *)(a1 + 1064) = *(void *)(a2 + 1064);
  *(void *)(a2 + 1064) = v8;
  uint64_t v9 = *(void *)(a1 + 1072);
  *(void *)(a1 + 1072) = *(void *)(a2 + 1072);
  *(void *)(a2 + 1072) = v9;
  uint64_t v10 = *(void *)(a1 + 1080);
  *(void *)(a1 + 1080) = *(void *)(a2 + 1080);
  *(void *)(a2 + 1080) = v10;
  LODWORD(v9) = *(_DWORD *)(a1 + 1088);
  *(_DWORD *)(a1 + 1088) = *(_DWORD *)(a2 + 1088);
  *(_DWORD *)(a2 + 1088) = v9;

  return sub_111AF34((uint64_t *)(a1 + 1096), (uint64_t *)(a2 + 1096));
}

void *sub_111B858(uint64_t a1, uint64_t *a2)
{
  sub_111B8E0((uint64_t)v5, a2);
  sub_111B1E0((uint64_t)v5);
  sub_111B9A0((uint64_t)v5, a2);
  sub_111AF34(v6, a2);
  sub_111B740(a1, (uint64_t)v5);
  return sub_111B4DC(v5);
}

void sub_111B8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned char *sub_111B8E0(uint64_t a1, uint64_t *a2)
{
  uint64_t result = (unsigned char *)sub_111B104(a2, 0x10uLL);
  if (*result != 87) {
    goto LABEL_7;
  }
  uint64_t v3 = 1;
  do
  {
    if (v3 == 16) {
      return result;
    }
    int v4 = result[v3];
    int v5 = aWeLoveMarisa[v3++];
  }
  while (v4 == v5);
  if ((unint64_t)(v3 - 2) <= 0xE)
  {
LABEL_7:
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    void *exception = &off_2441C70;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/header.h";
    exception[2] = 0xA00000015;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/header.h:21: MARISA_FORMAT_ERRO"
                   "R: !test_header(ptr)";
  }
  return result;
}

double sub_111B9A0(uint64_t a1, uint64_t *a2)
{
  sub_111C430((uint64_t *)a1, a2);
  sub_111C430((uint64_t *)(a1 + 208), a2);
  sub_111C430((uint64_t *)(a1 + 416), a2);
  sub_111C51C((long long *)(a1 + 624), a2);
  sub_111C5DC((long long *)(a1 + 672), a2);
  sub_111DAF8(a1 + 744, a2);
  if (*(void *)(a1 + 472) && !*(void *)(a1 + 768))
  {
    int v4 = operator new(0x470uLL, &std::nothrow);
    uint64_t v5 = (uint64_t)v4;
    if (v4) {
      sub_111B1E0((uint64_t)v4);
    }
    sub_111C394((void *)(a1 + 1000), v5);
    uint64_t v6 = *(void *)(a1 + 1000);
    if (!v6)
    {
      exceptioint n = __cxa_allocate_exception(0x20uLL);
      void *exception = &off_2441C70;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc";
      exception[2] = 0x80000021ELL;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc:542: MARISA_MEM"
                     "ORY_ERROR: next_trie_.get() == NULL";
    }
    sub_111B9A0(v6, a2);
  }
  sub_111C6D8((long long *)(a1 + 1008), a2);
  *(void *)(a1 + 1056) = *(void *)(a1 + 1032) - 1;
  *(void *)(a1 + 1064) = *(unsigned int *)sub_111B104(a2, 4uLL);
  unsigned int v7 = *(_DWORD *)sub_111B104(a2, 4uLL);
  uint64_t v10 = 3;
  *(void *)&double v11 = 0x100000000200;
  int v12 = 0x20000;
  sub_111CB5C(&v10, v7);
  *(void *)(a1 + 1072) = v10;
  double result = v11;
  *(double *)(a1 + 1080) = v11;
  *(_DWORD *)(a1 + 1088) = v12;
  return result;
}

void sub_111BB3C(_Unwind_Exception *a1)
{
  operator delete(v1, &std::nothrow);
  _Unwind_Resume(a1);
}

uint64_t *sub_111BB58(uint64_t *result, unsigned char *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result[3];
  uint64_t v5 = result[4];
  size_t v6 = v4 + 1;
  if (v5 < (unint64_t)(v4 + 1))
  {
    uint64_t v7 = 2 * v5;
    if (v5 < 0) {
      uint64_t v7 = -1;
    }
    if (v5 <= v6 >> 1) {
      size_t v8 = v6;
    }
    else {
      size_t v8 = v7;
    }
    double result = (uint64_t *)sub_111CE18(result, v8);
    uint64_t v4 = v3[3];
  }
  *(unsigned char *)(v3[1] + v4) = *a2;
  ++v3[3];
  return result;
}

uint64_t sub_111BBC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 40);
  int v5 = *(_DWORD *)(v4 + 108);
  if (v5 == 2)
  {
    do
    {
      while (1)
      {
LABEL_10:
        uint64_t v10 = *(unsigned int *)(v4 + 104);
        if (*(void *)(v4 + 72) == v10)
        {
          uint64_t v11 = *(void *)(v4 + 56) + 20 * v10;
          *(_OWORD *)double v40 = xmmword_20EB790;
          *(_DWORD *)&v40[16] = -1;
          int v12 = sub_111E048((void *)a1, *(unsigned int *)(v11 - 20));
          *(_DWORD *)&v40[4] = v12 + 1;
          *(_DWORD *)double v40 = v12 - *(_DWORD *)(v11 - 20);
          sub_111C1EC((uint64_t *)(v4 + 48), (__n128 *)v40);
          LODWORD(v10) = *(_DWORD *)(v4 + 104);
        }
        uint64_t v13 = *(void *)(v4 + 56);
        double v14 = (unsigned int *)(v13 + 20 * v10);
        unint64_t v15 = v14[1];
        unint64_t v16 = *(void *)(*(void *)(a1 + 16) + ((v15 >> 3) & 0x1FFFFFF8));
        v14[1] = v15 + 1;
        if ((v16 >> v15)) {
          break;
        }
        if (v10 == 1)
        {
LABEL_7:
          uint64_t result = 0;
          *(_DWORD *)(v4 + 108) = 4;
          return result;
        }
        uint64_t v23 = v13 + 20 * v10;
        ++*(_DWORD *)(v23 - 20);
        sub_111C278((uint64_t *)v4, *(unsigned int *)(v23 - 32));
        --*(_DWORD *)(v4 + 104);
      }
      *(_DWORD *)(v4 + 104) = v10 + 1;
      unint64_t v17 = *v14;
      if ((*(void *)(*(void *)(a1 + 432) + ((v17 >> 3) & 0x1FFFFFF8)) >> v17))
      {
        uint64_t v18 = v13 + 20 * v10;
        int v21 = *(_DWORD *)(v18 + 12);
        uint64_t v20 = (unsigned int *)(v18 + 12);
        int v19 = v21;
        if (v21 == -1)
        {
          unsigned int v22 = sub_111DF00(a1 + 416, v17);
          unint64_t v17 = *v14;
        }
        else
        {
          unsigned int v22 = v19 + 1;
        }
        *uint64_t v20 = v22;
        uint64_t v24 = *(void *)(a1 + 720);
        unint64_t v25 = v24 * v22;
        unint64_t v26 = v25 >> 6;
        uint64_t v27 = v25 & 0x3F;
        unint64_t v28 = v27 + v24;
        uint64_t v29 = *(void *)(a1 + 688);
        unint64_t v30 = *(void *)(v29 + 8 * v26);
        if (v28 > 0x40) {
          uint64_t v31 = ((2 * *(void *)(v29 + 8 * v26 + 8)) << (v27 ^ 0x3Fu)) | (v30 >> v27);
        }
        else {
          uint64_t v31 = v30 >> v27;
        }
        unint64_t v32 = *(unsigned __int8 *)(*(void *)(a1 + 640) + v17) | ((*(_DWORD *)(a1 + 728) & v31) << 8);
        uint64_t v33 = *(void *)(a1 + 1000);
        if (v33) {
          sub_111C798(v33, a2, v32);
        }
        else {
          sub_111DC64((uint64_t *)(a1 + 744), a2, v32);
        }
      }
      else
      {
        v40[0] = *(unsigned char *)(*(void *)(a1 + 640) + v17);
        sub_111BB58((uint64_t *)v4, v40);
      }
      int v34 = *(_DWORD *)(v4 + 24);
      *(_DWORD *)(v13 + 20 * v10 + 8) = v34;
      unint64_t v35 = *v14;
    }
    while (((*(void *)(*(void *)(a1 + 224) + ((v35 >> 3) & 0x1FFFFFF8)) >> v35) & 1) == 0);
    uint64_t v36 = v13 + 20 * v10;
    int v39 = *(_DWORD *)(v36 + 16);
    double v38 = (_DWORD *)(v36 + 16);
    int v37 = v39;
    if (v39 == -1)
    {
      int v9 = sub_111DF00(a1 + 208, v35);
      int v34 = *(_DWORD *)(v4 + 24);
    }
    else
    {
      int v9 = v37 + 1;
    }
    *double v38 = v9;
    *(void *)(a2 + 24) = *(void *)(v4 + 8);
    *(_DWORD *)(a2 + 32) = v34;
  }
  else
  {
    if (v5 == 4) {
      return 0;
    }
    sub_111BEF4(*(void *)(a2 + 40));
    while (*(void *)(a2 + 8) > (unint64_t)*(unsigned int *)(v4 + 100))
    {
      if ((sub_111BF78(a1, (void *)a2) & 1) == 0) {
        goto LABEL_7;
      }
    }
    *(void *)&v40[12] = -1;
    *(void *)double v40 = *(unsigned int *)(v4 + 96);
    *(_DWORD *)&v40[8] = *(void *)(v4 + 24);
    sub_111C1EC((uint64_t *)(v4 + 48), (__n128 *)v40);
    *(_DWORD *)(v4 + 104) = 1;
    unint64_t v7 = *(unsigned int *)(v4 + 96);
    if (((*(void *)(*(void *)(a1 + 224) + ((v7 >> 3) & 0x1FFFFFF8)) >> v7) & 1) == 0) {
      goto LABEL_10;
    }
    uint64_t v8 = *(void *)(v4 + 24);
    *(void *)(a2 + 24) = *(void *)(v4 + 8);
    *(_DWORD *)(a2 + 32) = v8;
    int v9 = sub_111DF00(a1 + 208, v7);
  }
  *(_DWORD *)(a2 + 36) = v9;
  return 1;
}

double sub_111BEF4(uint64_t a1)
{
  *(void *)(a1 + 24) = 0;
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 <= 0x3F)
  {
    if (v2 <= 0x20) {
      size_t v3 = 64;
    }
    else {
      size_t v3 = 2 * v2;
    }
    sub_111CE18((uint64_t *)a1, v3);
  }
  sub_111CEB0((uint64_t *)(a1 + 48), 0);
  unint64_t v4 = *(void *)(a1 + 80);
  if (v4 <= 3)
  {
    if (v4 == 3) {
      uint64_t v5 = 6;
    }
    else {
      uint64_t v5 = 4;
    }
    sub_111CF48((uint64_t *)(a1 + 48), v5);
  }
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = xmmword_20F4B80;
  return result;
}

uint64_t sub_111BF78(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[5];
  unint64_t v5 = *(unsigned int *)(v4 + 96);
  unint64_t v6 = (*(unsigned __int8 *)(*a2 + *(unsigned int *)(v4 + 100)) ^ (32 * v5) ^ v5) & *(void *)(a1 + 1056);
  uint64_t v7 = *(void *)(a1 + 1024);
  if (v5 != *(_DWORD *)(v7 + 12 * v6))
  {
    unint64_t v10 = sub_111E048((void *)a1, v5);
    uint64_t v11 = *(void *)(a1 + 16);
    if ((*(void *)(v11 + (((v10 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v10 + 1)))
    {
      unsigned int v12 = v10 - *(_DWORD *)(v4 + 96);
      *(_DWORD *)(v4 + 96) = v12;
      unint64_t v13 = v10 + 2;
      uint64_t v14 = 0xFFFFFFFFLL;
      while (1)
      {
        uint64_t v15 = v12;
        if ((*(void *)(*(void *)(a1 + 432) + (((unint64_t)v12 >> 3) & 0x1FFFFFF8)) >> v12))
        {
          if (v14 == 0xFFFFFFFFLL)
          {
            uint64_t v14 = sub_111DF00(a1 + 416, v12);
            uint64_t v15 = *(unsigned int *)(v4 + 96);
          }
          else
          {
            ++v14;
          }
          int v16 = *(_DWORD *)(v4 + 100);
          uint64_t v17 = *(void *)(a1 + 720);
          unint64_t v18 = (unint64_t)(v17 * v14) >> 6;
          uint64_t v19 = (v17 * v14) & 0x3F;
          unint64_t v20 = v19 + v17;
          uint64_t v21 = *(void *)(a1 + 688);
          uint64_t v22 = *(void *)(v21 + 8 * v18) >> v19;
          if (v20 > 0x40) {
            v22 |= (2 * *(void *)(v21 + 8 * v18 + 8)) << (v19 ^ 0x3Fu);
          }
          unint64_t v23 = *(unsigned __int8 *)(*(void *)(a1 + 640) + v15) | ((*(_DWORD *)(a1 + 728) & v22) << 8);
          uint64_t v24 = *(void *)(a1 + 1000);
          if (v24)
          {
            if (sub_111C940(v24, a2, v23)) {
              return 1;
            }
          }
          else if (sub_111DCF0((void *)(a1 + 744), a2, v23))
          {
            return 1;
          }
          if (*(_DWORD *)(v4 + 100) != v16) {
            return 0;
          }
          unsigned int v12 = *(_DWORD *)(v4 + 96);
          uint64_t v11 = *(void *)(a1 + 16);
        }
        else if (*(unsigned __int8 *)(*(void *)(a1 + 640) + v12) == *(unsigned __int8 *)(*a2 {
                                                                                          + *(unsigned int *)(v4 + 100)))
        }
        {
          char v28 = *(unsigned char *)(*(void *)(a1 + 640) + v12);
          sub_111BB58((uint64_t *)v4, &v28);
          ++*(_DWORD *)(v4 + 100);
          return 1;
        }
        *(_DWORD *)(v4 + 96) = ++v12;
        uint64_t v25 = *(void *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13;
        ++v13;
        if ((v25 & 1) == 0) {
          return 0;
        }
      }
    }
    return 0;
  }
  uint64_t v8 = v7 + 12 * v6;
  unint64_t v9 = *(unsigned int *)(v8 + 8);
  if (v9 > 0xFFFFFEFF)
  {
    char v29 = *(_DWORD *)(v8 + 8);
    sub_111BB58((uint64_t *)v4, &v29);
    ++*(_DWORD *)(v4 + 100);
    goto LABEL_24;
  }
  uint64_t v26 = *(void *)(a1 + 1000);
  if (v26)
  {
    if (sub_111C940(v26, a2, v9)) {
      goto LABEL_24;
    }
    return 0;
  }
  if ((sub_111DCF0((void *)(a1 + 744), a2, v9) & 1) == 0) {
    return 0;
  }
LABEL_24:
  *(_DWORD *)(v4 + 96) = *(_DWORD *)(*(void *)(a1 + 1024) + 12 * v6 + 4);
  return 1;
}

__n128 sub_111C1EC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4 = a1[3];
  unint64_t v5 = a1[4];
  unint64_t v6 = v4 + 1;
  if (v5 < v4 + 1)
  {
    uint64_t v7 = 2 * v5;
    if (v5 > 0x666666666666666) {
      uint64_t v7 = 0xCCCCCCCCCCCCCCCLL;
    }
    if (v5 <= v6 >> 1) {
      uint64_t v8 = v6;
    }
    else {
      uint64_t v8 = v7;
    }
    sub_111CF48(a1, v8);
    uint64_t v4 = a1[3];
  }
  unint64_t v9 = (__n128 *)(a1[1] + 20 * v4);
  __n128 result = *a2;
  v9[1].n128_u32[0] = a2[1].n128_u32[0];
  *unint64_t v9 = result;
  ++a1[3];
  return result;
}

uint64_t *sub_111C278(uint64_t *result, size_t a2)
{
  size_t v2 = a2;
  size_t v3 = result;
  uint64_t v4 = result[4];
  if (v4 < a2)
  {
    uint64_t v5 = 2 * v4;
    if (v4 < 0) {
      uint64_t v5 = -1;
    }
    if (v4 > a2 >> 1) {
      a2 = v5;
    }
    __n128 result = (uint64_t *)sub_111CE18(result, a2);
  }
  v3[3] = v2;
  return result;
}

uint64_t *sub_111C2C8(uint64_t *a1, uint64_t *a2)
{
  sub_111C340(a1, a2);
  uint64_t v4 = a1[6];
  a1[6] = a2[6];
  a2[6] = v4;
  uint64_t v5 = a1[7];
  a1[7] = a2[7];
  a2[7] = v5;
  sub_111C340(a1 + 8, a2 + 8);
  sub_111C340(a1 + 14, a2 + 14);

  return sub_111C340(a1 + 20, a2 + 20);
}

uint64_t *sub_111C340(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *__n128 result = *a2;
  *a2 = v2;
  uint64_t v3 = result[1];
  result[1] = a2[1];
  a2[1] = v3;
  uint64_t v4 = result[2];
  uint64_t v5 = result[3];
  uint64_t v6 = a2[3];
  result[2] = a2[2];
  result[3] = v6;
  a2[2] = v4;
  a2[3] = v5;
  uint64_t v7 = result[4];
  result[4] = a2[4];
  a2[4] = v7;
  LOBYTE(v7) = *((unsigned char *)result + 40);
  *((unsigned char *)result + 40) = *((unsigned char *)a2 + 40);
  *((unsigned char *)a2 + 40) = v7;
  return result;
}

void **sub_111C394(void *a1, uint64_t a2)
{
  if (a2 && *a1 == a2)
  {
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    void *exception = &off_2441C70;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/include/marisa/scoped-ptr.h";
    exception[2] = 0x600000013;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/include/marisa/scoped-ptr.h:19: MARISA_RESET_ERROR: (ptr"
                   " != NULL) && (ptr == ptr_)";
  }
  uint64_t v4 = (void *)*a1;
  *a1 = a2;
  return sub_111D9CC(&v4);
}

uint64_t sub_111C430(uint64_t *a1, uint64_t *a2)
{
  memset(v4, 0, 41);
  long long v7 = 0u;
  memset(v8, 0, sizeof(v8));
  long long v9 = 0u;
  memset(v10, 0, sizeof(v10));
  v4[3] = 0u;
  long long v5 = 0u;
  memset(v6, 0, sizeof(v6));
  sub_111CFF0((uint64_t)v4, a2);
  sub_111C2C8(a1, (uint64_t *)v4);
  if ((void)v9) {
    operator delete[]();
  }
  if ((void)v7) {
    operator delete[]();
  }
  if ((void)v5) {
    operator delete[]();
  }
  uint64_t result = *(void *)&v4[0];
  if (*(void *)&v4[0]) {
    operator delete[]();
  }
  return result;
}

void sub_111C508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_111C51C(long long *a1, uint64_t *a2)
{
  memset(v7, 0, 41);
  sub_111DA10((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    operator delete[]();
  }
  return result;
}

void sub_111C5B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_111C5DC(long long *a1, uint64_t *a2)
{
  memset(v9, 0, 41);
  uint64_t v10 = 0;
  int v11 = 0;
  uint64_t v12 = 0;
  sub_111D900((uint64_t)v9, a2);
  long long v3 = *a1;
  *a1 = v9[0];
  v9[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v9[1];
  *(void *)&v9[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v9[1] + 8);
  *(_OWORD *)((char *)&v9[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v9[2]);
  BYTE8(v9[2]) = v4;
  uint64_t v6 = *((void *)a1 + 6);
  *((void *)a1 + 6) = v10;
  uint64_t v10 = v6;
  LODWORD(v6) = *((_DWORD *)a1 + 14);
  *((_DWORD *)a1 + 14) = v11;
  int v11 = v6;
  uint64_t v7 = *((void *)a1 + 8);
  *((void *)a1 + 8) = v12;
  uint64_t result = v3;
  uint64_t v12 = v7;
  if ((void)v3) {
    operator delete[]();
  }
  return result;
}

void sub_111C6B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_111C6D8(long long *a1, uint64_t *a2)
{
  memset(v7, 0, 41);
  sub_111D560((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    operator delete[]();
  }
  return result;
}

void sub_111C770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_111C798(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = *(uint64_t **)(a2 + 40);
  uint64_t v7 = a1 + 416;
  uint64_t v8 = (uint64_t *)(a1 + 744);
  while (1)
  {
    while (1)
    {
      unint64_t v9 = *(void *)(a1 + 1056) & a3;
      uint64_t v10 = *(void *)(a1 + 1024);
      if (a3 != *(_DWORD *)(v10 + 12 * v9 + 4)) {
        break;
      }
      uint64_t v11 = v10 + 12 * v9;
      unint64_t v12 = *(unsigned int *)(v11 + 8);
      if (v12 <= 0xFFFFFEFF)
      {
        uint64_t v23 = *(void *)(a1 + 1000);
        if (v23) {
          uint64_t result = (uint64_t *)sub_111C798(v23, a2, v12);
        }
        else {
          uint64_t result = sub_111DC64(v8, a2, v12);
        }
      }
      else
      {
        char v27 = *(_DWORD *)(v11 + 8);
        uint64_t result = sub_111BB58(v6, &v27);
      }
      a3 = *(unsigned int *)(*(void *)(a1 + 1024) + 12 * v9);
      if (!a3) {
        return result;
      }
    }
    if ((*(void *)(*(void *)(a1 + 432) + ((a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a3))
    {
      int v14 = *(unsigned __int8 *)(*(void *)(a1 + 640) + a3);
      uint64_t v15 = sub_111DF00(v7, a3);
      uint64_t v16 = *(void *)(a1 + 720);
      unint64_t v17 = (unint64_t)(v16 * v15) >> 6;
      uint64_t v18 = (v16 * v15) & 0x3F;
      unint64_t v19 = v18 + v16;
      uint64_t v20 = *(void *)(a1 + 688);
      unint64_t v21 = *(void *)(v20 + 8 * v17);
      uint64_t v22 = v19 > 0x40
          ? ((2 * *(void *)(v20 + 8 * v17 + 8)) << (v18 ^ 0x3Fu)) | (v21 >> v18)
          : v21 >> v18;
      unint64_t v24 = v14 | ((*(_DWORD *)(a1 + 728) & v22) << 8);
      uint64_t v25 = *(void *)(a1 + 1000);
      uint64_t result = v25 ? (uint64_t *)sub_111C798(v25, a2, v24) : sub_111DC64(v8, a2, v24);
    }
    else
    {
      char v26 = *(unsigned char *)(*(void *)(a1 + 640) + a3);
      uint64_t result = sub_111BB58(v6, &v26);
    }
    if (a3 <= *(void *)(a1 + 1064)) {
      break;
    }
    a3 = sub_111E2B4((void *)a1, a3) + ~a3;
  }
  return result;
}

uint64_t sub_111C940(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v6 = a2[5];
  uint64_t v7 = a1 + 416;
  uint64_t v8 = (void *)(a1 + 744);
  while (1)
  {
    unint64_t v9 = *(void *)(a1 + 1056) & a3;
    uint64_t v10 = *(void *)(a1 + 1024);
    if (a3 != *(_DWORD *)(v10 + 12 * v9 + 4))
    {
      int v12 = *(unsigned __int8 *)(*(void *)(a1 + 640) + a3);
      if ((*(void *)(*(void *)(a1 + 432) + ((a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a3))
      {
        uint64_t v13 = sub_111DF00(v7, a3);
        uint64_t v14 = *(void *)(a1 + 720);
        unint64_t v15 = (unint64_t)(v14 * v13) >> 6;
        uint64_t v16 = (v14 * v13) & 0x3F;
        unint64_t v17 = v16 + v14;
        uint64_t v18 = *(void *)(a1 + 688);
        unint64_t v19 = *(void *)(v18 + 8 * v15);
        if (v17 > 0x40) {
          uint64_t v20 = ((2 * *(void *)(v18 + 8 * v15 + 8)) << (v16 ^ 0x3Fu)) | (v19 >> v16);
        }
        else {
          uint64_t v20 = v19 >> v16;
        }
        unint64_t v22 = v12 | ((*(_DWORD *)(a1 + 728) & v20) << 8);
        uint64_t v23 = *(void *)(a1 + 1000);
        if (v23)
        {
          if ((sub_111C940(v23, a2, v22) & 1) == 0) {
            return 0;
          }
        }
        else if ((sub_111DCF0(v8, a2, v22) & 1) == 0)
        {
          return 0;
        }
      }
      else
      {
        if (v12 != *(unsigned __int8 *)(*a2 + *(unsigned int *)(v6 + 100))) {
          return 0;
        }
        char v25 = *(unsigned char *)(*(void *)(a1 + 640) + a3);
        sub_111BB58((uint64_t *)v6, &v25);
        ++*(_DWORD *)(v6 + 100);
      }
      if (a3 <= *(void *)(a1 + 1064)) {
        return 1;
      }
      a3 = sub_111E2B4((void *)a1, a3) + ~a3;
      goto LABEL_23;
    }
    unint64_t v11 = *(unsigned int *)(v10 + 12 * v9 + 8);
    if (v11 > 0xFFFFFEFF)
    {
      if (*(unsigned __int8 *)(*a2 + *(unsigned int *)(v6 + 100)) != v11) {
        return 0;
      }
      char v26 = *(_DWORD *)(v10 + 12 * v9 + 8);
      sub_111BB58((uint64_t *)v6, &v26);
      ++*(_DWORD *)(v6 + 100);
      goto LABEL_22;
    }
    uint64_t v21 = *(void *)(a1 + 1000);
    if (!v21) {
      break;
    }
    if ((sub_111C940(v21, a2, v11) & 1) == 0) {
      return 0;
    }
LABEL_22:
    a3 = *(unsigned int *)(*(void *)(a1 + 1024) + 12 * v9);
    if (!a3) {
      return 1;
    }
LABEL_23:
    if (a2[1] <= (unint64_t)*(unsigned int *)(v6 + 100))
    {
      sub_111C798(a1, (uint64_t)a2, a3);
      return 1;
    }
  }
  if (sub_111DCF0(v8, a2, v11)) {
    goto LABEL_22;
  }
  return 0;
}

uint64_t sub_111CB5C(void *a1, unsigned int a2)
{
  if (a2 >= 0x100000)
  {
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    void *exception = &off_2441C70;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h";
    exception[2] = 0x50000003BLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h:59: MARISA_CODE_ERROR:"
                   " (config_flags & ~MARISA_CONFIG_MASK) != 0";
  }
  if ((a2 & 0x7F) != 0) {
    *a1 = a2 & 0x7F;
  }
  sub_111CC24((uint64_t)a1, a2);
  sub_111CCE8((uint64_t)a1, a2);

  return sub_111CD80((uint64_t)a1, a2);
}

uint64_t sub_111CC24(uint64_t result, __int16 a2)
{
  unsigned int v2 = a2 & 0xF80;
  int v3 = 512;
  if (v2 > 0x1FF)
  {
    if (v2 == 512) {
      goto LABEL_11;
    }
    if (v2 != 1024)
    {
      int v3 = a2 & 0xF80;
      if (v2 != 2048) {
        goto LABEL_9;
      }
      goto LABEL_11;
    }
LABEL_10:
    int v3 = a2 & 0xF80;
    goto LABEL_11;
  }
  if ((a2 & 0xF80) == 0) {
    goto LABEL_11;
  }
  if (v2 == 128) {
    goto LABEL_10;
  }
  int v3 = a2 & 0xF80;
  if (v2 != 256)
  {
LABEL_9:
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    void *exception = &off_2441C70;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h";
    exception[2] = 0x500000065;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h:101: MARISA_CODE_ERROR"
                   ": undefined cache level";
  }
LABEL_11:
  *(_DWORD *)(result + 8) = v3;
  return result;
}

uint64_t sub_111CCE8(uint64_t result, __int16 a2)
{
  int v2 = 4096;
  int v3 = a2 & 0xF000;
  if ((a2 & 0xF000) != 0 && v3 != 4096)
  {
    if (v3 != 0x2000)
    {
      exceptioint n = __cxa_allocate_exception(0x20uLL);
      void *exception = &off_2441C70;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h";
      exception[2] = 0x500000079;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h:121: MARISA_CODE_ERR"
                     "OR: undefined tail mode";
    }
    int v2 = 0x2000;
  }
  *(_DWORD *)(result + 12) = v2;
  return result;
}

uint64_t sub_111CD80(uint64_t result, int a2)
{
  int v2 = 0x20000;
  int v3 = a2 & 0xF0000;
  if ((a2 & 0xF0000) != 0 && v3 != 0x20000)
  {
    if (v3 != 0x10000)
    {
      exceptioint n = __cxa_allocate_exception(0x20uLL);
      void *exception = &off_2441C70;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h";
      exception[2] = 0x50000008DLL;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h:141: MARISA_CODE_ERR"
                     "OR: undefined node order";
    }
    int v2 = 0x10000;
  }
  *(_DWORD *)(result + 16) = v2;
  return result;
}

unsigned char *sub_111CE18(uint64_t *a1, size_t __sz)
{
  uint64_t result = operator new[](__sz, &std::nothrow);
  uint64_t v5 = a1[3];
  if (v5)
  {
    uint64_t v6 = (char *)a1[1];
    uint64_t v7 = result;
    do
    {
      char v8 = *v6++;
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
  uint64_t v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = __sz;
  if (v9)
  {
    operator delete[]();
  }
  return result;
}

uint64_t *sub_111CEB0(uint64_t *result, unint64_t a2)
{
  unint64_t v2 = a2;
  int v3 = result;
  unint64_t v4 = result[4];
  if (v4 < a2)
  {
    uint64_t v5 = 2 * v4;
    if (v4 > 0x666666666666666) {
      uint64_t v5 = 0xCCCCCCCCCCCCCCCLL;
    }
    if (v4 > a2 >> 1) {
      a2 = v5;
    }
    uint64_t result = (uint64_t *)sub_111CF48(result, a2);
  }
  unint64_t v6 = v3[3];
  unint64_t v7 = v2 - v6;
  if (v2 > v6)
  {
    char v8 = (_DWORD *)(v3[1] + 20 * v6 + 16);
    do
    {
      *((_OWORD *)v8 - 1) = xmmword_20EB790;
      *char v8 = -1;
      v8 += 5;
      --v7;
    }
    while (v7);
  }
  v3[3] = v2;
  return result;
}

_DWORD *sub_111CF48(uint64_t *a1, uint64_t a2)
{
  uint64_t result = operator new[](20 * a2, &std::nothrow);
  uint64_t v5 = a1[3];
  if (v5)
  {
    unint64_t v6 = (long long *)a1[1];
    unint64_t v7 = result;
    do
    {
      long long v8 = *v6;
      v7[4] = *((_DWORD *)v6 + 4);
      *(_OWORD *)unint64_t v7 = v8;
      v7 += 5;
      unint64_t v6 = (long long *)((char *)v6 + 20);
      --v5;
    }
    while (v5);
  }
  uint64_t v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
  {
    operator delete[]();
  }
  return result;
}

uint64_t sub_111CFF0(uint64_t a1, uint64_t *a2)
{
  sub_111D0DC((long long *)a1, a2);
  *(void *)(a1 + 48) = *(unsigned int *)sub_111B104(a2, 4uLL);
  unint64_t v4 = *(unsigned int *)sub_111B104(a2, 4uLL);
  if (*(void *)(a1 + 48) < v4)
  {
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    void *exception = &off_2441C70;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/bit-vector.h";
    exception[2] = 0xA00000087;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/bit-vector.h:135: MAR"
                   "ISA_FORMAT_ERROR: temp_num_1s > size_";
  }
  *(void *)(a1 + 56) = v4;
  sub_111D19C((long long *)(a1 + 64), a2);
  sub_111D25C((long long *)(a1 + 112), a2);

  return sub_111D25C((long long *)(a1 + 160), a2);
}

uint64_t sub_111D0DC(long long *a1, uint64_t *a2)
{
  memset(v7, 0, 41);
  sub_111D31C((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    operator delete[]();
  }
  return result;
}

void sub_111D174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_111D19C(long long *a1, uint64_t *a2)
{
  memset(v7, 0, 41);
  sub_111D560((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    operator delete[]();
  }
  return result;
}

void sub_111D234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_111D25C(long long *a1, uint64_t *a2)
{
  memset(v7, 0, 41);
  sub_111D740((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    operator delete[]();
  }
  return result;
}

void sub_111D2F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_111D31C(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = *(void *)sub_111B104(a2, 8uLL);
  if ((v4 & 7) != 0)
  {
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    void *exception = &off_2441C70;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0xA000000CALL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:202: MARISA_"
                   "FORMAT_ERROR: (total_size % sizeof(T)) != 0";
  }
  sub_111D3FC(a2, (uint64_t *)(a1 + 16), v4 >> 3);
  sub_111B028(a2, -(int)v4 & 7);
  *(void *)(a1 + 24) = v4 >> 3;

  return sub_111D4DC(a1);
}

uint64_t sub_111D3FC(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  if (!a2 && a3)
  {
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    void *exception = &off_2441C70;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h";
    exception[2] = 0x20000001CLL;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h:28: MARISA_NULL_ERROR: (ob"
         "js == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >> 61)
  {
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    void *exception = &off_2441C70;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h";
    exception[2] = 0x70000001ELL;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h:30: MARISA_SIZE_ERROR: num"
         "_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v6;
  }
  uint64_t result = sub_111B104(a1, 8 * a3);
  *a2 = result;
  return result;
}

uint64_t sub_111D4DC(uint64_t result)
{
  if (*(unsigned char *)(result + 40))
  {
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    void *exception = &off_2441C70;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0x10000006BLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:107: MARISA_"
                   "STATE_ERROR: fixed_";
  }
  *(unsigned char *)(result + 40) = 1;
  return result;
}

uint64_t sub_111D560(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = *(void *)sub_111B104(a2, 8uLL);
  unint64_t v5 = v4 / 0xC;
  if (v4 % 0xC)
  {
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    void *exception = &off_2441C70;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0xA000000CALL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:202: MARISA_"
                   "FORMAT_ERROR: (total_size % sizeof(T)) != 0";
  }
  sub_111D650(a2, (uint64_t *)(a1 + 16), v5);
  sub_111B028(a2, -(int)v4 & 7);
  *(void *)(a1 + 24) = v5;

  return sub_111D4DC(a1);
}

uint64_t sub_111D650(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  if (!a2 && a3)
  {
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    void *exception = &off_2441C70;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h";
    exception[2] = 0x20000001CLL;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h:28: MARISA_NULL_ERROR: (ob"
         "js == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >= 0x1555555555555556)
  {
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    void *exception = &off_2441C70;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h";
    exception[2] = 0x70000001ELL;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h:30: MARISA_SIZE_ERROR: num"
         "_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v6;
  }
  uint64_t result = sub_111B104(a1, 12 * a3);
  *a2 = result;
  return result;
}

uint64_t sub_111D740(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = *(void *)sub_111B104(a2, 8uLL);
  if ((v4 & 3) != 0)
  {
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    void *exception = &off_2441C70;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0xA000000CALL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:202: MARISA_"
                   "FORMAT_ERROR: (total_size % sizeof(T)) != 0";
  }
  sub_111D820(a2, (uint64_t *)(a1 + 16), v4 >> 2);
  sub_111B028(a2, -(int)v4 & 7);
  *(void *)(a1 + 24) = v4 >> 2;

  return sub_111D4DC(a1);
}

uint64_t sub_111D820(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  if (!a2 && a3)
  {
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    void *exception = &off_2441C70;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h";
    exception[2] = 0x20000001CLL;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h:28: MARISA_NULL_ERROR: (ob"
         "js == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >> 62)
  {
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    void *exception = &off_2441C70;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h";
    exception[2] = 0x70000001ELL;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h:30: MARISA_SIZE_ERROR: num"
         "_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v6;
  }
  uint64_t result = sub_111B104(a1, 4 * a3);
  *a2 = result;
  return result;
}

void *sub_111D900(uint64_t a1, uint64_t *a2)
{
  sub_111D0DC((long long *)a1, a2);
  uint64_t v4 = *(unsigned int *)sub_111B104(a2, 4uLL);
  if (v4 >= 0x21)
  {
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    void *exception = &off_2441C70;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/flat-vector.h";
    exception[2] = 0xA00000086;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/flat-vector.h:134: MA"
                   "RISA_FORMAT_ERROR: temp_value_size > 32";
  }
  *(void *)(a1 + 48) = v4;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)sub_111B104(a2, 4uLL);
  uint64_t result = (void *)sub_111B104(a2, 8uLL);
  *(void *)(a1 + 64) = *result;
  return result;
}

void **sub_111D9CC(void **a1)
{
  unint64_t v2 = *a1;
  if (v2)
  {
    sub_111B4DC(v2);
    operator delete();
  }
  return a1;
}

uint64_t sub_111DA10(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = *(void *)sub_111B104(a2, 8uLL);
  *(void *)(a1 + 16) = sub_111B104(a2, v4);
  sub_111B028(a2, -(int)v4 & 7);
  *(void *)(a1 + 24) = v4;

  return sub_111D4DC(a1);
}

double sub_111DA84(_OWORD *a1)
{
  double result = 0.0;
  *(_OWORD *)((char *)a1 + 25) = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  *(_OWORD *)((char *)a1 + 73) = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  *(_OWORD *)((char *)a1 + 185) = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  *(_OWORD *)((char *)a1 + 233) = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  *(_OWORD *)((char *)a1 + 137) = 0u;
  return result;
}

uint64_t *sub_111DAB8(uint64_t *a1, uint64_t *a2)
{
  sub_111C340(a1, a2);

  return sub_111C2C8(a1 + 6, a2 + 6);
}

uint64_t sub_111DAF8(uint64_t a1, uint64_t *a2)
{
  memset(v8, 0, 41);
  memset(v9, 0, 41);
  long long v12 = 0u;
  memset(v13, 0, sizeof(v13));
  long long v14 = 0u;
  memset(v15, 0, sizeof(v15));
  _OWORD v9[3] = 0u;
  long long v10 = 0u;
  memset(v11, 0, sizeof(v11));
  sub_111DE40(v8, a2);
  sub_111C430((uint64_t *)v9, a2);
  long long v4 = *(_OWORD *)a1;
  *(_OWORD *)a1 = v8[0];
  v8[0] = v4;
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)&v8[1];
  *(void *)&v8[1] = v5;
  long long v6 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(long long *)((char *)&v8[1] + 8);
  *(long long *)((char *)&v8[1] + 8) = v6;
  LOBYTE(v5) = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = BYTE8(v8[2]);
  BYTE8(v8[2]) = v5;
  sub_111C2C8((uint64_t *)(a1 + 48), (uint64_t *)v9);
  if ((void)v14) {
    operator delete[]();
  }
  if ((void)v12) {
    operator delete[]();
  }
  if ((void)v10) {
    operator delete[]();
  }
  if (*(void *)&v9[0]) {
    operator delete[]();
  }
  uint64_t result = *(void *)&v8[0];
  if (*(void *)&v8[0]) {
    operator delete[]();
  }
  return result;
}

void sub_111DC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_111DC64(uint64_t *result, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  long long v4 = result;
  uint64_t v5 = *(uint64_t **)(a2 + 40);
  if (result[12])
  {
    do
    {
      uint64_t result = sub_111BB58(v5, (unsigned char *)(v4[2] + v3));
      uint64_t v6 = *(void *)(v4[8] + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3;
      ++v3;
    }
    while ((v6 & 1) == 0);
  }
  else
  {
    unint64_t v7 = (unsigned char *)(result[2] + a3);
    if (*v7)
    {
      do
        uint64_t result = sub_111BB58(v5, v7);
      while (*++v7);
    }
  }
  return result;
}

uint64_t sub_111DCF0(void *a1, void *a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v6 = a2[5];
  if (a1[12])
  {
    unsigned int v7 = *(_DWORD *)(v6 + 100);
    while (1)
    {
      long long v8 = (unsigned char *)(a1[2] + v3);
      int v9 = *v8;
      int v10 = *(unsigned __int8 *)(*a2 + v7);
      BOOL v11 = v9 == v10;
      if (v9 != v10) {
        break;
      }
      sub_111BB58((uint64_t *)v6, v8);
      unsigned int v7 = *(_DWORD *)(v6 + 100) + 1;
      *(_DWORD *)(v6 + 100) = v7;
      if ((*(void *)(a1[8] + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3)) {
        break;
      }
      ++v3;
      if (a2[1] <= (unint64_t)v7)
      {
        do
        {
          sub_111BB58((uint64_t *)v6, (unsigned char *)(a1[2] + v3));
          uint64_t v12 = *(void *)(a1[8] + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3;
          ++v3;
        }
        while ((v12 & 1) == 0);
        return 1;
      }
    }
  }
  else
  {
    unint64_t v15 = a1[2] + a3;
    uint64_t v13 = (unsigned __int8 *)(v15 - *(unsigned int *)(v6 + 100));
    int v14 = *(unsigned __int8 *)v15;
    LODWORD(v15) = *(_DWORD *)(v6 + 100);
    while (1)
    {
      int v16 = *(unsigned __int8 *)(*a2 + v15);
      BOOL v11 = v14 == v16;
      if (v14 != v16) {
        break;
      }
      sub_111BB58((uint64_t *)v6, &v13[v15]);
      unint64_t v15 = (*(_DWORD *)(v6 + 100) + 1);
      *(_DWORD *)(v6 + 100) = v15;
      int v14 = v13[v15];
      if (!v13[v15]) {
        break;
      }
      if (a2[1] <= v15)
      {
        unint64_t v17 = &v13[v15];
        do
          sub_111BB58((uint64_t *)v6, v17);
        while (*++v17);
        return 1;
      }
    }
  }
  return v11;
}

uint64_t sub_111DE40(long long *a1, uint64_t *a2)
{
  memset(v7, 0, 41);
  sub_111DA10((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    operator delete[]();
  }
  return result;
}

void sub_111DED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_111DF00(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2 >> 9;
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v4 = *(unsigned int *)(v3 + 12 * (a2 >> 9));
  switch((a2 >> 6) & 7)
  {
    case 1uLL:
      unint64_t v5 = *(_DWORD *)(v3 + 12 * v2 + 4) & 0x7F;
      goto LABEL_10;
    case 2uLL:
      unint64_t v6 = (unint64_t)*(unsigned int *)(v3 + 12 * v2 + 4) >> 7;
      goto LABEL_5;
    case 3uLL:
      unint64_t v6 = (unint64_t)*(unsigned int *)(v3 + 12 * v2 + 4) >> 15;
LABEL_5:
      v4 += v6;
      break;
    case 4uLL:
      v4 += (unint64_t)*(unsigned int *)(v3 + 12 * v2 + 4) >> 23;
      break;
    case 5uLL:
      unint64_t v5 = *(_DWORD *)(v3 + 12 * v2 + 8) & 0x1FF;
      goto LABEL_10;
    case 6uLL:
      unint64_t v5 = ((unint64_t)*(unsigned int *)(v3 + 12 * v2 + 8) >> 9) & 0x1FF;
      goto LABEL_10;
    case 7uLL:
      unint64_t v5 = ((unint64_t)*(unsigned int *)(v3 + 12 * v2 + 8) >> 18) & 0x1FF;
LABEL_10:
      v4 += v5;
      break;
    default:
      break;
  }
  unint64_t v7 = *(void *)(*(void *)(a1 + 16) + 8 * (a2 >> 6)) & ~(-1 << a2);
  unint64_t v8 = (((((v7 >> 1) & 0x5555555555555555) + (v7 & 0x5555555555555555)) >> 2) & 0x3333333333333333)
     + ((((v7 >> 1) & 0x5555555555555555) + (v7 & 0x5555555555555555)) & 0x3333333333333333);
  return v4 + ((0x101010101010101 * (((v8 >> 4) & 0x707070707070707) + (v8 & 0x707070707070707))) >> 56);
}

unint64_t sub_111E048(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[16];
  if ((a2 & 0x1FF) == 0) {
    return *(unsigned int *)(v2 + 4 * (a2 >> 9));
  }
  unint64_t v3 = *(_DWORD *)(v2 + 4 * (a2 >> 9)) >> 9;
  unint64_t v4 = (*(_DWORD *)(v2 + 4 * (a2 >> 9) + 4) + 511) >> 9;
  uint64_t v5 = a1[10];
  if (v3 + 10 >= v4)
  {
    uint64_t v7 = v5 + 12 * v3;
    unint64_t v8 = v3-- << 9;
    int v9 = (unsigned int *)(v7 + 12);
    do
    {
      unsigned int v10 = *v9;
      v9 += 3;
      ++v3;
      v8 += 512;
    }
    while (v8 - v10 <= a2);
  }
  else
  {
    do
    {
      if (((v4 + v3) >> 1 << 9) - *(unsigned int *)(v5 + 12 * ((v4 + v3) >> 1)) > a2) {
        unint64_t v4 = (v4 + v3) >> 1;
      }
      else {
        unint64_t v3 = (v4 + v3) >> 1;
      }
    }
    while (v3 + 1 < v4);
  }
  BOOL v11 = (unsigned int *)(v5 + 12 * v3);
  unint64_t v12 = v11[1];
  unint64_t v13 = a2 - (v3 << 9) + *v11;
  uint64_t v14 = 8 * v3;
  if (v13 >= 256 - (v12 >> 23))
  {
    unint64_t v15 = *(unsigned int *)(v5 + 12 * v3 + 8);
    uint64_t v16 = (v15 >> 9) & 0x1FF;
    if (v13 >= 384 - v16)
    {
      uint64_t v18 = (v15 >> 18) & 0x1FF;
      if (v13 >= 448 - v18)
      {
        v14 |= 7uLL;
        unint64_t v13 = v13 + v18 - 448;
      }
      else
      {
        v14 |= 6uLL;
        unint64_t v13 = v13 + v16 - 384;
      }
    }
    else if (v13 >= 320 - (v15 & 0x1FF))
    {
      v14 |= 5uLL;
      unint64_t v13 = v13 + (v15 & 0x1FF) - 320;
    }
    else
    {
      v14 |= 4uLL;
      unint64_t v13 = (v12 >> 23) + v13 - 256;
    }
  }
  else if (v13 >= 128 - (unint64_t)(v12 >> 7))
  {
    uint64_t v17 = (v12 >> 15);
    if (v13 >= 192 - v17)
    {
      v14 |= 3uLL;
      unint64_t v13 = v13 + v17 - 192;
    }
    else
    {
      v14 |= 2uLL;
      unint64_t v13 = v13 + (v12 >> 7) - 128;
    }
  }
  else if (v13 >= 64 - (v12 & 0x7F))
  {
    v14 |= 1uLL;
    unint64_t v13 = (v12 & 0x7F) + v13 - 64;
  }
  return sub_111E22C(v13, v14 << 6, ~*(void *)(a1[2] + 8 * v14));
}

unint64_t sub_111E22C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = (((a3 - ((a3 >> 1) & 0x5555555555555555)) >> 2) & 0x3333333333333333)
     + ((a3 - ((a3 >> 1) & 0x5555555555555555)) & 0x3333333333333333);
  uint64_t v4 = (v3 + (v3 >> 4)) & 0xF0F0F0F0F0F0F0FLL;
  unint64_t v5 = __clz(__rbit64(((((0x101010101010101 * v4) | 0x8080808080808080)
                      - 0x101010101010101 * a1
                      - 0x101010101010101) >> 7) & 0x101010101010101));
  return v5
       + a2
       + asc_20F4BA0[256 * (a1 - ((unint64_t)(0x101010101010100 * v4) >> v5))
                                    + (a3 >> v5)];
}

unint64_t sub_111E2B4(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[22];
  if ((a2 & 0x1FF) == 0) {
    return *(unsigned int *)(v2 + 4 * (a2 >> 9));
  }
  unint64_t v3 = *(_DWORD *)(v2 + 4 * (a2 >> 9)) >> 9;
  unint64_t v4 = (*(_DWORD *)(v2 + 4 * (a2 >> 9) + 4) + 511) >> 9;
  uint64_t v5 = a1[10];
  if (v3 + 10 >= v4)
  {
    uint64_t v7 = v5 + 12 * v3--;
    unint64_t v8 = (unsigned int *)(v7 + 12);
    do
    {
      unsigned int v9 = *v8;
      v8 += 3;
      ++v3;
    }
    while (v9 <= a2);
  }
  else
  {
    do
    {
      if (*(unsigned int *)(v5 + 12 * ((v4 + v3) >> 1)) > a2) {
        unint64_t v4 = (v4 + v3) >> 1;
      }
      else {
        unint64_t v3 = (v4 + v3) >> 1;
      }
    }
    while (v3 + 1 < v4);
  }
  unsigned int v10 = (unsigned int *)(v5 + 12 * v3);
  unint64_t v11 = v10[1];
  unint64_t v12 = a2 - *v10;
  uint64_t v13 = 8 * v3;
  if (v12 >= v11 >> 23)
  {
    unint64_t v23 = v11 >> 23;
    unint64_t v24 = *(unsigned int *)(v5 + 12 * v3 + 8);
    unint64_t v25 = (v24 >> 9) & 0x1FF;
    unint64_t v26 = (v24 >> 18) & 0x1FF;
    uint64_t v27 = v13 | 7;
    BOOL v28 = v12 >= v26;
    if (v12 < v26) {
      uint64_t v29 = v12 - v25;
    }
    else {
      uint64_t v29 = v12 - v26;
    }
    if (!v28) {
      uint64_t v27 = v13 | 6;
    }
    unint64_t v30 = v24 & 0x1FF;
    uint64_t v31 = v13 | 5;
    uint64_t v32 = v13 | 4;
    uint64_t v33 = v12 - v23;
    BOOL v34 = v12 >= v30;
    if (v12 < v30) {
      uint64_t v21 = v33;
    }
    else {
      uint64_t v21 = v12 - v30;
    }
    if (v34) {
      uint64_t v32 = v31;
    }
    if (v12 < v25)
    {
      uint64_t v22 = v32;
    }
    else
    {
      uint64_t v21 = v29;
      uint64_t v22 = v27;
    }
  }
  else
  {
    unint64_t v14 = v11 >> 7;
    unint64_t v15 = (v11 >> 15);
    uint64_t v16 = v12 - (v11 >> 7);
    if (v12 < v15)
    {
      uint64_t v17 = v13 | 2;
    }
    else
    {
      uint64_t v16 = v12 - v15;
      uint64_t v17 = v13 | 3;
    }
    unint64_t v18 = v11 & 0x7F;
    BOOL v20 = v12 >= v18;
    unint64_t v19 = v12 - v18;
    if (v20) {
      v13 |= 1uLL;
    }
    else {
      unint64_t v19 = v12;
    }
    BOOL v20 = v12 >= v14;
    if (v12 < v14) {
      uint64_t v21 = v19;
    }
    else {
      uint64_t v21 = v16;
    }
    if (v20) {
      uint64_t v22 = v17;
    }
    else {
      uint64_t v22 = v13;
    }
  }
  return sub_111E22C(v21, v22 << 6, *(void *)(a1[2] + 8 * v22));
}

void *sub_111E428(void *result)
{
  *uint64_t result = 0;
  return result;
}

void **sub_111E434(void **a1, uint64_t a2, uint64_t a3)
{
  if (!a2 && a3)
  {
    exceptioint n = __cxa_allocate_exception(0x20uLL);
    void *exception = &off_2441C70;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc";
    exception[2] = 0x200000021;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc:33: MARISA_NULL_ERROR: (ptr == NULL) && (size != 0)";
  }
  unint64_t v6 = operator new(0x470uLL, &std::nothrow);
  if (!v6)
  {
    uint64_t v13 = 0;
    unint64_t v11 = __cxa_allocate_exception(0x20uLL);
    *unint64_t v11 = &off_2441C70;
    v11[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc";
    v11[2] = 0x800000024;
    v11[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc:36: MARISA_MEMORY_ERROR: temp.get() == NULL";
  }
  uint64_t v7 = v6;
  sub_111B4D8((uint64_t)v6);
  uint64_t v13 = v7;
  sub_111AECC((uint64_t)v12);
  sub_111AF78(v12, a2, a3);
  sub_111B858((uint64_t)v13, (uint64_t *)v12);
  unint64_t v8 = *a1;
  *a1 = v13;
  uint64_t v13 = v8;
  sub_111AF30(v12);
  return sub_111D9CC(&v13);
}

void sub_111E5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_111D9CC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_111E5E0(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (result)
  {
    if (!*(void *)(a2 + 40))
    {
      sub_111AC68(a2);
      uint64_t result = *a1;
    }
    return sub_111BBC4(result, a2);
  }
  return result;
}

void sub_111E640(uint64_t *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  int v5 = *((char *)a1 + 23);
  if (v5 >= 0) {
    unint64_t v6 = a1;
  }
  else {
    unint64_t v6 = (uint64_t *)*a1;
  }
  if (v5 >= 0) {
    uint64_t v7 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    uint64_t v7 = a1[1];
  }
  id v15 = +[NSData dataWithBytes:v6 length:v7];
  id v8 = [v15 base64EncodedDataWithOptions:0];
  sub_111E930((void *)a3, [v8 bytes], (size_t)objc_msgSend(v8, "length"));
  if (a2)
  {
    int v9 = *(char *)(a3 + 23);
    unsigned int v10 = *(unsigned char **)a3;
    uint64_t v11 = *(void *)(a3 + 8);
    if (v9 >= 0) {
      unint64_t v12 = (unsigned char *)a3;
    }
    else {
      unint64_t v12 = *(unsigned char **)a3;
    }
    uint64_t v13 = *(unsigned __int8 *)(a3 + 23);
    if (v9 >= 0) {
      uint64_t v14 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v14 = *(void *)(a3 + 8);
    }
    if (v14)
    {
      do
      {
        if (*v12 == 43) {
          *unint64_t v12 = 45;
        }
        ++v12;
        --v14;
      }
      while (v14);
      uint64_t v13 = *(unsigned __int8 *)(a3 + 23);
      unsigned int v10 = *(unsigned char **)a3;
      uint64_t v11 = *(void *)(a3 + 8);
      LOBYTE(v9) = *(unsigned char *)(a3 + 23);
    }
    if ((v9 & 0x80u) != 0) {
      uint64_t v13 = v11;
    }
    else {
      unsigned int v10 = (unsigned char *)a3;
    }
    for (; v13; --v13)
    {
      if (*v10 == 47) {
        *unsigned int v10 = 95;
      }
      ++v10;
    }
  }
}

void sub_111E770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_111E790(uint64_t a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    sub_4200(__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a1;
    uint64_t v17 = *(void *)(a1 + 16);
  }
  int v5 = (void **)__p[0];
  if (a2)
  {
    char v6 = HIBYTE(v17);
    uint64_t v7 = __p;
    if (v17 >= 0) {
      id v8 = __p;
    }
    else {
      id v8 = (void **)__p[0];
    }
    int v9 = (char *)__p[1];
    unsigned int v10 = (char *)HIBYTE(v17);
    if (v17 >= 0) {
      uint64_t v11 = (char *)HIBYTE(v17);
    }
    else {
      uint64_t v11 = (char *)__p[1];
    }
    if (v11)
    {
      do
      {
        if (*(unsigned char *)v8 == 45) {
          *(unsigned char *)id v8 = 43;
        }
        id v8 = (void **)((char *)v8 + 1);
        --v11;
      }
      while (v11);
      unsigned int v10 = (char *)HIBYTE(v17);
      int v5 = (void **)__p[0];
      int v9 = (char *)__p[1];
      char v6 = HIBYTE(v17);
    }
    if (v6 < 0)
    {
      uint64_t v7 = v5;
      unsigned int v10 = v9;
    }
    if (v10)
    {
      do
      {
        if (*(unsigned char *)v7 == 95) {
          *(unsigned char *)uint64_t v7 = 47;
        }
        uint64_t v7 = (void **)((char *)v7 + 1);
        --v10;
      }
      while (v10);
      int v5 = (void **)__p[0];
    }
  }
  if (v17 >= 0) {
    unint64_t v12 = __p;
  }
  else {
    unint64_t v12 = v5;
  }
  if (v17 >= 0) {
    uint64_t v13 = (void *)HIBYTE(v17);
  }
  else {
    uint64_t v13 = __p[1];
  }
  uint64_t v14 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v12, v13, __p[0]);
  id v15 = [objc_alloc((Class)NSData) initWithBase64EncodedData:v14 options:0];
  sub_111E930(a3, [v15 bytes], (size_t)objc_msgSend(v15, "length"));

  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
}

void sub_111E8FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_111E930(void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    char v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *long long __dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    char v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

uint64_t sub_111E9DC(const void *a1, CC_LONG a2)
{
  *(void *)md = 0;
  uint64_t v11 = 0;
  int v12 = 0;
  CC_SHA1(a1, a2, md);
  sub_6BAC((uint64_t)v7);
  uint64_t v2 = v7[0];
  unint64_t v3 = (const std::ios_base *)((char *)v7 + *(void *)(v7[0] - 24));
  if (v3[1].__fmtflags_ == -1)
  {
    std::ios_base::getloc(v3);
    unint64_t v4 = std::locale::use_facet(&v9, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 32);
    std::locale::~locale(&v9);
    uint64_t v2 = v7[0];
  }
  uint64_t v5 = 0;
  v3[1].__fmtflags_ = 48;
  *(_DWORD *)((char *)&v7[1] + *(void *)(v2 - 24)) = *(_DWORD *)((unsigned char *)&v7[1] + *(void *)(v2 - 24)) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)&v7[1] + *(void *)(v2 - 24)) |= 0x4000u;
  do
  {
    *(void *)((char *)&v7[3] + *(void *)(v7[0] - 24)) = 2;
    std::ostream::operator<<();
    ++v5;
  }
  while (v5 != 20);
  std::stringbuf::str();
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_111EC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::locale::~locale((std::locale *)(v9 - 104));
  sub_111ECAC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_111ECAC(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return a1;
}

void sub_111EDB4(std::runtime_error *a1)
{
  sub_111EDEC(a1);

  operator delete();
}

void sub_111EDEC(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&off_2441CB0;
  imp = (std::__shared_weak_count *)this[1].__imp_.__imp_;
  if (imp) {
    sub_20A69F0(imp);
  }

  std::runtime_error::~runtime_error(this);
}

unint64_t sub_111EE48(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return sub_B128((uint64_t)&v5, (uint64_t *)a2, v3);
}

uint64_t sub_111EE88(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    unint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

uint64_t sub_111EF30(std::runtime_error_vtbl **a1, _DWORD *a2)
{
  unint64_t v3 = *a1;
  if (!v3)
  {
    exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
    sub_5E5C(&v9, "Cannot convert datum to int");
    uint64_t v8 = *a1;
    int v7 = a1[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)&v7->~runtime_error_0, 1uLL, memory_order_relaxed);
    }
    std::runtime_error::runtime_error(exception, &v9);
    exception->__vftable = (std::runtime_error_vtbl *)&off_2441CB0;
    exception[1].__vftable = v8;
    exception[1].__imp_.__imp_ = (const char *)v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)&v7->~runtime_error_0, 1uLL, memory_order_relaxed);
    }
  }
  uint64_t result = (*((uint64_t (**)(std::runtime_error_vtbl *))v3->~runtime_error + 5))(v3);
  *a2 = result;
  return result;
}

void sub_111F02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v16) {
    sub_20A69F0(v16);
  }
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v17)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v15);
  goto LABEL_8;
}

uint64_t sub_111F070(std::runtime_error_vtbl **a1, _DWORD *a2)
{
  unint64_t v3 = *a1;
  if (!v3)
  {
    exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
    sub_5E5C(&v9, "Cannot convert datum to unsigned int");
    uint64_t v8 = *a1;
    int v7 = a1[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)&v7->~runtime_error_0, 1uLL, memory_order_relaxed);
    }
    std::runtime_error::runtime_error(exception, &v9);
    exception->__vftable = (std::runtime_error_vtbl *)&off_2441CB0;
    exception[1].__vftable = v8;
    exception[1].__imp_.__imp_ = (const char *)v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)&v7->~runtime_error_0, 1uLL, memory_order_relaxed);
    }
  }
  uint64_t result = (*((uint64_t (**)(std::runtime_error_vtbl *))v3->~runtime_error + 6))(v3);
  *a2 = result;
  return result;
}

void sub_111F16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v16) {
    sub_20A69F0(v16);
  }
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v17)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v15);
  goto LABEL_8;
}

double sub_111F1B0(std::runtime_error_vtbl **a1, uint64_t a2)
{
  unint64_t v3 = *a1;
  if (!v3)
  {
    exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
    sub_5E5C(&v9, "Cannot convert datum to string");
    uint64_t v8 = *a1;
    int v7 = a1[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)&v7->~runtime_error_0, 1uLL, memory_order_relaxed);
    }
    std::runtime_error::runtime_error(exception, &v9);
    exception->__vftable = (std::runtime_error_vtbl *)&off_2441CB0;
    exception[1].__vftable = v8;
    exception[1].__imp_.__imp_ = (const char *)v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)&v7->~runtime_error_0, 1uLL, memory_order_relaxed);
    }
  }
  (*((void (**)(std::string *__return_ptr))v3->~runtime_error + 11))(&v9);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  double result = *(double *)&v9.__r_.__value_.__l.__data_;
  *(std::string *)a2 = v9;
  return result;
}

void sub_111F2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v16) {
    sub_20A69F0(v16);
  }
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v17)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v15);
  goto LABEL_8;
}

uint64_t sub_111F310(std::runtime_error_vtbl **a1, unsigned char *a2)
{
  unint64_t v3 = *a1;
  if (!v3)
  {
    exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
    sub_5E5C(&v9, "Cannot convert datum to BOOLean");
    uint64_t v8 = *a1;
    int v7 = a1[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)&v7->~runtime_error_0, 1uLL, memory_order_relaxed);
    }
    std::runtime_error::runtime_error(exception, &v9);
    exception->__vftable = (std::runtime_error_vtbl *)&off_2441CB0;
    exception[1].__vftable = v8;
    exception[1].__imp_.__imp_ = (const char *)v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)&v7->~runtime_error_0, 1uLL, memory_order_relaxed);
    }
  }
  uint64_t result = (*((uint64_t (**)(std::runtime_error_vtbl *))v3->~runtime_error + 10))(v3);
  *a2 = result;
  return result;
}

void sub_111F40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v16) {
    sub_20A69F0(v16);
  }
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v17)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v15);
  goto LABEL_8;
}

BOOL sub_111F450(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  (*(void (**)(std::runtime_error_vtbl **__return_ptr))(*(void *)a1 + 72))(&v7);
  uint64_t v4 = v7;
  if (v7)
  {
    uint64_t v5 = v8;
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      int v10 = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      int v10 = 0;
    }
    std::string v9 = v4;
    sub_111EF30(&v9, a3);
    if (v10) {
      sub_20A69F0(v10);
    }
    if (v5) {
      sub_20A69F0(v5);
    }
  }
  if (v8) {
    sub_20A69F0(v8);
  }
  return v4 != 0;
}

void sub_111F51C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, std::string *a12, std::string *a13, uint64_t a14, long long a15, std::string::size_type a16, uint64_t a17, long long a18, std::string::size_type a19)
{
  unint64_t v23 = *(std::__shared_weak_count **)(v20 - 56);
  if (v23) {
    sub_20A69F0(v23);
  }
  if (a2 == 1)
  {
    unint64_t v24 = __cxa_begin_catch(exception_object);
    exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    unint64_t v26 = std::string::append((std::string *)&a12, "': ");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    a16 = v26->__r_.__value_.__r.__words[2];
    a15 = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    BOOL v28 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*v24 + 16))(v24);
    uint64_t v29 = std::string::append((std::string *)&a15, v28);
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    a19 = v29->__r_.__value_.__r.__words[2];
    a18 = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    uint64_t v32 = (std::runtime_error_vtbl *)v24[2];
    uint64_t v31 = v24[3];
    if (v31) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
    }
    std::runtime_error::runtime_error(exception, (const std::string *)&a18);
    exception->__vftable = (std::runtime_error_vtbl *)&off_2441CB0;
    exception[1].__vftable = v32;
    exception[1].__imp_.__imp_ = (const char *)v31;
    if (v31) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
    }
  }
  if (v19) {
    sub_20A69F0(v19);
  }
  if (a11) {
    sub_20A69F0(a11);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_111F700(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  BOOL result = sub_111F450(a1, a2, a3);
  if (!result) {
    *a3 = *a4;
  }
  return result;
}

BOOL sub_111F734(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  (*(void (**)(std::runtime_error_vtbl **__return_ptr))(*(void *)a1 + 72))(&v7);
  uint64_t v4 = v7;
  if (v7)
  {
    uint64_t v5 = v8;
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      int v10 = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      int v10 = 0;
    }
    std::string v9 = v4;
    sub_111F070(&v9, a3);
    if (v10) {
      sub_20A69F0(v10);
    }
    if (v5) {
      sub_20A69F0(v5);
    }
  }
  if (v8) {
    sub_20A69F0(v8);
  }
  return v4 != 0;
}

void sub_111F800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, std::string *a12, std::string *a13, uint64_t a14, long long a15, std::string::size_type a16, uint64_t a17, long long a18, std::string::size_type a19)
{
  unint64_t v23 = *(std::__shared_weak_count **)(v20 - 56);
  if (v23) {
    sub_20A69F0(v23);
  }
  if (a2 == 1)
  {
    unint64_t v24 = __cxa_begin_catch(exception_object);
    exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    unint64_t v26 = std::string::append((std::string *)&a12, "': ");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    a16 = v26->__r_.__value_.__r.__words[2];
    a15 = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    BOOL v28 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*v24 + 16))(v24);
    uint64_t v29 = std::string::append((std::string *)&a15, v28);
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    a19 = v29->__r_.__value_.__r.__words[2];
    a18 = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    uint64_t v32 = (std::runtime_error_vtbl *)v24[2];
    uint64_t v31 = v24[3];
    if (v31) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
    }
    std::runtime_error::runtime_error(exception, (const std::string *)&a18);
    exception->__vftable = (std::runtime_error_vtbl *)&off_2441CB0;
    exception[1].__vftable = v32;
    exception[1].__imp_.__imp_ = (const char *)v31;
    if (v31) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
    }
  }
  if (v19) {
    sub_20A69F0(v19);
  }
  if (a11) {
    sub_20A69F0(a11);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_111F9E4(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  BOOL result = sub_111F734(a1, a2, a3);
  if (!result) {
    *a3 = *a4;
  }
  return result;
}

BOOL sub_111FA18(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  (*(void (**)(std::runtime_error_vtbl **__return_ptr))(*(void *)a1 + 72))(&v7);
  uint64_t v4 = v7;
  if (v7)
  {
    uint64_t v5 = v8;
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      int v10 = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      int v10 = 0;
    }
    std::string v9 = v4;
    sub_111F310(&v9, a3);
    if (v10) {
      sub_20A69F0(v10);
    }
    if (v5) {
      sub_20A69F0(v5);
    }
  }
  if (v8) {
    sub_20A69F0(v8);
  }
  return v4 != 0;
}

void sub_111FAE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, std::string *a12, std::string *a13, uint64_t a14, long long a15, std::string::size_type a16, uint64_t a17, long long a18, std::string::size_type a19)
{
  unint64_t v23 = *(std::__shared_weak_count **)(v20 - 56);
  if (v23) {
    sub_20A69F0(v23);
  }
  if (a2 == 1)
  {
    unint64_t v24 = __cxa_begin_catch(exception_object);
    exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    unint64_t v26 = std::string::append((std::string *)&a12, "': ");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    a16 = v26->__r_.__value_.__r.__words[2];
    a15 = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    BOOL v28 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*v24 + 16))(v24);
    uint64_t v29 = std::string::append((std::string *)&a15, v28);
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    a19 = v29->__r_.__value_.__r.__words[2];
    a18 = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    uint64_t v32 = (std::runtime_error_vtbl *)v24[2];
    uint64_t v31 = v24[3];
    if (v31) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
    }
    std::runtime_error::runtime_error(exception, (const std::string *)&a18);
    exception->__vftable = (std::runtime_error_vtbl *)&off_2441CB0;
    exception[1].__vftable = v32;
    exception[1].__imp_.__imp_ = (const char *)v31;
    if (v31) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
    }
  }
  if (v19) {
    sub_20A69F0(v19);
  }
  if (a11) {
    sub_20A69F0(a11);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_111FCC8(uint64_t a1, uint64_t a2, unsigned char *a3, unsigned char *a4)
{
  BOOL result = sub_111FA18(a1, a2, a3);
  if (!result) {
    *a3 = *a4;
  }
  return result;
}

BOOL sub_111FCFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(std::runtime_error_vtbl **__return_ptr))(*(void *)a1 + 72))(&v7);
  uint64_t v4 = v7;
  if (v7)
  {
    uint64_t v5 = v8;
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      int v10 = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      int v10 = 0;
    }
    std::string v9 = v4;
    sub_111F1B0(&v9, a3);
    if (v10) {
      sub_20A69F0(v10);
    }
    if (v5) {
      sub_20A69F0(v5);
    }
  }
  if (v8) {
    sub_20A69F0(v8);
  }
  return v4 != 0;
}

void sub_111FDC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, std::string *a12, std::string *a13, uint64_t a14, long long a15, std::string::size_type a16, uint64_t a17, long long a18, std::string::size_type a19)
{
  unint64_t v23 = *(std::__shared_weak_count **)(v20 - 56);
  if (v23) {
    sub_20A69F0(v23);
  }
  if (a2 == 1)
  {
    unint64_t v24 = __cxa_begin_catch(exception_object);
    exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    unint64_t v26 = std::string::append((std::string *)&a12, "': ");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    a16 = v26->__r_.__value_.__r.__words[2];
    a15 = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    BOOL v28 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*v24 + 16))(v24);
    uint64_t v29 = std::string::append((std::string *)&a15, v28);
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    a19 = v29->__r_.__value_.__r.__words[2];
    a18 = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    uint64_t v32 = (std::runtime_error_vtbl *)v24[2];
    uint64_t v31 = v24[3];
    if (v31) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
    }
    std::runtime_error::runtime_error(exception, (const std::string *)&a18);
    exception->__vftable = (std::runtime_error_vtbl *)&off_2441CB0;
    exception[1].__vftable = v32;
    exception[1].__imp_.__imp_ = (const char *)v31;
    if (v31) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
    }
  }
  if (v19) {
    sub_20A69F0(v19);
  }
  if (a11) {
    sub_20A69F0(a11);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_111FFAC(uint64_t a1, uint64_t a2, std::string *a3, const std::string *a4)
{
  BOOL v6 = sub_111FCFC(a1, a2, (uint64_t)a3);
  if (!v6) {
    std::string::operator=(a3, a4);
  }
  return v6;
}

BOOL sub_111FFF4(uint64_t a1, uint64_t a2, void *a3)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 72))(&v8);
  uint64_t v4 = v8;
  if (v8)
  {
    uint64_t v5 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v6 = (std::__shared_weak_count *)a3[1];
    *a3 = v4;
    a3[1] = v5;
    if (v6) {
      sub_20A69F0(v6);
    }
  }
  if (v9) {
    sub_20A69F0(v9);
  }
  return v4 != 0;
}

void *sub_1120084(void *a1, unsigned int (****a2)(void))
{
  switch((***a2)())
  {
    case 1u:
      sub_5E5C(&v60, "null");
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v4 = &v60;
      }
      else {
        uint64_t v4 = (std::string *)v60.__r_.__value_.__r.__words[0];
      }
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v60.__r_.__value_.__l.__size_;
      }
      sub_188FC78(a1, (uint64_t)v4, size);
      goto LABEL_58;
    case 2u:
      uint64_t v29 = *a2;
      int v7 = (std::__shared_weak_count *)a2[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::to_string(&v60, (uint64_t)v29[3]);
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v8 = &v60;
      }
      else {
        uint64_t v8 = (std::string *)v60.__r_.__value_.__r.__words[0];
      }
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v9 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v9 = v60.__r_.__value_.__l.__size_;
      }
      goto LABEL_147;
    case 3u:
      BOOL v6 = *a2;
      int v7 = (std::__shared_weak_count *)a2[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::to_string(&v60, (unint64_t)v6[3]);
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v8 = &v60;
      }
      else {
        uint64_t v8 = (std::string *)v60.__r_.__value_.__r.__words[0];
      }
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v9 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v9 = v60.__r_.__value_.__l.__size_;
      }
      goto LABEL_147;
    case 4u:
      int v10 = *a2;
      int v7 = (std::__shared_weak_count *)a2[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::to_string(&v60, *((long double *)v10 + 3));
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v8 = &v60;
      }
      else {
        uint64_t v8 = (std::string *)v60.__r_.__value_.__r.__words[0];
      }
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v9 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v9 = v60.__r_.__value_.__l.__size_;
      }
      goto LABEL_147;
    case 5u:
      int v11 = *a2;
      int v7 = (std::__shared_weak_count *)a2[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v12 = *((unsigned __int8 *)v11 + 24);
      if (v12) {
        uint64_t v13 = "true";
      }
      else {
        uint64_t v13 = "false";
      }
      if (v12) {
        uint64_t v14 = 4;
      }
      else {
        uint64_t v14 = 5;
      }
      sub_188FC78(a1, (uint64_t)v13, v14);
      goto LABEL_150;
    case 6u:
      long long v30 = *a2;
      int v7 = (std::__shared_weak_count *)a2[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_5E5C(&v60, "{");
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v31 = &v60;
      }
      else {
        uint64_t v31 = (std::string *)v60.__r_.__value_.__r.__words[0];
      }
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v32 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v32 = v60.__r_.__value_.__l.__size_;
      }
      sub_188FC78(a1, (uint64_t)v31, v32);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
      uint64_t v33 = v30[3];
      if (v33)
      {
        char v34 = 1;
        do
        {
          if ((v34 & 1) == 0)
          {
            sub_5E5C(&v60, ",");
            unint64_t v35 = (v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &v60
                : (std::string *)v60.__r_.__value_.__r.__words[0];
            uint64_t v36 = (v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? HIBYTE(v60.__r_.__value_.__r.__words[2])
                : v60.__r_.__value_.__l.__size_;
            sub_188FC78(a1, (uint64_t)v35, v36);
            if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v60.__r_.__value_.__l.__data_);
            }
          }
          sub_5E5C(&v60, "\"");
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v37 = &v60;
          }
          else {
            int v37 = (std::string *)v60.__r_.__value_.__r.__words[0];
          }
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v38 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v38 = v60.__r_.__value_.__l.__size_;
          }
          int v39 = sub_188FC78(a1, (uint64_t)v37, v38);
          int v40 = *((char *)v33 + 39);
          if (v40 >= 0) {
            uint64_t v41 = (uint64_t)(v33 + 2);
          }
          else {
            uint64_t v41 = (uint64_t)v33[2];
          }
          if (v40 >= 0) {
            uint64_t v42 = *((unsigned __int8 *)v33 + 39);
          }
          else {
            uint64_t v42 = (uint64_t)v33[3];
          }
          uint64_t v43 = sub_188FC78(v39, v41, v42);
          sub_5E5C(&__p, "\":");
          if ((v59 & 0x80u) == 0) {
            p_p = &__p;
          }
          else {
            p_p = __p;
          }
          if ((v59 & 0x80u) == 0) {
            uint64_t v45 = v59;
          }
          else {
            uint64_t v45 = v58;
          }
          double v46 = sub_188FC78(v43, (uint64_t)p_p, v45);
          sub_1120084(v46, v33 + 5);
          if ((char)v59 < 0) {
            operator delete(__p);
          }
          if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v60.__r_.__value_.__l.__data_);
          }
          char v34 = 0;
          uint64_t v33 = (unsigned int (**)(void))*v33;
        }
        while (v33);
      }
      sub_5E5C(&v60, "}");
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        double v47 = &v60;
      }
      else {
        double v47 = (std::string *)v60.__r_.__value_.__r.__words[0];
      }
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v48 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v48 = v60.__r_.__value_.__l.__size_;
      }
      sub_188FC78(a1, (uint64_t)v47, v48);
      goto LABEL_148;
    case 7u:
      uint64_t v49 = *a2;
      int v7 = (std::__shared_weak_count *)a2[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_5E5C(&v60, "[");
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        double v50 = &v60;
      }
      else {
        double v50 = (std::string *)v60.__r_.__value_.__r.__words[0];
      }
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v51 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v51 = v60.__r_.__value_.__l.__size_;
      }
      sub_188FC78(a1, (uint64_t)v50, v51);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
      double v52 = v49[1];
      if (v52 != v49[2])
      {
        char v53 = 1;
        do
        {
          if ((v53 & 1) == 0)
          {
            sub_5E5C(&v60, ",");
            double v54 = (v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &v60
                : (std::string *)v60.__r_.__value_.__r.__words[0];
            uint64_t v55 = (v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? HIBYTE(v60.__r_.__value_.__r.__words[2])
                : v60.__r_.__value_.__l.__size_;
            sub_188FC78(a1, (uint64_t)v54, v55);
            if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v60.__r_.__value_.__l.__data_);
            }
          }
          sub_1120084(a1, v52);
          char v53 = 0;
          v52 += 2;
        }
        while (v52 != v49[2]);
      }
      sub_5E5C(&v60, "]");
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v8 = &v60;
      }
      else {
        uint64_t v8 = (std::string *)v60.__r_.__value_.__r.__words[0];
      }
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v9 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v9 = v60.__r_.__value_.__l.__size_;
      }
LABEL_147:
      sub_188FC78(a1, (uint64_t)v8, v9);
LABEL_148:
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
LABEL_150:
      if (v7) {
        sub_20A69F0(v7);
      }
      break;
    case 8u:
      sub_5E5C(&v60, "\"");
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        id v15 = &v60;
      }
      else {
        id v15 = (std::string *)v60.__r_.__value_.__r.__words[0];
      }
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v16 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v16 = v60.__r_.__value_.__l.__size_;
      }
      int v17 = sub_188FC78(a1, (uint64_t)v15, v16);
      unint64_t v18 = *a2;
      unint64_t v19 = (std::__shared_weak_count *)a2[1];
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v22 = v18[1];
      uint64_t v20 = (uint64_t)(v18 + 1);
      uint64_t v21 = (uint64_t)v22;
      int v23 = *(char *)(v20 + 23);
      if (v23 >= 0) {
        uint64_t v24 = v20;
      }
      else {
        uint64_t v24 = v21;
      }
      if (v23 >= 0) {
        uint64_t v25 = *(unsigned __int8 *)(v20 + 23);
      }
      else {
        uint64_t v25 = *(void *)(v20 + 8);
      }
      unint64_t v26 = sub_188FC78(v17, v24, v25);
      sub_5E5C(&__p, "\"");
      if ((v59 & 0x80u) == 0) {
        long long v27 = &__p;
      }
      else {
        long long v27 = __p;
      }
      if ((v59 & 0x80u) == 0) {
        uint64_t v28 = v59;
      }
      else {
        uint64_t v28 = v58;
      }
      sub_188FC78(v26, (uint64_t)v27, v28);
      if ((char)v59 < 0) {
        operator delete(__p);
      }
      if (v19) {
        sub_20A69F0(v19);
      }
LABEL_58:
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
      break;
    default:
      return a1;
  }
  return a1;
}

void sub_1120620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (v20) {
    sub_20A69F0(v20);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1120718(void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    BOOL v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    BOOL v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

double sub_11207C4@<D0>(_OWORD *a1@<X8>)
{
  sub_1120930(v3);
  double result = v3[0];
  *a1 = *(_OWORD *)v3;
  return result;
}

void *sub_1120800@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *(_DWORD *)(a1 + 24) = a2;
  return sub_1120AEC(a3, (void *)(a1 + 8));
}

void *sub_1120810@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *(_DWORD *)(a1 + 28) = a2;
  return sub_1120AEC(a3, (void *)(a1 + 8));
}

void *sub_1120820@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *(_DWORD *)(a1 + 32) = a2;
  return sub_1120AEC(a3, (void *)(a1 + 8));
}

void *sub_1120830@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, void *a4@<X8>)
{
  if (a3) {
    int v6 = *(_DWORD *)(a1 + 36) | a2;
  }
  else {
    int v6 = *(_DWORD *)(a1 + 36) & ~a2;
  }
  *(_DWORD *)(a1 + 36) = v6;
  return sub_1120AEC(a4, (void *)(a1 + 8));
}

void *sub_112085C@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, void *a4@<X8>)
{
  if (a3) {
    int v6 = *(_DWORD *)(a1 + 36) | a2;
  }
  else {
    int v6 = *(_DWORD *)(a1 + 36) & ~a2;
  }
  *(_DWORD *)(a1 + 36) = v6;
  return sub_1120AEC(a4, (void *)(a1 + 8));
}

uint64_t sub_1120888@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1120B30(a1, a2);
}

uint64_t sub_11208B0(uint64_t a1)
{
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_11208E0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

void sub_1120930(void *a1@<X8>)
{
  unint64_t v2 = operator new(0x40uLL);
  v2[1] = 0;
  _OWORD v2[2] = 0;
  *unint64_t v2 = off_2491970;
  v2[5] = 0;
  v2[3] = off_2491908;
  *((_OWORD *)v2 + 3) = xmmword_212F320;
  *a1 = v2 + 3;
  a1[1] = v2;
  v2[4] = 0;

  sub_1120A64((uint64_t)a1, v2 + 4, (uint64_t)(v2 + 3));
}

void sub_11209C8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_2491970;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_11209E8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_2491970;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1120A3C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1120A64(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v5)
      {
        sub_20A69F0(v5);
      }
    }
  }
}

void *sub_1120AEC(void *a1, void *a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0;
LABEL_5:
    sub_2F0F80();
  }
  uint64_t v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4) {
    goto LABEL_5;
  }
  return a1;
}

uint64_t sub_1120B30@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x28uLL);
  uint64_t result = sub_1120B8C((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_1120B78(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1120B8C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_24919C0;
  sub_1178454((__n128 *)(a1 + 24), a2);
  return a1;
}

void sub_1120BD4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1120BE8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24919C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1120C08(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24919C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void *sub_1120C64(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a1 + 64;
  uint64_t v5 = sub_1120D7C(a1 + 64, a2);
  if (*(void **)(a1 + 8272) == v5)
  {
    unint64_t v14 = 0x700000000000000;
    if (sub_1120DDC((unsigned __int8 *)a2, &v14))
    {
      size_t v8 = sub_1120D7C(v4, &v14);
      if (*(void **)(a1 + 8272) != v8)
      {
        int v6 = *(void **)(v8[1] + 8);
LABEL_9:
        *(void *)sub_1120E68(v4, a2) = v6;
        return v6;
      }
      std::string::size_type v9 = (uint64_t *)((char *)&unk_211DB10 + 8 * (v14 & 0x7F));
      uint64_t v10 = *v9;
      uint64_t v11 = v9[1];
      if (*v9 != v11)
      {
        int v12 = (void **)(&off_2441CC8 + v10);
        uint64_t v13 = 8 * v11 - 8 * v10;
        int v6 = &unk_2491B50;
        while (**v12 != v14)
        {
          ++v12;
          v13 -= 8;
          if (!v13) {
            goto LABEL_9;
          }
        }
        int v6 = *v12;
        goto LABEL_9;
      }
    }
    int v6 = &unk_2491B50;
    goto LABEL_9;
  }
  return *(void **)(v5[1] + 8);
}

void *sub_1120D7C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 4 * (*a2 & 0x7FFLL));
  uint64_t v3 = *(unsigned int *)(a1 + ((((*a2 & 0x7FFuLL) << 32) + 0x100000000) >> 30));
  if (v2 == v3) {
    return *(void **)(a1 + 8208);
  }
  uint64_t v4 = (void *)(*(void *)(a1 + 8200) + 16 * v2);
  uint64_t v5 = 16 * v3 - 16 * v2;
  while (*v4 != (*a2 & 0xFFFFFFFFFFFFFFLL))
  {
    v4 += 2;
    v5 -= 16;
    if (!v5) {
      return *(void **)(a1 + 8208);
    }
  }
  return v4;
}

BOOL sub_1120DDC(unsigned __int8 *a1, unint64_t *a2)
{
  *a2 = 0x700000000000000;
  if (*(void *)a1 >> 58 == 1 && (unsigned int v4 = sub_1120F28((uint64_t)a1, 0), HIBYTE(v4) == 1))
  {
    *a2 = v4 & 0xFFFFFF | 0x500000000000000;
    return 1;
  }
  else
  {
    return sub_1121040(a1, a2);
  }
}

uint64_t sub_1120E68(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v13 = v4;
  unint64_t v5 = ((unint64_t)(v3 & 0x7FF) << 32) + 0x100000000;
  uint64_t v6 = v3 & 0x7FF;
  uint64_t v7 = *(void *)(a1 + 8200);
  uint64_t v8 = *(unsigned int *)(a1 + 4 * v6);
  uint64_t v9 = *(unsigned int *)(a1 + (v5 >> 30));
  if (v8 == v9) {
LABEL_5:
  }
    sub_11216F0((uint64_t *)(a1 + 8200), v7 + 16 * v9, &v13);
  uint64_t v10 = (void *)(v7 + 16 * v8);
  uint64_t v11 = 16 * v9 - 16 * v8;
  while (*v10 != v4)
  {
    v10 += 2;
    v11 -= 16;
    if (!v11) {
      goto LABEL_5;
    }
  }
  return v10[1] + 8;
}

uint64_t sub_1120F28(uint64_t a1, void *a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = 0;
  char v5 = 1;
  unsigned int v6 = 50331648;
  char v7 = 1;
  while (1)
  {
    int v8 = *(unsigned __int8 *)(a1 + v4);
    if (v8 == 45) {
      break;
    }
    if (v8 == 95 || v8 == 0) {
      break;
    }
    v5 &= ((v8 & 0xDF) - 65) < 0x1Au;
    v7 &= (v8 - 48) < 0xA;
    if ((unint64_t)++v4 <= 3 && HIBYTE(v6) - 1 <= 2u)
    {
      if ((v8 - 97) >= 0x1A) {
        char v10 = v8;
      }
      else {
        char v10 = v8 - 32;
      }
      unsigned int v6 = ((v10 << (24 - 8 * HIBYTE(v6))) | v6) - 0x1000000;
    }
  }
  unsigned int v12 = v6;
  if ((((v4 & 0xFFFFFFFFFFFFFFFELL) == 2) & v5) != 0 || ((v4 == 3) & v7) != 0)
  {
    uint64_t result = sub_1133E84(&v12);
    if (!a2) {
      return result;
    }
    v3 += v4;
  }
  else
  {
    uint64_t result = 50331648;
    if (!a2) {
      return result;
    }
  }
  *a2 = v3;
  return result;
}

BOOL sub_1121040(unsigned __int8 *a1, unint64_t *a2)
{
  *a2 = 0x700000000000000;
  if (*(void *)a1 >> 59)
  {
    LODWORD(v9) = 2;
    long long v10 = off_2491A00;
    uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/maps-lang-cpp/src/lib/cache/impl/territor"
          "ysubdivisioncacheimpl.cpp";
    unsigned int v12 = "makeIso3166_2";
    int v13 = 79;
    sub_E1B4((uint64_t)v14);
    sub_188FC78(v15, (uint64_t)"Received a TerritorySubdivision ID string with an invalid length: ", 66);
    std::ostream::operator<<();
    sub_188FC78(v15, (uint64_t)" {", 2);
    sub_112133C(&v9, a1, 8, ", ");
    char v16 = 125;
    sub_188FC78(v15, (uint64_t)&v16, 1);
    goto LABEL_3;
  }
  if (HIBYTE(*(void *)a1) == 7)
  {
    unint64_t v4 = 0x700000000000000;
    return v4 >> 57 != 3;
  }
  uint64_t v5 = 0;
  unint64_t v4 = 0x700000000000000;
  while (1)
  {
    LODWORD(v6) = a1[v5];
    if ((v6 - 97) < 0x1A) {
      LOBYTE(v6) = v6 - 32;
    }
    BOOL v7 = (v6 - 48) >= 0xAu && ((v6 & 0xDF) - 65) >= 0x1Au;
    if (v7 && v6 != 45 && v6 != 95) {
      break;
    }
    if (v5 == 2)
    {
      unint64_t v8 = HIBYTE(v4);
      if (v6 == 95 || v6 == 45)
      {
        if (v8 - 1 < 8)
        {
          uint64_t v6 = 45;
LABEL_25:
          unint64_t v4 = ((v6 << (56 - 8 * HIBYTE(v4))) | v4) - 0x100000000000000;
          *a2 = v4;
          goto LABEL_26;
        }
        goto LABEL_26;
      }
      if (v8 - 1 <= 7)
      {
        unint64_t v4 = ((45 << (56 - 8 * HIBYTE(v4))) | v4) - 0x100000000000000;
        *a2 = v4;
      }
    }
    if (HIBYTE(v4) - 1 <= 7u)
    {
      uint64_t v6 = (char)v6;
      goto LABEL_25;
    }
LABEL_26:
    if (++v5 >= 7 - (unint64_t)a1[7]) {
      return v4 >> 57 != 3;
    }
  }
  LODWORD(v9) = 2;
  long long v10 = off_2491A00;
  uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/maps-lang-cpp/src/lib/cache/impl/territorys"
        "ubdivisioncacheimpl.cpp";
  unsigned int v12 = "makeIso3166_2";
  int v13 = 93;
  sub_E1B4((uint64_t)v14);
  sub_188FC78(v15, (uint64_t)"Received an invalid TerritorySubdivision ID string: \"", 53);
  std::ostream::write();
  sub_188FC78(v15, (uint64_t)"\", bytes: {", 11);
  sub_112133C(&v9, a1, 7 - a1[7], ", ");
  char v16 = 125;
  sub_188FC78(v15, (uint64_t)&v16, 1);
LABEL_3:
  sub_1121418((unsigned int *)&v9);
  return 0;
}

void sub_1121318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
}

void *sub_112133C(void *result, unsigned __int8 *a2, uint64_t a3, char *__s)
{
  if (a3)
  {
    uint64_t v5 = a3;
    char v7 = 0;
    unint64_t v8 = result + 8;
    do
    {
      if (v7)
      {
        size_t v9 = strlen(__s);
        sub_188FC78(v8, (uint64_t)__s, v9);
      }
      unsigned int v10 = *a2++;
      sub_188FC78(v8, (uint64_t)"0x", 2);
      char v11 = a0123456789abcd_0[(unint64_t)v10 >> 4];
      char v7 = 1;
      sub_188FC78(v8, (uint64_t)&v11, 1);
      char v12 = a0123456789abcd_0[v10 & 0xF];
      uint64_t result = sub_188FC78(v8, (uint64_t)&v12, 1);
      --v5;
    }
    while (v5);
  }
  return result;
}

unsigned int *sub_1121418(unsigned int *a1)
{
  uint64_t v2 = sub_1130B48();
  uint64_t v3 = *a1;
  uint64_t v4 = *((void *)a1 + 3);
  uint64_t v5 = *((void *)a1 + 4);
  uint64_t v6 = a1[10];
  sub_1121604((uint64_t)(a1 + 18), __p);
  unint64_t v7 = v13;
  if ((v13 & 0x80u) == 0) {
    unint64_t v8 = __p;
  }
  else {
    unint64_t v8 = (void **)__p[0];
  }
  if ((v13 & 0x80u) != 0) {
    unint64_t v7 = (unint64_t)__p[1];
  }
  v14[0] = v8;
  v14[1] = v7;
  (*(void (**)(uint64_t, uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t, void *))(*(void *)v2 + 16))(v2, v3, a1 + 2, v4, v5, v6, v14);
  if ((char)v13 < 0) {
    operator delete(__p[0]);
  }
  *((void *)a1 + 8) = v10;
  if (*((char *)a1 + 159) < 0) {
    operator delete(*((void **)a1 + 17));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return a1;
}

uint64_t sub_1121604@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_11216A4(a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  uint64_t v5 = (const void *)result;
  size_t v6 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((unsigned char *)a2 + 23) = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }
  uint64_t result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((unsigned char *)a2 + v6) = 0;
  return result;
}

uint64_t sub_11216A4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    unint64_t v3 = *(void *)(a1 + 48);
    if (*(void *)(a1 + 88) < v3) {
      *(void *)(a1 + 88) = v3;
    }
    return *(void *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(void *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

void sub_11216F0(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (a2 - *a1) >> 4;
  unint64_t v10 = a1[2];
  uint64_t v8 = (uint64_t)(a1 + 2);
  unint64_t v9 = v10;
  if (v5 < v10)
  {
    if (a2 != v5) {
      operator new();
    }
    sub_112189C((uint64_t)a1, a3);
  }
  unint64_t v11 = ((uint64_t)(v5 - v6) >> 4) + 1;
  if (!(v11 >> 60))
  {
    uint64_t v12 = v9 - v6;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    uint64_t v19 = v8;
    if (v13) {
      unint64_t v14 = (char *)sub_1121C00(v8, v13);
    }
    else {
      unint64_t v14 = 0;
    }
    id v15 = v14;
    char v16 = &v14[16 * v7];
    int v17 = v16;
    unint64_t v18 = &v14[16 * v13];
    sub_1121970(&v15, a3);
  }
  sub_2E00();
}

void sub_1121868()
{
}

void sub_112189C(uint64_t a1, void *a2)
{
  **(void **)(a1 + 8) = *a2;
  operator new();
}

void sub_1121900(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1121908(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = (void *)v6;
  if (v7 < a3)
  {
    unint64_t v9 = (uint64_t *)v7;
    uint64_t v8 = *(void **)(a1 + 8);
    do
    {
      uint64_t v10 = *v9;
      uint64_t v11 = v9[1];
      v9[1] = 0;
      *uint64_t v8 = v10;
      v8[1] = v11;
      v8 += 2;
      v9 += 2;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_1121B84((uint64_t)&v13, a2, v7, v6);
}

void sub_1121970(void *a1, uint64_t *a2)
{
  unint64_t v4 = (uint64_t *)a1[2];
  if (v4 == (uint64_t *)a1[3])
  {
    unint64_t v5 = (uint64_t *)a1[1];
    uint64_t v6 = (uint64_t)v5 - *a1;
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (uint64_t *)*a1) {
        unint64_t v13 = 1;
      }
      else {
        unint64_t v13 = ((uint64_t)v4 - *a1) >> 3;
      }
      uint64_t v14 = a1[4];
      uint64_t v28 = a1[4];
      id v15 = (char *)sub_1121C00(v14, v13);
      int v17 = &v15[16 * (v13 >> 2)];
      unint64_t v18 = (void *)a1[1];
      uint64_t v19 = a1[2] - (void)v18;
      if (v19)
      {
        uint64_t v20 = &v17[v19];
        uint64_t v21 = &v15[16 * (v13 >> 2)];
        do
        {
          *(void *)uint64_t v21 = *v18;
          uint64_t v22 = v18[1];
          v18[1] = 0;
          *((void *)v21 + 1) = v22;
          v21 += 16;
          v18 += 2;
        }
        while (v21 != v20);
        int64x2_t v23 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        int64x2_t v23 = vdupq_n_s64((unint64_t)v18);
        uint64_t v20 = &v15[16 * (v13 >> 2)];
      }
      uint64_t v25 = (uint64_t *)*a1;
      *a1 = v15;
      a1[1] = v17;
      int64x2_t v26 = v23;
      uint64_t v24 = a1[3];
      a1[2] = v20;
      a1[3] = &v15[16 * v16];
      uint64_t v27 = v24;
      sub_1121EF8((uint64_t)&v25);
      unint64_t v4 = (uint64_t *)a1[2];
    }
    else
    {
      uint64_t v7 = v6 >> 4;
      BOOL v8 = v6 >> 4 < -1;
      uint64_t v9 = (v6 >> 4) + 2;
      if (v8) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = v7 + 1;
      }
      unint64_t v11 = v10 >> 1;
      sub_1121C38((uint64_t)&v25, v5, v4, &v5[-2 * (v10 >> 1)]);
      unint64_t v4 = v12;
      a1[1] -= 16 * v11;
      a1[2] = v12;
    }
  }
  *unint64_t v4 = *a2;
  operator new();
}

uint64_t sub_1121AD0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1 + 16;
  sub_1121CB8(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(void *)a1, *(void *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_1121D54(v7, a3, *(void **)(a1 + 8), (void *)a2[2]);
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = a2[2];
  a2[2] = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_1121B84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v5 = a3;
    do
    {
      uint64_t v6 = *(void *)(v5 - 16);
      v5 -= 16;
      *(void *)(a4 - 16) = v6;
      a4 -= 16;
      uint64_t v7 = *(void *)(v5 + 8);
      *(void *)(v5 + 8) = 0;
      uint64_t v8 = *(void *)(a4 + 8);
      *(void *)(a4 + 8) = v7;
      if (v8) {
        operator delete();
      }
    }
    while (v5 != a2);
  }
  return a3;
}

void *sub_1121C00(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_188D718();
  }
  return operator new(16 * a2);
}

uint64_t *sub_1121C38(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    uint64_t v7 = *v5;
    uint64_t v8 = v5[1];
    v5[1] = 0;
    uint64_t v9 = a4[1];
    *a4 = v7;
    a4[1] = v8;
    if (v9) {
      operator delete();
    }
    a4 += 2;
    v5 += 2;
  }
  while (v5 != a3);
  return v6;
}

uint64_t sub_1121CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 16);
    do
    {
      uint64_t v9 = *(void *)(a3 - 16);
      a3 -= 16;
      *uint64_t v8 = v9;
      uint64_t v10 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = 0;
      v8[1] = v10;
      *((void *)&v16 + 1) = v8;
      v8 -= 2;
      v7 -= 16;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1121DD8((uint64_t)v13);
  return v11;
}

void *sub_1121D54(uint64_t a1, void *a2, void *a3, void *a4)
{
  unint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *unint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      a2[1] = 0;
      v4[1] = v5;
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_1121E68((uint64_t)v7);
  return v4;
}

uint64_t sub_1121DD8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1121E10(a1);
  }
  return a1;
}

uint64_t sub_1121E10(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(result + 8) + 8);
  while (v1 != v2)
  {
    uint64_t result = *(void *)(v1 + 8);
    *(void *)(v1 + 8) = 0;
    if (result) {
      operator delete();
    }
    v1 += 16;
  }
  return result;
}

uint64_t sub_1121E68(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1121EA0(a1);
  }
  return a1;
}

uint64_t sub_1121EA0(uint64_t result)
{
  uint64_t v1 = **(void **)(result + 16);
  uint64_t v2 = **(void **)(result + 8);
  while (v1 != v2)
  {
    uint64_t result = *(void *)(v1 - 8);
    *(void *)(v1 - 8) = 0;
    if (result) {
      operator delete();
    }
    v1 -= 16;
  }
  return result;
}

uint64_t sub_1121EF8(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1121F30(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v3 = result;
    do
    {
      *(void *)(v3 + 16) = v2 - 16;
      uint64_t result = *(void *)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        operator delete();
      }
      uint64_t v2 = *(void *)(v3 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

_OWORD *sub_1121F94(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t v5 = (void **)sub_1122028((uint64_t)a1, &v9, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_11220BC(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void *sub_1122028(uint64_t a1, void *a2, void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  unint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        char v8 = v4 + 4;
        if ((sub_1122114(a3, (void **)v4 + 4) & 0x80) == 0) {
          break;
        }
        unint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((sub_1122114(v8, a3) & 0x80) == 0) {
        break;
      }
      uint64_t v5 = v7 + 1;
      unint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t *sub_11220BC(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = sub_2F250(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t sub_1122114(void *a1, void **a2)
{
  size_t v2 = *((unsigned __int8 *)a1 + 23);
  size_t v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (void *)*a1;
    size_t v2 = v3;
  }
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  return sub_112214C(a1, v2, v5, v6);
}

uint64_t sub_112214C(const void *a1, size_t a2, void *__s2, size_t a4)
{
  if (a4 >= a2) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = a4;
  }
  int v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0) {
      return 1;
    }
  }
  else
  {
    if (a2 == a4) {
      return 0;
    }
    if (a2 >= a4) {
      return 1;
    }
  }
  return 255;
}

uint64_t sub_11221AC(uint64_t a1)
{
  *(void *)a1 = 850045863;
  *(void *)(a1 + 8264) = 0;
  *(_OWORD *)(a1 + 8272) = 0u;
  bzero((void *)(a1 + 8), 0x203CuLL);
  sub_1122CE0(a1 + 8264, 0);
  *(void *)(a1 + 16504) = 0;
  *(_OWORD *)(a1 + 16488) = 0u;
  bzero((void *)(a1 + 8288), 0x2004uLL);
  sub_1122C24(a1 + 16488, 0);
  *(void *)(a1 + 16528) = 0;
  *(_OWORD *)(a1 + 16512) = 0u;
  sub_112229C(a1);
  return a1;
}

void sub_1122260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v12 = v11;
  a10 = v12;
  sub_1122B18(&a10);
  sub_1122BD0(&a10);
  sub_1122C8C(&a10);
  std::mutex::~mutex(v10);
  _Unwind_Resume(a1);
}

void *sub_112229C(uint64_t a1)
{
  LOBYTE(v3) = 0;
  LOBYTE(v4) = 0;
  LOBYTE(v5) = 0;
  char v6 = 0;
  char v7 = 0;
  char v8 = 0;
  char v9 = 0;
  char v10 = 0;
  uint64_t v11 = &unk_212F4D0;
  sub_1122964(a1 + 8288, (uint64_t)&v3);
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = &unk_212F4D0;
  return sub_112249C(a1 + 64, (uint64_t)&v3);
}

uint64_t sub_1122318(uint64_t a1, long long *a2)
{
  uint64_t v4 = a1 + 8288;
  uint64_t v5 = sub_11225B4(a1 + 8288, (uint64_t)a2);
  if (*(void **)(a1 + 16496) != v5) {
    return *(void *)(v5[1] + 64);
  }
  long long v7 = a2[1];
  long long v16 = *a2;
  long long v17 = v7;
  long long v8 = a2[3];
  long long v18 = a2[2];
  long long v19 = v8;
  if (BYTE8(v7))
  {
    *(void *)&v13[0] = *(void *)sub_40EFE8((uint64_t)&v17);
    char v9 = 1;
  }
  else
  {
    char v9 = 0;
    LOBYTE(v13[0]) = 0;
  }
  BYTE8(v13[0]) = v9;
  if (BYTE8(v18)) {
    sub_40EFE8((uint64_t)&v18);
  }
  sub_11226C8((uint64_t)&v19, (uint64_t *)v13);
  char v10 = sub_11225B4(v4, (uint64_t)&v16);
  if (*(void **)(a1 + 16496) == v10) {
    operator new();
  }
  uint64_t v15 = *(void *)(v10[1] + 64);
  if (!sub_1122FBC((uint64_t)v13, (uint64_t)&v16, (uint64_t)a2))
  {
    long long v11 = a2[1];
    v13[0] = *a2;
    v13[1] = v11;
    long long v12 = a2[3];
    v13[2] = a2[2];
    void v13[3] = v12;
    uint64_t v14 = v15;
    sub_1122964(v4, (uint64_t)v13);
  }
  return v15;
}

void *sub_112249C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_11232A8((uint64_t)&v15, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v16 = v4;
  uint64_t v5 = *(void *)(a1 + 8200);
  uint64_t v6 = *(unsigned int *)(a1 + 4 * (v4 & 0x7FF));
  uint64_t v7 = *(unsigned int *)(a1 + ((((v4 & 0x7FF) << 32) + 0x100000000) >> 30));
  if (v6 == v7) {
LABEL_7:
  }
    sub_11232D0((uint64_t *)(a1 + 8200), (uint64_t *)(v5 + 16 * v7), (uint64_t *)&v16);
  unint64_t v8 = v4;
  char v9 = (void *)(v5 + 16 * v6);
  long long v11 = *(uint64_t **)a2;
  size_t v10 = *(void *)(a2 + 8);
  uint64_t v12 = 16 * v7 - 16 * v6;
  while (1)
  {
    if (*v9 == v8)
    {
      uint64_t v13 = v9[1];
      if (*(void *)(v13 + 8) == v10 && !memcmp(*(const void **)v13, v11, v10)) {
        return v9;
      }
    }
    v9 += 2;
    v12 -= 16;
    if (!v12) {
      goto LABEL_7;
    }
  }
}

void *sub_11225B4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 8)) {
    uint64_t v4 = sub_1132F20(a2);
  }
  else {
    uint64_t v4 = 0;
  }
  unint64_t v5 = 0x9E3779B97F4A7C13;
  unint64_t v6 = sub_1123B18(v4 - 0x61C8864680B583EDLL, a2 + 16);
  unint64_t v7 = sub_1123B18(v6, a2 + 32);
  if (*(unsigned char *)(a2 + 56)) {
    unint64_t v5 = sub_11343C4((uint64_t)&v14, a2 + 48) - 0x61C8864680B583EDLL;
  }
  unint64_t v8 = ((v7 >> 2) + (v7 << 6) + v5) ^ v7;
  uint64_t v9 = *(unsigned int *)(a1 + 4 * (v8 & 0x7FF));
  uint64_t v10 = *(unsigned int *)(a1 + ((((v8 & 0x7FF) << 32) + 0x100000000) >> 30));
  if (v9 == v10) {
    return *(void **)(a1 + 8208);
  }
  long long v11 = (void *)(*(void *)(a1 + 8200) + 16 * v9);
  uint64_t v12 = 16 * v10 - 16 * v9;
  while (*v11 != v8 || !sub_1122FBC((uint64_t)&v15, v11[1], a2))
  {
    v11 += 2;
    v12 -= 16;
    if (!v12) {
      return *(void **)(a1 + 8208);
    }
  }
  return v11;
}

uint64_t sub_11226C8(uint64_t result, uint64_t *a2)
{
  if (*(unsigned char *)(result + 8))
  {
    if (*((unsigned char *)a2 + 8))
    {
      uint64_t v3 = result;
      uint64_t result = sub_40EFE8(result);
      uint64_t v6 = 0x50000000000505ALL;
      if (*(void *)(result + 8) == 0x50000000000505ALL)
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F8228, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F8228))
        {
          nullsub_1(&unk_24F8220);
          __cxa_guard_release(&qword_24F8228);
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25FE3D0, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_25FE3D0))
        {
          qword_25FE3C8 = (uint64_t)sub_11307A4((uint64_t)&unk_24F8220, &v6);
          __cxa_guard_release(&qword_25FE3D0);
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25FE3E0, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_25FE3E0))
        {
          qword_25FE3D8 = sub_11308BC();
          __cxa_guard_release(&qword_25FE3E0);
        }
        if (!*((unsigned char *)a2 + 8)
          || (uint64_t v4 = *a2, v5 = &qword_25FE3D8, *a2 != 0x500000000004B48)
          && v4 != 0x500000000004E43
          && v4 != 0x500000000004F4DLL)
        {
          unint64_t v5 = &qword_25FE3C8;
        }
        return sub_1122AB8(v3, v5);
      }
    }
  }
  return result;
}

void sub_1122834(_Unwind_Exception *a1)
{
}

void *sub_112286C(uint64_t *a1, void *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((uint64_t)v7 - *a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    v16[4] = v4;
    if (v12) {
      uint64_t v13 = (char *)sub_1122DC0(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    char v14 = &v13[8 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[8 * v12];
    *(void *)char v14 = *a2;
    v16[2] = v14 + 8;
    sub_1122D48(a1, v16);
    unint64_t v8 = (void *)a1[1];
    sub_1122F20((uint64_t)v16);
  }
  else
  {
    *unint64_t v7 = *a2;
    unint64_t v8 = v7 + 1;
    a1[1] = (uint64_t)v8;
  }
  a1[1] = (uint64_t)v8;
  return v8 - 1;
}

void sub_1122950(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1122F20((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1122964(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 8)) {
    uint64_t v4 = sub_1132F20(a2);
  }
  else {
    uint64_t v4 = 0;
  }
  unint64_t v5 = 0x9E3779B97F4A7C13;
  unint64_t v6 = sub_1123B18(v4 - 0x61C8864680B583EDLL, a2 + 16);
  unint64_t v7 = sub_1123B18(v6, a2 + 32);
  if (*(unsigned char *)(a2 + 56)) {
    unint64_t v5 = sub_11343C4((uint64_t)&v16, a2 + 48) - 0x61C8864680B583EDLL;
  }
  uint64_t v8 = ((v7 >> 2) + (v7 << 6) + v5) ^ v7;
  uint64_t v15 = v8;
  uint64_t v9 = *(void *)(a1 + 8200);
  uint64_t v10 = *(unsigned int *)(a1 + 4 * (v8 & 0x7FF));
  uint64_t v11 = *(unsigned int *)(a1 + ((((unint64_t)(v8 & 0x7FF) << 32) + 0x100000000) >> 30));
  if (v10 == v11) {
LABEL_11:
  }
    sub_1123B78((uint64_t *)(a1 + 8200), (uint64_t *)(v9 + 16 * v11), &v15);
  unint64_t v12 = (void *)(v9 + 16 * v10);
  uint64_t v13 = 16 * v11 - 16 * v10;
  while (*v12 != v8 || !sub_1122FBC((uint64_t)&v17, v12[1], a2))
  {
    v12 += 2;
    v13 -= 16;
    if (!v13) {
      goto LABEL_11;
    }
  }
  return v12;
}

uint64_t sub_1122AB8(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    sub_497CC0(&v4, *a2);
    *(void *)a1 = v4;
  }
  else
  {
    sub_497CC0((void *)a1, *a2);
    *(unsigned char *)(a1 + 8) = 1;
  }
  return a1;
}

void sub_1122B18(void ***a1)
{
  size_t v2 = *a1;
  if (*v2)
  {
    sub_1122B6C((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_1122B6C(uint64_t result, void *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void **)(result + 8);
  while (v3 != a2)
  {
    uint64_t v4 = *--v3;
    uint64_t result = v4;
    *uint64_t v3 = 0;
    if (v4) {
      operator delete();
    }
  }
  *(void *)(v2 + 8) = a2;
  return result;
}

void sub_1122BD0(void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_1122C24((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_1122C24(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  for (uint64_t i = *(void *)(result + 8); i != a2; i -= 16)
  {
    uint64_t result = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (result) {
      operator delete();
    }
  }
  *(void *)(v2 + 8) = a2;
  return result;
}

void sub_1122C8C(void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_1122CE0((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_1122CE0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  for (uint64_t i = *(void *)(result + 8); i != a2; i -= 16)
  {
    uint64_t result = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (result) {
      operator delete();
    }
  }
  *(void *)(v2 + 8) = a2;
  return result;
}

uint64_t sub_1122D48(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1122DF8((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1122DC0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_188D718();
  }
  return operator new(8 * a2);
}

uint64_t sub_1122DF8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1122E90((uint64_t)v13);
  return v11;
}

uint64_t sub_1122E90(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1122EC8(a1);
  }
  return a1;
}

uint64_t sub_1122EC8(uint64_t result)
{
  uint64_t v1 = *(uint64_t **)(*(void *)(result + 16) + 8);
  uint64_t v2 = *(uint64_t **)(*(void *)(result + 8) + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    uint64_t *v1 = 0;
    if (result) {
      operator delete();
    }
    ++v1;
  }
  return result;
}

uint64_t sub_1122F20(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1122F58(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v3 = result;
    do
    {
      *(void *)(v3 + 16) = v2 - 8;
      uint64_t result = *(void *)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        operator delete();
      }
      uint64_t v2 = *(void *)(v3 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

BOOL sub_1122FBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL result = sub_1123030((uint64_t)&v7, a2, a3);
  if (result)
  {
    if (*(unsigned char *)(a2 + 56)) {
      BOOL v6 = *(unsigned char *)(a3 + 56) == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6) {
      return (*(unsigned char *)(a2 + 56) != 0) == (*(unsigned char *)(a3 + 56) != 0);
    }
    else {
      return sub_1134340((uint64_t **)(a2 + 48), (uint64_t **)(a3 + 48));
    }
  }
  return result;
}

BOOL sub_1123030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL result = sub_11230A8((uint64_t)&v7, a2, a3);
  if (result)
  {
    if (*(unsigned char *)(a2 + 40)) {
      BOOL v6 = *(unsigned char *)(a3 + 40) == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6) {
      return (*(unsigned char *)(a2 + 40) != 0) == (*(unsigned char *)(a3 + 40) != 0);
    }
    else {
      return *(void *)(a2 + 32) == *(void *)(a3 + 32);
    }
  }
  return result;
}

BOOL sub_11230A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(unsigned __int8 *)(a3 + 8);
  if (*(unsigned char *)(a2 + 8)) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if ((*(unsigned char *)(a2 + 8) != 0) != (v5 != 0)) {
      return 0;
    }
  }
  else if (!sub_1132FD0(a2, a3))
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 24) != 0) == (*(unsigned char *)(a3 + 24) != 0);
  if (*(unsigned char *)(a2 + 24))
  {
    if (*(unsigned char *)(a3 + 24)) {
      return *(void *)(a2 + 16) == *(void *)(a3 + 16);
    }
  }
  return result;
}

unsigned __int8 *sub_1123148@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a2 == 1)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = 1;
LABEL_5:
    *(void *)a3 = v3;
    *(void *)(a3 + 8) = v4;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    return a1;
  }
  if (a2 == 2)
  {
    uint64_t v3 = *(unsigned __int16 *)a1;
    uint64_t v4 = 2;
    goto LABEL_5;
  }
  return sub_76DEC(a1, a2, a3);
}

_OWORD *sub_1123180(_OWORD *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x1F) {
    uint64_t v5 = 31;
  }
  else {
    uint64_t v5 = v4;
  }
  if (v5)
  {
    sub_1123148((unsigned __int8 *)__s, v5, (uint64_t)a1);
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return a1;
}

unint64_t *sub_11231DC(unint64_t *result, unsigned __int8 *a2, unint64_t a3)
{
  if (!v4 & v3)
  {
    if (a3 == 5)
    {
      unint64_t v6 = *a2 | ((unint64_t)*(unsigned int *)(a2 + 1) << 8);
    }
    else
    {
      if (a3 == 6) {
        unint64_t v5 = (unint64_t)*(unsigned int *)(a2 + 2) << 16;
      }
      else {
        unint64_t v5 = ((unint64_t)a2[2] << 16) | ((unint64_t)*(unsigned int *)(a2 + 3) << 24);
      }
      unint64_t v6 = *a2 | ((unint64_t)a2[1] << 8) | v5;
    }
  }
  else
  {
    unint64_t v6 = a3;
    switch(a3)
    {
      case 0uLL:
        break;
      case 1uLL:
        unint64_t v6 = *a2;
        break;
      case 2uLL:
        unint64_t v6 = *(unsigned __int16 *)a2;
        break;
      case 3uLL:
        unint64_t v6 = *(unsigned __int16 *)a2 | ((unint64_t)a2[2] << 16);
        break;
      case 4uLL:
        unint64_t v6 = *(unsigned int *)a2;
        break;
      default:
        JUMPOUT(0);
    }
  }
  *BOOL result = v6 | (0x700000000000000 - (a3 << 56));
  return result;
}

unint64_t sub_11232A8(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  return sub_B128((uint64_t)&v4, a2, a3);
}

void sub_11232D0(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = *a1;
  char v4 = (uint64_t *)a1[1];
  uint64_t v6 = ((uint64_t)a2 - *a1) >> 4;
  unint64_t v9 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = v9;
  if ((unint64_t)v4 < v9)
  {
    if (a2 != v4) {
      operator new();
    }
    *a2 = *a3;
    operator new();
  }
  unint64_t v10 = (((uint64_t)v4 - v5) >> 4) + 1;
  if (!(v10 >> 60))
  {
    uint64_t v11 = v8 - v5;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    uint64_t v18 = v7;
    if (v12) {
      uint64_t v13 = (char *)sub_1121C00(v7, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    char v14 = v13;
    long long v15 = &v13[16 * v6];
    long long v16 = v15;
    char v17 = &v13[16 * v12];
    sub_1123524(&v14, a3);
  }
  sub_2E00();
}

void sub_112347C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v11 + 8) = v10;
  _Unwind_Resume(exception_object);
}

uint64_t sub_11234BC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  unint64_t v8 = (void *)v6;
  if (v7 < a3)
  {
    unint64_t v9 = (uint64_t *)v7;
    unint64_t v8 = *(void **)(a1 + 8);
    do
    {
      uint64_t v10 = *v9;
      uint64_t v11 = v9[1];
      v9[1] = 0;
      *unint64_t v8 = v10;
      v8[1] = v11;
      v8 += 2;
      v9 += 2;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_1123740((uint64_t)&v13, a2, v7, v6);
}

void sub_1123524(void *a1, uint64_t *a2)
{
  char v4 = (uint64_t *)a1[2];
  if (v4 == (uint64_t *)a1[3])
  {
    uint64_t v5 = (uint64_t *)a1[1];
    uint64_t v6 = (uint64_t)v5 - *a1;
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (uint64_t *)*a1) {
        unint64_t v13 = 1;
      }
      else {
        unint64_t v13 = ((uint64_t)v4 - *a1) >> 3;
      }
      uint64_t v14 = a1[4];
      uint64_t v28 = a1[4];
      long long v15 = (char *)sub_1121C00(v14, v13);
      char v17 = &v15[16 * (v13 >> 2)];
      uint64_t v18 = (void *)a1[1];
      uint64_t v19 = a1[2] - (void)v18;
      if (v19)
      {
        uint64_t v20 = &v17[v19];
        uint64_t v21 = &v15[16 * (v13 >> 2)];
        do
        {
          *(void *)uint64_t v21 = *v18;
          uint64_t v22 = v18[1];
          v18[1] = 0;
          *((void *)v21 + 1) = v22;
          v21 += 16;
          v18 += 2;
        }
        while (v21 != v20);
        int64x2_t v23 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        int64x2_t v23 = vdupq_n_s64((unint64_t)v18);
        uint64_t v20 = &v15[16 * (v13 >> 2)];
      }
      uint64_t v25 = (uint64_t *)*a1;
      *a1 = v15;
      a1[1] = v17;
      int64x2_t v26 = v23;
      uint64_t v24 = a1[3];
      a1[2] = v20;
      a1[3] = &v15[16 * v16];
      uint64_t v27 = v24;
      sub_1123A7C((uint64_t)&v25);
      char v4 = (uint64_t *)a1[2];
    }
    else
    {
      uint64_t v7 = v6 >> 4;
      BOOL v8 = v6 >> 4 < -1;
      uint64_t v9 = (v6 >> 4) + 2;
      if (v8) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = v7 + 1;
      }
      unint64_t v11 = v10 >> 1;
      sub_11237BC((uint64_t)&v25, v5, v4, &v5[-2 * (v10 >> 1)]);
      char v4 = v12;
      a1[1] -= 16 * v11;
      a1[2] = v12;
    }
  }
  *char v4 = *a2;
  operator new();
}

uint64_t sub_112368C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1 + 16;
  sub_112383C(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(void *)a1, *(void *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_11238D8(v7, a3, *(void **)(a1 + 8), (void *)a2[2]);
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = a2[2];
  a2[2] = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_1123740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v5 = a3;
    do
    {
      uint64_t v6 = *(void *)(v5 - 16);
      v5 -= 16;
      *(void *)(a4 - 16) = v6;
      a4 -= 16;
      uint64_t v7 = *(void *)(v5 + 8);
      *(void *)(v5 + 8) = 0;
      uint64_t v8 = *(void *)(a4 + 8);
      *(void *)(a4 + 8) = v7;
      if (v8) {
        operator delete();
      }
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t *sub_11237BC(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    uint64_t v7 = *v5;
    uint64_t v8 = v5[1];
    v5[1] = 0;
    uint64_t v9 = a4[1];
    *a4 = v7;
    a4[1] = v8;
    if (v9) {
      operator delete();
    }
    a4 += 2;
    v5 += 2;
  }
  while (v5 != a3);
  return v6;
}

uint64_t sub_112383C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 16);
    do
    {
      uint64_t v9 = *(void *)(a3 - 16);
      a3 -= 16;
      *uint64_t v8 = v9;
      uint64_t v10 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = 0;
      v8[1] = v10;
      *((void *)&v16 + 1) = v8;
      v8 -= 2;
      v7 -= 16;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_112395C((uint64_t)v13);
  return v11;
}

void *sub_11238D8(uint64_t a1, void *a2, void *a3, void *a4)
{
  char v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *char v4 = *a2;
      uint64_t v5 = a2[1];
      a2[1] = 0;
      v4[1] = v5;
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_11239EC((uint64_t)v7);
  return v4;
}

uint64_t sub_112395C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1123994(a1);
  }
  return a1;
}

uint64_t sub_1123994(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(result + 8) + 8);
  while (v1 != v2)
  {
    BOOL result = *(void *)(v1 + 8);
    *(void *)(v1 + 8) = 0;
    if (result) {
      operator delete();
    }
    v1 += 16;
  }
  return result;
}

uint64_t sub_11239EC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1123A24(a1);
  }
  return a1;
}

uint64_t sub_1123A24(uint64_t result)
{
  uint64_t v1 = **(void **)(result + 16);
  uint64_t v2 = **(void **)(result + 8);
  while (v1 != v2)
  {
    BOOL result = *(void *)(v1 - 8);
    *(void *)(v1 - 8) = 0;
    if (result) {
      operator delete();
    }
    v1 -= 16;
  }
  return result;
}

uint64_t sub_1123A7C(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1123AB4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v3 = result;
    do
    {
      *(void *)(v3 + 16) = v2 - 16;
      BOOL result = *(void *)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        operator delete();
      }
      uint64_t v2 = *(void *)(v3 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t sub_1123B18(unint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 8)) {
    uint64_t v3 = sub_113404C((void **)a2);
  }
  else {
    uint64_t v3 = 0;
  }
  return ((a1 << 6) + (a1 >> 2) + v3 - 0x61C8864680B583EDLL) ^ a1;
}

void sub_1123B78(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = *a1;
  char v4 = (uint64_t *)a1[1];
  uint64_t v6 = ((uint64_t)a2 - *a1) >> 4;
  unint64_t v9 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = v9;
  if ((unint64_t)v4 < v9)
  {
    if (a2 != v4) {
      operator new();
    }
    *a2 = *a3;
    operator new();
  }
  unint64_t v10 = (((uint64_t)v4 - v5) >> 4) + 1;
  if (!(v10 >> 60))
  {
    uint64_t v11 = v8 - v5;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    uint64_t v18 = v7;
    if (v12) {
      unint64_t v13 = (char *)sub_1121C00(v7, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    char v14 = v13;
    long long v15 = &v13[16 * v6];
    long long v16 = v15;
    char v17 = &v13[16 * v12];
    sub_1123DDC(&v14, a3);
  }
  sub_2E00();
}

void sub_1123D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v11 + 8) = v10;
  _Unwind_Resume(exception_object);
}

uint64_t sub_1123D74(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  unint64_t v8 = (void *)v6;
  if (v7 < a3)
  {
    unint64_t v9 = (uint64_t *)v7;
    unint64_t v8 = *(void **)(a1 + 8);
    do
    {
      uint64_t v10 = *v9;
      uint64_t v11 = v9[1];
      v9[1] = 0;
      *unint64_t v8 = v10;
      v8[1] = v11;
      v8 += 2;
      v9 += 2;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_1124000((uint64_t)&v13, a2, v7, v6);
}

void sub_1123DDC(void *a1, uint64_t *a2)
{
  char v4 = (uint64_t *)a1[2];
  if (v4 == (uint64_t *)a1[3])
  {
    uint64_t v5 = (uint64_t *)a1[1];
    uint64_t v6 = (uint64_t)v5 - *a1;
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (uint64_t *)*a1) {
        unint64_t v13 = 1;
      }
      else {
        unint64_t v13 = ((uint64_t)v4 - *a1) >> 3;
      }
      uint64_t v14 = a1[4];
      uint64_t v28 = a1[4];
      long long v15 = (char *)sub_1121C00(v14, v13);
      char v17 = &v15[16 * (v13 >> 2)];
      uint64_t v18 = (void *)a1[1];
      uint64_t v19 = a1[2] - (void)v18;
      if (v19)
      {
        uint64_t v20 = &v17[v19];
        uint64_t v21 = &v15[16 * (v13 >> 2)];
        do
        {
          *(void *)uint64_t v21 = *v18;
          uint64_t v22 = v18[1];
          v18[1] = 0;
          *((void *)v21 + 1) = v22;
          v21 += 16;
          v18 += 2;
        }
        while (v21 != v20);
        int64x2_t v23 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        int64x2_t v23 = vdupq_n_s64((unint64_t)v18);
        uint64_t v20 = &v15[16 * (v13 >> 2)];
      }
      uint64_t v25 = (uint64_t *)*a1;
      *a1 = v15;
      a1[1] = v17;
      int64x2_t v26 = v23;
      uint64_t v24 = a1[3];
      a1[2] = v20;
      a1[3] = &v15[16 * v16];
      uint64_t v27 = v24;
      sub_112433C((uint64_t)&v25);
      char v4 = (uint64_t *)a1[2];
    }
    else
    {
      uint64_t v7 = v6 >> 4;
      BOOL v8 = v6 >> 4 < -1;
      uint64_t v9 = (v6 >> 4) + 2;
      if (v8) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = v7 + 1;
      }
      unint64_t v11 = v10 >> 1;
      sub_112407C((uint64_t)&v25, v5, v4, &v5[-2 * (v10 >> 1)]);
      char v4 = v12;
      a1[1] -= 16 * v11;
      a1[2] = v12;
    }
  }
  *char v4 = *a2;
  operator new();
}

uint64_t sub_1123F4C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1 + 16;
  sub_11240FC(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(void *)a1, *(void *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_1124198(v7, a3, *(void **)(a1 + 8), (void *)a2[2]);
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = a2[2];
  a2[2] = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_1124000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v5 = a3;
    do
    {
      uint64_t v6 = *(void *)(v5 - 16);
      v5 -= 16;
      *(void *)(a4 - 16) = v6;
      a4 -= 16;
      uint64_t v7 = *(void *)(v5 + 8);
      *(void *)(v5 + 8) = 0;
      uint64_t v8 = *(void *)(a4 + 8);
      *(void *)(a4 + 8) = v7;
      if (v8) {
        operator delete();
      }
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t *sub_112407C(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    uint64_t v7 = *v5;
    uint64_t v8 = v5[1];
    v5[1] = 0;
    uint64_t v9 = a4[1];
    *a4 = v7;
    a4[1] = v8;
    if (v9) {
      operator delete();
    }
    a4 += 2;
    v5 += 2;
  }
  while (v5 != a3);
  return v6;
}

uint64_t sub_11240FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 16);
    do
    {
      uint64_t v9 = *(void *)(a3 - 16);
      a3 -= 16;
      *uint64_t v8 = v9;
      uint64_t v10 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = 0;
      v8[1] = v10;
      *((void *)&v16 + 1) = v8;
      v8 -= 2;
      v7 -= 16;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_112421C((uint64_t)v13);
  return v11;
}

void *sub_1124198(uint64_t a1, void *a2, void *a3, void *a4)
{
  char v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *char v4 = *a2;
      uint64_t v5 = a2[1];
      a2[1] = 0;
      v4[1] = v5;
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_11242AC((uint64_t)v7);
  return v4;
}

uint64_t sub_112421C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1124254(a1);
  }
  return a1;
}

uint64_t sub_1124254(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(result + 8) + 8);
  while (v1 != v2)
  {
    BOOL result = *(void *)(v1 + 8);
    *(void *)(v1 + 8) = 0;
    if (result) {
      operator delete();
    }
    v1 += 16;
  }
  return result;
}

uint64_t sub_11242AC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_11242E4(a1);
  }
  return a1;
}

uint64_t sub_11242E4(uint64_t result)
{
  uint64_t v1 = **(void **)(result + 16);
  uint64_t v2 = **(void **)(result + 8);
  while (v1 != v2)
  {
    BOOL result = *(void *)(v1 - 8);
    *(void *)(v1 - 8) = 0;
    if (result) {
      operator delete();
    }
    v1 -= 16;
  }
  return result;
}

uint64_t sub_112433C(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1124374(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v3 = result;
    do
    {
      *(void *)(v3 + 16) = v2 - 16;
      BOOL result = *(void *)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        operator delete();
      }
      uint64_t v2 = *(void *)(v3 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t sub_11243D8(uint64_t a1, unsigned char *a2)
{
  int v3 = *(_DWORD *)a2;
  uint64_t v4 = *(_DWORD *)a2 & 0xFFFFFF;
  uint64_t v12 = v4;
  uint64_t v5 = *(void *)(a1 + 8264);
  uint64_t v6 = *(unsigned int *)(a1 + 64 + 4 * (v3 & 0x7FF));
  uint64_t v7 = *(unsigned int *)(a1 + 64 + ((((unint64_t)(v3 & 0x7FF) << 32) + 0x100000000) >> 30));
  if (v6 == v7)
  {
LABEL_5:
    uint64_t v10 = v5 + 16 * v7;
    sub_1133CA4(a2);
    sub_11246C0((uint64_t *)(a1 + 8264), v10, &v12);
  }
  char v8 = (void *)(v5 + 16 * v6);
  uint64_t v9 = 16 * v7 - 16 * v6;
  while (*v8 != v4)
  {
    v8 += 2;
    v9 -= 16;
    if (!v9) {
      goto LABEL_5;
    }
  }
  return *(unsigned __int8 *)(v8[1] + 4);
}

uint64_t sub_11244CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v14 = v4;
  unint64_t v5 = ((unint64_t)(v3 & 0x7FF) << 32) + 0x100000000;
  uint64_t v6 = v3 & 0x7FF;
  uint64_t v7 = *(void *)(a1 + 16488);
  uint64_t v8 = *(unsigned int *)(a1 + 8288 + 4 * v6);
  uint64_t v9 = *(unsigned int *)(a1 + 8288 + (v5 >> 30));
  if (v8 == v9)
  {
LABEL_5:
    uint64_t v12 = v7 + 16 * v9;
    sub_1133D0C(a2);
    sub_1124F58((uint64_t *)(a1 + 16488), v12, &v14);
  }
  uint64_t v10 = (void *)(v7 + 16 * v8);
  uint64_t v11 = 16 * v9 - 16 * v8;
  while (*v10 != v4)
  {
    v10 += 2;
    v11 -= 16;
    if (!v11) {
      goto LABEL_5;
    }
  }
  return *(unsigned __int8 *)(v10[1] + 8);
}

uint64_t sub_11245C4(uint64_t a1, int *a2)
{
  int v3 = *a2;
  uint64_t v4 = *a2 & 0xFFFFFF;
  uint64_t v12 = v4;
  uint64_t v5 = *(void *)(a1 + 24712);
  uint64_t v6 = *(unsigned int *)(a1 + 16512 + 4 * (v3 & 0x7FF));
  uint64_t v7 = *(unsigned int *)(a1 + 16512 + ((((unint64_t)(v3 & 0x7FF) << 32) + 0x100000000) >> 30));
  if (v6 == v7)
  {
LABEL_5:
    uint64_t v10 = v5 + 16 * v7;
    sub_1133D84(a2);
    sub_11257F0((uint64_t *)(a1 + 24712), v10, &v12);
  }
  uint64_t v8 = (void *)(v5 + 16 * v6);
  uint64_t v9 = 16 * v7 - 16 * v6;
  while (*v8 != v4)
  {
    v8 += 2;
    v9 -= 16;
    if (!v9) {
      goto LABEL_5;
    }
  }
  return *(unsigned __int8 *)(v8[1] + 4);
}

void sub_11246C0(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (a2 - *a1) >> 4;
  unint64_t v10 = a1[2];
  uint64_t v8 = (uint64_t)(a1 + 2);
  unint64_t v9 = v10;
  if (v5 < v10)
  {
    if (a2 != v5) {
      operator new();
    }
    sub_1124880((uint64_t)a1, a3);
  }
  unint64_t v11 = ((uint64_t)(v5 - v6) >> 4) + 1;
  if (!(v11 >> 60))
  {
    uint64_t v12 = v9 - v6;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    uint64_t v19 = v8;
    if (v13) {
      uint64_t v14 = (char *)sub_1121C00(v8, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    long long v15 = v14;
    long long v16 = &v14[16 * v7];
    char v17 = v16;
    uint64_t v18 = &v14[16 * v13];
    sub_1124960(&v15, a3);
  }
  sub_2E00();
}

void sub_112484C()
{
}

void sub_1124880(uint64_t a1, void *a2)
{
  **(void **)(a1 + 8) = *a2;
  operator new();
}

void sub_11248F0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_11248F8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = (void *)v6;
  if (v7 < a3)
  {
    unint64_t v9 = (uint64_t *)v7;
    uint64_t v8 = *(void **)(a1 + 8);
    do
    {
      uint64_t v10 = *v9;
      uint64_t v11 = v9[1];
      v9[1] = 0;
      *uint64_t v8 = v10;
      v8[1] = v11;
      v8 += 2;
      v9 += 2;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_1124B80((uint64_t)&v13, a2, v7, v6);
}

void sub_1124960(void *a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t *)a1[2];
  if (v4 == (uint64_t *)a1[3])
  {
    unint64_t v5 = (uint64_t *)a1[1];
    uint64_t v6 = (uint64_t)v5 - *a1;
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (uint64_t *)*a1) {
        unint64_t v13 = 1;
      }
      else {
        unint64_t v13 = ((uint64_t)v4 - *a1) >> 3;
      }
      uint64_t v14 = a1[4];
      uint64_t v28 = a1[4];
      long long v15 = (char *)sub_1121C00(v14, v13);
      char v17 = &v15[16 * (v13 >> 2)];
      uint64_t v18 = (void *)a1[1];
      uint64_t v19 = a1[2] - (void)v18;
      if (v19)
      {
        uint64_t v20 = &v17[v19];
        uint64_t v21 = &v15[16 * (v13 >> 2)];
        do
        {
          *(void *)uint64_t v21 = *v18;
          uint64_t v22 = v18[1];
          v18[1] = 0;
          *((void *)v21 + 1) = v22;
          v21 += 16;
          v18 += 2;
        }
        while (v21 != v20);
        int64x2_t v23 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        int64x2_t v23 = vdupq_n_s64((unint64_t)v18);
        uint64_t v20 = &v15[16 * (v13 >> 2)];
      }
      uint64_t v25 = (uint64_t *)*a1;
      *a1 = v15;
      a1[1] = v17;
      int64x2_t v26 = v23;
      uint64_t v24 = a1[3];
      a1[2] = v20;
      a1[3] = &v15[16 * v16];
      uint64_t v27 = v24;
      sub_1124EBC((uint64_t)&v25);
      uint64_t v4 = (uint64_t *)a1[2];
    }
    else
    {
      uint64_t v7 = v6 >> 4;
      BOOL v8 = v6 >> 4 < -1;
      uint64_t v9 = (v6 >> 4) + 2;
      if (v8) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = v7 + 1;
      }
      unint64_t v11 = v10 >> 1;
      sub_1124BFC((uint64_t)&v25, v5, v4, &v5[-2 * (v10 >> 1)]);
      uint64_t v4 = v12;
      a1[1] -= 16 * v11;
      a1[2] = v12;
    }
  }
  *uint64_t v4 = *a2;
  operator new();
}

uint64_t sub_1124ACC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1 + 16;
  sub_1124C7C(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(void *)a1, *(void *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_1124D18(v7, a3, *(void **)(a1 + 8), (void *)a2[2]);
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = a2[2];
  a2[2] = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_1124B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v5 = a3;
    do
    {
      uint64_t v6 = *(void *)(v5 - 16);
      v5 -= 16;
      *(void *)(a4 - 16) = v6;
      a4 -= 16;
      uint64_t v7 = *(void *)(v5 + 8);
      *(void *)(v5 + 8) = 0;
      uint64_t v8 = *(void *)(a4 + 8);
      *(void *)(a4 + 8) = v7;
      if (v8) {
        operator delete();
      }
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t *sub_1124BFC(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    uint64_t v7 = *v5;
    uint64_t v8 = v5[1];
    v5[1] = 0;
    uint64_t v9 = a4[1];
    *a4 = v7;
    a4[1] = v8;
    if (v9) {
      operator delete();
    }
    a4 += 2;
    v5 += 2;
  }
  while (v5 != a3);
  return v6;
}

uint64_t sub_1124C7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 16);
    do
    {
      uint64_t v9 = *(void *)(a3 - 16);
      a3 -= 16;
      *uint64_t v8 = v9;
      uint64_t v10 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = 0;
      v8[1] = v10;
      *((void *)&v16 + 1) = v8;
      v8 -= 2;
      v7 -= 16;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1124D9C((uint64_t)v13);
  return v11;
}

void *sub_1124D18(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      a2[1] = 0;
      v4[1] = v5;
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_1124E2C((uint64_t)v7);
  return v4;
}

uint64_t sub_1124D9C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1124DD4(a1);
  }
  return a1;
}

uint64_t sub_1124DD4(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(result + 8) + 8);
  while (v1 != v2)
  {
    BOOL result = *(void *)(v1 + 8);
    *(void *)(v1 + 8) = 0;
    if (result) {
      operator delete();
    }
    v1 += 16;
  }
  return result;
}

uint64_t sub_1124E2C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1124E64(a1);
  }
  return a1;
}

uint64_t sub_1124E64(uint64_t result)
{
  uint64_t v1 = **(void **)(result + 16);
  uint64_t v2 = **(void **)(result + 8);
  while (v1 != v2)
  {
    BOOL result = *(void *)(v1 - 8);
    *(void *)(v1 - 8) = 0;
    if (result) {
      operator delete();
    }
    v1 -= 16;
  }
  return result;
}

uint64_t sub_1124EBC(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1124EF4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v3 = result;
    do
    {
      *(void *)(v3 + 16) = v2 - 16;
      BOOL result = *(void *)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        operator delete();
      }
      uint64_t v2 = *(void *)(v3 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void sub_1124F58(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (a2 - *a1) >> 4;
  unint64_t v10 = a1[2];
  uint64_t v8 = (uint64_t)(a1 + 2);
  unint64_t v9 = v10;
  if (v5 < v10)
  {
    if (a2 != v5) {
      operator new();
    }
    sub_1125118((uint64_t)a1, a3);
  }
  unint64_t v11 = ((uint64_t)(v5 - v6) >> 4) + 1;
  if (!(v11 >> 60))
  {
    uint64_t v12 = v9 - v6;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    uint64_t v19 = v8;
    if (v13) {
      char v14 = (char *)sub_1121C00(v8, v13);
    }
    else {
      char v14 = 0;
    }
    long long v15 = v14;
    long long v16 = &v14[16 * v7];
    char v17 = v16;
    uint64_t v18 = &v14[16 * v13];
    sub_11251F8(&v15, a3);
  }
  sub_2E00();
}

void sub_11250E4()
{
}

void sub_1125118(uint64_t a1, void *a2)
{
  **(void **)(a1 + 8) = *a2;
  operator new();
}

void sub_1125188(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1125190(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = (void *)v6;
  if (v7 < a3)
  {
    unint64_t v9 = (uint64_t *)v7;
    uint64_t v8 = *(void **)(a1 + 8);
    do
    {
      uint64_t v10 = *v9;
      uint64_t v11 = v9[1];
      v9[1] = 0;
      *uint64_t v8 = v10;
      v8[1] = v11;
      v8 += 2;
      v9 += 2;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_1125418((uint64_t)&v13, a2, v7, v6);
}

void sub_11251F8(void *a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t *)a1[2];
  if (v4 == (uint64_t *)a1[3])
  {
    unint64_t v5 = (uint64_t *)a1[1];
    uint64_t v6 = (uint64_t)v5 - *a1;
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (uint64_t *)*a1) {
        unint64_t v13 = 1;
      }
      else {
        unint64_t v13 = ((uint64_t)v4 - *a1) >> 3;
      }
      uint64_t v14 = a1[4];
      uint64_t v28 = a1[4];
      long long v15 = (char *)sub_1121C00(v14, v13);
      char v17 = &v15[16 * (v13 >> 2)];
      uint64_t v18 = (void *)a1[1];
      uint64_t v19 = a1[2] - (void)v18;
      if (v19)
      {
        uint64_t v20 = &v17[v19];
        uint64_t v21 = &v15[16 * (v13 >> 2)];
        do
        {
          *(void *)uint64_t v21 = *v18;
          uint64_t v22 = v18[1];
          v18[1] = 0;
          *((void *)v21 + 1) = v22;
          v21 += 16;
          v18 += 2;
        }
        while (v21 != v20);
        int64x2_t v23 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        int64x2_t v23 = vdupq_n_s64((unint64_t)v18);
        uint64_t v20 = &v15[16 * (v13 >> 2)];
      }
      uint64_t v25 = (uint64_t *)*a1;
      *a1 = v15;
      a1[1] = v17;
      int64x2_t v26 = v23;
      uint64_t v24 = a1[3];
      a1[2] = v20;
      a1[3] = &v15[16 * v16];
      uint64_t v27 = v24;
      sub_1125754((uint64_t)&v25);
      uint64_t v4 = (uint64_t *)a1[2];
    }
    else
    {
      uint64_t v7 = v6 >> 4;
      BOOL v8 = v6 >> 4 < -1;
      uint64_t v9 = (v6 >> 4) + 2;
      if (v8) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = v7 + 1;
      }
      unint64_t v11 = v10 >> 1;
      sub_1125494((uint64_t)&v25, v5, v4, &v5[-2 * (v10 >> 1)]);
      uint64_t v4 = v12;
      a1[1] -= 16 * v11;
      a1[2] = v12;
    }
  }
  *uint64_t v4 = *a2;
  operator new();
}

uint64_t sub_1125364(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1 + 16;
  sub_1125514(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(void *)a1, *(void *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_11255B0(v7, a3, *(void **)(a1 + 8), (void *)a2[2]);
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = a2[2];
  a2[2] = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_1125418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v5 = a3;
    do
    {
      uint64_t v6 = *(void *)(v5 - 16);
      v5 -= 16;
      *(void *)(a4 - 16) = v6;
      a4 -= 16;
      uint64_t v7 = *(void *)(v5 + 8);
      *(void *)(v5 + 8) = 0;
      uint64_t v8 = *(void *)(a4 + 8);
      *(void *)(a4 + 8) = v7;
      if (v8) {
        operator delete();
      }
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t *sub_1125494(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    uint64_t v7 = *v5;
    uint64_t v8 = v5[1];
    v5[1] = 0;
    uint64_t v9 = a4[1];
    *a4 = v7;
    a4[1] = v8;
    if (v9) {
      operator delete();
    }
    a4 += 2;
    v5 += 2;
  }
  while (v5 != a3);
  return v6;
}

uint64_t sub_1125514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 16);
    do
    {
      uint64_t v9 = *(void *)(a3 - 16);
      a3 -= 16;
      *uint64_t v8 = v9;
      uint64_t v10 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = 0;
      v8[1] = v10;
      *((void *)&v16 + 1) = v8;
      v8 -= 2;
      v7 -= 16;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1125634((uint64_t)v13);
  return v11;
}

void *sub_11255B0(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      a2[1] = 0;
      v4[1] = v5;
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_11256C4((uint64_t)v7);
  return v4;
}

uint64_t sub_1125634(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_112566C(a1);
  }
  return a1;
}

uint64_t sub_112566C(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(result + 8) + 8);
  while (v1 != v2)
  {
    BOOL result = *(void *)(v1 + 8);
    *(void *)(v1 + 8) = 0;
    if (result) {
      operator delete();
    }
    v1 += 16;
  }
  return result;
}

uint64_t sub_11256C4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_11256FC(a1);
  }
  return a1;
}

uint64_t sub_11256FC(uint64_t result)
{
  uint64_t v1 = **(void **)(result + 16);
  uint64_t v2 = **(void **)(result + 8);
  while (v1 != v2)
  {
    BOOL result = *(void *)(v1 - 8);
    *(void *)(v1 - 8) = 0;
    if (result) {
      operator delete();
    }
    v1 -= 16;
  }
  return result;
}

uint64_t sub_1125754(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_112578C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v3 = result;
    do
    {
      *(void *)(v3 + 16) = v2 - 16;
      BOOL result = *(void *)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        operator delete();
      }
      uint64_t v2 = *(void *)(v3 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void sub_11257F0(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (a2 - *a1) >> 4;
  unint64_t v10 = a1[2];
  uint64_t v8 = (uint64_t)(a1 + 2);
  unint64_t v9 = v10;
  if (v5 < v10)
  {
    if (a2 != v5) {
      operator new();
    }
    sub_11259B0((uint64_t)a1, a3);
  }
  unint64_t v11 = ((uint64_t)(v5 - v6) >> 4) + 1;
  if (!(v11 >> 60))
  {
    uint64_t v12 = v9 - v6;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    uint64_t v19 = v8;
    if (v13) {
      char v14 = (char *)sub_1121C00(v8, v13);
    }
    else {
      char v14 = 0;
    }
    long long v15 = v14;
    long long v16 = &v14[16 * v7];
    char v17 = v16;
    uint64_t v18 = &v14[16 * v13];
    sub_1124960(&v15, a3);
  }
  sub_2E00();
}

void sub_112597C()
{
}

void sub_11259B0(uint64_t a1, void *a2)
{
  **(void **)(a1 + 8) = *a2;
  operator new();
}

void sub_1125A20(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1125A28(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1 + 16;
  sub_1125ADC(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(void *)a1, *(void *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_1125B78(v7, a3, *(void **)(a1 + 8), (void *)a2[2]);
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = a2[2];
  a2[2] = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_1125ADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 16);
    do
    {
      uint64_t v9 = *(void *)(a3 - 16);
      a3 -= 16;
      *uint64_t v8 = v9;
      uint64_t v10 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = 0;
      v8[1] = v10;
      *((void *)&v16 + 1) = v8;
      v8 -= 2;
      v7 -= 16;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1125BFC((uint64_t)v13);
  return v11;
}

void *sub_1125B78(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      a2[1] = 0;
      v4[1] = v5;
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_1125C34((uint64_t)v7);
  return v4;
}

uint64_t sub_1125BFC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1124DD4(a1);
  }
  return a1;
}

uint64_t sub_1125C34(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1124E64(a1);
  }
  return a1;
}

uint64_t sub_1125C6C(uint64_t a1)
{
  *(void *)a1 = 850045863;
  *(void *)(a1 + 8264) = 0;
  *(_OWORD *)(a1 + 8272) = 0u;
  bzero((void *)(a1 + 8), 0x203CuLL);
  sub_11264F4(a1 + 8264, 0);
  *(void *)(a1 + 16504) = 0;
  *(_OWORD *)(a1 + 16488) = 0u;
  bzero((void *)(a1 + 8288), 0x2004uLL);
  sub_11264F4(a1 + 16488, 0);
  *(void *)(a1 + 24728) = 0;
  *(_OWORD *)(a1 + 24712) = 0u;
  bzero((void *)(a1 + 16512), 0x2004uLL);
  sub_11264F4(a1 + 24712, 0);
  *(void *)(a1 + 32952) = 0;
  *(_OWORD *)(a1 + 32936) = 0u;
  bzero((void *)(a1 + 24736), 0x2004uLL);
  sub_11265B0(a1 + 32936, 0);
  *(void *)(a1 + 44184) = 0;
  *(_OWORD *)(a1 + 44168) = 0u;
  bzero((void *)(a1 + 32960), 0x2BC4uLL);
  sub_11264F4(a1 + 44168, 0);
  *(void *)(a1 + 52408) = 0;
  *(_OWORD *)(a1 + 52392) = 0u;
  bzero((void *)(a1 + 44192), 0x2004uLL);
  sub_11264F4(a1 + 52392, 0);
  std::mutex::lock((std::mutex *)a1);
  bzero((void *)(a1 + 32960), 0xBC0uLL);
  std::mutex::unlock((std::mutex *)a1);
  return a1;
}

void sub_1125DF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_11264A0((void ***)va);
  sub_11264A0((void ***)va);
  sub_112655C((void ***)va);
  sub_11264A0((void ***)va);
  sub_11264A0((void ***)va);
  sub_11264A0((void ***)va);
  std::mutex::~mutex(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1125E58(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = a1 + 64;
  uint64_t v5 = sub_1125EE4(a1 + 64, a2);
  if (*(void *)(a1 + 8272) != v5) {
    return *(void *)(v5 + 8) + 48;
  }
  char v8 = sub_1125F80();
  uint64_t v6 = (void *)sub_1125FF8(v4, a2);
  uint64_t v9 = sub_112F47C((uint64_t)v8, (uint64_t)a2);
  *uint64_t v6 = v9;
  v6[1] = sub_112FA7C((uint64_t)v8, v9);
  return (uint64_t)v6;
}

uint64_t sub_1125EE4(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(unsigned int *)(a1 + 4 * (*(void *)a2 & 0x7FFLL));
  uint64_t v5 = *(unsigned int *)(a1 + ((((*(void *)a2 & 0x7FFuLL) << 32) + 0x100000000) >> 30));
  if (v4 == v5) {
    return *(void *)(a1 + 8208);
  }
  uint64_t v7 = *(void *)(a1 + 8200) + 16 * v4;
  uint64_t v8 = 16 * v5 - 16 * v4;
  while (*(void *)v7 != v3 || !sub_1126618(*(void **)(v7 + 8), a2))
  {
    v7 += 16;
    v8 -= 16;
    if (!v8) {
      return *(void *)(a1 + 8208);
    }
  }
  return v7;
}

void *sub_1125F80()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F8218, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F8218))
  {
    nullsub_1(&unk_24F8210);
    __cxa_guard_release(&qword_24F8218);
  }
  return &unk_24F8210;
}

void sub_1125FE0(_Unwind_Exception *a1)
{
}

uint64_t sub_1125FF8(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v11 = v4;
  uint64_t v5 = *(void *)(a1 + 8200);
  uint64_t v6 = *(unsigned int *)(a1 + 4 * (v4 & 0x7FF));
  uint64_t v7 = *(unsigned int *)(a1 + ((((unint64_t)(v4 & 0x7FF) << 32) + 0x100000000) >> 30));
  if (v6 == v7) {
LABEL_6:
  }
    sub_11266A8((uint64_t *)(a1 + 8200), (uint64_t *)(v5 + 16 * v7), &v11);
  uint64_t v8 = v5 + 16 * v6;
  uint64_t v9 = 16 * v7 - 16 * v6;
  while (*(void *)v8 != v4 || !sub_1126618(*(void **)(v8 + 8), a2))
  {
    v8 += 16;
    v9 -= 16;
    if (!v9) {
      goto LABEL_6;
    }
  }
  return *(void *)(v8 + 8) + 48;
}

uint64_t sub_11260E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 16512;
  uint64_t v5 = sub_1125EE4(a1 + 16512, (unsigned __int8 *)a2);
  if (*(void *)(a1 + 24720) != v5) {
    return *(void *)(v5 + 8) + 48;
  }
  if (sub_1129928(a2))
  {
    unint64_t v8 = *(void *)(a2 + 8);
    if (v8 - 3 >= 0x1F) {
      uint64_t v9 = 31;
    }
    else {
      uint64_t v9 = v8 - 3;
    }
    if (v9)
    {
      if (v8 >= 8) {
        uint64_t v10 = (unsigned __int8 *)(a2 + 16);
      }
      else {
        uint64_t v10 = (unsigned __int8 *)a2;
      }
      sub_1123148(v10, v9, (uint64_t)&v12);
    }
    else
    {
      long long v13 = 0u;
      long long v14 = 0u;
      long long v12 = 0u;
    }
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 16);
    long long v12 = *(_OWORD *)a2;
    long long v13 = v11;
    long long v14 = *(_OWORD *)(a2 + 32);
  }
  uint64_t v6 = (_OWORD *)sub_1125FF8(v4, (unsigned __int8 *)a2);
  *uint64_t v6 = *(_OWORD *)sub_1125E58(a1, (unsigned __int8 *)&v12);
  return (uint64_t)v6;
}

uint64_t *sub_11261F0(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = a1 + 32960;
  uint64_t v3 = (uint64_t *)(a1 + 32960 + 16 * a2);
  if (!*v3)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F8218, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_24F8218))
    {
      nullsub_1(&unk_24F8210);
      __cxa_guard_release(&qword_24F8218);
    }
    uint64_t v5 = sub_112F67C((uint64_t)&unk_24F8210, a2);
    *uint64_t v3 = v5;
    *(void *)(v2 + 16 * a2 + 8) = sub_112FA7C((uint64_t)&unk_24F8210, v5);
  }
  return v3;
}

void sub_11262A4(_Unwind_Exception *a1)
{
}

uint64_t *sub_11262BC(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = a1 + 35152;
  uint64_t v3 = (uint64_t *)(a1 + 35152 + 16 * a2);
  if (!*v3)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F8218, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_24F8218))
    {
      nullsub_1(&unk_24F8210);
      __cxa_guard_release(&qword_24F8218);
    }
    uint64_t v5 = sub_112F77C((uint64_t)&unk_24F8210, a2);
    *uint64_t v3 = v5;
    *(void *)(v2 + 16 * a2 + 8) = sub_112FA7C((uint64_t)&unk_24F8210, v5);
  }
  return v3;
}

void sub_1126370(_Unwind_Exception *a1)
{
}

uint64_t sub_1126388(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = a1 + 35968;
  uint64_t v4 = sub_1125EE4(a1 + 35968, a2);
  if (*(void *)(v3 + 8208) != v4) {
    return *(void *)(v4 + 8) + 48;
  }
  uint64_t v7 = sub_1125F80();
  uint64_t v5 = (void *)sub_1125FF8(v3, a2);
  uint64_t v8 = sub_112F87C((uint64_t)v7, (uint64_t)a2);
  *uint64_t v5 = v8;
  v5[1] = sub_112FA7C((uint64_t)v7, v8);
  return (uint64_t)v5;
}

uint64_t sub_1126414(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = a1 + 44192;
  uint64_t v4 = sub_1125EE4(a1 + 44192, a2);
  if (*(void *)(v3 + 8208) != v4) {
    return *(void *)(v4 + 8) + 48;
  }
  uint64_t v7 = sub_1125F80();
  uint64_t v5 = (void *)sub_1125FF8(v3, a2);
  uint64_t v8 = sub_112F97C((uint64_t)v7, (uint64_t)a2);
  *uint64_t v5 = v8;
  v5[1] = sub_112FA7C((uint64_t)v7, v8);
  return (uint64_t)v5;
}

void sub_11264A0(void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_11264F4((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_11264F4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  for (uint64_t i = *(void *)(result + 8); i != a2; i -= 16)
  {
    BOOL result = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (result) {
      operator delete();
    }
  }
  *(void *)(v2 + 8) = a2;
  return result;
}

void sub_112655C(void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_11265B0((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_11265B0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  for (uint64_t i = *(void *)(result + 8); i != a2; i -= 16)
  {
    BOOL result = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (result) {
      operator delete();
    }
  }
  *(void *)(v2 + 8) = a2;
  return result;
}

BOOL sub_1126618(void *a1, unsigned __int8 *a2)
{
  if (*a1 != *(void *)a2) {
    return 0;
  }
  unint64_t v2 = a1[1];
  unint64_t v3 = *((void *)a2 + 1);
  if (v2 <= 7 && v3 < 8) {
    return 1;
  }
  if (v2 != v3) {
    return 0;
  }
  uint64_t v5 = a1 + 2;
  uint64_t v6 = 2 * (v2 > 7);
  BOOL v7 = v2 >= 8;
  if (v2 < 8) {
    uint64_t v5 = a1;
  }
  uint64_t v8 = a2 + 16;
  if (!v7) {
    uint64_t v8 = a2;
  }
  int v9 = LOBYTE(a1[v6]);
  if (v9)
  {
    uint64_t v10 = (unsigned __int8 *)v5 + 1;
    do
    {
      if (v9 != *v8) {
        break;
      }
      ++v8;
      int v11 = *v10++;
      int v9 = v11;
    }
    while (v11);
  }
  return v9 == *v8;
}

void sub_11266A8(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = *a1;
  uint64_t v4 = (uint64_t *)a1[1];
  uint64_t v6 = ((uint64_t)a2 - *a1) >> 4;
  unint64_t v9 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = v9;
  if ((unint64_t)v4 < v9)
  {
    if (a2 != v4) {
      operator new();
    }
    *a2 = *a3;
    operator new();
  }
  unint64_t v10 = (((uint64_t)v4 - v5) >> 4) + 1;
  if (!(v10 >> 60))
  {
    uint64_t v11 = v8 - v5;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    uint64_t v18 = v7;
    if (v12) {
      long long v13 = (char *)sub_1121C00(v7, v12);
    }
    else {
      long long v13 = 0;
    }
    long long v14 = v13;
    long long v15 = &v13[16 * v6];
    long long v16 = v15;
    char v17 = &v13[16 * v12];
    sub_1126904(&v14, a3);
  }
  sub_2E00();
}

void sub_112685C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v11 + 8) = v10;
  _Unwind_Resume(exception_object);
}

uint64_t sub_112689C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  unint64_t v8 = (void *)v6;
  if (v7 < a3)
  {
    unint64_t v9 = (uint64_t *)v7;
    unint64_t v8 = *(void **)(a1 + 8);
    do
    {
      uint64_t v10 = *v9;
      uint64_t v11 = v9[1];
      v9[1] = 0;
      *unint64_t v8 = v10;
      v8[1] = v11;
      v8 += 2;
      v9 += 2;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_1126B24((uint64_t)&v13, a2, v7, v6);
}

void sub_1126904(void *a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t *)a1[2];
  if (v4 == (uint64_t *)a1[3])
  {
    uint64_t v5 = (uint64_t *)a1[1];
    uint64_t v6 = (uint64_t)v5 - *a1;
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (uint64_t *)*a1) {
        unint64_t v13 = 1;
      }
      else {
        unint64_t v13 = ((uint64_t)v4 - *a1) >> 3;
      }
      uint64_t v14 = a1[4];
      uint64_t v28 = a1[4];
      long long v15 = (char *)sub_1121C00(v14, v13);
      char v17 = &v15[16 * (v13 >> 2)];
      uint64_t v18 = (void *)a1[1];
      uint64_t v19 = a1[2] - (void)v18;
      if (v19)
      {
        uint64_t v20 = &v17[v19];
        uint64_t v21 = &v15[16 * (v13 >> 2)];
        do
        {
          *(void *)uint64_t v21 = *v18;
          uint64_t v22 = v18[1];
          v18[1] = 0;
          *((void *)v21 + 1) = v22;
          v21 += 16;
          v18 += 2;
        }
        while (v21 != v20);
        int64x2_t v23 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        int64x2_t v23 = vdupq_n_s64((unint64_t)v18);
        uint64_t v20 = &v15[16 * (v13 >> 2)];
      }
      uint64_t v25 = (uint64_t *)*a1;
      *a1 = v15;
      a1[1] = v17;
      int64x2_t v26 = v23;
      uint64_t v24 = a1[3];
      a1[2] = v20;
      a1[3] = &v15[16 * v16];
      uint64_t v27 = v24;
      sub_1126E60((uint64_t)&v25);
      uint64_t v4 = (uint64_t *)a1[2];
    }
    else
    {
      uint64_t v7 = v6 >> 4;
      BOOL v8 = v6 >> 4 < -1;
      uint64_t v9 = (v6 >> 4) + 2;
      if (v8) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = v7 + 1;
      }
      unint64_t v11 = v10 >> 1;
      sub_1126BA0((uint64_t)&v25, v5, v4, &v5[-2 * (v10 >> 1)]);
      uint64_t v4 = v12;
      a1[1] -= 16 * v11;
      a1[2] = v12;
    }
  }
  *uint64_t v4 = *a2;
  operator new();
}

uint64_t sub_1126A70(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1 + 16;
  sub_1126C20(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(void *)a1, *(void *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_1126CBC(v7, a3, *(void **)(a1 + 8), (void *)a2[2]);
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = a2[2];
  a2[2] = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_1126B24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v5 = a3;
    do
    {
      uint64_t v6 = *(void *)(v5 - 16);
      v5 -= 16;
      *(void *)(a4 - 16) = v6;
      a4 -= 16;
      uint64_t v7 = *(void *)(v5 + 8);
      *(void *)(v5 + 8) = 0;
      uint64_t v8 = *(void *)(a4 + 8);
      *(void *)(a4 + 8) = v7;
      if (v8) {
        operator delete();
      }
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t *sub_1126BA0(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    uint64_t v7 = *v5;
    uint64_t v8 = v5[1];
    v5[1] = 0;
    uint64_t v9 = a4[1];
    *a4 = v7;
    a4[1] = v8;
    if (v9) {
      operator delete();
    }
    a4 += 2;
    v5 += 2;
  }
  while (v5 != a3);
  return v6;
}

uint64_t sub_1126C20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 16);
    do
    {
      uint64_t v9 = *(void *)(a3 - 16);
      a3 -= 16;
      *uint64_t v8 = v9;
      uint64_t v10 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = 0;
      v8[1] = v10;
      *((void *)&v16 + 1) = v8;
      v8 -= 2;
      v7 -= 16;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1126D40((uint64_t)v13);
  return v11;
}

void *sub_1126CBC(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      a2[1] = 0;
      v4[1] = v5;
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_1126DD0((uint64_t)v7);
  return v4;
}

uint64_t sub_1126D40(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1126D78(a1);
  }
  return a1;
}

uint64_t sub_1126D78(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(result + 8) + 8);
  while (v1 != v2)
  {
    BOOL result = *(void *)(v1 + 8);
    *(void *)(v1 + 8) = 0;
    if (result) {
      operator delete();
    }
    v1 += 16;
  }
  return result;
}

uint64_t sub_1126DD0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1126E08(a1);
  }
  return a1;
}

uint64_t sub_1126E08(uint64_t result)
{
  uint64_t v1 = **(void **)(result + 16);
  uint64_t v2 = **(void **)(result + 8);
  while (v1 != v2)
  {
    BOOL result = *(void *)(v1 - 8);
    *(void *)(v1 - 8) = 0;
    if (result) {
      operator delete();
    }
    v1 -= 16;
  }
  return result;
}

uint64_t sub_1126E60(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1126E98(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v3 = result;
    do
    {
      *(void *)(v3 + 16) = v2 - 16;
      BOOL result = *(void *)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        operator delete();
      }
      uint64_t v2 = *(void *)(v3 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t sub_1126EFC(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + 64;
  uint64_t v5 = sub_1126F70(a1 + 64, a2);
  if (*(void **)(a1 + 8272) != v5) {
    return v5[1] + 4;
  }
  uint64_t v6 = (_DWORD *)sub_1126FD0(v4, a2);
  *uint64_t v6 = sub_1120F28((uint64_t)a2, 0);
  return (uint64_t)v6;
}

void *sub_1126F70(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 4 * (*a2 & 0x7FFLL));
  uint64_t v3 = *(unsigned int *)(a1 + ((((*a2 & 0x7FFuLL) << 32) + 0x100000000) >> 30));
  if (v2 == v3) {
    return *(void **)(a1 + 8208);
  }
  uint64_t v4 = (void *)(*(void *)(a1 + 8200) + 16 * v2);
  uint64_t v5 = 16 * v3 - 16 * v2;
  while (*v4 != (*a2 & 0xFFFFFF))
  {
    v4 += 2;
    v5 -= 16;
    if (!v5) {
      return *(void **)(a1 + 8208);
    }
  }
  return v4;
}

uint64_t sub_1126FD0(uint64_t a1, int *a2)
{
  int v3 = *a2;
  uint64_t v4 = *a2 & 0xFFFFFF;
  uint64_t v11 = v4;
  uint64_t v5 = *(void *)(a1 + 8200);
  uint64_t v6 = *(unsigned int *)(a1 + 4 * (v3 & 0x7FF));
  uint64_t v7 = *(unsigned int *)(a1 + ((((unint64_t)(v3 & 0x7FF) << 32) + 0x100000000) >> 30));
  if (v6 == v7) {
LABEL_5:
  }
    sub_1127274((uint64_t *)(a1 + 8200), v5 + 16 * v7, &v11);
  char v8 = (void *)(v5 + 16 * v6);
  uint64_t v9 = 16 * v7 - 16 * v6;
  while (*v8 != v4)
  {
    v8 += 2;
    v9 -= 16;
    if (!v9) {
      goto LABEL_5;
    }
  }
  return v8[1] + 4;
}

char *sub_1127094(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + 8288;
  uint64_t v5 = sub_1126F70(a1 + 8288, a2);
  if (*(void **)(a1 + 16496) != v5) {
    return *(char **)(v5[1] + 8);
  }
  int v8 = sub_1120F28((uint64_t)a2, 0);
  if ((v8 & 0xFF000000) == 0x1000000) {
    unsigned __int8 v9 = v8;
  }
  else {
    unsigned __int8 v9 = 90;
  }
  uint64_t v10 = (uint64_t *)((char *)&unk_20FDBA8 + 8 * (v9 & 0x7F));
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  if (v12 == v11)
  {
LABEL_14:
    int v17 = 16800346;
    uint64_t v6 = (char *)sub_1127094(a1, &v17);
  }
  else
  {
    uint64_t v13 = 5 * v12;
    uint64_t v6 = (char *)&unk_248B5A0 + 8 * v13;
    if ((v8 & 0xFF000000) == 0x1000000) {
      unsigned int v14 = v8 & 0xFFFFFF00;
    }
    else {
      unsigned int v14 = 16800256;
    }
    int v15 = v14 | v9;
    uint64_t v16 = 40 * v11 - 8 * v13;
    while (*((_DWORD *)v6 + 1) != v15)
    {
      v6 += 40;
      v16 -= 40;
      if (!v16) {
        goto LABEL_14;
      }
    }
  }
  *(void *)sub_11271B0(v4, a2) = v6;
  return v6;
}

uint64_t sub_11271B0(uint64_t a1, int *a2)
{
  int v3 = *a2;
  uint64_t v4 = *a2 & 0xFFFFFF;
  uint64_t v11 = v4;
  uint64_t v5 = *(void *)(a1 + 8200);
  uint64_t v6 = *(unsigned int *)(a1 + 4 * (v3 & 0x7FF));
  uint64_t v7 = *(unsigned int *)(a1 + ((((unint64_t)(v3 & 0x7FF) << 32) + 0x100000000) >> 30));
  if (v6 == v7) {
LABEL_5:
  }
    sub_1127AEC((uint64_t *)(a1 + 8200), v5 + 16 * v7, &v11);
  int v8 = (void *)(v5 + 16 * v6);
  uint64_t v9 = 16 * v7 - 16 * v6;
  while (*v8 != v4)
  {
    v8 += 2;
    v9 -= 16;
    if (!v9) {
      goto LABEL_5;
    }
  }
  return v8[1] + 8;
}

void sub_1127274(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (a2 - *a1) >> 4;
  unint64_t v10 = a1[2];
  uint64_t v8 = (uint64_t)(a1 + 2);
  unint64_t v9 = v10;
  if (v5 < v10)
  {
    if (a2 != v5) {
      operator new();
    }
    sub_1127424((uint64_t)a1, a3);
  }
  unint64_t v11 = ((uint64_t)(v5 - v6) >> 4) + 1;
  if (!(v11 >> 60))
  {
    uint64_t v12 = v9 - v6;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    uint64_t v19 = v8;
    if (v13) {
      unsigned int v14 = (char *)sub_1121C00(v8, v13);
    }
    else {
      unsigned int v14 = 0;
    }
    int v15 = v14;
    uint64_t v16 = &v14[16 * v7];
    int v17 = v16;
    uint64_t v18 = &v14[16 * v13];
    sub_11274FC(&v15, a3);
  }
  sub_2E00();
}

void sub_11273F0()
{
}

void sub_1127424(uint64_t a1, void *a2)
{
  **(void **)(a1 + 8) = *a2;
  operator new();
}

void sub_112748C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1127494(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = (void *)v6;
  if (v7 < a3)
  {
    unint64_t v9 = (uint64_t *)v7;
    uint64_t v8 = *(void **)(a1 + 8);
    do
    {
      uint64_t v10 = *v9;
      uint64_t v11 = v9[1];
      v9[1] = 0;
      *uint64_t v8 = v10;
      v8[1] = v11;
      v8 += 2;
      v9 += 2;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_1127714((uint64_t)&v13, a2, v7, v6);
}

void sub_11274FC(void *a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t *)a1[2];
  if (v4 == (uint64_t *)a1[3])
  {
    unint64_t v5 = (uint64_t *)a1[1];
    uint64_t v6 = (uint64_t)v5 - *a1;
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (uint64_t *)*a1) {
        unint64_t v13 = 1;
      }
      else {
        unint64_t v13 = ((uint64_t)v4 - *a1) >> 3;
      }
      uint64_t v14 = a1[4];
      uint64_t v28 = a1[4];
      int v15 = (char *)sub_1121C00(v14, v13);
      int v17 = &v15[16 * (v13 >> 2)];
      uint64_t v18 = (void *)a1[1];
      uint64_t v19 = a1[2] - (void)v18;
      if (v19)
      {
        uint64_t v20 = &v17[v19];
        uint64_t v21 = &v15[16 * (v13 >> 2)];
        do
        {
          *(void *)uint64_t v21 = *v18;
          uint64_t v22 = v18[1];
          v18[1] = 0;
          *((void *)v21 + 1) = v22;
          v21 += 16;
          v18 += 2;
        }
        while (v21 != v20);
        int64x2_t v23 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        int64x2_t v23 = vdupq_n_s64((unint64_t)v18);
        uint64_t v20 = &v15[16 * (v13 >> 2)];
      }
      uint64_t v25 = (uint64_t *)*a1;
      *a1 = v15;
      a1[1] = v17;
      int64x2_t v26 = v23;
      uint64_t v24 = a1[3];
      a1[2] = v20;
      a1[3] = &v15[16 * v16];
      uint64_t v27 = v24;
      sub_1127A50((uint64_t)&v25);
      uint64_t v4 = (uint64_t *)a1[2];
    }
    else
    {
      uint64_t v7 = v6 >> 4;
      BOOL v8 = v6 >> 4 < -1;
      uint64_t v9 = (v6 >> 4) + 2;
      if (v8) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = v7 + 1;
      }
      unint64_t v11 = v10 >> 1;
      sub_1127790((uint64_t)&v25, v5, v4, &v5[-2 * (v10 >> 1)]);
      uint64_t v4 = v12;
      a1[1] -= 16 * v11;
      a1[2] = v12;
    }
  }
  *uint64_t v4 = *a2;
  operator new();
}

uint64_t sub_1127660(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1 + 16;
  sub_1127810(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(void *)a1, *(void *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_11278AC(v7, a3, *(void **)(a1 + 8), (void *)a2[2]);
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = a2[2];
  a2[2] = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_1127714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v5 = a3;
    do
    {
      uint64_t v6 = *(void *)(v5 - 16);
      v5 -= 16;
      *(void *)(a4 - 16) = v6;
      a4 -= 16;
      uint64_t v7 = *(void *)(v5 + 8);
      *(void *)(v5 + 8) = 0;
      uint64_t v8 = *(void *)(a4 + 8);
      *(void *)(a4 + 8) = v7;
      if (v8) {
        operator delete();
      }
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t *sub_1127790(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    uint64_t v7 = *v5;
    uint64_t v8 = v5[1];
    v5[1] = 0;
    uint64_t v9 = a4[1];
    *a4 = v7;
    a4[1] = v8;
    if (v9) {
      operator delete();
    }
    a4 += 2;
    v5 += 2;
  }
  while (v5 != a3);
  return v6;
}

uint64_t sub_1127810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 16);
    do
    {
      uint64_t v9 = *(void *)(a3 - 16);
      a3 -= 16;
      *uint64_t v8 = v9;
      uint64_t v10 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = 0;
      v8[1] = v10;
      *((void *)&v16 + 1) = v8;
      v8 -= 2;
      v7 -= 16;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1127930((uint64_t)v13);
  return v11;
}

void *sub_11278AC(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      a2[1] = 0;
      v4[1] = v5;
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_11279C0((uint64_t)v7);
  return v4;
}

uint64_t sub_1127930(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1127968(a1);
  }
  return a1;
}

uint64_t sub_1127968(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(result + 8) + 8);
  while (v1 != v2)
  {
    BOOL result = *(void *)(v1 + 8);
    *(void *)(v1 + 8) = 0;
    if (result) {
      operator delete();
    }
    v1 += 16;
  }
  return result;
}

uint64_t sub_11279C0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_11279F8(a1);
  }
  return a1;
}

uint64_t sub_11279F8(uint64_t result)
{
  uint64_t v1 = **(void **)(result + 16);
  uint64_t v2 = **(void **)(result + 8);
  while (v1 != v2)
  {
    BOOL result = *(void *)(v1 - 8);
    *(void *)(v1 - 8) = 0;
    if (result) {
      operator delete();
    }
    v1 -= 16;
  }
  return result;
}

uint64_t sub_1127A50(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1127A88(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v3 = result;
    do
    {
      *(void *)(v3 + 16) = v2 - 16;
      BOOL result = *(void *)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        operator delete();
      }
      uint64_t v2 = *(void *)(v3 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void sub_1127AEC(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (a2 - *a1) >> 4;
  unint64_t v10 = a1[2];
  uint64_t v8 = (uint64_t)(a1 + 2);
  unint64_t v9 = v10;
  if (v5 < v10)
  {
    if (a2 != v5) {
      operator new();
    }
    sub_1127C9C((uint64_t)a1, a3);
  }
  unint64_t v11 = ((uint64_t)(v5 - v6) >> 4) + 1;
  if (!(v11 >> 60))
  {
    uint64_t v12 = v9 - v6;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    uint64_t v19 = v8;
    if (v13) {
      char v14 = (char *)sub_1121C00(v8, v13);
    }
    else {
      char v14 = 0;
    }
    long long v15 = v14;
    long long v16 = &v14[16 * v7];
    int v17 = v16;
    uint64_t v18 = &v14[16 * v13];
    sub_1127D74(&v15, a3);
  }
  sub_2E00();
}

void sub_1127C68()
{
}

void sub_1127C9C(uint64_t a1, void *a2)
{
  **(void **)(a1 + 8) = *a2;
  operator new();
}

void sub_1127D04(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1127D0C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = (void *)v6;
  if (v7 < a3)
  {
    unint64_t v9 = (uint64_t *)v7;
    uint64_t v8 = *(void **)(a1 + 8);
    do
    {
      uint64_t v10 = *v9;
      uint64_t v11 = v9[1];
      v9[1] = 0;
      *uint64_t v8 = v10;
      v8[1] = v11;
      v8 += 2;
      v9 += 2;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_1127F8C((uint64_t)&v13, a2, v7, v6);
}

void sub_1127D74(void *a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t *)a1[2];
  if (v4 == (uint64_t *)a1[3])
  {
    unint64_t v5 = (uint64_t *)a1[1];
    uint64_t v6 = (uint64_t)v5 - *a1;
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (uint64_t *)*a1) {
        unint64_t v13 = 1;
      }
      else {
        unint64_t v13 = ((uint64_t)v4 - *a1) >> 3;
      }
      uint64_t v14 = a1[4];
      uint64_t v28 = a1[4];
      long long v15 = (char *)sub_1121C00(v14, v13);
      int v17 = &v15[16 * (v13 >> 2)];
      uint64_t v18 = (void *)a1[1];
      uint64_t v19 = a1[2] - (void)v18;
      if (v19)
      {
        uint64_t v20 = &v17[v19];
        uint64_t v21 = &v15[16 * (v13 >> 2)];
        do
        {
          *(void *)uint64_t v21 = *v18;
          uint64_t v22 = v18[1];
          v18[1] = 0;
          *((void *)v21 + 1) = v22;
          v21 += 16;
          v18 += 2;
        }
        while (v21 != v20);
        int64x2_t v23 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        int64x2_t v23 = vdupq_n_s64((unint64_t)v18);
        uint64_t v20 = &v15[16 * (v13 >> 2)];
      }
      uint64_t v25 = (uint64_t *)*a1;
      *a1 = v15;
      a1[1] = v17;
      int64x2_t v26 = v23;
      uint64_t v24 = a1[3];
      a1[2] = v20;
      a1[3] = &v15[16 * v16];
      uint64_t v27 = v24;
      sub_11282C8((uint64_t)&v25);
      uint64_t v4 = (uint64_t *)a1[2];
    }
    else
    {
      uint64_t v7 = v6 >> 4;
      BOOL v8 = v6 >> 4 < -1;
      uint64_t v9 = (v6 >> 4) + 2;
      if (v8) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = v7 + 1;
      }
      unint64_t v11 = v10 >> 1;
      sub_1128008((uint64_t)&v25, v5, v4, &v5[-2 * (v10 >> 1)]);
      uint64_t v4 = v12;
      a1[1] -= 16 * v11;
      a1[2] = v12;
    }
  }
  *uint64_t v4 = *a2;
  operator new();
}

uint64_t sub_1127ED8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1 + 16;
  sub_1128088(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(void *)a1, *(void *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_1128124(v7, a3, *(void **)(a1 + 8), (void *)a2[2]);
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = a2[2];
  a2[2] = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_1127F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v5 = a3;
    do
    {
      uint64_t v6 = *(void *)(v5 - 16);
      v5 -= 16;
      *(void *)(a4 - 16) = v6;
      a4 -= 16;
      uint64_t v7 = *(void *)(v5 + 8);
      *(void *)(v5 + 8) = 0;
      uint64_t v8 = *(void *)(a4 + 8);
      *(void *)(a4 + 8) = v7;
      if (v8) {
        operator delete();
      }
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t *sub_1128008(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    uint64_t v7 = *v5;
    uint64_t v8 = v5[1];
    v5[1] = 0;
    uint64_t v9 = a4[1];
    *a4 = v7;
    a4[1] = v8;
    if (v9) {
      operator delete();
    }
    a4 += 2;
    v5 += 2;
  }
  while (v5 != a3);
  return v6;
}

uint64_t sub_1128088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 16);
    do
    {
      uint64_t v9 = *(void *)(a3 - 16);
      a3 -= 16;
      *uint64_t v8 = v9;
      uint64_t v10 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = 0;
      v8[1] = v10;
      *((void *)&v16 + 1) = v8;
      v8 -= 2;
      v7 -= 16;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_11281A8((uint64_t)v13);
  return v11;
}

void *sub_1128124(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      a2[1] = 0;
      v4[1] = v5;
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_1128238((uint64_t)v7);
  return v4;
}

uint64_t sub_11281A8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_11281E0(a1);
  }
  return a1;
}

uint64_t sub_11281E0(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(result + 8) + 8);
  while (v1 != v2)
  {
    BOOL result = *(void *)(v1 + 8);
    *(void *)(v1 + 8) = 0;
    if (result) {
      operator delete();
    }
    v1 += 16;
  }
  return result;
}

uint64_t sub_1128238(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1128270(a1);
  }
  return a1;
}

uint64_t sub_1128270(uint64_t result)
{
  uint64_t v1 = **(void **)(result + 16);
  uint64_t v2 = **(void **)(result + 8);
  while (v1 != v2)
  {
    BOOL result = *(void *)(v1 - 8);
    *(void *)(v1 - 8) = 0;
    if (result) {
      operator delete();
    }
    v1 -= 16;
  }
  return result;
}

uint64_t sub_11282C8(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1128300(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v3 = result;
    do
    {
      *(void *)(v3 + 16) = v2 - 16;
      BOOL result = *(void *)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        operator delete();
      }
      uint64_t v2 = *(void *)(v3 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void *sub_1128364(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a1 + 64;
  uint64_t v5 = sub_1128570(a1 + 64, a2);
  if (*(void *)(a1 + 8272) != v5) {
    return *(void **)(*(void *)(v5 + 8) + 8);
  }
  uint64_t v19 = 0;
  unsigned int v7 = sub_11285E0((uint64_t)a2, &v19);
  unint64_t v18 = (v7 & 0xFFFFFF | ((unint64_t)(HIBYTE(v7) + 253) << 56)) + 0x700000000000000;
  if (*a2 == 0x700000000000000)
  {
    char v8 = &unk_212F520;
  }
  else if (v19 == a2 {
         || (((v7 & 0xFFFFFF | ((unint64_t)(HIBYTE(v7) + 253) << 56)) + 0x700000000000000) & 0xFF00000000000000) != 0x500000000000000)
  }
  {
    unsigned int v10 = 2;
    long long v11 = off_2491A10;
    uint64_t v12 = "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/maps-lang-cpp/src/lib/cache/impl/marketlo"
          "cationcacheimpl.cpp";
    unint64_t v13 = "getOrCreateMarketLocationFromString";
    int v14 = 36;
    sub_E1B4((uint64_t)&v15);
    sub_188FC78(v16, (uint64_t)"Couldn't parse the MarketLocation string due to invalid value. String=\"", 71);
    std::ostream::write();
    sub_188FC78(v16, (uint64_t)"\"", 1);
    sub_1121418(&v10);
    char v8 = &unk_212F530;
  }
  else
  {
    uint64_t v9 = sub_1128570(v4, (uint64_t *)&v18);
    if (*(void *)(a1 + 8272) == v9) {
      operator new();
    }
    char v8 = *(void **)(*(void *)(v9 + 8) + 8);
  }
  int v17 = v8;
  *(void *)sub_11287B8(v4, a2) = v8;
  return v17;
}

void sub_112855C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
}

uint64_t sub_1128570(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(unsigned int *)(a1 + 4 * (*a2 & 0x7FF));
  uint64_t v4 = *(unsigned int *)(a1 + ((((*a2 & 0x7FFuLL) << 32) + 0x100000000) >> 30));
  if (v3 == v4) {
    return *(void *)(a1 + 8208);
  }
  uint64_t v5 = *(void *)(a1 + 8200) + 16 * v3;
  uint64_t v6 = 16 * v4 - 16 * v3;
  while (*(void *)v5 != (v2 & 0xFFFFFFFFFFFFFFLL) || **(void **)(v5 + 8) != v2)
  {
    v5 += 16;
    v6 -= 16;
    if (!v6) {
      return *(void *)(a1 + 8208);
    }
  }
  return v5;
}

uint64_t sub_11285E0(uint64_t a1, void *a2)
{
  uint64_t v2 = 0;
  char v3 = 1;
  unsigned int v4 = 50331648;
  char v5 = 1;
  while (1)
  {
    int v6 = *(unsigned __int8 *)(a1 + v2);
    if (v6 == 45) {
      break;
    }
    if (v6 == 95 || v6 == 0) {
      break;
    }
    v3 &= ((v6 & 0xDF) - 65) < 0x1Au;
    v5 &= (v6 - 48) < 0xA;
    if ((unint64_t)++v2 <= 3 && HIBYTE(v4) - 1 <= 2u)
    {
      if ((v6 - 97) >= 0x1A) {
        char v8 = v6;
      }
      else {
        char v8 = v6 - 32;
      }
      unsigned int v4 = ((v8 << (24 - 8 * HIBYTE(v4))) | v4) - 0x1000000;
    }
  }
  int v9 = ((v2 & 0xFFFFFFFFFFFFFFFELL) == 2) & v3 | (v2 == 3) & v5;
  if (a2)
  {
    if (!v9) {
      uint64_t v2 = 0;
    }
    *a2 = a1 + v2;
  }
  if (v9) {
    return v4;
  }
  else {
    return 50331648;
  }
}

void *sub_11286C0(uint64_t *a1, void *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unsigned int v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((uint64_t)v7 - *a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    v16[4] = v4;
    if (v12) {
      unint64_t v13 = (char *)sub_1122DC0(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    int v14 = &v13[8 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[8 * v12];
    *(void *)int v14 = *a2;
    v16[2] = v14 + 8;
    sub_1128898(a1, v16);
    char v8 = (void *)a1[1];
    sub_1128A38((uint64_t)v16);
  }
  else
  {
    *unsigned int v7 = *a2;
    char v8 = v7 + 1;
    a1[1] = (uint64_t)v8;
  }
  a1[1] = (uint64_t)v8;
  return v8 - 1;
}

void sub_11287A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1128A38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_11287B8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v10 = v3;
  uint64_t v4 = *(void *)(a1 + 8200);
  uint64_t v5 = *(unsigned int *)(a1 + 4 * (v2 & 0x7FF));
  uint64_t v6 = *(unsigned int *)(a1 + ((((unint64_t)(v2 & 0x7FF) << 32) + 0x100000000) >> 30));
  if (v5 == v6) {
LABEL_6:
  }
    sub_1128AD4((uint64_t *)(a1 + 8200), v4 + 16 * v6, &v10);
  unsigned int v7 = (void **)(v4 + 16 * v5 + 8);
  uint64_t v8 = 16 * v6 - 16 * v5;
  while (*(v7 - 1) != (void *)v3 || **v7 != v2)
  {
    v7 += 2;
    v8 -= 16;
    if (!v8) {
      goto LABEL_6;
    }
  }
  return (uint64_t)(*v7 + 1);
}

void *sub_112888C()
{
  return &unk_212F510;
}

uint64_t sub_1128898(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1128910((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1128910(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_11289A8((uint64_t)v13);
  return v11;
}

uint64_t sub_11289A8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_11289E0(a1);
  }
  return a1;
}

uint64_t sub_11289E0(uint64_t result)
{
  uint64_t v1 = *(uint64_t **)(*(void *)(result + 16) + 8);
  uint64_t v2 = *(uint64_t **)(*(void *)(result + 8) + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    uint64_t *v1 = 0;
    if (result) {
      operator delete();
    }
    ++v1;
  }
  return result;
}

uint64_t sub_1128A38(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1128A70(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v3 = result;
    do
    {
      *(void *)(v3 + 16) = v2 - 8;
      uint64_t result = *(void *)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        operator delete();
      }
      uint64_t v2 = *(void *)(v3 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void sub_1128AD4(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (a2 - *a1) >> 4;
  unint64_t v10 = a1[2];
  uint64_t v8 = (uint64_t)(a1 + 2);
  unint64_t v9 = v10;
  if (v5 < v10)
  {
    if (a2 != v5) {
      operator new();
    }
    sub_1128C80((uint64_t)a1, a3);
  }
  unint64_t v11 = ((uint64_t)(v5 - v6) >> 4) + 1;
  if (!(v11 >> 60))
  {
    uint64_t v12 = v9 - v6;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    uint64_t v19 = v8;
    if (v13) {
      char v14 = (char *)sub_1121C00(v8, v13);
    }
    else {
      char v14 = 0;
    }
    long long v15 = v14;
    long long v16 = &v14[16 * v7];
    int v17 = v16;
    unint64_t v18 = &v14[16 * v13];
    sub_1121970(&v15, a3);
  }
  sub_2E00();
}

void sub_1128C4C()
{
}

void sub_1128C80(uint64_t a1, void *a2)
{
  **(void **)(a1 + 8) = *a2;
  operator new();
}

void sub_1128CE4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1128CEC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1 + 16;
  sub_1128DA0(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(void *)a1, *(void *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_1128E3C(v7, a3, *(void **)(a1 + 8), (void *)a2[2]);
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = a2[2];
  a2[2] = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_1128DA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 16);
    do
    {
      uint64_t v9 = *(void *)(a3 - 16);
      a3 -= 16;
      *uint64_t v8 = v9;
      uint64_t v10 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = 0;
      v8[1] = v10;
      *((void *)&v16 + 1) = v8;
      v8 -= 2;
      v7 -= 16;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1128EC0((uint64_t)v13);
  return v11;
}

void *sub_1128E3C(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      a2[1] = 0;
      v4[1] = v5;
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_1128EF8((uint64_t)v7);
  return v4;
}

uint64_t sub_1128EC0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1121E10(a1);
  }
  return a1;
}

uint64_t sub_1128EF8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1121EA0(a1);
  }
  return a1;
}

uint64_t sub_1128F30(uint64_t a1)
{
  *(void *)a1 = 850045863;
  *(void *)(a1 + 8264) = 0;
  *(_OWORD *)(a1 + 8272) = 0u;
  bzero((void *)(a1 + 8), 0x203CuLL);
  sub_112BD34(a1 + 8264, 0);
  *(void *)(a1 + 16504) = 0;
  *(_OWORD *)(a1 + 16488) = 0u;
  bzero((void *)(a1 + 8288), 0x2004uLL);
  sub_112BD34(a1 + 16488, 0);
  *(void *)(a1 + 26232) = 0;
  *(_OWORD *)(a1 + 26216) = 0u;
  bzero((void *)(a1 + 18016), 0x2004uLL);
  sub_112BD34(a1 + 26216, 0);
  *(void *)(a1 + 34456) = 0;
  *(_OWORD *)(a1 + 34440) = 0u;
  bzero((void *)(a1 + 26240), 0x2004uLL);
  sub_112BD34(a1 + 34440, 0);
  *(void *)(a1 + 42680) = 0;
  *(_OWORD *)(a1 + 42664) = 0u;
  bzero((void *)(a1 + 34464), 0x2004uLL);
  sub_112BB68(a1 + 42664, 0);
  *(void *)(a1 + 50904) = 0;
  *(_OWORD *)(a1 + 50888) = 0u;
  bzero((void *)(a1 + 42688), 0x2004uLL);
  sub_112BDF0(a1 + 50888, 0);
  *(void *)(a1 + 59128) = 0;
  *(_OWORD *)(a1 + 59112) = 0u;
  bzero((void *)(a1 + 50912), 0x2004uLL);
  sub_112BDF0(a1 + 59112, 0);
  *(void *)(a1 + 67352) = 0;
  *(_OWORD *)(a1 + 67336) = 0u;
  bzero((void *)(a1 + 59136), 0x2004uLL);
  sub_112BD34(a1 + 67336, 0);
  *(void *)(a1 + 75600) = 0;
  *(_OWORD *)(a1 + 75584) = 0u;
  bzero((void *)(a1 + 67360), 0x201CuLL);
  sub_112BB68(a1 + 75584, 0);
  *(void *)(a1 + 83824) = 0;
  *(_OWORD *)(a1 + 83808) = 0u;
  bzero((void *)(a1 + 75608), 0x2004uLL);
  sub_112BA54(a1 + 83808, 0);
  std::mutex::lock((std::mutex *)a1);
  bzero((void *)(a1 + 16512), 0x5E0uLL);
  sub_112924C(a1);
  std::mutex::unlock((std::mutex *)a1);
  return a1;
}

void sub_112919C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::mutex::unlock(v12);
  sub_112BA00((void ***)&a12);
  sub_112BB14((void ***)&a12);
  sub_112BC28((void ***)&a12);
  sub_112BCE0((void ***)&a12);
  sub_112BD9C((void ***)&a12);
  sub_112BD9C((void ***)&a12);
  sub_112BB14((void ***)&a12);
  sub_112BCE0((void ***)&a12);
  sub_112BCE0((void ***)&a12);
  a12 = a10;
  sub_112BCE0((void ***)&a12);
  a12 = a11;
  sub_112BCE0((void ***)&a12);
  std::mutex::~mutex(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_112924C(uint64_t a1)
{
  sub_1123180(v4, "und");
  uint64_t v3 = sub_1129D50(a1, (uint64_t)v4);
  *(void *)sub_112B944(a1 + 42688, &v3) = v3;
  sub_1123180(v4, "");
  sub_112B718(a1, (uint64_t)v4, "und");
  sub_1123180(v4, "grl");
  sub_112B718(a1, (uint64_t)v4, "el-Latn");
  sub_1123180(v4, "rul");
  sub_112B718(a1, (uint64_t)v4, "ru-Latn");
  sub_1123180(v4, "ukl");
  sub_112B718(a1, (uint64_t)v4, "uk-Latn");
  sub_1123180(v4, "kol");
  sub_112B718(a1, (uint64_t)v4, "ko-Latn");
  sub_1123180(v4, "thl");
  sub_112B718(a1, (uint64_t)v4, "th-Latn");
  sub_1123180(v4, "bet");
  sub_112B718(a1, (uint64_t)v4, "be-Latn");
  sub_1123180(v4, "bun");
  sub_112B718(a1, (uint64_t)v4, "bg-Latn");
  sub_1123180(v4, "mat");
  sub_112B718(a1, (uint64_t)v4, "mk-Latn");
  sub_1123180(v4, "ja-kj");
  sub_112B718(a1, (uint64_t)v4, "ja-Kanj");
  sub_1123180(v4, "ja-kt");
  sub_112B718(a1, (uint64_t)v4, "ja-Kana");
  sub_1123180(v4, "ja-hg");
  sub_112B718(a1, (uint64_t)v4, "ja-Hira");
  sub_1123180(v4, "scc");
  sub_112B718(a1, (uint64_t)v4, "sr-Latn");
  sub_1123180(v4, "scy");
  sub_112B718(a1, (uint64_t)v4, "sr-Cyrl");
  sub_1123180(v4, "val");
  sub_112B718(a1, (uint64_t)v4, "val-Latn-ES");
  sub_1123180(v4, "val-Latn");
  sub_112B718(a1, (uint64_t)v4, "val-Latn-ES");
  sub_1123180(v4, "val-ES");
  sub_112B718(a1, (uint64_t)v4, "val-Latn-ES");
  sub_1123180(v4, "val-Latn-ES");
  sub_112B718(a1, (uint64_t)v4, "val-Latn-ES");
  sub_1123180(v4, "mol");
  sub_112B718(a1, (uint64_t)v4, "ro-MD");
  sub_1123180(v4, "hel");
  sub_112B718(a1, (uint64_t)v4, "he-Latn");
  sub_1123180(v4, "chl");
  sub_112B718(a1, (uint64_t)v4, "zh-Latn");
  sub_1123180(v4, "jp");
  sub_112B718(a1, (uint64_t)v4, "ja");
  sub_1123180(v4, "jp-JP");
  sub_112B718(a1, (uint64_t)v4, "ja-JP");
  sub_1123180(v4, "ctn");
  sub_112B718(a1, (uint64_t)v4, "yue-Latn");
  sub_1123180(v4, "smc");
  sub_112B718(a1, (uint64_t)v4, "cnr-Cyrl-ME");
  sub_1123180(v4, "sml");
  sub_112B718(a1, (uint64_t)v4, "cnr-Latn-ME");
  sub_1123180(v4, "Lithuanian [lt]");
  sub_112B718(a1, (uint64_t)v4, "lt");
  sub_1123180(v4, "Lithuanian[lt]");
  sub_112B718(a1, (uint64_t)v4, "lt");
  sub_1123180(v4, "Estonian [et]");
  sub_112B718(a1, (uint64_t)v4, "et");
  sub_1123180(v4, "Estonian[et]");
  sub_112B718(a1, (uint64_t)v4, "et");
  sub_1123180(v4, "Latvian [lv]");
  sub_112B718(a1, (uint64_t)v4, "lv");
  sub_1123180(v4, "Latvian[lv]");
  sub_112B718(a1, (uint64_t)v4, "lv");
  sub_1123180(v4, "ja-Kata");
  sub_112B718(a1, (uint64_t)v4, "ja-Kana");
  sub_1123180(v4, "es ");
  sub_112B718(a1, (uint64_t)v4, "es");
  sub_1123180(v4, "zh-yue-Latn");
  return sub_112B718(a1, (uint64_t)v4, "yue-Latn");
}

BOOL sub_11297C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if ((unint64_t)(v1 - 32) < 0xFFFFFFFFFFFFFFE8) {
    return 0;
  }
  uint64_t v2 = a1 + 16;
  uint64_t v3 = v1 + a1 + 16;
  int v4 = *(unsigned __int8 *)(v3 - 3);
  if (v4 != 95 && v4 != 45) {
    return 0;
  }
  int v5 = *(unsigned __int8 *)(v3 - 6);
  if (v5 != 95 && v5 != 45) {
    return 0;
  }
  unsigned int v6 = ((char)__toupper(*(char *)(v1 + v2 - 5)) | 0x3000000) - 0x1000000;
  unsigned int v12 = v6;
  char v7 = __toupper(*(char *)(v1 + v2 - 4));
  if (!(v6 >> 26)) {
    unsigned int v12 = ((v7 << (24 - 16 * (v6 >> 25))) | v6) - 0x1000000;
  }
  BOOL result = sub_1133D84(&v12);
  if (result)
  {
    unsigned int v12 = 50331648;
    uint64_t v9 = v1 + v2;
    char v10 = __toupper(*(char *)(v9 - 2));
    if (HIBYTE(v12) - 1 <= 2u) {
      unsigned int v12 = ((v10 << (24 - 8 * HIBYTE(v12))) | v12) - 0x1000000;
    }
    char v11 = __toupper(*(char *)(v9 - 1));
    if (HIBYTE(v12) - 1 <= 2u) {
      unsigned int v12 = ((v11 << (24 - 8 * HIBYTE(v12))) | v12) - 0x1000000;
    }
    return sub_1133D84(&v12);
  }
  return result;
}