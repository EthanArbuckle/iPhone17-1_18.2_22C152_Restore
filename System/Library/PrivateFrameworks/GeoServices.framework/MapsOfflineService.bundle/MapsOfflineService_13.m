void sub_5D4EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  uint64_t v36;
  uint64_t v37;

  sub_4D4B58(v37);
  sub_4D4B58(v36);
  if (a35 < 0)
  {
    operator delete(__p);
    sub_5D0144((uint64_t)&a36);
    _Unwind_Resume(a1);
  }
  sub_5D0144((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_5D4F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_4D4B58(v33);
  sub_4D4B58((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_5D4F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

uint64_t sub_5D4F84@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, double **a6@<X5>, uint64_t a7@<X8>)
{
  sub_5F3B34((uint64_t)&v42);
  sub_5F3B34((uint64_t)&v57);
  sub_5F3B34((uint64_t)&v72);
  sub_5DB31C(a2, __p);
  unint64_t v14 = v41;
  if ((v41 & 0x80u) != 0) {
    unint64_t v14 = (unint64_t)__p[1];
  }
  if (v14)
  {
    v15 = sub_8D7730(a1[13], (uint64_t)__p);
    sub_5F3D7C((uint64_t)v39, (uint64_t)v15, (__int16 *)(a1[11] + 1177));
    sub_4D90B4((uint64_t)&v42, (uint64_t)v39);
    sub_4D4B58((uint64_t)v39);
    sub_5D5A38(a1, (int)a2, a3, a4, a5, (uint64_t)v39);
    sub_4D90B4((uint64_t)&v57, (uint64_t)v39);
    sub_4D4B58((uint64_t)v39);
    sub_5E5B4C(a6, (uint64_t)&v42);
    *(_OWORD *)a7 = v42;
    uint64_t v16 = v45;
    *(void *)(a7 + 16) = v43;
    long long v42 = 0uLL;
    *(_OWORD *)(a7 + 24) = v44;
    *(void *)(a7 + 40) = v16;
    uint64_t v43 = 0;
    long long v44 = 0uLL;
    uint64_t v45 = 0;
    *(_OWORD *)(a7 + 48) = v46;
    uint64_t v17 = v49;
    *(void *)(a7 + 64) = v47;
    long long v46 = 0uLL;
    *(_OWORD *)(a7 + 72) = v48;
    uint64_t v47 = 0;
    long long v48 = 0uLL;
    uint64_t v49 = 0;
    uint64_t v18 = v50;
    *(void *)(a7 + 88) = v17;
    *(void *)(a7 + 96) = v18;
    LODWORD(v18) = v51;
    *(unsigned char *)(a7 + 108) = v52;
    *(_DWORD *)(a7 + 104) = v18;
    long long v19 = v53;
    uint64_t v20 = v56;
    *(void *)(a7 + 128) = v54;
    *(_OWORD *)(a7 + 112) = v19;
    uint64_t v50 = 0;
    long long v53 = 0uLL;
    long long v21 = v55;
    *(void *)(a7 + 152) = v20;
    *(_OWORD *)(a7 + 136) = v21;
    uint64_t v56 = 0;
    uint64_t v54 = 0;
    long long v55 = 0uLL;
    *(_OWORD *)(a7 + 160) = v57;
    uint64_t v22 = a7 + 160;
    uint64_t v23 = v60;
    *(void *)(v22 + 16) = v58;
    long long v57 = 0uLL;
    uint64_t v58 = 0;
    *(_OWORD *)(v22 + 24) = v59;
    *(void *)(v22 + 40) = v23;
    long long v59 = 0uLL;
    *(_OWORD *)(v22 + 48) = v61;
    *(void *)(v22 + 64) = v62;
    uint64_t v62 = 0;
    uint64_t v60 = 0;
    long long v61 = 0uLL;
    *(_OWORD *)(v22 + 72) = v63;
    long long v63 = 0uLL;
    uint64_t v24 = v65;
    *(void *)(v22 + 88) = v64;
    *(void *)(v22 + 96) = v24;
    LODWORD(v24) = v66;
    *(unsigned char *)(v22 + 108) = v67;
    *(_DWORD *)(v22 + 104) = v24;
    long long v25 = v68;
    uint64_t v26 = v71;
    *(void *)(v22 + 128) = v69;
    *(_OWORD *)(v22 + 112) = v25;
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    long long v68 = 0uLL;
    uint64_t v69 = 0;
    long long v27 = v70;
    *(void *)(v22 + 152) = v26;
    *(_OWORD *)(v22 + 136) = v27;
    long long v70 = 0uLL;
    uint64_t v71 = 0;
    *(_OWORD *)(v22 + 160) = v72;
    long long v72 = 0uLL;
    uint64_t v28 = v73;
    uint64_t v29 = v74;
    uint64_t v73 = 0;
    *(void *)(v22 + 176) = v28;
    *(void *)(v22 + 184) = v29;
    long long v30 = v75;
    long long v31 = v76;
    uint64_t v74 = 0;
    *(void *)&long long v75 = 0;
    *(_OWORD *)(v22 + 192) = v30;
    *(_OWORD *)(v22 + 208) = v31;
    *((void *)&v75 + 1) = 0;
    long long v76 = 0uLL;
    uint64_t v32 = v77;
    uint64_t v33 = v78;
    uint64_t v77 = 0;
    *(void *)(v22 + 224) = v32;
    *(void *)(v22 + 232) = v33;
    *(_OWORD *)(v22 + 240) = v79;
    uint64_t v78 = 0;
    long long v79 = 0uLL;
    uint64_t v34 = v80;
    uint64_t v80 = 0;
    *(void *)(v22 + 256) = v34;
    LODWORD(v34) = v81;
    *(unsigned char *)(v22 + 268) = v82;
    *(_DWORD *)(v22 + 264) = v34;
    long long v35 = v83;
    uint64_t v36 = v86;
    *(void *)(v22 + 288) = v84;
    *(_OWORD *)(v22 + 272) = v35;
    long long v83 = 0uLL;
    long long v37 = v85;
    *(void *)(v22 + 312) = v36;
    *(_OWORD *)(v22 + 296) = v37;
    long long v85 = 0uLL;
    uint64_t v84 = 0;
    uint64_t v86 = 0;
  }
  else
  {
    *(_OWORD *)(a7 + 448) = 0u;
    *(_OWORD *)(a7 + 464) = 0u;
    *(_OWORD *)(a7 + 416) = 0u;
    *(_OWORD *)(a7 + 432) = 0u;
    *(_OWORD *)(a7 + 384) = 0u;
    *(_OWORD *)(a7 + 400) = 0u;
    *(_OWORD *)(a7 + 352) = 0u;
    *(_OWORD *)(a7 + 368) = 0u;
    *(_OWORD *)(a7 + 320) = 0u;
    *(_OWORD *)(a7 + 336) = 0u;
    *(_OWORD *)(a7 + 288) = 0u;
    *(_OWORD *)(a7 + 304) = 0u;
    *(_OWORD *)(a7 + 256) = 0u;
    *(_OWORD *)(a7 + 272) = 0u;
    *(_OWORD *)(a7 + 224) = 0u;
    *(_OWORD *)(a7 + 240) = 0u;
    *(_OWORD *)(a7 + 192) = 0u;
    *(_OWORD *)(a7 + 208) = 0u;
    *(_OWORD *)(a7 + 160) = 0u;
    *(_OWORD *)(a7 + 176) = 0u;
    *(_OWORD *)(a7 + 128) = 0u;
    *(_OWORD *)(a7 + 144) = 0u;
    *(_OWORD *)(a7 + 96) = 0u;
    *(_OWORD *)(a7 + 112) = 0u;
    *(_OWORD *)(a7 + 64) = 0u;
    *(_OWORD *)(a7 + 80) = 0u;
    *(_OWORD *)(a7 + 32) = 0u;
    *(_OWORD *)(a7 + 48) = 0u;
    *(_OWORD *)a7 = 0u;
    *(_OWORD *)(a7 + 16) = 0u;
    sub_5F3B34(a7);
    sub_5F3B34(a7 + 160);
    sub_5F3B34(a7 + 320);
  }
  if ((char)v41 < 0) {
    operator delete(__p[0]);
  }
  sub_4D4B58((uint64_t)&v72);
  sub_4D4B58((uint64_t)&v57);
  return sub_4D4B58((uint64_t)&v42);
}

void sub_5D5320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  sub_4D4B58(v37);
  sub_4D4B58(v36);
  if (a35 < 0) {
    operator delete(__p);
  }
  sub_5D0144((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_5D53B4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *(void *)(a2 + 11608);
  uint64_t v5 = *(void *)(a2 + 11616);
  if (v4 != v5)
  {
    for (uint64_t i = v4 + 136; i - 136 != v5; i += 168)
    {
      if (!*(unsigned char *)(i - 8)) {
        continue;
      }
      uint64_t v17 = *(void *)(i - 104);
      sub_524C68(i, (uint64_t)v18);
      memset(v16, 0, sizeof(v16));
      memset(v15, 0, sizeof(v15));
      memset(v14, 0, sizeof(v14));
      sub_5F3B34((uint64_t)v14);
      sub_5F3B34((uint64_t)v15);
      sub_5F3B34((uint64_t)v16);
      int v9 = *(_DWORD *)(a1 + 76);
      int v13 = v9;
      unint64_t v10 = a3[1];
      if (v10 >= a3[2])
      {
        uint64_t v11 = sub_5E1F18(a3, &v17, (uint64_t)v18, (uint64_t)v14, &v13);
      }
      else
      {
        sub_5E1544(a3[1], v17, (uint64_t)v18, (uint64_t)v14, v9);
        uint64_t v11 = v10 + 608;
        a3[1] = v10 + 608;
      }
      a3[1] = v11;
      sub_4D4B58((uint64_t)v16);
      sub_4D4B58((uint64_t)v15);
      sub_4D4B58((uint64_t)v14);
      if (v26 < 0)
      {
        operator delete(v25);
        if ((v24 & 0x80000000) == 0)
        {
LABEL_13:
          int v12 = v22;
          if (v22 != 1) {
            goto LABEL_17;
          }
          goto LABEL_3;
        }
      }
      else if ((v24 & 0x80000000) == 0)
      {
        goto LABEL_13;
      }
      operator delete(v23);
      int v12 = v22;
      if (v22 != 1)
      {
LABEL_17:
        if (v12 || (v21 & 0x80000000) == 0) {
          continue;
        }
        v8 = v19;
        goto LABEL_5;
      }
LABEL_3:
      v8 = v19;
      if (v19)
      {
        uint64_t v20 = v19;
LABEL_5:
        operator delete(v8);
      }
    }
  }
}

void sub_5D55AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_5D0144((uint64_t)va);
  sub_4D9814(v4 - 200);
  sub_5919CC(v3);
  _Unwind_Resume(a1);
}

void sub_5D5604(_Unwind_Exception *a1)
{
  sub_5919CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_5D5618@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  sub_5F3B34((uint64_t)&v40);
  sub_5F3B34((uint64_t)&v55);
  sub_5F3B34((uint64_t)&v70);
  sub_5DB31C(a2, __p);
  unint64_t v12 = v39;
  if ((v39 & 0x80u) != 0) {
    unint64_t v12 = (unint64_t)__p[1];
  }
  if (v12)
  {
    int v13 = sub_8D7730(a1[13], (uint64_t)__p);
    sub_5F3D7C((uint64_t)v37, (uint64_t)v13, (__int16 *)(a1[11] + 1177));
    sub_4D90B4((uint64_t)&v40, (uint64_t)v37);
    sub_4D4B58((uint64_t)v37);
    sub_5D5A38(a1, (int)a2, a3, a4, a5, (uint64_t)v37);
    sub_4D90B4((uint64_t)&v55, (uint64_t)v37);
    sub_4D4B58((uint64_t)v37);
    *(_OWORD *)a6 = v40;
    uint64_t v14 = v43;
    *(void *)(a6 + 16) = v41;
    long long v40 = 0uLL;
    *(_OWORD *)(a6 + 24) = v42;
    *(void *)(a6 + 40) = v14;
    uint64_t v41 = 0;
    long long v42 = 0uLL;
    uint64_t v43 = 0;
    *(_OWORD *)(a6 + 48) = v44;
    uint64_t v15 = v47;
    *(void *)(a6 + 64) = v45;
    long long v44 = 0uLL;
    *(_OWORD *)(a6 + 72) = v46;
    uint64_t v45 = 0;
    long long v46 = 0uLL;
    uint64_t v47 = 0;
    uint64_t v16 = v48;
    *(void *)(a6 + 88) = v15;
    *(void *)(a6 + 96) = v16;
    LODWORD(v16) = v49;
    *(unsigned char *)(a6 + 108) = v50;
    *(_DWORD *)(a6 + 104) = v16;
    long long v17 = v51;
    uint64_t v18 = v54;
    *(void *)(a6 + 128) = v52;
    *(_OWORD *)(a6 + 112) = v17;
    uint64_t v48 = 0;
    long long v51 = 0uLL;
    long long v19 = v53;
    *(void *)(a6 + 152) = v18;
    *(_OWORD *)(a6 + 136) = v19;
    uint64_t v54 = 0;
    uint64_t v52 = 0;
    long long v53 = 0uLL;
    *(_OWORD *)(a6 + 160) = v55;
    uint64_t v20 = a6 + 160;
    uint64_t v21 = v58;
    *(void *)(v20 + 16) = v56;
    long long v55 = 0uLL;
    uint64_t v56 = 0;
    *(_OWORD *)(v20 + 24) = v57;
    *(void *)(v20 + 40) = v21;
    long long v57 = 0uLL;
    *(_OWORD *)(v20 + 48) = v59;
    *(void *)(v20 + 64) = v60;
    uint64_t v60 = 0;
    uint64_t v58 = 0;
    long long v59 = 0uLL;
    *(_OWORD *)(v20 + 72) = v61;
    long long v61 = 0uLL;
    uint64_t v22 = v63;
    *(void *)(v20 + 88) = v62;
    *(void *)(v20 + 96) = v22;
    LODWORD(v22) = v64;
    *(unsigned char *)(v20 + 108) = v65;
    *(_DWORD *)(v20 + 104) = v22;
    long long v23 = v66;
    uint64_t v24 = v69;
    *(void *)(v20 + 128) = v67;
    *(_OWORD *)(v20 + 112) = v23;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    long long v66 = 0uLL;
    uint64_t v67 = 0;
    long long v25 = v68;
    *(void *)(v20 + 152) = v24;
    *(_OWORD *)(v20 + 136) = v25;
    long long v68 = 0uLL;
    uint64_t v69 = 0;
    *(_OWORD *)(v20 + 160) = v70;
    long long v70 = 0uLL;
    uint64_t v26 = v71;
    uint64_t v27 = v72;
    uint64_t v71 = 0;
    *(void *)(v20 + 176) = v26;
    *(void *)(v20 + 184) = v27;
    long long v28 = v73;
    long long v29 = v74;
    uint64_t v72 = 0;
    *(void *)&long long v73 = 0;
    *(_OWORD *)(v20 + 192) = v28;
    *(_OWORD *)(v20 + 208) = v29;
    *((void *)&v73 + 1) = 0;
    long long v74 = 0uLL;
    uint64_t v30 = v75;
    uint64_t v31 = v76;
    uint64_t v75 = 0;
    *(void *)(v20 + 224) = v30;
    *(void *)(v20 + 232) = v31;
    *(_OWORD *)(v20 + 240) = v77;
    uint64_t v76 = 0;
    long long v77 = 0uLL;
    uint64_t v32 = v78;
    uint64_t v78 = 0;
    *(void *)(v20 + 256) = v32;
    LODWORD(v32) = v79;
    *(unsigned char *)(v20 + 268) = v80;
    *(_DWORD *)(v20 + 264) = v32;
    long long v33 = v81;
    uint64_t v34 = v84;
    *(void *)(v20 + 288) = v82;
    *(_OWORD *)(v20 + 272) = v33;
    long long v81 = 0uLL;
    long long v35 = v83;
    *(void *)(v20 + 312) = v34;
    *(_OWORD *)(v20 + 296) = v35;
    long long v83 = 0uLL;
    uint64_t v82 = 0;
    uint64_t v84 = 0;
  }
  else
  {
    *(_OWORD *)(a6 + 448) = 0u;
    *(_OWORD *)(a6 + 464) = 0u;
    *(_OWORD *)(a6 + 416) = 0u;
    *(_OWORD *)(a6 + 432) = 0u;
    *(_OWORD *)(a6 + 384) = 0u;
    *(_OWORD *)(a6 + 400) = 0u;
    *(_OWORD *)(a6 + 352) = 0u;
    *(_OWORD *)(a6 + 368) = 0u;
    *(_OWORD *)(a6 + 320) = 0u;
    *(_OWORD *)(a6 + 336) = 0u;
    *(_OWORD *)(a6 + 288) = 0u;
    *(_OWORD *)(a6 + 304) = 0u;
    *(_OWORD *)(a6 + 256) = 0u;
    *(_OWORD *)(a6 + 272) = 0u;
    *(_OWORD *)(a6 + 224) = 0u;
    *(_OWORD *)(a6 + 240) = 0u;
    *(_OWORD *)(a6 + 192) = 0u;
    *(_OWORD *)(a6 + 208) = 0u;
    *(_OWORD *)(a6 + 160) = 0u;
    *(_OWORD *)(a6 + 176) = 0u;
    *(_OWORD *)(a6 + 128) = 0u;
    *(_OWORD *)(a6 + 144) = 0u;
    *(_OWORD *)(a6 + 96) = 0u;
    *(_OWORD *)(a6 + 112) = 0u;
    *(_OWORD *)(a6 + 64) = 0u;
    *(_OWORD *)(a6 + 80) = 0u;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    sub_5F3B34(a6);
    sub_5F3B34(a6 + 160);
    sub_5F3B34(a6 + 320);
  }
  if ((char)v39 < 0) {
    operator delete(__p[0]);
  }
  sub_4D4B58((uint64_t)&v70);
  sub_4D4B58((uint64_t)&v55);
  return sub_4D4B58((uint64_t)&v40);
}

void sub_5D59A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  sub_4D4B58(v37);
  sub_4D4B58(v36);
  if (a35 < 0)
  {
    operator delete(__p);
    sub_5D0144((uint64_t)&a36);
    _Unwind_Resume(a1);
  }
  sub_5D0144((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_5D5A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_4D4B58(v33);
  sub_4D4B58((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_5D5A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_5D5A38(void *a1@<X0>, int a2@<W1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10 = sub_46C8EC(a3, a4);
  sub_5D6180(*(void *)(v10 + 32), a1[12], a1[11] + 968, (uint64_t)v55);
  if (a2 == 14) {
    sub_6F30A4((uint64_t)v45);
  }
  else {
    sub_5D5F54(a1, v10, a5, (char *)v45);
  }
  BOOL v11 = sub_6F2FD8((uint64_t)v55);
  sub_6F2FD8((uint64_t)v45);
  if (a2 != 14)
  {
    memset(&__p, 0, sizeof(__p));
LABEL_11:
    sub_5F3B34(a6);
    goto LABEL_72;
  }
  sub_5DB9D8(14, v11, &__p);
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_11;
  }
  int v13 = sub_8D7730(a1[13], (uint64_t)&__p);
  if (*((char *)v13 + 23) < 0)
  {
    sub_4200(&__dst, (void *)*v13, v13[1]);
  }
  else
  {
    long long v14 = *(_OWORD *)v13;
    __dst.__r_.__value_.__r.__words[2] = v13[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v14;
  }
  if (sub_6F2FD8((uint64_t)v55))
  {
    memset(&v42, 0, sizeof(v42));
    std::string::operator=(&v42, (const std::string *)&xmmword_2582BC8);
    int64_t v15 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    char v17 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v18 = &v42;
    }
    else {
      uint64_t v18 = (std::string *)v42.__r_.__value_.__r.__words[0];
    }
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t v19 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
    }
    else {
      int64_t v19 = v42.__r_.__value_.__l.__size_;
    }
    if (v19)
    {
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int64_t v15 = __dst.__r_.__value_.__l.__size_;
      }
      if (v15 >= v19)
      {
        uint64_t v20 = (char *)p_dst + v15;
        int v21 = v18->__r_.__value_.__s.__data_[0];
        uint64_t v22 = p_dst;
        do
        {
          int64_t v23 = v15 - v19;
          if (v23 == -1) {
            break;
          }
          uint64_t v24 = (char *)memchr(v22, v21, v23 + 1);
          if (!v24) {
            break;
          }
          long long v25 = v24;
          if (!memcmp(v24, v18, v19))
          {
            if (v25 != v20)
            {
              std::string::size_type v26 = v25 - (char *)p_dst;
              if (v25 - (char *)p_dst != -1) {
                goto LABEL_34;
              }
            }
            break;
          }
          uint64_t v22 = (std::string *)(v25 + 1);
          int64_t v15 = v20 - (v25 + 1);
        }
        while (v15 >= v19);
      }
    }
    else
    {
      std::string::size_type v26 = 0;
LABEL_34:
      if ((v56 & 0x80u) == 0) {
        uint64_t v27 = v55;
      }
      else {
        uint64_t v27 = (void **)v55[0];
      }
      if ((v56 & 0x80u) == 0) {
        std::string::size_type v28 = v56;
      }
      else {
        std::string::size_type v28 = (std::string::size_type)v55[1];
      }
      std::string::replace(&__dst, v26, v19, (const std::string::value_type *)v27, v28);
      char v17 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
    }
    if (v17 < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
  }
  if (sub_6F2FD8((uint64_t)v45))
  {
    int64_t v29 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v30 = &__dst;
    }
    else {
      uint64_t v30 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if (byte_2582B97 >= 0) {
      uint64_t v31 = &xmmword_2582B80;
    }
    else {
      uint64_t v31 = (long long *)xmmword_2582B80;
    }
    if (byte_2582B97 >= 0) {
      int64_t v32 = byte_2582B97;
    }
    else {
      int64_t v32 = *((void *)&xmmword_2582B80 + 1);
    }
    if (v32)
    {
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int64_t v29 = __dst.__r_.__value_.__l.__size_;
      }
      if (v29 >= v32)
      {
        uint64_t v33 = (char *)v30 + v29;
        int v34 = *(char *)v31;
        long long v35 = v30;
        do
        {
          int64_t v36 = v29 - v32;
          if (v36 == -1) {
            break;
          }
          uint64_t v37 = (char *)memchr(v35, v34, v36 + 1);
          if (!v37) {
            break;
          }
          v38 = v37;
          if (!memcmp(v37, v31, v32))
          {
            if (v38 != v33)
            {
              std::string::size_type v39 = v38 - (char *)v30;
              if (v38 - (char *)v30 != -1) {
                goto LABEL_64;
              }
            }
            break;
          }
          long long v35 = (std::string *)(v38 + 1);
          int64_t v29 = v33 - (v38 + 1);
        }
        while (v29 >= v32);
      }
    }
    else
    {
      std::string::size_type v39 = 0;
LABEL_64:
      if ((v46 & 0x80u) == 0) {
        long long v40 = v45;
      }
      else {
        long long v40 = (void **)v45[0];
      }
      if ((v46 & 0x80u) == 0) {
        std::string::size_type v41 = v46;
      }
      else {
        std::string::size_type v41 = (std::string::size_type)v45[1];
      }
      std::string::replace(&__dst, v39, v32, (const std::string::value_type *)v40, v41);
    }
  }
  sub_5F3D7C(a6, (uint64_t)&__dst, (__int16 *)(a1[11] + 1177));
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_72:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_73;
    }
    goto LABEL_85;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_73:
    if ((v54 & 0x80000000) == 0) {
      goto LABEL_74;
    }
    goto LABEL_86;
  }
LABEL_85:
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((v54 & 0x80000000) == 0)
  {
LABEL_74:
    if ((v52 & 0x80000000) == 0) {
      goto LABEL_75;
    }
    goto LABEL_87;
  }
LABEL_86:
  operator delete(v53);
  if ((v52 & 0x80000000) == 0)
  {
LABEL_75:
    if ((v50 & 0x80000000) == 0) {
      goto LABEL_76;
    }
    goto LABEL_88;
  }
LABEL_87:
  operator delete(v51);
  if ((v50 & 0x80000000) == 0)
  {
LABEL_76:
    if ((v48 & 0x80000000) == 0) {
      goto LABEL_77;
    }
    goto LABEL_89;
  }
LABEL_88:
  operator delete(v49);
  if ((v48 & 0x80000000) == 0)
  {
LABEL_77:
    if (((char)v46 & 0x80000000) == 0) {
      goto LABEL_78;
    }
    goto LABEL_90;
  }
LABEL_89:
  operator delete(v47);
  if (((char)v46 & 0x80000000) == 0)
  {
LABEL_78:
    if ((v64 & 0x80000000) == 0) {
      goto LABEL_79;
    }
    goto LABEL_91;
  }
LABEL_90:
  operator delete(v45[0]);
  if ((v64 & 0x80000000) == 0)
  {
LABEL_79:
    if ((v62 & 0x80000000) == 0) {
      goto LABEL_80;
    }
    goto LABEL_92;
  }
LABEL_91:
  operator delete(v63);
  if ((v62 & 0x80000000) == 0)
  {
LABEL_80:
    if ((v60 & 0x80000000) == 0) {
      goto LABEL_81;
    }
    goto LABEL_93;
  }
LABEL_92:
  operator delete(v61);
  if ((v60 & 0x80000000) == 0)
  {
LABEL_81:
    if ((v58 & 0x80000000) == 0) {
      goto LABEL_82;
    }
    goto LABEL_94;
  }
LABEL_93:
  operator delete(v59);
  if ((v58 & 0x80000000) == 0)
  {
LABEL_82:
    if (((char)v56 & 0x80000000) == 0) {
      return;
    }
LABEL_95:
    operator delete(v55[0]);
    return;
  }
LABEL_94:
  operator delete(v57);
  if ((char)v56 < 0) {
    goto LABEL_95;
  }
}

void sub_5D5EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a27 & 0x80000000) == 0)
      {
LABEL_8:
        sub_4A50F4((uint64_t)&a28);
        sub_4A50F4((uint64_t)&a47);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a22);
      sub_4A50F4((uint64_t)&a28);
      sub_4A50F4((uint64_t)&a47);
      _Unwind_Resume(a1);
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a27 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_5D5F54(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  sub_5D634C(a1, (long long *)a2, a3, (uint64_t)v26);
  uint64_t v25 = *(void *)(a2 + 32);
  long long v8 = *(_OWORD *)(a2 + 16);
  v24[0] = *(_OWORD *)a2;
  v24[1] = v8;
  BYTE6(v25) ^= 1u;
  int v9 = (unsigned __int16 *)(*(void *)&v24[0] - (int)**(_DWORD **)&v24[0]);
  if (*v9 >= 9u && (uint64_t v10 = v9[4]) != 0) {
    uint64_t v11 = *(unsigned int *)(*(void *)&v24[0] + v10);
  }
  else {
    uint64_t v11 = 0;
  }
  sub_5D634C(a1, v24, v11 - a3, (uint64_t)v13);
  if (sub_6F2FD8((uint64_t)v26) && (!sub_6F2FD8((uint64_t)v13) || v36 < v23))
  {
    unint64_t v12 = (long long *)v26;
LABEL_11:
    sub_4AA8E0(a4, v12);
    goto LABEL_13;
  }
  if (sub_6F2FD8((uint64_t)v13))
  {
    unint64_t v12 = (long long *)v13;
    goto LABEL_11;
  }
  sub_6F30A4((uint64_t)a4);
LABEL_13:
  if (v22 < 0)
  {
    operator delete(__p);
    if ((v20 & 0x80000000) == 0)
    {
LABEL_15:
      if ((v18 & 0x80000000) == 0) {
        goto LABEL_16;
      }
      goto LABEL_26;
    }
  }
  else if ((v20 & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v19);
  if ((v18 & 0x80000000) == 0)
  {
LABEL_16:
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_27;
  }
LABEL_26:
  operator delete(v17);
  if ((v16 & 0x80000000) == 0)
  {
LABEL_17:
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete(v15);
  if ((v14 & 0x80000000) == 0)
  {
LABEL_18:
    if ((v35 & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_29;
  }
LABEL_28:
  operator delete(v13[0]);
  if ((v35 & 0x80000000) == 0)
  {
LABEL_19:
    if ((v33 & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_30;
  }
LABEL_29:
  operator delete(v34);
  if ((v33 & 0x80000000) == 0)
  {
LABEL_20:
    if ((v31 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_31;
  }
LABEL_30:
  operator delete(v32);
  if ((v31 & 0x80000000) == 0)
  {
LABEL_21:
    if ((v29 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_32;
  }
LABEL_31:
  operator delete(v30);
  if ((v29 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v27 & 0x80000000) == 0) {
      return;
    }
LABEL_33:
    operator delete(v26[0]);
    return;
  }
LABEL_32:
  operator delete(v28);
  if (v27 < 0) {
    goto LABEL_33;
  }
}

void sub_5D6150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_5D6164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_5D6180(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_58E730(a2, a1, 1u, &v21);
  sub_3D63DC(a2, a1 & 0xFFFFFFFFFFFFLL, v19);
  sub_5F2D5C((uint64_t)__dst, (long long *)v19, 0);
  std::string __p = 0;
  int64_t v15 = 0;
  uint64_t v16 = 0;
  sub_6F60AC((unsigned __int16 *)__dst, (uint64_t *)&v21, (uint64_t *)&__p, a3, a4);
  long long v8 = (void **)__p;
  if (__p)
  {
    int v9 = v15;
    uint64_t v10 = __p;
    if (v15 != __p)
    {
      do
      {
        if (*((char *)v9 - 9) < 0) {
          operator delete(*(v9 - 4));
        }
        v9 -= 5;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int64_t v15 = v8;
    operator delete(v10);
  }
  if ((v18 & 0x80000000) == 0)
  {
    if ((v20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
LABEL_14:
    operator delete(v19[0]);
    uint64_t v11 = v21;
    if (!v21) {
      return;
    }
    goto LABEL_15;
  }
  operator delete(__dst[0]);
  if (v20 < 0) {
    goto LABEL_14;
  }
LABEL_11:
  uint64_t v11 = v21;
  if (!v21) {
    return;
  }
LABEL_15:
  uint64_t v12 = (uint64_t)v22;
  int v13 = v11;
  if (v22 != v11)
  {
    do
      uint64_t v12 = sub_2DF404(v12 - 144);
    while ((void *)v12 != v11);
    int v13 = v21;
  }
  char v22 = v11;
  operator delete(v13);
}

void sub_5D62D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  sub_2DE7D0(&a10);
  if (a18 < 0)
  {
    operator delete(__p);
    if ((a25 & 0x80000000) == 0)
    {
LABEL_3:
      sub_53BD98((void **)(v25 - 56));
      _Unwind_Resume(a1);
    }
  }
  else if ((a25 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a20);
  sub_53BD98((void **)(v25 - 56));
  _Unwind_Resume(a1);
}

void sub_5D6338(_Unwind_Exception *a1)
{
  sub_53BD98((void **)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_5D634C(void *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v7 = a2[1];
  long long v47 = *a2;
  long long v48 = v7;
  int v49 = (void *)*((void *)a2 + 4);
  sub_5D6180(*((void *)a2 + 4), a1[12], a1[11] + 968, (uint64_t)v37);
  long long v8 = (unsigned __int16 *)(v47 - *(int *)v47);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0) {
    uint64_t v10 = *(unsigned int *)(v47 + v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = v10 - a3;
  while (v11 <= a1[2])
  {
    sub_6A48E0(a1[15], (uint64_t)&v47, 1, &v35);
    uint64_t v12 = *v35;
    uint64_t v13 = v35[1];
    while (v12 != v13)
    {
      int v14 = *(_DWORD *)(v12 + 24);
      if ((v14 - 41) >= 0x17)
      {
        switch(v14)
        {
          case 1:
          case 2:
          case 6:
          case 7:
          case 20:
          case 21:
          case 27:
          case 28:
          case 86:
          case 87:
            break;
          default:
            goto LABEL_10;
        }
      }
      sub_5D6180(*(void *)(*(void *)(v12 + 8) - 8), a1[12], a1[11] + 968, (uint64_t)__s1);
      if (sub_6F2FD8((uint64_t)__s1))
      {
        uint64_t v15 = BYTE7(v26);
        if ((SBYTE7(v26) & 0x80u) == 0) {
          uint64_t v16 = (void *)BYTE7(v26);
        }
        else {
          uint64_t v16 = __s1[1];
        }
        unint64_t v17 = v38;
        if ((v38 & 0x80u) != 0) {
          unint64_t v17 = (unint64_t)v37[1];
        }
        if (v16 != (void *)v17) {
          goto LABEL_41;
        }
        if ((v38 & 0x80u) == 0) {
          char v18 = v37;
        }
        else {
          char v18 = (void **)v37[0];
        }
        if ((BYTE7(v26) & 0x80) != 0)
        {
          if (memcmp(__s1[0], v18, (size_t)__s1[1])) {
            goto LABEL_41;
          }
        }
        else if (BYTE7(v26))
        {
          int64_t v19 = __s1;
          while (*(unsigned __int8 *)v19 == *(unsigned __int8 *)v18)
          {
            int64_t v19 = (void **)((char *)v19 + 1);
            char v18 = (void **)((char *)v18 + 1);
            if (!--v15) {
              goto LABEL_31;
            }
          }
LABEL_41:
          sub_4AA8E0((char *)a4, (long long *)__s1);
          *(void *)(a4 + 152) = v11;
          if (v34 < 0)
          {
            operator delete(v33);
            if (v32 < 0) {
              goto LABEL_54;
            }
LABEL_43:
            if ((v30 & 0x80000000) == 0) {
              goto LABEL_44;
            }
LABEL_55:
            operator delete(v29);
            if (v28 < 0) {
              goto LABEL_56;
            }
LABEL_45:
            if (SBYTE7(v26) < 0) {
LABEL_57:
            }
              operator delete(__s1[0]);
          }
          else
          {
            if ((v32 & 0x80000000) == 0) {
              goto LABEL_43;
            }
LABEL_54:
            operator delete(v31);
            if (v30 < 0) {
              goto LABEL_55;
            }
LABEL_44:
            if ((v28 & 0x80000000) == 0) {
              goto LABEL_45;
            }
LABEL_56:
            operator delete(__p);
            if (SBYTE7(v26) < 0) {
              goto LABEL_57;
            }
          }
          int v20 = 1;
          goto LABEL_60;
        }
      }
LABEL_31:
      if (v34 < 0)
      {
        operator delete(v33);
        if ((v32 & 0x80000000) == 0)
        {
LABEL_33:
          if ((v30 & 0x80000000) == 0) {
            goto LABEL_34;
          }
          goto LABEL_38;
        }
      }
      else if ((v32 & 0x80000000) == 0)
      {
        goto LABEL_33;
      }
      operator delete(v31);
      if ((v30 & 0x80000000) == 0)
      {
LABEL_34:
        if ((v28 & 0x80000000) == 0) {
          goto LABEL_39;
        }
        goto LABEL_9;
      }
LABEL_38:
      operator delete(v29);
      if ((v28 & 0x80000000) == 0)
      {
LABEL_39:
        if ((SBYTE7(v26) & 0x80000000) == 0) {
          goto LABEL_10;
        }
        goto LABEL_40;
      }
LABEL_9:
      operator delete(__p);
      if ((SBYTE7(v26) & 0x80000000) == 0) {
        goto LABEL_10;
      }
LABEL_40:
      operator delete(__s1[0]);
LABEL_10:
      v12 += 192;
    }
    sub_5D21D0((uint64_t)a1, v35, (uint64_t)__s1);
    long long v47 = *(_OWORD *)__s1;
    long long v48 = v26;
    int v49 = __p;
    int v20 = 3;
    if (__p && (void)v47 && *((void *)&v47 + 1))
    {
      int v21 = (unsigned __int16 *)(v47 - *(int *)v47);
      if (*v21 >= 9u && (uint64_t v22 = v21[4]) != 0) {
        uint64_t v23 = *(unsigned int *)(v47 + v22);
      }
      else {
        uint64_t v23 = 0;
      }
      int v20 = 0;
      v11 += v23;
    }
LABEL_60:
    uint64_t v24 = v36;
    if (v36)
    {
      if (!atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v20)
    {
      if (v20 != 3) {
        goto LABEL_65;
      }
      break;
    }
  }
  sub_6F30A4(a4);
  *(void *)(a4 + 152) = 0x7FFFFFFFFFFFFFFFLL;
LABEL_65:
  if (v46 < 0)
  {
    operator delete(v45);
    if (v44 < 0) {
      goto LABEL_72;
    }
LABEL_67:
    if ((v42 & 0x80000000) == 0) {
      goto LABEL_68;
    }
LABEL_73:
    operator delete(v41);
    if (v40 < 0) {
      goto LABEL_74;
    }
LABEL_69:
    if ((char)v38 < 0) {
LABEL_75:
    }
      operator delete(v37[0]);
  }
  else
  {
    if ((v44 & 0x80000000) == 0) {
      goto LABEL_67;
    }
LABEL_72:
    operator delete(v43);
    if (v42 < 0) {
      goto LABEL_73;
    }
LABEL_68:
    if ((v40 & 0x80000000) == 0) {
      goto LABEL_69;
    }
LABEL_74:
    operator delete(v39);
    if ((char)v38 < 0) {
      goto LABEL_75;
    }
  }
}

void sub_5D6748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

void sub_5D675C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30)
{
}

void sub_5D6914(void *a1, uint64_t *a2, uint64_t a3)
{
  HIBYTE(v17[2]) = 20;
  strcpy((char *)v17, "EnrouteNoticeBuilder");
  int v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  v6 = sub_374CDC((uint64_t)a2, (uint64_t)v17, (uint64_t *)&v14);
  sub_3CB370(v6, 2, *(unsigned __int8 *)(a3 + 1525), &__p);
  sub_5D85A4((uint64_t)a1, &__p, (uint64_t)a2, a3);
  long long v7 = v19;
  if (v19)
  {
    do
    {
      uint64_t v12 = *(char **)v7;
      sub_57AC8((uint64_t *)v7 + 5);
      if (v7[39] < 0) {
        operator delete(*((void **)v7 + 2));
      }
      operator delete(v7);
      long long v7 = v12;
    }
    while (v12);
  }
  long long v8 = __p;
  std::string __p = 0;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v9 = (void **)v14;
  if (v14)
  {
    uint64_t v10 = v15;
    uint64_t v11 = v14;
    if (v15 != v14)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      uint64_t v11 = v14;
    }
    uint64_t v15 = v9;
    operator delete(v11);
  }
  if (SHIBYTE(v17[2]) < 0) {
    operator delete(v17[0]);
  }
  a1[11] = a3;
  a1[12] = sub_3750CC(a2);
  uint64_t v13 = (uint64_t *)sub_374EF4(a2);
  sub_688A04(v13, 0, *(_DWORD *)(a3 + 968), a1 + 13);
  operator new();
}

void sub_5D6AD4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_5D6B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_5D6B50(unint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  sub_5D6E5C(a1, a2, a3);
  sub_5D74B4(a1, a2, (uint64_t *)&v32);
  sub_5DC47C(a3, a3[1], (uint64_t)v32, (uint64_t)v33, 0x86BCA1AF286BCA1BLL * ((v33 - v32) >> 5));
  sub_5D7940(a1, a2, (uint64_t *)&v29);
  sub_5DC47C(a3, a3[1], (uint64_t)v29, (uint64_t)v30, 0x86BCA1AF286BCA1BLL * ((v30 - (unsigned char *)v29) >> 5));
  sub_5D7C80(a1, (uint64_t)a2, (uint64_t *)&v26);
  sub_5DC47C(a3, a3[1], (uint64_t)v26, (uint64_t)v27, 0x86BCA1AF286BCA1BLL * ((v27 - (unsigned char *)v26) >> 5));
  if (*(unsigned char *)(a1 + 14))
  {
    sub_5D9784(a1, (uint64_t)a2, (uint64_t *)&__p);
    v6 = __p;
    uint64_t v7 = (uint64_t)v24;
  }
  else
  {
    uint64_t v7 = 0;
    v6 = 0;
    std::string __p = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
  }
  sub_5DC47C(a3, a3[1], (uint64_t)v6, v7, 0x86BCA1AF286BCA1BLL * ((v7 - (uint64_t)v6) >> 5));
  long long v8 = (uint64_t *)a3[1];
  unint64_t v9 = 126 - 2 * __clz(0x86BCA1AF286BCA1BLL * (((uint64_t)v8 - *a3) >> 5));
  if (v8 == (uint64_t *)*a3) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v9;
  }
  sub_5E5E04(*a3, v8, (uint64_t)&v35, v10, 1);
  uint64_t v11 = __p;
  if (__p)
  {
    uint64_t v12 = (uint64_t)v24;
    uint64_t v13 = __p;
    if (v24 != __p)
    {
      do
      {
        v12 -= 608;
        sub_575D30((uint64_t)&v25, v12);
      }
      while ((void *)v12 != v11);
      uint64_t v13 = __p;
    }
    uint64_t v24 = v11;
    operator delete(v13);
  }
  int v14 = (char *)v26;
  if (v26)
  {
    uint64_t v15 = v27;
    uint64_t v16 = v26;
    if (v27 != v26)
    {
      do
      {
        v15 -= 608;
        sub_575D30((uint64_t)&v28, (uint64_t)v15);
      }
      while (v15 != v14);
      uint64_t v16 = v26;
    }
    char v27 = v14;
    operator delete(v16);
  }
  unint64_t v17 = (char *)v29;
  if (v29)
  {
    char v18 = v30;
    int64_t v19 = v29;
    if (v30 != v29)
    {
      do
      {
        v18 -= 608;
        sub_575D30((uint64_t)&v31, (uint64_t)v18);
      }
      while (v18 != v17);
      int64_t v19 = v29;
    }
    char v30 = v17;
    operator delete(v19);
  }
  uint64_t v20 = (uint64_t)v32;
  if (v32)
  {
    uint64_t v21 = (uint64_t)v33;
    uint64_t v22 = v32;
    if (v33 != v32)
    {
      do
      {
        v21 -= 608;
        sub_575D30((uint64_t)&v34, v21);
      }
      while (v21 != v20);
      uint64_t v22 = v32;
    }
    char v33 = (unsigned char *)v20;
    operator delete(v22);
  }
}

void sub_5D6DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  long long v8 = va_arg(va1, void *);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_5919CC((void **)va);
  sub_5919CC((void **)va1);
  sub_5919CC((void **)(v6 - 64));
  sub_5919CC(v5);
  _Unwind_Resume(a1);
}

void sub_5D6E28(_Unwind_Exception *a1)
{
  sub_5919CC((void **)(v2 - 64));
  sub_5919CC(v1);
  _Unwind_Resume(a1);
}

void sub_5D6E48(_Unwind_Exception *a1)
{
  sub_5919CC(v1);
  _Unwind_Resume(a1);
}

void sub_5D6E5C(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(unsigned char *)a1
    || *(unsigned char *)(a1 + 1)
    || *(unsigned char *)(a1 + 2)
    || *(unsigned char *)(a1 + 3)
    || *(unsigned char *)(a1 + 4)
    || *(unsigned char *)(a1 + 5)
    || *(unsigned char *)(a1 + 9)
    || *(unsigned char *)(a1 + 13))
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v6 = (uint64_t)(a2[134] - a2[133]) >> 5;
    uint64_t v7 = 0x2FC962FC962FC963 * v6 - 1;
    if (0x2FC962FC962FC963 * v6 != 1)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      uint64_t v11 = 584;
      while (1)
      {
        unint64_t v36 = v10;
        uint64_t v12 = a2[133];
        sub_5D4870((unsigned char *)a1, v10, (uint64_t)a2, (uint64_t)&v34);
        if (!v35) {
          goto LABEL_13;
        }
        if (v34 > 0x13) {
          unsigned int v13 = 0;
        }
        else {
          unsigned int v13 = dword_20E8688[v34];
        }
        sub_524BB4(v13, (uint64_t)v37);
        if (!v35)
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_2439078;
        }
        switch(v34)
        {
          case 0u:
          case 1u:
          case 2u:
            uint64_t v16 = (unint64_t *)(v12 + v11 - 560);
            unint64_t v17 = *(void *)(v12 + v11);
            goto LABEL_25;
          case 3u:
          case 4u:
          case 5u:
            uint64_t v16 = (unint64_t *)(v12 + v11 - 560);
            unint64_t v17 = *(void *)(v12 + v11 - 16);
            goto LABEL_25;
          case 6u:
          case 7u:
          case 8u:
          case 9u:
          case 0xAu:
          case 0xBu:
          case 0xCu:
          case 0xDu:
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x12u:
            uint64_t v15 = *(void *)(v12 + v11 - 560);
            break;
          case 0x13u:
            uint64_t v16 = (unint64_t *)(v12 + v11 - 560);
            unint64_t v17 = *(void *)(v12 + v11 - 8);
LABEL_25:
            unint64_t v18 = *v16;
            if (v18 >= v17) {
              uint64_t v15 = v17;
            }
            else {
              uint64_t v15 = v18;
            }
            break;
          default:
            uint64_t v15 = -1;
            break;
        }
        uint64_t v19 = sub_471074(a2, v9, 1, v15, 0, v14);
        v32[0] = &v34;
        v32[1] = a2;
        uint64_t v33 = v19 + v8;
        v32[2] = &v36;
        if (!v35)
        {
          long long v26 = __cxa_allocate_exception(8uLL);
          *long long v26 = &off_2439078;
        }
        sub_5D8E70((void *)a1, (void *)v34, a2, v15, 0, (uint64_t)v32, (uint64_t)v29);
        if (!v35)
        {
          char v27 = __cxa_allocate_exception(8uLL);
          *char v27 = &off_2439078;
        }
        switch(v34)
        {
          case 0u:
          case 1u:
          case 2u:
            int v20 = *(_DWORD *)(a1 + 56);
            int v28 = v20;
            unint64_t v21 = a3[1];
            if (v21 < a3[2]) {
              goto LABEL_32;
            }
            goto LABEL_34;
          case 3u:
          case 4u:
          case 5u:
          case 6u:
            int v20 = *(_DWORD *)(a1 + 60);
            int v28 = v20;
            unint64_t v21 = a3[1];
            if (v21 < a3[2]) {
              goto LABEL_32;
            }
            goto LABEL_34;
          case 7u:
          case 0x11u:
            int v20 = *(_DWORD *)(a1 + 72);
            int v28 = v20;
            unint64_t v21 = a3[1];
            if (v21 >= a3[2]) {
              goto LABEL_34;
            }
            goto LABEL_32;
          case 8u:
          case 0x12u:
            int v20 = *(_DWORD *)(a1 + 68);
            int v28 = v20;
            unint64_t v21 = a3[1];
            if (v21 >= a3[2]) {
              goto LABEL_34;
            }
            goto LABEL_32;
          case 9u:
          case 0xAu:
          case 0xBu:
            int v20 = *(_DWORD *)(a1 + 40);
            int v28 = v20;
            unint64_t v21 = a3[1];
            if (v21 >= a3[2]) {
              goto LABEL_34;
            }
            goto LABEL_32;
          case 0xCu:
            int v20 = *(_DWORD *)(a1 + 48);
            int v28 = v20;
            unint64_t v21 = a3[1];
            if (v21 >= a3[2]) {
              goto LABEL_34;
            }
            goto LABEL_32;
          case 0xDu:
            int v20 = *(_DWORD *)(a1 + 44);
            int v28 = v20;
            unint64_t v21 = a3[1];
            if (v21 >= a3[2]) {
              goto LABEL_34;
            }
            goto LABEL_32;
          case 0xEu:
            int v20 = *(_DWORD *)(a1 + 64);
            int v28 = v20;
            unint64_t v21 = a3[1];
            if (v21 >= a3[2]) {
              goto LABEL_34;
            }
            goto LABEL_32;
          case 0xFu:
            int v20 = *(_DWORD *)(a1 + 76);
            int v28 = v20;
            unint64_t v21 = a3[1];
            if (v21 >= a3[2]) {
              goto LABEL_34;
            }
            goto LABEL_32;
          case 0x10u:
            int v20 = *(_DWORD *)(a1 + 80);
            int v28 = v20;
            unint64_t v21 = a3[1];
            if (v21 >= a3[2]) {
              goto LABEL_34;
            }
            goto LABEL_32;
          case 0x13u:
            int v20 = *(_DWORD *)(a1 + 52);
            int v28 = v20;
            unint64_t v21 = a3[1];
            if (v21 < a3[2]) {
              goto LABEL_32;
            }
            goto LABEL_34;
          default:
            int v20 = -1;
            int v28 = -1;
            unint64_t v21 = a3[1];
            if (v21 < a3[2])
            {
LABEL_32:
              sub_5E1544(v21, v33, (uint64_t)v37, (uint64_t)v29, v20);
              uint64_t v22 = v21 + 608;
              a3[1] = v21 + 608;
            }
            else
            {
LABEL_34:
              uint64_t v22 = sub_5E12B4(a3, &v33, (uint64_t)v37, (uint64_t)v29, &v28);
            }
            a3[1] = v22;
            uint64_t v8 = v33;
            sub_4D4B58((uint64_t)&v31);
            sub_4D4B58((uint64_t)&v30);
            sub_4D4B58((uint64_t)v29);
            if (v45 < 0)
            {
              operator delete(v44);
              if ((v43 & 0x80000000) == 0)
              {
LABEL_37:
                int v23 = v41;
                if (v41 == 1) {
                  goto LABEL_43;
                }
                goto LABEL_38;
              }
            }
            else if ((v43 & 0x80000000) == 0)
            {
              goto LABEL_37;
            }
            operator delete(v42);
            int v23 = v41;
            if (v41 == 1)
            {
LABEL_43:
              uint64_t v24 = v38;
              if (v38)
              {
                std::string::size_type v39 = v38;
                goto LABEL_11;
              }
              goto LABEL_12;
            }
LABEL_38:
            if (!v23 && v40 < 0)
            {
              uint64_t v24 = v38;
LABEL_11:
              operator delete(v24);
            }
LABEL_12:
            uint64_t v9 = v15;
LABEL_13:
            ++v10;
            v11 += 2400;
            if (v7 == v10) {
              return;
            }
            break;
        }
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_5D7390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  *(void *)(v5 + 8) = v6;
  sub_5D0144((uint64_t)va);
  sub_4D9814(v7 - 208);
  sub_5919CC((void **)v5);
  _Unwind_Resume(a1);
}

void sub_5D73F4(_Unwind_Exception *a1)
{
  sub_4D9814(v2 - 208);
  sub_5919CC(v1);
  _Unwind_Resume(a1);
}

void sub_5D74B4(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  if (!*(unsigned char *)(a1 + 6))
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  char v52 = 0;
  long long v53 = 0;
  uint64_t v54 = 0;
  uint64_t v5 = a2[1490];
  uint64_t v6 = a2[1491];
  v44[0] = &v52;
  if (v5 == v6)
  {
    uint64_t v9 = 0;
    goto LABEL_65;
  }
  do
  {
    if (*(_DWORD *)(v5 + 16) == 3 && *(_DWORD *)(v5 + 40) == 0) {
      sub_5E15F4(v44, (_OWORD *)v5);
    }
    v5 += 48;
  }
  while (v5 != v6);
  uint64_t v9 = v53;
  if (v52 == v53)
  {
LABEL_65:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    if (!v9) {
      return;
    }
    goto LABEL_66;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  char v50 = 0;
  uint64_t v51 = 0;
  uint64_t v48 = 0;
  int v49 = 0;
  unint64_t v10 = sub_470ADC(a2);
  if (v10)
  {
    for (unint64_t i = 0; i != v10; ++i)
    {
      sub_29603C((void **)&v49, &v48);
      uint64_t v13 = sub_470F2C(a2, i, v12);
      v48 += v13;
    }
  }
  double v14 = v52;
  uint64_t v15 = v53;
  while (v14 != v15)
  {
    double v16 = *(double *)v14;
    if (*(double *)v14 <= 0.0) {
      unint64_t v17 = dword_10 + 2;
    }
    else {
      unint64_t v17 = dword_10 + 1;
    }
    if (*(double *)v14 <= 0.0) {
      unsigned int v18 = 17;
    }
    else {
      unsigned int v18 = 16;
    }
    sub_524BB4(v18, (uint64_t)v55);
    uint64_t v19 = (uint64_t *)(v14 + 24);
    if (v50 == v49)
    {
      unint64_t v21 = v49;
    }
    else
    {
      unint64_t v20 = (v50 - v49) >> 3;
      unint64_t v21 = v49;
      do
      {
        unint64_t v22 = v20 >> 1;
        int v23 = (uint64_t *)&v21[8 * (v20 >> 1)];
        uint64_t v25 = *v23;
        uint64_t v24 = v23 + 1;
        v20 += ~(v20 >> 1);
        if (*v19 < v25) {
          unint64_t v20 = v22;
        }
        else {
          unint64_t v21 = v24;
        }
      }
      while (v20);
    }
    uint64_t v26 = (v21 - v49 - 8) >> 3;
    v47[0] = (double *)a1;
    v47[1] = (double *)v14;
    uint64_t v27 = sub_470B40(a2, v26);
    int v28 = (uint64_t *)sub_5D0188(&v49, v26);
    uint64_t v30 = *(int **)(v27 + 8);
    uint64_t v31 = (unsigned __int16 *)((char *)v30 - *v30);
    double v32 = 0.0;
    if (*v31 >= 9u)
    {
      uint64_t v33 = v31[4];
      if (v33)
      {
        LODWORD(v29) = *(int *)((char *)v30 + v33);
        double v32 = (double)v29;
      }
    }
    uint64_t v34 = *v28;
    double v35 = v32 * ((double)sub_46CACC((uint64_t)a2, v26) / 1000000000.0);
    if (v35 >= 0.0)
    {
      if (v35 >= 4.50359963e15) {
        goto LABEL_44;
      }
      uint64_t v36 = (uint64_t)(v35 + v35) + 1;
    }
    else
    {
      if (v35 <= -4.50359963e15) {
        goto LABEL_44;
      }
      uint64_t v36 = (uint64_t)(v35 + v35);
      if (v36 >= 1) {
        --v36;
      }
    }
    double v35 = (double)(v36 >> 1);
LABEL_44:
    sub_5D9354((void *)a1, v17, a2, v26, *v19 - v34 + (uint64_t)v35, v47, (uint64_t)v44);
    uint64_t v37 = 68;
    if (v16 > 0.0) {
      uint64_t v37 = 72;
    }
    int v38 = *(_DWORD *)(a1 + v37);
    int v43 = v38;
    unint64_t v39 = a3[1];
    if (v39 >= a3[2])
    {
      uint64_t v40 = sub_5E12B4(a3, (uint64_t *)v14 + 3, (uint64_t)v55, (uint64_t)v44, &v43);
    }
    else
    {
      sub_5E1544(a3[1], *v19, (uint64_t)v55, (uint64_t)v44, v38);
      uint64_t v40 = v39 + 608;
      a3[1] = v39 + 608;
    }
    a3[1] = v40;
    sub_4D4B58((uint64_t)&v46);
    sub_4D4B58((uint64_t)&v45);
    sub_4D4B58((uint64_t)v44);
    if (v63 < 0)
    {
      operator delete(v62);
      if ((v61 & 0x80000000) == 0)
      {
LABEL_51:
        int v41 = v59;
        if (v59 != 1) {
          goto LABEL_52;
        }
        goto LABEL_57;
      }
    }
    else if ((v61 & 0x80000000) == 0)
    {
      goto LABEL_51;
    }
    operator delete(v60);
    int v41 = v59;
    if (v59 != 1)
    {
LABEL_52:
      if (v41 || (v58 & 0x80000000) == 0) {
        goto LABEL_18;
      }
      char v42 = v56;
      goto LABEL_17;
    }
LABEL_57:
    char v42 = v56;
    if (!v56) {
      goto LABEL_18;
    }
    long long v57 = v56;
LABEL_17:
    operator delete(v42);
LABEL_18:
    v14 += 48;
  }
  if (v49)
  {
    char v50 = v49;
    operator delete(v49);
  }
  uint64_t v9 = v52;
  if (v52)
  {
LABEL_66:
    long long v53 = v9;
    operator delete(v9);
  }
}

void sub_5D78AC(_Unwind_Exception *a1)
{
  uint64_t v4 = (void *)v2[3];
  if (v4)
  {
    v2[4] = v4;
    operator delete(v4);
  }
  sub_5919CC(v1);
  uint64_t v5 = (void *)v2[6];
  if (v5)
  {
    v2[7] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void sub_5D7918()
{
}

void sub_5D7920()
{
}

void sub_5D7928()
{
}

void sub_5D7930()
{
  if (!*(void *)(v0 + 48)) {
    JUMPOUT(0x5D7910);
  }
  JUMPOUT(0x5D7908);
}

unint64_t sub_5D7940@<X0>(unint64_t result@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  int v4 = *(unsigned __int8 *)(result + 12);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v4)
  {
    unint64_t v6 = result;
    uint64_t v31 = 0;
    result = sub_470ADC(a2);
    unint64_t v7 = result;
    if (result)
    {
      BOOL v8 = 0;
      unint64_t v9 = 0;
      while (1)
      {
        uint64_t v10 = sub_470B40(a2, v9);
        if (!v8) {
          break;
        }
        double v12 = *(int **)(v10 + 8);
        uint64_t v13 = (unsigned __int16 *)((char *)v12 - *v12);
        unsigned int v14 = *v13;
        if (*(unsigned char *)(v10 + 46))
        {
          if (v14 < 0x47) {
            goto LABEL_24;
          }
          unsigned int v15 = v13[35];
          if (!v15) {
            goto LABEL_24;
          }
          int v16 = 0x10000;
        }
        else
        {
          if (v14 < 0x47) {
            goto LABEL_24;
          }
          unsigned int v15 = v13[35];
          if (!v15) {
            goto LABEL_24;
          }
          int v16 = 0x8000;
        }
        BOOL v8 = (*(int *)((char *)v12 + v15) & v16) != 0;
LABEL_25:
        result = sub_470F2C(a2, v9, v11);
        v31 += result;
        if (v7 == ++v9) {
          return result;
        }
      }
      if (*(unsigned char *)(v6 + 12))
      {
        unint64_t v17 = *(int **)(v10 + 8);
        unsigned int v18 = (unsigned __int16 *)((char *)v17 - *v17);
        unsigned int v19 = *v18;
        if (*(unsigned char *)(v10 + 46))
        {
          if (v19 >= 0x47)
          {
            unsigned int v20 = v18[35];
            if (v20)
            {
              if ((*(int *)((char *)v17 + v20) & 0x10000) != 0) {
                goto LABEL_22;
              }
            }
          }
        }
        else if (v19 >= 0x47)
        {
          unsigned int v21 = v18[35];
          if (v21)
          {
            if ((*(int *)((char *)v17 + v21) & 0x8000) != 0)
            {
LABEL_22:
              sub_524BB4(6u, (uint64_t)v32);
              sub_5D99E8((void *)v6, (char *)&dword_C + 1, a2, v9, 0, (uint64_t)v28);
              int v22 = *(_DWORD *)(v6 + 44);
              int v27 = v22;
              unint64_t v23 = a3[1];
              if (v23 >= a3[2])
              {
                uint64_t v24 = sub_5E19F8(a3, &v31, (uint64_t)v32, (uint64_t)v28, &v27);
              }
              else
              {
                sub_5E1544(a3[1], v31, (uint64_t)v32, (uint64_t)v28, v22);
                uint64_t v24 = v23 + 608;
                a3[1] = v23 + 608;
              }
              a3[1] = v24;
              sub_4D4B58((uint64_t)&v30);
              sub_4D4B58((uint64_t)&v29);
              sub_4D4B58((uint64_t)v28);
              if (v40 < 0)
              {
                operator delete(v39);
                if (v38 < 0) {
                  goto LABEL_35;
                }
LABEL_30:
                int v25 = v36;
                if (v36 != 1) {
                  goto LABEL_31;
                }
LABEL_36:
                uint64_t v26 = v33;
                if (v33)
                {
                  uint64_t v34 = v33;
LABEL_38:
                  operator delete(v26);
                }
              }
              else
              {
                if ((v38 & 0x80000000) == 0) {
                  goto LABEL_30;
                }
LABEL_35:
                operator delete(v37);
                int v25 = v36;
                if (v36 == 1) {
                  goto LABEL_36;
                }
LABEL_31:
                if (!v25 && v35 < 0)
                {
                  uint64_t v26 = v33;
                  goto LABEL_38;
                }
              }
              BOOL v8 = 1;
              goto LABEL_25;
            }
          }
        }
      }
LABEL_24:
      BOOL v8 = 0;
      goto LABEL_25;
    }
  }
  return result;
}

void sub_5D7BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_5D0144((uint64_t)va);
  sub_4D9814(v4 - 200);
  sub_5919CC(v3);
  _Unwind_Resume(a1);
}

void sub_5D7C14(_Unwind_Exception *a1)
{
  sub_5919CC(v1);
  _Unwind_Resume(a1);
}

void sub_5D7C28(_Unwind_Exception *a1)
{
  sub_4D9814(v2 - 200);
  sub_5919CC(v1);
  _Unwind_Resume(a1);
}

void sub_5D7C44(_Unwind_Exception *a1)
{
  sub_5919CC(v1);
  _Unwind_Resume(a1);
}

void sub_5D7C58(_Unwind_Exception *a1)
{
  sub_5919CC(v1);
  _Unwind_Resume(a1);
}

void sub_5D7C6C(_Unwind_Exception *a1)
{
  sub_5919CC(v1);
  _Unwind_Resume(a1);
}

void sub_5D7C80(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v4 = *(unsigned __int8 *)(a1 + 15);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (!v4) {
    return;
  }
  uint64_t v38 = 0;
  sub_524BB4(0xAu, (uint64_t)v39);
  char v35 = 0;
  int v36 = 0;
  uint64_t v37 = 0;
  unint64_t v7 = *(unsigned char **)(a2 + 11664);
  BOOL v8 = *(unsigned char **)(a2 + 11672);
  int64_t v9 = v8 - v7;
  if (v8 != v7)
  {
    uint64_t v10 = v9 / 24;
    if ((unint64_t)(v9 / 24) >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    double v11 = (char *)operator new(v9);
    char v35 = v11;
    double v12 = &v11[24 * v10];
    uint64_t v37 = v12;
    memcpy(v11, v7, v9);
    int v36 = v12;
    if (v12 - 24 != v11)
    {
      uint64_t v13 = 24 * v10;
      uint64_t v14 = 24;
      do
      {
        if ((v11[v13 - 48] & 0x68) != 0 && (v11[v13 - 24] & 0x68) != 0)
        {
          unsigned int v15 = &v11[v13];
          *((void *)v15 - 4) = *(void *)&v11[v13 - 8] + *(void *)&v11[v13 - 32];
          *((void *)v15 - 2) = -1;
        }
        v11 -= 24;
        v14 += 24;
      }
      while (v13 != v14);
      double v11 = v35;
      double v12 = v36;
    }
    if (v11 != v12)
    {
      int v16 = v11;
      while (*((void *)v16 + 1) != -1)
      {
        v16 += 24;
        if (v16 == v12) {
          goto LABEL_25;
        }
      }
      if (v16 != v12)
      {
        unint64_t v17 = v16 + 24;
        if (v16 + 24 != v12)
        {
          do
          {
            if (*((void *)v17 + 1) != -1)
            {
              long long v18 = *(_OWORD *)v17;
              *((void *)v16 + 2) = *((void *)v17 + 2);
              *(_OWORD *)int v16 = v18;
              v16 += 24;
            }
            v17 += 24;
          }
          while (v17 != v12);
          double v11 = v35;
          double v12 = v36;
        }
      }
      if (v16 != v12) {
        double v12 = v16;
      }
LABEL_25:
      if (v11 != v12)
      {
        uint64_t v19 = 0x7FFFFFFFFFFFFFFELL;
        unsigned int v20 = v11;
        do
        {
          int v24 = *(_DWORD *)v20 & 0x68;
          if (v24) {
            BOOL v25 = v19 <= *(void *)(a1 + 32);
          }
          else {
            BOOL v25 = 1;
          }
          if (v25)
          {
            BOOL v21 = v19 < 0x7FFFFFFFFFFFFFFELL && v24 == 0;
            uint64_t v22 = *((void *)v20 + 2);
            if (v21) {
              uint64_t v23 = *((void *)v20 + 2);
            }
            else {
              uint64_t v23 = 0;
            }
            v19 += v23;
          }
          else
          {
            uint64_t v22 = *((void *)v20 + 2);
            if (v22 > *(void *)(a1 + 24))
            {
              memset(v34, 0, 160);
              memset(v33, 0, sizeof(v33));
              memset(v32, 0, sizeof(v32));
              sub_5F3B34((uint64_t)v32);
              sub_5F3B34((uint64_t)v33);
              sub_5F3B34((uint64_t)v34);
              int v26 = *(_DWORD *)(a1 + 80);
              int v31 = v26;
              unint64_t v27 = a3[1];
              if (v27 >= a3[2])
              {
                uint64_t v28 = sub_5E1C88(a3, &v38, (uint64_t)v39, (uint64_t)v32, &v31);
              }
              else
              {
                sub_5E1544(a3[1], v38, (uint64_t)v39, (uint64_t)v32, v26);
                uint64_t v28 = v27 + 608;
                a3[1] = v27 + 608;
              }
              a3[1] = v28;
              sub_4D4B58((uint64_t)v34);
              sub_4D4B58((uint64_t)v33);
              sub_4D4B58((uint64_t)v32);
              uint64_t v19 = 0;
              uint64_t v22 = *((void *)v20 + 2);
            }
          }
          v38 += v22;
          v20 += 24;
        }
        while (v20 != v12);
      }
      double v12 = v11;
    }
    if (v12)
    {
      int v36 = v12;
      operator delete(v12);
    }
  }
  if ((v47 & 0x80000000) == 0)
  {
    if ((v45 & 0x80000000) == 0) {
      goto LABEL_49;
    }
LABEL_54:
    operator delete(v44);
    int v29 = v43;
    if (v43 != 1) {
      goto LABEL_50;
    }
LABEL_55:
    uint64_t v30 = v40;
    if (!v40) {
      return;
    }
    int v41 = v40;
    goto LABEL_57;
  }
  operator delete(v46);
  if (v45 < 0) {
    goto LABEL_54;
  }
LABEL_49:
  int v29 = v43;
  if (v43 == 1) {
    goto LABEL_55;
  }
LABEL_50:
  if (!v29 && v42 < 0)
  {
    uint64_t v30 = v40;
LABEL_57:
    operator delete(v30);
  }
}

void sub_5D806C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  *(void *)(v3 + 8) = v5;
  sub_5D0144((uint64_t)va);
  if (v4)
  {
    *(void *)(v6 + 496) = v4;
    operator delete(v4);
  }
  sub_4D9814(v7 - 216);
  sub_5919CC((void **)v3);
  _Unwind_Resume(a1);
}

void sub_5D80F4()
{
  if (!v0) {
    JUMPOUT(0x5D80DCLL);
  }
  JUMPOUT(0x5D80D0);
}

double sub_5D8100(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = nullsub_1(a2);
  uint64_t v5 = *(void **)v3;
  uint64_t v6 = *(void **)(v3 + 8);
  if (*(void **)v3 != v6)
  {
    do
    {
      sub_5D6B50(a1, v5, (uint64_t *)&v14);
      uint64_t v8 = v5[1494];
      if (v8)
      {
        uint64_t v9 = v5[1495];
        uint64_t v7 = (void *)v5[1494];
        if (v9 != v8)
        {
          uint64_t v10 = v9 - 592;
          while (1)
          {
            sub_4D4B58(v10 + 432);
            sub_4D4B58(v10 + 272);
            sub_4D4B58(v10 + 112);
            if (*(char *)(v10 + 95) < 0)
            {
              operator delete(*(void **)(v10 + 72));
              if ((*(char *)(v10 + 63) & 0x80000000) == 0)
              {
LABEL_13:
                int v13 = *(_DWORD *)(v10 + 24);
                if (v13 != 1) {
                  goto LABEL_14;
                }
                goto LABEL_19;
              }
            }
            else if ((*(char *)(v10 + 63) & 0x80000000) == 0)
            {
              goto LABEL_13;
            }
            operator delete(*(void **)(v10 + 40));
            int v13 = *(_DWORD *)(v10 + 24);
            if (v13 != 1)
            {
LABEL_14:
              if (v13 || (*(char *)(v10 + 23) & 0x80000000) == 0) {
                goto LABEL_10;
              }
              double v11 = *(void **)v10;
              goto LABEL_9;
            }
LABEL_19:
            double v11 = *(void **)v10;
            if (!*(void *)v10) {
              goto LABEL_10;
            }
            *(void *)(v10 + 8) = v11;
LABEL_9:
            operator delete(v11);
LABEL_10:
            uint64_t v12 = v10 - 16;
            v10 -= 608;
            if (v12 == v8)
            {
              uint64_t v7 = (void *)v5[1494];
              break;
            }
          }
        }
        v5[1495] = v8;
        operator delete(v7);
      }
      double result = *(double *)&v14;
      *((_OWORD *)v5 + 747) = v14;
      v5[1496] = v15;
      v5 += 1541;
    }
    while (v5 != v6);
  }
  return result;
}

_DWORD *sub_5D8248(_DWORD *a1, void *a2)
{
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "cycling_dismount");
  *a1 = sub_5CF08C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "cycling_shared_with_pedestrians");
  a1[1] = sub_5CF08C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "cycling_remount");
  a1[2] = sub_5CF08C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 8;
  strcpy((char *)__p, "elevator");
  a1[3] = sub_5CF08C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 9;
  strcpy((char *)__p, "escalator");
  a1[4] = sub_5CF08C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 6;
  strcpy((char *)__p, "stairs");
  a1[5] = sub_5CF08C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 5;
  strcpy((char *)__p, "ferry");
  a1[6] = sub_5CF08C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "steep_downhill");
  a1[7] = sub_5CF08C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "steep_uphill");
  a1[8] = sub_5CF08C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 4;
  strcpy((char *)__p, "toll");
  a1[9] = sub_5CF08C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 9;
  strcpy((char *)__p, "bike_lane");
  a1[10] = sub_5CF08C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_5D8560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_5D85A4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "enable_elevator");
  BOOL v8 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v8;
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "enable_escalator");
  BOOL v9 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 1) = v9;
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "enable_stairs");
  BOOL v10 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 2) = v10;
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "enable_stairs_down");
  BOOL v11 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 3) = v11;
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "enable_stairs_up");
  BOOL v12 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 4) = v12;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "enable_stairs_bridge");
  BOOL v13 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 5) = v13;
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "enable_steep_hills");
  BOOL v14 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 6) = v14;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "enable_slope_display");
  if (sub_29D62C(a2, (uint64_t)__p))
  {
    char v15 = 1;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  char v15 = sub_375C30(a3);
  if (SHIBYTE(__p[2]) < 0) {
LABEL_17:
  }
    operator delete(__p[0]);
LABEL_18:
  *(unsigned char *)(a1 + 7) = v15;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9960;
  strcpy((char *)__p[0], "enable_simplified_cycling_feature_types");
  BOOL v16 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 8) = v16;
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "enable_cycling_dismount");
  BOOL v17 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 9) = v17;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9960;
  strcpy((char *)__p[0], "enable_cycling_dismount_against_traffic");
  BOOL v18 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 10) = v18;
  strcpy((char *)__p, "enable_cycling_remount");
  HIBYTE(__p[2]) = 22;
  BOOL v19 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 11) = v19;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20E12D0;
  strcpy((char *)__p[0], "enable_cycling_shared_with_pedestrians");
  BOOL v20 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 12) = v20;
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "enable_ferries");
  BOOL v21 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 13) = v21;
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "enable_tolls");
  BOOL v22 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 14) = v22;
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "enable_bike_lanes");
  BOOL v23 = sub_29D62C(a2, (uint64_t)__p);
  if (*(unsigned char *)(a4 + 1424)) {
    char v24 = 1;
  }
  else {
    char v24 = v23;
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 15) = v24;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "max_distance_to_cross_street_m");
  *(void *)(a1 + 16) = sub_5CDE0(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9390;
  strcpy((char *)__p[0], "min_bike_lane_observation_length");
  double v25 = sub_5C7E8(a2, (uint64_t)__p) * 100.0;
  if (v25 >= 0.0)
  {
    double v26 = v25;
    if (v25 >= 4.50359963e15) {
      goto LABEL_49;
    }
    uint64_t v27 = (uint64_t)(v25 + v25) + 1;
  }
  else
  {
    double v26 = v25;
    if (v25 <= -4.50359963e15) {
      goto LABEL_49;
    }
    uint64_t v27 = (uint64_t)(v25 + v25);
    if (v27 >= 1) {
      --v27;
    }
  }
  double v26 = (double)(v27 >> 1);
LABEL_49:
  if (v26 < 9.22337204e18)
  {
    if (v25 >= 0.0)
    {
      if (v25 >= 4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v28 = (uint64_t)(v25 + v25) + 1;
    }
    else
    {
      if (v25 <= -4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v28 = (uint64_t)(v25 + v25);
      if (v28 >= 1) {
        --v28;
      }
    }
    double v25 = (double)(v28 >> 1);
LABEL_60:
    *(void *)(a1 + 24) = (uint64_t)v25;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_61;
  }
  *(void *)(a1 + 24) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
    goto LABEL_62;
  }
LABEL_61:
  operator delete(__p[0]);
LABEL_62:
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9240;
  strcpy((char *)__p[0], "min_bike_lane_observations_gap_length");
  double v29 = sub_5C7E8(a2, (uint64_t)__p) * 100.0;
  if (v29 >= 0.0)
  {
    double v30 = v29;
    if (v29 >= 4.50359963e15) {
      goto LABEL_70;
    }
    uint64_t v31 = (uint64_t)(v29 + v29) + 1;
  }
  else
  {
    double v30 = v29;
    if (v29 <= -4.50359963e15) {
      goto LABEL_70;
    }
    uint64_t v31 = (uint64_t)(v29 + v29);
    if (v31 >= 1) {
      --v31;
    }
  }
  double v30 = (double)(v31 >> 1);
LABEL_70:
  if (v30 < 9.22337204e18)
  {
    if (v29 >= 0.0)
    {
      if (v29 >= 4.50359963e15) {
        goto LABEL_81;
      }
      uint64_t v32 = (uint64_t)(v29 + v29) + 1;
    }
    else
    {
      if (v29 <= -4.50359963e15) {
        goto LABEL_81;
      }
      uint64_t v32 = (uint64_t)(v29 + v29);
      if (v32 >= 1) {
        --v32;
      }
    }
    double v29 = (double)(v32 >> 1);
LABEL_81:
    *(void *)(a1 + 32) = (uint64_t)v29;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_83;
    }
    goto LABEL_82;
  }
  *(void *)(a1 + 32) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
    goto LABEL_83;
  }
LABEL_82:
  operator delete(__p[0]);
LABEL_83:
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "display_priority");
  uint64_t v33 = sub_5D58C(a2, (uint64_t)__p);
  if (*((_DWORD *)v33 + 2) != 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_23FDF58;
  }
  sub_5D8248((_DWORD *)(a1 + 40), (void *)*v33);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_5D8E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_5D8E70@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  sub_5F3B34((uint64_t)&v54);
  sub_5F3B34((uint64_t)&v69);
  sub_5F3B34((uint64_t)&v84);
  sub_5DB31C(a2, __p);
  unint64_t v14 = v53;
  if ((v53 & 0x80u) != 0) {
    unint64_t v14 = (unint64_t)__p[1];
  }
  if (v14)
  {
    char v15 = sub_8D7730(a1[13], (uint64_t)__p);
    sub_5F3D7C((uint64_t)v51, (uint64_t)v15, (__int16 *)(a1[11] + 1177));
    sub_4D90B4((uint64_t)&v54, (uint64_t)v51);
    sub_4D4B58((uint64_t)v51);
    sub_5D9E08(a1, (int)a2, a3, a4, a5, (uint64_t)v51);
    sub_4D90B4((uint64_t)&v69, (uint64_t)v51);
    sub_4D4B58((uint64_t)v51);
    if (*(unsigned char *)(*(void *)a6 + 4) && **(_DWORD **)a6 == 9)
    {
      uint64_t v16 = *(void *)(a6 + 8);
      uint64_t v17 = **(void **)(a6 + 16);
      uint64_t v18 = *(void *)(v16 + 1064);
      unint64_t v19 = 0x2FC962FC962FC963 * ((*(void *)(v16 + 1072) - v18) >> 5);
      BOOL v20 = v17 + 1 >= v19;
      if (v17 + 1 > v19) {
        unint64_t v21 = v17 + 1;
      }
      else {
        unint64_t v21 = v19;
      }
      uint64_t v22 = 0;
      if (!v20)
      {
        uint64_t v23 = v21 - v17 - 2;
        uint64_t v24 = v18 + 2400 * v17 + 2560;
        do
        {
          v22 += *(void *)(v24 + 712);
          if (*(unsigned char *)(v24 + 488) || !v23) {
            break;
          }
          int v25 = *(unsigned __int8 *)(v24 + 490);
          int v26 = *(_DWORD *)v24;
          --v23;
          v24 += 2400;
        }
        while (!v25 && v26 != 22);
      }
      v51[0] = v22;
      v99[0] = 1;
      sub_5F6090((uint64_t *)&v69, (uint64_t)&qword_25828F8, v51, v99);
    }
    *(_OWORD *)a7 = v54;
    uint64_t v28 = v57;
    *(void *)(a7 + 16) = v55;
    long long v54 = 0uLL;
    *(_OWORD *)(a7 + 24) = v56;
    *(void *)(a7 + 40) = v28;
    uint64_t v55 = 0;
    long long v56 = 0uLL;
    uint64_t v57 = 0;
    *(_OWORD *)(a7 + 48) = v58;
    uint64_t v29 = v61;
    *(void *)(a7 + 64) = v59;
    long long v58 = 0uLL;
    *(_OWORD *)(a7 + 72) = v60;
    uint64_t v59 = 0;
    long long v60 = 0uLL;
    uint64_t v61 = 0;
    uint64_t v30 = v62;
    *(void *)(a7 + 88) = v29;
    *(void *)(a7 + 96) = v30;
    LODWORD(v30) = v63;
    *(unsigned char *)(a7 + 108) = v64;
    *(_DWORD *)(a7 + 104) = v30;
    long long v31 = v65;
    uint64_t v32 = v68;
    *(void *)(a7 + 128) = v66;
    *(_OWORD *)(a7 + 112) = v31;
    uint64_t v62 = 0;
    long long v65 = 0uLL;
    long long v33 = v67;
    *(void *)(a7 + 152) = v32;
    *(_OWORD *)(a7 + 136) = v33;
    uint64_t v68 = 0;
    uint64_t v66 = 0;
    long long v67 = 0uLL;
    *(_OWORD *)(a7 + 160) = v69;
    uint64_t v34 = a7 + 160;
    uint64_t v35 = v72;
    *(void *)(v34 + 16) = v70;
    long long v69 = 0uLL;
    uint64_t v70 = 0;
    *(_OWORD *)(v34 + 24) = v71;
    *(void *)(v34 + 40) = v35;
    long long v71 = 0uLL;
    *(_OWORD *)(v34 + 48) = v73;
    *(void *)(v34 + 64) = v74;
    uint64_t v74 = 0;
    uint64_t v72 = 0;
    long long v73 = 0uLL;
    *(_OWORD *)(v34 + 72) = v75;
    long long v75 = 0uLL;
    uint64_t v36 = v77;
    *(void *)(v34 + 88) = v76;
    *(void *)(v34 + 96) = v36;
    LODWORD(v36) = v78;
    *(unsigned char *)(v34 + 108) = v79;
    *(_DWORD *)(v34 + 104) = v36;
    long long v37 = v80;
    uint64_t v38 = v83;
    *(void *)(v34 + 128) = v81;
    *(_OWORD *)(v34 + 112) = v37;
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    long long v80 = 0uLL;
    uint64_t v81 = 0;
    long long v39 = v82;
    *(void *)(v34 + 152) = v38;
    *(_OWORD *)(v34 + 136) = v39;
    long long v82 = 0uLL;
    uint64_t v83 = 0;
    *(_OWORD *)(v34 + 160) = v84;
    long long v84 = 0uLL;
    uint64_t v40 = v85;
    uint64_t v41 = v86;
    uint64_t v85 = 0;
    *(void *)(v34 + 176) = v40;
    *(void *)(v34 + 184) = v41;
    long long v42 = v87;
    long long v43 = v88;
    uint64_t v86 = 0;
    *(void *)&long long v87 = 0;
    *(_OWORD *)(v34 + 192) = v42;
    *(_OWORD *)(v34 + 208) = v43;
    *((void *)&v87 + 1) = 0;
    long long v88 = 0uLL;
    uint64_t v44 = v89;
    uint64_t v45 = v90;
    uint64_t v89 = 0;
    *(void *)(v34 + 224) = v44;
    *(void *)(v34 + 232) = v45;
    *(_OWORD *)(v34 + 240) = v91;
    uint64_t v90 = 0;
    long long v91 = 0uLL;
    uint64_t v46 = v92;
    uint64_t v92 = 0;
    *(void *)(v34 + 256) = v46;
    LODWORD(v46) = v93;
    *(unsigned char *)(v34 + 268) = v94;
    *(_DWORD *)(v34 + 264) = v46;
    long long v47 = v95;
    uint64_t v48 = v98;
    *(void *)(v34 + 288) = v96;
    *(_OWORD *)(v34 + 272) = v47;
    long long v95 = 0uLL;
    long long v49 = v97;
    *(void *)(v34 + 312) = v48;
    *(_OWORD *)(v34 + 296) = v49;
    long long v97 = 0uLL;
    uint64_t v96 = 0;
    uint64_t v98 = 0;
  }
  else
  {
    *(_OWORD *)(a7 + 448) = 0u;
    *(_OWORD *)(a7 + 464) = 0u;
    *(_OWORD *)(a7 + 416) = 0u;
    *(_OWORD *)(a7 + 432) = 0u;
    *(_OWORD *)(a7 + 384) = 0u;
    *(_OWORD *)(a7 + 400) = 0u;
    *(_OWORD *)(a7 + 352) = 0u;
    *(_OWORD *)(a7 + 368) = 0u;
    *(_OWORD *)(a7 + 320) = 0u;
    *(_OWORD *)(a7 + 336) = 0u;
    *(_OWORD *)(a7 + 288) = 0u;
    *(_OWORD *)(a7 + 304) = 0u;
    *(_OWORD *)(a7 + 256) = 0u;
    *(_OWORD *)(a7 + 272) = 0u;
    *(_OWORD *)(a7 + 224) = 0u;
    *(_OWORD *)(a7 + 240) = 0u;
    *(_OWORD *)(a7 + 192) = 0u;
    *(_OWORD *)(a7 + 208) = 0u;
    *(_OWORD *)(a7 + 160) = 0u;
    *(_OWORD *)(a7 + 176) = 0u;
    *(_OWORD *)(a7 + 128) = 0u;
    *(_OWORD *)(a7 + 144) = 0u;
    *(_OWORD *)(a7 + 96) = 0u;
    *(_OWORD *)(a7 + 112) = 0u;
    *(_OWORD *)(a7 + 64) = 0u;
    *(_OWORD *)(a7 + 80) = 0u;
    *(_OWORD *)(a7 + 32) = 0u;
    *(_OWORD *)(a7 + 48) = 0u;
    *(_OWORD *)a7 = 0u;
    *(_OWORD *)(a7 + 16) = 0u;
    sub_5F3B34(a7);
    sub_5F3B34(a7 + 160);
    sub_5F3B34(a7 + 320);
  }
  if ((char)v53 < 0) {
    operator delete(__p[0]);
  }
  sub_4D4B58((uint64_t)&v84);
  sub_4D4B58((uint64_t)&v69);
  return sub_4D4B58((uint64_t)&v54);
}

void sub_5D92C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  sub_4D4B58(v37);
  sub_4D4B58(v36);
  if (a35 < 0)
  {
    operator delete(__p);
    sub_5D0144((uint64_t)&a36);
    _Unwind_Resume(a1);
  }
  sub_5D0144((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_5D9324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_4D4B58(v33);
  sub_4D4B58((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_5D9340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

uint64_t sub_5D9354@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, double **a6@<X5>, uint64_t a7@<X8>)
{
  sub_5F3B34((uint64_t)&v42);
  sub_5F3B34((uint64_t)&v57);
  sub_5F3B34((uint64_t)&v72);
  sub_5DB31C(a2, __p);
  unint64_t v14 = v41;
  if ((v41 & 0x80u) != 0) {
    unint64_t v14 = (unint64_t)__p[1];
  }
  if (v14)
  {
    char v15 = sub_8D7730(a1[13], (uint64_t)__p);
    sub_5F3D7C((uint64_t)v39, (uint64_t)v15, (__int16 *)(a1[11] + 1177));
    sub_4D90B4((uint64_t)&v42, (uint64_t)v39);
    sub_4D4B58((uint64_t)v39);
    sub_5D9E08(a1, (int)a2, a3, a4, a5, (uint64_t)v39);
    sub_4D90B4((uint64_t)&v57, (uint64_t)v39);
    sub_4D4B58((uint64_t)v39);
    sub_5E97A8(a6, (uint64_t)&v42);
    *(_OWORD *)a7 = v42;
    uint64_t v16 = v45;
    *(void *)(a7 + 16) = v43;
    long long v42 = 0uLL;
    *(_OWORD *)(a7 + 24) = v44;
    *(void *)(a7 + 40) = v16;
    uint64_t v43 = 0;
    long long v44 = 0uLL;
    uint64_t v45 = 0;
    *(_OWORD *)(a7 + 48) = v46;
    uint64_t v17 = v49;
    *(void *)(a7 + 64) = v47;
    long long v46 = 0uLL;
    *(_OWORD *)(a7 + 72) = v48;
    uint64_t v47 = 0;
    long long v48 = 0uLL;
    uint64_t v49 = 0;
    uint64_t v18 = v50;
    *(void *)(a7 + 88) = v17;
    *(void *)(a7 + 96) = v18;
    LODWORD(v18) = v51;
    *(unsigned char *)(a7 + 108) = v52;
    *(_DWORD *)(a7 + 104) = v18;
    long long v19 = v53;
    uint64_t v20 = v56;
    *(void *)(a7 + 128) = v54;
    *(_OWORD *)(a7 + 112) = v19;
    uint64_t v50 = 0;
    long long v53 = 0uLL;
    long long v21 = v55;
    *(void *)(a7 + 152) = v20;
    *(_OWORD *)(a7 + 136) = v21;
    uint64_t v56 = 0;
    uint64_t v54 = 0;
    long long v55 = 0uLL;
    *(_OWORD *)(a7 + 160) = v57;
    uint64_t v22 = a7 + 160;
    uint64_t v23 = v60;
    *(void *)(v22 + 16) = v58;
    long long v57 = 0uLL;
    uint64_t v58 = 0;
    *(_OWORD *)(v22 + 24) = v59;
    *(void *)(v22 + 40) = v23;
    long long v59 = 0uLL;
    *(_OWORD *)(v22 + 48) = v61;
    *(void *)(v22 + 64) = v62;
    uint64_t v62 = 0;
    uint64_t v60 = 0;
    long long v61 = 0uLL;
    *(_OWORD *)(v22 + 72) = v63;
    long long v63 = 0uLL;
    uint64_t v24 = v65;
    *(void *)(v22 + 88) = v64;
    *(void *)(v22 + 96) = v24;
    LODWORD(v24) = v66;
    *(unsigned char *)(v22 + 108) = v67;
    *(_DWORD *)(v22 + 104) = v24;
    long long v25 = v68;
    uint64_t v26 = v71;
    *(void *)(v22 + 128) = v69;
    *(_OWORD *)(v22 + 112) = v25;
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    long long v68 = 0uLL;
    uint64_t v69 = 0;
    long long v27 = v70;
    *(void *)(v22 + 152) = v26;
    *(_OWORD *)(v22 + 136) = v27;
    long long v70 = 0uLL;
    uint64_t v71 = 0;
    *(_OWORD *)(v22 + 160) = v72;
    long long v72 = 0uLL;
    uint64_t v28 = v73;
    uint64_t v29 = v74;
    uint64_t v73 = 0;
    *(void *)(v22 + 176) = v28;
    *(void *)(v22 + 184) = v29;
    long long v30 = v75;
    long long v31 = v76;
    uint64_t v74 = 0;
    *(void *)&long long v75 = 0;
    *(_OWORD *)(v22 + 192) = v30;
    *(_OWORD *)(v22 + 208) = v31;
    *((void *)&v75 + 1) = 0;
    long long v76 = 0uLL;
    uint64_t v32 = v77;
    uint64_t v33 = v78;
    uint64_t v77 = 0;
    *(void *)(v22 + 224) = v32;
    *(void *)(v22 + 232) = v33;
    *(_OWORD *)(v22 + 240) = v79;
    uint64_t v78 = 0;
    long long v79 = 0uLL;
    uint64_t v34 = v80;
    uint64_t v80 = 0;
    *(void *)(v22 + 256) = v34;
    LODWORD(v34) = v81;
    *(unsigned char *)(v22 + 268) = v82;
    *(_DWORD *)(v22 + 264) = v34;
    long long v35 = v83;
    uint64_t v36 = v86;
    *(void *)(v22 + 288) = v84;
    *(_OWORD *)(v22 + 272) = v35;
    long long v83 = 0uLL;
    long long v37 = v85;
    *(void *)(v22 + 312) = v36;
    *(_OWORD *)(v22 + 296) = v37;
    long long v85 = 0uLL;
    uint64_t v84 = 0;
    uint64_t v86 = 0;
  }
  else
  {
    *(_OWORD *)(a7 + 448) = 0u;
    *(_OWORD *)(a7 + 464) = 0u;
    *(_OWORD *)(a7 + 416) = 0u;
    *(_OWORD *)(a7 + 432) = 0u;
    *(_OWORD *)(a7 + 384) = 0u;
    *(_OWORD *)(a7 + 400) = 0u;
    *(_OWORD *)(a7 + 352) = 0u;
    *(_OWORD *)(a7 + 368) = 0u;
    *(_OWORD *)(a7 + 320) = 0u;
    *(_OWORD *)(a7 + 336) = 0u;
    *(_OWORD *)(a7 + 288) = 0u;
    *(_OWORD *)(a7 + 304) = 0u;
    *(_OWORD *)(a7 + 256) = 0u;
    *(_OWORD *)(a7 + 272) = 0u;
    *(_OWORD *)(a7 + 224) = 0u;
    *(_OWORD *)(a7 + 240) = 0u;
    *(_OWORD *)(a7 + 192) = 0u;
    *(_OWORD *)(a7 + 208) = 0u;
    *(_OWORD *)(a7 + 160) = 0u;
    *(_OWORD *)(a7 + 176) = 0u;
    *(_OWORD *)(a7 + 128) = 0u;
    *(_OWORD *)(a7 + 144) = 0u;
    *(_OWORD *)(a7 + 96) = 0u;
    *(_OWORD *)(a7 + 112) = 0u;
    *(_OWORD *)(a7 + 64) = 0u;
    *(_OWORD *)(a7 + 80) = 0u;
    *(_OWORD *)(a7 + 32) = 0u;
    *(_OWORD *)(a7 + 48) = 0u;
    *(_OWORD *)a7 = 0u;
    *(_OWORD *)(a7 + 16) = 0u;
    sub_5F3B34(a7);
    sub_5F3B34(a7 + 160);
    sub_5F3B34(a7 + 320);
  }
  if ((char)v41 < 0) {
    operator delete(__p[0]);
  }
  sub_4D4B58((uint64_t)&v72);
  sub_4D4B58((uint64_t)&v57);
  return sub_4D4B58((uint64_t)&v42);
}

void sub_5D96F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  sub_4D4B58(v37);
  sub_4D4B58(v36);
  if (a35 < 0) {
    operator delete(__p);
  }
  sub_5D0144((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_5D9784(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *(void *)(a2 + 11608);
  uint64_t v5 = *(void *)(a2 + 11616);
  if (v4 != v5)
  {
    for (uint64_t i = v4 + 136; i - 136 != v5; i += 168)
    {
      if (!*(unsigned char *)(i - 8)) {
        continue;
      }
      uint64_t v17 = *(void *)(i - 104);
      sub_524C68(i, (uint64_t)v18);
      memset(v16, 0, sizeof(v16));
      memset(v15, 0, sizeof(v15));
      memset(v14, 0, sizeof(v14));
      sub_5F3B34((uint64_t)v14);
      sub_5F3B34((uint64_t)v15);
      sub_5F3B34((uint64_t)v16);
      int v9 = *(_DWORD *)(a1 + 76);
      int v13 = v9;
      unint64_t v10 = a3[1];
      if (v10 >= a3[2])
      {
        uint64_t v11 = sub_5E1F18(a3, &v17, (uint64_t)v18, (uint64_t)v14, &v13);
      }
      else
      {
        sub_5E1544(a3[1], v17, (uint64_t)v18, (uint64_t)v14, v9);
        uint64_t v11 = v10 + 608;
        a3[1] = v10 + 608;
      }
      a3[1] = v11;
      sub_4D4B58((uint64_t)v16);
      sub_4D4B58((uint64_t)v15);
      sub_4D4B58((uint64_t)v14);
      if (v26 < 0)
      {
        operator delete(v25);
        if ((v24 & 0x80000000) == 0)
        {
LABEL_13:
          int v12 = v22;
          if (v22 != 1) {
            goto LABEL_17;
          }
          goto LABEL_3;
        }
      }
      else if ((v24 & 0x80000000) == 0)
      {
        goto LABEL_13;
      }
      operator delete(v23);
      int v12 = v22;
      if (v22 != 1)
      {
LABEL_17:
        if (v12 || (v21 & 0x80000000) == 0) {
          continue;
        }
        BOOL v8 = v19;
        goto LABEL_5;
      }
LABEL_3:
      BOOL v8 = v19;
      if (v19)
      {
        uint64_t v20 = v19;
LABEL_5:
        operator delete(v8);
      }
    }
  }
}

void sub_5D997C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_5D0144((uint64_t)va);
  sub_4D9814(v4 - 200);
  sub_5919CC(v3);
  _Unwind_Resume(a1);
}

void sub_5D99D4(_Unwind_Exception *a1)
{
  sub_5919CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_5D99E8@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  sub_5F3B34((uint64_t)&v40);
  sub_5F3B34((uint64_t)&v55);
  sub_5F3B34((uint64_t)&v70);
  sub_5DB31C(a2, __p);
  unint64_t v12 = v39;
  if ((v39 & 0x80u) != 0) {
    unint64_t v12 = (unint64_t)__p[1];
  }
  if (v12)
  {
    int v13 = sub_8D7730(a1[13], (uint64_t)__p);
    sub_5F3D7C((uint64_t)v37, (uint64_t)v13, (__int16 *)(a1[11] + 1177));
    sub_4D90B4((uint64_t)&v40, (uint64_t)v37);
    sub_4D4B58((uint64_t)v37);
    sub_5D9E08(a1, (int)a2, a3, a4, a5, (uint64_t)v37);
    sub_4D90B4((uint64_t)&v55, (uint64_t)v37);
    sub_4D4B58((uint64_t)v37);
    *(_OWORD *)a6 = v40;
    uint64_t v14 = v43;
    *(void *)(a6 + 16) = v41;
    long long v40 = 0uLL;
    *(_OWORD *)(a6 + 24) = v42;
    *(void *)(a6 + 40) = v14;
    uint64_t v41 = 0;
    long long v42 = 0uLL;
    uint64_t v43 = 0;
    *(_OWORD *)(a6 + 48) = v44;
    uint64_t v15 = v47;
    *(void *)(a6 + 64) = v45;
    long long v44 = 0uLL;
    *(_OWORD *)(a6 + 72) = v46;
    uint64_t v45 = 0;
    long long v46 = 0uLL;
    uint64_t v47 = 0;
    uint64_t v16 = v48;
    *(void *)(a6 + 88) = v15;
    *(void *)(a6 + 96) = v16;
    LODWORD(v16) = v49;
    *(unsigned char *)(a6 + 108) = v50;
    *(_DWORD *)(a6 + 104) = v16;
    long long v17 = v51;
    uint64_t v18 = v54;
    *(void *)(a6 + 128) = v52;
    *(_OWORD *)(a6 + 112) = v17;
    uint64_t v48 = 0;
    long long v51 = 0uLL;
    long long v19 = v53;
    *(void *)(a6 + 152) = v18;
    *(_OWORD *)(a6 + 136) = v19;
    uint64_t v54 = 0;
    uint64_t v52 = 0;
    long long v53 = 0uLL;
    *(_OWORD *)(a6 + 160) = v55;
    uint64_t v20 = a6 + 160;
    uint64_t v21 = v58;
    *(void *)(v20 + 16) = v56;
    long long v55 = 0uLL;
    uint64_t v56 = 0;
    *(_OWORD *)(v20 + 24) = v57;
    *(void *)(v20 + 40) = v21;
    long long v57 = 0uLL;
    *(_OWORD *)(v20 + 48) = v59;
    *(void *)(v20 + 64) = v60;
    uint64_t v60 = 0;
    uint64_t v58 = 0;
    long long v59 = 0uLL;
    *(_OWORD *)(v20 + 72) = v61;
    long long v61 = 0uLL;
    uint64_t v22 = v63;
    *(void *)(v20 + 88) = v62;
    *(void *)(v20 + 96) = v22;
    LODWORD(v22) = v64;
    *(unsigned char *)(v20 + 108) = v65;
    *(_DWORD *)(v20 + 104) = v22;
    long long v23 = v66;
    uint64_t v24 = v69;
    *(void *)(v20 + 128) = v67;
    *(_OWORD *)(v20 + 112) = v23;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    long long v66 = 0uLL;
    uint64_t v67 = 0;
    long long v25 = v68;
    *(void *)(v20 + 152) = v24;
    *(_OWORD *)(v20 + 136) = v25;
    long long v68 = 0uLL;
    uint64_t v69 = 0;
    *(_OWORD *)(v20 + 160) = v70;
    long long v70 = 0uLL;
    uint64_t v26 = v71;
    uint64_t v27 = v72;
    uint64_t v71 = 0;
    *(void *)(v20 + 176) = v26;
    *(void *)(v20 + 184) = v27;
    long long v28 = v73;
    long long v29 = v74;
    uint64_t v72 = 0;
    *(void *)&long long v73 = 0;
    *(_OWORD *)(v20 + 192) = v28;
    *(_OWORD *)(v20 + 208) = v29;
    *((void *)&v73 + 1) = 0;
    long long v74 = 0uLL;
    uint64_t v30 = v75;
    uint64_t v31 = v76;
    uint64_t v75 = 0;
    *(void *)(v20 + 224) = v30;
    *(void *)(v20 + 232) = v31;
    *(_OWORD *)(v20 + 240) = v77;
    uint64_t v76 = 0;
    long long v77 = 0uLL;
    uint64_t v32 = v78;
    uint64_t v78 = 0;
    *(void *)(v20 + 256) = v32;
    LODWORD(v32) = v79;
    *(unsigned char *)(v20 + 268) = v80;
    *(_DWORD *)(v20 + 264) = v32;
    long long v33 = v81;
    uint64_t v34 = v84;
    *(void *)(v20 + 288) = v82;
    *(_OWORD *)(v20 + 272) = v33;
    long long v81 = 0uLL;
    long long v35 = v83;
    *(void *)(v20 + 312) = v34;
    *(_OWORD *)(v20 + 296) = v35;
    long long v83 = 0uLL;
    uint64_t v82 = 0;
    uint64_t v84 = 0;
  }
  else
  {
    *(_OWORD *)(a6 + 448) = 0u;
    *(_OWORD *)(a6 + 464) = 0u;
    *(_OWORD *)(a6 + 416) = 0u;
    *(_OWORD *)(a6 + 432) = 0u;
    *(_OWORD *)(a6 + 384) = 0u;
    *(_OWORD *)(a6 + 400) = 0u;
    *(_OWORD *)(a6 + 352) = 0u;
    *(_OWORD *)(a6 + 368) = 0u;
    *(_OWORD *)(a6 + 320) = 0u;
    *(_OWORD *)(a6 + 336) = 0u;
    *(_OWORD *)(a6 + 288) = 0u;
    *(_OWORD *)(a6 + 304) = 0u;
    *(_OWORD *)(a6 + 256) = 0u;
    *(_OWORD *)(a6 + 272) = 0u;
    *(_OWORD *)(a6 + 224) = 0u;
    *(_OWORD *)(a6 + 240) = 0u;
    *(_OWORD *)(a6 + 192) = 0u;
    *(_OWORD *)(a6 + 208) = 0u;
    *(_OWORD *)(a6 + 160) = 0u;
    *(_OWORD *)(a6 + 176) = 0u;
    *(_OWORD *)(a6 + 128) = 0u;
    *(_OWORD *)(a6 + 144) = 0u;
    *(_OWORD *)(a6 + 96) = 0u;
    *(_OWORD *)(a6 + 112) = 0u;
    *(_OWORD *)(a6 + 64) = 0u;
    *(_OWORD *)(a6 + 80) = 0u;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    sub_5F3B34(a6);
    sub_5F3B34(a6 + 160);
    sub_5F3B34(a6 + 320);
  }
  if ((char)v39 < 0) {
    operator delete(__p[0]);
  }
  sub_4D4B58((uint64_t)&v70);
  sub_4D4B58((uint64_t)&v55);
  return sub_4D4B58((uint64_t)&v40);
}

void sub_5D9D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  sub_4D4B58(v37);
  sub_4D4B58(v36);
  if (a35 < 0)
  {
    operator delete(__p);
    sub_5D0144((uint64_t)&a36);
    _Unwind_Resume(a1);
  }
  sub_5D0144((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_5D9DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_4D4B58(v33);
  sub_4D4B58((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_5D9DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_5D9E08(void *a1@<X0>, int a2@<W1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v12 = (unsigned int *)sub_470B40(a3, a4);
  sub_5DAA64((((unint64_t)(v12[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v12[1] << 32) | *v12) ^ 0x1000000000000, a1[12], a1[11] + 968, (uint64_t)v60);
  if (a2 == 14) {
    sub_6F30A4((uint64_t)v50);
  }
  else {
    sub_5DA358(a1, (uint64_t)v12, a5, (char *)v50);
  }
  BOOL v13 = sub_6F2FD8((uint64_t)v60);
  BOOL v14 = sub_6F2FD8((uint64_t)v50);
  sub_5DA5CC(a2, a3, a4, v13, v14, &__p);
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    sub_5F3B34(a6);
    goto LABEL_75;
  }
  uint64_t v16 = sub_8D7730(a1[13], (uint64_t)&__p);
  if (*((char *)v16 + 23) < 0)
  {
    sub_4200(&__dst, (void *)*v16, v16[1]);
  }
  else
  {
    long long v17 = *(_OWORD *)v16;
    __dst.__r_.__value_.__r.__words[2] = v16[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v17;
  }
  if (sub_6F2FD8((uint64_t)v60))
  {
    memset(&v47, 0, sizeof(v47));
    uint64_t v18 = &xmmword_2582BC8;
    if (a2 != 14) {
      uint64_t v18 = (long long *)&dword_2582B68;
    }
    if (a2 == 19) {
      long long v19 = (const std::string *)&xmmword_2582B98;
    }
    else {
      long long v19 = (const std::string *)v18;
    }
    std::string::operator=(&v47, v19);
    int64_t v20 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    char v22 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v23 = &v47;
    }
    else {
      long long v23 = (std::string *)v47.__r_.__value_.__r.__words[0];
    }
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t v24 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    }
    else {
      int64_t v24 = v47.__r_.__value_.__l.__size_;
    }
    if (v24)
    {
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int64_t v20 = __dst.__r_.__value_.__l.__size_;
      }
      if (v20 >= v24)
      {
        long long v25 = (char *)p_dst + v20;
        int v26 = v23->__r_.__value_.__s.__data_[0];
        uint64_t v27 = p_dst;
        do
        {
          int64_t v28 = v20 - v24;
          if (v28 == -1) {
            break;
          }
          long long v29 = (char *)memchr(v27, v26, v28 + 1);
          if (!v29) {
            break;
          }
          uint64_t v30 = v29;
          if (!memcmp(v29, v23, v24))
          {
            if (v30 != v25)
            {
              std::string::size_type v31 = v30 - (char *)p_dst;
              if (v30 - (char *)p_dst != -1) {
                goto LABEL_37;
              }
            }
            break;
          }
          uint64_t v27 = (std::string *)(v30 + 1);
          int64_t v20 = v25 - (v30 + 1);
        }
        while (v20 >= v24);
      }
    }
    else
    {
      std::string::size_type v31 = 0;
LABEL_37:
      if ((v61 & 0x80u) == 0) {
        uint64_t v32 = v60;
      }
      else {
        uint64_t v32 = (void **)v60[0];
      }
      if ((v61 & 0x80u) == 0) {
        std::string::size_type v33 = v61;
      }
      else {
        std::string::size_type v33 = (std::string::size_type)v60[1];
      }
      std::string::replace(&__dst, v31, v24, (const std::string::value_type *)v32, v33);
      char v22 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    }
    if (v22 < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
  }
  if (sub_6F2FD8((uint64_t)v50))
  {
    int64_t v34 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v35 = &__dst;
    }
    else {
      long long v35 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if (byte_2582B97 >= 0) {
      uint64_t v36 = &xmmword_2582B80;
    }
    else {
      uint64_t v36 = (long long *)xmmword_2582B80;
    }
    if (byte_2582B97 >= 0) {
      int64_t v37 = byte_2582B97;
    }
    else {
      int64_t v37 = *((void *)&xmmword_2582B80 + 1);
    }
    if (v37)
    {
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int64_t v34 = __dst.__r_.__value_.__l.__size_;
      }
      if (v34 >= v37)
      {
        uint64_t v38 = (char *)v35 + v34;
        int v39 = *(char *)v36;
        long long v40 = v35;
        do
        {
          int64_t v41 = v34 - v37;
          if (v41 == -1) {
            break;
          }
          long long v42 = (char *)memchr(v40, v39, v41 + 1);
          if (!v42) {
            break;
          }
          uint64_t v43 = v42;
          if (!memcmp(v42, v36, v37))
          {
            if (v43 != v38)
            {
              std::string::size_type v44 = v43 - (char *)v35;
              if (v43 - (char *)v35 != -1) {
                goto LABEL_67;
              }
            }
            break;
          }
          long long v40 = (std::string *)(v43 + 1);
          int64_t v34 = v38 - (v43 + 1);
        }
        while (v34 >= v37);
      }
    }
    else
    {
      std::string::size_type v44 = 0;
LABEL_67:
      if ((v51 & 0x80u) == 0) {
        uint64_t v45 = v50;
      }
      else {
        uint64_t v45 = (void **)v50[0];
      }
      if ((v51 & 0x80u) == 0) {
        std::string::size_type v46 = v51;
      }
      else {
        std::string::size_type v46 = (std::string::size_type)v50[1];
      }
      std::string::replace(&__dst, v44, v37, (const std::string::value_type *)v45, v46);
    }
  }
  sub_5F3D7C(a6, (uint64_t)&__dst, (__int16 *)(a1[11] + 1177));
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_75:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_76;
    }
    goto LABEL_88;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_76:
    if ((v59 & 0x80000000) == 0) {
      goto LABEL_77;
    }
    goto LABEL_89;
  }
LABEL_88:
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((v59 & 0x80000000) == 0)
  {
LABEL_77:
    if ((v57 & 0x80000000) == 0) {
      goto LABEL_78;
    }
    goto LABEL_90;
  }
LABEL_89:
  operator delete(v58);
  if ((v57 & 0x80000000) == 0)
  {
LABEL_78:
    if ((v55 & 0x80000000) == 0) {
      goto LABEL_79;
    }
    goto LABEL_91;
  }
LABEL_90:
  operator delete(v56);
  if ((v55 & 0x80000000) == 0)
  {
LABEL_79:
    if ((v53 & 0x80000000) == 0) {
      goto LABEL_80;
    }
    goto LABEL_92;
  }
LABEL_91:
  operator delete(v54);
  if ((v53 & 0x80000000) == 0)
  {
LABEL_80:
    if (((char)v51 & 0x80000000) == 0) {
      goto LABEL_81;
    }
    goto LABEL_93;
  }
LABEL_92:
  operator delete(v52);
  if (((char)v51 & 0x80000000) == 0)
  {
LABEL_81:
    if ((v69 & 0x80000000) == 0) {
      goto LABEL_82;
    }
    goto LABEL_94;
  }
LABEL_93:
  operator delete(v50[0]);
  if ((v69 & 0x80000000) == 0)
  {
LABEL_82:
    if ((v67 & 0x80000000) == 0) {
      goto LABEL_83;
    }
    goto LABEL_95;
  }
LABEL_94:
  operator delete(v68);
  if ((v67 & 0x80000000) == 0)
  {
LABEL_83:
    if ((v65 & 0x80000000) == 0) {
      goto LABEL_84;
    }
    goto LABEL_96;
  }
LABEL_95:
  operator delete(v66);
  if ((v65 & 0x80000000) == 0)
  {
LABEL_84:
    if ((v63 & 0x80000000) == 0) {
      goto LABEL_85;
    }
    goto LABEL_97;
  }
LABEL_96:
  operator delete(v64);
  if ((v63 & 0x80000000) == 0)
  {
LABEL_85:
    if (((char)v61 & 0x80000000) == 0) {
      return;
    }
LABEL_98:
    operator delete(v60[0]);
    return;
  }
LABEL_97:
  operator delete(v62);
  if ((char)v61 < 0) {
    goto LABEL_98;
  }
}

void sub_5DA2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  if (a27 < 0)
  {
    operator delete(__p);
    sub_4A50F4((uint64_t)&a28);
    sub_4A50F4((uint64_t)&a47);
    _Unwind_Resume(a1);
  }
  sub_4A50F4((uint64_t)&a28);
  sub_4A50F4((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_5DA358(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  sub_5DAC30(a1, (unsigned int *)a2, a3, (uint64_t)v34);
  long long v28 = *(_OWORD *)(a2 + 8);
  long long v29 = *(_OWORD *)(a2 + 24);
  int v8 = *(unsigned __int16 *)(a2 + 44);
  char v9 = *(unsigned char *)(a2 + 46);
  char v10 = *(unsigned char *)(a2 + 47);
  unsigned int v11 = *(_DWORD *)(a2 + 4);
  v27[0] = *(_DWORD *)(a2 + 40);
  v27[1] = v8 | ((v9 != 0) << 29) | v11 & 0x40000000 | ((v11 >> 30 == 0) << 31);
  unsigned int v30 = v27[0];
  __int16 v31 = v8;
  char v32 = v9 ^ 1;
  char v33 = v10;
  unint64_t v12 = (unsigned __int16 *)(v28 - *(int *)v28);
  if (*v12 >= 9u && (uint64_t v13 = v12[4]) != 0) {
    uint64_t v14 = *(unsigned int *)(v28 + v13);
  }
  else {
    uint64_t v14 = 0;
  }
  sub_5DAC30(a1, v27, v14 - a3, (uint64_t)v16);
  if (sub_6F2FD8((uint64_t)v34) && (!sub_6F2FD8((uint64_t)v16) || v44 < v26))
  {
    uint64_t v15 = (long long *)v34;
LABEL_11:
    sub_4AA8E0(a4, v15);
    goto LABEL_13;
  }
  if (sub_6F2FD8((uint64_t)v16))
  {
    uint64_t v15 = (long long *)v16;
    goto LABEL_11;
  }
  sub_6F30A4((uint64_t)a4);
LABEL_13:
  if (v25 < 0)
  {
    operator delete(__p);
    if ((v23 & 0x80000000) == 0)
    {
LABEL_15:
      if ((v21 & 0x80000000) == 0) {
        goto LABEL_16;
      }
      goto LABEL_26;
    }
  }
  else if ((v23 & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v22);
  if ((v21 & 0x80000000) == 0)
  {
LABEL_16:
    if ((v19 & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_27;
  }
LABEL_26:
  operator delete(v20);
  if ((v19 & 0x80000000) == 0)
  {
LABEL_17:
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete(v18);
  if ((v17 & 0x80000000) == 0)
  {
LABEL_18:
    if ((v43 & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_29;
  }
LABEL_28:
  operator delete(v16[0]);
  if ((v43 & 0x80000000) == 0)
  {
LABEL_19:
    if ((v41 & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_30;
  }
LABEL_29:
  operator delete(v42);
  if ((v41 & 0x80000000) == 0)
  {
LABEL_20:
    if ((v39 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_31;
  }
LABEL_30:
  operator delete(v40);
  if ((v39 & 0x80000000) == 0)
  {
LABEL_21:
    if ((v37 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_32;
  }
LABEL_31:
  operator delete(v38);
  if ((v37 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v35 & 0x80000000) == 0) {
      return;
    }
LABEL_33:
    operator delete(v34[0]);
    return;
  }
LABEL_32:
  operator delete(v36);
  if (v35 < 0) {
    goto LABEL_33;
  }
}

void sub_5DA59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_5DA5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_5DA5CC(int a1@<W0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, std::string *a6@<X8>)
{
  if (a1 != 6)
  {
    if (a1 == 19 || a1 == 14)
    {
      sub_5DB9D8(a1, a4, a6);
      return;
    }
    switch(a1)
    {
      case 0:
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 9;
        LOWORD(__p.__r_.__value_.__r.__words[1]) = 114;
        unsigned int v11 = "Escalator";
        goto LABEL_15;
      case 1:
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 11;
        *(_DWORD *)((char *)__p.__r_.__value_.__r.__words + 7) = 1884648047;
        unint64_t v12 = "EscalatorUp";
        goto LABEL_26;
      case 2:
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 13;
        strcpy((char *)&__p, "EscalatorDown");
        break;
      case 3:
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 6;
        strcpy((char *)&__p, "Stairs");
        break;
      case 4:
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 8;
        std::string::size_type v13 = 0x7055737269617453;
        goto LABEL_24;
      case 5:
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 10;
        strcpy((char *)&__p, "StairsDown");
        break;
      case 7:
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 15;
        strcpy((char *)&__p, "SteepHillUphill");
        break;
      case 8:
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 17;
        strcpy((char *)&__p, "SteepHillDownhill");
        break;
      case 9:
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 8;
        std::string::size_type v13 = 0x746E756F6D736944;
LABEL_24:
        __p.__r_.__value_.__r.__words[0] = v13;
        __p.__r_.__value_.__s.__data_[8] = 0;
        break;
      case 10:
      case 11:
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_20B5EB0;
        strcpy(__p.__r_.__value_.__l.__data_, "DismountWalkAgainstTraffic");
        break;
      case 13:
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 11;
        *(_DWORD *)((char *)__p.__r_.__value_.__r.__words + 7) = 1701011824;
        unint64_t v12 = "SharedSpace";
LABEL_26:
        __p.__r_.__value_.__r.__words[0] = *(void *)v12;
        __p.__r_.__value_.__s.__data_[11] = 0;
        break;
      case 17:
      case 18:
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 9;
        LOWORD(__p.__r_.__value_.__r.__words[1]) = 108;
        unsigned int v11 = "SteepHill";
LABEL_15:
        __p.__r_.__value_.__r.__words[0] = *(void *)v11;
        break;
      default:
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
        __p.__r_.__value_.__s.__data_[0] = 0;
        break;
    }
    if (byte_2584957 >= 0) {
      uint64_t v14 = (const std::string::value_type *)&xmmword_2584940;
    }
    else {
      uint64_t v14 = (const std::string::value_type *)xmmword_2584940;
    }
    if (byte_2584957 >= 0) {
      std::string::size_type v15 = byte_2584957;
    }
    else {
      std::string::size_type v15 = *((void *)&xmmword_2584940 + 1);
    }
    uint64_t v16 = std::string::insert(&__p, 0, v14, v15);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    a6->__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a6->__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (a4) {
        goto LABEL_35;
      }
    }
    else if (a4)
    {
LABEL_35:
      unsigned int v18 = 10;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 10;
      strcpy((char *)&__p, "_NamedRoad");
      std::string::size_type v19 = 0x6F5264656D614E5FLL;
LABEL_38:
      if ((v18 & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)v19;
      }
      if ((v18 & 0x80u) == 0) {
        std::string::size_type size = v18;
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(a6, (const std::string::value_type *)p_p, size);
      std::string::size_type v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v22 = __p.__r_.__value_.__l.__size_;
      }
      char v23 = "_NoCrossStreet";
      if (a5) {
        char v23 = "_CrossStreet";
      }
      if (v22) {
        int64_t v24 = v23;
      }
      else {
        int64_t v24 = "_NoLocation";
      }
      std::string::append(a6, v24);
      std::string::append(a6, "_NoSecondary");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      return;
    }
    sub_5DC19C(a2, a3, (uint64_t)&__p);
    unsigned int v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    std::string::size_type v19 = __p.__r_.__value_.__r.__words[0];
    goto LABEL_38;
  }

  sub_5DB654(6, a5, a6);
}

void sub_5DA9D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 + 23) < 0) {
    operator delete(*(void **)v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_5DAA64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_58E730(a2, a1, 1u, &v21);
  sub_3D63DC(a2, a1 & 0xFFFFFFFFFFFFLL, v19);
  sub_5F2D5C((uint64_t)__dst, (long long *)v19, 0);
  std::string __p = 0;
  std::string::size_type v15 = 0;
  uint64_t v16 = 0;
  sub_6F8CDC((uint64_t)__dst, (unsigned __int8 **)&v21, (uint64_t *)&__p, a3, a4);
  int v8 = (void **)__p;
  if (__p)
  {
    char v9 = v15;
    char v10 = __p;
    if (v15 != __p)
    {
      do
      {
        if (*((char *)v9 - 9) < 0) {
          operator delete(*(v9 - 4));
        }
        v9 -= 5;
      }
      while (v9 != v8);
      char v10 = __p;
    }
    std::string::size_type v15 = v8;
    operator delete(v10);
  }
  if ((v18 & 0x80000000) == 0)
  {
    if ((v20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
LABEL_14:
    operator delete(v19[0]);
    unsigned int v11 = v21;
    if (!v21) {
      return;
    }
    goto LABEL_15;
  }
  operator delete(__dst[0]);
  if (v20 < 0) {
    goto LABEL_14;
  }
LABEL_11:
  unsigned int v11 = v21;
  if (!v21) {
    return;
  }
LABEL_15:
  uint64_t v12 = (uint64_t)v22;
  std::string::size_type v13 = v11;
  if (v22 != v11)
  {
    do
      uint64_t v12 = sub_2DF404(v12 - 144);
    while ((void *)v12 != v11);
    std::string::size_type v13 = v21;
  }
  std::string::size_type v22 = v11;
  operator delete(v13);
}

void sub_5DABB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  sub_2DE7D0(&a10);
  if (a18 < 0)
  {
    operator delete(__p);
    if ((a25 & 0x80000000) == 0)
    {
LABEL_3:
      sub_53BD98((void **)(v25 - 56));
      _Unwind_Resume(a1);
    }
  }
  else if ((a25 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a20);
  sub_53BD98((void **)(v25 - 56));
  _Unwind_Resume(a1);
}

void sub_5DAC1C(_Unwind_Exception *a1)
{
  sub_53BD98((void **)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_5DAC30(void *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v7 = *((_OWORD *)a2 + 1);
  long long v8 = *((_OWORD *)a2 + 2);
  long long v64 = *(_OWORD *)a2;
  long long v65 = v7;
  long long v66 = v8;
  sub_5DAA64((((unint64_t)(a2[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)a2[1] << 32) | *a2) ^ 0x1000000000000, a1[12], a1[11] + 968, (uint64_t)v54);
  char v9 = (unsigned __int16 *)(*((void *)&v64 + 1) - (int)**((_DWORD **)&v64 + 1));
  if (*v9 >= 9u && (uint64_t v10 = v9[4]) != 0) {
    uint64_t v11 = *(unsigned int *)(*((void *)&v64 + 1) + v10);
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = v11 - a3;
  while (v12 <= a1[2])
  {
    sub_6B7444(a1[15], (unsigned int *)&v64, 1, &v52);
    uint64_t v13 = *v52;
    uint64_t v14 = v52[1];
    while (v13 != v14)
    {
      int v15 = *(_DWORD *)(v13 + 24);
      if ((v15 - 41) >= 0x17)
      {
        switch(v15)
        {
          case 1:
          case 2:
          case 6:
          case 7:
          case 20:
          case 21:
          case 27:
          case 28:
          case 86:
          case 87:
            break;
          default:
            goto LABEL_10;
        }
      }
      sub_5DAA64(*(void *)(*(void *)(v13 + 8) - 8), a1[12], a1[11] + 968, (uint64_t)__s1);
      if (sub_6F2FD8((uint64_t)__s1))
      {
        uint64_t v16 = v43;
        if ((v43 & 0x80u) == 0) {
          unint64_t v17 = v43;
        }
        else {
          unint64_t v17 = (unint64_t)__s1[1];
        }
        unint64_t v18 = v55;
        if ((v55 & 0x80u) != 0) {
          unint64_t v18 = (unint64_t)v54[1];
        }
        if (v17 != v18) {
          goto LABEL_41;
        }
        if ((v55 & 0x80u) == 0) {
          std::string::size_type v19 = v54;
        }
        else {
          std::string::size_type v19 = (void **)v54[0];
        }
        if ((v43 & 0x80) != 0)
        {
          if (memcmp(__s1[0], v19, (size_t)__s1[1])) {
            goto LABEL_41;
          }
        }
        else if (v43)
        {
          char v20 = __s1;
          while (*(unsigned __int8 *)v20 == *(unsigned __int8 *)v19)
          {
            char v20 = (void **)((char *)v20 + 1);
            std::string::size_type v19 = (void **)((char *)v19 + 1);
            if (!--v16) {
              goto LABEL_31;
            }
          }
LABEL_41:
          sub_4AA8E0((char *)a4, (long long *)__s1);
          *(void *)(a4 + 152) = v12;
          if (v51 < 0)
          {
            operator delete(v50);
            if (v49 < 0) {
              goto LABEL_61;
            }
LABEL_43:
            if ((v47 & 0x80000000) == 0) {
              goto LABEL_44;
            }
LABEL_62:
            operator delete(v46);
            if (v45 < 0) {
              goto LABEL_63;
            }
LABEL_45:
            if ((char)v43 < 0) {
LABEL_64:
            }
              operator delete(__s1[0]);
          }
          else
          {
            if ((v49 & 0x80000000) == 0) {
              goto LABEL_43;
            }
LABEL_61:
            operator delete(v48);
            if (v47 < 0) {
              goto LABEL_62;
            }
LABEL_44:
            if ((v45 & 0x80000000) == 0) {
              goto LABEL_45;
            }
LABEL_63:
            operator delete(__p);
            if ((char)v43 < 0) {
              goto LABEL_64;
            }
          }
          int v21 = 1;
          goto LABEL_80;
        }
      }
LABEL_31:
      if (v51 < 0)
      {
        operator delete(v50);
        if ((v49 & 0x80000000) == 0)
        {
LABEL_33:
          if ((v47 & 0x80000000) == 0) {
            goto LABEL_34;
          }
          goto LABEL_38;
        }
      }
      else if ((v49 & 0x80000000) == 0)
      {
        goto LABEL_33;
      }
      operator delete(v48);
      if ((v47 & 0x80000000) == 0)
      {
LABEL_34:
        if ((v45 & 0x80000000) == 0) {
          goto LABEL_39;
        }
        goto LABEL_9;
      }
LABEL_38:
      operator delete(v46);
      if ((v45 & 0x80000000) == 0)
      {
LABEL_39:
        if (((char)v43 & 0x80000000) == 0) {
          goto LABEL_10;
        }
        goto LABEL_40;
      }
LABEL_9:
      operator delete(__p);
      if (((char)v43 & 0x80000000) == 0) {
        goto LABEL_10;
      }
LABEL_40:
      operator delete(__s1[0]);
LABEL_10:
      v13 += 192;
    }
    uint64_t v22 = *v52;
    uint64_t v23 = v52[1];
    if (*v52 != v23)
    {
      while (1)
      {
        int v24 = *(_DWORD *)(v22 + 24);
        if (!v24 || v24 == 3) {
          break;
        }
        v22 += 192;
        if (v22 == v23) {
          goto LABEL_59;
        }
      }
    }
    if (v22 == v23)
    {
LABEL_59:
      long long v28 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      BOOL v36 = 0;
      LODWORD(v27) = 0;
      int v37 = -1610547201;
      LOWORD(v29) = -1;
    }
    else
    {
      uint64_t v26 = a1[12];
      unint64_t v27 = *(void *)(*(void *)(v22 + 8) - 8);
      long long v28 = (int *)sub_2D5D58(v26, v27 & 0xFFFFFFFFFFFFLL);
      unint64_t v29 = HIDWORD(v27);
      if (*(unsigned char *)(v26 + 7772))
      {
        unsigned int v30 = sub_2DB8E0(v26 + 3896, v27, 0);
        __int16 v31 = &v30[-*(int *)v30];
        if (*(unsigned __int16 *)v31 < 5u)
        {
          uint64_t v32 = 0;
        }
        else
        {
          uint64_t v32 = *((unsigned __int16 *)v31 + 2);
          if (v32) {
            v32 += (uint64_t)&v30[*(unsigned int *)&v30[v32]];
          }
        }
        uint64_t v33 = v32 + 4 * WORD2(v27) + 4 + *(unsigned int *)(v32 + 4 * WORD2(v27) + 4);
      }
      else
      {
        uint64_t v33 = 0;
      }
      uint64_t v34 = sub_2E5C38(v26, v27 & 0xFFFFFFFFFFFFLL, 1);
      BOOL v36 = (v27 & 0xFF000000000000) != 0;
      if ((v27 & 0xFF000000000000) != 0) {
        int v38 = 0x40000000;
      }
      else {
        int v38 = 1610612736;
      }
      int v37 = v38 | WORD2(v27);
    }
    *(void *)&long long v64 = __PAIR64__(v37, v27);
    *((void *)&v64 + 1) = v28;
    *(void *)&long long v65 = v33;
    *((void *)&v65 + 1) = v34;
    *(void *)&long long v66 = v35;
    DWORD2(v66) = v27;
    WORD6(v66) = v29;
    int v21 = 3;
    BYTE14(v66) = v36;
    if (v27 && v28 && v33)
    {
      char v39 = (unsigned __int16 *)((char *)v28 - *v28);
      if (*v39 < 9u)
      {
        uint64_t v40 = 0;
      }
      else
      {
        uint64_t v40 = v39[4];
        if (v40) {
          uint64_t v40 = *(unsigned int *)((char *)v28 + v40);
        }
      }
      int v21 = 0;
      v12 += v40;
    }
LABEL_80:
    char v41 = v53;
    if (v53)
    {
      if (!atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    if (v21)
    {
      if (v21 != 3) {
        goto LABEL_85;
      }
      break;
    }
  }
  sub_6F30A4(a4);
  *(void *)(a4 + 152) = 0x7FFFFFFFFFFFFFFFLL;
LABEL_85:
  if (v63 < 0)
  {
    operator delete(v62);
    if (v61 < 0) {
      goto LABEL_92;
    }
LABEL_87:
    if ((v59 & 0x80000000) == 0) {
      goto LABEL_88;
    }
LABEL_93:
    operator delete(v58);
    if (v57 < 0) {
      goto LABEL_94;
    }
LABEL_89:
    if ((char)v55 < 0) {
LABEL_95:
    }
      operator delete(v54[0]);
  }
  else
  {
    if ((v61 & 0x80000000) == 0) {
      goto LABEL_87;
    }
LABEL_92:
    operator delete(v60);
    if (v59 < 0) {
      goto LABEL_93;
    }
LABEL_88:
    if ((v57 & 0x80000000) == 0) {
      goto LABEL_89;
    }
LABEL_94:
    operator delete(v56);
    if ((char)v55 < 0) {
      goto LABEL_95;
    }
  }
}

void sub_5DB150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

void sub_5DB164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30)
{
}

void *sub_5DB31C@<X0>(void *result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = a2;
  switch((int)result)
  {
    case 0:
    case 1:
    case 2:
      size_t v3 = 9;
      BYTE7(v14[1]) = 9;
      strcpy((char *)v14, "Escalator");
      goto LABEL_16;
    case 3:
    case 4:
    case 5:
      size_t v3 = 6;
      BYTE7(v14[1]) = 6;
      strcpy((char *)v14, "Stairs");
      goto LABEL_16;
    case 6:
      size_t v3 = 16;
      BYTE7(v14[1]) = 16;
      strcpy((char *)v14, "PedestrianBridge");
      goto LABEL_16;
    case 7:
    case 17:
      size_t v3 = 15;
      BYTE7(v14[1]) = 15;
      strcpy((char *)v14, "SteepHillUphill");
      goto LABEL_16;
    case 8:
    case 18:
      size_t v3 = 17;
      BYTE7(v14[1]) = 17;
      strcpy((char *)v14, "SteepHillDownhill");
      goto LABEL_16;
    case 9:
      size_t v3 = 8;
      BYTE7(v14[1]) = 8;
      uint64_t v5 = 0x746E756F6D736944;
      goto LABEL_15;
    case 10:
      size_t v3 = 20;
      BYTE7(v14[1]) = 20;
      LODWORD(v14[1]) = 1952802162;
      uint64_t v4 = "DismountOneWayStreet";
      goto LABEL_8;
    case 11:
      size_t v3 = 20;
      BYTE7(v14[1]) = 20;
      LODWORD(v14[1]) = 1952802162;
      uint64_t v4 = "DismountTwoWayStreet";
LABEL_8:
      v14[0] = *(_OWORD *)v4;
      BYTE4(v14[1]) = 0;
      goto LABEL_16;
    case 13:
      size_t v3 = 11;
      BYTE7(v14[1]) = 11;
      strcpy((char *)v14, "SharedSpace");
      goto LABEL_16;
    case 14:
      size_t v3 = 5;
      BYTE7(v14[1]) = 5;
      strcpy((char *)v14, "Ferry");
      goto LABEL_16;
    case 19:
      size_t v3 = 8;
      BYTE7(v14[1]) = 8;
      uint64_t v5 = 0x726F746176656C45;
LABEL_15:
      *(void *)&v14[0] = v5;
      BYTE8(v14[0]) = 0;
LABEL_16:
      int v6 = byte_258493F;
      if (byte_258493F >= 0) {
        size_t v7 = byte_258493F;
      }
      else {
        size_t v7 = qword_2584930;
      }
      unint64_t v8 = v3 + v7;
      if (v3 + v7 >= 0x7FFFFFFFFFFFFFF8) {
        sub_188D690();
      }
      if (v8 <= 0x16)
      {
        v2[1] = 0;
        v2[2] = 0;
        *uint64_t v2 = 0;
        *((unsigned char *)v2 + 23) = v8;
        if (!v7) {
          goto LABEL_26;
        }
        goto LABEL_22;
      }
      uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17) {
        uint64_t v11 = v8 | 7;
      }
      uint64_t v12 = v11 + 1;
      uint64_t v13 = operator new(v11 + 1);
      v2[1] = v8;
      v2[2] = v12 | 0x8000000000000000;
      *uint64_t v2 = v13;
      uint64_t v2 = v13;
      if (v7)
      {
LABEL_22:
        if (v6 >= 0) {
          char v9 = &qword_2584928;
        }
        else {
          char v9 = (uint64_t *)qword_2584928;
        }
        memmove(v2, v9, v7);
      }
LABEL_26:
      uint64_t v10 = (char *)v2 + v7;
      double result = memmove(v10, v14, v3);
      v10[v3] = 0;
      return result;
    default:
      a2[23] = 0;
      *a2 = 0;
      return result;
  }
}

void sub_5DB5E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_5DB654@<X0>(int a1@<W0>, int a2@<W1>, std::string *a3@<X8>)
{
  switch(a1)
  {
    case 0:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 9;
      LOWORD(__p.__r_.__value_.__r.__words[1]) = 114;
      uint64_t v5 = "Escalator";
      goto LABEL_6;
    case 1:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 11;
      *(_DWORD *)((char *)__p.__r_.__value_.__r.__words + 7) = 1884648047;
      int v6 = "EscalatorUp";
      goto LABEL_17;
    case 2:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 13;
      strcpy((char *)&__p, "EscalatorDown");
      break;
    case 3:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 6;
      strcpy((char *)&__p, "Stairs");
      break;
    case 4:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 8;
      std::string::size_type v7 = 0x7055737269617453;
      goto LABEL_20;
    case 5:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 10;
      strcpy((char *)&__p, "StairsDown");
      break;
    case 6:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 16;
      strcpy((char *)&__p, "PedestrianBridge");
      break;
    case 7:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 15;
      strcpy((char *)&__p, "SteepHillUphill");
      break;
    case 8:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 17;
      strcpy((char *)&__p, "SteepHillDownhill");
      break;
    case 9:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 8;
      std::string::size_type v7 = 0x746E756F6D736944;
      goto LABEL_20;
    case 10:
    case 11:
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_20B5EB0;
      strcpy(__p.__r_.__value_.__l.__data_, "DismountWalkAgainstTraffic");
      break;
    case 13:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 11;
      *(_DWORD *)((char *)__p.__r_.__value_.__r.__words + 7) = 1701011824;
      int v6 = "SharedSpace";
LABEL_17:
      __p.__r_.__value_.__r.__words[0] = *(void *)v6;
      __p.__r_.__value_.__s.__data_[11] = 0;
      break;
    case 14:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&__p, "Ferry");
      break;
    case 17:
    case 18:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 9;
      LOWORD(__p.__r_.__value_.__r.__words[1]) = 108;
      uint64_t v5 = "SteepHill";
LABEL_6:
      __p.__r_.__value_.__r.__words[0] = *(void *)v5;
      break;
    case 19:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 8;
      std::string::size_type v7 = 0x726F746176656C45;
LABEL_20:
      __p.__r_.__value_.__r.__words[0] = v7;
      __p.__r_.__value_.__s.__data_[8] = 0;
      break;
    default:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      break;
  }
  if (byte_2584957 >= 0) {
    unint64_t v8 = (const std::string::value_type *)&xmmword_2584940;
  }
  else {
    unint64_t v8 = (const std::string::value_type *)xmmword_2584940;
  }
  if (byte_2584957 >= 0) {
    std::string::size_type v9 = byte_2584957;
  }
  else {
    std::string::size_type v9 = *((void *)&xmmword_2584940 + 1);
  }
  uint64_t v10 = std::string::insert(&__p, 0, v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  a3->__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (a2) {
    uint64_t v12 = "_CrossStreet";
  }
  else {
    uint64_t v12 = "_NoLocation";
  }
  std::string::append(a3, v12);
  return std::string::append(a3, "_NoSecondary");
}

void sub_5DB958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_5DB9D8@<X0>(int a1@<W0>, int a2@<W1>, std::string *a3@<X8>)
{
  switch(a1)
  {
    case 0:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 9;
      LOWORD(__p.__r_.__value_.__r.__words[1]) = 114;
      uint64_t v5 = "Escalator";
      goto LABEL_6;
    case 1:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 11;
      *(_DWORD *)((char *)__p.__r_.__value_.__r.__words + 7) = 1884648047;
      int v6 = "EscalatorUp";
      goto LABEL_17;
    case 2:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 13;
      strcpy((char *)&__p, "EscalatorDown");
      break;
    case 3:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 6;
      strcpy((char *)&__p, "Stairs");
      break;
    case 4:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 8;
      std::string::size_type v7 = 0x7055737269617453;
      goto LABEL_20;
    case 5:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 10;
      strcpy((char *)&__p, "StairsDown");
      break;
    case 6:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 16;
      strcpy((char *)&__p, "PedestrianBridge");
      break;
    case 7:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 15;
      strcpy((char *)&__p, "SteepHillUphill");
      break;
    case 8:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 17;
      strcpy((char *)&__p, "SteepHillDownhill");
      break;
    case 9:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 8;
      std::string::size_type v7 = 0x746E756F6D736944;
      goto LABEL_20;
    case 10:
    case 11:
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_20B5EB0;
      strcpy(__p.__r_.__value_.__l.__data_, "DismountWalkAgainstTraffic");
      break;
    case 13:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 11;
      *(_DWORD *)((char *)__p.__r_.__value_.__r.__words + 7) = 1701011824;
      int v6 = "SharedSpace";
LABEL_17:
      __p.__r_.__value_.__r.__words[0] = *(void *)v6;
      __p.__r_.__value_.__s.__data_[11] = 0;
      break;
    case 14:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&__p, "Ferry");
      break;
    case 17:
    case 18:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 9;
      LOWORD(__p.__r_.__value_.__r.__words[1]) = 108;
      uint64_t v5 = "SteepHill";
LABEL_6:
      __p.__r_.__value_.__r.__words[0] = *(void *)v5;
      break;
    case 19:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 8;
      std::string::size_type v7 = 0x726F746176656C45;
LABEL_20:
      __p.__r_.__value_.__r.__words[0] = v7;
      __p.__r_.__value_.__s.__data_[8] = 0;
      break;
    default:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      break;
  }
  if (byte_2584957 >= 0) {
    unint64_t v8 = (const std::string::value_type *)&xmmword_2584940;
  }
  else {
    unint64_t v8 = (const std::string::value_type *)xmmword_2584940;
  }
  if (byte_2584957 >= 0) {
    std::string::size_type v9 = byte_2584957;
  }
  else {
    std::string::size_type v9 = *((void *)&xmmword_2584940 + 1);
  }
  uint64_t v10 = std::string::insert(&__p, 0, v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  a3->__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (a2) {
    uint64_t v12 = "_Named";
  }
  else {
    uint64_t v12 = "_Unnamed";
  }
  return std::string::append(a3, v12);
}

void sub_5DBCCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 + 23) < 0) {
    operator delete(*(void **)v14);
  }
  _Unwind_Resume(exception_object);
}

void *sub_5DBD4C@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  double result = (void *)sub_654A08(a2, a3, a4);
  if ((a1 & 0xFFFFFFFE) == 0xA)
  {
    switch((int)result)
    {
      case 4:
        goto LABEL_7;
      case 9:
        goto LABEL_9;
      case 10:
        goto LABEL_11;
      default:
        goto LABEL_3;
    }
  }
  switch((int)result)
  {
    case 1:
      if ((byte_2584477 & 0x80000000) == 0)
      {
        unint64_t v8 = &xmmword_2584460;
        goto LABEL_29;
      }
      unint64_t v10 = *((void *)&xmmword_2584460 + 1);
      std::string::size_type v9 = (void *)xmmword_2584460;
      long long v11 = (unsigned char *)a5;
      return sub_4200(v11, v9, v10);
    case 2:
      if ((byte_25843FF & 0x80000000) == 0)
      {
        unint64_t v8 = &xmmword_25843E8;
        goto LABEL_29;
      }
      unint64_t v10 = *((void *)&xmmword_25843E8 + 1);
      std::string::size_type v9 = (void *)xmmword_25843E8;
      long long v11 = (unsigned char *)a5;
      return sub_4200(v11, v9, v10);
    case 3:
      if ((byte_2584417 & 0x80000000) == 0)
      {
        unint64_t v8 = &xmmword_2584400;
        goto LABEL_29;
      }
      unint64_t v10 = *((void *)&xmmword_2584400 + 1);
      std::string::size_type v9 = (void *)xmmword_2584400;
      long long v11 = (unsigned char *)a5;
      return sub_4200(v11, v9, v10);
    case 4:
LABEL_7:
      if ((byte_258448F & 0x80000000) == 0)
      {
        unint64_t v8 = &xmmword_2584478;
        goto LABEL_29;
      }
      unint64_t v10 = *((void *)&xmmword_2584478 + 1);
      std::string::size_type v9 = (void *)xmmword_2584478;
      long long v11 = (unsigned char *)a5;
      return sub_4200(v11, v9, v10);
    case 5:
      if ((byte_25844D7 & 0x80000000) == 0)
      {
        unint64_t v8 = &xmmword_25844C0;
        goto LABEL_29;
      }
      unint64_t v10 = *((void *)&xmmword_25844C0 + 1);
      std::string::size_type v9 = (void *)xmmword_25844C0;
      long long v11 = (unsigned char *)a5;
      return sub_4200(v11, v9, v10);
    case 6:
      if ((byte_25844A7 & 0x80000000) == 0)
      {
        unint64_t v8 = &xmmword_2584490;
        goto LABEL_29;
      }
      unint64_t v10 = *((void *)&xmmword_2584490 + 1);
      std::string::size_type v9 = (void *)xmmword_2584490;
      long long v11 = (unsigned char *)a5;
      return sub_4200(v11, v9, v10);
    case 7:
      if ((byte_25844BF & 0x80000000) == 0)
      {
        unint64_t v8 = &xmmword_25844A8;
        goto LABEL_29;
      }
      unint64_t v10 = *((void *)&xmmword_25844A8 + 1);
      std::string::size_type v9 = (void *)xmmword_25844A8;
      long long v11 = (unsigned char *)a5;
      return sub_4200(v11, v9, v10);
    case 8:
      if ((byte_25844EF & 0x80000000) == 0)
      {
        unint64_t v8 = &xmmword_25844D8;
        goto LABEL_29;
      }
      unint64_t v10 = *((void *)&xmmword_25844D8 + 1);
      std::string::size_type v9 = (void *)xmmword_25844D8;
      long long v11 = (unsigned char *)a5;
      return sub_4200(v11, v9, v10);
    case 9:
LABEL_9:
      if ((byte_2581B17 & 0x80000000) == 0)
      {
        unint64_t v8 = &xmmword_2581B00;
        goto LABEL_29;
      }
      unint64_t v10 = *((void *)&xmmword_2581B00 + 1);
      std::string::size_type v9 = (void *)xmmword_2581B00;
      long long v11 = (unsigned char *)a5;
      return sub_4200(v11, v9, v10);
    case 10:
LABEL_11:
      if ((byte_2581B2F & 0x80000000) == 0)
      {
        unint64_t v8 = &xmmword_2581B18;
        goto LABEL_29;
      }
      unint64_t v10 = *((void *)&xmmword_2581B18 + 1);
      std::string::size_type v9 = (void *)xmmword_2581B18;
      long long v11 = (unsigned char *)a5;
      return sub_4200(v11, v9, v10);
    case 11:
      if ((byte_258442F & 0x80000000) == 0)
      {
        unint64_t v8 = &xmmword_2584418;
        goto LABEL_29;
      }
      unint64_t v10 = *((void *)&xmmword_2584418 + 1);
      std::string::size_type v9 = (void *)xmmword_2584418;
      long long v11 = (unsigned char *)a5;
      return sub_4200(v11, v9, v10);
    case 12:
      if (byte_258445F < 0)
      {
        unint64_t v10 = *((void *)&xmmword_2584448 + 1);
        std::string::size_type v9 = (void *)xmmword_2584448;
        long long v11 = (unsigned char *)a5;
        return sub_4200(v11, v9, v10);
      }
      else
      {
        unint64_t v8 = &xmmword_2584448;
LABEL_29:
        *(_OWORD *)a5 = *v8;
        *(void *)(a5 + 16) = *((void *)v8 + 2);
      }
      return result;
    default:
LABEL_3:
      *(unsigned char *)(a5 + 23) = 0;
      *(unsigned char *)a5 = 0;
      return result;
  }
}

__n128 sub_5DC19C@<Q0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = sub_470B40(a1, a2);
  int v6 = *(int **)(v4 + 8);
  std::string::size_type v7 = (unsigned __int16 *)((char *)v6 - *v6);
  unsigned int v8 = *v7;
  if (*(unsigned char *)(v4 + 46))
  {
    if (v8 >= 0x39)
    {
      uint64_t v9 = v7[28];
      if (v7[28])
      {
        int v10 = *(int *)((char *)v6 + v9);
        if ((v10 & 2) != 0) {
          goto LABEL_11;
        }
        goto LABEL_9;
      }
      goto LABEL_25;
    }
    if (v8 >= 0xB) {
      goto LABEL_25;
    }
LABEL_34:
    *(unsigned char *)(a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
    return result;
  }
  if (v8 < 0x39)
  {
    if (v8 > 0xA) {
      goto LABEL_25;
    }
    goto LABEL_34;
  }
  uint64_t v9 = v7[28];
  if (v7[28])
  {
    int v10 = *(int *)((char *)v6 + v9);
    if (v10)
    {
LABEL_11:
      if (v7[5] && (*((unsigned char *)v6 + v7[5] + 1) & 4) != 0)
      {
        if ((byte_2581B17 & 0x80000000) == 0)
        {
          uint64_t v14 = &xmmword_2581B00;
          goto LABEL_42;
        }
        unint64_t v16 = *((void *)&xmmword_2581B00 + 1);
        int v15 = (void *)xmmword_2581B00;
        unint64_t v17 = (unsigned char *)a3;
        goto LABEL_39;
      }
LABEL_13:
      if (*(unsigned char *)(v4 + 46))
      {
        int v11 = *(int *)((char *)v6 + v9);
        if ((v11 & 2) != 0)
        {
LABEL_23:
          if (!v7[5] || (*((unsigned char *)v6 + v7[5] + 1) & 8) == 0) {
            goto LABEL_25;
          }
          if ((byte_2581B2F & 0x80000000) == 0)
          {
            uint64_t v14 = &xmmword_2581B18;
            goto LABEL_42;
          }
          unint64_t v16 = *((void *)&xmmword_2581B18 + 1);
          int v15 = (void *)xmmword_2581B18;
          unint64_t v17 = (unsigned char *)a3;
LABEL_39:
          sub_4200(v17, v15, v16);
          return result;
        }
      }
      else
      {
        int v11 = *(int *)((char *)v6 + v9);
        if (v11) {
          goto LABEL_23;
        }
      }
      if ((v11 & 7) != 4 && (v11 & 0x23) != 0x20) {
        goto LABEL_25;
      }
      goto LABEL_23;
    }
LABEL_9:
    if ((v10 & 7) != 4 && (v10 & 0x23) != 0x20) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }
LABEL_25:
  if (v7[5] && (*((unsigned char *)v6 + v7[5] + 2) & 0x20) != 0) {
    goto LABEL_34;
  }
  uint64_t v12 = v7[5];
  if (!v12) {
    goto LABEL_34;
  }
  int v13 = *(unsigned char *)(v4 + 46) ? 2 : 1;
  if ((*(int *)((char *)v6 + v12) & v13) == 0) {
    goto LABEL_34;
  }
  if (byte_258448F < 0)
  {
    unint64_t v16 = *((void *)&xmmword_2584478 + 1);
    int v15 = (void *)xmmword_2584478;
    unint64_t v17 = (unsigned char *)a3;
    goto LABEL_39;
  }
  uint64_t v14 = &xmmword_2584478;
LABEL_42:
  __n128 result = (__n128)*v14;
  *(_OWORD *)a3 = *v14;
  *(void *)(a3 + 16) = *((void *)v14 + 2);
  return result;
}

uint64_t sub_5DC3B8(uint64_t a1)
{
  uint64_t v2 = a1 + 128;
  sub_4D4B58(a1 + 448);
  sub_4D4B58(a1 + 288);
  sub_4D4B58(v2);
  if (*(char *)(a1 + 111) < 0)
  {
    operator delete(*(void **)(a1 + 88));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    {
LABEL_3:
      int v3 = *(_DWORD *)(a1 + 40);
      if (v3 != 1) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 != 1)
  {
LABEL_4:
    if (v3 || (*(char *)(a1 + 39) & 0x80000000) == 0) {
      return a1;
    }
    operator delete(*(void **)(a1 + 16));
    return a1;
  }
LABEL_9:
  uint64_t v5 = *(void **)(a1 + 16);
  if (!v5) {
    return a1;
  }
  *(void *)(a1 + 24) = v5;
  operator delete(v5);
  return a1;
}

uint64_t sub_5DC47C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v9 = a1[2];
    unint64_t v10 = a1[1];
    if ((uint64_t)(0x86BCA1AF286BCA1BLL * ((uint64_t)(v9 - v10) >> 5)) >= a5)
    {
      uint64_t v16 = v10 - a2;
      if ((uint64_t)(0x86BCA1AF286BCA1BLL * ((uint64_t)(v10 - a2) >> 5)) >= a5)
      {
        uint64_t v18 = a3 + 608 * a5;
      }
      else
      {
        uint64_t v18 = a3 + 32 * ((uint64_t)(v10 - a2) >> 5);
        if (v18 == a4)
        {
          a1[1] = v10;
          if (v16 < 1) {
            return v5;
          }
        }
        else
        {
          uint64_t v19 = 0;
          do
          {
            sub_59AD40(v10 + v19, v18 + v19);
            v19 += 608;
          }
          while (v18 + v19 != a4);
          a1[1] = v10 + v19;
          if (v16 < 1) {
            return v5;
          }
        }
      }
      sub_5DC744((uint64_t)a1, v5, v10, v5 + 608 * a5);
      sub_5A3BC8((uint64_t)&__p, v7, v18, v5);
      return v5;
    }
    uint64_t v11 = *a1;
    unint64_t v12 = a5 - 0x79435E50D79435E5 * ((uint64_t)(v10 - *a1) >> 5);
    if (v12 > 0x6BCA1AF286BCA1) {
      sub_2E00();
    }
    unint64_t v13 = 0x86BCA1AF286BCA1BLL * ((v9 - v11) >> 5);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x35E50D79435E50) {
      unint64_t v14 = 0x6BCA1AF286BCA1;
    }
    else {
      unint64_t v14 = v12;
    }
    unsigned int v30 = a1 + 2;
    if (v14)
    {
      if (v14 > 0x6BCA1AF286BCA1) {
        sub_188D718();
      }
      int v15 = (char *)operator new(608 * v14);
    }
    else
    {
      int v15 = 0;
    }
    uint64_t v20 = (uint64_t)&v15[32 * ((v5 - v11) >> 5)];
    std::string __p = v15;
    uint64_t v27 = v20;
    uint64_t v28 = v20;
    unint64_t v29 = &v15[608 * v14];
    uint64_t v21 = 608 * a5;
    uint64_t v22 = v20 + 608 * a5;
    do
    {
      sub_59AD40(v20, v7);
      v20 += 608;
      v7 += 608;
      v21 -= 608;
    }
    while (v21);
    uint64_t v28 = v22;
    uint64_t v5 = sub_5DC890(a1, &__p, v5);
    uint64_t v24 = v27;
    for (uint64_t i = v28; v28 != v24; uint64_t i = v28)
    {
      uint64_t v28 = i - 608;
      sub_575D30((uint64_t)v30, i - 608);
    }
    if (__p) {
      operator delete(__p);
    }
  }
  return v5;
}

void sub_5DC6EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5DCAC0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_5DC700(_Unwind_Exception *exception_object)
{
  for (; v4; v4 -= 608)
    sub_575D30(v3, v2 - 608 + v4);
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_5DC72C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5DCAC0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_5DC744(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    uint64_t v10 = a2 + 32 * ((v6 - a4) >> 5) + 128;
    uint64_t v11 = *(void *)(a1 + 8);
    do
    {
      uint64_t v12 = v11;
      *(void *)uint64_t v11 = *(void *)(v10 - 128);
      *(_DWORD *)(v11 + 40) = *(_DWORD *)(v10 - 88);
      uint64_t v13 = v10 - 120;
      sub_4F38B0((void *)*(unsigned int *)(v10 - 88), (uint64_t *)(v10 - 120), (void *)(v11 + 8));
      *(void *)(v12 + 48) = *(void *)(v10 - 80);
      long long v14 = *(_OWORD *)(v10 - 72);
      *(void *)(v12 + 72) = *(void *)(v10 - 56);
      *(_OWORD *)(v12 + 56) = v14;
      *(void *)(v10 - 64) = 0;
      *(void *)(v10 - 56) = 0;
      *(void *)(v10 - 72) = 0;
      *(unsigned char *)(v12 + 80) = *(unsigned char *)(v10 - 48);
      long long v15 = *(_OWORD *)(v10 - 40);
      *(void *)(v12 + 104) = *(void *)(v10 - 24);
      *(_OWORD *)(v12 + 88) = v15;
      *(void *)(v10 - 32) = 0;
      *(void *)(v10 - 24) = 0;
      *(void *)(v10 - 40) = 0;
      *(unsigned char *)(v12 + 112) = *(unsigned char *)(v10 - 16);
      *(_DWORD *)(v12 + 120) = *(_DWORD *)(v10 - 8);
      sub_5DCB18(v12 + 128, v10);
      v10 += 608;
      uint64_t v11 = v12 + 608;
    }
    while (v13 + 600 < a3);
    uint64_t v8 = v12 + 608;
  }
  *(void *)(a1 + 8) = v8;
  return sub_5DCD8C((uint64_t)&v17, a2, v7, v6);
}

uint64_t sub_5DC890(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = *a1;
  uint64_t v8 = v6;
  if (*a1 != a3)
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = v6 + v9;
      *(void *)(v6 + v9 - 608) = *(void *)(a3 + v9 - 608);
      uint64_t v11 = (_DWORD *)(a3 + v9 - 568);
      *(_DWORD *)(v6 + v9 - 568) = *v11;
      sub_4F38B0((void *)*v11, (uint64_t *)(a3 + v9 - 600), (void *)(v6 + v9 - 600));
      *(void *)(v10 - 560) = *(void *)(a3 + v9 - 560);
      uint64_t v12 = v6 + v9 - 552;
      uint64_t v13 = a3 + v9 - 552;
      long long v14 = *(_OWORD *)v13;
      *(void *)(v12 + 16) = *(void *)(a3 + v9 - 536);
      *(_OWORD *)uint64_t v12 = v14;
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = 0;
      *(void *)uint64_t v13 = 0;
      *(unsigned char *)(v10 - 528) = *(unsigned char *)(a3 + v9 - 528);
      uint64_t v15 = v6 + v9 - 520;
      uint64_t v16 = a3 + v9 - 520;
      long long v17 = *(_OWORD *)v16;
      *(void *)(v15 + 16) = *(void *)(a3 + v9 - 504);
      *(_OWORD *)uint64_t v15 = v17;
      *(void *)(v16 + 8) = 0;
      *(void *)(v16 + 16) = 0;
      *(void *)uint64_t v16 = 0;
      *(unsigned char *)(v10 - 496) = *(unsigned char *)(a3 + v9 - 496);
      *(_DWORD *)(v10 - 488) = *(_DWORD *)(a3 + v9 - 488);
      sub_5DCB18(v6 + v9 - 480, a3 + v9 - 480);
      v9 -= 608;
    }
    while (a3 + v9 != v7);
    uint64_t v8 = v6 + v9;
  }
  a2[1] = v8;
  uint64_t v18 = a1[1];
  uint64_t v19 = a2[2];
  if (v18 != a3)
  {
    uint64_t v20 = a3 + 128;
    do
    {
      uint64_t v21 = v19;
      *(void *)uint64_t v19 = *(void *)(v20 - 128);
      *(_DWORD *)(v19 + 40) = *(_DWORD *)(v20 - 88);
      uint64_t v22 = v20 - 120;
      sub_4F38B0((void *)*(unsigned int *)(v20 - 88), (uint64_t *)(v20 - 120), (void *)(v19 + 8));
      *(void *)(v21 + 48) = *(void *)(v20 - 80);
      long long v23 = *(_OWORD *)(v20 - 72);
      *(void *)(v21 + 72) = *(void *)(v20 - 56);
      *(_OWORD *)(v21 + 56) = v23;
      *(void *)(v20 - 64) = 0;
      *(void *)(v20 - 56) = 0;
      *(void *)(v20 - 72) = 0;
      *(unsigned char *)(v21 + 80) = *(unsigned char *)(v20 - 48);
      long long v24 = *(_OWORD *)(v20 - 40);
      *(void *)(v21 + 104) = *(void *)(v20 - 24);
      *(_OWORD *)(v21 + 88) = v24;
      *(void *)(v20 - 32) = 0;
      *(void *)(v20 - 24) = 0;
      *(void *)(v20 - 40) = 0;
      *(unsigned char *)(v21 + 112) = *(unsigned char *)(v20 - 16);
      *(_DWORD *)(v21 + 120) = *(_DWORD *)(v20 - 8);
      sub_5DCB18(v21 + 128, v20);
      v20 += 608;
      uint64_t v19 = v21 + 608;
    }
    while (v22 + 600 != v18);
    uint64_t v19 = v21 + 608;
    uint64_t v8 = a2[1];
  }
  a2[2] = v19;
  uint64_t v25 = *a1;
  *a1 = v8;
  a2[1] = v25;
  uint64_t v26 = a1[1];
  a1[1] = a2[2];
  a2[2] = v26;
  uint64_t v27 = a1[2];
  a1[2] = a2[3];
  a2[3] = v27;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_5DCAC0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = i - 608;
    sub_575D30(v4, i - 608);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 sub_5DCB18(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = 0u;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)(a2 + 72) = 0u;
  uint64_t v2 = *(void *)(a2 + 96);
  *(_OWORD *)(a2 + 88) = 0u;
  *(void *)(a1 + 96) = v2;
  LODWORD(v2) = *(_DWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = v2;
  long long v3 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = v3;
  *(void *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 120) = 0u;
  long long v4 = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v4;
  *(_OWORD *)(a2 + 144) = 0u;
  *(void *)(a2 + 136) = 0;
  *(void *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  long long v6 = *(_OWORD *)(a2 + 160);
  uint64_t v5 = a2 + 160;
  *(_OWORD *)(a1 + 160) = v6;
  *(void *)(a1 + 176) = *(void *)(v5 + 16);
  *(void *)(v5 + 16) = 0;
  *(_OWORD *)uint64_t v5 = 0u;
  *(void *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(v5 + 24);
  *(void *)(a1 + 200) = *(void *)(v5 + 40);
  *(void *)(v5 + 40) = 0;
  *(_OWORD *)(v5 + 24) = 0u;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(v5 + 48);
  *(void *)(a1 + 224) = *(void *)(v5 + 64);
  *(void *)(v5 + 64) = 0;
  *(_OWORD *)(v5 + 48) = 0u;
  *(void *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(v5 + 72);
  *(void *)(a1 + 248) = *(void *)(v5 + 88);
  *(_OWORD *)(v5 + 72) = 0u;
  uint64_t v7 = *(void *)(v5 + 96);
  *(_OWORD *)(v5 + 88) = 0u;
  *(void *)(a1 + 256) = v7;
  LODWORD(v7) = *(_DWORD *)(v5 + 104);
  *(unsigned char *)(a1 + 268) = *(unsigned char *)(v5 + 108);
  *(_DWORD *)(a1 + 264) = v7;
  long long v8 = *(_OWORD *)(v5 + 112);
  *(void *)(a1 + 288) = *(void *)(v5 + 128);
  *(_OWORD *)(a1 + 272) = v8;
  *(void *)(v5 + 112) = 0;
  *(_OWORD *)(v5 + 120) = 0u;
  long long v9 = *(_OWORD *)(v5 + 136);
  *(void *)(a1 + 312) = *(void *)(v5 + 152);
  *(_OWORD *)(a1 + 296) = v9;
  *(_OWORD *)(v5 + 144) = 0u;
  *(void *)(v5 + 136) = 0;
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(v5 + 160);
  *(void *)(a1 + 336) = *(void *)(v5 + 176);
  *(void *)(v5 + 176) = 0;
  *(_OWORD *)(v5 + 160) = 0u;
  *(void *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  uint64_t v10 = *(void *)(v5 + 192);
  *(void *)(a1 + 344) = *(void *)(v5 + 184);
  *(void *)(a1 + 352) = v10;
  *(void *)(a1 + 360) = *(void *)(v5 + 200);
  *(void *)(v5 + 200) = 0;
  *(_OWORD *)(v5 + 184) = 0u;
  *(void *)(a1 + 384) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(v5 + 208);
  *(void *)(a1 + 384) = *(void *)(v5 + 224);
  *(void *)(v5 + 224) = 0;
  *(_OWORD *)(v5 + 208) = 0u;
  *(void *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  uint64_t v11 = *(void *)(v5 + 240);
  *(void *)(a1 + 392) = *(void *)(v5 + 232);
  *(void *)(a1 + 400) = v11;
  *(void *)(a1 + 408) = *(void *)(v5 + 248);
  *(_OWORD *)(v5 + 232) = 0u;
  uint64_t v12 = *(void *)(v5 + 256);
  *(_OWORD *)(v5 + 248) = 0u;
  *(void *)(a1 + 416) = v12;
  LODWORD(v12) = *(_DWORD *)(v5 + 264);
  *(unsigned char *)(a1 + 428) = *(unsigned char *)(v5 + 268);
  *(_DWORD *)(a1 + 424) = v12;
  long long v13 = *(_OWORD *)(v5 + 272);
  *(void *)(a1 + 448) = *(void *)(v5 + 288);
  *(_OWORD *)(a1 + 432) = v13;
  *(void *)(v5 + 280) = 0;
  *(void *)(v5 + 288) = 0;
  *(void *)(v5 + 272) = 0;
  __n128 result = *(__n128 *)(v5 + 296);
  *(void *)(a1 + 472) = *(void *)(v5 + 312);
  *(__n128 *)(a1 + 456) = result;
  *(void *)(v5 + 304) = 0;
  *(void *)(v5 + 312) = 0;
  *(void *)(v5 + 296) = 0;
  return result;
}

uint64_t sub_5DCD8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v10 = a3 + v7;
      uint64_t v11 = a4 + v7;
      *(void *)(a4 + v7 - 608) = *(void *)(a3 + v7 - 608);
      sub_4F377C(a4 + v7 - 600, a3 + v7 - 600);
      *(void *)(a4 + v7 - 560) = *(void *)(a3 + v7 - 560);
      uint64_t v12 = (void **)(a4 + v7 - 552);
      if (*(char *)(a4 + v7 - 529) < 0) {
        operator delete(*v12);
      }
      long long v13 = *(_OWORD *)(v10 - 552);
      *(void *)(v11 - 536) = *(void *)(v10 - 536);
      *(_OWORD *)uint64_t v12 = v13;
      *(unsigned char *)(v10 - 529) = 0;
      *(unsigned char *)(v10 - 552) = 0;
      *(unsigned char *)(v11 - 528) = *(unsigned char *)(v10 - 528);
      long long v14 = (void **)(v11 - 520);
      if (*(char *)(v11 - 497) < 0) {
        operator delete(*v14);
      }
      long long v8 = (long long *)(a3 + v7 - 520);
      long long v9 = *v8;
      *(void *)(v11 - 504) = *(void *)(a3 + v7 - 504);
      *(_OWORD *)long long v14 = v9;
      *(unsigned char *)(a3 + v7 - 497) = 0;
      *(unsigned char *)long long v8 = 0;
      *(unsigned char *)(a4 + v7 - 496) = *(unsigned char *)(a3 + v7 - 496);
      *(_DWORD *)(a4 + v7 - 488) = *(_DWORD *)(a3 + v7 - 488);
      sub_4D90B4(a4 + v7 - 480, a3 + v7 - 480);
      sub_4D90B4(a4 + v7 - 320, a3 + v7 - 320);
      sub_4D90B4(a4 + v7 - 160, a3 + v7 - 160);
      v7 -= 608;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

void sub_5DCEFC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
void sub_5DD388(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return;
  }
  uint64_t v4 = a1 + 608;
  if (a1 + 608 == a2) {
    return;
  }
  uint64_t v5 = 0;
  uint64_t v6 = a1;
  while (2)
  {
    uint64_t v8 = v4;
    uint64_t v9 = *(void *)(v6 + 608);
    BOOL v10 = v9 < *(void *)v6;
    if (v9 == *(void *)v6) {
      BOOL v10 = *(_DWORD *)(v6 + 728) > *(_DWORD *)(v6 + 120);
    }
    if (!v10) {
      goto LABEL_7;
    }
    uint64_t v52 = *(void *)(v6 + 608);
    unsigned int v57 = *(_DWORD *)(v6 + 648);
    sub_4F38B0((void *)v57, (uint64_t *)(v6 + 616), &v53);
    uint64_t v58 = *(void *)(v6 + 656);
    uint64_t v60 = *(void *)(v6 + 680);
    long long v59 = *(_OWORD *)(v6 + 664);
    *(void *)(v6 + 680) = 0;
    *(void *)(v6 + 672) = 0;
    *(void *)(v6 + 664) = 0;
    char v61 = *(unsigned char *)(v6 + 688);
    uint64_t v63 = *(void *)(v6 + 712);
    long long v62 = *(_OWORD *)(v6 + 696);
    *(void *)(v6 + 712) = 0;
    *(void *)(v6 + 704) = 0;
    *(void *)(v6 + 696) = 0;
    char v64 = *(unsigned char *)(v6 + 720);
    unsigned int v65 = *(_DWORD *)(v6 + 728);
    long long v66 = *(_OWORD *)(v6 + 736);
    uint64_t v67 = *(void *)(v6 + 752);
    *(void *)(v6 + 744) = 0;
    *(void *)(v6 + 736) = 0;
    *(void *)(v6 + 752) = 0;
    long long v68 = *(_OWORD *)(v6 + 760);
    uint64_t v69 = *(void *)(v6 + 776);
    *(void *)(v6 + 760) = 0;
    *(void *)(v6 + 768) = 0;
    *(void *)(v6 + 776) = 0;
    long long v70 = *(_OWORD *)(v6 + 784);
    uint64_t v71 = *(void *)(v6 + 800);
    *(void *)(v6 + 792) = 0;
    *(void *)(v6 + 784) = 0;
    *(void *)(v6 + 800) = 0;
    long long v72 = *(_OWORD *)(v6 + 808);
    uint64_t v73 = *(void *)(v6 + 824);
    *(void *)(v6 + 808) = 0;
    *(void *)(v6 + 816) = 0;
    *(void *)(v6 + 824) = 0;
    uint64_t v11 = *(void *)(v6 + 832);
    *(void *)(v6 + 832) = 0;
    uint64_t v74 = v11;
    int v75 = *(_DWORD *)(v6 + 840);
    char v76 = *(unsigned char *)(v6 + 844);
    long long v77 = *(_OWORD *)(v6 + 848);
    uint64_t v78 = *(void *)(v6 + 864);
    *(void *)(v6 + 856) = 0;
    *(void *)(v6 + 848) = 0;
    *(void *)(v6 + 864) = 0;
    long long v12 = *(_OWORD *)(v6 + 872);
    uint64_t v80 = *(void *)(v6 + 888);
    long long v79 = v12;
    *(void *)(v6 + 880) = 0;
    *(void *)(v6 + 872) = 0;
    *(void *)(v6 + 888) = 0;
    long long v81 = *(_OWORD *)(v6 + 896);
    uint64_t v13 = *(void *)(v6 + 912);
    *(void *)(v6 + 904) = 0;
    *(void *)(v6 + 896) = 0;
    *(void *)(v6 + 912) = 0;
    uint64_t v14 = *(void *)(v6 + 920);
    uint64_t v82 = v13;
    uint64_t v83 = v14;
    *(void *)(v6 + 920) = 0;
    long long v15 = *(_OWORD *)(v6 + 928);
    long long v16 = *(_OWORD *)(v6 + 944);
    *(void *)(v6 + 936) = 0;
    *(void *)(v6 + 928) = 0;
    long long v84 = v15;
    long long v85 = v16;
    uint64_t v17 = *(void *)(v6 + 960);
    *(void *)(v6 + 952) = 0;
    *(void *)(v6 + 944) = 0;
    *(void *)(v6 + 960) = 0;
    uint64_t v18 = *(void *)(v6 + 968);
    uint64_t v86 = v17;
    uint64_t v87 = v18;
    long long v88 = *(_OWORD *)(v6 + 976);
    *(void *)(v6 + 968) = 0;
    *(void *)(v6 + 984) = 0;
    *(void *)(v6 + 976) = 0;
    uint64_t v19 = *(void *)(v6 + 992);
    *(void *)(v6 + 992) = 0;
    uint64_t v89 = v19;
    LODWORD(v19) = *(_DWORD *)(v6 + 1000);
    char v91 = *(unsigned char *)(v6 + 1004);
    int v90 = v19;
    long long v20 = *(_OWORD *)(v6 + 1008);
    uint64_t v93 = *(void *)(v6 + 1024);
    long long v92 = v20;
    *(void *)(v6 + 1016) = 0;
    *(void *)(v6 + 1008) = 0;
    *(void *)(v6 + 1024) = 0;
    long long v21 = *(_OWORD *)(v6 + 1032);
    uint64_t v95 = *(void *)(v6 + 1048);
    long long v94 = v21;
    *(void *)(v6 + 1040) = 0;
    *(void *)(v6 + 1032) = 0;
    *(void *)(v6 + 1048) = 0;
    long long v96 = *(_OWORD *)(v6 + 1056);
    uint64_t v22 = *(void *)(v6 + 1072);
    *(void *)(v6 + 1064) = 0;
    *(void *)(v6 + 1056) = 0;
    *(void *)(v6 + 1072) = 0;
    uint64_t v23 = *(void *)(v6 + 1080);
    uint64_t v97 = v22;
    uint64_t v98 = v23;
    long long v24 = *(_OWORD *)(v6 + 1088);
    *(void *)(v6 + 1080) = 0;
    *(void *)(v6 + 1096) = 0;
    *(void *)(v6 + 1088) = 0;
    long long v25 = *(_OWORD *)(v6 + 1104);
    long long v99 = v24;
    long long v100 = v25;
    uint64_t v101 = *(void *)(v6 + 1120);
    *(void *)(v6 + 1112) = 0;
    *(void *)(v6 + 1104) = 0;
    *(void *)(v6 + 1120) = 0;
    uint64_t v102 = *(void *)(v6 + 1128);
    long long v103 = *(_OWORD *)(v6 + 1136);
    *(void *)(v6 + 1128) = 0;
    *(void *)(v6 + 1144) = 0;
    *(void *)(v6 + 1136) = 0;
    uint64_t v26 = *(void *)(v6 + 1152);
    *(void *)(v6 + 1152) = 0;
    uint64_t v104 = v26;
    LODWORD(v26) = *(_DWORD *)(v6 + 1160);
    char v106 = *(unsigned char *)(v6 + 1164);
    int v105 = v26;
    long long v27 = *(_OWORD *)(v6 + 1168);
    uint64_t v108 = *(void *)(v6 + 1184);
    long long v107 = v27;
    *(void *)(v6 + 1176) = 0;
    *(void *)(v6 + 1168) = 0;
    *(void *)(v6 + 1184) = 0;
    long long v28 = *(_OWORD *)(v6 + 1192);
    uint64_t v110 = *(void *)(v6 + 1208);
    long long v109 = v28;
    *(void *)(v6 + 1200) = 0;
    *(void *)(v6 + 1192) = 0;
    *(void *)(v6 + 1208) = 0;
    uint64_t v29 = v5;
    uint64_t v30 = *(void *)v6;
    while (1)
    {
      uint64_t v31 = a1 + v29;
      *(void *)(a1 + v29 + 608) = v30;
      uint64_t v32 = (void *)(a1 + v29 + 616);
      uint64_t v33 = (void *)(a1 + v29 + 8);
      int v34 = *(_DWORD *)(a1 + v29 + 648);
      if (v34 != *(_DWORD *)(a1 + v29 + 40))
      {
        if (v34 == 1)
        {
          int v37 = *(void **)(a1 + v29 + 624);
          if (!v37)
          {
LABEL_28:
            sub_4F38B0((void *)*(unsigned int *)(v31 + 40), (uint64_t *)(a1 + v29 + 8), (void *)(a1 + v29 + 616));
            *(_DWORD *)(v31 + 648) = *(_DWORD *)(v31 + 40);
            goto LABEL_29;
          }
          *(void *)(a1 + v29 + 632) = v37;
        }
        else
        {
          if (v34 || (*(char *)(a1 + v29 + 647) & 0x80000000) == 0) {
            goto LABEL_28;
          }
          int v37 = *(void **)(a1 + v29 + 624);
        }
        operator delete(v37);
        goto LABEL_28;
      }
      if (v34 == 1)
      {
        *uint64_t v32 = *v33;
        uint64_t v38 = a1 + v29;
        char v39 = *(void **)(a1 + v29 + 624);
        if (v39)
        {
          *(void *)(v38 + 632) = v39;
          operator delete(v39);
          *(_OWORD *)(v38 + 632) = 0u;
        }
        *(_OWORD *)(v38 + 624) = *(_OWORD *)(v38 + 16);
        *(void *)(v38 + 640) = *(void *)(v38 + 32);
        *(void *)(v38 + 24) = 0;
        *(void *)(v38 + 32) = 0;
        *(void *)(v38 + 16) = 0;
      }
      else if (!v34)
      {
        *uint64_t v32 = *v33;
        uint64_t v35 = a1 + v29;
        BOOL v36 = (void **)(a1 + v29 + 624);
        if (*(char *)(a1 + v29 + 647) < 0) {
          operator delete(*v36);
        }
        *(_OWORD *)BOOL v36 = *(_OWORD *)(v35 + 16);
        *(void *)(a1 + v29 + 640) = *(void *)(v35 + 32);
        *(unsigned char *)(v35 + 39) = 0;
        *(unsigned char *)(v35 + 16) = 0;
      }
LABEL_29:
      uint64_t v40 = a1 + v29;
      *(void *)(a1 + v29 + 656) = *(void *)(a1 + v29 + 48);
      char v41 = (void **)(a1 + v29 + 664);
      if (*(char *)(a1 + v29 + 687) < 0) {
        operator delete(*v41);
      }
      *(_OWORD *)char v41 = *(_OWORD *)(v40 + 56);
      *(void *)(a1 + v29 + 680) = *(void *)(v40 + 72);
      *(unsigned char *)(v40 + 79) = 0;
      *(unsigned char *)(v40 + 56) = 0;
      *(unsigned char *)(v40 + 688) = *(unsigned char *)(v40 + 80);
      uint64_t v42 = v40 + 696;
      if (*(char *)(v40 + 719) < 0) {
        operator delete(*(void **)v42);
      }
      uint64_t v43 = a1 + v29;
      *(_OWORD *)uint64_t v42 = *(_OWORD *)(a1 + v29 + 88);
      *(void *)(v42 + 16) = *(void *)(a1 + v29 + 104);
      *(unsigned char *)(v43 + 111) = 0;
      *(unsigned char *)(v43 + 88) = 0;
      *(unsigned char *)(v43 + 720) = *(unsigned char *)(a1 + v29 + 112);
      *(_DWORD *)(v43 + 728) = *(_DWORD *)(a1 + v29 + 120);
      uint64_t v44 = a1 + v29 + 128;
      sub_4D90B4(a1 + v29 + 736, v44);
      uint64_t v45 = a1 + v29 + 288;
      sub_4D90B4(v43 + 896, v43 + 288);
      uint64_t v46 = a1 + v29 + 448;
      sub_4D90B4(v43 + 1056, v43 + 448);
      if (!v29) {
        break;
      }
      uint64_t v30 = *(void *)(v43 - 608);
      BOOL v47 = v65 > *(_DWORD *)(v43 - 488);
      if (v52 != v30) {
        BOOL v47 = v52 < v30;
      }
      v29 -= 608;
      if (!v47)
      {
        uint64_t v48 = a1 + v29 + 608;
        goto LABEL_39;
      }
    }
    uint64_t v48 = a1;
LABEL_39:
    *(void *)uint64_t v48 = v52;
    sub_4F377C(v43 + 8, (uint64_t)&v53);
    *(void *)(v48 + 48) = v58;
    uint64_t v49 = v43 + 56;
    if (*(char *)(v48 + 79) < 0) {
      operator delete(*(void **)v49);
    }
    uint64_t v50 = v43 + 88;
    *(_OWORD *)uint64_t v49 = v59;
    *(void *)(v49 + 16) = v60;
    HIBYTE(v60) = 0;
    LOBYTE(v59) = 0;
    *(unsigned char *)(v48 + 80) = v61;
    if (*(char *)(v48 + 111) < 0) {
      operator delete(*(void **)v50);
    }
    *(_OWORD *)uint64_t v50 = v62;
    *(void *)(v50 + 16) = v63;
    HIBYTE(v63) = 0;
    LOBYTE(v62) = 0;
    *(unsigned char *)(v48 + 112) = v64;
    *(_DWORD *)(v48 + 120) = v65;
    sub_4D90B4(v44, (uint64_t)&v66);
    sub_4D90B4(v45, (uint64_t)&v81);
    sub_4D90B4(v46, (uint64_t)&v96);
    sub_4D4B58((uint64_t)&v96);
    sub_4D4B58((uint64_t)&v81);
    sub_4D4B58((uint64_t)&v66);
    if (SHIBYTE(v63) < 0)
    {
      operator delete((void *)v62);
      if (SHIBYTE(v60) < 0) {
        goto LABEL_48;
      }
LABEL_45:
      unsigned int v51 = v57;
      if (v57 == 1) {
        goto LABEL_4;
      }
LABEL_49:
      if (!v51 && v56 < 0)
      {
        uint64_t v7 = __p;
LABEL_6:
        operator delete(v7);
      }
    }
    else
    {
      if ((SHIBYTE(v60) & 0x80000000) == 0) {
        goto LABEL_45;
      }
LABEL_48:
      operator delete((void *)v59);
      unsigned int v51 = v57;
      if (v57 != 1) {
        goto LABEL_49;
      }
LABEL_4:
      uint64_t v7 = __p;
      if (__p)
      {
        unsigned __int8 v55 = __p;
        goto LABEL_6;
      }
    }
LABEL_7:
    uint64_t v4 = v8 + 608;
    v5 += 608;
    uint64_t v6 = v8;
    if (v8 + 608 != a2) {
      continue;
    }
    break;
  }
}

void sub_5DDAE8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_58CC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_5DDAF8(uint64_t *a1, uint64_t *a2)
{
  if (a1 == a2) {
    return;
  }
  long long v3 = a1;
  uint64_t v4 = a1 + 76;
  if (a1 + 76 == a2) {
    return;
  }
  uint64_t v5 = a1 - 76;
  while (2)
  {
    uint64_t v6 = v4;
    uint64_t v7 = v3[76];
    BOOL v8 = v7 < *v3;
    if (v7 == *v3) {
      BOOL v8 = *((_DWORD *)v3 + 182) > *((_DWORD *)v3 + 30);
    }
    if (!v8) {
      goto LABEL_5;
    }
    uint64_t v48 = v3[76];
    unsigned int v53 = *((_DWORD *)v3 + 162);
    sub_4F38B0((void *)v53, v3 + 77, &v49);
    uint64_t v54 = v3[82];
    uint64_t v56 = v3[85];
    long long v55 = *(_OWORD *)(v3 + 83);
    v3[85] = 0;
    v3[84] = 0;
    v3[83] = 0;
    char v57 = *((unsigned char *)v3 + 688);
    uint64_t v59 = v3[89];
    long long v58 = *(_OWORD *)(v3 + 87);
    v3[89] = 0;
    v3[88] = 0;
    v3[87] = 0;
    char v60 = *((unsigned char *)v3 + 720);
    unsigned int v61 = *((_DWORD *)v3 + 182);
    long long v62 = *((_OWORD *)v3 + 46);
    uint64_t v63 = v3[94];
    v3[93] = 0;
    v3[92] = 0;
    v3[94] = 0;
    long long v64 = *(_OWORD *)(v3 + 95);
    uint64_t v65 = v3[97];
    v3[95] = 0;
    v3[96] = 0;
    v3[97] = 0;
    long long v66 = *((_OWORD *)v3 + 49);
    uint64_t v67 = v3[100];
    v3[99] = 0;
    v3[98] = 0;
    v3[100] = 0;
    long long v68 = *(_OWORD *)(v3 + 101);
    uint64_t v69 = v3[103];
    v3[101] = 0;
    v3[102] = 0;
    v3[103] = 0;
    uint64_t v9 = v3[104];
    v3[104] = 0;
    uint64_t v70 = v9;
    int v71 = *((_DWORD *)v3 + 210);
    char v72 = *((unsigned char *)v3 + 844);
    long long v73 = *((_OWORD *)v3 + 53);
    uint64_t v74 = v3[108];
    v3[107] = 0;
    v3[106] = 0;
    v3[108] = 0;
    long long v10 = *(_OWORD *)(v3 + 109);
    uint64_t v76 = v3[111];
    long long v75 = v10;
    v3[110] = 0;
    v3[109] = 0;
    v3[111] = 0;
    long long v77 = *((_OWORD *)v3 + 56);
    uint64_t v11 = v3[114];
    v3[113] = 0;
    v3[112] = 0;
    v3[114] = 0;
    uint64_t v12 = v3[115];
    uint64_t v78 = v11;
    uint64_t v79 = v12;
    v3[115] = 0;
    long long v13 = *((_OWORD *)v3 + 58);
    long long v14 = *((_OWORD *)v3 + 59);
    v3[117] = 0;
    v3[116] = 0;
    long long v80 = v13;
    long long v81 = v14;
    uint64_t v15 = v3[120];
    v3[119] = 0;
    v3[118] = 0;
    v3[120] = 0;
    uint64_t v16 = v3[121];
    uint64_t v82 = v15;
    uint64_t v83 = v16;
    long long v84 = *((_OWORD *)v3 + 61);
    v3[121] = 0;
    v3[123] = 0;
    v3[122] = 0;
    uint64_t v17 = v3[124];
    v3[124] = 0;
    uint64_t v85 = v17;
    LODWORD(v17) = *((_DWORD *)v3 + 250);
    char v87 = *((unsigned char *)v3 + 1004);
    int v86 = v17;
    long long v18 = *((_OWORD *)v3 + 63);
    uint64_t v89 = v3[128];
    long long v88 = v18;
    v3[127] = 0;
    v3[126] = 0;
    v3[128] = 0;
    long long v19 = *(_OWORD *)(v3 + 129);
    uint64_t v91 = v3[131];
    long long v90 = v19;
    v3[130] = 0;
    v3[129] = 0;
    v3[131] = 0;
    long long v92 = *((_OWORD *)v3 + 66);
    uint64_t v20 = v3[134];
    v3[133] = 0;
    v3[132] = 0;
    v3[134] = 0;
    uint64_t v21 = v3[135];
    uint64_t v93 = v20;
    uint64_t v94 = v21;
    long long v22 = *((_OWORD *)v3 + 68);
    v3[135] = 0;
    v3[137] = 0;
    v3[136] = 0;
    long long v23 = *((_OWORD *)v3 + 69);
    long long v95 = v22;
    long long v96 = v23;
    uint64_t v97 = v3[140];
    v3[139] = 0;
    v3[138] = 0;
    v3[140] = 0;
    uint64_t v98 = v3[141];
    long long v99 = *((_OWORD *)v3 + 71);
    v3[141] = 0;
    v3[143] = 0;
    v3[142] = 0;
    uint64_t v24 = v3[144];
    v3[144] = 0;
    uint64_t v100 = v24;
    LODWORD(v24) = *((_DWORD *)v3 + 290);
    char v102 = *((unsigned char *)v3 + 1164);
    int v101 = v24;
    long long v25 = *((_OWORD *)v3 + 73);
    uint64_t v104 = v3[148];
    long long v103 = v25;
    v3[147] = 0;
    v3[146] = 0;
    v3[148] = 0;
    long long v26 = *(_OWORD *)(v3 + 149);
    uint64_t v106 = v3[151];
    long long v105 = v26;
    v3[150] = 0;
    v3[149] = 0;
    v3[151] = 0;
    long long v27 = v5;
    uint64_t v28 = *v3;
    do
    {
      v27[152] = v28;
      int v30 = *((_DWORD *)v27 + 314);
      int v31 = *((_DWORD *)v27 + 162);
      if (v30 == v31)
      {
        if (v30 == 1)
        {
          v27[153] = v27[77];
          int v34 = (void *)v27[154];
          long long v35 = 0uLL;
          if (v34)
          {
            v27[155] = (uint64_t)v34;
            operator delete(v34);
            long long v35 = 0uLL;
            *(_OWORD *)(v27 + 155) = 0u;
          }
          *((_OWORD *)v27 + 77) = *((_OWORD *)v27 + 39);
          v27[156] = v27[80];
          v27[80] = 0;
          *((_OWORD *)v27 + 39) = v35;
        }
        else if (!v30)
        {
          v27[153] = v27[77];
          uint64_t v32 = (void **)(v27 + 154);
          if (*((char *)v27 + 1255) < 0) {
            operator delete(*v32);
          }
          *(_OWORD *)uint64_t v32 = *((_OWORD *)v27 + 39);
          v27[156] = v27[80];
          *((unsigned char *)v27 + 647) = 0;
          *((unsigned char *)v27 + 624) = 0;
        }
        goto LABEL_39;
      }
      if (v30 == 1)
      {
        uint64_t v33 = (void *)v27[154];
        if (v33)
        {
          v27[155] = (uint64_t)v33;
          goto LABEL_28;
        }
LABEL_29:
        int v31 = *((_DWORD *)v27 + 162);
        goto LABEL_30;
      }
      if (!v30)
      {
        if (*((char *)v27 + 1255) < 0)
        {
          uint64_t v33 = (void *)v27[154];
LABEL_28:
          operator delete(v33);
          goto LABEL_29;
        }
        goto LABEL_29;
      }
LABEL_30:
      if (v31 == 1)
      {
        v27[153] = v27[77];
        v27[154] = 0;
        v27[156] = 0;
        v27[155] = 0;
        int v37 = (unsigned char *)v27[78];
        uint64_t v38 = (unsigned char *)v27[79];
        int64_t v39 = v38 - v37;
        if (v38 != v37)
        {
          if (v39 < 0) {
            sub_2E00();
          }
          uint64_t v40 = (char *)operator new(v38 - v37);
          v27[154] = (uint64_t)v40;
          v27[155] = (uint64_t)v40;
          char v41 = &v40[8 * (v39 >> 3)];
          v27[156] = (uint64_t)v41;
          memcpy(v40, v37, v39);
          v27[155] = (uint64_t)v41;
        }
      }
      else if (!v31)
      {
        v27[153] = v27[77];
        BOOL v36 = v27 + 154;
        if (*((char *)v27 + 647) < 0)
        {
          sub_4200(v36, (void *)v27[78], v27[79]);
        }
        else
        {
          *(_OWORD *)BOOL v36 = *((_OWORD *)v27 + 39);
          v27[156] = v27[80];
        }
      }
      *((_DWORD *)v27 + 314) = *((_DWORD *)v27 + 162);
LABEL_39:
      v27[158] = v27[82];
      uint64_t v42 = (void **)(v27 + 159);
      if (*((char *)v27 + 1295) < 0) {
        operator delete(*v42);
      }
      v27[161] = v27[85];
      *(_OWORD *)uint64_t v42 = *(_OWORD *)(v27 + 83);
      *((unsigned char *)v27 + 687) = 0;
      *((unsigned char *)v27 + 664) = 0;
      *((unsigned char *)v27 + 1296) = *((unsigned char *)v27 + 688);
      uint64_t v43 = (void **)(v27 + 163);
      if (*((char *)v27 + 1327) < 0) {
        operator delete(*v43);
      }
      v27[165] = v27[89];
      *(_OWORD *)uint64_t v43 = *(_OWORD *)(v27 + 87);
      *((unsigned char *)v27 + 719) = 0;
      *((unsigned char *)v27 + 696) = 0;
      *((unsigned char *)v27 + 1328) = *((unsigned char *)v27 + 720);
      *((_DWORD *)v27 + 334) = *((_DWORD *)v27 + 182);
      sub_4D90B4((uint64_t)(v27 + 168), (uint64_t)(v27 + 92));
      sub_4D90B4((uint64_t)(v27 + 188), (uint64_t)(v27 + 112));
      sub_4D90B4((uint64_t)(v27 + 208), (uint64_t)(v27 + 132));
      uint64_t v28 = *v27;
      BOOL v29 = v61 > *((_DWORD *)v27 + 30);
      if (v48 != *v27) {
        BOOL v29 = v48 < *v27;
      }
      v27 -= 76;
    }
    while (v29);
    v27[152] = v48;
    sub_4F377C((uint64_t)(v27 + 153), (uint64_t)&v49);
    v27[158] = v54;
    uint64_t v44 = (void **)(v27 + 159);
    if (*((char *)v27 + 1295) < 0) {
      operator delete(*v44);
    }
    uint64_t v45 = (void **)(v27 + 163);
    *(_OWORD *)uint64_t v44 = v55;
    v27[161] = v56;
    HIBYTE(v56) = 0;
    LOBYTE(v55) = 0;
    *((unsigned char *)v27 + 1296) = v57;
    if (*((char *)v27 + 1327) < 0) {
      operator delete(*v45);
    }
    *(_OWORD *)uint64_t v45 = v58;
    v27[165] = v59;
    HIBYTE(v59) = 0;
    LOBYTE(v58) = 0;
    *((unsigned char *)v27 + 1328) = v60;
    *((_DWORD *)v27 + 334) = v61;
    sub_4D90B4((uint64_t)(v27 + 168), (uint64_t)&v62);
    sub_4D90B4((uint64_t)(v27 + 188), (uint64_t)&v77);
    sub_4D90B4((uint64_t)(v27 + 208), (uint64_t)&v92);
    sub_4D4B58((uint64_t)&v92);
    sub_4D4B58((uint64_t)&v77);
    sub_4D4B58((uint64_t)&v62);
    if (SHIBYTE(v59) < 0)
    {
      operator delete((void *)v58);
      if (SHIBYTE(v56) < 0) {
        goto LABEL_54;
      }
LABEL_49:
      unsigned int v46 = v53;
      if (v53 != 1) {
        goto LABEL_50;
      }
LABEL_55:
      BOOL v47 = __p;
      if (__p)
      {
        unsigned int v51 = __p;
LABEL_4:
        operator delete(v47);
      }
    }
    else
    {
      if ((SHIBYTE(v56) & 0x80000000) == 0) {
        goto LABEL_49;
      }
LABEL_54:
      operator delete((void *)v55);
      unsigned int v46 = v53;
      if (v53 == 1) {
        goto LABEL_55;
      }
LABEL_50:
      if (!v46 && v52 < 0)
      {
        BOOL v47 = __p;
        goto LABEL_4;
      }
    }
LABEL_5:
    uint64_t v4 = v6 + 76;
    v5 += 76;
    long long v3 = v6;
    if (v6 + 76 != a2) {
      continue;
    }
    break;
  }
}

void sub_5DE2A0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_58CC(exception_object);
}

uint64_t sub_5DE2E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unsigned int v7 = *(_DWORD *)(a2 + 120);
  BOOL v8 = *(void *)a2 < *(void *)a1;
  if (*(void *)a2 == *(void *)a1) {
    BOOL v8 = v7 > *(_DWORD *)(a1 + 120);
  }
  BOOL v9 = *(_DWORD *)(a3 + 120) > v7;
  BOOL v10 = *(void *)a3 == v6;
  BOOL v11 = *(void *)a3 < v6;
  if (v10) {
    BOOL v11 = v9;
  }
  if (v8)
  {
    if (v11)
    {
      sub_5DF7E8((uint64_t *)a1, (uint64_t *)a3);
      return 1;
    }
    sub_5DF7E8((uint64_t *)a1, (uint64_t *)a2);
    BOOL v14 = *(void *)a3 < *(void *)a2;
    if (*(void *)a3 == *(void *)a2) {
      BOOL v14 = *(_DWORD *)(a3 + 120) > *(_DWORD *)(a2 + 120);
    }
    if (v14)
    {
      sub_5DF7E8((uint64_t *)a2, (uint64_t *)a3);
      return 2;
    }
    return 1;
  }
  if (v11)
  {
    sub_5DF7E8((uint64_t *)a2, (uint64_t *)a3);
    BOOL v13 = *(void *)a2 < *(void *)a1;
    if (*(void *)a2 == *(void *)a1) {
      BOOL v13 = *(_DWORD *)(a2 + 120) > *(_DWORD *)(a1 + 120);
    }
    if (v13)
    {
      sub_5DF7E8((uint64_t *)a1, (uint64_t *)a2);
      return 2;
    }
    return 1;
  }
  return 0;
}

uint64_t *sub_5DE444(uint64_t a1, uint64_t *a2)
{
  uint64_t v62 = *(void *)a1;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (void *)*(unsigned int *)(a1 + 40);
  int v67 = (int)v5;
  sub_4F38B0(v5, v4, &v63);
  uint64_t v68 = *(void *)(a1 + 48);
  *(_OWORD *)uint64_t v69 = *(_OWORD *)(a1 + 56);
  uint64_t v70 = *(void *)(a1 + 72);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  char v71 = *(unsigned char *)(a1 + 80);
  *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 88);
  uint64_t v73 = *(void *)(a1 + 104);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  char v74 = *(unsigned char *)(a1 + 112);
  unsigned int v75 = *(_DWORD *)(a1 + 120);
  unsigned int v6 = v75;
  long long v76 = *(_OWORD *)(a1 + 128);
  uint64_t v7 = *(void *)(a1 + 144);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  long long v78 = *(_OWORD *)(a1 + 152);
  uint64_t v8 = *(void *)(a1 + 168);
  uint64_t v77 = v7;
  uint64_t v79 = v8;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  long long v80 = *(_OWORD *)(a1 + 176);
  uint64_t v9 = *(void *)(a1 + 192);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  long long v82 = *(_OWORD *)(a1 + 200);
  uint64_t v10 = *(void *)(a1 + 216);
  uint64_t v11 = *(void *)(a1 + 224);
  uint64_t v81 = v9;
  uint64_t v83 = v10;
  uint64_t v84 = v11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  LODWORD(v9) = *(_DWORD *)(a1 + 232);
  char v86 = *(unsigned char *)(a1 + 236);
  int v85 = v9;
  uint64_t v12 = *(void *)(a1 + 256);
  long long v87 = *(_OWORD *)(a1 + 240);
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  uint64_t v13 = *(void *)(a1 + 280);
  long long v89 = *(_OWORD *)(a1 + 264);
  uint64_t v88 = v12;
  uint64_t v90 = v13;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  long long v91 = *(_OWORD *)(a1 + 288);
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  uint64_t v14 = *(void *)(a1 + 312);
  uint64_t v92 = *(void *)(a1 + 304);
  uint64_t v93 = v14;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  long long v15 = *(_OWORD *)(a1 + 320);
  long long v16 = *(_OWORD *)(a1 + 336);
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  long long v94 = v15;
  long long v95 = v16;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  uint64_t v17 = *(void *)(a1 + 360);
  uint64_t v96 = *(void *)(a1 + 352);
  uint64_t v97 = v17;
  long long v98 = *(_OWORD *)(a1 + 368);
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  uint64_t v18 = *(void *)(a1 + 384);
  *(void *)(a1 + 384) = 0;
  uint64_t v99 = v18;
  LODWORD(v18) = *(_DWORD *)(a1 + 392);
  char v101 = *(unsigned char *)(a1 + 396);
  int v100 = v18;
  uint64_t v19 = *(void *)(a1 + 416);
  long long v102 = *(_OWORD *)(a1 + 400);
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  uint64_t v20 = *(void *)(a1 + 440);
  long long v104 = *(_OWORD *)(a1 + 424);
  uint64_t v103 = v19;
  uint64_t v105 = v20;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  long long v106 = *(_OWORD *)(a1 + 448);
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  uint64_t v21 = *(void *)(a1 + 472);
  uint64_t v107 = *(void *)(a1 + 464);
  uint64_t v108 = v21;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  long long v22 = *(_OWORD *)(a1 + 480);
  long long v23 = *(_OWORD *)(a1 + 496);
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 0;
  long long v109 = v22;
  long long v110 = v23;
  uint64_t v24 = *(void *)(a1 + 520);
  uint64_t v111 = *(void *)(a1 + 512);
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  uint64_t v112 = v24;
  long long v113 = *(_OWORD *)(a1 + 528);
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 536) = 0;
  uint64_t v25 = *(void *)(a1 + 544);
  *(void *)(a1 + 544) = 0;
  uint64_t v114 = v25;
  LODWORD(v25) = *(_DWORD *)(a1 + 552);
  char v116 = *(unsigned char *)(a1 + 556);
  int v115 = v25;
  long long v26 = *(_OWORD *)(a1 + 560);
  uint64_t v118 = *(void *)(a1 + 576);
  long long v117 = v26;
  *(void *)(a1 + 560) = 0;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 576) = 0;
  uint64_t v27 = *(void *)(a1 + 600);
  long long v28 = *(_OWORD *)(a1 + 584);
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 600) = 0;
  BOOL v29 = a2 - 76;
  uint64_t v30 = v62;
  uint64_t v31 = *(a2 - 76);
  BOOL v32 = v62 == v31;
  BOOL v33 = v62 < v31;
  if (v32) {
    BOOL v33 = v6 > *((_DWORD *)a2 - 122);
  }
  long long v119 = v28;
  uint64_t v120 = v27;
  if (v33)
  {
    int v34 = (uint64_t *)a1;
    do
    {
      long long v35 = v34 + 76;
      uint64_t v36 = v34[76];
      BOOL v37 = v6 > *((_DWORD *)v34 + 182);
      BOOL v32 = v62 == v36;
      BOOL v38 = v62 < v36;
      if (v32) {
        BOOL v38 = v37;
      }
      int v34 = v35;
    }
    while (!v38);
  }
  else
  {
    int64_t v39 = (uint64_t *)(a1 + 608);
    do
    {
      long long v35 = v39;
      if (v39 >= a2) {
        break;
      }
      uint64_t v40 = *v39;
      BOOL v41 = v6 > *((_DWORD *)v35 + 30);
      BOOL v32 = v62 == v40;
      BOOL v42 = v62 < v40;
      if (!v32) {
        BOOL v41 = v42;
      }
      int64_t v39 = v35 + 76;
    }
    while (!v41);
  }
  if (v35 >= a2) {
    goto LABEL_19;
  }
  do
  {
    BOOL v43 = v62 < *v29;
    if (v62 == *v29) {
      BOOL v43 = v6 > *((_DWORD *)v29 + 30);
    }
    v29 -= 76;
  }
  while (v43);
  while (1)
  {
    a2 = v29 + 76;
LABEL_19:
    if (v35 >= a2) {
      break;
    }
    sub_5DF7E8(v35, a2);
    uint64_t v30 = v62;
    do
    {
      uint64_t v44 = v35[76];
      unsigned int v45 = *((_DWORD *)v35 + 182);
      v35 += 76;
      BOOL v46 = v75 > v45;
      BOOL v32 = v62 == v44;
      BOOL v47 = v62 < v44;
      if (v32) {
        BOOL v47 = v46;
      }
    }
    while (!v47);
    BOOL v29 = a2 - 76;
    do
    {
      BOOL v48 = v62 < *v29;
      if (v62 == *v29) {
        BOOL v48 = v75 > *((_DWORD *)v29 + 30);
      }
      v29 -= 76;
    }
    while (v48);
  }
  uint64_t v49 = v35 - 76;
  if (v35 - 76 != (uint64_t *)a1)
  {
    uint64_t v50 = (uint64_t)v4;
    unsigned int v51 = (void **)(a1 + 56);
    *(void *)a1 = *v49;
    sub_4F377C(v50, (uint64_t)(v35 - 75));
    *(void *)(a1 + 48) = *(v35 - 70);
    if (*(char *)(a1 + 79) < 0) {
      operator delete(*v51);
    }
    char v52 = (void **)(a1 + 88);
    long long v53 = *(_OWORD *)(v35 - 69);
    *(void *)(a1 + 72) = *(v35 - 67);
    *(_OWORD *)unsigned int v51 = v53;
    *((unsigned char *)v35 - 529) = 0;
    *((unsigned char *)v35 - 552) = 0;
    *(unsigned char *)(a1 + 80) = *((unsigned char *)v35 - 528);
    if (*(char *)(a1 + 111) < 0) {
      operator delete(*v52);
    }
    long long v54 = *(_OWORD *)(v35 - 65);
    *(void *)(a1 + 104) = *(v35 - 63);
    *(_OWORD *)char v52 = v54;
    *((unsigned char *)v35 - 497) = 0;
    *((unsigned char *)v35 - 520) = 0;
    *(unsigned char *)(a1 + 112) = *((unsigned char *)v35 - 496);
    *(_DWORD *)(a1 + 120) = *((_DWORD *)v35 - 122);
    sub_4D90B4(a1 + 128, (uint64_t)(v35 - 60));
    sub_4D90B4(a1 + 288, (uint64_t)(v35 - 40));
    sub_4D90B4(a1 + 448, (uint64_t)(v35 - 20));
    uint64_t v30 = v62;
  }
  *uint64_t v49 = v30;
  sub_4F377C((uint64_t)(v35 - 75), (uint64_t)&v63);
  *(v35 - 70) = v68;
  long long v55 = (void **)(v35 - 69);
  if (*((char *)v35 - 529) < 0) {
    operator delete(*v55);
  }
  long long v56 = *(_OWORD *)v69;
  *(v35 - 67) = v70;
  *(_OWORD *)long long v55 = v56;
  HIBYTE(v70) = 0;
  LOBYTE(v69[0]) = 0;
  *((unsigned char *)v35 - 528) = v71;
  char v57 = (void **)(v35 - 65);
  if (*((char *)v35 - 497) < 0) {
    operator delete(*v57);
  }
  long long v58 = *(_OWORD *)__p;
  *(v35 - 63) = v73;
  *(_OWORD *)char v57 = v58;
  HIBYTE(v73) = 0;
  LOBYTE(__p[0]) = 0;
  *((unsigned char *)v35 - 496) = v74;
  *((_DWORD *)v35 - 122) = v75;
  sub_4D90B4((uint64_t)(v35 - 60), (uint64_t)&v76);
  sub_4D90B4((uint64_t)(v35 - 40), (uint64_t)&v91);
  sub_4D90B4((uint64_t)(v35 - 20), (uint64_t)&v106);
  sub_4D4B58((uint64_t)&v106);
  sub_4D4B58((uint64_t)&v91);
  sub_4D4B58((uint64_t)&v76);
  if ((SHIBYTE(v73) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v70) & 0x80000000) == 0) {
      goto LABEL_41;
    }
LABEL_46:
    operator delete(v69[0]);
    int v59 = v67;
    if (v67 != 1) {
      goto LABEL_42;
    }
    goto LABEL_47;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v70) < 0) {
    goto LABEL_46;
  }
LABEL_41:
  int v59 = v67;
  if (v67 != 1)
  {
LABEL_42:
    if (!v59 && v66 < 0)
    {
      char v60 = v64;
LABEL_49:
      operator delete(v60);
      return v35;
    }
    return v35;
  }
LABEL_47:
  char v60 = v64;
  if (v64)
  {
    uint64_t v65 = v64;
    goto LABEL_49;
  }
  return v35;
}

unint64_t sub_5DEA6C(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = *(void *)a1;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (void *)*(unsigned int *)(a1 + 40);
  int v64 = (int)v5;
  sub_4F38B0(v5, v4, &v60);
  uint64_t v6 = 0;
  uint64_t v65 = *(void *)(a1 + 48);
  *(_OWORD *)char v66 = *(_OWORD *)(a1 + 56);
  uint64_t v67 = *(void *)(a1 + 72);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  char v68 = *(unsigned char *)(a1 + 80);
  char v57 = (void **)(a1 + 56);
  long long v58 = (void **)(a1 + 88);
  *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 88);
  uint64_t v70 = *(void *)(a1 + 104);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  char v71 = *(unsigned char *)(a1 + 112);
  unsigned int v7 = *(_DWORD *)(a1 + 120);
  unsigned int v72 = v7;
  long long v73 = *(_OWORD *)(a1 + 128);
  uint64_t v8 = *(void *)(a1 + 144);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  long long v75 = *(_OWORD *)(a1 + 152);
  uint64_t v9 = *(void *)(a1 + 168);
  uint64_t v74 = v8;
  uint64_t v76 = v9;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  long long v77 = *(_OWORD *)(a1 + 176);
  uint64_t v10 = *(void *)(a1 + 192);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  long long v79 = *(_OWORD *)(a1 + 200);
  uint64_t v11 = *(void *)(a1 + 216);
  uint64_t v12 = *(void *)(a1 + 224);
  uint64_t v78 = v10;
  uint64_t v80 = v11;
  uint64_t v81 = v12;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  LODWORD(v10) = *(_DWORD *)(a1 + 232);
  char v83 = *(unsigned char *)(a1 + 236);
  int v82 = v10;
  uint64_t v13 = *(void *)(a1 + 256);
  long long v84 = *(_OWORD *)(a1 + 240);
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  uint64_t v14 = *(void *)(a1 + 280);
  long long v86 = *(_OWORD *)(a1 + 264);
  uint64_t v85 = v13;
  uint64_t v87 = v14;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  long long v88 = *(_OWORD *)(a1 + 288);
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  uint64_t v15 = *(void *)(a1 + 312);
  uint64_t v89 = *(void *)(a1 + 304);
  uint64_t v90 = v15;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  long long v16 = *(_OWORD *)(a1 + 320);
  long long v17 = *(_OWORD *)(a1 + 336);
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  long long v91 = v16;
  long long v92 = v17;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  uint64_t v18 = *(void *)(a1 + 360);
  uint64_t v93 = *(void *)(a1 + 352);
  uint64_t v94 = v18;
  long long v95 = *(_OWORD *)(a1 + 368);
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  uint64_t v19 = *(void *)(a1 + 384);
  *(void *)(a1 + 384) = 0;
  uint64_t v96 = v19;
  LODWORD(v19) = *(_DWORD *)(a1 + 392);
  char v98 = *(unsigned char *)(a1 + 396);
  int v97 = v19;
  uint64_t v20 = *(void *)(a1 + 416);
  long long v99 = *(_OWORD *)(a1 + 400);
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  uint64_t v21 = *(void *)(a1 + 440);
  long long v101 = *(_OWORD *)(a1 + 424);
  uint64_t v100 = v20;
  uint64_t v102 = v21;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  uint64_t v22 = *(void *)(a1 + 472);
  uint64_t v104 = *(void *)(a1 + 464);
  uint64_t v105 = v22;
  uint64_t v23 = *(void *)(a1 + 520);
  uint64_t v108 = *(void *)(a1 + 512);
  long long v103 = *(_OWORD *)(a1 + 448);
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  long long v24 = *(_OWORD *)(a1 + 480);
  long long v25 = *(_OWORD *)(a1 + 496);
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 0;
  long long v106 = v24;
  long long v107 = v25;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  uint64_t v109 = v23;
  long long v110 = *(_OWORD *)(a1 + 528);
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 536) = 0;
  uint64_t v26 = *(void *)(a1 + 544);
  *(void *)(a1 + 544) = 0;
  uint64_t v111 = v26;
  char v113 = *(unsigned char *)(a1 + 556);
  int v112 = *(_DWORD *)(a1 + 552);
  long long v27 = *(_OWORD *)(a1 + 560);
  uint64_t v115 = *(void *)(a1 + 576);
  long long v114 = v27;
  *(void *)(a1 + 560) = 0;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 576) = 0;
  uint64_t v28 = *(void *)(a1 + 600);
  long long v116 = *(_OWORD *)(a1 + 584);
  uint64_t v117 = v28;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 600) = 0;
  uint64_t v29 = v59;
  do
  {
    uint64_t v30 = *(void *)(a1 + v6 + 608);
    BOOL v31 = *(_DWORD *)(a1 + v6 + 728) > v7;
    BOOL v32 = v30 == v59;
    BOOL v33 = v30 < v59;
    if (!v32) {
      BOOL v31 = v33;
    }
    v6 += 608;
  }
  while (v31);
  unint64_t v34 = a1 + v6;
  BOOL v32 = v6 == 608;
  uint64_t v35 = a2 - 608;
  if (v32)
  {
    while (1)
    {
      BOOL v37 = (uint64_t *)(v35 + 608);
      if (v34 >= v35 + 608) {
        break;
      }
      BOOL v55 = *(void *)v35 < v59;
      if (*(void *)v35 == v59) {
        BOOL v55 = *(_DWORD *)(v35 + 120) > v7;
      }
      v35 -= 608;
      if (v55) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    do
    {
      BOOL v36 = *(void *)v35 < v59;
      if (*(void *)v35 == v59) {
        BOOL v36 = *(_DWORD *)(v35 + 120) > v7;
      }
      v35 -= 608;
    }
    while (!v36);
LABEL_9:
    BOOL v37 = (uint64_t *)(v35 + 608);
  }
  unint64_t v38 = v34;
  if (v34 < (unint64_t)v37)
  {
    int64_t v39 = v37;
    do
    {
      sub_5DF7E8((uint64_t *)v38, v39);
      uint64_t v29 = v59;
      do
      {
        uint64_t v40 = *(void *)(v38 + 608);
        unsigned int v41 = *(_DWORD *)(v38 + 728);
        v38 += 608;
        BOOL v42 = v41 > v72;
        BOOL v32 = v40 == v59;
        BOOL v43 = v40 < v59;
        if (v32) {
          BOOL v43 = v42;
        }
      }
      while (v43);
      uint64_t v44 = v39 - 76;
      do
      {
        BOOL v45 = *v44 < v59;
        if (*v44 == v59) {
          BOOL v45 = *((_DWORD *)v44 + 30) > v72;
        }
        v44 -= 76;
      }
      while (!v45);
      int64_t v39 = v44 + 76;
    }
    while (v38 < (unint64_t)(v44 + 76));
  }
  BOOL v46 = (uint64_t *)(v38 - 608);
  if (v38 - 608 != a1)
  {
    *(void *)a1 = *v46;
    sub_4F377C((uint64_t)v4, v38 - 600);
    *(void *)(a1 + 48) = *(void *)(v38 - 560);
    if (*(char *)(a1 + 79) < 0) {
      operator delete(*v57);
    }
    long long v47 = *(_OWORD *)(v38 - 552);
    *(void *)(a1 + 72) = *(void *)(v38 - 536);
    *(_OWORD *)char v57 = v47;
    *(unsigned char *)(v38 - 529) = 0;
    *(unsigned char *)(v38 - 552) = 0;
    *(unsigned char *)(a1 + 80) = *(unsigned char *)(v38 - 528);
    if (*(char *)(a1 + 111) < 0) {
      operator delete(*v58);
    }
    long long v48 = *(_OWORD *)(v38 - 520);
    *(void *)(a1 + 104) = *(void *)(v38 - 504);
    *(_OWORD *)long long v58 = v48;
    *(unsigned char *)(v38 - 497) = 0;
    *(unsigned char *)(v38 - 520) = 0;
    *(unsigned char *)(a1 + 112) = *(unsigned char *)(v38 - 496);
    *(_DWORD *)(a1 + 120) = *(_DWORD *)(v38 - 488);
    sub_4D90B4(a1 + 128, v38 - 480);
    sub_4D90B4(a1 + 288, v38 - 320);
    sub_4D90B4(a1 + 448, v38 - 160);
    uint64_t v29 = v59;
  }
  *BOOL v46 = v29;
  sub_4F377C(v38 - 600, (uint64_t)&v60);
  *(void *)(v38 - 560) = v65;
  uint64_t v49 = (void **)(v38 - 552);
  if (*(char *)(v38 - 529) < 0) {
    operator delete(*v49);
  }
  long long v50 = *(_OWORD *)v66;
  *(void *)(v38 - 536) = v67;
  *(_OWORD *)uint64_t v49 = v50;
  HIBYTE(v67) = 0;
  LOBYTE(v66[0]) = 0;
  *(unsigned char *)(v38 - 528) = v68;
  unsigned int v51 = (void **)(v38 - 520);
  if (*(char *)(v38 - 497) < 0) {
    operator delete(*v51);
  }
  long long v52 = *(_OWORD *)__p;
  *(void *)(v38 - 504) = v70;
  *(_OWORD *)unsigned int v51 = v52;
  HIBYTE(v70) = 0;
  LOBYTE(__p[0]) = 0;
  *(unsigned char *)(v38 - 496) = v71;
  *(_DWORD *)(v38 - 488) = v72;
  sub_4D90B4(v38 - 480, (uint64_t)&v73);
  sub_4D90B4(v38 - 320, (uint64_t)&v88);
  sub_4D90B4(v38 - 160, (uint64_t)&v103);
  sub_4D4B58((uint64_t)&v103);
  sub_4D4B58((uint64_t)&v88);
  sub_4D4B58((uint64_t)&v73);
  if ((SHIBYTE(v70) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v67) & 0x80000000) == 0) {
      goto LABEL_33;
    }
LABEL_43:
    operator delete(v66[0]);
    int v53 = v64;
    if (v64 != 1) {
      goto LABEL_34;
    }
    goto LABEL_44;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v67) < 0) {
    goto LABEL_43;
  }
LABEL_33:
  int v53 = v64;
  if (v64 != 1)
  {
LABEL_34:
    if (!v53 && v63 < 0)
    {
      long long v54 = v61;
LABEL_46:
      operator delete(v54);
      return v38 - 608;
    }
    return v38 - 608;
  }
LABEL_44:
  long long v54 = v61;
  if (v61)
  {
    uint64_t v62 = v61;
    goto LABEL_46;
  }
  return v38 - 608;
}

void sub_5DF090(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_58CC(a1);
}

BOOL sub_5DF09C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(0x86BCA1AF286BCA1BLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      long long v47 = (uint64_t *)(a2 - 608);
      uint64_t v48 = *(void *)(v2 - 608);
      BOOL v49 = v48 == *(void *)a1;
      BOOL v50 = v48 < *(void *)a1;
      if (v49) {
        BOOL v50 = *(_DWORD *)(v2 - 488) > *(_DWORD *)(a1 + 120);
      }
      if (v50)
      {
        sub_5DF7E8((uint64_t *)a1, v47);
        return 1;
      }
      return result;
    case 3uLL:
      sub_5DE2E4(a1, a1 + 608, a2 - 608);
      return 1;
    case 4uLL:
      sub_5DFCD4(a1, a1 + 608, a1 + 1216, a2 - 608);
      return 1;
    case 5uLL:
      sub_5DFDD4(a1, a1 + 608, a1 + 1216, a1 + 1824, a2 - 608);
      return 1;
    default:
      uint64_t v6 = a1 + 1216;
      sub_5DE2E4(a1, a1 + 608, a1 + 1216);
      uint64_t v7 = a1 + 1824;
      if (a1 + 1824 == v2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      uint64_t v51 = v2;
      break;
  }
  while (1)
  {
    BOOL v10 = *(void *)v7 < *(void *)v6;
    if (*(void *)v7 == *(void *)v6) {
      BOOL v10 = *(_DWORD *)(v7 + 120) > *(_DWORD *)(v6 + 120);
    }
    if (!v10) {
      goto LABEL_7;
    }
    uint64_t v52 = *(void *)v7;
    unsigned int v57 = *(_DWORD *)(v7 + 40);
    sub_4F38B0((void *)v57, (uint64_t *)(v7 + 8), &v53);
    uint64_t v58 = *(void *)(v7 + 48);
    long long v59 = *(_OWORD *)(v7 + 56);
    uint64_t v60 = *(void *)(v7 + 72);
    *(void *)(v7 + 56) = 0;
    *(void *)(v7 + 64) = 0;
    *(void *)(v7 + 72) = 0;
    char v61 = *(unsigned char *)(v7 + 80);
    long long v62 = *(_OWORD *)(v7 + 88);
    uint64_t v63 = *(void *)(v7 + 104);
    *(void *)(v7 + 96) = 0;
    *(void *)(v7 + 104) = 0;
    *(void *)(v7 + 88) = 0;
    char v64 = *(unsigned char *)(v7 + 112);
    unsigned int v65 = *(_DWORD *)(v7 + 120);
    long long v66 = *(_OWORD *)(v7 + 128);
    uint64_t v11 = *(void *)(v7 + 144);
    *(void *)(v7 + 128) = 0;
    *(void *)(v7 + 136) = 0;
    long long v68 = *(_OWORD *)(v7 + 152);
    uint64_t v12 = *(void *)(v7 + 168);
    uint64_t v67 = v11;
    uint64_t v69 = v12;
    *(void *)(v7 + 144) = 0;
    *(void *)(v7 + 152) = 0;
    *(void *)(v7 + 160) = 0;
    *(void *)(v7 + 168) = 0;
    long long v70 = *(_OWORD *)(v7 + 176);
    uint64_t v13 = *(void *)(v7 + 192);
    *(void *)(v7 + 176) = 0;
    *(void *)(v7 + 184) = 0;
    long long v72 = *(_OWORD *)(v7 + 200);
    uint64_t v14 = *(void *)(v7 + 216);
    uint64_t v15 = *(void *)(v7 + 224);
    uint64_t v71 = v13;
    uint64_t v73 = v14;
    uint64_t v74 = v15;
    *(void *)(v7 + 192) = 0;
    *(void *)(v7 + 200) = 0;
    *(void *)(v7 + 208) = 0;
    *(void *)(v7 + 216) = 0;
    *(void *)(v7 + 224) = 0;
    LODWORD(v13) = *(_DWORD *)(v7 + 232);
    char v76 = *(unsigned char *)(v7 + 236);
    int v75 = v13;
    long long v16 = *(_OWORD *)(v7 + 240);
    uint64_t v78 = *(void *)(v7 + 256);
    long long v77 = v16;
    *(void *)(v7 + 240) = 0;
    *(void *)(v7 + 248) = 0;
    long long v17 = *(_OWORD *)(v7 + 264);
    uint64_t v80 = *(void *)(v7 + 280);
    long long v79 = v17;
    *(void *)(v7 + 256) = 0;
    *(void *)(v7 + 264) = 0;
    *(void *)(v7 + 272) = 0;
    *(void *)(v7 + 280) = 0;
    long long v81 = *(_OWORD *)(v7 + 288);
    *(void *)(v7 + 288) = 0;
    *(void *)(v7 + 296) = 0;
    uint64_t v18 = *(void *)(v7 + 312);
    uint64_t v82 = *(void *)(v7 + 304);
    uint64_t v83 = v18;
    *(void *)(v7 + 304) = 0;
    *(void *)(v7 + 312) = 0;
    long long v19 = *(_OWORD *)(v7 + 320);
    long long v20 = *(_OWORD *)(v7 + 336);
    *(void *)(v7 + 320) = 0;
    *(void *)(v7 + 328) = 0;
    long long v84 = v19;
    long long v85 = v20;
    *(void *)(v7 + 336) = 0;
    *(void *)(v7 + 344) = 0;
    uint64_t v21 = *(void *)(v7 + 360);
    uint64_t v86 = *(void *)(v7 + 352);
    uint64_t v87 = v21;
    long long v88 = *(_OWORD *)(v7 + 368);
    *(void *)(v7 + 352) = 0;
    *(void *)(v7 + 360) = 0;
    *(void *)(v7 + 368) = 0;
    *(void *)(v7 + 376) = 0;
    uint64_t v22 = *(void *)(v7 + 384);
    *(void *)(v7 + 384) = 0;
    uint64_t v89 = v22;
    LODWORD(v22) = *(_DWORD *)(v7 + 392);
    char v91 = *(unsigned char *)(v7 + 396);
    int v90 = v22;
    long long v23 = *(_OWORD *)(v7 + 400);
    uint64_t v93 = *(void *)(v7 + 416);
    long long v92 = v23;
    *(void *)(v7 + 400) = 0;
    *(void *)(v7 + 408) = 0;
    *(void *)(v7 + 416) = 0;
    long long v24 = *(_OWORD *)(v7 + 424);
    uint64_t v95 = *(void *)(v7 + 440);
    long long v94 = v24;
    *(void *)(v7 + 424) = 0;
    *(void *)(v7 + 432) = 0;
    *(void *)(v7 + 440) = 0;
    long long v96 = *(_OWORD *)(v7 + 448);
    *(void *)(v7 + 448) = 0;
    *(void *)(v7 + 456) = 0;
    uint64_t v25 = *(void *)(v7 + 472);
    uint64_t v97 = *(void *)(v7 + 464);
    uint64_t v98 = v25;
    *(void *)(v7 + 464) = 0;
    *(void *)(v7 + 472) = 0;
    long long v26 = *(_OWORD *)(v7 + 480);
    long long v27 = *(_OWORD *)(v7 + 496);
    *(void *)(v7 + 480) = 0;
    *(void *)(v7 + 488) = 0;
    long long v99 = v26;
    long long v100 = v27;
    uint64_t v28 = *(void *)(v7 + 520);
    uint64_t v101 = *(void *)(v7 + 512);
    *(void *)(v7 + 496) = 0;
    *(void *)(v7 + 504) = 0;
    uint64_t v102 = v28;
    long long v103 = *(_OWORD *)(v7 + 528);
    *(void *)(v7 + 512) = 0;
    *(void *)(v7 + 520) = 0;
    *(void *)(v7 + 528) = 0;
    *(void *)(v7 + 536) = 0;
    uint64_t v29 = *(void *)(v7 + 544);
    *(void *)(v7 + 544) = 0;
    uint64_t v104 = v29;
    LODWORD(v29) = *(_DWORD *)(v7 + 552);
    char v106 = *(unsigned char *)(v7 + 556);
    int v105 = v29;
    long long v30 = *(_OWORD *)(v7 + 560);
    uint64_t v108 = *(void *)(v7 + 576);
    long long v107 = v30;
    *(void *)(v7 + 560) = 0;
    *(void *)(v7 + 568) = 0;
    *(void *)(v7 + 576) = 0;
    long long v31 = *(_OWORD *)(v7 + 584);
    uint64_t v110 = *(void *)(v7 + 600);
    long long v109 = v31;
    *(void *)(v7 + 584) = 0;
    *(void *)(v7 + 592) = 0;
    *(void *)(v7 + 600) = 0;
    uint64_t v32 = v8;
    uint64_t v33 = *(void *)v6;
    while (1)
    {
      uint64_t v34 = a1 + v32;
      *(void *)(a1 + v32 + 1824) = v33;
      sub_4F377C(a1 + v32 + 1832, a1 + v32 + 1224);
      *(void *)(a1 + v32 + 1872) = *(void *)(a1 + v32 + 1264);
      uint64_t v35 = (void **)(a1 + v32 + 1880);
      if (*(char *)(a1 + v32 + 1903) < 0) {
        operator delete(*v35);
      }
      *(void *)(v34 + 1896) = *(void *)(v34 + 1288);
      *(_OWORD *)uint64_t v35 = *(_OWORD *)(v34 + 1272);
      *(unsigned char *)(v34 + 1295) = 0;
      *(unsigned char *)(v34 + 1272) = 0;
      *(unsigned char *)(v34 + 1904) = *(unsigned char *)(v34 + 1296);
      uint64_t v36 = v34 + 1912;
      if (*(char *)(v34 + 1935) < 0) {
        operator delete(*(void **)v36);
      }
      uint64_t v37 = a1 + v32;
      uint64_t v38 = a1 + v32 + 1304;
      *(void *)(v36 + 16) = *(void *)(a1 + v32 + 1320);
      *(_OWORD *)uint64_t v36 = *(_OWORD *)v38;
      *(unsigned char *)(v37 + 1327) = 0;
      *(unsigned char *)(v37 + 1304) = 0;
      *(unsigned char *)(v37 + 1936) = *(unsigned char *)(a1 + v32 + 1328);
      *(_DWORD *)(v37 + 1944) = *(_DWORD *)(a1 + v32 + 1336);
      uint64_t v39 = a1 + v32 + 1344;
      sub_4D90B4(a1 + v32 + 1952, v39);
      uint64_t v40 = a1 + v32 + 1504;
      sub_4D90B4(v37 + 2112, v37 + 1504);
      uint64_t v41 = a1 + v32 + 1664;
      sub_4D90B4(v37 + 2272, v37 + 1664);
      if (v32 == -1216) {
        break;
      }
      uint64_t v33 = *(void *)(v37 + 608);
      BOOL v42 = v65 > *(_DWORD *)(v37 + 728);
      if (v52 != v33) {
        BOOL v42 = v52 < v33;
      }
      v32 -= 608;
      if (!v42)
      {
        uint64_t v43 = a1 + v32 + 1824;
        goto LABEL_22;
      }
    }
    uint64_t v43 = a1;
LABEL_22:
    *(void *)uint64_t v43 = v52;
    sub_4F377C(v37 + 1224, (uint64_t)&v53);
    *(void *)(v43 + 48) = v58;
    uint64_t v44 = v37 + 1272;
    if (*(char *)(v43 + 79) < 0) {
      operator delete(*(void **)v44);
    }
    *(_OWORD *)uint64_t v44 = v59;
    *(void *)(v44 + 16) = v60;
    HIBYTE(v60) = 0;
    LOBYTE(v59) = 0;
    *(unsigned char *)(v43 + 80) = v61;
    if (*(char *)(v43 + 111) < 0) {
      operator delete(*(void **)v38);
    }
    *(_OWORD *)uint64_t v38 = v62;
    *(void *)(v38 + 16) = v63;
    HIBYTE(v63) = 0;
    LOBYTE(v62) = 0;
    *(unsigned char *)(v43 + 112) = v64;
    *(_DWORD *)(v43 + 120) = v65;
    sub_4D90B4(v39, (uint64_t)&v66);
    sub_4D90B4(v40, (uint64_t)&v81);
    sub_4D90B4(v41, (uint64_t)&v96);
    sub_4D4B58((uint64_t)&v96);
    sub_4D4B58((uint64_t)&v81);
    sub_4D4B58((uint64_t)&v66);
    uint64_t v2 = v51;
    if (SHIBYTE(v63) < 0)
    {
      operator delete((void *)v62);
      if ((SHIBYTE(v60) & 0x80000000) == 0)
      {
LABEL_28:
        unsigned int v45 = v57;
        if (v57 != 1) {
          goto LABEL_29;
        }
        goto LABEL_34;
      }
    }
    else if ((SHIBYTE(v60) & 0x80000000) == 0)
    {
      goto LABEL_28;
    }
    operator delete((void *)v59);
    unsigned int v45 = v57;
    if (v57 != 1)
    {
LABEL_29:
      if (!v45 && v56 < 0)
      {
        BOOL v46 = __p;
LABEL_5:
        operator delete(v46);
        goto LABEL_6;
      }
      goto LABEL_6;
    }
LABEL_34:
    BOOL v46 = __p;
    if (__p)
    {
      BOOL v55 = __p;
      goto LABEL_5;
    }
LABEL_6:
    if (++v9 == 8) {
      return v7 + 608 == v51;
    }
LABEL_7:
    uint64_t v6 = v7;
    v8 += 608;
    v7 += 608;
    if (v7 == v2) {
      return 1;
    }
  }
}

void sub_5DF7C4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_58CC(a1);
}

void sub_5DF7E8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v34 = *a1;
  uint64_t v4 = a1 + 1;
  uint64_t v5 = (void *)*((unsigned int *)a1 + 10);
  int v39 = (int)v5;
  sub_4F38B0(v5, v4, &v35);
  uint64_t v40 = a1[6];
  uint64_t v6 = (void **)(a1 + 7);
  *(_OWORD *)uint64_t v41 = *(_OWORD *)(a1 + 7);
  uint64_t v42 = a1[9];
  a1[7] = 0;
  a1[8] = 0;
  a1[9] = 0;
  char v43 = *((unsigned char *)a1 + 80);
  *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 11);
  uint64_t v45 = a1[13];
  a1[12] = 0;
  a1[13] = 0;
  a1[11] = 0;
  char v46 = *((unsigned char *)a1 + 112);
  int v47 = *((_DWORD *)a1 + 30);
  long long v48 = *((_OWORD *)a1 + 8);
  uint64_t v7 = a1[18];
  a1[16] = 0;
  a1[17] = 0;
  a1[18] = 0;
  long long v50 = *(_OWORD *)(a1 + 19);
  uint64_t v8 = a1[21];
  uint64_t v49 = v7;
  uint64_t v51 = v8;
  a1[19] = 0;
  a1[20] = 0;
  long long v52 = *((_OWORD *)a1 + 11);
  uint64_t v9 = a1[24];
  a1[21] = 0;
  a1[22] = 0;
  a1[23] = 0;
  a1[24] = 0;
  long long v54 = *(_OWORD *)(a1 + 25);
  uint64_t v10 = a1[27];
  uint64_t v11 = a1[28];
  uint64_t v53 = v9;
  uint64_t v55 = v10;
  uint64_t v56 = v11;
  a1[25] = 0;
  a1[26] = 0;
  a1[27] = 0;
  a1[28] = 0;
  LODWORD(v9) = *((_DWORD *)a1 + 58);
  char v58 = *((unsigned char *)a1 + 236);
  int v57 = v9;
  uint64_t v12 = a1[32];
  long long v59 = *((_OWORD *)a1 + 15);
  a1[30] = 0;
  a1[31] = 0;
  a1[32] = 0;
  uint64_t v13 = a1[35];
  long long v61 = *(_OWORD *)(a1 + 33);
  uint64_t v60 = v12;
  uint64_t v62 = v13;
  a1[33] = 0;
  a1[34] = 0;
  a1[35] = 0;
  long long v63 = *((_OWORD *)a1 + 18);
  a1[36] = 0;
  a1[37] = 0;
  uint64_t v14 = a1[39];
  uint64_t v64 = a1[38];
  uint64_t v65 = v14;
  a1[38] = 0;
  a1[39] = 0;
  long long v15 = *((_OWORD *)a1 + 20);
  long long v16 = *((_OWORD *)a1 + 21);
  a1[40] = 0;
  a1[41] = 0;
  long long v66 = v15;
  long long v67 = v16;
  a1[42] = 0;
  a1[43] = 0;
  uint64_t v17 = a1[45];
  uint64_t v68 = a1[44];
  uint64_t v69 = v17;
  long long v70 = *((_OWORD *)a1 + 23);
  a1[44] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[47] = 0;
  uint64_t v18 = a1[48];
  a1[48] = 0;
  uint64_t v71 = v18;
  LODWORD(v18) = *((_DWORD *)a1 + 98);
  char v73 = *((unsigned char *)a1 + 396);
  int v72 = v18;
  uint64_t v19 = a1[52];
  long long v74 = *((_OWORD *)a1 + 25);
  a1[50] = 0;
  a1[51] = 0;
  a1[52] = 0;
  uint64_t v20 = a1[55];
  long long v76 = *(_OWORD *)(a1 + 53);
  uint64_t v75 = v19;
  uint64_t v77 = v20;
  a1[53] = 0;
  a1[54] = 0;
  a1[55] = 0;
  long long v78 = *((_OWORD *)a1 + 28);
  a1[56] = 0;
  a1[57] = 0;
  uint64_t v21 = a1[59];
  uint64_t v79 = a1[58];
  uint64_t v80 = v21;
  a1[58] = 0;
  a1[59] = 0;
  long long v22 = *((_OWORD *)a1 + 30);
  long long v23 = *((_OWORD *)a1 + 31);
  a1[60] = 0;
  a1[61] = 0;
  long long v81 = v22;
  long long v82 = v23;
  uint64_t v83 = a1[64];
  a1[62] = 0;
  a1[63] = 0;
  a1[64] = 0;
  uint64_t v84 = a1[65];
  long long v85 = *((_OWORD *)a1 + 33);
  a1[65] = 0;
  a1[67] = 0;
  a1[66] = 0;
  uint64_t v24 = a1[68];
  a1[68] = 0;
  uint64_t v86 = v24;
  LODWORD(v24) = *((_DWORD *)a1 + 138);
  char v88 = *((unsigned char *)a1 + 556);
  int v87 = v24;
  long long v25 = *((_OWORD *)a1 + 35);
  uint64_t v90 = a1[72];
  long long v89 = v25;
  a1[71] = 0;
  a1[70] = 0;
  a1[72] = 0;
  uint64_t v26 = a1[75];
  long long v91 = *(_OWORD *)(a1 + 73);
  uint64_t v92 = v26;
  a1[74] = 0;
  a1[73] = 0;
  a1[75] = 0;
  *a1 = *a2;
  sub_4F377C((uint64_t)v4, (uint64_t)(a2 + 1));
  a1[6] = a2[6];
  if (*((char *)a1 + 79) < 0) {
    operator delete(*v6);
  }
  long long v27 = (void **)(a1 + 11);
  long long v28 = *(_OWORD *)(a2 + 7);
  a1[9] = a2[9];
  *(_OWORD *)uint64_t v6 = v28;
  *((unsigned char *)a2 + 79) = 0;
  *((unsigned char *)a2 + 56) = 0;
  *((unsigned char *)a1 + 80) = *((unsigned char *)a2 + 80);
  if (*((char *)a1 + 111) < 0) {
    operator delete(*v27);
  }
  uint64_t v29 = (void **)(a2 + 7);
  long long v30 = *(_OWORD *)(a2 + 11);
  a1[13] = a2[13];
  *(_OWORD *)long long v27 = v30;
  *((unsigned char *)a2 + 111) = 0;
  *((unsigned char *)a2 + 88) = 0;
  *((unsigned char *)a1 + 112) = *((unsigned char *)a2 + 112);
  *((_DWORD *)a1 + 30) = *((_DWORD *)a2 + 30);
  sub_4D90B4((uint64_t)(a1 + 16), (uint64_t)(a2 + 16));
  sub_4D90B4((uint64_t)(a1 + 36), (uint64_t)(a2 + 36));
  sub_4D90B4((uint64_t)(a1 + 56), (uint64_t)(a2 + 56));
  *a2 = v34;
  sub_4F377C((uint64_t)(a2 + 1), (uint64_t)&v35);
  a2[6] = v40;
  if (*((char *)a2 + 79) < 0) {
    operator delete(*v29);
  }
  long long v31 = (void **)(a2 + 11);
  *(_OWORD *)uint64_t v29 = *(_OWORD *)v41;
  a2[9] = v42;
  HIBYTE(v42) = 0;
  LOBYTE(v41[0]) = 0;
  *((unsigned char *)a2 + 80) = v43;
  if (*((char *)a2 + 111) < 0) {
    operator delete(*v31);
  }
  *(_OWORD *)long long v31 = *(_OWORD *)__p;
  a2[13] = v45;
  HIBYTE(v45) = 0;
  LOBYTE(__p[0]) = 0;
  *((unsigned char *)a2 + 112) = v46;
  *((_DWORD *)a2 + 30) = v47;
  sub_4D90B4((uint64_t)(a2 + 16), (uint64_t)&v48);
  sub_4D90B4((uint64_t)(a2 + 36), (uint64_t)&v63);
  sub_4D90B4((uint64_t)(a2 + 56), (uint64_t)&v78);
  sub_4D4B58((uint64_t)&v78);
  sub_4D4B58((uint64_t)&v63);
  sub_4D4B58((uint64_t)&v48);
  if ((SHIBYTE(v45) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v42) & 0x80000000) == 0) {
      goto LABEL_11;
    }
LABEL_16:
    operator delete(v41[0]);
    int v32 = v39;
    if (v39 != 1) {
      goto LABEL_12;
    }
LABEL_17:
    uint64_t v33 = v36;
    if (!v36) {
      return;
    }
    uint64_t v37 = v36;
    goto LABEL_19;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v42) < 0) {
    goto LABEL_16;
  }
LABEL_11:
  int v32 = v39;
  if (v39 == 1) {
    goto LABEL_17;
  }
LABEL_12:
  if (!v32 && v38 < 0)
  {
    uint64_t v33 = v36;
LABEL_19:
    operator delete(v33);
  }
}

void sub_5DFCC8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_58CC(a1);
}

void sub_5DFCD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_5DE2E4(a1, a2, a3);
  BOOL v8 = *(void *)a4 < *(void *)a3;
  if (*(void *)a4 == *(void *)a3) {
    BOOL v8 = *(_DWORD *)(a4 + 120) > *(_DWORD *)(a3 + 120);
  }
  if (v8)
  {
    sub_5DF7E8((uint64_t *)a3, (uint64_t *)a4);
    BOOL v9 = *(void *)a3 < *(void *)a2;
    if (*(void *)a3 == *(void *)a2) {
      BOOL v9 = *(_DWORD *)(a3 + 120) > *(_DWORD *)(a2 + 120);
    }
    if (v9)
    {
      sub_5DF7E8((uint64_t *)a2, (uint64_t *)a3);
      BOOL v10 = *(void *)a2 < *(void *)a1;
      if (*(void *)a2 == *(void *)a1) {
        BOOL v10 = *(_DWORD *)(a2 + 120) > *(_DWORD *)(a1 + 120);
      }
      if (v10)
      {
        sub_5DF7E8((uint64_t *)a1, (uint64_t *)a2);
      }
    }
  }
}

void sub_5DFDD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_5DFCD4(a1, a2, a3, a4);
  BOOL v10 = *(void *)a5 < *(void *)a4;
  if (*(void *)a5 == *(void *)a4) {
    BOOL v10 = *(_DWORD *)(a5 + 120) > *(_DWORD *)(a4 + 120);
  }
  if (v10)
  {
    sub_5DF7E8((uint64_t *)a4, (uint64_t *)a5);
    BOOL v11 = *(void *)a4 < *(void *)a3;
    if (*(void *)a4 == *(void *)a3) {
      BOOL v11 = *(_DWORD *)(a4 + 120) > *(_DWORD *)(a3 + 120);
    }
    if (v11)
    {
      sub_5DF7E8((uint64_t *)a3, (uint64_t *)a4);
      BOOL v12 = *(void *)a3 < *(void *)a2;
      if (*(void *)a3 == *(void *)a2) {
        BOOL v12 = *(_DWORD *)(a3 + 120) > *(_DWORD *)(a2 + 120);
      }
      if (v12)
      {
        sub_5DF7E8((uint64_t *)a2, (uint64_t *)a3);
        BOOL v13 = *(void *)a2 < *(void *)a1;
        if (*(void *)a2 == *(void *)a1) {
          BOOL v13 = *(_DWORD *)(a2 + 120) > *(_DWORD *)(a1 + 120);
        }
        if (v13)
        {
          sub_5DF7E8((uint64_t *)a1, (uint64_t *)a2);
        }
      }
    }
  }
}

void sub_5DFF1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 < 2) {
    return;
  }
  uint64_t v5 = a4;
  uint64_t v54 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < (uint64_t)(0x86BCA1AF286BCA1BLL * (((uint64_t)a4 - a1) >> 5))) {
    return;
  }
  uint64_t v8 = (0xD79435E50D79436 * (((uint64_t)a4 - a1) >> 5)) | 1;
  BOOL v9 = (uint64_t *)(a1 + 608 * v8);
  if (0xD79435E50D79436 * (((uint64_t)a4 - a1) >> 5) + 2 >= a3)
  {
    uint64_t v10 = *v9;
  }
  else
  {
    uint64_t v10 = *v9;
    uint64_t v11 = v9[76];
    BOOL v12 = *(_DWORD *)(a1 + 608 * v8 + 120) > *((_DWORD *)v9 + 182);
    if (*v9 != v11) {
      BOOL v12 = *v9 < v11;
    }
    if (v12)
    {
      uint64_t v10 = v9[76];
      v9 += 76;
      uint64_t v8 = 0xD79435E50D79436 * (((uint64_t)a4 - a1) >> 5) + 2;
    }
  }
  BOOL v13 = v10 == *a4;
  BOOL v14 = v10 < *a4;
  if (v13) {
    BOOL v14 = *((_DWORD *)v9 + 30) > *((_DWORD *)a4 + 30);
  }
  if (v14) {
    return;
  }
  uint64_t v55 = *a4;
  unsigned int v60 = *((_DWORD *)a4 + 10);
  sub_4F38B0((void *)v60, a4 + 1, &v56);
  uint64_t v61 = v5[6];
  *(_OWORD *)uint64_t v62 = *(_OWORD *)(v5 + 7);
  uint64_t v63 = v5[9];
  v5[7] = 0;
  v5[8] = 0;
  v5[9] = 0;
  char v64 = *((unsigned char *)v5 + 80);
  *(_OWORD *)std::string __p = *(_OWORD *)(v5 + 11);
  uint64_t v66 = v5[13];
  v5[12] = 0;
  v5[13] = 0;
  v5[11] = 0;
  char v67 = *((unsigned char *)v5 + 112);
  unsigned int v68 = *((_DWORD *)v5 + 30);
  long long v69 = *((_OWORD *)v5 + 8);
  uint64_t v15 = v5[18];
  v5[16] = 0;
  v5[17] = 0;
  long long v71 = *(_OWORD *)(v5 + 19);
  uint64_t v16 = v5[21];
  uint64_t v70 = v15;
  uint64_t v72 = v16;
  v5[18] = 0;
  v5[19] = 0;
  v5[20] = 0;
  v5[21] = 0;
  long long v73 = *((_OWORD *)v5 + 11);
  uint64_t v17 = v5[24];
  v5[22] = 0;
  v5[23] = 0;
  long long v75 = *(_OWORD *)(v5 + 25);
  uint64_t v18 = v5[27];
  uint64_t v19 = v5[28];
  uint64_t v74 = v17;
  uint64_t v76 = v18;
  uint64_t v77 = v19;
  v5[24] = 0;
  v5[25] = 0;
  v5[26] = 0;
  v5[27] = 0;
  v5[28] = 0;
  LODWORD(v18) = *((_DWORD *)v5 + 58);
  char v79 = *((unsigned char *)v5 + 236);
  int v78 = v18;
  uint64_t v20 = v5[32];
  long long v80 = *((_OWORD *)v5 + 15);
  v5[30] = 0;
  v5[31] = 0;
  uint64_t v21 = v5[35];
  long long v82 = *(_OWORD *)(v5 + 33);
  uint64_t v81 = v20;
  uint64_t v83 = v21;
  v5[32] = 0;
  v5[33] = 0;
  v5[34] = 0;
  v5[35] = 0;
  long long v84 = *((_OWORD *)v5 + 18);
  v5[36] = 0;
  v5[37] = 0;
  uint64_t v22 = v5[39];
  uint64_t v85 = v5[38];
  uint64_t v86 = v22;
  v5[38] = 0;
  v5[39] = 0;
  long long v23 = *((_OWORD *)v5 + 20);
  long long v24 = *((_OWORD *)v5 + 21);
  v5[40] = 0;
  v5[41] = 0;
  long long v87 = v23;
  long long v88 = v24;
  v5[42] = 0;
  v5[43] = 0;
  uint64_t v25 = v5[45];
  uint64_t v89 = v5[44];
  uint64_t v90 = v25;
  long long v91 = *((_OWORD *)v5 + 23);
  v5[44] = 0;
  v5[45] = 0;
  v5[46] = 0;
  v5[47] = 0;
  uint64_t v26 = v5[48];
  v5[48] = 0;
  uint64_t v92 = v26;
  LODWORD(v26) = *((_DWORD *)v5 + 98);
  char v94 = *((unsigned char *)v5 + 396);
  int v93 = v26;
  uint64_t v27 = v5[52];
  long long v95 = *((_OWORD *)v5 + 25);
  v5[50] = 0;
  v5[51] = 0;
  v5[52] = 0;
  uint64_t v28 = v5[55];
  long long v97 = *(_OWORD *)(v5 + 53);
  uint64_t v96 = v27;
  uint64_t v98 = v28;
  v5[53] = 0;
  v5[54] = 0;
  v5[55] = 0;
  long long v99 = *((_OWORD *)v5 + 28);
  v5[56] = 0;
  v5[57] = 0;
  uint64_t v29 = v5[59];
  uint64_t v100 = v5[58];
  uint64_t v101 = v29;
  v5[58] = 0;
  v5[59] = 0;
  long long v30 = *((_OWORD *)v5 + 30);
  long long v31 = *((_OWORD *)v5 + 31);
  v5[60] = 0;
  v5[61] = 0;
  long long v102 = v30;
  long long v103 = v31;
  uint64_t v32 = v5[65];
  uint64_t v104 = v5[64];
  v5[62] = 0;
  v5[63] = 0;
  uint64_t v105 = v32;
  long long v106 = *((_OWORD *)v5 + 33);
  v5[64] = 0;
  v5[65] = 0;
  v5[66] = 0;
  v5[67] = 0;
  uint64_t v33 = v5[68];
  v5[68] = 0;
  uint64_t v107 = v33;
  LODWORD(v33) = *((_DWORD *)v5 + 138);
  char v109 = *((unsigned char *)v5 + 556);
  int v108 = v33;
  long long v34 = *((_OWORD *)v5 + 35);
  uint64_t v111 = v5[72];
  long long v110 = v34;
  v5[70] = 0;
  v5[71] = 0;
  v5[72] = 0;
  uint64_t v35 = v5[75];
  long long v112 = *(_OWORD *)(v5 + 73);
  uint64_t v113 = v35;
  v5[73] = 0;
  v5[74] = 0;
  v5[75] = 0;
  uint64_t v36 = *v9;
  while (1)
  {
    uint64_t v41 = v9;
    *uint64_t v5 = v36;
    uint64_t v42 = (uint64_t)(v9 + 1);
    sub_4F377C((uint64_t)(v5 + 1), (uint64_t)(v9 + 1));
    v5[6] = v9[6];
    char v43 = (void **)(v5 + 7);
    if (*((char *)v5 + 79) < 0) {
      operator delete(*v43);
    }
    long long v44 = *(_OWORD *)(v41 + 7);
    v5[9] = v41[9];
    *(_OWORD *)char v43 = v44;
    *((unsigned char *)v41 + 79) = 0;
    *((unsigned char *)v41 + 56) = 0;
    *((unsigned char *)v5 + 80) = *((unsigned char *)v41 + 80);
    uint64_t v45 = (void **)(v5 + 11);
    if (*((char *)v5 + 111) < 0) {
      operator delete(*v45);
    }
    long long v46 = *(_OWORD *)(v41 + 11);
    v5[13] = v41[13];
    *(_OWORD *)uint64_t v45 = v46;
    *((unsigned char *)v41 + 111) = 0;
    *((unsigned char *)v41 + 88) = 0;
    *((unsigned char *)v5 + 112) = *((unsigned char *)v41 + 112);
    *((_DWORD *)v5 + 30) = *((_DWORD *)v41 + 30);
    sub_4D90B4((uint64_t)(v5 + 16), (uint64_t)(v41 + 16));
    sub_4D90B4((uint64_t)(v5 + 36), (uint64_t)(v41 + 36));
    sub_4D90B4((uint64_t)(v5 + 56), (uint64_t)(v41 + 56));
    if (v54 < v8) {
      break;
    }
    uint64_t v47 = (2 * v8) | 1;
    BOOL v9 = (uint64_t *)(a1 + 608 * v47);
    if (2 * v8 + 2 < a3)
    {
      uint64_t v36 = *v9;
      uint64_t v37 = v9[76];
      BOOL v38 = *(_DWORD *)(a1 + 608 * v47 + 120) > *((_DWORD *)v9 + 182);
      if (*v9 != v37) {
        BOOL v38 = *v9 < v37;
      }
      if (v38)
      {
        uint64_t v36 = v9[76];
        v9 += 76;
        uint64_t v8 = 2 * v8 + 2;
      }
      else
      {
        uint64_t v8 = (2 * v8) | 1;
      }
    }
    else
    {
      uint64_t v36 = *v9;
      uint64_t v8 = (2 * v8) | 1;
    }
    uint64_t v39 = v55;
    BOOL v40 = *((_DWORD *)v9 + 30) > v68;
    if (v36 != v55) {
      BOOL v40 = v36 < v55;
    }
    uint64_t v5 = v41;
    if (v40) {
      goto LABEL_30;
    }
  }
  uint64_t v39 = v55;
LABEL_30:
  long long v48 = (void **)(v41 + 7);
  *uint64_t v41 = v39;
  sub_4F377C(v42, (uint64_t)&v56);
  v41[6] = v61;
  if (*((char *)v41 + 79) < 0) {
    operator delete(*v48);
  }
  uint64_t v49 = (void **)(v41 + 11);
  long long v50 = *(_OWORD *)v62;
  v41[9] = v63;
  *(_OWORD *)long long v48 = v50;
  HIBYTE(v63) = 0;
  LOBYTE(v62[0]) = 0;
  *((unsigned char *)v41 + 80) = v64;
  if (*((char *)v41 + 111) < 0) {
    operator delete(*v49);
  }
  long long v51 = *(_OWORD *)__p;
  v41[13] = v66;
  *(_OWORD *)uint64_t v49 = v51;
  HIBYTE(v66) = 0;
  LOBYTE(__p[0]) = 0;
  *((unsigned char *)v41 + 112) = v67;
  *((_DWORD *)v41 + 30) = v68;
  sub_4D90B4((uint64_t)(v41 + 16), (uint64_t)&v69);
  sub_4D90B4((uint64_t)(v41 + 36), (uint64_t)&v84);
  sub_4D90B4((uint64_t)(v41 + 56), (uint64_t)&v99);
  sub_4D4B58((uint64_t)&v99);
  sub_4D4B58((uint64_t)&v84);
  sub_4D4B58((uint64_t)&v69);
  if ((SHIBYTE(v66) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v63) & 0x80000000) == 0) {
      goto LABEL_36;
    }
LABEL_41:
    operator delete(v62[0]);
    unsigned int v52 = v60;
    if (v60 != 1) {
      goto LABEL_37;
    }
LABEL_42:
    uint64_t v53 = v57;
    if (!v57) {
      return;
    }
    char v58 = v57;
    goto LABEL_44;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v63) < 0) {
    goto LABEL_41;
  }
LABEL_36:
  unsigned int v52 = v60;
  if (v60 == 1) {
    goto LABEL_42;
  }
LABEL_37:
  if (!v52 && v59 < 0)
  {
    uint64_t v53 = v57;
LABEL_44:
    operator delete(v53);
  }
}

void sub_5E0558(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_58CC(a1);
}

void sub_5E0564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 < 2) {
    return;
  }
  uint64_t v54 = *(void *)a1;
  uint64_t v8 = (uint64_t *)(a1 + 8);
  BOOL v9 = (void *)*(unsigned int *)(a1 + 40);
  int v59 = (int)v9;
  sub_4F38B0(v9, v8, &v55);
  uint64_t v60 = *(void *)(a1 + 48);
  *(_OWORD *)uint64_t v61 = *(_OWORD *)(a1 + 56);
  uint64_t v62 = *(void *)(a1 + 72);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  char v63 = *(unsigned char *)(a1 + 80);
  *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 88);
  uint64_t v65 = *(void *)(a1 + 104);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  char v66 = *(unsigned char *)(a1 + 112);
  int v67 = *(_DWORD *)(a1 + 120);
  long long v68 = *(_OWORD *)(a1 + 128);
  uint64_t v10 = *(void *)(a1 + 144);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  long long v70 = *(_OWORD *)(a1 + 152);
  uint64_t v11 = *(void *)(a1 + 168);
  uint64_t v69 = v10;
  uint64_t v71 = v11;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  long long v72 = *(_OWORD *)(a1 + 176);
  uint64_t v12 = *(void *)(a1 + 192);
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  long long v74 = *(_OWORD *)(a1 + 200);
  uint64_t v13 = *(void *)(a1 + 216);
  uint64_t v14 = *(void *)(a1 + 224);
  uint64_t v73 = v12;
  uint64_t v75 = v13;
  uint64_t v76 = v14;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  LODWORD(v12) = *(_DWORD *)(a1 + 232);
  char v78 = *(unsigned char *)(a1 + 236);
  int v77 = v12;
  uint64_t v15 = *(void *)(a1 + 256);
  long long v79 = *(_OWORD *)(a1 + 240);
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  uint64_t v16 = *(void *)(a1 + 280);
  long long v81 = *(_OWORD *)(a1 + 264);
  uint64_t v80 = v15;
  uint64_t v82 = v16;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  long long v83 = *(_OWORD *)(a1 + 288);
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  uint64_t v17 = *(void *)(a1 + 312);
  uint64_t v84 = *(void *)(a1 + 304);
  uint64_t v85 = v17;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  long long v18 = *(_OWORD *)(a1 + 320);
  long long v19 = *(_OWORD *)(a1 + 336);
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  long long v86 = v18;
  long long v87 = v19;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  uint64_t v20 = *(void *)(a1 + 360);
  uint64_t v88 = *(void *)(a1 + 352);
  uint64_t v89 = v20;
  long long v90 = *(_OWORD *)(a1 + 368);
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  uint64_t v21 = *(void *)(a1 + 384);
  *(void *)(a1 + 384) = 0;
  uint64_t v91 = v21;
  LODWORD(v21) = *(_DWORD *)(a1 + 392);
  char v93 = *(unsigned char *)(a1 + 396);
  int v92 = v21;
  uint64_t v22 = *(void *)(a1 + 416);
  long long v94 = *(_OWORD *)(a1 + 400);
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  uint64_t v23 = *(void *)(a1 + 440);
  long long v96 = *(_OWORD *)(a1 + 424);
  uint64_t v95 = v22;
  uint64_t v97 = v23;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  long long v98 = *(_OWORD *)(a1 + 448);
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  uint64_t v24 = *(void *)(a1 + 472);
  uint64_t v99 = *(void *)(a1 + 464);
  uint64_t v100 = v24;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  long long v25 = *(_OWORD *)(a1 + 480);
  long long v26 = *(_OWORD *)(a1 + 496);
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 0;
  long long v101 = v25;
  long long v102 = v26;
  uint64_t v103 = *(void *)(a1 + 512);
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  uint64_t v104 = *(void *)(a1 + 520);
  long long v105 = *(_OWORD *)(a1 + 528);
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 528) = 0;
  uint64_t v27 = *(void *)(a1 + 544);
  *(void *)(a1 + 544) = 0;
  uint64_t v106 = v27;
  LODWORD(v27) = *(_DWORD *)(a1 + 552);
  char v108 = *(unsigned char *)(a1 + 556);
  int v107 = v27;
  long long v28 = *(_OWORD *)(a1 + 560);
  uint64_t v110 = *(void *)(a1 + 576);
  long long v109 = v28;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 560) = 0;
  *(void *)(a1 + 576) = 0;
  uint64_t v29 = *(void *)(a1 + 600);
  long long v111 = *(_OWORD *)(a1 + 584);
  uint64_t v112 = v29;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 600) = 0;
  long long v30 = sub_5E0BAC((uint64_t *)a1, a3, a4);
  uint64_t v31 = a2 - 608;
  uint64_t v32 = (uint64_t)(v30 + 1);
  if (v30 == (uint64_t *)(a2 - 608))
  {
    *long long v30 = v54;
    sub_4F377C(v32, (uint64_t)&v55);
    v30[6] = v60;
    long long v44 = (void **)(v30 + 7);
    if (*((char *)v30 + 79) < 0) {
      operator delete(*v44);
    }
    long long v45 = *(_OWORD *)v61;
    v30[9] = v62;
    *(_OWORD *)long long v44 = v45;
    HIBYTE(v62) = 0;
    LOBYTE(v61[0]) = 0;
    *((unsigned char *)v30 + 80) = v63;
    long long v46 = (void **)(v30 + 11);
    if (*((char *)v30 + 111) < 0) {
      operator delete(*v46);
    }
    long long v47 = *(_OWORD *)__p;
    v30[13] = v65;
    *(_OWORD *)long long v46 = v47;
    HIBYTE(v65) = 0;
    LOBYTE(__p[0]) = 0;
    *((unsigned char *)v30 + 112) = v66;
    *((_DWORD *)v30 + 30) = v67;
    sub_4D90B4((uint64_t)(v30 + 16), (uint64_t)&v68);
    sub_4D90B4((uint64_t)(v30 + 36), (uint64_t)&v83);
    sub_4D90B4((uint64_t)(v30 + 56), (uint64_t)&v98);
  }
  else
  {
    *long long v30 = *(void *)v31;
    uint64_t v53 = a2 - 600;
    sub_4F377C(v32, a2 - 600);
    unsigned int v52 = (uint64_t *)(a2 - 560);
    v30[6] = *(void *)(a2 - 560);
    uint64_t v33 = (void **)(v30 + 7);
    if (*((char *)v30 + 79) < 0) {
      operator delete(*v33);
    }
    long long v34 = (char *)(a2 - 529);
    long long v35 = *(_OWORD *)(a2 - 552);
    v30[9] = *(void *)(a2 - 536);
    *(_OWORD *)uint64_t v33 = v35;
    *(unsigned char *)(a2 - 529) = 0;
    *(unsigned char *)(a2 - 552) = 0;
    *((unsigned char *)v30 + 80) = *(unsigned char *)(a2 - 528);
    uint64_t v36 = (void **)(v30 + 11);
    if (*((char *)v30 + 111) < 0) {
      operator delete(*v36);
    }
    uint64_t v37 = (void **)(a2 - 552);
    BOOL v38 = (char *)(a2 - 497);
    long long v39 = *(_OWORD *)(a2 - 520);
    v30[13] = *(void *)(a2 - 504);
    *(_OWORD *)uint64_t v36 = v39;
    *(unsigned char *)(a2 - 497) = 0;
    *(unsigned char *)(a2 - 520) = 0;
    int v40 = *(_DWORD *)(a2 - 488);
    *((unsigned char *)v30 + 112) = *(unsigned char *)(a2 - 496);
    *((_DWORD *)v30 + 30) = v40;
    uint64_t v51 = a2 - 480;
    sub_4D90B4((uint64_t)(v30 + 16), a2 - 480);
    uint64_t v50 = a2 - 320;
    sub_4D90B4((uint64_t)(v30 + 36), a2 - 320);
    uint64_t v41 = a2 - 160;
    sub_4D90B4((uint64_t)(v30 + 56), v41);
    uint64_t v42 = (uint64_t)(v30 + 76);
    *(void *)uint64_t v31 = v54;
    sub_4F377C(v53, (uint64_t)&v55);
    *unsigned int v52 = v60;
    if (*v34 < 0) {
      operator delete(*v37);
    }
    char v43 = (void **)(v31 + 88);
    *(_OWORD *)uint64_t v37 = *(_OWORD *)v61;
    *(void *)(v31 + 72) = v62;
    HIBYTE(v62) = 0;
    LOBYTE(v61[0]) = 0;
    *(unsigned char *)(v31 + 80) = v63;
    if (*v38 < 0) {
      operator delete(*v43);
    }
    *(_OWORD *)char v43 = *(_OWORD *)__p;
    *(void *)(v31 + 104) = v65;
    HIBYTE(v65) = 0;
    LOBYTE(__p[0]) = 0;
    *(unsigned char *)(v31 + 112) = v66;
    *(_DWORD *)(v31 + 120) = v67;
    sub_4D90B4(v51, (uint64_t)&v68);
    sub_4D90B4(v50, (uint64_t)&v83);
    sub_4D90B4(v41, (uint64_t)&v98);
    sub_5E0D2C(a1, v42, a3, 0x86BCA1AF286BCA1BLL * ((v42 - a1) >> 5));
  }
  sub_4D4B58((uint64_t)&v98);
  sub_4D4B58((uint64_t)&v83);
  sub_4D4B58((uint64_t)&v68);
  if ((SHIBYTE(v65) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v62) & 0x80000000) == 0) {
      goto LABEL_19;
    }
LABEL_24:
    operator delete(v61[0]);
    int v48 = v59;
    if (v59 != 1) {
      goto LABEL_20;
    }
LABEL_25:
    uint64_t v49 = v56;
    if (!v56) {
      return;
    }
    int v57 = v56;
    goto LABEL_27;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v62) < 0) {
    goto LABEL_24;
  }
LABEL_19:
  int v48 = v59;
  if (v59 == 1) {
    goto LABEL_25;
  }
LABEL_20:
  if (!v48 && v58 < 0)
  {
    uint64_t v49 = v56;
LABEL_27:
    operator delete(v49);
  }
}

void sub_5E0B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_5E0BAC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    BOOL v9 = &a1[76 * v5 + 76];
    if (2 * v5 + 2 >= a3)
    {
      uint64_t v13 = *v9;
      uint64_t v5 = (2 * v5) | 1;
    }
    else
    {
      uint64_t v10 = v9[76];
      BOOL v11 = LODWORD(a1[76 * v5 + 91]) > *((_DWORD *)v9 + 182);
      if (*v9 != v10) {
        BOOL v11 = *v9 < v10;
      }
      BOOL v12 = !v11;
      if (v11) {
        uint64_t v13 = v9[76];
      }
      else {
        uint64_t v13 = *v9;
      }
      if (v12)
      {
        uint64_t v5 = (2 * v5) | 1;
      }
      else
      {
        v9 += 76;
        uint64_t v5 = 2 * v5 + 2;
      }
    }
    *a1 = v13;
    sub_4F377C((uint64_t)(a1 + 1), (uint64_t)(v9 + 1));
    a1[6] = v9[6];
    uint64_t v14 = (void **)(a1 + 7);
    if (*((char *)a1 + 79) < 0) {
      operator delete(*v14);
    }
    long long v15 = *(_OWORD *)(v9 + 7);
    a1[9] = v9[9];
    *(_OWORD *)uint64_t v14 = v15;
    *((unsigned char *)v9 + 79) = 0;
    *((unsigned char *)v9 + 56) = 0;
    *((unsigned char *)a1 + 80) = *((unsigned char *)v9 + 80);
    uint64_t v16 = (void **)(a1 + 11);
    if (*((char *)a1 + 111) < 0) {
      operator delete(*v16);
    }
    long long v8 = *(_OWORD *)(v9 + 11);
    a1[13] = v9[13];
    *(_OWORD *)uint64_t v16 = v8;
    *((unsigned char *)v9 + 111) = 0;
    *((unsigned char *)v9 + 88) = 0;
    *((unsigned char *)a1 + 112) = *((unsigned char *)v9 + 112);
    *((_DWORD *)a1 + 30) = *((_DWORD *)v9 + 30);
    sub_4D90B4((uint64_t)(a1 + 16), (uint64_t)(v9 + 16));
    sub_4D90B4((uint64_t)(a1 + 36), (uint64_t)(v9 + 36));
    sub_4D90B4((uint64_t)(a1 + 56), (uint64_t)(v9 + 56));
    a1 = v9;
  }
  while (v5 <= v7);
  return v9;
}

void sub_5E0D2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 < 2) {
    return;
  }
  unint64_t v7 = v4 >> 1;
  long long v8 = (uint64_t *)(a1 + 608 * (v4 >> 1));
  BOOL v9 = (uint64_t *)(a2 - 608);
  uint64_t v10 = *(void *)(a2 - 608);
  BOOL v11 = (unsigned int *)(a2 - 488);
  BOOL v12 = *v8 < v10;
  if (*v8 == v10) {
    BOOL v12 = *((_DWORD *)v8 + 30) > *(_DWORD *)(a2 - 488);
  }
  if (!v12) {
    return;
  }
  uint64_t v44 = *(void *)(a2 - 608);
  unsigned int v49 = *(_DWORD *)(a2 - 568);
  sub_4F38B0((void *)v49, (uint64_t *)(a2 - 600), &v45);
  uint64_t v50 = v9[6];
  *(_OWORD *)uint64_t v51 = *(_OWORD *)(v9 + 7);
  uint64_t v52 = v9[9];
  v9[7] = 0;
  v9[8] = 0;
  v9[9] = 0;
  char v53 = *((unsigned char *)v9 + 80);
  *(_OWORD *)std::string __p = *(_OWORD *)(v9 + 11);
  uint64_t v55 = v9[13];
  v9[12] = 0;
  v9[13] = 0;
  v9[11] = 0;
  char v56 = *((unsigned char *)v9 + 112);
  unsigned int v57 = *v11;
  long long v58 = *((_OWORD *)v9 + 8);
  uint64_t v13 = v9[18];
  v9[16] = 0;
  v9[17] = 0;
  long long v60 = *(_OWORD *)(v9 + 19);
  uint64_t v14 = v9[21];
  uint64_t v59 = v13;
  uint64_t v61 = v14;
  v9[18] = 0;
  v9[19] = 0;
  v9[20] = 0;
  v9[21] = 0;
  long long v62 = *((_OWORD *)v9 + 11);
  uint64_t v15 = v9[24];
  v9[22] = 0;
  v9[23] = 0;
  long long v64 = *(_OWORD *)(v9 + 25);
  uint64_t v16 = v9[27];
  uint64_t v17 = v9[28];
  uint64_t v63 = v15;
  uint64_t v65 = v16;
  uint64_t v66 = v17;
  v9[24] = 0;
  v9[25] = 0;
  v9[26] = 0;
  v9[27] = 0;
  v9[28] = 0;
  LODWORD(v16) = *((_DWORD *)v9 + 58);
  char v68 = *((unsigned char *)v9 + 236);
  int v67 = v16;
  uint64_t v18 = v9[32];
  long long v69 = *((_OWORD *)v9 + 15);
  v9[30] = 0;
  v9[31] = 0;
  uint64_t v19 = v9[35];
  long long v71 = *(_OWORD *)(v9 + 33);
  uint64_t v70 = v18;
  uint64_t v72 = v19;
  v9[32] = 0;
  v9[33] = 0;
  v9[34] = 0;
  v9[35] = 0;
  uint64_t v20 = v9[41];
  uint64_t v74 = v9[38];
  uint64_t v76 = v20;
  uint64_t v21 = *(void *)(a2 - 232);
  uint64_t v22 = *(void *)(a2 - 224);
  uint64_t v78 = *(void *)(a2 - 256);
  uint64_t v80 = v21;
  uint64_t v81 = v22;
  long long v73 = *((_OWORD *)v9 + 18);
  v9[36] = 0;
  v9[37] = 0;
  long long v75 = *(_OWORD *)(v9 + 39);
  v9[38] = 0;
  v9[39] = 0;
  v9[40] = 0;
  v9[41] = 0;
  long long v77 = *((_OWORD *)v9 + 21);
  v9[42] = 0;
  v9[43] = 0;
  *(void *)(a2 - 256) = 0;
  long long v79 = *(_OWORD *)(v9 + 45);
  v9[45] = 0;
  *(void *)(a2 - 240) = 0;
  *(void *)(a2 - 232) = 0;
  *(void *)(a2 - 224) = 0;
  int v23 = *(_DWORD *)(a2 - 216);
  char v83 = *(unsigned char *)(a2 - 212);
  int v82 = v23;
  uint64_t v24 = *(void *)(a2 - 192);
  long long v84 = *(_OWORD *)(a2 - 208);
  *(void *)(a2 - 208) = 0;
  *(void *)(a2 - 200) = 0;
  *(void *)(a2 - 192) = 0;
  uint64_t v25 = *(void *)(a2 - 168);
  long long v86 = *(_OWORD *)(v9 + 53);
  uint64_t v85 = v24;
  uint64_t v87 = v25;
  v9[53] = 0;
  *(void *)(a2 - 176) = 0;
  *(void *)(a2 - 168) = 0;
  long long v88 = *(_OWORD *)(a2 - 160);
  uint64_t v26 = *(void *)(a2 - 144);
  *(void *)(a2 - 160) = 0;
  *(void *)(a2 - 152) = 0;
  long long v90 = *(_OWORD *)(a2 - 136);
  uint64_t v27 = *(void *)(a2 - 120);
  uint64_t v89 = v26;
  uint64_t v91 = v27;
  *(void *)(a2 - 144) = 0;
  *(void *)(a2 - 136) = 0;
  *(void *)(a2 - 128) = 0;
  *(void *)(a2 - 120) = 0;
  long long v92 = *(_OWORD *)(a2 - 112);
  uint64_t v93 = *(void *)(a2 - 96);
  *(void *)(a2 - 112) = 0;
  *(void *)(a2 - 104) = 0;
  long long v94 = *(_OWORD *)(a2 - 88);
  uint64_t v28 = *(void *)(a2 - 64);
  uint64_t v95 = *(void *)(a2 - 72);
  *(void *)(a2 - 96) = 0;
  *(void *)(a2 - 88) = 0;
  *(void *)(a2 - 80) = 0;
  *(void *)(a2 - 72) = 0;
  *(void *)(a2 - 64) = 0;
  uint64_t v96 = v28;
  int v29 = *(_DWORD *)(a2 - 56);
  char v98 = *(unsigned char *)(a2 - 52);
  int v97 = v29;
  long long v30 = *(_OWORD *)(a2 - 48);
  uint64_t v100 = *(void *)(a2 - 32);
  long long v99 = v30;
  *(void *)(a2 - 48) = 0;
  *(void *)(a2 - 40) = 0;
  uint64_t v31 = *(void *)(a2 - 8);
  long long v101 = *(_OWORD *)(a2 - 24);
  uint64_t v102 = v31;
  *(void *)(a2 - 32) = 0;
  *(void *)(a2 - 24) = 0;
  *(void *)(a2 - 16) = 0;
  *(void *)(a2 - 8) = 0;
  uint64_t v32 = *v8;
  do
  {
    uint64_t v33 = v8;
    *BOOL v9 = v32;
    uint64_t v34 = (uint64_t)(v8 + 1);
    sub_4F377C((uint64_t)(v9 + 1), (uint64_t)(v8 + 1));
    v9[6] = v8[6];
    long long v35 = (void **)(v9 + 7);
    if (*((char *)v9 + 79) < 0) {
      operator delete(*v35);
    }
    long long v36 = *(_OWORD *)(v33 + 7);
    v9[9] = v33[9];
    *(_OWORD *)long long v35 = v36;
    *((unsigned char *)v33 + 79) = 0;
    *((unsigned char *)v33 + 56) = 0;
    *((unsigned char *)v9 + 80) = *((unsigned char *)v33 + 80);
    uint64_t v37 = (void **)(v9 + 11);
    if (*((char *)v9 + 111) < 0) {
      operator delete(*v37);
    }
    long long v38 = *(_OWORD *)(v33 + 11);
    v9[13] = v33[13];
    *(_OWORD *)uint64_t v37 = v38;
    *((unsigned char *)v33 + 111) = 0;
    *((unsigned char *)v33 + 88) = 0;
    *((unsigned char *)v9 + 112) = *((unsigned char *)v33 + 112);
    *((_DWORD *)v9 + 30) = *((_DWORD *)v33 + 30);
    sub_4D90B4((uint64_t)(v9 + 16), (uint64_t)(v33 + 16));
    sub_4D90B4((uint64_t)(v9 + 36), (uint64_t)(v33 + 36));
    sub_4D90B4((uint64_t)(v9 + 56), (uint64_t)(v33 + 56));
    if (!v7) {
      break;
    }
    unint64_t v7 = (v7 - 1) >> 1;
    long long v8 = (uint64_t *)(a1 + 608 * v7);
    uint64_t v32 = *v8;
    BOOL v39 = *((_DWORD *)v8 + 30) > v57;
    if (*v8 != v44) {
      BOOL v39 = *v8 < v44;
    }
    BOOL v9 = v33;
  }
  while (v39);
  int v40 = (void **)(v33 + 7);
  *uint64_t v33 = v44;
  sub_4F377C(v34, (uint64_t)&v45);
  v33[6] = v50;
  if (*((char *)v33 + 79) < 0) {
    operator delete(*v40);
  }
  uint64_t v41 = (void **)(v33 + 11);
  *(_OWORD *)int v40 = *(_OWORD *)v51;
  v33[9] = v52;
  HIBYTE(v52) = 0;
  LOBYTE(v51[0]) = 0;
  *((unsigned char *)v33 + 80) = v53;
  if (*((char *)v33 + 111) < 0) {
    operator delete(*v41);
  }
  *(_OWORD *)uint64_t v41 = *(_OWORD *)__p;
  v33[13] = v55;
  HIBYTE(v55) = 0;
  LOBYTE(__p[0]) = 0;
  *((unsigned char *)v33 + 112) = v56;
  *((_DWORD *)v33 + 30) = v57;
  sub_4D90B4((uint64_t)(v33 + 16), (uint64_t)&v58);
  sub_4D90B4((uint64_t)(v33 + 36), (uint64_t)&v73);
  sub_4D90B4((uint64_t)(v33 + 56), (uint64_t)&v88);
  sub_4D4B58((uint64_t)&v88);
  sub_4D4B58((uint64_t)&v73);
  sub_4D4B58((uint64_t)&v58);
  if ((SHIBYTE(v55) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v52) & 0x80000000) == 0) {
      goto LABEL_20;
    }
LABEL_25:
    operator delete(v51[0]);
    unsigned int v42 = v49;
    if (v49 != 1) {
      goto LABEL_21;
    }
LABEL_26:
    char v43 = v46;
    if (!v46) {
      return;
    }
    long long v47 = v46;
    goto LABEL_28;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v52) < 0) {
    goto LABEL_25;
  }
LABEL_20:
  unsigned int v42 = v49;
  if (v49 == 1) {
    goto LABEL_26;
  }
LABEL_21:
  if (!v42 && v48 < 0)
  {
    char v43 = v46;
LABEL_28:
    operator delete(v43);
  }
}

void sub_5E12A8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_58CC(a1);
}

uint64_t sub_5E12B4(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, int *a5)
{
  unint64_t v6 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 5);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x6BCA1AF286BCA1) {
    sub_2E00();
  }
  if (0xD79435E50D79436 * ((a1[2] - *a1) >> 5) > v7) {
    unint64_t v7 = 0xD79435E50D79436 * ((a1[2] - *a1) >> 5);
  }
  if (0x86BCA1AF286BCA1BLL * ((a1[2] - *a1) >> 5) >= 0x35E50D79435E50) {
    unint64_t v12 = 0x6BCA1AF286BCA1;
  }
  else {
    unint64_t v12 = v7;
  }
  uint64_t v31 = (uint64_t)(a1 + 2);
  if (v12)
  {
    if (v12 > 0x6BCA1AF286BCA1) {
      sub_188D718();
    }
    uint64_t v13 = (char *)operator new(608 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v29 = (uint64_t)&v13[608 * v6];
  long long v30 = &v13[608 * v12];
  sub_5E1544(v29, *a2, a3, a4, *a5);
  uint64_t v14 = v29 + 608;
  uint64_t v16 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v29;
    a1[1] = v14;
    a1[2] = (uint64_t)v30;
  }
  else
  {
    uint64_t v17 = 0;
    do
    {
      uint64_t v18 = v29 + v17;
      *(void *)(v29 + v17 - 608) = *(void *)&v15[v17 - 608];
      uint64_t v19 = &v15[v17 - 568];
      *(_DWORD *)(v29 + v17 - 568) = *(_DWORD *)v19;
      sub_4F38B0((void *)*(unsigned int *)v19, (uint64_t *)&v15[v17 - 600], (void *)(v29 + v17 - 600));
      *(void *)(v18 - 560) = *(void *)&v15[v17 - 560];
      uint64_t v20 = v29 + v17 - 552;
      uint64_t v21 = (uint64_t)&v15[v17 - 552];
      long long v22 = *(_OWORD *)v21;
      *(void *)(v20 + 16) = *(void *)&v15[v17 - 536];
      *(_OWORD *)uint64_t v20 = v22;
      *(void *)(v21 + 8) = 0;
      *(void *)(v21 + 16) = 0;
      *(void *)uint64_t v21 = 0;
      *(unsigned char *)(v18 - 528) = v15[v17 - 528];
      uint64_t v23 = v29 + v17 - 520;
      uint64_t v24 = (uint64_t)&v15[v17 - 520];
      long long v25 = *(_OWORD *)v24;
      *(void *)(v23 + 16) = *(void *)&v15[v17 - 504];
      *(_OWORD *)uint64_t v23 = v25;
      *(void *)(v24 + 8) = 0;
      *(void *)(v24 + 16) = 0;
      *(void *)uint64_t v24 = 0;
      *(unsigned char *)(v18 - 496) = v15[v17 - 496];
      *(_DWORD *)(v18 - 488) = *(_DWORD *)&v15[v17 - 488];
      sub_5DCB18(v29 + v17 - 480, (uint64_t)&v15[v17 - 480]);
      v17 -= 608;
    }
    while (&v15[v17] != v16);
    uint64_t v26 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    uint64_t v27 = v29 + v17;
    uint64_t v14 = v29 + 608;
    *a1 = v27;
    a1[1] = v29 + 608;
    a1[2] = (uint64_t)v30;
    if (v15 != v26)
    {
      do
      {
        v15 -= 608;
        sub_575D30(v31, (uint64_t)v15);
      }
      while (v15 != v26);
      uint64_t v15 = v26;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v14;
}

void sub_5E152C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5DCAC0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_5E1544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(void *)a1 = a2;
  sub_4F57A0(a1 + 8, a3);
  *(_DWORD *)(a1 + 120) = a5;
  sub_4F58AC(a1 + 128, a4);
  sub_4F58AC(a1 + 288, a4 + 160);
  sub_4F58AC(a1 + 448, a4 + 320);
  return a1;
}

void sub_5E15B4(_Unwind_Exception *a1)
{
  sub_4D4B58(v3);
  sub_4D4B58(v2);
  sub_20A9BB8(v1);
  _Unwind_Resume(a1);
}

void sub_5E15E0(_Unwind_Exception *a1)
{
  sub_20A9BB8(v1);
  _Unwind_Resume(a1);
}

char ***sub_5E15F4(char ***a1, _OWORD *a2)
{
  unint64_t v4 = *a1;
  unint64_t v6 = (*a1)[1];
  unint64_t v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v10 = *v4;
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *v4) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555) {
      sub_2E00();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)v10) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 > 0x555555555555555) {
        sub_188D718();
      }
      uint64_t v15 = (char *)operator new(48 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[48 * v11];
    long long v17 = a2[1];
    *(_OWORD *)uint64_t v16 = *a2;
    *((_OWORD *)v16 + 1) = v17;
    *((_OWORD *)v16 + 2) = a2[2];
    BOOL v9 = v16 + 48;
    if (v6 != v10)
    {
      do
      {
        long long v18 = *((_OWORD *)v6 - 3);
        long long v19 = *((_OWORD *)v6 - 2);
        *(_OWORD *)(v16 - 20) = *(_OWORD *)(v6 - 20);
        *((_OWORD *)v16 - 3) = v18;
        *((_OWORD *)v16 - 2) = v19;
        v16 -= 48;
        v6 -= 48;
      }
      while (v6 != v10);
      unint64_t v6 = *v4;
    }
    *unint64_t v4 = v16;
    v4[1] = v9;
    v4[2] = &v15[48 * v14];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    long long v7 = *a2;
    long long v8 = a2[2];
    *((_OWORD *)v6 + 1) = a2[1];
    *((_OWORD *)v6 + 2) = v8;
    *(_OWORD *)unint64_t v6 = v7;
    BOOL v9 = v6 + 48;
  }
  v4[1] = v9;
  return a1;
}

void sub_5E1740(double **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((unsigned char *)*a1 + 7))
  {
    double v4 = *a1[1];
    sub_5F3B74((uint64_t)__p, (__int16 *)(*((void *)v2 + 11) + 1177));
    unint64_t v5 = (std::string **)(a2 + 320);
    sub_4D90B4((uint64_t)v5, (uint64_t)__p);
    sub_4D4B58((uint64_t)__p);
    uint64_t v6 = *((void *)v2 + 13);
    *(void *)std::string __p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_20B8890;
    strcpy(*(char **)__p, "Annotation_Metadata_SteepHill");
    long long v7 = sub_8D7730(v6, (uint64_t)__p);
    double v8 = fabs(round(v4 * 100.0));
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    sub_5F41E8((uint64_t)v5, (uint64_t)v7);
    if (*(unsigned __int8 *)(*((void *)v2 + 11) + 1177) >= 0xDu)
    {
      sub_5F71A4((uint64_t)v5, (uint64_t)&xmmword_25843D0, (float)v8);
      return;
    }
    BOOL v9 = *v5;
    std::to_string(&v25, v8);
    uint64_t v10 = std::string::append(&v25, " pct");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    *(void *)&__p[16] = *((void *)&v10->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type size = (char *)HIBYTE(v9->__r_.__value_.__r.__words[2]);
    if ((char)size >= 0) {
      std::string::size_type v13 = (std::string::size_type)v9;
    }
    else {
      std::string::size_type v13 = v9->__r_.__value_.__r.__words[0];
    }
    if (byte_25843E7 >= 0) {
      unint64_t v14 = &xmmword_25843D0;
    }
    else {
      unint64_t v14 = (long long *)xmmword_25843D0;
    }
    if (byte_25843E7 >= 0) {
      int64_t v15 = byte_25843E7;
    }
    else {
      int64_t v15 = *((void *)&xmmword_25843D0 + 1);
    }
    if (v15)
    {
      if ((char)size < 0) {
        std::string::size_type size = (char *)v9->__r_.__value_.__l.__size_;
      }
      if ((uint64_t)size >= v15)
      {
        uint64_t v16 = &size[v13];
        int v17 = *(char *)v14;
        long long v18 = (void *)v13;
        do
        {
          long long v19 = &size[-v15];
          if (v19 == (char *)-1) {
            break;
          }
          uint64_t v20 = (char *)memchr(v18, v17, (size_t)(v19 + 1));
          if (!v20) {
            break;
          }
          uint64_t v21 = v20;
          if (!memcmp(v20, v14, v15))
          {
            if (v21 != v16)
            {
              std::string::size_type v22 = (std::string::size_type)&v21[-v13];
              if (&v21[-v13] != (char *)-1) {
                goto LABEL_26;
              }
            }
            break;
          }
          long long v18 = v21 + 1;
          std::string::size_type size = (char *)(v16 - (v21 + 1));
        }
        while ((uint64_t)size >= v15);
      }
    }
    else
    {
      std::string::size_type v22 = 0;
LABEL_26:
      if (__p[23] >= 0) {
        uint64_t v23 = __p;
      }
      else {
        uint64_t v23 = *(const std::string::value_type **)__p;
      }
      if (__p[23] >= 0) {
        std::string::size_type v24 = __p[23];
      }
      else {
        std::string::size_type v24 = *(void *)&__p[8];
      }
      std::string::replace(v9, v22, v15, v23, v24);
    }
    if ((__p[23] & 0x80000000) == 0)
    {
      if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_37:
      operator delete(v25.__r_.__value_.__l.__data_);
      return;
    }
    operator delete(*(void **)__p);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_37;
    }
  }
}

void sub_5E19B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_5E19F8(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, int *a5)
{
  unint64_t v6 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 5);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x6BCA1AF286BCA1) {
    sub_2E00();
  }
  if (0xD79435E50D79436 * ((a1[2] - *a1) >> 5) > v7) {
    unint64_t v7 = 0xD79435E50D79436 * ((a1[2] - *a1) >> 5);
  }
  if (0x86BCA1AF286BCA1BLL * ((a1[2] - *a1) >> 5) >= 0x35E50D79435E50) {
    unint64_t v12 = 0x6BCA1AF286BCA1;
  }
  else {
    unint64_t v12 = v7;
  }
  uint64_t v31 = (uint64_t)(a1 + 2);
  if (v12)
  {
    if (v12 > 0x6BCA1AF286BCA1) {
      sub_188D718();
    }
    std::string::size_type v13 = (char *)operator new(608 * v12);
  }
  else
  {
    std::string::size_type v13 = 0;
  }
  uint64_t v29 = (uint64_t)&v13[608 * v6];
  long long v30 = &v13[608 * v12];
  sub_5E1544(v29, *a2, a3, a4, *a5);
  uint64_t v14 = v29 + 608;
  uint64_t v16 = (char *)*a1;
  int64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v29;
    a1[1] = v14;
    a1[2] = (uint64_t)v30;
  }
  else
  {
    uint64_t v17 = 0;
    do
    {
      uint64_t v18 = v29 + v17;
      *(void *)(v29 + v17 - 608) = *(void *)&v15[v17 - 608];
      long long v19 = &v15[v17 - 568];
      *(_DWORD *)(v29 + v17 - 568) = *(_DWORD *)v19;
      sub_4F38B0((void *)*(unsigned int *)v19, (uint64_t *)&v15[v17 - 600], (void *)(v29 + v17 - 600));
      *(void *)(v18 - 560) = *(void *)&v15[v17 - 560];
      uint64_t v20 = v29 + v17 - 552;
      uint64_t v21 = (uint64_t)&v15[v17 - 552];
      long long v22 = *(_OWORD *)v21;
      *(void *)(v20 + 16) = *(void *)&v15[v17 - 536];
      *(_OWORD *)uint64_t v20 = v22;
      *(void *)(v21 + 8) = 0;
      *(void *)(v21 + 16) = 0;
      *(void *)uint64_t v21 = 0;
      *(unsigned char *)(v18 - 528) = v15[v17 - 528];
      uint64_t v23 = v29 + v17 - 520;
      uint64_t v24 = (uint64_t)&v15[v17 - 520];
      long long v25 = *(_OWORD *)v24;
      *(void *)(v23 + 16) = *(void *)&v15[v17 - 504];
      *(_OWORD *)uint64_t v23 = v25;
      *(void *)(v24 + 8) = 0;
      *(void *)(v24 + 16) = 0;
      *(void *)uint64_t v24 = 0;
      *(unsigned char *)(v18 - 496) = v15[v17 - 496];
      *(_DWORD *)(v18 - 488) = *(_DWORD *)&v15[v17 - 488];
      sub_5DCB18(v29 + v17 - 480, (uint64_t)&v15[v17 - 480]);
      v17 -= 608;
    }
    while (&v15[v17] != v16);
    uint64_t v26 = (char *)*a1;
    int64_t v15 = (char *)a1[1];
    uint64_t v27 = v29 + v17;
    uint64_t v14 = v29 + 608;
    *a1 = v27;
    a1[1] = v29 + 608;
    a1[2] = (uint64_t)v30;
    if (v15 != v26)
    {
      do
      {
        v15 -= 608;
        sub_575D30(v31, (uint64_t)v15);
      }
      while (v15 != v26);
      int64_t v15 = v26;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v14;
}

void sub_5E1C70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5DCAC0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_5E1C88(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, int *a5)
{
  unint64_t v6 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 5);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x6BCA1AF286BCA1) {
    sub_2E00();
  }
  if (0xD79435E50D79436 * ((a1[2] - *a1) >> 5) > v7) {
    unint64_t v7 = 0xD79435E50D79436 * ((a1[2] - *a1) >> 5);
  }
  if (0x86BCA1AF286BCA1BLL * ((a1[2] - *a1) >> 5) >= 0x35E50D79435E50) {
    unint64_t v12 = 0x6BCA1AF286BCA1;
  }
  else {
    unint64_t v12 = v7;
  }
  uint64_t v31 = (uint64_t)(a1 + 2);
  if (v12)
  {
    if (v12 > 0x6BCA1AF286BCA1) {
      sub_188D718();
    }
    std::string::size_type v13 = (char *)operator new(608 * v12);
  }
  else
  {
    std::string::size_type v13 = 0;
  }
  uint64_t v29 = (uint64_t)&v13[608 * v6];
  long long v30 = &v13[608 * v12];
  sub_5E1544(v29, *a2, a3, a4, *a5);
  uint64_t v14 = v29 + 608;
  uint64_t v16 = (char *)*a1;
  int64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v29;
    a1[1] = v14;
    a1[2] = (uint64_t)v30;
  }
  else
  {
    uint64_t v17 = 0;
    do
    {
      uint64_t v18 = v29 + v17;
      *(void *)(v29 + v17 - 608) = *(void *)&v15[v17 - 608];
      long long v19 = &v15[v17 - 568];
      *(_DWORD *)(v29 + v17 - 568) = *(_DWORD *)v19;
      sub_4F38B0((void *)*(unsigned int *)v19, (uint64_t *)&v15[v17 - 600], (void *)(v29 + v17 - 600));
      *(void *)(v18 - 560) = *(void *)&v15[v17 - 560];
      uint64_t v20 = v29 + v17 - 552;
      uint64_t v21 = (uint64_t)&v15[v17 - 552];
      long long v22 = *(_OWORD *)v21;
      *(void *)(v20 + 16) = *(void *)&v15[v17 - 536];
      *(_OWORD *)uint64_t v20 = v22;
      *(void *)(v21 + 8) = 0;
      *(void *)(v21 + 16) = 0;
      *(void *)uint64_t v21 = 0;
      *(unsigned char *)(v18 - 528) = v15[v17 - 528];
      uint64_t v23 = v29 + v17 - 520;
      uint64_t v24 = (uint64_t)&v15[v17 - 520];
      long long v25 = *(_OWORD *)v24;
      *(void *)(v23 + 16) = *(void *)&v15[v17 - 504];
      *(_OWORD *)uint64_t v23 = v25;
      *(void *)(v24 + 8) = 0;
      *(void *)(v24 + 16) = 0;
      *(void *)uint64_t v24 = 0;
      *(unsigned char *)(v18 - 496) = v15[v17 - 496];
      *(_DWORD *)(v18 - 488) = *(_DWORD *)&v15[v17 - 488];
      sub_5DCB18(v29 + v17 - 480, (uint64_t)&v15[v17 - 480]);
      v17 -= 608;
    }
    while (&v15[v17] != v16);
    uint64_t v26 = (char *)*a1;
    int64_t v15 = (char *)a1[1];
    uint64_t v27 = v29 + v17;
    uint64_t v14 = v29 + 608;
    *a1 = v27;
    a1[1] = v29 + 608;
    a1[2] = (uint64_t)v30;
    if (v15 != v26)
    {
      do
      {
        v15 -= 608;
        sub_575D30(v31, (uint64_t)v15);
      }
      while (v15 != v26);
      int64_t v15 = v26;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v14;
}

void sub_5E1F00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5DCAC0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_5E1F18(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, int *a5)
{
  unint64_t v6 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 5);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x6BCA1AF286BCA1) {
    sub_2E00();
  }
  if (0xD79435E50D79436 * ((a1[2] - *a1) >> 5) > v7) {
    unint64_t v7 = 0xD79435E50D79436 * ((a1[2] - *a1) >> 5);
  }
  if (0x86BCA1AF286BCA1BLL * ((a1[2] - *a1) >> 5) >= 0x35E50D79435E50) {
    unint64_t v12 = 0x6BCA1AF286BCA1;
  }
  else {
    unint64_t v12 = v7;
  }
  uint64_t v31 = (uint64_t)(a1 + 2);
  if (v12)
  {
    if (v12 > 0x6BCA1AF286BCA1) {
      sub_188D718();
    }
    std::string::size_type v13 = (char *)operator new(608 * v12);
  }
  else
  {
    std::string::size_type v13 = 0;
  }
  uint64_t v29 = (uint64_t)&v13[608 * v6];
  long long v30 = &v13[608 * v12];
  sub_5E1544(v29, *a2, a3, a4, *a5);
  uint64_t v14 = v29 + 608;
  uint64_t v16 = (char *)*a1;
  int64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v29;
    a1[1] = v14;
    a1[2] = (uint64_t)v30;
  }
  else
  {
    uint64_t v17 = 0;
    do
    {
      uint64_t v18 = v29 + v17;
      *(void *)(v29 + v17 - 608) = *(void *)&v15[v17 - 608];
      long long v19 = &v15[v17 - 568];
      *(_DWORD *)(v29 + v17 - 568) = *(_DWORD *)v19;
      sub_4F38B0((void *)*(unsigned int *)v19, (uint64_t *)&v15[v17 - 600], (void *)(v29 + v17 - 600));
      *(void *)(v18 - 560) = *(void *)&v15[v17 - 560];
      uint64_t v20 = v29 + v17 - 552;
      uint64_t v21 = (uint64_t)&v15[v17 - 552];
      long long v22 = *(_OWORD *)v21;
      *(void *)(v20 + 16) = *(void *)&v15[v17 - 536];
      *(_OWORD *)uint64_t v20 = v22;
      *(void *)(v21 + 8) = 0;
      *(void *)(v21 + 16) = 0;
      *(void *)uint64_t v21 = 0;
      *(unsigned char *)(v18 - 528) = v15[v17 - 528];
      uint64_t v23 = v29 + v17 - 520;
      uint64_t v24 = (uint64_t)&v15[v17 - 520];
      long long v25 = *(_OWORD *)v24;
      *(void *)(v23 + 16) = *(void *)&v15[v17 - 504];
      *(_OWORD *)uint64_t v23 = v25;
      *(void *)(v24 + 8) = 0;
      *(void *)(v24 + 16) = 0;
      *(void *)uint64_t v24 = 0;
      *(unsigned char *)(v18 - 496) = v15[v17 - 496];
      *(_DWORD *)(v18 - 488) = *(_DWORD *)&v15[v17 - 488];
      sub_5DCB18(v29 + v17 - 480, (uint64_t)&v15[v17 - 480]);
      v17 -= 608;
    }
    while (&v15[v17] != v16);
    uint64_t v26 = (char *)*a1;
    int64_t v15 = (char *)a1[1];
    uint64_t v27 = v29 + v17;
    uint64_t v14 = v29 + 608;
    *a1 = v27;
    a1[1] = v29 + 608;
    a1[2] = (uint64_t)v30;
    if (v15 != v26)
    {
      do
      {
        v15 -= 608;
        sub_575D30(v31, (uint64_t)v15);
      }
      while (v15 != v26);
      int64_t v15 = v26;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v14;
}

void sub_5E2190(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5DCAC0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_5E21A8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
void sub_5E2634(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return;
  }
  uint64_t v4 = a1 + 608;
  if (a1 + 608 == a2) {
    return;
  }
  uint64_t v5 = 0;
  uint64_t v6 = a1;
  while (2)
  {
    uint64_t v8 = v4;
    uint64_t v9 = *(void *)(v6 + 608);
    BOOL v10 = v9 < *(void *)v6;
    if (v9 == *(void *)v6) {
      BOOL v10 = *(_DWORD *)(v6 + 728) > *(_DWORD *)(v6 + 120);
    }
    if (!v10) {
      goto LABEL_7;
    }
    uint64_t v52 = *(void *)(v6 + 608);
    unsigned int v57 = *(_DWORD *)(v6 + 648);
    sub_4F38B0((void *)v57, (uint64_t *)(v6 + 616), &v53);
    uint64_t v58 = *(void *)(v6 + 656);
    uint64_t v60 = *(void *)(v6 + 680);
    long long v59 = *(_OWORD *)(v6 + 664);
    *(void *)(v6 + 680) = 0;
    *(void *)(v6 + 672) = 0;
    *(void *)(v6 + 664) = 0;
    char v61 = *(unsigned char *)(v6 + 688);
    uint64_t v63 = *(void *)(v6 + 712);
    long long v62 = *(_OWORD *)(v6 + 696);
    *(void *)(v6 + 712) = 0;
    *(void *)(v6 + 704) = 0;
    *(void *)(v6 + 696) = 0;
    char v64 = *(unsigned char *)(v6 + 720);
    unsigned int v65 = *(_DWORD *)(v6 + 728);
    long long v66 = *(_OWORD *)(v6 + 736);
    uint64_t v67 = *(void *)(v6 + 752);
    *(void *)(v6 + 744) = 0;
    *(void *)(v6 + 736) = 0;
    *(void *)(v6 + 752) = 0;
    long long v68 = *(_OWORD *)(v6 + 760);
    uint64_t v69 = *(void *)(v6 + 776);
    *(void *)(v6 + 760) = 0;
    *(void *)(v6 + 768) = 0;
    *(void *)(v6 + 776) = 0;
    long long v70 = *(_OWORD *)(v6 + 784);
    uint64_t v71 = *(void *)(v6 + 800);
    *(void *)(v6 + 792) = 0;
    *(void *)(v6 + 784) = 0;
    *(void *)(v6 + 800) = 0;
    long long v72 = *(_OWORD *)(v6 + 808);
    uint64_t v73 = *(void *)(v6 + 824);
    *(void *)(v6 + 808) = 0;
    *(void *)(v6 + 816) = 0;
    *(void *)(v6 + 824) = 0;
    uint64_t v11 = *(void *)(v6 + 832);
    *(void *)(v6 + 832) = 0;
    uint64_t v74 = v11;
    int v75 = *(_DWORD *)(v6 + 840);
    char v76 = *(unsigned char *)(v6 + 844);
    long long v77 = *(_OWORD *)(v6 + 848);
    uint64_t v78 = *(void *)(v6 + 864);
    *(void *)(v6 + 856) = 0;
    *(void *)(v6 + 848) = 0;
    *(void *)(v6 + 864) = 0;
    long long v12 = *(_OWORD *)(v6 + 872);
    uint64_t v80 = *(void *)(v6 + 888);
    long long v79 = v12;
    *(void *)(v6 + 880) = 0;
    *(void *)(v6 + 872) = 0;
    *(void *)(v6 + 888) = 0;
    long long v81 = *(_OWORD *)(v6 + 896);
    uint64_t v13 = *(void *)(v6 + 912);
    *(void *)(v6 + 904) = 0;
    *(void *)(v6 + 896) = 0;
    *(void *)(v6 + 912) = 0;
    uint64_t v14 = *(void *)(v6 + 920);
    uint64_t v82 = v13;
    uint64_t v83 = v14;
    *(void *)(v6 + 920) = 0;
    long long v15 = *(_OWORD *)(v6 + 928);
    long long v16 = *(_OWORD *)(v6 + 944);
    *(void *)(v6 + 936) = 0;
    *(void *)(v6 + 928) = 0;
    long long v84 = v15;
    long long v85 = v16;
    uint64_t v17 = *(void *)(v6 + 960);
    *(void *)(v6 + 952) = 0;
    *(void *)(v6 + 944) = 0;
    *(void *)(v6 + 960) = 0;
    uint64_t v18 = *(void *)(v6 + 968);
    uint64_t v86 = v17;
    uint64_t v87 = v18;
    long long v88 = *(_OWORD *)(v6 + 976);
    *(void *)(v6 + 968) = 0;
    *(void *)(v6 + 984) = 0;
    *(void *)(v6 + 976) = 0;
    uint64_t v19 = *(void *)(v6 + 992);
    *(void *)(v6 + 992) = 0;
    uint64_t v89 = v19;
    LODWORD(v19) = *(_DWORD *)(v6 + 1000);
    char v91 = *(unsigned char *)(v6 + 1004);
    int v90 = v19;
    long long v20 = *(_OWORD *)(v6 + 1008);
    uint64_t v93 = *(void *)(v6 + 1024);
    long long v92 = v20;
    *(void *)(v6 + 1016) = 0;
    *(void *)(v6 + 1008) = 0;
    *(void *)(v6 + 1024) = 0;
    long long v21 = *(_OWORD *)(v6 + 1032);
    uint64_t v95 = *(void *)(v6 + 1048);
    long long v94 = v21;
    *(void *)(v6 + 1040) = 0;
    *(void *)(v6 + 1032) = 0;
    *(void *)(v6 + 1048) = 0;
    long long v96 = *(_OWORD *)(v6 + 1056);
    uint64_t v22 = *(void *)(v6 + 1072);
    *(void *)(v6 + 1064) = 0;
    *(void *)(v6 + 1056) = 0;
    *(void *)(v6 + 1072) = 0;
    uint64_t v23 = *(void *)(v6 + 1080);
    uint64_t v97 = v22;
    uint64_t v98 = v23;
    long long v24 = *(_OWORD *)(v6 + 1088);
    *(void *)(v6 + 1080) = 0;
    *(void *)(v6 + 1096) = 0;
    *(void *)(v6 + 1088) = 0;
    long long v25 = *(_OWORD *)(v6 + 1104);
    long long v99 = v24;
    long long v100 = v25;
    uint64_t v101 = *(void *)(v6 + 1120);
    *(void *)(v6 + 1112) = 0;
    *(void *)(v6 + 1104) = 0;
    *(void *)(v6 + 1120) = 0;
    uint64_t v102 = *(void *)(v6 + 1128);
    long long v103 = *(_OWORD *)(v6 + 1136);
    *(void *)(v6 + 1128) = 0;
    *(void *)(v6 + 1144) = 0;
    *(void *)(v6 + 1136) = 0;
    uint64_t v26 = *(void *)(v6 + 1152);
    *(void *)(v6 + 1152) = 0;
    uint64_t v104 = v26;
    LODWORD(v26) = *(_DWORD *)(v6 + 1160);
    char v106 = *(unsigned char *)(v6 + 1164);
    int v105 = v26;
    long long v27 = *(_OWORD *)(v6 + 1168);
    uint64_t v108 = *(void *)(v6 + 1184);
    long long v107 = v27;
    *(void *)(v6 + 1176) = 0;
    *(void *)(v6 + 1168) = 0;
    *(void *)(v6 + 1184) = 0;
    long long v28 = *(_OWORD *)(v6 + 1192);
    uint64_t v110 = *(void *)(v6 + 1208);
    long long v109 = v28;
    *(void *)(v6 + 1200) = 0;
    *(void *)(v6 + 1192) = 0;
    *(void *)(v6 + 1208) = 0;
    uint64_t v29 = v5;
    uint64_t v30 = *(void *)v6;
    while (1)
    {
      uint64_t v31 = a1 + v29;
      *(void *)(a1 + v29 + 608) = v30;
      uint64_t v32 = (void *)(a1 + v29 + 616);
      uint64_t v33 = (void *)(a1 + v29 + 8);
      int v34 = *(_DWORD *)(a1 + v29 + 648);
      if (v34 != *(_DWORD *)(a1 + v29 + 40))
      {
        if (v34 == 1)
        {
          uint64_t v37 = *(void **)(a1 + v29 + 624);
          if (!v37)
          {
LABEL_28:
            sub_4F38B0((void *)*(unsigned int *)(v31 + 40), (uint64_t *)(a1 + v29 + 8), (void *)(a1 + v29 + 616));
            *(_DWORD *)(v31 + 648) = *(_DWORD *)(v31 + 40);
            goto LABEL_29;
          }
          *(void *)(a1 + v29 + 632) = v37;
        }
        else
        {
          if (v34 || (*(char *)(a1 + v29 + 647) & 0x80000000) == 0) {
            goto LABEL_28;
          }
          uint64_t v37 = *(void **)(a1 + v29 + 624);
        }
        operator delete(v37);
        goto LABEL_28;
      }
      if (v34 == 1)
      {
        *uint64_t v32 = *v33;
        uint64_t v38 = a1 + v29;
        BOOL v39 = *(void **)(a1 + v29 + 624);
        if (v39)
        {
          *(void *)(v38 + 632) = v39;
          operator delete(v39);
          *(_OWORD *)(v38 + 632) = 0u;
        }
        *(_OWORD *)(v38 + 624) = *(_OWORD *)(v38 + 16);
        *(void *)(v38 + 640) = *(void *)(v38 + 32);
        *(void *)(v38 + 24) = 0;
        *(void *)(v38 + 32) = 0;
        *(void *)(v38 + 16) = 0;
      }
      else if (!v34)
      {
        *uint64_t v32 = *v33;
        uint64_t v35 = a1 + v29;
        long long v36 = (void **)(a1 + v29 + 624);
        if (*(char *)(a1 + v29 + 647) < 0) {
          operator delete(*v36);
        }
        *(_OWORD *)long long v36 = *(_OWORD *)(v35 + 16);
        *(void *)(a1 + v29 + 640) = *(void *)(v35 + 32);
        *(unsigned char *)(v35 + 39) = 0;
        *(unsigned char *)(v35 + 16) = 0;
      }
LABEL_29:
      uint64_t v40 = a1 + v29;
      *(void *)(a1 + v29 + 656) = *(void *)(a1 + v29 + 48);
      uint64_t v41 = (void **)(a1 + v29 + 664);
      if (*(char *)(a1 + v29 + 687) < 0) {
        operator delete(*v41);
      }
      *(_OWORD *)uint64_t v41 = *(_OWORD *)(v40 + 56);
      *(void *)(a1 + v29 + 680) = *(void *)(v40 + 72);
      *(unsigned char *)(v40 + 79) = 0;
      *(unsigned char *)(v40 + 56) = 0;
      *(unsigned char *)(v40 + 688) = *(unsigned char *)(v40 + 80);
      uint64_t v42 = v40 + 696;
      if (*(char *)(v40 + 719) < 0) {
        operator delete(*(void **)v42);
      }
      uint64_t v43 = a1 + v29;
      *(_OWORD *)uint64_t v42 = *(_OWORD *)(a1 + v29 + 88);
      *(void *)(v42 + 16) = *(void *)(a1 + v29 + 104);
      *(unsigned char *)(v43 + 111) = 0;
      *(unsigned char *)(v43 + 88) = 0;
      *(unsigned char *)(v43 + 720) = *(unsigned char *)(a1 + v29 + 112);
      *(_DWORD *)(v43 + 728) = *(_DWORD *)(a1 + v29 + 120);
      uint64_t v44 = a1 + v29 + 128;
      sub_4D90B4(a1 + v29 + 736, v44);
      uint64_t v45 = a1 + v29 + 288;
      sub_4D90B4(v43 + 896, v43 + 288);
      uint64_t v46 = a1 + v29 + 448;
      sub_4D90B4(v43 + 1056, v43 + 448);
      if (!v29) {
        break;
      }
      uint64_t v30 = *(void *)(v43 - 608);
      BOOL v47 = v65 > *(_DWORD *)(v43 - 488);
      if (v52 != v30) {
        BOOL v47 = v52 < v30;
      }
      v29 -= 608;
      if (!v47)
      {
        uint64_t v48 = a1 + v29 + 608;
        goto LABEL_39;
      }
    }
    uint64_t v48 = a1;
LABEL_39:
    *(void *)uint64_t v48 = v52;
    sub_4F377C(v43 + 8, (uint64_t)&v53);
    *(void *)(v48 + 48) = v58;
    uint64_t v49 = v43 + 56;
    if (*(char *)(v48 + 79) < 0) {
      operator delete(*(void **)v49);
    }
    uint64_t v50 = v43 + 88;
    *(_OWORD *)uint64_t v49 = v59;
    *(void *)(v49 + 16) = v60;
    HIBYTE(v60) = 0;
    LOBYTE(v59) = 0;
    *(unsigned char *)(v48 + 80) = v61;
    if (*(char *)(v48 + 111) < 0) {
      operator delete(*(void **)v50);
    }
    *(_OWORD *)uint64_t v50 = v62;
    *(void *)(v50 + 16) = v63;
    HIBYTE(v63) = 0;
    LOBYTE(v62) = 0;
    *(unsigned char *)(v48 + 112) = v64;
    *(_DWORD *)(v48 + 120) = v65;
    sub_4D90B4(v44, (uint64_t)&v66);
    sub_4D90B4(v45, (uint64_t)&v81);
    sub_4D90B4(v46, (uint64_t)&v96);
    sub_4D4B58((uint64_t)&v96);
    sub_4D4B58((uint64_t)&v81);
    sub_4D4B58((uint64_t)&v66);
    if (SHIBYTE(v63) < 0)
    {
      operator delete((void *)v62);
      if (SHIBYTE(v60) < 0) {
        goto LABEL_48;
      }
LABEL_45:
      unsigned int v51 = v57;
      if (v57 == 1) {
        goto LABEL_4;
      }
LABEL_49:
      if (!v51 && v56 < 0)
      {
        unint64_t v7 = __p;
LABEL_6:
        operator delete(v7);
      }
    }
    else
    {
      if ((SHIBYTE(v60) & 0x80000000) == 0) {
        goto LABEL_45;
      }
LABEL_48:
      operator delete((void *)v59);
      unsigned int v51 = v57;
      if (v57 != 1) {
        goto LABEL_49;
      }
LABEL_4:
      unint64_t v7 = __p;
      if (__p)
      {
        uint64_t v55 = __p;
        goto LABEL_6;
      }
    }
LABEL_7:
    uint64_t v4 = v8 + 608;
    v5 += 608;
    uint64_t v6 = v8;
    if (v8 + 608 != a2) {
      continue;
    }
    break;
  }
}

void sub_5E2D94(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_58CC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_5E2DA4(uint64_t *a1, uint64_t *a2)
{
  if (a1 == a2) {
    return;
  }
  uint64_t v3 = a1;
  uint64_t v4 = a1 + 76;
  if (a1 + 76 == a2) {
    return;
  }
  uint64_t v5 = a1 - 76;
  while (2)
  {
    uint64_t v6 = v4;
    uint64_t v7 = v3[76];
    BOOL v8 = v7 < *v3;
    if (v7 == *v3) {
      BOOL v8 = *((_DWORD *)v3 + 182) > *((_DWORD *)v3 + 30);
    }
    if (!v8) {
      goto LABEL_5;
    }
    uint64_t v48 = v3[76];
    unsigned int v53 = *((_DWORD *)v3 + 162);
    sub_4F38B0((void *)v53, v3 + 77, &v49);
    uint64_t v54 = v3[82];
    uint64_t v56 = v3[85];
    long long v55 = *(_OWORD *)(v3 + 83);
    v3[85] = 0;
    v3[84] = 0;
    v3[83] = 0;
    char v57 = *((unsigned char *)v3 + 688);
    uint64_t v59 = v3[89];
    long long v58 = *(_OWORD *)(v3 + 87);
    v3[89] = 0;
    v3[88] = 0;
    v3[87] = 0;
    char v60 = *((unsigned char *)v3 + 720);
    unsigned int v61 = *((_DWORD *)v3 + 182);
    long long v62 = *((_OWORD *)v3 + 46);
    uint64_t v63 = v3[94];
    v3[93] = 0;
    v3[92] = 0;
    v3[94] = 0;
    long long v64 = *(_OWORD *)(v3 + 95);
    uint64_t v65 = v3[97];
    v3[95] = 0;
    v3[96] = 0;
    v3[97] = 0;
    long long v66 = *((_OWORD *)v3 + 49);
    uint64_t v67 = v3[100];
    v3[99] = 0;
    v3[98] = 0;
    v3[100] = 0;
    long long v68 = *(_OWORD *)(v3 + 101);
    uint64_t v69 = v3[103];
    v3[101] = 0;
    v3[102] = 0;
    v3[103] = 0;
    uint64_t v9 = v3[104];
    v3[104] = 0;
    uint64_t v70 = v9;
    int v71 = *((_DWORD *)v3 + 210);
    char v72 = *((unsigned char *)v3 + 844);
    long long v73 = *((_OWORD *)v3 + 53);
    uint64_t v74 = v3[108];
    v3[107] = 0;
    v3[106] = 0;
    v3[108] = 0;
    long long v10 = *(_OWORD *)(v3 + 109);
    uint64_t v76 = v3[111];
    long long v75 = v10;
    v3[110] = 0;
    v3[109] = 0;
    v3[111] = 0;
    long long v77 = *((_OWORD *)v3 + 56);
    uint64_t v11 = v3[114];
    v3[113] = 0;
    v3[112] = 0;
    v3[114] = 0;
    uint64_t v12 = v3[115];
    uint64_t v78 = v11;
    uint64_t v79 = v12;
    v3[115] = 0;
    long long v13 = *((_OWORD *)v3 + 58);
    long long v14 = *((_OWORD *)v3 + 59);
    v3[117] = 0;
    v3[116] = 0;
    long long v80 = v13;
    long long v81 = v14;
    uint64_t v15 = v3[120];
    v3[119] = 0;
    v3[118] = 0;
    v3[120] = 0;
    uint64_t v16 = v3[121];
    uint64_t v82 = v15;
    uint64_t v83 = v16;
    long long v84 = *((_OWORD *)v3 + 61);
    v3[121] = 0;
    v3[123] = 0;
    v3[122] = 0;
    uint64_t v17 = v3[124];
    v3[124] = 0;
    uint64_t v85 = v17;
    LODWORD(v17) = *((_DWORD *)v3 + 250);
    char v87 = *((unsigned char *)v3 + 1004);
    int v86 = v17;
    long long v18 = *((_OWORD *)v3 + 63);
    uint64_t v89 = v3[128];
    long long v88 = v18;
    v3[127] = 0;
    v3[126] = 0;
    v3[128] = 0;
    long long v19 = *(_OWORD *)(v3 + 129);
    uint64_t v91 = v3[131];
    long long v90 = v19;
    v3[130] = 0;
    v3[129] = 0;
    v3[131] = 0;
    long long v92 = *((_OWORD *)v3 + 66);
    uint64_t v20 = v3[134];
    v3[133] = 0;
    v3[132] = 0;
    v3[134] = 0;
    uint64_t v21 = v3[135];
    uint64_t v93 = v20;
    uint64_t v94 = v21;
    long long v22 = *((_OWORD *)v3 + 68);
    v3[135] = 0;
    v3[137] = 0;
    v3[136] = 0;
    long long v23 = *((_OWORD *)v3 + 69);
    long long v95 = v22;
    long long v96 = v23;
    uint64_t v97 = v3[140];
    v3[139] = 0;
    v3[138] = 0;
    v3[140] = 0;
    uint64_t v98 = v3[141];
    long long v99 = *((_OWORD *)v3 + 71);
    v3[141] = 0;
    v3[143] = 0;
    v3[142] = 0;
    uint64_t v24 = v3[144];
    v3[144] = 0;
    uint64_t v100 = v24;
    LODWORD(v24) = *((_DWORD *)v3 + 290);
    char v102 = *((unsigned char *)v3 + 1164);
    int v101 = v24;
    long long v25 = *((_OWORD *)v3 + 73);
    uint64_t v104 = v3[148];
    long long v103 = v25;
    v3[147] = 0;
    v3[146] = 0;
    v3[148] = 0;
    long long v26 = *(_OWORD *)(v3 + 149);
    uint64_t v106 = v3[151];
    long long v105 = v26;
    v3[150] = 0;
    v3[149] = 0;
    v3[151] = 0;
    long long v27 = v5;
    uint64_t v28 = *v3;
    do
    {
      v27[152] = v28;
      int v30 = *((_DWORD *)v27 + 314);
      int v31 = *((_DWORD *)v27 + 162);
      if (v30 == v31)
      {
        if (v30 == 1)
        {
          v27[153] = v27[77];
          int v34 = (void *)v27[154];
          long long v35 = 0uLL;
          if (v34)
          {
            v27[155] = (uint64_t)v34;
            operator delete(v34);
            long long v35 = 0uLL;
            *(_OWORD *)(v27 + 155) = 0u;
          }
          *((_OWORD *)v27 + 77) = *((_OWORD *)v27 + 39);
          v27[156] = v27[80];
          v27[80] = 0;
          *((_OWORD *)v27 + 39) = v35;
        }
        else if (!v30)
        {
          v27[153] = v27[77];
          uint64_t v32 = (void **)(v27 + 154);
          if (*((char *)v27 + 1255) < 0) {
            operator delete(*v32);
          }
          *(_OWORD *)uint64_t v32 = *((_OWORD *)v27 + 39);
          v27[156] = v27[80];
          *((unsigned char *)v27 + 647) = 0;
          *((unsigned char *)v27 + 624) = 0;
        }
        goto LABEL_39;
      }
      if (v30 == 1)
      {
        uint64_t v33 = (void *)v27[154];
        if (v33)
        {
          v27[155] = (uint64_t)v33;
          goto LABEL_28;
        }
LABEL_29:
        int v31 = *((_DWORD *)v27 + 162);
        goto LABEL_30;
      }
      if (!v30)
      {
        if (*((char *)v27 + 1255) < 0)
        {
          uint64_t v33 = (void *)v27[154];
LABEL_28:
          operator delete(v33);
          goto LABEL_29;
        }
        goto LABEL_29;
      }
LABEL_30:
      if (v31 == 1)
      {
        v27[153] = v27[77];
        v27[154] = 0;
        v27[156] = 0;
        v27[155] = 0;
        uint64_t v37 = (unsigned char *)v27[78];
        uint64_t v38 = (unsigned char *)v27[79];
        int64_t v39 = v38 - v37;
        if (v38 != v37)
        {
          if (v39 < 0) {
            sub_2E00();
          }
          uint64_t v40 = (char *)operator new(v38 - v37);
          v27[154] = (uint64_t)v40;
          v27[155] = (uint64_t)v40;
          uint64_t v41 = &v40[8 * (v39 >> 3)];
          v27[156] = (uint64_t)v41;
          memcpy(v40, v37, v39);
          v27[155] = (uint64_t)v41;
        }
      }
      else if (!v31)
      {
        v27[153] = v27[77];
        long long v36 = v27 + 154;
        if (*((char *)v27 + 647) < 0)
        {
          sub_4200(v36, (void *)v27[78], v27[79]);
        }
        else
        {
          *(_OWORD *)long long v36 = *((_OWORD *)v27 + 39);
          v27[156] = v27[80];
        }
      }
      *((_DWORD *)v27 + 314) = *((_DWORD *)v27 + 162);
LABEL_39:
      v27[158] = v27[82];
      uint64_t v42 = (void **)(v27 + 159);
      if (*((char *)v27 + 1295) < 0) {
        operator delete(*v42);
      }
      v27[161] = v27[85];
      *(_OWORD *)uint64_t v42 = *(_OWORD *)(v27 + 83);
      *((unsigned char *)v27 + 687) = 0;
      *((unsigned char *)v27 + 664) = 0;
      *((unsigned char *)v27 + 1296) = *((unsigned char *)v27 + 688);
      uint64_t v43 = (void **)(v27 + 163);
      if (*((char *)v27 + 1327) < 0) {
        operator delete(*v43);
      }
      v27[165] = v27[89];
      *(_OWORD *)uint64_t v43 = *(_OWORD *)(v27 + 87);
      *((unsigned char *)v27 + 719) = 0;
      *((unsigned char *)v27 + 696) = 0;
      *((unsigned char *)v27 + 1328) = *((unsigned char *)v27 + 720);
      *((_DWORD *)v27 + 334) = *((_DWORD *)v27 + 182);
      sub_4D90B4((uint64_t)(v27 + 168), (uint64_t)(v27 + 92));
      sub_4D90B4((uint64_t)(v27 + 188), (uint64_t)(v27 + 112));
      sub_4D90B4((uint64_t)(v27 + 208), (uint64_t)(v27 + 132));
      uint64_t v28 = *v27;
      BOOL v29 = v61 > *((_DWORD *)v27 + 30);
      if (v48 != *v27) {
        BOOL v29 = v48 < *v27;
      }
      v27 -= 76;
    }
    while (v29);
    v27[152] = v48;
    sub_4F377C((uint64_t)(v27 + 153), (uint64_t)&v49);
    v27[158] = v54;
    uint64_t v44 = (void **)(v27 + 159);
    if (*((char *)v27 + 1295) < 0) {
      operator delete(*v44);
    }
    uint64_t v45 = (void **)(v27 + 163);
    *(_OWORD *)uint64_t v44 = v55;
    v27[161] = v56;
    HIBYTE(v56) = 0;
    LOBYTE(v55) = 0;
    *((unsigned char *)v27 + 1296) = v57;
    if (*((char *)v27 + 1327) < 0) {
      operator delete(*v45);
    }
    *(_OWORD *)uint64_t v45 = v58;
    v27[165] = v59;
    HIBYTE(v59) = 0;
    LOBYTE(v58) = 0;
    *((unsigned char *)v27 + 1328) = v60;
    *((_DWORD *)v27 + 334) = v61;
    sub_4D90B4((uint64_t)(v27 + 168), (uint64_t)&v62);
    sub_4D90B4((uint64_t)(v27 + 188), (uint64_t)&v77);
    sub_4D90B4((uint64_t)(v27 + 208), (uint64_t)&v92);
    sub_4D4B58((uint64_t)&v92);
    sub_4D4B58((uint64_t)&v77);
    sub_4D4B58((uint64_t)&v62);
    if (SHIBYTE(v59) < 0)
    {
      operator delete((void *)v58);
      if (SHIBYTE(v56) < 0) {
        goto LABEL_54;
      }
LABEL_49:
      unsigned int v46 = v53;
      if (v53 != 1) {
        goto LABEL_50;
      }
LABEL_55:
      BOOL v47 = __p;
      if (__p)
      {
        unsigned int v51 = __p;
LABEL_4:
        operator delete(v47);
      }
    }
    else
    {
      if ((SHIBYTE(v56) & 0x80000000) == 0) {
        goto LABEL_49;
      }
LABEL_54:
      operator delete((void *)v55);
      unsigned int v46 = v53;
      if (v53 == 1) {
        goto LABEL_55;
      }
LABEL_50:
      if (!v46 && v52 < 0)
      {
        BOOL v47 = __p;
        goto LABEL_4;
      }
    }
LABEL_5:
    uint64_t v4 = v6 + 76;
    v5 += 76;
    uint64_t v3 = v6;
    if (v6 + 76 != a2) {
      continue;
    }
    break;
  }
}

void sub_5E354C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_58CC(exception_object);
}

uint64_t *sub_5E3590(uint64_t a1, uint64_t *a2)
{
  uint64_t v62 = *(void *)a1;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (void *)*(unsigned int *)(a1 + 40);
  int v67 = (int)v5;
  sub_4F38B0(v5, v4, &v63);
  uint64_t v68 = *(void *)(a1 + 48);
  *(_OWORD *)uint64_t v69 = *(_OWORD *)(a1 + 56);
  uint64_t v70 = *(void *)(a1 + 72);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  char v71 = *(unsigned char *)(a1 + 80);
  *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 88);
  uint64_t v73 = *(void *)(a1 + 104);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  char v74 = *(unsigned char *)(a1 + 112);
  unsigned int v75 = *(_DWORD *)(a1 + 120);
  unsigned int v6 = v75;
  long long v76 = *(_OWORD *)(a1 + 128);
  uint64_t v7 = *(void *)(a1 + 144);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  long long v78 = *(_OWORD *)(a1 + 152);
  uint64_t v8 = *(void *)(a1 + 168);
  uint64_t v77 = v7;
  uint64_t v79 = v8;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  long long v80 = *(_OWORD *)(a1 + 176);
  uint64_t v9 = *(void *)(a1 + 192);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  long long v82 = *(_OWORD *)(a1 + 200);
  uint64_t v10 = *(void *)(a1 + 216);
  uint64_t v11 = *(void *)(a1 + 224);
  uint64_t v81 = v9;
  uint64_t v83 = v10;
  uint64_t v84 = v11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  LODWORD(v9) = *(_DWORD *)(a1 + 232);
  char v86 = *(unsigned char *)(a1 + 236);
  int v85 = v9;
  uint64_t v12 = *(void *)(a1 + 256);
  long long v87 = *(_OWORD *)(a1 + 240);
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  uint64_t v13 = *(void *)(a1 + 280);
  long long v89 = *(_OWORD *)(a1 + 264);
  uint64_t v88 = v12;
  uint64_t v90 = v13;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  long long v91 = *(_OWORD *)(a1 + 288);
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  uint64_t v14 = *(void *)(a1 + 312);
  uint64_t v92 = *(void *)(a1 + 304);
  uint64_t v93 = v14;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  long long v15 = *(_OWORD *)(a1 + 320);
  long long v16 = *(_OWORD *)(a1 + 336);
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  long long v94 = v15;
  long long v95 = v16;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  uint64_t v17 = *(void *)(a1 + 360);
  uint64_t v96 = *(void *)(a1 + 352);
  uint64_t v97 = v17;
  long long v98 = *(_OWORD *)(a1 + 368);
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  uint64_t v18 = *(void *)(a1 + 384);
  *(void *)(a1 + 384) = 0;
  uint64_t v99 = v18;
  LODWORD(v18) = *(_DWORD *)(a1 + 392);
  char v101 = *(unsigned char *)(a1 + 396);
  int v100 = v18;
  uint64_t v19 = *(void *)(a1 + 416);
  long long v102 = *(_OWORD *)(a1 + 400);
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  uint64_t v20 = *(void *)(a1 + 440);
  long long v104 = *(_OWORD *)(a1 + 424);
  uint64_t v103 = v19;
  uint64_t v105 = v20;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  long long v106 = *(_OWORD *)(a1 + 448);
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  uint64_t v21 = *(void *)(a1 + 472);
  uint64_t v107 = *(void *)(a1 + 464);
  uint64_t v108 = v21;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  long long v22 = *(_OWORD *)(a1 + 480);
  long long v23 = *(_OWORD *)(a1 + 496);
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 0;
  long long v109 = v22;
  long long v110 = v23;
  uint64_t v24 = *(void *)(a1 + 520);
  uint64_t v111 = *(void *)(a1 + 512);
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  uint64_t v112 = v24;
  long long v113 = *(_OWORD *)(a1 + 528);
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 536) = 0;
  uint64_t v25 = *(void *)(a1 + 544);
  *(void *)(a1 + 544) = 0;
  uint64_t v114 = v25;
  LODWORD(v25) = *(_DWORD *)(a1 + 552);
  char v116 = *(unsigned char *)(a1 + 556);
  int v115 = v25;
  long long v26 = *(_OWORD *)(a1 + 560);
  uint64_t v118 = *(void *)(a1 + 576);
  long long v117 = v26;
  *(void *)(a1 + 560) = 0;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 576) = 0;
  uint64_t v27 = *(void *)(a1 + 600);
  long long v28 = *(_OWORD *)(a1 + 584);
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 600) = 0;
  BOOL v29 = a2 - 76;
  uint64_t v30 = v62;
  uint64_t v31 = *(a2 - 76);
  BOOL v32 = v62 == v31;
  BOOL v33 = v62 < v31;
  if (v32) {
    BOOL v33 = v6 > *((_DWORD *)a2 - 122);
  }
  long long v119 = v28;
  uint64_t v120 = v27;
  if (v33)
  {
    int v34 = (uint64_t *)a1;
    do
    {
      long long v35 = v34 + 76;
      uint64_t v36 = v34[76];
      BOOL v37 = v6 > *((_DWORD *)v34 + 182);
      BOOL v32 = v62 == v36;
      BOOL v38 = v62 < v36;
      if (v32) {
        BOOL v38 = v37;
      }
      int v34 = v35;
    }
    while (!v38);
  }
  else
  {
    int64_t v39 = (uint64_t *)(a1 + 608);
    do
    {
      long long v35 = v39;
      if (v39 >= a2) {
        break;
      }
      uint64_t v40 = *v39;
      BOOL v41 = v6 > *((_DWORD *)v35 + 30);
      BOOL v32 = v62 == v40;
      BOOL v42 = v62 < v40;
      if (!v32) {
        BOOL v41 = v42;
      }
      int64_t v39 = v35 + 76;
    }
    while (!v41);
  }
  if (v35 >= a2) {
    goto LABEL_19;
  }
  do
  {
    BOOL v43 = v62 < *v29;
    if (v62 == *v29) {
      BOOL v43 = v6 > *((_DWORD *)v29 + 30);
    }
    v29 -= 76;
  }
  while (v43);
  while (1)
  {
    a2 = v29 + 76;
LABEL_19:
    if (v35 >= a2) {
      break;
    }
    sub_5DF7E8(v35, a2);
    uint64_t v30 = v62;
    do
    {
      uint64_t v44 = v35[76];
      unsigned int v45 = *((_DWORD *)v35 + 182);
      v35 += 76;
      BOOL v46 = v75 > v45;
      BOOL v32 = v62 == v44;
      BOOL v47 = v62 < v44;
      if (v32) {
        BOOL v47 = v46;
      }
    }
    while (!v47);
    BOOL v29 = a2 - 76;
    do
    {
      BOOL v48 = v62 < *v29;
      if (v62 == *v29) {
        BOOL v48 = v75 > *((_DWORD *)v29 + 30);
      }
      v29 -= 76;
    }
    while (v48);
  }
  uint64_t v49 = v35 - 76;
  if (v35 - 76 != (uint64_t *)a1)
  {
    uint64_t v50 = (uint64_t)v4;
    unsigned int v51 = (void **)(a1 + 56);
    *(void *)a1 = *v49;
    sub_4F377C(v50, (uint64_t)(v35 - 75));
    *(void *)(a1 + 48) = *(v35 - 70);
    if (*(char *)(a1 + 79) < 0) {
      operator delete(*v51);
    }
    char v52 = (void **)(a1 + 88);
    long long v53 = *(_OWORD *)(v35 - 69);
    *(void *)(a1 + 72) = *(v35 - 67);
    *(_OWORD *)unsigned int v51 = v53;
    *((unsigned char *)v35 - 529) = 0;
    *((unsigned char *)v35 - 552) = 0;
    *(unsigned char *)(a1 + 80) = *((unsigned char *)v35 - 528);
    if (*(char *)(a1 + 111) < 0) {
      operator delete(*v52);
    }
    long long v54 = *(_OWORD *)(v35 - 65);
    *(void *)(a1 + 104) = *(v35 - 63);
    *(_OWORD *)char v52 = v54;
    *((unsigned char *)v35 - 497) = 0;
    *((unsigned char *)v35 - 520) = 0;
    *(unsigned char *)(a1 + 112) = *((unsigned char *)v35 - 496);
    *(_DWORD *)(a1 + 120) = *((_DWORD *)v35 - 122);
    sub_4D90B4(a1 + 128, (uint64_t)(v35 - 60));
    sub_4D90B4(a1 + 288, (uint64_t)(v35 - 40));
    sub_4D90B4(a1 + 448, (uint64_t)(v35 - 20));
    uint64_t v30 = v62;
  }
  *uint64_t v49 = v30;
  sub_4F377C((uint64_t)(v35 - 75), (uint64_t)&v63);
  *(v35 - 70) = v68;
  long long v55 = (void **)(v35 - 69);
  if (*((char *)v35 - 529) < 0) {
    operator delete(*v55);
  }
  long long v56 = *(_OWORD *)v69;
  *(v35 - 67) = v70;
  *(_OWORD *)long long v55 = v56;
  HIBYTE(v70) = 0;
  LOBYTE(v69[0]) = 0;
  *((unsigned char *)v35 - 528) = v71;
  char v57 = (void **)(v35 - 65);
  if (*((char *)v35 - 497) < 0) {
    operator delete(*v57);
  }
  long long v58 = *(_OWORD *)__p;
  *(v35 - 63) = v73;
  *(_OWORD *)char v57 = v58;
  HIBYTE(v73) = 0;
  LOBYTE(__p[0]) = 0;
  *((unsigned char *)v35 - 496) = v74;
  *((_DWORD *)v35 - 122) = v75;
  sub_4D90B4((uint64_t)(v35 - 60), (uint64_t)&v76);
  sub_4D90B4((uint64_t)(v35 - 40), (uint64_t)&v91);
  sub_4D90B4((uint64_t)(v35 - 20), (uint64_t)&v106);
  sub_4D4B58((uint64_t)&v106);
  sub_4D4B58((uint64_t)&v91);
  sub_4D4B58((uint64_t)&v76);
  if ((SHIBYTE(v73) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v70) & 0x80000000) == 0) {
      goto LABEL_41;
    }
LABEL_46:
    operator delete(v69[0]);
    int v59 = v67;
    if (v67 != 1) {
      goto LABEL_42;
    }
    goto LABEL_47;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v70) < 0) {
    goto LABEL_46;
  }
LABEL_41:
  int v59 = v67;
  if (v67 != 1)
  {
LABEL_42:
    if (!v59 && v66 < 0)
    {
      char v60 = v64;
LABEL_49:
      operator delete(v60);
      return v35;
    }
    return v35;
  }
LABEL_47:
  char v60 = v64;
  if (v64)
  {
    uint64_t v65 = v64;
    goto LABEL_49;
  }
  return v35;
}

unint64_t sub_5E3BB8(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = *(void *)a1;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (void *)*(unsigned int *)(a1 + 40);
  int v64 = (int)v5;
  sub_4F38B0(v5, v4, &v60);
  uint64_t v6 = 0;
  uint64_t v65 = *(void *)(a1 + 48);
  *(_OWORD *)char v66 = *(_OWORD *)(a1 + 56);
  uint64_t v67 = *(void *)(a1 + 72);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  char v68 = *(unsigned char *)(a1 + 80);
  char v57 = (void **)(a1 + 56);
  long long v58 = (void **)(a1 + 88);
  *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 88);
  uint64_t v70 = *(void *)(a1 + 104);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  char v71 = *(unsigned char *)(a1 + 112);
  unsigned int v7 = *(_DWORD *)(a1 + 120);
  unsigned int v72 = v7;
  long long v73 = *(_OWORD *)(a1 + 128);
  uint64_t v8 = *(void *)(a1 + 144);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  long long v75 = *(_OWORD *)(a1 + 152);
  uint64_t v9 = *(void *)(a1 + 168);
  uint64_t v74 = v8;
  uint64_t v76 = v9;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  long long v77 = *(_OWORD *)(a1 + 176);
  uint64_t v10 = *(void *)(a1 + 192);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  long long v79 = *(_OWORD *)(a1 + 200);
  uint64_t v11 = *(void *)(a1 + 216);
  uint64_t v12 = *(void *)(a1 + 224);
  uint64_t v78 = v10;
  uint64_t v80 = v11;
  uint64_t v81 = v12;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  LODWORD(v10) = *(_DWORD *)(a1 + 232);
  char v83 = *(unsigned char *)(a1 + 236);
  int v82 = v10;
  uint64_t v13 = *(void *)(a1 + 256);
  long long v84 = *(_OWORD *)(a1 + 240);
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  uint64_t v14 = *(void *)(a1 + 280);
  long long v86 = *(_OWORD *)(a1 + 264);
  uint64_t v85 = v13;
  uint64_t v87 = v14;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  long long v88 = *(_OWORD *)(a1 + 288);
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  uint64_t v15 = *(void *)(a1 + 312);
  uint64_t v89 = *(void *)(a1 + 304);
  uint64_t v90 = v15;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  long long v16 = *(_OWORD *)(a1 + 320);
  long long v17 = *(_OWORD *)(a1 + 336);
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  long long v91 = v16;
  long long v92 = v17;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  uint64_t v18 = *(void *)(a1 + 360);
  uint64_t v93 = *(void *)(a1 + 352);
  uint64_t v94 = v18;
  long long v95 = *(_OWORD *)(a1 + 368);
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  uint64_t v19 = *(void *)(a1 + 384);
  *(void *)(a1 + 384) = 0;
  uint64_t v96 = v19;
  LODWORD(v19) = *(_DWORD *)(a1 + 392);
  char v98 = *(unsigned char *)(a1 + 396);
  int v97 = v19;
  uint64_t v20 = *(void *)(a1 + 416);
  long long v99 = *(_OWORD *)(a1 + 400);
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  uint64_t v21 = *(void *)(a1 + 440);
  long long v101 = *(_OWORD *)(a1 + 424);
  uint64_t v100 = v20;
  uint64_t v102 = v21;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  uint64_t v22 = *(void *)(a1 + 472);
  uint64_t v104 = *(void *)(a1 + 464);
  uint64_t v105 = v22;
  uint64_t v23 = *(void *)(a1 + 520);
  uint64_t v108 = *(void *)(a1 + 512);
  long long v103 = *(_OWORD *)(a1 + 448);
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  long long v24 = *(_OWORD *)(a1 + 480);
  long long v25 = *(_OWORD *)(a1 + 496);
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 0;
  long long v106 = v24;
  long long v107 = v25;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  uint64_t v109 = v23;
  long long v110 = *(_OWORD *)(a1 + 528);
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 536) = 0;
  uint64_t v26 = *(void *)(a1 + 544);
  *(void *)(a1 + 544) = 0;
  uint64_t v111 = v26;
  char v113 = *(unsigned char *)(a1 + 556);
  int v112 = *(_DWORD *)(a1 + 552);
  long long v27 = *(_OWORD *)(a1 + 560);
  uint64_t v115 = *(void *)(a1 + 576);
  long long v114 = v27;
  *(void *)(a1 + 560) = 0;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 576) = 0;
  uint64_t v28 = *(void *)(a1 + 600);
  long long v116 = *(_OWORD *)(a1 + 584);
  uint64_t v117 = v28;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 600) = 0;
  uint64_t v29 = v59;
  do
  {
    uint64_t v30 = *(void *)(a1 + v6 + 608);
    BOOL v31 = *(_DWORD *)(a1 + v6 + 728) > v7;
    BOOL v32 = v30 == v59;
    BOOL v33 = v30 < v59;
    if (!v32) {
      BOOL v31 = v33;
    }
    v6 += 608;
  }
  while (v31);
  unint64_t v34 = a1 + v6;
  BOOL v32 = v6 == 608;
  uint64_t v35 = a2 - 608;
  if (v32)
  {
    while (1)
    {
      BOOL v37 = (uint64_t *)(v35 + 608);
      if (v34 >= v35 + 608) {
        break;
      }
      BOOL v55 = *(void *)v35 < v59;
      if (*(void *)v35 == v59) {
        BOOL v55 = *(_DWORD *)(v35 + 120) > v7;
      }
      v35 -= 608;
      if (v55) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    do
    {
      BOOL v36 = *(void *)v35 < v59;
      if (*(void *)v35 == v59) {
        BOOL v36 = *(_DWORD *)(v35 + 120) > v7;
      }
      v35 -= 608;
    }
    while (!v36);
LABEL_9:
    BOOL v37 = (uint64_t *)(v35 + 608);
  }
  unint64_t v38 = v34;
  if (v34 < (unint64_t)v37)
  {
    int64_t v39 = v37;
    do
    {
      sub_5DF7E8((uint64_t *)v38, v39);
      uint64_t v29 = v59;
      do
      {
        uint64_t v40 = *(void *)(v38 + 608);
        unsigned int v41 = *(_DWORD *)(v38 + 728);
        v38 += 608;
        BOOL v42 = v41 > v72;
        BOOL v32 = v40 == v59;
        BOOL v43 = v40 < v59;
        if (v32) {
          BOOL v43 = v42;
        }
      }
      while (v43);
      uint64_t v44 = v39 - 76;
      do
      {
        BOOL v45 = *v44 < v59;
        if (*v44 == v59) {
          BOOL v45 = *((_DWORD *)v44 + 30) > v72;
        }
        v44 -= 76;
      }
      while (!v45);
      int64_t v39 = v44 + 76;
    }
    while (v38 < (unint64_t)(v44 + 76));
  }
  BOOL v46 = (uint64_t *)(v38 - 608);
  if (v38 - 608 != a1)
  {
    *(void *)a1 = *v46;
    sub_4F377C((uint64_t)v4, v38 - 600);
    *(void *)(a1 + 48) = *(void *)(v38 - 560);
    if (*(char *)(a1 + 79) < 0) {
      operator delete(*v57);
    }
    long long v47 = *(_OWORD *)(v38 - 552);
    *(void *)(a1 + 72) = *(void *)(v38 - 536);
    *(_OWORD *)char v57 = v47;
    *(unsigned char *)(v38 - 529) = 0;
    *(unsigned char *)(v38 - 552) = 0;
    *(unsigned char *)(a1 + 80) = *(unsigned char *)(v38 - 528);
    if (*(char *)(a1 + 111) < 0) {
      operator delete(*v58);
    }
    long long v48 = *(_OWORD *)(v38 - 520);
    *(void *)(a1 + 104) = *(void *)(v38 - 504);
    *(_OWORD *)long long v58 = v48;
    *(unsigned char *)(v38 - 497) = 0;
    *(unsigned char *)(v38 - 520) = 0;
    *(unsigned char *)(a1 + 112) = *(unsigned char *)(v38 - 496);
    *(_DWORD *)(a1 + 120) = *(_DWORD *)(v38 - 488);
    sub_4D90B4(a1 + 128, v38 - 480);
    sub_4D90B4(a1 + 288, v38 - 320);
    sub_4D90B4(a1 + 448, v38 - 160);
    uint64_t v29 = v59;
  }
  *BOOL v46 = v29;
  sub_4F377C(v38 - 600, (uint64_t)&v60);
  *(void *)(v38 - 560) = v65;
  uint64_t v49 = (void **)(v38 - 552);
  if (*(char *)(v38 - 529) < 0) {
    operator delete(*v49);
  }
  long long v50 = *(_OWORD *)v66;
  *(void *)(v38 - 536) = v67;
  *(_OWORD *)uint64_t v49 = v50;
  HIBYTE(v67) = 0;
  LOBYTE(v66[0]) = 0;
  *(unsigned char *)(v38 - 528) = v68;
  unsigned int v51 = (void **)(v38 - 520);
  if (*(char *)(v38 - 497) < 0) {
    operator delete(*v51);
  }
  long long v52 = *(_OWORD *)__p;
  *(void *)(v38 - 504) = v70;
  *(_OWORD *)unsigned int v51 = v52;
  HIBYTE(v70) = 0;
  LOBYTE(__p[0]) = 0;
  *(unsigned char *)(v38 - 496) = v71;
  *(_DWORD *)(v38 - 488) = v72;
  sub_4D90B4(v38 - 480, (uint64_t)&v73);
  sub_4D90B4(v38 - 320, (uint64_t)&v88);
  sub_4D90B4(v38 - 160, (uint64_t)&v103);
  sub_4D4B58((uint64_t)&v103);
  sub_4D4B58((uint64_t)&v88);
  sub_4D4B58((uint64_t)&v73);
  if ((SHIBYTE(v70) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v67) & 0x80000000) == 0) {
      goto LABEL_33;
    }
LABEL_43:
    operator delete(v66[0]);
    int v53 = v64;
    if (v64 != 1) {
      goto LABEL_34;
    }
    goto LABEL_44;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v67) < 0) {
    goto LABEL_43;
  }
LABEL_33:
  int v53 = v64;
  if (v64 != 1)
  {
LABEL_34:
    if (!v53 && v63 < 0)
    {
      long long v54 = v61;
LABEL_46:
      operator delete(v54);
      return v38 - 608;
    }
    return v38 - 608;
  }
LABEL_44:
  long long v54 = v61;
  if (v61)
  {
    uint64_t v62 = v61;
    goto LABEL_46;
  }
  return v38 - 608;
}

void sub_5E41DC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_58CC(a1);
}

BOOL sub_5E41E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(0x86BCA1AF286BCA1BLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      long long v47 = (uint64_t *)(a2 - 608);
      uint64_t v48 = *(void *)(v2 - 608);
      BOOL v49 = v48 == *(void *)a1;
      BOOL v50 = v48 < *(void *)a1;
      if (v49) {
        BOOL v50 = *(_DWORD *)(v2 - 488) > *(_DWORD *)(a1 + 120);
      }
      if (v50)
      {
        sub_5DF7E8((uint64_t *)a1, v47);
        return 1;
      }
      return result;
    case 3uLL:
      sub_5DE2E4(a1, a1 + 608, a2 - 608);
      return 1;
    case 4uLL:
      sub_5DFCD4(a1, a1 + 608, a1 + 1216, a2 - 608);
      return 1;
    case 5uLL:
      sub_5DFDD4(a1, a1 + 608, a1 + 1216, a1 + 1824, a2 - 608);
      return 1;
    default:
      uint64_t v6 = a1 + 1216;
      sub_5DE2E4(a1, a1 + 608, a1 + 1216);
      uint64_t v7 = a1 + 1824;
      if (a1 + 1824 == v2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      uint64_t v51 = v2;
      break;
  }
  while (1)
  {
    BOOL v10 = *(void *)v7 < *(void *)v6;
    if (*(void *)v7 == *(void *)v6) {
      BOOL v10 = *(_DWORD *)(v7 + 120) > *(_DWORD *)(v6 + 120);
    }
    if (!v10) {
      goto LABEL_7;
    }
    uint64_t v52 = *(void *)v7;
    unsigned int v57 = *(_DWORD *)(v7 + 40);
    sub_4F38B0((void *)v57, (uint64_t *)(v7 + 8), &v53);
    uint64_t v58 = *(void *)(v7 + 48);
    long long v59 = *(_OWORD *)(v7 + 56);
    uint64_t v60 = *(void *)(v7 + 72);
    *(void *)(v7 + 56) = 0;
    *(void *)(v7 + 64) = 0;
    *(void *)(v7 + 72) = 0;
    char v61 = *(unsigned char *)(v7 + 80);
    long long v62 = *(_OWORD *)(v7 + 88);
    uint64_t v63 = *(void *)(v7 + 104);
    *(void *)(v7 + 96) = 0;
    *(void *)(v7 + 104) = 0;
    *(void *)(v7 + 88) = 0;
    char v64 = *(unsigned char *)(v7 + 112);
    unsigned int v65 = *(_DWORD *)(v7 + 120);
    long long v66 = *(_OWORD *)(v7 + 128);
    uint64_t v11 = *(void *)(v7 + 144);
    *(void *)(v7 + 128) = 0;
    *(void *)(v7 + 136) = 0;
    long long v68 = *(_OWORD *)(v7 + 152);
    uint64_t v12 = *(void *)(v7 + 168);
    uint64_t v67 = v11;
    uint64_t v69 = v12;
    *(void *)(v7 + 144) = 0;
    *(void *)(v7 + 152) = 0;
    *(void *)(v7 + 160) = 0;
    *(void *)(v7 + 168) = 0;
    long long v70 = *(_OWORD *)(v7 + 176);
    uint64_t v13 = *(void *)(v7 + 192);
    *(void *)(v7 + 176) = 0;
    *(void *)(v7 + 184) = 0;
    long long v72 = *(_OWORD *)(v7 + 200);
    uint64_t v14 = *(void *)(v7 + 216);
    uint64_t v15 = *(void *)(v7 + 224);
    uint64_t v71 = v13;
    uint64_t v73 = v14;
    uint64_t v74 = v15;
    *(void *)(v7 + 192) = 0;
    *(void *)(v7 + 200) = 0;
    *(void *)(v7 + 208) = 0;
    *(void *)(v7 + 216) = 0;
    *(void *)(v7 + 224) = 0;
    LODWORD(v13) = *(_DWORD *)(v7 + 232);
    char v76 = *(unsigned char *)(v7 + 236);
    int v75 = v13;
    long long v16 = *(_OWORD *)(v7 + 240);
    uint64_t v78 = *(void *)(v7 + 256);
    long long v77 = v16;
    *(void *)(v7 + 240) = 0;
    *(void *)(v7 + 248) = 0;
    long long v17 = *(_OWORD *)(v7 + 264);
    uint64_t v80 = *(void *)(v7 + 280);
    long long v79 = v17;
    *(void *)(v7 + 256) = 0;
    *(void *)(v7 + 264) = 0;
    *(void *)(v7 + 272) = 0;
    *(void *)(v7 + 280) = 0;
    long long v81 = *(_OWORD *)(v7 + 288);
    *(void *)(v7 + 288) = 0;
    *(void *)(v7 + 296) = 0;
    uint64_t v18 = *(void *)(v7 + 312);
    uint64_t v82 = *(void *)(v7 + 304);
    uint64_t v83 = v18;
    *(void *)(v7 + 304) = 0;
    *(void *)(v7 + 312) = 0;
    long long v19 = *(_OWORD *)(v7 + 320);
    long long v20 = *(_OWORD *)(v7 + 336);
    *(void *)(v7 + 320) = 0;
    *(void *)(v7 + 328) = 0;
    long long v84 = v19;
    long long v85 = v20;
    *(void *)(v7 + 336) = 0;
    *(void *)(v7 + 344) = 0;
    uint64_t v21 = *(void *)(v7 + 360);
    uint64_t v86 = *(void *)(v7 + 352);
    uint64_t v87 = v21;
    long long v88 = *(_OWORD *)(v7 + 368);
    *(void *)(v7 + 352) = 0;
    *(void *)(v7 + 360) = 0;
    *(void *)(v7 + 368) = 0;
    *(void *)(v7 + 376) = 0;
    uint64_t v22 = *(void *)(v7 + 384);
    *(void *)(v7 + 384) = 0;
    uint64_t v89 = v22;
    LODWORD(v22) = *(_DWORD *)(v7 + 392);
    char v91 = *(unsigned char *)(v7 + 396);
    int v90 = v22;
    long long v23 = *(_OWORD *)(v7 + 400);
    uint64_t v93 = *(void *)(v7 + 416);
    long long v92 = v23;
    *(void *)(v7 + 400) = 0;
    *(void *)(v7 + 408) = 0;
    *(void *)(v7 + 416) = 0;
    long long v24 = *(_OWORD *)(v7 + 424);
    uint64_t v95 = *(void *)(v7 + 440);
    long long v94 = v24;
    *(void *)(v7 + 424) = 0;
    *(void *)(v7 + 432) = 0;
    *(void *)(v7 + 440) = 0;
    long long v96 = *(_OWORD *)(v7 + 448);
    *(void *)(v7 + 448) = 0;
    *(void *)(v7 + 456) = 0;
    uint64_t v25 = *(void *)(v7 + 472);
    uint64_t v97 = *(void *)(v7 + 464);
    uint64_t v98 = v25;
    *(void *)(v7 + 464) = 0;
    *(void *)(v7 + 472) = 0;
    long long v26 = *(_OWORD *)(v7 + 480);
    long long v27 = *(_OWORD *)(v7 + 496);
    *(void *)(v7 + 480) = 0;
    *(void *)(v7 + 488) = 0;
    long long v99 = v26;
    long long v100 = v27;
    uint64_t v28 = *(void *)(v7 + 520);
    uint64_t v101 = *(void *)(v7 + 512);
    *(void *)(v7 + 496) = 0;
    *(void *)(v7 + 504) = 0;
    uint64_t v102 = v28;
    long long v103 = *(_OWORD *)(v7 + 528);
    *(void *)(v7 + 512) = 0;
    *(void *)(v7 + 520) = 0;
    *(void *)(v7 + 528) = 0;
    *(void *)(v7 + 536) = 0;
    uint64_t v29 = *(void *)(v7 + 544);
    *(void *)(v7 + 544) = 0;
    uint64_t v104 = v29;
    LODWORD(v29) = *(_DWORD *)(v7 + 552);
    char v106 = *(unsigned char *)(v7 + 556);
    int v105 = v29;
    long long v30 = *(_OWORD *)(v7 + 560);
    uint64_t v108 = *(void *)(v7 + 576);
    long long v107 = v30;
    *(void *)(v7 + 560) = 0;
    *(void *)(v7 + 568) = 0;
    *(void *)(v7 + 576) = 0;
    long long v31 = *(_OWORD *)(v7 + 584);
    uint64_t v110 = *(void *)(v7 + 600);
    long long v109 = v31;
    *(void *)(v7 + 584) = 0;
    *(void *)(v7 + 592) = 0;
    *(void *)(v7 + 600) = 0;
    uint64_t v32 = v8;
    uint64_t v33 = *(void *)v6;
    while (1)
    {
      uint64_t v34 = a1 + v32;
      *(void *)(a1 + v32 + 1824) = v33;
      sub_4F377C(a1 + v32 + 1832, a1 + v32 + 1224);
      *(void *)(a1 + v32 + 1872) = *(void *)(a1 + v32 + 1264);
      uint64_t v35 = (void **)(a1 + v32 + 1880);
      if (*(char *)(a1 + v32 + 1903) < 0) {
        operator delete(*v35);
      }
      *(void *)(v34 + 1896) = *(void *)(v34 + 1288);
      *(_OWORD *)uint64_t v35 = *(_OWORD *)(v34 + 1272);
      *(unsigned char *)(v34 + 1295) = 0;
      *(unsigned char *)(v34 + 1272) = 0;
      *(unsigned char *)(v34 + 1904) = *(unsigned char *)(v34 + 1296);
      uint64_t v36 = v34 + 1912;
      if (*(char *)(v34 + 1935) < 0) {
        operator delete(*(void **)v36);
      }
      uint64_t v37 = a1 + v32;
      uint64_t v38 = a1 + v32 + 1304;
      *(void *)(v36 + 16) = *(void *)(a1 + v32 + 1320);
      *(_OWORD *)uint64_t v36 = *(_OWORD *)v38;
      *(unsigned char *)(v37 + 1327) = 0;
      *(unsigned char *)(v37 + 1304) = 0;
      *(unsigned char *)(v37 + 1936) = *(unsigned char *)(a1 + v32 + 1328);
      *(_DWORD *)(v37 + 1944) = *(_DWORD *)(a1 + v32 + 1336);
      uint64_t v39 = a1 + v32 + 1344;
      sub_4D90B4(a1 + v32 + 1952, v39);
      uint64_t v40 = a1 + v32 + 1504;
      sub_4D90B4(v37 + 2112, v37 + 1504);
      uint64_t v41 = a1 + v32 + 1664;
      sub_4D90B4(v37 + 2272, v37 + 1664);
      if (v32 == -1216) {
        break;
      }
      uint64_t v33 = *(void *)(v37 + 608);
      BOOL v42 = v65 > *(_DWORD *)(v37 + 728);
      if (v52 != v33) {
        BOOL v42 = v52 < v33;
      }
      v32 -= 608;
      if (!v42)
      {
        uint64_t v43 = a1 + v32 + 1824;
        goto LABEL_22;
      }
    }
    uint64_t v43 = a1;
LABEL_22:
    *(void *)uint64_t v43 = v52;
    sub_4F377C(v37 + 1224, (uint64_t)&v53);
    *(void *)(v43 + 48) = v58;
    uint64_t v44 = v37 + 1272;
    if (*(char *)(v43 + 79) < 0) {
      operator delete(*(void **)v44);
    }
    *(_OWORD *)uint64_t v44 = v59;
    *(void *)(v44 + 16) = v60;
    HIBYTE(v60) = 0;
    LOBYTE(v59) = 0;
    *(unsigned char *)(v43 + 80) = v61;
    if (*(char *)(v43 + 111) < 0) {
      operator delete(*(void **)v38);
    }
    *(_OWORD *)uint64_t v38 = v62;
    *(void *)(v38 + 16) = v63;
    HIBYTE(v63) = 0;
    LOBYTE(v62) = 0;
    *(unsigned char *)(v43 + 112) = v64;
    *(_DWORD *)(v43 + 120) = v65;
    sub_4D90B4(v39, (uint64_t)&v66);
    sub_4D90B4(v40, (uint64_t)&v81);
    sub_4D90B4(v41, (uint64_t)&v96);
    sub_4D4B58((uint64_t)&v96);
    sub_4D4B58((uint64_t)&v81);
    sub_4D4B58((uint64_t)&v66);
    uint64_t v2 = v51;
    if (SHIBYTE(v63) < 0)
    {
      operator delete((void *)v62);
      if ((SHIBYTE(v60) & 0x80000000) == 0)
      {
LABEL_28:
        unsigned int v45 = v57;
        if (v57 != 1) {
          goto LABEL_29;
        }
        goto LABEL_34;
      }
    }
    else if ((SHIBYTE(v60) & 0x80000000) == 0)
    {
      goto LABEL_28;
    }
    operator delete((void *)v59);
    unsigned int v45 = v57;
    if (v57 != 1)
    {
LABEL_29:
      if (!v45 && v56 < 0)
      {
        BOOL v46 = __p;
LABEL_5:
        operator delete(v46);
        goto LABEL_6;
      }
      goto LABEL_6;
    }
LABEL_34:
    BOOL v46 = __p;
    if (__p)
    {
      BOOL v55 = __p;
      goto LABEL_5;
    }
LABEL_6:
    if (++v9 == 8) {
      return v7 + 608 == v51;
    }
LABEL_7:
    uint64_t v6 = v7;
    v8 += 608;
    v7 += 608;
    if (v7 == v2) {
      return 1;
    }
  }
}

void sub_5E4910(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_58CC(a1);
}

void sub_5E4934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 < 2) {
    return;
  }
  uint64_t v5 = a4;
  uint64_t v54 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < (uint64_t)(0x86BCA1AF286BCA1BLL * (((uint64_t)a4 - a1) >> 5))) {
    return;
  }
  uint64_t v8 = (0xD79435E50D79436 * (((uint64_t)a4 - a1) >> 5)) | 1;
  int v9 = (uint64_t *)(a1 + 608 * v8);
  if (0xD79435E50D79436 * (((uint64_t)a4 - a1) >> 5) + 2 >= a3)
  {
    uint64_t v10 = *v9;
  }
  else
  {
    uint64_t v10 = *v9;
    uint64_t v11 = v9[76];
    BOOL v12 = *(_DWORD *)(a1 + 608 * v8 + 120) > *((_DWORD *)v9 + 182);
    if (*v9 != v11) {
      BOOL v12 = *v9 < v11;
    }
    if (v12)
    {
      uint64_t v10 = v9[76];
      v9 += 76;
      uint64_t v8 = 0xD79435E50D79436 * (((uint64_t)a4 - a1) >> 5) + 2;
    }
  }
  BOOL v13 = v10 == *a4;
  BOOL v14 = v10 < *a4;
  if (v13) {
    BOOL v14 = *((_DWORD *)v9 + 30) > *((_DWORD *)a4 + 30);
  }
  if (v14) {
    return;
  }
  uint64_t v55 = *a4;
  unsigned int v60 = *((_DWORD *)a4 + 10);
  sub_4F38B0((void *)v60, a4 + 1, &v56);
  uint64_t v61 = v5[6];
  *(_OWORD *)long long v62 = *(_OWORD *)(v5 + 7);
  uint64_t v63 = v5[9];
  v5[7] = 0;
  v5[8] = 0;
  v5[9] = 0;
  char v64 = *((unsigned char *)v5 + 80);
  *(_OWORD *)std::string __p = *(_OWORD *)(v5 + 11);
  uint64_t v66 = v5[13];
  v5[12] = 0;
  v5[13] = 0;
  v5[11] = 0;
  char v67 = *((unsigned char *)v5 + 112);
  unsigned int v68 = *((_DWORD *)v5 + 30);
  long long v69 = *((_OWORD *)v5 + 8);
  uint64_t v15 = v5[18];
  v5[16] = 0;
  v5[17] = 0;
  long long v71 = *(_OWORD *)(v5 + 19);
  uint64_t v16 = v5[21];
  uint64_t v70 = v15;
  uint64_t v72 = v16;
  v5[18] = 0;
  v5[19] = 0;
  v5[20] = 0;
  v5[21] = 0;
  long long v73 = *((_OWORD *)v5 + 11);
  uint64_t v17 = v5[24];
  v5[22] = 0;
  v5[23] = 0;
  long long v75 = *(_OWORD *)(v5 + 25);
  uint64_t v18 = v5[27];
  uint64_t v19 = v5[28];
  uint64_t v74 = v17;
  uint64_t v76 = v18;
  uint64_t v77 = v19;
  v5[24] = 0;
  v5[25] = 0;
  v5[26] = 0;
  v5[27] = 0;
  v5[28] = 0;
  LODWORD(v18) = *((_DWORD *)v5 + 58);
  char v79 = *((unsigned char *)v5 + 236);
  int v78 = v18;
  uint64_t v20 = v5[32];
  long long v80 = *((_OWORD *)v5 + 15);
  v5[30] = 0;
  v5[31] = 0;
  uint64_t v21 = v5[35];
  long long v82 = *(_OWORD *)(v5 + 33);
  uint64_t v81 = v20;
  uint64_t v83 = v21;
  v5[32] = 0;
  v5[33] = 0;
  v5[34] = 0;
  v5[35] = 0;
  long long v84 = *((_OWORD *)v5 + 18);
  v5[36] = 0;
  v5[37] = 0;
  uint64_t v22 = v5[39];
  uint64_t v85 = v5[38];
  uint64_t v86 = v22;
  v5[38] = 0;
  v5[39] = 0;
  long long v23 = *((_OWORD *)v5 + 20);
  long long v24 = *((_OWORD *)v5 + 21);
  v5[40] = 0;
  v5[41] = 0;
  long long v87 = v23;
  long long v88 = v24;
  v5[42] = 0;
  v5[43] = 0;
  uint64_t v25 = v5[45];
  uint64_t v89 = v5[44];
  uint64_t v90 = v25;
  long long v91 = *((_OWORD *)v5 + 23);
  v5[44] = 0;
  v5[45] = 0;
  v5[46] = 0;
  v5[47] = 0;
  uint64_t v26 = v5[48];
  v5[48] = 0;
  uint64_t v92 = v26;
  LODWORD(v26) = *((_DWORD *)v5 + 98);
  char v94 = *((unsigned char *)v5 + 396);
  int v93 = v26;
  uint64_t v27 = v5[52];
  long long v95 = *((_OWORD *)v5 + 25);
  v5[50] = 0;
  v5[51] = 0;
  v5[52] = 0;
  uint64_t v28 = v5[55];
  long long v97 = *(_OWORD *)(v5 + 53);
  uint64_t v96 = v27;
  uint64_t v98 = v28;
  v5[53] = 0;
  v5[54] = 0;
  v5[55] = 0;
  long long v99 = *((_OWORD *)v5 + 28);
  v5[56] = 0;
  v5[57] = 0;
  uint64_t v29 = v5[59];
  uint64_t v100 = v5[58];
  uint64_t v101 = v29;
  v5[58] = 0;
  v5[59] = 0;
  long long v30 = *((_OWORD *)v5 + 30);
  long long v31 = *((_OWORD *)v5 + 31);
  v5[60] = 0;
  v5[61] = 0;
  long long v102 = v30;
  long long v103 = v31;
  uint64_t v32 = v5[65];
  uint64_t v104 = v5[64];
  v5[62] = 0;
  v5[63] = 0;
  uint64_t v105 = v32;
  long long v106 = *((_OWORD *)v5 + 33);
  v5[64] = 0;
  v5[65] = 0;
  v5[66] = 0;
  v5[67] = 0;
  uint64_t v33 = v5[68];
  v5[68] = 0;
  uint64_t v107 = v33;
  LODWORD(v33) = *((_DWORD *)v5 + 138);
  char v109 = *((unsigned char *)v5 + 556);
  int v108 = v33;
  long long v34 = *((_OWORD *)v5 + 35);
  uint64_t v111 = v5[72];
  long long v110 = v34;
  v5[70] = 0;
  v5[71] = 0;
  v5[72] = 0;
  uint64_t v35 = v5[75];
  long long v112 = *(_OWORD *)(v5 + 73);
  uint64_t v113 = v35;
  v5[73] = 0;
  v5[74] = 0;
  v5[75] = 0;
  uint64_t v36 = *v9;
  while (1)
  {
    uint64_t v41 = v9;
    *uint64_t v5 = v36;
    uint64_t v42 = (uint64_t)(v9 + 1);
    sub_4F377C((uint64_t)(v5 + 1), (uint64_t)(v9 + 1));
    v5[6] = v9[6];
    uint64_t v43 = (void **)(v5 + 7);
    if (*((char *)v5 + 79) < 0) {
      operator delete(*v43);
    }
    long long v44 = *(_OWORD *)(v41 + 7);
    v5[9] = v41[9];
    *(_OWORD *)uint64_t v43 = v44;
    *((unsigned char *)v41 + 79) = 0;
    *((unsigned char *)v41 + 56) = 0;
    *((unsigned char *)v5 + 80) = *((unsigned char *)v41 + 80);
    unsigned int v45 = (void **)(v5 + 11);
    if (*((char *)v5 + 111) < 0) {
      operator delete(*v45);
    }
    long long v46 = *(_OWORD *)(v41 + 11);
    v5[13] = v41[13];
    *(_OWORD *)unsigned int v45 = v46;
    *((unsigned char *)v41 + 111) = 0;
    *((unsigned char *)v41 + 88) = 0;
    *((unsigned char *)v5 + 112) = *((unsigned char *)v41 + 112);
    *((_DWORD *)v5 + 30) = *((_DWORD *)v41 + 30);
    sub_4D90B4((uint64_t)(v5 + 16), (uint64_t)(v41 + 16));
    sub_4D90B4((uint64_t)(v5 + 36), (uint64_t)(v41 + 36));
    sub_4D90B4((uint64_t)(v5 + 56), (uint64_t)(v41 + 56));
    if (v54 < v8) {
      break;
    }
    uint64_t v47 = (2 * v8) | 1;
    int v9 = (uint64_t *)(a1 + 608 * v47);
    if (2 * v8 + 2 < a3)
    {
      uint64_t v36 = *v9;
      uint64_t v37 = v9[76];
      BOOL v38 = *(_DWORD *)(a1 + 608 * v47 + 120) > *((_DWORD *)v9 + 182);
      if (*v9 != v37) {
        BOOL v38 = *v9 < v37;
      }
      if (v38)
      {
        uint64_t v36 = v9[76];
        v9 += 76;
        uint64_t v8 = 2 * v8 + 2;
      }
      else
      {
        uint64_t v8 = (2 * v8) | 1;
      }
    }
    else
    {
      uint64_t v36 = *v9;
      uint64_t v8 = (2 * v8) | 1;
    }
    uint64_t v39 = v55;
    BOOL v40 = *((_DWORD *)v9 + 30) > v68;
    if (v36 != v55) {
      BOOL v40 = v36 < v55;
    }
    uint64_t v5 = v41;
    if (v40) {
      goto LABEL_30;
    }
  }
  uint64_t v39 = v55;
LABEL_30:
  uint64_t v48 = (void **)(v41 + 7);
  *uint64_t v41 = v39;
  sub_4F377C(v42, (uint64_t)&v56);
  v41[6] = v61;
  if (*((char *)v41 + 79) < 0) {
    operator delete(*v48);
  }
  BOOL v49 = (void **)(v41 + 11);
  long long v50 = *(_OWORD *)v62;
  v41[9] = v63;
  *(_OWORD *)uint64_t v48 = v50;
  HIBYTE(v63) = 0;
  LOBYTE(v62[0]) = 0;
  *((unsigned char *)v41 + 80) = v64;
  if (*((char *)v41 + 111) < 0) {
    operator delete(*v49);
  }
  long long v51 = *(_OWORD *)__p;
  v41[13] = v66;
  *(_OWORD *)BOOL v49 = v51;
  HIBYTE(v66) = 0;
  LOBYTE(__p[0]) = 0;
  *((unsigned char *)v41 + 112) = v67;
  *((_DWORD *)v41 + 30) = v68;
  sub_4D90B4((uint64_t)(v41 + 16), (uint64_t)&v69);
  sub_4D90B4((uint64_t)(v41 + 36), (uint64_t)&v84);
  sub_4D90B4((uint64_t)(v41 + 56), (uint64_t)&v99);
  sub_4D4B58((uint64_t)&v99);
  sub_4D4B58((uint64_t)&v84);
  sub_4D4B58((uint64_t)&v69);
  if ((SHIBYTE(v66) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v63) & 0x80000000) == 0) {
      goto LABEL_36;
    }
LABEL_41:
    operator delete(v62[0]);
    unsigned int v52 = v60;
    if (v60 != 1) {
      goto LABEL_37;
    }
LABEL_42:
    uint64_t v53 = v57;
    if (!v57) {
      return;
    }
    uint64_t v58 = v57;
    goto LABEL_44;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v63) < 0) {
    goto LABEL_41;
  }
LABEL_36:
  unsigned int v52 = v60;
  if (v60 == 1) {
    goto LABEL_42;
  }
LABEL_37:
  if (!v52 && v59 < 0)
  {
    uint64_t v53 = v57;
LABEL_44:
    operator delete(v53);
  }
}

void sub_5E4F70(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_58CC(a1);
}

void sub_5E4F7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 < 2) {
    return;
  }
  uint64_t v54 = *(void *)a1;
  uint64_t v8 = (uint64_t *)(a1 + 8);
  int v9 = (void *)*(unsigned int *)(a1 + 40);
  int v59 = (int)v9;
  sub_4F38B0(v9, v8, &v55);
  uint64_t v60 = *(void *)(a1 + 48);
  *(_OWORD *)uint64_t v61 = *(_OWORD *)(a1 + 56);
  uint64_t v62 = *(void *)(a1 + 72);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  char v63 = *(unsigned char *)(a1 + 80);
  *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 88);
  uint64_t v65 = *(void *)(a1 + 104);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  char v66 = *(unsigned char *)(a1 + 112);
  int v67 = *(_DWORD *)(a1 + 120);
  long long v68 = *(_OWORD *)(a1 + 128);
  uint64_t v10 = *(void *)(a1 + 144);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  long long v70 = *(_OWORD *)(a1 + 152);
  uint64_t v11 = *(void *)(a1 + 168);
  uint64_t v69 = v10;
  uint64_t v71 = v11;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  long long v72 = *(_OWORD *)(a1 + 176);
  uint64_t v12 = *(void *)(a1 + 192);
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  long long v74 = *(_OWORD *)(a1 + 200);
  uint64_t v13 = *(void *)(a1 + 216);
  uint64_t v14 = *(void *)(a1 + 224);
  uint64_t v73 = v12;
  uint64_t v75 = v13;
  uint64_t v76 = v14;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  LODWORD(v12) = *(_DWORD *)(a1 + 232);
  char v78 = *(unsigned char *)(a1 + 236);
  int v77 = v12;
  uint64_t v15 = *(void *)(a1 + 256);
  long long v79 = *(_OWORD *)(a1 + 240);
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  uint64_t v16 = *(void *)(a1 + 280);
  long long v81 = *(_OWORD *)(a1 + 264);
  uint64_t v80 = v15;
  uint64_t v82 = v16;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  long long v83 = *(_OWORD *)(a1 + 288);
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  uint64_t v17 = *(void *)(a1 + 312);
  uint64_t v84 = *(void *)(a1 + 304);
  uint64_t v85 = v17;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  long long v18 = *(_OWORD *)(a1 + 320);
  long long v19 = *(_OWORD *)(a1 + 336);
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  long long v86 = v18;
  long long v87 = v19;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  uint64_t v20 = *(void *)(a1 + 360);
  uint64_t v88 = *(void *)(a1 + 352);
  uint64_t v89 = v20;
  long long v90 = *(_OWORD *)(a1 + 368);
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  uint64_t v21 = *(void *)(a1 + 384);
  *(void *)(a1 + 384) = 0;
  uint64_t v91 = v21;
  LODWORD(v21) = *(_DWORD *)(a1 + 392);
  char v93 = *(unsigned char *)(a1 + 396);
  int v92 = v21;
  uint64_t v22 = *(void *)(a1 + 416);
  long long v94 = *(_OWORD *)(a1 + 400);
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  uint64_t v23 = *(void *)(a1 + 440);
  long long v96 = *(_OWORD *)(a1 + 424);
  uint64_t v95 = v22;
  uint64_t v97 = v23;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  long long v98 = *(_OWORD *)(a1 + 448);
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  uint64_t v24 = *(void *)(a1 + 472);
  uint64_t v99 = *(void *)(a1 + 464);
  uint64_t v100 = v24;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  long long v25 = *(_OWORD *)(a1 + 480);
  long long v26 = *(_OWORD *)(a1 + 496);
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 0;
  long long v101 = v25;
  long long v102 = v26;
  uint64_t v103 = *(void *)(a1 + 512);
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  uint64_t v104 = *(void *)(a1 + 520);
  long long v105 = *(_OWORD *)(a1 + 528);
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 528) = 0;
  uint64_t v27 = *(void *)(a1 + 544);
  *(void *)(a1 + 544) = 0;
  uint64_t v106 = v27;
  LODWORD(v27) = *(_DWORD *)(a1 + 552);
  char v108 = *(unsigned char *)(a1 + 556);
  int v107 = v27;
  long long v28 = *(_OWORD *)(a1 + 560);
  uint64_t v110 = *(void *)(a1 + 576);
  long long v109 = v28;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 560) = 0;
  *(void *)(a1 + 576) = 0;
  uint64_t v29 = *(void *)(a1 + 600);
  long long v111 = *(_OWORD *)(a1 + 584);
  uint64_t v112 = v29;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 600) = 0;
  long long v30 = sub_5E0BAC((uint64_t *)a1, a3, a4);
  uint64_t v31 = a2 - 608;
  uint64_t v32 = (uint64_t)(v30 + 1);
  if (v30 == (uint64_t *)(a2 - 608))
  {
    *long long v30 = v54;
    sub_4F377C(v32, (uint64_t)&v55);
    v30[6] = v60;
    long long v44 = (void **)(v30 + 7);
    if (*((char *)v30 + 79) < 0) {
      operator delete(*v44);
    }
    long long v45 = *(_OWORD *)v61;
    v30[9] = v62;
    *(_OWORD *)long long v44 = v45;
    HIBYTE(v62) = 0;
    LOBYTE(v61[0]) = 0;
    *((unsigned char *)v30 + 80) = v63;
    long long v46 = (void **)(v30 + 11);
    if (*((char *)v30 + 111) < 0) {
      operator delete(*v46);
    }
    long long v47 = *(_OWORD *)__p;
    v30[13] = v65;
    *(_OWORD *)long long v46 = v47;
    HIBYTE(v65) = 0;
    LOBYTE(__p[0]) = 0;
    *((unsigned char *)v30 + 112) = v66;
    *((_DWORD *)v30 + 30) = v67;
    sub_4D90B4((uint64_t)(v30 + 16), (uint64_t)&v68);
    sub_4D90B4((uint64_t)(v30 + 36), (uint64_t)&v83);
    sub_4D90B4((uint64_t)(v30 + 56), (uint64_t)&v98);
  }
  else
  {
    *long long v30 = *(void *)v31;
    uint64_t v53 = a2 - 600;
    sub_4F377C(v32, a2 - 600);
    unsigned int v52 = (uint64_t *)(a2 - 560);
    v30[6] = *(void *)(a2 - 560);
    uint64_t v33 = (void **)(v30 + 7);
    if (*((char *)v30 + 79) < 0) {
      operator delete(*v33);
    }
    long long v34 = (char *)(a2 - 529);
    long long v35 = *(_OWORD *)(a2 - 552);
    v30[9] = *(void *)(a2 - 536);
    *(_OWORD *)uint64_t v33 = v35;
    *(unsigned char *)(a2 - 529) = 0;
    *(unsigned char *)(a2 - 552) = 0;
    *((unsigned char *)v30 + 80) = *(unsigned char *)(a2 - 528);
    uint64_t v36 = (void **)(v30 + 11);
    if (*((char *)v30 + 111) < 0) {
      operator delete(*v36);
    }
    uint64_t v37 = (void **)(a2 - 552);
    BOOL v38 = (char *)(a2 - 497);
    long long v39 = *(_OWORD *)(a2 - 520);
    v30[13] = *(void *)(a2 - 504);
    *(_OWORD *)uint64_t v36 = v39;
    *(unsigned char *)(a2 - 497) = 0;
    *(unsigned char *)(a2 - 520) = 0;
    int v40 = *(_DWORD *)(a2 - 488);
    *((unsigned char *)v30 + 112) = *(unsigned char *)(a2 - 496);
    *((_DWORD *)v30 + 30) = v40;
    uint64_t v51 = a2 - 480;
    sub_4D90B4((uint64_t)(v30 + 16), a2 - 480);
    uint64_t v50 = a2 - 320;
    sub_4D90B4((uint64_t)(v30 + 36), a2 - 320);
    uint64_t v41 = a2 - 160;
    sub_4D90B4((uint64_t)(v30 + 56), v41);
    uint64_t v42 = (uint64_t)(v30 + 76);
    *(void *)uint64_t v31 = v54;
    sub_4F377C(v53, (uint64_t)&v55);
    *unsigned int v52 = v60;
    if (*v34 < 0) {
      operator delete(*v37);
    }
    uint64_t v43 = (void **)(v31 + 88);
    *(_OWORD *)uint64_t v37 = *(_OWORD *)v61;
    *(void *)(v31 + 72) = v62;
    HIBYTE(v62) = 0;
    LOBYTE(v61[0]) = 0;
    *(unsigned char *)(v31 + 80) = v63;
    if (*v38 < 0) {
      operator delete(*v43);
    }
    *(_OWORD *)uint64_t v43 = *(_OWORD *)__p;
    *(void *)(v31 + 104) = v65;
    HIBYTE(v65) = 0;
    LOBYTE(__p[0]) = 0;
    *(unsigned char *)(v31 + 112) = v66;
    *(_DWORD *)(v31 + 120) = v67;
    sub_4D90B4(v51, (uint64_t)&v68);
    sub_4D90B4(v50, (uint64_t)&v83);
    sub_4D90B4(v41, (uint64_t)&v98);
    sub_5E55C4(a1, v42, a3, 0x86BCA1AF286BCA1BLL * ((v42 - a1) >> 5));
  }
  sub_4D4B58((uint64_t)&v98);
  sub_4D4B58((uint64_t)&v83);
  sub_4D4B58((uint64_t)&v68);
  if ((SHIBYTE(v65) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v62) & 0x80000000) == 0) {
      goto LABEL_19;
    }
LABEL_24:
    operator delete(v61[0]);
    int v48 = v59;
    if (v59 != 1) {
      goto LABEL_20;
    }
LABEL_25:
    BOOL v49 = v56;
    if (!v56) {
      return;
    }
    unsigned int v57 = v56;
    goto LABEL_27;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v62) < 0) {
    goto LABEL_24;
  }
LABEL_19:
  int v48 = v59;
  if (v59 == 1) {
    goto LABEL_25;
  }
LABEL_20:
  if (!v48 && v58 < 0)
  {
    BOOL v49 = v56;
LABEL_27:
    operator delete(v49);
  }
}

void sub_5E55A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_5E55C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 < 2) {
    return;
  }
  unint64_t v7 = v4 >> 1;
  uint64_t v8 = (uint64_t *)(a1 + 608 * (v4 >> 1));
  int v9 = (uint64_t *)(a2 - 608);
  uint64_t v10 = *(void *)(a2 - 608);
  uint64_t v11 = (unsigned int *)(a2 - 488);
  BOOL v12 = *v8 < v10;
  if (*v8 == v10) {
    BOOL v12 = *((_DWORD *)v8 + 30) > *(_DWORD *)(a2 - 488);
  }
  if (!v12) {
    return;
  }
  uint64_t v44 = *(void *)(a2 - 608);
  unsigned int v49 = *(_DWORD *)(a2 - 568);
  sub_4F38B0((void *)v49, (uint64_t *)(a2 - 600), &v45);
  uint64_t v50 = v9[6];
  *(_OWORD *)uint64_t v51 = *(_OWORD *)(v9 + 7);
  uint64_t v52 = v9[9];
  v9[7] = 0;
  v9[8] = 0;
  v9[9] = 0;
  char v53 = *((unsigned char *)v9 + 80);
  *(_OWORD *)std::string __p = *(_OWORD *)(v9 + 11);
  uint64_t v55 = v9[13];
  v9[12] = 0;
  v9[13] = 0;
  v9[11] = 0;
  char v56 = *((unsigned char *)v9 + 112);
  unsigned int v57 = *v11;
  long long v58 = *((_OWORD *)v9 + 8);
  uint64_t v13 = v9[18];
  v9[16] = 0;
  v9[17] = 0;
  long long v60 = *(_OWORD *)(v9 + 19);
  uint64_t v14 = v9[21];
  uint64_t v59 = v13;
  uint64_t v61 = v14;
  v9[18] = 0;
  v9[19] = 0;
  v9[20] = 0;
  v9[21] = 0;
  long long v62 = *((_OWORD *)v9 + 11);
  uint64_t v15 = v9[24];
  v9[22] = 0;
  v9[23] = 0;
  long long v64 = *(_OWORD *)(v9 + 25);
  uint64_t v16 = v9[27];
  uint64_t v17 = v9[28];
  uint64_t v63 = v15;
  uint64_t v65 = v16;
  uint64_t v66 = v17;
  v9[24] = 0;
  v9[25] = 0;
  v9[26] = 0;
  v9[27] = 0;
  v9[28] = 0;
  LODWORD(v16) = *((_DWORD *)v9 + 58);
  char v68 = *((unsigned char *)v9 + 236);
  int v67 = v16;
  uint64_t v18 = v9[32];
  long long v69 = *((_OWORD *)v9 + 15);
  v9[30] = 0;
  v9[31] = 0;
  uint64_t v19 = v9[35];
  long long v71 = *(_OWORD *)(v9 + 33);
  uint64_t v70 = v18;
  uint64_t v72 = v19;
  v9[32] = 0;
  v9[33] = 0;
  v9[34] = 0;
  v9[35] = 0;
  uint64_t v20 = v9[41];
  uint64_t v74 = v9[38];
  uint64_t v76 = v20;
  uint64_t v21 = *(void *)(a2 - 232);
  uint64_t v22 = *(void *)(a2 - 224);
  uint64_t v78 = *(void *)(a2 - 256);
  uint64_t v80 = v21;
  uint64_t v81 = v22;
  long long v73 = *((_OWORD *)v9 + 18);
  v9[36] = 0;
  v9[37] = 0;
  long long v75 = *(_OWORD *)(v9 + 39);
  v9[38] = 0;
  v9[39] = 0;
  v9[40] = 0;
  v9[41] = 0;
  long long v77 = *((_OWORD *)v9 + 21);
  v9[42] = 0;
  v9[43] = 0;
  *(void *)(a2 - 256) = 0;
  long long v79 = *(_OWORD *)(v9 + 45);
  v9[45] = 0;
  *(void *)(a2 - 240) = 0;
  *(void *)(a2 - 232) = 0;
  *(void *)(a2 - 224) = 0;
  int v23 = *(_DWORD *)(a2 - 216);
  char v83 = *(unsigned char *)(a2 - 212);
  int v82 = v23;
  uint64_t v24 = *(void *)(a2 - 192);
  long long v84 = *(_OWORD *)(a2 - 208);
  *(void *)(a2 - 208) = 0;
  *(void *)(a2 - 200) = 0;
  *(void *)(a2 - 192) = 0;
  uint64_t v25 = *(void *)(a2 - 168);
  long long v86 = *(_OWORD *)(v9 + 53);
  uint64_t v85 = v24;
  uint64_t v87 = v25;
  v9[53] = 0;
  *(void *)(a2 - 176) = 0;
  *(void *)(a2 - 168) = 0;
  long long v88 = *(_OWORD *)(a2 - 160);
  uint64_t v26 = *(void *)(a2 - 144);
  *(void *)(a2 - 160) = 0;
  *(void *)(a2 - 152) = 0;
  long long v90 = *(_OWORD *)(a2 - 136);
  uint64_t v27 = *(void *)(a2 - 120);
  uint64_t v89 = v26;
  uint64_t v91 = v27;
  *(void *)(a2 - 144) = 0;
  *(void *)(a2 - 136) = 0;
  *(void *)(a2 - 128) = 0;
  *(void *)(a2 - 120) = 0;
  long long v92 = *(_OWORD *)(a2 - 112);
  uint64_t v93 = *(void *)(a2 - 96);
  *(void *)(a2 - 112) = 0;
  *(void *)(a2 - 104) = 0;
  long long v94 = *(_OWORD *)(a2 - 88);
  uint64_t v28 = *(void *)(a2 - 64);
  uint64_t v95 = *(void *)(a2 - 72);
  *(void *)(a2 - 96) = 0;
  *(void *)(a2 - 88) = 0;
  *(void *)(a2 - 80) = 0;
  *(void *)(a2 - 72) = 0;
  *(void *)(a2 - 64) = 0;
  uint64_t v96 = v28;
  int v29 = *(_DWORD *)(a2 - 56);
  char v98 = *(unsigned char *)(a2 - 52);
  int v97 = v29;
  long long v30 = *(_OWORD *)(a2 - 48);
  uint64_t v100 = *(void *)(a2 - 32);
  long long v99 = v30;
  *(void *)(a2 - 48) = 0;
  *(void *)(a2 - 40) = 0;
  uint64_t v31 = *(void *)(a2 - 8);
  long long v101 = *(_OWORD *)(a2 - 24);
  uint64_t v102 = v31;
  *(void *)(a2 - 32) = 0;
  *(void *)(a2 - 24) = 0;
  *(void *)(a2 - 16) = 0;
  *(void *)(a2 - 8) = 0;
  uint64_t v32 = *v8;
  do
  {
    uint64_t v33 = v8;
    *int v9 = v32;
    uint64_t v34 = (uint64_t)(v8 + 1);
    sub_4F377C((uint64_t)(v9 + 1), (uint64_t)(v8 + 1));
    v9[6] = v8[6];
    long long v35 = (void **)(v9 + 7);
    if (*((char *)v9 + 79) < 0) {
      operator delete(*v35);
    }
    long long v36 = *(_OWORD *)(v33 + 7);
    v9[9] = v33[9];
    *(_OWORD *)long long v35 = v36;
    *((unsigned char *)v33 + 79) = 0;
    *((unsigned char *)v33 + 56) = 0;
    *((unsigned char *)v9 + 80) = *((unsigned char *)v33 + 80);
    uint64_t v37 = (void **)(v9 + 11);
    if (*((char *)v9 + 111) < 0) {
      operator delete(*v37);
    }
    long long v38 = *(_OWORD *)(v33 + 11);
    v9[13] = v33[13];
    *(_OWORD *)uint64_t v37 = v38;
    *((unsigned char *)v33 + 111) = 0;
    *((unsigned char *)v33 + 88) = 0;
    *((unsigned char *)v9 + 112) = *((unsigned char *)v33 + 112);
    *((_DWORD *)v9 + 30) = *((_DWORD *)v33 + 30);
    sub_4D90B4((uint64_t)(v9 + 16), (uint64_t)(v33 + 16));
    sub_4D90B4((uint64_t)(v9 + 36), (uint64_t)(v33 + 36));
    sub_4D90B4((uint64_t)(v9 + 56), (uint64_t)(v33 + 56));
    if (!v7) {
      break;
    }
    unint64_t v7 = (v7 - 1) >> 1;
    uint64_t v8 = (uint64_t *)(a1 + 608 * v7);
    uint64_t v32 = *v8;
    BOOL v39 = *((_DWORD *)v8 + 30) > v57;
    if (*v8 != v44) {
      BOOL v39 = *v8 < v44;
    }
    int v9 = v33;
  }
  while (v39);
  int v40 = (void **)(v33 + 7);
  *uint64_t v33 = v44;
  sub_4F377C(v34, (uint64_t)&v45);
  v33[6] = v50;
  if (*((char *)v33 + 79) < 0) {
    operator delete(*v40);
  }
  uint64_t v41 = (void **)(v33 + 11);
  *(_OWORD *)int v40 = *(_OWORD *)v51;
  v33[9] = v52;
  HIBYTE(v52) = 0;
  LOBYTE(v51[0]) = 0;
  *((unsigned char *)v33 + 80) = v53;
  if (*((char *)v33 + 111) < 0) {
    operator delete(*v41);
  }
  *(_OWORD *)uint64_t v41 = *(_OWORD *)__p;
  v33[13] = v55;
  HIBYTE(v55) = 0;
  LOBYTE(__p[0]) = 0;
  *((unsigned char *)v33 + 112) = v56;
  *((_DWORD *)v33 + 30) = v57;
  sub_4D90B4((uint64_t)(v33 + 16), (uint64_t)&v58);
  sub_4D90B4((uint64_t)(v33 + 36), (uint64_t)&v73);
  sub_4D90B4((uint64_t)(v33 + 56), (uint64_t)&v88);
  sub_4D4B58((uint64_t)&v88);
  sub_4D4B58((uint64_t)&v73);
  sub_4D4B58((uint64_t)&v58);
  if ((SHIBYTE(v55) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v52) & 0x80000000) == 0) {
      goto LABEL_20;
    }
LABEL_25:
    operator delete(v51[0]);
    unsigned int v42 = v49;
    if (v49 != 1) {
      goto LABEL_21;
    }
LABEL_26:
    uint64_t v43 = v46;
    if (!v46) {
      return;
    }
    long long v47 = v46;
    goto LABEL_28;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v52) < 0) {
    goto LABEL_25;
  }
LABEL_20:
  unsigned int v42 = v49;
  if (v49 == 1) {
    goto LABEL_26;
  }
LABEL_21:
  if (!v42 && v48 < 0)
  {
    uint64_t v43 = v46;
LABEL_28:
    operator delete(v43);
  }
}

void sub_5E5B40(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_58CC(a1);
}

void sub_5E5B4C(double **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((unsigned char *)*a1 + 7))
  {
    double v4 = *a1[1];
    sub_5F3B74((uint64_t)__p, (__int16 *)(*((void *)v2 + 11) + 1177));
    uint64_t v5 = (std::string **)(a2 + 320);
    sub_4D90B4((uint64_t)v5, (uint64_t)__p);
    sub_4D4B58((uint64_t)__p);
    uint64_t v6 = *((void *)v2 + 13);
    *(void *)std::string __p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_20B8890;
    strcpy(*(char **)__p, "Annotation_Metadata_SteepHill");
    unint64_t v7 = sub_8D7730(v6, (uint64_t)__p);
    double v8 = fabs(round(v4 * 100.0));
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    sub_5F41E8((uint64_t)v5, (uint64_t)v7);
    if (*(unsigned __int8 *)(*((void *)v2 + 11) + 1177) >= 0xDu)
    {
      sub_5F71A4((uint64_t)v5, (uint64_t)&xmmword_25843D0, (float)v8);
      return;
    }
    int v9 = *v5;
    std::to_string(&v25, v8);
    uint64_t v10 = std::string::append(&v25, " pct");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    *(void *)&__p[16] = *((void *)&v10->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type size = (char *)HIBYTE(v9->__r_.__value_.__r.__words[2]);
    if ((char)size >= 0) {
      std::string::size_type v13 = (std::string::size_type)v9;
    }
    else {
      std::string::size_type v13 = v9->__r_.__value_.__r.__words[0];
    }
    if (byte_25843E7 >= 0) {
      uint64_t v14 = &xmmword_25843D0;
    }
    else {
      uint64_t v14 = (long long *)xmmword_25843D0;
    }
    if (byte_25843E7 >= 0) {
      int64_t v15 = byte_25843E7;
    }
    else {
      int64_t v15 = *((void *)&xmmword_25843D0 + 1);
    }
    if (v15)
    {
      if ((char)size < 0) {
        std::string::size_type size = (char *)v9->__r_.__value_.__l.__size_;
      }
      if ((uint64_t)size >= v15)
      {
        uint64_t v16 = &size[v13];
        int v17 = *(char *)v14;
        uint64_t v18 = (void *)v13;
        do
        {
          uint64_t v19 = &size[-v15];
          if (v19 == (char *)-1) {
            break;
          }
          uint64_t v20 = (char *)memchr(v18, v17, (size_t)(v19 + 1));
          if (!v20) {
            break;
          }
          uint64_t v21 = v20;
          if (!memcmp(v20, v14, v15))
          {
            if (v21 != v16)
            {
              std::string::size_type v22 = (std::string::size_type)&v21[-v13];
              if (&v21[-v13] != (char *)-1) {
                goto LABEL_26;
              }
            }
            break;
          }
          uint64_t v18 = v21 + 1;
          std::string::size_type size = (char *)(v16 - (v21 + 1));
        }
        while ((uint64_t)size >= v15);
      }
    }
    else
    {
      std::string::size_type v22 = 0;
LABEL_26:
      if (__p[23] >= 0) {
        int v23 = __p;
      }
      else {
        int v23 = *(const std::string::value_type **)__p;
      }
      if (__p[23] >= 0) {
        std::string::size_type v24 = __p[23];
      }
      else {
        std::string::size_type v24 = *(void *)&__p[8];
      }
      std::string::replace(v9, v22, v15, v23, v24);
    }
    if ((__p[23] & 0x80000000) == 0)
    {
      if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_37:
      operator delete(v25.__r_.__value_.__l.__data_);
      return;
    }
    operator delete(*(void **)__p);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_37;
    }
  }
}

void sub_5E5DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_5E5E04(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
void sub_5E6290(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return;
  }
  uint64_t v4 = a1 + 608;
  if (a1 + 608 == a2) {
    return;
  }
  uint64_t v5 = 0;
  uint64_t v6 = a1;
  while (2)
  {
    uint64_t v8 = v4;
    uint64_t v9 = *(void *)(v6 + 608);
    BOOL v10 = v9 < *(void *)v6;
    if (v9 == *(void *)v6) {
      BOOL v10 = *(_DWORD *)(v6 + 728) > *(_DWORD *)(v6 + 120);
    }
    if (!v10) {
      goto LABEL_7;
    }
    uint64_t v52 = *(void *)(v6 + 608);
    unsigned int v57 = *(_DWORD *)(v6 + 648);
    sub_4F38B0((void *)v57, (uint64_t *)(v6 + 616), &v53);
    uint64_t v58 = *(void *)(v6 + 656);
    uint64_t v60 = *(void *)(v6 + 680);
    long long v59 = *(_OWORD *)(v6 + 664);
    *(void *)(v6 + 680) = 0;
    *(void *)(v6 + 672) = 0;
    *(void *)(v6 + 664) = 0;
    char v61 = *(unsigned char *)(v6 + 688);
    uint64_t v63 = *(void *)(v6 + 712);
    long long v62 = *(_OWORD *)(v6 + 696);
    *(void *)(v6 + 712) = 0;
    *(void *)(v6 + 704) = 0;
    *(void *)(v6 + 696) = 0;
    char v64 = *(unsigned char *)(v6 + 720);
    unsigned int v65 = *(_DWORD *)(v6 + 728);
    long long v66 = *(_OWORD *)(v6 + 736);
    uint64_t v67 = *(void *)(v6 + 752);
    *(void *)(v6 + 744) = 0;
    *(void *)(v6 + 736) = 0;
    *(void *)(v6 + 752) = 0;
    long long v68 = *(_OWORD *)(v6 + 760);
    uint64_t v69 = *(void *)(v6 + 776);
    *(void *)(v6 + 760) = 0;
    *(void *)(v6 + 768) = 0;
    *(void *)(v6 + 776) = 0;
    long long v70 = *(_OWORD *)(v6 + 784);
    uint64_t v71 = *(void *)(v6 + 800);
    *(void *)(v6 + 792) = 0;
    *(void *)(v6 + 784) = 0;
    *(void *)(v6 + 800) = 0;
    long long v72 = *(_OWORD *)(v6 + 808);
    uint64_t v73 = *(void *)(v6 + 824);
    *(void *)(v6 + 808) = 0;
    *(void *)(v6 + 816) = 0;
    *(void *)(v6 + 824) = 0;
    uint64_t v11 = *(void *)(v6 + 832);
    *(void *)(v6 + 832) = 0;
    uint64_t v74 = v11;
    int v75 = *(_DWORD *)(v6 + 840);
    char v76 = *(unsigned char *)(v6 + 844);
    long long v77 = *(_OWORD *)(v6 + 848);
    uint64_t v78 = *(void *)(v6 + 864);
    *(void *)(v6 + 856) = 0;
    *(void *)(v6 + 848) = 0;
    *(void *)(v6 + 864) = 0;
    long long v12 = *(_OWORD *)(v6 + 872);
    uint64_t v80 = *(void *)(v6 + 888);
    long long v79 = v12;
    *(void *)(v6 + 880) = 0;
    *(void *)(v6 + 872) = 0;
    *(void *)(v6 + 888) = 0;
    long long v81 = *(_OWORD *)(v6 + 896);
    uint64_t v13 = *(void *)(v6 + 912);
    *(void *)(v6 + 904) = 0;
    *(void *)(v6 + 896) = 0;
    *(void *)(v6 + 912) = 0;
    uint64_t v14 = *(void *)(v6 + 920);
    uint64_t v82 = v13;
    uint64_t v83 = v14;
    *(void *)(v6 + 920) = 0;
    long long v15 = *(_OWORD *)(v6 + 928);
    long long v16 = *(_OWORD *)(v6 + 944);
    *(void *)(v6 + 936) = 0;
    *(void *)(v6 + 928) = 0;
    long long v84 = v15;
    long long v85 = v16;
    uint64_t v17 = *(void *)(v6 + 960);
    *(void *)(v6 + 952) = 0;
    *(void *)(v6 + 944) = 0;
    *(void *)(v6 + 960) = 0;
    uint64_t v18 = *(void *)(v6 + 968);
    uint64_t v86 = v17;
    uint64_t v87 = v18;
    long long v88 = *(_OWORD *)(v6 + 976);
    *(void *)(v6 + 968) = 0;
    *(void *)(v6 + 984) = 0;
    *(void *)(v6 + 976) = 0;
    uint64_t v19 = *(void *)(v6 + 992);
    *(void *)(v6 + 992) = 0;
    uint64_t v89 = v19;
    LODWORD(v19) = *(_DWORD *)(v6 + 1000);
    char v91 = *(unsigned char *)(v6 + 1004);
    int v90 = v19;
    long long v20 = *(_OWORD *)(v6 + 1008);
    uint64_t v93 = *(void *)(v6 + 1024);
    long long v92 = v20;
    *(void *)(v6 + 1016) = 0;
    *(void *)(v6 + 1008) = 0;
    *(void *)(v6 + 1024) = 0;
    long long v21 = *(_OWORD *)(v6 + 1032);
    uint64_t v95 = *(void *)(v6 + 1048);
    long long v94 = v21;
    *(void *)(v6 + 1040) = 0;
    *(void *)(v6 + 1032) = 0;
    *(void *)(v6 + 1048) = 0;
    long long v96 = *(_OWORD *)(v6 + 1056);
    uint64_t v22 = *(void *)(v6 + 1072);
    *(void *)(v6 + 1064) = 0;
    *(void *)(v6 + 1056) = 0;
    *(void *)(v6 + 1072) = 0;
    uint64_t v23 = *(void *)(v6 + 1080);
    uint64_t v97 = v22;
    uint64_t v98 = v23;
    long long v24 = *(_OWORD *)(v6 + 1088);
    *(void *)(v6 + 1080) = 0;
    *(void *)(v6 + 1096) = 0;
    *(void *)(v6 + 1088) = 0;
    long long v25 = *(_OWORD *)(v6 + 1104);
    long long v99 = v24;
    long long v100 = v25;
    uint64_t v101 = *(void *)(v6 + 1120);
    *(void *)(v6 + 1112) = 0;
    *(void *)(v6 + 1104) = 0;
    *(void *)(v6 + 1120) = 0;
    uint64_t v102 = *(void *)(v6 + 1128);
    long long v103 = *(_OWORD *)(v6 + 1136);
    *(void *)(v6 + 1128) = 0;
    *(void *)(v6 + 1144) = 0;
    *(void *)(v6 + 1136) = 0;
    uint64_t v26 = *(void *)(v6 + 1152);
    *(void *)(v6 + 1152) = 0;
    uint64_t v104 = v26;
    LODWORD(v26) = *(_DWORD *)(v6 + 1160);
    char v106 = *(unsigned char *)(v6 + 1164);
    int v105 = v26;
    long long v27 = *(_OWORD *)(v6 + 1168);
    uint64_t v108 = *(void *)(v6 + 1184);
    long long v107 = v27;
    *(void *)(v6 + 1176) = 0;
    *(void *)(v6 + 1168) = 0;
    *(void *)(v6 + 1184) = 0;
    long long v28 = *(_OWORD *)(v6 + 1192);
    uint64_t v110 = *(void *)(v6 + 1208);
    long long v109 = v28;
    *(void *)(v6 + 1200) = 0;
    *(void *)(v6 + 1192) = 0;
    *(void *)(v6 + 1208) = 0;
    uint64_t v29 = v5;
    uint64_t v30 = *(void *)v6;
    while (1)
    {
      uint64_t v31 = a1 + v29;
      *(void *)(a1 + v29 + 608) = v30;
      uint64_t v32 = (void *)(a1 + v29 + 616);
      uint64_t v33 = (void *)(a1 + v29 + 8);
      int v34 = *(_DWORD *)(a1 + v29 + 648);
      if (v34 != *(_DWORD *)(a1 + v29 + 40))
      {
        if (v34 == 1)
        {
          uint64_t v37 = *(void **)(a1 + v29 + 624);
          if (!v37)
          {
LABEL_28:
            sub_4F38B0((void *)*(unsigned int *)(v31 + 40), (uint64_t *)(a1 + v29 + 8), (void *)(a1 + v29 + 616));
            *(_DWORD *)(v31 + 648) = *(_DWORD *)(v31 + 40);
            goto LABEL_29;
          }
          *(void *)(a1 + v29 + 632) = v37;
        }
        else
        {
          if (v34 || (*(char *)(a1 + v29 + 647) & 0x80000000) == 0) {
            goto LABEL_28;
          }
          uint64_t v37 = *(void **)(a1 + v29 + 624);
        }
        operator delete(v37);
        goto LABEL_28;
      }
      if (v34 == 1)
      {
        *uint64_t v32 = *v33;
        uint64_t v38 = a1 + v29;
        BOOL v39 = *(void **)(a1 + v29 + 624);
        if (v39)
        {
          *(void *)(v38 + 632) = v39;
          operator delete(v39);
          *(_OWORD *)(v38 + 632) = 0u;
        }
        *(_OWORD *)(v38 + 624) = *(_OWORD *)(v38 + 16);
        *(void *)(v38 + 640) = *(void *)(v38 + 32);
        *(void *)(v38 + 24) = 0;
        *(void *)(v38 + 32) = 0;
        *(void *)(v38 + 16) = 0;
      }
      else if (!v34)
      {
        *uint64_t v32 = *v33;
        uint64_t v35 = a1 + v29;
        long long v36 = (void **)(a1 + v29 + 624);
        if (*(char *)(a1 + v29 + 647) < 0) {
          operator delete(*v36);
        }
        *(_OWORD *)long long v36 = *(_OWORD *)(v35 + 16);
        *(void *)(a1 + v29 + 640) = *(void *)(v35 + 32);
        *(unsigned char *)(v35 + 39) = 0;
        *(unsigned char *)(v35 + 16) = 0;
      }
LABEL_29:
      uint64_t v40 = a1 + v29;
      *(void *)(a1 + v29 + 656) = *(void *)(a1 + v29 + 48);
      uint64_t v41 = (void **)(a1 + v29 + 664);
      if (*(char *)(a1 + v29 + 687) < 0) {
        operator delete(*v41);
      }
      *(_OWORD *)uint64_t v41 = *(_OWORD *)(v40 + 56);
      *(void *)(a1 + v29 + 680) = *(void *)(v40 + 72);
      *(unsigned char *)(v40 + 79) = 0;
      *(unsigned char *)(v40 + 56) = 0;
      *(unsigned char *)(v40 + 688) = *(unsigned char *)(v40 + 80);
      uint64_t v42 = v40 + 696;
      if (*(char *)(v40 + 719) < 0) {
        operator delete(*(void **)v42);
      }
      uint64_t v43 = a1 + v29;
      *(_OWORD *)uint64_t v42 = *(_OWORD *)(a1 + v29 + 88);
      *(void *)(v42 + 16) = *(void *)(a1 + v29 + 104);
      *(unsigned char *)(v43 + 111) = 0;
      *(unsigned char *)(v43 + 88) = 0;
      *(unsigned char *)(v43 + 720) = *(unsigned char *)(a1 + v29 + 112);
      *(_DWORD *)(v43 + 728) = *(_DWORD *)(a1 + v29 + 120);
      uint64_t v44 = a1 + v29 + 128;
      sub_4D90B4(a1 + v29 + 736, v44);
      uint64_t v45 = a1 + v29 + 288;
      sub_4D90B4(v43 + 896, v43 + 288);
      uint64_t v46 = a1 + v29 + 448;
      sub_4D90B4(v43 + 1056, v43 + 448);
      if (!v29) {
        break;
      }
      uint64_t v30 = *(void *)(v43 - 608);
      BOOL v47 = v65 > *(_DWORD *)(v43 - 488);
      if (v52 != v30) {
        BOOL v47 = v52 < v30;
      }
      v29 -= 608;
      if (!v47)
      {
        uint64_t v48 = a1 + v29 + 608;
        goto LABEL_39;
      }
    }
    uint64_t v48 = a1;
LABEL_39:
    *(void *)uint64_t v48 = v52;
    sub_4F377C(v43 + 8, (uint64_t)&v53);
    *(void *)(v48 + 48) = v58;
    uint64_t v49 = v43 + 56;
    if (*(char *)(v48 + 79) < 0) {
      operator delete(*(void **)v49);
    }
    uint64_t v50 = v43 + 88;
    *(_OWORD *)uint64_t v49 = v59;
    *(void *)(v49 + 16) = v60;
    HIBYTE(v60) = 0;
    LOBYTE(v59) = 0;
    *(unsigned char *)(v48 + 80) = v61;
    if (*(char *)(v48 + 111) < 0) {
      operator delete(*(void **)v50);
    }
    *(_OWORD *)uint64_t v50 = v62;
    *(void *)(v50 + 16) = v63;
    HIBYTE(v63) = 0;
    LOBYTE(v62) = 0;
    *(unsigned char *)(v48 + 112) = v64;
    *(_DWORD *)(v48 + 120) = v65;
    sub_4D90B4(v44, (uint64_t)&v66);
    sub_4D90B4(v45, (uint64_t)&v81);
    sub_4D90B4(v46, (uint64_t)&v96);
    sub_4D4B58((uint64_t)&v96);
    sub_4D4B58((uint64_t)&v81);
    sub_4D4B58((uint64_t)&v66);
    if (SHIBYTE(v63) < 0)
    {
      operator delete((void *)v62);
      if (SHIBYTE(v60) < 0) {
        goto LABEL_48;
      }
LABEL_45:
      unsigned int v51 = v57;
      if (v57 == 1) {
        goto LABEL_4;
      }
LABEL_49:
      if (!v51 && v56 < 0)
      {
        unint64_t v7 = __p;
LABEL_6:
        operator delete(v7);
      }
    }
    else
    {
      if ((SHIBYTE(v60) & 0x80000000) == 0) {
        goto LABEL_45;
      }
LABEL_48:
      operator delete((void *)v59);
      unsigned int v51 = v57;
      if (v57 != 1) {
        goto LABEL_49;
      }
LABEL_4:
      unint64_t v7 = __p;
      if (__p)
      {
        uint64_t v55 = __p;
        goto LABEL_6;
      }
    }
LABEL_7:
    uint64_t v4 = v8 + 608;
    v5 += 608;
    uint64_t v6 = v8;
    if (v8 + 608 != a2) {
      continue;
    }
    break;
  }
}

void sub_5E69F0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_58CC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_5E6A00(uint64_t *a1, uint64_t *a2)
{
  if (a1 == a2) {
    return;
  }
  uint64_t v3 = a1;
  uint64_t v4 = a1 + 76;
  if (a1 + 76 == a2) {
    return;
  }
  uint64_t v5 = a1 - 76;
  while (2)
  {
    uint64_t v6 = v4;
    uint64_t v7 = v3[76];
    BOOL v8 = v7 < *v3;
    if (v7 == *v3) {
      BOOL v8 = *((_DWORD *)v3 + 182) > *((_DWORD *)v3 + 30);
    }
    if (!v8) {
      goto LABEL_5;
    }
    uint64_t v48 = v3[76];
    unsigned int v53 = *((_DWORD *)v3 + 162);
    sub_4F38B0((void *)v53, v3 + 77, &v49);
    uint64_t v54 = v3[82];
    uint64_t v56 = v3[85];
    long long v55 = *(_OWORD *)(v3 + 83);
    v3[85] = 0;
    v3[84] = 0;
    v3[83] = 0;
    char v57 = *((unsigned char *)v3 + 688);
    uint64_t v59 = v3[89];
    long long v58 = *(_OWORD *)(v3 + 87);
    v3[89] = 0;
    v3[88] = 0;
    v3[87] = 0;
    char v60 = *((unsigned char *)v3 + 720);
    unsigned int v61 = *((_DWORD *)v3 + 182);
    long long v62 = *((_OWORD *)v3 + 46);
    uint64_t v63 = v3[94];
    v3[93] = 0;
    v3[92] = 0;
    v3[94] = 0;
    long long v64 = *(_OWORD *)(v3 + 95);
    uint64_t v65 = v3[97];
    v3[95] = 0;
    v3[96] = 0;
    v3[97] = 0;
    long long v66 = *((_OWORD *)v3 + 49);
    uint64_t v67 = v3[100];
    v3[99] = 0;
    v3[98] = 0;
    v3[100] = 0;
    long long v68 = *(_OWORD *)(v3 + 101);
    uint64_t v69 = v3[103];
    v3[101] = 0;
    v3[102] = 0;
    v3[103] = 0;
    uint64_t v9 = v3[104];
    v3[104] = 0;
    uint64_t v70 = v9;
    int v71 = *((_DWORD *)v3 + 210);
    char v72 = *((unsigned char *)v3 + 844);
    long long v73 = *((_OWORD *)v3 + 53);
    uint64_t v74 = v3[108];
    v3[107] = 0;
    v3[106] = 0;
    v3[108] = 0;
    long long v10 = *(_OWORD *)(v3 + 109);
    uint64_t v76 = v3[111];
    long long v75 = v10;
    v3[110] = 0;
    v3[109] = 0;
    v3[111] = 0;
    long long v77 = *((_OWORD *)v3 + 56);
    uint64_t v11 = v3[114];
    v3[113] = 0;
    v3[112] = 0;
    v3[114] = 0;
    uint64_t v12 = v3[115];
    uint64_t v78 = v11;
    uint64_t v79 = v12;
    v3[115] = 0;
    long long v13 = *((_OWORD *)v3 + 58);
    long long v14 = *((_OWORD *)v3 + 59);
    v3[117] = 0;
    v3[116] = 0;
    long long v80 = v13;
    long long v81 = v14;
    uint64_t v15 = v3[120];
    v3[119] = 0;
    v3[118] = 0;
    v3[120] = 0;
    uint64_t v16 = v3[121];
    uint64_t v82 = v15;
    uint64_t v83 = v16;
    long long v84 = *((_OWORD *)v3 + 61);
    v3[121] = 0;
    v3[123] = 0;
    v3[122] = 0;
    uint64_t v17 = v3[124];
    v3[124] = 0;
    uint64_t v85 = v17;
    LODWORD(v17) = *((_DWORD *)v3 + 250);
    char v87 = *((unsigned char *)v3 + 1004);
    int v86 = v17;
    long long v18 = *((_OWORD *)v3 + 63);
    uint64_t v89 = v3[128];
    long long v88 = v18;
    v3[127] = 0;
    v3[126] = 0;
    v3[128] = 0;
    long long v19 = *(_OWORD *)(v3 + 129);
    uint64_t v91 = v3[131];
    long long v90 = v19;
    v3[130] = 0;
    v3[129] = 0;
    v3[131] = 0;
    long long v92 = *((_OWORD *)v3 + 66);
    uint64_t v20 = v3[134];
    v3[133] = 0;
    v3[132] = 0;
    v3[134] = 0;
    uint64_t v21 = v3[135];
    uint64_t v93 = v20;
    uint64_t v94 = v21;
    long long v22 = *((_OWORD *)v3 + 68);
    v3[135] = 0;
    v3[137] = 0;
    v3[136] = 0;
    long long v23 = *((_OWORD *)v3 + 69);
    long long v95 = v22;
    long long v96 = v23;
    uint64_t v97 = v3[140];
    v3[139] = 0;
    v3[138] = 0;
    v3[140] = 0;
    uint64_t v98 = v3[141];
    long long v99 = *((_OWORD *)v3 + 71);
    v3[141] = 0;
    v3[143] = 0;
    v3[142] = 0;
    uint64_t v24 = v3[144];
    v3[144] = 0;
    uint64_t v100 = v24;
    LODWORD(v24) = *((_DWORD *)v3 + 290);
    char v102 = *((unsigned char *)v3 + 1164);
    int v101 = v24;
    long long v25 = *((_OWORD *)v3 + 73);
    uint64_t v104 = v3[148];
    long long v103 = v25;
    v3[147] = 0;
    v3[146] = 0;
    v3[148] = 0;
    long long v26 = *(_OWORD *)(v3 + 149);
    uint64_t v106 = v3[151];
    long long v105 = v26;
    v3[150] = 0;
    v3[149] = 0;
    v3[151] = 0;
    long long v27 = v5;
    uint64_t v28 = *v3;
    do
    {
      v27[152] = v28;
      int v30 = *((_DWORD *)v27 + 314);
      int v31 = *((_DWORD *)v27 + 162);
      if (v30 == v31)
      {
        if (v30 == 1)
        {
          v27[153] = v27[77];
          int v34 = (void *)v27[154];
          long long v35 = 0uLL;
          if (v34)
          {
            v27[155] = (uint64_t)v34;
            operator delete(v34);
            long long v35 = 0uLL;
            *(_OWORD *)(v27 + 155) = 0u;
          }
          *((_OWORD *)v27 + 77) = *((_OWORD *)v27 + 39);
          v27[156] = v27[80];
          v27[80] = 0;
          *((_OWORD *)v27 + 39) = v35;
        }
        else if (!v30)
        {
          v27[153] = v27[77];
          uint64_t v32 = (void **)(v27 + 154);
          if (*((char *)v27 + 1255) < 0) {
            operator delete(*v32);
          }
          *(_OWORD *)uint64_t v32 = *((_OWORD *)v27 + 39);
          v27[156] = v27[80];
          *((unsigned char *)v27 + 647) = 0;
          *((unsigned char *)v27 + 624) = 0;
        }
        goto LABEL_39;
      }
      if (v30 == 1)
      {
        uint64_t v33 = (void *)v27[154];
        if (v33)
        {
          v27[155] = (uint64_t)v33;
          goto LABEL_28;
        }
LABEL_29:
        int v31 = *((_DWORD *)v27 + 162);
        goto LABEL_30;
      }
      if (!v30)
      {
        if (*((char *)v27 + 1255) < 0)
        {
          uint64_t v33 = (void *)v27[154];
LABEL_28:
          operator delete(v33);
          goto LABEL_29;
        }
        goto LABEL_29;
      }
LABEL_30:
      if (v31 == 1)
      {
        v27[153] = v27[77];
        v27[154] = 0;
        v27[156] = 0;
        v27[155] = 0;
        uint64_t v37 = (unsigned char *)v27[78];
        uint64_t v38 = (unsigned char *)v27[79];
        int64_t v39 = v38 - v37;
        if (v38 != v37)
        {
          if (v39 < 0) {
            sub_2E00();
          }
          uint64_t v40 = (char *)operator new(v38 - v37);
          v27[154] = (uint64_t)v40;
          v27[155] = (uint64_t)v40;
          uint64_t v41 = &v40[8 * (v39 >> 3)];
          v27[156] = (uint64_t)v41;
          memcpy(v40, v37, v39);
          v27[155] = (uint64_t)v41;
        }
      }
      else if (!v31)
      {
        v27[153] = v27[77];
        long long v36 = v27 + 154;
        if (*((char *)v27 + 647) < 0)
        {
          sub_4200(v36, (void *)v27[78], v27[79]);
        }
        else
        {
          *(_OWORD *)long long v36 = *((_OWORD *)v27 + 39);
          v27[156] = v27[80];
        }
      }
      *((_DWORD *)v27 + 314) = *((_DWORD *)v27 + 162);
LABEL_39:
      v27[158] = v27[82];
      uint64_t v42 = (void **)(v27 + 159);
      if (*((char *)v27 + 1295) < 0) {
        operator delete(*v42);
      }
      v27[161] = v27[85];
      *(_OWORD *)uint64_t v42 = *(_OWORD *)(v27 + 83);
      *((unsigned char *)v27 + 687) = 0;
      *((unsigned char *)v27 + 664) = 0;
      *((unsigned char *)v27 + 1296) = *((unsigned char *)v27 + 688);
      uint64_t v43 = (void **)(v27 + 163);
      if (*((char *)v27 + 1327) < 0) {
        operator delete(*v43);
      }
      v27[165] = v27[89];
      *(_OWORD *)uint64_t v43 = *(_OWORD *)(v27 + 87);
      *((unsigned char *)v27 + 719) = 0;
      *((unsigned char *)v27 + 696) = 0;
      *((unsigned char *)v27 + 1328) = *((unsigned char *)v27 + 720);
      *((_DWORD *)v27 + 334) = *((_DWORD *)v27 + 182);
      sub_4D90B4((uint64_t)(v27 + 168), (uint64_t)(v27 + 92));
      sub_4D90B4((uint64_t)(v27 + 188), (uint64_t)(v27 + 112));
      sub_4D90B4((uint64_t)(v27 + 208), (uint64_t)(v27 + 132));
      uint64_t v28 = *v27;
      BOOL v29 = v61 > *((_DWORD *)v27 + 30);
      if (v48 != *v27) {
        BOOL v29 = v48 < *v27;
      }
      v27 -= 76;
    }
    while (v29);
    v27[152] = v48;
    sub_4F377C((uint64_t)(v27 + 153), (uint64_t)&v49);
    v27[158] = v54;
    uint64_t v44 = (void **)(v27 + 159);
    if (*((char *)v27 + 1295) < 0) {
      operator delete(*v44);
    }
    uint64_t v45 = (void **)(v27 + 163);
    *(_OWORD *)uint64_t v44 = v55;
    v27[161] = v56;
    HIBYTE(v56) = 0;
    LOBYTE(v55) = 0;
    *((unsigned char *)v27 + 1296) = v57;
    if (*((char *)v27 + 1327) < 0) {
      operator delete(*v45);
    }
    *(_OWORD *)uint64_t v45 = v58;
    v27[165] = v59;
    HIBYTE(v59) = 0;
    LOBYTE(v58) = 0;
    *((unsigned char *)v27 + 1328) = v60;
    *((_DWORD *)v27 + 334) = v61;
    sub_4D90B4((uint64_t)(v27 + 168), (uint64_t)&v62);
    sub_4D90B4((uint64_t)(v27 + 188), (uint64_t)&v77);
    sub_4D90B4((uint64_t)(v27 + 208), (uint64_t)&v92);
    sub_4D4B58((uint64_t)&v92);
    sub_4D4B58((uint64_t)&v77);
    sub_4D4B58((uint64_t)&v62);
    if (SHIBYTE(v59) < 0)
    {
      operator delete((void *)v58);
      if (SHIBYTE(v56) < 0) {
        goto LABEL_54;
      }
LABEL_49:
      unsigned int v46 = v53;
      if (v53 != 1) {
        goto LABEL_50;
      }
LABEL_55:
      BOOL v47 = __p;
      if (__p)
      {
        unsigned int v51 = __p;
LABEL_4:
        operator delete(v47);
      }
    }
    else
    {
      if ((SHIBYTE(v56) & 0x80000000) == 0) {
        goto LABEL_49;
      }
LABEL_54:
      operator delete((void *)v55);
      unsigned int v46 = v53;
      if (v53 == 1) {
        goto LABEL_55;
      }
LABEL_50:
      if (!v46 && v52 < 0)
      {
        BOOL v47 = __p;
        goto LABEL_4;
      }
    }
LABEL_5:
    uint64_t v4 = v6 + 76;
    v5 += 76;
    uint64_t v3 = v6;
    if (v6 + 76 != a2) {
      continue;
    }
    break;
  }
}

void sub_5E71A8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_58CC(exception_object);
}

uint64_t *sub_5E71EC(uint64_t a1, uint64_t *a2)
{
  uint64_t v62 = *(void *)a1;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (void *)*(unsigned int *)(a1 + 40);
  int v67 = (int)v5;
  sub_4F38B0(v5, v4, &v63);
  uint64_t v68 = *(void *)(a1 + 48);
  *(_OWORD *)uint64_t v69 = *(_OWORD *)(a1 + 56);
  uint64_t v70 = *(void *)(a1 + 72);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  char v71 = *(unsigned char *)(a1 + 80);
  *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 88);
  uint64_t v73 = *(void *)(a1 + 104);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  char v74 = *(unsigned char *)(a1 + 112);
  unsigned int v75 = *(_DWORD *)(a1 + 120);
  unsigned int v6 = v75;
  long long v76 = *(_OWORD *)(a1 + 128);
  uint64_t v7 = *(void *)(a1 + 144);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  long long v78 = *(_OWORD *)(a1 + 152);
  uint64_t v8 = *(void *)(a1 + 168);
  uint64_t v77 = v7;
  uint64_t v79 = v8;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  long long v80 = *(_OWORD *)(a1 + 176);
  uint64_t v9 = *(void *)(a1 + 192);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  long long v82 = *(_OWORD *)(a1 + 200);
  uint64_t v10 = *(void *)(a1 + 216);
  uint64_t v11 = *(void *)(a1 + 224);
  uint64_t v81 = v9;
  uint64_t v83 = v10;
  uint64_t v84 = v11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  LODWORD(v9) = *(_DWORD *)(a1 + 232);
  char v86 = *(unsigned char *)(a1 + 236);
  int v85 = v9;
  uint64_t v12 = *(void *)(a1 + 256);
  long long v87 = *(_OWORD *)(a1 + 240);
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  uint64_t v13 = *(void *)(a1 + 280);
  long long v89 = *(_OWORD *)(a1 + 264);
  uint64_t v88 = v12;
  uint64_t v90 = v13;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  long long v91 = *(_OWORD *)(a1 + 288);
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  uint64_t v14 = *(void *)(a1 + 312);
  uint64_t v92 = *(void *)(a1 + 304);
  uint64_t v93 = v14;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  long long v15 = *(_OWORD *)(a1 + 320);
  long long v16 = *(_OWORD *)(a1 + 336);
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  long long v94 = v15;
  long long v95 = v16;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  uint64_t v17 = *(void *)(a1 + 360);
  uint64_t v96 = *(void *)(a1 + 352);
  uint64_t v97 = v17;
  long long v98 = *(_OWORD *)(a1 + 368);
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  uint64_t v18 = *(void *)(a1 + 384);
  *(void *)(a1 + 384) = 0;
  uint64_t v99 = v18;
  LODWORD(v18) = *(_DWORD *)(a1 + 392);
  char v101 = *(unsigned char *)(a1 + 396);
  int v100 = v18;
  uint64_t v19 = *(void *)(a1 + 416);
  long long v102 = *(_OWORD *)(a1 + 400);
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  uint64_t v20 = *(void *)(a1 + 440);
  long long v104 = *(_OWORD *)(a1 + 424);
  uint64_t v103 = v19;
  uint64_t v105 = v20;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  long long v106 = *(_OWORD *)(a1 + 448);
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  uint64_t v21 = *(void *)(a1 + 472);
  uint64_t v107 = *(void *)(a1 + 464);
  uint64_t v108 = v21;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  long long v22 = *(_OWORD *)(a1 + 480);
  long long v23 = *(_OWORD *)(a1 + 496);
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 0;
  long long v109 = v22;
  long long v110 = v23;
  uint64_t v24 = *(void *)(a1 + 520);
  uint64_t v111 = *(void *)(a1 + 512);
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  uint64_t v112 = v24;
  long long v113 = *(_OWORD *)(a1 + 528);
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 536) = 0;
  uint64_t v25 = *(void *)(a1 + 544);
  *(void *)(a1 + 544) = 0;
  uint64_t v114 = v25;
  LODWORD(v25) = *(_DWORD *)(a1 + 552);
  char v116 = *(unsigned char *)(a1 + 556);
  int v115 = v25;
  long long v26 = *(_OWORD *)(a1 + 560);
  uint64_t v118 = *(void *)(a1 + 576);
  long long v117 = v26;
  *(void *)(a1 + 560) = 0;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 576) = 0;
  uint64_t v27 = *(void *)(a1 + 600);
  long long v28 = *(_OWORD *)(a1 + 584);
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 600) = 0;
  BOOL v29 = a2 - 76;
  uint64_t v30 = v62;
  uint64_t v31 = *(a2 - 76);
  BOOL v32 = v62 == v31;
  BOOL v33 = v62 < v31;
  if (v32) {
    BOOL v33 = v6 > *((_DWORD *)a2 - 122);
  }
  long long v119 = v28;
  uint64_t v120 = v27;
  if (v33)
  {
    int v34 = (uint64_t *)a1;
    do
    {
      long long v35 = v34 + 76;
      uint64_t v36 = v34[76];
      BOOL v37 = v6 > *((_DWORD *)v34 + 182);
      BOOL v32 = v62 == v36;
      BOOL v38 = v62 < v36;
      if (v32) {
        BOOL v38 = v37;
      }
      int v34 = v35;
    }
    while (!v38);
  }
  else
  {
    int64_t v39 = (uint64_t *)(a1 + 608);
    do
    {
      long long v35 = v39;
      if (v39 >= a2) {
        break;
      }
      uint64_t v40 = *v39;
      BOOL v41 = v6 > *((_DWORD *)v35 + 30);
      BOOL v32 = v62 == v40;
      BOOL v42 = v62 < v40;
      if (!v32) {
        BOOL v41 = v42;
      }
      int64_t v39 = v35 + 76;
    }
    while (!v41);
  }
  if (v35 >= a2) {
    goto LABEL_19;
  }
  do
  {
    BOOL v43 = v62 < *v29;
    if (v62 == *v29) {
      BOOL v43 = v6 > *((_DWORD *)v29 + 30);
    }
    v29 -= 76;
  }
  while (v43);
  while (1)
  {
    a2 = v29 + 76;
LABEL_19:
    if (v35 >= a2) {
      break;
    }
    sub_5DF7E8(v35, a2);
    uint64_t v30 = v62;
    do
    {
      uint64_t v44 = v35[76];
      unsigned int v45 = *((_DWORD *)v35 + 182);
      v35 += 76;
      BOOL v46 = v75 > v45;
      BOOL v32 = v62 == v44;
      BOOL v47 = v62 < v44;
      if (v32) {
        BOOL v47 = v46;
      }
    }
    while (!v47);
    BOOL v29 = a2 - 76;
    do
    {
      BOOL v48 = v62 < *v29;
      if (v62 == *v29) {
        BOOL v48 = v75 > *((_DWORD *)v29 + 30);
      }
      v29 -= 76;
    }
    while (v48);
  }
  uint64_t v49 = v35 - 76;
  if (v35 - 76 != (uint64_t *)a1)
  {
    uint64_t v50 = (uint64_t)v4;
    unsigned int v51 = (void **)(a1 + 56);
    *(void *)a1 = *v49;
    sub_4F377C(v50, (uint64_t)(v35 - 75));
    *(void *)(a1 + 48) = *(v35 - 70);
    if (*(char *)(a1 + 79) < 0) {
      operator delete(*v51);
    }
    char v52 = (void **)(a1 + 88);
    long long v53 = *(_OWORD *)(v35 - 69);
    *(void *)(a1 + 72) = *(v35 - 67);
    *(_OWORD *)unsigned int v51 = v53;
    *((unsigned char *)v35 - 529) = 0;
    *((unsigned char *)v35 - 552) = 0;
    *(unsigned char *)(a1 + 80) = *((unsigned char *)v35 - 528);
    if (*(char *)(a1 + 111) < 0) {
      operator delete(*v52);
    }
    long long v54 = *(_OWORD *)(v35 - 65);
    *(void *)(a1 + 104) = *(v35 - 63);
    *(_OWORD *)char v52 = v54;
    *((unsigned char *)v35 - 497) = 0;
    *((unsigned char *)v35 - 520) = 0;
    *(unsigned char *)(a1 + 112) = *((unsigned char *)v35 - 496);
    *(_DWORD *)(a1 + 120) = *((_DWORD *)v35 - 122);
    sub_4D90B4(a1 + 128, (uint64_t)(v35 - 60));
    sub_4D90B4(a1 + 288, (uint64_t)(v35 - 40));
    sub_4D90B4(a1 + 448, (uint64_t)(v35 - 20));
    uint64_t v30 = v62;
  }
  *uint64_t v49 = v30;
  sub_4F377C((uint64_t)(v35 - 75), (uint64_t)&v63);
  *(v35 - 70) = v68;
  long long v55 = (void **)(v35 - 69);
  if (*((char *)v35 - 529) < 0) {
    operator delete(*v55);
  }
  long long v56 = *(_OWORD *)v69;
  *(v35 - 67) = v70;
  *(_OWORD *)long long v55 = v56;
  HIBYTE(v70) = 0;
  LOBYTE(v69[0]) = 0;
  *((unsigned char *)v35 - 528) = v71;
  char v57 = (void **)(v35 - 65);
  if (*((char *)v35 - 497) < 0) {
    operator delete(*v57);
  }
  long long v58 = *(_OWORD *)__p;
  *(v35 - 63) = v73;
  *(_OWORD *)char v57 = v58;
  HIBYTE(v73) = 0;
  LOBYTE(__p[0]) = 0;
  *((unsigned char *)v35 - 496) = v74;
  *((_DWORD *)v35 - 122) = v75;
  sub_4D90B4((uint64_t)(v35 - 60), (uint64_t)&v76);
  sub_4D90B4((uint64_t)(v35 - 40), (uint64_t)&v91);
  sub_4D90B4((uint64_t)(v35 - 20), (uint64_t)&v106);
  sub_4D4B58((uint64_t)&v106);
  sub_4D4B58((uint64_t)&v91);
  sub_4D4B58((uint64_t)&v76);
  if ((SHIBYTE(v73) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v70) & 0x80000000) == 0) {
      goto LABEL_41;
    }
LABEL_46:
    operator delete(v69[0]);
    int v59 = v67;
    if (v67 != 1) {
      goto LABEL_42;
    }
    goto LABEL_47;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v70) < 0) {
    goto LABEL_46;
  }
LABEL_41:
  int v59 = v67;
  if (v67 != 1)
  {
LABEL_42:
    if (!v59 && v66 < 0)
    {
      char v60 = v64;
LABEL_49:
      operator delete(v60);
      return v35;
    }
    return v35;
  }
LABEL_47:
  char v60 = v64;
  if (v64)
  {
    uint64_t v65 = v64;
    goto LABEL_49;
  }
  return v35;
}

unint64_t sub_5E7814(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = *(void *)a1;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (void *)*(unsigned int *)(a1 + 40);
  int v64 = (int)v5;
  sub_4F38B0(v5, v4, &v60);
  uint64_t v6 = 0;
  uint64_t v65 = *(void *)(a1 + 48);
  *(_OWORD *)char v66 = *(_OWORD *)(a1 + 56);
  uint64_t v67 = *(void *)(a1 + 72);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  char v68 = *(unsigned char *)(a1 + 80);
  char v57 = (void **)(a1 + 56);
  long long v58 = (void **)(a1 + 88);
  *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 88);
  uint64_t v70 = *(void *)(a1 + 104);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  char v71 = *(unsigned char *)(a1 + 112);
  unsigned int v7 = *(_DWORD *)(a1 + 120);
  unsigned int v72 = v7;
  long long v73 = *(_OWORD *)(a1 + 128);
  uint64_t v8 = *(void *)(a1 + 144);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  long long v75 = *(_OWORD *)(a1 + 152);
  uint64_t v9 = *(void *)(a1 + 168);
  uint64_t v74 = v8;
  uint64_t v76 = v9;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  long long v77 = *(_OWORD *)(a1 + 176);
  uint64_t v10 = *(void *)(a1 + 192);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  long long v79 = *(_OWORD *)(a1 + 200);
  uint64_t v11 = *(void *)(a1 + 216);
  uint64_t v12 = *(void *)(a1 + 224);
  uint64_t v78 = v10;
  uint64_t v80 = v11;
  uint64_t v81 = v12;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  LODWORD(v10) = *(_DWORD *)(a1 + 232);
  char v83 = *(unsigned char *)(a1 + 236);
  int v82 = v10;
  uint64_t v13 = *(void *)(a1 + 256);
  long long v84 = *(_OWORD *)(a1 + 240);
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  uint64_t v14 = *(void *)(a1 + 280);
  long long v86 = *(_OWORD *)(a1 + 264);
  uint64_t v85 = v13;
  uint64_t v87 = v14;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  long long v88 = *(_OWORD *)(a1 + 288);
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  uint64_t v15 = *(void *)(a1 + 312);
  uint64_t v89 = *(void *)(a1 + 304);
  uint64_t v90 = v15;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  long long v16 = *(_OWORD *)(a1 + 320);
  long long v17 = *(_OWORD *)(a1 + 336);
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  long long v91 = v16;
  long long v92 = v17;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  uint64_t v18 = *(void *)(a1 + 360);
  uint64_t v93 = *(void *)(a1 + 352);
  uint64_t v94 = v18;
  long long v95 = *(_OWORD *)(a1 + 368);
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  uint64_t v19 = *(void *)(a1 + 384);
  *(void *)(a1 + 384) = 0;
  uint64_t v96 = v19;
  LODWORD(v19) = *(_DWORD *)(a1 + 392);
  char v98 = *(unsigned char *)(a1 + 396);
  int v97 = v19;
  uint64_t v20 = *(void *)(a1 + 416);
  long long v99 = *(_OWORD *)(a1 + 400);
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  uint64_t v21 = *(void *)(a1 + 440);
  long long v101 = *(_OWORD *)(a1 + 424);
  uint64_t v100 = v20;
  uint64_t v102 = v21;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  uint64_t v22 = *(void *)(a1 + 472);
  uint64_t v104 = *(void *)(a1 + 464);
  uint64_t v105 = v22;
  uint64_t v23 = *(void *)(a1 + 520);
  uint64_t v108 = *(void *)(a1 + 512);
  long long v103 = *(_OWORD *)(a1 + 448);
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  long long v24 = *(_OWORD *)(a1 + 480);
  long long v25 = *(_OWORD *)(a1 + 496);
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 0;
  long long v106 = v24;
  long long v107 = v25;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  uint64_t v109 = v23;
  long long v110 = *(_OWORD *)(a1 + 528);
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 536) = 0;
  uint64_t v26 = *(void *)(a1 + 544);
  *(void *)(a1 + 544) = 0;
  uint64_t v111 = v26;
  char v113 = *(unsigned char *)(a1 + 556);
  int v112 = *(_DWORD *)(a1 + 552);
  long long v27 = *(_OWORD *)(a1 + 560);
  uint64_t v115 = *(void *)(a1 + 576);
  long long v114 = v27;
  *(void *)(a1 + 560) = 0;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 576) = 0;
  uint64_t v28 = *(void *)(a1 + 600);
  long long v116 = *(_OWORD *)(a1 + 584);
  uint64_t v117 = v28;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 600) = 0;
  uint64_t v29 = v59;
  do
  {
    uint64_t v30 = *(void *)(a1 + v6 + 608);
    BOOL v31 = *(_DWORD *)(a1 + v6 + 728) > v7;
    BOOL v32 = v30 == v59;
    BOOL v33 = v30 < v59;
    if (!v32) {
      BOOL v31 = v33;
    }
    v6 += 608;
  }
  while (v31);
  unint64_t v34 = a1 + v6;
  BOOL v32 = v6 == 608;
  uint64_t v35 = a2 - 608;
  if (v32)
  {
    while (1)
    {
      BOOL v37 = (uint64_t *)(v35 + 608);
      if (v34 >= v35 + 608) {
        break;
      }
      BOOL v55 = *(void *)v35 < v59;
      if (*(void *)v35 == v59) {
        BOOL v55 = *(_DWORD *)(v35 + 120) > v7;
      }
      v35 -= 608;
      if (v55) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    do
    {
      BOOL v36 = *(void *)v35 < v59;
      if (*(void *)v35 == v59) {
        BOOL v36 = *(_DWORD *)(v35 + 120) > v7;
      }
      v35 -= 608;
    }
    while (!v36);
LABEL_9:
    BOOL v37 = (uint64_t *)(v35 + 608);
  }
  unint64_t v38 = v34;
  if (v34 < (unint64_t)v37)
  {
    int64_t v39 = v37;
    do
    {
      sub_5DF7E8((uint64_t *)v38, v39);
      uint64_t v29 = v59;
      do
      {
        uint64_t v40 = *(void *)(v38 + 608);
        unsigned int v41 = *(_DWORD *)(v38 + 728);
        v38 += 608;
        BOOL v42 = v41 > v72;
        BOOL v32 = v40 == v59;
        BOOL v43 = v40 < v59;
        if (v32) {
          BOOL v43 = v42;
        }
      }
      while (v43);
      uint64_t v44 = v39 - 76;
      do
      {
        BOOL v45 = *v44 < v59;
        if (*v44 == v59) {
          BOOL v45 = *((_DWORD *)v44 + 30) > v72;
        }
        v44 -= 76;
      }
      while (!v45);
      int64_t v39 = v44 + 76;
    }
    while (v38 < (unint64_t)(v44 + 76));
  }
  BOOL v46 = (uint64_t *)(v38 - 608);
  if (v38 - 608 != a1)
  {
    *(void *)a1 = *v46;
    sub_4F377C((uint64_t)v4, v38 - 600);
    *(void *)(a1 + 48) = *(void *)(v38 - 560);
    if (*(char *)(a1 + 79) < 0) {
      operator delete(*v57);
    }
    long long v47 = *(_OWORD *)(v38 - 552);
    *(void *)(a1 + 72) = *(void *)(v38 - 536);
    *(_OWORD *)char v57 = v47;
    *(unsigned char *)(v38 - 529) = 0;
    *(unsigned char *)(v38 - 552) = 0;
    *(unsigned char *)(a1 + 80) = *(unsigned char *)(v38 - 528);
    if (*(char *)(a1 + 111) < 0) {
      operator delete(*v58);
    }
    long long v48 = *(_OWORD *)(v38 - 520);
    *(void *)(a1 + 104) = *(void *)(v38 - 504);
    *(_OWORD *)long long v58 = v48;
    *(unsigned char *)(v38 - 497) = 0;
    *(unsigned char *)(v38 - 520) = 0;
    *(unsigned char *)(a1 + 112) = *(unsigned char *)(v38 - 496);
    *(_DWORD *)(a1 + 120) = *(_DWORD *)(v38 - 488);
    sub_4D90B4(a1 + 128, v38 - 480);
    sub_4D90B4(a1 + 288, v38 - 320);
    sub_4D90B4(a1 + 448, v38 - 160);
    uint64_t v29 = v59;
  }
  *BOOL v46 = v29;
  sub_4F377C(v38 - 600, (uint64_t)&v60);
  *(void *)(v38 - 560) = v65;
  uint64_t v49 = (void **)(v38 - 552);
  if (*(char *)(v38 - 529) < 0) {
    operator delete(*v49);
  }
  long long v50 = *(_OWORD *)v66;
  *(void *)(v38 - 536) = v67;
  *(_OWORD *)uint64_t v49 = v50;
  HIBYTE(v67) = 0;
  LOBYTE(v66[0]) = 0;
  *(unsigned char *)(v38 - 528) = v68;
  unsigned int v51 = (void **)(v38 - 520);
  if (*(char *)(v38 - 497) < 0) {
    operator delete(*v51);
  }
  long long v52 = *(_OWORD *)__p;
  *(void *)(v38 - 504) = v70;
  *(_OWORD *)unsigned int v51 = v52;
  HIBYTE(v70) = 0;
  LOBYTE(__p[0]) = 0;
  *(unsigned char *)(v38 - 496) = v71;
  *(_DWORD *)(v38 - 488) = v72;
  sub_4D90B4(v38 - 480, (uint64_t)&v73);
  sub_4D90B4(v38 - 320, (uint64_t)&v88);
  sub_4D90B4(v38 - 160, (uint64_t)&v103);
  sub_4D4B58((uint64_t)&v103);
  sub_4D4B58((uint64_t)&v88);
  sub_4D4B58((uint64_t)&v73);
  if ((SHIBYTE(v70) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v67) & 0x80000000) == 0) {
      goto LABEL_33;
    }
LABEL_43:
    operator delete(v66[0]);
    int v53 = v64;
    if (v64 != 1) {
      goto LABEL_34;
    }
    goto LABEL_44;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v67) < 0) {
    goto LABEL_43;
  }
LABEL_33:
  int v53 = v64;
  if (v64 != 1)
  {
LABEL_34:
    if (!v53 && v63 < 0)
    {
      long long v54 = v61;
LABEL_46:
      operator delete(v54);
      return v38 - 608;
    }
    return v38 - 608;
  }
LABEL_44:
  long long v54 = v61;
  if (v61)
  {
    uint64_t v62 = v61;
    goto LABEL_46;
  }
  return v38 - 608;
}

void sub_5E7E38(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_58CC(a1);
}

BOOL sub_5E7E44(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(0x86BCA1AF286BCA1BLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      long long v47 = (uint64_t *)(a2 - 608);
      uint64_t v48 = *(void *)(v2 - 608);
      BOOL v49 = v48 == *(void *)a1;
      BOOL v50 = v48 < *(void *)a1;
      if (v49) {
        BOOL v50 = *(_DWORD *)(v2 - 488) > *(_DWORD *)(a1 + 120);
      }
      if (v50)
      {
        sub_5DF7E8((uint64_t *)a1, v47);
        return 1;
      }
      return result;
    case 3uLL:
      sub_5DE2E4(a1, a1 + 608, a2 - 608);
      return 1;
    case 4uLL:
      sub_5DFCD4(a1, a1 + 608, a1 + 1216, a2 - 608);
      return 1;
    case 5uLL:
      sub_5DFDD4(a1, a1 + 608, a1 + 1216, a1 + 1824, a2 - 608);
      return 1;
    default:
      uint64_t v6 = a1 + 1216;
      sub_5DE2E4(a1, a1 + 608, a1 + 1216);
      uint64_t v7 = a1 + 1824;
      if (a1 + 1824 == v2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      uint64_t v51 = v2;
      break;
  }
  while (1)
  {
    BOOL v10 = *(void *)v7 < *(void *)v6;
    if (*(void *)v7 == *(void *)v6) {
      BOOL v10 = *(_DWORD *)(v7 + 120) > *(_DWORD *)(v6 + 120);
    }
    if (!v10) {
      goto LABEL_7;
    }
    uint64_t v52 = *(void *)v7;
    unsigned int v57 = *(_DWORD *)(v7 + 40);
    sub_4F38B0((void *)v57, (uint64_t *)(v7 + 8), &v53);
    uint64_t v58 = *(void *)(v7 + 48);
    long long v59 = *(_OWORD *)(v7 + 56);
    uint64_t v60 = *(void *)(v7 + 72);
    *(void *)(v7 + 56) = 0;
    *(void *)(v7 + 64) = 0;
    *(void *)(v7 + 72) = 0;
    char v61 = *(unsigned char *)(v7 + 80);
    long long v62 = *(_OWORD *)(v7 + 88);
    uint64_t v63 = *(void *)(v7 + 104);
    *(void *)(v7 + 96) = 0;
    *(void *)(v7 + 104) = 0;
    *(void *)(v7 + 88) = 0;
    char v64 = *(unsigned char *)(v7 + 112);
    unsigned int v65 = *(_DWORD *)(v7 + 120);
    long long v66 = *(_OWORD *)(v7 + 128);
    uint64_t v11 = *(void *)(v7 + 144);
    *(void *)(v7 + 128) = 0;
    *(void *)(v7 + 136) = 0;
    long long v68 = *(_OWORD *)(v7 + 152);
    uint64_t v12 = *(void *)(v7 + 168);
    uint64_t v67 = v11;
    uint64_t v69 = v12;
    *(void *)(v7 + 144) = 0;
    *(void *)(v7 + 152) = 0;
    *(void *)(v7 + 160) = 0;
    *(void *)(v7 + 168) = 0;
    long long v70 = *(_OWORD *)(v7 + 176);
    uint64_t v13 = *(void *)(v7 + 192);
    *(void *)(v7 + 176) = 0;
    *(void *)(v7 + 184) = 0;
    long long v72 = *(_OWORD *)(v7 + 200);
    uint64_t v14 = *(void *)(v7 + 216);
    uint64_t v15 = *(void *)(v7 + 224);
    uint64_t v71 = v13;
    uint64_t v73 = v14;
    uint64_t v74 = v15;
    *(void *)(v7 + 192) = 0;
    *(void *)(v7 + 200) = 0;
    *(void *)(v7 + 208) = 0;
    *(void *)(v7 + 216) = 0;
    *(void *)(v7 + 224) = 0;
    LODWORD(v13) = *(_DWORD *)(v7 + 232);
    char v76 = *(unsigned char *)(v7 + 236);
    int v75 = v13;
    long long v16 = *(_OWORD *)(v7 + 240);
    uint64_t v78 = *(void *)(v7 + 256);
    long long v77 = v16;
    *(void *)(v7 + 240) = 0;
    *(void *)(v7 + 248) = 0;
    long long v17 = *(_OWORD *)(v7 + 264);
    uint64_t v80 = *(void *)(v7 + 280);
    long long v79 = v17;
    *(void *)(v7 + 256) = 0;
    *(void *)(v7 + 264) = 0;
    *(void *)(v7 + 272) = 0;
    *(void *)(v7 + 280) = 0;
    long long v81 = *(_OWORD *)(v7 + 288);
    *(void *)(v7 + 288) = 0;
    *(void *)(v7 + 296) = 0;
    uint64_t v18 = *(void *)(v7 + 312);
    uint64_t v82 = *(void *)(v7 + 304);
    uint64_t v83 = v18;
    *(void *)(v7 + 304) = 0;
    *(void *)(v7 + 312) = 0;
    long long v19 = *(_OWORD *)(v7 + 320);
    long long v20 = *(_OWORD *)(v7 + 336);
    *(void *)(v7 + 320) = 0;
    *(void *)(v7 + 328) = 0;
    long long v84 = v19;
    long long v85 = v20;
    *(void *)(v7 + 336) = 0;
    *(void *)(v7 + 344) = 0;
    uint64_t v21 = *(void *)(v7 + 360);
    uint64_t v86 = *(void *)(v7 + 352);
    uint64_t v87 = v21;
    long long v88 = *(_OWORD *)(v7 + 368);
    *(void *)(v7 + 352) = 0;
    *(void *)(v7 + 360) = 0;
    *(void *)(v7 + 368) = 0;
    *(void *)(v7 + 376) = 0;
    uint64_t v22 = *(void *)(v7 + 384);
    *(void *)(v7 + 384) = 0;
    uint64_t v89 = v22;
    LODWORD(v22) = *(_DWORD *)(v7 + 392);
    char v91 = *(unsigned char *)(v7 + 396);
    int v90 = v22;
    long long v23 = *(_OWORD *)(v7 + 400);
    uint64_t v93 = *(void *)(v7 + 416);
    long long v92 = v23;
    *(void *)(v7 + 400) = 0;
    *(void *)(v7 + 408) = 0;
    *(void *)(v7 + 416) = 0;
    long long v24 = *(_OWORD *)(v7 + 424);
    uint64_t v95 = *(void *)(v7 + 440);
    long long v94 = v24;
    *(void *)(v7 + 424) = 0;
    *(void *)(v7 + 432) = 0;
    *(void *)(v7 + 440) = 0;
    long long v96 = *(_OWORD *)(v7 + 448);
    *(void *)(v7 + 448) = 0;
    *(void *)(v7 + 456) = 0;
    uint64_t v25 = *(void *)(v7 + 472);
    uint64_t v97 = *(void *)(v7 + 464);
    uint64_t v98 = v25;
    *(void *)(v7 + 464) = 0;
    *(void *)(v7 + 472) = 0;
    long long v26 = *(_OWORD *)(v7 + 480);
    long long v27 = *(_OWORD *)(v7 + 496);
    *(void *)(v7 + 480) = 0;
    *(void *)(v7 + 488) = 0;
    long long v99 = v26;
    long long v100 = v27;
    uint64_t v28 = *(void *)(v7 + 520);
    uint64_t v101 = *(void *)(v7 + 512);
    *(void *)(v7 + 496) = 0;
    *(void *)(v7 + 504) = 0;
    uint64_t v102 = v28;
    long long v103 = *(_OWORD *)(v7 + 528);
    *(void *)(v7 + 512) = 0;
    *(void *)(v7 + 520) = 0;
    *(void *)(v7 + 528) = 0;
    *(void *)(v7 + 536) = 0;
    uint64_t v29 = *(void *)(v7 + 544);
    *(void *)(v7 + 544) = 0;
    uint64_t v104 = v29;
    LODWORD(v29) = *(_DWORD *)(v7 + 552);
    char v106 = *(unsigned char *)(v7 + 556);
    int v105 = v29;
    long long v30 = *(_OWORD *)(v7 + 560);
    uint64_t v108 = *(void *)(v7 + 576);
    long long v107 = v30;
    *(void *)(v7 + 560) = 0;
    *(void *)(v7 + 568) = 0;
    *(void *)(v7 + 576) = 0;
    long long v31 = *(_OWORD *)(v7 + 584);
    uint64_t v110 = *(void *)(v7 + 600);
    long long v109 = v31;
    *(void *)(v7 + 584) = 0;
    *(void *)(v7 + 592) = 0;
    *(void *)(v7 + 600) = 0;
    uint64_t v32 = v8;
    uint64_t v33 = *(void *)v6;
    while (1)
    {
      uint64_t v34 = a1 + v32;
      *(void *)(a1 + v32 + 1824) = v33;
      sub_4F377C(a1 + v32 + 1832, a1 + v32 + 1224);
      *(void *)(a1 + v32 + 1872) = *(void *)(a1 + v32 + 1264);
      uint64_t v35 = (void **)(a1 + v32 + 1880);
      if (*(char *)(a1 + v32 + 1903) < 0) {
        operator delete(*v35);
      }
      *(void *)(v34 + 1896) = *(void *)(v34 + 1288);
      *(_OWORD *)uint64_t v35 = *(_OWORD *)(v34 + 1272);
      *(unsigned char *)(v34 + 1295) = 0;
      *(unsigned char *)(v34 + 1272) = 0;
      *(unsigned char *)(v34 + 1904) = *(unsigned char *)(v34 + 1296);
      uint64_t v36 = v34 + 1912;
      if (*(char *)(v34 + 1935) < 0) {
        operator delete(*(void **)v36);
      }
      uint64_t v37 = a1 + v32;
      uint64_t v38 = a1 + v32 + 1304;
      *(void *)(v36 + 16) = *(void *)(a1 + v32 + 1320);
      *(_OWORD *)uint64_t v36 = *(_OWORD *)v38;
      *(unsigned char *)(v37 + 1327) = 0;
      *(unsigned char *)(v37 + 1304) = 0;
      *(unsigned char *)(v37 + 1936) = *(unsigned char *)(a1 + v32 + 1328);
      *(_DWORD *)(v37 + 1944) = *(_DWORD *)(a1 + v32 + 1336);
      uint64_t v39 = a1 + v32 + 1344;
      sub_4D90B4(a1 + v32 + 1952, v39);
      uint64_t v40 = a1 + v32 + 1504;
      sub_4D90B4(v37 + 2112, v37 + 1504);
      uint64_t v41 = a1 + v32 + 1664;
      sub_4D90B4(v37 + 2272, v37 + 1664);
      if (v32 == -1216) {
        break;
      }
      uint64_t v33 = *(void *)(v37 + 608);
      BOOL v42 = v65 > *(_DWORD *)(v37 + 728);
      if (v52 != v33) {
        BOOL v42 = v52 < v33;
      }
      v32 -= 608;
      if (!v42)
      {
        uint64_t v43 = a1 + v32 + 1824;
        goto LABEL_22;
      }
    }
    uint64_t v43 = a1;
LABEL_22:
    *(void *)uint64_t v43 = v52;
    sub_4F377C(v37 + 1224, (uint64_t)&v53);
    *(void *)(v43 + 48) = v58;
    uint64_t v44 = v37 + 1272;
    if (*(char *)(v43 + 79) < 0) {
      operator delete(*(void **)v44);
    }
    *(_OWORD *)uint64_t v44 = v59;
    *(void *)(v44 + 16) = v60;
    HIBYTE(v60) = 0;
    LOBYTE(v59) = 0;
    *(unsigned char *)(v43 + 80) = v61;
    if (*(char *)(v43 + 111) < 0) {
      operator delete(*(void **)v38);
    }
    *(_OWORD *)uint64_t v38 = v62;
    *(void *)(v38 + 16) = v63;
    HIBYTE(v63) = 0;
    LOBYTE(v62) = 0;
    *(unsigned char *)(v43 + 112) = v64;
    *(_DWORD *)(v43 + 120) = v65;
    sub_4D90B4(v39, (uint64_t)&v66);
    sub_4D90B4(v40, (uint64_t)&v81);
    sub_4D90B4(v41, (uint64_t)&v96);
    sub_4D4B58((uint64_t)&v96);
    sub_4D4B58((uint64_t)&v81);
    sub_4D4B58((uint64_t)&v66);
    uint64_t v2 = v51;
    if (SHIBYTE(v63) < 0)
    {
      operator delete((void *)v62);
      if ((SHIBYTE(v60) & 0x80000000) == 0)
      {
LABEL_28:
        unsigned int v45 = v57;
        if (v57 != 1) {
          goto LABEL_29;
        }
        goto LABEL_34;
      }
    }
    else if ((SHIBYTE(v60) & 0x80000000) == 0)
    {
      goto LABEL_28;
    }
    operator delete((void *)v59);
    unsigned int v45 = v57;
    if (v57 != 1)
    {
LABEL_29:
      if (!v45 && v56 < 0)
      {
        BOOL v46 = __p;
LABEL_5:
        operator delete(v46);
        goto LABEL_6;
      }
      goto LABEL_6;
    }
LABEL_34:
    BOOL v46 = __p;
    if (__p)
    {
      BOOL v55 = __p;
      goto LABEL_5;
    }
LABEL_6:
    if (++v9 == 8) {
      return v7 + 608 == v51;
    }
LABEL_7:
    uint64_t v6 = v7;
    v8 += 608;
    v7 += 608;
    if (v7 == v2) {
      return 1;
    }
  }
}

void sub_5E856C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_58CC(a1);
}

void sub_5E8590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 < 2) {
    return;
  }
  uint64_t v5 = a4;
  uint64_t v54 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < (uint64_t)(0x86BCA1AF286BCA1BLL * (((uint64_t)a4 - a1) >> 5))) {
    return;
  }
  uint64_t v8 = (0xD79435E50D79436 * (((uint64_t)a4 - a1) >> 5)) | 1;
  int v9 = (uint64_t *)(a1 + 608 * v8);
  if (0xD79435E50D79436 * (((uint64_t)a4 - a1) >> 5) + 2 >= a3)
  {
    uint64_t v10 = *v9;
  }
  else
  {
    uint64_t v10 = *v9;
    uint64_t v11 = v9[76];
    BOOL v12 = *(_DWORD *)(a1 + 608 * v8 + 120) > *((_DWORD *)v9 + 182);
    if (*v9 != v11) {
      BOOL v12 = *v9 < v11;
    }
    if (v12)
    {
      uint64_t v10 = v9[76];
      v9 += 76;
      uint64_t v8 = 0xD79435E50D79436 * (((uint64_t)a4 - a1) >> 5) + 2;
    }
  }
  BOOL v13 = v10 == *a4;
  BOOL v14 = v10 < *a4;
  if (v13) {
    BOOL v14 = *((_DWORD *)v9 + 30) > *((_DWORD *)a4 + 30);
  }
  if (v14) {
    return;
  }
  uint64_t v55 = *a4;
  unsigned int v60 = *((_DWORD *)a4 + 10);
  sub_4F38B0((void *)v60, a4 + 1, &v56);
  uint64_t v61 = v5[6];
  *(_OWORD *)long long v62 = *(_OWORD *)(v5 + 7);
  uint64_t v63 = v5[9];
  v5[7] = 0;
  v5[8] = 0;
  v5[9] = 0;
  char v64 = *((unsigned char *)v5 + 80);
  *(_OWORD *)std::string __p = *(_OWORD *)(v5 + 11);
  uint64_t v66 = v5[13];
  v5[12] = 0;
  v5[13] = 0;
  v5[11] = 0;
  char v67 = *((unsigned char *)v5 + 112);
  unsigned int v68 = *((_DWORD *)v5 + 30);
  long long v69 = *((_OWORD *)v5 + 8);
  uint64_t v15 = v5[18];
  v5[16] = 0;
  v5[17] = 0;
  long long v71 = *(_OWORD *)(v5 + 19);
  uint64_t v16 = v5[21];
  uint64_t v70 = v15;
  uint64_t v72 = v16;
  v5[18] = 0;
  v5[19] = 0;
  v5[20] = 0;
  v5[21] = 0;
  long long v73 = *((_OWORD *)v5 + 11);
  uint64_t v17 = v5[24];
  v5[22] = 0;
  v5[23] = 0;
  long long v75 = *(_OWORD *)(v5 + 25);
  uint64_t v18 = v5[27];
  uint64_t v19 = v5[28];
  uint64_t v74 = v17;
  uint64_t v76 = v18;
  uint64_t v77 = v19;
  v5[24] = 0;
  v5[25] = 0;
  v5[26] = 0;
  v5[27] = 0;
  v5[28] = 0;
  LODWORD(v18) = *((_DWORD *)v5 + 58);
  char v79 = *((unsigned char *)v5 + 236);
  int v78 = v18;
  uint64_t v20 = v5[32];
  long long v80 = *((_OWORD *)v5 + 15);
  v5[30] = 0;
  v5[31] = 0;
  uint64_t v21 = v5[35];
  long long v82 = *(_OWORD *)(v5 + 33);
  uint64_t v81 = v20;
  uint64_t v83 = v21;
  v5[32] = 0;
  v5[33] = 0;
  v5[34] = 0;
  v5[35] = 0;
  long long v84 = *((_OWORD *)v5 + 18);
  v5[36] = 0;
  v5[37] = 0;
  uint64_t v22 = v5[39];
  uint64_t v85 = v5[38];
  uint64_t v86 = v22;
  v5[38] = 0;
  v5[39] = 0;
  long long v23 = *((_OWORD *)v5 + 20);
  long long v24 = *((_OWORD *)v5 + 21);
  v5[40] = 0;
  v5[41] = 0;
  long long v87 = v23;
  long long v88 = v24;
  v5[42] = 0;
  v5[43] = 0;
  uint64_t v25 = v5[45];
  uint64_t v89 = v5[44];
  uint64_t v90 = v25;
  long long v91 = *((_OWORD *)v5 + 23);
  v5[44] = 0;
  v5[45] = 0;
  v5[46] = 0;
  v5[47] = 0;
  uint64_t v26 = v5[48];
  v5[48] = 0;
  uint64_t v92 = v26;
  LODWORD(v26) = *((_DWORD *)v5 + 98);
  char v94 = *((unsigned char *)v5 + 396);
  int v93 = v26;
  uint64_t v27 = v5[52];
  long long v95 = *((_OWORD *)v5 + 25);
  v5[50] = 0;
  v5[51] = 0;
  v5[52] = 0;
  uint64_t v28 = v5[55];
  long long v97 = *(_OWORD *)(v5 + 53);
  uint64_t v96 = v27;
  uint64_t v98 = v28;
  v5[53] = 0;
  v5[54] = 0;
  v5[55] = 0;
  long long v99 = *((_OWORD *)v5 + 28);
  v5[56] = 0;
  v5[57] = 0;
  uint64_t v29 = v5[59];
  uint64_t v100 = v5[58];
  uint64_t v101 = v29;
  v5[58] = 0;
  v5[59] = 0;
  long long v30 = *((_OWORD *)v5 + 30);
  long long v31 = *((_OWORD *)v5 + 31);
  v5[60] = 0;
  v5[61] = 0;
  long long v102 = v30;
  long long v103 = v31;
  uint64_t v32 = v5[65];
  uint64_t v104 = v5[64];
  v5[62] = 0;
  v5[63] = 0;
  uint64_t v105 = v32;
  long long v106 = *((_OWORD *)v5 + 33);
  v5[64] = 0;
  v5[65] = 0;
  v5[66] = 0;
  v5[67] = 0;
  uint64_t v33 = v5[68];
  v5[68] = 0;
  uint64_t v107 = v33;
  LODWORD(v33) = *((_DWORD *)v5 + 138);
  char v109 = *((unsigned char *)v5 + 556);
  int v108 = v33;
  long long v34 = *((_OWORD *)v5 + 35);
  uint64_t v111 = v5[72];
  long long v110 = v34;
  v5[70] = 0;
  v5[71] = 0;
  v5[72] = 0;
  uint64_t v35 = v5[75];
  long long v112 = *(_OWORD *)(v5 + 73);
  uint64_t v113 = v35;
  v5[73] = 0;
  v5[74] = 0;
  v5[75] = 0;
  uint64_t v36 = *v9;
  while (1)
  {
    uint64_t v41 = v9;
    *uint64_t v5 = v36;
    uint64_t v42 = (uint64_t)(v9 + 1);
    sub_4F377C((uint64_t)(v5 + 1), (uint64_t)(v9 + 1));
    v5[6] = v9[6];
    uint64_t v43 = (void **)(v5 + 7);
    if (*((char *)v5 + 79) < 0) {
      operator delete(*v43);
    }
    long long v44 = *(_OWORD *)(v41 + 7);
    v5[9] = v41[9];
    *(_OWORD *)uint64_t v43 = v44;
    *((unsigned char *)v41 + 79) = 0;
    *((unsigned char *)v41 + 56) = 0;
    *((unsigned char *)v5 + 80) = *((unsigned char *)v41 + 80);
    unsigned int v45 = (void **)(v5 + 11);
    if (*((char *)v5 + 111) < 0) {
      operator delete(*v45);
    }
    long long v46 = *(_OWORD *)(v41 + 11);
    v5[13] = v41[13];
    *(_OWORD *)unsigned int v45 = v46;
    *((unsigned char *)v41 + 111) = 0;
    *((unsigned char *)v41 + 88) = 0;
    *((unsigned char *)v5 + 112) = *((unsigned char *)v41 + 112);
    *((_DWORD *)v5 + 30) = *((_DWORD *)v41 + 30);
    sub_4D90B4((uint64_t)(v5 + 16), (uint64_t)(v41 + 16));
    sub_4D90B4((uint64_t)(v5 + 36), (uint64_t)(v41 + 36));
    sub_4D90B4((uint64_t)(v5 + 56), (uint64_t)(v41 + 56));
    if (v54 < v8) {
      break;
    }
    uint64_t v47 = (2 * v8) | 1;
    int v9 = (uint64_t *)(a1 + 608 * v47);
    if (2 * v8 + 2 < a3)
    {
      uint64_t v36 = *v9;
      uint64_t v37 = v9[76];
      BOOL v38 = *(_DWORD *)(a1 + 608 * v47 + 120) > *((_DWORD *)v9 + 182);
      if (*v9 != v37) {
        BOOL v38 = *v9 < v37;
      }
      if (v38)
      {
        uint64_t v36 = v9[76];
        v9 += 76;
        uint64_t v8 = 2 * v8 + 2;
      }
      else
      {
        uint64_t v8 = (2 * v8) | 1;
      }
    }
    else
    {
      uint64_t v36 = *v9;
      uint64_t v8 = (2 * v8) | 1;
    }
    uint64_t v39 = v55;
    BOOL v40 = *((_DWORD *)v9 + 30) > v68;
    if (v36 != v55) {
      BOOL v40 = v36 < v55;
    }
    uint64_t v5 = v41;
    if (v40) {
      goto LABEL_30;
    }
  }
  uint64_t v39 = v55;
LABEL_30:
  uint64_t v48 = (void **)(v41 + 7);
  *uint64_t v41 = v39;
  sub_4F377C(v42, (uint64_t)&v56);
  v41[6] = v61;
  if (*((char *)v41 + 79) < 0) {
    operator delete(*v48);
  }
  BOOL v49 = (void **)(v41 + 11);
  long long v50 = *(_OWORD *)v62;
  v41[9] = v63;
  *(_OWORD *)uint64_t v48 = v50;
  HIBYTE(v63) = 0;
  LOBYTE(v62[0]) = 0;
  *((unsigned char *)v41 + 80) = v64;
  if (*((char *)v41 + 111) < 0) {
    operator delete(*v49);
  }
  long long v51 = *(_OWORD *)__p;
  v41[13] = v66;
  *(_OWORD *)BOOL v49 = v51;
  HIBYTE(v66) = 0;
  LOBYTE(__p[0]) = 0;
  *((unsigned char *)v41 + 112) = v67;
  *((_DWORD *)v41 + 30) = v68;
  sub_4D90B4((uint64_t)(v41 + 16), (uint64_t)&v69);
  sub_4D90B4((uint64_t)(v41 + 36), (uint64_t)&v84);
  sub_4D90B4((uint64_t)(v41 + 56), (uint64_t)&v99);
  sub_4D4B58((uint64_t)&v99);
  sub_4D4B58((uint64_t)&v84);
  sub_4D4B58((uint64_t)&v69);
  if ((SHIBYTE(v66) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v63) & 0x80000000) == 0) {
      goto LABEL_36;
    }
LABEL_41:
    operator delete(v62[0]);
    unsigned int v52 = v60;
    if (v60 != 1) {
      goto LABEL_37;
    }
LABEL_42:
    uint64_t v53 = v57;
    if (!v57) {
      return;
    }
    uint64_t v58 = v57;
    goto LABEL_44;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v63) < 0) {
    goto LABEL_41;
  }
LABEL_36:
  unsigned int v52 = v60;
  if (v60 == 1) {
    goto LABEL_42;
  }
LABEL_37:
  if (!v52 && v59 < 0)
  {
    uint64_t v53 = v57;
LABEL_44:
    operator delete(v53);
  }
}

void sub_5E8BCC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_58CC(a1);
}

void sub_5E8BD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 < 2) {
    return;
  }
  uint64_t v54 = *(void *)a1;
  uint64_t v8 = (uint64_t *)(a1 + 8);
  int v9 = (void *)*(unsigned int *)(a1 + 40);
  int v59 = (int)v9;
  sub_4F38B0(v9, v8, &v55);
  uint64_t v60 = *(void *)(a1 + 48);
  *(_OWORD *)uint64_t v61 = *(_OWORD *)(a1 + 56);
  uint64_t v62 = *(void *)(a1 + 72);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  char v63 = *(unsigned char *)(a1 + 80);
  *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 88);
  uint64_t v65 = *(void *)(a1 + 104);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  char v66 = *(unsigned char *)(a1 + 112);
  int v67 = *(_DWORD *)(a1 + 120);
  long long v68 = *(_OWORD *)(a1 + 128);
  uint64_t v10 = *(void *)(a1 + 144);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  long long v70 = *(_OWORD *)(a1 + 152);
  uint64_t v11 = *(void *)(a1 + 168);
  uint64_t v69 = v10;
  uint64_t v71 = v11;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  long long v72 = *(_OWORD *)(a1 + 176);
  uint64_t v12 = *(void *)(a1 + 192);
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  long long v74 = *(_OWORD *)(a1 + 200);
  uint64_t v13 = *(void *)(a1 + 216);
  uint64_t v14 = *(void *)(a1 + 224);
  uint64_t v73 = v12;
  uint64_t v75 = v13;
  uint64_t v76 = v14;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  LODWORD(v12) = *(_DWORD *)(a1 + 232);
  char v78 = *(unsigned char *)(a1 + 236);
  int v77 = v12;
  uint64_t v15 = *(void *)(a1 + 256);
  long long v79 = *(_OWORD *)(a1 + 240);
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  uint64_t v16 = *(void *)(a1 + 280);
  long long v81 = *(_OWORD *)(a1 + 264);
  uint64_t v80 = v15;
  uint64_t v82 = v16;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  long long v83 = *(_OWORD *)(a1 + 288);
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  uint64_t v17 = *(void *)(a1 + 312);
  uint64_t v84 = *(void *)(a1 + 304);
  uint64_t v85 = v17;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  long long v18 = *(_OWORD *)(a1 + 320);
  long long v19 = *(_OWORD *)(a1 + 336);
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  long long v86 = v18;
  long long v87 = v19;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  uint64_t v20 = *(void *)(a1 + 360);
  uint64_t v88 = *(void *)(a1 + 352);
  uint64_t v89 = v20;
  long long v90 = *(_OWORD *)(a1 + 368);
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  uint64_t v21 = *(void *)(a1 + 384);
  *(void *)(a1 + 384) = 0;
  uint64_t v91 = v21;
  LODWORD(v21) = *(_DWORD *)(a1 + 392);
  char v93 = *(unsigned char *)(a1 + 396);
  int v92 = v21;
  uint64_t v22 = *(void *)(a1 + 416);
  long long v94 = *(_OWORD *)(a1 + 400);
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  uint64_t v23 = *(void *)(a1 + 440);
  long long v96 = *(_OWORD *)(a1 + 424);
  uint64_t v95 = v22;
  uint64_t v97 = v23;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  long long v98 = *(_OWORD *)(a1 + 448);
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  uint64_t v24 = *(void *)(a1 + 472);
  uint64_t v99 = *(void *)(a1 + 464);
  uint64_t v100 = v24;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  long long v25 = *(_OWORD *)(a1 + 480);
  long long v26 = *(_OWORD *)(a1 + 496);
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 0;
  long long v101 = v25;
  long long v102 = v26;
  uint64_t v103 = *(void *)(a1 + 512);
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  uint64_t v104 = *(void *)(a1 + 520);
  long long v105 = *(_OWORD *)(a1 + 528);
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 528) = 0;
  uint64_t v27 = *(void *)(a1 + 544);
  *(void *)(a1 + 544) = 0;
  uint64_t v106 = v27;
  LODWORD(v27) = *(_DWORD *)(a1 + 552);
  char v108 = *(unsigned char *)(a1 + 556);
  int v107 = v27;
  long long v28 = *(_OWORD *)(a1 + 560);
  uint64_t v110 = *(void *)(a1 + 576);
  long long v109 = v28;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 560) = 0;
  *(void *)(a1 + 576) = 0;
  uint64_t v29 = *(void *)(a1 + 600);
  long long v111 = *(_OWORD *)(a1 + 584);
  uint64_t v112 = v29;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 600) = 0;
  long long v30 = sub_5E0BAC((uint64_t *)a1, a3, a4);
  uint64_t v31 = a2 - 608;
  uint64_t v32 = (uint64_t)(v30 + 1);
  if (v30 == (uint64_t *)(a2 - 608))
  {
    *long long v30 = v54;
    sub_4F377C(v32, (uint64_t)&v55);
    v30[6] = v60;
    long long v44 = (void **)(v30 + 7);
    if (*((char *)v30 + 79) < 0) {
      operator delete(*v44);
    }
    long long v45 = *(_OWORD *)v61;
    v30[9] = v62;
    *(_OWORD *)long long v44 = v45;
    HIBYTE(v62) = 0;
    LOBYTE(v61[0]) = 0;
    *((unsigned char *)v30 + 80) = v63;
    long long v46 = (void **)(v30 + 11);
    if (*((char *)v30 + 111) < 0) {
      operator delete(*v46);
    }
    long long v47 = *(_OWORD *)__p;
    v30[13] = v65;
    *(_OWORD *)long long v46 = v47;
    HIBYTE(v65) = 0;
    LOBYTE(__p[0]) = 0;
    *((unsigned char *)v30 + 112) = v66;
    *((_DWORD *)v30 + 30) = v67;
    sub_4D90B4((uint64_t)(v30 + 16), (uint64_t)&v68);
    sub_4D90B4((uint64_t)(v30 + 36), (uint64_t)&v83);
    sub_4D90B4((uint64_t)(v30 + 56), (uint64_t)&v98);
  }
  else
  {
    *long long v30 = *(void *)v31;
    uint64_t v53 = a2 - 600;
    sub_4F377C(v32, a2 - 600);
    unsigned int v52 = (uint64_t *)(a2 - 560);
    v30[6] = *(void *)(a2 - 560);
    uint64_t v33 = (void **)(v30 + 7);
    if (*((char *)v30 + 79) < 0) {
      operator delete(*v33);
    }
    long long v34 = (char *)(a2 - 529);
    long long v35 = *(_OWORD *)(a2 - 552);
    v30[9] = *(void *)(a2 - 536);
    *(_OWORD *)uint64_t v33 = v35;
    *(unsigned char *)(a2 - 529) = 0;
    *(unsigned char *)(a2 - 552) = 0;
    *((unsigned char *)v30 + 80) = *(unsigned char *)(a2 - 528);
    uint64_t v36 = (void **)(v30 + 11);
    if (*((char *)v30 + 111) < 0) {
      operator delete(*v36);
    }
    uint64_t v37 = (void **)(a2 - 552);
    BOOL v38 = (char *)(a2 - 497);
    long long v39 = *(_OWORD *)(a2 - 520);
    v30[13] = *(void *)(a2 - 504);
    *(_OWORD *)uint64_t v36 = v39;
    *(unsigned char *)(a2 - 497) = 0;
    *(unsigned char *)(a2 - 520) = 0;
    int v40 = *(_DWORD *)(a2 - 488);
    *((unsigned char *)v30 + 112) = *(unsigned char *)(a2 - 496);
    *((_DWORD *)v30 + 30) = v40;
    uint64_t v51 = a2 - 480;
    sub_4D90B4((uint64_t)(v30 + 16), a2 - 480);
    uint64_t v50 = a2 - 320;
    sub_4D90B4((uint64_t)(v30 + 36), a2 - 320);
    uint64_t v41 = a2 - 160;
    sub_4D90B4((uint64_t)(v30 + 56), v41);
    uint64_t v42 = (uint64_t)(v30 + 76);
    *(void *)uint64_t v31 = v54;
    sub_4F377C(v53, (uint64_t)&v55);
    *unsigned int v52 = v60;
    if (*v34 < 0) {
      operator delete(*v37);
    }
    uint64_t v43 = (void **)(v31 + 88);
    *(_OWORD *)uint64_t v37 = *(_OWORD *)v61;
    *(void *)(v31 + 72) = v62;
    HIBYTE(v62) = 0;
    LOBYTE(v61[0]) = 0;
    *(unsigned char *)(v31 + 80) = v63;
    if (*v38 < 0) {
      operator delete(*v43);
    }
    *(_OWORD *)uint64_t v43 = *(_OWORD *)__p;
    *(void *)(v31 + 104) = v65;
    HIBYTE(v65) = 0;
    LOBYTE(__p[0]) = 0;
    *(unsigned char *)(v31 + 112) = v66;
    *(_DWORD *)(v31 + 120) = v67;
    sub_4D90B4(v51, (uint64_t)&v68);
    sub_4D90B4(v50, (uint64_t)&v83);
    sub_4D90B4(v41, (uint64_t)&v98);
    sub_5E9220(a1, v42, a3, 0x86BCA1AF286BCA1BLL * ((v42 - a1) >> 5));
  }
  sub_4D4B58((uint64_t)&v98);
  sub_4D4B58((uint64_t)&v83);
  sub_4D4B58((uint64_t)&v68);
  if ((SHIBYTE(v65) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v62) & 0x80000000) == 0) {
      goto LABEL_19;
    }
LABEL_24:
    operator delete(v61[0]);
    int v48 = v59;
    if (v59 != 1) {
      goto LABEL_20;
    }
LABEL_25:
    BOOL v49 = v56;
    if (!v56) {
      return;
    }
    unsigned int v57 = v56;
    goto LABEL_27;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v62) < 0) {
    goto LABEL_24;
  }
LABEL_19:
  int v48 = v59;
  if (v59 == 1) {
    goto LABEL_25;
  }
LABEL_20:
  if (!v48 && v58 < 0)
  {
    BOOL v49 = v56;
LABEL_27:
    operator delete(v49);
  }
}

void sub_5E91FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_5E9220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 < 2) {
    return;
  }
  unint64_t v7 = v4 >> 1;
  uint64_t v8 = (uint64_t *)(a1 + 608 * (v4 >> 1));
  int v9 = (uint64_t *)(a2 - 608);
  uint64_t v10 = *(void *)(a2 - 608);
  uint64_t v11 = (unsigned int *)(a2 - 488);
  BOOL v12 = *v8 < v10;
  if (*v8 == v10) {
    BOOL v12 = *((_DWORD *)v8 + 30) > *(_DWORD *)(a2 - 488);
  }
  if (!v12) {
    return;
  }
  uint64_t v44 = *(void *)(a2 - 608);
  unsigned int v49 = *(_DWORD *)(a2 - 568);
  sub_4F38B0((void *)v49, (uint64_t *)(a2 - 600), &v45);
  uint64_t v50 = v9[6];
  *(_OWORD *)uint64_t v51 = *(_OWORD *)(v9 + 7);
  uint64_t v52 = v9[9];
  v9[7] = 0;
  v9[8] = 0;
  v9[9] = 0;
  char v53 = *((unsigned char *)v9 + 80);
  *(_OWORD *)std::string __p = *(_OWORD *)(v9 + 11);
  uint64_t v55 = v9[13];
  v9[12] = 0;
  v9[13] = 0;
  v9[11] = 0;
  char v56 = *((unsigned char *)v9 + 112);
  unsigned int v57 = *v11;
  long long v58 = *((_OWORD *)v9 + 8);
  uint64_t v13 = v9[18];
  v9[16] = 0;
  v9[17] = 0;
  long long v60 = *(_OWORD *)(v9 + 19);
  uint64_t v14 = v9[21];
  uint64_t v59 = v13;
  uint64_t v61 = v14;
  v9[18] = 0;
  v9[19] = 0;
  v9[20] = 0;
  v9[21] = 0;
  long long v62 = *((_OWORD *)v9 + 11);
  uint64_t v15 = v9[24];
  v9[22] = 0;
  v9[23] = 0;
  long long v64 = *(_OWORD *)(v9 + 25);
  uint64_t v16 = v9[27];
  uint64_t v17 = v9[28];
  uint64_t v63 = v15;
  uint64_t v65 = v16;
  uint64_t v66 = v17;
  v9[24] = 0;
  v9[25] = 0;
  v9[26] = 0;
  v9[27] = 0;
  v9[28] = 0;
  LODWORD(v16) = *((_DWORD *)v9 + 58);
  char v68 = *((unsigned char *)v9 + 236);
  int v67 = v16;
  uint64_t v18 = v9[32];
  long long v69 = *((_OWORD *)v9 + 15);
  v9[30] = 0;
  v9[31] = 0;
  uint64_t v19 = v9[35];
  long long v71 = *(_OWORD *)(v9 + 33);
  uint64_t v70 = v18;
  uint64_t v72 = v19;
  v9[32] = 0;
  v9[33] = 0;
  v9[34] = 0;
  v9[35] = 0;
  uint64_t v20 = v9[41];
  uint64_t v74 = v9[38];
  uint64_t v76 = v20;
  uint64_t v21 = *(void *)(a2 - 232);
  uint64_t v22 = *(void *)(a2 - 224);
  uint64_t v78 = *(void *)(a2 - 256);
  uint64_t v80 = v21;
  uint64_t v81 = v22;
  long long v73 = *((_OWORD *)v9 + 18);
  v9[36] = 0;
  v9[37] = 0;
  long long v75 = *(_OWORD *)(v9 + 39);
  v9[38] = 0;
  v9[39] = 0;
  v9[40] = 0;
  v9[41] = 0;
  long long v77 = *((_OWORD *)v9 + 21);
  v9[42] = 0;
  v9[43] = 0;
  *(void *)(a2 - 256) = 0;
  long long v79 = *(_OWORD *)(v9 + 45);
  v9[45] = 0;
  *(void *)(a2 - 240) = 0;
  *(void *)(a2 - 232) = 0;
  *(void *)(a2 - 224) = 0;
  int v23 = *(_DWORD *)(a2 - 216);
  char v83 = *(unsigned char *)(a2 - 212);
  int v82 = v23;
  uint64_t v24 = *(void *)(a2 - 192);
  long long v84 = *(_OWORD *)(a2 - 208);
  *(void *)(a2 - 208) = 0;
  *(void *)(a2 - 200) = 0;
  *(void *)(a2 - 192) = 0;
  uint64_t v25 = *(void *)(a2 - 168);
  long long v86 = *(_OWORD *)(v9 + 53);
  uint64_t v85 = v24;
  uint64_t v87 = v25;
  v9[53] = 0;
  *(void *)(a2 - 176) = 0;
  *(void *)(a2 - 168) = 0;
  long long v88 = *(_OWORD *)(a2 - 160);
  uint64_t v26 = *(void *)(a2 - 144);
  *(void *)(a2 - 160) = 0;
  *(void *)(a2 - 152) = 0;
  long long v90 = *(_OWORD *)(a2 - 136);
  uint64_t v27 = *(void *)(a2 - 120);
  uint64_t v89 = v26;
  uint64_t v91 = v27;
  *(void *)(a2 - 144) = 0;
  *(void *)(a2 - 136) = 0;
  *(void *)(a2 - 128) = 0;
  *(void *)(a2 - 120) = 0;
  long long v92 = *(_OWORD *)(a2 - 112);
  uint64_t v93 = *(void *)(a2 - 96);
  *(void *)(a2 - 112) = 0;
  *(void *)(a2 - 104) = 0;
  long long v94 = *(_OWORD *)(a2 - 88);
  uint64_t v28 = *(void *)(a2 - 64);
  uint64_t v95 = *(void *)(a2 - 72);
  *(void *)(a2 - 96) = 0;
  *(void *)(a2 - 88) = 0;
  *(void *)(a2 - 80) = 0;
  *(void *)(a2 - 72) = 0;
  *(void *)(a2 - 64) = 0;
  uint64_t v96 = v28;
  int v29 = *(_DWORD *)(a2 - 56);
  char v98 = *(unsigned char *)(a2 - 52);
  int v97 = v29;
  long long v30 = *(_OWORD *)(a2 - 48);
  uint64_t v100 = *(void *)(a2 - 32);
  long long v99 = v30;
  *(void *)(a2 - 48) = 0;
  *(void *)(a2 - 40) = 0;
  uint64_t v31 = *(void *)(a2 - 8);
  long long v101 = *(_OWORD *)(a2 - 24);
  uint64_t v102 = v31;
  *(void *)(a2 - 32) = 0;
  *(void *)(a2 - 24) = 0;
  *(void *)(a2 - 16) = 0;
  *(void *)(a2 - 8) = 0;
  uint64_t v32 = *v8;
  do
  {
    uint64_t v33 = v8;
    *int v9 = v32;
    uint64_t v34 = (uint64_t)(v8 + 1);
    sub_4F377C((uint64_t)(v9 + 1), (uint64_t)(v8 + 1));
    v9[6] = v8[6];
    long long v35 = (void **)(v9 + 7);
    if (*((char *)v9 + 79) < 0) {
      operator delete(*v35);
    }
    long long v36 = *(_OWORD *)(v33 + 7);
    v9[9] = v33[9];
    *(_OWORD *)long long v35 = v36;
    *((unsigned char *)v33 + 79) = 0;
    *((unsigned char *)v33 + 56) = 0;
    *((unsigned char *)v9 + 80) = *((unsigned char *)v33 + 80);
    uint64_t v37 = (void **)(v9 + 11);
    if (*((char *)v9 + 111) < 0) {
      operator delete(*v37);
    }
    long long v38 = *(_OWORD *)(v33 + 11);
    v9[13] = v33[13];
    *(_OWORD *)uint64_t v37 = v38;
    *((unsigned char *)v33 + 111) = 0;
    *((unsigned char *)v33 + 88) = 0;
    *((unsigned char *)v9 + 112) = *((unsigned char *)v33 + 112);
    *((_DWORD *)v9 + 30) = *((_DWORD *)v33 + 30);
    sub_4D90B4((uint64_t)(v9 + 16), (uint64_t)(v33 + 16));
    sub_4D90B4((uint64_t)(v9 + 36), (uint64_t)(v33 + 36));
    sub_4D90B4((uint64_t)(v9 + 56), (uint64_t)(v33 + 56));
    if (!v7) {
      break;
    }
    unint64_t v7 = (v7 - 1) >> 1;
    uint64_t v8 = (uint64_t *)(a1 + 608 * v7);
    uint64_t v32 = *v8;
    BOOL v39 = *((_DWORD *)v8 + 30) > v57;
    if (*v8 != v44) {
      BOOL v39 = *v8 < v44;
    }
    int v9 = v33;
  }
  while (v39);
  int v40 = (void **)(v33 + 7);
  *uint64_t v33 = v44;
  sub_4F377C(v34, (uint64_t)&v45);
  v33[6] = v50;
  if (*((char *)v33 + 79) < 0) {
    operator delete(*v40);
  }
  uint64_t v41 = (void **)(v33 + 11);
  *(_OWORD *)int v40 = *(_OWORD *)v51;
  v33[9] = v52;
  HIBYTE(v52) = 0;
  LOBYTE(v51[0]) = 0;
  *((unsigned char *)v33 + 80) = v53;
  if (*((char *)v33 + 111) < 0) {
    operator delete(*v41);
  }
  *(_OWORD *)uint64_t v41 = *(_OWORD *)__p;
  v33[13] = v55;
  HIBYTE(v55) = 0;
  LOBYTE(__p[0]) = 0;
  *((unsigned char *)v33 + 112) = v56;
  *((_DWORD *)v33 + 30) = v57;
  sub_4D90B4((uint64_t)(v33 + 16), (uint64_t)&v58);
  sub_4D90B4((uint64_t)(v33 + 36), (uint64_t)&v73);
  sub_4D90B4((uint64_t)(v33 + 56), (uint64_t)&v88);
  sub_4D4B58((uint64_t)&v88);
  sub_4D4B58((uint64_t)&v73);
  sub_4D4B58((uint64_t)&v58);
  if ((SHIBYTE(v55) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v52) & 0x80000000) == 0) {
      goto LABEL_20;
    }
LABEL_25:
    operator delete(v51[0]);
    unsigned int v42 = v49;
    if (v49 != 1) {
      goto LABEL_21;
    }
LABEL_26:
    uint64_t v43 = v46;
    if (!v46) {
      return;
    }
    long long v47 = v46;
    goto LABEL_28;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v52) < 0) {
    goto LABEL_25;
  }
LABEL_20:
  unsigned int v42 = v49;
  if (v49 == 1) {
    goto LABEL_26;
  }
LABEL_21:
  if (!v42 && v48 < 0)
  {
    uint64_t v43 = v46;
LABEL_28:
    operator delete(v43);
  }
}

void sub_5E979C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_58CC(a1);
}

void sub_5E97A8(double **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((unsigned char *)*a1 + 7))
  {
    double v4 = *a1[1];
    sub_5F3B74((uint64_t)__p, (__int16 *)(*((void *)v2 + 11) + 1177));
    uint64_t v5 = (std::string **)(a2 + 320);
    sub_4D90B4((uint64_t)v5, (uint64_t)__p);
    sub_4D4B58((uint64_t)__p);
    uint64_t v6 = *((void *)v2 + 13);
    *(void *)std::string __p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_20B8890;
    strcpy(*(char **)__p, "Annotation_Metadata_SteepHill");
    unint64_t v7 = sub_8D7730(v6, (uint64_t)__p);
    double v8 = fabs(round(v4 * 100.0));
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    sub_5F41E8((uint64_t)v5, (uint64_t)v7);
    if (*(unsigned __int8 *)(*((void *)v2 + 11) + 1177) >= 0xDu)
    {
      sub_5F71A4((uint64_t)v5, (uint64_t)&xmmword_25843D0, (float)v8);
      return;
    }
    int v9 = *v5;
    std::to_string(&v25, v8);
    uint64_t v10 = std::string::append(&v25, " pct");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    *(void *)&__p[16] = *((void *)&v10->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type size = (char *)HIBYTE(v9->__r_.__value_.__r.__words[2]);
    if ((char)size >= 0) {
      std::string::size_type v13 = (std::string::size_type)v9;
    }
    else {
      std::string::size_type v13 = v9->__r_.__value_.__r.__words[0];
    }
    if (byte_25843E7 >= 0) {
      uint64_t v14 = &xmmword_25843D0;
    }
    else {
      uint64_t v14 = (long long *)xmmword_25843D0;
    }
    if (byte_25843E7 >= 0) {
      int64_t v15 = byte_25843E7;
    }
    else {
      int64_t v15 = *((void *)&xmmword_25843D0 + 1);
    }
    if (v15)
    {
      if ((char)size < 0) {
        std::string::size_type size = (char *)v9->__r_.__value_.__l.__size_;
      }
      if ((uint64_t)size >= v15)
      {
        uint64_t v16 = &size[v13];
        int v17 = *(char *)v14;
        uint64_t v18 = (void *)v13;
        do
        {
          uint64_t v19 = &size[-v15];
          if (v19 == (char *)-1) {
            break;
          }
          uint64_t v20 = (char *)memchr(v18, v17, (size_t)(v19 + 1));
          if (!v20) {
            break;
          }
          uint64_t v21 = v20;
          if (!memcmp(v20, v14, v15))
          {
            if (v21 != v16)
            {
              std::string::size_type v22 = (std::string::size_type)&v21[-v13];
              if (&v21[-v13] != (char *)-1) {
                goto LABEL_26;
              }
            }
            break;
          }
          uint64_t v18 = v21 + 1;
          std::string::size_type size = (char *)(v16 - (v21 + 1));
        }
        while ((uint64_t)size >= v15);
      }
    }
    else
    {
      std::string::size_type v22 = 0;
LABEL_26:
      if (__p[23] >= 0) {
        int v23 = __p;
      }
      else {
        int v23 = *(const std::string::value_type **)__p;
      }
      if (__p[23] >= 0) {
        std::string::size_type v24 = __p[23];
      }
      else {
        std::string::size_type v24 = *(void *)&__p[8];
      }
      std::string::replace(v9, v22, v15, v23, v24);
    }
    if ((__p[23] & 0x80000000) == 0)
    {
      if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_37:
      operator delete(v25.__r_.__value_.__l.__data_);
      return;
    }
    operator delete(*(void **)__p);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_37;
    }
  }
}

void sub_5E9A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

char *sub_5E9A60()
{
  byte_2580AC7 = 1;
  word_2580AB0 = 65;
  byte_2580ADF = 1;
  word_2580AC8 = 65;
  byte_2580AF7 = 8;
  strcpy((char *)&qword_2580AE0, "any_mode");
  byte_2580B0F = 7;
  strcpy((char *)&dword_2580AF8, "cycling");
  byte_2580B27 = 7;
  strcpy((char *)&dword_2580B10, "driving");
  byte_2580B3F = 7;
  strcpy((char *)&dword_2580B28, "walking");
  strcpy(&byte_2580B57, "\n\x1B\\toi=orth\\"");
  strcpy((char *)&qword_2580B40, "\x1B\\toi=lhp\\"");
  byte_2580B6F = 11;
  qword_2580B70 = (uint64_t)operator new(0x19uLL);
  long long v281 = xmmword_20B9250;
  unk_2580B78 = xmmword_20B9250;
  strcpy((char *)qword_2580B70, "\x1B\\toi=x-sampa-internal\\"");
  byte_2580B9F = 13;
  strcpy((char *)&qword_2580B88, "\x1B\\tn=address\\"");
  strcpy(&byte_2580BB7, "\t\x1B\\tn=normal\\"");
  strcpy((char *)&qword_2580BA0, "\x1B\\tn=nav\\"");
  byte_2580BCF = 12;
  byte_2580BE7 = 7;
  strcpy((char *)&dword_2580BD0, "\x1B\\lang=");
  byte_2580BFF = 1;
  word_2580BE8 = 92;
  byte_2580C17 = 4;
  strcpy((char *)&qword_2580C00, "DEV:");
  byte_2580C2F = 8;
  strcpy((char *)&qword_2580C18, "Continue");
  byte_2580C47 = 11;
  strcpy((char *)&qword_2580C30, "Start_Route");
  byte_2580C5F = 14;
  strcpy((char *)&qword_2580C48, "Continue_Route");
  byte_2580C77 = 12;
  strcpy((char *)&qword_2580C60, "Resume_Route");
  byte_2580C8F = 18;
  strcpy((char *)&xmmword_2580C78, "Start_Route_U_Turn");
  byte_2580CA7 = 7;
  strcpy((char *)&dword_2580C90, "_U_Turn");
  qword_2580CB8 = 0x1300000000000000;
  dword_2580CB0 = 1702131055;
  qword_2580CA8 = *(void *)"Resume_Route";
  *(int *)((char *)&dword_2580CB4 + 3) = 1852994900;
  dword_2580CB4 = 1415533919;
  HIDWORD(qword_2580CD0) = 352321536;
  strcpy((char *)&qword_2580CC0, "Continue_Route_U");
  *(_DWORD *)((char *)&qword_2580CD0 + 1) = 1852994900;
  strcpy(&byte_2580CEF, "\tRight_Turn");
  strcpy((char *)&qword_2580CD8, "Left_Turn");
  strcpy(&byte_2580D07, "\nLeft_Turn_At_End");
  byte_2580D1F = 16;
  byte_2580D37 = 17;
  strcpy((char *)&xmmword_2580D20, "Right_Turn_At_End");
  byte_2580D4F = 15;
  strcpy((char *)&qword_2580D38, "Sharp_Left_Turn");
  byte_2580D67 = 16;
  strcpy((char *)&xmmword_2580D50, "Sharp_Right_Turn");
  byte_2580D7F = 16;
  strcpy((char *)&xmmword_2580D68, "Slight_Left_Turn");
  byte_2580D97 = 17;
  strcpy((char *)&xmmword_2580D80, "Slight_Right_Turn");
  strcpy(&byte_2580DAF, "\tKeep_Right");
  strcpy((char *)&qword_2580D98, "Keep_Left");
  strcpy(&byte_2580DC7, "\nU_Turn");
  byte_2580DDF = 6;
  byte_2580DF7 = 14;
  strcpy((char *)&qword_2580DE0, "Walking_U_Turn");
  byte_2580E0F = 20;
  strcpy((char *)&xmmword_2580DF8, "U_Turn_When_Possible");
  byte_2580E27 = 20;
  strcpy((char *)&xmmword_2580E10, "U_Turn_At_Roundabout");
  byte_2580E3F = 11;
  strcpy((char *)&qword_2580E28, "Enter_Ferry");
  strcpy(&byte_2580E57, "\nChange_Ferry");
  strcpy((char *)&qword_2580E40, "Exit_Ferry");
  strcpy((char *)&xmmword_2580E70, "Enter_Railway_Shuttle");
  strcpy((char *)&xmmword_2580E88, "Exit_Railway_Shuttle");
  strcpy((char *)&xmmword_2580EA0, "Change_Railway_Shuttle");
  strcpy((char *)&xmmword_2580EB8, "End_Of_Navigation");
  strcpy((char *)&xmmword_2580ED0, "End_Of_Navigation");
  strcpy((char *)&qword_2580EE8, "Destination");
  strcpy((char *)&xmmword_2580F00, "Destination_On_left");
  strcpy((char *)&xmmword_2580F18, "Destination_On_Right");
  strcpy((char *)&xmmword_2580F60, "First_Stop_On_Right");
  strcpy((char *)&xmmword_2580FA8, "Next_Stop_On_Right");
  byte_2580E6F = 12;
  byte_2580E87 = 21;
  byte_2580E9F = 20;
  strcpy((char *)&xmmword_2580FD8, "Waypoint_Stop_On_Left");
  byte_2580EB7 = 22;
  byte_2580ECF = 17;
  byte_2580EE7 = 17;
  byte_2580EFF = 11;
  byte_2580F17 = 19;
  byte_2580F2F = 20;
  strcpy(&byte_2580F47, "\nFirst_Stop_On_left");
  *(void *)&v269[0] = *(void *)"First_Stop";
  strcpy((char *)&qword_2580F30, "First_Stop");
  byte_2580F5F = 18;
  byte_2580F77 = 19;
  strcpy(&byte_2580F8F, "\tNext_Stop_On_left");
  strcpy((char *)&qword_2580FC0, "Waypoint_Stop");
  strcpy((char *)&xmmword_2580FF0, "Waypoint_Stop_On_Right");
  strcpy((char *)&qword_2581008, "Roundabout_");
  *(void *)&v265[48] = *(void *)"Next_Stop";
  strcpy((char *)&qword_2580F78, "Next_Stop");
  byte_2580FA7 = 17;
  byte_2580FBF = 18;
  byte_2580FD7 = 13;
  byte_2580FEF = 21;
  byte_2581007 = 22;
  byte_258101F = 11;
  byte_2581037 = 16;
  strcpy((char *)&xmmword_2581020, "Enter_Roundabout");
  qword_2581038 = (uint64_t)operator new(0x20uLL);
  long long v280 = xmmword_20B91C0;
  xmmword_2581040 = xmmword_20B91C0;
  strcpy((char *)qword_2581038, "Walking_Enter_Roundabout");
  byte_2581067 = 16;
  strcpy((char *)&xmmword_2581050, "Leave_Roundabout");
  byte_258107F = 21;
  strcpy((char *)&xmmword_2581068, "Roundabout_First_Exit");
  byte_2581097 = 22;
  strcpy((char *)&xmmword_2581080, "Roundabout_Second_Exit");
  byte_25810AF = 21;
  strcpy((char *)&xmmword_2581098, "Roundabout_Third_Exit");
  strcpy((char *)&xmmword_25810B0, "Roundabout_Fourth_Exit");
  HIBYTE(word_25810C6) = 22;
  byte_25810DF = 21;
  strcpy((char *)&xmmword_25810C8, "Roundabout_Fifth_Exit");
  byte_25810F7 = 21;
  strcpy((char *)&xmmword_25810E0, "Roundabout_Sixth_Exit");
  qword_25810F8 = (uint64_t)operator new(0x19uLL);
  xmmword_2581100 = xmmword_20B9250;
  strcpy((char *)qword_25810F8, "Roundabout_Seventh_Exit");
  strcpy((char *)&xmmword_2581110, "Roundabout_Eighth_Exit");
  HIBYTE(word_2581126) = 22;
  byte_258113F = 21;
  strcpy((char *)&xmmword_2581128, "Roundabout_Ninth_Exit");
  byte_2581157 = 21;
  strcpy((char *)&xmmword_2581140, "Roundabout_Tenth_Exit");
  qword_2581158 = (uint64_t)operator new(0x20uLL);
  xmmword_2581160 = xmmword_20B91C0;
  strcpy((char *)qword_2581158, "Roundabout_Eleventh_Exit");
  qword_2581170 = (uint64_t)operator new(0x19uLL);
  unk_2581178 = xmmword_20B9250;
  strcpy((char *)qword_2581170, "Roundabout_Twelfth_Exit");
  qword_2581188 = (uint64_t)operator new(0x20uLL);
  long long v277 = xmmword_20B5EB0;
  xmmword_2581190 = xmmword_20B5EB0;
  strcpy((char *)qword_2581188, "Roundabout_Thirteenth_Exit");
  qword_25811A0 = (uint64_t)operator new(0x20uLL);
  unk_25811A8 = xmmword_20B5EB0;
  strcpy((char *)qword_25811A0, "Roundabout_Fourteenth_Exit");
  qword_25811B8 = (uint64_t)operator new(0x20uLL);
  long long v279 = xmmword_20B8870;
  xmmword_25811C0 = xmmword_20B8870;
  strcpy((char *)qword_25811B8, "Roundabout_Fifteenth_Exit");
  qword_25811D0 = (uint64_t)operator new(0x20uLL);
  unk_25811D8 = xmmword_20B8870;
  strcpy((char *)qword_25811D0, "Roundabout_Sixteenth_Exit");
  qword_25811E8 = (uint64_t)operator new(0x20uLL);
  long long v274 = xmmword_20B91A0;
  xmmword_25811F0 = xmmword_20B91A0;
  strcpy((char *)qword_25811E8, "Roundabout_Seventeenth_Exit");
  qword_2581200 = (uint64_t)operator new(0x20uLL);
  unk_2581208 = xmmword_20B5EB0;
  strcpy((char *)qword_2581200, "Roundabout_Eighteenth_Exit");
  qword_2581218 = (uint64_t)operator new(0x20uLL);
  xmmword_2581220 = xmmword_20B5EB0;
  strcpy((char *)qword_2581218, "Roundabout_Nineteenth_Exit");
  byte_2581247 = 8;
  strcpy((char *)&qword_2581230, "Off_Ramp");
  byte_258125F = 16;
  strcpy((char *)&xmmword_2581248, "Off_Ramp_On_Left");
  byte_2581277 = 17;
  strcpy((char *)&xmmword_2581260, "Off_Ramp_On_Right");
  byte_258128F = 14;
  strcpy((char *)&qword_2581278, "Change_Highway");
  strcpy((char *)&xmmword_2581290, "Change_Highway_On_Left");
  HIBYTE(word_25812A6) = 22;
  qword_25812A8 = (uint64_t)operator new(0x19uLL);
  xmmword_25812B0 = xmmword_20B9250;
  strcpy((char *)qword_25812A8, "Change_Highway_On_Right");
  byte_25812D7 = 5;
  dword_25812C0 = 1735550285;
  byte_25812C4 = 101;
  byte_25812C5 = 0;
  byte_25812EF = 12;
  strcpy((char *)&qword_25812D8, "Enter_Detour");
  byte_2581307 = 11;
  strcpy((char *)&qword_25812F0, "Exit_Detour");
  byte_258131F = 18;
  strcpy((char *)&xmmword_2581308, "Walking_Turnaround");
  qword_2581320 = (uint64_t)operator new(0x19uLL);
  unk_2581328 = xmmword_20B9250;
  strcpy((char *)qword_2581320, "Walking_Turnaround_Sign");
  byte_258134F = 19;
  strcpy((char *)&xmmword_2581338, "Distance_Title_List");
  qword_2581350 = (uint64_t)operator new(0x19uLL);
  unk_2581358 = xmmword_20B9250;
  long long v271 = *(_OWORD *)"Cross_The_Street_Spoken";
  strcpy((char *)qword_2581350, "Cross_The_Street_Spoken");
  *(void *)&v269[1] = *(void *)"t_Spoken";
  byte_258137F = 19;
  strcpy((char *)&xmmword_2581368, "Arrival_Charge_List");
  byte_2581397 = 15;
  strcpy((char *)&qword_2581380, "Charge_At_Start");
  strcpy(&byte_25813AF, "\tPass_Street");
  strcpy((char *)&qword_2581398, "Pass_Exit");
  byte_25813C7 = 11;
  byte_25813DF = 17;
  strcpy((char *)&xmmword_25813C8, "Pass_Intersection");
  strcpy(&byte_25813F7, "\t_PrevExitNumber");
  strcpy((char *)&qword_25813E0, "Next_Exit");
  byte_258140F = 15;
  strcpy(&byte_2581427, "\t_PrevUTurn");
  strcpy((char *)&qword_2581410, "_PrevRoad");
  strcpy(&byte_258143F, "\nNext_");
  byte_2581457 = 5;
  byte_258146F = 15;
  strcpy((char *)&qword_2581458, "_At_Next_Street");
  byte_2581487 = 21;
  strcpy((char *)&xmmword_2581470, "_At_Next_Intersection");
  byte_258149F = 14;
  strcpy((char *)&qword_2581488, "Charge_Station");
  byte_25814B7 = 15;
  strcpy((char *)&qword_25814A0, "_Charge_Station");
  BYTE1(qword_25814C8) = 0;
  WORD1(qword_25814C8) = 25856;
  HIDWORD(qword_25814C8) = 335544320;
  strcpy((char *)&qword_25814B8, "_Charge_Station_");
  byte_25814E7 = 8;
  strcpy((char *)&qword_25814D0, "_Minimum");
  byte_25814FF = 15;
  strcpy((char *)&qword_25814E8, "ExitShield_Sign");
  byte_2581517 = 8;
  strcpy((char *)&qword_2581500, "Walking_");
  byte_258152F = 16;
  strcpy((char *)&xmmword_2581518, "Walking_Continue");
  byte_2581547 = 19;
  strcpy((char *)&xmmword_2581530, "Walking_Start_Route");
  qword_2581548 = (uint64_t)operator new(0x20uLL);
  xmmword_2581550 = xmmword_20B5EB0;
  strcpy((char *)qword_2581548, "Walking_Start_Route_U_Turn");
  byte_2581577 = 17;
  strcpy((char *)&xmmword_2581560, "Walking_Left_Turn");
  byte_258158F = 18;
  strcpy((char *)&xmmword_2581578, "Walking_Right_Turn");
  qword_2581590 = (uint64_t)operator new(0x20uLL);
  unk_2581598 = xmmword_20B5EB0;
  strcpy((char *)qword_2581590, "Walking_Turn_At_Roundabout");
  qword_25815A8 = (uint64_t)operator new(0x20uLL);
  long long v278 = xmmword_20B91B0;
  xmmword_25815B0 = xmmword_20B91B0;
  strcpy((char *)qword_25815A8, "Walking_U_Turn_When_Possible");
  qword_25815C0 = (uint64_t)operator new(0x28uLL);
  long long v270 = xmmword_20B9390;
  unk_25815C8 = xmmword_20B9390;
  strcpy((char *)qword_25815C0, "Walking_Roundabout_Exit_Continue");
  qword_25815D8 = (uint64_t)operator new(0x20uLL);
  xmmword_25815E0 = xmmword_20B91B0;
  strcpy((char *)qword_25815D8, "Walking_Roundabout_Exit_Left");
  qword_25815F0 = (uint64_t)operator new(0x20uLL);
  long long v276 = xmmword_20B8890;
  unk_25815F8 = xmmword_20B8890;
  strcpy((char *)qword_25815F0, "Walking_Roundabout_Exit_Right");
  qword_2581608 = (uint64_t)operator new(0x20uLL);
  xmmword_2581610 = xmmword_20B8870;
  strcpy((char *)qword_2581608, "Walking_End_Of_Navigation");
  long long v273 = *(_OWORD *)"nd_Of_Navigation";
  uint64_t v0 = (char *)operator new(0x20uLL);
  qword_2581620 = (uint64_t)v0;
  unk_2581628 = xmmword_20B8870;
  *(_OWORD *)uint64_t v0 = *(_OWORD *)"Walking_End_Of_Navigation";
  *(_OWORD *)(v0 + 9) = v273;
  v0[25] = 0;
  byte_258164F = 8;
  strcpy((char *)&qword_2581638, "Walking_");
  qword_2581650 = (uint64_t)operator new(0x19uLL);
  unk_2581658 = v281;
  strcpy((char *)qword_2581650, "Walking_Sharp_Left_Turn");
  qword_2581668 = (uint64_t)operator new(0x20uLL);
  xmmword_2581670 = v280;
  strcpy((char *)qword_2581668, "Walking_Sharp_Right_Turn");
  qword_2581680 = (uint64_t)operator new(0x20uLL);
  unk_2581688 = v280;
  strcpy((char *)qword_2581680, "Walking_Slight_Left_Turn");
  qword_2581698 = (uint64_t)operator new(0x20uLL);
  xmmword_25816A0 = v279;
  strcpy((char *)qword_2581698, "Walking_Slight_Right_Turn");
  byte_25816C7 = 4;
  strcpy((char *)&dword_25816B0, "Exit");
  byte_25816DF = 4;
  strcpy((char *)&dword_25816C8, "Road");
  byte_25816F7 = 7;
  strcpy((char *)&dword_25816E0, "Freeway");
  byte_258170F = 12;
  strcpy((char *)&qword_25816F8, "Intersection");
  byte_2581727 = 5;
  strcpy((char *)&dword_2581710, "Ferry");
  byte_258173F = 11;
  strcpy((char *)&qword_2581728, "ShuttleName");
  byte_2581757 = 5;
  strcpy((char *)&dword_2581740, "Road1");
  strcpy(&byte_258176F, "\tName");
  strcpy((char *)&qword_2581758, "Signpost1");
  byte_2581787 = 4;
  byte_258179F = 7;
  strcpy((char *)&dword_2581788, "Address");
  byte_25817B7 = 7;
  strcpy((char *)&dword_25817A0, "Shield1");
  byte_25817CF = 13;
  strcpy((char *)&qword_25817B8, "TowardShield1");
  byte_25817E7 = 6;
  strcpy((char *)&dword_25817D0, "Right_");
  byte_25817FF = 5;
  byte_25817EC = 95;
  dword_25817E8 = 1952867660;
  byte_25817ED = 0;
  strcpy(&byte_2581817, "\tOn_Left_");
  strcpy((char *)&qword_2581800, "On_Right_");
  byte_258182F = 8;
  byte_2581847 = 12;
  strcpy((char *)&qword_2581830, "ElevatorName");
  byte_258185F = 13;
  strcpy((char *)&qword_2581848, "EscalatorName");
  strcpy(&byte_2581877, "\nBridgeName");
  strcpy((char *)&qword_2581860, "StairsName");
  strcpy(&byte_258188F, "\nTunnelName");
  strcpy(&byte_25818A7, "\nParking");
  byte_25818BF = 7;
  strcpy(&byte_25818D7, "\t_Escalator");
  strcpy((char *)&qword_25818C0, "_Elevator");
  strcpy(&byte_25818EF, "\n_ElevatorName");
  byte_2581907 = 13;
  byte_258191F = 14;
  strcpy((char *)&qword_2581908, "_EscalatorName");
  byte_2581937 = 5;
  strcpy((char *)&qword_2581920, "_Road");
  byte_258194F = 8;
  strcpy((char *)&qword_2581938, "_Freeway");
  byte_2581967 = 13;
  strcpy((char *)&qword_2581950, "_Intersection");
  byte_258197F = 6;
  strcpy((char *)&dword_2581968, "_Road1");
  byte_2581997 = 6;
  strcpy((char *)&dword_2581980, "_Road2");
  strcpy(&byte_25819AF, "\n_Signpost2");
  strcpy((char *)&qword_2581998, "_Signpost1");
  strcpy(&byte_25819C7, "\n_Ferry");
  byte_25819DF = 6;
  byte_25819F7 = 12;
  strcpy((char *)&qword_25819E0, "_Ferry_Ferry");
  byte_2581A0F = 12;
  strcpy((char *)&qword_25819F8, "_ShuttleName");
  qword_2581A10 = (uint64_t)operator new(0x20uLL);
  unk_2581A18 = v278;
  strcpy((char *)qword_2581A10, "_Railway_Shuttle_ShuttleName");
  byte_2581A3F = 11;
  strcpy((char *)&qword_2581A28, "_ExitNumber");
  byte_2581A57 = 5;
  dword_2581A40 = 1769489759;
  byte_2581A44 = 116;
  byte_2581A45 = 0;
  byte_2581A6F = 7;
  strcpy((char *)&dword_2581A58, "_StayOn");
  byte_2581A87 = 7;
  strcpy((char *)&dword_2581A70, "_Stairs");
  byte_2581A9F = 5;
  strcpy((char *)&dword_2581A88, "_Ramp");
  byte_2581AB7 = 11;
  strcpy((char *)&qword_2581AA0, "_StairsName");
  strcpy(&byte_2581ACF, "\t_Down");
  strcpy((char *)&qword_2581AB8, "_RampName");
  byte_2581AE7 = 5;
  byte_2581AFF = 3;
  dword_2581AE8 = 7361887;
  byte_2581B17 = 7;
  strcpy((char *)&xmmword_2581B00, "_Bridge");
  byte_2581B2F = 7;
  strcpy((char *)&xmmword_2581B18, "_Tunnel");
  byte_2581B47 = 11;
  strcpy((char *)&qword_2581B30, "_Roundabout");
  byte_2581B5F = 6;
  strcpy((char *)&dword_2581B48, "_Cross");
  byte_2581B77 = 8;
  strcpy((char *)&qword_2581B60, "_Parking");
  byte_2581B8F = 8;
  strcpy((char *)&qword_2581B78, "_Shield1");
  byte_2581BA7 = 14;
  strcpy((char *)&qword_2581B90, "_TowardShield1");
  byte_2581BBF = 8;
  strcpy((char *)&qword_2581BA8, "_Shield2");
  byte_2581BD7 = 14;
  strcpy((char *)&qword_2581BC0, "_TowardShield2");
  byte_2581BEF = 11;
  strcpy((char *)&qword_2581BD8, "_Direction1");
  byte_2581C07 = 11;
  strcpy((char *)&qword_2581BF0, "_Direction2");
  strcpy(&byte_2581C1F, "\n_TowardDirection1");
  strcpy((char *)&qword_2581C08, "Direction1");
  byte_2581C37 = 17;
  byte_2581C4F = 17;
  strcpy((char *)&xmmword_2581C38, "_TowardDirection2");
  byte_2581C67 = 16;
  strcpy((char *)&xmmword_2581C50, "TowardDirection1");
  byte_2581C7F = 7;
  strcpy((char *)&qword_2581C68, "_Spoken");
  byte_2581C97 = 5;
  strcpy((char *)&qword_2581C80, "_Sign");
  byte_2581CAF = 15;
  strcpy((char *)&qword_2581C98, "_Secondary_Sign");
  byte_2581CC7 = 5;
  byte_2581CB4 = 116;
  dword_2581CB0 = 1936280671;
  byte_2581CB5 = 0;
  byte_2581CDF = 8;
  strcpy((char *)&qword_2581CC8, "_Primary");
  qword_2581CF0 = 0xF00000000000000;
  strcpy((char *)&qword_2581CE0, "_Spoken_Primary");
  strcpy(&byte_2581D0F, "\n_Secondary");
  strcpy((char *)&qword_2581CF8, "_Secondary");
  strcpy(&byte_2581D27, "\n_Spoken_Secondar");
  BYTE1(qword_2581D38) = 0;
  WORD1(qword_2581D38) = 0;
  HIDWORD(qword_2581D38) = 285212672;
  byte_2581D57 = 13;
  strcpy((char *)&qword_2581D40, "_To_Secondary");
  BYTE1(qword_2581D68) = 0;
  WORD1(qword_2581D68) = 0;
  HIDWORD(qword_2581D68) = 335544320;
  strcpy((char *)&dword_2581D58, "_Spoken_To_Secon");
  strcpy(&byte_2581D87, "\t_ValidDistance");
  strcpy((char *)&qword_2581D70, "_Distance");
  byte_2581D9F = 14;
  byte_2581DB7 = 6;
  strcpy((char *)&dword_2581DA0, "_Short");
  byte_2581DCF = 1;
  word_2581DB8 = 95;
  qword_2581DD0 = (uint64_t)operator new(0x20uLL);
  unk_2581DD8 = v280;
  strcpy((char *)qword_2581DD0, "Concatenate_Newline_Sign");
  uint64_t v1 = (char *)operator new(0x19uLL);
  qword_2581DE8 = (uint64_t)v1;
  xmmword_2581DF0 = v281;
  *(_OWORD *)uint64_t v1 = v271;
  uint64_t v2 = *(void *)&v269[1];
  *(void *)(v1 + 15) = *(void *)&v269[1];
  v1[23] = 0;
  byte_2581E17 = 12;
  strcpy((char *)&qword_2581E00, "Chain_Spoken");
  byte_2581E2F = 15;
  strcpy((char *)&qword_2581E18, "Chain_To_Spoken");
  strcpy(&byte_2581E47, "\nThen_Spoken");
  strcpy((char *)&qword_2581E30, "And_Spoken");
  byte_2581E5F = 11;
  byte_2581E77 = 18;
  strcpy((char *)&xmmword_2581E60, "Concatenate_Spoken");
  qword_2581E78 = (uint64_t)operator new(0x28uLL);
  long long v268 = xmmword_20B9240;
  xmmword_2581E80 = xmmword_20B9240;
  strcpy((char *)qword_2581E78, "At_Traffic_Light_Chain_Spoken_Primary");
  qword_2581E90 = (uint64_t)operator new(0x28uLL);
  v269[2] = xmmword_20B9260;
  unk_2581E98 = xmmword_20B9260;
  strcpy((char *)qword_2581E90, "At_Stop_Sign_Chain_Spoken_Primary");
  qword_2581EA8 = (uint64_t)operator new(0x40uLL);
  xmmword_2581EB0 = xmmword_20B9A90;
  strcpy((char *)qword_2581EA8, "At_Stop_Sign_Cross_Traffic_Doesnt_Stop_Chain_Spoken_Primary");
  qword_2581EC0 = (uint64_t)operator new(0x30uLL);
  long long v267 = xmmword_20B9A40;
  unk_2581EC8 = xmmword_20B9A40;
  strcpy((char *)qword_2581EC0, "At_Next_Traffic_Light_Chain_Spoken_Primary");
  qword_2581ED8 = (uint64_t)operator new(0x28uLL);
  long long v266 = xmmword_20E12D0;
  xmmword_2581EE0 = xmmword_20E12D0;
  strcpy((char *)qword_2581ED8, "At_Next_Stop_Sign_Chain_Spoken_Primary");
  qword_2581EF0 = (uint64_t)operator new(0x28uLL);
  long long v275 = xmmword_20B9960;
  unk_2581EF8 = xmmword_20B9960;
  strcpy((char *)qword_2581EF0, "At_Traffic_Light_Chain_Spoken_Secondary");
  qword_2581F08 = (uint64_t)operator new(0x28uLL);
  xmmword_2581F10 = xmmword_20B93A0;
  strcpy((char *)qword_2581F08, "At_Stop_Sign_Chain_Spoken_Secondary");
  qword_2581F20 = (uint64_t)operator new(0x30uLL);
  long long v273 = xmmword_20E1380;
  unk_2581F28 = xmmword_20E1380;
  strcpy((char *)qword_2581F20, "At_Next_Traffic_Light_Chain_Spoken_Secondary");
  qword_2581F38 = (uint64_t)operator new(0x30uLL);
  xmmword_2581F40 = xmmword_20B93C0;
  strcpy((char *)qword_2581F38, "At_Next_Stop_Sign_Chain_Spoken_Secondary");
  qword_2581F50 = (uint64_t)operator new(0x38uLL);
  unk_2581F58 = xmmword_20B9A60;
  strcpy((char *)qword_2581F50, "At_Next_One_Traffic_Light_Chain_Spoken_Secondary");
  qword_2581F68 = (uint64_t)operator new(0x30uLL);
  xmmword_2581F70 = xmmword_20E1380;
  strcpy((char *)qword_2581F68, "At_Next_One_Stop_Sign_Chain_Spoken_Secondary");
  qword_2581F80 = (uint64_t)operator new(0x28uLL);
  unk_2581F88 = xmmword_20B9960;
  strcpy((char *)qword_2581F80, "At_Mini_Roundabout_Chain_Spoken_Primary");
  qword_2581F98 = (uint64_t)operator new(0x30uLL);
  long long v272 = xmmword_20B93D0;
  xmmword_2581FA0 = xmmword_20B93D0;
  strcpy((char *)qword_2581F98, "At_Mini_Roundabout_Chain_Spoken_Secondary");
  qword_2581FB0 = (uint64_t)operator new(0x20uLL);
  unk_2581FB8 = v276;
  strcpy((char *)qword_2581FB0, "Walking_Distance_Chain_Spoken");
  qword_2581FC8 = (uint64_t)operator new(0x20uLL);
  xmmword_2581FD0 = v276;
  strcpy((char *)qword_2581FC8, "Walking_Continue_Chain_Spoken");
  uint64_t v3 = (char *)operator new(0x19uLL);
  qword_2581FE0 = (uint64_t)v3;
  unk_2581FE8 = v281;
  *(_OWORD *)uint64_t v3 = v271;
  *(void *)(v3 + 15) = v2;
  v3[23] = 0;
  qword_2581FF8 = (uint64_t)operator new(0x28uLL);
  xmmword_2582000 = v270;
  strcpy((char *)qword_2581FF8, "Distance_Cross_The_Street_Spoken");
  byte_2582027 = 22;
  strcpy((char *)&xmmword_2582010, "Walking_Continue_Cross");
  byte_258203F = 14;
  strcpy((char *)&qword_2582028, "Continue_Cross");
  byte_2582057 = 5;
  strcpy((char *)&dword_2582040, "Cross");
  byte_258206F = 19;
  strcpy((char *)&xmmword_2582058, "Cross_Street_Spoken");
  byte_2582087 = 17;
  strcpy((char *)&xmmword_2582070, "Cross_Road_Spoken");
  byte_258209F = 20;
  strcpy((char *)&xmmword_2582088, "Use_Crosswalk_Spoken");
  byte_25820B7 = 15;
  strcpy((char *)&qword_25820A0, "Distance_Spoken");
  byte_25820CF = 19;
  strcpy((char *)&xmmword_25820B8, "Distance_And_Spoken");
  byte_25820E7 = 21;
  strcpy((char *)&xmmword_25820D0, "Continue_Stage_Spoken");
  byte_25820FF = 13;
  qmemcpy(&qword_25820E8, "ContinueStage", 13);
  int v4 = SHIBYTE(qword_2581CF0);
  if (qword_2581CF0 >= 0) {
    size_t v5 = HIBYTE(qword_2581CF0);
  }
  else {
    size_t v5 = unk_2581CE8;
  }
  unint64_t v6 = v5 + 13;
  byte_25820F5 = 0;
  if (v5 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v10 = operator new(v8 + 1);
    qword_2582108 = v5 + 13;
    unk_2582110 = v9 | 0x8000000000000000;
    qword_2582100 = (uint64_t)v10;
    *uint64_t v10 = *(void *)"ContinueStage";
    unint64_t v7 = (char *)v10 + 13;
    *(void *)((char *)v10 + 5) = *(void *)"nueStage";
  }
  else
  {
    BYTE1(qword_2582108) = 0;
    WORD1(qword_2582108) = 0;
    HIDWORD(qword_2582108) = 0;
    unk_2582110 = 0;
    byte_2582117 = v5 + 13;
    unint64_t v7 = (char *)&qword_2582108 + 5;
    strcpy((char *)&qword_2582100, "Continue");
    if (!v5) {
      goto LABEL_15;
    }
  }
  if (v4 >= 0) {
    long long v11 = &qword_2581CE0;
  }
  else {
    long long v11 = (uint64_t *)qword_2581CE0;
  }
  memmove(v7, v11, v5);
LABEL_15:
  v7[v5] = 0;
  int v12 = byte_2581937;
  if (byte_2581937 >= 0) {
    size_t v13 = byte_2581937;
  }
  else {
    size_t v13 = qword_2581928;
  }
  unint64_t v14 = v13 + 13;
  if (v13 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v14 >= 0x17)
  {
    uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v16 = v14 | 7;
    }
    uint64_t v17 = v16 + 1;
    uint64_t v18 = operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v13 + 13;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    *uint64_t v18 = qword_25820E8;
    *(void *)((char *)v18 + 5) = *(uint64_t *)((char *)&qword_25820E8 + 5);
    int64_t v15 = (char *)v18 + 13;
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 5) = *(uint64_t *)((char *)&qword_25820E8 + 5);
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13 + 13;
    __dst.__r_.__value_.__r.__words[0] = qword_25820E8;
    int64_t v15 = &__dst.__r_.__value_.__s.__data_[13];
    if (!v13) {
      goto LABEL_29;
    }
  }
  if (v12 >= 0) {
    uint64_t v19 = &qword_2581920;
  }
  else {
    uint64_t v19 = (uint64_t *)qword_2581920;
  }
  memmove(v15, v19, v13);
LABEL_29:
  v15[v13] = 0;
  if (v4 >= 0) {
    uint64_t v20 = (const std::string::value_type *)&qword_2581CE0;
  }
  else {
    uint64_t v20 = (const std::string::value_type *)qword_2581CE0;
  }
  uint64_t v21 = std::string::append(&__dst, v20, v5);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  qword_2582128 = v21->__r_.__value_.__r.__words[2];
  xmmword_2582118 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  byte_2582147 = 5;
  strcpy((char *)&dword_2582130, "Merge");
  qword_2582148 = (uint64_t)operator new(0x20uLL);
  v269[1] = xmmword_20B8E90;
  *(_OWORD *)algn_2582150 = xmmword_20B8E90;
  strcpy((char *)qword_2582148, "Continue_Freeway_Spoken_Primary");
  byte_2582177 = 8;
  strcpy((char *)&qword_2582160, "Starting");
  byte_258218F = 14;
  strcpy((char *)&qword_2582178, "Starting_Route");
  byte_25821A7 = 14;
  strcpy((char *)&qword_2582190, "Resuming_Route");
  byte_25821BF = 16;
  strcpy((char *)&xmmword_25821A8, "Continuing_Route");
  byte_25821D7 = 9;
  word_25821C8 = 112;
  qword_25821C0 = *(void *)&v265[48];
  strcpy(&byte_25821EF, "\nEnding");
  strcpy((char *)&word_25821E0, "op");
  qword_25821D8 = *(void *)&v269[0];
  byte_2582207 = 6;
  strcpy((char *)&qword_2582208, "_Destination");
  byte_258221F = 12;
  byte_2582237 = 15;
  strcpy((char *)&qword_2582220, "_At_Destination");
  std::operator+<char>();
  qword_2582250 = (uint64_t)operator new(0x20uLL);
  unk_2582258 = v280;
  strcpy((char *)qword_2582250, "Spoken_Ending_At_Parking");
  qword_2582268 = (uint64_t)operator new(0x20uLL);
  v269[0] = xmmword_20B9800;
  xmmword_2582270 = xmmword_20B9800;
  strcpy((char *)qword_2582268, "Spoken_Pre_Arrival_Destination");
  strcpy((char *)&xmmword_2582280, "Sign_Ending_At_Parking");
  HIBYTE(word_2582296) = 22;
  byte_25822AF = 4;
  strcpy((char *)&dword_2582298, "Home");
  byte_25822C7 = 4;
  strcpy((char *)&dword_25822B0, "Work");
  byte_25822DF = 8;
  strcpy((char *)&qword_25822C8, "Business");
  byte_25822F7 = 4;
  strcpy((char *)&dword_25822E0, "Name");
  byte_258230F = 13;
  strcpy((char *)&qword_25822F8, "Other_Contact");
  byte_2582327 = 11;
  strcpy((char *)&qword_2582310, "ContactHome");
  byte_258233F = 11;
  *(_DWORD *)((char *)&qword_2582328 + 7) = 1802661719;
  byte_2582357 = 7;
  *(int *)((char *)&dword_2582340 + 3) = 1936942450;
  dword_2582340 = 1919181889;
  strcpy((char *)&xmmword_2582358, "Discoverability_Prompt");
  HIBYTE(word_258236E) = 22;
  byte_2582387 = 6;
  dword_2582370 = 1634878303;
  word_2582374 = 26739;
  byte_258239F = 8;
  qword_2582388 = 0x697269535F6F4E5FLL;
  byte_25823B7 = 9;
  strcpy((char *)&qword_25823A0, "_CityName");
  byte_25823CF = 8;
  qword_25823B8 = 0x636972656E65475FLL;
  int v23 = byte_2582177;
  if (byte_2582177 >= 0) {
    size_t v24 = byte_2582177;
  }
  else {
    size_t v24 = qword_2582168;
  }
  LODWORD(v271) = byte_25814B7;
  if (byte_25814B7 >= 0) {
    size_t v25 = byte_25814B7;
  }
  else {
    size_t v25 = unk_25814A8;
  }
  qword_2582328 = *(void *)"ContactWork";
  byte_2582333 = 0;
  byte_2582347 = 0;
  byte_2582376 = 0;
  byte_2582390 = 0;
  byte_25823C0 = 0;
  unint64_t v26 = v25 + v24;
  if (v25 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  *(void *)v265 = *(void *)"ContactWork";
  *(void *)&v265[16] = *(void *)"ContactHome";
  *(void *)&v265[32] = *(void *)"_Contact";
  *(void *)&v265[48] = *(void *)"Other_Contact";
  if (v26 <= 0x16)
  {
    uint64_t v27 = &qword_25823D0;
    qword_25823D8 = 0;
    unk_25823E0 = 0;
    qword_25823D0 = 0;
    byte_25823E7 = v25 + v24;
    if (!v24) {
      goto LABEL_47;
    }
    goto LABEL_43;
  }
  uint64_t v90 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17) {
    uint64_t v90 = v26 | 7;
  }
  uint64_t v91 = v90 + 1;
  uint64_t v27 = (uint64_t *)operator new(v90 + 1);
  qword_25823D8 = v25 + v24;
  unk_25823E0 = v91 | 0x8000000000000000;
  qword_25823D0 = (uint64_t)v27;
  if (v24)
  {
LABEL_43:
    if (v23 >= 0) {
      uint64_t v28 = &qword_2582160;
    }
    else {
      uint64_t v28 = (uint64_t *)qword_2582160;
    }
    memmove(v27, v28, v24);
  }
LABEL_47:
  int v29 = (char *)v27 + v24;
  if (v25)
  {
    if ((int)v271 >= 0) {
      long long v30 = &qword_25814A0;
    }
    else {
      long long v30 = (uint64_t *)qword_25814A0;
    }
    memmove(v29, v30, v25);
  }
  v29[v25] = 0;
  int v31 = byte_258221F;
  if (byte_258221F >= 0) {
    size_t v32 = byte_258221F;
  }
  else {
    size_t v32 = qword_2582210;
  }
  unint64_t v33 = v32 + v24;
  if (v32 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v33 <= 0x16)
  {
    uint64_t v34 = &qword_25823E8;
    qword_25823F0 = 0;
    unk_25823F8 = 0;
    qword_25823E8 = 0;
    byte_25823FF = v32 + v24;
    if (!v24) {
      goto LABEL_62;
    }
    goto LABEL_58;
  }
  uint64_t v92 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v92 = v33 | 7;
  }
  uint64_t v93 = v92 + 1;
  uint64_t v34 = (uint64_t *)operator new(v92 + 1);
  qword_25823F0 = v32 + v24;
  unk_25823F8 = v93 | 0x8000000000000000;
  qword_25823E8 = (uint64_t)v34;
  if (v24)
  {
LABEL_58:
    if (v23 >= 0) {
      long long v35 = &qword_2582160;
    }
    else {
      long long v35 = (uint64_t *)qword_2582160;
    }
    memmove(v34, v35, v24);
  }
LABEL_62:
  long long v36 = (char *)v34 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      uint64_t v37 = &qword_2582208;
    }
    else {
      uint64_t v37 = (uint64_t *)qword_2582208;
    }
    memmove(v36, v37, v32);
  }
  v36[v32] = 0;
  qword_2582400 = (uint64_t)operator new(0x19uLL);
  unk_2582408 = v281;
  strcpy((char *)qword_2582400, "{ChargeStationCityName}");
  if (v33 < 0x17)
  {
    long long v38 = &qword_2582418;
    qword_2582420 = 0;
    unk_2582428 = 0;
    qword_2582418 = 0;
    byte_258242F = v32 + v24;
    if (!v24) {
      goto LABEL_73;
    }
    goto LABEL_69;
  }
  uint64_t v94 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v94 = v33 | 7;
  }
  uint64_t v95 = v94 + 1;
  long long v38 = (uint64_t *)operator new(v94 + 1);
  qword_2582420 = v32 + v24;
  unk_2582428 = v95 | 0x8000000000000000;
  qword_2582418 = (uint64_t)v38;
  if (v24)
  {
LABEL_69:
    if (v23 >= 0) {
      BOOL v39 = &qword_2582160;
    }
    else {
      BOOL v39 = (uint64_t *)qword_2582160;
    }
    memmove(v38, v39, v24);
  }
LABEL_73:
  int v40 = (char *)v38 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      uint64_t v41 = &qword_2582208;
    }
    else {
      uint64_t v41 = (uint64_t *)qword_2582208;
    }
    memmove(v40, v41, v32);
  }
  v40[v32] = 0;
  strcpy((char *)&xmmword_2582430, "{NewBatteryPercentage}");
  HIBYTE(word_2582446) = 22;
  qword_2582448 = (uint64_t)operator new(0x20uLL);
  xmmword_2582450 = v274;
  strcpy((char *)qword_2582448, "{OriginalBatteryPercentage}");
  byte_2582477 = 19;
  strcpy((char *)&xmmword_2582460, "_Arrival_Percentage");
  int v42 = byte_2582207;
  if (byte_2582207 >= 0) {
    size_t v43 = byte_2582207;
  }
  else {
    size_t v43 = qword_25821F8;
  }
  unint64_t v44 = v43 + v25;
  if (v43 + v25 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v44 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v43 + v25;
    if (!v43) {
      goto LABEL_88;
    }
    goto LABEL_84;
  }
  uint64_t v96 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v44 | 7) != 0x17) {
    uint64_t v96 = v44 | 7;
  }
  uint64_t v97 = v96 + 1;
  p_dst = (char *)operator new(v96 + 1);
  __dst.__r_.__value_.__l.__size_ = v43 + v25;
  __dst.__r_.__value_.__r.__words[2] = v97 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v43)
  {
LABEL_84:
    if (v42 >= 0) {
      long long v46 = &qword_25821F0;
    }
    else {
      long long v46 = (uint64_t *)qword_25821F0;
    }
    memmove(p_dst, v46, v43);
  }
LABEL_88:
  long long v47 = &p_dst[v43];
  if (v25)
  {
    if ((int)v271 >= 0) {
      char v48 = &qword_25814A0;
    }
    else {
      char v48 = (uint64_t *)qword_25814A0;
    }
    memmove(v47, v48, v25);
  }
  v47[v25] = 0;
  unsigned int v49 = std::string::append(&__dst, "_Percentage");
  long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  qword_2582488 = v49->__r_.__value_.__r.__words[2];
  xmmword_2582478 = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v51 = byte_2582207;
  if (byte_2582207 >= 0) {
    size_t v52 = byte_2582207;
  }
  else {
    size_t v52 = qword_25821F8;
  }
  int v53 = byte_25814B7;
  if (byte_25814B7 >= 0) {
    size_t v54 = byte_25814B7;
  }
  else {
    size_t v54 = unk_25814A8;
  }
  unint64_t v55 = v54 + v52;
  if (v54 + v52 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v55 <= 0x16)
  {
    memset(&v282, 0, sizeof(v282));
    char v56 = (char *)&v282;
    *((unsigned char *)&v282.__r_.__value_.__s + 23) = v54 + v52;
    if (!v52) {
      goto LABEL_108;
    }
    goto LABEL_104;
  }
  uint64_t v98 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v55 | 7) != 0x17) {
    uint64_t v98 = v55 | 7;
  }
  uint64_t v99 = v98 + 1;
  char v56 = (char *)operator new(v98 + 1);
  v282.__r_.__value_.__l.__size_ = v54 + v52;
  v282.__r_.__value_.__r.__words[2] = v99 | 0x8000000000000000;
  v282.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  if (v52)
  {
LABEL_104:
    if (v51 >= 0) {
      unsigned int v57 = &qword_25821F0;
    }
    else {
      unsigned int v57 = (uint64_t *)qword_25821F0;
    }
    memmove(v56, v57, v52);
  }
LABEL_108:
  long long v58 = &v56[v52];
  if (v54)
  {
    if (v53 >= 0) {
      uint64_t v59 = &qword_25814A0;
    }
    else {
      uint64_t v59 = (uint64_t *)qword_25814A0;
    }
    memmove(v58, v59, v54);
  }
  v58[v54] = 0;
  if (byte_25814E7 >= 0) {
    long long v60 = (const std::string::value_type *)&qword_25814D0;
  }
  else {
    long long v60 = (const std::string::value_type *)qword_25814D0;
  }
  if (byte_25814E7 >= 0) {
    std::string::size_type v61 = byte_25814E7;
  }
  else {
    std::string::size_type v61 = *(void *)&byte_25814D8;
  }
  long long v62 = std::string::append(&v282, v60, v61);
  long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  long long v64 = std::string::append(&__dst, "_Percentage");
  long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  qword_25824A0 = v64->__r_.__value_.__r.__words[2];
  xmmword_2582490 = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v282.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_121;
    }
  }
  else if ((SHIBYTE(v282.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_121;
  }
  operator delete(v282.__r_.__value_.__l.__data_);
LABEL_121:
  int v66 = byte_2582207;
  if (byte_2582207 >= 0) {
    size_t v67 = byte_2582207;
  }
  else {
    size_t v67 = qword_25821F8;
  }
  int v68 = byte_25814B7;
  if (byte_25814B7 >= 0) {
    size_t v69 = byte_25814B7;
  }
  else {
    size_t v69 = unk_25814A8;
  }
  unint64_t v70 = v69 + v67;
  if (v69 + v67 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v70 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    long long v71 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v69 + v67;
    if (!v67) {
      goto LABEL_134;
    }
    goto LABEL_130;
  }
  uint64_t v100 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v70 | 7) != 0x17) {
    uint64_t v100 = v70 | 7;
  }
  uint64_t v101 = v100 + 1;
  long long v71 = (char *)operator new(v100 + 1);
  __dst.__r_.__value_.__l.__size_ = v69 + v67;
  __dst.__r_.__value_.__r.__words[2] = v101 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
  if (v67)
  {
LABEL_130:
    if (v66 >= 0) {
      uint64_t v72 = &qword_25821F0;
    }
    else {
      uint64_t v72 = (uint64_t *)qword_25821F0;
    }
    memmove(v71, v72, v67);
  }
LABEL_134:
  long long v73 = &v71[v67];
  if (v69)
  {
    if (v68 >= 0) {
      uint64_t v74 = &qword_25814A0;
    }
    else {
      uint64_t v74 = (uint64_t *)qword_25814A0;
    }
    memmove(v73, v74, v69);
  }
  v73[v69] = 0;
  long long v75 = std::string::append(&__dst, "_Duration");
  long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
  qword_25824B8 = v75->__r_.__value_.__r.__words[2];
  xmmword_25824A8 = v76;
  v75->__r_.__value_.__l.__size_ = 0;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v77 = byte_2582207;
  if (byte_2582207 >= 0) {
    size_t v78 = byte_2582207;
  }
  else {
    size_t v78 = qword_25821F8;
  }
  int v79 = byte_25814B7;
  if (byte_25814B7 >= 0) {
    size_t v80 = byte_25814B7;
  }
  else {
    size_t v80 = unk_25814A8;
  }
  unint64_t v81 = v80 + v78;
  if (v80 + v78 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v81 <= 0x16)
  {
    qword_25824C8 = 0;
    unk_25824D0 = 0;
    qword_25824C0 = 0;
    int v82 = &qword_25824C0;
    byte_25824D7 = v80 + v78;
    if (!v78) {
      goto LABEL_154;
    }
    goto LABEL_150;
  }
  uint64_t v102 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v81 | 7) != 0x17) {
    uint64_t v102 = v81 | 7;
  }
  uint64_t v103 = v102 + 1;
  int v82 = (uint64_t *)operator new(v102 + 1);
  qword_25824C8 = v80 + v78;
  unk_25824D0 = v103 | 0x8000000000000000;
  qword_25824C0 = (uint64_t)v82;
  if (v78)
  {
LABEL_150:
    if (v77 >= 0) {
      char v83 = &qword_25821F0;
    }
    else {
      char v83 = (uint64_t *)qword_25821F0;
    }
    memmove(v82, v83, v78);
  }
LABEL_154:
  long long v84 = (char *)v82 + v78;
  if (v80)
  {
    if (v79 >= 0) {
      uint64_t v85 = &qword_25814A0;
    }
    else {
      uint64_t v85 = (uint64_t *)qword_25814A0;
    }
    memmove(v84, v85, v80);
  }
  v84[v80] = 0;
  int v86 = byte_25824D7;
  if (byte_25824D7 >= 0) {
    size_t v87 = byte_25824D7;
  }
  else {
    size_t v87 = qword_25824C8;
  }
  unint64_t v88 = v87 + 5;
  if (v87 + 5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v88 >= 0x17)
  {
    uint64_t v104 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v88 | 7) != 0x17) {
      uint64_t v104 = v88 | 7;
    }
    uint64_t v105 = v104 + 1;
    uint64_t v89 = (uint64_t *)operator new(v104 + 1);
    qword_25824E0 = v87 + 5;
    unk_25824E8 = v105 | 0x8000000000000000;
    qword_25824D8 = (uint64_t)v89;
  }
  else
  {
    uint64_t v89 = &qword_25824D8;
    qword_25824E0 = 0;
    unk_25824E8 = 0;
    qword_25824D8 = 0;
    byte_25824EF = v87 + 5;
    if (!v87) {
      goto LABEL_201;
    }
  }
  if (v86 >= 0) {
    uint64_t v106 = &qword_25824C0;
  }
  else {
    uint64_t v106 = (uint64_t *)qword_25824C0;
  }
  memmove(v89, v106, v87);
LABEL_201:
  strcpy((char *)v89 + v87, "_Name");
  int v107 = byte_2582207;
  if (byte_2582207 >= 0) {
    size_t v108 = byte_2582207;
  }
  else {
    size_t v108 = qword_25821F8;
  }
  int v109 = byte_25814B7;
  if (byte_25814B7 >= 0) {
    size_t v110 = byte_25814B7;
  }
  else {
    size_t v110 = unk_25814A8;
  }
  unint64_t v111 = v110 + v108;
  if (v110 + v108 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v111 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    uint64_t v112 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v110 + v108;
    if (!v108) {
      goto LABEL_214;
    }
    goto LABEL_210;
  }
  uint64_t v122 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v111 | 7) != 0x17) {
    uint64_t v122 = v111 | 7;
  }
  uint64_t v123 = v122 + 1;
  uint64_t v112 = (char *)operator new(v122 + 1);
  __dst.__r_.__value_.__l.__size_ = v110 + v108;
  __dst.__r_.__value_.__r.__words[2] = v123 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
  if (v108)
  {
LABEL_210:
    if (v107 >= 0) {
      uint64_t v113 = &qword_25821F0;
    }
    else {
      uint64_t v113 = (uint64_t *)qword_25821F0;
    }
    memmove(v112, v113, v108);
  }
LABEL_214:
  long long v114 = &v112[v108];
  if (v110)
  {
    if (v109 >= 0) {
      uint64_t v115 = &qword_25814A0;
    }
    else {
      uint64_t v115 = (uint64_t *)qword_25814A0;
    }
    memmove(v114, v115, v110);
  }
  v114[v110] = 0;
  long long v116 = std::string::append(&__dst, "_Connector_Type");
  long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
  qword_2582500 = v116->__r_.__value_.__r.__words[2];
  xmmword_25824F0 = v117;
  v116->__r_.__value_.__l.__size_ = 0;
  v116->__r_.__value_.__r.__words[2] = 0;
  v116->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v118 = SHIBYTE(qword_2582500);
  if (qword_2582500 >= 0) {
    size_t v119 = HIBYTE(qword_2582500);
  }
  else {
    size_t v119 = *((void *)&xmmword_25824F0 + 1);
  }
  unint64_t v120 = v119 + 6;
  if (v119 + 6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v120 >= 0x17)
  {
    uint64_t v124 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v120 | 7) != 0x17) {
      uint64_t v124 = v120 | 7;
    }
    uint64_t v125 = v124 + 1;
    v121 = (uint64_t *)operator new(v124 + 1);
    qword_2582510 = v119 + 6;
    unk_2582518 = v125 | 0x8000000000000000;
    qword_2582508 = (uint64_t)v121;
  }
  else
  {
    v121 = &qword_2582508;
    qword_2582510 = 0;
    unk_2582518 = 0;
    qword_2582508 = 0;
    byte_258251F = v119 + 6;
    if (!v119) {
      goto LABEL_239;
    }
  }
  if (v118 >= 0) {
    v126 = &xmmword_25824F0;
  }
  else {
    v126 = (long long *)xmmword_25824F0;
  }
  memmove(v121, v126, v119);
LABEL_239:
  strcpy((char *)v121 + v119, "_Power");
  int v127 = byte_2582207;
  if (byte_2582207 >= 0) {
    size_t v128 = byte_2582207;
  }
  else {
    size_t v128 = qword_25821F8;
  }
  int v129 = byte_25814B7;
  if (byte_25814B7 >= 0) {
    size_t v130 = byte_25814B7;
  }
  else {
    size_t v130 = unk_25814A8;
  }
  unint64_t v131 = v130 + v128;
  if (v130 + v128 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v131 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    v132 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v130 + v128;
    if (!v128) {
      goto LABEL_252;
    }
    goto LABEL_248;
  }
  uint64_t v161 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v131 | 7) != 0x17) {
    uint64_t v161 = v131 | 7;
  }
  uint64_t v162 = v161 + 1;
  v132 = (char *)operator new(v161 + 1);
  __dst.__r_.__value_.__l.__size_ = v130 + v128;
  __dst.__r_.__value_.__r.__words[2] = v162 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v132;
  if (v128)
  {
LABEL_248:
    if (v127 >= 0) {
      v133 = &qword_25821F0;
    }
    else {
      v133 = (uint64_t *)qword_25821F0;
    }
    memmove(v132, v133, v128);
  }
LABEL_252:
  v134 = &v132[v128];
  if (v130)
  {
    if (v129 >= 0) {
      v135 = &qword_25814A0;
    }
    else {
      v135 = (uint64_t *)qword_25814A0;
    }
    memmove(v134, v135, v130);
  }
  v134[v130] = 0;
  if (byte_2581C7F >= 0) {
    v136 = (const std::string::value_type *)&qword_2581C68;
  }
  else {
    v136 = (const std::string::value_type *)qword_2581C68;
  }
  if (byte_2581C7F >= 0) {
    std::string::size_type v137 = byte_2581C7F;
  }
  else {
    std::string::size_type v137 = unk_2581C70;
  }
  v138 = std::string::append(&__dst, v136, v137);
  long long v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
  qword_2582530 = v138->__r_.__value_.__r.__words[2];
  xmmword_2582520 = v139;
  v138->__r_.__value_.__l.__size_ = 0;
  v138->__r_.__value_.__r.__words[2] = 0;
  v138->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v140 = byte_2582207;
  if (byte_2582207 >= 0) {
    size_t v141 = byte_2582207;
  }
  else {
    size_t v141 = qword_25821F8;
  }
  int v142 = byte_25814B7;
  if (byte_25814B7 >= 0) {
    size_t v143 = byte_25814B7;
  }
  else {
    size_t v143 = unk_25814A8;
  }
  unint64_t v144 = v143 + v141;
  if (v143 + v141 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v144 <= 0x16)
  {
    memset(&v282, 0, sizeof(v282));
    v145 = (char *)&v282;
    *((unsigned char *)&v282.__r_.__value_.__s + 23) = v143 + v141;
    if (!v141) {
      goto LABEL_278;
    }
    goto LABEL_274;
  }
  uint64_t v163 = (v144 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v144 | 7) != 0x17) {
    uint64_t v163 = v144 | 7;
  }
  uint64_t v164 = v163 + 1;
  v145 = (char *)operator new(v163 + 1);
  v282.__r_.__value_.__l.__size_ = v143 + v141;
  v282.__r_.__value_.__r.__words[2] = v164 | 0x8000000000000000;
  v282.__r_.__value_.__r.__words[0] = (std::string::size_type)v145;
  if (v141)
  {
LABEL_274:
    if (v140 >= 0) {
      v146 = &qword_25821F0;
    }
    else {
      v146 = (uint64_t *)qword_25821F0;
    }
    memmove(v145, v146, v141);
  }
LABEL_278:
  v147 = &v145[v141];
  if (v143)
  {
    if (v142 >= 0) {
      v148 = &qword_25814A0;
    }
    else {
      v148 = (uint64_t *)qword_25814A0;
    }
    memmove(v147, v148, v143);
  }
  v147[v143] = 0;
  if (byte_25814E7 >= 0) {
    v149 = (const std::string::value_type *)&qword_25814D0;
  }
  else {
    v149 = (const std::string::value_type *)qword_25814D0;
  }
  if (byte_25814E7 >= 0) {
    std::string::size_type v150 = byte_25814E7;
  }
  else {
    std::string::size_type v150 = *(void *)&byte_25814D8;
  }
  v151 = std::string::append(&v282, v149, v150);
  long long v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v152;
  v151->__r_.__value_.__l.__size_ = 0;
  v151->__r_.__value_.__r.__words[2] = 0;
  v151->__r_.__value_.__r.__words[0] = 0;
  if (byte_2581C7F >= 0) {
    v153 = (const std::string::value_type *)&qword_2581C68;
  }
  else {
    v153 = (const std::string::value_type *)qword_2581C68;
  }
  if (byte_2581C7F >= 0) {
    std::string::size_type v154 = byte_2581C7F;
  }
  else {
    std::string::size_type v154 = unk_2581C70;
  }
  v155 = std::string::append(&__dst, v153, v154);
  long long v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
  qword_2582548 = v155->__r_.__value_.__r.__words[2];
  xmmword_2582538 = v156;
  v155->__r_.__value_.__l.__size_ = 0;
  v155->__r_.__value_.__r.__words[2] = 0;
  v155->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v282.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_297;
    }
  }
  else if ((SHIBYTE(v282.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_297;
  }
  operator delete(v282.__r_.__value_.__l.__data_);
LABEL_297:
  byte_2582567 = 16;
  strcpy((char *)&xmmword_2582550, "Use_NACS_Adapter");
  byte_258257F = 16;
  strcpy(byte_2582568, "Start_Route_Sign");
  qword_2582580 = (uint64_t)operator new(0x20uLL);
  unk_2582588 = v277;
  strcpy((char *)qword_2582580, "Start_Route_Spoken_Primary");
  int v157 = byte_2580C17;
  if (byte_2580C17 >= 0) {
    size_t v158 = byte_2580C17;
  }
  else {
    size_t v158 = qword_2580C08;
  }
  unint64_t v159 = v158 + 27;
  if (v158 + 27 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v159 <= 0x16)
  {
    v160 = &qword_2582598;
    qword_25825A0 = 0;
    unk_25825A8 = 0;
    qword_2582598 = 0;
    byte_25825AF = v158 + 27;
LABEL_314:
    if (v157 >= 0) {
      v167 = &qword_2580C00;
    }
    else {
      v167 = (uint64_t *)qword_2580C00;
    }
    memmove(v160, v167, v158);
    goto LABEL_318;
  }
  uint64_t v165 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v159 | 7) != 0x17) {
    uint64_t v165 = v159 | 7;
  }
  uint64_t v166 = v165 + 1;
  v160 = (uint64_t *)operator new(v165 + 1);
  qword_25825A0 = v158 + 27;
  unk_25825A8 = v166 | 0x8000000000000000;
  qword_2582598 = (uint64_t)v160;
  if (v158) {
    goto LABEL_314;
  }
LABEL_318:
  strcpy((char *)v160 + v158, "Turn_Around_To_Route_Spoken");
  strcpy(&byte_25825C7, "\t_Two_Lanes");
  strcpy((char *)&qword_25825B0, "_One_Lane");
  strcpy(&byte_25825DF, "\n_Three_Lanes");
  byte_25825F7 = 12;
  byte_258260F = 11;
  strcpy((char *)&qword_25825F8, "_Four_Lanes");
  byte_2582627 = 11;
  strcpy((char *)&qword_2582610, "_Five_Lanes");
  strcpy(&byte_258263F, "\n_Seven_Lanes");
  strcpy((char *)&qword_2582628, "_Six_Lanes");
  byte_2582657 = 12;
  byte_258266F = 12;
  strcpy((char *)&qword_2582658, "_Eight_Lanes");
  byte_2582687 = 12;
  strcpy((char *)&qword_2582670, "_Second_Lane");
  byte_258269F = 11;
  strcpy((char *)&qword_2582688, "_Third_Lane");
  byte_25826B7 = 19;
  long long v271 = *(_OWORD *)"_Second_Third_Lanes";
  strcpy((char *)&xmmword_25826A0, "_Second_Third_Lanes");
  byte_25826CF = 4;
  strcpy((char *)&dword_25826B8, "Left");
  byte_25826E7 = 5;
  byte_25826D4 = 116;
  dword_25826D0 = 1751607634;
  byte_25826D5 = 0;
  byte_25826FF = 6;
  strcpy((char *)&dword_25826E8, "Middle");
  BYTE1(qword_2582710) = 0;
  WORD1(qword_2582710) = 0;
  HIDWORD(qword_2582710) = 0x10000000;
  strcpy((char *)dword_2582700, "Left_Second_Lane");
  BYTE1(qword_2582728) = 0;
  WORD1(qword_2582728) = 0;
  HIDWORD(qword_2582728) = 285212672;
  strcpy((char *)&dword_2582718, "Right_Second_Lan");
  qword_2582740 = 0xF00000000000000;
  strcpy((char *)&dword_2582730, "Left_Third_Lane");
  qword_2582758 = 0x1000000000000000;
  byte_258274C = 116;
  dword_2582748 = 1751607634;
  dword_2582754 = 1701732684;
  unk_258274D = *(void *)"_Third_Lane";
  v168 = (char *)operator new(0x19uLL);
  qword_2582760 = (uint64_t)v168;
  unk_2582768 = v281;
  *(_DWORD *)v168 = 1952867660;
  strcpy(v168 + 19, "anes");
  *(_OWORD *)(v168 + 4) = v271;
  v169 = (char *)operator new(0x20uLL);
  qword_2582778 = (uint64_t)v169;
  xmmword_2582780 = v280;
  *(_DWORD *)v169 = 1751607634;
  v169[4] = 116;
  strcpy(v169 + 20, "anes");
  *(_OWORD *)(v169 + 5) = v271;
  byte_25827A7 = 5;
  strcpy((char *)&dword_2582790, "_Stay");
  byte_25827BF = 13;
  strcpy((char *)&qword_25827A8, "Continue_Sign");
  byte_25827D7 = 8;
  strcpy((char *)&qword_25827C0, "Continue");
  int v170 = byte_2581C97;
  if (byte_2581C97 >= 0) {
    size_t v171 = byte_2581C97;
  }
  else {
    size_t v171 = qword_2581C88;
  }
  unint64_t v172 = v171 + 8;
  if (v171 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v172 >= 0x17)
  {
    uint64_t v174 = (v172 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v172 | 7) != 0x17) {
      uint64_t v174 = v172 | 7;
    }
    uint64_t v175 = v174 + 1;
    v176 = operator new(v174 + 1);
    qword_25827E0 = v171 + 8;
    qword_25827E8 = v175 | 0x8000000000000000;
    qword_25827D8 = (uint64_t)v176;
    void *v176 = 0x65756E69746E6F43;
    v173 = v176 + 1;
  }
  else
  {
    qword_25827E8 = 0;
    HIBYTE(qword_25827E8) = v171 + 8;
    qword_25827D8 = 0x65756E69746E6F43;
    qword_25827E0 = 0;
    v173 = &qword_25827E0;
    if (!v171) {
      goto LABEL_332;
    }
  }
  if (v170 >= 0) {
    v177 = &qword_2581C80;
  }
  else {
    v177 = (uint64_t *)qword_2581C80;
  }
  memmove(v173, v177, v171);
LABEL_332:
  *((unsigned char *)v173 + v171) = 0;
  int v178 = SHIBYTE(qword_2581CF0);
  if (qword_2581CF0 >= 0) {
    size_t v179 = HIBYTE(qword_2581CF0);
  }
  else {
    size_t v179 = unk_2581CE8;
  }
  unint64_t v180 = v179 + 8;
  if (v179 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v180 >= 0x17)
  {
    uint64_t v182 = (v180 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v180 | 7) != 0x17) {
      uint64_t v182 = v180 | 7;
    }
    uint64_t v183 = v182 + 1;
    v184 = operator new(v182 + 1);
    qword_25827F8 = v179 + 8;
    qword_2582800 = v183 | 0x8000000000000000;
    qword_25827F0 = (uint64_t)v184;
    void *v184 = qword_25827C0;
    v181 = v184 + 1;
  }
  else
  {
    qword_2582800 = 0;
    HIBYTE(qword_2582800) = v179 + 8;
    qword_25827F0 = qword_25827C0;
    qword_25827F8 = 0;
    v181 = &qword_25827F8;
    if (!v179) {
      goto LABEL_346;
    }
  }
  if (v178 >= 0) {
    v185 = &qword_2581CE0;
  }
  else {
    v185 = (uint64_t *)qword_2581CE0;
  }
  memmove(v181, v185, v179);
LABEL_346:
  *((unsigned char *)v181 + v179) = 0;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 83;
  v284[23] = 2;
  strcpy(v284, "SW");
  v286[7] = 1;
  LOWORD(v285[0]) = 87;
  HIBYTE(v287) = 2;
  strcpy(&v286[8], "NW");
  HIBYTE(v289) = 1;
  LOWORD(v288[0]) = 78;
  HIBYTE(v291) = 2;
  strcpy((char *)&v290, "NE");
  HIBYTE(v293) = 1;
  LOWORD(v292) = 69;
  HIBYTE(v295) = 2;
  strcpy((char *)&__p, "SE");
  sub_4BDC0C(qword_2582808, (uint64_t)&__dst, 8uLL);
  if (SHIBYTE(v295) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v293) & 0x80000000) == 0)
    {
LABEL_348:
      if ((SHIBYTE(v291) & 0x80000000) == 0) {
        goto LABEL_349;
      }
      goto LABEL_383;
    }
  }
  else if ((SHIBYTE(v293) & 0x80000000) == 0)
  {
    goto LABEL_348;
  }
  operator delete((void *)v292);
  if ((SHIBYTE(v291) & 0x80000000) == 0)
  {
LABEL_349:
    if ((SHIBYTE(v289) & 0x80000000) == 0) {
      goto LABEL_350;
    }
    goto LABEL_384;
  }
LABEL_383:
  operator delete((void *)v290);
  if ((SHIBYTE(v289) & 0x80000000) == 0)
  {
LABEL_350:
    if ((SHIBYTE(v287) & 0x80000000) == 0) {
      goto LABEL_351;
    }
    goto LABEL_385;
  }
LABEL_384:
  operator delete(v288[0]);
  if ((SHIBYTE(v287) & 0x80000000) == 0)
  {
LABEL_351:
    if ((v286[7] & 0x80000000) == 0) {
      goto LABEL_352;
    }
    goto LABEL_386;
  }
LABEL_385:
  operator delete(*(void **)&v286[8]);
  if ((v286[7] & 0x80000000) == 0)
  {
LABEL_352:
    if ((v284[23] & 0x80000000) == 0) {
      goto LABEL_353;
    }
LABEL_387:
    operator delete(*(void **)v284);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_354;
    }
    goto LABEL_388;
  }
LABEL_386:
  operator delete(v285[0]);
  if ((v284[23] & 0x80000000) != 0) {
    goto LABEL_387;
  }
LABEL_353:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_354;
  }
LABEL_388:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_354:
  byte_2582837 = 13;
  strcpy((char *)&qword_2582820, "{instruction}");
  byte_258284F = 20;
  strcpy(byte_2582838, "{primaryInstruction}");
  strcpy((char *)&xmmword_2582850, "{secondaryInstruction}");
  HIBYTE(word_2582866) = 22;
  qword_2582868 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2582870 = v279;
  strcpy((char *)qword_2582868, "{andSecondaryInstruction}");
  qword_2582880 = (uint64_t)operator new(0x20uLL);
  unk_2582888 = v280;
  strcpy((char *)qword_2582880, "{toSecondaryInstruction}");
  byte_25828AF = 21;
  strcpy(byte_2582898, "{continueInstruction}");
  qword_25828B0 = (uint64_t)operator new(0x20uLL);
  unk_25828B8 = v277;
  strcpy((char *)qword_25828B0, "{thenSecondaryInstruction}");
  byte_25828DF = 14;
  strcpy((char *)&qword_25828C8, "{instruction1}");
  byte_25828F7 = 14;
  strcpy((char *)&qword_25828E0, "{instruction2}");
  strcpy(&byte_258290F, "\n{nextDistance}");
  strcpy((char *)&qword_25828F8, "{distance}");
  byte_2582927 = 14;
  byte_258293F = 16;
  strcpy(byte_2582928, "{valid_distance}");
  strcpy(&byte_2582957, "\n{valid_distance}");
  strcpy((char *)&qword_2582940, "{distance}");
  byte_258296F = 16;
  byte_2582987 = 15;
  strcpy((char *)&qword_2582970, "{ClimbDistance}");
  byte_258299F = 17;
  strcpy(byte_2582988, "{DescentDistance}");
  byte_25829B7 = 13;
  strcpy((char *)&qword_25829A0, "{nonBrkSpace}");
  byte_25829CF = 9;
  strcpy((char *)&qword_25829B8, "{newLine}");
  byte_25829E7 = 6;
  word_25829D4 = -24382;
  dword_25829D0 = -1211981630;
  byte_25829D6 = 0;
  byte_25829FF = 2;
  word_25829E8 = -24382;
  byte_25829EA = 0;
  byte_2582A17 = 1;
  word_2582A00 = 10;
  byte_2582A2F = 1;
  word_2582A18 = 32;
  byte_2582A47 = 2;
  strcpy((char *)&word_2582A30, "\n\n");
  strcpy(&byte_2582A5F, "\t{TowardShield1}");
  strcpy((char *)&qword_2582A48, "{Shield1}");
  byte_2582A77 = 15;
  strcpy(&byte_2582A8F, "\t{TowardShield2}");
  strcpy((char *)&qword_2582A78, "{Shield2}");
  byte_2582AA7 = 15;
  byte_2582ABF = 12;
  strcpy((char *)&qword_2582AA8, "{Direction1}");
  byte_2582AD7 = 12;
  strcpy((char *)&qword_2582AC0, "{Direction2}");
  byte_2582AEF = 18;
  strcpy(byte_2582AD8, "{TowardDirection1}");
  byte_2582B07 = 18;
  strcpy((char *)&xmmword_2582AF0, "{TowardDirection2}");
  byte_2582B1F = 7;
  strcpy((char *)&dword_2582B08, "{Icon1}");
  byte_2582B37 = 7;
  strcpy((char *)&dword_2582B20, "{Icon2}");
  byte_2582B38[23] = 14;
  strcpy(byte_2582B38, "{Intersection}");
  byte_2582B67 = 6;
  strcpy((char *)&xmmword_2582B50, "{Road}");
  byte_2582B7F = 7;
  strcpy((char *)&dword_2582B68, "{Road1}");
  byte_2582B97 = 7;
  strcpy((char *)&xmmword_2582B80, "{Road2}");
  strcpy(&byte_2582BAF, "\n{Freeway}");
  strcpy((char *)&xmmword_2582B98, "{Elevator}");
  strcpy(&byte_2582BC7, "\t{Ferry}");
  byte_2582BDF = 7;
  byte_2582BF7 = 13;
  strcpy((char *)&xmmword_2582BE0, "{ShuttleName}");
  byte_2582C0F = 11;
  strcpy((char *)&xmmword_2582BF8, "{Signpost1}");
  byte_2582C27 = 11;
  strcpy((char *)&xmmword_2582C10, "{Signpost2}");
  byte_2582C3F = 12;
  strcpy((char *)&xmmword_2582C28, "{ExitNumber}");
  strcpy(&byte_2582C57, "\t{Name}");
  strcpy((char *)&xmmword_2582C40, "{Address}");
  byte_2582C6F = 6;
  byte_2582C87 = 11;
  strcpy((char *)&xmmword_2582C70, "{PlaceName}");
  byte_2582C9F = 14;
  strcpy((char *)&xmmword_2582C88, "{ElevatorName}");
  byte_2582CB7 = 15;
  strcpy((char *)&xmmword_2582CA0, "{EscalatorName}");
  byte_2582CCF = 12;
  strcpy((char *)&xmmword_2582CB8, "{StairsName}");
  strcpy(&byte_2582CE7, "\n{BridgeName}");
  strcpy((char *)&xmmword_2582CD0, "{RampName}");
  byte_2582CFF = 12;
  byte_2582D17 = 12;
  strcpy((char *)&xmmword_2582D00, "{TunnelName}");
  byte_2582D2F = 13;
  strcpy((char *)&xmmword_2582D18, "{CustomLabel}");
  std::string __dst = *(std::string *)byte_2582B38;
  *(_OWORD *)v284 = xmmword_2582B50;
  *(void *)&v284[16] = unk_2582B60;
  *(_OWORD *)v285 = *(_OWORD *)&dword_2582B68;
  *(void *)v286 = unk_2582B78;
  *(_OWORD *)&v286[8] = xmmword_2582B80;
  uint64_t v287 = unk_2582B90;
  *(_OWORD *)v288 = xmmword_2582B98;
  uint64_t v289 = unk_2582BA8;
  uint64_t v291 = unk_2582BC0;
  long long v290 = xmmword_2582BB0;
  long long v292 = xmmword_2582BC8;
  uint64_t v293 = unk_2582BD8;
  uint64_t v295 = unk_2582BF0;
  long long __p = xmmword_2582BE0;
  long long v296 = xmmword_2582BF8;
  uint64_t v297 = unk_2582C08;
  uint64_t v299 = unk_2582C20;
  long long v298 = xmmword_2582C10;
  long long v300 = xmmword_2582C28;
  long long v302 = xmmword_2582C40;
  uint64_t v301 = unk_2582C38;
  uint64_t v303 = unk_2582C50;
  long long v304 = xmmword_2582C58;
  long long v306 = xmmword_2582C70;
  uint64_t v305 = unk_2582C68;
  uint64_t v307 = unk_2582C80;
  long long v308 = xmmword_2582C88;
  long long v310 = xmmword_2582CA0;
  uint64_t v309 = unk_2582C98;
  uint64_t v311 = unk_2582CB0;
  long long v312 = xmmword_2582CB8;
  long long v314 = xmmword_2582CD0;
  uint64_t v313 = unk_2582CC8;
  uint64_t v315 = unk_2582CE0;
  long long v316 = xmmword_2582CE8;
  long long v318 = xmmword_2582D00;
  uint64_t v317 = unk_2582CF8;
  uint64_t v319 = unk_2582D10;
  uint64_t v321 = unk_2582D28;
  long long v320 = xmmword_2582D18;
  sub_4BDC0C(qword_2582D30, (uint64_t)&__dst, 0x15uLL);
  if (SHIBYTE(v321) < 0)
  {
    operator delete((void *)v320);
    if ((SHIBYTE(v319) & 0x80000000) == 0)
    {
LABEL_356:
      if ((SHIBYTE(v317) & 0x80000000) == 0) {
        goto LABEL_357;
      }
      goto LABEL_391;
    }
  }
  else if ((SHIBYTE(v319) & 0x80000000) == 0)
  {
    goto LABEL_356;
  }
  operator delete((void *)v318);
  if ((SHIBYTE(v317) & 0x80000000) == 0)
  {
LABEL_357:
    if ((SHIBYTE(v315) & 0x80000000) == 0) {
      goto LABEL_358;
    }
    goto LABEL_392;
  }
LABEL_391:
  operator delete((void *)v316);
  if ((SHIBYTE(v315) & 0x80000000) == 0)
  {
LABEL_358:
    if ((SHIBYTE(v313) & 0x80000000) == 0) {
      goto LABEL_359;
    }
    goto LABEL_393;
  }
LABEL_392:
  operator delete((void *)v314);
  if ((SHIBYTE(v313) & 0x80000000) == 0)
  {
LABEL_359:
    if ((SHIBYTE(v311) & 0x80000000) == 0) {
      goto LABEL_360;
    }
    goto LABEL_394;
  }
LABEL_393:
  operator delete((void *)v312);
  if ((SHIBYTE(v311) & 0x80000000) == 0)
  {
LABEL_360:
    if ((SHIBYTE(v309) & 0x80000000) == 0) {
      goto LABEL_361;
    }
    goto LABEL_395;
  }
LABEL_394:
  operator delete((void *)v310);
  if ((SHIBYTE(v309) & 0x80000000) == 0)
  {
LABEL_361:
    if ((SHIBYTE(v307) & 0x80000000) == 0) {
      goto LABEL_362;
    }
    goto LABEL_396;
  }
LABEL_395:
  operator delete((void *)v308);
  if ((SHIBYTE(v307) & 0x80000000) == 0)
  {
LABEL_362:
    if ((SHIBYTE(v305) & 0x80000000) == 0) {
      goto LABEL_363;
    }
    goto LABEL_397;
  }
LABEL_396:
  operator delete((void *)v306);
  if ((SHIBYTE(v305) & 0x80000000) == 0)
  {
LABEL_363:
    if ((SHIBYTE(v303) & 0x80000000) == 0) {
      goto LABEL_364;
    }
    goto LABEL_398;
  }
LABEL_397:
  operator delete((void *)v304);
  if ((SHIBYTE(v303) & 0x80000000) == 0)
  {
LABEL_364:
    if ((SHIBYTE(v301) & 0x80000000) == 0) {
      goto LABEL_365;
    }
    goto LABEL_399;
  }
LABEL_398:
  operator delete((void *)v302);
  if ((SHIBYTE(v301) & 0x80000000) == 0)
  {
LABEL_365:
    if ((SHIBYTE(v299) & 0x80000000) == 0) {
      goto LABEL_366;
    }
    goto LABEL_400;
  }
LABEL_399:
  operator delete((void *)v300);
  if ((SHIBYTE(v299) & 0x80000000) == 0)
  {
LABEL_366:
    if ((SHIBYTE(v297) & 0x80000000) == 0) {
      goto LABEL_367;
    }
    goto LABEL_401;
  }
LABEL_400:
  operator delete((void *)v298);
  if ((SHIBYTE(v297) & 0x80000000) == 0)
  {
LABEL_367:
    if ((SHIBYTE(v295) & 0x80000000) == 0) {
      goto LABEL_368;
    }
    goto LABEL_402;
  }
LABEL_401:
  operator delete((void *)v296);
  if ((SHIBYTE(v295) & 0x80000000) == 0)
  {
LABEL_368:
    if ((SHIBYTE(v293) & 0x80000000) == 0) {
      goto LABEL_369;
    }
    goto LABEL_403;
  }
LABEL_402:
  operator delete((void *)__p);
  if ((SHIBYTE(v293) & 0x80000000) == 0)
  {
LABEL_369:
    if ((SHIBYTE(v291) & 0x80000000) == 0) {
      goto LABEL_370;
    }
    goto LABEL_404;
  }
LABEL_403:
  operator delete((void *)v292);
  if ((SHIBYTE(v291) & 0x80000000) == 0)
  {
LABEL_370:
    if ((SHIBYTE(v289) & 0x80000000) == 0) {
      goto LABEL_371;
    }
    goto LABEL_405;
  }
LABEL_404:
  operator delete((void *)v290);
  if ((SHIBYTE(v289) & 0x80000000) == 0)
  {
LABEL_371:
    if ((SHIBYTE(v287) & 0x80000000) == 0) {
      goto LABEL_372;
    }
    goto LABEL_406;
  }
LABEL_405:
  operator delete(v288[0]);
  if ((SHIBYTE(v287) & 0x80000000) == 0)
  {
LABEL_372:
    if ((v286[7] & 0x80000000) == 0) {
      goto LABEL_373;
    }
    goto LABEL_407;
  }
LABEL_406:
  operator delete(*(void **)&v286[8]);
  if ((v286[7] & 0x80000000) == 0)
  {
LABEL_373:
    if ((v284[23] & 0x80000000) == 0) {
      goto LABEL_374;
    }
LABEL_408:
    operator delete(*(void **)v284);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_375;
    }
    goto LABEL_409;
  }
LABEL_407:
  operator delete(v285[0]);
  if ((v284[23] & 0x80000000) != 0) {
    goto LABEL_408;
  }
LABEL_374:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_375;
  }
LABEL_409:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_375:
  qword_2582D48 = (uint64_t)operator new(0x19uLL);
  unk_2582D50 = v281;
  strcpy((char *)qword_2582D48, "From_User_Location_List");
  byte_2582D77 = 20;
  strcpy(byte_2582D60, "Origin_Waypoint_List");
  qword_2582D78 = (uint64_t)operator new(0x20uLL);
  unk_2582D80 = v277;
  strcpy((char *)qword_2582D78, "Intermediate_Waypoint_List");
  unk_2582D90 = operator new(0x20uLL);
  unk_2582D98 = v279;
  strcpy(unk_2582D90, "Destination_Waypoint_List");
  byte_2582DBF = 15;
  strcpy(byte_2582DA8, "{toDestination}");
  byte_2582DD7 = 13;
  strcpy((char *)&xmmword_2582DC0, "{Destination}");
  byte_2582DEF = 7;
  strcpy(byte_2582DD8, "To_Home");
  byte_2582E07 = 14;
  strcpy(byte_2582DF0, "To_ContactHome");
  byte_2582E1F = 7;
  strcpy(byte_2582E08, "To_Work");
  byte_2582E37 = 14;
  strcpy(byte_2582E20, "To_ContactWork");
  strcpy(&byte_2582E4F, "\nTo_Business");
  strcpy(byte_2582E38, "To_Address");
  byte_2582E67 = 11;
  byte_2582E7F = 16;
  strcpy(byte_2582E68, "To_Other_Contact");
  strcpy(&byte_2582E97, "\tTo_ContactSchool");
  strcpy(byte_2582E80, "To_School");
  byte_2582EAF = 16;
  byte_2582EC7 = 17;
  strcpy(algn_2582EB0, "To_PersonLocation");
  qword_2582EC8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2582ED0 = v278;
  strcpy((char *)qword_2582EC8, "To_ContactCustomLabelAddress");
  byte_2582EF7 = 7;
  strcpy((char *)&dword_2582EE0, "At_Home");
  byte_2582F0F = 14;
  strcpy((char *)&qword_2582EF8, "At_ContactHome");
  byte_2582F27 = 7;
  strcpy((char *)&dword_2582F10, "At_Work");
  byte_2582F3F = 14;
  strcpy((char *)&qword_2582F28, "At_ContactWork");
  strcpy(&byte_2582F57, "\nAt_Business");
  strcpy((char *)&qword_2582F40, "At_Address");
  byte_2582F6F = 11;
  byte_2582F87 = 16;
  strcpy(algn_2582F70, "At_Other_Contact");
  byte_2582F9F = 4;
  strcpy((char *)&dword_2582F88, "Home");
  byte_2582FB7 = 11;
  strcpy((char *)&qword_2582FA0 + 7, "Home");
  qword_2582FA0 = *(void *)&v265[16];
  byte_2582FCF = 4;
  strcpy((char *)&dword_2582FB8, "Work");
  byte_2582FE7 = 11;
  strcpy((char *)&qword_2582FD0 + 7, "Work");
  qword_2582FD0 = *(void *)v265;
  byte_2582FFF = 7;
  strcpy((char *)&dword_2582FE8, "Address");
  byte_2583017 = 8;
  strcpy((char *)&qword_2583000, "Business");
  byte_258302F = 13;
  qword_2583018 = *(void *)&v265[48];
  *(uint64_t *)((char *)&qword_2583018 + 5) = *(void *)&v265[32];
  byte_2583025 = 0;
  byte_2583047 = 6;
  strcpy((char *)&dword_2583030, "School");
  byte_258305F = 13;
  strcpy((char *)&qword_2583048, "ContactSchool");
  byte_2583077 = 14;
  strcpy((char *)&qword_2583060, "PersonLocation");
  qword_2583078 = (uint64_t)operator new(0x20uLL);
  xmmword_2583080 = v279;
  strcpy((char *)qword_2583078, "ContactCustomLabelAddress");
  if (byte_2582DD7 < 0)
  {
    sub_4200(&xmmword_2583090, (void *)xmmword_2582DC0, *((unint64_t *)&xmmword_2582DC0 + 1));
  }
  else
  {
    xmmword_2583090 = xmmword_2582DC0;
    qword_25830A0 = unk_2582DD0;
  }
  byte_25830BF = 16;
  strcpy((char *)&xmmword_25830A8, "{PrevExitNumber}");
  byte_25830D7 = 10;
  strcpy((char *)&qword_25830C0, "{PrevRoad}");
  qword_25830D8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25830E0 = v280;
  strcpy((char *)qword_25830D8, "{RouteTotalExpectedTime}");
  byte_2583107 = 18;
  strcpy(&algn_25830E0[16], "{ChargePercentage}");
  qword_2583108 = (uint64_t)operator new(0x20uLL);
  unk_2583110 = v274;
  strcpy((char *)qword_2583108, "{RemainingChargePercentage}");
  byte_2583137 = 16;
  strcpy(byte_2583120, "{ChargeDuration}");
  byte_258314F = 15;
  strcpy((char *)&qword_2583138, "{ConnectorType}");
  byte_2583167 = 19;
  strcpy(byte_2583150, "{ChargeStationName}");
  byte_258317F = 7;
  strcpy((char *)&dword_2583168, "{Power}");
  byte_2583197 = 13;
  strcpy((char *)&qword_2583180, "{VehicleName}");
  byte_25831AF = 18;
  strcpy((char *)&xmmword_2583198, "{AreaIncidentName}");
  byte_25831C7 = 14;
  strcpy((char *)&qword_25831B0, "{AreaIncident}");
  byte_25831DF = 16;
  strcpy((char *)&xmmword_25831C8, "{AffectedRegion}");
  byte_25831F7 = 21;
  strcpy(byte_25831E0, "{AreaIncidentWeblink}");
  byte_258320F = 20;
  strcpy((char *)&xmmword_25831F8, "{AreaIncidentAgency}");
  byte_2583227 = 11;
  strcpy((char *)&qword_2583210, "{IssueTime}");
  byte_258323F = 12;
  strcpy((char *)&qword_2583228, "{UpdateTime}");
  byte_2583257 = 11;
  strcpy((char *)&qword_2583240, "{IssueDate}");
  byte_258326F = 12;
  strcpy((char *)&qword_2583258, "{UpdateDate}");
  qword_2583270 = (uint64_t)operator new(0x20uLL);
  unk_2583278 = v280;
  strcpy((char *)qword_2583270, "{AreaIncidentDataSource}");
  byte_258329F = 13;
  strcpy((char *)&qword_2583288, "{AreaHectare}");
  byte_25832B7 = 10;
  strcpy((char *)&qword_25832A0, "{AreaAcre}");
  qword_25832B8 = (uint64_t)operator new(0x20uLL);
  unk_25832C0 = v276;
  strcpy((char *)qword_25832B8, "{WildfirePercentageContained}");
  qword_25832D0 = (uint64_t)operator new(0x28uLL);
  unk_25832D8 = v269[2];
  strcpy((char *)qword_25832D0, "{WildfireExpectedContainmentDate}");
  qword_25832E8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25832F0 = v278;
  strcpy((char *)qword_25832E8, "{ServerRecommendedRouteName}");
  qword_2583300 = (uint64_t)operator new(0x20uLL);
  unk_2583308 = v278;
  strcpy((char *)qword_2583300, "{ServerNonRecommendedRoute1}");
  qword_2583318 = (uint64_t)operator new(0x20uLL);
  unk_2583320 = v278;
  strcpy((char *)qword_2583318, "{ServerNonRecommendedRoute2}");
  byte_2583347 = 12;
  strcpy((char *)&qword_2583330, "{ClientDest}");
  byte_258335F = 6;
  strcpy((char *)&dword_2583348, "{Name}");
  qword_2583360 = (uint64_t)operator new(0x20uLL);
  unk_2583368 = v269[1];
  strcpy((char *)qword_2583360, "ProactiveAlert_FasterRouteTitle");
  qword_2583378 = (uint64_t)operator new(0x20uLL);
  unk_2583380 = v277;
  strcpy((char *)qword_2583378, "ProactiveAlert_RoadClosure");
  qword_2583390 = (uint64_t)operator new(0x30uLL);
  unk_2583398 = v272;
  strcpy((char *)qword_2583390, "ProactiveAlert_UnusuallyHeavyTrafficOnTwo");
  qword_25833A8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25833B0 = v275;
  strcpy((char *)qword_25833A8, "ProactiveAlert_FasterRouteTitle_to_Home");
  qword_25833C0 = (uint64_t)operator new(0x28uLL);
  unk_25833C8 = v275;
  strcpy((char *)qword_25833C0, "ProactiveAlert_FasterRouteTitle_to_Work");
  qword_25833D8 = (uint64_t)operator new(0x28uLL);
  unk_25833E0 = v275;
  strcpy((char *)qword_25833D8, "ProactiveAlert_FasterRouteTitle_to_Name");
  qword_25833F0 = (uint64_t)operator new(0x30uLL);
  unk_25833F8 = xmmword_20B93B0;
  strcpy((char *)qword_25833F0, "ProactiveAlert_FasterRouteTitle_to_StreetName");
  byte_258341F = 17;
  strcpy(byte_2583408, "Proactive_Driving");
  strcpy(&byte_2583437, "\n{RouteName}");
  strcpy((char *)&qword_2583420, "_RouteName");
  byte_258344F = 11;
  qword_2583450 = (uint64_t)operator new(0x28uLL);
  unk_2583458 = v269[2];
  strcpy((char *)qword_2583450, "Pass_Traffic_Light_Spoken_Primary");
  qword_2583468 = (uint64_t)operator new(0x20uLL);
  unk_2583470 = v276;
  strcpy((char *)qword_2583468, "Pass_Stop_Sign_Spoken_Primary");
  unk_2583480 = operator new(0x20uLL);
  unk_2583488 = v269[0];
  strcpy(unk_2583480, "Pass_Roundabout_Spoken_Primary");
  strcpy(&byte_25834AF, "\nBannerBody");
  strcpy(byte_2583498, "BannerHead");
  strcpy(&byte_25834C7, "\nBannerDescription");
  byte_25834DF = 17;
  strcpy(&byte_25834F7, "\n_Incident");
  strcpy((char *)&qword_25834E0, "VoiceAlert");
  strcpy(&byte_258350F, "\t_Area_Incident");
  byte_2583527 = 14;
  byte_258353F = 15;
  strcpy((char *)&qword_2583528, "_Area_Incidents");
  strcpy(&byte_2583557, "\t_Crash");
  strcpy((char *)&qword_2583540, "_Accident");
  byte_258356F = 6;
  byte_2583587 = 16;
  strcpy((char *)&xmmword_2583570, "_Congestion_Zone");
  strcpy(&byte_258359F, "\n_Environmental_Zone");
  strcpy((char *)&qword_2583588, "_Toll_Zone");
  byte_25835B7 = 19;
  BYTE1(qword_25835C8) = 116;
  WORD1(qword_25835C8) = 0;
  HIDWORD(qword_25835C8) = 301989888;
  strcpy(byte_25835D0, "_Construction");
  strcpy((char *)&qword_25835B8, "_Incident_Accide");
  byte_25835E7 = 13;
  byte_25835FF = 7;
  strcpy((char *)&dword_25835E8, "_Hazard");
  byte_2583617 = 12;
  strcpy((char *)&qword_2583600, "_LaneClosure");
  byte_258362F = 12;
  strcpy((char *)&qword_2583618, "_LaneTrailer");
  qmemcpy(&byte_2583647, "\t_LaneTrailer", 13);
  strcpy((char *)&qword_2583630, "_Shoulder");
  qword_2583658 = 0x1500007200000000;
  *(void *)algn_2583654 = *(void *)"_Shoulder";
  strcpy((char *)&xmmword_2583660, "_Causing_Traffic_Delay");
  HIBYTE(word_2583676) = 22;
  byte_258368F = 6;
  strcpy((char *)&dword_2583678, "_Timed");
  byte_25836A7 = 12;
  strcpy((char *)&qword_2583690, "_HasDistance");
  byte_25836BF = 8;
  strcpy((char *)&qword_25836A8, "_Closure");
  strcpy(&byte_25836D7, "\n_BadRoad");
  strcpy((char *)&qword_25836C0, "_NoReroute");
  byte_25836EF = 8;
  byte_2583707 = 12;
  strcpy((char *)&qword_25836F0, "_TollTrailer");
  byte_258371F = 12;
  strcpy((char *)&qword_2583708, "_BestTrailer");
  byte_2583737 = 8;
  strcpy((char *)&qword_2583720, "_Trailer");
  byte_258374F = 18;
  strcpy((char *)&xmmword_2583738, "_Secondary_Trailer");
  byte_2583767 = 8;
  strcpy((char *)&qword_2583750, "_Savings");
  byte_258377F = 8;
  strcpy((char *)&qword_2583768, "_AltRoad");
  byte_2583797 = 6;
  strcpy((char *)&dword_2583780, "_Named");
  byte_25837AF = 6;
  strcpy((char *)&dword_2583798, "_NAMED");
  byte_25837C7 = 22;
  strcpy((char *)&xmmword_25837B0, "_Named_Suggested_Route");
  qword_25837E0 = 0x1000000000000000;
  xmmword_25837D0 = xmmword_20E81D0;
  byte_25837FF = 11;
  strcpy((char *)&qword_25837E8, "_Speed_Trap");
  byte_2583817 = 4;
  strcpy((char *)&dword_2583800, "_UGI");
  byte_258382F = 12;
  strcpy((char *)&qword_2583818, "_Safer_Route");
  qword_2583830 = (uint64_t)operator new(0x20uLL);
  unk_2583838 = v269[1];
  strcpy((char *)qword_2583830, "BlockedRouteByBlockingIncident_");
  qword_2583848 = (uint64_t)operator new(0x28uLL);
  long long v271 = xmmword_20B9280;
  *(_OWORD *)algn_2583850 = xmmword_20B9280;
  strcpy((char *)qword_2583848, "BlockedRouteByManeuverRestriction_");
  qword_2583860 = (uint64_t)operator new(0x20uLL);
  unk_2583868 = v269[0];
  strcpy((char *)qword_2583860, "BlockedRouteByTimeRestriction_");
  qword_2583878 = (uint64_t)operator new(0x28uLL);
  unk_2583880 = xmmword_20B8FD0;
  strcpy((char *)qword_2583878, "SuggestRouteToAvoidBlockingIncident_");
  qword_2583890 = (uint64_t)operator new(0x30uLL);
  unk_2583898 = xmmword_20B9380;
  strcpy((char *)qword_2583890, "SuggestRouteToAvoidBlockingManeuverRestriction_");
  qword_25838A8 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25838B0 = xmmword_20B93E0;
  strcpy((char *)qword_25838A8, "SuggestRouteToAvoidBlockingTimeRestriction_");
  byte_25838D7 = 1;
  word_25838C0 = 95;
  strcpy((char *)&xmmword_25838D8, "IncidentsCausingDelay_");
  HIBYTE(word_25838EE) = 22;
  qword_25838F0 = (uint64_t)operator new(0x19uLL);
  unk_25838F8 = v281;
  strcpy((char *)qword_25838F0, "NonVotableRoadIncident_");
  byte_258391F = 20;
  strcpy(byte_2583908, "VotableRoadIncident_");
  byte_2583937 = 13;
  strcpy((char *)&qword_2583920, "AreaIncident_");
  byte_258394F = 15;
  strcpy((char *)&qword_2583938, "CongestionZone_");
  qword_2583950 = (uint64_t)operator new(0x20uLL);
  unk_2583958 = v280;
  strcpy((char *)qword_2583950, "EVModifiedChargingStops_");
  byte_258397F = 13;
  strcpy((char *)&qword_2583968, "EVDisconnect_");
  byte_2583997 = 12;
  strcpy((char *)&qword_2583980, "EVReconnect_");
  qword_2583998 = (uint64_t)operator new(0x20uLL);
  unk_25839A0 = v278;
  strcpy((char *)qword_2583998, "EVOfflineToOnlineTransition_");
  byte_25839C7 = 13;
  strcpy((char *)&qword_25839B0, "EVOfflineSAR_");
  byte_25839DF = 21;
  strcpy((char *)&xmmword_25839C8, "EVTowingNotSupported_");
  byte_25839F7 = 18;
  strcpy(byte_25839E0, "EVInfeasibleRoute_");
  qword_25839F8 = (uint64_t)operator new(0x38uLL);
  unk_2583A00 = xmmword_20B8DF0;
  strcpy((char *)qword_25839F8, "SuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_2583A10 = (uint64_t)operator new(0x40uLL);
  unk_2583A18 = xmmword_20B98C0;
  strcpy((char *)qword_2583A10, "LCSuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_2583A28 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_2583A30 = v273;
  strcpy((char *)qword_2583A28, "SuggestRouteAddingStopsForEVInfeasibleRoute_");
  qmemcpy(v269, "InfeasibleRoute_ngStopsForEVInfeSuggestRouteAddi", sizeof(v269));
  qword_2583A40 = (uint64_t)operator new(0x30uLL);
  *(_WORD *)&v265[50] = 0;
  *(_DWORD *)&v265[52] = 0;
  *(void *)&v265[56] = 0x8000000000000030;
  unk_2583A48 = xmmword_20B9A80;
  strcpy((char *)qword_2583A40, "LCSuggestRouteAddingStopsForEVInfeasibleRoute_");
  strcpy(v265, "InfeasibleRoute_dingStopsForEVInLCSuggestRouteAd.");
  qword_2583A58 = (uint64_t)operator new(0x30uLL);
  unk_2583A60 = v272;
  strcpy((char *)qword_2583A58, "SuggestRouteAddingStopsToIncreaseDestSoc_");
  v186 = operator new(0x30uLL);
  qword_2583A70 = (uint64_t)v186;
  unk_2583A78 = v273;
  _OWORD *v186 = v269[2];
  v186[1] = v269[1];
  *(_OWORD *)((char *)v186 + 28) = v269[0];
  *((unsigned char *)v186 + 44) = 0;
  qword_2583A88 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2583A90 = v271;
  strcpy((char *)qword_2583A88, "SuggestDetourWithHigherArrivalSOC_");
  v187 = operator new(0x30uLL);
  qword_2583AA0 = (uint64_t)v187;
  unk_2583AA8 = *(_OWORD *)&v265[48];
  _OWORD *v187 = *(_OWORD *)&v265[32];
  v187[1] = *(_OWORD *)&v265[16];
  *(_OWORD *)((char *)v187 + 30) = *(_OWORD *)v265;
  *((unsigned char *)v187 + 46) = 0;
  qword_2583AB8 = (uint64_t)operator new(0x28uLL);
  unk_2583AC0 = v275;
  strcpy((char *)qword_2583AB8, "SuggestRouteToDestForEVInfeasibleRoute_");
  qword_2583AD0 = (uint64_t)operator new(0x28uLL);
  unk_2583AD8 = v268;
  strcpy((char *)qword_2583AD0, "SuggestRouteRemovingStopsFromEVRoute_");
  qword_2583AE8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2583AF0 = v280;
  strcpy((char *)qword_2583AE8, "OfflineToOnlineNewRoute_");
  qword_2583B00 = (uint64_t)operator new(0x40uLL);
  unk_2583B08 = xmmword_20B98C0;
  strcpy((char *)qword_2583B00, "SuggestDetourWithHigherArrivalSOCForInfeasibleUserRoute_");
  byte_2583B2F = 20;
  strcpy(byte_2583B18, "LPR_OFFLINE_REROUTE_");
  byte_2583B47 = 16;
  strcpy((char *)&xmmword_2583B30, "LPR_OFFLINE_SAR_");
  byte_2583B5F = 20;
  strcpy(byte_2583B48, "LPR_OFFLINE_REROUTE_");
  byte_2583B77 = 16;
  strcpy((char *)&xmmword_2583B60, "LPR_OFFLINE_SAR_");
  byte_2583B8F = 19;
  strcpy(byte_2583B78, "SuggestFasterRoute_");
  qword_2583B90 = (char *)operator new(0x20uLL);
  xmmword_2583B98 = v279;
  strcpy(qword_2583B90, "AreaIncidentSaferReroute_");
  byte_2583BBF = 12;
  strcpy((char *)&qword_2583BA8, "_Remove_Stop");
  byte_2583BD7 = 13;
  strcpy((char *)&qword_2583BC0, "_Remove_Stops");
  strcpy(&byte_2583BEF, "\t_Add_Stops");
  strcpy((char *)&qword_2583BD8, "_Add_Stop");
  strcpy(&byte_2583C07, "\n_Change_Route");
  byte_2583C1F = 13;
  byte_2583C37 = 15;
  strcpy((char *)&qword_2583C20, "_Different_Stop");
  byte_2583C4F = 16;
  strcpy((char *)&xmmword_2583C38, "_Different_Stops");
  byte_2583C67 = 15;
  strcpy((char *)&qword_2583C50, "_EV_Remove_Stop");
  byte_2583C7F = 16;
  strcpy((char *)&xmmword_2583C68, "_EV_Remove_Stops");
  byte_2583C97 = 12;
  strcpy((char *)&qword_2583C80, "_EV_Add_Stop");
  byte_2583CAF = 13;
  strcpy((char *)&qword_2583C98, "_EV_Add_Stops");
  byte_2583CC7 = 15;
  strcpy((char *)&qword_2583CB0, "_EV_Low_Battery");
  byte_2583CDF = 14;
  strcpy((char *)&qword_2583CC8, "_EV_Infeasible");
  byte_2583CF7 = 15;
  strcpy((char *)&qword_2583CE0, "_EV_Last_Chance");
  qword_2583CF8 = (uint64_t)operator new(0x20uLL);
  unk_2583D00 = v280;
  strcpy((char *)qword_2583CF8, "_EV_Low_Battery_Add_Stop");
  uint64_t v188 = qword_2583BF8;
  qword_2583D10 = (uint64_t)operator new(0x20uLL);
  unk_2583D18 = v279;
  strcpy((char *)qword_2583D10, "_EV_Low_Battery_Add_Stops");
  qword_2583D28 = (uint64_t)operator new(0x19uLL);
  *(_OWORD *)algn_2583D30 = v281;
  strcpy((char *)qword_2583D28, "_EV_Infeasible_Add_Stop");
  int v189 = byte_2583C07;
  if (byte_2583C07 >= 0) {
    size_t v190 = byte_2583C07;
  }
  else {
    size_t v190 = v188;
  }
  unint64_t v191 = v190 + 14;
  if (v190 + 14 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v191 >= 0x17)
  {
    uint64_t v194 = (v191 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v191 | 7) != 0x17) {
      uint64_t v194 = v191 | 7;
    }
    uint64_t v195 = v194 + 1;
    v196 = (char *)operator new(v194 + 1);
    qword_2583D48 = v190 + 14;
    unk_2583D50 = v195 | 0x8000000000000000;
    qword_2583D40 = (uint64_t)v196;
    qmemcpy(v196, "_EV_Infeasible", 14);
    v192 = v196 + 14;
  }
  else
  {
    BYTE1(qword_2583D48) = 0;
    WORD1(qword_2583D48) = 0;
    HIDWORD(qword_2583D48) = 0;
    unk_2583D50 = 0;
    byte_2583D57 = v190 + 14;
    strcpy((char *)&qword_2583D40, "_EV_Infe");
    v192 = (char *)&qword_2583D48 + 6;
    if (!v190)
    {
      char v193 = 1;
      goto LABEL_425;
    }
  }
  if (v189 >= 0) {
    uint64_t v197 = (uint64_t)&qword_2583BF0;
  }
  else {
    uint64_t v197 = 0x6F74535F6464415FLL;
  }
  memmove(v192, (const void *)v197, v190);
  char v193 = 0;
LABEL_425:
  v192[v190] = 0;
  v198 = (char *)operator new(0x20uLL);
  qword_2583D58 = (uint64_t)v198;
  unk_2583D60 = v280;
  *(void *)v198 = qword_2583CE0;
  *(void *)(v198 + 7) = *(uint64_t *)((char *)&qword_2583CE0 + 7);
  *(void *)(v198 + 15) = qword_2583BD8;
  v198[23] = word_2583BE0;
  v198[24] = 0;
  unint64_t v199 = v190 + 15;
  if (v190 + 15 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v199 > 0x16)
  {
    uint64_t v201 = (v199 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v199 | 7) != 0x17) {
      uint64_t v201 = v199 | 7;
    }
    uint64_t v202 = v201 + 1;
    v200 = (uint64_t *)operator new(v201 + 1);
    qword_2583D78 = v190 + 15;
    unk_2583D80 = v202 | 0x8000000000000000;
    qword_2583D70 = (uint64_t)v200;
  }
  else
  {
    v200 = &qword_2583D70;
    qword_2583D78 = 0;
    unk_2583D80 = 0;
    qword_2583D70 = 0;
    byte_2583D87 = v190 + 15;
  }
  uint64_t *v200 = qword_2583CE0;
  *(uint64_t *)((char *)v200 + 7) = *(uint64_t *)((char *)&qword_2583CE0 + 7);
  v203 = (char *)v200 + 15;
  if ((v193 & 1) == 0)
  {
    if (v189 >= 0) {
      v204 = &qword_2583BF0;
    }
    else {
      v204 = (uint64_t *)qword_2583BF0;
    }
    memmove((char *)v200 + 15, v204, v190);
  }
  v203[v190] = 0;
  byte_2583D9F = 17;
  strcpy((char *)&xmmword_2583D88, "_EV_Forced_Detour");
  qword_2583DA0 = (uint64_t)operator new(0x20uLL);
  unk_2583DA8 = v279;
  strcpy((char *)qword_2583DA0, "_EV_Higher_Arrival_Charge");
  qword_2583DB8 = (uint64_t)operator new(0x28uLL);
  unk_2583DC0 = xmmword_20B8FD0;
  strcpy((char *)qword_2583DB8, "_EV_Infeasible_Higher_Arrival_Charge");
  byte_2583DE7 = 16;
  strcpy(byte_2583DD0, "_EV_Out_Of_Range");
  qword_2583DE8 = (uint64_t)operator new(0x20uLL);
  unk_2583DF0 = v274;
  strcpy((char *)qword_2583DE8, "_EV_Last_Chance_Take_Detour");
  strcpy(byte_2583E00, "_EV_Forced_Modify_Stop");
  HIBYTE(word_2583E16) = 22;
  qword_2583E18 = (uint64_t)operator new(0x19uLL);
  unk_2583E20 = v281;
  strcpy((char *)qword_2583E18, "_EV_Forced_Modify_Stops");
  byte_2583E47 = 19;
  strcpy(byte_2583E30, "_EV_Forced_Add_Stop");
  byte_2583E5F = 20;
  strcpy((char *)&xmmword_2583E48, "_EV_Forced_Add_Stops");
  byte_2583E77 = 21;
  strcpy(byte_2583E60, "_EV_Battery_Info_Lost");
  qword_2583E78 = (uint64_t)operator new(0x20uLL);
  unk_2583E80 = v279;
  strcpy((char *)qword_2583E78, "_EV_Battery_Info_Restored");
  qword_2583E90 = (uint64_t)operator new(0x20uLL);
  unk_2583E98 = v280;
  strcpy((char *)qword_2583E90, "_EV_Towing_Not_Supported");
  qword_2583EA8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2583EB0 = v270;
  strcpy((char *)qword_2583EA8, "_EV_Offline_to_Online_Transition");
  byte_2583ED7 = 15;
  strcpy((char *)&qword_2583EC0, "_EV_Offline_SAR");
  qword_2583ED8 = (uint64_t)operator new(0x20uLL);
  unk_2583EE0 = v278;
  strcpy((char *)qword_2583ED8, "_Offline_to_Online_New_Route");
  byte_2583F07 = 12;
  strcpy((char *)&qword_2583EF0, "BannerButton");
  byte_2583F1F = 8;
  strcpy((char *)&qword_2583F08, "_Dismiss");
  byte_2583F37 = 3;
  word_2583F20 = 20319;
  byte_2583F22 = 75;
  byte_2583F23 = 0;
  byte_2583F4F = 11;
  strcpy((char *)&qword_2583F38, "_Still_Here");
  byte_2583F67 = 8;
  strcpy((char *)&qword_2583F50, "_Cleared");
  qmemcpy(&byte_2583F7F, "\nBannerButton", 13);
  strcpy((char *)&qword_2583F68, "_No_Thanks");
  uint64_t v205 = qword_2583EF8;
  qword_2583F90 = 0x1400000000000000;
  *(void *)algn_2583F8C = 0x7373696D7369445FLL;
  qword_2583FA8 = 0xF00000000000000;
  qword_2583FA0 = 0x4B4F5F6E6F7474;
  int v206 = byte_2583C97;
  if (byte_2583C97 >= 0) {
    size_t v207 = byte_2583C97;
  }
  else {
    size_t v207 = qword_2583C88;
  }
  unint64_t v208 = v207 + 12;
  qword_2583F98 = *(void *)"BannerButton";
  if (v207 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v208 >= 0x17)
  {
    uint64_t v210 = (v208 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v208 | 7) != 0x17) {
      uint64_t v210 = v208 | 7;
    }
    uint64_t v211 = v210 + 1;
    v212 = (char *)operator new(v210 + 1);
    qword_2583FB8 = v207 + 12;
    unk_2583FC0 = v211 | 0x8000000000000000;
    qword_2583FB0 = (uint64_t)v212;
    *((_DWORD *)v212 + 2) = 1852798068;
    *(void *)v212 = *(void *)"BannerButton";
    v209 = v212 + 12;
  }
  else
  {
    BYTE5(qword_2583FB8) = 0;
    HIWORD(qword_2583FB8) = 0;
    unk_2583FC0 = 0;
    byte_2583FC7 = v207 + 12;
    strcpy((char *)&qword_2583FB0, "BannerButton");
    v209 = (char *)&qword_2583FB8 + 4;
    if (!v207) {
      goto LABEL_450;
    }
  }
  if (v206 >= 0) {
    v213 = &qword_2583C80;
  }
  else {
    v213 = (uint64_t *)qword_2583C80;
  }
  memmove(v209, v213, v207);
LABEL_450:
  v209[v207] = 0;
  int v214 = byte_2583CAF;
  if (byte_2583CAF >= 0) {
    size_t v215 = byte_2583CAF;
  }
  else {
    size_t v215 = unk_2583CA0;
  }
  unint64_t v216 = v215 + 12;
  if (v215 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v216 >= 0x17)
  {
    uint64_t v218 = (v216 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v216 | 7) != 0x17) {
      uint64_t v218 = v216 | 7;
    }
    uint64_t v219 = v218 + 1;
    v220 = (char *)operator new(v218 + 1);
    qword_2583FD0 = v215 + 12;
    unk_2583FD8 = v219 | 0x8000000000000000;
    qword_2583FC8 = (uint64_t)v220;
    *(void *)v220 = qword_2583EF0;
    *((_DWORD *)v220 + 2) = qword_2583EF8;
    v217 = v220 + 12;
  }
  else
  {
    qword_2583FD0 = 0;
    unk_2583FD8 = 0;
    byte_2583FDF = v215 + 12;
    LODWORD(qword_2583FD0) = qword_2583EF8;
    qword_2583FC8 = qword_2583EF0;
    v217 = (char *)&qword_2583FD0 + 4;
    if (!v215) {
      goto LABEL_464;
    }
  }
  if (v214 >= 0) {
    v221 = &qword_2583C98;
  }
  else {
    v221 = (uint64_t *)qword_2583C98;
  }
  memmove(v217, v221, v215);
LABEL_464:
  v217[v215] = 0;
  int v222 = byte_2583C67;
  if (byte_2583C67 >= 0) {
    size_t v223 = byte_2583C67;
  }
  else {
    size_t v223 = unk_2583C58;
  }
  unint64_t v224 = v223 + 12;
  if (v223 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v224 >= 0x17)
  {
    uint64_t v226 = (v224 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v224 | 7) != 0x17) {
      uint64_t v226 = v224 | 7;
    }
    uint64_t v227 = v226 + 1;
    v228 = (char *)operator new(v226 + 1);
    qword_2583FE8 = v223 + 12;
    unk_2583FF0 = v227 | 0x8000000000000000;
    qword_2583FE0 = (uint64_t)v228;
    *(void *)v228 = qword_2583EF0;
    *((_DWORD *)v228 + 2) = qword_2583EF8;
    v225 = v228 + 12;
  }
  else
  {
    qword_2583FE8 = 0;
    unk_2583FF0 = 0;
    byte_2583FF7 = v223 + 12;
    LODWORD(qword_2583FE8) = qword_2583EF8;
    qword_2583FE0 = qword_2583EF0;
    v225 = (char *)&qword_2583FE8 + 4;
    if (!v223) {
      goto LABEL_478;
    }
  }
  if (v222 >= 0) {
    v229 = &qword_2583C50;
  }
  else {
    v229 = (uint64_t *)qword_2583C50;
  }
  memmove(v225, v229, v223);
LABEL_478:
  v225[v223] = 0;
  int v230 = byte_2583F07;
  if (byte_2583F07 >= 0) {
    size_t v231 = byte_2583F07;
  }
  else {
    size_t v231 = v205;
  }
  int v232 = byte_2583C7F;
  if (byte_2583C7F >= 0) {
    size_t v233 = byte_2583C7F;
  }
  else {
    size_t v233 = *((void *)&xmmword_2583C68 + 1);
  }
  unint64_t v234 = v233 + v231;
  if (v233 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v234 <= 0x16)
  {
    v235 = &qword_2583FF8;
    qword_2584000 = 0;
    unk_2584008 = 0;
    qword_2583FF8 = 0;
    byte_258400F = v233 + v231;
    if (!v231) {
      goto LABEL_491;
    }
    goto LABEL_487;
  }
  uint64_t v242 = (v234 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v234 | 7) != 0x17) {
    uint64_t v242 = v234 | 7;
  }
  uint64_t v243 = v242 + 1;
  v235 = (uint64_t *)operator new(v242 + 1);
  qword_2584000 = v233 + v231;
  unk_2584008 = v243 | 0x8000000000000000;
  qword_2583FF8 = (uint64_t)v235;
  if (v231)
  {
LABEL_487:
    if (v230 >= 0) {
      v236 = &qword_2583EF0;
    }
    else {
      v236 = (uint64_t *)qword_2583EF0;
    }
    memmove(v235, v236, v231);
  }
LABEL_491:
  v237 = (char *)v235 + v231;
  if (v233)
  {
    if (v232 >= 0) {
      v238 = &xmmword_2583C68;
    }
    else {
      v238 = (long long *)xmmword_2583C68;
    }
    memmove(v237, v238, v233);
  }
  v237[v233] = 0;
  unint64_t v239 = v231 + 11;
  if (v231 + 11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v239 >= 0x17)
  {
    uint64_t v244 = (v239 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v239 | 7) != 0x17) {
      uint64_t v244 = v239 | 7;
    }
    uint64_t v245 = v244 + 1;
    v240 = (uint64_t *)operator new(v244 + 1);
    qword_2584018 = v231 + 11;
    unk_2584020 = v245 | 0x8000000000000000;
    qword_2584010 = (uint64_t)v240;
  }
  else
  {
    v240 = &qword_2584010;
    qword_2584018 = 0;
    unk_2584020 = 0;
    qword_2584010 = 0;
    byte_2584027 = v231 + 11;
    if (!v231)
    {
      *(_DWORD *)((char *)&qword_2584010 + 7) = *(_DWORD *)((char *)&qword_2583F38 + 7);
      qword_2584010 = qword_2583F38;
      BYTE3(qword_2584018) = 0;
      LOBYTE(v241) = 8;
      goto LABEL_512;
    }
  }
  if (v230 >= 0) {
    v246 = &qword_2583EF0;
  }
  else {
    v246 = (uint64_t *)qword_2583EF0;
  }
  memmove(v240, v246, v231);
  v247 = (char *)v240 + v231;
  int v248 = *(_DWORD *)((char *)&qword_2583F38 + 7);
  *(void *)v247 = qword_2583F38;
  *(_DWORD *)(v247 + 7) = v248;
  v247[11] = 0;
  unint64_t v241 = v231 + 8;
  if (v231 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v241 <= 0x16)
  {
LABEL_512:
    v249 = &qword_2584028;
    qword_2584030 = 0;
    unk_2584038 = 0;
    qword_2584028 = 0;
    byte_258403F = v241;
    if (!v231) {
      goto LABEL_517;
    }
    goto LABEL_513;
  }
  uint64_t v263 = (v241 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v241 | 7) != 0x17) {
    uint64_t v263 = v241 | 7;
  }
  uint64_t v264 = v263 + 1;
  v249 = (uint64_t *)operator new(v263 + 1);
  qword_2584030 = v231 + 8;
  unk_2584038 = v264 | 0x8000000000000000;
  qword_2584028 = (uint64_t)v249;
  if (v231)
  {
LABEL_513:
    if (v230 >= 0) {
      v250 = &qword_2583EF0;
    }
    else {
      v250 = (uint64_t *)qword_2583EF0;
    }
    memmove(v249, v250, v231);
  }
LABEL_517:
  v251 = (char *)v249 + v231;
  *(void *)v251 = qword_2583F50;
  v251[8] = 0;
  int v252 = byte_2583F7F;
  if (byte_2583F7F >= 0) {
    size_t v253 = byte_2583F7F;
  }
  else {
    size_t v253 = qword_2583F70;
  }
  unint64_t v254 = v253 + v231;
  if (v253 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v254 <= 0x16)
  {
    v255 = &qword_2584040;
    qword_2584048 = 0;
    unk_2584050 = 0;
    qword_2584040 = 0;
    byte_2584057 = v253 + v231;
    if (!v231) {
      goto LABEL_527;
    }
    goto LABEL_523;
  }
  uint64_t v261 = (v254 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v254 | 7) != 0x17) {
    uint64_t v261 = v254 | 7;
  }
  uint64_t v262 = v261 + 1;
  v255 = (uint64_t *)operator new(v261 + 1);
  qword_2584048 = v253 + v231;
  unk_2584050 = v262 | 0x8000000000000000;
  qword_2584040 = (uint64_t)v255;
  if (v231)
  {
LABEL_523:
    if (v230 >= 0) {
      v256 = &qword_2583EF0;
    }
    else {
      v256 = (uint64_t *)qword_2583EF0;
    }
    memmove(v255, v256, v231);
  }
LABEL_527:
  v257 = (char *)v255 + v231;
  if (v253)
  {
    if (v252 >= 0) {
      v258 = &qword_2583F68;
    }
    else {
      v258 = (uint64_t *)qword_2583F68;
    }
    memmove(v257, v258, v253);
  }
  v257[v253] = 0;
  strcpy(&byte_258406F, "\n{newroute}");
  strcpy((char *)&qword_2584058, "{roadname}");
  strcpy(&byte_2584087, "\n{count}");
  byte_258409F = 7;
  strcpy(&byte_25840B7, "\n{dur}");
  strcpy((char *)&qword_25840A0, "{duration}");
  byte_25840CF = 5;
  qword_25840D0 = (uint64_t)operator new(0x20uLL);
  unk_25840D8 = v277;
  strcpy((char *)qword_25840D0, "{PleaseProceedWithCaution}");
  byte_25840FF = 15;
  strcpy((char *)&qword_25840E8, "{UserRouteName}");
  byte_2584117 = 20;
  strcpy((char *)&xmmword_2584100, "{SuggestedRouteName}");
  byte_258412F = 18;
  strcpy(byte_2584118, "Speed_Camera_Ahead");
  qword_2584130 = (uint64_t)operator new(0x20uLL);
  unk_2584138 = v276;
  strcpy((char *)qword_2584130, "Red_Light_Camera_Ahead_Spoken");
  qword_2584148 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2584150 = v276;
  strcpy((char *)qword_2584148, "Stop_Sign_Camera_Ahead_Spoken");
  qword_2584160 = (uint64_t)operator new(0x28uLL);
  unk_2584168 = v271;
  strcpy((char *)qword_2584160, "Speed_Camera_Ahead_Multiple_Spoken");
  qword_2584178 = (uint64_t)operator new(0x28uLL);
  unk_2584180 = v266;
  strcpy((char *)qword_2584178, "Red_Light_Camera_Ahead_Multiple_Spoken");
  qword_2584190 = (uint64_t)operator new(0x20uLL);
  unk_2584198 = v278;
  strcpy((char *)qword_2584190, "Camera_Ahead_Multiple_Spoken");
  qword_25841A8 = (uint64_t)operator new(0x30uLL);
  unk_25841B0 = v267;
  strcpy((char *)qword_25841A8, "Red_Light_Camera_Speed_Camera_Ahead_Spoken");
  qword_25841C0 = (char *)operator new(0x30uLL);
  strcpy(qword_25841C0, "Stop_Sign_Camera_Speed_Camera_Ahead_Spoken");
  byte_25841EF = 16;
  xmmword_25841C8 = v267;
  strcpy(byte_25841D8, "_Speed_Limit_Mph");
  byte_2584207 = 16;
  strcpy(algn_25841F0, "_Speed_Limit_Kph");
  byte_258421F = 11;
  strcpy((char *)&qword_2584208, "Watch_Speed");
  byte_2584237 = 4;
  strcpy((char *)&dword_2584220, "_One");
  byte_258424F = 4;
  strcpy((char *)&dword_2584238, "_Two");
  byte_2584267 = 4;
  strcpy((char *)&dword_2584250, "_Few");
  byte_258427F = 5;
  strcpy((char *)&dword_2584268, "_Many");
  byte_2584297 = 6;
  strcpy((char *)&dword_2584280, "_Other");
  byte_25842AF = 4;
  strcpy((char *)&dword_2584298, "_ONE");
  byte_25842C7 = 7;
  strcpy((char *)&dword_25842B0, "{Speed}");
  byte_25842DF = 8;
  strcpy((char *)&qword_25842C8, "Dismount");
  byte_25842F7 = 4;
  strcpy((char *)&dword_25842E0, "Walk");
  byte_258430F = 5;
  strcpy((char *)&dword_25842F8, "Mount");
  byte_2584327 = 7;
  strcpy((char *)&dword_2584310, "Remount");
  strcpy(&byte_258433F, "\t_Crosswalk");
  strcpy((char *)&qword_2584328, "Walk_Road");
  strcpy(&byte_2584357, "\n_PLURAL");
  byte_258436F = 7;
  strcpy(&byte_2584387, "\n{description1}");
  strcpy((char *)&qword_2584370, "_SECONDARY");
  byte_258439F = 14;
  byte_25843B7 = 14;
  strcpy((char *)&qword_25843A0, "{description2}");
  byte_25843CF = 21;
  strcpy((char *)&xmmword_25843B8, "TWO_ROAD_DESCRIPTIONS");
  byte_25843E7 = 17;
  strcpy((char *)&xmmword_25843D0, "{SlopePercentage}");
  byte_25843FF = 15;
  strcpy((char *)&xmmword_25843E8, "_Protected_Lane");
  strcpy(&byte_2584417, "\n_Paved_Path");
  strcpy((char *)&xmmword_2584400, "_Bike_Path");
  byte_258442F = 11;
  byte_2584447 = 15;
  strcpy((char *)&qword_2584430, "_Dedicated_Lane");
  byte_258445F = 12;
  strcpy((char *)&xmmword_2584448, "_Shared_Path");
  strcpy(&byte_2584477, "\n_UnnamedRoad");
  strcpy((char *)&xmmword_2584460, "_Bike_Lane");
  byte_258448F = 12;
  byte_25844A7 = 5;
  strcpy((char *)&xmmword_2584490, "_Path");
  byte_25844BF = 6;
  strcpy((char *)&xmmword_25844A8, "_Trail");
  strcpy(&byte_25844D7, "\t_Plaza");
  strcpy((char *)&xmmword_25844C0, "_Sidewalk");
  byte_25844EF = 6;
  byte_2584507 = 15;
  strcpy((char *)&qword_25844F0, "_Moving_Walkway");
  byte_258451F = 14;
  strcpy((char *)&qword_2584508, "Two_Stage_Turn");
  byte_2584537 = 16;
  strcpy((char *)&xmmword_2584520, "{OptionalPeriod}");
  byte_258454F = 18;
  strcpy((char *)&xmmword_2584538, "Advisory_Separator");
  byte_2584567 = 6;
  strcpy((char *)&dword_2584550, "Period");
  byte_258457F = 21;
  strcpy((char *)&xmmword_2584568, "Advisory_Title_Notice");
  strcpy((char *)&xmmword_2584580, "Advisory_Title_Notices");
  HIBYTE(word_2584596) = 22;
  byte_25845AF = 7;
  strcpy((char *)&dword_2584598, "_DETAIL");
  byte_25845C7 = 17;
  strcpy((char *)&xmmword_25845B0, "_LONG_REGION_LIST");
  byte_25845DF = 16;
  strcpy((char *)&xmmword_25845C8, "Advisory_Grouped");
  byte_25845F7 = 11;
  strcpy((char *)&qword_25845E0, "_Advisories");
  qword_25845F8 = (uint64_t)operator new(0x20uLL);
  unk_2584600 = v274;
  strcpy((char *)qword_25845F8, "Advisory_WILDFIRE_METADATA_");
  byte_2584627 = 8;
  strcpy((char *)&qword_2584610, "Advisory");
  byte_258463F = 13;
  strcpy((char *)&qword_2584628, "MPR_NUM_STOPS");
  byte_2584657 = 17;
  strcpy(byte_2584640, "EV_CHARGE_STATION");
  byte_258466F = 11;
  strcpy((char *)&qword_2584658, "_NAMED_CITY");
  byte_2584687 = 5;
  strcpy((char *)&dword_2584670, "_Stop");
  strcpy(&byte_258469F, "\n{StopsCount}");
  strcpy((char *)&qword_2584688, "{CityName}");
  byte_25846B7 = 12;
  byte_25846CF = 11;
  strcpy((char *)&qword_25846B8, "_With_Other");
  byte_25846E7 = 15;
  strcpy((char *)&qword_25846D0, "{DepartureTime}");
  qword_25846E8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25846F0 = v275;
  strcpy((char *)qword_25846E8, "Ending_Charge_Station_Port_Availability");
  qword_2584700 = (uint64_t)operator new(0x28uLL);
  unk_2584708 = v268;
  strcpy((char *)qword_2584700, "Ending_Charge_Station_No_Availability");
  qword_2584718 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2584720 = v271;
  strcpy((char *)qword_2584718, "Ending_Charge_Station_No_Real_Time");
  byte_2584747 = 16;
  strcpy(&algn_2584720[16], "{AvailablePorts}");
  byte_258475F = 12;
  strcpy((char *)&qword_2584748, "{TotalPorts}");
  byte_2584777 = 14;
  strcpy((char *)&qword_2584760, "{ManeuverIcon}");
  qword_2584778 = (uint64_t)operator new(0x38uLL);
  unk_2584780 = xmmword_20B9A60;
  strcpy((char *)qword_2584778, "Walking_Distance_ManeuverIcon_PrimaryInstruction");
  qword_2584790 = (uint64_t)operator new(0x20uLL);
  unk_2584798 = v274;
  strcpy((char *)qword_2584790, "Walking_Destination_Unnamed");
  qword_25847A8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25847B0 = v276;
  strcpy((char *)qword_25847A8, "TrafficDelay_Label_Title_Sign");
  qword_25847C0 = (uint64_t)operator new(0x20uLL);
  unk_25847C8 = v278;
  strcpy((char *)qword_25847C0, "Special_Guidance_Instruction");
  byte_25847EF = 2;
  strcpy((char *)&word_25847D8, "CZ");
  byte_2584807 = 3;
  dword_25847F0 = 5919811;
  unk_258481F = 3;
  dword_2584808 = 6243649;
  byte_2584837 = 0;
  byte_258484F = 7;
  strcpy((char *)&dword_2584838, "TRANSIT");
  byte_2584867 = 7;
  strcpy((char *)&dword_2584850, "OFFLINE");
  qword_2584868 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2584870 = v266;
  strcpy((char *)qword_2584868, "Advisory_Card_French_Climate_Law_Title");
  qword_2584880 = (uint64_t)operator new(0x30uLL);
  unk_2584888 = xmmword_20B93C0;
  strcpy((char *)qword_2584880, "Advisory_Card_French_Climate_Law_Details");
  qword_2584898 = (uint64_t)operator new(0x30uLL);
  unk_25848A0 = v272;
  strcpy((char *)qword_2584898, "French_Climate_Law_Metadata_Weblink_Title");
  qword_25848B0 = (uint64_t)operator new(0x20uLL);
  unk_25848B8 = v278;
  strcpy((char *)qword_25848B0, "{ClimateLawLearnMoreWeblink}");
  byte_25848DF = 3;
  dword_25848C8 = 4280902;
  qword_25848E0 = (uint64_t)operator new(0x70uLL);
  unk_25848E8 = xmmword_20E81E0;
  strcpy((char *)qword_25848E0, "https://www.vie-publique.fr/loi/278460-loi-22-aout-2021-climat-et-resilience-convention-citoyenne-climat");
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst, "UNKNOWN");
  *(_DWORD *)v284 = 0;
  HIBYTE(v285[0]) = 14;
  strcpy(&v284[8], "ROUTES_THROUGH");
  LODWORD(v285[1]) = 1;
  v286[23] = 9;
  strcpy(v286, "ROUTES_TO");
  LODWORD(v287) = 3;
  HIBYTE(v289) = 11;
  strcpy((char *)v288, "ROUTES_FROM");
  LODWORD(v290) = 2;
  xmmword_2584958 = 0u;
  xmmword_2584968 = 0u;
  dword_2584978 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2584958, (uint64_t)&__dst, (uint64_t)&__dst);
  sub_3A6EF0((uint64_t)&xmmword_2584958, (uint64_t)&v284[8], (uint64_t)&v284[8]);
  sub_3A6EF0((uint64_t)&xmmword_2584958, (uint64_t)v286, (uint64_t)v286);
  sub_3A6EF0((uint64_t)&xmmword_2584958, (uint64_t)v288, (uint64_t)v288);
  if (SHIBYTE(v289) < 0)
  {
    operator delete(v288[0]);
    if ((v286[23] & 0x80000000) == 0)
    {
LABEL_534:
      if ((SHIBYTE(v285[0]) & 0x80000000) == 0) {
        goto LABEL_535;
      }
LABEL_547:
      operator delete(*(void **)&v284[8]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_536;
      }
LABEL_548:
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_536;
    }
  }
  else if ((v286[23] & 0x80000000) == 0)
  {
    goto LABEL_534;
  }
  operator delete(*(void **)v286);
  if (SHIBYTE(v285[0]) < 0) {
    goto LABEL_547;
  }
LABEL_535:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_548;
  }
LABEL_536:
  qword_2584900 = 0;
  qword_2584908 = 0;
  qword_25848F8 = 0;
  v259 = operator new(9uLL);
  *(void *)v259 = 0x4020C000103050DLL;
  v259[8] = 6;
  qword_25848F8 = (uint64_t)v259;
  qword_2584900 = (uint64_t)(v259 + 9);
  qword_2584908 = (uint64_t)(v259 + 9);
  qword_2584910 = 0;
  qword_2584918 = 0;
  unk_2584920 = 0;
  BOOL result = (char *)operator new(9uLL);
  qword_2584918 = (uint64_t)(result + 9);
  unk_2584920 = result + 9;
  *(void *)BOOL result = 0x604020C00010305;
  result[8] = 13;
  qword_2584910 = (uint64_t)result;
  byte_258493F = 17;
  strcpy((char *)&qword_2584928, "Annotation_Title_");
  byte_2584957 = 19;
  strcpy((char *)&xmmword_2584940, "Annotation_Details_");
  return result;
}

void sub_5F17F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3B7]) < 0)
  {
    operator delete((void *)STACK[0x3A0]);
    if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x387]) < 0) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  operator delete((void *)STACK[0x388]);
  if (SLOBYTE(STACK[0x387]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x370]);
    if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (SLOBYTE(STACK[0x357]) < 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)STACK[0x358]);
  if (SLOBYTE(STACK[0x357]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x340]);
    if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x327]) < 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete((void *)STACK[0x328]);
  if (SLOBYTE(STACK[0x327]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x310]);
    if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0)
  {
LABEL_9:
    if (SLOBYTE(STACK[0x2F7]) < 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)STACK[0x2F8]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
  {
LABEL_10:
    operator delete((void *)STACK[0x2E0]);
    if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
  {
LABEL_11:
    if (SLOBYTE(STACK[0x2C7]) < 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x2C8]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
  {
LABEL_12:
    operator delete((void *)STACK[0x2B0]);
    if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0)
  {
LABEL_13:
    if (SLOBYTE(STACK[0x297]) < 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete((void *)STACK[0x298]);
  if (SLOBYTE(STACK[0x297]) < 0)
  {
LABEL_14:
    operator delete((void *)STACK[0x280]);
    if (SLOBYTE(STACK[0x27F]) < 0)
    {
LABEL_36:
      operator delete((void *)STACK[0x268]);
      if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0)
      {
LABEL_37:
        if (SLOBYTE(STACK[0x24F]) < 0)
        {
LABEL_38:
          operator delete((void *)STACK[0x238]);
          if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
          {
LABEL_39:
            if (SLOBYTE(STACK[0x21F]) < 0)
            {
LABEL_40:
              operator delete((void *)STACK[0x208]);
              if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
              {
LABEL_41:
                if (a72 < 0) {
                  goto LABEL_42;
                }
                goto LABEL_44;
              }
LABEL_34:
              operator delete(a73);
              if (a72 < 0)
              {
LABEL_42:
                operator delete(a71);
                if ((a70 & 0x80000000) == 0) {
                  goto LABEL_43;
                }
                goto LABEL_45;
              }
LABEL_44:
              if ((a70 & 0x80000000) == 0) {
LABEL_43:
              }
                _Unwind_Resume(a1);
LABEL_45:
              operator delete(a65);
              _Unwind_Resume(a1);
            }
LABEL_33:
            if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0) {
              goto LABEL_41;
            }
            goto LABEL_34;
          }
LABEL_32:
          operator delete((void *)STACK[0x220]);
          if (SLOBYTE(STACK[0x21F]) < 0) {
            goto LABEL_40;
          }
          goto LABEL_33;
        }
LABEL_31:
        if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0) {
          goto LABEL_39;
        }
        goto LABEL_32;
      }
LABEL_30:
      operator delete((void *)STACK[0x250]);
      if (SLOBYTE(STACK[0x24F]) < 0) {
        goto LABEL_38;
      }
      goto LABEL_31;
    }
LABEL_29:
    if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
LABEL_28:
  if (SLOBYTE(STACK[0x27F]) < 0) {
    goto LABEL_36;
  }
  goto LABEL_29;
}

void sub_5F1B4C()
{
  byte_2584997 = 1;
  word_2584980 = 65;
  byte_25849AF = 1;
  word_2584998 = 65;
  char v1 = 7;
  strcpy((char *)v0, "UNKNOWN");
  int v2 = 0;
  char v4 = 14;
  strcpy((char *)v3, "ROUTES_THROUGH");
  int v5 = 1;
  char v7 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v8 = 3;
  char v10 = 11;
  strcpy((char *)v9, "ROUTES_FROM");
  int v11 = 2;
  xmmword_25849B0 = 0u;
  *(_OWORD *)&qword_25849C0 = 0u;
  dword_25849D0 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25849B0, (uint64_t)v0, (uint64_t)v0);
  sub_3A6EF0((uint64_t)&xmmword_25849B0, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25849B0, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25849B0, (uint64_t)v9, (uint64_t)v9);
  if (v10 < 0)
  {
    operator delete(v9[0]);
    if ((v7 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v1 & 0x80000000) == 0) {
      return;
    }
LABEL_9:
    operator delete(v0[0]);
    return;
  }
LABEL_8:
  operator delete(v3[0]);
  if (v1 < 0) {
    goto LABEL_9;
  }
}

void sub_5F1D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25849C0) {
    sub_20AA098((void **)qword_25849C0);
  }
  uint64_t v37 = (void *)xmmword_25849B0;
  *(void *)&xmmword_25849B0 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

char *sub_5F1DD0(char *__dst, long long *a2, char a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v5;
  }
  __dst[24] = a3;
  *(void *)(__dst + 28) = -1;
  *(_OWORD *)(__dst + 40) = 0u;
  *(_OWORD *)(__dst + 56) = 0u;
  *(_OWORD *)(__dst + 72) = 0u;
  *(_OWORD *)(__dst + 84) = 0u;
  __dst[100] = 1;
  *(_OWORD *)(__dst + 104) = 0u;
  *(_OWORD *)(__dst + 120) = 0u;
  *((_DWORD *)__dst + 34) = 0x7FFFFFFF;
  return __dst;
}

void sub_5F1E5C(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v3;
  }
  __dst[24] = 9;
  *(void *)(__dst + 28) = -1;
  operator new();
}

char *sub_5F1F3C(char *__dst, long long *a2, char a3, _DWORD *a4, uint64_t a5, char a6)
{
  char v12 = a6;
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v10 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v10;
  }
  *(_OWORD *)(__dst + 40) = 0u;
  __dst[24] = a3;
  *(void *)(__dst + 28) = -1;
  *(_OWORD *)(__dst + 56) = 0u;
  *(_OWORD *)(__dst + 72) = 0u;
  *(_OWORD *)(__dst + 84) = 0u;
  __dst[100] = 1;
  *(_OWORD *)(__dst + 104) = 0u;
  *(_OWORD *)(__dst + 120) = 0u;
  *((_DWORD *)__dst + 34) = 0x7FFFFFFF;
  *((void *)__dst + 9) = sub_5F8744((char **)__dst + 8, a4, a5, &v12);
  return __dst;
}

void sub_5F202C(_Unwind_Exception *a1)
{
  sub_5F20E4((void ***)(v1 + 128));
  sub_4F4710((uint64_t *)(v1 + 120));
  sub_4F4774((uint64_t *)(v1 + 112));
  sub_4F47CC(v7);
  uint64_t v9 = *(void *)(v1 + 88);
  *(void *)(v1 + 88) = 0;
  if (v9)
  {
    sub_4F48F0(v6, v9);
    sub_2DE7D0(v5);
    uint64_t v10 = *v4;
    *char v4 = 0;
    if (!v10)
    {
LABEL_3:
      sub_4F4840(v3);
      sub_4F4898(v2);
      if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    sub_2DE7D0(v5);
    uint64_t v10 = *v4;
    *char v4 = 0;
    if (!v10) {
      goto LABEL_3;
    }
  }
  sub_4F49E8((uint64_t)v4, v10);
  sub_4F4840(v3);
  sub_4F4898(v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

void ***sub_5F20E4(void ***a1)
{
  int v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_5F8260(v2);
    operator delete();
  }
  return a1;
}

char *sub_5F212C(char *__dst, long long *a2, char a3, void *a4, uint64_t a5, char a6)
{
  char v18 = a6;
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v10 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v10;
  }
  *(_OWORD *)(__dst + 40) = 0u;
  __dst[24] = a3;
  *(_OWORD *)(__dst + 56) = 0u;
  *(void *)(__dst + 28) = -1;
  *(_OWORD *)(__dst + 72) = 0u;
  *(_OWORD *)(__dst + 84) = 0u;
  __dst[100] = 1;
  *(_OWORD *)(__dst + 104) = 0u;
  *(_OWORD *)(__dst + 120) = 0u;
  *((_DWORD *)__dst + 34) = 0x7FFFFFFF;
  sub_2DF71C((uint64_t)(__dst + 64), (uint64_t)(a4[1] - *a4) >> 2);
  int v11 = (_DWORD *)*a4;
  char v12 = (_DWORD *)a4[1];
  if ((_DWORD *)*a4 != v12)
  {
    size_t v13 = (char *)*((void *)__dst + 9);
    do
    {
      while ((unint64_t)v13 >= *((void *)__dst + 10))
      {
        size_t v13 = sub_5F8744((char **)__dst + 8, v11, a5, &v18);
        *((void *)__dst + 9) = v13;
        if (++v11 == v12) {
          return __dst;
        }
      }
      char v14 = v18;
      *(_DWORD *)size_t v13 = *v11;
      int64_t v15 = v13 + 8;
      if (*(char *)(a5 + 23) < 0)
      {
        sub_4200(v15, *(void **)a5, *(void *)(a5 + 8));
      }
      else
      {
        long long v16 = *(_OWORD *)a5;
        *((void *)v13 + 3) = *(void *)(a5 + 16);
        *(_OWORD *)int64_t v15 = v16;
      }
      v13[32] = v14;
      v13 += 40;
      *((void *)__dst + 9) = v13;
      *((void *)__dst + 9) = v13;
      ++v11;
    }
    while (v11 != v12);
  }
  return __dst;
}

void sub_5F22B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  sub_5F20E4((void ***)(v10 + 88));
  sub_4F4710(v13);
  sub_4F4774((uint64_t *)(v10 + 72));
  sub_4F47CC(v12);
  uint64_t v15 = *(void *)(v10 + 48);
  *(void *)(v10 + 48) = 0;
  if (v15)
  {
    sub_4F48F0(v10 + 48, v15);
    sub_2DE7D0(v11);
    uint64_t v16 = *a9;
    *a9 = 0;
    if (!v16)
    {
LABEL_3:
      sub_4F4840((uint64_t *)(v10 + 8));
      sub_4F4898((uint64_t *)v10);
      if ((*(char *)(v9 + 23) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    sub_2DE7D0(v11);
    uint64_t v16 = *a9;
    *a9 = 0;
    if (!v16) {
      goto LABEL_3;
    }
  }
  sub_4F49E8((uint64_t)a9, v16);
  sub_4F4840((uint64_t *)(v10 + 8));
  sub_4F4898((uint64_t *)v10);
  if ((*(char *)(v9 + 23) & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(*(void **)v9);
  _Unwind_Resume(a1);
}

void sub_5F2388(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v3;
  }
  *(_OWORD *)(__dst + 40) = 0u;
  __dst[24] = 10;
  *(void *)(__dst + 28) = -1;
  *(_OWORD *)(__dst + 56) = 0u;
  *(_OWORD *)(__dst + 72) = 0u;
  *(_OWORD *)(__dst + 84) = 0u;
  *(_OWORD *)(__dst + 104) = 0u;
  __dst[100] = 1;
  *(_OWORD *)(__dst + 120) = 0u;
  *((_DWORD *)__dst + 34) = 0x7FFFFFFF;
  operator new();
}

void sub_5F2480()
{
}

char *sub_5F2564(char *__dst, long long *a2, char a3, _DWORD *a4)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v7;
  }
  __dst[24] = a3;
  *(void *)(__dst + 28) = -1;
  *(_OWORD *)(__dst + 40) = 0u;
  *(_OWORD *)(__dst + 56) = 0u;
  *(_OWORD *)(__dst + 72) = 0u;
  *((void *)__dst + 11) = 0;
  *((_DWORD *)__dst + 24) = *a4;
  __dst[100] = 1;
  *(_OWORD *)(__dst + 120) = 0u;
  *(_OWORD *)(__dst + 104) = 0u;
  *((_DWORD *)__dst + 34) = 0x7FFFFFFF;
  return __dst;
}

void sub_5F2604(char *__dst, long long *a2, int a3, uint64_t a4)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v7;
  }
  *(_OWORD *)(__dst + 40) = 0u;
  __dst[24] = 10;
  *(void *)(__dst + 28) = -1;
  *(_OWORD *)(__dst + 56) = 0u;
  *(_OWORD *)(__dst + 72) = 0u;
  *(_OWORD *)(__dst + 84) = 0u;
  *(_OWORD *)(__dst + 104) = 0u;
  __dst[100] = 1;
  *(_OWORD *)(__dst + 120) = 0u;
  *((_DWORD *)__dst + 34) = 0x7FFFFFFF;
  v8[0] = a3;
  v8[1] = 0xFFFFFF;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_4200(v9, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)a4;
    v9[2] = *(void **)(a4 + 16);
  }
  sub_524ADC((uint64_t)&v10, (uint64_t)v8, 0);
  operator new();
}

void sub_5F2950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_5F2A7C(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v3;
  }
  __dst[24] = 7;
  *(void *)(__dst + 28) = -1;
  *((void *)__dst + 5) = 0;
  operator new();
}

void sub_5F2B70(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v3;
  }
  __dst[24] = 13;
  *(void *)(__dst + 28) = -1;
  *(_OWORD *)(__dst + 40) = 0u;
  *(_OWORD *)(__dst + 56) = 0u;
  *(_OWORD *)(__dst + 72) = 0u;
  *(_OWORD *)(__dst + 84) = 0u;
  __dst[100] = 1;
  sub_5F82BC();
}

uint64_t sub_5F2C0C(uint64_t a1, uint64_t a2, uint64_t *a3, long long *a4, long long *a5)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v10 = *(const void **)a2;
  uint64_t v9 = *(void *)(a2 + 8);
  int64_t v11 = v9 - *(void *)a2;
  if (v9 != *(void *)a2)
  {
    if (v11 < 0) {
      sub_2E00();
    }
    char v12 = (char *)operator new(v9 - *(void *)a2);
    *(void *)a1 = v12;
    *(void *)(a1 + 8) = v12;
    size_t v13 = &v12[4 * (v11 >> 2)];
    *(void *)(a1 + 16) = v13;
    memcpy(v12, v10, v11);
    *(void *)(a1 + 8) = v13;
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_4F6448((char *)(a1 + 24), *a3, a3[1], (a3[1] - *a3) >> 5);
  if (*((char *)a4 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 48), *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v14 = *a4;
    *(void *)(a1 + 64) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 48) = v14;
  }
  uint64_t v15 = (unsigned char *)(a1 + 72);
  if (*((char *)a5 + 23) < 0)
  {
    sub_4200(v15, *(void **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v16 = *a5;
    *(void *)(a1 + 88) = *((void *)a5 + 2);
    *(_OWORD *)uint64_t v15 = v16;
  }
  return a1;
}

void sub_5F2D14(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  sub_3D4D90(v2);
  long long v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_5F2D5C(uint64_t __dst, long long *a2, char a3)
{
  uint64_t v4 = __dst;
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200((unsigned char *)__dst, *(void **)a2, *((void *)a2 + 1));
    *(unsigned char *)(v4 + 24) = a3;
    return v4;
  }
  else
  {
    long long v5 = *a2;
    *(void *)(__dst + 16) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v5;
    *(unsigned char *)(__dst + 24) = a3;
  }
  return __dst;
}

uint64_t sub_5F2DC4(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_DWORD **)a1;
  int v2 = *(_DWORD **)(a1 + 8);
  uint64_t v4 = *(_DWORD **)a2;
  if ((_DWORD *)((char *)v2 - *(void *)a1) != (_DWORD *)(*(void *)(a2 + 8) - *(void *)a2)) {
    return 0;
  }
  if (v3 != v2)
  {
    while (*v3 == *v4)
    {
      ++v3;
      ++v4;
      if (v3 == v2) {
        goto LABEL_5;
      }
    }
    return 0;
  }
LABEL_5:
  uint64_t v7 = *(unsigned __int8 *)(a1 + 71);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = *(unsigned __int8 *)(a1 + 71);
  }
  else {
    uint64_t v8 = *(void *)(a1 + 56);
  }
  uint64_t v9 = *(unsigned __int8 *)(a2 + 71);
  int v10 = (char)v9;
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *(void *)(a2 + 56);
  }
  if (v8 != v9) {
    return 0;
  }
  int64_t v11 = (const void **)(a1 + 48);
  char v12 = v10 >= 0 ? (unsigned __int8 *)(a2 + 48) : *(unsigned __int8 **)(a2 + 48);
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*v11, v12, *(void *)(a1 + 56))) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 71))
  {
    while (*(unsigned __int8 *)v11 == *v12)
    {
      int64_t v11 = (const void **)((char *)v11 + 1);
      ++v12;
      if (!--v7) {
        goto LABEL_22;
      }
    }
    return 0;
  }
LABEL_22:
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  long long v16 = *(unsigned __int8 ***)(a2 + 24);
  if (v14 - v15 != *(void *)(a2 + 32) - (void)v16) {
    return 0;
  }
  if (v15 != v14)
  {
    while (*(unsigned __int8 *)(v15 + 24) == *((unsigned __int8 *)v16 + 24))
    {
      uint64_t v17 = *(unsigned __int8 *)(v15 + 23);
      if ((v17 & 0x80u) == 0) {
        char v18 = (unsigned __int8 *)*(unsigned __int8 *)(v15 + 23);
      }
      else {
        char v18 = *(unsigned __int8 **)(v15 + 8);
      }
      uint64_t v19 = (unsigned __int8 *)*((unsigned __int8 *)v16 + 23);
      int v20 = (char)v19;
      if ((char)v19 < 0) {
        uint64_t v19 = v16[1];
      }
      if (v18 != v19) {
        break;
      }
      if (v20 >= 0) {
        uint64_t v21 = (unsigned __int8 *)v16;
      }
      else {
        uint64_t v21 = *v16;
      }
      if ((v17 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v15, v21, *(void *)(v15 + 8))) {
          return 0;
        }
      }
      else if (*(unsigned char *)(v15 + 23))
      {
        uint64_t v22 = 0;
        while (*(unsigned __int8 *)(v15 + v22) == v21[v22])
        {
          if (v17 == ++v22) {
            goto LABEL_41;
          }
        }
        return 0;
      }
LABEL_41:
      v15 += 32;
      v16 += 4;
      if (v15 == v14) {
        goto LABEL_42;
      }
    }
    return 0;
  }
LABEL_42:
  uint64_t v23 = *(unsigned __int8 *)(a1 + 95);
  if ((v23 & 0x80u) == 0) {
    uint64_t v24 = *(unsigned __int8 *)(a1 + 95);
  }
  else {
    uint64_t v24 = *(void *)(a1 + 80);
  }
  uint64_t v25 = *(unsigned __int8 *)(a2 + 95);
  int v26 = (char)v25;
  if ((v25 & 0x80u) != 0) {
    uint64_t v25 = *(void *)(a2 + 80);
  }
  if (v24 != v25) {
    return 0;
  }
  uint64_t v27 = (const void **)(a1 + 72);
  long long v30 = *(unsigned __int8 **)(a2 + 72);
  int v29 = (unsigned __int8 *)(a2 + 72);
  uint64_t v28 = v30;
  if (v26 >= 0) {
    int v31 = v29;
  }
  else {
    int v31 = v28;
  }
  if ((v23 & 0x80) != 0) {
    return memcmp(*v27, v31, *(void *)(a1 + 80)) == 0;
  }
  if (!*(unsigned char *)(a1 + 95)) {
    return 1;
  }
  uint64_t v32 = v23 - 1;
  do
  {
    int v34 = *(unsigned __int8 *)v27;
    uint64_t v27 = (const void **)((char *)v27 + 1);
    int v33 = v34;
    int v36 = *v31++;
    int v35 = v36;
    BOOL v38 = v32-- != 0;
    uint64_t result = v33 == v35;
  }
  while (v33 == v35 && v38);
  return result;
}

float *sub_5F3030(float *result, float a2)
{
  *uint64_t result = a2;
  return result;
}

unsigned char *sub_5F3038(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

uint64_t sub_5F3040(uint64_t a1, int a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v6 = *(const void **)a3;
  uint64_t v5 = *(void *)(a3 + 8);
  uint64_t v7 = v5 - *(void *)a3;
  if (v5 != *(void *)a3)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v5 - *(void *)a3);
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v8;
    uint64_t v9 = &v8[4 * (v7 >> 2)];
    *(void *)(a1 + 24) = v9;
    memcpy(v8, v6, v7 - 1);
    *(void *)(a1 + 16) = v9;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a3 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a3 + 32);
  return a1;
}

void sub_5F30DC(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_5F30F8(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = (unsigned __int8 **)*a2;
  if (v2 - *a1 != a2[1] - *a2) {
    return 0;
  }
  for (; v3 != v2; v4 += 3)
  {
    uint64_t v7 = *(unsigned __int8 *)(v3 + 23);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
    }
    else {
      uint64_t v8 = *(unsigned __int8 **)(v3 + 8);
    }
    uint64_t v9 = (unsigned __int8 *)*((unsigned __int8 *)v4 + 23);
    int v10 = (char)v9;
    if ((char)v9 < 0) {
      uint64_t v9 = v4[1];
    }
    if (v8 != v9) {
      return 0;
    }
    if (v10 >= 0) {
      int64_t v11 = (unsigned __int8 *)v4;
    }
    else {
      int64_t v11 = *v4;
    }
    if ((v7 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v3, v11, *(void *)(v3 + 8))) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v3 + 23))
    {
      uint64_t v12 = 0;
      while (*(unsigned __int8 *)(v3 + v12) == v11[v12])
      {
        if (v7 == ++v12) {
          goto LABEL_19;
        }
      }
      return 0;
    }
LABEL_19:
    v3 += 24;
  }
  uint64_t v14 = a1[6];
  uint64_t v13 = a1[7];
  uint64_t v15 = (unsigned __int8 **)a2[6];
  if (v13 - v14 != a2[7] - (void)v15) {
    return 0;
  }
  for (; v14 != v13; v15 += 3)
  {
    uint64_t v16 = *(unsigned __int8 *)(v14 + 23);
    if ((v16 & 0x80u) == 0) {
      uint64_t v17 = (unsigned __int8 *)*(unsigned __int8 *)(v14 + 23);
    }
    else {
      uint64_t v17 = *(unsigned __int8 **)(v14 + 8);
    }
    char v18 = (unsigned __int8 *)*((unsigned __int8 *)v15 + 23);
    int v19 = (char)v18;
    if ((char)v18 < 0) {
      char v18 = v15[1];
    }
    if (v17 != v18) {
      return 0;
    }
    if (v19 >= 0) {
      int v20 = (unsigned __int8 *)v15;
    }
    else {
      int v20 = *v15;
    }
    if ((v16 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v14, v20, *(void *)(v14 + 8))) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v14 + 23))
    {
      uint64_t v21 = 0;
      while (*(unsigned __int8 *)(v14 + v21) == v20[v21])
      {
        if (v16 == ++v21) {
          goto LABEL_38;
        }
      }
      return 0;
    }
LABEL_38:
    v14 += 24;
  }
  uint64_t v22 = (unsigned __int8 *)a1[3];
  uint64_t v23 = (unsigned __int8 *)a1[4];
  uint64_t v24 = (unsigned __int8 *)a2[3];
  if (v23 - v22 != a2[4] - (void)v24) {
    return 0;
  }
  if (v22 == v23)
  {
LABEL_43:
    uint64_t v26 = a1[12];
    uint64_t v27 = a2[12];
    if ((v26 != 0) == (v27 != 0))
    {
      if (!v26) {
        goto LABEL_51;
      }
      uint64_t result = sub_5F30F8(a1[12], a2[12]);
      if (!result) {
        return result;
      }
      if (*(_DWORD *)(v26 + 160) == *(_DWORD *)(v27 + 160) && *(_DWORD *)(v26 + 164) == *(_DWORD *)(v27 + 164))
      {
LABEL_51:
        long long v30 = a1 + 9;
        uint64_t v28 = a1[9];
        uint64_t v29 = v30[1];
        uint64_t v32 = a2 + 9;
        int v31 = (unsigned __int8 **)a2[9];
        if (v29 - v28 == v32[1] - (void)v31)
        {
          if (v28 == v29) {
            return 1;
          }
          while (1)
          {
            uint64_t v33 = *(unsigned __int8 *)(v28 + 23);
            if ((v33 & 0x80u) == 0) {
              int v34 = (unsigned __int8 *)*(unsigned __int8 *)(v28 + 23);
            }
            else {
              int v34 = *(unsigned __int8 **)(v28 + 8);
            }
            int v35 = (unsigned __int8 *)*((unsigned __int8 *)v31 + 23);
            int v36 = (char)v35;
            if ((char)v35 < 0) {
              int v35 = v31[1];
            }
            if (v34 != v35) {
              break;
            }
            if (v36 >= 0) {
              uint64_t v37 = (unsigned __int8 *)v31;
            }
            else {
              uint64_t v37 = *v31;
            }
            if ((v33 & 0x80) != 0)
            {
              if (memcmp(*(const void **)v28, v37, *(void *)(v28 + 8))) {
                return 0;
              }
            }
            else if (*(unsigned char *)(v28 + 23))
            {
              uint64_t v38 = 0;
              while (*(unsigned __int8 *)(v28 + v38) == v37[v38])
              {
                if (v33 == ++v38) {
                  goto LABEL_69;
                }
              }
              return 0;
            }
LABEL_69:
            if (*(unsigned __int8 *)(v28 + 24) != *((unsigned __int8 *)v31 + 24)) {
              return 0;
            }
            v28 += 32;
            v31 += 4;
            uint64_t result = 1;
            if (v28 == v29) {
              return result;
            }
          }
        }
      }
    }
    return 0;
  }
  while (1)
  {
    uint64_t result = sub_5F33F8(v22, v24);
    if (!result) {
      return result;
    }
    v22 += 144;
    v24 += 144;
    if (v22 == v23) {
      goto LABEL_43;
    }
  }
}

uint64_t sub_5F33F8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  uint64_t v6 = a2;
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((void *)a1 + 1))) {
      return 0;
    }
  }
  else if (a1[23])
  {
    uint64_t v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2) {
        goto LABEL_18;
      }
    }
    return 0;
  }
LABEL_18:
  if (a1[24] != v6[24] || *((_DWORD *)a1 + 7) != *((_DWORD *)v6 + 7) || *((_DWORD *)a1 + 8) != *((_DWORD *)v6 + 8)) {
    return 0;
  }
  int v10 = (unsigned __int8 *)*((void *)a1 + 5);
  int64_t v11 = (unsigned __int8 **)*((void *)v6 + 5);
  if (v10)
  {
    if (!v11) {
      return 0;
    }
    uint64_t v12 = v10[23];
    if ((v12 & 0x80u) == 0) {
      uint64_t v13 = (unsigned __int8 *)v10[23];
    }
    else {
      uint64_t v13 = (unsigned __int8 *)*((void *)v10 + 1);
    }
    uint64_t v14 = (unsigned __int8 *)*((unsigned __int8 *)v11 + 23);
    int v15 = (char)v14;
    if ((char)v14 < 0) {
      uint64_t v14 = v11[1];
    }
    if (v13 != v14) {
      return 0;
    }
    if (v15 >= 0) {
      uint64_t v16 = (unsigned __int8 *)*((void *)v6 + 5);
    }
    else {
      uint64_t v16 = *v11;
    }
    if ((v12 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v10, v16, *((void *)v10 + 1))) {
        return 0;
      }
    }
    else if (v10[23])
    {
      while (*v10 == *v16)
      {
        ++v10;
        ++v16;
        if (!--v12) {
          goto LABEL_38;
        }
      }
      return 0;
    }
  }
  else if (v11)
  {
    return 0;
  }
LABEL_38:
  uint64_t v17 = *((void *)a1 + 6);
  uint64_t v18 = *((void *)v6 + 6);
  if (v17)
  {
    if (!v18 || *(_DWORD *)v17 != *(_DWORD *)v18) {
      return 0;
    }
    uint64_t v19 = *(unsigned __int8 *)(v17 + 31);
    if ((v19 & 0x80u) == 0) {
      uint64_t v20 = *(unsigned __int8 *)(v17 + 31);
    }
    else {
      uint64_t v20 = *(void *)(v17 + 16);
    }
    uint64_t v21 = *(unsigned __int8 *)(v18 + 31);
    int v22 = (char)v21;
    if ((v21 & 0x80u) != 0) {
      uint64_t v21 = *(void *)(v18 + 16);
    }
    if (v20 != v21) {
      return 0;
    }
    uint64_t v23 = (const void **)(v17 + 8);
    if (v22 >= 0) {
      uint64_t v24 = (unsigned __int8 *)(v18 + 8);
    }
    else {
      uint64_t v24 = *(unsigned __int8 **)(v18 + 8);
    }
    if ((v19 & 0x80) != 0)
    {
      if (memcmp(*v23, v24, *(void *)(v17 + 16))) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v17 + 31))
    {
      while (*(unsigned __int8 *)v23 == *v24)
      {
        uint64_t v23 = (const void **)((char *)v23 + 1);
        ++v24;
        if (!--v19) {
          goto LABEL_64;
        }
      }
      return 0;
    }
LABEL_64:
    if (*(_DWORD *)(v17 + 32) != *(_DWORD *)(v18 + 32)) {
      return 0;
    }
  }
  else if (v18)
  {
    return 0;
  }
  uint64_t result = sub_5F36E0((uint64_t *)a1 + 8, (uint64_t *)v6 + 8);
  if (!result) {
    return result;
  }
  uint64_t v25 = *((void *)a1 + 11);
  uint64_t v26 = *((void *)v6 + 11);
  if (v25)
  {
    if (!v26 || (sub_5F2DC4(v25, v26) & 1) == 0) {
      return 0;
    }
  }
  else if (v26)
  {
    return 0;
  }
  uint64_t result = sub_5F37E8((uint64_t *)a1 + 7, (uint64_t *)v6 + 7);
  if (!result) {
    return result;
  }
  if (*((float *)a1 + 24) != *((float *)v6 + 24) || a1[100] != v6[100]) {
    return 0;
  }
  uint64_t result = sub_5F385C((unsigned __int8 **)a1 + 13, (unsigned __int8 **)v6 + 13);
  if (result)
  {
    uint64_t result = sub_5F38CC((uint64_t *)a1 + 14, (uint64_t *)v6 + 14);
    if (result)
    {
      uint64_t result = sub_5F3970((unsigned __int8 **)a1 + 15, (unsigned __int8 ***)v6 + 15);
      if (result)
      {
        uint64_t result = sub_5F3A58((uint64_t **)a1 + 16, (uint64_t **)v6 + 16);
        if (result) {
          return *((_DWORD *)a1 + 34) == *((_DWORD *)v6 + 34);
        }
      }
    }
  }
  return result;
}

uint64_t sub_5F36E0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *a2;
  if (v2 - *a1 == a2[1] - *a2)
  {
    if (v3 == v2) {
      return 1;
    }
    while (*(_DWORD *)v3 == *(_DWORD *)v4)
    {
      uint64_t v5 = *(unsigned __int8 *)(v3 + 31);
      if ((v5 & 0x80u) == 0) {
        uint64_t v6 = *(unsigned __int8 *)(v3 + 31);
      }
      else {
        uint64_t v6 = *(void *)(v3 + 16);
      }
      uint64_t v7 = *(unsigned __int8 *)(v4 + 31);
      int v8 = (char)v7;
      if ((v7 & 0x80u) != 0) {
        uint64_t v7 = *(void *)(v4 + 16);
      }
      if (v6 != v7) {
        break;
      }
      if (v8 >= 0) {
        uint64_t v9 = (unsigned __int8 *)(v4 + 8);
      }
      else {
        uint64_t v9 = *(unsigned __int8 **)(v4 + 8);
      }
      if ((v5 & 0x80) != 0)
      {
        if (memcmp(*(const void **)(v3 + 8), v9, *(void *)(v3 + 16))) {
          return 0;
        }
      }
      else if (*(unsigned char *)(v3 + 31))
      {
        uint64_t v10 = 0;
        while (*(unsigned __int8 *)(v3 + v10 + 8) == v9[v10])
        {
          if (v5 == ++v10) {
            goto LABEL_20;
          }
        }
        return 0;
      }
LABEL_20:
      if (*(unsigned __int8 *)(v3 + 32) != *(unsigned __int8 *)(v4 + 32)) {
        return 0;
      }
      v3 += 40;
      v4 += 40;
      if (v3 == v2) {
        return 1;
      }
    }
  }
  return 0;
}

BOOL sub_5F37E8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  if (!v4) {
    return *a2 == 0;
  }
  uint64_t v5 = *a2;
  if (!*a2) {
    return 0;
  }
  if (sub_4F3B98(v4, v5)) {
    return 1;
  }
  return !*a1 && *a2 == 0;
}

BOOL sub_5F385C(unsigned __int8 **a1, unsigned __int8 **a2)
{
  uint64_t v4 = *a1;
  if (!v4) {
    return *a2 == 0;
  }
  uint64_t v5 = *a2;
  if (!*a2) {
    return 0;
  }
  if (sub_524DC(v4, v5)) {
    return 1;
  }
  return !*a1 && *a2 == 0;
}

BOOL sub_5F38CC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  BOOL result = *a2 == 0;
  if (v2)
  {
    if (v3)
    {
      if (*(_DWORD *)v2 == *(_DWORD *)v3 && *(_DWORD *)(v2 + 32) == *(_DWORD *)(v3 + 32))
      {
        uint64_t v6 = *(unsigned __int16 **)(v2 + 8);
        uint64_t v5 = *(unsigned __int16 **)(v2 + 16);
        uint64_t v7 = *(unsigned __int16 **)(v3 + 8);
        if ((char *)v5 - (char *)v6 == *(void *)(v3 + 16) - (void)v7)
        {
          if (v6 == v5)
          {
LABEL_13:
            if (*(unsigned __int8 *)(v2 + 40) == *(unsigned __int8 *)(v3 + 40)) {
              return 1;
            }
          }
          else
          {
            while (*v6 == *v7 && *((unsigned __int8 *)v6 + 2) == *((unsigned __int8 *)v7 + 2))
            {
              v6 += 2;
              v7 += 2;
              if (v6 == v5) {
                goto LABEL_13;
              }
            }
          }
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_5F3970(unsigned __int8 **a1, unsigned __int8 ***a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = *a2 == 0;
  if (!v2) {
    return result;
  }
  if (!v3 || v2[33] != *((unsigned __int8 *)v3 + 33) || v2[32] != *((unsigned __int8 *)v3 + 32)) {
    return 0;
  }
  if (!v2[24]) {
    return !*((unsigned char *)v3 + 24);
  }
  if (!*((unsigned char *)v3 + 24)) {
    return 0;
  }
  uint64_t v5 = v2[23];
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = (unsigned __int8 *)v2[23];
  }
  else {
    uint64_t v6 = (unsigned __int8 *)*((void *)v2 + 1);
  }
  uint64_t v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  int v8 = (char)v7;
  if ((char)v7 < 0) {
    uint64_t v7 = v3[1];
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    uint64_t v9 = *a2;
  }
  else {
    uint64_t v9 = (unsigned __int8 **)*v3;
  }
  if ((v5 & 0x80) != 0) {
    return !memcmp(*(const void **)v2, v9, *((void *)v2 + 1));
  }
  if (!v2[23]) {
    return 1;
  }
  uint64_t v10 = v5 - 1;
  do
  {
    int v12 = *v2++;
    int v11 = v12;
    int v14 = *(unsigned __int8 *)v9;
    uint64_t v9 = (unsigned __int8 **)((char *)v9 + 1);
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    uint64_t result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

BOOL sub_5F3A58(uint64_t **a1, uint64_t **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (*a1)
  {
    if (!v3) {
      return 0;
    }
    uint64_t v4 = *v2;
    uint64_t v5 = v2[1];
    uint64_t v6 = *v3;
    if (v5 - *v2 != v3[1] - *v3) {
      return 0;
    }
    if (v4 == v5) {
      return 1;
    }
    while (sub_5F30F8(v4, v6) && *(_DWORD *)(v4 + 160) == *(_DWORD *)(v6 + 160))
    {
      v4 += 168;
      v6 += 168;
      if (v4 == v5) {
        return 1;
      }
    }
    if (*a1) {
      return 0;
    }
    uint64_t v3 = *a2;
  }
  return v3 == 0;
}

uint64_t sub_5F3B34(uint64_t a1)
{
  char v3 = 1;
  __int16 v2 = 511;
  long long v4 = 0uLL;
  uint64_t v5 = 0;
  return sub_5F3BA0(a1, &v2, &v4);
}

uint64_t sub_5F3B74(uint64_t a1, __int16 *a2)
{
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  return sub_5F3BA0(a1, a2, &v3);
}

uint64_t sub_5F3BA0(uint64_t a1, __int16 *a2, long long *a3)
{
  *(_OWORD *)(a1 + 90) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  __int16 v4 = *a2;
  *(unsigned char *)(a1 + 108) = *((unsigned char *)a2 + 2);
  *(_WORD *)(a1 + 106) = v4;
  uint64_t v5 = a1 + 112;
  if (*((char *)a3 + 23) < 0)
  {
    sub_4200((unsigned char *)v5, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    *(void *)(v5 + 16) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v5 = v6;
  }
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  return a1;
}

void sub_5F3C2C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 96);
  *(void *)(v1 + 96) = 0;
  if (v3) {
    sub_20AA210(v3);
  }
  sub_20AA0DC((void **)(v1 + 72), (void **)(v1 + 48), (void ***)(v1 + 24), (void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_5F3C5C(uint64_t a1, uint64_t a2, __int16 *a3)
{
  *(_OWORD *)(a1 + 90) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  __int16 v4 = *a3;
  char v5 = *((unsigned char *)a3 + 2);
  *(_OWORD *)(a1 + 112) = 0u;
  *(unsigned char *)(a1 + 108) = v5;
  *(_WORD *)(a1 + 106) = v4;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (v6) {
    *(void *)(a1 + 8) = sub_6E6EC((char **)a1, a2);
  }
  return a1;
}

void sub_5F3CE4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 159) < 0) {
    operator delete(*(void **)(v1 + 136));
  }
  if (*(char *)(v1 + 135) < 0) {
    operator delete(*v2);
  }
  sub_5F8484((uint64_t *)(v1 + 96), 0);
  sub_3D4D90((void **)(v1 + 72));
  sub_1A668((void **)(v1 + 48));
  sub_4F2D44(v1 + 24);
  sub_1A668((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_5F3D48(uint64_t a1, uint64_t a2)
{
  char v4 = 1;
  __int16 v3 = 511;
  return sub_5F3C5C(a1, a2, &v3);
}

uint64_t sub_5F3D80(uint64_t *a1, uint64_t a2, int *a3, int *a4)
{
  char v16 = 6;
  int v6 = *a3 % 10;
  if (*a3 < 0) {
    char v7 = -5;
  }
  else {
    char v7 = 5;
  }
  int v5 = *a3 / 10;
  unsigned int v8 = v5 + (((103 * (char)(v7 + v6)) >> 15) & 1) + ((103 * (char)(v7 + v6)) >> 10);
  if (*a4 < 0) {
    char v9 = -5;
  }
  else {
    char v9 = 5;
  }
  unsigned int v10 = *a4 / 10 + (((103 * (char)(v9 + *a4 % 10)) >> 15) & 1) + ((103 * (char)(v9 + *a4 % 10)) >> 10);
  unsigned int v14 = v10;
  unsigned int v15 = v5 + (((103 * (char)(v7 + v6)) >> 15) & 1) + ((103 * (char)(v7 + v6)) >> 10);
  unint64_t v11 = a1[4];
  if (v11 >= a1[5])
  {
    uint64_t result = sub_5F8C50(a1 + 3, a2, &v16, (int *)&v15, (int *)&v14);
    a1[4] = result;
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200((unsigned char *)a1[4], *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v12 = *(_OWORD *)a2;
      *(void *)(v11 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v11 = v12;
    }
    *(unsigned char *)(v11 + 24) = 6;
    *(_DWORD *)(v11 + 28) = v8;
    *(_DWORD *)(v11 + 32) = v10;
    *(_OWORD *)(v11 + 40) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 84) = 0u;
    *(unsigned char *)(v11 + 100) = 1;
    *(_OWORD *)(v11 + 104) = 0u;
    *(_OWORD *)(v11 + 120) = 0u;
    *(_DWORD *)(v11 + 136) = 0x7FFFFFFF;
    uint64_t result = v11 + 144;
    a1[4] = v11 + 144;
    a1[4] = v11 + 144;
  }
  return result;
}

void sub_5F3EEC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_5F3EF4(uint64_t *a1, uint64_t a2, int *a3, int *a4)
{
  int v5 = *a3;
  if (*a3 == *a4)
  {
    char v14 = 5;
    int v6 = v5 / 10;
    int v7 = v5 % 10;
    if (v5 < 0) {
      char v8 = -5;
    }
    else {
      char v8 = 5;
    }
    int v9 = v6 + (((103 * (char)(v8 + v7)) >> 15) & 1) + ((103 * (char)(v8 + v7)) >> 10);
    int v13 = v9;
    unint64_t v10 = a1[4];
    if (v10 >= a1[5])
    {
      uint64_t result = sub_5F8974(a1 + 3, a2, &v14, &v13);
      a1[4] = result;
    }
    else
    {
      if (*(char *)(a2 + 23) < 0)
      {
        sub_4200((unsigned char *)a1[4], *(void **)a2, *(void *)(a2 + 8));
      }
      else
      {
        long long v11 = *(_OWORD *)a2;
        *(void *)(v10 + 16) = *(void *)(a2 + 16);
        *(_OWORD *)unint64_t v10 = v11;
      }
      *(unsigned char *)(v10 + 24) = 5;
      *(_DWORD *)(v10 + 28) = v9;
      *(_DWORD *)(v10 + 32) = -1;
      *(_OWORD *)(v10 + 40) = 0u;
      *(_OWORD *)(v10 + 56) = 0u;
      *(_OWORD *)(v10 + 72) = 0u;
      *(_OWORD *)(v10 + 84) = 0u;
      *(unsigned char *)(v10 + 100) = 1;
      *(_OWORD *)(v10 + 104) = 0u;
      *(_OWORD *)(v10 + 120) = 0u;
      *(_DWORD *)(v10 + 136) = 0x7FFFFFFF;
      uint64_t result = v10 + 144;
      a1[4] = v10 + 144;
      a1[4] = v10 + 144;
    }
  }
  else
  {
    return sub_5F3D80(a1, a2, a3, a4);
  }
  return result;
}

void sub_5F4058(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

char *sub_5F4060(uint64_t a1, long long *a2)
{
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= *(void *)(a1 + 40))
  {
    uint64_t result = sub_5F8F30((void **)(a1 + 24), a2);
    *(void *)(a1 + 32) = result;
  }
  else
  {
    sub_4F5C8C(*(_DWORD **)(a1 + 32), a2);
    uint64_t result = (char *)(v3 + 144);
    *(void *)(a1 + 32) = v3 + 144;
    *(void *)(a1 + 32) = v3 + 144;
  }
  return result;
}

void sub_5F40B8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

void sub_5F40C0(uint64_t a1, long long *a2)
{
  if (*(void *)(a1 + 32) < *(void *)(a1 + 40)) {
    sub_5F2388(*(char **)(a1 + 32), a2);
  }
  sub_5F9180((void *)(a1 + 24), a2);
}

void sub_5F4118(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

void sub_5F4120(uint64_t a1, long long *a2, int a3, uint64_t a4)
{
  int v4 = a3;
  if (*(void *)(a1 + 32) < *(void *)(a1 + 40)) {
    sub_5F2604(*(char **)(a1 + 32), a2, a3, a4);
  }
  sub_5F93E0((void *)(a1 + 24), a2, &v4, a4);
}

void sub_5F4190(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

void sub_5F4198(void *a1, long long *a2)
{
  unint64_t v3 = a1 + 3;
  if (a1[4] < a1[5]) {
    sub_5F9658((uint64_t)v3, a2);
  }
  sub_5F9748(v3, (uint64_t)a2);
}

void sub_5F41E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= *(void *)(a1 + 16))
  {
    *(void *)(a1 + 8) = sub_1D740((char **)a1, a2);
    uint64_t v5 = a1;
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200(*(unsigned char **)(a1 + 8), *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v4 = *(_OWORD *)a2;
      *(void *)(v3 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v3 = v4;
    }
    *(void *)(a1 + 8) = v3 + 24;
    *(void *)(a1 + 8) = v3 + 24;
    uint64_t v5 = a1;
  }
  sub_5F4294(v5);
}

void sub_5F428C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_5F4294(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 135);
  if (v2 < 0)
  {
    if (!*(void *)(a1 + 120)) {
      return;
    }
  }
  else if (!*(unsigned char *)(a1 + 135))
  {
    return;
  }
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  if (v3 >= 2 && v3 - 1 > 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3))
  {
    long long v4 = (long long *)(a1 + 112);
    if (!sub_5F7680(a1, (void *)(a1 + 136)))
    {
      if (v2 < 0)
      {
        sub_4200(&__dst, *(void **)(a1 + 112), *(void *)(a1 + 120));
      }
      else
      {
        long long __dst = *v4;
        std::string::size_type v33 = *(void *)(a1 + 128);
      }
      goto LABEL_34;
    }
    std::operator+<char>();
    uint64_t v5 = std::string::append(&v27, "}");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    int v7 = *(char *)(a1 + 135);
    if (v7 >= 0) {
      char v8 = (const std::string::value_type *)(a1 + 112);
    }
    else {
      char v8 = *(const std::string::value_type **)(a1 + 112);
    }
    if (v7 >= 0) {
      std::string::size_type v9 = *(unsigned __int8 *)(a1 + 135);
    }
    else {
      std::string::size_type v9 = *(void *)(a1 + 120);
    }
    unint64_t v10 = std::string::append(&v28, v8, v9);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    long long v12 = std::string::append(&v29, "{/s:");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    int v14 = *(char *)(a1 + 159);
    if (v14 >= 0) {
      unsigned int v15 = (const std::string::value_type *)(a1 + 136);
    }
    else {
      unsigned int v15 = *(const std::string::value_type **)(a1 + 136);
    }
    if (v14 >= 0) {
      std::string::size_type v16 = *(unsigned __int8 *)(a1 + 159);
    }
    else {
      std::string::size_type v16 = *(void *)(a1 + 144);
    }
    uint64_t v17 = std::string::append(&v30, v15, v16);
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    uint64_t v19 = std::string::append(&v31, "}");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    std::string::size_type v33 = v19->__r_.__value_.__r.__words[2];
    long long __dst = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v31.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_22:
        if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_23;
        }
        goto LABEL_31;
      }
    }
    else if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(v30.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_23:
      if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_24;
      }
      goto LABEL_32;
    }
LABEL_31:
    operator delete(v29.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_24:
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_33;
      }
      goto LABEL_34;
    }
LABEL_32:
    operator delete(v28.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
LABEL_33:
    }
      operator delete(v27.__r_.__value_.__l.__data_);
LABEL_34:
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
    int v22 = *(char **)(a1 + 56);
    unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v22[-*(void *)(a1 + 48)] >> 3);
    if (v21 + ~v23)
    {
      uint64_t v24 = v23 - v21 + 1;
      do
      {
        while ((unint64_t)v22 >= *(void *)(a1 + 64))
        {
          int v22 = sub_1D740((char **)(a1 + 48), (uint64_t)&__dst);
          *(void *)(a1 + 56) = v22;
          BOOL v26 = __CFADD__(v24++, 1);
          if (v26) {
            goto LABEL_45;
          }
        }
        if (SHIBYTE(v33) < 0)
        {
          sub_4200(v22, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          long long v25 = __dst;
          *((void *)v22 + 2) = v33;
          *(_OWORD *)int v22 = v25;
        }
        v22 += 24;
        *(void *)(a1 + 56) = v22;
        *(void *)(a1 + 56) = v22;
        BOOL v26 = __CFADD__(v24++, 1);
      }
      while (!v26);
    }
LABEL_45:
    if (SHIBYTE(v33) < 0) {
      operator delete((void *)__dst);
    }
  }
}

void sub_5F45A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0)
  {
    operator delete(__p);
    if ((a35 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a28 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a35 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a30);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a23);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a15 & 0x80000000) == 0) {
LABEL_12:
    }
      _Unwind_Resume(exception_object);
LABEL_11:
    operator delete(a10);
    goto LABEL_12;
  }
LABEL_10:
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

void sub_5F4680(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v7 = *(void **)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  if (a4)
  {
    char v8 = a4;
    if ((unint64_t)v7 >= v6)
    {
      unint64_t v10 = sub_5F9A50((void **)a1);
    }
    else
    {
      *int v7 = 0;
      v7[1] = 0;
      unint64_t v10 = v7 + 3;
      v7[2] = 0;
    }
    *(void *)(a1 + 8) = v10;
    sub_5F4798(a1, a3, v8);
    int v12 = *(char *)(a2 + 23);
    if (v12 >= 0) {
      long long v13 = (const std::string::value_type *)a2;
    }
    else {
      long long v13 = *(const std::string::value_type **)a2;
    }
    if (v12 >= 0) {
      std::string::size_type v14 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v14 = *(void *)(a2 + 8);
    }
    std::string::append((std::string *)(*(void *)(a1 + 8) - 24), v13, v14);
    sub_5F4998(a1);
  }
  else if ((unint64_t)v7 >= v6)
  {
    *(void *)(a1 + 8) = sub_1D740((char **)a1, a2);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200(*(unsigned char **)(a1 + 8), *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v11 = *(_OWORD *)a2;
      v7[2] = *(void *)(a2 + 16);
      *(_OWORD *)int v7 = v11;
    }
    *(void *)(a1 + 8) = v7 + 3;
    *(void *)(a1 + 8) = v7 + 3;
  }

  sub_5F4294(a1);
}

void sub_5F4790(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_5F4798(uint64_t a1, uint64_t a2, char a3)
{
  if (!*(unsigned char *)(a1 + 108)) {
    return;
  }
  std::operator+<char>();
  unint64_t v6 = std::string::append(&v15, "}");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v13 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (v13 >= 0) {
    char v8 = __p;
  }
  else {
    char v8 = (void **)__p[0];
  }
  if (v13 >= 0) {
    std::string::size_type v9 = HIBYTE(v13);
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  std::string::append((std::string *)(*(void *)(a1 + 8) - 24), (const std::string::value_type *)v8, v9);
  if (SHIBYTE(v13) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_10:
      if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
        goto LABEL_11;
      }
LABEL_16:
      sub_4200(__p, *(void **)a2, *(void *)(a2 + 8));
      char v14 = a3;
      if (sub_5F77B4(a1, (const void **)__p))
      {
LABEL_12:
        if ((SHIBYTE(v13) & 0x80000000) == 0) {
          return;
        }
LABEL_21:
        operator delete(__p[0]);
        return;
      }
      goto LABEL_17;
    }
  }
  else if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_10;
  }
  operator delete(v15.__r_.__value_.__l.__data_);
  if (*(char *)(a2 + 23) < 0) {
    goto LABEL_16;
  }
LABEL_11:
  *(_OWORD *)long long __p = *(_OWORD *)a2;
  int64_t v13 = *(void *)(a2 + 16);
  char v14 = a3;
  if (sub_5F77B4(a1, (const void **)__p)) {
    goto LABEL_12;
  }
LABEL_17:
  unint64_t v10 = *(void *)(a1 + 80);
  if (v10 >= *(void *)(a1 + 88))
  {
    *(void *)(a1 + 80) = sub_5FB4E0((char **)(a1 + 72), (uint64_t)__p);
    if (SHIBYTE(v13) < 0) {
      goto LABEL_21;
    }
  }
  else
  {
    if (SHIBYTE(v13) < 0)
    {
      sub_4200(*(unsigned char **)(a1 + 80), __p[0], (unint64_t)__p[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)__p;
      *(void *)(v10 + 16) = v13;
      *(_OWORD *)unint64_t v10 = v11;
    }
    *(unsigned char *)(v10 + 24) = v14;
    *(void *)(a1 + 80) = v10 + 32;
    *(void *)(a1 + 80) = v10 + 32;
    if (SHIBYTE(v13) < 0) {
      goto LABEL_21;
    }
  }
}

void sub_5F4944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  *(void *)(v22 + 80) = v23;
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_5F4998(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    std::operator+<char>();
    uint64_t v2 = std::string::append(&v6, "}");
    long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    int64_t v8 = v2->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = v3;
    v2->__r_.__value_.__l.__size_ = 0;
    v2->__r_.__value_.__r.__words[2] = 0;
    v2->__r_.__value_.__r.__words[0] = 0;
    if (v8 >= 0) {
      long long v4 = __p;
    }
    else {
      long long v4 = (void **)__p[0];
    }
    if (v8 >= 0) {
      std::string::size_type v5 = HIBYTE(v8);
    }
    else {
      std::string::size_type v5 = (std::string::size_type)__p[1];
    }
    std::string::append((std::string *)(*(void *)(a1 + 8) - 24), (const std::string::value_type *)v4, v5);
    if ((SHIBYTE(v8) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_12:
      operator delete(v6.__r_.__value_.__l.__data_);
      return;
    }
    operator delete(__p[0]);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_12;
    }
  }
}

void sub_5F4A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_5F4AAC(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_DWORD **)a1;
  std::string::size_type v5 = *(_DWORD **)(a1 + 8);
  if (*(_DWORD **)a1 != v5)
  {
    std::string v6 = (unsigned int *)(a2 + 24);
    unsigned int v7 = *(_DWORD *)(a2 + 24);
    do
    {
      while (1)
      {
        int v8 = *v4 - 978307200;
        if (v7 == *(_DWORD *)(a2 + 28)) {
          break;
        }
        *(_DWORD *)(*(void *)(a2 + 32) + 4 * v7++) = v8;
        unsigned int *v6 = v7;
        if (++v4 == v5) {
          goto LABEL_6;
        }
      }
      sub_188C80C((unsigned int *)(a2 + 24), v7 + 1);
      *(_DWORD *)(*(void *)(a2 + 32) + 4 * v7++) = v8;
      unsigned int *v6 = v7;
      ++v4;
    }
    while (v4 != v5);
  }
LABEL_6:
  uint64_t v9 = *(unsigned __int8 *)(a1 + 71);
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *(void *)(a1 + 56);
  }
  if (v9)
  {
    *(_DWORD *)(a2 + 16) |= 1u;
    uint64_t v10 = *(void *)(a2 + 8);
    long long v11 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
    if (v10) {
      long long v11 = (uint64_t *)*v11;
    }
    sub_1881DF4((std::string **)(a2 + 80), (long long *)(a1 + 48), v11);
  }
  int v12 = *(const std::string **)(a1 + 24);
  int64_t v13 = *(const std::string **)(a1 + 32);
  if (v12 != v13)
  {
    char v14 = (uint64_t **)(a2 + 40);
    std::string v15 = (_DWORD *)(a2 + 64);
    do
    {
      while (1)
      {
        std::string::size_type v16 = *(_DWORD **)(a2 + 56);
        if (v16 && (uint64_t v17 = *(int *)(a2 + 48), (int)v17 < *v16))
        {
          *(_DWORD *)(a2 + 48) = v17 + 1;
          long long v18 = *(std::string **)&v16[2 * v17 + 2];
        }
        else
        {
          if (!*v14) {
            operator new();
          }
          *long long v20 = v19;
          v20[1] = sub_3A6EDC;
          *uint64_t v19 = 0;
          v19[1] = 0;
          v19[2] = 0;
          long long v18 = (std::string *)sub_188CDC8(a2 + 40, (uint64_t)v19);
        }
        std::string::operator=(v18, v12);
        int v21 = v12[1].__r_.__value_.__s.__data_[0] - 1 < 3
            ? (v12[1].__r_.__value_.__s.__data_[0] - 1) + 1
            : 0;
        uint64_t v22 = *(unsigned int *)(a2 + 64);
        if (v22 == *(_DWORD *)(a2 + 68)) {
          break;
        }
        *(_DWORD *)(*(void *)(a2 + 72) + 4 * v22) = v21;
        _DWORD *v15 = v22 + 1;
        int v12 = (const std::string *)((char *)v12 + 32);
        if (v12 == v13) {
          goto LABEL_26;
        }
      }
      sub_188C80C((unsigned int *)(a2 + 64), v22 + 1);
      *(_DWORD *)(*(void *)(a2 + 72) + 4 * v22) = v21;
      _DWORD *v15 = v22 + 1;
      int v12 = (const std::string *)((char *)v12 + 32);
    }
    while (v12 != v13);
  }
LABEL_26:
  uint64_t v23 = *(unsigned __int8 *)(a1 + 95);
  if ((v23 & 0x80u) != 0) {
    uint64_t v23 = *(void *)(a1 + 80);
  }
  if (v23)
  {
    *(_DWORD *)(a2 + 16) |= 2u;
    uint64_t v24 = *(void *)(a2 + 8);
    long long v25 = (uint64_t *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
    if (v24) {
      long long v25 = (uint64_t *)*v25;
    }
    sub_1881DF4((std::string **)(a2 + 88), (long long *)(a1 + 72), v25);
  }
}

void sub_5F4D30(const std::string **a1, uint64_t a2)
{
  uint64_t v2 = a2;
  long long v4 = (uint64_t **)(a2 + 24);
  sub_188CC60(a2 + 24, -1431655765 * ((unint64_t)((char *)a1[1] - (char *)*a1) >> 3));
  std::string v6 = *a1;
  std::string::size_type v5 = a1[1];
  if (*a1 != v5)
  {
    do
    {
      while (1)
      {
        unsigned int v7 = *(_DWORD **)(v2 + 40);
        if (!v7) {
          break;
        }
        uint64_t v8 = *(int *)(v2 + 32);
        if ((int)v8 >= *v7) {
          break;
        }
        *(_DWORD *)(v2 + 32) = v8 + 1;
        std::string::operator=(*(std::string **)&v7[2 * v8 + 2], v6++);
        if (v6 == v5) {
          goto LABEL_10;
        }
      }
      if (!*v4) {
        operator new();
      }
      *uint64_t v10 = v9;
      v10[1] = sub_3A6EDC;
      *uint64_t v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      long long v11 = (std::string *)sub_188CDC8((uint64_t)v4, (uint64_t)v9);
      std::string::operator=(v11, v6++);
    }
    while (v6 != v5);
  }
LABEL_10:
  int v12 = (uint64_t **)(v2 + 72);
  sub_188CC60(v2 + 72, -1431655765 * ((unint64_t)((char *)a1[7] - (char *)a1[6]) >> 3));
  char v14 = a1[6];
  for (uint64_t i = a1[7]; v14 != i; ++v14)
  {
    while (1)
    {
      std::string v15 = *(_DWORD **)(v2 + 88);
      if (!v15) {
        break;
      }
      uint64_t v16 = *(int *)(v2 + 80);
      if ((int)v16 >= *v15) {
        break;
      }
      *(_DWORD *)(v2 + 80) = v16 + 1;
      std::string::operator=(*(std::string **)&v15[2 * v16 + 2], v14++);
      if (v14 == i) {
        goto LABEL_19;
      }
    }
    if (!*v12) {
      operator new();
    }
    *long long v18 = v17;
    v18[1] = sub_3A6EDC;
    *uint64_t v17 = 0;
    v17[1] = 0;
    v17[2] = 0;
    uint64_t v19 = (std::string *)sub_188CDC8(v2 + 72, (uint64_t)v17);
    std::string::operator=(v19, v14);
  }
LABEL_19:
  uint64_t v165 = (uint64_t *)(v2 + 48);
  sub_188CC60(v2 + 48, 954437177 * ((unint64_t)((char *)a1[4] - (char *)a1[3]) >> 4));
  long long v20 = (std::string *)a1[3];
  uint64_t v164 = a1;
  v167 = a1[4];
  if (v20 != v167)
  {
    uint64_t v166 = v2;
    while (1)
    {
      int v21 = *(_DWORD **)(v2 + 64);
      if (v21 && (uint64_t v22 = *(int *)(v2 + 56), (int)v22 < *v21))
      {
        *(_DWORD *)(v2 + 56) = v22 + 1;
        uint64_t v23 = *(void *)&v21[2 * v22 + 2];
      }
      else
      {
        sub_13D68D0(*v165);
        uint64_t v23 = sub_188CDC8((uint64_t)v165, v24);
      }
      *(_DWORD *)(v23 + 16) |= 1u;
      uint64_t v25 = *(void *)(v23 + 8);
      BOOL v26 = (uint64_t **)(v25 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v25 & 1) == 0) {
        break;
      }
      sub_1881DF4((std::string **)(v23 + 64), (long long *)v20, *v26);
      unsigned int v27 = v20[1].__r_.__value_.__s.__data_[0];
      if (v27 <= 0x11) {
        goto LABEL_29;
      }
LABEL_48:
      int v28 = 0;
LABEL_49:
      *(_DWORD *)(v23 + 16) |= 0x800u;
      *(_DWORD *)(v23 + 152) = v28;
LABEL_50:
      int v29 = HIDWORD(v20[1].__r_.__value_.__r.__words[0]);
      if (v29 != -1)
      {
        *(_DWORD *)(v23 + 16) |= 0x1000u;
        *(_DWORD *)(v23 + 156) = v29;
      }
      int v30 = v20[1].__r_.__value_.__r.__words[1];
      if (v30 != -1)
      {
        *(_DWORD *)(v23 + 16) |= 0x2000u;
        *(_DWORD *)(v23 + 160) = v30;
      }
      std::string::size_type v31 = v20[1].__r_.__value_.__r.__words[2];
      if (v31)
      {
        if (*(char *)(v31 + 23) < 0)
        {
          if (!*(void *)(v31 + 8)) {
            goto LABEL_62;
          }
        }
        else if (!*(unsigned char *)(v31 + 23))
        {
          goto LABEL_62;
        }
        *(_DWORD *)(v23 + 16) |= 2u;
        uint64_t v32 = *(void *)(v23 + 8);
        std::string::size_type v33 = (uint64_t *)(v32 & 0xFFFFFFFFFFFFFFFCLL);
        if (v32) {
          std::string::size_type v33 = (uint64_t *)*v33;
        }
        sub_1881DF4((std::string **)(v23 + 72), (long long *)v31, v33);
      }
LABEL_62:
      sub_188CC60(v23 + 40, -858993459 * ((v20[3].__r_.__value_.__r.__words[0] - v20[2].__r_.__value_.__r.__words[2]) >> 3));
      std::string::size_type v37 = v20[2].__r_.__value_.__r.__words[2];
      std::string::pointer data = v20[3].__r_.__value_.__l.__data_;
      if ((std::string::pointer)v37 != data)
      {
        uint64_t v38 = (_DWORD *)(v23 + 24);
        do
        {
          while (1)
          {
            BOOL v39 = *(_DWORD **)(v23 + 56);
            if (v39 && (uint64_t v40 = *(int *)(v23 + 48), (int)v40 < *v39))
            {
              *(_DWORD *)(v23 + 48) = v40 + 1;
              uint64_t v41 = *(void *)&v39[2 * v40 + 2];
            }
            else
            {
              int v42 = sub_13D6478(*(void *)(v23 + 40));
              uint64_t v41 = sub_188CDC8(v23 + 40, (uint64_t)v42);
            }
            unsigned int v43 = *(unsigned __int8 *)(v37 + 32);
            int v44 = *(_DWORD *)v37 - 978307200;
            int v45 = *(_DWORD *)(v41 + 16);
            *(_DWORD *)(v41 + 40) = v44;
            *(_DWORD *)(v41 + 16) = v45 | 5;
            uint64_t v46 = *(void *)(v41 + 8);
            long long v47 = (uint64_t *)(v46 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v46 & 1) == 0)
            {
              sub_1881DF4((std::string **)(v41 + 24), (long long *)(v37 + 8), v47);
LABEL_71:
              switch(v43)
              {
                case 0u:
                  HIBYTE(v169) = 4;
                  int v48 = 1835887210;
                  goto LABEL_75;
                case 1u:
                  HIBYTE(v169) = 4;
                  int v48 = 1162167621;
                  goto LABEL_75;
                case 2u:
                  HIBYTE(v169) = 4;
                  int v48 = 1684294989;
LABEL_75:
                  LODWORD(__p) = v48;
                  BYTE4(__p) = 0;
                  *(_DWORD *)(v41 + 16) |= 2u;
                  uint64_t v49 = *(void *)(v41 + 8);
                  long long v50 = (uint64_t *)(v49 & 0xFFFFFFFFFFFFFFFCLL);
                  if (v49) {
                    goto LABEL_89;
                  }
                  goto LABEL_92;
                case 3u:
                  HIBYTE(v169) = 6;
                  LODWORD(__p) = 1296911693;
                  __int16 v51 = 25632;
                  goto LABEL_86;
                case 4u:
                  HIBYTE(v169) = 12;
                  strcpy((char *)&__p, "MMMM d, yyyy");
                  *(_DWORD *)(v41 + 16) |= 2u;
                  uint64_t v52 = *(void *)(v41 + 8);
                  long long v50 = (uint64_t *)(v52 & 0xFFFFFFFFFFFFFFFCLL);
                  if (v52) {
                    goto LABEL_89;
                  }
                  goto LABEL_92;
                case 5u:
                  HIBYTE(v169) = 6;
                  LODWORD(__p) = 1835887210;
                  __int16 v51 = 31264;
                  goto LABEL_86;
                case 6u:
                  HIBYTE(v169) = 9;
                  strcpy((char *)&__p, "MMdd jjmm");
                  *(_DWORD *)(v41 + 16) |= 2u;
                  uint64_t v53 = *(void *)(v41 + 8);
                  long long v50 = (uint64_t *)(v53 & 0xFFFFFFFFFFFFFFFCLL);
                  if (v53) {
                    goto LABEL_89;
                  }
                  goto LABEL_92;
                case 7u:
                  HIBYTE(v169) = 11;
                  strcpy((char *)&__p, "MMdd jjmm z");
                  *(_DWORD *)(v41 + 16) |= 2u;
                  uint64_t v54 = *(void *)(v41 + 8);
                  long long v50 = (uint64_t *)(v54 & 0xFFFFFFFFFFFFFFFCLL);
                  if (v54) {
                    goto LABEL_89;
                  }
                  goto LABEL_92;
                case 8u:
                  HIBYTE(v169) = 6;
                  LODWORD(__p) = 1835887210;
                  __int16 v51 = 29555;
LABEL_86:
                  WORD2(__p) = v51;
                  BYTE6(__p) = 0;
                  *(_DWORD *)(v41 + 16) |= 2u;
                  uint64_t v55 = *(void *)(v41 + 8);
                  long long v50 = (uint64_t *)(v55 & 0xFFFFFFFFFFFFFFFCLL);
                  if (v55) {
                    goto LABEL_89;
                  }
                  goto LABEL_92;
                case 9u:
                  HIBYTE(v169) = 1;
                  LOWORD(__p) = 122;
                  *(_DWORD *)(v41 + 16) |= 2u;
                  uint64_t v56 = *(void *)(v41 + 8);
                  long long v50 = (uint64_t *)(v56 & 0xFFFFFFFFFFFFFFFCLL);
                  if (v56) {
                    goto LABEL_89;
                  }
                  goto LABEL_92;
                default:
                  goto LABEL_91;
              }
            }
            sub_1881DF4((std::string **)(v41 + 24), (long long *)(v37 + 8), (uint64_t *)*v47);
            if (v43 <= 9) {
              goto LABEL_71;
            }
LABEL_91:
            long long __p = 0uLL;
            uint64_t v169 = 0;
            *(_DWORD *)(v41 + 16) |= 2u;
            uint64_t v57 = *(void *)(v41 + 8);
            long long v50 = (uint64_t *)(v57 & 0xFFFFFFFFFFFFFFFCLL);
            if (v57) {
LABEL_89:
            }
              long long v50 = (uint64_t *)*v50;
LABEL_92:
            sub_1881E2C((uint64_t *)(v41 + 32), &__p, v50);
            if (SHIBYTE(v169) < 0) {
              operator delete((void *)__p);
            }
            *(_DWORD *)(v41 + 16) |= 8u;
            *(unsigned char *)(v41 + 44) = (v43 & 0xFFFFFFFD) == 5;
            uint64_t v58 = *(unsigned int *)(v23 + 24);
            if (v58 == *(_DWORD *)(v23 + 28)) {
              break;
            }
            *(_DWORD *)(*(void *)(v23 + 32) + 4 * v58) = v44;
            _DWORD *v38 = v58 + 1;
            v37 += 40;
            if ((std::string::pointer)v37 == data) {
              goto LABEL_96;
            }
          }
          sub_188C80C((unsigned int *)(v23 + 24), v58 + 1);
          *(_DWORD *)(*(void *)(v23 + 32) + 4 * v58) = v44;
          _DWORD *v38 = v58 + 1;
          v37 += 40;
        }
        while ((std::string::pointer)v37 != data);
      }
LABEL_96:
      if (v20[1].__r_.__value_.__s.__data_[0] == 2 && *(_DWORD *)(v23 + 48) == 1)
      {
        int v59 = *(_DWORD *)(*(void *)(*(void *)(v23 + 56) + 8) + 40);
        *(_DWORD *)(v23 + 16) |= 0x1000u;
        *(_DWORD *)(v23 + 156) = v59;
      }
      long long v60 = (int *)v20[2].__r_.__value_.__l.__data_;
      if (v60)
      {
        *(_DWORD *)(v23 + 16) |= 4u;
        uint64_t v61 = *(void *)(v23 + 80);
        if (!v61)
        {
          uint64_t v62 = *(void *)(v23 + 8);
          long long v63 = (uint64_t *)(v62 & 0xFFFFFFFFFFFFFFFCLL);
          if (v62)
          {
            uint64_t v61 = sub_13D63F0(*v63);
            *(void *)(v23 + 80) = v61;
            long long v60 = (int *)v20[2].__r_.__value_.__l.__data_;
            if (!v60) {
              goto LABEL_223;
            }
          }
          else
          {
            uint64_t v61 = sub_13D63F0((uint64_t)v63);
            *(void *)(v23 + 80) = v61;
            long long v60 = (int *)v20[2].__r_.__value_.__l.__data_;
            if (!v60) {
              goto LABEL_223;
            }
          }
        }
        LODWORD(v35) = v60[8];
        float v64 = (double)*v60 / (double)v35;
        int v65 = *(_DWORD *)(v61 + 16);
        *(float *)(v61 + 32) = v64;
        *(_DWORD *)(v61 + 16) = v65 | 3;
        uint64_t v66 = *(void *)(v61 + 8);
        size_t v67 = (uint64_t *)(v66 & 0xFFFFFFFFFFFFFFFCLL);
        if (v66) {
          size_t v67 = (uint64_t *)*v67;
        }
        sub_1881DF4((std::string **)(v61 + 24), (long long *)(v60 + 2), v67);
      }
      uint64_t size = v20[2].__r_.__value_.__l.__size_;
      if (size)
      {
        *(_DWORD *)(v23 + 16) |= 8u;
        uint64_t v69 = *(void *)(v23 + 88);
        if (!v69)
        {
          uint64_t v70 = *(void *)(v23 + 8);
          long long v71 = (void *)(v70 & 0xFFFFFFFFFFFFFFFCLL);
          if (v70) {
            long long v71 = (void *)*v71;
          }
          uint64_t v69 = sub_13DAB08((uint64_t)v71);
          *(void *)(v23 + 88) = v69;
        }
        sub_523A2C(size, v69, v34);
      }
      uint64_t v72 = v20[3].__r_.__value_.__r.__words[2];
      if (v72)
      {
        *(_DWORD *)(v23 + 16) |= 0x10u;
        long long v73 = *(void **)(v23 + 96);
        if (!v73)
        {
          uint64_t v74 = *(void *)(v23 + 8);
          long long v75 = (void *)(v74 & 0xFFFFFFFFFFFFFFFCLL);
          if (v74) {
            long long v75 = (void *)*v75;
          }
          long long v73 = sub_13D6500((uint64_t)v75);
          *(void *)(v23 + 96) = v73;
        }
        sub_5F4AAC(v72, (uint64_t)v73);
      }
      int v76 = v20[1].__r_.__value_.__s.__data_[0];
      if (v76 == 15 || v76 == 12)
      {
        int v77 = v20 + 4;
      }
      else
      {
        int v77 = v20 + 4;
        if (*(float *)&v20[4].__r_.__value_.__l.__data_ == 0.0) {
          goto LABEL_127;
        }
      }
      *(_DWORD *)(v23 + 16) |= 0x20u;
      uint64_t v78 = *(void *)(v23 + 104);
      if (!v78)
      {
        uint64_t v79 = *(void *)(v23 + 8);
        size_t v80 = (void *)(v79 & 0xFFFFFFFFFFFFFFFCLL);
        if (v79) {
          size_t v80 = (void *)*v80;
        }
        uint64_t v78 = sub_13D65B0((uint64_t)v80);
        *(void *)(v23 + 104) = v78;
      }
      int v81 = (int)v77->__r_.__value_.__l.__data_;
      *(_DWORD *)(v78 + 16) |= 1u;
      *(_DWORD *)(v78 + 24) = v81;
LABEL_127:
      int v82 = v20[4].__r_.__value_.__s.__data_[4];
      if (v82 != byte_25345F8)
      {
        *(_DWORD *)(v23 + 16) |= 0x40u;
        uint64_t v83 = *(void *)(v23 + 112);
        if (!v83)
        {
          uint64_t v84 = *(void *)(v23 + 8);
          uint64_t v85 = (void *)(v84 & 0xFFFFFFFFFFFFFFFCLL);
          if (v84) {
            uint64_t v85 = (void *)*v85;
          }
          uint64_t v83 = sub_13D662C((uint64_t)v85);
          *(void *)(v23 + 112) = v83;
          LOBYTE(v82) = v20[4].__r_.__value_.__s.__data_[4];
        }
        *(_DWORD *)(v83 + 16) |= 1u;
        *(unsigned char *)(v83 + 24) = v82;
      }
      std::string::size_type v86 = v20[4].__r_.__value_.__l.__size_;
      if (v86)
      {
        *(_DWORD *)(v23 + 16) |= 0x80u;
        size_t v87 = *(void **)(v23 + 120);
        if (!v87)
        {
          uint64_t v88 = *(void *)(v23 + 8);
          uint64_t v89 = (uint64_t *)(v88 & 0xFFFFFFFFFFFFFFFCLL);
          if (v88)
          {
            uint64_t v90 = sub_13D636C(*v89);
            *(void *)(v23 + 120) = v90;
            std::string::size_type v86 = v20[4].__r_.__value_.__l.__size_;
            if (!v86) {
              goto LABEL_223;
            }
          }
          else
          {
            uint64_t v90 = sub_13D636C((uint64_t)v89);
            *(void *)(v23 + 120) = v90;
            std::string::size_type v86 = v20[4].__r_.__value_.__l.__size_;
            if (!v86) {
              goto LABEL_223;
            }
          }
          size_t v87 = v90;
        }
        *((_DWORD *)v87 + 4) |= 1u;
        uint64_t v91 = v87[1];
        uint64_t v92 = (uint64_t **)(v91 & 0xFFFFFFFFFFFFFFFCLL);
        if (v91)
        {
          sub_1881DF4((std::string **)v87 + 3, (long long *)(v86 + 24), *v92);
          uint64_t v93 = (long long *)v20[4].__r_.__value_.__l.__size_;
          if (!v93) {
            goto LABEL_223;
          }
        }
        else
        {
          sub_1881DF4((std::string **)v87 + 3, (long long *)(v86 + 24), (uint64_t *)v92);
          uint64_t v93 = (long long *)v20[4].__r_.__value_.__l.__size_;
          if (!v93) {
            goto LABEL_223;
          }
        }
        *((_DWORD *)v87 + 4) |= 2u;
        uint64_t v94 = v87[1];
        uint64_t v95 = (uint64_t *)(v94 & 0xFFFFFFFFFFFFFFFCLL);
        if (v94) {
          uint64_t v95 = (uint64_t *)*v95;
        }
        sub_1881DF4((std::string **)v87 + 4, v93, v95);
      }
      std::string::size_type v96 = v20[4].__r_.__value_.__r.__words[2];
      if (v96)
      {
        *(_DWORD *)(v23 + 16) |= 0x100u;
        uint64_t v97 = *(void *)(v23 + 128);
        if (!v97)
        {
          uint64_t v98 = *(void *)(v23 + 8);
          uint64_t v99 = (void *)(v98 & 0xFFFFFFFFFFFFFFFCLL);
          if (v98) {
            uint64_t v99 = (void *)*v99;
          }
          uint64_t v97 = sub_13D66AC((uint64_t)v99);
          *(void *)(v23 + 128) = v97;
        }
        int v100 = sub_E12460(*(_DWORD *)v96);
        int v101 = *(_DWORD *)(v97 + 16);
        *(_DWORD *)(v97 + 16) = v101 | 2;
        *(_DWORD *)(v97 + 32) = v100;
        uint64_t v102 = *(void *)(v96 + 8);
        uint64_t v103 = *(void *)(v96 + 16);
        uint64_t v104 = v96 + 8;
        if (v102 != v103 && *(unsigned char *)(v104 + 32) != 2)
        {
          *(_DWORD *)(v97 + 16) = v101 | 3;
          uint64_t v105 = *(void *)(v97 + 24);
          if (!v105)
          {
            uint64_t v106 = *(void *)(v97 + 8);
            int v107 = (void *)(v106 & 0xFFFFFFFFFFFFFFFCLL);
            if (v106) {
              int v107 = (void *)*v107;
            }
            uint64_t v105 = sub_13D7210((uint64_t)v107);
            *(void *)(v97 + 24) = v105;
          }
          sub_E15D50(v104, v105);
        }
      }
      std::string::pointer v108 = v20[5].__r_.__value_.__l.__data_;
      if (v108)
      {
        *(_DWORD *)(v23 + 16) |= 0x200u;
        uint64_t v109 = *(void *)(v23 + 136);
        if (!v109)
        {
          uint64_t v110 = *(void *)(v23 + 8);
          unint64_t v111 = (uint64_t *)(v110 & 0xFFFFFFFFFFFFFFFCLL);
          if (v110)
          {
            sub_13D6728(*v111);
            *(void *)(v23 + 136) = v109;
            std::string::pointer v108 = v20[5].__r_.__value_.__l.__data_;
            if (!v108) {
              goto LABEL_223;
            }
          }
          else
          {
            sub_13D6728((uint64_t)v111);
            *(void *)(v23 + 136) = v109;
            std::string::pointer v108 = v20[5].__r_.__value_.__l.__data_;
            if (!v108) {
              goto LABEL_223;
            }
          }
        }
        if (v108[33] - 1 < 3) {
          int v112 = (v108[33] - 1) + 1;
        }
        else {
          int v112 = 0;
        }
        int v113 = *(_DWORD *)(v109 + 16);
        *(_DWORD *)(v109 + 36) = v112;
        unsigned int v114 = v108[32];
        if (v114 >= 6) {
          unsigned int v114 = 0;
        }
        *(_DWORD *)(v109 + 16) = v113 | 6;
        *(_DWORD *)(v109 + 32) = v114;
        if (v108[24])
        {
          *(_DWORD *)(v109 + 16) = v113 | 7;
          uint64_t v115 = *(void *)(v109 + 8);
          long long v116 = (uint64_t *)(v115 & 0xFFFFFFFFFFFFFFFCLL);
          if (v115) {
            long long v116 = (uint64_t *)*v116;
          }
          sub_1881DF4((std::string **)(v109 + 24), (long long *)v108, v116);
        }
      }
      int v117 = v20[5].__r_.__value_.__r.__words[2];
      if (v117 != 0x7FFFFFFF)
      {
        *(_DWORD *)(v23 + 16) |= 0x4000u;
        *(_DWORD *)(v23 + 164) = v117;
      }
      uint64_t v118 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
      size_t v119 = v20->__r_.__value_.__l.__size_;
      if ((v118 & 0x80u) == 0) {
        std::string::size_type v120 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v120 = v20->__r_.__value_.__l.__size_;
      }
      uint64_t v121 = byte_2586C5F;
      if (byte_2586C5F < 0) {
        uint64_t v121 = qword_2586C50;
      }
      if (v120 == v121)
      {
        if (byte_2586C5F >= 0) {
          uint64_t v122 = &qword_2586C48;
        }
        else {
          uint64_t v122 = (uint64_t *)qword_2586C48;
        }
        if ((v118 & 0x80) != 0)
        {
          if (!memcmp(v20->__r_.__value_.__l.__data_, v122, v20->__r_.__value_.__l.__size_)) {
            goto LABEL_197;
          }
        }
        else
        {
          if (!*((unsigned char *)&v20->__r_.__value_.__s + 23)) {
            goto LABEL_197;
          }
          uint64_t v123 = 0;
          while (v20->__r_.__value_.__s.__data_[v123] == *((unsigned __int8 *)v122 + v123))
          {
            if (v118 == ++v123) {
              goto LABEL_197;
            }
          }
        }
      }
      uint64_t v124 = byte_2586C77;
      if (byte_2586C77 < 0) {
        uint64_t v124 = *((void *)&xmmword_2586C60 + 1);
      }
      if (v120 != v124) {
        goto LABEL_22;
      }
      if (byte_2586C77 >= 0) {
        uint64_t v125 = &xmmword_2586C60;
      }
      else {
        uint64_t v125 = (long long *)xmmword_2586C60;
      }
      if ((v118 & 0x80) != 0)
      {
        if (memcmp(v20->__r_.__value_.__l.__data_, v125, v119)) {
          goto LABEL_22;
        }
      }
      else if (v118)
      {
        uint64_t v126 = 0;
        while (v20->__r_.__value_.__s.__data_[v126] == *((unsigned __int8 *)v125 + v126))
        {
          if (v118 == ++v126) {
            goto LABEL_197;
          }
        }
        goto LABEL_22;
      }
LABEL_197:
      int v127 = (uint64_t *)v20[5].__r_.__value_.__l.__size_;
      if (v127)
      {
        *(_DWORD *)(v23 + 16) |= 0x400u;
        uint64_t v128 = *(void *)(v23 + 144);
        if (v128)
        {
          uint64_t v130 = *v127;
          uint64_t v129 = v127[1];
          if (*v127 != v129) {
            goto LABEL_207;
          }
        }
        else
        {
          uint64_t v131 = *(void *)(v23 + 8);
          v132 = (uint64_t *)(v131 & 0xFFFFFFFFFFFFFFFCLL);
          if (v131)
          {
            uint64_t v133 = sub_13D6830(*v132);
            *(void *)(v23 + 144) = v133;
            v134 = (uint64_t *)v20[5].__r_.__value_.__l.__size_;
            if (!v134)
            {
LABEL_223:
              exception = __cxa_allocate_exception(8uLL);
              void *exception = &off_2439078;
            }
          }
          else
          {
            uint64_t v133 = sub_13D6830((uint64_t)v132);
            *(void *)(v23 + 144) = v133;
            v134 = (uint64_t *)v20[5].__r_.__value_.__l.__size_;
            if (!v134) {
              goto LABEL_223;
            }
          }
          uint64_t v128 = v133;
          uint64_t v130 = *v134;
          uint64_t v129 = v134[1];
          if (*v134 != v129)
          {
            do
            {
LABEL_207:
              v136 = *(_DWORD **)(v128 + 32);
              if (v136 && (uint64_t v137 = *(int *)(v128 + 24), (int)v137 < *v136))
              {
                *(_DWORD *)(v128 + 24) = v137 + 1;
                uint64_t v138 = *(void *)&v136[2 * v137 + 2];
              }
              else
              {
                uint64_t v139 = sub_13D67B4(*(void *)(v128 + 16));
                uint64_t v138 = sub_188CDC8(v128 + 16, v139);
              }
              int v140 = sub_E12484((unsigned int *)(v130 + 160));
              int v141 = *(_DWORD *)(v138 + 16);
              *(_DWORD *)(v138 + 32) = v140;
              *(_DWORD *)(v138 + 16) = v141 | 3;
              if (!*(void *)(v138 + 24))
              {
                uint64_t v142 = *(void *)(v138 + 8);
                size_t v143 = (void *)(v142 & 0xFFFFFFFFFFFFFFFCLL);
                if (v142) {
                  size_t v143 = (void *)*v143;
                }
                sub_13D6A1C((uint64_t)v143);
                *(void *)(v138 + 24) = v135;
              }
              sub_5F4D30(v130);
              v130 += 168;
            }
            while (v130 != v129);
          }
        }
      }
LABEL_22:
      v20 += 6;
      uint64_t v2 = v166;
      if (v20 == v167) {
        goto LABEL_224;
      }
    }
    sub_1881DF4((std::string **)(v23 + 64), (long long *)v20, (uint64_t *)v26);
    unsigned int v27 = v20[1].__r_.__value_.__s.__data_[0];
LABEL_29:
    switch(v27)
    {
      case 0u:
        goto LABEL_50;
      case 1u:
        int v28 = 1;
        goto LABEL_49;
      case 2u:
        int v28 = 2;
        goto LABEL_49;
      case 3u:
        int v28 = 3;
        goto LABEL_49;
      case 4u:
        int v28 = 4;
        goto LABEL_49;
      case 5u:
        int v28 = 5;
        goto LABEL_49;
      case 6u:
        int v28 = 6;
        goto LABEL_49;
      case 7u:
        int v28 = 8;
        goto LABEL_49;
      case 8u:
        int v28 = 9;
        goto LABEL_49;
      case 9u:
        int v28 = 10;
        goto LABEL_49;
      case 0xAu:
        int v28 = 11;
        goto LABEL_49;
      case 0xBu:
        int v28 = 12;
        goto LABEL_49;
      case 0xCu:
        int v28 = 13;
        goto LABEL_49;
      case 0xDu:
        int v28 = 14;
        goto LABEL_49;
      case 0xEu:
        int v28 = 15;
        goto LABEL_49;
      case 0xFu:
        int v28 = 16;
        goto LABEL_49;
      case 0x10u:
        int v28 = 17;
        goto LABEL_49;
      case 0x11u:
        int v28 = 18;
        goto LABEL_49;
      default:
        goto LABEL_48;
    }
    goto LABEL_50;
  }
LABEL_224:
  v146 = (std::string *)v164[9];
  for (j = v164[10]; v146 != j; v146 = (std::string *)((char *)v146 + 32))
  {
    v147 = *(_DWORD **)(v2 + 112);
    if (v147 && (uint64_t v148 = *(int *)(v2 + 104), (int)v148 < *v147))
    {
      *(_DWORD *)(v2 + 104) = v148 + 1;
      uint64_t v149 = *(void *)&v147[2 * v148 + 2];
    }
    else
    {
      uint64_t v150 = sub_13D6994(*(void *)(v2 + 96));
      uint64_t v149 = sub_188CDC8(v2 + 96, v150);
    }
    *(_DWORD *)(v149 + 16) |= 1u;
    uint64_t v151 = *(void *)(v149 + 8);
    long long v152 = (uint64_t *)(v151 & 0xFFFFFFFFFFFFFFFCLL);
    if (v151) {
      long long v152 = (uint64_t *)*v152;
    }
    sub_1881DF4((std::string **)(v149 + 24), (long long *)v146, v152);
    int v153 = v146[1].__r_.__value_.__s.__data_[0];
    if (v153 == 2) {
      int v154 = 2;
    }
    else {
      int v154 = v153 == 1;
    }
    *(_DWORD *)(v149 + 16) |= 2u;
    *(_DWORD *)(v149 + 32) = v154;
  }
  uint64_t v155 = (uint64_t)v164[12];
  if (v155)
  {
    *(_DWORD *)(v2 + 16) |= 1u;
    long long v156 = *(void **)(v2 + 120);
    if (!v156)
    {
      uint64_t v157 = *(void *)(v2 + 8);
      size_t v158 = (void *)(v157 & 0xFFFFFFFFFFFFFFFCLL);
      if (v157) {
        size_t v158 = (void *)*v158;
      }
      long long v156 = sub_13D6B7C((uint64_t)v158);
      *(void *)(v2 + 120) = v156;
    }
    sub_5F5E30(v155, (uint64_t)v156);
  }
  if (*((unsigned char *)v164 + 104) || *((unsigned char *)v164 + 105))
  {
    *(_DWORD *)(v2 + 16) |= 2u;
    unint64_t v159 = *(_DWORD **)(v2 + 128);
    if (!v159)
    {
      uint64_t v160 = *(void *)(v2 + 8);
      uint64_t v161 = (void *)(v160 & 0xFFFFFFFFFFFFFFFCLL);
      if (v160) {
        uint64_t v161 = (void *)*v161;
      }
      unint64_t v159 = sub_13DA8BC((uint64_t)v161);
      *(void *)(v2 + 128) = v159;
    }
    switch(*((unsigned char *)v164 + 104))
    {
      case 0:
        goto LABEL_256;
      case 1:
        int v162 = 1;
        goto LABEL_255;
      case 2:
        int v162 = 2;
        goto LABEL_255;
      case 3:
        int v162 = 3;
        goto LABEL_255;
      case 4:
        int v162 = 4;
        goto LABEL_255;
      case 5:
        int v162 = 5;
        goto LABEL_255;
      case 6:
        int v162 = 6;
        goto LABEL_255;
      default:
        int v162 = 0;
LABEL_255:
        v159[4] |= 1u;
        v159[6] = v162;
LABEL_256:
        switch(*((unsigned char *)v164 + 105))
        {
          case 0:
            return;
          case 1:
            int v163 = 1;
            goto LABEL_261;
          case 2:
            int v163 = 2;
            goto LABEL_261;
          case 3:
            int v163 = 3;
            goto LABEL_261;
          default:
            int v163 = 0;
LABEL_261:
            v159[4] |= 2u;
            v159[7] = v163;
            break;
        }
        break;
    }
  }
}

void sub_5F5D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_5F5E30(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 16) |= 2u;
  long long v4 = *(_DWORD **)(a2 + 32);
  if (!v4)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    uint64_t v8 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
    if (v7)
    {
      long long v4 = sub_13D6AE0(*v8);
      *(void *)(a2 + 32) = v4;
      int v5 = *(_DWORD *)(a1 + 160);
      if (v5) {
        goto LABEL_3;
      }
    }
    else
    {
      long long v4 = sub_13D6AE0((uint64_t)v8);
      *(void *)(a2 + 32) = v4;
      int v5 = *(_DWORD *)(a1 + 160);
      if (v5) {
        goto LABEL_3;
      }
    }
LABEL_7:
    int v6 = 4;
    goto LABEL_8;
  }
  int v5 = *(_DWORD *)(a1 + 160);
  if (!v5) {
    goto LABEL_7;
  }
LABEL_3:
  if (v5 != 1) {
    goto LABEL_9;
  }
  int v6 = 5;
LABEL_8:
  v4[4] |= 1u;
  v4[12] = v6;
LABEL_9:
  int v9 = *(_DWORD *)(a1 + 164);
  if (v9 == 0x7FFFFFFF)
  {
    *(_DWORD *)(a2 + 16) |= 1u;
    if (*(void *)(a2 + 24)) {
      goto LABEL_11;
    }
  }
  else
  {
    v4[4] |= 2u;
    v4[13] = v9 - 978307200;
    *(_DWORD *)(a2 + 16) |= 1u;
    if (*(void *)(a2 + 24))
    {
LABEL_11:
      uint64_t v10 = a1;
      return sub_5F4D30(v10);
    }
  }
  uint64_t v12 = *(void *)(a2 + 8);
  int64_t v13 = (void *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
  if (v12) {
    int64_t v13 = (void *)*v13;
  }
  sub_13D6A1C((uint64_t)v13);
  *(void *)(a2 + 24) = v14;
  uint64_t v10 = a1;

  return sub_5F4D30(v10);
}

char *sub_5F5F70(uint64_t a1, long long *a2, _DWORD *a3, uint64_t a4, char a5)
{
  char v9 = a5;
  char v8 = 2;
  unint64_t v6 = *(void *)(a1 + 32);
  if (v6 >= *(void *)(a1 + 40))
  {
    uint64_t result = sub_5F9BAC((char **)(a1 + 24), a2, &v8, a3, a4, &v9);
    *(void *)(a1 + 32) = result;
  }
  else
  {
    sub_5F1F3C(*(char **)(a1 + 32), a2, 2, a3, a4, a5);
    uint64_t result = (char *)(v6 + 144);
    *(void *)(a1 + 32) = v6 + 144;
    *(void *)(a1 + 32) = v6 + 144;
  }
  return result;
}

void sub_5F5FF8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

char *sub_5F6000(uint64_t a1, long long *a2, void *a3, uint64_t a4, char a5)
{
  char v9 = a5;
  char v8 = 8;
  unint64_t v6 = *(void *)(a1 + 32);
  if (v6 >= *(void *)(a1 + 40))
  {
    uint64_t result = sub_5F9E2C((char **)(a1 + 24), a2, &v8, a3, a4, &v9);
    *(void *)(a1 + 32) = result;
  }
  else
  {
    sub_5F212C(*(char **)(a1 + 32), a2, 8, a3, a4, a5);
    uint64_t result = (char *)(v6 + 144);
    *(void *)(a1 + 32) = v6 + 144;
    *(void *)(a1 + 32) = v6 + 144;
  }
  return result;
}

void sub_5F6088(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_5F6090(uint64_t *a1, uint64_t a2, uint64_t *a3, char *a4)
{
  unint64_t v6 = a1[4];
  if (v6 >= a1[5])
  {
    uint64_t result = sub_5FA0AC(a1 + 3, a2, a3, a4);
    a1[4] = result;
  }
  else
  {
    uint64_t v7 = *a3;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200((unsigned char *)a1[4], *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v8 = *(_OWORD *)a2;
      *(void *)(v6 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v6 = v8;
    }
    *(unsigned char *)(v6 + 24) = 1;
    if (v7 < 0) {
      __int16 v10 = -50;
    }
    else {
      __int16 v10 = 50;
    }
    *(_DWORD *)(v6 + 28) = (int)v7 / 100
                         + ((5243 * (__int16)(v10 + (int)v7 % 100)) >> 19)
                         + ((5243 * (__int16)(v10 + (int)v7 % 100)) >> 31);
    *(_DWORD *)(v6 + 32) = -1;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 84) = 0u;
    *(unsigned char *)(v6 + 100) = *a4;
    *(_OWORD *)(v6 + 120) = 0u;
    *(_OWORD *)(v6 + 104) = 0u;
    *(_DWORD *)(v6 + 136) = 0x7FFFFFFF;
    uint64_t result = v6 + 144;
    a1[4] = v6 + 144;
    a1[4] = v6 + 144;
  }
  return result;
}

void sub_5F61B8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_5F61C0(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *(void *)(result + 8);
  if (*(void *)result != v4)
  {
    unint64_t v6 = (uint64_t *)result;
    char v7 = *(unsigned char *)(a2 + 23);
    int v24 = v7;
    unint64_t v22 = *(void *)(a2 + 8);
    uint64_t v23 = *(char **)a2;
    if (v7 >= 0) {
      long long v8 = (char *)a2;
    }
    else {
      long long v8 = *(char **)a2;
    }
    if (v7 >= 0) {
      int64_t v9 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      int64_t v9 = *(void *)(a2 + 8);
    }
    if (v9)
    {
      do
      {
        int v13 = *(char *)(v3 + 23);
        BOOL v14 = v13 < 0;
        if (v13 >= 0) {
          uint64_t v15 = v3;
        }
        else {
          uint64_t v15 = *(void *)v3;
        }
        uint64_t v16 = *(unsigned __int8 *)(v3 + 23);
        if (v14) {
          uint64_t v16 = *(void *)(v3 + 8);
        }
        if (v16 >= v9)
        {
          uint64_t v17 = v15 + v16;
          int v18 = *v8;
          uint64_t result = v15;
          do
          {
            uint64_t v19 = v16 - v9;
            if (v19 == -1) {
              break;
            }
            uint64_t result = (uint64_t)memchr((void *)result, v18, v19 + 1);
            if (!result) {
              break;
            }
            uint64_t v20 = result;
            uint64_t result = memcmp((const void *)result, v8, v9);
            if (!result)
            {
              if (v20 == v17 || v20 - v15 == -1) {
                break;
              }
              goto LABEL_9;
            }
            uint64_t result = v20 + 1;
            uint64_t v16 = v17 - (v20 + 1);
          }
          while (v16 >= v9);
        }
        v3 += 24;
      }
      while (v3 != v4);
    }
    else
    {
LABEL_9:
      char v26 = 1;
      unint64_t v10 = v6[4];
      if (v10 >= v6[5])
      {
        uint64_t result = sub_5FA0AC(v6 + 3, a2, a3, &v26);
      }
      else
      {
        uint64_t v11 = *a3;
        if (v24 < 0)
        {
          sub_4200((unsigned char *)v6[4], v23, v22);
        }
        else
        {
          long long v12 = *(_OWORD *)a2;
          *(void *)(v10 + 16) = *(void *)(a2 + 16);
          *(_OWORD *)unint64_t v10 = v12;
        }
        *(unsigned char *)(v10 + 24) = 1;
        if (v11 < 0) {
          __int16 v21 = -50;
        }
        else {
          __int16 v21 = 50;
        }
        *(_DWORD *)(v10 + 28) = (int)v11 / 100
                              + ((5243 * (__int16)(v21 + (int)v11 % 100)) >> 19)
                              + ((5243 * (__int16)(v21 + (int)v11 % 100)) >> 31);
        *(_DWORD *)(v10 + 32) = -1;
        *(_OWORD *)(v10 + 40) = 0u;
        *(_OWORD *)(v10 + 56) = 0u;
        *(_OWORD *)(v10 + 72) = 0u;
        *(_OWORD *)(v10 + 84) = 0u;
        *(unsigned char *)(v10 + 100) = 1;
        *(_OWORD *)(v10 + 104) = 0u;
        *(_OWORD *)(v10 + 120) = 0u;
        *(_DWORD *)(v10 + 136) = 0x7FFFFFFF;
        uint64_t result = v10 + 144;
        v6[4] = v10 + 144;
      }
      v6[4] = result;
    }
  }
  return result;
}

void sub_5F63C8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_5F63D0(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *(void *)(result + 8);
  if (*(void *)result != v4)
  {
    unint64_t v6 = (uint64_t *)result;
    char v7 = *(unsigned char *)(a2 + 23);
    int v22 = v7;
    unint64_t v20 = *(void *)(a2 + 8);
    __int16 v21 = *(char **)a2;
    if (v7 >= 0) {
      long long v8 = (char *)a2;
    }
    else {
      long long v8 = *(char **)a2;
    }
    if (v7 >= 0) {
      int64_t v9 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      int64_t v9 = *(void *)(a2 + 8);
    }
    if (v9)
    {
      do
      {
        int v12 = *(char *)(v3 + 23);
        BOOL v13 = v12 < 0;
        if (v12 >= 0) {
          uint64_t v14 = v3;
        }
        else {
          uint64_t v14 = *(void *)v3;
        }
        uint64_t v15 = *(unsigned __int8 *)(v3 + 23);
        if (v13) {
          uint64_t v15 = *(void *)(v3 + 8);
        }
        if (v15 >= v9)
        {
          uint64_t v16 = v14 + v15;
          int v17 = *v8;
          uint64_t result = v14;
          do
          {
            uint64_t v18 = v15 - v9;
            if (v18 == -1) {
              break;
            }
            uint64_t result = (uint64_t)memchr((void *)result, v17, v18 + 1);
            if (!result) {
              break;
            }
            uint64_t v19 = result;
            uint64_t result = memcmp((const void *)result, v8, v9);
            if (!result)
            {
              if (v19 == v16 || v19 - v14 == -1) {
                break;
              }
              goto LABEL_9;
            }
            uint64_t result = v19 + 1;
            uint64_t v15 = v16 - (v19 + 1);
          }
          while (v15 >= v9);
        }
        v3 += 24;
      }
      while (v3 != v4);
    }
    else
    {
LABEL_9:
      unsigned __int8 v24 = a3;
      unint64_t v10 = v6[4];
      if (v10 >= v6[5])
      {
        uint64_t result = sub_5FA3E0(v6 + 3, a2, &v24);
      }
      else
      {
        if (v22 < 0)
        {
          sub_4200((unsigned char *)v6[4], v21, v20);
        }
        else
        {
          long long v11 = *(_OWORD *)a2;
          *(void *)(v10 + 16) = *(void *)(a2 + 16);
          *(_OWORD *)unint64_t v10 = v11;
        }
        *(unsigned char *)(v10 + 24) = 0;
        *(_DWORD *)(v10 + 28) = a3;
        *(_DWORD *)(v10 + 32) = -1;
        *(_OWORD *)(v10 + 40) = 0u;
        *(_OWORD *)(v10 + 56) = 0u;
        *(_OWORD *)(v10 + 72) = 0u;
        *(_OWORD *)(v10 + 84) = 0u;
        *(unsigned char *)(v10 + 100) = 1;
        *(_OWORD *)(v10 + 104) = 0u;
        *(_OWORD *)(v10 + 120) = 0u;
        *(_DWORD *)(v10 + 136) = 0x7FFFFFFF;
        uint64_t result = v10 + 144;
        v6[4] = v10 + 144;
      }
      v6[4] = result;
    }
  }
  return result;
}

void sub_5F6574(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_5F657C(uint64_t *a1, uint64_t a2, int a3)
{
  int v10 = a3;
  char v9 = 3;
  unint64_t v5 = a1[4];
  if (v5 >= a1[5])
  {
    uint64_t result = sub_5FA6AC(a1 + 3, a2, &v9, &v10);
    a1[4] = result;
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200((unsigned char *)a1[4], *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v6 = *(_OWORD *)a2;
      *(void *)(v5 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v5 = v6;
    }
    *(unsigned char *)(v5 + 24) = 3;
    if (a3 < 0) {
      char v8 = -5;
    }
    else {
      char v8 = 5;
    }
    *(_DWORD *)(v5 + 28) = a3 / 10
                         + (((103 * (char)(v8 + a3 % 10)) >> 15) & 1)
                         + ((103 * (char)(v8 + a3 % 10)) >> 10);
    *(_DWORD *)(v5 + 32) = -1;
    *(_OWORD *)(v5 + 40) = 0u;
    *(_OWORD *)(v5 + 56) = 0u;
    *(_OWORD *)(v5 + 72) = 0u;
    *(_OWORD *)(v5 + 84) = 0u;
    *(unsigned char *)(v5 + 100) = 1;
    *(_OWORD *)(v5 + 104) = 0u;
    *(_OWORD *)(v5 + 120) = 0u;
    *(_DWORD *)(v5 + 136) = 0x7FFFFFFF;
    uint64_t result = v5 + 144;
    a1[4] = v5 + 144;
    a1[4] = v5 + 144;
  }
  return result;
}

void sub_5F66B0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_5F66B8(uint64_t *a1, uint64_t a2, int a3)
{
  int v10 = a3;
  char v9 = 4;
  unint64_t v5 = a1[4];
  if (v5 >= a1[5])
  {
    uint64_t result = sub_5FA6AC(a1 + 3, a2, &v9, &v10);
    a1[4] = result;
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200((unsigned char *)a1[4], *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v6 = *(_OWORD *)a2;
      *(void *)(v5 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v5 = v6;
    }
    *(unsigned char *)(v5 + 24) = 4;
    if (a3 < 0) {
      char v8 = -5;
    }
    else {
      char v8 = 5;
    }
    *(_DWORD *)(v5 + 28) = a3 / 10
                         + (((103 * (char)(v8 + a3 % 10)) >> 15) & 1)
                         + ((103 * (char)(v8 + a3 % 10)) >> 10);
    *(_DWORD *)(v5 + 32) = -1;
    *(_OWORD *)(v5 + 40) = 0u;
    *(_OWORD *)(v5 + 56) = 0u;
    *(_OWORD *)(v5 + 72) = 0u;
    *(_OWORD *)(v5 + 84) = 0u;
    *(unsigned char *)(v5 + 100) = 1;
    *(_OWORD *)(v5 + 104) = 0u;
    *(_OWORD *)(v5 + 120) = 0u;
    *(_DWORD *)(v5 + 136) = 0x7FFFFFFF;
    uint64_t result = v5 + 144;
    a1[4] = v5 + 144;
    a1[4] = v5 + 144;
  }
  return result;
}

void sub_5F67EC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_5F67F4(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *(void *)(result + 8);
  if (*(void *)result != v4)
  {
    long long v6 = (uint64_t *)result;
    char v7 = *(unsigned char *)(a2 + 23);
    int v23 = v7;
    unint64_t v21 = *(void *)(a2 + 8);
    int v22 = *(char **)a2;
    if (v7 >= 0) {
      char v8 = (char *)a2;
    }
    else {
      char v8 = *(char **)a2;
    }
    if (v7 >= 0) {
      int64_t v9 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      int64_t v9 = *(void *)(a2 + 8);
    }
    if (v9)
    {
      do
      {
        int v12 = *(char *)(v3 + 23);
        BOOL v13 = v12 < 0;
        if (v12 >= 0) {
          uint64_t v14 = v3;
        }
        else {
          uint64_t v14 = *(void *)v3;
        }
        uint64_t v15 = *(unsigned __int8 *)(v3 + 23);
        if (v13) {
          uint64_t v15 = *(void *)(v3 + 8);
        }
        if (v15 >= v9)
        {
          uint64_t v16 = v14 + v15;
          int v17 = *v8;
          uint64_t result = v14;
          do
          {
            uint64_t v18 = v15 - v9;
            if (v18 == -1) {
              break;
            }
            uint64_t result = (uint64_t)memchr((void *)result, v17, v18 + 1);
            if (!result) {
              break;
            }
            uint64_t v19 = result;
            uint64_t result = memcmp((const void *)result, v8, v9);
            if (!result)
            {
              if (v19 == v16 || v19 - v14 == -1) {
                break;
              }
              goto LABEL_9;
            }
            uint64_t result = v19 + 1;
            uint64_t v15 = v16 - (v19 + 1);
          }
          while (v15 >= v9);
        }
        v3 += 24;
      }
      while (v3 != v4);
    }
    else
    {
LABEL_9:
      int v26 = a3;
      char v25 = 3;
      unint64_t v10 = v6[4];
      if (v10 >= v6[5])
      {
        uint64_t result = sub_5FA6AC(v6 + 3, a2, &v25, &v26);
      }
      else
      {
        if (v23 < 0)
        {
          sub_4200((unsigned char *)v6[4], v22, v21);
        }
        else
        {
          long long v11 = *(_OWORD *)a2;
          *(void *)(v10 + 16) = *(void *)(a2 + 16);
          *(_OWORD *)unint64_t v10 = v11;
        }
        *(unsigned char *)(v10 + 24) = 3;
        if (a3 < 0) {
          char v20 = -5;
        }
        else {
          char v20 = 5;
        }
        *(_DWORD *)(v10 + 28) = a3 / 10
                              + (((103 * (char)(v20 + a3 % 10)) >> 15) & 1)
                              + ((103 * (char)(v20 + a3 % 10)) >> 10);
        *(_DWORD *)(v10 + 32) = -1;
        *(_OWORD *)(v10 + 40) = 0u;
        *(_OWORD *)(v10 + 56) = 0u;
        *(_OWORD *)(v10 + 72) = 0u;
        *(_OWORD *)(v10 + 84) = 0u;
        *(unsigned char *)(v10 + 100) = 1;
        *(_OWORD *)(v10 + 104) = 0u;
        *(_OWORD *)(v10 + 120) = 0u;
        *(_DWORD *)(v10 + 136) = 0x7FFFFFFF;
        uint64_t result = v10 + 144;
        v6[4] = v10 + 144;
      }
      v6[4] = result;
    }
  }
  return result;
}

void sub_5F69F4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_5F69FC(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *(void *)(result + 8);
  if (*(void *)result != v4)
  {
    long long v6 = (uint64_t *)result;
    char v7 = *(unsigned char *)(a2 + 23);
    int v23 = v7;
    unint64_t v21 = *(void *)(a2 + 8);
    int v22 = *(char **)a2;
    if (v7 >= 0) {
      char v8 = (char *)a2;
    }
    else {
      char v8 = *(char **)a2;
    }
    if (v7 >= 0) {
      int64_t v9 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      int64_t v9 = *(void *)(a2 + 8);
    }
    if (v9)
    {
      do
      {
        int v12 = *(char *)(v3 + 23);
        BOOL v13 = v12 < 0;
        if (v12 >= 0) {
          uint64_t v14 = v3;
        }
        else {
          uint64_t v14 = *(void *)v3;
        }
        uint64_t v15 = *(unsigned __int8 *)(v3 + 23);
        if (v13) {
          uint64_t v15 = *(void *)(v3 + 8);
        }
        if (v15 >= v9)
        {
          uint64_t v16 = v14 + v15;
          int v17 = *v8;
          uint64_t result = v14;
          do
          {
            uint64_t v18 = v15 - v9;
            if (v18 == -1) {
              break;
            }
            uint64_t result = (uint64_t)memchr((void *)result, v17, v18 + 1);
            if (!result) {
              break;
            }
            uint64_t v19 = result;
            uint64_t result = memcmp((const void *)result, v8, v9);
            if (!result)
            {
              if (v19 == v16 || v19 - v14 == -1) {
                break;
              }
              goto LABEL_9;
            }
            uint64_t result = v19 + 1;
            uint64_t v15 = v16 - (v19 + 1);
          }
          while (v15 >= v9);
        }
        v3 += 24;
      }
      while (v3 != v4);
    }
    else
    {
LABEL_9:
      int v26 = a3;
      char v25 = 4;
      unint64_t v10 = v6[4];
      if (v10 >= v6[5])
      {
        uint64_t result = sub_5FA6AC(v6 + 3, a2, &v25, &v26);
      }
      else
      {
        if (v23 < 0)
        {
          sub_4200((unsigned char *)v6[4], v22, v21);
        }
        else
        {
          long long v11 = *(_OWORD *)a2;
          *(void *)(v10 + 16) = *(void *)(a2 + 16);
          *(_OWORD *)unint64_t v10 = v11;
        }
        *(unsigned char *)(v10 + 24) = 4;
        if (a3 < 0) {
          char v20 = -5;
        }
        else {
          char v20 = 5;
        }
        *(_DWORD *)(v10 + 28) = a3 / 10
                              + (((103 * (char)(v20 + a3 % 10)) >> 15) & 1)
                              + ((103 * (char)(v20 + a3 % 10)) >> 10);
        *(_DWORD *)(v10 + 32) = -1;
        *(_OWORD *)(v10 + 40) = 0u;
        *(_OWORD *)(v10 + 56) = 0u;
        *(_OWORD *)(v10 + 72) = 0u;
        *(_OWORD *)(v10 + 84) = 0u;
        *(unsigned char *)(v10 + 100) = 1;
        *(_OWORD *)(v10 + 104) = 0u;
        *(_OWORD *)(v10 + 120) = 0u;
        *(_DWORD *)(v10 + 136) = 0x7FFFFFFF;
        uint64_t result = v10 + 144;
        v6[4] = v10 + 144;
      }
      v6[4] = result;
    }
  }
  return result;
}

void sub_5F6BFC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

void sub_5F6C04(uint64_t a1, long long *a2)
{
  if (*(void *)(a1 + 32) < *(void *)(a1 + 40)) {
    sub_5F2A7C(*(char **)(a1 + 32), a2);
  }
  sub_5FA9D4((void *)(a1 + 24), a2);
}

void sub_5F6C5C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

void sub_5F6C64(void *a1, uint64_t a2)
{
  unint64_t v2 = a1[1];
  if (v2 < a1[2])
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200((unsigned char *)a1[1], *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v3 = *(_OWORD *)a2;
      *(void *)(v2 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v2 = v3;
    }
    *(unsigned char *)(v2 + 24) = 11;
    *(void *)(v2 + 28) = -1;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    operator new();
  }
  sub_5FAC34(a1, a2);
}

void sub_5F6D60(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_5F6D6C(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
  {
    operator delete(*(void **)(a1 + 72));
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = *(void ***)(a1 + 24);
      if (!v2) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 48));
  uint64_t v2 = *(void ***)(a1 + 24);
  if (!v2)
  {
LABEL_4:
    long long v3 = *(void **)a1;
    if (*(void *)a1) {
      goto LABEL_5;
    }
    return a1;
  }
LABEL_9:
  unint64_t v5 = *(void ***)(a1 + 32);
  if (v5 == v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
    long long v3 = *(void **)a1;
    if (!*(void *)a1) {
      return a1;
    }
    goto LABEL_5;
  }
  do
  {
    if (*((char *)v5 - 9) < 0) {
      operator delete(*(v5 - 4));
    }
    v5 -= 4;
  }
  while (v5 != v2);
  long long v6 = *(void **)(a1 + 24);
  *(void *)(a1 + 32) = v2;
  operator delete(v6);
  long long v3 = *(void **)a1;
  if (*(void *)a1)
  {
LABEL_5:
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_5F6E3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, long long *a5, long long *a6, int a7, uint64_t a8)
{
  sub_5F4680(a1, a2, a8, a7);
  sub_5F2C0C((uint64_t)&__p, a3, a4, a5, a6);
  sub_5F6C64((void *)(a1 + 24), a2);
}

void sub_5F6F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_5F6F78(uint64_t a1, uint64_t a2, int a3)
{
  sub_4F58AC((uint64_t)v4, a2);
  int v5 = 0;
  int v6 = a3;
  sub_5F6FC4();
}

void sub_5F6FC4()
{
}

void sub_5F70C8(uint64_t a1, uint64_t a2)
{
  sub_4F58AC((uint64_t)v2, a2);
  uint64_t v3 = 0x7FFFFFFF00000001;
  sub_5F6FC4();
}

void sub_5F7118(uint64_t a1, uint64_t a2)
{
  char v6 = 1;
  __int16 v5 = 511;
  sub_5F3C5C((uint64_t)v2, a2, &v5);
  sub_4F58AC((uint64_t)v3, (uint64_t)v2);
  uint64_t v4 = 0x7FFFFFFF00000001;
  sub_5F6FC4();
}

void sub_5F7190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_5F71A4(uint64_t a1, uint64_t a2, float a3)
{
  char v9 = 12;
  float v8 = a3;
  unint64_t v4 = *(void *)(a1 + 32);
  if (v4 >= *(void *)(a1 + 40))
  {
    uint64_t result = sub_55C070((char **)(a1 + 24), (long long *)a2, &v9, &v8);
    *(void *)(a1 + 32) = result;
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200(*(unsigned char **)(a1 + 32), *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v6 = *(_OWORD *)a2;
      *(void *)(v4 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v4 = v6;
    }
    *(unsigned char *)(v4 + 24) = 12;
    *(void *)(v4 + 28) = -1;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_OWORD *)(v4 + 72) = 0u;
    *(void *)(v4 + 88) = 0;
    *(float *)(v4 + 96) = a3;
    *(unsigned char *)(v4 + 100) = 1;
    *(_OWORD *)(v4 + 104) = 0u;
    *(_OWORD *)(v4 + 120) = 0u;
    *(_DWORD *)(v4 + 136) = 0x7FFFFFFF;
    uint64_t result = (char *)(v4 + 144);
    *(void *)(a1 + 32) = v4 + 144;
    *(void *)(a1 + 32) = v4 + 144;
  }
  return result;
}

void sub_5F7290(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

char *sub_5F7298(uint64_t a1, uint64_t a2, float a3)
{
  char v9 = 15;
  float v8 = a3;
  unint64_t v4 = *(void *)(a1 + 32);
  if (v4 >= *(void *)(a1 + 40))
  {
    uint64_t result = sub_55C070((char **)(a1 + 24), (long long *)a2, &v9, &v8);
    *(void *)(a1 + 32) = result;
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200(*(unsigned char **)(a1 + 32), *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v6 = *(_OWORD *)a2;
      *(void *)(v4 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v4 = v6;
    }
    *(unsigned char *)(v4 + 24) = 15;
    *(void *)(v4 + 28) = -1;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_OWORD *)(v4 + 72) = 0u;
    *(void *)(v4 + 88) = 0;
    *(float *)(v4 + 96) = a3;
    *(unsigned char *)(v4 + 100) = 1;
    *(_OWORD *)(v4 + 104) = 0u;
    *(_OWORD *)(v4 + 120) = 0u;
    *(_DWORD *)(v4 + 136) = 0x7FFFFFFF;
    uint64_t result = (char *)(v4 + 144);
    *(void *)(a1 + 32) = v4 + 144;
    *(void *)(a1 + 32) = v4 + 144;
  }
  return result;
}

void sub_5F7384(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

void sub_5F738C(void *a1, uint64_t a2)
{
  unint64_t v2 = a1[4];
  if (v2 < a1[5])
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200((unsigned char *)a1[4], *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v3 = *(_OWORD *)a2;
      *(void *)(v2 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v2 = v3;
    }
    *(unsigned char *)(v2 + 24) = 13;
    *(void *)(v2 + 28) = -1;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 84) = 0u;
    *(unsigned char *)(v2 + 100) = 1;
    sub_5F82BC();
  }
  sub_5FAF20(a1 + 3, a2);
}

void sub_5F7464(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

void sub_5F746C(void *a1, uint64_t a2)
{
  unint64_t v2 = a1[4];
  if (v2 < a1[5])
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200((unsigned char *)a1[4], *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v3 = *(_OWORD *)a2;
      *(void *)(v2 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v2 = v3;
    }
    *(unsigned char *)(v2 + 24) = 14;
    *(void *)(v2 + 28) = -1;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 84) = 0u;
    *(unsigned char *)(v2 + 100) = 1;
    *(void *)(v2 + 104) = 0;
    sub_5F839C();
  }
  sub_5FB200(a1 + 3, a2);
}

void sub_5F7544(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_5F754C(uint64_t a1, void *__s2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v2 != v3)
  {
    if (*((char *)__s2 + 23) >= 0) {
      uint64_t v5 = *((unsigned __int8 *)__s2 + 23);
    }
    else {
      uint64_t v5 = __s2[1];
    }
    if ((*((unsigned char *)__s2 + 23) & 0x80) != 0)
    {
      long long v6 = (unsigned __int8 *)*__s2;
      while (1)
      {
        uint64_t v10 = *(unsigned __int8 *)(v2 + 23);
        if ((v10 & 0x80u) == 0) {
          uint64_t v11 = *(unsigned __int8 *)(v2 + 23);
        }
        else {
          uint64_t v11 = *(void *)(v2 + 8);
        }
        if (v11 == v5)
        {
          if ((v10 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v2, v6, *(void *)(v2 + 8))) {
              return 1;
            }
          }
          else
          {
            if (!*(unsigned char *)(v2 + 23)) {
              return 1;
            }
            uint64_t v12 = 0;
            while (*(unsigned __int8 *)(v2 + v12) == v6[v12])
            {
              if (v10 == ++v12) {
                return 1;
              }
            }
          }
        }
        v2 += 144;
        if (v2 == v3) {
          return 0;
        }
      }
    }
    do
    {
      uint64_t v7 = *(unsigned __int8 *)(v2 + 23);
      if ((v7 & 0x80u) == 0) {
        uint64_t v8 = *(unsigned __int8 *)(v2 + 23);
      }
      else {
        uint64_t v8 = *(void *)(v2 + 8);
      }
      if (v8 == v5)
      {
        if ((v7 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v2, __s2, *(void *)(v2 + 8))) {
            return 1;
          }
        }
        else
        {
          if (!*(unsigned char *)(v2 + 23)) {
            return 1;
          }
          uint64_t v9 = 0;
          while (*(unsigned __int8 *)(v2 + v9) == *((unsigned __int8 *)__s2 + v9))
          {
            if (v7 == ++v9) {
              return 1;
            }
          }
        }
      }
      v2 += 144;
    }
    while (v2 != v3);
  }
  return 0;
}

uint64_t sub_5F7680(uint64_t a1, void *__s2)
{
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v3 = *(void *)(a1 + 80);
  if (v2 != v3)
  {
    if (*((char *)__s2 + 23) >= 0) {
      uint64_t v5 = *((unsigned __int8 *)__s2 + 23);
    }
    else {
      uint64_t v5 = __s2[1];
    }
    if ((*((unsigned char *)__s2 + 23) & 0x80) != 0)
    {
      long long v6 = (unsigned __int8 *)*__s2;
      while (1)
      {
        uint64_t v10 = *(unsigned __int8 *)(v2 + 23);
        if ((v10 & 0x80u) == 0) {
          uint64_t v11 = *(unsigned __int8 *)(v2 + 23);
        }
        else {
          uint64_t v11 = *(void *)(v2 + 8);
        }
        if (v11 == v5)
        {
          if ((v10 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v2, v6, *(void *)(v2 + 8))) {
              return 1;
            }
          }
          else
          {
            if (!*(unsigned char *)(v2 + 23)) {
              return 1;
            }
            uint64_t v12 = 0;
            while (*(unsigned __int8 *)(v2 + v12) == v6[v12])
            {
              if (v10 == ++v12) {
                return 1;
              }
            }
          }
        }
        v2 += 32;
        if (v2 == v3) {
          return 0;
        }
      }
    }
    do
    {
      uint64_t v7 = *(unsigned __int8 *)(v2 + 23);
      if ((v7 & 0x80u) == 0) {
        uint64_t v8 = *(unsigned __int8 *)(v2 + 23);
      }
      else {
        uint64_t v8 = *(void *)(v2 + 8);
      }
      if (v8 == v5)
      {
        if ((v7 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v2, __s2, *(void *)(v2 + 8))) {
            return 1;
          }
        }
        else
        {
          if (!*(unsigned char *)(v2 + 23)) {
            return 1;
          }
          uint64_t v9 = 0;
          while (*(unsigned __int8 *)(v2 + v9) == *((unsigned __int8 *)__s2 + v9))
          {
            if (v7 == ++v9) {
              return 1;
            }
          }
        }
      }
      v2 += 32;
    }
    while (v2 != v3);
  }
  return 0;
}

uint64_t sub_5F77B4(uint64_t a1, const void **__s2)
{
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v3 = *(void *)(a1 + 80);
  if (v2 == v3) {
    return 0;
  }
  if (*((char *)__s2 + 23) >= 0) {
    uint64_t v5 = (const void *)*((unsigned __int8 *)__s2 + 23);
  }
  else {
    uint64_t v5 = __s2[1];
  }
  if ((*((unsigned char *)__s2 + 23) & 0x80) == 0)
  {
    int v6 = *((unsigned __int8 *)__s2 + 24);
    while (1)
    {
      uint64_t v7 = *(unsigned __int8 *)(v2 + 23);
      if ((v7 & 0x80u) == 0) {
        uint64_t v8 = (const void *)*(unsigned __int8 *)(v2 + 23);
      }
      else {
        uint64_t v8 = *(const void **)(v2 + 8);
      }
      if (v8 == v5)
      {
        if ((v7 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v2, __s2, *(void *)(v2 + 8)))
          {
LABEL_7:
            if (*(unsigned __int8 *)(v2 + 24) == v6) {
              return 1;
            }
          }
        }
        else
        {
          if (!*(unsigned char *)(v2 + 23)) {
            goto LABEL_7;
          }
          uint64_t v9 = 0;
          while (*(unsigned __int8 *)(v2 + v9) == *((unsigned __int8 *)__s2 + v9))
          {
            if (v7 == ++v9) {
              goto LABEL_7;
            }
          }
        }
      }
      v2 += 32;
      if (v2 == v3) {
        return 0;
      }
    }
  }
  uint64_t v10 = (unsigned __int8 *)*__s2;
  int v11 = *((unsigned __int8 *)__s2 + 24);
  while (1)
  {
    uint64_t v12 = *(unsigned __int8 *)(v2 + 23);
    if ((v12 & 0x80u) == 0) {
      BOOL v13 = (const void *)*(unsigned __int8 *)(v2 + 23);
    }
    else {
      BOOL v13 = *(const void **)(v2 + 8);
    }
    if (v13 != v5) {
      goto LABEL_23;
    }
    if ((v12 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v2, v10, *(void *)(v2 + 8))) {
        goto LABEL_23;
      }
    }
    else if (*(unsigned char *)(v2 + 23))
    {
      uint64_t v14 = 0;
      while (*(unsigned __int8 *)(v2 + v14) == v10[v14])
      {
        if (v12 == ++v14) {
          goto LABEL_22;
        }
      }
      goto LABEL_23;
    }
LABEL_22:
    if (*(unsigned __int8 *)(v2 + 24) == v11) {
      return 1;
    }
LABEL_23:
    v2 += 32;
    if (v2 == v3) {
      return 0;
    }
  }
}

uint64_t sub_5F7924(char ***a1, char *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    int v4 = a2[23];
    if (v4 >= 0) {
      uint64_t v5 = a2;
    }
    else {
      uint64_t v5 = *(char **)a2;
    }
    if (v4 >= 0) {
      int64_t v6 = a2[23];
    }
    else {
      int64_t v6 = *((void *)a2 + 1);
    }
    if (!v6) {
      return 1;
    }
    do
    {
      int v8 = *((char *)v2 + 23);
      BOOL v9 = v8 < 0;
      if (v8 >= 0) {
        uint64_t v10 = (char *)v2;
      }
      else {
        uint64_t v10 = *v2;
      }
      int v11 = (char *)*((unsigned __int8 *)v2 + 23);
      if (v9) {
        int v11 = v2[1];
      }
      if ((uint64_t)v11 >= v6)
      {
        uint64_t v12 = &v11[(void)v10];
        int v13 = *v5;
        uint64_t v14 = v10;
        do
        {
          uint64_t v15 = &v11[-v6];
          if (v15 == (char *)-1) {
            break;
          }
          uint64_t v16 = (char *)memchr(v14, v13, (size_t)(v15 + 1));
          if (!v16) {
            break;
          }
          int v17 = v16;
          if (!memcmp(v16, v5, v6))
          {
            if (v17 == v12 || v17 - v10 == -1) {
              break;
            }
            return 1;
          }
          uint64_t v14 = v17 + 1;
          int v11 = (char *)(v12 - (v17 + 1));
        }
        while ((uint64_t)v11 >= v6);
      }
      v2 += 3;
    }
    while (v2 != v3);
  }
  return 0;
}

std::string *sub_5F7A30(uint64_t a1, const std::string *a2, const std::string *a3)
{
  std::string::operator=((std::string *)(a1 + 112), a2);

  return std::string::operator=((std::string *)(a1 + 136), a3);
}

void sub_5F7A74(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  if (!*(unsigned char *)(a1 + 108)) {
    return;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  std::operator+<char>();
  BOOL v9 = std::string::append(&v47, "}");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  int v11 = a2[23];
  if (v11 >= 0) {
    uint64_t v12 = a2;
  }
  else {
    uint64_t v12 = *(const std::string::value_type **)a2;
  }
  if (v11 >= 0) {
    std::string::size_type v13 = a2[23];
  }
  else {
    std::string::size_type v13 = *((void *)a2 + 1);
  }
  uint64_t v14 = std::string::append(&v48, v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  uint64_t v16 = std::string::append(&v49, "{/s:");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  int v18 = *(char *)(a3 + 23);
  if (v18 >= 0) {
    uint64_t v19 = (const std::string::value_type *)a3;
  }
  else {
    uint64_t v19 = *(const std::string::value_type **)a3;
  }
  if (v18 >= 0) {
    std::string::size_type v20 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v20 = *(void *)(a3 + 8);
  }
  unint64_t v21 = std::string::append(&v50, v19, v20);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  int v23 = std::string::append(&__p, "}");
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  int64_t v46 = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)int v45 = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_17;
      }
      goto LABEL_35;
    }
  }
  else if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_18;
    }
LABEL_36:
    operator delete(v48.__r_.__value_.__l.__data_);
    char v25 = (std::string *)(v8 - 24);
    if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_19;
    }
LABEL_37:
    operator delete(v47.__r_.__value_.__l.__data_);
    goto LABEL_19;
  }
LABEL_35:
  operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_36;
  }
LABEL_18:
  char v25 = (std::string *)(v8 - 24);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_37;
  }
LABEL_19:
  uint64_t v26 = *(unsigned __int8 *)(v8 - 1);
  if ((v26 & 0x80u) == 0) {
    unsigned int v27 = v25;
  }
  else {
    unsigned int v27 = *(std::string **)(v8 - 24);
  }
  int v28 = a2[23];
  if (v28 >= 0) {
    int v29 = a2;
  }
  else {
    int v29 = *(char **)a2;
  }
  if (v28 >= 0) {
    int64_t v30 = a2[23];
  }
  else {
    int64_t v30 = *((void *)a2 + 1);
  }
  if (v30)
  {
    if ((v26 & 0x80u) != 0) {
      uint64_t v26 = *(void *)(v8 - 16);
    }
    if (v26 >= v30)
    {
      unint64_t v35 = (char *)v27 + v26;
      int v36 = *v29;
      std::string::size_type v37 = v27;
      do
      {
        uint64_t v38 = v26 - v30;
        if (v38 == -1) {
          break;
        }
        BOOL v39 = (char *)memchr(v37, v36, v38 + 1);
        if (!v39) {
          break;
        }
        uint64_t v40 = v39;
        if (!memcmp(v39, v29, v30))
        {
          char v31 = 0;
          if (v40 != v35)
          {
            std::string::size_type v32 = v40 - (char *)v27;
            if (v40 - (char *)v27 != -1) {
              goto LABEL_39;
            }
          }
          goto LABEL_46;
        }
        std::string::size_type v37 = (std::string *)(v40 + 1);
        uint64_t v26 = v35 - (v40 + 1);
      }
      while (v26 >= v30);
    }
    char v31 = 0;
  }
  else
  {
    std::string::size_type v32 = 0;
LABEL_39:
    if (v46 >= 0) {
      std::string::size_type v33 = v45;
    }
    else {
      std::string::size_type v33 = (void **)v45[0];
    }
    if (v46 >= 0) {
      std::string::size_type v34 = HIBYTE(v46);
    }
    else {
      std::string::size_type v34 = (std::string::size_type)v45[1];
    }
    std::string::replace(v25, v32, v30, (const std::string::value_type *)v33, v34);
    char v31 = 1;
  }
LABEL_46:
  if (SHIBYTE(v46) < 0)
  {
    operator delete(v45[0]);
    if ((v31 & 1) == 0) {
      return;
    }
  }
  else if ((v31 & 1) == 0)
  {
    return;
  }
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(&__p, *(void **)a3, *(void *)(a3 + 8));
    char v44 = a4;
    if (sub_5F77B4(a1, (const void **)&__p.__r_.__value_.__l.__data_))
    {
LABEL_52:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_65:
      operator delete(__p.__r_.__value_.__l.__data_);
      return;
    }
  }
  else
  {
    std::string __p = *(std::string *)a3;
    char v44 = a4;
    if (sub_5F77B4(a1, (const void **)&__p.__r_.__value_.__l.__data_)) {
      goto LABEL_52;
    }
  }
  unint64_t v41 = *(void *)(a1 + 80);
  if (v41 >= *(void *)(a1 + 88))
  {
    *(void *)(a1 + 80) = sub_5FB4E0((char **)(a1 + 72), (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_65;
    }
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_4200(*(unsigned char **)(a1 + 80), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v42 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v41 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v41 = v42;
    }
    *(unsigned char *)(v41 + 24) = v44;
    *(void *)(a1 + 80) = v41 + 32;
    *(void *)(a1 + 80) = v41 + 32;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_65;
    }
  }
}

void sub_5F7E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  *(void *)(v40 + 80) = v41;
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_5F7F10(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = sub_4F58AC(a1, a2);
  *(_DWORD *)(result + 160) = a3;
  return result;
}

uint64_t sub_5F7F38(uint64_t a1)
{
  if (*(char *)(a1 + 159) < 0)
  {
    operator delete(*(void **)(a1 + 136));
    if ((*(char *)(a1 + 135) & 0x80000000) == 0)
    {
LABEL_3:
      sub_4F2CFC((uint64_t *)(a1 + 96));
      uint64_t v2 = *(void ***)(a1 + 72);
      if (!v2) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 135) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 112));
  sub_4F2CFC((uint64_t *)(a1 + 96));
  uint64_t v2 = *(void ***)(a1 + 72);
  if (!v2)
  {
LABEL_4:
    uint64_t v3 = *(void ***)(a1 + 48);
    if (!v3) {
      goto LABEL_5;
    }
LABEL_16:
    uint64_t v8 = *(void ***)(a1 + 56);
    BOOL v9 = v3;
    if (v8 != v3)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v3);
      BOOL v9 = *(void ***)(a1 + 48);
    }
    *(void *)(a1 + 56) = v3;
    operator delete(v9);
    sub_4F2D44(a1 + 24);
    int v4 = *(void ***)a1;
    if (!*(void *)a1) {
      return a1;
    }
    goto LABEL_23;
  }
LABEL_9:
  int64_t v6 = *(void ***)(a1 + 80);
  if (v6 == v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
    uint64_t v3 = *(void ***)(a1 + 48);
    if (v3) {
      goto LABEL_16;
    }
  }
  else
  {
    do
    {
      if (*((char *)v6 - 9) < 0) {
        operator delete(*(v6 - 4));
      }
      v6 -= 4;
    }
    while (v6 != v2);
    uint64_t v7 = *(void **)(a1 + 72);
    *(void *)(a1 + 80) = v2;
    operator delete(v7);
    uint64_t v3 = *(void ***)(a1 + 48);
    if (v3) {
      goto LABEL_16;
    }
  }
LABEL_5:
  sub_4F2D44(a1 + 24);
  int v4 = *(void ***)a1;
  if (!*(void *)a1) {
    return a1;
  }
LABEL_23:
  long long v10 = *(void ***)(a1 + 8);
  int v11 = v4;
  if (v10 != v4)
  {
    do
    {
      if (*((char *)v10 - 1) < 0) {
        operator delete(*(v10 - 3));
      }
      v10 -= 3;
    }
    while (v10 != v4);
    int v11 = *(void ***)a1;
  }
  *(void *)(a1 + 8) = v4;
  operator delete(v11);
  return a1;
}

void sub_5F80C0(void ***a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (v3 != *a1)
  {
    do
    {
      if (*((char *)v3 - 9) < 0)
      {
        operator delete(*(v3 - 4));
        if ((*((char *)v3 - 33) & 0x80000000) == 0)
        {
LABEL_8:
          sub_4F2CFC((uint64_t *)v3 - 9);
          uint64_t v5 = (void **)*(v3 - 12);
          if (!v5) {
            goto LABEL_9;
          }
          goto LABEL_14;
        }
      }
      else if ((*((char *)v3 - 33) & 0x80000000) == 0)
      {
        goto LABEL_8;
      }
      operator delete(*(v3 - 7));
      sub_4F2CFC((uint64_t *)v3 - 9);
      uint64_t v5 = (void **)*(v3 - 12);
      if (!v5)
      {
LABEL_9:
        int64_t v6 = (void **)*(v3 - 15);
        if (v6) {
          goto LABEL_21;
        }
        goto LABEL_10;
      }
LABEL_14:
      BOOL v9 = (void **)*(v3 - 11);
      if (v9 == v5)
      {
        *(v3 - 11) = v5;
        operator delete(v5);
        int64_t v6 = (void **)*(v3 - 15);
        if (v6) {
          goto LABEL_21;
        }
      }
      else
      {
        do
        {
          if (*((char *)v9 - 9) < 0) {
            operator delete(*(v9 - 4));
          }
          v9 -= 4;
        }
        while (v9 != v5);
        long long v10 = *(v3 - 12);
        *(v3 - 11) = v5;
        operator delete(v10);
        int64_t v6 = (void **)*(v3 - 15);
        if (v6)
        {
LABEL_21:
          int v11 = (void **)*(v3 - 14);
          uint64_t v12 = v6;
          if (v11 != v6)
          {
            do
            {
              if (*((char *)v11 - 1) < 0) {
                operator delete(*(v11 - 3));
              }
              v11 -= 3;
            }
            while (v11 != v6);
            uint64_t v12 = (void **)*(v3 - 15);
          }
          *(v3 - 14) = v6;
          operator delete(v12);
          uint64_t v7 = v3 - 21;
          sub_4F2D44((uint64_t)(v3 - 18));
          uint64_t v8 = (void **)*(v3 - 21);
          if (!v8) {
            goto LABEL_5;
          }
LABEL_28:
          std::string::size_type v13 = (void **)*(v3 - 20);
          int v4 = v8;
          if (v13 != v8)
          {
            do
            {
              if (*((char *)v13 - 1) < 0) {
                operator delete(*(v13 - 3));
              }
              v13 -= 3;
            }
            while (v13 != v8);
            int v4 = *v7;
          }
          *(v3 - 20) = v8;
          operator delete(v4);
          goto LABEL_5;
        }
      }
LABEL_10:
      uint64_t v7 = v3 - 21;
      sub_4F2D44((uint64_t)(v3 - 18));
      uint64_t v8 = (void **)*(v3 - 21);
      if (v8) {
        goto LABEL_28;
      }
LABEL_5:
      uint64_t v3 = v7;
    }
    while (v7 != v2);
  }
  a1[1] = v2;
}

void **sub_5F8260(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    int v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_5F7F38(v3 - 168);
      while ((void *)v3 != v2);
      int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_5F82BC()
{
}

void sub_5F8374(void *a1)
{
  if (*(char *)(v1 + 23) < 0)
  {
    operator delete(*(void **)v1);
    sub_58CC(a1);
  }
  sub_58CC(a1);
}

void sub_5F839C()
{
}

void sub_5F8460(void *a1)
{
  int v4 = *v2;
  if (!*v2) {
    sub_58CC(a1);
  }
  *(void *)(v1 + 16) = v4;
  operator delete(v4);
  sub_58CC(a1);
}

uint64_t sub_5F8484(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_4D4B58(result);
    operator delete();
  }
  return result;
}

uint64_t sub_5F84D4(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    for (uint64_t i = *(void *)(a1 + 8); (void *)i != v2; sub_4F2DAC(a1 + 16, i))
      i -= 144;
    *(void *)(a1 + 8) = v2;
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_5F853C(void ***a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (v3 != *a1)
  {
    while (1)
    {
      sub_5F20E4((void ***)v3 - 2);
      uint64_t v4 = (uint64_t)*(v3 - 3);
      *(v3 - 3) = 0;
      if (v4)
      {
        if (*(unsigned char *)(v4 + 24))
        {
          if (*(char *)(v4 + 23) < 0) {
            operator delete(*(void **)v4);
          }
          *(unsigned char *)(v4 + 24) = 0;
        }
        operator delete();
      }
      uint64_t v5 = (uint64_t)*(v3 - 4);
      *(v3 - 4) = 0;
      if (v5)
      {
        int64_t v6 = *(void **)(v5 + 8);
        if (v6)
        {
          *(void *)(v5 + 16) = v6;
          operator delete(v6);
        }
        operator delete();
      }
      uint64_t v7 = (uint64_t)*(v3 - 5);
      *(v3 - 5) = 0;
      if (v7) {
        break;
      }
      uint64_t v8 = (uint64_t)*(v3 - 7);
      *(v3 - 7) = 0;
      if (v8) {
        sub_4F48F0((uint64_t)(v3 - 7), v8);
      }
      BOOL v9 = (void **)*(v3 - 10);
      if (v9)
      {
        long long v10 = (void **)*(v3 - 9);
        int v11 = *(v3 - 10);
        if (v10 != v9)
        {
          do
          {
            if (*((char *)v10 - 9) < 0) {
              operator delete(*(v10 - 4));
            }
            v10 -= 5;
          }
          while (v10 != v9);
          int v11 = *(v3 - 10);
        }
        *(v3 - 9) = v9;
        operator delete(v11);
      }
      uint64_t v12 = (uint64_t)*(v3 - 11);
      *(v3 - 11) = 0;
      if (v12) {
        sub_4F49E8((uint64_t)(v3 - 11), v12);
      }
      uint64_t v13 = (uint64_t)*(v3 - 12);
      *(v3 - 12) = 0;
      if (v13)
      {
        if (*(char *)(v13 + 31) < 0) {
          operator delete(*(void **)(v13 + 8));
        }
        operator delete();
      }
      uint64_t v14 = (uint64_t)*(v3 - 13);
      *(v3 - 13) = 0;
      if (v14)
      {
        if (*(char *)(v14 + 23) < 0) {
          operator delete(*(void **)v14);
        }
        operator delete();
      }
      long long v15 = v3 - 18;
      if (*((char *)v3 - 121) < 0) {
        operator delete(*v15);
      }
      v3 -= 18;
      if (v15 == v2) {
        goto LABEL_2;
      }
    }
    if (*(char *)(v7 + 47) < 0)
    {
      operator delete(*(void **)(v7 + 24));
      if ((*(char *)(v7 + 23) & 0x80000000) == 0) {
LABEL_18:
      }
        operator delete();
    }
    else if ((*(char *)(v7 + 23) & 0x80000000) == 0)
    {
      goto LABEL_18;
    }
    operator delete(*(void **)v7);
    goto LABEL_18;
  }
LABEL_2:
  a1[1] = v2;
}

char *sub_5F8744(char **a1, _DWORD *a2, uint64_t a3, char *a4)
{
  uint64_t v5 = *a1;
  int64_t v6 = a1[1];
  unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - *a1) >> 3);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0x666666666666666) {
    sub_2E00();
  }
  if (0x999999999999999ALL * ((a1[2] - v5) >> 3) > v8) {
    unint64_t v8 = 0x999999999999999ALL * ((a1[2] - v5) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v5) >> 3) >= 0x333333333333333) {
    unint64_t v12 = 0x666666666666666;
  }
  else {
    unint64_t v12 = v8;
  }
  if (v12)
  {
    if (v12 > 0x666666666666666) {
      sub_188D718();
    }
    uint64_t v13 = operator new(40 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v14 = &v13[40 * v7];
  char v25 = &v13[40 * v12];
  char v15 = *a4;
  *(_DWORD *)uint64_t v14 = *a2;
  uint64_t v16 = v14 + 8;
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    *(_OWORD *)uint64_t v16 = *(_OWORD *)a3;
    *((void *)v14 + 3) = *(void *)(a3 + 16);
    v13[40 * v7 + 32] = v15;
    long long v17 = v14 + 40;
    if (v6 != v5) {
      goto LABEL_13;
    }
LABEL_17:
    long long v22 = v5;
    goto LABEL_18;
  }
  sub_4200(v16, *(void **)a3, *(void *)(a3 + 8));
  uint64_t v5 = *a1;
  int64_t v6 = a1[1];
  uint64_t v14 = &v13[40 * v7];
  v14[32] = v15;
  long long v17 = v14 + 40;
  if (v6 == v5) {
    goto LABEL_17;
  }
LABEL_13:
  uint64_t v18 = 0;
  do
  {
    uint64_t v19 = &v14[v18];
    std::string::size_type v20 = &v6[v18];
    *((_DWORD *)v19 - 10) = *(_DWORD *)&v6[v18 - 40];
    long long v21 = *(_OWORD *)&v6[v18 - 32];
    *((void *)v19 - 2) = *(void *)&v6[v18 - 16];
    *((_OWORD *)v19 - 2) = v21;
    *((void *)v20 - 3) = 0;
    *((void *)v20 - 2) = 0;
    *((void *)v20 - 4) = 0;
    *(v19 - 8) = v6[v18 - 8];
    v18 -= 40;
  }
  while (&v6[v18] != v5);
  long long v22 = *a1;
  uint64_t v5 = a1[1];
  v14 += v18;
LABEL_18:
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v25;
  if (v5 == v22)
  {
    if (v5) {
LABEL_20:
    }
      operator delete(v5);
  }
  else
  {
    do
    {
      long long v24 = v5 - 40;
      if (*(v5 - 9) < 0) {
        operator delete(*((void **)v5 - 4));
      }
      v5 -= 40;
    }
    while (v24 != v22);
    uint64_t v5 = v22;
    if (v22) {
      goto LABEL_20;
    }
  }
  return v17;
}

void sub_5F8960(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_B79D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_5F8974(uint64_t *a1, uint64_t a2, char *a3, int *a4)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  unint64_t v7 = 0x8E38E38E38E38E39 * ((v6 - *a1) >> 4);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0x1C71C71C71C71C7) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * ((a1[2] - v5) >> 4) > v8) {
    unint64_t v8 = 0x1C71C71C71C71C72 * ((a1[2] - v5) >> 4);
  }
  if (0x8E38E38E38E38E39 * ((a1[2] - v5) >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v12 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v12 = v8;
  }
  uint64_t v37 = (uint64_t)(a1 + 2);
  if (v12)
  {
    if (v12 > 0x1C71C71C71C71C7) {
      sub_188D718();
    }
    uint64_t v13 = (char *)operator new(144 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v14 = &v13[144 * v7];
  int v36 = &v13[144 * v12];
  char v15 = *a3;
  int v16 = *a4;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(v14, *(void **)a2, *(void *)(a2 + 8));
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    uint64_t v14 = &v13[144 * v7];
  }
  else
  {
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
  }
  long long v17 = &v13[144 * v7];
  v17[24] = v15;
  *((_DWORD *)v17 + 7) = v16;
  *((_DWORD *)v17 + 8) = -1;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *(_OWORD *)(v17 + 72) = 0u;
  *(_OWORD *)(v17 + 84) = 0u;
  v17[100] = 1;
  *(_OWORD *)(v17 + 104) = 0u;
  *(_OWORD *)(v17 + 120) = 0u;
  *((_DWORD *)v17 + 34) = 0x7FFFFFFF;
  uint64_t v18 = (uint64_t)(v17 + 144);
  unint64_t v35 = v17 + 144;
  if (v6 == v5)
  {
    std::string::size_type v33 = (void *)v5;
  }
  else
  {
    uint64_t v19 = 0;
    do
    {
      uint64_t v20 = v6 + v19;
      long long v21 = *(_OWORD *)(v6 + v19 - 144);
      long long v22 = &v14[v19];
      *((void *)v22 - 16) = *(void *)(v6 + v19 - 128);
      *((_OWORD *)v22 - 9) = v21;
      *(_OWORD *)(v20 - 136) = 0uLL;
      uint64_t v23 = *(void *)(v6 + v19 - 120);
      int v24 = *(_DWORD *)(v6 + v19 - 112);
      *(void *)(v20 - 144) = 0;
      *((_DWORD *)v22 - 28) = v24;
      *((void *)v22 - 15) = v23;
      uint64_t v25 = *(void *)(v6 + v19 - 104);
      *(void *)(v20 - 104) = 0;
      *((void *)v22 - 13) = v25;
      uint64_t v26 = *(void *)(v6 + v19 - 96);
      *(void *)(v20 - 96) = 0;
      *((void *)v22 - 12) = v26;
      uint64_t v27 = *(void *)(v6 + v19 - 88);
      *(void *)(v20 - 88) = 0;
      *((void *)v22 - 11) = v27;
      *((void *)v22 - 10) = 0;
      *(_OWORD *)(v22 - 72) = 0uLL;
      *((_OWORD *)v22 - 5) = *(_OWORD *)(v6 + v19 - 80);
      *((void *)v22 - 8) = *(void *)(v6 + v19 - 64);
      uint64_t v28 = *(void *)(v6 + v19 - 56);
      *(_OWORD *)(v20 - 80) = 0uLL;
      *(_OWORD *)(v20 - 64) = 0uLL;
      *((void *)v22 - 7) = v28;
      LODWORD(v28) = *(_DWORD *)(v6 + v19 - 48);
      *(v22 - 44) = *(unsigned char *)(v6 + v19 - 44);
      *((_DWORD *)v22 - 12) = v28;
      uint64_t v29 = *(void *)(v6 + v19 - 40);
      *(void *)(v20 - 40) = 0;
      *((void *)v22 - 5) = v29;
      uint64_t v30 = *(void *)(v6 + v19 - 32);
      *(void *)(v20 - 32) = 0;
      *((void *)v22 - 4) = v30;
      uint64_t v31 = *(void *)(v6 + v19 - 24);
      *(void *)(v20 - 24) = 0;
      *((void *)v22 - 3) = v31;
      uint64_t v32 = *(void *)(v6 + v19 - 16);
      *(void *)(v20 - 16) = 0;
      *((void *)v22 - 2) = v32;
      *((_DWORD *)v22 - 2) = *(_DWORD *)(v6 + v19 - 8);
      v19 -= 144;
    }
    while (v6 + v19 != v5);
    std::string::size_type v33 = (void *)*a1;
    uint64_t v5 = a1[1];
    v14 += v19;
    uint64_t v18 = (uint64_t)v35;
  }
  *a1 = (uint64_t)v14;
  a1[1] = v18;
  a1[2] = (uint64_t)v36;
  while ((void *)v5 != v33)
  {
    v5 -= 144;
    sub_4F2DAC(v37, v5);
  }
  if (v33) {
    operator delete(v33);
  }
  return v18;
}

void sub_5F8C38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_55C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_5F8C50(uint64_t *a1, uint64_t a2, char *a3, int *a4, int *a5)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  unint64_t v8 = 0x8E38E38E38E38E39 * ((v7 - *a1) >> 4);
  unint64_t v9 = v8 + 1;
  if (v8 + 1 > 0x1C71C71C71C71C7) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * ((a1[2] - v6) >> 4) > v9) {
    unint64_t v9 = 0x1C71C71C71C71C72 * ((a1[2] - v6) >> 4);
  }
  if (0x8E38E38E38E38E39 * ((a1[2] - v6) >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v14 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v14 = v9;
  }
  uint64_t v40 = (uint64_t)(a1 + 2);
  if (v14)
  {
    if (v14 > 0x1C71C71C71C71C7) {
      sub_188D718();
    }
    char v15 = (char *)operator new(144 * v14);
  }
  else
  {
    char v15 = 0;
  }
  int v16 = &v15[144 * v8];
  BOOL v39 = &v15[144 * v14];
  char v17 = *a3;
  int v18 = *a4;
  int v19 = *a5;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(v16, *(void **)a2, *(void *)(a2 + 8));
    uint64_t v6 = *a1;
    uint64_t v7 = a1[1];
    int v16 = &v15[144 * v8];
  }
  else
  {
    *(_OWORD *)int v16 = *(_OWORD *)a2;
    *((void *)v16 + 2) = *(void *)(a2 + 16);
  }
  uint64_t v20 = &v15[144 * v8];
  v20[24] = v17;
  *((_DWORD *)v20 + 7) = v18;
  *((_DWORD *)v20 + 8) = v19;
  *(_OWORD *)(v20 + 40) = 0u;
  *(_OWORD *)(v20 + 56) = 0u;
  *(_OWORD *)(v20 + 72) = 0u;
  *(_OWORD *)(v20 + 84) = 0u;
  v20[100] = 1;
  *(_OWORD *)(v20 + 104) = 0u;
  *(_OWORD *)(v20 + 120) = 0u;
  *((_DWORD *)v20 + 34) = 0x7FFFFFFF;
  uint64_t v21 = (uint64_t)(v20 + 144);
  uint64_t v38 = v20 + 144;
  if (v7 == v6)
  {
    int v36 = (void *)v6;
  }
  else
  {
    uint64_t v22 = 0;
    do
    {
      uint64_t v23 = v7 + v22;
      long long v24 = *(_OWORD *)(v7 + v22 - 144);
      uint64_t v25 = &v16[v22];
      *((void *)v25 - 16) = *(void *)(v7 + v22 - 128);
      *((_OWORD *)v25 - 9) = v24;
      *(_OWORD *)(v23 - 136) = 0uLL;
      uint64_t v26 = *(void *)(v7 + v22 - 120);
      int v27 = *(_DWORD *)(v7 + v22 - 112);
      *(void *)(v23 - 144) = 0;
      *((_DWORD *)v25 - 28) = v27;
      *((void *)v25 - 15) = v26;
      uint64_t v28 = *(void *)(v7 + v22 - 104);
      *(void *)(v23 - 104) = 0;
      *((void *)v25 - 13) = v28;
      uint64_t v29 = *(void *)(v7 + v22 - 96);
      *(void *)(v23 - 96) = 0;
      *((void *)v25 - 12) = v29;
      uint64_t v30 = *(void *)(v7 + v22 - 88);
      *(void *)(v23 - 88) = 0;
      *((void *)v25 - 11) = v30;
      *((void *)v25 - 10) = 0;
      *(_OWORD *)(v25 - 72) = 0uLL;
      *((_OWORD *)v25 - 5) = *(_OWORD *)(v7 + v22 - 80);
      *((void *)v25 - 8) = *(void *)(v7 + v22 - 64);
      uint64_t v31 = *(void *)(v7 + v22 - 56);
      *(_OWORD *)(v23 - 80) = 0uLL;
      *(_OWORD *)(v23 - 64) = 0uLL;
      *((void *)v25 - 7) = v31;
      LODWORD(v31) = *(_DWORD *)(v7 + v22 - 48);
      *(v25 - 44) = *(unsigned char *)(v7 + v22 - 44);
      *((_DWORD *)v25 - 12) = v31;
      uint64_t v32 = *(void *)(v7 + v22 - 40);
      *(void *)(v23 - 40) = 0;
      *((void *)v25 - 5) = v32;
      uint64_t v33 = *(void *)(v7 + v22 - 32);
      *(void *)(v23 - 32) = 0;
      *((void *)v25 - 4) = v33;
      uint64_t v34 = *(void *)(v7 + v22 - 24);
      *(void *)(v23 - 24) = 0;
      *((void *)v25 - 3) = v34;
      uint64_t v35 = *(void *)(v7 + v22 - 16);
      *(void *)(v23 - 16) = 0;
      *((void *)v25 - 2) = v35;
      *((_DWORD *)v25 - 2) = *(_DWORD *)(v7 + v22 - 8);
      v22 -= 144;
    }
    while (v7 + v22 != v6);
    int v36 = (void *)*a1;
    uint64_t v6 = a1[1];
    v16 += v22;
    uint64_t v21 = (uint64_t)v38;
  }
  *a1 = (uint64_t)v16;
  a1[1] = v21;
  a1[2] = (uint64_t)v39;
  while ((void *)v6 != v36)
  {
    v6 -= 144;
    sub_4F2DAC(v40, v6);
  }
  if (v36) {
    operator delete(v36);
  }
  return v21;
}

void sub_5F8F18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_55C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_5F8F30(void **a1, long long *a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1C71C71C71C71C7) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0x8E38E38E38E38E39 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v6 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v29 = (uint64_t)(a1 + 2);
  if (v6)
  {
    if (v6 > 0x1C71C71C71C71C7) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(144 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  int v27 = &v7[144 * v3];
  uint64_t v28 = &v7[144 * v6];
  sub_4F5C8C(v27, a2);
  unint64_t v8 = v27;
  unint64_t v9 = *a1;
  uint64_t v10 = (uint64_t)a1[1];
  if ((void *)v10 == *a1)
  {
    uint64_t v25 = a1[1];
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = v10 + v11;
      long long v13 = *(_OWORD *)(v10 + v11 - 144);
      unint64_t v14 = &v27[v11];
      *((void *)v14 - 16) = *(void *)(v10 + v11 - 128);
      *((_OWORD *)v14 - 9) = v13;
      *(_OWORD *)(v12 - 136) = 0uLL;
      uint64_t v15 = *(void *)(v10 + v11 - 120);
      int v16 = *(_DWORD *)(v10 + v11 - 112);
      *(void *)(v12 - 144) = 0;
      *((_DWORD *)v14 - 28) = v16;
      *((void *)v14 - 15) = v15;
      uint64_t v17 = *(void *)(v10 + v11 - 104);
      *(void *)(v12 - 104) = 0;
      *((void *)v14 - 13) = v17;
      uint64_t v18 = *(void *)(v10 + v11 - 96);
      *(void *)(v12 - 96) = 0;
      *((void *)v14 - 12) = v18;
      uint64_t v19 = *(void *)(v10 + v11 - 88);
      *(void *)(v12 - 88) = 0;
      *((void *)v14 - 11) = v19;
      *((void *)v14 - 10) = 0;
      *(_OWORD *)(v14 - 72) = 0uLL;
      *((_OWORD *)v14 - 5) = *(_OWORD *)(v10 + v11 - 80);
      *((void *)v14 - 8) = *(void *)(v10 + v11 - 64);
      uint64_t v20 = *(void *)(v10 + v11 - 56);
      *(_OWORD *)(v12 - 80) = 0uLL;
      *(_OWORD *)(v12 - 64) = 0uLL;
      *((void *)v14 - 7) = v20;
      LODWORD(v20) = *(_DWORD *)(v10 + v11 - 48);
      *(v14 - 44) = *(unsigned char *)(v10 + v11 - 44);
      *((_DWORD *)v14 - 12) = v20;
      uint64_t v21 = *(void *)(v10 + v11 - 40);
      *(void *)(v12 - 40) = 0;
      *((void *)v14 - 5) = v21;
      uint64_t v22 = *(void *)(v10 + v11 - 32);
      *(void *)(v12 - 32) = 0;
      *((void *)v14 - 4) = v22;
      uint64_t v23 = *(void *)(v10 + v11 - 24);
      *(void *)(v12 - 24) = 0;
      *((void *)v14 - 3) = v23;
      uint64_t v24 = *(void *)(v10 + v11 - 16);
      *(void *)(v12 - 16) = 0;
      *((void *)v14 - 2) = v24;
      *((_DWORD *)v14 - 2) = *(_DWORD *)(v10 + v11 - 8);
      v11 -= 144;
    }
    while ((void *)(v10 + v11) != v9);
    uint64_t v25 = *a1;
    uint64_t v10 = (uint64_t)a1[1];
    unint64_t v8 = &v27[v11];
  }
  *a1 = v8;
  a1[1] = v27 + 144;
  a1[2] = v28;
  while ((void *)v10 != v25)
  {
    v10 -= 144;
    sub_4F2DAC(v29, v10);
  }
  if (v25) {
    operator delete(v25);
  }
  return v27 + 144;
}

void sub_5F9168(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_55C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_5F9180(void *a1, long long *a2)
{
  unint64_t v2 = 0x8E38E38E38E38E39 * ((uint64_t)(a1[1] - *a1) >> 4);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 <= 0x1C71C71C71C71C7)
  {
    if (0x1C71C71C71C71C72 * ((uint64_t)(a1[2] - *a1) >> 4) > v3) {
      unint64_t v3 = 0x1C71C71C71C71C72 * ((uint64_t)(a1[2] - *a1) >> 4);
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(a1[2] - *a1) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v5 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v5 = v3;
    }
    if (v5)
    {
      if (v5 > 0x1C71C71C71C71C7) {
        sub_188D718();
      }
      unint64_t v6 = (char *)operator new(144 * v5);
    }
    else
    {
      unint64_t v6 = 0;
    }
    sub_5F2388(&v6[144 * v2], a2);
  }
  sub_2E00();
}

void sub_5F93C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_55C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_5F93E0(void *a1, long long *a2, int *a3, uint64_t a4)
{
  unint64_t v4 = 0x8E38E38E38E38E39 * ((uint64_t)(a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 <= 0x1C71C71C71C71C7)
  {
    if (0x1C71C71C71C71C72 * ((uint64_t)(a1[2] - *a1) >> 4) > v5) {
      unint64_t v5 = 0x1C71C71C71C71C72 * ((uint64_t)(a1[2] - *a1) >> 4);
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(a1[2] - *a1) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v9 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v9 = v5;
    }
    if (v9)
    {
      if (v9 > 0x1C71C71C71C71C7) {
        sub_188D718();
      }
      uint64_t v10 = (char *)operator new(144 * v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    sub_5F2604(&v10[144 * v4], a2, *a3, a4);
  }
  sub_2E00();
}

void sub_5F9640(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_55C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_5F9658(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(*(unsigned char **)(a1 + 8), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    *(void *)(v2 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v2 = v3;
  }
  *(unsigned char *)(v2 + 24) = 9;
  *(void *)(v2 + 28) = -1;
  operator new();
}

void sub_5F973C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_5F9748(void *a1, uint64_t a2)
{
  unint64_t v2 = 0x8E38E38E38E38E39 * ((uint64_t)(a1[1] - *a1) >> 4);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 <= 0x1C71C71C71C71C7)
  {
    if (0x1C71C71C71C71C72 * ((uint64_t)(a1[2] - *a1) >> 4) > v3) {
      unint64_t v3 = 0x1C71C71C71C71C72 * ((uint64_t)(a1[2] - *a1) >> 4);
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(a1[2] - *a1) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v5 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v5 = v3;
    }
    if (v5)
    {
      if (v5 > 0x1C71C71C71C71C7) {
        sub_188D718();
      }
      unint64_t v6 = (char *)operator new(144 * v5);
    }
    else
    {
      unint64_t v6 = 0;
    }
    uint64_t v7 = &v6[144 * v2];
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200(v7, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
      *((void *)v7 + 2) = *(void *)(a2 + 16);
    }
    unint64_t v8 = &v6[144 * v2];
    v8[24] = 9;
    *(void *)(v8 + 28) = -1;
    operator new();
  }
  sub_2E00();
}

void sub_5F9A34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_55C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_5F9A50(void **a1)
{
  unint64_t v3 = (char *)*a1;
  unint64_t v2 = (char *)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v2 - (unsigned char *)*a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - v3) >> 3) > v5) {
    unint64_t v5 = 0x5555555555555556 * (((unsigned char *)a1[2] - v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - v3) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v5;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  unint64_t v8 = &v7[24 * v4];
  unint64_t v9 = &v7[24 * v6];
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  uint64_t v10 = v8 + 24;
  if (v2 == v3)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v2) {
      return v10;
    }
    goto LABEL_20;
  }
  do
  {
    long long v11 = *(_OWORD *)(v2 - 24);
    *((void *)v8 - 1) = *((void *)v2 - 1);
    *(_OWORD *)(v8 - 24) = v11;
    v8 -= 24;
    *((void *)v2 - 2) = 0;
    *((void *)v2 - 1) = 0;
    *((void *)v2 - 3) = 0;
    v2 -= 24;
  }
  while (v2 != v3);
  uint64_t v12 = (char *)*a1;
  unint64_t v2 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v2 != v12)
  {
    do
    {
      if (*(v2 - 1) < 0) {
        operator delete(*((void **)v2 - 3));
      }
      v2 -= 24;
    }
    while (v2 != v12);
    unint64_t v2 = v12;
  }
  if (v2) {
LABEL_20:
  }
    operator delete(v2);
  return v10;
}

char *sub_5F9BAC(char **a1, long long *a2, char *a3, _DWORD *a4, uint64_t a5, char *a6)
{
  unint64_t v7 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 4);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0x1C71C71C71C71C7) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 4) > v8) {
    unint64_t v8 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 4);
  }
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v14 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v14 = v8;
  }
  uint64_t v37 = (uint64_t)(a1 + 2);
  if (v14)
  {
    if (v14 > 0x1C71C71C71C71C7) {
      sub_188D718();
    }
    uint64_t v15 = (char *)operator new(144 * v14);
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v35 = &v15[144 * v7];
  int v36 = &v15[144 * v14];
  sub_5F1F3C(v35, a2, *a3, a4, a5, *a6);
  int v16 = v35;
  uint64_t v17 = *a1;
  uint64_t v18 = (uint64_t)a1[1];
  if ((char *)v18 == *a1)
  {
    uint64_t v33 = a1[1];
  }
  else
  {
    uint64_t v19 = 0;
    do
    {
      uint64_t v20 = v18 + v19;
      long long v21 = *(_OWORD *)(v18 + v19 - 144);
      uint64_t v22 = &v35[v19];
      *((void *)v22 - 16) = *(void *)(v18 + v19 - 128);
      *((_OWORD *)v22 - 9) = v21;
      *(_OWORD *)(v20 - 136) = 0uLL;
      uint64_t v23 = *(void *)(v18 + v19 - 120);
      int v24 = *(_DWORD *)(v18 + v19 - 112);
      *(void *)(v20 - 144) = 0;
      *((_DWORD *)v22 - 28) = v24;
      *((void *)v22 - 15) = v23;
      uint64_t v25 = *(void *)(v18 + v19 - 104);
      *(void *)(v20 - 104) = 0;
      *((void *)v22 - 13) = v25;
      uint64_t v26 = *(void *)(v18 + v19 - 96);
      *(void *)(v20 - 96) = 0;
      *((void *)v22 - 12) = v26;
      uint64_t v27 = *(void *)(v18 + v19 - 88);
      *(void *)(v20 - 88) = 0;
      *((void *)v22 - 11) = v27;
      *((void *)v22 - 10) = 0;
      *(_OWORD *)(v22 - 72) = 0uLL;
      *((_OWORD *)v22 - 5) = *(_OWORD *)(v18 + v19 - 80);
      *((void *)v22 - 8) = *(void *)(v18 + v19 - 64);
      uint64_t v28 = *(void *)(v18 + v19 - 56);
      *(_OWORD *)(v20 - 80) = 0uLL;
      *(_OWORD *)(v20 - 64) = 0uLL;
      *((void *)v22 - 7) = v28;
      LODWORD(v28) = *(_DWORD *)(v18 + v19 - 48);
      *(v22 - 44) = *(unsigned char *)(v18 + v19 - 44);
      *((_DWORD *)v22 - 12) = v28;
      uint64_t v29 = *(void *)(v18 + v19 - 40);
      *(void *)(v20 - 40) = 0;
      *((void *)v22 - 5) = v29;
      uint64_t v30 = *(void *)(v18 + v19 - 32);
      *(void *)(v20 - 32) = 0;
      *((void *)v22 - 4) = v30;
      uint64_t v31 = *(void *)(v18 + v19 - 24);
      *(void *)(v20 - 24) = 0;
      *((void *)v22 - 3) = v31;
      uint64_t v32 = *(void *)(v18 + v19 - 16);
      *(void *)(v20 - 16) = 0;
      *((void *)v22 - 2) = v32;
      *((_DWORD *)v22 - 2) = *(_DWORD *)(v18 + v19 - 8);
      v19 -= 144;
    }
    while ((char *)(v18 + v19) != v17);
    uint64_t v33 = *a1;
    uint64_t v18 = (uint64_t)a1[1];
    int v16 = &v35[v19];
  }
  *a1 = v16;
  a1[1] = v35 + 144;
  a1[2] = v36;
  while ((char *)v18 != v33)
  {
    v18 -= 144;
    sub_4F2DAC(v37, v18);
  }
  if (v33) {
    operator delete(v33);
  }
  return v35 + 144;
}

void sub_5F9E14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_55C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_5F9E2C(char **a1, long long *a2, char *a3, void *a4, uint64_t a5, char *a6)
{
  unint64_t v7 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 4);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0x1C71C71C71C71C7) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 4) > v8) {
    unint64_t v8 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 4);
  }
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v14 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v14 = v8;
  }
  uint64_t v37 = (uint64_t)(a1 + 2);
  if (v14)
  {
    if (v14 > 0x1C71C71C71C71C7) {
      sub_188D718();
    }
    uint64_t v15 = (char *)operator new(144 * v14);
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v35 = &v15[144 * v7];
  int v36 = &v15[144 * v14];
  sub_5F212C(v35, a2, *a3, a4, a5, *a6);
  int v16 = v35;
  uint64_t v17 = *a1;
  uint64_t v18 = (uint64_t)a1[1];
  if ((char *)v18 == *a1)
  {
    uint64_t v33 = a1[1];
  }
  else
  {
    uint64_t v19 = 0;
    do
    {
      uint64_t v20 = v18 + v19;
      long long v21 = *(_OWORD *)(v18 + v19 - 144);
      uint64_t v22 = &v35[v19];
      *((void *)v22 - 16) = *(void *)(v18 + v19 - 128);
      *((_OWORD *)v22 - 9) = v21;
      *(_OWORD *)(v20 - 136) = 0uLL;
      uint64_t v23 = *(void *)(v18 + v19 - 120);
      int v24 = *(_DWORD *)(v18 + v19 - 112);
      *(void *)(v20 - 144) = 0;
      *((_DWORD *)v22 - 28) = v24;
      *((void *)v22 - 15) = v23;
      uint64_t v25 = *(void *)(v18 + v19 - 104);
      *(void *)(v20 - 104) = 0;
      *((void *)v22 - 13) = v25;
      uint64_t v26 = *(void *)(v18 + v19 - 96);
      *(void *)(v20 - 96) = 0;
      *((void *)v22 - 12) = v26;
      uint64_t v27 = *(void *)(v18 + v19 - 88);
      *(void *)(v20 - 88) = 0;
      *((void *)v22 - 11) = v27;
      *((void *)v22 - 10) = 0;
      *(_OWORD *)(v22 - 72) = 0uLL;
      *((_OWORD *)v22 - 5) = *(_OWORD *)(v18 + v19 - 80);
      *((void *)v22 - 8) = *(void *)(v18 + v19 - 64);
      uint64_t v28 = *(void *)(v18 + v19 - 56);
      *(_OWORD *)(v20 - 80) = 0uLL;
      *(_OWORD *)(v20 - 64) = 0uLL;
      *((void *)v22 - 7) = v28;
      LODWORD(v28) = *(_DWORD *)(v18 + v19 - 48);
      *(v22 - 44) = *(unsigned char *)(v18 + v19 - 44);
      *((_DWORD *)v22 - 12) = v28;
      uint64_t v29 = *(void *)(v18 + v19 - 40);
      *(void *)(v20 - 40) = 0;
      *((void *)v22 - 5) = v29;
      uint64_t v30 = *(void *)(v18 + v19 - 32);
      *(void *)(v20 - 32) = 0;
      *((void *)v22 - 4) = v30;
      uint64_t v31 = *(void *)(v18 + v19 - 24);
      *(void *)(v20 - 24) = 0;
      *((void *)v22 - 3) = v31;
      uint64_t v32 = *(void *)(v18 + v19 - 16);
      *(void *)(v20 - 16) = 0;
      *((void *)v22 - 2) = v32;
      *((_DWORD *)v22 - 2) = *(_DWORD *)(v18 + v19 - 8);
      v19 -= 144;
    }
    while ((char *)(v18 + v19) != v17);
    uint64_t v33 = *a1;
    uint64_t v18 = (uint64_t)a1[1];
    int v16 = &v35[v19];
  }
  *a1 = v16;
  a1[1] = v35 + 144;
  a1[2] = v36;
  while ((char *)v18 != v33)
  {
    v18 -= 144;
    sub_4F2DAC(v37, v18);
  }
  if (v33) {
    operator delete(v33);
  }
  return v35 + 144;
}

void sub_5FA094(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_55C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_5FA0AC(uint64_t *a1, uint64_t a2, uint64_t *a3, char *a4)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  unint64_t v7 = 0x8E38E38E38E38E39 * ((v6 - *a1) >> 4);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0x1C71C71C71C71C7) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * ((a1[2] - v5) >> 4) > v8) {
    unint64_t v8 = 0x1C71C71C71C71C72 * ((a1[2] - v5) >> 4);
  }
  if (0x8E38E38E38E38E39 * ((a1[2] - v5) >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v12 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v12 = v8;
  }
  uint64_t v36 = (uint64_t)(a1 + 2);
  if (v12)
  {
    if (v12 > 0x1C71C71C71C71C7) {
      sub_188D718();
    }
    long long v13 = (char *)operator new(144 * v12);
  }
  else
  {
    long long v13 = 0;
  }
  unint64_t v14 = &v13[144 * v7];
  uint64_t v15 = *a3;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(v14, *(void **)a2, *(void *)(a2 + 8));
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    unint64_t v14 = &v13[144 * v7];
  }
  else
  {
    *(_OWORD *)unint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
  }
  int v16 = &v13[144 * v7];
  v16[24] = 1;
  if (v15 < 0) {
    __int16 v17 = -50;
  }
  else {
    __int16 v17 = 50;
  }
  *((_DWORD *)v16 + 7) = (int)v15 / 100
                       + ((5243 * (__int16)(v17 + (int)v15 % 100)) >> 19)
                       + ((5243 * (__int16)(v17 + (int)v15 % 100)) >> 31);
  *((_DWORD *)v16 + 8) = -1;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 72) = 0u;
  *(_OWORD *)(v16 + 84) = 0u;
  v16[100] = *a4;
  *(_OWORD *)(v16 + 104) = 0u;
  *(_OWORD *)(v16 + 120) = 0u;
  *((_DWORD *)v16 + 34) = 0x7FFFFFFF;
  uint64_t v18 = (uint64_t)(v16 + 144);
  uint64_t v35 = v16 + 144;
  if (v6 == v5)
  {
    uint64_t v33 = (void *)v5;
  }
  else
  {
    uint64_t v19 = 0;
    do
    {
      uint64_t v20 = v6 + v19;
      long long v21 = *(_OWORD *)(v6 + v19 - 144);
      uint64_t v22 = &v14[v19];
      *((void *)v22 - 16) = *(void *)(v6 + v19 - 128);
      *((_OWORD *)v22 - 9) = v21;
      *(_OWORD *)(v20 - 136) = 0uLL;
      uint64_t v23 = *(void *)(v6 + v19 - 120);
      int v24 = *(_DWORD *)(v6 + v19 - 112);
      *(void *)(v20 - 144) = 0;
      *((_DWORD *)v22 - 28) = v24;
      *((void *)v22 - 15) = v23;
      uint64_t v25 = *(void *)(v6 + v19 - 104);
      *(void *)(v20 - 104) = 0;
      *((void *)v22 - 13) = v25;
      uint64_t v26 = *(void *)(v6 + v19 - 96);
      *(void *)(v20 - 96) = 0;
      *((void *)v22 - 12) = v26;
      uint64_t v27 = *(void *)(v6 + v19 - 88);
      *(void *)(v20 - 88) = 0;
      *((void *)v22 - 11) = v27;
      *((void *)v22 - 10) = 0;
      *(_OWORD *)(v22 - 72) = 0uLL;
      *((_OWORD *)v22 - 5) = *(_OWORD *)(v6 + v19 - 80);
      *((void *)v22 - 8) = *(void *)(v6 + v19 - 64);
      uint64_t v28 = *(void *)(v6 + v19 - 56);
      *(_OWORD *)(v20 - 80) = 0uLL;
      *(_OWORD *)(v20 - 64) = 0uLL;
      *((void *)v22 - 7) = v28;
      LODWORD(v28) = *(_DWORD *)(v6 + v19 - 48);
      *(v22 - 44) = *(unsigned char *)(v6 + v19 - 44);
      *((_DWORD *)v22 - 12) = v28;
      uint64_t v29 = *(void *)(v6 + v19 - 40);
      *(void *)(v20 - 40) = 0;
      *((void *)v22 - 5) = v29;
      uint64_t v30 = *(void *)(v6 + v19 - 32);
      *(void *)(v20 - 32) = 0;
      *((void *)v22 - 4) = v30;
      uint64_t v31 = *(void *)(v6 + v19 - 24);
      *(void *)(v20 - 24) = 0;
      *((void *)v22 - 3) = v31;
      uint64_t v32 = *(void *)(v6 + v19 - 16);
      *(void *)(v20 - 16) = 0;
      *((void *)v22 - 2) = v32;
      *((_DWORD *)v22 - 2) = *(_DWORD *)(v6 + v19 - 8);
      v19 -= 144;
    }
    while (v6 + v19 != v5);
    uint64_t v33 = (void *)*a1;
    uint64_t v5 = a1[1];
    v14 += v19;
    uint64_t v18 = (uint64_t)v35;
  }
  *a1 = (uint64_t)v14;
  a1[1] = v18;
  a1[2] = (uint64_t)&v13[144 * v12];
  while ((void *)v5 != v33)
  {
    v5 -= 144;
    sub_4F2DAC(v36, v5);
  }
  if (v33) {
    operator delete(v33);
  }
  return v18;
}

void sub_5FA3C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_55C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_5FA3E0(uint64_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = 0x8E38E38E38E38E39 * ((v5 - *a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x1C71C71C71C71C7) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * ((a1[2] - v4) >> 4) > v7) {
    unint64_t v7 = 0x1C71C71C71C71C72 * ((a1[2] - v4) >> 4);
  }
  if (0x8E38E38E38E38E39 * ((a1[2] - v4) >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v10 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v10 = v7;
  }
  uint64_t v34 = (uint64_t)(a1 + 2);
  if (v10)
  {
    if (v10 > 0x1C71C71C71C71C7) {
      sub_188D718();
    }
    long long v11 = (char *)operator new(144 * v10);
  }
  else
  {
    long long v11 = 0;
  }
  unint64_t v12 = &v11[144 * v6];
  uint64_t v33 = &v11[144 * v10];
  int v13 = *a3;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(v12, *(void **)a2, *(void *)(a2 + 8));
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    unint64_t v12 = &v11[144 * v6];
  }
  else
  {
    *(_OWORD *)unint64_t v12 = *(_OWORD *)a2;
    *((void *)v12 + 2) = *(void *)(a2 + 16);
  }
  unint64_t v14 = &v11[144 * v6];
  v14[24] = 0;
  *((_DWORD *)v14 + 7) = v13;
  *((_DWORD *)v14 + 8) = -1;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 84) = 0u;
  v14[100] = 1;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 120) = 0u;
  *((_DWORD *)v14 + 34) = 0x7FFFFFFF;
  uint64_t v15 = (uint64_t)(v14 + 144);
  uint64_t v32 = v14 + 144;
  if (v5 == v4)
  {
    uint64_t v30 = (void *)v4;
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v17 = v5 + v16;
      long long v18 = *(_OWORD *)(v5 + v16 - 144);
      uint64_t v19 = &v12[v16];
      *((void *)v19 - 16) = *(void *)(v5 + v16 - 128);
      *((_OWORD *)v19 - 9) = v18;
      *(_OWORD *)(v17 - 136) = 0uLL;
      uint64_t v20 = *(void *)(v5 + v16 - 120);
      int v21 = *(_DWORD *)(v5 + v16 - 112);
      *(void *)(v17 - 144) = 0;
      *((_DWORD *)v19 - 28) = v21;
      *((void *)v19 - 15) = v20;
      uint64_t v22 = *(void *)(v5 + v16 - 104);
      *(void *)(v17 - 104) = 0;
      *((void *)v19 - 13) = v22;
      uint64_t v23 = *(void *)(v5 + v16 - 96);
      *(void *)(v17 - 96) = 0;
      *((void *)v19 - 12) = v23;
      uint64_t v24 = *(void *)(v5 + v16 - 88);
      *(void *)(v17 - 88) = 0;
      *((void *)v19 - 11) = v24;
      *((void *)v19 - 10) = 0;
      *(_OWORD *)(v19 - 72) = 0uLL;
      *((_OWORD *)v19 - 5) = *(_OWORD *)(v5 + v16 - 80);
      *((void *)v19 - 8) = *(void *)(v5 + v16 - 64);
      uint64_t v25 = *(void *)(v5 + v16 - 56);
      *(_OWORD *)(v17 - 80) = 0uLL;
      *(_OWORD *)(v17 - 64) = 0uLL;
      *((void *)v19 - 7) = v25;
      LODWORD(v25) = *(_DWORD *)(v5 + v16 - 48);
      *(v19 - 44) = *(unsigned char *)(v5 + v16 - 44);
      *((_DWORD *)v19 - 12) = v25;
      uint64_t v26 = *(void *)(v5 + v16 - 40);
      *(void *)(v17 - 40) = 0;
      *((void *)v19 - 5) = v26;
      uint64_t v27 = *(void *)(v5 + v16 - 32);
      *(void *)(v17 - 32) = 0;
      *((void *)v19 - 4) = v27;
      uint64_t v28 = *(void *)(v5 + v16 - 24);
      *(void *)(v17 - 24) = 0;
      *((void *)v19 - 3) = v28;
      uint64_t v29 = *(void *)(v5 + v16 - 16);
      *(void *)(v17 - 16) = 0;
      *((void *)v19 - 2) = v29;
      *((_DWORD *)v19 - 2) = *(_DWORD *)(v5 + v16 - 8);
      v16 -= 144;
    }
    while (v5 + v16 != v4);
    uint64_t v30 = (void *)*a1;
    uint64_t v4 = a1[1];
    v12 += v16;
    uint64_t v15 = (uint64_t)v32;
  }
  *a1 = (uint64_t)v12;
  a1[1] = v15;
  a1[2] = (uint64_t)v33;
  while ((void *)v4 != v30)
  {
    v4 -= 144;
    sub_4F2DAC(v34, v4);
  }
  if (v30) {
    operator delete(v30);
  }
  return v15;
}

void sub_5FA694(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_55C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_5FA6AC(uint64_t *a1, uint64_t a2, char *a3, int *a4)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  unint64_t v7 = 0x8E38E38E38E38E39 * ((v6 - *a1) >> 4);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0x1C71C71C71C71C7) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * ((a1[2] - v5) >> 4) > v8) {
    unint64_t v8 = 0x1C71C71C71C71C72 * ((a1[2] - v5) >> 4);
  }
  if (0x8E38E38E38E38E39 * ((a1[2] - v5) >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v12 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v12 = v8;
  }
  uint64_t v38 = (uint64_t)(a1 + 2);
  if (v12)
  {
    if (v12 > 0x1C71C71C71C71C7) {
      sub_188D718();
    }
    int v13 = (char *)operator new(144 * v12);
  }
  else
  {
    int v13 = 0;
  }
  unint64_t v14 = &v13[144 * v7];
  uint64_t v37 = &v13[144 * v12];
  char v15 = *a3;
  int v16 = *a4;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(v14, *(void **)a2, *(void *)(a2 + 8));
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    unint64_t v14 = &v13[144 * v7];
  }
  else
  {
    *(_OWORD *)unint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
  }
  uint64_t v17 = &v13[144 * v7];
  v17[24] = v15;
  if (v16 < 0) {
    char v18 = -5;
  }
  else {
    char v18 = 5;
  }
  *((_DWORD *)v17 + 7) = v16 / 10
                       + (((103 * (char)(v18 + v16 % 10)) >> 15) & 1)
                       + ((103 * (char)(v18 + v16 % 10)) >> 10);
  *((_DWORD *)v17 + 8) = -1;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *(_OWORD *)(v17 + 72) = 0u;
  *(_OWORD *)(v17 + 84) = 0u;
  v17[100] = 1;
  *(_OWORD *)(v17 + 104) = 0u;
  *(_OWORD *)(v17 + 120) = 0u;
  *((_DWORD *)v17 + 34) = 0x7FFFFFFF;
  uint64_t v19 = (uint64_t)(v17 + 144);
  uint64_t v36 = v17 + 144;
  if (v6 == v5)
  {
    uint64_t v34 = (void *)v5;
  }
  else
  {
    uint64_t v20 = 0;
    do
    {
      uint64_t v21 = v6 + v20;
      long long v22 = *(_OWORD *)(v6 + v20 - 144);
      uint64_t v23 = &v14[v20];
      *((void *)v23 - 16) = *(void *)(v6 + v20 - 128);
      *((_OWORD *)v23 - 9) = v22;
      *(_OWORD *)(v21 - 136) = 0uLL;
      uint64_t v24 = *(void *)(v6 + v20 - 120);
      int v25 = *(_DWORD *)(v6 + v20 - 112);
      *(void *)(v21 - 144) = 0;
      *((_DWORD *)v23 - 28) = v25;
      *((void *)v23 - 15) = v24;
      uint64_t v26 = *(void *)(v6 + v20 - 104);
      *(void *)(v21 - 104) = 0;
      *((void *)v23 - 13) = v26;
      uint64_t v27 = *(void *)(v6 + v20 - 96);
      *(void *)(v21 - 96) = 0;
      *((void *)v23 - 12) = v27;
      uint64_t v28 = *(void *)(v6 + v20 - 88);
      *(void *)(v21 - 88) = 0;
      *((void *)v23 - 11) = v28;
      *((void *)v23 - 10) = 0;
      *(_OWORD *)(v23 - 72) = 0uLL;
      *((_OWORD *)v23 - 5) = *(_OWORD *)(v6 + v20 - 80);
      *((void *)v23 - 8) = *(void *)(v6 + v20 - 64);
      uint64_t v29 = *(void *)(v6 + v20 - 56);
      *(_OWORD *)(v21 - 80) = 0uLL;
      *(_OWORD *)(v21 - 64) = 0uLL;
      *((void *)v23 - 7) = v29;
      LODWORD(v29) = *(_DWORD *)(v6 + v20 - 48);
      *(v23 - 44) = *(unsigned char *)(v6 + v20 - 44);
      *((_DWORD *)v23 - 12) = v29;
      uint64_t v30 = *(void *)(v6 + v20 - 40);
      *(void *)(v21 - 40) = 0;
      *((void *)v23 - 5) = v30;
      uint64_t v31 = *(void *)(v6 + v20 - 32);
      *(void *)(v21 - 32) = 0;
      *((void *)v23 - 4) = v31;
      uint64_t v32 = *(void *)(v6 + v20 - 24);
      *(void *)(v21 - 24) = 0;
      *((void *)v23 - 3) = v32;
      uint64_t v33 = *(void *)(v6 + v20 - 16);
      *(void *)(v21 - 16) = 0;
      *((void *)v23 - 2) = v33;
      *((_DWORD *)v23 - 2) = *(_DWORD *)(v6 + v20 - 8);
      v20 -= 144;
    }
    while (v6 + v20 != v5);
    uint64_t v34 = (void *)*a1;
    uint64_t v5 = a1[1];
    v14 += v20;
    uint64_t v19 = (uint64_t)v36;
  }
  *a1 = (uint64_t)v14;
  a1[1] = v19;
  a1[2] = (uint64_t)v37;
  while ((void *)v5 != v34)
  {
    v5 -= 144;
    sub_4F2DAC(v38, v5);
  }
  if (v34) {
    operator delete(v34);
  }
  return v19;
}

void sub_5FA9BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_55C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_5FA9D4(void *a1, long long *a2)
{
  unint64_t v2 = 0x8E38E38E38E38E39 * ((uint64_t)(a1[1] - *a1) >> 4);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 <= 0x1C71C71C71C71C7)
  {
    if (0x1C71C71C71C71C72 * ((uint64_t)(a1[2] - *a1) >> 4) > v3) {
      unint64_t v3 = 0x1C71C71C71C71C72 * ((uint64_t)(a1[2] - *a1) >> 4);
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(a1[2] - *a1) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v5 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v5 = v3;
    }
    if (v5)
    {
      if (v5 > 0x1C71C71C71C71C7) {
        sub_188D718();
      }
      uint64_t v6 = (char *)operator new(144 * v5);
    }
    else
    {
      uint64_t v6 = 0;
    }
    sub_5F2A7C(&v6[144 * v2], a2);
  }
  sub_2E00();
}

void sub_5FAC1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_55C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_5FAC34(void *a1, uint64_t a2)
{
  unint64_t v2 = 0x8E38E38E38E38E39 * ((uint64_t)(a1[1] - *a1) >> 4);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 <= 0x1C71C71C71C71C7)
  {
    if (0x1C71C71C71C71C72 * ((uint64_t)(a1[2] - *a1) >> 4) > v3) {
      unint64_t v3 = 0x1C71C71C71C71C72 * ((uint64_t)(a1[2] - *a1) >> 4);
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(a1[2] - *a1) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v5 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v5 = v3;
    }
    if (v5)
    {
      if (v5 > 0x1C71C71C71C71C7) {
        sub_188D718();
      }
      uint64_t v6 = (char *)operator new(144 * v5);
    }
    else
    {
      uint64_t v6 = 0;
    }
    unint64_t v7 = &v6[144 * v2];
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200(v7, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
      *((void *)v7 + 2) = *(void *)(a2 + 16);
    }
    unint64_t v8 = &v6[144 * v2];
    v8[24] = 11;
    *(void *)(v8 + 28) = -1;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    operator new();
  }
  sub_2E00();
}

void sub_5FAF04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_55C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_5FAF20(void *a1, uint64_t a2)
{
  unint64_t v2 = 0x8E38E38E38E38E39 * ((uint64_t)(a1[1] - *a1) >> 4);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 <= 0x1C71C71C71C71C7)
  {
    if (0x1C71C71C71C71C72 * ((uint64_t)(a1[2] - *a1) >> 4) > v3) {
      unint64_t v3 = 0x1C71C71C71C71C72 * ((uint64_t)(a1[2] - *a1) >> 4);
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(a1[2] - *a1) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v5 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v5 = v3;
    }
    if (v5)
    {
      if (v5 > 0x1C71C71C71C71C7) {
        sub_188D718();
      }
      uint64_t v6 = operator new(144 * v5);
    }
    else
    {
      uint64_t v6 = 0;
    }
    unint64_t v7 = &v6[144 * v2];
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200(&v6[144 * v2], *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
      *((void *)v7 + 2) = *(void *)(a2 + 16);
    }
    unint64_t v8 = &v6[144 * v2];
    v8[24] = 13;
    *(void *)(v8 + 28) = -1;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 84) = 0u;
    v8[100] = 1;
    sub_5F82BC();
  }
  sub_2E00();
}

void sub_5FB1E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_55C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_5FB200(void *a1, uint64_t a2)
{
  unint64_t v2 = 0x8E38E38E38E38E39 * ((uint64_t)(a1[1] - *a1) >> 4);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 <= 0x1C71C71C71C71C7)
  {
    if (0x1C71C71C71C71C72 * ((uint64_t)(a1[2] - *a1) >> 4) > v3) {
      unint64_t v3 = 0x1C71C71C71C71C72 * ((uint64_t)(a1[2] - *a1) >> 4);
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(a1[2] - *a1) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v5 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v5 = v3;
    }
    if (v5)
    {
      if (v5 > 0x1C71C71C71C71C7) {
        sub_188D718();
      }
      uint64_t v6 = operator new(144 * v5);
    }
    else
    {
      uint64_t v6 = 0;
    }
    unint64_t v7 = &v6[144 * v2];
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200(&v6[144 * v2], *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
      *((void *)v7 + 2) = *(void *)(a2 + 16);
    }
    unint64_t v8 = &v6[144 * v2];
    v8[24] = 14;
    *(void *)(v8 + 28) = -1;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 84) = 0u;
    v8[100] = 1;
    *((void *)v8 + 13) = 0;
    sub_5F839C();
  }
  sub_2E00();
}

void sub_5FB4C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_55C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_5FB4E0(char **a1, uint64_t a2)
{
  unint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = (v4 - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v6) {
    unint64_t v6 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    unint64_t v10 = operator new(32 * v9);
    uint64_t v11 = (uint64_t)&v10[32 * v5];
    uint64_t v17 = v11;
    uint64_t v18 = v11;
    uint64_t v19 = &v10[32 * v9];
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_10:
      *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
      *(void *)(v11 + 16) = *(void *)(a2 + 16);
      v10[32 * v5 + 24] = *(unsigned char *)(a2 + 24);
      uint64_t v12 = v11 + 32;
      if (v4 == v3) {
        goto LABEL_16;
      }
      goto LABEL_14;
    }
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v11 = 32 * v5;
    uint64_t v17 = 32 * v5;
    uint64_t v18 = 32 * v5;
    uint64_t v19 = 0;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
      goto LABEL_10;
    }
  }
  sub_4200((unsigned char *)v11, *(void **)a2, *(void *)(a2 + 8));
  unint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v11 = v17;
  v10[32 * v5 + 24] = *(unsigned char *)(a2 + 24);
  uint64_t v12 = v18 + 32;
  if (v4 == v3)
  {
LABEL_16:
    unint64_t v14 = v3;
    goto LABEL_17;
  }
  do
  {
LABEL_14:
    long long v13 = *((_OWORD *)v4 - 2);
    *(void *)(v11 - 16) = *((void *)v4 - 2);
    *(_OWORD *)(v11 - 32) = v13;
    *((void *)v4 - 3) = 0;
    *((void *)v4 - 2) = 0;
    *((void *)v4 - 4) = 0;
    *(unsigned char *)(v11 - 8) = *(v4 - 8);
    v11 -= 32;
    v4 -= 32;
  }
  while (v4 != v3);
  unint64_t v14 = *a1;
  unint64_t v3 = a1[1];
LABEL_17:
  *a1 = (char *)v11;
  a1[1] = (char *)v12;
  a1[2] = v19;
  if (v3 != v14)
  {
    char v15 = (void **)(v3 - 32);
    do
    {
      if (*((char *)v15 + 23) < 0) {
        operator delete(*v15);
      }
      v15 -= 4;
    }
    while (v15 + 4 != (void **)v14);
    unint64_t v3 = v14;
  }
  if (v3) {
    operator delete(v3);
  }
  return v12;
}

void sub_5FB6BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3D695C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_5FB6D0()
{
  strcpy(&byte_25849F7, "\n\x1B\\toi=orth\\"");
  strcpy((char *)&qword_25849E0, "\x1B\\toi=lhp\\"");
  byte_2584A0F = 11;
  qword_2584A10 = (uint64_t)operator new(0x19uLL);
  long long v279 = xmmword_20B9250;
  unk_2584A18 = xmmword_20B9250;
  strcpy((char *)qword_2584A10, "\x1B\\toi=x-sampa-internal\\"");
  byte_2584A3F = 13;
  strcpy((char *)&qword_2584A28, "\x1B\\tn=address\\"");
  strcpy(&byte_2584A57, "\t\x1B\\tn=normal\\"");
  strcpy((char *)&qword_2584A40, "\x1B\\tn=nav\\"");
  byte_2584A6F = 12;
  byte_2584A87 = 7;
  strcpy((char *)&dword_2584A70, "\x1B\\lang=");
  byte_2584A9F = 1;
  word_2584A88 = 92;
  byte_2584AB7 = 4;
  strcpy((char *)&qword_2584AA0, "DEV:");
  byte_2584ACF = 8;
  strcpy((char *)&qword_2584AB8, "Continue");
  byte_2584AE7 = 11;
  strcpy((char *)&qword_2584AD0, "Start_Route");
  byte_2584AFF = 14;
  strcpy((char *)&qword_2584AE8, "Continue_Route");
  byte_2584B17 = 12;
  strcpy((char *)&qword_2584B00, "Resume_Route");
  byte_2584B2F = 18;
  strcpy((char *)&xmmword_2584B18, "Start_Route_U_Turn");
  byte_2584B47 = 7;
  strcpy((char *)&dword_2584B30, "_U_Turn");
  qword_2584B58 = 0x1300000000000000;
  qmemcpy(&unk_2584B60, "Continue_Route", 14);
  dword_2584B50 = 1702131055;
  qword_2584B48 = *(void *)"Resume_Route";
  *(int *)((char *)&dword_2584B54 + 3) = 1852994900;
  dword_2584B54 = 1415533919;
  qword_2584B70 = 0x1500000000000000;
  strcpy(byte_2584B78, "Left_Turn");
  unk_2584B6E = 1415533919;
  *(_DWORD *)((char *)&qword_2584B70 + 1) = 1852994900;
  strcpy(&byte_2584B8F, "\tRight_Turn");
  strcpy(&byte_2584BA7, "\nLeft_Turn_At_End");
  byte_2584BBF = 16;
  byte_2584BD7 = 17;
  strcpy((char *)&xmmword_2584BC0, "Right_Turn_At_End");
  byte_2584BEF = 15;
  strcpy((char *)&qword_2584BD8, "Sharp_Left_Turn");
  byte_2584C07 = 16;
  strcpy((char *)&xmmword_2584BF0, "Sharp_Right_Turn");
  byte_2584C1F = 16;
  strcpy((char *)&xmmword_2584C08, "Slight_Left_Turn");
  byte_2584C37 = 17;
  strcpy((char *)&xmmword_2584C20, "Slight_Right_Turn");
  strcpy(&byte_2584C4F, "\tKeep_Right");
  strcpy((char *)&qword_2584C38, "Keep_Left");
  strcpy(&byte_2584C67, "\nU_Turn");
  byte_2584C7F = 6;
  byte_2584C97 = 14;
  strcpy((char *)&qword_2584C80, "Walking_U_Turn");
  byte_2584CAF = 20;
  strcpy((char *)&xmmword_2584C98, "U_Turn_When_Possible");
  byte_2584CC7 = 20;
  strcpy((char *)&xmmword_2584CB0, "U_Turn_At_Roundabout");
  byte_2584CDF = 11;
  strcpy((char *)&qword_2584CC8, "Enter_Ferry");
  strcpy(&byte_2584CF7, "\nChange_Ferry");
  strcpy((char *)&qword_2584CE0, "Exit_Ferry");
  strcpy((char *)&xmmword_2584D10, "Enter_Railway_Shuttle");
  strcpy((char *)&xmmword_2584D28, "Exit_Railway_Shuttle");
  strcpy((char *)&xmmword_2584D40, "Change_Railway_Shuttle");
  strcpy((char *)&xmmword_2584D58, "End_Of_Navigation");
  strcpy((char *)&xmmword_2584D70, "End_Of_Navigation");
  strcpy((char *)&qword_2584D88, "Destination");
  strcpy((char *)&xmmword_2584DA0, "Destination_On_left");
  strcpy((char *)&xmmword_2584DB8, "Destination_On_Right");
  strcpy((char *)&xmmword_2584E00, "First_Stop_On_Right");
  strcpy((char *)&xmmword_2584E48, "Next_Stop_On_Right");
  byte_2584D0F = 12;
  byte_2584D27 = 21;
  byte_2584D3F = 20;
  strcpy((char *)&xmmword_2584E78, "Waypoint_Stop_On_Left");
  byte_2584D57 = 22;
  byte_2584D6F = 17;
  byte_2584D87 = 17;
  byte_2584D9F = 11;
  byte_2584DB7 = 19;
  byte_2584DCF = 20;
  strcpy(&byte_2584DE7, "\nFirst_Stop_On_left");
  *(void *)&v267[0] = *(void *)"First_Stop";
  strcpy((char *)&qword_2584DD0, "First_Stop");
  byte_2584DFF = 18;
  byte_2584E17 = 19;
  strcpy(&byte_2584E2F, "\tNext_Stop_On_left");
  strcpy((char *)&qword_2584E60, "Waypoint_Stop");
  strcpy((char *)&xmmword_2584E90, "Waypoint_Stop_On_Right");
  strcpy((char *)&qword_2584EA8, "Roundabout_");
  *(void *)&v263[48] = *(void *)"Next_Stop";
  strcpy((char *)&qword_2584E18, "Next_Stop");
  byte_2584E47 = 17;
  byte_2584E5F = 18;
  byte_2584E77 = 13;
  byte_2584E8F = 21;
  byte_2584EA7 = 22;
  byte_2584EBF = 11;
  byte_2584ED7 = 16;
  strcpy((char *)&xmmword_2584EC0, "Enter_Roundabout");
  qword_2584ED8 = (uint64_t)operator new(0x20uLL);
  long long v278 = xmmword_20B91C0;
  xmmword_2584EE0 = xmmword_20B91C0;
  strcpy((char *)qword_2584ED8, "Walking_Enter_Roundabout");
  byte_2584F07 = 16;
  strcpy((char *)&xmmword_2584EF0, "Leave_Roundabout");
  byte_2584F1F = 21;
  strcpy((char *)&xmmword_2584F08, "Roundabout_First_Exit");
  byte_2584F37 = 22;
  strcpy((char *)&xmmword_2584F20, "Roundabout_Second_Exit");
  byte_2584F4F = 21;
  strcpy((char *)&xmmword_2584F38, "Roundabout_Third_Exit");
  strcpy((char *)&xmmword_2584F50, "Roundabout_Fourth_Exit");
  HIBYTE(word_2584F66) = 22;
  byte_2584F7F = 21;
  strcpy((char *)&xmmword_2584F68, "Roundabout_Fifth_Exit");
  byte_2584F97 = 21;
  strcpy((char *)&xmmword_2584F80, "Roundabout_Sixth_Exit");
  qword_2584F98 = (uint64_t)operator new(0x19uLL);
  xmmword_2584FA0 = xmmword_20B9250;
  strcpy((char *)qword_2584F98, "Roundabout_Seventh_Exit");
  strcpy((char *)&xmmword_2584FB0, "Roundabout_Eighth_Exit");
  HIBYTE(word_2584FC6) = 22;
  byte_2584FDF = 21;
  strcpy((char *)&xmmword_2584FC8, "Roundabout_Ninth_Exit");
  byte_2584FF7 = 21;
  strcpy((char *)&xmmword_2584FE0, "Roundabout_Tenth_Exit");
  qword_2584FF8 = (uint64_t)operator new(0x20uLL);
  xmmword_2585000 = xmmword_20B91C0;
  strcpy((char *)qword_2584FF8, "Roundabout_Eleventh_Exit");
  qword_2585010 = (uint64_t)operator new(0x19uLL);
  unk_2585018 = xmmword_20B9250;
  strcpy((char *)qword_2585010, "Roundabout_Twelfth_Exit");
  qword_2585028 = (uint64_t)operator new(0x20uLL);
  long long v275 = xmmword_20B5EB0;
  xmmword_2585030 = xmmword_20B5EB0;
  strcpy((char *)qword_2585028, "Roundabout_Thirteenth_Exit");
  qword_2585040 = (uint64_t)operator new(0x20uLL);
  unk_2585048 = xmmword_20B5EB0;
  strcpy((char *)qword_2585040, "Roundabout_Fourteenth_Exit");
  qword_2585058 = (uint64_t)operator new(0x20uLL);
  long long v277 = xmmword_20B8870;
  xmmword_2585060 = xmmword_20B8870;
  strcpy((char *)qword_2585058, "Roundabout_Fifteenth_Exit");
  qword_2585070 = (uint64_t)operator new(0x20uLL);
  unk_2585078 = xmmword_20B8870;
  strcpy((char *)qword_2585070, "Roundabout_Sixteenth_Exit");
  qword_2585088 = (uint64_t)operator new(0x20uLL);
  long long v272 = xmmword_20B91A0;
  xmmword_2585090 = xmmword_20B91A0;
  strcpy((char *)qword_2585088, "Roundabout_Seventeenth_Exit");
  qword_25850A0 = (uint64_t)operator new(0x20uLL);
  unk_25850A8 = xmmword_20B5EB0;
  strcpy((char *)qword_25850A0, "Roundabout_Eighteenth_Exit");
  qword_25850B8 = (uint64_t)operator new(0x20uLL);
  xmmword_25850C0 = xmmword_20B5EB0;
  strcpy((char *)qword_25850B8, "Roundabout_Nineteenth_Exit");
  byte_25850E7 = 8;
  strcpy((char *)&qword_25850D0, "Off_Ramp");
  byte_25850FF = 16;
  strcpy((char *)&xmmword_25850E8, "Off_Ramp_On_Left");
  byte_2585117 = 17;
  strcpy((char *)&xmmword_2585100, "Off_Ramp_On_Right");
  byte_258512F = 14;
  strcpy((char *)&qword_2585118, "Change_Highway");
  strcpy((char *)&xmmword_2585130, "Change_Highway_On_Left");
  HIBYTE(word_2585146) = 22;
  qword_2585148 = (uint64_t)operator new(0x19uLL);
  xmmword_2585150 = xmmword_20B9250;
  strcpy((char *)qword_2585148, "Change_Highway_On_Right");
  byte_2585177 = 5;
  dword_2585160 = 1735550285;
  byte_2585164 = 101;
  byte_2585165 = 0;
  byte_258518F = 12;
  strcpy((char *)&qword_2585178, "Enter_Detour");
  byte_25851A7 = 11;
  strcpy((char *)&qword_2585190, "Exit_Detour");
  byte_25851BF = 18;
  strcpy((char *)&xmmword_25851A8, "Walking_Turnaround");
  qword_25851C0 = (uint64_t)operator new(0x19uLL);
  unk_25851C8 = xmmword_20B9250;
  strcpy((char *)qword_25851C0, "Walking_Turnaround_Sign");
  byte_25851EF = 19;
  strcpy((char *)&xmmword_25851D8, "Distance_Title_List");
  qword_25851F0 = (uint64_t)operator new(0x19uLL);
  unk_25851F8 = xmmword_20B9250;
  long long v269 = *(_OWORD *)"Cross_The_Street_Spoken";
  strcpy((char *)qword_25851F0, "Cross_The_Street_Spoken");
  *(void *)&v267[1] = *(void *)"t_Spoken";
  byte_258521F = 19;
  strcpy((char *)&xmmword_2585208, "Arrival_Charge_List");
  byte_2585237 = 15;
  strcpy((char *)&qword_2585220, "Charge_At_Start");
  strcpy(&byte_258524F, "\tPass_Street");
  strcpy((char *)&qword_2585238, "Pass_Exit");
  byte_2585267 = 11;
  byte_258527F = 17;
  strcpy((char *)&xmmword_2585268, "Pass_Intersection");
  strcpy(&byte_2585297, "\t_PrevExitNumber");
  strcpy((char *)&qword_2585280, "Next_Exit");
  byte_25852AF = 15;
  strcpy(&byte_25852C7, "\t_PrevUTurn");
  strcpy((char *)&qword_25852B0, "_PrevRoad");
  strcpy(&byte_25852DF, "\nNext_");
  byte_25852F7 = 5;
  byte_258530F = 15;
  strcpy((char *)&qword_25852F8, "_At_Next_Street");
  byte_2585327 = 21;
  strcpy((char *)&xmmword_2585310, "_At_Next_Intersection");
  byte_258533F = 14;
  strcpy((char *)&qword_2585328, "Charge_Station");
  byte_2585357 = 15;
  strcpy((char *)&qword_2585340, "_Charge_Station");
  BYTE1(qword_2585368) = 0;
  WORD1(qword_2585368) = 25856;
  HIDWORD(qword_2585368) = 335544320;
  strcpy((char *)&qword_2585358, "_Charge_Station_");
  byte_2585387 = 8;
  strcpy((char *)&qword_2585370, "_Minimum");
  byte_258539F = 15;
  strcpy((char *)&qword_2585388, "ExitShield_Sign");
  byte_25853B7 = 8;
  strcpy((char *)&qword_25853A0, "Walking_");
  byte_25853CF = 16;
  strcpy((char *)&xmmword_25853B8, "Walking_Continue");
  byte_25853E7 = 19;
  strcpy((char *)&xmmword_25853D0, "Walking_Start_Route");
  qword_25853E8 = (uint64_t)operator new(0x20uLL);
  xmmword_25853F0 = xmmword_20B5EB0;
  strcpy((char *)qword_25853E8, "Walking_Start_Route_U_Turn");
  byte_2585417 = 17;
  strcpy((char *)&xmmword_2585400, "Walking_Left_Turn");
  byte_258542F = 18;
  strcpy((char *)&xmmword_2585418, "Walking_Right_Turn");
  qword_2585430 = (uint64_t)operator new(0x20uLL);
  unk_2585438 = xmmword_20B5EB0;
  strcpy((char *)qword_2585430, "Walking_Turn_At_Roundabout");
  qword_2585448 = (uint64_t)operator new(0x20uLL);
  long long v276 = xmmword_20B91B0;
  xmmword_2585450 = xmmword_20B91B0;
  strcpy((char *)qword_2585448, "Walking_U_Turn_When_Possible");
  qword_2585460 = (uint64_t)operator new(0x28uLL);
  long long v268 = xmmword_20B9390;
  unk_2585468 = xmmword_20B9390;
  strcpy((char *)qword_2585460, "Walking_Roundabout_Exit_Continue");
  qword_2585478 = (uint64_t)operator new(0x20uLL);
  xmmword_2585480 = xmmword_20B91B0;
  strcpy((char *)qword_2585478, "Walking_Roundabout_Exit_Left");
  qword_2585490 = (uint64_t)operator new(0x20uLL);
  long long v274 = xmmword_20B8890;
  unk_2585498 = xmmword_20B8890;
  strcpy((char *)qword_2585490, "Walking_Roundabout_Exit_Right");
  qword_25854A8 = (uint64_t)operator new(0x20uLL);
  xmmword_25854B0 = xmmword_20B8870;
  strcpy((char *)qword_25854A8, "Walking_End_Of_Navigation");
  long long v271 = *(_OWORD *)"nd_Of_Navigation";
  uint64_t v0 = (char *)operator new(0x20uLL);
  qword_25854C0 = (uint64_t)v0;
  unk_25854C8 = xmmword_20B8870;
  *(_OWORD *)uint64_t v0 = *(_OWORD *)"Walking_End_Of_Navigation";
  *(_OWORD *)(v0 + 9) = v271;
  v0[25] = 0;
  byte_25854EF = 8;
  strcpy((char *)&qword_25854D8, "Walking_");
  qword_25854F0 = (uint64_t)operator new(0x19uLL);
  unk_25854F8 = v279;
  strcpy((char *)qword_25854F0, "Walking_Sharp_Left_Turn");
  qword_2585508 = (uint64_t)operator new(0x20uLL);
  xmmword_2585510 = v278;
  strcpy((char *)qword_2585508, "Walking_Sharp_Right_Turn");
  qword_2585520 = (uint64_t)operator new(0x20uLL);
  unk_2585528 = v278;
  strcpy((char *)qword_2585520, "Walking_Slight_Left_Turn");
  qword_2585538 = (uint64_t)operator new(0x20uLL);
  xmmword_2585540 = v277;
  strcpy((char *)qword_2585538, "Walking_Slight_Right_Turn");
  byte_2585567 = 4;
  strcpy((char *)&dword_2585550, "Exit");
  byte_258557F = 4;
  strcpy((char *)&dword_2585568, "Road");
  byte_2585597 = 7;
  strcpy((char *)&dword_2585580, "Freeway");
  byte_25855AF = 12;
  strcpy((char *)&qword_2585598, "Intersection");
  byte_25855C7 = 5;
  strcpy((char *)&dword_25855B0, "Ferry");
  byte_25855DF = 11;
  strcpy((char *)&qword_25855C8, "ShuttleName");
  byte_25855F7 = 5;
  strcpy((char *)&dword_25855E0, "Road1");
  strcpy(&byte_258560F, "\tName");
  strcpy((char *)&qword_25855F8, "Signpost1");
  byte_2585627 = 4;
  byte_258563F = 7;
  strcpy((char *)&dword_2585628, "Address");
  byte_2585657 = 7;
  strcpy((char *)&dword_2585640, "Shield1");
  byte_258566F = 13;
  strcpy((char *)&qword_2585658, "TowardShield1");
  byte_2585687 = 6;
  strcpy((char *)&dword_2585670, "Right_");
  byte_258569F = 5;
  byte_258568C = 95;
  dword_2585688 = 1952867660;
  byte_258568D = 0;
  strcpy(&byte_25856B7, "\tOn_Left_");
  strcpy((char *)&qword_25856A0, "On_Right_");
  byte_25856CF = 8;
  byte_25856E7 = 12;
  strcpy((char *)&qword_25856D0, "ElevatorName");
  byte_25856FF = 13;
  strcpy((char *)&qword_25856E8, "EscalatorName");
  strcpy(&byte_2585717, "\nBridgeName");
  strcpy((char *)&qword_2585700, "StairsName");
  strcpy(&byte_258572F, "\nTunnelName");
  strcpy(&byte_2585747, "\nParking");
  byte_258575F = 7;
  strcpy(&byte_2585777, "\t_Escalator");
  strcpy((char *)&qword_2585760, "_Elevator");
  strcpy(&byte_258578F, "\n_ElevatorName");
  byte_25857A7 = 13;
  byte_25857BF = 14;
  strcpy((char *)&qword_25857A8, "_EscalatorName");
  byte_25857D7 = 5;
  strcpy((char *)&qword_25857C0, "_Road");
  byte_25857EF = 8;
  strcpy((char *)&qword_25857D8, "_Freeway");
  byte_2585807 = 13;
  strcpy((char *)&qword_25857F0, "_Intersection");
  byte_258581F = 6;
  strcpy((char *)&dword_2585808, "_Road1");
  byte_2585837 = 6;
  strcpy((char *)&dword_2585820, "_Road2");
  strcpy(&byte_258584F, "\n_Signpost2");
  strcpy((char *)&qword_2585838, "_Signpost1");
  strcpy(&byte_2585867, "\n_Ferry");
  byte_258587F = 6;
  byte_2585897 = 12;
  strcpy((char *)&qword_2585880, "_Ferry_Ferry");
  byte_25858AF = 12;
  strcpy((char *)&qword_2585898, "_ShuttleName");
  qword_25858B0 = (uint64_t)operator new(0x20uLL);
  unk_25858B8 = v276;
  strcpy((char *)qword_25858B0, "_Railway_Shuttle_ShuttleName");
  byte_25858DF = 11;
  strcpy((char *)&qword_25858C8, "_ExitNumber");
  byte_25858F7 = 5;
  dword_25858E0 = 1769489759;
  byte_25858E4 = 116;
  byte_25858E5 = 0;
  byte_258590F = 7;
  strcpy((char *)&dword_25858F8, "_StayOn");
  byte_2585927 = 7;
  strcpy((char *)&dword_2585910, "_Stairs");
  byte_258593F = 5;
  strcpy((char *)&dword_2585928, "_Ramp");
  byte_2585957 = 11;
  strcpy((char *)&qword_2585940, "_StairsName");
  strcpy(&byte_258596F, "\t_Down");
  strcpy((char *)&qword_2585958, "_RampName");
  byte_2585987 = 5;
  byte_258599F = 3;
  dword_2585988 = 7361887;
  byte_25859B7 = 7;
  strcpy((char *)&dword_25859A0, "_Bridge");
  byte_25859CF = 7;
  strcpy((char *)&dword_25859B8, "_Tunnel");
  byte_25859E7 = 11;
  strcpy((char *)&qword_25859D0, "_Roundabout");
  byte_25859FF = 6;
  strcpy((char *)&dword_25859E8, "_Cross");
  byte_2585A17 = 8;
  strcpy((char *)&qword_2585A00, "_Parking");
  byte_2585A2F = 8;
  strcpy((char *)&qword_2585A18, "_Shield1");
  byte_2585A47 = 14;
  strcpy((char *)&qword_2585A30, "_TowardShield1");
  byte_2585A5F = 8;
  strcpy((char *)&qword_2585A48, "_Shield2");
  byte_2585A77 = 14;
  strcpy((char *)&qword_2585A60, "_TowardShield2");
  byte_2585A8F = 11;
  strcpy((char *)&qword_2585A78, "_Direction1");
  byte_2585AA7 = 11;
  strcpy((char *)&qword_2585A90, "_Direction2");
  strcpy(&byte_2585ABF, "\n_TowardDirection1");
  strcpy((char *)&qword_2585AA8, "Direction1");
  byte_2585AD7 = 17;
  byte_2585AEF = 17;
  strcpy((char *)&xmmword_2585AD8, "_TowardDirection2");
  byte_2585B07 = 16;
  strcpy((char *)&xmmword_2585AF0, "TowardDirection1");
  byte_2585B1F = 7;
  strcpy((char *)&qword_2585B08, "_Spoken");
  byte_2585B37 = 5;
  strcpy((char *)&qword_2585B20, "_Sign");
  byte_2585B4F = 15;
  strcpy((char *)&qword_2585B38, "_Secondary_Sign");
  byte_2585B67 = 5;
  byte_2585B54 = 116;
  dword_2585B50 = 1936280671;
  byte_2585B55 = 0;
  byte_2585B7F = 8;
  strcpy((char *)&qword_2585B68, "_Primary");
  qword_2585B90 = 0xF00000000000000;
  strcpy(byte_2585B98, "_Secondary");
  strcpy((char *)&qword_2585B80, "_Spoken_Primary");
  strcpy(&byte_2585BAF, "\n_Secondary");
  strcpy(&byte_2585BC7, "\n_Spoken_Secondar");
  BYTE1(qword_2585BD8) = 0;
  WORD1(qword_2585BD8) = 0;
  HIDWORD(qword_2585BD8) = 285212672;
  byte_2585BF7 = 13;
  strcpy((char *)&qword_2585BE0, "_To_Secondary");
  BYTE1(qword_2585C08) = 0;
  WORD1(qword_2585C08) = 0;
  HIDWORD(qword_2585C08) = 335544320;
  strcpy((char *)&dword_2585BF8, "_Spoken_To_Secon");
  strcpy(&byte_2585C27, "\t_ValidDistance");
  strcpy((char *)&qword_2585C10, "_Distance");
  byte_2585C3F = 14;
  byte_2585C57 = 6;
  strcpy((char *)&dword_2585C40, "_Short");
  byte_2585C6F = 1;
  word_2585C58 = 95;
  qword_2585C70 = (uint64_t)operator new(0x20uLL);
  unk_2585C78 = v278;
  strcpy((char *)qword_2585C70, "Concatenate_Newline_Sign");
  uint64_t v1 = (char *)operator new(0x19uLL);
  qword_2585C88 = (uint64_t)v1;
  xmmword_2585C90 = v279;
  *(_OWORD *)uint64_t v1 = v269;
  uint64_t v2 = *(void *)&v267[1];
  *(void *)(v1 + 15) = *(void *)&v267[1];
  v1[23] = 0;
  byte_2585CB7 = 12;
  strcpy((char *)&qword_2585CA0, "Chain_Spoken");
  byte_2585CCF = 15;
  strcpy((char *)&qword_2585CB8, "Chain_To_Spoken");
  strcpy(&byte_2585CE7, "\nThen_Spoken");
  strcpy((char *)&qword_2585CD0, "And_Spoken");
  byte_2585CFF = 11;
  byte_2585D17 = 18;
  strcpy((char *)&xmmword_2585D00, "Concatenate_Spoken");
  qword_2585D18 = (uint64_t)operator new(0x28uLL);
  long long v266 = xmmword_20B9240;
  xmmword_2585D20 = xmmword_20B9240;
  strcpy((char *)qword_2585D18, "At_Traffic_Light_Chain_Spoken_Primary");
  qword_2585D30 = (uint64_t)operator new(0x28uLL);
  v267[2] = xmmword_20B9260;
  unk_2585D38 = xmmword_20B9260;
  strcpy((char *)qword_2585D30, "At_Stop_Sign_Chain_Spoken_Primary");
  qword_2585D48 = (uint64_t)operator new(0x40uLL);
  xmmword_2585D50 = xmmword_20B9A90;
  strcpy((char *)qword_2585D48, "At_Stop_Sign_Cross_Traffic_Doesnt_Stop_Chain_Spoken_Primary");
  qword_2585D60 = (uint64_t)operator new(0x30uLL);
  long long v265 = xmmword_20B9A40;
  unk_2585D68 = xmmword_20B9A40;
  strcpy((char *)qword_2585D60, "At_Next_Traffic_Light_Chain_Spoken_Primary");
  qword_2585D78 = (uint64_t)operator new(0x28uLL);
  long long v264 = xmmword_20E12D0;
  xmmword_2585D80 = xmmword_20E12D0;
  strcpy((char *)qword_2585D78, "At_Next_Stop_Sign_Chain_Spoken_Primary");
  qword_2585D90 = (uint64_t)operator new(0x28uLL);
  long long v273 = xmmword_20B9960;
  unk_2585D98 = xmmword_20B9960;
  strcpy((char *)qword_2585D90, "At_Traffic_Light_Chain_Spoken_Secondary");
  qword_2585DA8 = (uint64_t)operator new(0x28uLL);
  xmmword_2585DB0 = xmmword_20B93A0;
  strcpy((char *)qword_2585DA8, "At_Stop_Sign_Chain_Spoken_Secondary");
  qword_2585DC0 = (uint64_t)operator new(0x30uLL);
  long long v271 = xmmword_20E1380;
  unk_2585DC8 = xmmword_20E1380;
  strcpy((char *)qword_2585DC0, "At_Next_Traffic_Light_Chain_Spoken_Secondary");
  qword_2585DD8 = (uint64_t)operator new(0x30uLL);
  xmmword_2585DE0 = xmmword_20B93C0;
  strcpy((char *)qword_2585DD8, "At_Next_Stop_Sign_Chain_Spoken_Secondary");
  qword_2585DF0 = (uint64_t)operator new(0x38uLL);
  unk_2585DF8 = xmmword_20B9A60;
  strcpy((char *)qword_2585DF0, "At_Next_One_Traffic_Light_Chain_Spoken_Secondary");
  qword_2585E08 = (uint64_t)operator new(0x30uLL);
  xmmword_2585E10 = xmmword_20E1380;
  strcpy((char *)qword_2585E08, "At_Next_One_Stop_Sign_Chain_Spoken_Secondary");
  qword_2585E20 = (uint64_t)operator new(0x28uLL);
  unk_2585E28 = xmmword_20B9960;
  strcpy((char *)qword_2585E20, "At_Mini_Roundabout_Chain_Spoken_Primary");
  qword_2585E38 = (uint64_t)operator new(0x30uLL);
  long long v270 = xmmword_20B93D0;
  xmmword_2585E40 = xmmword_20B93D0;
  strcpy((char *)qword_2585E38, "At_Mini_Roundabout_Chain_Spoken_Secondary");
  qword_2585E50 = (uint64_t)operator new(0x20uLL);
  unk_2585E58 = v274;
  strcpy((char *)qword_2585E50, "Walking_Distance_Chain_Spoken");
  qword_2585E68 = (uint64_t)operator new(0x20uLL);
  xmmword_2585E70 = v274;
  strcpy((char *)qword_2585E68, "Walking_Continue_Chain_Spoken");
  unint64_t v3 = (char *)operator new(0x19uLL);
  qword_2585E80 = (uint64_t)v3;
  unk_2585E88 = v279;
  *(_OWORD *)unint64_t v3 = v269;
  *(void *)(v3 + 15) = v2;
  v3[23] = 0;
  qword_2585E98 = (uint64_t)operator new(0x28uLL);
  xmmword_2585EA0 = v268;
  strcpy((char *)qword_2585E98, "Distance_Cross_The_Street_Spoken");
  byte_2585EC7 = 22;
  strcpy((char *)&xmmword_2585EB0, "Walking_Continue_Cross");
  byte_2585EDF = 14;
  strcpy((char *)&qword_2585EC8, "Continue_Cross");
  byte_2585EF7 = 5;
  strcpy((char *)&dword_2585EE0, "Cross");
  byte_2585F0F = 19;
  strcpy((char *)&xmmword_2585EF8, "Cross_Street_Spoken");
  byte_2585F27 = 17;
  strcpy((char *)&xmmword_2585F10, "Cross_Road_Spoken");
  byte_2585F3F = 20;
  strcpy((char *)&xmmword_2585F28, "Use_Crosswalk_Spoken");
  byte_2585F57 = 15;
  strcpy((char *)&qword_2585F40, "Distance_Spoken");
  byte_2585F6F = 19;
  strcpy((char *)&xmmword_2585F58, "Distance_And_Spoken");
  byte_2585F87 = 21;
  strcpy((char *)&xmmword_2585F70, "Continue_Stage_Spoken");
  byte_2585F9F = 13;
  qmemcpy(&qword_2585F88, "ContinueStage", 13);
  int v4 = SHIBYTE(qword_2585B90);
  if (qword_2585B90 >= 0) {
    size_t v5 = HIBYTE(qword_2585B90);
  }
  else {
    size_t v5 = unk_2585B88;
  }
  unint64_t v6 = v5 + 13;
  byte_2585F95 = 0;
  if (v5 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    unint64_t v10 = operator new(v8 + 1);
    qword_2585FA8 = v5 + 13;
    unk_2585FB0 = v9 | 0x8000000000000000;
    qword_2585FA0 = (uint64_t)v10;
    *unint64_t v10 = *(void *)"ContinueStage";
    unint64_t v7 = (char *)v10 + 13;
    *(void *)((char *)v10 + 5) = *(void *)"nueStage";
  }
  else
  {
    BYTE1(qword_2585FA8) = 0;
    WORD1(qword_2585FA8) = 0;
    HIDWORD(qword_2585FA8) = 0;
    unk_2585FB0 = 0;
    byte_2585FB7 = v5 + 13;
    unint64_t v7 = (char *)&qword_2585FA8 + 5;
    strcpy((char *)&qword_2585FA0, "Continue");
    if (!v5) {
      goto LABEL_15;
    }
  }
  if (v4 >= 0) {
    uint64_t v11 = &qword_2585B80;
  }
  else {
    uint64_t v11 = (uint64_t *)qword_2585B80;
  }
  memmove(v7, v11, v5);
LABEL_15:
  v7[v5] = 0;
  int v12 = byte_25857D7;
  if (byte_25857D7 >= 0) {
    size_t v13 = byte_25857D7;
  }
  else {
    size_t v13 = qword_25857C8;
  }
  unint64_t v14 = v13 + 13;
  if (v13 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v14 >= 0x17)
  {
    uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v16 = v14 | 7;
    }
    uint64_t v17 = v16 + 1;
    uint64_t v18 = operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v13 + 13;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    *uint64_t v18 = qword_2585F88;
    *(void *)((char *)v18 + 5) = *(uint64_t *)((char *)&qword_2585F88 + 5);
    char v15 = (char *)v18 + 13;
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 5) = *(uint64_t *)((char *)&qword_2585F88 + 5);
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13 + 13;
    __dst.__r_.__value_.__r.__words[0] = qword_2585F88;
    char v15 = &__dst.__r_.__value_.__s.__data_[13];
    if (!v13) {
      goto LABEL_29;
    }
  }
  if (v12 >= 0) {
    uint64_t v19 = &qword_25857C0;
  }
  else {
    uint64_t v19 = (uint64_t *)qword_25857C0;
  }
  memmove(v15, v19, v13);
LABEL_29:
  v15[v13] = 0;
  if (v4 >= 0) {
    uint64_t v20 = (const std::string::value_type *)&qword_2585B80;
  }
  else {
    uint64_t v20 = (const std::string::value_type *)qword_2585B80;
  }
  uint64_t v21 = std::string::append(&__dst, v20, v5);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  qword_2585FC8 = v21->__r_.__value_.__r.__words[2];
  xmmword_2585FB8 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  byte_2585FE7 = 5;
  strcpy((char *)&dword_2585FD0, "Merge");
  qword_2585FE8 = (uint64_t)operator new(0x20uLL);
  v267[1] = xmmword_20B8E90;
  *(_OWORD *)algn_2585FF0 = xmmword_20B8E90;
  strcpy((char *)qword_2585FE8, "Continue_Freeway_Spoken_Primary");
  byte_2586017 = 8;
  strcpy((char *)&qword_2586000, "Starting");
  byte_258602F = 14;
  strcpy((char *)&qword_2586018, "Starting_Route");
  byte_2586047 = 14;
  strcpy((char *)&qword_2586030, "Resuming_Route");
  byte_258605F = 16;
  strcpy((char *)&xmmword_2586048, "Continuing_Route");
  byte_2586077 = 9;
  word_2586068 = 112;
  qword_2586060 = *(void *)&v263[48];
  strcpy(&byte_258608F, "\nEnding");
  strcpy((char *)&word_2586080, "op");
  qword_2586078 = *(void *)&v267[0];
  byte_25860A7 = 6;
  strcpy((char *)&qword_25860A8, "_Destination");
  byte_25860BF = 12;
  byte_25860D7 = 15;
  strcpy((char *)&qword_25860C0, "_At_Destination");
  std::operator+<char>();
  qword_25860F0 = (uint64_t)operator new(0x20uLL);
  unk_25860F8 = v278;
  strcpy((char *)qword_25860F0, "Spoken_Ending_At_Parking");
  qword_2586108 = (uint64_t)operator new(0x20uLL);
  v267[0] = xmmword_20B9800;
  xmmword_2586110 = xmmword_20B9800;
  strcpy((char *)qword_2586108, "Spoken_Pre_Arrival_Destination");
  strcpy((char *)&xmmword_2586120, "Sign_Ending_At_Parking");
  HIBYTE(word_2586136) = 22;
  byte_258614F = 4;
  strcpy((char *)&dword_2586138, "Home");
  byte_2586167 = 4;
  strcpy((char *)&dword_2586150, "Work");
  byte_258617F = 8;
  strcpy((char *)&qword_2586168, "Business");
  byte_2586197 = 4;
  strcpy((char *)&dword_2586180, "Name");
  byte_25861AF = 13;
  strcpy((char *)&qword_2586198, "Other_Contact");
  byte_25861C7 = 11;
  strcpy((char *)&qword_25861B0, "ContactHome");
  byte_25861DF = 11;
  *(_DWORD *)((char *)&qword_25861C8 + 7) = 1802661719;
  byte_25861F7 = 7;
  *(int *)((char *)&dword_25861E0 + 3) = 1936942450;
  dword_25861E0 = 1919181889;
  strcpy((char *)&xmmword_25861F8, "Discoverability_Prompt");
  HIBYTE(word_258620E) = 22;
  byte_2586227 = 6;
  dword_2586210 = 1634878303;
  word_2586214 = 26739;
  byte_258623F = 8;
  qword_2586228 = 0x697269535F6F4E5FLL;
  byte_2586257 = 9;
  strcpy((char *)&qword_2586240, "_CityName");
  byte_258626F = 8;
  qword_2586258 = 0x636972656E65475FLL;
  int v23 = byte_2586017;
  if (byte_2586017 >= 0) {
    size_t v24 = byte_2586017;
  }
  else {
    size_t v24 = qword_2586008;
  }
  LODWORD(v269) = byte_2585357;
  if (byte_2585357 >= 0) {
    size_t v25 = byte_2585357;
  }
  else {
    size_t v25 = unk_2585348;
  }
  qword_25861C8 = *(void *)"ContactWork";
  byte_25861D3 = 0;
  byte_25861E7 = 0;
  byte_2586216 = 0;
  byte_2586230 = 0;
  byte_2586260 = 0;
  unint64_t v26 = v25 + v24;
  if (v25 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  *(void *)uint64_t v263 = *(void *)"ContactWork";
  *(void *)&v263[16] = *(void *)"ContactHome";
  *(void *)&v263[32] = *(void *)"_Contact";
  *(void *)&v263[48] = *(void *)"Other_Contact";
  if (v26 <= 0x16)
  {
    uint64_t v27 = &qword_2586270;
    qword_2586278 = 0;
    unk_2586280 = 0;
    qword_2586270 = 0;
    byte_2586287 = v25 + v24;
    if (!v24) {
      goto LABEL_47;
    }
    goto LABEL_43;
  }
  uint64_t v90 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17) {
    uint64_t v90 = v26 | 7;
  }
  uint64_t v91 = v90 + 1;
  uint64_t v27 = (uint64_t *)operator new(v90 + 1);
  qword_2586278 = v25 + v24;
  unk_2586280 = v91 | 0x8000000000000000;
  qword_2586270 = (uint64_t)v27;
  if (v24)
  {
LABEL_43:
    if (v23 >= 0) {
      uint64_t v28 = &qword_2586000;
    }
    else {
      uint64_t v28 = (uint64_t *)qword_2586000;
    }
    memmove(v27, v28, v24);
  }
LABEL_47:
  uint64_t v29 = (char *)v27 + v24;
  if (v25)
  {
    if ((int)v269 >= 0) {
      uint64_t v30 = &qword_2585340;
    }
    else {
      uint64_t v30 = (uint64_t *)qword_2585340;
    }
    memmove(v29, v30, v25);
  }
  v29[v25] = 0;
  int v31 = byte_25860BF;
  if (byte_25860BF >= 0) {
    size_t v32 = byte_25860BF;
  }
  else {
    size_t v32 = qword_25860B0;
  }
  unint64_t v33 = v32 + v24;
  if (v32 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v33 <= 0x16)
  {
    uint64_t v34 = &qword_2586288;
    qword_2586290 = 0;
    unk_2586298 = 0;
    qword_2586288 = 0;
    byte_258629F = v32 + v24;
    if (!v24) {
      goto LABEL_62;
    }
    goto LABEL_58;
  }
  uint64_t v92 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v92 = v33 | 7;
  }
  uint64_t v93 = v92 + 1;
  uint64_t v34 = (uint64_t *)operator new(v92 + 1);
  qword_2586290 = v32 + v24;
  unk_2586298 = v93 | 0x8000000000000000;
  qword_2586288 = (uint64_t)v34;
  if (v24)
  {
LABEL_58:
    if (v23 >= 0) {
      uint64_t v35 = &qword_2586000;
    }
    else {
      uint64_t v35 = (uint64_t *)qword_2586000;
    }
    memmove(v34, v35, v24);
  }
LABEL_62:
  uint64_t v36 = (char *)v34 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      uint64_t v37 = &qword_25860A8;
    }
    else {
      uint64_t v37 = (uint64_t *)qword_25860A8;
    }
    memmove(v36, v37, v32);
  }
  v36[v32] = 0;
  qword_25862A0 = (uint64_t)operator new(0x19uLL);
  unk_25862A8 = v279;
  strcpy((char *)qword_25862A0, "{ChargeStationCityName}");
  if (v33 < 0x17)
  {
    uint64_t v38 = &qword_25862B8;
    qword_25862C0 = 0;
    unk_25862C8 = 0;
    qword_25862B8 = 0;
    byte_25862CF = v32 + v24;
    if (!v24) {
      goto LABEL_73;
    }
    goto LABEL_69;
  }
  uint64_t v94 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v94 = v33 | 7;
  }
  uint64_t v95 = v94 + 1;
  uint64_t v38 = (uint64_t *)operator new(v94 + 1);
  qword_25862C0 = v32 + v24;
  unk_25862C8 = v95 | 0x8000000000000000;
  qword_25862B8 = (uint64_t)v38;
  if (v24)
  {
LABEL_69:
    if (v23 >= 0) {
      BOOL v39 = &qword_2586000;
    }
    else {
      BOOL v39 = (uint64_t *)qword_2586000;
    }
    memmove(v38, v39, v24);
  }
LABEL_73:
  uint64_t v40 = (char *)v38 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      uint64_t v41 = &qword_25860A8;
    }
    else {
      uint64_t v41 = (uint64_t *)qword_25860A8;
    }
    memmove(v40, v41, v32);
  }
  v40[v32] = 0;
  strcpy((char *)&xmmword_25862D0, "{NewBatteryPercentage}");
  HIBYTE(word_25862E6) = 22;
  qword_25862E8 = (uint64_t)operator new(0x20uLL);
  xmmword_25862F0 = v272;
  strcpy((char *)qword_25862E8, "{OriginalBatteryPercentage}");
  byte_2586317 = 19;
  strcpy((char *)&xmmword_2586300, "_Arrival_Percentage");
  int v42 = byte_25860A7;
  if (byte_25860A7 >= 0) {
    size_t v43 = byte_25860A7;
  }
  else {
    size_t v43 = qword_2586098;
  }
  unint64_t v44 = v43 + v25;
  if (v43 + v25 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v44 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v43 + v25;
    if (!v43) {
      goto LABEL_88;
    }
    goto LABEL_84;
  }
  uint64_t v96 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v44 | 7) != 0x17) {
    uint64_t v96 = v44 | 7;
  }
  uint64_t v97 = v96 + 1;
  p_dst = (char *)operator new(v96 + 1);
  __dst.__r_.__value_.__l.__size_ = v43 + v25;
  __dst.__r_.__value_.__r.__words[2] = v97 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v43)
  {
LABEL_84:
    if (v42 >= 0) {
      int64_t v46 = &qword_2586090;
    }
    else {
      int64_t v46 = (uint64_t *)qword_2586090;
    }
    memmove(p_dst, v46, v43);
  }
LABEL_88:
  std::string v47 = &p_dst[v43];
  if (v25)
  {
    if ((int)v269 >= 0) {
      std::string v48 = &qword_2585340;
    }
    else {
      std::string v48 = (uint64_t *)qword_2585340;
    }
    memmove(v47, v48, v25);
  }
  v47[v25] = 0;
  std::string v49 = std::string::append(&__dst, "_Percentage");
  long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  qword_2586328 = v49->__r_.__value_.__r.__words[2];
  xmmword_2586318 = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v51 = byte_25860A7;
  if (byte_25860A7 >= 0) {
    size_t v52 = byte_25860A7;
  }
  else {
    size_t v52 = qword_2586098;
  }
  int v53 = byte_2585357;
  if (byte_2585357 >= 0) {
    size_t v54 = byte_2585357;
  }
  else {
    size_t v54 = unk_2585348;
  }
  unint64_t v55 = v54 + v52;
  if (v54 + v52 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v55 <= 0x16)
  {
    memset(&v280, 0, sizeof(v280));
    uint64_t v56 = (char *)&v280;
    *((unsigned char *)&v280.__r_.__value_.__s + 23) = v54 + v52;
    if (!v52) {
      goto LABEL_108;
    }
    goto LABEL_104;
  }
  uint64_t v98 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v55 | 7) != 0x17) {
    uint64_t v98 = v55 | 7;
  }
  uint64_t v99 = v98 + 1;
  uint64_t v56 = (char *)operator new(v98 + 1);
  v280.__r_.__value_.__l.__size_ = v54 + v52;
  v280.__r_.__value_.__r.__words[2] = v99 | 0x8000000000000000;
  v280.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  if (v52)
  {
LABEL_104:
    if (v51 >= 0) {
      uint64_t v57 = &qword_2586090;
    }
    else {
      uint64_t v57 = (uint64_t *)qword_2586090;
    }
    memmove(v56, v57, v52);
  }
LABEL_108:
  uint64_t v58 = &v56[v52];
  if (v54)
  {
    if (v53 >= 0) {
      int v59 = &qword_2585340;
    }
    else {
      int v59 = (uint64_t *)qword_2585340;
    }
    memmove(v58, v59, v54);
  }
  v58[v54] = 0;
  if (byte_2585387 >= 0) {
    long long v60 = (const std::string::value_type *)&qword_2585370;
  }
  else {
    long long v60 = (const std::string::value_type *)qword_2585370;
  }
  if (byte_2585387 >= 0) {
    std::string::size_type v61 = byte_2585387;
  }
  else {
    std::string::size_type v61 = *(void *)&byte_2585378;
  }
  uint64_t v62 = std::string::append(&v280, v60, v61);
  long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  float v64 = std::string::append(&__dst, "_Percentage");
  long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  qword_2586340 = v64->__r_.__value_.__r.__words[2];
  xmmword_2586330 = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v280.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_121;
    }
  }
  else if ((SHIBYTE(v280.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_121;
  }
  operator delete(v280.__r_.__value_.__l.__data_);
LABEL_121:
  int v66 = byte_25860A7;
  if (byte_25860A7 >= 0) {
    size_t v67 = byte_25860A7;
  }
  else {
    size_t v67 = qword_2586098;
  }
  int v68 = byte_2585357;
  if (byte_2585357 >= 0) {
    size_t v69 = byte_2585357;
  }
  else {
    size_t v69 = unk_2585348;
  }
  unint64_t v70 = v69 + v67;
  if (v69 + v67 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v70 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    long long v71 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v69 + v67;
    if (!v67) {
      goto LABEL_134;
    }
    goto LABEL_130;
  }
  uint64_t v100 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v70 | 7) != 0x17) {
    uint64_t v100 = v70 | 7;
  }
  uint64_t v101 = v100 + 1;
  long long v71 = (char *)operator new(v100 + 1);
  __dst.__r_.__value_.__l.__size_ = v69 + v67;
  __dst.__r_.__value_.__r.__words[2] = v101 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
  if (v67)
  {
LABEL_130:
    if (v66 >= 0) {
      uint64_t v72 = &qword_2586090;
    }
    else {
      uint64_t v72 = (uint64_t *)qword_2586090;
    }
    memmove(v71, v72, v67);
  }
LABEL_134:
  long long v73 = &v71[v67];
  if (v69)
  {
    if (v68 >= 0) {
      uint64_t v74 = &qword_2585340;
    }
    else {
      uint64_t v74 = (uint64_t *)qword_2585340;
    }
    memmove(v73, v74, v69);
  }
  v73[v69] = 0;
  long long v75 = std::string::append(&__dst, "_Duration");
  long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
  qword_2586358 = v75->__r_.__value_.__r.__words[2];
  xmmword_2586348 = v76;
  v75->__r_.__value_.__l.__size_ = 0;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v77 = byte_25860A7;
  if (byte_25860A7 >= 0) {
    size_t v78 = byte_25860A7;
  }
  else {
    size_t v78 = qword_2586098;
  }
  int v79 = byte_2585357;
  if (byte_2585357 >= 0) {
    size_t v80 = byte_2585357;
  }
  else {
    size_t v80 = unk_2585348;
  }
  unint64_t v81 = v80 + v78;
  if (v80 + v78 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v81 <= 0x16)
  {
    qword_2586368 = 0;
    unk_2586370 = 0;
    qword_2586360 = 0;
    int v82 = &qword_2586360;
    byte_2586377 = v80 + v78;
    if (!v78) {
      goto LABEL_154;
    }
    goto LABEL_150;
  }
  uint64_t v102 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v81 | 7) != 0x17) {
    uint64_t v102 = v81 | 7;
  }
  uint64_t v103 = v102 + 1;
  int v82 = (uint64_t *)operator new(v102 + 1);
  qword_2586368 = v80 + v78;
  unk_2586370 = v103 | 0x8000000000000000;
  qword_2586360 = (uint64_t)v82;
  if (v78)
  {
LABEL_150:
    if (v77 >= 0) {
      uint64_t v83 = &qword_2586090;
    }
    else {
      uint64_t v83 = (uint64_t *)qword_2586090;
    }
    memmove(v82, v83, v78);
  }
LABEL_154:
  uint64_t v84 = (char *)v82 + v78;
  if (v80)
  {
    if (v79 >= 0) {
      uint64_t v85 = &qword_2585340;
    }
    else {
      uint64_t v85 = (uint64_t *)qword_2585340;
    }
    memmove(v84, v85, v80);
  }
  v84[v80] = 0;
  int v86 = byte_2586377;
  if (byte_2586377 >= 0) {
    size_t v87 = byte_2586377;
  }
  else {
    size_t v87 = qword_2586368;
  }
  unint64_t v88 = v87 + 5;
  if (v87 + 5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v88 >= 0x17)
  {
    uint64_t v104 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v88 | 7) != 0x17) {
      uint64_t v104 = v88 | 7;
    }
    uint64_t v105 = v104 + 1;
    uint64_t v89 = (uint64_t *)operator new(v104 + 1);
    qword_2586380 = v87 + 5;
    unk_2586388 = v105 | 0x8000000000000000;
    qword_2586378 = (uint64_t)v89;
  }
  else
  {
    uint64_t v89 = &qword_2586378;
    qword_2586380 = 0;
    unk_2586388 = 0;
    qword_2586378 = 0;
    byte_258638F = v87 + 5;
    if (!v87) {
      goto LABEL_201;
    }
  }
  if (v86 >= 0) {
    uint64_t v106 = &qword_2586360;
  }
  else {
    uint64_t v106 = (uint64_t *)qword_2586360;
  }
  memmove(v89, v106, v87);
LABEL_201:
  strcpy((char *)v89 + v87, "_Name");
  int v107 = byte_25860A7;
  if (byte_25860A7 >= 0) {
    size_t v108 = byte_25860A7;
  }
  else {
    size_t v108 = qword_2586098;
  }
  int v109 = byte_2585357;
  if (byte_2585357 >= 0) {
    size_t v110 = byte_2585357;
  }
  else {
    size_t v110 = unk_2585348;
  }
  unint64_t v111 = v110 + v108;
  if (v110 + v108 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v111 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    int v112 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v110 + v108;
    if (!v108) {
      goto LABEL_214;
    }
    goto LABEL_210;
  }
  uint64_t v122 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v111 | 7) != 0x17) {
    uint64_t v122 = v111 | 7;
  }
  uint64_t v123 = v122 + 1;
  int v112 = (char *)operator new(v122 + 1);
  __dst.__r_.__value_.__l.__size_ = v110 + v108;
  __dst.__r_.__value_.__r.__words[2] = v123 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
  if (v108)
  {
LABEL_210:
    if (v107 >= 0) {
      int v113 = &qword_2586090;
    }
    else {
      int v113 = (uint64_t *)qword_2586090;
    }
    memmove(v112, v113, v108);
  }
LABEL_214:
  unsigned int v114 = &v112[v108];
  if (v110)
  {
    if (v109 >= 0) {
      uint64_t v115 = &qword_2585340;
    }
    else {
      uint64_t v115 = (uint64_t *)qword_2585340;
    }
    memmove(v114, v115, v110);
  }
  v114[v110] = 0;
  long long v116 = std::string::append(&__dst, "_Connector_Type");
  long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
  qword_25863A0 = v116->__r_.__value_.__r.__words[2];
  xmmword_2586390 = v117;
  v116->__r_.__value_.__l.__size_ = 0;
  v116->__r_.__value_.__r.__words[2] = 0;
  v116->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v118 = SHIBYTE(qword_25863A0);
  if (qword_25863A0 >= 0) {
    size_t v119 = HIBYTE(qword_25863A0);
  }
  else {
    size_t v119 = *((void *)&xmmword_2586390 + 1);
  }
  unint64_t v120 = v119 + 6;
  if (v119 + 6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v120 >= 0x17)
  {
    uint64_t v124 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v120 | 7) != 0x17) {
      uint64_t v124 = v120 | 7;
    }
    uint64_t v125 = v124 + 1;
    uint64_t v121 = (uint64_t *)operator new(v124 + 1);
    qword_25863B0 = v119 + 6;
    unk_25863B8 = v125 | 0x8000000000000000;
    qword_25863A8 = (uint64_t)v121;
  }
  else
  {
    uint64_t v121 = &qword_25863A8;
    qword_25863B0 = 0;
    unk_25863B8 = 0;
    qword_25863A8 = 0;
    byte_25863BF = v119 + 6;
    if (!v119) {
      goto LABEL_239;
    }
  }
  if (v118 >= 0) {
    uint64_t v126 = &xmmword_2586390;
  }
  else {
    uint64_t v126 = (long long *)xmmword_2586390;
  }
  memmove(v121, v126, v119);
LABEL_239:
  strcpy((char *)v121 + v119, "_Power");
  int v127 = byte_25860A7;
  if (byte_25860A7 >= 0) {
    size_t v128 = byte_25860A7;
  }
  else {
    size_t v128 = qword_2586098;
  }
  int v129 = byte_2585357;
  if (byte_2585357 >= 0) {
    size_t v130 = byte_2585357;
  }
  else {
    size_t v130 = unk_2585348;
  }
  unint64_t v131 = v130 + v128;
  if (v130 + v128 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v131 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    v132 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v130 + v128;
    if (!v128) {
      goto LABEL_252;
    }
    goto LABEL_248;
  }
  uint64_t v161 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v131 | 7) != 0x17) {
    uint64_t v161 = v131 | 7;
  }
  uint64_t v162 = v161 + 1;
  v132 = (char *)operator new(v161 + 1);
  __dst.__r_.__value_.__l.__size_ = v130 + v128;
  __dst.__r_.__value_.__r.__words[2] = v162 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v132;
  if (v128)
  {
LABEL_248:
    if (v127 >= 0) {
      uint64_t v133 = &qword_2586090;
    }
    else {
      uint64_t v133 = (uint64_t *)qword_2586090;
    }
    memmove(v132, v133, v128);
  }
LABEL_252:
  v134 = &v132[v128];
  if (v130)
  {
    if (v129 >= 0) {
      uint64_t v135 = &qword_2585340;
    }
    else {
      uint64_t v135 = (uint64_t *)qword_2585340;
    }
    memmove(v134, v135, v130);
  }
  v134[v130] = 0;
  if (byte_2585B1F >= 0) {
    v136 = (const std::string::value_type *)&qword_2585B08;
  }
  else {
    v136 = (const std::string::value_type *)qword_2585B08;
  }
  if (byte_2585B1F >= 0) {
    std::string::size_type v137 = byte_2585B1F;
  }
  else {
    std::string::size_type v137 = unk_2585B10;
  }
  uint64_t v138 = std::string::append(&__dst, v136, v137);
  long long v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
  qword_25863D0 = v138->__r_.__value_.__r.__words[2];
  xmmword_25863C0 = v139;
  v138->__r_.__value_.__l.__size_ = 0;
  v138->__r_.__value_.__r.__words[2] = 0;
  v138->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v140 = byte_25860A7;
  if (byte_25860A7 >= 0) {
    size_t v141 = byte_25860A7;
  }
  else {
    size_t v141 = qword_2586098;
  }
  int v142 = byte_2585357;
  if (byte_2585357 >= 0) {
    size_t v143 = byte_2585357;
  }
  else {
    size_t v143 = unk_2585348;
  }
  unint64_t v144 = v143 + v141;
  if (v143 + v141 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v144 <= 0x16)
  {
    memset(&v280, 0, sizeof(v280));
    v145 = (char *)&v280;
    *((unsigned char *)&v280.__r_.__value_.__s + 23) = v143 + v141;
    if (!v141) {
      goto LABEL_278;
    }
    goto LABEL_274;
  }
  uint64_t v163 = (v144 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v144 | 7) != 0x17) {
    uint64_t v163 = v144 | 7;
  }
  uint64_t v164 = v163 + 1;
  v145 = (char *)operator new(v163 + 1);
  v280.__r_.__value_.__l.__size_ = v143 + v141;
  v280.__r_.__value_.__r.__words[2] = v164 | 0x8000000000000000;
  v280.__r_.__value_.__r.__words[0] = (std::string::size_type)v145;
  if (v141)
  {
LABEL_274:
    if (v140 >= 0) {
      v146 = &qword_2586090;
    }
    else {
      v146 = (uint64_t *)qword_2586090;
    }
    memmove(v145, v146, v141);
  }
LABEL_278:
  v147 = &v145[v141];
  if (v143)
  {
    if (v142 >= 0) {
      uint64_t v148 = &qword_2585340;
    }
    else {
      uint64_t v148 = (uint64_t *)qword_2585340;
    }
    memmove(v147, v148, v143);
  }
  v147[v143] = 0;
  if (byte_2585387 >= 0) {
    uint64_t v149 = (const std::string::value_type *)&qword_2585370;
  }
  else {
    uint64_t v149 = (const std::string::value_type *)qword_2585370;
  }
  if (byte_2585387 >= 0) {
    std::string::size_type v150 = byte_2585387;
  }
  else {
    std::string::size_type v150 = *(void *)&byte_2585378;
  }
  uint64_t v151 = std::string::append(&v280, v149, v150);
  long long v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v152;
  v151->__r_.__value_.__l.__size_ = 0;
  v151->__r_.__value_.__r.__words[2] = 0;
  v151->__r_.__value_.__r.__words[0] = 0;
  if (byte_2585B1F >= 0) {
    int v153 = (const std::string::value_type *)&qword_2585B08;
  }
  else {
    int v153 = (const std::string::value_type *)qword_2585B08;
  }
  if (byte_2585B1F >= 0) {
    std::string::size_type v154 = byte_2585B1F;
  }
  else {
    std::string::size_type v154 = unk_2585B10;
  }
  uint64_t v155 = std::string::append(&__dst, v153, v154);
  long long v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
  qword_25863E8 = v155->__r_.__value_.__r.__words[2];
  xmmword_25863D8 = v156;
  v155->__r_.__value_.__l.__size_ = 0;
  v155->__r_.__value_.__r.__words[2] = 0;
  v155->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v280.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_297;
    }
  }
  else if ((SHIBYTE(v280.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_297;
  }
  operator delete(v280.__r_.__value_.__l.__data_);
LABEL_297:
  byte_2586407 = 16;
  strcpy((char *)&xmmword_25863F0, "Use_NACS_Adapter");
  byte_258641F = 16;
  strcpy(byte_2586408, "Start_Route_Sign");
  qword_2586420 = (uint64_t)operator new(0x20uLL);
  unk_2586428 = v275;
  strcpy((char *)qword_2586420, "Start_Route_Spoken_Primary");
  int v157 = byte_2584AB7;
  if (byte_2584AB7 >= 0) {
    size_t v158 = byte_2584AB7;
  }
  else {
    size_t v158 = qword_2584AA8;
  }
  unint64_t v159 = v158 + 27;
  if (v158 + 27 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v159 <= 0x16)
  {
    uint64_t v160 = &qword_2586438;
    qword_2586440 = 0;
    unk_2586448 = 0;
    qword_2586438 = 0;
    byte_258644F = v158 + 27;
LABEL_314:
    if (v157 >= 0) {
      v167 = &qword_2584AA0;
    }
    else {
      v167 = (uint64_t *)qword_2584AA0;
    }
    memmove(v160, v167, v158);
    goto LABEL_318;
  }
  uint64_t v165 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v159 | 7) != 0x17) {
    uint64_t v165 = v159 | 7;
  }
  uint64_t v166 = v165 + 1;
  uint64_t v160 = (uint64_t *)operator new(v165 + 1);
  qword_2586440 = v158 + 27;
  unk_2586448 = v166 | 0x8000000000000000;
  qword_2586438 = (uint64_t)v160;
  if (v158) {
    goto LABEL_314;
  }
LABEL_318:
  strcpy((char *)v160 + v158, "Turn_Around_To_Route_Spoken");
  strcpy(&byte_2586467, "\t_Two_Lanes");
  strcpy((char *)&qword_2586450, "_One_Lane");
  strcpy(&byte_258647F, "\n_Three_Lanes");
  byte_2586497 = 12;
  byte_25864AF = 11;
  strcpy((char *)&qword_2586498, "_Four_Lanes");
  byte_25864C7 = 11;
  strcpy((char *)&qword_25864B0, "_Five_Lanes");
  strcpy(&byte_25864DF, "\n_Seven_Lanes");
  strcpy((char *)&qword_25864C8, "_Six_Lanes");
  byte_25864F7 = 12;
  byte_258650F = 12;
  strcpy((char *)&qword_25864F8, "_Eight_Lanes");
  byte_2586527 = 12;
  strcpy((char *)&qword_2586510, "_Second_Lane");
  byte_258653F = 11;
  strcpy((char *)&qword_2586528, "_Third_Lane");
  byte_2586557 = 19;
  long long v269 = *(_OWORD *)"_Second_Third_Lanes";
  strcpy((char *)&xmmword_2586540, "_Second_Third_Lanes");
  byte_258656F = 4;
  strcpy((char *)&dword_2586558, "Left");
  byte_2586587 = 5;
  byte_2586574 = 116;
  dword_2586570 = 1751607634;
  byte_2586575 = 0;
  byte_258659F = 6;
  strcpy((char *)&dword_2586588, "Middle");
  BYTE1(qword_25865B0) = 0;
  WORD1(qword_25865B0) = 0;
  HIDWORD(qword_25865B0) = 0x10000000;
  strcpy((char *)dword_25865A0, "Left_Second_Lane");
  BYTE1(qword_25865C8) = 0;
  WORD1(qword_25865C8) = 0;
  HIDWORD(qword_25865C8) = 285212672;
  strcpy((char *)&dword_25865B8, "Right_Second_Lan");
  qword_25865E0 = 0xF00000000000000;
  strcpy((char *)&dword_25865D0, "Left_Third_Lane");
  qword_25865F8 = 0x1000000000000000;
  byte_25865EC = 116;
  dword_25865E8 = 1751607634;
  dword_25865F4 = 1701732684;
  unk_25865ED = *(void *)"_Third_Lane";
  v168 = (char *)operator new(0x19uLL);
  qword_2586600 = (uint64_t)v168;
  unk_2586608 = v279;
  *(_DWORD *)v168 = 1952867660;
  strcpy(v168 + 19, "anes");
  *(_OWORD *)(v168 + 4) = v269;
  uint64_t v169 = (char *)operator new(0x20uLL);
  qword_2586618 = (uint64_t)v169;
  xmmword_2586620 = v278;
  *(_DWORD *)uint64_t v169 = 1751607634;
  v169[4] = 116;
  strcpy(v169 + 20, "anes");
  *(_OWORD *)(v169 + 5) = v269;
  byte_2586647 = 5;
  strcpy((char *)&dword_2586630, "_Stay");
  byte_258665F = 13;
  strcpy((char *)&qword_2586648, "Continue_Sign");
  byte_2586677 = 8;
  strcpy((char *)&qword_2586660, "Continue");
  int v170 = byte_2585B37;
  if (byte_2585B37 >= 0) {
    size_t v171 = byte_2585B37;
  }
  else {
    size_t v171 = qword_2585B28;
  }
  unint64_t v172 = v171 + 8;
  if (v171 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v172 >= 0x17)
  {
    uint64_t v174 = (v172 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v172 | 7) != 0x17) {
      uint64_t v174 = v172 | 7;
    }
    uint64_t v175 = v174 + 1;
    v176 = operator new(v174 + 1);
    qword_2586680 = v171 + 8;
    qword_2586688 = v175 | 0x8000000000000000;
    qword_2586678 = (uint64_t)v176;
    void *v176 = 0x65756E69746E6F43;
    v173 = v176 + 1;
  }
  else
  {
    qword_2586688 = 0;
    HIBYTE(qword_2586688) = v171 + 8;
    qword_2586678 = 0x65756E69746E6F43;
    qword_2586680 = 0;
    v173 = &qword_2586680;
    if (!v171) {
      goto LABEL_332;
    }
  }
  if (v170 >= 0) {
    v177 = &qword_2585B20;
  }
  else {
    v177 = (uint64_t *)qword_2585B20;
  }
  memmove(v173, v177, v171);
LABEL_332:
  *((unsigned char *)v173 + v171) = 0;
  int v178 = SHIBYTE(qword_2585B90);
  if (qword_2585B90 >= 0) {
    size_t v179 = HIBYTE(qword_2585B90);
  }
  else {
    size_t v179 = unk_2585B88;
  }
  unint64_t v180 = v179 + 8;
  if (v179 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v180 >= 0x17)
  {
    uint64_t v182 = (v180 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v180 | 7) != 0x17) {
      uint64_t v182 = v180 | 7;
    }
    uint64_t v183 = v182 + 1;
    v184 = operator new(v182 + 1);
    qword_2586698 = v179 + 8;
    qword_25866A0 = v183 | 0x8000000000000000;
    qword_2586690 = (uint64_t)v184;
    void *v184 = qword_2586660;
    v181 = v184 + 1;
  }
  else
  {
    qword_25866A0 = 0;
    HIBYTE(qword_25866A0) = v179 + 8;
    qword_2586690 = qword_2586660;
    qword_2586698 = 0;
    v181 = &qword_2586698;
    if (!v179) {
      goto LABEL_346;
    }
  }
  if (v178 >= 0) {
    v185 = &qword_2585B80;
  }
  else {
    v185 = (uint64_t *)qword_2585B80;
  }
  memmove(v181, v185, v179);
LABEL_346:
  *((unsigned char *)v181 + v179) = 0;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 83;
  v282[23] = 2;
  strcpy(v282, "SW");
  v284[7] = 1;
  LOWORD(v283[0]) = 87;
  HIBYTE(v285) = 2;
  strcpy(&v284[8], "NW");
  HIBYTE(v287) = 1;
  LOWORD(v286[0]) = 78;
  HIBYTE(v289) = 2;
  strcpy((char *)&v288, "NE");
  HIBYTE(v291) = 1;
  LOWORD(v290) = 69;
  HIBYTE(v293) = 2;
  strcpy((char *)&__p, "SE");
  sub_4BDC0C(qword_25866A8, (uint64_t)&__dst, 8uLL);
  if (SHIBYTE(v293) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v291) & 0x80000000) == 0)
    {
LABEL_348:
      if ((SHIBYTE(v289) & 0x80000000) == 0) {
        goto LABEL_349;
      }
      goto LABEL_383;
    }
  }
  else if ((SHIBYTE(v291) & 0x80000000) == 0)
  {
    goto LABEL_348;
  }
  operator delete((void *)v290);
  if ((SHIBYTE(v289) & 0x80000000) == 0)
  {
LABEL_349:
    if ((SHIBYTE(v287) & 0x80000000) == 0) {
      goto LABEL_350;
    }
    goto LABEL_384;
  }
LABEL_383:
  operator delete((void *)v288);
  if ((SHIBYTE(v287) & 0x80000000) == 0)
  {
LABEL_350:
    if ((SHIBYTE(v285) & 0x80000000) == 0) {
      goto LABEL_351;
    }
    goto LABEL_385;
  }
LABEL_384:
  operator delete(v286[0]);
  if ((SHIBYTE(v285) & 0x80000000) == 0)
  {
LABEL_351:
    if ((v284[7] & 0x80000000) == 0) {
      goto LABEL_352;
    }
    goto LABEL_386;
  }
LABEL_385:
  operator delete(*(void **)&v284[8]);
  if ((v284[7] & 0x80000000) == 0)
  {
LABEL_352:
    if ((v282[23] & 0x80000000) == 0) {
      goto LABEL_353;
    }
LABEL_387:
    operator delete(*(void **)v282);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_354;
    }
    goto LABEL_388;
  }
LABEL_386:
  operator delete(v283[0]);
  if ((v282[23] & 0x80000000) != 0) {
    goto LABEL_387;
  }
LABEL_353:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_354;
  }
LABEL_388:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_354:
  byte_25866D7 = 13;
  strcpy((char *)&qword_25866C0, "{instruction}");
  byte_25866EF = 20;
  strcpy(byte_25866D8, "{primaryInstruction}");
  strcpy((char *)&xmmword_25866F0, "{secondaryInstruction}");
  HIBYTE(word_2586706) = 22;
  qword_2586708 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2586710 = v277;
  strcpy((char *)qword_2586708, "{andSecondaryInstruction}");
  qword_2586720 = (uint64_t)operator new(0x20uLL);
  unk_2586728 = v278;
  strcpy((char *)qword_2586720, "{toSecondaryInstruction}");
  byte_258674F = 21;
  strcpy(byte_2586738, "{continueInstruction}");
  qword_2586750 = (uint64_t)operator new(0x20uLL);
  unk_2586758 = v275;
  strcpy((char *)qword_2586750, "{thenSecondaryInstruction}");
  byte_258677F = 14;
  strcpy((char *)&qword_2586768, "{instruction1}");
  byte_2586797 = 14;
  strcpy((char *)&qword_2586780, "{instruction2}");
  strcpy(&byte_25867AF, "\n{nextDistance}");
  strcpy((char *)&qword_2586798, "{distance}");
  byte_25867C7 = 14;
  byte_25867DF = 16;
  strcpy(byte_25867C8, "{valid_distance}");
  strcpy(&byte_25867F7, "\n{valid_distance}");
  strcpy((char *)&qword_25867E0, "{distance}");
  byte_258680F = 16;
  byte_2586827 = 15;
  strcpy((char *)&qword_2586810, "{ClimbDistance}");
  byte_258683F = 17;
  strcpy(byte_2586828, "{DescentDistance}");
  byte_2586857 = 13;
  strcpy((char *)&qword_2586840, "{nonBrkSpace}");
  byte_258686F = 9;
  strcpy((char *)&qword_2586858, "{newLine}");
  byte_2586887 = 6;
  word_2586874 = -24382;
  dword_2586870 = -1211981630;
  byte_2586876 = 0;
  byte_258689F = 2;
  word_2586888 = -24382;
  byte_258688A = 0;
  byte_25868B7 = 1;
  word_25868A0 = 10;
  byte_25868CF = 1;
  word_25868B8 = 32;
  byte_25868E7 = 2;
  strcpy((char *)&word_25868D0, "\n\n");
  strcpy(&byte_25868FF, "\t{TowardShield1}");
  strcpy((char *)&qword_25868E8, "{Shield1}");
  byte_2586917 = 15;
  strcpy(&byte_258692F, "\t{TowardShield2}");
  strcpy((char *)&qword_2586918, "{Shield2}");
  byte_2586947 = 15;
  byte_258695F = 12;
  strcpy((char *)&qword_2586948, "{Direction1}");
  byte_2586977 = 12;
  strcpy((char *)&qword_2586960, "{Direction2}");
  byte_258698F = 18;
  strcpy((char *)&xmmword_2586978, "{TowardDirection1}");
  byte_25869A7 = 18;
  strcpy((char *)&xmmword_2586990, "{TowardDirection2}");
  byte_25869BF = 7;
  strcpy((char *)&dword_25869A8, "{Icon1}");
  byte_25869D7 = 7;
  strcpy((char *)&dword_25869C0, "{Icon2}");
  byte_25869D8[23] = 14;
  strcpy(byte_25869D8, "{Intersection}");
  byte_2586A07 = 6;
  strcpy((char *)&xmmword_25869F0, "{Road}");
  byte_2586A1F = 7;
  strcpy((char *)&dword_2586A08, "{Road1}");
  byte_2586A37 = 7;
  strcpy((char *)&xmmword_2586A20, "{Road2}");
  strcpy(&byte_2586A4F, "\n{Freeway}");
  strcpy((char *)&qword_2586A38, "{Elevator}");
  strcpy(&byte_2586A67, "\t{Ferry}");
  byte_2586A7F = 7;
  byte_2586A97 = 13;
  strcpy((char *)&xmmword_2586A80, "{ShuttleName}");
  byte_2586AAF = 11;
  strcpy((char *)&qword_2586A98, "{Signpost1}");
  byte_2586AC7 = 11;
  strcpy((char *)&xmmword_2586AB0, "{Signpost2}");
  byte_2586ADF = 12;
  strcpy((char *)&xmmword_2586AC8, "{ExitNumber}");
  strcpy(&byte_2586AF7, "\t{Name}");
  strcpy((char *)&xmmword_2586AE0, "{Address}");
  byte_2586B0F = 6;
  byte_2586B27 = 11;
  strcpy((char *)&xmmword_2586B10, "{PlaceName}");
  byte_2586B3F = 14;
  strcpy((char *)&xmmword_2586B28, "{ElevatorName}");
  byte_2586B57 = 15;
  strcpy((char *)&xmmword_2586B40, "{EscalatorName}");
  byte_2586B6F = 12;
  strcpy((char *)&xmmword_2586B58, "{StairsName}");
  strcpy(&byte_2586B87, "\n{BridgeName}");
  strcpy((char *)&xmmword_2586B70, "{RampName}");
  byte_2586B9F = 12;
  byte_2586BB7 = 12;
  strcpy((char *)&xmmword_2586BA0, "{TunnelName}");
  byte_2586BCF = 13;
  strcpy((char *)&xmmword_2586BB8, "{CustomLabel}");
  std::string __dst = *(std::string *)byte_25869D8;
  *(_OWORD *)std::string v282 = xmmword_25869F0;
  *(void *)&v282[16] = unk_2586A00;
  *(_OWORD *)v283 = *(_OWORD *)&dword_2586A08;
  *(void *)v284 = unk_2586A18;
  *(_OWORD *)&v284[8] = xmmword_2586A20;
  uint64_t v285 = unk_2586A30;
  *(_OWORD *)v286 = *(_OWORD *)&qword_2586A38;
  uint64_t v287 = unk_2586A48;
  uint64_t v289 = unk_2586A60;
  long long v288 = xmmword_2586A50;
  long long v290 = *(_OWORD *)&dword_2586A68;
  uint64_t v291 = unk_2586A78;
  uint64_t v293 = unk_2586A90;
  long long __p = xmmword_2586A80;
  long long v294 = *(_OWORD *)&qword_2586A98;
  uint64_t v295 = unk_2586AA8;
  uint64_t v297 = unk_2586AC0;
  long long v296 = xmmword_2586AB0;
  long long v298 = xmmword_2586AC8;
  long long v300 = xmmword_2586AE0;
  uint64_t v299 = unk_2586AD8;
  uint64_t v301 = unk_2586AF0;
  long long v302 = xmmword_2586AF8;
  long long v304 = xmmword_2586B10;
  uint64_t v303 = unk_2586B08;
  uint64_t v305 = unk_2586B20;
  long long v306 = xmmword_2586B28;
  long long v308 = xmmword_2586B40;
  uint64_t v307 = unk_2586B38;
  uint64_t v309 = unk_2586B50;
  long long v310 = xmmword_2586B58;
  long long v312 = xmmword_2586B70;
  uint64_t v311 = unk_2586B68;
  uint64_t v313 = unk_2586B80;
  long long v314 = xmmword_2586B88;
  long long v316 = xmmword_2586BA0;
  uint64_t v315 = unk_2586B98;
  uint64_t v317 = unk_2586BB0;
  uint64_t v319 = unk_2586BC8;
  long long v318 = xmmword_2586BB8;
  sub_4BDC0C(qword_2586BD0, (uint64_t)&__dst, 0x15uLL);
  if (SHIBYTE(v319) < 0)
  {
    operator delete((void *)v318);
    if ((SHIBYTE(v317) & 0x80000000) == 0)
    {
LABEL_356:
      if ((SHIBYTE(v315) & 0x80000000) == 0) {
        goto LABEL_357;
      }
      goto LABEL_391;
    }
  }
  else if ((SHIBYTE(v317) & 0x80000000) == 0)
  {
    goto LABEL_356;
  }
  operator delete((void *)v316);
  if ((SHIBYTE(v315) & 0x80000000) == 0)
  {
LABEL_357:
    if ((SHIBYTE(v313) & 0x80000000) == 0) {
      goto LABEL_358;
    }
    goto LABEL_392;
  }
LABEL_391:
  operator delete((void *)v314);
  if ((SHIBYTE(v313) & 0x80000000) == 0)
  {
LABEL_358:
    if ((SHIBYTE(v311) & 0x80000000) == 0) {
      goto LABEL_359;
    }
    goto LABEL_393;
  }
LABEL_392:
  operator delete((void *)v312);
  if ((SHIBYTE(v311) & 0x80000000) == 0)
  {
LABEL_359:
    if ((SHIBYTE(v309) & 0x80000000) == 0) {
      goto LABEL_360;
    }
    goto LABEL_394;
  }
LABEL_393:
  operator delete((void *)v310);
  if ((SHIBYTE(v309) & 0x80000000) == 0)
  {
LABEL_360:
    if ((SHIBYTE(v307) & 0x80000000) == 0) {
      goto LABEL_361;
    }
    goto LABEL_395;
  }
LABEL_394:
  operator delete((void *)v308);
  if ((SHIBYTE(v307) & 0x80000000) == 0)
  {
LABEL_361:
    if ((SHIBYTE(v305) & 0x80000000) == 0) {
      goto LABEL_362;
    }
    goto LABEL_396;
  }
LABEL_395:
  operator delete((void *)v306);
  if ((SHIBYTE(v305) & 0x80000000) == 0)
  {
LABEL_362:
    if ((SHIBYTE(v303) & 0x80000000) == 0) {
      goto LABEL_363;
    }
    goto LABEL_397;
  }
LABEL_396:
  operator delete((void *)v304);
  if ((SHIBYTE(v303) & 0x80000000) == 0)
  {
LABEL_363:
    if ((SHIBYTE(v301) & 0x80000000) == 0) {
      goto LABEL_364;
    }
    goto LABEL_398;
  }
LABEL_397:
  operator delete((void *)v302);
  if ((SHIBYTE(v301) & 0x80000000) == 0)
  {
LABEL_364:
    if ((SHIBYTE(v299) & 0x80000000) == 0) {
      goto LABEL_365;
    }
    goto LABEL_399;
  }
LABEL_398:
  operator delete((void *)v300);
  if ((SHIBYTE(v299) & 0x80000000) == 0)
  {
LABEL_365:
    if ((SHIBYTE(v297) & 0x80000000) == 0) {
      goto LABEL_366;
    }
    goto LABEL_400;
  }
LABEL_399:
  operator delete((void *)v298);
  if ((SHIBYTE(v297) & 0x80000000) == 0)
  {
LABEL_366:
    if ((SHIBYTE(v295) & 0x80000000) == 0) {
      goto LABEL_367;
    }
    goto LABEL_401;
  }
LABEL_400:
  operator delete((void *)v296);
  if ((SHIBYTE(v295) & 0x80000000) == 0)
  {
LABEL_367:
    if ((SHIBYTE(v293) & 0x80000000) == 0) {
      goto LABEL_368;
    }
    goto LABEL_402;
  }
LABEL_401:
  operator delete((void *)v294);
  if ((SHIBYTE(v293) & 0x80000000) == 0)
  {
LABEL_368:
    if ((SHIBYTE(v291) & 0x80000000) == 0) {
      goto LABEL_369;
    }
    goto LABEL_403;
  }
LABEL_402:
  operator delete((void *)__p);
  if ((SHIBYTE(v291) & 0x80000000) == 0)
  {
LABEL_369:
    if ((SHIBYTE(v289) & 0x80000000) == 0) {
      goto LABEL_370;
    }
    goto LABEL_404;
  }
LABEL_403:
  operator delete((void *)v290);
  if ((SHIBYTE(v289) & 0x80000000) == 0)
  {
LABEL_370:
    if ((SHIBYTE(v287) & 0x80000000) == 0) {
      goto LABEL_371;
    }
    goto LABEL_405;
  }
LABEL_404:
  operator delete((void *)v288);
  if ((SHIBYTE(v287) & 0x80000000) == 0)
  {
LABEL_371:
    if ((SHIBYTE(v285) & 0x80000000) == 0) {
      goto LABEL_372;
    }
    goto LABEL_406;
  }
LABEL_405:
  operator delete(v286[0]);
  if ((SHIBYTE(v285) & 0x80000000) == 0)
  {
LABEL_372:
    if ((v284[7] & 0x80000000) == 0) {
      goto LABEL_373;
    }
    goto LABEL_407;
  }
LABEL_406:
  operator delete(*(void **)&v284[8]);
  if ((v284[7] & 0x80000000) == 0)
  {
LABEL_373:
    if ((v282[23] & 0x80000000) == 0) {
      goto LABEL_374;
    }
LABEL_408:
    operator delete(*(void **)v282);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_375;
    }
    goto LABEL_409;
  }
LABEL_407:
  operator delete(v283[0]);
  if ((v282[23] & 0x80000000) != 0) {
    goto LABEL_408;
  }
LABEL_374:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_375;
  }
LABEL_409:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_375:
  qword_2586BE8 = (uint64_t)operator new(0x19uLL);
  unk_2586BF0 = v279;
  strcpy((char *)qword_2586BE8, "From_User_Location_List");
  byte_2586C17 = 20;
  strcpy(byte_2586C00, "Origin_Waypoint_List");
  qword_2586C18 = (uint64_t)operator new(0x20uLL);
  unk_2586C20 = v275;
  strcpy((char *)qword_2586C18, "Intermediate_Waypoint_List");
  unk_2586C30 = operator new(0x20uLL);
  unk_2586C38 = v277;
  strcpy(unk_2586C30, "Destination_Waypoint_List");
  byte_2586C5F = 15;
  strcpy((char *)&qword_2586C48, "{toDestination}");
  byte_2586C77 = 13;
  strcpy((char *)&xmmword_2586C60, "{Destination}");
  byte_2586C8F = 7;
  strcpy(byte_2586C78, "To_Home");
  byte_2586CA7 = 14;
  strcpy(byte_2586C90, "To_ContactHome");
  byte_2586CBF = 7;
  strcpy(byte_2586CA8, "To_Work");
  byte_2586CD7 = 14;
  strcpy(byte_2586CC0, "To_ContactWork");
  strcpy(&byte_2586CEF, "\nTo_Business");
  strcpy(byte_2586CD8, "To_Address");
  byte_2586D07 = 11;
  byte_2586D1F = 16;
  strcpy(byte_2586D08, "To_Other_Contact");
  strcpy(&byte_2586D37, "\tTo_ContactSchool");
  strcpy(byte_2586D20, "To_School");
  byte_2586D4F = 16;
  byte_2586D67 = 17;
  strcpy(algn_2586D50, "To_PersonLocation");
  qword_2586D68 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2586D70 = v276;
  strcpy((char *)qword_2586D68, "To_ContactCustomLabelAddress");
  byte_2586D97 = 7;
  strcpy((char *)&dword_2586D80, "At_Home");
  byte_2586DAF = 14;
  strcpy((char *)&qword_2586D98, "At_ContactHome");
  byte_2586DC7 = 7;
  strcpy((char *)&dword_2586DB0, "At_Work");
  byte_2586DDF = 14;
  strcpy((char *)&qword_2586DC8, "At_ContactWork");
  strcpy(&byte_2586DF7, "\nAt_Business");
  strcpy((char *)&qword_2586DE0, "At_Address");
  byte_2586E0F = 11;
  byte_2586E27 = 16;
  strcpy(algn_2586E10, "At_Other_Contact");
  byte_2586E3F = 4;
  strcpy((char *)&dword_2586E28, "Home");
  byte_2586E57 = 11;
  strcpy((char *)&qword_2586E40 + 7, "Home");
  qword_2586E40 = *(void *)&v263[16];
  byte_2586E6F = 4;
  strcpy((char *)&dword_2586E58, "Work");
  byte_2586E87 = 11;
  strcpy((char *)&qword_2586E70 + 7, "Work");
  qword_2586E70 = *(void *)v263;
  byte_2586E9F = 7;
  strcpy((char *)&dword_2586E88, "Address");
  byte_2586EB7 = 8;
  strcpy((char *)&qword_2586EA0, "Business");
  byte_2586ECF = 13;
  qword_2586EB8 = *(void *)&v263[48];
  *(uint64_t *)((char *)&qword_2586EB8 + 5) = *(void *)&v263[32];
  byte_2586EC5 = 0;
  byte_2586EE7 = 6;
  strcpy((char *)&dword_2586ED0, "School");
  byte_2586EFF = 13;
  strcpy((char *)&qword_2586EE8, "ContactSchool");
  byte_2586F17 = 14;
  strcpy((char *)&qword_2586F00, "PersonLocation");
  qword_2586F18 = (uint64_t)operator new(0x20uLL);
  xmmword_2586F20 = v277;
  strcpy((char *)qword_2586F18, "ContactCustomLabelAddress");
  if (byte_2586C77 < 0)
  {
    sub_4200(&xmmword_2586F30, (void *)xmmword_2586C60, *((unint64_t *)&xmmword_2586C60 + 1));
  }
  else
  {
    xmmword_2586F30 = xmmword_2586C60;
    qword_2586F40 = unk_2586C70;
  }
  byte_2586F5F = 16;
  strcpy((char *)&xmmword_2586F48, "{PrevExitNumber}");
  byte_2586F77 = 10;
  strcpy((char *)&qword_2586F60, "{PrevRoad}");
  qword_2586F78 = (uint64_t)operator new(0x20uLL);
  unk_2586F80 = v278;
  strcpy((char *)qword_2586F78, "{RouteTotalExpectedTime}");
  byte_2586FA7 = 18;
  strcpy(byte_2586F90, "{ChargePercentage}");
  qword_2586FA8 = (uint64_t)operator new(0x20uLL);
  unk_2586FB0 = v272;
  strcpy((char *)qword_2586FA8, "{RemainingChargePercentage}");
  byte_2586FD7 = 16;
  strcpy(byte_2586FC0, "{ChargeDuration}");
  byte_2586FEF = 15;
  strcpy((char *)&qword_2586FD8, "{ConnectorType}");
  byte_2587007 = 19;
  strcpy(byte_2586FF0, "{ChargeStationName}");
  byte_258701F = 7;
  strcpy((char *)&dword_2587008, "{Power}");
  byte_2587037 = 13;
  strcpy((char *)&qword_2587020, "{VehicleName}");
  byte_258704F = 18;
  strcpy((char *)&xmmword_2587038, "{AreaIncidentName}");
  byte_2587067 = 14;
  strcpy((char *)&qword_2587050, "{AreaIncident}");
  byte_258707F = 16;
  strcpy((char *)&xmmword_2587068, "{AffectedRegion}");
  byte_2587097 = 21;
  strcpy(byte_2587080, "{AreaIncidentWeblink}");
  byte_25870AF = 20;
  strcpy((char *)&xmmword_2587098, "{AreaIncidentAgency}");
  byte_25870C7 = 11;
  strcpy((char *)&qword_25870B0, "{IssueTime}");
  byte_25870DF = 12;
  strcpy((char *)&qword_25870C8, "{UpdateTime}");
  byte_25870F7 = 11;
  strcpy((char *)&qword_25870E0, "{IssueDate}");
  byte_258710F = 12;
  strcpy((char *)&qword_25870F8, "{UpdateDate}");
  qword_2587110 = (uint64_t)operator new(0x20uLL);
  unk_2587118 = v278;
  strcpy((char *)qword_2587110, "{AreaIncidentDataSource}");
  byte_258713F = 13;
  strcpy((char *)&qword_2587128, "{AreaHectare}");
  byte_2587157 = 10;
  strcpy((char *)&qword_2587140, "{AreaAcre}");
  qword_2587158 = (uint64_t)operator new(0x20uLL);
  unk_2587160 = v274;
  strcpy((char *)qword_2587158, "{WildfirePercentageContained}");
  qword_2587170 = (uint64_t)operator new(0x28uLL);
  unk_2587178 = v267[2];
  strcpy((char *)qword_2587170, "{WildfireExpectedContainmentDate}");
  qword_2587188 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2587190 = v276;
  strcpy((char *)qword_2587188, "{ServerRecommendedRouteName}");
  qword_25871A0 = (uint64_t)operator new(0x20uLL);
  unk_25871A8 = v276;
  strcpy((char *)qword_25871A0, "{ServerNonRecommendedRoute1}");
  qword_25871B8 = (uint64_t)operator new(0x20uLL);
  unk_25871C0 = v276;
  strcpy((char *)qword_25871B8, "{ServerNonRecommendedRoute2}");
  byte_25871E7 = 12;
  strcpy((char *)&qword_25871D0, "{ClientDest}");
  byte_25871FF = 6;
  strcpy((char *)&dword_25871E8, "{Name}");
  qword_2587200 = (uint64_t)operator new(0x20uLL);
  unk_2587208 = v267[1];
  strcpy((char *)qword_2587200, "ProactiveAlert_FasterRouteTitle");
  qword_2587218 = (uint64_t)operator new(0x20uLL);
  unk_2587220 = v275;
  strcpy((char *)qword_2587218, "ProactiveAlert_RoadClosure");
  qword_2587230 = (uint64_t)operator new(0x30uLL);
  unk_2587238 = v270;
  strcpy((char *)qword_2587230, "ProactiveAlert_UnusuallyHeavyTrafficOnTwo");
  qword_2587248 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2587250 = v273;
  strcpy((char *)qword_2587248, "ProactiveAlert_FasterRouteTitle_to_Home");
  qword_2587260 = (uint64_t)operator new(0x28uLL);
  unk_2587268 = v273;
  strcpy((char *)qword_2587260, "ProactiveAlert_FasterRouteTitle_to_Work");
  qword_2587278 = (uint64_t)operator new(0x28uLL);
  unk_2587280 = v273;
  strcpy((char *)qword_2587278, "ProactiveAlert_FasterRouteTitle_to_Name");
  qword_2587290 = (uint64_t)operator new(0x30uLL);
  unk_2587298 = xmmword_20B93B0;
  strcpy((char *)qword_2587290, "ProactiveAlert_FasterRouteTitle_to_StreetName");
  byte_25872BF = 17;
  strcpy(byte_25872A8, "Proactive_Driving");
  strcpy(&byte_25872D7, "\n{RouteName}");
  strcpy((char *)&qword_25872C0, "_RouteName");
  byte_25872EF = 11;
  qword_25872F0 = (uint64_t)operator new(0x28uLL);
  unk_25872F8 = v267[2];
  strcpy((char *)qword_25872F0, "Pass_Traffic_Light_Spoken_Primary");
  qword_2587308 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2587310 = v274;
  strcpy((char *)qword_2587308, "Pass_Stop_Sign_Spoken_Primary");
  *(void *)&algn_2587310[16] = operator new(0x20uLL);
  *(_OWORD *)&algn_2587310[24] = v267[0];
  strcpy(*(char **)&algn_2587310[16], "Pass_Roundabout_Spoken_Primary");
  strcpy(&byte_258734F, "\nBannerBody");
  strcpy(&algn_2587310[40], "BannerHead");
  strcpy(&byte_2587367, "\nBannerDescription");
  byte_258737F = 17;
  strcpy(&byte_2587397, "\n_Incident");
  strcpy((char *)&qword_2587380, "VoiceAlert");
  strcpy(&byte_25873AF, "\t_Area_Incident");
  byte_25873C7 = 14;
  byte_25873DF = 15;
  strcpy((char *)&qword_25873C8, "_Area_Incidents");
  strcpy(&byte_25873F7, "\t_Crash");
  strcpy((char *)&qword_25873E0, "_Accident");
  byte_258740F = 6;
  byte_2587427 = 16;
  strcpy((char *)&xmmword_2587410, "_Congestion_Zone");
  strcpy(&byte_258743F, "\n_Environmental_Zone");
  strcpy((char *)&qword_2587428, "_Toll_Zone");
  byte_2587457 = 19;
  BYTE1(qword_2587468) = 116;
  WORD1(qword_2587468) = 0;
  HIDWORD(qword_2587468) = 301989888;
  strcpy(byte_2587470, "_Construction");
  strcpy((char *)&qword_2587458, "_Incident_Accide");
  byte_2587487 = 13;
  byte_258749F = 7;
  strcpy((char *)&dword_2587488, "_Hazard");
  byte_25874B7 = 12;
  strcpy((char *)&qword_25874A0, "_LaneClosure");
  byte_25874CF = 12;
  strcpy((char *)&qword_25874B8, "_LaneTrailer");
  qmemcpy(&byte_25874E7, "\t_LaneTrailer", 13);
  strcpy((char *)&qword_25874D0, "_Shoulder");
  qword_25874F8 = 0x1500007200000000;
  *(void *)algn_25874F4 = *(void *)"_Shoulder";
  strcpy((char *)&xmmword_2587500, "_Causing_Traffic_Delay");
  HIBYTE(word_2587516) = 22;
  byte_258752F = 6;
  strcpy((char *)&dword_2587518, "_Timed");
  byte_2587547 = 12;
  strcpy((char *)&qword_2587530, "_HasDistance");
  byte_258755F = 8;
  strcpy((char *)&qword_2587548, "_Closure");
  strcpy(&byte_2587577, "\n_BadRoad");
  strcpy((char *)&qword_2587560, "_NoReroute");
  byte_258758F = 8;
  byte_25875A7 = 12;
  strcpy((char *)&qword_2587590, "_TollTrailer");
  byte_25875BF = 12;
  strcpy((char *)&qword_25875A8, "_BestTrailer");
  byte_25875D7 = 8;
  strcpy((char *)&qword_25875C0, "_Trailer");
  byte_25875EF = 18;
  strcpy((char *)&xmmword_25875D8, "_Secondary_Trailer");
  byte_2587607 = 8;
  strcpy((char *)&qword_25875F0, "_Savings");
  byte_258761F = 8;
  strcpy((char *)&qword_2587608, "_AltRoad");
  byte_2587637 = 6;
  strcpy((char *)&dword_2587620, "_Named");
  byte_258764F = 6;
  strcpy((char *)&dword_2587638, "_NAMED");
  byte_2587667 = 22;
  strcpy((char *)&xmmword_2587650, "_Named_Suggested_Route");
  qword_2587680 = 0x1000000000000000;
  xmmword_2587670 = xmmword_20E81D0;
  byte_258769F = 11;
  strcpy((char *)&qword_2587688, "_Speed_Trap");
  byte_25876B7 = 4;
  strcpy((char *)&dword_25876A0, "_UGI");
  byte_25876CF = 12;
  strcpy((char *)&qword_25876B8, "_Safer_Route");
  qword_25876D0 = (uint64_t)operator new(0x20uLL);
  unk_25876D8 = v267[1];
  strcpy((char *)qword_25876D0, "BlockedRouteByBlockingIncident_");
  qword_25876E8 = (uint64_t)operator new(0x28uLL);
  long long v269 = xmmword_20B9280;
  *(_OWORD *)algn_25876F0 = xmmword_20B9280;
  strcpy((char *)qword_25876E8, "BlockedRouteByManeuverRestriction_");
  qword_2587700 = (uint64_t)operator new(0x20uLL);
  unk_2587708 = v267[0];
  strcpy((char *)qword_2587700, "BlockedRouteByTimeRestriction_");
  qword_2587718 = (uint64_t)operator new(0x28uLL);
  unk_2587720 = xmmword_20B8FD0;
  strcpy((char *)qword_2587718, "SuggestRouteToAvoidBlockingIncident_");
  qword_2587730 = (uint64_t)operator new(0x30uLL);
  unk_2587738 = xmmword_20B9380;
  strcpy((char *)qword_2587730, "SuggestRouteToAvoidBlockingManeuverRestriction_");
  qword_2587748 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_2587750 = xmmword_20B93E0;
  strcpy((char *)qword_2587748, "SuggestRouteToAvoidBlockingTimeRestriction_");
  byte_2587777 = 1;
  word_2587760 = 95;
  strcpy((char *)&xmmword_2587778, "IncidentsCausingDelay_");
  HIBYTE(word_258778E) = 22;
  qword_2587790 = (uint64_t)operator new(0x19uLL);
  unk_2587798 = v279;
  strcpy((char *)qword_2587790, "NonVotableRoadIncident_");
  byte_25877BF = 20;
  strcpy(byte_25877A8, "VotableRoadIncident_");
  byte_25877D7 = 13;
  strcpy((char *)&qword_25877C0, "AreaIncident_");
  byte_25877EF = 15;
  strcpy((char *)&qword_25877D8, "CongestionZone_");
  qword_25877F0 = (uint64_t)operator new(0x20uLL);
  unk_25877F8 = v278;
  strcpy((char *)qword_25877F0, "EVModifiedChargingStops_");
  byte_258781F = 13;
  strcpy((char *)&qword_2587808, "EVDisconnect_");
  byte_2587837 = 12;
  strcpy((char *)&qword_2587820, "EVReconnect_");
  qword_2587838 = (uint64_t)operator new(0x20uLL);
  unk_2587840 = v276;
  strcpy((char *)qword_2587838, "EVOfflineToOnlineTransition_");
  byte_2587867 = 13;
  strcpy((char *)&qword_2587850, "EVOfflineSAR_");
  byte_258787F = 21;
  strcpy((char *)&xmmword_2587868, "EVTowingNotSupported_");
  byte_2587897 = 18;
  strcpy(byte_2587880, "EVInfeasibleRoute_");
  qword_2587898 = (uint64_t)operator new(0x38uLL);
  unk_25878A0 = xmmword_20B8DF0;
  strcpy((char *)qword_2587898, "SuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25878B0 = (uint64_t)operator new(0x40uLL);
  unk_25878B8 = xmmword_20B98C0;
  strcpy((char *)qword_25878B0, "LCSuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25878C8 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25878D0 = v271;
  strcpy((char *)qword_25878C8, "SuggestRouteAddingStopsForEVInfeasibleRoute_");
  qmemcpy(v267, "InfeasibleRoute_ngStopsForEVInfeSuggestRouteAddi", sizeof(v267));
  qword_25878E0 = (uint64_t)operator new(0x30uLL);
  *(_WORD *)&v263[50] = 0;
  *(_DWORD *)&v263[52] = 0;
  *(void *)&v263[56] = 0x8000000000000030;
  unk_25878E8 = xmmword_20B9A80;
  strcpy((char *)qword_25878E0, "LCSuggestRouteAddingStopsForEVInfeasibleRoute_");
  strcpy(v263, "InfeasibleRoute_dingStopsForEVInLCSuggestRouteAd.");
  qword_25878F8 = (uint64_t)operator new(0x30uLL);
  unk_2587900 = v270;
  strcpy((char *)qword_25878F8, "SuggestRouteAddingStopsToIncreaseDestSoc_");
  v186 = operator new(0x30uLL);
  qword_2587910 = (uint64_t)v186;
  unk_2587918 = v271;
  _OWORD *v186 = v267[2];
  v186[1] = v267[1];
  *(_OWORD *)((char *)v186 + 28) = v267[0];
  *((unsigned char *)v186 + 44) = 0;
  qword_2587928 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2587930 = v269;
  strcpy((char *)qword_2587928, "SuggestDetourWithHigherArrivalSOC_");
  v187 = operator new(0x30uLL);
  qword_2587940 = (uint64_t)v187;
  unk_2587948 = *(_OWORD *)&v263[48];
  _OWORD *v187 = *(_OWORD *)&v263[32];
  v187[1] = *(_OWORD *)&v263[16];
  *(_OWORD *)((char *)v187 + 30) = *(_OWORD *)v263;
  *((unsigned char *)v187 + 46) = 0;
  qword_2587958 = (uint64_t)operator new(0x28uLL);
  unk_2587960 = v273;
  strcpy((char *)qword_2587958, "SuggestRouteToDestForEVInfeasibleRoute_");
  qword_2587970 = (uint64_t)operator new(0x28uLL);
  unk_2587978 = v266;
  strcpy((char *)qword_2587970, "SuggestRouteRemovingStopsFromEVRoute_");
  qword_2587988 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2587990 = v278;
  strcpy((char *)qword_2587988, "OfflineToOnlineNewRoute_");
  qword_25879A0 = (uint64_t)operator new(0x40uLL);
  unk_25879A8 = xmmword_20B98C0;
  strcpy((char *)qword_25879A0, "SuggestDetourWithHigherArrivalSOCForInfeasibleUserRoute_");
  byte_25879CF = 20;
  strcpy((char *)&xmmword_25879B8, "LPR_OFFLINE_REROUTE_");
  byte_25879E7 = 16;
  strcpy(algn_25879D0, "LPR_OFFLINE_SAR_");
  byte_25879FF = 20;
  strcpy((char *)&xmmword_25879E8, "LPR_OFFLINE_REROUTE_");
  byte_2587A17 = 16;
  strcpy(byte_2587A00, "LPR_OFFLINE_SAR_");
  byte_2587A2F = 19;
  strcpy((char *)&xmmword_2587A18, "SuggestFasterRoute_");
  qword_2587A30 = (char *)operator new(0x20uLL);
  xmmword_2587A38 = v277;
  strcpy(qword_2587A30, "AreaIncidentSaferReroute_");
  byte_2587A5F = 12;
  strcpy((char *)&qword_2587A48, "_Remove_Stop");
  byte_2587A77 = 13;
  strcpy((char *)&qword_2587A60, "_Remove_Stops");
  strcpy(&byte_2587A8F, "\t_Add_Stops");
  strcpy((char *)&qword_2587A78, "_Add_Stop");
  strcpy(&byte_2587AA7, "\n_Change_Route");
  byte_2587ABF = 13;
  byte_2587AD7 = 15;
  strcpy((char *)&qword_2587AC0, "_Different_Stop");
  byte_2587AEF = 16;
  strcpy((char *)&xmmword_2587AD8, "_Different_Stops");
  byte_2587B07 = 15;
  strcpy((char *)&qword_2587AF0, "_EV_Remove_Stop");
  byte_2587B1F = 16;
  strcpy((char *)&xmmword_2587B08, "_EV_Remove_Stops");
  byte_2587B37 = 12;
  strcpy((char *)&qword_2587B20, "_EV_Add_Stop");
  byte_2587B4F = 13;
  strcpy((char *)&qword_2587B38, "_EV_Add_Stops");
  byte_2587B67 = 15;
  strcpy((char *)&qword_2587B50, "_EV_Low_Battery");
  byte_2587B7F = 14;
  strcpy((char *)&qword_2587B68, "_EV_Infeasible");
  byte_2587B97 = 15;
  strcpy((char *)&qword_2587B80, "_EV_Last_Chance");
  qword_2587B98 = (uint64_t)operator new(0x20uLL);
  unk_2587BA0 = v278;
  strcpy((char *)qword_2587B98, "_EV_Low_Battery_Add_Stop");
  uint64_t v188 = qword_2587A98;
  qword_2587BB0 = (uint64_t)operator new(0x20uLL);
  unk_2587BB8 = v277;
  strcpy((char *)qword_2587BB0, "_EV_Low_Battery_Add_Stops");
  qword_2587BC8 = (uint64_t)operator new(0x19uLL);
  *(_OWORD *)algn_2587BD0 = v279;
  strcpy((char *)qword_2587BC8, "_EV_Infeasible_Add_Stop");
  int v189 = byte_2587AA7;
  if (byte_2587AA7 >= 0) {
    size_t v190 = byte_2587AA7;
  }
  else {
    size_t v190 = v188;
  }
  unint64_t v191 = v190 + 14;
  if (v190 + 14 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v191 >= 0x17)
  {
    uint64_t v194 = (v191 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v191 | 7) != 0x17) {
      uint64_t v194 = v191 | 7;
    }
    uint64_t v195 = v194 + 1;
    v196 = (char *)operator new(v194 + 1);
    qword_2587BE8 = v190 + 14;
    unk_2587BF0 = v195 | 0x8000000000000000;
    qword_2587BE0 = (uint64_t)v196;
    qmemcpy(v196, "_EV_Infeasible", 14);
    v192 = v196 + 14;
  }
  else
  {
    BYTE1(qword_2587BE8) = 0;
    WORD1(qword_2587BE8) = 0;
    HIDWORD(qword_2587BE8) = 0;
    unk_2587BF0 = 0;
    byte_2587BF7 = v190 + 14;
    strcpy((char *)&qword_2587BE0, "_EV_Infe");
    v192 = (char *)&qword_2587BE8 + 6;
    if (!v190)
    {
      char v193 = 1;
      goto LABEL_425;
    }
  }
  if (v189 >= 0) {
    uint64_t v197 = (uint64_t)&qword_2587A90;
  }
  else {
    uint64_t v197 = 0x6F74535F6464415FLL;
  }
  memmove(v192, (const void *)v197, v190);
  char v193 = 0;
LABEL_425:
  v192[v190] = 0;
  v198 = (char *)operator new(0x20uLL);
  qword_2587BF8 = (uint64_t)v198;
  unk_2587C00 = v278;
  *(void *)v198 = qword_2587B80;
  *(void *)(v198 + 7) = *(uint64_t *)((char *)&qword_2587B80 + 7);
  *(void *)(v198 + 15) = qword_2587A78;
  v198[23] = word_2587A80;
  v198[24] = 0;
  unint64_t v199 = v190 + 15;
  if (v190 + 15 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v199 > 0x16)
  {
    uint64_t v201 = (v199 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v199 | 7) != 0x17) {
      uint64_t v201 = v199 | 7;
    }
    uint64_t v202 = v201 + 1;
    v200 = (uint64_t *)operator new(v201 + 1);
    qword_2587C18 = v190 + 15;
    unk_2587C20 = v202 | 0x8000000000000000;
    qword_2587C10 = (uint64_t)v200;
  }
  else
  {
    v200 = &qword_2587C10;
    qword_2587C18 = 0;
    unk_2587C20 = 0;
    qword_2587C10 = 0;
    byte_2587C27 = v190 + 15;
  }
  uint64_t *v200 = qword_2587B80;
  *(uint64_t *)((char *)v200 + 7) = *(uint64_t *)((char *)&qword_2587B80 + 7);
  v203 = (char *)v200 + 15;
  if ((v193 & 1) == 0)
  {
    if (v189 >= 0) {
      v204 = &qword_2587A90;
    }
    else {
      v204 = (uint64_t *)qword_2587A90;
    }
    memmove((char *)v200 + 15, v204, v190);
  }
  v203[v190] = 0;
  byte_2587C3F = 17;
  strcpy((char *)&xmmword_2587C28, "_EV_Forced_Detour");
  qword_2587C40 = (uint64_t)operator new(0x20uLL);
  unk_2587C48 = v277;
  strcpy((char *)qword_2587C40, "_EV_Higher_Arrival_Charge");
  qword_2587C58 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2587C60 = xmmword_20B8FD0;
  strcpy((char *)qword_2587C58, "_EV_Infeasible_Higher_Arrival_Charge");
  byte_2587C87 = 16;
  strcpy(&algn_2587C60[16], "_EV_Out_Of_Range");
  qword_2587C88 = (uint64_t)operator new(0x20uLL);
  unk_2587C90 = v272;
  strcpy((char *)qword_2587C88, "_EV_Last_Chance_Take_Detour");
  strcpy(byte_2587CA0, "_EV_Forced_Modify_Stop");
  HIBYTE(word_2587CB6) = 22;
  qword_2587CB8 = (uint64_t)operator new(0x19uLL);
  unk_2587CC0 = v279;
  strcpy((char *)qword_2587CB8, "_EV_Forced_Modify_Stops");
  byte_2587CE7 = 19;
  strcpy(byte_2587CD0, "_EV_Forced_Add_Stop");
  byte_2587CFF = 20;
  strcpy((char *)&xmmword_2587CE8, "_EV_Forced_Add_Stops");
  byte_2587D17 = 21;
  strcpy(byte_2587D00, "_EV_Battery_Info_Lost");
  qword_2587D18 = (uint64_t)operator new(0x20uLL);
  unk_2587D20 = v277;
  strcpy((char *)qword_2587D18, "_EV_Battery_Info_Restored");
  qword_2587D30 = (uint64_t)operator new(0x20uLL);
  unk_2587D38 = v278;
  strcpy((char *)qword_2587D30, "_EV_Towing_Not_Supported");
  qword_2587D48 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2587D50 = v268;
  strcpy((char *)qword_2587D48, "_EV_Offline_to_Online_Transition");
  byte_2587D77 = 15;
  strcpy((char *)&qword_2587D60, "_EV_Offline_SAR");
  qword_2587D78 = (uint64_t)operator new(0x20uLL);
  unk_2587D80 = v276;
  strcpy((char *)qword_2587D78, "_Offline_to_Online_New_Route");
  byte_2587DA7 = 12;
  strcpy((char *)&qword_2587D90, "BannerButton");
  byte_2587DBF = 8;
  strcpy((char *)&qword_2587DA8, "_Dismiss");
  byte_2587DD7 = 3;
  word_2587DC0 = 20319;
  byte_2587DC2 = 75;
  byte_2587DC3 = 0;
  byte_2587DEF = 11;
  strcpy((char *)&qword_2587DD8, "_Still_Here");
  byte_2587E07 = 8;
  strcpy((char *)&qword_2587DF0, "_Cleared");
  qmemcpy(&byte_2587E1F, "\nBannerButton", 13);
  strcpy((char *)&qword_2587E08, "_No_Thanks");
  uint64_t v205 = qword_2587D98;
  qword_2587E30 = 0x1400000000000000;
  *(void *)algn_2587E2C = 0x7373696D7369445FLL;
  qword_2587E48 = 0xF00000000000000;
  qword_2587E40 = 0x4B4F5F6E6F7474;
  int v206 = byte_2587B37;
  if (byte_2587B37 >= 0) {
    size_t v207 = byte_2587B37;
  }
  else {
    size_t v207 = qword_2587B28;
  }
  unint64_t v208 = v207 + 12;
  qword_2587E38 = *(void *)"BannerButton";
  if (v207 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v208 >= 0x17)
  {
    uint64_t v210 = (v208 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v208 | 7) != 0x17) {
      uint64_t v210 = v208 | 7;
    }
    uint64_t v211 = v210 + 1;
    v212 = (char *)operator new(v210 + 1);
    qword_2587E58 = v207 + 12;
    unk_2587E60 = v211 | 0x8000000000000000;
    qword_2587E50 = (uint64_t)v212;
    *((_DWORD *)v212 + 2) = 1852798068;
    *(void *)v212 = *(void *)"BannerButton";
    v209 = v212 + 12;
  }
  else
  {
    BYTE5(qword_2587E58) = 0;
    HIWORD(qword_2587E58) = 0;
    unk_2587E60 = 0;
    byte_2587E67 = v207 + 12;
    strcpy((char *)&qword_2587E50, "BannerButton");
    v209 = (char *)&qword_2587E58 + 4;
    if (!v207) {
      goto LABEL_450;
    }
  }
  if (v206 >= 0) {
    v213 = &qword_2587B20;
  }
  else {
    v213 = (uint64_t *)qword_2587B20;
  }
  memmove(v209, v213, v207);
LABEL_450:
  v209[v207] = 0;
  int v214 = byte_2587B4F;
  if (byte_2587B4F >= 0) {
    size_t v215 = byte_2587B4F;
  }
  else {
    size_t v215 = unk_2587B40;
  }
  unint64_t v216 = v215 + 12;
  if (v215 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v216 >= 0x17)
  {
    uint64_t v218 = (v216 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v216 | 7) != 0x17) {
      uint64_t v218 = v216 | 7;
    }
    uint64_t v219 = v218 + 1;
    v220 = (char *)operator new(v218 + 1);
    qword_2587E70 = v215 + 12;
    unk_2587E78 = v219 | 0x8000000000000000;
    qword_2587E68 = (uint64_t)v220;
    *(void *)v220 = qword_2587D90;
    *((_DWORD *)v220 + 2) = qword_2587D98;
    v217 = v220 + 12;
  }
  else
  {
    qword_2587E70 = 0;
    unk_2587E78 = 0;
    byte_2587E7F = v215 + 12;
    LODWORD(qword_2587E70) = qword_2587D98;
    qword_2587E68 = qword_2587D90;
    v217 = (char *)&qword_2587E70 + 4;
    if (!v215) {
      goto LABEL_464;
    }
  }
  if (v214 >= 0) {
    v221 = &qword_2587B38;
  }
  else {
    v221 = (uint64_t *)qword_2587B38;
  }
  memmove(v217, v221, v215);
LABEL_464:
  v217[v215] = 0;
  int v222 = byte_2587B07;
  if (byte_2587B07 >= 0) {
    size_t v223 = byte_2587B07;
  }
  else {
    size_t v223 = unk_2587AF8;
  }
  unint64_t v224 = v223 + 12;
  if (v223 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v224 >= 0x17)
  {
    uint64_t v226 = (v224 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v224 | 7) != 0x17) {
      uint64_t v226 = v224 | 7;
    }
    uint64_t v227 = v226 + 1;
    v228 = (char *)operator new(v226 + 1);
    qword_2587E88 = v223 + 12;
    unk_2587E90 = v227 | 0x8000000000000000;
    qword_2587E80 = (uint64_t)v228;
    *(void *)v228 = qword_2587D90;
    *((_DWORD *)v228 + 2) = qword_2587D98;
    v225 = v228 + 12;
  }
  else
  {
    qword_2587E88 = 0;
    unk_2587E90 = 0;
    byte_2587E97 = v223 + 12;
    LODWORD(qword_2587E88) = qword_2587D98;
    qword_2587E80 = qword_2587D90;
    v225 = (char *)&qword_2587E88 + 4;
    if (!v223) {
      goto LABEL_478;
    }
  }
  if (v222 >= 0) {
    v229 = &qword_2587AF0;
  }
  else {
    v229 = (uint64_t *)qword_2587AF0;
  }
  memmove(v225, v229, v223);
LABEL_478:
  v225[v223] = 0;
  int v230 = byte_2587DA7;
  if (byte_2587DA7 >= 0) {
    size_t v231 = byte_2587DA7;
  }
  else {
    size_t v231 = v205;
  }
  int v232 = byte_2587B1F;
  if (byte_2587B1F >= 0) {
    size_t v233 = byte_2587B1F;
  }
  else {
    size_t v233 = *((void *)&xmmword_2587B08 + 1);
  }
  unint64_t v234 = v233 + v231;
  if (v233 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v234 <= 0x16)
  {
    v235 = &qword_2587E98;
    qword_2587EA0 = 0;
    unk_2587EA8 = 0;
    qword_2587E98 = 0;
    byte_2587EAF = v233 + v231;
    if (!v231) {
      goto LABEL_491;
    }
    goto LABEL_487;
  }
  uint64_t v242 = (v234 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v234 | 7) != 0x17) {
    uint64_t v242 = v234 | 7;
  }
  uint64_t v243 = v242 + 1;
  v235 = (uint64_t *)operator new(v242 + 1);
  qword_2587EA0 = v233 + v231;
  unk_2587EA8 = v243 | 0x8000000000000000;
  qword_2587E98 = (uint64_t)v235;
  if (v231)
  {
LABEL_487:
    if (v230 >= 0) {
      v236 = &qword_2587D90;
    }
    else {
      v236 = (uint64_t *)qword_2587D90;
    }
    memmove(v235, v236, v231);
  }
LABEL_491:
  v237 = (char *)v235 + v231;
  if (v233)
  {
    if (v232 >= 0) {
      v238 = &xmmword_2587B08;
    }
    else {
      v238 = (long long *)xmmword_2587B08;
    }
    memmove(v237, v238, v233);
  }
  v237[v233] = 0;
  unint64_t v239 = v231 + 11;
  if (v231 + 11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v239 >= 0x17)
  {
    uint64_t v244 = (v239 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v239 | 7) != 0x17) {
      uint64_t v244 = v239 | 7;
    }
    uint64_t v245 = v244 + 1;
    v240 = (uint64_t *)operator new(v244 + 1);
    qword_2587EB8 = v231 + 11;
    unk_2587EC0 = v245 | 0x8000000000000000;
    qword_2587EB0 = (uint64_t)v240;
  }
  else
  {
    v240 = &qword_2587EB0;
    qword_2587EB8 = 0;
    unk_2587EC0 = 0;
    qword_2587EB0 = 0;
    byte_2587EC7 = v231 + 11;
    if (!v231)
    {
      *(_DWORD *)((char *)&qword_2587EB0 + 7) = *(_DWORD *)((char *)&qword_2587DD8 + 7);
      qword_2587EB0 = qword_2587DD8;
      BYTE3(qword_2587EB8) = 0;
      LOBYTE(v241) = 8;
      goto LABEL_512;
    }
  }
  if (v230 >= 0) {
    v246 = &qword_2587D90;
  }
  else {
    v246 = (uint64_t *)qword_2587D90;
  }
  memmove(v240, v246, v231);
  v247 = (char *)v240 + v231;
  int v248 = *(_DWORD *)((char *)&qword_2587DD8 + 7);
  *(void *)v247 = qword_2587DD8;
  *(_DWORD *)(v247 + 7) = v248;
  v247[11] = 0;
  unint64_t v241 = v231 + 8;
  if (v231 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v241 <= 0x16)
  {
LABEL_512:
    v249 = &qword_2587EC8;
    qword_2587ED0 = 0;
    unk_2587ED8 = 0;
    qword_2587EC8 = 0;
    byte_2587EDF = v241;
    if (!v231) {
      goto LABEL_517;
    }
    goto LABEL_513;
  }
  uint64_t v261 = (v241 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v241 | 7) != 0x17) {
    uint64_t v261 = v241 | 7;
  }
  uint64_t v262 = v261 + 1;
  v249 = (uint64_t *)operator new(v261 + 1);
  qword_2587ED0 = v231 + 8;
  unk_2587ED8 = v262 | 0x8000000000000000;
  qword_2587EC8 = (uint64_t)v249;
  if (v231)
  {
LABEL_513:
    if (v230 >= 0) {
      v250 = &qword_2587D90;
    }
    else {
      v250 = (uint64_t *)qword_2587D90;
    }
    memmove(v249, v250, v231);
  }
LABEL_517:
  v251 = (char *)v249 + v231;
  *(void *)v251 = qword_2587DF0;
  v251[8] = 0;
  int v252 = byte_2587E1F;
  if (byte_2587E1F >= 0) {
    size_t v253 = byte_2587E1F;
  }
  else {
    size_t v253 = qword_2587E10;
  }
  unint64_t v254 = v253 + v231;
  if (v253 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v254 <= 0x16)
  {
    v255 = &qword_2587EE0;
    qword_2587EE8 = 0;
    unk_2587EF0 = 0;
    qword_2587EE0 = 0;
    byte_2587EF7 = v253 + v231;
    if (!v231) {
      goto LABEL_527;
    }
    goto LABEL_523;
  }
  uint64_t v259 = (v254 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v254 | 7) != 0x17) {
    uint64_t v259 = v254 | 7;
  }
  uint64_t v260 = v259 + 1;
  v255 = (uint64_t *)operator new(v259 + 1);
  qword_2587EE8 = v253 + v231;
  unk_2587EF0 = v260 | 0x8000000000000000;
  qword_2587EE0 = (uint64_t)v255;
  if (v231)
  {
LABEL_523:
    if (v230 >= 0) {
      v256 = &qword_2587D90;
    }
    else {
      v256 = (uint64_t *)qword_2587D90;
    }
    memmove(v255, v256, v231);
  }
LABEL_527:
  v257 = (char *)v255 + v231;
  if (v253)
  {
    if (v252 >= 0) {
      v258 = &qword_2587E08;
    }
    else {
      v258 = (uint64_t *)qword_2587E08;
    }
    memmove(v257, v258, v253);
  }
  v257[v253] = 0;
  strcpy(&byte_2587F0F, "\n{newroute}");
  strcpy((char *)&qword_2587EF8, "{roadname}");
  strcpy(&byte_2587F27, "\n{count}");
  byte_2587F3F = 7;
  strcpy(&byte_2587F57, "\n{dur}");
  strcpy((char *)&qword_2587F40, "{duration}");
  byte_2587F6F = 5;
  qword_2587F70 = (uint64_t)operator new(0x20uLL);
  unk_2587F78 = v275;
  strcpy((char *)qword_2587F70, "{PleaseProceedWithCaution}");
  byte_2587F9F = 15;
  strcpy((char *)&qword_2587F88, "{UserRouteName}");
  byte_2587FB7 = 20;
  strcpy((char *)&xmmword_2587FA0, "{SuggestedRouteName}");
  byte_2587FCF = 18;
  strcpy(byte_2587FB8, "Speed_Camera_Ahead");
  qword_2587FD0 = (uint64_t)operator new(0x20uLL);
  unk_2587FD8 = v274;
  strcpy((char *)qword_2587FD0, "Red_Light_Camera_Ahead_Spoken");
  qword_2587FE8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2587FF0 = v274;
  strcpy((char *)qword_2587FE8, "Stop_Sign_Camera_Ahead_Spoken");
  qword_2588000 = (uint64_t)operator new(0x28uLL);
  unk_2588008 = v269;
  strcpy((char *)qword_2588000, "Speed_Camera_Ahead_Multiple_Spoken");
  qword_2588018 = (uint64_t)operator new(0x28uLL);
  unk_2588020 = v264;
  strcpy((char *)qword_2588018, "Red_Light_Camera_Ahead_Multiple_Spoken");
  qword_2588030 = (uint64_t)operator new(0x20uLL);
  unk_2588038 = v276;
  strcpy((char *)qword_2588030, "Camera_Ahead_Multiple_Spoken");
  qword_2588048 = (uint64_t)operator new(0x30uLL);
  unk_2588050 = v265;
  strcpy((char *)qword_2588048, "Red_Light_Camera_Speed_Camera_Ahead_Spoken");
  qword_2588060 = (char *)operator new(0x30uLL);
  strcpy(qword_2588060, "Stop_Sign_Camera_Speed_Camera_Ahead_Spoken");
  byte_258808F = 16;
  xmmword_2588068 = v265;
  strcpy(byte_2588078, "_Speed_Limit_Mph");
  byte_25880A7 = 16;
  strcpy(algn_2588090, "_Speed_Limit_Kph");
  byte_25880BF = 11;
  strcpy((char *)&qword_25880A8, "Watch_Speed");
  byte_25880D7 = 4;
  strcpy((char *)&dword_25880C0, "_One");
  byte_25880EF = 4;
  strcpy((char *)&dword_25880D8, "_Two");
  byte_2588107 = 4;
  strcpy((char *)&dword_25880F0, "_Few");
  byte_258811F = 5;
  strcpy((char *)&dword_2588108, "_Many");
  byte_2588137 = 6;
  strcpy((char *)&dword_2588120, "_Other");
  byte_258814F = 4;
  strcpy((char *)&dword_2588138, "_ONE");
  byte_2588167 = 7;
  strcpy((char *)&dword_2588150, "{Speed}");
  byte_258817F = 8;
  strcpy((char *)&qword_2588168, "Dismount");
  byte_2588197 = 4;
  strcpy((char *)&dword_2588180, "Walk");
  byte_25881AF = 5;
  strcpy((char *)&dword_2588198, "Mount");
  byte_25881C7 = 7;
  strcpy((char *)&dword_25881B0, "Remount");
  strcpy(&byte_25881DF, "\t_Crosswalk");
  strcpy((char *)&qword_25881C8, "Walk_Road");
  strcpy(&byte_25881F7, "\n_PLURAL");
  byte_258820F = 7;
  strcpy(&byte_2588227, "\n{description1}");
  strcpy((char *)&qword_2588210, "_SECONDARY");
  byte_258823F = 14;
  byte_2588257 = 14;
  strcpy((char *)&qword_2588240, "{description2}");
  byte_258826F = 21;
  strcpy((char *)&xmmword_2588258, "TWO_ROAD_DESCRIPTIONS");
  byte_2588287 = 17;
  strcpy((char *)&xmmword_2588270, "{SlopePercentage}");
  byte_258829F = 15;
  strcpy((char *)&qword_2588288, "_Protected_Lane");
  strcpy(&byte_25882B7, "\n_Paved_Path");
  strcpy((char *)&qword_25882A0, "_Bike_Path");
  byte_25882CF = 11;
  byte_25882E7 = 15;
  strcpy((char *)&qword_25882D0, "_Dedicated_Lane");
  byte_25882FF = 12;
  strcpy((char *)&qword_25882E8, "_Shared_Path");
  strcpy(&byte_2588317, "\n_UnnamedRoad");
  strcpy((char *)&qword_2588300, "_Bike_Lane");
  byte_258832F = 12;
  byte_2588347 = 5;
  strcpy((char *)&dword_2588330, "_Path");
  byte_258835F = 6;
  strcpy((char *)&dword_2588348, "_Trail");
  strcpy(&byte_2588377, "\t_Plaza");
  strcpy((char *)&qword_2588360, "_Sidewalk");
  byte_258838F = 6;
  byte_25883A7 = 15;
  strcpy((char *)&qword_2588390, "_Moving_Walkway");
  byte_25883BF = 14;
  strcpy((char *)&qword_25883A8, "Two_Stage_Turn");
  byte_25883D7 = 16;
  strcpy((char *)&xmmword_25883C0, "{OptionalPeriod}");
  byte_25883EF = 18;
  strcpy((char *)&xmmword_25883D8, "Advisory_Separator");
  byte_2588407 = 6;
  strcpy((char *)&dword_25883F0, "Period");
  byte_258841F = 21;
  strcpy((char *)&xmmword_2588408, "Advisory_Title_Notice");
  strcpy((char *)&xmmword_2588420, "Advisory_Title_Notices");
  HIBYTE(word_2588436) = 22;
  byte_258844F = 7;
  strcpy((char *)&dword_2588438, "_DETAIL");
  byte_2588467 = 17;
  strcpy((char *)&xmmword_2588450, "_LONG_REGION_LIST");
  byte_258847F = 16;
  strcpy((char *)&xmmword_2588468, "Advisory_Grouped");
  byte_2588497 = 11;
  strcpy((char *)&qword_2588480, "_Advisories");
  qword_2588498 = (uint64_t)operator new(0x20uLL);
  unk_25884A0 = v272;
  strcpy((char *)qword_2588498, "Advisory_WILDFIRE_METADATA_");
  byte_25884C7 = 8;
  strcpy((char *)&qword_25884B0, "Advisory");
  byte_25884DF = 13;
  strcpy((char *)&qword_25884C8, "MPR_NUM_STOPS");
  byte_25884F7 = 17;
  strcpy(byte_25884E0, "EV_CHARGE_STATION");
  byte_258850F = 11;
  strcpy((char *)&qword_25884F8, "_NAMED_CITY");
  byte_2588527 = 5;
  strcpy((char *)&dword_2588510, "_Stop");
  strcpy(&byte_258853F, "\n{StopsCount}");
  strcpy((char *)&qword_2588528, "{CityName}");
  byte_2588557 = 12;
  byte_258856F = 11;
  strcpy((char *)&qword_2588558, "_With_Other");
  byte_2588587 = 15;
  strcpy((char *)&qword_2588570, "{DepartureTime}");
  qword_2588588 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2588590 = v273;
  strcpy((char *)qword_2588588, "Ending_Charge_Station_Port_Availability");
  qword_25885A0 = (uint64_t)operator new(0x28uLL);
  unk_25885A8 = v266;
  strcpy((char *)qword_25885A0, "Ending_Charge_Station_No_Availability");
  qword_25885B8 = (uint64_t)operator new(0x28uLL);
  unk_25885C0 = v269;
  strcpy((char *)qword_25885B8, "Ending_Charge_Station_No_Real_Time");
  byte_25885E7 = 16;
  strcpy(byte_25885D0, "{AvailablePorts}");
  byte_25885FF = 12;
  strcpy((char *)&qword_25885E8, "{TotalPorts}");
  byte_2588617 = 14;
  strcpy((char *)&qword_2588600, "{ManeuverIcon}");
  qword_2588618 = (uint64_t)operator new(0x38uLL);
  unk_2588620 = xmmword_20B9A60;
  strcpy((char *)qword_2588618, "Walking_Distance_ManeuverIcon_PrimaryInstruction");
  qword_2588630 = (uint64_t)operator new(0x20uLL);
  unk_2588638 = v272;
  strcpy((char *)qword_2588630, "Walking_Destination_Unnamed");
  qword_2588648 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2588650 = v274;
  strcpy((char *)qword_2588648, "TrafficDelay_Label_Title_Sign");
  qword_2588660 = (uint64_t)operator new(0x20uLL);
  unk_2588668 = v276;
  strcpy((char *)qword_2588660, "Special_Guidance_Instruction");
  byte_258868F = 2;
  strcpy((char *)&word_2588678, "CZ");
  byte_25886A7 = 3;
  dword_2588690 = 5919811;
  unk_25886BF = 3;
  dword_25886A8 = 6243649;
  byte_25886D7 = 0;
  byte_25886EF = 7;
  strcpy((char *)&dword_25886D8, "TRANSIT");
  byte_2588707 = 7;
  strcpy((char *)&dword_25886F0, "OFFLINE");
  qword_2588708 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2588710 = v264;
  strcpy((char *)qword_2588708, "Advisory_Card_French_Climate_Law_Title");
  qword_2588720 = (uint64_t)operator new(0x30uLL);
  unk_2588728 = xmmword_20B93C0;
  strcpy((char *)qword_2588720, "Advisory_Card_French_Climate_Law_Details");
  qword_2588738 = (uint64_t)operator new(0x30uLL);
  unk_2588740 = v270;
  strcpy((char *)qword_2588738, "French_Climate_Law_Metadata_Weblink_Title");
  qword_2588750 = (uint64_t)operator new(0x20uLL);
  unk_2588758 = v276;
  strcpy((char *)qword_2588750, "{ClimateLawLearnMoreWeblink}");
  byte_258877F = 3;
  dword_2588768 = 4280902;
  qword_2588780 = (uint64_t)operator new(0x70uLL);
  unk_2588788 = xmmword_20E81E0;
  strcpy((char *)qword_2588780, "https://www.vie-publique.fr/loi/278460-loi-22-aout-2021-climat-et-resilience-convention-citoyenne-climat");
  byte_25887AF = 1;
  word_2588798 = 65;
  byte_25887C7 = 1;
  word_25887B0 = 65;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst, "UNKNOWN");
  *(_DWORD *)std::string v282 = 0;
  HIBYTE(v283[0]) = 14;
  strcpy(&v282[8], "ROUTES_THROUGH");
  LODWORD(v283[1]) = 1;
  v284[23] = 9;
  strcpy(v284, "ROUTES_TO");
  LODWORD(v285) = 3;
  HIBYTE(v287) = 11;
  strcpy((char *)v286, "ROUTES_FROM");
  LODWORD(v288) = 2;
  xmmword_2588828 = 0u;
  xmmword_2588838 = 0u;
  dword_2588848 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2588828, (uint64_t)&__dst, (uint64_t)&__dst);
  sub_3A6EF0((uint64_t)&xmmword_2588828, (uint64_t)&v282[8], (uint64_t)&v282[8]);
  sub_3A6EF0((uint64_t)&xmmword_2588828, (uint64_t)v284, (uint64_t)v284);
  sub_3A6EF0((uint64_t)&xmmword_2588828, (uint64_t)v286, (uint64_t)v286);
  if (SHIBYTE(v287) < 0)
  {
    operator delete(v286[0]);
    if ((v284[23] & 0x80000000) == 0)
    {
LABEL_534:
      if ((SHIBYTE(v283[0]) & 0x80000000) == 0) {
        goto LABEL_535;
      }
LABEL_547:
      operator delete(*(void **)&v282[8]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_536;
      }
LABEL_548:
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_536;
    }
  }
  else if ((v284[23] & 0x80000000) == 0)
  {
    goto LABEL_534;
  }
  operator delete(*(void **)v284);
  if (SHIBYTE(v283[0]) < 0) {
    goto LABEL_547;
  }
LABEL_535:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_548;
  }
LABEL_536:
  byte_25887DF = 8;
  strcpy((char *)&qword_25887C8, "any_mode");
  byte_25887F7 = 7;
  strcpy((char *)&dword_25887E0, "cycling");
  byte_258880F = 7;
  strcpy((char *)&dword_25887F8, "driving");
  byte_2588827 = 7;
  strcpy((char *)&dword_2588810, "walking");
}

void sub_603398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3B7]) < 0)
  {
    operator delete((void *)STACK[0x3A0]);
    if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x387]) < 0) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  operator delete((void *)STACK[0x388]);
  if (SLOBYTE(STACK[0x387]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x370]);
    if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (SLOBYTE(STACK[0x357]) < 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)STACK[0x358]);
  if (SLOBYTE(STACK[0x357]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x340]);
    if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x327]) < 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete((void *)STACK[0x328]);
  if (SLOBYTE(STACK[0x327]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x310]);
    if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0)
  {
LABEL_9:
    if (SLOBYTE(STACK[0x2F7]) < 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)STACK[0x2F8]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
  {
LABEL_10:
    operator delete((void *)STACK[0x2E0]);
    if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
  {
LABEL_11:
    if (SLOBYTE(STACK[0x2C7]) < 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x2C8]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
  {
LABEL_12:
    operator delete((void *)STACK[0x2B0]);
    if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0)
  {
LABEL_13:
    if (SLOBYTE(STACK[0x297]) < 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete((void *)STACK[0x298]);
  if (SLOBYTE(STACK[0x297]) < 0)
  {
LABEL_14:
    operator delete((void *)STACK[0x280]);
    if (SLOBYTE(STACK[0x27F]) < 0)
    {
LABEL_36:
      operator delete((void *)STACK[0x268]);
      if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0)
      {
LABEL_37:
        if (SLOBYTE(STACK[0x24F]) < 0)
        {
LABEL_38:
          operator delete((void *)STACK[0x238]);
          if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
          {
LABEL_39:
            if (SLOBYTE(STACK[0x21F]) < 0)
            {
LABEL_40:
              operator delete((void *)STACK[0x208]);
              if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
              {
LABEL_41:
                if (a72 < 0) {
                  goto LABEL_42;
                }
                goto LABEL_44;
              }
LABEL_34:
              operator delete(a73);
              if (a72 < 0)
              {
LABEL_42:
                operator delete(a71);
                if ((a70 & 0x80000000) == 0) {
                  goto LABEL_43;
                }
                goto LABEL_45;
              }
LABEL_44:
              if ((a70 & 0x80000000) == 0) {
LABEL_43:
              }
                _Unwind_Resume(a1);
LABEL_45:
              operator delete(a65);
              _Unwind_Resume(a1);
            }
LABEL_33:
            if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0) {
              goto LABEL_41;
            }
            goto LABEL_34;
          }
LABEL_32:
          operator delete((void *)STACK[0x220]);
          if (SLOBYTE(STACK[0x21F]) < 0) {
            goto LABEL_40;
          }
          goto LABEL_33;
        }
LABEL_31:
        if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0) {
          goto LABEL_39;
        }
        goto LABEL_32;
      }
LABEL_30:
      operator delete((void *)STACK[0x250]);
      if (SLOBYTE(STACK[0x24F]) < 0) {
        goto LABEL_38;
      }
      goto LABEL_31;
    }
LABEL_29:
    if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
LABEL_28:
  if (SLOBYTE(STACK[0x27F]) < 0) {
    goto LABEL_36;
  }
  goto LABEL_29;
}

uint64_t sub_6036F0(uint64_t a1, uint64_t a2)
{
  return nullsub_1(a2);
}

void sub_6036F8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (uint64_t *)nullsub_1(a2);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3 != v5)
  {
    do
    {
      sub_603814(a1, v4);
      uint64_t v6 = *(void *)(v4 + 1064);
      uint64_t v7 = *(void *)(v4 + 1072);
      while (v6 != v7)
      {
        uint64_t v8 = *(void *)(v6 + 1736);
        uint64_t v9 = *(void *)(v6 + 1744);
        while (v8 != v9)
        {
          int v10 = sub_638A18(v8);
          size_t v13 = 0;
          unint64_t v14 = 0;
          long long __p = 0;
          if ((v10 - 71) <= 8)
          {
            uint64_t v11 = operator new(4uLL);
            long long __p = v11;
            *uint64_t v11 = 1;
            size_t v13 = v11 + 1;
            unint64_t v14 = v11 + 1;
          }
          sub_6389CC(v8, (char **)&__p);
          if (__p)
          {
            size_t v13 = __p;
            operator delete(__p);
          }
          v8 += 408;
        }
        v6 += 2400;
      }
      v4 += 12328;
    }
    while (v4 != v5);
  }
}

void sub_6037F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_603814(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 7472);
  for (uint64_t i = *(void *)(a2 + 7480); v2 != i; v2 += 408)
  {
    int v4 = sub_638A18(v2);
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    long long __p = 0;
    if ((v4 - 71) <= 8)
    {
      uint64_t v5 = operator new(4uLL);
      long long __p = v5;
      *uint64_t v5 = 1;
      uint64_t v7 = v5 + 1;
      uint64_t v8 = v5 + 1;
    }
    sub_6389CC(v2, (char **)&__p);
    if (__p)
    {
      uint64_t v7 = __p;
      operator delete(__p);
    }
  }
}

void sub_6038B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_6038D0()
{
  byte_2588867 = 1;
  word_2588850 = 65;
  byte_258887F = 1;
  word_2588868 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_2588910 = 0u;
  *(_OWORD *)&qword_2588920 = 0u;
  dword_2588930 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2588910, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_2588910, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_2588910, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_2588910, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_2588897 = 8;
  strcpy((char *)&qword_2588880, "any_mode");
  byte_25888AF = 7;
  strcpy((char *)&dword_2588898, "cycling");
  byte_25888C7 = 7;
  strcpy((char *)&dword_25888B0, "driving");
  byte_25888DF = 7;
  strcpy((char *)&dword_25888C8, "walking");
  qword_25888E8 = 0;
  qword_25888F0 = 0;
  qword_25888E0 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25888E0 = (uint64_t)v0;
  qword_25888E8 = (uint64_t)(v0 + 9);
  qword_25888F0 = (uint64_t)(v0 + 9);
  qword_25888F8 = 0;
  qword_2588900 = 0;
  unk_2588908 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_2588900 = (uint64_t)(v1 + 9);
  unk_2588908 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25888F8 = (uint64_t)v1;
  return result;
}

void sub_603B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_2588920) {
    sub_20AA28C((void **)qword_2588920);
  }
  uint64_t v37 = (void *)xmmword_2588910;
  *(void *)&xmmword_2588910 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_603C38(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  uint64_t v4 = a1[31];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a1[31];
  }
  else {
    uint64_t v5 = *((void *)a1 + 2);
  }
  uint64_t v6 = a2[31];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a2 + 2);
  }
  if (v5 != v6) {
    return 0;
  }
  int v8 = (const void **)(a1 + 8);
  if (v7 >= 0) {
    uint64_t v9 = a2 + 8;
  }
  else {
    uint64_t v9 = (unsigned __int8 *)*((void *)a2 + 1);
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *((void *)a1 + 2))) {
      return 0;
    }
  }
  else if (a1[31])
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      int v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v4) {
        goto LABEL_19;
      }
    }
    return 0;
  }
LABEL_19:
  uint64_t v11 = a1[55];
  if ((v11 & 0x80u) == 0) {
    uint64_t v12 = a1[55];
  }
  else {
    uint64_t v12 = *((void *)a1 + 5);
  }
  uint64_t v13 = a2[55];
  int v14 = (char)v13;
  if ((v13 & 0x80u) != 0) {
    uint64_t v13 = *((void *)a2 + 5);
  }
  if (v12 != v13) {
    return 0;
  }
  char v15 = (const void **)(a1 + 32);
  if (v14 >= 0) {
    uint64_t v16 = a2 + 32;
  }
  else {
    uint64_t v16 = (unsigned __int8 *)*((void *)a2 + 4);
  }
  if ((v11 & 0x80) != 0)
  {
    if (!memcmp(*v15, v16, *((void *)a1 + 5))) {
      goto LABEL_34;
    }
    return 0;
  }
  if (a1[55])
  {
    while (*(unsigned __int8 *)v15 == *v16)
    {
      char v15 = (const void **)((char *)v15 + 1);
      ++v16;
      if (!--v11) {
        goto LABEL_34;
      }
    }
    return 0;
  }
LABEL_34:
  uint64_t v17 = a1[79];
  if ((v17 & 0x80u) == 0) {
    uint64_t v18 = a1[79];
  }
  else {
    uint64_t v18 = *((void *)a1 + 8);
  }
  uint64_t v19 = a2[79];
  int v20 = (char)v19;
  if ((v19 & 0x80u) != 0) {
    uint64_t v19 = *((void *)a2 + 8);
  }
  if (v18 != v19) {
    return 0;
  }
  uint64_t v21 = (const void **)(a1 + 56);
  size_t v24 = (unsigned __int8 *)*((void *)a2 + 7);
  int v23 = a2 + 56;
  long long v22 = v24;
  if (v20 >= 0) {
    size_t v25 = v23;
  }
  else {
    size_t v25 = v22;
  }
  if ((v17 & 0x80) != 0) {
    return memcmp(*v21, v25, *((void *)a1 + 8)) == 0;
  }
  if (!a1[79]) {
    return 1;
  }
  uint64_t v26 = v17 - 1;
  do
  {
    int v28 = *(unsigned __int8 *)v21;
    uint64_t v21 = (const void **)((char *)v21 + 1);
    int v27 = v28;
    int v30 = *v25++;
    int v29 = v30;
    BOOL v32 = v26-- != 0;
    uint64_t result = v27 == v29;
  }
  while (v27 == v29 && v32);
  return result;
}

uint64_t sub_603E14(uint64_t a1, uint64_t a2, long long *a3, long long *a4)
{
  uint64_t v7 = sub_34CE84(a1, a2);
  if (*((char *)a3 + 23) < 0)
  {
    sub_4200((unsigned char *)(v7 + 184), *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    *(void *)(v7 + 200) = *((void *)a3 + 2);
    *(_OWORD *)(v7 + 184) = v8;
  }
  if (*((char *)a4 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 208), *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v9 = *a4;
    *(void *)(a1 + 224) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 208) = v9;
  }
  char v10 = (unsigned char *)(a1 + 232);
  if (*((char *)a4 + 47) < 0)
  {
    sub_4200(v10, *((void **)a4 + 3), *((void *)a4 + 4));
  }
  else
  {
    long long v11 = *(long long *)((char *)a4 + 24);
    *(void *)(a1 + 248) = *((void *)a4 + 5);
    *(_OWORD *)char v10 = v11;
  }
  return a1;
}

void sub_603EE0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 231) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 207) & 0x80000000) == 0)
    {
LABEL_3:
      sub_30328C(v1);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v1 + 207) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  sub_30328C(v1);
  _Unwind_Resume(a1);
}

void sub_603F3C(_Unwind_Exception *a1)
{
  sub_30328C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_603F54(uint64_t a1, uint64_t a2, long long *a3, long long *a4)
{
  uint64_t v7 = sub_34D040(a1, a2);
  if (*((char *)a3 + 23) < 0)
  {
    sub_4200((unsigned char *)(v7 + 168), *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    *(void *)(v7 + 184) = *((void *)a3 + 2);
    *(_OWORD *)(v7 + 168) = v8;
  }
  if (*((char *)a4 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 192), *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v9 = *a4;
    *(void *)(a1 + 208) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 192) = v9;
  }
  char v10 = (unsigned char *)(a1 + 216);
  if (*((char *)a4 + 47) < 0)
  {
    sub_4200(v10, *((void **)a4 + 3), *((void *)a4 + 4));
  }
  else
  {
    long long v11 = *(long long *)((char *)a4 + 24);
    *(void *)(a1 + 232) = *((void *)a4 + 5);
    *(_OWORD *)char v10 = v11;
  }
  *(unsigned char *)(a1 + 240) = 0;
  *(_WORD *)(a1 + 271) = 0;
  *(unsigned char *)(a1 + 248) = 0;
  *(_WORD *)(a1 + 295) = 0;
  *(_WORD *)(a1 + 319) = 0;
  *(_WORD *)(a1 + 351) = 0;
  *(unsigned char *)(a1 + 328) = 0;
  *(_WORD *)(a1 + 375) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 408) = 0;
  *(unsigned char *)(a1 + 403) = 0;
  *(_DWORD *)(a1 + 399) = 0;
  return a1;
}

void sub_604058(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 215) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 191) & 0x80000000) == 0)
    {
LABEL_3:
      sub_303198(v1);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v1 + 191) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  sub_303198(v1);
  _Unwind_Resume(a1);
}

void sub_6040B4(_Unwind_Exception *a1)
{
  sub_303198(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_6040CC(uint64_t a1, uint64_t a2)
{
  if (!sub_358E24(a1, a2)) {
    return 0;
  }
  uint64_t v4 = *(unsigned __int8 *)(a1 + 191);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 191);
  }
  else {
    uint64_t v5 = *(void *)(a1 + 176);
  }
  uint64_t v6 = *(unsigned __int8 *)(a2 + 191);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 176);
  }
  if (v5 != v6) {
    return 0;
  }
  long long v8 = (const void **)(a1 + 168);
  if (v7 >= 0) {
    long long v9 = (unsigned __int8 *)(a2 + 168);
  }
  else {
    long long v9 = *(unsigned __int8 **)(a2 + 168);
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *(void *)(a1 + 176))) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 191))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      long long v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v4) {
        goto LABEL_17;
      }
    }
    return 0;
  }
LABEL_17:
  if (!sub_524DC((unsigned __int8 *)(a1 + 192), (unsigned __int8 *)(a2 + 192))
    || !sub_603C38((unsigned __int8 *)(a1 + 240), (unsigned __int8 *)(a2 + 240))
    || !sub_603C38((unsigned __int8 *)(a1 + 320), (unsigned __int8 *)(a2 + 320)))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 401))
  {
    if (!*(unsigned char *)(a2 + 401) || *(unsigned __int8 *)(a1 + 400) != *(unsigned __int8 *)(a2 + 400)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 401))
  {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 403))
  {
    if (!*(unsigned char *)(a2 + 403)) {
      goto LABEL_28;
    }
    return 0;
  }
  if (!*(unsigned char *)(a2 + 403) || *(unsigned __int8 *)(a1 + 402) != *(unsigned __int8 *)(a2 + 402)) {
    return 0;
  }
LABEL_28:

  return sub_604218((uint64_t *)(a1 + 408), (uint64_t *)(a2 + 408));
}

uint64_t sub_604218(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *a2;
  if (v3 - *a1 != a2[1] - *a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  while (1)
  {
    uint64_t result = sub_358900(v2, v2);
    if (!result) {
      return result;
    }
    uint64_t v6 = *(unsigned __int8 *)(v2 + 207);
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = *(unsigned __int8 *)(v2 + 207);
    }
    else {
      uint64_t v7 = *(void *)(v2 + 192);
    }
    uint64_t v8 = *(unsigned __int8 *)(v4 + 207);
    int v9 = (char)v8;
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = *(void *)(v4 + 192);
    }
    if (v7 != v8) {
      return 0;
    }
    if (v9 >= 0) {
      char v10 = (unsigned __int8 *)(v4 + 184);
    }
    else {
      char v10 = *(unsigned __int8 **)(v4 + 184);
    }
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)(v2 + 184), v10, *(void *)(v2 + 192))) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v2 + 207))
    {
      uint64_t v11 = 0;
      while (*(unsigned __int8 *)(v2 + v11 + 184) == v10[v11])
      {
        if (v6 == ++v11) {
          goto LABEL_20;
        }
      }
      return 0;
    }
LABEL_20:
    uint64_t result = sub_524DC((unsigned __int8 *)(v2 + 208), (unsigned __int8 *)(v4 + 208));
    if (!result) {
      return result;
    }
    v2 += 256;
    v4 += 256;
    if (v2 == v3) {
      return 1;
    }
  }
}

BOOL sub_604320(uint64_t a1, int a2)
{
  uint64_t v2 = 240;
  if (a2) {
    uint64_t v2 = 320;
  }
  return *(unsigned char *)(a1 + v2) != 0;
}

BOOL sub_604340(uint64_t a1, int a2)
{
  if (a2)
  {
    int v2 = *(char *)(a1 + 351);
    if (v2 < 0) {
      return *(void *)(a1 + 336) != 0;
    }
    return v2 != 0;
  }
  int v2 = *(char *)(a1 + 271);
  if ((v2 & 0x80000000) == 0) {
    return v2 != 0;
  }
  return *(void *)(a1 + 256) != 0;
}

char *sub_604384@<X0>(char *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = result + 328;
  uint64_t v4 = 248;
  if (a2) {
    uint64_t v4 = 328;
  }
  else {
    uint64_t v3 = result + 248;
  }
  if (v3[23] < 0) {
    return (char *)sub_4200((unsigned char *)a3, *(void **)&result[v4], *((void *)v3 + 1));
  }
  *(_OWORD *)a3 = *(_OWORD *)v3;
  *(void *)(a3 + 16) = *((void *)v3 + 2);
  return result;
}

BOOL sub_6043CC(uint64_t a1, int a2)
{
  if (a2)
  {
    int v2 = *(char *)(a1 + 375);
    if (v2 < 0) {
      return *(void *)(a1 + 360) != 0;
    }
    return v2 != 0;
  }
  int v2 = *(char *)(a1 + 295);
  if ((v2 & 0x80000000) == 0) {
    return v2 != 0;
  }
  return *(void *)(a1 + 280) != 0;
}

char *sub_604410@<X0>(char *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = result + 352;
  uint64_t v4 = 272;
  if (a2) {
    uint64_t v4 = 352;
  }
  else {
    uint64_t v3 = result + 272;
  }
  if (v3[23] < 0) {
    return (char *)sub_4200((unsigned char *)a3, *(void **)&result[v4], *((void *)v3 + 1));
  }
  *(_OWORD *)a3 = *(_OWORD *)v3;
  *(void *)(a3 + 16) = *((void *)v3 + 2);
  return result;
}

BOOL sub_604458(uint64_t a1, int a2)
{
  if (a2)
  {
    int v2 = *(char *)(a1 + 399);
    if (v2 < 0) {
      return *(void *)(a1 + 384) != 0;
    }
    return v2 != 0;
  }
  int v2 = *(char *)(a1 + 319);
  if ((v2 & 0x80000000) == 0) {
    return v2 != 0;
  }
  return *(void *)(a1 + 304) != 0;
}

char *sub_60449C@<X0>(char *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = result + 376;
  uint64_t v4 = 296;
  if (a2) {
    uint64_t v4 = 376;
  }
  else {
    uint64_t v3 = result + 296;
  }
  if (v3[23] < 0) {
    return (char *)sub_4200((unsigned char *)a3, *(void **)&result[v4], *((void *)v3 + 1));
  }
  *(_OWORD *)a3 = *(_OWORD *)v3;
  *(void *)(a3 + 16) = *((void *)v3 + 2);
  return result;
}

uint64_t sub_6044E4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 137);
}

uint64_t sub_6044EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(void *)(a1 + 16) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a3 + 24);
  long long v4 = *(_OWORD *)(a3 + 40);
  *(void *)(a1 + 56) = *(void *)(a3 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a3 + 64);
  *(void *)(a1 + 80) = *(void *)(a3 + 80);
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 80) = 0;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a3 + 88);
  long long v5 = *(_OWORD *)(a3 + 96);
  *(void *)(a1 + 112) = *(void *)(a3 + 112);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 96) = 0;
  long long v6 = *(_OWORD *)(a3 + 120);
  *(void *)(a1 + 136) = *(void *)(a3 + 136);
  *(_OWORD *)(a1 + 120) = v6;
  *(void *)(a3 + 128) = 0;
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 120) = 0;
  long long v7 = *(_OWORD *)(a3 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a3 + 160);
  *(_OWORD *)(a1 + 144) = v7;
  long long v8 = *(_OWORD *)(a3 + 168);
  *(void *)(a1 + 184) = *(void *)(a3 + 184);
  *(_OWORD *)(a1 + 168) = v8;
  *(void *)(a3 + 168) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a3 + 192);
  *(void *)(a1 + 208) = *(void *)(a3 + 208);
  *(void *)(a3 + 200) = 0;
  *(void *)(a3 + 208) = 0;
  *(void *)(a3 + 192) = 0;
  uint64_t v9 = *(void *)(a3 + 216);
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 216) = v9;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a3 + 224);
  *(void *)(a1 + 240) = *(void *)(a3 + 240);
  *(void *)(a3 + 224) = 0;
  *(void *)(a3 + 232) = 0;
  *(void *)(a3 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a3 + 248);
  *(void *)(a1 + 264) = *(void *)(a3 + 264);
  *(void *)(a3 + 248) = 0;
  *(void *)(a3 + 256) = 0;
  *(void *)(a3 + 264) = 0;
  *(unsigned char *)(a1 + 272) = *(unsigned char *)(a3 + 272);
  long long v10 = *(_OWORD *)(a3 + 296);
  uint64_t v11 = *(void *)(a3 + 312);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a3 + 280);
  *(_OWORD *)(a1 + 296) = v10;
  *(void *)(a1 + 312) = v11;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a3 + 320);
  *(void *)(a1 + 336) = *(void *)(a3 + 336);
  *(void *)(a3 + 328) = 0;
  *(void *)(a3 + 336) = 0;
  *(void *)(a3 + 320) = 0;
  long long v13 = *(_OWORD *)(a3 + 376);
  long long v12 = *(_OWORD *)(a3 + 392);
  long long v14 = *(_OWORD *)(a3 + 360);
  *(void *)(a1 + 408) = *(void *)(a3 + 408);
  *(_OWORD *)(a1 + 376) = v13;
  *(_OWORD *)(a1 + 392) = v12;
  *(_OWORD *)(a1 + 360) = v14;
  *(_OWORD *)(a1 + 344) = *(_OWORD *)(a3 + 344);
  *(unsigned char *)(a1 + 416) = *(unsigned char *)(a3 + 416);
  LODWORD(v9) = *(unsigned __int8 *)(a2 + 8);
  *(unsigned char *)(a1 + 432) = v9;
  if (v9) {
    *(void *)(a1 + 424) = *(void *)a2;
  }
  *(unsigned char *)(a1 + 463) = 0;
  *(unsigned char *)(a1 + 440) = 0;
  sub_6F30A4(a1 + 464);
  *(_DWORD *)(a1 + 616) = 0;
  *(unsigned char *)(a1 + 620) = 0;
  *(unsigned char *)(a1 + 632) = 0;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 664) = 0;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 640) = off_2439A50;
  *(_WORD *)(a1 + 672) = 0;
  *(unsigned char *)(a1 + 1112) = 0;
  return a1;
}

void sub_6046FC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 463) < 0) {
    operator delete(*(void **)(v1 + 440));
  }
  if (*(unsigned char *)(v1 + 432)) {
    *(unsigned char *)(v1 + 432) = 0;
  }
  sub_29D95C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_604730(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(void *)(a1 + 16) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a3 + 24);
  long long v5 = *(_OWORD *)(a3 + 40);
  *(void *)(a1 + 56) = *(void *)(a3 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a3 + 64);
  *(void *)(a1 + 80) = *(void *)(a3 + 80);
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 80) = 0;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a3 + 88);
  long long v6 = *(_OWORD *)(a3 + 96);
  *(void *)(a1 + 112) = *(void *)(a3 + 112);
  *(_OWORD *)(a1 + 96) = v6;
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 96) = 0;
  long long v7 = *(_OWORD *)(a3 + 120);
  *(void *)(a1 + 136) = *(void *)(a3 + 136);
  *(_OWORD *)(a1 + 120) = v7;
  *(void *)(a3 + 128) = 0;
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 120) = 0;
  long long v8 = *(_OWORD *)(a3 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a3 + 160);
  *(_OWORD *)(a1 + 144) = v8;
  long long v9 = *(_OWORD *)(a3 + 168);
  *(void *)(a1 + 184) = *(void *)(a3 + 184);
  *(_OWORD *)(a1 + 168) = v9;
  *(void *)(a3 + 168) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a3 + 192);
  *(void *)(a1 + 208) = *(void *)(a3 + 208);
  *(void *)(a3 + 200) = 0;
  *(void *)(a3 + 208) = 0;
  *(void *)(a3 + 192) = 0;
  uint64_t v10 = *(void *)(a3 + 216);
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 216) = v10;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a3 + 224);
  *(void *)(a1 + 240) = *(void *)(a3 + 240);
  *(void *)(a3 + 224) = 0;
  *(void *)(a3 + 232) = 0;
  *(void *)(a3 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a3 + 248);
  *(void *)(a1 + 264) = *(void *)(a3 + 264);
  *(void *)(a3 + 248) = 0;
  *(void *)(a3 + 256) = 0;
  *(void *)(a3 + 264) = 0;
  *(unsigned char *)(a1 + 272) = *(unsigned char *)(a3 + 272);
  long long v11 = *(_OWORD *)(a3 + 296);
  uint64_t v12 = *(void *)(a3 + 312);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a3 + 280);
  *(_OWORD *)(a1 + 296) = v11;
  *(void *)(a1 + 312) = v12;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a3 + 320);
  *(void *)(a1 + 336) = *(void *)(a3 + 336);
  *(void *)(a3 + 328) = 0;
  *(void *)(a3 + 336) = 0;
  *(void *)(a3 + 320) = 0;
  long long v14 = *(_OWORD *)(a3 + 376);
  long long v13 = *(_OWORD *)(a3 + 392);
  long long v15 = *(_OWORD *)(a3 + 360);
  *(void *)(a1 + 408) = *(void *)(a3 + 408);
  *(_OWORD *)(a1 + 376) = v14;
  *(_OWORD *)(a1 + 392) = v13;
  *(_OWORD *)(a1 + 360) = v15;
  *(_OWORD *)(a1 + 344) = *(_OWORD *)(a3 + 344);
  *(unsigned char *)(a1 + 416) = *(unsigned char *)(a3 + 416);
  LODWORD(v10) = *(unsigned __int8 *)(a2 + 8);
  *(unsigned char *)(a1 + 432) = v10;
  if (v10) {
    *(void *)(a1 + 424) = *(void *)a2;
  }
  long long v16 = *a4;
  *(void *)(a1 + 456) = *((void *)a4 + 2);
  *(_OWORD *)(a1 + 440) = v16;
  *((void *)a4 + 1) = 0;
  *((void *)a4 + 2) = 0;
  *(void *)a4 = 0;
  sub_6F30A4(a1 + 464);
  *(_DWORD *)(a1 + 616) = 0;
  *(unsigned char *)(a1 + 620) = 0;
  *(unsigned char *)(a1 + 632) = 0;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 664) = 0;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 640) = off_2439A50;
  *(_WORD *)(a1 + 672) = 0;
  *(unsigned char *)(a1 + 1112) = 0;
  return a1;
}

void sub_60495C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 463) < 0) {
    operator delete(*v2);
  }
  if (*(unsigned char *)(v1 + 432)) {
    *(unsigned char *)(v1 + 432) = 0;
  }
  sub_29D95C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_604990(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, int a5)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(void *)(a1 + 16) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a3 + 24);
  long long v7 = *(_OWORD *)(a3 + 40);
  *(void *)(a1 + 56) = *(void *)(a3 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a3 + 64);
  *(void *)(a1 + 80) = *(void *)(a3 + 80);
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 80) = 0;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a3 + 88);
  long long v8 = *(_OWORD *)(a3 + 96);
  *(void *)(a1 + 112) = *(void *)(a3 + 112);
  *(_OWORD *)(a1 + 96) = v8;
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 96) = 0;
  long long v9 = *(_OWORD *)(a3 + 120);
  *(void *)(a1 + 136) = *(void *)(a3 + 136);
  *(_OWORD *)(a1 + 120) = v9;
  *(void *)(a3 + 128) = 0;
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 120) = 0;
  long long v10 = *(_OWORD *)(a3 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a3 + 160);
  *(_OWORD *)(a1 + 144) = v10;
  long long v11 = *(_OWORD *)(a3 + 168);
  *(void *)(a1 + 184) = *(void *)(a3 + 184);
  *(_OWORD *)(a1 + 168) = v11;
  *(void *)(a3 + 168) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a3 + 192);
  *(void *)(a1 + 208) = *(void *)(a3 + 208);
  *(void *)(a3 + 200) = 0;
  *(void *)(a3 + 208) = 0;
  *(void *)(a3 + 192) = 0;
  uint64_t v12 = *(void *)(a3 + 216);
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 216) = v12;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a3 + 224);
  *(void *)(a1 + 240) = *(void *)(a3 + 240);
  *(void *)(a3 + 224) = 0;
  *(void *)(a3 + 232) = 0;
  *(void *)(a3 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a3 + 248);
  *(void *)(a1 + 264) = *(void *)(a3 + 264);
  *(void *)(a3 + 248) = 0;
  *(void *)(a3 + 256) = 0;
  *(void *)(a3 + 264) = 0;
  *(unsigned char *)(a1 + 272) = *(unsigned char *)(a3 + 272);
  long long v13 = *(_OWORD *)(a3 + 296);
  uint64_t v14 = *(void *)(a3 + 312);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a3 + 280);
  *(_OWORD *)(a1 + 296) = v13;
  *(void *)(a1 + 312) = v14;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a3 + 320);
  *(void *)(a1 + 336) = *(void *)(a3 + 336);
  *(void *)(a3 + 328) = 0;
  *(void *)(a3 + 336) = 0;
  *(void *)(a3 + 320) = 0;
  long long v16 = *(_OWORD *)(a3 + 376);
  long long v15 = *(_OWORD *)(a3 + 392);
  long long v17 = *(_OWORD *)(a3 + 360);
  *(void *)(a1 + 408) = *(void *)(a3 + 408);
  *(_OWORD *)(a1 + 376) = v16;
  *(_OWORD *)(a1 + 392) = v15;
  *(_OWORD *)(a1 + 360) = v17;
  *(_OWORD *)(a1 + 344) = *(_OWORD *)(a3 + 344);
  *(unsigned char *)(a1 + 416) = *(unsigned char *)(a3 + 416);
  LODWORD(v12) = *(unsigned __int8 *)(a2 + 8);
  *(unsigned char *)(a1 + 432) = v12;
  if (v12) {
    *(void *)(a1 + 424) = *(void *)a2;
  }
  long long v18 = *a4;
  *(void *)(a1 + 456) = *((void *)a4 + 2);
  *(_OWORD *)(a1 + 440) = v18;
  *((void *)a4 + 1) = 0;
  *((void *)a4 + 2) = 0;
  *(void *)a4 = 0;
  sub_6F30A4(a1 + 464);
  *(_DWORD *)(a1 + 616) = a5;
  *(unsigned char *)(a1 + 620) = 1;
  *(unsigned char *)(a1 + 632) = 0;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 664) = 0;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 640) = off_2439A50;
  *(_WORD *)(a1 + 672) = 0;
  *(unsigned char *)(a1 + 1112) = 0;
  return a1;
}

void sub_604BC4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 463) < 0) {
    operator delete(*v2);
  }
  if (*(unsigned char *)(v1 + 432)) {
    *(unsigned char *)(v1 + 432) = 0;
  }
  sub_29D95C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_604BF8(uint64_t result, uint64_t a2, uint64_t a3, long long *a4, long long *a5, int a6, uint64_t a7)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(_OWORD *)uint64_t result = *(_OWORD *)a3;
  *(void *)(result + 16) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(_OWORD *)(result + 24) = *(_OWORD *)(a3 + 24);
  long long v7 = *(_OWORD *)(a3 + 40);
  *(void *)(result + 56) = *(void *)(a3 + 56);
  *(_OWORD *)(result + 40) = v7;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(result + 64) = 0;
  *(void *)(result + 72) = 0;
  *(void *)(result + 80) = 0;
  *(_OWORD *)(result + 64) = *(_OWORD *)(a3 + 64);
  *(void *)(result + 80) = *(void *)(a3 + 80);
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 80) = 0;
  *(_DWORD *)(result + 88) = *(_DWORD *)(a3 + 88);
  long long v8 = *(_OWORD *)(a3 + 96);
  *(void *)(result + 112) = *(void *)(a3 + 112);
  *(_OWORD *)(result + 96) = v8;
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 96) = 0;
  long long v9 = *(_OWORD *)(a3 + 120);
  *(void *)(result + 136) = *(void *)(a3 + 136);
  *(_OWORD *)(result + 120) = v9;
  *(void *)(a3 + 128) = 0;
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 120) = 0;
  long long v10 = *(_OWORD *)(a3 + 144);
  *(_DWORD *)(result + 160) = *(_DWORD *)(a3 + 160);
  *(_OWORD *)(result + 144) = v10;
  long long v11 = *(_OWORD *)(a3 + 168);
  *(void *)(result + 184) = *(void *)(a3 + 184);
  *(_OWORD *)(result + 168) = v11;
  *(void *)(a3 + 168) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  *(void *)(result + 192) = 0;
  *(void *)(result + 200) = 0;
  *(void *)(result + 208) = 0;
  *(_OWORD *)(result + 192) = *(_OWORD *)(a3 + 192);
  *(void *)(result + 208) = *(void *)(a3 + 208);
  *(void *)(a3 + 200) = 0;
  *(void *)(a3 + 208) = 0;
  *(void *)(a3 + 192) = 0;
  uint64_t v12 = *(void *)(a3 + 216);
  *(void *)(result + 232) = 0;
  *(void *)(result + 240) = 0;
  *(void *)(result + 216) = v12;
  *(void *)(result + 224) = 0;
  *(_OWORD *)(result + 224) = *(_OWORD *)(a3 + 224);
  *(void *)(result + 240) = *(void *)(a3 + 240);
  *(void *)(a3 + 224) = 0;
  *(void *)(a3 + 232) = 0;
  *(void *)(a3 + 240) = 0;
  *(void *)(result + 248) = 0;
  *(void *)(result + 256) = 0;
  *(void *)(result + 264) = 0;
  *(_OWORD *)(result + 248) = *(_OWORD *)(a3 + 248);
  *(void *)(result + 264) = *(void *)(a3 + 264);
  *(void *)(a3 + 248) = 0;
  *(void *)(a3 + 256) = 0;
  *(void *)(a3 + 264) = 0;
  *(unsigned char *)(result + 272) = *(unsigned char *)(a3 + 272);
  long long v13 = *(_OWORD *)(a3 + 296);
  uint64_t v14 = *(void *)(a3 + 312);
  *(_OWORD *)(result + 280) = *(_OWORD *)(a3 + 280);
  *(_OWORD *)(result + 296) = v13;
  *(void *)(result + 312) = v14;
  *(void *)(result + 320) = 0;
  *(void *)(result + 328) = 0;
  *(void *)(result + 336) = 0;
  *(_OWORD *)(result + 320) = *(_OWORD *)(a3 + 320);
  *(void *)(result + 336) = *(void *)(a3 + 336);
  *(void *)(a3 + 328) = 0;
  *(void *)(a3 + 336) = 0;
  *(void *)(a3 + 320) = 0;
  long long v16 = *(_OWORD *)(a3 + 376);
  long long v15 = *(_OWORD *)(a3 + 392);
  long long v17 = *(_OWORD *)(a3 + 360);
  *(void *)(result + 408) = *(void *)(a3 + 408);
  *(_OWORD *)(result + 376) = v16;
  *(_OWORD *)(result + 392) = v15;
  *(_OWORD *)(result + 360) = v17;
  *(_OWORD *)(result + 344) = *(_OWORD *)(a3 + 344);
  *(unsigned char *)(result + 416) = *(unsigned char *)(a3 + 416);
  LODWORD(v12) = *(unsigned __int8 *)(a2 + 8);
  *(unsigned char *)(result + 432) = v12;
  if (v12) {
    *(void *)(result + 424) = *(void *)a2;
  }
  long long v18 = *a4;
  *(void *)(result + 456) = *((void *)a4 + 2);
  *(_OWORD *)(result + 440) = v18;
  *((void *)a4 + 1) = 0;
  *((void *)a4 + 2) = 0;
  *(void *)a4 = 0;
  long long v19 = *a5;
  *(void *)(result + 480) = *((void *)a5 + 2);
  *(_OWORD *)(result + 464) = v19;
  *((void *)a5 + 1) = 0;
  *((void *)a5 + 2) = 0;
  *(void *)a5 = 0;
  *(void *)(result + 488) = *((void *)a5 + 3);
  long long v20 = a5[2];
  *(void *)(result + 512) = *((void *)a5 + 6);
  *(_OWORD *)(result + 496) = v20;
  *((void *)a5 + 5) = 0;
  *((void *)a5 + 6) = 0;
  *((void *)a5 + 4) = 0;
  *(void *)(result + 520) = *((void *)a5 + 7);
  *(_DWORD *)(result + 528) = *((_DWORD *)a5 + 16);
  long long v21 = *(long long *)((char *)a5 + 72);
  *(void *)(result + 552) = *((void *)a5 + 11);
  *(_OWORD *)(result + 536) = v21;
  *((void *)a5 + 10) = 0;
  *((void *)a5 + 11) = 0;
  *((void *)a5 + 9) = 0;
  long long v22 = a5[6];
  *(void *)(result + 576) = *((void *)a5 + 14);
  *(_OWORD *)(result + 560) = v22;
  *((void *)a5 + 13) = 0;
  *((void *)a5 + 14) = 0;
  *((void *)a5 + 12) = 0;
  *(_DWORD *)(result + 584) = *((_DWORD *)a5 + 30);
  long long v23 = a5[8];
  *(void *)(result + 608) = *((void *)a5 + 18);
  *(_OWORD *)(result + 592) = v23;
  *((void *)a5 + 17) = 0;
  *((void *)a5 + 18) = 0;
  *((void *)a5 + 16) = 0;
  *(_DWORD *)(result + 616) = a6;
  *(unsigned char *)(result + 620) = 1;
  int v24 = *(unsigned __int8 *)(a7 + 8);
  *(unsigned char *)(result + 632) = v24;
  if (v24) {
    *(void *)(result + 624) = *(void *)a7;
  }
  *(void *)(result + 656) = 0;
  *(void *)(result + 648) = 0;
  *(void *)(result + 664) = 0;
  *(void *)(result + 640) = off_2439A50;
  *(_WORD *)(result + 672) = 0;
  *(unsigned char *)(result + 1112) = 0;
  return result;
}

uint64_t sub_604EA8(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 432))
  {
    if (*(unsigned char *)(a2 + 432)) {
      return 1;
    }
    return sub_358008(a1, a2);
  }
  if (*(unsigned char *)(a2 + 432))
  {
    uint64_t v2 = *(void *)(a1 + 424);
    uint64_t v3 = *(void *)(a2 + 424);
    if (v2 != v3) {
      return v2 < v3;
    }
    return sub_358008(a1, a2);
  }
  return 0;
}

BOOL sub_604EE8(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_357E98(a1, a2);
  if (result)
  {
    if (*(unsigned char *)(a1 + 432))
    {
      if (!*(unsigned char *)(a2 + 432) || *(void *)(a1 + 424) != *(void *)(a2 + 424)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(a2 + 432))
    {
      return 0;
    }
    uint64_t v5 = *(unsigned __int8 *)(a1 + 463);
    if ((v5 & 0x80u) == 0) {
      uint64_t v6 = *(unsigned __int8 *)(a1 + 463);
    }
    else {
      uint64_t v6 = *(void *)(a1 + 448);
    }
    uint64_t v7 = *(unsigned __int8 *)(a2 + 463);
    int v8 = (char)v7;
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *(void *)(a2 + 448);
    }
    if (v6 != v7) {
      return 0;
    }
    long long v9 = (const void **)(a1 + 440);
    if (v8 >= 0) {
      long long v10 = (unsigned __int8 *)(a2 + 440);
    }
    else {
      long long v10 = *(unsigned __int8 **)(a2 + 440);
    }
    if ((v5 & 0x80) != 0)
    {
      if (memcmp(*v9, v10, *(void *)(a1 + 448))) {
        return 0;
      }
    }
    else if (*(unsigned char *)(a1 + 463))
    {
      while (*(unsigned __int8 *)v9 == *v10)
      {
        long long v9 = (const void **)((char *)v9 + 1);
        ++v10;
        if (!--v5) {
          goto LABEL_22;
        }
      }
      return 0;
    }
LABEL_22:
    int v11 = *(unsigned __int8 *)(a2 + 1112);
    if (*(unsigned char *)(a1 + 1112))
    {
      if (!*(unsigned char *)(a2 + 1112)) {
        return 0;
      }
      if (sub_6040CC(a1 + 680, a2 + 680)) {
        goto LABEL_27;
      }
      int v11 = *(unsigned __int8 *)(a1 + 1112) | *(unsigned __int8 *)(a2 + 1112);
    }
    if (v11) {
      return 0;
    }
LABEL_27:
    if (*(unsigned char *)(a1 + 620))
    {
      if (!*(unsigned char *)(a2 + 620) || *(_DWORD *)(a1 + 616) != *(_DWORD *)(a2 + 616)) {
        return 0;
      }
LABEL_32:
      BOOL result = *(unsigned char *)(a2 + 632) == 0;
      if (!*(unsigned char *)(a1 + 632)) {
        return result;
      }
      return *(unsigned char *)(a2 + 632) && *(void *)(a1 + 624) == *(void *)(a2 + 624);
    }
    if (!*(unsigned char *)(a2 + 620)) {
      goto LABEL_32;
    }
    return 0;
  }
  return result;
}

BOOL sub_605050(uint64_t a1, uint64_t a2)
{
  return !sub_604EE8(a1, a2);
}

char *sub_60506C@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[63] < 0) {
    return (char *)sub_4200((unsigned char *)a2, *((void **)result + 5), *((void *)result + 6));
  }
  *(_OWORD *)a2 = *(_OWORD *)(result + 40);
  *(void *)(a2 + 16) = *((void *)result + 7);
  return result;
}

void sub_605098(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 63) < 0) {
    sub_4200(&__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
  }
  else {
    std::string __p = *(std::string *)(a1 + 40);
  }
  if (byte_258B71F >= 0) {
    uint64_t v3 = (const std::string::value_type *)&xmmword_258B708;
  }
  else {
    uint64_t v3 = (const std::string::value_type *)xmmword_258B708;
  }
  if (byte_258B71F >= 0) {
    std::string::size_type v4 = byte_258B71F;
  }
  else {
    std::string::size_type v4 = *((void *)&xmmword_258B708 + 1);
  }
  uint64_t v5 = std::string::insert(&__p, 0, v3, v4);
  *a2 = *v5;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_605150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_60516C(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v8 = a1 + 464;
  if (sub_6F2FD8(a1 + 464) && a3)
  {
    if (a2)
    {
      sub_6F3178(a4, v8);
      return;
    }
    if ((*(char *)(a1 + 615) & 0x80000000) == 0)
    {
      *(_OWORD *)a4 = *(_OWORD *)(a1 + 592);
      uint64_t v13 = *(void *)(a1 + 608);
LABEL_29:
      a4[2] = v13;
      return;
    }
    uint64_t v14 = *(void **)(a1 + 592);
    unint64_t v15 = *(void *)(a1 + 600);
    goto LABEL_31;
  }
  int v9 = *(char *)(a1 + 119);
  if (v9 >= 0) {
    long long v10 = (char *)(a1 + 96);
  }
  else {
    long long v10 = *(char **)(a1 + 96);
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 119);
  }
  else {
    uint64_t v11 = *(void *)(a1 + 104);
  }
  if (!v11)
  {
LABEL_19:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  while (1)
  {
    __darwin_ct_rune_t v12 = *v10;
    if (v12 < 0) {
      break;
    }
    if ((_DefaultRuneLocale.__runetype[v12] & 0x4000) == 0) {
      goto LABEL_22;
    }
LABEL_18:
    ++v10;
    if (!--v11) {
      goto LABEL_19;
    }
  }
  if (__maskrune(v12, 0x4000uLL)) {
    goto LABEL_18;
  }
LABEL_22:
  if (!a2)
  {
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    {
      *(_OWORD *)a4 = *(_OWORD *)(a1 + 96);
      uint64_t v13 = *(void *)(a1 + 112);
      goto LABEL_29;
    }
    uint64_t v14 = *(void **)(a1 + 96);
    unint64_t v15 = *(void *)(a1 + 104);
LABEL_31:
    sub_4200(a4, v14, v15);
    return;
  }

  sub_6FB9D4(a1 + 96, (uint64_t)a4);
}

char *sub_60531C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (char *)(a1 + 464);
  BOOL result = (char *)sub_6F2FD8(a1 + 464);
  if (result && a2)
  {
    return sub_6F3150(v6, a3);
  }
  int v8 = *(char *)(a1 + 119);
  if (v8 >= 0) {
    int v9 = (char *)(a1 + 96);
  }
  else {
    int v9 = *(char **)(a1 + 96);
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(a1 + 119);
  }
  else {
    uint64_t v10 = *(void *)(a1 + 104);
  }
  if (!v10)
  {
LABEL_18:
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    return result;
  }
  while (1)
  {
    __darwin_ct_rune_t v11 = *v9;
    if (v11 < 0) {
      break;
    }
    BOOL result = (char *)(_DefaultRuneLocale.__runetype[v11] & 0x4000);
    if (!result) {
      goto LABEL_19;
    }
LABEL_17:
    ++v9;
    if (!--v10) {
      goto LABEL_18;
    }
  }
  BOOL result = (char *)__maskrune(v11, 0x4000uLL);
  if (result) {
    goto LABEL_17;
  }
LABEL_19:
  if (*(char *)(a1 + 119) < 0)
  {
    __darwin_ct_rune_t v12 = *(void **)(a1 + 96);
    unint64_t v13 = *(void *)(a1 + 104);
    return (char *)sub_4200((unsigned char *)a3, v12, v13);
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)(a1 + 96);
    *(void *)(a3 + 16) = *(void *)(a1 + 112);
  }
  return result;
}

BOOL sub_605454(uint64_t a1)
{
  return *(unsigned char *)(a1 + 1112) && *(void *)(a1 + 1088) != *(void *)(a1 + 1096);
}

BOOL sub_605478(uint64_t a1)
{
  return *(unsigned char *)(a1 + 1112) && *(void *)(a1 + 1088) != *(void *)(a1 + 1096) && *(unsigned char *)(a1 + 680) == 2;
}

BOOL sub_6054A8(uint64_t a1)
{
  return *(unsigned char *)(a1 + 1112) && *(void *)(a1 + 1088) != *(void *)(a1 + 1096) && *(unsigned char *)(a1 + 680) == 3;
}

uint64_t sub_6054D8(uint64_t a1, _DWORD *a2, double a3, double a4, double a5, double a6)
{
  if (!*(unsigned char *)(a1 + 1112))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  uint64_t v6 = *(uint64_t **)(a1 + 1088);
  uint64_t v7 = *(uint64_t **)(a1 + 1096);
  if (v6 == v7) {
    return 0;
  }
  unsigned int v8 = a2[1];
  LODWORD(a4) = *a2;
  double v9 = (double)*(unint64_t *)&a4;
LABEL_5:
  for (uint64_t i = *v6; ; i += 24)
  {
    if (i == v6[1])
    {
      v6 += 32;
      if (v6 == v7) {
        return 0;
      }
      goto LABEL_5;
    }
    __darwin_ct_rune_t v11 = *(void **)i;
    __darwin_ct_rune_t v12 = *(void **)(i + 8);
    if (*(void **)i != v12)
    {
      int v13 = 0;
      do
      {
        uint64_t v14 = (_DWORD *)v11[1];
        unint64_t v15 = (_DWORD *)(*v11 + 12);
        if ((_DWORD *)*v11 != v14 && v15 != v14)
        {
          do
          {
            unsigned int v17 = *(v15 - 2);
            unsigned int v18 = v15[1];
            if (v17 >= v8)
            {
              if (v18 < v8)
              {
LABEL_23:
                LODWORD(a5) = *v15;
                LODWORD(a6) = *(v15 - 3);
                a6 = (double)*(unint64_t *)&a6;
                a5 = ((double)v8 - (double)v17) / ((double)v18 - (double)v17) * ((double)*(unint64_t *)&a5 - a6)
                   + a6;
                if (a5 < v9) {
                  v13 ^= 1u;
                }
              }
            }
            else if (v18 >= v8)
            {
              goto LABEL_23;
            }
            v15 += 3;
          }
          while (v15 != v14);
        }
        v11 += 3;
      }
      while (v11 != v12);
      if (v13) {
        break;
      }
    }
  }
  return 1;
}

BOOL sub_605634(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1112) && *(void *)(a1 + 1088) != *(void *)(a1 + 1096)) {
    return 0;
  }
  if (sub_358878(a1)) {
    return *(unsigned char *)(a1 + 673) != 0;
  }
  return 1;
}

uint64_t sub_6056A4(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 1452)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 216) == 2) {
    return 0;
  }
  int v4 = *(_DWORD *)(a1 + 88);
  if (v4) {
    BOOL v5 = v4 == 4;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return *(unsigned char *)(a1 + 672) != 0;
  }
  if (v4 != 1) {
    return 0;
  }
  uint64_t result = sub_35884C(a1);
  if (result) {
    return *(unsigned char *)(a1 + 672) && *(unsigned char *)(a2 + 1452) != 0;
  }
  return result;
}

uint64_t sub_605758(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(result + 1112) || !*(unsigned char *)(a2 + 1112))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  uint64_t v2 = *(void *)(a2 + 1088);
  uint64_t v3 = *(void *)(a2 + 1096);
  if (v2 != v3)
  {
    uint64_t v4 = result;
    BOOL v5 = (uint64_t *)(result + 1088);
    unint64_t v6 = *(void *)(result + 1096);
    while (1)
    {
      uint64_t v7 = *v5;
      if (*v5 != v6) {
        break;
      }
LABEL_6:
      uint64_t result = *(void *)(v4 + 1096);
      if (v6 == result)
      {
        if (v6 >= *(void *)(v4 + 1104))
        {
          uint64_t result = sub_605A24(v5, v2);
          *(void *)(v4 + 1096) = result;
          v2 += 256;
          unint64_t v6 = result;
          if (v2 == v3) {
            return result;
          }
        }
        else
        {
          sub_4BEF94(v6, v2);
          uint64_t result = v6 + 256;
          *(void *)(v4 + 1096) = v6 + 256;
          *(void *)(v4 + 1096) = v6 + 256;
          v2 += 256;
          v6 += 256;
          if (v2 == v3) {
            return result;
          }
        }
      }
      else
      {
        v2 += 256;
        unint64_t v6 = *(void *)(v4 + 1096);
        if (v2 == v3) {
          return result;
        }
      }
    }
    while (1)
    {
      if (!sub_358900(v7, v7)) {
        goto LABEL_11;
      }
      uint64_t v8 = *(unsigned __int8 *)(v7 + 207);
      if ((v8 & 0x80u) == 0) {
        uint64_t v9 = *(unsigned __int8 *)(v7 + 207);
      }
      else {
        uint64_t v9 = *(void *)(v7 + 192);
      }
      uint64_t v10 = *(unsigned __int8 *)(v2 + 207);
      int v11 = (char)v10;
      if ((v10 & 0x80u) != 0) {
        uint64_t v10 = *(void *)(v2 + 192);
      }
      if (v9 != v10) {
        goto LABEL_11;
      }
      if (v11 >= 0) {
        __darwin_ct_rune_t v12 = (unsigned __int8 *)(v2 + 184);
      }
      else {
        __darwin_ct_rune_t v12 = *(unsigned __int8 **)(v2 + 184);
      }
      if ((v8 & 0x80) != 0)
      {
        if (memcmp(*(const void **)(v7 + 184), v12, *(void *)(v7 + 192))) {
          goto LABEL_11;
        }
      }
      else if (*(unsigned char *)(v7 + 207))
      {
        uint64_t v13 = 0;
        while (*(unsigned __int8 *)(v7 + v13 + 184) == v12[v13])
        {
          if (v8 == ++v13) {
            goto LABEL_27;
          }
        }
        goto LABEL_11;
      }
LABEL_27:
      uint64_t v14 = *(unsigned __int8 *)(v7 + 231);
      if ((v14 & 0x80u) == 0) {
        uint64_t v15 = *(unsigned __int8 *)(v7 + 231);
      }
      else {
        uint64_t v15 = *(void *)(v7 + 216);
      }
      uint64_t v16 = *(unsigned __int8 *)(v2 + 231);
      int v17 = (char)v16;
      if ((v16 & 0x80u) != 0) {
        uint64_t v16 = *(void *)(v2 + 216);
      }
      if (v15 != v16) {
        goto LABEL_11;
      }
      if (v17 >= 0) {
        unsigned int v18 = (unsigned __int8 *)(v2 + 208);
      }
      else {
        unsigned int v18 = *(unsigned __int8 **)(v2 + 208);
      }
      if ((v14 & 0x80) != 0)
      {
        if (memcmp(*(const void **)(v7 + 208), v18, *(void *)(v7 + 216))) {
          goto LABEL_11;
        }
      }
      else if (*(unsigned char *)(v7 + 231))
      {
        uint64_t v19 = 0;
        while (*(unsigned __int8 *)(v7 + v19 + 208) == v18[v19])
        {
          if (v14 == ++v19) {
            goto LABEL_43;
          }
        }
        goto LABEL_11;
      }
LABEL_43:
      uint64_t v20 = *(unsigned __int8 *)(v7 + 255);
      if ((v20 & 0x80u) == 0) {
        uint64_t v21 = *(unsigned __int8 *)(v7 + 255);
      }
      else {
        uint64_t v21 = *(void *)(v7 + 240);
      }
      uint64_t v22 = *(unsigned __int8 *)(v2 + 255);
      int v23 = (char)v22;
      if ((v22 & 0x80u) != 0) {
        uint64_t v22 = *(void *)(v2 + 240);
      }
      if (v21 == v22)
      {
        if (v23 >= 0) {
          int v24 = (unsigned __int8 *)(v2 + 232);
        }
        else {
          int v24 = *(unsigned __int8 **)(v2 + 232);
        }
        if ((v20 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)(v7 + 232), v24, *(void *)(v7 + 240)))
          {
LABEL_5:
            unint64_t v6 = v7;
            goto LABEL_6;
          }
        }
        else
        {
          if (!*(unsigned char *)(v7 + 255)) {
            goto LABEL_5;
          }
          uint64_t v25 = 0;
          while (*(unsigned __int8 *)(v7 + v25 + 232) == v24[v25])
          {
            if (v20 == ++v25) {
              goto LABEL_5;
            }
          }
        }
      }
LABEL_11:
      v7 += 256;
      if (v7 == v6) {
        goto LABEL_6;
      }
    }
  }
  return result;
}

void sub_605A1C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 1096) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_605A24(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 8;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 56) {
    sub_2E00();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 7 > v4) {
    unint64_t v4 = v6 >> 7;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFF00) {
    unint64_t v7 = 0xFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v7)
  {
    if (HIBYTE(v7)) {
      sub_188D718();
    }
    uint64_t v8 = (char *)operator new(v7 << 8);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v13 = (uint64_t)&v8[256 * v3];
  uint64_t v14 = &v8[256 * v7];
  sub_4BEF94(v13, a2);
  sub_605BA0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, v13, v13);
  uint64_t v9 = (void *)*a1;
  uint64_t v10 = a1[1];
  *a1 = v11;
  a1[1] = v13 + 256;
  a1[2] = (uint64_t)v14;
  while ((void *)v10 != v9)
  {
    if (*(char *)(v10 - 1) < 0)
    {
      operator delete(*(void **)(v10 - 24));
      if (*(char *)(v10 - 25) < 0)
      {
LABEL_19:
        operator delete(*(void **)(v10 - 48));
        if ((*(char *)(v10 - 49) & 0x80000000) == 0) {
          goto LABEL_12;
        }
        goto LABEL_20;
      }
    }
    else if (*(char *)(v10 - 25) < 0)
    {
      goto LABEL_19;
    }
    if ((*(char *)(v10 - 49) & 0x80000000) == 0) {
      goto LABEL_12;
    }
LABEL_20:
    operator delete(*(void **)(v10 - 72));
LABEL_12:
    v10 -= 256;
    sub_30328C(v10);
  }
  if (v9) {
    operator delete(v9);
  }
  return v13 + 256;
}

void sub_605B8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_605CF4((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_605BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      uint64_t v9 = a3 + v7;
      *(void *)(v8 - 256) = 0;
      *(void *)(v8 - 248) = 0;
      *(void *)(v8 - 240) = 0;
      *(_OWORD *)(v8 - 256) = *(_OWORD *)(a3 + v7 - 256);
      *(void *)(v8 - 240) = *(void *)(a3 + v7 - 240);
      *(void *)(v9 - 256) = 0;
      *(void *)(v9 - 248) = 0;
      *(void *)(v9 - 240) = 0;
      *(void *)(v8 - 232) = 0;
      *(void *)(v8 - 224) = 0;
      *(void *)(v8 - 216) = 0;
      *(_OWORD *)(v8 - 232) = *(_OWORD *)(a3 + v7 - 232);
      *(void *)(v8 - 216) = *(void *)(a3 + v7 - 216);
      *(void *)(v9 - 232) = 0;
      *(void *)(v9 - 224) = 0;
      *(void *)(v9 - 216) = 0;
      *(void *)(v8 - 208) = 0;
      *(void *)(v8 - 200) = 0;
      *(void *)(v8 - 192) = 0;
      *(_OWORD *)(v8 - 208) = *(_OWORD *)(a3 + v7 - 208);
      *(void *)(v8 - 192) = *(void *)(a3 + v7 - 192);
      *(void *)(v9 - 208) = 0;
      *(void *)(v9 - 200) = 0;
      *(void *)(v9 - 192) = 0;
      *(void *)(v8 - 184) = 0;
      *(void *)(v8 - 176) = 0;
      *(void *)(v8 - 168) = 0;
      *(_OWORD *)(v8 - 184) = *(_OWORD *)(a3 + v7 - 184);
      *(void *)(v8 - 168) = *(void *)(a3 + v7 - 168);
      *(void *)(v9 - 184) = 0;
      *(void *)(v9 - 176) = 0;
      *(void *)(v9 - 168) = 0;
      *(void *)(v8 - 160) = 0;
      *(void *)(v8 - 152) = 0;
      *(void *)(v8 - 144) = 0;
      *(_OWORD *)(v8 - 160) = *(_OWORD *)(a3 + v7 - 160);
      *(void *)(v8 - 144) = *(void *)(a3 + v7 - 144);
      *(void *)(v9 - 160) = 0;
      *(void *)(v9 - 152) = 0;
      *(void *)(v9 - 144) = 0;
      long long v10 = *(_OWORD *)(a3 + v7 - 136);
      *(_OWORD *)(v8 - 120) = *(_OWORD *)(a3 + v7 - 120);
      *(_OWORD *)(v8 - 136) = v10;
      *(void *)(v8 - 96) = 0;
      *(void *)(v8 - 88) = 0;
      *(void *)(v8 - 104) = 0;
      *(_OWORD *)(v8 - 104) = *(_OWORD *)(a3 + v7 - 104);
      *(void *)(v8 - 88) = *(void *)(a3 + v7 - 88);
      *(void *)(v9 - 104) = 0;
      *(void *)(v9 - 96) = 0;
      *(void *)(v9 - 88) = 0;
      *(unsigned char *)(v8 - 80) = *(unsigned char *)(a3 + v7 - 80);
      long long v11 = *(_OWORD *)(a3 + v7 - 72);
      *(void *)(v8 - 56) = *(void *)(a3 + v7 - 56);
      *(_OWORD *)(v8 - 72) = v11;
      *(void *)(v9 - 64) = 0;
      *(void *)(v9 - 56) = 0;
      *(void *)(v9 - 72) = 0;
      long long v12 = *(_OWORD *)(a3 + v7 - 48);
      *(void *)(v8 - 32) = *(void *)(a3 + v7 - 32);
      *(_OWORD *)(v8 - 48) = v12;
      *(void *)(v9 - 40) = 0;
      *(void *)(v9 - 32) = 0;
      *(void *)(v9 - 48) = 0;
      __n128 result = *(__n128 *)(a3 + v7 - 24);
      *(void *)(v8 - 8) = *(void *)(a3 + v7 - 8);
      *(__n128 *)(v8 - 24) = result;
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 8) = 0;
      *(void *)(v9 - 24) = 0;
      v7 -= 256;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

uint64_t sub_605CF4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 256;
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      if (*(char *)(i - 25) < 0)
      {
LABEL_9:
        operator delete(*(void **)(i - 48));
        if ((*(char *)(i - 49) & 0x80000000) == 0) {
          goto LABEL_2;
        }
        goto LABEL_10;
      }
    }
    else if (*(char *)(i - 25) < 0)
    {
      goto LABEL_9;
    }
    if ((*(char *)(i - 49) & 0x80000000) == 0) {
      goto LABEL_2;
    }
LABEL_10:
    operator delete(*(void **)(i - 72));
LABEL_2:
    sub_30328C(i - 256);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

double sub_605D98()
{
  byte_2588957 = 1;
  word_2588940 = 65;
  byte_258896F = 1;
  word_2588958 = 65;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst, "UNKNOWN");
  *(_DWORD *)v283 = 0;
  HIBYTE(v284[0]) = 14;
  strcpy(&v283[8], "ROUTES_THROUGH");
  LODWORD(v284[1]) = 1;
  v285[23] = 9;
  strcpy(v285, "ROUTES_TO");
  LODWORD(v286) = 3;
  HIBYTE(v288) = 11;
  strcpy((char *)__p, "ROUTES_FROM");
  LODWORD(v289) = 2;
  xmmword_258C728 = 0u;
  *(_OWORD *)&qword_258C738 = 0u;
  dword_258C748 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_258C728, (uint64_t)&__dst, (uint64_t)&__dst);
  sub_3A6EF0((uint64_t)&xmmword_258C728, (uint64_t)&v283[8], (uint64_t)&v283[8]);
  sub_3A6EF0((uint64_t)&xmmword_258C728, (uint64_t)v285, (uint64_t)v285);
  sub_3A6EF0((uint64_t)&xmmword_258C728, (uint64_t)__p, (uint64_t)__p);
  if (SHIBYTE(v288) < 0)
  {
    operator delete(__p[0]);
    if ((v285[23] & 0x80000000) == 0)
    {
LABEL_3:
      if ((SHIBYTE(v284[0]) & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_383:
      operator delete(*(void **)&v283[8]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_5;
      }
      goto LABEL_384;
    }
  }
  else if ((v285[23] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v285);
  if (SHIBYTE(v284[0]) < 0) {
    goto LABEL_383;
  }
LABEL_4:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_5;
  }
LABEL_384:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_5:
  strcpy(&byte_2588987, "\n\x1B\\toi=orth\\"");
  strcpy((char *)&qword_2588970, "\x1B\\toi=lhp\\"");
  byte_258899F = 11;
  qword_25889A0 = (char *)operator new(0x19uLL);
  long long v280 = xmmword_20B9250;
  xmmword_25889A8 = xmmword_20B9250;
  strcpy(qword_25889A0, "\x1B\\toi=x-sampa-internal\\"");
  byte_25889CF = 13;
  strcpy((char *)&qword_25889B8, "\x1B\\tn=address\\"");
  strcpy(&byte_25889E7, "\t\x1B\\tn=normal\\"");
  strcpy((char *)&qword_25889D0, "\x1B\\tn=nav\\"");
  byte_25889FF = 12;
  byte_2588A17 = 7;
  strcpy((char *)&dword_2588A00, "\x1B\\lang=");
  byte_2588A2F = 1;
  word_2588A18 = 92;
  byte_2588A47 = 4;
  strcpy((char *)&qword_2588A30, "DEV:");
  byte_2588A5F = 8;
  strcpy((char *)&qword_2588A48, "Continue");
  byte_2588A77 = 11;
  strcpy((char *)&qword_2588A60, "Start_Route");
  byte_2588A8F = 14;
  strcpy((char *)&qword_2588A78, "Continue_Route");
  byte_2588AA7 = 12;
  strcpy((char *)&qword_2588A90, "Resume_Route");
  byte_2588ABF = 18;
  strcpy((char *)&xmmword_2588AA8, "Start_Route_U_Turn");
  byte_2588AD7 = 7;
  strcpy((char *)&dword_2588AC0, "_U_Turn");
  qword_2588AE8 = 0x1300000000000000;
  qmemcpy(&unk_2588AF0, "Continue_Route", 14);
  qword_2588AD8 = *(void *)"Resume_Route";
  unk_2588AE0 = 0x545F555F6574756FLL;
  unk_2588AE7 = 1852994900;
  qword_2588B00 = 0x1500000000000000;
  strcpy(byte_2588B08, "Left_Turn");
  unk_2588AFE = 1415533919;
  *(_DWORD *)((char *)&qword_2588B00 + 1) = 1852994900;
  strcpy(&byte_2588B1F, "\tRight_Turn");
  strcpy(&byte_2588B37, "\nLeft_Turn_At_End");
  byte_2588B4F = 16;
  byte_2588B67 = 17;
  strcpy((char *)&xmmword_2588B50, "Right_Turn_At_End");
  byte_2588B7F = 15;
  strcpy((char *)&qword_2588B68, "Sharp_Left_Turn");
  byte_2588B97 = 16;
  strcpy((char *)&xmmword_2588B80, "Sharp_Right_Turn");
  byte_2588BAF = 16;
  strcpy((char *)&xmmword_2588B98, "Slight_Left_Turn");
  byte_2588BC7 = 17;
  strcpy((char *)&xmmword_2588BB0, "Slight_Right_Turn");
  strcpy(&byte_2588BDF, "\tKeep_Right");
  strcpy((char *)&qword_2588BC8, "Keep_Left");
  strcpy(&byte_2588BF7, "\nU_Turn");
  byte_2588C0F = 6;
  byte_2588C27 = 14;
  strcpy((char *)&qword_2588C10, "Walking_U_Turn");
  byte_2588C3F = 20;
  strcpy((char *)&xmmword_2588C28, "U_Turn_When_Possible");
  byte_2588C57 = 20;
  strcpy((char *)&xmmword_2588C40, "U_Turn_At_Roundabout");
  byte_2588C6F = 11;
  strcpy((char *)&qword_2588C58, "Enter_Ferry");
  strcpy(&byte_2588C87, "\nChange_Ferry");
  strcpy((char *)&qword_2588C70, "Exit_Ferry");
  byte_2588C9F = 12;
  byte_2588CB7 = 21;
  strcpy((char *)&xmmword_2588CA0, "Enter_Railway_Shuttle");
  byte_2588CCF = 20;
  strcpy((char *)&xmmword_2588CB8, "Exit_Railway_Shuttle");
  byte_2588CE7 = 22;
  strcpy((char *)&xmmword_2588CD0, "Change_Railway_Shuttle");
  byte_2588CFF = 17;
  strcpy((char *)&xmmword_2588CE8, "End_Of_Navigation");
  byte_2588D17 = 17;
  strcpy((char *)&xmmword_2588D00, "End_Of_Navigation");
  byte_2588D2F = 11;
  strcpy((char *)&qword_2588D18, "Destination");
  byte_2588D47 = 19;
  strcpy((char *)&xmmword_2588D30, "Destination_On_left");
  byte_2588D5F = 20;
  strcpy((char *)&xmmword_2588D48, "Destination_On_Right");
  strcpy(&byte_2588D77, "\nFirst_Stop_On_left");
  *(void *)&v267[0] = *(void *)"First_Stop";
  strcpy((char *)&qword_2588D60, "First_Stop");
  byte_2588D8F = 18;
  byte_2588DA7 = 19;
  strcpy((char *)&xmmword_2588D90, "First_Stop_On_Right");
  strcpy(&byte_2588DBF, "\tNext_Stop_On_left");
  *(void *)&v263[48] = *(void *)"Next_Stop";
  strcpy((char *)&qword_2588DA8, "Next_Stop");
  byte_2588DD7 = 17;
  byte_2588DEF = 18;
  strcpy((char *)&xmmword_2588DD8, "Next_Stop_On_Right");
  byte_2588E07 = 13;
  strcpy((char *)&qword_2588DF0, "Waypoint_Stop");
  byte_2588E1F = 21;
  strcpy((char *)&xmmword_2588E08, "Waypoint_Stop_On_Left");
  byte_2588E37 = 22;
  strcpy((char *)&xmmword_2588E20, "Waypoint_Stop_On_Right");
  byte_2588E4F = 11;
  strcpy((char *)&qword_2588E38, "Roundabout_");
  byte_2588E67 = 16;
  strcpy((char *)&xmmword_2588E50, "Enter_Roundabout");
  qword_2588E68 = (uint64_t)operator new(0x20uLL);
  long long v279 = xmmword_20B91C0;
  unk_2588E70 = xmmword_20B91C0;
  strcpy((char *)qword_2588E68, "Walking_Enter_Roundabout");
  byte_2588E97 = 16;
  strcpy(byte_2588E80, "Leave_Roundabout");
  byte_2588EAF = 21;
  strcpy((char *)&xmmword_2588E98, "Roundabout_First_Exit");
  byte_2588EC7 = 22;
  strcpy(byte_2588EB0, "Roundabout_Second_Exit");
  byte_2588EDF = 21;
  strcpy((char *)&xmmword_2588EC8, "Roundabout_Third_Exit");
  strcpy(byte_2588EE0, "Roundabout_Fourth_Exit");
  HIBYTE(word_2588EF6) = 22;
  byte_2588F0F = 21;
  strcpy((char *)&xmmword_2588EF8, "Roundabout_Fifth_Exit");
  byte_2588F27 = 21;
  strcpy(byte_2588F10, "Roundabout_Sixth_Exit");
  qword_2588F28 = (uint64_t)operator new(0x19uLL);
  unk_2588F30 = xmmword_20B9250;
  strcpy((char *)qword_2588F28, "Roundabout_Seventh_Exit");
  strcpy(byte_2588F40, "Roundabout_Eighth_Exit");
  HIBYTE(word_2588F56) = 22;
  byte_2588F6F = 21;
  strcpy((char *)&xmmword_2588F58, "Roundabout_Ninth_Exit");
  byte_2588F87 = 21;
  strcpy(byte_2588F70, "Roundabout_Tenth_Exit");
  qword_2588F88 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2588F90 = xmmword_20B91C0;
  strcpy((char *)qword_2588F88, "Roundabout_Eleventh_Exit");
  qword_2588FA0 = (uint64_t)operator new(0x19uLL);
  unk_2588FA8 = xmmword_20B9250;
  strcpy((char *)qword_2588FA0, "Roundabout_Twelfth_Exit");
  qword_2588FB8 = (uint64_t)operator new(0x20uLL);
  long long v276 = xmmword_20B5EB0;
  unk_2588FC0 = xmmword_20B5EB0;
  strcpy((char *)qword_2588FB8, "Roundabout_Thirteenth_Exit");
  qword_2588FD0 = (uint64_t)operator new(0x20uLL);
  unk_2588FD8 = xmmword_20B5EB0;
  strcpy((char *)qword_2588FD0, "Roundabout_Fourteenth_Exit");
  qword_2588FE8 = (uint64_t)operator new(0x20uLL);
  long long v278 = xmmword_20B8870;
  *(_OWORD *)algn_2588FF0 = xmmword_20B8870;
  strcpy((char *)qword_2588FE8, "Roundabout_Fifteenth_Exit");
  qword_2589000 = (uint64_t)operator new(0x20uLL);
  unk_2589008 = xmmword_20B8870;
  strcpy((char *)qword_2589000, "Roundabout_Sixteenth_Exit");
  qword_2589018 = (uint64_t)operator new(0x20uLL);
  long long v273 = xmmword_20B91A0;
  unk_2589020 = xmmword_20B91A0;
  strcpy((char *)qword_2589018, "Roundabout_Seventeenth_Exit");
  qword_2589030 = (uint64_t)operator new(0x20uLL);
  unk_2589038 = xmmword_20B5EB0;
  strcpy((char *)qword_2589030, "Roundabout_Eighteenth_Exit");
  qword_2589048 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2589050 = xmmword_20B5EB0;
  strcpy((char *)qword_2589048, "Roundabout_Nineteenth_Exit");
  byte_2589077 = 8;
  strcpy((char *)&qword_2589060, "Off_Ramp");
  byte_258908F = 16;
  strcpy((char *)&xmmword_2589078, "Off_Ramp_On_Left");
  byte_25890A7 = 17;
  strcpy(algn_2589090, "Off_Ramp_On_Right");
  byte_25890BF = 14;
  strcpy((char *)&qword_25890A8, "Change_Highway");
  strcpy(byte_25890C0, "Change_Highway_On_Left");
  HIBYTE(word_25890D6) = 22;
  qword_25890D8 = (uint64_t)operator new(0x19uLL);
  unk_25890E0 = xmmword_20B9250;
  strcpy((char *)qword_25890D8, "Change_Highway_On_Right");
  byte_2589107 = 5;
  strcpy((char *)&dword_25890F0, "Merge");
  byte_258911F = 12;
  strcpy((char *)&qword_2589108, "Enter_Detour");
  byte_2589137 = 11;
  strcpy((char *)&qword_2589120, "Exit_Detour");
  byte_258914F = 18;
  strcpy((char *)&xmmword_2589138, "Walking_Turnaround");
  qword_2589150 = (uint64_t)operator new(0x19uLL);
  unk_2589158 = xmmword_20B9250;
  strcpy((char *)qword_2589150, "Walking_Turnaround_Sign");
  byte_258917F = 19;
  strcpy(byte_2589168, "Distance_Title_List");
  unk_2589180 = operator new(0x19uLL);
  unk_2589188 = xmmword_20B9250;
  long long v270 = *(_OWORD *)"Cross_The_Street_Spoken";
  strcpy(unk_2589180, "Cross_The_Street_Spoken");
  *(void *)&long long v269 = *(void *)"t_Spoken";
  byte_25891AF = 19;
  strcpy(byte_2589198, "Arrival_Charge_List");
  byte_25891C7 = 15;
  strcpy(byte_25891B0, "Charge_At_Start");
  strcpy(&byte_25891DF, "\tPass_Street");
  strcpy(byte_25891C8, "Pass_Exit");
  byte_25891F7 = 11;
  byte_258920F = 17;
  strcpy(byte_25891F8, "Pass_Intersection");
  strcpy(&byte_2589227, "\t_PrevExitNumber");
  strcpy(byte_2589210, "Next_Exit");
  byte_258923F = 15;
  strcpy(&byte_2589257, "\t_PrevUTurn");
  strcpy(byte_2589240, "_PrevRoad");
  strcpy(&byte_258926F, "\nNext_");
  byte_2589287 = 5;
  byte_258929F = 15;
  strcpy(byte_2589288, "_At_Next_Street");
  byte_25892B7 = 21;
  strcpy(byte_25892A0, "_At_Next_Intersection");
  byte_25892CF = 14;
  strcpy((char *)&qword_25892B8, "Charge_Station");
  byte_25892E7 = 15;
  strcpy((char *)&qword_25892D0, "_Charge_Station");
  BYTE1(qword_25892F8) = 0;
  WORD1(qword_25892F8) = 25856;
  HIDWORD(qword_25892F8) = 335544320;
  strcpy((char *)&qword_25892E8, "_Charge_Station_");
  byte_2589317 = 8;
  strcpy((char *)&qword_2589300, "_Minimum");
  byte_258932F = 15;
  strcpy((char *)&qword_2589318, "ExitShield_Sign");
  byte_2589347 = 8;
  strcpy((char *)&qword_2589330, "Walking_");
  byte_258935F = 16;
  strcpy((char *)&xmmword_2589348, "Walking_Continue");
  byte_2589377 = 19;
  strcpy((char *)&xmmword_2589360, "Walking_Start_Route");
  qword_2589378 = (uint64_t)operator new(0x20uLL);
  unk_2589380 = xmmword_20B5EB0;
  strcpy((char *)qword_2589378, "Walking_Start_Route_U_Turn");
  byte_25893A7 = 17;
  strcpy(byte_2589390, "Walking_Left_Turn");
  byte_25893BF = 18;
  strcpy((char *)&xmmword_25893A8, "Walking_Right_Turn");
  qword_25893C0 = (uint64_t)operator new(0x20uLL);
  unk_25893C8 = xmmword_20B5EB0;
  strcpy((char *)qword_25893C0, "Walking_Turn_At_Roundabout");
  qword_25893D8 = (uint64_t)operator new(0x20uLL);
  long long v277 = xmmword_20B91B0;
  unk_25893E0 = xmmword_20B91B0;
  strcpy((char *)qword_25893D8, "Walking_U_Turn_When_Possible");
  qword_25893F0 = (uint64_t)operator new(0x28uLL);
  long long v268 = xmmword_20B9390;
  unk_25893F8 = xmmword_20B9390;
  strcpy((char *)qword_25893F0, "Walking_Roundabout_Exit_Continue");
  qword_2589408 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2589410 = xmmword_20B91B0;
  strcpy((char *)qword_2589408, "Walking_Roundabout_Exit_Left");
  qword_2589420 = (uint64_t)operator new(0x20uLL);
  long long v275 = xmmword_20B8890;
  unk_2589428 = xmmword_20B8890;
  strcpy((char *)qword_2589420, "Walking_Roundabout_Exit_Right");
  qword_2589438 = (uint64_t)operator new(0x20uLL);
  unk_2589440 = xmmword_20B8870;
  strcpy((char *)qword_2589438, "Walking_End_Of_Navigation");
  long long v272 = *(_OWORD *)"nd_Of_Navigation";
  uint64_t v0 = (char *)operator new(0x20uLL);
  qword_2589450 = (uint64_t)v0;
  unk_2589458 = xmmword_20B8870;
  *(_OWORD *)uint64_t v0 = *(_OWORD *)"Walking_End_Of_Navigation";
  *(_OWORD *)(v0 + 9) = v272;
  v0[25] = 0;
  byte_258947F = 8;
  strcpy((char *)&qword_2589468, "Walking_");
  qword_2589480 = (uint64_t)operator new(0x19uLL);
  unk_2589488 = v280;
  strcpy((char *)qword_2589480, "Walking_Sharp_Left_Turn");
  qword_2589498 = (uint64_t)operator new(0x20uLL);
  unk_25894A0 = v279;
  strcpy((char *)qword_2589498, "Walking_Sharp_Right_Turn");
  qword_25894B0 = (uint64_t)operator new(0x20uLL);
  unk_25894B8 = v279;
  strcpy((char *)qword_25894B0, "Walking_Slight_Left_Turn");
  qword_25894C8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25894D0 = v278;
  strcpy((char *)qword_25894C8, "Walking_Slight_Right_Turn");
  byte_25894F7 = 4;
  strcpy((char *)&dword_25894E0, "Exit");
  byte_258950F = 4;
  strcpy((char *)&dword_25894F8, "Road");
  byte_2589527 = 7;
  strcpy((char *)&dword_2589510, "Freeway");
  byte_258953F = 12;
  strcpy((char *)&qword_2589528, "Intersection");
  byte_2589557 = 5;
  strcpy((char *)&dword_2589540, "Ferry");
  byte_258956F = 11;
  strcpy((char *)&qword_2589558, "ShuttleName");
  byte_2589587 = 5;
  strcpy((char *)&dword_2589570, "Road1");
  strcpy(&byte_258959F, "\tName");
  strcpy((char *)&qword_2589588, "Signpost1");
  byte_25895B7 = 4;
  byte_25895CF = 7;
  strcpy((char *)&dword_25895B8, "Address");
  byte_25895E7 = 7;
  strcpy((char *)&dword_25895D0, "Shield1");
  byte_25895FF = 13;
  strcpy((char *)&qword_25895E8, "TowardShield1");
  byte_2589617 = 6;
  strcpy((char *)&dword_2589600, "Right_");
  byte_258962F = 5;
  strcpy((char *)&dword_2589618, "Left_");
  strcpy(&byte_2589647, "\tOn_Left_");
  strcpy((char *)&qword_2589630, "On_Right_");
  byte_258965F = 8;
  byte_2589677 = 12;
  strcpy((char *)&qword_2589660, "ElevatorName");
  byte_258968F = 13;
  strcpy((char *)&qword_2589678, "EscalatorName");
  strcpy(&byte_25896A7, "\nBridgeName");
  strcpy((char *)&qword_2589690, "StairsName");
  strcpy(&byte_25896BF, "\nTunnelName");
  strcpy(&byte_25896D7, "\nParking");
  byte_25896EF = 7;
  strcpy(&byte_2589707, "\t_Escalator");
  strcpy((char *)&qword_25896F0, "_Elevator");
  strcpy(&byte_258971F, "\n_ElevatorName");
  byte_2589737 = 13;
  byte_258974F = 14;
  strcpy((char *)&qword_2589738, "_EscalatorName");
  byte_2589767 = 5;
  strcpy((char *)&qword_2589750, "_Road");
  byte_258977F = 8;
  strcpy((char *)&qword_2589768, "_Freeway");
  byte_2589797 = 13;
  strcpy((char *)&qword_2589780, "_Intersection");
  byte_25897AF = 6;
  strcpy((char *)&dword_2589798, "_Road1");
  byte_25897C7 = 6;
  strcpy((char *)&dword_25897B0, "_Road2");
  strcpy(&byte_25897DF, "\n_Signpost2");
  strcpy((char *)&qword_25897C8, "_Signpost1");
  strcpy(&byte_25897F7, "\n_Ferry");
  byte_258980F = 6;
  byte_2589827 = 12;
  strcpy((char *)&qword_2589810, "_Ferry_Ferry");
  byte_258983F = 12;
  strcpy((char *)&qword_2589828, "_ShuttleName");
  qword_2589840 = (uint64_t)operator new(0x20uLL);
  unk_2589848 = v277;
  strcpy((char *)qword_2589840, "_Railway_Shuttle_ShuttleName");
  byte_258986F = 11;
  strcpy((char *)&qword_2589858, "_ExitNumber");
  byte_2589887 = 5;
  strcpy((char *)&dword_2589870, "_Exit");
  byte_258989F = 7;
  strcpy((char *)&dword_2589888, "_StayOn");
  byte_25898B7 = 7;
  strcpy((char *)&dword_25898A0, "_Stairs");
  byte_25898CF = 5;
  strcpy((char *)&dword_25898B8, "_Ramp");
  byte_25898E7 = 11;
  strcpy((char *)&qword_25898D0, "_StairsName");
  strcpy(&byte_25898FF, "\t_Down");
  strcpy((char *)&qword_25898E8, "_RampName");
  byte_2589917 = 5;
  byte_258992F = 3;
  dword_2589918 = 7361887;
  byte_2589947 = 7;
  strcpy((char *)&dword_2589930, "_Bridge");
  byte_258995F = 7;
  strcpy((char *)&dword_2589948, "_Tunnel");
  byte_2589977 = 11;
  strcpy((char *)&qword_2589960, "_Roundabout");
  byte_258998F = 6;
  strcpy((char *)&dword_2589978, "_Cross");
  byte_25899A7 = 8;
  strcpy((char *)&qword_2589990, "_Parking");
  byte_25899BF = 8;
  strcpy((char *)&qword_25899A8, "_Shield1");
  byte_25899D7 = 14;
  strcpy((char *)&qword_25899C0, "_TowardShield1");
  byte_25899EF = 8;
  strcpy((char *)&qword_25899D8, "_Shield2");
  byte_2589A07 = 14;
  strcpy((char *)&qword_25899F0, "_TowardShield2");
  byte_2589A1F = 11;
  strcpy((char *)&qword_2589A08, "_Direction1");
  byte_2589A37 = 11;
  strcpy((char *)&qword_2589A20, "_Direction2");
  strcpy(&byte_2589A4F, "\n_TowardDirection1");
  strcpy((char *)&qword_2589A38, "Direction1");
  byte_2589A67 = 17;
  byte_2589A7F = 17;
  strcpy((char *)&xmmword_2589A68, "_TowardDirection2");
  byte_2589A97 = 16;
  strcpy((char *)&xmmword_2589A80, "TowardDirection1");
  byte_2589AAF = 7;
  strcpy((char *)&qword_2589A98, "_Spoken");
  byte_2589AC7 = 5;
  strcpy((char *)&qword_2589AB0, "_Sign");
  byte_2589ADF = 15;
  strcpy((char *)&qword_2589AC8, "_Secondary_Sign");
  byte_2589AF7 = 5;
  byte_2589AE4 = 116;
  dword_2589AE0 = 1936280671;
  byte_2589AE5 = 0;
  byte_2589B0F = 8;
  strcpy((char *)&qword_2589AF8, "_Primary");
  qword_2589B20 = 0xF00000000000000;
  strcpy(byte_2589B28, "_Secondary");
  strcpy((char *)&qword_2589B10, "_Spoken_Primary");
  strcpy(&byte_2589B3F, "\n_Secondary");
  strcpy(&byte_2589B57, "\n_Spoken_Secondar");
  BYTE1(qword_2589B68) = 0;
  WORD1(qword_2589B68) = 0;
  HIDWORD(qword_2589B68) = 285212672;
  byte_2589B87 = 13;
  strcpy((char *)&qword_2589B70, "_To_Secondary");
  BYTE1(qword_2589B98) = 0;
  WORD1(qword_2589B98) = 0;
  HIDWORD(qword_2589B98) = 335544320;
  strcpy((char *)&dword_2589B88, "_Spoken_To_Secon");
  strcpy(&byte_2589BB7, "\t_ValidDistance");
  strcpy((char *)&qword_2589BA0, "_Distance");
  byte_2589BCF = 14;
  byte_2589BE7 = 6;
  strcpy((char *)&dword_2589BD0, "_Short");
  byte_2589BFF = 1;
  word_2589BE8 = 95;
  qword_2589C00 = (uint64_t)operator new(0x20uLL);
  unk_2589C08 = v279;
  strcpy((char *)qword_2589C00, "Concatenate_Newline_Sign");
  uint64_t v1 = (char *)operator new(0x19uLL);
  qword_2589C18 = (uint64_t)v1;
  unk_2589C20 = v280;
  *(_OWORD *)uint64_t v1 = v270;
  *(void *)(v1 + 15) = v269;
  v1[23] = 0;
  byte_2589C47 = 12;
  strcpy((char *)&qword_2589C30, "Chain_Spoken");
  byte_2589C5F = 15;
  strcpy((char *)&qword_2589C48, "Chain_To_Spoken");
  strcpy(&byte_2589C77, "\nThen_Spoken");
  strcpy((char *)&qword_2589C60, "And_Spoken");
  byte_2589C8F = 11;
  byte_2589CA7 = 18;
  strcpy(algn_2589C90, "Concatenate_Spoken");
  qword_2589CA8 = (uint64_t)operator new(0x28uLL);
  long long v266 = xmmword_20B9240;
  *(_OWORD *)algn_2589CB0 = xmmword_20B9240;
  strcpy((char *)qword_2589CA8, "At_Traffic_Light_Chain_Spoken_Primary");
  qword_2589CC0 = (uint64_t)operator new(0x28uLL);
  v267[1] = xmmword_20B9260;
  unk_2589CC8 = xmmword_20B9260;
  strcpy((char *)qword_2589CC0, "At_Stop_Sign_Chain_Spoken_Primary");
  qword_2589CD8 = (uint64_t)operator new(0x40uLL);
  unk_2589CE0 = xmmword_20B9A90;
  strcpy((char *)qword_2589CD8, "At_Stop_Sign_Cross_Traffic_Doesnt_Stop_Chain_Spoken_Primary");
  qword_2589CF0 = (uint64_t)operator new(0x30uLL);
  long long v265 = xmmword_20B9A40;
  unk_2589CF8 = xmmword_20B9A40;
  strcpy((char *)qword_2589CF0, "At_Next_Traffic_Light_Chain_Spoken_Primary");
  qword_2589D08 = (uint64_t)operator new(0x28uLL);
  long long v264 = xmmword_20E12D0;
  *(_OWORD *)algn_2589D10 = xmmword_20E12D0;
  strcpy((char *)qword_2589D08, "At_Next_Stop_Sign_Chain_Spoken_Primary");
  qword_2589D20 = (uint64_t)operator new(0x28uLL);
  long long v274 = xmmword_20B9960;
  unk_2589D28 = xmmword_20B9960;
  strcpy((char *)qword_2589D20, "At_Traffic_Light_Chain_Spoken_Secondary");
  qword_2589D38 = (uint64_t)operator new(0x28uLL);
  unk_2589D40 = xmmword_20B93A0;
  strcpy((char *)qword_2589D38, "At_Stop_Sign_Chain_Spoken_Secondary");
  qword_2589D50 = (uint64_t)operator new(0x30uLL);
  long long v272 = xmmword_20E1380;
  unk_2589D58 = xmmword_20E1380;
  strcpy((char *)qword_2589D50, "At_Next_Traffic_Light_Chain_Spoken_Secondary");
  qword_2589D68 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_2589D70 = xmmword_20B93C0;
  strcpy((char *)qword_2589D68, "At_Next_Stop_Sign_Chain_Spoken_Secondary");
  qword_2589D80 = (uint64_t)operator new(0x38uLL);
  unk_2589D88 = xmmword_20B9A60;
  strcpy((char *)qword_2589D80, "At_Next_One_Traffic_Light_Chain_Spoken_Secondary");
  qword_2589D98 = (uint64_t)operator new(0x30uLL);
  unk_2589DA0 = xmmword_20E1380;
  strcpy((char *)qword_2589D98, "At_Next_One_Stop_Sign_Chain_Spoken_Secondary");
  qword_2589DB0 = (uint64_t)operator new(0x28uLL);
  unk_2589DB8 = xmmword_20B9960;
  strcpy((char *)qword_2589DB0, "At_Mini_Roundabout_Chain_Spoken_Primary");
  qword_2589DC8 = (uint64_t)operator new(0x30uLL);
  long long v271 = xmmword_20B93D0;
  *(_OWORD *)algn_2589DD0 = xmmword_20B93D0;
  strcpy((char *)qword_2589DC8, "At_Mini_Roundabout_Chain_Spoken_Secondary");
  qword_2589DE0 = (uint64_t)operator new(0x20uLL);
  unk_2589DE8 = v275;
  strcpy((char *)qword_2589DE0, "Walking_Distance_Chain_Spoken");
  qword_2589DF8 = (uint64_t)operator new(0x20uLL);
  unk_2589E00 = v275;
  strcpy((char *)qword_2589DF8, "Walking_Continue_Chain_Spoken");
  uint64_t v2 = (char *)operator new(0x19uLL);
  qword_2589E10 = (uint64_t)v2;
  unk_2589E18 = v280;
  *(_OWORD *)uint64_t v2 = v270;
  *(void *)(v2 + 15) = v269;
  v2[23] = 0;
  unk_2589E28 = operator new(0x28uLL);
  unk_2589E30 = v268;
  strcpy(unk_2589E28, "Distance_Cross_The_Street_Spoken");
  strcpy(byte_2589E40, "Walking_Continue_Cross");
  HIBYTE(word_2589E56) = 22;
  byte_2589E6F = 14;
  strcpy(byte_2589E58, "Continue_Cross");
  byte_2589E87 = 5;
  strcpy(byte_2589E70, "Cross");
  byte_2589E9F = 19;
  strcpy(byte_2589E88, "Cross_Street_Spoken");
  byte_2589EB7 = 17;
  strcpy(byte_2589EA0, "Cross_Road_Spoken");
  byte_2589ECF = 20;
  strcpy(byte_2589EB8, "Use_Crosswalk_Spoken");
  byte_2589EE7 = 15;
  strcpy(byte_2589ED0, "Distance_Spoken");
  byte_2589EFF = 19;
  strcpy(byte_2589EE8, "Distance_And_Spoken");
  byte_2589F17 = 21;
  strcpy(byte_2589F00, "Continue_Stage_Spoken");
  byte_2589F2F = 13;
  qmemcpy(&qword_2589F18, "ContinueStage", 13);
  int v3 = SHIBYTE(qword_2589B20);
  if (qword_2589B20 >= 0) {
    size_t v4 = HIBYTE(qword_2589B20);
  }
  else {
    size_t v4 = unk_2589B18;
  }
  unint64_t v5 = v4 + 13;
  byte_2589F25 = 0;
  if (v4 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v5 >= 0x17)
  {
    uint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v7 = v5 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v9 = (char *)operator new(v7 + 1);
    qword_2589F38 = v4 + 13;
    unk_2589F40 = v8 | 0x8000000000000000;
    qword_2589F30 = (uint64_t)v9;
    qmemcpy(v9, "ContinueStage", 13);
    uint64_t v6 = v9 + 13;
  }
  else
  {
    BYTE1(qword_2589F38) = 0;
    WORD1(qword_2589F38) = 0;
    HIDWORD(qword_2589F38) = 0;
    unk_2589F40 = 0;
    byte_2589F47 = v4 + 13;
    strcpy((char *)&qword_2589F30, "Continue");
    uint64_t v6 = (char *)&qword_2589F38 + 5;
    if (!v4) {
      goto LABEL_19;
    }
  }
  if (v3 >= 0) {
    long long v10 = &qword_2589B10;
  }
  else {
    long long v10 = (uint64_t *)qword_2589B10;
  }
  memmove(v6, v10, v4);
LABEL_19:
  v6[v4] = 0;
  int v11 = byte_2589767;
  if (byte_2589767 >= 0) {
    size_t v12 = byte_2589767;
  }
  else {
    size_t v12 = qword_2589758;
  }
  unint64_t v13 = v12 + 13;
  if (v12 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v13 >= 0x17)
  {
    uint64_t v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v15 = v13 | 7;
    }
    uint64_t v16 = v15 + 1;
    int v17 = operator new(v15 + 1);
    __dst.__r_.__value_.__l.__size_ = v12 + 13;
    __dst.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    *int v17 = qword_2589F18;
    *(void *)((char *)v17 + 5) = *(uint64_t *)((char *)&qword_2589F18 + 5);
    uint64_t v14 = (char *)v17 + 13;
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 5) = *(uint64_t *)((char *)&qword_2589F18 + 5);
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v12 + 13;
    __dst.__r_.__value_.__r.__words[0] = qword_2589F18;
    uint64_t v14 = &__dst.__r_.__value_.__s.__data_[13];
    if (!v12) {
      goto LABEL_33;
    }
  }
  if (v11 >= 0) {
    unsigned int v18 = &qword_2589750;
  }
  else {
    unsigned int v18 = (uint64_t *)qword_2589750;
  }
  memmove(v14, v18, v12);
LABEL_33:
  v14[v12] = 0;
  if (v3 >= 0) {
    uint64_t v19 = (const std::string::value_type *)&qword_2589B10;
  }
  else {
    uint64_t v19 = (const std::string::value_type *)qword_2589B10;
  }
  uint64_t v20 = std::string::append(&__dst, v19, v4);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  qword_2589F58 = v20->__r_.__value_.__r.__words[2];
  xmmword_2589F48 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  byte_2589F77 = 5;
  strcpy((char *)&dword_2589F60, "Merge");
  qword_2589F78 = (uint64_t)operator new(0x20uLL);
  long long v269 = xmmword_20B8E90;
  unk_2589F80 = xmmword_20B8E90;
  strcpy((char *)qword_2589F78, "Continue_Freeway_Spoken_Primary");
  byte_2589FA7 = 8;
  strcpy((char *)&qword_2589F90, "Starting");
  byte_2589FBF = 14;
  strcpy((char *)&qword_2589FA8, "Starting_Route");
  byte_2589FD7 = 14;
  strcpy((char *)&qword_2589FC0, "Resuming_Route");
  byte_2589FEF = 16;
  strcpy((char *)&xmmword_2589FD8, "Continuing_Route");
  byte_258A007 = 9;
  word_2589FF8 = 112;
  qword_2589FF0 = *(void *)&v263[48];
  strcpy(&byte_258A01F, "\nEnding");
  strcpy((char *)&word_258A010, "op");
  qword_258A008 = *(void *)&v267[0];
  byte_258A037 = 6;
  strcpy((char *)&qword_258A038, "_Destination");
  byte_258A04F = 12;
  byte_258A067 = 15;
  strcpy((char *)&qword_258A050, "_At_Destination");
  std::operator+<char>();
  qword_258A080 = (uint64_t)operator new(0x20uLL);
  unk_258A088 = v279;
  strcpy((char *)qword_258A080, "Spoken_Ending_At_Parking");
  qword_258A098 = (uint64_t)operator new(0x20uLL);
  v267[0] = xmmword_20B9800;
  xmmword_258A0A0 = xmmword_20B9800;
  strcpy((char *)qword_258A098, "Spoken_Pre_Arrival_Destination");
  strcpy((char *)&xmmword_258A0B0, "Sign_Ending_At_Parking");
  HIBYTE(word_258A0C6) = 22;
  byte_258A0DF = 4;
  strcpy((char *)&dword_258A0C8, "Home");
  byte_258A0F7 = 4;
  strcpy((char *)&dword_258A0E0, "Work");
  byte_258A10F = 8;
  strcpy((char *)&qword_258A0F8, "Business");
  byte_258A127 = 4;
  strcpy((char *)&dword_258A110, "Name");
  byte_258A13F = 13;
  strcpy((char *)&qword_258A128, "Other_Contact");
  byte_258A157 = 11;
  strcpy((char *)&qword_258A140, "ContactHome");
  byte_258A16F = 11;
  *(_DWORD *)((char *)&qword_258A158 + 7) = 1802661719;
  byte_258A187 = 7;
  *(int *)((char *)&dword_258A170 + 3) = 1936942450;
  dword_258A170 = 1919181889;
  strcpy((char *)&xmmword_258A188, "Discoverability_Prompt");
  HIBYTE(word_258A19E) = 22;
  byte_258A1B7 = 6;
  dword_258A1A0 = 1634878303;
  word_258A1A4 = 26739;
  byte_258A1CF = 8;
  qword_258A1B8 = 0x697269535F6F4E5FLL;
  byte_258A1E7 = 9;
  strcpy((char *)&qword_258A1D0, "_CityName");
  byte_258A1FF = 8;
  qword_258A1E8 = 0x636972656E65475FLL;
  int v22 = byte_2589FA7;
  if (byte_2589FA7 >= 0) {
    size_t v23 = byte_2589FA7;
  }
  else {
    size_t v23 = qword_2589F98;
  }
  LODWORD(v270) = byte_25892E7;
  if (byte_25892E7 >= 0) {
    size_t v24 = byte_25892E7;
  }
  else {
    size_t v24 = unk_25892D8;
  }
  qword_258A158 = *(void *)"ContactWork";
  byte_258A163 = 0;
  byte_258A177 = 0;
  byte_258A1A6 = 0;
  byte_258A1C0 = 0;
  byte_258A1F0 = 0;
  unint64_t v25 = v24 + v23;
  if (v24 + v23 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  *(void *)uint64_t v263 = *(void *)"ContactWork";
  *(void *)&v263[16] = *(void *)"ContactHome";
  *(void *)&v263[32] = *(void *)"_Contact";
  *(void *)&v263[48] = *(void *)"Other_Contact";
  if (v25 <= 0x16)
  {
    uint64_t v26 = &qword_258A200;
    qword_258A208 = 0;
    unk_258A210 = 0;
    qword_258A200 = 0;
    byte_258A217 = v24 + v23;
    if (!v23) {
      goto LABEL_51;
    }
    goto LABEL_47;
  }
  uint64_t v89 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v25 | 7) != 0x17) {
    uint64_t v89 = v25 | 7;
  }
  uint64_t v90 = v89 + 1;
  uint64_t v26 = (uint64_t *)operator new(v89 + 1);
  qword_258A208 = v24 + v23;
  unk_258A210 = v90 | 0x8000000000000000;
  qword_258A200 = (uint64_t)v26;
  if (v23)
  {
LABEL_47:
    if (v22 >= 0) {
      int v27 = &qword_2589F90;
    }
    else {
      int v27 = (uint64_t *)qword_2589F90;
    }
    memmove(v26, v27, v23);
  }
LABEL_51:
  int v28 = (char *)v26 + v23;
  if (v24)
  {
    if ((int)v270 >= 0) {
      int v29 = &qword_25892D0;
    }
    else {
      int v29 = (uint64_t *)qword_25892D0;
    }
    memmove(v28, v29, v24);
  }
  v28[v24] = 0;
  int v30 = byte_258A04F;
  if (byte_258A04F >= 0) {
    size_t v31 = byte_258A04F;
  }
  else {
    size_t v31 = qword_258A040;
  }
  unint64_t v32 = v31 + v23;
  if (v31 + v23 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v32 <= 0x16)
  {
    unint64_t v33 = &qword_258A218;
    qword_258A220 = 0;
    unk_258A228 = 0;
    qword_258A218 = 0;
    byte_258A22F = v31 + v23;
    if (!v23) {
      goto LABEL_66;
    }
    goto LABEL_62;
  }
  uint64_t v91 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v32 | 7) != 0x17) {
    uint64_t v91 = v32 | 7;
  }
  uint64_t v92 = v91 + 1;
  unint64_t v33 = (uint64_t *)operator new(v91 + 1);
  qword_258A220 = v31 + v23;
  unk_258A228 = v92 | 0x8000000000000000;
  qword_258A218 = (uint64_t)v33;
  if (v23)
  {
LABEL_62:
    if (v22 >= 0) {
      uint64_t v34 = &qword_2589F90;
    }
    else {
      uint64_t v34 = (uint64_t *)qword_2589F90;
    }
    memmove(v33, v34, v23);
  }
LABEL_66:
  uint64_t v35 = (char *)v33 + v23;
  if (v31)
  {
    if (v30 >= 0) {
      uint64_t v36 = &qword_258A038;
    }
    else {
      uint64_t v36 = (uint64_t *)qword_258A038;
    }
    memmove(v35, v36, v31);
  }
  v35[v31] = 0;
  qword_258A230 = (uint64_t)operator new(0x19uLL);
  unk_258A238 = v280;
  strcpy((char *)qword_258A230, "{ChargeStationCityName}");
  if (v32 < 0x17)
  {
    uint64_t v37 = &qword_258A248;
    qword_258A250 = 0;
    unk_258A258 = 0;
    qword_258A248 = 0;
    byte_258A25F = v31 + v23;
    if (!v23) {
      goto LABEL_77;
    }
    goto LABEL_73;
  }
  uint64_t v93 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v32 | 7) != 0x17) {
    uint64_t v93 = v32 | 7;
  }
  uint64_t v94 = v93 + 1;
  uint64_t v37 = (uint64_t *)operator new(v93 + 1);
  qword_258A250 = v31 + v23;
  unk_258A258 = v94 | 0x8000000000000000;
  qword_258A248 = (uint64_t)v37;
  if (v23)
  {
LABEL_73:
    if (v22 >= 0) {
      uint64_t v38 = &qword_2589F90;
    }
    else {
      uint64_t v38 = (uint64_t *)qword_2589F90;
    }
    memmove(v37, v38, v23);
  }
LABEL_77:
  BOOL v39 = (char *)v37 + v23;
  if (v31)
  {
    if (v30 >= 0) {
      uint64_t v40 = &qword_258A038;
    }
    else {
      uint64_t v40 = (uint64_t *)qword_258A038;
    }
    memmove(v39, v40, v31);
  }
  v39[v31] = 0;
  strcpy((char *)&xmmword_258A260, "{NewBatteryPercentage}");
  HIBYTE(word_258A276) = 22;
  qword_258A278 = (uint64_t)operator new(0x20uLL);
  xmmword_258A280 = v273;
  strcpy((char *)qword_258A278, "{OriginalBatteryPercentage}");
  byte_258A2A7 = 19;
  strcpy((char *)&xmmword_258A290, "_Arrival_Percentage");
  int v41 = byte_258A037;
  if (byte_258A037 >= 0) {
    size_t v42 = byte_258A037;
  }
  else {
    size_t v42 = qword_258A028;
  }
  unint64_t v43 = v42 + v24;
  if (v42 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v43 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v42 + v24;
    if (!v42) {
      goto LABEL_92;
    }
    goto LABEL_88;
  }
  uint64_t v95 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v43 | 7) != 0x17) {
    uint64_t v95 = v43 | 7;
  }
  uint64_t v96 = v95 + 1;
  p_dst = (char *)operator new(v95 + 1);
  __dst.__r_.__value_.__l.__size_ = v42 + v24;
  __dst.__r_.__value_.__r.__words[2] = v96 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v42)
  {
LABEL_88:
    if (v41 >= 0) {
      int v45 = &qword_258A020;
    }
    else {
      int v45 = (uint64_t *)qword_258A020;
    }
    memmove(p_dst, v45, v42);
  }
LABEL_92:
  int64_t v46 = &p_dst[v42];
  if (v24)
  {
    if ((int)v270 >= 0) {
      std::string v47 = &qword_25892D0;
    }
    else {
      std::string v47 = (uint64_t *)qword_25892D0;
    }
    memmove(v46, v47, v24);
  }
  v46[v24] = 0;
  std::string v48 = std::string::append(&__dst, "_Percentage");
  long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  qword_258A2B8 = v48->__r_.__value_.__r.__words[2];
  xmmword_258A2A8 = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v50 = byte_258A037;
  if (byte_258A037 >= 0) {
    size_t v51 = byte_258A037;
  }
  else {
    size_t v51 = qword_258A028;
  }
  int v52 = byte_25892E7;
  if (byte_25892E7 >= 0) {
    size_t v53 = byte_25892E7;
  }
  else {
    size_t v53 = unk_25892D8;
  }
  unint64_t v54 = v53 + v51;
  if (v53 + v51 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v54 <= 0x16)
  {
    memset(&v281, 0, sizeof(v281));
    unint64_t v55 = (char *)&v281;
    *((unsigned char *)&v281.__r_.__value_.__s + 23) = v53 + v51;
    if (!v51) {
      goto LABEL_112;
    }
    goto LABEL_108;
  }
  uint64_t v97 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v54 | 7) != 0x17) {
    uint64_t v97 = v54 | 7;
  }
  uint64_t v98 = v97 + 1;
  unint64_t v55 = (char *)operator new(v97 + 1);
  v281.__r_.__value_.__l.__size_ = v53 + v51;
  v281.__r_.__value_.__r.__words[2] = v98 | 0x8000000000000000;
  v281.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
  if (v51)
  {
LABEL_108:
    if (v50 >= 0) {
      uint64_t v56 = &qword_258A020;
    }
    else {
      uint64_t v56 = (uint64_t *)qword_258A020;
    }
    memmove(v55, v56, v51);
  }
LABEL_112:
  uint64_t v57 = &v55[v51];
  if (v53)
  {
    if (v52 >= 0) {
      uint64_t v58 = &qword_25892D0;
    }
    else {
      uint64_t v58 = (uint64_t *)qword_25892D0;
    }
    memmove(v57, v58, v53);
  }
  v57[v53] = 0;
  if (byte_2589317 >= 0) {
    int v59 = (const std::string::value_type *)&qword_2589300;
  }
  else {
    int v59 = (const std::string::value_type *)qword_2589300;
  }
  if (byte_2589317 >= 0) {
    std::string::size_type v60 = byte_2589317;
  }
  else {
    std::string::size_type v60 = *(void *)&byte_2589308;
  }
  std::string::size_type v61 = std::string::append(&v281, v59, v60);
  long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v62;
  v61->__r_.__value_.__l.__size_ = 0;
  v61->__r_.__value_.__r.__words[2] = 0;
  v61->__r_.__value_.__r.__words[0] = 0;
  long long v63 = std::string::append(&__dst, "_Percentage");
  long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
  qword_258A2D0 = v63->__r_.__value_.__r.__words[2];
  xmmword_258A2C0 = v64;
  v63->__r_.__value_.__l.__size_ = 0;
  v63->__r_.__value_.__r.__words[2] = 0;
  v63->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_125;
    }
  }
  else if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_125;
  }
  operator delete(v281.__r_.__value_.__l.__data_);
LABEL_125:
  int v65 = byte_258A037;
  if (byte_258A037 >= 0) {
    size_t v66 = byte_258A037;
  }
  else {
    size_t v66 = qword_258A028;
  }
  int v67 = byte_25892E7;
  if (byte_25892E7 >= 0) {
    size_t v68 = byte_25892E7;
  }
  else {
    size_t v68 = unk_25892D8;
  }
  unint64_t v69 = v68 + v66;
  if (v68 + v66 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v69 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    unint64_t v70 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v68 + v66;
    if (!v66) {
      goto LABEL_138;
    }
    goto LABEL_134;
  }
  uint64_t v99 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v69 | 7) != 0x17) {
    uint64_t v99 = v69 | 7;
  }
  uint64_t v100 = v99 + 1;
  unint64_t v70 = (char *)operator new(v99 + 1);
  __dst.__r_.__value_.__l.__size_ = v68 + v66;
  __dst.__r_.__value_.__r.__words[2] = v100 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
  if (v66)
  {
LABEL_134:
    if (v65 >= 0) {
      long long v71 = &qword_258A020;
    }
    else {
      long long v71 = (uint64_t *)qword_258A020;
    }
    memmove(v70, v71, v66);
  }
LABEL_138:
  uint64_t v72 = &v70[v66];
  if (v68)
  {
    if (v67 >= 0) {
      long long v73 = &qword_25892D0;
    }
    else {
      long long v73 = (uint64_t *)qword_25892D0;
    }
    memmove(v72, v73, v68);
  }
  v72[v68] = 0;
  uint64_t v74 = std::string::append(&__dst, "_Duration");
  long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
  qword_258A2E8 = v74->__r_.__value_.__r.__words[2];
  xmmword_258A2D8 = v75;
  v74->__r_.__value_.__l.__size_ = 0;
  v74->__r_.__value_.__r.__words[2] = 0;
  v74->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v76 = byte_258A037;
  if (byte_258A037 >= 0) {
    size_t v77 = byte_258A037;
  }
  else {
    size_t v77 = qword_258A028;
  }
  int v78 = byte_25892E7;
  if (byte_25892E7 >= 0) {
    size_t v79 = byte_25892E7;
  }
  else {
    size_t v79 = unk_25892D8;
  }
  unint64_t v80 = v79 + v77;
  if (v79 + v77 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v80 <= 0x16)
  {
    qword_258A2F8 = 0;
    unk_258A300 = 0;
    qword_258A2F0 = 0;
    unint64_t v81 = &qword_258A2F0;
    byte_258A307 = v79 + v77;
    if (!v77) {
      goto LABEL_158;
    }
    goto LABEL_154;
  }
  uint64_t v101 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v80 | 7) != 0x17) {
    uint64_t v101 = v80 | 7;
  }
  uint64_t v102 = v101 + 1;
  unint64_t v81 = (uint64_t *)operator new(v101 + 1);
  qword_258A2F8 = v79 + v77;
  unk_258A300 = v102 | 0x8000000000000000;
  qword_258A2F0 = (uint64_t)v81;
  if (v77)
  {
LABEL_154:
    if (v76 >= 0) {
      int v82 = &qword_258A020;
    }
    else {
      int v82 = (uint64_t *)qword_258A020;
    }
    memmove(v81, v82, v77);
  }
LABEL_158:
  uint64_t v83 = (char *)v81 + v77;
  if (v79)
  {
    if (v78 >= 0) {
      uint64_t v84 = &qword_25892D0;
    }
    else {
      uint64_t v84 = (uint64_t *)qword_25892D0;
    }
    memmove(v83, v84, v79);
  }
  v83[v79] = 0;
  int v85 = byte_258A307;
  if (byte_258A307 >= 0) {
    size_t v86 = byte_258A307;
  }
  else {
    size_t v86 = qword_258A2F8;
  }
  unint64_t v87 = v86 + 5;
  if (v86 + 5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v87 >= 0x17)
  {
    uint64_t v103 = (v87 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v87 | 7) != 0x17) {
      uint64_t v103 = v87 | 7;
    }
    uint64_t v104 = v103 + 1;
    unint64_t v88 = (uint64_t *)operator new(v103 + 1);
    qword_258A310 = v86 + 5;
    unk_258A318 = v104 | 0x8000000000000000;
    qword_258A308 = (uint64_t)v88;
  }
  else
  {
    unint64_t v88 = &qword_258A308;
    qword_258A310 = 0;
    unk_258A318 = 0;
    qword_258A308 = 0;
    byte_258A31F = v86 + 5;
    if (!v86) {
      goto LABEL_205;
    }
  }
  if (v85 >= 0) {
    uint64_t v105 = &qword_258A2F0;
  }
  else {
    uint64_t v105 = (uint64_t *)qword_258A2F0;
  }
  memmove(v88, v105, v86);
LABEL_205:
  strcpy((char *)v88 + v86, "_Name");
  int v106 = byte_258A037;
  if (byte_258A037 >= 0) {
    size_t v107 = byte_258A037;
  }
  else {
    size_t v107 = qword_258A028;
  }
  int v108 = byte_25892E7;
  if (byte_25892E7 >= 0) {
    size_t v109 = byte_25892E7;
  }
  else {
    size_t v109 = unk_25892D8;
  }
  unint64_t v110 = v109 + v107;
  if (v109 + v107 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v110 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    unint64_t v111 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v109 + v107;
    if (!v107) {
      goto LABEL_218;
    }
    goto LABEL_214;
  }
  uint64_t v121 = (v110 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v110 | 7) != 0x17) {
    uint64_t v121 = v110 | 7;
  }
  uint64_t v122 = v121 + 1;
  unint64_t v111 = (char *)operator new(v121 + 1);
  __dst.__r_.__value_.__l.__size_ = v109 + v107;
  __dst.__r_.__value_.__r.__words[2] = v122 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v111;
  if (v107)
  {
LABEL_214:
    if (v106 >= 0) {
      int v112 = &qword_258A020;
    }
    else {
      int v112 = (uint64_t *)qword_258A020;
    }
    memmove(v111, v112, v107);
  }
LABEL_218:
  int v113 = &v111[v107];
  if (v109)
  {
    if (v108 >= 0) {
      unsigned int v114 = &qword_25892D0;
    }
    else {
      unsigned int v114 = (uint64_t *)qword_25892D0;
    }
    memmove(v113, v114, v109);
  }
  v113[v109] = 0;
  uint64_t v115 = std::string::append(&__dst, "_Connector_Type");
  long long v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
  qword_258A330 = v115->__r_.__value_.__r.__words[2];
  xmmword_258A320 = v116;
  v115->__r_.__value_.__l.__size_ = 0;
  v115->__r_.__value_.__r.__words[2] = 0;
  v115->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v117 = SHIBYTE(qword_258A330);
  if (qword_258A330 >= 0) {
    size_t v118 = HIBYTE(qword_258A330);
  }
  else {
    size_t v118 = *((void *)&xmmword_258A320 + 1);
  }
  unint64_t v119 = v118 + 6;
  if (v118 + 6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v119 >= 0x17)
  {
    uint64_t v123 = (v119 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v119 | 7) != 0x17) {
      uint64_t v123 = v119 | 7;
    }
    uint64_t v124 = v123 + 1;
    unint64_t v120 = (uint64_t *)operator new(v123 + 1);
    qword_258A340 = v118 + 6;
    unk_258A348 = v124 | 0x8000000000000000;
    qword_258A338 = (uint64_t)v120;
  }
  else
  {
    unint64_t v120 = &qword_258A338;
    qword_258A340 = 0;
    unk_258A348 = 0;
    qword_258A338 = 0;
    byte_258A34F = v118 + 6;
    if (!v118) {
      goto LABEL_243;
    }
  }
  if (v117 >= 0) {
    uint64_t v125 = &xmmword_258A320;
  }
  else {
    uint64_t v125 = (long long *)xmmword_258A320;
  }
  memmove(v120, v125, v118);
LABEL_243:
  strcpy((char *)v120 + v118, "_Power");
  int v126 = byte_258A037;
  if (byte_258A037 >= 0) {
    size_t v127 = byte_258A037;
  }
  else {
    size_t v127 = qword_258A028;
  }
  int v128 = byte_25892E7;
  if (byte_25892E7 >= 0) {
    size_t v129 = byte_25892E7;
  }
  else {
    size_t v129 = unk_25892D8;
  }
  unint64_t v130 = v129 + v127;
  if (v129 + v127 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v130 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    unint64_t v131 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v129 + v127;
    if (!v127) {
      goto LABEL_256;
    }
    goto LABEL_252;
  }
  uint64_t v160 = (v130 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v130 | 7) != 0x17) {
    uint64_t v160 = v130 | 7;
  }
  uint64_t v161 = v160 + 1;
  unint64_t v131 = (char *)operator new(v160 + 1);
  __dst.__r_.__value_.__l.__size_ = v129 + v127;
  __dst.__r_.__value_.__r.__words[2] = v161 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v131;
  if (v127)
  {
LABEL_252:
    if (v126 >= 0) {
      v132 = &qword_258A020;
    }
    else {
      v132 = (uint64_t *)qword_258A020;
    }
    memmove(v131, v132, v127);
  }
LABEL_256:
  uint64_t v133 = &v131[v127];
  if (v129)
  {
    if (v128 >= 0) {
      v134 = &qword_25892D0;
    }
    else {
      v134 = (uint64_t *)qword_25892D0;
    }
    memmove(v133, v134, v129);
  }
  v133[v129] = 0;
  if (byte_2589AAF >= 0) {
    uint64_t v135 = (const std::string::value_type *)&qword_2589A98;
  }
  else {
    uint64_t v135 = (const std::string::value_type *)qword_2589A98;
  }
  if (byte_2589AAF >= 0) {
    std::string::size_type v136 = byte_2589AAF;
  }
  else {
    std::string::size_type v136 = unk_2589AA0;
  }
  std::string::size_type v137 = std::string::append(&__dst, v135, v136);
  long long v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
  qword_258A360 = v137->__r_.__value_.__r.__words[2];
  xmmword_258A350 = v138;
  v137->__r_.__value_.__l.__size_ = 0;
  v137->__r_.__value_.__r.__words[2] = 0;
  v137->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v139 = byte_258A037;
  if (byte_258A037 >= 0) {
    size_t v140 = byte_258A037;
  }
  else {
    size_t v140 = qword_258A028;
  }
  int v141 = byte_25892E7;
  if (byte_25892E7 >= 0) {
    size_t v142 = byte_25892E7;
  }
  else {
    size_t v142 = unk_25892D8;
  }
  unint64_t v143 = v142 + v140;
  if (v142 + v140 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v143 <= 0x16)
  {
    memset(&v281, 0, sizeof(v281));
    unint64_t v144 = (char *)&v281;
    *((unsigned char *)&v281.__r_.__value_.__s + 23) = v142 + v140;
    if (!v140) {
      goto LABEL_282;
    }
    goto LABEL_278;
  }
  uint64_t v162 = (v143 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v143 | 7) != 0x17) {
    uint64_t v162 = v143 | 7;
  }
  uint64_t v163 = v162 + 1;
  unint64_t v144 = (char *)operator new(v162 + 1);
  v281.__r_.__value_.__l.__size_ = v142 + v140;
  v281.__r_.__value_.__r.__words[2] = v163 | 0x8000000000000000;
  v281.__r_.__value_.__r.__words[0] = (std::string::size_type)v144;
  if (v140)
  {
LABEL_278:
    if (v139 >= 0) {
      v145 = &qword_258A020;
    }
    else {
      v145 = (uint64_t *)qword_258A020;
    }
    memmove(v144, v145, v140);
  }
LABEL_282:
  v146 = &v144[v140];
  if (v142)
  {
    if (v141 >= 0) {
      v147 = &qword_25892D0;
    }
    else {
      v147 = (uint64_t *)qword_25892D0;
    }
    memmove(v146, v147, v142);
  }
  v146[v142] = 0;
  if (byte_2589317 >= 0) {
    uint64_t v148 = (const std::string::value_type *)&qword_2589300;
  }
  else {
    uint64_t v148 = (const std::string::value_type *)qword_2589300;
  }
  if (byte_2589317 >= 0) {
    std::string::size_type v149 = byte_2589317;
  }
  else {
    std::string::size_type v149 = *(void *)&byte_2589308;
  }
  std::string::size_type v150 = std::string::append(&v281, v148, v149);
  long long v151 = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v150->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v151;
  v150->__r_.__value_.__l.__size_ = 0;
  v150->__r_.__value_.__r.__words[2] = 0;
  v150->__r_.__value_.__r.__words[0] = 0;
  if (byte_2589AAF >= 0) {
    long long v152 = (const std::string::value_type *)&qword_2589A98;
  }
  else {
    long long v152 = (const std::string::value_type *)qword_2589A98;
  }
  if (byte_2589AAF >= 0) {
    std::string::size_type v153 = byte_2589AAF;
  }
  else {
    std::string::size_type v153 = unk_2589AA0;
  }
  std::string::size_type v154 = std::string::append(&__dst, v152, v153);
  long long v155 = *(_OWORD *)&v154->__r_.__value_.__l.__data_;
  qword_258A378 = v154->__r_.__value_.__r.__words[2];
  xmmword_258A368 = v155;
  v154->__r_.__value_.__l.__size_ = 0;
  v154->__r_.__value_.__r.__words[2] = 0;
  v154->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_301;
    }
  }
  else if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_301;
  }
  operator delete(v281.__r_.__value_.__l.__data_);
LABEL_301:
  byte_258A397 = 16;
  strcpy((char *)&xmmword_258A380, "Use_NACS_Adapter");
  byte_258A3AF = 16;
  strcpy(byte_258A398, "Start_Route_Sign");
  qword_258A3B0 = (uint64_t)operator new(0x20uLL);
  unk_258A3B8 = v276;
  strcpy((char *)qword_258A3B0, "Start_Route_Spoken_Primary");
  int v156 = byte_2588A47;
  if (byte_2588A47 >= 0) {
    size_t v157 = byte_2588A47;
  }
  else {
    size_t v157 = qword_2588A38;
  }
  unint64_t v158 = v157 + 27;
  if (v157 + 27 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v158 <= 0x16)
  {
    unint64_t v159 = &qword_258A3C8;
    qword_258A3D0 = 0;
    unk_258A3D8 = 0;
    qword_258A3C8 = 0;
    byte_258A3DF = v157 + 27;
LABEL_318:
    if (v156 >= 0) {
      uint64_t v166 = &qword_2588A30;
    }
    else {
      uint64_t v166 = (uint64_t *)qword_2588A30;
    }
    memmove(v159, v166, v157);
    goto LABEL_322;
  }
  uint64_t v164 = (v158 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v158 | 7) != 0x17) {
    uint64_t v164 = v158 | 7;
  }
  uint64_t v165 = v164 + 1;
  unint64_t v159 = (uint64_t *)operator new(v164 + 1);
  qword_258A3D0 = v157 + 27;
  unk_258A3D8 = v165 | 0x8000000000000000;
  qword_258A3C8 = (uint64_t)v159;
  if (v157) {
    goto LABEL_318;
  }
LABEL_322:
  strcpy((char *)v159 + v157, "Turn_Around_To_Route_Spoken");
  strcpy(&byte_258A3F7, "\t_Two_Lanes");
  strcpy((char *)&qword_258A3E0, "_One_Lane");
  strcpy(&byte_258A40F, "\n_Three_Lanes");
  byte_258A427 = 12;
  byte_258A43F = 11;
  strcpy((char *)&qword_258A428, "_Four_Lanes");
  byte_258A457 = 11;
  strcpy((char *)&qword_258A440, "_Five_Lanes");
  strcpy(&byte_258A46F, "\n_Seven_Lanes");
  strcpy((char *)&qword_258A458, "_Six_Lanes");
  byte_258A487 = 12;
  byte_258A49F = 12;
  strcpy((char *)&qword_258A488, "_Eight_Lanes");
  byte_258A4B7 = 12;
  strcpy((char *)&qword_258A4A0, "_Second_Lane");
  byte_258A4CF = 11;
  strcpy((char *)&qword_258A4B8, "_Third_Lane");
  byte_258A4E7 = 19;
  long long v270 = *(_OWORD *)"_Second_Third_Lanes";
  strcpy((char *)&xmmword_258A4D0, "_Second_Third_Lanes");
  byte_258A4FF = 4;
  strcpy((char *)&dword_258A4E8, "Left");
  byte_258A517 = 5;
  byte_258A504 = 116;
  dword_258A500 = 1751607634;
  byte_258A505 = 0;
  byte_258A52F = 6;
  strcpy((char *)&dword_258A518, "Middle");
  BYTE1(qword_258A540) = 0;
  WORD1(qword_258A540) = 0;
  HIDWORD(qword_258A540) = 0x10000000;
  strcpy((char *)dword_258A530, "Left_Second_Lane");
  BYTE1(qword_258A558) = 0;
  WORD1(qword_258A558) = 0;
  HIDWORD(qword_258A558) = 285212672;
  strcpy((char *)&dword_258A548, "Right_Second_Lan");
  qword_258A570 = 0xF00000000000000;
  strcpy((char *)&dword_258A560, "Left_Third_Lane");
  qword_258A588 = 0x1000000000000000;
  byte_258A57C = 116;
  dword_258A578 = 1751607634;
  dword_258A584 = 1701732684;
  unk_258A57D = *(void *)"_Third_Lane";
  v167 = (char *)operator new(0x19uLL);
  qword_258A590 = (uint64_t)v167;
  unk_258A598 = v280;
  *(_DWORD *)v167 = 1952867660;
  strcpy(v167 + 19, "anes");
  *(_OWORD *)(v167 + 4) = v270;
  v168 = (char *)operator new(0x20uLL);
  qword_258A5A8 = (uint64_t)v168;
  xmmword_258A5B0 = v279;
  *(_DWORD *)v168 = 1751607634;
  v168[4] = 116;
  strcpy(v168 + 20, "anes");
  *(_OWORD *)(v168 + 5) = v270;
  byte_258A5D7 = 5;
  strcpy((char *)&dword_258A5C0, "_Stay");
  byte_258A5EF = 13;
  strcpy((char *)&qword_258A5D8, "Continue_Sign");
  byte_258A607 = 8;
  strcpy((char *)&qword_258A5F0, "Continue");
  int v169 = byte_2589AC7;
  if (byte_2589AC7 >= 0) {
    size_t v170 = byte_2589AC7;
  }
  else {
    size_t v170 = qword_2589AB8;
  }
  unint64_t v171 = v170 + 8;
  if (v170 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v171 >= 0x17)
  {
    uint64_t v173 = (v171 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v171 | 7) != 0x17) {
      uint64_t v173 = v171 | 7;
    }
    uint64_t v174 = v173 + 1;
    uint64_t v175 = operator new(v173 + 1);
    qword_258A610 = v170 + 8;
    qword_258A618 = v174 | 0x8000000000000000;
    qword_258A608 = (uint64_t)v175;
    *uint64_t v175 = 0x65756E69746E6F43;
    unint64_t v172 = v175 + 1;
  }
  else
  {
    qword_258A618 = 0;
    HIBYTE(qword_258A618) = v170 + 8;
    qword_258A608 = 0x65756E69746E6F43;
    qword_258A610 = 0;
    unint64_t v172 = &qword_258A610;
    if (!v170) {
      goto LABEL_336;
    }
  }
  if (v169 >= 0) {
    v176 = &qword_2589AB0;
  }
  else {
    v176 = (uint64_t *)qword_2589AB0;
  }
  memmove(v172, v176, v170);
LABEL_336:
  *((unsigned char *)v172 + v170) = 0;
  int v177 = SHIBYTE(qword_2589B20);
  if (qword_2589B20 >= 0) {
    size_t v178 = HIBYTE(qword_2589B20);
  }
  else {
    size_t v178 = unk_2589B18;
  }
  unint64_t v179 = v178 + 8;
  if (v178 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v179 >= 0x17)
  {
    uint64_t v181 = (v179 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v179 | 7) != 0x17) {
      uint64_t v181 = v179 | 7;
    }
    uint64_t v182 = v181 + 1;
    uint64_t v183 = operator new(v181 + 1);
    qword_258A628 = v178 + 8;
    qword_258A630 = v182 | 0x8000000000000000;
    qword_258A620 = (uint64_t)v183;
    *uint64_t v183 = qword_258A5F0;
    unint64_t v180 = v183 + 1;
  }
  else
  {
    qword_258A630 = 0;
    HIBYTE(qword_258A630) = v178 + 8;
    qword_258A620 = qword_258A5F0;
    qword_258A628 = 0;
    unint64_t v180 = &qword_258A628;
    if (!v178) {
      goto LABEL_350;
    }
  }
  if (v177 >= 0) {
    v184 = &qword_2589B10;
  }
  else {
    v184 = (uint64_t *)qword_2589B10;
  }
  memmove(v180, v184, v178);
LABEL_350:
  *((unsigned char *)v180 + v178) = 0;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 83;
  v283[23] = 2;
  strcpy(v283, "SW");
  v285[7] = 1;
  LOWORD(v284[0]) = 87;
  HIBYTE(v286) = 2;
  strcpy(&v285[8], "NW");
  HIBYTE(v288) = 1;
  LOWORD(__p[0]) = 78;
  HIBYTE(v290) = 2;
  strcpy((char *)&v289, "NE");
  HIBYTE(v292) = 1;
  LOWORD(v291) = 69;
  HIBYTE(v294) = 2;
  strcpy((char *)&v293, "SE");
  sub_4BDC0C(qword_258A638, (uint64_t)&__dst, 8uLL);
  if (SHIBYTE(v294) < 0)
  {
    operator delete((void *)v293);
    if ((SHIBYTE(v292) & 0x80000000) == 0)
    {
LABEL_352:
      if ((SHIBYTE(v290) & 0x80000000) == 0) {
        goto LABEL_353;
      }
      goto LABEL_391;
    }
  }
  else if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
    goto LABEL_352;
  }
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_353:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_354;
    }
    goto LABEL_392;
  }
LABEL_391:
  operator delete((void *)v289);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_354:
    if ((SHIBYTE(v286) & 0x80000000) == 0) {
      goto LABEL_355;
    }
    goto LABEL_393;
  }
LABEL_392:
  operator delete(__p[0]);
  if ((SHIBYTE(v286) & 0x80000000) == 0)
  {
LABEL_355:
    if ((v285[7] & 0x80000000) == 0) {
      goto LABEL_356;
    }
    goto LABEL_394;
  }
LABEL_393:
  operator delete(*(void **)&v285[8]);
  if ((v285[7] & 0x80000000) == 0)
  {
LABEL_356:
    if ((v283[23] & 0x80000000) == 0) {
      goto LABEL_357;
    }
LABEL_395:
    operator delete(*(void **)v283);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_358;
    }
    goto LABEL_396;
  }
LABEL_394:
  operator delete(v284[0]);
  if ((v283[23] & 0x80000000) != 0) {
    goto LABEL_395;
  }
LABEL_357:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_358;
  }
LABEL_396:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_358:
  byte_258A667 = 13;
  strcpy((char *)&qword_258A650, "{instruction}");
  byte_258A67F = 20;
  strcpy(byte_258A668, "{primaryInstruction}");
  strcpy((char *)&xmmword_258A680, "{secondaryInstruction}");
  HIBYTE(word_258A696) = 22;
  qword_258A698 = (uint64_t)operator new(0x20uLL);
  unk_258A6A0 = v278;
  strcpy((char *)qword_258A698, "{andSecondaryInstruction}");
  qword_258A6B0 = (uint64_t)operator new(0x20uLL);
  unk_258A6B8 = v279;
  strcpy((char *)qword_258A6B0, "{toSecondaryInstruction}");
  byte_258A6DF = 21;
  strcpy(byte_258A6C8, "{continueInstruction}");
  qword_258A6E0 = (uint64_t)operator new(0x20uLL);
  unk_258A6E8 = v276;
  strcpy((char *)qword_258A6E0, "{thenSecondaryInstruction}");
  byte_258A70F = 14;
  strcpy((char *)&qword_258A6F8, "{instruction1}");
  byte_258A727 = 14;
  strcpy((char *)&qword_258A710, "{instruction2}");
  strcpy(&byte_258A73F, "\n{nextDistance}");
  strcpy((char *)&qword_258A728, "{distance}");
  byte_258A757 = 14;
  byte_258A76F = 16;
  strcpy(byte_258A758, "{valid_distance}");
  strcpy(&byte_258A787, "\n{valid_distance}");
  strcpy((char *)&qword_258A770, "{distance}");
  byte_258A79F = 16;
  byte_258A7B7 = 15;
  strcpy((char *)&qword_258A7A0, "{ClimbDistance}");
  byte_258A7CF = 17;
  strcpy(byte_258A7B8, "{DescentDistance}");
  byte_258A7E7 = 13;
  strcpy((char *)&qword_258A7D0, "{nonBrkSpace}");
  byte_258A7FF = 9;
  strcpy((char *)&qword_258A7E8, "{newLine}");
  byte_258A817 = 6;
  word_258A804 = -24382;
  dword_258A800 = -1211981630;
  byte_258A806 = 0;
  byte_258A82F = 2;
  word_258A818 = -24382;
  byte_258A81A = 0;
  byte_258A847 = 1;
  word_258A830 = 10;
  byte_258A85F = 1;
  word_258A848 = 32;
  byte_258A877 = 2;
  strcpy((char *)&word_258A860, "\n\n");
  strcpy(&byte_258A88F, "\t{TowardShield1}");
  strcpy((char *)&qword_258A878, "{Shield1}");
  byte_258A8A7 = 15;
  strcpy(&byte_258A8BF, "\t{TowardShield2}");
  strcpy((char *)&qword_258A8A8, "{Shield2}");
  byte_258A8D7 = 15;
  byte_258A8EF = 12;
  strcpy((char *)&qword_258A8D8, "{Direction1}");
  byte_258A907 = 12;
  strcpy((char *)&qword_258A8F0, "{Direction2}");
  byte_258A91F = 18;
  strcpy((char *)&xmmword_258A908, "{TowardDirection1}");
  byte_258A937 = 18;
  strcpy((char *)&xmmword_258A920, "{TowardDirection2}");
  byte_258A94F = 7;
  strcpy((char *)&dword_258A938, "{Icon1}");
  byte_258A967 = 7;
  strcpy((char *)&dword_258A950, "{Icon2}");
  byte_258A968[23] = 14;
  strcpy(byte_258A968, "{Intersection}");
  byte_258A997 = 6;
  strcpy((char *)&xmmword_258A980, "{Road}");
  byte_258A9AF = 7;
  strcpy((char *)&dword_258A998, "{Road1}");
  byte_258A9C7 = 7;
  strcpy((char *)&xmmword_258A9B0, "{Road2}");
  strcpy(&byte_258A9DF, "\n{Freeway}");
  strcpy((char *)&qword_258A9C8, "{Elevator}");
  strcpy(&byte_258A9F7, "\t{Ferry}");
  byte_258AA0F = 7;
  byte_258AA27 = 13;
  strcpy((char *)&xmmword_258AA10, "{ShuttleName}");
  byte_258AA3F = 11;
  strcpy((char *)&xmmword_258AA28, "{Signpost1}");
  byte_258AA57 = 11;
  strcpy((char *)&xmmword_258AA40, "{Signpost2}");
  byte_258AA6F = 12;
  strcpy((char *)&xmmword_258AA58, "{ExitNumber}");
  strcpy(&byte_258AA87, "\t{Name}");
  strcpy((char *)&xmmword_258AA70, "{Address}");
  byte_258AA9F = 6;
  byte_258AAB7 = 11;
  strcpy((char *)&xmmword_258AAA0, "{PlaceName}");
  byte_258AACF = 14;
  strcpy((char *)&xmmword_258AAB8, "{ElevatorName}");
  byte_258AAE7 = 15;
  strcpy((char *)&xmmword_258AAD0, "{EscalatorName}");
  byte_258AAFF = 12;
  strcpy((char *)&xmmword_258AAE8, "{StairsName}");
  strcpy(&byte_258AB17, "\n{BridgeName}");
  strcpy((char *)&xmmword_258AB00, "{RampName}");
  byte_258AB2F = 12;
  byte_258AB47 = 12;
  strcpy((char *)&xmmword_258AB30, "{TunnelName}");
  byte_258AB5F = 13;
  strcpy((char *)&xmmword_258AB48, "{CustomLabel}");
  std::string __dst = *(std::string *)byte_258A968;
  *(_OWORD *)v283 = xmmword_258A980;
  *(void *)&v283[16] = unk_258A990;
  *(_OWORD *)v284 = *(_OWORD *)&dword_258A998;
  *(void *)uint64_t v285 = unk_258A9A8;
  *(_OWORD *)&v285[8] = xmmword_258A9B0;
  uint64_t v286 = unk_258A9C0;
  *(_OWORD *)std::string __p = *(_OWORD *)&qword_258A9C8;
  uint64_t v288 = unk_258A9D8;
  uint64_t v290 = unk_258A9F0;
  long long v289 = xmmword_258A9E0;
  long long v291 = *(_OWORD *)&dword_258A9F8;
  uint64_t v292 = unk_258AA08;
  uint64_t v294 = unk_258AA20;
  long long v293 = xmmword_258AA10;
  long long v295 = xmmword_258AA28;
  uint64_t v296 = unk_258AA38;
  uint64_t v298 = unk_258AA50;
  long long v297 = xmmword_258AA40;
  long long v299 = xmmword_258AA58;
  long long v301 = xmmword_258AA70;
  uint64_t v300 = unk_258AA68;
  uint64_t v302 = unk_258AA80;
  long long v303 = xmmword_258AA88;
  long long v305 = xmmword_258AAA0;
  uint64_t v304 = unk_258AA98;
  uint64_t v306 = unk_258AAB0;
  long long v307 = xmmword_258AAB8;
  long long v309 = xmmword_258AAD0;
  uint64_t v308 = unk_258AAC8;
  uint64_t v310 = unk_258AAE0;
  long long v311 = xmmword_258AAE8;
  long long v313 = xmmword_258AB00;
  uint64_t v312 = unk_258AAF8;
  uint64_t v314 = unk_258AB10;
  long long v315 = xmmword_258AB18;
  long long v317 = xmmword_258AB30;
  uint64_t v316 = unk_258AB28;
  uint64_t v318 = unk_258AB40;
  uint64_t v320 = unk_258AB58;
  long long v319 = xmmword_258AB48;
  sub_4BDC0C(qword_258AB60, (uint64_t)&__dst, 0x15uLL);
  if (SHIBYTE(v320) < 0)
  {
    operator delete((void *)v319);
    if ((SHIBYTE(v318) & 0x80000000) == 0)
    {
LABEL_360:
      if ((SHIBYTE(v316) & 0x80000000) == 0) {
        goto LABEL_361;
      }
      goto LABEL_399;
    }
  }
  else if ((SHIBYTE(v318) & 0x80000000) == 0)
  {
    goto LABEL_360;
  }
  operator delete((void *)v317);
  if ((SHIBYTE(v316) & 0x80000000) == 0)
  {
LABEL_361:
    if ((SHIBYTE(v314) & 0x80000000) == 0) {
      goto LABEL_362;
    }
    goto LABEL_400;
  }
LABEL_399:
  operator delete((void *)v315);
  if ((SHIBYTE(v314) & 0x80000000) == 0)
  {
LABEL_362:
    if ((SHIBYTE(v312) & 0x80000000) == 0) {
      goto LABEL_363;
    }
    goto LABEL_401;
  }
LABEL_400:
  operator delete((void *)v313);
  if ((SHIBYTE(v312) & 0x80000000) == 0)
  {
LABEL_363:
    if ((SHIBYTE(v310) & 0x80000000) == 0) {
      goto LABEL_364;
    }
    goto LABEL_402;
  }
LABEL_401:
  operator delete((void *)v311);
  if ((SHIBYTE(v310) & 0x80000000) == 0)
  {
LABEL_364:
    if ((SHIBYTE(v308) & 0x80000000) == 0) {
      goto LABEL_365;
    }
    goto LABEL_403;
  }
LABEL_402:
  operator delete((void *)v309);
  if ((SHIBYTE(v308) & 0x80000000) == 0)
  {
LABEL_365:
    if ((SHIBYTE(v306) & 0x80000000) == 0) {
      goto LABEL_366;
    }
    goto LABEL_404;
  }
LABEL_403:
  operator delete((void *)v307);
  if ((SHIBYTE(v306) & 0x80000000) == 0)
  {
LABEL_366:
    if ((SHIBYTE(v304) & 0x80000000) == 0) {
      goto LABEL_367;
    }
    goto LABEL_405;
  }
LABEL_404:
  operator delete((void *)v305);
  if ((SHIBYTE(v304) & 0x80000000) == 0)
  {
LABEL_367:
    if ((SHIBYTE(v302) & 0x80000000) == 0) {
      goto LABEL_368;
    }
    goto LABEL_406;
  }
LABEL_405:
  operator delete((void *)v303);
  if ((SHIBYTE(v302) & 0x80000000) == 0)
  {
LABEL_368:
    if ((SHIBYTE(v300) & 0x80000000) == 0) {
      goto LABEL_369;
    }
    goto LABEL_407;
  }
LABEL_406:
  operator delete((void *)v301);
  if ((SHIBYTE(v300) & 0x80000000) == 0)
  {
LABEL_369:
    if ((SHIBYTE(v298) & 0x80000000) == 0) {
      goto LABEL_370;
    }
    goto LABEL_408;
  }
LABEL_407:
  operator delete((void *)v299);
  if ((SHIBYTE(v298) & 0x80000000) == 0)
  {
LABEL_370:
    if ((SHIBYTE(v296) & 0x80000000) == 0) {
      goto LABEL_371;
    }
    goto LABEL_409;
  }
LABEL_408:
  operator delete((void *)v297);
  if ((SHIBYTE(v296) & 0x80000000) == 0)
  {
LABEL_371:
    if ((SHIBYTE(v294) & 0x80000000) == 0) {
      goto LABEL_372;
    }
    goto LABEL_410;
  }
LABEL_409:
  operator delete((void *)v295);
  if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
LABEL_372:
    if ((SHIBYTE(v292) & 0x80000000) == 0) {
      goto LABEL_373;
    }
    goto LABEL_411;
  }
LABEL_410:
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_373:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_374;
    }
    goto LABEL_412;
  }
LABEL_411:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_374:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_375;
    }
    goto LABEL_413;
  }
LABEL_412:
  operator delete((void *)v289);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_375:
    if ((SHIBYTE(v286) & 0x80000000) == 0) {
      goto LABEL_376;
    }
    goto LABEL_414;
  }
LABEL_413:
  operator delete(__p[0]);
  if ((SHIBYTE(v286) & 0x80000000) == 0)
  {
LABEL_376:
    if ((v285[7] & 0x80000000) == 0) {
      goto LABEL_377;
    }
    goto LABEL_415;
  }
LABEL_414:
  operator delete(*(void **)&v285[8]);
  if ((v285[7] & 0x80000000) == 0)
  {
LABEL_377:
    if ((v283[23] & 0x80000000) == 0) {
      goto LABEL_378;
    }
LABEL_416:
    operator delete(*(void **)v283);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_379;
    }
    goto LABEL_417;
  }
LABEL_415:
  operator delete(v284[0]);
  if ((v283[23] & 0x80000000) != 0) {
    goto LABEL_416;
  }
LABEL_378:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_379;
  }
LABEL_417:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_379:
  qword_258AB78 = (uint64_t)operator new(0x19uLL);
  unk_258AB80 = v280;
  strcpy((char *)qword_258AB78, "From_User_Location_List");
  byte_258ABA7 = 20;
  strcpy(byte_258AB90, "Origin_Waypoint_List");
  qword_258ABA8 = (uint64_t)operator new(0x20uLL);
  unk_258ABB0 = v276;
  strcpy((char *)qword_258ABA8, "Intermediate_Waypoint_List");
  unk_258ABC0 = operator new(0x20uLL);
  unk_258ABC8 = v278;
  strcpy(unk_258ABC0, "Destination_Waypoint_List");
  byte_258ABEF = 15;
  strcpy(byte_258ABD8, "{toDestination}");
  byte_258AC07 = 13;
  strcpy((char *)&xmmword_258ABF0, "{Destination}");
  byte_258AC1F = 7;
  strcpy(byte_258AC08, "To_Home");
  byte_258AC37 = 14;
  strcpy(byte_258AC20, "To_ContactHome");
  byte_258AC4F = 7;
  strcpy(byte_258AC38, "To_Work");
  byte_258AC67 = 14;
  strcpy(byte_258AC50, "To_ContactWork");
  strcpy(&byte_258AC7F, "\nTo_Business");
  strcpy(byte_258AC68, "To_Address");
  byte_258AC97 = 11;
  byte_258ACAF = 16;
  strcpy(byte_258AC98, "To_Other_Contact");
  strcpy(&byte_258ACC7, "\tTo_ContactSchool");
  strcpy(byte_258ACB0, "To_School");
  byte_258ACDF = 16;
  byte_258ACF7 = 17;
  strcpy(byte_258ACE0, "To_PersonLocation");
  qword_258ACF8 = (uint64_t)operator new(0x20uLL);
  unk_258AD00 = v277;
  strcpy((char *)qword_258ACF8, "To_ContactCustomLabelAddress");
  byte_258AD27 = 7;
  strcpy((char *)&dword_258AD10, "At_Home");
  byte_258AD3F = 14;
  strcpy((char *)&qword_258AD28, "At_ContactHome");
  byte_258AD57 = 7;
  strcpy((char *)&dword_258AD40, "At_Work");
  byte_258AD6F = 14;
  strcpy((char *)&qword_258AD58, "At_ContactWork");
  strcpy(&byte_258AD87, "\nAt_Business");
  strcpy((char *)&qword_258AD70, "At_Address");
  byte_258AD9F = 11;
  byte_258ADB7 = 16;
  strcpy(byte_258ADA0, "At_Other_Contact");
  byte_258ADCF = 4;
  strcpy((char *)&dword_258ADB8, "Home");
  byte_258ADE7 = 11;
  strcpy((char *)&qword_258ADD0 + 7, "Home");
  qword_258ADD0 = *(void *)&v263[16];
  byte_258ADFF = 4;
  strcpy((char *)&dword_258ADE8, "Work");
  byte_258AE17 = 11;
  strcpy((char *)&qword_258AE00 + 7, "Work");
  qword_258AE00 = *(void *)v263;
  byte_258AE2F = 7;
  strcpy((char *)&dword_258AE18, "Address");
  byte_258AE47 = 8;
  strcpy((char *)&qword_258AE30, "Business");
  byte_258AE5F = 13;
  qword_258AE48 = *(void *)&v263[48];
  *(uint64_t *)((char *)&qword_258AE48 + 5) = *(void *)&v263[32];
  byte_258AE55 = 0;
  byte_258AE77 = 6;
  strcpy((char *)&dword_258AE60, "School");
  byte_258AE8F = 13;
  strcpy((char *)&qword_258AE78, "ContactSchool");
  byte_258AEA7 = 14;
  strcpy((char *)&qword_258AE90, "PersonLocation");
  qword_258AEA8 = (uint64_t)operator new(0x20uLL);
  xmmword_258AEB0 = v278;
  strcpy((char *)qword_258AEA8, "ContactCustomLabelAddress");
  if (byte_258AC07 < 0)
  {
    sub_4200(&xmmword_258AEC0, (void *)xmmword_258ABF0, *((unint64_t *)&xmmword_258ABF0 + 1));
  }
  else
  {
    xmmword_258AEC0 = xmmword_258ABF0;
    qword_258AED0 = unk_258AC00;
  }
  byte_258AEEF = 16;
  strcpy((char *)&xmmword_258AED8, "{PrevExitNumber}");
  byte_258AF07 = 10;
  strcpy((char *)&qword_258AEF0, "{PrevRoad}");
  qword_258AF08 = (uint64_t)operator new(0x20uLL);
  unk_258AF10 = v279;
  strcpy((char *)qword_258AF08, "{RouteTotalExpectedTime}");
  byte_258AF37 = 18;
  strcpy(byte_258AF20, "{ChargePercentage}");
  qword_258AF38 = (uint64_t)operator new(0x20uLL);
  unk_258AF40 = v273;
  strcpy((char *)qword_258AF38, "{RemainingChargePercentage}");
  byte_258AF67 = 16;
  strcpy(byte_258AF50, "{ChargeDuration}");
  byte_258AF7F = 15;
  strcpy((char *)&qword_258AF68, "{ConnectorType}");
  byte_258AF97 = 19;
  strcpy(byte_258AF80, "{ChargeStationName}");
  byte_258AFAF = 7;
  strcpy((char *)&dword_258AF98, "{Power}");
  byte_258AFC7 = 13;
  strcpy((char *)&qword_258AFB0, "{VehicleName}");
  byte_258AFDF = 18;
  strcpy((char *)&xmmword_258AFC8, "{AreaIncidentName}");
  byte_258AFF7 = 14;
  strcpy((char *)&qword_258AFE0, "{AreaIncident}");
  byte_258B00F = 16;
  strcpy((char *)&xmmword_258AFF8, "{AffectedRegion}");
  byte_258B027 = 21;
  strcpy(byte_258B010, "{AreaIncidentWeblink}");
  byte_258B03F = 20;
  strcpy((char *)&xmmword_258B028, "{AreaIncidentAgency}");
  byte_258B057 = 11;
  strcpy((char *)&qword_258B040, "{IssueTime}");
  byte_258B06F = 12;
  strcpy((char *)&qword_258B058, "{UpdateTime}");
  byte_258B087 = 11;
  strcpy((char *)&qword_258B070, "{IssueDate}");
  byte_258B09F = 12;
  strcpy((char *)&qword_258B088, "{UpdateDate}");
  qword_258B0A0 = (uint64_t)operator new(0x20uLL);
  unk_258B0A8 = v279;
  strcpy((char *)qword_258B0A0, "{AreaIncidentDataSource}");
  byte_258B0CF = 13;
  strcpy((char *)&qword_258B0B8, "{AreaHectare}");
  byte_258B0E7 = 10;
  strcpy((char *)&qword_258B0D0, "{AreaAcre}");
  qword_258B0E8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_258B0F0 = v275;
  strcpy((char *)qword_258B0E8, "{WildfirePercentageContained}");
  qword_258B100 = (uint64_t)operator new(0x28uLL);
  unk_258B108 = v267[1];
  strcpy((char *)qword_258B100, "{WildfireExpectedContainmentDate}");
  qword_258B118 = (uint64_t)operator new(0x20uLL);
  unk_258B120 = v277;
  strcpy((char *)qword_258B118, "{ServerRecommendedRouteName}");
  qword_258B130 = (uint64_t)operator new(0x20uLL);
  unk_258B138 = v277;
  strcpy((char *)qword_258B130, "{ServerNonRecommendedRoute1}");
  qword_258B148 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_258B150 = v277;
  strcpy((char *)qword_258B148, "{ServerNonRecommendedRoute2}");
  byte_258B177 = 12;
  strcpy((char *)&qword_258B160, "{ClientDest}");
  byte_258B18F = 6;
  strcpy((char *)&dword_258B178, "{Name}");
  qword_258B190 = (uint64_t)operator new(0x20uLL);
  unk_258B198 = v269;
  strcpy((char *)qword_258B190, "ProactiveAlert_FasterRouteTitle");
  qword_258B1A8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_258B1B0 = v276;
  strcpy((char *)qword_258B1A8, "ProactiveAlert_RoadClosure");
  qword_258B1C0 = (uint64_t)operator new(0x30uLL);
  unk_258B1C8 = v271;
  strcpy((char *)qword_258B1C0, "ProactiveAlert_UnusuallyHeavyTrafficOnTwo");
  qword_258B1D8 = (uint64_t)operator new(0x28uLL);
  unk_258B1E0 = v274;
  strcpy((char *)qword_258B1D8, "ProactiveAlert_FasterRouteTitle_to_Home");
  qword_258B1F0 = (uint64_t)operator new(0x28uLL);
  unk_258B1F8 = v274;
  strcpy((char *)qword_258B1F0, "ProactiveAlert_FasterRouteTitle_to_Work");
  qword_258B208 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_258B210 = v274;
  strcpy((char *)qword_258B208, "ProactiveAlert_FasterRouteTitle_to_Name");
  qword_258B220 = (uint64_t)operator new(0x30uLL);
  unk_258B228 = xmmword_20B93B0;
  strcpy((char *)qword_258B220, "ProactiveAlert_FasterRouteTitle_to_StreetName");
  byte_258B24F = 17;
  strcpy(byte_258B238, "Proactive_Driving");
  strcpy(&byte_258B267, "\n{RouteName}");
  strcpy((char *)&qword_258B250, "_RouteName");
  byte_258B27F = 11;
  qword_258B280 = (uint64_t)operator new(0x28uLL);
  unk_258B288 = v267[1];
  strcpy((char *)qword_258B280, "Pass_Traffic_Light_Spoken_Primary");
  qword_258B298 = (uint64_t)operator new(0x20uLL);
  unk_258B2A0 = v275;
  strcpy((char *)qword_258B298, "Pass_Stop_Sign_Spoken_Primary");
  unk_258B2B0 = operator new(0x20uLL);
  unk_258B2B8 = v267[0];
  strcpy(unk_258B2B0, "Pass_Roundabout_Spoken_Primary");
  strcpy(&byte_258B2DF, "\nBannerBody");
  strcpy(byte_258B2C8, "BannerHead");
  strcpy(&byte_258B2F7, "\nBannerDescription");
  byte_258B30F = 17;
  strcpy(&byte_258B327, "\n_Incident");
  strcpy((char *)&qword_258B310, "VoiceAlert");
  strcpy(&byte_258B33F, "\t_Area_Incident");
  byte_258B357 = 14;
  byte_258B36F = 15;
  strcpy((char *)&qword_258B358, "_Area_Incidents");
  strcpy(&byte_258B387, "\t_Crash");
  strcpy((char *)&qword_258B370, "_Accident");
  byte_258B39F = 6;
  byte_258B3B7 = 16;
  strcpy((char *)&xmmword_258B3A0, "_Congestion_Zone");
  strcpy(&byte_258B3CF, "\n_Environmental_Zone");
  strcpy((char *)&qword_258B3B8, "_Toll_Zone");
  byte_258B3E7 = 19;
  BYTE1(qword_258B3F8) = 116;
  WORD1(qword_258B3F8) = 0;
  HIDWORD(qword_258B3F8) = 301989888;
  strcpy(byte_258B400, "_Construction");
  strcpy((char *)&qword_258B3E8, "_Incident_Accide");
  byte_258B417 = 13;
  byte_258B42F = 7;
  strcpy((char *)&dword_258B418, "_Hazard");
  byte_258B447 = 12;
  strcpy((char *)&qword_258B430, "_LaneClosure");
  byte_258B45F = 12;
  strcpy((char *)&qword_258B448, "_LaneTrailer");
  qmemcpy(&byte_258B477, "\t_LaneTrailer", 13);
  strcpy((char *)&qword_258B460, "_Shoulder");
  qword_258B488 = 0x1500007200000000;
  *(void *)algn_258B484 = *(void *)"_Shoulder";
  strcpy((char *)&xmmword_258B490, "_Causing_Traffic_Delay");
  HIBYTE(word_258B4A6) = 22;
  byte_258B4BF = 6;
  strcpy((char *)&dword_258B4A8, "_Timed");
  byte_258B4D7 = 12;
  strcpy((char *)&qword_258B4C0, "_HasDistance");
  byte_258B4EF = 8;
  strcpy((char *)&qword_258B4D8, "_Closure");
  strcpy(&byte_258B507, "\n_BadRoad");
  strcpy((char *)&qword_258B4F0, "_NoReroute");
  byte_258B51F = 8;
  byte_258B537 = 12;
  strcpy((char *)&qword_258B520, "_TollTrailer");
  byte_258B54F = 12;
  strcpy((char *)&qword_258B538, "_BestTrailer");
  byte_258B567 = 8;
  strcpy((char *)&qword_258B550, "_Trailer");
  byte_258B57F = 18;
  strcpy((char *)&xmmword_258B568, "_Secondary_Trailer");
  byte_258B597 = 8;
  strcpy((char *)&qword_258B580, "_Savings");
  byte_258B5AF = 8;
  strcpy((char *)&qword_258B598, "_AltRoad");
  byte_258B5C7 = 6;
  strcpy((char *)&dword_258B5B0, "_Named");
  byte_258B5DF = 6;
  strcpy((char *)&dword_258B5C8, "_NAMED");
  byte_258B5F7 = 22;
  strcpy((char *)&xmmword_258B5E0, "_Named_Suggested_Route");
  qword_258B610 = 0x1000000000000000;
  xmmword_258B600 = xmmword_20E81D0;
  byte_258B62F = 11;
  strcpy((char *)&qword_258B618, "_Speed_Trap");
  byte_258B647 = 4;
  strcpy((char *)&dword_258B630, "_UGI");
  byte_258B65F = 12;
  strcpy((char *)&qword_258B648, "_Safer_Route");
  qword_258B660 = (uint64_t)operator new(0x20uLL);
  unk_258B668 = v269;
  strcpy((char *)qword_258B660, "BlockedRouteByBlockingIncident_");
  qword_258B678 = (uint64_t)operator new(0x28uLL);
  long long v270 = xmmword_20B9280;
  unk_258B680 = xmmword_20B9280;
  strcpy((char *)qword_258B678, "BlockedRouteByManeuverRestriction_");
  qword_258B690 = (uint64_t)operator new(0x20uLL);
  unk_258B698 = v267[0];
  strcpy((char *)qword_258B690, "BlockedRouteByTimeRestriction_");
  qword_258B6A8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_258B6B0 = xmmword_20B8FD0;
  strcpy((char *)qword_258B6A8, "SuggestRouteToAvoidBlockingIncident_");
  qword_258B6C0 = (uint64_t)operator new(0x30uLL);
  unk_258B6C8 = xmmword_20B9380;
  strcpy((char *)qword_258B6C0, "SuggestRouteToAvoidBlockingManeuverRestriction_");
  qword_258B6D8 = (uint64_t)operator new(0x30uLL);
  unk_258B6E0 = xmmword_20B93E0;
  strcpy((char *)qword_258B6D8, "SuggestRouteToAvoidBlockingTimeRestriction_");
  byte_258B707 = 1;
  word_258B6F0 = 95;
  strcpy((char *)&xmmword_258B708, "IncidentsCausingDelay_");
  byte_258B71F = 22;
  qword_258B720 = (uint64_t)operator new(0x19uLL);
  unk_258B728 = v280;
  strcpy((char *)qword_258B720, "NonVotableRoadIncident_");
  byte_258B74F = 20;
  strcpy(byte_258B738, "VotableRoadIncident_");
  byte_258B767 = 13;
  strcpy((char *)&qword_258B750, "AreaIncident_");
  byte_258B77F = 15;
  strcpy((char *)&qword_258B768, "CongestionZone_");
  qword_258B780 = (uint64_t)operator new(0x20uLL);
  unk_258B788 = v279;
  strcpy((char *)qword_258B780, "EVModifiedChargingStops_");
  byte_258B7AF = 13;
  strcpy((char *)&qword_258B798, "EVDisconnect_");
  byte_258B7C7 = 12;
  strcpy((char *)&qword_258B7B0, "EVReconnect_");
  qword_258B7C8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_258B7D0 = v277;
  strcpy((char *)qword_258B7C8, "EVOfflineToOnlineTransition_");
  byte_258B7F7 = 13;
  strcpy((char *)&qword_258B7E0, "EVOfflineSAR_");
  byte_258B80F = 21;
  strcpy((char *)&xmmword_258B7F8, "EVTowingNotSupported_");
  byte_258B827 = 18;
  strcpy(algn_258B810, "EVInfeasibleRoute_");
  qword_258B828 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_258B830 = xmmword_20B8DF0;
  strcpy((char *)qword_258B828, "SuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_258B840 = (uint64_t)operator new(0x40uLL);
  unk_258B848 = xmmword_20B98C0;
  strcpy((char *)qword_258B840, "LCSuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_258B858 = (uint64_t)operator new(0x30uLL);
  unk_258B860 = v272;
  strcpy((char *)qword_258B858, "SuggestRouteAddingStopsForEVInfeasibleRoute_");
  qmemcpy(v267, "InfeasibleRoute_ngStopsForEVInfe", sizeof(v267));
  qword_258B870 = (uint64_t)operator new(0x30uLL);
  *(_WORD *)&v263[50] = 0;
  *(_DWORD *)&v263[52] = 0;
  *(void *)&v263[56] = 0x8000000000000030;
  unk_258B878 = xmmword_20B9A80;
  strcpy((char *)qword_258B870, "LCSuggestRouteAddingStopsForEVInfeasibleRoute_");
  strcpy(v263, "InfeasibleRoute_dingStopsForEVInLCSuggestRouteAd.");
  qword_258B888 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_258B890 = v271;
  strcpy((char *)qword_258B888, "SuggestRouteAddingStopsToIncreaseDestSoc_");
  v185 = operator new(0x30uLL);
  qword_258B8A0 = (uint64_t)v185;
  unk_258B8A8 = v272;
  _OWORD *v185 = *(_OWORD *)"SuggestRouteAddingStopsForEVInfeasibleRoute_";
  v185[1] = v267[1];
  *(_OWORD *)((char *)v185 + 28) = v267[0];
  *((unsigned char *)v185 + 44) = 0;
  qword_258B8B8 = (uint64_t)operator new(0x28uLL);
  unk_258B8C0 = v270;
  strcpy((char *)qword_258B8B8, "SuggestDetourWithHigherArrivalSOC_");
  v186 = operator new(0x30uLL);
  qword_258B8D0 = (uint64_t)v186;
  unk_258B8D8 = *(_OWORD *)&v263[48];
  _OWORD *v186 = *(_OWORD *)&v263[32];
  v186[1] = *(_OWORD *)&v263[16];
  *(_OWORD *)((char *)v186 + 30) = *(_OWORD *)v263;
  *((unsigned char *)v186 + 46) = 0;
  qword_258B8E8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_258B8F0 = v274;
  strcpy((char *)qword_258B8E8, "SuggestRouteToDestForEVInfeasibleRoute_");
  qword_258B900 = (uint64_t)operator new(0x28uLL);
  unk_258B908 = v266;
  strcpy((char *)qword_258B900, "SuggestRouteRemovingStopsFromEVRoute_");
  qword_258B918 = (uint64_t)operator new(0x20uLL);
  unk_258B920 = v279;
  strcpy((char *)qword_258B918, "OfflineToOnlineNewRoute_");
  qword_258B930 = (uint64_t)operator new(0x40uLL);
  unk_258B938 = xmmword_20B98C0;
  strcpy((char *)qword_258B930, "SuggestDetourWithHigherArrivalSOCForInfeasibleUserRoute_");
  byte_258B95F = 20;
  strcpy(byte_258B948, "LPR_OFFLINE_REROUTE_");
  byte_258B977 = 16;
  strcpy((char *)&xmmword_258B960, "LPR_OFFLINE_SAR_");
  byte_258B98F = 20;
  strcpy(byte_258B978, "LPR_OFFLINE_REROUTE_");
  byte_258B9A7 = 16;
  strcpy((char *)&xmmword_258B990, "LPR_OFFLINE_SAR_");
  byte_258B9BF = 19;
  strcpy(byte_258B9A8, "SuggestFasterRoute_");
  qword_258B9C0 = (char *)operator new(0x20uLL);
  xmmword_258B9C8 = v278;
  strcpy(qword_258B9C0, "AreaIncidentSaferReroute_");
  byte_258B9EF = 12;
  strcpy((char *)&qword_258B9D8, "_Remove_Stop");
  byte_258BA07 = 13;
  strcpy((char *)&qword_258B9F0, "_Remove_Stops");
  strcpy(&byte_258BA1F, "\t_Add_Stops");
  strcpy((char *)&qword_258BA08, "_Add_Stop");
  strcpy(&byte_258BA37, "\n_Change_Route");
  byte_258BA4F = 13;
  byte_258BA67 = 15;
  strcpy((char *)&qword_258BA50, "_Different_Stop");
  byte_258BA7F = 16;
  strcpy((char *)&xmmword_258BA68, "_Different_Stops");
  byte_258BA97 = 15;
  strcpy((char *)&qword_258BA80, "_EV_Remove_Stop");
  byte_258BAAF = 16;
  strcpy((char *)&xmmword_258BA98, "_EV_Remove_Stops");
  byte_258BAC7 = 12;
  strcpy((char *)&qword_258BAB0, "_EV_Add_Stop");
  byte_258BADF = 13;
  strcpy((char *)&qword_258BAC8, "_EV_Add_Stops");
  byte_258BAF7 = 15;
  strcpy((char *)&qword_258BAE0, "_EV_Low_Battery");
  byte_258BB0F = 14;
  strcpy((char *)&qword_258BAF8, "_EV_Infeasible");
  byte_258BB27 = 15;
  strcpy((char *)&qword_258BB10, "_EV_Last_Chance");
  qword_258BB28 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_258BB30 = v279;
  strcpy((char *)qword_258BB28, "_EV_Low_Battery_Add_Stop");
  uint64_t v187 = qword_258BA28;
  qword_258BB40 = (uint64_t)operator new(0x20uLL);
  unk_258BB48 = v278;
  strcpy((char *)qword_258BB40, "_EV_Low_Battery_Add_Stops");
  qword_258BB58 = (uint64_t)operator new(0x19uLL);
  unk_258BB60 = v280;
  strcpy((char *)qword_258BB58, "_EV_Infeasible_Add_Stop");
  int v188 = byte_258BA37;
  if (byte_258BA37 >= 0) {
    size_t v189 = byte_258BA37;
  }
  else {
    size_t v189 = v187;
  }
  unint64_t v190 = v189 + 14;
  if (v189 + 14 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v190 >= 0x17)
  {
    uint64_t v193 = (v190 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v190 | 7) != 0x17) {
      uint64_t v193 = v190 | 7;
    }
    uint64_t v194 = v193 + 1;
    uint64_t v195 = (char *)operator new(v193 + 1);
    qword_258BB78 = v189 + 14;
    unk_258BB80 = v194 | 0x8000000000000000;
    qword_258BB70 = (uint64_t)v195;
    qmemcpy(v195, "_EV_Infeasible", 14);
    unint64_t v191 = v195 + 14;
  }
  else
  {
    BYTE1(qword_258BB78) = 0;
    WORD1(qword_258BB78) = 0;
    HIDWORD(qword_258BB78) = 0;
    unk_258BB80 = 0;
    byte_258BB87 = v189 + 14;
    strcpy((char *)&qword_258BB70, "_EV_Infe");
    unint64_t v191 = (char *)&qword_258BB78 + 6;
    if (!v189)
    {
      char v192 = 1;
      goto LABEL_433;
    }
  }
  if (v188 >= 0) {
    uint64_t v196 = (uint64_t)&qword_258BA20;
  }
  else {
    uint64_t v196 = 0x6F74535F6464415FLL;
  }
  memmove(v191, (const void *)v196, v189);
  char v192 = 0;
LABEL_433:
  v191[v189] = 0;
  uint64_t v197 = (char *)operator new(0x20uLL);
  qword_258BB88 = (uint64_t)v197;
  *(_OWORD *)algn_258BB90 = v279;
  *(void *)uint64_t v197 = qword_258BB10;
  *(void *)(v197 + 7) = *(uint64_t *)((char *)&qword_258BB10 + 7);
  *(void *)(v197 + 15) = qword_258BA08;
  v197[23] = word_258BA10;
  v197[24] = 0;
  unint64_t v198 = v189 + 15;
  if (v189 + 15 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v198 > 0x16)
  {
    uint64_t v200 = (v198 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v198 | 7) != 0x17) {
      uint64_t v200 = v198 | 7;
    }
    uint64_t v201 = v200 + 1;
    unint64_t v199 = (uint64_t *)operator new(v200 + 1);
    qword_258BBA8 = v189 + 15;
    unk_258BBB0 = v201 | 0x8000000000000000;
    qword_258BBA0 = (uint64_t)v199;
  }
  else
  {
    unint64_t v199 = &qword_258BBA0;
    qword_258BBA8 = 0;
    unk_258BBB0 = 0;
    qword_258BBA0 = 0;
    byte_258BBB7 = v189 + 15;
  }
  *unint64_t v199 = qword_258BB10;
  *(uint64_t *)((char *)v199 + 7) = *(uint64_t *)((char *)&qword_258BB10 + 7);
  uint64_t v202 = (char *)v199 + 15;
  if ((v192 & 1) == 0)
  {
    if (v188 >= 0) {
      v203 = &qword_258BA20;
    }
    else {
      v203 = (uint64_t *)qword_258BA20;
    }
    memmove((char *)v199 + 15, v203, v189);
  }
  v202[v189] = 0;
  byte_258BBCF = 17;
  strcpy((char *)&xmmword_258BBB8, "_EV_Forced_Detour");
  qword_258BBD0 = (uint64_t)operator new(0x20uLL);
  unk_258BBD8 = v278;
  strcpy((char *)qword_258BBD0, "_EV_Higher_Arrival_Charge");
  qword_258BBE8 = (uint64_t)operator new(0x28uLL);
  unk_258BBF0 = xmmword_20B8FD0;
  strcpy((char *)qword_258BBE8, "_EV_Infeasible_Higher_Arrival_Charge");
  byte_258BC17 = 16;
  strcpy(byte_258BC00, "_EV_Out_Of_Range");
  qword_258BC18 = (uint64_t)operator new(0x20uLL);
  unk_258BC20 = v273;
  strcpy((char *)qword_258BC18, "_EV_Last_Chance_Take_Detour");
  strcpy(byte_258BC30, "_EV_Forced_Modify_Stop");
  HIBYTE(word_258BC46) = 22;
  qword_258BC48 = (uint64_t)operator new(0x19uLL);
  unk_258BC50 = v280;
  strcpy((char *)qword_258BC48, "_EV_Forced_Modify_Stops");
  byte_258BC77 = 19;
  strcpy(byte_258BC60, "_EV_Forced_Add_Stop");
  byte_258BC8F = 20;
  strcpy((char *)&xmmword_258BC78, "_EV_Forced_Add_Stops");
  byte_258BCA7 = 21;
  strcpy(byte_258BC90, "_EV_Battery_Info_Lost");
  qword_258BCA8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_258BCB0 = v278;
  strcpy((char *)qword_258BCA8, "_EV_Battery_Info_Restored");
  qword_258BCC0 = (uint64_t)operator new(0x20uLL);
  unk_258BCC8 = v279;
  strcpy((char *)qword_258BCC0, "_EV_Towing_Not_Supported");
  qword_258BCD8 = (uint64_t)operator new(0x28uLL);
  unk_258BCE0 = v268;
  strcpy((char *)qword_258BCD8, "_EV_Offline_to_Online_Transition");
  byte_258BD07 = 15;
  strcpy((char *)&qword_258BCF0, "_EV_Offline_SAR");
  qword_258BD08 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_258BD10 = v277;
  strcpy((char *)qword_258BD08, "_Offline_to_Online_New_Route");
  byte_258BD37 = 12;
  strcpy((char *)&qword_258BD20, "BannerButton");
  byte_258BD4F = 8;
  strcpy((char *)&qword_258BD38, "_Dismiss");
  byte_258BD67 = 3;
  word_258BD50 = 20319;
  byte_258BD52 = 75;
  byte_258BD53 = 0;
  byte_258BD7F = 11;
  strcpy((char *)&qword_258BD68, "_Still_Here");
  byte_258BD97 = 8;
  strcpy((char *)&qword_258BD80, "_Cleared");
  qmemcpy(&byte_258BDAF, "\nBannerButton", 13);
  strcpy((char *)&qword_258BD98, "_No_Thanks");
  uint64_t v204 = qword_258BD28;
  qword_258BDC0 = 0x1400000000000000;
  *(void *)algn_258BDBC = 0x7373696D7369445FLL;
  qword_258BDD8 = 0xF00000000000000;
  qword_258BDD0 = 0x4B4F5F6E6F7474;
  int v205 = byte_258BAC7;
  if (byte_258BAC7 >= 0) {
    size_t v206 = byte_258BAC7;
  }
  else {
    size_t v206 = qword_258BAB8;
  }
  unint64_t v207 = v206 + 12;
  qword_258BDC8 = *(void *)"BannerButton";
  if (v206 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v207 >= 0x17)
  {
    uint64_t v209 = (v207 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v207 | 7) != 0x17) {
      uint64_t v209 = v207 | 7;
    }
    uint64_t v210 = v209 + 1;
    uint64_t v211 = (char *)operator new(v209 + 1);
    qword_258BDE8 = v206 + 12;
    unk_258BDF0 = v210 | 0x8000000000000000;
    qword_258BDE0 = (uint64_t)v211;
    *((_DWORD *)v211 + 2) = 1852798068;
    *(void *)uint64_t v211 = *(void *)"BannerButton";
    unint64_t v208 = v211 + 12;
  }
  else
  {
    BYTE5(qword_258BDE8) = 0;
    HIWORD(qword_258BDE8) = 0;
    unk_258BDF0 = 0;
    byte_258BDF7 = v206 + 12;
    strcpy((char *)&qword_258BDE0, "BannerButton");
    unint64_t v208 = (char *)&qword_258BDE8 + 4;
    if (!v206) {
      goto LABEL_458;
    }
  }
  if (v205 >= 0) {
    v212 = &qword_258BAB0;
  }
  else {
    v212 = (uint64_t *)qword_258BAB0;
  }
  memmove(v208, v212, v206);
LABEL_458:
  v208[v206] = 0;
  int v213 = byte_258BADF;
  if (byte_258BADF >= 0) {
    size_t v214 = byte_258BADF;
  }
  else {
    size_t v214 = unk_258BAD0;
  }
  unint64_t v215 = v214 + 12;
  if (v214 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v215 >= 0x17)
  {
    uint64_t v217 = (v215 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v215 | 7) != 0x17) {
      uint64_t v217 = v215 | 7;
    }
    uint64_t v218 = v217 + 1;
    uint64_t v219 = (char *)operator new(v217 + 1);
    qword_258BE00 = v214 + 12;
    unk_258BE08 = v218 | 0x8000000000000000;
    qword_258BDF8 = (uint64_t)v219;
    *(void *)uint64_t v219 = qword_258BD20;
    *((_DWORD *)v219 + 2) = qword_258BD28;
    unint64_t v216 = v219 + 12;
  }
  else
  {
    qword_258BE00 = 0;
    unk_258BE08 = 0;
    byte_258BE0F = v214 + 12;
    LODWORD(qword_258BE00) = qword_258BD28;
    qword_258BDF8 = qword_258BD20;
    unint64_t v216 = (char *)&qword_258BE00 + 4;
    if (!v214) {
      goto LABEL_472;
    }
  }
  if (v213 >= 0) {
    v220 = &qword_258BAC8;
  }
  else {
    v220 = (uint64_t *)qword_258BAC8;
  }
  memmove(v216, v220, v214);
LABEL_472:
  v216[v214] = 0;
  int v221 = byte_258BA97;
  if (byte_258BA97 >= 0) {
    size_t v222 = byte_258BA97;
  }
  else {
    size_t v222 = unk_258BA88;
  }
  unint64_t v223 = v222 + 12;
  if (v222 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v223 >= 0x17)
  {
    uint64_t v225 = (v223 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v223 | 7) != 0x17) {
      uint64_t v225 = v223 | 7;
    }
    uint64_t v226 = v225 + 1;
    uint64_t v227 = (char *)operator new(v225 + 1);
    qword_258BE18 = v222 + 12;
    unk_258BE20 = v226 | 0x8000000000000000;
    qword_258BE10 = (uint64_t)v227;
    *(void *)uint64_t v227 = qword_258BD20;
    *((_DWORD *)v227 + 2) = qword_258BD28;
    unint64_t v224 = v227 + 12;
  }
  else
  {
    qword_258BE18 = 0;
    unk_258BE20 = 0;
    byte_258BE27 = v222 + 12;
    LODWORD(qword_258BE18) = qword_258BD28;
    qword_258BE10 = qword_258BD20;
    unint64_t v224 = (char *)&qword_258BE18 + 4;
    if (!v222) {
      goto LABEL_486;
    }
  }
  if (v221 >= 0) {
    v228 = &qword_258BA80;
  }
  else {
    v228 = (uint64_t *)qword_258BA80;
  }
  memmove(v224, v228, v222);
LABEL_486:
  v224[v222] = 0;
  int v229 = byte_258BD37;
  if (byte_258BD37 >= 0) {
    size_t v230 = byte_258BD37;
  }
  else {
    size_t v230 = v204;
  }
  int v231 = byte_258BAAF;
  if (byte_258BAAF >= 0) {
    size_t v232 = byte_258BAAF;
  }
  else {
    size_t v232 = *((void *)&xmmword_258BA98 + 1);
  }
  unint64_t v233 = v232 + v230;
  if (v232 + v230 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v233 <= 0x16)
  {
    unint64_t v234 = &qword_258BE28;
    qword_258BE30 = 0;
    unk_258BE38 = 0;
    qword_258BE28 = 0;
    byte_258BE3F = v232 + v230;
    if (!v230) {
      goto LABEL_499;
    }
    goto LABEL_495;
  }
  uint64_t v241 = (v233 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v233 | 7) != 0x17) {
    uint64_t v241 = v233 | 7;
  }
  uint64_t v242 = v241 + 1;
  unint64_t v234 = (uint64_t *)operator new(v241 + 1);
  qword_258BE30 = v232 + v230;
  unk_258BE38 = v242 | 0x8000000000000000;
  qword_258BE28 = (uint64_t)v234;
  if (v230)
  {
LABEL_495:
    if (v229 >= 0) {
      v235 = &qword_258BD20;
    }
    else {
      v235 = (uint64_t *)qword_258BD20;
    }
    memmove(v234, v235, v230);
  }
LABEL_499:
  v236 = (char *)v234 + v230;
  if (v232)
  {
    if (v231 >= 0) {
      v237 = &xmmword_258BA98;
    }
    else {
      v237 = (long long *)xmmword_258BA98;
    }
    memmove(v236, v237, v232);
  }
  v236[v232] = 0;
  unint64_t v238 = v230 + 11;
  if (v230 + 11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v238 >= 0x17)
  {
    uint64_t v243 = (v238 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v238 | 7) != 0x17) {
      uint64_t v243 = v238 | 7;
    }
    uint64_t v244 = v243 + 1;
    unint64_t v239 = (uint64_t *)operator new(v243 + 1);
    qword_258BE48 = v230 + 11;
    unk_258BE50 = v244 | 0x8000000000000000;
    qword_258BE40 = (uint64_t)v239;
  }
  else
  {
    unint64_t v239 = &qword_258BE40;
    qword_258BE48 = 0;
    unk_258BE50 = 0;
    qword_258BE40 = 0;
    byte_258BE57 = v230 + 11;
    if (!v230)
    {
      *(_DWORD *)((char *)&qword_258BE40 + 7) = *(_DWORD *)((char *)&qword_258BD68 + 7);
      qword_258BE40 = qword_258BD68;
      BYTE3(qword_258BE48) = 0;
      LOBYTE(v240) = 8;
      goto LABEL_520;
    }
  }
  if (v229 >= 0) {
    uint64_t v245 = &qword_258BD20;
  }
  else {
    uint64_t v245 = (uint64_t *)qword_258BD20;
  }
  memmove(v239, v245, v230);
  v246 = (char *)v239 + v230;
  int v247 = *(_DWORD *)((char *)&qword_258BD68 + 7);
  *(void *)v246 = qword_258BD68;
  *(_DWORD *)(v246 + 7) = v247;
  v246[11] = 0;
  unint64_t v240 = v230 + 8;
  if (v230 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v240 <= 0x16)
  {
LABEL_520:
    int v248 = &qword_258BE58;
    qword_258BE60 = 0;
    unk_258BE68 = 0;
    qword_258BE58 = 0;
    byte_258BE6F = v240;
    if (!v230) {
      goto LABEL_525;
    }
    goto LABEL_521;
  }
  uint64_t v261 = (v240 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v240 | 7) != 0x17) {
    uint64_t v261 = v240 | 7;
  }
  uint64_t v262 = v261 + 1;
  int v248 = (uint64_t *)operator new(v261 + 1);
  qword_258BE60 = v230 + 8;
  unk_258BE68 = v262 | 0x8000000000000000;
  qword_258BE58 = (uint64_t)v248;
  if (v230)
  {
LABEL_521:
    if (v229 >= 0) {
      v249 = &qword_258BD20;
    }
    else {
      v249 = (uint64_t *)qword_258BD20;
    }
    memmove(v248, v249, v230);
  }
LABEL_525:
  v250 = (char *)v248 + v230;
  *(void *)v250 = qword_258BD80;
  v250[8] = 0;
  int v251 = byte_258BDAF;
  if (byte_258BDAF >= 0) {
    size_t v252 = byte_258BDAF;
  }
  else {
    size_t v252 = qword_258BDA0;
  }
  unint64_t v253 = v252 + v230;
  if (v252 + v230 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v253 <= 0x16)
  {
    unint64_t v254 = &qword_258BE70;
    qword_258BE78 = 0;
    unk_258BE80 = 0;
    qword_258BE70 = 0;
    byte_258BE87 = v252 + v230;
    if (!v230) {
      goto LABEL_535;
    }
    goto LABEL_531;
  }
  uint64_t v259 = (v253 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v253 | 7) != 0x17) {
    uint64_t v259 = v253 | 7;
  }
  uint64_t v260 = v259 + 1;
  unint64_t v254 = (uint64_t *)operator new(v259 + 1);
  qword_258BE78 = v252 + v230;
  unk_258BE80 = v260 | 0x8000000000000000;
  qword_258BE70 = (uint64_t)v254;
  if (v230)
  {
LABEL_531:
    if (v229 >= 0) {
      v255 = &qword_258BD20;
    }
    else {
      v255 = (uint64_t *)qword_258BD20;
    }
    memmove(v254, v255, v230);
  }
LABEL_535:
  v256 = (char *)v254 + v230;
  if (v252)
  {
    if (v251 >= 0) {
      v257 = &qword_258BD98;
    }
    else {
      v257 = (uint64_t *)qword_258BD98;
    }
    memmove(v256, v257, v252);
  }
  v256[v252] = 0;
  strcpy(&byte_258BE9F, "\n{newroute}");
  strcpy((char *)&qword_258BE88, "{roadname}");
  strcpy(&byte_258BEB7, "\n{count}");
  byte_258BECF = 7;
  strcpy(&byte_258BEE7, "\n{dur}");
  strcpy((char *)&qword_258BED0, "{duration}");
  byte_258BEFF = 5;
  qword_258BF00 = (uint64_t)operator new(0x20uLL);
  unk_258BF08 = v276;
  strcpy((char *)qword_258BF00, "{PleaseProceedWithCaution}");
  byte_258BF2F = 15;
  strcpy((char *)&qword_258BF18, "{UserRouteName}");
  byte_258BF47 = 20;
  strcpy((char *)&xmmword_258BF30, "{SuggestedRouteName}");
  byte_258BF5F = 18;
  strcpy(byte_258BF48, "Speed_Camera_Ahead");
  qword_258BF60 = (uint64_t)operator new(0x20uLL);
  unk_258BF68 = v275;
  strcpy((char *)qword_258BF60, "Red_Light_Camera_Ahead_Spoken");
  qword_258BF78 = (uint64_t)operator new(0x20uLL);
  unk_258BF80 = v275;
  strcpy((char *)qword_258BF78, "Stop_Sign_Camera_Ahead_Spoken");
  qword_258BF90 = (uint64_t)operator new(0x28uLL);
  unk_258BF98 = v270;
  strcpy((char *)qword_258BF90, "Speed_Camera_Ahead_Multiple_Spoken");
  qword_258BFA8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_258BFB0 = v264;
  strcpy((char *)qword_258BFA8, "Red_Light_Camera_Ahead_Multiple_Spoken");
  qword_258BFC0 = (uint64_t)operator new(0x20uLL);
  unk_258BFC8 = v277;
  strcpy((char *)qword_258BFC0, "Camera_Ahead_Multiple_Spoken");
  qword_258BFD8 = (uint64_t)operator new(0x30uLL);
  unk_258BFE0 = v265;
  strcpy((char *)qword_258BFD8, "Red_Light_Camera_Speed_Camera_Ahead_Spoken");
  qword_258BFF0 = (char *)operator new(0x30uLL);
  strcpy(qword_258BFF0, "Stop_Sign_Camera_Speed_Camera_Ahead_Spoken");
  byte_258C01F = 16;
  xmmword_258BFF8 = v265;
  strcpy(byte_258C008, "_Speed_Limit_Mph");
  byte_258C037 = 16;
  strcpy(byte_258C020, "_Speed_Limit_Kph");
  byte_258C04F = 11;
  strcpy((char *)&qword_258C038, "Watch_Speed");
  byte_258C067 = 4;
  strcpy((char *)&dword_258C050, "_One");
  byte_258C07F = 4;
  strcpy((char *)&dword_258C068, "_Two");
  byte_258C097 = 4;
  strcpy((char *)&dword_258C080, "_Few");
  byte_258C0AF = 5;
  strcpy((char *)&dword_258C098, "_Many");
  byte_258C0C7 = 6;
  strcpy((char *)&dword_258C0B0, "_Other");
  byte_258C0DF = 4;
  strcpy((char *)&dword_258C0C8, "_ONE");
  byte_258C0F7 = 7;
  strcpy((char *)&dword_258C0E0, "{Speed}");
  byte_258C10F = 8;
  strcpy((char *)&qword_258C0F8, "Dismount");
  byte_258C127 = 4;
  strcpy((char *)&dword_258C110, "Walk");
  byte_258C13F = 5;
  strcpy((char *)&dword_258C128, "Mount");
  byte_258C157 = 7;
  strcpy((char *)&dword_258C140, "Remount");
  strcpy(&byte_258C16F, "\t_Crosswalk");
  strcpy((char *)&qword_258C158, "Walk_Road");
  strcpy(&byte_258C187, "\n_PLURAL");
  byte_258C19F = 7;
  strcpy(&byte_258C1B7, "\n{description1}");
  strcpy((char *)&qword_258C1A0, "_SECONDARY");
  byte_258C1CF = 14;
  byte_258C1E7 = 14;
  strcpy((char *)&qword_258C1D0, "{description2}");
  byte_258C1FF = 21;
  strcpy((char *)&xmmword_258C1E8, "TWO_ROAD_DESCRIPTIONS");
  byte_258C217 = 17;
  strcpy((char *)&xmmword_258C200, "{SlopePercentage}");
  byte_258C22F = 15;
  strcpy((char *)&qword_258C218, "_Protected_Lane");
  strcpy(&byte_258C247, "\n_Paved_Path");
  strcpy((char *)&qword_258C230, "_Bike_Path");
  byte_258C25F = 11;
  byte_258C277 = 15;
  strcpy((char *)&qword_258C260, "_Dedicated_Lane");
  byte_258C28F = 12;
  strcpy((char *)&qword_258C278, "_Shared_Path");
  strcpy(&byte_258C2A7, "\n_UnnamedRoad");
  strcpy((char *)&qword_258C290, "_Bike_Lane");
  byte_258C2BF = 12;
  byte_258C2D7 = 5;
  strcpy((char *)&dword_258C2C0, "_Path");
  byte_258C2EF = 6;
  strcpy((char *)&dword_258C2D8, "_Trail");
  strcpy(&byte_258C307, "\t_Plaza");
  strcpy((char *)&qword_258C2F0, "_Sidewalk");
  byte_258C31F = 6;
  byte_258C337 = 15;
  strcpy((char *)&qword_258C320, "_Moving_Walkway");
  byte_258C34F = 14;
  strcpy((char *)&qword_258C338, "Two_Stage_Turn");
  byte_258C367 = 16;
  strcpy((char *)&xmmword_258C350, "{OptionalPeriod}");
  byte_258C37F = 18;
  strcpy((char *)&xmmword_258C368, "Advisory_Separator");
  byte_258C397 = 6;
  strcpy((char *)&dword_258C380, "Period");
  byte_258C3AF = 21;
  strcpy((char *)&xmmword_258C398, "Advisory_Title_Notice");
  strcpy((char *)&xmmword_258C3B0, "Advisory_Title_Notices");
  HIBYTE(word_258C3C6) = 22;
  byte_258C3DF = 7;
  strcpy((char *)&dword_258C3C8, "_DETAIL");
  byte_258C3F7 = 17;
  strcpy((char *)&xmmword_258C3E0, "_LONG_REGION_LIST");
  byte_258C40F = 16;
  strcpy((char *)&xmmword_258C3F8, "Advisory_Grouped");
  byte_258C427 = 11;
  strcpy((char *)&qword_258C410, "_Advisories");
  qword_258C428 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_258C430 = v273;
  strcpy((char *)qword_258C428, "Advisory_WILDFIRE_METADATA_");
  byte_258C457 = 8;
  strcpy((char *)&qword_258C440, "Advisory");
  byte_258C46F = 13;
  strcpy((char *)&qword_258C458, "MPR_NUM_STOPS");
  byte_258C487 = 17;
  strcpy(algn_258C470, "EV_CHARGE_STATION");
  byte_258C49F = 11;
  strcpy((char *)&qword_258C488, "_NAMED_CITY");
  byte_258C4B7 = 5;
  strcpy((char *)&dword_258C4A0, "_Stop");
  strcpy(&byte_258C4CF, "\n{StopsCount}");
  strcpy((char *)&qword_258C4B8, "{CityName}");
  byte_258C4E7 = 12;
  byte_258C4FF = 11;
  strcpy((char *)&qword_258C4E8, "_With_Other");
  byte_258C517 = 15;
  strcpy((char *)&qword_258C500, "{DepartureTime}");
  qword_258C518 = (uint64_t)operator new(0x28uLL);
  unk_258C520 = v274;
  strcpy((char *)qword_258C518, "Ending_Charge_Station_Port_Availability");
  qword_258C530 = (uint64_t)operator new(0x28uLL);
  unk_258C538 = v266;
  strcpy((char *)qword_258C530, "Ending_Charge_Station_No_Availability");
  qword_258C548 = (uint64_t)operator new(0x28uLL);
  unk_258C550 = v270;
  strcpy((char *)qword_258C548, "Ending_Charge_Station_No_Real_Time");
  byte_258C577 = 16;
  strcpy(byte_258C560, "{AvailablePorts}");
  byte_258C58F = 12;
  strcpy((char *)&qword_258C578, "{TotalPorts}");
  byte_258C5A7 = 14;
  strcpy((char *)&qword_258C590, "{ManeuverIcon}");
  qword_258C5A8 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_258C5B0 = xmmword_20B9A60;
  strcpy((char *)qword_258C5A8, "Walking_Distance_ManeuverIcon_PrimaryInstruction");
  qword_258C5C0 = (uint64_t)operator new(0x20uLL);
  unk_258C5C8 = v273;
  strcpy((char *)qword_258C5C0, "Walking_Destination_Unnamed");
  qword_258C5D8 = (uint64_t)operator new(0x20uLL);
  unk_258C5E0 = v275;
  strcpy((char *)qword_258C5D8, "TrafficDelay_Label_Title_Sign");
  qword_258C5F0 = (uint64_t)operator new(0x20uLL);
  unk_258C5F8 = v277;
  strcpy((char *)qword_258C5F0, "Special_Guidance_Instruction");
  byte_258C61F = 2;
  strcpy((char *)&word_258C608, "CZ");
  byte_258C637 = 3;
  dword_258C620 = 5919811;
  unk_258C64F = 3;
  dword_258C638 = 6243649;
  byte_258C667 = 0;
  byte_258C67F = 7;
  strcpy((char *)&dword_258C668, "TRANSIT");
  byte_258C697 = 7;
  strcpy((char *)&dword_258C680, "OFFLINE");
  qword_258C698 = (uint64_t)operator new(0x28uLL);
  unk_258C6A0 = v264;
  strcpy((char *)qword_258C698, "Advisory_Card_French_Climate_Law_Title");
  qword_258C6B0 = (uint64_t)operator new(0x30uLL);
  unk_258C6B8 = xmmword_20B93C0;
  strcpy((char *)qword_258C6B0, "Advisory_Card_French_Climate_Law_Details");
  qword_258C6C8 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_258C6D0 = v271;
  strcpy((char *)qword_258C6C8, "French_Climate_Law_Metadata_Weblink_Title");
  qword_258C6E0 = (uint64_t)operator new(0x20uLL);
  unk_258C6E8 = v277;
  strcpy((char *)qword_258C6E0, "{ClimateLawLearnMoreWeblink}");
  byte_258C70F = 3;
  dword_258C6F8 = 4280902;
  qword_258C710 = (uint64_t)operator new(0x70uLL);
  unk_258C718 = xmmword_20E81E0;
  strcpy((char *)qword_258C710, "https://www.vie-publique.fr/loi/278460-loi-22-aout-2021-climat-et-resilience-convention-citoyenne-climat");
  return *(double *)"ut-2021-climat-et-resilience-convention-citoyenne-climat";
}

void sub_60D9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3B7]) < 0)
  {
    operator delete((void *)STACK[0x3A0]);
    if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x387]) < 0) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  operator delete((void *)STACK[0x388]);
  if (SLOBYTE(STACK[0x387]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x370]);
    if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (SLOBYTE(STACK[0x357]) < 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)STACK[0x358]);
  if (SLOBYTE(STACK[0x357]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x340]);
    if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x327]) < 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete((void *)STACK[0x328]);
  if (SLOBYTE(STACK[0x327]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x310]);
    if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0)
  {
LABEL_9:
    if (SLOBYTE(STACK[0x2F7]) < 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)STACK[0x2F8]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
  {
LABEL_10:
    operator delete((void *)STACK[0x2E0]);
    if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
  {
LABEL_11:
    if (SLOBYTE(STACK[0x2C7]) < 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x2C8]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
  {
LABEL_12:
    operator delete((void *)STACK[0x2B0]);
    if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0)
  {
LABEL_13:
    if (SLOBYTE(STACK[0x297]) < 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete((void *)STACK[0x298]);
  if (SLOBYTE(STACK[0x297]) < 0)
  {
LABEL_14:
    operator delete((void *)STACK[0x280]);
    if (SLOBYTE(STACK[0x27F]) < 0)
    {
LABEL_36:
      operator delete((void *)STACK[0x268]);
      if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0)
      {
LABEL_37:
        if (SLOBYTE(STACK[0x24F]) < 0)
        {
LABEL_38:
          operator delete((void *)STACK[0x238]);
          if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
          {
LABEL_39:
            if (SLOBYTE(STACK[0x21F]) < 0)
            {
LABEL_40:
              operator delete((void *)STACK[0x208]);
              if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
              {
LABEL_41:
                if (a72 < 0) {
                  goto LABEL_42;
                }
                goto LABEL_44;
              }
LABEL_34:
              operator delete(a73);
              if (a72 < 0)
              {
LABEL_42:
                operator delete(a71);
                if ((a70 & 0x80000000) == 0) {
                  goto LABEL_43;
                }
                goto LABEL_45;
              }
LABEL_44:
              if ((a70 & 0x80000000) == 0) {
LABEL_43:
              }
                _Unwind_Resume(a1);
LABEL_45:
              operator delete(a65);
              _Unwind_Resume(a1);
            }
LABEL_33:
            if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0) {
              goto LABEL_41;
            }
            goto LABEL_34;
          }
LABEL_32:
          operator delete((void *)STACK[0x220]);
          if (SLOBYTE(STACK[0x21F]) < 0) {
            goto LABEL_40;
          }
          goto LABEL_33;
        }
LABEL_31:
        if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0) {
          goto LABEL_39;
        }
        goto LABEL_32;
      }
LABEL_30:
      operator delete((void *)STACK[0x250]);
      if (SLOBYTE(STACK[0x24F]) < 0) {
        goto LABEL_38;
      }
      goto LABEL_31;
    }
LABEL_29:
    if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
LABEL_28:
  if (SLOBYTE(STACK[0x27F]) < 0) {
    goto LABEL_36;
  }
  goto LABEL_29;
}

uint64_t sub_60DD08(uint64_t a1, void *a2, void *a3, char *__src, int *a5, char a6)
{
  uint64_t v10 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = a3[1];
  *(void *)(a1 + 16) = *a3;
  *(void *)(a1 + 24) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  memcpy((void *)(a1 + 32), __src, 0x76CuLL);
  if (__src[1927] < 0)
  {
    sub_4200((unsigned char *)(a1 + 1936), *((void **)__src + 238), *((void *)__src + 239));
  }
  else
  {
    long long v12 = *((_OWORD *)__src + 119);
    *(void *)(a1 + 1952) = *((void *)__src + 240);
    *(_OWORD *)(a1 + 1936) = v12;
  }
  long long v13 = *(_OWORD *)(__src + 1928);
  long long v14 = *(_OWORD *)(__src + 1960);
  *(_OWORD *)(a1 + 1976) = *(_OWORD *)(__src + 1944);
  *(_OWORD *)(a1 + 1992) = v14;
  *(_OWORD *)(a1 + 1960) = v13;
  long long v15 = *(_OWORD *)(__src + 1976);
  long long v16 = *(_OWORD *)(__src + 1992);
  long long v17 = *(_OWORD *)(__src + 2008);
  *(_OWORD *)(a1 + 2050) = *(_OWORD *)(__src + 2018);
  *(_OWORD *)(a1 + 2024) = v16;
  *(_OWORD *)(a1 + 2040) = v17;
  *(_OWORD *)(a1 + 2008) = v15;
  sub_4BC93C(a1 + 2072, a5);
  *(unsigned char *)(a1 + 2168) = a6;
  return a1;
}

void sub_60DE00(_Unwind_Exception *a1)
{
  sub_14A84(v2);
  sub_14A84(v1);
  _Unwind_Resume(a1);
}

void sub_60DE1C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 1959) < 0) {
    operator delete(*v3);
  }
  sub_14A84(v2);
  sub_14A84(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_60DE48(uint64_t a1, uint64_t *a2, void *a3, char *a4, uint64_t a5)
{
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  uint64_t v11 = *a2;
  long long v12 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)a3[1];
  v10[0] = *a3;
  v10[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_60DD08(a1, &v11, v10, a4, (int *)(a5 + 968), *(unsigned char *)(a5 + 1520));
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_60DF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_60DF7C(uint64_t a1, uint64_t *a2, void *a3, char *a4, uint64_t a5)
{
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  uint64_t v11 = *a2;
  long long v12 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)a3[1];
  v10[0] = *a3;
  v10[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_60DD08(a1, &v11, v10, a4, (int *)(a5 + 64), *(unsigned char *)(a5 + 166));
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_60E094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

BOOL sub_60E0B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (const void **)a2;
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  size_t v4 = *(void *)(a2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  uint64_t v6 = *((void *)&xmmword_258E688 + 1);
  if (byte_258E69F >= 0) {
    uint64_t v6 = byte_258E69F;
  }
  if (v5 == v6)
  {
    if (byte_258E69F >= 0) {
      uint64_t v7 = &xmmword_258E688;
    }
    else {
      uint64_t v7 = (long long *)xmmword_258E688;
    }
    if ((v3 & 0x80) != 0)
    {
      if (!memcmp(*v2, v7, v4)) {
        return 1;
      }
    }
    else
    {
      if (!v3) {
        return 1;
      }
      uint64_t v8 = v2;
      uint64_t v9 = v3;
      while (*(unsigned __int8 *)v8 == *(unsigned __int8 *)v7)
      {
        uint64_t v8 = (const void **)((char *)v8 + 1);
        uint64_t v7 = (long long *)((char *)v7 + 1);
        if (!--v9) {
          return 1;
        }
      }
    }
  }
  uint64_t v11 = *((void *)&xmmword_258E6B8 + 1);
  if (byte_258E6CF >= 0) {
    uint64_t v11 = byte_258E6CF;
  }
  if (v5 == v11)
  {
    if (byte_258E6CF >= 0) {
      long long v12 = &xmmword_258E6B8;
    }
    else {
      long long v12 = (long long *)xmmword_258E6B8;
    }
    if ((v3 & 0x80) != 0)
    {
      if (!memcmp(*v2, v12, v4)) {
        return 1;
      }
    }
    else
    {
      if (!v3) {
        return 1;
      }
      long long v13 = v2;
      uint64_t v14 = v3;
      while (*(unsigned __int8 *)v13 == *(unsigned __int8 *)v12)
      {
        long long v13 = (const void **)((char *)v13 + 1);
        long long v12 = (long long *)((char *)v12 + 1);
        if (!--v14) {
          return 1;
        }
      }
    }
  }
  uint64_t v15 = *((void *)&xmmword_258E6A0 + 1);
  if (byte_258E6B7 >= 0) {
    uint64_t v15 = byte_258E6B7;
  }
  if (v5 == v15)
  {
    if (byte_258E6B7 >= 0) {
      long long v16 = &xmmword_258E6A0;
    }
    else {
      long long v16 = (long long *)xmmword_258E6A0;
    }
    if ((v3 & 0x80) != 0)
    {
      if (!memcmp(*v2, v16, v4)) {
        return 1;
      }
    }
    else
    {
      if (!v3) {
        return 1;
      }
      long long v17 = v2;
      uint64_t v18 = v3;
      while (*(unsigned __int8 *)v17 == *(unsigned __int8 *)v16)
      {
        long long v17 = (const void **)((char *)v17 + 1);
        long long v16 = (long long *)((char *)v16 + 1);
        if (!--v18) {
          return 1;
        }
      }
    }
  }
  uint64_t v19 = *((void *)&xmmword_258E6D0 + 1);
  if (byte_258E6E7 >= 0) {
    uint64_t v19 = byte_258E6E7;
  }
  if (v5 != v19) {
    return 0;
  }
  if (byte_258E6E7 >= 0) {
    uint64_t v20 = &xmmword_258E6D0;
  }
  else {
    uint64_t v20 = (long long *)xmmword_258E6D0;
  }
  if ((v3 & 0x80) != 0) {
    return memcmp(*v2, v20, v4) == 0;
  }
  if (!v3) {
    return 1;
  }
  uint64_t v21 = v3 - 1;
  do
  {
    int v23 = *(unsigned __int8 *)v2;
    uint64_t v2 = (const void **)((char *)v2 + 1);
    int v22 = v23;
    int v25 = *(unsigned __int8 *)v20;
    uint64_t v20 = (long long *)((char *)v20 + 1);
    int v24 = v25;
    BOOL v27 = v21-- != 0;
    BOOL result = v22 == v24;
  }
  while (v22 == v24 && v27);
  return result;
}

void sub_60E320(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2 = (const void **)a1;
  uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  size_t v5 = *(void *)(a1 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  uint64_t v7 = *((void *)&xmmword_258E688 + 1);
  if (byte_258E69F >= 0) {
    uint64_t v7 = byte_258E69F;
  }
  if (v6 != v7) {
    goto LABEL_17;
  }
  if (byte_258E69F >= 0) {
    uint64_t v8 = &xmmword_258E688;
  }
  else {
    uint64_t v8 = (long long *)xmmword_258E688;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v2, v8, v5)) {
      goto LABEL_17;
    }
LABEL_29:
    if (byte_258E6FF < 0)
    {
      uint64_t v20 = &xmmword_258E6E8;
      goto LABEL_69;
    }
    uint64_t v15 = &xmmword_258E6E8;
LABEL_66:
    *(_OWORD *)a2 = *v15;
    *(void *)(a2 + 16) = *((void *)v15 + 2);
    return;
  }
  if (!v4) {
    goto LABEL_29;
  }
  uint64_t v9 = v2;
  uint64_t v10 = v4;
  while (*(unsigned __int8 *)v9 == *(unsigned __int8 *)v8)
  {
    uint64_t v9 = (const void **)((char *)v9 + 1);
    uint64_t v8 = (long long *)((char *)v8 + 1);
    if (!--v10) {
      goto LABEL_29;
    }
  }
LABEL_17:
  uint64_t v11 = *((void *)&xmmword_258E6B8 + 1);
  if (byte_258E6CF >= 0) {
    uint64_t v11 = byte_258E6CF;
  }
  if (v6 != v11) {
    goto LABEL_32;
  }
  if (byte_258E6CF >= 0) {
    long long v12 = &xmmword_258E6B8;
  }
  else {
    long long v12 = (long long *)xmmword_258E6B8;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v2, v12, v5)) {
      goto LABEL_32;
    }
    goto LABEL_44;
  }
  if (!v4)
  {
LABEL_44:
    if (byte_258E717 < 0)
    {
      uint64_t v20 = &xmmword_258E700;
      goto LABEL_69;
    }
    uint64_t v15 = &xmmword_258E700;
    goto LABEL_66;
  }
  long long v13 = v2;
  uint64_t v14 = v4;
  while (*(unsigned __int8 *)v13 == *(unsigned __int8 *)v12)
  {
    long long v13 = (const void **)((char *)v13 + 1);
    long long v12 = (long long *)((char *)v12 + 1);
    if (!--v14) {
      goto LABEL_44;
    }
  }
LABEL_32:
  uint64_t v16 = *((void *)&xmmword_258E6A0 + 1);
  if (byte_258E6B7 >= 0) {
    uint64_t v16 = byte_258E6B7;
  }
  if (v6 == v16)
  {
    if (byte_258E6B7 >= 0) {
      long long v17 = &xmmword_258E6A0;
    }
    else {
      long long v17 = (long long *)xmmword_258E6A0;
    }
    if ((v4 & 0x80) == 0)
    {
      if (v4)
      {
        uint64_t v18 = v2;
        uint64_t v19 = v4;
        while (*(unsigned __int8 *)v18 == *(unsigned __int8 *)v17)
        {
          uint64_t v18 = (const void **)((char *)v18 + 1);
          long long v17 = (long long *)((char *)v17 + 1);
          if (!--v19) {
            goto LABEL_59;
          }
        }
        goto LABEL_48;
      }
      goto LABEL_59;
    }
    if (!memcmp(*v2, v17, v5))
    {
LABEL_59:
      if (byte_258E72F < 0)
      {
        uint64_t v20 = &xmmword_258E718;
        goto LABEL_69;
      }
      uint64_t v15 = &xmmword_258E718;
      goto LABEL_66;
    }
  }
LABEL_48:
  uint64_t v21 = *((void *)&xmmword_258E6D0 + 1);
  if (byte_258E6E7 >= 0) {
    uint64_t v21 = byte_258E6E7;
  }
  if (v6 != v21) {
    goto LABEL_63;
  }
  if (byte_258E6E7 >= 0) {
    int v22 = &xmmword_258E6D0;
  }
  else {
    int v22 = (long long *)xmmword_258E6D0;
  }
  if ((v4 & 0x80) == 0)
  {
    if (v4)
    {
      while (*(unsigned __int8 *)v2 == *(unsigned __int8 *)v22)
      {
        uint64_t v2 = (const void **)((char *)v2 + 1);
        int v22 = (long long *)((char *)v22 + 1);
        if (!--v4) {
          goto LABEL_64;
        }
      }
      goto LABEL_63;
    }
    goto LABEL_64;
  }
  if (memcmp(*v2, v22, v5))
  {
LABEL_63:
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    return;
  }
LABEL_64:
  if ((byte_258E747 & 0x80000000) == 0)
  {
    uint64_t v15 = &xmmword_258E730;
    goto LABEL_66;
  }
  uint64_t v20 = &xmmword_258E730;
LABEL_69:
  int v23 = *(void **)v20;
  unint64_t v24 = *((void *)v20 + 1);

  sub_4200((unsigned char *)a2, v23, v24);
}

std::string *sub_60E630(std::string *result, uint64_t a2, std::string *this)
{
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    size_t v5 = *(uint64_t **)(a2 + 16);
    if (!v5)
    {
LABEL_5:
      sub_625E4(this, (char *)&qword_258E5E0, (uint64_t)&word_258E628);
      return sub_625E4(this, (char *)&qword_258E5F8, (uint64_t)&word_258E640);
    }
    while (1)
    {
      if (sub_60E0B0((uint64_t)result, (uint64_t)(v5 + 2)))
      {
        sub_60E320((uint64_t)(v5 + 2), (uint64_t)__dst);
        if (*((char *)v5 + 159) < 0)
        {
          sub_4200(__p, (void *)v5[17], v5[18]);
        }
        else
        {
          *(_OWORD *)std::string __p = *(_OWORD *)(v5 + 17);
          uint64_t v7 = v5[19];
        }
      }
      else
      {
        if (*((char *)v5 + 39) < 0)
        {
          sub_4200(__dst, (void *)v5[2], v5[3]);
        }
        else
        {
          *(_OWORD *)std::string __dst = *((_OWORD *)v5 + 1);
          uint64_t v9 = v5[4];
        }
        sub_6F3150((char *)v5 + 40, (uint64_t)__p);
      }
      BOOL result = sub_625E4(this, (char *)__dst, (uint64_t)__p);
      if (SHIBYTE(v7) < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v9) < 0) {
LABEL_20:
        }
          operator delete(__dst[0]);
      }
      else if (SHIBYTE(v9) < 0)
      {
        goto LABEL_20;
      }
      size_t v5 = (uint64_t *)*v5;
      if (!v5) {
        goto LABEL_5;
      }
    }
  }
  return result;
}

void sub_60E770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((a21 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_60E7BC(uint64_t a1, uint64_t a2, std::string *a3)
{
  for (uint64_t i = *(uint64_t **)(a2 + 16); i; uint64_t i = (uint64_t *)*i)
  {
    if (*((char *)i + 39) < 0)
    {
      sub_4200(__dst, (void *)i[2], i[3]);
    }
    else
    {
      *(_OWORD *)std::string __dst = *((_OWORD *)i + 1);
      uint64_t v10 = i[4];
    }
    sub_6F3178(__p, i + 5);
    sub_625E4(a3, (char *)__dst, (uint64_t)__p);
    unsigned int v5 = sub_658930((uint64_t)__dst);
    unsigned int v6 = a3[1].__r_.__value_.__s.__data_[0];
    if (v6 <= v5) {
      LOBYTE(v6) = v5;
    }
    a3[1].__r_.__value_.__s.__data_[0] = v6;
    if (v8 < 0)
    {
      operator delete(__p[0]);
      if (SHIBYTE(v10) < 0) {
LABEL_13:
      }
        operator delete(__dst[0]);
    }
    else if (SHIBYTE(v10) < 0)
    {
      goto LABEL_13;
    }
  }
}

void sub_60E888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_60E8D8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7 = *(void *)a1;
  if (!v7)
  {
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    return;
  }
  uint64_t v10 = (std::string *)sub_8D7730(v7, a2);
  if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v10 = (std::string *)sub_4200((unsigned char *)a5, v10->__r_.__value_.__l.__data_, v10->__r_.__value_.__l.__size_);
    if (a4) {
      goto LABEL_4;
    }
LABEL_25:
    sub_60E630(v10, a3, (std::string *)a5);
    return;
  }
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  *(void *)(a5 + 16) = *((void *)&v10->__r_.__value_.__l + 2);
  *(_OWORD *)a5 = v11;
  if (!a4) {
    goto LABEL_25;
  }
LABEL_4:
  sub_65AF0(*(_DWORD *)(a1 + 2072), v22);
  sub_3DF0((uint64_t *)a5, (uint64_t *)v22, v19);
  if (*(char *)(a5 + 23) < 0) {
    operator delete(*(void **)a5);
  }
  *(_OWORD *)a5 = *(_OWORD *)v19;
  *(void *)(a5 + 16) = v20;
  *(_OWORD *)uint64_t v19 = 0u;
  long long v20 = 0u;
  int v21 = 1065353216;
  if (*(char *)(a5 + 23) >= 0) {
    uint64_t v13 = *(unsigned __int8 *)(a5 + 23);
  }
  else {
    uint64_t v13 = *(void *)(a5 + 8);
  }
  if (v13)
  {
    if (v19 != (void **)a3)
    {
      int v21 = *(_DWORD *)(a3 + 32);
      sub_59E5E4(v19, *(uint64_t **)(a3 + 16), 0);
      for (uint64_t i = *(uint64_t **)(a3 + 16); i; uint64_t i = (uint64_t *)*i)
      {
        sub_3DF0(i + 2, (uint64_t *)v22, __p);
        uint64_t v26 = __p;
        uint64_t v15 = sub_617978((uint64_t)v19, (uint64_t)__p, (uint64_t)&unk_20F06E0, (long long **)&v26);
        std::string::operator=((std::string *)(v15 + 5), (const std::string *)(i + 5));
        v15[8] = i[8];
        std::string::operator=((std::string *)v15 + 3, (const std::string *)i + 3);
        v15[12] = i[12];
        *((_DWORD *)v15 + 26) = *((_DWORD *)i + 26);
        std::string::operator=((std::string *)(v15 + 14), (const std::string *)(i + 14));
        std::string::operator=((std::string *)(v15 + 17), (const std::string *)(i + 17));
        *((_DWORD *)v15 + 40) = *((_DWORD *)i + 40);
        long long v12 = std::string::operator=((std::string *)v15 + 7, (const std::string *)i + 7);
        if (v25 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  sub_60E630(v12, (uint64_t)v19, (std::string *)a5);
  uint64_t v16 = (void *)v20;
  if ((void)v20)
  {
    do
    {
      long long v17 = (void *)*v16;
      sub_4F4B48((uint64_t)(v16 + 2));
      operator delete(v16);
      uint64_t v16 = v17;
    }
    while (v17);
  }
  uint64_t v18 = v19[0];
  v19[0] = 0;
  if (v18) {
    operator delete(v18);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
}

void sub_60EB24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  sub_4DD068((uint64_t)&a9);
  if (a20 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v26 + 23) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else if ((*(char *)(v26 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v26);
  _Unwind_Resume(a1);
}

void sub_60EBA4(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (sub_63701C(a2))
  {
    if (*a1)
    {
      char v8 = (uint64_t *)nullsub_1(a2);
      uint64_t v9 = *v8;
      uint64_t v10 = v8[1];
      while (1)
      {
        if (v9 == v10) {
          return;
        }
        if ((sub_8D8694(*a1, v9, 0) & 1) == 0)
        {
          if (*(char *)(v9 + 23) < 0)
          {
            if (*(void *)(v9 + 8)) {
              goto LABEL_4;
            }
          }
          else if (*(unsigned char *)(v9 + 23))
          {
            goto LABEL_4;
          }
        }
        uint64_t v11 = sub_5231C(a2);
        sub_60E8D8((uint64_t)a1, v9, v11, a3, (uint64_t)__p);
        unint64_t v12 = *(void *)(a4 + 8);
        if (v12 >= *(void *)(a4 + 16)) {
          break;
        }
        if (SHIBYTE(v16) < 0)
        {
          sub_4200(*(unsigned char **)(a4 + 8), __p[0], (unint64_t)__p[1]);
        }
        else
        {
          long long v13 = *(_OWORD *)__p;
          *(void *)(v12 + 16) = v16;
          *(_OWORD *)unint64_t v12 = v13;
        }
        *(void *)(a4 + 8) = v12 + 24;
        *(void *)(a4 + 8) = v12 + 24;
        if (SHIBYTE(v16) < 0) {
          goto LABEL_18;
        }
LABEL_4:
        v9 += 24;
      }
      *(void *)(a4 + 8) = sub_1D740((char **)a4, (uint64_t)__p);
      if ((SHIBYTE(v16) & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_18:
      operator delete(__p[0]);
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v14 = (std::string **)nullsub_1(a2);
    if (v14 != (std::string **)a4) {
      sub_69208(a4, *v14, v14[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v14[1] - (char *)*v14) >> 3));
    }
  }
}

void sub_60ED18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_1A668(v15);
  _Unwind_Resume(a1);
}

void sub_60ED68(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v123 = 0;
  uint64_t v124 = 0;
  uint64_t v125 = 0;
  uint64_t v122 = (long long **)a2;
  do
  {
    sub_BA194((void **)&v123, &v122);
    sub_637D8C((uint64_t)v122, __p);
    unsigned int v5 = (long long **)__p[0];
    unsigned int v6 = (std::__shared_weak_count *)__p[1];
    uint64_t v122 = (long long **)__p[0];
    if (__p[1])
    {
      if (!atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      unsigned int v5 = v122;
    }
  }
  while (v5);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  unint64_t v119 = 0;
  unint64_t v120 = 0;
  uint64_t v121 = 0;
  uint64_t v7 = v123;
  char v8 = v124;
  if (v123 != v124)
  {
    uint64_t v91 = a3;
    while (1)
    {
      uint64_t v122 = (long long **)*(v8 - 1);
      uint64_t v124 = (char *)(v8 - 1);
      uint64_t v10 = nullsub_1(v122);
      sub_60EBA4((uint64_t *)a1, v10, 0, (uint64_t)&v117);
      sub_60FE18(v122, (uint64_t)v111);
      unint64_t v11 = v112;
      if ((v112 & 0x80u) != 0) {
        unint64_t v11 = (unint64_t)v111[1];
      }
      if (v11) {
        break;
      }
      uint64_t v12 = v114;
      if ((v114 & 0x80u) != 0) {
        uint64_t v12 = *((void *)&v113 + 1);
      }
      if (v12) {
        break;
      }
      uint64_t v13 = v116;
      if ((v116 & 0x80u) != 0) {
        uint64_t v13 = *((void *)&v115 + 1);
      }
      if (v13) {
        break;
      }
      if (&v117 != (std::string **)a3) {
        sub_69208(a3, v117, v118, 0xAAAAAAAAAAAAAAABLL * (((char *)v118 - (char *)v117) >> 3));
      }
      sub_637D5C((uint64_t *)v122, (uint64_t)__p);
      sub_6101E0((uint64_t *)a1, (uint64_t *)__p, (uint64_t)&v119);
      int v85 = (void **)__p[0];
      if (__p[0])
      {
        size_t v86 = (void **)__p[1];
        int v82 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            if (*((char *)v86 - 1) < 0) {
              operator delete(*(v86 - 3));
            }
            v86 -= 3;
          }
          while (v86 != v85);
          int v82 = __p[0];
        }
        __p[1] = v85;
        goto LABEL_212;
      }
LABEL_213:
      if ((char)v116 < 0)
      {
        operator delete((void *)v115);
        if (((char)v114 & 0x80000000) == 0)
        {
LABEL_215:
          if (((char)v112 & 0x80000000) == 0) {
            goto LABEL_216;
          }
          goto LABEL_220;
        }
      }
      else if (((char)v114 & 0x80000000) == 0)
      {
        goto LABEL_215;
      }
      operator delete((void *)v113);
      if (((char)v112 & 0x80000000) == 0)
      {
LABEL_216:
        uint64_t v83 = v117;
        if (!v117) {
          goto LABEL_11;
        }
LABEL_221:
        uint64_t v84 = v118;
        uint64_t v9 = v83;
        if (v118 != v83)
        {
          do
          {
            if (SHIBYTE(v84[-1].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v84[-1].__r_.__value_.__l.__data_);
            }
            --v84;
          }
          while (v84 != v83);
          uint64_t v9 = v117;
        }
        size_t v118 = v83;
        operator delete(v9);
        goto LABEL_11;
      }
LABEL_220:
      operator delete(v111[0]);
      uint64_t v83 = v117;
      if (v117) {
        goto LABEL_221;
      }
LABEL_11:
      uint64_t v7 = v123;
      char v8 = v124;
      if (v123 == v124)
      {
        unint64_t v87 = v119;
        if (v119)
        {
          unint64_t v88 = v120;
          uint64_t v89 = v119;
          if (v120 != v119)
          {
            do
            {
              if (*((char *)v88 - 1) < 0) {
                operator delete(*(v88 - 3));
              }
              v88 -= 3;
            }
            while (v88 != v87);
            uint64_t v89 = v119;
          }
          unint64_t v120 = v87;
          operator delete(v89);
          uint64_t v7 = v123;
        }
        goto LABEL_244;
      }
    }
    *(_OWORD *)std::string __p = 0u;
    long long v96 = 0u;
    LODWORD(v97) = 1065353216;
    sub_63531C((uint64_t)&v107, (uint64_t)v111, (uint64_t)__p);
    uint64_t v14 = (uint64_t **)v96;
    if (!(void)v96)
    {
LABEL_37:
      uint64_t v16 = __p[0];
      __p[0] = 0;
      if (v16) {
        operator delete(v16);
      }
      v105[0] = 0;
      v105[1] = 0;
      int v106 = 0;
      long long v17 = (long long *)v117;
      uint64_t v90 = v118;
      if (v117 == v118)
      {
LABEL_40:
        uint64_t v18 = *(std::string **)a3;
        if (*(void *)a3)
        {
          uint64_t v19 = *(std::string **)(a3 + 8);
          long long v20 = *(std::string **)a3;
          if (v19 != v18)
          {
            do
            {
              if (SHIBYTE(v19[-1].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v19[-1].__r_.__value_.__l.__data_);
              }
              --v19;
            }
            while (v19 != v18);
            long long v20 = *(std::string **)a3;
          }
          *(void *)(a3 + 8) = v18;
          operator delete(v20);
          *(void *)a3 = 0;
          *(void *)(a3 + 8) = 0;
          *(void *)(a3 + 16) = 0;
        }
        *(_OWORD *)a3 = *(_OWORD *)v105;
        *(void *)(a3 + 16) = v106;
        v105[1] = 0;
        int v106 = 0;
        v105[0] = 0;
        sub_637D5C((uint64_t *)v122, (uint64_t)__p);
        sub_6101E0((uint64_t *)a1, (uint64_t *)__p, (uint64_t)&v119);
        long long v71 = (void **)__p[0];
        if (__p[0])
        {
          uint64_t v72 = (void **)__p[1];
          long long v73 = __p[0];
          if (__p[1] != __p[0])
          {
            do
            {
              if (*((char *)v72 - 1) < 0) {
                operator delete(*(v72 - 3));
              }
              v72 -= 3;
            }
            while (v72 != v71);
            long long v73 = __p[0];
          }
          __p[1] = v71;
          operator delete(v73);
        }
        uint64_t v74 = (void **)v105[0];
        if (v105[0])
        {
          long long v75 = (void **)v105[1];
          int v76 = v105[0];
          if (v105[1] != v105[0])
          {
            do
            {
              if (*((char *)v75 - 1) < 0) {
                operator delete(*(v75 - 3));
              }
              v75 -= 3;
            }
            while (v75 != v74);
            int v76 = v105[0];
          }
          v105[1] = v74;
          operator delete(v76);
        }
        size_t v77 = v110;
        if (!v110)
        {
LABEL_202:
          size_t v79 = v109;
          size_t v109 = 0;
          if (v79) {
            operator delete(v79);
          }
          unint64_t v80 = (void **)v107;
          if (v107)
          {
            unint64_t v81 = v108;
            int v82 = v107;
            if (v108 != v107)
            {
              do
              {
                if (*((char *)v81 - 1) < 0) {
                  operator delete(*(v81 - 3));
                }
                v81 -= 3;
              }
              while (v81 != v80);
              int v82 = v107;
            }
            int v108 = v80;
LABEL_212:
            operator delete(v82);
            goto LABEL_213;
          }
          goto LABEL_213;
        }
        while (1)
        {
          int v78 = *v77;
          if (*((char *)v77 + 191) < 0)
          {
            operator delete(v77[21]);
            if (*((char *)v77 + 159) < 0) {
              goto LABEL_197;
            }
LABEL_192:
            if ((*((char *)v77 + 135) & 0x80000000) == 0) {
              goto LABEL_193;
            }
LABEL_198:
            operator delete(v77[14]);
            if (*((char *)v77 + 95) < 0) {
              goto LABEL_199;
            }
LABEL_194:
            if ((*((char *)v77 + 63) & 0x80000000) == 0) {
              goto LABEL_200;
            }
LABEL_188:
            operator delete(v77[5]);
            if (*((char *)v77 + 39) < 0) {
              goto LABEL_201;
            }
LABEL_189:
            operator delete(v77);
            size_t v77 = (uint64_t **)v78;
            if (!v78) {
              goto LABEL_202;
            }
          }
          else
          {
            if ((*((char *)v77 + 159) & 0x80000000) == 0) {
              goto LABEL_192;
            }
LABEL_197:
            operator delete(v77[17]);
            if (*((char *)v77 + 135) < 0) {
              goto LABEL_198;
            }
LABEL_193:
            if ((*((char *)v77 + 95) & 0x80000000) == 0) {
              goto LABEL_194;
            }
LABEL_199:
            operator delete(v77[9]);
            if (*((char *)v77 + 63) < 0) {
              goto LABEL_188;
            }
LABEL_200:
            if ((*((char *)v77 + 39) & 0x80000000) == 0) {
              goto LABEL_189;
            }
LABEL_201:
            operator delete(v77[2]);
            operator delete(v77);
            size_t v77 = (uint64_t **)v78;
            if (!v78) {
              goto LABEL_202;
            }
          }
        }
      }
      while (1)
      {
        sub_6F3000((char *)__p, v17);
        sub_635C08((uint64_t)&v107, &v113, (uint64_t)__p, 0);
        if (v104 < 0)
        {
          operator delete(v103);
          if ((v102 & 0x80000000) == 0)
          {
LABEL_46:
            if ((v100 & 0x80000000) == 0) {
              goto LABEL_47;
            }
            goto LABEL_132;
          }
        }
        else if ((v102 & 0x80000000) == 0)
        {
          goto LABEL_46;
        }
        operator delete(v101);
        if ((v100 & 0x80000000) == 0)
        {
LABEL_47:
          if (v98 < 0) {
            goto LABEL_133;
          }
          goto LABEL_48;
        }
LABEL_132:
        operator delete(v99);
        if (v98 < 0)
        {
LABEL_133:
          operator delete(v97);
          if ((SBYTE7(v96) & 0x80000000) == 0) {
            goto LABEL_49;
          }
          goto LABEL_134;
        }
LABEL_48:
        if ((SBYTE7(v96) & 0x80000000) == 0) {
          goto LABEL_49;
        }
LABEL_134:
        operator delete(__p[0]);
LABEL_49:
        uint64_t v21 = v116;
        if ((v116 & 0x80u) != 0) {
          uint64_t v21 = *((void *)&v115 + 1);
        }
        uint64_t v92 = v17;
        if (v21)
        {
          int v22 = sub_637FB0((uint64_t)v122);
          uint64_t v23 = *(void *)(a3 + 8) - *(void *)a3;
          if (v23)
          {
            int v24 = v22;
            unint64_t v25 = 0;
            unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (v23 >> 3);
            while (1)
            {
              BOOL v27 = *(std::string **)a3;
              if (*(void *)(a3 + 8) - *(void *)a3 != (char *)v120 - (char *)v119) {
                goto LABEL_64;
              }
              uint64_t v28 = sub_4D4928(&v119, v25);
              if (!*(void *)a1 || !sub_8D8694(*(void *)a1, v28, 0)) {
                goto LABEL_64;
              }
              uint64_t v29 = *(unsigned __int8 *)(v28 + 23);
              if ((v29 & 0x80u) != 0) {
                uint64_t v29 = *(void *)(v28 + 8);
              }
              if (!v29)
              {
LABEL_64:
                unint64_t v32 = &v27[v25];
                if (v24 == 1) {
                  goto LABEL_65;
                }
                goto LABEL_89;
              }
              int v30 = sub_8D7730(*(void *)a1, v28);
              if (*((char *)v30 + 23) < 0)
              {
                sub_4200(__p, (void *)*v30, v30[1]);
              }
              else
              {
                long long v31 = *(_OWORD *)v30;
                *(void *)&long long v96 = v30[2];
                *(_OWORD *)std::string __p = v31;
              }
              uint64_t v35 = qword_258E970;
              uint64_t v34 = unk_258E978;
              char v36 = BYTE7(v96);
              if (qword_258E970 == unk_258E978)
              {
LABEL_87:
                BOOL v42 = v35 != v34;
                if ((v36 & 0x80) == 0) {
                  goto LABEL_88;
                }
              }
              else
              {
                if ((SBYTE7(v96) & 0x80u) == 0) {
                  uint64_t v37 = (void *)BYTE7(v96);
                }
                else {
                  uint64_t v37 = __p[1];
                }
                if ((SBYTE7(v96) & 0x80u) == 0) {
                  uint64_t v38 = __p;
                }
                else {
                  uint64_t v38 = (void **)__p[0];
                }
                do
                {
                  uint64_t v39 = *(unsigned __int8 *)(v35 + 23);
                  if ((v39 & 0x80u) == 0) {
                    uint64_t v40 = (void *)*(unsigned __int8 *)(v35 + 23);
                  }
                  else {
                    uint64_t v40 = *(void **)(v35 + 8);
                  }
                  if (v40 == v37)
                  {
                    if ((v39 & 0x80) != 0)
                    {
                      if (!memcmp(*(const void **)v35, v38, *(void *)(v35 + 8))) {
                        goto LABEL_87;
                      }
                    }
                    else
                    {
                      if (!*(unsigned char *)(v35 + 23)) {
                        goto LABEL_87;
                      }
                      uint64_t v41 = 0;
                      while (*(unsigned __int8 *)(v35 + v41) == *((unsigned __int8 *)v38 + v41))
                      {
                        if (v39 == ++v41) {
                          goto LABEL_87;
                        }
                      }
                    }
                  }
                  v35 += 24;
                }
                while (v35 != v34);
                BOOL v42 = 0;
                if ((v36 & 0x80) == 0)
                {
LABEL_88:
                  a3 = v91;
                  unint64_t v32 = &v27[v25];
                  if ((v24 | v42) == 1) {
                    goto LABEL_65;
                  }
                  goto LABEL_89;
                }
              }
              operator delete(__p[0]);
              a3 = v91;
              unint64_t v32 = &v27[v25];
              if ((v24 | v42) == 1)
              {
LABEL_65:
                if (SHIBYTE(v32->__r_.__value_.__r.__words[2]) < 0)
                {
                  sub_4200(__dst, v32->__r_.__value_.__l.__data_, v32->__r_.__value_.__l.__size_);
                }
                else
                {
                  long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
                  std::string::size_type v94 = v32->__r_.__value_.__r.__words[2];
                  *(_OWORD *)std::string __dst = v33;
                }
                goto LABEL_91;
              }
LABEL_89:
              sub_65AF0(*(_DWORD *)(a1 + 2072), __p);
              sub_3DF0((uint64_t *)v32, (uint64_t *)__p, __dst);
              if (SBYTE7(v96) < 0) {
                operator delete(__p[0]);
              }
LABEL_91:
              sub_6F3000((char *)__p, (long long *)__dst);
              sub_635C08((uint64_t)&v107, &v115, (uint64_t)__p, 0);
              if (v104 < 0)
              {
                operator delete(v103);
                if ((v102 & 0x80000000) == 0)
                {
LABEL_93:
                  if ((v100 & 0x80000000) == 0) {
                    goto LABEL_94;
                  }
                  goto LABEL_109;
                }
              }
              else if ((v102 & 0x80000000) == 0)
              {
                goto LABEL_93;
              }
              operator delete(v101);
              if ((v100 & 0x80000000) == 0)
              {
LABEL_94:
                if ((v98 & 0x80000000) == 0) {
                  goto LABEL_95;
                }
                goto LABEL_110;
              }
LABEL_109:
              operator delete(v99);
              if ((v98 & 0x80000000) == 0)
              {
LABEL_95:
                if (SBYTE7(v96) < 0) {
                  goto LABEL_111;
                }
                goto LABEL_96;
              }
LABEL_110:
              operator delete(v97);
              if (SBYTE7(v96) < 0) {
LABEL_111:
              }
                operator delete(__p[0]);
LABEL_96:
              uint64_t v43 = sub_5231C((uint64_t)&v107);
              sub_60E8D8(a1, (uint64_t)v111, v43, 1, (uint64_t)__p);
              unint64_t v44 = (void **)v105[1];
              if (v105[1] >= v106)
              {
                std::string v47 = (void **)v105[0];
                unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * (((char *)v105[1] - (char *)v105[0]) >> 3);
                unint64_t v49 = v48 + 1;
                if (v48 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  sub_2E00();
                }
                if (0x5555555555555556 * ((v106 - (char *)v105[0]) >> 3) > v49) {
                  unint64_t v49 = 0x5555555555555556 * ((v106 - (char *)v105[0]) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((v106 - (char *)v105[0]) >> 3) >= 0x555555555555555) {
                  unint64_t v50 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v50 = v49;
                }
                if (v50)
                {
                  if (v50 > 0xAAAAAAAAAAAAAAALL) {
                    sub_188D718();
                  }
                  size_t v51 = (char *)operator new(24 * v50);
                }
                else
                {
                  size_t v51 = 0;
                }
                int v52 = &v51[24 * v48];
                *(_OWORD *)int v52 = *(_OWORD *)__p;
                *((void *)v52 + 2) = v96;
                size_t v53 = &v51[24 * v50];
                __p[1] = 0;
                *(void *)&long long v96 = 0;
                __p[0] = 0;
                int64_t v46 = v52 + 24;
                if (v44 == v47)
                {
                  v105[0] = &v51[24 * v48];
                  v105[1] = v52 + 24;
                  int v106 = v53;
                }
                else
                {
                  do
                  {
                    long long v54 = *(_OWORD *)(v44 - 3);
                    *((void *)v52 - 1) = *(v44 - 1);
                    *(_OWORD *)(v52 - 24) = v54;
                    v52 -= 24;
                    *(v44 - 2) = 0;
                    *(v44 - 1) = 0;
                    *(v44 - 3) = 0;
                    v44 -= 3;
                  }
                  while (v44 != v47);
                  unint64_t v44 = (void **)v105[0];
                  unint64_t v55 = (void **)v105[1];
                  v105[0] = v52;
                  v105[1] = v46;
                  int v106 = v53;
                  while (v55 != v44)
                  {
                    if (*((char *)v55 - 1) < 0) {
                      operator delete(*(v55 - 3));
                    }
                    v55 -= 3;
                  }
                }
                if (v44) {
                  operator delete(v44);
                }
              }
              else
              {
                long long v45 = *(_OWORD *)__p;
                *((void *)v105[1] + 2) = v96;
                *(_OWORD *)unint64_t v44 = v45;
                __p[1] = 0;
                *(void *)&long long v96 = 0;
                __p[0] = 0;
                int64_t v46 = v44 + 3;
              }
              v105[1] = v46;
              if (SBYTE7(v96) < 0)
              {
                operator delete(__p[0]);
                if ((SHIBYTE(v94) & 0x80000000) == 0) {
                  goto LABEL_55;
                }
LABEL_125:
                operator delete(__dst[0]);
                if (++v25 == v26) {
                  break;
                }
              }
              else
              {
                if (SHIBYTE(v94) < 0) {
                  goto LABEL_125;
                }
LABEL_55:
                if (++v25 == v26) {
                  break;
                }
              }
            }
          }
        }
        else
        {
          uint64_t v56 = sub_5231C((uint64_t)&v107);
          if (*(void *)a1)
          {
            uint64_t v57 = (std::string *)sub_8D7730(*(void *)a1, (uint64_t)v111);
            if (SHIBYTE(v57->__r_.__value_.__r.__words[2]) < 0)
            {
              uint64_t v57 = (std::string *)sub_4200(__p, v57->__r_.__value_.__l.__data_, v57->__r_.__value_.__l.__size_);
            }
            else
            {
              long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
              *(void *)&long long v96 = *((void *)&v57->__r_.__value_.__l + 2);
              *(_OWORD *)std::string __p = v58;
            }
            sub_60E630(v57, v56, (std::string *)__p);
          }
          else
          {
            __p[0] = 0;
            __p[1] = 0;
            *(void *)&long long v96 = 0;
          }
          int v59 = (void **)v105[1];
          if (v105[1] >= v106)
          {
            long long v62 = (void **)v105[0];
            unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * (((char *)v105[1] - (char *)v105[0]) >> 3);
            unint64_t v64 = v63 + 1;
            if (v63 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_2E00();
            }
            if (0x5555555555555556 * ((v106 - (char *)v105[0]) >> 3) > v64) {
              unint64_t v64 = 0x5555555555555556 * ((v106 - (char *)v105[0]) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v106 - (char *)v105[0]) >> 3) >= 0x555555555555555) {
              unint64_t v65 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v65 = v64;
            }
            if (v65)
            {
              if (v65 > 0xAAAAAAAAAAAAAAALL) {
                sub_188D718();
              }
              size_t v66 = (char *)operator new(24 * v65);
            }
            else
            {
              size_t v66 = 0;
            }
            int v67 = &v66[24 * v63];
            *(_OWORD *)int v67 = *(_OWORD *)__p;
            *((void *)v67 + 2) = v96;
            size_t v68 = &v66[24 * v65];
            __p[1] = 0;
            *(void *)&long long v96 = 0;
            __p[0] = 0;
            std::string::size_type v61 = v67 + 24;
            if (v59 == v62)
            {
              v105[0] = &v66[24 * v63];
              v105[1] = v67 + 24;
              int v106 = v68;
            }
            else
            {
              do
              {
                long long v69 = *(_OWORD *)(v59 - 3);
                *((void *)v67 - 1) = *(v59 - 1);
                *(_OWORD *)(v67 - 24) = v69;
                v67 -= 24;
                *(v59 - 2) = 0;
                *(v59 - 1) = 0;
                *(v59 - 3) = 0;
                v59 -= 3;
              }
              while (v59 != v62);
              int v59 = (void **)v105[0];
              unint64_t v70 = (void **)v105[1];
              v105[0] = v67;
              v105[1] = v61;
              int v106 = v68;
              while (v70 != v59)
              {
                if (*((char *)v70 - 1) < 0) {
                  operator delete(*(v70 - 3));
                }
                v70 -= 3;
              }
            }
            if (v59) {
              operator delete(v59);
            }
          }
          else
          {
            long long v60 = *(_OWORD *)__p;
            *((void *)v105[1] + 2) = v96;
            *(_OWORD *)int v59 = v60;
            __p[1] = 0;
            *(void *)&long long v96 = 0;
            __p[0] = 0;
            std::string::size_type v61 = v59 + 3;
          }
          v105[1] = v61;
          if (SBYTE7(v96) < 0) {
            operator delete(__p[0]);
          }
        }
        long long v17 = (long long *)((char *)v92 + 24);
        if ((std::string *)((char *)v92 + 24) == v90) {
          goto LABEL_40;
        }
      }
    }
    while (1)
    {
      uint64_t v15 = *v14;
      if (*((char *)v14 + 191) < 0)
      {
        operator delete(v14[21]);
        if (*((char *)v14 + 159) < 0) {
          goto LABEL_32;
        }
LABEL_27:
        if ((*((char *)v14 + 135) & 0x80000000) == 0) {
          goto LABEL_28;
        }
LABEL_33:
        operator delete(v14[14]);
        if (*((char *)v14 + 95) < 0) {
          goto LABEL_34;
        }
LABEL_29:
        if ((*((char *)v14 + 63) & 0x80000000) == 0) {
          goto LABEL_35;
        }
LABEL_23:
        operator delete(v14[5]);
        if (*((char *)v14 + 39) < 0) {
          goto LABEL_36;
        }
LABEL_24:
        operator delete(v14);
        uint64_t v14 = (uint64_t **)v15;
        if (!v15) {
          goto LABEL_37;
        }
      }
      else
      {
        if ((*((char *)v14 + 159) & 0x80000000) == 0) {
          goto LABEL_27;
        }
LABEL_32:
        operator delete(v14[17]);
        if (*((char *)v14 + 135) < 0) {
          goto LABEL_33;
        }
LABEL_28:
        if ((*((char *)v14 + 95) & 0x80000000) == 0) {
          goto LABEL_29;
        }
LABEL_34:
        operator delete(v14[9]);
        if (*((char *)v14 + 63) < 0) {
          goto LABEL_23;
        }
LABEL_35:
        if ((*((char *)v14 + 39) & 0x80000000) == 0) {
          goto LABEL_24;
        }
LABEL_36:
        operator delete(v14[2]);
        operator delete(v14);
        uint64_t v14 = (uint64_t **)v15;
        if (!v15) {
          goto LABEL_37;
        }
      }
    }
  }
LABEL_244:
  if (v7)
  {
    uint64_t v124 = v7;
    operator delete(v7);
  }
}

void sub_60FA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54)
{
  if (*(char *)(v55 - 177) < 0)
  {
    operator delete(*(void **)(v55 - 200));
    if ((*(char *)(v55 - 201) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((*(char *)(v55 - 201) & 0x80000000) == 0)
  {
LABEL_3:
    if (*(char *)(v55 - 225) < 0) {
      goto LABEL_4;
    }
    goto LABEL_29;
  }
  operator delete(*(void **)(v55 - 224));
  if (*(char *)(v55 - 225) < 0)
  {
LABEL_4:
    operator delete(*(void **)(v55 - 248));
    uint64_t v57 = *(void ***)(v55 - 168);
    if (v57) {
      goto LABEL_5;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t v57 = *(void ***)(v55 - 168);
  if (v57)
  {
LABEL_5:
    long long v58 = *(void ***)(v55 - 160);
    int v59 = v57;
    if (v58 != v57)
    {
      do
      {
        if (*((char *)v58 - 1) < 0) {
          operator delete(*(v58 - 3));
        }
        v58 -= 3;
      }
      while (v58 != v57);
      int v59 = *(void ***)(v55 - 168);
    }
    *(void *)(v55 - 160) = v57;
    operator delete(v59);
    long long v60 = *(void ***)(v55 - 144);
    if (v60)
    {
LABEL_12:
      std::string::size_type v61 = *(void ***)(v55 - 136);
      long long v62 = v60;
      if (v61 != v60)
      {
        do
        {
          if (*((char *)v61 - 1) < 0) {
            operator delete(*(v61 - 3));
          }
          v61 -= 3;
        }
        while (v61 != v60);
        long long v62 = *(void ***)(v55 - 144);
      }
      *(void *)(v55 - 136) = v60;
      operator delete(v62);
      unint64_t v63 = (void **)*v54;
      if (*v54)
      {
LABEL_19:
        unint64_t v64 = (void **)v54[1];
        unint64_t v65 = v63;
        if (v64 != v63)
        {
          do
          {
            if (*((char *)v64 - 1) < 0) {
              operator delete(*(v64 - 3));
            }
            v64 -= 3;
          }
          while (v64 != v63);
          unint64_t v65 = *v54;
        }
        v54[1] = v63;
        operator delete(v65);
        size_t v66 = *(void **)(v55 - 112);
        if (v66)
        {
LABEL_26:
          *(void *)(v55 - 104) = v66;
          operator delete(v66);
          _Unwind_Resume(a1);
        }
LABEL_33:
        _Unwind_Resume(a1);
      }
LABEL_32:
      size_t v66 = *(void **)(v55 - 112);
      if (v66) {
        goto LABEL_26;
      }
      goto LABEL_33;
    }
LABEL_31:
    unint64_t v63 = (void **)*v54;
    if (*v54) {
      goto LABEL_19;
    }
    goto LABEL_32;
  }
LABEL_30:
  long long v60 = *(void ***)(v55 - 144);
  if (v60) {
    goto LABEL_12;
  }
  goto LABEL_31;
}

void sub_60FE18(long long **a1@<X1>, uint64_t a2@<X8>)
{
  switch(sub_637D84((uint64_t)a1))
  {
    case 2u:
      char v14 = 0;
      LOBYTE(v13) = 0;
      sub_618090((char *)a2, (long long *)&qword_258DCE0, &xmmword_258E478, &v13, 1);
      goto LABEL_27;
    case 3u:
      uint64_t v4 = (uint64_t *)&xmmword_258DCF8;
      unsigned int v5 = &xmmword_258E478;
      unsigned int v6 = &xmmword_258E490;
      uint64_t v7 = (char *)a2;
      char v8 = 1;
      goto LABEL_12;
    case 4u:
      char v14 = 0;
      LOBYTE(v13) = 0;
      sub_618090((char *)a2, &xmmword_258DD10, &xmmword_258E4D8, &v13, 1);
      goto LABEL_27;
    case 5u:
      uint64_t v4 = &qword_258DA40;
      unsigned int v5 = &xmmword_258E478;
      unsigned int v6 = &xmmword_258E490;
      goto LABEL_23;
    case 6u:
      uint64_t v4 = &qword_258DA58;
      unsigned int v5 = &xmmword_258E478;
      goto LABEL_20;
    case 7u:
    case 0xBu:
    case 0xCu:
      sub_635CD0(a1, (uint64_t)&v13);
      char v12 = 0;
      LOBYTE(v11[0]) = 0;
      sub_618090((char *)a2, &v13, (long long *)v11, (long long *)&qword_258E460, 1);
      goto LABEL_7;
    case 8u:
      char v14 = 0;
      LOBYTE(v13) = 0;
      sub_618090((char *)a2, (long long *)&qword_258DC08, &xmmword_258E478, &v13, 0);
      goto LABEL_27;
    case 9u:
      uint64_t v4 = &qword_258DBF0;
      unsigned int v5 = &xmmword_258E478;
      unsigned int v6 = &xmmword_258E490;
      goto LABEL_23;
    case 0xAu:
      uint64_t v4 = &qword_258DA70;
      unsigned int v5 = &xmmword_258E478;
      unsigned int v6 = (long long *)&qword_258E4A8;
      goto LABEL_23;
    case 0xDu:
      uint64_t v4 = &qword_258DA88;
      unsigned int v5 = &xmmword_258E478;
LABEL_20:
      unsigned int v6 = (long long *)(v4 + 333);
      goto LABEL_23;
    case 0xEu:
      uint64_t v4 = (uint64_t *)&xmmword_258DAA0;
      unsigned int v5 = (long long *)&qword_258E508;
      unsigned int v6 = (long long *)&qword_258E520;
      goto LABEL_23;
    case 0xFu:
      uint64_t v4 = &qword_258DA10;
      unsigned int v5 = (long long *)&qword_258E508;
      unsigned int v6 = (long long *)&qword_258E520;
LABEL_23:
      uint64_t v7 = (char *)a2;
      char v8 = 0;
LABEL_12:
      sub_618090(v7, (long long *)v4, v5, v6, v8);
      return;
    case 0x10u:
      char v14 = 0;
      LOBYTE(v13) = 0;
      sub_618090((char *)a2, &qword_25903B8, &xmmword_258E478, &v13, 0);
      goto LABEL_27;
    case 0x11u:
    case 0x12u:
    case 0x13u:
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)(a2 + 64) = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)a2 = 0u;
      return;
    default:
      char v14 = 0;
      LOBYTE(v13) = 0;
      char v12 = 0;
      LOBYTE(v11[0]) = 0;
      char v10 = 0;
      LOBYTE(__p) = 0;
      sub_618090((char *)a2, &v13, (long long *)v11, &__p, 0);
      if (v10 < 0) {
        operator delete((void *)__p);
      }
LABEL_7:
      if (v12 < 0) {
        operator delete(v11[0]);
      }
LABEL_27:
      if (v14 < 0) {
        operator delete((void *)v13);
      }
      return;
  }
}

void sub_6100E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((*(char *)(v21 - 17) & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void sub_6101E0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v6 = *(char **)a3;
  for (uint64_t i = *(char **)(a3 + 8); i != v6; i -= 24)
  {
    if (*(i - 1) < 0) {
      operator delete(*((void **)i - 3));
    }
  }
  *(void *)(a3 + 8) = v6;
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  if (*a2 != v9)
  {
    uint64_t v10 = *a1;
    if (*a1)
    {
LABEL_8:
      if (sub_8D8694(v10, v8, 0))
      {
        uint64_t v11 = *(unsigned __int8 *)(v8 + 23);
        int v12 = (char)v11;
        if ((v11 & 0x80u) != 0) {
          uint64_t v11 = *(void *)(v8 + 8);
        }
        if (v11)
        {
          unint64_t v13 = *(void *)(a3 + 8);
          if (v13 >= *(void *)(a3 + 16))
          {
            uint64_t v15 = sub_6E6EC((char **)a3, v8);
          }
          else
          {
            if (v12 < 0)
            {
              sub_4200(*(unsigned char **)(a3 + 8), *(void **)v8, *(void *)(v8 + 8));
            }
            else
            {
              long long v14 = *(_OWORD *)v8;
              *(void *)(v13 + 16) = *(void *)(v8 + 16);
              *(_OWORD *)unint64_t v13 = v14;
            }
            uint64_t v15 = (char *)(v13 + 24);
            *(void *)(a3 + 8) = v13 + 24;
          }
          *(void *)(a3 + 8) = v15;
        }
      }
      while (1)
      {
        v8 += 24;
        if (v8 == v9) {
          break;
        }
        uint64_t v10 = *a1;
        if (*a1) {
          goto LABEL_8;
        }
      }
    }
  }
}

void sub_6102E8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_6102F0(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  if (!*(void *)(a1 + 16))
  {
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    return;
  }
  char v10 = sub_658328(a2);
  uint64_t v11 = (char *)sub_8D7730(*(void *)(a1 + 16), (uint64_t)a2);
  if (v11[23] < 0)
  {
    uint64_t v11 = (char *)sub_4200(__p, *(void **)v11, *((void *)v11 + 1));
    if (!a4)
    {
LABEL_4:
      LOBYTE(v13) = HIBYTE(v17);
      if ((SHIBYTE(v17) & 0x80000000) == 0) {
        goto LABEL_5;
      }
      goto LABEL_13;
    }
  }
  else
  {
    long long v12 = *(_OWORD *)v11;
    uint64_t v17 = *((void *)v11 + 2);
    *(_OWORD *)long long __p = v12;
    if (!a4) {
      goto LABEL_4;
    }
  }
  sub_6FC2EC((char *)__p, (uint64_t)&v14);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)long long __p = v14;
  uint64_t v17 = v15;
  LOBYTE(v13) = HIBYTE(v15);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a5 = *(_OWORD *)__p;
    *(void *)(a5 + 16) = v17;
    *(unsigned char *)(a5 + 24) = v10;
    if (!(_BYTE)v13) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_13:
  uint64_t v11 = (char *)sub_4200((unsigned char *)a5, __p[0], (unint64_t)__p[1]);
  int v13 = SHIBYTE(v17);
  *(unsigned char *)(a5 + 24) = v10;
  if ((v13 & 0x80000000) == 0)
  {
    if (!(_BYTE)v13) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  if (__p[1])
  {
LABEL_15:
    sub_60E7BC((uint64_t)v11, a3, (std::string *)a5);
    LOBYTE(v13) = HIBYTE(v17);
  }
LABEL_16:
  if ((v13 & 0x80) != 0) {
    operator delete(__p[0]);
  }
}

void sub_61044C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if ((a18 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_61049C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  if (v4)
  {
    uint64_t v7 = nullsub_1(a2);
    uint64_t v8 = *(char ***)v7;
    uint64_t v9 = *(char ***)(v7 + 8);
    if (*(char ***)v7 != v9)
    {
      do
      {
        while (1)
        {
          while (1)
          {
            uint64_t v11 = sub_5231C(a2);
            sub_6102F0(a1, v8, v11, 0, (uint64_t)__p);
            unint64_t v12 = *(void *)(a3 + 8);
            if (v12 >= *(void *)(a3 + 16)) {
              break;
            }
            long long v10 = *(_OWORD *)__p;
            *(void *)(v12 + 16) = v16;
            *(_OWORD *)unint64_t v12 = v10;
            __p[1] = 0;
            uint64_t v16 = 0;
            __p[0] = 0;
            *(unsigned char *)(v12 + 24) = v17;
            *(void *)(a3 + 8) = v12 + 32;
            v8 += 3;
            if (v8 == v9) {
              return;
            }
          }
          int v13 = sub_6181A8((void **)a3, (uint64_t)__p);
          int v14 = SHIBYTE(v16);
          *(void *)(a3 + 8) = v13;
          if (v14 < 0) {
            break;
          }
          v8 += 3;
          if (v8 == v9) {
            return;
          }
        }
        operator delete(__p[0]);
        v8 += 3;
      }
      while (v8 != v9);
    }
  }
}

void sub_6105A0(_Unwind_Exception *a1)
{
  sub_3D4D90(v1);
  _Unwind_Resume(a1);
}

void sub_6105B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_3D4D90(v14);
    _Unwind_Resume(a1);
  }
  sub_3D4D90(v14);
  _Unwind_Resume(a1);
}

void sub_6105EC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v150 = 0u;
  long long v151 = 0u;
  *(_OWORD *)std::string::size_type v149 = 0u;
  do
  {
    unsigned int v5 = (char *)v149[1];
    if ((void *)v150 == v149[1]) {
      unint64_t v6 = 0;
    }
    else {
      unint64_t v6 = (((void)v150 - (unint64_t)v149[1]) << 6) - 1;
    }
    uint64_t v7 = *((void *)&v151 + 1);
    unint64_t v8 = *((void *)&v151 + 1) + v151;
    if (v6 == *((void *)&v151 + 1) + (void)v151)
    {
      sub_6182F8((uint64_t)v149);
      uint64_t v7 = *((void *)&v151 + 1);
      unsigned int v5 = (char *)v149[1];
      unint64_t v8 = v151 + *((void *)&v151 + 1);
    }
    *(void *)(*(void *)&v5[(v8 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v8 & 0x1FF)) = a2;
    *((void *)&v151 + 1) = v7 + 1;
    sub_637D8C(a2, v152);
    uint64_t v9 = *(std::__shared_weak_count **)&v152[8];
    a2 = *(void *)v152;
    if (*(void *)&v152[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v152[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  while (a2);
  sub_65AF0(*(_DWORD *)(a1 + 2104), v147);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v10 = *((void *)&v151 + 1);
  if (*((void *)&v151 + 1))
  {
    uint64_t v130 = a3;
    do
    {
      unint64_t v12 = *(long long ***)(*(void *)((char *)v149[1]
                                      + (((unint64_t)(v151 + v10 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((v151 + v10 - 1) & 0x1FF));
      if ((void *)v150 == v149[1]) {
        unint64_t v13 = 0;
      }
      else {
        unint64_t v13 = (((void)v150 - (unint64_t)v149[1]) << 6) - 1;
      }
      *((void *)&v151 + 1) = v10 - 1;
      if (v13 - (v10 + (void)v151) + 1 >= 0x400)
      {
        operator delete(*(void **)(v150 - 8));
        *(void *)&long long v150 = v150 - 8;
      }
      uint64_t v14 = nullsub_1(v12);
      sub_61049C(a1, v14, (uint64_t)&__p);
      sub_60FE18(v12, (uint64_t)v138);
      unint64_t v15 = v139;
      if ((v139 & 0x80u) != 0) {
        unint64_t v15 = (unint64_t)v138[1];
      }
      if (v15) {
        goto LABEL_30;
      }
      uint64_t v16 = v141;
      if ((v141 & 0x80u) != 0) {
        uint64_t v16 = *((void *)&v140 + 1);
      }
      if (v16) {
        goto LABEL_30;
      }
      uint64_t v17 = v143;
      if ((v143 & 0x80u) != 0) {
        uint64_t v17 = *((void *)&v142 + 1);
      }
      if (v17)
      {
LABEL_30:
        memset(v152, 0, sizeof(v152));
        LODWORD(v153.__r_.__value_.__l.__data_) = 1065353216;
        sub_63531C((uint64_t)&v134, (uint64_t)v138, (uint64_t)v152);
        uint64_t v18 = *(uint64_t ***)&v152[16];
        if (!*(void *)&v152[16])
        {
LABEL_46:
          long long v20 = *(void **)v152;
          *(void *)long long v152 = 0;
          if (v20) {
            operator delete(v20);
          }
          v132 = 0;
          v133[0] = (uint64_t)&v134;
          v133[1] = (uint64_t)v147;
          long long v131 = 0uLL;
          int v22 = (const std::string *)__p;
          uint64_t v21 = v146;
          for (i = v146; ; uint64_t v21 = i)
          {
            if (v22 == v21)
            {
              int v108 = *(const std::string **)a3;
              if (*(void *)a3)
              {
                size_t v109 = *(const std::string **)(a3 + 8);
                unint64_t v110 = *(std::string **)a3;
                if (v109 != v108)
                {
                  do
                  {
                    if (v109[-1].__r_.__value_.__s.__data_[15] < 0) {
                      operator delete((void *)v109[-2].__r_.__value_.__r.__words[2]);
                    }
                    size_t v109 = (const std::string *)((char *)v109 - 32);
                  }
                  while (v109 != v108);
                  unint64_t v110 = *(std::string **)a3;
                }
                *(void *)(a3 + 8) = v108;
                operator delete(v110);
                *(void *)a3 = 0;
                *(void *)(a3 + 8) = 0;
                *(void *)(a3 + 16) = 0;
              }
              *(_OWORD *)a3 = v131;
              *(void *)(a3 + 16) = v132;
              unint64_t v111 = v137;
              if (!v137)
              {
LABEL_288:
                long long v113 = v136;
                std::string::size_type v136 = 0;
                if (v113) {
                  operator delete(v113);
                }
                unsigned __int8 v114 = (void **)v134;
                if (v134)
                {
                  long long v115 = v135;
                  unsigned __int8 v116 = v134;
                  if (v135 != v134)
                  {
                    do
                    {
                      if (*((char *)v115 - 1) < 0) {
                        operator delete(*(v115 - 3));
                      }
                      v115 -= 3;
                    }
                    while (v115 != v114);
                    unsigned __int8 v116 = v134;
                  }
                  uint64_t v135 = v114;
                  operator delete(v116);
                }
                goto LABEL_298;
              }
              while (2)
              {
                while (2)
                {
                  unsigned __int8 v112 = *v111;
                  if (*((char *)v111 + 191) < 0)
                  {
                    operator delete(v111[21]);
                    if (*((char *)v111 + 159) < 0) {
                      goto LABEL_283;
                    }
LABEL_278:
                    if ((*((char *)v111 + 135) & 0x80000000) == 0) {
                      goto LABEL_279;
                    }
LABEL_284:
                    operator delete(v111[14]);
                    if (*((char *)v111 + 95) < 0) {
                      goto LABEL_285;
                    }
LABEL_280:
                    if (*((char *)v111 + 63) < 0) {
                      goto LABEL_274;
                    }
LABEL_286:
                    if ((*((char *)v111 + 39) & 0x80000000) == 0)
                    {
LABEL_275:
                      operator delete(v111);
                      unint64_t v111 = (uint64_t **)v112;
                      if (!v112) {
                        goto LABEL_288;
                      }
                      continue;
                    }
                  }
                  else
                  {
                    if ((*((char *)v111 + 159) & 0x80000000) == 0) {
                      goto LABEL_278;
                    }
LABEL_283:
                    operator delete(v111[17]);
                    if (*((char *)v111 + 135) < 0) {
                      goto LABEL_284;
                    }
LABEL_279:
                    if ((*((char *)v111 + 95) & 0x80000000) == 0) {
                      goto LABEL_280;
                    }
LABEL_285:
                    operator delete(v111[9]);
                    if ((*((char *)v111 + 63) & 0x80000000) == 0) {
                      goto LABEL_286;
                    }
LABEL_274:
                    operator delete(v111[5]);
                    if ((*((char *)v111 + 39) & 0x80000000) == 0) {
                      goto LABEL_275;
                    }
                  }
                  break;
                }
                operator delete(v111[2]);
                operator delete(v111);
                unint64_t v111 = (uint64_t **)v112;
                if (!v112) {
                  goto LABEL_288;
                }
                continue;
              }
            }
            sub_611A24((uint64_t)v133, v22, &v140, v144);
            uint64_t v24 = v143;
            if ((v143 & 0x80u) != 0) {
              uint64_t v24 = *((void *)&v142 + 1);
            }
            int v126 = v22;
            if (v24)
            {
              unint64_t v26 = *(const std::string **)a3;
              unint64_t v25 = *(const std::string **)(a3 + 8);
              for (j = v25; ; unint64_t v25 = j)
              {
                if (v26 == v25) {
                  goto LABEL_52;
                }
                sub_6F30A4((uint64_t)v152);
                int v154 = 0;
                std::string::operator=(&v153, v26);
                sub_635C08(v133[0], &v142, (uint64_t)v152, 0);
                if (v160 < 0)
                {
                  operator delete(v159);
                  if ((v158 & 0x80000000) == 0)
                  {
LABEL_67:
                    if ((v156 & 0x80000000) == 0) {
                      goto LABEL_68;
                    }
                    goto LABEL_75;
                  }
                }
                else if ((v158 & 0x80000000) == 0)
                {
                  goto LABEL_67;
                }
                operator delete(v157);
                if ((v156 & 0x80000000) == 0)
                {
LABEL_68:
                  if ((SHIBYTE(v153.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_69;
                  }
                  goto LABEL_76;
                }
LABEL_75:
                operator delete(v155);
                if ((SHIBYTE(v153.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_69:
                  if ((v152[23] & 0x80000000) != 0) {
                    goto LABEL_77;
                  }
                  goto LABEL_70;
                }
LABEL_76:
                operator delete(v153.__r_.__value_.__l.__data_);
                if ((v152[23] & 0x80000000) != 0) {
LABEL_77:
                }
                  operator delete(*(void **)v152);
LABEL_70:
                uint64_t v30 = sub_5231C((uint64_t)&v134);
                if (!*(void *)(a1 + 16))
                {
                  memset(v152, 0, sizeof(v152));
                  char v36 = (void **)*((void *)&v131 + 1);
                  uint64_t v35 = v132;
                  if (*((void *)&v131 + 1) < (unint64_t)v132) {
                    goto LABEL_58;
                  }
LABEL_150:
                  uint64_t v60 = (uint64_t)((uint64_t)v36 - v131) >> 5;
                  unint64_t v61 = v60 + 1;
                  if ((unint64_t)(v60 + 1) >> 59) {
                    sub_2E00();
                  }
                  uint64_t v62 = (uint64_t)&v35[-v131];
                  if (v62 >> 4 > v61) {
                    unint64_t v61 = v62 >> 4;
                  }
                  if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFE0) {
                    unint64_t v63 = 0x7FFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v63 = v61;
                  }
                  if (v63 >> 59) {
                    sub_188D718();
                  }
                  unint64_t v64 = (char *)operator new(32 * v63);
                  unint64_t v65 = &v64[32 * v60];
                  *(_OWORD *)unint64_t v65 = *(_OWORD *)v152;
                  *((void *)v65 + 2) = *(void *)&v152[16];
                  memset(v152, 0, 24);
                  v65[24] = v152[24];
                  uint64_t v28 = v65 + 32;
                  if (v36 == (void **)v131)
                  {
                    *(void *)&long long v131 = v65;
                    v132 = &v64[32 * v63];
                  }
                  else
                  {
                    do
                    {
                      long long v66 = *((_OWORD *)v36 - 2);
                      *((void *)v65 - 2) = *(v36 - 2);
                      *((_OWORD *)v65 - 2) = v66;
                      *(v36 - 3) = 0;
                      *(v36 - 2) = 0;
                      *(v36 - 4) = 0;
                      *(v65 - 8) = *((unsigned char *)v36 - 8);
                      v65 -= 32;
                      v36 -= 4;
                    }
                    while (v36 != (void **)v131);
                    int v67 = (void **)*((void *)&v131 + 1);
                    char v36 = (void **)v131;
                    *(void *)&long long v131 = v65;
                    v132 = &v64[32 * v63];
                    while (v67 != v36)
                    {
                      if (*((char *)v67 - 9) < 0) {
                        operator delete(*(v67 - 4));
                      }
                      v67 -= 4;
                    }
                  }
                  if (v36) {
                    operator delete(v36);
                  }
                  *((void *)&v131 + 1) = v28;
                  if ((v152[23] & 0x80000000) == 0) {
                    goto LABEL_59;
                  }
LABEL_168:
                  operator delete(*(void **)v152);
                  uint64_t v28 = (_OWORD *)*((void *)&v131 + 1);
                  goto LABEL_59;
                }
                uint64_t v31 = v30;
                char v32 = sub_658328((char **)v138);
                long long v33 = sub_8D7730(*(void *)(a1 + 16), (uint64_t)v138);
                if (*((char *)v33 + 23) < 0)
                {
                  sub_4200(&__dst, (void *)*v33, v33[1]);
                }
                else
                {
                  long long v34 = *(_OWORD *)v33;
                  uint64_t v162 = v33[2];
                  long long __dst = v34;
                }
                if (SHIBYTE(v162) < 0)
                {
                  sub_4200(v152, (void *)__dst, *((unint64_t *)&__dst + 1));
                  char v37 = HIBYTE(v162);
                  v152[24] = v32;
                  if (SHIBYTE(v162) < 0)
                  {
                    int v128 = v26;
                    if (!*((void *)&__dst + 1)) {
                      goto LABEL_89;
                    }
                  }
                  else
                  {
                    int v128 = v26;
                    if (!HIBYTE(v162)) {
                      goto LABEL_89;
                    }
                  }
                }
                else
                {
                  char v37 = HIBYTE(v162);
                  *(_OWORD *)long long v152 = __dst;
                  *(void *)&v152[16] = v162;
                  v152[24] = v32;
                  int v128 = v26;
                  if (!HIBYTE(v162)) {
                    goto LABEL_89;
                  }
                }
                uint64_t v38 = *(uint64_t **)(v31 + 16);
                if (!v38)
                {
LABEL_89:
                  if (v37 < 0) {
                    goto LABEL_149;
                  }
LABEL_90:
                  int v22 = v126;
                  unint64_t v26 = v128;
                  char v36 = (void **)*((void *)&v131 + 1);
                  uint64_t v35 = v132;
                  if (*((void *)&v131 + 1) >= (unint64_t)v132) {
                    goto LABEL_150;
                  }
                  goto LABEL_58;
                }
                do
                {
                  while (1)
                  {
                    if (*((char *)v38 + 39) < 0)
                    {
                      sub_4200(&v166, (void *)v38[2], v38[3]);
                    }
                    else
                    {
                      long long v166 = *((_OWORD *)v38 + 1);
                      uint64_t v167 = v38[4];
                    }
                    sub_6F3178(&v163, v38 + 5);
                    BOOL v39 = v167 < 0;
                    std::string::size_type v40 = *((void *)&v166 + 1);
                    std::string::size_type v41 = HIBYTE(v167);
                    if (v167 >= 0) {
                      int64_t v42 = HIBYTE(v167);
                    }
                    else {
                      int64_t v42 = *((void *)&v166 + 1);
                    }
                    if (v42)
                    {
                      std::string::size_type v43 = 0;
                      std::string::size_type v44 = v152[23];
                      if (v152[23] >= 0) {
                        long long v45 = v152;
                      }
                      else {
                        long long v45 = *(unsigned char **)v152;
                      }
                      if (v152[23] < 0) {
                        std::string::size_type v44 = *(void *)&v152[8];
                      }
                      if (v167 >= 0) {
                        int64_t v46 = &v166;
                      }
                      else {
                        int64_t v46 = (long long *)v166;
                      }
                      while (!v42)
                      {
LABEL_119:
                        if (v43 != -1)
                        {
                          if (v39) {
                            std::string::size_type v54 = v40;
                          }
                          else {
                            std::string::size_type v54 = v41;
                          }
                          if ((v165 & 0x80u) == 0) {
                            uint64_t v55 = (const std::string::value_type *)&v163;
                          }
                          else {
                            uint64_t v55 = v163;
                          }
                          if ((v165 & 0x80u) == 0) {
                            std::string::size_type v56 = v165;
                          }
                          else {
                            std::string::size_type v56 = v164;
                          }
                          std::string::replace((std::string *)v152, v43, v54, v55, v56);
                          std::string::size_type v57 = v165;
                          if ((v165 & 0x80u) != 0) {
                            std::string::size_type v57 = v164;
                          }
                          v43 += v57;
                          std::string::size_type v44 = v152[23];
                          if (v152[23] >= 0) {
                            long long v45 = v152;
                          }
                          else {
                            long long v45 = *(unsigned char **)v152;
                          }
                          if (v152[23] < 0) {
                            std::string::size_type v44 = *(void *)&v152[8];
                          }
                          BOOL v39 = v167 < 0;
                          std::string::size_type v40 = *((void *)&v166 + 1);
                          std::string::size_type v41 = HIBYTE(v167);
                          int64_t v46 = v167 >= 0 ? &v166 : (long long *)v166;
                          int64_t v42 = v167 >= 0 ? HIBYTE(v167) : *((void *)&v166 + 1);
                          if (v44 >= v43) {
                            continue;
                          }
                        }
                        goto LABEL_143;
                      }
                      std::string v47 = &v45[v43];
                      unint64_t v48 = &v45[v44];
                      int64_t v49 = v44 - v43;
                      if (v49 >= v42)
                      {
                        int v50 = *(char *)v46;
                        do
                        {
                          int64_t v51 = v49 - v42;
                          if (v51 == -1) {
                            break;
                          }
                          int v52 = (char *)memchr(v47, v50, v51 + 1);
                          if (!v52) {
                            break;
                          }
                          size_t v53 = v52;
                          if (!memcmp(v52, v46, v42))
                          {
                            if (v53 == v48) {
                              break;
                            }
                            std::string::size_type v43 = v53 - v45;
                            goto LABEL_119;
                          }
                          std::string v47 = v53 + 1;
                          int64_t v49 = v48 - (v53 + 1);
                        }
                        while (v49 >= v42);
                      }
                    }
LABEL_143:
                    unsigned int v58 = sub_658930((uint64_t)&v166);
                    char v59 = v152[24];
                    if (v152[24] <= v58) {
                      char v59 = v58;
                    }
                    v152[24] = v59;
                    a3 = v130;
                    if (((char)v165 & 0x80000000) == 0) {
                      break;
                    }
                    operator delete(v163);
                    if (SHIBYTE(v167) < 0) {
                      goto LABEL_147;
                    }
LABEL_93:
                    uint64_t v38 = (uint64_t *)*v38;
                    if (!v38) {
                      goto LABEL_148;
                    }
                  }
                  if ((SHIBYTE(v167) & 0x80000000) == 0) {
                    goto LABEL_93;
                  }
LABEL_147:
                  operator delete((void *)v166);
                  uint64_t v38 = (uint64_t *)*v38;
                }
                while (v38);
LABEL_148:
                if ((v162 & 0x8000000000000000) == 0) {
                  goto LABEL_90;
                }
LABEL_149:
                operator delete((void *)__dst);
                int v22 = v126;
                unint64_t v26 = v128;
                char v36 = (void **)*((void *)&v131 + 1);
                uint64_t v35 = v132;
                if (*((void *)&v131 + 1) >= (unint64_t)v132) {
                  goto LABEL_150;
                }
LABEL_58:
                long long v27 = *(_OWORD *)v152;
                v36[2] = *(void **)&v152[16];
                *(_OWORD *)char v36 = v27;
                memset(v152, 0, 24);
                *((unsigned char *)v36 + 24) = v152[24];
                uint64_t v28 = v36 + 4;
                *((void *)&v131 + 1) = v36 + 4;
                if ((v152[23] & 0x80000000) != 0) {
                  goto LABEL_168;
                }
LABEL_59:
                unsigned int v29 = v22[1].__r_.__value_.__s.__data_[0];
                if (*((unsigned __int8 *)v28 - 8) > v29) {
                  unsigned int v29 = *((unsigned __int8 *)v28 - 8);
                }
                *((unsigned char *)v28 - 8) = v29;
                if (v29 <= v26[1].__r_.__value_.__s.__data_[0]) {
                  LOBYTE(v29) = v26[1].__r_.__value_.__s.__data_[0];
                }
                *((unsigned char *)v28 - 8) = v29;
                unint64_t v26 = (const std::string *)((char *)v26 + 32);
              }
            }
            uint64_t v68 = sub_5231C((uint64_t)&v134);
            if (!*(void *)(a1 + 16))
            {
              memset(v152, 0, sizeof(v152));
              uint64_t v74 = (char *)*((void *)&v131 + 1);
              long long v73 = v132;
              if (*((void *)&v131 + 1) >= (unint64_t)v132) {
                goto LABEL_173;
              }
              goto LABEL_203;
            }
            uint64_t v69 = v68;
            char v70 = sub_658328((char **)v138);
            long long v71 = sub_8D7730(*(void *)(a1 + 16), (uint64_t)v138);
            if (*((char *)v71 + 23) < 0)
            {
              sub_4200(&__dst, (void *)*v71, v71[1]);
            }
            else
            {
              long long v72 = *(_OWORD *)v71;
              uint64_t v162 = v71[2];
              long long __dst = v72;
            }
            if (SHIBYTE(v162) < 0)
            {
              sub_4200(v152, (void *)__dst, *((unint64_t *)&__dst + 1));
              char v84 = HIBYTE(v162);
              v152[24] = v70;
              if (SHIBYTE(v162) < 0)
              {
                if (!*((void *)&__dst + 1)) {
                  goto LABEL_201;
                }
              }
              else if (!HIBYTE(v162))
              {
                goto LABEL_201;
              }
            }
            else
            {
              char v84 = HIBYTE(v162);
              *(_OWORD *)long long v152 = __dst;
              *(void *)&v152[16] = v162;
              v152[24] = v70;
              if (!HIBYTE(v162)) {
                goto LABEL_201;
              }
            }
            int v85 = *(uint64_t **)(v69 + 16);
            if (!v85)
            {
LABEL_201:
              if (v84 < 0) {
                goto LABEL_262;
              }
LABEL_202:
              uint64_t v74 = (char *)*((void *)&v131 + 1);
              long long v73 = v132;
              if (*((void *)&v131 + 1) >= (unint64_t)v132) {
                goto LABEL_173;
              }
LABEL_203:
              long long v86 = *(_OWORD *)v152;
              *((void *)v74 + 2) = *(void *)&v152[16];
              *(_OWORD *)uint64_t v74 = v86;
              memset(v152, 0, 24);
              v74[24] = v152[24];
              unint64_t v81 = v74 + 32;
              *((void *)&v131 + 1) = v74 + 32;
              if ((v152[23] & 0x80000000) != 0) {
                goto LABEL_204;
              }
              goto LABEL_49;
            }
            do
            {
              while (1)
              {
                if (*((char *)v85 + 39) < 0)
                {
                  sub_4200(&v166, (void *)v85[2], v85[3]);
                }
                else
                {
                  long long v166 = *((_OWORD *)v85 + 1);
                  uint64_t v167 = v85[4];
                }
                sub_6F3178(&v163, v85 + 5);
                BOOL v87 = v167 < 0;
                std::string::size_type v88 = *((void *)&v166 + 1);
                std::string::size_type v89 = HIBYTE(v167);
                if (v167 >= 0) {
                  int64_t v90 = HIBYTE(v167);
                }
                else {
                  int64_t v90 = *((void *)&v166 + 1);
                }
                if (v90)
                {
                  std::string::size_type v91 = 0;
                  std::string::size_type v92 = v152[23];
                  if (v152[23] >= 0) {
                    uint64_t v93 = v152;
                  }
                  else {
                    uint64_t v93 = *(unsigned char **)v152;
                  }
                  if (v152[23] < 0) {
                    std::string::size_type v92 = *(void *)&v152[8];
                  }
                  if (v167 >= 0) {
                    std::string::size_type v94 = &v166;
                  }
                  else {
                    std::string::size_type v94 = (long long *)v166;
                  }
                  while (!v90)
                  {
LABEL_232:
                    if (v91 != -1)
                    {
                      if (v87) {
                        std::string::size_type v102 = v88;
                      }
                      else {
                        std::string::size_type v102 = v89;
                      }
                      if ((v165 & 0x80u) == 0) {
                        uint64_t v103 = (const std::string::value_type *)&v163;
                      }
                      else {
                        uint64_t v103 = v163;
                      }
                      if ((v165 & 0x80u) == 0) {
                        std::string::size_type v104 = v165;
                      }
                      else {
                        std::string::size_type v104 = v164;
                      }
                      std::string::replace((std::string *)v152, v91, v102, v103, v104);
                      std::string::size_type v105 = v165;
                      if ((v165 & 0x80u) != 0) {
                        std::string::size_type v105 = v164;
                      }
                      v91 += v105;
                      std::string::size_type v92 = v152[23];
                      if (v152[23] >= 0) {
                        uint64_t v93 = v152;
                      }
                      else {
                        uint64_t v93 = *(unsigned char **)v152;
                      }
                      if (v152[23] < 0) {
                        std::string::size_type v92 = *(void *)&v152[8];
                      }
                      BOOL v87 = v167 < 0;
                      std::string::size_type v88 = *((void *)&v166 + 1);
                      std::string::size_type v89 = HIBYTE(v167);
                      std::string::size_type v94 = v167 >= 0 ? &v166 : (long long *)v166;
                      int64_t v90 = v167 >= 0 ? HIBYTE(v167) : *((void *)&v166 + 1);
                      if (v92 >= v91) {
                        continue;
                      }
                    }
                    goto LABEL_256;
                  }
                  uint64_t v95 = &v93[v91];
                  long long v96 = &v93[v92];
                  int64_t v97 = v92 - v91;
                  if (v97 >= v90)
                  {
                    int v98 = *(char *)v94;
                    do
                    {
                      int64_t v99 = v97 - v90;
                      if (v99 == -1) {
                        break;
                      }
                      char v100 = (char *)memchr(v95, v98, v99 + 1);
                      if (!v100) {
                        break;
                      }
                      uint64_t v101 = v100;
                      if (!memcmp(v100, v94, v90))
                      {
                        if (v101 == v96) {
                          break;
                        }
                        std::string::size_type v91 = v101 - v93;
                        goto LABEL_232;
                      }
                      uint64_t v95 = v101 + 1;
                      int64_t v97 = v96 - (v101 + 1);
                    }
                    while (v97 >= v90);
                  }
                }
LABEL_256:
                unsigned int v106 = sub_658930((uint64_t)&v166);
                int v22 = v126;
                char v107 = v152[24];
                if (v152[24] <= v106) {
                  char v107 = v106;
                }
                v152[24] = v107;
                if (((char)v165 & 0x80000000) == 0) {
                  break;
                }
                operator delete(v163);
                a3 = v130;
                if (SHIBYTE(v167) < 0) {
                  goto LABEL_260;
                }
LABEL_206:
                int v85 = (uint64_t *)*v85;
                if (!v85) {
                  goto LABEL_261;
                }
              }
              a3 = v130;
              if ((SHIBYTE(v167) & 0x80000000) == 0) {
                goto LABEL_206;
              }
LABEL_260:
              operator delete((void *)v166);
              int v85 = (uint64_t *)*v85;
            }
            while (v85);
LABEL_261:
            if ((v162 & 0x8000000000000000) == 0) {
              goto LABEL_202;
            }
LABEL_262:
            operator delete((void *)__dst);
            uint64_t v74 = (char *)*((void *)&v131 + 1);
            long long v73 = v132;
            if (*((void *)&v131 + 1) < (unint64_t)v132) {
              goto LABEL_203;
            }
LABEL_173:
            uint64_t v75 = (uint64_t)&v74[-v131] >> 5;
            unint64_t v76 = v75 + 1;
            if ((unint64_t)(v75 + 1) >> 59) {
              sub_2E00();
            }
            uint64_t v77 = (uint64_t)&v73[-v131];
            if (v77 >> 4 > v76) {
              unint64_t v76 = v77 >> 4;
            }
            if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v78 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v78 = v76;
            }
            if (v78 >> 59) {
              sub_188D718();
            }
            size_t v79 = (char *)operator new(32 * v78);
            unint64_t v80 = &v79[32 * v75];
            *(_OWORD *)unint64_t v80 = *(_OWORD *)v152;
            *((void *)v80 + 2) = *(void *)&v152[16];
            memset(v152, 0, 24);
            v80[24] = v152[24];
            unint64_t v81 = v80 + 32;
            if (v74 == (char *)v131)
            {
              *(void *)&long long v131 = v80;
              v132 = &v79[32 * v78];
            }
            else
            {
              do
              {
                long long v82 = *((_OWORD *)v74 - 2);
                *((void *)v80 - 2) = *((void *)v74 - 2);
                *((_OWORD *)v80 - 2) = v82;
                *((void *)v74 - 3) = 0;
                *((void *)v74 - 2) = 0;
                *((void *)v74 - 4) = 0;
                *(v80 - 8) = *(v74 - 8);
                v80 -= 32;
                v74 -= 32;
              }
              while (v74 != (char *)v131);
              uint64_t v83 = (void **)*((void *)&v131 + 1);
              uint64_t v74 = (char *)v131;
              *(void *)&long long v131 = v80;
              v132 = &v79[32 * v78];
              while (v83 != (void **)v74)
              {
                if (*((char *)v83 - 9) < 0) {
                  operator delete(*(v83 - 4));
                }
                v83 -= 4;
              }
            }
            if (v74) {
              operator delete(v74);
            }
            *((void *)&v131 + 1) = v81;
            if ((v152[23] & 0x80000000) != 0)
            {
LABEL_204:
              operator delete(*(void **)v152);
              unint64_t v81 = (char *)*((void *)&v131 + 1);
            }
LABEL_49:
            unsigned int v23 = v22[1].__r_.__value_.__s.__data_[0];
            if (*(v81 - 8) > v23) {
              LOBYTE(v23) = *(v81 - 8);
            }
            *(v81 - 8) = v23;
LABEL_52:
            int v22 = (const std::string *)((char *)v22 + 32);
          }
        }
        while (2)
        {
          while (2)
          {
            uint64_t v19 = *v18;
            if (*((char *)v18 + 191) < 0)
            {
              operator delete(v18[21]);
              if (*((char *)v18 + 159) < 0) {
                goto LABEL_41;
              }
LABEL_36:
              if ((*((char *)v18 + 135) & 0x80000000) == 0) {
                goto LABEL_37;
              }
LABEL_42:
              operator delete(v18[14]);
              if (*((char *)v18 + 95) < 0) {
                goto LABEL_43;
              }
LABEL_38:
              if (*((char *)v18 + 63) < 0) {
                goto LABEL_32;
              }
LABEL_44:
              if ((*((char *)v18 + 39) & 0x80000000) == 0)
              {
LABEL_33:
                operator delete(v18);
                uint64_t v18 = (uint64_t **)v19;
                if (!v19) {
                  goto LABEL_46;
                }
                continue;
              }
            }
            else
            {
              if ((*((char *)v18 + 159) & 0x80000000) == 0) {
                goto LABEL_36;
              }
LABEL_41:
              operator delete(v18[17]);
              if (*((char *)v18 + 135) < 0) {
                goto LABEL_42;
              }
LABEL_37:
              if ((*((char *)v18 + 95) & 0x80000000) == 0) {
                goto LABEL_38;
              }
LABEL_43:
              operator delete(v18[9]);
              if ((*((char *)v18 + 63) & 0x80000000) == 0) {
                goto LABEL_44;
              }
LABEL_32:
              operator delete(v18[5]);
              if ((*((char *)v18 + 39) & 0x80000000) == 0) {
                goto LABEL_33;
              }
            }
            break;
          }
          operator delete(v18[2]);
          operator delete(v18);
          uint64_t v18 = (uint64_t **)v19;
          if (!v19) {
            goto LABEL_46;
          }
          continue;
        }
      }
      if (&__p != (void **)a3) {
        sub_6188C8(a3, (std::string *)__p, v146, ((char *)v146 - (unsigned char *)__p) >> 5);
      }
LABEL_298:
      if ((char)v143 < 0)
      {
        operator delete((void *)v142);
        if (((char)v141 & 0x80000000) == 0)
        {
LABEL_300:
          if (((char)v139 & 0x80000000) == 0) {
            goto LABEL_301;
          }
          goto LABEL_305;
        }
      }
      else if (((char)v141 & 0x80000000) == 0)
      {
        goto LABEL_300;
      }
      operator delete((void *)v140);
      if (((char)v139 & 0x80000000) == 0)
      {
LABEL_301:
        int v117 = (std::string *)__p;
        if (__p) {
          goto LABEL_306;
        }
        goto LABEL_15;
      }
LABEL_305:
      operator delete(v138[0]);
      int v117 = (std::string *)__p;
      if (__p)
      {
LABEL_306:
        size_t v118 = v146;
        uint64_t v11 = v117;
        if (v146 != v117)
        {
          do
          {
            if (v118[-1].__r_.__value_.__s.__data_[15] < 0) {
              operator delete((void *)v118[-2].__r_.__value_.__r.__words[2]);
            }
            size_t v118 = (std::string *)((char *)v118 - 32);
          }
          while (v118 != v117);
          uint64_t v11 = __p;
        }
        v146 = v117;
        operator delete(v11);
      }
LABEL_15:
      uint64_t v10 = *((void *)&v151 + 1);
    }
    while (*((void *)&v151 + 1));
  }
  if (v148 < 0)
  {
    operator delete(v147[0]);
    unint64_t v119 = (void **)v149[1];
    unint64_t v120 = (void **)v150;
    *((void *)&v151 + 1) = 0;
    unint64_t v121 = v150 - (unint64_t)v149[1];
    if ((unint64_t)v150 - (unint64_t)v149[1] < 0x11) {
      goto LABEL_316;
    }
  }
  else
  {
    unint64_t v119 = (void **)v149[1];
    unint64_t v120 = (void **)v150;
    *((void *)&v151 + 1) = 0;
    unint64_t v121 = v150 - (unint64_t)v149[1];
    if ((unint64_t)v150 - (unint64_t)v149[1] < 0x11) {
      goto LABEL_316;
    }
  }
  do
  {
    operator delete(*v119);
    unint64_t v120 = (void **)v150;
    unint64_t v119 = (void **)((char *)v149[1] + 8);
    v149[1] = v119;
    unint64_t v121 = v150 - (void)v119;
  }
  while ((void)v150 - (void)v119 > 0x10uLL);
LABEL_316:
  unint64_t v122 = v121 >> 3;
  if (v122 == 1)
  {
    uint64_t v123 = 256;
    goto LABEL_322;
  }
  if (v122 == 2)
  {
    uint64_t v123 = 512;
LABEL_322:
    *(void *)&long long v151 = v123;
  }
  if (v119 != v120)
  {
    do
    {
      uint64_t v124 = *v119++;
      operator delete(v124);
    }
    while (v119 != v120);
    if ((void *)v150 != v149[1]) {
      *(void *)&long long v150 = v150 + (((unint64_t)v149[1] - v150 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (v149[0]) {
    operator delete(v149[0]);
  }
}

void sub_6115EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void **a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,uint64_t a63)
{
  if (a50 < 0)
  {
    operator delete(__p);
    if ((a44 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a44 & 0x80000000) == 0)
  {
LABEL_3:
    if (a38 < 0) {
      goto LABEL_4;
    }
    goto LABEL_29;
  }
  operator delete(a39);
  if (a38 < 0)
  {
LABEL_4:
    operator delete(a33);
    unint64_t v65 = a52;
    if (a52) {
      goto LABEL_5;
    }
    goto LABEL_30;
  }
LABEL_29:
  unint64_t v65 = a52;
  if (a52)
  {
LABEL_5:
    long long v66 = (void **)a53;
    if ((void **)a53 == v65)
    {
      operator delete(v65);
      int v67 = *v63;
      if (*v63)
      {
LABEL_7:
        uint64_t v68 = v63[1];
        if (v68 == v67)
        {
          v63[1] = v67;
          operator delete(v67);
          if ((a60 & 0x80000000) == 0) {
            goto LABEL_9;
          }
LABEL_32:
          operator delete(a55);
          uint64_t v69 = (void **)a62;
          char v70 = (void **)a63;
          if ((unint64_t)(a63 - a62) < 0x11) {
            goto LABEL_18;
          }
          goto LABEL_10;
        }
        do
        {
          if (*((char *)v68 - 9) < 0) {
            operator delete(*(v68 - 4));
          }
          v68 -= 4;
        }
        while (v68 != v67);
        long long v72 = *v63;
        v63[1] = v67;
        operator delete(v72);
        if (a60 < 0) {
          goto LABEL_32;
        }
LABEL_9:
        uint64_t v69 = (void **)a62;
        char v70 = (void **)a63;
        if ((unint64_t)(a63 - a62) < 0x11) {
          goto LABEL_18;
        }
        do
        {
LABEL_10:
          operator delete(*v69);
          char v70 = (void **)a63;
          uint64_t v69 = (void **)(a62 + 8);
          a62 = (uint64_t)v69;
        }
        while ((unint64_t)(a63 - (void)v69) > 0x10);
LABEL_18:
        while (v69 != v70)
        {
          long long v71 = *v69++;
          operator delete(v71);
        }
        if (a61) {
          operator delete(a61);
        }
        _Unwind_Resume(a1);
      }
    }
    else
    {
      do
      {
        if (*((char *)v66 - 9) < 0) {
          operator delete(*(v66 - 4));
        }
        v66 -= 4;
      }
      while (v66 != v65);
      operator delete(a52);
      int v67 = *v63;
      if (*v63) {
        goto LABEL_7;
      }
    }
LABEL_31:
    if (a60 < 0) {
      goto LABEL_32;
    }
    goto LABEL_9;
  }
LABEL_30:
  int v67 = *v63;
  if (*v63) {
    goto LABEL_7;
  }
  goto LABEL_31;
}

void sub_611A24(uint64_t a1, const std::string *a2, long long *a3, int a4)
{
  sub_6F30A4((uint64_t)v9);
  int v12 = 0;
  std::string::operator=(&__p, a2);
  if (a4)
  {
    sub_3DF0((uint64_t *)&__p, *(uint64_t **)(a1 + 8), &v8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v8;
  }
  sub_635C08(*(void *)a1, a3, (uint64_t)v9, 0);
  if (v18 < 0)
  {
    operator delete(v17);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_7:
      if ((v14 & 0x80000000) == 0) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(v15);
  if ((v14 & 0x80000000) == 0)
  {
LABEL_8:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(v13);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_9:
    if ((v10 & 0x80000000) == 0) {
      return;
    }
LABEL_15:
    operator delete(v9[0]);
    return;
  }
LABEL_14:
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v10 < 0) {
    goto LABEL_15;
  }
}

void sub_611B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4A50F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_611B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4A50F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_611B80(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, char **a5@<X8>)
{
  sub_5F3B34((uint64_t)a5);
  if (*a1)
  {
    char v10 = (std::string *)sub_8D7730(*a1, a2);
    if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0)
    {
      char v10 = (std::string *)sub_4200(&__p, v10->__r_.__value_.__l.__data_, v10->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
    }
    sub_60E630(v10, (uint64_t)a3, &__p);
  }
  else
  {
    memset(&__p, 0, sizeof(__p));
  }
  sub_5F41E8((uint64_t)a5, (uint64_t)&__p);
  sub_611CA8((uint64_t)a1, a4, a3, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_611C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_4D4B58(v14);
  _Unwind_Resume(a1);
}

void sub_611CA8(uint64_t a1, void *a2, void *a3, char **a4)
{
  sub_616C24(a1, a3, a4);
  sub_617010(v6, a4);
  sub_61738C(v7, a2, (uint64_t *)a4);
  sub_6178A0(v8, (uint64_t)a2, (uint64_t)a4);
  uint64_t v9 = sub_5F7924((char ***)a4, byte_258ED60);
  if (v9)
  {
    int v10 = sub_638A68((uint64_t)a2);
    uint64_t v9 = sub_5F657C((uint64_t *)a4, (uint64_t)byte_258ED60, v10);
  }

  sub_617764(v9, (uint64_t)a2, (void ***)a4);
}

void sub_611D40(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v17 = (void *)sub_5231C(a2);
  uint64_t v7 = (uint64_t *)nullsub_1(a2);
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  if (*v7 != v9)
  {
    do
    {
      if (*(char *)(v8 + 23) < 0)
      {
        if (!*(void *)(v8 + 8))
        {
LABEL_12:
          unint64_t v15 = a4[1];
          if (v15 >= a4[2])
          {
            uint64_t v16 = sub_618BC4(a4);
          }
          else
          {
            sub_5F3B34(a4[1]);
            uint64_t v16 = v15 + 160;
            a4[1] = v15 + 160;
          }
          a4[1] = v16;
          HIBYTE(v20) = 0;
          LOBYTE(__p[0]) = 0;
          sub_5F41E8(v16 - 160, (uint64_t)__p);
          if (SHIBYTE(v20) < 0) {
            operator delete(__p[0]);
          }
          goto LABEL_5;
        }
      }
      else if (!*(unsigned char *)(v8 + 23))
      {
        goto LABEL_12;
      }
      if (sub_8D8694(*a1, v8, 0))
      {
        sub_611B80(a1, v8, v17, a3, (char **)__p);
        unint64_t v14 = a4[1];
        if (v14 < a4[2])
        {
          *(void *)(v14 + 16) = 0;
          *(void *)(v14 + 24) = 0;
          *(void *)unint64_t v14 = 0;
          *(void *)(v14 + 8) = 0;
          *(_OWORD *)unint64_t v14 = *(_OWORD *)__p;
          *(void *)(v14 + 16) = v20;
          __p[0] = 0;
          __p[1] = 0;
          *(void *)(v14 + 32) = 0;
          *(void *)(v14 + 40) = 0;
          *(_OWORD *)(v14 + 24) = v21;
          long long v21 = 0uLL;
          *(void *)(v14 + 40) = v22;
          *(void *)(v14 + 48) = 0;
          uint64_t v22 = 0;
          *(void *)(v14 + 56) = 0;
          *(void *)(v14 + 64) = 0;
          *(_OWORD *)(v14 + 48) = v23;
          long long v23 = 0uLL;
          *(void *)(v14 + 64) = v24;
          *(void *)(v14 + 72) = 0;
          uint64_t v24 = 0;
          *(void *)(v14 + 80) = 0;
          *(void *)(v14 + 88) = 0;
          *(_OWORD *)(v14 + 72) = v25;
          *(void *)(v14 + 88) = v26;
          long long v25 = 0uLL;
          uint64_t v26 = 0;
          uint64_t v10 = v27;
          uint64_t v20 = 0;
          uint64_t v27 = 0;
          *(void *)(v14 + 96) = v10;
          LODWORD(v10) = v28;
          *(unsigned char *)(v14 + 108) = v29;
          *(_DWORD *)(v14 + 104) = v10;
          long long v11 = v30;
          *(void *)(v14 + 128) = v31;
          *(_OWORD *)(v14 + 112) = v11;
          uint64_t v31 = 0;
          long long v30 = 0uLL;
          long long v12 = v32;
          *(void *)(v14 + 152) = v33;
          *(_OWORD *)(v14 + 136) = v12;
          uint64_t v33 = 0;
          long long v32 = 0uLL;
          unint64_t v13 = (char *)(v14 + 160);
        }
        else
        {
          unint64_t v13 = sub_618DEC((void **)a4, (uint64_t)__p);
        }
        a4[1] = (uint64_t)v13;
        sub_4D4B58((uint64_t)__p);
      }
LABEL_5:
      v8 += 24;
    }
    while (v8 != v9);
  }
}

void sub_611F70(_Unwind_Exception *a1)
{
  sub_59213C(v1);
  _Unwind_Resume(a1);
}

void sub_611F84(_Unwind_Exception *a1)
{
  sub_59213C(v1);
  _Unwind_Resume(a1);
}

void sub_611F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_4D4B58((uint64_t)va);
  sub_59213C(v5);
  _Unwind_Resume(a1);
}

void sub_611FB4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  sub_59213C((void **)v1);
  _Unwind_Resume(a1);
}

void sub_611FCC(_Unwind_Exception *a1)
{
  sub_59213C(v1);
  _Unwind_Resume(a1);
}

void sub_611FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    sub_59213C(v18);
    _Unwind_Resume(a1);
  }
  sub_59213C(v18);
  _Unwind_Resume(a1);
}

void sub_612018(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_68EE4((uint64_t)a2);
  uint64_t v7 = *(uint64_t **)v6;
  uint64_t v8 = *(uint64_t **)(v6 + 8);
  if (*(uint64_t **)v6 != v8)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    while (1)
    {
      sub_60ED68((uint64_t)a1, v7, (uint64_t)&v18);
      uint64_t v10 = (uint64_t)v18;
      uint64_t v11 = v19;
      if (v18 == (void *)v19)
      {
        if (v18) {
          goto LABEL_14;
        }
      }
      else
      {
        do
        {
          sub_5F3D48((uint64_t)v17, v10);
          unint64_t v13 = (void *)sub_638F70((uint64_t)a2);
          sub_611CA8((uint64_t)a1, a2, v13, v17);
          unint64_t v14 = a3[1];
          if (v14 >= a3[2])
          {
            uint64_t v12 = sub_619074(a3, (uint64_t)v17);
          }
          else
          {
            sub_4F58AC(a3[1], (uint64_t)v17);
            uint64_t v12 = v14 + 160;
            a3[1] = v14 + 160;
          }
          a3[1] = v12;
          sub_4D4B58((uint64_t)v17);
          v10 += 24;
        }
        while (v10 != v11);
        uint64_t v10 = (uint64_t)v18;
        if (v18)
        {
LABEL_14:
          uint64_t v15 = v19;
          uint64_t v9 = (void *)v10;
          if (v19 != v10)
          {
            do
            {
              if (*(char *)(v15 - 1) < 0) {
                operator delete(*(void **)(v15 - 24));
              }
              v15 -= 24;
            }
            while (v15 != v10);
            uint64_t v9 = v18;
          }
          uint64_t v19 = v10;
          operator delete(v9);
        }
      }
      v7 += 13;
      if (v7 == v8) {
        return;
      }
    }
  }
  uint64_t v16 = sub_638F78((uint64_t)a2);

  sub_611D40(a1, v16, a2, a3);
}

void sub_6121B8(_Unwind_Exception *a1)
{
  sub_59213C(v1);
  _Unwind_Resume(a1);
}

void sub_6121CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v2 + 8) = v3;
  sub_4D4B58((uint64_t)va);
  sub_1A668((void **)(v4 - 104));
  sub_59213C((void **)v2);
  _Unwind_Resume(a1);
}

void sub_612218(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v54 = 0;
  unint64_t v55 = 0;
  unint64_t v56 = 0;
  uint64_t v4 = sub_68EE4((uint64_t)a2);
  unsigned int v5 = *(uint64_t **)v4;
  uint64_t v6 = *(uint64_t **)(v4 + 8);
  if (*(uint64_t **)v4 != v6)
  {
    unint64_t v48 = *(uint64_t **)(v4 + 8);
    do
    {
      if (sub_637DD8((long long **)v5))
      {
        int v50 = v5;
        sub_60ED68(a1, v5, (uint64_t)&v52);
        uint64_t v9 = (uint64_t)v52;
        uint64_t v8 = v53;
        if (v52 != (void *)v53)
        {
          do
          {
            sub_5F3D48((uint64_t)v51, v9);
            uint64_t v11 = (void *)sub_5231C((uint64_t)(a2 + 66));
            sub_616C24((uint64_t)v11, v11, v51);
            sub_617010(v12, v51);
            sub_61738C(v13, a2, (uint64_t *)v51);
            sub_6178A0(v14, (uint64_t)a2, (uint64_t)v51);
            if (sub_5F7924((char ***)v51, byte_258ED60))
            {
              int v15 = sub_638A68((uint64_t)a2);
              sub_5F657C((uint64_t *)v51, (uint64_t)byte_258ED60, v15);
            }
            uint64_t v16 = v51[0];
            if (v51[0] != v51[1])
            {
              if (v51[0][23] < 0)
              {
                uint64_t v16 = *(char **)v51[0];
                int64_t v17 = *((void *)v51[0] + 1);
              }
              else
              {
                int64_t v17 = *((unsigned __int8 *)v51[0] + 23);
              }
              if (byte_258EDBF >= 0) {
                char v18 = &qword_258EDA8;
              }
              else {
                char v18 = (uint64_t *)qword_258EDA8;
              }
              if (byte_258EDBF >= 0) {
                int64_t v19 = byte_258EDBF;
              }
              else {
                int64_t v19 = unk_258EDB0;
              }
              if (v19)
              {
                if (v17 >= v19)
                {
                  uint64_t v20 = &v16[v17];
                  int v21 = *(char *)v18;
                  uint64_t v22 = v16;
                  do
                  {
                    int64_t v23 = v17 - v19;
                    if (v23 == -1) {
                      break;
                    }
                    uint64_t v24 = (char *)memchr(v22, v21, v23 + 1);
                    if (!v24) {
                      break;
                    }
                    long long v25 = v24;
                    if (!memcmp(v24, v18, v19))
                    {
                      if (v25 == v20 || v25 - v16 == -1) {
                        break;
                      }
                      goto LABEL_34;
                    }
                    uint64_t v22 = v25 + 1;
                    int64_t v17 = v20 - (v25 + 1);
                  }
                  while (v17 >= v19);
                }
              }
              else
              {
LABEL_34:
                float v26 = (double)(int)sub_638A54((uint64_t)a2) / 1000000.0;
                sub_5F7298((uint64_t)v51, (uint64_t)&qword_258EDA8, v26);
              }
            }
            unint64_t v27 = v55;
            if (v55 >= v56)
            {
              uint64_t v10 = sub_619074((uint64_t *)&v54, (uint64_t)v51);
            }
            else
            {
              sub_4F58AC(v55, (uint64_t)v51);
              uint64_t v10 = v27 + 160;
            }
            unint64_t v55 = v10;
            sub_4D4B58((uint64_t)v51);
            v9 += 24;
          }
          while (v9 != v8);
          uint64_t v9 = (uint64_t)v52;
          unsigned int v5 = v50;
          uint64_t v6 = v48;
          if (!v52) {
            goto LABEL_5;
          }
LABEL_38:
          uint64_t v28 = v53;
          uint64_t v7 = (void *)v9;
          if (v53 != v9)
          {
            do
            {
              if (*(char *)(v28 - 1) < 0) {
                operator delete(*(void **)(v28 - 24));
              }
              v28 -= 24;
            }
            while (v28 != v9);
            uint64_t v7 = v52;
          }
          uint64_t v53 = v9;
          operator delete(v7);
          goto LABEL_5;
        }
        uint64_t v6 = v48;
        if (v52) {
          goto LABEL_38;
        }
      }
LABEL_5:
      v5 += 13;
    }
    while (v5 != v6);
  }
  char v29 = v54;
  if (v54 != (char **)v55)
  {
    long long v30 = (uint64_t *)a2[77];
    if (!v30)
    {
LABEL_47:
      sub_4F58AC(a3, (uint64_t)v29);
      goto LABEL_74;
    }
    if (*v54 == v54[1])
    {
      do
        long long v30 = (uint64_t *)*v30;
      while (v30);
      goto LABEL_47;
    }
    while (1)
    {
      uint64_t v31 = *v29;
      long long v32 = v29[1];
      if (*v29 != v32) {
        break;
      }
LABEL_49:
      long long v30 = (uint64_t *)*v30;
      if (!v30) {
        goto LABEL_47;
      }
    }
    char v33 = *((unsigned char *)v30 + 39);
    if (v33 >= 0) {
      long long v34 = (char *)(v30 + 2);
    }
    else {
      long long v34 = (char *)v30[2];
    }
    if (v33 >= 0) {
      int64_t v35 = *((unsigned __int8 *)v30 + 39);
    }
    else {
      int64_t v35 = v30[3];
    }
    if (!v35) {
LABEL_48:
    }
      sub_5F746C(v29, (uint64_t)(v30 + 2));
    while (1)
    {
      if (v31[23] < 0)
      {
        char v37 = *(char **)v31;
        int64_t v36 = *((void *)v31 + 1);
        if (v36 < v35) {
          goto LABEL_59;
        }
      }
      else
      {
        int64_t v36 = v31[23];
        char v37 = v31;
        if (v36 < v35) {
          goto LABEL_59;
        }
      }
      uint64_t v38 = &v37[v36];
      int v39 = *v34;
      std::string::size_type v40 = v37;
      while (1)
      {
        int64_t v41 = v36 - v35;
        if (v41 == -1) {
          goto LABEL_59;
        }
        int64_t v42 = (char *)memchr(v40, v39, v41 + 1);
        if (!v42) {
          goto LABEL_59;
        }
        std::string::size_type v43 = v42;
        if (!memcmp(v42, v34, v35)) {
          break;
        }
        std::string::size_type v40 = v43 + 1;
        int64_t v36 = v38 - (v43 + 1);
        if (v36 < v35) {
          goto LABEL_59;
        }
      }
      if (v43 != v38 && v43 - v37 != -1) {
        goto LABEL_48;
      }
LABEL_59:
      v31 += 24;
      if (v31 == v32) {
        goto LABEL_49;
      }
    }
  }
  sub_5F3B34(a3);
LABEL_74:
  std::string::size_type v44 = v54;
  if (v54)
  {
    uint64_t v45 = v55;
    int64_t v46 = v54;
    if ((char **)v55 != v54)
    {
      do
        uint64_t v45 = sub_4D4B58(v45 - 160);
      while ((char **)v45 != v44);
      int64_t v46 = v54;
    }
    unint64_t v55 = (unint64_t)v44;
    operator delete(v46);
  }
}

void sub_612614(_Unwind_Exception *a1)
{
  sub_59213C((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_612638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  *(void *)(v7 - 104) = v6;
  sub_4D4B58((uint64_t)va);
  sub_1A668((void **)(v7 - 136));
  sub_59213C((void **)(v7 - 112));
  _Unwind_Resume(a1);
}

void sub_612684(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = sub_68EE4((uint64_t)a2);
  uint64_t v7 = *(uint64_t **)v6;
  uint64_t v8 = *(uint64_t **)(v6 + 8);
  while (v7 != v8)
  {
    sub_60ED68(a1, v7, (uint64_t)&v17);
    uint64_t v10 = (uint64_t)v17;
    uint64_t v11 = v18;
    if (v17 == (void *)v18)
    {
      if (!v17) {
        goto LABEL_4;
      }
    }
    else
    {
      do
      {
        sub_5F3B34((uint64_t)v16);
        sub_5F41E8((uint64_t)v16, v10);
        uint64_t v13 = (void *)sub_638F70((uint64_t)a2);
        sub_611CA8(a1, a2, v13, v16);
        unint64_t v14 = a3[1];
        if (v14 >= a3[2])
        {
          uint64_t v12 = sub_619074(a3, (uint64_t)v16);
        }
        else
        {
          sub_4F58AC(a3[1], (uint64_t)v16);
          uint64_t v12 = v14 + 160;
          a3[1] = v14 + 160;
        }
        a3[1] = v12;
        sub_4D4B58((uint64_t)v16);
        v10 += 24;
      }
      while (v10 != v11);
      uint64_t v10 = (uint64_t)v17;
      if (!v17) {
        goto LABEL_4;
      }
    }
    uint64_t v15 = v18;
    uint64_t v9 = (void *)v10;
    if (v18 != v10)
    {
      do
      {
        if (*(char *)(v15 - 1) < 0) {
          operator delete(*(void **)(v15 - 24));
        }
        v15 -= 24;
      }
      while (v15 != v10);
      uint64_t v9 = v17;
    }
    uint64_t v18 = v10;
    operator delete(v9);
LABEL_4:
    v7 += 13;
  }
}

void sub_6127DC(_Unwind_Exception *a1)
{
  sub_59213C(v1);
  _Unwind_Resume(a1);
}

void sub_6127F0(_Unwind_Exception *a1)
{
  sub_59213C(v1);
  _Unwind_Resume(a1);
}

void sub_612804(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v2 + 8) = v3;
  sub_4D4B58((uint64_t)va);
  sub_1A668((void **)(v4 - 104));
  sub_59213C((void **)v2);
  _Unwind_Resume(a1);
}

void sub_612850(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3B34(a3);
  uint64_t v6 = (uint64_t *)sub_68EE4((uint64_t)a2);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  if (*v6 != v8)
  {
    do
    {
      uint64_t v10 = sub_6382F4(v7);
      uint64_t v11 = *((unsigned __int8 *)v10 + 23);
      int v12 = (char)v11;
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = v10[1];
      }
      if (v11)
      {
        unint64_t v13 = *(void *)(a3 + 56);
        if (v13 >= *(void *)(a3 + 64))
        {
          uint64_t v9 = sub_6E6EC((char **)(a3 + 48), (uint64_t)v10);
        }
        else
        {
          if (v12 < 0)
          {
            sub_4200(*(unsigned char **)(a3 + 56), (void *)*v10, v10[1]);
          }
          else
          {
            long long v14 = *(_OWORD *)v10;
            *(void *)(v13 + 16) = v10[2];
            *(_OWORD *)unint64_t v13 = v14;
          }
          uint64_t v9 = (char *)(v13 + 24);
          *(void *)(a3 + 56) = v13 + 24;
        }
        *(void *)(a3 + 56) = v9;
      }
      else
      {
        uint64_t v15 = nullsub_1(v7);
        sub_60EBA4(a1, v15, 0, (uint64_t)&__p);
        uint64_t v16 = sub_612A40(&__p, 0);
        sub_5F41E8(a3, v16);
        int64_t v17 = (void *)sub_638F70((uint64_t)a2);
        sub_611CA8((uint64_t)a1, a2, v17, (char **)a3);
        uint64_t v18 = (void **)__p;
        if (__p)
        {
          int64_t v19 = v22;
          uint64_t v20 = __p;
          if (v22 != __p)
          {
            do
            {
              if (*((char *)v19 - 1) < 0) {
                operator delete(*(v19 - 3));
              }
              v19 -= 3;
            }
            while (v19 != v18);
            uint64_t v20 = __p;
          }
          uint64_t v22 = v18;
          operator delete(v20);
        }
      }
      v7 += 104;
    }
    while (v7 != v8);
  }
}

void sub_6129D0(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_6129E4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 56) = v2;
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_6129FC(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_612A10(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_612A24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1A668((void **)va);
  sub_4D4B58(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_612A40(void *a1, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    int v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    long long v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 24 * a2;
}

void sub_612B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

void sub_612C70(uint64_t *a1, uint64_t a2, char ***a3)
{
  if (!sub_5F7924(a3, (char *)&xmmword_258EA00)) {
    return;
  }
  sub_63553C((uint64_t)&xmmword_258EA00, (uint64_t)&v44);
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  sub_6370D4(&v39, &v44, 1, &v37);
  uint64_t v6 = v38;
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  int v7 = sub_638AD8(a2);
  sub_5F1DD0((char *)v35, &xmmword_258EA00, 17);
  int v36 = v7;
  int v8 = byte_258EC3F;
  if (byte_258EC3F >= 0) {
    size_t v9 = byte_258EC3F;
  }
  else {
    size_t v9 = qword_258EC30;
  }
  int v10 = byte_258D8D7;
  if (byte_258D8D7 >= 0) {
    size_t v11 = byte_258D8D7;
  }
  else {
    size_t v11 = qword_258D8C8;
  }
  unint64_t v12 = v11 + v9;
  if (v11 + v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v12 > 0x16)
  {
    uint64_t v24 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v24 = v12 | 7;
    }
    uint64_t v25 = v24 + 1;
    p_dst = (void **)operator new(v24 + 1);
    size_t v33 = v11 + v9;
    unint64_t v34 = v25 | 0x8000000000000000;
    long long __dst = p_dst;
    if (!v9) {
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  size_t v33 = 0;
  unint64_t v34 = 0;
  long long __dst = 0;
  p_dst = (void **)&__dst;
  HIBYTE(v34) = v11 + v9;
  if (v9)
  {
LABEL_14:
    if (v8 >= 0) {
      long long v14 = &qword_258EC28;
    }
    else {
      long long v14 = (uint64_t *)qword_258EC28;
    }
    memmove(p_dst, v14, v9);
  }
LABEL_18:
  std::string v15 = (char *)p_dst + v9;
  if (v11)
  {
    if (v10 >= 0) {
      std::string v16 = &qword_258D8C0;
    }
    else {
      std::string v16 = (uint64_t *)qword_258D8C0;
    }
    memmove(v15, v16, v11);
  }
  v15[v11] = 0;
  sub_613060(a1, (uint64_t)&v39, (uint64_t)&__dst, (uint64_t)v35, 7, (uint64_t)&xmmword_258E880, 2);
  if (SHIBYTE(v34) < 0) {
    operator delete(__dst);
  }
  sub_5F4060((uint64_t)a3, v35);
  sub_4DC6B8((uint64_t)v35);
  std::string v17 = v43;
  if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  std::string v18 = v42;
  if (v42)
  {
    do
    {
      long long v19 = (void *)*v18;
      sub_4F4B48((uint64_t)(v18 + 2));
      operator delete(v18);
      std::string v18 = v19;
    }
    while (v19);
  }
  std::string::size_type v20 = __p;
  std::string __p = 0;
  if (v20) {
    operator delete(v20);
  }
  int v21 = (void **)v39;
  if (v39)
  {
    uint64_t v22 = v40;
    int64_t v23 = v39;
    if (v40 != v39)
    {
      do
      {
        if (*((char *)v22 - 1) < 0) {
          operator delete(*(v22 - 3));
        }
        v22 -= 3;
      }
      while (v22 != v21);
      int64_t v23 = v39;
    }
    std::string::size_type v40 = v21;
    operator delete(v23);
  }
  float v26 = v47;
  if (v47)
  {
    do
    {
      unint64_t v27 = (void *)*v26;
      sub_4F4B48((uint64_t)(v26 + 2));
      operator delete(v26);
      float v26 = v27;
    }
    while (v27);
  }
  uint64_t v28 = v46;
  int64_t v46 = 0;
  if (v28) {
    operator delete(v28);
  }
  char v29 = v44;
  if (v44)
  {
    long long v30 = v45;
    uint64_t v31 = v44;
    if (v45 != v44)
    {
      do
      {
        if (*((char *)v30 - 1) < 0) {
          operator delete(*(v30 - 3));
        }
        v30 -= 3;
      }
      while (v30 != v29);
      uint64_t v31 = v44;
    }
    uint64_t v45 = v29;
    operator delete(v31);
  }
}

void sub_612FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,void *a36)
{
  sub_4DC6B8((uint64_t)&a16);
  sub_4F31D0(&a36);
  sub_4D4880((void **)(v36 - 152));
  _Unwind_Resume(a1);
}

void sub_613060(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, char a7)
{
  if (*(char *)(a6 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a6, *(void *)(a6 + 8));
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)a6;
    uint64_t v19 = *(void *)(a6 + 16);
  }
  char v20 = a7;
  sub_6192A4(&__p, (uint64_t)__dst, 1uLL);
  sub_614DAC(a1, a2, a3, a4, a5, (uint64_t *)&__p);
  long long v13 = (void **)__p;
  if (__p)
  {
    long long v14 = v17;
    std::string v15 = __p;
    if (v17 != __p)
    {
      do
      {
        if (*((char *)v14 - 9) < 0) {
          operator delete(*(v14 - 4));
        }
        v14 -= 4;
      }
      while (v14 != v13);
      std::string v15 = __p;
    }
    std::string v17 = v13;
    operator delete(v15);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_613190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_6131BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_5F7924((char ***)a3, (char *)&qword_258ED48);
  if (result)
  {
    uint64_t result = sub_5F7924((char ***)a3, (char *)&dword_258E748);
    if (result)
    {
      uint64_t v7 = sub_638A60(a2);
      if (*(void *)a3 != *(void *)(a3 + 8) && sub_5F7924((char ***)a3, (char *)&qword_258ED48))
      {
        unsigned int v8 = sub_3FB38C(v7);
        sub_5F71A4(a3, (uint64_t)&qword_258ED48, (float)v8);
      }
      if (sub_3FB38C(v7) <= *(_DWORD *)(a1 + 1592))
      {
        uint64_t v9 = 47;
      }
      else if (sub_3FB38C(v7) <= *(_DWORD *)(a1 + 1596))
      {
        uint64_t v9 = 49;
      }
      else
      {
        uint64_t v9 = 5;
      }
      sub_524D84(v9, (uint64_t)v10);
      sub_5F40C0(a3, (long long *)&dword_258E748);
    }
  }
  return result;
}

void sub_613348(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D9814((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_613360@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char ***a3@<X8>)
{
  if (sub_638A18(a2) == 27)
  {
    return sub_613420(a1, a2, (uint64_t)a3);
  }
  else
  {
    sub_613628(a1, a2, (uint64_t)a3);
    sub_612C70(a1, a2, a3);
    uint64_t v7 = (int *)sub_638A60(a2);
    uint64_t result = sub_40A45C(v7);
    if (result) {
      return sub_6131BC((uint64_t)a1, a2, (uint64_t)a3);
    }
  }
  return result;
}

void sub_61340C(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_613420@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_613628(a1, a2, a3);
  uint64_t v6 = (int *)sub_638A60(a2);
  if (sub_40A45C(v6)) {
    sub_6131BC((uint64_t)a1, a2, a3);
  }
  uint64_t v7 = sub_68EA4(a2);
  if (sub_40A45C((int *)(v7 + 8)))
  {
    uint64_t v8 = sub_68EA4(a2);
    if (*(void *)a3 != *(void *)(a3 + 8))
    {
      uint64_t v9 = v8;
      if (sub_5F7924((char ***)a3, byte_258ED30))
      {
        unsigned int v10 = sub_3FB38C(v9 + 8);
        sub_5F71A4(a3, (uint64_t)byte_258ED30, (float)v10);
      }
    }
    sub_524D84(48, (uint64_t)v13);
    sub_5F40C0(a3, (long long *)&dword_258E760);
  }
  uint64_t result = sub_638A68(a2);
  if (result != 0x7FFFFFFF)
  {
    uint64_t result = sub_5F7924((char ***)a3, byte_258ED60);
    if (result)
    {
      int v12 = sub_638A68(a2);
      return sub_5F657C((uint64_t *)a3, (uint64_t)byte_258ED60, v12);
    }
  }
  return result;
}

void sub_6135D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D9814((uint64_t)va);
  sub_4D4B58(v2);
  _Unwind_Resume(a1);
}

void sub_6135EC(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_613600(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_613614(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_613628(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3B34(a3);
  uint64_t v6 = (uint64_t *)sub_68EE4(a2);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  if (*v6 != v8)
  {
    do
    {
      unsigned int v10 = sub_6382F4(v7);
      uint64_t v11 = *((unsigned __int8 *)v10 + 23);
      int v12 = (char)v11;
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = v10[1];
      }
      if (v11)
      {
        unint64_t v13 = *(void *)(a3 + 56);
        if (v13 >= *(void *)(a3 + 64))
        {
          uint64_t v9 = sub_6E6EC((char **)(a3 + 48), (uint64_t)v10);
        }
        else
        {
          if (v12 < 0)
          {
            sub_4200(*(unsigned char **)(a3 + 56), (void *)*v10, v10[1]);
          }
          else
          {
            long long v14 = *(_OWORD *)v10;
            *(void *)(v13 + 16) = v10[2];
            *(_OWORD *)unint64_t v13 = v14;
          }
          uint64_t v9 = (char *)(v13 + 24);
          *(void *)(a3 + 56) = v13 + 24;
        }
        *(void *)(a3 + 56) = v9;
      }
      else
      {
        uint64_t v15 = nullsub_1(v7);
        sub_60EBA4(a1, v15, 0, (uint64_t)&__p);
        uint64_t v16 = sub_612A40(&__p, 0);
        sub_5F41E8(a3, v16);
        std::string v17 = (void **)__p;
        if (__p)
        {
          std::string v18 = v21;
          uint64_t v19 = __p;
          if (v21 != __p)
          {
            do
            {
              if (*((char *)v18 - 1) < 0) {
                operator delete(*(v18 - 3));
              }
              v18 -= 3;
            }
            while (v18 != v17);
            uint64_t v19 = __p;
          }
          int v21 = v17;
          operator delete(v19);
        }
      }
      v7 += 104;
    }
    while (v7 != v8);
  }
}

void sub_61378C(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_6137A0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 56) = v2;
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_6137B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1A668((void **)va);
  sub_4D4B58(v2);
  _Unwind_Resume(a1);
}

void sub_6137D4(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_6137E8(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void *sub_6137FC@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  switch((int)result)
  {
    case 1:
      if (byte_258E9B7 < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_258E9A0, *((unint64_t *)&xmmword_258E9A0 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_258E9A0;
        *(void *)(a2 + 16) = *(void *)&dword_258E9B0;
      }
      break;
    case 2:
      if (byte_258E9CF < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_258E9B8, *((unint64_t *)&xmmword_258E9B8 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_258E9B8;
        *(void *)(a2 + 16) = unk_258E9C8;
      }
      break;
    case 3:
      if (byte_258E9E7 < 0)
      {
        uint64_t result = sub_4200((unsigned char *)a2, (void *)xmmword_258E9D0, *((unint64_t *)&xmmword_258E9D0 + 1));
      }
      else
      {
        *(_OWORD *)a2 = xmmword_258E9D0;
        *(void *)(a2 + 16) = unk_258E9E0;
      }
      break;
    default:
      *(unsigned char *)(a2 + 23) = 0;
      *(unsigned char *)a2 = 0;
      break;
  }
  return result;
}

void sub_6138F8(uint64_t a1@<X0>, void *a2@<X1>, char **a3@<X8>)
{
  if (sub_638A18((uint64_t)a2) != 27 && sub_638A18((uint64_t)a2) != 28)
  {
    sub_5F3D48((uint64_t)a3, (uint64_t)&xmmword_258EA00);
    std::string::size_type v136 = a3;
    sub_63553C((uint64_t)&xmmword_258EA00, (uint64_t)v146);
    uint64_t v143 = 0;
    unsigned __int8 v144 = 0;
    sub_6370D4(v145, v146, 1, &v143);
    uint64_t v6 = v144;
    if (v144 && !atomic_fetch_add(&v144->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    int v7 = sub_638AD8((uint64_t)a2);
    sub_5F1DD0((char *)v141, &xmmword_258EA00, 17);
    int v142 = v7;
    int v8 = byte_258EBDF;
    if (byte_258EBDF >= 0) {
      size_t v9 = byte_258EBDF;
    }
    else {
      size_t v9 = qword_258EBD0;
    }
    int v10 = byte_258D8D7;
    if (byte_258D8D7 >= 0) {
      size_t v11 = byte_258D8D7;
    }
    else {
      size_t v11 = qword_258D8C8;
    }
    unint64_t v12 = v11 + v9;
    if (v11 + v9 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v12 > 0x16)
    {
      uint64_t v90 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17) {
        uint64_t v90 = v12 | 7;
      }
      uint64_t v91 = v90 + 1;
      unint64_t v13 = (long long *)operator new(v90 + 1);
      *((void *)&__dst + 1) = v11 + v9;
      *(void *)&long long v148 = v91 | 0x8000000000000000;
      *(void *)&long long __dst = v13;
      if (!v9)
      {
LABEL_22:
        uint64_t v15 = (char *)v13 + v9;
        if (v11)
        {
          if (v10 >= 0) {
            uint64_t v16 = &qword_258D8C0;
          }
          else {
            uint64_t v16 = (uint64_t *)qword_258D8C0;
          }
          memmove(v15, v16, v11);
        }
        v15[v11] = 0;
        HIBYTE(v140) = 0;
        LOBYTE(v138) = 0;
        sub_613060((uint64_t *)a1, (uint64_t)v145, (uint64_t)&__dst, (uint64_t)v141, 2, (uint64_t)&v138, 0);
        if (SBYTE7(v148) < 0) {
          operator delete((void *)__dst);
        }
        int v17 = byte_258EC0F;
        if (byte_258EC0F >= 0) {
          size_t v18 = byte_258EC0F;
        }
        else {
          size_t v18 = qword_258EC00;
        }
        int v19 = byte_258D8D7;
        if (byte_258D8D7 >= 0) {
          size_t v20 = byte_258D8D7;
        }
        else {
          size_t v20 = qword_258D8C8;
        }
        unint64_t v21 = v20 + v18;
        if (v20 + v18 > 0x7FFFFFFFFFFFFFF7) {
          sub_188D690();
        }
        if (v21 > 0x16)
        {
          uint64_t v92 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v21 | 7) != 0x17) {
            uint64_t v92 = v21 | 7;
          }
          uint64_t v93 = v92 + 1;
          uint64_t v22 = (long long *)operator new(v92 + 1);
          *((void *)&__dst + 1) = v20 + v18;
          *(void *)&long long v148 = v93 | 0x8000000000000000;
          *(void *)&long long __dst = v22;
          if (!v18)
          {
LABEL_42:
            uint64_t v24 = (char *)v22 + v18;
            if (v20)
            {
              if (v19 >= 0) {
                uint64_t v25 = &qword_258D8C0;
              }
              else {
                uint64_t v25 = (uint64_t *)qword_258D8C0;
              }
              memmove(v24, v25, v20);
            }
            v24[v20] = 0;
            HIBYTE(v140) = 0;
            LOBYTE(v138) = 0;
            sub_613060((uint64_t *)a1, (uint64_t)v145, (uint64_t)&__dst, (uint64_t)v141, 1, (uint64_t)&v138, 0);
            if (SBYTE7(v148) < 0) {
              operator delete((void *)__dst);
            }
            int v26 = byte_258EBF7;
            if (byte_258EBF7 >= 0) {
              size_t v27 = byte_258EBF7;
            }
            else {
              size_t v27 = qword_258EBE8;
            }
            int v28 = byte_258D8D7;
            if (byte_258D8D7 >= 0) {
              size_t v29 = byte_258D8D7;
            }
            else {
              size_t v29 = qword_258D8C8;
            }
            unint64_t v30 = v29 + v27;
            if (v29 + v27 > 0x7FFFFFFFFFFFFFF7) {
              sub_188D690();
            }
            if (v30 > 0x16)
            {
              uint64_t v94 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v30 | 7) != 0x17) {
                uint64_t v94 = v30 | 7;
              }
              uint64_t v95 = v94 + 1;
              uint64_t v31 = (long long *)operator new(v94 + 1);
              *((void *)&__dst + 1) = v29 + v27;
              *(void *)&long long v148 = v95 | 0x8000000000000000;
              *(void *)&long long __dst = v31;
              if (!v27)
              {
LABEL_62:
                size_t v33 = (char *)v31 + v27;
                if (v29)
                {
                  if (v28 >= 0) {
                    unint64_t v34 = &qword_258D8C0;
                  }
                  else {
                    unint64_t v34 = (uint64_t *)qword_258D8C0;
                  }
                  memmove(v33, v34, v29);
                }
                v33[v29] = 0;
                sub_613060((uint64_t *)a1, (uint64_t)v145, (uint64_t)&__dst, (uint64_t)v141, 4, (uint64_t)&xmmword_258E898, 3);
                if (SBYTE7(v148) < 0) {
                  operator delete((void *)__dst);
                }
                int v35 = byte_258EC27;
                if (byte_258EC27 >= 0) {
                  size_t v36 = byte_258EC27;
                }
                else {
                  size_t v36 = qword_258EC18;
                }
                int v37 = byte_258D8D7;
                if (byte_258D8D7 >= 0) {
                  size_t v38 = byte_258D8D7;
                }
                else {
                  size_t v38 = qword_258D8C8;
                }
                unint64_t v39 = v38 + v36;
                if (v38 + v36 > 0x7FFFFFFFFFFFFFF7) {
                  sub_188D690();
                }
                if (v39 > 0x16)
                {
                  uint64_t v96 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v39 | 7) != 0x17) {
                    uint64_t v96 = v39 | 7;
                  }
                  uint64_t v97 = v96 + 1;
                  std::string::size_type v40 = (long long *)operator new(v96 + 1);
                  *((void *)&__dst + 1) = v38 + v36;
                  *(void *)&long long v148 = v97 | 0x8000000000000000;
                  *(void *)&long long __dst = v40;
                  if (!v36)
                  {
LABEL_82:
                    int64_t v42 = (char *)v40 + v36;
                    if (v38)
                    {
                      if (v37 >= 0) {
                        std::string::size_type v43 = &qword_258D8C0;
                      }
                      else {
                        std::string::size_type v43 = (uint64_t *)qword_258D8C0;
                      }
                      memmove(v42, v43, v38);
                    }
                    v42[v38] = 0;
                    sub_613060((uint64_t *)a1, (uint64_t)v145, (uint64_t)&__dst, (uint64_t)v141, 3, (uint64_t)&xmmword_258E898, 3);
                    if (SBYTE7(v148) < 0) {
                      operator delete((void *)__dst);
                    }
                    int v44 = byte_258EC6F;
                    if (byte_258EC6F >= 0) {
                      size_t v45 = byte_258EC6F;
                    }
                    else {
                      size_t v45 = qword_258EC60;
                    }
                    int v46 = byte_258D8D7;
                    if (byte_258D8D7 >= 0) {
                      size_t v47 = byte_258D8D7;
                    }
                    else {
                      size_t v47 = qword_258D8C8;
                    }
                    unint64_t v48 = v47 + v45;
                    if (v47 + v45 > 0x7FFFFFFFFFFFFFF7) {
                      sub_188D690();
                    }
                    if (v48 > 0x16)
                    {
                      uint64_t v98 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v48 | 7) != 0x17) {
                        uint64_t v98 = v48 | 7;
                      }
                      uint64_t v99 = v98 + 1;
                      int64_t v49 = (long long *)operator new(v98 + 1);
                      *((void *)&__dst + 1) = v47 + v45;
                      *(void *)&long long v148 = v99 | 0x8000000000000000;
                      *(void *)&long long __dst = v49;
                      if (!v45)
                      {
LABEL_102:
                        int64_t v51 = (char *)v49 + v45;
                        if (v47)
                        {
                          if (v46 >= 0) {
                            int v52 = &qword_258D8C0;
                          }
                          else {
                            int v52 = (uint64_t *)qword_258D8C0;
                          }
                          memmove(v51, v52, v47);
                        }
                        v51[v47] = 0;
                        sub_613060((uint64_t *)a1, (uint64_t)v145, (uint64_t)&__dst, (uint64_t)v141, 5, (uint64_t)&xmmword_258E898, 3);
                        if (SBYTE7(v148) < 0) {
                          operator delete((void *)__dst);
                        }
                        int v53 = byte_258EC57;
                        if (byte_258EC57 >= 0) {
                          size_t v54 = byte_258EC57;
                        }
                        else {
                          size_t v54 = qword_258EC48;
                        }
                        int v55 = byte_258D8D7;
                        if (byte_258D8D7 >= 0) {
                          size_t v56 = byte_258D8D7;
                        }
                        else {
                          size_t v56 = qword_258D8C8;
                        }
                        unint64_t v57 = v56 + v54;
                        if (v56 + v54 > 0x7FFFFFFFFFFFFFF7) {
                          sub_188D690();
                        }
                        if (v57 > 0x16)
                        {
                          uint64_t v100 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v57 | 7) != 0x17) {
                            uint64_t v100 = v57 | 7;
                          }
                          uint64_t v101 = v100 + 1;
                          unsigned int v58 = (long long *)operator new(v100 + 1);
                          *((void *)&__dst + 1) = v56 + v54;
                          *(void *)&long long v148 = v101 | 0x8000000000000000;
                          *(void *)&long long __dst = v58;
                          if (!v54)
                          {
LABEL_122:
                            uint64_t v60 = (char *)v58 + v54;
                            if (v56)
                            {
                              if (v55 >= 0) {
                                unint64_t v61 = &qword_258D8C0;
                              }
                              else {
                                unint64_t v61 = (uint64_t *)qword_258D8C0;
                              }
                              memmove(v60, v61, v56);
                            }
                            v60[v56] = 0;
                            sub_613060((uint64_t *)a1, (uint64_t)v145, (uint64_t)&__dst, (uint64_t)v141, 6, (uint64_t)&xmmword_258E898, 4);
                            if (SBYTE7(v148) < 0) {
                              operator delete((void *)__dst);
                            }
                            int v62 = byte_258EC3F;
                            if (byte_258EC3F >= 0) {
                              size_t v63 = byte_258EC3F;
                            }
                            else {
                              size_t v63 = qword_258EC30;
                            }
                            int v64 = byte_258D8D7;
                            if (byte_258D8D7 >= 0) {
                              size_t v65 = byte_258D8D7;
                            }
                            else {
                              size_t v65 = qword_258D8C8;
                            }
                            unint64_t v66 = v65 + v63;
                            if (v65 + v63 > 0x7FFFFFFFFFFFFFF7) {
                              sub_188D690();
                            }
                            if (v66 > 0x16)
                            {
                              uint64_t v102 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v66 | 7) != 0x17) {
                                uint64_t v102 = v66 | 7;
                              }
                              uint64_t v103 = v102 + 1;
                              int v67 = (long long *)operator new(v102 + 1);
                              *((void *)&__dst + 1) = v65 + v63;
                              *(void *)&long long v148 = v103 | 0x8000000000000000;
                              *(void *)&long long __dst = v67;
                              if (!v63)
                              {
LABEL_142:
                                uint64_t v69 = (char *)v67 + v63;
                                if (v65)
                                {
                                  if (v64 >= 0) {
                                    char v70 = &qword_258D8C0;
                                  }
                                  else {
                                    char v70 = (uint64_t *)qword_258D8C0;
                                  }
                                  memmove(v69, v70, v65);
                                }
                                v69[v65] = 0;
                                sub_613060((uint64_t *)a1, (uint64_t)v145, (uint64_t)&__dst, (uint64_t)v141, 7, (uint64_t)&xmmword_258E880, 2);
                                if (SBYTE7(v148) < 0) {
                                  operator delete((void *)__dst);
                                }
                                int v71 = byte_258EC87;
                                if (byte_258EC87 >= 0) {
                                  size_t v72 = byte_258EC87;
                                }
                                else {
                                  size_t v72 = qword_258EC78;
                                }
                                int v73 = byte_258D8D7;
                                if (byte_258D8D7 >= 0) {
                                  size_t v74 = byte_258D8D7;
                                }
                                else {
                                  size_t v74 = qword_258D8C8;
                                }
                                unint64_t v75 = v74 + v72;
                                if (v74 + v72 > 0x7FFFFFFFFFFFFFF7) {
                                  sub_188D690();
                                }
                                if (v75 > 0x16)
                                {
                                  uint64_t v104 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
                                  if ((v75 | 7) != 0x17) {
                                    uint64_t v104 = v75 | 7;
                                  }
                                  uint64_t v105 = v104 + 1;
                                  unint64_t v76 = (long long *)operator new(v104 + 1);
                                  *((void *)&__dst + 1) = v74 + v72;
                                  *(void *)&long long v148 = v105 | 0x8000000000000000;
                                  *(void *)&long long __dst = v76;
                                  if (!v72)
                                  {
LABEL_162:
                                    unint64_t v78 = (char *)v76 + v72;
                                    if (v74)
                                    {
                                      if (v73 >= 0) {
                                        size_t v79 = &qword_258D8C0;
                                      }
                                      else {
                                        size_t v79 = (uint64_t *)qword_258D8C0;
                                      }
                                      memmove(v78, v79, v74);
                                    }
                                    v78[v74] = 0;
                                    HIBYTE(v140) = 0;
                                    LOBYTE(v138) = 0;
                                    sub_613060((uint64_t *)a1, (uint64_t)v145, (uint64_t)&__dst, (uint64_t)v141, 10, (uint64_t)&v138, 0);
                                    if (SBYTE7(v148) < 0) {
                                      operator delete((void *)__dst);
                                    }
                                    int v80 = byte_258EC9F;
                                    if (byte_258EC9F >= 0) {
                                      size_t v81 = byte_258EC9F;
                                    }
                                    else {
                                      size_t v81 = qword_258EC90;
                                    }
                                    int v82 = byte_258D8D7;
                                    if (byte_258D8D7 >= 0) {
                                      size_t v83 = byte_258D8D7;
                                    }
                                    else {
                                      size_t v83 = qword_258D8C8;
                                    }
                                    unint64_t v84 = v83 + v81;
                                    if (v83 + v81 > 0x7FFFFFFFFFFFFFF7) {
                                      sub_188D690();
                                    }
                                    if (v84 > 0x16)
                                    {
                                      uint64_t v106 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
                                      if ((v84 | 7) != 0x17) {
                                        uint64_t v106 = v84 | 7;
                                      }
                                      uint64_t v107 = v106 + 1;
                                      int v85 = (long long *)operator new(v106 + 1);
                                      *((void *)&__dst + 1) = v83 + v81;
                                      *(void *)&long long v148 = v107 | 0x8000000000000000;
                                      *(void *)&long long __dst = v85;
                                      if (!v81)
                                      {
LABEL_182:
                                        BOOL v87 = (char *)v85 + v81;
                                        if (v83)
                                        {
                                          if (v82 >= 0) {
                                            std::string::size_type v88 = &qword_258D8C0;
                                          }
                                          else {
                                            std::string::size_type v88 = (uint64_t *)qword_258D8C0;
                                          }
                                          memmove(v87, v88, v83);
                                        }
                                        v87[v83] = 0;
                                        uint64_t v89 = (uint64_t)v136;
                                        sub_613060((uint64_t *)a1, (uint64_t)v145, (uint64_t)&__dst, (uint64_t)v141, 11, (uint64_t)&xmmword_258E898, 3);
                                        if (SBYTE7(v148) < 0)
                                        {
                                          operator delete((void *)__dst);
                                          if (!*(unsigned char *)(a1 + 2168)) {
                                            goto LABEL_290;
                                          }
                                        }
                                        else if (!*(unsigned char *)(a1 + 2168))
                                        {
LABEL_290:
                                          sub_5F4060(v89, v141);
                                          uint64_t v133 = (void *)sub_638AE0((uint64_t)a2);
                                          sub_6137FC(v133, (uint64_t)&v138);
                                          long long __dst = 0u;
                                          long long v148 = 0u;
                                          LODWORD(v149) = 1065353216;
                                          if (*(void *)a1)
                                          {
                                            v134 = (std::string *)sub_8D7730(*(void *)a1, (uint64_t)&v138);
                                            if (SHIBYTE(v134->__r_.__value_.__r.__words[2]) < 0)
                                            {
                                              v134 = (std::string *)sub_4200(&__p, v134->__r_.__value_.__l.__data_, v134->__r_.__value_.__l.__size_);
                                            }
                                            else
                                            {
                                              long long v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
                                              __p.__r_.__value_.__r.__words[2] = v134->__r_.__value_.__r.__words[2];
                                              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v135;
                                            }
                                            sub_60E630(v134, (uint64_t)&__dst, &__p);
                                          }
                                          else
                                          {
                                            memset(&__p, 0, sizeof(__p));
                                          }
                                          sub_5F7118(v89, (uint64_t)&__p);
                                        }
                                        int v108 = byte_258ECB7;
                                        if (byte_258ECB7 >= 0) {
                                          size_t v109 = byte_258ECB7;
                                        }
                                        else {
                                          size_t v109 = qword_258ECA8;
                                        }
                                        int v110 = byte_258D8D7;
                                        if (byte_258D8D7 >= 0) {
                                          size_t v111 = byte_258D8D7;
                                        }
                                        else {
                                          size_t v111 = qword_258D8C8;
                                        }
                                        unint64_t v112 = v111 + v109;
                                        if (v111 + v109 > 0x7FFFFFFFFFFFFFF7) {
                                          sub_188D690();
                                        }
                                        if (v112 > 0x16)
                                        {
                                          uint64_t v126 = (v112 & 0xFFFFFFFFFFFFFFF8) + 8;
                                          if ((v112 | 7) != 0x17) {
                                            uint64_t v126 = v112 | 7;
                                          }
                                          uint64_t v127 = v126 + 1;
                                          p_dst = (long long *)operator new(v126 + 1);
                                          *((void *)&__dst + 1) = v111 + v109;
                                          *(void *)&long long v148 = v127 | 0x8000000000000000;
                                          *(void *)&long long __dst = p_dst;
                                          if (!v109)
                                          {
LABEL_240:
                                            long long v115 = (char *)p_dst + v109;
                                            if (v111)
                                            {
                                              if (v110 >= 0) {
                                                unsigned __int8 v116 = &qword_258D8C0;
                                              }
                                              else {
                                                unsigned __int8 v116 = (uint64_t *)qword_258D8C0;
                                              }
                                              memmove(v115, v116, v111);
                                            }
                                            v115[v111] = 0;
                                            sub_613060((uint64_t *)a1, (uint64_t)v145, (uint64_t)&__dst, (uint64_t)v141, 12, (uint64_t)&xmmword_258E898, 3);
                                            if (SBYTE7(v148) < 0) {
                                              operator delete((void *)__dst);
                                            }
                                            int v117 = SHIBYTE(xmmword_258ECC0);
                                            if (xmmword_258ECC0 >= 0) {
                                              size_t v118 = HIBYTE(xmmword_258ECC0);
                                            }
                                            else {
                                              size_t v118 = xmmword_258ECC0;
                                            }
                                            int v119 = byte_258D8D7;
                                            if (byte_258D8D7 >= 0) {
                                              size_t v120 = byte_258D8D7;
                                            }
                                            else {
                                              size_t v120 = qword_258D8C8;
                                            }
                                            unint64_t v121 = v120 + v118;
                                            if (v120 + v118 > 0x7FFFFFFFFFFFFFF7) {
                                              sub_188D690();
                                            }
                                            if (v121 > 0x16)
                                            {
                                              uint64_t v128 = (v121 & 0xFFFFFFFFFFFFFFF8) + 8;
                                              if ((v121 | 7) != 0x17) {
                                                uint64_t v128 = v121 | 7;
                                              }
                                              uint64_t v129 = v128 + 1;
                                              unint64_t v122 = (char *)operator new(v128 + 1);
                                              size_t v139 = v120 + v118;
                                              unint64_t v140 = v129 | 0x8000000000000000;
                                              long long v138 = v122;
                                              if (!v118)
                                              {
LABEL_260:
                                                uint64_t v124 = &v122[v118];
                                                if (v120)
                                                {
                                                  if (v119 >= 0) {
                                                    uint64_t v125 = &qword_258D8C0;
                                                  }
                                                  else {
                                                    uint64_t v125 = (uint64_t *)qword_258D8C0;
                                                  }
                                                  memmove(v124, v125, v120);
                                                }
                                                v124[v120] = 0;
                                                if (byte_258E8AF < 0)
                                                {
                                                  sub_4200(&__dst, (void *)xmmword_258E898, *((unint64_t *)&xmmword_258E898 + 1));
                                                }
                                                else
                                                {
                                                  long long __dst = xmmword_258E898;
                                                  *(void *)&long long v148 = unk_258E8A8;
                                                }
                                                BYTE8(v148) = 3;
                                                if (byte_258E96F < 0)
                                                {
                                                  sub_4200(&v149, (void *)xmmword_258E958, *((unint64_t *)&xmmword_258E958 + 1));
                                                }
                                                else
                                                {
                                                  long long v149 = xmmword_258E958;
                                                  uint64_t v150 = unk_258E968;
                                                }
                                                char v151 = 5;
                                                sub_6192A4(&__p, (uint64_t)&__dst, 2uLL);
                                                sub_614DAC((uint64_t *)a1, (uint64_t)v145, (uint64_t)&v138, (uint64_t)v141, 13, (uint64_t *)&__p);
                                                std::string::size_type v130 = __p.__r_.__value_.__r.__words[0];
                                                if (__p.__r_.__value_.__r.__words[0])
                                                {
                                                  std::string::size_type size = __p.__r_.__value_.__l.__size_;
                                                  v132 = (void *)__p.__r_.__value_.__r.__words[0];
                                                  if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
                                                  {
                                                    do
                                                    {
                                                      if (*(char *)(size - 9) < 0) {
                                                        operator delete(*(void **)(size - 32));
                                                      }
                                                      size -= 32;
                                                    }
                                                    while (size != v130);
                                                    v132 = (void *)__p.__r_.__value_.__r.__words[0];
                                                  }
                                                  __p.__r_.__value_.__l.__size_ = v130;
                                                  operator delete(v132);
                                                }
                                                if (SHIBYTE(v150) < 0)
                                                {
                                                  operator delete((void *)v149);
                                                  uint64_t v89 = (uint64_t)v136;
                                                  if ((SBYTE7(v148) & 0x80000000) == 0)
                                                  {
LABEL_289:
                                                    if ((SHIBYTE(v140) & 0x80000000) == 0) {
                                                      goto LABEL_290;
                                                    }
LABEL_296:
                                                    operator delete(v138);
                                                    goto LABEL_290;
                                                  }
                                                }
                                                else
                                                {
                                                  uint64_t v89 = (uint64_t)v136;
                                                  if ((SBYTE7(v148) & 0x80000000) == 0) {
                                                    goto LABEL_289;
                                                  }
                                                }
                                                operator delete((void *)__dst);
                                                if ((SHIBYTE(v140) & 0x80000000) == 0) {
                                                  goto LABEL_290;
                                                }
                                                goto LABEL_296;
                                              }
                                            }
                                            else
                                            {
                                              size_t v139 = 0;
                                              unint64_t v140 = 0;
                                              long long v138 = 0;
                                              unint64_t v122 = (char *)&v138;
                                              HIBYTE(v140) = v120 + v118;
                                              if (!v118) {
                                                goto LABEL_260;
                                              }
                                            }
                                            if (v117 >= 0) {
                                              uint64_t v123 = &qword_258ECB8;
                                            }
                                            else {
                                              uint64_t v123 = (uint64_t *)qword_258ECB8;
                                            }
                                            memmove(v122, v123, v118);
                                            goto LABEL_260;
                                          }
                                        }
                                        else
                                        {
                                          *(void *)&long long v148 = 0;
                                          long long __dst = 0uLL;
                                          p_dst = &__dst;
                                          BYTE7(v148) = v111 + v109;
                                          if (!v109) {
                                            goto LABEL_240;
                                          }
                                        }
                                        if (v108 >= 0) {
                                          unsigned __int8 v114 = &qword_258ECA0;
                                        }
                                        else {
                                          unsigned __int8 v114 = (uint64_t *)qword_258ECA0;
                                        }
                                        memmove(p_dst, v114, v109);
                                        goto LABEL_240;
                                      }
                                    }
                                    else
                                    {
                                      *(void *)&long long v148 = 0;
                                      long long __dst = 0uLL;
                                      int v85 = &__dst;
                                      BYTE7(v148) = v83 + v81;
                                      if (!v81) {
                                        goto LABEL_182;
                                      }
                                    }
                                    if (v80 >= 0) {
                                      long long v86 = &qword_258EC88;
                                    }
                                    else {
                                      long long v86 = (uint64_t *)qword_258EC88;
                                    }
                                    memmove(v85, v86, v81);
                                    goto LABEL_182;
                                  }
                                }
                                else
                                {
                                  *(void *)&long long v148 = 0;
                                  long long __dst = 0uLL;
                                  unint64_t v76 = &__dst;
                                  BYTE7(v148) = v74 + v72;
                                  if (!v72) {
                                    goto LABEL_162;
                                  }
                                }
                                if (v71 >= 0) {
                                  uint64_t v77 = &qword_258EC70;
                                }
                                else {
                                  uint64_t v77 = (uint64_t *)qword_258EC70;
                                }
                                memmove(v76, v77, v72);
                                goto LABEL_162;
                              }
                            }
                            else
                            {
                              *(void *)&long long v148 = 0;
                              long long __dst = 0uLL;
                              int v67 = &__dst;
                              BYTE7(v148) = v65 + v63;
                              if (!v63) {
                                goto LABEL_142;
                              }
                            }
                            if (v62 >= 0) {
                              uint64_t v68 = &qword_258EC28;
                            }
                            else {
                              uint64_t v68 = (uint64_t *)qword_258EC28;
                            }
                            memmove(v67, v68, v63);
                            goto LABEL_142;
                          }
                        }
                        else
                        {
                          *(void *)&long long v148 = 0;
                          long long __dst = 0uLL;
                          unsigned int v58 = &__dst;
                          BYTE7(v148) = v56 + v54;
                          if (!v54) {
                            goto LABEL_122;
                          }
                        }
                        if (v53 >= 0) {
                          char v59 = &qword_258EC40;
                        }
                        else {
                          char v59 = (uint64_t *)qword_258EC40;
                        }
                        memmove(v58, v59, v54);
                        goto LABEL_122;
                      }
                    }
                    else
                    {
                      *(void *)&long long v148 = 0;
                      long long __dst = 0uLL;
                      int64_t v49 = &__dst;
                      BYTE7(v148) = v47 + v45;
                      if (!v45) {
                        goto LABEL_102;
                      }
                    }
                    if (v44 >= 0) {
                      int v50 = &qword_258EC58;
                    }
                    else {
                      int v50 = (uint64_t *)qword_258EC58;
                    }
                    memmove(v49, v50, v45);
                    goto LABEL_102;
                  }
                }
                else
                {
                  *(void *)&long long v148 = 0;
                  long long __dst = 0uLL;
                  std::string::size_type v40 = &__dst;
                  BYTE7(v148) = v38 + v36;
                  if (!v36) {
                    goto LABEL_82;
                  }
                }
                if (v35 >= 0) {
                  int64_t v41 = &qword_258EC10;
                }
                else {
                  int64_t v41 = (uint64_t *)qword_258EC10;
                }
                memmove(v40, v41, v36);
                goto LABEL_82;
              }
            }
            else
            {
              *(void *)&long long v148 = 0;
              long long __dst = 0uLL;
              uint64_t v31 = &__dst;
              BYTE7(v148) = v29 + v27;
              if (!v27) {
                goto LABEL_62;
              }
            }
            if (v26 >= 0) {
              long long v32 = &qword_258EBE0;
            }
            else {
              long long v32 = (uint64_t *)qword_258EBE0;
            }
            memmove(v31, v32, v27);
            goto LABEL_62;
          }
        }
        else
        {
          *(void *)&long long v148 = 0;
          long long __dst = 0uLL;
          uint64_t v22 = &__dst;
          BYTE7(v148) = v20 + v18;
          if (!v18) {
            goto LABEL_42;
          }
        }
        if (v17 >= 0) {
          int64_t v23 = &qword_258EBF8;
        }
        else {
          int64_t v23 = (uint64_t *)qword_258EBF8;
        }
        memmove(v22, v23, v18);
        goto LABEL_42;
      }
    }
    else
    {
      *(void *)&long long v148 = 0;
      long long __dst = 0uLL;
      unint64_t v13 = &__dst;
      BYTE7(v148) = v11 + v9;
      if (!v9) {
        goto LABEL_22;
      }
    }
    if (v8 >= 0) {
      long long v14 = &qword_258EBC8;
    }
    else {
      long long v14 = (uint64_t *)qword_258EBC8;
    }
    memmove(v13, v14, v9);
    goto LABEL_22;
  }

  sub_614C7C((uint64_t *)a1, a2, a3);
}

void sub_614AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43)
{
  if (*(char *)(v44 - 153) < 0) {
    operator delete(*(void **)(v43 + 336));
  }
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_4DC6B8((uint64_t)&a23);
  sub_4F31D0(&a43);
  sub_4D4880((void **)(v44 - 248));
  sub_4D4B58(a9);
  _Unwind_Resume(a1);
}

void sub_614BEC()
{
}

void sub_614BF4()
{
}

void sub_614BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_14A84((uint64_t)&a35);
  sub_4D4880((void **)(v35 - 248));
  sub_4D4B58(a9);
  _Unwind_Resume(a1);
}

void sub_614C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_614C34()
{
}

void sub_614C3C()
{
}

void sub_614C44()
{
}

void sub_614C4C()
{
}

void sub_614C54()
{
}

void sub_614C5C()
{
}

void sub_614C64()
{
}

void sub_614C6C()
{
}

void sub_614C74()
{
}

void sub_614C7C(uint64_t *a1@<X0>, void *a2@<X1>, char **a3@<X8>)
{
  sub_5F3B34((uint64_t)a3);
  uint64_t v6 = sub_638F20((uint64_t)a2);
  sub_60EBA4(a1, v6, 0, (uint64_t)&__p);
  int v7 = (void **)__p;
  int v8 = v13;
  if (__p != v13)
  {
    do
    {
      sub_5F41E8((uint64_t)a3, (uint64_t)v7);
      size_t v9 = (void *)sub_638F70((uint64_t)a2);
      sub_611CA8((uint64_t)a1, a2, v9, a3);
      v7 += 3;
    }
    while (v7 != v8);
    int v7 = (void **)__p;
  }
  if (v7)
  {
    int v10 = v13;
    size_t v11 = v7;
    if (v13 != v7)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v7);
      size_t v11 = __p;
    }
    unint64_t v13 = v7;
    operator delete(v11);
  }
}

void sub_614D68(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_614D7C(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_614D90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1A668((void **)va);
  sub_4D4B58(v2);
  _Unwind_Resume(a1);
}

void sub_614DAC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6)
{
  uint64_t v11 = sub_5231C(a2);
  if (*a1)
  {
    unint64_t v12 = (std::string *)sub_8D7730(*a1, a3);
    if (SHIBYTE(v12->__r_.__value_.__r.__words[2]) < 0)
    {
      unint64_t v12 = (std::string *)sub_4200(&__p, v12->__r_.__value_.__l.__data_, v12->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v13;
    }
    sub_60E630(v12, v11, &__p);
  }
  else
  {
    memset(&__p, 0, sizeof(__p));
  }
  sub_614FE4(a4, (uint64_t)&__p, a5, a6, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_614E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_614EB4(uint64_t *a1@<X0>, void *a2@<X1>, char **a3@<X8>)
{
  sub_5F3B34((uint64_t)a3);
  uint64_t v6 = sub_638F20((uint64_t)a2);
  sub_60EBA4(a1, v6, 0, (uint64_t)&__p);
  int v7 = (void **)__p;
  int v8 = v13;
  if (__p != v13)
  {
    do
    {
      sub_5F41E8((uint64_t)a3, (uint64_t)v7);
      size_t v9 = (void *)sub_638F70((uint64_t)a2);
      sub_611CA8((uint64_t)a1, a2, v9, a3);
      v7 += 3;
    }
    while (v7 != v8);
    int v7 = (void **)__p;
  }
  if (v7)
  {
    int v10 = v13;
    uint64_t v11 = v7;
    if (v13 != v7)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v7);
      uint64_t v11 = __p;
    }
    long long v13 = v7;
    operator delete(v11);
  }
}

void sub_614FA0(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_614FB4(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_614FC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1A668((void **)va);
  sub_4D4B58(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_614FE4(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, char a5)
{
  int v15 = a3;
  sub_5F3D48((uint64_t)v14, a2);
  v14[105] = a5;
  for (uint64_t i = *a4; i != a4[1]; i += 32)
  {
    if (*(char *)(i + 23) < 0)
    {
      if (*(void *)(i + 8))
      {
LABEL_8:
        sub_5F1DD0(__dst, (long long *)i, 16);
        operator new();
      }
    }
    else if (*(unsigned char *)(i + 23))
    {
      goto LABEL_8;
    }
  }
  size_t v9 = *(uint64_t **)(a1 + 128);
  if (!v9) {
    operator new();
  }
  unint64_t v10 = v9[1];
  if (v10 >= v9[2])
  {
    uint64_t v11 = sub_617E1C(v9, (uint64_t)v14, &v15);
  }
  else
  {
    sub_5F7F10(v9[1], (uint64_t)v14, v15);
    uint64_t v11 = v10 + 168;
    v9[1] = v10 + 168;
  }
  v9[1] = v11;
  return sub_4D4B58((uint64_t)v14);
}

void sub_615210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  *(void *)(v28 + 8) = v29;
  sub_4D4B58((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_61522C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_615240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_61525C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_615270(uint64_t a1, uint64_t a2, char **a3, uint64_t a4, int a5, uint64_t a6, char a7)
{
  if (*(char *)(a6 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a6, *(void *)(a6 + 8));
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)a6;
    uint64_t v23 = *(void *)(a6 + 16);
  }
  char v24 = a7;
  sub_6192A4(&v17, (uint64_t)__dst, 1uLL);
  uint64_t v13 = sub_5231C(a2);
  sub_6102F0(a1, a3, v13, 0, (uint64_t)__p);
  sub_614FE4(a4, (uint64_t)__p, a5, (uint64_t *)&v17, v21);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  long long v14 = (void **)v17;
  if (v17)
  {
    int v15 = v18;
    uint64_t v16 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v15 - 9) < 0) {
          operator delete(*(v15 - 4));
        }
        v15 -= 4;
      }
      while (v15 != v14);
      uint64_t v16 = v17;
    }
    size_t v18 = v14;
    operator delete(v16);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_6153CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_3D4D90(&a10);
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

void sub_615410(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  sub_6105EC(a1, a2, (uint64_t)&v40);
  sub_615F8C((char **)a4, (v41 - v40) >> 5);
  int v8 = v40;
  size_t v9 = v41;
  if (v40 != v41)
  {
    do
    {
      sub_5F3B34((uint64_t)&v25);
      sub_6FC2EC(v8, (uint64_t)__p);
      sub_5F41E8((uint64_t)&v25, (uint64_t)__p);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v14 = sub_637DA8(a2);
      if (v14)
      {
        uint64_t v14 = sub_638A18((uint64_t)a3);
        if ((v14 - 57) < 7 || (v14 - 53) <= 1) {
          v8[24] = 3;
        }
      }
      BYTE1(v34) = v8[24];
      sub_617010(v14, (char **)&v25);
      sub_61738C(v15, a3, (uint64_t *)&v25);
      sub_6176A4(v16, (uint64_t)a3, (uint64_t *)&v25);
      sub_6178A0(v17, (uint64_t)a3, (uint64_t)&v25);
      if (sub_637DA8(a2))
      {
        int v18 = sub_638AD8((uint64_t)a3);
        if (sub_637DC8(a2))
        {
          sub_5F1DD0((char *)__p, (long long *)&unk_258E9E8, 17);
          operator new();
        }
        if (sub_637DD0(a2))
        {
          sub_5F1DD0((char *)__p, &xmmword_258EA00, 17);
          int v24 = v18;
          operator new();
        }
        sub_616130(a1, (uint64_t)__p);
        sub_5F70C8((uint64_t)&v25, (uint64_t)__p);
      }
      unint64_t v19 = *(void *)(a4 + 8);
      if (v19 < *(void *)(a4 + 16))
      {
        *(void *)(v19 + 16) = 0;
        *(void *)(v19 + 24) = 0;
        *(void *)unint64_t v19 = 0;
        *(void *)(v19 + 8) = 0;
        *(_OWORD *)unint64_t v19 = v25;
        *(void *)(v19 + 16) = v26;
        long long v25 = 0uLL;
        *(void *)(v19 + 32) = 0;
        *(void *)(v19 + 40) = 0;
        *(_OWORD *)(v19 + 24) = v27;
        long long v27 = 0uLL;
        *(void *)(v19 + 40) = v28;
        *(void *)(v19 + 48) = 0;
        uint64_t v28 = 0;
        *(void *)(v19 + 56) = 0;
        *(void *)(v19 + 64) = 0;
        *(_OWORD *)(v19 + 48) = v29;
        long long v29 = 0uLL;
        *(void *)(v19 + 64) = v30;
        *(void *)(v19 + 72) = 0;
        uint64_t v30 = 0;
        *(void *)(v19 + 80) = 0;
        *(void *)(v19 + 88) = 0;
        *(_OWORD *)(v19 + 72) = v31;
        *(void *)(v19 + 88) = v32;
        long long v31 = 0uLL;
        uint64_t v32 = 0;
        uint64_t v10 = v33;
        uint64_t v26 = 0;
        uint64_t v33 = 0;
        *(void *)(v19 + 96) = v10;
        LODWORD(v10) = v34;
        *(unsigned char *)(v19 + 108) = v35;
        *(_DWORD *)(v19 + 104) = v10;
        long long v11 = v36;
        *(void *)(v19 + 128) = v37;
        *(_OWORD *)(v19 + 112) = v11;
        uint64_t v37 = 0;
        long long v36 = 0uLL;
        long long v12 = v38;
        *(void *)(v19 + 152) = v39;
        *(_OWORD *)(v19 + 136) = v12;
        uint64_t v39 = 0;
        long long v38 = 0uLL;
        uint64_t v13 = (char *)(v19 + 160);
      }
      else
      {
        uint64_t v13 = sub_618DEC((void **)a4, (uint64_t)&v25);
      }
      *(void *)(a4 + 8) = v13;
      sub_4D4B58((uint64_t)&v25);
      v8 += 32;
    }
    while (v8 != v9);
    int v8 = v40;
  }
  if (v8)
  {
    char v20 = v41;
    char v21 = v8;
    if (v41 != v8)
    {
      do
      {
        if (*(v20 - 9) < 0) {
          operator delete(*((void **)v20 - 4));
        }
        v20 -= 32;
      }
      while (v20 != v8);
      char v21 = v40;
    }
    int64_t v41 = v8;
    operator delete(v21);
  }
}

void sub_615E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,char a44)
{
  sub_3D4D90((void **)(v45 - 232));
  sub_59213C(v44);
  _Unwind_Resume(a1);
}

void sub_615F8C(char **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 5) >= a2) {
    return;
  }
  if (a2 >= 0x19999999999999ALL) {
    sub_2E00();
  }
  uint64_t v4 = a1[1];
  uint64_t v5 = 160 * a2;
  uint64_t v6 = (char *)operator new(160 * a2);
  int v7 = &v6[v5];
  int v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_10;
  }
  size_t v9 = &v6[v4 - v2];
  do
  {
    long long v10 = *((_OWORD *)v4 - 10);
    v4 -= 160;
    *((_OWORD *)v9 - 10) = v10;
    v9 -= 160;
    *((void *)v9 + 2) = *((void *)v4 + 2);
    *((void *)v4 + 2) = 0;
    *(_OWORD *)uint64_t v4 = 0uLL;
    *(_OWORD *)(v9 + 24) = *(_OWORD *)(v4 + 24);
    *((void *)v9 + 5) = *((void *)v4 + 5);
    *((void *)v4 + 5) = 0;
    *(_OWORD *)(v4 + 24) = 0uLL;
    *((_OWORD *)v9 + 3) = *((_OWORD *)v4 + 3);
    *((void *)v9 + 8) = *((void *)v4 + 8);
    *((void *)v4 + 8) = 0;
    *((_OWORD *)v4 + 3) = 0uLL;
    *(_OWORD *)(v9 + 72) = *(_OWORD *)(v4 + 72);
    *((void *)v9 + 11) = *((void *)v4 + 11);
    *(_OWORD *)(v4 + 72) = 0uLL;
    uint64_t v11 = *((void *)v4 + 12);
    *(_OWORD *)(v4 + 88) = 0uLL;
    *((void *)v9 + 12) = v11;
    LODWORD(v11) = *((_DWORD *)v4 + 26);
    v9[108] = v4[108];
    *((_DWORD *)v9 + 26) = v11;
    long long v12 = *((_OWORD *)v4 + 7);
    *((void *)v9 + 16) = *((void *)v4 + 16);
    *((_OWORD *)v9 + 7) = v12;
    *((void *)v4 + 15) = 0;
    *((void *)v4 + 16) = 0;
    long long v13 = *(_OWORD *)(v4 + 136);
    uint64_t v14 = *((void *)v4 + 19);
    *((void *)v4 + 14) = 0;
    *((void *)v9 + 19) = v14;
    *(_OWORD *)(v9 + 136) = v13;
    *((void *)v4 + 18) = 0;
    *((void *)v4 + 19) = 0;
    *((void *)v4 + 17) = 0;
  }
  while (v4 != v2);
  uint64_t v15 = *a1;
  uint64_t v2 = a1[1];
  *a1 = v9;
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v15)
  {
    do
    {
      v2 -= 160;
      sub_4D4B58((uint64_t)v2);
    }
    while (v2 != v15);
    uint64_t v2 = v15;
  }
  if (v2)
  {
LABEL_10:
    operator delete(v2);
  }
}

void sub_616130(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_6352AC((uint64_t)&v32, (uint64_t)&qword_258DDA0);
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  sub_6370D4(&v27, &v32, 1, &v25);
  uint64_t v4 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  sub_6105EC(a1, (uint64_t)&v27, (uint64_t)&v23);
  sub_5F3B34(a2);
  sub_6FC2EC((char *)v23, (uint64_t)__p);
  sub_5F41E8(a2, (uint64_t)__p);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a2 + 105) = 3;
  uint64_t v5 = (void **)v23;
  if (v23)
  {
    uint64_t v6 = v24;
    int v7 = v23;
    if (v24 != v23)
    {
      do
      {
        if (*((char *)v6 - 9) < 0) {
          operator delete(*(v6 - 4));
        }
        v6 -= 4;
      }
      while (v6 != v5);
      int v7 = v23;
    }
    int v24 = v5;
    operator delete(v7);
  }
  int v8 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  size_t v9 = v30;
  if (v30)
  {
    do
    {
      long long v10 = (void *)*v9;
      sub_4F4B48((uint64_t)(v9 + 2));
      operator delete(v9);
      size_t v9 = v10;
    }
    while (v10);
  }
  uint64_t v11 = v29;
  long long v29 = 0;
  if (v11) {
    operator delete(v11);
  }
  long long v12 = (void **)v27;
  if (v27)
  {
    long long v13 = v28;
    uint64_t v14 = v27;
    if (v28 != v27)
    {
      do
      {
        if (*((char *)v13 - 1) < 0) {
          operator delete(*(v13 - 3));
        }
        v13 -= 3;
      }
      while (v13 != v12);
      uint64_t v14 = v27;
    }
    uint64_t v28 = v12;
    operator delete(v14);
  }
  uint64_t v15 = v35;
  if (v35)
  {
    do
    {
      uint64_t v16 = (void *)*v15;
      sub_4F4B48((uint64_t)(v15 + 2));
      operator delete(v15);
      uint64_t v15 = v16;
    }
    while (v16);
  }
  uint64_t v17 = v34;
  int v34 = 0;
  if (v17) {
    operator delete(v17);
  }
  int v18 = v32;
  if (v32)
  {
    unint64_t v19 = v33;
    char v20 = v32;
    if (v33 != v32)
    {
      do
      {
        if (*((char *)v19 - 1) < 0) {
          operator delete(*(v19 - 3));
        }
        v19 -= 3;
      }
      while (v19 != v18);
      char v20 = v32;
    }
    uint64_t v33 = v18;
    operator delete(v20);
  }
}

void sub_6163A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_4D4B58(v20);
  sub_3D4D90(&a15);
  sub_4F31D0(&a20);
  sub_4D4880((void **)(v21 - 104));
  _Unwind_Resume(a1);
}

void sub_6163F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)(v7 - 104));
  _Unwind_Resume(a1);
}

void sub_616414(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v6 = (uint64_t *)sub_68EE4((uint64_t)a2);
  sub_615F8C((char **)a3, 0x4EC4EC4EC4EC4EC5 * ((v6[1] - *v6) >> 3));
  uint64_t v7 = *v6;
  for (uint64_t i = v6[1]; v7 != i; v7 += 104)
  {
    sub_615410(a1, v7, a2, (uint64_t)&__p);
    sub_6193D0((uint64_t *)a3, *(void *)(a3 + 8), (uint64_t)__p, (uint64_t)v13, 0xCCCCCCCCCCCCCCCDLL * ((v13 - (unsigned char *)__p) >> 5));
    size_t v9 = __p;
    if (__p)
    {
      long long v10 = v13;
      uint64_t v11 = __p;
      if (v13 != __p)
      {
        do
          long long v10 = (unsigned char *)sub_4D4B58((uint64_t)(v10 - 160));
        while (v10 != v9);
        uint64_t v11 = __p;
      }
      long long v13 = v9;
      operator delete(v11);
    }
  }
}

void sub_616528(_Unwind_Exception *a1)
{
  sub_59213C(v1);
  _Unwind_Resume(a1);
}

void sub_61653C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_59213C((void **)va);
  sub_59213C(v2);
  _Unwind_Resume(a1);
}

void sub_616558(_Unwind_Exception *a1)
{
  sub_59213C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_61656C(uint64_t *a1, void *a2)
{
  sub_6138F8((uint64_t)a1, a2, v5);
  sub_638E6C((uint64_t)a2, (uint64_t)v5);
  sub_4D4B58((uint64_t)v5);
  sub_613360(a1, (uint64_t)a2, (char ***)v5);
  sub_638460(a2, (uint64_t)v5);
  return sub_4D4B58((uint64_t)v5);
}

void sub_6165D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_6165EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_616600(uint64_t *a1, void *a2)
{
  sub_614C7C(a1, a2, (char **)__p);
  sub_638E6C((uint64_t)a2, (uint64_t)__p);
  sub_4D4B58((uint64_t)__p);
  sub_612684((uint64_t)a1, a2, (uint64_t *)__p);
  sub_6385B0(a2, __p);
  unint64_t v4 = __p[0].n128_u64[0];
  if (__p[0].n128_u64[0])
  {
    uint64_t v5 = __p[0].n128_i64[1];
    uint64_t v6 = (void *)__p[0].n128_u64[0];
    if (__p[0].n128_u64[1] != __p[0].n128_u64[0])
    {
      do
        uint64_t v5 = sub_4D4B58(v5 - 160);
      while (v5 != v4);
      uint64_t v6 = (void *)__p[0].n128_u64[0];
    }
    __p[0].n128_u64[1] = v4;
    operator delete(v6);
  }
}

void sub_61669C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p)
  {
    sub_20AA314((uint64_t)&__p, __p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_6166CC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  if (*(void **)a2 != v3)
  {
    unint64_t v4 = (uint64_t *)result;
    do
    {
      sub_614EB4(v4, v2, v5);
      sub_638E6C((uint64_t)v2, (uint64_t)v5);
      sub_4D4B58((uint64_t)v5);
      sub_612850(v4, v2, (uint64_t)v5);
      sub_638460(v2, (uint64_t)v5);
      uint64_t result = sub_4D4B58((uint64_t)v5);
      v2 += 102;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_61675C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_616770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_616784(uint64_t a1, void *a2)
{
  sub_612018((uint64_t *)a1, a2, (uint64_t *)&__p);
  sub_6385B0(a2, (__n128 *)&__p);
  unint64_t v4 = __p;
  if (__p)
  {
    uint64_t v5 = v20[0];
    uint64_t v6 = __p;
    if (v20[0] != __p)
    {
      do
        uint64_t v5 = (void *)sub_4D4B58((uint64_t)v5 - 160);
      while (v5 != v4);
      uint64_t v6 = __p;
    }
    v20[0] = v4;
    operator delete(v6);
  }
  if (!sub_638B54((uint64_t)a2)) {
    goto LABEL_20;
  }
  uint64_t v7 = (long long **)sub_7C4994((uint64_t)a2);
  LODWORD(__p) = -1;
  *(_OWORD *)uint64_t v20 = 0u;
  *(_OWORD *)uint64_t v21 = 0u;
  long long v22 = 0u;
  int v8 = (void *)nullsub_1(v7);
  if (*v8 != v8[1])
  {
    sub_635CD0(v7, (uint64_t)v23);
    uint64_t v9 = sub_5231C((uint64_t)v7);
    if (*(void *)a1)
    {
      long long v10 = (std::string *)sub_8D7730(*(void *)a1, (uint64_t)v23);
      if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0)
      {
        long long v10 = (std::string *)sub_4200(&__dst, v10->__r_.__value_.__l.__data_, v10->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
        __dst.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v11;
      }
      sub_60E630(v10, v9, &__dst);
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
    }
    if (SHIBYTE(v21[0]) < 0) {
      operator delete(v20[0]);
    }
    *(_OWORD *)uint64_t v20 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
    v21[0] = (void *)__dst.__r_.__value_.__r.__words[2];
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
    __dst.__r_.__value_.__s.__data_[0] = 0;
    if (v24 < 0) {
      operator delete(v23[0]);
    }
  }
  LODWORD(__p) = *(_DWORD *)(a1 + 1544);
  sub_7C4624((uint64_t)a2, (uint64_t)&__p);
  if (SHIBYTE(v22) < 0)
  {
    operator delete(v21[1]);
    if (SHIBYTE(v21[0]) < 0) {
      goto LABEL_29;
    }
LABEL_20:
    long long v12 = (void *)sub_7C499C((uint64_t)a2);
    uint64_t result = sub_65FC8(v12);
    if (!result) {
      return result;
    }
    goto LABEL_21;
  }
  if ((SHIBYTE(v21[0]) & 0x80000000) == 0) {
    goto LABEL_20;
  }
LABEL_29:
  operator delete(v20[0]);
  int v18 = (void *)sub_7C499C((uint64_t)a2);
  uint64_t result = sub_65FC8(v18);
  if (!result) {
    return result;
  }
LABEL_21:
  uint64_t v14 = sub_7C499C((uint64_t)a2);
  sub_611D40((uint64_t *)a1, v14, a2, (uint64_t *)&__dst);
  sub_4F58AC((uint64_t)&__p, (uint64_t)__dst.__r_.__value_.__l.__data_);
  std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0])
  {
    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    uint64_t v17 = (void *)__dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
    {
      do
        std::string::size_type size = sub_4D4B58(size - 160);
      while (size != v15);
      uint64_t v17 = (void *)__dst.__r_.__value_.__r.__words[0];
    }
    __dst.__r_.__value_.__l.__size_ = v15;
    operator delete(v17);
  }
  sub_638E74((uint64_t)a2, (uint64_t)&__p);
  return sub_4D4B58((uint64_t)&__p);
}

void sub_6169CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 - 57) < 0)
  {
    operator delete(*(void **)(v2 - 80));
    if ((*(char *)(v2 - 81) & 0x80000000) == 0)
    {
LABEL_3:
      sub_4AA598((uint64_t)va);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v2 - 81) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v2 - 104));
  sub_4AA598((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_616A64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4AA598((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_616A78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_59213C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_616A8C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  if (*(void **)a2 != v3)
  {
    uint64_t v4 = result;
    do
    {
      uint64_t result = sub_616784(v4, v2);
      v2 += 135;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_616AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  if (*(void **)a2 != v3)
  {
    do
    {
      sub_616414(a1, v2, (uint64_t)&__p);
      sub_6385B0(v2, &__p);
      unint64_t v5 = __p.n128_u64[0];
      if (__p.n128_u64[0])
      {
        uint64_t v6 = __p.n128_i64[1];
        uint64_t v7 = (void *)__p.n128_u64[0];
        if (__p.n128_u64[1] != __p.n128_u64[0])
        {
          do
            uint64_t v6 = sub_4D4B58(v6 - 160);
          while (v6 != v5);
          uint64_t v7 = (void *)__p.n128_u64[0];
        }
        __p.n128_u64[1] = v5;
        operator delete(v7);
      }
      v2 += 51;
    }
    while (v2 != v3);
  }
}

void sub_616B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a10) {
    sub_20AA368((uint64_t)&a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_616BA0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  if (*(void **)a2 != v3)
  {
    uint64_t v4 = result;
    do
    {
      sub_612218(v4, v2, (uint64_t)v6);
      uint64_t v5 = (uint64_t)(v2 + 43);
      sub_52FD00(v5, (uint64_t)v6);
      uint64_t result = sub_4D4B58((uint64_t)v6);
      uint64_t v2 = (void *)(v5 + 320);
    }
    while (v2 != v3);
  }
  return result;
}

void sub_616C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_616C24(uint64_t a1, void *a2, char **a3)
{
  uint64_t v3 = *a3;
  if (*a3 == a3[1]) {
    return;
  }
  if (byte_258E69F < 0)
  {
    sub_4200(__dst, (void *)xmmword_258E688, *((unint64_t *)&xmmword_258E688 + 1));
  }
  else
  {
    *(_OWORD *)std::string __dst = xmmword_258E688;
    uint64_t v25 = unk_258E698;
  }
  if (byte_258E6CF < 0)
  {
    sub_4200(&v26, (void *)xmmword_258E6B8, *((unint64_t *)&xmmword_258E6B8 + 1));
  }
  else
  {
    long long v26 = xmmword_258E6B8;
    uint64_t v27 = unk_258E6C8;
  }
  if (byte_258E6B7 < 0)
  {
    sub_4200(&v28, (void *)xmmword_258E6A0, *((unint64_t *)&xmmword_258E6A0 + 1));
  }
  else
  {
    long long v28 = xmmword_258E6A0;
    uint64_t v29 = unk_258E6B0;
  }
  if (byte_258E6E7 < 0)
  {
    sub_4200(&__p, (void *)xmmword_258E6D0, *((unint64_t *)&xmmword_258E6D0 + 1));
  }
  else
  {
    long long __p = xmmword_258E6D0;
    uint64_t v31 = unk_258E6E0;
  }
  sub_28C774(&v22, (uint64_t)__dst, 4uLL);
  if (SHIBYTE(v31) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v29) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v27) & 0x80000000) == 0) {
        goto LABEL_17;
      }
      goto LABEL_23;
    }
  }
  else if ((SHIBYTE(v29) & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete((void *)v28);
  if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v25) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)v26);
  if ((SHIBYTE(v25) & 0x80000000) == 0)
  {
LABEL_18:
    uint64_t v5 = (long long *)v22;
    uint64_t v6 = v23;
    if (v22 == v23) {
      goto LABEL_19;
    }
    goto LABEL_27;
  }
LABEL_24:
  operator delete(__dst[0]);
  uint64_t v5 = (long long *)v22;
  uint64_t v6 = v23;
  if (v22 == v23)
  {
LABEL_19:
    if (!v5) {
      return;
    }
    goto LABEL_50;
  }
  do
  {
LABEL_27:
    if (v3[23] < 0)
    {
      int v8 = *(char **)v3;
      uint64_t v7 = *((void *)v3 + 1);
    }
    else
    {
      uint64_t v7 = v3[23];
      int v8 = v3;
    }
    int v9 = *((char *)v5 + 23);
    if (v9 >= 0) {
      long long v10 = (char *)v5;
    }
    else {
      long long v10 = *(char **)v5;
    }
    if (v9 >= 0) {
      int64_t v11 = *((unsigned __int8 *)v5 + 23);
    }
    else {
      int64_t v11 = *((void *)v5 + 1);
    }
    if (v11)
    {
      if (v7 >= v11)
      {
        long long v12 = &v8[v7];
        int v13 = *v10;
        uint64_t v14 = v8;
        do
        {
          uint64_t v15 = v7 - v11;
          if (v15 == -1) {
            break;
          }
          uint64_t v16 = (char *)memchr(v14, v13, v15 + 1);
          if (!v16) {
            break;
          }
          uint64_t v17 = v16;
          if (!memcmp(v16, v10, v11))
          {
            if (v17 == v12 || v17 - v8 == -1) {
              break;
            }
            goto LABEL_46;
          }
          uint64_t v14 = v17 + 1;
          uint64_t v7 = v12 - (v17 + 1);
        }
        while (v7 >= v11);
      }
    }
    else
    {
LABEL_46:
      if (sub_619B40(a2, (uint64_t)v5))
      {
        int v18 = sub_619B40(a2, (uint64_t)v5);
        if (v18) {
          sub_5F4120((uint64_t)a3, v5, *((_DWORD *)v18 + 26), (uint64_t)(v18 + 14));
        }
        sub_5AE8("unordered_map::at: key not found");
      }
    }
    uint64_t v5 = (long long *)((char *)v5 + 24);
  }
  while (v5 != v6);
  uint64_t v5 = (long long *)v22;
  if (v22)
  {
LABEL_50:
    unint64_t v19 = (void **)v23;
    uint64_t v20 = v5;
    if (v23 != v5)
    {
      do
      {
        if (*((char *)v19 - 1) < 0) {
          operator delete(*(v19 - 3));
        }
        v19 -= 3;
      }
      while (v19 != (void **)v5);
      uint64_t v20 = v22;
    }
    char v23 = v5;
    operator delete(v20);
  }
}

void sub_616F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_objecta, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
}

void sub_616FBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  while (1)
  {
    if (*((char *)v15 - 1) < 0) {
      operator delete(*(v15 - 3));
    }
    v15 -= 3;
    if (v15 == (void **)&a15) {
      JUMPOUT(0x616FB4);
    }
  }
}

void sub_616FE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_616FFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_617010(uint64_t a1, char **a2)
{
  uint64_t v2 = *a2;
  if (*a2 == a2[1]) {
    return;
  }
  if (byte_258E8AF < 0)
  {
    sub_4200(__dst, (void *)xmmword_258E898, *((unint64_t *)&xmmword_258E898 + 1));
  }
  else
  {
    *(_OWORD *)std::string __dst = xmmword_258E898;
    uint64_t v22 = unk_258E8A8;
  }
  if (byte_258E897 < 0)
  {
    sub_4200(&v23, (void *)xmmword_258E880, *((unint64_t *)&xmmword_258E880 + 1));
  }
  else
  {
    long long v23 = xmmword_258E880;
    uint64_t v24 = unk_258E890;
  }
  if (byte_258E7A7 < 0)
  {
    sub_4200(&__p, (void *)xmmword_258E790, *((unint64_t *)&xmmword_258E790 + 1));
  }
  else
  {
    long long __p = xmmword_258E790;
    uint64_t v26 = unk_258E7A0;
  }
  sub_28C774(&v19, (uint64_t)__dst, 3uLL);
  if (SHIBYTE(v26) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v24) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v22) & 0x80000000) == 0) {
        goto LABEL_14;
      }
      goto LABEL_19;
    }
  }
  else if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete((void *)v23);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
LABEL_14:
    uint64_t v4 = (long long *)v19;
    uint64_t v5 = v20;
    if (v19 == v20) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }
LABEL_19:
  operator delete(__dst[0]);
  uint64_t v4 = (long long *)v19;
  uint64_t v5 = v20;
  if (v19 == v20)
  {
LABEL_15:
    if (!v4) {
      return;
    }
    goto LABEL_43;
  }
  do
  {
LABEL_22:
    if (v2[23] < 0)
    {
      uint64_t v7 = *(char **)v2;
      uint64_t v6 = *((void *)v2 + 1);
    }
    else
    {
      uint64_t v6 = v2[23];
      uint64_t v7 = v2;
    }
    int v8 = *((char *)v4 + 23);
    if (v8 >= 0) {
      int v9 = (char *)v4;
    }
    else {
      int v9 = *(char **)v4;
    }
    if (v8 >= 0) {
      int64_t v10 = *((unsigned __int8 *)v4 + 23);
    }
    else {
      int64_t v10 = *((void *)v4 + 1);
    }
    if (!v10) {
      goto LABEL_41;
    }
    if (v6 >= v10)
    {
      int64_t v11 = &v7[v6];
      int v12 = *v9;
      int v13 = v7;
      while (1)
      {
        uint64_t v14 = v6 - v10;
        if (v14 == -1) {
          goto LABEL_21;
        }
        uint64_t v15 = (char *)memchr(v13, v12, v14 + 1);
        if (!v15) {
          goto LABEL_21;
        }
        uint64_t v16 = v15;
        if (!memcmp(v15, v9, v10)) {
          break;
        }
        int v13 = v16 + 1;
        uint64_t v6 = v11 - (v16 + 1);
        if (v6 < v10) {
          goto LABEL_21;
        }
      }
      if (v16 != v11 && v16 - v7 != -1)
      {
LABEL_41:
        HIBYTE(v22) = 0;
        LOBYTE(__dst[0]) = 0;
        sub_5F4198(a2, v4);
      }
    }
LABEL_21:
    uint64_t v4 = (long long *)((char *)v4 + 24);
  }
  while (v4 != v5);
  uint64_t v4 = (long long *)v19;
  if (v19)
  {
LABEL_43:
    uint64_t v17 = (void **)v20;
    int v18 = v4;
    if (v20 != v4)
    {
      do
      {
        if (*((char *)v17 - 1) < 0) {
          operator delete(*(v17 - 3));
        }
        v17 -= 3;
      }
      while (v17 != (void **)v4);
      int v18 = v19;
    }
    uint64_t v20 = v4;
    operator delete(v18);
  }
}

void sub_6172EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  while (1)
  {
    if (*((char *)v30 - 1) < 0) {
      operator delete(*(v30 - 3));
    }
    v30 -= 3;
    if (v30 == &a13) {
      _Unwind_Resume(exception_object);
    }
  }
}

void sub_61738C(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (*a3 != a3[1])
  {
    int v6 = *(char *)(v3 + 23);
    if (v6 < 0)
    {
      int v8 = *(char **)v3;
      uint64_t v7 = *(void *)(v3 + 8);
    }
    else
    {
      uint64_t v7 = *(unsigned __int8 *)(v3 + 23);
      int v8 = (char *)*a3;
    }
    if (byte_258E54F >= 0) {
      int v9 = &qword_258E538;
    }
    else {
      int v9 = (uint64_t *)qword_258E538;
    }
    if (byte_258E54F >= 0) {
      int64_t v10 = byte_258E54F;
    }
    else {
      int64_t v10 = *(void *)&word_258E540;
    }
    if (v10)
    {
      if (v7 >= v10)
      {
        int64_t v11 = &v8[v7];
        int v12 = *(char *)v9;
        int v13 = v8;
        do
        {
          uint64_t v14 = v7 - v10;
          if (v14 == -1) {
            break;
          }
          uint64_t v15 = (char *)memchr(v13, v12, v14 + 1);
          if (!v15) {
            break;
          }
          uint64_t v16 = v15;
          if (!memcmp(v15, v9, v10))
          {
            if (v16 == v11 || v16 - v8 == -1) {
              break;
            }
            goto LABEL_21;
          }
          int v13 = v16 + 1;
          uint64_t v7 = v11 - (v16 + 1);
        }
        while (v7 >= v10);
      }
    }
    else
    {
LABEL_21:
      uint64_t v28 = sub_638A90(a2);
      char v27 = 1;
      sub_5F6090(a3, (uint64_t)&qword_258E538, &v28, &v27);
      LOBYTE(v6) = *(unsigned char *)(v3 + 23);
    }
    if ((v6 & 0x80) != 0)
    {
      uint64_t v18 = v3;
      uint64_t v3 = *(void *)v3;
      int64_t v17 = *(void *)(v18 + 8);
    }
    else
    {
      int64_t v17 = v6;
    }
    if (byte_258E567 >= 0) {
      unint64_t v19 = &qword_258E550;
    }
    else {
      unint64_t v19 = (uint64_t *)qword_258E550;
    }
    if (byte_258E567 >= 0) {
      int64_t v20 = byte_258E567;
    }
    else {
      int64_t v20 = unk_258E558;
    }
    if (v20)
    {
      if (v17 >= v20)
      {
        uint64_t v21 = (char *)(v3 + v17);
        int v22 = *(char *)v19;
        long long v23 = (void *)v3;
        do
        {
          uint64_t v24 = v17 - v20;
          if (v24 == -1) {
            break;
          }
          uint64_t v25 = (char *)memchr(v23, v22, v24 + 1);
          if (!v25) {
            break;
          }
          uint64_t v26 = v25;
          if (!memcmp(v25, v19, v20))
          {
            if (v26 == v21 || &v26[-v3] == (char *)-1) {
              return;
            }
            goto LABEL_41;
          }
          long long v23 = v26 + 1;
          int64_t v17 = v21 - (v26 + 1);
        }
        while (v17 >= v20);
      }
    }
    else
    {
LABEL_41:
      uint64_t v28 = sub_638AC4((uint64_t)a2);
      char v27 = 1;
      sub_5F6090(a3, (uint64_t)&qword_258E550, &v28, &v27);
    }
  }
}

void sub_617580(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v4 = (void **)*a4;
  if (*a4 != a4[1])
  {
    if (*((char *)v4 + 23) < 0)
    {
      uint64_t v4 = (void **)*v4;
      uint64_t v8 = *(void *)(*a4 + 8);
    }
    else
    {
      uint64_t v8 = *((unsigned __int8 *)v4 + 23);
    }
    int v9 = *(char *)(a2 + 23);
    if (v9 >= 0) {
      int64_t v10 = (char *)a2;
    }
    else {
      int64_t v10 = *(char **)a2;
    }
    if (v9 >= 0) {
      int64_t v11 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      int64_t v11 = *(void *)(a2 + 8);
    }
    if (v11)
    {
      if (v8 >= v11)
      {
        int v12 = (char *)v4 + v8;
        int v13 = *v10;
        uint64_t v14 = v4;
        do
        {
          uint64_t v15 = v8 - v11;
          if (v15 == -1) {
            break;
          }
          uint64_t v16 = (char *)memchr(v14, v13, v15 + 1);
          if (!v16) {
            break;
          }
          int64_t v17 = v16;
          if (!memcmp(v16, v10, v11))
          {
            if (v17 == v12 || v17 - (char *)v4 == -1) {
              return;
            }
            goto LABEL_22;
          }
          uint64_t v14 = (void **)(v17 + 1);
          uint64_t v8 = v12 - (v17 + 1);
        }
        while (v8 >= v11);
      }
    }
    else
    {
LABEL_22:
      sub_5F66B8(a4, a2, a3);
    }
  }
}

void sub_6176A4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_638A68(a2);
  sub_617580(v5, (uint64_t)byte_258ED60, v5, a3);
  char v8 = 10;
  strcpy((char *)__p, "{Duration}");
  uint64_t v6 = sub_638A4C(a2);
  sub_617580(v6, (uint64_t)__p, v6, a3);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_617748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_617764(uint64_t a1, uint64_t a2, void ***a3)
{
  uint64_t v3 = *a3;
  if (*a3 != a3[1])
  {
    if (*((char *)v3 + 23) < 0)
    {
      uint64_t v3 = (void **)*v3;
      uint64_t v6 = (uint64_t)(*a3)[1];
    }
    else
    {
      uint64_t v6 = *((unsigned __int8 *)v3 + 23);
    }
    if (byte_258EDBF >= 0) {
      uint64_t v7 = &qword_258EDA8;
    }
    else {
      uint64_t v7 = (uint64_t *)qword_258EDA8;
    }
    if (byte_258EDBF >= 0) {
      int64_t v8 = byte_258EDBF;
    }
    else {
      int64_t v8 = unk_258EDB0;
    }
    if (v8)
    {
      if (v6 >= v8)
      {
        int v9 = (char *)v3 + v6;
        int v10 = *(char *)v7;
        int64_t v11 = v3;
        do
        {
          uint64_t v12 = v6 - v8;
          if (v12 == -1) {
            break;
          }
          int v13 = (char *)memchr(v11, v10, v12 + 1);
          if (!v13) {
            break;
          }
          uint64_t v14 = v13;
          if (!memcmp(v13, v7, v8))
          {
            if (v14 == v9 || v14 - (char *)v3 == -1) {
              return;
            }
            goto LABEL_22;
          }
          int64_t v11 = (void **)(v14 + 1);
          uint64_t v6 = v9 - (v14 + 1);
        }
        while (v6 >= v8);
      }
    }
    else
    {
LABEL_22:
      float v15 = (double)(int)sub_638A54(a2) / 1000000.0;
      sub_5F7298((uint64_t)a3, (uint64_t)&qword_258EDA8, v15);
    }
  }
}

char *sub_6178A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_68EA4(a2);
  if (*(void *)a3 != *(void *)(a3 + 8))
  {
    uint64_t v6 = v5;
    if (sub_5F7924((char ***)a3, byte_258ED30))
    {
      unsigned int v7 = sub_3FB38C(v6 + 8);
      sub_5F71A4(a3, (uint64_t)byte_258ED30, (float)v7);
    }
  }
  uint64_t result = (char *)sub_638A60(a2);
  if (*(void *)a3 != *(void *)(a3 + 8))
  {
    uint64_t v9 = (uint64_t)result;
    uint64_t result = (char *)sub_5F7924((char ***)a3, (char *)&qword_258ED48);
    if (result)
    {
      float v10 = (float)sub_3FB38C(v9);
      return sub_5F71A4(a3, (uint64_t)&qword_258ED48, v10);
    }
  }
  return result;
}

uint64_t *sub_617978(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_B128((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      float v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          uint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            float v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          float v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  uint64_t v26 = operator new(0xC0uLL);
  char v27 = v26;
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  *uint64_t v26 = 0;
  v26[1] = v11;
  uint64_t v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_4200((unsigned char *)v26 + 16, *(void **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    v26[4] = *((void *)v28 + 2);
    *((_OWORD *)v26 + 1) = v29;
  }
  sub_6F30A4((uint64_t)(v27 + 5));
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        uint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * v11);
        uint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      uint64_t v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *uint64_t v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  uint64_t v32 = *(void **)(*(void *)a1 + 8 * v4);
  uint64_t v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  *uint64_t v33 = *v32;
  *uint64_t v32 = v45[0];
LABEL_92:
  float v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_617DCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_595A98((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_617DE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_595A98((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_617DF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 39) < 0) {
    operator delete(*v3);
  }
  sub_595A98((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_617E1C(uint64_t *a1, uint64_t a2, int *a3)
{
  unint64_t v4 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x186186186186186) {
    sub_2E00();
  }
  if (0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3) > v5) {
    unint64_t v5 = 0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCF3CF3CF3CF3CF3DLL * ((a1[2] - *a1) >> 3) >= 0xC30C30C30C30C3) {
    unint64_t v8 = 0x186186186186186;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x186186186186186) {
      sub_188D718();
    }
    unint64_t v9 = (char *)operator new(168 * v8);
  }
  else
  {
    unint64_t v9 = 0;
  }
  uint64_t v21 = (uint64_t)&v9[168 * v4];
  uint64_t v22 = &v9[168 * v8];
  sub_5F7F10(v21, a2, *a3);
  uint64_t v10 = v21 + 168;
  unint64_t v12 = (char *)*a1;
  unint64_t v11 = (char *)a1[1];
  if (v11 == (char *)*a1)
  {
    *a1 = v21;
    a1[1] = v10;
    a1[2] = (uint64_t)v22;
  }
  else
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = v21 + v13;
      float v15 = &v11[v13];
      *(void *)(v14 - 152) = 0;
      *(_OWORD *)(v14 - 168) = 0uLL;
      *(_OWORD *)(v14 - 168) = *(_OWORD *)&v11[v13 - 168];
      *(void *)(v14 - 152) = *(void *)&v11[v13 - 152];
      *((void *)v15 - 19) = 0;
      *(_OWORD *)(v15 - 168) = 0uLL;
      *(void *)(v14 - 128) = 0;
      *(_OWORD *)(v14 - 144) = 0uLL;
      *(_OWORD *)(v14 - 144) = *(_OWORD *)&v11[v13 - 144];
      *(void *)(v14 - 128) = *(void *)&v11[v13 - 128];
      *((void *)v15 - 16) = 0;
      *((_OWORD *)v15 - 9) = 0uLL;
      *(void *)(v14 - 104) = 0;
      *(_OWORD *)(v14 - 120) = 0uLL;
      *(_OWORD *)(v14 - 120) = *(_OWORD *)&v11[v13 - 120];
      *(void *)(v14 - 104) = *(void *)&v11[v13 - 104];
      *((void *)v15 - 13) = 0;
      *(_OWORD *)(v15 - 120) = 0uLL;
      *(void *)(v14 - 80) = 0;
      *(_OWORD *)(v14 - 96) = 0uLL;
      *(_OWORD *)(v14 - 96) = *(_OWORD *)&v11[v13 - 96];
      *(void *)(v14 - 80) = *(void *)&v11[v13 - 80];
      uint64_t v16 = *(void *)&v11[v13 - 72];
      *((_OWORD *)v15 - 6) = 0uLL;
      *((_OWORD *)v15 - 5) = 0uLL;
      *(void *)(v14 - 72) = v16;
      LODWORD(v16) = *(_DWORD *)&v11[v13 - 64];
      *(unsigned char *)(v14 - 60) = v11[v13 - 60];
      *(_DWORD *)(v14 - 64) = v16;
      long long v17 = *(_OWORD *)&v11[v13 - 56];
      *(void *)(v14 - 40) = *(void *)&v11[v13 - 40];
      *(_OWORD *)(v14 - 56) = v17;
      *((void *)v15 - 6) = 0;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 7) = 0;
      long long v18 = *(_OWORD *)&v11[v13 - 32];
      *(void *)(v14 - 16) = *(void *)&v11[v13 - 16];
      *(_OWORD *)(v14 - 32) = v18;
      *((void *)v15 - 3) = 0;
      *((void *)v15 - 2) = 0;
      *((void *)v15 - 4) = 0;
      *(_DWORD *)(v14 - 8) = *(_DWORD *)&v11[v13 - 8];
      v13 -= 168;
    }
    while (&v11[v13] != v12);
    uint64_t v19 = (char *)*a1;
    unint64_t v11 = (char *)a1[1];
    *a1 = v21 + v13;
    a1[1] = v10;
    a1[2] = (uint64_t)v22;
    if (v11 != v19)
    {
      do
        unint64_t v11 = (char *)sub_4D4B58((uint64_t)(v11 - 168));
      while (v11 != v19);
      unint64_t v11 = v19;
    }
  }
  if (v11) {
    operator delete(v11);
  }
  return v21 + 168;
}

void sub_61807C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_55C01C((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_618090(char *__dst, long long *a2, long long *a3, long long *a4, char a5)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
    uint64_t v10 = __dst + 24;
    if ((*((char *)a3 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v9 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v9;
    uint64_t v10 = __dst + 24;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      long long v11 = *a3;
      *((void *)v10 + 2) = *((void *)a3 + 2);
      *(_OWORD *)uint64_t v10 = v11;
      goto LABEL_6;
    }
  }
  sub_4200(v10, *(void **)a3, *((void *)a3 + 1));
LABEL_6:
  unint64_t v12 = __dst + 48;
  if (*((char *)a4 + 23) < 0)
  {
    sub_4200(v12, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v13 = *a4;
    *((void *)__dst + 8) = *((void *)a4 + 2);
    *(_OWORD *)unint64_t v12 = v13;
  }
  __dst[72] = a5;
  return __dst;
}

void sub_61815C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0)
  {
    operator delete(*v2);
    if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_6181A8(void **a1, uint64_t a2)
{
  uint64_t v3 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v5 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v5 >> 4 > v4) {
    unint64_t v4 = v5 >> 4;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6) {
    unint64_t v7 = v4;
  }
  if (v7 >> 59) {
    sub_188D718();
  }
  uint64_t v9 = 32 * v7;
  uint64_t v10 = (char *)operator new(32 * v7);
  long long v11 = &v10[32 * v3];
  unint64_t v12 = &v10[v9];
  *(_OWORD *)long long v11 = *(_OWORD *)a2;
  *((void *)v11 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  v11[24] = *(unsigned char *)(a2 + 24);
  long long v13 = v11 + 32;
  uint64_t v14 = (char *)*a1;
  float v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    if (!v15) {
      return v13;
    }
    goto LABEL_16;
  }
  do
  {
    long long v16 = *((_OWORD *)v15 - 2);
    *((void *)v11 - 2) = *((void *)v15 - 2);
    *((_OWORD *)v11 - 2) = v16;
    *((void *)v15 - 3) = 0;
    *((void *)v15 - 2) = 0;
    *((void *)v15 - 4) = 0;
    *(v11 - 8) = *(v15 - 8);
    v11 -= 32;
    v15 -= 32;
  }
  while (v15 != v14);
  long long v17 = (char *)*a1;
  float v15 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v13;
  a1[2] = v12;
  if (v15 != v17)
  {
    do
    {
      if (*(v15 - 9) < 0) {
        operator delete(*((void **)v15 - 4));
      }
      v15 -= 32;
    }
    while (v15 != v17);
    float v15 = v17;
  }
  if (v15) {
LABEL_16:
  }
    operator delete(v15);
  return v13;
}

void sub_6182F8(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    BOOL v6 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_80:
      *(void *)uint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v31 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v31 = 1;
      }
      if (!(v31 >> 61))
      {
        unint64_t v32 = v31 >> 2;
        uint64_t v33 = 8 * v31;
        BOOL v34 = (char *)operator new(8 * v31);
        unint64_t v35 = &v34[8 * v32];
        unint64_t v36 = &v34[v33];
        int64_t v38 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            size_t v74 = &v34[8 * v32];
            uint8x8_t v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              uint64_t v75 = (v39 >> 3) + 1;
              uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              uint8x8_t v40 = &v35[v76];
              v7 += v76;
              uint64_t v77 = (long long *)(v6 + 3);
              unint64_t v78 = v74 + 16;
              uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *unint64_t v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            uint8x8_t v40 = &v34[8 * v32];
          }
          do
          {
            uint64_t v81 = *(void *)v7;
            v7 += 8;
            *(void *)uint8x8_t v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_78;
      }
LABEL_89:
      sub_188D718();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    float v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      unint64_t v7 = *(char **)(a1 + 8);
    }
    uint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_80;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      uint64_t v91 = operator new(0x1000uLL);
      sub_22368((char **)a1, &v91);
      return;
    }
    uint64_t v91 = operator new(0x1000uLL);
    sub_224F8((void **)a1, &v91);
    uint64_t v41 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v41 + 1);
    uint64_t v8 = *v41;
    *(void *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_80;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v42 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v42 = 1;
      }
      if (!(v42 >> 61))
      {
        unint64_t v43 = v42 >> 2;
        uint64_t v44 = 8 * v42;
        BOOL v34 = (char *)operator new(8 * v42);
        unint64_t v35 = &v34[8 * v43];
        unint64_t v36 = &v34[v44];
        int64_t v45 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            int v82 = &v34[8 * v43];
            size_t v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              uint64_t v83 = (v46 >> 3) + 1;
              uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              size_t v47 = &v35[v84];
              v7 += v84;
              int v85 = (long long *)(v41 + 3);
              long long v86 = v82 + 16;
              uint64_t v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *long long v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            size_t v47 = &v34[8 * v43];
          }
          do
          {
            uint64_t v89 = *(void *)v7;
            v7 += 8;
            *(void *)size_t v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_78:
        *(void *)a1 = v34;
        *(void *)(a1 + 8) = v35;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          uint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_80;
      }
      goto LABEL_89;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_89;
  }
  uint64_t v25 = (char *)operator new(8 * v24);
  uint64_t v26 = operator new(0x1000uLL);
  char v27 = &v25[8 * v21];
  uint64_t v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    uint64_t v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v20 >> 2;
      }
      if (v48 >> 61) {
        sub_188D718();
      }
      int64_t v49 = (char *)operator new(8 * v48);
      char v27 = &v49[8 * (v48 >> 2)];
      uint64_t v28 = &v49[8 * v48];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      uint64_t v25 = v49;
      *(void *)char v27 = v90;
      long long v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v30 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v30 = v21 + 1;
      }
      v27 -= 8 * (v30 >> 1);
      *(void *)char v27 = v26;
      long long v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    do
    {
LABEL_52:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27) {
            unint64_t v59 = 1;
          }
          else {
            unint64_t v59 = (v28 - v27) >> 2;
          }
          if (v59 >> 61) {
            sub_188D718();
          }
          uint64_t v60 = (char *)operator new(8 * v59);
          uint64_t v25 = v60;
          unint64_t v61 = (v59 + 3) >> 2;
          int v53 = &v60[8 * v61];
          int64_t v62 = v29 - v27;
          BOOL v37 = v29 == v27;
          long long v29 = v53;
          if (!v37)
          {
            long long v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v63 = v62 - 8;
            int v64 = &v60[8 * v61];
            size_t v65 = v27;
            if (v63 < 0x38) {
              goto LABEL_93;
            }
            uint64_t v66 = 8 * v61;
            int v64 = &v60[8 * v61];
            size_t v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20) {
              goto LABEL_93;
            }
            uint64_t v67 = (v63 >> 3) + 1;
            uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            int v64 = &v53[v68];
            size_t v65 = &v27[v68];
            uint64_t v69 = (long long *)(v27 + 16);
            char v70 = &v60[v66 + 16];
            uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)char v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              do
              {
                uint64_t v73 = *(void *)v65;
                v65 += 8;
                *(void *)int v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          uint64_t v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          uint64_t v55 = (v28 - v29) >> 3;
          if (v55 >= -1) {
            unint64_t v56 = v55 + 1;
          }
          else {
            unint64_t v56 = v55 + 2;
          }
          unint64_t v57 = &v29[8 * (v56 >> 1)];
          int v53 = &v57[-(v29 - v27)];
          size_t v58 = v29 - v27;
          BOOL v37 = v29 == v27;
          long long v29 = v57;
          if (!v37) {
            memmove(v53, v27, v58);
          }
          uint64_t v25 = v27;
        }
      }
      else
      {
        int v53 = v27;
      }
      uint64_t v54 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v53 - 1) = v54;
      int64_t v51 = v53 - 8;
      char v27 = v51;
    }
    while (v18 != *(void *)(a1 + 8));
    goto LABEL_46;
  }
  *(void *)char v27 = v26;
  long long v29 = v27 + 8;
  if (v18 != v19) {
    goto LABEL_52;
  }
LABEL_45:
  int64_t v51 = v27;
LABEL_46:
  int v52 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v51;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v52)
  {
    operator delete(v52);
  }
}

void sub_618868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_618884(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_618898(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_6188B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_6188C8(uint64_t a1, std::string *__str, std::string *a3, size_t __sz)
{
  BOOL v6 = __str;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(std::string **)a1;
  if (__sz <= (v8 - *(void *)a1) >> 5)
  {
    uint64_t v12 = *(std::string **)(a1 + 8);
    unint64_t v13 = ((char *)v12 - (char *)v9) >> 5;
    if (v13 >= __sz)
    {
      if (__str == a3)
      {
        uint64_t v20 = *(std::string **)a1;
      }
      else
      {
        uint64_t v20 = *(std::string **)a1;
        do
        {
          std::string::operator=(v9, v6);
          v9[1].__r_.__value_.__s.__data_[0] = v6[1].__r_.__value_.__s.__data_[0];
          uint64_t v20 = (std::string *)((char *)v20 + 32);
          BOOL v6 = (std::string *)((char *)v6 + 32);
          uint64_t v9 = (std::string *)((char *)v9 + 32);
        }
        while (v6 != a3);
        uint64_t v12 = *(std::string **)(a1 + 8);
      }
      while (v12 != v20)
      {
        if (v12[-1].__r_.__value_.__s.__data_[15] < 0) {
          operator delete((void *)v12[-2].__r_.__value_.__r.__words[2]);
        }
        uint64_t v12 = (std::string *)((char *)v12 - 32);
      }
      *(void *)(a1 + 8) = v20;
    }
    else
    {
      uint64_t v14 = (std::string *)((char *)__str + 32 * v13);
      if (v12 != v9)
      {
        do
        {
          std::string::operator=(v9, v6);
          v9[1].__r_.__value_.__s.__data_[0] = v6[1].__r_.__value_.__s.__data_[0];
          BOOL v6 = (std::string *)((char *)v6 + 32);
          uint64_t v9 = (std::string *)((char *)v9 + 32);
        }
        while (v6 != v14);
        uint64_t v9 = *(std::string **)(a1 + 8);
      }
      float v15 = v9;
      if (v14 != a3)
      {
        unint64_t v16 = 0;
        do
        {
          uint64_t v18 = (char *)v9 + v16;
          uint64_t v19 = (char *)v14 + v16;
          if (SHIBYTE(v14->__r_.__value_.__r.__words[v16 / 8 + 2]) < 0)
          {
            sub_4200(v18, *(void **)v19, *((void *)v19 + 1));
          }
          else
          {
            long long v17 = *(_OWORD *)v19;
            *((void *)v18 + 2) = *((void *)v19 + 2);
            *(_OWORD *)uint64_t v18 = v17;
          }
          v9[1].__r_.__value_.__s.__data_[v16] = v14[1].__r_.__value_.__s.__data_[v16];
          v16 += 32;
        }
        while ((std::string *)((char *)v14 + v16) != a3);
        float v15 = (std::string *)((char *)v9 + v16);
      }
      *(void *)(a1 + 8) = v15;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = *(std::string **)(a1 + 8);
      uint64_t v11 = *(std::string **)a1;
      if (v10 != v9)
      {
        do
        {
          if (v10[-1].__r_.__value_.__s.__data_[15] < 0) {
            operator delete((void *)v10[-2].__r_.__value_.__r.__words[2]);
          }
          uint64_t v10 = (std::string *)((char *)v10 - 32);
        }
        while (v10 != v9);
        uint64_t v11 = *(std::string **)a1;
      }
      *(void *)(a1 + 8) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz >> 59) {
      goto LABEL_46;
    }
    uint64_t v21 = v8 >> 4;
    if (v8 >> 4 <= __sz) {
      uint64_t v21 = __sz;
    }
    BOOL v22 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    unint64_t v23 = 0x7FFFFFFFFFFFFFFLL;
    if (!v22) {
      unint64_t v23 = v21;
    }
    if (v23 >> 59) {
LABEL_46:
    }
      sub_2E00();
    uint64_t v24 = 32 * v23;
    uint64_t v25 = operator new(32 * v23);
    *(void *)a1 = v25;
    *(void *)(a1 + 8) = v25;
    *(void *)(a1 + 16) = &v25[v24];
    if (v6 != a3)
    {
      unint64_t v26 = 0;
      do
      {
        char v27 = &v25[v26];
        uint64_t v28 = (char *)v6 + v26;
        if (SHIBYTE(v6->__r_.__value_.__r.__words[v26 / 8 + 2]) < 0)
        {
          sub_4200(v27, *(void **)v28, *((void *)v28 + 1));
        }
        else
        {
          *(_OWORD *)char v27 = *(_OWORD *)v28;
          *((void *)v27 + 2) = *((void *)v28 + 2);
        }
        v25[v26 + 24] = v6[1].__r_.__value_.__s.__data_[v26];
        v26 += 32;
      }
      while ((std::string *)((char *)v6 + v26) != a3);
      v25 += v26;
    }
    *(void *)(a1 + 8) = v25;
  }
}

uint64_t sub_618BC4(uint64_t *a1)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 5);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x199999999999999) {
    sub_2E00();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 5) > v3) {
    unint64_t v3 = 0x999999999999999ALL * ((a1[2] - *a1) >> 5);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 5) >= 0xCCCCCCCCCCCCCCLL) {
    unint64_t v4 = 0x199999999999999;
  }
  else {
    unint64_t v4 = v3;
  }
  if (v4)
  {
    if (v4 > 0x199999999999999) {
      sub_188D718();
    }
    uint64_t v5 = (char *)operator new(160 * v4);
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v17 = (uint64_t)&v5[160 * v2];
  uint64_t v18 = &v5[160 * v4];
  sub_5F3B34(v17);
  uint64_t v6 = v17;
  uint64_t v7 = v17 + 160;
  uint64_t v9 = (_OWORD *)*a1;
  uint64_t v8 = (_OWORD *)a1[1];
  if (v8 == (_OWORD *)*a1)
  {
    *a1 = v17;
    a1[1] = v7;
    a1[2] = (uint64_t)v18;
  }
  else
  {
    do
    {
      *(_OWORD *)(v6 - 160) = 0uLL;
      v6 -= 160;
      *(void *)(v6 + 16) = 0;
      long long v10 = *(v8 - 10);
      v8 -= 10;
      *(_OWORD *)uint64_t v6 = v10;
      *(void *)(v6 + 16) = *((void *)v8 + 2);
      *((void *)v8 + 2) = 0;
      _OWORD *v8 = 0uLL;
      *(void *)(v6 + 40) = 0;
      *(_OWORD *)(v6 + 24) = 0uLL;
      *(_OWORD *)(v6 + 24) = *(_OWORD *)((char *)v8 + 24);
      *(void *)(v6 + 40) = *((void *)v8 + 5);
      *((void *)v8 + 5) = 0;
      *(_OWORD *)((char *)v8 + 24) = 0uLL;
      *(void *)(v6 + 64) = 0;
      *(_OWORD *)(v6 + 48) = 0uLL;
      *(_OWORD *)(v6 + 48) = v8[3];
      *(void *)(v6 + 64) = *((void *)v8 + 8);
      *((void *)v8 + 8) = 0;
      v8[3] = 0uLL;
      *(void *)(v6 + 88) = 0;
      *(_OWORD *)(v6 + 72) = 0uLL;
      *(_OWORD *)(v6 + 72) = *(_OWORD *)((char *)v8 + 72);
      *(void *)(v6 + 88) = *((void *)v8 + 11);
      *(_OWORD *)((char *)v8 + 72) = 0uLL;
      uint64_t v11 = *((void *)v8 + 12);
      *(_OWORD *)((char *)v8 + 88) = 0uLL;
      *(void *)(v6 + 96) = v11;
      LODWORD(v11) = *((_DWORD *)v8 + 26);
      *(unsigned char *)(v6 + 108) = *((unsigned char *)v8 + 108);
      *(_DWORD *)(v6 + 104) = v11;
      long long v12 = v8[7];
      *(void *)(v6 + 128) = *((void *)v8 + 16);
      *(_OWORD *)(v6 + 112) = v12;
      *((void *)v8 + 15) = 0;
      *((void *)v8 + 16) = 0;
      long long v13 = *(_OWORD *)((char *)v8 + 136);
      uint64_t v14 = *((void *)v8 + 19);
      *((void *)v8 + 14) = 0;
      *(void *)(v6 + 152) = v14;
      *(_OWORD *)(v6 + 136) = v13;
      *((void *)v8 + 18) = 0;
      *((void *)v8 + 19) = 0;
      *((void *)v8 + 17) = 0;
    }
    while (v8 != v9);
    float v15 = (_OWORD *)*a1;
    uint64_t v8 = (_OWORD *)a1[1];
    *a1 = v6;
    a1[1] = v7;
    a1[2] = (uint64_t)v18;
    if (v8 != v15)
    {
      do
        uint64_t v8 = (_OWORD *)sub_4D4B58((uint64_t)(v8 - 10));
      while (v8 != v15);
      uint64_t v8 = v15;
    }
  }
  if (v8) {
    operator delete(v8);
  }
  return v17 + 160;
}

void sub_618DD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5B12D0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_618DEC(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x199999999999999) {
    sub_2E00();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) > v4) {
    unint64_t v4 = 0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) >= 0xCCCCCCCCCCCCCCLL) {
    unint64_t v6 = 0x199999999999999;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x199999999999999) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(160 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[160 * v3];
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
  uint64_t v9 = &v7[160 * v6];
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 24);
  *((void *)v8 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *((_OWORD *)v8 + 3) = *(_OWORD *)(a2 + 48);
  *((void *)v8 + 8) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *((void *)v8 + 10) = 0;
  *((void *)v8 + 11) = 0;
  *(_OWORD *)(v8 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v10 = *(void *)(a2 + 88);
  uint64_t v11 = *(void *)(a2 + 96);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *((void *)v8 + 11) = v10;
  *((void *)v8 + 12) = v11;
  LODWORD(v10) = *(_DWORD *)(a2 + 104);
  v8[108] = *(unsigned char *)(a2 + 108);
  *((_DWORD *)v8 + 26) = v10;
  long long v12 = *(_OWORD *)(a2 + 112);
  *((void *)v8 + 16) = *(void *)(a2 + 128);
  *((_OWORD *)v8 + 7) = v12;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  long long v13 = *(_OWORD *)(a2 + 136);
  *((void *)v8 + 19) = *(void *)(a2 + 152);
  *(_OWORD *)(v8 + 136) = v13;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  uint64_t v14 = v8 + 160;
  unint64_t v16 = (char *)*a1;
  float v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v8;
    a1[1] = v14;
    a1[2] = v9;
    if (!v15) {
      return v14;
    }
    goto LABEL_18;
  }
  uint64_t v17 = 0;
  do
  {
    uint64_t v18 = &v8[v17];
    uint64_t v19 = &v15[v17];
    *(_OWORD *)(v18 - 152) = 0uLL;
    *((_OWORD *)v18 - 10) = *(_OWORD *)&v15[v17 - 160];
    *((void *)v18 - 18) = *(void *)&v15[v17 - 144];
    *((void *)v19 - 18) = 0;
    *((_OWORD *)v19 - 10) = 0uLL;
    *((_OWORD *)v18 - 8) = 0uLL;
    *(_OWORD *)(v18 - 136) = *(_OWORD *)&v15[v17 - 136];
    *((void *)v18 - 15) = *(void *)&v15[v17 - 120];
    *((void *)v19 - 15) = 0;
    *(_OWORD *)(v19 - 136) = 0uLL;
    *(_OWORD *)(v18 - 104) = 0uLL;
    *((_OWORD *)v18 - 7) = *(_OWORD *)&v15[v17 - 112];
    *((void *)v18 - 12) = *(void *)&v15[v17 - 96];
    *((void *)v19 - 12) = 0;
    *((_OWORD *)v19 - 7) = 0uLL;
    *((_OWORD *)v18 - 5) = 0uLL;
    *(_OWORD *)(v18 - 88) = *(_OWORD *)&v15[v17 - 88];
    *((void *)v18 - 9) = *(void *)&v15[v17 - 72];
    *(_OWORD *)(v19 - 88) = 0uLL;
    uint64_t v20 = *(void *)&v15[v17 - 64];
    *(_OWORD *)(v19 - 72) = 0uLL;
    *((void *)v18 - 8) = v20;
    LODWORD(v20) = *(_DWORD *)&v15[v17 - 56];
    *(v18 - 52) = v15[v17 - 52];
    *((_DWORD *)v18 - 14) = v20;
    long long v21 = *(_OWORD *)&v15[v17 - 48];
    *((void *)v18 - 4) = *(void *)&v15[v17 - 32];
    *((_OWORD *)v18 - 3) = v21;
    *((void *)v19 - 5) = 0;
    *((void *)v19 - 4) = 0;
    *((void *)v19 - 6) = 0;
    long long v22 = *(_OWORD *)&v15[v17 - 24];
    *((void *)v18 - 1) = *(void *)&v15[v17 - 8];
    *(_OWORD *)(v18 - 24) = v22;
    *((void *)v19 - 2) = 0;
    *((void *)v19 - 1) = 0;
    *((void *)v19 - 3) = 0;
    v17 -= 160;
  }
  while (&v15[v17] != v16);
  unint64_t v23 = (char *)*a1;
  float v15 = (char *)a1[1];
  *a1 = &v8[v17];
  a1[1] = v14;
  a1[2] = v9;
  if (v15 != v23)
  {
    do
      float v15 = (char *)sub_4D4B58((uint64_t)(v15 - 160));
    while (v15 != v23);
    float v15 = v23;
  }
  if (v15) {
LABEL_18:
  }
    operator delete(v15);
  return v14;
}

uint64_t sub_619074(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x199999999999999) {
    sub_2E00();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 5);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 5) >= 0xCCCCCCCCCCCCCCLL) {
    unint64_t v6 = 0x199999999999999;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x199999999999999) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(160 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v19 = (uint64_t)&v7[160 * v3];
  uint64_t v20 = &v7[160 * v6];
  sub_4F58AC(v19, a2);
  uint64_t v8 = v19;
  uint64_t v9 = v19 + 160;
  uint64_t v11 = (_OWORD *)*a1;
  uint64_t v10 = (_OWORD *)a1[1];
  if (v10 == (_OWORD *)*a1)
  {
    *a1 = v19;
    a1[1] = v9;
    a1[2] = (uint64_t)v20;
  }
  else
  {
    do
    {
      *(_OWORD *)(v8 - 160) = 0uLL;
      v8 -= 160;
      *(void *)(v8 + 16) = 0;
      long long v12 = *(v10 - 10);
      v10 -= 10;
      *(_OWORD *)uint64_t v8 = v12;
      *(void *)(v8 + 16) = *((void *)v10 + 2);
      *((void *)v10 + 2) = 0;
      *uint64_t v10 = 0uLL;
      *(void *)(v8 + 40) = 0;
      *(_OWORD *)(v8 + 24) = 0uLL;
      *(_OWORD *)(v8 + 24) = *(_OWORD *)((char *)v10 + 24);
      *(void *)(v8 + 40) = *((void *)v10 + 5);
      *((void *)v10 + 5) = 0;
      *(_OWORD *)((char *)v10 + 24) = 0uLL;
      *(void *)(v8 + 64) = 0;
      *(_OWORD *)(v8 + 48) = 0uLL;
      *(_OWORD *)(v8 + 48) = v10[3];
      *(void *)(v8 + 64) = *((void *)v10 + 8);
      *((void *)v10 + 8) = 0;
      v10[3] = 0uLL;
      *(void *)(v8 + 88) = 0;
      *(_OWORD *)(v8 + 72) = 0uLL;
      *(_OWORD *)(v8 + 72) = *(_OWORD *)((char *)v10 + 72);
      *(void *)(v8 + 88) = *((void *)v10 + 11);
      *(_OWORD *)((char *)v10 + 72) = 0uLL;
      uint64_t v13 = *((void *)v10 + 12);
      *(_OWORD *)((char *)v10 + 88) = 0uLL;
      *(void *)(v8 + 96) = v13;
      LODWORD(v13) = *((_DWORD *)v10 + 26);
      *(unsigned char *)(v8 + 108) = *((unsigned char *)v10 + 108);
      *(_DWORD *)(v8 + 104) = v13;
      long long v14 = v10[7];
      *(void *)(v8 + 128) = *((void *)v10 + 16);
      *(_OWORD *)(v8 + 112) = v14;
      *((void *)v10 + 15) = 0;
      *((void *)v10 + 16) = 0;
      long long v15 = *(_OWORD *)((char *)v10 + 136);
      uint64_t v16 = *((void *)v10 + 19);
      *((void *)v10 + 14) = 0;
      *(void *)(v8 + 152) = v16;
      *(_OWORD *)(v8 + 136) = v15;
      *((void *)v10 + 18) = 0;
      *((void *)v10 + 19) = 0;
      *((void *)v10 + 17) = 0;
    }
    while (v10 != v11);
    uint64_t v17 = (_OWORD *)*a1;
    uint64_t v10 = (_OWORD *)a1[1];
    *a1 = v8;
    a1[1] = v9;
    a1[2] = (uint64_t)v20;
    if (v10 != v17)
    {
      do
        uint64_t v10 = (_OWORD *)sub_4D4B58((uint64_t)(v10 - 10));
      while (v10 != v17);
      uint64_t v10 = v17;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v19 + 160;
}

void sub_619290(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5B12D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_6192A4(void *a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 59) {
      sub_2E00();
    }
    uint64_t v5 = 32 * a3;
    unint64_t v6 = operator new(32 * a3);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      uint64_t v9 = &v6[v7];
      uint64_t v10 = (long long *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        sub_4200(v9, *(void **)v10, *((void *)v10 + 1));
      }
      else
      {
        long long v8 = *v10;
        *((void *)v9 + 2) = *((void *)v10 + 2);
        *(_OWORD *)uint64_t v9 = v8;
      }
      v6[v7 + 24] = *(unsigned char *)(a2 + v7 + 24);
      v7 += 32;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_619380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_619394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 32)
  {
    if (*(char *)(v10 + v11 - 9) < 0) {
      operator delete(*(void **)(v10 + v11 - 32));
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_3D68C4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_6193D0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *a1;
  uint64_t v6 = (a2 - *a1) / 160;
  uint64_t v7 = *a1 + 160 * v6;
  if (a5 >= 1)
  {
    uint64_t v11 = a1[2];
    unint64_t v12 = a1[1];
    if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v12) >> 5)) >= a5)
    {
      uint64_t v18 = v12 - v7;
      if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - v7) >> 5)) >= a5)
      {
        uint64_t v19 = a3 + 160 * a5;
      }
      else
      {
        uint64_t v19 = a3 + 32 * ((uint64_t)(v12 - v7) >> 5);
        if (v19 == a4)
        {
          a1[1] = v12;
          if (v18 < 1) {
            return v7;
          }
        }
        else
        {
          uint64_t v20 = a1[1];
          uint64_t v21 = a3 + 32 * ((uint64_t)(v12 - v7) >> 5);
          uint64_t v22 = v20;
          do
          {
            *(void *)(v22 + 16) = 0;
            *(_OWORD *)uint64_t v22 = 0uLL;
            *(_OWORD *)uint64_t v22 = *(_OWORD *)v21;
            *(void *)(v22 + 16) = *(void *)(v21 + 16);
            *(void *)(v21 + 16) = 0;
            *(_OWORD *)uint64_t v21 = 0uLL;
            *(void *)(v22 + 40) = 0;
            *(_OWORD *)(v22 + 24) = 0uLL;
            *(_OWORD *)(v22 + 24) = *(_OWORD *)(v21 + 24);
            *(void *)(v22 + 40) = *(void *)(v21 + 40);
            *(void *)(v21 + 40) = 0;
            *(_OWORD *)(v21 + 24) = 0uLL;
            *(void *)(v22 + 64) = 0;
            *(_OWORD *)(v22 + 48) = 0uLL;
            *(_OWORD *)(v22 + 48) = *(_OWORD *)(v21 + 48);
            *(void *)(v22 + 64) = *(void *)(v21 + 64);
            *(void *)(v21 + 64) = 0;
            *(_OWORD *)(v21 + 48) = 0uLL;
            *(void *)(v22 + 88) = 0;
            *(_OWORD *)(v22 + 72) = 0uLL;
            *(_OWORD *)(v22 + 72) = *(_OWORD *)(v21 + 72);
            *(void *)(v22 + 88) = *(void *)(v21 + 88);
            *(_OWORD *)(v21 + 72) = 0uLL;
            uint64_t v23 = *(void *)(v21 + 96);
            *(_OWORD *)(v21 + 88) = 0uLL;
            *(void *)(v22 + 96) = v23;
            LODWORD(v23) = *(_DWORD *)(v21 + 104);
            *(unsigned char *)(v22 + 108) = *(unsigned char *)(v21 + 108);
            *(_DWORD *)(v22 + 104) = v23;
            long long v24 = *(_OWORD *)(v21 + 112);
            *(void *)(v22 + 128) = *(void *)(v21 + 128);
            *(_OWORD *)(v22 + 112) = v24;
            *(void *)(v21 + 120) = 0;
            *(void *)(v21 + 128) = 0;
            *(void *)(v21 + 112) = 0;
            long long v25 = *(_OWORD *)(v21 + 136);
            *(void *)(v22 + 152) = *(void *)(v21 + 152);
            *(_OWORD *)(v22 + 136) = v25;
            *(void *)(v21 + 144) = 0;
            *(void *)(v21 + 152) = 0;
            *(void *)(v21 + 136) = 0;
            v20 += 160;
            v21 += 160;
            v22 += 160;
          }
          while (v21 != a4);
          a1[1] = v20;
          if (v18 < 1) {
            return v7;
          }
        }
      }
      sub_6197AC((uint64_t)a1, v7, v12, v7 + 160 * a5);
      if (v19 != a3)
      {
        uint64_t v26 = v7;
        do
        {
          sub_4D90B4(v26, a3);
          a3 += 160;
          v26 += 160;
        }
        while (a3 != v19);
      }
    }
    else
    {
      unint64_t v13 = a5 - 0x3333333333333333 * ((uint64_t)(v12 - v5) >> 5);
      if (v13 > 0x199999999999999) {
        sub_2E00();
      }
      unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - v5) >> 5);
      uint64_t v15 = 2 * v14;
      if (2 * v14 <= v13) {
        uint64_t v15 = v13;
      }
      if (v14 >= 0xCCCCCCCCCCCCCCLL) {
        unint64_t v16 = 0x199999999999999;
      }
      else {
        unint64_t v16 = v15;
      }
      uint8x8_t v40 = a1 + 2;
      if (v16)
      {
        if (v16 > 0x199999999999999) {
          sub_188D718();
        }
        uint64_t v17 = (char *)operator new(160 * v16);
      }
      else
      {
        uint64_t v17 = 0;
      }
      long long __p = v17;
      BOOL v37 = &v17[160 * v6];
      int64_t v38 = v37;
      unint64_t v39 = &v17[160 * v16];
      uint64_t v27 = 160 * a5;
      uint64_t v28 = &v37[160 * a5];
      long long v29 = v37 + 72;
      do
      {
        *((void *)v29 - 7) = 0;
        *(_OWORD *)(v29 - 72) = *(_OWORD *)a3;
        *((void *)v29 - 7) = *(void *)(a3 + 16);
        *(void *)(a3 + 16) = 0;
        *(_OWORD *)a3 = 0uLL;
        *(_OWORD *)(v29 - 40) = 0uLL;
        *((_OWORD *)v29 - 3) = *(_OWORD *)(a3 + 24);
        *((void *)v29 - 4) = *(void *)(a3 + 40);
        *(void *)(a3 + 40) = 0;
        *(_OWORD *)(a3 + 24) = 0uLL;
        *((_OWORD *)v29 - 1) = 0uLL;
        *(_OWORD *)(v29 - 24) = *(_OWORD *)(a3 + 48);
        *((void *)v29 - 1) = *(void *)(a3 + 64);
        *(void *)(a3 + 64) = 0;
        *(_OWORD *)(a3 + 48) = 0uLL;
        *(_OWORD *)(v29 + 8) = 0uLL;
        *(_OWORD *)long long v29 = *(_OWORD *)(a3 + 72);
        *((void *)v29 + 2) = *(void *)(a3 + 88);
        *(_OWORD *)(a3 + 72) = 0uLL;
        uint64_t v30 = *(void *)(a3 + 96);
        *(_OWORD *)(a3 + 88) = 0uLL;
        *((void *)v29 + 3) = v30;
        LODWORD(v30) = *(_DWORD *)(a3 + 104);
        v29[36] = *(unsigned char *)(a3 + 108);
        *((_DWORD *)v29 + 8) = v30;
        long long v31 = *(_OWORD *)(a3 + 112);
        *((void *)v29 + 7) = *(void *)(a3 + 128);
        *(_OWORD *)(v29 + 40) = v31;
        *(void *)(a3 + 120) = 0;
        *(void *)(a3 + 128) = 0;
        *(void *)(a3 + 112) = 0;
        long long v32 = *(_OWORD *)(a3 + 136);
        *((void *)v29 + 10) = *(void *)(a3 + 152);
        *((_OWORD *)v29 + 4) = v32;
        *(void *)(a3 + 144) = 0;
        *(void *)(a3 + 152) = 0;
        *(void *)(a3 + 136) = 0;
        v29 += 160;
        a3 += 160;
        v27 -= 160;
      }
      while (v27);
      int64_t v38 = v28;
      uint64_t v7 = sub_61991C(a1, &__p, v7);
      BOOL v34 = v37;
      for (uint64_t i = v38; v38 != v34; uint64_t i = v38)
      {
        int64_t v38 = i - 160;
        sub_4D4B58((uint64_t)(i - 160));
      }
      if (__p) {
        operator delete(__p);
      }
    }
  }
  return v7;
}

void sub_619798(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5B12D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_6197AC(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 8);
  unint64_t v5 = a2 + v4 - a4;
  if (v5 >= a3)
  {
    *(void *)(result + 8) = v4;
    if (v4 == a4) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)(result + 8);
  do
  {
    *(void *)(v6 + 16) = 0;
    *(_OWORD *)uint64_t v6 = 0uLL;
    *(_OWORD *)uint64_t v6 = *(_OWORD *)v5;
    *(void *)(v6 + 16) = *(void *)(v5 + 16);
    *(void *)(v5 + 16) = 0;
    *(_OWORD *)unint64_t v5 = 0uLL;
    *(void *)(v6 + 40) = 0;
    *(_OWORD *)(v6 + 24) = 0uLL;
    *(_OWORD *)(v6 + 24) = *(_OWORD *)(v5 + 24);
    *(void *)(v6 + 40) = *(void *)(v5 + 40);
    *(void *)(v5 + 40) = 0;
    *(_OWORD *)(v5 + 24) = 0uLL;
    *(void *)(v6 + 64) = 0;
    *(_OWORD *)(v6 + 48) = 0uLL;
    *(_OWORD *)(v6 + 48) = *(_OWORD *)(v5 + 48);
    *(void *)(v6 + 64) = *(void *)(v5 + 64);
    *(void *)(v5 + 64) = 0;
    *(_OWORD *)(v5 + 48) = 0uLL;
    *(void *)(v6 + 88) = 0;
    *(_OWORD *)(v6 + 72) = 0uLL;
    *(_OWORD *)(v6 + 72) = *(_OWORD *)(v5 + 72);
    *(void *)(v6 + 88) = *(void *)(v5 + 88);
    *(_OWORD *)(v5 + 72) = 0uLL;
    uint64_t v7 = *(void *)(v5 + 96);
    *(_OWORD *)(v5 + 88) = 0uLL;
    *(void *)(v6 + 96) = v7;
    LODWORD(v7) = *(_DWORD *)(v5 + 104);
    *(unsigned char *)(v6 + 108) = *(unsigned char *)(v5 + 108);
    *(_DWORD *)(v6 + 104) = v7;
    long long v8 = *(_OWORD *)(v5 + 112);
    *(void *)(v6 + 128) = *(void *)(v5 + 128);
    *(_OWORD *)(v6 + 112) = v8;
    *(void *)(v5 + 120) = 0;
    *(void *)(v5 + 128) = 0;
    *(void *)(v5 + 112) = 0;
    long long v9 = *(_OWORD *)(v5 + 136);
    *(void *)(v6 + 152) = *(void *)(v5 + 152);
    *(_OWORD *)(v6 + 136) = v9;
    *(void *)(v5 + 144) = 0;
    *(void *)(v5 + 152) = 0;
    *(void *)(v5 + 136) = 0;
    v6 += 160;
    v5 += 160;
  }
  while (v5 < a3);
  *(void *)(result + 8) = v6;
  if (v4 != a4)
  {
LABEL_7:
    uint64_t v10 = v4 - 160;
    uint64_t v11 = 32 * ((v4 - a4) >> 5);
    uint64_t v12 = a2 - 160;
    do
    {
      uint64_t result = sub_4D90B4(v10, v12 + v11);
      v10 -= 160;
      v11 -= 160;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_61991C(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t result = a2[1];
  uint64_t v5 = *a1;
  uint64_t v6 = result;
  if (*a1 != a3)
  {
    uint64_t v7 = a3;
    uint64_t v6 = a2[1];
    do
    {
      *(_OWORD *)(v6 - 160) = 0uLL;
      v6 -= 160;
      *(void *)(v6 + 16) = 0;
      long long v8 = *(_OWORD *)(v7 - 160);
      v7 -= 160;
      *(_OWORD *)uint64_t v6 = v8;
      *(void *)(v6 + 16) = *(void *)(v7 + 16);
      *(void *)(v7 + 16) = 0;
      *(_OWORD *)uint64_t v7 = 0uLL;
      *(void *)(v6 + 40) = 0;
      *(_OWORD *)(v6 + 24) = 0uLL;
      *(_OWORD *)(v6 + 24) = *(_OWORD *)(v7 + 24);
      *(void *)(v6 + 40) = *(void *)(v7 + 40);
      *(void *)(v7 + 40) = 0;
      *(_OWORD *)(v7 + 24) = 0uLL;
      *(void *)(v6 + 64) = 0;
      *(_OWORD *)(v6 + 48) = 0uLL;
      *(_OWORD *)(v6 + 48) = *(_OWORD *)(v7 + 48);
      *(void *)(v6 + 64) = *(void *)(v7 + 64);
      *(void *)(v7 + 64) = 0;
      *(_OWORD *)(v7 + 48) = 0uLL;
      *(void *)(v6 + 88) = 0;
      *(_OWORD *)(v6 + 72) = 0uLL;
      *(_OWORD *)(v6 + 72) = *(_OWORD *)(v7 + 72);
      *(void *)(v6 + 88) = *(void *)(v7 + 88);
      *(_OWORD *)(v7 + 72) = 0uLL;
      uint64_t v9 = *(void *)(v7 + 96);
      *(_OWORD *)(v7 + 88) = 0uLL;
      *(void *)(v6 + 96) = v9;
      LODWORD(v9) = *(_DWORD *)(v7 + 104);
      *(unsigned char *)(v6 + 108) = *(unsigned char *)(v7 + 108);
      *(_DWORD *)(v6 + 104) = v9;
      long long v10 = *(_OWORD *)(v7 + 112);
      *(void *)(v6 + 128) = *(void *)(v7 + 128);
      *(_OWORD *)(v6 + 112) = v10;
      *(void *)(v7 + 120) = 0;
      *(void *)(v7 + 128) = 0;
      long long v11 = *(_OWORD *)(v7 + 136);
      uint64_t v12 = *(void *)(v7 + 152);
      *(void *)(v7 + 112) = 0;
      *(void *)(v6 + 152) = v12;
      *(_OWORD *)(v6 + 136) = v11;
      *(void *)(v7 + 144) = 0;
      *(void *)(v7 + 152) = 0;
      *(void *)(v7 + 136) = 0;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  uint64_t v13 = a1[1];
  uint64_t v14 = a2[2];
  if (v13 != a3)
  {
    do
    {
      *(void *)(v14 + 16) = 0;
      *(_OWORD *)uint64_t v14 = 0uLL;
      *(_OWORD *)uint64_t v14 = *(_OWORD *)a3;
      *(void *)(v14 + 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 16) = 0;
      *(_OWORD *)a3 = 0uLL;
      *(void *)(v14 + 40) = 0;
      *(_OWORD *)(v14 + 24) = 0uLL;
      *(_OWORD *)(v14 + 24) = *(_OWORD *)(a3 + 24);
      *(void *)(v14 + 40) = *(void *)(a3 + 40);
      *(void *)(a3 + 40) = 0;
      *(_OWORD *)(a3 + 24) = 0uLL;
      *(void *)(v14 + 64) = 0;
      *(_OWORD *)(v14 + 48) = 0uLL;
      *(_OWORD *)(v14 + 48) = *(_OWORD *)(a3 + 48);
      *(void *)(v14 + 64) = *(void *)(a3 + 64);
      *(void *)(a3 + 64) = 0;
      *(_OWORD *)(a3 + 48) = 0uLL;
      *(void *)(v14 + 88) = 0;
      *(_OWORD *)(v14 + 72) = 0uLL;
      *(_OWORD *)(v14 + 72) = *(_OWORD *)(a3 + 72);
      *(void *)(v14 + 88) = *(void *)(a3 + 88);
      *(_OWORD *)(a3 + 72) = 0uLL;
      uint64_t v15 = *(void *)(a3 + 96);
      *(_OWORD *)(a3 + 88) = 0uLL;
      *(void *)(v14 + 96) = v15;
      LODWORD(v15) = *(_DWORD *)(a3 + 104);
      *(unsigned char *)(v14 + 108) = *(unsigned char *)(a3 + 108);
      *(_DWORD *)(v14 + 104) = v15;
      long long v16 = *(_OWORD *)(a3 + 112);
      *(void *)(v14 + 128) = *(void *)(a3 + 128);
      *(_OWORD *)(v14 + 112) = v16;
      *(void *)(a3 + 120) = 0;
      *(void *)(a3 + 128) = 0;
      *(void *)(a3 + 112) = 0;
      long long v17 = *(_OWORD *)(a3 + 136);
      *(void *)(v14 + 152) = *(void *)(a3 + 152);
      *(_OWORD *)(v14 + 136) = v17;
      *(void *)(a3 + 144) = 0;
      *(void *)(a3 + 152) = 0;
      *(void *)(a3 + 136) = 0;
      v14 += 160;
      a3 += 160;
    }
    while (a3 != v13);
    uint64_t v6 = a2[1];
  }
  a2[2] = v14;
  uint64_t v18 = *a1;
  *a1 = v6;
  a2[1] = v18;
  uint64_t v19 = a1[1];
  a1[1] = a2[2];
  a2[2] = v19;
  uint64_t v20 = a1[2];
  a1[2] = a2[3];
  a2[3] = v20;
  *a2 = a2[1];
  return result;
}

uint64_t *sub_619B40(void *a1, uint64_t a2)
{
  unint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        unint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_619D70(uint64_t a1)
{
  return *(void *)a1;
}

double sub_619D88()
{
  byte_258C767 = 1;
  word_258C750 = 65;
  byte_258C77F = 1;
  word_258C768 = 65;
  strcpy(&byte_258C797, "\n\x1B\\toi=orth\\"");
  strcpy((char *)&qword_258C780, "\x1B\\toi=lhp\\"");
  byte_258C7AF = 11;
  qword_258C7B0 = (uint64_t)operator new(0x19uLL);
  long long v280 = xmmword_20B9250;
  unk_258C7B8 = xmmword_20B9250;
  strcpy((char *)qword_258C7B0, "\x1B\\toi=x-sampa-internal\\"");
  byte_258C7DF = 13;
  strcpy((char *)&qword_258C7C8, "\x1B\\tn=address\\"");
  strcpy(&byte_258C7F7, "\t\x1B\\tn=normal\\"");
  strcpy((char *)&qword_258C7E0, "\x1B\\tn=nav\\"");
  byte_258C80F = 12;
  byte_258C827 = 7;
  strcpy((char *)&dword_258C810, "\x1B\\lang=");
  byte_258C83F = 1;
  word_258C828 = 92;
  byte_258C857 = 4;
  strcpy((char *)&qword_258C840, "DEV:");
  byte_258C86F = 8;
  strcpy((char *)&qword_258C858, "Continue");
  byte_258C887 = 11;
  strcpy((char *)&qword_258C870, "Start_Route");
  byte_258C89F = 14;
  strcpy((char *)&qword_258C888, "Continue_Route");
  byte_258C8B7 = 12;
  strcpy((char *)&qword_258C8A0, "Resume_Route");
  byte_258C8CF = 18;
  strcpy((char *)&xmmword_258C8B8, "Start_Route_U_Turn");
  byte_258C8E7 = 7;
  strcpy((char *)&dword_258C8D0, "_U_Turn");
  qword_258C8F8 = 0x1300000000000000;
  qmemcpy(&unk_258C900, "Continue_Route", 14);
  dword_258C8F0 = 1702131055;
  qword_258C8E8 = *(void *)"Resume_Route";
  *(int *)((char *)&dword_258C8F4 + 3) = 1852994900;
  dword_258C8F4 = 1415533919;
  qword_258C910 = 0x1500000000000000;
  strcpy(byte_258C918, "Left_Turn");
  unk_258C90E = 1415533919;
  *(_DWORD *)((char *)&qword_258C910 + 1) = 1852994900;
  strcpy(&byte_258C92F, "\tRight_Turn");
  strcpy(&byte_258C947, "\nLeft_Turn_At_End");
  byte_258C95F = 16;
  byte_258C977 = 17;
  strcpy((char *)&xmmword_258C960, "Right_Turn_At_End");
  byte_258C98F = 15;
  strcpy((char *)&qword_258C978, "Sharp_Left_Turn");
  byte_258C9A7 = 16;
  strcpy((char *)&xmmword_258C990, "Sharp_Right_Turn");
  byte_258C9BF = 16;
  strcpy((char *)&xmmword_258C9A8, "Slight_Left_Turn");
  byte_258C9D7 = 17;
  strcpy((char *)&xmmword_258C9C0, "Slight_Right_Turn");
  strcpy(&byte_258C9EF, "\tKeep_Right");
  strcpy((char *)&qword_258C9D8, "Keep_Left");
  strcpy(&byte_258CA07, "\nU_Turn");
  byte_258CA1F = 6;
  byte_258CA37 = 14;
  strcpy((char *)&qword_258CA20, "Walking_U_Turn");
  byte_258CA4F = 20;
  strcpy((char *)&xmmword_258CA38, "U_Turn_When_Possible");
  byte_258CA67 = 20;
  strcpy((char *)&xmmword_258CA50, "U_Turn_At_Roundabout");
  byte_258CA7F = 11;
  strcpy((char *)&qword_258CA68, "Enter_Ferry");
  strcpy(&byte_258CA97, "\nChange_Ferry");
  strcpy((char *)&qword_258CA80, "Exit_Ferry");
  strcpy((char *)&xmmword_258CAB0, "Enter_Railway_Shuttle");
  strcpy((char *)&xmmword_258CAC8, "Exit_Railway_Shuttle");
  strcpy((char *)&xmmword_258CAE0, "Change_Railway_Shuttle");
  strcpy((char *)&xmmword_258CAF8, "End_Of_Navigation");
  strcpy((char *)&xmmword_258CB10, "End_Of_Navigation");
  strcpy((char *)&qword_258CB28, "Destination");
  strcpy((char *)&xmmword_258CB40, "Destination_On_left");
  strcpy((char *)&xmmword_258CB58, "Destination_On_Right");
  strcpy((char *)&xmmword_258CBA0, "First_Stop_On_Right");
  strcpy((char *)&xmmword_258CBE8, "Next_Stop_On_Right");
  byte_258CAAF = 12;
  byte_258CAC7 = 21;
  byte_258CADF = 20;
  strcpy((char *)&xmmword_258CC18, "Waypoint_Stop_On_Left");
  byte_258CAF7 = 22;
  byte_258CB0F = 17;
  byte_258CB27 = 17;
  byte_258CB3F = 11;
  byte_258CB57 = 19;
  byte_258CB6F = 20;
  strcpy(&byte_258CB87, "\nFirst_Stop_On_left");
  *(void *)&v268[0] = *(void *)"First_Stop";
  strcpy((char *)&qword_258CB70, "First_Stop");
  byte_258CB9F = 18;
  byte_258CBB7 = 19;
  strcpy(&byte_258CBCF, "\tNext_Stop_On_left");
  strcpy((char *)&qword_258CC00, "Waypoint_Stop");
  strcpy((char *)&xmmword_258CC30, "Waypoint_Stop_On_Right");
  strcpy((char *)&qword_258CC48, "Roundabout_");
  *(void *)&v264[48] = *(void *)"Next_Stop";
  strcpy((char *)&qword_258CBB8, "Next_Stop");
  byte_258CBE7 = 17;
  byte_258CBFF = 18;
  byte_258CC17 = 13;
  byte_258CC2F = 21;
  byte_258CC47 = 22;
  byte_258CC5F = 11;
  byte_258CC77 = 16;
  strcpy((char *)&xmmword_258CC60, "Enter_Roundabout");
  qword_258CC78 = (uint64_t)operator new(0x20uLL);
  long long v279 = xmmword_20B91C0;
  xmmword_258CC80 = xmmword_20B91C0;
  strcpy((char *)qword_258CC78, "Walking_Enter_Roundabout");
  byte_258CCA7 = 16;
  strcpy((char *)&xmmword_258CC90, "Leave_Roundabout");
  byte_258CCBF = 21;
  strcpy((char *)&xmmword_258CCA8, "Roundabout_First_Exit");
  byte_258CCD7 = 22;
  strcpy((char *)&xmmword_258CCC0, "Roundabout_Second_Exit");
  byte_258CCEF = 21;
  strcpy((char *)&xmmword_258CCD8, "Roundabout_Third_Exit");
  strcpy((char *)&xmmword_258CCF0, "Roundabout_Fourth_Exit");
  HIBYTE(word_258CD06) = 22;
  byte_258CD1F = 21;
  strcpy((char *)&xmmword_258CD08, "Roundabout_Fifth_Exit");
  byte_258CD37 = 21;
  strcpy((char *)&xmmword_258CD20, "Roundabout_Sixth_Exit");
  qword_258CD38 = (uint64_t)operator new(0x19uLL);
  xmmword_258CD40 = xmmword_20B9250;
  strcpy((char *)qword_258CD38, "Roundabout_Seventh_Exit");
  strcpy((char *)&xmmword_258CD50, "Roundabout_Eighth_Exit");
  HIBYTE(word_258CD66) = 22;
  byte_258CD7F = 21;
  strcpy((char *)&xmmword_258CD68, "Roundabout_Ninth_Exit");
  byte_258CD97 = 21;
  strcpy((char *)&xmmword_258CD80, "Roundabout_Tenth_Exit");
  qword_258CD98 = (uint64_t)operator new(0x20uLL);
  xmmword_258CDA0 = xmmword_20B91C0;
  strcpy((char *)qword_258CD98, "Roundabout_Eleventh_Exit");
  qword_258CDB0 = (uint64_t)operator new(0x19uLL);
  unk_258CDB8 = xmmword_20B9250;
  strcpy((char *)qword_258CDB0, "Roundabout_Twelfth_Exit");
  qword_258CDC8 = (uint64_t)operator new(0x20uLL);
  long long v276 = xmmword_20B5EB0;
  xmmword_258CDD0 = xmmword_20B5EB0;
  strcpy((char *)qword_258CDC8, "Roundabout_Thirteenth_Exit");
  qword_258CDE0 = (uint64_t)operator new(0x20uLL);
  unk_258CDE8 = xmmword_20B5EB0;
  strcpy((char *)qword_258CDE0, "Roundabout_Fourteenth_Exit");
  qword_258CDF8 = (uint64_t)operator new(0x20uLL);
  long long v278 = xmmword_20B8870;
  xmmword_258CE00 = xmmword_20B8870;
  strcpy((char *)qword_258CDF8, "Roundabout_Fifteenth_Exit");
  qword_258CE10 = (uint64_t)operator new(0x20uLL);
  unk_258CE18 = xmmword_20B8870;
  strcpy((char *)qword_258CE10, "Roundabout_Sixteenth_Exit");
  qword_258CE28 = (uint64_t)operator new(0x20uLL);
  long long v273 = xmmword_20B91A0;
  xmmword_258CE30 = xmmword_20B91A0;
  strcpy((char *)qword_258CE28, "Roundabout_Seventeenth_Exit");
  qword_258CE40 = (uint64_t)operator new(0x20uLL);
  unk_258CE48 = xmmword_20B5EB0;
  strcpy((char *)qword_258CE40, "Roundabout_Eighteenth_Exit");
  qword_258CE58 = (uint64_t)operator new(0x20uLL);
  xmmword_258CE60 = xmmword_20B5EB0;
  strcpy((char *)qword_258CE58, "Roundabout_Nineteenth_Exit");
  byte_258CE87 = 8;
  strcpy((char *)&qword_258CE70, "Off_Ramp");
  byte_258CE9F = 16;
  strcpy((char *)&xmmword_258CE88, "Off_Ramp_On_Left");
  byte_258CEB7 = 17;
  strcpy((char *)&xmmword_258CEA0, "Off_Ramp_On_Right");
  byte_258CECF = 14;
  strcpy((char *)&qword_258CEB8, "Change_Highway");
  strcpy((char *)&xmmword_258CED0, "Change_Highway_On_Left");
  HIBYTE(word_258CEE6) = 22;
  qword_258CEE8 = (uint64_t)operator new(0x19uLL);
  xmmword_258CEF0 = xmmword_20B9250;
  strcpy((char *)qword_258CEE8, "Change_Highway_On_Right");
  byte_258CF17 = 5;
  dword_258CF00 = 1735550285;
  byte_258CF04 = 101;
  byte_258CF05 = 0;
  byte_258CF2F = 12;
  strcpy((char *)&qword_258CF18, "Enter_Detour");
  byte_258CF47 = 11;
  strcpy((char *)&qword_258CF30, "Exit_Detour");
  byte_258CF5F = 18;
  strcpy((char *)&xmmword_258CF48, "Walking_Turnaround");
  qword_258CF60 = (uint64_t)operator new(0x19uLL);
  unk_258CF68 = xmmword_20B9250;
  strcpy((char *)qword_258CF60, "Walking_Turnaround_Sign");
  byte_258CF8F = 19;
  strcpy((char *)&xmmword_258CF78, "Distance_Title_List");
  qword_258CF90 = (uint64_t)operator new(0x19uLL);
  unk_258CF98 = xmmword_20B9250;
  long long v270 = *(_OWORD *)"Cross_The_Street_Spoken";
  strcpy((char *)qword_258CF90, "Cross_The_Street_Spoken");
  *(void *)&v268[1] = *(void *)"t_Spoken";
  byte_258CFBF = 19;
  strcpy((char *)&xmmword_258CFA8, "Arrival_Charge_List");
  byte_258CFD7 = 15;
  strcpy((char *)&qword_258CFC0, "Charge_At_Start");
  strcpy(&byte_258CFEF, "\tPass_Street");
  strcpy((char *)&qword_258CFD8, "Pass_Exit");
  byte_258D007 = 11;
  byte_258D01F = 17;
  strcpy((char *)&xmmword_258D008, "Pass_Intersection");
  strcpy(&byte_258D037, "\t_PrevExitNumber");
  strcpy((char *)&qword_258D020, "Next_Exit");
  byte_258D04F = 15;
  strcpy(&byte_258D067, "\t_PrevUTurn");
  strcpy((char *)&qword_258D050, "_PrevRoad");
  strcpy(&byte_258D07F, "\nNext_");
  byte_258D097 = 5;
  byte_258D0AF = 15;
  strcpy((char *)&qword_258D098, "_At_Next_Street");
  byte_258D0C7 = 21;
  strcpy((char *)&xmmword_258D0B0, "_At_Next_Intersection");
  byte_258D0DF = 14;
  strcpy((char *)&qword_258D0C8, "Charge_Station");
  byte_258D0F7 = 15;
  strcpy((char *)&qword_258D0E0, "_Charge_Station");
  BYTE1(qword_258D108) = 0;
  WORD1(qword_258D108) = 25856;
  HIDWORD(qword_258D108) = 335544320;
  strcpy((char *)&qword_258D0F8, "_Charge_Station_");
  byte_258D127 = 8;
  strcpy((char *)&qword_258D110, "_Minimum");
  byte_258D13F = 15;
  strcpy((char *)&qword_258D128, "ExitShield_Sign");
  byte_258D157 = 8;
  strcpy((char *)&qword_258D140, "Walking_");
  byte_258D16F = 16;
  strcpy((char *)&xmmword_258D158, "Walking_Continue");
  byte_258D187 = 19;
  strcpy((char *)&xmmword_258D170, "Walking_Start_Route");
  qword_258D188 = (uint64_t)operator new(0x20uLL);
  xmmword_258D190 = xmmword_20B5EB0;
  strcpy((char *)qword_258D188, "Walking_Start_Route_U_Turn");
  byte_258D1B7 = 17;
  strcpy((char *)&xmmword_258D1A0, "Walking_Left_Turn");
  byte_258D1CF = 18;
  strcpy((char *)&xmmword_258D1B8, "Walking_Right_Turn");
  qword_258D1D0 = (uint64_t)operator new(0x20uLL);
  unk_258D1D8 = xmmword_20B5EB0;
  strcpy((char *)qword_258D1D0, "Walking_Turn_At_Roundabout");
  qword_258D1E8 = (uint64_t)operator new(0x20uLL);
  long long v277 = xmmword_20B91B0;
  xmmword_258D1F0 = xmmword_20B91B0;
  strcpy((char *)qword_258D1E8, "Walking_U_Turn_When_Possible");
  qword_258D200 = (uint64_t)operator new(0x28uLL);
  long long v269 = xmmword_20B9390;
  unk_258D208 = xmmword_20B9390;
  strcpy((char *)qword_258D200, "Walking_Roundabout_Exit_Continue");
  qword_258D218 = (uint64_t)operator new(0x20uLL);
  xmmword_258D220 = xmmword_20B91B0;
  strcpy((char *)qword_258D218, "Walking_Roundabout_Exit_Left");
  qword_258D230 = (uint64_t)operator new(0x20uLL);
  long long v275 = xmmword_20B8890;
  unk_258D238 = xmmword_20B8890;
  strcpy((char *)qword_258D230, "Walking_Roundabout_Exit_Right");
  qword_258D248 = (uint64_t)operator new(0x20uLL);
  xmmword_258D250 = xmmword_20B8870;
  strcpy((char *)qword_258D248, "Walking_End_Of_Navigation");
  long long v272 = *(_OWORD *)"nd_Of_Navigation";
  uint64_t v0 = (char *)operator new(0x20uLL);
  qword_258D260 = (uint64_t)v0;
  unk_258D268 = xmmword_20B8870;
  *(_OWORD *)uint64_t v0 = *(_OWORD *)"Walking_End_Of_Navigation";
  *(_OWORD *)(v0 + 9) = v272;
  v0[25] = 0;
  byte_258D28F = 8;
  strcpy((char *)&qword_258D278, "Walking_");
  qword_258D290 = (uint64_t)operator new(0x19uLL);
  unk_258D298 = v280;
  strcpy((char *)qword_258D290, "Walking_Sharp_Left_Turn");
  qword_258D2A8 = (uint64_t)operator new(0x20uLL);
  xmmword_258D2B0 = v279;
  strcpy((char *)qword_258D2A8, "Walking_Sharp_Right_Turn");
  qword_258D2C0 = (uint64_t)operator new(0x20uLL);
  unk_258D2C8 = v279;
  strcpy((char *)qword_258D2C0, "Walking_Slight_Left_Turn");
  qword_258D2D8 = (uint64_t)operator new(0x20uLL);
  xmmword_258D2E0 = v278;
  strcpy((char *)qword_258D2D8, "Walking_Slight_Right_Turn");
  byte_258D307 = 4;
  strcpy((char *)&dword_258D2F0, "Exit");
  byte_258D31F = 4;
  strcpy((char *)&dword_258D308, "Road");
  byte_258D337 = 7;
  strcpy((char *)&dword_258D320, "Freeway");
  byte_258D34F = 12;
  strcpy((char *)&qword_258D338, "Intersection");
  byte_258D367 = 5;
  strcpy((char *)&dword_258D350, "Ferry");
  byte_258D37F = 11;
  strcpy((char *)&qword_258D368, "ShuttleName");
  byte_258D397 = 5;
  strcpy((char *)&dword_258D380, "Road1");
  strcpy(&byte_258D3AF, "\tName");
  strcpy((char *)&qword_258D398, "Signpost1");
  byte_258D3C7 = 4;
  byte_258D3DF = 7;
  strcpy((char *)&dword_258D3C8, "Address");
  byte_258D3F7 = 7;
  strcpy((char *)&dword_258D3E0, "Shield1");
  byte_258D40F = 13;
  strcpy((char *)&qword_258D3F8, "TowardShield1");
  byte_258D427 = 6;
  strcpy((char *)&dword_258D410, "Right_");
  byte_258D43F = 5;
  byte_258D42C = 95;
  dword_258D428 = 1952867660;
  byte_258D42D = 0;
  strcpy(&byte_258D457, "\tOn_Left_");
  strcpy((char *)&qword_258D440, "On_Right_");
  byte_258D46F = 8;
  byte_258D487 = 12;
  strcpy((char *)&qword_258D470, "ElevatorName");
  byte_258D49F = 13;
  strcpy((char *)&qword_258D488, "EscalatorName");
  strcpy(&byte_258D4B7, "\nBridgeName");
  strcpy((char *)&qword_258D4A0, "StairsName");
  strcpy(&byte_258D4CF, "\nTunnelName");
  strcpy(&byte_258D4E7, "\nParking");
  byte_258D4FF = 7;
  strcpy(&byte_258D517, "\t_Escalator");
  strcpy((char *)&qword_258D500, "_Elevator");
  strcpy(&byte_258D52F, "\n_ElevatorName");
  byte_258D547 = 13;
  byte_258D55F = 14;
  strcpy((char *)&qword_258D548, "_EscalatorName");
  byte_258D577 = 5;
  strcpy((char *)&qword_258D560, "_Road");
  byte_258D58F = 8;
  strcpy((char *)&qword_258D578, "_Freeway");
  byte_258D5A7 = 13;
  strcpy((char *)&qword_258D590, "_Intersection");
  byte_258D5BF = 6;
  strcpy((char *)&dword_258D5A8, "_Road1");
  byte_258D5D7 = 6;
  strcpy((char *)&dword_258D5C0, "_Road2");
  strcpy(&byte_258D5EF, "\n_Signpost2");
  strcpy((char *)&qword_258D5D8, "_Signpost1");
  strcpy(&byte_258D607, "\n_Ferry");
  byte_258D61F = 6;
  byte_258D637 = 12;
  strcpy((char *)&qword_258D620, "_Ferry_Ferry");
  byte_258D64F = 12;
  strcpy((char *)&qword_258D638, "_ShuttleName");
  qword_258D650 = (uint64_t)operator new(0x20uLL);
  unk_258D658 = v277;
  strcpy((char *)qword_258D650, "_Railway_Shuttle_ShuttleName");
  byte_258D67F = 11;
  strcpy((char *)&qword_258D668, "_ExitNumber");
  byte_258D697 = 5;
  dword_258D680 = 1769489759;
  byte_258D684 = 116;
  byte_258D685 = 0;
  byte_258D6AF = 7;
  strcpy((char *)&dword_258D698, "_StayOn");
  byte_258D6C7 = 7;
  strcpy((char *)&dword_258D6B0, "_Stairs");
  byte_258D6DF = 5;
  strcpy((char *)&dword_258D6C8, "_Ramp");
  byte_258D6F7 = 11;
  strcpy((char *)&qword_258D6E0, "_StairsName");
  strcpy(&byte_258D70F, "\t_Down");
  strcpy((char *)&qword_258D6F8, "_RampName");
  byte_258D727 = 5;
  byte_258D73F = 3;
  dword_258D728 = 7361887;
  byte_258D757 = 7;
  strcpy((char *)&dword_258D740, "_Bridge");
  byte_258D76F = 7;
  strcpy((char *)&dword_258D758, "_Tunnel");
  byte_258D787 = 11;
  strcpy((char *)&qword_258D770, "_Roundabout");
  byte_258D79F = 6;
  strcpy((char *)&dword_258D788, "_Cross");
  byte_258D7B7 = 8;
  strcpy((char *)&qword_258D7A0, "_Parking");
  byte_258D7CF = 8;
  strcpy((char *)&qword_258D7B8, "_Shield1");
  byte_258D7E7 = 14;
  strcpy((char *)&qword_258D7D0, "_TowardShield1");
  byte_258D7FF = 8;
  strcpy((char *)&qword_258D7E8, "_Shield2");
  byte_258D817 = 14;
  strcpy((char *)&qword_258D800, "_TowardShield2");
  byte_258D82F = 11;
  strcpy((char *)&qword_258D818, "_Direction1");
  byte_258D847 = 11;
  strcpy((char *)&qword_258D830, "_Direction2");
  strcpy(&byte_258D85F, "\n_TowardDirection1");
  strcpy((char *)&qword_258D848, "Direction1");
  byte_258D877 = 17;
  byte_258D88F = 17;
  strcpy((char *)&xmmword_258D878, "_TowardDirection2");
  byte_258D8A7 = 16;
  strcpy((char *)&xmmword_258D890, "TowardDirection1");
  byte_258D8BF = 7;
  strcpy((char *)&qword_258D8A8, "_Spoken");
  byte_258D8D7 = 5;
  strcpy((char *)&qword_258D8C0, "_Sign");
  byte_258D8EF = 15;
  strcpy((char *)&qword_258D8D8, "_Secondary_Sign");
  byte_258D907 = 5;
  byte_258D8F4 = 116;
  dword_258D8F0 = 1936280671;
  byte_258D8F5 = 0;
  byte_258D91F = 8;
  strcpy((char *)&qword_258D908, "_Primary");
  qword_258D930 = 0xF00000000000000;
  strcpy(byte_258D938, "_Secondary");
  strcpy((char *)&qword_258D920, "_Spoken_Primary");
  strcpy(&byte_258D94F, "\n_Secondary");
  strcpy(&byte_258D967, "\n_Spoken_Secondar");
  BYTE1(qword_258D978) = 0;
  WORD1(qword_258D978) = 0;
  HIDWORD(qword_258D978) = 285212672;
  byte_258D997 = 13;
  strcpy((char *)&qword_258D980, "_To_Secondary");
  BYTE1(qword_258D9A8) = 0;
  WORD1(qword_258D9A8) = 0;
  HIDWORD(qword_258D9A8) = 335544320;
  strcpy((char *)&dword_258D998, "_Spoken_To_Secon");
  strcpy(&byte_258D9C7, "\t_ValidDistance");
  strcpy((char *)&qword_258D9B0, "_Distance");
  byte_258D9DF = 14;
  byte_258D9F7 = 6;
  strcpy((char *)&dword_258D9E0, "_Short");
  byte_258DA0F = 1;
  word_258D9F8 = 95;
  qword_258DA10 = (uint64_t)operator new(0x20uLL);
  unk_258DA18 = v279;
  strcpy((char *)qword_258DA10, "Concatenate_Newline_Sign");
  uint64_t v1 = (char *)operator new(0x19uLL);
  qword_258DA28 = (uint64_t)v1;
  xmmword_258DA30 = v280;
  *(_OWORD *)uint64_t v1 = v270;
  uint64_t v2 = *(void *)&v268[1];
  *(void *)(v1 + 15) = *(void *)&v268[1];
  v1[23] = 0;
  byte_258DA57 = 12;
  strcpy((char *)&qword_258DA40, "Chain_Spoken");
  byte_258DA6F = 15;
  strcpy((char *)&qword_258DA58, "Chain_To_Spoken");
  strcpy(&byte_258DA87, "\nThen_Spoken");
  strcpy((char *)&qword_258DA70, "And_Spoken");
  byte_258DA9F = 11;
  byte_258DAB7 = 18;
  strcpy((char *)&xmmword_258DAA0, "Concatenate_Spoken");
  qword_258DAB8 = (uint64_t)operator new(0x28uLL);
  long long v267 = xmmword_20B9240;
  xmmword_258DAC0 = xmmword_20B9240;
  strcpy((char *)qword_258DAB8, "At_Traffic_Light_Chain_Spoken_Primary");
  qword_258DAD0 = (uint64_t)operator new(0x28uLL);
  v268[2] = xmmword_20B9260;
  unk_258DAD8 = xmmword_20B9260;
  strcpy((char *)qword_258DAD0, "At_Stop_Sign_Chain_Spoken_Primary");
  qword_258DAE8 = (uint64_t)operator new(0x40uLL);
  xmmword_258DAF0 = xmmword_20B9A90;
  strcpy((char *)qword_258DAE8, "At_Stop_Sign_Cross_Traffic_Doesnt_Stop_Chain_Spoken_Primary");
  qword_258DB00 = (uint64_t)operator new(0x30uLL);
  long long v266 = xmmword_20B9A40;
  unk_258DB08 = xmmword_20B9A40;
  strcpy((char *)qword_258DB00, "At_Next_Traffic_Light_Chain_Spoken_Primary");
  qword_258DB18 = (uint64_t)operator new(0x28uLL);
  long long v265 = xmmword_20E12D0;
  xmmword_258DB20 = xmmword_20E12D0;
  strcpy((char *)qword_258DB18, "At_Next_Stop_Sign_Chain_Spoken_Primary");
  qword_258DB30 = (uint64_t)operator new(0x28uLL);
  long long v274 = xmmword_20B9960;
  unk_258DB38 = xmmword_20B9960;
  strcpy((char *)qword_258DB30, "At_Traffic_Light_Chain_Spoken_Secondary");
  qword_258DB48 = (uint64_t)operator new(0x28uLL);
  xmmword_258DB50 = xmmword_20B93A0;
  strcpy((char *)qword_258DB48, "At_Stop_Sign_Chain_Spoken_Secondary");
  qword_258DB60 = (uint64_t)operator new(0x30uLL);
  long long v272 = xmmword_20E1380;
  unk_258DB68 = xmmword_20E1380;
  strcpy((char *)qword_258DB60, "At_Next_Traffic_Light_Chain_Spoken_Secondary");
  qword_258DB78 = (uint64_t)operator new(0x30uLL);
  xmmword_258DB80 = xmmword_20B93C0;
  strcpy((char *)qword_258DB78, "At_Next_Stop_Sign_Chain_Spoken_Secondary");
  qword_258DB90 = (uint64_t)operator new(0x38uLL);
  unk_258DB98 = xmmword_20B9A60;
  strcpy((char *)qword_258DB90, "At_Next_One_Traffic_Light_Chain_Spoken_Secondary");
  qword_258DBA8 = (uint64_t)operator new(0x30uLL);
  xmmword_258DBB0 = xmmword_20E1380;
  strcpy((char *)qword_258DBA8, "At_Next_One_Stop_Sign_Chain_Spoken_Secondary");
  qword_258DBC0 = (uint64_t)operator new(0x28uLL);
  unk_258DBC8 = xmmword_20B9960;
  strcpy((char *)qword_258DBC0, "At_Mini_Roundabout_Chain_Spoken_Primary");
  qword_258DBD8 = (uint64_t)operator new(0x30uLL);
  long long v271 = xmmword_20B93D0;
  xmmword_258DBE0 = xmmword_20B93D0;
  strcpy((char *)qword_258DBD8, "At_Mini_Roundabout_Chain_Spoken_Secondary");
  qword_258DBF0 = (uint64_t)operator new(0x20uLL);
  unk_258DBF8 = v275;
  strcpy((char *)qword_258DBF0, "Walking_Distance_Chain_Spoken");
  qword_258DC08 = (uint64_t)operator new(0x20uLL);
  xmmword_258DC10 = v275;
  strcpy((char *)qword_258DC08, "Walking_Continue_Chain_Spoken");
  unint64_t v3 = (char *)operator new(0x19uLL);
  qword_258DC20 = (uint64_t)v3;
  unk_258DC28 = v280;
  *(_OWORD *)unint64_t v3 = v270;
  *(void *)(v3 + 15) = v2;
  v3[23] = 0;
  qword_258DC38 = (uint64_t)operator new(0x28uLL);
  xmmword_258DC40 = v269;
  strcpy((char *)qword_258DC38, "Distance_Cross_The_Street_Spoken");
  byte_258DC67 = 22;
  strcpy((char *)&xmmword_258DC50, "Walking_Continue_Cross");
  byte_258DC7F = 14;
  strcpy((char *)&qword_258DC68, "Continue_Cross");
  byte_258DC97 = 5;
  strcpy((char *)&dword_258DC80, "Cross");
  byte_258DCAF = 19;
  strcpy((char *)&xmmword_258DC98, "Cross_Street_Spoken");
  byte_258DCC7 = 17;
  strcpy((char *)&xmmword_258DCB0, "Cross_Road_Spoken");
  byte_258DCDF = 20;
  strcpy((char *)&xmmword_258DCC8, "Use_Crosswalk_Spoken");
  byte_258DCF7 = 15;
  strcpy((char *)&qword_258DCE0, "Distance_Spoken");
  byte_258DD0F = 19;
  strcpy((char *)&xmmword_258DCF8, "Distance_And_Spoken");
  byte_258DD27 = 21;
  strcpy((char *)&xmmword_258DD10, "Continue_Stage_Spoken");
  byte_258DD3F = 13;
  qmemcpy(&qword_258DD28, "ContinueStage", 13);
  int v4 = SHIBYTE(qword_258D930);
  if (qword_258D930 >= 0) {
    size_t v5 = HIBYTE(qword_258D930);
  }
  else {
    size_t v5 = unk_258D928;
  }
  unint64_t v6 = v5 + 13;
  byte_258DD35 = 0;
  if (v5 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    unint64_t v10 = operator new(v8 + 1);
    qword_258DD48 = v5 + 13;
    unk_258DD50 = v9 | 0x8000000000000000;
    qword_258DD40 = (uint64_t)v10;
    *unint64_t v10 = *(void *)"ContinueStage";
    int8x8_t v7 = (char *)v10 + 13;
    *(void *)((char *)v10 + 5) = *(void *)"nueStage";
  }
  else
  {
    BYTE1(qword_258DD48) = 0;
    WORD1(qword_258DD48) = 0;
    HIDWORD(qword_258DD48) = 0;
    unk_258DD50 = 0;
    byte_258DD57 = v5 + 13;
    int8x8_t v7 = (char *)&qword_258DD48 + 5;
    strcpy((char *)&qword_258DD40, "Continue");
    if (!v5) {
      goto LABEL_15;
    }
  }
  if (v4 >= 0) {
    long long v11 = &qword_258D920;
  }
  else {
    long long v11 = (uint64_t *)qword_258D920;
  }
  memmove(v7, v11, v5);
LABEL_15:
  v7[v5] = 0;
  int v12 = byte_258D577;
  if (byte_258D577 >= 0) {
    size_t v13 = byte_258D577;
  }
  else {
    size_t v13 = qword_258D568;
  }
  unint64_t v14 = v13 + 13;
  if (v13 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v14 >= 0x17)
  {
    uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v16 = v14 | 7;
    }
    uint64_t v17 = v16 + 1;
    uint64_t v18 = operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v13 + 13;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    *uint64_t v18 = qword_258DD28;
    *(void *)((char *)v18 + 5) = *(uint64_t *)((char *)&qword_258DD28 + 5);
    uint64_t v15 = (char *)v18 + 13;
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 5) = *(uint64_t *)((char *)&qword_258DD28 + 5);
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13 + 13;
    __dst.__r_.__value_.__r.__words[0] = qword_258DD28;
    uint64_t v15 = &__dst.__r_.__value_.__s.__data_[13];
    if (!v13) {
      goto LABEL_29;
    }
  }
  if (v12 >= 0) {
    uint64_t v19 = &qword_258D560;
  }
  else {
    uint64_t v19 = (uint64_t *)qword_258D560;
  }
  memmove(v15, v19, v13);
LABEL_29:
  v15[v13] = 0;
  if (v4 >= 0) {
    uint64_t v20 = (const std::string::value_type *)&qword_258D920;
  }
  else {
    uint64_t v20 = (const std::string::value_type *)qword_258D920;
  }
  uint64_t v21 = std::string::append(&__dst, v20, v5);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  qword_258DD68 = v21->__r_.__value_.__r.__words[2];
  xmmword_258DD58 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  byte_258DD87 = 5;
  strcpy((char *)&dword_258DD70, "Merge");
  qword_258DD88 = (uint64_t)operator new(0x20uLL);
  v268[1] = xmmword_20B8E90;
  *(_OWORD *)algn_258DD90 = xmmword_20B8E90;
  strcpy((char *)qword_258DD88, "Continue_Freeway_Spoken_Primary");
  byte_258DDB7 = 8;
  strcpy((char *)&qword_258DDA0, "Starting");
  byte_258DDCF = 14;
  strcpy((char *)&qword_258DDB8, "Starting_Route");
  byte_258DDE7 = 14;
  strcpy((char *)&qword_258DDD0, "Resuming_Route");
  byte_258DDFF = 16;
  strcpy((char *)&xmmword_258DDE8, "Continuing_Route");
  byte_258DE17 = 9;
  word_258DE08 = 112;
  qword_258DE00 = *(void *)&v264[48];
  strcpy(&byte_258DE2F, "\nEnding");
  strcpy((char *)&word_258DE20, "op");
  qword_258DE18 = *(void *)&v268[0];
  byte_258DE47 = 6;
  strcpy((char *)&qword_258DE48, "_Destination");
  byte_258DE5F = 12;
  byte_258DE77 = 15;
  strcpy((char *)&qword_258DE60, "_At_Destination");
  std::operator+<char>();
  qword_258DE90 = (uint64_t)operator new(0x20uLL);
  unk_258DE98 = v279;
  strcpy((char *)qword_258DE90, "Spoken_Ending_At_Parking");
  qword_258DEA8 = (uint64_t)operator new(0x20uLL);
  v268[0] = xmmword_20B9800;
  xmmword_258DEB0 = xmmword_20B9800;
  strcpy((char *)qword_258DEA8, "Spoken_Pre_Arrival_Destination");
  strcpy((char *)&xmmword_258DEC0, "Sign_Ending_At_Parking");
  HIBYTE(word_258DED6) = 22;
  byte_258DEEF = 4;
  strcpy((char *)&dword_258DED8, "Home");
  byte_258DF07 = 4;
  strcpy((char *)&dword_258DEF0, "Work");
  byte_258DF1F = 8;
  strcpy((char *)&qword_258DF08, "Business");
  byte_258DF37 = 4;
  strcpy((char *)&dword_258DF20, "Name");
  byte_258DF4F = 13;
  strcpy((char *)&qword_258DF38, "Other_Contact");
  byte_258DF67 = 11;
  strcpy((char *)&qword_258DF50, "ContactHome");
  byte_258DF7F = 11;
  *(_DWORD *)((char *)&qword_258DF68 + 7) = 1802661719;
  byte_258DF97 = 7;
  *(int *)((char *)&dword_258DF80 + 3) = 1936942450;
  dword_258DF80 = 1919181889;
  strcpy((char *)&xmmword_258DF98, "Discoverability_Prompt");
  HIBYTE(word_258DFAE) = 22;
  byte_258DFC7 = 6;
  dword_258DFB0 = 1634878303;
  word_258DFB4 = 26739;
  byte_258DFDF = 8;
  qword_258DFC8 = 0x697269535F6F4E5FLL;
  byte_258DFF7 = 9;
  strcpy((char *)&qword_258DFE0, "_CityName");
  byte_258E00F = 8;
  qword_258DFF8 = 0x636972656E65475FLL;
  int v23 = byte_258DDB7;
  if (byte_258DDB7 >= 0) {
    size_t v24 = byte_258DDB7;
  }
  else {
    size_t v24 = qword_258DDA8;
  }
  LODWORD(v270) = byte_258D0F7;
  if (byte_258D0F7 >= 0) {
    size_t v25 = byte_258D0F7;
  }
  else {
    size_t v25 = unk_258D0E8;
  }
  qword_258DF68 = *(void *)"ContactWork";
  byte_258DF73 = 0;
  byte_258DF87 = 0;
  byte_258DFB6 = 0;
  byte_258DFD0 = 0;
  byte_258E000 = 0;
  unint64_t v26 = v25 + v24;
  if (v25 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  *(void *)long long v264 = *(void *)"ContactWork";
  *(void *)&v264[16] = *(void *)"ContactHome";
  *(void *)&v264[32] = *(void *)"_Contact";
  *(void *)&v264[48] = *(void *)"Other_Contact";
  if (v26 <= 0x16)
  {
    uint64_t v27 = &qword_258E010;
    qword_258E018 = 0;
    unk_258E020 = 0;
    qword_258E010 = 0;
    byte_258E027 = v25 + v24;
    if (!v24) {
      goto LABEL_47;
    }
    goto LABEL_43;
  }
  uint64_t v90 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17) {
    uint64_t v90 = v26 | 7;
  }
  uint64_t v91 = v90 + 1;
  uint64_t v27 = (uint64_t *)operator new(v90 + 1);
  qword_258E018 = v25 + v24;
  unk_258E020 = v91 | 0x8000000000000000;
  qword_258E010 = (uint64_t)v27;
  if (v24)
  {
LABEL_43:
    if (v23 >= 0) {
      uint64_t v28 = &qword_258DDA0;
    }
    else {
      uint64_t v28 = (uint64_t *)qword_258DDA0;
    }
    memmove(v27, v28, v24);
  }
LABEL_47:
  long long v29 = (char *)v27 + v24;
  if (v25)
  {
    if ((int)v270 >= 0) {
      uint64_t v30 = &qword_258D0E0;
    }
    else {
      uint64_t v30 = (uint64_t *)qword_258D0E0;
    }
    memmove(v29, v30, v25);
  }
  v29[v25] = 0;
  int v31 = byte_258DE5F;
  if (byte_258DE5F >= 0) {
    size_t v32 = byte_258DE5F;
  }
  else {
    size_t v32 = qword_258DE50;
  }
  unint64_t v33 = v32 + v24;
  if (v32 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v33 <= 0x16)
  {
    BOOL v34 = &qword_258E028;
    qword_258E030 = 0;
    unk_258E038 = 0;
    qword_258E028 = 0;
    byte_258E03F = v32 + v24;
    if (!v24) {
      goto LABEL_62;
    }
    goto LABEL_58;
  }
  uint64_t v92 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v92 = v33 | 7;
  }
  uint64_t v93 = v92 + 1;
  BOOL v34 = (uint64_t *)operator new(v92 + 1);
  qword_258E030 = v32 + v24;
  unk_258E038 = v93 | 0x8000000000000000;
  qword_258E028 = (uint64_t)v34;
  if (v24)
  {
LABEL_58:
    if (v23 >= 0) {
      unint64_t v35 = &qword_258DDA0;
    }
    else {
      unint64_t v35 = (uint64_t *)qword_258DDA0;
    }
    memmove(v34, v35, v24);
  }
LABEL_62:
  unint64_t v36 = (char *)v34 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      BOOL v37 = &qword_258DE48;
    }
    else {
      BOOL v37 = (uint64_t *)qword_258DE48;
    }
    memmove(v36, v37, v32);
  }
  v36[v32] = 0;
  qword_258E040 = (uint64_t)operator new(0x19uLL);
  unk_258E048 = v280;
  strcpy((char *)qword_258E040, "{ChargeStationCityName}");
  if (v33 < 0x17)
  {
    int64_t v38 = &qword_258E058;
    qword_258E060 = 0;
    unk_258E068 = 0;
    qword_258E058 = 0;
    byte_258E06F = v32 + v24;
    if (!v24) {
      goto LABEL_73;
    }
    goto LABEL_69;
  }
  uint64_t v94 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v94 = v33 | 7;
  }
  uint64_t v95 = v94 + 1;
  int64_t v38 = (uint64_t *)operator new(v94 + 1);
  qword_258E060 = v32 + v24;
  unk_258E068 = v95 | 0x8000000000000000;
  qword_258E058 = (uint64_t)v38;
  if (v24)
  {
LABEL_69:
    if (v23 >= 0) {
      unint64_t v39 = &qword_258DDA0;
    }
    else {
      unint64_t v39 = (uint64_t *)qword_258DDA0;
    }
    memmove(v38, v39, v24);
  }
LABEL_73:
  uint8x8_t v40 = (char *)v38 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      uint64_t v41 = &qword_258DE48;
    }
    else {
      uint64_t v41 = (uint64_t *)qword_258DE48;
    }
    memmove(v40, v41, v32);
  }
  v40[v32] = 0;
  strcpy((char *)&xmmword_258E070, "{NewBatteryPercentage}");
  HIBYTE(word_258E086) = 22;
  qword_258E088 = (uint64_t)operator new(0x20uLL);
  xmmword_258E090 = v273;
  strcpy((char *)qword_258E088, "{OriginalBatteryPercentage}");
  byte_258E0B7 = 19;
  strcpy((char *)&xmmword_258E0A0, "_Arrival_Percentage");
  int v42 = byte_258DE47;
  if (byte_258DE47 >= 0) {
    size_t v43 = byte_258DE47;
  }
  else {
    size_t v43 = qword_258DE38;
  }
  unint64_t v44 = v43 + v25;
  if (v43 + v25 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v44 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v43 + v25;
    if (!v43) {
      goto LABEL_88;
    }
    goto LABEL_84;
  }
  uint64_t v96 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v44 | 7) != 0x17) {
    uint64_t v96 = v44 | 7;
  }
  uint64_t v97 = v96 + 1;
  p_dst = (char *)operator new(v96 + 1);
  __dst.__r_.__value_.__l.__size_ = v43 + v25;
  __dst.__r_.__value_.__r.__words[2] = v97 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v43)
  {
LABEL_84:
    if (v42 >= 0) {
      unint64_t v46 = &qword_258DE30;
    }
    else {
      unint64_t v46 = (uint64_t *)qword_258DE30;
    }
    memmove(p_dst, v46, v43);
  }
LABEL_88:
  size_t v47 = &p_dst[v43];
  if (v25)
  {
    if ((int)v270 >= 0) {
      unint64_t v48 = &qword_258D0E0;
    }
    else {
      unint64_t v48 = (uint64_t *)qword_258D0E0;
    }
    memmove(v47, v48, v25);
  }
  v47[v25] = 0;
  int64_t v49 = std::string::append(&__dst, "_Percentage");
  long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  qword_258E0C8 = v49->__r_.__value_.__r.__words[2];
  xmmword_258E0B8 = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v51 = byte_258DE47;
  if (byte_258DE47 >= 0) {
    size_t v52 = byte_258DE47;
  }
  else {
    size_t v52 = qword_258DE38;
  }
  int v53 = byte_258D0F7;
  if (byte_258D0F7 >= 0) {
    size_t v54 = byte_258D0F7;
  }
  else {
    size_t v54 = unk_258D0E8;
  }
  unint64_t v55 = v54 + v52;
  if (v54 + v52 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v55 <= 0x16)
  {
    memset(&v281, 0, sizeof(v281));
    unint64_t v56 = (char *)&v281;
    *((unsigned char *)&v281.__r_.__value_.__s + 23) = v54 + v52;
    if (!v52) {
      goto LABEL_108;
    }
    goto LABEL_104;
  }
  uint64_t v98 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v55 | 7) != 0x17) {
    uint64_t v98 = v55 | 7;
  }
  uint64_t v99 = v98 + 1;
  unint64_t v56 = (char *)operator new(v98 + 1);
  v281.__r_.__value_.__l.__size_ = v54 + v52;
  v281.__r_.__value_.__r.__words[2] = v99 | 0x8000000000000000;
  v281.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  if (v52)
  {
LABEL_104:
    if (v51 >= 0) {
      unint64_t v57 = &qword_258DE30;
    }
    else {
      unint64_t v57 = (uint64_t *)qword_258DE30;
    }
    memmove(v56, v57, v52);
  }
LABEL_108:
  size_t v58 = &v56[v52];
  if (v54)
  {
    if (v53 >= 0) {
      unint64_t v59 = &qword_258D0E0;
    }
    else {
      unint64_t v59 = (uint64_t *)qword_258D0E0;
    }
    memmove(v58, v59, v54);
  }
  v58[v54] = 0;
  if (byte_258D127 >= 0) {
    uint64_t v60 = (const std::string::value_type *)&qword_258D110;
  }
  else {
    uint64_t v60 = (const std::string::value_type *)qword_258D110;
  }
  if (byte_258D127 >= 0) {
    std::string::size_type v61 = byte_258D127;
  }
  else {
    std::string::size_type v61 = *(void *)&byte_258D118;
  }
  int64_t v62 = std::string::append(&v281, v60, v61);
  long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  int v64 = std::string::append(&__dst, "_Percentage");
  long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  qword_258E0E0 = v64->__r_.__value_.__r.__words[2];
  xmmword_258E0D0 = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_121;
    }
  }
  else if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_121;
  }
  operator delete(v281.__r_.__value_.__l.__data_);
LABEL_121:
  int v66 = byte_258DE47;
  if (byte_258DE47 >= 0) {
    size_t v67 = byte_258DE47;
  }
  else {
    size_t v67 = qword_258DE38;
  }
  int v68 = byte_258D0F7;
  if (byte_258D0F7 >= 0) {
    size_t v69 = byte_258D0F7;
  }
  else {
    size_t v69 = unk_258D0E8;
  }
  unint64_t v70 = v69 + v67;
  if (v69 + v67 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v70 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    uint64_t v71 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v69 + v67;
    if (!v67) {
      goto LABEL_134;
    }
    goto LABEL_130;
  }
  uint64_t v100 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v70 | 7) != 0x17) {
    uint64_t v100 = v70 | 7;
  }
  uint64_t v101 = v100 + 1;
  uint64_t v71 = (char *)operator new(v100 + 1);
  __dst.__r_.__value_.__l.__size_ = v69 + v67;
  __dst.__r_.__value_.__r.__words[2] = v101 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
  if (v67)
  {
LABEL_130:
    if (v66 >= 0) {
      long long v72 = &qword_258DE30;
    }
    else {
      long long v72 = (uint64_t *)qword_258DE30;
    }
    memmove(v71, v72, v67);
  }
LABEL_134:
  uint64_t v73 = &v71[v67];
  if (v69)
  {
    if (v68 >= 0) {
      size_t v74 = &qword_258D0E0;
    }
    else {
      size_t v74 = (uint64_t *)qword_258D0E0;
    }
    memmove(v73, v74, v69);
  }
  v73[v69] = 0;
  uint64_t v75 = std::string::append(&__dst, "_Duration");
  long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
  qword_258E0F8 = v75->__r_.__value_.__r.__words[2];
  xmmword_258E0E8 = v76;
  v75->__r_.__value_.__l.__size_ = 0;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v77 = byte_258DE47;
  if (byte_258DE47 >= 0) {
    size_t v78 = byte_258DE47;
  }
  else {
    size_t v78 = qword_258DE38;
  }
  int v79 = byte_258D0F7;
  if (byte_258D0F7 >= 0) {
    size_t v80 = byte_258D0F7;
  }
  else {
    size_t v80 = unk_258D0E8;
  }
  unint64_t v81 = v80 + v78;
  if (v80 + v78 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v81 <= 0x16)
  {
    qword_258E108 = 0;
    unk_258E110 = 0;
    qword_258E100 = 0;
    int v82 = &qword_258E100;
    byte_258E117 = v80 + v78;
    if (!v78) {
      goto LABEL_154;
    }
    goto LABEL_150;
  }
  uint64_t v102 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v81 | 7) != 0x17) {
    uint64_t v102 = v81 | 7;
  }
  uint64_t v103 = v102 + 1;
  int v82 = (uint64_t *)operator new(v102 + 1);
  qword_258E108 = v80 + v78;
  unk_258E110 = v103 | 0x8000000000000000;
  qword_258E100 = (uint64_t)v82;
  if (v78)
  {
LABEL_150:
    if (v77 >= 0) {
      uint64_t v83 = &qword_258DE30;
    }
    else {
      uint64_t v83 = (uint64_t *)qword_258DE30;
    }
    memmove(v82, v83, v78);
  }
LABEL_154:
  uint64_t v84 = (char *)v82 + v78;
  if (v80)
  {
    if (v79 >= 0) {
      int v85 = &qword_258D0E0;
    }
    else {
      int v85 = (uint64_t *)qword_258D0E0;
    }
    memmove(v84, v85, v80);
  }
  v84[v80] = 0;
  int v86 = byte_258E117;
  if (byte_258E117 >= 0) {
    size_t v87 = byte_258E117;
  }
  else {
    size_t v87 = qword_258E108;
  }
  unint64_t v88 = v87 + 5;
  if (v87 + 5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v88 >= 0x17)
  {
    uint64_t v104 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v88 | 7) != 0x17) {
      uint64_t v104 = v88 | 7;
    }
    uint64_t v105 = v104 + 1;
    uint64_t v89 = (uint64_t *)operator new(v104 + 1);
    qword_258E120 = v87 + 5;
    unk_258E128 = v105 | 0x8000000000000000;
    qword_258E118 = (uint64_t)v89;
  }
  else
  {
    uint64_t v89 = &qword_258E118;
    qword_258E120 = 0;
    unk_258E128 = 0;
    qword_258E118 = 0;
    byte_258E12F = v87 + 5;
    if (!v87) {
      goto LABEL_201;
    }
  }
  if (v86 >= 0) {
    uint64_t v106 = &qword_258E100;
  }
  else {
    uint64_t v106 = (uint64_t *)qword_258E100;
  }
  memmove(v89, v106, v87);
LABEL_201:
  strcpy((char *)v89 + v87, "_Name");
  int v107 = byte_258DE47;
  if (byte_258DE47 >= 0) {
    size_t v108 = byte_258DE47;
  }
  else {
    size_t v108 = qword_258DE38;
  }
  int v109 = byte_258D0F7;
  if (byte_258D0F7 >= 0) {
    size_t v110 = byte_258D0F7;
  }
  else {
    size_t v110 = unk_258D0E8;
  }
  unint64_t v111 = v110 + v108;
  if (v110 + v108 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v111 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    unint64_t v112 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v110 + v108;
    if (!v108) {
      goto LABEL_214;
    }
    goto LABEL_210;
  }
  uint64_t v122 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v111 | 7) != 0x17) {
    uint64_t v122 = v111 | 7;
  }
  uint64_t v123 = v122 + 1;
  unint64_t v112 = (char *)operator new(v122 + 1);
  __dst.__r_.__value_.__l.__size_ = v110 + v108;
  __dst.__r_.__value_.__r.__words[2] = v123 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
  if (v108)
  {
LABEL_210:
    if (v107 >= 0) {
      long long v113 = &qword_258DE30;
    }
    else {
      long long v113 = (uint64_t *)qword_258DE30;
    }
    memmove(v112, v113, v108);
  }
LABEL_214:
  unsigned __int8 v114 = &v112[v108];
  if (v110)
  {
    if (v109 >= 0) {
      long long v115 = &qword_258D0E0;
    }
    else {
      long long v115 = (uint64_t *)qword_258D0E0;
    }
    memmove(v114, v115, v110);
  }
  v114[v110] = 0;
  unsigned __int8 v116 = std::string::append(&__dst, "_Connector_Type");
  long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
  qword_258E140 = v116->__r_.__value_.__r.__words[2];
  xmmword_258E130 = v117;
  v116->__r_.__value_.__l.__size_ = 0;
  v116->__r_.__value_.__r.__words[2] = 0;
  v116->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v118 = SHIBYTE(qword_258E140);
  if (qword_258E140 >= 0) {
    size_t v119 = HIBYTE(qword_258E140);
  }
  else {
    size_t v119 = *((void *)&xmmword_258E130 + 1);
  }
  unint64_t v120 = v119 + 6;
  if (v119 + 6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v120 >= 0x17)
  {
    uint64_t v124 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v120 | 7) != 0x17) {
      uint64_t v124 = v120 | 7;
    }
    uint64_t v125 = v124 + 1;
    unint64_t v121 = (uint64_t *)operator new(v124 + 1);
    qword_258E150 = v119 + 6;
    unk_258E158 = v125 | 0x8000000000000000;
    qword_258E148 = (uint64_t)v121;
  }
  else
  {
    unint64_t v121 = &qword_258E148;
    qword_258E150 = 0;
    unk_258E158 = 0;
    qword_258E148 = 0;
    byte_258E15F = v119 + 6;
    if (!v119) {
      goto LABEL_239;
    }
  }
  if (v118 >= 0) {
    uint64_t v126 = &xmmword_258E130;
  }
  else {
    uint64_t v126 = (long long *)xmmword_258E130;
  }
  memmove(v121, v126, v119);
LABEL_239:
  strcpy((char *)v121 + v119, "_Power");
  int v127 = byte_258DE47;
  if (byte_258DE47 >= 0) {
    size_t v128 = byte_258DE47;
  }
  else {
    size_t v128 = qword_258DE38;
  }
  int v129 = byte_258D0F7;
  if (byte_258D0F7 >= 0) {
    size_t v130 = byte_258D0F7;
  }
  else {
    size_t v130 = unk_258D0E8;
  }
  unint64_t v131 = v130 + v128;
  if (v130 + v128 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v131 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    v132 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v130 + v128;
    if (!v128) {
      goto LABEL_252;
    }
    goto LABEL_248;
  }
  uint64_t v161 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v131 | 7) != 0x17) {
    uint64_t v161 = v131 | 7;
  }
  uint64_t v162 = v161 + 1;
  v132 = (char *)operator new(v161 + 1);
  __dst.__r_.__value_.__l.__size_ = v130 + v128;
  __dst.__r_.__value_.__r.__words[2] = v162 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v132;
  if (v128)
  {
LABEL_248:
    if (v127 >= 0) {
      uint64_t v133 = &qword_258DE30;
    }
    else {
      uint64_t v133 = (uint64_t *)qword_258DE30;
    }
    memmove(v132, v133, v128);
  }
LABEL_252:
  v134 = &v132[v128];
  if (v130)
  {
    if (v129 >= 0) {
      long long v135 = &qword_258D0E0;
    }
    else {
      long long v135 = (uint64_t *)qword_258D0E0;
    }
    memmove(v134, v135, v130);
  }
  v134[v130] = 0;
  if (byte_258D8BF >= 0) {
    std::string::size_type v136 = (const std::string::value_type *)&qword_258D8A8;
  }
  else {
    std::string::size_type v136 = (const std::string::value_type *)qword_258D8A8;
  }
  if (byte_258D8BF >= 0) {
    std::string::size_type v137 = byte_258D8BF;
  }
  else {
    std::string::size_type v137 = unk_258D8B0;
  }
  long long v138 = std::string::append(&__dst, v136, v137);
  long long v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
  qword_258E170 = v138->__r_.__value_.__r.__words[2];
  xmmword_258E160 = v139;
  v138->__r_.__value_.__l.__size_ = 0;
  v138->__r_.__value_.__r.__words[2] = 0;
  v138->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v140 = byte_258DE47;
  if (byte_258DE47 >= 0) {
    size_t v141 = byte_258DE47;
  }
  else {
    size_t v141 = qword_258DE38;
  }
  int v142 = byte_258D0F7;
  if (byte_258D0F7 >= 0) {
    size_t v143 = byte_258D0F7;
  }
  else {
    size_t v143 = unk_258D0E8;
  }
  unint64_t v144 = v143 + v141;
  if (v143 + v141 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v144 <= 0x16)
  {
    memset(&v281, 0, sizeof(v281));
    v145 = (char *)&v281;
    *((unsigned char *)&v281.__r_.__value_.__s + 23) = v143 + v141;
    if (!v141) {
      goto LABEL_278;
    }
    goto LABEL_274;
  }
  uint64_t v163 = (v144 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v144 | 7) != 0x17) {
    uint64_t v163 = v144 | 7;
  }
  uint64_t v164 = v163 + 1;
  v145 = (char *)operator new(v163 + 1);
  v281.__r_.__value_.__l.__size_ = v143 + v141;
  v281.__r_.__value_.__r.__words[2] = v164 | 0x8000000000000000;
  v281.__r_.__value_.__r.__words[0] = (std::string::size_type)v145;
  if (v141)
  {
LABEL_274:
    if (v140 >= 0) {
      v146 = &qword_258DE30;
    }
    else {
      v146 = (uint64_t *)qword_258DE30;
    }
    memmove(v145, v146, v141);
  }
LABEL_278:
  v147 = &v145[v141];
  if (v143)
  {
    if (v142 >= 0) {
      long long v148 = &qword_258D0E0;
    }
    else {
      long long v148 = (uint64_t *)qword_258D0E0;
    }
    memmove(v147, v148, v143);
  }
  v147[v143] = 0;
  if (byte_258D127 >= 0) {
    long long v149 = (const std::string::value_type *)&qword_258D110;
  }
  else {
    long long v149 = (const std::string::value_type *)qword_258D110;
  }
  if (byte_258D127 >= 0) {
    std::string::size_type v150 = byte_258D127;
  }
  else {
    std::string::size_type v150 = *(void *)&byte_258D118;
  }
  char v151 = std::string::append(&v281, v149, v150);
  long long v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v152;
  v151->__r_.__value_.__l.__size_ = 0;
  v151->__r_.__value_.__r.__words[2] = 0;
  v151->__r_.__value_.__r.__words[0] = 0;
  if (byte_258D8BF >= 0) {
    std::string v153 = (const std::string::value_type *)&qword_258D8A8;
  }
  else {
    std::string v153 = (const std::string::value_type *)qword_258D8A8;
  }
  if (byte_258D8BF >= 0) {
    std::string::size_type v154 = byte_258D8BF;
  }
  else {
    std::string::size_type v154 = unk_258D8B0;
  }
  long long v155 = std::string::append(&__dst, v153, v154);
  long long v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
  qword_258E188 = v155->__r_.__value_.__r.__words[2];
  xmmword_258E178 = v156;
  v155->__r_.__value_.__l.__size_ = 0;
  v155->__r_.__value_.__r.__words[2] = 0;
  v155->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_297;
    }
  }
  else if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_297;
  }
  operator delete(v281.__r_.__value_.__l.__data_);
LABEL_297:
  byte_258E1A7 = 16;
  strcpy((char *)&xmmword_258E190, "Use_NACS_Adapter");
  byte_258E1BF = 16;
  strcpy(byte_258E1A8, "Start_Route_Sign");
  qword_258E1C0 = (uint64_t)operator new(0x20uLL);
  unk_258E1C8 = v276;
  strcpy((char *)qword_258E1C0, "Start_Route_Spoken_Primary");
  int v157 = byte_258C857;
  if (byte_258C857 >= 0) {
    size_t v158 = byte_258C857;
  }
  else {
    size_t v158 = qword_258C848;
  }
  unint64_t v159 = v158 + 27;
  if (v158 + 27 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v159 <= 0x16)
  {
    char v160 = &qword_258E1D8;
    qword_258E1E0 = 0;
    unk_258E1E8 = 0;
    qword_258E1D8 = 0;
    byte_258E1EF = v158 + 27;
LABEL_314:
    if (v157 >= 0) {
      uint64_t v167 = &qword_258C840;
    }
    else {
      uint64_t v167 = (uint64_t *)qword_258C840;
    }
    memmove(v160, v167, v158);
    goto LABEL_318;
  }
  uint64_t v165 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v159 | 7) != 0x17) {
    uint64_t v165 = v159 | 7;
  }
  uint64_t v166 = v165 + 1;
  char v160 = (uint64_t *)operator new(v165 + 1);
  qword_258E1E0 = v158 + 27;
  unk_258E1E8 = v166 | 0x8000000000000000;
  qword_258E1D8 = (uint64_t)v160;
  if (v158) {
    goto LABEL_314;
  }
LABEL_318:
  strcpy((char *)v160 + v158, "Turn_Around_To_Route_Spoken");
  strcpy(&byte_258E207, "\t_Two_Lanes");
  strcpy((char *)&qword_258E1F0, "_One_Lane");
  strcpy(&byte_258E21F, "\n_Three_Lanes");
  byte_258E237 = 12;
  byte_258E24F = 11;
  strcpy((char *)&qword_258E238, "_Four_Lanes");
  byte_258E267 = 11;
  strcpy((char *)&qword_258E250, "_Five_Lanes");
  strcpy(&byte_258E27F, "\n_Seven_Lanes");
  strcpy((char *)&qword_258E268, "_Six_Lanes");
  byte_258E297 = 12;
  byte_258E2AF = 12;
  strcpy((char *)&qword_258E298, "_Eight_Lanes");
  byte_258E2C7 = 12;
  strcpy((char *)&qword_258E2B0, "_Second_Lane");
  byte_258E2DF = 11;
  strcpy((char *)&qword_258E2C8, "_Third_Lane");
  byte_258E2F7 = 19;
  long long v270 = *(_OWORD *)"_Second_Third_Lanes";
  strcpy((char *)&xmmword_258E2E0, "_Second_Third_Lanes");
  byte_258E30F = 4;
  strcpy((char *)&dword_258E2F8, "Left");
  byte_258E327 = 5;
  byte_258E314 = 116;
  dword_258E310 = 1751607634;
  byte_258E315 = 0;
  byte_258E33F = 6;
  strcpy((char *)&dword_258E328, "Middle");
  BYTE1(qword_258E350) = 0;
  WORD1(qword_258E350) = 0;
  HIDWORD(qword_258E350) = 0x10000000;
  strcpy((char *)dword_258E340, "Left_Second_Lane");
  BYTE1(qword_258E368) = 0;
  WORD1(qword_258E368) = 0;
  HIDWORD(qword_258E368) = 285212672;
  strcpy((char *)&dword_258E358, "Right_Second_Lan");
  qword_258E380 = 0xF00000000000000;
  strcpy((char *)&dword_258E370, "Left_Third_Lane");
  qword_258E398 = 0x1000000000000000;
  byte_258E38C = 116;
  dword_258E388 = 1751607634;
  dword_258E394 = 1701732684;
  unk_258E38D = *(void *)"_Third_Lane";
  v168 = (char *)operator new(0x19uLL);
  qword_258E3A0 = (uint64_t)v168;
  unk_258E3A8 = v280;
  *(_DWORD *)v168 = 1952867660;
  strcpy(v168 + 19, "anes");
  *(_OWORD *)(v168 + 4) = v270;
  int v169 = (char *)operator new(0x20uLL);
  qword_258E3B8 = (uint64_t)v169;
  xmmword_258E3C0 = v279;
  *(_DWORD *)int v169 = 1751607634;
  v169[4] = 116;
  strcpy(v169 + 20, "anes");
  *(_OWORD *)(v169 + 5) = v270;
  byte_258E3E7 = 5;
  strcpy((char *)&dword_258E3D0, "_Stay");
  byte_258E3FF = 13;
  strcpy((char *)&qword_258E3E8, "Continue_Sign");
  byte_258E417 = 8;
  strcpy((char *)&qword_258E400, "Continue");
  int v170 = byte_258D8D7;
  if (byte_258D8D7 >= 0) {
    size_t v171 = byte_258D8D7;
  }
  else {
    size_t v171 = qword_258D8C8;
  }
  unint64_t v172 = v171 + 8;
  if (v171 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v172 >= 0x17)
  {
    uint64_t v174 = (v172 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v172 | 7) != 0x17) {
      uint64_t v174 = v172 | 7;
    }
    uint64_t v175 = v174 + 1;
    v176 = operator new(v174 + 1);
    qword_258E420 = v171 + 8;
    qword_258E428 = v175 | 0x8000000000000000;
    qword_258E418 = (uint64_t)v176;
    void *v176 = 0x65756E69746E6F43;
    uint64_t v173 = v176 + 1;
  }
  else
  {
    qword_258E428 = 0;
    HIBYTE(qword_258E428) = v171 + 8;
    qword_258E418 = 0x65756E69746E6F43;
    qword_258E420 = 0;
    uint64_t v173 = &qword_258E420;
    if (!v171) {
      goto LABEL_332;
    }
  }
  if (v170 >= 0) {
    int v177 = &qword_258D8C0;
  }
  else {
    int v177 = (uint64_t *)qword_258D8C0;
  }
  memmove(v173, v177, v171);
LABEL_332:
  *((unsigned char *)v173 + v171) = 0;
  int v178 = SHIBYTE(qword_258D930);
  if (qword_258D930 >= 0) {
    size_t v179 = HIBYTE(qword_258D930);
  }
  else {
    size_t v179 = unk_258D928;
  }
  unint64_t v180 = v179 + 8;
  if (v179 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v180 >= 0x17)
  {
    uint64_t v182 = (v180 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v180 | 7) != 0x17) {
      uint64_t v182 = v180 | 7;
    }
    uint64_t v183 = v182 + 1;
    v184 = operator new(v182 + 1);
    qword_258E438 = v179 + 8;
    qword_258E440 = v183 | 0x8000000000000000;
    qword_258E430 = (uint64_t)v184;
    void *v184 = qword_258E400;
    uint64_t v181 = v184 + 1;
  }
  else
  {
    qword_258E440 = 0;
    HIBYTE(qword_258E440) = v179 + 8;
    qword_258E430 = qword_258E400;
    qword_258E438 = 0;
    uint64_t v181 = &qword_258E438;
    if (!v179) {
      goto LABEL_346;
    }
  }
  if (v178 >= 0) {
    v185 = &qword_258D920;
  }
  else {
    v185 = (uint64_t *)qword_258D920;
  }
  memmove(v181, v185, v179);
LABEL_346:
  *((unsigned char *)v181 + v179) = 0;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 83;
  HIBYTE(v284) = 2;
  strcpy((char *)&v283, "SW");
  HIBYTE(v286) = 1;
  LOWORD(v285[0]) = 87;
  HIBYTE(v288) = 2;
  strcpy((char *)&v287, "NW");
  HIBYTE(v290) = 1;
  LOWORD(v289[0]) = 78;
  HIBYTE(v292) = 2;
  strcpy((char *)&v291, "NE");
  HIBYTE(v294) = 1;
  LOWORD(v293) = 69;
  HIBYTE(v296) = 2;
  strcpy((char *)&__p, "SE");
  sub_4BDC0C(qword_258E448, (uint64_t)&__dst, 8uLL);
  if (SHIBYTE(v296) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v294) & 0x80000000) == 0)
    {
LABEL_348:
      if ((SHIBYTE(v292) & 0x80000000) == 0) {
        goto LABEL_349;
      }
      goto LABEL_383;
    }
  }
  else if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
    goto LABEL_348;
  }
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_349:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_350;
    }
    goto LABEL_384;
  }
LABEL_383:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_350:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_351;
    }
    goto LABEL_385;
  }
LABEL_384:
  operator delete(v289[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_351:
    if ((SHIBYTE(v286) & 0x80000000) == 0) {
      goto LABEL_352;
    }
    goto LABEL_386;
  }
LABEL_385:
  operator delete((void *)v287);
  if ((SHIBYTE(v286) & 0x80000000) == 0)
  {
LABEL_352:
    if ((SHIBYTE(v284) & 0x80000000) == 0) {
      goto LABEL_353;
    }
LABEL_387:
    operator delete((void *)v283);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_354;
    }
    goto LABEL_388;
  }
LABEL_386:
  operator delete(v285[0]);
  if (SHIBYTE(v284) < 0) {
    goto LABEL_387;
  }
LABEL_353:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_354;
  }
LABEL_388:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_354:
  byte_258E477 = 13;
  strcpy((char *)&qword_258E460, "{instruction}");
  byte_258E48F = 20;
  strcpy((char *)&xmmword_258E478, "{primaryInstruction}");
  strcpy((char *)&xmmword_258E490, "{secondaryInstruction}");
  HIBYTE(word_258E4A6) = 22;
  qword_258E4A8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_258E4B0 = v278;
  strcpy((char *)qword_258E4A8, "{andSecondaryInstruction}");
  qword_258E4C0 = (uint64_t)operator new(0x20uLL);
  unk_258E4C8 = v279;
  strcpy((char *)qword_258E4C0, "{toSecondaryInstruction}");
  byte_258E4EF = 21;
  strcpy((char *)&xmmword_258E4D8, "{continueInstruction}");
  qword_258E4F0 = (uint64_t)operator new(0x20uLL);
  unk_258E4F8 = v276;
  strcpy((char *)qword_258E4F0, "{thenSecondaryInstruction}");
  byte_258E51F = 14;
  strcpy((char *)&qword_258E508, "{instruction1}");
  byte_258E537 = 14;
  strcpy((char *)&qword_258E520, "{instruction2}");
  strcpy(&byte_258E54F, "\n{nextDistance}");
  strcpy((char *)&qword_258E538, "{distance}");
  byte_258E567 = 14;
  byte_258E57F = 16;
  strcpy(byte_258E568, "{valid_distance}");
  strcpy(&byte_258E597, "\n{valid_distance}");
  strcpy((char *)&qword_258E580, "{distance}");
  byte_258E5AF = 16;
  byte_258E5C7 = 15;
  strcpy((char *)&qword_258E5B0, "{ClimbDistance}");
  byte_258E5DF = 17;
  strcpy(byte_258E5C8, "{DescentDistance}");
  byte_258E5F7 = 13;
  strcpy((char *)&qword_258E5E0, "{nonBrkSpace}");
  byte_258E60F = 9;
  strcpy((char *)&qword_258E5F8, "{newLine}");
  byte_258E627 = 6;
  word_258E614 = -24382;
  dword_258E610 = -1211981630;
  byte_258E616 = 0;
  byte_258E63F = 2;
  word_258E628 = -24382;
  byte_258E62A = 0;
  byte_258E657 = 1;
  word_258E640 = 10;
  byte_258E66F = 1;
  word_258E658 = 32;
  byte_258E687 = 2;
  strcpy((char *)&word_258E670, "\n\n");
  strcpy(&byte_258E69F, "\t{TowardShield1}");
  strcpy((char *)&xmmword_258E688, "{Shield1}");
  byte_258E6B7 = 15;
  strcpy(&byte_258E6CF, "\t{TowardShield2}");
  strcpy((char *)&xmmword_258E6B8, "{Shield2}");
  byte_258E6E7 = 15;
  byte_258E6FF = 12;
  strcpy((char *)&xmmword_258E6E8, "{Direction1}");
  byte_258E717 = 12;
  strcpy((char *)&xmmword_258E700, "{Direction2}");
  byte_258E72F = 18;
  strcpy((char *)&xmmword_258E718, "{TowardDirection1}");
  byte_258E747 = 18;
  strcpy((char *)&xmmword_258E730, "{TowardDirection2}");
  byte_258E75F = 7;
  strcpy((char *)&dword_258E748, "{Icon1}");
  byte_258E777 = 7;
  strcpy((char *)&dword_258E760, "{Icon2}");
  byte_258E778[23] = 14;
  strcpy(byte_258E778, "{Intersection}");
  byte_258E7A7 = 6;
  strcpy((char *)&xmmword_258E790, "{Road}");
  byte_258E7BF = 7;
  strcpy((char *)&dword_258E7A8, "{Road1}");
  byte_258E7D7 = 7;
  strcpy((char *)&xmmword_258E7C0, "{Road2}");
  strcpy(&byte_258E7EF, "\n{Freeway}");
  strcpy((char *)&qword_258E7D8, "{Elevator}");
  strcpy(&byte_258E807, "\t{Ferry}");
  byte_258E81F = 7;
  byte_258E837 = 13;
  strcpy((char *)&xmmword_258E820, "{ShuttleName}");
  byte_258E84F = 11;
  strcpy((char *)&xmmword_258E838, "{Signpost1}");
  byte_258E867 = 11;
  strcpy((char *)&xmmword_258E850, "{Signpost2}");
  byte_258E87F = 12;
  strcpy((char *)&xmmword_258E868, "{ExitNumber}");
  strcpy(&byte_258E897, "\t{Name}");
  strcpy((char *)&xmmword_258E880, "{Address}");
  byte_258E8AF = 6;
  byte_258E8C7 = 11;
  strcpy((char *)&xmmword_258E8B0, "{PlaceName}");
  byte_258E8DF = 14;
  strcpy((char *)&xmmword_258E8C8, "{ElevatorName}");
  byte_258E8F7 = 15;
  strcpy((char *)&xmmword_258E8E0, "{EscalatorName}");
  byte_258E90F = 12;
  strcpy((char *)&xmmword_258E8F8, "{StairsName}");
  strcpy(&byte_258E927, "\n{BridgeName}");
  strcpy((char *)&xmmword_258E910, "{RampName}");
  byte_258E93F = 12;
  byte_258E957 = 12;
  strcpy((char *)&xmmword_258E940, "{TunnelName}");
  byte_258E96F = 13;
  strcpy((char *)&xmmword_258E958, "{CustomLabel}");
  std::string __dst = *(std::string *)byte_258E778;
  long long v283 = xmmword_258E790;
  uint64_t v284 = unk_258E7A0;
  *(_OWORD *)uint64_t v285 = *(_OWORD *)&dword_258E7A8;
  uint64_t v286 = unk_258E7B8;
  long long v287 = xmmword_258E7C0;
  uint64_t v288 = unk_258E7D0;
  *(_OWORD *)long long v289 = *(_OWORD *)&qword_258E7D8;
  uint64_t v290 = unk_258E7E8;
  uint64_t v292 = unk_258E800;
  long long v291 = xmmword_258E7F0;
  long long v293 = *(_OWORD *)&dword_258E808;
  uint64_t v294 = unk_258E818;
  uint64_t v296 = unk_258E830;
  long long __p = xmmword_258E820;
  long long v297 = xmmword_258E838;
  uint64_t v298 = unk_258E848;
  uint64_t v300 = unk_258E860;
  long long v299 = xmmword_258E850;
  long long v301 = xmmword_258E868;
  long long v303 = xmmword_258E880;
  uint64_t v302 = unk_258E878;
  uint64_t v304 = unk_258E890;
  long long v305 = xmmword_258E898;
  long long v307 = xmmword_258E8B0;
  uint64_t v306 = unk_258E8A8;
  uint64_t v308 = unk_258E8C0;
  long long v309 = xmmword_258E8C8;
  long long v311 = xmmword_258E8E0;
  uint64_t v310 = unk_258E8D8;
  uint64_t v312 = unk_258E8F0;
  long long v313 = xmmword_258E8F8;
  long long v315 = xmmword_258E910;
  uint64_t v314 = unk_258E908;
  uint64_t v316 = unk_258E920;
  long long v317 = xmmword_258E928;
  long long v319 = xmmword_258E940;
  uint64_t v318 = unk_258E938;
  uint64_t v320 = unk_258E950;
  uint64_t v322 = unk_258E968;
  long long v321 = xmmword_258E958;
  sub_4BDC0C(&qword_258E970, (uint64_t)&__dst, 0x15uLL);
  if (SHIBYTE(v322) < 0)
  {
    operator delete((void *)v321);
    if ((SHIBYTE(v320) & 0x80000000) == 0)
    {
LABEL_356:
      if ((SHIBYTE(v318) & 0x80000000) == 0) {
        goto LABEL_357;
      }
      goto LABEL_391;
    }
  }
  else if ((SHIBYTE(v320) & 0x80000000) == 0)
  {
    goto LABEL_356;
  }
  operator delete((void *)v319);
  if ((SHIBYTE(v318) & 0x80000000) == 0)
  {
LABEL_357:
    if ((SHIBYTE(v316) & 0x80000000) == 0) {
      goto LABEL_358;
    }
    goto LABEL_392;
  }
LABEL_391:
  operator delete((void *)v317);
  if ((SHIBYTE(v316) & 0x80000000) == 0)
  {
LABEL_358:
    if ((SHIBYTE(v314) & 0x80000000) == 0) {
      goto LABEL_359;
    }
    goto LABEL_393;
  }
LABEL_392:
  operator delete((void *)v315);
  if ((SHIBYTE(v314) & 0x80000000) == 0)
  {
LABEL_359:
    if ((SHIBYTE(v312) & 0x80000000) == 0) {
      goto LABEL_360;
    }
    goto LABEL_394;
  }
LABEL_393:
  operator delete((void *)v313);
  if ((SHIBYTE(v312) & 0x80000000) == 0)
  {
LABEL_360:
    if ((SHIBYTE(v310) & 0x80000000) == 0) {
      goto LABEL_361;
    }
    goto LABEL_395;
  }
LABEL_394:
  operator delete((void *)v311);
  if ((SHIBYTE(v310) & 0x80000000) == 0)
  {
LABEL_361:
    if ((SHIBYTE(v308) & 0x80000000) == 0) {
      goto LABEL_362;
    }
    goto LABEL_396;
  }
LABEL_395:
  operator delete((void *)v309);
  if ((SHIBYTE(v308) & 0x80000000) == 0)
  {
LABEL_362:
    if ((SHIBYTE(v306) & 0x80000000) == 0) {
      goto LABEL_363;
    }
    goto LABEL_397;
  }
LABEL_396:
  operator delete((void *)v307);
  if ((SHIBYTE(v306) & 0x80000000) == 0)
  {
LABEL_363:
    if ((SHIBYTE(v304) & 0x80000000) == 0) {
      goto LABEL_364;
    }
    goto LABEL_398;
  }
LABEL_397:
  operator delete((void *)v305);
  if ((SHIBYTE(v304) & 0x80000000) == 0)
  {
LABEL_364:
    if ((SHIBYTE(v302) & 0x80000000) == 0) {
      goto LABEL_365;
    }
    goto LABEL_399;
  }
LABEL_398:
  operator delete((void *)v303);
  if ((SHIBYTE(v302) & 0x80000000) == 0)
  {
LABEL_365:
    if ((SHIBYTE(v300) & 0x80000000) == 0) {
      goto LABEL_366;
    }
    goto LABEL_400;
  }
LABEL_399:
  operator delete((void *)v301);
  if ((SHIBYTE(v300) & 0x80000000) == 0)
  {
LABEL_366:
    if ((SHIBYTE(v298) & 0x80000000) == 0) {
      goto LABEL_367;
    }
    goto LABEL_401;
  }
LABEL_400:
  operator delete((void *)v299);
  if ((SHIBYTE(v298) & 0x80000000) == 0)
  {
LABEL_367:
    if ((SHIBYTE(v296) & 0x80000000) == 0) {
      goto LABEL_368;
    }
    goto LABEL_402;
  }
LABEL_401:
  operator delete((void *)v297);
  if ((SHIBYTE(v296) & 0x80000000) == 0)
  {
LABEL_368:
    if ((SHIBYTE(v294) & 0x80000000) == 0) {
      goto LABEL_369;
    }
    goto LABEL_403;
  }
LABEL_402:
  operator delete((void *)__p);
  if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
LABEL_369:
    if ((SHIBYTE(v292) & 0x80000000) == 0) {
      goto LABEL_370;
    }
    goto LABEL_404;
  }
LABEL_403:
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_370:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_371;
    }
    goto LABEL_405;
  }
LABEL_404:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_371:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_372;
    }
    goto LABEL_406;
  }
LABEL_405:
  operator delete(v289[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_372:
    if ((SHIBYTE(v286) & 0x80000000) == 0) {
      goto LABEL_373;
    }
    goto LABEL_407;
  }
LABEL_406:
  operator delete((void *)v287);
  if ((SHIBYTE(v286) & 0x80000000) == 0)
  {
LABEL_373:
    if ((SHIBYTE(v284) & 0x80000000) == 0) {
      goto LABEL_374;
    }
LABEL_408:
    operator delete((void *)v283);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_375;
    }
    goto LABEL_409;
  }
LABEL_407:
  operator delete(v285[0]);
  if (SHIBYTE(v284) < 0) {
    goto LABEL_408;
  }
LABEL_374:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_375;
  }
LABEL_409:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_375:
  qword_258E988 = (uint64_t)operator new(0x19uLL);
  *(_OWORD *)algn_258E990 = v280;
  strcpy((char *)qword_258E988, "From_User_Location_List");
  byte_258E9B7 = 20;
  strcpy((char *)&xmmword_258E9A0, "Origin_Waypoint_List");
  *(void *)&xmmword_258E9B8 = operator new(0x20uLL);
  *(long long *)((char *)&xmmword_258E9B8 + 8) = v276;
  strcpy((char *)xmmword_258E9B8, "Intermediate_Waypoint_List");
  *(void *)&xmmword_258E9D0 = operator new(0x20uLL);
  *(long long *)((char *)&xmmword_258E9D0 + 8) = v278;
  strcpy((char *)xmmword_258E9D0, "Destination_Waypoint_List");
  byte_258E9FF = 15;
  strcpy(byte_258E9E8, "{toDestination}");
  byte_258EA17 = 13;
  strcpy((char *)&xmmword_258EA00, "{Destination}");
  byte_258EA2F = 7;
  strcpy(byte_258EA18, "To_Home");
  byte_258EA47 = 14;
  strcpy(byte_258EA30, "To_ContactHome");
  byte_258EA5F = 7;
  strcpy(byte_258EA48, "To_Work");
  byte_258EA77 = 14;
  strcpy(byte_258EA60, "To_ContactWork");
  strcpy(&byte_258EA8F, "\nTo_Business");
  strcpy(byte_258EA78, "To_Address");
  byte_258EAA7 = 11;
  byte_258EABF = 16;
  strcpy(byte_258EAA8, "To_Other_Contact");
  strcpy(&byte_258EAD7, "\tTo_ContactSchool");
  strcpy(byte_258EAC0, "To_School");
  byte_258EAEF = 16;
  byte_258EB07 = 17;
  strcpy(algn_258EAF0, "To_PersonLocation");
  qword_258EB08 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_258EB10 = v277;
  strcpy((char *)qword_258EB08, "To_ContactCustomLabelAddress");
  byte_258EB37 = 7;
  strcpy((char *)&dword_258EB20, "At_Home");
  byte_258EB4F = 14;
  strcpy((char *)&qword_258EB38, "At_ContactHome");
  byte_258EB67 = 7;
  strcpy((char *)&dword_258EB50, "At_Work");
  byte_258EB7F = 14;
  strcpy((char *)&qword_258EB68, "At_ContactWork");
  strcpy(&byte_258EB97, "\nAt_Business");
  strcpy((char *)&qword_258EB80, "At_Address");
  byte_258EBAF = 11;
  byte_258EBC7 = 16;
  strcpy(algn_258EBB0, "At_Other_Contact");
  byte_258EBDF = 4;
  strcpy((char *)&qword_258EBC8, "Home");
  byte_258EBF7 = 11;
  strcpy((char *)&qword_258EBE0 + 7, "Home");
  qword_258EBE0 = *(void *)&v264[16];
  byte_258EC0F = 4;
  strcpy((char *)&qword_258EBF8, "Work");
  byte_258EC27 = 11;
  strcpy((char *)&qword_258EC10 + 7, "Work");
  qword_258EC10 = *(void *)v264;
  byte_258EC3F = 7;
  strcpy((char *)&qword_258EC28, "Address");
  byte_258EC57 = 8;
  strcpy((char *)&qword_258EC40, "Business");
  byte_258EC6F = 13;
  qword_258EC58 = *(void *)&v264[48];
  *(uint64_t *)((char *)&qword_258EC58 + 5) = *(void *)&v264[32];
  BYTE5(qword_258EC60) = 0;
  byte_258EC87 = 6;
  strcpy((char *)&qword_258EC70, "School");
  byte_258EC9F = 13;
  strcpy((char *)&qword_258EC88, "ContactSchool");
  byte_258ECB7 = 14;
  strcpy((char *)&qword_258ECA0, "PersonLocation");
  qword_258ECB8 = (uint64_t)operator new(0x20uLL);
  xmmword_258ECC0 = v278;
  strcpy((char *)qword_258ECB8, "ContactCustomLabelAddress");
  if (byte_258EA17 < 0)
  {
    sub_4200(&xmmword_258ECD0, (void *)xmmword_258EA00, *((unint64_t *)&xmmword_258EA00 + 1));
  }
  else
  {
    xmmword_258ECD0 = xmmword_258EA00;
    qword_258ECE0 = unk_258EA10;
  }
  byte_258ECFF = 16;
  strcpy((char *)&xmmword_258ECE8, "{PrevExitNumber}");
  byte_258ED17 = 10;
  strcpy((char *)&qword_258ED00, "{PrevRoad}");
  qword_258ED18 = (uint64_t)operator new(0x20uLL);
  unk_258ED20 = v279;
  strcpy((char *)qword_258ED18, "{RouteTotalExpectedTime}");
  byte_258ED47 = 18;
  strcpy(byte_258ED30, "{ChargePercentage}");
  qword_258ED48 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_258ED50 = v273;
  strcpy((char *)qword_258ED48, "{RemainingChargePercentage}");
  byte_258ED77 = 16;
  strcpy(byte_258ED60, "{ChargeDuration}");
  byte_258ED8F = 15;
  strcpy((char *)&qword_258ED78, "{ConnectorType}");
  byte_258EDA7 = 19;
  strcpy(byte_258ED90, "{ChargeStationName}");
  byte_258EDBF = 7;
  strcpy((char *)&qword_258EDA8, "{Power}");
  byte_258EDD7 = 13;
  strcpy((char *)&qword_258EDC0, "{VehicleName}");
  byte_258EDEF = 18;
  strcpy((char *)&xmmword_258EDD8, "{AreaIncidentName}");
  byte_258EE07 = 14;
  strcpy((char *)&qword_258EDF0, "{AreaIncident}");
  byte_258EE1F = 16;
  strcpy((char *)&xmmword_258EE08, "{AffectedRegion}");
  byte_258EE37 = 21;
  strcpy(byte_258EE20, "{AreaIncidentWeblink}");
  byte_258EE4F = 20;
  strcpy((char *)&xmmword_258EE38, "{AreaIncidentAgency}");
  byte_258EE67 = 11;
  strcpy((char *)&qword_258EE50, "{IssueTime}");
  byte_258EE7F = 12;
  strcpy((char *)&qword_258EE68, "{UpdateTime}");
  byte_258EE97 = 11;
  strcpy((char *)&qword_258EE80, "{IssueDate}");
  byte_258EEAF = 12;
  strcpy((char *)&qword_258EE98, "{UpdateDate}");
  qword_258EEB0 = (uint64_t)operator new(0x20uLL);
  unk_258EEB8 = v279;
  strcpy((char *)qword_258EEB0, "{AreaIncidentDataSource}");
  byte_258EEDF = 13;
  strcpy((char *)&qword_258EEC8, "{AreaHectare}");
  byte_258EEF7 = 10;
  strcpy((char *)&qword_258EEE0, "{AreaAcre}");
  qword_258EEF8 = (uint64_t)operator new(0x20uLL);
  unk_258EF00 = v275;
  strcpy((char *)qword_258EEF8, "{WildfirePercentageContained}");
  qword_258EF10 = (uint64_t)operator new(0x28uLL);
  unk_258EF18 = v268[2];
  strcpy((char *)qword_258EF10, "{WildfireExpectedContainmentDate}");
  qword_258EF28 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_258EF30 = v277;
  strcpy((char *)qword_258EF28, "{ServerRecommendedRouteName}");
  qword_258EF40 = (uint64_t)operator new(0x20uLL);
  unk_258EF48 = v277;
  strcpy((char *)qword_258EF40, "{ServerNonRecommendedRoute1}");
  qword_258EF58 = (uint64_t)operator new(0x20uLL);
  unk_258EF60 = v277;
  strcpy((char *)qword_258EF58, "{ServerNonRecommendedRoute2}");
  byte_258EF87 = 12;
  strcpy((char *)&qword_258EF70, "{ClientDest}");
  byte_258EF9F = 6;
  strcpy((char *)&dword_258EF88, "{Name}");
  qword_258EFA0 = (uint64_t)operator new(0x20uLL);
  unk_258EFA8 = v268[1];
  strcpy((char *)qword_258EFA0, "ProactiveAlert_FasterRouteTitle");
  qword_258EFB8 = (uint64_t)operator new(0x20uLL);
  unk_258EFC0 = v276;
  strcpy((char *)qword_258EFB8, "ProactiveAlert_RoadClosure");
  qword_258EFD0 = (uint64_t)operator new(0x30uLL);
  unk_258EFD8 = v271;
  strcpy((char *)qword_258EFD0, "ProactiveAlert_UnusuallyHeavyTrafficOnTwo");
  qword_258EFE8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_258EFF0 = v274;
  strcpy((char *)qword_258EFE8, "ProactiveAlert_FasterRouteTitle_to_Home");
  qword_258F000 = (uint64_t)operator new(0x28uLL);
  unk_258F008 = v274;
  strcpy((char *)qword_258F000, "ProactiveAlert_FasterRouteTitle_to_Work");
  qword_258F018 = (uint64_t)operator new(0x28uLL);
  unk_258F020 = v274;
  strcpy((char *)qword_258F018, "ProactiveAlert_FasterRouteTitle_to_Name");
  qword_258F030 = (uint64_t)operator new(0x30uLL);
  unk_258F038 = xmmword_20B93B0;
  strcpy((char *)qword_258F030, "ProactiveAlert_FasterRouteTitle_to_StreetName");
  byte_258F05F = 17;
  strcpy(byte_258F048, "Proactive_Driving");
  strcpy(&byte_258F077, "\n{RouteName}");
  strcpy((char *)&qword_258F060, "_RouteName");
  byte_258F08F = 11;
  qword_258F090 = (uint64_t)operator new(0x28uLL);
  unk_258F098 = v268[2];
  strcpy((char *)qword_258F090, "Pass_Traffic_Light_Spoken_Primary");
  qword_258F0A8 = (uint64_t)operator new(0x20uLL);
  unk_258F0B0 = v275;
  strcpy((char *)qword_258F0A8, "Pass_Stop_Sign_Spoken_Primary");
  unk_258F0C0 = operator new(0x20uLL);
  unk_258F0C8 = v268[0];
  strcpy(unk_258F0C0, "Pass_Roundabout_Spoken_Primary");
  strcpy(&byte_258F0EF, "\nBannerBody");
  strcpy(byte_258F0D8, "BannerHead");
  strcpy(&byte_258F107, "\nBannerDescription");
  byte_258F11F = 17;
  strcpy(&byte_258F137, "\n_Incident");
  strcpy((char *)&qword_258F120, "VoiceAlert");
  strcpy(&byte_258F14F, "\t_Area_Incident");
  byte_258F167 = 14;
  byte_258F17F = 15;
  strcpy((char *)&qword_258F168, "_Area_Incidents");
  strcpy(&byte_258F197, "\t_Crash");
  strcpy((char *)&qword_258F180, "_Accident");
  byte_258F1AF = 6;
  byte_258F1C7 = 16;
  strcpy((char *)&xmmword_258F1B0, "_Congestion_Zone");
  strcpy(&byte_258F1DF, "\n_Environmental_Zone");
  strcpy((char *)&qword_258F1C8, "_Toll_Zone");
  byte_258F1F7 = 19;
  BYTE1(qword_258F208) = 116;
  WORD1(qword_258F208) = 0;
  HIDWORD(qword_258F208) = 301989888;
  strcpy(byte_258F210, "_Construction");
  strcpy((char *)&qword_258F1F8, "_Incident_Accide");
  byte_258F227 = 13;
  byte_258F23F = 7;
  strcpy((char *)&dword_258F228, "_Hazard");
  byte_258F257 = 12;
  strcpy((char *)&qword_258F240, "_LaneClosure");
  byte_258F26F = 12;
  strcpy((char *)&qword_258F258, "_LaneTrailer");
  qmemcpy(&byte_258F287, "\t_LaneTrailer", 13);
  strcpy((char *)&qword_258F270, "_Shoulder");
  qword_258F298 = 0x1500007200000000;
  *(void *)algn_258F294 = *(void *)"_Shoulder";
  strcpy((char *)&xmmword_258F2A0, "_Causing_Traffic_Delay");
  HIBYTE(word_258F2B6) = 22;
  byte_258F2CF = 6;
  strcpy((char *)&dword_258F2B8, "_Timed");
  byte_258F2E7 = 12;
  strcpy((char *)&qword_258F2D0, "_HasDistance");
  byte_258F2FF = 8;
  strcpy((char *)&qword_258F2E8, "_Closure");
  strcpy(&byte_258F317, "\n_BadRoad");
  strcpy((char *)&qword_258F300, "_NoReroute");
  byte_258F32F = 8;
  byte_258F347 = 12;
  strcpy((char *)&qword_258F330, "_TollTrailer");
  byte_258F35F = 12;
  strcpy((char *)&qword_258F348, "_BestTrailer");
  byte_258F377 = 8;
  strcpy((char *)&qword_258F360, "_Trailer");
  byte_258F38F = 18;
  strcpy((char *)&xmmword_258F378, "_Secondary_Trailer");
  byte_258F3A7 = 8;
  strcpy((char *)&qword_258F390, "_Savings");
  byte_258F3BF = 8;
  strcpy((char *)&qword_258F3A8, "_AltRoad");
  byte_258F3D7 = 6;
  strcpy((char *)&dword_258F3C0, "_Named");
  byte_258F3EF = 6;
  strcpy((char *)&dword_258F3D8, "_NAMED");
  byte_258F407 = 22;
  strcpy((char *)&xmmword_258F3F0, "_Named_Suggested_Route");
  qword_258F420 = 0x1000000000000000;
  xmmword_258F410 = xmmword_20E81D0;
  byte_258F43F = 11;
  strcpy((char *)&qword_258F428, "_Speed_Trap");
  byte_258F457 = 4;
  strcpy((char *)&dword_258F440, "_UGI");
  byte_258F46F = 12;
  strcpy((char *)&qword_258F458, "_Safer_Route");
  qword_258F470 = (uint64_t)operator new(0x20uLL);
  unk_258F478 = v268[1];
  strcpy((char *)qword_258F470, "BlockedRouteByBlockingIncident_");
  qword_258F488 = (uint64_t)operator new(0x28uLL);
  long long v270 = xmmword_20B9280;
  *(_OWORD *)algn_258F490 = xmmword_20B9280;
  strcpy((char *)qword_258F488, "BlockedRouteByManeuverRestriction_");
  qword_258F4A0 = (uint64_t)operator new(0x20uLL);
  unk_258F4A8 = v268[0];
  strcpy((char *)qword_258F4A0, "BlockedRouteByTimeRestriction_");
  qword_258F4B8 = (uint64_t)operator new(0x28uLL);
  unk_258F4C0 = xmmword_20B8FD0;
  strcpy((char *)qword_258F4B8, "SuggestRouteToAvoidBlockingIncident_");
  qword_258F4D0 = (uint64_t)operator new(0x30uLL);
  unk_258F4D8 = xmmword_20B9380;
  strcpy((char *)qword_258F4D0, "SuggestRouteToAvoidBlockingManeuverRestriction_");
  qword_258F4E8 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_258F4F0 = xmmword_20B93E0;
  strcpy((char *)qword_258F4E8, "SuggestRouteToAvoidBlockingTimeRestriction_");
  byte_258F517 = 1;
  word_258F500 = 95;
  strcpy((char *)&xmmword_258F518, "IncidentsCausingDelay_");
  HIBYTE(word_258F52E) = 22;
  qword_258F530 = (uint64_t)operator new(0x19uLL);
  unk_258F538 = v280;
  strcpy((char *)qword_258F530, "NonVotableRoadIncident_");
  byte_258F55F = 20;
  strcpy(byte_258F548, "VotableRoadIncident_");
  byte_258F577 = 13;
  strcpy((char *)&qword_258F560, "AreaIncident_");
  byte_258F58F = 15;
  strcpy((char *)&qword_258F578, "CongestionZone_");
  qword_258F590 = (uint64_t)operator new(0x20uLL);
  unk_258F598 = v279;
  strcpy((char *)qword_258F590, "EVModifiedChargingStops_");
  byte_258F5BF = 13;
  strcpy((char *)&qword_258F5A8, "EVDisconnect_");
  byte_258F5D7 = 12;
  strcpy((char *)&qword_258F5C0, "EVReconnect_");
  qword_258F5D8 = (uint64_t)operator new(0x20uLL);
  unk_258F5E0 = v277;
  strcpy((char *)qword_258F5D8, "EVOfflineToOnlineTransition_");
  byte_258F607 = 13;
  strcpy((char *)&qword_258F5F0, "EVOfflineSAR_");
  byte_258F61F = 21;
  strcpy((char *)&xmmword_258F608, "EVTowingNotSupported_");
  byte_258F637 = 18;
  strcpy(byte_258F620, "EVInfeasibleRoute_");
  qword_258F638 = (uint64_t)operator new(0x38uLL);
  unk_258F640 = xmmword_20B8DF0;
  strcpy((char *)qword_258F638, "SuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_258F650 = (uint64_t)operator new(0x40uLL);
  unk_258F658 = xmmword_20B98C0;
  strcpy((char *)qword_258F650, "LCSuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_258F668 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_258F670 = v272;
  strcpy((char *)qword_258F668, "SuggestRouteAddingStopsForEVInfeasibleRoute_");
  qmemcpy(v268, "InfeasibleRoute_ngStopsForEVInfeSuggestRouteAddi", sizeof(v268));
  qword_258F680 = (uint64_t)operator new(0x30uLL);
  *(_WORD *)&v264[50] = 0;
  *(_DWORD *)&v264[52] = 0;
  *(void *)&v264[56] = 0x8000000000000030;
  unk_258F688 = xmmword_20B9A80;
  strcpy((char *)qword_258F680, "LCSuggestRouteAddingStopsForEVInfeasibleRoute_");
  strcpy(v264, "InfeasibleRoute_dingStopsForEVInLCSuggestRouteAd.");
  qword_258F698 = (uint64_t)operator new(0x30uLL);
  unk_258F6A0 = v271;
  strcpy((char *)qword_258F698, "SuggestRouteAddingStopsToIncreaseDestSoc_");
  v186 = operator new(0x30uLL);
  qword_258F6B0 = (uint64_t)v186;
  unk_258F6B8 = v272;
  _OWORD *v186 = v268[2];
  v186[1] = v268[1];
  *(_OWORD *)((char *)v186 + 28) = v268[0];
  *((unsigned char *)v186 + 44) = 0;
  qword_258F6C8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_258F6D0 = v270;
  strcpy((char *)qword_258F6C8, "SuggestDetourWithHigherArrivalSOC_");
  uint64_t v187 = operator new(0x30uLL);
  qword_258F6E0 = (uint64_t)v187;
  unk_258F6E8 = *(_OWORD *)&v264[48];
  _OWORD *v187 = *(_OWORD *)&v264[32];
  v187[1] = *(_OWORD *)&v264[16];
  *(_OWORD *)((char *)v187 + 30) = *(_OWORD *)v264;
  *((unsigned char *)v187 + 46) = 0;
  qword_258F6F8 = (uint64_t)operator new(0x28uLL);
  unk_258F700 = v274;
  strcpy((char *)qword_258F6F8, "SuggestRouteToDestForEVInfeasibleRoute_");
  qword_258F710 = (uint64_t)operator new(0x28uLL);
  unk_258F718 = v267;
  strcpy((char *)qword_258F710, "SuggestRouteRemovingStopsFromEVRoute_");
  qword_258F728 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_258F730 = v279;
  strcpy((char *)qword_258F728, "OfflineToOnlineNewRoute_");
  qword_258F740 = (uint64_t)operator new(0x40uLL);
  unk_258F748 = xmmword_20B98C0;
  strcpy((char *)qword_258F740, "SuggestDetourWithHigherArrivalSOCForInfeasibleUserRoute_");
  byte_258F76F = 20;
  strcpy(byte_258F758, "LPR_OFFLINE_REROUTE_");
  byte_258F787 = 16;
  strcpy((char *)&xmmword_258F770, "LPR_OFFLINE_SAR_");
  byte_258F79F = 20;
  strcpy(byte_258F788, "LPR_OFFLINE_REROUTE_");
  byte_258F7B7 = 16;
  strcpy((char *)&xmmword_258F7A0, "LPR_OFFLINE_SAR_");
  byte_258F7CF = 19;
  strcpy(byte_258F7B8, "SuggestFasterRoute_");
  qword_258F7D0 = (char *)operator new(0x20uLL);
  xmmword_258F7D8 = v278;
  strcpy(qword_258F7D0, "AreaIncidentSaferReroute_");
  byte_258F7FF = 12;
  strcpy((char *)&qword_258F7E8, "_Remove_Stop");
  byte_258F817 = 13;
  strcpy((char *)&qword_258F800, "_Remove_Stops");
  strcpy(&byte_258F82F, "\t_Add_Stops");
  strcpy((char *)&qword_258F818, "_Add_Stop");
  strcpy(&byte_258F847, "\n_Change_Route");
  byte_258F85F = 13;
  byte_258F877 = 15;
  strcpy((char *)&qword_258F860, "_Different_Stop");
  byte_258F88F = 16;
  strcpy((char *)&xmmword_258F878, "_Different_Stops");
  byte_258F8A7 = 15;
  strcpy((char *)&qword_258F890, "_EV_Remove_Stop");
  byte_258F8BF = 16;
  strcpy((char *)&xmmword_258F8A8, "_EV_Remove_Stops");
  byte_258F8D7 = 12;
  strcpy((char *)&qword_258F8C0, "_EV_Add_Stop");
  byte_258F8EF = 13;
  strcpy((char *)&qword_258F8D8, "_EV_Add_Stops");
  byte_258F907 = 15;
  strcpy((char *)&qword_258F8F0, "_EV_Low_Battery");
  byte_258F91F = 14;
  strcpy((char *)&qword_258F908, "_EV_Infeasible");
  byte_258F937 = 15;
  strcpy((char *)&qword_258F920, "_EV_Last_Chance");
  qword_258F938 = (uint64_t)operator new(0x20uLL);
  unk_258F940 = v279;
  strcpy((char *)qword_258F938, "_EV_Low_Battery_Add_Stop");
  uint64_t v188 = qword_258F838;
  qword_258F950 = (uint64_t)operator new(0x20uLL);
  unk_258F958 = v278;
  strcpy((char *)qword_258F950, "_EV_Low_Battery_Add_Stops");
  qword_258F968 = (uint64_t)operator new(0x19uLL);
  *(_OWORD *)algn_258F970 = v280;
  strcpy((char *)qword_258F968, "_EV_Infeasible_Add_Stop");
  int v189 = byte_258F847;
  if (byte_258F847 >= 0) {
    size_t v190 = byte_258F847;
  }
  else {
    size_t v190 = v188;
  }
  unint64_t v191 = v190 + 14;
  if (v190 + 14 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v191 >= 0x17)
  {
    uint64_t v194 = (v191 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v191 | 7) != 0x17) {
      uint64_t v194 = v191 | 7;
    }
    uint64_t v195 = v194 + 1;
    uint64_t v196 = (char *)operator new(v194 + 1);
    qword_258F988 = v190 + 14;
    unk_258F990 = v195 | 0x8000000000000000;
    qword_258F980 = (uint64_t)v196;
    qmemcpy(v196, "_EV_Infeasible", 14);
    char v192 = v196 + 14;
  }
  else
  {
    BYTE1(qword_258F988) = 0;
    WORD1(qword_258F988) = 0;
    HIDWORD(qword_258F988) = 0;
    unk_258F990 = 0;
    byte_258F997 = v190 + 14;
    strcpy((char *)&qword_258F980, "_EV_Infe");
    char v192 = (char *)&qword_258F988 + 6;
    if (!v190)
    {
      char v193 = 1;
      goto LABEL_425;
    }
  }
  if (v189 >= 0) {
    uint64_t v197 = (uint64_t)&qword_258F830;
  }
  else {
    uint64_t v197 = 0x6F74535F6464415FLL;
  }
  memmove(v192, (const void *)v197, v190);
  char v193 = 0;
LABEL_425:
  v192[v190] = 0;
  unint64_t v198 = (char *)operator new(0x20uLL);
  qword_258F998 = (uint64_t)v198;
  unk_258F9A0 = v279;
  *(void *)unint64_t v198 = qword_258F920;
  *(void *)(v198 + 7) = *(uint64_t *)((char *)&qword_258F920 + 7);
  *(void *)(v198 + 15) = qword_258F818;
  v198[23] = word_258F820;
  v198[24] = 0;
  unint64_t v199 = v190 + 15;
  if (v190 + 15 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v199 > 0x16)
  {
    uint64_t v201 = (v199 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v199 | 7) != 0x17) {
      uint64_t v201 = v199 | 7;
    }
    uint64_t v202 = v201 + 1;
    uint64_t v200 = (uint64_t *)operator new(v201 + 1);
    qword_258F9B8 = v190 + 15;
    unk_258F9C0 = v202 | 0x8000000000000000;
    qword_258F9B0 = (uint64_t)v200;
  }
  else
  {
    uint64_t v200 = &qword_258F9B0;
    qword_258F9B8 = 0;
    unk_258F9C0 = 0;
    qword_258F9B0 = 0;
    byte_258F9C7 = v190 + 15;
  }
  uint64_t *v200 = qword_258F920;
  *(uint64_t *)((char *)v200 + 7) = *(uint64_t *)((char *)&qword_258F920 + 7);
  v203 = (char *)v200 + 15;
  if ((v193 & 1) == 0)
  {
    if (v189 >= 0) {
      uint64_t v204 = &qword_258F830;
    }
    else {
      uint64_t v204 = (uint64_t *)qword_258F830;
    }
    memmove((char *)v200 + 15, v204, v190);
  }
  v203[v190] = 0;
  byte_258F9DF = 17;
  strcpy((char *)&xmmword_258F9C8, "_EV_Forced_Detour");
  qword_258F9E0 = (uint64_t)operator new(0x20uLL);
  unk_258F9E8 = v278;
  strcpy((char *)qword_258F9E0, "_EV_Higher_Arrival_Charge");
  qword_258F9F8 = (uint64_t)operator new(0x28uLL);
  unk_258FA00 = xmmword_20B8FD0;
  strcpy((char *)qword_258F9F8, "_EV_Infeasible_Higher_Arrival_Charge");
  byte_258FA27 = 16;
  strcpy(byte_258FA10, "_EV_Out_Of_Range");
  qword_258FA28 = (uint64_t)operator new(0x20uLL);
  unk_258FA30 = v273;
  strcpy((char *)qword_258FA28, "_EV_Last_Chance_Take_Detour");
  strcpy(byte_258FA40, "_EV_Forced_Modify_Stop");
  HIBYTE(word_258FA56) = 22;
  qword_258FA58 = (uint64_t)operator new(0x19uLL);
  unk_258FA60 = v280;
  strcpy((char *)qword_258FA58, "_EV_Forced_Modify_Stops");
  byte_258FA87 = 19;
  strcpy(byte_258FA70, "_EV_Forced_Add_Stop");
  byte_258FA9F = 20;
  strcpy((char *)&xmmword_258FA88, "_EV_Forced_Add_Stops");
  byte_258FAB7 = 21;
  strcpy(byte_258FAA0, "_EV_Battery_Info_Lost");
  qword_258FAB8 = (uint64_t)operator new(0x20uLL);
  unk_258FAC0 = v278;
  strcpy((char *)qword_258FAB8, "_EV_Battery_Info_Restored");
  qword_258FAD0 = (uint64_t)operator new(0x20uLL);
  unk_258FAD8 = v279;
  strcpy((char *)qword_258FAD0, "_EV_Towing_Not_Supported");
  qword_258FAE8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_258FAF0 = v269;
  strcpy((char *)qword_258FAE8, "_EV_Offline_to_Online_Transition");
  byte_258FB17 = 15;
  strcpy((char *)&qword_258FB00, "_EV_Offline_SAR");
  qword_258FB18 = (uint64_t)operator new(0x20uLL);
  unk_258FB20 = v277;
  strcpy((char *)qword_258FB18, "_Offline_to_Online_New_Route");
  byte_258FB47 = 12;
  strcpy((char *)&qword_258FB30, "BannerButton");
  byte_258FB5F = 8;
  strcpy((char *)&qword_258FB48, "_Dismiss");
  byte_258FB77 = 3;
  word_258FB60 = 20319;
  byte_258FB62 = 75;
  byte_258FB63 = 0;
  byte_258FB8F = 11;
  strcpy((char *)&qword_258FB78, "_Still_Here");
  byte_258FBA7 = 8;
  strcpy((char *)&qword_258FB90, "_Cleared");
  qmemcpy(&byte_258FBBF, "\nBannerButton", 13);
  strcpy((char *)&qword_258FBA8, "_No_Thanks");
  uint64_t v205 = qword_258FB38;
  qword_258FBD0 = 0x1400000000000000;
  *(void *)algn_258FBCC = 0x7373696D7369445FLL;
  qword_258FBE8 = 0xF00000000000000;
  qword_258FBE0 = 0x4B4F5F6E6F7474;
  int v206 = byte_258F8D7;
  if (byte_258F8D7 >= 0) {
    size_t v207 = byte_258F8D7;
  }
  else {
    size_t v207 = qword_258F8C8;
  }
  unint64_t v208 = v207 + 12;
  qword_258FBD8 = *(void *)"BannerButton";
  if (v207 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v208 >= 0x17)
  {
    uint64_t v210 = (v208 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v208 | 7) != 0x17) {
      uint64_t v210 = v208 | 7;
    }
    uint64_t v211 = v210 + 1;
    v212 = (char *)operator new(v210 + 1);
    qword_258FBF8 = v207 + 12;
    unk_258FC00 = v211 | 0x8000000000000000;
    qword_258FBF0 = (uint64_t)v212;
    *((_DWORD *)v212 + 2) = 1852798068;
    *(void *)v212 = *(void *)"BannerButton";
    uint64_t v209 = v212 + 12;
  }
  else
  {
    BYTE5(qword_258FBF8) = 0;
    HIWORD(qword_258FBF8) = 0;
    unk_258FC00 = 0;
    byte_258FC07 = v207 + 12;
    strcpy((char *)&qword_258FBF0, "BannerButton");
    uint64_t v209 = (char *)&qword_258FBF8 + 4;
    if (!v207) {
      goto LABEL_450;
    }
  }
  if (v206 >= 0) {
    int v213 = &qword_258F8C0;
  }
  else {
    int v213 = (uint64_t *)qword_258F8C0;
  }
  memmove(v209, v213, v207);
LABEL_450:
  v209[v207] = 0;
  int v214 = byte_258F8EF;
  if (byte_258F8EF >= 0) {
    size_t v215 = byte_258F8EF;
  }
  else {
    size_t v215 = unk_258F8E0;
  }
  unint64_t v216 = v215 + 12;
  if (v215 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v216 >= 0x17)
  {
    uint64_t v218 = (v216 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v216 | 7) != 0x17) {
      uint64_t v218 = v216 | 7;
    }
    uint64_t v219 = v218 + 1;
    v220 = (char *)operator new(v218 + 1);
    qword_258FC10 = v215 + 12;
    unk_258FC18 = v219 | 0x8000000000000000;
    qword_258FC08 = (uint64_t)v220;
    *(void *)v220 = qword_258FB30;
    *((_DWORD *)v220 + 2) = qword_258FB38;
    uint64_t v217 = v220 + 12;
  }
  else
  {
    qword_258FC10 = 0;
    unk_258FC18 = 0;
    byte_258FC1F = v215 + 12;
    LODWORD(qword_258FC10) = qword_258FB38;
    qword_258FC08 = qword_258FB30;
    uint64_t v217 = (char *)&qword_258FC10 + 4;
    if (!v215) {
      goto LABEL_464;
    }
  }
  if (v214 >= 0) {
    int v221 = &qword_258F8D8;
  }
  else {
    int v221 = (uint64_t *)qword_258F8D8;
  }
  memmove(v217, v221, v215);
LABEL_464:
  v217[v215] = 0;
  int v222 = byte_258F8A7;
  if (byte_258F8A7 >= 0) {
    size_t v223 = byte_258F8A7;
  }
  else {
    size_t v223 = unk_258F898;
  }
  unint64_t v224 = v223 + 12;
  if (v223 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v224 >= 0x17)
  {
    uint64_t v226 = (v224 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v224 | 7) != 0x17) {
      uint64_t v226 = v224 | 7;
    }
    uint64_t v227 = v226 + 1;
    v228 = (char *)operator new(v226 + 1);
    qword_258FC28 = v223 + 12;
    unk_258FC30 = v227 | 0x8000000000000000;
    qword_258FC20 = (uint64_t)v228;
    *(void *)v228 = qword_258FB30;
    *((_DWORD *)v228 + 2) = qword_258FB38;
    uint64_t v225 = v228 + 12;
  }
  else
  {
    qword_258FC28 = 0;
    unk_258FC30 = 0;
    byte_258FC37 = v223 + 12;
    LODWORD(qword_258FC28) = qword_258FB38;
    qword_258FC20 = qword_258FB30;
    uint64_t v225 = (char *)&qword_258FC28 + 4;
    if (!v223) {
      goto LABEL_478;
    }
  }
  if (v222 >= 0) {
    int v229 = &qword_258F890;
  }
  else {
    int v229 = (uint64_t *)qword_258F890;
  }
  memmove(v225, v229, v223);
LABEL_478:
  v225[v223] = 0;
  int v230 = byte_258FB47;
  if (byte_258FB47 >= 0) {
    size_t v231 = byte_258FB47;
  }
  else {
    size_t v231 = v205;
  }
  int v232 = byte_258F8BF;
  if (byte_258F8BF >= 0) {
    size_t v233 = byte_258F8BF;
  }
  else {
    size_t v233 = *((void *)&xmmword_258F8A8 + 1);
  }
  unint64_t v234 = v233 + v231;
  if (v233 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v234 <= 0x16)
  {
    v235 = &qword_258FC38;
    qword_258FC40 = 0;
    unk_258FC48 = 0;
    qword_258FC38 = 0;
    byte_258FC4F = v233 + v231;
    if (!v231) {
      goto LABEL_491;
    }
    goto LABEL_487;
  }
  uint64_t v242 = (v234 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v234 | 7) != 0x17) {
    uint64_t v242 = v234 | 7;
  }
  uint64_t v243 = v242 + 1;
  v235 = (uint64_t *)operator new(v242 + 1);
  qword_258FC40 = v233 + v231;
  unk_258FC48 = v243 | 0x8000000000000000;
  qword_258FC38 = (uint64_t)v235;
  if (v231)
  {
LABEL_487:
    if (v230 >= 0) {
      v236 = &qword_258FB30;
    }
    else {
      v236 = (uint64_t *)qword_258FB30;
    }
    memmove(v235, v236, v231);
  }
LABEL_491:
  v237 = (char *)v235 + v231;
  if (v233)
  {
    if (v232 >= 0) {
      unint64_t v238 = &xmmword_258F8A8;
    }
    else {
      unint64_t v238 = (long long *)xmmword_258F8A8;
    }
    memmove(v237, v238, v233);
  }
  v237[v233] = 0;
  unint64_t v239 = v231 + 11;
  if (v231 + 11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v239 >= 0x17)
  {
    uint64_t v244 = (v239 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v239 | 7) != 0x17) {
      uint64_t v244 = v239 | 7;
    }
    uint64_t v245 = v244 + 1;
    unint64_t v240 = (uint64_t *)operator new(v244 + 1);
    qword_258FC58 = v231 + 11;
    unk_258FC60 = v245 | 0x8000000000000000;
    qword_258FC50 = (uint64_t)v240;
  }
  else
  {
    unint64_t v240 = &qword_258FC50;
    qword_258FC58 = 0;
    unk_258FC60 = 0;
    qword_258FC50 = 0;
    byte_258FC67 = v231 + 11;
    if (!v231)
    {
      *(_DWORD *)((char *)&qword_258FC50 + 7) = *(_DWORD *)((char *)&qword_258FB78 + 7);
      qword_258FC50 = qword_258FB78;
      BYTE3(qword_258FC58) = 0;
      LOBYTE(v241) = 8;
      goto LABEL_512;
    }
  }
  if (v230 >= 0) {
    v246 = &qword_258FB30;
  }
  else {
    v246 = (uint64_t *)qword_258FB30;
  }
  memmove(v240, v246, v231);
  int v247 = (char *)v240 + v231;
  int v248 = *(_DWORD *)((char *)&qword_258FB78 + 7);
  *(void *)int v247 = qword_258FB78;
  *(_DWORD *)(v247 + 7) = v248;
  v247[11] = 0;
  unint64_t v241 = v231 + 8;
  if (v231 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v241 <= 0x16)
  {
LABEL_512:
    v249 = &qword_258FC68;
    qword_258FC70 = 0;
    unk_258FC78 = 0;
    qword_258FC68 = 0;
    byte_258FC7F = v241;
    if (!v231) {
      goto LABEL_517;
    }
    goto LABEL_513;
  }
  uint64_t v262 = (v241 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v241 | 7) != 0x17) {
    uint64_t v262 = v241 | 7;
  }
  uint64_t v263 = v262 + 1;
  v249 = (uint64_t *)operator new(v262 + 1);
  qword_258FC70 = v231 + 8;
  unk_258FC78 = v263 | 0x8000000000000000;
  qword_258FC68 = (uint64_t)v249;
  if (v231)
  {
LABEL_513:
    if (v230 >= 0) {
      v250 = &qword_258FB30;
    }
    else {
      v250 = (uint64_t *)qword_258FB30;
    }
    memmove(v249, v250, v231);
  }
LABEL_517:
  int v251 = (char *)v249 + v231;
  *(void *)int v251 = qword_258FB90;
  v251[8] = 0;
  int v252 = byte_258FBBF;
  if (byte_258FBBF >= 0) {
    size_t v253 = byte_258FBBF;
  }
  else {
    size_t v253 = qword_258FBB0;
  }
  unint64_t v254 = v253 + v231;
  if (v253 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v254 <= 0x16)
  {
    v255 = &qword_258FC80;
    qword_258FC88 = 0;
    unk_258FC90 = 0;
    qword_258FC80 = 0;
    byte_258FC97 = v253 + v231;
    if (!v231) {
      goto LABEL_527;
    }
    goto LABEL_523;
  }
  uint64_t v260 = (v254 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v254 | 7) != 0x17) {
    uint64_t v260 = v254 | 7;
  }
  uint64_t v261 = v260 + 1;
  v255 = (uint64_t *)operator new(v260 + 1);
  qword_258FC88 = v253 + v231;
  unk_258FC90 = v261 | 0x8000000000000000;
  qword_258FC80 = (uint64_t)v255;
  if (v231)
  {
LABEL_523:
    if (v230 >= 0) {
      v256 = &qword_258FB30;
    }
    else {
      v256 = (uint64_t *)qword_258FB30;
    }
    memmove(v255, v256, v231);
  }
LABEL_527:
  v257 = (char *)v255 + v231;
  if (v253)
  {
    if (v252 >= 0) {
      v258 = &qword_258FBA8;
    }
    else {
      v258 = (uint64_t *)qword_258FBA8;
    }
    memmove(v257, v258, v253);
  }
  v257[v253] = 0;
  strcpy(&byte_258FCAF, "\n{newroute}");
  strcpy((char *)&qword_258FC98, "{roadname}");
  strcpy(&byte_258FCC7, "\n{count}");
  byte_258FCDF = 7;
  strcpy(&byte_258FCF7, "\n{dur}");
  strcpy((char *)&qword_258FCE0, "{duration}");
  byte_258FD0F = 5;
  qword_258FD10 = (uint64_t)operator new(0x20uLL);
  unk_258FD18 = v276;
  strcpy((char *)qword_258FD10, "{PleaseProceedWithCaution}");
  byte_258FD3F = 15;
  strcpy((char *)&qword_258FD28, "{UserRouteName}");
  byte_258FD57 = 20;
  strcpy((char *)&xmmword_258FD40, "{SuggestedRouteName}");
  byte_258FD6F = 18;
  strcpy(byte_258FD58, "Speed_Camera_Ahead");
  qword_258FD70 = (uint64_t)operator new(0x20uLL);
  unk_258FD78 = v275;
  strcpy((char *)qword_258FD70, "Red_Light_Camera_Ahead_Spoken");
  qword_258FD88 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_258FD90 = v275;
  strcpy((char *)qword_258FD88, "Stop_Sign_Camera_Ahead_Spoken");
  qword_258FDA0 = (uint64_t)operator new(0x28uLL);
  unk_258FDA8 = v270;
  strcpy((char *)qword_258FDA0, "Speed_Camera_Ahead_Multiple_Spoken");
  qword_258FDB8 = (uint64_t)operator new(0x28uLL);
  unk_258FDC0 = v265;
  strcpy((char *)qword_258FDB8, "Red_Light_Camera_Ahead_Multiple_Spoken");
  qword_258FDD0 = (uint64_t)operator new(0x20uLL);
  unk_258FDD8 = v277;
  strcpy((char *)qword_258FDD0, "Camera_Ahead_Multiple_Spoken");
  qword_258FDE8 = (uint64_t)operator new(0x30uLL);
  unk_258FDF0 = v266;
  strcpy((char *)qword_258FDE8, "Red_Light_Camera_Speed_Camera_Ahead_Spoken");
  qword_258FE00 = (char *)operator new(0x30uLL);
  strcpy(qword_258FE00, "Stop_Sign_Camera_Speed_Camera_Ahead_Spoken");
  byte_258FE2F = 16;
  xmmword_258FE08 = v266;
  strcpy(byte_258FE18, "_Speed_Limit_Mph");
  byte_258FE47 = 16;
  strcpy(algn_258FE30, "_Speed_Limit_Kph");
  byte_258FE5F = 11;
  strcpy((char *)&qword_258FE48, "Watch_Speed");
  byte_258FE77 = 4;
  strcpy((char *)&dword_258FE60, "_One");
  byte_258FE8F = 4;
  strcpy((char *)&dword_258FE78, "_Two");
  byte_258FEA7 = 4;
  strcpy((char *)&dword_258FE90, "_Few");
  byte_258FEBF = 5;
  strcpy((char *)&dword_258FEA8, "_Many");
  byte_258FED7 = 6;
  strcpy((char *)&dword_258FEC0, "_Other");
  byte_258FEEF = 4;
  strcpy((char *)&dword_258FED8, "_ONE");
  byte_258FF07 = 7;
  strcpy((char *)&dword_258FEF0, "{Speed}");
  byte_258FF1F = 8;
  strcpy((char *)&qword_258FF08, "Dismount");
  byte_258FF37 = 4;
  strcpy((char *)&dword_258FF20, "Walk");
  byte_258FF4F = 5;
  strcpy((char *)&dword_258FF38, "Mount");
  byte_258FF67 = 7;
  strcpy((char *)&dword_258FF50, "Remount");
  strcpy(&byte_258FF7F, "\t_Crosswalk");
  strcpy((char *)&qword_258FF68, "Walk_Road");
  strcpy(&byte_258FF97, "\n_PLURAL");
  byte_258FFAF = 7;
  strcpy(&byte_258FFC7, "\n{description1}");
  strcpy((char *)&qword_258FFB0, "_SECONDARY");
  byte_258FFDF = 14;
  byte_258FFF7 = 14;
  strcpy((char *)&qword_258FFE0, "{description2}");
  byte_259000F = 21;
  strcpy((char *)&xmmword_258FFF8, "TWO_ROAD_DESCRIPTIONS");
  byte_2590027 = 17;
  strcpy((char *)&xmmword_2590010, "{SlopePercentage}");
  byte_259003F = 15;
  strcpy((char *)&qword_2590028, "_Protected_Lane");
  strcpy(&byte_2590057, "\n_Paved_Path");
  strcpy((char *)&qword_2590040, "_Bike_Path");
  byte_259006F = 11;
  byte_2590087 = 15;
  strcpy((char *)&qword_2590070, "_Dedicated_Lane");
  byte_259009F = 12;
  strcpy((char *)&qword_2590088, "_Shared_Path");
  strcpy(&byte_25900B7, "\n_UnnamedRoad");
  strcpy((char *)&qword_25900A0, "_Bike_Lane");
  byte_25900CF = 12;
  byte_25900E7 = 5;
  strcpy((char *)&dword_25900D0, "_Path");
  byte_25900FF = 6;
  strcpy((char *)&dword_25900E8, "_Trail");
  strcpy(&byte_2590117, "\t_Plaza");
  strcpy((char *)&qword_2590100, "_Sidewalk");
  byte_259012F = 6;
  byte_2590147 = 15;
  strcpy((char *)&qword_2590130, "_Moving_Walkway");
  byte_259015F = 14;
  strcpy((char *)&qword_2590148, "Two_Stage_Turn");
  byte_2590177 = 16;
  strcpy((char *)&xmmword_2590160, "{OptionalPeriod}");
  byte_259018F = 18;
  strcpy((char *)&xmmword_2590178, "Advisory_Separator");
  byte_25901A7 = 6;
  strcpy((char *)&dword_2590190, "Period");
  byte_25901BF = 21;
  strcpy((char *)&xmmword_25901A8, "Advisory_Title_Notice");
  strcpy((char *)&xmmword_25901C0, "Advisory_Title_Notices");
  HIBYTE(word_25901D6) = 22;
  byte_25901EF = 7;
  strcpy((char *)&dword_25901D8, "_DETAIL");
  byte_2590207 = 17;
  strcpy((char *)&xmmword_25901F0, "_LONG_REGION_LIST");
  byte_259021F = 16;
  strcpy((char *)&xmmword_2590208, "Advisory_Grouped");
  byte_2590237 = 11;
  strcpy((char *)&qword_2590220, "_Advisories");
  qword_2590238 = (uint64_t)operator new(0x20uLL);
  unk_2590240 = v273;
  strcpy((char *)qword_2590238, "Advisory_WILDFIRE_METADATA_");
  byte_2590267 = 8;
  strcpy((char *)&qword_2590250, "Advisory");
  byte_259027F = 13;
  strcpy((char *)&qword_2590268, "MPR_NUM_STOPS");
  byte_2590297 = 17;
  strcpy(byte_2590280, "EV_CHARGE_STATION");
  byte_25902AF = 11;
  strcpy((char *)&qword_2590298, "_NAMED_CITY");
  byte_25902C7 = 5;
  strcpy((char *)&dword_25902B0, "_Stop");
  strcpy(&byte_25902DF, "\n{StopsCount}");
  strcpy((char *)&qword_25902C8, "{CityName}");
  byte_25902F7 = 12;
  byte_259030F = 11;
  strcpy((char *)&qword_25902F8, "_With_Other");
  byte_2590327 = 15;
  strcpy((char *)&qword_2590310, "{DepartureTime}");
  qword_2590328 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2590330 = v274;
  strcpy((char *)qword_2590328, "Ending_Charge_Station_Port_Availability");
  qword_2590340 = (uint64_t)operator new(0x28uLL);
  unk_2590348 = v267;
  strcpy((char *)qword_2590340, "Ending_Charge_Station_No_Availability");
  qword_2590358 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2590360 = v270;
  strcpy((char *)qword_2590358, "Ending_Charge_Station_No_Real_Time");
  byte_2590387 = 16;
  strcpy(&algn_2590360[16], "{AvailablePorts}");
  byte_259039F = 12;
  strcpy((char *)&qword_2590388, "{TotalPorts}");
  byte_25903B7 = 14;
  strcpy((char *)&qword_25903A0, "{ManeuverIcon}");
  *(void *)&qword_25903B8 = operator new(0x38uLL);
  unk_25903C0 = xmmword_20B9A60;
  strcpy((char *)qword_25903B8, "Walking_Distance_ManeuverIcon_PrimaryInstruction");
  qword_25903D0 = (uint64_t)operator new(0x20uLL);
  unk_25903D8 = v273;
  strcpy((char *)qword_25903D0, "Walking_Destination_Unnamed");
  qword_25903E8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25903F0 = v275;
  strcpy((char *)qword_25903E8, "TrafficDelay_Label_Title_Sign");
  qword_2590400 = (uint64_t)operator new(0x20uLL);
  unk_2590408 = v277;
  strcpy((char *)qword_2590400, "Special_Guidance_Instruction");
  byte_259042F = 2;
  strcpy((char *)&word_2590418, "CZ");
  byte_2590447 = 3;
  dword_2590430 = 5919811;
  unk_259045F = 3;
  dword_2590448 = 6243649;
  byte_2590477 = 0;
  byte_259048F = 7;
  strcpy((char *)&dword_2590478, "TRANSIT");
  byte_25904A7 = 7;
  strcpy((char *)&dword_2590490, "OFFLINE");
  qword_25904A8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25904B0 = v265;
  strcpy((char *)qword_25904A8, "Advisory_Card_French_Climate_Law_Title");
  qword_25904C0 = (uint64_t)operator new(0x30uLL);
  unk_25904C8 = xmmword_20B93C0;
  strcpy((char *)qword_25904C0, "Advisory_Card_French_Climate_Law_Details");
  qword_25904D8 = (uint64_t)operator new(0x30uLL);
  unk_25904E0 = v271;
  strcpy((char *)qword_25904D8, "French_Climate_Law_Metadata_Weblink_Title");
  qword_25904F0 = (uint64_t)operator new(0x20uLL);
  unk_25904F8 = v277;
  strcpy((char *)qword_25904F0, "{ClimateLawLearnMoreWeblink}");
  byte_259051F = 3;
  dword_2590508 = 4280902;
  qword_2590520 = (uint64_t)operator new(0x70uLL);
  unk_2590528 = xmmword_20E81E0;
  strcpy((char *)qword_2590520, "https://www.vie-publique.fr/loi/278460-loi-22-aout-2021-climat-et-resilience-convention-citoyenne-climat");
  return *(double *)"ut-2021-climat-et-resilience-convention-citoyenne-climat";
}

void sub_621848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3B7]) < 0)
  {
    operator delete((void *)STACK[0x3A0]);
    if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x387]) < 0) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  operator delete((void *)STACK[0x388]);
  if (SLOBYTE(STACK[0x387]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x370]);
    if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (SLOBYTE(STACK[0x357]) < 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)STACK[0x358]);
  if (SLOBYTE(STACK[0x357]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x340]);
    if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x327]) < 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete((void *)STACK[0x328]);
  if (SLOBYTE(STACK[0x327]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x310]);
    if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0)
  {
LABEL_9:
    if (SLOBYTE(STACK[0x2F7]) < 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)STACK[0x2F8]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
  {
LABEL_10:
    operator delete((void *)STACK[0x2E0]);
    if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
  {
LABEL_11:
    if (SLOBYTE(STACK[0x2C7]) < 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x2C8]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
  {
LABEL_12:
    operator delete((void *)STACK[0x2B0]);
    if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0)
  {
LABEL_13:
    if (SLOBYTE(STACK[0x297]) < 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete((void *)STACK[0x298]);
  if (SLOBYTE(STACK[0x297]) < 0)
  {
LABEL_14:
    operator delete((void *)STACK[0x280]);
    if (SLOBYTE(STACK[0x27F]) < 0)
    {
LABEL_37:
      operator delete((void *)STACK[0x268]);
      if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0)
      {
LABEL_38:
        if (SLOBYTE(STACK[0x24F]) < 0)
        {
LABEL_39:
          operator delete((void *)STACK[0x238]);
          if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
          {
LABEL_40:
            if (SLOBYTE(STACK[0x21F]) < 0)
            {
LABEL_41:
              operator delete((void *)STACK[0x208]);
              if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
              {
LABEL_42:
                if (a72 < 0)
                {
LABEL_43:
                  operator delete(a71);
                  if (a70 < 0)
                  {
LABEL_44:
                    operator delete(a65);
                    _Unwind_Resume(a1);
                  }
LABEL_45:
                  _Unwind_Resume(a1);
                }
LABEL_35:
                if (a70 < 0) {
                  goto LABEL_44;
                }
                goto LABEL_45;
              }
LABEL_34:
              operator delete(a73);
              if (a72 < 0) {
                goto LABEL_43;
              }
              goto LABEL_35;
            }
LABEL_33:
            if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0) {
              goto LABEL_42;
            }
            goto LABEL_34;
          }
LABEL_32:
          operator delete((void *)STACK[0x220]);
          if (SLOBYTE(STACK[0x21F]) < 0) {
            goto LABEL_41;
          }
          goto LABEL_33;
        }
LABEL_31:
        if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0) {
          goto LABEL_40;
        }
        goto LABEL_32;
      }
LABEL_30:
      operator delete((void *)STACK[0x250]);
      if (SLOBYTE(STACK[0x24F]) < 0) {
        goto LABEL_39;
      }
      goto LABEL_31;
    }
LABEL_29:
    if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_30;
  }
LABEL_28:
  if (SLOBYTE(STACK[0x27F]) < 0) {
    goto LABEL_37;
  }
  goto LABEL_29;
}

uint64_t sub_621B1C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, std::string *__str)
{
  int64x2_t v9 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a1 + 8) = v9;
  unint64_t v10 = (uint64_t *)(a1 + 8);
  *(int64x2_t *)(a1 + 24) = v9;
  long long v11 = (uint64_t *)(a1 + 24);
  *(int64x2_t *)(a1 + 40) = v9;
  int v12 = (uint64_t *)(a1 + 40);
  *(int64x2_t *)(a1 + 56) = v9;
  size_t v13 = (uint64_t *)(a1 + 56);
  *(int64x2_t *)(a1 + 72) = v9;
  unint64_t v14 = (uint64_t *)(a1 + 72);
  *(int64x2_t *)(a1 + 88) = v9;
  unint64_t v172 = (uint64_t *)(a1 + 88);
  *(int64x2_t *)(a1 + 104) = v9;
  size_t v171 = (uint64_t *)(a1 + 104);
  *(int64x2_t *)(a1 + 120) = v9;
  int v170 = (uint64_t *)(a1 + 120);
  *(void *)(a1 + 136) = 0x7FFFFFFFFFFFFFFFLL;
  int v169 = (uint64_t *)(a1 + 136);
  *(_WORD *)a1 = 0;
  *(void *)&long long v15 = 0x8000000080000000;
  *((void *)&v15 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 144) = v15;
  v168 = (_DWORD *)(a1 + 144);
  *(_OWORD *)(a1 + 160) = v15;
  uint64_t v167 = (_DWORD *)(a1 + 160);
  *(_OWORD *)(a1 + 176) = v15;
  uint64_t v166 = (_DWORD *)(a1 + 176);
  *(_OWORD *)(a1 + 192) = v15;
  uint64_t v165 = (_DWORD *)(a1 + 192);
  *(_DWORD *)(a1 + 208) = 0x7FFFFFFF;
  uint64_t v164 = (_DWORD *)(a1 + 208);
  *(int64x2_t *)(a1 + 216) = v9;
  uint64_t v163 = (uint64_t *)(a1 + 216);
  *(int64x2_t *)(a1 + 232) = v9;
  uint64_t v162 = (uint64_t *)(a1 + 232);
  *(_OWORD *)(a1 + 248) = v15;
  uint64_t v161 = (_DWORD *)(a1 + 248);
  *(_OWORD *)(a1 + 264) = v15;
  *(void *)(a1 + 280) = 0x8000000080000000;
  *(int64x2_t *)(a1 + 288) = v9;
  *(int64x2_t *)(a1 + 304) = v9;
  *(int64x2_t *)(a1 + 320) = v9;
  *(int64x2_t *)(a1 + 336) = v9;
  *(int64x2_t *)(a1 + 352) = v9;
  *(int64x2_t *)(a1 + 368) = v9;
  *(int64x2_t *)(a1 + 384) = v9;
  *(int64x2_t *)(a1 + 400) = v9;
  *(_OWORD *)(a1 + 416) = 0u;
  *(int64x2_t *)(a1 + 432) = v9;
  *(int64x2_t *)(a1 + 448) = v9;
  *(int64x2_t *)(a1 + 464) = v9;
  *(int64x2_t *)(a1 + 480) = v9;
  *(int64x2_t *)(a1 + 496) = v9;
  *(int64x2_t *)(a1 + 512) = v9;
  *(int64x2_t *)(a1 + 528) = v9;
  *(int64x2_t *)(a1 + 544) = v9;
  *(int64x2_t *)(a1 + 560) = v9;
  *(int64x2_t *)(a1 + 576) = v9;
  *(int64x2_t *)(a1 + 592) = v9;
  *(int64x2_t *)(a1 + 608) = v9;
  *(int64x2_t *)(a1 + 624) = v9;
  *(int64x2_t *)(a1 + 640) = v9;
  *(int64x2_t *)(a1 + 656) = v9;
  *(int64x2_t *)(a1 + 672) = v9;
  *(int64x2_t *)(a1 + 688) = v9;
  *(int64x2_t *)(a1 + 704) = v9;
  *(int64x2_t *)(a1 + 720) = v9;
  *(int64x2_t *)(a1 + 736) = v9;
  *(int64x2_t *)(a1 + 752) = v9;
  *(int64x2_t *)(a1 + 768) = v9;
  *(int64x2_t *)(a1 + 784) = v9;
  *(int64x2_t *)(a1 + 800) = v9;
  *(int64x2_t *)(a1 + 816) = v9;
  *(int64x2_t *)(a1 + 832) = v9;
  *(int64x2_t *)(a1 + 848) = v9;
  *(int64x2_t *)(a1 + 864) = v9;
  *(int64x2_t *)(a1 + 880) = v9;
  *(int64x2_t *)(a1 + 896) = v9;
  *(int64x2_t *)(a1 + 912) = v9;
  *(int64x2_t *)(a1 + 928) = v9;
  *(int64x2_t *)(a1 + 944) = v9;
  *(int64x2_t *)(a1 + 960) = v9;
  *(int64x2_t *)(a1 + 976) = v9;
  *(int64x2_t *)(a1 + 992) = v9;
  *(int64x2_t *)(a1 + 1008) = v9;
  *(int64x2_t *)(a1 + 1024) = v9;
  *(int64x2_t *)(a1 + 1040) = v9;
  *(int64x2_t *)(a1 + 1056) = v9;
  *(int64x2_t *)(a1 + 1072) = v9;
  *(int64x2_t *)(a1 + 1088) = v9;
  *(int64x2_t *)(a1 + 1104) = v9;
  *(int64x2_t *)(a1 + 1120) = v9;
  *(int64x2_t *)(a1 + 1136) = v9;
  *(int64x2_t *)(a1 + 1152) = v9;
  *(int64x2_t *)(a1 + 1168) = v9;
  *(int64x2_t *)(a1 + 1184) = v9;
  *(int64x2_t *)(a1 + 1200) = v9;
  *(int64x2_t *)(a1 + 1216) = v9;
  *(int64x2_t *)(a1 + 1232) = v9;
  *(int64x2_t *)(a1 + 1248) = v9;
  *(void *)(a1 + 1264) = 0x7FFFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 1272) = 0;
  *(int64x2_t *)(a1 + 1280) = v9;
  *(int64x2_t *)(a1 + 1296) = v9;
  *(int64x2_t *)(a1 + 1312) = v9;
  *(int64x2_t *)(a1 + 1328) = v9;
  *(int64x2_t *)(a1 + 1344) = v9;
  *(int64x2_t *)(a1 + 1360) = v9;
  *(int64x2_t *)(a1 + 1376) = v9;
  *(int64x2_t *)(a1 + 1392) = v9;
  *(int64x2_t *)(a1 + 1408) = v9;
  *(int64x2_t *)(a1 + 1424) = v9;
  *(int64x2_t *)(a1 + 1440) = v9;
  *(int64x2_t *)(a1 + 1456) = v9;
  *(void *)(a1 + 1472) = 0;
  *(void *)(a1 + 1480) = 0x7FFFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 1488) = 0;
  *(int64x2_t *)(a1 + 1496) = v9;
  uint64_t v16 = (_DWORD *)(a1 + 1512);
  *(void *)(a1 + 1560) = -1;
  *(void *)&long long v17 = -1;
  *((void *)&v17 + 1) = -1;
  *(_OWORD *)(a1 + 1528) = v17;
  *(_OWORD *)(a1 + 1544) = v17;
  *(_OWORD *)(a1 + 1512) = v17;
  *(unsigned char *)(a1 + 1568) = 0;
  *(int64x2_t *)(a1 + 1576) = v9;
  *(int64x2_t *)(a1 + 1592) = v9;
  *(unsigned char *)(a1 + 1608) = 0;
  *(_DWORD *)(a1 + 1612) = 0x7FFFFFFF;
  *(void *)(a1 + 1616) = 0;
  *(_WORD *)(a1 + 1624) = 0;
  *(int64x2_t *)(a1 + 1632) = v9;
  *(int64x2_t *)(a1 + 1648) = v9;
  *(int64x2_t *)(a1 + 1664) = v9;
  *(int64x2_t *)(a1 + 1680) = v9;
  *(int64x2_t *)(a1 + 1696) = v9;
  *(int64x2_t *)(a1 + 1712) = v9;
  *(int64x2_t *)(a1 + 1728) = v9;
  *(int64x2_t *)(a1 + 1744) = v9;
  *(int64x2_t *)(a1 + 1760) = v9;
  *(int64x2_t *)(a1 + 1776) = v9;
  *(int64x2_t *)(a1 + 1792) = v9;
  *(int64x2_t *)(a1 + 1808) = v9;
  *(int64x2_t *)(a1 + 1824) = v9;
  *(int64x2_t *)(a1 + 1840) = v9;
  unint64_t v159 = (void *)(a1 + 1856);
  uint64_t v160 = a1 + 264;
  *(void *)(a1 + 1871) = 0;
  *(_OWORD *)(a1 + 1856) = 0u;
  *(int64x2_t *)(a1 + 1880) = v9;
  uint64_t v18 = (long long *)(a1 + 1904);
  *(_DWORD *)(a1 + 1896) = 0;
  *(void *)(a1 + 1920) = 0;
  *(void *)((char *)v18 + 21) = 0;
  *(_OWORD *)(a1 + 1904) = 0u;
  *(int64x2_t *)(a1 + 1936) = v9;
  *(int64x2_t *)(a1 + 1952) = v9;
  *(unsigned char *)(a1 + 1968) = 1;
  *(void *)(a1 + 1969) = 0;
  *(unsigned char *)(a1 + 1977) = 0;
  *(void *)(a1 + 1984) = 0x7FFFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 1992) = 0;
  *(void *)(a1 + 2000) = 0x7FFFFFFFFFFFFFFFLL;
  *(_WORD *)(a1 + 2032) = 0;
  *(void *)(a1 + 2024) = 0;
  size_t v158 = (BOOL *)(a1 + 1969);
  *(_OWORD *)(a1 + 2008) = 0u;
  int v157 = v18;
  std::string::operator=((std::string *)v18, __str);
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9800;
  strcpy(v175[0], "routing/guidance/Guidance.json");
  if (*(char *)(a1 + 1927) < 0)
  {
    sub_4200(&__dst, *(void **)(a1 + 1904), *(void *)(a1 + 1912));
  }
  else
  {
    long long __dst = *v157;
    uint64_t v179 = *((void *)v157 + 2);
  }
  sub_28C774(&v173, (uint64_t)&__dst, 1uLL);
  uint64_t v19 = sub_374CDC(a2, (uint64_t)v175, (uint64_t *)&v173);
  sub_3CB370(v19, a3, a4, v176);
  uint64_t v20 = (uint64_t)v173;
  if (v173)
  {
    uint64_t v21 = v174;
    long long v22 = v173;
    if ((void *)v174 != v173)
    {
      do
      {
        if (*(char *)(v21 - 1) < 0) {
          operator delete(*(void **)(v21 - 24));
        }
        v21 -= 24;
      }
      while (v21 != v20);
      long long v22 = v173;
    }
    uint64_t v174 = v20;
    operator delete(v22);
  }
  if (SHIBYTE(v179) < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
      goto LABEL_14;
    }
LABEL_479:
    operator delete(v175[0]);
    goto LABEL_14;
  }
  if (SHIBYTE(v175[2]) < 0) {
    goto LABEL_479;
  }
LABEL_14:
  HIBYTE(v175[2]) = 14;
  strcpy((char *)v175, "exit_shield_id");
  int v23 = sub_58070(v176, (uint64_t)v175);
  if (v23 && *((_DWORD *)v23 + 12) == 1)
  {
    *uint64_t v16 = *((double *)v23 + 5);
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_19;
    }
  }
  else
  {
    *uint64_t v16 = *v16;
    if (SHIBYTE(v175[2]) < 0) {
LABEL_19:
    }
      operator delete(v175[0]);
  }
  strcpy((char *)v175, "CHADEMO_plug_shield_id");
  HIBYTE(v175[2]) = 22;
  size_t v24 = sub_58070(v176, (uint64_t)v175);
  if (v24 && *((_DWORD *)v24 + 12) == 1)
  {
    *(_DWORD *)(a1 + 1516) = *((double *)v24 + 5);
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_25;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 1516) = *(_DWORD *)(a1 + 1516);
    if (SHIBYTE(v175[2]) < 0) {
LABEL_25:
    }
      operator delete(v175[0]);
  }
  HIBYTE(v175[2]) = 20;
  strcpy((char *)v175, "J1772_plug_shield_id");
  size_t v25 = sub_58070(v176, (uint64_t)v175);
  if (v25 && *((_DWORD *)v25 + 12) == 1)
  {
    *(_DWORD *)(a1 + 1520) = *((double *)v25 + 5);
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_31;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 1520) = *(_DWORD *)(a1 + 1520);
    if (SHIBYTE(v175[2]) < 0) {
LABEL_31:
    }
      operator delete(v175[0]);
  }
  HIBYTE(v175[2]) = 20;
  strcpy((char *)v175, "TESLA_plug_shield_id");
  unint64_t v26 = sub_58070(v176, (uint64_t)v175);
  if (v26 && *((_DWORD *)v26 + 12) == 1)
  {
    *(_DWORD *)(a1 + 1524) = *((double *)v26 + 5);
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_37;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 1524) = *(_DWORD *)(a1 + 1524);
    if (SHIBYTE(v175[2]) < 0) {
LABEL_37:
    }
      operator delete(v175[0]);
  }
  HIBYTE(v175[2]) = 19;
  strcpy((char *)v175, "CCS1_plug_shield_id");
  uint64_t v27 = sub_58070(v176, (uint64_t)v175);
  if (v27 && *((_DWORD *)v27 + 12) == 1)
  {
    *(_DWORD *)(a1 + 1528) = *((double *)v27 + 5);
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_43;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 1528) = *(_DWORD *)(a1 + 1528);
    if (SHIBYTE(v175[2]) < 0) {
LABEL_43:
    }
      operator delete(v175[0]);
  }
  HIBYTE(v175[2]) = 19;
  strcpy((char *)v175, "CCS2_plug_shield_id");
  uint64_t v28 = sub_58070(v176, (uint64_t)v175);
  if (v28 && *((_DWORD *)v28 + 12) == 1)
  {
    *(_DWORD *)(a1 + 1532) = *((double *)v28 + 5);
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_49;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 1532) = *(_DWORD *)(a1 + 1532);
    if (SHIBYTE(v175[2]) < 0) {
LABEL_49:
    }
      operator delete(v175[0]);
  }
  HIBYTE(v175[2]) = 19;
  strcpy((char *)v175, "GBT1_plug_shield_id");
  long long v29 = sub_58070(v176, (uint64_t)v175);
  if (v29 && *((_DWORD *)v29 + 12) == 1)
  {
    *(_DWORD *)(a1 + 1536) = *((double *)v29 + 5);
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_55;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 1536) = *(_DWORD *)(a1 + 1536);
    if (SHIBYTE(v175[2]) < 0) {
LABEL_55:
    }
      operator delete(v175[0]);
  }
  HIBYTE(v175[2]) = 19;
  strcpy((char *)v175, "GBT2_plug_shield_id");
  uint64_t v30 = sub_58070(v176, (uint64_t)v175);
  if (v30 && *((_DWORD *)v30 + 12) == 1)
  {
    *(_DWORD *)(a1 + 1540) = *((double *)v30 + 5);
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_61;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 1540) = *(_DWORD *)(a1 + 1540);
    if (SHIBYTE(v175[2]) < 0) {
LABEL_61:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x19uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9250;
  strcpy(v175[0], "MENNEKES_plug_shield_id");
  int v31 = sub_58070(v176, (uint64_t)v175);
  if (v31 && *((_DWORD *)v31 + 12) == 1)
  {
    *(_DWORD *)(a1 + 1544) = *((double *)v31 + 5);
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_67;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 1544) = *(_DWORD *)(a1 + 1544);
    if (SHIBYTE(v175[2]) < 0) {
LABEL_67:
    }
      operator delete(v175[0]);
  }
  strcpy((char *)v175, "NACS_AC_plug_shield_id");
  HIBYTE(v175[2]) = 22;
  size_t v32 = sub_58070(v176, (uint64_t)v175);
  if (v32 && *((_DWORD *)v32 + 12) == 1)
  {
    *(_DWORD *)(a1 + 1548) = *((double *)v32 + 5);
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_73;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 1548) = *(_DWORD *)(a1 + 1548);
    if (SHIBYTE(v175[2]) < 0) {
LABEL_73:
    }
      operator delete(v175[0]);
  }
  strcpy((char *)v175, "NACS_DC_plug_shield_id");
  HIBYTE(v175[2]) = 22;
  unint64_t v33 = sub_58070(v176, (uint64_t)v175);
  if (v33 && *((_DWORD *)v33 + 12) == 1)
  {
    *(_DWORD *)(a1 + 1552) = *((double *)v33 + 5);
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_79;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 1552) = *(_DWORD *)(a1 + 1552);
    if (SHIBYTE(v175[2]) < 0) {
LABEL_79:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8890;
  strcpy(v175[0], "charging_at_station_shield_id");
  BOOL v34 = sub_58070(v176, (uint64_t)v175);
  if (v34 && *((_DWORD *)v34 + 12) == 1)
  {
    *(_DWORD *)(a1 + 1556) = *((double *)v34 + 5);
    if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
      goto LABEL_86;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 1556) = *(_DWORD *)(a1 + 1556);
    if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
      goto LABEL_86;
    }
  }
  operator delete(v175[0]);
LABEL_86:
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8870;
  strcpy(v175[0], "ev_soc_critical_threshold");
  *(_DWORD *)(a1 + 1560) = sub_62B904(v176, (uint64_t)v175);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  HIBYTE(v175[2]) = 20;
  strcpy((char *)v175, "ev_soc_low_threshold");
  *(_DWORD *)(a1 + 1564) = sub_62B904(v176, (uint64_t)v175);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9960;
  strcpy(v175[0], "max_num_previous_relevant_similar_turns");
  unint64_t v35 = sub_58070(v176, (uint64_t)v175);
  if (v35 && *((_DWORD *)v35 + 12) == 1)
  {
    *(unsigned char *)a1 = (int)*((double *)v35 + 5);
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_95;
    }
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a1;
    if (SHIBYTE(v175[2]) < 0) {
LABEL_95:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B99E0;
  strcpy(v175[0], "max_confusing_turn_and_maneuver_turn_road_class_delta");
  unint64_t v36 = sub_58070(v176, (uint64_t)v175);
  if (v36 && *((_DWORD *)v36 + 12) == 1)
  {
    *(unsigned char *)(a1 + 1) = (int)*((double *)v36 + 5);
    if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
      goto LABEL_102;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1) = *(unsigned char *)(a1 + 1);
    if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
      goto LABEL_102;
    }
  }
  operator delete(v175[0]);
LABEL_102:
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B5EB0;
  strcpy(v175[0], "max_distance_between_turns");
  sub_5C8A4(v176, (uint64_t)v175, v10);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B5EB0;
  strcpy(v175[0], "max_distance_between_exits");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 16));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9240;
  strcpy(v175[0], "walking_secondary_sign_start_distance");
  sub_5C8A4(v176, (uint64_t)v175, v11);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93E0;
  strcpy(v175[0], "walking_step_spoken_chain_distance_imperial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 32));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93D0;
  strcpy(v175[0], "walking_step_spoken_chain_distance_metric");
  sub_5C8A4(v176, (uint64_t)v175, v12);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9800;
  strcpy(v175[0], "step_spoken_chain_distance_fwy");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 48));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93D0;
  strcpy(v175[0], "step_spoken_chain_distance_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, v13);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93D0;
  strcpy(v175[0], "step_spoken_chain_distance_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 64));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9390;
  strcpy(v175[0], "step_spoken_chain_distance_local");
  sub_5C8A4(v176, (uint64_t)v175, v14);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93D0;
  strcpy(v175[0], "min_distance_hint_point_to_maneuver_start");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 80));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  HIBYTE(v175[2]) = 17;
  strcpy((char *)v175, "min_distance_ramp");
  sub_5C8A4(v176, (uint64_t)v175, v172);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93E0;
  strcpy(v175[0], "continue_stage_min_step_distance_fwy_metric");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 96));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9380;
  strcpy(v175[0], "continue_stage_min_step_distance_non_fwy_metric");
  sub_5C8A4(v176, (uint64_t)v175, v171);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93B0;
  strcpy(v175[0], "continue_stage_min_step_distance_fwy_imperial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 112));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A10;
  strcpy(v175[0], "continue_stage_min_step_distance_non_fwy_imperial");
  sub_5C8A4(v176, (uint64_t)v175, v170);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20E1380;
  strcpy(v175[0], "continue_stage_end_distance_threshold_metric");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 128));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A80;
  strcpy(v175[0], "continue_stage_end_distance_threshold_imperial");
  sub_5C8A4(v176, (uint64_t)v175, v169);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B91C0;
  strcpy(v175[0], "initial_prepare_time_gap");
  sub_5D498(v176, (uint64_t)v175, v168);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  HIBYTE(v175[2]) = 16;
  strcpy((char *)v175, "default_time_gap");
  sub_5D498(v176, (uint64_t)v175, (_DWORD *)(a1 + 148));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9800;
  strcpy(v175[0], "execute_start_desired_time_fwy");
  sub_5D498(v176, (uint64_t)v175, (_DWORD *)(a1 + 152));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93D0;
  strcpy(v175[0], "execute_start_desired_time_major_arterial");
  sub_5D498(v176, (uint64_t)v175, (_DWORD *)(a1 + 156));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93D0;
  strcpy(v175[0], "execute_start_desired_time_minor_arterial");
  sub_5D498(v176, (uint64_t)v175, v167);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9390;
  strcpy(v175[0], "execute_start_desired_time_local");
  sub_5D498(v176, (uint64_t)v175, (_DWORD *)(a1 + 164));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8890;
  strcpy(v175[0], "execute_start_latest_time_fwy");
  sub_5D498(v176, (uint64_t)v175, (_DWORD *)(a1 + 168));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93C0;
  strcpy(v175[0], "execute_start_latest_time_major_arterial");
  sub_5D498(v176, (uint64_t)v175, (_DWORD *)(a1 + 172));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93C0;
  strcpy(v175[0], "execute_start_latest_time_minor_arterial");
  sub_5D498(v176, (uint64_t)v175, v166);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8E90;
  strcpy(v175[0], "execute_start_latest_time_local");
  sub_5D498(v176, (uint64_t)v175, (_DWORD *)(a1 + 180));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B5EB0;
  strcpy(v175[0], "mlg_start_desired_time_fwy");
  sub_5D498(v176, (uint64_t)v175, (_DWORD *)(a1 + 184));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9240;
  strcpy(v175[0], "mlg_start_desired_time_major_arterial");
  sub_5D498(v176, (uint64_t)v175, (_DWORD *)(a1 + 188));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9240;
  strcpy(v175[0], "mlg_start_desired_time_minor_arterial");
  sub_5D498(v176, (uint64_t)v175, v165);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B91B0;
  strcpy(v175[0], "mlg_start_desired_time_local");
  sub_5D498(v176, (uint64_t)v175, (_DWORD *)(a1 + 196));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  HIBYTE(v175[2]) = 16;
  strcpy((char *)v175, "desired_end_time");
  sub_5D498(v176, (uint64_t)v175, (_DWORD *)(a1 + 200));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  HIBYTE(v175[2]) = 19;
  strcpy((char *)v175, "repetition_interval");
  sub_5D498(v176, (uint64_t)v175, (_DWORD *)(a1 + 204));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  HIBYTE(v175[2]) = 20;
  strcpy((char *)v175, "suppression_duration");
  sub_5D498(v176, (uint64_t)v175, v164);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x19uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9250;
  strcpy(v175[0], "min_event_width_freeway");
  sub_5C8A4(v176, (uint64_t)v175, v163);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9800;
  strcpy(v175[0], "min_event_width_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 224));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9800;
  strcpy(v175[0], "min_event_width_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, v162);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  HIBYTE(v175[2]) = 21;
  strcpy((char *)v175, "min_event_width_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 240));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9390;
  strcpy(v175[0], "time_gap_between_initial_prepare");
  sub_5D498(v176, (uint64_t)v175, v161);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93C0;
  strcpy(v175[0], "default_time_gap_between_maneuver_events");
  sub_5D498(v176, (uint64_t)v175, (_DWORD *)(a1 + 252));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A10;
  strcpy(v175[0], "default_time_gap_between_lane_and_maneuver_events");
  sub_5D498(v176, (uint64_t)v175, (_DWORD *)(a1 + 256));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8FD0;
  strcpy(v175[0], "default_time_gap_between_lane_events");
  sub_5D498(v176, (uint64_t)v175, (_DWORD *)(a1 + 260));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93B0;
  strcpy(v175[0], "time_gap_between_initial_and_natural_guidance");
  sub_5D498(v176, (uint64_t)v175, (_DWORD *)v160);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B99F0;
  strcpy(v175[0], "time_gap_between_initial_and_go_past_traffic_signal");
  sub_5D498(v176, (uint64_t)v175, (_DWORD *)(a1 + 268));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A60;
  strcpy(v175[0], "time_gap_between_initial_and_next_traffic_signal");
  sub_5D498(v176, (uint64_t)v175, (_DWORD *)(a1 + 272));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93B0;
  strcpy(v175[0], "time_gap_between_prepare_and_natural_guidance");
  sub_5D498(v176, (uint64_t)v175, (_DWORD *)(a1 + 276));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B99F0;
  strcpy(v175[0], "time_gap_between_prepare_and_go_past_traffic_signal");
  sub_5D498(v176, (uint64_t)v175, (_DWORD *)(a1 + 280));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A60;
  strcpy(v175[0], "time_gap_between_prepare_and_next_traffic_signal");
  sub_5D498(v176, (uint64_t)v175, (_DWORD *)(a1 + 284));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8890;
  strcpy(v175[0], "min_sign_distance_gap_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 288));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8FD0;
  strcpy(v175[0], "min_sign_distance_gap_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 296));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8FD0;
  strcpy(v175[0], "min_sign_distance_gap_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 304));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B91A0;
  strcpy(v175[0], "min_sign_distance_gap_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 312));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8FD0;
  strcpy(v175[0], "min_distance_initial_prepare_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 320));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93E0;
  strcpy(v175[0], "min_distance_initial_prepare_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 328));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93E0;
  strcpy(v175[0], "min_distance_initial_prepare_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 336));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9280;
  strcpy(v175[0], "min_distance_initial_prepare_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 344));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9960;
  strcpy(v175[0], "prepare_start_distance_freeway_imperial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 384));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A80;
  strcpy(v175[0], "prepare_start_distance_major_arterial_imperial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 392));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A80;
  strcpy(v175[0], "prepare_start_distance_minor_arterial_imperial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 400));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9240;
  strcpy(v175[0], "prepare_start_distance_local_imperial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 408));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9240;
  strcpy(v175[0], "prepare_start_distance_freeway_metric");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 352));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20E1380;
  strcpy(v175[0], "prepare_start_distance_major_arterial_metric");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 360));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20E1380;
  strcpy(v175[0], "prepare_start_distance_minor_arterial_metric");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 368));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93A0;
  strcpy(v175[0], "prepare_start_distance_local_metric");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 376));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B91A0;
  strcpy(v175[0], "mid_step_sign_stack_ranking");
  BOOL v37 = sub_58070(v176, (uint64_t)v175);
  int64_t v38 = (unsigned char *)(a1 + 416);
  if (v37 && *((_DWORD *)v37 + 12) == 1)
  {
    unsigned char *v38 = (int)*((double *)v37 + 5);
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_235;
    }
  }
  else
  {
    unsigned char *v38 = *v38;
    if (SHIBYTE(v175[2]) < 0) {
LABEL_235:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B91C0;
  strcpy(v175[0], "merge_sign_stack_ranking");
  unint64_t v39 = sub_58070(v176, (uint64_t)v175);
  if (v39 && *((_DWORD *)v39 + 12) == 1)
  {
    *(unsigned char *)(a1 + 417) = (int)*((double *)v39 + 5);
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_241;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 417) = *(unsigned char *)(a1 + 417);
    if (SHIBYTE(v175[2]) < 0) {
LABEL_241:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8870;
  strcpy(v175[0], "normal_sign_stack_ranking");
  uint8x8_t v40 = sub_58070(v176, (uint64_t)v175);
  if (v40 && *((_DWORD *)v40 + 12) == 1)
  {
    *(unsigned char *)(a1 + 418) = (int)*((double *)v40 + 5);
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_247;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 418) = *(unsigned char *)(a1 + 418);
    if (SHIBYTE(v175[2]) < 0) {
LABEL_247:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B91B0;
  strcpy(v175[0], "secondary_sign_stack_ranking");
  uint64_t v41 = sub_58070(v176, (uint64_t)v175);
  if (v41 && *((_DWORD *)v41 + 12) == 1)
  {
    *(unsigned char *)(a1 + 419) = (int)*((double *)v41 + 5);
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_253;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 419) = *(unsigned char *)(a1 + 419);
    if (SHIBYTE(v175[2]) < 0) {
LABEL_253:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B91C0;
  strcpy(v175[0], "route_planning_max_names");
  int v42 = sub_58070(v176, (uint64_t)v175);
  if (v42 && *((_DWORD *)v42 + 12) == 1)
  {
    *(unsigned char *)(a1 + 1568) = (int)*((double *)v42 + 5);
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_259;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1568) = *(unsigned char *)(a1 + 1568);
    if (SHIBYTE(v175[2]) < 0) {
LABEL_259:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8890;
  strcpy(v175[0], "initial_spoken_event_priority");
  size_t v43 = sub_58070(v176, (uint64_t)v175);
  if (v43 && *((_DWORD *)v43 + 12) == 1)
  {
    *(unsigned char *)(a1 + 420) = (int)*((double *)v43 + 5);
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_265;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 420) = *(unsigned char *)(a1 + 420);
    if (SHIBYTE(v175[2]) < 0) {
LABEL_265:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8890;
  strcpy(v175[0], "prepare_spoken_event_priority");
  unint64_t v44 = sub_58070(v176, (uint64_t)v175);
  if (v44 && *((_DWORD *)v44 + 12) == 1)
  {
    *(unsigned char *)(a1 + 421) = (int)*((double *)v44 + 5);
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_271;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 421) = *(unsigned char *)(a1 + 421);
    if (SHIBYTE(v175[2]) < 0) {
LABEL_271:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9800;
  strcpy(v175[0], "continue_spoken_event_priority");
  int64_t v45 = sub_58070(v176, (uint64_t)v175);
  if (v45 && *((_DWORD *)v45 + 12) == 1)
  {
    *(unsigned char *)(a1 + 422) = (int)*((double *)v45 + 5);
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_277;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 422) = *(unsigned char *)(a1 + 422);
    if (SHIBYTE(v175[2]) < 0) {
LABEL_277:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8890;
  strcpy(v175[0], "midstep_spoken_event_priority");
  unint64_t v46 = sub_58070(v176, (uint64_t)v175);
  if (v46 && *((_DWORD *)v46 + 12) == 1)
  {
    *(unsigned char *)(a1 + 423) = (int)*((double *)v46 + 5);
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_283;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 423) = *(unsigned char *)(a1 + 423);
    if (SHIBYTE(v175[2]) < 0) {
LABEL_283:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8890;
  strcpy(v175[0], "execute_spoken_event_priority");
  size_t v47 = sub_58070(v176, (uint64_t)v175);
  if (v47 && *((_DWORD *)v47 + 12) == 1)
  {
    *(unsigned char *)(a1 + 424) = (int)*((double *)v47 + 5);
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_289;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 424) = *(unsigned char *)(a1 + 424);
    if (SHIBYTE(v175[2]) < 0) {
LABEL_289:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8870;
  strcpy(v175[0], "mlg_spoken_event_priority");
  unint64_t v48 = sub_58070(v176, (uint64_t)v175);
  if (v48 && *((_DWORD *)v48 + 12) == 1)
  {
    *(unsigned char *)(a1 + 425) = (int)*((double *)v48 + 5);
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_295;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 425) = *(unsigned char *)(a1 + 425);
    if (SHIBYTE(v175[2]) < 0) {
LABEL_295:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9240;
  strcpy(v175[0], "verbose_execute_spoken_event_priority");
  int64_t v49 = sub_58070(v176, (uint64_t)v175);
  if (v49 && *((_DWORD *)v49 + 12) == 1)
  {
    *(unsigned char *)(a1 + 426) = (int)*((double *)v49 + 5);
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_301;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 426) = *(unsigned char *)(a1 + 426);
    if (SHIBYTE(v175[2]) < 0) {
LABEL_301:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8E90;
  strcpy(v175[0], "traffic_signal_prepare_priority");
  long long v50 = sub_58070(v176, (uint64_t)v175);
  if (v50 && *((_DWORD *)v50 + 12) == 1)
  {
    *(unsigned char *)(a1 + 427) = (int)*((double *)v50 + 5);
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_307;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 427) = *(unsigned char *)(a1 + 427);
    if (SHIBYTE(v175[2]) < 0) {
LABEL_307:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93C0;
  strcpy(v175[0], "go_past_traffic_signal_guidance_priority");
  int v51 = sub_58070(v176, (uint64_t)v175);
  if (v51 && *((_DWORD *)v51 + 12) == 1)
  {
    *(unsigned char *)(a1 + 428) = (int)*((double *)v51 + 5);
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_313;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 428) = *(unsigned char *)(a1 + 428);
    if (SHIBYTE(v175[2]) < 0) {
LABEL_313:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8E90;
  strcpy(v175[0], "go_past_street_or_exit_priority");
  size_t v52 = sub_58070(v176, (uint64_t)v175);
  if (v52 && *((_DWORD *)v52 + 12) == 1)
  {
    *(unsigned char *)(a1 + 429) = (int)*((double *)v52 + 5);
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_319;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 429) = *(unsigned char *)(a1 + 429);
    if (SHIBYTE(v175[2]) < 0) {
LABEL_319:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x19uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9250;
  strcpy(v175[0], "traffic_camera_priority");
  int v53 = sub_58070(v176, (uint64_t)v175);
  if (v53 && *((_DWORD *)v53 + 12) == 1)
  {
    *(unsigned char *)(a1 + 430) = (int)*((double *)v53 + 5);
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_325;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 430) = *(unsigned char *)(a1 + 430);
    if (SHIBYTE(v175[2]) < 0) {
LABEL_325:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8E90;
  strcpy(v175[0], "special_guidance_event_priority");
  size_t v54 = sub_58070(v176, (uint64_t)v175);
  if (v54 && *((_DWORD *)v54 + 12) == 1)
  {
    *(unsigned char *)(a1 + 431) = (int)*((double *)v54 + 5);
    if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
      goto LABEL_332;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 431) = *(unsigned char *)(a1 + 431);
    if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
      goto LABEL_332;
    }
  }
  operator delete(v175[0]);
LABEL_332:
  v175[0] = (char *)operator new(0x40uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A70;
  strcpy(v175[0], "max_second_closest_street_or_exit_lookup_distance_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 432));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x48uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A00;
  strcpy(v175[0], "max_second_closest_street_or_exit_lookup_distance_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 440));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x48uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A00;
  strcpy(v175[0], "max_second_closest_street_or_exit_lookup_distance_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 448));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9AD0;
  strcpy(v175[0], "max_second_closest_street_or_exit_lookup_distance_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 456));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9800;
  strcpy(v175[0], "max_mlg_start_distance_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 464));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9240;
  strcpy(v175[0], "max_mlg_start_distance_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 472));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9240;
  strcpy(v175[0], "max_mlg_start_distance_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 480));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B91B0;
  strcpy(v175[0], "max_mlg_start_distance_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 488));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93B0;
  strcpy(v175[0], "max_obvious_lg_execute_start_distance_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 496));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9AC0;
  strcpy(v175[0], "max_obvious_lg_execute_start_distance_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 504));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9AC0;
  strcpy(v175[0], "max_obvious_lg_execute_start_distance_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 512));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93E0;
  strcpy(v175[0], "max_obvious_lg_execute_start_distance_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 520));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9280;
  strcpy(v175[0], "max_execute_start_distance_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 528));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93D0;
  strcpy(v175[0], "max_execute_start_distance_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 536));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93D0;
  strcpy(v175[0], "max_execute_start_distance_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 544));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9390;
  strcpy(v175[0], "max_execute_start_distance_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 552));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9280;
  strcpy(v175[0], "min_execute_start_distance_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 560));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93D0;
  strcpy(v175[0], "min_execute_start_distance_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 568));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93D0;
  strcpy(v175[0], "min_execute_start_distance_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 576));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9390;
  strcpy(v175[0], "min_execute_start_distance_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 584));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9800;
  strcpy(v175[0], "min_mlg_start_distance_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 592));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9240;
  strcpy(v175[0], "min_mlg_start_distance_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 600));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9240;
  strcpy(v175[0], "min_mlg_start_distance_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 608));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B91B0;
  strcpy(v175[0], "min_mlg_start_distance_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 616));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20E12D0;
  strcpy(v175[0], "verbose_execute_start_distance_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 624));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93B0;
  strcpy(v175[0], "verbose_execute_start_distance_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 632));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93B0;
  strcpy(v175[0], "verbose_execute_start_distance_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 640));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8FD0;
  strcpy(v175[0], "verbose_execute_start_distance_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 648));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93C0;
  strcpy(v175[0], "min_distance_gap_verbose_execute_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 656));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9380;
  strcpy(v175[0], "min_distance_gap_verbose_execute_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 664));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9380;
  strcpy(v175[0], "min_distance_gap_verbose_execute_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 672));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20E12D0;
  strcpy(v175[0], "min_distance_gap_verbose_execute_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 680));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93A0;
  strcpy(v175[0], "max_distance_before_midstep_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 752));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A40;
  strcpy(v175[0], "max_distance_before_midstep_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 760));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A40;
  strcpy(v175[0], "max_distance_before_midstep_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 768));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9260;
  strcpy(v175[0], "max_distance_before_midstep_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 776));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93A0;
  strcpy(v175[0], "max_visual_lane_info_length_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 688));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A40;
  strcpy(v175[0], "max_visual_lane_info_length_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 696));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A40;
  strcpy(v175[0], "max_visual_lane_info_length_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 704));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9260;
  strcpy(v175[0], "max_visual_lane_info_length_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 712));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93A0;
  strcpy(v175[0], "min_visual_lane_info_length_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 720));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A40;
  strcpy(v175[0], "min_visual_lane_info_length_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 728));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A40;
  strcpy(v175[0], "min_visual_lane_info_length_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 736));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9260;
  strcpy(v175[0], "min_visual_lane_info_length_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 744));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8890;
  strcpy(v175[0], "ramp_visual_pullback_distance");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 784));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A40;
  strcpy(v175[0], "min_lane_geometry_pullback_midstep_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 792));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A10;
  strcpy(v175[0], "min_lane_geometry_pullback_midstep_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 800));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A10;
  strcpy(v175[0], "min_lane_geometry_pullback_midstep_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 808));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93C0;
  strcpy(v175[0], "min_lane_geometry_pullback_midstep_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 816));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20E12D0;
  strcpy(v175[0], "min_lane_geometry_pullback_mlg_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 824));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93B0;
  strcpy(v175[0], "min_lane_geometry_pullback_mlg_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 832));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93B0;
  strcpy(v175[0], "min_lane_geometry_pullback_mlg_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 840));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8FD0;
  strcpy(v175[0], "min_lane_geometry_pullback_mlg_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 848));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8DF0;
  strcpy(v175[0], "spoken_go_past_traffic_signal_advance_distance_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 888));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x40uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9810;
  strcpy(v175[0], "spoken_go_past_traffic_signal_advance_distance_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 896));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x40uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9810;
  strcpy(v175[0], "spoken_go_past_traffic_signal_advance_distance_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 904));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9AC0;
  strcpy(v175[0], "spoken_go_past_traffic_signal_advance_distance_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 912));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B99F0;
  strcpy(v175[0], "spoken_min_distance_between_traffic_signals_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 920));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x40uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A30;
  strcpy(v175[0], "spoken_min_distance_between_traffic_signals_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 928));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x40uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A30;
  strcpy(v175[0], "spoken_min_distance_between_traffic_signals_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 936));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A10;
  strcpy(v175[0], "spoken_min_distance_between_traffic_signals_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 944));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x40uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A30;
  strcpy(v175[0], "spoken_min_distance_between_adjacent_similar_turns_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 952));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x48uLL);
  *(_OWORD *)&v175[1] = xmmword_20E8240;
  strcpy(v175[0], "spoken_min_distance_between_adjacent_similar_turns_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 960));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x48uLL);
  *(_OWORD *)&v175[1] = xmmword_20E8240;
  strcpy(v175[0], "spoken_min_distance_between_adjacent_similar_turns_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 968));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x40uLL);
  *(_OWORD *)&v175[1] = xmmword_20B98C0;
  strcpy(v175[0], "spoken_min_distance_between_adjacent_similar_turns_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 976));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A80;
  strcpy(v175[0], "spoken_go_past_street_advance_distance_freeway");
  double v55 = sub_5C7E8(v176, (uint64_t)v175) * 100.0;
  if (v55 >= 0.0)
  {
    double v56 = v55;
    if (v55 >= 4.50359963e15) {
      goto LABEL_470;
    }
    uint64_t v57 = (uint64_t)(v55 + v55) + 1;
  }
  else
  {
    double v56 = v55;
    if (v55 <= -4.50359963e15) {
      goto LABEL_470;
    }
    uint64_t v57 = (uint64_t)(v55 + v55);
    if (v57 >= 1) {
      --v57;
    }
  }
  double v56 = (double)(v57 >> 1);
LABEL_470:
  if (v56 < 9.22337204e18)
  {
    if (v55 >= 0.0)
    {
      if (v55 >= 4.50359963e15) {
        goto LABEL_483;
      }
      uint64_t v58 = (uint64_t)(v55 + v55) + 1;
    }
    else
    {
      if (v55 <= -4.50359963e15) {
        goto LABEL_483;
      }
      uint64_t v58 = (uint64_t)(v55 + v55);
      if (v58 >= 1) {
        --v58;
      }
    }
    double v55 = (double)(v58 >> 1);
LABEL_483:
    *(void *)(a1 + 984) = (uint64_t)v55;
    if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
      goto LABEL_485;
    }
    goto LABEL_484;
  }
  *(void *)(a1 + 984) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
    goto LABEL_485;
  }
LABEL_484:
  operator delete(v175[0]);
LABEL_485:
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B99E0;
  strcpy(v175[0], "spoken_go_past_street_advance_distance_major_arterial");
  double v59 = sub_5C7E8(v176, (uint64_t)v175) * 100.0;
  if (v59 >= 0.0)
  {
    double v60 = v59;
    if (v59 >= 4.50359963e15) {
      goto LABEL_493;
    }
    uint64_t v61 = (uint64_t)(v59 + v59) + 1;
  }
  else
  {
    double v60 = v59;
    if (v59 <= -4.50359963e15) {
      goto LABEL_493;
    }
    uint64_t v61 = (uint64_t)(v59 + v59);
    if (v61 >= 1) {
      --v61;
    }
  }
  double v60 = (double)(v61 >> 1);
LABEL_493:
  if (v60 < 9.22337204e18)
  {
    if (v59 >= 0.0)
    {
      if (v59 >= 4.50359963e15) {
        goto LABEL_504;
      }
      uint64_t v62 = (uint64_t)(v59 + v59) + 1;
    }
    else
    {
      if (v59 <= -4.50359963e15) {
        goto LABEL_504;
      }
      uint64_t v62 = (uint64_t)(v59 + v59);
      if (v62 >= 1) {
        --v62;
      }
    }
    double v59 = (double)(v62 >> 1);
LABEL_504:
    *(void *)(a1 + 992) = (uint64_t)v59;
    if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
      goto LABEL_506;
    }
    goto LABEL_505;
  }
  *(void *)(a1 + 992) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
    goto LABEL_506;
  }
LABEL_505:
  operator delete(v175[0]);
LABEL_506:
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B99E0;
  strcpy(v175[0], "spoken_go_past_street_advance_distance_minor_arterial");
  double v63 = sub_5C7E8(v176, (uint64_t)v175) * 100.0;
  if (v63 >= 0.0)
  {
    double v64 = v63;
    if (v63 >= 4.50359963e15) {
      goto LABEL_514;
    }
    uint64_t v65 = (uint64_t)(v63 + v63) + 1;
  }
  else
  {
    double v64 = v63;
    if (v63 <= -4.50359963e15) {
      goto LABEL_514;
    }
    uint64_t v65 = (uint64_t)(v63 + v63);
    if (v65 >= 1) {
      --v65;
    }
  }
  double v64 = (double)(v65 >> 1);
LABEL_514:
  if (v64 < 9.22337204e18)
  {
    if (v63 >= 0.0)
    {
      if (v63 >= 4.50359963e15) {
        goto LABEL_525;
      }
      uint64_t v66 = (uint64_t)(v63 + v63) + 1;
    }
    else
    {
      if (v63 <= -4.50359963e15) {
        goto LABEL_525;
      }
      uint64_t v66 = (uint64_t)(v63 + v63);
      if (v66 >= 1) {
        --v66;
      }
    }
    double v63 = (double)(v66 >> 1);
LABEL_525:
    *(void *)(a1 + 1000) = (uint64_t)v63;
    if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
      goto LABEL_527;
    }
    goto LABEL_526;
  }
  *(void *)(a1 + 1000) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
    goto LABEL_527;
  }
LABEL_526:
  operator delete(v175[0]);
LABEL_527:
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20E1380;
  strcpy(v175[0], "spoken_go_past_street_advance_distance_local");
  double v67 = sub_5C7E8(v176, (uint64_t)v175) * 100.0;
  if (v67 >= 0.0)
  {
    double v68 = v67;
    if (v67 >= 4.50359963e15) {
      goto LABEL_535;
    }
    uint64_t v69 = (uint64_t)(v67 + v67) + 1;
  }
  else
  {
    double v68 = v67;
    if (v67 <= -4.50359963e15) {
      goto LABEL_535;
    }
    uint64_t v69 = (uint64_t)(v67 + v67);
    if (v69 >= 1) {
      --v69;
    }
  }
  double v68 = (double)(v69 >> 1);
LABEL_535:
  if (v68 < 9.22337204e18)
  {
    if (v67 >= 0.0)
    {
      if (v67 >= 4.50359963e15) {
        goto LABEL_546;
      }
      uint64_t v70 = (uint64_t)(v67 + v67) + 1;
    }
    else
    {
      if (v67 <= -4.50359963e15) {
        goto LABEL_546;
      }
      uint64_t v70 = (uint64_t)(v67 + v67);
      if (v70 >= 1) {
        --v70;
      }
    }
    double v67 = (double)(v70 >> 1);
LABEL_546:
    *(void *)(a1 + 1008) = (uint64_t)v67;
    if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
      goto LABEL_548;
    }
    goto LABEL_547;
  }
  *(void *)(a1 + 1008) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
    goto LABEL_548;
  }
LABEL_547:
  operator delete(v175[0]);
LABEL_548:
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20E1380;
  strcpy(v175[0], "spoken_go_past_exit_advance_distance_freeway");
  double v71 = sub_5C7E8(v176, (uint64_t)v175) * 100.0;
  if (v71 >= 0.0)
  {
    double v72 = v71;
    if (v71 >= 4.50359963e15) {
      goto LABEL_556;
    }
    uint64_t v73 = (uint64_t)(v71 + v71) + 1;
  }
  else
  {
    double v72 = v71;
    if (v71 <= -4.50359963e15) {
      goto LABEL_556;
    }
    uint64_t v73 = (uint64_t)(v71 + v71);
    if (v73 >= 1) {
      --v73;
    }
  }
  double v72 = (double)(v73 >> 1);
LABEL_556:
  if (v72 < 9.22337204e18)
  {
    if (v71 >= 0.0)
    {
      if (v71 >= 4.50359963e15) {
        goto LABEL_567;
      }
      uint64_t v74 = (uint64_t)(v71 + v71) + 1;
    }
    else
    {
      if (v71 <= -4.50359963e15) {
        goto LABEL_567;
      }
      uint64_t v74 = (uint64_t)(v71 + v71);
      if (v74 >= 1) {
        --v74;
      }
    }
    double v71 = (double)(v74 >> 1);
LABEL_567:
    *(void *)(a1 + 1016) = (uint64_t)v71;
    if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
      goto LABEL_569;
    }
    goto LABEL_568;
  }
  *(void *)(a1 + 1016) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
    goto LABEL_569;
  }
LABEL_568:
  operator delete(v175[0]);
LABEL_569:
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B99F0;
  strcpy(v175[0], "spoken_go_past_exit_advance_distance_major_arterial");
  double v75 = sub_5C7E8(v176, (uint64_t)v175) * 100.0;
  if (v75 >= 0.0)
  {
    double v76 = v75;
    if (v75 >= 4.50359963e15) {
      goto LABEL_577;
    }
    uint64_t v77 = (uint64_t)(v75 + v75) + 1;
  }
  else
  {
    double v76 = v75;
    if (v75 <= -4.50359963e15) {
      goto LABEL_577;
    }
    uint64_t v77 = (uint64_t)(v75 + v75);
    if (v77 >= 1) {
      --v77;
    }
  }
  double v76 = (double)(v77 >> 1);
LABEL_577:
  if (v76 < 9.22337204e18)
  {
    if (v75 >= 0.0)
    {
      if (v75 >= 4.50359963e15) {
        goto LABEL_588;
      }
      uint64_t v78 = (uint64_t)(v75 + v75) + 1;
    }
    else
    {
      if (v75 <= -4.50359963e15) {
        goto LABEL_588;
      }
      uint64_t v78 = (uint64_t)(v75 + v75);
      if (v78 >= 1) {
        --v78;
      }
    }
    double v75 = (double)(v78 >> 1);
LABEL_588:
    *(void *)(a1 + 1024) = (uint64_t)v75;
    if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
      goto LABEL_590;
    }
    goto LABEL_589;
  }
  *(void *)(a1 + 1024) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
    goto LABEL_590;
  }
LABEL_589:
  operator delete(v175[0]);
LABEL_590:
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B99F0;
  strcpy(v175[0], "spoken_go_past_exit_advance_distance_minor_arterial");
  double v79 = sub_5C7E8(v176, (uint64_t)v175) * 100.0;
  if (v79 >= 0.0)
  {
    double v80 = v79;
    if (v79 >= 4.50359963e15) {
      goto LABEL_598;
    }
    uint64_t v81 = (uint64_t)(v79 + v79) + 1;
  }
  else
  {
    double v80 = v79;
    if (v79 <= -4.50359963e15) {
      goto LABEL_598;
    }
    uint64_t v81 = (uint64_t)(v79 + v79);
    if (v81 >= 1) {
      --v81;
    }
  }
  double v80 = (double)(v81 >> 1);
LABEL_598:
  if (v80 < 9.22337204e18)
  {
    if (v79 >= 0.0)
    {
      if (v79 >= 4.50359963e15) {
        goto LABEL_609;
      }
      uint64_t v82 = (uint64_t)(v79 + v79) + 1;
    }
    else
    {
      if (v79 <= -4.50359963e15) {
        goto LABEL_609;
      }
      uint64_t v82 = (uint64_t)(v79 + v79);
      if (v82 >= 1) {
        --v82;
      }
    }
    double v79 = (double)(v82 >> 1);
LABEL_609:
    *(void *)(a1 + 1032) = (uint64_t)v79;
    if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
      goto LABEL_611;
    }
    goto LABEL_610;
  }
  *(void *)(a1 + 1032) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
    goto LABEL_611;
  }
LABEL_610:
  operator delete(v175[0]);
LABEL_611:
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A40;
  strcpy(v175[0], "spoken_go_past_exit_advance_distance_local");
  double v83 = sub_5C7E8(v176, (uint64_t)v175) * 100.0;
  if (v83 >= 0.0)
  {
    double v84 = v83;
    if (v83 >= 4.50359963e15) {
      goto LABEL_619;
    }
    uint64_t v85 = (uint64_t)(v83 + v83) + 1;
  }
  else
  {
    double v84 = v83;
    if (v83 <= -4.50359963e15) {
      goto LABEL_619;
    }
    uint64_t v85 = (uint64_t)(v83 + v83);
    if (v85 >= 1) {
      --v85;
    }
  }
  double v84 = (double)(v85 >> 1);
LABEL_619:
  if (v84 < 9.22337204e18)
  {
    if (v83 >= 0.0)
    {
      if (v83 >= 4.50359963e15) {
        goto LABEL_630;
      }
      uint64_t v86 = (uint64_t)(v83 + v83) + 1;
    }
    else
    {
      if (v83 <= -4.50359963e15) {
        goto LABEL_630;
      }
      uint64_t v86 = (uint64_t)(v83 + v83);
      if (v86 >= 1) {
        --v86;
      }
    }
    double v83 = (double)(v86 >> 1);
LABEL_630:
    *(void *)(a1 + 1040) = (uint64_t)v83;
    if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
      goto LABEL_632;
    }
    goto LABEL_631;
  }
  *(void *)(a1 + 1040) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
    goto LABEL_632;
  }
LABEL_631:
  operator delete(v175[0]);
LABEL_632:
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A10;
  strcpy(v175[0], "max_at_next_traffic_signal_start_distance_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1048));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x40uLL);
  *(_OWORD *)&v175[1] = xmmword_20B98C0;
  strcpy(v175[0], "max_at_next_traffic_signal_start_distance_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1056));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x40uLL);
  *(_OWORD *)&v175[1] = xmmword_20B98C0;
  strcpy(v175[0], "max_at_next_traffic_signal_start_distance_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1064));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9380;
  strcpy(v175[0], "max_at_next_traffic_signal_start_distance_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1072));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x48uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9270;
  strcpy(v175[0], "max_go_past_this_traffic_signal_then_maneuver_start_distance_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1280));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x50uLL);
  *(_OWORD *)&v175[1] = xmmword_20E86E0;
  strcpy(v175[0], "max_go_past_this_traffic_signal_then_maneuver_start_distance_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1288));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x50uLL);
  *(_OWORD *)&v175[1] = xmmword_20E86E0;
  strcpy(v175[0], "max_go_past_this_traffic_signal_then_maneuver_start_distance_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1296));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x48uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9AA0;
  strcpy(v175[0], "max_go_past_this_traffic_signal_then_maneuver_start_distance_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1304));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A10;
  strcpy(v175[0], "traffic_signal_close_to_maneuver_distance_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1080));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x40uLL);
  *(_OWORD *)&v175[1] = xmmword_20B98C0;
  strcpy(v175[0], "traffic_signal_close_to_maneuver_distance_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1088));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x40uLL);
  *(_OWORD *)&v175[1] = xmmword_20B98C0;
  strcpy(v175[0], "traffic_signal_close_to_maneuver_distance_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1096));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9380;
  strcpy(v175[0], "traffic_signal_close_to_maneuver_distance_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1104));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A60;
  strcpy(v175[0], "previous_exit_close_to_maneuver_distance_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1112));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9AD0;
  strcpy(v175[0], "previous_exit_close_to_maneuver_distance_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1120));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9AD0;
  strcpy(v175[0], "previous_exit_close_to_maneuver_distance_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1128));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A80;
  strcpy(v175[0], "previous_exit_close_to_maneuver_distance_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1136));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A60;
  strcpy(v175[0], "previous_turn_close_to_maneuver_distance_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1144));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9AD0;
  strcpy(v175[0], "previous_turn_close_to_maneuver_distance_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1152));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9AD0;
  strcpy(v175[0], "previous_turn_close_to_maneuver_distance_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1160));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A80;
  strcpy(v175[0], "previous_turn_close_to_maneuver_distance_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1168));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9380;
  strcpy(v175[0], "spoken_max_distance_from_traffic_camera_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1176));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9380;
  strcpy(v175[0], "spoken_min_distance_from_traffic_camera_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1184));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8DF0;
  strcpy(v175[0], "spoken_max_distance_from_traffic_camera_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1192));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8DF0;
  strcpy(v175[0], "spoken_min_distance_from_traffic_camera_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1200));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8DF0;
  strcpy(v175[0], "spoken_max_distance_from_traffic_camera_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1208));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8DF0;
  strcpy(v175[0], "spoken_min_distance_from_traffic_camera_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1216));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93B0;
  strcpy(v175[0], "spoken_max_distance_from_traffic_camera_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1224));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93B0;
  strcpy(v175[0], "spoken_min_distance_from_traffic_camera_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1232));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20E12D0;
  strcpy(v175[0], "traffic_camera_group_threshold_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1240));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93B0;
  strcpy(v175[0], "traffic_camera_group_threshold_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1248));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93B0;
  strcpy(v175[0], "traffic_camera_group_threshold_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1256));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8FD0;
  strcpy(v175[0], "traffic_camera_group_threshold_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1264));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9800;
  strcpy(v175[0], "traffic_camera_group_max_count");
  size_t v87 = sub_58070(v176, (uint64_t)v175);
  if (v87 && *((_DWORD *)v87 + 12) == 1)
  {
    *(unsigned char *)(a1 + 1272) = (int)*((double *)v87 + 5);
    if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
      goto LABEL_702;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1272) = *(unsigned char *)(a1 + 1272);
    if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
      goto LABEL_702;
    }
  }
  operator delete(v175[0]);
LABEL_702:
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93A0;
  strcpy(v175[0], "spoken_mlg_advance_distance_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 856));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A40;
  strcpy(v175[0], "spoken_mlg_advance_distance_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 864));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A40;
  strcpy(v175[0], "spoken_mlg_advance_distance_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 872));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9260;
  strcpy(v175[0], "spoken_mlg_advance_distance_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 880));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A60;
  strcpy(v175[0], "midstep_at_start_max_distance_from_start_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1312));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9AD0;
  strcpy(v175[0], "midstep_at_start_max_distance_from_start_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1320));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9AD0;
  strcpy(v175[0], "midstep_at_start_max_distance_from_start_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1328));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A80;
  strcpy(v175[0], "midstep_at_start_max_distance_from_start_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1336));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8FD0;
  strcpy(v175[0], "min_midstep_lane_info_length_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1344));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93E0;
  strcpy(v175[0], "min_midstep_lane_info_length_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1352));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93E0;
  strcpy(v175[0], "min_midstep_lane_info_length_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1360));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9280;
  strcpy(v175[0], "min_midstep_lane_info_length_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1368));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8FD0;
  strcpy(v175[0], "freeway_midstep_max_length_few_lanes");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1376));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9960;
  strcpy(v175[0], "freeway_midstep_max_length_medium_lanes");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1384));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9240;
  strcpy(v175[0], "freeway_midstep_max_length_many_lanes");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1392));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93C0;
  strcpy(v175[0], "midstep_min_visual_length_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1400));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93C0;
  strcpy(v175[0], "midstep_min_visual_length_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1408));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8E90;
  strcpy(v175[0], "midstep_min_visual_length_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1416));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8FD0;
  strcpy(v175[0], "non_forcing_midstep_distance_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1632));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93E0;
  strcpy(v175[0], "non_forcing_midstep_distance_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1640));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93E0;
  strcpy(v175[0], "non_forcing_midstep_distance_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1648));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9280;
  strcpy(v175[0], "non_forcing_midstep_distance_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1656));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9390;
  strcpy(v175[0], "forcing_midstep_distance_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1664));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9960;
  strcpy(v175[0], "forcing_midstep_distance_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1672));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9960;
  strcpy(v175[0], "forcing_midstep_distance_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1680));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9800;
  strcpy(v175[0], "forcing_midstep_distance_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1688));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8FD0;
  strcpy(v175[0], "min_maneuver_visual_distance_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1696));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93E0;
  strcpy(v175[0], "min_maneuver_visual_distance_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1704));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93E0;
  strcpy(v175[0], "min_maneuver_visual_distance_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1712));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9280;
  strcpy(v175[0], "min_maneuver_visual_distance_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1720));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A80;
  strcpy(v175[0], "min_distance_for_pre_maneuver_midsteps_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1728));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B99E0;
  strcpy(v175[0], "min_distance_for_pre_maneuver_midsteps_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1736));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B99E0;
  strcpy(v175[0], "min_distance_for_pre_maneuver_midsteps_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1744));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20E1380;
  strcpy(v175[0], "min_distance_for_pre_maneuver_midsteps_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1752));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A10;
  strcpy(v175[0], "min_pre_maneuver_forcing_midstep_lane_info_length");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1456));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93C0;
  strcpy(v175[0], "max_lateral_connection_lookback_distance");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1464));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93D0;
  strcpy(v175[0], "midstep_preferred_lanes_max_ratio_freeway");
  unint64_t v88 = sub_58070(v176, (uint64_t)v175);
  uint64_t v89 = (void *)(a1 + 1472);
  if (v88)
  {
    uint64_t v89 = v88 + 5;
    if (*((_DWORD *)v88 + 12) != 1) {
      uint64_t v89 = (void *)(a1 + 1472);
    }
  }
  *(void *)(a1 + 1472) = *v89;
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A20;
  strcpy(v175[0], "midstep_preferred_lanes_lookahead_distance_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1480));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A60;
  strcpy(v175[0], "enable_midstep_preferred_lanes_lookahead_freeway");
  uint64_t v90 = sub_58070(v176, (uint64_t)v175);
  if (v90 && (int v91 = *((_DWORD *)v90 + 12), (v91 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1488) = v91 == 4;
    if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
      goto LABEL_787;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1488) = *(unsigned char *)(a1 + 1488) != 0;
    if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
      goto LABEL_787;
    }
  }
  operator delete(v175[0]);
LABEL_787:
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93A0;
  strcpy(v175[0], "midstep_at_start_distance_tolerance");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(v160 + 1232));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  HIBYTE(v175[2]) = 20;
  strcpy((char *)v175, "min_lane_event_width");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1504));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x40uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A90;
  strcpy(v175[0], "max_lookahead_distance_exterior_turn_channels_lane_guidance");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(v160 + 1312));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x40uLL);
  *(_OWORD *)&v175[1] = xmmword_20B99C0;
  strcpy(v175[0], "max_lookahead_distance_exterior_turn_channels_traffic_lights");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1584));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x40uLL);
  *(_OWORD *)&v175[1] = xmmword_20B98C0;
  strcpy(v175[0], "max_lookahead_distance_exterior_turn_channels_stop_signs");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(v160 + 1328));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B99E0;
  strcpy(v175[0], "lane_connection_max_lookback_distance_before_maneuver");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1600));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A40;
  strcpy(v175[0], "lane_connection_max_num_lookahead_segments");
  uint64_t v92 = sub_58070(v176, (uint64_t)v175);
  if (v92 && *((_DWORD *)v92 + 12) == 1)
  {
    *(unsigned char *)(a1 + 1608) = (int)*((double *)v92 + 5);
    if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
      goto LABEL_805;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1608) = *(unsigned char *)(a1 + 1608);
    if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
      goto LABEL_805;
    }
  }
  operator delete(v175[0]);
LABEL_805:
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93A0;
  strcpy(v175[0], "fixed_buffer_time_for_time_based_lg");
  sub_5D498(v176, (uint64_t)v175, (_DWORD *)(a1 + 1612));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20E12D0;
  strcpy(v175[0], "travel_time_fraction_for_time_based_lg");
  uint64_t v93 = sub_58070(v176, (uint64_t)v175);
  uint64_t v94 = (void *)(a1 + 1616);
  if (v93)
  {
    uint64_t v94 = v93 + 5;
    if (*((_DWORD *)v93 + 12) != 1) {
      uint64_t v94 = (void *)(a1 + 1616);
    }
  }
  *(void *)(a1 + 1616) = *v94;
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x19uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9250;
  strcpy(v175[0], "enable_kh_time_based_lg");
  uint64_t v95 = sub_58070(v176, (uint64_t)v175);
  if (v95 && (int v96 = *((_DWORD *)v95 + 12), (v96 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1624) = v96 == 4;
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_817;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1624) = *(unsigned char *)(a1 + 1624) != 0;
    if (SHIBYTE(v175[2]) < 0) {
LABEL_817:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x19uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9250;
  strcpy(v175[0], "enable_tt_time_based_lg");
  uint64_t v97 = sub_58070(v176, (uint64_t)v175);
  if (v97 && (int v98 = *((_DWORD *)v97 + 12), (v98 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1625) = v98 == 4;
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_823;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1625) = *(unsigned char *)(a1 + 1625) != 0;
    if (SHIBYTE(v175[2]) < 0) {
LABEL_823:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9960;
  strcpy(v175[0], "enable_pure_natural_guidance_everywhere");
  uint64_t v99 = sub_58070(v176, (uint64_t)v175);
  if (v99 && (int v100 = *((_DWORD *)v99 + 12), (v100 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1872) = v100 == 4;
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_829;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1872) = *(unsigned char *)(a1 + 1872) != 0;
    if (SHIBYTE(v175[2]) < 0) {
LABEL_829:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9390;
  strcpy(v175[0], "enable_pure_natural_guidance_fwy");
  uint64_t v101 = sub_58070(v176, (uint64_t)v175);
  if (v101 && (int v102 = *((_DWORD *)v101 + 12), (v102 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1873) = v102 == 4;
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_835;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1873) = *(unsigned char *)(a1 + 1873) != 0;
    if (SHIBYTE(v175[2]) < 0) {
LABEL_835:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93E0;
  strcpy(v175[0], "enable_pure_natural_guidance_major_arterial");
  uint64_t v103 = sub_58070(v176, (uint64_t)v175);
  if (v103 && (int v104 = *((_DWORD *)v103 + 12), (v104 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1874) = v104 == 4;
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_841;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1874) = *(unsigned char *)(a1 + 1874) != 0;
    if (SHIBYTE(v175[2]) < 0) {
LABEL_841:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93E0;
  strcpy(v175[0], "enable_pure_natural_guidance_minor_arterial");
  uint64_t v105 = sub_58070(v176, (uint64_t)v175);
  if (v105 && (int v106 = *((_DWORD *)v105 + 12), (v106 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1875) = v106 == 4;
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_847;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1875) = *(unsigned char *)(a1 + 1875) != 0;
    if (SHIBYTE(v175[2]) < 0) {
LABEL_847:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9280;
  strcpy(v175[0], "enable_pure_natural_guidance_local");
  int v107 = sub_58070(v176, (uint64_t)v175);
  if (v107 && (int v108 = *((_DWORD *)v107 + 12), (v108 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1876) = v108 == 4;
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_853;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1876) = *(unsigned char *)(a1 + 1876) != 0;
    if (SHIBYTE(v175[2]) < 0) {
LABEL_853:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93E0;
  strcpy(v175[0], "enable_enhanced_spoken_chained_instructions");
  int v109 = sub_58070(v176, (uint64_t)v175);
  if (v109 && (int v110 = *((_DWORD *)v109 + 12), (v110 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1877) = v110 == 4;
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_859;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1877) = *(unsigned char *)(a1 + 1877) != 0;
    if (SHIBYTE(v175[2]) < 0) {
LABEL_859:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A80;
  strcpy(v175[0], "enable_take_first_maneuver_spoken_instructions");
  unint64_t v111 = sub_58070(v176, (uint64_t)v175);
  if (v111 && (int v112 = *((_DWORD *)v111 + 12), (v112 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1878) = v112 == 4;
    if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
      goto LABEL_866;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1878) = *(unsigned char *)(a1 + 1878) != 0;
    if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
      goto LABEL_866;
    }
  }
  operator delete(v175[0]);
LABEL_866:
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B99F0;
  strcpy(v175[0], "min_distance_between_similar_maneuver_turns_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1424));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x40uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A30;
  strcpy(v175[0], "min_distance_between_similar_maneuver_turns_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1432));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x40uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A30;
  strcpy(v175[0], "min_distance_between_similar_maneuver_turns_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1440));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A10;
  strcpy(v175[0], "min_distance_between_similar_maneuver_turns_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1448));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9280;
  strcpy(v175[0], "max_traffic_signal_lookup_distance");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(v160 + 1616));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x40uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9810;
  strcpy(v175[0], "max_distance_to_associate_traffic_signal_to_same_intersection");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1888));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B91A0;
  strcpy(v175[0], "enable_stay_on_instructions");
  *(unsigned char *)(a1 + 1896) = sub_29D62C(v176, (uint64_t)v175);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9380;
  strcpy(v175[0], "drop_spoken_road_name_when_staying_on_same_road");
  *(unsigned char *)(a1 + 1897) = sub_29D62C(v176, (uint64_t)v175);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9260;
  strcpy(v175[0], "min_implied_connection_turn_angle");
  long long v113 = sub_58070(v176, (uint64_t)v175);
  unsigned __int8 v114 = v159;
  if (v113)
  {
    unsigned __int8 v114 = v113 + 5;
    if (*((_DWORD *)v113 + 12) != 1) {
      unsigned __int8 v114 = v159;
    }
  }
  *unint64_t v159 = *v114;
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93B0;
  strcpy(v175[0], "dodgeball_incident_fastest_route_fudge_factor");
  long long v115 = sub_58070(v176, (uint64_t)v175);
  unsigned __int8 v116 = (void *)(a1 + 1864);
  if (v115)
  {
    unsigned __int8 v116 = v115 + 5;
    if (*((_DWORD *)v115 + 12) != 1) {
      unsigned __int8 v116 = (void *)(a1 + 1864);
    }
  }
  *(void *)(a1 + 1864) = *v116;
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9260;
  strcpy(v175[0], "enable_slight_sharp_turns_walking");
  long long v117 = sub_58070(v176, (uint64_t)v175);
  if (v117 && (int v118 = *((_DWORD *)v117 + 12), (v118 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1898) = v118 == 4;
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_897;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1898) = *(unsigned char *)(a1 + 1898) != 0;
    if (SHIBYTE(v175[2]) < 0) {
LABEL_897:
    }
      operator delete(v175[0]);
  }
  strcpy((char *)v175, "enable_stairs_guidance");
  HIBYTE(v175[2]) = 22;
  size_t v119 = sub_58070(v176, (uint64_t)v175);
  if (v119 && (int v120 = *((_DWORD *)v119 + 12), (v120 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1928) = v120 == 4;
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_903;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1928) = *(unsigned char *)(a1 + 1928) != 0;
    if (SHIBYTE(v175[2]) < 0) {
LABEL_903:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9280;
  strcpy(v175[0], "enable_pre_arrival_ending_guidance");
  unint64_t v121 = sub_58070(v176, (uint64_t)v175);
  if (v121 && (int v122 = *((_DWORD *)v121 + 12), (v122 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1929) = v122 == 4;
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_909;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1929) = *(unsigned char *)(a1 + 1929) != 0;
    if (SHIBYTE(v175[2]) < 0) {
LABEL_909:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8FD0;
  strcpy(v175[0], "walking_enable_crossing_instructions");
  uint64_t v123 = sub_58070(v176, (uint64_t)v175);
  if (v123 && (int v124 = *((_DWORD *)v123 + 12), (v124 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1930) = v124 == 4;
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_915;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1930) = *(unsigned char *)(a1 + 1930) != 0;
    if (SHIBYTE(v175[2]) < 0) {
LABEL_915:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8870;
  strcpy(v175[0], "walking_enable_route_tags");
  uint64_t v125 = sub_58070(v176, (uint64_t)v175);
  if (v125 && (int v126 = *((_DWORD *)v125 + 12), (v126 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1931) = v126 == 4;
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_921;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1931) = *(unsigned char *)(a1 + 1931) != 0;
    if (SHIBYTE(v175[2]) < 0) {
LABEL_921:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93C0;
  strcpy(v175[0], "support_additional_shorter_sign_variants");
  int v127 = sub_58070(v176, (uint64_t)v175);
  if (v127 && (int v128 = *((_DWORD *)v127 + 12), (v128 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1932) = v128 == 4;
    if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
      goto LABEL_928;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1932) = *(unsigned char *)(a1 + 1932) != 0;
    if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
      goto LABEL_928;
    }
  }
  operator delete(v175[0]);
LABEL_928:
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9390;
  strcpy(v175[0], "min_initial_distance_gap_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1936));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9960;
  strcpy(v175[0], "min_initial_distance_gap_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1944));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9960;
  strcpy(v175[0], "min_initial_distance_gap_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1952));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9800;
  strcpy(v175[0], "min_initial_distance_gap_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1960));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9240;
  strcpy(v175[0], "simplify_straight_ahead_step_guidance");
  int v129 = sub_58070(v176, (uint64_t)v175);
  if (v129 && (int v130 = *((_DWORD *)v129 + 12), (v130 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1968) = v130 == 4;
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_941;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1968) = *(unsigned char *)(a1 + 1968) != 0;
    if (SHIBYTE(v175[2]) < 0) {
LABEL_941:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9280;
  strcpy(v175[0], "enable_lateral_connection_lookback");
  unint64_t v131 = sub_58070(v176, (uint64_t)v175);
  if (v131 && (int v132 = *((_DWORD *)v131 + 12), (v132 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1899) = v132 == 4;
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_947;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1899) = *(unsigned char *)(a1 + 1899) != 0;
    if (SHIBYTE(v175[2]) < 0) {
LABEL_947:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8E90;
  strcpy(v175[0], "enable_traffic_cameras_on_route");
  uint64_t v133 = sub_58070(v176, (uint64_t)v175);
  if (v133 && (int v134 = *((_DWORD *)v133 + 12), (v134 & 0xFFFFFFFE) == 4))
  {
    *size_t v158 = v134 == 4;
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_953;
    }
  }
  else
  {
    *size_t v158 = *v158;
    if (SHIBYTE(v175[2]) < 0) {
LABEL_953:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93D0;
  strcpy(v175[0], "enable_traffic_signal_spoken_instructions");
  long long v135 = sub_58070(v176, (uint64_t)v175);
  if (v135 && (int v136 = *((_DWORD *)v135 + 12), (v136 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1970) = v136 == 4;
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_959;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1970) = *(unsigned char *)(a1 + 1970) != 0;
    if (SHIBYTE(v175[2]) < 0) {
LABEL_959:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20E12D0;
  strcpy(v175[0], "enable_go_past_traffic_signal_guidance");
  std::string::size_type v137 = sub_58070(v176, (uint64_t)v175);
  if (v137 && (int v138 = *((_DWORD *)v137 + 12), (v138 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1971) = v138 == 4;
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_965;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1971) = *(unsigned char *)(a1 + 1971) != 0;
    if (SHIBYTE(v175[2]) < 0) {
LABEL_965:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93C0;
  strcpy(v175[0], "drop_spoken_initial_if_step_is_too_short");
  long long v139 = sub_58070(v176, (uint64_t)v175);
  if (v139 && (int v140 = *((_DWORD *)v139 + 12), (v140 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 2018) = v140 == 4;
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_971;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 2018) = *(unsigned char *)(a1 + 2018) != 0;
    if (SHIBYTE(v175[2]) < 0) {
LABEL_971:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8FD0;
  strcpy(v175[0], "enable_verbose_ev_route_info_logging");
  size_t v141 = sub_58070(v176, (uint64_t)v175);
  if (v141 && (int v142 = *((_DWORD *)v141 + 12), (v142 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 2020) = v142 == 4;
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_977;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 2020) = *(unsigned char *)(a1 + 2020) != 0;
    if (SHIBYTE(v175[2]) < 0) {
LABEL_977:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8890;
  strcpy(v175[0], "use_at_least_ev_verbiage_sign");
  size_t v143 = sub_58070(v176, (uint64_t)v175);
  if (v143 && (int v144 = *((_DWORD *)v143 + 12), (v144 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 2021) = v144 == 4;
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_983;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 2021) = *(unsigned char *)(a1 + 2021) != 0;
    if (SHIBYTE(v175[2]) < 0) {
LABEL_983:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8E90;
  strcpy(v175[0], "use_at_least_ev_verbiage_spoken");
  v145 = sub_58070(v176, (uint64_t)v175);
  if (v145 && (int v146 = *((_DWORD *)v145 + 12), (v146 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 2022) = v146 == 4;
    if (SHIBYTE(v175[2]) < 0) {
      goto LABEL_989;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 2022) = *(unsigned char *)(a1 + 2022) != 0;
    if (SHIBYTE(v175[2]) < 0) {
LABEL_989:
    }
      operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B91A0;
  strcpy(v175[0], "show_future_trip_clock_icon");
  v147 = sub_58070(v176, (uint64_t)v175);
  if (v147 && (int v148 = *((_DWORD *)v147 + 12), (v148 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 2024) = v148 == 4;
    if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
      goto LABEL_996;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 2024) = *(unsigned char *)(a1 + 2024) != 0;
    if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
      goto LABEL_996;
    }
  }
  operator delete(v175[0]);
LABEL_996:
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20E1380;
  strcpy(v175[0], "max_second_roundabout_start_distance_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1760));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B99F0;
  strcpy(v175[0], "max_second_roundabout_start_distance_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1768));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B99F0;
  strcpy(v175[0], "max_second_roundabout_start_distance_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1776));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A40;
  strcpy(v175[0], "max_second_roundabout_start_distance_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1784));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93B0;
  strcpy(v175[0], "roundabout_close_to_maneuver_distance_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1792));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9AC0;
  strcpy(v175[0], "roundabout_close_to_maneuver_distance_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1800));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9AC0;
  strcpy(v175[0], "roundabout_close_to_maneuver_distance_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1808));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93E0;
  strcpy(v175[0], "roundabout_close_to_maneuver_distance_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1816));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A20;
  strcpy(v175[0], "spoken_go_past_roundabout_advance_distance_freeway");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1824));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x40uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A70;
  strcpy(v175[0], "spoken_go_past_roundabout_advance_distance_major_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1832));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x40uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A70;
  strcpy(v175[0], "spoken_go_past_roundabout_advance_distance_minor_arterial");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1840));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A60;
  strcpy(v175[0], "spoken_go_past_roundabout_advance_distance_local");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1848));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8890;
  strcpy(v175[0], "use_feature_type_for_guidance");
  *(unsigned char *)(a1 + 1972) = sub_29D62C(v176, (uint64_t)v175);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9260;
  strcpy(v175[0], "use_ascent_direction_for_guidance");
  *(unsigned char *)(a1 + 1973) = sub_29D62C(v176, (uint64_t)v175);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9960;
  strcpy(v175[0], "use_buddies_for_traffic_control_devices");
  *(unsigned char *)(a1 + 1974) = sub_29D62C(v176, (uint64_t)v175);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8FD0;
  strcpy(v175[0], "show_stop_signs_in_reverse_direction");
  *(unsigned char *)(a1 + 1975) = sub_29D62C(v176, (uint64_t)v175);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93C0;
  strcpy(v175[0], "show_traffic_lights_in_reverse_direction");
  *(unsigned char *)(a1 + 1976) = sub_29D62C(v176, (uint64_t)v175);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9260;
  strcpy(v175[0], "show_cameras_in_reverse_direction");
  *(unsigned char *)(a1 + 1977) = sub_29D62C(v176, (uint64_t)v175);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x40uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9810;
  strcpy(v175[0], "max_lookahead_distance_from_buddy_for_traffic_control_devices");
  sub_5C8A4(v176, (uint64_t)v175, (uint64_t *)(a1 + 1984));
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  HIBYTE(v175[2]) = 9;
  strcpy((char *)v175, "speed_kph");
  *(double *)(a1 + 2008) = sub_5D138(v176, v175);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9240;
  strcpy(v175[0], "enable_repeated_continue_instructions");
  *(unsigned char *)(a1 + 1992) = sub_29D62C(v176, (uint64_t)v175);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9800;
  strcpy(v175[0], "traffic_signal_search_distance");
  double v149 = sub_5C7E8(v176, (uint64_t)v175) * 100.0;
  if (v149 >= 0.0)
  {
    double v150 = v149;
    if (v149 >= 4.50359963e15) {
      goto LABEL_1046;
    }
    uint64_t v151 = (uint64_t)(v149 + v149) + 1;
  }
  else
  {
    double v150 = v149;
    if (v149 <= -4.50359963e15) {
      goto LABEL_1046;
    }
    uint64_t v151 = (uint64_t)(v149 + v149);
    if (v151 >= 1) {
      --v151;
    }
  }
  double v150 = (double)(v151 >> 1);
LABEL_1046:
  if (v150 < 9.22337204e18)
  {
    if (v149 >= 0.0)
    {
      if (v149 >= 4.50359963e15) {
        goto LABEL_1057;
      }
      uint64_t v152 = (uint64_t)(v149 + v149) + 1;
    }
    else
    {
      if (v149 <= -4.50359963e15) {
        goto LABEL_1057;
      }
      uint64_t v152 = (uint64_t)(v149 + v149);
      if (v152 >= 1) {
        --v152;
      }
    }
    double v149 = (double)(v152 >> 1);
LABEL_1057:
    *(void *)(a1 + 2000) = (uint64_t)v149;
    if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
      goto LABEL_1059;
    }
    goto LABEL_1058;
  }
  *(void *)(a1 + 2000) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(v175[2]) & 0x80000000) == 0) {
    goto LABEL_1059;
  }
LABEL_1058:
  operator delete(v175[0]);
LABEL_1059:
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9A40;
  strcpy(v175[0], "enable_list_instruction_for_start_maneuver");
  *(unsigned char *)(a1 + 2016) = sub_29D62C(v176, (uint64_t)v175);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8E90;
  strcpy(v175[0], "enable_initial_walk_instruction");
  *(unsigned char *)(a1 + 2017) = sub_29D62C(v176, (uint64_t)v175);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8FD0;
  strcpy(v175[0], "always_issue_secondary_sign_guidance");
  *(unsigned char *)(a1 + 2019) = sub_29D62C(v176, (uint64_t)v175);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  HIBYTE(v175[2]) = 18;
  strcpy((char *)v175, "enable_ar_guidance");
  *(unsigned char *)(a1 + 2023) = sub_29D62C(v176, (uint64_t)v175);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9960;
  strcpy(v175[0], "activate_springfield_preflight_polygons");
  *(unsigned char *)(a1 + 2025) = sub_29D62C(v176, (uint64_t)v175);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20E1380;
  strcpy(v175[0], "disable_merge_stage_for_highway_intersection");
  *(unsigned char *)(a1 + 2026) = sub_29D62C(v176, (uint64_t)v175);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B8890;
  strcpy(v175[0], "enable_spr_walking_route_line");
  *(unsigned char *)(a1 + 2027) = sub_29D62C(v176, (uint64_t)v175);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93A0;
  strcpy(v175[0], "enable_lane_guidance_for_roundabout");
  *(unsigned char *)(a1 + 2028) = sub_29D62C(v176, (uint64_t)v175);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v175[1] = xmmword_20B5EB0;
  strcpy(v175[0], "enable_traffic_description");
  *(unsigned char *)(a1 + 2029) = sub_29D62C(v176, (uint64_t)v175);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B93D0;
  strcpy(v175[0], "enable_find_silent_roundabouts_along_step");
  *(unsigned char *)(a1 + 2030) = sub_29D62C(v176, (uint64_t)v175);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9380;
  strcpy(v175[0], "enable_turn_around_proceed_to_route_instruction");
  *(unsigned char *)(a1 + 2031) = sub_29D62C(v176, (uint64_t)v175);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20E12D0;
  strcpy(v175[0], "suppress_spoken_address_at_destination");
  *(unsigned char *)(a1 + 2032) = sub_29D62C(v176, (uint64_t)v175);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  v175[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v175[1] = xmmword_20B9960;
  strcpy(v175[0], "enable_simplified_cycling_feature_types");
  *(unsigned char *)(a1 + 2033) = sub_29D62C(v176, (uint64_t)v175);
  if (SHIBYTE(v175[2]) < 0) {
    operator delete(v175[0]);
  }
  std::string v153 = v177;
  if (v177)
  {
    do
    {
      long long v156 = *(char **)v153;
      sub_57AC8((uint64_t *)v153 + 5);
      if (v153[39] < 0) {
        operator delete(*((void **)v153 + 2));
      }
      operator delete(v153);
      std::string v153 = v156;
    }
    while (v156);
  }
  std::string::size_type v154 = (void *)v176[0];
  v176[0] = 0;
  if (v154) {
    operator delete(v154);
  }
  return a1;
}

void sub_629B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  if (*(char *)(v11 - 169) < 0) {
    operator delete(*(void **)(v11 - 192));
  }
  if (*(char *)(v10 + 1927) < 0)
  {
    operator delete(*a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_62B904(void *a1, uint64_t a2)
{
  uint64_t v2 = sub_58070(a1, a2);
  if (!v2 || *((_DWORD *)v2 + 12) != 1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    size_t v5 = (void *)sub_2F404((uint64_t)exception, &v6);
  }
  return *((double *)v2 + 5);
}

void sub_62B994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_62B9C8(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[44];
      break;
    case 1:
      uint64_t result = a1[45];
      break;
    case 2:
      uint64_t result = a1[46];
      break;
    default:
      uint64_t result = a1[47];
      break;
  }
  return result;
}

uint64_t sub_62BA34(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[48];
      break;
    case 1:
      uint64_t result = a1[49];
      break;
    case 2:
      uint64_t result = a1[50];
      break;
    default:
      uint64_t result = a1[51];
      break;
  }
  return result;
}

uint64_t sub_62BAA0(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[62];
      break;
    case 1:
      uint64_t result = a1[63];
      break;
    case 2:
      uint64_t result = a1[64];
      break;
    default:
      uint64_t result = a1[65];
      break;
  }
  return result;
}

uint64_t sub_62BB0C(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[66];
      break;
    case 1:
      uint64_t result = a1[67];
      break;
    case 2:
      uint64_t result = a1[68];
      break;
    default:
      uint64_t result = a1[69];
      break;
  }
  return result;
}

uint64_t sub_62BB78(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[70];
      break;
    case 1:
      uint64_t result = a1[71];
      break;
    case 2:
      uint64_t result = a1[72];
      break;
    default:
      uint64_t result = a1[73];
      break;
  }
  return result;
}

uint64_t sub_62BBE4(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[74];
      break;
    case 1:
      uint64_t result = a1[75];
      break;
    case 2:
      uint64_t result = a1[76];
      break;
    default:
      uint64_t result = a1[77];
      break;
  }
  return result;
}

uint64_t sub_62BC50(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[58];
      break;
    case 1:
      uint64_t result = a1[59];
      break;
    case 2:
      uint64_t result = a1[60];
      break;
    default:
      uint64_t result = a1[61];
      break;
  }
  return result;
}

uint64_t sub_62BCBC(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[82];
      break;
    case 1:
      uint64_t result = a1[83];
      break;
    case 2:
      uint64_t result = a1[84];
      break;
    default:
      uint64_t result = a1[85];
      break;
  }
  return result;
}

uint64_t sub_62BD28(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[78];
      break;
    case 1:
      uint64_t result = a1[79];
      break;
    case 2:
      uint64_t result = a1[80];
      break;
    default:
      uint64_t result = a1[81];
      break;
  }
  return result;
}

uint64_t sub_62BD94(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[27];
      break;
    case 1:
      uint64_t result = a1[28];
      break;
    case 2:
      uint64_t result = a1[29];
      break;
    default:
      uint64_t result = a1[30];
      break;
  }
  return result;
}

uint64_t sub_62BE00(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[36];
      break;
    case 1:
      uint64_t result = a1[37];
      break;
    case 2:
      uint64_t result = a1[38];
      break;
    default:
      uint64_t result = a1[39];
      break;
  }
  return result;
}

uint64_t sub_62BE6C(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[90];
      break;
    case 1:
      uint64_t result = a1[91];
      break;
    case 2:
      uint64_t result = a1[92];
      break;
    default:
      uint64_t result = a1[93];
      break;
  }
  return result;
}

uint64_t sub_62BED8(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[164];
      break;
    case 1:
      uint64_t result = a1[165];
      break;
    case 2:
      uint64_t result = a1[166];
      break;
    default:
      uint64_t result = a1[167];
      break;
  }
  return result;
}

uint64_t sub_62BF44(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[168];
      break;
    case 1:
      uint64_t result = a1[169];
      break;
    case 2:
      uint64_t result = a1[170];
      break;
    default:
      uint64_t result = a1[171];
      break;
  }
  return result;
}

uint64_t sub_62BFB0(unsigned int *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[38];
      break;
    case 1:
      uint64_t result = a1[39];
      break;
    case 2:
      uint64_t result = a1[40];
      break;
    default:
      uint64_t result = a1[41];
      break;
  }
  return result;
}

uint64_t sub_62C01C(unsigned int *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[42];
      break;
    case 1:
      uint64_t result = a1[43];
      break;
    case 2:
      uint64_t result = a1[44];
      break;
    default:
      uint64_t result = a1[45];
      break;
  }
  return result;
}

uint64_t sub_62C088(unsigned int *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[46];
      break;
    case 1:
      uint64_t result = a1[47];
      break;
    case 2:
      uint64_t result = a1[48];
      break;
    default:
      uint64_t result = a1[49];
      break;
  }
  return result;
}

uint64_t sub_62C0F4(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[86];
      break;
    case 1:
      uint64_t result = a1[87];
      break;
    case 2:
      uint64_t result = a1[88];
      break;
    default:
      uint64_t result = a1[89];
      break;
  }
  return result;
}

uint64_t sub_62C160(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[94];
      break;
    case 1:
      uint64_t result = a1[95];
      break;
    case 2:
      uint64_t result = a1[96];
      break;
    default:
      uint64_t result = a1[97];
      break;
  }
  return result;
}

uint64_t sub_62C1CC(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[204];
      break;
    case 1:
      uint64_t result = a1[205];
      break;
    case 2:
      uint64_t result = a1[206];
      break;
    default:
      uint64_t result = a1[207];
      break;
  }
  return result;
}

uint64_t sub_62C238(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[208];
      break;
    case 1:
      uint64_t result = a1[209];
      break;
    case 2:
      uint64_t result = a1[210];
      break;
    default:
      uint64_t result = a1[211];
      break;
  }
  return result;
}

uint64_t sub_62C2A4(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[216];
      break;
    case 1:
      uint64_t result = a1[217];
      break;
    case 2:
      uint64_t result = a1[218];
      break;
    default:
      uint64_t result = a1[219];
      break;
  }
  return result;
}

uint64_t sub_62C310(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[99];
      break;
    case 1:
      uint64_t result = a1[100];
      break;
    case 2:
      uint64_t result = a1[101];
      break;
    default:
      uint64_t result = a1[102];
      break;
  }
  return result;
}

uint64_t sub_62C37C(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[103];
      break;
    case 1:
      uint64_t result = a1[104];
      break;
    case 2:
      uint64_t result = a1[105];
      break;
    default:
      uint64_t result = a1[106];
      break;
  }
  return result;
}

uint64_t sub_62C3E8(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = a1 + 1400;
  uint64_t v3 = a1 + 1408;
  if (a2 != 2) {
    uint64_t v3 = a1 + 1416;
  }
  if (a2 >= 2) {
    uint64_t v2 = v3;
  }
  return *(void *)v2;
}

uint64_t sub_62C410(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[111];
      break;
    case 1:
      uint64_t result = a1[112];
      break;
    case 2:
      uint64_t result = a1[113];
      break;
    default:
      uint64_t result = a1[114];
      break;
  }
  return result;
}

uint64_t sub_62C47C(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[115];
      break;
    case 1:
      uint64_t result = a1[116];
      break;
    case 2:
      uint64_t result = a1[117];
      break;
    default:
      uint64_t result = a1[118];
      break;
  }
  return result;
}

uint64_t sub_62C4E8(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[119];
      break;
    case 1:
      uint64_t result = a1[120];
      break;
    case 2:
      uint64_t result = a1[121];
      break;
    default:
      uint64_t result = a1[122];
      break;
  }
  return result;
}

uint64_t sub_62C554(void *a1, int a2, int a3)
{
  if (a3)
  {
    switch(a2)
    {
      case 0:
        uint64_t result = a1[127];
        break;
      case 1:
        uint64_t result = a1[128];
        break;
      case 2:
        uint64_t result = a1[129];
        break;
      default:
        uint64_t result = a1[130];
        break;
    }
  }
  else
  {
    switch(a2)
    {
      case 0:
        uint64_t result = a1[123];
        break;
      case 1:
        uint64_t result = a1[124];
        break;
      case 2:
        uint64_t result = a1[125];
        break;
      default:
        uint64_t result = a1[126];
        break;
    }
  }
  return result;
}

uint64_t sub_62C62C(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[131];
      break;
    case 1:
      uint64_t result = a1[132];
      break;
    case 2:
      uint64_t result = a1[133];
      break;
    default:
      uint64_t result = a1[134];
      break;
  }
  return result;
}

uint64_t sub_62C698(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[135];
      break;
    case 1:
      uint64_t result = a1[136];
      break;
    case 2:
      uint64_t result = a1[137];
      break;
    default:
      uint64_t result = a1[138];
      break;
  }
  return result;
}

uint64_t sub_62C704(void *a1, int a2, int a3)
{
  if (a3)
  {
    switch(a2)
    {
      case 0:
        uint64_t result = a1[139];
        break;
      case 1:
        uint64_t result = a1[140];
        break;
      case 2:
        uint64_t result = a1[141];
        break;
      default:
        uint64_t result = a1[142];
        break;
    }
  }
  else
  {
    switch(a2)
    {
      case 0:
        uint64_t result = a1[143];
        break;
      case 1:
        uint64_t result = a1[144];
        break;
      case 2:
        uint64_t result = a1[145];
        break;
      default:
        uint64_t result = a1[146];
        break;
    }
  }
  return result;
}

uint64_t sub_62C7DC(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[147];
      break;
    case 1:
      uint64_t result = a1[149];
      break;
    case 2:
      uint64_t result = a1[151];
      break;
    default:
      uint64_t result = a1[153];
      break;
  }
  return result;
}

uint64_t sub_62C848(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[148];
      break;
    case 1:
      uint64_t result = a1[150];
      break;
    case 2:
      uint64_t result = a1[152];
      break;
    default:
      uint64_t result = a1[154];
      break;
  }
  return result;
}

uint64_t sub_62C8B4(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[160];
      break;
    case 1:
      uint64_t result = a1[161];
      break;
    case 2:
      uint64_t result = a1[162];
      break;
    default:
      uint64_t result = a1[163];
      break;
  }
  return result;
}

uint64_t sub_62C920(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[54];
      break;
    case 1:
      uint64_t result = a1[55];
      break;
    case 2:
      uint64_t result = a1[56];
      break;
    default:
      uint64_t result = a1[57];
      break;
  }
  return result;
}

uint64_t sub_62C98C(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[220];
      break;
    case 1:
      uint64_t result = a1[221];
      break;
    case 2:
      uint64_t result = a1[222];
      break;
    default:
      uint64_t result = a1[223];
      break;
  }
  return result;
}

uint64_t sub_62C9F8(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[224];
      break;
    case 1:
      uint64_t result = a1[225];
      break;
    case 2:
      uint64_t result = a1[226];
      break;
    default:
      uint64_t result = a1[227];
      break;
  }
  return result;
}

uint64_t sub_62CA64(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[228];
      break;
    case 1:
      uint64_t result = a1[229];
      break;
    case 2:
      uint64_t result = a1[230];
      break;
    default:
      uint64_t result = a1[231];
      break;
  }
  return result;
}

uint64_t sub_62CAD0(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[155];
      break;
    case 1:
      uint64_t result = a1[156];
      break;
    case 2:
      uint64_t result = a1[157];
      break;
    default:
      uint64_t result = a1[158];
      break;
  }
  return result;
}

uint64_t sub_62CB3C(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[242];
      break;
    case 1:
      uint64_t result = a1[243];
      break;
    case 2:
      uint64_t result = a1[244];
      break;
    default:
      uint64_t result = a1[245];
      break;
  }
  return result;
}

uint64_t sub_62CBA8(unsigned int *a1, int a2)
{
  switch(a2)
  {
    case 1:
      uint64_t result = a1[379];
      break;
    case 2:
      uint64_t result = a1[380];
      break;
    case 3:
      uint64_t result = a1[381];
      break;
    case 4:
      uint64_t result = a1[382];
      break;
    case 5:
      uint64_t result = a1[383];
      break;
    case 6:
      uint64_t result = a1[384];
      break;
    case 7:
      uint64_t result = a1[385];
      break;
    case 8:
      uint64_t result = a1[386];
      break;
    case 9:
      uint64_t result = a1[387];
      break;
    case 10:
      uint64_t result = a1[388];
      break;
    default:
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t sub_62CC54(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[6];
      break;
    case 1:
      uint64_t result = a1[7];
      break;
    case 2:
      uint64_t result = a1[8];
      break;
    default:
      uint64_t result = a1[9];
      break;
  }
  return result;
}

uint64_t sub_62CCC0(uint64_t a1)
{
  double v1 = (double)*(int *)(a1 + 204) / 10.0 * (*(double *)(a1 + 2008) / 3.6) * 100.0;
  if (v1 >= 0.0)
  {
    double v2 = (double)*(int *)(a1 + 204) / 10.0 * (*(double *)(a1 + 2008) / 3.6) * 100.0;
    if (v1 >= 4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v3 = (uint64_t)(v1 + v1) + 1;
  }
  else
  {
    double v2 = (double)*(int *)(a1 + 204) / 10.0 * (*(double *)(a1 + 2008) / 3.6) * 100.0;
    if (v1 <= -4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v3 = (uint64_t)(v1 + v1);
    if (v3 >= 1) {
      --v3;
    }
  }
  double v2 = (double)(v3 >> 1);
LABEL_9:
  if (v2 >= 9.22337204e18) {
    return 0x7FFFFFFFFFFFFFFELL;
  }
  if (v1 >= 0.0)
  {
    if (v1 < 4.50359963e15)
    {
      uint64_t v4 = (uint64_t)(v1 + v1) + 1;
      return (uint64_t)(double)(v4 >> 1);
    }
  }
  else if (v1 > -4.50359963e15)
  {
    uint64_t v4 = (uint64_t)(v1 + v1);
    if (v4 >= 1) {
      --v4;
    }
    return (uint64_t)(double)(v4 >> 1);
  }
  return (uint64_t)v1;
}

BOOL sub_62CDBC(unsigned char *a1, int a2)
{
  if (a1[1872]) {
    return 1;
  }
  switch(a2)
  {
    case 0:
      BOOL result = a1[1873] != 0;
      break;
    case 1:
      BOOL result = a1[1874] != 0;
      break;
    case 2:
      BOOL result = a1[1875] != 0;
      break;
    default:
      BOOL result = a1[1876] != 0;
      break;
  }
  return result;
}

uint64_t sub_62CE48(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[178];
      break;
    case 1:
      uint64_t result = a1[179];
      break;
    case 2:
      uint64_t result = a1[180];
      break;
    default:
      uint64_t result = a1[181];
      break;
  }
  return result;
}

void sub_62CEB4()
{
  unk_259054F = 16641;
  word_2590538 = 65;
  byte_2590567 = 1;
  byte_2590551 = 0;
  byte_259057F = 8;
  strcpy((char *)&qword_2590568, "any_mode");
  byte_2590597 = 7;
  strcpy((char *)&dword_2590580, "cycling");
  byte_25905AF = 7;
  strcpy((char *)&dword_2590598, "driving");
  byte_25905C7 = 7;
  strcpy((char *)&dword_25905B0, "walking");
}

uint64_t *sub_62CF60(uint64_t a1, uint64_t a2)
{
  return sub_24AFC(a1, a2, a2);
}

uint64_t *sub_62CF68(uint64_t a1, uint64_t a2)
{
  return sub_24AFC(a1 + 40, a2, a2);
}

uint64_t *sub_62CF74(uint64_t a1, uint64_t a2)
{
  return sub_24AFC(a1 + 80, a2, a2);
}

uint64_t *sub_62CF80(uint64_t a1, uint64_t a2)
{
  return sub_24AFC(a1 + 120, a2, a2);
}

uint64_t *sub_62CF8C(uint64_t a1, uint64_t a2)
{
  return sub_24AFC(a1 + 160, a2, a2);
}

uint64_t *sub_62CF98(uint64_t a1, unsigned int *a2)
{
  return sub_4BC598(a1 + 200, a2, (uint64_t)a2);
}

uint64_t sub_62CFA4(uint64_t result)
{
  return result;
}

uint64_t sub_62CFB4(uint64_t result)
{
  return result;
}

uint64_t sub_62CFC4(uint64_t result)
{
  *(unsigned char *)(result + 248) = 1;
  return result;
}

BOOL sub_62CFD0(uint64_t a1, unsigned __int8 *a2)
{
  if (*(unsigned char *)(a1 + 1516)) {
    return sub_13A8C((void *)(a1 + 712), (uint64_t)a2) != 0;
  }

  return sub_486214(a1, a2);
}

BOOL sub_62D014(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 1516)) {
    return sub_13A8C((void *)(a1 + 752), a2) != 0;
  }
  int v5 = byte_25933AF;
  if (byte_25933AF >= 0) {
    size_t v6 = byte_25933AF;
  }
  else {
    size_t v6 = *((void *)&xmmword_2593398 + 1);
  }
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    size_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = v8 + v6;
  if (v8 + v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v9 > 0x16)
  {
    uint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v11 = v9 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (void **)operator new(v11 + 1);
    size_t v18 = v8 + v6;
    unint64_t v19 = v12 | 0x8000000000000000;
    long long __dst = p_dst;
    if (!v6) {
      goto LABEL_20;
    }
    goto LABEL_16;
  }
  size_t v18 = 0;
  unint64_t v19 = 0;
  long long __dst = 0;
  p_dst = (void **)&__dst;
  HIBYTE(v19) = v8 + v6;
  if (v6)
  {
LABEL_16:
    if (v5 >= 0) {
      size_t v13 = &xmmword_2593398;
    }
    else {
      size_t v13 = (long long *)xmmword_2593398;
    }
    memmove(p_dst, v13, v6);
  }
LABEL_20:
  unint64_t v14 = (char *)p_dst + v6;
  if (v8)
  {
    if (v7 >= 0) {
      long long v15 = (const void *)a2;
    }
    else {
      long long v15 = *(const void **)a2;
    }
    memmove(v14, v15, v8);
  }
  v14[v8] = 0;
  BOOL v4 = sub_486214(a1, (unsigned __int8 *)&__dst);
  if (SHIBYTE(v19) < 0) {
    operator delete(__dst);
  }
  return v4;
}

void sub_62D184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_62D1A0(uint64_t a1, unsigned __int8 *a2)
{
  if (*(unsigned char *)(a1 + 1516)) {
    return sub_13A8C((void *)(a1 + 792), (uint64_t)a2) != 0;
  }

  return sub_486214(a1, a2);
}

BOOL sub_62D1E4(uint64_t a1, unsigned __int8 *a2)
{
  if (*(unsigned char *)(a1 + 1516)) {
    return sub_13A8C((void *)(a1 + 832), (uint64_t)a2) != 0;
  }

  return sub_486214(a1, a2);
}

BOOL sub_62D228(uint64_t a1, unsigned __int8 *a2)
{
  if (*(unsigned char *)(a1 + 1516)) {
    return sub_13A8C((void *)(a1 + 872), (uint64_t)a2) != 0;
  }

  return sub_486688(a1, a2);
}

BOOL sub_62D26C(uint64_t a1, unsigned int *a2, double a3)
{
  if (*(unsigned char *)(a1 + 1516)) {
    return sub_47290((void *)(a1 + 912), a2) != 0;
  }

  return sub_486418(a1, a2, a3);
}

uint64_t sub_62D2B0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1516))
  {
    unsigned int v2 = *(_DWORD *)(a1 + 952);
    return !v2 || *(_DWORD *)(a1 + 956) >= v2;
  }
  else if (sub_488EC0(a1))
  {
    return sub_488EC8(a1);
  }
  else
  {
    return 1;
  }
}

uint64_t sub_62D328(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1516))
  {
    unsigned int v2 = *(_DWORD *)(a1 + 952);
    return v2 && v2 > *(_DWORD *)(a1 + 956);
  }
  else
  {
    uint64_t result = sub_488EC0(a1);
    if (result) {
      return !sub_488EC8(a1);
    }
  }
  return result;
}

BOOL sub_62D398(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1516)) {
    return *(unsigned char *)(a1 + 960) == 0;
  }
  else {
    return !sub_488E94(a1);
  }
}

BOOL sub_62D3D4(unsigned char *a1)
{
  if (a1[1413]) {
    return 1;
  }
  if (a1[1176]) {
    return 0;
  }
  return a1[1412] != 0;
}

BOOL sub_62D404(uint64_t a1)
{
  return *(unsigned char *)(a1 + 1176) == 0;
}

uint64_t sub_62D414(uint64_t a1)
{
  return *(void *)(a1 + 1392);
}

BOOL sub_62D424(uint64_t a1)
{
  return !*(unsigned char *)(a1 + 1176) && *(unsigned char *)(a1 + 1411) != 0;
}

BOOL sub_62D444(uint64_t a1)
{
  return *(unsigned char *)(a1 + 1522) == 7;
}

double sub_62D454()
{
  byte_25905E7 = 1;
  word_25905D0 = 65;
  byte_25905FF = 1;
  word_25905E8 = 65;
  strcpy(&byte_2590617, "\n\x1B\\toi=orth\\"");
  strcpy((char *)&qword_2590600, "\x1B\\toi=lhp\\"");
  byte_259062F = 11;
  qword_2590630 = (uint64_t)operator new(0x19uLL);
  long long v280 = xmmword_20B9250;
  unk_2590638 = xmmword_20B9250;
  strcpy((char *)qword_2590630, "\x1B\\toi=x-sampa-internal\\"");
  byte_259065F = 13;
  strcpy((char *)&qword_2590648, "\x1B\\tn=address\\"");
  strcpy(&byte_2590677, "\t\x1B\\tn=normal\\"");
  strcpy((char *)&qword_2590660, "\x1B\\tn=nav\\"");
  byte_259068F = 12;
  byte_25906A7 = 7;
  strcpy((char *)&dword_2590690, "\x1B\\lang=");
  byte_25906BF = 1;
  word_25906A8 = 92;
  byte_25906D7 = 4;
  strcpy((char *)&qword_25906C0, "DEV:");
  byte_25906EF = 8;
  strcpy((char *)&qword_25906D8, "Continue");
  byte_2590707 = 11;
  strcpy((char *)&qword_25906F0, "Start_Route");
  byte_259071F = 14;
  strcpy((char *)&qword_2590708, "Continue_Route");
  byte_2590737 = 12;
  strcpy((char *)&qword_2590720, "Resume_Route");
  byte_259074F = 18;
  strcpy((char *)&xmmword_2590738, "Start_Route_U_Turn");
  byte_2590767 = 7;
  strcpy((char *)&dword_2590750, "_U_Turn");
  qword_2590778 = 0x1300000000000000;
  qmemcpy(&unk_2590780, "Continue_Route", 14);
  dword_2590770 = 1702131055;
  qword_2590768 = *(void *)"Resume_Route";
  *(int *)((char *)&dword_2590774 + 3) = 1852994900;
  dword_2590774 = 1415533919;
  qword_2590790 = 0x1500000000000000;
  strcpy(byte_2590798, "Left_Turn");
  unk_259078E = 1415533919;
  *(_DWORD *)((char *)&qword_2590790 + 1) = 1852994900;
  strcpy(&byte_25907AF, "\tRight_Turn");
  strcpy(&byte_25907C7, "\nLeft_Turn_At_End");
  byte_25907DF = 16;
  byte_25907F7 = 17;
  strcpy((char *)&xmmword_25907E0, "Right_Turn_At_End");
  byte_259080F = 15;
  strcpy((char *)&qword_25907F8, "Sharp_Left_Turn");
  byte_2590827 = 16;
  strcpy((char *)&xmmword_2590810, "Sharp_Right_Turn");
  byte_259083F = 16;
  strcpy((char *)&xmmword_2590828, "Slight_Left_Turn");
  byte_2590857 = 17;
  strcpy((char *)&xmmword_2590840, "Slight_Right_Turn");
  strcpy(&byte_259086F, "\tKeep_Right");
  strcpy((char *)&qword_2590858, "Keep_Left");
  strcpy(&byte_2590887, "\nU_Turn");
  byte_259089F = 6;
  byte_25908B7 = 14;
  strcpy((char *)&qword_25908A0, "Walking_U_Turn");
  byte_25908CF = 20;
  strcpy((char *)&xmmword_25908B8, "U_Turn_When_Possible");
  byte_25908E7 = 20;
  strcpy((char *)&xmmword_25908D0, "U_Turn_At_Roundabout");
  byte_25908FF = 11;
  strcpy((char *)&qword_25908E8, "Enter_Ferry");
  strcpy(&byte_2590917, "\nChange_Ferry");
  strcpy((char *)&qword_2590900, "Exit_Ferry");
  strcpy((char *)&xmmword_2590930, "Enter_Railway_Shuttle");
  strcpy((char *)&xmmword_2590948, "Exit_Railway_Shuttle");
  strcpy((char *)&xmmword_2590960, "Change_Railway_Shuttle");
  strcpy((char *)&xmmword_2590978, "End_Of_Navigation");
  strcpy((char *)&xmmword_2590990, "End_Of_Navigation");
  strcpy((char *)&qword_25909A8, "Destination");
  strcpy((char *)&xmmword_25909C0, "Destination_On_left");
  strcpy((char *)&xmmword_25909D8, "Destination_On_Right");
  strcpy((char *)&xmmword_2590A20, "First_Stop_On_Right");
  strcpy((char *)&xmmword_2590A68, "Next_Stop_On_Right");
  byte_259092F = 12;
  byte_2590947 = 21;
  byte_259095F = 20;
  strcpy((char *)&xmmword_2590A98, "Waypoint_Stop_On_Left");
  byte_2590977 = 22;
  byte_259098F = 17;
  byte_25909A7 = 17;
  byte_25909BF = 11;
  byte_25909D7 = 19;
  byte_25909EF = 20;
  strcpy(&byte_2590A07, "\nFirst_Stop_On_left");
  *(void *)&v268[0] = *(void *)"First_Stop";
  strcpy((char *)&qword_25909F0, "First_Stop");
  byte_2590A1F = 18;
  byte_2590A37 = 19;
  strcpy(&byte_2590A4F, "\tNext_Stop_On_left");
  strcpy((char *)&qword_2590A80, "Waypoint_Stop");
  strcpy((char *)&xmmword_2590AB0, "Waypoint_Stop_On_Right");
  strcpy((char *)&qword_2590AC8, "Roundabout_");
  *(void *)&v264[48] = *(void *)"Next_Stop";
  strcpy((char *)&qword_2590A38, "Next_Stop");
  byte_2590A67 = 17;
  byte_2590A7F = 18;
  byte_2590A97 = 13;
  byte_2590AAF = 21;
  byte_2590AC7 = 22;
  byte_2590ADF = 11;
  byte_2590AF7 = 16;
  strcpy((char *)&xmmword_2590AE0, "Enter_Roundabout");
  qword_2590AF8 = (uint64_t)operator new(0x20uLL);
  long long v279 = xmmword_20B91C0;
  xmmword_2590B00 = xmmword_20B91C0;
  strcpy((char *)qword_2590AF8, "Walking_Enter_Roundabout");
  byte_2590B27 = 16;
  strcpy((char *)&xmmword_2590B10, "Leave_Roundabout");
  byte_2590B3F = 21;
  strcpy((char *)&xmmword_2590B28, "Roundabout_First_Exit");
  byte_2590B57 = 22;
  strcpy((char *)&xmmword_2590B40, "Roundabout_Second_Exit");
  byte_2590B6F = 21;
  strcpy((char *)&xmmword_2590B58, "Roundabout_Third_Exit");
  strcpy((char *)&xmmword_2590B70, "Roundabout_Fourth_Exit");
  HIBYTE(word_2590B86) = 22;
  byte_2590B9F = 21;
  strcpy((char *)&xmmword_2590B88, "Roundabout_Fifth_Exit");
  byte_2590BB7 = 21;
  strcpy((char *)&xmmword_2590BA0, "Roundabout_Sixth_Exit");
  qword_2590BB8 = (uint64_t)operator new(0x19uLL);
  xmmword_2590BC0 = xmmword_20B9250;
  strcpy((char *)qword_2590BB8, "Roundabout_Seventh_Exit");
  strcpy((char *)&xmmword_2590BD0, "Roundabout_Eighth_Exit");
  HIBYTE(word_2590BE6) = 22;
  byte_2590BFF = 21;
  strcpy((char *)&xmmword_2590BE8, "Roundabout_Ninth_Exit");
  byte_2590C17 = 21;
  strcpy((char *)&xmmword_2590C00, "Roundabout_Tenth_Exit");
  qword_2590C18 = (uint64_t)operator new(0x20uLL);
  xmmword_2590C20 = xmmword_20B91C0;
  strcpy((char *)qword_2590C18, "Roundabout_Eleventh_Exit");
  qword_2590C30 = (uint64_t)operator new(0x19uLL);
  unk_2590C38 = xmmword_20B9250;
  strcpy((char *)qword_2590C30, "Roundabout_Twelfth_Exit");
  qword_2590C48 = (uint64_t)operator new(0x20uLL);
  long long v276 = xmmword_20B5EB0;
  xmmword_2590C50 = xmmword_20B5EB0;
  strcpy((char *)qword_2590C48, "Roundabout_Thirteenth_Exit");
  qword_2590C60 = (uint64_t)operator new(0x20uLL);
  unk_2590C68 = xmmword_20B5EB0;
  strcpy((char *)qword_2590C60, "Roundabout_Fourteenth_Exit");
  qword_2590C78 = (uint64_t)operator new(0x20uLL);
  long long v278 = xmmword_20B8870;
  xmmword_2590C80 = xmmword_20B8870;
  strcpy((char *)qword_2590C78, "Roundabout_Fifteenth_Exit");
  qword_2590C90 = (uint64_t)operator new(0x20uLL);
  unk_2590C98 = xmmword_20B8870;
  strcpy((char *)qword_2590C90, "Roundabout_Sixteenth_Exit");
  qword_2590CA8 = (uint64_t)operator new(0x20uLL);
  long long v273 = xmmword_20B91A0;
  xmmword_2590CB0 = xmmword_20B91A0;
  strcpy((char *)qword_2590CA8, "Roundabout_Seventeenth_Exit");
  qword_2590CC0 = (uint64_t)operator new(0x20uLL);
  unk_2590CC8 = xmmword_20B5EB0;
  strcpy((char *)qword_2590CC0, "Roundabout_Eighteenth_Exit");
  qword_2590CD8 = (uint64_t)operator new(0x20uLL);
  xmmword_2590CE0 = xmmword_20B5EB0;
  strcpy((char *)qword_2590CD8, "Roundabout_Nineteenth_Exit");
  byte_2590D07 = 8;
  strcpy((char *)&qword_2590CF0, "Off_Ramp");
  byte_2590D1F = 16;
  strcpy((char *)&xmmword_2590D08, "Off_Ramp_On_Left");
  byte_2590D37 = 17;
  strcpy((char *)&xmmword_2590D20, "Off_Ramp_On_Right");
  byte_2590D4F = 14;
  strcpy((char *)&qword_2590D38, "Change_Highway");
  strcpy((char *)&xmmword_2590D50, "Change_Highway_On_Left");
  HIBYTE(word_2590D66) = 22;
  qword_2590D68 = (uint64_t)operator new(0x19uLL);
  xmmword_2590D70 = xmmword_20B9250;
  strcpy((char *)qword_2590D68, "Change_Highway_On_Right");
  byte_2590D97 = 5;
  dword_2590D80 = 1735550285;
  byte_2590D84 = 101;
  byte_2590D85 = 0;
  byte_2590DAF = 12;
  strcpy((char *)&qword_2590D98, "Enter_Detour");
  byte_2590DC7 = 11;
  strcpy((char *)&qword_2590DB0, "Exit_Detour");
  byte_2590DDF = 18;
  strcpy((char *)&xmmword_2590DC8, "Walking_Turnaround");
  qword_2590DE0 = (uint64_t)operator new(0x19uLL);
  unk_2590DE8 = xmmword_20B9250;
  strcpy((char *)qword_2590DE0, "Walking_Turnaround_Sign");
  byte_2590E0F = 19;
  strcpy((char *)&xmmword_2590DF8, "Distance_Title_List");
  qword_2590E10 = (uint64_t)operator new(0x19uLL);
  unk_2590E18 = xmmword_20B9250;
  long long v270 = *(_OWORD *)"Cross_The_Street_Spoken";
  strcpy((char *)qword_2590E10, "Cross_The_Street_Spoken");
  *(void *)&v268[1] = *(void *)"t_Spoken";
  byte_2590E3F = 19;
  strcpy((char *)&xmmword_2590E28, "Arrival_Charge_List");
  byte_2590E57 = 15;
  strcpy((char *)&qword_2590E40, "Charge_At_Start");
  strcpy(&byte_2590E6F, "\tPass_Street");
  strcpy((char *)&qword_2590E58, "Pass_Exit");
  byte_2590E87 = 11;
  byte_2590E9F = 17;
  strcpy((char *)&xmmword_2590E88, "Pass_Intersection");
  strcpy(&byte_2590EB7, "\t_PrevExitNumber");
  strcpy((char *)&qword_2590EA0, "Next_Exit");
  byte_2590ECF = 15;
  strcpy(&byte_2590EE7, "\t_PrevUTurn");
  strcpy((char *)&qword_2590ED0, "_PrevRoad");
  strcpy(&byte_2590EFF, "\nNext_");
  byte_2590F17 = 5;
  byte_2590F2F = 15;
  strcpy((char *)&qword_2590F18, "_At_Next_Street");
  byte_2590F47 = 21;
  strcpy((char *)&xmmword_2590F30, "_At_Next_Intersection");
  byte_2590F5F = 14;
  strcpy((char *)&qword_2590F48, "Charge_Station");
  byte_2590F77 = 15;
  strcpy((char *)&qword_2590F60, "_Charge_Station");
  BYTE1(qword_2590F88) = 0;
  WORD1(qword_2590F88) = 25856;
  HIDWORD(qword_2590F88) = 335544320;
  strcpy((char *)&qword_2590F78, "_Charge_Station_");
  byte_2590FA7 = 8;
  strcpy((char *)&qword_2590F90, "_Minimum");
  byte_2590FBF = 15;
  strcpy((char *)&qword_2590FA8, "ExitShield_Sign");
  byte_2590FD7 = 8;
  strcpy((char *)&qword_2590FC0, "Walking_");
  byte_2590FEF = 16;
  strcpy((char *)&xmmword_2590FD8, "Walking_Continue");
  byte_2591007 = 19;
  strcpy((char *)&xmmword_2590FF0, "Walking_Start_Route");
  qword_2591008 = (uint64_t)operator new(0x20uLL);
  xmmword_2591010 = xmmword_20B5EB0;
  strcpy((char *)qword_2591008, "Walking_Start_Route_U_Turn");
  byte_2591037 = 17;
  strcpy((char *)&xmmword_2591020, "Walking_Left_Turn");
  byte_259104F = 18;
  strcpy((char *)&xmmword_2591038, "Walking_Right_Turn");
  qword_2591050 = (uint64_t)operator new(0x20uLL);
  unk_2591058 = xmmword_20B5EB0;
  strcpy((char *)qword_2591050, "Walking_Turn_At_Roundabout");
  qword_2591068 = (uint64_t)operator new(0x20uLL);
  long long v277 = xmmword_20B91B0;
  xmmword_2591070 = xmmword_20B91B0;
  strcpy((char *)qword_2591068, "Walking_U_Turn_When_Possible");
  qword_2591080 = (uint64_t)operator new(0x28uLL);
  long long v269 = xmmword_20B9390;
  unk_2591088 = xmmword_20B9390;
  strcpy((char *)qword_2591080, "Walking_Roundabout_Exit_Continue");
  qword_2591098 = (uint64_t)operator new(0x20uLL);
  xmmword_25910A0 = xmmword_20B91B0;
  strcpy((char *)qword_2591098, "Walking_Roundabout_Exit_Left");
  qword_25910B0 = (uint64_t)operator new(0x20uLL);
  long long v275 = xmmword_20B8890;
  unk_25910B8 = xmmword_20B8890;
  strcpy((char *)qword_25910B0, "Walking_Roundabout_Exit_Right");
  qword_25910C8 = (uint64_t)operator new(0x20uLL);
  xmmword_25910D0 = xmmword_20B8870;
  strcpy((char *)qword_25910C8, "Walking_End_Of_Navigation");
  long long v272 = *(_OWORD *)"nd_Of_Navigation";
  uint64_t v0 = (char *)operator new(0x20uLL);
  qword_25910E0 = (uint64_t)v0;
  unk_25910E8 = xmmword_20B8870;
  *(_OWORD *)uint64_t v0 = *(_OWORD *)"Walking_End_Of_Navigation";
  *(_OWORD *)(v0 + 9) = v272;
  v0[25] = 0;
  byte_259110F = 8;
  strcpy((char *)&qword_25910F8, "Walking_");
  qword_2591110 = (uint64_t)operator new(0x19uLL);
  unk_2591118 = v280;
  strcpy((char *)qword_2591110, "Walking_Sharp_Left_Turn");
  qword_2591128 = (uint64_t)operator new(0x20uLL);
  xmmword_2591130 = v279;
  strcpy((char *)qword_2591128, "Walking_Sharp_Right_Turn");
  qword_2591140 = (uint64_t)operator new(0x20uLL);
  unk_2591148 = v279;
  strcpy((char *)qword_2591140, "Walking_Slight_Left_Turn");
  qword_2591158 = (uint64_t)operator new(0x20uLL);
  xmmword_2591160 = v278;
  strcpy((char *)qword_2591158, "Walking_Slight_Right_Turn");
  byte_2591187 = 4;
  strcpy((char *)&dword_2591170, "Exit");
  byte_259119F = 4;
  strcpy((char *)&dword_2591188, "Road");
  byte_25911B7 = 7;
  strcpy((char *)&dword_25911A0, "Freeway");
  byte_25911CF = 12;
  strcpy((char *)&qword_25911B8, "Intersection");
  byte_25911E7 = 5;
  strcpy((char *)&dword_25911D0, "Ferry");
  byte_25911FF = 11;
  strcpy((char *)&qword_25911E8, "ShuttleName");
  byte_2591217 = 5;
  strcpy((char *)&dword_2591200, "Road1");
  strcpy(&byte_259122F, "\tName");
  strcpy((char *)&qword_2591218, "Signpost1");
  byte_2591247 = 4;
  byte_259125F = 7;
  strcpy((char *)&dword_2591248, "Address");
  byte_2591277 = 7;
  strcpy((char *)&dword_2591260, "Shield1");
  byte_259128F = 13;
  strcpy((char *)&qword_2591278, "TowardShield1");
  byte_25912A7 = 6;
  strcpy((char *)&dword_2591290, "Right_");
  byte_25912BF = 5;
  byte_25912AC = 95;
  dword_25912A8 = 1952867660;
  byte_25912AD = 0;
  strcpy(&byte_25912D7, "\tOn_Left_");
  strcpy((char *)&qword_25912C0, "On_Right_");
  byte_25912EF = 8;
  byte_2591307 = 12;
  strcpy((char *)&qword_25912F0, "ElevatorName");
  byte_259131F = 13;
  strcpy((char *)&qword_2591308, "EscalatorName");
  strcpy(&byte_2591337, "\nBridgeName");
  strcpy((char *)&qword_2591320, "StairsName");
  strcpy(&byte_259134F, "\nTunnelName");
  strcpy(&byte_2591367, "\nParking");
  byte_259137F = 7;
  strcpy(&byte_2591397, "\t_Escalator");
  strcpy((char *)&qword_2591380, "_Elevator");
  strcpy(&byte_25913AF, "\n_ElevatorName");
  byte_25913C7 = 13;
  byte_25913DF = 14;
  strcpy((char *)&qword_25913C8, "_EscalatorName");
  byte_25913F7 = 5;
  strcpy((char *)&qword_25913E0, "_Road");
  byte_259140F = 8;
  strcpy((char *)&qword_25913F8, "_Freeway");
  byte_2591427 = 13;
  strcpy((char *)&qword_2591410, "_Intersection");
  byte_259143F = 6;
  strcpy((char *)&dword_2591428, "_Road1");
  byte_2591457 = 6;
  strcpy((char *)&dword_2591440, "_Road2");
  strcpy(&byte_259146F, "\n_Signpost2");
  strcpy((char *)&qword_2591458, "_Signpost1");
  strcpy(&byte_2591487, "\n_Ferry");
  byte_259149F = 6;
  byte_25914B7 = 12;
  strcpy((char *)&qword_25914A0, "_Ferry_Ferry");
  byte_25914CF = 12;
  strcpy((char *)&qword_25914B8, "_ShuttleName");
  qword_25914D0 = (uint64_t)operator new(0x20uLL);
  unk_25914D8 = v277;
  strcpy((char *)qword_25914D0, "_Railway_Shuttle_ShuttleName");
  byte_25914FF = 11;
  strcpy((char *)&qword_25914E8, "_ExitNumber");
  byte_2591517 = 5;
  dword_2591500 = 1769489759;
  byte_2591504 = 116;
  byte_2591505 = 0;
  byte_259152F = 7;
  strcpy((char *)&dword_2591518, "_StayOn");
  byte_2591547 = 7;
  strcpy((char *)&dword_2591530, "_Stairs");
  byte_259155F = 5;
  strcpy((char *)&dword_2591548, "_Ramp");
  byte_2591577 = 11;
  strcpy((char *)&qword_2591560, "_StairsName");
  strcpy(&byte_259158F, "\t_Down");
  strcpy((char *)&qword_2591578, "_RampName");
  byte_25915A7 = 5;
  byte_25915BF = 3;
  dword_25915A8 = 7361887;
  byte_25915D7 = 7;
  strcpy((char *)&dword_25915C0, "_Bridge");
  byte_25915EF = 7;
  strcpy((char *)&dword_25915D8, "_Tunnel");
  byte_2591607 = 11;
  strcpy((char *)&qword_25915F0, "_Roundabout");
  byte_259161F = 6;
  strcpy((char *)&dword_2591608, "_Cross");
  byte_2591637 = 8;
  strcpy((char *)&qword_2591620, "_Parking");
  byte_259164F = 8;
  strcpy((char *)&qword_2591638, "_Shield1");
  byte_2591667 = 14;
  strcpy((char *)&qword_2591650, "_TowardShield1");
  byte_259167F = 8;
  strcpy((char *)&qword_2591668, "_Shield2");
  byte_2591697 = 14;
  strcpy((char *)&qword_2591680, "_TowardShield2");
  byte_25916AF = 11;
  strcpy((char *)&qword_2591698, "_Direction1");
  byte_25916C7 = 11;
  strcpy((char *)&qword_25916B0, "_Direction2");
  strcpy(&byte_25916DF, "\n_TowardDirection1");
  strcpy((char *)&qword_25916C8, "Direction1");
  byte_25916F7 = 17;
  byte_259170F = 17;
  strcpy((char *)&xmmword_25916F8, "_TowardDirection2");
  byte_2591727 = 16;
  strcpy((char *)&xmmword_2591710, "TowardDirection1");
  byte_259173F = 7;
  strcpy((char *)&qword_2591728, "_Spoken");
  byte_2591757 = 5;
  strcpy((char *)&qword_2591740, "_Sign");
  byte_259176F = 15;
  strcpy((char *)&qword_2591758, "_Secondary_Sign");
  byte_2591787 = 5;
  byte_2591774 = 116;
  dword_2591770 = 1936280671;
  byte_2591775 = 0;
  byte_259179F = 8;
  strcpy((char *)&qword_2591788, "_Primary");
  qword_25917B0 = 0xF00000000000000;
  strcpy(byte_25917B8, "_Secondary");
  strcpy((char *)&qword_25917A0, "_Spoken_Primary");
  strcpy(&byte_25917CF, "\n_Secondary");
  strcpy(&byte_25917E7, "\n_Spoken_Secondar");
  BYTE1(qword_25917F8) = 0;
  WORD1(qword_25917F8) = 0;
  HIDWORD(qword_25917F8) = 285212672;
  byte_2591817 = 13;
  strcpy((char *)&qword_2591800, "_To_Secondary");
  BYTE1(qword_2591828) = 0;
  WORD1(qword_2591828) = 0;
  HIDWORD(qword_2591828) = 335544320;
  strcpy((char *)&dword_2591818, "_Spoken_To_Secon");
  strcpy(&byte_2591847, "\t_ValidDistance");
  strcpy((char *)&qword_2591830, "_Distance");
  byte_259185F = 14;
  byte_2591877 = 6;
  strcpy((char *)&dword_2591860, "_Short");
  byte_259188F = 1;
  word_2591878 = 95;
  qword_2591890 = (uint64_t)operator new(0x20uLL);
  unk_2591898 = v279;
  strcpy((char *)qword_2591890, "Concatenate_Newline_Sign");
  double v1 = (char *)operator new(0x19uLL);
  qword_25918A8 = (uint64_t)v1;
  xmmword_25918B0 = v280;
  *(_OWORD *)double v1 = v270;
  uint64_t v2 = *(void *)&v268[1];
  *(void *)(v1 + 15) = *(void *)&v268[1];
  v1[23] = 0;
  byte_25918D7 = 12;
  strcpy((char *)&qword_25918C0, "Chain_Spoken");
  byte_25918EF = 15;
  strcpy((char *)&qword_25918D8, "Chain_To_Spoken");
  strcpy(&byte_2591907, "\nThen_Spoken");
  strcpy((char *)&qword_25918F0, "And_Spoken");
  byte_259191F = 11;
  byte_2591937 = 18;
  strcpy((char *)&xmmword_2591920, "Concatenate_Spoken");
  qword_2591938 = (uint64_t)operator new(0x28uLL);
  long long v267 = xmmword_20B9240;
  xmmword_2591940 = xmmword_20B9240;
  strcpy((char *)qword_2591938, "At_Traffic_Light_Chain_Spoken_Primary");
  qword_2591950 = (uint64_t)operator new(0x28uLL);
  v268[2] = xmmword_20B9260;
  unk_2591958 = xmmword_20B9260;
  strcpy((char *)qword_2591950, "At_Stop_Sign_Chain_Spoken_Primary");
  qword_2591968 = (uint64_t)operator new(0x40uLL);
  xmmword_2591970 = xmmword_20B9A90;
  strcpy((char *)qword_2591968, "At_Stop_Sign_Cross_Traffic_Doesnt_Stop_Chain_Spoken_Primary");
  qword_2591980 = (uint64_t)operator new(0x30uLL);
  long long v266 = xmmword_20B9A40;
  unk_2591988 = xmmword_20B9A40;
  strcpy((char *)qword_2591980, "At_Next_Traffic_Light_Chain_Spoken_Primary");
  qword_2591998 = (uint64_t)operator new(0x28uLL);
  long long v265 = xmmword_20E12D0;
  xmmword_25919A0 = xmmword_20E12D0;
  strcpy((char *)qword_2591998, "At_Next_Stop_Sign_Chain_Spoken_Primary");
  qword_25919B0 = (uint64_t)operator new(0x28uLL);
  long long v274 = xmmword_20B9960;
  unk_25919B8 = xmmword_20B9960;
  strcpy((char *)qword_25919B0, "At_Traffic_Light_Chain_Spoken_Secondary");
  qword_25919C8 = (uint64_t)operator new(0x28uLL);
  xmmword_25919D0 = xmmword_20B93A0;
  strcpy((char *)qword_25919C8, "At_Stop_Sign_Chain_Spoken_Secondary");
  qword_25919E0 = (uint64_t)operator new(0x30uLL);
  long long v272 = xmmword_20E1380;
  unk_25919E8 = xmmword_20E1380;
  strcpy((char *)qword_25919E0, "At_Next_Traffic_Light_Chain_Spoken_Secondary");
  qword_25919F8 = (uint64_t)operator new(0x30uLL);
  xmmword_2591A00 = xmmword_20B93C0;
  strcpy((char *)qword_25919F8, "At_Next_Stop_Sign_Chain_Spoken_Secondary");
  qword_2591A10 = (uint64_t)operator new(0x38uLL);
  unk_2591A18 = xmmword_20B9A60;
  strcpy((char *)qword_2591A10, "At_Next_One_Traffic_Light_Chain_Spoken_Secondary");
  qword_2591A28 = (uint64_t)operator new(0x30uLL);
  xmmword_2591A30 = xmmword_20E1380;
  strcpy((char *)qword_2591A28, "At_Next_One_Stop_Sign_Chain_Spoken_Secondary");
  qword_2591A40 = (uint64_t)operator new(0x28uLL);
  unk_2591A48 = xmmword_20B9960;
  strcpy((char *)qword_2591A40, "At_Mini_Roundabout_Chain_Spoken_Primary");
  qword_2591A58 = (uint64_t)operator new(0x30uLL);
  long long v271 = xmmword_20B93D0;
  xmmword_2591A60 = xmmword_20B93D0;
  strcpy((char *)qword_2591A58, "At_Mini_Roundabout_Chain_Spoken_Secondary");
  qword_2591A70 = (uint64_t)operator new(0x20uLL);
  unk_2591A78 = v275;
  strcpy((char *)qword_2591A70, "Walking_Distance_Chain_Spoken");
  qword_2591A88 = (uint64_t)operator new(0x20uLL);
  xmmword_2591A90 = v275;
  strcpy((char *)qword_2591A88, "Walking_Continue_Chain_Spoken");
  uint64_t v3 = (char *)operator new(0x19uLL);
  qword_2591AA0 = (uint64_t)v3;
  unk_2591AA8 = v280;
  *(_OWORD *)uint64_t v3 = v270;
  *(void *)(v3 + 15) = v2;
  v3[23] = 0;
  qword_2591AB8 = (uint64_t)operator new(0x28uLL);
  xmmword_2591AC0 = v269;
  strcpy((char *)qword_2591AB8, "Distance_Cross_The_Street_Spoken");
  byte_2591AE7 = 22;
  strcpy((char *)&xmmword_2591AD0, "Walking_Continue_Cross");
  byte_2591AFF = 14;
  strcpy((char *)&qword_2591AE8, "Continue_Cross");
  byte_2591B17 = 5;
  strcpy((char *)&dword_2591B00, "Cross");
  byte_2591B2F = 19;
  strcpy((char *)&xmmword_2591B18, "Cross_Street_Spoken");
  byte_2591B47 = 17;
  strcpy((char *)&xmmword_2591B30, "Cross_Road_Spoken");
  byte_2591B5F = 20;
  strcpy((char *)&xmmword_2591B48, "Use_Crosswalk_Spoken");
  byte_2591B77 = 15;
  strcpy((char *)&qword_2591B60, "Distance_Spoken");
  byte_2591B8F = 19;
  strcpy((char *)&xmmword_2591B78, "Distance_And_Spoken");
  byte_2591BA7 = 21;
  strcpy((char *)&xmmword_2591B90, "Continue_Stage_Spoken");
  byte_2591BBF = 13;
  qmemcpy(&qword_2591BA8, "ContinueStage", 13);
  int v4 = SHIBYTE(qword_25917B0);
  if (qword_25917B0 >= 0) {
    size_t v5 = HIBYTE(qword_25917B0);
  }
  else {
    size_t v5 = unk_25917A8;
  }
  unint64_t v6 = v5 + 13;
  byte_2591BB5 = 0;
  if (v5 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v10 = operator new(v8 + 1);
    qword_2591BC8 = v5 + 13;
    unk_2591BD0 = v9 | 0x8000000000000000;
    qword_2591BC0 = (uint64_t)v10;
    *uint64_t v10 = *(void *)"ContinueStage";
    int v7 = (char *)v10 + 13;
    *(void *)((char *)v10 + 5) = *(void *)"nueStage";
  }
  else
  {
    BYTE1(qword_2591BC8) = 0;
    WORD1(qword_2591BC8) = 0;
    HIDWORD(qword_2591BC8) = 0;
    unk_2591BD0 = 0;
    byte_2591BD7 = v5 + 13;
    int v7 = (char *)&qword_2591BC8 + 5;
    strcpy((char *)&qword_2591BC0, "Continue");
    if (!v5) {
      goto LABEL_15;
    }
  }
  if (v4 >= 0) {
    uint64_t v11 = &qword_25917A0;
  }
  else {
    uint64_t v11 = (uint64_t *)qword_25917A0;
  }
  memmove(v7, v11, v5);
LABEL_15:
  v7[v5] = 0;
  int v12 = byte_25913F7;
  if (byte_25913F7 >= 0) {
    size_t v13 = byte_25913F7;
  }
  else {
    size_t v13 = qword_25913E8;
  }
  unint64_t v14 = v13 + 13;
  if (v13 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v14 >= 0x17)
  {
    uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v16 = v14 | 7;
    }
    uint64_t v17 = v16 + 1;
    size_t v18 = operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v13 + 13;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    *size_t v18 = qword_2591BA8;
    *(void *)((char *)v18 + 5) = *(uint64_t *)((char *)&qword_2591BA8 + 5);
    long long v15 = (char *)v18 + 13;
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 5) = *(uint64_t *)((char *)&qword_2591BA8 + 5);
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13 + 13;
    __dst.__r_.__value_.__r.__words[0] = qword_2591BA8;
    long long v15 = &__dst.__r_.__value_.__s.__data_[13];
    if (!v13) {
      goto LABEL_29;
    }
  }
  if (v12 >= 0) {
    unint64_t v19 = &qword_25913E0;
  }
  else {
    unint64_t v19 = (uint64_t *)qword_25913E0;
  }
  memmove(v15, v19, v13);
LABEL_29:
  v15[v13] = 0;
  if (v4 >= 0) {
    uint64_t v20 = (const std::string::value_type *)&qword_25917A0;
  }
  else {
    uint64_t v20 = (const std::string::value_type *)qword_25917A0;
  }
  uint64_t v21 = std::string::append(&__dst, v20, v5);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  qword_2591BE8 = v21->__r_.__value_.__r.__words[2];
  xmmword_2591BD8 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  byte_2591C07 = 5;
  strcpy((char *)&dword_2591BF0, "Merge");
  qword_2591C08 = (uint64_t)operator new(0x20uLL);
  v268[1] = xmmword_20B8E90;
  *(_OWORD *)algn_2591C10 = xmmword_20B8E90;
  strcpy((char *)qword_2591C08, "Continue_Freeway_Spoken_Primary");
  byte_2591C37 = 8;
  strcpy((char *)&qword_2591C20, "Starting");
  byte_2591C4F = 14;
  strcpy((char *)&qword_2591C38, "Starting_Route");
  byte_2591C67 = 14;
  strcpy((char *)&qword_2591C50, "Resuming_Route");
  byte_2591C7F = 16;
  strcpy((char *)&xmmword_2591C68, "Continuing_Route");
  byte_2591C97 = 9;
  word_2591C88 = 112;
  qword_2591C80 = *(void *)&v264[48];
  strcpy(&byte_2591CAF, "\nEnding");
  strcpy((char *)&word_2591CA0, "op");
  qword_2591C98 = *(void *)&v268[0];
  byte_2591CC7 = 6;
  strcpy((char *)&qword_2591CC8, "_Destination");
  byte_2591CDF = 12;
  byte_2591CF7 = 15;
  strcpy((char *)&qword_2591CE0, "_At_Destination");
  std::operator+<char>();
  qword_2591D10 = (uint64_t)operator new(0x20uLL);
  unk_2591D18 = v279;
  strcpy((char *)qword_2591D10, "Spoken_Ending_At_Parking");
  qword_2591D28 = (uint64_t)operator new(0x20uLL);
  v268[0] = xmmword_20B9800;
  xmmword_2591D30 = xmmword_20B9800;
  strcpy((char *)qword_2591D28, "Spoken_Pre_Arrival_Destination");
  strcpy((char *)&xmmword_2591D40, "Sign_Ending_At_Parking");
  HIBYTE(word_2591D56) = 22;
  byte_2591D6F = 4;
  strcpy((char *)&dword_2591D58, "Home");
  byte_2591D87 = 4;
  strcpy((char *)&dword_2591D70, "Work");
  byte_2591D9F = 8;
  strcpy((char *)&qword_2591D88, "Business");
  byte_2591DB7 = 4;
  strcpy((char *)&dword_2591DA0, "Name");
  byte_2591DCF = 13;
  strcpy((char *)&qword_2591DB8, "Other_Contact");
  byte_2591DE7 = 11;
  strcpy((char *)&qword_2591DD0, "ContactHome");
  byte_2591DFF = 11;
  *(_DWORD *)((char *)&qword_2591DE8 + 7) = 1802661719;
  byte_2591E17 = 7;
  *(int *)((char *)&dword_2591E00 + 3) = 1936942450;
  dword_2591E00 = 1919181889;
  strcpy((char *)&xmmword_2591E18, "Discoverability_Prompt");
  HIBYTE(word_2591E2E) = 22;
  byte_2591E47 = 6;
  dword_2591E30 = 1634878303;
  word_2591E34 = 26739;
  byte_2591E5F = 8;
  qword_2591E48 = 0x697269535F6F4E5FLL;
  byte_2591E77 = 9;
  strcpy((char *)&qword_2591E60, "_CityName");
  byte_2591E8F = 8;
  qword_2591E78 = 0x636972656E65475FLL;
  int v23 = byte_2591C37;
  if (byte_2591C37 >= 0) {
    size_t v24 = byte_2591C37;
  }
  else {
    size_t v24 = qword_2591C28;
  }
  LODWORD(v270) = byte_2590F77;
  if (byte_2590F77 >= 0) {
    size_t v25 = byte_2590F77;
  }
  else {
    size_t v25 = unk_2590F68;
  }
  qword_2591DE8 = *(void *)"ContactWork";
  byte_2591DF3 = 0;
  byte_2591E07 = 0;
  byte_2591E36 = 0;
  byte_2591E50 = 0;
  byte_2591E80 = 0;
  unint64_t v26 = v25 + v24;
  if (v25 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  *(void *)long long v264 = *(void *)"ContactWork";
  *(void *)&v264[16] = *(void *)"ContactHome";
  *(void *)&v264[32] = *(void *)"_Contact";
  *(void *)&v264[48] = *(void *)"Other_Contact";
  if (v26 <= 0x16)
  {
    uint64_t v27 = &qword_2591E90;
    qword_2591E98 = 0;
    unk_2591EA0 = 0;
    qword_2591E90 = 0;
    byte_2591EA7 = v25 + v24;
    if (!v24) {
      goto LABEL_47;
    }
    goto LABEL_43;
  }
  uint64_t v90 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17) {
    uint64_t v90 = v26 | 7;
  }
  uint64_t v91 = v90 + 1;
  uint64_t v27 = (uint64_t *)operator new(v90 + 1);
  qword_2591E98 = v25 + v24;
  unk_2591EA0 = v91 | 0x8000000000000000;
  qword_2591E90 = (uint64_t)v27;
  if (v24)
  {
LABEL_43:
    if (v23 >= 0) {
      uint64_t v28 = &qword_2591C20;
    }
    else {
      uint64_t v28 = (uint64_t *)qword_2591C20;
    }
    memmove(v27, v28, v24);
  }
LABEL_47:
  long long v29 = (char *)v27 + v24;
  if (v25)
  {
    if ((int)v270 >= 0) {
      uint64_t v30 = &qword_2590F60;
    }
    else {
      uint64_t v30 = (uint64_t *)qword_2590F60;
    }
    memmove(v29, v30, v25);
  }
  v29[v25] = 0;
  int v31 = byte_2591CDF;
  if (byte_2591CDF >= 0) {
    size_t v32 = byte_2591CDF;
  }
  else {
    size_t v32 = qword_2591CD0;
  }
  unint64_t v33 = v32 + v24;
  if (v32 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v33 <= 0x16)
  {
    BOOL v34 = &qword_2591EA8;
    qword_2591EB0 = 0;
    unk_2591EB8 = 0;
    qword_2591EA8 = 0;
    byte_2591EBF = v32 + v24;
    if (!v24) {
      goto LABEL_62;
    }
    goto LABEL_58;
  }
  uint64_t v92 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v92 = v33 | 7;
  }
  uint64_t v93 = v92 + 1;
  BOOL v34 = (uint64_t *)operator new(v92 + 1);
  qword_2591EB0 = v32 + v24;
  unk_2591EB8 = v93 | 0x8000000000000000;
  qword_2591EA8 = (uint64_t)v34;
  if (v24)
  {
LABEL_58:
    if (v23 >= 0) {
      unint64_t v35 = &qword_2591C20;
    }
    else {
      unint64_t v35 = (uint64_t *)qword_2591C20;
    }
    memmove(v34, v35, v24);
  }
LABEL_62:
  unint64_t v36 = (char *)v34 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      BOOL v37 = &qword_2591CC8;
    }
    else {
      BOOL v37 = (uint64_t *)qword_2591CC8;
    }
    memmove(v36, v37, v32);
  }
  v36[v32] = 0;
  qword_2591EC0 = (uint64_t)operator new(0x19uLL);
  unk_2591EC8 = v280;
  strcpy((char *)qword_2591EC0, "{ChargeStationCityName}");
  if (v33 < 0x17)
  {
    int64_t v38 = &qword_2591ED8;
    qword_2591EE0 = 0;
    unk_2591EE8 = 0;
    qword_2591ED8 = 0;
    byte_2591EEF = v32 + v24;
    if (!v24) {
      goto LABEL_73;
    }
    goto LABEL_69;
  }
  uint64_t v94 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v94 = v33 | 7;
  }
  uint64_t v95 = v94 + 1;
  int64_t v38 = (uint64_t *)operator new(v94 + 1);
  qword_2591EE0 = v32 + v24;
  unk_2591EE8 = v95 | 0x8000000000000000;
  qword_2591ED8 = (uint64_t)v38;
  if (v24)
  {
LABEL_69:
    if (v23 >= 0) {
      unint64_t v39 = &qword_2591C20;
    }
    else {
      unint64_t v39 = (uint64_t *)qword_2591C20;
    }
    memmove(v38, v39, v24);
  }
LABEL_73:
  uint8x8_t v40 = (char *)v38 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      uint64_t v41 = &qword_2591CC8;
    }
    else {
      uint64_t v41 = (uint64_t *)qword_2591CC8;
    }
    memmove(v40, v41, v32);
  }
  v40[v32] = 0;
  strcpy((char *)&xmmword_2591EF0, "{NewBatteryPercentage}");
  HIBYTE(word_2591F06) = 22;
  qword_2591F08 = (uint64_t)operator new(0x20uLL);
  xmmword_2591F10 = v273;
  strcpy((char *)qword_2591F08, "{OriginalBatteryPercentage}");
  byte_2591F37 = 19;
  strcpy((char *)&xmmword_2591F20, "_Arrival_Percentage");
  int v42 = byte_2591CC7;
  if (byte_2591CC7 >= 0) {
    size_t v43 = byte_2591CC7;
  }
  else {
    size_t v43 = qword_2591CB8;
  }
  unint64_t v44 = v43 + v25;
  if (v43 + v25 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v44 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v43 + v25;
    if (!v43) {
      goto LABEL_88;
    }
    goto LABEL_84;
  }
  uint64_t v96 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v44 | 7) != 0x17) {
    uint64_t v96 = v44 | 7;
  }
  uint64_t v97 = v96 + 1;
  p_dst = (char *)operator new(v96 + 1);
  __dst.__r_.__value_.__l.__size_ = v43 + v25;
  __dst.__r_.__value_.__r.__words[2] = v97 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v43)
  {
LABEL_84:
    if (v42 >= 0) {
      unint64_t v46 = &qword_2591CB0;
    }
    else {
      unint64_t v46 = (uint64_t *)qword_2591CB0;
    }
    memmove(p_dst, v46, v43);
  }
LABEL_88:
  size_t v47 = &p_dst[v43];
  if (v25)
  {
    if ((int)v270 >= 0) {
      unint64_t v48 = &qword_2590F60;
    }
    else {
      unint64_t v48 = (uint64_t *)qword_2590F60;
    }
    memmove(v47, v48, v25);
  }
  v47[v25] = 0;
  int64_t v49 = std::string::append(&__dst, "_Percentage");
  long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  qword_2591F48 = v49->__r_.__value_.__r.__words[2];
  xmmword_2591F38 = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v51 = byte_2591CC7;
  if (byte_2591CC7 >= 0) {
    size_t v52 = byte_2591CC7;
  }
  else {
    size_t v52 = qword_2591CB8;
  }
  int v53 = byte_2590F77;
  if (byte_2590F77 >= 0) {
    size_t v54 = byte_2590F77;
  }
  else {
    size_t v54 = unk_2590F68;
  }
  unint64_t v55 = v54 + v52;
  if (v54 + v52 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v55 <= 0x16)
  {
    memset(&v281, 0, sizeof(v281));
    double v56 = (char *)&v281;
    *((unsigned char *)&v281.__r_.__value_.__s + 23) = v54 + v52;
    if (!v52) {
      goto LABEL_108;
    }
    goto LABEL_104;
  }
  uint64_t v98 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v55 | 7) != 0x17) {
    uint64_t v98 = v55 | 7;
  }
  uint64_t v99 = v98 + 1;
  double v56 = (char *)operator new(v98 + 1);
  v281.__r_.__value_.__l.__size_ = v54 + v52;
  v281.__r_.__value_.__r.__words[2] = v99 | 0x8000000000000000;
  v281.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  if (v52)
  {
LABEL_104:
    if (v51 >= 0) {
      uint64_t v57 = &qword_2591CB0;
    }
    else {
      uint64_t v57 = (uint64_t *)qword_2591CB0;
    }
    memmove(v56, v57, v52);
  }
LABEL_108:
  uint64_t v58 = &v56[v52];
  if (v54)
  {
    if (v53 >= 0) {
      double v59 = &qword_2590F60;
    }
    else {
      double v59 = (uint64_t *)qword_2590F60;
    }
    memmove(v58, v59, v54);
  }
  v58[v54] = 0;
  if (byte_2590FA7 >= 0) {
    double v60 = (const std::string::value_type *)&qword_2590F90;
  }
  else {
    double v60 = (const std::string::value_type *)qword_2590F90;
  }
  if (byte_2590FA7 >= 0) {
    std::string::size_type v61 = byte_2590FA7;
  }
  else {
    std::string::size_type v61 = *(void *)&byte_2590F98;
  }
  uint64_t v62 = std::string::append(&v281, v60, v61);
  long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  double v64 = std::string::append(&__dst, "_Percentage");
  long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  qword_2591F60 = v64->__r_.__value_.__r.__words[2];
  xmmword_2591F50 = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_121;
    }
  }
  else if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_121;
  }
  operator delete(v281.__r_.__value_.__l.__data_);
LABEL_121:
  int v66 = byte_2591CC7;
  if (byte_2591CC7 >= 0) {
    size_t v67 = byte_2591CC7;
  }
  else {
    size_t v67 = qword_2591CB8;
  }
  int v68 = byte_2590F77;
  if (byte_2590F77 >= 0) {
    size_t v69 = byte_2590F77;
  }
  else {
    size_t v69 = unk_2590F68;
  }
  unint64_t v70 = v69 + v67;
  if (v69 + v67 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v70 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    double v71 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v69 + v67;
    if (!v67) {
      goto LABEL_134;
    }
    goto LABEL_130;
  }
  uint64_t v100 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v70 | 7) != 0x17) {
    uint64_t v100 = v70 | 7;
  }
  uint64_t v101 = v100 + 1;
  double v71 = (char *)operator new(v100 + 1);
  __dst.__r_.__value_.__l.__size_ = v69 + v67;
  __dst.__r_.__value_.__r.__words[2] = v101 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
  if (v67)
  {
LABEL_130:
    if (v66 >= 0) {
      double v72 = &qword_2591CB0;
    }
    else {
      double v72 = (uint64_t *)qword_2591CB0;
    }
    memmove(v71, v72, v67);
  }
LABEL_134:
  uint64_t v73 = &v71[v67];
  if (v69)
  {
    if (v68 >= 0) {
      uint64_t v74 = &qword_2590F60;
    }
    else {
      uint64_t v74 = (uint64_t *)qword_2590F60;
    }
    memmove(v73, v74, v69);
  }
  v73[v69] = 0;
  double v75 = std::string::append(&__dst, "_Duration");
  long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
  qword_2591F78 = v75->__r_.__value_.__r.__words[2];
  xmmword_2591F68 = v76;
  v75->__r_.__value_.__l.__size_ = 0;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v77 = byte_2591CC7;
  if (byte_2591CC7 >= 0) {
    size_t v78 = byte_2591CC7;
  }
  else {
    size_t v78 = qword_2591CB8;
  }
  int v79 = byte_2590F77;
  if (byte_2590F77 >= 0) {
    size_t v80 = byte_2590F77;
  }
  else {
    size_t v80 = unk_2590F68;
  }
  unint64_t v81 = v80 + v78;
  if (v80 + v78 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v81 <= 0x16)
  {
    qword_2591F88 = 0;
    unk_2591F90 = 0;
    qword_2591F80 = 0;
    uint64_t v82 = &qword_2591F80;
    byte_2591F97 = v80 + v78;
    if (!v78) {
      goto LABEL_154;
    }
    goto LABEL_150;
  }
  uint64_t v102 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v81 | 7) != 0x17) {
    uint64_t v102 = v81 | 7;
  }
  uint64_t v103 = v102 + 1;
  uint64_t v82 = (uint64_t *)operator new(v102 + 1);
  qword_2591F88 = v80 + v78;
  unk_2591F90 = v103 | 0x8000000000000000;
  qword_2591F80 = (uint64_t)v82;
  if (v78)
  {
LABEL_150:
    if (v77 >= 0) {
      double v83 = &qword_2591CB0;
    }
    else {
      double v83 = (uint64_t *)qword_2591CB0;
    }
    memmove(v82, v83, v78);
  }
LABEL_154:
  double v84 = (char *)v82 + v78;
  if (v80)
  {
    if (v79 >= 0) {
      uint64_t v85 = &qword_2590F60;
    }
    else {
      uint64_t v85 = (uint64_t *)qword_2590F60;
    }
    memmove(v84, v85, v80);
  }
  v84[v80] = 0;
  int v86 = byte_2591F97;
  if (byte_2591F97 >= 0) {
    size_t v87 = byte_2591F97;
  }
  else {
    size_t v87 = qword_2591F88;
  }
  unint64_t v88 = v87 + 5;
  if (v87 + 5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v88 >= 0x17)
  {
    uint64_t v104 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v88 | 7) != 0x17) {
      uint64_t v104 = v88 | 7;
    }
    uint64_t v105 = v104 + 1;
    uint64_t v89 = (uint64_t *)operator new(v104 + 1);
    qword_2591FA0 = v87 + 5;
    unk_2591FA8 = v105 | 0x8000000000000000;
    qword_2591F98 = (uint64_t)v89;
  }
  else
  {
    uint64_t v89 = &qword_2591F98;
    qword_2591FA0 = 0;
    unk_2591FA8 = 0;
    qword_2591F98 = 0;
    byte_2591FAF = v87 + 5;
    if (!v87) {
      goto LABEL_201;
    }
  }
  if (v86 >= 0) {
    int v106 = &qword_2591F80;
  }
  else {
    int v106 = (uint64_t *)qword_2591F80;
  }
  memmove(v89, v106, v87);
LABEL_201:
  strcpy((char *)v89 + v87, "_Name");
  int v107 = byte_2591CC7;
  if (byte_2591CC7 >= 0) {
    size_t v108 = byte_2591CC7;
  }
  else {
    size_t v108 = qword_2591CB8;
  }
  int v109 = byte_2590F77;
  if (byte_2590F77 >= 0) {
    size_t v110 = byte_2590F77;
  }
  else {
    size_t v110 = unk_2590F68;
  }
  unint64_t v111 = v110 + v108;
  if (v110 + v108 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v111 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    int v112 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v110 + v108;
    if (!v108) {
      goto LABEL_214;
    }
    goto LABEL_210;
  }
  uint64_t v122 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v111 | 7) != 0x17) {
    uint64_t v122 = v111 | 7;
  }
  uint64_t v123 = v122 + 1;
  int v112 = (char *)operator new(v122 + 1);
  __dst.__r_.__value_.__l.__size_ = v110 + v108;
  __dst.__r_.__value_.__r.__words[2] = v123 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
  if (v108)
  {
LABEL_210:
    if (v107 >= 0) {
      long long v113 = &qword_2591CB0;
    }
    else {
      long long v113 = (uint64_t *)qword_2591CB0;
    }
    memmove(v112, v113, v108);
  }
LABEL_214:
  unsigned __int8 v114 = &v112[v108];
  if (v110)
  {
    if (v109 >= 0) {
      long long v115 = &qword_2590F60;
    }
    else {
      long long v115 = (uint64_t *)qword_2590F60;
    }
    memmove(v114, v115, v110);
  }
  v114[v110] = 0;
  unsigned __int8 v116 = std::string::append(&__dst, "_Connector_Type");
  long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
  qword_2591FC0 = v116->__r_.__value_.__r.__words[2];
  xmmword_2591FB0 = v117;
  v116->__r_.__value_.__l.__size_ = 0;
  v116->__r_.__value_.__r.__words[2] = 0;
  v116->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v118 = SHIBYTE(qword_2591FC0);
  if (qword_2591FC0 >= 0) {
    size_t v119 = HIBYTE(qword_2591FC0);
  }
  else {
    size_t v119 = *((void *)&xmmword_2591FB0 + 1);
  }
  unint64_t v120 = v119 + 6;
  if (v119 + 6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v120 >= 0x17)
  {
    uint64_t v124 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v120 | 7) != 0x17) {
      uint64_t v124 = v120 | 7;
    }
    uint64_t v125 = v124 + 1;
    unint64_t v121 = (uint64_t *)operator new(v124 + 1);
    qword_2591FD0 = v119 + 6;
    unk_2591FD8 = v125 | 0x8000000000000000;
    qword_2591FC8 = (uint64_t)v121;
  }
  else
  {
    unint64_t v121 = &qword_2591FC8;
    qword_2591FD0 = 0;
    unk_2591FD8 = 0;
    qword_2591FC8 = 0;
    byte_2591FDF = v119 + 6;
    if (!v119) {
      goto LABEL_239;
    }
  }
  if (v118 >= 0) {
    int v126 = &xmmword_2591FB0;
  }
  else {
    int v126 = (long long *)xmmword_2591FB0;
  }
  memmove(v121, v126, v119);
LABEL_239:
  strcpy((char *)v121 + v119, "_Power");
  int v127 = byte_2591CC7;
  if (byte_2591CC7 >= 0) {
    size_t v128 = byte_2591CC7;
  }
  else {
    size_t v128 = qword_2591CB8;
  }
  int v129 = byte_2590F77;
  if (byte_2590F77 >= 0) {
    size_t v130 = byte_2590F77;
  }
  else {
    size_t v130 = unk_2590F68;
  }
  unint64_t v131 = v130 + v128;
  if (v130 + v128 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v131 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    int v132 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v130 + v128;
    if (!v128) {
      goto LABEL_252;
    }
    goto LABEL_248;
  }
  uint64_t v161 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v131 | 7) != 0x17) {
    uint64_t v161 = v131 | 7;
  }
  uint64_t v162 = v161 + 1;
  int v132 = (char *)operator new(v161 + 1);
  __dst.__r_.__value_.__l.__size_ = v130 + v128;
  __dst.__r_.__value_.__r.__words[2] = v162 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v132;
  if (v128)
  {
LABEL_248:
    if (v127 >= 0) {
      uint64_t v133 = &qword_2591CB0;
    }
    else {
      uint64_t v133 = (uint64_t *)qword_2591CB0;
    }
    memmove(v132, v133, v128);
  }
LABEL_252:
  int v134 = &v132[v128];
  if (v130)
  {
    if (v129 >= 0) {
      long long v135 = &qword_2590F60;
    }
    else {
      long long v135 = (uint64_t *)qword_2590F60;
    }
    memmove(v134, v135, v130);
  }
  v134[v130] = 0;
  if (byte_259173F >= 0) {
    int v136 = (const std::string::value_type *)&qword_2591728;
  }
  else {
    int v136 = (const std::string::value_type *)qword_2591728;
  }
  if (byte_259173F >= 0) {
    std::string::size_type v137 = byte_259173F;
  }
  else {
    std::string::size_type v137 = unk_2591730;
  }
  int v138 = std::string::append(&__dst, v136, v137);
  long long v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
  qword_2591FF0 = v138->__r_.__value_.__r.__words[2];
  xmmword_2591FE0 = v139;
  v138->__r_.__value_.__l.__size_ = 0;
  v138->__r_.__value_.__r.__words[2] = 0;
  v138->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v140 = byte_2591CC7;
  if (byte_2591CC7 >= 0) {
    size_t v141 = byte_2591CC7;
  }
  else {
    size_t v141 = qword_2591CB8;
  }
  int v142 = byte_2590F77;
  if (byte_2590F77 >= 0) {
    size_t v143 = byte_2590F77;
  }
  else {
    size_t v143 = unk_2590F68;
  }
  unint64_t v144 = v143 + v141;
  if (v143 + v141 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v144 <= 0x16)
  {
    memset(&v281, 0, sizeof(v281));
    v145 = (char *)&v281;
    *((unsigned char *)&v281.__r_.__value_.__s + 23) = v143 + v141;
    if (!v141) {
      goto LABEL_278;
    }
    goto LABEL_274;
  }
  uint64_t v163 = (v144 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v144 | 7) != 0x17) {
    uint64_t v163 = v144 | 7;
  }
  uint64_t v164 = v163 + 1;
  v145 = (char *)operator new(v163 + 1);
  v281.__r_.__value_.__l.__size_ = v143 + v141;
  v281.__r_.__value_.__r.__words[2] = v164 | 0x8000000000000000;
  v281.__r_.__value_.__r.__words[0] = (std::string::size_type)v145;
  if (v141)
  {
LABEL_274:
    if (v140 >= 0) {
      int v146 = &qword_2591CB0;
    }
    else {
      int v146 = (uint64_t *)qword_2591CB0;
    }
    memmove(v145, v146, v141);
  }
LABEL_278:
  v147 = &v145[v141];
  if (v143)
  {
    if (v142 >= 0) {
      int v148 = &qword_2590F60;
    }
    else {
      int v148 = (uint64_t *)qword_2590F60;
    }
    memmove(v147, v148, v143);
  }
  v147[v143] = 0;
  if (byte_2590FA7 >= 0) {
    double v149 = (const std::string::value_type *)&qword_2590F90;
  }
  else {
    double v149 = (const std::string::value_type *)qword_2590F90;
  }
  if (byte_2590FA7 >= 0) {
    std::string::size_type v150 = byte_2590FA7;
  }
  else {
    std::string::size_type v150 = *(void *)&byte_2590F98;
  }
  uint64_t v151 = std::string::append(&v281, v149, v150);
  long long v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v152;
  v151->__r_.__value_.__l.__size_ = 0;
  v151->__r_.__value_.__r.__words[2] = 0;
  v151->__r_.__value_.__r.__words[0] = 0;
  if (byte_259173F >= 0) {
    std::string v153 = (const std::string::value_type *)&qword_2591728;
  }
  else {
    std::string v153 = (const std::string::value_type *)qword_2591728;
  }
  if (byte_259173F >= 0) {
    std::string::size_type v154 = byte_259173F;
  }
  else {
    std::string::size_type v154 = unk_2591730;
  }
  long long v155 = std::string::append(&__dst, v153, v154);
  long long v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
  qword_2592008 = v155->__r_.__value_.__r.__words[2];
  xmmword_2591FF8 = v156;
  v155->__r_.__value_.__l.__size_ = 0;
  v155->__r_.__value_.__r.__words[2] = 0;
  v155->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_297;
    }
  }
  else if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_297;
  }
  operator delete(v281.__r_.__value_.__l.__data_);
LABEL_297:
  byte_2592027 = 16;
  strcpy((char *)&xmmword_2592010, "Use_NACS_Adapter");
  byte_259203F = 16;
  strcpy(byte_2592028, "Start_Route_Sign");
  qword_2592040 = (uint64_t)operator new(0x20uLL);
  unk_2592048 = v276;
  strcpy((char *)qword_2592040, "Start_Route_Spoken_Primary");
  int v157 = byte_25906D7;
  if (byte_25906D7 >= 0) {
    size_t v158 = byte_25906D7;
  }
  else {
    size_t v158 = qword_25906C8;
  }
  unint64_t v159 = v158 + 27;
  if (v158 + 27 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v159 <= 0x16)
  {
    uint64_t v160 = &qword_2592058;
    qword_2592060 = 0;
    unk_2592068 = 0;
    qword_2592058 = 0;
    byte_259206F = v158 + 27;
LABEL_314:
    if (v157 >= 0) {
      uint64_t v167 = &qword_25906C0;
    }
    else {
      uint64_t v167 = (uint64_t *)qword_25906C0;
    }
    memmove(v160, v167, v158);
    goto LABEL_318;
  }
  uint64_t v165 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v159 | 7) != 0x17) {
    uint64_t v165 = v159 | 7;
  }
  uint64_t v166 = v165 + 1;
  uint64_t v160 = (uint64_t *)operator new(v165 + 1);
  qword_2592060 = v158 + 27;
  unk_2592068 = v166 | 0x8000000000000000;
  qword_2592058 = (uint64_t)v160;
  if (v158) {
    goto LABEL_314;
  }
LABEL_318:
  strcpy((char *)v160 + v158, "Turn_Around_To_Route_Spoken");
  strcpy(&byte_2592087, "\t_Two_Lanes");
  strcpy((char *)&qword_2592070, "_One_Lane");
  strcpy(&byte_259209F, "\n_Three_Lanes");
  byte_25920B7 = 12;
  byte_25920CF = 11;
  strcpy((char *)&qword_25920B8, "_Four_Lanes");
  byte_25920E7 = 11;
  strcpy((char *)&qword_25920D0, "_Five_Lanes");
  strcpy(&byte_25920FF, "\n_Seven_Lanes");
  strcpy((char *)&qword_25920E8, "_Six_Lanes");
  byte_2592117 = 12;
  byte_259212F = 12;
  strcpy((char *)&qword_2592118, "_Eight_Lanes");
  byte_2592147 = 12;
  strcpy((char *)&qword_2592130, "_Second_Lane");
  byte_259215F = 11;
  strcpy((char *)&qword_2592148, "_Third_Lane");
  byte_2592177 = 19;
  long long v270 = *(_OWORD *)"_Second_Third_Lanes";
  strcpy((char *)&xmmword_2592160, "_Second_Third_Lanes");
  byte_259218F = 4;
  strcpy((char *)&dword_2592178, "Left");
  byte_25921A7 = 5;
  byte_2592194 = 116;
  dword_2592190 = 1751607634;
  byte_2592195 = 0;
  byte_25921BF = 6;
  strcpy((char *)&dword_25921A8, "Middle");
  BYTE1(qword_25921D0) = 0;
  WORD1(qword_25921D0) = 0;
  HIDWORD(qword_25921D0) = 0x10000000;
  strcpy((char *)dword_25921C0, "Left_Second_Lane");
  BYTE1(qword_25921E8) = 0;
  WORD1(qword_25921E8) = 0;
  HIDWORD(qword_25921E8) = 285212672;
  strcpy((char *)&dword_25921D8, "Right_Second_Lan");
  qword_2592200 = 0xF00000000000000;
  strcpy((char *)&dword_25921F0, "Left_Third_Lane");
  qword_2592218 = 0x1000000000000000;
  byte_259220C = 116;
  dword_2592208 = 1751607634;
  dword_2592214 = 1701732684;
  unk_259220D = *(void *)"_Third_Lane";
  v168 = (char *)operator new(0x19uLL);
  qword_2592220 = (uint64_t)v168;
  unk_2592228 = v280;
  *(_DWORD *)v168 = 1952867660;
  strcpy(v168 + 19, "anes");
  *(_OWORD *)(v168 + 4) = v270;
  int v169 = (char *)operator new(0x20uLL);
  qword_2592238 = (uint64_t)v169;
  xmmword_2592240 = v279;
  *(_DWORD *)int v169 = 1751607634;
  v169[4] = 116;
  strcpy(v169 + 20, "anes");
  *(_OWORD *)(v169 + 5) = v270;
  byte_2592267 = 5;
  strcpy((char *)&dword_2592250, "_Stay");
  byte_259227F = 13;
  strcpy((char *)&qword_2592268, "Continue_Sign");
  byte_2592297 = 8;
  strcpy((char *)&qword_2592280, "Continue");
  int v170 = byte_2591757;
  if (byte_2591757 >= 0) {
    size_t v171 = byte_2591757;
  }
  else {
    size_t v171 = qword_2591748;
  }
  unint64_t v172 = v171 + 8;
  if (v171 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v172 >= 0x17)
  {
    uint64_t v174 = (v172 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v172 | 7) != 0x17) {
      uint64_t v174 = v172 | 7;
    }
    uint64_t v175 = v174 + 1;
    v176 = operator new(v174 + 1);
    qword_25922A0 = v171 + 8;
    qword_25922A8 = v175 | 0x8000000000000000;
    qword_2592298 = (uint64_t)v176;
    void *v176 = 0x65756E69746E6F43;
    uint64_t v173 = v176 + 1;
  }
  else
  {
    qword_25922A8 = 0;
    HIBYTE(qword_25922A8) = v171 + 8;
    qword_2592298 = 0x65756E69746E6F43;
    qword_25922A0 = 0;
    uint64_t v173 = &qword_25922A0;
    if (!v171) {
      goto LABEL_332;
    }
  }
  if (v170 >= 0) {
    int v177 = &qword_2591740;
  }
  else {
    int v177 = (uint64_t *)qword_2591740;
  }
  memmove(v173, v177, v171);
LABEL_332:
  *((unsigned char *)v173 + v171) = 0;
  int v178 = SHIBYTE(qword_25917B0);
  if (qword_25917B0 >= 0) {
    size_t v179 = HIBYTE(qword_25917B0);
  }
  else {
    size_t v179 = unk_25917A8;
  }
  unint64_t v180 = v179 + 8;
  if (v179 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v180 >= 0x17)
  {
    uint64_t v182 = (v180 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v180 | 7) != 0x17) {
      uint64_t v182 = v180 | 7;
    }
    uint64_t v183 = v182 + 1;
    v184 = operator new(v182 + 1);
    qword_25922B8 = v179 + 8;
    qword_25922C0 = v183 | 0x8000000000000000;
    qword_25922B0 = (uint64_t)v184;
    void *v184 = qword_2592280;
    uint64_t v181 = v184 + 1;
  }
  else
  {
    qword_25922C0 = 0;
    HIBYTE(qword_25922C0) = v179 + 8;
    qword_25922B0 = qword_2592280;
    qword_25922B8 = 0;
    uint64_t v181 = &qword_25922B8;
    if (!v179) {
      goto LABEL_346;
    }
  }
  if (v178 >= 0) {
    v185 = &qword_25917A0;
  }
  else {
    v185 = (uint64_t *)qword_25917A0;
  }
  memmove(v181, v185, v179);
LABEL_346:
  *((unsigned char *)v181 + v179) = 0;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 83;
  HIBYTE(v284) = 2;
  strcpy((char *)&v283, "SW");
  HIBYTE(v286) = 1;
  LOWORD(v285[0]) = 87;
  HIBYTE(v288) = 2;
  strcpy((char *)&v287, "NW");
  HIBYTE(v290) = 1;
  LOWORD(v289[0]) = 78;
  HIBYTE(v292) = 2;
  strcpy((char *)&v291, "NE");
  HIBYTE(v294) = 1;
  LOWORD(v293) = 69;
  HIBYTE(v296) = 2;
  strcpy((char *)&__p, "SE");
  sub_4BDC0C(qword_25922C8, (uint64_t)&__dst, 8uLL);
  if (SHIBYTE(v296) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v294) & 0x80000000) == 0)
    {
LABEL_348:
      if ((SHIBYTE(v292) & 0x80000000) == 0) {
        goto LABEL_349;
      }
      goto LABEL_383;
    }
  }
  else if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
    goto LABEL_348;
  }
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_349:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_350;
    }
    goto LABEL_384;
  }
LABEL_383:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_350:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_351;
    }
    goto LABEL_385;
  }
LABEL_384:
  operator delete(v289[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_351:
    if ((SHIBYTE(v286) & 0x80000000) == 0) {
      goto LABEL_352;
    }
    goto LABEL_386;
  }
LABEL_385:
  operator delete((void *)v287);
  if ((SHIBYTE(v286) & 0x80000000) == 0)
  {
LABEL_352:
    if ((SHIBYTE(v284) & 0x80000000) == 0) {
      goto LABEL_353;
    }
LABEL_387:
    operator delete((void *)v283);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_354;
    }
    goto LABEL_388;
  }
LABEL_386:
  operator delete(v285[0]);
  if (SHIBYTE(v284) < 0) {
    goto LABEL_387;
  }
LABEL_353:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_354;
  }
LABEL_388:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_354:
  byte_25922F7 = 13;
  strcpy((char *)&qword_25922E0, "{instruction}");
  byte_259230F = 20;
  strcpy(byte_25922F8, "{primaryInstruction}");
  strcpy((char *)&xmmword_2592310, "{secondaryInstruction}");
  HIBYTE(word_2592326) = 22;
  qword_2592328 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2592330 = v278;
  strcpy((char *)qword_2592328, "{andSecondaryInstruction}");
  qword_2592340 = (uint64_t)operator new(0x20uLL);
  unk_2592348 = v279;
  strcpy((char *)qword_2592340, "{toSecondaryInstruction}");
  byte_259236F = 21;
  strcpy(byte_2592358, "{continueInstruction}");
  qword_2592370 = (uint64_t)operator new(0x20uLL);
  unk_2592378 = v276;
  strcpy((char *)qword_2592370, "{thenSecondaryInstruction}");
  byte_259239F = 14;
  strcpy((char *)&qword_2592388, "{instruction1}");
  byte_25923B7 = 14;
  strcpy((char *)&qword_25923A0, "{instruction2}");
  strcpy(&byte_25923CF, "\n{nextDistance}");
  strcpy((char *)&qword_25923B8, "{distance}");
  byte_25923E7 = 14;
  byte_25923FF = 16;
  strcpy(byte_25923E8, "{valid_distance}");
  strcpy(&byte_2592417, "\n{valid_distance}");
  strcpy((char *)&qword_2592400, "{distance}");
  byte_259242F = 16;
  byte_2592447 = 15;
  strcpy((char *)&qword_2592430, "{ClimbDistance}");
  byte_259245F = 17;
  strcpy(byte_2592448, "{DescentDistance}");
  byte_2592477 = 13;
  strcpy((char *)&qword_2592460, "{nonBrkSpace}");
  byte_259248F = 9;
  strcpy((char *)&qword_2592478, "{newLine}");
  byte_25924A7 = 6;
  word_2592494 = -24382;
  dword_2592490 = -1211981630;
  byte_2592496 = 0;
  byte_25924BF = 2;
  word_25924A8 = -24382;
  byte_25924AA = 0;
  byte_25924D7 = 1;
  word_25924C0 = 10;
  byte_25924EF = 1;
  word_25924D8 = 32;
  byte_2592507 = 2;
  strcpy((char *)&word_25924F0, "\n\n");
  strcpy(&byte_259251F, "\t{TowardShield1}");
  strcpy((char *)&qword_2592508, "{Shield1}");
  byte_2592537 = 15;
  strcpy(&byte_259254F, "\t{TowardShield2}");
  strcpy((char *)&qword_2592538, "{Shield2}");
  byte_2592567 = 15;
  byte_259257F = 12;
  strcpy((char *)&qword_2592568, "{Direction1}");
  byte_2592597 = 12;
  strcpy((char *)&qword_2592580, "{Direction2}");
  byte_25925AF = 18;
  strcpy((char *)&xmmword_2592598, "{TowardDirection1}");
  byte_25925C7 = 18;
  strcpy((char *)&xmmword_25925B0, "{TowardDirection2}");
  byte_25925DF = 7;
  strcpy((char *)&dword_25925C8, "{Icon1}");
  byte_25925F7 = 7;
  strcpy((char *)&dword_25925E0, "{Icon2}");
  byte_25925F8[23] = 14;
  strcpy(byte_25925F8, "{Intersection}");
  byte_2592627 = 6;
  strcpy((char *)&xmmword_2592610, "{Road}");
  byte_259263F = 7;
  strcpy((char *)&dword_2592628, "{Road1}");
  byte_2592657 = 7;
  strcpy((char *)&xmmword_2592640, "{Road2}");
  strcpy(&byte_259266F, "\n{Freeway}");
  strcpy((char *)&qword_2592658, "{Elevator}");
  strcpy(&byte_2592687, "\t{Ferry}");
  byte_259269F = 7;
  byte_25926B7 = 13;
  strcpy((char *)&xmmword_25926A0, "{ShuttleName}");
  byte_25926CF = 11;
  strcpy((char *)&xmmword_25926B8, "{Signpost1}");
  byte_25926E7 = 11;
  strcpy((char *)&xmmword_25926D0, "{Signpost2}");
  byte_25926FF = 12;
  strcpy((char *)&xmmword_25926E8, "{ExitNumber}");
  strcpy(&byte_2592717, "\t{Name}");
  strcpy((char *)&xmmword_2592700, "{Address}");
  byte_259272F = 6;
  byte_2592747 = 11;
  strcpy((char *)&xmmword_2592730, "{PlaceName}");
  byte_259275F = 14;
  strcpy((char *)&xmmword_2592748, "{ElevatorName}");
  byte_2592777 = 15;
  strcpy((char *)&xmmword_2592760, "{EscalatorName}");
  byte_259278F = 12;
  strcpy((char *)&xmmword_2592778, "{StairsName}");
  strcpy(&byte_25927A7, "\n{BridgeName}");
  strcpy((char *)&xmmword_2592790, "{RampName}");
  byte_25927BF = 12;
  byte_25927D7 = 12;
  strcpy((char *)&xmmword_25927C0, "{TunnelName}");
  byte_25927EF = 13;
  strcpy((char *)&xmmword_25927D8, "{CustomLabel}");
  std::string __dst = *(std::string *)byte_25925F8;
  long long v283 = xmmword_2592610;
  uint64_t v284 = unk_2592620;
  *(_OWORD *)uint64_t v285 = *(_OWORD *)&dword_2592628;
  uint64_t v286 = unk_2592638;
  long long v287 = xmmword_2592640;
  uint64_t v288 = unk_2592650;
  *(_OWORD *)long long v289 = *(_OWORD *)&qword_2592658;
  uint64_t v290 = unk_2592668;
  uint64_t v292 = unk_2592680;
  long long v291 = xmmword_2592670;
  long long v293 = *(_OWORD *)&dword_2592688;
  uint64_t v294 = unk_2592698;
  uint64_t v296 = unk_25926B0;
  long long __p = xmmword_25926A0;
  long long v297 = xmmword_25926B8;
  uint64_t v298 = unk_25926C8;
  uint64_t v300 = unk_25926E0;
  long long v299 = xmmword_25926D0;
  long long v301 = xmmword_25926E8;
  long long v303 = xmmword_2592700;
  uint64_t v302 = unk_25926F8;
  uint64_t v304 = unk_2592710;
  long long v305 = xmmword_2592718;
  long long v307 = xmmword_2592730;
  uint64_t v306 = unk_2592728;
  uint64_t v308 = unk_2592740;
  long long v309 = xmmword_2592748;
  long long v311 = xmmword_2592760;
  uint64_t v310 = unk_2592758;
  uint64_t v312 = unk_2592770;
  long long v313 = xmmword_2592778;
  long long v315 = xmmword_2592790;
  uint64_t v314 = unk_2592788;
  uint64_t v316 = unk_25927A0;
  long long v317 = xmmword_25927A8;
  long long v319 = xmmword_25927C0;
  uint64_t v318 = unk_25927B8;
  uint64_t v320 = unk_25927D0;
  uint64_t v322 = unk_25927E8;
  long long v321 = xmmword_25927D8;
  sub_4BDC0C(qword_25927F0, (uint64_t)&__dst, 0x15uLL);
  if (SHIBYTE(v322) < 0)
  {
    operator delete((void *)v321);
    if ((SHIBYTE(v320) & 0x80000000) == 0)
    {
LABEL_356:
      if ((SHIBYTE(v318) & 0x80000000) == 0) {
        goto LABEL_357;
      }
      goto LABEL_391;
    }
  }
  else if ((SHIBYTE(v320) & 0x80000000) == 0)
  {
    goto LABEL_356;
  }
  operator delete((void *)v319);
  if ((SHIBYTE(v318) & 0x80000000) == 0)
  {
LABEL_357:
    if ((SHIBYTE(v316) & 0x80000000) == 0) {
      goto LABEL_358;
    }
    goto LABEL_392;
  }
LABEL_391:
  operator delete((void *)v317);
  if ((SHIBYTE(v316) & 0x80000000) == 0)
  {
LABEL_358:
    if ((SHIBYTE(v314) & 0x80000000) == 0) {
      goto LABEL_359;
    }
    goto LABEL_393;
  }
LABEL_392:
  operator delete((void *)v315);
  if ((SHIBYTE(v314) & 0x80000000) == 0)
  {
LABEL_359:
    if ((SHIBYTE(v312) & 0x80000000) == 0) {
      goto LABEL_360;
    }
    goto LABEL_394;
  }
LABEL_393:
  operator delete((void *)v313);
  if ((SHIBYTE(v312) & 0x80000000) == 0)
  {
LABEL_360:
    if ((SHIBYTE(v310) & 0x80000000) == 0) {
      goto LABEL_361;
    }
    goto LABEL_395;
  }
LABEL_394:
  operator delete((void *)v311);
  if ((SHIBYTE(v310) & 0x80000000) == 0)
  {
LABEL_361:
    if ((SHIBYTE(v308) & 0x80000000) == 0) {
      goto LABEL_362;
    }
    goto LABEL_396;
  }
LABEL_395:
  operator delete((void *)v309);
  if ((SHIBYTE(v308) & 0x80000000) == 0)
  {
LABEL_362:
    if ((SHIBYTE(v306) & 0x80000000) == 0) {
      goto LABEL_363;
    }
    goto LABEL_397;
  }
LABEL_396:
  operator delete((void *)v307);
  if ((SHIBYTE(v306) & 0x80000000) == 0)
  {
LABEL_363:
    if ((SHIBYTE(v304) & 0x80000000) == 0) {
      goto LABEL_364;
    }
    goto LABEL_398;
  }
LABEL_397:
  operator delete((void *)v305);
  if ((SHIBYTE(v304) & 0x80000000) == 0)
  {
LABEL_364:
    if ((SHIBYTE(v302) & 0x80000000) == 0) {
      goto LABEL_365;
    }
    goto LABEL_399;
  }
LABEL_398:
  operator delete((void *)v303);
  if ((SHIBYTE(v302) & 0x80000000) == 0)
  {
LABEL_365:
    if ((SHIBYTE(v300) & 0x80000000) == 0) {
      goto LABEL_366;
    }
    goto LABEL_400;
  }
LABEL_399:
  operator delete((void *)v301);
  if ((SHIBYTE(v300) & 0x80000000) == 0)
  {
LABEL_366:
    if ((SHIBYTE(v298) & 0x80000000) == 0) {
      goto LABEL_367;
    }
    goto LABEL_401;
  }
LABEL_400:
  operator delete((void *)v299);
  if ((SHIBYTE(v298) & 0x80000000) == 0)
  {
LABEL_367:
    if ((SHIBYTE(v296) & 0x80000000) == 0) {
      goto LABEL_368;
    }
    goto LABEL_402;
  }
LABEL_401:
  operator delete((void *)v297);
  if ((SHIBYTE(v296) & 0x80000000) == 0)
  {
LABEL_368:
    if ((SHIBYTE(v294) & 0x80000000) == 0) {
      goto LABEL_369;
    }
    goto LABEL_403;
  }
LABEL_402:
  operator delete((void *)__p);
  if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
LABEL_369:
    if ((SHIBYTE(v292) & 0x80000000) == 0) {
      goto LABEL_370;
    }
    goto LABEL_404;
  }
LABEL_403:
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_370:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_371;
    }
    goto LABEL_405;
  }
LABEL_404:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_371:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_372;
    }
    goto LABEL_406;
  }
LABEL_405:
  operator delete(v289[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_372:
    if ((SHIBYTE(v286) & 0x80000000) == 0) {
      goto LABEL_373;
    }
    goto LABEL_407;
  }
LABEL_406:
  operator delete((void *)v287);
  if ((SHIBYTE(v286) & 0x80000000) == 0)
  {
LABEL_373:
    if ((SHIBYTE(v284) & 0x80000000) == 0) {
      goto LABEL_374;
    }
LABEL_408:
    operator delete((void *)v283);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_375;
    }
    goto LABEL_409;
  }
LABEL_407:
  operator delete(v285[0]);
  if (SHIBYTE(v284) < 0) {
    goto LABEL_408;
  }
LABEL_374:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_375;
  }
LABEL_409:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_375:
  qword_2592808 = (uint64_t)operator new(0x19uLL);
  unk_2592810 = v280;
  strcpy((char *)qword_2592808, "From_User_Location_List");
  byte_2592837 = 20;
  strcpy(byte_2592820, "Origin_Waypoint_List");
  qword_2592838 = (uint64_t)operator new(0x20uLL);
  unk_2592840 = v276;
  strcpy((char *)qword_2592838, "Intermediate_Waypoint_List");
  unk_2592850 = operator new(0x20uLL);
  unk_2592858 = v278;
  strcpy(unk_2592850, "Destination_Waypoint_List");
  byte_259287F = 15;
  strcpy(byte_2592868, "{toDestination}");
  byte_2592897 = 13;
  strcpy((char *)&xmmword_2592880, "{Destination}");
  byte_25928AF = 7;
  strcpy(byte_2592898, "To_Home");
  byte_25928C7 = 14;
  strcpy(byte_25928B0, "To_ContactHome");
  byte_25928DF = 7;
  strcpy(byte_25928C8, "To_Work");
  byte_25928F7 = 14;
  strcpy(byte_25928E0, "To_ContactWork");
  strcpy(&byte_259290F, "\nTo_Business");
  strcpy(byte_25928F8, "To_Address");
  byte_2592927 = 11;
  byte_259293F = 16;
  strcpy(byte_2592928, "To_Other_Contact");
  strcpy(&byte_2592957, "\tTo_ContactSchool");
  strcpy(byte_2592940, "To_School");
  byte_259296F = 16;
  byte_2592987 = 17;
  strcpy(algn_2592970, "To_PersonLocation");
  qword_2592988 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2592990 = v277;
  strcpy((char *)qword_2592988, "To_ContactCustomLabelAddress");
  byte_25929B7 = 7;
  strcpy((char *)&dword_25929A0, "At_Home");
  byte_25929CF = 14;
  strcpy((char *)&qword_25929B8, "At_ContactHome");
  byte_25929E7 = 7;
  strcpy((char *)&dword_25929D0, "At_Work");
  byte_25929FF = 14;
  strcpy((char *)&qword_25929E8, "At_ContactWork");
  strcpy(&byte_2592A17, "\nAt_Business");
  strcpy((char *)&qword_2592A00, "At_Address");
  byte_2592A2F = 11;
  byte_2592A47 = 16;
  strcpy(algn_2592A30, "At_Other_Contact");
  byte_2592A5F = 4;
  strcpy((char *)&dword_2592A48, "Home");
  byte_2592A77 = 11;
  strcpy((char *)&qword_2592A60 + 7, "Home");
  qword_2592A60 = *(void *)&v264[16];
  byte_2592A8F = 4;
  strcpy((char *)&dword_2592A78, "Work");
  byte_2592AA7 = 11;
  strcpy((char *)&qword_2592A90 + 7, "Work");
  qword_2592A90 = *(void *)v264;
  byte_2592ABF = 7;
  strcpy((char *)&dword_2592AA8, "Address");
  byte_2592AD7 = 8;
  strcpy((char *)&qword_2592AC0, "Business");
  byte_2592AEF = 13;
  qword_2592AD8 = *(void *)&v264[48];
  *(uint64_t *)((char *)&qword_2592AD8 + 5) = *(void *)&v264[32];
  byte_2592AE5 = 0;
  byte_2592B07 = 6;
  strcpy((char *)&dword_2592AF0, "School");
  byte_2592B1F = 13;
  strcpy((char *)&qword_2592B08, "ContactSchool");
  byte_2592B37 = 14;
  strcpy((char *)&qword_2592B20, "PersonLocation");
  qword_2592B38 = (uint64_t)operator new(0x20uLL);
  xmmword_2592B40 = v278;
  strcpy((char *)qword_2592B38, "ContactCustomLabelAddress");
  if (byte_2592897 < 0)
  {
    sub_4200(&xmmword_2592B50, (void *)xmmword_2592880, *((unint64_t *)&xmmword_2592880 + 1));
  }
  else
  {
    xmmword_2592B50 = xmmword_2592880;
    qword_2592B60 = unk_2592890;
  }
  byte_2592B7F = 16;
  strcpy((char *)&xmmword_2592B68, "{PrevExitNumber}");
  byte_2592B97 = 10;
  strcpy((char *)&qword_2592B80, "{PrevRoad}");
  qword_2592B98 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2592BA0 = v279;
  strcpy((char *)qword_2592B98, "{RouteTotalExpectedTime}");
  byte_2592BC7 = 18;
  strcpy(&algn_2592BA0[16], "{ChargePercentage}");
  qword_2592BC8 = (uint64_t)operator new(0x20uLL);
  unk_2592BD0 = v273;
  strcpy((char *)qword_2592BC8, "{RemainingChargePercentage}");
  byte_2592BF7 = 16;
  strcpy(byte_2592BE0, "{ChargeDuration}");
  byte_2592C0F = 15;
  strcpy((char *)&qword_2592BF8, "{ConnectorType}");
  byte_2592C27 = 19;
  strcpy(byte_2592C10, "{ChargeStationName}");
  byte_2592C3F = 7;
  strcpy((char *)&dword_2592C28, "{Power}");
  byte_2592C57 = 13;
  strcpy((char *)&qword_2592C40, "{VehicleName}");
  byte_2592C6F = 18;
  strcpy((char *)&xmmword_2592C58, "{AreaIncidentName}");
  byte_2592C87 = 14;
  strcpy((char *)&qword_2592C70, "{AreaIncident}");
  byte_2592C9F = 16;
  strcpy((char *)&xmmword_2592C88, "{AffectedRegion}");
  byte_2592CB7 = 21;
  strcpy(byte_2592CA0, "{AreaIncidentWeblink}");
  byte_2592CCF = 20;
  strcpy((char *)&xmmword_2592CB8, "{AreaIncidentAgency}");
  byte_2592CE7 = 11;
  strcpy((char *)&qword_2592CD0, "{IssueTime}");
  byte_2592CFF = 12;
  strcpy((char *)&qword_2592CE8, "{UpdateTime}");
  byte_2592D17 = 11;
  strcpy((char *)&qword_2592D00, "{IssueDate}");
  byte_2592D2F = 12;
  strcpy((char *)&qword_2592D18, "{UpdateDate}");
  qword_2592D30 = (uint64_t)operator new(0x20uLL);
  unk_2592D38 = v279;
  strcpy((char *)qword_2592D30, "{AreaIncidentDataSource}");
  byte_2592D5F = 13;
  strcpy((char *)&qword_2592D48, "{AreaHectare}");
  byte_2592D77 = 10;
  strcpy((char *)&qword_2592D60, "{AreaAcre}");
  qword_2592D78 = (uint64_t)operator new(0x20uLL);
  unk_2592D80 = v275;
  strcpy((char *)qword_2592D78, "{WildfirePercentageContained}");
  qword_2592D90 = (uint64_t)operator new(0x28uLL);
  unk_2592D98 = v268[2];
  strcpy((char *)qword_2592D90, "{WildfireExpectedContainmentDate}");
  qword_2592DA8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2592DB0 = v277;
  strcpy((char *)qword_2592DA8, "{ServerRecommendedRouteName}");
  qword_2592DC0 = (uint64_t)operator new(0x20uLL);
  unk_2592DC8 = v277;
  strcpy((char *)qword_2592DC0, "{ServerNonRecommendedRoute1}");
  qword_2592DD8 = (uint64_t)operator new(0x20uLL);
  unk_2592DE0 = v277;
  strcpy((char *)qword_2592DD8, "{ServerNonRecommendedRoute2}");
  byte_2592E07 = 12;
  strcpy((char *)&qword_2592DF0, "{ClientDest}");
  byte_2592E1F = 6;
  strcpy((char *)&dword_2592E08, "{Name}");
  qword_2592E20 = (uint64_t)operator new(0x20uLL);
  unk_2592E28 = v268[1];
  strcpy((char *)qword_2592E20, "ProactiveAlert_FasterRouteTitle");
  qword_2592E38 = (uint64_t)operator new(0x20uLL);
  unk_2592E40 = v276;
  strcpy((char *)qword_2592E38, "ProactiveAlert_RoadClosure");
  qword_2592E50 = (uint64_t)operator new(0x30uLL);
  unk_2592E58 = v271;
  strcpy((char *)qword_2592E50, "ProactiveAlert_UnusuallyHeavyTrafficOnTwo");
  qword_2592E68 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2592E70 = v274;
  strcpy((char *)qword_2592E68, "ProactiveAlert_FasterRouteTitle_to_Home");
  qword_2592E80 = (uint64_t)operator new(0x28uLL);
  unk_2592E88 = v274;
  strcpy((char *)qword_2592E80, "ProactiveAlert_FasterRouteTitle_to_Work");
  qword_2592E98 = (uint64_t)operator new(0x28uLL);
  unk_2592EA0 = v274;
  strcpy((char *)qword_2592E98, "ProactiveAlert_FasterRouteTitle_to_Name");
  qword_2592EB0 = (uint64_t)operator new(0x30uLL);
  unk_2592EB8 = xmmword_20B93B0;
  strcpy((char *)qword_2592EB0, "ProactiveAlert_FasterRouteTitle_to_StreetName");
  byte_2592EDF = 17;
  strcpy(byte_2592EC8, "Proactive_Driving");
  strcpy(&byte_2592EF7, "\n{RouteName}");
  strcpy((char *)&qword_2592EE0, "_RouteName");
  byte_2592F0F = 11;
  qword_2592F10 = (uint64_t)operator new(0x28uLL);
  unk_2592F18 = v268[2];
  strcpy((char *)qword_2592F10, "Pass_Traffic_Light_Spoken_Primary");
  qword_2592F28 = (uint64_t)operator new(0x20uLL);
  unk_2592F30 = v275;
  strcpy((char *)qword_2592F28, "Pass_Stop_Sign_Spoken_Primary");
  unk_2592F40 = operator new(0x20uLL);
  unk_2592F48 = v268[0];
  strcpy(unk_2592F40, "Pass_Roundabout_Spoken_Primary");
  strcpy(&byte_2592F6F, "\nBannerBody");
  strcpy(byte_2592F58, "BannerHead");
  strcpy(&byte_2592F87, "\nBannerDescription");
  byte_2592F9F = 17;
  strcpy(&byte_2592FB7, "\n_Incident");
  strcpy((char *)&qword_2592FA0, "VoiceAlert");
  strcpy(&byte_2592FCF, "\t_Area_Incident");
  byte_2592FE7 = 14;
  byte_2592FFF = 15;
  strcpy((char *)&qword_2592FE8, "_Area_Incidents");
  strcpy(&byte_2593017, "\t_Crash");
  strcpy((char *)&qword_2593000, "_Accident");
  byte_259302F = 6;
  byte_2593047 = 16;
  strcpy((char *)&xmmword_2593030, "_Congestion_Zone");
  strcpy(&byte_259305F, "\n_Environmental_Zone");
  strcpy((char *)&qword_2593048, "_Toll_Zone");
  byte_2593077 = 19;
  BYTE1(qword_2593088) = 116;
  WORD1(qword_2593088) = 0;
  HIDWORD(qword_2593088) = 301989888;
  strcpy(byte_2593090, "_Construction");
  strcpy((char *)&qword_2593078, "_Incident_Accide");
  byte_25930A7 = 13;
  byte_25930BF = 7;
  strcpy((char *)&dword_25930A8, "_Hazard");
  byte_25930D7 = 12;
  strcpy((char *)&qword_25930C0, "_LaneClosure");
  byte_25930EF = 12;
  strcpy((char *)&qword_25930D8, "_LaneTrailer");
  qmemcpy(&byte_2593107, "\t_LaneTrailer", 13);
  strcpy((char *)&qword_25930F0, "_Shoulder");
  qword_2593118 = 0x1500007200000000;
  *(void *)algn_2593114 = *(void *)"_Shoulder";
  strcpy((char *)&xmmword_2593120, "_Causing_Traffic_Delay");
  HIBYTE(word_2593136) = 22;
  byte_259314F = 6;
  strcpy((char *)&dword_2593138, "_Timed");
  byte_2593167 = 12;
  strcpy((char *)&qword_2593150, "_HasDistance");
  byte_259317F = 8;
  strcpy((char *)&qword_2593168, "_Closure");
  strcpy(&byte_2593197, "\n_BadRoad");
  strcpy((char *)&qword_2593180, "_NoReroute");
  byte_25931AF = 8;
  byte_25931C7 = 12;
  strcpy((char *)&qword_25931B0, "_TollTrailer");
  byte_25931DF = 12;
  strcpy((char *)&qword_25931C8, "_BestTrailer");
  byte_25931F7 = 8;
  strcpy((char *)&qword_25931E0, "_Trailer");
  byte_259320F = 18;
  strcpy((char *)&xmmword_25931F8, "_Secondary_Trailer");
  byte_2593227 = 8;
  strcpy((char *)&qword_2593210, "_Savings");
  byte_259323F = 8;
  strcpy((char *)&qword_2593228, "_AltRoad");
  byte_2593257 = 6;
  strcpy((char *)&dword_2593240, "_Named");
  byte_259326F = 6;
  strcpy((char *)&dword_2593258, "_NAMED");
  byte_2593287 = 22;
  strcpy((char *)&xmmword_2593270, "_Named_Suggested_Route");
  qword_25932A0 = 0x1000000000000000;
  xmmword_2593290 = xmmword_20E81D0;
  byte_25932BF = 11;
  strcpy((char *)&qword_25932A8, "_Speed_Trap");
  byte_25932D7 = 4;
  strcpy((char *)&dword_25932C0, "_UGI");
  byte_25932EF = 12;
  strcpy((char *)&qword_25932D8, "_Safer_Route");
  qword_25932F0 = (uint64_t)operator new(0x20uLL);
  unk_25932F8 = v268[1];
  strcpy((char *)qword_25932F0, "BlockedRouteByBlockingIncident_");
  qword_2593308 = (uint64_t)operator new(0x28uLL);
  long long v270 = xmmword_20B9280;
  *(_OWORD *)algn_2593310 = xmmword_20B9280;
  strcpy((char *)qword_2593308, "BlockedRouteByManeuverRestriction_");
  qword_2593320 = (uint64_t)operator new(0x20uLL);
  unk_2593328 = v268[0];
  strcpy((char *)qword_2593320, "BlockedRouteByTimeRestriction_");
  qword_2593338 = (uint64_t)operator new(0x28uLL);
  unk_2593340 = xmmword_20B8FD0;
  strcpy((char *)qword_2593338, "SuggestRouteToAvoidBlockingIncident_");
  qword_2593350 = (uint64_t)operator new(0x30uLL);
  unk_2593358 = xmmword_20B9380;
  strcpy((char *)qword_2593350, "SuggestRouteToAvoidBlockingManeuverRestriction_");
  qword_2593368 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_2593370 = xmmword_20B93E0;
  strcpy((char *)qword_2593368, "SuggestRouteToAvoidBlockingTimeRestriction_");
  byte_2593397 = 1;
  word_2593380 = 95;
  strcpy((char *)&xmmword_2593398, "IncidentsCausingDelay_");
  byte_25933AF = 22;
  qword_25933B0 = (uint64_t)operator new(0x19uLL);
  unk_25933B8 = v280;
  strcpy((char *)qword_25933B0, "NonVotableRoadIncident_");
  byte_25933DF = 20;
  strcpy(byte_25933C8, "VotableRoadIncident_");
  byte_25933F7 = 13;
  strcpy((char *)&qword_25933E0, "AreaIncident_");
  byte_259340F = 15;
  strcpy((char *)&qword_25933F8, "CongestionZone_");
  qword_2593410 = (uint64_t)operator new(0x20uLL);
  unk_2593418 = v279;
  strcpy((char *)qword_2593410, "EVModifiedChargingStops_");
  byte_259343F = 13;
  strcpy((char *)&qword_2593428, "EVDisconnect_");
  byte_2593457 = 12;
  strcpy((char *)&qword_2593440, "EVReconnect_");
  qword_2593458 = (uint64_t)operator new(0x20uLL);
  unk_2593460 = v277;
  strcpy((char *)qword_2593458, "EVOfflineToOnlineTransition_");
  byte_2593487 = 13;
  strcpy((char *)&qword_2593470, "EVOfflineSAR_");
  byte_259349F = 21;
  strcpy((char *)&xmmword_2593488, "EVTowingNotSupported_");
  byte_25934B7 = 18;
  strcpy(byte_25934A0, "EVInfeasibleRoute_");
  qword_25934B8 = (uint64_t)operator new(0x38uLL);
  unk_25934C0 = xmmword_20B8DF0;
  strcpy((char *)qword_25934B8, "SuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25934D0 = (uint64_t)operator new(0x40uLL);
  unk_25934D8 = xmmword_20B98C0;
  strcpy((char *)qword_25934D0, "LCSuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25934E8 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25934F0 = v272;
  strcpy((char *)qword_25934E8, "SuggestRouteAddingStopsForEVInfeasibleRoute_");
  qmemcpy(v268, "InfeasibleRoute_ngStopsForEVInfeSuggestRouteAddi", sizeof(v268));
  qword_2593500 = (uint64_t)operator new(0x30uLL);
  *(_WORD *)&v264[50] = 0;
  *(_DWORD *)&v264[52] = 0;
  *(void *)&v264[56] = 0x8000000000000030;
  unk_2593508 = xmmword_20B9A80;
  strcpy((char *)qword_2593500, "LCSuggestRouteAddingStopsForEVInfeasibleRoute_");
  strcpy(v264, "InfeasibleRoute_dingStopsForEVInLCSuggestRouteAd.");
  qword_2593518 = (uint64_t)operator new(0x30uLL);
  unk_2593520 = v271;
  strcpy((char *)qword_2593518, "SuggestRouteAddingStopsToIncreaseDestSoc_");
  v186 = operator new(0x30uLL);
  qword_2593530 = (uint64_t)v186;
  unk_2593538 = v272;
  _OWORD *v186 = v268[2];
  v186[1] = v268[1];
  *(_OWORD *)((char *)v186 + 28) = v268[0];
  *((unsigned char *)v186 + 44) = 0;
  qword_2593548 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2593550 = v270;
  strcpy((char *)qword_2593548, "SuggestDetourWithHigherArrivalSOC_");
  uint64_t v187 = operator new(0x30uLL);
  qword_2593560 = (uint64_t)v187;
  unk_2593568 = *(_OWORD *)&v264[48];
  _OWORD *v187 = *(_OWORD *)&v264[32];
  v187[1] = *(_OWORD *)&v264[16];
  *(_OWORD *)((char *)v187 + 30) = *(_OWORD *)v264;
  *((unsigned char *)v187 + 46) = 0;
  qword_2593578 = (uint64_t)operator new(0x28uLL);
  unk_2593580 = v274;
  strcpy((char *)qword_2593578, "SuggestRouteToDestForEVInfeasibleRoute_");
  qword_2593590 = (uint64_t)operator new(0x28uLL);
  unk_2593598 = v267;
  strcpy((char *)qword_2593590, "SuggestRouteRemovingStopsFromEVRoute_");
  qword_25935A8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25935B0 = v279;
  strcpy((char *)qword_25935A8, "OfflineToOnlineNewRoute_");
  qword_25935C0 = (uint64_t)operator new(0x40uLL);
  unk_25935C8 = xmmword_20B98C0;
  strcpy((char *)qword_25935C0, "SuggestDetourWithHigherArrivalSOCForInfeasibleUserRoute_");
  byte_25935EF = 20;
  strcpy(byte_25935D8, "LPR_OFFLINE_REROUTE_");
  byte_2593607 = 16;
  strcpy((char *)&xmmword_25935F0, "LPR_OFFLINE_SAR_");
  byte_259361F = 20;
  strcpy(byte_2593608, "LPR_OFFLINE_REROUTE_");
  byte_2593637 = 16;
  strcpy((char *)&xmmword_2593620, "LPR_OFFLINE_SAR_");
  byte_259364F = 19;
  strcpy(byte_2593638, "SuggestFasterRoute_");
  qword_2593650 = (char *)operator new(0x20uLL);
  xmmword_2593658 = v278;
  strcpy(qword_2593650, "AreaIncidentSaferReroute_");
  byte_259367F = 12;
  strcpy((char *)&qword_2593668, "_Remove_Stop");
  byte_2593697 = 13;
  strcpy((char *)&qword_2593680, "_Remove_Stops");
  strcpy(&byte_25936AF, "\t_Add_Stops");
  strcpy((char *)&qword_2593698, "_Add_Stop");
  strcpy(&byte_25936C7, "\n_Change_Route");
  byte_25936DF = 13;
  byte_25936F7 = 15;
  strcpy((char *)&qword_25936E0, "_Different_Stop");
  byte_259370F = 16;
  strcpy((char *)&xmmword_25936F8, "_Different_Stops");
  byte_2593727 = 15;
  strcpy((char *)&qword_2593710, "_EV_Remove_Stop");
  byte_259373F = 16;
  strcpy((char *)&xmmword_2593728, "_EV_Remove_Stops");
  byte_2593757 = 12;
  strcpy((char *)&qword_2593740, "_EV_Add_Stop");
  byte_259376F = 13;
  strcpy((char *)&qword_2593758, "_EV_Add_Stops");
  byte_2593787 = 15;
  strcpy((char *)&qword_2593770, "_EV_Low_Battery");
  byte_259379F = 14;
  strcpy((char *)&qword_2593788, "_EV_Infeasible");
  byte_25937B7 = 15;
  strcpy((char *)&qword_25937A0, "_EV_Last_Chance");
  qword_25937B8 = (uint64_t)operator new(0x20uLL);
  unk_25937C0 = v279;
  strcpy((char *)qword_25937B8, "_EV_Low_Battery_Add_Stop");
  uint64_t v188 = qword_25936B8;
  qword_25937D0 = (uint64_t)operator new(0x20uLL);
  unk_25937D8 = v278;
  strcpy((char *)qword_25937D0, "_EV_Low_Battery_Add_Stops");
  qword_25937E8 = (uint64_t)operator new(0x19uLL);
  *(_OWORD *)algn_25937F0 = v280;
  strcpy((char *)qword_25937E8, "_EV_Infeasible_Add_Stop");
  int v189 = byte_25936C7;
  if (byte_25936C7 >= 0) {
    size_t v190 = byte_25936C7;
  }
  else {
    size_t v190 = v188;
  }
  unint64_t v191 = v190 + 14;
  if (v190 + 14 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v191 >= 0x17)
  {
    uint64_t v194 = (v191 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v191 | 7) != 0x17) {
      uint64_t v194 = v191 | 7;
    }
    uint64_t v195 = v194 + 1;
    uint64_t v196 = (char *)operator new(v194 + 1);
    qword_2593808 = v190 + 14;
    unk_2593810 = v195 | 0x8000000000000000;
    qword_2593800 = (uint64_t)v196;
    qmemcpy(v196, "_EV_Infeasible", 14);
    char v192 = v196 + 14;
  }
  else
  {
    BYTE1(qword_2593808) = 0;
    WORD1(qword_2593808) = 0;
    HIDWORD(qword_2593808) = 0;
    unk_2593810 = 0;
    byte_2593817 = v190 + 14;
    strcpy((char *)&qword_2593800, "_EV_Infe");
    char v192 = (char *)&qword_2593808 + 6;
    if (!v190)
    {
      char v193 = 1;
      goto LABEL_425;
    }
  }
  if (v189 >= 0) {
    uint64_t v197 = (uint64_t)&qword_25936B0;
  }
  else {
    uint64_t v197 = 0x6F74535F6464415FLL;
  }
  memmove(v192, (const void *)v197, v190);
  char v193 = 0;
LABEL_425:
  v192[v190] = 0;
  unint64_t v198 = (char *)operator new(0x20uLL);
  qword_2593818 = (uint64_t)v198;
  unk_2593820 = v279;
  *(void *)unint64_t v198 = qword_25937A0;
  *(void *)(v198 + 7) = *(uint64_t *)((char *)&qword_25937A0 + 7);
  *(void *)(v198 + 15) = qword_2593698;
  v198[23] = word_25936A0;
  v198[24] = 0;
  unint64_t v199 = v190 + 15;
  if (v190 + 15 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v199 > 0x16)
  {
    uint64_t v201 = (v199 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v199 | 7) != 0x17) {
      uint64_t v201 = v199 | 7;
    }
    uint64_t v202 = v201 + 1;
    uint64_t v200 = (uint64_t *)operator new(v201 + 1);
    qword_2593838 = v190 + 15;
    unk_2593840 = v202 | 0x8000000000000000;
    qword_2593830 = (uint64_t)v200;
  }
  else
  {
    uint64_t v200 = &qword_2593830;
    qword_2593838 = 0;
    unk_2593840 = 0;
    qword_2593830 = 0;
    byte_2593847 = v190 + 15;
  }
  uint64_t *v200 = qword_25937A0;
  *(uint64_t *)((char *)v200 + 7) = *(uint64_t *)((char *)&qword_25937A0 + 7);
  v203 = (char *)v200 + 15;
  if ((v193 & 1) == 0)
  {
    if (v189 >= 0) {
      uint64_t v204 = &qword_25936B0;
    }
    else {
      uint64_t v204 = (uint64_t *)qword_25936B0;
    }
    memmove((char *)v200 + 15, v204, v190);
  }
  v203[v190] = 0;
  byte_259385F = 17;
  strcpy((char *)&xmmword_2593848, "_EV_Forced_Detour");
  qword_2593860 = (uint64_t)operator new(0x20uLL);
  unk_2593868 = v278;
  strcpy((char *)qword_2593860, "_EV_Higher_Arrival_Charge");
  qword_2593878 = (uint64_t)operator new(0x28uLL);
  unk_2593880 = xmmword_20B8FD0;
  strcpy((char *)qword_2593878, "_EV_Infeasible_Higher_Arrival_Charge");
  byte_25938A7 = 16;
  strcpy(byte_2593890, "_EV_Out_Of_Range");
  qword_25938A8 = (uint64_t)operator new(0x20uLL);
  unk_25938B0 = v273;
  strcpy((char *)qword_25938A8, "_EV_Last_Chance_Take_Detour");
  strcpy(byte_25938C0, "_EV_Forced_Modify_Stop");
  HIBYTE(word_25938D6) = 22;
  qword_25938D8 = (uint64_t)operator new(0x19uLL);
  unk_25938E0 = v280;
  strcpy((char *)qword_25938D8, "_EV_Forced_Modify_Stops");
  byte_2593907 = 19;
  strcpy(byte_25938F0, "_EV_Forced_Add_Stop");
  byte_259391F = 20;
  strcpy((char *)&xmmword_2593908, "_EV_Forced_Add_Stops");
  byte_2593937 = 21;
  strcpy(byte_2593920, "_EV_Battery_Info_Lost");
  qword_2593938 = (uint64_t)operator new(0x20uLL);
  unk_2593940 = v278;
  strcpy((char *)qword_2593938, "_EV_Battery_Info_Restored");
  qword_2593950 = (uint64_t)operator new(0x20uLL);
  unk_2593958 = v279;
  strcpy((char *)qword_2593950, "_EV_Towing_Not_Supported");
  qword_2593968 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2593970 = v269;
  strcpy((char *)qword_2593968, "_EV_Offline_to_Online_Transition");
  byte_2593997 = 15;
  strcpy((char *)&qword_2593980, "_EV_Offline_SAR");
  qword_2593998 = (uint64_t)operator new(0x20uLL);
  unk_25939A0 = v277;
  strcpy((char *)qword_2593998, "_Offline_to_Online_New_Route");
  byte_25939C7 = 12;
  strcpy((char *)&qword_25939B0, "BannerButton");
  byte_25939DF = 8;
  strcpy((char *)&qword_25939C8, "_Dismiss");
  byte_25939F7 = 3;
  word_25939E0 = 20319;
  byte_25939E2 = 75;
  byte_25939E3 = 0;
  byte_2593A0F = 11;
  strcpy((char *)&qword_25939F8, "_Still_Here");
  byte_2593A27 = 8;
  strcpy((char *)&qword_2593A10, "_Cleared");
  qmemcpy(&byte_2593A3F, "\nBannerButton", 13);
  strcpy((char *)&qword_2593A28, "_No_Thanks");
  uint64_t v205 = qword_25939B8;
  qword_2593A50 = 0x1400000000000000;
  *(void *)algn_2593A4C = 0x7373696D7369445FLL;
  qword_2593A68 = 0xF00000000000000;
  qword_2593A60 = 0x4B4F5F6E6F7474;
  int v206 = byte_2593757;
  if (byte_2593757 >= 0) {
    size_t v207 = byte_2593757;
  }
  else {
    size_t v207 = qword_2593748;
  }
  unint64_t v208 = v207 + 12;
  qword_2593A58 = *(void *)"BannerButton";
  if (v207 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v208 >= 0x17)
  {
    uint64_t v210 = (v208 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v208 | 7) != 0x17) {
      uint64_t v210 = v208 | 7;
    }
    uint64_t v211 = v210 + 1;
    v212 = (char *)operator new(v210 + 1);
    qword_2593A78 = v207 + 12;
    unk_2593A80 = v211 | 0x8000000000000000;
    qword_2593A70 = (uint64_t)v212;
    *((_DWORD *)v212 + 2) = 1852798068;
    *(void *)v212 = *(void *)"BannerButton";
    uint64_t v209 = v212 + 12;
  }
  else
  {
    BYTE5(qword_2593A78) = 0;
    HIWORD(qword_2593A78) = 0;
    unk_2593A80 = 0;
    byte_2593A87 = v207 + 12;
    strcpy((char *)&qword_2593A70, "BannerButton");
    uint64_t v209 = (char *)&qword_2593A78 + 4;
    if (!v207) {
      goto LABEL_450;
    }
  }
  if (v206 >= 0) {
    int v213 = &qword_2593740;
  }
  else {
    int v213 = (uint64_t *)qword_2593740;
  }
  memmove(v209, v213, v207);
LABEL_450:
  v209[v207] = 0;
  int v214 = byte_259376F;
  if (byte_259376F >= 0) {
    size_t v215 = byte_259376F;
  }
  else {
    size_t v215 = unk_2593760;
  }
  unint64_t v216 = v215 + 12;
  if (v215 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v216 >= 0x17)
  {
    uint64_t v218 = (v216 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v216 | 7) != 0x17) {
      uint64_t v218 = v216 | 7;
    }
    uint64_t v219 = v218 + 1;
    v220 = (char *)operator new(v218 + 1);
    qword_2593A90 = v215 + 12;
    unk_2593A98 = v219 | 0x8000000000000000;
    qword_2593A88 = (uint64_t)v220;
    *(void *)v220 = qword_25939B0;
    *((_DWORD *)v220 + 2) = qword_25939B8;
    uint64_t v217 = v220 + 12;
  }
  else
  {
    qword_2593A90 = 0;
    unk_2593A98 = 0;
    byte_2593A9F = v215 + 12;
    LODWORD(qword_2593A90) = qword_25939B8;
    qword_2593A88 = qword_25939B0;
    uint64_t v217 = (char *)&qword_2593A90 + 4;
    if (!v215) {
      goto LABEL_464;
    }
  }
  if (v214 >= 0) {
    int v221 = &qword_2593758;
  }
  else {
    int v221 = (uint64_t *)qword_2593758;
  }
  memmove(v217, v221, v215);
LABEL_464:
  v217[v215] = 0;
  int v222 = byte_2593727;
  if (byte_2593727 >= 0) {
    size_t v223 = byte_2593727;
  }
  else {
    size_t v223 = unk_2593718;
  }
  unint64_t v224 = v223 + 12;
  if (v223 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v224 >= 0x17)
  {
    uint64_t v226 = (v224 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v224 | 7) != 0x17) {
      uint64_t v226 = v224 | 7;
    }
    uint64_t v227 = v226 + 1;
    v228 = (char *)operator new(v226 + 1);
    qword_2593AA8 = v223 + 12;
    unk_2593AB0 = v227 | 0x8000000000000000;
    qword_2593AA0 = (uint64_t)v228;
    *(void *)v228 = qword_25939B0;
    *((_DWORD *)v228 + 2) = qword_25939B8;
    uint64_t v225 = v228 + 12;
  }
  else
  {
    qword_2593AA8 = 0;
    unk_2593AB0 = 0;
    byte_2593AB7 = v223 + 12;
    LODWORD(qword_2593AA8) = qword_25939B8;
    qword_2593AA0 = qword_25939B0;
    uint64_t v225 = (char *)&qword_2593AA8 + 4;
    if (!v223) {
      goto LABEL_478;
    }
  }
  if (v222 >= 0) {
    int v229 = &qword_2593710;
  }
  else {
    int v229 = (uint64_t *)qword_2593710;
  }
  memmove(v225, v229, v223);
LABEL_478:
  v225[v223] = 0;
  int v230 = byte_25939C7;
  if (byte_25939C7 >= 0) {
    size_t v231 = byte_25939C7;
  }
  else {
    size_t v231 = v205;
  }
  int v232 = byte_259373F;
  if (byte_259373F >= 0) {
    size_t v233 = byte_259373F;
  }
  else {
    size_t v233 = *((void *)&xmmword_2593728 + 1);
  }
  unint64_t v234 = v233 + v231;
  if (v233 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v234 <= 0x16)
  {
    v235 = &qword_2593AB8;
    qword_2593AC0 = 0;
    unk_2593AC8 = 0;
    qword_2593AB8 = 0;
    byte_2593ACF = v233 + v231;
    if (!v231) {
      goto LABEL_491;
    }
    goto LABEL_487;
  }
  uint64_t v242 = (v234 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v234 | 7) != 0x17) {
    uint64_t v242 = v234 | 7;
  }
  uint64_t v243 = v242 + 1;
  v235 = (uint64_t *)operator new(v242 + 1);
  qword_2593AC0 = v233 + v231;
  unk_2593AC8 = v243 | 0x8000000000000000;
  qword_2593AB8 = (uint64_t)v235;
  if (v231)
  {
LABEL_487:
    if (v230 >= 0) {
      v236 = &qword_25939B0;
    }
    else {
      v236 = (uint64_t *)qword_25939B0;
    }
    memmove(v235, v236, v231);
  }
LABEL_491:
  v237 = (char *)v235 + v231;
  if (v233)
  {
    if (v232 >= 0) {
      unint64_t v238 = &xmmword_2593728;
    }
    else {
      unint64_t v238 = (long long *)xmmword_2593728;
    }
    memmove(v237, v238, v233);
  }
  v237[v233] = 0;
  unint64_t v239 = v231 + 11;
  if (v231 + 11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v239 >= 0x17)
  {
    uint64_t v244 = (v239 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v239 | 7) != 0x17) {
      uint64_t v244 = v239 | 7;
    }
    uint64_t v245 = v244 + 1;
    unint64_t v240 = (uint64_t *)operator new(v244 + 1);
    qword_2593AD8 = v231 + 11;
    unk_2593AE0 = v245 | 0x8000000000000000;
    qword_2593AD0 = (uint64_t)v240;
  }
  else
  {
    unint64_t v240 = &qword_2593AD0;
    qword_2593AD8 = 0;
    unk_2593AE0 = 0;
    qword_2593AD0 = 0;
    byte_2593AE7 = v231 + 11;
    if (!v231)
    {
      *(_DWORD *)((char *)&qword_2593AD0 + 7) = *(_DWORD *)((char *)&qword_25939F8 + 7);
      qword_2593AD0 = qword_25939F8;
      BYTE3(qword_2593AD8) = 0;
      LOBYTE(v241) = 8;
      goto LABEL_512;
    }
  }
  if (v230 >= 0) {
    v246 = &qword_25939B0;
  }
  else {
    v246 = (uint64_t *)qword_25939B0;
  }
  memmove(v240, v246, v231);
  int v247 = (char *)v240 + v231;
  int v248 = *(_DWORD *)((char *)&qword_25939F8 + 7);
  *(void *)int v247 = qword_25939F8;
  *(_DWORD *)(v247 + 7) = v248;
  v247[11] = 0;
  unint64_t v241 = v231 + 8;
  if (v231 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v241 <= 0x16)
  {
LABEL_512:
    v249 = &qword_2593AE8;
    qword_2593AF0 = 0;
    unk_2593AF8 = 0;
    qword_2593AE8 = 0;
    byte_2593AFF = v241;
    if (!v231) {
      goto LABEL_517;
    }
    goto LABEL_513;
  }
  uint64_t v262 = (v241 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v241 | 7) != 0x17) {
    uint64_t v262 = v241 | 7;
  }
  uint64_t v263 = v262 + 1;
  v249 = (uint64_t *)operator new(v262 + 1);
  qword_2593AF0 = v231 + 8;
  unk_2593AF8 = v263 | 0x8000000000000000;
  qword_2593AE8 = (uint64_t)v249;
  if (v231)
  {
LABEL_513:
    if (v230 >= 0) {
      v250 = &qword_25939B0;
    }
    else {
      v250 = (uint64_t *)qword_25939B0;
    }
    memmove(v249, v250, v231);
  }
LABEL_517:
  int v251 = (char *)v249 + v231;
  *(void *)int v251 = qword_2593A10;
  v251[8] = 0;
  int v252 = byte_2593A3F;
  if (byte_2593A3F >= 0) {
    size_t v253 = byte_2593A3F;
  }
  else {
    size_t v253 = qword_2593A30;
  }
  unint64_t v254 = v253 + v231;
  if (v253 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v254 <= 0x16)
  {
    v255 = &qword_2593B00;
    qword_2593B08 = 0;
    unk_2593B10 = 0;
    qword_2593B00 = 0;
    byte_2593B17 = v253 + v231;
    if (!v231) {
      goto LABEL_527;
    }
    goto LABEL_523;
  }
  uint64_t v260 = (v254 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v254 | 7) != 0x17) {
    uint64_t v260 = v254 | 7;
  }
  uint64_t v261 = v260 + 1;
  v255 = (uint64_t *)operator new(v260 + 1);
  qword_2593B08 = v253 + v231;
  unk_2593B10 = v261 | 0x8000000000000000;
  qword_2593B00 = (uint64_t)v255;
  if (v231)
  {
LABEL_523:
    if (v230 >= 0) {
      v256 = &qword_25939B0;
    }
    else {
      v256 = (uint64_t *)qword_25939B0;
    }
    memmove(v255, v256, v231);
  }
LABEL_527:
  v257 = (char *)v255 + v231;
  if (v253)
  {
    if (v252 >= 0) {
      v258 = &qword_2593A28;
    }
    else {
      v258 = (uint64_t *)qword_2593A28;
    }
    memmove(v257, v258, v253);
  }
  v257[v253] = 0;
  strcpy(&byte_2593B2F, "\n{newroute}");
  strcpy((char *)&qword_2593B18, "{roadname}");
  strcpy(&byte_2593B47, "\n{count}");
  byte_2593B5F = 7;
  strcpy(&byte_2593B77, "\n{dur}");
  strcpy((char *)&qword_2593B60, "{duration}");
  byte_2593B8F = 5;
  qword_2593B90 = (uint64_t)operator new(0x20uLL);
  unk_2593B98 = v276;
  strcpy((char *)qword_2593B90, "{PleaseProceedWithCaution}");
  byte_2593BBF = 15;
  strcpy((char *)&qword_2593BA8, "{UserRouteName}");
  byte_2593BD7 = 20;
  strcpy((char *)&xmmword_2593BC0, "{SuggestedRouteName}");
  byte_2593BEF = 18;
  strcpy(byte_2593BD8, "Speed_Camera_Ahead");
  qword_2593BF0 = (uint64_t)operator new(0x20uLL);
  unk_2593BF8 = v275;
  strcpy((char *)qword_2593BF0, "Red_Light_Camera_Ahead_Spoken");
  qword_2593C08 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2593C10 = v275;
  strcpy((char *)qword_2593C08, "Stop_Sign_Camera_Ahead_Spoken");
  qword_2593C20 = (uint64_t)operator new(0x28uLL);
  unk_2593C28 = v270;
  strcpy((char *)qword_2593C20, "Speed_Camera_Ahead_Multiple_Spoken");
  qword_2593C38 = (uint64_t)operator new(0x28uLL);
  unk_2593C40 = v265;
  strcpy((char *)qword_2593C38, "Red_Light_Camera_Ahead_Multiple_Spoken");
  qword_2593C50 = (uint64_t)operator new(0x20uLL);
  unk_2593C58 = v277;
  strcpy((char *)qword_2593C50, "Camera_Ahead_Multiple_Spoken");
  qword_2593C68 = (uint64_t)operator new(0x30uLL);
  unk_2593C70 = v266;
  strcpy((char *)qword_2593C68, "Red_Light_Camera_Speed_Camera_Ahead_Spoken");
  qword_2593C80 = (char *)operator new(0x30uLL);
  strcpy(qword_2593C80, "Stop_Sign_Camera_Speed_Camera_Ahead_Spoken");
  byte_2593CAF = 16;
  xmmword_2593C88 = v266;
  strcpy(byte_2593C98, "_Speed_Limit_Mph");
  byte_2593CC7 = 16;
  strcpy(algn_2593CB0, "_Speed_Limit_Kph");
  byte_2593CDF = 11;
  strcpy((char *)&qword_2593CC8, "Watch_Speed");
  byte_2593CF7 = 4;
  strcpy((char *)&dword_2593CE0, "_One");
  byte_2593D0F = 4;
  strcpy((char *)&dword_2593CF8, "_Two");
  byte_2593D27 = 4;
  strcpy((char *)&dword_2593D10, "_Few");
  byte_2593D3F = 5;
  strcpy((char *)&dword_2593D28, "_Many");
  byte_2593D57 = 6;
  strcpy((char *)&dword_2593D40, "_Other");
  byte_2593D6F = 4;
  strcpy((char *)&dword_2593D58, "_ONE");
  byte_2593D87 = 7;
  strcpy((char *)&dword_2593D70, "{Speed}");
  byte_2593D9F = 8;
  strcpy((char *)&qword_2593D88, "Dismount");
  byte_2593DB7 = 4;
  strcpy((char *)&dword_2593DA0, "Walk");
  byte_2593DCF = 5;
  strcpy((char *)&dword_2593DB8, "Mount");
  byte_2593DE7 = 7;
  strcpy((char *)&dword_2593DD0, "Remount");
  strcpy(&byte_2593DFF, "\t_Crosswalk");
  strcpy((char *)&qword_2593DE8, "Walk_Road");
  strcpy(&byte_2593E17, "\n_PLURAL");
  byte_2593E2F = 7;
  strcpy(&byte_2593E47, "\n{description1}");
  strcpy((char *)&qword_2593E30, "_SECONDARY");
  byte_2593E5F = 14;
  byte_2593E77 = 14;
  strcpy((char *)&qword_2593E60, "{description2}");
  byte_2593E8F = 21;
  strcpy((char *)&xmmword_2593E78, "TWO_ROAD_DESCRIPTIONS");
  byte_2593EA7 = 17;
  strcpy((char *)&xmmword_2593E90, "{SlopePercentage}");
  byte_2593EBF = 15;
  strcpy((char *)&qword_2593EA8, "_Protected_Lane");
  strcpy(&byte_2593ED7, "\n_Paved_Path");
  strcpy((char *)&qword_2593EC0, "_Bike_Path");
  byte_2593EEF = 11;
  byte_2593F07 = 15;
  strcpy((char *)&qword_2593EF0, "_Dedicated_Lane");
  byte_2593F1F = 12;
  strcpy((char *)&qword_2593F08, "_Shared_Path");
  strcpy(&byte_2593F37, "\n_UnnamedRoad");
  strcpy((char *)&qword_2593F20, "_Bike_Lane");
  byte_2593F4F = 12;
  byte_2593F67 = 5;
  strcpy((char *)&dword_2593F50, "_Path");
  byte_2593F7F = 6;
  strcpy((char *)&dword_2593F68, "_Trail");
  strcpy(&byte_2593F97, "\t_Plaza");
  strcpy((char *)&qword_2593F80, "_Sidewalk");
  byte_2593FAF = 6;
  byte_2593FC7 = 15;
  strcpy((char *)&qword_2593FB0, "_Moving_Walkway");
  byte_2593FDF = 14;
  strcpy((char *)&qword_2593FC8, "Two_Stage_Turn");
  byte_2593FF7 = 16;
  strcpy((char *)&xmmword_2593FE0, "{OptionalPeriod}");
  byte_259400F = 18;
  strcpy((char *)&xmmword_2593FF8, "Advisory_Separator");
  byte_2594027 = 6;
  strcpy((char *)&dword_2594010, "Period");
  byte_259403F = 21;
  strcpy((char *)&xmmword_2594028, "Advisory_Title_Notice");
  strcpy((char *)&xmmword_2594040, "Advisory_Title_Notices");
  HIBYTE(word_2594056) = 22;
  byte_259406F = 7;
  strcpy((char *)&dword_2594058, "_DETAIL");
  byte_2594087 = 17;
  strcpy((char *)&xmmword_2594070, "_LONG_REGION_LIST");
  byte_259409F = 16;
  strcpy((char *)&xmmword_2594088, "Advisory_Grouped");
  byte_25940B7 = 11;
  strcpy((char *)&qword_25940A0, "_Advisories");
  qword_25940B8 = (uint64_t)operator new(0x20uLL);
  unk_25940C0 = v273;
  strcpy((char *)qword_25940B8, "Advisory_WILDFIRE_METADATA_");
  byte_25940E7 = 8;
  strcpy((char *)&qword_25940D0, "Advisory");
  byte_25940FF = 13;
  strcpy((char *)&qword_25940E8, "MPR_NUM_STOPS");
  byte_2594117 = 17;
  strcpy(byte_2594100, "EV_CHARGE_STATION");
  byte_259412F = 11;
  strcpy((char *)&qword_2594118, "_NAMED_CITY");
  byte_2594147 = 5;
  strcpy((char *)&dword_2594130, "_Stop");
  strcpy(&byte_259415F, "\n{StopsCount}");
  strcpy((char *)&qword_2594148, "{CityName}");
  byte_2594177 = 12;
  byte_259418F = 11;
  strcpy((char *)&qword_2594178, "_With_Other");
  byte_25941A7 = 15;
  strcpy((char *)&qword_2594190, "{DepartureTime}");
  qword_25941A8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25941B0 = v274;
  strcpy((char *)qword_25941A8, "Ending_Charge_Station_Port_Availability");
  qword_25941C0 = (uint64_t)operator new(0x28uLL);
  unk_25941C8 = v267;
  strcpy((char *)qword_25941C0, "Ending_Charge_Station_No_Availability");
  qword_25941D8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25941E0 = v270;
  strcpy((char *)qword_25941D8, "Ending_Charge_Station_No_Real_Time");
  byte_2594207 = 16;
  strcpy(&algn_25941E0[16], "{AvailablePorts}");
  byte_259421F = 12;
  strcpy((char *)&qword_2594208, "{TotalPorts}");
  byte_2594237 = 14;
  strcpy((char *)&qword_2594220, "{ManeuverIcon}");
  qword_2594238 = (uint64_t)operator new(0x38uLL);
  unk_2594240 = xmmword_20B9A60;
  strcpy((char *)qword_2594238, "Walking_Distance_ManeuverIcon_PrimaryInstruction");
  qword_2594250 = (uint64_t)operator new(0x20uLL);
  unk_2594258 = v273;
  strcpy((char *)qword_2594250, "Walking_Destination_Unnamed");
  qword_2594268 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2594270 = v275;
  strcpy((char *)qword_2594268, "TrafficDelay_Label_Title_Sign");
  qword_2594280 = (uint64_t)operator new(0x20uLL);
  unk_2594288 = v277;
  strcpy((char *)qword_2594280, "Special_Guidance_Instruction");
  byte_25942AF = 2;
  strcpy((char *)&word_2594298, "CZ");
  byte_25942C7 = 3;
  dword_25942B0 = 5919811;
  unk_25942DF = 3;
  dword_25942C8 = 6243649;
  byte_25942F7 = 0;
  byte_259430F = 7;
  strcpy((char *)&dword_25942F8, "TRANSIT");
  byte_2594327 = 7;
  strcpy((char *)&dword_2594310, "OFFLINE");
  qword_2594328 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2594330 = v265;
  strcpy((char *)qword_2594328, "Advisory_Card_French_Climate_Law_Title");
  qword_2594340 = (uint64_t)operator new(0x30uLL);
  unk_2594348 = xmmword_20B93C0;
  strcpy((char *)qword_2594340, "Advisory_Card_French_Climate_Law_Details");
  qword_2594358 = (uint64_t)operator new(0x30uLL);
  unk_2594360 = v271;
  strcpy((char *)qword_2594358, "French_Climate_Law_Metadata_Weblink_Title");
  qword_2594370 = (uint64_t)operator new(0x20uLL);
  unk_2594378 = v277;
  strcpy((char *)qword_2594370, "{ClimateLawLearnMoreWeblink}");
  byte_259439F = 3;
  dword_2594388 = 4280902;
  qword_25943A0 = (uint64_t)operator new(0x70uLL);
  *(_OWORD *)algn_25943A8 = xmmword_20E81E0;
  strcpy((char *)qword_25943A0, "https://www.vie-publique.fr/loi/278460-loi-22-aout-2021-climat-et-resilience-convention-citoyenne-climat");
  return *(double *)"ut-2021-climat-et-resilience-convention-citoyenne-climat";
}

void sub_634F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3B7]) < 0)
  {
    operator delete((void *)STACK[0x3A0]);
    if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x387]) < 0) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  operator delete((void *)STACK[0x388]);
  if (SLOBYTE(STACK[0x387]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x370]);
    if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (SLOBYTE(STACK[0x357]) < 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)STACK[0x358]);
  if (SLOBYTE(STACK[0x357]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x340]);
    if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x327]) < 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete((void *)STACK[0x328]);
  if (SLOBYTE(STACK[0x327]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x310]);
    if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0)
  {
LABEL_9:
    if (SLOBYTE(STACK[0x2F7]) < 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)STACK[0x2F8]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
  {
LABEL_10:
    operator delete((void *)STACK[0x2E0]);
    if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
  {
LABEL_11:
    if (SLOBYTE(STACK[0x2C7]) < 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x2C8]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
  {
LABEL_12:
    operator delete((void *)STACK[0x2B0]);
    if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0)
  {
LABEL_13:
    if (SLOBYTE(STACK[0x297]) < 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete((void *)STACK[0x298]);
  if (SLOBYTE(STACK[0x297]) < 0)
  {
LABEL_14:
    operator delete((void *)STACK[0x280]);
    if (SLOBYTE(STACK[0x27F]) < 0)
    {
LABEL_37:
      operator delete((void *)STACK[0x268]);
      if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0)
      {
LABEL_38:
        if (SLOBYTE(STACK[0x24F]) < 0)
        {
LABEL_39:
          operator delete((void *)STACK[0x238]);
          if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
          {
LABEL_40:
            if (SLOBYTE(STACK[0x21F]) < 0)
            {
LABEL_41:
              operator delete((void *)STACK[0x208]);
              if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
              {
LABEL_42:
                if (a72 < 0)
                {
LABEL_43:
                  operator delete(a71);
                  if (a70 < 0)
                  {
LABEL_44:
                    operator delete(a65);
                    _Unwind_Resume(a1);
                  }
LABEL_45:
                  _Unwind_Resume(a1);
                }
LABEL_35:
                if (a70 < 0) {
                  goto LABEL_44;
                }
                goto LABEL_45;
              }
LABEL_34:
              operator delete(a73);
              if (a72 < 0) {
                goto LABEL_43;
              }
              goto LABEL_35;
            }
LABEL_33:
            if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0) {
              goto LABEL_42;
            }
            goto LABEL_34;
          }
LABEL_32:
          operator delete((void *)STACK[0x220]);
          if (SLOBYTE(STACK[0x21F]) < 0) {
            goto LABEL_41;
          }
          goto LABEL_33;
        }
LABEL_31:
        if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0) {
          goto LABEL_40;
        }
        goto LABEL_32;
      }
LABEL_30:
      operator delete((void *)STACK[0x250]);
      if (SLOBYTE(STACK[0x24F]) < 0) {
        goto LABEL_39;
      }
      goto LABEL_31;
    }
LABEL_29:
    if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_30;
  }
LABEL_28:
  if (SLOBYTE(STACK[0x27F]) < 0) {
    goto LABEL_37;
  }
  goto LABEL_29;
}

std::string *sub_6351E8(char **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*a1 == a1[1])
  {
    if (v2 >= a1[2])
    {
      uint64_t result = (std::string *)sub_1D740(a1, a2);
      a1[1] = (char *)result;
    }
    else
    {
      if (*(char *)(a2 + 23) < 0)
      {
        sub_4200(*a1, *(void **)a2, *(void *)(a2 + 8));
      }
      else
      {
        long long v6 = *(_OWORD *)a2;
        *((void *)v2 + 2) = *(void *)(a2 + 16);
        *(_OWORD *)uint64_t v2 = v6;
      }
      uint64_t result = (std::string *)(v2 + 24);
      a1[1] = v2 + 24;
      a1[1] = v2 + 24;
    }
  }
  else
  {
    uint64_t v3 = (std::string *)*a1;
    return std::string::operator=(v3, (const std::string *)a2);
  }
  return result;
}

void sub_6352A4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_6352AC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(unsigned char *)(a1 + 64) = 1;
  *(void *)(a1 + 8) = sub_1D740((char **)a1, a2);
  return a1;
}

void sub_6352F8(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 + 40);
  if (v3) {
    sub_20AA4B0(v3);
  }
  sub_20AA430((uint64_t *)(v1 + 24));
  _Unwind_Resume(a1);
}

uint64_t sub_63531C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(unsigned char *)(a1 + 64) = 1;
  *(void *)(a1 + 8) = sub_1D740((char **)a1, a2);
  if (a1 + 24 != a3)
  {
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a3 + 32);
    sub_59E5E4((void *)(a1 + 24), *(uint64_t **)(a3 + 16), 0);
  }
  return a1;
}

void sub_635390(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 + 40);
  if (v3) {
    sub_20AA4B0(v3);
  }
  sub_20AA430((uint64_t *)(v1 + 24));
  _Unwind_Resume(a1);
}

void sub_6353B4(uint64_t a1, std::string **a2)
{
  if ((std::string **)a1 != a2) {
    sub_69208(a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  }
}

uint64_t sub_6353E0(uint64_t a1, std::string **a2)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(unsigned char *)(a1 + 64) = 1;
  if ((std::string **)a1 != a2) {
    sub_69208(a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  }
  return a1;
}

void sub_635450(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 + 40);
  if (v3) {
    sub_20AA4B0(v3);
  }
  sub_20AA430((uint64_t *)(v1 + 24));
  _Unwind_Resume(a1);
}

uint64_t sub_635474(uint64_t a1, std::string **a2, uint64_t a3)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(unsigned char *)(a1 + 64) = 1;
  if ((std::string **)a1 != a2) {
    sub_69208(a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  }
  if (a1 + 24 != a3)
  {
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a3 + 32);
    sub_59E5E4((void *)(a1 + 24), *(uint64_t **)(a3 + 16), 0);
  }
  return a1;
}

void sub_635508(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 + 40);
  if (v3) {
    sub_20AA4B0(v3);
  }
  sub_20AA430((uint64_t *)(v1 + 24));
  _Unwind_Resume(a1);
}

void sub_63552C(uint64_t a1)
{
}

uint64_t sub_63553C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_6352AC(a2, a1);
  *(unsigned char *)(result + 64) = 0;
  return result;
}

char *sub_635560(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= *(void *)(a1 + 16))
  {
    uint64_t result = sub_1D740((char **)a1, a2);
    *(void *)(a1 + 8) = result;
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200(*(unsigned char **)(a1 + 8), *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v4 = *(_OWORD *)a2;
      *(void *)(v3 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v3 = v4;
    }
    uint64_t result = (char *)(v3 + 24);
    *(void *)(a1 + 8) = v3 + 24;
    *(void *)(a1 + 8) = v3 + 24;
  }
  return result;
}

void sub_6355F0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_6355F8(uint64_t a1, std::string **a2)
{
  sub_23708(a1, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3)- 0x5555555555555555 * (((char *)a2[1] - (char *)*a2) >> 3));
  sub_84F50((void **)a1, *(void *)(a1 + 8), *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *(_OWORD *)long long __p = 0u;
  *(_OWORD *)long long v15 = 0u;
  int v16 = 1065353216;
  long long v4 = *(void ***)a1;
  size_t v5 = *(void ***)(a1 + 8);
  if (*(void ***)a1 != v5)
  {
    while (1)
    {
      sub_24AFC((uint64_t)__p, (uint64_t)v4, (uint64_t)v4);
      if ((v6 & 1) == 0) {
        break;
      }
      v4 += 3;
      if (v4 == v5)
      {
        long long v4 = v5;
        goto LABEL_13;
      }
    }
    if (v4 != v5)
    {
      for (uint64_t i = (uint64_t)(v4 + 3); (void **)i != v5; i += 24)
      {
        sub_24AFC((uint64_t)__p, i, i);
        if (v9)
        {
          if (*((char *)v4 + 23) < 0) {
            operator delete(*v4);
          }
          long long v8 = *(_OWORD *)i;
          v4[2] = *(void **)(i + 16);
          *(_OWORD *)long long v4 = v8;
          v4 += 3;
          *(unsigned char *)(i + 23) = 0;
          *(unsigned char *)uint64_t i = 0;
        }
      }
    }
  }
LABEL_13:
  uint64_t v10 = *(void ***)(a1 + 8);
  if (v4 != v10)
  {
    while (v10 != v4)
    {
      if (*((char *)v10 - 1) < 0) {
        operator delete(*(v10 - 3));
      }
      v10 -= 3;
    }
    *(void *)(a1 + 8) = v4;
  }
  uint64_t v11 = (void **)v15[0];
  if (v15[0])
  {
    do
    {
      size_t v13 = (void **)*v11;
      if (*((char *)v11 + 39) < 0) {
        operator delete(v11[2]);
      }
      operator delete(v11);
      uint64_t v11 = v13;
    }
    while (v13);
  }
  int v12 = __p[0];
  __p[0] = 0;
  if (v12) {
    operator delete(v12);
  }
}

void sub_6357F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_635808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::string *sub_63581C(std::string **a1, const std::string::value_type *a2)
{
  uint64_t result = *a1;
  if (result != a1[1])
  {
    std::string::size_type v4 = *((void *)a2 + 1);
    if (a2[23] >= 0)
    {
      std::string::size_type v5 = *((unsigned __int8 *)a2 + 23);
    }
    else
    {
      a2 = *(const std::string::value_type **)a2;
      std::string::size_type v5 = v4;
    }
    return std::string::append(result, a2, v5);
  }
  return result;
}

std::string *sub_635850(uint64_t a1, long long *a2, const std::string *a3)
{
  char v6 = a2;
  std::string::size_type v4 = (std::string *)sub_617978(a1 + 24, (uint64_t)a2, (uint64_t)&unk_20F06E0, &v6);
  return std::string::operator=(v4 + 3, a3);
}

std::string *sub_6358A0(uint64_t a1, long long *a2, const std::string *a3)
{
  char v6 = a2;
  std::string::size_type v4 = sub_617978(a1 + 24, (uint64_t)a2, (uint64_t)&unk_20F06E0, &v6);
  return std::string::operator=((std::string *)(v4 + 5), a3);
}

std::string *sub_6358F0(uint64_t a1, long long *a2, const std::string *a3, const std::string *a4)
{
  uint64_t v7 = a1 + 24;
  uint64_t v11 = a2;
  long long v8 = sub_617978(a1 + 24, (uint64_t)a2, (uint64_t)&unk_20F06E0, &v11);
  std::string::operator=((std::string *)(v8 + 5), a3);
  uint64_t v11 = a2;
  char v9 = (std::string *)sub_617978(v7, (uint64_t)a2, (uint64_t)&unk_20F06E0, &v11);
  return std::string::operator=(v9 + 3, a4);
}

std::string *sub_635988(uint64_t a1, long long *a2, uint64_t a3)
{
  char v6 = a2;
  std::string::size_type v4 = sub_617978(a1 + 24, (uint64_t)a2, (uint64_t)&unk_20F06E0, &v6);
  std::string::operator=((std::string *)(v4 + 5), (const std::string *)a3);
  v4[8] = *(void *)(a3 + 24);
  std::string::operator=((std::string *)v4 + 3, (const std::string *)(a3 + 32));
  v4[12] = *(void *)(a3 + 56);
  *((_DWORD *)v4 + 26) = *(_DWORD *)(a3 + 64);
  std::string::operator=((std::string *)(v4 + 14), (const std::string *)(a3 + 72));
  std::string::operator=((std::string *)(v4 + 17), (const std::string *)(a3 + 96));
  *((_DWORD *)v4 + 40) = *(_DWORD *)(a3 + 120);
  return std::string::operator=((std::string *)v4 + 7, (const std::string *)(a3 + 128));
}

std::string *sub_635A2C(std::string *result, const std::string::value_type *a2, long long *a3, uint64_t a4, const std::string *a5, uint64_t a6)
{
  uint64_t v6 = *(unsigned __int8 *)(a4 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a4 + 8);
  }
  if (v6)
  {
    uint64_t v11 = result;
    int v12 = (std::string *)result->__r_.__value_.__r.__words[0];
    if (v12 != (std::string *)v11->__r_.__value_.__l.__size_)
    {
      std::string::size_type v13 = *((void *)a2 + 1);
      if (a2[23] >= 0)
      {
        std::string::size_type v14 = *((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = *(const std::string::value_type **)a2;
        std::string::size_type v14 = v13;
      }
      std::string::append(v12, a2, v14);
    }
    int v16 = a3;
    long long v15 = sub_617978((uint64_t)&v11[1], (uint64_t)a3, (uint64_t)&unk_20F06E0, &v16);
    std::string::operator=((std::string *)v15 + 3, a5);
    std::string::operator=((std::string *)(v15 + 5), (const std::string *)a4);
    *((_DWORD *)v15 + 26) = *(_DWORD *)a6;
    std::string::operator=((std::string *)(v15 + 14), (const std::string *)(a6 + 8));
    return std::string::operator=((std::string *)(v15 + 17), (const std::string *)(a6 + 32));
  }
  return result;
}

std::string *sub_635B18(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  uint64_t result = (std::string *)sub_6F2FD8(a4);
  if (result)
  {
    if (*(void *)a1 != *(void *)(a1 + 8))
    {
      int v9 = *(char *)(a2 + 23);
      if (v9 >= 0) {
        uint64_t v10 = (const std::string::value_type *)a2;
      }
      else {
        uint64_t v10 = *(const std::string::value_type **)a2;
      }
      if (v9 >= 0) {
        std::string::size_type v11 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        std::string::size_type v11 = *(void *)(a2 + 8);
      }
      std::string::append(*(std::string **)a1, v10, v11);
    }
    std::string::size_type v13 = a3;
    int v12 = sub_617978(a1 + 24, (uint64_t)a3, (uint64_t)&unk_20F06E0, &v13);
    std::string::operator=((std::string *)(v12 + 5), (const std::string *)a4);
    v12[8] = *(void *)(a4 + 24);
    std::string::operator=((std::string *)v12 + 3, (const std::string *)(a4 + 32));
    v12[12] = *(void *)(a4 + 56);
    *((_DWORD *)v12 + 26) = *(_DWORD *)(a4 + 64);
    std::string::operator=((std::string *)(v12 + 14), (const std::string *)(a4 + 72));
    std::string::operator=((std::string *)(v12 + 17), (const std::string *)(a4 + 96));
    *((_DWORD *)v12 + 40) = *(_DWORD *)(a4 + 120);
    return std::string::operator=((std::string *)v12 + 7, (const std::string *)(a4 + 128));
  }
  return result;
}

std::string *sub_635C08(uint64_t a1, long long *a2, uint64_t a3, int a4)
{
  if (!a4 || (uint64_t result = (std::string *)sub_6F2880(a3 + 64), result))
  {
    int v9 = a2;
    long long v8 = sub_617978(a1 + 24, (uint64_t)a2, (uint64_t)&unk_20F06E0, &v9);
    std::string::operator=((std::string *)(v8 + 5), (const std::string *)a3);
    v8[8] = *(void *)(a3 + 24);
    std::string::operator=((std::string *)v8 + 3, (const std::string *)(a3 + 32));
    v8[12] = *(void *)(a3 + 56);
    *((_DWORD *)v8 + 26) = *(_DWORD *)(a3 + 64);
    std::string::operator=((std::string *)(v8 + 14), (const std::string *)(a3 + 72));
    std::string::operator=((std::string *)(v8 + 17), (const std::string *)(a3 + 96));
    *((_DWORD *)v8 + 40) = *(_DWORD *)(a3 + 120);
    return std::string::operator=((std::string *)v8 + 7, (const std::string *)(a3 + 128));
  }
  return result;
}

long long **sub_635CD0@<X0>(long long **result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result;
  if (*result == result[1])
  {
    *(unsigned char *)(a2 + 23) = 0;
    *(unsigned char *)a2 = 0;
  }
  else if (*((char *)v2 + 23) < 0)
  {
    return (long long **)sub_4200((unsigned char *)a2, *(void **)v2, *((void *)v2 + 1));
  }
  else
  {
    long long v3 = *v2;
    *(void *)(a2 + 16) = *((void *)v2 + 2);
    *(_OWORD *)a2 = v3;
  }
  return result;
}

BOOL sub_635D10(uint64_t a1, uint64_t a2)
{
  return sub_619B40((void *)(a1 + 24), a2) != 0;
}

void sub_635D34(void *a1@<X0>, int64x2_t *a2@<X8>)
{
  a2->i64[0] = 0;
  a2->i64[1] = 0;
  a2[1].i64[0] = 0;
  std::string::size_type v4 = (long long *)*a1;
  if (*a1 == a1[1])
  {
    HIBYTE(v87) = 0;
    LOBYTE(__p[0]) = 0;
  }
  else if (*((char *)v4 + 23) < 0)
  {
    sub_4200(__p, *(void **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    uint64_t v87 = *((void *)v4 + 2);
    *(_OWORD *)long long __p = v5;
  }
  int64_t v6 = HIBYTE(v87);
  unsigned __int8 v7 = HIBYTE(v87);
  long long v8 = (void **)__p[0];
  if (v87 >= 0) {
    int v9 = __p;
  }
  else {
    int v9 = (void **)__p[0];
  }
  if (byte_2595017 >= 0) {
    uint64_t v10 = &qword_2595000;
  }
  else {
    uint64_t v10 = (uint64_t *)qword_2595000;
  }
  if (byte_2595017 >= 0) {
    int64_t v11 = byte_2595017;
  }
  else {
    int64_t v11 = unk_2595008;
  }
  if (v11)
  {
    if (v87 < 0) {
      int64_t v6 = (int64_t)__p[1];
    }
    if (v6 < v11) {
      goto LABEL_32;
    }
    int v12 = (char *)v9 + v6;
    int v13 = *(char *)v10;
    std::string::size_type v14 = v9;
    while (1)
    {
      int64_t v15 = v6 - v11;
      if (v15 == -1) {
        goto LABEL_32;
      }
      int v16 = (char *)memchr(v14, v13, v15 + 1);
      if (!v16) {
        goto LABEL_32;
      }
      uint64_t v17 = v16;
      if (!memcmp(v16, v10, v11)) {
        break;
      }
      std::string::size_type v14 = (void **)(v17 + 1);
      int64_t v6 = v12 - (v17 + 1);
      if (v6 < v11) {
        goto LABEL_32;
      }
    }
    if (v17 == v12 || v17 - (char *)v9 == -1)
    {
LABEL_32:
      if ((v7 & 0x80u) == 0) {
        long long v22 = __p;
      }
      else {
        long long v22 = v8;
      }
      if (byte_2594F9F >= 0) {
        int v23 = &qword_2594F88;
      }
      else {
        int v23 = (uint64_t *)qword_2594F88;
      }
      if (byte_2594F9F >= 0) {
        int64_t v24 = byte_2594F9F;
      }
      else {
        int64_t v24 = unk_2594F90;
      }
      if (!v24) {
        goto LABEL_173;
      }
      size_t v25 = (v7 & 0x80u) == 0 ? (char *)v7 : (char *)__p[1];
      if ((uint64_t)v25 >= v24)
      {
        unint64_t v26 = &v25[(void)v22];
        int v27 = *(char *)v23;
        uint64_t v28 = v22;
        while (1)
        {
          long long v29 = &v25[-v24];
          if (v29 == (char *)-1) {
            goto LABEL_79;
          }
          uint64_t v30 = (char *)memchr(v28, v27, (size_t)(v29 + 1));
          if (!v30) {
            goto LABEL_79;
          }
          int v31 = v30;
          if (!memcmp(v30, v23, v24)) {
            break;
          }
          uint64_t v28 = (void **)(v31 + 1);
          size_t v25 = (char *)(v26 - (v31 + 1));
          if ((uint64_t)v25 < v24) {
            goto LABEL_79;
          }
        }
        if (v31 != v26 && v31 - (char *)v22 != -1)
        {
LABEL_173:
          if (sub_619B40(a1 + 3, (uint64_t)&dword_2596418))
          {
            int v42 = sub_619B40(a1 + 3, (uint64_t)&dword_2596418);
            if (!v42) {
              goto LABEL_170;
            }
            size_t v43 = (long long *)(v42 + 5);
            unint64_t v44 = a2->u64[1];
            if (v44 >= a2[1].i64[0]) {
              goto LABEL_169;
            }
            goto LABEL_110;
          }
          unsigned __int8 v7 = HIBYTE(v87);
          long long v8 = (void **)__p[0];
        }
      }
LABEL_79:
      if ((v7 & 0x80u) == 0) {
        long long v8 = __p;
      }
      if (byte_2594FB7 >= 0) {
        int64_t v45 = &qword_2594FA0;
      }
      else {
        int64_t v45 = (uint64_t *)qword_2594FA0;
      }
      if (byte_2594FB7 >= 0) {
        int64_t v46 = byte_2594FB7;
      }
      else {
        int64_t v46 = unk_2594FA8;
      }
      if (v46)
      {
        size_t v47 = (v7 & 0x80u) == 0 ? (char *)v7 : (char *)__p[1];
        if ((uint64_t)v47 < v46) {
          goto LABEL_112;
        }
        unint64_t v48 = &v47[(void)v8];
        int v49 = *(char *)v45;
        long long v50 = v8;
        while (1)
        {
          int v51 = &v47[-v46];
          if (v51 == (char *)-1) {
            goto LABEL_112;
          }
          size_t v52 = (char *)memchr(v50, v49, (size_t)(v51 + 1));
          if (!v52) {
            goto LABEL_112;
          }
          int v53 = v52;
          if (!memcmp(v52, v45, v46)) {
            break;
          }
          long long v50 = (void **)(v53 + 1);
          size_t v47 = (char *)(v48 - (v53 + 1));
          if ((uint64_t)v47 < v46) {
            goto LABEL_112;
          }
        }
        if (v53 == v48 || v53 - (char *)v8 == -1) {
          goto LABEL_112;
        }
      }
      if (!sub_619B40(a1 + 3, (uint64_t)&qword_2596478)) {
        goto LABEL_112;
      }
      size_t v54 = sub_619B40(a1 + 3, (uint64_t)&qword_2596478);
      if (!v54) {
        goto LABEL_170;
      }
      size_t v43 = (long long *)(v54 + 5);
      unint64_t v44 = a2->u64[1];
      if (v44 >= a2[1].i64[0]) {
        goto LABEL_169;
      }
LABEL_110:
      sub_4AA8E0((char *)a2->i64[1], v43);
      uint64_t v56 = v44 + 152;
      a2->i64[1] = v44 + 152;
LABEL_111:
      a2->i64[1] = v56;
      goto LABEL_112;
    }
  }
  if (!sub_619B40(a1 + 3, (uint64_t)&xmmword_2596430))
  {
    unsigned __int8 v7 = HIBYTE(v87);
    long long v8 = (void **)__p[0];
    goto LABEL_32;
  }
  size_t v18 = sub_619B40(a1 + 3, (uint64_t)&xmmword_2596430);
  if (!v18) {
    goto LABEL_170;
  }
  unint64_t v19 = (long long *)(v18 + 5);
  unint64_t v20 = a2->u64[1];
  if (v20 >= a2[1].i64[0])
  {
    uint64_t v21 = sub_63CBA0(a2, v19);
  }
  else
  {
    sub_4AA8E0((char *)a2->i64[1], v19);
    uint64_t v21 = v20 + 152;
    a2->i64[1] = v20 + 152;
  }
  a2->i64[1] = v21;
  uint64_t v32 = HIBYTE(v87);
  if (v87 >= 0) {
    unint64_t v33 = __p;
  }
  else {
    unint64_t v33 = (void **)__p[0];
  }
  if (byte_2595257 >= 0) {
    BOOL v34 = &qword_2595240;
  }
  else {
    BOOL v34 = (uint64_t *)qword_2595240;
  }
  if (byte_2595257 >= 0) {
    int64_t v35 = byte_2595257;
  }
  else {
    int64_t v35 = unk_2595248;
  }
  if (!v35) {
    goto LABEL_174;
  }
  if (v87 < 0) {
    uint64_t v32 = (uint64_t)__p[1];
  }
  if (v32 >= v35)
  {
    unint64_t v36 = (char *)v33 + v32;
    int v37 = *(char *)v34;
    int64_t v38 = v33;
    while (1)
    {
      uint64_t v39 = v32 - v35;
      if (v39 == -1) {
        goto LABEL_112;
      }
      uint8x8_t v40 = (char *)memchr(v38, v37, v39 + 1);
      if (!v40) {
        goto LABEL_112;
      }
      uint64_t v41 = v40;
      if (!memcmp(v40, v34, v35)) {
        break;
      }
      int64_t v38 = (void **)(v41 + 1);
      uint64_t v32 = v36 - (v41 + 1);
      if (v32 < v35) {
        goto LABEL_112;
      }
    }
    if (v41 != v36 && v41 - (char *)v33 != -1)
    {
LABEL_174:
      if (sub_619B40(a1 + 3, (uint64_t)&dword_2596448))
      {
        unint64_t v55 = sub_619B40(a1 + 3, (uint64_t)&dword_2596448);
        if (!v55) {
          goto LABEL_170;
        }
        size_t v43 = (long long *)(v55 + 5);
        unint64_t v44 = a2->u64[1];
        if (v44 < a2[1].i64[0]) {
          goto LABEL_110;
        }
LABEL_169:
        uint64_t v56 = sub_63CBA0(a2, v43);
        goto LABEL_111;
      }
    }
  }
LABEL_112:
  uint64_t v57 = HIBYTE(v87);
  if (v87 >= 0) {
    uint64_t v58 = __p;
  }
  else {
    uint64_t v58 = (void **)__p[0];
  }
  if (byte_259502F >= 0) {
    double v59 = &qword_2595018;
  }
  else {
    double v59 = (uint64_t *)qword_2595018;
  }
  if (byte_259502F >= 0) {
    int64_t v60 = byte_259502F;
  }
  else {
    int64_t v60 = *(void *)&byte_2595020;
  }
  if (!v60) {
    goto LABEL_175;
  }
  if (v87 < 0) {
    uint64_t v57 = (uint64_t)__p[1];
  }
  if (v57 >= v60)
  {
    std::string::size_type v61 = (char *)v58 + v57;
    int v62 = *(char *)v59;
    long long v63 = v58;
    while (1)
    {
      uint64_t v64 = v57 - v60;
      if (v64 == -1) {
        goto LABEL_139;
      }
      long long v65 = (char *)memchr(v63, v62, v64 + 1);
      if (!v65) {
        goto LABEL_139;
      }
      int v66 = v65;
      if (!memcmp(v65, v59, v60)) {
        break;
      }
      long long v63 = (void **)(v66 + 1);
      uint64_t v57 = v61 - (v66 + 1);
      if (v57 < v60) {
        goto LABEL_139;
      }
    }
    if (v66 != v61 && v66 - (char *)v58 != -1)
    {
LABEL_175:
      if (sub_619B40(a1 + 3, (uint64_t)&xmmword_25964C0))
      {
        size_t v67 = sub_619B40(a1 + 3, (uint64_t)&xmmword_25964C0);
        if (!v67) {
          goto LABEL_170;
        }
        int v68 = (long long *)(v67 + 5);
        unint64_t v69 = a2->u64[1];
        if (v69 >= a2[1].i64[0])
        {
          uint64_t v70 = sub_63CBA0(a2, v68);
        }
        else
        {
          sub_4AA8E0((char *)a2->i64[1], v68);
          uint64_t v70 = v69 + 152;
          a2->i64[1] = v69 + 152;
        }
        a2->i64[1] = v70;
      }
    }
  }
LABEL_139:
  uint64_t v71 = HIBYTE(v87);
  if (v87 >= 0) {
    double v72 = __p;
  }
  else {
    double v72 = (void **)__p[0];
  }
  if (byte_2595287 >= 0) {
    uint64_t v73 = &qword_2595270;
  }
  else {
    uint64_t v73 = (uint64_t *)qword_2595270;
  }
  if (byte_2595287 >= 0) {
    int64_t v74 = byte_2595287;
  }
  else {
    int64_t v74 = *(void *)&word_2595278;
  }
  if (!v74) {
    goto LABEL_176;
  }
  if (v87 < 0) {
    uint64_t v71 = (uint64_t)__p[1];
  }
  if (v71 >= v74)
  {
    double v75 = (char *)v72 + v71;
    int v76 = *(char *)v73;
    int v77 = v72;
    while (1)
    {
      uint64_t v78 = v71 - v74;
      if (v78 == -1) {
        goto LABEL_166;
      }
      int v79 = (char *)memchr(v77, v76, v78 + 1);
      if (!v79) {
        goto LABEL_166;
      }
      size_t v80 = v79;
      if (!memcmp(v79, v73, v74)) {
        break;
      }
      int v77 = (void **)(v80 + 1);
      uint64_t v71 = v75 - (v80 + 1);
      if (v71 < v74) {
        goto LABEL_166;
      }
    }
    if (v80 != v75 && v80 - (char *)v72 != -1)
    {
LABEL_176:
      unint64_t v81 = a1 + 3;
      if (sub_619B40(v81, (uint64_t)&xmmword_25964D8))
      {
        uint64_t v82 = sub_619B40(v81, (uint64_t)&xmmword_25964D8);
        if (v82)
        {
          double v83 = (long long *)(v82 + 5);
          unint64_t v84 = a2->u64[1];
          if (v84 >= a2[1].i64[0])
          {
            uint64_t v85 = sub_63CBA0(a2, v83);
          }
          else
          {
            sub_4AA8E0((char *)a2->i64[1], v83);
            uint64_t v85 = v84 + 152;
            a2->i64[1] = v84 + 152;
          }
          a2->i64[1] = v85;
          goto LABEL_166;
        }
LABEL_170:
        sub_5AE8("unordered_map::at: key not found");
      }
    }
  }
LABEL_166:
  if (SHIBYTE(v87) < 0) {
    operator delete(__p[0]);
  }
}

void sub_636430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  v14[1] = v15;
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_59241C(v14);
  _Unwind_Resume(a1);
}

void sub_636490(void *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::string::size_type v4 = (long long *)*a1;
  if (*a1 == a1[1])
  {
    HIBYTE(v76) = 0;
    LOBYTE(__p[0]) = 0;
  }
  else if (*((char *)v4 + 23) < 0)
  {
    sub_4200(__p, *(void **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    uint64_t v76 = *((void *)v4 + 2);
    *(_OWORD *)long long __p = v5;
  }
  uint64_t v6 = HIBYTE(v76);
  if (v76 >= 0) {
    unsigned __int8 v7 = __p;
  }
  else {
    unsigned __int8 v7 = (void **)__p[0];
  }
  if (byte_2595077 >= 0) {
    long long v8 = &qword_2595060;
  }
  else {
    long long v8 = (uint64_t *)qword_2595060;
  }
  if (byte_2595077 >= 0) {
    int64_t v9 = byte_2595077;
  }
  else {
    int64_t v9 = unk_2595068;
  }
  if (!v9) {
    goto LABEL_144;
  }
  if (v76 < 0) {
    uint64_t v6 = (uint64_t)__p[1];
  }
  if (v6 >= v9)
  {
    uint64_t v10 = (char *)v7 + v6;
    int v11 = *(char *)v8;
    int v12 = v7;
    while (1)
    {
      uint64_t v13 = v6 - v9;
      if (v13 == -1) {
        goto LABEL_39;
      }
      std::string::size_type v14 = (char *)memchr(v12, v11, v13 + 1);
      if (!v14) {
        goto LABEL_39;
      }
      uint64_t v15 = v14;
      if (!memcmp(v14, v8, v9)) {
        break;
      }
      int v12 = (void **)(v15 + 1);
      uint64_t v6 = v10 - (v15 + 1);
      if (v6 < v9) {
        goto LABEL_39;
      }
    }
    if (v15 != v10 && v15 - (char *)v7 != -1)
    {
LABEL_144:
      if (sub_619B40(a1 + 3, (uint64_t)&qword_2596308))
      {
        int v16 = sub_619B40(a1 + 3, (uint64_t)&qword_2596308);
        uint64_t v17 = v16;
        if (!v16) {
          goto LABEL_141;
        }
        unint64_t v18 = a2[1];
        if (v18 >= a2[2])
        {
          unint64_t v20 = sub_63CDC4(a2, (uint64_t)(v16 + 13));
        }
        else
        {
          *(_DWORD *)unint64_t v18 = *((_DWORD *)v16 + 26);
          if (*((char *)v16 + 135) < 0)
          {
            sub_4200((unsigned char *)(v18 + 8), (void *)v16[14], v16[15]);
          }
          else
          {
            long long v19 = *((_OWORD *)v16 + 7);
            *(void *)(v18 + 24) = v16[16];
            *(_OWORD *)(v18 + 8) = v19;
          }
          uint64_t v21 = (unsigned char *)(v18 + 32);
          if (*((char *)v17 + 159) < 0)
          {
            sub_4200(v21, (void *)v17[17], v17[18]);
          }
          else
          {
            long long v22 = *(_OWORD *)(v17 + 17);
            *(void *)(v18 + 48) = v17[19];
            *(_OWORD *)uint64_t v21 = v22;
          }
          unint64_t v20 = (char *)(v18 + 56);
          a2[1] = v18 + 56;
        }
        a2[1] = (uint64_t)v20;
      }
    }
  }
LABEL_39:
  uint64_t v23 = HIBYTE(v76);
  if (v76 >= 0) {
    int64_t v24 = __p;
  }
  else {
    int64_t v24 = (void **)__p[0];
  }
  if (byte_259547F >= 0) {
    size_t v25 = &qword_2595468;
  }
  else {
    size_t v25 = (uint64_t *)qword_2595468;
  }
  if (byte_259547F >= 0) {
    int64_t v26 = byte_259547F;
  }
  else {
    int64_t v26 = *(void *)&byte_2595470;
  }
  if (!v26) {
    goto LABEL_145;
  }
  if (v76 < 0) {
    uint64_t v23 = (uint64_t)__p[1];
  }
  if (v23 >= v26)
  {
    int v27 = (char *)v24 + v23;
    int v28 = *(char *)v25;
    long long v29 = v24;
    while (1)
    {
      uint64_t v30 = v23 - v26;
      if (v30 == -1) {
        goto LABEL_72;
      }
      int v31 = (char *)memchr(v29, v28, v30 + 1);
      if (!v31) {
        goto LABEL_72;
      }
      uint64_t v32 = v31;
      if (!memcmp(v31, v25, v26)) {
        break;
      }
      long long v29 = (void **)(v32 + 1);
      uint64_t v23 = v27 - (v32 + 1);
      if (v23 < v26) {
        goto LABEL_72;
      }
    }
    if (v32 != v27 && v32 - (char *)v24 != -1)
    {
LABEL_145:
      if (sub_619B40(a1 + 3, (uint64_t)&qword_2596338))
      {
        unint64_t v33 = sub_619B40(a1 + 3, (uint64_t)&qword_2596338);
        BOOL v34 = v33;
        if (!v33) {
          goto LABEL_141;
        }
        unint64_t v35 = a2[1];
        if (v35 >= a2[2])
        {
          int v37 = sub_63CDC4(a2, (uint64_t)(v33 + 13));
        }
        else
        {
          *(_DWORD *)unint64_t v35 = *((_DWORD *)v33 + 26);
          if (*((char *)v33 + 135) < 0)
          {
            sub_4200((unsigned char *)(v35 + 8), (void *)v33[14], v33[15]);
          }
          else
          {
            long long v36 = *((_OWORD *)v33 + 7);
            *(void *)(v35 + 24) = v33[16];
            *(_OWORD *)(v35 + 8) = v36;
          }
          int64_t v38 = (unsigned char *)(v35 + 32);
          if (*((char *)v34 + 159) < 0)
          {
            sub_4200(v38, (void *)v34[17], v34[18]);
          }
          else
          {
            long long v39 = *(_OWORD *)(v34 + 17);
            *(void *)(v35 + 48) = v34[19];
            *(_OWORD *)int64_t v38 = v39;
          }
          int v37 = (char *)(v35 + 56);
          a2[1] = v35 + 56;
        }
        a2[1] = (uint64_t)v37;
      }
    }
  }
LABEL_72:
  uint64_t v40 = HIBYTE(v76);
  if (v76 >= 0) {
    uint64_t v41 = __p;
  }
  else {
    uint64_t v41 = (void **)__p[0];
  }
  if (byte_259508F >= 0) {
    int v42 = &qword_2595078;
  }
  else {
    int v42 = (uint64_t *)qword_2595078;
  }
  if (byte_259508F >= 0) {
    int64_t v43 = byte_259508F;
  }
  else {
    int64_t v43 = unk_2595080;
  }
  if (!v43) {
    goto LABEL_146;
  }
  if (v76 < 0) {
    uint64_t v40 = (uint64_t)__p[1];
  }
  if (v40 >= v43)
  {
    unint64_t v44 = (char *)v41 + v40;
    int v45 = *(char *)v42;
    int64_t v46 = v41;
    while (1)
    {
      uint64_t v47 = v40 - v43;
      if (v47 == -1) {
        goto LABEL_105;
      }
      unint64_t v48 = (char *)memchr(v46, v45, v47 + 1);
      if (!v48) {
        goto LABEL_105;
      }
      int v49 = v48;
      if (!memcmp(v48, v42, v43)) {
        break;
      }
      int64_t v46 = (void **)(v49 + 1);
      uint64_t v40 = v44 - (v49 + 1);
      if (v40 < v43) {
        goto LABEL_105;
      }
    }
    if (v49 != v44 && v49 - (char *)v41 != -1)
    {
LABEL_146:
      if (sub_619B40(a1 + 3, (uint64_t)&qword_2596320))
      {
        long long v50 = sub_619B40(a1 + 3, (uint64_t)&qword_2596320);
        int v51 = v50;
        if (!v50) {
          goto LABEL_141;
        }
        unint64_t v52 = a2[1];
        if (v52 >= a2[2])
        {
          size_t v54 = sub_63CDC4(a2, (uint64_t)(v50 + 13));
        }
        else
        {
          *(_DWORD *)unint64_t v52 = *((_DWORD *)v50 + 26);
          if (*((char *)v50 + 135) < 0)
          {
            sub_4200((unsigned char *)(v52 + 8), (void *)v50[14], v50[15]);
          }
          else
          {
            long long v53 = *((_OWORD *)v50 + 7);
            *(void *)(v52 + 24) = v50[16];
            *(_OWORD *)(v52 + 8) = v53;
          }
          unint64_t v55 = (unsigned char *)(v52 + 32);
          if (*((char *)v51 + 159) < 0)
          {
            sub_4200(v55, (void *)v51[17], v51[18]);
          }
          else
          {
            long long v56 = *(_OWORD *)(v51 + 17);
            *(void *)(v52 + 48) = v51[19];
            *(_OWORD *)unint64_t v55 = v56;
          }
          size_t v54 = (char *)(v52 + 56);
          a2[1] = v52 + 56;
        }
        a2[1] = (uint64_t)v54;
      }
    }
  }
LABEL_105:
  uint64_t v57 = HIBYTE(v76);
  if (v76 >= 0) {
    uint64_t v58 = __p;
  }
  else {
    uint64_t v58 = (void **)__p[0];
  }
  if (byte_2595497 >= 0) {
    double v59 = &qword_2595480;
  }
  else {
    double v59 = (uint64_t *)qword_2595480;
  }
  if (byte_2595497 >= 0) {
    int64_t v60 = byte_2595497;
  }
  else {
    int64_t v60 = unk_2595488;
  }
  if (!v60) {
    goto LABEL_147;
  }
  if (v76 < 0) {
    uint64_t v57 = (uint64_t)__p[1];
  }
  if (v57 >= v60)
  {
    std::string::size_type v61 = (char *)v58 + v57;
    int v62 = *(char *)v59;
    long long v63 = v58;
    while (1)
    {
      uint64_t v64 = v57 - v60;
      if (v64 == -1) {
        goto LABEL_138;
      }
      long long v65 = (char *)memchr(v63, v62, v64 + 1);
      if (!v65) {
        goto LABEL_138;
      }
      int v66 = v65;
      if (!memcmp(v65, v59, v60)) {
        break;
      }
      long long v63 = (void **)(v66 + 1);
      uint64_t v57 = v61 - (v66 + 1);
      if (v57 < v60) {
        goto LABEL_138;
      }
    }
    if (v66 != v61 && v66 - (char *)v58 != -1)
    {
LABEL_147:
      size_t v67 = a1 + 3;
      if (sub_619B40(v67, (uint64_t)&qword_2596350))
      {
        int v68 = sub_619B40(v67, (uint64_t)&qword_2596350);
        unint64_t v69 = v68;
        if (v68)
        {
          unint64_t v70 = a2[1];
          if (v70 >= a2[2])
          {
            double v72 = sub_63CDC4(a2, (uint64_t)(v68 + 13));
          }
          else
          {
            *(_DWORD *)unint64_t v70 = *((_DWORD *)v68 + 26);
            if (*((char *)v68 + 135) < 0)
            {
              sub_4200((unsigned char *)(v70 + 8), (void *)v68[14], v68[15]);
            }
            else
            {
              long long v71 = *((_OWORD *)v68 + 7);
              *(void *)(v70 + 24) = v68[16];
              *(_OWORD *)(v70 + 8) = v71;
            }
            uint64_t v73 = (unsigned char *)(v70 + 32);
            if (*((char *)v69 + 159) < 0)
            {
              sub_4200(v73, (void *)v69[17], v69[18]);
            }
            else
            {
              long long v74 = *(_OWORD *)(v69 + 17);
              *(void *)(v70 + 48) = v69[19];
              *(_OWORD *)uint64_t v73 = v74;
            }
            double v72 = (char *)(v70 + 56);
            a2[1] = v70 + 56;
          }
          a2[1] = (uint64_t)v72;
          goto LABEL_138;
        }
LABEL_141:
        sub_5AE8("unordered_map::at: key not found");
      }
    }
  }
LABEL_138:
  if (SHIBYTE(v76) < 0) {
    operator delete(__p[0]);
  }
}

void sub_636AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v16 + 31) < 0) {
    operator delete(*v15);
  }
  *(void *)(v14 + 8) = v16;
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_636BAC((void **)v14);
  _Unwind_Resume(a1);
}

void **sub_636BAC(void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    long long v3 = (void **)a1[1];
    std::string::size_type v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 25) < 0) {
LABEL_9:
        }
          operator delete(*(v3 - 6));
      }
      else if (*((char *)v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 7;
      if (v3 == v2)
      {
        std::string::size_type v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

BOOL sub_636C3C(void *a1, void *a2)
{
  sub_635D34(a1, &v41);
  sub_635D34(a2, &v40);
  sub_636490(a1, (uint64_t *)&v38);
  sub_636490(a2, (uint64_t *)&v36);
  uint64_t v5 = v41.i64[1];
  uint64_t v4 = v41.i64[0];
  if (v41.i64[0] == v41.i64[1] || v40.i64[0] == v40.i64[1])
  {
    BOOL v6 = 0;
    unsigned __int8 v7 = (void **)v36;
    if (v38 != (void *)v39 && v36 != v37)
    {
      *(_OWORD *)unint64_t v33 = 0u;
      *(_OWORD *)BOOL v34 = 0u;
      int v35 = 1065353216;
      *(_OWORD *)long long __p = 0u;
      *(_OWORD *)int v31 = 0u;
      int v32 = 1065353216;
      goto LABEL_8;
    }
  }
  else
  {
    *(_OWORD *)unint64_t v33 = 0u;
    *(_OWORD *)BOOL v34 = 0u;
    int v35 = 1065353216;
    *(_OWORD *)long long __p = 0u;
    *(_OWORD *)int v31 = 0u;
    int v32 = 1065353216;
    do
    {
      sub_24AFC((uint64_t)v33, v4, v4);
      sub_24AFC((uint64_t)__p, v4 + 128, v4 + 128);
      v4 += 152;
LABEL_8:
      ;
    }
    while (v4 != v5);
    uint64_t v9 = v40.i64[1];
    uint64_t v8 = v40.i64[0];
    if (v40.i64[0] == v40.i64[1])
    {
LABEL_13:
      uint64_t v13 = (uint64_t)v38;
      uint64_t v14 = v39;
      if (v38 != (void *)v39)
      {
        uint64_t v15 = (char *)v37;
        if (v36 != v37)
        {
          while (1)
          {
            uint64_t v17 = (char *)v36;
            if (v36 == v15)
            {
              BOOL v6 = 0;
            }
            else
            {
              while (!sub_6F2DD0((uint64_t)v17, v13))
              {
                v17 += 56;
                if (v17 == v15)
                {
                  uint64_t v17 = v15;
                  break;
                }
              }
              uint64_t v15 = (char *)v37;
              BOOL v18 = v17 == (char *)v37;
              BOOL v6 = v17 != (char *)v37;
              if (!v18) {
                goto LABEL_28;
              }
            }
            v13 += 56;
            if (v13 == v14) {
              goto LABEL_28;
            }
          }
        }
      }
      BOOL v6 = 0;
      uint64_t v16 = (void **)v31[0];
      if (v31[0])
      {
        do
        {
LABEL_39:
          int64_t v24 = (void **)*v16;
          if (*((char *)v16 + 39) < 0) {
            operator delete(v16[2]);
          }
          operator delete(v16);
          uint64_t v16 = v24;
        }
        while (v24);
      }
    }
    else
    {
      while (1)
      {
        sub_24AFC((uint64_t)v33, v8, v8);
        if ((v10 & 1) == 0)
        {
          BOOL v6 = 1;
          uint64_t v16 = (void **)v31[0];
          if (v31[0]) {
            goto LABEL_39;
          }
          goto LABEL_29;
        }
        uint64_t v11 = v8 + 128;
        sub_24AFC((uint64_t)__p, v11, v11);
        if ((v12 & 1) == 0) {
          break;
        }
        uint64_t v8 = v11 + 24;
        if (v8 == v9) {
          goto LABEL_13;
        }
      }
      BOOL v6 = 1;
LABEL_28:
      uint64_t v16 = (void **)v31[0];
      if (v31[0]) {
        goto LABEL_39;
      }
    }
LABEL_29:
    long long v19 = __p[0];
    __p[0] = 0;
    if (v19) {
      operator delete(v19);
    }
    unint64_t v20 = (void **)v34[0];
    if (v34[0])
    {
      do
      {
        size_t v25 = (void **)*v20;
        if (*((char *)v20 + 39) < 0) {
          operator delete(v20[2]);
        }
        operator delete(v20);
        unint64_t v20 = v25;
      }
      while (v25);
    }
    uint64_t v21 = v33[0];
    v33[0] = 0;
    if (v21) {
      operator delete(v21);
    }
    unsigned __int8 v7 = (void **)v36;
  }
  if (v7)
  {
    long long v22 = v37;
    uint64_t v23 = v7;
    if (v37 == v7)
    {
LABEL_50:
      int v37 = v7;
      operator delete(v23);
      goto LABEL_51;
    }
    while (1)
    {
      if (*((char *)v22 - 1) < 0)
      {
        operator delete(*(v22 - 3));
        if ((*((char *)v22 - 25) & 0x80000000) == 0) {
          goto LABEL_45;
        }
LABEL_48:
        operator delete(*(v22 - 6));
        v22 -= 7;
        if (v22 == v7)
        {
LABEL_49:
          uint64_t v23 = v36;
          goto LABEL_50;
        }
      }
      else
      {
        if (*((char *)v22 - 25) < 0) {
          goto LABEL_48;
        }
LABEL_45:
        v22 -= 7;
        if (v22 == v7) {
          goto LABEL_49;
        }
      }
    }
  }
LABEL_51:
  uint64_t v26 = (uint64_t)v38;
  if (!v38) {
    goto LABEL_61;
  }
  uint64_t v27 = v39;
  int v28 = v38;
  if ((void *)v39 != v38)
  {
    while (1)
    {
      if (*(char *)(v27 - 1) < 0)
      {
        operator delete(*(void **)(v27 - 24));
        if ((*(char *)(v27 - 25) & 0x80000000) == 0) {
          goto LABEL_55;
        }
LABEL_58:
        operator delete(*(void **)(v27 - 48));
        v27 -= 56;
        if (v27 == v26)
        {
LABEL_59:
          int v28 = v38;
          break;
        }
      }
      else
      {
        if (*(char *)(v27 - 25) < 0) {
          goto LABEL_58;
        }
LABEL_55:
        v27 -= 56;
        if (v27 == v26) {
          goto LABEL_59;
        }
      }
    }
  }
  uint64_t v39 = v26;
  operator delete(v28);
LABEL_61:
  if (v40.i64[0])
  {
    sub_52FA20((uint64_t)&v40, v40.i64[0]);
    operator delete((void *)v40.i64[0]);
  }
  if (v41.i64[0])
  {
    sub_52FA20((uint64_t)&v41, v41.i64[0]);
    operator delete((void *)v41.i64[0]);
  }
  return v6;
}

void sub_636FD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
}

uint64_t sub_63701C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

uint64_t sub_637024(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_8A6F8((char *)a1, *(void *)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  sub_5954B0(a1 + 24, a2 + 24);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = a3;
  uint64_t v8 = a4[1];
  *(void *)(a1 + 80) = *a4;
  *(void *)(a1 + 88) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(_WORD *)(a1 + 96) = 0;
  return a1;
}

void sub_6370B8(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_20AA4E4((uint64_t)v1, *v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_6370D8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(unsigned char *)(a1 + 64) = 1;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_WORD *)(a1 + 96) = 0;
  *(void *)(a1 + 8) = sub_1D740((char **)a1, a2);
  if (a1 + 24 != a3)
  {
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a3 + 32);
    sub_59E5E4((void *)(a1 + 24), *(uint64_t **)(a3 + 16), 0);
  }
  *(_DWORD *)(a1 + 72) = a4;
  uint64_t v9 = *a5;
  char v10 = (std::__shared_weak_count *)a5[1];
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 88);
  *(void *)(a1 + 80) = v9;
  *(void *)(a1 + 88) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return a1;
}

void sub_637234(_Unwind_Exception *a1)
{
  sub_14A84(v2);
  sub_4D4880(v1);
  _Unwind_Resume(a1);
}

std::string *sub_637250(char **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*a1 == a1[1])
  {
    if (v2 >= a1[2])
    {
      uint64_t result = (std::string *)sub_1D740(a1, a2);
      a1[1] = (char *)result;
    }
    else
    {
      if (*(char *)(a2 + 23) < 0)
      {
        sub_4200(*a1, *(void **)a2, *(void *)(a2 + 8));
      }
      else
      {
        long long v6 = *(_OWORD *)a2;
        *((void *)v2 + 2) = *(void *)(a2 + 16);
        *(_OWORD *)uint64_t v2 = v6;
      }
      uint64_t result = (std::string *)(v2 + 24);
      a1[1] = v2 + 24;
      a1[1] = v2 + 24;
    }
  }
  else
  {
    long long v3 = (std::string *)*a1;
    return std::string::operator=(v3, (const std::string *)a2);
  }
  return result;
}

void sub_63730C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_637314(uint64_t a1, uint64_t a2)
{
  long long v3 = (void *)(a1 + 24);
  if (v3 != (void *)a2)
  {
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 32);
    sub_59E5E4(v3, *(uint64_t **)(a2 + 16), 0);
  }
}

uint64_t sub_63733C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 72) = a2;
  return result;
}

void sub_637344(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 88);
  *(void *)(a1 + 80) = v3;
  *(void *)(a1 + 88) = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t sub_6373DC(uint64_t a1, std::string **a2, uint64_t a3, int a4, uint64_t *a5)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(unsigned char *)(a1 + 64) = 1;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_WORD *)(a1 + 96) = 0;
  if ((std::string **)a1 != a2) {
    sub_69208(a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  }
  if (a1 + 24 != a3)
  {
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a3 + 32);
    sub_59E5E4((void *)(a1 + 24), *(uint64_t **)(a3 + 16), 0);
  }
  *(_DWORD *)(a1 + 72) = a4;
  uint64_t v9 = *a5;
  char v10 = (std::__shared_weak_count *)a5[1];
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 88);
  *(void *)(a1 + 80) = v9;
  *(void *)(a1 + 88) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return a1;
}

void sub_63755C(_Unwind_Exception *a1)
{
  sub_14A84(v2);
  sub_4D4880(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_63757C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_8A6F8((char *)a1, *(void *)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  sub_5954B0(a1 + 24, a2 + 24);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = a3;
  char v10 = operator new(0x80uLL);
  v10[1] = 0;
  void v10[2] = 0;
  *char v10 = off_243A0E0;
  v12[0] = 0;
  v12[1] = 0;
  *(void *)(a1 + 80) = sub_637024((uint64_t)(v10 + 3), a4, a5, v12);
  *(void *)(a1 + 88) = v10;
  *(_WORD *)(a1 + 96) = 0;
  return a1;
}

void sub_637650(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  sub_4D4880(v1);
  _Unwind_Resume(a1);
}

void sub_637670(_Unwind_Exception *a1)
{
  sub_4D4880(v1);
  _Unwind_Resume(a1);
}

void sub_637684(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_20AA4E4((uint64_t)v1, *v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_6376A4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(unsigned char *)(a1 + 64) = 1;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_WORD *)(a1 + 96) = 0;
  *(void *)(a1 + 8) = sub_1D740((char **)a1, a2);
  if (a1 + 24 != a3)
  {
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a3 + 32);
    sub_59E5E4((void *)(a1 + 24), *(uint64_t **)(a3 + 16), 0);
  }
  *(_DWORD *)(a1 + 72) = a4;
  uint64_t v11 = operator new(0x80uLL);
  v11[1] = 0;
  v11[2] = 0;
  *uint64_t v11 = off_243A0E0;
  v15[0] = 0;
  v15[1] = 0;
  uint64_t v12 = sub_637024((uint64_t)(v11 + 3), a5, a6, v15);
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 88);
  *(void *)(a1 + 80) = v12;
  *(void *)(a1 + 88) = v11;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  return a1;
}

void sub_6377D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v3);
  operator delete(v5);
  sub_14A84(v2);
  sub_4D4880(v1);
  _Unwind_Resume(a1);
}

void sub_637800(_Unwind_Exception *a1)
{
  sub_14A84(v2);
  sub_4D4880(v1);
  _Unwind_Resume(a1);
}

void sub_637824(int a1@<W0>, uint64_t a2@<X8>)
{
  long long v11 = 0u;
  long long v12 = 0u;
  *(_OWORD *)uint64_t v9 = 0u;
  *(_OWORD *)long long __p = 0u;
  DWORD2(v12) = 1065353216;
  uint64_t v13 = 1;
  v8[0] = 0;
  v8[1] = 0;
  sub_637024(a2, (uint64_t)v9, a1, v8);
  uint64_t v2 = (void *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1))
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_4F4B48((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = __p[1];
  __p[1] = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = (void **)v9[0];
  if (v9[0])
  {
    long long v6 = (void **)v9[1];
    unsigned __int8 v7 = v9[0];
    if (v9[1] != v9[0])
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      unsigned __int8 v7 = v9[0];
    }
    v9[1] = v5;
    operator delete(v7);
  }
}

void sub_6378FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

std::string *sub_637918(std::string *result, uint64_t a2)
{
  uint64_t v2 = (std::string *)result->__r_.__value_.__r.__words[0];
  std::string::size_type size = (std::string *)result->__r_.__value_.__l.__size_;
  if ((std::string *)result->__r_.__value_.__l.__data_ != size)
  {
    do
    {
      int v5 = *(char *)(a2 + 23);
      if (v5 >= 0) {
        long long v6 = (const std::string::value_type *)a2;
      }
      else {
        long long v6 = *(const std::string::value_type **)a2;
      }
      if (v5 >= 0) {
        std::string::size_type v7 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        std::string::size_type v7 = *(void *)(a2 + 8);
      }
      uint64_t result = std::string::insert(v2++, 0, v6, v7);
    }
    while (v2 != size);
  }
  return result;
}

void sub_63797C(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_69208(a1, *(std::string **)a2, *(std::string **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    sub_59E5E4((void *)(a1 + 24), *(uint64_t **)(a2 + 40), 0);
  }
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
}

uint64_t sub_6379E8(uint64_t result, char a2)
{
  *(unsigned char *)(result + 96) = a2;
  return result;
}

uint64_t sub_6379F0(uint64_t result, char a2)
{
  *(unsigned char *)(result + 97) = a2;
  return result;
}

void sub_6379F8(uint64_t *a1, char *a2)
{
  uint64_t v3 = (void **)a1;
  unint64_t v33 = 0;
  BOOL v34 = 0;
  unint64_t v35 = 0;
  long long __p = 0;
  int v31 = 0;
  uint64_t v32 = 0;
  sub_8A6F8((char *)&__p, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  uint64_t v4 = (void **)__p;
  int v5 = v31;
  if (__p != v31)
  {
    uint64_t v26 = v3;
    while (1)
    {
      if (*((char *)v4 + 23) < 0)
      {
        sub_4200(&__dst, *v4, (unint64_t)v4[1]);
      }
      else
      {
        long long v6 = *(_OWORD *)v4;
        __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)v4[2];
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v6;
      }
      char v28 = 0;
      __s[0] = 0;
      int64_t size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_dst = &__dst;
      }
      else {
        p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      int v9 = a2[23];
      if (v9 >= 0) {
        char v10 = a2;
      }
      else {
        char v10 = *(char **)a2;
      }
      if (v9 >= 0) {
        int64_t v11 = a2[23];
      }
      else {
        int64_t v11 = *((void *)a2 + 1);
      }
      if (v11)
      {
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int64_t size = __dst.__r_.__value_.__l.__size_;
        }
        if (size >= v11)
        {
          long long v12 = (char *)p_dst + size;
          int v13 = *v10;
          uint64_t v14 = p_dst;
          do
          {
            int64_t v15 = size - v11;
            if (v15 == -1) {
              break;
            }
            uint64_t v16 = (char *)memchr(v14, v13, v15 + 1);
            if (!v16) {
              break;
            }
            uint64_t v17 = v16;
            if (!memcmp(v16, v10, v11))
            {
              if (v17 != v12)
              {
                std::string::size_type v18 = v17 - (char *)p_dst;
                if (v17 - (char *)p_dst != -1) {
                  goto LABEL_27;
                }
              }
              break;
            }
            uint64_t v14 = (std::string *)(v17 + 1);
            int64_t size = v12 - (v17 + 1);
          }
          while (size >= v11);
        }
      }
      else
      {
        std::string::size_type v18 = 0;
LABEL_27:
        std::string::replace(&__dst, v18, v11, __s, 0);
        if (v28 < 0) {
          operator delete(*(void **)__s);
        }
      }
      long long v19 = v34;
      if ((unint64_t)v34 >= v35)
      {
        BOOL v34 = (std::string *)sub_1D740((char **)&v33, (uint64_t)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_34;
        }
      }
      else
      {
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_4200(v34, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
          BOOL v34 = v19 + 1;
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_3;
          }
LABEL_34:
          operator delete(__dst.__r_.__value_.__l.__data_);
          goto LABEL_3;
        }
        long long v20 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
        v34->__r_.__value_.__r.__words[2] = __dst.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
        BOOL v34 = v19 + 1;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_34;
        }
      }
LABEL_3:
      v4 += 3;
      if (v4 == v5)
      {
        uint64_t v4 = (void **)__p;
        uint64_t v3 = v26;
        break;
      }
    }
  }
  if (v4)
  {
    uint64_t v21 = v31;
    long long v22 = v4;
    if (v31 != v4)
    {
      do
      {
        if (*((char *)v21 - 1) < 0) {
          operator delete(*(v21 - 3));
        }
        v21 -= 3;
      }
      while (v21 != v4);
      long long v22 = __p;
    }
    int v31 = v4;
    operator delete(v22);
  }
  if (&v33 != v3) {
    sub_69208((uint64_t)v3, (std::string *)v33, v34, 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (unsigned char *)v33) >> 3));
  }
  uint64_t v23 = (std::string *)v33;
  if (v33)
  {
    int64_t v24 = v34;
    size_t v25 = v33;
    if (v34 != v33)
    {
      do
      {
        if (SHIBYTE(v24[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v24[-1].__r_.__value_.__l.__data_);
        }
        --v24;
      }
      while (v24 != v23);
      size_t v25 = v33;
    }
    BOOL v34 = v23;
    operator delete(v25);
  }
}

void sub_637CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_637CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_1A668(&a23);
  sub_1A668(&a26);
  _Unwind_Resume(a1);
}

char *sub_637D5C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  return sub_8A6F8((char *)a2, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
}

uint64_t sub_637D84(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t sub_637D8C@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 88);
  *a2 = *(void *)(result + 80);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

BOOL sub_637DA8(uint64_t a1)
{
  return *(unsigned char *)(a1 + 96) || *(unsigned char *)(a1 + 97) != 0;
}

uint64_t sub_637DC8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 96);
}

uint64_t sub_637DD0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 97);
}

BOOL sub_637DD8(long long **a1)
{
  uint64_t v2 = *a1;
  if (*a1 == a1[1])
  {
    HIBYTE(v10) = 0;
    LOBYTE(__p[0]) = 0;
    int v5 = 0;
    goto LABEL_13;
  }
  if (*((char *)v2 + 23) < 0)
  {
    sub_4200(__p, *(void **)v2, *((void *)v2 + 1));
    uint64_t v8 = (void *)HIBYTE(v10);
    int v5 = SHIBYTE(v10);
    if (v10 < 0) {
      uint64_t v8 = __p[1];
    }
    if (!v8)
    {
LABEL_13:
      BOOL v6 = 0;
      if (v5 < 0) {
        goto LABEL_14;
      }
      return v6;
    }
  }
  else
  {
    long long v3 = *v2;
    int64_t v10 = *((void *)v2 + 2);
    *(_OWORD *)long long __p = v3;
    unint64_t v4 = HIBYTE(v10);
    int v5 = SHIBYTE(v10);
    if (v10 < 0) {
      unint64_t v4 = *((void *)&v3 + 1);
    }
    if (!v4) {
      goto LABEL_13;
    }
  }
  BOOL v6 = *((_DWORD *)a1 + 18) != 0;
  if ((v5 & 0x80000000) == 0) {
    return v6;
  }
LABEL_14:
  operator delete(__p[0]);
  return v6;
}

BOOL sub_637EBC(uint64_t a1)
{
  uint64_t v1 = *(long long ***)(a1 + 80);
  if (!v1) {
    return 0;
  }
  long long v3 = *v1;
  if (*v1 == v1[1])
  {
    HIBYTE(v11) = 0;
    LOBYTE(__p[0]) = 0;
    int v6 = 0;
    goto LABEL_16;
  }
  if ((*((char *)v3 + 23) & 0x80000000) == 0)
  {
    long long v4 = *v3;
    int64_t v11 = *((void *)v3 + 2);
    *(_OWORD *)long long __p = v4;
    unint64_t v5 = HIBYTE(v11);
    int v6 = SHIBYTE(v11);
    if (v11 < 0) {
      unint64_t v5 = *((void *)&v4 + 1);
    }
    if (!v5) {
      goto LABEL_16;
    }
    goto LABEL_11;
  }
  sub_4200(__p, *(void **)v3, *((void *)v3 + 1));
  int v9 = (void *)HIBYTE(v11);
  int v6 = SHIBYTE(v11);
  if (v11 < 0) {
    int v9 = __p[1];
  }
  if (v9)
  {
LABEL_11:
    BOOL v7 = *(_DWORD *)(a1 + 72) != 0;
    if (v6 < 0) {
      goto LABEL_17;
    }
    return v7;
  }
LABEL_16:
  BOOL v7 = 0;
  if ((v6 & 0x80000000) == 0) {
    return v7;
  }
LABEL_17:
  operator delete(__p[0]);
  return v7;
}

uint64_t sub_637FB0(uint64_t a1)
{
  uint64_t v1 = *(long long ***)(a1 + 80);
  if (!v1) {
    return 1;
  }
  long long v3 = *v1;
  if (*v1 == v1[1])
  {
    HIBYTE(v14) = 0;
    LOBYTE(__p[0]) = 0;
    int v6 = 0;
  }
  else if (*((char *)v3 + 23) < 0)
  {
    sub_4200(__p, *(void **)v3, *((void *)v3 + 1));
    long long v12 = (void *)HIBYTE(v14);
    int v6 = SHIBYTE(v14);
    if (v14 < 0) {
      long long v12 = __p[1];
    }
    if (v12)
    {
LABEL_7:
      BOOL v7 = *(_DWORD *)(a1 + 72) != 0;
      if ((v6 & 0x80000000) == 0) {
        goto LABEL_8;
      }
      goto LABEL_14;
    }
  }
  else
  {
    long long v4 = *v3;
    int64_t v14 = *((void *)v3 + 2);
    *(_OWORD *)long long __p = v4;
    unint64_t v5 = HIBYTE(v14);
    int v6 = SHIBYTE(v14);
    if (v14 < 0) {
      unint64_t v5 = *((void *)&v4 + 1);
    }
    if (v5) {
      goto LABEL_7;
    }
  }
  BOOL v7 = 0;
  if ((v6 & 0x80000000) == 0)
  {
LABEL_8:
    if (v7) {
      goto LABEL_9;
    }
    return 1;
  }
LABEL_14:
  operator delete(__p[0]);
  if (!v7) {
    return 1;
  }
LABEL_9:
  unsigned int v8 = *(_DWORD *)(a1 + 72);
  BOOL v9 = v8 > 0x13;
  unsigned int v10 = (0xAC000u >> v8) & 1;
  if (v9) {
    return 0;
  }
  else {
    return v10;
  }
}

BOOL sub_6380BC(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 72);
  if (v1 - 5 >= 2)
  {
    BOOL v8 = v1 > 0x10;
    int v9 = (1 << v1) & 0x10300;
    return !v8 && v9 != 0;
  }
  long long v3 = *(long long ***)(a1 + 80);
  if (!v3) {
    return 0;
  }
  long long v4 = *v3;
  if (*v3 == v3[1])
  {
    HIBYTE(v21) = 0;
    LOBYTE(__p[0]) = 0;
    int v7 = 0;
    goto LABEL_33;
  }
  if ((*((char *)v4 + 23) & 0x80000000) == 0)
  {
    long long v5 = *v4;
    int64_t v21 = *((void *)v4 + 2);
    *(_OWORD *)long long __p = v5;
    unint64_t v6 = HIBYTE(v21);
    int v7 = SHIBYTE(v21);
    if (v21 < 0) {
      unint64_t v6 = *((void *)&v5 + 1);
    }
    if (!v6) {
      goto LABEL_33;
    }
LABEL_17:
    uint64_t v11 = *(_DWORD *)(a1 + 72) != 0;
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  sub_4200(__p, *(void **)v4, *((void *)v4 + 1));
  std::string::size_type v18 = (void *)HIBYTE(v21);
  int v7 = SHIBYTE(v21);
  if (v21 < 0) {
    std::string::size_type v18 = __p[1];
  }
  if (v18) {
    goto LABEL_17;
  }
LABEL_33:
  uint64_t v11 = 0;
  if (v7 < 0) {
LABEL_18:
  }
    operator delete(__p[0]);
LABEL_19:
  if (v11)
  {
    uint64_t v11 = -1431655765 * ((*(void *)(a1 + 8) - *(void *)a1) >> 3);
    int v13 = *(uint64_t **)(a1 + 80);
    long long v12 = *(std::__shared_weak_count **)(a1 + 88);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v13)
    {
      do
      {
        uint64_t v15 = *v13;
        uint64_t v14 = v13[1];
        uint64_t v17 = v13 + 10;
        int v13 = (uint64_t *)v13[10];
        uint64_t v16 = (std::__shared_weak_count *)v17[1];
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
        uint64_t v11 = -1431655765 * ((unint64_t)(v14 - v15) >> 3) * v11;
        long long v12 = v16;
      }
      while (v13);
    }
    else
    {
      uint64_t v16 = v12;
    }
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v11;
}

uint64_t *sub_6382F4(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 72) - 17;
  if (v1 < 3) {
    return (uint64_t *)(&off_243A120)[v1];
  }
  if (atomic_load_explicit((atomic_uchar *volatile)&qword_25943C0, memory_order_acquire)) {
    return &qword_25981B8;
  }
  if (__cxa_guard_acquire(&qword_25943C0))
  {
    qword_25981B8 = 0;
    unk_25981C0 = 0;
    qword_25981C8 = 0;
    __cxa_guard_release(&qword_25943C0);
  }
  return &qword_25981B8;
}

uint64_t sub_6383A0(void *a1)
{
  return *a1 - a1[1];
}

BOOL sub_6383AC(void *a1)
{
  if (*a1 == 0x7FFFFFFFFFFFFFFFLL) {
    return 0;
  }
  uint64_t v2 = a1[1];
  return v2 != 0x7FFFFFFFFFFFFFFFLL && *a1 >= v2;
}

BOOL sub_6383D8(_DWORD *a1)
{
  int v1 = a1[1];
  return *a1 != 0x7FFFFFFF && *a1 != v1 && v1 != 0x7FFFFFFF;
}

BOOL sub_6383F4(uint64_t a1)
{
  return *(_DWORD *)(a1 + 4) != 0x7FFFFFFF;
}

uint64_t sub_638408(uint64_t result, void *a2, void *a3)
{
  *(void *)(result + 40) = *a2;
  *(void *)(result + 48) = *a3;
  return result;
}

uint64_t sub_63841C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

__n128 sub_638424(uint64_t a1, __n128 *a2)
{
  __n128 result = *a2;
  *(__n128 *)(a1 + 40) = *a2;
  return result;
}

uint64_t sub_638430(uint64_t result, void *a2)
{
  *(void *)(result + 40) = *a2;
  return result;
}

uint64_t sub_63843C(uint64_t result, void *a2)
{
  *(void *)(result + 48) = *a2;
  return result;
}

uint64_t sub_638448(uint64_t result, uint64_t a2)
{
  *(void *)(result + 64) = a2;
  return result;
}

uint64_t sub_638450(uint64_t result, int a2)
{
  *(_DWORD *)(result + 56) = a2;
  return result;
}

uint64_t sub_638458(uint64_t result, uint64_t a2)
{
  *(void *)(result + 72) = a2;
  return result;
}

char *sub_638460(void *a1, uint64_t a2)
{
  unint64_t v7 = a1[1];
  uint64_t v5 = a1[2];
  for (i = (void **)(a1 + 1); v5 != v7; uint64_t v5 = sub_4D4B58(v5 - 160))
    ;
  a1[2] = v7;
  if (v7 >= a1[3])
  {
    __n128 result = sub_618DEC(i, a2);
    a1[2] = result;
  }
  else
  {
    *(void *)(v7 + 16) = 0;
    *(_OWORD *)unint64_t v7 = 0u;
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    *(void *)(v7 + 16) = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = 0;
    *(_OWORD *)a2 = 0u;
    *(void *)(v7 + 40) = 0;
    *(_OWORD *)(v7 + 24) = 0u;
    *(_OWORD *)(v7 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(v7 + 40) = *(void *)(a2 + 40);
    *(void *)(a2 + 40) = 0;
    *(_OWORD *)(a2 + 24) = 0u;
    *(void *)(v7 + 64) = 0;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)(v7 + 48) = *(_OWORD *)(a2 + 48);
    *(void *)(v7 + 64) = *(void *)(a2 + 64);
    *(void *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 48) = 0u;
    *(void *)(v7 + 88) = 0;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 72) = *(_OWORD *)(a2 + 72);
    *(void *)(v7 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)(a2 + 72) = 0u;
    uint64_t v8 = *(void *)(a2 + 96);
    *(_OWORD *)(a2 + 88) = 0u;
    *(void *)(v7 + 96) = v8;
    LODWORD(v8) = *(_DWORD *)(a2 + 104);
    *(unsigned char *)(v7 + 108) = *(unsigned char *)(a2 + 108);
    *(_DWORD *)(v7 + 104) = v8;
    long long v9 = *(_OWORD *)(a2 + 112);
    *(void *)(v7 + 128) = *(void *)(a2 + 128);
    *(_OWORD *)(v7 + 112) = v9;
    *(void *)(a2 + 120) = 0;
    *(void *)(a2 + 128) = 0;
    *(void *)(a2 + 112) = 0;
    long long v10 = *(_OWORD *)(a2 + 136);
    *(void *)(v7 + 152) = *(void *)(a2 + 152);
    *(_OWORD *)(v7 + 136) = v10;
    *(void *)(a2 + 144) = 0;
    *(void *)(a2 + 152) = 0;
    *(void *)(a2 + 136) = 0;
    __n128 result = (char *)(v7 + 160);
    a1[2] = v7 + 160;
  }
  return result;
}

__n128 sub_6385B0(void *a1, __n128 *a2)
{
  long long v4 = (void **)(a1 + 1);
  uint64_t v5 = (void *)a1[1];
  if (v5)
  {
    uint64_t v6 = a1[2];
    unint64_t v7 = v5;
    if ((void *)v6 != v5)
    {
      do
        uint64_t v6 = sub_4D4B58(v6 - 160);
      while ((void *)v6 != v5);
      unint64_t v7 = *v4;
    }
    a1[2] = v5;
    operator delete(v7);
    *long long v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  __n128 result = *a2;
  *(__n128 *)(a1 + 1) = *a2;
  a1[3] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

__n128 sub_638638(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)(a1 + 112) = *((void *)a2 + 4);
  *(_OWORD *)(a1 + 80) = v4;
  *(_OWORD *)(a1 + 96) = v5;
  if ((long long *)(a1 + 80) == a2)
  {
    *(_OWORD *)(a1 + 168) = *(long long *)((char *)a2 + 88);
    __n128 result = *(__n128 *)((char *)a2 + 120);
    *(__n128 *)(a1 + 200) = result;
  }
  else
  {
    sub_472BC8((void *)(a1 + 120), *((char **)a2 + 5), *((char **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 2));
    sub_472BC8((void *)(a1 + 144), *((char **)a2 + 8), *((char **)a2 + 9), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 9) - *((void *)a2 + 8)) >> 2));
    *(_OWORD *)(a1 + 168) = *(long long *)((char *)a2 + 88);
    unsigned int v6 = *(_DWORD *)(a1 + 192);
    int v7 = *((_DWORD *)a2 + 28);
    if (v6 == v7)
    {
      if (v6 <= 1) {
        *(void *)(a1 + 184) = *((void *)a2 + 13);
      }
      __n128 result = *(__n128 *)((char *)a2 + 120);
      *(__n128 *)(a1 + 200) = result;
    }
    else
    {
      if (v7 == 1)
      {
        *(void *)(a1 + 184) = *((void *)a2 + 13);
        int v7 = *((_DWORD *)a2 + 28);
      }
      else if (!v7)
      {
        *(void *)(a1 + 184) = *((void *)a2 + 13);
      }
      *(_DWORD *)(a1 + 192) = v7;
      __n128 result = *(__n128 *)((char *)a2 + 120);
      *(__n128 *)(a1 + 200) = result;
    }
  }
  return result;
}

__n128 sub_63874C(uint64_t a1, __n128 *a2)
{
  __n128 result = *a2;
  *(void *)(a1 + 232) = a2[1].n128_u64[0];
  *(__n128 *)(a1 + 216) = result;
  return result;
}

uint64_t sub_638760(uint64_t result, void *a2)
{
  *(void *)(result + ++*(_DWORD *)(result + 240) = *a2;
  return result;
}

uint64_t sub_63876C(uint64_t result, void *a2)
{
  *(void *)(result + 248) = *a2;
  return result;
}

uint64_t sub_638778(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[33];
  if (v3 >= a1[34])
  {
    uint64_t result = sub_63D140(a1 + 32, a2);
    a1[33] = result;
  }
  else
  {
    sub_63D394((uint64_t)(a1 + 34), v3, a2);
    uint64_t result = v3 + 104;
    a1[33] = v3 + 104;
    a1[33] = v3 + 104;
  }
  return result;
}

void sub_6387DC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 264) = v2;
  _Unwind_Resume(a1);
}

void sub_6387E4(uint64_t a1, int *a2)
{
  sub_637824(*a2, (uint64_t)v17);
  unint64_t v3 = *(void *)(a1 + 264);
  if (v3 >= *(void *)(a1 + 272))
  {
    long long v9 = sub_63D48C((void ***)(a1 + 256), (uint64_t)v17);
    long long v10 = (std::__shared_weak_count *)*((void *)&v25 + 1);
    *(void *)(a1 + 264) = v9;
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    *(void *)(v3 + 16) = 0;
    *(_OWORD *)unint64_t v3 = 0u;
    *(_OWORD *)unint64_t v3 = *(_OWORD *)v17;
    *(void **)(v3 + 16) = __p[0];
    long long v4 = __p[1];
    *(_OWORD *)uint64_t v17 = 0u;
    *(_OWORD *)long long __p = 0u;
    *(void *)(v3 + 24) = v4;
    *(void *)(v3 + 32) = v19;
    uint64_t v19 = 0;
    long long v5 = v20;
    *(void *)(v3 + 40) = v20;
    uint64_t v6 = v21;
    *(void *)(v3 + 48) = v21;
    *(_DWORD *)(v3 + 56) = v22;
    if (v6)
    {
      unint64_t v7 = v5[1];
      unint64_t v8 = *(void *)(v3 + 32);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v7 >= v8) {
          v7 %= v8;
        }
      }
      else
      {
        v7 &= v8 - 1;
      }
      v4[v7] = v3 + 40;
      long long v20 = 0;
      uint64_t v21 = 0;
    }
    *(unsigned char *)(v3 + 64) = v23;
    *(_DWORD *)(v3 + 72) = v24;
    *(_OWORD *)(v3 + 80) = v25;
    long long v25 = 0uLL;
    *(_WORD *)(v3 + 96) = v26;
    *(void *)(a1 + 264) = v3 + 104;
  }
  uint64_t v11 = v20;
  if (v20)
  {
    do
    {
      long long v12 = (void *)*v11;
      sub_4F4B48((uint64_t)(v11 + 2));
      operator delete(v11);
      uint64_t v11 = v12;
    }
    while (v12);
  }
  int v13 = __p[1];
  __p[1] = 0;
  if (v13) {
    operator delete(v13);
  }
  uint64_t v14 = (void **)v17[0];
  if (v17[0])
  {
    uint64_t v15 = (void **)v17[1];
    uint64_t v16 = v17[0];
    if (v17[1] != v17[0])
    {
      do
      {
        if (*((char *)v15 - 1) < 0) {
          operator delete(*(v15 - 3));
        }
        v15 -= 3;
      }
      while (v15 != v14);
      uint64_t v16 = v17[0];
    }
    v17[1] = v14;
    operator delete(v16);
  }
}

void sub_6389B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

char **sub_6389CC(uint64_t a1, char **a2)
{
  uint64_t result = (char **)(a1 + 288);
  if (result != a2) {
    return (char **)sub_147D0(result, *a2, a2[1], (a2[1] - *a2) >> 2);
  }
  return result;
}

uint64_t sub_6389F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 316) = a2;
  return result;
}

uint64_t sub_6389F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 320) = a2;
  return result;
}

uint64_t sub_638A00(uint64_t result, void *a2)
{
  *(void *)(result + 328) = *a2;
  return result;
}

uint64_t sub_638A0C(uint64_t result)
{
  *(unsigned char *)(result + 336) = 1;
  return result;
}

uint64_t sub_638A18(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_638A20(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t sub_638A2C(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t sub_638A34(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t sub_638A3C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 280);
}

uint64_t sub_638A44(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_638A4C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

uint64_t sub_638A54(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 120) + 4);
}

uint64_t sub_638A60(uint64_t a1)
{
  return a1 + 216;
}

uint64_t sub_638A68(uint64_t a1)
{
  return *(unsigned int *)(a1 + 80);
}

double sub_638A70(uint64_t a1)
{
  return *(double *)(a1 + 240);
}

double sub_638A78(uint64_t a1)
{
  return *(double *)(a1 + 248);
}

uint64_t sub_638A80(uint64_t a1)
{
  return a1 + 288;
}

uint64_t sub_638A88(uint64_t a1)
{
  return *(void *)(a1 + 328);
}

uint64_t sub_638A90(void *a1)
{
  uint64_t result = a1[5];
  if (result == 0x7FFFFFFFFFFFFFFFLL || ((v3 = a1[6], v3 != 0x7FFFFFFFFFFFFFFFLL) ? (BOOL v4 = result < v3) : (BOOL v4 = 1), v4))
  {
    uint64_t v5 = a1[8];
    if (v5 == 0x7FFFFFFFFFFFFFFFLL) {
      return 0;
    }
    else {
      return v5;
    }
  }
  return result;
}

uint64_t sub_638AC4(uint64_t a1)
{
  if (*(void *)(a1 + 72) <= 0x7FFFFFFFFFFFFFFEuLL) {
    return *(void *)(a1 + 72);
  }
  else {
    return 0;
  }
}

uint64_t sub_638AD8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 316);
}

uint64_t sub_638AE0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 320);
}

uint64_t sub_638AE8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 336);
}

BOOL sub_638AF0(_DWORD *a1)
{
  return *a1 != -1;
}

BOOL sub_638B00(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  uint64_t v2 = *(void **)(a1 + 16);
  if (v1 == v2) {
    return 0;
  }
  do
  {
    BOOL v3 = sub_45FB38(v1);
    if (v3) {
      break;
    }
    v1 += 20;
  }
  while (v1 != v2);
  return !v3;
}

BOOL sub_638B54(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 32) - 6) < 5;
}

uint64_t sub_638B68(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = -1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  int64x2_t v4 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a1 + 40) = v4;
  *(_DWORD *)(a1 + 56) = 0x7FFFFFFF;
  *(int64x2_t *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 80) = 0x7FFFFFFF;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 88) = 0x7FFFFFFF;
  *(void *)(a1 + 92) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 112) = 0x8000000080000000;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 168) = 0;
  *(void *)(a1 + 172) = 0x8000000080000000;
  *(_DWORD *)(a1 + 180) = 0x7FFFFFFF;
  *(_DWORD *)(a1 + 192) = -1;
  *(_OWORD *)(a1 + 200) = xmmword_20E8160;
  *(_DWORD *)(a1 + 216) = 0x7FFFFFFF;
  *(void *)(a1 + 220) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 232) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 240) = _Q0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 256) = 0;
  *(unsigned char *)(a1 + 280) = 1;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0;
  *(_WORD *)(a1 + 312) = 0;
  *(void *)(a1 + 316) = 0xFFFFFFFFLL;
  *(void *)(a1 + 328) = 0x7FFFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 336) = 0;
  *(void *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_DWORD *)(a1 + 400) = 1065353216;
  *(unsigned char *)(a1 + 408) = 1;
  uint64_t v10 = a1 + 416;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(void *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 472) = 1065353216;
  *(unsigned char *)(a1 + 480) = 1;
  sub_5F3B34(a1 + 488);
  sub_5F3B34(a1 + 648);
  *(void *)(a1 + 808) = 0;
  unint64_t v11 = *(void *)(a1 + 264);
  if (v11 >= *(void *)(a1 + 272))
  {
    uint64_t v12 = sub_63D140((uint64_t *)(a1 + 256), a2);
  }
  else
  {
    sub_63D394(a1 + 272, *(void *)(a1 + 264), a2);
    uint64_t v12 = v11 + 104;
    *(void *)(a1 + 264) = v11 + 104;
  }
  *(void *)(a1 + 264) = v12;
  if (v10 != a2)
  {
    sub_69208(v10, *(std::string **)a2, *(std::string **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    *(_DWORD *)(a1 + 472) = *(_DWORD *)(a2 + 56);
    sub_59E5E4((void *)(a1 + 440), *(uint64_t **)(a2 + 40), 0);
  }
  *(unsigned char *)(a1 + 480) = *(unsigned char *)(a2 + 64);
  return a1;
}

void sub_638D2C(_Unwind_Exception *a1)
{
  v1[33] = v6;
  uint64_t v8 = v1[101];
  v1[101] = 0;
  if (v8) {
    sub_4F49E8((uint64_t)(v1 + 101), v8);
  }
  sub_4D4B58(v5);
  sub_4D4B58(v4);
  sub_4D4880(v3);
  sub_4D4880(v2);
  sub_4F32CC(v1);
  _Unwind_Resume(a1);
}

void sub_638D90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 416;
  if (v4 != a2)
  {
    sub_69208(v4, *(std::string **)a2, *(std::string **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    *(_DWORD *)(a1 + 472) = *(_DWORD *)(a2 + 56);
    sub_59E5E4((void *)(a1 + 440), *(uint64_t **)(a2 + 40), 0);
  }
  *(unsigned char *)(a1 + 480) = *(unsigned char *)(a2 + 64);
}

void sub_638E00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 344;
  if (v4 != a2)
  {
    sub_69208(v4, *(std::string **)a2, *(std::string **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 56);
    sub_59E5E4((void *)(a1 + 368), *(uint64_t **)(a2 + 40), 0);
  }
  *(unsigned char *)(a1 + 408) = *(unsigned char *)(a2 + 64);
}

uint64_t sub_638E6C(uint64_t a1, uint64_t a2)
{
  return sub_52FD00(a1 + 488, a2);
}

uint64_t sub_638E74(uint64_t a1, uint64_t a2)
{
  return sub_52FD00(a1 + 648, a2);
}

void sub_638E7C()
{
}

void sub_638EFC()
{
}

uint64_t sub_638F20(uint64_t a1)
{
  return a1 + 344;
}

uint64_t sub_638F28(uint64_t a1)
{
  return a1 + 488;
}

void *sub_638F30@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (long long *)result[52];
  if (v2 == (long long *)result[53])
  {
    *(unsigned char *)(a2 + 23) = 0;
    *(unsigned char *)a2 = 0;
  }
  else if (*((char *)v2 + 23) < 0)
  {
    return sub_4200((unsigned char *)a2, *(void **)v2, *((void *)v2 + 1));
  }
  else
  {
    long long v3 = *v2;
    *(void *)(a2 + 16) = *((void *)v2 + 2);
    *(_OWORD *)a2 = v3;
  }
  return result;
}

uint64_t sub_638F70(uint64_t a1)
{
  return a1 + 440;
}

uint64_t sub_638F78(uint64_t a1)
{
  return a1 + 416;
}

uint64_t sub_638F80(uint64_t a1)
{
  return a1 + 648;
}

void *sub_638F88(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 808);
  if (!result)
  {
    if (atomic_load_explicit((atomic_uchar *volatile)&qword_25943C8, memory_order_acquire))
    {
      return &unk_25981D0;
    }
    else
    {
      if (__cxa_guard_acquire(&qword_25943C8))
      {
        dword_25981F0 = -1;
        dword_25981F8 = -1;
        *(int *)((char *)&dword_25981F8 + 3) = -1;
        unk_25981FF = 0;
        unk_259820F = 0;
        unk_2598207 = 0;
        unk_2598217 = 0;
        qword_2598228 = 0;
        unk_2598230 = 0;
        qword_2598220 = 0;
        byte_2598238 = 0;
        __cxa_guard_release(&qword_25943C8);
      }
      return &unk_25981D0;
    }
  }
  return result;
}

BOOL sub_639044(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 32) != 25) {
    return 0;
  }
  if (*(void *)(a1 + 344) == *(void *)(a1 + 352)) {
    return 0;
  }
  if (*(void *)(a1 + 416) == *(void *)(a1 + 424)) {
    return 0;
  }
  uint64_t v2 = *(void **)(a1 + 8);
  long long v3 = *(void **)(a1 + 16);
  if (v2 == v3) {
    return 0;
  }
  do
  {
    BOOL v4 = sub_45FB38(v2);
    if (v4) {
      break;
    }
    v2 += 20;
  }
  while (v2 != v3);
  if (v4) {
    return 0;
  }
  if (sub_45FB38((void *)(a1 + 648))) {
    return !sub_45FB38((void *)(a1 + 488));
  }
  return 1;
}

BOOL sub_6390F8(uint64_t a1)
{
  return !sub_45FB38((void *)(a1 + 488));
}

uint64_t sub_639118(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  *(_DWORD *)a1 = -1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  int64x2_t v6 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a1 + 40) = v6;
  *(_DWORD *)(a1 + 56) = 0x7FFFFFFF;
  *(int64x2_t *)(a1 + 64) = v6;
  *(_DWORD *)(a1 + 80) = 0x7FFFFFFF;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 88) = 0x7FFFFFFF;
  *(void *)(a1 + 92) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 112) = 0x8000000080000000;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 168) = 0;
  *(void *)(a1 + 172) = 0x8000000080000000;
  *(_DWORD *)(a1 + 180) = 0x7FFFFFFF;
  *(_DWORD *)(a1 + 192) = -1;
  *(_OWORD *)(a1 + 200) = xmmword_20E8160;
  *(_DWORD *)(a1 + 216) = 0x7FFFFFFF;
  *(void *)(a1 + 220) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 232) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 240) = _Q0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 256) = 0;
  *(unsigned char *)(a1 + 280) = 1;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0;
  *(_WORD *)(a1 + 312) = 0;
  *(void *)(a1 + 316) = 0xFFFFFFFFLL;
  *(void *)(a1 + 328) = 0x7FFFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 340) = -1;
  *(void *)(a1 + 344) = -1;
  *(_DWORD *)(a1 + 352) = a3;
  *(_DWORD *)(a1 + 356) = a5;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 384) = a4;
  *(_OWORD *)(a1 + 388) = xmmword_20E86F0;
  *(void *)(a1 + 264) = sub_63D140((uint64_t *)(a1 + 256), a2);
  return a1;
}

void sub_639230(_Unwind_Exception *a1)
{
  long long v3 = v2;
  uint64_t v5 = *v3;
  if (*v3)
  {
    v1[46] = v5;
    operator delete(v5);
  }
  sub_4F32CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_639258(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  return sub_639118(a1, a2, a3, a4, a5);
}

uint64_t sub_639260(uint64_t a1, uint64_t *a2, int a3, int a4, int a5)
{
  *(_DWORD *)a1 = -1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  int64x2_t v6 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a1 + 40) = v6;
  *(_DWORD *)(a1 + 56) = 0x7FFFFFFF;
  *(int64x2_t *)(a1 + 64) = v6;
  *(_DWORD *)(a1 + 80) = 0x7FFFFFFF;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 88) = 0x7FFFFFFF;
  *(void *)(a1 + 92) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 112) = 0x8000000080000000;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 168) = 0;
  *(void *)(a1 + 172) = 0x8000000080000000;
  *(_DWORD *)(a1 + 180) = 0x7FFFFFFF;
  *(_DWORD *)(a1 + 192) = -1;
  *(_OWORD *)(a1 + 200) = xmmword_20E8160;
  *(_DWORD *)(a1 + 216) = 0x7FFFFFFF;
  *(void *)(a1 + 220) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 232) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 240) = _Q0;
  uint64_t v12 = (uint64_t *)(a1 + 256);
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 256) = 0;
  *(unsigned char *)(a1 + 280) = 1;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0;
  *(_WORD *)(a1 + 312) = 0;
  *(void *)(a1 + 316) = 0xFFFFFFFFLL;
  *(void *)(a1 + 328) = 0x7FFFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 340) = -1;
  *(void *)(a1 + 344) = -1;
  *(_DWORD *)(a1 + 352) = a3;
  *(_DWORD *)(a1 + 356) = a5;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 384) = a4;
  *(_OWORD *)(a1 + 388) = xmmword_20E86F0;
  if (v12 != a2) {
    sub_59E204(v12, *a2, a2[1], 0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 3));
  }
  return a1;
}

void sub_6393A0(_Unwind_Exception *a1)
{
  long long v3 = v2;
  uint64_t v5 = *v3;
  if (*v3)
  {
    v1[46] = v5;
    operator delete(v5);
  }
  sub_4F32CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_6393C8(uint64_t a1, uint64_t *a2, int a3, int a4, int a5)
{
  return sub_639260(a1, a2, a3, a4, a5);
}

uint64_t sub_6393D0(uint64_t result, unsigned int a2, unsigned int a3)
{
  *(void *)(result + 388) = a2 | ((unint64_t)a3 << 32);
  return result;
}

uint64_t sub_6393E0(uint64_t a1, uint64_t a2, void *a3, int a4, int a5, int a6)
{
  *(_DWORD *)a1 = -1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  int64x2_t v8 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a1 + 40) = v8;
  *(_DWORD *)(a1 + 56) = 0x7FFFFFFF;
  *(int64x2_t *)(a1 + 64) = v8;
  *(_DWORD *)(a1 + 80) = 0x7FFFFFFF;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 88) = 0x7FFFFFFF;
  *(void *)(a1 + 92) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 112) = 0x8000000080000000;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 168) = 0;
  *(void *)(a1 + 172) = 0x8000000080000000;
  *(_DWORD *)(a1 + 180) = 0x7FFFFFFF;
  *(_DWORD *)(a1 + 192) = -1;
  *(_OWORD *)(a1 + 200) = xmmword_20E8160;
  *(_DWORD *)(a1 + 216) = 0x7FFFFFFF;
  *(void *)(a1 + 220) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 232) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 240) = _Q0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 256) = 0;
  *(unsigned char *)(a1 + 280) = 1;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0;
  *(_WORD *)(a1 + 312) = 0;
  *(void *)(a1 + 316) = 0xFFFFFFFFLL;
  *(void *)(a1 + 328) = 0x7FFFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 340) = -1;
  *(void *)(a1 + 344) = -1;
  *(_DWORD *)(a1 + 352) = a4;
  *(_DWORD *)(a1 + 356) = a6;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 384) = a5;
  *(_OWORD *)(a1 + 388) = xmmword_20E86F0;
  *(void *)(a1 + 264) = sub_63D140((uint64_t *)(a1 + 256), a2);
  *(void *)(a1 + 328) = *a3;
  return a1;
}

void sub_63950C(_Unwind_Exception *a1)
{
  BOOL v4 = *v2;
  if (*v2)
  {
    v1[46] = v4;
    operator delete(v4);
  }
  sub_4F32CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_639530(uint64_t a1, uint64_t a2, void *a3, int a4, int a5, int a6)
{
  return sub_6393E0(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_639538(uint64_t result, int a2)
{
  *(_DWORD *)(result + 356) = a2;
  return result;
}

char *sub_639540(uint64_t a1, int a2, int a3, char a4)
{
  int v7 = a3;
  int v6 = a2;
  char v5 = a4;
  return sub_63957C(a1 + 360, &v6, &v7, &v5);
}

char *sub_63957C(uint64_t a1, _DWORD *a2, int *a3, char *a4)
{
  long long v9 = *(_DWORD **)(a1 + 8);
  unint64_t v8 = *(void *)(a1 + 16);
  if ((unint64_t)v9 >= v8)
  {
    int v13 = *(_DWORD **)a1;
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *(void *)a1) >> 2);
    unint64_t v15 = v14 + 1;
    if (v14 + 1 > 0x1555555555555555) {
      sub_2E00();
    }
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)v13) >> 2);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v17 = 0x1555555555555555;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17 > 0x1555555555555555) {
      sub_188D718();
    }
    uint64_t v18 = 12 * v17;
    uint64_t v19 = (char *)operator new(12 * v17);
    long long v20 = &v19[12 * v14];
    int v21 = *a3;
    char v22 = *a4;
    *(_DWORD *)long long v20 = *a2;
    *((_DWORD *)v20 + 1) = v21;
    v20[8] = v22;
    for (uint64_t i = v20 + 12; v9 != v13; v20[8] = v24)
    {
      uint64_t v23 = *(void *)(v9 - 3);
      v9 -= 3;
      char v24 = *((unsigned char *)v9 + 8);
      *(void *)(v20 - 12) = v23;
      v20 -= 12;
    }
    *(void *)a1 = v20;
    *(void *)(a1 + 8) = i;
    *(void *)(a1 + 16) = &v19[v18];
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    int v10 = *a3;
    char v11 = *a4;
    *long long v9 = *a2;
    v9[1] = v10;
    *((unsigned char *)v9 + 8) = v11;
    uint64_t i = (char *)(v9 + 3);
  }
  *(void *)(a1 + 8) = i;
  return i - 12;
}

uint64_t sub_6396C0(uint64_t result, char a2)
{
  *(unsigned char *)(result + 396) = a2;
  return result;
}

uint64_t sub_6396C8(uint64_t result, char a2)
{
  *(unsigned char *)(result + 397) = a2;
  return result;
}

uint64_t sub_6396D0(uint64_t result, char a2)
{
  *(unsigned char *)(result + 398) = a2;
  return result;
}

uint64_t sub_6396D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 340) = a2;
  return result;
}

uint64_t sub_6396E0(uint64_t result, void *a2)
{
  *(void *)(result + 344) = *a2;
  return result;
}

uint64_t sub_6396EC(uint64_t result, char a2)
{
  *(unsigned char *)(result + 399) = a2;
  return result;
}

uint64_t sub_6396F4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 356);
}

uint64_t sub_6396FC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 388);
}

uint64_t sub_639704(uint64_t a1)
{
  return *(unsigned int *)(a1 + 392);
}

uint64_t sub_63970C(uint64_t a1)
{
  return a1 + 388;
}

uint64_t sub_639714(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 396);
}

uint64_t sub_63971C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 397);
}

uint64_t sub_639724(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 256);
  uint64_t v3 = *(void *)(result + 264);
  if (v2 == v3)
  {
    *(_DWORD *)(result + 352) = 0;
  }
  else
  {
    int v4 = 0;
    do
    {
      uint64_t result = sub_6380BC(v2);
      v4 += result;
      v2 += 104;
    }
    while (v2 != v3);
    *(_DWORD *)(v1 + 352) = v4;
  }
  return result;
}

uint64_t sub_639790(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 398);
}

uint64_t sub_639798(uint64_t a1)
{
  return *(unsigned int *)(a1 + 340);
}

uint64_t sub_6397A0(uint64_t a1)
{
  return *(void *)(a1 + 344);
}

BOOL sub_6397A8(uint64_t a1, uint64_t a2)
{
  sub_594F34((uint64_t)v27, a2);
  long long v38 = *(_OWORD *)(a2 + 340);
  int v39 = *(_DWORD *)(a2 + 356);
  int64x2_t v41 = 0;
  int v42 = 0;
  int64x2_t v40 = 0;
  char v5 = *(unsigned char **)(a2 + 360);
  int v4 = *(unsigned char **)(a2 + 368);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v6 >> 2) > 0x1555555555555555) {
      sub_2E00();
    }
    int64x2_t v40 = operator new(v6);
    int64x2_t v41 = v40;
    int v7 = (char *)v40 + 4 * (v6 >> 2);
    int v42 = v7;
    memcpy(v40, v5, v6 - 3);
    int64x2_t v41 = v7;
  }
  long long v43 = *(_OWORD *)(a2 + 384);
  int v44 = *(_DWORD *)(a2 + 400);
  unint64_t v8 = *(_DWORD **)(a1 + 360);
  long long v9 = *(_DWORD **)(a1 + 368);
  sub_594F34((uint64_t)&v45, (uint64_t)v27);
  long long v56 = v38;
  int v57 = v39;
  int64_t v60 = 0;
  uint64_t v58 = 0;
  double v59 = 0;
  int v10 = v40;
  uint64_t v11 = v41 - (unsigned char *)v40;
  if (v41 == v40)
  {
    uint64_t v12 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v11 >> 2) > 0x1555555555555555) {
      sub_2E00();
    }
    uint64_t v12 = (char *)operator new(v41 - (unsigned char *)v40);
    uint64_t v58 = v12;
    double v59 = v12;
    int64_t v60 = &v12[4 * (v11 >> 2)];
    memcpy(v12, v10, v11 - 3);
    double v59 = &v12[4 * (v11 >> 2)];
  }
  long long v61 = v43;
  int v62 = v44;
  if (v8 != v9)
  {
    while (v8[1] == 0x7FFFFFFF || *v8 != v45)
    {
      v8 += 3;
      if (v8 == v9)
      {
        unint64_t v8 = v9;
        break;
      }
    }
  }
  if (v12)
  {
    double v59 = v12;
    operator delete(v12);
  }
  if (__p)
  {
    unint64_t v55 = __p;
    operator delete(__p);
  }
  unint64_t v14 = (void **)v52;
  if (v52)
  {
    unint64_t v15 = v53;
    unint64_t v16 = v52;
    if (v53 != v52)
    {
      do
        unint64_t v15 = sub_4F31D0(v15 - 13);
      while (v15 != v14);
      unint64_t v16 = v52;
    }
    long long v53 = v14;
    operator delete(v16);
  }
  if (v50)
  {
    int v51 = v50;
    operator delete(v50);
  }
  if (v48)
  {
    int v49 = v48;
    operator delete(v48);
  }
  unint64_t v17 = v46;
  if (v46)
  {
    uint64_t v18 = (uint64_t)v47;
    uint64_t v19 = v46;
    if (v47 != v46)
    {
      do
        uint64_t v18 = sub_4D4B58(v18 - 160);
      while ((void *)v18 != v17);
      uint64_t v19 = v46;
    }
    uint64_t v47 = v17;
    operator delete(v19);
  }
  if (v40)
  {
    int64x2_t v41 = v40;
    operator delete(v40);
  }
  if (v36)
  {
    int v37 = v36;
    operator delete(v36);
  }
  long long v20 = (void **)v34;
  if (v34)
  {
    int v21 = v35;
    char v22 = v34;
    if (v35 != v34)
    {
      do
        int v21 = sub_4F31D0(v21 - 13);
      while (v21 != v20);
      char v22 = v34;
    }
    unint64_t v35 = v20;
    operator delete(v22);
  }
  if (v32)
  {
    unint64_t v33 = v32;
    operator delete(v32);
  }
  if (v30)
  {
    int v31 = v30;
    operator delete(v30);
  }
  uint64_t v23 = v28;
  if (v28)
  {
    uint64_t v24 = (uint64_t)v29;
    long long v25 = v28;
    if (v29 != v28)
    {
      do
        uint64_t v24 = sub_4D4B58(v24 - 160);
      while ((void *)v24 != v23);
      long long v25 = v28;
    }
    long long v29 = v23;
    operator delete(v25);
  }
  return v8 != *(_DWORD **)(a1 + 368);
}

void sub_639B10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_639B78((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_639B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  int v62 = (void *)STACK[0x308];
  if (STACK[0x308])
  {
    STACK[0x310] = (unint64_t)v62;
    operator delete(v62);
  }
  sub_4F32CC(&a61);
  sub_639B78(&a10);
  _Unwind_Resume(a1);
}

void sub_639B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56)
{
  if (__p)
  {
    a56 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_4F32CC(&a10);
  _Unwind_Resume(a1);
}

void *sub_639B78(void *a1)
{
  uint64_t v2 = (void *)a1[45];
  if (v2)
  {
    a1[46] = v2;
    operator delete(v2);
  }

  return sub_4F32CC(a1);
}

uint64_t sub_639BBC(uint64_t a1)
{
  return (*(unsigned int *)(a1 + 32) < 0x35uLL) & (0x1F800140000000uLL >> *(_DWORD *)(a1 + 32));
}

uint64_t sub_639BE0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 399);
}

BOOL sub_639BE8(uint64_t a1)
{
  return *(_DWORD *)(a1 + 400) != -1;
}

void sub_639BF8(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  *(void *)a5 = *a1;
  *(_DWORD *)(a5 + 8) = 1;
  *(unsigned char *)(a5 + 12) = 0;
  *(_DWORD *)(a5 + 14) = 65537;
  uint64_t v7 = *a2;
  *(void *)(a5 + 24) = 0;
  *(void *)(a5 + 32) = v7;
  *(_DWORD *)(a5 + 40) = *((_DWORD *)a2 + 2);
  *(unsigned char *)(a5 + 44) = 0;
  *(void *)(a5 + 48) = 0xBFF0000000000000;
  *(unsigned char *)(a5 + 56) = 0;
  sub_5251DC(a3, a5 + 64);
  *(_DWORD *)(a5 + 14) = 65537;
  *(unsigned char *)(a5 + 12) = 1;
  *(unsigned char *)(a5 + 44) = a4;
}

uint64_t sub_639C78(uint64_t a1)
{
  if (*(char *)(a1 + 167) < 0)
  {
    operator delete(*(void **)(a1 + 144));
    if ((*(char *)(a1 + 135) & 0x80000000) == 0)
    {
LABEL_3:
      int v2 = *(_DWORD *)(a1 + 96);
      if (v2 != 1) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 135) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 112));
  int v2 = *(_DWORD *)(a1 + 96);
  if (v2 != 1)
  {
LABEL_4:
    if (v2 || (*(char *)(a1 + 95) & 0x80000000) == 0) {
      return a1;
    }
    operator delete(*(void **)(a1 + 72));
    return a1;
  }
LABEL_9:
  int v4 = *(void **)(a1 + 72);
  if (!v4) {
    return a1;
  }
  *(void *)(a1 + 80) = v4;
  operator delete(v4);
  return a1;
}

void sub_639D20(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  *(void *)a5 = *a1;
  *(_DWORD *)(a5 + 8) = 2;
  *(unsigned char *)(a5 + 12) = 0;
  *(_DWORD *)(a5 + 14) = 65537;
  uint64_t v7 = *a2;
  *(void *)(a5 + 24) = 0;
  *(void *)(a5 + 32) = v7;
  *(_DWORD *)(a5 + 40) = *((_DWORD *)a2 + 2);
  *(unsigned char *)(a5 + 44) = 0;
  *(void *)(a5 + 48) = 0xBFF0000000000000;
  *(unsigned char *)(a5 + 56) = 0;
  sub_5251DC(a3, a5 + 64);
  *(_DWORD *)(a5 + 14) = 65537;
  *(unsigned char *)(a5 + 12) = 1;
  *(unsigned char *)(a5 + 44) = a4;
}

void sub_639DA4(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = *a1;
  *(_DWORD *)(a4 + 8) = 3;
  *(unsigned char *)(a4 + 12) = 0;
  *(_DWORD *)(a4 + 14) = 65537;
  uint64_t v5 = *a2;
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = v5;
  *(_DWORD *)(a4 + 40) = *((_DWORD *)a2 + 2);
  *(unsigned char *)(a4 + 44) = 0;
  *(void *)(a4 + 48) = 0xBFF0000000000000;
  *(unsigned char *)(a4 + 56) = 0;
  sub_5251DC(a3, a4 + 64);
  *(_DWORD *)(a4 + 14) = 1;
}

void sub_639E14(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = *a1;
  *(_DWORD *)(a5 + 8) = 4;
  *(unsigned char *)(a5 + 12) = 0;
  *(_DWORD *)(a5 + 14) = 65537;
  uint64_t v6 = *a3;
  *(void *)(a5 + 24) = *a2;
  *(void *)(a5 + 32) = v6;
  *(_DWORD *)(a5 + 40) = *((_DWORD *)a3 + 2);
  *(unsigned char *)(a5 + 44) = 0;
  *(void *)(a5 + 48) = 0xBFF0000000000000;
  *(unsigned char *)(a5 + 56) = 0;
  sub_5251DC(a4, a5 + 64);
  *(_DWORD *)(a5 + 14) = 0;
}

void sub_639E84(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(void *)a7 = *a1;
  *(_DWORD *)(a7 + 8) = 4;
  *(unsigned char *)(a7 + 12) = 0;
  *(_DWORD *)(a7 + 14) = 65537;
  uint64_t v8 = *a3;
  *(void *)(a7 + 24) = *a2;
  *(void *)(a7 + 32) = v8;
  *(_DWORD *)(a7 + 40) = *((_DWORD *)a3 + 2);
  *(unsigned char *)(a7 + 44) = 0;
  *(void *)(a7 + 48) = *a4;
  *(unsigned char *)(a7 + 56) = a5;
  sub_5251DC(a6, a7 + 64);
  *(_DWORD *)(a7 + 14) = 0;
}

std::string *sub_639EF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(void *)(a2 + 168) = 0;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_DWORD *)(a2 + 14) = 65537;
  *(void *)(a2 + 32) = -1;
  uint64_t v4 = a2 + 32;
  *(_DWORD *)(a2 + 40) = 0x7FFFFFFF;
  *(_DWORD *)(a2 + 96) = -1;
  *(_DWORD *)(a2 + 104) = -1;
  *(_DWORD *)(a2 + 107) = -1;
  *(void *)(a2 + 127) = 0;
  *(void *)(a2 + 119) = 0;
  *(void *)(a2 + 111) = 0;
  *(_WORD *)(a2 + 135) = 0;
  *(void *)(a2 + 144) = 0;
  uint64_t v5 = (std::string *)(a2 + 144);
  *(unsigned char *)(a2 + 168) = 0;
  *(_DWORD *)(a2 + 8) = 5;
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(unsigned char *)(a2 + 56) = *(unsigned char *)(a1 + 56);
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  sub_4F39B8(a2 + 64, (std::string *)(a1 + 64));
  *(void *)(a2 + 104) = *(void *)(a1 + 104);
  std::string::operator=((std::string *)(a2 + 112), (const std::string *)(a1 + 112));
  *(unsigned char *)(a2 + 136) = *(unsigned char *)(a1 + 136);
  uint64_t result = std::string::operator=(v5, (const std::string *)(a1 + 144));
  *(unsigned char *)(a2 + 168) = *(unsigned char *)(a1 + 168);
  *(void *)uint64_t v4 = *(void *)(a1 + 32);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a2 + 14) = 0x10000;
  *(unsigned char *)(a2 + 12) = 1;
  return result;
}

void sub_63A020(_Unwind_Exception *a1)
{
  sub_639C78(v1);
  _Unwind_Resume(a1);
}

BOOL sub_63A034(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 8) - 1) < 2;
}

uint64_t sub_63A048(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 12);
}

uint64_t sub_63A050(uint64_t a1, unsigned int *a2)
{
  unint64_t v2 = a2[1] - (unint64_t)*(unsigned int *)(a1 + 36);
  double v3 = sqrt((double)((*a2 - (unint64_t)*(unsigned int *)(a1 + 32))
                   * (*a2 - (unint64_t)*(unsigned int *)(a1 + 32))
                   + v2 * v2))
     / 100.0
     * 100.0;
  if (v3 >= 0.0)
  {
    double v4 = v3;
    if (v3 >= 4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v5 = (uint64_t)(v3 + v3) + 1;
  }
  else
  {
    double v4 = v3;
    if (v3 <= -4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v5 = (uint64_t)(v3 + v3);
    if (v5 >= 1) {
      --v5;
    }
  }
  double v4 = (double)(v5 >> 1);
LABEL_9:
  if (v4 >= 9.22337204e18) {
    return 0x7FFFFFFFFFFFFFFELL;
  }
  if (v3 >= 0.0)
  {
    if (v3 < 4.50359963e15)
    {
      uint64_t v6 = (uint64_t)(v3 + v3) + 1;
      return (uint64_t)(double)(v6 >> 1);
    }
  }
  else if (v3 > -4.50359963e15)
  {
    uint64_t v6 = (uint64_t)(v3 + v3);
    if (v6 >= 1) {
      --v6;
    }
    return (uint64_t)(double)(v6 >> 1);
  }
  return (uint64_t)v3;
}

_OWORD *sub_63A148(_OWORD *result, uint64_t a2)
{
  unint64_t v2 = result;
  switch(*(_DWORD *)(a2 + 8))
  {
    case 1:
      uint64_t v3 = *(void *)(a2 + 32);
      *((_DWORD *)result + 7) = *(_DWORD *)(a2 + 40);
      *(void *)((char *)result + 20) = v3;
      *((void *)result + 1) = *(void *)a2;
      ++*((void *)result + 7);
      double v4 = (_OWORD *)*((void *)result + 5);
      if ((unint64_t)v4 >= *((void *)result + 6)) {
        goto LABEL_19;
      }
      goto LABEL_17;
    case 2:
      uint64_t v15 = *(void *)(a2 + 32);
      *((_DWORD *)result + 7) = *(_DWORD *)(a2 + 40);
      *(void *)((char *)result + 20) = v15;
      *((void *)result + 1) = *(void *)a2;
      ++*((void *)result + 8);
      double v4 = (_OWORD *)*((void *)result + 5);
      if ((unint64_t)v4 >= *((void *)result + 6)) {
        goto LABEL_19;
      }
LABEL_17:
      long long v16 = *(_OWORD *)a2;
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v18 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)((char *)v4 + 41) = *(_OWORD *)(a2 + 41);
      v4[1] = v17;
      v4[2] = v18;
      *double v4 = v16;
      uint64_t result = (_OWORD *)sub_4F57A0((uint64_t)(v4 + 4), a2 + 64);
      *((void *)v2 + 5) = v4 + 11;
      *((void *)v2 + 5) = v4 + 11;
      return result;
    case 3:
      if (*((_DWORD *)result + 5) == -1 && *((_DWORD *)result + 6) == -1)
      {
        uint64_t v5 = *(void *)(a2 + 32);
        *((_DWORD *)result + 7) = *(_DWORD *)(a2 + 40);
        *(void *)((char *)result + 20) = v5;
      }
      if (*((void *)result + 1) != -1)
      {
        uint64_t v6 = *((void *)result + 9);
        if (v6) {
          goto LABEL_9;
        }
LABEL_21:
        *(unsigned char *)(a2 + 12) = 1;
        *((void *)result + 9) = v6 + 1;
        uint64_t v7 = (_OWORD *)*((void *)result + 5);
        if ((unint64_t)v7 < *((void *)result + 6)) {
          goto LABEL_10;
        }
        goto LABEL_22;
      }
      *((void *)result + 1) = *(void *)a2;
      uint64_t v6 = *((void *)result + 9);
      if (!v6) {
        goto LABEL_21;
      }
LABEL_9:
      *((void *)result + 9) = v6 + 1;
      uint64_t v7 = (_OWORD *)*((void *)result + 5);
      if ((unint64_t)v7 < *((void *)result + 6))
      {
LABEL_10:
        long long v8 = *(_OWORD *)a2;
        long long v9 = *(_OWORD *)(a2 + 16);
        long long v10 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)((char *)v7 + 41) = *(_OWORD *)(a2 + 41);
        v7[1] = v9;
        v7[2] = v10;
        *uint64_t v7 = v8;
        sub_4F57A0((uint64_t)(v7 + 4), a2 + 64);
        uint64_t result = v7 + 11;
        *((void *)v2 + 5) = v7 + 11;
        goto LABEL_23;
      }
LABEL_22:
      uint64_t result = sub_63DBB4((void **)result + 4, (_OWORD *)a2);
LABEL_23:
      *((void *)v2 + 5) = result;
      for (uint64_t i = *((void *)v2 + 4); (_OWORD *)i != result; i += 176)
      {
        if ((*(_DWORD *)(i + 8) & 0xFFFFFFFE) == 4) {
          *(unsigned char *)(i + 12) = 0;
        }
      }
      return result;
    case 4:
      return sub_63A500((uint64_t)result, a2);
    case 5:
      uint64_t v11 = (_OWORD *)*((void *)result + 5);
      if ((unint64_t)v11 >= *((void *)result + 6))
      {
LABEL_19:
        uint64_t result = sub_63DBB4((void **)result + 4, (_OWORD *)a2);
        *((void *)v2 + 5) = result;
      }
      else
      {
        long long v12 = *(_OWORD *)a2;
        long long v13 = *(_OWORD *)(a2 + 16);
        long long v14 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)((char *)v11 + 41) = *(_OWORD *)(a2 + 41);
        v11[1] = v13;
        v11[2] = v14;
        *uint64_t v11 = v12;
        sub_4F57A0((uint64_t)(v11 + 4), a2 + 64);
        uint64_t result = v11 + 11;
        *((void *)v2 + 5) = v11 + 11;
        *((void *)v2 + 5) = v11 + 11;
      }
      return result;
    default:
      return result;
  }
}

void sub_63A3B8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 40) = v2;
  _Unwind_Resume(a1);
}

void sub_63A3C0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 40) = v2;
  _Unwind_Resume(a1);
}

void sub_63A3C8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 40) = v2;
  _Unwind_Resume(a1);
}

uint64_t *sub_63A3EC(uint64_t *a1)
{
  if (*a1)
  {
    sub_52F808(a1);
    operator delete((void *)*a1);
  }
  return a1;
}

uint64_t sub_63A428(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 1;
  *(_DWORD *)(a1 + 4) = 0;
  *(void *)(a1 + 8) = -1;
  *(void *)(a1 + 16) = -1;
  *(void *)(a1 + 24) = 0x7FFFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0xBFF0000000000000;
  *(unsigned char *)(a1 + 96) = 0;
  sub_63A148((_OWORD *)a1, a2);
  return a1;
}

void sub_63A488(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_20AA540(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_63A4A4(uint64_t a1)
{
  return *(void *)(a1 + 32) != *(void *)(a1 + 40)
      && (*(_DWORD *)(a1 + 20) != -1 || *(_DWORD *)(a1 + 24) != -1)
      && *(void *)(a1 + 8) != -1;
}

BOOL sub_63A4E0(uint64_t a1)
{
  return *(void *)(a1 + 8) != -1;
}

BOOL sub_63A4F0(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) != -1;
}

_OWORD *sub_63A500(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 80)
    || ((double v6 = *(double *)(a2 + 48), *(uint64_t *)&v6 > -1)
      ? (BOOL v7 = ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
      : (BOOL v7 = 1),
        v7 ? (BOOL v8 = (unint64_t)(*(void *)&v6 - 1) >= 0xFFFFFFFFFFFFFLL) : (BOOL v8 = 0),
        v8 ? (BOOL v9 = (*(void *)&v6 & 0x7FFFFFFFFFFFFFFFLL) == 0) : (BOOL v9 = 1),
        !v9 || v6 <= 0.0 || *(void *)(a1 + 72)))
  {
    *(void *)(a1 + 88) = 0xBFF0000000000000;
    *(unsigned char *)(a1 + 96) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    while (v4 != v5)
    {
      if (*(_DWORD *)(v4 + 8) == 5) {
        *(unsigned char *)(v4 + 12) = 0;
      }
      v4 += 176;
    }
    goto LABEL_31;
  }
  *(double *)(a1 + 88) = v6;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 56);
  sub_639EF4(a2, (uint64_t)v19);
  sub_63A148(a1, v19);
  if ((v27 & 0x80000000) == 0)
  {
    if ((v25 & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_27:
    operator delete(v24);
    int v10 = v23;
    if (v23 != 1) {
      goto LABEL_23;
    }
    goto LABEL_28;
  }
  operator delete(__p);
  if (v25 < 0) {
    goto LABEL_27;
  }
LABEL_22:
  int v10 = v23;
  if (v23 != 1)
  {
LABEL_23:
    if (!v10 && v22 < 0)
    {
      uint64_t v11 = v20;
LABEL_30:
      operator delete(v11);
      goto LABEL_31;
    }
    goto LABEL_31;
  }
LABEL_28:
  uint64_t v11 = v20;
  if (v20)
  {
    int v21 = v20;
    goto LABEL_30;
  }
LABEL_31:
  if (*(_DWORD *)(a1 + 20) == -1 && *(_DWORD *)(a1 + 24) == -1)
  {
    uint64_t v18 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 40);
    *(void *)(a1 + 20) = v18;
    if (*(void *)(a1 + 8) != -1)
    {
LABEL_34:
      uint64_t v12 = *(void *)(a1 + 80);
      if (*(_OWORD *)(a1 + 72) != 0) {
        goto LABEL_35;
      }
LABEL_39:
      *(unsigned char *)(a2 + 12) = 1;
      *(void *)(a1 + 80) = v12 + 1;
      long long v13 = *(_OWORD **)(a1 + 40);
      if ((unint64_t)v13 < *(void *)(a1 + 48)) {
        goto LABEL_36;
      }
LABEL_40:
      uint64_t result = sub_63DBB4((void **)(a1 + 32), (_OWORD *)a2);
      goto LABEL_41;
    }
  }
  else if (*(void *)(a1 + 8) != -1)
  {
    goto LABEL_34;
  }
  *(void *)(a1 + 8) = *(void *)a2;
  uint64_t v12 = *(void *)(a1 + 80);
  if (*(_OWORD *)(a1 + 72) == 0) {
    goto LABEL_39;
  }
LABEL_35:
  *(void *)(a1 + 80) = v12 + 1;
  long long v13 = *(_OWORD **)(a1 + 40);
  if ((unint64_t)v13 >= *(void *)(a1 + 48)) {
    goto LABEL_40;
  }
LABEL_36:
  long long v14 = *(_OWORD *)a2;
  long long v15 = *(_OWORD *)(a2 + 16);
  long long v16 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)((char *)v13 + 41) = *(_OWORD *)(a2 + 41);
  v13[1] = v15;
  v13[2] = v16;
  *long long v13 = v14;
  sub_4F57A0((uint64_t)(v13 + 4), a2 + 64);
  uint64_t result = v13 + 11;
  *(void *)(a1 + 40) = v13 + 11;
LABEL_41:
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_63A740(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_639C78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_63A754(_Unwind_Exception *a1)
{
  *(void *)(v1 + 40) = v2;
  _Unwind_Resume(a1);
}

BOOL sub_63A760(uint64_t a1)
{
  return *(void *)(a1 + 72) != 0;
}

BOOL sub_63A770(uint64_t a1)
{
  return *(void *)(a1 + 80) != 0;
}

BOOL sub_63A780(void *a1, uint64_t a2, void *a3, void *a4)
{
  if (a1[4] == a1[5]) {
    return 1;
  }
  if ((*(_DWORD *)(a2 + 8) - 1) > 1) {
    return *a4 <= *a3;
  }
  if (a1[7]) {
    return 0;
  }
  return !a1[8] && *a4 <= *a3;
}

uint64_t sub_63A7D8(uint64_t a1)
{
  return (-93 * ((*(_DWORD *)(a1 + 40) - *(_DWORD *)(a1 + 32)) >> 4));
}

uint64_t sub_63A7FC(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 64) + *(unsigned char *)(a1 + 56));
}

uint64_t sub_63A810(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 80) + *(unsigned char *)(a1 + 72));
}

unsigned int sub_63A824(uint64_t a1)
{
  double v1 = *(double *)(a1 + 88);
  if (!*(unsigned char *)(a1 + 96)) {
    double v1 = v1 / 1.609344;
  }
  return llround(v1);
}

uint64_t sub_63A848(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v1 + 96) == 1)
  {
    uint64_t v2 = (uint64_t *)(v1 + 64);
    return *(void *)v2[1];
  }
  if (atomic_load_explicit((atomic_uchar *volatile)&qword_24F6970, memory_order_acquire)) {
    return *(void *)off_24F6958;
  }
  int v4 = __cxa_guard_acquire(&qword_24F6970);
  uint64_t v2 = &qword_24F6950;
  if (!v4) {
    return *(void *)v2[1];
  }
  qword_24F6950 = -1;
  qword_24F6960 = 0;
  unk_24F6968 = 0;
  off_24F6958 = 0;
  __cxa_guard_release(&qword_24F6970);
  return *(void *)off_24F6958;
}

BOOL sub_63A8F8(uint64_t a1)
{
  return *(void *)(a1 + 56) != 0;
}

BOOL sub_63A908(uint64_t a1)
{
  return *(void *)(a1 + 64) != 0;
}

uint64_t sub_63A918(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  if (v1) {
    BOOL v2 = (v1 + *(_DWORD *)(a1 + 72)) == 1;
  }
  else {
    BOOL v2 = 0;
  }
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v5 = v4 & 0x7FFFFFFFFFFFFFFFLL;
  BOOL v6 = (v4 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
  BOOL v7 = v4 < 0;
  BOOL v8 = v4 < 0 && ((v4 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
  if (!v7) {
    BOOL v6 = 0;
  }
  BOOL v9 = v5 <= 0x7FF0000000000000;
  int v10 = v5 == 0x7FF0000000000000 || v6;
  if (!v9) {
    int v10 = 1;
  }
  unsigned int v11 = v10 | v8;
  if (*(double *)(a1 + 88) <= 0.0) {
    return 1;
  }
  else {
    return v11;
  }
}

uint64_t sub_63A998(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  BOOL v2 = (v1 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if ((unint64_t)(v1 - 1) < 0xFFFFFFFFFFFFFLL) {
    BOOL v2 = 1;
  }
  unsigned int v4 = ((v1 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF && v1 >= 0 || v2;
  if (*(double *)(a1 + 88) > 0.0) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t sub_63A9DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  if (v1) {
    BOOL v2 = (v1 + *(_DWORD *)(a1 + 72)) == 1;
  }
  else {
    BOOL v2 = 0;
  }
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 88);
  BOOL v5 = (v4 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if ((unint64_t)(v4 - 1) < 0xFFFFFFFFFFFFFLL) {
    BOOL v5 = 1;
  }
  unsigned int v7 = ((v4 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF && v4 >= 0 || v5;
  if (*(double *)(a1 + 88) > 0.0) {
    return v7;
  }
  else {
    return 0;
  }
}

BOOL sub_63AA44(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  return (((_BYTE)v1 + *(void *)(a1 + 72)) & 0xFE) != 0
      && v1 == (v1 + *(void *)(a1 + 72));
}

BOOL sub_63AA60(uint64_t a1)
{
  return *(void *)(a1 + 72) || *(void *)(a1 + 80) != 0;
}

BOOL sub_63AA80(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 72);
  return (*(_DWORD *)(a1 + 80) + v1) == 1 && v1 != 0;
}

BOOL sub_63AAA0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 72);
  return ((*(void *)(a1 + 80) + (_BYTE)v1) & 0xFE) != 0
      && v1 == (*(void *)(a1 + 80) + v1);
}

BOOL sub_63AABC(void *a1)
{
  uint64_t v1 = a1[9];
  uint64_t v2 = a1[10];
  if (v2) {
    BOOL v3 = v1 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  return !v3 && (v2 + v1) == 2 && a1[7] != 0;
}

BOOL sub_63AAF0(void *a1)
{
  uint64_t v1 = a1[9];
  uint64_t v2 = a1[10];
  if (v2) {
    BOOL v3 = v1 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  return !v3 && (v2 + v1) == 2 && a1[8] != 0;
}

BOOL sub_63AB24(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 72);
  uint64_t v2 = *(void *)(a1 + 80);
  if (v1) {
    BOOL v3 = (v2 + v1) > 2u;
  }
  else {
    BOOL v3 = 0;
  }
  return v3 && v2 != 0;
}

BOOL sub_63AB44(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32) == *(void *)(a1 + 40) || *(_DWORD *)(a1 + 20) == -1 && *(_DWORD *)(a1 + 24) == -1) {
    return 0;
  }
  if (*(void *)(a1 + 8) == -1 || *(void *)(a2 + 32) == *(void *)(a2 + 40)) {
    return 0;
  }
  if ((*(_DWORD *)(a2 + 20) & *(_DWORD *)(a2 + 24)) == -1 || *(void *)(a2 + 8) == -1) {
    return 0;
  }
  if (*(void *)(a2 + 56) && *(void *)(a1 + 56)) {
    return 1;
  }
  if (!*(void *)(a2 + 64)) {
    return 0;
  }
  return *(void *)(a1 + 64) != 0;
}

void *sub_63ABD0(void *a1, void *a2)
{
  *a1 = *a2;
  sub_6F30A4((uint64_t)(a1 + 1));
  a1[20] = -1;
  a1[21] = -1;
  a1[22] = 0;
  return a1;
}

uint64_t sub_63AC0C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)a1 = *a2;
  sub_6F30A4(a1 + 8);
  *(void *)(a1 + 160) = a3;
  *(void *)(a1 + 168) = a4;
  *(_WORD *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + 178) = 0;
  *(unsigned char *)(a1 + 179) = a5;
  *(_DWORD *)(a1 + 180) = 0;
  return a1;
}

uint64_t sub_63AC64(uint64_t a1, void *a2, char a3)
{
  *(void *)a1 = *a2;
  sub_6F30A4(a1 + 8);
  *(void *)(a1 + 160) = -1;
  *(void *)(a1 + 168) = -1;
  *(_DWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 179) = 0;
  *(unsigned char *)(a1 + 183) = a3;
  return a1;
}

BOOL sub_63ACAC(uint64_t a1)
{
  return sub_6F2FD8(a1 + 8);
}

BOOL sub_63ACB4(uint64_t a1)
{
  return *(void *)(a1 + 168) != -1;
}

BOOL sub_63ACC4(void *a1, void *a2, void *a3)
{
  return *a1 < *a2 && *a1 > *a3;
}

BOOL sub_63ACE0(uint64_t a1)
{
  return *(void *)(a1 + 56) != *(void *)(a1 + 64)
      && (*(_DWORD *)(a1 + 44) != -1 || *(_DWORD *)(a1 + 48) != -1)
      && *(void *)(a1 + 32) != -1;
}

uint64_t sub_63AD1C@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = 0;
  return sub_63AD48(a1, a2, &v5, a3, a4);
}

uint64_t sub_63AD48@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a3;
  if (*a2 <= *a3 || (BOOL v9 = *a1, v8 = a1[1], *a1 == v8))
  {
LABEL_20:
    *(_OWORD *)(a5 + 168) = 0u;
    *(_OWORD *)(a5 + 152) = 0u;
    *(_OWORD *)(a5 + 136) = 0u;
    *(_OWORD *)(a5 + 120) = 0u;
    *(_OWORD *)(a5 + 104) = 0u;
    *(_OWORD *)(a5 + 88) = 0u;
    *(_OWORD *)(a5 + 72) = 0u;
    *(_OWORD *)(a5 + 56) = 0u;
    *(_OWORD *)(a5 + 40) = 0u;
    *(_OWORD *)(a5 + 24) = 0u;
    *(_OWORD *)(a5 + 8) = 0u;
    *(void *)a5 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t result = sub_6F30A4(a5 + 8);
    *(void *)(a5 + 160) = -1;
    *(void *)(a5 + 168) = -1;
    *(void *)(a5 + 176) = 0;
  }
  else
  {
    if (a4)
    {
      while (1)
      {
        if (*((unsigned char *)v9 + 176) && *((unsigned char *)v9 + 178))
        {
          uint64_t v10 = *v9;
          if (*v9 < v6 && v10 > v7) {
            break;
          }
        }
        v9 += 23;
        if (v9 == v8) {
          goto LABEL_20;
        }
      }
    }
    else
    {
      while (1)
      {
        if (*((unsigned char *)v9 + 176))
        {
          uint64_t v10 = *v9;
          if (*v9 < v6 && v10 > v7) {
            break;
          }
        }
        v9 += 23;
        if (v9 == v8) {
          goto LABEL_20;
        }
      }
    }
    *(void *)a5 = v10;
    uint64_t result = (uint64_t)sub_4AA8E0((char *)(a5 + 8), (long long *)(v9 + 1));
    long long v14 = *((_OWORD *)v9 + 10);
    *(void *)(a5 + 176) = v9[22];
    *(_OWORD *)(a5 + 160) = v14;
  }
  return result;
}

uint64_t sub_63AE58@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  if (a1[7] == a1[8]
    || *((_DWORD *)a1 + 11) == -1 && *((_DWORD *)a1 + 12) == -1
    || a1[4] == (uint64_t *)-1
    || (v6 = *a1, uint64_t v5 = a1[1], *a1 == v5))
  {
LABEL_14:
    *(_OWORD *)(a4 + 168) = 0u;
    *(_OWORD *)(a4 + 152) = 0u;
    *(_OWORD *)(a4 + 136) = 0u;
    *(_OWORD *)(a4 + 120) = 0u;
    *(_OWORD *)(a4 + 104) = 0u;
    *(_OWORD *)(a4 + 88) = 0u;
    *(_OWORD *)(a4 + 72) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 8) = 0u;
    *(void *)a4 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t result = sub_6F30A4(a4 + 8);
    *(void *)(a4 + 160) = -1;
    *(void *)(a4 + 168) = -1;
    *(void *)(a4 + 176) = 0;
  }
  else
  {
    while (1)
    {
      if (*((unsigned char *)v6 + 179))
      {
        uint64_t v7 = *v6;
        if (*v6 < *a2 && v7 > *a3) {
          break;
        }
      }
      v6 += 23;
      if (v6 == v5) {
        goto LABEL_14;
      }
    }
    *(void *)a4 = v7;
    uint64_t result = (uint64_t)sub_4AA8E0((char *)(a4 + 8), (long long *)(v6 + 1));
    long long v10 = *((_OWORD *)v6 + 10);
    *(void *)(a4 + 176) = v6[22];
    *(_OWORD *)(a4 + 160) = v10;
  }
  return result;
}

uint64_t sub_63AF5C@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = 0;
  return sub_63AE58(a1, a2, &v4, a3);
}

uint64_t sub_63AF84@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
LABEL_10:
    *(_OWORD *)(a4 + 168) = 0u;
    *(_OWORD *)(a4 + 152) = 0u;
    *(_OWORD *)(a4 + 136) = 0u;
    *(_OWORD *)(a4 + 120) = 0u;
    *(_OWORD *)(a4 + 104) = 0u;
    *(_OWORD *)(a4 + 88) = 0u;
    *(_OWORD *)(a4 + 72) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 8) = 0u;
    *(void *)a4 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t result = sub_6F30A4(a4 + 8);
    *(void *)(a4 + 160) = -1;
    *(void *)(a4 + 168) = -1;
    *(void *)(a4 + 176) = 0;
  }
  else
  {
    while (1)
    {
      if (v6[21] != -1)
      {
        uint64_t v7 = *v6;
        if (*v6 < *a2 && v7 > *a3) {
          break;
        }
      }
      v6 += 23;
      if (v6 == v5) {
        goto LABEL_10;
      }
    }
    *(void *)a4 = v7;
    uint64_t result = (uint64_t)sub_4AA8E0((char *)(a4 + 8), (long long *)(v6 + 1));
    long long v10 = *((_OWORD *)v6 + 10);
    *(void *)(a4 + 176) = v6[22];
    *(_OWORD *)(a4 + 160) = v10;
  }
  return result;
}

uint64_t sub_63B05C@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
LABEL_10:
    *(_OWORD *)(a4 + 168) = 0u;
    *(_OWORD *)(a4 + 152) = 0u;
    *(_OWORD *)(a4 + 136) = 0u;
    *(_OWORD *)(a4 + 120) = 0u;
    *(_OWORD *)(a4 + 104) = 0u;
    *(_OWORD *)(a4 + 88) = 0u;
    *(_OWORD *)(a4 + 72) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 8) = 0u;
    *(void *)a4 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t result = sub_6F30A4(a4 + 8);
    *(void *)(a4 + 160) = -1;
    *(void *)(a4 + 168) = -1;
    *(void *)(a4 + 176) = 0;
  }
  else
  {
    while (1)
    {
      if (*((unsigned char *)v6 + 183))
      {
        uint64_t v7 = *v6;
        if (*v6 < *a2 && v7 > *a3) {
          break;
        }
      }
      v6 += 23;
      if (v6 == v5) {
        goto LABEL_10;
      }
    }
    *(void *)a4 = v7;
    uint64_t result = (uint64_t)sub_4AA8E0((char *)(a4 + 8), (long long *)(v6 + 1));
    long long v10 = *((_OWORD *)v6 + 10);
    *(void *)(a4 + 176) = v6[22];
    *(_OWORD *)(a4 + 160) = v10;
  }
  return result;
}

uint64_t sub_63B130@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 == v4)
  {
LABEL_10:
    *(_OWORD *)(a3 + 168) = 0u;
    *(_OWORD *)(a3 + 152) = 0u;
    *(_OWORD *)(a3 + 136) = 0u;
    *(_OWORD *)(a3 + 120) = 0u;
    *(_OWORD *)(a3 + 104) = 0u;
    *(_OWORD *)(a3 + 88) = 0u;
    *(_OWORD *)(a3 + 72) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 8) = 0u;
    *(void *)a3 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t result = sub_6F30A4(a3 + 8);
    *(void *)(a3 + 160) = -1;
    *(void *)(a3 + 168) = -1;
    *(void *)(a3 + 176) = 0;
  }
  else
  {
    while (1)
    {
      if (*((unsigned char *)v5 + 183))
      {
        uint64_t v6 = *v5;
        if (*v5 < *a2 && v6 > 0) {
          break;
        }
      }
      v5 += 23;
      if (v5 == v4) {
        goto LABEL_10;
      }
    }
    *(void *)a3 = v6;
    uint64_t result = (uint64_t)sub_4AA8E0((char *)(a3 + 8), (long long *)(v5 + 1));
    long long v9 = *((_OWORD *)v5 + 10);
    *(void *)(a3 + 176) = v5[22];
    *(_OWORD *)(a3 + 160) = v9;
  }
  return result;
}

uint64_t sub_63B200(void *a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(a2 + 16);
  if (v2)
  {
    uint64_t result = 0;
    while (2)
    {
      uint64_t v5 = a1;
      switch(*((_DWORD *)v2 + 4))
      {
        case 0:
          goto LABEL_4;
        case 1:
          result += a1[1];
          uint64_t v2 = (uint64_t *)*v2;
          if (v2) {
            continue;
          }
          return result;
        case 2:
          result += a1[2];
          uint64_t v2 = (uint64_t *)*v2;
          if (v2) {
            continue;
          }
          return result;
        case 3:
          uint64_t v5 = a1 + 3;
LABEL_4:
          result += *v5;
          uint64_t v2 = (uint64_t *)*v2;
          if (v2) {
            continue;
          }
          return result;
        default:
          uint64_t v2 = (uint64_t *)*v2;
          if (v2) {
            continue;
          }
          return result;
      }
    }
  }
  return 0;
}

void *sub_63B2C0(void *result, int a2, uint64_t a3)
{
  switch(a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      ++result;
      goto LABEL_5;
    case 2:
      result += 2;
      goto LABEL_5;
    case 3:
      result += 3;
LABEL_5:
      *result += a3;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_63B320(uint64_t *a1)
{
  uint64_t v1 = a1[1];
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  if (*a1 <= v1) {
    uint64_t v4 = a1[1];
  }
  else {
    uint64_t v4 = *a1;
  }
  if (v4 <= v2) {
    uint64_t v5 = a1[2];
  }
  else {
    uint64_t v5 = v4;
  }
  if (v4 < v2) {
    uint64_t v4 = a1[2];
  }
  if (v5 >= v3) {
    uint64_t v3 = v4;
  }
  if (v3 == *a1) {
    return 0;
  }
  if (v3 == v1) {
    return 1;
  }
  if (v3 == v2) {
    return 2;
  }
  return 3;
}

uint64_t sub_63B374(uint64_t a1, void *a2, uint64_t *a3, char a4)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = *a2;
  uint64_t v6 = *a3;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = -1;
  *(void *)(a1 + 32) = -1;
  *(int64x2_t *)(a1 + 40) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0x8000000080000000;
  sub_5F3B34(a1 + 96);
  sub_5F3B34(a1 + 256);
  *(_DWORD *)(a1 + 448) = -1;
  *(_DWORD *)(a1 + 456) = -1;
  *(_DWORD *)(a1 + 459) = -1;
  *(void *)(a1 + 463) = 0;
  *(void *)(a1 + 479) = 0;
  *(void *)(a1 + 471) = 0;
  *(_WORD *)(a1 + 487) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 496) = 0;
  *(unsigned char *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(unsigned char *)(a1 + 576) = a4;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  return a1;
}

void sub_63B43C(_Unwind_Exception *a1)
{
  sub_4D4B58(v2);
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 64) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_63B468(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4, char a5)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = *a2;
  uint64_t v7 = *a3;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 24) = -1;
  *(void *)(a1 + 32) = -1;
  *(void *)(a1 + 16) = v7;
  *(int64x2_t *)(a1 + 40) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  long long v9 = *(const void **)a4;
  uint64_t v8 = *(void *)(a4 + 8);
  int64_t v10 = v8 - *(void *)a4;
  if (v8 != *(void *)a4)
  {
    if (v10 < 0) {
      sub_2E00();
    }
    unsigned int v11 = (char *)operator new(v8 - *(void *)a4);
    *(void *)(a1 + 56) = v11;
    *(void *)(a1 + 64) = v11;
    uint64_t v12 = &v11[8 * (v10 >> 3)];
    *(void *)(a1 + 72) = v12;
    memcpy(v11, v9, v10);
    *(void *)(a1 + 64) = v12;
  }
  *(void *)(a1 + 80) = 0x8000000080000000;
  sub_5F3B34(a1 + 96);
  sub_5F3B34(a1 + 256);
  *(_DWORD *)(a1 + 448) = -1;
  *(_DWORD *)(a1 + 456) = -1;
  *(_DWORD *)(a1 + 459) = -1;
  *(void *)(a1 + 463) = 0;
  *(void *)(a1 + 479) = 0;
  *(void *)(a1 + 471) = 0;
  *(_WORD *)(a1 + 487) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 496) = 0;
  *(unsigned char *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(unsigned char *)(a1 + 576) = a5;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  return a1;
}

void sub_63B57C(_Unwind_Exception *a1)
{
  sub_4D4B58(v3);
  uint64_t v5 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 64) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_63B5B0(uint64_t a1, char a2, void *a3, uint64_t *a4, char a5)
{
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 4) = a2;
  *(void *)(a1 + 8) = *a3;
  uint64_t v7 = *a4;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = -1;
  *(void *)(a1 + 32) = -1;
  *(int64x2_t *)(a1 + 40) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0x8000000080000000;
  sub_5F3B34(a1 + 96);
  sub_5F3B34(a1 + 256);
  *(_DWORD *)(a1 + 448) = -1;
  *(_DWORD *)(a1 + 456) = -1;
  *(_DWORD *)(a1 + 459) = -1;
  *(void *)(a1 + 463) = 0;
  *(void *)(a1 + 479) = 0;
  *(void *)(a1 + 471) = 0;
  *(_WORD *)(a1 + 487) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 496) = 0;
  *(unsigned char *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(unsigned char *)(a1 + 576) = a5;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  return a1;
}

void sub_63B67C(_Unwind_Exception *a1)
{
  sub_4D4B58(v2);
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 64) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_63B6A8(uint64_t a1, char a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 4) = a2;
  *(void *)(a1 + 8) = *a3;
  uint64_t v10 = *a4;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  *(int64x2_t *)(a1 + 40) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v12 = *(const void **)a7;
  uint64_t v11 = *(void *)(a7 + 8);
  int64_t v13 = v11 - *(void *)a7;
  if (v11 != *(void *)a7)
  {
    if (v13 < 0) {
      sub_2E00();
    }
    long long v14 = (char *)operator new(v11 - *(void *)a7);
    *(void *)(a1 + 56) = v14;
    *(void *)(a1 + 64) = v14;
    long long v15 = &v14[8 * (v13 >> 3)];
    *(void *)(a1 + 72) = v15;
    memcpy(v14, v12, v13);
    *(void *)(a1 + 64) = v15;
  }
  *(void *)(a1 + 80) = 0x8000000080000000;
  sub_5F3B34(a1 + 96);
  sub_5F3B34(a1 + 256);
  *(_DWORD *)(a1 + 448) = -1;
  *(_DWORD *)(a1 + 456) = -1;
  *(_DWORD *)(a1 + 459) = -1;
  *(void *)(a1 + 463) = 0;
  *(void *)(a1 + 479) = 0;
  *(void *)(a1 + 471) = 0;
  *(_WORD *)(a1 + 487) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 496) = 0;
  *(unsigned char *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(unsigned char *)(a1 + 576) = a8;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  return a1;
}

void sub_63B7BC(_Unwind_Exception *a1)
{
  sub_4D4B58(v3);
  uint64_t v5 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 64) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_63B7F0(uint64_t a1, char a2, void *a3, uint64_t *a4, uint64_t a5, char a6)
{
  uint64_t v12 = a5;
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 4) = a2;
  *(void *)(a1 + 8) = *a3;
  uint64_t v10 = *a4;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 24) = -1;
  *(void *)(a1 + 32) = -1;
  *(void *)(a1 + 16) = v10;
  *(int64x2_t *)(a1 + 40) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0x8000000080000000;
  sub_5F3B34(a1 + 96);
  sub_5F3B34(a1 + 256);
  *(_DWORD *)(a1 + 448) = -1;
  *(_DWORD *)(a1 + 456) = -1;
  *(_DWORD *)(a1 + 459) = -1;
  *(void *)(a1 + 463) = 0;
  *(void *)(a1 + 479) = 0;
  *(void *)(a1 + 471) = 0;
  *(_WORD *)(a1 + 487) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 496) = 0;
  *(unsigned char *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(unsigned char *)(a1 + 576) = a6;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  sub_63B948(a1 + 552, a3, a4, &v12);
  return a1;
}

void sub_63B8FC(_Unwind_Exception *a1)
{
  uint64_t v6 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 560) = v6;
    operator delete(v6);
  }
  sub_510298(v2);
  uint64_t v7 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 64) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

void *sub_63B948(uint64_t a1, void *a2, void *a3, uint64_t *a4)
{
  long long v9 = *(void **)(a1 + 8);
  unint64_t v8 = *(void *)(a1 + 16);
  if ((unint64_t)v9 < v8)
  {
    uint64_t v10 = *a4;
    *long long v9 = *a2;
    v9[1] = *a3;
    v9[2] = v10;
    uint64_t v11 = v9 + 3;
    goto LABEL_14;
  }
  uint64_t v12 = *(void **)a1;
  unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *(void *)a1) >> 3);
  unint64_t v14 = v13 + 1;
  if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)v12) >> 3);
  if (2 * v15 > v14) {
    unint64_t v14 = 2 * v15;
  }
  if (v15 >= 0x555555555555555) {
    unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v16 = v14;
  }
  if (v16 > 0xAAAAAAAAAAAAAAALL) {
    sub_188D718();
  }
  uint64_t v17 = 24 * v16;
  uint64_t v18 = (char *)operator new(24 * v16);
  uint64_t v19 = &v18[24 * v13];
  long long v20 = &v18[v17];
  uint64_t v21 = *a4;
  uint64_t v22 = *a3;
  *(void *)uint64_t v19 = *a2;
  *((void *)v19 + 1) = v22;
  *((void *)v19 + 2) = v21;
  uint64_t v11 = v19 + 24;
  if (v9 == v12)
  {
    *(void *)a1 = v19;
    *(void *)(a1 + 8) = v11;
    *(void *)(a1 + 16) = v20;
    if (!v12) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  do
  {
    long long v23 = *(_OWORD *)(v9 - 3);
    uint64_t v24 = v19 - 24;
    *((void *)v19 - 1) = *(v9 - 1);
    *(_OWORD *)(v19 - 24) = v23;
    v9 -= 3;
    v19 -= 24;
  }
  while (v9 != v12);
  *(void *)a1 = v24;
  *(void *)(a1 + 8) = v11;
  *(void *)(a1 + 16) = v20;
  if (v12) {
LABEL_13:
  }
    operator delete(v12);
LABEL_14:
  *(void *)(a1 + 8) = v11;
  return v11 - 3;
}

void *sub_63BAB4(void *result, void *a2)
{
  result[2] = a2[2];
  result[4] = a2[4];
  uint64_t v2 = (void *)a2[69];
  uint64_t v3 = (void *)a2[70];
  if (v2 != v3)
  {
    uint64_t v4 = result;
    uint64_t v5 = (uint64_t)(result + 69);
    uint64_t v6 = v2 + 1;
    do
    {
      while (1)
      {
        uint64_t v8 = v6[1];
        uint64_t v11 = v8;
        uint64_t v9 = v4[70];
        if (v4[69] != v9 && *(void *)(v9 - 8) == v8) {
          break;
        }
        uint64_t result = sub_63B948(v5, v6 - 1, v6, &v11);
        uint64_t v7 = v6 + 2;
        v6 += 3;
        if (v7 == v3) {
          return result;
        }
      }
      *(void *)(v9 - 16) = *v6;
      uint64_t v10 = v6 + 2;
      v6 += 3;
    }
    while (v10 != v3);
  }
  return result;
}

void *sub_63BB70@<X0>(int a1@<W0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  switch(a1)
  {
    case 1:
      unsigned int v4 = *(_DWORD *)(a2 + 32);
      uint64_t v5 = *(unsigned int *)(a2 + 36);
      break;
    case 2:
      unsigned int v4 = *(_DWORD *)(a2 + 48);
      int v6 = *(unsigned __int8 *)(a2 + 64);
      uint64_t v7 = (unsigned int *)(a2 + 52);
      goto LABEL_10;
    case 3:
      unsigned int v4 = *(_DWORD *)(a2 + 16);
      uint64_t v5 = *(unsigned int *)(a2 + 20);
      break;
    case 4:
      unsigned int v4 = *(_DWORD *)(a2 + 8);
      uint64_t v5 = *(unsigned int *)(a2 + 12);
      break;
    case 5:
      unsigned int v4 = *(_DWORD *)a2;
      uint64_t v5 = *(unsigned int *)(a2 + 4);
      break;
    case 6:
      unsigned int v4 = *(_DWORD *)(a2 + 48);
      int v6 = *(unsigned __int8 *)(a2 + 64);
      uint64_t v7 = (unsigned int *)(a2 + 56);
      goto LABEL_10;
    case 7:
      unsigned int v4 = *(_DWORD *)(a2 + 48);
      int v6 = *(unsigned __int8 *)(a2 + 64);
      uint64_t v7 = (unsigned int *)(a2 + 60);
LABEL_10:
      if (v6) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = (unsigned int *)(a2 + 68);
      }
      uint64_t v5 = *v8;
      break;
    case 8:
      unsigned int v4 = *(_DWORD *)(a2 + 72);
      uint64_t v5 = *(unsigned int *)(a2 + 76);
      break;
    case 9:
      unsigned int v4 = *(_DWORD *)(a2 + 40);
      uint64_t v5 = *(unsigned int *)(a2 + 44);
      break;
    default:
      unsigned int v4 = -1;
      uint64_t v5 = 0xFFFFFFFFLL;
      break;
  }
  uint64_t v9 = v4;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v10 = operator new(8uLL);
  *a3 = v10;
  *uint64_t v10 = v9 | (v5 << 32);
  uint64_t result = v10 + 1;
  a3[1] = result;
  a3[2] = result;
  return result;
}

uint64_t sub_63BC84(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 4) < 8u) & (0xC4u >> *(unsigned char *)(a1 + 4));
}

BOOL sub_63BCA0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1 == 0x7FFFFFFFFFFFFFFFLL) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 16);
  return v3 != 0x7FFFFFFFFFFFFFFFLL && v3 >= v1;
}

BOOL sub_63BCCC(uint64_t a1)
{
  return !sub_45FB38((void *)(a1 + 96)) && !sub_45FB38((void *)(a1 + 256));
}

uint64_t sub_63BD14(unsigned int a1)
{
  if (a1 < 0x4C) {
    int v1 = 3;
  }
  else {
    int v1 = 4;
  }
  if (a1 >= 0x33) {
    int v2 = v1;
  }
  else {
    int v2 = 2;
  }
  if (a1 >= 0x1A) {
    unsigned int v3 = v2;
  }
  else {
    unsigned int v3 = 1;
  }
  if (a1) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t sub_63BD44(int a1, double a2)
{
  uint64_t v8 = v2;
  uint64_t v9 = v3;
  switch(a1)
  {
    case 0:
      int64x2_t v4 = vdupq_n_s64(0x8000000000000000);
      goto LABEL_8;
    case 1:
      int64x2_t v4 = (int64x2_t)xmmword_20E8730;
      goto LABEL_8;
    case 2:
      int64x2_t v4 = (int64x2_t)xmmword_20E8720;
      goto LABEL_8;
    case 3:
      int64x2_t v4 = (int64x2_t)xmmword_20E8710;
      goto LABEL_8;
    case 4:
      int64x2_t v4 = (int64x2_t)xmmword_20E8700;
LABEL_8:
      int64x2_t v7 = v4;
      double v6 = sub_65CCC((double *)v7.i64, a2);
      uint64_t result = sub_63BDF8(round(v6));
      break;
    default:
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t sub_63BDF8(double a1)
{
  if (a1 < 0.0 || (uint64_t result = a1, (double)result != a1))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v9, a1);
    int64x2_t v4 = std::string::insert(&v9, 0, "narrowing ");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    double v6 = std::string::append(&v10, " failed");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v12 = v6->__r_.__value_.__r.__words[2];
    long long v11 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = (void *)sub_2F404((uint64_t)exception, &v11);
  }
  return result;
}

void sub_63BEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void sub_63BF60(uint64_t a1, int a2, unsigned int *a3, unsigned int a4, uint64_t a5, double a6)
{
  int v25 = a2;
  std::string::size_type v12 = (char *)operator new(0xCuLL);
  unint64_t v13 = v12 + 12;
  char v27 = v12 + 12;
  char v28 = v12 + 12;
  *(void *)std::string::size_type v12 = *(void *)a3;
  *((_DWORD *)v12 + 2) = a3[2];
  long long __p = v12;
  double v29 = a6;
  unsigned int v30 = a4;
  unint64_t v14 = *(void *)(a1 + 8);
  if (*(void *)a1 == v14 || *(_DWORD *)(v14 - 48) != a2) {
    goto LABEL_19;
  }
  uint64_t v15 = *(void *)(v14 - 32);
  if (*(void *)(v14 - 40) == v15)
  {
LABEL_27:
    sub_46C6C(v14 - 40, v15, v12, v13, 1);
    double v23 = *(double *)(v14 - 16);
    if (v23 <= a6) {
      double v23 = a6;
    }
    *(double *)(v14 - 16) = v23;
    unsigned int v24 = *(_DWORD *)(v14 - 8);
    if (a4 > v24) {
      unsigned int v24 = a4;
    }
    *(_DWORD *)(v14 - 8) = v24;
LABEL_32:
    char v27 = v12;
    operator delete(v12);
    return;
  }
  unint64_t v16 = *(unsigned int *)(v15 - 8) - (unint64_t)a3[1];
  double v17 = sqrt((double)((*(unsigned int *)(v15 - 12) - (unint64_t)*a3)
                    * (*(unsigned int *)(v15 - 12) - (unint64_t)*a3)
                    + v16 * v16))
      / 100.0
      * 100.0;
  if (v17 >= 0.0)
  {
    double v18 = v17;
    if (v17 >= 4.50359963e15) {
      goto LABEL_12;
    }
    uint64_t v19 = (uint64_t)(v17 + v17) + 1;
  }
  else
  {
    double v18 = v17;
    if (v17 <= -4.50359963e15) {
      goto LABEL_12;
    }
    uint64_t v19 = (uint64_t)(v17 + v17);
    if (v19 >= 1) {
      --v19;
    }
  }
  double v18 = (double)(v19 >> 1);
LABEL_12:
  if (v18 >= 9.22337204e18)
  {
    if (a5 != 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_19;
    }
    goto LABEL_27;
  }
  if (v17 >= 0.0)
  {
    if (v17 >= 4.50359963e15) {
      goto LABEL_26;
    }
    uint64_t v20 = (uint64_t)(v17 + v17) + 1;
  }
  else
  {
    if (v17 <= -4.50359963e15) {
      goto LABEL_26;
    }
    uint64_t v20 = (uint64_t)(v17 + v17);
    if (v20 >= 1) {
      --v20;
    }
  }
  double v17 = (double)(v20 >> 1);
LABEL_26:
  if ((uint64_t)v17 < a5) {
    goto LABEL_27;
  }
LABEL_19:
  if (v14 < *(void *)(a1 + 16))
  {
    *(_DWORD *)unint64_t v14 = a2;
    *(void *)(v14 + 8) = v12;
    *(void *)(v14 + 16) = v13;
    *(void *)(v14 + 24) = v13;
    double v21 = v29;
    *(_DWORD *)(v14 + 40) = v30;
    *(double *)(v14 + 32) = v21;
    *(void *)(a1 + 8) = v14 + 48;
    return;
  }
  uint64_t v22 = sub_63DF44((void **)a1, (uint64_t)&v25);
  std::string::size_type v12 = (char *)__p;
  *(void *)(a1 + 8) = v22;
  if (v12) {
    goto LABEL_32;
  }
}

void sub_63C1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  operator delete(v11);
  _Unwind_Resume(a1);
}

void sub_63C1CC(uint64_t a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, double a6)
{
  int v27 = a2;
  double v29 = 0;
  unsigned int v30 = 0;
  long long __p = 0;
  std::string::size_type v12 = *(unsigned int **)a3;
  uint64_t v11 = *(void *)(a3 + 8);
  int64_t v13 = v11 - *(void *)a3;
  if (v11 == *(void *)a3)
  {
    uint64_t v15 = 0;
    unint64_t v14 = 0;
    double v31 = a6;
    unsigned int v32 = a4;
    unint64_t v16 = *(void *)(a1 + 8);
    if (*(void *)a1 == v16) {
      goto LABEL_23;
    }
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v13 >> 2) >= 0x1555555555555556) {
      sub_2E00();
    }
    unint64_t v14 = (char *)operator new(v13);
    uint64_t v15 = &v14[4 * (v13 >> 2)];
    long long __p = v14;
    unsigned int v30 = v15;
    memcpy(v14, v12, v13);
    double v29 = v15;
    double v31 = a6;
    unsigned int v32 = a4;
    unint64_t v16 = *(void *)(a1 + 8);
    if (*(void *)a1 == v16)
    {
LABEL_23:
      if (v16 >= *(void *)(a1 + 16))
      {
        *(void *)(a1 + 8) = sub_63DF44((void **)a1, (uint64_t)&v27);
        unsigned int v24 = (char *)__p;
        if (!__p) {
          return;
        }
      }
      else
      {
        *(_DWORD *)unint64_t v16 = a2;
        *(void *)(v16 + 16) = v15;
        *(void *)(v16 + 24) = 0;
        *(void *)(v16 + 8) = v14;
        *(void *)(v16 + 24) = v30;
        long long __p = 0;
        double v29 = 0;
        unsigned int v30 = 0;
        unsigned int v23 = v32;
        *(double *)(v16 + 32) = v31;
        *(_DWORD *)(v16 + 40) = v23;
        *(void *)(a1 + 8) = v16 + 48;
        unsigned int v24 = (char *)__p;
        if (!__p) {
          return;
        }
      }
      goto LABEL_27;
    }
  }
  if (*(_DWORD *)(v16 - 48) != a2) {
    goto LABEL_23;
  }
  uint64_t v17 = *(void *)(v16 - 32);
  if (*(void *)(v16 - 40) != v17)
  {
    unint64_t v18 = *(unsigned int *)(v17 - 8) - (unint64_t)v12[1];
    double v19 = sqrt((double)((*(unsigned int *)(v17 - 12) - (unint64_t)*v12)
                      * (*(unsigned int *)(v17 - 12) - (unint64_t)*v12)
                      + v18 * v18))
        / 100.0
        * 100.0;
    if (v19 >= 0.0)
    {
      double v20 = v19;
      if (v19 >= 4.50359963e15) {
        goto LABEL_16;
      }
      uint64_t v21 = (uint64_t)(v19 + v19) + 1;
    }
    else
    {
      double v20 = v19;
      if (v19 <= -4.50359963e15) {
        goto LABEL_16;
      }
      uint64_t v21 = (uint64_t)(v19 + v19);
      if (v21 >= 1) {
        --v21;
      }
    }
    double v20 = (double)(v21 >> 1);
LABEL_16:
    if (v20 >= 9.22337204e18)
    {
      if (a5 != 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_23;
      }
      goto LABEL_33;
    }
    if (v19 >= 0.0)
    {
      if (v19 >= 4.50359963e15) {
        goto LABEL_32;
      }
      uint64_t v22 = (uint64_t)(v19 + v19) + 1;
    }
    else
    {
      if (v19 <= -4.50359963e15) {
        goto LABEL_32;
      }
      uint64_t v22 = (uint64_t)(v19 + v19);
      if (v22 >= 1) {
        --v22;
      }
    }
    double v19 = (double)(v22 >> 1);
LABEL_32:
    if ((uint64_t)v19 >= a5) {
      goto LABEL_23;
    }
  }
LABEL_33:
  sub_46C6C(v16 - 40, v17, v14, v15, 0xAAAAAAAAAAAAAAABLL * ((v15 - v14) >> 2));
  double v25 = v31;
  if (v31 < *(double *)(v16 - 16)) {
    double v25 = *(double *)(v16 - 16);
  }
  *(double *)(v16 - 16) = v25;
  unsigned int v26 = v32;
  if (v32 <= *(_DWORD *)(v16 - 8)) {
    unsigned int v26 = *(_DWORD *)(v16 - 8);
  }
  *(_DWORD *)(v16 - 8) = v26;
  unsigned int v24 = (char *)__p;
  if (__p)
  {
LABEL_27:
    double v29 = v24;
    operator delete(v24);
  }
}

void sub_63C4BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_63C4E0@<D0>(int a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 0:
      *(unsigned char *)(a2 + 23) = 19;
      *(void *)&long long v3 = *(void *)"No anomaly detected";
      strcpy((char *)a2, "No anomaly detected");
      break;
    case 1:
      int64x2_t v4 = (char *)operator new(0x28uLL);
      *(void *)a2 = v4;
      *(_OWORD *)(a2 + 8) = xmmword_20B8FD0;
      *(void *)&long long v3 = *(void *)"In segment opposite travel direction";
      strcpy(v4, "In segment opposite travel direction");
      break;
    case 2:
      long long v5 = (char *)operator new(0x28uLL);
      *(void *)a2 = v5;
      *(_OWORD *)(a2 + 8) = xmmword_20E12D0;
      *(void *)&long long v3 = *(void *)"Self intersections in a short distance";
      strcpy(v5, "Self intersections in a short distance");
      break;
    case 3:
      double v6 = (char *)operator new(0x20uLL);
      *(void *)a2 = v6;
      *(_OWORD *)(a2 + 8) = xmmword_20B9800;
      strcpy(v6, "Sharp jags in a short distance");
      *(void *)&long long v3 = *(void *)"a short distance";
      break;
    case 4:
      long long v7 = (char *)operator new(0x28uLL);
      *(void *)a2 = v7;
      *(_OWORD *)(a2 + 8) = xmmword_20B9240;
      uint64_t v8 = "Different bearings to the center line";
      goto LABEL_10;
    case 5:
      std::string v9 = (char *)operator new(0x50uLL);
      *(void *)a2 = v9;
      *(_OWORD *)(a2 + 8) = xmmword_20B9420;
      *(void *)&long long v3 = *(void *)"he new flowline has big bearing difference to previous flowline";
      strcpy(v9, "First point of the new flowline has big bearing difference to previous flowline");
      break;
    case 6:
      long long v7 = (char *)operator new(0x28uLL);
      *(void *)a2 = v7;
      *(_OWORD *)(a2 + 8) = xmmword_20B9240;
      uint64_t v8 = "Outside of transport network polygons";
LABEL_10:
      long long v3 = *(_OWORD *)v8;
      long long v10 = *((_OWORD *)v8 + 1);
      *(_OWORD *)long long v7 = *(_OWORD *)v8;
      *((_OWORD *)v7 + 1) = v10;
      *(void *)(v7 + 29) = *(void *)(v8 + 29);
      v7[37] = 0;
      break;
    case 7:
      *(unsigned char *)(a2 + 23) = 20;
      *(void *)&long long v3 = *(void *)"Excessive tortuosity";
      strcpy((char *)a2, "Excessive tortuosity");
      break;
    case 8:
      *(unsigned char *)(a2 + 23) = 14;
      strcpy((char *)a2, "Bad elevations");
      break;
    case 9:
      uint64_t v11 = (char *)operator new(0x38uLL);
      *(void *)a2 = v11;
      *(_OWORD *)(a2 + 8) = xmmword_20B99F0;
      strcpy(v11, "Excessive segment geometry points association ratio");
      *(void *)&long long v3 = *(void *)"s association ratio";
      break;
    case 10:
      *(unsigned char *)(a2 + 23) = 17;
      *(void *)&long long v3 = *(void *)"High acceleration";
      strcpy((char *)a2, "High acceleration");
      break;
    default:
      *(unsigned char *)(a2 + 23) = 10;
      strcpy((char *)a2, "No Anomaly");
      break;
  }
  return *(double *)&v3;
}

void sub_63C7FC(uint64_t a1, int a2, int a3, double a4)
{
  int v10 = a2;
  uint64_t v11 = &v10;
  long long v7 = sub_63E0E8(a1 + 24, &v10, (uint64_t)&unk_20F06E0, &v11);
  *((_DWORD *)v7 + 6) = a2;
  std::string v9 = v7 + 32;
  uint64_t v8 = (void *)*((void *)v7 + 4);
  if (v8)
  {
    *((void *)v7 + 5) = v8;
    operator delete(v8);
    *std::string v9 = 0;
    *((void *)v7 + 5) = 0;
    *((void *)v7 + 6) = 0;
  }
  *std::string v9 = 0;
  *((void *)v7 + 5) = 0;
  *((void *)v7 + 6) = 0;
  *((double *)v7 + 7) = a4;
  *((_DWORD *)v7 + 16) = a3;
}

void sub_63C898(uint64_t a1, std::string *__str, std::string *a3, size_t __sz)
{
  double v6 = __str;
  uint64_t v8 = *(void *)(a1 + 16);
  std::string v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)a1) >> 3) >= __sz)
  {
    std::string::size_type v12 = *(std::string **)(a1 + 8);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v9) >> 3) >= __sz)
    {
      if (__str == a3)
      {
        double v20 = *(std::string **)a1;
      }
      else
      {
        double v20 = *(std::string **)a1;
        do
        {
          std::string::operator=(v9++, v6++);
          ++v20;
        }
        while (v6 != a3);
        std::string::size_type v12 = *(std::string **)(a1 + 8);
      }
      while (v12 != v20)
      {
        if (SHIBYTE(v12[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v12[-1].__r_.__value_.__l.__data_);
        }
        --v12;
      }
      *(void *)(a1 + 8) = v20;
    }
    else
    {
      int64_t v13 = (std::string *)((char *)__str + 8 * (((char *)v12 - (char *)v9) >> 3));
      if (v12 != v9)
      {
        uint64_t v14 = 8 * (((char *)v12 - (char *)v9) >> 3);
        do
        {
          std::string::operator=(v9++, v6++);
          v14 -= 24;
        }
        while (v14);
        std::string v9 = *(std::string **)(a1 + 8);
      }
      uint64_t v15 = v9;
      if (v13 != a3)
      {
        uint64_t v16 = 0;
        do
        {
          unint64_t v18 = &v9[v16];
          double v19 = (char *)&v13[v16];
          if (SHIBYTE(v13[v16].__r_.__value_.__r.__words[2]) < 0)
          {
            sub_4200(v18, *(void **)v19, *((void *)v19 + 1));
          }
          else
          {
            long long v17 = *(_OWORD *)v19;
            v18->__r_.__value_.__r.__words[2] = *((void *)v19 + 2);
            *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v17;
          }
          ++v16;
        }
        while (&v13[v16] != a3);
        uint64_t v15 = &v9[v16];
      }
      *(void *)(a1 + 8) = v15;
    }
  }
  else
  {
    if (v9)
    {
      int v10 = *(std::string **)(a1 + 8);
      uint64_t v11 = *(std::string **)a1;
      if (v10 != v9)
      {
        do
        {
          if (SHIBYTE(v10[-1].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v10[-1].__r_.__value_.__l.__data_);
          }
          --v10;
        }
        while (v10 != v9);
        uint64_t v11 = *(std::string **)a1;
      }
      *(void *)(a1 + 8) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_48;
    }
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v22 = 2 * v21;
    if (2 * v21 <= __sz) {
      uint64_t v22 = __sz;
    }
    unint64_t v23 = v21 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v22;
    if (v23 > 0xAAAAAAAAAAAAAAALL) {
LABEL_48:
    }
      sub_2E00();
    uint64_t v24 = 24 * v23;
    double v25 = (char *)operator new(24 * v23);
    *(void *)a1 = v25;
    *(void *)(a1 + 8) = v25;
    *(void *)(a1 + 16) = &v25[v24];
    if (v6 != a3)
    {
      uint64_t v26 = 0;
      do
      {
        int v27 = &v25[v26 * 24];
        char v28 = &v6[v26];
        if (SHIBYTE(v6[v26].__r_.__value_.__r.__words[2]) < 0)
        {
          sub_4200(v27, v28->__r_.__value_.__l.__data_, v28->__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)int v27 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          *((void *)v27 + 2) = *((void *)&v28->__r_.__value_.__l + 2);
        }
        ++v26;
      }
      while (&v6[v26] != a3);
      v25 += v26 * 24;
    }
    *(void *)(a1 + 8) = v25;
  }
}

uint64_t sub_63CBA0(int64x2_t *a1, long long *a2)
{
  unint64_t v3 = 0x86BCA1AF286BCA1BLL * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1AF286BCA1AF286) {
    sub_2E00();
  }
  if (0xD79435E50D79436 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v4) {
    unint64_t v4 = 0xD79435E50D79436 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0x86BCA1AF286BCA1BLL * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0xD79435E50D7943) {
    unint64_t v6 = 0x1AF286BCA1AF286;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v26 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x1AF286BCA1AF286) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(152 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  long long __p = v7;
  v24.i64[0] = (uint64_t)&v7[152 * v3];
  double v25 = &v7[152 * v6];
  sub_4AA8E0((char *)v24.i64[0], a2);
  uint64_t v8 = v24.i64[0];
  uint64_t v9 = v24.i64[0] + 152;
  v24.i64[1] = v24.i64[0] + 152;
  uint64_t v11 = a1->i64[0];
  unint64_t v10 = a1->u64[1];
  if (v10 == a1->i64[0])
  {
    int64x2_t v20 = vdupq_n_s64(v10);
  }
  else
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = v8 + v12;
      uint64_t v14 = v10 + v12;
      long long v15 = *(_OWORD *)(v10 + v12 - 152);
      *(void *)(v13 - 136) = *(void *)(v10 + v12 - 136);
      *(_OWORD *)(v13 - 152) = v15;
      *(void *)(v14 - 144) = 0;
      *(void *)(v14 - 136) = 0;
      *(void *)(v14 - 152) = 0;
      *(void *)(v13 - 128) = *(void *)(v10 + v12 - 128);
      long long v16 = *(_OWORD *)(v10 + v12 - 120);
      *(void *)(v13 - 104) = *(void *)(v10 + v12 - 104);
      *(_OWORD *)(v13 - 120) = v16;
      *(void *)(v14 - 112) = 0;
      *(void *)(v14 - 104) = 0;
      *(void *)(v14 - 120) = 0;
      *(void *)(v13 - 96) = *(void *)(v10 + v12 - 96);
      *(_DWORD *)(v13 - 88) = *(_DWORD *)(v10 + v12 - 88);
      long long v17 = *(_OWORD *)(v10 + v12 - 80);
      *(void *)(v13 - 64) = *(void *)(v10 + v12 - 64);
      *(_OWORD *)(v13 - 80) = v17;
      *(void *)(v14 - 72) = 0;
      *(void *)(v14 - 64) = 0;
      *(void *)(v14 - 80) = 0;
      long long v18 = *(_OWORD *)(v10 + v12 - 56);
      *(void *)(v13 - 40) = *(void *)(v10 + v12 - 40);
      *(_OWORD *)(v13 - 56) = v18;
      *(void *)(v14 - 48) = 0;
      *(void *)(v14 - 40) = 0;
      *(void *)(v14 - 56) = 0;
      *(_DWORD *)(v13 - 32) = *(_DWORD *)(v10 + v12 - 32);
      long long v19 = *(_OWORD *)(v10 + v12 - 24);
      *(void *)(v13 - 8) = *(void *)(v10 + v12 - 8);
      *(_OWORD *)(v13 - 24) = v19;
      *(void *)(v14 - 16) = 0;
      *(void *)(v14 - 8) = 0;
      *(void *)(v14 - 24) = 0;
      v12 -= 152;
    }
    while (v10 + v12 != v11);
    int64x2_t v20 = *a1;
    uint64_t v9 = v24.i64[1];
    v8 += v12;
  }
  a1->i64[0] = v8;
  a1->i64[1] = v9;
  int64x2_t v24 = v20;
  unint64_t v21 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v25;
  double v25 = v21;
  long long __p = (void *)v20.i64[0];
  sub_5B0C34((uint64_t)&__p, v20.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v9;
}

void sub_63CDB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5B0BFC((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_63CDC4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492) {
    sub_2E00();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249) {
    unint64_t v6 = 0x492492492492492;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x492492492492492) {
      sub_188D718();
    }
    long long v7 = operator new(56 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  unint64_t v21 = (char *)&v7[7 * v6];
  uint64_t v8 = &v7[7 * v3];
  _DWORD *v8 = *(_DWORD *)a2;
  uint64_t v9 = v8 + 2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_4200(v9, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)(a2 + 8);
    *((void *)v9 + 2) = *(void *)(a2 + 24);
  }
  unint64_t v10 = &v7[7 * v3 + 4];
  if (*(char *)(a2 + 55) < 0)
  {
    sub_4200(v10, *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    *(_OWORD *)unint64_t v10 = *(_OWORD *)(a2 + 32);
    v7[7 * v3 + 6] = *(void *)(a2 + 48);
  }
  uint64_t v11 = (char *)&v7[7 * v3];
  int64x2_t v20 = v11;
  uint64_t v12 = v11 + 56;
  uint64_t v13 = *a1;
  uint64_t v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = (uint64_t)&v7[7 * v3];
    a1[1] = (uint64_t)v12;
    a1[2] = (uint64_t)v21;
    goto LABEL_29;
  }
  do
  {
    int v15 = *(_DWORD *)(v14 - 56);
    v14 -= 56;
    *((_DWORD *)v11 - 14) = v15;
    v11 -= 56;
    long long v16 = *(_OWORD *)(v14 + 8);
    *((void *)v11 + 3) = *(void *)(v14 + 24);
    *(_OWORD *)(v11 + 8) = v16;
    *(void *)(v14 + 16) = 0;
    *(void *)(v14 + 24) = 0;
    *(void *)(v14 + 8) = 0;
    long long v17 = *(_OWORD *)(v14 + 32);
    *((void *)v11 + 6) = *(void *)(v14 + 48);
    *((_OWORD *)v11 + 2) = v17;
    *(void *)(v14 + 40) = 0;
    *(void *)(v14 + 48) = 0;
    *(void *)(v14 + 32) = 0;
  }
  while (v14 != v13);
  uint64_t v18 = *a1;
  uint64_t v14 = a1[1];
  *a1 = (uint64_t)v11;
  a1[1] = (uint64_t)v12;
  a1[2] = (uint64_t)v21;
  if (v14 == v18) {
    goto LABEL_29;
  }
  do
  {
    if (*(char *)(v14 - 1) < 0)
    {
      operator delete(*(void **)(v14 - 24));
      if ((*(char *)(v14 - 25) & 0x80000000) == 0) {
        goto LABEL_22;
      }
    }
    else if ((*(char *)(v14 - 25) & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(*(void **)(v14 - 48));
LABEL_22:
    v14 -= 56;
  }
  while (v14 != v18);
  uint64_t v14 = v18;
LABEL_29:
  if (v14) {
    operator delete((void *)v14);
  }
  return v20 + 56;
}

void sub_63D004(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v3 + 31) < 0)
  {
    operator delete(*v2);
    sub_63D03C((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_63D03C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_63D03C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      if ((*(char *)(i - 25) & 0x80000000) == 0) {
        continue;
      }
    }
    else if ((*(char *)(i - 25) & 0x80000000) == 0)
    {
      continue;
    }
    operator delete(*(void **)(i - 48));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_63D0C0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_63D0E0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void **sub_63D134(uint64_t a1)
{
  return sub_4F31D0((void **)(a1 + 24));
}

uint64_t sub_63D140(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x276276276276276) {
    sub_2E00();
  }
  if (0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((a1[2] - *a1) >> 3)) >= 0x13B13B13B13B13BLL) {
    unint64_t v6 = 0x276276276276276;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x276276276276276) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(104 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  uint64_t v21 = (uint64_t)&v7[104 * v3];
  uint64_t v22 = &v7[104 * v6];
  sub_63D394((uint64_t)(a1 + 2), v21, a2);
  uint64_t v8 = v21 + 104;
  unint64_t v10 = (void **)*a1;
  uint64_t v9 = (void **)a1[1];
  if (v9 == (void **)*a1)
  {
    *a1 = v21;
    a1[1] = v8;
    a1[2] = (uint64_t)v22;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v13 = v21 + v11 * 8;
      uint64_t v14 = &v9[v11];
      *(void *)(v13 - 88) = 0;
      *(_OWORD *)(v13 - 104) = 0uLL;
      *(_OWORD *)(v13 - 104) = *(_OWORD *)&v9[v11 - 13];
      *(void *)(v13 - 88) = v9[v11 - 11];
      *(_OWORD *)(v14 - 13) = 0uLL;
      int v15 = v9[v11 - 10];
      *(_OWORD *)(v14 - 11) = 0uLL;
      *(void *)(v13 - 80) = v15;
      *(void *)(v13 - 72) = v9[v11 - 9];
      *(v14 - 9) = 0;
      long long v16 = v9[v11 - 8];
      *(void *)(v21 + v11 * 8 - 64) = v16;
      long long v17 = v9[v11 - 7];
      *(void *)(v13 - 56) = v17;
      *(_DWORD *)(v13 - 48) = v9[v11 - 6];
      if (v17)
      {
        unint64_t v12 = v16[1];
        unint64_t v18 = *(void *)(v13 - 72);
        if ((v18 & (v18 - 1)) != 0)
        {
          if (v12 >= v18) {
            v12 %= v18;
          }
        }
        else
        {
          v12 &= v18 - 1;
        }
        v15[v12] = v21 + v11 * 8 - 64;
        v9[v11 - 8] = 0;
        v9[v11 - 7] = 0;
      }
      *(unsigned char *)(v13 - 40) = *((unsigned char *)v14 - 40);
      *(_DWORD *)(v13 - 32) = *((_DWORD *)v14 - 8);
      *(_OWORD *)(v13 - 24) = *(_OWORD *)(v14 - 3);
      *(v14 - 3) = 0;
      *(v14 - 2) = 0;
      *(_WORD *)(v13 - 8) = *((_WORD *)v14 - 4);
      v11 -= 13;
    }
    while (&v9[v11] != v10);
    long long v19 = (void **)*a1;
    uint64_t v9 = (void **)a1[1];
    *a1 = v21 + v11 * 8;
    a1[1] = v8;
    a1[2] = (uint64_t)v22;
    if (v9 != v19)
    {
      do
        uint64_t v9 = sub_4F31D0(v9 - 13);
      while (v9 != v19);
      uint64_t v9 = v19;
    }
  }
  if (v9) {
    operator delete(v9);
  }
  return v21 + 104;
}

void sub_63D380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_63D438((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_63D394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_8A6F8((char *)a2, *(void *)a3, *(void *)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  uint64_t result = sub_5954B0(a2 + 24, a3 + 24);
  *(unsigned char *)(a2 + 64) = *(unsigned char *)(a3 + 64);
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a3 + 72);
  uint64_t v6 = *(void *)(a3 + 88);
  *(void *)(a2 + 80) = *(void *)(a3 + 80);
  *(void *)(a2 + 88) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(_WORD *)(a2 + 96) = *(_WORD *)(a3 + 96);
  return result;
}

void sub_63D41C(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_20AA4E4((uint64_t)v1, *v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_63D438(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 104;
    sub_4F31D0((void **)(i - 104));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void **sub_63D48C(void ***a1, uint64_t a2)
{
  uint64_t v3 = 0x4EC4EC4EC4EC4EC5 * (a1[1] - *a1);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x276276276276276) {
    sub_2E00();
  }
  if (0x9D89D89D89D89D8ALL * (a1[2] - *a1) > v4) {
    unint64_t v4 = 0x9D89D89D89D89D8ALL * (a1[2] - *a1);
  }
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (a1[2] - *a1)) >= 0x13B13B13B13B13BLL) {
    unint64_t v6 = 0x276276276276276;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x276276276276276) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(104 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  uint64_t v8 = &v7[104 * v3];
  *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  unint64_t v11 = *(void *)(a2 + 32);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *((void *)v8 + 2) = v10;
  *((void *)v8 + 3) = v9;
  *((void *)v8 + 4) = v11;
  uint64_t v12 = *(void *)(a2 + 40);
  *((void *)v8 + 5) = v12;
  uint64_t v13 = *(void *)(a2 + 48);
  *((void *)v8 + 6) = v13;
  *((_DWORD *)v8 + 14) = *(_DWORD *)(a2 + 56);
  if (v13)
  {
    unint64_t v14 = *(void *)(v12 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      BOOL v16 = v14 >= v11;
      unint64_t v15 = v14 % v11;
      if (!v16) {
        unint64_t v15 = v14;
      }
    }
    else
    {
      unint64_t v15 = v14 & (v11 - 1);
    }
    *(void *)(v9 + 8 * v15) = v8 + 40;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
  }
  long long v17 = (void **)&v7[104 * v6];
  v8[64] = *(unsigned char *)(a2 + 64);
  unint64_t v18 = &v7[104 * v3];
  *((_DWORD *)v18 + 18) = *(_DWORD *)(a2 + 72);
  *((_OWORD *)v18 + 5) = *(_OWORD *)(a2 + 80);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *((_WORD *)v18 + 48) = *(_WORD *)(a2 + 96);
  long long v19 = (void **)(v8 + 104);
  uint64_t v21 = *a1;
  int64x2_t v20 = a1[1];
  if (v20 == *a1)
  {
    *a1 = (void **)v8;
    a1[1] = v19;
    a1[2] = v17;
    if (!v20) {
      return v19;
    }
    goto LABEL_30;
  }
  uint64_t v22 = 0;
  do
  {
    int64x2_t v24 = &v8[v22 * 8];
    double v25 = &v20[v22];
    *((void *)v24 - 11) = 0;
    *(_OWORD *)(v24 - 104) = 0uLL;
    *(_OWORD *)(v24 - 104) = *(_OWORD *)&v20[v22 - 13];
    *((void *)v24 - 11) = v20[v22 - 11];
    *(_OWORD *)(v25 - 13) = 0uLL;
    uint64_t v26 = v20[v22 - 10];
    *(_OWORD *)(v25 - 11) = 0uLL;
    *((void *)v24 - 10) = v26;
    *((void *)v24 - 9) = v20[v22 - 9];
    *(v25 - 9) = 0;
    int v27 = v20[v22 - 8];
    *(void *)&v8[v22 * 8 - 64] = v27;
    char v28 = v20[v22 - 7];
    *((void *)v24 - 7) = v28;
    *((_DWORD *)v24 - 12) = v20[v22 - 6];
    if (v28)
    {
      unint64_t v23 = v27[1];
      unint64_t v29 = *((void *)v24 - 9);
      if ((v29 & (v29 - 1)) != 0)
      {
        if (v23 >= v29) {
          v23 %= v29;
        }
      }
      else
      {
        v23 &= v29 - 1;
      }
      v26[v23] = &v8[v22 * 8 - 64];
      v20[v22 - 8] = 0;
      v20[v22 - 7] = 0;
    }
    *(v24 - 40) = *((unsigned char *)v25 - 40);
    *((_DWORD *)v24 - 8) = *((_DWORD *)v25 - 8);
    *(_OWORD *)(v24 - 24) = *(_OWORD *)(v25 - 3);
    *(v25 - 3) = 0;
    *(v25 - 2) = 0;
    *((_WORD *)v24 - 4) = *((_WORD *)v25 - 4);
    v22 -= 13;
  }
  while (&v20[v22] != v21);
  unsigned int v30 = *a1;
  int64x2_t v20 = a1[1];
  *a1 = (void **)&v8[v22 * 8];
  a1[1] = v19;
  a1[2] = v17;
  if (v20 != v30)
  {
    do
      int64x2_t v20 = sub_4F31D0(v20 - 13);
    while (v20 != v30);
    int64x2_t v20 = v30;
  }
  if (v20) {
LABEL_30:
  }
    operator delete(v20);
  return v19;
}

uint64_t sub_63D730(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 8);
  unint64_t v5 = a2 + v4 - a4;
  uint64_t v6 = v4;
  if (v5 < a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v9 = v5 + v7;
      uint64_t v10 = v4 + v7;
      *(void *)(v10 + 16) = 0;
      *(_OWORD *)uint64_t v10 = 0uLL;
      *(_OWORD *)uint64_t v10 = *(_OWORD *)(v5 + v7);
      *(void *)(v10 + 16) = *(void *)(v5 + v7 + 16);
      uint64_t v11 = *(void *)(v5 + v7 + 24);
      *(_OWORD *)uint64_t v9 = 0uLL;
      *(_OWORD *)(v9 + 16) = 0uLL;
      *(void *)(v10 + 24) = v11;
      *(void *)(v10 + 32) = *(void *)(v5 + v7 + 32);
      *(void *)(v9 + 32) = 0;
      uint64_t v12 = *(void *)(v5 + v7 + 40);
      *(void *)(v4 + v7 + 40) = v12;
      uint64_t v13 = *(void *)(v5 + v7 + 48);
      *(void *)(v10 + 48) = v13;
      *(_DWORD *)(v10 + 56) = *(_DWORD *)(v5 + v7 + 56);
      if (v13)
      {
        unint64_t v8 = *(void *)(v12 + 8);
        unint64_t v14 = *(void *)(v10 + 32);
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v8 >= v14) {
            v8 %= v14;
          }
        }
        else
        {
          v8 &= v14 - 1;
        }
        *(void *)(v11 + 8 * v8) = v4 + v7 + 40;
        *(void *)(v5 + v7 + 40) = 0;
        *(void *)(v5 + v7 + 48) = 0;
      }
      *(unsigned char *)(v10 + 64) = *(unsigned char *)(v9 + 64);
      *(_DWORD *)(v10 + 72) = *(_DWORD *)(v9 + 72);
      *(_OWORD *)(v10 + 80) = *(_OWORD *)(v9 + 80);
      *(void *)(v9 + 80) = 0;
      *(void *)(v9 + 88) = 0;
      *(_WORD *)(v10 + 96) = *(_WORD *)(v9 + 96);
      v7 += 104;
    }
    while (v5 + v7 < a3);
    uint64_t v6 = v4 + v7;
  }
  *(void *)(result + 8) = v6;
  if (v4 != a4)
  {
    uint64_t v15 = v4 - 104;
    uint64_t v16 = 8 * ((v4 - a4) >> 3);
    uint64_t v17 = a2 - 104;
    do
    {
      uint64_t result = sub_63DAA4(v15, v17 + v16);
      v15 -= 104;
      v16 -= 104;
    }
    while (v16);
  }
  return result;
}

uint64_t sub_63D88C(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t result = a2[1];
  uint64_t v5 = *a1;
  uint64_t v6 = result;
  if (*a1 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v9 = result + v7;
      uint64_t v10 = a3 + v7;
      *(void *)(v9 - 88) = 0;
      *(_OWORD *)(v9 - 104) = 0uLL;
      *(_OWORD *)(v9 - 104) = *(_OWORD *)(a3 + v7 - 104);
      *(void *)(v9 - 88) = *(void *)(a3 + v7 - 88);
      *(_OWORD *)(v10 - 104) = 0uLL;
      uint64_t v11 = *(void *)(a3 + v7 - 80);
      *(_OWORD *)(v10 - 88) = 0uLL;
      *(void *)(v9 - 80) = v11;
      *(void *)(v9 - 72) = *(void *)(a3 + v7 - 72);
      *(void *)(v10 - 72) = 0;
      uint64_t v12 = *(void *)(a3 + v7 - 64);
      *(void *)(result + v7 - 64) = v12;
      uint64_t v13 = *(void *)(a3 + v7 - 56);
      *(void *)(v9 - 56) = v13;
      *(_DWORD *)(v9 - 48) = *(_DWORD *)(a3 + v7 - 48);
      if (v13)
      {
        unint64_t v8 = *(void *)(v12 + 8);
        unint64_t v14 = *(void *)(v9 - 72);
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v8 >= v14) {
            v8 %= v14;
          }
        }
        else
        {
          v8 &= v14 - 1;
        }
        *(void *)(v11 + 8 * v8) = result + v7 - 64;
        *(void *)(a3 + v7 - 64) = 0;
        *(void *)(a3 + v7 - 56) = 0;
      }
      *(unsigned char *)(v9 - 40) = *(unsigned char *)(v10 - 40);
      *(_DWORD *)(v9 - 32) = *(_DWORD *)(v10 - 32);
      *(_OWORD *)(v9 - 24) = *(_OWORD *)(v10 - 24);
      *(void *)(v10 - 24) = 0;
      *(void *)(v10 - 16) = 0;
      *(_WORD *)(v9 - 8) = *(_WORD *)(v10 - 8);
      v7 -= 104;
    }
    while (a3 + v7 != v5);
    uint64_t v6 = result + v7;
  }
  a2[1] = v6;
  uint64_t v15 = a1[1];
  uint64_t v16 = a2[2];
  if (v15 != a3)
  {
    uint64_t v17 = 0;
    do
    {
      uint64_t v19 = a3 + v17;
      uint64_t v20 = v16 + v17;
      *(void *)(v20 + 16) = 0;
      *(_OWORD *)uint64_t v20 = 0uLL;
      *(_OWORD *)uint64_t v20 = *(_OWORD *)(a3 + v17);
      *(void *)(v20 + 16) = *(void *)(a3 + v17 + 16);
      uint64_t v21 = *(void *)(a3 + v17 + 24);
      *(_OWORD *)uint64_t v19 = 0uLL;
      *(_OWORD *)(v19 + 16) = 0uLL;
      *(void *)(v20 + 24) = v21;
      *(void *)(v20 + 32) = *(void *)(a3 + v17 + 32);
      *(void *)(v19 + 32) = 0;
      uint64_t v22 = *(void *)(a3 + v17 + 40);
      *(void *)(v16 + v17 + 40) = v22;
      uint64_t v23 = *(void *)(a3 + v17 + 48);
      *(void *)(v20 + 48) = v23;
      *(_DWORD *)(v20 + 56) = *(_DWORD *)(a3 + v17 + 56);
      if (v23)
      {
        unint64_t v18 = *(void *)(v22 + 8);
        unint64_t v24 = *(void *)(v20 + 32);
        if ((v24 & (v24 - 1)) != 0)
        {
          if (v18 >= v24) {
            v18 %= v24;
          }
        }
        else
        {
          v18 &= v24 - 1;
        }
        *(void *)(v21 + 8 * v18) = v16 + v17 + 40;
        *(void *)(a3 + v17 + 40) = 0;
        *(void *)(a3 + v17 + 48) = 0;
      }
      *(unsigned char *)(v20 + 64) = *(unsigned char *)(v19 + 64);
      *(_DWORD *)(v20 + 72) = *(_DWORD *)(v19 + 72);
      *(_OWORD *)(v20 + 80) = *(_OWORD *)(v19 + 80);
      *(void *)(v19 + 80) = 0;
      *(void *)(v19 + 88) = 0;
      *(_WORD *)(v20 + 96) = *(_WORD *)(v19 + 96);
      v17 += 104;
    }
    while (a3 + v17 != v15);
    uint64_t v6 = a2[1];
    v16 += v17;
  }
  a2[2] = v16;
  uint64_t v25 = *a1;
  *a1 = v6;
  a2[1] = v25;
  uint64_t v26 = a1[1];
  a1[1] = a2[2];
  a2[2] = v26;
  uint64_t v27 = a1[2];
  a1[2] = a2[3];
  a2[3] = v27;
  *a2 = a2[1];
  return result;
}

uint64_t sub_63DAA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void ***)a1;
  if (*(void *)a1)
  {
    uint64_t v5 = *(void ***)(a1 + 8);
    uint64_t v6 = *(void ***)a1;
    if (v5 != v4)
    {
      do
      {
        if (*((char *)v5 - 1) < 0) {
          operator delete(*(v5 - 3));
        }
        v5 -= 3;
      }
      while (v5 != v4);
      uint64_t v6 = *(void ***)a1;
    }
    *(void *)(a1 + 8) = v4;
    operator delete(v6);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_52EF44(a1 + 24, (uint64_t *)(a2 + 24));
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  long long v7 = *(_OWORD *)(a2 + 80);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  unint64_t v8 = *(std::__shared_weak_count **)(a1 + 88);
  *(_OWORD *)(a1 + 80) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  return a1;
}

_OWORD *sub_63DBB4(void **a1, _OWORD *a2)
{
  uint64_t v3 = 0x2E8BA2E8BA2E8BA3 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x1745D1745D1745DLL) {
    sub_2E00();
  }
  if (0x5D1745D1745D1746 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0x5D1745D1745D1746 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4)) >= 0xBA2E8BA2E8BA2ELL) {
    unint64_t v6 = 0x1745D1745D1745DLL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x1745D1745D1745DLL) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(176 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  uint64_t v25 = &v7[176 * v3];
  uint64_t v26 = &v7[176 * v6];
  long long v8 = a2[1];
  *(_OWORD *)uint64_t v25 = *a2;
  *((_OWORD *)v25 + 1) = v8;
  *((_OWORD *)v25 + 2) = a2[2];
  *(_OWORD *)(v25 + 41) = *(_OWORD *)((char *)a2 + 41);
  sub_4F57A0((uint64_t)(v25 + 64), (uint64_t)(a2 + 4));
  uint64_t v9 = v25 + 176;
  uint64_t v11 = (void **)*a1;
  uint64_t v10 = (void **)a1[1];
  if (v10 == *a1)
  {
    *a1 = v25;
    a1[1] = v9;
    a1[2] = v26;
    goto LABEL_30;
  }
  uint64_t v12 = 0;
  do
  {
    uint64_t v13 = &v25[v12 * 8];
    unint64_t v14 = &v10[v12];
    long long v15 = *(_OWORD *)&v10[v12 - 22];
    long long v16 = *(_OWORD *)&v10[v12 - 20];
    long long v17 = *(_OWORD *)&v10[v12 - 18];
    *(_OWORD *)(v13 - 135) = *(_OWORD *)((char *)&v10[v12 - 16] - 7);
    *((_OWORD *)v13 - 10) = v16;
    *((_OWORD *)v13 - 9) = v17;
    *((_OWORD *)v13 - 11) = v15;
    *((_DWORD *)v13 - 20) = v10[v12 - 10];
    sub_4F38B0((void *)LODWORD(v10[v12 - 10]), (uint64_t *)&v10[v12 - 14], &v25[v12 * 8 - 112]);
    *((void *)v13 - 9) = v10[v12 - 9];
    long long v18 = *(_OWORD *)&v10[v12 - 8];
    *((void *)v13 - 6) = v10[v12 - 6];
    *((_OWORD *)v13 - 4) = v18;
    *(v14 - 7) = 0;
    *(v14 - 6) = 0;
    *(v14 - 8) = 0;
    *(v13 - 40) = (char)v10[v12 - 5];
    long long v19 = *(_OWORD *)&v10[v12 - 4];
    *((void *)v13 - 2) = v10[v12 - 2];
    *((_OWORD *)v13 - 2) = v19;
    *(v14 - 3) = 0;
    *(v14 - 2) = 0;
    *(v14 - 4) = 0;
    *(v13 - 8) = (char)v10[v12 - 1];
    v12 -= 22;
  }
  while (&v10[v12] != v11);
  uint64_t v20 = (void **)*a1;
  uint64_t v10 = (void **)a1[1];
  uint64_t v21 = &v25[v12 * 8];
  uint64_t v9 = v25 + 176;
  *a1 = v21;
  a1[1] = v25 + 176;
  a1[2] = v26;
  if (v10 != v20)
  {
    while (1)
    {
      if (*((char *)v10 - 9) < 0)
      {
        operator delete(*(v10 - 4));
        if ((*((char *)v10 - 41) & 0x80000000) == 0)
        {
LABEL_21:
          int v22 = *((_DWORD *)v10 - 20);
          if (v22 != 1) {
            goto LABEL_22;
          }
          goto LABEL_27;
        }
      }
      else if ((*((char *)v10 - 41) & 0x80000000) == 0)
      {
        goto LABEL_21;
      }
      operator delete(*(v10 - 8));
      int v22 = *((_DWORD *)v10 - 20);
      if (v22 != 1)
      {
LABEL_22:
        if (v22 || (*((char *)v10 - 81) & 0x80000000) == 0) {
          goto LABEL_18;
        }
        uint64_t v23 = *(v10 - 13);
        goto LABEL_17;
      }
LABEL_27:
      uint64_t v23 = *(v10 - 13);
      if (!v23) {
        goto LABEL_18;
      }
      *(v10 - 12) = v23;
LABEL_17:
      operator delete(v23);
LABEL_18:
      v10 -= 22;
      if (v10 == v20)
      {
        uint64_t v10 = v20;
        break;
      }
    }
  }
LABEL_30:
  if (v10) {
    operator delete(v10);
  }
  return v9;
}

void sub_63DE44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_63DE5C((void **)va);
  _Unwind_Resume(a1);
}

void **sub_63DE5C(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_63DE90(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v1; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 176;
    if (*(char *)(i - 9) < 0)
    {
      operator delete(*(void **)(i - 32));
      if ((*(char *)(i - 41) & 0x80000000) == 0)
      {
LABEL_7:
        int v5 = *(_DWORD *)(i - 80);
        if (v5 != 1) {
          goto LABEL_8;
        }
        goto LABEL_13;
      }
    }
    else if ((*(char *)(i - 41) & 0x80000000) == 0)
    {
      goto LABEL_7;
    }
    operator delete(*(void **)(i - 64));
    int v5 = *(_DWORD *)(i - 80);
    if (v5 != 1)
    {
LABEL_8:
      if (v5 || (*(char *)(i - 81) & 0x80000000) == 0) {
        continue;
      }
      unint64_t v4 = *(void **)(i - 104);
      goto LABEL_3;
    }
LABEL_13:
    unint64_t v4 = *(void **)(i - 104);
    if (!v4) {
      continue;
    }
    *(void *)(i - 96) = v4;
LABEL_3:
    operator delete(v4);
  }
}

char *sub_63DF44(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(48 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  long long v8 = &v7[48 * v3];
  *(_DWORD *)long long v8 = *(_DWORD *)a2;
  uint64_t v9 = &v7[48 * v6];
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v11 = *(void *)(a2 + 32);
  *(void *)(a2 + 24) = 0;
  *((void *)v8 + 3) = v10;
  *((void *)v8 + 4) = v11;
  *((_DWORD *)v8 + 10) = *(_DWORD *)(a2 + 40);
  uint64_t v12 = v8 + 48;
  uint64_t v13 = (char *)*a1;
  unint64_t v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v8;
    a1[1] = v12;
    a1[2] = v9;
    if (!v14) {
      return v12;
    }
    goto LABEL_21;
  }
  uint64_t v15 = 0;
  do
  {
    long long v16 = &v8[v15];
    long long v17 = &v14[v15];
    *((_DWORD *)v16 - 12) = *(_DWORD *)&v14[v15 - 48];
    *((void *)v16 - 4) = 0;
    *((void *)v16 - 3) = 0;
    *(_OWORD *)(v16 - 40) = *(_OWORD *)&v14[v15 - 40];
    *((void *)v16 - 3) = *(void *)&v14[v15 - 24];
    *((void *)v17 - 5) = 0;
    *((void *)v17 - 4) = 0;
    *((void *)v17 - 3) = 0;
    uint64_t v18 = *(void *)&v14[v15 - 16];
    *((_DWORD *)v16 - 2) = *(_DWORD *)&v14[v15 - 8];
    *((void *)v16 - 2) = v18;
    v15 -= 48;
  }
  while (&v14[v15] != v13);
  long long v19 = (char *)*a1;
  unint64_t v14 = (char *)a1[1];
  *a1 = &v8[v15];
  a1[1] = v12;
  a1[2] = v9;
  if (v14 != v19)
  {
    do
    {
      uint64_t v20 = (void *)*((void *)v14 - 5);
      if (v20)
      {
        *((void *)v14 - 4) = v20;
        operator delete(v20);
      }
      v14 -= 48;
    }
    while (v14 != v19);
    unint64_t v14 = v19;
  }
  if (v14) {
LABEL_21:
  }
    operator delete(v14);
  return v12;
}

char *sub_63E0E8(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  int v7 = *a2;
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint64_t v12 = (char *)*v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = *((void *)v12 + 1);
            if (v14 == v8)
            {
              if (*((_DWORD *)v12 + 4) == v7) {
                return v12;
              }
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v12 = *(char **)v12;
            if (!v12) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == v7) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v4) {
              break;
            }
          }
          uint64_t v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  uint64_t v15 = (void *)(a1 + 16);
  uint64_t v12 = (char *)operator new(0x48uLL);
  *(void *)uint64_t v12 = 0;
  *((void *)v12 + 1) = v8;
  *((_DWORD *)v12 + 4) = **a4;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (v9 && (float)(v17 * (float)v9) >= v16)
  {
    uint64_t v18 = *(void *)a1;
    long long v19 = *(void **)(*(void *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *(void *)uint64_t v12 = *v19;
LABEL_61:
      *long long v19 = v12;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22) {
      size_t prime = v22;
    }
    else {
      size_t prime = v21;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *(void *)(a1 + 8);
    }
    if (prime > v9) {
      goto LABEL_37;
    }
    if (prime < v9)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (prime <= v24) {
        size_t prime = v24;
      }
      if (prime < v9) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
      {
        unint64_t v4 = v8 % v9;
        uint64_t v18 = *(void *)a1;
        long long v19 = *(void **)(*(void *)a1 + 8 * (v8 % v9));
        if (v19) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v8;
        uint64_t v18 = *(void *)a1;
        long long v19 = *(void **)(*(void *)a1 + 8 * v8);
        if (v19) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
      uint64_t v18 = *(void *)a1;
      long long v19 = *(void **)(*(void *)a1 + 8 * v4);
      if (v19) {
        goto LABEL_26;
      }
    }
  }
  *(void *)uint64_t v12 = *v15;
  void *v15 = v12;
  *(void *)(v18 + 8 * v4) = v15;
  if (*(void *)v12)
  {
    unint64_t v27 = *(void *)(*(void *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9) {
        v27 %= v9;
      }
    }
    else
    {
      v27 &= v9 - 1;
    }
    long long v19 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_63E41C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_59B5F8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_63E430(uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  return result;
}

uint64_t sub_63E444()
{
  return v0;
}

void sub_63E460()
{
  sub_4F4B48(v0 + 16);
}

double sub_63E484()
{
  byte_25943E7 = 1;
  word_25943D0 = 65;
  byte_25943FF = 1;
  unk_25943E8 = 65;
  strcpy(&byte_2594417, "\n\x1B\\toi=orth\\"");
  strcpy(byte_2594400, "\x1B\\toi=lhp\\"");
  byte_259442F = 11;
  unk_2594430 = operator new(0x19uLL);
  long long v280 = xmmword_20B9250;
  unk_2594438 = xmmword_20B9250;
  strcpy(unk_2594430, "\x1B\\toi=x-sampa-internal\\"");
  byte_259445F = 13;
  strcpy(byte_2594448, "\x1B\\tn=address\\"");
  strcpy(&byte_2594477, "\t\x1B\\tn=normal\\"");
  strcpy(byte_2594460, "\x1B\\tn=nav\\"");
  byte_259448F = 12;
  byte_25944A7 = 7;
  strcpy(byte_2594490, "\x1B\\lang=");
  byte_25944BF = 1;
  unk_25944A8 = 92;
  byte_25944D7 = 4;
  strcpy(byte_25944C0, "DEV:");
  byte_25944EF = 8;
  strcpy(algn_25944D8, "Continue");
  byte_2594507 = 11;
  strcpy((char *)&qword_25944F0, "Start_Route");
  byte_259451F = 14;
  strcpy((char *)&qword_2594508, "Continue_Route");
  byte_2594537 = 12;
  strcpy((char *)&qword_2594520, "Resume_Route");
  byte_259454F = 18;
  strcpy((char *)&xmmword_2594538, "Start_Route_U_Turn");
  byte_2594567 = 7;
  strcpy((char *)&dword_2594550, "_U_Turn");
  qword_2594570 = 0x545F555F6574756FLL;
  unk_2594578 = 0x1300000000000000;
  qword_2594568 = *(void *)"Resume_Route";
  *(_DWORD *)((char *)&qword_2594570 + 7) = 1852994900;
  HIDWORD(qword_2594590) = 352321536;
  strcpy((char *)&qword_2594580, "Continue_Route_U");
  *(_DWORD *)((char *)&qword_2594590 + 1) = 1852994900;
  strcpy(&byte_25945AF, "\tRight_Turn");
  strcpy((char *)&qword_2594598, "Left_Turn");
  strcpy(&byte_25945C7, "\nLeft_Turn_At_End");
  byte_25945DF = 16;
  byte_25945F7 = 17;
  strcpy((char *)&xmmword_25945E0, "Right_Turn_At_End");
  byte_259460F = 15;
  strcpy((char *)&qword_25945F8, "Sharp_Left_Turn");
  byte_2594627 = 16;
  strcpy((char *)&xmmword_2594610, "Sharp_Right_Turn");
  byte_259463F = 16;
  strcpy((char *)&xmmword_2594628, "Slight_Left_Turn");
  byte_2594657 = 17;
  strcpy((char *)&xmmword_2594640, "Slight_Right_Turn");
  strcpy(&byte_259466F, "\tKeep_Right");
  strcpy((char *)&qword_2594658, "Keep_Left");
  strcpy(&byte_2594687, "\nU_Turn");
  byte_259469F = 6;
  byte_25946B7 = 14;
  strcpy((char *)&qword_25946A0, "Walking_U_Turn");
  byte_25946CF = 20;
  strcpy((char *)&xmmword_25946B8, "U_Turn_When_Possible");
  byte_25946E7 = 20;
  strcpy((char *)&xmmword_25946D0, "U_Turn_At_Roundabout");
  byte_25946FF = 11;
  strcpy((char *)&qword_25946E8, "Enter_Ferry");
  strcpy(&byte_2594717, "\nChange_Ferry");
  strcpy((char *)&qword_2594700, "Exit_Ferry");
  byte_259472F = 12;
  byte_2594747 = 21;
  strcpy((char *)&xmmword_2594730, "Enter_Railway_Shuttle");
  byte_259475F = 20;
  strcpy((char *)&xmmword_2594748, "Exit_Railway_Shuttle");
  strcpy((char *)&xmmword_2594760, "Change_Railway_Shuttle");
  strcpy((char *)&xmmword_2594778, "End_Of_Navigation");
  strcpy((char *)&xmmword_2594790, "End_Of_Navigation");
  strcpy((char *)&qword_25947A8, "Destination");
  strcpy((char *)&xmmword_2594898, "Waypoint_Stop_On_Left");
  strcpy((char *)&xmmword_25948B0, "Waypoint_Stop_On_Right");
  byte_2594777 = 22;
  byte_259478F = 17;
  byte_25947A7 = 17;
  byte_25947BF = 11;
  byte_25947D7 = 19;
  strcpy((char *)&xmmword_25947C0, "Destination_On_left");
  byte_25947EF = 20;
  strcpy((char *)&xmmword_25947D8, "Destination_On_Right");
  strcpy(&byte_2594807, "\nFirst_Stop_On_left");
  strcpy((char *)&xmmword_2594820, "First_Stop_On_Right");
  strcpy((char *)&xmmword_2594868, "Next_Stop_On_Right");
  *(void *)&v268[0] = *(void *)"First_Stop";
  strcpy((char *)&qword_25947F0, "First_Stop");
  byte_259481F = 18;
  byte_2594837 = 19;
  strcpy(&byte_259484F, "\tNext_Stop_On_left");
  strcpy((char *)&qword_2594880, "Waypoint_Stop");
  strcpy((char *)&qword_25948C8, "Roundabout_");
  *(void *)&v264[48] = *(void *)"Next_Stop";
  strcpy((char *)&qword_2594838, "Next_Stop");
  byte_2594867 = 17;
  byte_259487F = 18;
  byte_2594897 = 13;
  byte_25948AF = 21;
  byte_25948C7 = 22;
  byte_25948DF = 11;
  byte_25948F7 = 16;
  strcpy((char *)&xmmword_25948E0, "Enter_Roundabout");
  qword_25948F8 = (uint64_t)operator new(0x20uLL);
  long long v279 = xmmword_20B91C0;
  xmmword_2594900 = xmmword_20B91C0;
  strcpy((char *)qword_25948F8, "Walking_Enter_Roundabout");
  byte_2594927 = 16;
  strcpy((char *)&xmmword_2594910, "Leave_Roundabout");
  byte_259493F = 21;
  strcpy((char *)&xmmword_2594928, "Roundabout_First_Exit");
  byte_2594957 = 22;
  strcpy((char *)&xmmword_2594940, "Roundabout_Second_Exit");
  byte_259496F = 21;
  strcpy((char *)&xmmword_2594958, "Roundabout_Third_Exit");
  strcpy((char *)&xmmword_2594970, "Roundabout_Fourth_Exit");
  HIBYTE(word_2594986) = 22;
  byte_259499F = 21;
  strcpy((char *)&xmmword_2594988, "Roundabout_Fifth_Exit");
  byte_25949B7 = 21;
  strcpy((char *)&xmmword_25949A0, "Roundabout_Sixth_Exit");
  qword_25949B8 = (uint64_t)operator new(0x19uLL);
  xmmword_25949C0 = xmmword_20B9250;
  strcpy((char *)qword_25949B8, "Roundabout_Seventh_Exit");
  strcpy((char *)&xmmword_25949D0, "Roundabout_Eighth_Exit");
  HIBYTE(word_25949E6) = 22;
  byte_25949FF = 21;
  strcpy((char *)&xmmword_25949E8, "Roundabout_Ninth_Exit");
  byte_2594A17 = 21;
  strcpy((char *)&xmmword_2594A00, "Roundabout_Tenth_Exit");
  qword_2594A18 = (uint64_t)operator new(0x20uLL);
  xmmword_2594A20 = xmmword_20B91C0;
  strcpy((char *)qword_2594A18, "Roundabout_Eleventh_Exit");
  qword_2594A30 = (uint64_t)operator new(0x19uLL);
  unk_2594A38 = xmmword_20B9250;
  strcpy((char *)qword_2594A30, "Roundabout_Twelfth_Exit");
  qword_2594A48 = (uint64_t)operator new(0x20uLL);
  long long v276 = xmmword_20B5EB0;
  xmmword_2594A50 = xmmword_20B5EB0;
  strcpy((char *)qword_2594A48, "Roundabout_Thirteenth_Exit");
  qword_2594A60 = (uint64_t)operator new(0x20uLL);
  unk_2594A68 = xmmword_20B5EB0;
  strcpy((char *)qword_2594A60, "Roundabout_Fourteenth_Exit");
  qword_2594A78 = (uint64_t)operator new(0x20uLL);
  long long v278 = xmmword_20B8870;
  xmmword_2594A80 = xmmword_20B8870;
  strcpy((char *)qword_2594A78, "Roundabout_Fifteenth_Exit");
  qword_2594A90 = (uint64_t)operator new(0x20uLL);
  unk_2594A98 = xmmword_20B8870;
  strcpy((char *)qword_2594A90, "Roundabout_Sixteenth_Exit");
  qword_2594AA8 = (uint64_t)operator new(0x20uLL);
  long long v273 = xmmword_20B91A0;
  xmmword_2594AB0 = xmmword_20B91A0;
  strcpy((char *)qword_2594AA8, "Roundabout_Seventeenth_Exit");
  qword_2594AC0 = (uint64_t)operator new(0x20uLL);
  unk_2594AC8 = xmmword_20B5EB0;
  strcpy((char *)qword_2594AC0, "Roundabout_Eighteenth_Exit");
  qword_2594AD8 = (uint64_t)operator new(0x20uLL);
  xmmword_2594AE0 = xmmword_20B5EB0;
  strcpy((char *)qword_2594AD8, "Roundabout_Nineteenth_Exit");
  byte_2594B07 = 8;
  strcpy((char *)&qword_2594AF0, "Off_Ramp");
  byte_2594B1F = 16;
  strcpy((char *)&xmmword_2594B08, "Off_Ramp_On_Left");
  byte_2594B37 = 17;
  strcpy((char *)&xmmword_2594B20, "Off_Ramp_On_Right");
  byte_2594B4F = 14;
  strcpy((char *)&qword_2594B38, "Change_Highway");
  strcpy((char *)&xmmword_2594B50, "Change_Highway_On_Left");
  HIBYTE(word_2594B66) = 22;
  qword_2594B68 = (uint64_t)operator new(0x19uLL);
  xmmword_2594B70 = xmmword_20B9250;
  strcpy((char *)qword_2594B68, "Change_Highway_On_Right");
  byte_2594B97 = 5;
  dword_2594B80 = 1735550285;
  byte_2594B84 = 101;
  byte_2594B85 = 0;
  byte_2594BAF = 12;
  strcpy((char *)&qword_2594B98, "Enter_Detour");
  byte_2594BC7 = 11;
  strcpy((char *)&qword_2594BB0, "Exit_Detour");
  byte_2594BDF = 18;
  strcpy((char *)&xmmword_2594BC8, "Walking_Turnaround");
  qword_2594BE0 = (uint64_t)operator new(0x19uLL);
  unk_2594BE8 = xmmword_20B9250;
  strcpy((char *)qword_2594BE0, "Walking_Turnaround_Sign");
  byte_2594C0F = 19;
  strcpy(byte_2594BF8, "Distance_Title_List");
  qword_2594C10 = (uint64_t)operator new(0x19uLL);
  unk_2594C18 = xmmword_20B9250;
  long long v270 = *(_OWORD *)"Cross_The_Street_Spoken";
  strcpy((char *)qword_2594C10, "Cross_The_Street_Spoken");
  *(void *)&v268[1] = *(void *)"t_Spoken";
  byte_2594C3F = 19;
  strcpy(byte_2594C28, "Arrival_Charge_List");
  byte_2594C57 = 15;
  strcpy((char *)&qword_2594C40, "Charge_At_Start");
  strcpy(&byte_2594C6F, "\tPass_Street");
  strcpy((char *)&qword_2594C58, "Pass_Exit");
  byte_2594C87 = 11;
  byte_2594C9F = 17;
  strcpy((char *)&xmmword_2594C88, "Pass_Intersection");
  strcpy(&byte_2594CB7, "\t_PrevExitNumber");
  strcpy((char *)&qword_2594CA0, "Next_Exit");
  byte_2594CCF = 15;
  strcpy(&byte_2594CE7, "\t_PrevUTurn");
  strcpy((char *)&qword_2594CD0, "_PrevRoad");
  strcpy(&byte_2594CFF, "\nNext_");
  byte_2594D17 = 5;
  byte_2594D2F = 15;
  strcpy((char *)&qword_2594D18, "_At_Next_Street");
  byte_2594D47 = 21;
  strcpy((char *)&xmmword_2594D30, "_At_Next_Intersection");
  byte_2594D5F = 14;
  strcpy((char *)&qword_2594D48, "Charge_Station");
  byte_2594D77 = 15;
  strcpy((char *)&qword_2594D60, "_Charge_Station");
  BYTE1(qword_2594D88) = 0;
  WORD1(qword_2594D88) = 25856;
  HIDWORD(qword_2594D88) = 335544320;
  strcpy((char *)&qword_2594D78, "_Charge_Station_");
  byte_2594DA7 = 8;
  strcpy((char *)&qword_2594D90, "_Minimum");
  byte_2594DBF = 15;
  strcpy((char *)&qword_2594DA8, "ExitShield_Sign");
  byte_2594DD7 = 8;
  strcpy((char *)&qword_2594DC0, "Walking_");
  byte_2594DEF = 16;
  strcpy((char *)&xmmword_2594DD8, "Walking_Continue");
  byte_2594E07 = 19;
  strcpy((char *)&xmmword_2594DF0, "Walking_Start_Route");
  qword_2594E08 = (uint64_t)operator new(0x20uLL);
  xmmword_2594E10 = xmmword_20B5EB0;
  strcpy((char *)qword_2594E08, "Walking_Start_Route_U_Turn");
  byte_2594E37 = 17;
  strcpy((char *)&xmmword_2594E20, "Walking_Left_Turn");
  byte_2594E4F = 18;
  strcpy((char *)&xmmword_2594E38, "Walking_Right_Turn");
  qword_2594E50 = (uint64_t)operator new(0x20uLL);
  unk_2594E58 = xmmword_20B5EB0;
  strcpy((char *)qword_2594E50, "Walking_Turn_At_Roundabout");
  qword_2594E68 = (uint64_t)operator new(0x20uLL);
  long long v277 = xmmword_20B91B0;
  xmmword_2594E70 = xmmword_20B91B0;
  strcpy((char *)qword_2594E68, "Walking_U_Turn_When_Possible");
  qword_2594E80 = (uint64_t)operator new(0x28uLL);
  long long v269 = xmmword_20B9390;
  unk_2594E88 = xmmword_20B9390;
  strcpy((char *)qword_2594E80, "Walking_Roundabout_Exit_Continue");
  qword_2594E98 = (uint64_t)operator new(0x20uLL);
  xmmword_2594EA0 = xmmword_20B91B0;
  strcpy((char *)qword_2594E98, "Walking_Roundabout_Exit_Left");
  qword_2594EB0 = (uint64_t)operator new(0x20uLL);
  long long v275 = xmmword_20B8890;
  unk_2594EB8 = xmmword_20B8890;
  strcpy((char *)qword_2594EB0, "Walking_Roundabout_Exit_Right");
  qword_2594EC8 = (uint64_t)operator new(0x20uLL);
  xmmword_2594ED0 = xmmword_20B8870;
  strcpy((char *)qword_2594EC8, "Walking_End_Of_Navigation");
  long long v272 = *(_OWORD *)"nd_Of_Navigation";
  uint64_t v0 = (char *)operator new(0x20uLL);
  qword_2594EE0 = (uint64_t)v0;
  unk_2594EE8 = xmmword_20B8870;
  *(_OWORD *)uint64_t v0 = *(_OWORD *)"Walking_End_Of_Navigation";
  *(_OWORD *)(v0 + 9) = v272;
  v0[25] = 0;
  byte_2594F0F = 8;
  strcpy((char *)&qword_2594EF8, "Walking_");
  qword_2594F10 = (uint64_t)operator new(0x19uLL);
  unk_2594F18 = v280;
  strcpy((char *)qword_2594F10, "Walking_Sharp_Left_Turn");
  qword_2594F28 = (uint64_t)operator new(0x20uLL);
  xmmword_2594F30 = v279;
  strcpy((char *)qword_2594F28, "Walking_Sharp_Right_Turn");
  qword_2594F40 = (uint64_t)operator new(0x20uLL);
  unk_2594F48 = v279;
  strcpy((char *)qword_2594F40, "Walking_Slight_Left_Turn");
  qword_2594F58 = (uint64_t)operator new(0x20uLL);
  xmmword_2594F60 = v278;
  strcpy((char *)qword_2594F58, "Walking_Slight_Right_Turn");
  byte_2594F87 = 4;
  strcpy((char *)&dword_2594F70, "Exit");
  byte_2594F9F = 4;
  strcpy((char *)&qword_2594F88, "Road");
  byte_2594FB7 = 7;
  strcpy((char *)&qword_2594FA0, "Freeway");
  byte_2594FCF = 12;
  strcpy((char *)&qword_2594FB8, "Intersection");
  byte_2594FE7 = 5;
  strcpy((char *)&dword_2594FD0, "Ferry");
  byte_2594FFF = 11;
  strcpy((char *)&qword_2594FE8, "ShuttleName");
  byte_2595017 = 5;
  strcpy((char *)&qword_2595000, "Road1");
  strcpy(&byte_259502F, "\tName");
  strcpy((char *)&qword_2595018, "Signpost1");
  byte_2595047 = 4;
  byte_259505F = 7;
  strcpy((char *)&dword_2595048, "Address");
  byte_2595077 = 7;
  strcpy((char *)&qword_2595060, "Shield1");
  byte_259508F = 13;
  strcpy((char *)&qword_2595078, "TowardShield1");
  byte_25950A7 = 6;
  strcpy((char *)&dword_2595090, "Right_");
  byte_25950BF = 5;
  strcpy((char *)&dword_25950A8, "Left_");
  strcpy(&byte_25950D7, "\tOn_Left_");
  strcpy((char *)&qword_25950C0, "On_Right_");
  byte_25950EF = 8;
  byte_2595107 = 12;
  strcpy((char *)&qword_25950F0, "ElevatorName");
  byte_259511F = 13;
  strcpy((char *)&qword_2595108, "EscalatorName");
  strcpy(&byte_2595137, "\nBridgeName");
  strcpy((char *)&qword_2595120, "StairsName");
  strcpy(&byte_259514F, "\nTunnelName");
  strcpy(&byte_2595167, "\nParking");
  byte_259517F = 7;
  strcpy(&byte_2595197, "\t_Escalator");
  strcpy((char *)&qword_2595180, "_Elevator");
  strcpy(&byte_25951AF, "\n_ElevatorName");
  byte_25951C7 = 13;
  byte_25951DF = 14;
  strcpy((char *)&qword_25951C8, "_EscalatorName");
  byte_25951F7 = 5;
  strcpy((char *)&qword_25951E0, "_Road");
  byte_259520F = 8;
  strcpy((char *)&qword_25951F8, "_Freeway");
  byte_2595227 = 13;
  strcpy((char *)&qword_2595210, "_Intersection");
  byte_259523F = 6;
  strcpy((char *)&dword_2595228, "_Road1");
  byte_2595257 = 6;
  strcpy((char *)&qword_2595240, "_Road2");
  strcpy(&byte_259526F, "\n_Signpost2");
  strcpy((char *)&qword_2595258, "_Signpost1");
  strcpy(&byte_2595287, "\n_Ferry");
  byte_259529F = 6;
  byte_25952B7 = 12;
  strcpy((char *)&qword_25952A0, "_Ferry_Ferry");
  byte_25952CF = 12;
  strcpy((char *)&qword_25952B8, "_ShuttleName");
  qword_25952D0 = (uint64_t)operator new(0x20uLL);
  unk_25952D8 = v277;
  strcpy((char *)qword_25952D0, "_Railway_Shuttle_ShuttleName");
  byte_25952FF = 11;
  strcpy((char *)&qword_25952E8, "_ExitNumber");
  byte_2595317 = 5;
  dword_2595300 = 1769489759;
  byte_2595304 = 116;
  byte_2595305 = 0;
  byte_259532F = 7;
  strcpy((char *)&dword_2595318, "_StayOn");
  byte_2595347 = 7;
  strcpy((char *)&dword_2595330, "_Stairs");
  byte_259535F = 5;
  strcpy((char *)&dword_2595348, "_Ramp");
  byte_2595377 = 11;
  strcpy((char *)&qword_2595360, "_StairsName");
  strcpy(&byte_259538F, "\t_Down");
  strcpy((char *)&qword_2595378, "_RampName");
  byte_25953A7 = 5;
  byte_25953BF = 3;
  dword_25953A8 = 7361887;
  byte_25953D7 = 7;
  strcpy((char *)&dword_25953C0, "_Bridge");
  byte_25953EF = 7;
  strcpy((char *)&dword_25953D8, "_Tunnel");
  byte_2595407 = 11;
  strcpy((char *)&qword_25953F0, "_Roundabout");
  byte_259541F = 6;
  strcpy((char *)&dword_2595408, "_Cross");
  byte_2595437 = 8;
  strcpy((char *)&qword_2595420, "_Parking");
  byte_259544F = 8;
  strcpy((char *)&qword_2595438, "_Shield1");
  byte_2595467 = 14;
  strcpy((char *)&qword_2595450, "_TowardShield1");
  byte_259547F = 8;
  strcpy((char *)&qword_2595468, "_Shield2");
  byte_2595497 = 14;
  strcpy((char *)&qword_2595480, "_TowardShield2");
  byte_25954AF = 11;
  strcpy((char *)&qword_2595498, "_Direction1");
  byte_25954C7 = 11;
  strcpy((char *)&qword_25954B0, "_Direction2");
  strcpy(&byte_25954DF, "\n_TowardDirection1");
  strcpy((char *)&qword_25954C8, "Direction1");
  byte_25954F7 = 17;
  byte_259550F = 17;
  strcpy((char *)&xmmword_25954F8, "_TowardDirection2");
  byte_2595527 = 16;
  strcpy((char *)&xmmword_2595510, "TowardDirection1");
  byte_259553F = 7;
  strcpy((char *)&qword_2595528, "_Spoken");
  byte_2595557 = 5;
  strcpy((char *)&qword_2595540, "_Sign");
  byte_259556F = 15;
  strcpy((char *)&qword_2595558, "_Secondary_Sign");
  byte_2595587 = 5;
  byte_2595574 = 116;
  dword_2595570 = 1936280671;
  byte_2595575 = 0;
  byte_259559F = 8;
  strcpy((char *)&qword_2595588, "_Primary");
  qword_25955B0 = 0xF00000000000000;
  strcpy((char *)&qword_25955A0, "_Spoken_Primary");
  strcpy(&byte_25955CF, "\n_Secondary");
  strcpy((char *)&qword_25955B8, "_Secondary");
  strcpy(&byte_25955E7, "\n_Spoken_Secondar");
  BYTE1(qword_25955F8) = 0;
  WORD1(qword_25955F8) = 0;
  HIDWORD(qword_25955F8) = 285212672;
  byte_2595617 = 13;
  strcpy((char *)&qword_2595600, "_To_Secondary");
  BYTE1(qword_2595628) = 0;
  WORD1(qword_2595628) = 0;
  HIDWORD(qword_2595628) = 335544320;
  strcpy((char *)&dword_2595618, "_Spoken_To_Secon");
  strcpy(&byte_2595647, "\t_ValidDistance");
  strcpy((char *)&qword_2595630, "_Distance");
  byte_259565F = 14;
  byte_2595677 = 6;
  strcpy((char *)&dword_2595660, "_Short");
  byte_259568F = 1;
  word_2595678 = 95;
  qword_2595690 = (uint64_t)operator new(0x20uLL);
  xmmword_2595698 = v279;
  strcpy((char *)qword_2595690, "Concatenate_Newline_Sign");
  uint64_t v1 = (char *)operator new(0x19uLL);
  qword_25956A8 = (uint64_t)v1;
  *(_OWORD *)algn_25956B0 = v280;
  *(_OWORD *)uint64_t v1 = v270;
  uint64_t v2 = *(void *)&v268[1];
  *(void *)(v1 + 15) = *(void *)&v268[1];
  v1[23] = 0;
  byte_25956D7 = 12;
  strcpy((char *)&qword_25956C0, "Chain_Spoken");
  byte_25956EF = 15;
  strcpy((char *)&qword_25956D8, "Chain_To_Spoken");
  strcpy(&byte_2595707, "\nThen_Spoken");
  strcpy((char *)&qword_25956F0, "And_Spoken");
  byte_259571F = 11;
  byte_2595737 = 18;
  strcpy((char *)&xmmword_2595720, "Concatenate_Spoken");
  qword_2595738 = (uint64_t)operator new(0x28uLL);
  long long v267 = xmmword_20B9240;
  unk_2595740 = xmmword_20B9240;
  strcpy((char *)qword_2595738, "At_Traffic_Light_Chain_Spoken_Primary");
  qword_2595750 = (uint64_t)operator new(0x28uLL);
  v268[2] = xmmword_20B9260;
  xmmword_2595758 = xmmword_20B9260;
  strcpy((char *)qword_2595750, "At_Stop_Sign_Chain_Spoken_Primary");
  qword_2595768 = (uint64_t)operator new(0x40uLL);
  *(_OWORD *)algn_2595770 = xmmword_20B9A90;
  strcpy((char *)qword_2595768, "At_Stop_Sign_Cross_Traffic_Doesnt_Stop_Chain_Spoken_Primary");
  qword_2595780 = (uint64_t)operator new(0x30uLL);
  long long v266 = xmmword_20B9A40;
  xmmword_2595788 = xmmword_20B9A40;
  strcpy((char *)qword_2595780, "At_Next_Traffic_Light_Chain_Spoken_Primary");
  qword_2595798 = (uint64_t)operator new(0x28uLL);
  long long v265 = xmmword_20E12D0;
  unk_25957A0 = xmmword_20E12D0;
  strcpy((char *)qword_2595798, "At_Next_Stop_Sign_Chain_Spoken_Primary");
  qword_25957B0 = (uint64_t)operator new(0x28uLL);
  long long v274 = xmmword_20B9960;
  xmmword_25957B8 = xmmword_20B9960;
  strcpy((char *)qword_25957B0, "At_Traffic_Light_Chain_Spoken_Secondary");
  qword_25957C8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25957D0 = xmmword_20B93A0;
  strcpy((char *)qword_25957C8, "At_Stop_Sign_Chain_Spoken_Secondary");
  qword_25957E0 = (uint64_t)operator new(0x30uLL);
  long long v272 = xmmword_20E1380;
  xmmword_25957E8 = xmmword_20E1380;
  strcpy((char *)qword_25957E0, "At_Next_Traffic_Light_Chain_Spoken_Secondary");
  qword_25957F8 = (uint64_t)operator new(0x30uLL);
  unk_2595800 = xmmword_20B93C0;
  strcpy((char *)qword_25957F8, "At_Next_Stop_Sign_Chain_Spoken_Secondary");
  qword_2595810 = (uint64_t)operator new(0x38uLL);
  xmmword_2595818 = xmmword_20B9A60;
  strcpy((char *)qword_2595810, "At_Next_One_Traffic_Light_Chain_Spoken_Secondary");
  qword_2595828 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_2595830 = xmmword_20E1380;
  strcpy((char *)qword_2595828, "At_Next_One_Stop_Sign_Chain_Spoken_Secondary");
  qword_2595840 = (uint64_t)operator new(0x28uLL);
  xmmword_2595848 = xmmword_20B9960;
  strcpy((char *)qword_2595840, "At_Mini_Roundabout_Chain_Spoken_Primary");
  qword_2595858 = (uint64_t)operator new(0x30uLL);
  long long v271 = xmmword_20B93D0;
  unk_2595860 = xmmword_20B93D0;
  strcpy((char *)qword_2595858, "At_Mini_Roundabout_Chain_Spoken_Secondary");
  qword_2595870 = (uint64_t)operator new(0x20uLL);
  xmmword_2595878 = v275;
  strcpy((char *)qword_2595870, "Walking_Distance_Chain_Spoken");
  qword_2595888 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2595890 = v275;
  strcpy((char *)qword_2595888, "Walking_Continue_Chain_Spoken");
  unint64_t v3 = (char *)operator new(0x19uLL);
  qword_25958A0 = (uint64_t)v3;
  xmmword_25958A8 = v280;
  *(_OWORD *)unint64_t v3 = v270;
  *(void *)(v3 + 15) = v2;
  v3[23] = 0;
  qword_25958B8 = (uint64_t)operator new(0x28uLL);
  unk_25958C0 = v269;
  strcpy((char *)qword_25958B8, "Distance_Cross_The_Street_Spoken");
  byte_25958E7 = 22;
  strcpy((char *)&xmmword_25958D0, "Walking_Continue_Cross");
  byte_25958FF = 14;
  strcpy((char *)&qword_25958E8, "Continue_Cross");
  byte_2595917 = 5;
  strcpy((char *)&dword_2595900, "Cross");
  byte_259592F = 19;
  strcpy((char *)&xmmword_2595918, "Cross_Street_Spoken");
  byte_2595947 = 17;
  strcpy((char *)&xmmword_2595930, "Cross_Road_Spoken");
  byte_259595F = 20;
  strcpy((char *)&xmmword_2595948, "Use_Crosswalk_Spoken");
  byte_2595977 = 15;
  strcpy((char *)&qword_2595960, "Distance_Spoken");
  byte_259598F = 19;
  strcpy((char *)&xmmword_2595978, "Distance_And_Spoken");
  byte_25959A7 = 21;
  strcpy((char *)&xmmword_2595990, "Continue_Stage_Spoken");
  byte_25959BF = 13;
  qmemcpy(&qword_25959A8, "ContinueStage", 13);
  int v4 = SHIBYTE(qword_25955B0);
  if (qword_25955B0 >= 0) {
    size_t v5 = HIBYTE(qword_25955B0);
  }
  else {
    size_t v5 = unk_25955A8;
  }
  unint64_t v6 = v5 + 13;
  byte_25959B5 = 0;
  if (v5 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint8x8_t v10 = operator new(v8 + 1);
    qword_25959C8 = v5 + 13;
    unk_25959D0 = v9 | 0x8000000000000000;
    qword_25959C0 = (uint64_t)v10;
    *uint8x8_t v10 = *(void *)"ContinueStage";
    int v7 = (char *)v10 + 13;
    *(void *)((char *)v10 + 5) = *(void *)"nueStage";
  }
  else
  {
    BYTE1(qword_25959C8) = 0;
    WORD1(qword_25959C8) = 0;
    HIDWORD(qword_25959C8) = 0;
    unk_25959D0 = 0;
    byte_25959D7 = v5 + 13;
    int v7 = (char *)&qword_25959C8 + 5;
    strcpy((char *)&qword_25959C0, "Continue");
    if (!v5) {
      goto LABEL_15;
    }
  }
  if (v4 >= 0) {
    uint64_t v11 = &qword_25955A0;
  }
  else {
    uint64_t v11 = (uint64_t *)qword_25955A0;
  }
  memmove(v7, v11, v5);
LABEL_15:
  v7[v5] = 0;
  int v12 = byte_25951F7;
  if (byte_25951F7 >= 0) {
    size_t v13 = byte_25951F7;
  }
  else {
    size_t v13 = qword_25951E8;
  }
  unint64_t v14 = v13 + 13;
  if (v13 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v14 >= 0x17)
  {
    uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v16 = v14 | 7;
    }
    uint64_t v17 = v16 + 1;
    uint64_t v18 = operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v13 + 13;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    *uint64_t v18 = qword_25959A8;
    *(void *)((char *)v18 + 5) = *(uint64_t *)((char *)&qword_25959A8 + 5);
    uint64_t v15 = (char *)v18 + 13;
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 5) = *(uint64_t *)((char *)&qword_25959A8 + 5);
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13 + 13;
    __dst.__r_.__value_.__r.__words[0] = qword_25959A8;
    uint64_t v15 = &__dst.__r_.__value_.__s.__data_[13];
    if (!v13) {
      goto LABEL_29;
    }
  }
  if (v12 >= 0) {
    long long v19 = &qword_25951E0;
  }
  else {
    long long v19 = (uint64_t *)qword_25951E0;
  }
  memmove(v15, v19, v13);
LABEL_29:
  v15[v13] = 0;
  if (v4 >= 0) {
    BOOL v20 = (const std::string::value_type *)&qword_25955A0;
  }
  else {
    BOOL v20 = (const std::string::value_type *)qword_25955A0;
  }
  unint64_t v21 = std::string::append(&__dst, v20, v5);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  qword_25959E8 = v21->__r_.__value_.__r.__words[2];
  xmmword_25959D8 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  byte_2595A07 = 5;
  strcpy((char *)&dword_25959F0, "Merge");
  qword_2595A08 = (uint64_t)operator new(0x20uLL);
  v268[1] = xmmword_20B8E90;
  *(_OWORD *)algn_2595A10 = xmmword_20B8E90;
  strcpy((char *)qword_2595A08, "Continue_Freeway_Spoken_Primary");
  byte_2595A37 = 8;
  strcpy((char *)&qword_2595A20, "Starting");
  byte_2595A4F = 14;
  strcpy((char *)&qword_2595A38, "Starting_Route");
  byte_2595A67 = 14;
  strcpy((char *)&qword_2595A50, "Resuming_Route");
  byte_2595A7F = 16;
  strcpy((char *)&xmmword_2595A68, "Continuing_Route");
  byte_2595A97 = 9;
  word_2595A88 = 112;
  qword_2595A80 = *(void *)&v264[48];
  strcpy(&byte_2595AAF, "\nEnding");
  strcpy((char *)&word_2595AA0, "op");
  qword_2595A98 = *(void *)&v268[0];
  byte_2595AC7 = 6;
  strcpy((char *)&qword_2595AC8, "_Destination");
  byte_2595ADF = 12;
  byte_2595AF7 = 15;
  strcpy((char *)&qword_2595AE0, "_At_Destination");
  std::operator+<char>();
  qword_2595B10 = (uint64_t)operator new(0x20uLL);
  unk_2595B18 = v279;
  strcpy((char *)qword_2595B10, "Spoken_Ending_At_Parking");
  qword_2595B28 = (uint64_t)operator new(0x20uLL);
  v268[0] = xmmword_20B9800;
  *(_OWORD *)algn_2595B30 = xmmword_20B9800;
  strcpy((char *)qword_2595B28, "Spoken_Pre_Arrival_Destination");
  strcpy((char *)&xmmword_2595B40, "Sign_Ending_At_Parking");
  HIBYTE(word_2595B56) = 22;
  byte_2595B6F = 4;
  strcpy((char *)&dword_2595B58, "Home");
  byte_2595B87 = 4;
  strcpy((char *)&dword_2595B70, "Work");
  byte_2595B9F = 8;
  strcpy((char *)&qword_2595B88, "Business");
  byte_2595BB7 = 4;
  strcpy((char *)&dword_2595BA0, "Name");
  byte_2595BCF = 13;
  strcpy((char *)&qword_2595BB8, "Other_Contact");
  byte_2595BE7 = 11;
  strcpy((char *)&qword_2595BD0, "ContactHome");
  byte_2595BFF = 11;
  *(_DWORD *)((char *)&qword_2595BE8 + 7) = 1802661719;
  byte_2595C17 = 7;
  *(int *)((char *)&dword_2595C00 + 3) = 1936942450;
  dword_2595C00 = 1919181889;
  strcpy((char *)&xmmword_2595C18, "Discoverability_Prompt");
  HIBYTE(word_2595C2E) = 22;
  byte_2595C47 = 6;
  dword_2595C30 = 1634878303;
  word_2595C34 = 26739;
  byte_2595C5F = 8;
  qword_2595C48 = 0x697269535F6F4E5FLL;
  byte_2595C77 = 9;
  strcpy((char *)&qword_2595C60, "_CityName");
  byte_2595C8F = 8;
  qword_2595C78 = 0x636972656E65475FLL;
  int v23 = byte_2595A37;
  if (byte_2595A37 >= 0) {
    size_t v24 = byte_2595A37;
  }
  else {
    size_t v24 = qword_2595A28;
  }
  LODWORD(v270) = byte_2594D77;
  if (byte_2594D77 >= 0) {
    size_t v25 = byte_2594D77;
  }
  else {
    size_t v25 = unk_2594D68;
  }
  qword_2595BE8 = *(void *)"ContactWork";
  byte_2595BF3 = 0;
  byte_2595C07 = 0;
  byte_2595C36 = 0;
  byte_2595C50 = 0;
  byte_2595C80 = 0;
  unint64_t v26 = v25 + v24;
  if (v25 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  *(void *)long long v264 = *(void *)"ContactWork";
  *(void *)&v264[16] = *(void *)"ContactHome";
  *(void *)&v264[32] = *(void *)"_Contact";
  *(void *)&v264[48] = *(void *)"Other_Contact";
  if (v26 <= 0x16)
  {
    unint64_t v27 = &qword_2595C90;
    qword_2595C98 = 0;
    unk_2595CA0 = 0;
    qword_2595C90 = 0;
    byte_2595CA7 = v25 + v24;
    if (!v24) {
      goto LABEL_47;
    }
    goto LABEL_43;
  }
  uint64_t v90 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17) {
    uint64_t v90 = v26 | 7;
  }
  uint64_t v91 = v90 + 1;
  unint64_t v27 = (uint64_t *)operator new(v90 + 1);
  qword_2595C98 = v25 + v24;
  unk_2595CA0 = v91 | 0x8000000000000000;
  qword_2595C90 = (uint64_t)v27;
  if (v24)
  {
LABEL_43:
    if (v23 >= 0) {
      char v28 = &qword_2595A20;
    }
    else {
      char v28 = (uint64_t *)qword_2595A20;
    }
    memmove(v27, v28, v24);
  }
LABEL_47:
  unint64_t v29 = (char *)v27 + v24;
  if (v25)
  {
    if ((int)v270 >= 0) {
      unsigned int v30 = &qword_2594D60;
    }
    else {
      unsigned int v30 = (uint64_t *)qword_2594D60;
    }
    memmove(v29, v30, v25);
  }
  v29[v25] = 0;
  int v31 = byte_2595ADF;
  if (byte_2595ADF >= 0) {
    size_t v32 = byte_2595ADF;
  }
  else {
    size_t v32 = qword_2595AD0;
  }
  unint64_t v33 = v32 + v24;
  if (v32 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v33 <= 0x16)
  {
    BOOL v34 = &qword_2595CA8;
    qword_2595CB0 = 0;
    unk_2595CB8 = 0;
    qword_2595CA8 = 0;
    byte_2595CBF = v32 + v24;
    if (!v24) {
      goto LABEL_62;
    }
    goto LABEL_58;
  }
  uint64_t v92 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v92 = v33 | 7;
  }
  uint64_t v93 = v92 + 1;
  BOOL v34 = (uint64_t *)operator new(v92 + 1);
  qword_2595CB0 = v32 + v24;
  unk_2595CB8 = v93 | 0x8000000000000000;
  qword_2595CA8 = (uint64_t)v34;
  if (v24)
  {
LABEL_58:
    if (v23 >= 0) {
      unint64_t v35 = &qword_2595A20;
    }
    else {
      unint64_t v35 = (uint64_t *)qword_2595A20;
    }
    memmove(v34, v35, v24);
  }
LABEL_62:
  long long v36 = (char *)v34 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      int v37 = &qword_2595AC8;
    }
    else {
      int v37 = (uint64_t *)qword_2595AC8;
    }
    memmove(v36, v37, v32);
  }
  v36[v32] = 0;
  qword_2595CC0 = (uint64_t)operator new(0x19uLL);
  unk_2595CC8 = v280;
  strcpy((char *)qword_2595CC0, "{ChargeStationCityName}");
  if (v33 < 0x17)
  {
    long long v38 = &qword_2595CD8;
    qword_2595CE0 = 0;
    unk_2595CE8 = 0;
    qword_2595CD8 = 0;
    byte_2595CEF = v32 + v24;
    if (!v24) {
      goto LABEL_73;
    }
    goto LABEL_69;
  }
  uint64_t v94 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v94 = v33 | 7;
  }
  uint64_t v95 = v94 + 1;
  long long v38 = (uint64_t *)operator new(v94 + 1);
  qword_2595CE0 = v32 + v24;
  unk_2595CE8 = v95 | 0x8000000000000000;
  qword_2595CD8 = (uint64_t)v38;
  if (v24)
  {
LABEL_69:
    if (v23 >= 0) {
      int v39 = &qword_2595A20;
    }
    else {
      int v39 = (uint64_t *)qword_2595A20;
    }
    memmove(v38, v39, v24);
  }
LABEL_73:
  int64x2_t v40 = (char *)v38 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      int64x2_t v41 = &qword_2595AC8;
    }
    else {
      int64x2_t v41 = (uint64_t *)qword_2595AC8;
    }
    memmove(v40, v41, v32);
  }
  v40[v32] = 0;
  strcpy((char *)&xmmword_2595CF0, "{NewBatteryPercentage}");
  HIBYTE(word_2595D06) = 22;
  qword_2595D08 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2595D10 = v273;
  strcpy((char *)qword_2595D08, "{OriginalBatteryPercentage}");
  byte_2595D37 = 19;
  strcpy((char *)&xmmword_2595D20, "_Arrival_Percentage");
  int v42 = byte_2595AC7;
  if (byte_2595AC7 >= 0) {
    size_t v43 = byte_2595AC7;
  }
  else {
    size_t v43 = qword_2595AB8;
  }
  unint64_t v44 = v43 + v25;
  if (v43 + v25 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v44 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v43 + v25;
    if (!v43) {
      goto LABEL_88;
    }
    goto LABEL_84;
  }
  uint64_t v96 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v44 | 7) != 0x17) {
    uint64_t v96 = v44 | 7;
  }
  uint64_t v97 = v96 + 1;
  p_dst = (char *)operator new(v96 + 1);
  __dst.__r_.__value_.__l.__size_ = v43 + v25;
  __dst.__r_.__value_.__r.__words[2] = v97 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v43)
  {
LABEL_84:
    if (v42 >= 0) {
      int64_t v46 = &qword_2595AB0;
    }
    else {
      int64_t v46 = (uint64_t *)qword_2595AB0;
    }
    memmove(p_dst, v46, v43);
  }
LABEL_88:
  uint64_t v47 = &p_dst[v43];
  if (v25)
  {
    if ((int)v270 >= 0) {
      unint64_t v48 = &qword_2594D60;
    }
    else {
      unint64_t v48 = (uint64_t *)qword_2594D60;
    }
    memmove(v47, v48, v25);
  }
  v47[v25] = 0;
  int v49 = std::string::append(&__dst, "_Percentage");
  long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  qword_2595D48 = v49->__r_.__value_.__r.__words[2];
  xmmword_2595D38 = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v51 = byte_2595AC7;
  if (byte_2595AC7 >= 0) {
    size_t v52 = byte_2595AC7;
  }
  else {
    size_t v52 = qword_2595AB8;
  }
  int v53 = byte_2594D77;
  if (byte_2594D77 >= 0) {
    size_t v54 = byte_2594D77;
  }
  else {
    size_t v54 = unk_2594D68;
  }
  unint64_t v55 = v54 + v52;
  if (v54 + v52 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v55 <= 0x16)
  {
    memset(&v281, 0, sizeof(v281));
    long long v56 = (char *)&v281;
    *((unsigned char *)&v281.__r_.__value_.__s + 23) = v54 + v52;
    if (!v52) {
      goto LABEL_108;
    }
    goto LABEL_104;
  }
  uint64_t v98 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v55 | 7) != 0x17) {
    uint64_t v98 = v55 | 7;
  }
  uint64_t v99 = v98 + 1;
  long long v56 = (char *)operator new(v98 + 1);
  v281.__r_.__value_.__l.__size_ = v54 + v52;
  v281.__r_.__value_.__r.__words[2] = v99 | 0x8000000000000000;
  v281.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  if (v52)
  {
LABEL_104:
    if (v51 >= 0) {
      int v57 = &qword_2595AB0;
    }
    else {
      int v57 = (uint64_t *)qword_2595AB0;
    }
    memmove(v56, v57, v52);
  }
LABEL_108:
  uint64_t v58 = &v56[v52];
  if (v54)
  {
    if (v53 >= 0) {
      double v59 = &qword_2594D60;
    }
    else {
      double v59 = (uint64_t *)qword_2594D60;
    }
    memmove(v58, v59, v54);
  }
  v58[v54] = 0;
  if (byte_2594DA7 >= 0) {
    int64_t v60 = (const std::string::value_type *)&qword_2594D90;
  }
  else {
    int64_t v60 = (const std::string::value_type *)qword_2594D90;
  }
  if (byte_2594DA7 >= 0) {
    std::string::size_type v61 = byte_2594DA7;
  }
  else {
    std::string::size_type v61 = *(void *)&byte_2594D98;
  }
  int v62 = std::string::append(&v281, v60, v61);
  long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  uint64_t v64 = std::string::append(&__dst, "_Percentage");
  long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  qword_2595D60 = v64->__r_.__value_.__r.__words[2];
  xmmword_2595D50 = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_121;
    }
  }
  else if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_121;
  }
  operator delete(v281.__r_.__value_.__l.__data_);
LABEL_121:
  int v66 = byte_2595AC7;
  if (byte_2595AC7 >= 0) {
    size_t v67 = byte_2595AC7;
  }
  else {
    size_t v67 = qword_2595AB8;
  }
  int v68 = byte_2594D77;
  if (byte_2594D77 >= 0) {
    size_t v69 = byte_2594D77;
  }
  else {
    size_t v69 = unk_2594D68;
  }
  unint64_t v70 = v69 + v67;
  if (v69 + v67 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v70 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    long long v71 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v69 + v67;
    if (!v67) {
      goto LABEL_134;
    }
    goto LABEL_130;
  }
  uint64_t v100 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v70 | 7) != 0x17) {
    uint64_t v100 = v70 | 7;
  }
  uint64_t v101 = v100 + 1;
  long long v71 = (char *)operator new(v100 + 1);
  __dst.__r_.__value_.__l.__size_ = v69 + v67;
  __dst.__r_.__value_.__r.__words[2] = v101 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
  if (v67)
  {
LABEL_130:
    if (v66 >= 0) {
      double v72 = &qword_2595AB0;
    }
    else {
      double v72 = (uint64_t *)qword_2595AB0;
    }
    memmove(v71, v72, v67);
  }
LABEL_134:
  uint64_t v73 = &v71[v67];
  if (v69)
  {
    if (v68 >= 0) {
      long long v74 = &qword_2594D60;
    }
    else {
      long long v74 = (uint64_t *)qword_2594D60;
    }
    memmove(v73, v74, v69);
  }
  v73[v69] = 0;
  double v75 = std::string::append(&__dst, "_Duration");
  long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
  qword_2595D78 = v75->__r_.__value_.__r.__words[2];
  xmmword_2595D68 = v76;
  v75->__r_.__value_.__l.__size_ = 0;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v77 = byte_2595AC7;
  if (byte_2595AC7 >= 0) {
    size_t v78 = byte_2595AC7;
  }
  else {
    size_t v78 = qword_2595AB8;
  }
  int v79 = byte_2594D77;
  if (byte_2594D77 >= 0) {
    size_t v80 = byte_2594D77;
  }
  else {
    size_t v80 = unk_2594D68;
  }
  unint64_t v81 = v80 + v78;
  if (v80 + v78 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v81 <= 0x16)
  {
    qword_2595D88 = 0;
    unk_2595D90 = 0;
    qword_2595D80 = 0;
    uint64_t v82 = &qword_2595D80;
    byte_2595D97 = v80 + v78;
    if (!v78) {
      goto LABEL_154;
    }
    goto LABEL_150;
  }
  uint64_t v102 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v81 | 7) != 0x17) {
    uint64_t v102 = v81 | 7;
  }
  uint64_t v103 = v102 + 1;
  uint64_t v82 = (uint64_t *)operator new(v102 + 1);
  qword_2595D88 = v80 + v78;
  unk_2595D90 = v103 | 0x8000000000000000;
  qword_2595D80 = (uint64_t)v82;
  if (v78)
  {
LABEL_150:
    if (v77 >= 0) {
      double v83 = &qword_2595AB0;
    }
    else {
      double v83 = (uint64_t *)qword_2595AB0;
    }
    memmove(v82, v83, v78);
  }
LABEL_154:
  unint64_t v84 = (char *)v82 + v78;
  if (v80)
  {
    if (v79 >= 0) {
      uint64_t v85 = &qword_2594D60;
    }
    else {
      uint64_t v85 = (uint64_t *)qword_2594D60;
    }
    memmove(v84, v85, v80);
  }
  v84[v80] = 0;
  int v86 = byte_2595D97;
  if (byte_2595D97 >= 0) {
    size_t v87 = byte_2595D97;
  }
  else {
    size_t v87 = qword_2595D88;
  }
  unint64_t v88 = v87 + 5;
  if (v87 + 5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v88 >= 0x17)
  {
    uint64_t v104 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v88 | 7) != 0x17) {
      uint64_t v104 = v88 | 7;
    }
    uint64_t v105 = v104 + 1;
    uint64_t v89 = (uint64_t *)operator new(v104 + 1);
    qword_2595DA0 = v87 + 5;
    unk_2595DA8 = v105 | 0x8000000000000000;
    qword_2595D98 = (uint64_t)v89;
  }
  else
  {
    uint64_t v89 = &qword_2595D98;
    qword_2595DA0 = 0;
    unk_2595DA8 = 0;
    qword_2595D98 = 0;
    byte_2595DAF = v87 + 5;
    if (!v87) {
      goto LABEL_201;
    }
  }
  if (v86 >= 0) {
    int v106 = &qword_2595D80;
  }
  else {
    int v106 = (uint64_t *)qword_2595D80;
  }
  memmove(v89, v106, v87);
LABEL_201:
  strcpy((char *)v89 + v87, "_Name");
  int v107 = byte_2595AC7;
  if (byte_2595AC7 >= 0) {
    size_t v108 = byte_2595AC7;
  }
  else {
    size_t v108 = qword_2595AB8;
  }
  int v109 = byte_2594D77;
  if (byte_2594D77 >= 0) {
    size_t v110 = byte_2594D77;
  }
  else {
    size_t v110 = unk_2594D68;
  }
  unint64_t v111 = v110 + v108;
  if (v110 + v108 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v111 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    int v112 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v110 + v108;
    if (!v108) {
      goto LABEL_214;
    }
    goto LABEL_210;
  }
  uint64_t v122 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v111 | 7) != 0x17) {
    uint64_t v122 = v111 | 7;
  }
  uint64_t v123 = v122 + 1;
  int v112 = (char *)operator new(v122 + 1);
  __dst.__r_.__value_.__l.__size_ = v110 + v108;
  __dst.__r_.__value_.__r.__words[2] = v123 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
  if (v108)
  {
LABEL_210:
    if (v107 >= 0) {
      long long v113 = &qword_2595AB0;
    }
    else {
      long long v113 = (uint64_t *)qword_2595AB0;
    }
    memmove(v112, v113, v108);
  }
LABEL_214:
  unsigned __int8 v114 = &v112[v108];
  if (v110)
  {
    if (v109 >= 0) {
      long long v115 = &qword_2594D60;
    }
    else {
      long long v115 = (uint64_t *)qword_2594D60;
    }
    memmove(v114, v115, v110);
  }
  v114[v110] = 0;
  unsigned __int8 v116 = std::string::append(&__dst, "_Connector_Type");
  long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
  qword_2595DC0 = v116->__r_.__value_.__r.__words[2];
  xmmword_2595DB0 = v117;
  v116->__r_.__value_.__l.__size_ = 0;
  v116->__r_.__value_.__r.__words[2] = 0;
  v116->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v118 = SHIBYTE(qword_2595DC0);
  if (qword_2595DC0 >= 0) {
    size_t v119 = HIBYTE(qword_2595DC0);
  }
  else {
    size_t v119 = *((void *)&xmmword_2595DB0 + 1);
  }
  unint64_t v120 = v119 + 6;
  if (v119 + 6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v120 >= 0x17)
  {
    uint64_t v124 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v120 | 7) != 0x17) {
      uint64_t v124 = v120 | 7;
    }
    uint64_t v125 = v124 + 1;
    unint64_t v121 = (uint64_t *)operator new(v124 + 1);
    qword_2595DD0 = v119 + 6;
    unk_2595DD8 = v125 | 0x8000000000000000;
    qword_2595DC8 = (uint64_t)v121;
  }
  else
  {
    unint64_t v121 = &qword_2595DC8;
    qword_2595DD0 = 0;
    unk_2595DD8 = 0;
    qword_2595DC8 = 0;
    byte_2595DDF = v119 + 6;
    if (!v119) {
      goto LABEL_239;
    }
  }
  if (v118 >= 0) {
    int v126 = &xmmword_2595DB0;
  }
  else {
    int v126 = (long long *)xmmword_2595DB0;
  }
  memmove(v121, v126, v119);
LABEL_239:
  strcpy((char *)v121 + v119, "_Power");
  int v127 = byte_2595AC7;
  if (byte_2595AC7 >= 0) {
    size_t v128 = byte_2595AC7;
  }
  else {
    size_t v128 = qword_2595AB8;
  }
  int v129 = byte_2594D77;
  if (byte_2594D77 >= 0) {
    size_t v130 = byte_2594D77;
  }
  else {
    size_t v130 = unk_2594D68;
  }
  unint64_t v131 = v130 + v128;
  if (v130 + v128 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v131 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    int v132 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v130 + v128;
    if (!v128) {
      goto LABEL_252;
    }
    goto LABEL_248;
  }
  uint64_t v161 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v131 | 7) != 0x17) {
    uint64_t v161 = v131 | 7;
  }
  uint64_t v162 = v161 + 1;
  int v132 = (char *)operator new(v161 + 1);
  __dst.__r_.__value_.__l.__size_ = v130 + v128;
  __dst.__r_.__value_.__r.__words[2] = v162 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v132;
  if (v128)
  {
LABEL_248:
    if (v127 >= 0) {
      uint64_t v133 = &qword_2595AB0;
    }
    else {
      uint64_t v133 = (uint64_t *)qword_2595AB0;
    }
    memmove(v132, v133, v128);
  }
LABEL_252:
  int v134 = &v132[v128];
  if (v130)
  {
    if (v129 >= 0) {
      long long v135 = &qword_2594D60;
    }
    else {
      long long v135 = (uint64_t *)qword_2594D60;
    }
    memmove(v134, v135, v130);
  }
  v134[v130] = 0;
  if (byte_259553F >= 0) {
    int v136 = (const std::string::value_type *)&qword_2595528;
  }
  else {
    int v136 = (const std::string::value_type *)qword_2595528;
  }
  if (byte_259553F >= 0) {
    std::string::size_type v137 = byte_259553F;
  }
  else {
    std::string::size_type v137 = unk_2595530;
  }
  int v138 = std::string::append(&__dst, v136, v137);
  long long v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
  qword_2595DF0 = v138->__r_.__value_.__r.__words[2];
  xmmword_2595DE0 = v139;
  v138->__r_.__value_.__l.__size_ = 0;
  v138->__r_.__value_.__r.__words[2] = 0;
  v138->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v140 = byte_2595AC7;
  if (byte_2595AC7 >= 0) {
    size_t v141 = byte_2595AC7;
  }
  else {
    size_t v141 = qword_2595AB8;
  }
  int v142 = byte_2594D77;
  if (byte_2594D77 >= 0) {
    size_t v143 = byte_2594D77;
  }
  else {
    size_t v143 = unk_2594D68;
  }
  unint64_t v144 = v143 + v141;
  if (v143 + v141 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v144 <= 0x16)
  {
    memset(&v281, 0, sizeof(v281));
    v145 = (char *)&v281;
    *((unsigned char *)&v281.__r_.__value_.__s + 23) = v143 + v141;
    if (!v141) {
      goto LABEL_278;
    }
    goto LABEL_274;
  }
  uint64_t v163 = (v144 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v144 | 7) != 0x17) {
    uint64_t v163 = v144 | 7;
  }
  uint64_t v164 = v163 + 1;
  v145 = (char *)operator new(v163 + 1);
  v281.__r_.__value_.__l.__size_ = v143 + v141;
  v281.__r_.__value_.__r.__words[2] = v164 | 0x8000000000000000;
  v281.__r_.__value_.__r.__words[0] = (std::string::size_type)v145;
  if (v141)
  {
LABEL_274:
    if (v140 >= 0) {
      int v146 = &qword_2595AB0;
    }
    else {
      int v146 = (uint64_t *)qword_2595AB0;
    }
    memmove(v145, v146, v141);
  }
LABEL_278:
  v147 = &v145[v141];
  if (v143)
  {
    if (v142 >= 0) {
      int v148 = &qword_2594D60;
    }
    else {
      int v148 = (uint64_t *)qword_2594D60;
    }
    memmove(v147, v148, v143);
  }
  v147[v143] = 0;
  if (byte_2594DA7 >= 0) {
    double v149 = (const std::string::value_type *)&qword_2594D90;
  }
  else {
    double v149 = (const std::string::value_type *)qword_2594D90;
  }
  if (byte_2594DA7 >= 0) {
    std::string::size_type v150 = byte_2594DA7;
  }
  else {
    std::string::size_type v150 = *(void *)&byte_2594D98;
  }
  uint64_t v151 = std::string::append(&v281, v149, v150);
  long long v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v152;
  v151->__r_.__value_.__l.__size_ = 0;
  v151->__r_.__value_.__r.__words[2] = 0;
  v151->__r_.__value_.__r.__words[0] = 0;
  if (byte_259553F >= 0) {
    std::string v153 = (const std::string::value_type *)&qword_2595528;
  }
  else {
    std::string v153 = (const std::string::value_type *)qword_2595528;
  }
  if (byte_259553F >= 0) {
    std::string::size_type v154 = byte_259553F;
  }
  else {
    std::string::size_type v154 = unk_2595530;
  }
  long long v155 = std::string::append(&__dst, v153, v154);
  long long v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
  qword_2595E08 = v155->__r_.__value_.__r.__words[2];
  xmmword_2595DF8 = v156;
  v155->__r_.__value_.__l.__size_ = 0;
  v155->__r_.__value_.__r.__words[2] = 0;
  v155->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_297;
    }
  }
  else if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_297;
  }
  operator delete(v281.__r_.__value_.__l.__data_);
LABEL_297:
  byte_2595E27 = 16;
  strcpy((char *)&xmmword_2595E10, "Use_NACS_Adapter");
  byte_2595E3F = 16;
  strcpy(byte_2595E28, "Start_Route_Sign");
  qword_2595E40 = (uint64_t)operator new(0x20uLL);
  unk_2595E48 = v276;
  strcpy((char *)qword_2595E40, "Start_Route_Spoken_Primary");
  int v157 = byte_25944D7;
  if (byte_25944D7 >= 0) {
    size_t v158 = byte_25944D7;
  }
  else {
    size_t v158 = qword_25944C8;
  }
  unint64_t v159 = v158 + 27;
  if (v158 + 27 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v159 <= 0x16)
  {
    uint64_t v160 = &qword_2595E58;
    qword_2595E60 = 0;
    unk_2595E68 = 0;
    qword_2595E58 = 0;
    byte_2595E6F = v158 + 27;
LABEL_314:
    if (v157 >= 0) {
      uint64_t v167 = byte_25944C0;
    }
    else {
      uint64_t v167 = *(char **)byte_25944C0;
    }
    memmove(v160, v167, v158);
    goto LABEL_318;
  }
  uint64_t v165 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v159 | 7) != 0x17) {
    uint64_t v165 = v159 | 7;
  }
  uint64_t v166 = v165 + 1;
  uint64_t v160 = (uint64_t *)operator new(v165 + 1);
  qword_2595E60 = v158 + 27;
  unk_2595E68 = v166 | 0x8000000000000000;
  qword_2595E58 = (uint64_t)v160;
  if (v158) {
    goto LABEL_314;
  }
LABEL_318:
  strcpy((char *)v160 + v158, "Turn_Around_To_Route_Spoken");
  strcpy(&byte_2595E87, "\t_Two_Lanes");
  strcpy((char *)&qword_2595E70, "_One_Lane");
  strcpy(&byte_2595E9F, "\n_Three_Lanes");
  byte_2595EB7 = 12;
  byte_2595ECF = 11;
  strcpy((char *)&qword_2595EB8, "_Four_Lanes");
  byte_2595EE7 = 11;
  strcpy((char *)&qword_2595ED0, "_Five_Lanes");
  strcpy(&byte_2595EFF, "\n_Seven_Lanes");
  strcpy((char *)&qword_2595EE8, "_Six_Lanes");
  byte_2595F17 = 12;
  byte_2595F2F = 12;
  strcpy((char *)&qword_2595F18, "_Eight_Lanes");
  byte_2595F47 = 12;
  strcpy((char *)&qword_2595F30, "_Second_Lane");
  byte_2595F5F = 11;
  strcpy((char *)&qword_2595F48, "_Third_Lane");
  byte_2595F77 = 19;
  long long v270 = *(_OWORD *)"_Second_Third_Lanes";
  strcpy((char *)&xmmword_2595F60, "_Second_Third_Lanes");
  byte_2595F8F = 4;
  strcpy((char *)&dword_2595F78, "Left");
  byte_2595FA7 = 5;
  byte_2595F94 = 116;
  dword_2595F90 = 1751607634;
  byte_2595F95 = 0;
  byte_2595FBF = 6;
  strcpy((char *)&dword_2595FA8, "Middle");
  BYTE1(qword_2595FD0) = 0;
  WORD1(qword_2595FD0) = 0;
  HIDWORD(qword_2595FD0) = 0x10000000;
  strcpy((char *)dword_2595FC0, "Left_Second_Lane");
  BYTE1(qword_2595FE8) = 0;
  WORD1(qword_2595FE8) = 0;
  HIDWORD(qword_2595FE8) = 285212672;
  strcpy((char *)&dword_2595FD8, "Right_Second_Lan");
  qword_2596000 = 0xF00000000000000;
  strcpy((char *)&dword_2595FF0, "Left_Third_Lane");
  qword_2596018 = 0x1000000000000000;
  byte_259600C = 116;
  dword_2596008 = 1751607634;
  dword_2596014 = 1701732684;
  unk_259600D = *(void *)"_Third_Lane";
  v168 = (char *)operator new(0x19uLL);
  qword_2596020 = (uint64_t)v168;
  unk_2596028 = v280;
  *(_DWORD *)v168 = 1952867660;
  strcpy(v168 + 19, "anes");
  *(_OWORD *)(v168 + 4) = v270;
  int v169 = (char *)operator new(0x20uLL);
  qword_2596038 = (uint64_t)v169;
  unk_2596040 = v279;
  *(_DWORD *)int v169 = 1751607634;
  v169[4] = 116;
  strcpy(v169 + 20, "anes");
  *(_OWORD *)(v169 + 5) = v270;
  byte_2596067 = 5;
  strcpy((char *)&dword_2596050, "_Stay");
  byte_259607F = 13;
  strcpy((char *)&qword_2596068, "Continue_Sign");
  byte_2596097 = 8;
  strcpy((char *)&qword_2596080, "Continue");
  int v170 = byte_2595557;
  if (byte_2595557 >= 0) {
    size_t v171 = byte_2595557;
  }
  else {
    size_t v171 = qword_2595548;
  }
  unint64_t v172 = v171 + 8;
  if (v171 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v172 >= 0x17)
  {
    uint64_t v174 = (v172 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v172 | 7) != 0x17) {
      uint64_t v174 = v172 | 7;
    }
    uint64_t v175 = v174 + 1;
    v176 = operator new(v174 + 1);
    qword_25960A0 = v171 + 8;
    qword_25960A8 = v175 | 0x8000000000000000;
    qword_2596098 = (uint64_t)v176;
    void *v176 = 0x65756E69746E6F43;
    uint64_t v173 = v176 + 1;
  }
  else
  {
    qword_25960A8 = 0;
    HIBYTE(qword_25960A8) = v171 + 8;
    qword_2596098 = 0x65756E69746E6F43;
    qword_25960A0 = 0;
    uint64_t v173 = &qword_25960A0;
    if (!v171) {
      goto LABEL_332;
    }
  }
  if (v170 >= 0) {
    int v177 = &qword_2595540;
  }
  else {
    int v177 = (uint64_t *)qword_2595540;
  }
  memmove(v173, v177, v171);
LABEL_332:
  *((unsigned char *)v173 + v171) = 0;
  int v178 = SHIBYTE(qword_25955B0);
  if (qword_25955B0 >= 0) {
    size_t v179 = HIBYTE(qword_25955B0);
  }
  else {
    size_t v179 = unk_25955A8;
  }
  unint64_t v180 = v179 + 8;
  if (v179 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v180 >= 0x17)
  {
    uint64_t v182 = (v180 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v180 | 7) != 0x17) {
      uint64_t v182 = v180 | 7;
    }
    uint64_t v183 = v182 + 1;
    v184 = operator new(v182 + 1);
    qword_25960B8 = v179 + 8;
    qword_25960C0 = v183 | 0x8000000000000000;
    qword_25960B0 = (uint64_t)v184;
    void *v184 = qword_2596080;
    uint64_t v181 = v184 + 1;
  }
  else
  {
    qword_25960C0 = 0;
    HIBYTE(qword_25960C0) = v179 + 8;
    qword_25960B0 = qword_2596080;
    qword_25960B8 = 0;
    uint64_t v181 = &qword_25960B8;
    if (!v179) {
      goto LABEL_346;
    }
  }
  if (v178 >= 0) {
    v185 = &qword_25955A0;
  }
  else {
    v185 = (uint64_t *)qword_25955A0;
  }
  memmove(v181, v185, v179);
LABEL_346:
  *((unsigned char *)v181 + v179) = 0;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 83;
  HIBYTE(v284) = 2;
  strcpy((char *)&v283, "SW");
  HIBYTE(v286) = 1;
  LOWORD(v285[0]) = 87;
  HIBYTE(v288) = 2;
  strcpy((char *)&v287, "NW");
  HIBYTE(v290) = 1;
  LOWORD(v289[0]) = 78;
  HIBYTE(v292) = 2;
  strcpy((char *)&v291, "NE");
  HIBYTE(v294) = 1;
  LOWORD(v293) = 69;
  HIBYTE(v296) = 2;
  strcpy((char *)&__p, "SE");
  sub_4BDC0C(qword_25960C8, (uint64_t)&__dst, 8uLL);
  if (SHIBYTE(v296) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v294) & 0x80000000) == 0)
    {
LABEL_348:
      if ((SHIBYTE(v292) & 0x80000000) == 0) {
        goto LABEL_349;
      }
      goto LABEL_383;
    }
  }
  else if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
    goto LABEL_348;
  }
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_349:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_350;
    }
    goto LABEL_384;
  }
LABEL_383:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_350:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_351;
    }
    goto LABEL_385;
  }
LABEL_384:
  operator delete(v289[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_351:
    if ((SHIBYTE(v286) & 0x80000000) == 0) {
      goto LABEL_352;
    }
    goto LABEL_386;
  }
LABEL_385:
  operator delete((void *)v287);
  if ((SHIBYTE(v286) & 0x80000000) == 0)
  {
LABEL_352:
    if ((SHIBYTE(v284) & 0x80000000) == 0) {
      goto LABEL_353;
    }
LABEL_387:
    operator delete((void *)v283);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_354;
    }
    goto LABEL_388;
  }
LABEL_386:
  operator delete(v285[0]);
  if (SHIBYTE(v284) < 0) {
    goto LABEL_387;
  }
LABEL_353:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_354;
  }
LABEL_388:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_354:
  byte_25960F7 = 13;
  strcpy((char *)&qword_25960E0, "{instruction}");
  byte_259610F = 20;
  strcpy(byte_25960F8, "{primaryInstruction}");
  strcpy((char *)&xmmword_2596110, "{secondaryInstruction}");
  HIBYTE(word_2596126) = 22;
  qword_2596128 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2596130 = v278;
  strcpy((char *)qword_2596128, "{andSecondaryInstruction}");
  qword_2596140 = (uint64_t)operator new(0x20uLL);
  unk_2596148 = v279;
  strcpy((char *)qword_2596140, "{toSecondaryInstruction}");
  byte_259616F = 21;
  strcpy(byte_2596158, "{continueInstruction}");
  qword_2596170 = (uint64_t)operator new(0x20uLL);
  unk_2596178 = v276;
  strcpy((char *)qword_2596170, "{thenSecondaryInstruction}");
  byte_259619F = 14;
  strcpy((char *)&qword_2596188, "{instruction1}");
  byte_25961B7 = 14;
  strcpy((char *)&qword_25961A0, "{instruction2}");
  strcpy(&byte_25961CF, "\n{nextDistance}");
  strcpy((char *)&qword_25961B8, "{distance}");
  byte_25961E7 = 14;
  byte_25961FF = 16;
  strcpy(byte_25961E8, "{valid_distance}");
  strcpy(&byte_2596217, "\n{valid_distance}");
  strcpy((char *)&qword_2596200, "{distance}");
  byte_259622F = 16;
  byte_2596247 = 15;
  strcpy((char *)&qword_2596230, "{ClimbDistance}");
  byte_259625F = 17;
  strcpy(byte_2596248, "{DescentDistance}");
  byte_2596277 = 13;
  strcpy((char *)&qword_2596260, "{nonBrkSpace}");
  byte_259628F = 9;
  strcpy((char *)&qword_2596278, "{newLine}");
  byte_25962A7 = 6;
  word_2596294 = -24382;
  dword_2596290 = -1211981630;
  byte_2596296 = 0;
  byte_25962BF = 2;
  word_25962A8 = -24382;
  byte_25962AA = 0;
  byte_25962D7 = 1;
  word_25962C0 = 10;
  byte_25962EF = 1;
  word_25962D8 = 32;
  byte_2596307 = 2;
  strcpy((char *)&word_25962F0, "\n\n");
  strcpy(&byte_259631F, "\t{TowardShield1}");
  strcpy((char *)&qword_2596308, "{Shield1}");
  byte_2596337 = 15;
  strcpy(&byte_259634F, "\t{TowardShield2}");
  strcpy((char *)&qword_2596338, "{Shield2}");
  byte_2596367 = 15;
  byte_259637F = 12;
  strcpy((char *)&qword_2596368, "{Direction1}");
  byte_2596397 = 12;
  strcpy((char *)&qword_2596380, "{Direction2}");
  byte_25963B7 = 18;
  strcpy((char *)&xmmword_25963A0, "{TowardDirection1}");
  byte_25963CF = 18;
  strcpy(byte_25963B8, "{TowardDirection2}");
  byte_25963E7 = 7;
  strcpy((char *)&dword_25963D0, "{Icon1}");
  byte_25963FF = 7;
  strcpy((char *)&dword_25963E8, "{Icon2}");
  byte_2596400[23] = 14;
  strcpy(byte_2596400, "{Intersection}");
  byte_259642F = 6;
  strcpy((char *)&dword_2596418, "{Road}");
  byte_2596447 = 7;
  strcpy((char *)&xmmword_2596430, "{Road1}");
  byte_259645F = 7;
  strcpy((char *)&dword_2596448, "{Road2}");
  strcpy(&byte_2596477, "\n{Freeway}");
  strcpy((char *)&xmmword_2596460, "{Elevator}");
  strcpy(&byte_259648F, "\t{Ferry}");
  byte_25964A7 = 7;
  byte_25964BF = 13;
  strcpy((char *)&xmmword_25964A8, "{ShuttleName}");
  byte_25964D7 = 11;
  strcpy((char *)&xmmword_25964C0, "{Signpost1}");
  byte_25964EF = 11;
  strcpy((char *)&xmmword_25964D8, "{Signpost2}");
  byte_2596507 = 12;
  strcpy((char *)&xmmword_25964F0, "{ExitNumber}");
  strcpy(&byte_259651F, "\t{Name}");
  strcpy((char *)&xmmword_2596508, "{Address}");
  byte_2596537 = 6;
  byte_259654F = 11;
  strcpy((char *)&xmmword_2596538, "{PlaceName}");
  byte_2596567 = 14;
  strcpy((char *)&xmmword_2596550, "{ElevatorName}");
  byte_259657F = 15;
  strcpy((char *)&xmmword_2596568, "{EscalatorName}");
  byte_2596597 = 12;
  strcpy((char *)&xmmword_2596580, "{StairsName}");
  strcpy(&byte_25965AF, "\n{BridgeName}");
  strcpy((char *)&xmmword_2596598, "{RampName}");
  byte_25965C7 = 12;
  byte_25965DF = 12;
  strcpy((char *)&xmmword_25965C8, "{TunnelName}");
  byte_25965F7 = 13;
  strcpy((char *)&xmmword_25965E0, "{CustomLabel}");
  std::string __dst = *(std::string *)byte_2596400;
  long long v283 = *(_OWORD *)&dword_2596418;
  uint64_t v284 = unk_2596428;
  *(_OWORD *)uint64_t v285 = xmmword_2596430;
  uint64_t v286 = unk_2596440;
  long long v287 = *(_OWORD *)&dword_2596448;
  uint64_t v288 = unk_2596458;
  *(_OWORD *)long long v289 = xmmword_2596460;
  uint64_t v290 = unk_2596470;
  uint64_t v292 = unk_2596488;
  long long v291 = *(_OWORD *)&qword_2596478;
  long long v293 = xmmword_2596490;
  uint64_t v294 = unk_25964A0;
  uint64_t v296 = unk_25964B8;
  long long __p = xmmword_25964A8;
  long long v297 = xmmword_25964C0;
  uint64_t v298 = unk_25964D0;
  uint64_t v300 = unk_25964E8;
  long long v299 = xmmword_25964D8;
  long long v301 = xmmword_25964F0;
  long long v303 = xmmword_2596508;
  uint64_t v302 = unk_2596500;
  uint64_t v304 = unk_2596518;
  long long v305 = xmmword_2596520;
  long long v307 = xmmword_2596538;
  uint64_t v306 = unk_2596530;
  uint64_t v308 = unk_2596548;
  long long v309 = xmmword_2596550;
  long long v311 = xmmword_2596568;
  uint64_t v310 = unk_2596560;
  uint64_t v312 = unk_2596578;
  long long v313 = xmmword_2596580;
  long long v315 = xmmword_2596598;
  uint64_t v314 = unk_2596590;
  uint64_t v316 = unk_25965A8;
  long long v317 = xmmword_25965B0;
  long long v319 = xmmword_25965C8;
  uint64_t v318 = unk_25965C0;
  uint64_t v320 = unk_25965D8;
  uint64_t v322 = unk_25965F0;
  long long v321 = xmmword_25965E0;
  sub_4BDC0C(qword_25965F8, (uint64_t)&__dst, 0x15uLL);
  if (SHIBYTE(v322) < 0)
  {
    operator delete((void *)v321);
    if ((SHIBYTE(v320) & 0x80000000) == 0)
    {
LABEL_356:
      if ((SHIBYTE(v318) & 0x80000000) == 0) {
        goto LABEL_357;
      }
      goto LABEL_391;
    }
  }
  else if ((SHIBYTE(v320) & 0x80000000) == 0)
  {
    goto LABEL_356;
  }
  operator delete((void *)v319);
  if ((SHIBYTE(v318) & 0x80000000) == 0)
  {
LABEL_357:
    if ((SHIBYTE(v316) & 0x80000000) == 0) {
      goto LABEL_358;
    }
    goto LABEL_392;
  }
LABEL_391:
  operator delete((void *)v317);
  if ((SHIBYTE(v316) & 0x80000000) == 0)
  {
LABEL_358:
    if ((SHIBYTE(v314) & 0x80000000) == 0) {
      goto LABEL_359;
    }
    goto LABEL_393;
  }
LABEL_392:
  operator delete((void *)v315);
  if ((SHIBYTE(v314) & 0x80000000) == 0)
  {
LABEL_359:
    if ((SHIBYTE(v312) & 0x80000000) == 0) {
      goto LABEL_360;
    }
    goto LABEL_394;
  }
LABEL_393:
  operator delete((void *)v313);
  if ((SHIBYTE(v312) & 0x80000000) == 0)
  {
LABEL_360:
    if ((SHIBYTE(v310) & 0x80000000) == 0) {
      goto LABEL_361;
    }
    goto LABEL_395;
  }
LABEL_394:
  operator delete((void *)v311);
  if ((SHIBYTE(v310) & 0x80000000) == 0)
  {
LABEL_361:
    if ((SHIBYTE(v308) & 0x80000000) == 0) {
      goto LABEL_362;
    }
    goto LABEL_396;
  }
LABEL_395:
  operator delete((void *)v309);
  if ((SHIBYTE(v308) & 0x80000000) == 0)
  {
LABEL_362:
    if ((SHIBYTE(v306) & 0x80000000) == 0) {
      goto LABEL_363;
    }
    goto LABEL_397;
  }
LABEL_396:
  operator delete((void *)v307);
  if ((SHIBYTE(v306) & 0x80000000) == 0)
  {
LABEL_363:
    if ((SHIBYTE(v304) & 0x80000000) == 0) {
      goto LABEL_364;
    }
    goto LABEL_398;
  }
LABEL_397:
  operator delete((void *)v305);
  if ((SHIBYTE(v304) & 0x80000000) == 0)
  {
LABEL_364:
    if ((SHIBYTE(v302) & 0x80000000) == 0) {
      goto LABEL_365;
    }
    goto LABEL_399;
  }
LABEL_398:
  operator delete((void *)v303);
  if ((SHIBYTE(v302) & 0x80000000) == 0)
  {
LABEL_365:
    if ((SHIBYTE(v300) & 0x80000000) == 0) {
      goto LABEL_366;
    }
    goto LABEL_400;
  }
LABEL_399:
  operator delete((void *)v301);
  if ((SHIBYTE(v300) & 0x80000000) == 0)
  {
LABEL_366:
    if ((SHIBYTE(v298) & 0x80000000) == 0) {
      goto LABEL_367;
    }
    goto LABEL_401;
  }
LABEL_400:
  operator delete((void *)v299);
  if ((SHIBYTE(v298) & 0x80000000) == 0)
  {
LABEL_367:
    if ((SHIBYTE(v296) & 0x80000000) == 0) {
      goto LABEL_368;
    }
    goto LABEL_402;
  }
LABEL_401:
  operator delete((void *)v297);
  if ((SHIBYTE(v296) & 0x80000000) == 0)
  {
LABEL_368:
    if ((SHIBYTE(v294) & 0x80000000) == 0) {
      goto LABEL_369;
    }
    goto LABEL_403;
  }
LABEL_402:
  operator delete((void *)__p);
  if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
LABEL_369:
    if ((SHIBYTE(v292) & 0x80000000) == 0) {
      goto LABEL_370;
    }
    goto LABEL_404;
  }
LABEL_403:
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_370:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_371;
    }
    goto LABEL_405;
  }
LABEL_404:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_371:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_372;
    }
    goto LABEL_406;
  }
LABEL_405:
  operator delete(v289[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_372:
    if ((SHIBYTE(v286) & 0x80000000) == 0) {
      goto LABEL_373;
    }
    goto LABEL_407;
  }
LABEL_406:
  operator delete((void *)v287);
  if ((SHIBYTE(v286) & 0x80000000) == 0)
  {
LABEL_373:
    if ((SHIBYTE(v284) & 0x80000000) == 0) {
      goto LABEL_374;
    }
LABEL_408:
    operator delete((void *)v283);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_375;
    }
    goto LABEL_409;
  }
LABEL_407:
  operator delete(v285[0]);
  if (SHIBYTE(v284) < 0) {
    goto LABEL_408;
  }
LABEL_374:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_375;
  }
LABEL_409:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_375:
  qword_2596610 = (uint64_t)operator new(0x19uLL);
  unk_2596618 = v280;
  strcpy((char *)qword_2596610, "From_User_Location_List");
  byte_259663F = 20;
  strcpy(byte_2596628, "Origin_Waypoint_List");
  qword_2596640 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2596648 = v276;
  strcpy((char *)qword_2596640, "Intermediate_Waypoint_List");
  *(void *)&algn_2596648[16] = operator new(0x20uLL);
  xmmword_2596660 = v278;
  strcpy(*(char **)&algn_2596648[16], "Destination_Waypoint_List");
  byte_2596687 = 15;
  strcpy((char *)&qword_2596670, "{toDestination}");
  byte_259669F = 13;
  strcpy((char *)&xmmword_2596688, "{Destination}");
  byte_25966B7 = 7;
  strcpy((char *)&dword_25966A0, "To_Home");
  byte_25966CF = 14;
  strcpy((char *)&qword_25966B8, "To_ContactHome");
  byte_25966E7 = 7;
  strcpy((char *)&dword_25966D0, "To_Work");
  byte_25966FF = 14;
  strcpy((char *)&qword_25966E8, "To_ContactWork");
  strcpy(&byte_2596717, "\nTo_Business");
  strcpy((char *)&qword_2596700, "To_Address");
  byte_259672F = 11;
  byte_2596747 = 16;
  strcpy((char *)&xmmword_2596730, "To_Other_Contact");
  strcpy(&byte_259675F, "\tTo_ContactSchool");
  strcpy((char *)&qword_2596748, "To_School");
  byte_2596777 = 16;
  byte_259678F = 17;
  strcpy((char *)&xmmword_2596778, "To_PersonLocation");
  qword_2596790 = (uint64_t)operator new(0x20uLL);
  unk_2596798 = v277;
  strcpy((char *)qword_2596790, "To_ContactCustomLabelAddress");
  byte_25967BF = 7;
  strcpy((char *)&dword_25967A8, "At_Home");
  byte_25967D7 = 14;
  strcpy((char *)&qword_25967C0, "At_ContactHome");
  byte_25967EF = 7;
  strcpy((char *)&dword_25967D8, "At_Work");
  byte_2596807 = 14;
  strcpy((char *)&qword_25967F0, "At_ContactWork");
  strcpy(&byte_259681F, "\nAt_Business");
  strcpy((char *)&qword_2596808, "At_Address");
  byte_2596837 = 11;
  byte_259684F = 16;
  strcpy(byte_2596838, "At_Other_Contact");
  byte_2596867 = 4;
  strcpy((char *)&dword_2596850, "Home");
  byte_259687F = 11;
  strcpy((char *)&qword_2596868 + 7, "Home");
  qword_2596868 = *(void *)&v264[16];
  byte_2596897 = 4;
  strcpy((char *)&dword_2596880, "Work");
  byte_25968AF = 11;
  strcpy((char *)&qword_2596898 + 7, "Work");
  qword_2596898 = *(void *)v264;
  byte_25968C7 = 7;
  strcpy((char *)&dword_25968B0, "Address");
  byte_25968DF = 8;
  strcpy((char *)&qword_25968C8, "Business");
  byte_25968F7 = 13;
  qword_25968E0 = *(void *)&v264[48];
  *(uint64_t *)((char *)&qword_25968E0 + 5) = *(void *)&v264[32];
  byte_25968ED = 0;
  byte_259690F = 6;
  strcpy((char *)&dword_25968F8, "School");
  byte_2596927 = 13;
  strcpy((char *)&qword_2596910, "ContactSchool");
  byte_259693F = 14;
  strcpy((char *)&qword_2596928, "PersonLocation");
  qword_2596940 = (uint64_t)operator new(0x20uLL);
  unk_2596948 = v278;
  strcpy((char *)qword_2596940, "ContactCustomLabelAddress");
  if (byte_259669F < 0)
  {
    sub_4200(&xmmword_2596958, (void *)xmmword_2596688, *((unint64_t *)&xmmword_2596688 + 1));
  }
  else
  {
    xmmword_2596958 = xmmword_2596688;
    qword_2596968 = unk_2596698;
  }
  byte_2596987 = 16;
  strcpy((char *)&xmmword_2596970, "{PrevExitNumber}");
  byte_259699F = 10;
  strcpy((char *)&qword_2596988, "{PrevRoad}");
  qword_25969A0 = (uint64_t)operator new(0x20uLL);
  unk_25969A8 = v279;
  strcpy((char *)qword_25969A0, "{RouteTotalExpectedTime}");
  byte_25969CF = 18;
  strcpy(byte_25969B8, "{ChargePercentage}");
  qword_25969D0 = (uint64_t)operator new(0x20uLL);
  unk_25969D8 = v273;
  strcpy((char *)qword_25969D0, "{RemainingChargePercentage}");
  byte_25969FF = 16;
  strcpy(byte_25969E8, "{ChargeDuration}");
  byte_2596A17 = 15;
  strcpy((char *)&qword_2596A00, "{ConnectorType}");
  byte_2596A2F = 19;
  strcpy(byte_2596A18, "{ChargeStationName}");
  byte_2596A47 = 7;
  strcpy((char *)&dword_2596A30, "{Power}");
  byte_2596A5F = 13;
  strcpy((char *)&qword_2596A48, "{VehicleName}");
  byte_2596A77 = 18;
  strcpy((char *)&xmmword_2596A60, "{AreaIncidentName}");
  byte_2596A8F = 14;
  strcpy((char *)&qword_2596A78, "{AreaIncident}");
  byte_2596AA7 = 16;
  strcpy((char *)&xmmword_2596A90, "{AffectedRegion}");
  byte_2596ABF = 21;
  strcpy(byte_2596AA8, "{AreaIncidentWeblink}");
  byte_2596AD7 = 20;
  strcpy((char *)&xmmword_2596AC0, "{AreaIncidentAgency}");
  byte_2596AEF = 11;
  strcpy((char *)&qword_2596AD8, "{IssueTime}");
  byte_2596B07 = 12;
  strcpy((char *)&qword_2596AF0, "{UpdateTime}");
  byte_2596B1F = 11;
  strcpy((char *)&qword_2596B08, "{IssueDate}");
  byte_2596B37 = 12;
  strcpy((char *)&qword_2596B20, "{UpdateDate}");
  qword_2596B38 = (uint64_t)operator new(0x20uLL);
  unk_2596B40 = v279;
  strcpy((char *)qword_2596B38, "{AreaIncidentDataSource}");
  byte_2596B67 = 13;
  strcpy((char *)&qword_2596B50, "{AreaHectare}");
  byte_2596B7F = 10;
  strcpy((char *)&qword_2596B68, "{AreaAcre}");
  qword_2596B80 = (uint64_t)operator new(0x20uLL);
  unk_2596B88 = v275;
  strcpy((char *)qword_2596B80, "{WildfirePercentageContained}");
  qword_2596B98 = (uint64_t)operator new(0x28uLL);
  unk_2596BA0 = v268[2];
  strcpy((char *)qword_2596B98, "{WildfireExpectedContainmentDate}");
  qword_2596BB0 = (uint64_t)operator new(0x20uLL);
  unk_2596BB8 = v277;
  strcpy((char *)qword_2596BB0, "{ServerRecommendedRouteName}");
  qword_2596BC8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2596BD0 = v277;
  strcpy((char *)qword_2596BC8, "{ServerNonRecommendedRoute1}");
  qword_2596BE0 = (uint64_t)operator new(0x20uLL);
  unk_2596BE8 = v277;
  strcpy((char *)qword_2596BE0, "{ServerNonRecommendedRoute2}");
  byte_2596C0F = 12;
  strcpy((char *)&qword_2596BF8, "{ClientDest}");
  byte_2596C27 = 6;
  strcpy((char *)&dword_2596C10, "{Name}");
  qword_2596C28 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2596C30 = v268[1];
  strcpy((char *)qword_2596C28, "ProactiveAlert_FasterRouteTitle");
  qword_2596C40 = (uint64_t)operator new(0x20uLL);
  unk_2596C48 = v276;
  strcpy((char *)qword_2596C40, "ProactiveAlert_RoadClosure");
  qword_2596C58 = (uint64_t)operator new(0x30uLL);
  unk_2596C60 = v271;
  strcpy((char *)qword_2596C58, "ProactiveAlert_UnusuallyHeavyTrafficOnTwo");
  qword_2596C70 = (uint64_t)operator new(0x28uLL);
  unk_2596C78 = v274;
  strcpy((char *)qword_2596C70, "ProactiveAlert_FasterRouteTitle_to_Home");
  qword_2596C88 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2596C90 = v274;
  strcpy((char *)qword_2596C88, "ProactiveAlert_FasterRouteTitle_to_Work");
  qword_2596CA0 = (uint64_t)operator new(0x28uLL);
  unk_2596CA8 = v274;
  strcpy((char *)qword_2596CA0, "ProactiveAlert_FasterRouteTitle_to_Name");
  qword_2596CB8 = (uint64_t)operator new(0x30uLL);
  unk_2596CC0 = xmmword_20B93B0;
  strcpy((char *)qword_2596CB8, "ProactiveAlert_FasterRouteTitle_to_StreetName");
  byte_2596CE7 = 17;
  strcpy(byte_2596CD0, "Proactive_Driving");
  strcpy(&byte_2596CFF, "\n{RouteName}");
  strcpy((char *)&qword_2596CE8, "_RouteName");
  byte_2596D17 = 11;
  qword_2596D18 = (uint64_t)operator new(0x28uLL);
  unk_2596D20 = v268[2];
  strcpy((char *)qword_2596D18, "Pass_Traffic_Light_Spoken_Primary");
  qword_2596D30 = (uint64_t)operator new(0x20uLL);
  unk_2596D38 = v275;
  strcpy((char *)qword_2596D30, "Pass_Stop_Sign_Spoken_Primary");
  qword_2596D48 = (char *)operator new(0x20uLL);
  xmmword_2596D50 = v268[0];
  strcpy(qword_2596D48, "Pass_Roundabout_Spoken_Primary");
  strcpy(&byte_2596D77, "\nBannerBody");
  strcpy((char *)&qword_2596D60, "BannerHead");
  strcpy(&byte_2596D8F, "\nBannerDescription");
  byte_2596DA7 = 17;
  strcpy(&byte_2596DBF, "\n_Incident");
  strcpy((char *)&qword_2596DA8, "VoiceAlert");
  strcpy(&byte_2596DD7, "\t_Area_Incident");
  byte_2596DEF = 14;
  byte_2596E07 = 15;
  strcpy((char *)&qword_2596DF0, "_Area_Incidents");
  strcpy(&byte_2596E1F, "\t_Crash");
  strcpy((char *)&qword_2596E08, "_Accident");
  byte_2596E37 = 6;
  byte_2596E4F = 16;
  strcpy(byte_2596E38, "_Congestion_Zone");
  strcpy(&byte_2596E67, "\n_Environmental_Zone");
  strcpy((char *)&qword_2596E50, "_Toll_Zone");
  byte_2596E7F = 19;
  BYTE1(qword_2596E90) = 116;
  WORD1(qword_2596E90) = 0;
  HIDWORD(qword_2596E90) = 301989888;
  strcpy(byte_2596E98, "_Construction");
  strcpy((char *)&qword_2596E80, "_Incident_Accide");
  byte_2596EAF = 13;
  byte_2596EC7 = 7;
  strcpy((char *)&dword_2596EB0, "_Hazard");
  byte_2596EDF = 12;
  strcpy((char *)&qword_2596EC8, "_LaneClosure");
  byte_2596EF7 = 12;
  strcpy((char *)&qword_2596EE0, "_LaneTrailer");
  qmemcpy(&byte_2596F0F, "\t_LaneTrailer", 13);
  strcpy((char *)&qword_2596EF8, "_Shoulder");
  qword_2596F20 = 0x1500007200000000;
  *(void *)algn_2596F1C = *(void *)"_Shoulder";
  strcpy((char *)&xmmword_2596F28, "_Causing_Traffic_Delay");
  HIBYTE(word_2596F3E) = 22;
  byte_2596F57 = 6;
  strcpy((char *)&dword_2596F40, "_Timed");
  byte_2596F6F = 12;
  strcpy((char *)&qword_2596F58, "_HasDistance");
  byte_2596F87 = 8;
  strcpy((char *)&qword_2596F70, "_Closure");
  strcpy(&byte_2596F9F, "\n_BadRoad");
  strcpy((char *)&qword_2596F88, "_NoReroute");
  byte_2596FB7 = 8;
  byte_2596FCF = 12;
  strcpy((char *)&qword_2596FB8, "_TollTrailer");
  byte_2596FE7 = 12;
  strcpy((char *)&qword_2596FD0, "_BestTrailer");
  byte_2596FFF = 8;
  strcpy((char *)&qword_2596FE8, "_Trailer");
  byte_2597017 = 18;
  strcpy((char *)&xmmword_2597000, "_Secondary_Trailer");
  byte_259702F = 8;
  strcpy((char *)&qword_2597018, "_Savings");
  byte_2597047 = 8;
  strcpy((char *)&qword_2597030, "_AltRoad");
  byte_259705F = 6;
  strcpy((char *)&dword_2597048, "_Named");
  byte_2597077 = 6;
  strcpy((char *)&dword_2597060, "_NAMED");
  byte_259708F = 22;
  strcpy((char *)&xmmword_2597078, "_Named_Suggested_Route");
  qword_25970A0 = 0x1000000000000000;
  xmmword_2597090 = xmmword_20E81D0;
  byte_25970BF = 11;
  strcpy((char *)&qword_25970A8, "_Speed_Trap");
  byte_25970D7 = 4;
  strcpy((char *)&dword_25970C0, "_UGI");
  byte_25970EF = 12;
  strcpy((char *)&qword_25970D8, "_Safer_Route");
  qword_25970F0 = (uint64_t)operator new(0x20uLL);
  unk_25970F8 = v268[1];
  strcpy((char *)qword_25970F0, "BlockedRouteByBlockingIncident_");
  qword_2597108 = (uint64_t)operator new(0x28uLL);
  long long v270 = xmmword_20B9280;
  *(_OWORD *)algn_2597110 = xmmword_20B9280;
  strcpy((char *)qword_2597108, "BlockedRouteByManeuverRestriction_");
  qword_2597120 = (uint64_t)operator new(0x20uLL);
  unk_2597128 = v268[0];
  strcpy((char *)qword_2597120, "BlockedRouteByTimeRestriction_");
  qword_2597138 = (uint64_t)operator new(0x28uLL);
  unk_2597140 = xmmword_20B8FD0;
  strcpy((char *)qword_2597138, "SuggestRouteToAvoidBlockingIncident_");
  qword_2597150 = (uint64_t)operator new(0x30uLL);
  unk_2597158 = xmmword_20B9380;
  strcpy((char *)qword_2597150, "SuggestRouteToAvoidBlockingManeuverRestriction_");
  qword_2597168 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_2597170 = xmmword_20B93E0;
  strcpy((char *)qword_2597168, "SuggestRouteToAvoidBlockingTimeRestriction_");
  byte_2597197 = 1;
  word_2597180 = 95;
  strcpy((char *)&xmmword_2597198, "IncidentsCausingDelay_");
  HIBYTE(word_25971AE) = 22;
  qword_25971B0 = (uint64_t)operator new(0x19uLL);
  unk_25971B8 = v280;
  strcpy((char *)qword_25971B0, "NonVotableRoadIncident_");
  byte_25971DF = 20;
  strcpy(byte_25971C8, "VotableRoadIncident_");
  byte_25971F7 = 13;
  strcpy((char *)&qword_25971E0, "AreaIncident_");
  byte_259720F = 15;
  strcpy((char *)&qword_25971F8, "CongestionZone_");
  qword_2597210 = (uint64_t)operator new(0x20uLL);
  unk_2597218 = v279;
  strcpy((char *)qword_2597210, "EVModifiedChargingStops_");
  byte_259723F = 13;
  strcpy((char *)&qword_2597228, "EVDisconnect_");
  byte_2597257 = 12;
  strcpy((char *)&qword_2597240, "EVReconnect_");
  qword_2597258 = (uint64_t)operator new(0x20uLL);
  unk_2597260 = v277;
  strcpy((char *)qword_2597258, "EVOfflineToOnlineTransition_");
  byte_2597287 = 13;
  strcpy((char *)&qword_2597270, "EVOfflineSAR_");
  byte_259729F = 21;
  strcpy((char *)&xmmword_2597288, "EVTowingNotSupported_");
  byte_25972B7 = 18;
  strcpy(byte_25972A0, "EVInfeasibleRoute_");
  qword_25972B8 = (uint64_t)operator new(0x38uLL);
  unk_25972C0 = xmmword_20B8DF0;
  strcpy((char *)qword_25972B8, "SuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25972D0 = (uint64_t)operator new(0x40uLL);
  unk_25972D8 = xmmword_20B98C0;
  strcpy((char *)qword_25972D0, "LCSuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25972E8 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25972F0 = v272;
  strcpy((char *)qword_25972E8, "SuggestRouteAddingStopsForEVInfeasibleRoute_");
  qmemcpy(v268, "InfeasibleRoute_ngStopsForEVInfeSuggestRouteAddi", sizeof(v268));
  qword_2597300 = (uint64_t)operator new(0x30uLL);
  *(_WORD *)&v264[50] = 0;
  *(_DWORD *)&v264[52] = 0;
  *(void *)&v264[56] = 0x8000000000000030;
  unk_2597308 = xmmword_20B9A80;
  strcpy((char *)qword_2597300, "LCSuggestRouteAddingStopsForEVInfeasibleRoute_");
  strcpy(v264, "InfeasibleRoute_dingStopsForEVInLCSuggestRouteAd.");
  qword_2597318 = (uint64_t)operator new(0x30uLL);
  unk_2597320 = v271;
  strcpy((char *)qword_2597318, "SuggestRouteAddingStopsToIncreaseDestSoc_");
  v186 = operator new(0x30uLL);
  qword_2597330 = (uint64_t)v186;
  unk_2597338 = v272;
  _OWORD *v186 = v268[2];
  v186[1] = v268[1];
  *(_OWORD *)((char *)v186 + 28) = v268[0];
  *((unsigned char *)v186 + 44) = 0;
  qword_2597348 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2597350 = v270;
  strcpy((char *)qword_2597348, "SuggestDetourWithHigherArrivalSOC_");
  uint64_t v187 = operator new(0x30uLL);
  qword_2597360 = (uint64_t)v187;
  unk_2597368 = *(_OWORD *)&v264[48];
  _OWORD *v187 = *(_OWORD *)&v264[32];
  v187[1] = *(_OWORD *)&v264[16];
  *(_OWORD *)((char *)v187 + 30) = *(_OWORD *)v264;
  *((unsigned char *)v187 + 46) = 0;
  qword_2597378 = (uint64_t)operator new(0x28uLL);
  unk_2597380 = v274;
  strcpy((char *)qword_2597378, "SuggestRouteToDestForEVInfeasibleRoute_");
  qword_2597390 = (uint64_t)operator new(0x28uLL);
  unk_2597398 = v267;
  strcpy((char *)qword_2597390, "SuggestRouteRemovingStopsFromEVRoute_");
  qword_25973A8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25973B0 = v279;
  strcpy((char *)qword_25973A8, "OfflineToOnlineNewRoute_");
  qword_25973C0 = (uint64_t)operator new(0x40uLL);
  unk_25973C8 = xmmword_20B98C0;
  strcpy((char *)qword_25973C0, "SuggestDetourWithHigherArrivalSOCForInfeasibleUserRoute_");
  byte_25973EF = 20;
  strcpy(byte_25973D8, "LPR_OFFLINE_REROUTE_");
  byte_2597407 = 16;
  strcpy((char *)&xmmword_25973F0, "LPR_OFFLINE_SAR_");
  byte_259741F = 20;
  strcpy(byte_2597408, "LPR_OFFLINE_REROUTE_");
  byte_2597437 = 16;
  strcpy((char *)&xmmword_2597420, "LPR_OFFLINE_SAR_");
  byte_259744F = 19;
  strcpy(byte_2597438, "SuggestFasterRoute_");
  qword_2597450 = (char *)operator new(0x20uLL);
  xmmword_2597458 = v278;
  strcpy(qword_2597450, "AreaIncidentSaferReroute_");
  byte_259747F = 12;
  strcpy((char *)&qword_2597468, "_Remove_Stop");
  byte_2597497 = 13;
  strcpy((char *)&qword_2597480, "_Remove_Stops");
  strcpy(&byte_25974AF, "\t_Add_Stops");
  strcpy((char *)&qword_2597498, "_Add_Stop");
  strcpy(&byte_25974C7, "\n_Change_Route");
  byte_25974DF = 13;
  byte_25974F7 = 15;
  strcpy((char *)&qword_25974E0, "_Different_Stop");
  byte_259750F = 16;
  strcpy((char *)&xmmword_25974F8, "_Different_Stops");
  byte_2597527 = 15;
  strcpy((char *)&qword_2597510, "_EV_Remove_Stop");
  byte_259753F = 16;
  strcpy((char *)&xmmword_2597528, "_EV_Remove_Stops");
  byte_2597557 = 12;
  strcpy((char *)&qword_2597540, "_EV_Add_Stop");
  byte_259756F = 13;
  strcpy((char *)&qword_2597558, "_EV_Add_Stops");
  byte_2597587 = 15;
  strcpy((char *)&qword_2597570, "_EV_Low_Battery");
  byte_259759F = 14;
  strcpy((char *)&qword_2597588, "_EV_Infeasible");
  byte_25975B7 = 15;
  strcpy((char *)&qword_25975A0, "_EV_Last_Chance");
  qword_25975B8 = (uint64_t)operator new(0x20uLL);
  xmmword_25975C0 = v279;
  strcpy((char *)qword_25975B8, "_EV_Low_Battery_Add_Stop");
  uint64_t v188 = qword_25974B8;
  qword_25975D0 = (uint64_t)operator new(0x20uLL);
  unk_25975D8 = v278;
  strcpy((char *)qword_25975D0, "_EV_Low_Battery_Add_Stops");
  qword_25975E8 = (uint64_t)operator new(0x19uLL);
  xmmword_25975F0 = v280;
  strcpy((char *)qword_25975E8, "_EV_Infeasible_Add_Stop");
  int v189 = byte_25974C7;
  if (byte_25974C7 >= 0) {
    size_t v190 = byte_25974C7;
  }
  else {
    size_t v190 = v188;
  }
  unint64_t v191 = v190 + 14;
  if (v190 + 14 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v191 >= 0x17)
  {
    uint64_t v194 = (v191 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v191 | 7) != 0x17) {
      uint64_t v194 = v191 | 7;
    }
    uint64_t v195 = v194 + 1;
    uint64_t v196 = (char *)operator new(v194 + 1);
    qword_2597608 = v190 + 14;
    unk_2597610 = v195 | 0x8000000000000000;
    qword_2597600 = (uint64_t)v196;
    qmemcpy(v196, "_EV_Infeasible", 14);
    char v192 = v196 + 14;
  }
  else
  {
    BYTE1(qword_2597608) = 0;
    WORD1(qword_2597608) = 0;
    HIDWORD(qword_2597608) = 0;
    unk_2597610 = 0;
    byte_2597617 = v190 + 14;
    strcpy((char *)&qword_2597600, "_EV_Infe");
    char v192 = (char *)&qword_2597608 + 6;
    if (!v190)
    {
      char v193 = 1;
      goto LABEL_425;
    }
  }
  if (v189 >= 0) {
    uint64_t v197 = (uint64_t)&qword_25974B0;
  }
  else {
    uint64_t v197 = 0x6F74535F6464415FLL;
  }
  memmove(v192, (const void *)v197, v190);
  char v193 = 0;
LABEL_425:
  v192[v190] = 0;
  unint64_t v198 = (char *)operator new(0x20uLL);
  qword_2597618 = (uint64_t)v198;
  xmmword_2597620 = v279;
  *(void *)unint64_t v198 = qword_25975A0;
  *(void *)(v198 + 7) = *(uint64_t *)((char *)&qword_25975A0 + 7);
  *(void *)(v198 + 15) = qword_2597498;
  v198[23] = word_25974A0;
  v198[24] = 0;
  unint64_t v199 = v190 + 15;
  if (v190 + 15 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v199 > 0x16)
  {
    uint64_t v201 = (v199 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v199 | 7) != 0x17) {
      uint64_t v201 = v199 | 7;
    }
    uint64_t v202 = v201 + 1;
    uint64_t v200 = (uint64_t *)operator new(v201 + 1);
    qword_2597638 = v190 + 15;
    unk_2597640 = v202 | 0x8000000000000000;
    qword_2597630 = (uint64_t)v200;
  }
  else
  {
    uint64_t v200 = &qword_2597630;
    qword_2597638 = 0;
    unk_2597640 = 0;
    qword_2597630 = 0;
    byte_2597647 = v190 + 15;
  }
  uint64_t *v200 = qword_25975A0;
  *(uint64_t *)((char *)v200 + 7) = *(uint64_t *)((char *)&qword_25975A0 + 7);
  v203 = (char *)v200 + 15;
  if ((v193 & 1) == 0)
  {
    if (v189 >= 0) {
      uint64_t v204 = &qword_25974B0;
    }
    else {
      uint64_t v204 = (uint64_t *)qword_25974B0;
    }
    memmove((char *)v200 + 15, v204, v190);
  }
  v203[v190] = 0;
  byte_259765F = 17;
  strcpy((char *)&xmmword_2597648, "_EV_Forced_Detour");
  qword_2597660 = (uint64_t)operator new(0x20uLL);
  unk_2597668 = v278;
  strcpy((char *)qword_2597660, "_EV_Higher_Arrival_Charge");
  qword_2597678 = (uint64_t)operator new(0x28uLL);
  unk_2597680 = xmmword_20B8FD0;
  strcpy((char *)qword_2597678, "_EV_Infeasible_Higher_Arrival_Charge");
  byte_25976A7 = 16;
  strcpy(byte_2597690, "_EV_Out_Of_Range");
  qword_25976A8 = (uint64_t)operator new(0x20uLL);
  unk_25976B0 = v273;
  strcpy((char *)qword_25976A8, "_EV_Last_Chance_Take_Detour");
  strcpy(byte_25976C0, "_EV_Forced_Modify_Stop");
  HIBYTE(word_25976D6) = 22;
  qword_25976D8 = (uint64_t)operator new(0x19uLL);
  unk_25976E0 = v280;
  strcpy((char *)qword_25976D8, "_EV_Forced_Modify_Stops");
  byte_2597707 = 19;
  strcpy(byte_25976F0, "_EV_Forced_Add_Stop");
  byte_259771F = 20;
  strcpy((char *)&xmmword_2597708, "_EV_Forced_Add_Stops");
  byte_2597737 = 21;
  strcpy(byte_2597720, "_EV_Battery_Info_Lost");
  qword_2597738 = (uint64_t)operator new(0x20uLL);
  unk_2597740 = v278;
  strcpy((char *)qword_2597738, "_EV_Battery_Info_Restored");
  qword_2597750 = (uint64_t)operator new(0x20uLL);
  unk_2597758 = v279;
  strcpy((char *)qword_2597750, "_EV_Towing_Not_Supported");
  qword_2597768 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2597770 = v269;
  strcpy((char *)qword_2597768, "_EV_Offline_to_Online_Transition");
  byte_2597797 = 15;
  strcpy((char *)&qword_2597780, "_EV_Offline_SAR");
  qword_2597798 = (uint64_t)operator new(0x20uLL);
  xmmword_25977A0 = v277;
  strcpy((char *)qword_2597798, "_Offline_to_Online_New_Route");
  byte_25977C7 = 12;
  strcpy((char *)&qword_25977B0, "BannerButton");
  byte_25977DF = 8;
  strcpy((char *)&qword_25977C8, "_Dismiss");
  byte_25977F7 = 3;
  word_25977E0 = 20319;
  byte_25977E2 = 75;
  byte_25977E3 = 0;
  byte_259780F = 11;
  strcpy((char *)&qword_25977F8, "_Still_Here");
  byte_2597827 = 8;
  strcpy((char *)&qword_2597810, "_Cleared");
  qmemcpy(&byte_259783F, "\nBannerButton", 13);
  strcpy((char *)&qword_2597828, "_No_Thanks");
  uint64_t v205 = qword_25977B8;
  qword_2597850 = 0x1400000000000000;
  *(void *)algn_259784C = 0x7373696D7369445FLL;
  qword_2597868 = 0xF00000000000000;
  qword_2597860 = 0x4B4F5F6E6F7474;
  int v206 = byte_2597557;
  if (byte_2597557 >= 0) {
    size_t v207 = byte_2597557;
  }
  else {
    size_t v207 = qword_2597548;
  }
  unint64_t v208 = v207 + 12;
  qword_2597858 = *(void *)"BannerButton";
  if (v207 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v208 >= 0x17)
  {
    uint64_t v210 = (v208 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v208 | 7) != 0x17) {
      uint64_t v210 = v208 | 7;
    }
    uint64_t v211 = v210 + 1;
    v212 = (char *)operator new(v210 + 1);
    qword_2597878 = v207 + 12;
    unk_2597880 = v211 | 0x8000000000000000;
    qword_2597870 = (uint64_t)v212;
    *((_DWORD *)v212 + 2) = 1852798068;
    *(void *)v212 = *(void *)"BannerButton";
    uint64_t v209 = v212 + 12;
  }
  else
  {
    BYTE5(qword_2597878) = 0;
    HIWORD(qword_2597878) = 0;
    unk_2597880 = 0;
    byte_2597887 = v207 + 12;
    strcpy((char *)&qword_2597870, "BannerButton");
    uint64_t v209 = (char *)&qword_2597878 + 4;
    if (!v207) {
      goto LABEL_450;
    }
  }
  if (v206 >= 0) {
    int v213 = &qword_2597540;
  }
  else {
    int v213 = (uint64_t *)qword_2597540;
  }
  memmove(v209, v213, v207);
LABEL_450:
  v209[v207] = 0;
  int v214 = byte_259756F;
  if (byte_259756F >= 0) {
    size_t v215 = byte_259756F;
  }
  else {
    size_t v215 = unk_2597560;
  }
  unint64_t v216 = v215 + 12;
  if (v215 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v216 >= 0x17)
  {
    uint64_t v218 = (v216 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v216 | 7) != 0x17) {
      uint64_t v218 = v216 | 7;
    }
    uint64_t v219 = v218 + 1;
    v220 = (char *)operator new(v218 + 1);
    qword_2597890 = v215 + 12;
    unk_2597898 = v219 | 0x8000000000000000;
    qword_2597888 = (uint64_t)v220;
    *(void *)v220 = qword_25977B0;
    *((_DWORD *)v220 + 2) = qword_25977B8;
    uint64_t v217 = v220 + 12;
  }
  else
  {
    qword_2597890 = 0;
    unk_2597898 = 0;
    byte_259789F = v215 + 12;
    LODWORD(qword_2597890) = qword_25977B8;
    qword_2597888 = qword_25977B0;
    uint64_t v217 = (char *)&qword_2597890 + 4;
    if (!v215) {
      goto LABEL_464;
    }
  }
  if (v214 >= 0) {
    int v221 = &qword_2597558;
  }
  else {
    int v221 = (uint64_t *)qword_2597558;
  }
  memmove(v217, v221, v215);
LABEL_464:
  v217[v215] = 0;
  int v222 = byte_2597527;
  if (byte_2597527 >= 0) {
    size_t v223 = byte_2597527;
  }
  else {
    size_t v223 = unk_2597518;
  }
  unint64_t v224 = v223 + 12;
  if (v223 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v224 >= 0x17)
  {
    uint64_t v226 = (v224 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v224 | 7) != 0x17) {
      uint64_t v226 = v224 | 7;
    }
    uint64_t v227 = v226 + 1;
    v228 = (char *)operator new(v226 + 1);
    qword_25978A8 = v223 + 12;
    unk_25978B0 = v227 | 0x8000000000000000;
    qword_25978A0 = (uint64_t)v228;
    *(void *)v228 = qword_25977B0;
    *((_DWORD *)v228 + 2) = qword_25977B8;
    uint64_t v225 = v228 + 12;
  }
  else
  {
    qword_25978A8 = 0;
    unk_25978B0 = 0;
    byte_25978B7 = v223 + 12;
    LODWORD(qword_25978A8) = qword_25977B8;
    qword_25978A0 = qword_25977B0;
    uint64_t v225 = (char *)&qword_25978A8 + 4;
    if (!v223) {
      goto LABEL_478;
    }
  }
  if (v222 >= 0) {
    int v229 = &qword_2597510;
  }
  else {
    int v229 = (uint64_t *)qword_2597510;
  }
  memmove(v225, v229, v223);
LABEL_478:
  v225[v223] = 0;
  int v230 = byte_25977C7;
  if (byte_25977C7 >= 0) {
    size_t v231 = byte_25977C7;
  }
  else {
    size_t v231 = v205;
  }
  int v232 = byte_259753F;
  if (byte_259753F >= 0) {
    size_t v233 = byte_259753F;
  }
  else {
    size_t v233 = *((void *)&xmmword_2597528 + 1);
  }
  unint64_t v234 = v233 + v231;
  if (v233 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v234 <= 0x16)
  {
    v235 = &qword_25978B8;
    qword_25978C0 = 0;
    unk_25978C8 = 0;
    qword_25978B8 = 0;
    byte_25978CF = v233 + v231;
    if (!v231) {
      goto LABEL_491;
    }
    goto LABEL_487;
  }
  uint64_t v242 = (v234 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v234 | 7) != 0x17) {
    uint64_t v242 = v234 | 7;
  }
  uint64_t v243 = v242 + 1;
  v235 = (uint64_t *)operator new(v242 + 1);
  qword_25978C0 = v233 + v231;
  unk_25978C8 = v243 | 0x8000000000000000;
  qword_25978B8 = (uint64_t)v235;
  if (v231)
  {
LABEL_487:
    if (v230 >= 0) {
      v236 = &qword_25977B0;
    }
    else {
      v236 = (uint64_t *)qword_25977B0;
    }
    memmove(v235, v236, v231);
  }
LABEL_491:
  v237 = (char *)v235 + v231;
  if (v233)
  {
    if (v232 >= 0) {
      unint64_t v238 = &xmmword_2597528;
    }
    else {
      unint64_t v238 = (long long *)xmmword_2597528;
    }
    memmove(v237, v238, v233);
  }
  v237[v233] = 0;
  unint64_t v239 = v231 + 11;
  if (v231 + 11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v239 >= 0x17)
  {
    uint64_t v244 = (v239 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v239 | 7) != 0x17) {
      uint64_t v244 = v239 | 7;
    }
    uint64_t v245 = v244 + 1;
    unint64_t v240 = (uint64_t *)operator new(v244 + 1);
    qword_25978D8 = v231 + 11;
    unk_25978E0 = v245 | 0x8000000000000000;
    qword_25978D0 = (uint64_t)v240;
  }
  else
  {
    unint64_t v240 = &qword_25978D0;
    qword_25978D8 = 0;
    unk_25978E0 = 0;
    qword_25978D0 = 0;
    byte_25978E7 = v231 + 11;
    if (!v231)
    {
      *(_DWORD *)((char *)&qword_25978D0 + 7) = *(_DWORD *)((char *)&qword_25977F8 + 7);
      qword_25978D0 = qword_25977F8;
      BYTE3(qword_25978D8) = 0;
      LOBYTE(v241) = 8;
      goto LABEL_512;
    }
  }
  if (v230 >= 0) {
    v246 = &qword_25977B0;
  }
  else {
    v246 = (uint64_t *)qword_25977B0;
  }
  memmove(v240, v246, v231);
  int v247 = (char *)v240 + v231;
  int v248 = *(_DWORD *)((char *)&qword_25977F8 + 7);
  *(void *)int v247 = qword_25977F8;
  *(_DWORD *)(v247 + 7) = v248;
  v247[11] = 0;
  unint64_t v241 = v231 + 8;
  if (v231 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v241 <= 0x16)
  {
LABEL_512:
    v249 = &qword_25978E8;
    qword_25978F0 = 0;
    unk_25978F8 = 0;
    qword_25978E8 = 0;
    byte_25978FF = v241;
    if (!v231) {
      goto LABEL_517;
    }
    goto LABEL_513;
  }
  uint64_t v262 = (v241 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v241 | 7) != 0x17) {
    uint64_t v262 = v241 | 7;
  }
  uint64_t v263 = v262 + 1;
  v249 = (uint64_t *)operator new(v262 + 1);
  qword_25978F0 = v231 + 8;
  unk_25978F8 = v263 | 0x8000000000000000;
  qword_25978E8 = (uint64_t)v249;
  if (v231)
  {
LABEL_513:
    if (v230 >= 0) {
      v250 = &qword_25977B0;
    }
    else {
      v250 = (uint64_t *)qword_25977B0;
    }
    memmove(v249, v250, v231);
  }
LABEL_517:
  int v251 = (char *)v249 + v231;
  *(void *)int v251 = qword_2597810;
  v251[8] = 0;
  int v252 = byte_259783F;
  if (byte_259783F >= 0) {
    size_t v253 = byte_259783F;
  }
  else {
    size_t v253 = qword_2597830;
  }
  unint64_t v254 = v253 + v231;
  if (v253 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v254 <= 0x16)
  {
    v255 = &qword_2597900;
    qword_2597908 = 0;
    unk_2597910 = 0;
    qword_2597900 = 0;
    byte_2597917 = v253 + v231;
    if (!v231) {
      goto LABEL_527;
    }
    goto LABEL_523;
  }
  uint64_t v260 = (v254 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v254 | 7) != 0x17) {
    uint64_t v260 = v254 | 7;
  }
  uint64_t v261 = v260 + 1;
  v255 = (uint64_t *)operator new(v260 + 1);
  qword_2597908 = v253 + v231;
  unk_2597910 = v261 | 0x8000000000000000;
  qword_2597900 = (uint64_t)v255;
  if (v231)
  {
LABEL_523:
    if (v230 >= 0) {
      v256 = &qword_25977B0;
    }
    else {
      v256 = (uint64_t *)qword_25977B0;
    }
    memmove(v255, v256, v231);
  }
LABEL_527:
  v257 = (char *)v255 + v231;
  if (v253)
  {
    if (v252 >= 0) {
      v258 = &qword_2597828;
    }
    else {
      v258 = (uint64_t *)qword_2597828;
    }
    memmove(v257, v258, v253);
  }
  v257[v253] = 0;
  strcpy(&byte_259792F, "\n{newroute}");
  strcpy((char *)&qword_2597918, "{roadname}");
  strcpy(&byte_2597947, "\n{count}");
  byte_259795F = 7;
  strcpy(&byte_2597977, "\n{dur}");
  strcpy((char *)&qword_2597960, "{duration}");
  byte_259798F = 5;
  qword_2597990 = (uint64_t)operator new(0x20uLL);
  unk_2597998 = v276;
  strcpy((char *)qword_2597990, "{PleaseProceedWithCaution}");
  byte_25979BF = 15;
  strcpy((char *)&qword_25979A8, "{UserRouteName}");
  byte_25979D7 = 20;
  strcpy((char *)&xmmword_25979C0, "{SuggestedRouteName}");
  byte_25979EF = 18;
  strcpy(byte_25979D8, "Speed_Camera_Ahead");
  qword_25979F0 = (uint64_t)operator new(0x20uLL);
  unk_25979F8 = v275;
  strcpy((char *)qword_25979F0, "Red_Light_Camera_Ahead_Spoken");
  qword_2597A08 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2597A10 = v275;
  strcpy((char *)qword_2597A08, "Stop_Sign_Camera_Ahead_Spoken");
  qword_2597A20 = (uint64_t)operator new(0x28uLL);
  unk_2597A28 = v270;
  strcpy((char *)qword_2597A20, "Speed_Camera_Ahead_Multiple_Spoken");
  qword_2597A38 = (uint64_t)operator new(0x28uLL);
  unk_2597A40 = v265;
  strcpy((char *)qword_2597A38, "Red_Light_Camera_Ahead_Multiple_Spoken");
  qword_2597A50 = (uint64_t)operator new(0x20uLL);
  unk_2597A58 = v277;
  strcpy((char *)qword_2597A50, "Camera_Ahead_Multiple_Spoken");
  qword_2597A68 = (uint64_t)operator new(0x30uLL);
  unk_2597A70 = v266;
  strcpy((char *)qword_2597A68, "Red_Light_Camera_Speed_Camera_Ahead_Spoken");
  qword_2597A80 = (char *)operator new(0x30uLL);
  strcpy(qword_2597A80, "Stop_Sign_Camera_Speed_Camera_Ahead_Spoken");
  byte_2597AAF = 16;
  xmmword_2597A88 = v266;
  strcpy(byte_2597A98, "_Speed_Limit_Mph");
  byte_2597AC7 = 16;
  strcpy(algn_2597AB0, "_Speed_Limit_Kph");
  byte_2597ADF = 11;
  strcpy((char *)&qword_2597AC8, "Watch_Speed");
  byte_2597AF7 = 4;
  strcpy((char *)&dword_2597AE0, "_One");
  byte_2597B0F = 4;
  strcpy((char *)&dword_2597AF8, "_Two");
  byte_2597B27 = 4;
  strcpy((char *)&dword_2597B10, "_Few");
  byte_2597B3F = 5;
  strcpy((char *)&dword_2597B28, "_Many");
  byte_2597B57 = 6;
  strcpy((char *)&dword_2597B40, "_Other");
  byte_2597B6F = 4;
  strcpy((char *)&dword_2597B58, "_ONE");
  byte_2597B87 = 7;
  strcpy((char *)&dword_2597B70, "{Speed}");
  byte_2597B9F = 8;
  strcpy((char *)&qword_2597B88, "Dismount");
  byte_2597BB7 = 4;
  strcpy((char *)&dword_2597BA0, "Walk");
  byte_2597BCF = 5;
  strcpy((char *)&dword_2597BB8, "Mount");
  byte_2597BE7 = 7;
  strcpy((char *)&dword_2597BD0, "Remount");
  strcpy(&byte_2597BFF, "\t_Crosswalk");
  strcpy((char *)&qword_2597BE8, "Walk_Road");
  strcpy(&byte_2597C17, "\n_PLURAL");
  byte_2597C2F = 7;
  strcpy(&byte_2597C47, "\n{description1}");
  strcpy((char *)&qword_2597C30, "_SECONDARY");
  byte_2597C5F = 14;
  byte_2597C77 = 14;
  strcpy((char *)&qword_2597C60, "{description2}");
  byte_2597C8F = 21;
  strcpy((char *)&xmmword_2597C78, "TWO_ROAD_DESCRIPTIONS");
  byte_2597CA7 = 17;
  strcpy((char *)&xmmword_2597C90, "{SlopePercentage}");
  byte_2597CBF = 15;
  strcpy((char *)&qword_2597CA8, "_Protected_Lane");
  strcpy(&byte_2597CD7, "\n_Paved_Path");
  strcpy((char *)&qword_2597CC0, "_Bike_Path");
  byte_2597CEF = 11;
  byte_2597D07 = 15;
  strcpy((char *)&qword_2597CF0, "_Dedicated_Lane");
  byte_2597D1F = 12;
  strcpy((char *)&qword_2597D08, "_Shared_Path");
  strcpy(&byte_2597D37, "\n_UnnamedRoad");
  strcpy((char *)&qword_2597D20, "_Bike_Lane");
  byte_2597D4F = 12;
  byte_2597D67 = 5;
  strcpy((char *)&dword_2597D50, "_Path");
  byte_2597D7F = 6;
  strcpy((char *)&dword_2597D68, "_Trail");
  strcpy(&byte_2597D97, "\t_Plaza");
  strcpy((char *)&qword_2597D80, "_Sidewalk");
  byte_2597DAF = 6;
  byte_2597DC7 = 15;
  strcpy((char *)&qword_2597DB0, "_Moving_Walkway");
  byte_2597DDF = 14;
  strcpy((char *)&qword_2597DC8, "Two_Stage_Turn");
  byte_2597DF7 = 16;
  strcpy((char *)&xmmword_2597DE0, "{OptionalPeriod}");
  byte_2597E0F = 18;
  strcpy((char *)&xmmword_2597DF8, "Advisory_Separator");
  byte_2597E27 = 6;
  strcpy((char *)&dword_2597E10, "Period");
  byte_2597E3F = 21;
  strcpy((char *)&xmmword_2597E28, "Advisory_Title_Notice");
  strcpy((char *)&xmmword_2597E40, "Advisory_Title_Notices");
  HIBYTE(word_2597E56) = 22;
  byte_2597E6F = 7;
  strcpy((char *)&dword_2597E58, "_DETAIL");
  byte_2597E87 = 17;
  strcpy((char *)&xmmword_2597E70, "_LONG_REGION_LIST");
  byte_2597E9F = 16;
  strcpy((char *)&xmmword_2597E88, "Advisory_Grouped");
  byte_2597EB7 = 11;
  strcpy((char *)&qword_2597EA0, "_Advisories");
  qword_2597EB8 = (uint64_t)operator new(0x20uLL);
  unk_2597EC0 = v273;
  strcpy((char *)qword_2597EB8, "Advisory_WILDFIRE_METADATA_");
  byte_2597EE7 = 8;
  strcpy((char *)&qword_2597ED0, "Advisory");
  byte_2597EFF = 13;
  strcpy((char *)&qword_2597EE8, "MPR_NUM_STOPS");
  byte_2597F17 = 17;
  strcpy(byte_2597F00, "EV_CHARGE_STATION");
  byte_2597F2F = 11;
  strcpy((char *)&qword_2597F18, "_NAMED_CITY");
  byte_2597F47 = 5;
  strcpy((char *)&dword_2597F30, "_Stop");
  strcpy(&byte_2597F5F, "\n{StopsCount}");
  strcpy((char *)&qword_2597F48, "{CityName}");
  byte_2597F77 = 12;
  byte_2597F8F = 11;
  strcpy((char *)&qword_2597F78, "_With_Other");
  byte_2597FA7 = 15;
  strcpy((char *)&qword_2597F90, "{DepartureTime}");
  qword_2597FA8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2597FB0 = v274;
  strcpy((char *)qword_2597FA8, "Ending_Charge_Station_Port_Availability");
  qword_2597FC0 = (uint64_t)operator new(0x28uLL);
  unk_2597FC8 = v267;
  strcpy((char *)qword_2597FC0, "Ending_Charge_Station_No_Availability");
  qword_2597FD8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2597FE0 = v270;
  strcpy((char *)qword_2597FD8, "Ending_Charge_Station_No_Real_Time");
  byte_2598007 = 16;
  strcpy(&algn_2597FE0[16], "{AvailablePorts}");
  byte_259801F = 12;
  strcpy((char *)&qword_2598008, "{TotalPorts}");
  byte_2598037 = 14;
  strcpy((char *)&qword_2598020, "{ManeuverIcon}");
  qword_2598038 = (uint64_t)operator new(0x38uLL);
  unk_2598040 = xmmword_20B9A60;
  strcpy((char *)qword_2598038, "Walking_Distance_ManeuverIcon_PrimaryInstruction");
  qword_2598050 = (uint64_t)operator new(0x20uLL);
  unk_2598058 = v273;
  strcpy((char *)qword_2598050, "Walking_Destination_Unnamed");
  qword_2598068 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_2598070 = v275;
  strcpy((char *)qword_2598068, "TrafficDelay_Label_Title_Sign");
  qword_2598080 = (uint64_t)operator new(0x20uLL);
  unk_2598088 = v277;
  strcpy((char *)qword_2598080, "Special_Guidance_Instruction");
  byte_25980AF = 2;
  strcpy((char *)&word_2598098, "CZ");
  byte_25980C7 = 3;
  dword_25980B0 = 5919811;
  unk_25980DF = 3;
  dword_25980C8 = 6243649;
  byte_25980F7 = 0;
  byte_259810F = 7;
  strcpy((char *)&dword_25980F8, "TRANSIT");
  byte_2598127 = 7;
  strcpy((char *)&dword_2598110, "OFFLINE");
  qword_2598128 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_2598130 = v265;
  strcpy((char *)qword_2598128, "Advisory_Card_French_Climate_Law_Title");
  qword_2598140 = (uint64_t)operator new(0x30uLL);
  unk_2598148 = xmmword_20B93C0;
  strcpy((char *)qword_2598140, "Advisory_Card_French_Climate_Law_Details");
  qword_2598158 = (uint64_t)operator new(0x30uLL);
  unk_2598160 = v271;
  strcpy((char *)qword_2598158, "French_Climate_Law_Metadata_Weblink_Title");
  qword_2598170 = (uint64_t)operator new(0x20uLL);
  unk_2598178 = v277;
  strcpy((char *)qword_2598170, "{ClimateLawLearnMoreWeblink}");
  byte_259819F = 3;
  dword_2598188 = 4280902;
  qword_25981A0 = (uint64_t)operator new(0x70uLL);
  unk_25981A8 = xmmword_20E81E0;
  strcpy((char *)qword_25981A0, "https://www.vie-publique.fr/loi/278460-loi-22-aout-2021-climat-et-resilience-convention-citoyenne-climat");
  return *(double *)"ut-2021-climat-et-resilience-convention-citoyenne-climat";
}

void sub_645F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3B7]) < 0)
  {
    operator delete((void *)STACK[0x3A0]);
    if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x387]) < 0) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  operator delete((void *)STACK[0x388]);
  if (SLOBYTE(STACK[0x387]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x370]);
    if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (SLOBYTE(STACK[0x357]) < 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)STACK[0x358]);
  if (SLOBYTE(STACK[0x357]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x340]);
    if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x327]) < 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete((void *)STACK[0x328]);
  if (SLOBYTE(STACK[0x327]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x310]);
    if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0)
  {
LABEL_9:
    if (SLOBYTE(STACK[0x2F7]) < 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)STACK[0x2F8]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
  {
LABEL_10:
    operator delete((void *)STACK[0x2E0]);
    if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
  {
LABEL_11:
    if (SLOBYTE(STACK[0x2C7]) < 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x2C8]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
  {
LABEL_12:
    operator delete((void *)STACK[0x2B0]);
    if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0)
  {
LABEL_13:
    if (SLOBYTE(STACK[0x297]) < 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete((void *)STACK[0x298]);
  if (SLOBYTE(STACK[0x297]) < 0)
  {
LABEL_14:
    operator delete((void *)STACK[0x280]);
    if (SLOBYTE(STACK[0x27F]) < 0)
    {
LABEL_37:
      operator delete((void *)STACK[0x268]);
      if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0)
      {
LABEL_38:
        if (SLOBYTE(STACK[0x24F]) < 0)
        {
LABEL_39:
          operator delete((void *)STACK[0x238]);
          if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
          {
LABEL_40:
            if (SLOBYTE(STACK[0x21F]) < 0)
            {
LABEL_41:
              operator delete((void *)STACK[0x208]);
              if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
              {
LABEL_42:
                if (a72 < 0)
                {
LABEL_43:
                  operator delete(a71);
                  if (a70 < 0)
                  {
LABEL_44:
                    operator delete(a65);
                    _Unwind_Resume(a1);
                  }
LABEL_45:
                  _Unwind_Resume(a1);
                }
LABEL_35:
                if (a70 < 0) {
                  goto LABEL_44;
                }
                goto LABEL_45;
              }
LABEL_34:
              operator delete(a73);
              if (a72 < 0) {
                goto LABEL_43;
              }
              goto LABEL_35;
            }
LABEL_33:
            if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0) {
              goto LABEL_42;
            }
            goto LABEL_34;
          }
LABEL_32:
          operator delete((void *)STACK[0x220]);
          if (SLOBYTE(STACK[0x21F]) < 0) {
            goto LABEL_41;
          }
          goto LABEL_33;
        }
LABEL_31:
        if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0) {
          goto LABEL_40;
        }
        goto LABEL_32;
      }
LABEL_30:
      operator delete((void *)STACK[0x250]);
      if (SLOBYTE(STACK[0x24F]) < 0) {
        goto LABEL_39;
      }
      goto LABEL_31;
    }
LABEL_29:
    if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_30;
  }
LABEL_28:
  if (SLOBYTE(STACK[0x27F]) < 0) {
    goto LABEL_37;
  }
  goto LABEL_29;
}

uint64_t sub_646220(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 56) = 0x8000000080000000;
  *(_DWORD *)(a1 + 64) = 0x7FFFFFFF;
  *(void *)(a1 + 72) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 80) = 0x8000000080000000;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 112) = 1;
  *(_DWORD *)(a1 + 113) = 0;
  *(unsigned char *)(a1 + 117) = 1;
  *(_DWORD *)(a1 + 118) = 0;
  *(_DWORD *)(a1 + 121) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 180) = -1;
  *(unsigned char *)(a1 + 184) = 0;
  sub_5F3B34(a1 + 192);
  sub_5F3B34(a1 + 352);
  sub_5F3B34(a1 + 512);
  sub_5F3B34(a1 + 672);
  sub_5F3B34(a1 + 832);
  *(void *)(a1 + 1008) = 0;
  *(_OWORD *)(a1 + 992) = 0u;
  sub_5F3B34(a1 + 1016);
  *(_DWORD *)(a1 + 1176) = 0;
  *(_DWORD *)(a1 + 1216) = -1;
  *(_DWORD *)(a1 + 1224) = -1;
  *(_DWORD *)(a1 + 1227) = -1;
  *(void *)(a1 + 1231) = 0;
  *(void *)(a1 + 1247) = 0;
  *(void *)(a1 + 1239) = 0;
  *(_WORD *)(a1 + 1255) = 0;
  *(void *)(a1 + 1264) = 0;
  *(void *)(a1 + 1280) = 0;
  *(void *)(a1 + 1272) = 0;
  *(unsigned char *)(a1 + 1288) = 0;
  *(_DWORD *)(a1 + 1296) = 0;
  sub_4F29BC(a1 + 1304);
  sub_59171C(a1 + 2392);
  *(_DWORD *)(a1 + 7224) = 0;
  *(_OWORD *)(a1 + 7192) = 0u;
  *(_OWORD *)(a1 + 7208) = 0u;
  *(_OWORD *)(a1 + 7232) = 0u;
  *(_OWORD *)(a1 + 7248) = 0u;
  *(_OWORD *)(a1 + 7264) = 0u;
  *(_DWORD *)(a1 + 7312) = -1;
  *(_DWORD *)(a1 + 7320) = -1;
  *(_DWORD *)(a1 + 7323) = -1;
  *(void *)(a1 + 7327) = 0;
  *(void *)(a1 + 7343) = 0;
  *(void *)(a1 + 7335) = 0;
  *(_WORD *)(a1 + 7351) = 0;
  *(void *)(a1 + 7360) = 0;
  *(void *)(a1 + 7376) = 0;
  *(void *)(a1 + 7368) = 0;
  *(unsigned char *)(a1 + 7384) = 0;
  *(void *)(a1 + 7552) = 0;
  *(_OWORD *)(a1 + 7536) = 0u;
  *(_OWORD *)(a1 + 7520) = 0u;
  *(_OWORD *)(a1 + 7504) = 0u;
  *(_OWORD *)(a1 + 7488) = 0u;
  *(_OWORD *)(a1 + 7472) = 0u;
  *(_OWORD *)(a1 + 7456) = 0u;
  *(_OWORD *)(a1 + 7440) = 0u;
  *(_OWORD *)(a1 + 7424) = 0u;
  *(_OWORD *)(a1 + 7408) = 0u;
  *(_OWORD *)(a1 + 7392) = 0u;
  *(_DWORD *)(a1 + 180) = sub_45FE24(a2);
  int v4 = (void *)nullsub_1(a2);
  uint64_t v5 = v4[1] - *v4;
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = v5 / 1056;
    do
    {
      uint64_t v8 = (void *)nullsub_1(a2);
      sub_64661C(a1, *v8 + v6);
      v6 += 1056;
      --v7;
    }
    while (v7);
  }
  return a1;
}

void sub_646470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unint64_t v21 = (char *)(v14 + 7255);
  sub_50E790((void **)(v14 + 7536));
  long long v22 = *(void **)(v14 + 7512);
  if (v22)
  {
    *(void *)(v14 + 7520) = v22;
    operator delete(v22);
    if ((*(char *)(v14 + 7511) & 0x80000000) == 0)
    {
LABEL_3:
      int v23 = (void **)(v14 + 7392);
      size_t v24 = (void **)(v14 + 7416);
      if ((*(char *)(v14 + 7487) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*(char *)(v14 + 7511) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v14 + 7488));
  int v23 = (void **)(v14 + 7392);
  size_t v24 = (void **)(v14 + 7416);
  if ((*(char *)(v14 + 7487) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v14 + 7463) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_13:
  operator delete(*(void **)(v14 + 7464));
  if ((*(char *)(v14 + 7463) & 0x80000000) == 0)
  {
LABEL_6:
    sub_28F14C(v24);
    sub_574598(v23);
    sub_4D9814(v15);
    if (*(char *)(v14 + 7279) < 0)
    {
      operator delete(*(void **)(v14 + 7256));
      if ((*v21 & 0x80000000) == 0)
      {
LABEL_8:
        size_t v25 = *v16;
        if (!*v16) {
          goto LABEL_10;
        }
        goto LABEL_9;
      }
    }
    else if ((*v21 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(*(void **)(v14 + 7232));
    size_t v25 = *v16;
    if (!*v16)
    {
LABEL_10:
      sub_575104(v20);
      sub_4F2BD0(v19);
      sub_4D9814(v18);
      sub_4D4B58(v17);
      sub_1A668((void **)(v14 + 992));
      sub_4D4B58(a10);
      sub_4D4B58(a11);
      sub_4D4B58(a12);
      sub_4D4B58(a13);
      sub_4D4B58(a14);
      sub_5915D8((void **)(v14 + 152));
      sub_591648((void **)(v14 + 24));
      sub_5916B4((void **)v14);
      _Unwind_Resume(a1);
    }
LABEL_9:
    *(void *)(v14 + 7200) = v25;
    operator delete(v25);
    goto LABEL_10;
  }
LABEL_5:
  operator delete(*(void **)(v14 + 7440));
  goto LABEL_6;
}

char *sub_64661C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 8);
  if (*(void *)a1 == v3)
  {
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 512);
    *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 516);
    *(void *)(a1 + 96) = *(void *)(a2 + 808);
    *(unsigned char *)(a1 + 91) |= *(unsigned char *)(a2 + 803);
    *(unsigned char *)(a1 + 93) |= *(unsigned char *)(a2 + 805);
    *(unsigned char *)(a1 + 95) |= *(unsigned char *)(a2 + 807);
  }
  else
  {
    *(_DWORD *)(a1 + 84) += *(_DWORD *)(a2 + 516);
  }
  *(unsigned char *)(a1 + 94) |= *(unsigned char *)(a2 + 806);
  *(unsigned char *)(a1 + 88) |= *(unsigned char *)(a2 + 800);
  *(unsigned char *)(a1 + 89) |= *(unsigned char *)(a2 + 801);
  *(unsigned char *)(a1 + 90) |= *(unsigned char *)(a2 + 802);
  *(unsigned char *)(a1 + 112) &= *(unsigned char *)(a2 + 824);
  *(unsigned char *)(a1 + 115) |= *(unsigned char *)(a2 + 827);
  *(unsigned char *)(a1 + 114) |= *(unsigned char *)(a2 + 826);
  *(unsigned char *)(a1 + 116) |= *(unsigned char *)(a2 + 828);
  *(unsigned char *)(a1 + 117) = *(unsigned char *)(a2 + 829);
  *(unsigned char *)(a1 + 118) = *(unsigned char *)(a2 + 830);
  *(unsigned char *)(a1 + 113) = *(unsigned char *)(a2 + 825);
  *(unsigned char *)(a1 + 124) |= *(unsigned char *)(a2 + 836);
  *(int32x4_t *)(a1 + 128) = vaddq_s32(*(int32x4_t *)(a1 + 128), *(int32x4_t *)(a2 + 840));
  int32x2_t v4 = *(int32x2_t *)(a1 + 144);
  uint8x8_t v5 = (uint8x8_t)vadd_s32(v4, *(int32x2_t *)(a2 + 856));
  *(uint8x8_t *)(a1 + 144) = v5;
  *(unsigned char *)(a1 + 123) |= *(unsigned char *)(a2 + 835);
  v5.i32[0] = *(_DWORD *)(a2 + 831);
  int16x8_t v6 = (int16x8_t)vmovl_u8(v5);
  v4.i32[0] = *(_DWORD *)(a1 + 119);
  *(int8x8_t *)v6.i8 = vorr_s8((int8x8_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v4), *(int8x8_t *)v6.i8);
  *(_DWORD *)(a1 + 119) = vmovn_s16(v6).u32[0];
  if (v3 >= *(void *)(a1 + 16))
  {
    uint64_t result = sub_5AEF24((uint64_t *)a1, a2);
    *(void *)(a1 + 8) = result;
  }
  else
  {
    sub_650170(v3, a2, 0);
    uint64_t result = (char *)(v3 + 12328);
    *(void *)(a1 + 8) = v3 + 12328;
    *(void *)(a1 + 8) = v3 + 12328;
  }
  return result;
}

void sub_6467DC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_6467E8(void *a1, uint64_t a2)
{
  return *a1 + 12328 * a2;
}

void *sub_6467F8@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if (0xFF55E3181697D6CDLL * ((uint64_t)(a2[1] - *a2) >> 3) >= 0xFF55E3181697D6CDLL
                                                             * ((uint64_t)(result[1] - *result) >> 3))
    unint64_t v4 = 0xFF55E3181697D6CDLL * ((uint64_t)(result[1] - *result) >> 3);
  else {
    unint64_t v4 = 0xFF55E3181697D6CDLL * ((uint64_t)(a2[1] - *a2) >> 3);
  }
  if (v4)
  {
    int16x8_t v6 = result;
    uint64_t v7 = 0;
    while (1)
    {
      uint64_t v8 = (uint64_t *)nullsub_1(*v6 + 12328 * v7);
      uint64_t result = (void *)nullsub_1(*a2 + 12328 * v7);
      uint64_t v10 = *v8;
      uint64_t v9 = v8[1];
      if (v9 - *v8 != result[1] - *result) {
        break;
      }
      if (v10 != v9)
      {
        uint64_t v11 = (unint64_t *)(*result + 32);
        do
        {
          unint64_t v13 = *v11;
          v11 += 5;
          unint64_t v12 = v13;
          if (__PAIR64__(*(unsigned __int16 *)(v10 + 36), *(_DWORD *)(v10 + 32)) != __PAIR64__(WORD2(v13), v13)
            || (HIWORD(v12) & 1) == (*(unsigned char *)(v10 + 38) == 0))
          {
            goto LABEL_14;
          }
          v10 += 40;
        }
        while (v10 != v9);
      }
      if (++v7 == v4) {
        goto LABEL_13;
      }
    }
LABEL_14:
    *(void *)a3 = v7;
    *(unsigned char *)(a3 + 8) = 1;
  }
  else
  {
LABEL_13:
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  return result;
}

unint64_t sub_646938(void *a1)
{
  return 0xFF55E3181697D6CDLL * ((uint64_t)(a1[1] - *a1) >> 3);
}

unint64_t sub_64695C(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 0;
  }
  else {
    return 0xFF55E3181697D6CDLL * ((v1 - *a1) >> 3) - 1;
  }
}

void sub_646994(uint64_t *a1@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *a1;
  uint64_t v26 = a1[1];
  if (*a1 != v26)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v3 + 1064);
      uint64_t v6 = *(void *)(v3 + 1072);
      while (v5 != v6)
      {
        unint64_t v8 = (unint64_t)a2[2];
        if ((unint64_t)v4 < v8)
        {
          *(void *)unint64_t v4 = v5;
          uint64_t v7 = (uint64_t)(v4 + 8);
          goto LABEL_6;
        }
        uint64_t v9 = *a2;
        uint64_t v10 = v4 - *a2;
        uint64_t v11 = v10 >> 3;
        unint64_t v12 = (v10 >> 3) + 1;
        if (v12 >> 61) {
          sub_2E00();
        }
        uint64_t v13 = v8 - (void)v9;
        if (v13 >> 2 > v12) {
          unint64_t v12 = v13 >> 2;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          if (v14 >> 61) {
            sub_188D718();
          }
          uint64_t v15 = operator new(8 * v14);
          uint64_t v16 = &v15[8 * v11];
          *(void *)uint64_t v16 = v5;
          uint64_t v7 = (uint64_t)(v16 + 8);
          if (v4 != v9)
          {
LABEL_21:
            unint64_t v17 = v4 - 8 - v9;
            if (v17 < 0x168)
            {
              uint64_t v18 = v4;
              goto LABEL_23;
            }
            if (&v15[v10 - 8 - (v17 & 0xFFFFFFFFFFFFFFF8)] > &v15[v10 - 8])
            {
              uint64_t v18 = v4;
              goto LABEL_23;
            }
            if (&v4[-(v17 & 0xFFFFFFFFFFFFFFF8) - 8] > v4 - 8)
            {
              uint64_t v18 = v4;
              goto LABEL_23;
            }
            if ((unint64_t)(v4 - v15 - v10) < 0x20)
            {
              uint64_t v18 = v4;
              goto LABEL_23;
            }
            uint64_t v20 = (v17 >> 3) + 1;
            uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v18 = &v4[-v21];
            v16 -= v21;
            long long v22 = &v15[8 * v11 - 16];
            int v23 = v4 - 16;
            uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v25 = *(_OWORD *)v23;
              *(v22 - 1) = *((_OWORD *)v23 - 1);
              *long long v22 = v25;
              v22 -= 2;
              v23 -= 32;
              v24 -= 4;
            }
            while (v24);
            if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_23:
                uint64_t v19 = *((void *)v18 - 1);
                v18 -= 8;
                *((void *)v16 - 1) = v19;
                v16 -= 8;
              }
              while (v18 != v9);
            }
            unint64_t v4 = *a2;
            *a2 = v16;
            a2[1] = (char *)v7;
            a2[2] = &v15[8 * v14];
            if (!v4) {
              goto LABEL_6;
            }
LABEL_25:
            operator delete(v4);
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v15 = 0;
          uint64_t v16 = (char *)(8 * v11);
          *(void *)(8 * v11) = v5;
          uint64_t v7 = 8 * v11 + 8;
          if (v4 != v9) {
            goto LABEL_21;
          }
        }
        *a2 = v16;
        a2[1] = (char *)v7;
        a2[2] = &v15[8 * v14];
        if (v4) {
          goto LABEL_25;
        }
LABEL_6:
        a2[1] = (char *)v7;
        v5 += 2400;
        unint64_t v4 = (char *)v7;
      }
      v3 += 12328;
    }
    while (v3 != v26);
  }
}

void sub_646BC4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_646BEC(uint64_t *a1)
{
  sub_646994(a1, &v4);
  uint64_t v1 = v4;
  uint64_t v2 = v5;
  if (v4)
  {
    uint64_t v5 = v4;
    operator delete(v4);
  }
  return (v2 - v1) >> 3;
}

uint64_t sub_646C34(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 0;
  }
  if ((unint64_t)(v1 - v2 - 12328) >> 3 < 0x605)
  {
    uint64_t result = 0;
    uint64_t v4 = v2;
    do
    {
LABEL_8:
      result += *(void *)(v4 + 504);
      v4 += 12328;
    }
    while (v4 != v1);
    return result;
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  unint64_t v7 = (v1 - v2 - 12328) / 0x3028uLL + 1;
  uint64_t v4 = v2 + 12328 * (v7 & 0xFFFFFFFFFFFFELL);
  uint64_t v8 = v7 & 0xFFFFFFFFFFFFELL;
  do
  {
    v5 += *(void *)(v2 + 504);
    v6 += *(void *)(v2 + 12832);
    v2 += 24656;
    v8 -= 2;
  }
  while (v8);
  uint64_t result = v6 + v5;
  if (v7 != (v7 & 0xFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_646CE8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 84);
}

BOOL sub_646CF0(unsigned int **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 1;
  }
  do
  {
    int v3 = sub_46E120(v1, 0);
    BOOL v4 = v3 == 0x7FFFFFFF;
    BOOL result = v3 != 0x7FFFFFFF;
    if (v4) {
      break;
    }
    v1 += 3082;
  }
  while (v1 != v2);
  return result;
}

uint64_t sub_646D60(unsigned int **a1)
{
  return sub_47EAD8(*a1, a1[1], 1, 0);
}

BOOL sub_646D74(unsigned int **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 1;
  }
  do
  {
    int v3 = sub_46E120(v1, 1);
    BOOL v5 = v3 == 0x7FFFFFFF;
    BOOL result = v3 != 0x7FFFFFFF;
    v1 += 3082;
    BOOL v5 = v5 || v1 == v2;
  }
  while (!v5);
  return result;
}

uint64_t sub_646DE0(unsigned int **a1)
{
  return sub_47EAD8(*a1, a1[1], 2, 0);
}

BOOL sub_646DF4(unsigned int **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 1;
  }
  do
  {
    int v3 = sub_46E120(v1, 2);
    BOOL v5 = v3 == 0x7FFFFFFF;
    BOOL result = v3 != 0x7FFFFFFF;
    v1 += 3082;
    BOOL v5 = v5 || v1 == v2;
  }
  while (!v5);
  return result;
}

uint64_t sub_646E60(unsigned int **a1)
{
  return sub_47EAD8(*a1, a1[1], 4, 0);
}

BOOL sub_646E74(unsigned int **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 1;
  }
  do
  {
    int v3 = sub_46E120(v1, 4);
    BOOL v5 = v3 == 0x7FFFFFFF;
    BOOL result = v3 != 0x7FFFFFFF;
    v1 += 3082;
    BOOL v5 = v5 || v1 == v2;
  }
  while (!v5);
  return result;
}

uint64_t sub_646EE0(unsigned int **a1)
{
  return sub_47EAD8(*a1, a1[1], 5, 0);
}

BOOL sub_646EF4(unsigned int **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 1;
  }
  do
  {
    int v3 = sub_46E120(v1, 5);
    BOOL v5 = v3 == 0x7FFFFFFF;
    BOOL result = v3 != 0x7FFFFFFF;
    v1 += 3082;
    BOOL v5 = v5 || v1 == v2;
  }
  while (!v5);
  return result;
}

_DWORD *sub_646F60@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = 0xFF55E3181697D6CDLL * ((uint64_t)(a1[1] - *a1) >> 3) - 1;
  BOOL result = (_DWORD *)sub_6510C8((void *)(*a1 + 12328 * v4));
  if (result)
  {
    uint64_t v6 = (_DWORD *)(*a1 + 12328 * v4);
    return sub_64EDB4(v6, a2);
  }
  else
  {
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(_DWORD *)a2 = 0x7FFFFFFF;
    *(void *)(a2 + 4) = 0x7FFFFFFF7FFFFFFFLL;
  }
  return result;
}

void sub_647004(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *(void **)a1;
  BOOL v5 = *(void **)(a1 + 8);
  if (*(void **)a1 != v5)
  {
    while (sub_6510C8(v4))
    {
      v4 += 1541;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    goto LABEL_7;
  }
LABEL_4:
  if (!*(unsigned char *)(a1 + 112))
  {
LABEL_7:
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(_DWORD *)a2 = 0x7FFFFFFF;
    *(void *)(a2 + 4) = 0x7FFFFFFF7FFFFFFFLL;
    return;
  }
  unint64_t v6 = 0xFF55E3181697D6CDLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3) - 1;
  if (sub_6510C8((void *)(*(void *)a1 + 12328 * v6)))
  {
    sub_64EDB4((_DWORD *)(*(void *)a1 + 12328 * v6), (uint64_t)&v34);
  }
  else
  {
    int v36 = 0;
    uint64_t v37 = 0;
    int v34 = 0x7FFFFFFF;
    uint64_t v35 = 0x7FFFFFFF7FFFFFFFLL;
  }
  sub_6472E0((char *)a1, (uint64_t)&v29);
  sub_647500((char *)a1, (uint64_t)&v24);
  sub_64BFF8((uint64_t)&v14, &v29);
  sub_64BFF8((uint64_t)&v9, &v24);
  sub_6476DC(&v14, &v9, (uint64_t)&v19);
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
  int v7 = *v19;
  uint64_t v8 = sub_52060((uint64_t)&v34);
  sub_3FB048(a2, v7, v8);
  if (v22)
  {
    int v23 = v22;
    operator delete(v22);
  }
  if (v20)
  {
    uint64_t v21 = v20;
    operator delete(v20);
  }
  if (v27)
  {
    char v28 = v27;
    operator delete(v27);
  }
  if (v25)
  {
    uint64_t v26 = v25;
    operator delete(v25);
  }
  if (v32)
  {
    unint64_t v33 = v32;
    operator delete(v32);
  }
  if (v30)
  {
    int v31 = v30;
    operator delete(v30);
  }
}

void sub_64720C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  sub_2FC938(&a9);
  sub_2FC938(&a17);
  sub_2FC938(&a33);
  sub_2FC938((void *)(v33 - 144));
  _Unwind_Resume(a1);
}

BOOL sub_647280(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void **)(a1 + 8);
  if (*(void **)a1 == v2) {
    return 1;
  }
  do
  {
    BOOL result = sub_6510C8(v1);
    if (!result) {
      break;
    }
    v1 += 1541;
  }
  while (v1 != v2);
  return result;
}

char *sub_6472E0@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = 0;
  long long v22 = 0uLL;
  uint64_t v4 = *(void *)result;
  uint64_t v3 = *((void *)result + 1);
  if (v3 == *(void *)result)
  {
    uint64_t v13 = 0;
    long long v11 = 0uLL;
  }
  else
  {
    unint64_t v5 = 0xFF55E3181697D6CDLL * ((v3 - *(void *)result) >> 3);
    if (v5 >> 61) {
      sub_2E00();
    }
    unint64_t v6 = result;
    int v7 = operator new(0xFAAF18C0B4BEB668 * ((v3 - *(void *)result) >> 3));
    uint64_t v21 = v7;
    *(void *)&long long v22 = v7;
    *((void *)&v22 + 1) = &v7[v5];
    do
    {
      *(void *)&long long v19 = *(void *)(v4 + 1160);
      BOOL result = sub_64C10C((unint64_t *)&v21, v7, &v19);
      int v7 = result + 8;
      v4 += 12328;
    }
    while (v4 != v3);
    uint64_t v10 = v6;
    uint64_t v8 = *(void *)v6;
    uint64_t v9 = *((void *)v10 + 1);
    uint64_t v20 = 0;
    long long v11 = 0uLL;
    long long v19 = 0u;
    if (v9 == v8)
    {
      uint64_t v13 = 0;
    }
    else
    {
      if ((0xFF55E3181697D6CDLL * ((v9 - v8) >> 3)) >> 61) {
        sub_2E00();
      }
      unint64_t v12 = operator new(0xFAAF18C0B4BEB668 * ((v9 - v8) >> 3));
      *(void *)&long long v19 = v12;
      *((void *)&v19 + 1) = v12;
      uint64_t v20 = &v12[0xFF55E3181697D6CDLL * ((v9 - v8) >> 3)];
      do
      {
        uint64_t v23 = *(void *)(v8 + 1168);
        BOOL result = sub_64C10C((unint64_t *)&v19, v12, &v23);
        unint64_t v12 = result + 8;
        v8 += 12328;
      }
      while (v8 != v9);
      long long v11 = v19;
      uint64_t v13 = v20;
    }
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  unint64_t v14 = (unint64_t)v21;
  *(void *)(a2 + 16) = v21;
  uint64_t v15 = v22;
  *(_OWORD *)(a2 + 24) = v22;
  uint64_t v21 = 0;
  long long v22 = 0uLL;
  *(_OWORD *)(a2 + 40) = v11;
  *(void *)(a2 + 56) = v13;
  uint64_t v20 = 0;
  long long v19 = 0uLL;
  if (v14 != v15)
  {
    uint64_t v16 = (uint64_t)(v15 - v14) >> 3;
    uint64_t v17 = v16 - 1;
    if (v16 == 1)
    {
      uint64_t v18 = 0;
    }
    else
    {
      uint64_t v18 = 0;
      while (*(void *)(v14 + 8 * v18) == *(void *)(v11 + 8 * v18))
      {
        *(void *)(a2 + 8) = ++v18;
        if (v17 == v18)
        {
          uint64_t v18 = v17;
          break;
        }
      }
    }
    *(void *)a2 = *(void *)(v14 + 8 * v18);
  }
  return result;
}

void sub_6474C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

char *sub_647500@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  long long v19 = 0;
  long long v20 = 0uLL;
  uint64_t v4 = *(void *)result;
  uint64_t v3 = *((void *)result + 1);
  uint64_t v5 = v3 - *(void *)result;
  if (v3 == *(void *)result)
  {
    long long v12 = 0uLL;
  }
  else
  {
    unint64_t v6 = 0xFF55E3181697D6CDLL * (v5 >> 3);
    if (v6 >> 61) {
      sub_2E00();
    }
    int v7 = result;
    uint64_t v8 = operator new(0xFAAF18C0B4BEB668 * (v5 >> 3));
    long long v19 = v8;
    *(void *)&long long v20 = v8;
    *((void *)&v20 + 1) = &v8[v6];
    do
    {
      *(void *)uint64_t v18 = *(void *)(v4 + 1160);
      BOOL result = sub_64C10C((unint64_t *)&v19, v8, v18);
      uint64_t v8 = result + 8;
      v4 += 12328;
    }
    while (v4 != v3);
    long long v11 = v7;
    uint64_t v9 = *(void *)v7;
    uint64_t v10 = *((void *)v11 + 1);
    long long v12 = 0uLL;
    memset(v18, 0, sizeof(v18));
    uint64_t v5 = v10 - v9;
    if (v10 != v9)
    {
      unint64_t v13 = 0xFF55E3181697D6CDLL * (v5 >> 3);
      if (v13 >> 61) {
        sub_2E00();
      }
      unint64_t v14 = operator new(0xFAAF18C0B4BEB668 * (v5 >> 3));
      *(void *)uint64_t v18 = v14;
      *(void *)&char v18[8] = v14;
      *(void *)&v18[16] = &v14[v13];
      do
      {
        uint64_t v21 = *(void *)(v9 + 1168);
        BOOL result = sub_64C10C((unint64_t *)v18, v14, &v21);
        unint64_t v14 = result + 8;
        v9 += 12328;
      }
      while (v9 != v10);
      uint64_t v5 = *(void *)v18;
      long long v12 = *(_OWORD *)&v18[8];
    }
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  unint64_t v15 = (unint64_t)v19;
  *(void *)(a2 + 16) = v19;
  uint64_t v16 = v20;
  *(_OWORD *)(a2 + 24) = v20;
  long long v19 = 0;
  long long v20 = 0uLL;
  *(void *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 48) = v12;
  memset(v18, 0, sizeof(v18));
  if (v15 != v16)
  {
    uint64_t v17 = (((uint64_t)v12 - v5) >> 3) - 1;
    *(void *)a2 = *(void *)(v5 + 8 * v17);
    *(void *)(a2 + 8) = v17;
  }
  return result;
}

void sub_6476A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_6476DC(long long *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  sub_64BFF8((uint64_t)v10, a1);
  sub_64BFF8((uint64_t)v5, a2);
  sub_64BBF0((uint64_t)v10, (uint64_t)v5, a3);
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
  if (v6)
  {
    int v7 = v6;
    operator delete(v6);
  }
  if (v13)
  {
    unint64_t v14 = v13;
    operator delete(v13);
  }
  if (v11)
  {
    long long v12 = v11;
    operator delete(v11);
  }
}

void sub_647770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
}

void sub_64778C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2FC938((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_6477A0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 176) < 2u;
}

BOOL sub_6477B0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 176) < 3u;
}

BOOL sub_6477C0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 176) - 5 < 2;
}

uint64_t sub_6477D4(uint64_t a1)
{
  return a1 + 88;
}

uint64_t sub_6477DC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_6477E4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 119);
}

BOOL sub_6477EC(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 128)) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 120)) {
    return 1;
  }
  return *(unsigned char *)(a1 + 121) != 0;
}

BOOL sub_64781C(uint64_t a1)
{
  return *(unsigned char *)(a1 + 117) == 0;
}

uint64_t sub_64782C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 113);
}

char *sub_647834(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 160);
  if (v4 >= *(void *)(a1 + 168))
  {
    BOOL result = sub_64C47C((char **)(a1 + 152), a2);
    *(void *)(a1 + 160) = result;
  }
  else
  {
    *(_DWORD *)unint64_t v4 = *(_DWORD *)a2;
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
    int v5 = *(unsigned __int8 *)(a2 + 1136);
    *(unsigned char *)(v4 + 1136) = v5;
    if (v5) {
      sub_4BE9F4(v4 + 16, a2 + 16);
    }
    long long v6 = *(_OWORD *)(a2 + 1144);
    *(_DWORD *)(v4 + 1159) = *(_DWORD *)(a2 + 1159);
    *(_OWORD *)(v4 + 1144) = v6;
    BOOL result = (char *)(v4 + 1168);
    *(void *)(a1 + 160) = v4 + 1168;
  }
  return result;
}

uint64_t sub_6478D8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 176);
}

uint64_t sub_6478E0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 180);
}

uint64_t sub_6478E8(uint64_t result, char a2)
{
  *(unsigned char *)(result + 176) = a2;
  return result;
}

uint64_t sub_6478F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 180) = a2;
  return result;
}

__n128 sub_6478F8(uint64_t a1, __n128 *a2)
{
  __n128 result = *a2;
  *(void *)(a1 + 72) = a2[1].n128_u64[0];
  *(__n128 *)(a1 + 56) = result;
  return result;
}

uint64_t sub_64790C(uint64_t a1)
{
  return a1 + 192;
}

char *sub_647914(uint64_t *a1, uint64_t a2, int a3)
{
  int v5 = (char **)(a1 + 24);
  sub_5F657C(a1 + 24, a2, a3);
  unint64_t v7 = a1[25];
  if (v7 >= a1[26])
  {
    uint64_t v9 = sub_1D740(v5, a2);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200((unsigned char *)a1[25], *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v8 = *(_OWORD *)a2;
      *(void *)(v7 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v7 = v8;
    }
    uint64_t v9 = (char *)(v7 + 24);
    a1[25] = v7 + 24;
  }
  a1[25] = (uint64_t)v9;
  sub_5F657C((uint64_t *)(*a1 + 9312), a2, a3);
  uint64_t v10 = *a1;
  unint64_t v11 = *(void *)(*a1 + 9320);
  if (v11 >= *(void *)(v10 + 9328))
  {
    __n128 result = sub_1D740((char **)(v10 + 9312), a2);
    *(void *)(v10 + 9320) = result;
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200((unsigned char *)v11, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v12 = *(_OWORD *)a2;
      *(void *)(v11 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v11 = v12;
    }
    __n128 result = (char *)(v11 + 24);
    *(void *)(v10 + 9320) = v11 + 24;
    *(void *)(v10 + 9320) = v11 + 24;
  }
  return result;
}

void sub_647A34(_Unwind_Exception *a1)
{
  *(void *)(v2 + 9320) = v1;
  _Unwind_Resume(a1);
}

void sub_647A3C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 200) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_647A44(uint64_t a1)
{
  return a1 + 352;
}

uint64_t sub_647A4C(void *a1, uint64_t a2)
{
  sub_52FD00((uint64_t)(a1 + 44), a2);
  uint64_t v4 = *a1 + 9152;

  return sub_52FD00(v4, a2);
}

uint64_t sub_647A98(uint64_t a1)
{
  return a1 + 512;
}

uint64_t sub_647AA0(void *a1, uint64_t a2)
{
  sub_52FD00((uint64_t)(a1 + 64), a2);
  uint64_t v4 = *a1 + 9472;

  return sub_52FD00(v4, a2);
}

uint64_t sub_647AEC(void *a1, uint64_t a2)
{
  sub_52FD00((uint64_t)(a1 + 84), a2);
  uint64_t v4 = *a1 + 9792;

  return sub_52FD00(v4, a2);
}

uint64_t sub_647B38(void *a1, uint64_t a2)
{
  sub_52FD00((uint64_t)(a1 + 104), a2);
  uint64_t v4 = *a1 + 9632;

  return sub_52FD00(v4, a2);
}

uint64_t sub_647B84(uint64_t a1)
{
  return a1 + 992;
}

void sub_647B8C(void *a1, std::string **a2)
{
  uint64_t v4 = (uint64_t)(a1 + 124);
  if ((std::string **)v4 != a2) {
    sub_69208(v4, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  }
  uint64_t v5 = *a1 + 7144;
  if ((std::string **)v5 != a2)
  {
    long long v6 = *a2;
    unint64_t v7 = a2[1];
    size_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)*a2) >> 3);
    sub_69208(v5, v6, v7, v8);
  }
}

uint64_t sub_647C20(uint64_t a1)
{
  return a1 + 1016;
}

uint64_t sub_647C28(void *a1, uint64_t a2)
{
  sub_52FD00((uint64_t)(a1 + 127), a2);
  uint64_t v4 = *a1 + 7168;

  return sub_52FD00(v4, a2);
}

uint64_t sub_647C74(uint64_t a1)
{
  return a1 + 1184;
}

std::string *sub_647C7C(uint64_t a1, uint64_t a2)
{
  sub_4F39B8(a1 + 1184, (std::string *)a2);
  *(void *)(a1 + 1224) = *(void *)(a2 + 40);
  std::string::operator=((std::string *)(a1 + 1232), (const std::string *)(a2 + 48));
  *(unsigned char *)(a1 + 1256) = *(unsigned char *)(a2 + 72);
  __n128 result = std::string::operator=((std::string *)(a1 + 1264), (const std::string *)(a2 + 80));
  *(unsigned char *)(a1 + 1288) = *(unsigned char *)(a2 + 104);
  return result;
}

uint64_t sub_647CD8(uint64_t a1)
{
  return a1 + 1304;
}

uint64_t *sub_647CE0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t)(a1 + 163);
  sub_592670(a1 + 163, a2);
  uint64_t v4 = (uint64_t *)(*a1 + 1256);

  return sub_592670(v4, v3);
}

uint64_t sub_647D28(uint64_t a1)
{
  return a1 + 7192;
}

char **sub_647D34(char **a1, char **a2)
{
  uint64_t v4 = a1 + 899;
  if (v4 != a2) {
    sub_5A5C34(v4, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3));
  }
  __n128 result = (char **)(*a1 + 11632);
  if (result != a2)
  {
    long long v6 = *a2;
    unint64_t v7 = a2[1];
    size_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a2) >> 3);
    return (char **)sub_5A5C34(result, v6, v7, v8);
  }
  return result;
}

uint64_t sub_647DCC(uint64_t a1)
{
  return a1 + 7216;
}

_DWORD *sub_647DD8(_DWORD *result, _DWORD *a2)
{
  result[1804] = *a2;
  *(_DWORD *)(*(void *)result + 11656) = *a2;
  return result;
}

uint64_t sub_647DF0(uint64_t a1)
{
  return a1 + 7220;
}

_DWORD *sub_647DFC(_DWORD *result, _DWORD *a2)
{
  result[1805] = *a2;
  *(_DWORD *)(*(void *)result + 11660) = *a2;
  return result;
}

uint64_t sub_647E14(uint64_t a1)
{
  return a1 + 7224;
}

uint64_t sub_647E20(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 7224) = *a2;
  return result;
}

uint64_t sub_647E2C(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 0;
  }
  if ((unint64_t)(v1 - v2 - 12328) >> 3 >= 0x605)
  {
    int v6 = 0;
    int v7 = 0;
    unint64_t v8 = (v1 - v2 - 12328) / 0x3028uLL + 1;
    uint64_t v4 = &v2[12328 * (v8 & 0xFFFFFFFFFFFFELL)];
    uint64_t v9 = v8 & 0xFFFFFFFFFFFFELL;
    do
    {
      v6 += 1022611261 * ((*((void *)v2 + 1449) - *((void *)v2 + 1448)) >> 3);
      v7 += 1022611261 * ((*((void *)v2 + 2990) - *((void *)v2 + 2989)) >> 3);
      v2 += 24656;
      v9 -= 2;
    }
    while (v9);
    unsigned int v3 = v7 + v6;
    if (v8 == (v8 & 0xFFFFFFFFFFFFELL)) {
      return v3;
    }
  }
  else
  {
    unsigned int v3 = 0;
    uint64_t v4 = *a1;
  }
  do
  {
    v3 += 1022611261 * ((*((void *)v4 + 1449) - *((void *)v4 + 1448)) >> 3);
    v4 += 12328;
  }
  while (v4 != v1);
  return v3;
}

uint64_t *sub_647F18@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  if (*result != v3)
  {
    do
    {
      __n128 result = (uint64_t *)sub_64C690(a2, a2[1], *(void *)(v2 + 11584), *(void *)(v2 + 11592), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(v2 + 11592) - *(void *)(v2 + 11584)) >> 3));
      v2 += 12328;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_647F9C(_Unwind_Exception *a1)
{
  sub_4B1DB4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_647FB0(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 0;
  }
  if ((unint64_t)(v1 - v2 - 12328) >> 3 >= 0x605)
  {
    int v6 = 0;
    int v7 = 0;
    unint64_t v8 = (v1 - v2 - 12328) / 0x3028uLL + 1;
    uint64_t v4 = &v2[12328 * (v8 & 0xFFFFFFFFFFFFELL)];
    uint64_t v9 = v8 & 0xFFFFFFFFFFFFELL;
    do
    {
      v6 += 1022611261 * ((*((void *)v2 + 1452) - *((void *)v2 + 1451)) >> 3);
      v7 += 1022611261 * ((*((void *)v2 + 2993) - *((void *)v2 + 2992)) >> 3);
      v2 += 24656;
      v9 -= 2;
    }
    while (v9);
    unsigned int v3 = v7 + v6;
    if (v8 == (v8 & 0xFFFFFFFFFFFFELL)) {
      return v3;
    }
  }
  else
  {
    unsigned int v3 = 0;
    uint64_t v4 = *a1;
  }
  do
  {
    v3 += 1022611261 * ((*((void *)v4 + 1452) - *((void *)v4 + 1451)) >> 3);
    v4 += 12328;
  }
  while (v4 != v1);
  return v3;
}

uint64_t *sub_64809C@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  if (*result != v3)
  {
    do
    {
      __n128 result = (uint64_t *)sub_64C690(a2, a2[1], *(void *)(v2 + 11608), *(void *)(v2 + 11616), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(v2 + 11616) - *(void *)(v2 + 11608)) >> 3));
      v2 += 12328;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_648120(_Unwind_Exception *a1)
{
  sub_4B1DB4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_648134(uint64_t a1)
{
  return a1 + 7232;
}

std::string *sub_648140(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 7232), a2);
  uint64_t v4 = (std::string *)(*(void *)a1 + 1208);

  return std::string::operator=(v4, a2);
}

uint64_t sub_64818C(uint64_t a1)
{
  return a1 + 7256;
}

std::string *sub_648198(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 7256), a2);
  uint64_t v4 = (std::string *)(*(void *)a1 + 1232);

  return std::string::operator=(v4, a2);
}

uint64_t sub_6481E4(uint64_t a1)
{
  return a1 + 7280;
}

std::string *sub_6481F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (unsigned char *)(a1 + 7352);
  sub_4F39B8(a1 + 7280, (std::string *)a2);
  *(void *)(a1 + 7320) = *(void *)(a2 + 40);
  std::string::operator=((std::string *)(a1 + 7328), (const std::string *)(a2 + 48));
  *uint64_t v4 = *(unsigned char *)(a2 + 72);
  __n128 result = std::string::operator=((std::string *)(a1 + 7360), (const std::string *)(a2 + 80));
  v4[32] = *(unsigned char *)(a2 + 104);
  return result;
}

uint64_t sub_648268(uint64_t a1)
{
  return a1 + 7392;
}

uint64_t *sub_648274(uint64_t a1, uint64_t *a2)
{
  __n128 result = (uint64_t *)(a1 + 7392);
  if (result != a2) {
    return (uint64_t *)sub_5A5DB8(result, *a2, a2[1], 0xF83E0F83E0F83E1 * ((a2[1] - *a2) >> 5));
  }
  return result;
}

uint64_t *sub_6482B0(uint64_t *result, char a2)
{
  *((unsigned char *)result + 184) = a2;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  if (*result != v3)
  {
    if ((unint64_t)(v3 - v2 - 12328) >> 3 < 0x605) {
      goto LABEL_9;
    }
    uint64_t v4 = (unsigned char *)(v2 + 22305);
    uint64_t v5 = (unsigned char *)(v2 + 9977);
    unint64_t v6 = (v3 - v2 - 12328) / 0x3028uLL + 1;
    v2 += 12328 * (v6 & 0xFFFFFFFFFFFFELL);
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFELL;
    do
    {
      *uint64_t v5 = a2;
      *uint64_t v4 = a2;
      v5 += 24656;
      v4 += 24656;
      v7 -= 2;
    }
    while (v7);
    if (v6 != (v6 & 0xFFFFFFFFFFFFELL))
    {
LABEL_9:
      do
      {
        *(unsigned char *)(v2 + 9977) = a2;
        v2 += 12328;
      }
      while (v2 != v3);
    }
  }
  return result;
}

uint64_t sub_648354(uint64_t a1)
{
  return a1 + 7464;
}

std::string *sub_648360(std::string *a1, const std::string *a2)
{
  std::string::operator=(a1 + 311, a2);
  uint64_t v4 = (std::string *)(a1->__r_.__value_.__r.__words[0] + 10080);

  return std::string::operator=(v4, a2);
}

uint64_t sub_6483B0(uint64_t a1)
{
  return a1 + 7440;
}

std::string *sub_6483BC(std::string *a1, const std::string *a2)
{
  std::string::operator=(a1 + 310, a2);
  uint64_t v4 = (std::string *)(a1->__r_.__value_.__r.__words[0] + 12000);

  return std::string::operator=(v4, a2);
}

uint64_t sub_64840C(uint64_t a1)
{
  return a1 + 7416;
}

void sub_648418(void **a1, long long **a2)
{
  uint64_t v4 = a1 + 927;
  if (v4 != (void **)a2) {
    sub_4C02B4(v4, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  }
  uint64_t v5 = (void **)((char *)*a1 + 11976);
  if (v5 != (void **)a2)
  {
    unint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (v7 - *a2);
    sub_4C02B4(v5, v6, v7, v8);
  }
}

uint64_t sub_6484B0(void *a1, unsigned int a2)
{
  uint64_t v2 = a1[1];
  if (v2 - *a1 == 12328) {
    a2 = 1;
  }
  if (*a1 == v2) {
    return 0;
  }
  else {
    return a2;
  }
}

BOOL sub_6484D0(uint64_t a1)
{
  return *(void *)(a1 + 24) != *(void *)(a1 + 32);
}

void *sub_6484E0@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (long long *)result[3];
  if (v2 == (long long *)result[4])
  {
    *(unsigned char *)(a2 + 23) = 0;
    *(unsigned char *)a2 = 0;
  }
  else if (*((char *)v2 + 23) < 0)
  {
    return sub_4200((unsigned char *)a2, *(void **)v2, *((void *)v2 + 1));
  }
  else
  {
    long long v3 = *v2;
    *(void *)(a2 + 16) = *((void *)v2 + 2);
    *(_OWORD *)a2 = v3;
  }
  return result;
}

uint64_t sub_648520@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result != *(void *)(a1 + 32)) {
    return sub_6F3178();
  }
  a2[23] = 0;
  *a2 = 0;
  return result;
}

void sub_648544(void *a1, std::string **a2)
{
  uint64_t v4 = (uint64_t)(a1 + 3);
  if ((std::string **)v4 != a2) {
    sub_5A4CBC(v4, *a2, a2[1], 0x2E8BA2E8BA2E8BA3 * (((char *)a2[1] - (char *)*a2) >> 4));
  }
  uint64_t v5 = *a1 + 1112;
  if ((std::string **)v5 != a2)
  {
    unint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    unint64_t v8 = 0x2E8BA2E8BA2E8BA3 * (((char *)v7 - (char *)*a2) >> 4);
    sub_5A4CBC(v5, v6, v7, v8);
  }
}

uint64_t sub_6485E4(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[4];
  if (v4 >= a1[5])
  {
    a1[4] = sub_64CC70(a1 + 3, a2);
    uint64_t v5 = (uint64_t *)*a1;
    unint64_t v6 = *(void *)(*a1 + 1120);
    if (v6 >= v5[141]) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_598A38(a1[4], a2);
    a1[4] = v4 + 176;
    a1[4] = v4 + 176;
    uint64_t v5 = (uint64_t *)*a1;
    unint64_t v6 = *(void *)(*a1 + 1120);
    if (v6 >= v5[141])
    {
LABEL_3:
      uint64_t result = sub_64CC70(v5 + 139, a2);
      v5[140] = result;
      return result;
    }
  }
  sub_598A38(v6, a2);
  uint64_t result = v6 + 176;
  v5[140] = v6 + 176;
  v5[140] = v6 + 176;
  return result;
}

void sub_6486A4(_Unwind_Exception *a1)
{
  *(void *)(v2 + 1120) = v1;
  _Unwind_Resume(a1);
}

void sub_6486AC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

void sub_6486B4(void *a1)
{
  uint64_t v3 = a1[3];
  for (uint64_t i = a1[4]; i != v3; sub_57523C((uint64_t)(a1 + 5), i))
    i -= 176;
  a1[4] = v3;
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(*a1 + 1120);
  uint64_t v6 = *(void *)(v4 + 1112);
  while (v5 != v6)
  {
    v5 -= 176;
    sub_57523C(v4 + 1128, v5);
  }
  *(void *)(v4 + 1120) = v6;
}

uint64_t sub_64873C(void *a1)
{
  if (*a1 == a1[1]) {
    return 2;
  }
  else {
    return *(unsigned __int8 *)(*a1 + 1057);
  }
}

uint64_t sub_648758(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 != v2)
  {
    uint64_t v3 = *(void *)(v1 + 1064);
    uint64_t v4 = *(void *)(v1 + 1072);
    if (v3 != v4) {
      goto LABEL_5;
    }
LABEL_3:
    while (1)
    {
      v1 += 12328;
      if (v1 == v2) {
        break;
      }
      uint64_t v3 = *(void *)(v1 + 1064);
      uint64_t v4 = *(void *)(v1 + 1072);
      if (v3 != v4)
      {
LABEL_5:
        while (*(void *)(v3 + 584) == -1)
        {
          v3 += 2400;
          if (v3 == v4) {
            goto LABEL_3;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_6487C0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 != v2)
  {
    uint64_t v3 = *(void *)(v1 + 1064);
    uint64_t v4 = *(void *)(v1 + 1072);
    if (v3 != v4) {
      goto LABEL_5;
    }
LABEL_3:
    while (1)
    {
      v1 += 12328;
      if (v1 == v2) {
        break;
      }
      uint64_t v3 = *(void *)(v1 + 1064);
      uint64_t v4 = *(void *)(v1 + 1072);
      if (v3 != v4)
      {
LABEL_5:
        while (*(void *)(v3 + 568) == -1)
        {
          v3 += 2400;
          if (v3 == v4) {
            goto LABEL_3;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_648828(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 1;
  }
  while (!*(unsigned char *)(v1 + 11948))
  {
    BOOL v3 = *(void *)(v1 + 11704) == *(void *)(v1 + 11712) || *(void *)(v1 + 11688) == 0x7FFFFFFFFFFFFFFFLL;
    BOOL v4 = v3 || *(void *)(v1 + 11696) == 0x7FFFFFFFFFFFFFFFLL;
    if (v4 && *(void *)(v1 + 11920) == *(void *)(v1 + 11928) && !*(_DWORD *)(v1 + 11944)) {
      break;
    }
    v1 += 12328;
    if (v1 == v2) {
      return 1;
    }
  }
  return 0;
}

BOOL sub_6488A0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  if (*a1 != v1)
  {
    uint64_t v3 = *a1;
    while (!*(unsigned char *)(v3 + 11948))
    {
      BOOL v4 = *(void *)(v3 + 11704) == *(void *)(v3 + 11712) || *(void *)(v3 + 11688) == 0x7FFFFFFFFFFFFFFFLL;
      BOOL v5 = v4 || *(void *)(v3 + 11696) == 0x7FFFFFFFFFFFFFFFLL;
      if (v5 && *(void *)(v3 + 11920) == *(void *)(v3 + 11928) && !*(_DWORD *)(v3 + 11944)) {
        break;
      }
      v3 += 12328;
      if (v3 == v1)
      {
        if (v2 == v1) {
          return 0;
        }
        uint64_t v6 = v2 + 12328;
        do
        {
          unsigned int v7 = *(_DWORD *)(v6 - 384) - 6;
          BOOL result = v7 < 0xFFFFFFFB;
          BOOL v9 = v7 < 0xFFFFFFFB || v6 == v1;
          v6 += 12328;
        }
        while (!v9);
        return result;
      }
    }
  }
  return 0;
}

uint64_t sub_64894C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 0;
  }
  if ((unint64_t)(v1 - v2 - 12328) >> 3 < 0x605)
  {
    uint64_t result = 0;
    uint64_t v4 = v2;
    do
    {
LABEL_8:
      result += *(void *)(v4 + 12048);
      v4 += 12328;
    }
    while (v4 != v1);
    return result;
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  unint64_t v7 = (v1 - v2 - 12328) / 0x3028uLL + 1;
  uint64_t v4 = v2 + 12328 * (v7 & 0xFFFFFFFFFFFFELL);
  uint64_t v8 = v7 & 0xFFFFFFFFFFFFELL;
  do
  {
    v5 += *(void *)(v2 + 12048);
    v6 += *(void *)(v2 + 24376);
    v2 += 24656;
    v8 -= 2;
  }
  while (v8);
  uint64_t result = v6 + v5;
  if (v7 != (v7 & 0xFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_648A00(uint64_t a1)
{
  unsigned __int8 v1 = *(unsigned char *)(a1 + 90);
  if (!v1) {
    return v1;
  }
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void **)(a1 + 8);
  if (*(void **)a1 == v4) {
    return 0;
  }
  int v5 = 0;
  do
  {
    v5 += sub_46C760(v3);
    v3 += 1541;
  }
  while (v3 != v4);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *(void **)a1;
  unint64_t v7 = *(void **)(a1 + 8);
  if (*(void **)a1 != v7)
  {
    char v8 = 0;
    char v9 = 0;
    do
    {
      uint64_t v10 = nullsub_1(v6);
      for (uint64_t i = *(void **)v10; i != *(void **)(v10 + 8); i += 5)
      {
        unint64_t v13 = (unsigned __int16 *)(*i - *(int *)*i);
        if (*v13 >= 0xBu && (uint64_t v14 = v13[5]) != 0)
        {
          v8 |= (*(_DWORD *)(*i + v14) & 0x208) == 8;
          int v12 = (*(_DWORD *)(*i + v14) >> 9) & 1;
        }
        else
        {
          LOBYTE(v12) = 0;
        }
        v9 |= v12;
      }
      v6 += 1541;
    }
    while (v6 != v7);
    if (v8) {
      unsigned __int8 v1 = 3;
    }
    else {
      unsigned __int8 v1 = 2;
    }
    if ((v9 & 1) == 0) {
      return 1;
    }
    return v1;
  }
  return 1;
}

uint64_t sub_648B60(uint64_t a1)
{
  return a1 + 7536;
}

uint64_t *sub_648B6C(uint64_t a1, uint64_t *a2)
{
  uint64_t result = (uint64_t *)(a1 + 7536);
  if (result != a2) {
    return (uint64_t *)sub_572E74(result, *a2, a2[1], 0xAF8AF8AF8AF8AF8BLL * ((a2[1] - *a2) >> 5));
  }
  return result;
}

uint64_t sub_648BA8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0;
  }
  while (1)
  {
    if (sub_64EFF0(v1))
    {
      uint64_t v3 = sub_46CAAC(v1);
      uint64_t v4 = *(unsigned char **)(v3 + 64);
      int v5 = *(unsigned char **)(v3 + 72);
      if (v4 == v5) {
        break;
      }
      do
      {
        int v6 = sub_87EB0(v4);
        if (v6) {
          break;
        }
        v4 += 12;
      }
      while (v4 != v5);
      if (!v6) {
        break;
      }
    }
    v1 += 12328;
    if (v1 == v2) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_648C50(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1] - 12328;
  if (*a1 == v2) {
    return 0;
  }
  while (1)
  {
    uint64_t v3 = (_DWORD *)sub_46CAAC(v1);
    if (*v3 == 0x7FFFFFFF || v3[9] == 0x7FFFFFFF) {
      goto LABEL_4;
    }
    int v5 = v3;
    if (!sub_40A45C(v3 + 2)) {
      goto LABEL_4;
    }
    int v6 = v5[28];
    if (v6 == -1) {
      goto LABEL_4;
    }
    if (v6 == 1)
    {
      if (*((void *)v5 + 13) > 0xFFFFFFFEFFFFFFFFLL || !*((void *)v5 + 13)) {
        goto LABEL_4;
      }
    }
    else
    {
      if (v6)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      if (*((void *)v5 + 13) == -1) {
        goto LABEL_4;
      }
    }
    if (!sub_64F1D0(v1)) {
      return 1;
    }
LABEL_4:
    v1 += 12328;
    if (v1 == v2) {
      return 0;
    }
  }
}

uint64_t sub_648D80(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0;
  }
  while (1)
  {
    if (sub_64EFF0(v1))
    {
      uint64_t v3 = sub_46CAAC(v1);
      uint64_t v4 = *(unsigned char **)(v3 + 40);
      int v5 = *(unsigned char **)(v3 + 48);
      if (v4 != v5) {
        break;
      }
    }
LABEL_3:
    v1 += 12328;
    if (v1 == v2) {
      return 0;
    }
  }
  uint64_t v6 = v3;
  while (1)
  {
    uint64_t v7 = *(void *)(v6 + 64);
    uint64_t v8 = *(void *)(v6 + 72);
    if (v7 == v8) {
      return 1;
    }
    uint64_t v9 = v7 + 12;
    do
    {
      BOOL v10 = sub_87EA0(v4);
      char v11 = *v4 == *(unsigned char *)(v9 - 12) || v10;
      if (v11) {
        break;
      }
      BOOL v12 = v9 == v8;
      v9 += 12;
    }
    while (!v12);
    if ((v11 & 1) == 0) {
      return 1;
    }
    v4 += 12;
    if (v4 == v5) {
      goto LABEL_3;
    }
  }
}

uint64_t sub_648E68(uint64_t a1)
{
  return a1 + 7488;
}

std::string *sub_648E74(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 312, a2);
}

void sub_648E80(void *a1, int a2)
{
  uint64_t v4 = (char *)a1[940];
  int v5 = v4;
  unint64_t v6 = a1[941];
  if ((unint64_t)v4 < v6)
  {
    *(_DWORD *)uint64_t v4 = a2;
    uint64_t v7 = (uint64_t)(v4 + 4);
    goto LABEL_22;
  }
  uint64_t v8 = (char *)a1[939];
  uint64_t v9 = (v4 - v8) >> 2;
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 62) {
    sub_2E00();
  }
  uint64_t v11 = v6 - (void)v8;
  if (v11 >> 1 > v10) {
    unint64_t v10 = v11 >> 1;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 >> 62) {
      sub_188D718();
    }
    unint64_t v13 = operator new(4 * v12);
    uint64_t v14 = &v13[4 * v9];
    unint64_t v15 = &v13[4 * v12];
    *uint64_t v14 = a2;
    uint64_t v7 = (uint64_t)(v14 + 1);
    int64_t v16 = v4 - v8;
    if (v4 == v8) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  unint64_t v13 = 0;
  uint64_t v14 = (_DWORD *)(4 * v9);
  unint64_t v15 = 0;
  *(_DWORD *)(4 * v9) = a2;
  uint64_t v7 = 4 * v9 + 4;
  int64_t v16 = v4 - v8;
  if (v4 != v8)
  {
LABEL_14:
    unint64_t v17 = v16 - 4;
    if (v17 < 0x2C) {
      goto LABEL_27;
    }
    if ((unint64_t)(v8 - v13) < 0x20) {
      goto LABEL_27;
    }
    uint64_t v18 = (v17 >> 2) + 1;
    uint64_t v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
    int v5 = &v4[-v19];
    uint64_t v14 = (_DWORD *)((char *)v14 - v19);
    long long v20 = &v13[4 * v9 - 16];
    uint64_t v21 = v4 - 16;
    uint64_t v22 = v18 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      *long long v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 8;
    }
    while (v22);
    if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_27:
      do
      {
        int v24 = *((_DWORD *)v5 - 1);
        v5 -= 4;
        *--uint64_t v14 = v24;
      }
      while (v5 != v8);
    }
  }
LABEL_20:
  a1[939] = v14;
  a1[940] = v7;
  a1[941] = v15;
  if (v8) {
    operator delete(v8);
  }
LABEL_22:
  a1[940] = v7;
}

uint64_t sub_649000(uint64_t a1)
{
  return a1 + 7512;
}

void sub_64900C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 != a1[1])
  {
    uint64_t v3 = *(void *)(v1 + 7472);
    if (v3 != *(void *)(v1 + 7480))
    {
      if (sub_639BE0(v3))
      {
        sub_648E80(a1, 1);
      }
    }
  }
}

uint64_t sub_649074(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1176) = a2;
  return result;
}

uint64_t sub_64907C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1176);
}

uint64_t sub_649084(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1296) = a2;
  return result;
}

uint64_t sub_64908C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1296);
}

uint64_t sub_649094()
{
  return 3;
}

uint64_t sub_64909C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 48) = 3;
  *(void *)(a1 + 56) = 0x8000000080000000;
  *(_DWORD *)(a1 + 64) = 0x7FFFFFFF;
  *(void *)(a1 + 72) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 80) = 0x8000000080000000;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 112) = 1;
  *(_DWORD *)(a1 + 113) = 0;
  *(unsigned char *)(a1 + 117) = 1;
  *(_DWORD *)(a1 + 118) = 0;
  *(_DWORD *)(a1 + 121) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 180) = -1;
  *(unsigned char *)(a1 + 184) = 0;
  sub_5F3B34(a1 + 192);
  sub_5F3B34(a1 + 352);
  sub_5F3B34(a1 + 512);
  sub_5F3B34(a1 + 672);
  sub_5F3B34(a1 + 832);
  *(void *)(a1 + 1008) = 0;
  *(_OWORD *)(a1 + 992) = 0u;
  sub_5F3B34(a1 + 1016);
  *(_DWORD *)(a1 + 1176) = 0;
  *(_DWORD *)(a1 + 1216) = -1;
  *(_DWORD *)(a1 + 1224) = -1;
  *(_DWORD *)(a1 + 1227) = -1;
  *(void *)(a1 + 1231) = 0;
  *(void *)(a1 + 1247) = 0;
  *(void *)(a1 + 1239) = 0;
  *(_WORD *)(a1 + 1255) = 0;
  *(void *)(a1 + 1264) = 0;
  *(void *)(a1 + 1280) = 0;
  *(void *)(a1 + 1272) = 0;
  *(unsigned char *)(a1 + 1288) = 0;
  *(_DWORD *)(a1 + 1296) = 0;
  sub_4F29BC(a1 + 1304);
  sub_59171C(a1 + 2392);
  *(_DWORD *)(a1 + 7224) = 0;
  *(_OWORD *)(a1 + 7192) = 0u;
  *(_OWORD *)(a1 + 7208) = 0u;
  *(_OWORD *)(a1 + 7232) = 0u;
  *(_OWORD *)(a1 + 7248) = 0u;
  *(_OWORD *)(a1 + 7264) = 0u;
  *(_DWORD *)(a1 + 7312) = -1;
  *(_DWORD *)(a1 + 7320) = -1;
  *(_DWORD *)(a1 + 7323) = -1;
  *(void *)(a1 + 7327) = 0;
  *(void *)(a1 + 7343) = 0;
  *(void *)(a1 + 7335) = 0;
  *(_WORD *)(a1 + 7351) = 0;
  *(void *)(a1 + 7360) = 0;
  *(void *)(a1 + 7376) = 0;
  *(void *)(a1 + 7368) = 0;
  *(unsigned char *)(a1 + 7384) = 0;
  *(void *)(a1 + 7552) = 0;
  *(_OWORD *)(a1 + 7536) = 0u;
  *(_OWORD *)(a1 + 7520) = 0u;
  *(_OWORD *)(a1 + 7504) = 0u;
  *(_OWORD *)(a1 + 7488) = 0u;
  *(_OWORD *)(a1 + 7472) = 0u;
  *(_OWORD *)(a1 + 7456) = 0u;
  *(_OWORD *)(a1 + 7440) = 0u;
  *(_OWORD *)(a1 + 7424) = 0u;
  *(_OWORD *)(a1 + 7408) = 0u;
  *(_OWORD *)(a1 + 7392) = 0u;
  *(_DWORD *)(a1 + 180) = sub_45FE24(a2);
  uint64_t v4 = (void *)nullsub_1(a2);
  uint64_t v5 = v4[1] - *v4;
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = v5 / 1056;
    do
    {
      uint64_t v8 = (void *)nullsub_1(a2);
      sub_64949C(a1, *v8 + v6);
      v6 += 1056;
      --v7;
    }
    while (v7);
  }
  return a1;
}

void sub_6492F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v21 = (char *)(v14 + 7255);
  sub_50E790((void **)(v14 + 7536));
  uint64_t v22 = *(void **)(v14 + 7512);
  if (v22)
  {
    *(void *)(v14 + 7520) = v22;
    operator delete(v22);
    if ((*(char *)(v14 + 7511) & 0x80000000) == 0)
    {
LABEL_3:
      long long v23 = (void **)(v14 + 7392);
      int v24 = (void **)(v14 + 7416);
      if ((*(char *)(v14 + 7487) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*(char *)(v14 + 7511) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v14 + 7488));
  long long v23 = (void **)(v14 + 7392);
  int v24 = (void **)(v14 + 7416);
  if ((*(char *)(v14 + 7487) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v14 + 7463) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_13:
  operator delete(*(void **)(v14 + 7464));
  if ((*(char *)(v14 + 7463) & 0x80000000) == 0)
  {
LABEL_6:
    sub_28F14C(v24);
    sub_574598(v23);
    sub_4D9814(v15);
    if (*(char *)(v14 + 7279) < 0)
    {
      operator delete(*(void **)(v14 + 7256));
      if ((*v21 & 0x80000000) == 0)
      {
LABEL_8:
        long long v25 = *v16;
        if (!*v16) {
          goto LABEL_10;
        }
        goto LABEL_9;
      }
    }
    else if ((*v21 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(*(void **)(v14 + 7232));
    long long v25 = *v16;
    if (!*v16)
    {
LABEL_10:
      sub_575104(v20);
      sub_4F2BD0(v19);
      sub_4D9814(v18);
      sub_4D4B58(v17);
      sub_1A668((void **)(v14 + 992));
      sub_4D4B58(a10);
      sub_4D4B58(a11);
      sub_4D4B58(a12);
      sub_4D4B58(a13);
      sub_4D4B58(a14);
      sub_5915D8((void **)(v14 + 152));
      sub_591648((void **)(v14 + 24));
      sub_5916B4((void **)v14);
      _Unwind_Resume(a1);
    }
LABEL_9:
    *(void *)(v14 + 7200) = v25;
    operator delete(v25);
    goto LABEL_10;
  }
LABEL_5:
  operator delete(*(void **)(v14 + 7440));
  goto LABEL_6;
}

char *sub_64949C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 8);
  if (*(void *)a1 == v3)
  {
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 512);
    *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 516);
    *(void *)(a1 + 96) = *(void *)(a2 + 808);
    *(unsigned char *)(a1 + 91) |= *(unsigned char *)(a2 + 803);
    *(unsigned char *)(a1 + 93) |= *(unsigned char *)(a2 + 805);
    *(unsigned char *)(a1 + 95) |= *(unsigned char *)(a2 + 807);
  }
  else
  {
    *(_DWORD *)(a1 + 84) += *(_DWORD *)(a2 + 516);
  }
  *(unsigned char *)(a1 + 94) |= *(unsigned char *)(a2 + 806);
  *(unsigned char *)(a1 + 88) |= *(unsigned char *)(a2 + 800);
  *(unsigned char *)(a1 + 89) |= *(unsigned char *)(a2 + 801);
  *(unsigned char *)(a1 + 90) |= *(unsigned char *)(a2 + 802);
  *(unsigned char *)(a1 + 112) &= *(unsigned char *)(a2 + 824);
  *(unsigned char *)(a1 + 115) |= *(unsigned char *)(a2 + 827);
  *(unsigned char *)(a1 + 114) |= *(unsigned char *)(a2 + 826);
  *(unsigned char *)(a1 + 116) |= *(unsigned char *)(a2 + 828);
  *(unsigned char *)(a1 + 117) = *(unsigned char *)(a2 + 829);
  *(unsigned char *)(a1 + 118) = *(unsigned char *)(a2 + 830);
  *(unsigned char *)(a1 + 113) = *(unsigned char *)(a2 + 825);
  *(unsigned char *)(a1 + 124) |= *(unsigned char *)(a2 + 836);
  *(int32x4_t *)(a1 + 128) = vaddq_s32(*(int32x4_t *)(a1 + 128), *(int32x4_t *)(a2 + 840));
  int32x2_t v4 = *(int32x2_t *)(a1 + 144);
  uint8x8_t v5 = (uint8x8_t)vadd_s32(v4, *(int32x2_t *)(a2 + 856));
  *(uint8x8_t *)(a1 + 144) = v5;
  *(unsigned char *)(a1 + 123) |= *(unsigned char *)(a2 + 835);
  v5.i32[0] = *(_DWORD *)(a2 + 831);
  int16x8_t v6 = (int16x8_t)vmovl_u8(v5);
  v4.i32[0] = *(_DWORD *)(a1 + 119);
  *(int8x8_t *)v6.i8 = vorr_s8((int8x8_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v4), *(int8x8_t *)v6.i8);
  *(_DWORD *)(a1 + 119) = vmovn_s16(v6).u32[0];
  if (v3 >= *(void *)(a1 + 16))
  {
    uint64_t result = sub_64CF24((uint64_t *)a1, a2);
    *(void *)(a1 + 8) = result;
  }
  else
  {
    sub_64E288(v3, a2, 0);
    uint64_t result = (char *)(v3 + 12328);
    *(void *)(a1 + 8) = v3 + 12328;
    *(void *)(a1 + 8) = v3 + 12328;
  }
  return result;
}

void sub_64965C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_649668(uint64_t *a1@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *a1;
  uint64_t v26 = a1[1];
  if (*a1 != v26)
  {
    int32x2_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v3 + 1064);
      uint64_t v6 = *(void *)(v3 + 1072);
      while (v5 != v6)
      {
        unint64_t v8 = (unint64_t)a2[2];
        if ((unint64_t)v4 < v8)
        {
          *(void *)int32x2_t v4 = v5;
          uint64_t v7 = (uint64_t)(v4 + 8);
          goto LABEL_6;
        }
        uint64_t v9 = *a2;
        uint64_t v10 = v4 - *a2;
        uint64_t v11 = v10 >> 3;
        unint64_t v12 = (v10 >> 3) + 1;
        if (v12 >> 61) {
          sub_2E00();
        }
        uint64_t v13 = v8 - (void)v9;
        if (v13 >> 2 > v12) {
          unint64_t v12 = v13 >> 2;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          if (v14 >> 61) {
            sub_188D718();
          }
          uint64_t v15 = operator new(8 * v14);
          int64_t v16 = &v15[8 * v11];
          *(void *)int64_t v16 = v5;
          uint64_t v7 = (uint64_t)(v16 + 8);
          if (v4 != v9)
          {
LABEL_21:
            unint64_t v17 = v4 - 8 - v9;
            if (v17 < 0x168)
            {
              uint64_t v18 = v4;
              goto LABEL_23;
            }
            if (&v15[v10 - 8 - (v17 & 0xFFFFFFFFFFFFFFF8)] > &v15[v10 - 8])
            {
              uint64_t v18 = v4;
              goto LABEL_23;
            }
            if (&v4[-(v17 & 0xFFFFFFFFFFFFFFF8) - 8] > v4 - 8)
            {
              uint64_t v18 = v4;
              goto LABEL_23;
            }
            if ((unint64_t)(v4 - v15 - v10) < 0x20)
            {
              uint64_t v18 = v4;
              goto LABEL_23;
            }
            uint64_t v20 = (v17 >> 3) + 1;
            uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v18 = &v4[-v21];
            v16 -= v21;
            uint64_t v22 = &v15[8 * v11 - 16];
            long long v23 = v4 - 16;
            uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v25 = *(_OWORD *)v23;
              *(v22 - 1) = *((_OWORD *)v23 - 1);
              *uint64_t v22 = v25;
              v22 -= 2;
              v23 -= 32;
              v24 -= 4;
            }
            while (v24);
            if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_23:
                uint64_t v19 = *((void *)v18 - 1);
                v18 -= 8;
                *((void *)v16 - 1) = v19;
                v16 -= 8;
              }
              while (v18 != v9);
            }
            int32x2_t v4 = *a2;
            *a2 = v16;
            a2[1] = (char *)v7;
            a2[2] = &v15[8 * v14];
            if (!v4) {
              goto LABEL_6;
            }
LABEL_25:
            operator delete(v4);
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v15 = 0;
          int64_t v16 = (char *)(8 * v11);
          *(void *)(8 * v11) = v5;
          uint64_t v7 = 8 * v11 + 8;
          if (v4 != v9) {
            goto LABEL_21;
          }
        }
        *a2 = v16;
        a2[1] = (char *)v7;
        a2[2] = &v15[8 * v14];
        if (v4) {
          goto LABEL_25;
        }
LABEL_6:
        a2[1] = (char *)v7;
        v5 += 2400;
        int32x2_t v4 = (char *)v7;
      }
      v3 += 12328;
    }
    while (v3 != v26);
  }
}

void sub_649898(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_6498C0(uint64_t *a1)
{
  sub_649668(a1, &v4);
  uint64_t v1 = v4;
  uint64_t v2 = v5;
  if (v4)
  {
    uint64_t v5 = v4;
    operator delete(v4);
  }
  return (v2 - v1) >> 3;
}

uint64_t sub_649908(unsigned int **a1)
{
  return sub_47EBC8(*a1, a1[1], 1, 0);
}

BOOL sub_64991C(unsigned int **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 1;
  }
  do
  {
    int v3 = sub_46CF0C(v1, 1);
    BOOL v5 = v3 == 0x7FFFFFFF;
    BOOL result = v3 != 0x7FFFFFFF;
    v1 += 3082;
    BOOL v5 = v5 || v1 == v2;
  }
  while (!v5);
  return result;
}

uint64_t sub_649988(unsigned int **a1)
{
  return sub_47EBC8(*a1, a1[1], 2, 0);
}

BOOL sub_64999C(unsigned int **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 1;
  }
  do
  {
    int v3 = sub_46CF0C(v1, 2);
    BOOL v5 = v3 == 0x7FFFFFFF;
    BOOL result = v3 != 0x7FFFFFFF;
    v1 += 3082;
    BOOL v5 = v5 || v1 == v2;
  }
  while (!v5);
  return result;
}

uint64_t sub_649A08(unsigned int **a1)
{
  return sub_47EBC8(*a1, a1[1], 4, 0);
}

BOOL sub_649A1C(unsigned int **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 1;
  }
  do
  {
    int v3 = sub_46CF0C(v1, 4);
    BOOL v5 = v3 == 0x7FFFFFFF;
    BOOL result = v3 != 0x7FFFFFFF;
    v1 += 3082;
    BOOL v5 = v5 || v1 == v2;
  }
  while (!v5);
  return result;
}

uint64_t sub_649A88(unsigned int **a1)
{
  return sub_47EBC8(*a1, a1[1], 5, 0);
}

BOOL sub_649A9C(unsigned int **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 1;
  }
  do
  {
    int v3 = sub_46CF0C(v1, 5);
    BOOL v5 = v3 == 0x7FFFFFFF;
    BOOL result = v3 != 0x7FFFFFFF;
    v1 += 3082;
    BOOL v5 = v5 || v1 == v2;
  }
  while (!v5);
  return result;
}

uint64_t sub_649B08@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = 0xFF55E3181697D6CDLL * ((uint64_t)(a1[1] - *a1) >> 3) - 1;
  uint64_t result = sub_35E640();
  if (result)
  {
    uint64_t v6 = (_DWORD *)(*a1 + 12328 * v4);
    return (uint64_t)sub_64EDB4(v6, a2);
  }
  else
  {
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(_DWORD *)a2 = 0x7FFFFFFF;
    *(void *)(a2 + 4) = 0x7FFFFFFF7FFFFFFFLL;
  }
  return result;
}

void sub_649BAC(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 != v5)
  {
    while ((sub_35E640() & 1) != 0)
    {
      v4 += 12328;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    goto LABEL_7;
  }
LABEL_4:
  if (!*((unsigned char *)a1 + 112))
  {
LABEL_7:
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(_DWORD *)a2 = 0x7FFFFFFF;
    *(void *)(a2 + 4) = 0x7FFFFFFF7FFFFFFFLL;
    return;
  }
  unint64_t v6 = 0xFF55E3181697D6CDLL * ((a1[1] - *a1) >> 3) - 1;
  if (sub_35E640())
  {
    sub_64EDB4((_DWORD *)(*a1 + 12328 * v6), (uint64_t)&v34);
  }
  else
  {
    int v36 = 0;
    uint64_t v37 = 0;
    int v34 = 0x7FFFFFFF;
    uint64_t v35 = 0x7FFFFFFF7FFFFFFFLL;
  }
  sub_649E88((char *)a1, (uint64_t)&v29);
  sub_64A0A8((char *)a1, (uint64_t)&v24);
  sub_64BFF8((uint64_t)&v14, &v29);
  sub_64BFF8((uint64_t)&v9, &v24);
  sub_6476DC(&v14, &v9, (uint64_t)&v19);
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
  if (v15)
  {
    int64_t v16 = v15;
    operator delete(v15);
  }
  int v7 = *v19;
  uint64_t v8 = sub_52060((uint64_t)&v34);
  sub_3FB048(a2, v7, v8);
  if (v22)
  {
    long long v23 = v22;
    operator delete(v22);
  }
  if (v20)
  {
    uint64_t v21 = v20;
    operator delete(v20);
  }
  if (v27)
  {
    char v28 = v27;
    operator delete(v27);
  }
  if (v25)
  {
    uint64_t v26 = v25;
    operator delete(v25);
  }
  if (v32)
  {
    uint64_t v33 = v32;
    operator delete(v32);
  }
  if (v30)
  {
    int v31 = v30;
    operator delete(v30);
  }
}

void sub_649DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  sub_2FC938(&a9);
  sub_2FC938(&a17);
  sub_2FC938(&a33);
  sub_2FC938((void *)(v33 - 144));
  _Unwind_Resume(a1);
}

uint64_t sub_649E28(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 1;
  }
  do
  {
    uint64_t result = sub_35E640();
    if (!result) {
      break;
    }
    v1 += 12328;
  }
  while (v1 != v2);
  return result;
}

char *sub_649E88@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = 0;
  long long v22 = 0uLL;
  uint64_t v4 = *(void *)result;
  uint64_t v3 = *((void *)result + 1);
  if (v3 == *(void *)result)
  {
    uint64_t v13 = 0;
    long long v11 = 0uLL;
  }
  else
  {
    unint64_t v5 = 0xFF55E3181697D6CDLL * ((v3 - *(void *)result) >> 3);
    if (v5 >> 61) {
      sub_2E00();
    }
    unint64_t v6 = result;
    int v7 = operator new(0xFAAF18C0B4BEB668 * ((v3 - *(void *)result) >> 3));
    uint64_t v21 = v7;
    *(void *)&long long v22 = v7;
    *((void *)&v22 + 1) = &v7[v5];
    do
    {
      *(void *)&long long v19 = *(void *)(v4 + 1160);
      uint64_t result = sub_64C10C((unint64_t *)&v21, v7, &v19);
      int v7 = result + 8;
      v4 += 12328;
    }
    while (v4 != v3);
    uint64_t v10 = v6;
    uint64_t v8 = *(void *)v6;
    uint64_t v9 = *((void *)v10 + 1);
    uint64_t v20 = 0;
    long long v11 = 0uLL;
    long long v19 = 0u;
    if (v9 == v8)
    {
      uint64_t v13 = 0;
    }
    else
    {
      if ((0xFF55E3181697D6CDLL * ((v9 - v8) >> 3)) >> 61) {
        sub_2E00();
      }
      unint64_t v12 = operator new(0xFAAF18C0B4BEB668 * ((v9 - v8) >> 3));
      *(void *)&long long v19 = v12;
      *((void *)&v19 + 1) = v12;
      uint64_t v20 = &v12[0xFF55E3181697D6CDLL * ((v9 - v8) >> 3)];
      do
      {
        uint64_t v23 = *(void *)(v8 + 1168);
        uint64_t result = sub_64C10C((unint64_t *)&v19, v12, &v23);
        unint64_t v12 = result + 8;
        v8 += 12328;
      }
      while (v8 != v9);
      long long v11 = v19;
      uint64_t v13 = v20;
    }
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  unint64_t v14 = (unint64_t)v21;
  *(void *)(a2 + 16) = v21;
  uint64_t v15 = v22;
  *(_OWORD *)(a2 + 24) = v22;
  uint64_t v21 = 0;
  long long v22 = 0uLL;
  *(_OWORD *)(a2 + 40) = v11;
  *(void *)(a2 + 56) = v13;
  uint64_t v20 = 0;
  long long v19 = 0uLL;
  if (v14 != v15)
  {
    uint64_t v16 = (uint64_t)(v15 - v14) >> 3;
    uint64_t v17 = v16 - 1;
    if (v16 == 1)
    {
      uint64_t v18 = 0;
    }
    else
    {
      uint64_t v18 = 0;
      while (*(void *)(v14 + 8 * v18) == *(void *)(v11 + 8 * v18))
      {
        *(void *)(a2 + 8) = ++v18;
        if (v17 == v18)
        {
          uint64_t v18 = v17;
          break;
        }
      }
    }
    *(void *)a2 = *(void *)(v14 + 8 * v18);
  }
  return result;
}

void sub_64A06C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

char *sub_64A0A8@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  long long v19 = 0;
  long long v20 = 0uLL;
  uint64_t v4 = *(void *)result;
  uint64_t v3 = *((void *)result + 1);
  uint64_t v5 = v3 - *(void *)result;
  if (v3 == *(void *)result)
  {
    long long v12 = 0uLL;
  }
  else
  {
    unint64_t v6 = 0xFF55E3181697D6CDLL * (v5 >> 3);
    if (v6 >> 61) {
      sub_2E00();
    }
    int v7 = result;
    uint64_t v8 = operator new(0xFAAF18C0B4BEB668 * (v5 >> 3));
    long long v19 = v8;
    *(void *)&long long v20 = v8;
    *((void *)&v20 + 1) = &v8[v6];
    do
    {
      *(void *)uint64_t v18 = *(void *)(v4 + 1160);
      uint64_t result = sub_64C10C((unint64_t *)&v19, v8, v18);
      uint64_t v8 = result + 8;
      v4 += 12328;
    }
    while (v4 != v3);
    long long v11 = v7;
    uint64_t v9 = *(void *)v7;
    uint64_t v10 = *((void *)v11 + 1);
    long long v12 = 0uLL;
    memset(v18, 0, sizeof(v18));
    uint64_t v5 = v10 - v9;
    if (v10 != v9)
    {
      unint64_t v13 = 0xFF55E3181697D6CDLL * (v5 >> 3);
      if (v13 >> 61) {
        sub_2E00();
      }
      unint64_t v14 = operator new(0xFAAF18C0B4BEB668 * (v5 >> 3));
      *(void *)uint64_t v18 = v14;
      *(void *)&char v18[8] = v14;
      *(void *)&v18[16] = &v14[v13];
      do
      {
        uint64_t v21 = *(void *)(v9 + 1168);
        uint64_t result = sub_64C10C((unint64_t *)v18, v14, &v21);
        unint64_t v14 = result + 8;
        v9 += 12328;
      }
      while (v9 != v10);
      uint64_t v5 = *(void *)v18;
      long long v12 = *(_OWORD *)&v18[8];
    }
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  unint64_t v15 = (unint64_t)v19;
  *(void *)(a2 + 16) = v19;
  uint64_t v16 = v20;
  *(_OWORD *)(a2 + 24) = v20;
  long long v19 = 0;
  long long v20 = 0uLL;
  *(void *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 48) = v12;
  memset(v18, 0, sizeof(v18));
  if (v15 != v16)
  {
    uint64_t v17 = (((uint64_t)v12 - v5) >> 3) - 1;
    *(void *)a2 = *(void *)(v5 + 8 * v17);
    *(void *)(a2 + 8) = v17;
  }
  return result;
}

void sub_64A248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

char *sub_64A284(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 160);
  if (v4 >= *(void *)(a1 + 168))
  {
    uint64_t result = sub_64C47C((char **)(a1 + 152), a2);
    *(void *)(a1 + 160) = result;
  }
  else
  {
    *(_DWORD *)unint64_t v4 = *(_DWORD *)a2;
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
    int v5 = *(unsigned __int8 *)(a2 + 1136);
    *(unsigned char *)(v4 + 1136) = v5;
    if (v5) {
      sub_4BE9F4(v4 + 16, a2 + 16);
    }
    long long v6 = *(_OWORD *)(a2 + 1144);
    *(_DWORD *)(v4 + 1159) = *(_DWORD *)(a2 + 1159);
    *(_OWORD *)(v4 + 1144) = v6;
    uint64_t result = (char *)(v4 + 1168);
    *(void *)(a1 + 160) = v4 + 1168;
  }
  return result;
}

char *sub_64A328(uint64_t *a1, uint64_t a2, int a3)
{
  int v5 = (char **)(a1 + 24);
  sub_5F657C(a1 + 24, a2, a3);
  unint64_t v7 = a1[25];
  if (v7 >= a1[26])
  {
    uint64_t v9 = sub_1D740(v5, a2);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200((unsigned char *)a1[25], *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v8 = *(_OWORD *)a2;
      *(void *)(v7 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v7 = v8;
    }
    uint64_t v9 = (char *)(v7 + 24);
    a1[25] = v7 + 24;
  }
  a1[25] = (uint64_t)v9;
  sub_5F657C((uint64_t *)(*a1 + 9312), a2, a3);
  uint64_t v10 = *a1;
  unint64_t v11 = *(void *)(*a1 + 9320);
  if (v11 >= *(void *)(v10 + 9328))
  {
    uint64_t result = sub_1D740((char **)(v10 + 9312), a2);
    *(void *)(v10 + 9320) = result;
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200((unsigned char *)v11, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v12 = *(_OWORD *)a2;
      *(void *)(v11 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v11 = v12;
    }
    uint64_t result = (char *)(v11 + 24);
    *(void *)(v10 + 9320) = v11 + 24;
    *(void *)(v10 + 9320) = v11 + 24;
  }
  return result;
}

void sub_64A448(_Unwind_Exception *a1)
{
  *(void *)(v2 + 9320) = v1;
  _Unwind_Resume(a1);
}

void sub_64A450(_Unwind_Exception *a1)
{
  *(void *)(v1 + 200) = v2;
  _Unwind_Resume(a1);
}

uint64_t *sub_64A458@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  if (*result != v3)
  {
    do
    {
      uint64_t result = (uint64_t *)sub_64C690(a2, a2[1], *(void *)(v2 + 11584), *(void *)(v2 + 11592), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(v2 + 11592) - *(void *)(v2 + 11584)) >> 3));
      v2 += 12328;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_64A4DC(_Unwind_Exception *a1)
{
  sub_4B1DB4(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_64A4F0@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  if (*result != v3)
  {
    do
    {
      uint64_t result = (uint64_t *)sub_64C690(a2, a2[1], *(void *)(v2 + 11608), *(void *)(v2 + 11616), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(v2 + 11616) - *(void *)(v2 + 11608)) >> 3));
      v2 += 12328;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_64A574(_Unwind_Exception *a1)
{
  sub_4B1DB4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_64A588(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[925];
  if (v3 >= a1[926])
  {
    uint64_t result = sub_576DC8(a1 + 924, a2);
    a1[925] = result;
  }
  else
  {
    sub_576F5C(a1[925], a2);
    uint64_t result = v3 + 1056;
    a1[925] = v3 + 1056;
    a1[925] = v3 + 1056;
  }
  return result;
}

void sub_64A5E8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 7400) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_64A5F0(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[4];
  if (v4 >= a1[5])
  {
    a1[4] = sub_64CC70(a1 + 3, a2);
    int v5 = (uint64_t *)*a1;
    unint64_t v6 = *(void *)(*a1 + 1120);
    if (v6 >= v5[141]) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_598A38(a1[4], a2);
    a1[4] = v4 + 176;
    a1[4] = v4 + 176;
    int v5 = (uint64_t *)*a1;
    unint64_t v6 = *(void *)(*a1 + 1120);
    if (v6 >= v5[141])
    {
LABEL_3:
      uint64_t result = sub_64CC70(v5 + 139, a2);
      v5[140] = result;
      return result;
    }
  }
  sub_598A38(v6, a2);
  uint64_t result = v6 + 176;
  v5[140] = v6 + 176;
  v5[140] = v6 + 176;
  return result;
}

void sub_64A6B0(_Unwind_Exception *a1)
{
  *(void *)(v2 + 1120) = v1;
  _Unwind_Resume(a1);
}

void sub_64A6B8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_64A6C0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 != v2)
  {
    uint64_t v3 = *(void *)(v1 + 1064);
    uint64_t v4 = *(void *)(v1 + 1072);
    if (v3 != v4) {
      goto LABEL_5;
    }
LABEL_3:
    while (1)
    {
      v1 += 12328;
      if (v1 == v2) {
        break;
      }
      uint64_t v3 = *(void *)(v1 + 1064);
      uint64_t v4 = *(void *)(v1 + 1072);
      if (v3 != v4)
      {
LABEL_5:
        while (*(unsigned char *)(v3 + 328) != 2)
        {
          v3 += 2400;
          if (v3 == v4) {
            goto LABEL_3;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_64A728()
{
  return 2;
}

uint64_t sub_64A730(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 48) = 2;
  *(void *)(a1 + 56) = 0x8000000080000000;
  *(_DWORD *)(a1 + 64) = 0x7FFFFFFF;
  *(void *)(a1 + 72) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 80) = 0x8000000080000000;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 112) = 1;
  *(_DWORD *)(a1 + 113) = 0;
  *(unsigned char *)(a1 + 117) = 1;
  *(_DWORD *)(a1 + 118) = 0;
  *(_DWORD *)(a1 + 121) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 180) = -1;
  *(unsigned char *)(a1 + 184) = 0;
  sub_5F3B34(a1 + 192);
  sub_5F3B34(a1 + 352);
  sub_5F3B34(a1 + 512);
  sub_5F3B34(a1 + 672);
  sub_5F3B34(a1 + 832);
  *(void *)(a1 + 1008) = 0;
  *(_OWORD *)(a1 + 992) = 0u;
  sub_5F3B34(a1 + 1016);
  *(_DWORD *)(a1 + 1176) = 0;
  *(_DWORD *)(a1 + 1216) = -1;
  *(_DWORD *)(a1 + 1224) = -1;
  *(_DWORD *)(a1 + 1227) = -1;
  *(void *)(a1 + 1231) = 0;
  *(void *)(a1 + 1247) = 0;
  *(void *)(a1 + 1239) = 0;
  *(_WORD *)(a1 + 1255) = 0;
  *(void *)(a1 + 1264) = 0;
  *(void *)(a1 + 1280) = 0;
  *(void *)(a1 + 1272) = 0;
  *(unsigned char *)(a1 + 1288) = 0;
  *(_DWORD *)(a1 + 1296) = 0;
  sub_4F29BC(a1 + 1304);
  sub_59171C(a1 + 2392);
  *(_DWORD *)(a1 + 7224) = 0;
  *(_OWORD *)(a1 + 7192) = 0u;
  *(_OWORD *)(a1 + 7208) = 0u;
  *(_OWORD *)(a1 + 7232) = 0u;
  *(_OWORD *)(a1 + 7248) = 0u;
  *(_OWORD *)(a1 + 7264) = 0u;
  *(_DWORD *)(a1 + 7312) = -1;
  *(_DWORD *)(a1 + 7320) = -1;
  *(_DWORD *)(a1 + 7323) = -1;
  *(void *)(a1 + 7327) = 0;
  *(void *)(a1 + 7343) = 0;
  *(void *)(a1 + 7335) = 0;
  *(_WORD *)(a1 + 7351) = 0;
  *(void *)(a1 + 7360) = 0;
  *(void *)(a1 + 7376) = 0;
  *(void *)(a1 + 7368) = 0;
  *(unsigned char *)(a1 + 7384) = 0;
  *(void *)(a1 + 7552) = 0;
  *(_OWORD *)(a1 + 7536) = 0u;
  *(_OWORD *)(a1 + 7520) = 0u;
  *(_OWORD *)(a1 + 7504) = 0u;
  *(_OWORD *)(a1 + 7488) = 0u;
  *(_OWORD *)(a1 + 7472) = 0u;
  *(_OWORD *)(a1 + 7456) = 0u;
  *(_OWORD *)(a1 + 7440) = 0u;
  *(_OWORD *)(a1 + 7424) = 0u;
  *(_OWORD *)(a1 + 7408) = 0u;
  *(_OWORD *)(a1 + 7392) = 0u;
  *(_DWORD *)(a1 + 180) = sub_45FE24(a2);
  uint64_t v4 = (void *)nullsub_1(a2);
  uint64_t v5 = v4[1] - *v4;
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = v5 / 1056;
    do
    {
      long long v8 = (void *)nullsub_1(a2);
      sub_64AB30(a1, *v8 + v6);
      v6 += 1056;
      --v7;
    }
    while (v7);
  }
  return a1;
}

void sub_64A984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v21 = (char *)(v14 + 7255);
  sub_50E790((void **)(v14 + 7536));
  long long v22 = *(void **)(v14 + 7512);
  if (v22)
  {
    *(void *)(v14 + 7520) = v22;
    operator delete(v22);
    if ((*(char *)(v14 + 7511) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v23 = (void **)(v14 + 7392);
      long long v24 = (void **)(v14 + 7416);
      if ((*(char *)(v14 + 7487) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*(char *)(v14 + 7511) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v14 + 7488));
  uint64_t v23 = (void **)(v14 + 7392);
  long long v24 = (void **)(v14 + 7416);
  if ((*(char *)(v14 + 7487) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v14 + 7463) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_13:
  operator delete(*(void **)(v14 + 7464));
  if ((*(char *)(v14 + 7463) & 0x80000000) == 0)
  {
LABEL_6:
    sub_28F14C(v24);
    sub_574598(v23);
    sub_4D9814(v15);
    if (*(char *)(v14 + 7279) < 0)
    {
      operator delete(*(void **)(v14 + 7256));
      if ((*v21 & 0x80000000) == 0)
      {
LABEL_8:
        long long v25 = *v16;
        if (!*v16) {
          goto LABEL_10;
        }
        goto LABEL_9;
      }
    }
    else if ((*v21 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(*(void **)(v14 + 7232));
    long long v25 = *v16;
    if (!*v16)
    {
LABEL_10:
      sub_575104(v20);
      sub_4F2BD0(v19);
      sub_4D9814(v18);
      sub_4D4B58(v17);
      sub_1A668((void **)(v14 + 992));
      sub_4D4B58(a10);
      sub_4D4B58(a11);
      sub_4D4B58(a12);
      sub_4D4B58(a13);
      sub_4D4B58(a14);
      sub_5915D8((void **)(v14 + 152));
      sub_591648((void **)(v14 + 24));
      sub_5916B4((void **)v14);
      _Unwind_Resume(a1);
    }
LABEL_9:
    *(void *)(v14 + 7200) = v25;
    operator delete(v25);
    goto LABEL_10;
  }
LABEL_5:
  operator delete(*(void **)(v14 + 7440));
  goto LABEL_6;
}

char *sub_64AB30(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 8);
  if (*(void *)a1 == v3)
  {
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 512);
    *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 516);
    *(void *)(a1 + 96) = *(void *)(a2 + 808);
    *(unsigned char *)(a1 + 91) |= *(unsigned char *)(a2 + 803);
    *(unsigned char *)(a1 + 93) |= *(unsigned char *)(a2 + 805);
    *(unsigned char *)(a1 + 95) |= *(unsigned char *)(a2 + 807);
  }
  else
  {
    *(_DWORD *)(a1 + 84) += *(_DWORD *)(a2 + 516);
  }
  *(unsigned char *)(a1 + 94) |= *(unsigned char *)(a2 + 806);
  *(unsigned char *)(a1 + 88) |= *(unsigned char *)(a2 + 800);
  *(unsigned char *)(a1 + 89) |= *(unsigned char *)(a2 + 801);
  *(unsigned char *)(a1 + 90) |= *(unsigned char *)(a2 + 802);
  *(unsigned char *)(a1 + 112) &= *(unsigned char *)(a2 + 824);
  *(unsigned char *)(a1 + 115) |= *(unsigned char *)(a2 + 827);
  *(unsigned char *)(a1 + 114) |= *(unsigned char *)(a2 + 826);
  *(unsigned char *)(a1 + 116) |= *(unsigned char *)(a2 + 828);
  *(unsigned char *)(a1 + 117) = *(unsigned char *)(a2 + 829);
  *(unsigned char *)(a1 + 118) = *(unsigned char *)(a2 + 830);
  *(unsigned char *)(a1 + 113) = *(unsigned char *)(a2 + 825);
  *(unsigned char *)(a1 + 124) |= *(unsigned char *)(a2 + 836);
  *(int32x4_t *)(a1 + 128) = vaddq_s32(*(int32x4_t *)(a1 + 128), *(int32x4_t *)(a2 + 840));
  int32x2_t v4 = *(int32x2_t *)(a1 + 144);
  uint8x8_t v5 = (uint8x8_t)vadd_s32(v4, *(int32x2_t *)(a2 + 856));
  *(uint8x8_t *)(a1 + 144) = v5;
  *(unsigned char *)(a1 + 123) |= *(unsigned char *)(a2 + 835);
  v5.i32[0] = *(_DWORD *)(a2 + 831);
  int16x8_t v6 = (int16x8_t)vmovl_u8(v5);
  v4.i32[0] = *(_DWORD *)(a1 + 119);
  *(int8x8_t *)v6.i8 = vorr_s8((int8x8_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v4), *(int8x8_t *)v6.i8);
  *(_DWORD *)(a1 + 119) = vmovn_s16(v6).u32[0];
  if (v3 >= *(void *)(a1 + 16))
  {
    uint64_t result = sub_64D0D0((uint64_t *)a1, a2);
    *(void *)(a1 + 8) = result;
  }
  else
  {
    sub_65221C(v3, a2, 0);
    uint64_t result = (char *)(v3 + 12328);
    *(void *)(a1 + 8) = v3 + 12328;
    *(void *)(a1 + 8) = v3 + 12328;
  }
  return result;
}

void sub_64ACF0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_64ACFC(uint64_t *a1@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *a1;
  uint64_t v26 = a1[1];
  if (*a1 != v26)
  {
    int32x2_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v3 + 1064);
      uint64_t v6 = *(void *)(v3 + 1072);
      while (v5 != v6)
      {
        unint64_t v8 = (unint64_t)a2[2];
        if ((unint64_t)v4 < v8)
        {
          *(void *)int32x2_t v4 = v5;
          uint64_t v7 = (uint64_t)(v4 + 8);
          goto LABEL_6;
        }
        uint64_t v9 = *a2;
        uint64_t v10 = v4 - *a2;
        uint64_t v11 = v10 >> 3;
        unint64_t v12 = (v10 >> 3) + 1;
        if (v12 >> 61) {
          sub_2E00();
        }
        uint64_t v13 = v8 - (void)v9;
        if (v13 >> 2 > v12) {
          unint64_t v12 = v13 >> 2;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          if (v14 >> 61) {
            sub_188D718();
          }
          uint64_t v15 = operator new(8 * v14);
          uint64_t v16 = &v15[8 * v11];
          *(void *)uint64_t v16 = v5;
          uint64_t v7 = (uint64_t)(v16 + 8);
          if (v4 != v9)
          {
LABEL_21:
            unint64_t v17 = v4 - 8 - v9;
            if (v17 < 0x168)
            {
              uint64_t v18 = v4;
              goto LABEL_23;
            }
            if (&v15[v10 - 8 - (v17 & 0xFFFFFFFFFFFFFFF8)] > &v15[v10 - 8])
            {
              uint64_t v18 = v4;
              goto LABEL_23;
            }
            if (&v4[-(v17 & 0xFFFFFFFFFFFFFFF8) - 8] > v4 - 8)
            {
              uint64_t v18 = v4;
              goto LABEL_23;
            }
            if ((unint64_t)(v4 - v15 - v10) < 0x20)
            {
              uint64_t v18 = v4;
              goto LABEL_23;
            }
            uint64_t v20 = (v17 >> 3) + 1;
            uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v18 = &v4[-v21];
            v16 -= v21;
            long long v22 = &v15[8 * v11 - 16];
            uint64_t v23 = v4 - 16;
            uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v25 = *(_OWORD *)v23;
              *(v22 - 1) = *((_OWORD *)v23 - 1);
              *long long v22 = v25;
              v22 -= 2;
              v23 -= 32;
              v24 -= 4;
            }
            while (v24);
            if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_23:
                uint64_t v19 = *((void *)v18 - 1);
                v18 -= 8;
                *((void *)v16 - 1) = v19;
                v16 -= 8;
              }
              while (v18 != v9);
            }
            int32x2_t v4 = *a2;
            *a2 = v16;
            a2[1] = (char *)v7;
            a2[2] = &v15[8 * v14];
            if (!v4) {
              goto LABEL_6;
            }
LABEL_25:
            operator delete(v4);
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v15 = 0;
          uint64_t v16 = (char *)(8 * v11);
          *(void *)(8 * v11) = v5;
          uint64_t v7 = 8 * v11 + 8;
          if (v4 != v9) {
            goto LABEL_21;
          }
        }
        *a2 = v16;
        a2[1] = (char *)v7;
        a2[2] = &v15[8 * v14];
        if (v4) {
          goto LABEL_25;
        }
LABEL_6:
        a2[1] = (char *)v7;
        v5 += 2400;
        int32x2_t v4 = (char *)v7;
      }
      v3 += 12328;
    }
    while (v3 != v26);
  }
}

void sub_64AF2C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_64AF54(uint64_t *a1)
{
  sub_64ACFC(a1, &v4);
  uint64_t v1 = v4;
  uint64_t v2 = v5;
  if (v4)
  {
    uint64_t v5 = v4;
    operator delete(v4);
  }
  return (v2 - v1) >> 3;
}

uint64_t sub_64AF9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 84) = a2;
  return result;
}

uint64_t sub_64AFA4(unsigned int **a1)
{
  return sub_47ECB8(*a1, a1[1], 1, 0);
}

BOOL sub_64AFB8(unsigned int **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 1;
  }
  do
  {
    int v3 = sub_471160(v1, 1);
    BOOL v5 = v3 == 0x7FFFFFFF;
    BOOL result = v3 != 0x7FFFFFFF;
    v1 += 3082;
    BOOL v5 = v5 || v1 == v2;
  }
  while (!v5);
  return result;
}

uint64_t sub_64B024(unsigned int **a1)
{
  return sub_47ECB8(*a1, a1[1], 2, 0);
}

BOOL sub_64B038(unsigned int **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 1;
  }
  do
  {
    int v3 = sub_471160(v1, 2);
    BOOL v5 = v3 == 0x7FFFFFFF;
    BOOL result = v3 != 0x7FFFFFFF;
    v1 += 3082;
    BOOL v5 = v5 || v1 == v2;
  }
  while (!v5);
  return result;
}

uint64_t sub_64B0A4(unsigned int **a1)
{
  return sub_47ECB8(*a1, a1[1], 4, 0);
}

BOOL sub_64B0B8(unsigned int **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 1;
  }
  do
  {
    int v3 = sub_471160(v1, 4);
    BOOL v5 = v3 == 0x7FFFFFFF;
    BOOL result = v3 != 0x7FFFFFFF;
    v1 += 3082;
    BOOL v5 = v5 || v1 == v2;
  }
  while (!v5);
  return result;
}

uint64_t sub_64B124(unsigned int **a1)
{
  return sub_47ECB8(*a1, a1[1], 5, 0);
}

BOOL sub_64B138(unsigned int **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 1;
  }
  do
  {
    int v3 = sub_471160(v1, 5);
    BOOL v5 = v3 == 0x7FFFFFFF;
    BOOL result = v3 != 0x7FFFFFFF;
    v1 += 3082;
    BOOL v5 = v5 || v1 == v2;
  }
  while (!v5);
  return result;
}

void sub_64B1A4(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 != v5)
  {
    while ((sub_35E640() & 1) != 0)
    {
      v4 += 12328;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    goto LABEL_7;
  }
LABEL_4:
  if (!*((unsigned char *)a1 + 112))
  {
LABEL_7:
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(_DWORD *)a2 = 0x7FFFFFFF;
    *(void *)(a2 + 4) = 0x7FFFFFFF7FFFFFFFLL;
    return;
  }
  unint64_t v6 = 0xFF55E3181697D6CDLL * ((a1[1] - *a1) >> 3) - 1;
  if (sub_35E640())
  {
    sub_64EDB4((_DWORD *)(*a1 + 12328 * v6), (uint64_t)&v34);
  }
  else
  {
    int v36 = 0;
    uint64_t v37 = 0;
    int v34 = 0x7FFFFFFF;
    uint64_t v35 = 0x7FFFFFFF7FFFFFFFLL;
  }
  sub_64B420((char *)a1, (uint64_t)&v29);
  sub_64B640((char *)a1, (uint64_t)&v24);
  sub_64BFF8((uint64_t)&v14, &v29);
  sub_64BFF8((uint64_t)&v9, &v24);
  sub_6476DC(&v14, &v9, (uint64_t)&v19);
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
  int v7 = *v19;
  uint64_t v8 = sub_52060((uint64_t)&v34);
  sub_3FB048(a2, v7, v8);
  if (v22)
  {
    uint64_t v23 = v22;
    operator delete(v22);
  }
  if (v20)
  {
    uint64_t v21 = v20;
    operator delete(v20);
  }
  if (v27)
  {
    char v28 = v27;
    operator delete(v27);
  }
  if (v25)
  {
    uint64_t v26 = v25;
    operator delete(v25);
  }
  if (v32)
  {
    uint64_t v33 = v32;
    operator delete(v32);
  }
  if (v30)
  {
    int v31 = v30;
    operator delete(v30);
  }
}

void sub_64B3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  sub_2FC938(&a9);
  sub_2FC938(&a17);
  sub_2FC938(&a33);
  sub_2FC938((void *)(v33 - 144));
  _Unwind_Resume(a1);
}

char *sub_64B420@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = 0;
  long long v22 = 0uLL;
  uint64_t v4 = *(void *)result;
  uint64_t v3 = *((void *)result + 1);
  if (v3 == *(void *)result)
  {
    uint64_t v13 = 0;
    long long v11 = 0uLL;
  }
  else
  {
    unint64_t v5 = 0xFF55E3181697D6CDLL * ((v3 - *(void *)result) >> 3);
    if (v5 >> 61) {
      sub_2E00();
    }
    unint64_t v6 = result;
    int v7 = operator new(0xFAAF18C0B4BEB668 * ((v3 - *(void *)result) >> 3));
    uint64_t v21 = v7;
    *(void *)&long long v22 = v7;
    *((void *)&v22 + 1) = &v7[v5];
    do
    {
      *(void *)&long long v19 = *(void *)(v4 + 1160);
      BOOL result = sub_64C10C((unint64_t *)&v21, v7, &v19);
      int v7 = result + 8;
      v4 += 12328;
    }
    while (v4 != v3);
    uint64_t v10 = v6;
    uint64_t v8 = *(void *)v6;
    uint64_t v9 = *((void *)v10 + 1);
    uint64_t v20 = 0;
    long long v11 = 0uLL;
    long long v19 = 0u;
    if (v9 == v8)
    {
      uint64_t v13 = 0;
    }
    else
    {
      if ((0xFF55E3181697D6CDLL * ((v9 - v8) >> 3)) >> 61) {
        sub_2E00();
      }
      unint64_t v12 = operator new(0xFAAF18C0B4BEB668 * ((v9 - v8) >> 3));
      *(void *)&long long v19 = v12;
      *((void *)&v19 + 1) = v12;
      uint64_t v20 = &v12[0xFF55E3181697D6CDLL * ((v9 - v8) >> 3)];
      do
      {
        uint64_t v23 = *(void *)(v8 + 1168);
        BOOL result = sub_64C10C((unint64_t *)&v19, v12, &v23);
        unint64_t v12 = result + 8;
        v8 += 12328;
      }
      while (v8 != v9);
      long long v11 = v19;
      uint64_t v13 = v20;
    }
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  unint64_t v14 = (unint64_t)v21;
  *(void *)(a2 + 16) = v21;
  uint64_t v15 = v22;
  *(_OWORD *)(a2 + 24) = v22;
  uint64_t v21 = 0;
  long long v22 = 0uLL;
  *(_OWORD *)(a2 + 40) = v11;
  *(void *)(a2 + 56) = v13;
  uint64_t v20 = 0;
  long long v19 = 0uLL;
  if (v14 != v15)
  {
    uint64_t v16 = (uint64_t)(v15 - v14) >> 3;
    uint64_t v17 = v16 - 1;
    if (v16 == 1)
    {
      uint64_t v18 = 0;
    }
    else
    {
      uint64_t v18 = 0;
      while (*(void *)(v14 + 8 * v18) == *(void *)(v11 + 8 * v18))
      {
        *(void *)(a2 + 8) = ++v18;
        if (v17 == v18)
        {
          uint64_t v18 = v17;
          break;
        }
      }
    }
    *(void *)a2 = *(void *)(v14 + 8 * v18);
  }
  return result;
}

void sub_64B604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

char *sub_64B640@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  long long v19 = 0;
  long long v20 = 0uLL;
  uint64_t v4 = *(void *)result;
  uint64_t v3 = *((void *)result + 1);
  uint64_t v5 = v3 - *(void *)result;
  if (v3 == *(void *)result)
  {
    long long v12 = 0uLL;
  }
  else
  {
    unint64_t v6 = 0xFF55E3181697D6CDLL * (v5 >> 3);
    if (v6 >> 61) {
      sub_2E00();
    }
    int v7 = result;
    uint64_t v8 = operator new(0xFAAF18C0B4BEB668 * (v5 >> 3));
    long long v19 = v8;
    *(void *)&long long v20 = v8;
    *((void *)&v20 + 1) = &v8[v6];
    do
    {
      *(void *)uint64_t v18 = *(void *)(v4 + 1160);
      BOOL result = sub_64C10C((unint64_t *)&v19, v8, v18);
      uint64_t v8 = result + 8;
      v4 += 12328;
    }
    while (v4 != v3);
    long long v11 = v7;
    uint64_t v9 = *(void *)v7;
    uint64_t v10 = *((void *)v11 + 1);
    long long v12 = 0uLL;
    memset(v18, 0, sizeof(v18));
    uint64_t v5 = v10 - v9;
    if (v10 != v9)
    {
      unint64_t v13 = 0xFF55E3181697D6CDLL * (v5 >> 3);
      if (v13 >> 61) {
        sub_2E00();
      }
      unint64_t v14 = operator new(0xFAAF18C0B4BEB668 * (v5 >> 3));
      *(void *)uint64_t v18 = v14;
      *(void *)&char v18[8] = v14;
      *(void *)&v18[16] = &v14[v13];
      do
      {
        uint64_t v21 = *(void *)(v9 + 1168);
        BOOL result = sub_64C10C((unint64_t *)v18, v14, &v21);
        unint64_t v14 = result + 8;
        v9 += 12328;
      }
      while (v9 != v10);
      uint64_t v5 = *(void *)v18;
      long long v12 = *(_OWORD *)&v18[8];
    }
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  unint64_t v15 = (unint64_t)v19;
  *(void *)(a2 + 16) = v19;
  uint64_t v16 = v20;
  *(_OWORD *)(a2 + 24) = v20;
  long long v19 = 0;
  long long v20 = 0uLL;
  *(void *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 48) = v12;
  memset(v18, 0, sizeof(v18));
  if (v15 != v16)
  {
    uint64_t v17 = (((uint64_t)v12 - v5) >> 3) - 1;
    *(void *)a2 = *(void *)(v5 + 8 * v17);
    *(void *)(a2 + 8) = v17;
  }
  return result;
}

void sub_64B7E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

char *sub_64B81C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 160);
  if (v4 >= *(void *)(a1 + 168))
  {
    BOOL result = sub_64C47C((char **)(a1 + 152), a2);
    *(void *)(a1 + 160) = result;
  }
  else
  {
    *(_DWORD *)unint64_t v4 = *(_DWORD *)a2;
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
    int v5 = *(unsigned __int8 *)(a2 + 1136);
    *(unsigned char *)(v4 + 1136) = v5;
    if (v5) {
      sub_4BE9F4(v4 + 16, a2 + 16);
    }
    long long v6 = *(_OWORD *)(a2 + 1144);
    *(_DWORD *)(v4 + 1159) = *(_DWORD *)(a2 + 1159);
    *(_OWORD *)(v4 + 1144) = v6;
    BOOL result = (char *)(v4 + 1168);
    *(void *)(a1 + 160) = v4 + 1168;
  }
  return result;
}

char *sub_64B8C0(uint64_t *a1, uint64_t a2, int a3)
{
  int v5 = (char **)(a1 + 24);
  sub_5F657C(a1 + 24, a2, a3);
  unint64_t v7 = a1[25];
  if (v7 >= a1[26])
  {
    uint64_t v9 = sub_1D740(v5, a2);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200((unsigned char *)a1[25], *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v8 = *(_OWORD *)a2;
      *(void *)(v7 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v7 = v8;
    }
    uint64_t v9 = (char *)(v7 + 24);
    a1[25] = v7 + 24;
  }
  a1[25] = (uint64_t)v9;
  sub_5F657C((uint64_t *)(*a1 + 9312), a2, a3);
  uint64_t v10 = *a1;
  unint64_t v11 = *(void *)(*a1 + 9320);
  if (v11 >= *(void *)(v10 + 9328))
  {
    BOOL result = sub_1D740((char **)(v10 + 9312), a2);
    *(void *)(v10 + 9320) = result;
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200((unsigned char *)v11, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v12 = *(_OWORD *)a2;
      *(void *)(v11 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v11 = v12;
    }
    BOOL result = (char *)(v11 + 24);
    *(void *)(v10 + 9320) = v11 + 24;
    *(void *)(v10 + 9320) = v11 + 24;
  }
  return result;
}

void sub_64B9E0(_Unwind_Exception *a1)
{
  *(void *)(v2 + 9320) = v1;
  _Unwind_Resume(a1);
}

void sub_64B9E8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 200) = v2;
  _Unwind_Resume(a1);
}

uint64_t *sub_64B9F0@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  if (*result != v3)
  {
    do
    {
      BOOL result = (uint64_t *)sub_64C690(a2, a2[1], *(void *)(v2 + 11584), *(void *)(v2 + 11592), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(v2 + 11592) - *(void *)(v2 + 11584)) >> 3));
      v2 += 12328;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_64BA74(_Unwind_Exception *a1)
{
  sub_4B1DB4(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_64BA88@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  if (*result != v3)
  {
    do
    {
      BOOL result = (uint64_t *)sub_64C690(a2, a2[1], *(void *)(v2 + 11608), *(void *)(v2 + 11616), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(v2 + 11616) - *(void *)(v2 + 11608)) >> 3));
      v2 += 12328;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_64BB0C(_Unwind_Exception *a1)
{
  sub_4B1DB4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_64BB20(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[4];
  if (v4 >= a1[5])
  {
    a1[4] = sub_64CC70(a1 + 3, a2);
    int v5 = (uint64_t *)*a1;
    unint64_t v6 = *(void *)(*a1 + 1120);
    if (v6 >= v5[141]) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_598A38(a1[4], a2);
    a1[4] = v4 + 176;
    a1[4] = v4 + 176;
    int v5 = (uint64_t *)*a1;
    unint64_t v6 = *(void *)(*a1 + 1120);
    if (v6 >= v5[141])
    {
LABEL_3:
      uint64_t result = sub_64CC70(v5 + 139, a2);
      v5[140] = result;
      return result;
    }
  }
  sub_598A38(v6, a2);
  uint64_t result = v6 + 176;
  v5[140] = v6 + 176;
  v5[140] = v6 + 176;
  return result;
}

void sub_64BBE0(_Unwind_Exception *a1)
{
  *(void *)(v2 + 1120) = v1;
  _Unwind_Resume(a1);
}

void sub_64BBE8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

void sub_64BBF0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v10 = *(_OWORD *)a1;
  *(_OWORD *)unint64_t v11 = v3;
  uint64_t v12 = *(void *)(a1 + 32);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)unint64_t v13 = *(_OWORD *)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 56);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)a2;
  *(_OWORD *)unint64_t v6 = v4;
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)long long __p = *(_OWORD *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  sub_64BCD8(&v10, &v5, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
  if (v13[0])
  {
    v13[1] = v13[0];
    operator delete(v13[0]);
  }
  if (v11[0])
  {
    v11[1] = v11[0];
    operator delete(v11[0]);
  }
}

void sub_64BCBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
}

void sub_64BCD8(long long *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  char v15 = 0;
  long long v3 = a1[1];
  long long v10 = *a1;
  *(_OWORD *)unint64_t v11 = v3;
  uint64_t v12 = *((void *)a1 + 4);
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 3) = 0;
  *(_OWORD *)unint64_t v13 = *(long long *)((char *)a1 + 40);
  uint64_t v14 = *((void *)a1 + 7);
  *((void *)a1 + 4) = 0;
  *((void *)a1 + 5) = 0;
  *((void *)a1 + 6) = 0;
  *((void *)a1 + 7) = 0;
  long long v4 = a2[1];
  long long v5 = *a2;
  *(_OWORD *)unint64_t v6 = v4;
  uint64_t v7 = *((void *)a2 + 4);
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(_OWORD *)long long __p = *(long long *)((char *)a2 + 40);
  uint64_t v9 = *((void *)a2 + 7);
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 7) = 0;
  sub_64BDC4((uint64_t)&v10, &v5, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
  if (v13[0])
  {
    v13[1] = v13[0];
    operator delete(v13[0]);
  }
  if (v11[0])
  {
    v11[1] = v11[0];
    operator delete(v11[0]);
  }
}

void sub_64BDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
}

__n128 sub_64BDC4@<Q0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  long long v8 = (void *)(a1 + 40);
  uint64_t v9 = a2[5];
  uint64_t v10 = a2[6];
  if (v7 != v6 && v9 != v10)
  {
    if (*(void *)(a1 + 8) != a2[1] || *(void *)a1 != *a2) {
      goto LABEL_10;
    }
LABEL_32:
    __n128 result = *(__n128 *)a1;
    long long v21 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a1;
    *(_OWORD *)(a3 + 16) = v21;
    uint64_t v22 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a3 + 32) = v22;
    *(void *)(a3 + 40) = v7;
    uint64_t v23 = *(void *)(a1 + 56);
    *(void *)(a3 + 48) = v6;
    *(void *)(a3 + 56) = v23;
    void *v8 = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    return result;
  }
  if ((v7 == v6) == (v9 == v10)) {
    goto LABEL_32;
  }
LABEL_10:
  sub_64BFF8((uint64_t)&v24, (long long *)a1);
  while (1)
  {
    int64_t v12 = *((void *)&v24 + 1);
    unint64_t v13 = (_DWORD *)(v24 + 4);
    uint64_t v14 = v27;
    unint64_t v15 = ((v28 - v27) >> 3) - 1;
    *(void *)&long long v24 = v24 + 4;
    if (*((void *)&v24 + 1) < v15)
    {
      while (v13 == *(_DWORD **)&v27[8 * v12])
      {
        *((void *)&v24 + 1) = v12 + 1;
        unint64_t v13 = (_DWORD *)*((void *)__p + v12 + 1);
        *(void *)&long long v24 = v13;
        ++v12;
        if (v15 == *((void *)&v24 + 1))
        {
          int64_t v12 = ((v28 - v27) >> 3) - 1;
          break;
        }
      }
    }
    uint64_t v16 = a2[5];
    uint64_t v17 = a2[6];
    if (v27 != v28 && v16 != v17) {
      break;
    }
    if ((v27 == v28) == (v16 == v17)) {
      goto LABEL_27;
    }
LABEL_24:
    if (*v13 < **(_DWORD **)a1)
    {
      *(_OWORD *)a1 = v24;
      if (&v24 != (long long *)a1)
      {
        sub_326C0((void *)(a1 + 16), (char *)__p, v26, (v26 - (unsigned char *)__p) >> 3);
        sub_326C0(v8, v27, v28, (v28 - v27) >> 3);
      }
    }
  }
  if (v12 != a2[1] || v13 != (_DWORD *)*a2) {
    goto LABEL_24;
  }
LABEL_27:
  long long v19 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 16) = v19;
  *(void *)(a3 + 32) = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(a3 + 40) = result;
  *(void *)(a3 + 56) = *(void *)(a1 + 56);
  v8[1] = 0;
  void v8[2] = 0;
  void *v8 = 0;
  if (v14)
  {
    char v28 = v14;
    operator delete(v14);
  }
  if (__p)
  {
    uint64_t v26 = (char *)__p;
    operator delete(__p);
  }
  return result;
}

void sub_64BFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_64BFF8(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = (unsigned char *)*((void *)a2 + 2);
  long long v5 = (unsigned char *)*((void *)a2 + 3);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    long long v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 32) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 24) = v9;
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  unint64_t v11 = (unsigned char *)*((void *)a2 + 5);
  uint64_t v10 = (unsigned char *)*((void *)a2 + 6);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      sub_2E00();
    }
    unint64_t v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v13;
    uint64_t v14 = &v13[8 * (v12 >> 3)];
    *(void *)(a1 + 56) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 48) = v14;
  }
  return a1;
}

void sub_64C0D8(_Unwind_Exception *exception_object)
{
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

char *sub_64C10C(unint64_t *a1, void *a2, void *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 3;
  uint64_t v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)uint64_t v9 = *a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    unint64_t v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      long long v19 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      unint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        long long v19 = (void *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        long long v19 = (void *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          unint64_t v13 = (uint64_t *)((char *)v13 + v21);
          long long v19 = (void *)(v5 + v21);
          uint64_t v22 = (_OWORD *)(v5 + 16);
          uint64_t v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *uint64_t v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v56 = *v13++;
        *v19++ = v56;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)uint64_t v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    unsigned int v30 = (char *)operator new(8 * v29);
    int v31 = &v30[8 * v8];
    size_t v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    unsigned int v30 = 0;
    int v31 = (char *)(8 * v8);
    size_t v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((void *)v6 == a2) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = v7 >> 2;
    }
    if (v53 >> 61) {
      sub_188D718();
    }
    size_t v54 = (char *)operator new(8 * v53);
    int v31 = &v54[8 * (v53 >> 2)];
    size_t v32 = &v54[8 * v53];
    if (v30)
    {
      unint64_t v55 = &v54[8 * v53];
      operator delete(v30);
      size_t v32 = v55;
      int v34 = (char *)*a1;
      *(void *)int v31 = *a3;
      uint64_t v35 = v31 + 8;
      int v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  int v34 = (char *)v6;
  *(void *)int v31 = *a3;
  uint64_t v35 = v31 + 8;
  int v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    uint64_t v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    int v39 = v9;
    int v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    int v39 = v9;
    int v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    int v39 = &v9[-v41];
    int v36 = &v31[-v41];
    int v42 = v31 - 16;
    size_t v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)int v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  uint64_t v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    int v49 = v9;
    size_t v50 = v47 - v9;
    int v51 = v32;
    memmove(v35, v49, v50);
    size_t v32 = v51;
  }
  size_t v52 = (void *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v35[v48];
  a1[2] = (unint64_t)v32;
  if (v52) {
    operator delete(v52);
  }
  return v31;
}

void sub_64C464(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_64C47C(char **a1, uint64_t a2)
{
  long long v3 = *a1;
  long long v4 = a1[1];
  uint64_t v5 = 0x7E3F1F8FC7E3F1F9 * ((v4 - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x381C0E070381C0) {
    sub_2E00();
  }
  if (0xFC7E3F1F8FC7E3F2 * ((a1[2] - v3) >> 4) > v6) {
    unint64_t v6 = 0xFC7E3F1F8FC7E3F2 * ((a1[2] - v3) >> 4);
  }
  if ((unint64_t)(0x7E3F1F8FC7E3F1F9 * ((a1[2] - v3) >> 4)) >= 0x1C0E070381C0E0) {
    unint64_t v8 = 0x381C0E070381C0;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0x381C0E070381C0) {
      sub_188D718();
    }
    uint64_t v9 = (char *)operator new(1168 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  unint64_t v10 = &v9[1168 * v5];
  *(_DWORD *)unint64_t v10 = *(_DWORD *)a2;
  *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
  int v11 = *(unsigned __int8 *)(a2 + 1136);
  v10[1136] = v11;
  if (v11)
  {
    sub_4BE9F4((uint64_t)&v9[1168 * v5 + 16], a2 + 16);
    long long v3 = *a1;
    long long v4 = a1[1];
  }
  uint64_t v12 = &v9[1168 * v8];
  uint64_t v13 = (uint64_t)&v9[1168 * v5 + 1144];
  *(_OWORD *)uint64_t v13 = *(_OWORD *)(a2 + 1144);
  *(_DWORD *)(v13 + 15) = *(_DWORD *)(a2 + 1159);
  unint64_t v14 = v10 + 1168;
  if (v4 == v3)
  {
    *a1 = v10;
    a1[1] = v14;
    a1[2] = v12;
    if (!v3) {
      return v10 + 1168;
    }
    goto LABEL_24;
  }
  uint64_t v15 = 0;
  do
  {
    unint64_t v16 = &v10[v15];
    unint64_t v17 = &v4[v15];
    *(_DWORD *)&v10[v15 - 1168] = *(_DWORD *)&v4[v15 - 1168];
    *(_DWORD *)&v10[v15 - 1160] = *(_DWORD *)&v4[v15 - 1160];
    int v18 = v4[v15 - 32];
    v10[v15 - 32] = v18;
    if (v18) {
      sub_4C09FC((uint64_t)(v16 - 1152), (uint64_t)(v17 - 1152));
    }
    long long v19 = *(_OWORD *)(v17 - 24);
    *(_DWORD *)(v16 - 9) = *(_DWORD *)(v17 - 9);
    *(_OWORD *)(v16 - 24) = v19;
    v15 -= 1168;
  }
  while (&v4[v15] != v3);
  uint64_t v20 = *a1;
  long long v3 = a1[1];
  *a1 = &v10[v15];
  a1[1] = v14;
  a1[2] = v12;
  if (v3 != v20)
  {
    do
    {
      if (*(v3 - 32))
      {
        sub_3A6B94((uint64_t)(v3 - 1152));
        *(v3 - 32) = 0;
      }
      v3 -= 1168;
    }
    while (v3 != v20);
    long long v3 = v20;
  }
  if (v3) {
LABEL_24:
  }
    operator delete(v3);
  return v10 + 1168;
}

uint64_t sub_64C690(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *a1;
  uint64_t v6 = (a2 - *a1) / 168;
  uint64_t v7 = *a1 + 168 * v6;
  if (a5 < 1) {
    return v7;
  }
  uint64_t v9 = a3;
  uint64_t v11 = a1[2];
  unint64_t v12 = a1[1];
  if ((uint64_t)(0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v11 - v12) >> 3)) < a5)
  {
    unint64_t v13 = a5 - 0x30C30C30C30C30C3 * ((uint64_t)(v12 - v5) >> 3);
    if (v13 > 0x186186186186186) {
      sub_2E00();
    }
    unint64_t v14 = 0xCF3CF3CF3CF3CF3DLL * ((v11 - v5) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0xC30C30C30C30C3) {
      unint64_t v15 = 0x186186186186186;
    }
    else {
      unint64_t v15 = v13;
    }
    size_t v43 = a1 + 2;
    if (v15)
    {
      if (v15 > 0x186186186186186) {
        sub_188D718();
      }
      unint64_t v16 = (char *)operator new(168 * v15);
    }
    else
    {
      unint64_t v16 = 0;
    }
    uint64_t v32 = (uint64_t)&v16[168 * v6];
    long long __p = v16;
    uint64_t v40 = v32;
    uint64_t v41 = v32;
    int v42 = &v16[168 * v15];
    uint64_t v33 = 168 * a5;
    uint64_t v34 = v32 + v33;
    do
    {
      sub_4BD34C(v32, v9);
      v32 += 168;
      v9 += 168;
      v33 -= 168;
    }
    while (v33);
    uint64_t v41 = v34;
    uint64_t v7 = sub_64CA84(a1, &__p, v7);
    uint64_t v36 = v40;
    for (uint64_t i = v41; v41 != v36; uint64_t i = v41)
    {
      uint64_t v41 = i - 168;
      sub_4BCFD0(i - 168);
    }
    if (__p) {
      operator delete(__p);
    }
    return v7;
  }
  uint64_t v38 = *a1 + 168 * v6;
  uint64_t v17 = v12 - v7;
  if ((uint64_t)(0xCF3CF3CF3CF3CF3DLL * (v17 >> 3)) >= a5)
  {
    uint64_t v19 = a3 + 168 * a5;
    uint64_t v21 = a1[1];
  }
  else
  {
    uint64_t v19 = a3 + 8 * (v17 >> 3);
    if (v19 == a4)
    {
      uint64_t v21 = a1[1];
      a1[1] = v12;
      if (v17 < 1) {
        return v38;
      }
    }
    else
    {
      uint64_t v20 = 0;
      do
      {
        sub_4BD34C(v12 + v20, v19 + v20);
        v20 += 168;
      }
      while (v19 + v20 != a4);
      uint64_t v21 = v12 + v20;
      a1[1] = v12 + v20;
      if (v17 < 1) {
        return v38;
      }
    }
  }
  uint64_t v7 = v38;
  uint64_t v22 = v38 + 168 * a5;
  unint64_t v23 = v21 - 168 * a5;
  uint64_t v24 = v21;
  if (v23 < v12)
  {
    uint64_t v24 = v21;
    do
    {
      *(void *)uint64_t v24 = *(void *)v23;
      long long v25 = *(_OWORD *)(v23 + 8);
      *(void *)(v24 + 24) = *(void *)(v23 + 24);
      *(_OWORD *)(v24 + 8) = v25;
      *(void *)(v23 + 16) = 0;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 8) = 0;
      long long v26 = *(_OWORD *)(v23 + 32);
      *(_DWORD *)(v24 + 48) = *(_DWORD *)(v23 + 48);
      *(_OWORD *)(v24 + 32) = v26;
      long long v27 = *(_OWORD *)(v23 + 56);
      *(void *)(v24 + 72) = *(void *)(v23 + 72);
      *(_OWORD *)(v24 + 56) = v27;
      *(void *)(v23 + 64) = 0;
      *(void *)(v23 + 72) = 0;
      *(void *)(v23 + 56) = 0;
      long long v28 = *(_OWORD *)(v23 + 80);
      *(void *)(v24 + 96) = *(void *)(v23 + 96);
      *(_OWORD *)(v24 + 80) = v28;
      *(void *)(v23 + 80) = 0;
      *(void *)(v23 + 88) = 0;
      *(void *)(v23 + 96) = 0;
      *(void *)(v24 + 104) = 0;
      *(void *)(v24 + 112) = 0;
      *(void *)(v24 + 120) = 0;
      *(_OWORD *)(v24 + 104) = *(_OWORD *)(v23 + 104);
      *(void *)(v24 + 120) = *(void *)(v23 + 120);
      *(void *)(v23 + 104) = 0;
      *(void *)(v23 + 112) = 0;
      *(void *)(v23 + 120) = 0;
      *(_WORD *)(v24 + 128) = *(_WORD *)(v23 + 128);
      long long v29 = *(_OWORD *)(v23 + 136);
      *(void *)(v24 + 152) = *(void *)(v23 + 152);
      *(_OWORD *)(v24 + 136) = v29;
      *(void *)(v23 + 144) = 0;
      *(void *)(v23 + 152) = 0;
      *(void *)(v23 + 136) = 0;
      *(_WORD *)(v24 + 160) = *(_WORD *)(v23 + 160);
      v24 += 168;
      v23 += 168;
    }
    while (v23 < v12);
  }
  a1[1] = v24;
  if (v21 != v22)
  {
    uint64_t v30 = v21 - 168;
    uint64_t v31 = 8 * ((v21 - v22) >> 3);
    do
    {
      sub_572AB4(v30, 168 * v6 + v5 - 168 + v31);
      v30 -= 168;
      v31 -= 168;
    }
    while (v31);
  }
  sub_4BD518((uint64_t)&__p, v9, v19, v38);
  return v7;
}

void sub_64CA30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_53E0A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_64CA44(_Unwind_Exception *exception_object)
{
  for (; v1; v1 -= 168)
    sub_4BCFD0(v3 - 168 + v1);
  *(void *)(v2 + 8) = v3;
  _Unwind_Resume(exception_object);
}

void sub_64CA6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_53E0A4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_64CA84(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t result = a2[1];
  uint64_t v5 = *a1;
  uint64_t v6 = result;
  if (*a1 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = result + v7;
      uint64_t v9 = a3 + v7;
      *(void *)(v8 - 168) = *(void *)(a3 + v7 - 168);
      long long v10 = *(_OWORD *)(a3 + v7 - 160);
      *(void *)(v8 - 144) = *(void *)(a3 + v7 - 144);
      *(_OWORD *)(v8 - 160) = v10;
      *(void *)(v9 - 152) = 0;
      *(void *)(v9 - 144) = 0;
      *(void *)(v9 - 160) = 0;
      long long v11 = *(_OWORD *)(a3 + v7 - 136);
      *(_DWORD *)(v8 - 120) = *(_DWORD *)(a3 + v7 - 120);
      *(_OWORD *)(v8 - 136) = v11;
      long long v12 = *(_OWORD *)(a3 + v7 - 112);
      *(void *)(v8 - 96) = *(void *)(a3 + v7 - 96);
      *(_OWORD *)(v8 - 112) = v12;
      *(void *)(v9 - 104) = 0;
      *(void *)(v9 - 96) = 0;
      *(void *)(v9 - 112) = 0;
      long long v13 = *(_OWORD *)(a3 + v7 - 88);
      *(void *)(v8 - 72) = *(void *)(a3 + v7 - 72);
      *(_OWORD *)(v8 - 88) = v13;
      *(void *)(v9 - 88) = 0;
      *(void *)(v9 - 80) = 0;
      *(void *)(v9 - 72) = 0;
      *(void *)(v8 - 64) = 0;
      *(void *)(v8 - 56) = 0;
      *(void *)(v8 - 48) = 0;
      *(_OWORD *)(v8 - 64) = *(_OWORD *)(a3 + v7 - 64);
      *(void *)(v8 - 48) = *(void *)(a3 + v7 - 48);
      *(void *)(v9 - 64) = 0;
      *(void *)(v9 - 56) = 0;
      *(void *)(v9 - 48) = 0;
      *(_WORD *)(v8 - 40) = *(_WORD *)(a3 + v7 - 40);
      long long v14 = *(_OWORD *)(a3 + v7 - 32);
      *(void *)(v8 - 16) = *(void *)(a3 + v7 - 16);
      *(_OWORD *)(v8 - 32) = v14;
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 32) = 0;
      *(_WORD *)(v8 - 8) = *(_WORD *)(a3 + v7 - 8);
      v7 -= 168;
    }
    while (a3 + v7 != v5);
    uint64_t v6 = result + v7;
  }
  a2[1] = v6;
  uint64_t v15 = a1[1];
  uint64_t v16 = a2[2];
  if (v15 != a3)
  {
    do
    {
      *(void *)uint64_t v16 = *(void *)a3;
      long long v17 = *(_OWORD *)(a3 + 8);
      *(void *)(v16 + 24) = *(void *)(a3 + 24);
      *(_OWORD *)(v16 + 8) = v17;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 8) = 0;
      long long v18 = *(_OWORD *)(a3 + 32);
      *(_DWORD *)(v16 + 48) = *(_DWORD *)(a3 + 48);
      *(_OWORD *)(v16 + 32) = v18;
      long long v19 = *(_OWORD *)(a3 + 56);
      *(void *)(v16 + 72) = *(void *)(a3 + 72);
      *(_OWORD *)(v16 + 56) = v19;
      *(void *)(a3 + 64) = 0;
      *(void *)(a3 + 72) = 0;
      *(void *)(a3 + 56) = 0;
      long long v20 = *(_OWORD *)(a3 + 80);
      *(void *)(v16 + 96) = *(void *)(a3 + 96);
      *(_OWORD *)(v16 + 80) = v20;
      *(void *)(a3 + 80) = 0;
      *(void *)(a3 + 88) = 0;
      *(void *)(a3 + 96) = 0;
      *(void *)(v16 + 104) = 0;
      *(void *)(v16 + 112) = 0;
      *(void *)(v16 + 120) = 0;
      *(_OWORD *)(v16 + 104) = *(_OWORD *)(a3 + 104);
      *(void *)(v16 + 120) = *(void *)(a3 + 120);
      *(void *)(a3 + 104) = 0;
      *(void *)(a3 + 112) = 0;
      *(void *)(a3 + 120) = 0;
      *(_WORD *)(v16 + 128) = *(_WORD *)(a3 + 128);
      long long v21 = *(_OWORD *)(a3 + 136);
      *(void *)(v16 + 152) = *(void *)(a3 + 152);
      *(_OWORD *)(v16 + 136) = v21;
      *(void *)(a3 + 144) = 0;
      *(void *)(a3 + 152) = 0;
      *(void *)(a3 + 136) = 0;
      *(_WORD *)(v16 + 160) = *(_WORD *)(a3 + 160);
      v16 += 168;
      a3 += 168;
    }
    while (a3 != v15);
    uint64_t v6 = a2[1];
  }
  a2[2] = v16;
  uint64_t v22 = *a1;
  *a1 = v6;
  a2[1] = v22;
  uint64_t v23 = a1[1];
  a1[1] = a2[2];
  a2[2] = v23;
  uint64_t v24 = a1[2];
  a1[2] = a2[3];
  a2[3] = v24;
  *a2 = a2[1];
  return result;
}

uint64_t sub_64CC70(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x1745D1745D1745DLL) {
    sub_2E00();
  }
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 4)) >= 0xBA2E8BA2E8BA2ELL) {
    unint64_t v6 = 0x1745D1745D1745DLL;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v24 = (uint64_t)(a1 + 2);
  if (v6)
  {
    if (v6 > 0x1745D1745D1745DLL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(176 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v22 = (uint64_t)&v7[176 * v3];
  uint64_t v23 = &v7[176 * v6];
  sub_598A38(v22, a2);
  uint64_t v8 = v22 + 176;
  uint64_t v9 = (char *)*a1;
  long long v10 = (char *)a1[1];
  if (v10 == (char *)*a1)
  {
    *a1 = v22;
    a1[1] = v8;
    a1[2] = (uint64_t)v23;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      long long v12 = &v10[v11];
      long long v13 = *(_OWORD *)&v10[v11 - 176];
      uint64_t v14 = v22 + v11;
      *(void *)(v14 - 160) = *(void *)&v10[v11 - 160];
      *(_OWORD *)(v14 - 176) = v13;
      *((void *)v12 - 21) = 0;
      *((void *)v12 - 20) = 0;
      uint64_t v15 = *(void *)&v10[v11 - 152];
      *((void *)v12 - 22) = 0;
      *(void *)(v14 - 152) = v15;
      long long v16 = *(_OWORD *)&v10[v11 - 144];
      *(void *)(v14 - 128) = *(void *)&v10[v11 - 128];
      *(_OWORD *)(v14 - 144) = v16;
      *((void *)v12 - 17) = 0;
      *((void *)v12 - 16) = 0;
      *((void *)v12 - 18) = 0;
      *(void *)(v14 - 120) = *(void *)&v10[v11 - 120];
      *(_DWORD *)(v14 - 112) = *(_DWORD *)&v10[v11 - 112];
      long long v17 = *(_OWORD *)&v10[v11 - 104];
      *(void *)(v14 - 88) = *(void *)&v10[v11 - 88];
      *(_OWORD *)(v14 - 104) = v17;
      *((void *)v12 - 12) = 0;
      *((void *)v12 - 11) = 0;
      *((void *)v12 - 13) = 0;
      long long v18 = *(_OWORD *)&v10[v11 - 80];
      *(void *)(v14 - 64) = *(void *)&v10[v11 - 64];
      *(_OWORD *)(v14 - 80) = v18;
      *((void *)v12 - 9) = 0;
      *((void *)v12 - 8) = 0;
      *((void *)v12 - 10) = 0;
      *(_DWORD *)(v14 - 56) = *(_DWORD *)&v10[v11 - 56];
      long long v19 = *(_OWORD *)&v10[v11 - 48];
      *(void *)(v14 - 32) = *(void *)&v10[v11 - 32];
      *(_OWORD *)(v14 - 48) = v19;
      *((void *)v12 - 5) = 0;
      *((void *)v12 - 4) = 0;
      *((void *)v12 - 6) = 0;
      *(void *)(v14 - 24) = 0;
      *(void *)(v14 - 16) = 0;
      *(void *)(v14 - 8) = 0;
      *(_OWORD *)(v14 - 24) = *(_OWORD *)&v10[v11 - 24];
      *(void *)(v14 - 8) = *(void *)&v10[v11 - 8];
      *((void *)v12 - 3) = 0;
      *((void *)v12 - 2) = 0;
      *((void *)v12 - 1) = 0;
      v11 -= 176;
    }
    while (&v10[v11] != v9);
    long long v20 = (char *)*a1;
    long long v10 = (char *)a1[1];
    *a1 = v22 + v11;
    a1[1] = v8;
    a1[2] = (uint64_t)v23;
    if (v10 != v20)
    {
      do
      {
        v10 -= 176;
        sub_57523C(v24, (uint64_t)v10);
      }
      while (v10 != v20);
      long long v10 = v20;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v22 + 176;
}

void sub_64CEB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_64CECC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_64CECC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = i - 176;
    sub_57523C(v4, i - 176);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_64CF24(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xFF55E3181697D6CDLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x550E73F4B4149) {
    sub_2E00();
  }
  if (0xFEABC6302D2FAD9ALL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xFEABC6302D2FAD9ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xFF55E3181697D6CDLL * ((a1[2] - *a1) >> 3) >= 0x2A8739FA5A0A4) {
    unint64_t v6 = 0x550E73F4B4149;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x550E73F4B4149) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(12328 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v14 = &v7[12328 * v3];
  uint64_t v15 = &v7[12328 * v6];
  sub_64E288(v14, a2, 0);
  uint64_t v8 = (uint64_t)v14;
  uint64_t v9 = v14 + 12328;
  uint64_t v11 = (char *)*a1;
  long long v10 = (char *)a1[1];
  if (v10 == (char *)*a1)
  {
    *a1 = (uint64_t)v14;
    a1[1] = (uint64_t)v9;
    a1[2] = (uint64_t)v15;
  }
  else
  {
    do
    {
      v10 -= 12328;
      uint64_t v8 = sub_5AF130(v8 - 12328, (uint64_t)v10);
    }
    while (v10 != v11);
    long long v12 = (char *)*a1;
    long long v10 = (char *)a1[1];
    *a1 = v8;
    a1[1] = (uint64_t)v9;
    a1[2] = (uint64_t)v15;
    if (v10 != v12)
    {
      do
      {
        v10 -= 12328;
        sub_5752F4((uint64_t)v10);
      }
      while (v10 != v12);
      long long v10 = v12;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v14 + 12328;
}

void sub_64D0BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5AF0D0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_64D0D0(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xFF55E3181697D6CDLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x550E73F4B4149) {
    sub_2E00();
  }
  if (0xFEABC6302D2FAD9ALL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xFEABC6302D2FAD9ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xFF55E3181697D6CDLL * ((a1[2] - *a1) >> 3) >= 0x2A8739FA5A0A4) {
    unint64_t v6 = 0x550E73F4B4149;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x550E73F4B4149) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(12328 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v14 = &v7[12328 * v3];
  uint64_t v15 = &v7[12328 * v6];
  sub_65221C(v14, a2, 0);
  uint64_t v8 = (uint64_t)v14;
  uint64_t v9 = v14 + 12328;
  uint64_t v11 = (char *)*a1;
  long long v10 = (char *)a1[1];
  if (v10 == (char *)*a1)
  {
    *a1 = (uint64_t)v14;
    a1[1] = (uint64_t)v9;
    a1[2] = (uint64_t)v15;
  }
  else
  {
    do
    {
      v10 -= 12328;
      uint64_t v8 = sub_5AF130(v8 - 12328, (uint64_t)v10);
    }
    while (v10 != v11);
    long long v12 = (char *)*a1;
    long long v10 = (char *)a1[1];
    *a1 = v8;
    a1[1] = (uint64_t)v9;
    a1[2] = (uint64_t)v15;
    if (v10 != v12)
    {
      do
      {
        v10 -= 12328;
        sub_5752F4((uint64_t)v10);
      }
      while (v10 != v12);
      long long v10 = v12;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v14 + 12328;
}

void sub_64D268(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5AF0D0((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_64D27C()
{
  byte_2598257 = 1;
  word_2598240 = 65;
  byte_259826F = 1;
  word_2598258 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_2598300 = 0u;
  *(_OWORD *)&qword_2598310 = 0u;
  dword_2598320 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2598300, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_2598300, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_2598300, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_2598300, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_2598287 = 8;
  strcpy((char *)&qword_2598270, "any_mode");
  byte_259829F = 7;
  strcpy((char *)&dword_2598288, "cycling");
  byte_25982B7 = 7;
  strcpy((char *)&dword_25982A0, "driving");
  byte_25982CF = 7;
  strcpy((char *)&dword_25982B8, "walking");
  qword_25982D8 = 0;
  qword_25982E0 = 0;
  qword_25982D0 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25982D0 = (uint64_t)v0;
  qword_25982D8 = (uint64_t)(v0 + 9);
  qword_25982E0 = (uint64_t)(v0 + 9);
  qword_25982E8 = 0;
  qword_25982F0 = 0;
  unk_25982F8 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25982F0 = (uint64_t)(v1 + 9);
  unk_25982F8 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25982E8 = (uint64_t)v1;
  return result;
}

void sub_64D544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_2598310) {
    sub_20AA578((void **)qword_2598310);
  }
  uint64_t v37 = (void *)xmmword_2598300;
  *(void *)&xmmword_2598300 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_64D5E4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = nullsub_1(a2);
  char v7 = (const void *)sub_46C7D0(a2);
  uint64_t v8 = sub_46C7D8(a2);
  long long v18 = 0;
  long long v19 = 0;
  long long v17 = 0;
  uint64_t v9 = v8 - (void)v7;
  if ((const void *)v8 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    char v10 = (const void *)v8;
    int v11 = (char *)operator new(v8 - (void)v7);
    long long v12 = &v11[8 * (v9 >> 3)];
    long long v17 = v11;
    long long v19 = v12;
    if (v10 != v7) {
      memmove(v11, v7, v9 - 4);
    }
    long long v18 = v12;
  }
  sub_46C80C(a2, v14);
  sub_46D038(a1, v6, (uint64_t *)(a2 + 512), (void *)(a2 + 504), (long long *)(a2 + 800), a2 + 128, a2 + 288, (uint64_t)&v17, (uint64_t *)(a2 + 1032), (uint64_t)v14);
  if (v15)
  {
    long long v16 = v15;
    operator delete(v15);
  }
  if (v14[0])
  {
    v14[1] = v14[0];
    operator delete(v14[0]);
  }
  if (v17)
  {
    long long v18 = v17;
    operator delete(v17);
  }
  *(unsigned char *)(a1 + 1056) = 3;
  *(unsigned char *)(a1 + 1057) = sub_46CA54((int ***)a2);
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  sub_3F4FA4((void *)(a1 + 1160));
  *(void *)(a1 + 1248) = 0;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  sub_4F29BC(a1 + 1256);
  sub_59171C(a1 + 2344);
  *(void *)(a1 + 7160) = 0;
  *(_OWORD *)(a1 + 7144) = 0u;
  sub_5F3B34(a1 + 7168);
  *(_OWORD *)(a1 + 7504) = 0u;
  *(_OWORD *)(a1 + 7488) = 0u;
  *(_OWORD *)(a1 + 7472) = 0u;
  *(_OWORD *)(a1 + 7456) = 0u;
  *(_OWORD *)(a1 + 7440) = 0u;
  *(_OWORD *)(a1 + 7424) = 0u;
  *(_OWORD *)(a1 + 7408) = 0u;
  *(_OWORD *)(a1 + 7392) = 0u;
  *(_OWORD *)(a1 + 7376) = 0u;
  *(_OWORD *)(a1 + 7360) = 0u;
  *(_OWORD *)(a1 + 7344) = 0u;
  *(_OWORD *)(a1 + 7328) = 0u;
  sub_5A9D64(a1 + 7520);
  sub_5A9D64(a1 + 8336);
  sub_5F3B34(a1 + 9152);
  sub_5F3B34(a1 + 9312);
  sub_5F3B34(a1 + 9472);
  sub_5F3B34(a1 + 9632);
  sub_5F3B34(a1 + 9792);
  *(void *)(a1 + 9968) = 0;
  *(_OWORD *)(a1 + 9952) = 0u;
  *(unsigned char *)(a1 + 9976) = 0;
  *(unsigned char *)(a1 + 9977) = a3;
  *(_OWORD *)(a1 + 9984) = 0u;
  *(_OWORD *)(a1 + 10000) = 0u;
  *(_OWORD *)(a1 + 10016) = 0u;
  *(_OWORD *)(a1 + 10032) = 0u;
  *(_OWORD *)(a1 + 10048) = 0u;
  *(_OWORD *)(a1 + 10064) = 0u;
  *(_OWORD *)(a1 + 10080) = 0u;
  *(void *)(a1 + 10096) = 0;
  *(void *)(a1 + 10104) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 10112) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 10168) = 0;
  *(_OWORD *)(a1 + 10120) = 0u;
  *(_OWORD *)(a1 + 10136) = 0u;
  *(_OWORD *)(a1 + 10152) = 0u;
  *(void *)(a1 + 10192) = 0;
  *(_OWORD *)(a1 + 10176) = 0u;
  *(void *)(a1 + 10200) = -1;
  *(_DWORD *)(a1 + 10208) = 0x7FFFFFFF;
  *(void *)(a1 + 10216) = -1;
  *(void *)(a1 + 10224) = -1;
  *(void *)(a1 + 10232) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 10++*(_DWORD *)(result + 240) = 0;
  *(_DWORD *)(a1 + 10248) = -1935635296;
  *(void *)(a1 + 10256) = 0;
  *(_DWORD *)(a1 + 10263) = 0;
  *(void *)(a1 + 10288) = 0;
  *(_DWORD *)(a1 + 10296) = 0;
  *(void *)(a1 + 10272) = 0;
  *(void *)(a1 + 10280) = 0;
  *(unsigned char *)(a1 + 10300) = 100;
  *(void *)(a1 + 10304) = 0;
  *(_DWORD *)(a1 + 10312) = 0;
  *(unsigned char *)(a1 + 10416) = 0;
  *(_OWORD *)(a1 + 10400) = 0u;
  *(_OWORD *)(a1 + 10384) = 0u;
  *(_OWORD *)(a1 + 10368) = 0u;
  *(_OWORD *)(a1 + 10352) = 0u;
  *(_OWORD *)(a1 + 10336) = 0u;
  *(_OWORD *)(a1 + 10320) = 0u;
  *(void *)(a1 + 10504) = 0;
  *(_OWORD *)(a1 + 10472) = 0u;
  *(_OWORD *)(a1 + 10488) = 0u;
  *(_OWORD *)(a1 + 10440) = 0u;
  *(_OWORD *)(a1 + 10456) = 0u;
  *(_OWORD *)(a1 + 10424) = 0u;
  *(_OWORD *)(a1 + 10512) = xmmword_20B8E30;
  *(void *)(a1 + 10528) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 10552) = 0;
  *(_DWORD *)(a1 + 10560) = 0;
  *(void *)(a1 + 10536) = 0;
  *(void *)(a1 + 10544) = 0;
  *(unsigned char *)(a1 + 10568) = 0;
  *(_OWORD *)(a1 + 10572) = 0u;
  *(_OWORD *)(a1 + 10588) = 0u;
  sub_5F3B34(a1 + 10608);
  *(_DWORD *)(a1 + 10800) = -1;
  *(_DWORD *)(a1 + 10808) = -1;
  *(_DWORD *)(a1 + 10811) = -1;
  *(void *)(a1 + 10815) = 0;
  *(void *)(a1 + 10831) = 0;
  *(void *)(a1 + 10823) = 0;
  *(_WORD *)(a1 + 10839) = 0;
  *(unsigned char *)(a1 + 10872) = 0;
  *(void *)(a1 + 10848) = 0;
  *(void *)(a1 + 10864) = 0;
  *(void *)(a1 + 10856) = 0;
  *(void *)(a1 + 10880) = -1;
  *(_DWORD *)(a1 + 10888) = 0x7FFFFFFF;
  *(void *)(a1 + 10896) = -1;
  *(void *)(a1 + 10904) = -1;
  *(void *)(a1 + 10912) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 10920) = 0;
  *(_DWORD *)(a1 + 10928) = -1935635296;
  *(_DWORD *)(a1 + 10943) = 0;
  *(void *)(a1 + 10936) = 0;
  *(void *)(a1 + 10968) = 0;
  *(_DWORD *)(a1 + 10976) = 0;
  *(void *)(a1 + 10952) = 0;
  *(void *)(a1 + 10960) = 0;
  *(unsigned char *)(a1 + 10980) = 100;
  *(void *)(a1 + 10984) = 0;
  *(_DWORD *)(a1 + 10992) = 0;
  *(_OWORD *)(a1 + 11000) = 0u;
  *(_OWORD *)(a1 + 11016) = 0u;
  *(_OWORD *)(a1 + 11032) = 0u;
  *(_OWORD *)(a1 + 11048) = 0u;
  *(_OWORD *)(a1 + 11064) = 0u;
  *(_OWORD *)(a1 + 11080) = 0u;
  *(unsigned char *)(a1 + 11096) = 0;
  *(_OWORD *)(a1 + 11104) = 0u;
  *(_OWORD *)(a1 + 11120) = 0u;
  *(_OWORD *)(a1 + 11136) = 0u;
  *(_OWORD *)(a1 + 11152) = 0u;
  *(_OWORD *)(a1 + 11168) = 0u;
  *(void *)(a1 + 11184) = 0;
  *(_OWORD *)(a1 + 11192) = xmmword_20B8E30;
  *(void *)(a1 + 11208) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 11224) = 0;
  *(void *)(a1 + 11216) = 0;
  *(_DWORD *)(a1 + 11++*(_DWORD *)(result + 240) = 0;
  *(void *)(a1 + 11232) = 0;
  *(unsigned char *)(a1 + 11248) = 0;
  *(_OWORD *)(a1 + 11252) = 0u;
  *(_OWORD *)(a1 + 11268) = 0u;
  sub_5F3B34(a1 + 11288);
  *(_DWORD *)(a1 + 11480) = -1;
  *(_DWORD *)(a1 + 11488) = -1;
  *(_DWORD *)(a1 + 11491) = -1;
  *(void *)(a1 + 11495) = 0;
  *(void *)(a1 + 11511) = 0;
  *(void *)(a1 + 11503) = 0;
  *(_WORD *)(a1 + 11519) = 0;
  *(unsigned char *)(a1 + 11552) = 0;
  *(void *)(a1 + 11528) = 0;
  *(void *)(a1 + 11544) = 0;
  *(void *)(a1 + 11536) = 0;
  *(_OWORD *)(a1 + 11560) = 0u;
  *(_OWORD *)(a1 + 11576) = 0u;
  *(_OWORD *)(a1 + 11592) = 0u;
  *(_OWORD *)(a1 + 11608) = 0u;
  *(_OWORD *)(a1 + 11624) = 0u;
  *(_OWORD *)(a1 + 11640) = 0u;
  *(_OWORD *)(a1 + 11656) = 0u;
  *(_OWORD *)(a1 + 11672) = 0u;
  *(void *)(a1 + 11688) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 11696) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 11720) = 0;
  *(void *)(a1 + 11704) = 0;
  *(void *)(a1 + 11712) = 0;
  *(void *)(a1 + 11728) = 0x8000000080000000;
  *(void *)(a1 + 11752) = 0;
  *(void *)(a1 + 11736) = 0;
  *(void *)(a1 + 11744) = 0;
  sub_5F3B34(a1 + 11760);
  *(_DWORD *)(a1 + 11944) = 0;
  *(void *)(a1 + 11936) = 0;
  *(_OWORD *)(a1 + 11920) = 0u;
  *(unsigned char *)(a1 + 11948) = 1;
  *(_OWORD *)(a1 + 11952) = 0u;
  *(_OWORD *)(a1 + 11968) = 0u;
  *(_OWORD *)(a1 + 11984) = 0u;
  *(_OWORD *)(a1 + 12000) = 0u;
  *(_OWORD *)(a1 + 12016) = 0u;
  *(_OWORD *)(a1 + 12032) = 0u;
  *(_OWORD *)(a1 + 12048) = 0u;
  *(_OWORD *)(a1 + 12064) = 0u;
  *(_OWORD *)(a1 + 12080) = 0u;
  *(_OWORD *)(a1 + 12096) = 0u;
  *(_OWORD *)(a1 + 12112) = 0u;
  *(void *)(a1 + 12128) = 0;
  *(_DWORD *)(a1 + 12136) = 1065353216;
  *(void *)(a1 + 12168) = 0;
  *(_OWORD *)(a1 + 12152) = 0u;
  *(void *)(a1 + 12144) = off_243A070;
  *(unsigned char *)(a1 + 12176) = 0;
  *(void *)(a1 + 12208) = 0;
  *(_OWORD *)(a1 + 12192) = 0u;
  *(void *)(a1 + 12184) = off_243A0A8;
  *(unsigned char *)(a1 + 12216) = 0;
  *(_OWORD *)(a1 + 12224) = 0u;
  *(_OWORD *)(a1 + 12++*(_DWORD *)(result + 240) = 0u;
  *(_DWORD *)(a1 + 12256) = 1065353216;
  *(_OWORD *)(a1 + 12264) = 0u;
  *(_OWORD *)(a1 + 12280) = 0u;
  *(_DWORD *)(a1 + 12296) = 1065353216;
  *(void *)(a1 + 12320) = 0;
  *(_OWORD *)(a1 + 12304) = 0u;
  sub_64E11C((void *)a1);
  return a1;
}

void sub_64DC88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object, void **a14, void *a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,void **a25,uint64_t a26,void **a27,void **a28,void **a29,char *a30,void *a31)
{
  if (*v38) {
    operator delete(*v38);
  }
  sub_5917F0(v33);
  sub_591864(v37);
  sub_591918(v36);
  uint64_t v41 = *(void **)(v31 + 12056);
  if (v41)
  {
    *(void *)(v31 + 12064) = v41;
    operator delete(v41);
    int v42 = *(void **)(v31 + 12024);
    if (!v42)
    {
LABEL_5:
      if ((*(char *)(v32 + 831) & 0x80000000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else
  {
    int v42 = *(void **)(v31 + 12024);
    if (!v42) {
      goto LABEL_5;
    }
  }
  *(void *)(v31 + 12032) = v42;
  operator delete(v42);
  if ((*(char *)(v32 + 831) & 0x80000000) == 0)
  {
LABEL_7:
    sub_28F14C(v35);
    sub_5919CC(a14);
    sub_591A38(a31);
    size_t v43 = *(void **)(v31 + 11664);
    if (v43)
    {
      *(void *)(v31 + 11672) = v43;
      operator delete(v43);
      uint64_t v44 = *(void **)(v31 + 11632);
      if (v44)
      {
LABEL_17:
        *(void *)(v31 + 11640) = v44;
        operator delete(v44);
        sub_4B1DB4((void **)(v31 + 11608));
        sub_4B1DB4((void **)(v31 + 11584));
        long long v45 = *v34;
        if (!*v34) {
          goto LABEL_15;
        }
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v44 = *(void **)(v31 + 11632);
      if (v44) {
        goto LABEL_17;
      }
    }
    sub_4B1DB4((void **)(v31 + 11608));
    sub_4B1DB4((void **)(v31 + 11584));
    long long v45 = *v34;
    if (!*v34)
    {
LABEL_15:
      sub_52F970(v40);
      sub_52F970(v39);
      sub_591AC8((uint64_t **)(v31 + 10176));
      sub_591B4C(a15);
      if (a30[2704] < 0) {
        operator delete(*(void **)(v31 + 10080));
      }
      sub_591C10((void **)(v31 + 10056));
      sub_591C10((void **)(v31 + 10032));
      sub_591C10((void **)(v31 + 10008));
      sub_591CA4((void **)(v31 + 9984));
      sub_591D1C(a16);
      sub_4D4B58(a17);
      sub_4D4B58(a18);
      sub_4D4B58(a19);
      sub_4D4B58(a20);
      sub_4D4B58(a21);
      sub_52F090(a22);
      sub_52F090(a23);
      uint64_t v46 = (void **)(v31 + 7328);
      sub_591DA0((void **)(v31 + 7496));
      sub_591DFC((void *)(v31 + 7472));
      sub_591E78((void **)(v31 + 7448));
      sub_1A668((void **)(v31 + 7424));
      if (a30[24] < 0)
      {
        operator delete(*(void **)(v31 + 7400));
        if ((*a30 & 0x80000000) == 0)
        {
LABEL_23:
          sub_50E790((void **)(v31 + 7352));
          uint64_t v47 = *v46;
          if (!*v46) {
            goto LABEL_25;
          }
          goto LABEL_24;
        }
      }
      else if ((*a30 & 0x80000000) == 0)
      {
        goto LABEL_23;
      }
      operator delete(*(void **)(v31 + 7376));
      sub_50E790((void **)(v31 + 7352));
      uint64_t v47 = *v46;
      if (!*v46)
      {
LABEL_25:
        sub_4D4B58(a24);
        sub_1A668(a25);
        sub_575104(a26);
        sub_4F2BD0(a27);
        if (*(char *)(v31 + 1255) < 0) {
          operator delete(*(void **)(v31 + 1232));
        }
        if (*(char *)(v31 + 1231) < 0)
        {
          operator delete(*(void **)(v31 + 1208));
          sub_4A6814((uint64_t *)(v31 + 1184));
          int64_t v48 = *a28;
          if (!*a28)
          {
LABEL_29:
            int v49 = (void **)(v31 + 1088);
            size_t v50 = (void **)(v31 + 1112);
            int v51 = *(void **)(v31 + 1136);
            if (!v51) {
              goto LABEL_31;
            }
            goto LABEL_30;
          }
        }
        else
        {
          sub_4A6814((uint64_t *)(v31 + 1184));
          int64_t v48 = *a28;
          if (!*a28) {
            goto LABEL_29;
          }
        }
        *(void *)(v31 + 1168) = v48;
        operator delete(v48);
        int v49 = (void **)(v31 + 1088);
        size_t v50 = (void **)(v31 + 1112);
        int v51 = *(void **)(v31 + 1136);
        if (!v51)
        {
LABEL_31:
          sub_591648(v50);
          sub_591ED4(v49);
          sub_591ED4(a29);
          sub_3AFFFC(v31);
          _Unwind_Resume(a1);
        }
LABEL_30:
        *(void *)(v31 + 1144) = v51;
        operator delete(v51);
        goto LABEL_31;
      }
LABEL_24:
      *(void *)(v31 + 7336) = v47;
      operator delete(v47);
      goto LABEL_25;
    }
LABEL_14:
    *(void *)(v31 + 11568) = v45;
    operator delete(v45);
    goto LABEL_15;
  }
LABEL_6:
  operator delete(*(void **)(v31 + 12000));
  goto LABEL_7;
}

void sub_64E058()
{
}

void sub_64E060()
{
}

void sub_64E068()
{
}

void sub_64E070()
{
}

void sub_64E078()
{
}

void sub_64E080()
{
}

void sub_64E088()
{
}

void sub_64E090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27)
{
  sub_4F2BD0(a27);
  if ((*(char *)(v27 + 1255) & 0x80000000) == 0) {
    JUMPOUT(0x64DF94);
  }
  JUMPOUT(0x64DF8CLL);
}

void sub_64E0AC()
{
  if ((*(char *)(v0 + 1255) & 0x80000000) == 0) {
    JUMPOUT(0x64DF94);
  }
  JUMPOUT(0x64DF8CLL);
}

void sub_64E0C0()
{
  if (!*(void *)(v0 + 1136)) {
    JUMPOUT(0x64DFC8);
  }
  JUMPOUT(0x64DFC0);
}

void sub_64E0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object)
{
  sub_3AFFFC(v13);
  _Unwind_Resume(a1);
}

void sub_64E0EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object)
{
  sub_3310C(v13 - 176);
  int v14 = *(void **)(v13 - 128);
  if (v14)
  {
    *(void *)(v13 - 120) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_64E11C(void *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 1538);
  unint64_t v3 = sub_46C760(a1);
  sub_3D110(v2, v3);
  unint64_t result = sub_46C760(a1);
  if (result)
  {
    for (unint64_t i = 0; i < result; ++i)
    {
      while (1)
      {
        uint64_t v6 = (unint64_t *)a1[129];
        char v7 = (unint64_t *)a1[130];
        if (v6 != v7) {
          break;
        }
        LOBYTE(v11) = 1;
        unint64_t v13 = a1[1539];
        uint64_t v14 = a1[1540];
        if (v13 != v14 << 6) {
          goto LABEL_17;
        }
LABEL_20:
        if ((uint64_t)(v13 + 1) < 0) {
          sub_2E00();
        }
        unint64_t v18 = v14 << 7;
        if (v18 <= (v13 & 0xFFFFFFFFFFFFFFC0) + 64) {
          unint64_t v18 = (v13 & 0xFFFFFFFFFFFFFFC0) + 64;
        }
        if (v13 <= 0x3FFFFFFFFFFFFFFELL) {
          unint64_t v19 = v18;
        }
        else {
          unint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
        }
        sub_3D110(v2, v19);
        unint64_t v20 = a1[1539];
        a1[1539] = v20 + 1;
        uint64_t v15 = a1[1538];
        unint64_t v16 = v20 >> 6;
        uint64_t v17 = 1 << v20;
        if (!v11) {
          goto LABEL_27;
        }
LABEL_3:
        *(void *)(v15 + 8 * v16) &= ~v17;
        ++i;
        unint64_t result = sub_46C760(a1);
        if (i >= result) {
          return result;
        }
      }
      do
      {
        unint64_t v8 = *v6;
        unint64_t v9 = v6[1];
        v6 += 8;
        BOOL v11 = v8 > i || v9 < i;
      }
      while (v11 && v6 != v7);
      unint64_t v13 = a1[1539];
      uint64_t v14 = a1[1540];
      if (v13 == v14 << 6) {
        goto LABEL_20;
      }
LABEL_17:
      a1[1539] = v13 + 1;
      uint64_t v15 = a1[1538];
      unint64_t v16 = v13 >> 6;
      uint64_t v17 = 1 << v13;
      if (v11) {
        goto LABEL_3;
      }
LABEL_27:
      *(void *)(v15 + 8 * v16) |= v17;
      unint64_t result = sub_46C760(a1);
    }
  }
  return result;
}

uint64_t sub_64E28C(uint64_t a1)
{
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 120) = -1;
  *(_DWORD *)(a1 + 128) = -1;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 142) = 0;
  *(_DWORD *)(a1 + 152) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 160) = 0x7FFFFFFF;
  *(void *)(a1 + 164) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)&long long v2 = 0x8000000080000000;
  *(void *)(a1 + 184) = 0x8000000080000000;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(unsigned char *)(a1 + ++*(_DWORD *)(result + 240) = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 244) = 0x8000000080000000;
  *(_DWORD *)(a1 + 252) = 0x7FFFFFFF;
  *(_DWORD *)(a1 + 264) = -1;
  *(_OWORD *)(a1 + 272) = xmmword_20E8160;
  *(_DWORD *)(a1 + 288) = -1;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 302) = 0;
  *(_DWORD *)(a1 + 312) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + 320) = 0x7FFFFFFF;
  *(void *)(a1 + 324) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 344) = 0x8000000080000000;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(unsigned char *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 404) = 0x7FFFFFFF;
  *(void *)(a1 + 408) = 0x8000000080000000;
  *(_DWORD *)(a1 + 424) = -1;
  *(_OWORD *)(a1 + 432) = xmmword_20E8160;
  *(_DWORD *)(a1 + 448) = 0x7FFFFFFF;
  *(void *)(a1 + 452) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 464) = 0u;
  *(void *)(a1 + 488) = 0x8000000080000000;
  *(_DWORD *)(a1 + 496) = 0x7FFFFFFF;
  *(void *)(a1 + 504) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 512) = 0x8000000080000000;
  *(_DWORD *)(a1 + 520) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *((void *)&v2 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = v2;
  *(void *)(a1 + 816) = 0;
  *(_OWORD *)(a1 + 784) = v2;
  *(_OWORD *)(a1 + 800) = 0u;
  *(unsigned char *)(a1 + 824) = 1;
  *(_DWORD *)(a1 + 825) = 0;
  *(unsigned char *)(a1 + 829) = 1;
  *(_DWORD *)(a1 + 833) = 0;
  *(_DWORD *)(a1 + 830) = 0;
  *(void *)(a1 + 1048) = 0;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_WORD *)(a1 + 1056) = 259;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1++*(_DWORD *)(result + 240) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  sub_4F29BC(a1 + 1256);
  sub_59171C(a1 + 2344);
  *(void *)(a1 + 7160) = 0;
  *(_OWORD *)(a1 + 7144) = 0u;
  sub_5F3B34(a1 + 7168);
  *(_OWORD *)(a1 + 7504) = 0u;
  *(_OWORD *)(a1 + 7488) = 0u;
  *(_OWORD *)(a1 + 7472) = 0u;
  *(_OWORD *)(a1 + 7456) = 0u;
  *(_OWORD *)(a1 + 7440) = 0u;
  *(_OWORD *)(a1 + 7424) = 0u;
  *(_OWORD *)(a1 + 7408) = 0u;
  *(_OWORD *)(a1 + 7392) = 0u;
  *(_OWORD *)(a1 + 7376) = 0u;
  *(_OWORD *)(a1 + 7360) = 0u;
  *(_OWORD *)(a1 + 7344) = 0u;
  *(_OWORD *)(a1 + 7328) = 0u;
  sub_5A9D64(a1 + 7520);
  sub_5A9D64(a1 + 8336);
  sub_5F3B34(a1 + 9152);
  sub_5F3B34(a1 + 9312);
  sub_5F3B34(a1 + 9472);
  sub_5F3B34(a1 + 9632);
  sub_5F3B34(a1 + 9792);
  *(void *)(a1 + 9968) = 0;
  *(_OWORD *)(a1 + 9952) = 0u;
  *(_WORD *)(a1 + 9976) = 0;
  *(_OWORD *)(a1 + 9984) = 0u;
  *(_OWORD *)(a1 + 10000) = 0u;
  *(_OWORD *)(a1 + 10016) = 0u;
  *(_OWORD *)(a1 + 10032) = 0u;
  *(_OWORD *)(a1 + 10048) = 0u;
  *(_OWORD *)(a1 + 10064) = 0u;
  *(_OWORD *)(a1 + 10080) = 0u;
  *(void *)(a1 + 10096) = 0;
  *(void *)(a1 + 10104) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 10112) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 10168) = 0;
  *(_OWORD *)(a1 + 10120) = 0u;
  *(_OWORD *)(a1 + 10136) = 0u;
  *(_OWORD *)(a1 + 10152) = 0u;
  *(void *)(a1 + 10192) = 0;
  *(_OWORD *)(a1 + 10176) = 0u;
  *(void *)(a1 + 10200) = -1;
  *(_DWORD *)(a1 + 10208) = 0x7FFFFFFF;
  *(void *)(a1 + 10216) = -1;
  *(void *)(a1 + 10224) = -1;
  *(void *)(a1 + 10232) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 10++*(_DWORD *)(result + 240) = 0;
  *(_DWORD *)(a1 + 10248) = -1935635296;
  *(void *)(a1 + 10256) = 0;
  *(_DWORD *)(a1 + 10263) = 0;
  *(void *)(a1 + 10288) = 0;
  *(_DWORD *)(a1 + 10296) = 0;
  *(void *)(a1 + 10272) = 0;
  *(void *)(a1 + 10280) = 0;
  *(unsigned char *)(a1 + 10300) = 100;
  *(void *)(a1 + 10304) = 0;
  *(_DWORD *)(a1 + 10312) = 0;
  *(unsigned char *)(a1 + 10416) = 0;
  *(_OWORD *)(a1 + 10400) = 0u;
  *(_OWORD *)(a1 + 10384) = 0u;
  *(_OWORD *)(a1 + 10368) = 0u;
  *(_OWORD *)(a1 + 10352) = 0u;
  *(_OWORD *)(a1 + 10336) = 0u;
  *(_OWORD *)(a1 + 10320) = 0u;
  *(void *)(a1 + 10504) = 0;
  *(_OWORD *)(a1 + 10472) = 0u;
  *(_OWORD *)(a1 + 10488) = 0u;
  *(_OWORD *)(a1 + 10440) = 0u;
  *(_OWORD *)(a1 + 10456) = 0u;
  *(_OWORD *)(a1 + 10424) = 0u;
  *(_OWORD *)(a1 + 10512) = xmmword_20B8E30;
  *(void *)(a1 + 10528) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 10552) = 0;
  *(_DWORD *)(a1 + 10560) = 0;
  *(void *)(a1 + 10536) = 0;
  *(void *)(a1 + 10544) = 0;
  *(unsigned char *)(a1 + 10568) = 0;
  *(_OWORD *)(a1 + 10572) = 0u;
  *(_OWORD *)(a1 + 10588) = 0u;
  sub_5F3B34(a1 + 10608);
  *(_DWORD *)(a1 + 10800) = -1;
  *(_DWORD *)(a1 + 10808) = -1;
  *(_DWORD *)(a1 + 10811) = -1;
  *(void *)(a1 + 10815) = 0;
  *(void *)(a1 + 10831) = 0;
  *(void *)(a1 + 10823) = 0;
  *(_WORD *)(a1 + 10839) = 0;
  *(unsigned char *)(a1 + 10872) = 0;
  *(void *)(a1 + 10848) = 0;
  *(void *)(a1 + 10864) = 0;
  *(void *)(a1 + 10856) = 0;
  *(void *)(a1 + 10880) = -1;
  *(_DWORD *)(a1 + 10888) = 0x7FFFFFFF;
  *(void *)(a1 + 10896) = -1;
  *(void *)(a1 + 10904) = -1;
  *(void *)(a1 + 10912) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 10920) = 0;
  *(_DWORD *)(a1 + 10928) = -1935635296;
  *(_DWORD *)(a1 + 10943) = 0;
  *(void *)(a1 + 10936) = 0;
  *(void *)(a1 + 10968) = 0;
  *(_DWORD *)(a1 + 10976) = 0;
  *(void *)(a1 + 10952) = 0;
  *(void *)(a1 + 10960) = 0;
  *(unsigned char *)(a1 + 10980) = 100;
  *(void *)(a1 + 10984) = 0;
  *(_DWORD *)(a1 + 10992) = 0;
  *(_OWORD *)(a1 + 11000) = 0u;
  *(_OWORD *)(a1 + 11016) = 0u;
  *(_OWORD *)(a1 + 11032) = 0u;
  *(_OWORD *)(a1 + 11048) = 0u;
  *(_OWORD *)(a1 + 11064) = 0u;
  *(_OWORD *)(a1 + 11080) = 0u;
  *(unsigned char *)(a1 + 11096) = 0;
  *(_OWORD *)(a1 + 11104) = 0u;
  *(_OWORD *)(a1 + 11120) = 0u;
  *(_OWORD *)(a1 + 11136) = 0u;
  *(_OWORD *)(a1 + 11152) = 0u;
  *(_OWORD *)(a1 + 11168) = 0u;
  *(void *)(a1 + 11184) = 0;
  *(_OWORD *)(a1 + 11192) = xmmword_20B8E30;
  *(void *)(a1 + 11208) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 11224) = 0;
  *(void *)(a1 + 11216) = 0;
  *(_DWORD *)(a1 + 11++*(_DWORD *)(result + 240) = 0;
  *(void *)(a1 + 11232) = 0;
  *(unsigned char *)(a1 + 11248) = 0;
  *(_OWORD *)(a1 + 11252) = 0u;
  *(_OWORD *)(a1 + 11268) = 0u;
  sub_5F3B34(a1 + 11288);
  *(_DWORD *)(a1 + 11480) = -1;
  *(_DWORD *)(a1 + 11488) = -1;
  *(_DWORD *)(a1 + 11491) = -1;
  *(void *)(a1 + 11495) = 0;
  *(void *)(a1 + 11511) = 0;
  *(void *)(a1 + 11503) = 0;
  *(_WORD *)(a1 + 11519) = 0;
  *(unsigned char *)(a1 + 11552) = 0;
  *(void *)(a1 + 11528) = 0;
  *(void *)(a1 + 11544) = 0;
  *(void *)(a1 + 11536) = 0;
  *(_OWORD *)(a1 + 11560) = 0u;
  *(_OWORD *)(a1 + 11576) = 0u;
  *(_OWORD *)(a1 + 11592) = 0u;
  *(_OWORD *)(a1 + 11608) = 0u;
  *(_OWORD *)(a1 + 11624) = 0u;
  *(_OWORD *)(a1 + 11640) = 0u;
  *(_OWORD *)(a1 + 11656) = 0u;
  *(_OWORD *)(a1 + 11672) = 0u;
  *(void *)(a1 + 11688) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 11696) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 11720) = 0;
  *(void *)(a1 + 11704) = 0;
  *(void *)(a1 + 11712) = 0;
  *(void *)(a1 + 11728) = 0x8000000080000000;
  *(void *)(a1 + 11752) = 0;
  *(void *)(a1 + 11736) = 0;
  *(void *)(a1 + 11744) = 0;
  sub_5F3B34(a1 + 11760);
  *(_DWORD *)(a1 + 11944) = 0;
  *(void *)(a1 + 11936) = 0;
  *(_OWORD *)(a1 + 11920) = 0u;
  *(unsigned char *)(a1 + 11948) = 1;
  *(_OWORD *)(a1 + 11952) = 0u;
  *(_OWORD *)(a1 + 11968) = 0u;
  *(_OWORD *)(a1 + 11984) = 0u;
  *(_OWORD *)(a1 + 12000) = 0u;
  *(_OWORD *)(a1 + 12016) = 0u;
  *(_OWORD *)(a1 + 12032) = 0u;
  *(_OWORD *)(a1 + 12048) = 0u;
  *(_OWORD *)(a1 + 12064) = 0u;
  *(_OWORD *)(a1 + 12080) = 0u;
  *(_OWORD *)(a1 + 12096) = 0u;
  *(_OWORD *)(a1 + 12112) = 0u;
  *(void *)(a1 + 12128) = 0;
  *(_DWORD *)(a1 + 12136) = 1065353216;
  *(void *)(a1 + 12168) = 0;
  *(_OWORD *)(a1 + 12152) = 0u;
  *(void *)(a1 + 12144) = off_243A070;
  *(unsigned char *)(a1 + 12176) = 0;
  *(void *)(a1 + 12208) = 0;
  *(_OWORD *)(a1 + 12192) = 0u;
  *(void *)(a1 + 12184) = off_243A0A8;
  *(unsigned char *)(a1 + 12216) = 0;
  *(_OWORD *)(a1 + 12224) = 0u;
  *(_OWORD *)(a1 + 12++*(_DWORD *)(result + 240) = 0u;
  *(_DWORD *)(a1 + 12256) = 1065353216;
  *(_OWORD *)(a1 + 12264) = 0u;
  *(_OWORD *)(a1 + 12280) = 0u;
  *(_DWORD *)(a1 + 12296) = 1065353216;
  *(void *)(a1 + 12320) = 0;
  *(_OWORD *)(a1 + 12304) = 0u;
  *(_DWORD *)(sub_3AEFFC(a1) + 8) = 1000000000;
  *(_DWORD *)(sub_46CAA4(a1) + 8) = 1000000000;
  return a1;
}

void sub_64E954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, void **a20,uint64_t a21,void **a22,void **a23,char *a24,_Unwind_Exception *exception_object)
{
  uint64_t v32 = *(void **)(v25 + 12304);
  if (v32) {
    operator delete(v32);
  }
  sub_5917F0(v26);
  sub_591864(v31);
  sub_591918((void **)(v25 + 12080));
  uint64_t v33 = *(void **)(v25 + 12056);
  if (v33)
  {
    *(void *)(v25 + 12064) = v33;
    operator delete(v33);
    uint64_t v34 = (void *)(v25 + 11688);
    uint64_t v35 = (void **)(v25 + 11952);
    uint64_t v36 = (void **)(v25 + 11976);
    uint64_t v37 = *(void **)(v25 + 12024);
    if (!v37)
    {
LABEL_5:
      if ((*(char *)(v28 + 831) & 0x80000000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v34 = (void *)(v25 + 11688);
    uint64_t v35 = (void **)(v25 + 11952);
    uint64_t v36 = (void **)(v25 + 11976);
    uint64_t v37 = *(void **)(v25 + 12024);
    if (!v37) {
      goto LABEL_5;
    }
  }
  *(void *)(v25 + 12032) = v37;
  operator delete(v37);
  if ((*(char *)(v28 + 831) & 0x80000000) == 0)
  {
LABEL_7:
    sub_28F14C(v36);
    sub_5919CC(v35);
    sub_591A38(v34);
    uint64_t v38 = *(void **)(v25 + 11664);
    if (v38)
    {
      *(void *)(v25 + 11672) = v38;
      operator delete(v38);
      uint64_t v39 = *(void **)(v25 + 11632);
      if (v39)
      {
LABEL_17:
        *(void *)(v25 + 11640) = v39;
        operator delete(v39);
        sub_4B1DB4((void **)(v25 + 11608));
        sub_4B1DB4((void **)(v25 + 11584));
        uint64_t v40 = *v27;
        if (!*v27) {
          goto LABEL_15;
        }
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v39 = *(void **)(v25 + 11632);
      if (v39) {
        goto LABEL_17;
      }
    }
    sub_4B1DB4((void **)(v25 + 11608));
    sub_4B1DB4((void **)(v25 + 11584));
    uint64_t v40 = *v27;
    if (!*v27)
    {
LABEL_15:
      sub_52F970(v30);
      sub_52F970(v29);
      sub_591AC8((uint64_t **)(v25 + 10176));
      sub_591B4C(a10);
      if (a24[2704] < 0) {
        operator delete(*(void **)(v25 + 10080));
      }
      sub_591C10((void **)(v25 + 10056));
      sub_591C10((void **)(v25 + 10032));
      sub_591C10((void **)(v25 + 10008));
      sub_591CA4((void **)(v25 + 9984));
      sub_591D1C(a11);
      sub_4D4B58(a12);
      sub_4D4B58(a13);
      sub_4D4B58(a14);
      sub_4D4B58(a15);
      sub_4D4B58(a16);
      sub_52F090(a17);
      sub_52F090(a18);
      uint64_t v41 = (void **)(v25 + 7328);
      sub_591DA0((void **)(v25 + 7496));
      sub_591DFC((void *)(v25 + 7472));
      sub_591E78((void **)(v25 + 7448));
      sub_1A668((void **)(v25 + 7424));
      if (a24[24] < 0)
      {
        operator delete(*(void **)(v25 + 7400));
        if ((*a24 & 0x80000000) == 0)
        {
LABEL_23:
          sub_50E790((void **)(v25 + 7352));
          int v42 = *v41;
          if (!*v41) {
            goto LABEL_25;
          }
          goto LABEL_24;
        }
      }
      else if ((*a24 & 0x80000000) == 0)
      {
        goto LABEL_23;
      }
      operator delete(*(void **)(v25 + 7376));
      sub_50E790((void **)(v25 + 7352));
      int v42 = *v41;
      if (!*v41)
      {
LABEL_25:
        sub_4D4B58(a19);
        sub_1A668(a20);
        sub_575104(a21);
        sub_4F2BD0(a22);
        if (*(char *)(v25 + 1255) < 0) {
          operator delete(*(void **)(v25 + 1232));
        }
        if (*(char *)(v25 + 1231) < 0)
        {
          operator delete(*(void **)(v25 + 1208));
          sub_4A6814((uint64_t *)(v25 + 1184));
          size_t v43 = *(void **)(v25 + 1160);
          if (!v43)
          {
LABEL_29:
            uint64_t v44 = *(void **)(v25 + 1136);
            if (!v44) {
              goto LABEL_31;
            }
            goto LABEL_30;
          }
        }
        else
        {
          sub_4A6814((uint64_t *)(v25 + 1184));
          size_t v43 = *(void **)(v25 + 1160);
          if (!v43) {
            goto LABEL_29;
          }
        }
        *(void *)(v25 + 1168) = v43;
        operator delete(v43);
        uint64_t v44 = *(void **)(v25 + 1136);
        if (!v44)
        {
LABEL_31:
          sub_591648((void **)(v25 + 1112));
          sub_591ED4((void **)(v25 + 1088));
          sub_591ED4(a23);
          sub_3AFFFC(v25);
          _Unwind_Resume(a1);
        }
LABEL_30:
        *(void *)(v25 + 1144) = v44;
        operator delete(v44);
        goto LABEL_31;
      }
LABEL_24:
      *(void *)(v25 + 7336) = v42;
      operator delete(v42);
      goto LABEL_25;
    }
LABEL_14:
    *(void *)(v25 + 11568) = v40;
    operator delete(v40);
    goto LABEL_15;
  }
LABEL_6:
  operator delete(*(void **)(v25 + 12000));
  goto LABEL_7;
}

void sub_64ED40()
{
}

void sub_64ED48()
{
}

void sub_64ED50()
{
}

void sub_64ED58()
{
}

void sub_64ED60()
{
}

void sub_64ED68()
{
}

void sub_64ED70()
{
}

void sub_64ED78()
{
}

void sub_64ED80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  sub_4F2BD0(a22);
  if ((*(char *)(v22 + 1255) & 0x80000000) == 0) {
    JUMPOUT(0x64EC90);
  }
  JUMPOUT(0x64EC88);
}

void sub_64ED9C()
{
  if ((*(char *)(v0 + 1255) & 0x80000000) == 0) {
    JUMPOUT(0x64EC90);
  }
  JUMPOUT(0x64EC88);
}

_DWORD *sub_64EDB4@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)result + 146);
  if (*((void *)result + 145) == v3)
  {
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(_DWORD *)a2 = 0x7FFFFFFF;
    *(void *)(a2 + 4) = 0x7FFFFFFF7FFFFFFFLL;
  }
  else
  {
    int v4 = *(_DWORD *)(v3 - 4);
    uint64_t v5 = sub_374DF4((uint64_t)result);
    long long v7 = *(_OWORD *)(v5 + 8);
    uint64_t v8 = *(void *)(v5 + 24);
    uint64_t v6 = sub_52060((uint64_t)&v7);
    if (v4 == 0x7FFFFFFF) {
      return (_DWORD *)sub_3FB1F0(v6, a2);
    }
    else {
      return sub_3FB048(a2, v4, v6);
    }
  }
  return result;
}

uint64_t sub_64EE80(uint64_t a1)
{
  uint64_t v1 = sub_374DF4(a1);
  long long v3 = *(_OWORD *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 24);
  return sub_52060((uint64_t)&v3);
}

uint64_t sub_64EEB8(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 11664);
  uint64_t v3 = *(void *)(a1 + 11672) - v2;
  if (!v3) {
    return 1;
  }
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (v3 >> 3);
  uint64_t v5 = *(void *)(a1 + 11664);
  do
  {
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = v5 + 24 * (v4 >> 1);
    unint64_t v8 = *(void *)(v7 + 8);
    uint64_t v9 = v7 + 24;
    v4 += ~(v4 >> 1);
    if (v8 > a2) {
      unint64_t v4 = v6;
    }
    else {
      uint64_t v5 = v9;
    }
  }
  while (v4);
  if (v5 == v2) {
    return 1;
  }
  else {
    return *(unsigned int *)(v5 - 24);
  }
}

uint64_t *sub_64EF20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 9984);
  if (v2 == *(void *)(a1 + 9992))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F69B8, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_24F69B8))
    {
      return &qword_24F69A0;
    }
    else
    {
      qword_24F69A0 = 0;
      *(void *)algn_24F69A8 = 0;
      qword_24F69B0 = 0;
      __cxa_guard_release(&qword_24F69B8);
      return &qword_24F69A0;
    }
  }
  else
  {
    return (uint64_t *)nullsub_1(v2 + 40 * a2);
  }
}

uint64_t sub_64EFB8(uint64_t a1)
{
  return a1 + 10200;
}

uint64_t sub_64EFC4(uint64_t a1)
{
  return a1 + 10880;
}

uint64_t sub_64EFD0(uint64_t a1, uint64_t a2)
{
  return sub_5A303C(a1 + 10880, a2);
}

BOOL sub_64EFDC(uint64_t a1)
{
  return *(void *)(a1 + 11120) != *(void *)(a1 + 11128);
}

BOOL sub_64EFF0(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 312) == 0x7FFFFFFF) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 348) == 0x7FFFFFFF) {
    return 0;
  }
  BOOL result = sub_40A45C((int *)(a1 + 320));
  if (result)
  {
    int v3 = *(_DWORD *)(a1 + 424);
    if (v3 == -1) {
      return 0;
    }
    if (v3 == 1)
    {
      unint64_t v4 = *(void *)(a1 + 416);
      return v4 < 0xFFFFFFFF00000000 && v4 != 0;
    }
    else
    {
      if (v3)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      return *(void *)(a1 + 416) != -1;
    }
  }
  return result;
}

BOOL sub_64F0E0(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 152) == 0x7FFFFFFF) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 188) == 0x7FFFFFFF) {
    return 0;
  }
  BOOL result = sub_40A45C((int *)(a1 + 160));
  if (result)
  {
    int v3 = *(_DWORD *)(a1 + 264);
    if (v3 == -1) {
      return 0;
    }
    if (v3 == 1)
    {
      unint64_t v4 = *(void *)(a1 + 256);
      return v4 < 0xFFFFFFFF00000000 && v4 != 0;
    }
    else
    {
      if (v3)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      return *(void *)(a1 + 256) != -1;
    }
  }
  return result;
}

uint64_t sub_64F1D0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 11282);
}

uint64_t sub_64F1DC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 11280);
}

BOOL sub_64F1E8(uint64_t a1)
{
  return *(unsigned char *)(a1 + 9977) || *(void *)(a1 + 1064) != *(void *)(a1 + 1072);
}

uint64_t sub_64F210(uint64_t a1)
{
  uint64_t v1 = sub_374DF4(a1);
  sub_40A454(v1 + 8);
  return 0;
}

uint64_t sub_64F234(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 10601);
}

uint64_t sub_64F240(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 11281);
}

BOOL sub_64F24C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 10601)) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 152) == 0x7FFFFFFF) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 188) == 0x7FFFFFFF) {
    return 0;
  }
  BOOL result = sub_40A45C((int *)(a1 + 160));
  if (result)
  {
    int v3 = *(_DWORD *)(a1 + 264);
    if (v3 == -1) {
      return 0;
    }
    if (v3 == 1)
    {
      unint64_t v4 = *(void *)(a1 + 256);
      return v4 < 0xFFFFFFFF00000000 && v4 != 0;
    }
    else
    {
      if (v3)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      return *(void *)(a1 + 256) != -1;
    }
  }
  return result;
}

BOOL sub_64F348(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 11281)) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 312) == 0x7FFFFFFF) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 348) == 0x7FFFFFFF) {
    return 0;
  }
  BOOL result = sub_40A45C((int *)(a1 + 320));
  if (result)
  {
    int v3 = *(_DWORD *)(a1 + 424);
    if (v3 == -1) {
      return 0;
    }
    if (v3 == 1)
    {
      unint64_t v4 = *(void *)(a1 + 416);
      return v4 < 0xFFFFFFFF00000000 && v4 != 0;
    }
    else
    {
      if (v3)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      return *(void *)(a1 + 416) != -1;
    }
  }
  return result;
}

uint64_t sub_64F444(uint64_t a1)
{
  return a1 + 10320;
}

uint64_t sub_64F450(uint64_t a1)
{
  return a1 + 11000;
}

uint64_t sub_64F45C(uint64_t a1)
{
  return a1 + 11048;
}

uint64_t sub_64F468(uint64_t a1)
{
  return a1 + 10344;
}

uint64_t sub_64F474(uint64_t a1)
{
  return a1 + 11024;
}

char *sub_64F484(char **a1, long long *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v9 = *a1;
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0x666666666666666) {
      sub_2E00();
    }
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - (void)v9) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x333333333333333) {
      unint64_t v13 = 0x666666666666666;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 > 0x666666666666666) {
        sub_188D718();
      }
      uint64_t v14 = (char *)operator new(40 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[40 * v10];
    long long v16 = a2[1];
    *(_OWORD *)uint64_t v15 = *a2;
    *((_OWORD *)v15 + 1) = v16;
    *((void *)v15 + 4) = *((void *)a2 + 4);
    unint64_t v8 = v15 + 40;
    if (v5 != v9)
    {
      do
      {
        long long v17 = *(_OWORD *)(v5 - 40);
        long long v18 = *(_OWORD *)(v5 - 24);
        *((void *)v15 - 1) = *((void *)v5 - 1);
        *(_OWORD *)(v15 - 24) = v18;
        *(_OWORD *)(v15 - 40) = v17;
        v15 -= 40;
        v5 -= 40;
      }
      while (v5 != v9);
      uint64_t v5 = *a1;
    }
    *a1 = v15;
    a1[1] = v8;
    a1[2] = &v14[40 * v13];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    long long v6 = *a2;
    long long v7 = a2[1];
    *((void *)v5 + 4) = *((void *)a2 + 4);
    *(_OWORD *)uint64_t v5 = v6;
    *((_OWORD *)v5 + 1) = v7;
    unint64_t v8 = v5 + 40;
  }
  a1[1] = v8;
  return v8 - 40;
}

uint64_t sub_64F5D0(uint64_t a1)
{
  return *(void *)(a1 + 504);
}

BOOL sub_64F5D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 1072);
  if (*(void *)(a1 + 1064) == v1) {
    return 0;
  }
  int v2 = *(unsigned __int8 *)(v1 - 2072);
  return v2 != 3 && v2 != 5;
}

BOOL sub_64F608(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 1072);
  if (*(void *)(a1 + 1064) == v2) {
    return 1;
  }
  int v3 = *(unsigned __int8 *)(v2 - 2072);
  return a2 == 3 && v3 == 5 || v3 == a2;
}

uint64_t sub_64F63C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = nullsub_1(a2);
  long long v7 = (const void *)sub_46C7D0(a2);
  uint64_t v8 = sub_46C7D8(a2);
  long long v18 = 0;
  unint64_t v19 = 0;
  long long v17 = 0;
  uint64_t v9 = v8 - (void)v7;
  if ((const void *)v8 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    unint64_t v10 = (const void *)v8;
    unint64_t v11 = (char *)operator new(v8 - (void)v7);
    unint64_t v12 = &v11[8 * (v9 >> 3)];
    long long v17 = v11;
    unint64_t v19 = v12;
    if (v10 != v7) {
      memmove(v11, v7, v9 - 4);
    }
    long long v18 = v12;
  }
  sub_46C80C(a2, v14);
  sub_46EFD4(a1, v6, (uint64_t *)(a2 + 512), (void *)(a2 + 504), (long long *)(a2 + 800), a2 + 128, a2 + 288, (uint64_t)&v17, (uint64_t *)(a2 + 1032), (uint64_t)v14);
  if (v15)
  {
    long long v16 = v15;
    operator delete(v15);
  }
  if (v14[0])
  {
    v14[1] = v14[0];
    operator delete(v14[0]);
  }
  if (v17)
  {
    long long v18 = v17;
    operator delete(v17);
  }
  *(unsigned char *)(a1 + 1056) = 0;
  *(unsigned char *)(a1 + 1057) = sub_46CA54((int ***)a2);
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  sub_4052F0((void *)a2, a1 + 1160);
  *(void *)(a1 + 1248) = 0;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  sub_4F29BC(a1 + 1256);
  sub_59171C(a1 + 2344);
  *(void *)(a1 + 7160) = 0;
  *(_OWORD *)(a1 + 7144) = 0u;
  sub_5F3B34(a1 + 7168);
  *(_OWORD *)(a1 + 7504) = 0u;
  *(_OWORD *)(a1 + 7488) = 0u;
  *(_OWORD *)(a1 + 7472) = 0u;
  *(_OWORD *)(a1 + 7456) = 0u;
  *(_OWORD *)(a1 + 7440) = 0u;
  *(_OWORD *)(a1 + 7424) = 0u;
  *(_OWORD *)(a1 + 7408) = 0u;
  *(_OWORD *)(a1 + 7392) = 0u;
  *(_OWORD *)(a1 + 7376) = 0u;
  *(_OWORD *)(a1 + 7360) = 0u;
  *(_OWORD *)(a1 + 7344) = 0u;
  *(_OWORD *)(a1 + 7328) = 0u;
  sub_5A9D64(a1 + 7520);
  sub_5A9D64(a1 + 8336);
  sub_5F3B34(a1 + 9152);
  sub_5F3B34(a1 + 9312);
  sub_5F3B34(a1 + 9472);
  sub_5F3B34(a1 + 9632);
  sub_5F3B34(a1 + 9792);
  *(void *)(a1 + 9968) = 0;
  *(_OWORD *)(a1 + 9952) = 0u;
  *(unsigned char *)(a1 + 9976) = 0;
  *(unsigned char *)(a1 + 9977) = a3;
  *(_OWORD *)(a1 + 9984) = 0u;
  *(_OWORD *)(a1 + 10000) = 0u;
  *(_OWORD *)(a1 + 10016) = 0u;
  *(_OWORD *)(a1 + 10032) = 0u;
  *(_OWORD *)(a1 + 10048) = 0u;
  *(_OWORD *)(a1 + 10064) = 0u;
  *(_OWORD *)(a1 + 10080) = 0u;
  *(void *)(a1 + 10096) = 0;
  *(void *)(a1 + 10104) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 10112) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 10168) = 0;
  *(_OWORD *)(a1 + 10120) = 0u;
  *(_OWORD *)(a1 + 10136) = 0u;
  *(_OWORD *)(a1 + 10152) = 0u;
  *(void *)(a1 + 10192) = 0;
  *(_OWORD *)(a1 + 10176) = 0u;
  *(void *)(a1 + 10200) = -1;
  *(_DWORD *)(a1 + 10208) = 0x7FFFFFFF;
  *(void *)(a1 + 10216) = -1;
  *(void *)(a1 + 10224) = -1;
  *(void *)(a1 + 10232) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 10++*(_DWORD *)(result + 240) = 0;
  *(_DWORD *)(a1 + 10248) = -1935635296;
  *(void *)(a1 + 10256) = 0;
  *(_DWORD *)(a1 + 10263) = 0;
  *(void *)(a1 + 10288) = 0;
  *(_DWORD *)(a1 + 10296) = 0;
  *(void *)(a1 + 10272) = 0;
  *(void *)(a1 + 10280) = 0;
  *(unsigned char *)(a1 + 10300) = 100;
  *(void *)(a1 + 10304) = 0;
  *(_DWORD *)(a1 + 10312) = 0;
  *(unsigned char *)(a1 + 10416) = 0;
  *(_OWORD *)(a1 + 10400) = 0u;
  *(_OWORD *)(a1 + 10384) = 0u;
  *(_OWORD *)(a1 + 10368) = 0u;
  *(_OWORD *)(a1 + 10352) = 0u;
  *(_OWORD *)(a1 + 10336) = 0u;
  *(_OWORD *)(a1 + 10320) = 0u;
  *(void *)(a1 + 10504) = 0;
  *(_OWORD *)(a1 + 10472) = 0u;
  *(_OWORD *)(a1 + 10488) = 0u;
  *(_OWORD *)(a1 + 10440) = 0u;
  *(_OWORD *)(a1 + 10456) = 0u;
  *(_OWORD *)(a1 + 10424) = 0u;
  *(_OWORD *)(a1 + 10512) = xmmword_20B8E30;
  *(void *)(a1 + 10528) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 10552) = 0;
  *(_DWORD *)(a1 + 10560) = 0;
  *(void *)(a1 + 10536) = 0;
  *(void *)(a1 + 10544) = 0;
  *(unsigned char *)(a1 + 10568) = 0;
  *(_OWORD *)(a1 + 10572) = 0u;
  *(_OWORD *)(a1 + 10588) = 0u;
  sub_5F3B34(a1 + 10608);
  *(_DWORD *)(a1 + 10800) = -1;
  *(_DWORD *)(a1 + 10808) = -1;
  *(_DWORD *)(a1 + 10811) = -1;
  *(void *)(a1 + 10815) = 0;
  *(void *)(a1 + 10831) = 0;
  *(void *)(a1 + 10823) = 0;
  *(_WORD *)(a1 + 10839) = 0;
  *(unsigned char *)(a1 + 10872) = 0;
  *(void *)(a1 + 10848) = 0;
  *(void *)(a1 + 10864) = 0;
  *(void *)(a1 + 10856) = 0;
  *(void *)(a1 + 10880) = -1;
  *(_DWORD *)(a1 + 10888) = 0x7FFFFFFF;
  *(void *)(a1 + 10896) = -1;
  *(void *)(a1 + 10904) = -1;
  *(void *)(a1 + 10912) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 10920) = 0;
  *(_DWORD *)(a1 + 10928) = -1935635296;
  *(_DWORD *)(a1 + 10943) = 0;
  *(void *)(a1 + 10936) = 0;
  *(void *)(a1 + 10968) = 0;
  *(_DWORD *)(a1 + 10976) = 0;
  *(void *)(a1 + 10952) = 0;
  *(void *)(a1 + 10960) = 0;
  *(unsigned char *)(a1 + 10980) = 100;
  *(void *)(a1 + 10984) = 0;
  *(_DWORD *)(a1 + 10992) = 0;
  *(_OWORD *)(a1 + 11000) = 0u;
  *(_OWORD *)(a1 + 11016) = 0u;
  *(_OWORD *)(a1 + 11032) = 0u;
  *(_OWORD *)(a1 + 11048) = 0u;
  *(_OWORD *)(a1 + 11064) = 0u;
  *(_OWORD *)(a1 + 11080) = 0u;
  *(unsigned char *)(a1 + 11096) = 0;
  *(_OWORD *)(a1 + 11104) = 0u;
  *(_OWORD *)(a1 + 11120) = 0u;
  *(_OWORD *)(a1 + 11136) = 0u;
  *(_OWORD *)(a1 + 11152) = 0u;
  *(_OWORD *)(a1 + 11168) = 0u;
  *(void *)(a1 + 11184) = 0;
  *(_OWORD *)(a1 + 11192) = xmmword_20B8E30;
  *(void *)(a1 + 11208) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 11224) = 0;
  *(void *)(a1 + 11216) = 0;
  *(_DWORD *)(a1 + 11++*(_DWORD *)(result + 240) = 0;
  *(void *)(a1 + 11232) = 0;
  *(unsigned char *)(a1 + 11248) = 0;
  *(_OWORD *)(a1 + 11252) = 0u;
  *(_OWORD *)(a1 + 11268) = 0u;
  sub_5F3B34(a1 + 11288);
  *(_DWORD *)(a1 + 11480) = -1;
  *(_DWORD *)(a1 + 11488) = -1;
  *(_DWORD *)(a1 + 11491) = -1;
  *(void *)(a1 + 11495) = 0;
  *(void *)(a1 + 11511) = 0;
  *(void *)(a1 + 11503) = 0;
  *(_WORD *)(a1 + 11519) = 0;
  *(unsigned char *)(a1 + 11552) = 0;
  *(void *)(a1 + 11528) = 0;
  *(void *)(a1 + 11544) = 0;
  *(void *)(a1 + 11536) = 0;
  *(_OWORD *)(a1 + 11560) = 0u;
  *(_OWORD *)(a1 + 11576) = 0u;
  *(_OWORD *)(a1 + 11592) = 0u;
  *(_OWORD *)(a1 + 11608) = 0u;
  *(_OWORD *)(a1 + 11624) = 0u;
  *(_OWORD *)(a1 + 11640) = 0u;
  *(_OWORD *)(a1 + 11656) = 0u;
  *(_OWORD *)(a1 + 11672) = 0u;
  *(void *)(a1 + 11688) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 11696) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 11720) = 0;
  *(void *)(a1 + 11704) = 0;
  *(void *)(a1 + 11712) = 0;
  *(void *)(a1 + 11728) = 0x8000000080000000;
  *(void *)(a1 + 11752) = 0;
  *(void *)(a1 + 11736) = 0;
  *(void *)(a1 + 11744) = 0;
  sub_5F3B34(a1 + 11760);
  *(_DWORD *)(a1 + 11944) = 0;
  *(void *)(a1 + 11936) = 0;
  *(_OWORD *)(a1 + 11920) = 0u;
  *(unsigned char *)(a1 + 11948) = 1;
  *(_OWORD *)(a1 + 11952) = 0u;
  *(_OWORD *)(a1 + 11968) = 0u;
  *(_OWORD *)(a1 + 11984) = 0u;
  *(_OWORD *)(a1 + 12000) = 0u;
  *(_OWORD *)(a1 + 12016) = 0u;
  *(_OWORD *)(a1 + 12032) = 0u;
  *(_OWORD *)(a1 + 12048) = 0u;
  *(_OWORD *)(a1 + 12064) = 0u;
  *(_OWORD *)(a1 + 12080) = 0u;
  *(_OWORD *)(a1 + 12096) = 0u;
  *(_OWORD *)(a1 + 12112) = 0u;
  *(void *)(a1 + 12128) = 0;
  *(_DWORD *)(a1 + 12136) = 1065353216;
  *(void *)(a1 + 12168) = 0;
  *(_OWORD *)(a1 + 12152) = 0u;
  *(void *)(a1 + 12144) = off_243A070;
  *(unsigned char *)(a1 + 12176) = 0;
  *(void *)(a1 + 12208) = 0;
  *(_OWORD *)(a1 + 12192) = 0u;
  *(void *)(a1 + 12184) = off_243A0A8;
  *(unsigned char *)(a1 + 12216) = 0;
  *(_OWORD *)(a1 + 12224) = 0u;
  *(_OWORD *)(a1 + 12++*(_DWORD *)(result + 240) = 0u;
  *(_DWORD *)(a1 + 12256) = 1065353216;
  *(_OWORD *)(a1 + 12264) = 0u;
  *(_OWORD *)(a1 + 12280) = 0u;
  *(_DWORD *)(a1 + 12296) = 1065353216;
  *(void *)(a1 + 12320) = 0;
  *(_OWORD *)(a1 + 12304) = 0u;
  sub_64E11C((void *)a1);
  return a1;
}

void sub_64FCDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object, void **a14, void *a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,void **a25,uint64_t a26,void **a27,void **a28,void **a29,char *a30,void *a31)
{
  if (*v38) {
    operator delete(*v38);
  }
  sub_5917F0(v33);
  sub_591864(v37);
  sub_591918(v36);
  uint64_t v41 = *(void **)(v31 + 12056);
  if (v41)
  {
    *(void *)(v31 + 12064) = v41;
    operator delete(v41);
    int v42 = *(void **)(v31 + 12024);
    if (!v42)
    {
LABEL_5:
      if ((*(char *)(v32 + 831) & 0x80000000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else
  {
    int v42 = *(void **)(v31 + 12024);
    if (!v42) {
      goto LABEL_5;
    }
  }
  *(void *)(v31 + 12032) = v42;
  operator delete(v42);
  if ((*(char *)(v32 + 831) & 0x80000000) == 0)
  {
LABEL_7:
    sub_28F14C(v35);
    sub_5919CC(a14);
    sub_591A38(a31);
    size_t v43 = *(void **)(v31 + 11664);
    if (v43)
    {
      *(void *)(v31 + 11672) = v43;
      operator delete(v43);
      uint64_t v44 = *(void **)(v31 + 11632);
      if (v44)
      {
LABEL_17:
        *(void *)(v31 + 11640) = v44;
        operator delete(v44);
        sub_4B1DB4((void **)(v31 + 11608));
        sub_4B1DB4((void **)(v31 + 11584));
        long long v45 = *v34;
        if (!*v34) {
          goto LABEL_15;
        }
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v44 = *(void **)(v31 + 11632);
      if (v44) {
        goto LABEL_17;
      }
    }
    sub_4B1DB4((void **)(v31 + 11608));
    sub_4B1DB4((void **)(v31 + 11584));
    long long v45 = *v34;
    if (!*v34)
    {
LABEL_15:
      sub_52F970(v40);
      sub_52F970(v39);
      sub_591AC8((uint64_t **)(v31 + 10176));
      sub_591B4C(a15);
      if (a30[2704] < 0) {
        operator delete(*(void **)(v31 + 10080));
      }
      sub_591C10((void **)(v31 + 10056));
      sub_591C10((void **)(v31 + 10032));
      sub_591C10((void **)(v31 + 10008));
      sub_591CA4((void **)(v31 + 9984));
      sub_591D1C(a16);
      sub_4D4B58(a17);
      sub_4D4B58(a18);
      sub_4D4B58(a19);
      sub_4D4B58(a20);
      sub_4D4B58(a21);
      sub_52F090(a22);
      sub_52F090(a23);
      uint64_t v46 = (void **)(v31 + 7328);
      sub_591DA0((void **)(v31 + 7496));
      sub_591DFC((void *)(v31 + 7472));
      sub_591E78((void **)(v31 + 7448));
      sub_1A668((void **)(v31 + 7424));
      if (a30[24] < 0)
      {
        operator delete(*(void **)(v31 + 7400));
        if ((*a30 & 0x80000000) == 0)
        {
LABEL_23:
          sub_50E790((void **)(v31 + 7352));
          uint64_t v47 = *v46;
          if (!*v46) {
            goto LABEL_25;
          }
          goto LABEL_24;
        }
      }
      else if ((*a30 & 0x80000000) == 0)
      {
        goto LABEL_23;
      }
      operator delete(*(void **)(v31 + 7376));
      sub_50E790((void **)(v31 + 7352));
      uint64_t v47 = *v46;
      if (!*v46)
      {
LABEL_25:
        sub_4D4B58(a24);
        sub_1A668(a25);
        sub_575104(a26);
        sub_4F2BD0(a27);
        if (*(char *)(v31 + 1255) < 0) {
          operator delete(*(void **)(v31 + 1232));
        }
        if (*(char *)(v31 + 1231) < 0)
        {
          operator delete(*(void **)(v31 + 1208));
          sub_4A6814((uint64_t *)(v31 + 1184));
          int64_t v48 = *a28;
          if (!*a28)
          {
LABEL_29:
            int v49 = (void **)(v31 + 1088);
            size_t v50 = (void **)(v31 + 1112);
            int v51 = *(void **)(v31 + 1136);
            if (!v51) {
              goto LABEL_31;
            }
            goto LABEL_30;
          }
        }
        else
        {
          sub_4A6814((uint64_t *)(v31 + 1184));
          int64_t v48 = *a28;
          if (!*a28) {
            goto LABEL_29;
          }
        }
        *(void *)(v31 + 1168) = v48;
        operator delete(v48);
        int v49 = (void **)(v31 + 1088);
        size_t v50 = (void **)(v31 + 1112);
        int v51 = *(void **)(v31 + 1136);
        if (!v51)
        {
LABEL_31:
          sub_591648(v50);
          sub_591ED4(v49);
          sub_591ED4(a29);
          sub_3AFFFC(v31);
          _Unwind_Resume(a1);
        }
LABEL_30:
        *(void *)(v31 + 1144) = v51;
        operator delete(v51);
        goto LABEL_31;
      }
LABEL_24:
      *(void *)(v31 + 7336) = v47;
      operator delete(v47);
      goto LABEL_25;
    }
LABEL_14:
    *(void *)(v31 + 11568) = v45;
    operator delete(v45);
    goto LABEL_15;
  }
LABEL_6:
  operator delete(*(void **)(v31 + 12000));
  goto LABEL_7;
}

void sub_6500AC()
{
}

void sub_6500B4()
{
}

void sub_6500BC()
{
}

void sub_6500C4()
{
}

void sub_6500CC()
{
}

void sub_6500D4()
{
}

void sub_6500DC()
{
}

void sub_6500E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27)
{
  sub_4F2BD0(a27);
  if ((*(char *)(v27 + 1255) & 0x80000000) == 0) {
    JUMPOUT(0x64FFE8);
  }
  JUMPOUT(0x64FFE0);
}

void sub_650100()
{
  if ((*(char *)(v0 + 1255) & 0x80000000) == 0) {
    JUMPOUT(0x64FFE8);
  }
  JUMPOUT(0x64FFE0);
}

void sub_650114()
{
  if (!*(void *)(v0 + 1136)) {
    JUMPOUT(0x65001CLL);
  }
  JUMPOUT(0x650014);
}

void sub_65012C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object)
{
  sub_3AFFFC(v13);
  _Unwind_Resume(a1);
}

void sub_650140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object)
{
  sub_3310C(v13 - 176);
  uint64_t v14 = *(void **)(v13 - 128);
  if (v14)
  {
    *(void *)(v13 - 120) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_650174(uint64_t a1)
{
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 120) = -1;
  *(_DWORD *)(a1 + 128) = -1;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 142) = 0;
  *(_DWORD *)(a1 + 152) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 160) = 0x7FFFFFFF;
  *(void *)(a1 + 164) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)&long long v2 = 0x8000000080000000;
  *(void *)(a1 + 184) = 0x8000000080000000;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(unsigned char *)(a1 + ++*(_DWORD *)(result + 240) = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 244) = 0x8000000080000000;
  *(_DWORD *)(a1 + 252) = 0x7FFFFFFF;
  *(_DWORD *)(a1 + 264) = -1;
  *(_OWORD *)(a1 + 272) = xmmword_20E8160;
  *(_DWORD *)(a1 + 288) = -1;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 302) = 0;
  *(_DWORD *)(a1 + 312) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + 320) = 0x7FFFFFFF;
  *(void *)(a1 + 324) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 344) = 0x8000000080000000;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(unsigned char *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 404) = 0x7FFFFFFF;
  *(void *)(a1 + 408) = 0x8000000080000000;
  *(_DWORD *)(a1 + 424) = -1;
  *(_OWORD *)(a1 + 432) = xmmword_20E8160;
  *(_DWORD *)(a1 + 448) = 0x7FFFFFFF;
  *(void *)(a1 + 452) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 464) = 0u;
  *(void *)(a1 + 488) = 0x8000000080000000;
  *(_DWORD *)(a1 + 496) = 0x7FFFFFFF;
  *(void *)(a1 + 504) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 512) = 0x8000000080000000;
  *(_DWORD *)(a1 + 520) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *((void *)&v2 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = v2;
  *(void *)(a1 + 816) = 0;
  *(_OWORD *)(a1 + 784) = v2;
  *(_OWORD *)(a1 + 800) = 0u;
  *(unsigned char *)(a1 + 824) = 1;
  *(_DWORD *)(a1 + 825) = 0;
  *(unsigned char *)(a1 + 829) = 1;
  *(_DWORD *)(a1 + 833) = 0;
  *(_DWORD *)(a1 + 830) = 0;
  *(_OWORD *)(a1 + 1041) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(unsigned char *)(a1 + 1057) = 1;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1++*(_DWORD *)(result + 240) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  sub_4F29BC(a1 + 1256);
  sub_59171C(a1 + 2344);
  *(void *)(a1 + 7160) = 0;
  *(_OWORD *)(a1 + 7144) = 0u;
  sub_5F3B34(a1 + 7168);
  *(_OWORD *)(a1 + 7504) = 0u;
  *(_OWORD *)(a1 + 7488) = 0u;
  *(_OWORD *)(a1 + 7472) = 0u;
  *(_OWORD *)(a1 + 7456) = 0u;
  *(_OWORD *)(a1 + 7440) = 0u;
  *(_OWORD *)(a1 + 7424) = 0u;
  *(_OWORD *)(a1 + 7408) = 0u;
  *(_OWORD *)(a1 + 7392) = 0u;
  *(_OWORD *)(a1 + 7376) = 0u;
  *(_OWORD *)(a1 + 7360) = 0u;
  *(_OWORD *)(a1 + 7344) = 0u;
  *(_OWORD *)(a1 + 7328) = 0u;
  sub_5A9D64(a1 + 7520);
  sub_5A9D64(a1 + 8336);
  sub_5F3B34(a1 + 9152);
  sub_5F3B34(a1 + 9312);
  sub_5F3B34(a1 + 9472);
  sub_5F3B34(a1 + 9632);
  sub_5F3B34(a1 + 9792);
  *(void *)(a1 + 9968) = 0;
  *(_OWORD *)(a1 + 9952) = 0u;
  *(_WORD *)(a1 + 9976) = 0;
  *(_OWORD *)(a1 + 9984) = 0u;
  *(_OWORD *)(a1 + 10000) = 0u;
  *(_OWORD *)(a1 + 10016) = 0u;
  *(_OWORD *)(a1 + 10032) = 0u;
  *(_OWORD *)(a1 + 10048) = 0u;
  *(_OWORD *)(a1 + 10064) = 0u;
  *(_OWORD *)(a1 + 10080) = 0u;
  *(void *)(a1 + 10096) = 0;
  *(void *)(a1 + 10104) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 10112) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 10168) = 0;
  *(_OWORD *)(a1 + 10120) = 0u;
  *(_OWORD *)(a1 + 10136) = 0u;
  *(_OWORD *)(a1 + 10152) = 0u;
  *(void *)(a1 + 10192) = 0;
  *(_OWORD *)(a1 + 10176) = 0u;
  *(void *)(a1 + 10200) = -1;
  *(_DWORD *)(a1 + 10208) = 0x7FFFFFFF;
  *(void *)(a1 + 10216) = -1;
  *(void *)(a1 + 10224) = -1;
  *(void *)(a1 + 10232) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 10++*(_DWORD *)(result + 240) = 0;
  *(_DWORD *)(a1 + 10248) = -1935635296;
  *(void *)(a1 + 10256) = 0;
  *(_DWORD *)(a1 + 10263) = 0;
  *(void *)(a1 + 10288) = 0;
  *(_DWORD *)(a1 + 10296) = 0;
  *(void *)(a1 + 10272) = 0;
  *(void *)(a1 + 10280) = 0;
  *(unsigned char *)(a1 + 10300) = 100;
  *(void *)(a1 + 10304) = 0;
  *(_DWORD *)(a1 + 10312) = 0;
  *(unsigned char *)(a1 + 10416) = 0;
  *(_OWORD *)(a1 + 10400) = 0u;
  *(_OWORD *)(a1 + 10384) = 0u;
  *(_OWORD *)(a1 + 10368) = 0u;
  *(_OWORD *)(a1 + 10352) = 0u;
  *(_OWORD *)(a1 + 10336) = 0u;
  *(_OWORD *)(a1 + 10320) = 0u;
  *(void *)(a1 + 10504) = 0;
  *(_OWORD *)(a1 + 10472) = 0u;
  *(_OWORD *)(a1 + 10488) = 0u;
  *(_OWORD *)(a1 + 10440) = 0u;
  *(_OWORD *)(a1 + 10456) = 0u;
  *(_OWORD *)(a1 + 10424) = 0u;
  *(_OWORD *)(a1 + 10512) = xmmword_20B8E30;
  *(void *)(a1 + 10528) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 10552) = 0;
  *(_DWORD *)(a1 + 10560) = 0;
  *(void *)(a1 + 10536) = 0;
  *(void *)(a1 + 10544) = 0;
  *(unsigned char *)(a1 + 10568) = 0;
  *(_OWORD *)(a1 + 10572) = 0u;
  *(_OWORD *)(a1 + 10588) = 0u;
  sub_5F3B34(a1 + 10608);
  *(_DWORD *)(a1 + 10800) = -1;
  *(_DWORD *)(a1 + 10808) = -1;
  *(_DWORD *)(a1 + 10811) = -1;
  *(void *)(a1 + 10815) = 0;
  *(void *)(a1 + 10831) = 0;
  *(void *)(a1 + 10823) = 0;
  *(_WORD *)(a1 + 10839) = 0;
  *(unsigned char *)(a1 + 10872) = 0;
  *(void *)(a1 + 10848) = 0;
  *(void *)(a1 + 10864) = 0;
  *(void *)(a1 + 10856) = 0;
  *(void *)(a1 + 10880) = -1;
  *(_DWORD *)(a1 + 10888) = 0x7FFFFFFF;
  *(void *)(a1 + 10896) = -1;
  *(void *)(a1 + 10904) = -1;
  *(void *)(a1 + 10912) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 10920) = 0;
  *(_DWORD *)(a1 + 10928) = -1935635296;
  *(_DWORD *)(a1 + 10943) = 0;
  *(void *)(a1 + 10936) = 0;
  *(void *)(a1 + 10968) = 0;
  *(_DWORD *)(a1 + 10976) = 0;
  *(void *)(a1 + 10952) = 0;
  *(void *)(a1 + 10960) = 0;
  *(unsigned char *)(a1 + 10980) = 100;
  *(void *)(a1 + 10984) = 0;
  *(_DWORD *)(a1 + 10992) = 0;
  *(_OWORD *)(a1 + 11000) = 0u;
  *(_OWORD *)(a1 + 11016) = 0u;
  *(_OWORD *)(a1 + 11032) = 0u;
  *(_OWORD *)(a1 + 11048) = 0u;
  *(_OWORD *)(a1 + 11064) = 0u;
  *(_OWORD *)(a1 + 11080) = 0u;
  *(unsigned char *)(a1 + 11096) = 0;
  *(_OWORD *)(a1 + 11104) = 0u;
  *(_OWORD *)(a1 + 11120) = 0u;
  *(_OWORD *)(a1 + 11136) = 0u;
  *(_OWORD *)(a1 + 11152) = 0u;
  *(_OWORD *)(a1 + 11168) = 0u;
  *(void *)(a1 + 11184) = 0;
  *(_OWORD *)(a1 + 11192) = xmmword_20B8E30;
  *(void *)(a1 + 11208) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 11224) = 0;
  *(void *)(a1 + 11216) = 0;
  *(_DWORD *)(a1 + 11++*(_DWORD *)(result + 240) = 0;
  *(void *)(a1 + 11232) = 0;
  *(unsigned char *)(a1 + 11248) = 0;
  *(_OWORD *)(a1 + 11252) = 0u;
  *(_OWORD *)(a1 + 11268) = 0u;
  sub_5F3B34(a1 + 11288);
  *(_DWORD *)(a1 + 11480) = -1;
  *(_DWORD *)(a1 + 11488) = -1;
  *(_DWORD *)(a1 + 11491) = -1;
  *(void *)(a1 + 11495) = 0;
  *(void *)(a1 + 11511) = 0;
  *(void *)(a1 + 11503) = 0;
  *(_WORD *)(a1 + 11519) = 0;
  *(unsigned char *)(a1 + 11552) = 0;
  *(void *)(a1 + 11528) = 0;
  *(void *)(a1 + 11544) = 0;
  *(void *)(a1 + 11536) = 0;
  *(_OWORD *)(a1 + 11560) = 0u;
  *(_OWORD *)(a1 + 11576) = 0u;
  *(_OWORD *)(a1 + 11592) = 0u;
  *(_OWORD *)(a1 + 11608) = 0u;
  *(_OWORD *)(a1 + 11624) = 0u;
  *(_OWORD *)(a1 + 11640) = 0u;
  *(_OWORD *)(a1 + 11656) = 0u;
  *(_OWORD *)(a1 + 11672) = 0u;
  *(void *)(a1 + 11688) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 11696) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 11720) = 0;
  *(void *)(a1 + 11704) = 0;
  *(void *)(a1 + 11712) = 0;
  *(void *)(a1 + 11728) = 0x8000000080000000;
  *(void *)(a1 + 11752) = 0;
  *(void *)(a1 + 11736) = 0;
  *(void *)(a1 + 11744) = 0;
  sub_5F3B34(a1 + 11760);
  *(_DWORD *)(a1 + 11944) = 0;
  *(void *)(a1 + 11936) = 0;
  *(_OWORD *)(a1 + 11920) = 0u;
  *(unsigned char *)(a1 + 11948) = 1;
  *(_OWORD *)(a1 + 11952) = 0u;
  *(_OWORD *)(a1 + 11968) = 0u;
  *(_OWORD *)(a1 + 11984) = 0u;
  *(_OWORD *)(a1 + 12000) = 0u;
  *(_OWORD *)(a1 + 12016) = 0u;
  *(_OWORD *)(a1 + 12032) = 0u;
  *(_OWORD *)(a1 + 12048) = 0u;
  *(_OWORD *)(a1 + 12064) = 0u;
  *(_OWORD *)(a1 + 12080) = 0u;
  *(_OWORD *)(a1 + 12096) = 0u;
  *(_OWORD *)(a1 + 12112) = 0u;
  *(void *)(a1 + 12128) = 0;
  *(_DWORD *)(a1 + 12136) = 1065353216;
  *(void *)(a1 + 12168) = 0;
  *(_OWORD *)(a1 + 12152) = 0u;
  *(void *)(a1 + 12144) = off_243A070;
  *(unsigned char *)(a1 + 12176) = 0;
  *(void *)(a1 + 12208) = 0;
  *(_OWORD *)(a1 + 12192) = 0u;
  *(void *)(a1 + 12184) = off_243A0A8;
  *(unsigned char *)(a1 + 12216) = 0;
  *(_OWORD *)(a1 + 12224) = 0u;
  *(_OWORD *)(a1 + 12++*(_DWORD *)(result + 240) = 0u;
  *(_DWORD *)(a1 + 12256) = 1065353216;
  *(_OWORD *)(a1 + 12264) = 0u;
  *(_OWORD *)(a1 + 12280) = 0u;
  *(_DWORD *)(a1 + 12296) = 1065353216;
  *(void *)(a1 + 12320) = 0;
  *(_OWORD *)(a1 + 12304) = 0u;
  *(_DWORD *)(sub_3AEFFC(a1) + 8) = 1000000000;
  *(_DWORD *)(sub_46CAA4(a1) + 8) = 1000000000;
  return a1;
}

void sub_650838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, void **a20,uint64_t a21,void **a22,void **a23,char *a24,_Unwind_Exception *exception_object)
{
  uint64_t v32 = *(void **)(v25 + 12304);
  if (v32) {
    operator delete(v32);
  }
  sub_5917F0(v26);
  sub_591864(v31);
  sub_591918((void **)(v25 + 12080));
  uint64_t v33 = *(void **)(v25 + 12056);
  if (v33)
  {
    *(void *)(v25 + 12064) = v33;
    operator delete(v33);
    uint64_t v34 = (void *)(v25 + 11688);
    uint64_t v35 = (void **)(v25 + 11952);
    uint64_t v36 = (void **)(v25 + 11976);
    uint64_t v37 = *(void **)(v25 + 12024);
    if (!v37)
    {
LABEL_5:
      if ((*(char *)(v28 + 831) & 0x80000000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v34 = (void *)(v25 + 11688);
    uint64_t v35 = (void **)(v25 + 11952);
    uint64_t v36 = (void **)(v25 + 11976);
    uint64_t v37 = *(void **)(v25 + 12024);
    if (!v37) {
      goto LABEL_5;
    }
  }
  *(void *)(v25 + 12032) = v37;
  operator delete(v37);
  if ((*(char *)(v28 + 831) & 0x80000000) == 0)
  {
LABEL_7:
    sub_28F14C(v36);
    sub_5919CC(v35);
    sub_591A38(v34);
    uint64_t v38 = *(void **)(v25 + 11664);
    if (v38)
    {
      *(void *)(v25 + 11672) = v38;
      operator delete(v38);
      uint64_t v39 = *(void **)(v25 + 11632);
      if (v39)
      {
LABEL_17:
        *(void *)(v25 + 11640) = v39;
        operator delete(v39);
        sub_4B1DB4((void **)(v25 + 11608));
        sub_4B1DB4((void **)(v25 + 11584));
        uint64_t v40 = *v27;
        if (!*v27) {
          goto LABEL_15;
        }
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v39 = *(void **)(v25 + 11632);
      if (v39) {
        goto LABEL_17;
      }
    }
    sub_4B1DB4((void **)(v25 + 11608));
    sub_4B1DB4((void **)(v25 + 11584));
    uint64_t v40 = *v27;
    if (!*v27)
    {
LABEL_15:
      sub_52F970(v30);
      sub_52F970(v29);
      sub_591AC8((uint64_t **)(v25 + 10176));
      sub_591B4C(a10);
      if (a24[2704] < 0) {
        operator delete(*(void **)(v25 + 10080));
      }
      sub_591C10((void **)(v25 + 10056));
      sub_591C10((void **)(v25 + 10032));
      sub_591C10((void **)(v25 + 10008));
      sub_591CA4((void **)(v25 + 9984));
      sub_591D1C(a11);
      sub_4D4B58(a12);
      sub_4D4B58(a13);
      sub_4D4B58(a14);
      sub_4D4B58(a15);
      sub_4D4B58(a16);
      sub_52F090(a17);
      sub_52F090(a18);
      uint64_t v41 = (void **)(v25 + 7328);
      sub_591DA0((void **)(v25 + 7496));
      sub_591DFC((void *)(v25 + 7472));
      sub_591E78((void **)(v25 + 7448));
      sub_1A668((void **)(v25 + 7424));
      if (a24[24] < 0)
      {
        operator delete(*(void **)(v25 + 7400));
        if ((*a24 & 0x80000000) == 0)
        {
LABEL_23:
          sub_50E790((void **)(v25 + 7352));
          int v42 = *v41;
          if (!*v41) {
            goto LABEL_25;
          }
          goto LABEL_24;
        }
      }
      else if ((*a24 & 0x80000000) == 0)
      {
        goto LABEL_23;
      }
      operator delete(*(void **)(v25 + 7376));
      sub_50E790((void **)(v25 + 7352));
      int v42 = *v41;
      if (!*v41)
      {
LABEL_25:
        sub_4D4B58(a19);
        sub_1A668(a20);
        sub_575104(a21);
        sub_4F2BD0(a22);
        if (*(char *)(v25 + 1255) < 0) {
          operator delete(*(void **)(v25 + 1232));
        }
        if (*(char *)(v25 + 1231) < 0)
        {
          operator delete(*(void **)(v25 + 1208));
          sub_4A6814((uint64_t *)(v25 + 1184));
          size_t v43 = *(void **)(v25 + 1160);
          if (!v43)
          {
LABEL_29:
            uint64_t v44 = *(void **)(v25 + 1136);
            if (!v44) {
              goto LABEL_31;
            }
            goto LABEL_30;
          }
        }
        else
        {
          sub_4A6814((uint64_t *)(v25 + 1184));
          size_t v43 = *(void **)(v25 + 1160);
          if (!v43) {
            goto LABEL_29;
          }
        }
        *(void *)(v25 + 1168) = v43;
        operator delete(v43);
        uint64_t v44 = *(void **)(v25 + 1136);
        if (!v44)
        {
LABEL_31:
          sub_591648((void **)(v25 + 1112));
          sub_591ED4((void **)(v25 + 1088));
          sub_591ED4(a23);
          sub_3AFFFC(v25);
          _Unwind_Resume(a1);
        }
LABEL_30:
        *(void *)(v25 + 1144) = v44;
        operator delete(v44);
        goto LABEL_31;
      }
LABEL_24:
      *(void *)(v25 + 7336) = v42;
      operator delete(v42);
      goto LABEL_25;
    }
LABEL_14:
    *(void *)(v25 + 11568) = v40;
    operator delete(v40);
    goto LABEL_15;
  }
LABEL_6:
  operator delete(*(void **)(v25 + 12000));
  goto LABEL_7;
}

void sub_650C24()
{
}

void sub_650C2C()
{
}

void sub_650C34()
{
}

void sub_650C3C()
{
}

void sub_650C44()
{
}

void sub_650C4C()
{
}

void sub_650C54()
{
}

void sub_650C5C()
{
}

void sub_650C64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  sub_4F2BD0(a22);
  if ((*(char *)(v22 + 1255) & 0x80000000) == 0) {
    JUMPOUT(0x650B74);
  }
  JUMPOUT(0x650B6CLL);
}

void sub_650C80()
{
  if ((*(char *)(v0 + 1255) & 0x80000000) == 0) {
    JUMPOUT(0x650B74);
  }
  JUMPOUT(0x650B6CLL);
}

uint64_t sub_650C98(int8x8_t *a1, unint64_t a2)
{
  int8x8_t v2 = a1[1534];
  if (!*(void *)&v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v4 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & a2;
  }
  uint64_t v5 = *(uint64_t ****)(*(void *)&a1[1533] + 8 * v4);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *v5;
  if (!v6) {
    return 0;
  }
  if (v3.u32[0] < 2uLL)
  {
    uint64_t v7 = *(void *)&v2 - 1;
    while (1)
    {
      uint64_t v9 = v6[1];
      if (v9 == (uint64_t *)a2)
      {
        if (v6[2] == (uint64_t *)a2) {
          return *((unsigned int *)v6 + 6);
        }
      }
      else if (((unint64_t)v9 & v7) != v4)
      {
        return 0;
      }
      uint64_t v6 = (uint64_t **)*v6;
      if (!v6) {
        return 0;
      }
    }
  }
  while (1)
  {
    unint64_t v8 = (unint64_t)v6[1];
    if (v8 == a2) {
      break;
    }
    if (v8 >= *(void *)&v2) {
      v8 %= *(void *)&v2;
    }
    if (v8 != v4) {
      return 0;
    }
LABEL_11:
    uint64_t v6 = (uint64_t **)*v6;
    if (!v6) {
      return 0;
    }
  }
  if (v6[2] != (uint64_t *)a2) {
    goto LABEL_11;
  }
  return *((unsigned int *)v6 + 6);
}

uint64_t sub_650D74(int8x8_t *a1, unint64_t a2)
{
  int8x8_t v2 = a1[1529];
  if (!*(void *)&v2) {
    return 1;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v4 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & a2;
  }
  uint64_t v5 = *(uint64_t ****)(*(void *)&a1[1528] + 8 * v4);
  if (!v5) {
    return 1;
  }
  uint64_t v6 = *v5;
  if (!v6) {
    return 1;
  }
  if (v3.u32[0] < 2uLL)
  {
    uint64_t v7 = *(void *)&v2 - 1;
    while (1)
    {
      uint64_t v9 = v6[1];
      if (v9 == (uint64_t *)a2)
      {
        if (v6[2] == (uint64_t *)a2) {
          return *((unsigned int *)v6 + 6);
        }
      }
      else if (((unint64_t)v9 & v7) != v4)
      {
        return 1;
      }
      uint64_t v6 = (uint64_t **)*v6;
      if (!v6) {
        return 1;
      }
    }
  }
  while (1)
  {
    unint64_t v8 = (unint64_t)v6[1];
    if (v8 == a2) {
      break;
    }
    if (v8 >= *(void *)&v2) {
      v8 %= *(void *)&v2;
    }
    if (v8 != v4) {
      return 1;
    }
LABEL_11:
    uint64_t v6 = (uint64_t **)*v6;
    if (!v6) {
      return 1;
    }
  }
  if (v6[2] != (uint64_t *)a2) {
    goto LABEL_11;
  }
  return *((unsigned int *)v6 + 6);
}

_DWORD *sub_650E50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * a2);
  uint64_t v5 = sub_374DF4(a1);
  long long v8 = *(_OWORD *)(v5 + 8);
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v6 = sub_52060((uint64_t)&v8);
  if (v4 == 0x7FFFFFFF) {
    return (_DWORD *)sub_3FB1F0(v6, a3);
  }
  else {
    return sub_3FB048(a3, v4, v6);
  }
}

uint64_t *sub_650EEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 9984);
  if (v2 == *(void *)(a1 + 9992))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F69D8, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_24F69D8))
    {
      return &qword_24F69C0;
    }
    else
    {
      qword_24F69C0 = 0;
      *(void *)algn_24F69C8 = 0;
      qword_24F69D0 = 0;
      __cxa_guard_release(&qword_24F69D8);
      return &qword_24F69C0;
    }
  }
  else
  {
    return (uint64_t *)nullsub_1(v2 + 40 * a2);
  }
}

uint64_t sub_650F84(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a1 + 7328) + 24 * a2);
}

uint64_t sub_650F98(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a1 + 7328) + 24 * a2 + 8);
}

void *sub_650FAC(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5 = a2;
  uint64_t v6 = &v5;
  BOOL result = sub_653698(a1 + 12224, &v5, (uint64_t)&unk_20F06E0, &v6);
  *((_DWORD *)result + 6) = a3;
  return result;
}

uint64_t sub_651004(uint64_t result, char a2)
{
  *(unsigned char *)(result + 10601) = a2;
  return result;
}

uint64_t sub_651010(uint64_t result, char a2)
{
  *(unsigned char *)(result + 11281) = a2;
  return result;
}

uint64_t sub_65101C(uint64_t a1, uint64_t a2)
{
  return sub_5A303C(a1 + 10200, a2);
}

BOOL sub_651028(void *a1)
{
  uint64_t v2 = sub_374DF4((uint64_t)a1);
  uint64_t v3 = sub_40A454(v2 + 8);
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  if (HIDWORD(v3) == 0x7FFFFFFF || (int)v3 > SHIDWORD(v3)) {
    return 0;
  }
  if (sub_46E0B8((uint64_t)a1))
  {
    uint64_t v5 = a1[146] - a1[145];
    if (sub_46C760(a1) != v5 >> 2) {
      return 0;
    }
  }
  sub_64EDB4(a1, (uint64_t)v7);
  return sub_40A45C(v7);
}

BOOL sub_6510C8(void *a1)
{
  if (!sub_46E0B8((uint64_t)a1)) {
    return 1;
  }
  uint64_t v2 = a1[146] - a1[145];
  return sub_46C760(a1) == v2 >> 2;
}

int8x8_t *sub_65111C(int8x8_t *a1, unint64_t a2, unsigned int a3)
{
  BOOL result = a1 + 1533;
  int8x8_t v5 = a1[1534];
  if (!*(void *)&v5) {
    goto LABEL_21;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = a2;
    if (*(void *)&v5 <= a2) {
      unint64_t v7 = a2 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & a2;
  }
  long long v8 = *(uint64_t ***)(*(void *)result + 8 * v7);
  if (!v8 || (uint64_t v9 = *v8) == 0)
  {
LABEL_21:
    v13[0] = a2;
    v13[1] = a3;
    return (int8x8_t *)sub_6539C4((uint64_t)result, v13, (uint64_t)v13);
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == a2)
      {
        if (v9[2] == a2) {
          goto LABEL_22;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_21;
      }
      uint64_t v9 = (uint64_t *)*v9;
      if (!v9) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == a2) {
      break;
    }
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
    if (v11 != v7) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v9 = (uint64_t *)*v9;
    if (!v9) {
      goto LABEL_21;
    }
  }
  if (v9[2] != a2) {
    goto LABEL_11;
  }
LABEL_22:
  *((_DWORD *)v9 + 6) |= a3;
  return result;
}

uint64_t sub_65123C(void *a1, unint64_t a2, unint64_t a3)
{
  uint8x8_t v6 = a1 + 133;
  uint64_t v7 = sub_4A5E10(a1 + 133, a2);
  uint64_t v9 = v7;
  if (*(void *)(v7 + 24) == a3) {
    return *(void *)(v7 + 112);
  }
  uint64_t v10 = sub_46CCC8(a1, a3, v8);
  if (*(void *)(v9 + 40) != a3) {
    return v10;
  }
  if (a2 && (unint64_t v11 = a2 - 1, *(void *)(sub_4A5E10(v6, v11) + 104) == *(void *)(v9 + 40))) {
    uint64_t v12 = *(void *)(sub_4A5E10(v6, v11) + 112);
  }
  else {
    uint64_t v12 = 0;
  }
  return v10 - v12;
}

uint64_t sub_651310(void *a1, unint64_t a2)
{
  if (sub_46C760(a1) <= a2) {
    return a1[134];
  }
  uint64_t v4 = a1[133];
  uint64_t v5 = a1[134] - v4;
  if (v5)
  {
    unint64_t v6 = 0x2FC962FC962FC963 * (v5 >> 5);
    do
    {
      unint64_t v7 = v6 >> 1;
      uint64_t v8 = v4 + 2400 * (v6 >> 1);
      unint64_t v9 = *(void *)(v8 + 40);
      uint64_t v10 = v8 + 2400;
      v6 += ~(v6 >> 1);
      if (v9 > a2) {
        unint64_t v6 = v7;
      }
      else {
        uint64_t v4 = v10;
      }
    }
    while (v6);
  }
  return v4 - 2400;
}

void sub_6513A8(void *a1@<X8>)
{
  sub_46B058();
  unint64_t v3 = v2;
  unint64_t v5 = v4;
  sub_46B060();
  unint64_t v7 = v6;
  unint64_t v9 = v8;
  sub_46B058();
  unint64_t v11 = v10;
  unint64_t v13 = v12;
  sub_46B060();
  sub_480A40(v3, v5, v7, v9, v11, v13, v14, v15, &v26);
  sub_46B060();
  long long v18 = v16;
  unint64_t v19 = v17;
  if (!v26)
  {
    if (!v16 || v17 >= sub_46C760(v16)) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  unint64_t v20 = v27;
  unint64_t v21 = sub_46C760(v26);
  unint64_t v22 = v21;
  if (!v18)
  {
    if (v20 < v21) {
      goto LABEL_13;
    }
LABEL_11:
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  unint64_t v23 = sub_46C760(v18);
  if (v20 >= v22 || v19 >= v23)
  {
    if (v20 < v22 != v19 < v23) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  uint64_t v24 = sub_46C8EC(v26, v27);
  if (v24 == sub_46C8EC(v18, v19)) {
    goto LABEL_11;
  }
LABEL_13:
  sub_46B058();
  *a1 = v27 - v25;
  *((unsigned char *)a1 + 8) = 1;
}

BOOL sub_651514(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 1072);
  if (*(void *)(a1 + 1064) == v1) {
    return 0;
  }
  int v2 = *(unsigned __int8 *)(v1 - 2072);
  if (v2) {
    BOOL v3 = v2 == 5;
  }
  else {
    BOOL v3 = 1;
  }
  return !v3;
}

BOOL sub_651544(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 1072);
  if (*(void *)(a1 + 1064) == v2) {
    return 1;
  }
  int v3 = *(unsigned __int8 *)(v2 - 2072);
  if (a2) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 5;
  }
  return v4 || v3 == a2;
}

uint64_t sub_651578(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = nullsub_1(a2);
  unint64_t v7 = (const void *)sub_46C7D0(a2);
  uint64_t v8 = sub_46C7D8(a2);
  long long v18 = 0;
  unint64_t v19 = 0;
  unint64_t v17 = 0;
  uint64_t v9 = v8 - (void)v7;
  if ((const void *)v8 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t v10 = (const void *)v8;
    unint64_t v11 = (char *)operator new(v8 - (void)v7);
    unint64_t v12 = &v11[8 * (v9 >> 3)];
    unint64_t v17 = v11;
    unint64_t v19 = v12;
    if (v10 != v7) {
      memmove(v11, v7, v9 - 4);
    }
    long long v18 = v12;
  }
  sub_46C80C(a2, v14);
  sub_471590(a1, v6, (uint64_t *)(a2 + 512), (void *)(a2 + 504), (long long *)(a2 + 800), a2 + 128, a2 + 288, (uint64_t)&v17, (uint64_t *)(a2 + 1032), (uint64_t)v14);
  if (v15)
  {
    long long v16 = v15;
    operator delete(v15);
  }
  if (v14[0])
  {
    v14[1] = v14[0];
    operator delete(v14[0]);
  }
  if (v17)
  {
    long long v18 = v17;
    operator delete(v17);
  }
  *(unsigned char *)(a1 + 1056) = 2;
  *(unsigned char *)(a1 + 1057) = sub_470D5C((void *)a2);
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  sub_3F4FA4((void *)(a1 + 1160));
  *(void *)(a1 + 1248) = 0;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  sub_4F29BC(a1 + 1256);
  sub_59171C(a1 + 2344);
  *(void *)(a1 + 7160) = 0;
  *(_OWORD *)(a1 + 7144) = 0u;
  sub_5F3B34(a1 + 7168);
  *(_OWORD *)(a1 + 7504) = 0u;
  *(_OWORD *)(a1 + 7488) = 0u;
  *(_OWORD *)(a1 + 7472) = 0u;
  *(_OWORD *)(a1 + 7456) = 0u;
  *(_OWORD *)(a1 + 7440) = 0u;
  *(_OWORD *)(a1 + 7424) = 0u;
  *(_OWORD *)(a1 + 7408) = 0u;
  *(_OWORD *)(a1 + 7392) = 0u;
  *(_OWORD *)(a1 + 7376) = 0u;
  *(_OWORD *)(a1 + 7360) = 0u;
  *(_OWORD *)(a1 + 7344) = 0u;
  *(_OWORD *)(a1 + 7328) = 0u;
  sub_5A9D64(a1 + 7520);
  sub_5A9D64(a1 + 8336);
  sub_5F3B34(a1 + 9152);
  sub_5F3B34(a1 + 9312);
  sub_5F3B34(a1 + 9472);
  sub_5F3B34(a1 + 9632);
  sub_5F3B34(a1 + 9792);
  *(void *)(a1 + 9968) = 0;
  *(_OWORD *)(a1 + 9952) = 0u;
  *(unsigned char *)(a1 + 9976) = 0;
  *(unsigned char *)(a1 + 9977) = a3;
  *(_OWORD *)(a1 + 9984) = 0u;
  *(_OWORD *)(a1 + 10000) = 0u;
  *(_OWORD *)(a1 + 10016) = 0u;
  *(_OWORD *)(a1 + 10032) = 0u;
  *(_OWORD *)(a1 + 10048) = 0u;
  *(_OWORD *)(a1 + 10064) = 0u;
  *(_OWORD *)(a1 + 10080) = 0u;
  *(void *)(a1 + 10096) = 0;
  *(void *)(a1 + 10104) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 10112) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 10168) = 0;
  *(_OWORD *)(a1 + 10120) = 0u;
  *(_OWORD *)(a1 + 10136) = 0u;
  *(_OWORD *)(a1 + 10152) = 0u;
  *(void *)(a1 + 10192) = 0;
  *(_OWORD *)(a1 + 10176) = 0u;
  *(void *)(a1 + 10200) = -1;
  *(_DWORD *)(a1 + 10208) = 0x7FFFFFFF;
  *(void *)(a1 + 10216) = -1;
  *(void *)(a1 + 10224) = -1;
  *(void *)(a1 + 10232) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 10++*(_DWORD *)(result + 240) = 0;
  *(_DWORD *)(a1 + 10248) = -1935635296;
  *(void *)(a1 + 10256) = 0;
  *(_DWORD *)(a1 + 10263) = 0;
  *(void *)(a1 + 10288) = 0;
  *(_DWORD *)(a1 + 10296) = 0;
  *(void *)(a1 + 10272) = 0;
  *(void *)(a1 + 10280) = 0;
  *(unsigned char *)(a1 + 10300) = 100;
  *(void *)(a1 + 10304) = 0;
  *(_DWORD *)(a1 + 10312) = 0;
  *(unsigned char *)(a1 + 10416) = 0;
  *(_OWORD *)(a1 + 10400) = 0u;
  *(_OWORD *)(a1 + 10384) = 0u;
  *(_OWORD *)(a1 + 10368) = 0u;
  *(_OWORD *)(a1 + 10352) = 0u;
  *(_OWORD *)(a1 + 10336) = 0u;
  *(_OWORD *)(a1 + 10320) = 0u;
  *(void *)(a1 + 10504) = 0;
  *(_OWORD *)(a1 + 10472) = 0u;
  *(_OWORD *)(a1 + 10488) = 0u;
  *(_OWORD *)(a1 + 10440) = 0u;
  *(_OWORD *)(a1 + 10456) = 0u;
  *(_OWORD *)(a1 + 10424) = 0u;
  *(_OWORD *)(a1 + 10512) = xmmword_20B8E30;
  *(void *)(a1 + 10528) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 10552) = 0;
  *(_DWORD *)(a1 + 10560) = 0;
  *(void *)(a1 + 10536) = 0;
  *(void *)(a1 + 10544) = 0;
  *(unsigned char *)(a1 + 10568) = 0;
  *(_OWORD *)(a1 + 10572) = 0u;
  *(_OWORD *)(a1 + 10588) = 0u;
  sub_5F3B34(a1 + 10608);
  *(_DWORD *)(a1 + 10800) = -1;
  *(_DWORD *)(a1 + 10808) = -1;
  *(_DWORD *)(a1 + 10811) = -1;
  *(void *)(a1 + 10815) = 0;
  *(void *)(a1 + 10831) = 0;
  *(void *)(a1 + 10823) = 0;
  *(_WORD *)(a1 + 10839) = 0;
  *(unsigned char *)(a1 + 10872) = 0;
  *(void *)(a1 + 10848) = 0;
  *(void *)(a1 + 10864) = 0;
  *(void *)(a1 + 10856) = 0;
  *(void *)(a1 + 10880) = -1;
  *(_DWORD *)(a1 + 10888) = 0x7FFFFFFF;
  *(void *)(a1 + 10896) = -1;
  *(void *)(a1 + 10904) = -1;
  *(void *)(a1 + 10912) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 10920) = 0;
  *(_DWORD *)(a1 + 10928) = -1935635296;
  *(_DWORD *)(a1 + 10943) = 0;
  *(void *)(a1 + 10936) = 0;
  *(void *)(a1 + 10968) = 0;
  *(_DWORD *)(a1 + 10976) = 0;
  *(void *)(a1 + 10952) = 0;
  *(void *)(a1 + 10960) = 0;
  *(unsigned char *)(a1 + 10980) = 100;
  *(void *)(a1 + 10984) = 0;
  *(_DWORD *)(a1 + 10992) = 0;
  *(_OWORD *)(a1 + 11000) = 0u;
  *(_OWORD *)(a1 + 11016) = 0u;
  *(_OWORD *)(a1 + 11032) = 0u;
  *(_OWORD *)(a1 + 11048) = 0u;
  *(_OWORD *)(a1 + 11064) = 0u;
  *(_OWORD *)(a1 + 11080) = 0u;
  *(unsigned char *)(a1 + 11096) = 0;
  *(_OWORD *)(a1 + 11104) = 0u;
  *(_OWORD *)(a1 + 11120) = 0u;
  *(_OWORD *)(a1 + 11136) = 0u;
  *(_OWORD *)(a1 + 11152) = 0u;
  *(_OWORD *)(a1 + 11168) = 0u;
  *(void *)(a1 + 11184) = 0;
  *(_OWORD *)(a1 + 11192) = xmmword_20B8E30;
  *(void *)(a1 + 11208) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 11224) = 0;
  *(void *)(a1 + 11216) = 0;
  *(_DWORD *)(a1 + 11++*(_DWORD *)(result + 240) = 0;
  *(void *)(a1 + 11232) = 0;
  *(unsigned char *)(a1 + 11248) = 0;
  *(_OWORD *)(a1 + 11252) = 0u;
  *(_OWORD *)(a1 + 11268) = 0u;
  sub_5F3B34(a1 + 11288);
  *(_DWORD *)(a1 + 11480) = -1;
  *(_DWORD *)(a1 + 11488) = -1;
  *(_DWORD *)(a1 + 11491) = -1;
  *(void *)(a1 + 11495) = 0;
  *(void *)(a1 + 11511) = 0;
  *(void *)(a1 + 11503) = 0;
  *(_WORD *)(a1 + 11519) = 0;
  *(unsigned char *)(a1 + 11552) = 0;
  *(void *)(a1 + 11528) = 0;
  *(void *)(a1 + 11544) = 0;
  *(void *)(a1 + 11536) = 0;
  *(_OWORD *)(a1 + 11560) = 0u;
  *(_OWORD *)(a1 + 11576) = 0u;
  *(_OWORD *)(a1 + 11592) = 0u;
  *(_OWORD *)(a1 + 11608) = 0u;
  *(_OWORD *)(a1 + 11624) = 0u;
  *(_OWORD *)(a1 + 11640) = 0u;
  *(_OWORD *)(a1 + 11656) = 0u;
  *(_OWORD *)(a1 + 11672) = 0u;
  *(void *)(a1 + 11688) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 11696) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 11720) = 0;
  *(void *)(a1 + 11704) = 0;
  *(void *)(a1 + 11712) = 0;
  *(void *)(a1 + 11728) = 0x8000000080000000;
  *(void *)(a1 + 11752) = 0;
  *(void *)(a1 + 11736) = 0;
  *(void *)(a1 + 11744) = 0;
  sub_5F3B34(a1 + 11760);
  *(_DWORD *)(a1 + 11944) = 0;
  *(void *)(a1 + 11936) = 0;
  *(_OWORD *)(a1 + 11920) = 0u;
  *(unsigned char *)(a1 + 11948) = 1;
  *(_OWORD *)(a1 + 11952) = 0u;
  *(_OWORD *)(a1 + 11968) = 0u;
  *(_OWORD *)(a1 + 11984) = 0u;
  *(_OWORD *)(a1 + 12000) = 0u;
  *(_OWORD *)(a1 + 12016) = 0u;
  *(_OWORD *)(a1 + 12032) = 0u;
  *(_OWORD *)(a1 + 12048) = 0u;
  *(_OWORD *)(a1 + 12064) = 0u;
  *(_OWORD *)(a1 + 12080) = 0u;
  *(_OWORD *)(a1 + 12096) = 0u;
  *(_OWORD *)(a1 + 12112) = 0u;
  *(void *)(a1 + 12128) = 0;
  *(_DWORD *)(a1 + 12136) = 1065353216;
  *(void *)(a1 + 12168) = 0;
  *(_OWORD *)(a1 + 12152) = 0u;
  *(void *)(a1 + 12144) = off_243A070;
  *(unsigned char *)(a1 + 12176) = 0;
  *(void *)(a1 + 12208) = 0;
  *(_OWORD *)(a1 + 12192) = 0u;
  *(void *)(a1 + 12184) = off_243A0A8;
  *(unsigned char *)(a1 + 12216) = 0;
  *(_OWORD *)(a1 + 12224) = 0u;
  *(_OWORD *)(a1 + 12++*(_DWORD *)(result + 240) = 0u;
  *(_DWORD *)(a1 + 12256) = 1065353216;
  *(_OWORD *)(a1 + 12264) = 0u;
  *(_OWORD *)(a1 + 12280) = 0u;
  *(_DWORD *)(a1 + 12296) = 1065353216;
  *(void *)(a1 + 12320) = 0;
  *(_OWORD *)(a1 + 12304) = 0u;
  sub_6520B0((void *)a1);
  return a1;
}

void sub_651C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object, void **a14, void *a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,void **a25,uint64_t a26,void **a27,void **a28,void **a29,char *a30,void *a31)
{
  if (*v38) {
    operator delete(*v38);
  }
  sub_5917F0(v33);
  sub_591864(v37);
  sub_591918(v36);
  uint64_t v41 = *(void **)(v31 + 12056);
  if (v41)
  {
    *(void *)(v31 + 12064) = v41;
    operator delete(v41);
    int v42 = *(void **)(v31 + 12024);
    if (!v42)
    {
LABEL_5:
      if ((*(char *)(v32 + 831) & 0x80000000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else
  {
    int v42 = *(void **)(v31 + 12024);
    if (!v42) {
      goto LABEL_5;
    }
  }
  *(void *)(v31 + 12032) = v42;
  operator delete(v42);
  if ((*(char *)(v32 + 831) & 0x80000000) == 0)
  {
LABEL_7:
    sub_28F14C(v35);
    sub_5919CC(a14);
    sub_591A38(a31);
    size_t v43 = *(void **)(v31 + 11664);
    if (v43)
    {
      *(void *)(v31 + 11672) = v43;
      operator delete(v43);
      uint64_t v44 = *(void **)(v31 + 11632);
      if (v44)
      {
LABEL_17:
        *(void *)(v31 + 11640) = v44;
        operator delete(v44);
        sub_4B1DB4((void **)(v31 + 11608));
        sub_4B1DB4((void **)(v31 + 11584));
        long long v45 = *v34;
        if (!*v34) {
          goto LABEL_15;
        }
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v44 = *(void **)(v31 + 11632);
      if (v44) {
        goto LABEL_17;
      }
    }
    sub_4B1DB4((void **)(v31 + 11608));
    sub_4B1DB4((void **)(v31 + 11584));
    long long v45 = *v34;
    if (!*v34)
    {
LABEL_15:
      sub_52F970(v40);
      sub_52F970(v39);
      sub_591AC8((uint64_t **)(v31 + 10176));
      sub_591B4C(a15);
      if (a30[2704] < 0) {
        operator delete(*(void **)(v31 + 10080));
      }
      sub_591C10((void **)(v31 + 10056));
      sub_591C10((void **)(v31 + 10032));
      sub_591C10((void **)(v31 + 10008));
      sub_591CA4((void **)(v31 + 9984));
      sub_591D1C(a16);
      sub_4D4B58(a17);
      sub_4D4B58(a18);
      sub_4D4B58(a19);
      sub_4D4B58(a20);
      sub_4D4B58(a21);
      sub_52F090(a22);
      sub_52F090(a23);
      uint64_t v46 = (void **)(v31 + 7328);
      sub_591DA0((void **)(v31 + 7496));
      sub_591DFC((void *)(v31 + 7472));
      sub_591E78((void **)(v31 + 7448));
      sub_1A668((void **)(v31 + 7424));
      if (a30[24] < 0)
      {
        operator delete(*(void **)(v31 + 7400));
        if ((*a30 & 0x80000000) == 0)
        {
LABEL_23:
          sub_50E790((void **)(v31 + 7352));
          uint64_t v47 = *v46;
          if (!*v46) {
            goto LABEL_25;
          }
          goto LABEL_24;
        }
      }
      else if ((*a30 & 0x80000000) == 0)
      {
        goto LABEL_23;
      }
      operator delete(*(void **)(v31 + 7376));
      sub_50E790((void **)(v31 + 7352));
      uint64_t v47 = *v46;
      if (!*v46)
      {
LABEL_25:
        sub_4D4B58(a24);
        sub_1A668(a25);
        sub_575104(a26);
        sub_4F2BD0(a27);
        if (*(char *)(v31 + 1255) < 0) {
          operator delete(*(void **)(v31 + 1232));
        }
        if (*(char *)(v31 + 1231) < 0)
        {
          operator delete(*(void **)(v31 + 1208));
          sub_4A6814((uint64_t *)(v31 + 1184));
          int64_t v48 = *a28;
          if (!*a28)
          {
LABEL_29:
            int v49 = (void **)(v31 + 1088);
            size_t v50 = (void **)(v31 + 1112);
            int v51 = *(void **)(v31 + 1136);
            if (!v51) {
              goto LABEL_31;
            }
            goto LABEL_30;
          }
        }
        else
        {
          sub_4A6814((uint64_t *)(v31 + 1184));
          int64_t v48 = *a28;
          if (!*a28) {
            goto LABEL_29;
          }
        }
        *(void *)(v31 + 1168) = v48;
        operator delete(v48);
        int v49 = (void **)(v31 + 1088);
        size_t v50 = (void **)(v31 + 1112);
        int v51 = *(void **)(v31 + 1136);
        if (!v51)
        {
LABEL_31:
          sub_591648(v50);
          sub_591ED4(v49);
          sub_591ED4(a29);
          sub_3AFFFC(v31);
          _Unwind_Resume(a1);
        }
LABEL_30:
        *(void *)(v31 + 1144) = v51;
        operator delete(v51);
        goto LABEL_31;
      }
LABEL_24:
      *(void *)(v31 + 7336) = v47;
      operator delete(v47);
      goto LABEL_25;
    }
LABEL_14:
    *(void *)(v31 + 11568) = v45;
    operator delete(v45);
    goto LABEL_15;
  }
LABEL_6:
  operator delete(*(void **)(v31 + 12000));
  goto LABEL_7;
}

void sub_651FEC()
{
}

void sub_651FF4()
{
}

void sub_651FFC()
{
}

void sub_652004()
{
}

void sub_65200C()
{
}

void sub_652014()
{
}

void sub_65201C()
{
}

void sub_652024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27)
{
  sub_4F2BD0(a27);
  if ((*(char *)(v27 + 1255) & 0x80000000) == 0) {
    JUMPOUT(0x651F28);
  }
  JUMPOUT(0x651F20);
}

void sub_652040()
{
  if ((*(char *)(v0 + 1255) & 0x80000000) == 0) {
    JUMPOUT(0x651F28);
  }
  JUMPOUT(0x651F20);
}

void sub_652054()
{
  if (!*(void *)(v0 + 1136)) {
    JUMPOUT(0x651F5CLL);
  }
  JUMPOUT(0x651F54);
}

void sub_65206C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object)
{
  sub_3AFFFC(v13);
  _Unwind_Resume(a1);
}

void sub_652080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object)
{
  sub_3310C(v13 - 176);
  uint64_t v14 = *(void **)(v13 - 128);
  if (v14)
  {
    *(void *)(v13 - 120) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_6520B0(void *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 1538);
  unint64_t v3 = sub_470ADC(a1);
  sub_3D110(v2, v3);
  unint64_t result = sub_470ADC(a1);
  if (result)
  {
    for (unint64_t i = 0; i < result; ++i)
    {
      while (1)
      {
        uint64_t v6 = (unint64_t *)a1[129];
        unint64_t v7 = (unint64_t *)a1[130];
        if (v6 != v7) {
          break;
        }
        LOBYTE(v11) = 1;
        unint64_t v13 = a1[1539];
        uint64_t v14 = a1[1540];
        if (v13 != v14 << 6) {
          goto LABEL_17;
        }
LABEL_20:
        if ((uint64_t)(v13 + 1) < 0) {
          sub_2E00();
        }
        unint64_t v18 = v14 << 7;
        if (v18 <= (v13 & 0xFFFFFFFFFFFFFFC0) + 64) {
          unint64_t v18 = (v13 & 0xFFFFFFFFFFFFFFC0) + 64;
        }
        if (v13 <= 0x3FFFFFFFFFFFFFFELL) {
          unint64_t v19 = v18;
        }
        else {
          unint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
        }
        sub_3D110(v2, v19);
        unint64_t v20 = a1[1539];
        a1[1539] = v20 + 1;
        uint64_t v15 = a1[1538];
        unint64_t v16 = v20 >> 6;
        uint64_t v17 = 1 << v20;
        if (!v11) {
          goto LABEL_27;
        }
LABEL_3:
        *(void *)(v15 + 8 * v16) &= ~v17;
        ++i;
        unint64_t result = sub_470ADC(a1);
        if (i >= result) {
          return result;
        }
      }
      do
      {
        unint64_t v8 = *v6;
        unint64_t v9 = v6[1];
        v6 += 8;
        BOOL v11 = v8 > i || v9 < i;
      }
      while (v11 && v6 != v7);
      unint64_t v13 = a1[1539];
      uint64_t v14 = a1[1540];
      if (v13 == v14 << 6) {
        goto LABEL_20;
      }
LABEL_17:
      a1[1539] = v13 + 1;
      uint64_t v15 = a1[1538];
      unint64_t v16 = v13 >> 6;
      uint64_t v17 = 1 << v13;
      if (v11) {
        goto LABEL_3;
      }
LABEL_27:
      *(void *)(v15 + 8 * v16) |= v17;
      unint64_t result = sub_470ADC(a1);
    }
  }
  return result;
}

uint64_t sub_652220(uint64_t a1)
{
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 120) = -1;
  *(_DWORD *)(a1 + 128) = -1;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 142) = 0;
  *(_DWORD *)(a1 + 152) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 160) = 0x7FFFFFFF;
  *(void *)(a1 + 164) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)&long long v2 = 0x8000000080000000;
  *(void *)(a1 + 184) = 0x8000000080000000;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(unsigned char *)(a1 + ++*(_DWORD *)(result + 240) = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 244) = 0x8000000080000000;
  *(_DWORD *)(a1 + 252) = 0x7FFFFFFF;
  *(_DWORD *)(a1 + 264) = -1;
  *(_OWORD *)(a1 + 272) = xmmword_20E8160;
  *(_DWORD *)(a1 + 288) = -1;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 302) = 0;
  *(_DWORD *)(a1 + 312) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + 320) = 0x7FFFFFFF;
  *(void *)(a1 + 324) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 344) = 0x8000000080000000;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(unsigned char *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 404) = 0x7FFFFFFF;
  *(void *)(a1 + 408) = 0x8000000080000000;
  *(_DWORD *)(a1 + 424) = -1;
  *(_OWORD *)(a1 + 432) = xmmword_20E8160;
  *(_DWORD *)(a1 + 448) = 0x7FFFFFFF;
  *(void *)(a1 + 452) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 464) = 0u;
  *(void *)(a1 + 488) = 0x8000000080000000;
  *(_DWORD *)(a1 + 496) = 0x7FFFFFFF;
  *(void *)(a1 + 504) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 512) = 0x8000000080000000;
  *(_DWORD *)(a1 + 520) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *((void *)&v2 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = v2;
  *(void *)(a1 + 816) = 0;
  *(_OWORD *)(a1 + 784) = v2;
  *(_OWORD *)(a1 + 800) = 0u;
  *(unsigned char *)(a1 + 824) = 1;
  *(_DWORD *)(a1 + 825) = 0;
  *(unsigned char *)(a1 + 829) = 1;
  *(_DWORD *)(a1 + 833) = 0;
  *(_DWORD *)(a1 + 830) = 0;
  *(void *)(a1 + 1048) = 0;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_WORD *)(a1 + 1056) = 258;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1++*(_DWORD *)(result + 240) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  sub_4F29BC(a1 + 1256);
  sub_59171C(a1 + 2344);
  *(void *)(a1 + 7160) = 0;
  *(_OWORD *)(a1 + 7144) = 0u;
  sub_5F3B34(a1 + 7168);
  *(_OWORD *)(a1 + 7504) = 0u;
  *(_OWORD *)(a1 + 7488) = 0u;
  *(_OWORD *)(a1 + 7472) = 0u;
  *(_OWORD *)(a1 + 7456) = 0u;
  *(_OWORD *)(a1 + 7440) = 0u;
  *(_OWORD *)(a1 + 7424) = 0u;
  *(_OWORD *)(a1 + 7408) = 0u;
  *(_OWORD *)(a1 + 7392) = 0u;
  *(_OWORD *)(a1 + 7376) = 0u;
  *(_OWORD *)(a1 + 7360) = 0u;
  *(_OWORD *)(a1 + 7344) = 0u;
  *(_OWORD *)(a1 + 7328) = 0u;
  sub_5A9D64(a1 + 7520);
  sub_5A9D64(a1 + 8336);
  sub_5F3B34(a1 + 9152);
  sub_5F3B34(a1 + 9312);
  sub_5F3B34(a1 + 9472);
  sub_5F3B34(a1 + 9632);
  sub_5F3B34(a1 + 9792);
  *(void *)(a1 + 9968) = 0;
  *(_OWORD *)(a1 + 9952) = 0u;
  *(_WORD *)(a1 + 9976) = 0;
  *(_OWORD *)(a1 + 9984) = 0u;
  *(_OWORD *)(a1 + 10000) = 0u;
  *(_OWORD *)(a1 + 10016) = 0u;
  *(_OWORD *)(a1 + 10032) = 0u;
  *(_OWORD *)(a1 + 10048) = 0u;
  *(_OWORD *)(a1 + 10064) = 0u;
  *(_OWORD *)(a1 + 10080) = 0u;
  *(void *)(a1 + 10096) = 0;
  *(void *)(a1 + 10104) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 10112) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 10168) = 0;
  *(_OWORD *)(a1 + 10120) = 0u;
  *(_OWORD *)(a1 + 10136) = 0u;
  *(_OWORD *)(a1 + 10152) = 0u;
  *(void *)(a1 + 10192) = 0;
  *(_OWORD *)(a1 + 10176) = 0u;
  *(void *)(a1 + 10200) = -1;
  *(_DWORD *)(a1 + 10208) = 0x7FFFFFFF;
  *(void *)(a1 + 10216) = -1;
  *(void *)(a1 + 10224) = -1;
  *(void *)(a1 + 10232) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 10++*(_DWORD *)(result + 240) = 0;
  *(_DWORD *)(a1 + 10248) = -1935635296;
  *(void *)(a1 + 10256) = 0;
  *(_DWORD *)(a1 + 10263) = 0;
  *(void *)(a1 + 10288) = 0;
  *(_DWORD *)(a1 + 10296) = 0;
  *(void *)(a1 + 10272) = 0;
  *(void *)(a1 + 10280) = 0;
  *(unsigned char *)(a1 + 10300) = 100;
  *(void *)(a1 + 10304) = 0;
  *(_DWORD *)(a1 + 10312) = 0;
  *(unsigned char *)(a1 + 10416) = 0;
  *(_OWORD *)(a1 + 10400) = 0u;
  *(_OWORD *)(a1 + 10384) = 0u;
  *(_OWORD *)(a1 + 10368) = 0u;
  *(_OWORD *)(a1 + 10352) = 0u;
  *(_OWORD *)(a1 + 10336) = 0u;
  *(_OWORD *)(a1 + 10320) = 0u;
  *(void *)(a1 + 10504) = 0;
  *(_OWORD *)(a1 + 10472) = 0u;
  *(_OWORD *)(a1 + 10488) = 0u;
  *(_OWORD *)(a1 + 10440) = 0u;
  *(_OWORD *)(a1 + 10456) = 0u;
  *(_OWORD *)(a1 + 10424) = 0u;
  *(_OWORD *)(a1 + 10512) = xmmword_20B8E30;
  *(void *)(a1 + 10528) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 10552) = 0;
  *(_DWORD *)(a1 + 10560) = 0;
  *(void *)(a1 + 10536) = 0;
  *(void *)(a1 + 10544) = 0;
  *(unsigned char *)(a1 + 10568) = 0;
  *(_OWORD *)(a1 + 10572) = 0u;
  *(_OWORD *)(a1 + 10588) = 0u;
  sub_5F3B34(a1 + 10608);
  *(_DWORD *)(a1 + 10800) = -1;
  *(_DWORD *)(a1 + 10808) = -1;
  *(_DWORD *)(a1 + 10811) = -1;
  *(void *)(a1 + 10815) = 0;
  *(void *)(a1 + 10831) = 0;
  *(void *)(a1 + 10823) = 0;
  *(_WORD *)(a1 + 10839) = 0;
  *(unsigned char *)(a1 + 10872) = 0;
  *(void *)(a1 + 10848) = 0;
  *(void *)(a1 + 10864) = 0;
  *(void *)(a1 + 10856) = 0;
  *(void *)(a1 + 10880) = -1;
  *(_DWORD *)(a1 + 10888) = 0x7FFFFFFF;
  *(void *)(a1 + 10896) = -1;
  *(void *)(a1 + 10904) = -1;
  *(void *)(a1 + 10912) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 10920) = 0;
  *(_DWORD *)(a1 + 10928) = -1935635296;
  *(_DWORD *)(a1 + 10943) = 0;
  *(void *)(a1 + 10936) = 0;
  *(void *)(a1 + 10968) = 0;
  *(_DWORD *)(a1 + 10976) = 0;
  *(void *)(a1 + 10952) = 0;
  *(void *)(a1 + 10960) = 0;
  *(unsigned char *)(a1 + 10980) = 100;
  *(void *)(a1 + 10984) = 0;
  *(_DWORD *)(a1 + 10992) = 0;
  *(_OWORD *)(a1 + 11000) = 0u;
  *(_OWORD *)(a1 + 11016) = 0u;
  *(_OWORD *)(a1 + 11032) = 0u;
  *(_OWORD *)(a1 + 11048) = 0u;
  *(_OWORD *)(a1 + 11064) = 0u;
  *(_OWORD *)(a1 + 11080) = 0u;
  *(unsigned char *)(a1 + 11096) = 0;
  *(_OWORD *)(a1 + 11104) = 0u;
  *(_OWORD *)(a1 + 11120) = 0u;
  *(_OWORD *)(a1 + 11136) = 0u;
  *(_OWORD *)(a1 + 11152) = 0u;
  *(_OWORD *)(a1 + 11168) = 0u;
  *(void *)(a1 + 11184) = 0;
  *(_OWORD *)(a1 + 11192) = xmmword_20B8E30;
  *(void *)(a1 + 11208) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 11224) = 0;
  *(void *)(a1 + 11216) = 0;
  *(_DWORD *)(a1 + 11++*(_DWORD *)(result + 240) = 0;
  *(void *)(a1 + 11232) = 0;
  *(unsigned char *)(a1 + 11248) = 0;
  *(_OWORD *)(a1 + 11252) = 0u;
  *(_OWORD *)(a1 + 11268) = 0u;
  sub_5F3B34(a1 + 11288);
  *(_DWORD *)(a1 + 11480) = -1;
  *(_DWORD *)(a1 + 11488) = -1;
  *(_DWORD *)(a1 + 11491) = -1;
  *(void *)(a1 + 11495) = 0;
  *(void *)(a1 + 11511) = 0;
  *(void *)(a1 + 11503) = 0;
  *(_WORD *)(a1 + 11519) = 0;
  *(unsigned char *)(a1 + 11552) = 0;
  *(void *)(a1 + 11528) = 0;
  *(void *)(a1 + 11544) = 0;
  *(void *)(a1 + 11536) = 0;
  *(_OWORD *)(a1 + 11560) = 0u;
  *(_OWORD *)(a1 + 11576) = 0u;
  *(_OWORD *)(a1 + 11592) = 0u;
  *(_OWORD *)(a1 + 11608) = 0u;
  *(_OWORD *)(a1 + 11624) = 0u;
  *(_OWORD *)(a1 + 11640) = 0u;
  *(_OWORD *)(a1 + 11656) = 0u;
  *(_OWORD *)(a1 + 11672) = 0u;
  *(void *)(a1 + 11688) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 11696) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 11720) = 0;
  *(void *)(a1 + 11704) = 0;
  *(void *)(a1 + 11712) = 0;
  *(void *)(a1 + 11728) = 0x8000000080000000;
  *(void *)(a1 + 11752) = 0;
  *(void *)(a1 + 11736) = 0;
  *(void *)(a1 + 11744) = 0;
  sub_5F3B34(a1 + 11760);
  *(_DWORD *)(a1 + 11944) = 0;
  *(void *)(a1 + 11936) = 0;
  *(_OWORD *)(a1 + 11920) = 0u;
  *(unsigned char *)(a1 + 11948) = 1;
  *(_OWORD *)(a1 + 11952) = 0u;
  *(_OWORD *)(a1 + 11968) = 0u;
  *(_OWORD *)(a1 + 11984) = 0u;
  *(_OWORD *)(a1 + 12000) = 0u;
  *(_OWORD *)(a1 + 12016) = 0u;
  *(_OWORD *)(a1 + 12032) = 0u;
  *(_OWORD *)(a1 + 12048) = 0u;
  *(_OWORD *)(a1 + 12064) = 0u;
  *(_OWORD *)(a1 + 12080) = 0u;
  *(_OWORD *)(a1 + 12096) = 0u;
  *(_OWORD *)(a1 + 12112) = 0u;
  *(void *)(a1 + 12128) = 0;
  *(_DWORD *)(a1 + 12136) = 1065353216;
  *(void *)(a1 + 12168) = 0;
  *(_OWORD *)(a1 + 12152) = 0u;
  *(void *)(a1 + 12144) = off_243A070;
  *(unsigned char *)(a1 + 12176) = 0;
  *(void *)(a1 + 12208) = 0;
  *(_OWORD *)(a1 + 12192) = 0u;
  *(void *)(a1 + 12184) = off_243A0A8;
  *(unsigned char *)(a1 + 12216) = 0;
  *(_OWORD *)(a1 + 12224) = 0u;
  *(_OWORD *)(a1 + 12++*(_DWORD *)(result + 240) = 0u;
  *(_DWORD *)(a1 + 12256) = 1065353216;
  *(_OWORD *)(a1 + 12264) = 0u;
  *(_OWORD *)(a1 + 12280) = 0u;
  *(_DWORD *)(a1 + 12296) = 1065353216;
  *(void *)(a1 + 12320) = 0;
  *(_OWORD *)(a1 + 12304) = 0u;
  *(_DWORD *)(sub_3AEFFC(a1) + 8) = 1000000000;
  *(_DWORD *)(sub_46CAA4(a1) + 8) = 1000000000;
  return a1;
}