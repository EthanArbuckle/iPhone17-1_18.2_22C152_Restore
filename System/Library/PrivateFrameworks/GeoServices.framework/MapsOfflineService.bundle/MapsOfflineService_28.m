void sub_BF5D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  if (*(char *)(v54 - 89) < 0) {
    operator delete(*(void **)(v54 - 112));
  }
  if (*(char *)(v54 - 121) < 0)
  {
    operator delete(*(void **)(v54 - 144));
    if ((*(char *)(v54 - 153) & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  else if ((*(char *)(v54 - 153) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v54 - 176));
  if ((a15 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a10);
  if ((a54 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a42);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a16);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_12;
  }
LABEL_20:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
LABEL_21:
  }
    _Unwind_Resume(a1);
LABEL_12:
  operator delete(__p);
  goto LABEL_21;
}

uint64_t sub_BF5F24(uint64_t a1, unint64_t a2, int a3, char *a4)
{
  unsigned int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  LODWORD(v63.__r_.__value_.__l.__data_) = HIDWORD(a2);
  LODWORD(v62.__r_.__value_.__l.__data_) = a3;
  *(void *)&long long v64 = &v62;
  *((void *)&v64 + 1) = &v63;
  unint64_t v9 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v9;
  uint64_t v10 = *(void *)a1;
  if (!v10) {
    goto LABEL_40;
  }
  uint64_t v11 = a1 + 16;
  if (*(_DWORD *)(a1 + 880) == HIDWORD(a2))
  {
    unsigned int v12 = 36;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 904) == HIDWORD(a2))
  {
    unsigned int v12 = 37;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 928) == HIDWORD(a2))
  {
    unsigned int v12 = 38;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 952) == HIDWORD(a2))
  {
    unsigned int v12 = 39;
LABEL_10:
    ++*(void *)(a1 + 3864);
    uint64_t v13 = v11 + 24 * v12;
    *(void *)(v13 + 8) = v9;
    v14 = *(unsigned int **)(v13 + 16);
    if (v14) {
      goto LABEL_11;
    }
LABEL_40:
    sub_398390((int **)&v64);
    v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
    return 0;
  }
  unint64_t v20 = *(void *)(a1 + 936);
  unint64_t v21 = *(void *)(a1 + 912);
  unint64_t v22 = *(void *)(a1 + 888);
  BOOL v23 = v22 >= v9;
  if (v22 < v9) {
    unint64_t v9 = *(void *)(a1 + 888);
  }
  int v24 = 36;
  if (v23) {
    int v24 = 0;
  }
  BOOL v25 = v21 >= v9;
  if (v21 < v9) {
    unint64_t v9 = *(void *)(a1 + 912);
  }
  int v26 = 37;
  if (v25) {
    int v26 = v24;
  }
  if (v20 >= v9) {
    unint64_t v27 = v9;
  }
  else {
    unint64_t v27 = *(void *)(a1 + 936);
  }
  unint64_t v28 = *(void *)(a1 + 960);
  if (v20 >= v9) {
    int v29 = v26;
  }
  else {
    int v29 = 38;
  }
  v14 = (unsigned int *)sub_2AB884(v10, 9, HIDWORD(a2), 1);
  unsigned int v30 = 39;
  if (v28 >= v27) {
    unsigned int v30 = v29;
  }
  uint64_t v31 = v11 + 24 * v30;
  *(_DWORD *)uint64_t v31 = v63.__r_.__value_.__l.__data_;
  *(void *)(v31 + 8) = *(void *)(a1 + 3856);
  *(void *)(v31 + 16) = v14;
  if (!v14) {
    goto LABEL_40;
  }
LABEL_11:
  v15 = (int *)((char *)v14 + *v14);
  v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 0x13u)
  {
    v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v17 = v16[9];
    if (v17)
    {
      v18 = (unsigned int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
      if (*v18 > v6) {
        return (uint64_t)&v18[v6 + 1] + v18[v6 + 1];
      }
    }
    else
    {
      v18 = 0;
    }
    if (a3 != 1)
    {
LABEL_19:
      if (!a3)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        v33 = a4;
        uint64_t v34 = (uint64_t)exception;
        sub_5E5C(&v57, v33);
        v35 = std::string::insert(&v57, 0, "Failed to acquire entity \"");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        v37 = std::string::append(&v58, "\" in quad node ");
        long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v56, v8);
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v39 = &v56;
        }
        else {
          v39 = (std::string *)v56.__r_.__value_.__r.__words[0];
        }
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v56.__r_.__value_.__l.__size_;
        }
        v41 = std::string::append(&v59, (const std::string::value_type *)v39, size);
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        v43 = std::string::append(&v60, " at position ");
        long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v55, v6);
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v45 = &v55;
        }
        else {
          v45 = (std::string *)v55.__r_.__value_.__r.__words[0];
        }
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v46 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v46 = v55.__r_.__value_.__l.__size_;
        }
        v47 = std::string::append(&v61, (const std::string::value_type *)v45, v46);
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v62.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        v49 = std::string::append(&v62, " on layer ");
        long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v63.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        v51 = sub_736EC(9u);
        v52 = std::string::append(&v63, v51);
        long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        std::string::size_type v65 = v52->__r_.__value_.__r.__words[2];
        long long v64 = v53;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        v54 = (void *)sub_2F404(v34, &v64);
      }
      return (uint64_t)&v18[v6 + 1] + v18[v6 + 1];
    }
  }
  return 0;
}

void sub_BF62C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 89) < 0) {
    operator delete(*(void **)(v54 - 112));
  }
  if (*(char *)(v54 - 121) < 0)
  {
    operator delete(*(void **)(v54 - 144));
    if ((*(char *)(v54 - 153) & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  else if ((*(char *)(v54 - 153) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v54 - 176));
  if ((a15 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a10);
  if ((a54 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a42);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a16);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_12;
  }
LABEL_20:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
LABEL_21:
  }
    _Unwind_Resume(a1);
LABEL_12:
  operator delete(__p);
  goto LABEL_21;
}

void sub_BF647C(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 24) = -1;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    while (*(_DWORD *)(v5 + 32)
         && *(_DWORD *)(v5 + 36) != -1
         && *(void *)v5 != 0x7FFFFFFFFFFFFFFFLL
         && *(void *)(v5 + 24) != 0x7FFFFFFFFFFFFFFFLL)
    {
      long long v24 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      v19[1] = 0x7FFFFFFFLL;
      v19[0] = -1;
      v19[2] = -1;
      v19[3] = -1;
      v19[4] = 0x7FFFFFFFFFFFFFFFLL;
      DWORD2(v20) = -1935635296;
      *(void *)&long long v21 = 0;
      *(_DWORD *)((char *)&v21 + 7) = 0;
      __p = 0;
      BOOL v23 = 0;
      *(void *)&long long v24 = 0;
      DWORD2(v24) = 0;
      BYTE12(v24) = 100;
      sub_BF6684(a1, (uint64_t *)v5, a3, (uint64_t)v19, a4, (char **)a5, 1.0);
      if (__p)
      {
        BOOL v23 = __p;
        operator delete(__p);
      }
      v5 += 64;
      if (v5 == v6)
      {
        uint64_t v10 = *(char **)a5;
        unint64_t v9 = *(char **)(a5 + 8);
        if (*(char **)a5 != v9)
        {
          uint64_t v11 = *(char **)a5;
          unsigned int v12 = *(char **)a5;
          while (v12[32])
          {
            v12 += 80;
            if (v12 == v9)
            {
              unint64_t v13 = v9 - v10 - 80;
              if (v13 < 0x50) {
                goto LABEL_21;
              }
              unint64_t v14 = v13 / 0x50 + 1;
              uint64_t v11 = &v10[80 * (v14 & 0x7FFFFFFFFFFFFFELL)];
              v15 = v10 + 128;
              uint64_t v16 = v14 & 0x7FFFFFFFFFFFFFELL;
              do
              {
                *(v15 - 80) = 0;
                unsigned char *v15 = 0;
                v15 += 160;
                v16 -= 2;
              }
              while (v16);
              if (v14 != (v14 & 0x7FFFFFFFFFFFFFELL))
              {
LABEL_21:
                do
                {
                  v11[48] = 0;
                  v11 += 80;
                }
                while (v11 != v9);
              }
              return;
            }
          }
        }
        return;
      }
    }
  }
}

void sub_BF6648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
  {
    operator delete(__p);
    long long v24 = *(void **)v22;
    if (!*(void *)v22) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    long long v24 = *(void **)v22;
    if (!*(void *)v22) {
      goto LABEL_3;
    }
  }
  *(void *)(v22 + 8) = v24;
  operator delete(v24);
  _Unwind_Resume(exception_object);
}

void sub_BF6684(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, int a5, char **a6, double a7)
{
  uint64_t v11 = *a2;
  double v12 = *(double *)(a4 + 56);
  __int16 v42 = *(_WORD *)(a4 + 48);
  char v13 = *(unsigned char *)(a4 + 64);
  char v14 = *((unsigned char *)a2 + 56);
  BOOL v15 = a3 == 5;
  std::string v56 = 0;
  std::string v57 = 0;
  uint64_t v58 = 0;
  uint64_t v16 = *(void *)(a1 + 104);
  unint64_t v17 = a2[4];
  if (*(unsigned char *)(v16 + 7774))
  {
    v18 = sub_290DEC(v16 + 3896, v17, 1);
    if (!v18) {
      return;
    }
    v19 = &v18[-*(int *)v18];
    if (*(unsigned __int16 *)v19 < 5u) {
      return;
    }
    uint64_t v20 = *((unsigned __int16 *)v19 + 2);
    if (!v20
      || *(_DWORD *)&v18[v20 + *(unsigned int *)&v18[v20]] <= HIDWORD(v17)
      || !sub_295DB4(v16, v17))
    {
      return;
    }
    unint64_t v17 = a2[4];
  }
  sub_ED9FD0((unsigned __int8 *)a1, v17, &v56);
  long long v21 = v56;
  uint64_t v22 = v57;
  if (v56 != v57)
  {
    double v23 = v12 * 3.6;
    while (1)
    {
      uint64_t v24 = *v21;
      BOOL v25 = (int *)sub_2D5D58(*(void *)(a1 + 104), *((unsigned int *)a2 + 8) | ((unint64_t)*((unsigned __int16 *)a2 + 18) << 32));
      int v26 = (unsigned __int16 *)((char *)v25 - *v25);
      if (*v26 >= 9u && (uint64_t v27 = v26[4]) != 0)
      {
        unsigned int v28 = 0;
        uint64_t v29 = a2[3];
        if (v29 != 0x7FFFFFFFFFFFFFFFLL)
        {
          unsigned int v30 = *(int *)((char *)v25 + v27);
          if (v30)
          {
            double v31 = (double)v29 / (double)v30;
            double v32 = 1000000000.0;
            if (v31 <= 1.0) {
              double v32 = v31 * 1000000000.0;
            }
            if (v31 >= 0.0) {
              double v33 = v32;
            }
            else {
              double v33 = 0.0;
            }
            unsigned int v28 = vcvtad_u64_f64(v33);
          }
        }
      }
      else
      {
        unsigned int v28 = 0;
      }
      if ((v24 & 0x1000000000000000) != 0) {
        unsigned int v34 = v28;
      }
      else {
        unsigned int v34 = 1000000000 - v28;
      }
      unsigned int v35 = *((unsigned __int16 *)a2 + 21);
      unsigned int v36 = *((unsigned __int16 *)a2 + 20);
      *((void *)&v43 + 1) = v11;
      double v44 = v23;
      uint64_t v45 = 0;
      double v46 = a7;
      char v47 = 1;
      int v48 = a5;
      int v49 = a5;
      uint64_t v50 = v11;
      __int16 v51 = 0;
      __int16 v52 = v42;
      char v53 = v14;
      BOOL v54 = v15;
      char v55 = v13;
      LODWORD(v43) = v34;
      int v37 = (v24 & 0x6000000000000000) == 0;
      if ((v24 & 0x1000000000000000) != 0) {
        int v37 = (HIDWORD(v24) >> 30) & 1;
      }
      if ((v24 & 0x2000000000000000) != 0) {
        int v37 = 2;
      }
      BOOL v38 = v37 != v35;
      if (v35 < 0x100) {
        BOOL v38 = 0;
      }
      LOBYTE(v45) = v38;
      if (v36 <= 0xFF)
      {
        LOBYTE(v51) = 0;
      }
      else
      {
        char v39 = ((v24 & 0x1000000000000000) == 0) ^ (v36 != 0);
        LOBYTE(v51) = v39;
        if (a3 == 2 && (v39 & 1) != 0) {
          goto LABEL_12;
        }
      }
      uint64_t v59 = v24;
      sub_BF6964(a6, &v59, &v43);
LABEL_12:
      if (++v21 == v22)
      {
        long long v21 = v56;
        break;
      }
    }
  }
  if (v21)
  {
    std::string v57 = v21;
    operator delete(v21);
  }
}

void sub_BF6940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_BF6964(char **a1, void *a2, long long *a3)
{
  v7 = a1[1];
  unint64_t v6 = (unint64_t)a1[2];
  if ((unint64_t)v7 >= v6)
  {
    double v12 = *a1;
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 4);
    unint64_t v14 = v13 + 1;
    if (v13 + 1 > 0x333333333333333) {
      sub_2E00();
    }
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - (void)v12) >> 4);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x199999999999999) {
      unint64_t v16 = 0x333333333333333;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 > 0x333333333333333) {
        sub_188D718();
      }
      unint64_t v17 = (char *)operator new(80 * v16);
    }
    else
    {
      unint64_t v17 = 0;
    }
    long long v18 = *a3;
    v19 = &v17[80 * v13];
    *(_OWORD *)(v19 + 24) = a3[1];
    long long v20 = a3[3];
    *(_OWORD *)(v19 + 40) = a3[2];
    *(_OWORD *)(v19 + 56) = v20;
    *(void *)v19 = *a2;
    *((void *)v19 + 9) = *((void *)a3 + 8);
    *(_OWORD *)(v19 + 8) = v18;
    uint64_t v11 = v19 + 80;
    if (v7 != v12)
    {
      do
      {
        *((_OWORD *)v19 - 5) = *((_OWORD *)v7 - 5);
        long long v21 = *((_OWORD *)v7 - 4);
        long long v22 = *((_OWORD *)v7 - 3);
        long long v23 = *((_OWORD *)v7 - 1);
        *((_OWORD *)v19 - 2) = *((_OWORD *)v7 - 2);
        *((_OWORD *)v19 - 1) = v23;
        *((_OWORD *)v19 - 4) = v21;
        *((_OWORD *)v19 - 3) = v22;
        v19 -= 80;
        v7 -= 80;
      }
      while (v7 != v12);
      v7 = *a1;
    }
    *a1 = v19;
    a1[1] = v11;
    a1[2] = &v17[80 * v16];
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *(void *)v7 = *a2;
    *(_OWORD *)(v7 + 8) = *a3;
    long long v8 = a3[1];
    long long v9 = a3[2];
    long long v10 = a3[3];
    *((void *)v7 + 9) = *((void *)a3 + 8);
    *(_OWORD *)(v7 + 56) = v10;
    *(_OWORD *)(v7 + 40) = v9;
    *(_OWORD *)(v7 + 24) = v8;
    uint64_t v11 = v7 + 80;
  }
  a1[1] = v11;
  return v11 - 80;
}

uint64_t sub_BF6AF0(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = result;
LABEL_2:
  unint64_t v78 = a2;
  v79 = (uint64_t *)(a2 - 64);
  v76 = (uint64_t *)(a2 - 192);
  v77 = (uint64_t *)(a2 - 128);
  uint64_t v10 = v9;
LABEL_3:
  uint64_t v11 = 1 - a4;
  while (1)
  {
    uint64_t v9 = v10;
    uint64_t v12 = a2 - v10;
    unint64_t v13 = (uint64_t)(a2 - v10) >> 6;
    if (!(!v6 & v5))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v35 = *(void *)v10;
          if (*(void *)(a2 - 64) >= *(void *)v10) {
            return result;
          }
          uint64_t v94 = *(void *)(v10 + 8);
          int v98 = *(_DWORD *)(v10 + 16);
          *(_OWORD *)v90 = *(_OWORD *)(v10 + 20);
          *(_DWORD *)&v90[16] = *(_DWORD *)(v10 + 36);
          unsigned int v36 = *(unsigned __int16 *)(v10 + 40);
          unsigned int v37 = *(unsigned __int16 *)(v10 + 42);
          uint64_t v82 = *(void *)(v10 + 48);
          char v86 = *(unsigned char *)(v10 + 56);
          *(void *)uint64_t v10 = *(void *)(a2 - 64);
          uint64_t v38 = *(void *)(a2 - 56);
          *(_DWORD *)(v10 + 16) = *(_DWORD *)(a2 - 48);
          *(void *)(v10 + 8) = v38;
          *(_OWORD *)(v10 + 24) = *(_OWORD *)(a2 - 40);
          char v39 = *(unsigned char *)(a2 - 23);
          if (v39)
          {
            *(unsigned char *)(v10 + 40) = *(unsigned char *)(a2 - 24);
            char v39 = 1;
          }
          *(unsigned char *)(v10 + 41) = v39;
          char v40 = *(unsigned char *)(a2 - 21);
          if (v40)
          {
            *(unsigned char *)(v10 + 42) = *(unsigned char *)(a2 - 22);
            char v40 = 1;
          }
          *(unsigned char *)(v10 + 43) = v40;
          uint64_t v41 = *(void *)(a2 - 16);
          *(unsigned char *)(v10 + 56) = *(unsigned char *)(a2 - 8);
          *(void *)(v10 + 48) = v41;
          *(void *)(a2 - 64) = v35;
          *(void *)(a2 - 56) = v94;
          *(_DWORD *)(a2 - 48) = v98;
          *(_OWORD *)(a2 - 40) = *(_OWORD *)&v90[4];
          if (v36 < 0x100)
          {
            *(unsigned char *)(a2 - 23) = 0;
            if (v37 >= 0x100) {
              goto LABEL_40;
            }
          }
          else
          {
            *(unsigned char *)(a2 - 24) = v36;
            *(unsigned char *)(a2 - 23) = 1;
            if (v37 >= 0x100)
            {
LABEL_40:
              *(unsigned char *)(a2 - 22) = v37;
              char v42 = 1;
              goto LABEL_41;
            }
          }
          char v42 = 0;
LABEL_41:
          *(unsigned char *)(a2 - 21) = v42;
          *(void *)(a2 - 16) = v82;
          *(unsigned char *)(a2 - 8) = v86;
          return result;
        case 3uLL:
          return sub_BF7404((uint64_t *)v10, (uint64_t *)(v10 + 64), v79);
        case 4uLL:
          return sub_BF8420(v10, v10 + 64, v10 + 128, (uint64_t)v79);
        case 5uLL:
          return sub_BF87F0(v10, v10 + 64, v10 + 128, v10 + 192, (uint64_t)v79);
        default:
          JUMPOUT(0);
      }
    }
    if (v12 <= 1535)
    {
      if (a5)
      {
        if (v10 == a2) {
          return result;
        }
        uint64_t v43 = v10 + 64;
        if (v10 + 64 == a2) {
          return result;
        }
        uint64_t v44 = 0;
        uint64_t v45 = v10;
        while (2)
        {
          uint64_t v47 = v43;
          uint64_t v48 = *(void *)(v45 + 64);
          if (v48 < *(void *)v45)
          {
            uint64_t v95 = *(void *)(v45 + 72);
            int v99 = *(_DWORD *)(v45 + 80);
            *(_DWORD *)&v91[16] = *(_DWORD *)(v45 + 100);
            *(_OWORD *)v91 = *(_OWORD *)(v45 + 84);
            unsigned int v49 = *(unsigned __int16 *)(v45 + 104);
            unsigned int v50 = *(unsigned __int16 *)(v45 + 106);
            uint64_t v83 = *(void *)(v45 + 112);
            char v87 = *(unsigned char *)(v45 + 120);
            uint64_t v51 = v44;
            uint64_t v52 = *(void *)v45;
            while (1)
            {
              uint64_t v53 = v10 + v51;
              result = *(void *)(v10 + v51 + 8);
              *(void *)(v53 + 64) = v52;
              *(void *)(v53 + 72) = result;
              *(_DWORD *)(v53 + 80) = *(_DWORD *)(v10 + v51 + 16);
              *(_OWORD *)(v53 + 88) = *(_OWORD *)(v10 + v51 + 24);
              char v54 = *(unsigned char *)(v10 + v51 + 41);
              if (v54)
              {
                *(unsigned char *)(v53 + 104) = *(unsigned char *)(v53 + 40);
                char v54 = 1;
              }
              *(unsigned char *)(v53 + 105) = v54;
              if (*(unsigned char *)(v53 + 43))
              {
                *(unsigned char *)(v10 + v51 + 106) = *(unsigned char *)(v10 + v51 + 42);
                char v55 = 1;
              }
              else
              {
                char v55 = 0;
              }
              uint64_t v56 = v10 + v51;
              *(unsigned char *)(v56 + 107) = v55;
              *(void *)(v56 + 112) = *(void *)(v10 + v51 + 48);
              *(unsigned char *)(v56 + 120) = *(unsigned char *)(v10 + v51 + 56);
              if (!v51) {
                break;
              }
              uint64_t v52 = *(void *)(v56 - 64);
              v51 -= 64;
              if (v48 >= v52)
              {
                uint64_t v57 = v10 + v51 + 64;
                goto LABEL_69;
              }
            }
            uint64_t v57 = v10;
LABEL_69:
            *(void *)uint64_t v57 = v48;
            *(_DWORD *)(v56 + 16) = v99;
            *(void *)(v56 + 8) = v95;
            *(_OWORD *)(v56 + 24) = *(_OWORD *)&v91[4];
            if (v49 < 0x100)
            {
              *(unsigned char *)(v57 + 41) = 0;
              if (v50 >= 0x100) {
                goto LABEL_55;
              }
LABEL_71:
              char v46 = 0;
            }
            else
            {
              *(unsigned char *)(v57 + 40) = v49;
              *(unsigned char *)(v57 + 41) = 1;
              if (v50 < 0x100) {
                goto LABEL_71;
              }
LABEL_55:
              *(unsigned char *)(v57 + 42) = v50;
              char v46 = 1;
            }
            *(unsigned char *)(v57 + 43) = v46;
            *(unsigned char *)(v56 + 56) = v87;
            *(void *)(v56 + 48) = v83;
          }
          uint64_t v43 = v47 + 64;
          v44 += 64;
          uint64_t v45 = v47;
          if (v47 + 64 == a2) {
            return result;
          }
          continue;
        }
      }
      if (v10 == a2) {
        return result;
      }
      uint64_t v63 = v10 + 64;
      if (v10 + 64 == a2) {
        return result;
      }
      uint64_t v64 = v10 + 112;
      while (2)
      {
        uint64_t v66 = v63;
        uint64_t v67 = *(void *)(v9 + 64);
        if (v67 < *(void *)v9)
        {
          uint64_t v96 = *(void *)(v9 + 72);
          int v100 = *(_DWORD *)(v9 + 80);
          *(_DWORD *)&v92[16] = *(_DWORD *)(v9 + 100);
          *(_OWORD *)v92 = *(_OWORD *)(v9 + 84);
          unsigned int v68 = *(unsigned __int16 *)(v9 + 104);
          unsigned int v69 = *(unsigned __int16 *)(v9 + 106);
          uint64_t v84 = *(void *)(v9 + 112);
          char v88 = *(unsigned char *)(v9 + 120);
          uint64_t v70 = v64;
          uint64_t v71 = *(void *)v9;
          do
          {
            uint64_t v72 = *(void *)(v70 - 104);
            *(void *)(v70 - 48) = v71;
            *(void *)(v70 - 40) = v72;
            *(_DWORD *)(v70 - 32) = *(_DWORD *)(v70 - 96);
            *(_OWORD *)(v70 - 24) = *(_OWORD *)(v70 - 88);
            char v73 = *(unsigned char *)(v70 - 71);
            if (v73)
            {
              *(unsigned char *)(v70 - 8) = *(unsigned char *)(v70 - 72);
              char v73 = 1;
            }
            *(unsigned char *)(v70 - 7) = v73;
            char v74 = *(unsigned char *)(v70 - 69);
            if (v74)
            {
              *(unsigned char *)(v70 - 6) = *(unsigned char *)(v70 - 70);
              char v74 = 1;
            }
            *(unsigned char *)(v70 - 5) = v74;
            uint64_t v75 = v70 - 64;
            *(void *)uint64_t v70 = *(void *)(v70 - 64);
            *(unsigned char *)(v70 + 8) = *(unsigned char *)(v70 - 56);
            uint64_t v71 = *(void *)(v70 - 176);
            v70 -= 64;
          }
          while (v67 < v71);
          *(void *)(v75 - 48) = v67;
          *(_DWORD *)(v75 - 32) = v100;
          *(void *)(v75 - 40) = v96;
          *(_OWORD *)(v75 - 24) = *(_OWORD *)&v92[4];
          if (v68 < 0x100)
          {
            *(unsigned char *)(v75 - 7) = 0;
            if (v69 >= 0x100) {
              goto LABEL_83;
            }
LABEL_95:
            char v65 = 0;
          }
          else
          {
            *(unsigned char *)(v75 - 8) = v68;
            *(unsigned char *)(v75 - 7) = 1;
            if (v69 < 0x100) {
              goto LABEL_95;
            }
LABEL_83:
            *(unsigned char *)(v75 - 6) = v69;
            char v65 = 1;
          }
          *(unsigned char *)(v75 - 5) = v65;
          *(unsigned char *)(v75 + 8) = v88;
          *(void *)uint64_t v75 = v84;
        }
        uint64_t v63 = v66 + 64;
        v64 += 64;
        uint64_t v9 = v66;
        if (v66 + 64 == a2) {
          return result;
        }
        continue;
      }
    }
    uint64_t v14 = v11;
    if (v11 == 1) {
      break;
    }
    unint64_t v15 = v13 >> 1;
    unint64_t v16 = (uint64_t *)(v10 + (v13 >> 1 << 6));
    if ((unint64_t)v12 <= 0x2000)
    {
      sub_BF7404(v16, (uint64_t *)v10, v79);
      if (a5) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
    sub_BF7404((uint64_t *)v10, v16, v79);
    uint64_t v17 = v10 + (v15 << 6);
    sub_BF7404((uint64_t *)(v10 + 64), (uint64_t *)(v17 - 64), v77);
    sub_BF7404((uint64_t *)(v10 + 128), (uint64_t *)(v10 + 64 + (v15 << 6)), v76);
    sub_BF7404((uint64_t *)(v17 - 64), v16, (uint64_t *)(v10 + 64 + (v15 << 6)));
    uint64_t v18 = *(void *)v10;
    uint64_t v93 = *(void *)(v10 + 8);
    int v97 = *(_DWORD *)(v10 + 16);
    *(_DWORD *)&v89[16] = *(_DWORD *)(v10 + 36);
    *(_OWORD *)v89 = *(_OWORD *)(v10 + 20);
    unsigned int v19 = *(unsigned __int16 *)(v10 + 40);
    unsigned int v20 = *(unsigned __int16 *)(v10 + 42);
    uint64_t v81 = *(void *)(v10 + 48);
    char v85 = *(unsigned char *)(v10 + 56);
    int v22 = *(unsigned __int8 *)(v17 + 41);
    long long v21 = (unsigned char *)(v17 + 41);
    uint64_t v23 = *(void *)(v21 - 33);
    int v24 = *(_DWORD *)(v21 - 25);
    *(void *)uint64_t v10 = *v16;
    *(void *)(v10 + 8) = v23;
    *(_DWORD *)(v10 + 16) = v24;
    *(_OWORD *)(v10 + 24) = *(_OWORD *)(v21 - 17);
    if (v22)
    {
      *(unsigned char *)(v10 + 40) = *(unsigned char *)(v10 + (v15 << 6) + 40);
      *(unsigned char *)(v10 + 41) = 1;
      uint64_t v25 = v10 + (v15 << 6);
      int v26 = (char *)(v25 + 43);
      char v27 = *(unsigned char *)(v25 + 43);
      a2 = v78;
      if (!v27) {
        goto LABEL_12;
      }
LABEL_11:
      *(unsigned char *)(v10 + 42) = *(unsigned char *)(v25 + 42);
      char v27 = 1;
      goto LABEL_12;
    }
    *(unsigned char *)(v10 + 41) = 0;
    uint64_t v25 = v10 + (v15 << 6);
    int v26 = (char *)(v25 + 43);
    char v27 = *(unsigned char *)(v25 + 43);
    a2 = v78;
    if (v27) {
      goto LABEL_11;
    }
LABEL_12:
    uint64_t v29 = *(void *)(v25 + 48);
    uint64_t v28 = v25 + 48;
    *(unsigned char *)(v10 + 43) = v27;
    char v30 = *(unsigned char *)(v28 + 8);
    *(void *)(v10 + 48) = v29;
    *(unsigned char *)(v10 + 56) = v30;
    uint64_t *v16 = v18;
    *(_DWORD *)(v21 - 25) = v97;
    *(void *)(v21 - 33) = v93;
    *(_OWORD *)(v21 - 17) = *(_OWORD *)&v89[4];
    if (v19 < 0x100)
    {
      *long long v21 = 0;
      if (v20 >= 0x100)
      {
LABEL_14:
        *(unsigned char *)(v10 + (v15 << 6) + 42) = v20;
        char v31 = 1;
        goto LABEL_15;
      }
    }
    else
    {
      *(unsigned char *)(v10 + (v15 << 6) + 40) = v19;
      *long long v21 = 1;
      if (v20 >= 0x100) {
        goto LABEL_14;
      }
    }
    char v31 = 0;
LABEL_15:
    *int v26 = v31;
    *(unsigned char *)(v28 + 8) = v85;
    *(void *)uint64_t v28 = v81;
    if (a5) {
      goto LABEL_19;
    }
LABEL_18:
    if (*(void *)(v10 - 64) >= *(void *)v10)
    {
      result = (uint64_t)sub_BF7A18((uint64_t *)v10, a2);
      uint64_t v10 = result;
      goto LABEL_29;
    }
LABEL_19:
    unint64_t v32 = sub_BF7D00((uint64_t *)v10, a2);
    if ((v33 & 1) == 0) {
      goto LABEL_27;
    }
    BOOL v34 = sub_BF7FF0(v10, v32);
    uint64_t v10 = v32 + 64;
    result = sub_BF7FF0(v32 + 64, a2);
    if (result)
    {
      a4 = -v14;
      a2 = v32;
      if (v34) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v11 = v14 + 1;
    if (!v34)
    {
LABEL_27:
      result = sub_BF6AF0(v9, v32, a3, -v14, a5 & 1);
      uint64_t v10 = v32 + 64;
LABEL_29:
      a5 = 0;
      a4 = -v14;
      goto LABEL_3;
    }
  }
  if (v10 != a2)
  {
    unint64_t v58 = (v13 - 2) >> 1;
    unint64_t v59 = v58 + 1;
    std::string v60 = (void *)(v10 + (v58 << 6));
    do
    {
      sub_BF8CFC(v10, a3, (uint64_t)(a2 - v10) >> 6, v60);
      v60 -= 8;
      --v59;
    }
    while (v59);
    unint64_t v61 = (unint64_t)v12 >> 6;
    do
    {
      result = sub_BF8EF0(v10, a2, a3, v61);
      a2 -= 64;
    }
    while (v61-- > 2);
  }
  return result;
}

uint64_t sub_BF7404(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a1;
  uint64_t v5 = *a3;
  if (*a2 < *a1)
  {
    char v6 = a1 + 1;
    v7 = (_OWORD *)((char *)a1 + 20);
    long long v8 = a1 + 6;
    uint64_t v9 = a1 + 3;
    if (v5 < v3)
    {
      uint64_t v67 = *v6;
      int v72 = *((_DWORD *)a1 + 4);
      *(_OWORD *)std::string v62 = *v7;
      *(_DWORD *)&v62[16] = *((_DWORD *)a1 + 9);
      unsigned int v10 = *((unsigned __int16 *)a1 + 20);
      unsigned int v11 = *((unsigned __int16 *)a1 + 21);
      uint64_t v52 = *v8;
      char v57 = *((unsigned char *)a1 + 56);
      *a1 = v5;
      uint64_t v12 = a3[1];
      *((_DWORD *)a1 + 4) = *((_DWORD *)a3 + 4);
      *char v6 = v12;
      *uint64_t v9 = *(_OWORD *)(a3 + 3);
      char v13 = *((unsigned char *)a3 + 41);
      if (v13)
      {
        *((unsigned char *)a1 + 40) = *((unsigned char *)a3 + 40);
        char v13 = 1;
      }
      *((unsigned char *)a1 + 41) = v13;
      char v14 = *((unsigned char *)a3 + 43);
      if (v14)
      {
        *((unsigned char *)a1 + 42) = *((unsigned char *)a3 + 42);
        char v14 = 1;
      }
      *((unsigned char *)a1 + 43) = v14;
      uint64_t v15 = a3[6];
      *((unsigned char *)a1 + 56) = *((unsigned char *)a3 + 56);
      *long long v8 = v15;
      *a3 = v4;
      a3[1] = v67;
      *((_DWORD *)a3 + 4) = v72;
      *(_OWORD *)(a3 + 3) = *(_OWORD *)&v62[4];
      if (v10 < 0x100)
      {
        *((unsigned char *)a3 + 41) = 0;
        if (v11 >= 0x100) {
          goto LABEL_9;
        }
      }
      else
      {
        *((unsigned char *)a3 + 40) = v10;
        *((unsigned char *)a3 + 41) = 1;
        if (v11 >= 0x100)
        {
LABEL_9:
          *((unsigned char *)a3 + 42) = v11;
          char v16 = 1;
LABEL_10:
          *((unsigned char *)a3 + 43) = v16;
          a3[6] = v52;
          *((unsigned char *)a3 + 56) = v57;
          return 1;
        }
      }
      char v16 = 0;
      goto LABEL_10;
    }
    uint64_t v70 = *v6;
    int v75 = *((_DWORD *)a1 + 4);
    *(_OWORD *)char v65 = *v7;
    *(_DWORD *)&v65[16] = *((_DWORD *)a1 + 9);
    unsigned int v35 = *((unsigned __int16 *)a1 + 20);
    unsigned int v36 = *((unsigned __int16 *)a1 + 21);
    uint64_t v55 = *v8;
    char v60 = *((unsigned char *)a1 + 56);
    *a1 = v3;
    unsigned int v37 = a2 + 1;
    uint64_t v38 = a2[1];
    *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
    *char v6 = v38;
    *uint64_t v9 = *(_OWORD *)(a2 + 3);
    char v39 = *((unsigned char *)a2 + 41);
    if (v39)
    {
      *((unsigned char *)a1 + 40) = *((unsigned char *)a2 + 40);
      char v39 = 1;
    }
    char v40 = a2 + 3;
    *((unsigned char *)a1 + 41) = v39;
    char v41 = *((unsigned char *)a2 + 43);
    if (v41)
    {
      *((unsigned char *)a1 + 42) = *((unsigned char *)a2 + 42);
      char v41 = 1;
    }
    *((unsigned char *)a1 + 43) = v41;
    char v42 = a2 + 6;
    uint64_t v43 = a2[6];
    *((unsigned char *)a1 + 56) = *((unsigned char *)a2 + 56);
    *long long v8 = v43;
    *a2 = v4;
    uint64_t *v37 = v70;
    *((_DWORD *)a2 + 4) = v75;
    *char v40 = *(_OWORD *)&v65[4];
    if (v35 < 0x100)
    {
      *((unsigned char *)a2 + 41) = 0;
      if (v36 >= 0x100) {
        goto LABEL_34;
      }
    }
    else
    {
      *((unsigned char *)a2 + 40) = v35;
      *((unsigned char *)a2 + 41) = 1;
      if (v36 >= 0x100)
      {
LABEL_34:
        *((unsigned char *)a2 + 42) = v36;
        char v44 = 1;
        goto LABEL_35;
      }
    }
    char v44 = 0;
LABEL_35:
    *((unsigned char *)a2 + 43) = v44;
    *char v42 = v55;
    *((unsigned char *)a2 + 56) = v60;
    if (*a3 < v4)
    {
      uint64_t v71 = *v37;
      int v76 = *((_DWORD *)a2 + 4);
      *(_OWORD *)uint64_t v66 = *(_OWORD *)((char *)a2 + 20);
      *(_DWORD *)&v66[16] = *((_DWORD *)a2 + 9);
      unsigned int v45 = *((unsigned __int16 *)a2 + 20);
      unsigned int v46 = *((unsigned __int16 *)a2 + 21);
      uint64_t v56 = *v42;
      char v61 = *((unsigned char *)a2 + 56);
      *a2 = *a3;
      uint64_t v47 = a3[1];
      *((_DWORD *)a2 + 4) = *((_DWORD *)a3 + 4);
      uint64_t *v37 = v47;
      *char v40 = *(_OWORD *)(a3 + 3);
      char v48 = *((unsigned char *)a3 + 41);
      if (v48)
      {
        *((unsigned char *)a2 + 40) = *((unsigned char *)a3 + 40);
        char v48 = 1;
      }
      *((unsigned char *)a2 + 41) = v48;
      char v49 = *((unsigned char *)a3 + 43);
      if (v49)
      {
        *((unsigned char *)a2 + 42) = *((unsigned char *)a3 + 42);
        char v49 = 1;
      }
      *((unsigned char *)a2 + 43) = v49;
      uint64_t v50 = a3[6];
      *((unsigned char *)a2 + 56) = *((unsigned char *)a3 + 56);
      *char v42 = v50;
      *a3 = v4;
      a3[1] = v71;
      *((_DWORD *)a3 + 4) = v76;
      *(_OWORD *)(a3 + 3) = *(_OWORD *)&v66[4];
      if (v45 < 0x100)
      {
        *((unsigned char *)a3 + 41) = 0;
        if (v46 >= 0x100) {
          goto LABEL_42;
        }
      }
      else
      {
        *((unsigned char *)a3 + 40) = v45;
        *((unsigned char *)a3 + 41) = 1;
        if (v46 >= 0x100)
        {
LABEL_42:
          *((unsigned char *)a3 + 42) = v46;
          char v51 = 1;
LABEL_43:
          *((unsigned char *)a3 + 43) = v51;
          a3[6] = v56;
          *((unsigned char *)a3 + 56) = v61;
          return 2;
        }
      }
      char v51 = 0;
      goto LABEL_43;
    }
    return 1;
  }
  if (v5 >= v3) {
    return 0;
  }
  uint64_t v18 = a2 + 1;
  uint64_t v68 = a2[1];
  int v73 = *((_DWORD *)a2 + 4);
  *(_OWORD *)uint64_t v63 = *(_OWORD *)((char *)a2 + 20);
  *(_DWORD *)&v63[16] = *((_DWORD *)a2 + 9);
  unsigned int v19 = *((unsigned __int16 *)a2 + 20);
  unsigned int v20 = *((unsigned __int16 *)a2 + 21);
  long long v21 = a2 + 6;
  uint64_t v53 = a2[6];
  char v58 = *((unsigned char *)a2 + 56);
  *a2 = v5;
  uint64_t v22 = a3[1];
  *((_DWORD *)a2 + 4) = *((_DWORD *)a3 + 4);
  a2[1] = v22;
  *(_OWORD *)(a2 + 3) = *(_OWORD *)(a3 + 3);
  char v23 = *((unsigned char *)a3 + 41);
  if (v23)
  {
    *((unsigned char *)a2 + 40) = *((unsigned char *)a3 + 40);
    char v23 = 1;
  }
  *((unsigned char *)a2 + 41) = v23;
  char v24 = *((unsigned char *)a3 + 43);
  if (v24)
  {
    *((unsigned char *)a2 + 42) = *((unsigned char *)a3 + 42);
    char v24 = 1;
  }
  *((unsigned char *)a2 + 43) = v24;
  uint64_t v25 = a3[6];
  *((unsigned char *)a2 + 56) = *((unsigned char *)a3 + 56);
  *long long v21 = v25;
  *a3 = v3;
  a3[1] = v68;
  *((_DWORD *)a3 + 4) = v73;
  *(_OWORD *)(a3 + 3) = *(_OWORD *)&v63[4];
  if (v19 < 0x100)
  {
    *((unsigned char *)a3 + 41) = 0;
    if (v20 >= 0x100) {
      goto LABEL_18;
    }
  }
  else
  {
    *((unsigned char *)a3 + 40) = v19;
    *((unsigned char *)a3 + 41) = 1;
    if (v20 >= 0x100)
    {
LABEL_18:
      *((unsigned char *)a3 + 42) = v20;
      char v26 = 1;
      goto LABEL_19;
    }
  }
  char v26 = 0;
LABEL_19:
  *((unsigned char *)a3 + 43) = v26;
  a3[6] = v53;
  *((unsigned char *)a3 + 56) = v58;
  uint64_t v27 = *a1;
  if (*a2 < *a1)
  {
    uint64_t v69 = a1[1];
    int v74 = *((_DWORD *)a1 + 4);
    *(_OWORD *)uint64_t v64 = *(_OWORD *)((char *)a1 + 20);
    *(_DWORD *)&v64[16] = *((_DWORD *)a1 + 9);
    unsigned int v28 = *((unsigned __int16 *)a1 + 20);
    unsigned int v29 = *((unsigned __int16 *)a1 + 21);
    uint64_t v54 = a1[6];
    char v59 = *((unsigned char *)a1 + 56);
    *a1 = *a2;
    uint64_t v30 = *v18;
    *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
    a1[1] = v30;
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
    char v31 = *((unsigned char *)a2 + 41);
    if (v31)
    {
      *((unsigned char *)a1 + 40) = *((unsigned char *)a2 + 40);
      char v31 = 1;
    }
    *((unsigned char *)a1 + 41) = v31;
    if (*((unsigned char *)a2 + 43))
    {
      *((unsigned char *)a1 + 42) = *((unsigned char *)a2 + 42);
      char v32 = 1;
    }
    else
    {
      char v32 = 0;
    }
    *((unsigned char *)a1 + 43) = v32;
    uint64_t v33 = *v21;
    *((unsigned char *)a1 + 56) = *((unsigned char *)a2 + 56);
    a1[6] = v33;
    *a2 = v27;
    uint64_t *v18 = v69;
    *((_DWORD *)a2 + 4) = v74;
    *(_OWORD *)(a2 + 3) = *(_OWORD *)&v64[4];
    if (v28 < 0x100)
    {
      *((unsigned char *)a2 + 41) = 0;
      if (v29 >= 0x100) {
        goto LABEL_26;
      }
    }
    else
    {
      *((unsigned char *)a2 + 40) = v28;
      *((unsigned char *)a2 + 41) = 1;
      if (v29 >= 0x100)
      {
LABEL_26:
        *((unsigned char *)a2 + 42) = v29;
        char v34 = 1;
LABEL_27:
        *((unsigned char *)a2 + 43) = v34;
        *long long v21 = v54;
        *((unsigned char *)a2 + 56) = v59;
        return 2;
      }
    }
    char v34 = 0;
    goto LABEL_27;
  }
  return 1;
}

uint64_t *sub_BF7A18(uint64_t *result, unint64_t a2)
{
  v2 = result;
  uint64_t v3 = result + 1;
  uint64_t v4 = *result;
  uint64_t v29 = result[1];
  int v30 = *((_DWORD *)result + 4);
  *(_OWORD *)unsigned int v28 = *(_OWORD *)((char *)result + 20);
  *(_DWORD *)&v28[16] = *((_DWORD *)result + 9);
  unsigned int v5 = *((unsigned __int16 *)result + 20);
  char v6 = result + 6;
  unsigned int v7 = *((unsigned __int16 *)result + 21);
  uint64_t v26 = result[6];
  char v27 = *((unsigned char *)result + 56);
  if (*result >= *(void *)(a2 - 64))
  {
    uint64_t v9 = result + 8;
    do
    {
      result = v9;
      if ((unint64_t)v9 >= a2) {
        break;
      }
      v9 += 8;
    }
    while (v4 >= *result);
  }
  else
  {
    do
    {
      uint64_t v8 = result[8];
      result += 8;
    }
    while (v4 >= v8);
  }
  if ((unint64_t)result < a2)
  {
    do
    {
      uint64_t v10 = *(void *)(a2 - 64);
      a2 -= 64;
    }
    while (v4 < v10);
  }
  if ((unint64_t)result < a2)
  {
    uint64_t v11 = *result;
    do
    {
      uint64_t v34 = result[1];
      int v35 = *((_DWORD *)result + 4);
      *(_OWORD *)uint64_t v33 = *(_OWORD *)((char *)result + 20);
      *(_DWORD *)&v33[16] = *((_DWORD *)result + 9);
      unsigned int v12 = *((unsigned __int16 *)result + 20);
      unsigned int v13 = *((unsigned __int16 *)result + 21);
      uint64_t v31 = result[6];
      char v32 = *((unsigned char *)result + 56);
      *result = *(void *)a2;
      uint64_t v14 = *(void *)(a2 + 8);
      *((_DWORD *)result + 4) = *(_DWORD *)(a2 + 16);
      result[1] = v14;
      *(_OWORD *)(result + 3) = *(_OWORD *)(a2 + 24);
      char v15 = *(unsigned char *)(a2 + 41);
      if (v15)
      {
        *((unsigned char *)result + 40) = *(unsigned char *)(a2 + 40);
        char v15 = 1;
      }
      *((unsigned char *)result + 41) = v15;
      char v16 = *(unsigned char *)(a2 + 43);
      if (v16)
      {
        *((unsigned char *)result + 42) = *(unsigned char *)(a2 + 42);
        char v16 = 1;
      }
      *((unsigned char *)result + 43) = v16;
      uint64_t v17 = *(void *)(a2 + 48);
      *((unsigned char *)result + 56) = *(unsigned char *)(a2 + 56);
      result[6] = v17;
      *(void *)a2 = v11;
      *(void *)(a2 + 8) = v34;
      *(_DWORD *)(a2 + 16) = v35;
      *(_OWORD *)(a2 + 24) = *(_OWORD *)&v33[4];
      if (v12 < 0x100)
      {
        *(unsigned char *)(a2 + 41) = 0;
        if (v13 >= 0x100)
        {
LABEL_17:
          *(unsigned char *)(a2 + 42) = v13;
          char v18 = 1;
          goto LABEL_18;
        }
      }
      else
      {
        *(unsigned char *)(a2 + 40) = v12;
        *(unsigned char *)(a2 + 41) = 1;
        if (v13 >= 0x100) {
          goto LABEL_17;
        }
      }
      char v18 = 0;
LABEL_18:
      *(unsigned char *)(a2 + 43) = v18;
      *(void *)(a2 + 48) = v31;
      *(unsigned char *)(a2 + 56) = v32;
      do
      {
        uint64_t v19 = result[8];
        result += 8;
        uint64_t v11 = v19;
      }
      while (v4 >= v19);
      do
      {
        uint64_t v20 = *(void *)(a2 - 64);
        a2 -= 64;
      }
      while (v4 < v20);
    }
    while ((unint64_t)result < a2);
  }
  if (result - 8 != v2)
  {
    uint64_t *v2 = *(result - 8);
    uint64_t v21 = *(result - 7);
    *((_DWORD *)v3 + 2) = *((_DWORD *)result - 12);
    *uint64_t v3 = v21;
    *(_OWORD *)(v2 + 3) = *(_OWORD *)(result - 5);
    char v22 = *((unsigned char *)result - 23);
    if (v22)
    {
      *((unsigned char *)v2 + 40) = *((unsigned char *)result - 24);
      char v22 = 1;
    }
    *((unsigned char *)v2 + 41) = v22;
    char v23 = *((unsigned char *)result - 21);
    if (v23)
    {
      *((unsigned char *)v2 + 42) = *((unsigned char *)result - 22);
      char v23 = 1;
    }
    *((unsigned char *)v2 + 43) = v23;
    uint64_t v24 = *(result - 2);
    *((unsigned char *)v6 + 8) = *((unsigned char *)result - 8);
    *char v6 = v24;
  }
  *(result - 8) = v4;
  *((_DWORD *)result - 12) = v30;
  *(result - 7) = v29;
  *(_OWORD *)(result - 5) = *(_OWORD *)&v28[4];
  if (v5 < 0x100)
  {
    *((unsigned char *)result - 23) = 0;
    if (v7 >= 0x100) {
      goto LABEL_33;
    }
LABEL_36:
    char v25 = 0;
    goto LABEL_34;
  }
  *((unsigned char *)result - 24) = v5;
  *((unsigned char *)result - 23) = 1;
  if (v7 < 0x100) {
    goto LABEL_36;
  }
LABEL_33:
  *((unsigned char *)result - 22) = v7;
  char v25 = 1;
LABEL_34:
  *((unsigned char *)result - 21) = v25;
  *((unsigned char *)result - 8) = v27;
  *(result - 2) = v26;
  return result;
}

unint64_t sub_BF7D00(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  uint64_t v30 = a1[1];
  int v31 = *((_DWORD *)a1 + 4);
  *(_OWORD *)uint64_t v29 = *(_OWORD *)((char *)a1 + 20);
  *(_DWORD *)&v29[16] = *((_DWORD *)a1 + 9);
  unsigned int v4 = *((unsigned __int16 *)a1 + 20);
  uint64_t v27 = a1[6];
  char v28 = *((unsigned char *)a1 + 56);
  unsigned int v5 = *((unsigned __int16 *)a1 + 21);
  do
  {
    uint64_t v6 = a1[v2 + 8];
    v2 += 8;
  }
  while (v6 < v3);
  unint64_t v7 = (unint64_t)&a1[v2];
  if (v2 == 8)
  {
    do
    {
      if (v7 >= a2) {
        break;
      }
      uint64_t v9 = *(void *)(a2 - 64);
      a2 -= 64;
    }
    while (v9 >= v3);
  }
  else
  {
    do
    {
      uint64_t v8 = *(void *)(a2 - 64);
      a2 -= 64;
    }
    while (v8 >= v3);
  }
  if (v7 < a2)
  {
    unint64_t v10 = (unint64_t)&a1[v2];
    unint64_t v11 = a2;
    while (1)
    {
      uint64_t v35 = *(void *)(v10 + 8);
      int v36 = *(_DWORD *)(v10 + 16);
      *(_OWORD *)uint64_t v34 = *(_OWORD *)(v10 + 20);
      *(_DWORD *)&v34[16] = *(_DWORD *)(v10 + 36);
      unsigned int v12 = *(unsigned __int16 *)(v10 + 40);
      unsigned int v13 = *(unsigned __int16 *)(v10 + 42);
      uint64_t v32 = *(void *)(v10 + 48);
      char v33 = *(unsigned char *)(v10 + 56);
      *(void *)unint64_t v10 = *(void *)v11;
      uint64_t v14 = *(void *)(v11 + 8);
      *(_DWORD *)(v10 + 16) = *(_DWORD *)(v11 + 16);
      *(void *)(v10 + 8) = v14;
      *(_OWORD *)(v10 + 24) = *(_OWORD *)(v11 + 24);
      char v15 = *(unsigned char *)(v11 + 41);
      if (v15)
      {
        *(unsigned char *)(v10 + 40) = *(unsigned char *)(v11 + 40);
        char v15 = 1;
      }
      *(unsigned char *)(v10 + 41) = v15;
      char v16 = *(unsigned char *)(v11 + 43);
      if (v16)
      {
        *(unsigned char *)(v10 + 42) = *(unsigned char *)(v11 + 42);
        char v16 = 1;
      }
      *(unsigned char *)(v10 + 43) = v16;
      uint64_t v17 = *(void *)(v11 + 48);
      *(unsigned char *)(v10 + 56) = *(unsigned char *)(v11 + 56);
      *(void *)(v10 + 48) = v17;
      *(void *)unint64_t v11 = v6;
      *(void *)(v11 + 8) = v35;
      *(_DWORD *)(v11 + 16) = v36;
      *(_OWORD *)(v11 + 24) = *(_OWORD *)&v34[4];
      if (v12 < 0x100)
      {
        *(unsigned char *)(v11 + 41) = 0;
        if (v13 >= 0x100)
        {
LABEL_16:
          *(unsigned char *)(v11 + 42) = v13;
          char v18 = 1;
          goto LABEL_17;
        }
      }
      else
      {
        *(unsigned char *)(v11 + 40) = v12;
        *(unsigned char *)(v11 + 41) = 1;
        if (v13 >= 0x100) {
          goto LABEL_16;
        }
      }
      char v18 = 0;
LABEL_17:
      *(unsigned char *)(v11 + 43) = v18;
      *(void *)(v11 + 48) = v32;
      *(unsigned char *)(v11 + 56) = v33;
      do
      {
        uint64_t v19 = *(void *)(v10 + 64);
        v10 += 64;
        uint64_t v6 = v19;
      }
      while (v19 < v3);
      do
      {
        uint64_t v20 = *(void *)(v11 - 64);
        v11 -= 64;
      }
      while (v20 >= v3);
      if (v10 >= v11) {
        goto LABEL_25;
      }
    }
  }
  unint64_t v10 = (unint64_t)&a1[v2];
LABEL_25:
  if ((uint64_t *)(v10 - 64) != a1)
  {
    *a1 = *(void *)(v10 - 64);
    uint64_t v21 = *(void *)(v10 - 56);
    *((_DWORD *)a1 + 4) = *(_DWORD *)(v10 - 48);
    a1[1] = v21;
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(v10 - 40);
    char v22 = *(unsigned char *)(v10 - 23);
    if (v22)
    {
      *((unsigned char *)a1 + 40) = *(unsigned char *)(v10 - 24);
      char v22 = 1;
    }
    *((unsigned char *)a1 + 41) = v22;
    char v23 = *(unsigned char *)(v10 - 21);
    if (v23)
    {
      *((unsigned char *)a1 + 42) = *(unsigned char *)(v10 - 22);
      char v23 = 1;
    }
    *((unsigned char *)a1 + 43) = v23;
    uint64_t v24 = *(void *)(v10 - 16);
    *((unsigned char *)a1 + 56) = *(unsigned char *)(v10 - 8);
    a1[6] = v24;
  }
  *(void *)(v10 - 64) = v3;
  *(_DWORD *)(v10 - 48) = v31;
  *(void *)(v10 - 56) = v30;
  *(_OWORD *)(v10 - 40) = *(_OWORD *)&v29[4];
  if (v4 < 0x100)
  {
    *(unsigned char *)(v10 - 23) = 0;
    if (v5 >= 0x100) {
      goto LABEL_33;
    }
LABEL_36:
    char v25 = 0;
    goto LABEL_34;
  }
  *(unsigned char *)(v10 - 24) = v4;
  *(unsigned char *)(v10 - 23) = 1;
  if (v5 < 0x100) {
    goto LABEL_36;
  }
LABEL_33:
  *(unsigned char *)(v10 - 22) = v5;
  char v25 = 1;
LABEL_34:
  *(unsigned char *)(v10 - 21) = v25;
  *(unsigned char *)(v10 - 8) = v28;
  *(void *)(v10 - 16) = v27;
  return v10 - 64;
}

BOOL sub_BF7FF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 6;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v22 = *(void *)(a2 - 64);
      uint64_t v23 = *(void *)a1;
      if (v22 >= *(void *)a1) {
        return result;
      }
      uint64_t v38 = *(void *)(a1 + 8);
      int v40 = *(_DWORD *)(a1 + 16);
      *(_OWORD *)int v36 = *(_OWORD *)(a1 + 20);
      *(_DWORD *)&v36[16] = *(_DWORD *)(a1 + 36);
      unsigned int v24 = *(unsigned __int16 *)(a1 + 40);
      unsigned int v25 = *(unsigned __int16 *)(a1 + 42);
      uint64_t v32 = *(void *)(a1 + 48);
      char v34 = *(unsigned char *)(a1 + 56);
      *(void *)a1 = v22;
      uint64_t v26 = *(void *)(a2 - 56);
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 - 48);
      *(void *)(a1 + 8) = v26;
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 - 40);
      char v27 = *(unsigned char *)(a2 - 23);
      if (v27)
      {
        *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 - 24);
        char v27 = 1;
      }
      *(unsigned char *)(a1 + 41) = v27;
      char v28 = *(unsigned char *)(a2 - 21);
      if (v28)
      {
        *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 - 22);
        char v28 = 1;
      }
      *(unsigned char *)(a1 + 43) = v28;
      uint64_t v29 = *(void *)(a2 - 16);
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 - 8);
      *(void *)(a1 + 48) = v29;
      *(void *)(a2 - 64) = v23;
      *(void *)(a2 - 56) = v38;
      *(_DWORD *)(a2 - 48) = v40;
      *(_OWORD *)(a2 - 40) = *(_OWORD *)&v36[4];
      if (v24 < 0x100)
      {
        *(unsigned char *)(a2 - 23) = 0;
        if (v25 >= 0x100) {
          goto LABEL_31;
        }
      }
      else
      {
        *(unsigned char *)(a2 - 24) = v24;
        *(unsigned char *)(a2 - 23) = 1;
        if (v25 >= 0x100)
        {
LABEL_31:
          *(unsigned char *)(a2 - 22) = v25;
          char v30 = 1;
          goto LABEL_32;
        }
      }
      char v30 = 0;
LABEL_32:
      *(unsigned char *)(a2 - 21) = v30;
      *(void *)(a2 - 16) = v32;
      *(unsigned char *)(a2 - 8) = v34;
      return result;
    case 3:
      sub_BF7404((uint64_t *)a1, (uint64_t *)(a1 + 64), (uint64_t *)(a2 - 64));
      return 1;
    case 4:
      sub_BF8420(a1, a1 + 64, a1 + 128, a2 - 64);
      return 1;
    case 5:
      sub_BF87F0(a1, a1 + 64, a1 + 128, a1 + 192, a2 - 64);
      return 1;
    default:
      uint64_t v6 = (uint64_t *)(a1 + 128);
      sub_BF7404((uint64_t *)a1, (uint64_t *)(a1 + 64), (uint64_t *)(a1 + 128));
      uint64_t v7 = a1 + 192;
      if (a1 + 192 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (1)
  {
    uint64_t v10 = *(void *)v7;
    if (*(void *)v7 < *v6) {
      break;
    }
LABEL_5:
    uint64_t v6 = (uint64_t *)v7;
    v8 += 64;
    v7 += 64;
    if (v7 == a2) {
      return 1;
    }
  }
  uint64_t v37 = *(void *)(v7 + 8);
  int v39 = *(_DWORD *)(v7 + 16);
  *(_DWORD *)&v35[16] = *(_DWORD *)(v7 + 36);
  *(_OWORD *)uint64_t v35 = *(_OWORD *)(v7 + 20);
  unsigned int v11 = *(unsigned __int16 *)(v7 + 40);
  unsigned int v12 = *(unsigned __int16 *)(v7 + 42);
  uint64_t v31 = *(void *)(v7 + 48);
  char v33 = *(unsigned char *)(v7 + 56);
  uint64_t v13 = v8;
  uint64_t v14 = *v6;
  while (1)
  {
    uint64_t v15 = a1 + v13;
    uint64_t v16 = *(void *)(a1 + v13 + 136);
    *(void *)(v15 + 192) = v14;
    *(void *)(v15 + 200) = v16;
    *(_DWORD *)(v15 + 208) = *(_DWORD *)(a1 + v13 + 144);
    *(_OWORD *)(v15 + 216) = *(_OWORD *)(a1 + v13 + 152);
    char v17 = *(unsigned char *)(a1 + v13 + 169);
    if (v17)
    {
      *(unsigned char *)(v15 + 232) = *(unsigned char *)(v15 + 168);
      char v17 = 1;
    }
    *(unsigned char *)(v15 + 233) = v17;
    if (*(unsigned char *)(v15 + 171))
    {
      *(unsigned char *)(a1 + v13 + 234) = *(unsigned char *)(a1 + v13 + 170);
      char v18 = 1;
    }
    else
    {
      char v18 = 0;
    }
    uint64_t v19 = a1 + v13;
    *(unsigned char *)(v19 + 235) = v18;
    *(void *)(v19 + 240) = *(void *)(a1 + v13 + 176);
    *(unsigned char *)(v19 + 248) = *(unsigned char *)(a1 + v13 + 184);
    if (v13 == -128) {
      break;
    }
    uint64_t v14 = *(void *)(v19 + 64);
    v13 -= 64;
    if (v10 >= v14)
    {
      uint64_t v20 = a1 + v13 + 192;
      goto LABEL_17;
    }
  }
  uint64_t v20 = a1;
LABEL_17:
  *(void *)uint64_t v20 = v10;
  *(void *)(v19 + 136) = v37;
  *(_DWORD *)(v19 + 144) = v39;
  *(_OWORD *)(v19 + 152) = *(_OWORD *)&v35[4];
  if (v11 < 0x100)
  {
    *(unsigned char *)(v20 + 41) = 0;
    if (v12 >= 0x100) {
      goto LABEL_19;
    }
  }
  else
  {
    *(unsigned char *)(v20 + 40) = v11;
    *(unsigned char *)(v20 + 41) = 1;
    if (v12 >= 0x100)
    {
LABEL_19:
      *(unsigned char *)(v20 + 42) = v12;
      char v21 = 1;
      goto LABEL_20;
    }
  }
  char v21 = 0;
LABEL_20:
  *(unsigned char *)(v20 + 43) = v21;
  *(void *)(v19 + 176) = v31;
  *(unsigned char *)(v19 + 184) = v33;
  if (++v9 == 8) {
    return v7 + 64 == a2;
  }
  goto LABEL_5;
}

uint64_t sub_BF8420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_BF7404((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  uint64_t v9 = *(void *)a3;
  if (*(void *)a4 < *(void *)a3)
  {
    uint64_t v10 = (uint64_t *)(a3 + 8);
    uint64_t v46 = *(void *)(a3 + 8);
    int v49 = *(_DWORD *)(a3 + 16);
    *(_OWORD *)uint64_t v43 = *(_OWORD *)(a3 + 20);
    *(_DWORD *)&v43[16] = *(_DWORD *)(a3 + 36);
    unsigned int v11 = *(unsigned __int16 *)(a3 + 40);
    unsigned int v12 = *(unsigned __int16 *)(a3 + 42);
    uint64_t v13 = (uint64_t *)(a3 + 48);
    uint64_t v37 = *(void *)(a3 + 48);
    char v40 = *(unsigned char *)(a3 + 56);
    *(void *)a3 = *(void *)a4;
    uint64_t v14 = *(void *)(a4 + 8);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
    *(void *)(a3 + 8) = v14;
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(a4 + 24);
    char v15 = *(unsigned char *)(a4 + 41);
    if (v15)
    {
      *(unsigned char *)(a3 + 40) = *(unsigned char *)(a4 + 40);
      char v15 = 1;
    }
    *(unsigned char *)(a3 + 41) = v15;
    char v16 = *(unsigned char *)(a4 + 43);
    if (v16)
    {
      *(unsigned char *)(a3 + 42) = *(unsigned char *)(a4 + 42);
      char v16 = 1;
    }
    *(unsigned char *)(a3 + 43) = v16;
    uint64_t v17 = *(void *)(a4 + 48);
    uint64_t result = *(unsigned __int8 *)(a4 + 56);
    *(unsigned char *)(a3 + 56) = result;
    *uint64_t v13 = v17;
    *(void *)a4 = v9;
    *(void *)(a4 + 8) = v46;
    *(_DWORD *)(a4 + 16) = v49;
    *(_OWORD *)(a4 + 24) = *(_OWORD *)&v43[4];
    if (v11 < 0x100)
    {
      *(unsigned char *)(a4 + 41) = 0;
      if (v12 >= 0x100) {
        goto LABEL_8;
      }
    }
    else
    {
      *(unsigned char *)(a4 + 40) = v11;
      *(unsigned char *)(a4 + 41) = 1;
      if (v12 >= 0x100)
      {
LABEL_8:
        *(unsigned char *)(a4 + 42) = v12;
        char v18 = 1;
        goto LABEL_9;
      }
    }
    char v18 = 0;
LABEL_9:
    *(unsigned char *)(a4 + 43) = v18;
    *(void *)(a4 + 48) = v37;
    *(unsigned char *)(a4 + 56) = v40;
    uint64_t v19 = *(void *)a2;
    if (*(void *)a3 >= *(void *)a2) {
      return result;
    }
    uint64_t v20 = (uint64_t *)(a2 + 8);
    uint64_t v47 = *(void *)(a2 + 8);
    int v50 = *(_DWORD *)(a2 + 16);
    *(_OWORD *)char v44 = *(_OWORD *)(a2 + 20);
    *(_DWORD *)&v44[16] = *(_DWORD *)(a2 + 36);
    unsigned int v21 = *(unsigned __int16 *)(a2 + 40);
    uint64_t v22 = (uint64_t *)(a2 + 48);
    unsigned int v23 = *(unsigned __int16 *)(a2 + 42);
    uint64_t v38 = *(void *)(a2 + 48);
    char v41 = *(unsigned char *)(a2 + 56);
    *(void *)a2 = *(void *)a3;
    uint64_t v24 = *v10;
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
    *(void *)(a2 + 8) = v24;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
    char v25 = *(unsigned char *)(a3 + 41);
    if (v25)
    {
      *(unsigned char *)(a2 + 40) = *(unsigned char *)(a3 + 40);
      char v25 = 1;
    }
    *(unsigned char *)(a2 + 41) = v25;
    if (*(unsigned char *)(a3 + 43))
    {
      *(unsigned char *)(a2 + 42) = *(unsigned char *)(a3 + 42);
      char v26 = 1;
    }
    else
    {
      char v26 = 0;
    }
    *(unsigned char *)(a2 + 43) = v26;
    uint64_t v27 = *v13;
    uint64_t result = *(unsigned __int8 *)(a3 + 56);
    *(unsigned char *)(a2 + 56) = result;
    *uint64_t v22 = v27;
    *(void *)a3 = v19;
    *uint64_t v10 = v47;
    *(_DWORD *)(a3 + 16) = v50;
    *(_OWORD *)(a3 + 24) = *(_OWORD *)&v44[4];
    if (v21 < 0x100)
    {
      *(unsigned char *)(a3 + 41) = 0;
      if (v23 >= 0x100) {
        goto LABEL_16;
      }
    }
    else
    {
      *(unsigned char *)(a3 + 40) = v21;
      *(unsigned char *)(a3 + 41) = 1;
      if (v23 >= 0x100)
      {
LABEL_16:
        *(unsigned char *)(a3 + 42) = v23;
        char v28 = 1;
        goto LABEL_17;
      }
    }
    char v28 = 0;
LABEL_17:
    *(unsigned char *)(a3 + 43) = v28;
    *uint64_t v13 = v38;
    *(unsigned char *)(a3 + 56) = v41;
    uint64_t v29 = *(void *)a1;
    if (*(void *)a2 >= *(void *)a1) {
      return result;
    }
    uint64_t v48 = *(void *)(a1 + 8);
    int v51 = *(_DWORD *)(a1 + 16);
    *(_OWORD *)unsigned int v45 = *(_OWORD *)(a1 + 20);
    *(_DWORD *)&v45[16] = *(_DWORD *)(a1 + 36);
    unsigned int v30 = *(unsigned __int16 *)(a1 + 40);
    unsigned int v31 = *(unsigned __int16 *)(a1 + 42);
    uint64_t v39 = *(void *)(a1 + 48);
    char v42 = *(unsigned char *)(a1 + 56);
    *(void *)a1 = *(void *)a2;
    uint64_t v32 = *v20;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(void *)(a1 + 8) = v32;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    char v33 = *(unsigned char *)(a2 + 41);
    if (v33)
    {
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      char v33 = 1;
    }
    *(unsigned char *)(a1 + 41) = v33;
    if (*(unsigned char *)(a2 + 43))
    {
      *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
      char v34 = 1;
    }
    else
    {
      char v34 = 0;
    }
    *(unsigned char *)(a1 + 43) = v34;
    uint64_t v35 = *v22;
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    *(void *)(a1 + 48) = v35;
    *(void *)a2 = v29;
    *uint64_t v20 = v48;
    *(_DWORD *)(a2 + 16) = v51;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)&v45[4];
    if (v30 < 0x100)
    {
      *(unsigned char *)(a2 + 41) = 0;
      if (v31 >= 0x100) {
        goto LABEL_24;
      }
    }
    else
    {
      *(unsigned char *)(a2 + 40) = v30;
      *(unsigned char *)(a2 + 41) = 1;
      if (v31 >= 0x100)
      {
LABEL_24:
        *(unsigned char *)(a2 + 42) = v31;
        char v36 = 1;
LABEL_25:
        *(unsigned char *)(a2 + 43) = v36;
        *uint64_t v22 = v39;
        *(unsigned char *)(a2 + 56) = v42;
        return result;
      }
    }
    char v36 = 0;
    goto LABEL_25;
  }
  return result;
}

uint64_t sub_BF87F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_BF8420(a1, a2, a3, a4);
  uint64_t v11 = *(void *)a4;
  if (*(void *)a5 < *(void *)a4)
  {
    unsigned int v12 = (uint64_t *)(a4 + 8);
    uint64_t v61 = *(void *)(a4 + 8);
    int v65 = *(_DWORD *)(a4 + 16);
    *(_OWORD *)char v57 = *(_OWORD *)(a4 + 20);
    *(_DWORD *)&v57[16] = *(_DWORD *)(a4 + 36);
    unsigned int v13 = *(unsigned __int16 *)(a4 + 40);
    unsigned int v14 = *(unsigned __int16 *)(a4 + 42);
    char v15 = (uint64_t *)(a4 + 48);
    uint64_t v49 = *(void *)(a4 + 48);
    char v53 = *(unsigned char *)(a4 + 56);
    *(void *)a4 = *(void *)a5;
    uint64_t v16 = *(void *)(a5 + 8);
    *(_DWORD *)(a4 + 16) = *(_DWORD *)(a5 + 16);
    *(void *)(a4 + 8) = v16;
    *(_OWORD *)(a4 + 24) = *(_OWORD *)(a5 + 24);
    char v17 = *(unsigned char *)(a5 + 41);
    if (v17)
    {
      *(unsigned char *)(a4 + 40) = *(unsigned char *)(a5 + 40);
      char v17 = 1;
    }
    *(unsigned char *)(a4 + 41) = v17;
    char v18 = *(unsigned char *)(a5 + 43);
    if (v18)
    {
      *(unsigned char *)(a4 + 42) = *(unsigned char *)(a5 + 42);
      char v18 = 1;
    }
    *(unsigned char *)(a4 + 43) = v18;
    uint64_t v19 = *(void *)(a5 + 48);
    uint64_t result = *(unsigned __int8 *)(a5 + 56);
    *(unsigned char *)(a4 + 56) = result;
    uint64_t *v15 = v19;
    *(void *)a5 = v11;
    *(void *)(a5 + 8) = v61;
    *(_DWORD *)(a5 + 16) = v65;
    *(_OWORD *)(a5 + 24) = *(_OWORD *)&v57[4];
    if (v13 < 0x100)
    {
      *(unsigned char *)(a5 + 41) = 0;
      if (v14 >= 0x100) {
        goto LABEL_8;
      }
    }
    else
    {
      *(unsigned char *)(a5 + 40) = v13;
      *(unsigned char *)(a5 + 41) = 1;
      if (v14 >= 0x100)
      {
LABEL_8:
        *(unsigned char *)(a5 + 42) = v14;
        char v20 = 1;
        goto LABEL_9;
      }
    }
    char v20 = 0;
LABEL_9:
    *(unsigned char *)(a5 + 43) = v20;
    *(void *)(a5 + 48) = v49;
    *(unsigned char *)(a5 + 56) = v53;
    uint64_t v21 = *(void *)a3;
    if (*(void *)a4 >= *(void *)a3) {
      return result;
    }
    uint64_t v22 = (uint64_t *)(a3 + 8);
    uint64_t v62 = *(void *)(a3 + 8);
    int v66 = *(_DWORD *)(a3 + 16);
    *(_OWORD *)char v58 = *(_OWORD *)(a3 + 20);
    *(_DWORD *)&v58[16] = *(_DWORD *)(a3 + 36);
    unsigned int v23 = *(unsigned __int16 *)(a3 + 40);
    uint64_t v24 = (uint64_t *)(a3 + 48);
    unsigned int v25 = *(unsigned __int16 *)(a3 + 42);
    uint64_t v50 = *(void *)(a3 + 48);
    char v54 = *(unsigned char *)(a3 + 56);
    *(void *)a3 = *(void *)a4;
    uint64_t v26 = *v12;
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
    *(void *)(a3 + 8) = v26;
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(a4 + 24);
    char v27 = *(unsigned char *)(a4 + 41);
    if (v27)
    {
      *(unsigned char *)(a3 + 40) = *(unsigned char *)(a4 + 40);
      char v27 = 1;
    }
    *(unsigned char *)(a3 + 41) = v27;
    if (*(unsigned char *)(a4 + 43))
    {
      *(unsigned char *)(a3 + 42) = *(unsigned char *)(a4 + 42);
      char v28 = 1;
    }
    else
    {
      char v28 = 0;
    }
    *(unsigned char *)(a3 + 43) = v28;
    uint64_t v29 = *v15;
    uint64_t result = *(unsigned __int8 *)(a4 + 56);
    *(unsigned char *)(a3 + 56) = result;
    *uint64_t v24 = v29;
    *(void *)a4 = v21;
    *unsigned int v12 = v62;
    *(_DWORD *)(a4 + 16) = v66;
    *(_OWORD *)(a4 + 24) = *(_OWORD *)&v58[4];
    if (v23 < 0x100)
    {
      *(unsigned char *)(a4 + 41) = 0;
      if (v25 >= 0x100) {
        goto LABEL_16;
      }
    }
    else
    {
      *(unsigned char *)(a4 + 40) = v23;
      *(unsigned char *)(a4 + 41) = 1;
      if (v25 >= 0x100)
      {
LABEL_16:
        *(unsigned char *)(a4 + 42) = v25;
        char v30 = 1;
        goto LABEL_17;
      }
    }
    char v30 = 0;
LABEL_17:
    *(unsigned char *)(a4 + 43) = v30;
    uint64_t *v15 = v50;
    *(unsigned char *)(a4 + 56) = v54;
    uint64_t v31 = *(void *)a2;
    if (*(void *)a3 >= *(void *)a2) {
      return result;
    }
    uint64_t v32 = (uint64_t *)(a2 + 8);
    uint64_t v63 = *(void *)(a2 + 8);
    int v67 = *(_DWORD *)(a2 + 16);
    *(_OWORD *)char v59 = *(_OWORD *)(a2 + 20);
    *(_DWORD *)&v59[16] = *(_DWORD *)(a2 + 36);
    unsigned int v33 = *(unsigned __int16 *)(a2 + 40);
    char v34 = (uint64_t *)(a2 + 48);
    unsigned int v35 = *(unsigned __int16 *)(a2 + 42);
    uint64_t v51 = *(void *)(a2 + 48);
    char v55 = *(unsigned char *)(a2 + 56);
    *(void *)a2 = *(void *)a3;
    uint64_t v36 = *v22;
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
    *(void *)(a2 + 8) = v36;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
    char v37 = *(unsigned char *)(a3 + 41);
    if (v37)
    {
      *(unsigned char *)(a2 + 40) = *(unsigned char *)(a3 + 40);
      char v37 = 1;
    }
    *(unsigned char *)(a2 + 41) = v37;
    if (*(unsigned char *)(a3 + 43))
    {
      *(unsigned char *)(a2 + 42) = *(unsigned char *)(a3 + 42);
      char v38 = 1;
    }
    else
    {
      char v38 = 0;
    }
    *(unsigned char *)(a2 + 43) = v38;
    uint64_t v39 = *v24;
    uint64_t result = *(unsigned __int8 *)(a3 + 56);
    *(unsigned char *)(a2 + 56) = result;
    *char v34 = v39;
    *(void *)a3 = v31;
    *uint64_t v22 = v63;
    *(_DWORD *)(a3 + 16) = v67;
    *(_OWORD *)(a3 + 24) = *(_OWORD *)&v59[4];
    if (v33 < 0x100)
    {
      *(unsigned char *)(a3 + 41) = 0;
      if (v35 >= 0x100) {
        goto LABEL_24;
      }
    }
    else
    {
      *(unsigned char *)(a3 + 40) = v33;
      *(unsigned char *)(a3 + 41) = 1;
      if (v35 >= 0x100)
      {
LABEL_24:
        *(unsigned char *)(a3 + 42) = v35;
        char v40 = 1;
        goto LABEL_25;
      }
    }
    char v40 = 0;
LABEL_25:
    *(unsigned char *)(a3 + 43) = v40;
    *uint64_t v24 = v51;
    *(unsigned char *)(a3 + 56) = v55;
    uint64_t v41 = *(void *)a1;
    if (*(void *)a2 >= *(void *)a1) {
      return result;
    }
    uint64_t v64 = *(void *)(a1 + 8);
    int v68 = *(_DWORD *)(a1 + 16);
    *(_OWORD *)char v60 = *(_OWORD *)(a1 + 20);
    *(_DWORD *)&v60[16] = *(_DWORD *)(a1 + 36);
    unsigned int v42 = *(unsigned __int16 *)(a1 + 40);
    unsigned int v43 = *(unsigned __int16 *)(a1 + 42);
    uint64_t v52 = *(void *)(a1 + 48);
    char v56 = *(unsigned char *)(a1 + 56);
    *(void *)a1 = *(void *)a2;
    uint64_t v44 = *v32;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(void *)(a1 + 8) = v44;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    char v45 = *(unsigned char *)(a2 + 41);
    if (v45)
    {
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      char v45 = 1;
    }
    *(unsigned char *)(a1 + 41) = v45;
    if (*(unsigned char *)(a2 + 43))
    {
      *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
      char v46 = 1;
    }
    else
    {
      char v46 = 0;
    }
    *(unsigned char *)(a1 + 43) = v46;
    uint64_t v47 = *v34;
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    *(void *)(a1 + 48) = v47;
    *(void *)a2 = v41;
    *uint64_t v32 = v64;
    *(_DWORD *)(a2 + 16) = v68;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)&v60[4];
    if (v42 < 0x100)
    {
      *(unsigned char *)(a2 + 41) = 0;
      if (v43 >= 0x100) {
        goto LABEL_32;
      }
    }
    else
    {
      *(unsigned char *)(a2 + 40) = v42;
      *(unsigned char *)(a2 + 41) = 1;
      if (v43 >= 0x100)
      {
LABEL_32:
        *(unsigned char *)(a2 + 42) = v43;
        char v48 = 1;
LABEL_33:
        *(unsigned char *)(a2 + 43) = v48;
        *char v34 = v52;
        *(unsigned char *)(a2 + 56) = v56;
        return result;
      }
    }
    char v48 = 0;
    goto LABEL_33;
  }
  return result;
}

uint64_t sub_BF8CFC(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  if (a3 < 2) {
    return result;
  }
  int64_t v4 = (unint64_t)(a3 - 2) >> 1;
  if (v4 < ((uint64_t)a4 - result) >> 6) {
    return result;
  }
  uint64_t v5 = ((uint64_t)a4 - result) >> 5;
  uint64_t v6 = v5 + 1;
  uint64_t v7 = (void *)(result + ((v5 + 1) << 6));
  uint64_t v8 = v5 + 2;
  if (v8 >= a3)
  {
    uint64_t v10 = *v7;
    uint64_t v11 = *a4;
    if (*v7 < *a4) {
      return result;
    }
LABEL_12:
    uint64_t v26 = a4[1];
    int v27 = *((_DWORD *)a4 + 4);
    *(_OWORD *)unsigned int v25 = *(_OWORD *)((char *)a4 + 20);
    *(_DWORD *)&v25[16] = *((_DWORD *)a4 + 9);
    unsigned int v12 = *((unsigned __int16 *)a4 + 20);
    unsigned int v13 = *((unsigned __int16 *)a4 + 21);
    uint64_t v23 = a4[6];
    char v24 = *((unsigned char *)a4 + 56);
    while (1)
    {
      char v15 = v7;
      *a4 = v10;
      char v17 = v7 + 1;
      uint64_t v16 = v7[1];
      *((_DWORD *)a4 + 4) = *((_DWORD *)v17 + 2);
      a4[1] = v16;
      *(_OWORD *)(a4 + 3) = *((_OWORD *)v17 + 1);
      char v18 = *((unsigned char *)v17 + 33);
      if (v18)
      {
        *((unsigned char *)a4 + 40) = *((unsigned char *)v15 + 40);
        char v18 = 1;
      }
      *((unsigned char *)a4 + 41) = v18;
      char v19 = *((unsigned char *)v15 + 43);
      if (v19)
      {
        *((unsigned char *)a4 + 42) = *((unsigned char *)v15 + 42);
        char v19 = 1;
      }
      *((unsigned char *)a4 + 43) = v19;
      uint64_t v20 = v15[6];
      *((unsigned char *)a4 + 56) = *((unsigned char *)v15 + 56);
      a4[6] = v20;
      if (v4 < v6) {
        break;
      }
      uint64_t v21 = (2 * v6) | 1;
      uint64_t v7 = (void *)(result + (v21 << 6));
      uint64_t v6 = 2 * v6 + 2;
      if (v6 < a3)
      {
        uint64_t v10 = *v7;
        uint64_t v14 = v7[8];
        if (*v7 <= v14) {
          uint64_t v10 = v7[8];
        }
        if (*v7 >= v14) {
          uint64_t v6 = v21;
        }
        else {
          v7 += 8;
        }
        a4 = v15;
        if (v10 < v11) {
          break;
        }
      }
      else
      {
        uint64_t v10 = *v7;
        uint64_t v6 = v21;
        a4 = v15;
        if (*v7 < v11) {
          break;
        }
      }
    }
    void *v15 = v11;
    *char v17 = v26;
    *((_DWORD *)v17 + 2) = v27;
    *((_OWORD *)v17 + 1) = *(_OWORD *)&v25[4];
    if (v12 < 0x100)
    {
      *((unsigned char *)v15 + 41) = 0;
      if (v13 >= 0x100) {
        goto LABEL_28;
      }
    }
    else
    {
      *((unsigned char *)v15 + 40) = v12;
      *((unsigned char *)v15 + 41) = 1;
      if (v13 >= 0x100)
      {
LABEL_28:
        *((unsigned char *)v15 + 42) = v13;
        char v22 = 1;
LABEL_29:
        *((unsigned char *)v15 + 43) = v22;
        v15[6] = v23;
        *((unsigned char *)v15 + 56) = v24;
        return result;
      }
    }
    char v22 = 0;
    goto LABEL_29;
  }
  uint64_t v9 = v7[8];
  if (*v7 <= v9) {
    uint64_t v10 = v7[8];
  }
  else {
    uint64_t v10 = *v7;
  }
  if (*v7 < v9)
  {
    v7 += 8;
    uint64_t v6 = v8;
  }
  uint64_t v11 = *a4;
  if (v10 >= *a4) {
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_BF8EF0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 < 2) {
    return result;
  }
  uint64_t v4 = 0;
  uint64_t v5 = *(void *)result;
  uint64_t v43 = *(void *)(result + 8);
  int v44 = *(_DWORD *)(result + 16);
  *(_OWORD *)unsigned int v42 = *(_OWORD *)(result + 20);
  *(_DWORD *)&v42[16] = *(_DWORD *)(result + 36);
  unsigned int v6 = *(unsigned __int16 *)(result + 40);
  uint64_t v40 = *(void *)(result + 48);
  char v41 = *(unsigned char *)(result + 56);
  uint64_t v7 = result;
  unsigned int v8 = *(unsigned __int16 *)(result + 42);
  do
  {
    uint64_t v9 = v7 + (v4 << 6) + 64;
    uint64_t v10 = (2 * v4) | 1;
    uint64_t v4 = 2 * v4 + 2;
    if (v4 >= a4)
    {
      uint64_t v11 = *(void *)v9;
      uint64_t v4 = v10;
    }
    else
    {
      uint64_t v11 = *(void *)v9;
      uint64_t v12 = *(void *)(v9 + 64);
      if (*(void *)v9 <= v12) {
        uint64_t v11 = *(void *)(v9 + 64);
      }
      if (*(void *)v9 >= v12) {
        uint64_t v4 = v10;
      }
      else {
        v9 += 64;
      }
    }
    *(void *)uint64_t v7 = v11;
    uint64_t v14 = (uint64_t *)(v9 + 8);
    uint64_t v13 = *(void *)(v9 + 8);
    *(_DWORD *)(v7 + 16) = *(_DWORD *)(v9 + 16);
    *(void *)(v7 + 8) = v13;
    *(_OWORD *)(v7 + 24) = *(_OWORD *)(v9 + 24);
    char v15 = *(unsigned char *)(v9 + 41);
    if (v15)
    {
      *(unsigned char *)(v7 + 40) = *(unsigned char *)(v9 + 40);
      char v15 = 1;
    }
    *(unsigned char *)(v7 + 41) = v15;
    char v16 = *(unsigned char *)(v9 + 43);
    if (v16)
    {
      *(unsigned char *)(v7 + 42) = *(unsigned char *)(v9 + 42);
      char v16 = 1;
    }
    *(unsigned char *)(v7 + 43) = v16;
    char v18 = (uint64_t *)(v9 + 48);
    uint64_t v17 = *(void *)(v9 + 48);
    *(unsigned char *)(v7 + 56) = *(unsigned char *)(v9 + 56);
    *(void *)(v7 + 48) = v17;
    uint64_t v7 = v9;
  }
  while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
  char v19 = (_OWORD *)(v9 + 24);
  if (v9 == a2 - 64)
  {
    *(void *)uint64_t v9 = v5;
    *(_DWORD *)(v9 + 16) = v44;
    uint64_t *v14 = v43;
    _OWORD *v19 = *(_OWORD *)&v42[4];
    if (v6 < 0x100)
    {
      *(unsigned char *)(v9 + 41) = 0;
      if (v8 >= 0x100) {
        goto LABEL_38;
      }
    }
    else
    {
      *(unsigned char *)(v9 + 40) = v6;
      *(unsigned char *)(v9 + 41) = 1;
      if (v8 >= 0x100)
      {
LABEL_38:
        *(unsigned char *)(v9 + 42) = v8;
        char v39 = 1;
LABEL_39:
        *(unsigned char *)(v9 + 43) = v39;
        uint64_t *v18 = v40;
        *(unsigned char *)(v9 + 56) = v41;
        return result;
      }
    }
    char v39 = 0;
    goto LABEL_39;
  }
  *(void *)uint64_t v9 = *(void *)(a2 - 64);
  uint64_t v20 = *(void *)(a2 - 56);
  *(_DWORD *)(v9 + 16) = *(_DWORD *)(a2 - 48);
  uint64_t *v14 = v20;
  _OWORD *v19 = *(_OWORD *)(a2 - 40);
  char v21 = *(unsigned char *)(a2 - 23);
  if (v21)
  {
    *(unsigned char *)(v9 + 40) = *(unsigned char *)(a2 - 24);
    char v21 = 1;
  }
  *(unsigned char *)(v9 + 41) = v21;
  char v22 = *(unsigned char *)(a2 - 21);
  if (v22)
  {
    *(unsigned char *)(v9 + 42) = *(unsigned char *)(a2 - 22);
    char v22 = 1;
  }
  *(unsigned char *)(v9 + 43) = v22;
  uint64_t v23 = *(void *)(a2 - 16);
  *(unsigned char *)(v9 + 56) = *(unsigned char *)(a2 - 8);
  uint64_t *v18 = v23;
  *(void *)(a2 - 64) = v5;
  *(void *)(a2 - 56) = v43;
  *(_DWORD *)(a2 - 48) = v44;
  *(_OWORD *)(a2 - 40) = *(_OWORD *)&v42[4];
  if (v6 < 0x100)
  {
    uint64_t v24 = v9 + 64;
    *(unsigned char *)(a2 - 23) = 0;
    if (v8 >= 0x100) {
      goto LABEL_22;
    }
LABEL_42:
    char v25 = 0;
    goto LABEL_23;
  }
  *(unsigned char *)(a2 - 24) = v6;
  uint64_t v24 = v9 + 64;
  *(unsigned char *)(a2 - 23) = 1;
  if (v8 < 0x100) {
    goto LABEL_42;
  }
LABEL_22:
  *(unsigned char *)(a2 - 22) = v8;
  char v25 = 1;
LABEL_23:
  *(unsigned char *)(a2 - 21) = v25;
  *(void *)(a2 - 16) = v40;
  *(unsigned char *)(a2 - 8) = v41;
  if (v24 - result >= 65)
  {
    unint64_t v26 = (((unint64_t)(v24 - result) >> 6) - 2) >> 1;
    uint64_t v27 = result + (v26 << 6);
    uint64_t v28 = *(void *)v27;
    uint64_t v29 = *(void *)v9;
    if (*(void *)v27 < *(void *)v9)
    {
      int v49 = *(_DWORD *)(v9 + 16);
      uint64_t v48 = *v14;
      *(_DWORD *)&v47[16] = *(_DWORD *)(v9 + 36);
      *(_OWORD *)uint64_t v47 = *(_OWORD *)(v9 + 20);
      unsigned int v30 = *(unsigned __int16 *)(v9 + 40);
      unsigned int v31 = *(unsigned __int16 *)(v9 + 42);
      char v46 = *(unsigned char *)(v9 + 56);
      uint64_t v45 = *v18;
      do
      {
        uint64_t v32 = v27;
        *(void *)uint64_t v9 = v28;
        uint64_t v33 = v27 + 8;
        uint64_t v34 = *(void *)(v27 + 8);
        *(_DWORD *)(v9 + 16) = *(_DWORD *)(v27 + 16);
        *(void *)(v9 + 8) = v34;
        *(_OWORD *)(v9 + 24) = *(_OWORD *)(v27 + 24);
        char v35 = *(unsigned char *)(v27 + 41);
        if (v35)
        {
          *(unsigned char *)(v9 + 40) = *(unsigned char *)(v27 + 40);
          char v35 = 1;
        }
        *(unsigned char *)(v9 + 41) = v35;
        char v36 = *(unsigned char *)(v27 + 43);
        if (v36)
        {
          *(unsigned char *)(v9 + 42) = *(unsigned char *)(v27 + 42);
          char v36 = 1;
        }
        *(unsigned char *)(v9 + 43) = v36;
        uint64_t v37 = *(void *)(v27 + 48);
        *(unsigned char *)(v9 + 56) = *(unsigned char *)(v32 + 56);
        *(void *)(v9 + 48) = v37;
        if (!v26) {
          break;
        }
        unint64_t v26 = (v26 - 1) >> 1;
        uint64_t v27 = result + (v26 << 6);
        uint64_t v28 = *(void *)v27;
        uint64_t v9 = v32;
      }
      while (*(void *)v27 < v29);
      *(void *)uint64_t v32 = v29;
      *(void *)uint64_t v33 = v48;
      *(_DWORD *)(v33 + 8) = v49;
      *(_OWORD *)(v33 + 16) = *(_OWORD *)&v47[4];
      if (v30 < 0x100)
      {
        *(unsigned char *)(v32 + 41) = 0;
        if (v31 >= 0x100) {
          goto LABEL_34;
        }
      }
      else
      {
        *(unsigned char *)(v32 + 40) = v30;
        *(unsigned char *)(v32 + 41) = 1;
        if (v31 >= 0x100)
        {
LABEL_34:
          *(unsigned char *)(v32 + 42) = v31;
          char v38 = 1;
LABEL_35:
          *(unsigned char *)(v32 + 43) = v38;
          *(void *)(v32 + 48) = v45;
          *(unsigned char *)(v32 + 56) = v46;
          return result;
        }
      }
      char v38 = 0;
      goto LABEL_35;
    }
  }
  return result;
}

void sub_BF92CC(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(char **)a1;
  if (a2 <= (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5) {
    return;
  }
  if (a2 >> 59) {
    sub_2E00();
  }
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = 32 * a2;
  unsigned int v6 = (char *)operator new(32 * a2);
  uint64_t v7 = &v6[v5];
  unsigned int v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_13;
  }
  uint64_t v9 = 0;
  do
  {
    uint64_t v10 = &v8[v9];
    uint64_t v11 = &v4[v9];
    *((_OWORD *)v10 - 2) = *(_OWORD *)&v4[v9 - 32];
    uint64_t v12 = *(void *)&v4[v9 - 8];
    *((void *)v10 - 2) = *(void *)&v4[v9 - 16];
    *((void *)v11 - 4) = 0;
    *((void *)v11 - 3) = 0;
    *((void *)v11 - 2) = 0;
    *((void *)v10 - 1) = v12;
    v9 -= 32;
  }
  while (&v4[v9] != v2);
  uint64_t v13 = *(char **)a1;
  uint64_t v2 = *(char **)(a1 + 8);
  *(void *)a1 = &v8[v9];
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  if (v2 != v13)
  {
    uint64_t v14 = v2;
    do
    {
      char v16 = (void *)*((void *)v14 - 4);
      v14 -= 32;
      char v15 = v16;
      if (v16)
      {
        *((void *)v2 - 3) = v15;
        operator delete(v15);
      }
      uint64_t v2 = v14;
    }
    while (v14 != v13);
    uint64_t v2 = v13;
  }
  if (v2)
  {
LABEL_13:
    operator delete(v2);
  }
}

uint64_t sub_BF93E8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = v2 - 32;
        uint64_t v4 = *(void **)(v2 - 32);
        *(void *)(a1 + 16) = v2 - 32;
        if (!v4) {
          break;
        }
        *(void *)(v2 - 24) = v4;
        operator delete(v4);
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      v2 -= 32;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_BF9458(char **a1, uint64_t a2, __n128 *a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (void)*a1;
  uint64_t v8 = v7 >> 5;
  uint64_t v9 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFE0];
  unint64_t v10 = (unint64_t)a1[2];
  if (v6 >= v10)
  {
    unint64_t v22 = ((uint64_t)(v6 - (void)v5) >> 5) + 1;
    if (v22 >> 59) {
      sub_2E00();
    }
    uint64_t v23 = v10 - (void)v5;
    if (v23 >> 4 > v22) {
      unint64_t v22 = v23 >> 4;
    }
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v24 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v22;
    }
    int v44 = a1 + 2;
    if (v24)
    {
      if (v24 >> 59) {
        sub_188D718();
      }
      char v25 = (char *)operator new(32 * v24);
    }
    else
    {
      char v25 = 0;
    }
    uint64_t v40 = v25;
    char v41 = &v25[32 * v8];
    unsigned int v42 = v41;
    uint64_t v43 = &v25[32 * v24];
    sub_BF97CC((uint64_t)&v40, a3);
    uint64_t v27 = v41;
    uint64_t v28 = *a1;
    uint64_t v29 = v41;
    if (*a1 != v9)
    {
      uint64_t v30 = 0;
      do
      {
        unsigned int v31 = &v27[v30];
        uint64_t v32 = &v9[v30];
        *((void *)v31 - 4) = 0;
        *((void *)v31 - 3) = 0;
        *((void *)v31 - 2) = 0;
        *((_OWORD *)v31 - 2) = *(_OWORD *)&v9[v30 - 32];
        *((void *)v31 - 2) = *(void *)&v9[v30 - 16];
        *((void *)v32 - 4) = 0;
        *((void *)v32 - 3) = 0;
        *((void *)v32 - 2) = 0;
        *((void *)v31 - 1) = *(void *)&v9[v30 - 8];
        v30 -= 32;
      }
      while (&v9[v30] != v28);
      uint64_t v29 = &v27[v30];
    }
    char v41 = v29;
    uint64_t v33 = a1[1];
    uint64_t v34 = v42;
    if (v33 != v9)
    {
      do
      {
        *(void *)uint64_t v34 = 0;
        *((void *)v34 + 1) = 0;
        *((void *)v34 + 2) = 0;
        *(_OWORD *)uint64_t v34 = *(_OWORD *)v9;
        *((void *)v34 + 2) = *((void *)v9 + 2);
        *(void *)uint64_t v9 = 0;
        *((void *)v9 + 1) = 0;
        *((void *)v9 + 2) = 0;
        *((void *)v34 + 3) = *((void *)v9 + 3);
        v34 += 32;
        v9 += 32;
      }
      while (v9 != v33);
      uint64_t v29 = v41;
      uint64_t v9 = a1[1];
    }
    char v35 = *a1;
    *a1 = v29;
    a1[1] = v34;
    char v36 = a1[2];
    a1[2] = v43;
    unsigned int v42 = v9;
    uint64_t v43 = v36;
    uint64_t v40 = v35;
    char v41 = v35;
    if (v9 == v35)
    {
      if (!v9) {
        return v27;
      }
    }
    else
    {
      do
      {
        while (1)
        {
          char v39 = v9 - 32;
          char v38 = (void *)*((void *)v9 - 4);
          unsigned int v42 = v9 - 32;
          if (!v38) {
            break;
          }
          *((void *)v9 - 3) = v38;
          operator delete(v38);
          uint64_t v9 = v42;
          if (v42 == v35) {
            goto LABEL_39;
          }
        }
        v9 -= 32;
      }
      while (v39 != v35);
LABEL_39:
      uint64_t v9 = v40;
      if (!v40) {
        return v27;
      }
    }
    operator delete(v9);
    return v27;
  }
  if (v9 == (char *)v6)
  {
    *(void *)uint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = 0;
    *(__n128 *)uint64_t v9 = *a3;
    *((void *)v9 + 2) = a3[1].n128_u64[0];
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a3->n128_u64[0] = 0;
    *(void *)&v5[32 * v8 + 24] = a3[1].n128_u64[1];
    a1[1] = v9 + 32;
  }
  else
  {
    uint64_t v11 = v9 + 32;
    unint64_t v12 = v6 - 32;
    uint64_t v13 = a1[1];
    if (v6 >= 0x20)
    {
      do
      {
        *(void *)uint64_t v13 = 0;
        *((void *)v13 + 1) = 0;
        *((void *)v13 + 2) = 0;
        *(_OWORD *)uint64_t v13 = *(_OWORD *)v12;
        *((void *)v13 + 2) = *(void *)(v12 + 16);
        *(void *)unint64_t v12 = 0;
        *(void *)(v12 + 8) = 0;
        *(void *)(v12 + 16) = 0;
        *((void *)v13 + 3) = *(void *)(v12 + 24);
        v13 += 32;
        v12 += 32;
      }
      while (v12 < v6);
    }
    a1[1] = v13;
    if ((void *)v6 != v11)
    {
      unint64_t v14 = 0;
      uint64_t v15 = 32 * ((uint64_t)(v6 - (void)v11) >> 5);
      uint64_t v16 = -v15;
      uint64_t v17 = &v5[32 * v8 + v15];
      do
      {
        unint64_t v19 = v6 + v14;
        char v21 = (void **)(v6 + v14 - 32);
        uint64_t v20 = *v21;
        if (*v21)
        {
          *(void *)(v19 - 24) = v20;
          operator delete(v20);
          *char v21 = 0;
          *(void *)(v6 + v14 - 24) = 0;
          *(void *)(v6 + v14 - 16) = 0;
        }
        uint64_t v18 = (uint64_t)&v17[v14 - 32];
        *(_OWORD *)char v21 = *(_OWORD *)v18;
        *(void *)(v19 - 16) = *(void *)&v17[v14 - 16];
        *(void *)uint64_t v18 = 0;
        *(void *)(v18 + 8) = 0;
        *(void *)(v18 + 16) = 0;
        *(void *)(v19 - 8) = *(void *)&v17[v14 - 8];
        v14 -= 32;
      }
      while (v16 != v14);
    }
    unint64_t v26 = *(void **)v9;
    if (*(void *)v9)
    {
      *((void *)v9 + 1) = v26;
      operator delete(v26);
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 2) = 0;
    }
    *(__n128 *)uint64_t v9 = *a3;
    *((void *)v9 + 2) = a3[1].n128_u64[0];
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    *(void *)&v5[32 * v8 + 24] = a3[1].n128_u64[1];
  }
  return v9;
}

void sub_BF97B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_BF93E8((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_BF97CC(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(char **)(a1 + 16);
  if (v4 == *(char **)(a1 + 24))
  {
    uint64_t v5 = *(char **)a1;
    unint64_t v6 = *(char **)(a1 + 8);
    if ((unint64_t)v6 <= *(void *)a1)
    {
      unint64_t v15 = (v4 - v5) >> 4;
      if (v4 == v5) {
        unint64_t v15 = 1;
      }
      if (v15 >> 59) {
        sub_188D718();
      }
      unint64_t v16 = v15 >> 2;
      uint64_t v17 = 32 * v15;
      uint64_t v18 = (char *)operator new(32 * v15);
      unint64_t v19 = &v18[32 * v16];
      uint64_t v20 = &v18[v17];
      if (v4 == v6)
      {
        *(void *)a1 = v18;
        *(void *)(a1 + 8) = v19;
        *(void *)(a1 + 16) = v19;
        *(void *)(a1 + 24) = v20;
      }
      else
      {
        char v21 = &v19[v4 - v6];
        uint64_t v22 = 32 * v16;
        do
        {
          uint64_t v23 = &v18[v22];
          *(_OWORD *)uint64_t v23 = *(_OWORD *)v6;
          uint64_t v24 = *((void *)v6 + 3);
          *((void *)v23 + 2) = *((void *)v6 + 2);
          *(void *)unint64_t v6 = 0;
          *((void *)v6 + 1) = 0;
          *((void *)v6 + 2) = 0;
          *((void *)v23 + 3) = v24;
          v22 += 32;
          v6 += 32;
        }
        while (v23 + 32 != v21);
        uint64_t v5 = *(char **)a1;
        uint64_t v25 = *(void *)(a1 + 8);
        uint64_t v26 = *(void *)(a1 + 16);
        *(void *)a1 = v18;
        *(void *)(a1 + 8) = v19;
        *(void *)(a1 + 16) = v21;
        *(void *)(a1 + 24) = v20;
        if (v26 != v25)
        {
          uint64_t v27 = v26;
          do
          {
            uint64_t v29 = *(void **)(v27 - 32);
            v27 -= 32;
            uint64_t v28 = v29;
            if (v29)
            {
              *(void *)(v26 - 24) = v28;
              operator delete(v28);
            }
            uint64_t v26 = v27;
          }
          while (v27 != v25);
        }
      }
      if (v5) {
        operator delete(v5);
      }
      uint64_t v4 = *(char **)(a1 + 16);
    }
    else
    {
      uint64_t v7 = (uint64_t)&v6[-*(void *)a1] >> 5;
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      if (v6 == v4)
      {
        uint64_t v30 = &v6[-32 * v9];
      }
      else
      {
        uint64_t v11 = -32 * v9;
        do
        {
          uint64_t v13 = &v6[v11];
          unint64_t v14 = *(void **)&v6[32 * v10];
          if (v14)
          {
            *((void *)v13 + 1) = v14;
            operator delete(v14);
            *(void *)uint64_t v13 = 0;
            *((void *)v13 + 1) = 0;
            *((void *)v13 + 2) = 0;
          }
          *(_OWORD *)uint64_t v13 = *(_OWORD *)v6;
          *(void *)unint64_t v6 = 0;
          *((void *)v6 + 1) = 0;
          uint64_t v12 = *((void *)v6 + 3);
          *((void *)v13 + 2) = *((void *)v6 + 2);
          *((void *)v13 + 3) = v12;
          *((void *)v6 + 2) = 0;
          v6 += 32;
        }
        while (v6 != v4);
        uint64_t v4 = *(char **)(a1 + 8);
        uint64_t v30 = &v6[32 * v10];
      }
      *(void *)(a1 + 8) = &v4[32 * v10];
      *(void *)(a1 + 16) = v30;
      uint64_t v4 = v30;
    }
  }
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  __n128 result = *a2;
  *(__n128 *)uint64_t v4 = *a2;
  unint64_t v32 = a2[1].n128_u64[1];
  *((void *)v4 + 2) = a2[1].n128_u64[0];
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  *((void *)v4 + 3) = v32;
  *(void *)(a1 + 16) += 32;
  return result;
}

void sub_BF99A8()
{
  unk_25DFF27 = 16641;
  word_25DFF10 = 65;
  byte_25DFF3F = 1;
  byte_25DFF29 = 0;
}

void sub_BF99D0(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a3 + 8);
  for (uint64_t i = *(void *)(a3 + 16); v5 != i; v5 += 296)
    sub_BF9D78(a1, a2, v5, a4, a5);
}

void sub_BF9A3C(uint64_t a1, unsigned char *a2)
{
  sub_BEDC48(&v10, (uint64_t)a2);
  while (v11 != -1)
  {
    uint64_t v4 = v12;
    if (*a2) {
      uint64_t v5 = v12;
    }
    else {
      uint64_t v5 = 0x1FFFFFFFELL;
    }
    if (*a2) {
      uint64_t v4 = 0x1FFFFFFFDLL;
    }
    *(void *)&long long v15 = v5;
    *((void *)&v15 + 1) = v4;
    sub_BEDD70(a1, (uint64_t *)&v15, &v15, (uint64_t *)&__p);
    sub_BED920(&v10);
  }
  unint64_t v6 = __p;
  if (__p)
  {
    uint64_t v7 = (uint64_t)v14;
    uint64_t v8 = __p;
    if (v14 != __p)
    {
      do
      {
        int v9 = *(_DWORD *)(v7 - 8);
        v7 -= 1432;
        if (v9 == 2)
        {
          uint64_t v7 = sub_9F6418(v7);
        }
        else if (!v9)
        {
          uint64_t v7 = sub_9F636C(v7);
        }
      }
      while ((void *)v7 != v6);
      uint64_t v8 = __p;
    }
    unint64_t v14 = v6;
    operator delete(v8);
  }
}

void sub_BF9B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void sub_BF9B74(uint64_t a1, unsigned char *a2)
{
  sub_BEDC48(&v19, (uint64_t)a2);
  if (v20 == -1) {
    goto LABEL_25;
  }
  do
  {
    uint64_t v4 = v21;
    uint64_t v5 = (unsigned int *)__p;
    if (*a2) {
      uint64_t v6 = v21;
    }
    else {
      uint64_t v6 = 0x1FFFFFFFELL;
    }
    if (*a2) {
      uint64_t v4 = 0x1FFFFFFFDLL;
    }
    *(void *)&long long v26 = v6;
    *((void *)&v26 + 1) = v4;
    if (__p == v23)
    {
      int v7 = 0;
      uint64_t v9 = 0;
      unsigned int v8 = 0;
      goto LABEL_24;
    }
    int v7 = 0;
    unsigned int v8 = 0;
    LODWORD(v9) = 0;
    while (1)
    {
      unsigned int v13 = v5[356];
      if (v13) {
        break;
      }
      unsigned int v10 = v5[96];
      if (v10 == 0x7FFFFFFF) {
        goto LABEL_23;
      }
      LODWORD(v11) = 0;
      int v12 = 0;
LABEL_11:
      v8 += v11;
      uint64_t v9 = (v9 + v12);
      v7 += v10;
      v5 += 358;
      if (v5 == v23) {
        goto LABEL_24;
      }
    }
    if (v13 != 2)
    {
      if (v13 != 1) {
        goto LABEL_23;
      }
      unint64_t v11 = (unint64_t)v5[2] << 32;
      if (v11 == 0x7FFFFFFF00000000) {
        goto LABEL_23;
      }
LABEL_21:
      unsigned int v10 = 0;
      int v12 = HIDWORD(v11);
      goto LABEL_11;
    }
    unint64_t v11 = v5[354];
    if (v11 != 0x7FFFFFFF && (v11 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000) {
      goto LABEL_21;
    }
LABEL_23:
    int v7 = 0x7FFFFFFF;
    uint64_t v9 = 0x7FFFFFFFLL;
    unsigned int v8 = 0x7FFFFFFF;
LABEL_24:
    unint64_t v24 = v8 | (unint64_t)(v9 << 32);
    int v25 = v7;
    sub_BFCA88(a1, (uint64_t *)&v26, &v26, (uint64_t)&v24);
    sub_BED920(&v19);
  }
  while (v20 != -1);
LABEL_25:
  long long v15 = __p;
  if (__p)
  {
    uint64_t v16 = (uint64_t)v23;
    uint64_t v17 = __p;
    if (v23 != __p)
    {
      do
      {
        int v18 = *(_DWORD *)(v16 - 8);
        v16 -= 1432;
        if (v18 == 2)
        {
          uint64_t v16 = sub_9F6418(v16);
        }
        else if (!v18)
        {
          uint64_t v16 = sub_9F636C(v16);
        }
      }
      while ((void *)v16 != v15);
      uint64_t v17 = __p;
    }
    uint64_t v23 = v15;
    operator delete(v17);
  }
}

void sub_BF9D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void sub_BF9D78(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(uint64_t **)(a3 + 200);
  int v73 = *(uint64_t **)(a3 + 208);
  if (v5 != v73)
  {
    while (*((unsigned char *)v5 + 24) != 1)
    {
LABEL_3:
      v5 += 9;
      if (v5 == v73) {
        return;
      }
    }
    uint64_t v9 = *v5;
    uint64_t v10 = v5[1];
    while (1)
    {
      if (v9 == v10) {
        goto LABEL_3;
      }
      unint64_t v12 = *(void *)(v9 + 12);
      unint64_t v13 = *(void *)(v9 + 20);
      *(void *)&long long v76 = v12;
      *((void *)&v76 + 1) = v13;
      int8x8_t v14 = (int8x8_t)a2[1];
      unint64_t v15 = HIDWORD(v12);
      unint64_t v16 = HIDWORD(v13);
      if (v14)
      {
        unint64_t v17 = 0xC4CEB9FE1A85EC53
            * ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) >> 33));
        unint64_t v18 = 0xC4CEB9FE1A85EC53
            * ((0xFF51AFD7ED558CCDLL * (v13 ^ (v13 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v13 ^ (v13 >> 33))) >> 33));
        unint64_t v19 = ((v18 ^ (v18 >> 33))
             + ((((v17 ^ (v17 >> 33)) + 0x388152A534) ^ 0xDEADBEEF) << 6)
             + ((((v17 ^ (v17 >> 33)) + 0x388152A534) ^ 0xDEADBEEF) >> 2)
             + 2654435769u) ^ ((v17 ^ (v17 >> 33)) + 0x388152A534) ^ 0xDEADBEEF;
        uint8x8_t v20 = (uint8x8_t)vcnt_s8(v14);
        v20.i16[0] = vaddlv_u8(v20);
        if (v20.u32[0] > 1uLL)
        {
          unint64_t v21 = v19;
          if (v19 >= *(void *)&v14) {
            unint64_t v21 = v19 % *(void *)&v14;
          }
        }
        else
        {
          unint64_t v21 = v19 & (*(void *)&v14 - 1);
        }
        uint64_t v22 = *(uint64_t ***)(*a2 + 8 * v21);
        if (v22)
        {
          uint64_t v23 = *v22;
          if (v23)
          {
            if (v20.u32[0] < 2uLL)
            {
              uint64_t v24 = *(void *)&v14 - 1;
              while (1)
              {
                uint64_t v27 = v23[1];
                if (v19 == v27)
                {
                  BOOL v28 = *((_DWORD *)v23 + 5) == HIDWORD(v12) && *((_DWORD *)v23 + 4) == v12;
                  if (v28 && v23[3] == v13) {
                    goto LABEL_8;
                  }
                }
                else if ((v27 & v24) != v21)
                {
                  goto LABEL_41;
                }
                uint64_t v23 = (uint64_t *)*v23;
                if (!v23) {
                  goto LABEL_41;
                }
              }
            }
            do
            {
              unint64_t v25 = v23[1];
              if (v19 == v25)
              {
                BOOL v26 = *((_DWORD *)v23 + 5) == HIDWORD(v12) && *((_DWORD *)v23 + 4) == v12;
                if (v26 && v23[3] == v13) {
                  goto LABEL_8;
                }
              }
              else
              {
                if (v25 >= *(void *)&v14) {
                  v25 %= *(void *)&v14;
                }
                if (v25 != v21) {
                  break;
                }
              }
              uint64_t v23 = (uint64_t *)*v23;
            }
            while (v23);
          }
        }
      }
LABEL_41:
      int v29 = *(_DWORD *)(v9 + 12);
      if (v15 != 1 || v29 != -2) {
        goto LABEL_45;
      }
      if (v13 == 0x1FFFFFFFDLL)
      {
        int v29 = -2;
        LODWORD(v13) = -3;
        LODWORD(v16) = 1;
        LODWORD(v15) = 1;
LABEL_45:
        if (v29 == -2 && v15 == 1 || v16 != 1 || v13 != -3) {
          goto LABEL_119;
        }
        goto LABEL_56;
      }
      sub_BFB9B4(a1, a4, v13, __p);
      sub_BFCE70((uint64_t)a2, (uint64_t *)&v76, &v76, (long long *)__p);
      uint64_t v45 = (char *)__p[0];
      if (!__p[0]) {
        goto LABEL_109;
      }
      char v46 = __p[0];
      if (__p[1] == __p[0]) {
        goto LABEL_108;
      }
      uint64_t v47 = (char *)__p[1] - 1360;
      do
      {
        int v49 = *((_DWORD *)v47 + 338);
        if (v49 == 2)
        {
          if (v47[1336])
          {
            sub_3AFFFC((uint64_t)(v47 + 280));
            v47[1336] = 0;
          }
        }
        else
        {
          if (v49) {
            goto LABEL_83;
          }
          uint64_t v50 = (void *)*((void *)v47 + 36);
          if (v50)
          {
            *((void *)v47 + 37) = v50;
            operator delete(v50);
          }
        }
        if (*((_DWORD *)v47 + 66) == 1)
        {
          uint64_t v51 = (void *)*((void *)v47 + 29);
          if (v51)
          {
            *((void *)v47 + 30) = v51;
            operator delete(v51);
          }
          uint64_t v52 = (void *)*((void *)v47 + 26);
          if (v52)
          {
            *((void *)v47 + 27) = v52;
            operator delete(v52);
          }
          char v53 = (void *)*((void *)v47 + 22);
          if (v53)
          {
            *((void *)v47 + 23) = v53;
            operator delete(v53);
          }
        }
        if (*((_DWORD *)v47 + 22) == 1)
        {
          char v54 = (void *)*((void *)v47 + 7);
          if (v54)
          {
            *((void *)v47 + 8) = v54;
            operator delete(v54);
          }
          char v55 = (void *)*((void *)v47 + 4);
          if (v55)
          {
            *((void *)v47 + 5) = v55;
            operator delete(v55);
          }
          char v56 = *(void **)v47;
          if (*(void *)v47)
          {
            *((void *)v47 + 1) = v56;
            operator delete(v56);
          }
        }
LABEL_83:
        uint64_t v48 = v47 - 72;
        v47 -= 1432;
      }
      while (v48 != v45);
      char v46 = __p[0];
LABEL_108:
      __p[1] = v45;
      operator delete(v46);
LABEL_109:
      int v29 = *(_DWORD *)(v9 + 12);
      LODWORD(v15) = *(_DWORD *)(v9 + 16);
      if (v29 == -2 && v15 == 1 || *(_DWORD *)(v9 + 24) != 1 || *(_DWORD *)(v9 + 20) != -3) {
        goto LABEL_119;
      }
LABEL_56:
      sub_BFB9B4(a1, a5, *(void *)(v9 + 12), __p);
      sub_BFCE70((uint64_t)a2, (uint64_t *)&v76, &v76, (long long *)__p);
      uint64_t v33 = (char *)__p[0];
      if (!__p[0]) {
        goto LABEL_106;
      }
      uint64_t v34 = __p[0];
      if (__p[1] == __p[0]) {
        goto LABEL_105;
      }
      char v35 = (char *)__p[1] - 1360;
      while (2)
      {
        int v37 = *((_DWORD *)v35 + 338);
        if (v37 == 2)
        {
          if (v35[1336])
          {
            sub_3AFFFC((uint64_t)(v35 + 280));
            v35[1336] = 0;
          }
LABEL_66:
          if (*((_DWORD *)v35 + 66) == 1)
          {
            char v39 = (void *)*((void *)v35 + 29);
            if (v39)
            {
              *((void *)v35 + 30) = v39;
              operator delete(v39);
            }
            uint64_t v40 = (void *)*((void *)v35 + 26);
            if (v40)
            {
              *((void *)v35 + 27) = v40;
              operator delete(v40);
            }
            char v41 = (void *)*((void *)v35 + 22);
            if (v41)
            {
              *((void *)v35 + 23) = v41;
              operator delete(v41);
            }
          }
          if (*((_DWORD *)v35 + 22) == 1)
          {
            unsigned int v42 = (void *)*((void *)v35 + 7);
            if (v42)
            {
              *((void *)v35 + 8) = v42;
              operator delete(v42);
            }
            uint64_t v43 = (void *)*((void *)v35 + 4);
            if (v43)
            {
              *((void *)v35 + 5) = v43;
              operator delete(v43);
            }
            int v44 = *(void **)v35;
            if (*(void *)v35)
            {
              *((void *)v35 + 1) = v44;
              operator delete(v44);
            }
          }
        }
        else if (!v37)
        {
          char v38 = (void *)*((void *)v35 + 36);
          if (v38)
          {
            *((void *)v35 + 37) = v38;
            operator delete(v38);
          }
          goto LABEL_66;
        }
        char v36 = v35 - 72;
        v35 -= 1432;
        if (v36 != v33) {
          continue;
        }
        break;
      }
      uint64_t v34 = __p[0];
LABEL_105:
      __p[1] = v33;
      operator delete(v34);
LABEL_106:
      int v29 = *(_DWORD *)(v9 + 12);
      LODWORD(v15) = *(_DWORD *)(v9 + 16);
LABEL_119:
      unint64_t v60 = *(void *)(v9 + 20);
      BOOL v61 = v15 == HIDWORD(v60) && v29 == v60;
      if (!v61 && (v15 != 1 || v29 != -2) && v60 != 0x1FFFFFFFDLL)
      {
        sub_BFB498(a1, *(void *)(v9 + 12), v60, (uint64_t *)__p);
        sub_BFCE70((uint64_t)a2, (uint64_t *)&v76, &v76, (long long *)__p);
        uint64_t v62 = (char *)__p[0];
        if (__p[0])
        {
          unint64_t v11 = __p[0];
          if (__p[1] != __p[0])
          {
            uint64_t v63 = (char *)__p[1] - 1360;
            while (1)
            {
              int v65 = *((_DWORD *)v63 + 338);
              if (v65 == 2) {
                break;
              }
              if (!v65)
              {
                int v66 = (void *)*((void *)v63 + 36);
                if (v66)
                {
                  *((void *)v63 + 37) = v66;
                  operator delete(v66);
                }
LABEL_136:
                if (*((_DWORD *)v63 + 66) == 1)
                {
                  int v67 = (void *)*((void *)v63 + 29);
                  if (v67)
                  {
                    *((void *)v63 + 30) = v67;
                    operator delete(v67);
                  }
                  int v68 = (void *)*((void *)v63 + 26);
                  if (v68)
                  {
                    *((void *)v63 + 27) = v68;
                    operator delete(v68);
                  }
                  uint64_t v69 = (void *)*((void *)v63 + 22);
                  if (v69)
                  {
                    *((void *)v63 + 23) = v69;
                    operator delete(v69);
                  }
                }
                if (*((_DWORD *)v63 + 22) == 1)
                {
                  uint64_t v70 = (void *)*((void *)v63 + 7);
                  if (v70)
                  {
                    *((void *)v63 + 8) = v70;
                    operator delete(v70);
                  }
                  uint64_t v71 = (void *)*((void *)v63 + 4);
                  if (v71)
                  {
                    *((void *)v63 + 5) = v71;
                    operator delete(v71);
                  }
                  int v72 = *(void **)v63;
                  if (*(void *)v63)
                  {
                    *((void *)v63 + 1) = v72;
                    operator delete(v72);
                  }
                }
              }
              uint64_t v64 = v63 - 72;
              v63 -= 1432;
              if (v64 == v62)
              {
                unint64_t v11 = __p[0];
                goto LABEL_7;
              }
            }
            if (v63[1336])
            {
              sub_3AFFFC((uint64_t)(v63 + 280));
              v63[1336] = 0;
            }
            goto LABEL_136;
          }
LABEL_7:
          __p[1] = v62;
          operator delete(v11);
        }
      }
LABEL_8:
      v9 += 168;
    }
  }
}

void sub_BFA388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a12) {
    sub_20AE9D4((uint64_t)&a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_BFA3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (a5)
  {
    sub_20AE9D4((uint64_t)va);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0xBFA3A4);
}

void sub_BFA3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (a5)
  {
    sub_20AE9D4((uint64_t)va);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0xBFA3A4);
}

void sub_BFA3F4(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (sub_BFA690(a1, a2, a3))
  {
    sub_BFA8AC(a2, a3, a4);
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_BFAB04((uint64_t)a1, a2, a3, (uint64_t *)&__p);
    sub_BE7540(a4, a4[1], (uint64_t)__p, (uint64_t)v21, 0xED6866F8D962AE7BLL * ((v21 - (unsigned char *)__p) >> 3));
    unsigned int v8 = (char *)__p;
    if (__p)
    {
      uint64_t v9 = v21;
      uint64_t v10 = __p;
      if (v21 != __p)
      {
        do
        {
          int v11 = *((_DWORD *)v9 - 2);
          v9 -= 1432;
          if (v11 == 2)
          {
            uint64_t v9 = (char *)sub_9F6418((uint64_t)v9);
          }
          else if (!v11)
          {
            uint64_t v9 = (char *)sub_9F636C((uint64_t)v9);
          }
        }
        while (v9 != v8);
        uint64_t v10 = __p;
      }
      unint64_t v21 = v8;
      operator delete(v10);
    }
    sub_BFAEA8();
    sub_BE7540(a4, a4[1], (uint64_t)__p, (uint64_t)v21, 0xED6866F8D962AE7BLL * ((v21 - (unsigned char *)__p) >> 3));
    unint64_t v12 = (char *)__p;
    if (__p)
    {
      unint64_t v13 = v21;
      int8x8_t v14 = __p;
      if (v21 != __p)
      {
        do
        {
          int v15 = *((_DWORD *)v13 - 2);
          v13 -= 1432;
          if (v15 == 2)
          {
            unint64_t v13 = (char *)sub_9F6418((uint64_t)v13);
          }
          else if (!v15)
          {
            unint64_t v13 = (char *)sub_9F636C((uint64_t)v13);
          }
        }
        while (v13 != v12);
        int8x8_t v14 = __p;
      }
      unint64_t v21 = v12;
      operator delete(v14);
    }
    sub_BFB0EC((uint64_t)a1, a3, (uint64_t)&__p);
    sub_BE7540(a4, a4[1], (uint64_t)__p, (uint64_t)v21, 0xED6866F8D962AE7BLL * ((v21 - (unsigned char *)__p) >> 3));
    unint64_t v16 = (char *)__p;
    if (__p)
    {
      unint64_t v17 = v21;
      unint64_t v18 = __p;
      if (v21 != __p)
      {
        do
        {
          int v19 = *((_DWORD *)v17 - 2);
          v17 -= 1432;
          if (v19 == 2)
          {
            unint64_t v17 = (char *)sub_9F6418((uint64_t)v17);
          }
          else if (!v19)
          {
            unint64_t v17 = (char *)sub_9F636C((uint64_t)v17);
          }
        }
        while (v17 != v16);
        unint64_t v18 = __p;
      }
      unint64_t v21 = v16;
      operator delete(v18);
    }
  }
}

void sub_BFA630(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_BE5304((void **)va);
  sub_BE5304(v2);
  _Unwind_Resume(a1);
}

void sub_BFA67C(_Unwind_Exception *a1)
{
  sub_BE5304(v1);
  _Unwind_Resume(a1);
}

BOOL sub_BFA690(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  if (HIDWORD(a2) == 1 && (a2 + 3) < 2) {
    return 0;
  }
  uint64_t v6 = *a1;
  int v7 = (int *)sub_498D5C(*(void *)(*a1 + 4120) + 24, __ROR8__(a2, 32), 0, "stop");
  BOOL result = 0;
  unsigned int v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 >= 0xDu)
  {
    unsigned __int16 v9 = v8[6];
    if (!v9) {
      return 0;
    }
    unint64_t v12 = (unsigned int *)((char *)v7 + v9);
    uint64_t v11 = *v12;
    uint64_t v10 = v12[1];
    if (v10 == -1 || v11 == 0) {
      return 0;
    }
    int v15 = (int *)sub_8ED928(*(void *)(v6 + 4128) + 24, __ROR8__(v10 | (v11 << 32), 32), 0, "station");
    BOOL result = 0;
    unint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
    if (*v16 >= 0xBu)
    {
      uint64_t v17 = v16[5];
      if (!v17) {
        return 0;
      }
      if (!*(int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17))) {
        return 0;
      }
      uint64_t v18 = *a1;
      unint64_t v19 = __ROR8__(**(void **)(a3 + 8), 32);
      if (HIDWORD(v19) == 1 && (v19 + 3) < 2) {
        return 0;
      }
      uint8x8_t v20 = (int *)sub_498D5C(*(void *)(v18 + 4120) + 24, __ROR8__(v19, 32), 0, "stop");
      BOOL result = 0;
      unint64_t v21 = (unsigned __int16 *)((char *)v20 - *v20);
      if (*v21 >= 0xDu)
      {
        unsigned __int16 v22 = v21[6];
        if (!v22) {
          return 0;
        }
        unint64_t v25 = (unsigned int *)((char *)v20 + v22);
        uint64_t v24 = *v25;
        uint64_t v23 = v25[1];
        if (v23 == -1 || v24 == 0) {
          return 0;
        }
        uint64_t v27 = (int *)sub_8ED928(*(void *)(v18 + 4128) + 24, __ROR8__(v23 | (v24 << 32), 32), 0, "station");
        BOOL result = 0;
        BOOL v28 = (unsigned __int16 *)((char *)v27 - *v27);
        if (*v28 >= 0xBu)
        {
          uint64_t v29 = v28[5];
          if (v29)
          {
            if (*(int *)((char *)v27 + v29 + *(unsigned int *)((char *)v27 + v29)))
            {
              uint64_t v30 = *(void *)(a3 + 40);
              if (!*(_WORD *)(v30 + 16)) {
                return *(unsigned __int16 *)(v30 + 18) == 0;
              }
            }
          }
          return 0;
        }
      }
    }
  }
  return result;
}

void sub_BFA8AC(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  v19[0] = a1;
  int v26 = 0;
  char v27 = 2;
  uint64_t v4 = __ROR8__(**(void **)(a2 + 8), 32);
  int v17 = 0;
  char v18 = 2;
  uint64_t v9 = 0xFFFFFFFFLL;
  v10[0] = v4;
  int v7 = 0;
  uint64_t v8 = 0;
  __p = 0;
  sub_BE9A84((uint64_t)v28, (uint64_t)v19, (uint64_t)v10, &v9, (uint64_t)&__p, 0x7FFFFFFF);
  int v46 = -1;
  sub_BFD5D4((uint64_t)v45, (uint64_t)v28);
  int v46 = 0;
  sub_BE71E0(a3, (uint64_t)v45, 1uLL);
  if (v46 == 2)
  {
    sub_9F6418((uint64_t)v45);
    uint64_t v5 = v43;
    if (v43)
    {
LABEL_5:
      int v44 = v5;
      operator delete(v5);
    }
  }
  else
  {
    if (!v46) {
      sub_9F636C((uint64_t)v45);
    }
    uint64_t v5 = v43;
    if (v43) {
      goto LABEL_5;
    }
  }
  if (v42 == 1)
  {
    if (v40)
    {
      char v41 = v40;
      operator delete(v40);
    }
    if (v38)
    {
      char v39 = v38;
      operator delete(v38);
    }
    if (v36)
    {
      int v37 = v36;
      operator delete(v36);
    }
  }
  if (v35 == 1)
  {
    if (v33)
    {
      uint64_t v34 = v33;
      operator delete(v33);
    }
    if (v31)
    {
      unint64_t v32 = v31;
      operator delete(v31);
    }
    if (v29)
    {
      uint64_t v30 = v29;
      operator delete(v29);
    }
  }
  if (__p)
  {
    int v7 = __p;
    operator delete(__p);
  }
  if (v17 == 1)
  {
    if (v15)
    {
      unint64_t v16 = v15;
      operator delete(v15);
    }
    if (v13)
    {
      int8x8_t v14 = v13;
      operator delete(v13);
    }
    if (v11)
    {
      unint64_t v12 = v11;
      operator delete(v11);
    }
  }
  if (v26 == 1)
  {
    if (v24)
    {
      unint64_t v25 = v24;
      operator delete(v24);
    }
    if (v22)
    {
      uint64_t v23 = v22;
      operator delete(v22);
    }
    if (v20)
    {
      unint64_t v21 = v20;
      operator delete(v20);
    }
  }
}

void sub_BFAAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  if (__p) {
    operator delete(__p);
  }
  sub_BE6670((uint64_t)&a14);
  sub_BE6670((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_BFAB04(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5 = *(unint64_t **)(a3 + 40);
  int v6 = *((unsigned __int16 *)v5 + 8);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  if (v6)
  {
    if (v6 == 1)
    {
      unint64_t v10 = __ROR8__(*v5, 32);
    }
    else
    {
      uint64_t v11 = (int *)sub_4992B0(*(void *)(*(void *)a1 + 4104) + 24, *v5, 0, "road access point");
      unint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
      if (*v12 >= 7u && (unsigned __int16 v13 = v12[3]) != 0) {
        unint64_t v10 = *(unsigned int *)((char *)v11 + v13 + 4) | ((unint64_t)*(unsigned int *)((char *)v11 + v13) << 32);
      }
      else {
        unint64_t v10 = 0xFFFFFFFFLL;
      }
    }
    v38[0] = a2;
    int v45 = 0;
    char v46 = 2;
    v29[0] = v10;
    int v36 = 0;
    char v37 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0xFFFFFFFFLL;
    unint64_t v25 = 0;
    int v26 = 0;
    sub_BE9A84((uint64_t)&v47, (uint64_t)v38, (uint64_t)v29, &v28, (uint64_t)&v25, 0x7FFFFFFF);
    unint64_t v14 = a4[1];
    if (v14 >= a4[2])
    {
      uint64_t v15 = sub_BFD69C(a4, (uint64_t)&v47);
    }
    else
    {
      *(_DWORD *)(v14 + 1424) = -1;
      sub_BFD5D4(v14, (uint64_t)&v47);
      *(_DWORD *)(v14 + 1424) = 0;
      uint64_t v15 = v14 + 1432;
    }
    a4[1] = v15;
    if (__p)
    {
      uint64_t v64 = __p;
      operator delete(__p);
    }
    if (v62 == 1)
    {
      if (v60)
      {
        BOOL v61 = v60;
        operator delete(v60);
      }
      if (v58)
      {
        char v59 = v58;
        operator delete(v58);
      }
      if (v56)
      {
        char v57 = v56;
        operator delete(v56);
      }
    }
    if (v55 == 1)
    {
      if (v53)
      {
        char v54 = v53;
        operator delete(v53);
      }
      if (v51)
      {
        uint64_t v52 = v51;
        operator delete(v51);
      }
      if (v49)
      {
        uint64_t v50 = v49;
        operator delete(v49);
      }
    }
    if (v25)
    {
      int v26 = v25;
      operator delete(v25);
    }
    if (v36 == 1)
    {
      if (v34)
      {
        int v35 = v34;
        operator delete(v34);
      }
      if (v32)
      {
        uint64_t v33 = v32;
        operator delete(v32);
      }
      if (v30)
      {
        unsigned int v31 = v30;
        operator delete(v30);
      }
    }
    if (v45 == 1)
    {
      if (v43)
      {
        int v44 = v43;
        operator delete(v43);
      }
      if (v41)
      {
        int v42 = v41;
        operator delete(v41);
      }
      if (v39)
      {
        uint64_t v40 = v39;
        operator delete(v39);
      }
    }
    uint64_t v16 = *(void *)(a3 + 40);
    if (*(_WORD *)(v16 + 16) == 2)
    {
      unint64_t v17 = *(void *)v16;
      char v18 = (int *)sub_4992B0(*(void *)(*(void *)a1 + 4104) + 24, *(void *)v16, 0, "road access point");
      uint64_t v19 = __ROR8__(v17, 32);
      uint8x8_t v20 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v20 < 0xBu)
      {
        uint64_t v47 = v19;
        int v48 = 0;
        unint64_t v22 = a4[1];
        if (v22 < a4[2])
        {
LABEL_48:
          uint64_t v23 = v47;
          *(_DWORD *)(v22 + 8) = v48;
          *(void *)unint64_t v22 = v23;
          *(_DWORD *)(v22 + 1424) = 1;
          uint64_t v24 = (char *)(v22 + 1432);
LABEL_51:
          a4[1] = (uint64_t)v24;
          return;
        }
      }
      else
      {
        uint64_t v21 = v20[5];
        if (v21) {
          LODWORD(v21) = 10 * *(int *)((char *)v18 + v21);
        }
        uint64_t v47 = v19;
        int v48 = v21;
        unint64_t v22 = a4[1];
        if (v22 < a4[2]) {
          goto LABEL_48;
        }
      }
      uint64_t v24 = sub_BFD884((void **)a4, (uint64_t)&v47);
      goto LABEL_51;
    }
  }
}

void sub_BFAE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  sub_9F636C((uint64_t)&a57);
  if (__p) {
    operator delete(__p);
  }
  sub_BE6670((uint64_t)&a13);
  sub_BE6670((uint64_t)&a35);
  sub_BE5304(v57);
  _Unwind_Resume(a1);
}

void sub_BFAEA8()
{
  __chkstk_darwin();
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v5 = __ROR8__(*(void *)v4, 32);
  int v6 = *(unsigned __int16 *)(v4 + 16);
  if (v6 == 1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = v0;
  }
  if (v6 == 1) {
    char v8 = 0;
  }
  else {
    char v8 = 2;
  }
  if (v6 == 2)
  {
    char v9 = 1;
  }
  else
  {
    uint64_t v5 = v7;
    char v9 = v8;
  }
  v27[0] = v5;
  int v34 = 0;
  char v35 = v9;
  uint64_t v10 = __ROR8__(**(void **)(v1 + 8), 32);
  uint64_t v11 = __ROR8__(*(void *)(v4 + 8), 32);
  int v12 = *(unsigned __int16 *)(v4 + 18);
  if (v12 == 1)
  {
    uint64_t v10 = v11;
    char v13 = 0;
  }
  else
  {
    char v13 = 2;
  }
  BOOL v14 = v12 == 2;
  if (v12 == 2) {
    uint64_t v15 = v11;
  }
  else {
    uint64_t v15 = v10;
  }
  v18[0] = v15;
  if (v14) {
    char v16 = 1;
  }
  else {
    char v16 = v13;
  }
  int v25 = 0;
  char v26 = v16;
  bzero(v17, 0x428uLL);
  sub_BE6C90((uint64_t)v36, (uint64_t)v27, (uint64_t)v18, (uint64_t)v17, 0x7FFFFFFF);
  int v38 = -1;
  sub_BE83BC((uint64_t)v37, (uint64_t)v36);
  int v38 = 2;
  sub_BE71E0(v3, (uint64_t)v37, 1uLL);
  if (v38 == 2)
  {
    sub_9F6418((uint64_t)v37);
  }
  else if (!v38)
  {
    sub_9F636C((uint64_t)v37);
  }
  sub_9F6418((uint64_t)v36);
  if (v17[1056]) {
    sub_3AFFFC((uint64_t)v17);
  }
  if (v25 == 1)
  {
    if (v23)
    {
      uint64_t v24 = v23;
      operator delete(v23);
    }
    if (v21)
    {
      unint64_t v22 = v21;
      operator delete(v21);
    }
    if (v19)
    {
      uint8x8_t v20 = v19;
      operator delete(v19);
    }
  }
  if (v34 == 1)
  {
    if (v32)
    {
      uint64_t v33 = v32;
      operator delete(v32);
    }
    if (v30)
    {
      unsigned int v31 = v30;
      operator delete(v30);
    }
    if (v28)
    {
      uint64_t v29 = v28;
      operator delete(v28);
    }
  }
}

void sub_BFB0A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_BE5400((uint64_t)&STACK[0xB20]);
  sub_9F6418((uint64_t)&STACK[0x590]);
  if (LOBYTE(STACK[0x428])) {
    sub_3AFFFC((uint64_t)va);
  }
  sub_BE6670((uint64_t)&STACK[0x430]);
  sub_BE6670((uint64_t)&STACK[0x4E0]);
  _Unwind_Resume(a1);
}

void sub_BFB0EC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a2 + 40);
  int v5 = *(unsigned __int16 *)(v4 + 18);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  if (!v5) {
    return;
  }
  if (v5 == 2)
  {
    unint64_t v8 = *(void *)(v4 + 8);
    char v9 = (int *)sub_4992B0(*(void *)(*(void *)a1 + 4104) + 24, v8, 0, "road access point");
    uint64_t v10 = __ROR8__(v8, 32);
    uint64_t v11 = (unsigned __int16 *)((char *)v9 - *v9);
    if (*v11 < 0xBu)
    {
      uint64_t v45 = v10;
      int v46 = 0;
      unint64_t v13 = *(void *)(a3 + 8);
      if (v13 < *(void *)(a3 + 16))
      {
LABEL_7:
        uint64_t v14 = v45;
        *(_DWORD *)(v13 + 8) = v46;
        *(void *)unint64_t v13 = v14;
        *(_DWORD *)(v13 + 1424) = 1;
        uint64_t v15 = (char *)(v13 + 1432);
LABEL_10:
        *(void *)(a3 + 8) = v15;
        uint64_t v4 = *(void *)(a2 + 40);
        int v5 = *(unsigned __int16 *)(v4 + 18);
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v12 = v11[5];
      if (v12) {
        LODWORD(v12) = 10 * *(int *)((char *)v9 + v12);
      }
      uint64_t v45 = v10;
      int v46 = v12;
      unint64_t v13 = *(void *)(a3 + 8);
      if (v13 < *(void *)(a3 + 16)) {
        goto LABEL_7;
      }
    }
    uint64_t v15 = sub_BFD884((void **)a3, (uint64_t)&v45);
    goto LABEL_10;
  }
LABEL_11:
  if (v5 == 1)
  {
    unint64_t v16 = __ROR8__(*(void *)(v4 + 8), 32);
  }
  else
  {
    unint64_t v17 = (int *)sub_4992B0(*(void *)(*(void *)a1 + 4104) + 24, *(void *)(v4 + 8), 0, "road access point");
    char v18 = (unsigned __int16 *)((char *)v17 - *v17);
    if (*v18 >= 7u && (unsigned __int16 v19 = v18[3]) != 0) {
      unint64_t v16 = *(unsigned int *)((char *)v17 + v19 + 4) | ((unint64_t)*(unsigned int *)((char *)v17 + v19) << 32);
    }
    else {
      unint64_t v16 = 0xFFFFFFFFLL;
    }
  }
  v36[0] = v16;
  int v43 = 0;
  char v44 = 0;
  uint64_t v20 = __ROR8__(**(void **)(a2 + 8), 32);
  int v34 = 0;
  char v35 = 2;
  uint64_t v26 = 0xFFFFFFFFLL;
  v27[0] = v20;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v23 = 0;
  sub_BE9A84((uint64_t)&v45, (uint64_t)v36, (uint64_t)v27, &v26, (uint64_t)&v23, 0x7FFFFFFF);
  unint64_t v21 = *(void *)(a3 + 8);
  if (v21 >= *(void *)(a3 + 16))
  {
    uint64_t v22 = sub_BFD69C((uint64_t *)a3, (uint64_t)&v45);
  }
  else
  {
    *(_DWORD *)(v21 + 1424) = -1;
    sub_BFD5D4(v21, (uint64_t)&v45);
    *(_DWORD *)(v21 + 1424) = 0;
    uint64_t v22 = v21 + 1432;
  }
  *(void *)(a3 + 8) = v22;
  if (__p)
  {
    int v62 = __p;
    operator delete(__p);
  }
  if (v60 == 1)
  {
    if (v58)
    {
      char v59 = v58;
      operator delete(v58);
    }
    if (v56)
    {
      char v57 = v56;
      operator delete(v56);
    }
    if (v54)
    {
      int v55 = v54;
      operator delete(v54);
    }
  }
  if (v53 == 1)
  {
    if (v51)
    {
      uint64_t v52 = v51;
      operator delete(v51);
    }
    if (v49)
    {
      uint64_t v50 = v49;
      operator delete(v49);
    }
    if (v47)
    {
      int v48 = v47;
      operator delete(v47);
    }
  }
  if (v23)
  {
    uint64_t v24 = v23;
    operator delete(v23);
  }
  if (v34 == 1)
  {
    if (v32)
    {
      uint64_t v33 = v32;
      operator delete(v32);
    }
    if (v30)
    {
      unsigned int v31 = v30;
      operator delete(v30);
    }
    if (v28)
    {
      uint64_t v29 = v28;
      operator delete(v28);
    }
  }
  if (v43 == 1)
  {
    if (v41)
    {
      int v42 = v41;
      operator delete(v41);
    }
    if (v39)
    {
      uint64_t v40 = v39;
      operator delete(v39);
    }
    if (v37)
    {
      int v38 = v37;
      operator delete(v37);
    }
  }
}

void sub_BFB42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  sub_9F636C((uint64_t)&a57);
  if (__p) {
    operator delete(__p);
  }
  sub_BE6670((uint64_t)&a13);
  sub_BE6670((uint64_t)&a35);
  sub_BE5304(v57);
  _Unwind_Resume(a1);
}

void sub_BFB498(uint64_t *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  sub_BFD270((uint64_t)v33, *a1, a2);
  unint64_t v8 = v35;
  char v9 = v34;
  if (v37) {
    unint64_t v8 = v36;
  }
  if ((unint64_t)v34 >= *(void *)v8)
  {
LABEL_9:
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v31);
      sub_188FC78(v31, (uint64_t)"Transfer unpacking failed from stop ", 36);
      uint64_t v11 = *a1;
      if (HIDWORD(a2) != 1 || (a2 + 3) >= 2)
      {
        uint64_t v12 = (int *)sub_498D5C(*(void *)(v11 + 4120) + 24, __ROR8__(a2, 32), 0, "stop");
        unint64_t v13 = (unsigned __int16 *)((char *)v12 - *v12);
        if (*v13 >= 5u && (uint64_t v14 = v13[2]) != 0) {
          uint64_t v15 = *(void *)((char *)v12 + v14);
        }
        else {
          uint64_t v15 = 0;
        }
        unint64_t v16 = sub_398020(*(void *)(v11 + 4120) + 24, 0);
        unint64_t v17 = &v16[-*(int *)v16];
        if (*(unsigned __int16 *)v17 >= 0xBu)
        {
          uint64_t v18 = *((unsigned __int16 *)v17 + 5);
          if (v18)
          {
            if (v16[v18]) {
              nullsub_1(v15);
            }
          }
        }
      }
      unsigned __int16 v19 = (void *)std::ostream::operator<<();
      sub_188FC78(v19, (uint64_t)" to stop ", 9);
      uint64_t v20 = *a1;
      if (HIDWORD(a3) != 1 || (a3 + 3) >= 2)
      {
        unint64_t v21 = (int *)sub_498D5C(*(void *)(v20 + 4120) + 24, __ROR8__(a3, 32), 0, "stop");
        uint64_t v22 = (unsigned __int16 *)((char *)v21 - *v21);
        if (*v22 >= 5u && (uint64_t v23 = v22[2]) != 0) {
          uint64_t v24 = *(void *)((char *)v21 + v23);
        }
        else {
          uint64_t v24 = 0;
        }
        uint64_t v25 = sub_398020(*(void *)(v20 + 4120) + 24, 0);
        uint64_t v26 = &v25[-*(int *)v25];
        if (*(unsigned __int16 *)v26 >= 0xBu)
        {
          uint64_t v27 = *((unsigned __int16 *)v26 + 5);
          if (v27)
          {
            if (v25[v27]) {
              nullsub_1(v24);
            }
          }
        }
      }
      uint64_t v28 = (void *)std::ostream::operator<<();
      sub_188FC78(v28, (uint64_t)": transfer does not exist in transit routing data", 49);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if (v30 < 0) {
        operator delete(__p);
      }
      if (v32 < 0) {
        operator delete((void *)v31[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    while (__ROR8__(*v9, 32) != a3)
    {
      sub_BFB884((uint64_t)v33);
      char v9 = v34;
      if (v37) {
        uint64_t v10 = v36;
      }
      else {
        uint64_t v10 = v35;
      }
      if ((unint64_t)v34 >= *(void *)v10) {
        goto LABEL_9;
      }
    }
    sub_BFA3F4(a1, a2, (uint64_t)v33, a4);
  }
}

void sub_BFB838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_BFB884(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v3 = (void *)(result + 16);
  uint64_t v2 = *(void **)(result + 16);
  uint64_t v4 = (void *)(*(void *)(result + 8) + 12);
  *(void *)(result + 8) = v4;
  *(void *)(result + 40) += 20;
  if (v4 == v2)
  {
    uint64_t v4 = *(void **)(result + 24);
    *(void *)(result + 8) = v4;
    *(void *)(result + 40) = *(void *)(result + 56);
    *(unsigned char *)(result + 72) = 1;
  }
  if (*(unsigned char *)(*(void *)result + 16))
  {
    uint64_t v5 = 32;
    if (!*(unsigned char *)(result + 72)) {
      uint64_t v5 = 16;
    }
    if ((unint64_t)v4 < *(void *)(result + v5))
    {
      int v6 = (void *)(result + 32);
      while (1)
      {
        unint64_t v8 = __ROR8__(*v4, 32);
        if (HIDWORD(v8) == 1 && (v8 + 3) < 2) {
          break;
        }
        BOOL result = sub_2AB7E4(**(void **)(*(void *)v1 + 4120));
        if (result) {
          break;
        }
        uint64_t v10 = *(void **)(v1 + 16);
        uint64_t v4 = (void *)(*(void *)(v1 + 8) + 12);
        *(void *)(v1 + 8) = v4;
        *(void *)(v1 + 40) += 20;
        if (v4 == v10)
        {
          uint64_t v4 = *(void **)(v1 + 24);
          *(void *)(v1 + 8) = v4;
          *(void *)(v1 + 40) = *(void *)(v1 + 56);
          *(unsigned char *)(v1 + 72) = 1;
          if ((unint64_t)v4 >= *v6) {
            return result;
          }
        }
        else
        {
          if (*(unsigned char *)(v1 + 72)) {
            uint64_t v7 = (void *)(v1 + 32);
          }
          else {
            uint64_t v7 = v3;
          }
          if ((unint64_t)v4 >= *v7) {
            return result;
          }
        }
      }
    }
  }
  return result;
}

void sub_BFB9B4(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  sub_BEDC48((unsigned int *)&v32, a2);
  uint64_t v25 = 0;
  int v26 = -1;
  uint64_t v27 = 0xFFFFFFFFLL;
  int v28 = 0x7FFFFFFF;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v29 = 0;
  while (v33 != -1 && v34 != a3)
    sub_BED920((unsigned int *)&v32);
  int v39 = v33;
  uint64_t v40 = v34;
  int v41 = v35;
  long long v42 = v36;
  uint64_t v43 = v37;
  long long v36 = 0uLL;
  uint64_t v37 = 0;
  uint64_t v38 = v32;
  if (v33 != -1)
  {
    sub_BE7040(a4, (uint64_t *)&v42);
    unint64_t v8 = (void *)v42;
    if (!(void)v42) {
      return;
    }
    goto LABEL_9;
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v23);
    sub_188FC78(v23, (uint64_t)"Unable to unpack walking to stop ", 33);
    uint64_t v12 = *a1;
    if (HIDWORD(a3) != 1 || (a3 + 3) >= 2)
    {
      unint64_t v13 = (int *)sub_498D5C(*(void *)(v12 + 4120) + 24, __ROR8__(a3, 32), 0, "stop");
      uint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
      if (*v14 >= 5u && (uint64_t v15 = v14[2]) != 0) {
        uint64_t v16 = *(void *)((char *)v13 + v15);
      }
      else {
        uint64_t v16 = 0;
      }
      unint64_t v17 = sub_398020(*(void *)(v12 + 4120) + 24, 0);
      uint64_t v18 = &v17[-*(int *)v17];
      if (*(unsigned __int16 *)v18 >= 0xBu)
      {
        uint64_t v19 = *((unsigned __int16 *)v18 + 5);
        if (v19)
        {
          if (v17[v19]) {
            nullsub_1(v16);
          }
        }
      }
    }
    uint64_t v20 = (void *)std::ostream::operator<<();
    sub_188FC78(v20, (uint64_t)": no path found in walking tree", 31);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v22 < 0) {
      operator delete(__p);
    }
    if (v24 < 0) {
      operator delete((void *)v23[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  unint64_t v8 = (void *)v42;
  if ((void)v42)
  {
LABEL_9:
    uint64_t v9 = *((void *)&v42 + 1);
    uint64_t v10 = v8;
    if (*((void **)&v42 + 1) != v8)
    {
      do
      {
        int v11 = *(_DWORD *)(v9 - 8);
        v9 -= 1432;
        if (v11 == 2)
        {
          uint64_t v9 = sub_9F6418(v9);
        }
        else if (!v11)
        {
          uint64_t v9 = sub_9F636C(v9);
        }
      }
      while ((void *)v9 != v8);
      uint64_t v10 = (void *)v42;
    }
    *((void *)&v42 + 1) = v8;
    operator delete(v10);
  }
}

void sub_BFBD0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    sub_BED8A8(v16 - 104);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  sub_BED8A8(v16 - 104);
  _Unwind_Resume(a1);
}

void sub_BFBD6C(_Unwind_Exception *a1)
{
  sub_BED8A8(v1 - 104);
  _Unwind_Resume(a1);
}

void sub_BFBD80(_Unwind_Exception *a1)
{
  sub_BED8A8(v1 - 216);
  sub_BED8A8(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_BFBD9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 24);
  uint64_t v4 = *(void *)(a3 + 32);
  uint64_t v5 = v4 - v3;
  if (v4 != v3)
  {
    unint64_t v6 = 0;
    uint64_t v41 = v5 >> 6;
    do
    {
      while (1)
      {
        uint64_t v7 = *(void *)(a3 + 24);
        if (v6 >= (*(void *)(a3 + 32) - v7) >> 6) {
          sub_66748();
        }
        unint64_t v8 = (uint64_t *)(v7 + (v6 << 6));
        uint64_t v9 = *v8;
        uint64_t v46 = v8[1];
        if (*v8 != v46) {
          break;
        }
        if (++v6 == v41) {
          return;
        }
      }
      unint64_t v42 = v6;
      unint64_t v45 = v6 + 1;
      do
      {
        int v48 = 0;
        unint64_t v49 = 0;
        __p = 0;
        uint64_t v12 = *(void *)(v9 + 8);
        uint64_t v11 = *(void *)(v9 + 16);
        if (v12 == v11) {
          goto LABEL_9;
        }
        do
        {
          int v15 = *(_DWORD *)(v12 + 1088);
          switch(v15)
          {
            case 3:
              sub_BFC784((int *)v12, (uint64_t)v50);
              uint64_t v19 = (uint64_t)v48;
              if ((unint64_t)v48 >= v49)
              {
                int v48 = (_DWORD *)sub_BE81D0((uint64_t *)&__p, (uint64_t)v50);
                if (v72) {
                  goto LABEL_45;
                }
              }
              else
              {
                v48[356] = -1;
                *(_DWORD *)(v19 + 160) = v57;
                if (v57 == 1)
                {
                  sub_44479C(v19, (uint64_t)v50);
                }
                else if (!v57)
                {
                  *(void *)uint64_t v19 = *(void *)&v50[0];
                }
                *(unsigned char *)(v19 + 168) = v58;
                uint64_t v20 = (void *)(v19 + 176);
                *(_DWORD *)(v19 + 336) = v66;
                if (v66 == 1)
                {
                  sub_44479C((uint64_t)v20, (uint64_t)v59);
                }
                else if (!v66)
                {
                  *uint64_t v20 = v59[0];
                }
                *(unsigned char *)(v19 + 344) = v67;
                int v22 = v72;
                *(unsigned char *)(v19 + 1408) = v72;
                if (v22) {
                  sub_463750(v19 + 352, (uint64_t)&v68);
                }
                *(_DWORD *)(v19 + 1416) = v73;
                *(_DWORD *)(v19 + 1424) = 2;
                int v48 = (_DWORD *)(v19 + 1432);
                if (v72)
                {
LABEL_45:
                  sub_3AFFFC((uint64_t)&v68);
                  unsigned __int8 v72 = 0;
                }
              }
              break;
            case 2:
              int v17 = 10 * (*(_DWORD *)(v12 + 8) - *(_DWORD *)(v12 + 4));
              *(void *)&v50[0] = *(void *)(v12 + 12);
              DWORD2(v50[0]) = v17;
              uint64_t v18 = v48;
              if ((unint64_t)v48 < v49)
              {
                uint64_t v13 = *(void *)&v50[0];
                v48[2] = DWORD2(v50[0]);
                *(void *)uint64_t v18 = v13;
                v18[356] = 1;
                uint64_t v14 = (char *)(v18 + 358);
              }
              else
              {
                uint64_t v14 = sub_BFD884(&__p, (uint64_t)v50);
              }
              int v48 = v14;
              goto LABEL_14;
            case 1:
              sub_BFC4FC(v12, (uint64_t)v50);
              uint64_t v16 = (uint64_t)v48;
              if ((unint64_t)v48 < v49)
              {
                v48[356] = -1;
                *(_DWORD *)(v16 + 160) = v57;
                if (v57 == 1)
                {
                  sub_44479C(v16, (uint64_t)v50);
                }
                else if (!v57)
                {
                  *(void *)uint64_t v16 = *(void *)&v50[0];
                }
                *(unsigned char *)(v16 + 168) = v58;
                unint64_t v21 = (void *)(v16 + 176);
                *(_DWORD *)(v16 + 336) = v66;
                if (v66 == 1)
                {
                  sub_44479C((uint64_t)v21, (uint64_t)v59);
                }
                else if (!v66)
                {
                  *unint64_t v21 = v59[0];
                }
                *(unsigned char *)(v16 + 344) = v67;
                *(void *)(v16 + 352) = v68;
                *(void *)(v16 + 360) = 0;
                *(void *)(v16 + 368) = 0;
                *(void *)(v16 + 376) = 0;
                *(_OWORD *)(v16 + 360) = v69;
                *(void *)(v16 + 376) = v70;
                long long v69 = 0uLL;
                uint64_t v70 = 0;
                *(_DWORD *)(v16 + 384) = v71;
                *(_DWORD *)(v16 + 1424) = 0;
                int v48 = (_DWORD *)(v16 + 1432);
                if (v66 != 1) {
                  goto LABEL_56;
                }
LABEL_50:
                if (v64)
                {
                  int v65 = v64;
                  operator delete(v64);
                }
                if (v62)
                {
                  uint64_t v63 = v62;
                  operator delete(v62);
                }
                if (v60)
                {
                  BOOL v61 = v60;
                  operator delete(v60);
                }
                goto LABEL_56;
              }
              int v48 = (_DWORD *)sub_BFD69C((uint64_t *)&__p, (uint64_t)v50);
              if ((void)v69)
              {
                *((void *)&v69 + 1) = v69;
                operator delete((void *)v69);
                if (v66 == 1) {
                  goto LABEL_50;
                }
                goto LABEL_56;
              }
              break;
            default:
              goto LABEL_14;
          }
          if (v66 == 1) {
            goto LABEL_50;
          }
LABEL_56:
          if (v57 == 1)
          {
            if (v55)
            {
              char v56 = v55;
              operator delete(v55);
            }
            if (v53)
            {
              char v54 = v53;
              operator delete(v53);
            }
            if (v51)
            {
              uint64_t v52 = v51;
              operator delete(v51);
            }
          }
LABEL_14:
          v12 += 1096;
        }
        while (v12 != v11);
        uint64_t v23 = __p;
        if (__p != v48)
        {
          uint64_t v24 = *(void *)(v9 + 8);
          uint64_t v25 = *(void *)(v9 + 16);
          if (v24 == v25)
          {
LABEL_67:
            BOOL v26 = v45 == (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 6;
            if (!v42) {
              goto LABEL_75;
            }
            int v27 = *((_DWORD *)__p + 356);
            if (v27 != 2) {
              goto LABEL_71;
            }
          }
          else
          {
            while (*(_DWORD *)(v24 + 1088))
            {
              v24 += 1096;
              if (v24 == v25) {
                goto LABEL_67;
              }
            }
            BOOL v26 = v45 == (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 6;
            int v27 = *((_DWORD *)__p + 356);
            if (v27 != 2)
            {
LABEL_71:
              if (!v27) {
                goto LABEL_72;
              }
LABEL_75:
              uint64_t v28 = 0x1FFFFFFFELL;
              if (!v26) {
                goto LABEL_76;
              }
LABEL_80:
              uint64_t v30 = 0x1FFFFFFFDLL;
              goto LABEL_81;
            }
          }
LABEL_72:
          if (*((unsigned char *)__p + 168) != 2) {
            goto LABEL_75;
          }
          uint64_t v28 = *(void *)__p;
          if (v26) {
            goto LABEL_80;
          }
LABEL_76:
          int v29 = *(v48 - 2);
          if (v29 != 2 && v29 || *((unsigned char *)v48 - 1088) != 2) {
            goto LABEL_80;
          }
          uint64_t v30 = *((void *)v48 - 157);
LABEL_81:
          *(void *)&v50[0] = v28;
          *((void *)&v50[0] + 1) = v30;
          sub_BFDA58(a2, (uint64_t *)v50, v50, (uint64_t *)&__p);
          uint64_t v23 = __p;
        }
        if (v23)
        {
          uint64_t v10 = v23;
          if (v48 == v23)
          {
LABEL_8:
            int v48 = v23;
            operator delete(v10);
            goto LABEL_9;
          }
          uint64_t v31 = v48 - 340;
          while (2)
          {
            int v33 = v31[338];
            if (v33 == 2)
            {
              if (*((unsigned char *)v31 + 1336))
              {
                sub_3AFFFC((uint64_t)(v31 + 70));
                *((unsigned char *)v31 + 1336) = 0;
              }
LABEL_92:
              if (v31[66] == 1)
              {
                int v35 = (void *)*((void *)v31 + 29);
                if (v35)
                {
                  *((void *)v31 + 30) = v35;
                  operator delete(v35);
                }
                long long v36 = (void *)*((void *)v31 + 26);
                if (v36)
                {
                  *((void *)v31 + 27) = v36;
                  operator delete(v36);
                }
                uint64_t v37 = (void *)*((void *)v31 + 22);
                if (v37)
                {
                  *((void *)v31 + 23) = v37;
                  operator delete(v37);
                }
              }
              if (v31[22] == 1)
              {
                uint64_t v38 = (void *)*((void *)v31 + 7);
                if (v38)
                {
                  *((void *)v31 + 8) = v38;
                  operator delete(v38);
                }
                int v39 = (void *)*((void *)v31 + 4);
                if (v39)
                {
                  *((void *)v31 + 5) = v39;
                  operator delete(v39);
                }
                uint64_t v40 = *(void **)v31;
                if (*(void *)v31)
                {
                  *((void *)v31 + 1) = v40;
                  operator delete(v40);
                }
              }
            }
            else if (!v33)
            {
              uint64_t v34 = (void *)*((void *)v31 + 36);
              if (v34)
              {
                *((void *)v31 + 37) = v34;
                operator delete(v34);
              }
              goto LABEL_92;
            }
            uint64_t v32 = v31 - 18;
            v31 -= 358;
            if (v32 == v23)
            {
              uint64_t v10 = __p;
              goto LABEL_8;
            }
            continue;
          }
        }
LABEL_9:
        v9 += 144;
      }
      while (v9 != v46);
      unint64_t v6 = v45;
    }
    while (v45 != v41);
  }
}

void sub_BFC3B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
  {
    uint64_t v18 = a17;
    uint64_t v19 = __p;
    if ((void *)a17 != __p)
    {
      do
      {
        int v20 = *(_DWORD *)(v18 - 8);
        v18 -= 1432;
        if (v20 == 2)
        {
          uint64_t v18 = sub_9F6418(v18);
        }
        else if (!v20)
        {
          uint64_t v18 = sub_9F636C(v18);
        }
      }
      while ((void *)v18 != __p);
      uint64_t v19 = __p;
    }
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

void sub_BFC4FC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 160) = -1;
  *(_DWORD *)(a2 + 336) = -1;
  *(_DWORD *)(a2 + 352) = -1;
  *(void *)(a2 + 356) = 0;
  *(void *)(a2 + 372) = 0;
  *(void *)(a2 + 364) = 0;
  *(_DWORD *)(a2 + 380) = 0;
  *(_DWORD *)(a2 + 384) = 10 * (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 28));
  int v4 = *(_DWORD *)(a1 + 4);
  if (v4)
  {
    if (v4 == 4)
    {
      char v5 = 1;
    }
    else
    {
      if (v4 != 3)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        sub_5E5C(&v12, "Unknown transit entity type type");
        uint64_t v9 = (void *)sub_2F404((uint64_t)exception, &v12);
      }
      char v5 = 0;
    }
  }
  else
  {
    char v5 = 2;
  }
  v13[0] = *(void *)(a1 + 8);
  int v20 = 0;
  char v21 = v5;
  sub_BE6A78(a2, (uint64_t)v13);
  *(unsigned char *)(a2 + 168) = v21;
  if (v20 == 1)
  {
    if (__p)
    {
      uint64_t v19 = __p;
      operator delete(__p);
    }
    if (v16)
    {
      int v17 = v16;
      operator delete(v16);
    }
    if (v14)
    {
      int v15 = v14;
      operator delete(v14);
    }
  }
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (v6 == 4)
    {
      char v7 = 1;
    }
    else
    {
      if (v6 != 3)
      {
        uint64_t v10 = __cxa_allocate_exception(0x40uLL);
        sub_5E5C(&v12, "Unknown transit entity type type");
        uint64_t v11 = (void *)sub_2F404((uint64_t)v10, &v12);
      }
      char v7 = 0;
    }
  }
  else
  {
    char v7 = 2;
  }
  v13[0] = *(void *)(a1 + 20);
  int v20 = 0;
  char v21 = v7;
  sub_BE6A78(a2 + 176, (uint64_t)v13);
  *(unsigned char *)(a2 + 344) = v21;
  if (v20 == 1)
  {
    if (__p)
    {
      uint64_t v19 = __p;
      operator delete(__p);
    }
    if (v16)
    {
      int v17 = v16;
      operator delete(v16);
    }
    if (v14)
    {
      int v15 = v14;
      operator delete(v14);
    }
  }
}

void sub_BFC73C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_9F636C(v14);
    _Unwind_Resume(a1);
  }
  sub_9F636C(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_BFC784@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 160) = -1;
  *(_DWORD *)(a2 + 336) = -1;
  *(unsigned char *)(a2 + 1408) = 0;
  *(_DWORD *)(a2 + 1416) = 0x7FFFFFFF;
  sub_BFC914((uint64_t)v7, a1 + 1);
  sub_BE6A78(a2, (uint64_t)v7);
  *(unsigned char *)(a2 + 168) = v15;
  if (v14 == 1)
  {
    if (__p)
    {
      uint64_t v13 = __p;
      operator delete(__p);
    }
    if (v10)
    {
      uint64_t v11 = v10;
      operator delete(v10);
    }
    if (v8)
    {
      uint64_t v9 = v8;
      operator delete(v8);
    }
  }
  sub_BFC914((uint64_t)v7, a1 + 4);
  sub_BE6A78(a2 + 176, (uint64_t)v7);
  *(unsigned char *)(a2 + 344) = v15;
  if (v14 == 1)
  {
    if (__p)
    {
      uint64_t v13 = __p;
      operator delete(__p);
    }
    if (v10)
    {
      uint64_t v11 = v10;
      operator delete(v10);
    }
    if (v8)
    {
      uint64_t v9 = v8;
      operator delete(v8);
    }
  }
  uint64_t v4 = (uint64_t)(a1 + 8);
  uint64_t v5 = a2 + 352;
  if (*(unsigned char *)(a2 + 1408))
  {
    uint64_t result = sub_471250(v5, v4);
  }
  else
  {
    uint64_t result = sub_7A3ACC(v5, v4);
    *(unsigned char *)(a2 + 1408) = 1;
  }
  *(_DWORD *)(a2 + 1416) = a1[137];
  return result;
}

void sub_BFC8D8(_Unwind_Exception *a1)
{
  sub_9F6418(v1);
  _Unwind_Resume(a1);
}

void sub_BFC8EC(_Unwind_Exception *a1)
{
  sub_9F6418(v1);
  _Unwind_Resume(a1);
}

void sub_BFC900(_Unwind_Exception *a1)
{
  sub_9F6418(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_BFC914(uint64_t result, int *a2)
{
  if (a2[1] == -1 || a2[2] == 0)
  {
    *(void *)&long long v7 = -1;
    *((void *)&v7 + 1) = -1;
    *(void *)uint64_t result = -1;
    *(void *)(result + 8) = 0x7FFFFFFFLL;
    *(_OWORD *)(result + 16) = v7;
    *(void *)(result + 32) = 0x7FFFFFFFFFFFFFFFLL;
    *(void *)(result + 40) = 0;
    *(_DWORD *)(result + 63) = 0;
    *(void *)(result + 48) = 2359332000;
    *(void *)(result + 56) = 0;
    *(void *)(result + 72) = 0;
    *(void *)(result + 80) = 0;
    *(_DWORD *)(result + 96) = 0;
    *(void *)(result + 88) = 0;
    *(unsigned char *)(result + 100) = 100;
    *(void *)(result + 151) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_DWORD *)(result + 160) = 1;
    *(_OWORD *)(result + 104) = 0u;
    *(unsigned char *)(result + 168) = 3;
  }
  else
  {
    int v3 = *a2;
    if (*a2)
    {
      if (v3 == 4)
      {
        char v4 = 1;
      }
      else
      {
        if (v3 != 3)
        {
          exception = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(&v8, "Unknown transit entity type type");
          int v6 = (void *)sub_2F404((uint64_t)exception, &v8);
        }
        char v4 = 0;
      }
    }
    else
    {
      char v4 = 2;
    }
    *(void *)uint64_t result = *(void *)(a2 + 1);
    *(_DWORD *)(result + 160) = 0;
    *(unsigned char *)(result + 168) = v4;
  }
  return result;
}

void sub_BFCA58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_BFCA88(uint64_t a1, uint64_t *a2, _OWORD *a3, uint64_t a4)
{
  uint64_t v8 = *a2;
  unint64_t v9 = a2[1];
  unint64_t v10 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v11 = (((0xC4CEB9FE1A85EC53 * (v10 ^ (v10 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v10 ^ (v10 >> 33))) >> 33))
       + 0x388152A534) ^ 0xDEADBEEF;
  unint64_t v12 = 0xC4CEB9FE1A85EC53
      * ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) >> 33));
  unint64_t v13 = ((v12 ^ (v12 >> 33)) + (v11 << 6) + (v11 >> 2) + 2654435769u) ^ v11;
  unint64_t v14 = *(void *)(a1 + 8);
  if (v14)
  {
    uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      uint64_t v4 = ((v12 ^ (v12 >> 33)) + (v11 << 6) + (v11 >> 2) + 2654435769u) ^ v11;
      if (v13 >= v14) {
        uint64_t v4 = v13 % v14;
      }
    }
    else
    {
      uint64_t v4 = v13 & (v14 - 1);
    }
    uint64_t v16 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v16)
    {
      int v17 = *v16;
      if (*v16)
      {
        if (v15.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v20 = v17[1];
            if (v20 == v13)
            {
              BOOL v21 = *((_DWORD *)v17 + 5) == HIDWORD(v8) && *((_DWORD *)v17 + 4) == v8;
              if (v21 && v17[3] == v9) {
                return v17;
              }
            }
            else if ((v20 & (v14 - 1)) != v4)
            {
              goto LABEL_33;
            }
            int v17 = (void *)*v17;
            if (!v17) {
              goto LABEL_33;
            }
          }
        }
        do
        {
          unint64_t v18 = v17[1];
          if (v18 == v13)
          {
            BOOL v19 = *((_DWORD *)v17 + 5) == HIDWORD(v8) && *((_DWORD *)v17 + 4) == v8;
            if (v19 && v17[3] == v9) {
              return v17;
            }
          }
          else
          {
            if (v18 >= v14) {
              v18 %= v14;
            }
            if (v18 != v4) {
              break;
            }
          }
          int v17 = (void *)*v17;
        }
        while (v17);
      }
    }
  }
LABEL_33:
  int v17 = operator new(0x30uLL);
  *int v17 = 0;
  v17[1] = v13;
  *((_OWORD *)v17 + 1) = *a3;
  v17[4] = *(void *)a4;
  *((_DWORD *)v17 + 10) = *(_DWORD *)(a4 + 8);
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (v14 && (float)(v23 * (float)v14) >= v22)
  {
    uint64_t v24 = *(void *)a1;
    uint64_t v25 = *(void **)(*(void *)a1 + 8 * v4);
    if (v25)
    {
LABEL_36:
      *int v17 = *v25;
LABEL_71:
      *uint64_t v25 = v17;
      goto LABEL_72;
    }
  }
  else
  {
    BOOL v26 = 1;
    if (v14 >= 3) {
      BOOL v26 = (v14 & (v14 - 1)) != 0;
    }
    unint64_t v27 = v26 | (2 * v14);
    unint64_t v28 = vcvtps_u32_f32(v22 / v23);
    if (v27 <= v28) {
      size_t prime = v28;
    }
    else {
      size_t prime = v27;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v14 = *(void *)(a1 + 8);
    }
    if (prime > v14) {
      goto LABEL_47;
    }
    if (prime < v14)
    {
      unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v14 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (prime <= v30) {
        size_t prime = v30;
      }
      if (prime < v14) {
LABEL_47:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v14 = *(void *)(a1 + 8);
    unint64_t v33 = v14 - 1;
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
      {
        uint64_t v4 = v13 % v14;
        uint64_t v24 = *(void *)a1;
        uint64_t v25 = *(void **)(*(void *)a1 + 8 * (v13 % v14));
        if (v25) {
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v4 = v13;
        uint64_t v24 = *(void *)a1;
        uint64_t v25 = *(void **)(*(void *)a1 + 8 * v13);
        if (v25) {
          goto LABEL_36;
        }
      }
    }
    else
    {
      uint64_t v4 = v33 & v13;
      uint64_t v24 = *(void *)a1;
      uint64_t v25 = *(void **)(*(void *)a1 + 8 * (v33 & v13));
      if (v25) {
        goto LABEL_36;
      }
    }
  }
  *int v17 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v17;
  *(void *)(v24 + 8 * v4) = a1 + 16;
  if (*v17)
  {
    unint64_t v34 = *(void *)(*v17 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v34 >= v14) {
        v34 %= v14;
      }
    }
    else
    {
      v34 &= v14 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_71;
  }
LABEL_72:
  ++*(void *)(a1 + 24);
  return v17;
}

void sub_BFCE5C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_BFCE70(uint64_t a1, uint64_t *a2, _OWORD *a3, long long *a4)
{
  uint64_t v8 = *a2;
  unint64_t v9 = a2[1];
  unint64_t v10 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v11 = (((0xC4CEB9FE1A85EC53 * (v10 ^ (v10 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v10 ^ (v10 >> 33))) >> 33))
       + 0x388152A534) ^ 0xDEADBEEF;
  unint64_t v12 = 0xC4CEB9FE1A85EC53
      * ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) >> 33));
  unint64_t v13 = ((v12 ^ (v12 >> 33)) + (v11 << 6) + (v11 >> 2) + 2654435769u) ^ v11;
  unint64_t v14 = *(void *)(a1 + 8);
  if (v14)
  {
    uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      uint64_t v4 = ((v12 ^ (v12 >> 33)) + (v11 << 6) + (v11 >> 2) + 2654435769u) ^ v11;
      if (v13 >= v14) {
        uint64_t v4 = v13 % v14;
      }
    }
    else
    {
      uint64_t v4 = v13 & (v14 - 1);
    }
    uint64_t v16 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v16)
    {
      int v17 = *v16;
      if (*v16)
      {
        if (v15.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v20 = v17[1];
            if (v20 == v13)
            {
              BOOL v21 = *((_DWORD *)v17 + 5) == HIDWORD(v8) && *((_DWORD *)v17 + 4) == v8;
              if (v21 && v17[3] == v9) {
                return v17;
              }
            }
            else if ((v20 & (v14 - 1)) != v4)
            {
              goto LABEL_33;
            }
            int v17 = (void *)*v17;
            if (!v17) {
              goto LABEL_33;
            }
          }
        }
        do
        {
          unint64_t v18 = v17[1];
          if (v18 == v13)
          {
            BOOL v19 = *((_DWORD *)v17 + 5) == HIDWORD(v8) && *((_DWORD *)v17 + 4) == v8;
            if (v19 && v17[3] == v9) {
              return v17;
            }
          }
          else
          {
            if (v18 >= v14) {
              v18 %= v14;
            }
            if (v18 != v4) {
              break;
            }
          }
          int v17 = (void *)*v17;
        }
        while (v17);
      }
    }
  }
LABEL_33:
  float v22 = (void *)(a1 + 16);
  int v17 = operator new(0x38uLL);
  *int v17 = 0;
  v17[1] = v13;
  long long v23 = *a4;
  *((_OWORD *)v17 + 1) = *a3;
  *((_OWORD *)v17 + 2) = v23;
  v17[6] = *((void *)a4 + 2);
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  *((void *)a4 + 2) = 0;
  float v24 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v25 = *(float *)(a1 + 32);
  if (v14 && (float)(v25 * (float)v14) >= v24)
  {
    uint64_t v26 = *(void *)a1;
    unint64_t v27 = *(void **)(*(void *)a1 + 8 * v4);
    if (v27)
    {
LABEL_36:
      *int v17 = *v27;
LABEL_71:
      *unint64_t v27 = v17;
      goto LABEL_72;
    }
  }
  else
  {
    BOOL v28 = 1;
    if (v14 >= 3) {
      BOOL v28 = (v14 & (v14 - 1)) != 0;
    }
    unint64_t v29 = v28 | (2 * v14);
    unint64_t v30 = vcvtps_u32_f32(v24 / v25);
    if (v29 <= v30) {
      size_t prime = v30;
    }
    else {
      size_t prime = v29;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v32 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v32) {
      goto LABEL_47;
    }
    if (prime < *(void *)&v32)
    {
      unint64_t v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v32 < 3uLL || (uint8x8_t v34 = (uint8x8_t)vcnt_s8(v32), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        unint64_t v33 = std::__next_prime(v33);
      }
      else
      {
        uint64_t v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2) {
          unint64_t v33 = v35;
        }
      }
      if (prime <= v33) {
        size_t prime = v33;
      }
      if (prime < *(void *)&v32) {
LABEL_47:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v14 = *(void *)(a1 + 8);
    unint64_t v36 = v14 - 1;
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
      {
        uint64_t v4 = v13 % v14;
        uint64_t v26 = *(void *)a1;
        unint64_t v27 = *(void **)(*(void *)a1 + 8 * (v13 % v14));
        if (v27) {
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v4 = v13;
        uint64_t v26 = *(void *)a1;
        unint64_t v27 = *(void **)(*(void *)a1 + 8 * v13);
        if (v27) {
          goto LABEL_36;
        }
      }
    }
    else
    {
      uint64_t v4 = v36 & v13;
      uint64_t v26 = *(void *)a1;
      unint64_t v27 = *(void **)(*(void *)a1 + 8 * (v36 & v13));
      if (v27) {
        goto LABEL_36;
      }
    }
  }
  *int v17 = *v22;
  *float v22 = v17;
  *(void *)(v26 + 8 * v4) = v22;
  if (*v17)
  {
    unint64_t v37 = *(void *)(*v17 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v37 >= v14) {
        v37 %= v14;
      }
    }
    else
    {
      v37 &= v14 - 1;
    }
    unint64_t v27 = (void *)(*(void *)a1 + 8 * v37);
    goto LABEL_71;
  }
LABEL_72:
  ++*(void *)(a1 + 24);
  return v17;
}

void sub_BFD25C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_BEE1A0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_BFD270(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  int v6 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v7 = a2 + 3896;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v8 = sub_C256B0(a2 + 3896, a3);
  uint64_t v9 = *v8;
  *(void *)(a1 + 24) = *v8;
  unint64_t v10 = sub_C256B0(v7, a3);
  *(void *)(a1 + 32) = v9 + v10[1] - *v10;
  unint64_t v11 = sub_C25DBC(v7, a3);
  uint64_t v12 = *v11;
  *(void *)(a1 + 56) = *v11;
  unint64_t v13 = sub_C25DBC(v7, a3);
  *(void *)(a1 + 64) = v12 + v13[1] - *v13;
  if (HIDWORD(a3) == 1 && (a3 + 3) < 2) {
    goto LABEL_32;
  }
  unint64_t v14 = (int *)sub_A1A290(a2 + 24, a3, 0, "transfers at stop");
  uint8x8_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
  unsigned int v16 = *v15;
  if (v16 < 7) {
    goto LABEL_32;
  }
  if (v15[3])
  {
    int v17 = (int *)((char *)v14 + v15[3] + *(unsigned int *)((char *)v14 + v15[3]));
    if (v16 >= 0xD) {
      goto LABEL_6;
    }
LABEL_11:
    unint64_t v18 = 0;
    if (!v17) {
      goto LABEL_15;
    }
    goto LABEL_12;
  }
  int v17 = 0;
  if (v16 < 0xD) {
    goto LABEL_11;
  }
LABEL_6:
  unint64_t v18 = (int *)v15[6];
  if (v15[6]) {
    unint64_t v18 = (int *)((char *)v18 + (void)v14 + *(unsigned int *)((char *)v18 + (void)v14));
  }
  if (!v17) {
    goto LABEL_15;
  }
LABEL_12:
  int v19 = *v17;
  if (*v17)
  {
    *int v6 = (uint64_t)(v17 + 1);
    uint64_t v20 = (uint64_t)&v17[3 * v19 + 1];
    goto LABEL_14;
  }
LABEL_15:
  if (!v18) {
    goto LABEL_28;
  }
  BOOL v21 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v21 < 5u) {
    goto LABEL_28;
  }
  uint64_t v22 = v21[2];
  if (!v22) {
    goto LABEL_28;
  }
  if (v16 < 0xD)
  {
    long long v23 = 0;
  }
  else
  {
    long long v23 = (int *)v15[6];
    if (v15[6]) {
      long long v23 = (int *)((char *)v23 + (void)v14 + *(unsigned int *)((char *)v23 + (void)v14));
    }
  }
  float v24 = (unsigned __int16 *)((char *)v23 - *v23);
  if (*v24 < 7u) {
    goto LABEL_28;
  }
  uint64_t v25 = v24[3];
  if (!v25 || !*(_WORD *)((char *)v23 + v25)) {
    goto LABEL_28;
  }
  uint64_t v26 = (uint64_t)v18 + v22 + *(unsigned int *)((char *)v18 + v22) + 4;
  *int v6 = v26;
  if (v16 < 0xD)
  {
    unint64_t v27 = 0;
  }
  else
  {
    unint64_t v27 = (int *)v15[6];
    if (v15[6]) {
      unint64_t v27 = (int *)((char *)v27 + (void)v14 + *(unsigned int *)((char *)v27 + (void)v14));
    }
  }
  uint64_t v41 = (unsigned __int16 *)((char *)v27 - *v27);
  if (*v41 >= 7u && (uint64_t v42 = v41[3]) != 0) {
    unsigned int v43 = *(unsigned __int16 *)((char *)v27 + v42);
  }
  else {
    unsigned int v43 = 0;
  }
  uint64_t v20 = v26 + 12 * v43;
LABEL_14:
  *(void *)(a1 + 16) = v20;
LABEL_28:
  if (v16 >= 9)
  {
    uint64_t v28 = v15[4];
    if (v28)
    {
      unint64_t v29 = (int *)((char *)v14 + v28 + *(unsigned int *)((char *)v14 + v28));
      int v30 = *v29;
      if (*v29)
      {
        uint8x8_t v31 = v29 + 1;
        *(void *)(a1 + 40) = v31;
        *(void *)(a1 + 48) = &v31[5 * v30];
      }
    }
  }
LABEL_32:
  int8x8_t v32 = *(void **)(a1 + 8);
  unint64_t v33 = *(void **)(a1 + 16);
  uint8x8_t v34 = v32;
  *(unsigned char *)(a1 + 72) = v32 == v33;
  if (v32 == v33)
  {
    uint8x8_t v34 = *(void **)(a1 + 24);
    *(void *)(a1 + 8) = v34;
    *(void *)(a1 + 40) = *(void *)(a1 + 56);
  }
  if (*(unsigned char *)(*(void *)a1 + 16))
  {
    uint64_t v35 = (void *)(v32 == v33 ? a1 + 32 : a1 + 16);
    if ((unint64_t)v34 < *v35)
    {
      while (1)
      {
        unint64_t v36 = __ROR8__(*v34, 32);
        BOOL v37 = HIDWORD(v36) != 1 || (v36 + 3) >= 2;
        if (!v37 || (sub_2AB7E4(**(void **)(*(void *)a1 + 4120)) & 1) != 0) {
          break;
        }
        uint64_t v38 = *(void **)(a1 + 16);
        uint8x8_t v34 = (void *)(*(void *)(a1 + 8) + 12);
        *(void *)(a1 + 8) = v34;
        *(void *)(a1 + 40) += 20;
        if (v34 == v38)
        {
          uint8x8_t v34 = *(void **)(a1 + 24);
          *(void *)(a1 + 8) = v34;
          *(void *)(a1 + 40) = *(void *)(a1 + 56);
          *(unsigned char *)(a1 + 72) = 1;
          if ((unint64_t)v34 >= *(void *)(a1 + 32)) {
            return a1;
          }
        }
        else
        {
          if (*(unsigned char *)(a1 + 72)) {
            int v39 = (void *)(a1 + 32);
          }
          else {
            int v39 = (void *)(a1 + 16);
          }
          if ((unint64_t)v34 >= *v39) {
            return a1;
          }
        }
      }
    }
  }
  return a1;
}

void *sub_BFD5D4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  int v4 = *(_DWORD *)(a2 + 160);
  if (v4 == 1)
  {
    sub_44479C(a1, a2);
  }
  else if (!v4)
  {
    *(void *)a1 = *(void *)a2;
  }
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  uint64_t result = (void *)(a1 + 176);
  int v6 = (void *)(a2 + 176);
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a2 + 336);
  int v7 = *(_DWORD *)(a2 + 336);
  if (v7 == 1)
  {
    uint64_t result = (void *)sub_44479C((uint64_t)result, (uint64_t)v6);
  }
  else if (!v7)
  {
    *uint64_t result = *v6;
  }
  *(unsigned char *)(a1 + 344) = *(unsigned char *)(a2 + 344);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  uint64_t v8 = *(void *)(a2 + 368);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a1 + 368) = v8;
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a2 + 360) = 0;
  *(void *)(a2 + 368) = 0;
  *(void *)(a2 + 376) = 0;
  *(_DWORD *)(a1 + 384) = *(_DWORD *)(a2 + 384);
  return result;
}

uint64_t sub_BFD69C(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xED6866F8D962AE7BLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x2DC3EED6866F8DLL) {
    sub_2E00();
  }
  if (0xDAD0CDF1B2C55CF6 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xDAD0CDF1B2C55CF6 * ((a1[2] - *a1) >> 3);
  }
  if (0xED6866F8D962AE7BLL * ((a1[2] - *a1) >> 3) >= 0x16E1F76B4337C6) {
    unint64_t v6 = 0x2DC3EED6866F8DLL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x2DC3EED6866F8DLL) {
      sub_188D718();
    }
    int v7 = (char *)operator new(1432 * v6);
  }
  else
  {
    int v7 = 0;
  }
  uint64_t v8 = (uint64_t)&v7[1432 * v3];
  uint64_t v9 = &v7[1432 * v6];
  *(_DWORD *)(v8 + 1424) = -1;
  sub_BFD5D4(v8, a2);
  *(_DWORD *)(v8 + 1424) = 0;
  uint64_t v10 = v8 + 1432;
  uint64_t v12 = (char *)*a1;
  unint64_t v11 = (char *)a1[1];
  if (v11 == (char *)*a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = (uint64_t)v9;
    if (!v11) {
      return v8 + 1432;
    }
    goto LABEL_29;
  }
  uint64_t v13 = 0;
  do
  {
    uint8x8_t v15 = (void *)(v8 + v13 - 1432);
    unsigned int v16 = &v11[v13 - 1432];
    *(_DWORD *)(v8 + v13 - 8) = *(_DWORD *)&v11[v13 - 8];
    int v17 = *(_DWORD *)&v11[v13 - 8];
    switch(v17)
    {
      case 2:
        sub_A0E244((uint64_t)v15, (uint64_t)v16);
        break;
      case 1:
        uint64_t v14 = *(void *)v16;
        *(_DWORD *)(v8 + v13 - 1424) = *(_DWORD *)&v11[v13 - 1424];
        void *v15 = v14;
        break;
      case 0:
        sub_BE6528((uint64_t)v15, (uint64_t)v16);
        break;
    }
    v13 -= 1432;
  }
  while (&v11[v13] != v12);
  unint64_t v18 = (char *)*a1;
  unint64_t v11 = (char *)a1[1];
  *a1 = v8 + v13;
  a1[1] = v10;
  a1[2] = (uint64_t)v9;
  if (v11 != v18)
  {
    do
    {
      int v19 = *((_DWORD *)v11 - 2);
      v11 -= 1432;
      if (v19 == 2)
      {
        sub_9F6418((uint64_t)v11);
      }
      else if (!v19)
      {
        sub_9F636C((uint64_t)v11);
      }
    }
    while (v11 != v18);
    unint64_t v11 = v18;
  }
  if (v11) {
LABEL_29:
  }
    operator delete(v11);
  return v8 + 1432;
}

char *sub_BFD884(void **a1, uint64_t a2)
{
  unint64_t v4 = (char *)*a1;
  unint64_t v3 = (char *)a1[1];
  unint64_t v5 = 0xED6866F8D962AE7BLL * ((v3 - (unsigned char *)*a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x2DC3EED6866F8DLL) {
    sub_2E00();
  }
  if (0xDAD0CDF1B2C55CF6 * (((unsigned char *)a1[2] - v4) >> 3) > v6) {
    unint64_t v6 = 0xDAD0CDF1B2C55CF6 * (((unsigned char *)a1[2] - v4) >> 3);
  }
  if (0xED6866F8D962AE7BLL * (((unsigned char *)a1[2] - v4) >> 3) >= 0x16E1F76B4337C6) {
    unint64_t v6 = 0x2DC3EED6866F8DLL;
  }
  if (v6 > 0x2DC3EED6866F8DLL) {
    sub_188D718();
  }
  uint64_t v8 = 1432 * v6;
  uint64_t v9 = (char *)operator new(1432 * v6);
  uint64_t v10 = &v9[1432 * v5];
  unint64_t v11 = &v9[v8];
  *(void *)uint64_t v10 = *(void *)a2;
  *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
  *((_DWORD *)v10 + 356) = 1;
  uint64_t v12 = v10 + 1432;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
    if (!v3) {
      return v10 + 1432;
    }
    goto LABEL_25;
  }
  uint64_t v13 = 0;
  do
  {
    uint8x8_t v15 = &v10[v13 - 1432];
    unsigned int v16 = &v3[v13 - 1432];
    int v17 = *(_DWORD *)&v3[v13 - 8];
    *(_DWORD *)&v10[v13 - 8] = v17;
    switch(v17)
    {
      case 2:
        sub_A0E244((uint64_t)v15, (uint64_t)v16);
        break;
      case 1:
        uint64_t v14 = *(void *)v16;
        *(_DWORD *)&v10[v13 - 1424] = *(_DWORD *)&v3[v13 - 1424];
        *(void *)uint8x8_t v15 = v14;
        break;
      case 0:
        sub_BE6528((uint64_t)v15, (uint64_t)v16);
        break;
    }
    v13 -= 1432;
  }
  while (&v3[v13] != v4);
  unint64_t v18 = (char *)*a1;
  unint64_t v3 = (char *)a1[1];
  *a1 = &v10[v13];
  a1[1] = v12;
  a1[2] = v11;
  if (v3 != v18)
  {
    do
    {
      int v19 = *((_DWORD *)v3 - 2);
      v3 -= 1432;
      if (v19 == 2)
      {
        sub_9F6418((uint64_t)v3);
      }
      else if (!v19)
      {
        sub_9F636C((uint64_t)v3);
      }
    }
    while (v3 != v18);
    unint64_t v3 = v18;
  }
  if (v3) {
LABEL_25:
  }
    operator delete(v3);
  return v10 + 1432;
}

void *sub_BFDA58(uint64_t a1, uint64_t *a2, _OWORD *a3, uint64_t *a4)
{
  uint64_t v8 = *a2;
  unint64_t v9 = a2[1];
  unint64_t v10 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v11 = (((0xC4CEB9FE1A85EC53 * (v10 ^ (v10 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v10 ^ (v10 >> 33))) >> 33))
       + 0x388152A534) ^ 0xDEADBEEF;
  unint64_t v12 = 0xC4CEB9FE1A85EC53
      * ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) >> 33));
  unint64_t v13 = ((v12 ^ (v12 >> 33)) + (v11 << 6) + (v11 >> 2) + 2654435769u) ^ v11;
  unint64_t v14 = *(void *)(a1 + 8);
  if (v14)
  {
    uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      uint64_t v4 = ((v12 ^ (v12 >> 33)) + (v11 << 6) + (v11 >> 2) + 2654435769u) ^ v11;
      if (v13 >= v14) {
        uint64_t v4 = v13 % v14;
      }
    }
    else
    {
      uint64_t v4 = v13 & (v14 - 1);
    }
    unsigned int v16 = *(void **)(*(void *)a1 + 8 * v4);
    if (v16)
    {
      uint64_t result = (void *)*v16;
      if (*v16)
      {
        if (v15.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v20 = result[1];
            if (v20 == v13)
            {
              BOOL v21 = *((_DWORD *)result + 5) == HIDWORD(v8) && *((_DWORD *)result + 4) == v8;
              if (v21 && result[3] == v9) {
                return result;
              }
            }
            else if ((v20 & (v14 - 1)) != v4)
            {
              goto LABEL_33;
            }
            uint64_t result = (void *)*result;
            if (!result) {
              goto LABEL_33;
            }
          }
        }
        do
        {
          unint64_t v18 = result[1];
          if (v18 == v13)
          {
            BOOL v19 = *((_DWORD *)result + 5) == HIDWORD(v8) && *((_DWORD *)result + 4) == v8;
            if (v19 && result[3] == v9) {
              return result;
            }
          }
          else
          {
            if (v18 >= v14) {
              v18 %= v14;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
LABEL_33:
  unint64_t v36 = operator new(0x38uLL);
  *unint64_t v36 = 0;
  v36[1] = v13;
  *((_OWORD *)v36 + 1) = *a3;
  sub_BE7040(v36 + 4, a4);
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v14 || (float)(v23 * (float)v14) < v22)
  {
    BOOL v26 = 1;
    if (v14 >= 3) {
      BOOL v26 = (v14 & (v14 - 1)) != 0;
    }
    unint64_t v27 = v26 | (2 * v14);
    unint64_t v28 = vcvtps_u32_f32(v22 / v23);
    if (v27 <= v28) {
      size_t prime = v28;
    }
    else {
      size_t prime = v27;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v30 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v30) {
      goto LABEL_47;
    }
    if (prime < *(void *)&v30)
    {
      unint64_t v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v30 < 3uLL || (uint8x8_t v32 = (uint8x8_t)vcnt_s8(v30), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (prime <= v31) {
        size_t prime = v31;
      }
      if (prime < *(void *)&v30) {
LABEL_47:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v14 = *(void *)(a1 + 8);
    unint64_t v34 = v14 - 1;
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
      {
        uint64_t v4 = v13 % v14;
        float v24 = *(void **)(*(void *)a1 + 8 * (v13 % v14));
        uint64_t v25 = v36;
        if (v24) {
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v4 = v13;
        float v24 = *(void **)(*(void *)a1 + 8 * v13);
        uint64_t v25 = v36;
        if (v24) {
          goto LABEL_36;
        }
      }
    }
    else
    {
      uint64_t v4 = v34 & v13;
      float v24 = *(void **)(*(void *)a1 + 8 * (v34 & v13));
      uint64_t v25 = v36;
      if (v24) {
        goto LABEL_36;
      }
    }
LABEL_60:
    *uint64_t v25 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v36;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v36)
    {
      unint64_t v35 = *(void *)(*v36 + 8);
      if ((v14 & (v14 - 1)) != 0)
      {
        if (v35 >= v14) {
          v35 %= v14;
        }
      }
      else
      {
        v35 &= v14 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v35) = v36;
    }
    goto LABEL_71;
  }
  float v24 = *(void **)(*(void *)a1 + 8 * v4);
  uint64_t v25 = v36;
  if (!v24) {
    goto LABEL_60;
  }
LABEL_36:
  *uint64_t v25 = *v24;
  *float v24 = v36;
LABEL_71:
  uint64_t result = v36;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_BFDE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_BFDE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_BFDE88(uint64_t a1)
{
  return a1 - 1432;
}

void sub_BFDE94()
{
  unk_25DFF57 = 16641;
  word_25DFF40 = 65;
  byte_25DFF6F = 1;
  byte_25DFF59 = 0;
}

uint64_t sub_BFDEBC(uint64_t a1, void *a2)
{
  HIBYTE(v24[2]) = 9;
  strcpy((char *)v24, "algorithm");
  uint64_t v4 = sub_561B0(a2, (uint64_t)v24);
  int v5 = sub_BE4368(v4);
  if (SHIBYTE(v24[2]) < 0) {
    operator delete(v24[0]);
  }
  *(_DWORD *)a1 = v5;
  v24[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v24[1] = xmmword_20B91A0;
  strcpy(v24[0], "cost_function_name_transfer");
  uint64_t v6 = sub_561B0(a2, (uint64_t)v24);
  if (*(char *)(v6 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 8), *(void **)v6, *(void *)(v6 + 8));
  }
  else
  {
    long long v7 = *(_OWORD *)v6;
    *(void *)(a1 + 24) = *(void *)(v6 + 16);
    *(_OWORD *)(a1 + 8) = v7;
  }
  float v22 = operator new(0x20uLL);
  long long v23 = xmmword_20B5EB0;
  strcpy((char *)v22, "cost_function_name_initial");
  uint64_t v8 = sub_561B0(a2, (uint64_t)&v22);
  if (*(char *)(v8 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 32), *(void **)v8, *(void *)(v8 + 8));
  }
  else
  {
    long long v9 = *(_OWORD *)v8;
    *(void *)(a1 + 48) = *(void *)(v8 + 16);
    *(_OWORD *)(a1 + 32) = v9;
  }
  uint64_t v20 = operator new(0x20uLL);
  long long v21 = xmmword_20B91C0;
  strcpy((char *)v20, "cost_function_name_final");
  uint64_t v10 = sub_561B0(a2, (uint64_t)&v20);
  if (*(char *)(v10 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 56), *(void **)v10, *(void *)(v10 + 8));
  }
  else
  {
    long long v11 = *(_OWORD *)v10;
    *(void *)(a1 + 72) = *(void *)(v10 + 16);
    *(_OWORD *)(a1 + 56) = v11;
  }
  __p = operator new(0x20uLL);
  long long v19 = xmmword_20B8870;
  strcpy((char *)__p, "cost_function_name_direct");
  uint64_t v12 = sub_561B0(a2, (uint64_t)&__p);
  if (*(char *)(v12 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 80), *(void **)v12, *(void *)(v12 + 8));
  }
  else
  {
    long long v13 = *(_OWORD *)v12;
    *(void *)(a1 + 96) = *(void *)(v12 + 16);
    *(_OWORD *)(a1 + 80) = v13;
  }
  if (SHIBYTE(v19) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v21) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v23) & 0x80000000) == 0) {
        goto LABEL_18;
      }
LABEL_23:
      operator delete(v22);
      if ((SHIBYTE(v24[2]) & 0x80000000) == 0) {
        goto LABEL_19;
      }
      goto LABEL_24;
    }
  }
  else if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(v20);
  if (SHIBYTE(v23) < 0) {
    goto LABEL_23;
  }
LABEL_18:
  if ((SHIBYTE(v24[2]) & 0x80000000) == 0) {
    goto LABEL_19;
  }
LABEL_24:
  operator delete(v24[0]);
LABEL_19:
  HIBYTE(v24[2]) = 18;
  strcpy((char *)v24, "eta_evaluator_name");
  uint64_t v14 = sub_561B0(a2, (uint64_t)v24);
  if (*(char *)(v14 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 104), *(void **)v14, *(void *)(v14 + 8));
  }
  else
  {
    long long v15 = *(_OWORD *)v14;
    *(void *)(a1 + 120) = *(void *)(v14 + 16);
    *(_OWORD *)(a1 + 104) = v15;
  }
  if (SHIBYTE(v24[2]) < 0) {
    operator delete(v24[0]);
  }
  v24[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v24[1] = xmmword_20B9280;
  strcpy(v24[0], "confine_paths_to_available_regions");
  BOOL v16 = sub_29D62C(a2, (uint64_t)v24);
  if (SHIBYTE(v24[2]) < 0) {
    operator delete(v24[0]);
  }
  *(unsigned char *)(a1 + 128) = v16;
  return a1;
}

void sub_BFE20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (*(char *)(v27 - 41) < 0) {
    operator delete(*(void **)(v27 - 64));
  }
  if (*(char *)(v25 + 127) < 0) {
    operator delete(*v26);
  }
  sub_BFE374(v24);
  _Unwind_Resume(a1);
}

void sub_BFE28C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if (a21 < 0)
    {
LABEL_5:
      operator delete(a16);
      if ((a27 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if (a21 < 0)
  {
    goto LABEL_5;
  }
  if ((a27 & 0x80000000) == 0)
  {
LABEL_6:
    if (*(char *)(v29 - 41) < 0) {
      goto LABEL_7;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a22);
  if (*(char *)(v29 - 41) < 0)
  {
LABEL_7:
    operator delete(*(void **)(v29 - 64));
    if (v27 == v28) {
      goto LABEL_12;
    }
    goto LABEL_14;
  }
LABEL_11:
  if (v27 == v28) {
    goto LABEL_12;
  }
  do
  {
LABEL_14:
    if (*(char *)(v28 - 1) < 0) {
      operator delete(*(void **)(v28 - 24));
    }
    v28 -= 24;
  }
  while (v28 != v27);
LABEL_12:
  _Unwind_Resume(a1);
}

void sub_BFE2E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if ((a18 & 0x80000000) == 0) {
    JUMPOUT(0xBFE2ECLL);
  }
  operator delete(a13);
  if ((a24 & 0x80000000) == 0)
  {
    if (*(char *)(v26 - 41) < 0)
    {
      operator delete(*(void **)(v26 - 64));
      if (v24 == v25) {
        JUMPOUT(0xBFE30CLL);
      }
      JUMPOUT(0xBFE320);
    }
    JUMPOUT(0xBFE304);
  }
  JUMPOUT(0xBFE2F4);
}

void sub_BFE334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    JUMPOUT(0xBFE2F4);
  }
  JUMPOUT(0xBFE2C4);
}

void sub_BFE344()
{
  if (*(char *)(v0 - 41) < 0) {
    JUMPOUT(0xBFE2CCLL);
  }
  JUMPOUT(0xBFE304);
}

void sub_BFE358(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 41) < 0)
  {
    operator delete(*(void **)(v1 - 64));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0xBFE30CLL);
}

uint64_t sub_BFE374(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
  {
    operator delete(*(void **)(a1 + 72));
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(*(void **)(a1 + 24));
      if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
        return a1;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
    return a1;
  }
LABEL_9:
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_BFE400(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  char v10 = 9;
  strcpy((char *)__p, "on_street");
  long long v7 = (void *)sub_560F4(a4, (uint64_t)__p);
  sub_BFDEBC(a1, v7);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 136) = a2;
  *(void *)(a1 + 144) = a3;
  *(_DWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  return a1;
}

void sub_BFE4A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_BFE4BC(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
  {
    uint64_t v5 = i[4];
    uint64_t v6 = i[5];
    unsigned int v7 = 1;
    while (v5 != v6)
    {
      if (v7)
      {
        int v8 = *(_DWORD *)(v5 + 1424);
        if (v8)
        {
          if (v8 == 2)
          {
            if (*(unsigned char *)(v5 + 1408)) {
              unsigned int v7 = 1;
            }
            else {
              unsigned int v7 = sub_BFEA30(a1, v5);
            }
            v5 += 1432;
          }
          else
          {
            unsigned int v7 = v8 == 1;
            v5 += 1432;
          }
        }
        else
        {
          if (*(void *)(v5 + 360) == *(void *)(v5 + 368)) {
            unsigned int v7 = sub_BFE5A8(a1, v5);
          }
          else {
            unsigned int v7 = 1;
          }
          v5 += 1432;
        }
      }
      else
      {
        unsigned int v7 = 0;
        v5 += 1432;
      }
    }
    double result = *(double *)(a1 + 216) + (double)v7;
    *(double *)(a1 + 216) = result;
  }
  return result;
}

uint64_t sub_BFE5A8(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 168);
  uint64_t v5 = *(void *)(a1 + 144);
  uint64_t v6 = *(void *)a2;
  if (v4)
  {
    unsigned int v7 = (int *)sub_498D5C(*(void *)(v5 + 4120) + 24, __ROR8__(v6, 32), 0, "stop");
    int v8 = (unsigned __int16 *)((char *)v7 - *v7);
    if (*v8 >= 0xDu && (unsigned __int16 v9 = v8[6]) != 0) {
      unint64_t v10 = *(unsigned int *)((char *)v7 + v9 + 4) | ((unint64_t)*(unsigned int *)((char *)v7 + v9) << 32);
    }
    else {
      unint64_t v10 = 0xFFFFFFFFLL;
    }
    long long v11 = (uint64_t *)operator new(8uLL);
    *long long v11 = v10;
    uint64_t v12 = v11 + 1;
    uint64_t v27 = v11 + 1;
    uint64_t v28 = v11 + 1;
    uint64_t v26 = v11;
    while (1)
    {
LABEL_11:
      uint64_t v31 = *v11;
      long long v13 = (int *)sub_8ED928(*(void *)(*(void *)(a1 + 144) + 4112) + 24, __ROR8__(v31, 32), 0, "station");
      uint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
      if (*v14 < 0xBu) {
        goto LABEL_10;
      }
      uint64_t v15 = v14[5];
      if (!v15 || !*(int *)((char *)v13 + v15 + *(unsigned int *)((char *)v13 + v15))) {
        goto LABEL_10;
      }
      sub_725D0((uint64_t)v30);
      BOOL v16 = *(void **)(a1 + 144);
      int v17 = sub_398110(v16[509] + 24, 0);
      unint64_t v18 = &v17[-*(int *)v17];
      int v20 = *(unsigned __int16 *)v18 >= 0x13u && (v19 = *((unsigned __int16 *)v18 + 9)) != 0 && v17[v19] != 0;
      sub_BE98B4((uint64_t)v29, v16, &v31, v20, 0, 0);
      sub_BE98B8((uint64_t)v29, a2, a2 + 176, &v32);
      sub_BFF2C4(v29);
      *(double *)(a1 + 168) = sub_72688((uint64_t)v30) + *(double *)(a1 + 168);
      *(double *)(a1 + 280) = *(double *)(a1 + 280) + 1.0;
      if (v32 == -1) {
        break;
      }
      int v21 = *(_DWORD *)(a2 + 384);
      if (v21 != 0x7FFFFFFF && v54 > v21) {
        break;
      }
      sub_BE7D3C(a2, (uint64_t)v33);
      *(unsigned char *)(a2 + 168) = v41;
      sub_BE7D3C(a2 + 176, (uint64_t)&v42);
      *(unsigned char *)(a2 + 344) = v50;
      *(void *)(a2 + 352) = v51;
      if (v33 != (unsigned char *)a2) {
        sub_326C0((void *)(a2 + 360), (char *)__p, *(char **)v53, (uint64_t)(*(void *)v53 - (void)__p) >> 3);
      }
      *(_DWORD *)(a2 + 384) = v54;
      char v22 = 1;
      long long v23 = __p;
      if (__p) {
        goto LABEL_22;
      }
LABEL_23:
      if (v49 == 1)
      {
        if (v47)
        {
          int v48 = v47;
          operator delete(v47);
        }
        if (v45)
        {
          uint64_t v46 = v45;
          operator delete(v45);
        }
        if (v43)
        {
          char v44 = v43;
          operator delete(v43);
        }
      }
      if (v40 == 1)
      {
        if (v38)
        {
          int v39 = v38;
          operator delete(v38);
        }
        if (v36)
        {
          BOOL v37 = v36;
          operator delete(v36);
        }
        if (v34)
        {
          unint64_t v35 = v34;
          operator delete(v34);
        }
      }
      if (v22)
      {
        uint64_t v24 = 1;
        uint64_t v12 = (uint64_t *)v26;
        if (v26) {
          goto LABEL_42;
        }
        return v24;
      }
LABEL_10:
      if (++v11 == v12)
      {
        uint64_t v24 = 0;
        uint64_t v12 = (uint64_t *)v26;
        if (!v26) {
          return v24;
        }
        goto LABEL_42;
      }
    }
    char v22 = 0;
    long long v23 = __p;
    if (!__p) {
      goto LABEL_23;
    }
LABEL_22:
    *(void *)int v53 = v23;
    operator delete(v23);
    goto LABEL_23;
  }
  sub_B8CC48((void *)(v5 + 4008), v6, (uint64_t)&v26);
  long long v11 = (uint64_t *)v26;
  uint64_t v12 = v27;
  if (v26 != v27) {
    goto LABEL_11;
  }
  uint64_t v24 = 0;
  if (v27)
  {
LABEL_42:
    uint64_t v27 = v12;
    operator delete(v12);
  }
  return v24;
}

void sub_BFE944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  uint64_t v12 = (void *)STACK[0x3B0];
  if (STACK[0x3B0])
  {
    STACK[0x3B8] = (unint64_t)v12;
    operator delete(v12);
  }
  if (LODWORD(STACK[0x398]) == 1)
  {
    long long v13 = (void *)STACK[0x378];
    if (STACK[0x378])
    {
      STACK[0x380] = (unint64_t)v13;
      operator delete(v13);
      uint64_t v14 = (void *)STACK[0x360];
      if (!STACK[0x360])
      {
LABEL_6:
        uint64_t v15 = (void *)STACK[0x340];
        if (!STACK[0x340]) {
          goto LABEL_8;
        }
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v14 = (void *)STACK[0x360];
      if (!STACK[0x360]) {
        goto LABEL_6;
      }
    }
    STACK[0x368] = (unint64_t)v14;
    operator delete(v14);
    uint64_t v15 = (void *)STACK[0x340];
    if (STACK[0x340])
    {
LABEL_7:
      STACK[0x348] = (unint64_t)v15;
      operator delete(v15);
    }
  }
LABEL_8:
  if (LODWORD(STACK[0x2E8]) != 1) {
    goto LABEL_19;
  }
  BOOL v16 = (void *)STACK[0x2C8];
  if (STACK[0x2C8])
  {
    STACK[0x2D0] = (unint64_t)v16;
    operator delete(v16);
    int v17 = (void *)STACK[0x2B0];
    if (!STACK[0x2B0])
    {
LABEL_11:
      unint64_t v18 = (void *)STACK[0x290];
      if (!STACK[0x290])
      {
LABEL_19:
        if (!a11) {
          _Unwind_Resume(a1);
        }
        operator delete(a11);
        _Unwind_Resume(a1);
      }
LABEL_18:
      STACK[0x298] = (unint64_t)v18;
      operator delete(v18);
      goto LABEL_19;
    }
  }
  else
  {
    int v17 = (void *)STACK[0x2B0];
    if (!STACK[0x2B0]) {
      goto LABEL_11;
    }
  }
  STACK[0x2B8] = (unint64_t)v17;
  operator delete(v17);
  unint64_t v18 = (void *)STACK[0x290];
  if (!STACK[0x290]) {
    goto LABEL_19;
  }
  goto LABEL_18;
}

BOOL sub_BFEA30(uint64_t a1, uint64_t a2)
{
  sub_725D0((uint64_t)v40);
  if (*(unsigned char *)(a2 + 168) == 3)
  {
    if (*(unsigned char *)(a2 + 344) == 3)
    {
LABEL_3:
      unsigned int v4 = 3;
      goto LABEL_15;
    }
    unsigned int v4 = 1;
LABEL_9:
    if (*(_DWORD *)(a2 + 180) != 1) {
      goto LABEL_15;
    }
    goto LABEL_10;
  }
  if (*(_DWORD *)(a2 + 4) == 1)
  {
    unsigned int v4 = *(_DWORD *)a2 == -2;
    if (*(unsigned char *)(a2 + 344) != 3) {
      goto LABEL_9;
    }
    if (*(_DWORD *)a2 == -2) {
      goto LABEL_3;
    }
LABEL_14:
    unsigned int v4 = 2;
    goto LABEL_15;
  }
  if (*(unsigned char *)(a2 + 344) == 3) {
    goto LABEL_14;
  }
  unsigned int v4 = 0;
  if (*(_DWORD *)(a2 + 180) == 1)
  {
LABEL_10:
    if (*(_DWORD *)(a2 + 176) != -3) {
      goto LABEL_15;
    }
    if (v4) {
      goto LABEL_3;
    }
    goto LABEL_14;
  }
LABEL_15:
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v30 = 0;
  uint64_t v31 = -1;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  int v32 = 0;
  char v35 = 0;
  uint64_t v36 = 0x7FFFFFFFLL;
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&v37.__r_.__value_.__r.__words[1] = xmmword_20B9250;
  strcpy(v37.__r_.__value_.__l.__data_, "transit_initial_walking");
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v38.__r_.__value_.__r.__words[1] = xmmword_20B9800;
  strcpy(v38.__r_.__value_.__l.__data_, "cost_function_based_evaluation");
  int v39 = 16843008;
  HIDWORD(v36) = *(_DWORD *)a1;
  std::string::operator=(&v37, (const std::string *)(a1 + 24 * v4 + 8));
  std::string::operator=(&v38, (const std::string *)(a1 + 104));
  LOBYTE(v39) = 1;
  HIBYTE(v39) = *(unsigned char *)(a1 + 128);
  if (v4 == 2)
  {
    char v35 = 1;
    sub_BF5238(*(void **)(a1 + 144), *(void **)(a1 + 136), a2 + 176, 0, 1, (uint64_t)v41);
    *(_OWORD *)__p = *(_OWORD *)v41;
    uint64_t v30 = v42;
    uint64_t v31 = v43;
    sub_BF5238(*(void **)(a1 + 144), *(void **)(a1 + 136), a2, 0, 1, (uint64_t)v41);
  }
  else
  {
    char v35 = 0;
    sub_BF5238(*(void **)(a1 + 144), *(void **)(a1 + 136), a2, 0, 1, (uint64_t)v41);
    *(_OWORD *)__p = *(_OWORD *)v41;
    uint64_t v30 = v42;
    uint64_t v31 = v43;
    sub_BF5238(*(void **)(a1 + 144), *(void **)(a1 + 136), a2 + 176, 0, 1, (uint64_t)v41);
  }
  sub_BFF3C0((uint64_t)&v32, (uint64_t)v41, (uint64_t)&v44, 1uLL);
  if (v41[0])
  {
    v41[1] = v41[0];
    operator delete(v41[0]);
  }
  sub_BEE314((uint64_t)v28, *(void *)(a1 + 136));
  sub_BEE320((uint64_t)v28, (uint64_t)__p);
  sub_C55754(a1 + 152, (uint64_t *)&v26);
  *(double *)(a1 + 256) = *(double *)(a1 + 256) + 1.0;
  *(double *)(a1 + 184) = sub_72688((uint64_t)v40) + *(double *)(a1 + 184);
  uint64_t v5 = (char *)v26;
  uint64_t v6 = v27;
  if (v26 != v27)
  {
    int v7 = *(_DWORD *)(a2 + 1416);
    if (v7 != 0x7FFFFFFF && *((_DWORD *)v26 + 10) > v7 && sub_723EC(1u))
    {
      sub_6BAC((uint64_t)v41);
      sub_188FC78(v41, (uint64_t)"Point-to-point algorithm duration increased from ", 49);
      int v8 = (void *)std::ostream::operator<<();
      sub_188FC78(v8, (uint64_t)" dsec to ", 9);
      unsigned __int16 v9 = (void *)std::ostream::operator<<();
      sub_188FC78(v9, (uint64_t)" dsec whilst unpacking on-street path segment", 45);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v24, 1u);
      if (v25 < 0) {
        operator delete(v24[0]);
      }
      if (v46 < 0) {
        operator delete(v45);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    uint64_t v10 = a2 + 352;
    if (v5[1104])
    {
      uint64_t v11 = (uint64_t)(v5 + 48);
      if (*(unsigned char *)(a2 + 1408))
      {
        sub_471250(v10, v11);
        goto LABEL_33;
      }
      sub_7A3ACC(v10, v11);
      char v12 = 1;
    }
    else
    {
      if (!*(unsigned char *)(a2 + 1408)) {
        goto LABEL_33;
      }
      sub_3AFFFC(v10);
      char v12 = 0;
    }
    *(unsigned char *)(a2 + 1408) = v12;
LABEL_33:
    *(_DWORD *)(a2 + 1416) = *((_DWORD *)v5 + 10);
    goto LABEL_40;
  }
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)v41);
    sub_188FC78(v41, (uint64_t)"Could not unpack on-street walking path segment: point-to-point algorithm did not return any path", 97);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v24, 3u);
    if (v25 < 0) {
      operator delete(v24[0]);
    }
    if (v46 < 0) {
      operator delete(v45);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
LABEL_40:
  long long v13 = (char *)v26;
  if (v26)
  {
    uint64_t v14 = v27;
    uint64_t v15 = v26;
    if (v27 != v26)
    {
      do
      {
        if (*(v14 - 8))
        {
          sub_3AFFFC((uint64_t)(v14 - 1064));
          *(v14 - 8) = 0;
        }
        v14 -= 1112;
      }
      while (v14 != v13);
      uint64_t v15 = v26;
    }
    uint64_t v27 = v13;
    operator delete(v15);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v38.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_49:
      BOOL v16 = (char *)v32;
      if (v32) {
        goto LABEL_50;
      }
LABEL_60:
      char v22 = __p[0];
      if (!__p[0]) {
        return v5 != v6;
      }
LABEL_61:
      __p[1] = v22;
      operator delete(v22);
      return v5 != v6;
    }
  }
  else if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_49;
  }
  operator delete(v37.__r_.__value_.__l.__data_);
  BOOL v16 = (char *)v32;
  if (!v32) {
    goto LABEL_60;
  }
LABEL_50:
  int v17 = v33;
  unint64_t v18 = v16;
  if (v33 != v16)
  {
    uint64_t v19 = v33;
    do
    {
      int v21 = (void *)*((void *)v19 - 4);
      v19 -= 32;
      int v20 = v21;
      if (v21)
      {
        *((void *)v17 - 3) = v20;
        operator delete(v20);
      }
      int v17 = v19;
    }
    while (v19 != v16);
    unint64_t v18 = v32;
  }
  uint64_t v33 = v16;
  operator delete(v18);
  char v22 = __p[0];
  if (__p[0]) {
    goto LABEL_61;
  }
  return v5 != v6;
}

void sub_BFF14C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a46);
  sub_BE5DE8(&a15);
  sub_BE5E58((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_BFF1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44)
{
  if (__p)
  {
    a44 = (uint64_t)__p;
    operator delete(__p);
    sub_BE5E58((uint64_t)&a23);
    _Unwind_Resume(a1);
  }
  sub_BE5E58((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_BFF1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_BE5E58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_BFF204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_BE5E58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_BFF21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_BE5E58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_BFF230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_BE5E58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_BFF244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  operator delete(v27);
  if (a27) {
    sub_20AEA38();
  }
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_BFF294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  sub_BE5DE8((void **)va);
  sub_BE5E58((uint64_t)va1);
  _Unwind_Resume(a1);
}

void *sub_BFF2C4(void *a1)
{
  uint64_t v2 = (void *)a1[60];
  if (v2)
  {
    do
    {
      uint64_t v14 = (void *)*v2;
      uint64_t v15 = (void *)v2[3];
      if (v15)
      {
        v2[4] = v15;
        operator delete(v15);
      }
      operator delete(v2);
      uint64_t v2 = v14;
    }
    while (v14);
  }
  unint64_t v3 = (void *)a1[58];
  a1[58] = 0;
  if (v3) {
    operator delete(v3);
  }
  unsigned int v4 = (void *)a1[55];
  if (v4)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      operator delete(v4);
      unsigned int v4 = v5;
    }
    while (v5);
  }
  uint64_t v6 = (void *)a1[53];
  a1[53] = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[50];
  if (v7)
  {
    a1[51] = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)a1[46];
  if (v8)
  {
    a1[47] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)a1[43];
  if (v9)
  {
    a1[44] = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)a1[37];
  if (v10)
  {
    a1[38] = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)a1[36];
  if (v11) {
    free(v11);
  }
  sub_BE1DEC((uint64_t)(a1 + 4));
  uint64_t v12 = (void *)a1[1];
  if (v12)
  {
    a1[2] = v12;
    operator delete(v12);
  }
  return a1;
}

void sub_BFF3C0(uint64_t a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v10 = *(char **)a1;
  if (__sz > (v8 - *(void *)a1) >> 5)
  {
    if (v10)
    {
      uint64_t v11 = *(char **)(a1 + 8);
      uint64_t v12 = *(char **)a1;
      if (v11 != v10)
      {
        uint64_t v13 = *(char **)(a1 + 8);
        do
        {
          uint64_t v15 = (void *)*((void *)v13 - 4);
          v13 -= 32;
          uint64_t v14 = v15;
          if (v15)
          {
            *((void *)v11 - 3) = v14;
            operator delete(v14);
          }
          uint64_t v11 = v13;
        }
        while (v13 != v10);
        uint64_t v12 = *(char **)a1;
      }
      *(void *)(a1 + 8) = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz >> 59) {
      goto LABEL_39;
    }
    uint64_t v21 = v8 >> 4;
    if (v8 >> 4 <= __sz) {
      uint64_t v21 = __sz;
    }
    BOOL v22 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    unint64_t v23 = 0x7FFFFFFFFFFFFFFLL;
    if (!v22) {
      unint64_t v23 = v21;
    }
    if (v23 >> 59) {
LABEL_39:
    }
      sub_2E00();
    uint64_t v24 = 4 * v23;
    char v25 = operator new(32 * v23);
    *(void *)a1 = v25;
    *(void *)(a1 + 8) = v25;
    *(void *)(a1 + 16) = &v25[v24];
    uint64_t v26 = sub_BEF668(v9, v6, a3, v25);
LABEL_30:
    *(void *)(a1 + 8) = v26;
    return;
  }
  uint64_t v16 = *(char **)(a1 + 8);
  unint64_t v17 = (v16 - v10) >> 5;
  if (v17 < __sz)
  {
    uint64_t v18 = a2 + 32 * v17;
    if (v16 != v10)
    {
      uint64_t v19 = 32 * v17;
      do
      {
        if ((char *)v6 != v10) {
          sub_BFF628(v10, *(char **)v6, *(char **)(v6 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 4));
        }
        *((void *)v10 + 3) = *(void *)(v6 + 24);
        v6 += 32;
        v10 += 32;
        v19 -= 32;
      }
      while (v19);
      uint64_t v10 = *(char **)(a1 + 8);
    }
    uint64_t v26 = sub_BEF668(v9, v18, a3, v10);
    goto LABEL_30;
  }
  if (a2 != a3)
  {
    int v20 = *(char **)a1;
    do
    {
      if ((char *)v6 != v10) {
        sub_BFF628(v10, *(char **)v6, *(char **)(v6 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 4));
      }
      *((void *)v10 + 3) = *(void *)(v6 + 24);
      v6 += 32;
      v10 += 32;
      v20 += 32;
    }
    while (v6 != a3);
    uint64_t v16 = *(char **)(a1 + 8);
    if (v16 == v20) {
      goto LABEL_38;
    }
    goto LABEL_34;
  }
  int v20 = *(char **)a1;
  if (v16 != v10)
  {
LABEL_34:
    uint64_t v27 = v16;
    do
    {
      uint64_t v29 = (void *)*((void *)v27 - 4);
      v27 -= 32;
      uint64_t v28 = v29;
      if (v29)
      {
        *((void *)v16 - 3) = v28;
        operator delete(v28);
      }
      uint64_t v16 = v27;
    }
    while (v27 != v20);
  }
LABEL_38:
  *(void *)(a1 + 8) = v20;
}

void sub_BFF618(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_BFF620(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *sub_BFF628(void *result, char *a2, char *a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *result) >> 4) >= __sz)
  {
    uint64_t v16 = (char **)(result + 1);
    unint64_t v17 = (char *)result[1];
    if (0xCCCCCCCCCCCCCCCDLL * ((v17 - v9) >> 4) >= __sz)
    {
      uint64_t v27 = *result;
      if (a2 != a3)
      {
        uint64_t v28 = *result;
        do
        {
          *(void *)uint64_t v28 = *(void *)v6;
          *(_OWORD *)(v28 + 8) = *(_OWORD *)(v6 + 8);
          long long v29 = *(_OWORD *)(v6 + 24);
          long long v30 = *(_OWORD *)(v6 + 40);
          long long v31 = *(_OWORD *)(v6 + 56);
          *(void *)(v28 + 71) = *(void *)(v6 + 71);
          *(_OWORD *)(v28 + 56) = v31;
          *(_OWORD *)(v28 + 40) = v30;
          *(_OWORD *)(v28 + 24) = v29;
          v27 += 80;
          v6 += 80;
          v28 += 80;
        }
        while (v6 != a3);
      }
      int64_t v15 = v27 - (void)v9;
    }
    else
    {
      uint64_t v18 = &a2[16 * ((v17 - v9) >> 4)];
      if (v17 != v9)
      {
        do
        {
          *(void *)uint64_t v9 = *(void *)v6;
          *(_OWORD *)(v9 + 8) = *(_OWORD *)(v6 + 8);
          long long v19 = *(_OWORD *)(v6 + 24);
          long long v20 = *(_OWORD *)(v6 + 40);
          long long v21 = *(_OWORD *)(v6 + 56);
          *(void *)(v9 + 71) = *(void *)(v6 + 71);
          *(_OWORD *)(v9 + 56) = v21;
          *(_OWORD *)(v9 + 40) = v20;
          *(_OWORD *)(v9 + 24) = v19;
          v6 += 80;
          v9 += 80;
        }
        while (v6 != v18);
        uint64_t v9 = *v16;
      }
      BOOL v22 = v9;
      if (v18 != a3)
      {
        BOOL v22 = v9;
        unint64_t v23 = v9;
        do
        {
          *(_OWORD *)unint64_t v23 = *(_OWORD *)v18;
          long long v24 = *((_OWORD *)v18 + 1);
          long long v25 = *((_OWORD *)v18 + 2);
          long long v26 = *((_OWORD *)v18 + 4);
          *((_OWORD *)v23 + 3) = *((_OWORD *)v18 + 3);
          *((_OWORD *)v23 + 4) = v26;
          *((_OWORD *)v23 + 1) = v24;
          *((_OWORD *)v23 + 2) = v25;
          v18 += 80;
          v23 += 80;
          v22 += 80;
        }
        while (v18 != a3);
      }
      int64_t v15 = v22 - v9;
    }
  }
  else
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x333333333333333) {
      goto LABEL_27;
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 4);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0x199999999999999 ? 0x333333333333333 : v11;
    if (v12 > 0x333333333333333) {
LABEL_27:
    }
      sub_2E00();
    uint64_t v13 = 10 * v12;
    double result = operator new(80 * v12);
    uint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    uint64_t v14 = (char *)result;
    if (v6 != a3)
    {
      double result = memcpy(result, v6, 80 * ((a3 - v6 - 80) / 0x50uLL) + 80);
      uint64_t v14 = &v9[80 * ((a3 - v6 - 80) / 0x50uLL) + 80];
    }
    int64_t v15 = v14 - v9;
    uint64_t v16 = (char **)(v7 + 1);
  }
  char *v16 = &v9[v15];
  return result;
}

void sub_BFF87C()
{
  unk_25DFF87 = 16641;
  word_25DFF70 = 65;
  byte_25DFF9F = 1;
  byte_25DFF89 = 0;
}

double sub_BFF8A4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  return result;
}

void sub_BFF8C4(uint64_t *a1, void *a2)
{
  *(_OWORD *)int v60 = 0u;
  *(_OWORD *)BOOL v61 = 0u;
  int v62 = 1065353216;
  *(_OWORD *)int v57 = 0u;
  *(_OWORD *)char v58 = 0u;
  int v59 = 1065353216;
  sub_BF3F98((uint64_t)&v55, (uint64_t)(a2 + 9));
  unint64_t v3 = (void **)v56;
  if (!v56) {
    goto LABEL_89;
  }
  unsigned int v4 = a2 + 1;
  while (2)
  {
    unint64_t v5 = *((unsigned int *)v3 + 4);
    uint64_t v6 = sub_BE601C(v4, v5);
    uint64_t v7 = (uint64_t **)v6;
    if (*(unsigned char *)(v6 + 1624)) {
      goto LABEL_4;
    }
    if (*(unsigned char *)(v6 + 168))
    {
      if (*(unsigned char *)(v6 + 168) != 1) {
        goto LABEL_4;
      }
      sub_C0005C((uint64_t)a2, v5);
      uint64_t v8 = (int *)sub_4992B0(*(void *)(*a1 + 4104) + 24, __ROR8__(*v7, 32), 0, "road access point");
      uint64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
      if (*v9 >= 0xBu && (uint64_t v10 = v9[5]) != 0) {
        int v11 = 10 * *(int *)((char *)v8 + v10);
      }
      else {
        int v11 = 0;
      }
      long long v31 = (int *)sub_4992B0(*(void *)(*a1 + 4104) + 24, __ROR8__(*v7, 32), 0, "road access point");
      int v32 = (unsigned __int16 *)((char *)v31 - *v31);
      if (*v32 >= 7u && (unsigned __int16 v33 = v32[3]) != 0) {
        unint64_t v34 = *(unsigned int *)((char *)v31 + v33 + 4) | ((unint64_t)*(unsigned int *)((char *)v31 + v33) << 32);
      }
      else {
        unint64_t v34 = 0xFFFFFFFFLL;
      }
      uint64_t v52 = (unsigned int *)v34;
      int v66 = &v52;
      char v35 = sub_C0098C((uint64_t)v60, (uint64_t *)&v52, (uint64_t)&unk_20F06E0, &v66);
      int v36 = *(_DWORD *)(sub_BE601C(v4, v5) + 176) + v11;
      v85[0] = v52;
      int v92 = 0;
      char v93 = 0;
      std::string v37 = *v7;
      unint64_t v38 = *((unsigned int *)v35 + 6);
      if (v38 == -1)
      {
        int v66 = (unsigned int **)*v7;
        LODWORD(v67) = v11;
        int v84 = 1;
        *((_DWORD *)v35 + 6) = sub_C00134(a2, (uint64_t)v85, v36, (uint64_t)&v66, v5, 0);
        int v40 = v84;
        if (v84 == 2) {
          goto LABEL_59;
        }
      }
      else
      {
        if (v36 >= *(_DWORD *)(sub_BE601C(v4, v38) + 176)) {
          goto LABEL_78;
        }
        unsigned int v39 = *((_DWORD *)v35 + 6);
        int v66 = (unsigned int **)v37;
        LODWORD(v67) = v11;
        int v84 = 1;
        sub_C00294(a2, v39, (uint64_t)v85, v36, (uint64_t)&v66, v5, 0);
        int v40 = v84;
        if (v84 == 2)
        {
LABEL_59:
          sub_9F6418((uint64_t)&v66);
          goto LABEL_78;
        }
      }
      if (!v40)
      {
        if (v82)
        {
          uint64_t v83 = v82;
          operator delete(v82);
        }
        if (v81 == 1)
        {
          if (v79)
          {
            v80 = v79;
            operator delete(v79);
          }
          if (v77)
          {
            unint64_t v78 = v77;
            operator delete(v77);
          }
          if (v75)
          {
            long long v76 = v75;
            operator delete(v75);
          }
        }
        if (v74 == 1)
        {
          if (v72)
          {
            int v73 = v72;
            operator delete(v72);
          }
          if (v70)
          {
            int v71 = v70;
            operator delete(v70);
          }
          if (v68)
          {
            long long v69 = v68;
            operator delete(v68);
          }
        }
      }
LABEL_78:
      if (v92 == 1)
      {
        if (v90)
        {
          v91 = v90;
          operator delete(v90);
        }
        if (v88)
        {
          v89 = v88;
          operator delete(v88);
        }
        char v41 = __p;
        if (__p)
        {
          char v87 = __p;
          goto LABEL_3;
        }
      }
      goto LABEL_4;
    }
    if (!sub_BE5F1C((uint64_t *)(*a1 + 4008), *(void *)v6, 1)) {
      goto LABEL_4;
    }
    sub_C0005C((uint64_t)a2, v5);
    uint64_t v12 = *a1;
    uint64_t v13 = *v7;
    char v64 = 1;
    uint64_t v14 = (int *)sub_499804(*(void *)(v12 + 4008) + 24, __ROR8__(v13, 32), 0, "access point");
    int64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
    if (*v15 < 0x15u) {
      goto LABEL_4;
    }
    uint64_t v16 = v15[10];
    if (!v16) {
      goto LABEL_4;
    }
    unint64_t v17 = (unsigned int *)((char *)v14 + v16 + *(unsigned int *)((char *)v14 + v16));
    int v53 = 0;
    uint64_t v54 = 0;
    uint64_t v52 = 0;
    int v66 = (unsigned int **)(v12 + 4008);
    char v67 = &v64;
    uint64_t v18 = *v17;
    v85[0] = v17 + 1;
    int v65 = &v17[2 * v18 + 1];
    sub_BE6D78(v85, &v65, (void **)&v52, (uint64_t)&v63, (uint64_t **)&v66);
    long long v20 = (uint64_t *)v52;
    long long v19 = v53;
    if (v52 == v53)
    {
      if (v53) {
        goto LABEL_86;
      }
      goto LABEL_4;
    }
    do
    {
      int v66 = (unsigned int **)v20;
      long long v21 = sub_C0098C((uint64_t)v57, v20, (uint64_t)&unk_20F06E0, &v66);
      BOOL v22 = (int *)sub_4992B0(*(void *)(*a1 + 4104) + 24, __ROR8__(*v20, 32), 0, "road access point");
      unint64_t v23 = (unsigned __int16 *)((char *)v22 - *v22);
      if (*v23 >= 0xBu && (uint64_t v24 = v23[5]) != 0) {
        int v25 = 10 * *(int *)((char *)v22 + v24);
      }
      else {
        int v25 = 0;
      }
      int v26 = *(_DWORD *)(sub_BE601C(v4, v5) + 176) + v25;
      v85[0] = (unsigned int *)*v20;
      int v92 = 0;
      char v93 = 1;
      uint64_t v27 = (uint64_t *)*v20;
      unint64_t v28 = *((unsigned int *)v21 + 6);
      if (v28 == -1)
      {
        int v66 = (unsigned int **)*v20;
        LODWORD(v67) = v25;
        int v84 = 1;
        *((_DWORD *)v21 + 6) = sub_C00134(a2, (uint64_t)v85, v26, (uint64_t)&v66, v5, 0);
        int v30 = v84;
        if (v84 == 2) {
          goto LABEL_25;
        }
      }
      else
      {
        if (v26 >= *(_DWORD *)(sub_BE601C(v4, v28) + 176)) {
          goto LABEL_44;
        }
        unsigned int v29 = *((_DWORD *)v21 + 6);
        int v66 = (unsigned int **)v27;
        LODWORD(v67) = v25;
        int v84 = 1;
        sub_C00294(a2, v29, (uint64_t)v85, v26, (uint64_t)&v66, v5, 0);
        int v30 = v84;
        if (v84 == 2)
        {
LABEL_25:
          sub_9F6418((uint64_t)&v66);
          goto LABEL_44;
        }
      }
      if (!v30)
      {
        if (v82)
        {
          uint64_t v83 = v82;
          operator delete(v82);
        }
        if (v81 == 1)
        {
          if (v79)
          {
            v80 = v79;
            operator delete(v79);
          }
          if (v77)
          {
            unint64_t v78 = v77;
            operator delete(v77);
          }
          if (v75)
          {
            long long v76 = v75;
            operator delete(v75);
          }
        }
        if (v74 == 1)
        {
          if (v72)
          {
            int v73 = v72;
            operator delete(v72);
          }
          if (v70)
          {
            int v71 = v70;
            operator delete(v70);
          }
          if (v68)
          {
            long long v69 = v68;
            operator delete(v68);
          }
        }
      }
LABEL_44:
      if (v92 == 1)
      {
        if (v90)
        {
          v91 = v90;
          operator delete(v90);
        }
        if (v88)
        {
          v89 = v88;
          operator delete(v88);
        }
        if (__p)
        {
          char v87 = __p;
          operator delete(__p);
        }
      }
      ++v20;
    }
    while (v20 != (uint64_t *)v19);
    long long v19 = v52;
    if (v52)
    {
LABEL_86:
      int v53 = v19;
      char v41 = v19;
LABEL_3:
      operator delete(v41);
    }
LABEL_4:
    unint64_t v3 = (void **)*v3;
    if (v3) {
      continue;
    }
    break;
  }
  uint64_t v42 = v56;
  if (v56)
  {
    do
    {
      uint64_t v43 = (void *)*v42;
      operator delete(v42);
      uint64_t v42 = v43;
    }
    while (v43);
  }
LABEL_89:
  uint64_t v44 = v55;
  int v55 = 0;
  if (v44) {
    operator delete(v44);
  }
  unint64_t v45 = v58[0];
  if (v58[0])
  {
    do
    {
      char v46 = (void *)*v45;
      operator delete(v45);
      unint64_t v45 = v46;
    }
    while (v46);
  }
  uint64_t v47 = v57[0];
  v57[0] = 0;
  if (v47) {
    operator delete(v47);
  }
  int v48 = v61[0];
  if (v61[0])
  {
    do
    {
      int v49 = (void *)*v48;
      operator delete(v48);
      int v48 = v49;
    }
    while (v49);
  }
  char v50 = v60[0];
  v60[0] = 0;
  if (v50) {
    operator delete(v50);
  }
}

void sub_BFFF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *__p, uint64_t a5, uint64_t a6, ...)
{
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  if (__p) {
    operator delete(__p);
  }
  sub_12168((uint64_t)va);
  sub_12168((uint64_t)va1);
  sub_12168((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_C0005C(uint64_t result, unsigned int a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (0xFAFAFAFAFAFAFAFBLL * ((*(void *)(result + 16) - v2) >> 5) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v5, "vertex id out of range");
    unsigned int v4 = (void *)sub_2F404((uint64_t)exception, &v5);
  }
  *(unsigned char *)(v2 + 1632 * a2 + 1624) = 1;
  return result;
}

void sub_C00104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_C00134(void *a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5, char a6)
{
  unsigned int v18 = a5;
  int v19 = a3;
  char v17 = a6;
  uint64_t v8 = a1[1];
  unint64_t v9 = a1[2];
  uint64_t v7 = a1 + 1;
  unint64_t v10 = 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(v9 - v8) >> 5);
  if (v10 <= a5)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v16, "parent vertex id out of range");
    uint64_t v15 = (void *)sub_2F404((uint64_t)exception, &v16);
  }
  unsigned int v20 = v10;
  if (v9 >= a1[3])
  {
    uint64_t v11 = sub_C00504(v7, a2, &v19, a4, (int *)&v18, &v17);
  }
  else
  {
    sub_C006C0(v9, a2, a3, a4, a5, a6);
    uint64_t v11 = v9 + 1632;
    a1[2] = v9 + 1632;
  }
  a1[2] = v11;
  sub_2D10DC(a1 + 9, &v18);
  sub_BF40DC((uint64_t)(a1 + 9), &v20, &v20);
  uint64_t v12 = a1[1] + 1632 * v18;
  ++*(_DWORD *)(v12 + 1620);
  return v20;
}

void sub_C0025C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void sub_C00264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_C00294(void *a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5, unsigned int a6, int a7)
{
  unsigned int v29 = a6;
  uint64_t v9 = a1[1];
  unint64_t v10 = 0xFAFAFAFAFAFAFAFBLL * ((a1[2] - v9) >> 5);
  if (v10 <= a2 || v10 <= a6)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v28, "vertex id out of range");
    unint64_t v23 = (void *)sub_2F404((uint64_t)exception, &v28);
  }
  if (a6 >= a2)
  {
    uint64_t v24 = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v28, "parent vertex id not smaller than vertex id");
    int v25 = (void *)sub_2F404((uint64_t)v24, &v28);
  }
  char v13 = a7;
  if (a7 && *(_DWORD *)(v9 + 1632 * a2 + 1620))
  {
    int v26 = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v28, "inner node cannot be marked final");
    uint64_t v27 = (void *)sub_2F404((uint64_t)v26, &v28);
  }
  LODWORD(v28) = *(_DWORD *)(v9 + 1632 * a2 + 1616);
  uint64_t v18 = v9 + 1632 * v28;
  int v19 = *(_DWORD *)(v18 + 1620) - 1;
  *(_DWORD *)(v18 + 1620) = v19;
  if (!v19)
  {
    sub_BF40DC((uint64_t)(a1 + 9), (unsigned int *)&v28, &v28);
    uint64_t v9 = a1[1];
  }
  ++*(_DWORD *)(v9 + 1632 * a6 + 1620);
  *(_DWORD *)(v9 + 1632 * a2 + 1616) = a6;
  sub_2D10DC(a1 + 9, &v29);
  uint64_t v20 = a1[1] + 1632 * a2;
  sub_BE7D3C(v20, a3);
  *(unsigned char *)(v20 + 168) = *(unsigned char *)(a3 + 168);
  *(_DWORD *)(a1[1] + 1632 * a2 + 176) = a4;
  uint64_t result = sub_BE7B28(a1[1] + 1632 * a2 + 184, a5);
  *(unsigned char *)(a1[1] + 1632 * a2 + 1624) = v13;
  return result;
}

void sub_C004C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_C00504(uint64_t *a1, uint64_t a2, int *a3, uint64_t a4, int *a5, char *a6)
{
  unint64_t v7 = 0xFAFAFAFAFAFAFAFBLL * ((a1[1] - *a1) >> 5);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0x28282828282828) {
    sub_2E00();
  }
  if (0xF5F5F5F5F5F5F5F6 * ((a1[2] - *a1) >> 5) > v8) {
    unint64_t v8 = 0xF5F5F5F5F5F5F5F6 * ((a1[2] - *a1) >> 5);
  }
  if (0xFAFAFAFAFAFAFAFBLL * ((a1[2] - *a1) >> 5) >= 0x14141414141414) {
    unint64_t v14 = 0x28282828282828;
  }
  else {
    unint64_t v14 = v8;
  }
  int v26 = a1 + 2;
  if (v14)
  {
    if (v14 > 0x28282828282828) {
      sub_188D718();
    }
    uint64_t v15 = (char *)operator new(1632 * v14);
  }
  else
  {
    uint64_t v15 = 0;
  }
  __p = v15;
  v24.i64[0] = (uint64_t)&v15[1632 * v7];
  v24.i64[1] = v24.i64[0];
  int v25 = &v15[1632 * v14];
  sub_C006C0(v24.i64[0], a2, *a3, a4, *a5, *a6);
  uint64_t v16 = v24.i64[0];
  uint64_t v17 = v24.i64[0] + 1632;
  uint64_t v19 = *a1;
  unint64_t v18 = a1[1];
  if (v18 == *a1)
  {
    int64x2_t v20 = vdupq_n_s64(v18);
  }
  else
  {
    do
    {
      v16 -= 1632;
      v18 -= 1632;
      sub_C007EC((uint64_t)(a1 + 2), v16, v18);
    }
    while (v18 != v19);
    int64x2_t v20 = *(int64x2_t *)a1;
  }
  *a1 = v16;
  a1[1] = v17;
  int64x2_t v24 = v20;
  long long v21 = (char *)a1[2];
  a1[2] = (uint64_t)v25;
  int v25 = v21;
  __p = (void *)v20.i64[0];
  sub_C008B0((uint64_t)&__p, v20.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v17;
}

void sub_C006AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_C007B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_C006C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, char a6)
{
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  int v12 = *(_DWORD *)(a2 + 160);
  if (v12 == 1)
  {
    sub_44479C(a1, a2);
  }
  else if (!v12)
  {
    *(void *)a1 = *(void *)a2;
  }
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(_DWORD *)(a1 + 176) = a3;
  char v13 = (void *)(a1 + 184);
  *(_DWORD *)(a1 + 1608) = *(_DWORD *)(a4 + 1424);
  int v14 = *(_DWORD *)(a4 + 1424);
  switch(v14)
  {
    case 2:
      sub_A0E244((uint64_t)v13, a4);
      break;
    case 1:
      uint64_t v15 = *(void *)a4;
      *(_DWORD *)(a1 + 192) = *(_DWORD *)(a4 + 8);
      *char v13 = v15;
      break;
    case 0:
      sub_BE6528((uint64_t)v13, a4);
      break;
  }
  *(_DWORD *)(a1 + 1616) = a5;
  *(_DWORD *)(a1 + 1620) = 0;
  *(unsigned char *)(a1 + 1624) = a6;
  *(unsigned char *)(a1 + 1625) = 0;
  return a1;
}

void sub_C007A0(_Unwind_Exception *a1)
{
  sub_BE6670(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C007B4(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_C007EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a2 + 160) = *(_DWORD *)(a3 + 160);
  int v5 = *(_DWORD *)(a3 + 160);
  if (v5 == 1)
  {
    sub_44479C(a2, a3);
  }
  else if (!v5)
  {
    *(void *)a2 = *(void *)a3;
  }
  *(unsigned char *)(a2 + 168) = *(unsigned char *)(a3 + 168);
  *(_DWORD *)(a2 + 176) = *(_DWORD *)(a3 + 176);
  uint64_t result = (void *)(a2 + 184);
  unint64_t v7 = (uint64_t *)(a3 + 184);
  *(_DWORD *)(a2 + 1608) = *(_DWORD *)(a3 + 1608);
  int v8 = *(_DWORD *)(a3 + 1608);
  switch(v8)
  {
    case 2:
      uint64_t result = (void *)sub_A0E244((uint64_t)result, (uint64_t)v7);
      break;
    case 1:
      uint64_t v9 = *v7;
      *(_DWORD *)(a2 + 192) = *(_DWORD *)(a3 + 192);
      *uint64_t result = v9;
      break;
    case 0:
      uint64_t result = (void *)sub_BE6528((uint64_t)result, (uint64_t)v7);
      break;
  }
  uint64_t v10 = *(void *)(a3 + 1616);
  *(_WORD *)(a2 + 1624) = *(_WORD *)(a3 + 1624);
  *(void *)(a2 + 1616) = v10;
  return result;
}

void sub_C008B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    while (1)
    {
      *(void *)(a1 + 16) = v2 - 1632;
      uint64_t v5 = v2 - 1448;
      int v6 = *(_DWORD *)(v2 - 24);
      if (v6 != 2) {
        break;
      }
      sub_9F6418(v5);
      if (*(_DWORD *)(v2 - 1472) == 1) {
        goto LABEL_10;
      }
LABEL_3:
      uint64_t v2 = *(void *)(a1 + 16);
      if (v2 == a2) {
        return;
      }
    }
    if (!v6) {
      sub_9F636C(v5);
    }
    if (*(_DWORD *)(v2 - 1472) != 1) {
      goto LABEL_3;
    }
LABEL_10:
    unint64_t v7 = *(void **)(v2 - 1504);
    if (v7)
    {
      *(void *)(v2 - 1496) = v7;
      operator delete(v7);
    }
    int v8 = *(void **)(v2 - 1528);
    if (v8)
    {
      *(void *)(v2 - 1520) = v8;
      operator delete(v8);
    }
    uint64_t v9 = *(void **)(v2 - 1560);
    if (v9)
    {
      *(void *)(v2 - 1552) = v9;
      operator delete(v9);
    }
    goto LABEL_3;
  }
}

uint64_t *sub_C0098C(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v9 = (0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) >> 33);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = (0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) >> 33);
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    int v12 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      char v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v13[1];
            if (v16 == v9)
            {
              if (*((_DWORD *)v13 + 5) == HIDWORD(v7) && *((_DWORD *)v13 + 4) == v7) {
                return v13;
              }
            }
            else if ((v16 & (v10 - 1)) != v4)
            {
              goto LABEL_31;
            }
            char v13 = (uint64_t *)*v13;
            if (!v13) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 5) == HIDWORD(v7) && *((_DWORD *)v13 + 4) == v7) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v4) {
              break;
            }
          }
          char v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  uint64_t v19 = operator new(0x20uLL);
  void *v19 = 0;
  v19[1] = v9;
  v19[2] = **a4;
  *((_DWORD *)v19 + 6) = -1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
    if (v23)
    {
LABEL_34:
      void *v19 = *v23;
LABEL_69:
      *unint64_t v23 = v19;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v10 >= 3) {
      BOOL v24 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v10);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_45;
    }
    if (prime < v10)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v10) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v31 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v4 = v9 % v10;
        uint64_t v22 = *(void *)a1;
        unint64_t v23 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v23) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v9;
        uint64_t v22 = *(void *)a1;
        unint64_t v23 = *(void **)(*(void *)a1 + 8 * v9);
        if (v23) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v31 & v9;
      uint64_t v22 = *(void *)a1;
      unint64_t v23 = *(void **)(*(void *)a1 + 8 * (v31 & v9));
      if (v23) {
        goto LABEL_34;
      }
    }
  }
  void *v19 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v19;
  *(void *)(v22 + 8 * v4) = a1 + 16;
  if (*v19)
  {
    unint64_t v32 = *(void *)(*v19 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v32 >= v10) {
        v32 %= v10;
      }
    }
    else
    {
      v32 &= v10 - 1;
    }
    unint64_t v23 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v19;
}

void sub_C00CE8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_C00CFC()
{
  unk_25DFFB7 = 16641;
  word_25DFFA0 = 65;
  byte_25DFFCF = 1;
  byte_25DFFB9 = 0;
}

void sub_C00D24(unsigned __int8 *a1, uint64_t a2, char a3, char a4)
{
  char v61 = a3;
  char v60 = a4;
  unint64_t v59 = 0;
  long long v56 = 0u;
  long long v57 = 0u;
  int v58 = 1065353216;
  *(_OWORD *)int v53 = 0u;
  *(_OWORD *)uint64_t v54 = 0u;
  int v55 = 1065353216;
  *(_OWORD *)char v50 = 0u;
  *(_OWORD *)uint64_t v51 = 0u;
  int v52 = 1065353216;
  for (uint64_t i = *(uint64_t ***)(a2 + 88); i; uint64_t i = (uint64_t **)*i)
  {
    uint64_t v7 = sub_BE601C((void *)(a2 + 8), *((unsigned int *)i + 4));
    if (*(unsigned char *)(v7 + 168) == 2) {
      sub_B5AAE8((uint64_t)v53, (uint64_t *)v7, (void *)v7);
    }
  }
  v49[0] = (unsigned __int8 *)a2;
  v49[1] = (unsigned __int8 *)v50;
  v49[2] = (unsigned __int8 *)&v59;
  v49[3] = a1;
  v49[4] = (unsigned __int8 *)&v60;
  v49[5] = (unsigned __int8 *)&v56;
  v49[6] = (unsigned __int8 *)&v61;
  v49[7] = (unsigned __int8 *)v53;
  sub_BF3F98((uint64_t)&v47, a2 + 72);
  unint64_t v8 = __p;
  if (!__p)
  {
    *((double *)a1 + 17) = *((double *)a1 + 17) + (double)v59;
    unint64_t v34 = v47;
    uint64_t v47 = 0;
    if (v34) {
      goto LABEL_44;
    }
    goto LABEL_45;
  }
  do
  {
    unsigned int v9 = v8[4];
    uint64_t v10 = sub_BE601C((void *)(a2 + 8), v9);
    uint8x8_t v11 = (uint64_t *)v10;
    if (*(unsigned char *)(v10 + 1624)) {
      goto LABEL_8;
    }
    if (*(unsigned char *)(v10 + 168))
    {
      if (*(unsigned char *)(v10 + 168) == 2 && (HIDWORD(*(void *)v10) != 1 || *(void *)v10 + 3 >= 2))
      {
        uint64_t v13 = *(void *)a1;
        unint64_t v14 = (int *)sub_498D5C(*(void *)(*(void *)a1 + 4120) + 24, __ROR8__(*(void *)v10, 32), 0, "stop");
        uint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
        if (*v15 >= 0xDu)
        {
          unsigned __int16 v16 = v15[6];
          if (v16)
          {
            uint64_t v18 = *(unsigned int *)((char *)v14 + v16);
            uint64_t v17 = *(unsigned int *)((char *)v14 + v16 + 4);
            if (v17 != -1 && v18 != 0)
            {
              float v20 = (int *)sub_8ED928(*(void *)(v13 + 4128) + 24, __ROR8__(v17 | (v18 << 32), 32), 0, "station");
              float v21 = (unsigned __int16 *)((char *)v20 - *v20);
              if (*v21 >= 0xBu)
              {
                uint64_t v22 = v21[5];
                if (v22)
                {
                  if (*(int *)((char *)v20 + v22 + *(unsigned int *)((char *)v20 + v22)))
                  {
                    unint64_t v23 = (int *)sub_498D5C(*(void *)(*(void *)a1 + 4120) + 24, __ROR8__(*v11, 32), 0, "stop");
                    BOOL v24 = (unsigned __int16 *)((char *)v23 - *v23);
                    if (*v24 >= 0xDu && (unsigned __int16 v25 = v24[6]) != 0) {
                      unint64_t v26 = *(unsigned int *)((char *)v23 + v25 + 4) | ((unint64_t)*(unsigned int *)((char *)v23 + v25) << 32);
                    }
                    else {
                      unint64_t v26 = 0xFFFFFFFFLL;
                    }
                    sub_C0005C(a2, v9);
                    sub_C011A4(v49, v9, v26);
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      sub_C0005C(a2, v9);
      sub_B8CC48((void *)(*(void *)a1 + 4008), *v11, (uint64_t)&v45);
      uint64_t v27 = v45;
      unint64_t v28 = v46;
      if (v45 == v46)
      {
        if (v45) {
          goto LABEL_38;
        }
      }
      else
      {
        do
        {
          uint8x8_t v29 = (int *)sub_8ED928(*(void *)(*(void *)a1 + 4112) + 24, __ROR8__(*v27, 32), 0, "station");
          uint64_t v30 = (unsigned __int16 *)((char *)v29 - *v29);
          if (*v30 >= 0xBu)
          {
            uint64_t v31 = v30[5];
            if (v31)
            {
              if (*(int *)((char *)v29 + v31 + *(unsigned int *)((char *)v29 + v31))) {
                sub_C011A4(v49, v9, *v27);
              }
            }
          }
          ++v27;
        }
        while (v27 != v28);
        uint64_t v27 = v45;
        if (v45)
        {
LABEL_38:
          char v46 = v27;
          operator delete(v27);
        }
      }
    }
LABEL_8:
    unint64_t v8 = *(_DWORD **)v8;
  }
  while (v8);
  unint64_t v32 = __p;
  *((double *)a1 + 17) = *((double *)a1 + 17) + (double)v59;
  if (v32)
  {
    do
    {
      unsigned __int16 v33 = (void *)*v32;
      operator delete(v32);
      unint64_t v32 = v33;
    }
    while (v33);
  }
  unint64_t v34 = v47;
  uint64_t v47 = 0;
  if (v34) {
LABEL_44:
  }
    operator delete(v34);
LABEL_45:
  char v35 = v51[0];
  if (v51[0])
  {
    do
    {
      uint64_t v43 = (void *)*v35;
      uint64_t v44 = (void *)v35[3];
      v35[3] = 0;
      if (v44)
      {
        sub_BFF2C4(v44);
        operator delete();
      }
      operator delete(v35);
      char v35 = v43;
    }
    while (v43);
  }
  int v36 = v50[0];
  v50[0] = 0;
  if (v36) {
    operator delete(v36);
  }
  std::string v37 = v54[0];
  if (v54[0])
  {
    do
    {
      unint64_t v38 = (void *)*v37;
      operator delete(v37);
      std::string v37 = v38;
    }
    while (v38);
  }
  unsigned int v39 = v53[0];
  v53[0] = 0;
  if (v39) {
    operator delete(v39);
  }
  int v40 = (void *)v57;
  if ((void)v57)
  {
    do
    {
      char v41 = (void *)*v40;
      operator delete(v40);
      int v40 = v41;
    }
    while (v41);
  }
  uint64_t v42 = (void *)v56;
  *(void *)&long long v56 = 0;
  if (v42) {
    operator delete(v42);
  }
}

void sub_C01148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_12168((uint64_t)&a12);
  sub_C016F4((uint64_t)&a25);
  sub_12168((uint64_t)&a31);
  sub_12168(v31 - 144);
  _Unwind_Resume(a1);
}

void sub_C011A4(unsigned __int8 **a1, unsigned int a2, uint64_t a3)
{
  uint64_t v33 = a3;
  unint64_t v4 = a1[3];
  unint64_t v5 = a2;
  uint64_t v6 = sub_BE601C((void *)*a1 + 1, a2);
  uint64_t v7 = (uint64_t)a1[1];
  v34[0] = &v33;
  unint64_t v8 = (uint64_t *)sub_C01AEC(v7, &v33, (uint64_t)&unk_20F06E0, v34)[3];
  if (!v8)
  {
    ++*(void *)a1[2];
    sub_398110(*(void *)(*(void *)v4 + 4072) + 24, 0);
    operator new();
  }
  sub_BE9A34(v8, v6, (uint64_t *)&v31);
  unsigned int v9 = (char *)v31;
  uint64_t v10 = v32;
  if (v31 != v32)
  {
    while (1)
    {
      uint64_t v11 = **a1;
      if (**a1) {
        uint64_t v12 = (uint64_t)(v9 + 8);
      }
      else {
        uint64_t v12 = (uint64_t)(v9 + 184);
      }
      int v13 = *(_DWORD *)(v12 + 160);
      int v59 = v13;
      if (v13 == 1)
      {
        sub_44479C((uint64_t)v52, v12);
        uint64_t v11 = v52[0];
      }
      else if (!v13)
      {
        uint64_t v11 = *(void *)v12;
        v52[0] = *(void *)v12;
      }
      unsigned __int8 v60 = *(unsigned char *)(v12 + 168);
      uint64_t v29 = v11;
      int v30 = v60;
      uint64_t v14 = (uint64_t)a1[5];
      v34[0] = &v29;
      uint64_t v15 = sub_C01EC0(v14, &v29, (uint64_t)&unk_20F06E0, v34);
      int v16 = *(_DWORD *)(sub_BE601C((void *)*a1 + 1, v5) + 176);
      int v17 = *((_DWORD *)v9 + 98);
      int v18 = v60;
      if (v60 == 2)
      {
        if (sub_A1E760(a1[7], v52)) {
          goto LABEL_43;
        }
        BOOL v19 = 0;
        int v18 = v60;
        int v20 = v17 + v16;
        unint64_t v21 = *((unsigned int *)v15 + 7);
        uint64_t v22 = *a1;
        if (v21 == -1)
        {
LABEL_16:
          if (!v19)
          {
            int v51 = -1;
            sub_BE6528((uint64_t)v34, (uint64_t)(v9 + 8));
            int v51 = 0;
            *((_DWORD *)v15 + 7) = sub_C00134(v22, (uint64_t)v52, v20, (uint64_t)v34, v5, v18 == 2);
            int v25 = v51;
            if (v51 != 2)
            {
LABEL_24:
              if (!v25)
              {
                if (__p)
                {
                  char v50 = __p;
                  operator delete(__p);
                }
                if (v48 == 1)
                {
                  if (v46)
                  {
                    uint64_t v47 = v46;
                    operator delete(v46);
                  }
                  if (v44)
                  {
                    unint64_t v45 = v44;
                    operator delete(v44);
                  }
                  if (v42)
                  {
                    uint64_t v43 = v42;
                    operator delete(v42);
                  }
                }
                if (v41 == 1)
                {
                  if (v39)
                  {
                    int v40 = v39;
                    operator delete(v39);
                  }
                  if (v37)
                  {
                    unint64_t v38 = v37;
                    operator delete(v37);
                  }
                  if (v35)
                  {
                    int v36 = v35;
                    operator delete(v35);
                  }
                }
              }
              goto LABEL_43;
            }
            goto LABEL_42;
          }
          *((_DWORD *)v15 + 7) = sub_C01774(v22, (uint64_t)v52);
          goto LABEL_43;
        }
      }
      else if (v60)
      {
        BOOL v19 = 0;
        int v20 = v17 + v16;
        unint64_t v21 = *((unsigned int *)v15 + 7);
        uint64_t v22 = *a1;
        if (v21 == -1) {
          goto LABEL_16;
        }
      }
      else
      {
        BOOL v19 = *a1[6] != 0;
        int v20 = v17 + v16;
        unint64_t v21 = *((unsigned int *)v15 + 7);
        uint64_t v22 = *a1;
        if (v21 == -1) {
          goto LABEL_16;
        }
      }
      if (v20 < *(_DWORD *)(sub_BE601C(v22 + 1, v21) + 176))
      {
        unint64_t v23 = *a1;
        unsigned int v24 = *((_DWORD *)v15 + 7);
        int v51 = -1;
        sub_BE6528((uint64_t)v34, (uint64_t)(v9 + 8));
        int v51 = 0;
        sub_C00294(v23, v24, (uint64_t)v52, v20, (uint64_t)v34, v5, v18 == 2);
        int v25 = v51;
        if (v51 != 2) {
          goto LABEL_24;
        }
LABEL_42:
        sub_9F6418((uint64_t)v34);
      }
LABEL_43:
      if (v59 == 1)
      {
        if (v57)
        {
          int v58 = v57;
          operator delete(v57);
        }
        if (v55)
        {
          long long v56 = v55;
          operator delete(v55);
        }
        if (v53)
        {
          uint64_t v54 = v53;
          operator delete(v53);
        }
      }
      v9 += 400;
      if (v9 == v10)
      {
        unsigned int v9 = (char *)v31;
        break;
      }
    }
  }
  if (v9)
  {
    unint64_t v26 = v32;
    uint64_t v27 = v9;
    if (v32 != v9)
    {
      do
      {
        unint64_t v28 = v26 - 400;
        sub_9F636C((uint64_t)(v26 - 392));
        unint64_t v26 = v28;
      }
      while (v28 != v9);
      uint64_t v27 = v31;
    }
    unint64_t v32 = v9;
    operator delete(v27);
  }
}

void sub_C01648()
{
}

void sub_C01670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  unint64_t v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_BE5400((uint64_t)va1);
  sub_BE6670((uint64_t)&STACK[0x5D0]);
  sub_BE9B88((void **)va);
  _Unwind_Resume(a1);
}

void sub_C016BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_BE9B88((void **)va);
  _Unwind_Resume(a1);
}

void sub_C016D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_BE6670((uint64_t)&STACK[0x5D0]);
  sub_BE9B88((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_C016F4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v5 = (void *)*v2;
      uint64_t v6 = (void *)v2[3];
      v2[3] = 0;
      if (v6)
      {
        sub_BFF2C4(v6);
        operator delete();
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  unint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_C01774(void *a1, uint64_t a2)
{
  unint64_t v4 = a1 + 1;
  unsigned int v9 = -84215045 * ((a1[2] - a1[1]) >> 5);
  int v27 = -1;
  int v5 = *(_DWORD *)(a2 + 160);
  int v35 = v5;
  if (v5 == 1)
  {
    sub_44479C((uint64_t)v28, a2);
    char v36 = *(unsigned char *)(a2 + 168);
    int v37 = 0;
    int v55 = v27;
  }
  else
  {
    if (!v5) {
      v28[0] = *(void *)a2;
    }
    char v36 = *(unsigned char *)(a2 + 168);
    int v37 = 0;
    int v55 = -1;
  }
  uint64_t v56 = 0xFFFFFFFFLL;
  __int16 v57 = 0;
  unint64_t v6 = a1[2];
  if (v6 >= a1[3])
  {
    uint64_t v7 = sub_C02318(v4, (uint64_t)v28);
  }
  else
  {
    sub_C007EC((uint64_t)(a1 + 3), a1[2], (uint64_t)v28);
    uint64_t v7 = v6 + 1632;
  }
  a1[2] = v7;
  if (v55 == 2)
  {
    sub_9F6418((uint64_t)&v38);
  }
  else if (!v55)
  {
    if (v53)
    {
      uint64_t v54 = v53;
      operator delete(v53);
    }
    if (v52 == 1)
    {
      if (v50)
      {
        int v51 = v50;
        operator delete(v50);
      }
      if (v48)
      {
        int v49 = v48;
        operator delete(v48);
      }
      if (v46)
      {
        uint64_t v47 = v46;
        operator delete(v46);
      }
    }
    if (v45 == 1)
    {
      if (v43)
      {
        uint64_t v44 = v43;
        operator delete(v43);
      }
      if (v41)
      {
        uint64_t v42 = v41;
        operator delete(v41);
      }
      if (v39)
      {
        int v40 = v39;
        operator delete(v39);
      }
    }
  }
  if (v35 == 1)
  {
    if (v33)
    {
      unint64_t v34 = v33;
      operator delete(v33);
    }
    if (v31)
    {
      unint64_t v32 = v31;
      operator delete(v31);
    }
    if (v29)
    {
      int v30 = v29;
      operator delete(v29);
    }
  }
  if (v27 == 2)
  {
    sub_9F6418((uint64_t)&v10);
  }
  else if (!v27)
  {
    if (v25)
    {
      unint64_t v26 = v25;
      operator delete(v25);
    }
    if (v24 == 1)
    {
      if (v22)
      {
        unint64_t v23 = v22;
        operator delete(v22);
      }
      if (v20)
      {
        unint64_t v21 = v20;
        operator delete(v20);
      }
      if (v18)
      {
        BOOL v19 = v18;
        operator delete(v18);
      }
    }
    if (v17 == 1)
    {
      if (v15)
      {
        int v16 = v15;
        operator delete(v15);
      }
      if (__p)
      {
        uint64_t v14 = __p;
        operator delete(__p);
      }
      if (v11)
      {
        uint64_t v12 = v11;
        operator delete(v11);
      }
    }
  }
  sub_BF40DC((uint64_t)(a1 + 4), &v9, &v9);
  sub_BF40DC((uint64_t)(a1 + 9), &v9, &v9);
  return v9;
}

void sub_C01A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_BE6670((uint64_t)&STACK[0x5A8]);
  sub_BE5400((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C01AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_BE5400((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C01ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_C02280((uint64_t)&STACK[0x5A8]);
  sub_BE5400((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_C01AEC(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v9 = (0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) >> 33);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = (0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) >> 33);
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      int v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v13[1];
            if (v16 == v9)
            {
              if (*((_DWORD *)v13 + 5) == HIDWORD(v7) && *((_DWORD *)v13 + 4) == v7) {
                return v13;
              }
            }
            else if ((v16 & (v10 - 1)) != v4)
            {
              goto LABEL_31;
            }
            int v13 = (void *)*v13;
            if (!v13) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 5) == HIDWORD(v7) && *((_DWORD *)v13 + 4) == v7) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v4) {
              break;
            }
          }
          int v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  int v18 = (void *)(a1 + 16);
  int v13 = operator new(0x20uLL);
  *int v13 = 0;
  v13[1] = v9;
  v13[2] = **a4;
  v13[3] = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (v10 && (float)(v20 * (float)v10) >= v19)
  {
    uint64_t v21 = *(void *)a1;
    uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
    if (v22)
    {
LABEL_34:
      *int v13 = *v22;
LABEL_69:
      *uint64_t v22 = v13;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v23 = 1;
    if (v10 >= 3) {
      BOOL v23 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v10);
    unint64_t v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25) {
      size_t prime = v25;
    }
    else {
      size_t prime = v24;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_45;
    }
    if (prime < v10)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (prime <= v27) {
        size_t prime = v27;
      }
      if (prime < v10) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v30 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v4 = v9 % v10;
        uint64_t v21 = *(void *)a1;
        uint64_t v22 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v22) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v9;
        uint64_t v21 = *(void *)a1;
        uint64_t v22 = *(void **)(*(void *)a1 + 8 * v9);
        if (v22) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v30 & v9;
      uint64_t v21 = *(void *)a1;
      uint64_t v22 = *(void **)(*(void *)a1 + 8 * (v30 & v9));
      if (v22) {
        goto LABEL_34;
      }
    }
  }
  *int v13 = *v18;
  void *v18 = v13;
  *(void *)(v21 + 8 * v4) = v18;
  if (*v13)
  {
    unint64_t v31 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v31 >= v10) {
        v31 %= v10;
      }
    }
    else
    {
      v31 &= v10 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_C01E48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_C01E5C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_C01E5C(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      unint64_t v3 = (void *)v2[3];
      v2[3] = 0;
      if (v3)
      {
        sub_BFF2C4(v3);
        operator delete();
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t *sub_C01EC0(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *((unsigned __int8 *)a2 + 8);
  unint64_t v8 = *a2;
  unint64_t v9 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v10 = ((((v7 + 2656449171) ^ 0x7A69) << 6)
       + (((v7 + 2656449171) ^ 0x7A69uLL) >> 2)
       + 2654435769u
       + ((0xC4CEB9FE1A85EC53 * (v9 ^ (v9 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v9 ^ (v9 >> 33))) >> 33))) ^ (v7 + 2656449171) ^ 0x7A69;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = ((((v7 + 2656449171) ^ 0x7A69) << 6)
          + (((v7 + 2656449171) ^ 0x7A69uLL) >> 2)
          + 2654435769u
          + ((0xC4CEB9FE1A85EC53 * (v9 ^ (v9 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v9 ^ (v9 >> 33))) >> 33))) ^ (v7 + 2656449171) ^ 0x7A69;
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    int v13 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      unint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v14[1];
            if (v17 == v10)
            {
              BOOL v18 = *((_DWORD *)v14 + 5) == HIDWORD(v8) && *((_DWORD *)v14 + 4) == v8;
              if (v18 && *((unsigned __int8 *)v14 + 24) == v7) {
                return v14;
              }
            }
            else if ((v17 & (v11 - 1)) != v4)
            {
              goto LABEL_33;
            }
            unint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_33;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            BOOL v16 = *((_DWORD *)v14 + 5) == HIDWORD(v8) && *((_DWORD *)v14 + 4) == v8;
            if (v16 && *((unsigned __int8 *)v14 + 24) == v7) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          unint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_33:
  float v20 = operator new(0x20uLL);
  *float v20 = 0;
  v20[1] = v10;
  int v21 = *((_DWORD *)*a4 + 2);
  v20[2] = **a4;
  *((_DWORD *)v20 + 6) = v21;
  *((_DWORD *)v20 + 7) = -1;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (v11 && (float)(v23 * (float)v11) >= v22)
  {
    uint64_t v24 = *(void *)a1;
    unint64_t v25 = *(void **)(*(void *)a1 + 8 * v4);
    if (v25)
    {
LABEL_36:
      *float v20 = *v25;
LABEL_71:
      *unint64_t v25 = v20;
      goto LABEL_72;
    }
  }
  else
  {
    BOOL v26 = 1;
    if (v11 >= 3) {
      BOOL v26 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v27 = v26 | (2 * v11);
    unint64_t v28 = vcvtps_u32_f32(v22 / v23);
    if (v27 <= v28) {
      size_t prime = v28;
    }
    else {
      size_t prime = v27;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_47;
    }
    if (prime < v11)
    {
      unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (prime <= v30) {
        size_t prime = v30;
      }
      if (prime < v11) {
LABEL_47:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v33 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v24 = *(void *)a1;
        unint64_t v25 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v25) {
          goto LABEL_36;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v24 = *(void *)a1;
        unint64_t v25 = *(void **)(*(void *)a1 + 8 * v10);
        if (v25) {
          goto LABEL_36;
        }
      }
    }
    else
    {
      unint64_t v4 = v33 & v10;
      uint64_t v24 = *(void *)a1;
      unint64_t v25 = *(void **)(*(void *)a1 + 8 * (v33 & v10));
      if (v25) {
        goto LABEL_36;
      }
    }
  }
  *float v20 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v20;
  *(void *)(v24 + 8 * v4) = a1 + 16;
  if (*v20)
  {
    unint64_t v34 = *(void *)(*v20 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v34 >= v11) {
        v34 %= v11;
      }
    }
    else
    {
      v34 &= v11 - 1;
    }
    unint64_t v25 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_71;
  }
LABEL_72:
  ++*(void *)(a1 + 24);
  return v20;
}

void sub_C0226C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C02280(uint64_t a1)
{
  uint64_t v2 = a1 + 184;
  int v3 = *(_DWORD *)(a1 + 1608);
  if (v3 == 2)
  {
    sub_9F6418(v2);
    if (*(_DWORD *)(a1 + 160) != 1) {
      return a1;
    }
  }
  else
  {
    if (!v3) {
      sub_9F636C(v2);
    }
    if (*(_DWORD *)(a1 + 160) != 1) {
      return a1;
    }
  }
  int v5 = *(void **)(a1 + 128);
  if (v5)
  {
    *(void *)(a1 + 136) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *(void **)(a1 + 104);
  if (v6)
  {
    *(void *)(a1 + 112) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 72);
  if (!v7) {
    return a1;
  }
  *(void *)(a1 + 80) = v7;
  operator delete(v7);
  return a1;
}

uint64_t sub_C02318(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xFAFAFAFAFAFAFAFBLL * ((a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x28282828282828) {
    sub_2E00();
  }
  if (0xF5F5F5F5F5F5F5F6 * ((a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0xF5F5F5F5F5F5F5F6 * ((a1[2] - *a1) >> 5);
  }
  if (0xFAFAFAFAFAFAFAFBLL * ((a1[2] - *a1) >> 5) >= 0x14141414141414) {
    unint64_t v6 = 0x28282828282828;
  }
  else {
    unint64_t v6 = v4;
  }
  float v19 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x28282828282828) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(1632 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = (uint64_t)&v7[1632 * v3];
  unint64_t v9 = &v7[1632 * v6];
  sub_C007EC((uint64_t)(a1 + 2), v8, a2);
  uint64_t v10 = v8 + 1632;
  uint64_t v12 = *a1;
  unint64_t v11 = a1[1];
  if (v11 == *a1)
  {
    int64x2_t v13 = vdupq_n_s64(v11);
  }
  else
  {
    do
    {
      v8 -= 1632;
      v11 -= 1632;
      sub_C007EC((uint64_t)(a1 + 2), v8, v11);
    }
    while (v11 != v12);
    int64x2_t v13 = *(int64x2_t *)a1;
  }
  *a1 = v8;
  a1[1] = v10;
  int64x2_t v17 = v13;
  uint64_t v14 = a1[2];
  a1[2] = (uint64_t)v9;
  uint64_t v18 = v14;
  __p = (void *)v13.i64[0];
  sub_C008B0((uint64_t)&__p, v13.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v10;
}

void sub_C0248C()
{
  unk_25DFFE7 = 16641;
  word_25DFFD0 = 65;
  byte_25DFFFF = 1;
  byte_25DFFE9 = 0;
}

uint64_t sub_C024B4(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 9;
  strcpy((char *)__p, "algorithm");
  uint64_t v4 = sub_561B0(a2, (uint64_t)__p);
  int v5 = sub_BE4368(v4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)a1 = v5;
  strcpy((char *)__p, "enable_fallback_to_cbr");
  HIBYTE(__p[2]) = 22;
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 4) = v6;
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "cost_function_name");
  uint64_t v7 = sub_561B0(a2, (uint64_t)__p);
  if (*(char *)(v7 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 8), *(void **)v7, *(void *)(v7 + 8));
  }
  else
  {
    long long v8 = *(_OWORD *)v7;
    *(void *)(a1 + 24) = *(void *)(v7 + 16);
    *(_OWORD *)(a1 + 8) = v8;
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "eta_evaluator_name");
  uint64_t v9 = sub_561B0(a2, (uint64_t)__p);
  if (*(char *)(v9 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 32), *(void **)v9, *(void *)(v9 + 8));
  }
  else
  {
    long long v10 = *(_OWORD *)v9;
    *(void *)(a1 + 48) = *(void *)(v9 + 16);
    *(_OWORD *)(a1 + 32) = v10;
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "unpack_paths");
  BOOL v11 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 56) = v11;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "expect_large_search_space");
  BOOL v12 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 57) = v12;
  *(unsigned char *)(a1 + 58) = 1;
  __p[0] = operator new(0x38uLL);
  *(_OWORD *)&__p[1] = xmmword_20B99E0;
  strcpy((char *)__p[0], "confine_nearest_neighbour_search_to_available_regions");
  BOOL v13 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 59) = v13;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9280;
  strcpy((char *)__p[0], "confine_paths_to_available_regions");
  BOOL v14 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 60) = v14;
  return a1;
}

void sub_C027BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v14 + 55) < 0) {
    operator delete(*v16);
  }
  if (*(char *)(v14 + 31) < 0) {
    operator delete(*v15);
  }
  _Unwind_Resume(exception_object);
}

double sub_C0284C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = sub_C024B4(a1, a4);
  *(void *)(v6 + 64) = a2;
  *(void *)(v6 + 72) = a3;
  *(_DWORD *)(v6 + 80) = 0;
  double result = 0.0;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  return result;
}

void sub_C028A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 0x7FFFFFFF)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(__p, "Invalid max_duration provided in OnStreetWalkingTreeExpansion::run()");
    v80 = (void *)sub_2F404((uint64_t)exception, (long long *)__p);
  }
  uint64_t v7 = a1;
  sub_C032E8(a1, (uint64_t)&v95);
  uint64_t v81 = a4;
  int v82 = a3;
  char v99 = *(unsigned char *)a2;
  int v100 = a3;
  int v92 = 0;
  char v93 = 0;
  uint64_t v94 = 0;
  uint64_t v8 = a2 + 88;
  uint64_t v9 = *(uint64_t **)(a2 + 88);
  uint64_t v84 = v7;
  char v86 = (void *)a2;
  int v10 = 0;
  if (v9)
  {
    BOOL v11 = (void *)(a2 + 8);
    uint64_t v83 = (void *)(a2 + 8);
    while (1)
    {
      unsigned int v12 = *((_DWORD *)v9 + 4);
      uint64_t v13 = sub_BE601C(v11, v12);
      if (!*(unsigned char *)(v13 + 1624)) {
        break;
      }
LABEL_5:
      uint64_t v9 = (uint64_t *)*v9;
      if (!v9) {
        goto LABEL_43;
      }
    }
    sub_BF5238(*(void **)(v7 + 72), *(void **)(v7 + 64), v13, *(_DWORD *)(v13 + 176), 1, (uint64_t)__p);
    sub_BE8478((char **)&v95, (uint64_t)v96, (char *)__p[0], (char *)__p[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)__p[1] - (char *)__p[0]) >> 4));
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v10 <= *(_DWORD *)(v13 + 176)) {
      int v10 = *(_DWORD *)(v13 + 176);
    }
    int v85 = v10;
    unint64_t v15 = (char *)v92;
    uint64_t v14 = v93;
    unint64_t v16 = (v93 - (unsigned char *)v92) >> 2;
    uint64_t v18 = v95;
    uint64_t v17 = (uint64_t)v96;
    unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((v96 - (unsigned char *)v95) >> 4);
    while (1)
    {
      if (v16 >= v19)
      {
        BOOL v11 = v83;
        uint64_t v7 = v84;
        a2 = (uint64_t)v86;
        int v10 = v85;
        goto LABEL_5;
      }
      if (v14 < v94)
      {
        *(_DWORD *)uint64_t v14 = v12;
        uint64_t v20 = (uint64_t)(v14 + 4);
        goto LABEL_13;
      }
      unint64_t v21 = v16 + 1;
      if ((v16 + 1) >> 62) {
        sub_2E00();
      }
      uint64_t v22 = v94 - v15;
      if ((v94 - v15) >> 1 > v21) {
        unint64_t v21 = v22 >> 1;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        if (v23 >> 62) {
          sub_188D718();
        }
        uint64_t v24 = operator new(4 * v23);
        unint64_t v25 = (unsigned int *)&v24[4 * v16];
        *unint64_t v25 = v12;
        uint64_t v20 = (uint64_t)(v25 + 1);
        if (v14 == v15) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v24 = 0;
        unint64_t v25 = (unsigned int *)(4 * v16);
        *(_DWORD *)(4 * v16) = v12;
        uint64_t v20 = 4 * v16 + 4;
        if (v14 == v15) {
          goto LABEL_30;
        }
      }
      unint64_t v26 = v14 - 4 - v15;
      if (v26 >= 0xBC)
      {
        uint64_t v29 = 4 * v16;
        if (&v24[4 * v16 - 4 - (v26 & 0xFFFFFFFFFFFFFFFCLL)] > &v24[4 * v16 - 4])
        {
          unint64_t v27 = v14;
        }
        else if (&v14[-(v26 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v14 - 4)
        {
          unint64_t v27 = v14;
        }
        else if ((unint64_t)(v14 - &v24[v29]) >= 0x20)
        {
          uint64_t v30 = (v26 >> 2) + 1;
          uint64_t v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v27 = &v14[-v31];
          unint64_t v25 = (unsigned int *)((char *)v25 - v31);
          uint64_t v32 = &v24[v29 - 16];
          unint64_t v33 = v14 - 16;
          uint64_t v34 = v30 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v35 = *(_OWORD *)v33;
            *(v32 - 1) = *((_OWORD *)v33 - 1);
            *uint64_t v32 = v35;
            v32 -= 2;
            v33 -= 32;
            v34 -= 8;
          }
          while (v34);
          if (v30 == (v30 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_30;
          }
        }
        else
        {
          unint64_t v27 = v14;
        }
      }
      else
      {
        unint64_t v27 = v14;
      }
      do
      {
        unsigned int v28 = *((_DWORD *)v27 - 1);
        v27 -= 4;
        *--unint64_t v25 = v28;
      }
      while (v27 != v15);
LABEL_30:
      int v92 = v25;
      char v93 = (char *)v20;
      uint64_t v94 = &v24[4 * v23];
      if (v15)
      {
        operator delete(v15);
        unint64_t v15 = (char *)v92;
        uint64_t v18 = v95;
        uint64_t v17 = (uint64_t)v96;
      }
      else
      {
        unint64_t v15 = (char *)v25;
      }
LABEL_13:
      char v93 = (char *)v20;
      unint64_t v16 = (v20 - (uint64_t)v15) >> 2;
      unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((v17 - (uint64_t)v18) >> 4);
      uint64_t v14 = (char *)v20;
    }
  }
LABEL_43:
  int v100 = v10 + v82;
  v89 = 0;
  v90 = 0;
  uint64_t v91 = 0;
  *(_OWORD *)char v87 = 0u;
  memset(v88, 0, 56);
  if (v101 >= 2)
  {
    if (v101 != 2) {
      goto LABEL_84;
    }
    sub_BEE314((uint64_t)v128, *(void *)(v7 + 64));
    sub_BEE320((uint64_t)v128, (uint64_t)&v95);
    *(_OWORD *)char v87 = *(_OWORD *)__p;
    *(void *)&v88[0] = v107;
    __p[0] = 0;
    uint64_t v107 = 0;
    *(_OWORD *)((char *)v88 + 8) = v108;
    *(_OWORD *)((char *)&v88[1] + 8) = v109;
    *(_OWORD *)((char *)&v88[2] + 8) = v110;
    sub_C06B50(v7, (uint64_t *)v87, __p);
    sub_C06E98(&v89, (__n128 *)__p);
    char v36 = (char *)__p[0];
    if (__p[0])
    {
      int v37 = (char *)__p[1];
      uint64_t v38 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          if (*((_DWORD *)v37 - 4) == 1)
          {
            unsigned int v39 = (void *)*((void *)v37 - 6);
            if (v39)
            {
              *((void *)v37 - 5) = v39;
              operator delete(v39);
            }
            int v40 = (void *)*((void *)v37 - 9);
            if (v40)
            {
              *((void *)v37 - 8) = v40;
              operator delete(v40);
            }
            int v41 = (void *)*((void *)v37 - 13);
            if (v41)
            {
              *((void *)v37 - 12) = v41;
              operator delete(v41);
            }
          }
          v37 -= 176;
        }
        while (v37 != v36);
        uint64_t v38 = __p[0];
      }
      __p[1] = v36;
      operator delete(v38);
    }
  }
  else
  {
    if (*(unsigned char *)(v81 + 24)) {
      sub_C06734(v7, (uint64_t **)v81, (uint64_t *)__p);
    }
    else {
      sub_C03678(v7, a2, v82, (uint64_t *)__p);
    }
    sub_C06E98(&v89, (__n128 *)__p);
    uint64_t v42 = (char *)__p[0];
    if (__p[0])
    {
      uint64_t v43 = (char *)__p[1];
      uint64_t v44 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          if (*((_DWORD *)v43 - 4) == 1)
          {
            int v45 = (void *)*((void *)v43 - 6);
            if (v45)
            {
              *((void *)v43 - 5) = v45;
              operator delete(v45);
            }
            char v46 = (void *)*((void *)v43 - 9);
            if (v46)
            {
              *((void *)v43 - 8) = v46;
              operator delete(v46);
            }
            uint64_t v47 = (void *)*((void *)v43 - 13);
            if (v47)
            {
              *((void *)v43 - 12) = v47;
              operator delete(v47);
            }
          }
          v43 -= 176;
        }
        while (v43 != v42);
        uint64_t v44 = __p[0];
      }
      __p[1] = v42;
      operator delete(v44);
    }
    sub_BF52D8(*(void **)(v7 + 72), *(void **)(v7 + 64), (uint64_t *)&v89, (uint64_t)__p);
    int v48 = (char *)v97[0];
    if (v97[0])
    {
      int v49 = v97[1];
      char v50 = v97[0];
      if (v97[1] != v97[0])
      {
        int v51 = (char *)v97[1];
        do
        {
          int v53 = (void *)*((void *)v51 - 4);
          v51 -= 32;
          int v52 = v53;
          if (v53)
          {
            *(v49 - 3) = v52;
            operator delete(v52);
          }
          int v49 = v51;
        }
        while (v51 != v48);
        char v50 = v97[0];
      }
      v97[1] = v48;
      operator delete(v50);
    }
    *(_OWORD *)int v97 = *(_OWORD *)__p;
    uint64_t v98 = v107;
    sub_BEE314((uint64_t)v128, *(void *)(v7 + 64));
    sub_BEE320((uint64_t)v128, (uint64_t)&v95);
    *(_OWORD *)char v87 = *(_OWORD *)__p;
    *(void *)&v88[0] = v107;
    *(_OWORD *)((char *)v88 + 8) = v108;
    *(_OWORD *)((char *)&v88[1] + 8) = v109;
    *(_OWORD *)((char *)&v88[2] + 8) = v110;
  }
  a2 = (uint64_t)v86;
LABEL_84:
  while (1)
  {
    uint64_t v8 = *(void *)v8;
    if (!v8) {
      break;
    }
    sub_C0005C(a2, *(_DWORD *)(v8 + 16));
  }
  uint64_t v54 = (char *)v87[1];
  if (v87[0] != v87[1])
  {
    int v55 = (void *)(a2 + 8);
    uint64_t v56 = (char *)v87[0] + 48;
    do
    {
      unint64_t v57 = *(unsigned int *)sub_BE5BD8(&v92, *((void *)v56 - 5));
      uint64_t v58 = sub_BE601C(v55, v57);
      uint64_t v59 = sub_C03398(&v89, *((void *)v56 - 4));
      sub_BE6C90((uint64_t)v128, v58, v59, (uint64_t)v56, *((_DWORD *)v56 - 2));
      if (*(unsigned char *)a2) {
        sub_BEAE64((uint64_t)v128, (uint64_t)&v129);
      }
      int v60 = *(_DWORD *)(v58 + 176);
      int v61 = *((_DWORD *)v56 - 2);
      int v127 = -1;
      sub_A0E244((uint64_t)__p, (uint64_t)v128);
      int v62 = v61 + v60;
      int v127 = 2;
      a2 = (uint64_t)v86;
      sub_C00134(v86, v59, v62, (uint64_t)__p, v57, *(unsigned char *)(v59 + 168) == 2);
      if (v127 == 2)
      {
        sub_9F6418((uint64_t)__p);
      }
      else if (!v127)
      {
        if (v125)
        {
          v126 = v125;
          operator delete(v125);
        }
        if (v124 == 1)
        {
          if (v122)
          {
            v123 = v122;
            operator delete(v122);
          }
          if (v120)
          {
            v121 = v120;
            operator delete(v120);
          }
          if (v118)
          {
            v119 = v118;
            operator delete(v118);
          }
        }
        if (v117 == 1)
        {
          if (v115)
          {
            v116 = v115;
            operator delete(v115);
          }
          if (v113)
          {
            v114 = v113;
            operator delete(v113);
          }
          if (v111)
          {
            v112 = v111;
            operator delete(v111);
          }
        }
      }
      v56 += 1112;
      sub_9F6418((uint64_t)v128);
    }
    while (v56 - 48 != v54);
  }
  *(double *)(v84 + 184) = *(double *)(v84 + 184) + 1.0;
  sub_C55754(v84 + 80, (uint64_t *)v87);
  char v63 = (char *)v87[0];
  if (v87[0])
  {
    char v64 = (char *)v87[1];
    int v65 = v87[0];
    if (v87[1] != v87[0])
    {
      do
      {
        if (*(v64 - 8))
        {
          sub_3AFFFC((uint64_t)(v64 - 1064));
          *(v64 - 8) = 0;
        }
        v64 -= 1112;
      }
      while (v64 != v63);
      int v65 = v87[0];
    }
    v87[1] = v63;
    operator delete(v65);
  }
  int v66 = (char *)v89;
  if (v89)
  {
    char v67 = v90;
    uint64_t v68 = v89;
    if (v90 != v89)
    {
      do
      {
        if (*((_DWORD *)v67 - 4) == 1)
        {
          long long v69 = (void *)*((void *)v67 - 6);
          if (v69)
          {
            *((void *)v67 - 5) = v69;
            operator delete(v69);
          }
          uint64_t v70 = (void *)*((void *)v67 - 9);
          if (v70)
          {
            *((void *)v67 - 8) = v70;
            operator delete(v70);
          }
          int v71 = (void *)*((void *)v67 - 13);
          if (v71)
          {
            *((void *)v67 - 12) = v71;
            operator delete(v71);
          }
        }
        v67 -= 176;
      }
      while (v67 != v66);
      uint64_t v68 = v89;
    }
    v90 = v66;
    operator delete(v68);
  }
  if (v92)
  {
    char v93 = (char *)v92;
    operator delete(v92);
  }
  if (v105 < 0)
  {
    operator delete(v104);
    if ((v103 & 0x80000000) == 0)
    {
LABEL_134:
      unsigned __int8 v72 = (char *)v97[0];
      if (!v97[0]) {
        goto LABEL_135;
      }
      goto LABEL_140;
    }
  }
  else if ((v103 & 0x80000000) == 0)
  {
    goto LABEL_134;
  }
  operator delete(v102);
  unsigned __int8 v72 = (char *)v97[0];
  if (!v97[0])
  {
LABEL_135:
    int v73 = v95;
    if (!v95) {
      return;
    }
    goto LABEL_136;
  }
LABEL_140:
  int v74 = v97[1];
  int v75 = v72;
  if (v97[1] != v72)
  {
    long long v76 = (char *)v97[1];
    do
    {
      unint64_t v78 = (void *)*((void *)v76 - 4);
      v76 -= 32;
      v77 = v78;
      if (v78)
      {
        *(v74 - 3) = v77;
        operator delete(v77);
      }
      int v74 = v76;
    }
    while (v76 != v72);
    int v75 = (char *)v97[0];
  }
  v97[1] = v72;
  operator delete(v75);
  int v73 = v95;
  if (v95)
  {
LABEL_136:
    uint64_t v96 = v73;
    operator delete(v73);
  }
}

void sub_C031B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,char a31)
{
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
    sub_BE5E58((uint64_t)&a31);
    _Unwind_Resume(a1);
  }
  sub_BE5E58((uint64_t)&a31);
  _Unwind_Resume(a1);
}

std::string *sub_C032E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_C06D88(a2);
  if (*(_DWORD *)a1 == 2 && !*(unsigned char *)(*sub_374FE8(*(uint64_t **)(a1 + 64)) + 184) && *(unsigned char *)(a1 + 4)) {
    int v4 = 1;
  }
  else {
    int v4 = *(_DWORD *)a1;
  }
  *(_DWORD *)(a2 + 64) = v4;
  std::string::operator=((std::string *)(a2 + 72), (const std::string *)(a1 + 8));
  double result = std::string::operator=((std::string *)(a2 + 96), (const std::string *)(a1 + 32));
  *(unsigned char *)(a2 + 120) = *(unsigned char *)(a1 + 56);
  *(unsigned char *)(a2 + 121) = *(unsigned char *)(a1 + 58);
  *(unsigned char *)(a2 + 122) = *(unsigned char *)(a1 + 57);
  *(unsigned char *)(a2 + 123) = *(unsigned char *)(a1 + 60);
  return result;
}

void sub_C03384(_Unwind_Exception *a1)
{
  sub_BE5E58(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C03398(void *a1, unint64_t a2)
{
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a1[1] - *a1) >> 4) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a1[1] - *a1) >> 4));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v10 = &v15;
    }
    else {
      int v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    unsigned int v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 176 * a2;
}

void sub_C034F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

void **sub_C035D8(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    unint64_t v3 = (char *)a1[1];
    int v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((_DWORD *)v3 - 4) == 1)
        {
          int v5 = (void *)*((void *)v3 - 6);
          if (v5)
          {
            *((void *)v3 - 5) = v5;
            operator delete(v5);
          }
          uint64_t v6 = (void *)*((void *)v3 - 9);
          if (v6)
          {
            *((void *)v3 - 8) = v6;
            operator delete(v6);
          }
          long long v7 = (void *)*((void *)v3 - 13);
          if (v7)
          {
            *((void *)v3 - 12) = v7;
            operator delete(v7);
          }
        }
        v3 -= 176;
      }
      while (v3 != v2);
      int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_C03678(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  sub_725D0((uint64_t)v499);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v8 = a1;
  uint64_t v9 = sub_374E2C(*(uint64_t **)(a1 + 64), a1 + 8);
  double v10 = (double)a3 / 10.0 * (*(double *)(v9 + 32) / 3.6) * 100.0;
  if (v10 >= 0.0)
  {
    double v11 = (double)a3 / 10.0 * (*(double *)(v9 + 32) / 3.6) * 100.0;
    if (v10 >= 4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v12 = (uint64_t)(v10 + v10) + 1;
  }
  else
  {
    double v11 = (double)a3 / 10.0 * (*(double *)(v9 + 32) / 3.6) * 100.0;
    if (v10 <= -4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v12 = (uint64_t)(v10 + v10);
    if (v12 >= 1) {
      --v12;
    }
  }
  double v11 = (double)(v12 >> 1);
LABEL_9:
  if (v11 >= 9.22337204e18)
  {
    uint64_t v14 = 0x7FFFFFFFFFFFFFFELL;
    goto LABEL_20;
  }
  if (v10 >= 0.0)
  {
    if (v10 < 4.50359963e15)
    {
      uint64_t v13 = (uint64_t)(v10 + v10) + 1;
LABEL_18:
      double v10 = (double)(v13 >> 1);
    }
  }
  else if (v10 > -4.50359963e15)
  {
    uint64_t v13 = (uint64_t)(v10 + v10);
    if (v13 >= 1) {
      --v13;
    }
    goto LABEL_18;
  }
  uint64_t v14 = (uint64_t)v10;
LABEL_20:
  long long v496 = 0u;
  long long v497 = 0u;
  int v498 = 1065353216;
  *(_OWORD *)v493 = 0u;
  *(_OWORD *)v494 = 0u;
  int v495 = 1065353216;
  *(_OWORD *)v490 = 0u;
  *(_OWORD *)v491 = 0u;
  int v492 = 1065353216;
  std::string v15 = *(uint64_t **)(a2 + 88);
  if (!v15) {
    goto LABEL_717;
  }
  std::string v16 = (void *)(a2 + 8);
  if (v14 < 0) {
    __int16 v17 = -50;
  }
  else {
    __int16 v17 = 50;
  }
  double v18 = (double)(v14 / 100
               + (int)(((5243 * (__int16)(v17 + v14 % 100)) >> 19)
                     + ((5243 * (__int16)(v17 + v14 % 100)) >> 31)));
  if (v14 == 0x7FFFFFFFFFFFFFFFLL) {
    double v18 = 1.79769313e308;
  }
  double v484 = v18;
  float64x2_t v481 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
  float64x2_t v482 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
  float64x2_t v480 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
  float64x2_t v479 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
  v483 = a4;
  uint64_t v474 = v8;
  v472 = v16;
  while (2)
  {
    uint64_t v19 = sub_BE601C(v16, *((unsigned int *)v15 + 4));
    if (*(unsigned char *)(v19 + 1624)) {
      goto LABEL_28;
    }
    v473 = v15;
    unint64_t v20 = sub_BF449C(*(void **)(v8 + 72), (void *)v19);
    unint64_t v488 = v20;
    int v489 = v21;
    uint64_t v22 = *(uint64_t **)(v8 + 72);
    if (!*v22) {
      goto LABEL_196;
    }
    if (v20 == -1 && v20 > 0xFFFFFFFEFFFFFFFFLL) {
      goto LABEL_196;
    }
    v485 = 0;
    v486 = 0;
    uint64_t v487 = 0;
    v505 = 0;
    v506 = 0;
    uint64_t v507 = 0;
    unint64_t v508 = 0xFFFFFFFF00000000;
    v502 = 0;
    v503 = 0;
    unint64_t v504 = 0;
    LODWORD(v525[0]) = 1;
    int v526 = 0;
    sub_C06F58((uint64_t *)&v502, v525, 0.0);
    uint64_t v25 = (uint64_t)v502;
    unint64_t v26 = v503;
    if (v502 != v503)
    {
      while (1)
      {
        if (0xAAAAAAAAAAAAAAABLL * ((v486 - v485) >> 4) > 0xFFFFFFFE) {
          goto LABEL_36;
        }
        double v27 = *(double *)v25;
        unsigned int v28 = (long long *)(v25 + 8);
        int v29 = *(_DWORD *)(v25 + 56);
        int v524 = v29;
        if (v29 == 1)
        {
          long long v32 = *v28;
          long long v33 = *(_OWORD *)(v25 + 40);
          uint64_t v24 = &v496;
          long long v522 = *(_OWORD *)(v25 + 24);
          long long v523 = v33;
          long long v521 = v32;
          uint64_t v30 = (uint64_t)v26 - v25;
          if ((uint64_t)v26 - v25 < 65) {
            goto LABEL_49;
          }
        }
        else
        {
          if (!v29)
          {
            LODWORD(v24) = *(_DWORD *)v28;
            LODWORD(v521) = *(_DWORD *)v28;
          }
          uint64_t v30 = (uint64_t)v26 - v25;
          if ((uint64_t)v26 - v25 < 65)
          {
LABEL_49:
            v26 -= 8;
            v503 = v26;
            if (v27 > v484) {
              goto LABEL_188;
            }
            goto LABEL_100;
          }
        }
        double v31 = *(double *)v25;
        if (v29 == 1)
        {
          LODWORD(v24) = *(_DWORD *)(v25 + 8);
          long long v509 = *(_OWORD *)(v25 + 12);
          *(_OWORD *)v510 = *(_OWORD *)(v25 + 28);
          *(_OWORD *)&v510[12] = *(_OWORD *)(v25 + 40);
        }
        else if (!v29)
        {
          LODWORD(v24) = *(_DWORD *)v28;
        }
        uint64_t v34 = 0;
        uint64_t v35 = v30 >> 6;
        int64_t v36 = (unint64_t)((v30 >> 6) - 2) >> 1;
        uint64_t v37 = v25;
        do
        {
          uint64_t v40 = v37;
          v37 += (v34 << 6) + 64;
          uint64_t v41 = 2 * v34;
          uint64_t v34 = (2 * v34) | 1;
          uint64_t v42 = v41 + 2;
          if (v42 < v35 && *(double *)v37 > *(double *)(v37 + 64))
          {
            v37 += 64;
            uint64_t v34 = v42;
          }
          uint64_t v43 = (long long *)(v37 + 8);
          *(void *)uint64_t v40 = *(void *)v37;
          uint64_t v44 = (_OWORD *)(v40 + 8);
          if (v40 != v37)
          {
            int v45 = *(_DWORD *)(v40 + 56);
            int v46 = *(_DWORD *)(v37 + 56);
            if (v45 == v46)
            {
              if (v45 == 1)
              {
                long long v47 = *v43;
                long long v48 = *(_OWORD *)(v37 + 24);
                *(_OWORD *)(v40 + 36) = *(_OWORD *)(v37 + 36);
                *uint64_t v44 = v47;
                *(_OWORD *)(v40 + 24) = v48;
              }
              else if (!v45)
              {
                *(_DWORD *)uint64_t v44 = *(_DWORD *)v43;
              }
            }
            else
            {
              if (v46 == 1)
              {
                long long v38 = *v43;
                long long v39 = *(_OWORD *)(v37 + 40);
                *(_OWORD *)(v40 + 24) = *(_OWORD *)(v37 + 24);
                *(_OWORD *)(v40 + 40) = v39;
                *uint64_t v44 = v38;
              }
              else if (!v46)
              {
                *(_DWORD *)uint64_t v44 = *(_DWORD *)v43;
              }
              *(_DWORD *)(v40 + 56) = *(_DWORD *)(v37 + 56);
            }
          }
        }
        while (v34 <= v36);
        if ((double *)v37 != v26 - 8) {
          break;
        }
        *(double *)uint64_t v37 = v31;
        if (*(_DWORD *)(v37 + 56) == v29)
        {
          if (v29 == 1)
          {
            *(_DWORD *)(v37 + 8) = v24;
            long long v130 = v509;
            long long v131 = *(_OWORD *)v510;
            *(void *)(v37 + 44) = *(void *)&v510[16];
            *(_OWORD *)(v37 + 28) = v131;
            *(_OWORD *)(v37 + 12) = v130;
          }
          else if (!v29)
          {
            *(_DWORD *)uint64_t v43 = v24;
          }
        }
        else
        {
          if (v29 == 1)
          {
            *(_DWORD *)(v37 + 8) = v24;
            long long v132 = v509;
            long long v133 = *(_OWORD *)v510;
            *(_OWORD *)(v37 + 40) = *(_OWORD *)&v510[12];
            *(_OWORD *)(v37 + 28) = v133;
            *(_OWORD *)(v37 + 12) = v132;
          }
          else if (!v29)
          {
            *(_DWORD *)uint64_t v43 = v24;
            *(_DWORD *)(v37 + 56) = 0;
            goto LABEL_99;
          }
          *(_DWORD *)(v37 + 56) = v29;
        }
LABEL_99:
        unint64_t v26 = v503 - 8;
        v503 -= 8;
        if (v27 > v484) {
          goto LABEL_188;
        }
LABEL_100:
        LODWORD(v24) = HIDWORD(v508);
        if (HIDWORD(v508) == (v506 - (unsigned char *)v505) >> 3)
        {
          if (v27 > *(double *)v505) {
            goto LABEL_188;
          }
        }
        else if (v27 > 1.79769313e308)
        {
LABEL_188:
          unint64_t v26 = v502;
LABEL_189:
          if (!v26) {
            goto LABEL_191;
          }
          goto LABEL_190;
        }
        int v60 = v524;
        if (!v524)
        {
          uint64_t v67 = v521;
          uint64_t v68 = (unsigned int *)sub_2AB884(*v22, 6, v521, 1);
          if (v69)
          {
            uint64_t v70 = *v68;
            int v71 = (char *)v68 + v70;
            unsigned __int8 v72 = (unsigned __int16 *)((char *)v68 + v70 - *(int *)((char *)v68 + v70));
            if (*v72 >= 0x1Du)
            {
              uint64_t v73 = v72[14];
              if (v73)
              {
                int v74 = &v71[v73];
                uint64_t v75 = *(unsigned int *)&v71[v73];
                uint64_t v76 = *(unsigned int *)&v74[v75];
                if (v76)
                {
                  uint64_t v77 = 0;
                  uint64_t v78 = 0;
                  uint64_t v79 = 4 * v76;
                  v80 = (char *)v68 + v73 + v70 + v75;
                  do
                  {
                    unint64_t v81 = (unint64_t)&v80[v77
                                               + *(unsigned int *)&v80[v77 + 4]
                                               + *(unsigned __int16 *)&v80[v77
                                                                         + 10
                                                                         + *(unsigned int *)&v80[v77 + 4]
                                                                         - (uint64_t)*(int *)&v80[v77
                                                                                               + 4
                                                                                               + *(unsigned int *)&v80[v77 + 4]]]];
                    uint64_t v83 = *(unsigned int *)(v81 + 4);
                    unsigned int v82 = *(_DWORD *)(v81 + 8);
                    if (v82 >= 0xFFFFFFFE) {
                      uint64_t v84 = 4294967294;
                    }
                    else {
                      uint64_t v84 = v82;
                    }
                    long double v85 = exp(3.14159265 - (double)v84 * 6.28318531 / 4294967300.0);
                    *(double *)&unint64_t v86 = atan((v85 - 1.0 / v85) * 0.5) * 57.2957795;
                    long double v87 = *(double *)&v86 * 0.0174532925;
                    LODWORD(v86) = HIDWORD(v488);
                    long double v88 = exp(3.14159265 - (double)v86 * 6.28318531 / 4294967300.0);
                    long double v89 = atan((v88 - 1.0 / v88) * 0.5) * 57.2957795 * 0.0174532925;
                    v90.i64[0] = v83;
                    v90.i64[1] = v488;
                    int64x2_t v91 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v90), v482), v481), v480), v479);
                    double v475 = vsubq_f64((float64x2_t)v91, (float64x2_t)vdupq_laneq_s64(v91, 1)).f64[0];
                    long double v92 = sin((v87 - v89) * 0.5);
                    long double v93 = v92 * v92;
                    double v94 = cos(v87);
                    long double v95 = v94 * cos(v89);
                    long double v96 = sin(0.5 * v475);
                    long double v97 = atan2(sqrt(v93 + v95 * (v96 * v96)), sqrt(1.0 - (v93 + v95 * (v96 * v96))));
                    double v98 = (v97 + v97) * 6372797.56;
                    if (v98 != 1.79769313e308)
                    {
                      if (HIDWORD(v508) == (v506 - (unsigned char *)v505) >> 3)
                      {
                        if (v98 < *(double *)v505 && v98 < v484) {
                          goto LABEL_149;
                        }
                      }
                      else if (v98 < 1.79769313e308 && v98 < v484)
                      {
LABEL_149:
                        if (sub_29C8())
                        {
                          *(double *)&long long v509 = v98;
                          sub_408754((uint64_t)&v505, (double *)&v509);
                          *(double *)&long long v509 = v98;
                          *((void *)&v509 + 1) = v78 | (v67 << 32);
                          *(void *)v510 = v83 | (v84 << 32);
                          *(_DWORD *)&v510[8] = 0x7FFFFFFF;
                          *(void *)&v510[16] = -1;
                          *(_DWORD *)&v510[24] = 0;
                          int v511 = 1;
                          sub_C06F58((uint64_t *)&v502, &v509, v98);
                        }
                      }
                    }
                    ++v78;
                    v77 += 4;
                  }
                  while (v79 != v77);
                }
              }
            }
          }
          uint64_t v101 = 0;
          v102 = v502;
          int v103 = 4 * v67;
          a4 = v483;
          uint64_t v8 = v474;
          while (2)
          {
            if (sub_511FC(v67) >= 0x1E)
            {
LABEL_38:
              v502 = v102;
              unint64_t v26 = v503;
              goto LABEL_39;
            }
            LODWORD(__p[0]) = v101 + v103;
            char v105 = (unsigned int *)sub_2AB884(*v22, 6, (int)v101 + v103, 1);
            if (!v106
              || (uint64_t v107 = (int *)((char *)v105 + *v105),
                  long long v108 = (unsigned __int16 *)((char *)v107 - *v107),
                  LODWORD(v24) = *v108,
                  v24 < 0x37)
              || (uint64_t v109 = v108[27]) == 0
              || !*((unsigned char *)v107 + v109))
            {
LABEL_154:
              if (++v101 == 4) {
                goto LABEL_38;
              }
              continue;
            }
            break;
          }
          sub_383CC((unsigned int *)__p, (uint64_t)&v509);
          double v111 = sub_35C04((unsigned int *)&v509, (unsigned int *)&v488, 0, v110);
          LODWORD(v24) = HIDWORD(v508);
          if (HIDWORD(v508) == (v506 - (unsigned char *)v505) >> 3)
          {
            if (v111 >= *(double *)v505) {
              goto LABEL_154;
            }
          }
          else if (v111 >= 1.79769313e308)
          {
            goto LABEL_154;
          }
          if (v111 >= v484) {
            goto LABEL_154;
          }
          int v112 = (int)__p[0];
          v113 = v503;
          if ((unint64_t)v503 < v504)
          {
            double *v503 = v111;
            *((_DWORD *)v113 + 14) = 0;
            uint64_t v104 = (uint64_t)(v113 + 8);
            *((_DWORD *)v113 + 2) = v112;
            a4 = v483;
            uint64_t v8 = v474;
          }
          else
          {
            uint64_t v114 = ((char *)v503 - (char *)v102) >> 6;
            unint64_t v115 = v114 + 1;
            if ((unint64_t)(v114 + 1) >> 58)
            {
              v502 = v102;
              sub_2E00();
            }
            uint64_t v116 = v504 - (void)v102;
            if ((uint64_t)(v504 - (void)v102) >> 5 > v115) {
              unint64_t v115 = v116 >> 5;
            }
            if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFC0) {
              unint64_t v117 = 0x3FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v117 = v115;
            }
            if (v117 >> 58)
            {
              v502 = v102;
              sub_188D718();
            }
            v118 = (char *)operator new(v117 << 6);
            v119 = &v118[64 * v114];
            *(double *)v119 = v111;
            *((_DWORD *)v119 + 14) = 0;
            *((_DWORD *)v119 + 2) = v112;
            if (v113 == v102)
            {
              int v127 = &v118[64 * v114];
              a4 = v483;
              uint64_t v129 = &v118[64 * v117];
              uint64_t v104 = (uint64_t)(v119 + 64);
              v503 = (double *)(v119 + 64);
              unint64_t v504 = (unint64_t)v129;
              uint64_t v8 = v474;
              if (v102) {
                goto LABEL_181;
              }
            }
            else
            {
              uint64_t v120 = 0;
              a4 = v483;
              do
              {
                v123 = &v119[v120 * 8];
                *((double *)v123 - 8) = v113[v120 - 8];
                int v124 = &v119[v120 * 8 - 56];
                v125 = &v113[v120 - 7];
                int v126 = LODWORD(v113[v120 - 1]);
                *((_DWORD *)v123 - 2) = v126;
                if (v126 == 1)
                {
                  long long v121 = *(_OWORD *)v125;
                  long long v122 = *(_OWORD *)&v113[v120 - 3];
                  *(_OWORD *)&v119[v120 * 8 - 40] = *(_OWORD *)&v113[v120 - 5];
                  *(_OWORD *)&v119[v120 * 8 - 24] = v122;
                  *(_OWORD *)int v124 = v121;
                }
                else if (!v126)
                {
                  *(_DWORD *)int v124 = *(_DWORD *)v125;
                }
                v120 -= 8;
              }
              while (&v113[v120] != v102);
              int v127 = &v119[v120 * 8];
              v128 = &v118[64 * v117];
              uint64_t v104 = (uint64_t)(v119 + 64);
              v503 = (double *)(v119 + 64);
              unint64_t v504 = (unint64_t)v128;
              uint64_t v8 = v474;
              if (v102) {
LABEL_181:
              }
                operator delete(v102);
            }
            v102 = (double *)v127;
          }
          v503 = (double *)v104;
          sub_4089D4((uint64_t)v102, v104, (v104 - (uint64_t)v102) >> 6);
          goto LABEL_154;
        }
        if (v524 == 1) {
          int v61 = &v521;
        }
        else {
          int v61 = 0;
        }
        if (v524 != 1 && sub_723EC(3u))
        {
          sub_6BAC((uint64_t)&v509);
          sub_188FC78(&v509, (uint64_t)"NN search ignored result_t element!", 35);
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 3u);
          if (v501 < 0) {
            operator delete(__p[0]);
          }
          *(void *)&long long v509 = v471;
          *(void *)&v510[*(void *)(v471 - 24) - 16] = v470;
          if (v514 < 0) {
            operator delete(v512);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        int v62 = v485;
        if (v485 != v486)
        {
          char v63 = dword_8;
          if (v60 == 1) {
            char v63 = (_DWORD *)&v521 + 2;
          }
          int v65 = v63;
          int v64 = *v63;
          LODWORD(v24) = v65[1];
          while (*((_DWORD *)v62 + 3) != v24 || *((_DWORD *)v62 + 2) != v64)
          {
            v62 += 48;
            if (v62 == v486)
            {
              int v62 = v486;
              break;
            }
          }
        }
        if (v62 == v486) {
          sub_408220(&v485, v61);
        }
LABEL_39:
        uint64_t v25 = (uint64_t)v502;
        if (v502 == v26) {
          goto LABEL_189;
        }
      }
      *(double *)uint64_t v37 = *(v26 - 8);
      int v49 = v26 - 7;
      int v50 = *(_DWORD *)(v37 + 56);
      int v51 = *((_DWORD *)v26 - 2);
      if (v50 != v51)
      {
        if (v51 == 1)
        {
          long long v54 = *(_OWORD *)v49;
          long long v55 = *(_OWORD *)(v26 - 3);
          *(_OWORD *)(v37 + 24) = *(_OWORD *)(v26 - 5);
          *(_OWORD *)(v37 + 40) = v55;
          long long *v43 = v54;
          *(_DWORD *)(v37 + 56) = *((_DWORD *)v26 - 2);
          *(v26 - 8) = v31;
          if (*((_DWORD *)v26 - 2) != v29) {
            goto LABEL_82;
          }
        }
        else
        {
          if (!v51) {
            *(_DWORD *)uint64_t v43 = *(_DWORD *)v49;
          }
          *(_DWORD *)(v37 + 56) = *((_DWORD *)v26 - 2);
          *(v26 - 8) = v31;
          if (*((_DWORD *)v26 - 2) != v29) {
            goto LABEL_82;
          }
        }
        goto LABEL_90;
      }
      if (v50 == 1)
      {
        long long v52 = *(_OWORD *)v49;
        long long v53 = *(_OWORD *)(v26 - 5);
        *(_OWORD *)(v37 + 36) = *(_OWORD *)((char *)v26 - 28);
        long long *v43 = v52;
        *(_OWORD *)(v37 + 24) = v53;
      }
      else if (!v50)
      {
        *(_DWORD *)uint64_t v43 = *(_DWORD *)v49;
        *(v26 - 8) = v31;
        if (*((_DWORD *)v26 - 2) != v29) {
          goto LABEL_82;
        }
        goto LABEL_90;
      }
      *(v26 - 8) = v31;
      if (*((_DWORD *)v26 - 2) != v29)
      {
LABEL_82:
        if (v29 == 1)
        {
          *((_DWORD *)v26 - 14) = v24;
          long long v56 = v509;
          long long v57 = *(_OWORD *)v510;
          *(_OWORD *)(v26 - 3) = *(_OWORD *)&v510[12];
          *(_OWORD *)((char *)v26 - 36) = v57;
          *(_OWORD *)((char *)v26 - 52) = v56;
        }
        else if (!v29)
        {
          *(_DWORD *)int v49 = v24;
        }
        *((_DWORD *)v26 - 2) = v29;
LABEL_98:
        sub_4089D4(v25, v37 + 64, (v37 + 64 - v25) >> 6);
        goto LABEL_99;
      }
LABEL_90:
      if (v29 == 1)
      {
        *((_DWORD *)v26 - 14) = v24;
        long long v58 = v509;
        long long v59 = *(_OWORD *)v510;
        *(double *)((char *)v26 - 20) = *(double *)&v510[16];
        *(_OWORD *)((char *)v26 - 36) = v59;
        *(_OWORD *)((char *)v26 - 52) = v58;
      }
      else if (!v29)
      {
        *(_DWORD *)int v49 = v24;
      }
      goto LABEL_98;
    }
LABEL_36:
    unint64_t v26 = (double *)v25;
    if (v25)
    {
LABEL_190:
      v503 = v26;
      operator delete(v26);
    }
LABEL_191:
    if (v505)
    {
      v506 = v505;
      operator delete(v505);
    }
    v135 = v485;
    v134 = v486;
    if (v485 == v486)
    {
      if (v486) {
        goto LABEL_195;
      }
      goto LABEL_196;
    }
    do
    {
      v141 = v135 + 8;
      unint64_t v140 = *((void *)v135 + 1);
      if (*((void *)&v496 + 1))
      {
        unint64_t v142 = 0xC4CEB9FE1A85EC53
             * ((0xFF51AFD7ED558CCDLL * (v140 ^ (v140 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v140 ^ (v140 >> 33))) >> 33));
        unint64_t v143 = v142 ^ (v142 >> 33);
        uint8x8_t v144 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v496 + 8));
        v144.i16[0] = vaddlv_u8(v144);
        if (v144.u32[0] > 1uLL)
        {
          unint64_t v145 = v143;
          if (v143 >= *((void *)&v496 + 1)) {
            unint64_t v145 = v143 % *((void *)&v496 + 1);
          }
        }
        else
        {
          unint64_t v145 = v143 & (*((void *)&v496 + 1) - 1);
        }
        v146 = *(uint64_t ***)(v496 + 8 * v145);
        if (v146)
        {
          v147 = *v146;
          if (v147)
          {
            if (v144.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v151 = v147[1];
                if (v143 == v151)
                {
                  if (*((_DWORD *)v147 + 5) == HIDWORD(v140) && *((_DWORD *)v147 + 4) == v140) {
                    goto LABEL_202;
                  }
                }
                else if ((v151 & (*((void *)&v496 + 1) - 1)) != v145)
                {
                  goto LABEL_229;
                }
                v147 = (uint64_t *)*v147;
                if (!v147) {
                  goto LABEL_229;
                }
              }
            }
            do
            {
              unint64_t v149 = v147[1];
              if (v143 == v149)
              {
                if (*((_DWORD *)v147 + 5) == HIDWORD(v140) && *((_DWORD *)v147 + 4) == v140) {
                  goto LABEL_202;
                }
              }
              else
              {
                if (v149 >= *((void *)&v496 + 1)) {
                  v149 %= *((void *)&v496 + 1);
                }
                if (v149 != v145) {
                  break;
                }
              }
              v147 = (uint64_t *)*v147;
            }
            while (v147);
          }
        }
      }
LABEL_229:
      BOOL v152 = HIDWORD(v140) != 1 || (v140 + 3) >= 2;
      if (!v152) {
        goto LABEL_738;
      }
      uint64_t v153 = *(void *)(v8 + 72);
      v154 = (int *)sub_498D5C(*(void *)(v153 + 4120) + 24, __ROR8__(v140, 32), 0, "stop");
      v155 = (unsigned __int16 *)((char *)v154 - *v154);
      if (*v155 < 0xDu) {
        goto LABEL_738;
      }
      unsigned __int16 v156 = v155[6];
      if (!v156) {
        goto LABEL_738;
      }
      uint64_t v158 = *(unsigned int *)((char *)v154 + v156);
      uint64_t v157 = *(unsigned int *)((char *)v154 + v156 + 4);
      BOOL v159 = v157 == -1 || v158 == 0;
      if (v159
        || (v160 = (int *)sub_8ED928(*(void *)(v153 + 4128) + 24, __ROR8__(v157 | (v158 << 32), 32), 0, "station"),
            v161 = (unsigned __int16 *)((char *)v160 - *v160),
            *v161 < 0xBu)
        || (uint64_t v162 = v161[5]) == 0
        || !*(int *)((char *)v160 + v162 + *(unsigned int *)((char *)v160 + v162)))
      {
LABEL_738:
        if (!*(unsigned char *)(v8 + 59)) {
          goto LABEL_254;
        }
        uint64_t v163 = *(void *)(v8 + 72);
        if (HIDWORD(*v141) != 1 || *v141 + 3 >= 2)
        {
          v165 = (int *)sub_498D5C(*(void *)(v163 + 4120) + 24, __ROR8__(*v141, 32), 0, "stop");
          uint64_t v166 = (uint64_t)v165 + *(unsigned __int16 *)((char *)v165 - *v165 + 6);
          uint64_t v167 = *(unsigned int *)v166;
          LODWORD(v166) = *(_DWORD *)(v166 + 4);
          uint64_t v166 = v166 >= 0xFFFFFFFE ? 4294967294 : v166;
          uint64_t v168 = v167 | (v166 << 32);
        }
        else
        {
          uint64_t v168 = -1;
        }
        *(void *)&long long v509 = v168;
        DWORD2(v509) = 0x7FFFFFFF;
        if (sub_73930((void ***)v163, &v509))
        {
LABEL_254:
          uint64_t v169 = *v141;
          *(void *)&long long v509 = *v141;
          int v519 = 0;
          char v520 = 2;
          unint64_t v170 = a4[1];
          if (v170 >= a4[2])
          {
            a4[1] = sub_C07144(a4, (uint64_t)&v509);
            if (v519 != 1)
            {
LABEL_201:
              sub_B5AAE8((uint64_t)&v496, (uint64_t *)v135 + 1, (void *)v135 + 1);
              goto LABEL_202;
            }
          }
          else
          {
            *(_DWORD *)(v170 + 160) = 0;
            if (v519 == 1)
            {
              unint64_t v170 = sub_44479C(v170, (uint64_t)&v509);
            }
            else if (!v519)
            {
              *(void *)unint64_t v170 = v169;
            }
            *(unsigned char *)(v170 + 168) = v520;
            a4[1] = v170 + 176;
            if (v519 != 1) {
              goto LABEL_201;
            }
          }
          if (v517)
          {
            v518 = v517;
            operator delete(v517);
          }
          if (v515)
          {
            v516 = v515;
            operator delete(v515);
          }
          if (v512)
          {
            v513 = v512;
            operator delete(v512);
          }
          goto LABEL_201;
        }
      }
LABEL_202:
      v135 += 48;
    }
    while (v135 != v134);
    v134 = v485;
    if (!v485) {
      goto LABEL_196;
    }
LABEL_195:
    v486 = v134;
    operator delete(v134);
LABEL_196:
    v136 = *(uint64_t **)(v8 + 72);
    if (!*v136 || v488 == -1) {
      goto LABEL_428;
    }
    v485 = 0;
    v486 = 0;
    uint64_t v487 = 0;
    v505 = 0;
    v506 = 0;
    uint64_t v507 = 0;
    unint64_t v508 = 0xFFFFFFFF00000000;
    v502 = 0;
    v503 = 0;
    unint64_t v504 = 0;
    LODWORD(v525[0]) = 1;
    int v526 = 0;
    sub_C06F58((uint64_t *)&v502, v525, 0.0);
    uint64_t v138 = (uint64_t)v502;
    v139 = v503;
    if (v502 == v503)
    {
LABEL_199:
      v139 = (double *)v138;
      if (!v138) {
        goto LABEL_423;
      }
LABEL_422:
      v503 = v139;
      operator delete(v139);
      goto LABEL_423;
    }
    while (2)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((v486 - v485) >> 4) > 0xFFFFFFFE) {
        goto LABEL_199;
      }
      double v171 = *(double *)v138;
      v172 = (long long *)(v138 + 8);
      int v173 = *(_DWORD *)(v138 + 56);
      int v524 = v173;
      if (v173 == 1)
      {
        long long v176 = *v172;
        long long v177 = *(_OWORD *)(v138 + 40);
        v137 = &v496;
        long long v522 = *(_OWORD *)(v138 + 24);
        long long v523 = v177;
        long long v521 = v176;
        uint64_t v174 = (uint64_t)v139 - v138;
        if ((uint64_t)v139 - v138 >= 65) {
          goto LABEL_275;
        }
        goto LABEL_279;
      }
      if (!v173)
      {
        LODWORD(v137) = *(_DWORD *)v172;
        LODWORD(v521) = *(_DWORD *)v172;
      }
      uint64_t v174 = (uint64_t)v139 - v138;
      if ((uint64_t)v139 - v138 < 65)
      {
LABEL_279:
        v139 -= 8;
        v503 = v139;
        if (v171 > v484) {
          goto LABEL_420;
        }
        goto LABEL_330;
      }
LABEL_275:
      double v175 = *(double *)v138;
      if (v173 == 1)
      {
        LODWORD(v137) = *(_DWORD *)(v138 + 8);
        long long v509 = *(_OWORD *)(v138 + 12);
        *(_OWORD *)v510 = *(_OWORD *)(v138 + 28);
        *(_OWORD *)&v510[12] = *(_OWORD *)(v138 + 40);
      }
      else if (!v173)
      {
        LODWORD(v137) = *(_DWORD *)v172;
      }
      uint64_t v178 = 0;
      uint64_t v179 = v174 >> 6;
      int64_t v180 = (unint64_t)((v174 >> 6) - 2) >> 1;
      uint64_t v181 = v138;
      do
      {
        uint64_t v184 = v181;
        v181 += (v178 << 6) + 64;
        uint64_t v185 = 2 * v178;
        uint64_t v178 = (2 * v178) | 1;
        uint64_t v186 = v185 + 2;
        if (v186 < v179 && *(double *)v181 > *(double *)(v181 + 64))
        {
          v181 += 64;
          uint64_t v178 = v186;
        }
        v187 = (long long *)(v181 + 8);
        *(void *)uint64_t v184 = *(void *)v181;
        v188 = (_OWORD *)(v184 + 8);
        if (v184 != v181)
        {
          int v189 = *(_DWORD *)(v184 + 56);
          int v190 = *(_DWORD *)(v181 + 56);
          if (v189 == v190)
          {
            if (v189 == 1)
            {
              long long v191 = *v187;
              long long v192 = *(_OWORD *)(v181 + 24);
              *(_OWORD *)(v184 + 36) = *(_OWORD *)(v181 + 36);
              _OWORD *v188 = v191;
              *(_OWORD *)(v184 + 24) = v192;
            }
            else if (!v189)
            {
              *(_DWORD *)v188 = *(_DWORD *)v187;
            }
          }
          else
          {
            if (v190 == 1)
            {
              long long v182 = *v187;
              long long v183 = *(_OWORD *)(v181 + 40);
              *(_OWORD *)(v184 + 24) = *(_OWORD *)(v181 + 24);
              *(_OWORD *)(v184 + 40) = v183;
              _OWORD *v188 = v182;
            }
            else if (!v190)
            {
              *(_DWORD *)v188 = *(_DWORD *)v187;
            }
            *(_DWORD *)(v184 + 56) = *(_DWORD *)(v181 + 56);
          }
        }
      }
      while (v178 <= v180);
      if ((double *)v181 == v139 - 8)
      {
        *(double *)uint64_t v181 = v175;
        if (*(_DWORD *)(v181 + 56) == v173)
        {
          if (v173 == 1)
          {
            *(_DWORD *)(v181 + 8) = v137;
            long long v274 = v509;
            long long v275 = *(_OWORD *)v510;
            *(void *)(v181 + 44) = *(void *)&v510[16];
            *(_OWORD *)(v181 + 28) = v275;
            *(_OWORD *)(v181 + 12) = v274;
          }
          else if (!v173)
          {
            *(_DWORD *)v187 = v137;
          }
          goto LABEL_329;
        }
        if (v173 == 1)
        {
          *(_DWORD *)(v181 + 8) = v137;
          long long v276 = v509;
          long long v277 = *(_OWORD *)v510;
          *(_OWORD *)(v181 + 40) = *(_OWORD *)&v510[12];
          *(_OWORD *)(v181 + 28) = v277;
          *(_OWORD *)(v181 + 12) = v276;
        }
        else if (!v173)
        {
          *(_DWORD *)v187 = v137;
          *(_DWORD *)(v181 + 56) = 0;
          goto LABEL_329;
        }
        *(_DWORD *)(v181 + 56) = v173;
        goto LABEL_329;
      }
      *(double *)uint64_t v181 = *(v139 - 8);
      v193 = v139 - 7;
      int v194 = *(_DWORD *)(v181 + 56);
      int v195 = *((_DWORD *)v139 - 2);
      if (v194 != v195)
      {
        if (v195 == 1)
        {
          long long v198 = *(_OWORD *)v193;
          long long v199 = *(_OWORD *)(v139 - 3);
          *(_OWORD *)(v181 + 24) = *(_OWORD *)(v139 - 5);
          *(_OWORD *)(v181 + 40) = v199;
          long long *v187 = v198;
          *(_DWORD *)(v181 + 56) = *((_DWORD *)v139 - 2);
          *(v139 - 8) = v175;
          if (*((_DWORD *)v139 - 2) == v173) {
            goto LABEL_320;
          }
        }
        else
        {
          if (!v195) {
            *(_DWORD *)v187 = *(_DWORD *)v193;
          }
          *(_DWORD *)(v181 + 56) = *((_DWORD *)v139 - 2);
          *(v139 - 8) = v175;
          if (*((_DWORD *)v139 - 2) == v173) {
            goto LABEL_320;
          }
        }
LABEL_312:
        if (v173 == 1)
        {
          *((_DWORD *)v139 - 14) = v137;
          long long v200 = v509;
          long long v201 = *(_OWORD *)v510;
          *(_OWORD *)(v139 - 3) = *(_OWORD *)&v510[12];
          *(_OWORD *)((char *)v139 - 36) = v201;
          *(_OWORD *)((char *)v139 - 52) = v200;
        }
        else if (!v173)
        {
          *(_DWORD *)v193 = v137;
        }
        *((_DWORD *)v139 - 2) = v173;
        goto LABEL_328;
      }
      if (v194 == 1)
      {
        long long v196 = *(_OWORD *)v193;
        long long v197 = *(_OWORD *)(v139 - 5);
        *(_OWORD *)(v181 + 36) = *(_OWORD *)((char *)v139 - 28);
        long long *v187 = v196;
        *(_OWORD *)(v181 + 24) = v197;
LABEL_319:
        *(v139 - 8) = v175;
        if (*((_DWORD *)v139 - 2) != v173) {
          goto LABEL_312;
        }
        goto LABEL_320;
      }
      if (v194) {
        goto LABEL_319;
      }
      *(_DWORD *)v187 = *(_DWORD *)v193;
      *(v139 - 8) = v175;
      if (*((_DWORD *)v139 - 2) != v173) {
        goto LABEL_312;
      }
LABEL_320:
      if (v173 == 1)
      {
        *((_DWORD *)v139 - 14) = v137;
        long long v202 = v509;
        long long v203 = *(_OWORD *)v510;
        *(double *)((char *)v139 - 20) = *(double *)&v510[16];
        *(_OWORD *)((char *)v139 - 36) = v203;
        *(_OWORD *)((char *)v139 - 52) = v202;
      }
      else if (!v173)
      {
        *(_DWORD *)v193 = v137;
      }
LABEL_328:
      sub_4089D4(v138, v181 + 64, (v181 + 64 - v138) >> 6);
LABEL_329:
      v139 = v503 - 8;
      v503 -= 8;
      if (v171 > v484) {
        goto LABEL_420;
      }
LABEL_330:
      LODWORD(v137) = HIDWORD(v508);
      if (HIDWORD(v508) == (v506 - (unsigned char *)v505) >> 3)
      {
        if (v171 > *(double *)v505) {
          goto LABEL_420;
        }
LABEL_334:
        int v204 = v524;
        if (v524)
        {
          if (v524 == 1) {
            v205 = &v521;
          }
          else {
            v205 = 0;
          }
          if (v524 != 1 && sub_723EC(3u))
          {
            sub_6BAC((uint64_t)&v509);
            sub_188FC78(&v509, (uint64_t)"NN search ignored result_t element!", 35);
            std::stringbuf::str();
            sub_7246C((uint64_t *)__p, 3u);
            if (v501 < 0) {
              operator delete(__p[0]);
            }
            *(void *)&long long v509 = v471;
            *(void *)&v510[*(void *)(v471 - 24) - 16] = v470;
            if (v514 < 0) {
              operator delete(v512);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
          v206 = v485;
          if (v485 != v486)
          {
            v207 = dword_8;
            if (v204 == 1) {
              v207 = (_DWORD *)&v521 + 2;
            }
            v209 = v207;
            int v208 = *v207;
            LODWORD(v137) = v209[1];
            while (*((_DWORD *)v206 + 3) != v137 || *((_DWORD *)v206 + 2) != v208)
            {
              v206 += 48;
              if (v206 == v486)
              {
                v206 = v486;
                break;
              }
            }
          }
          if (v206 == v486) {
            sub_408220(&v485, v205);
          }
LABEL_269:
          uint64_t v138 = (uint64_t)v502;
          if (v502 == v139) {
            goto LABEL_421;
          }
          continue;
        }
        uint64_t v211 = v521;
        v212 = (unsigned int *)sub_2AB884(*v136, 6, v521, 1);
        if (v213)
        {
          uint64_t v214 = *v212;
          v215 = (char *)v212 + v214;
          v216 = (unsigned __int16 *)((char *)v212 + v214 - *(int *)((char *)v212 + v214));
          if (*v216 >= 5u)
          {
            uint64_t v217 = v216[2];
            if (v217)
            {
              v218 = &v215[v217];
              uint64_t v219 = *(unsigned int *)&v215[v217];
              uint64_t v220 = *(unsigned int *)&v218[v219];
              if (v220)
              {
                uint64_t v221 = 0;
                uint64_t v222 = 0;
                uint64_t v223 = 4 * v220;
                v224 = (char *)v212 + v217 + v214 + v219;
                do
                {
                  unint64_t v225 = (unint64_t)&v224[v221
                                               + *(unsigned int *)&v224[v221 + 4]
                                               + *(unsigned __int16 *)&v224[v221
                                                                          + 18
                                                                          + *(unsigned int *)&v224[v221 + 4]
                                                                          - (uint64_t)*(int *)&v224[v221
                                                                                                 + 4
                                                                                                 + *(unsigned int *)&v224[v221 + 4]]]];
                  uint64_t v227 = *(unsigned int *)(v225 + 4);
                  unsigned int v226 = *(_DWORD *)(v225 + 8);
                  if (v226 >= 0xFFFFFFFE) {
                    uint64_t v228 = 4294967294;
                  }
                  else {
                    uint64_t v228 = v226;
                  }
                  long double v229 = exp(3.14159265 - (double)v228 * 6.28318531 / 4294967300.0);
                  *(double *)&unint64_t v230 = atan((v229 - 1.0 / v229) * 0.5) * 57.2957795;
                  long double v231 = *(double *)&v230 * 0.0174532925;
                  LODWORD(v230) = HIDWORD(v488);
                  long double v232 = exp(3.14159265 - (double)v230 * 6.28318531 / 4294967300.0);
                  long double v233 = atan((v232 - 1.0 / v232) * 0.5) * 57.2957795 * 0.0174532925;
                  v234.i64[0] = v227;
                  v234.i64[1] = v488;
                  int64x2_t v235 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v234), v482), v481), v480), v479);
                  double v476 = vsubq_f64((float64x2_t)v235, (float64x2_t)vdupq_laneq_s64(v235, 1)).f64[0];
                  long double v236 = sin((v231 - v233) * 0.5);
                  long double v237 = v236 * v236;
                  double v238 = cos(v231);
                  long double v239 = v238 * cos(v233);
                  long double v240 = sin(0.5 * v476);
                  long double v241 = atan2(sqrt(v237 + v239 * (v240 * v240)), sqrt(1.0 - (v237 + v239 * (v240 * v240))));
                  double v242 = (v241 + v241) * 6372797.56;
                  if (v242 != 1.79769313e308)
                  {
                    if (HIDWORD(v508) == (v506 - (unsigned char *)v505) >> 3)
                    {
                      if (v242 < *(double *)v505 && v242 < v484) {
                        goto LABEL_379;
                      }
                    }
                    else if (v242 < 1.79769313e308 && v242 < v484)
                    {
LABEL_379:
                      if (sub_29C8())
                      {
                        *(double *)&long long v509 = v242;
                        sub_408754((uint64_t)&v505, (double *)&v509);
                        *(double *)&long long v509 = v242;
                        *((void *)&v509 + 1) = v222 | (v211 << 32);
                        *(void *)v510 = v227 | (v228 << 32);
                        *(_DWORD *)&v510[8] = 0x7FFFFFFF;
                        *(void *)&v510[16] = -1;
                        *(_DWORD *)&v510[24] = 0;
                        int v511 = 1;
                        sub_C06F58((uint64_t *)&v502, &v509, v242);
                      }
                    }
                  }
                  ++v222;
                  v221 += 4;
                }
                while (v223 != v221);
              }
            }
          }
        }
        uint64_t v245 = 0;
        v246 = v502;
        int v247 = 4 * v211;
        a4 = v483;
        uint64_t v8 = v474;
        while (2)
        {
          if (sub_511FC(v211) >= 0x1E)
          {
LABEL_268:
            v502 = v246;
            v139 = v503;
            goto LABEL_269;
          }
          LODWORD(__p[0]) = v245 + v247;
          v249 = (unsigned int *)sub_2AB884(*v136, 6, (int)v245 + v247, 1);
          if (!v250
            || (v251 = (int *)((char *)v249 + *v249),
                v252 = (unsigned __int16 *)((char *)v251 - *v251),
                LODWORD(v137) = *v252,
                v137 < 0x37)
            || (uint64_t v253 = v252[27]) == 0
            || !*((unsigned char *)v251 + v253))
          {
LABEL_384:
            if (++v245 == 4) {
              goto LABEL_268;
            }
            continue;
          }
          break;
        }
        sub_383CC((unsigned int *)__p, (uint64_t)&v509);
        double v255 = sub_35C04((unsigned int *)&v509, (unsigned int *)&v488, 0, v254);
        LODWORD(v137) = HIDWORD(v508);
        if (HIDWORD(v508) == (v506 - (unsigned char *)v505) >> 3)
        {
          if (v255 >= *(double *)v505) {
            goto LABEL_384;
          }
        }
        else if (v255 >= 1.79769313e308)
        {
          goto LABEL_384;
        }
        if (v255 >= v484) {
          goto LABEL_384;
        }
        int v256 = (int)__p[0];
        v257 = v503;
        if ((unint64_t)v503 < v504)
        {
          double *v503 = v255;
          *((_DWORD *)v257 + 14) = 0;
          uint64_t v248 = (uint64_t)(v257 + 8);
          *((_DWORD *)v257 + 2) = v256;
          a4 = v483;
          uint64_t v8 = v474;
        }
        else
        {
          uint64_t v258 = ((char *)v503 - (char *)v246) >> 6;
          unint64_t v259 = v258 + 1;
          if ((unint64_t)(v258 + 1) >> 58)
          {
            v502 = v246;
            sub_2E00();
          }
          uint64_t v260 = v504 - (void)v246;
          if ((uint64_t)(v504 - (void)v246) >> 5 > v259) {
            unint64_t v259 = v260 >> 5;
          }
          if ((unint64_t)v260 >= 0x7FFFFFFFFFFFFFC0) {
            unint64_t v261 = 0x3FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v261 = v259;
          }
          if (v261 >> 58)
          {
            v502 = v246;
            sub_188D718();
          }
          v262 = (char *)operator new(v261 << 6);
          v263 = &v262[64 * v258];
          *(double *)v263 = v255;
          *((_DWORD *)v263 + 14) = 0;
          *((_DWORD *)v263 + 2) = v256;
          if (v257 == v246)
          {
            v271 = &v262[64 * v258];
            a4 = v483;
            v273 = &v262[64 * v261];
            uint64_t v248 = (uint64_t)(v263 + 64);
            v503 = (double *)(v263 + 64);
            unint64_t v504 = (unint64_t)v273;
            uint64_t v8 = v474;
            if (v246) {
              goto LABEL_411;
            }
          }
          else
          {
            uint64_t v264 = 0;
            a4 = v483;
            do
            {
              v267 = &v263[v264 * 8];
              *((double *)v267 - 8) = v257[v264 - 8];
              v268 = &v263[v264 * 8 - 56];
              v269 = &v257[v264 - 7];
              int v270 = LODWORD(v257[v264 - 1]);
              *((_DWORD *)v267 - 2) = v270;
              if (v270 == 1)
              {
                long long v265 = *(_OWORD *)v269;
                long long v266 = *(_OWORD *)&v257[v264 - 3];
                *(_OWORD *)&v263[v264 * 8 - 40] = *(_OWORD *)&v257[v264 - 5];
                *(_OWORD *)&v263[v264 * 8 - 24] = v266;
                *(_OWORD *)v268 = v265;
              }
              else if (!v270)
              {
                *(_DWORD *)v268 = *(_DWORD *)v269;
              }
              v264 -= 8;
            }
            while (&v257[v264] != v246);
            v271 = &v263[v264 * 8];
            v272 = &v262[64 * v261];
            uint64_t v248 = (uint64_t)(v263 + 64);
            v503 = (double *)(v263 + 64);
            unint64_t v504 = (unint64_t)v272;
            uint64_t v8 = v474;
            if (v246) {
LABEL_411:
            }
              operator delete(v246);
          }
          v246 = (double *)v271;
        }
        v503 = (double *)v248;
        sub_4089D4((uint64_t)v246, v248, (v248 - (uint64_t)v246) >> 6);
        goto LABEL_384;
      }
      break;
    }
    if (v171 <= 1.79769313e308) {
      goto LABEL_334;
    }
LABEL_420:
    v139 = v502;
LABEL_421:
    if (v139) {
      goto LABEL_422;
    }
LABEL_423:
    if (v505)
    {
      v506 = v505;
      operator delete(v505);
    }
    v279 = v485;
    v278 = v486;
    if (v485 == v486)
    {
      if (v486) {
        goto LABEL_427;
      }
    }
    else
    {
      do
      {
        v286 = v279 + 8;
        unint64_t v285 = *((void *)v279 + 1);
        if (v493[1])
        {
          unint64_t v287 = 0xC4CEB9FE1A85EC53
               * ((0xFF51AFD7ED558CCDLL * (v285 ^ (v285 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v285 ^ (v285 >> 33))) >> 33));
          unint64_t v288 = v287 ^ (v287 >> 33);
          uint8x8_t v289 = (uint8x8_t)vcnt_s8((int8x8_t)v493[1]);
          v289.i16[0] = vaddlv_u8(v289);
          if (v289.u32[0] > 1uLL)
          {
            unint64_t v290 = v288;
            if ((void *)v288 >= v493[1]) {
              unint64_t v290 = v288 % (unint64_t)v493[1];
            }
          }
          else
          {
            unint64_t v290 = v288 & ((unint64_t)v493[1] - 1);
          }
          v291 = (uint64_t **)*((void *)v493[0] + v290);
          if (v291)
          {
            v292 = *v291;
            if (v292)
            {
              if (v289.u32[0] < 2uLL)
              {
                while (1)
                {
                  unint64_t v296 = v292[1];
                  if (v288 == v296)
                  {
                    if (*((_DWORD *)v292 + 5) == HIDWORD(v285) && *((_DWORD *)v292 + 4) == v285) {
                      goto LABEL_435;
                    }
                  }
                  else if ((v296 & ((unint64_t)v493[1] - 1)) != v290)
                  {
                    goto LABEL_462;
                  }
                  v292 = (uint64_t *)*v292;
                  if (!v292) {
                    goto LABEL_462;
                  }
                }
              }
              do
              {
                unint64_t v294 = v292[1];
                if (v288 == v294)
                {
                  if (*((_DWORD *)v292 + 5) == HIDWORD(v285) && *((_DWORD *)v292 + 4) == v285) {
                    goto LABEL_435;
                  }
                }
                else
                {
                  if ((void *)v294 >= v493[1]) {
                    v294 %= (unint64_t)v493[1];
                  }
                  if (v294 != v290) {
                    break;
                  }
                }
                v292 = (uint64_t *)*v292;
              }
              while (v292);
            }
          }
        }
LABEL_462:
        uint64_t v297 = *(void *)(v8 + 72);
        LOBYTE(v502) = 1;
        v298 = (int *)sub_499804(*(void *)(v297 + 4008) + 24, __ROR8__(v285, 32), 0, "access point");
        v299 = (unsigned __int16 *)((char *)v298 - *v298);
        if (*v299 < 0x15u) {
          goto LABEL_739;
        }
        uint64_t v300 = v299[10];
        if (!v300) {
          goto LABEL_739;
        }
        v301 = (unsigned int *)((char *)v298 + v300 + *(unsigned int *)((char *)v298 + v300));
        *(void *)v510 = 0;
        long long v509 = 0uLL;
        *(void *)&v525[0] = v297 + 4008;
        *((void *)&v525[0] + 1) = &v502;
        uint64_t v302 = *v301;
        *(void *)&long long v521 = v301 + 1;
        v505 = &v301[2 * v302 + 1];
        sub_BE6D78((unsigned int **)&v521, (unsigned int **)&v505, (void **)&v509, (uint64_t)__p, (uint64_t **)v525);
        long long v303 = v509;
        if ((void)v509)
        {
          *((void *)&v509 + 1) = v509;
          operator delete((void *)v509);
        }
        if ((void)v303 == *((void *)&v303 + 1))
        {
LABEL_739:
          if (!*(unsigned char *)(v8 + 59)) {
            goto LABEL_472;
          }
          uint64_t v304 = *(void *)(v8 + 72);
          v305 = (int *)sub_499804(*(void *)(v304 + 4008) + 24, __ROR8__(*v286, 32), 0, "access point");
          uint64_t v306 = (uint64_t)v305 + *(unsigned __int16 *)((char *)v305 - *v305 + 14);
          uint64_t v307 = *(unsigned int *)v306;
          LODWORD(v306) = *(_DWORD *)(v306 + 4);
          uint64_t v306 = v306 >= 0xFFFFFFFE ? 4294967294 : v306;
          *(void *)&long long v509 = v307 | (v306 << 32);
          DWORD2(v509) = 0x7FFFFFFF;
          if (sub_73930((void ***)v304, &v509))
          {
LABEL_472:
            LOBYTE(v509) = 0;
            unint64_t v308 = a4[1];
            if (v308 < a4[2])
            {
              *(void *)unint64_t v308 = *v286;
              *(_DWORD *)(v308 + 160) = 0;
              *(unsigned char *)(v308 + 168) = 0;
              v284 = (char *)(v308 + 176);
            }
            else
            {
              v284 = sub_C07388((void **)a4, (uint64_t *)v279 + 1, (char *)&v509);
            }
            a4[1] = (uint64_t)v284;
            sub_B5AAE8((uint64_t)v493, (uint64_t *)v279 + 1, (void *)v279 + 1);
          }
        }
LABEL_435:
        v279 += 48;
      }
      while (v279 != v278);
      v278 = v485;
      if (v485)
      {
LABEL_427:
        v486 = v278;
        operator delete(v278);
      }
    }
LABEL_428:
    v280 = *(uint64_t **)(v8 + 72);
    if (!*v280 || v488 == -1) {
      goto LABEL_27;
    }
    v485 = 0;
    v486 = 0;
    uint64_t v487 = 0;
    v505 = 0;
    v506 = 0;
    uint64_t v507 = 0;
    unint64_t v508 = 0xFFFFFFFF00000000;
    v502 = 0;
    v503 = 0;
    unint64_t v504 = 0;
    LODWORD(v525[0]) = 1;
    int v526 = 0;
    sub_C06F58((uint64_t *)&v502, v525, 0.0);
    uint64_t v282 = (uint64_t)v502;
    v283 = v503;
    if (v502 != v503)
    {
      while (1)
      {
        if (0xAAAAAAAAAAAAAAABLL * ((v486 - v485) >> 4) > 0xFFFFFFFE) {
          goto LABEL_431;
        }
        double v309 = *(double *)v282;
        v310 = (long long *)(v282 + 8);
        int v311 = *(_DWORD *)(v282 + 56);
        int v524 = v311;
        if (v311 == 1)
        {
          long long v314 = *v310;
          long long v315 = *(_OWORD *)(v282 + 40);
          v281 = &v496;
          long long v522 = *(_OWORD *)(v282 + 24);
          long long v523 = v315;
          long long v521 = v314;
          uint64_t v312 = (uint64_t)v283 - v282;
          if ((uint64_t)v283 - v282 < 65) {
            goto LABEL_485;
          }
        }
        else
        {
          if (!v311)
          {
            LODWORD(v281) = *(_DWORD *)v310;
            LODWORD(v521) = *(_DWORD *)v310;
          }
          uint64_t v312 = (uint64_t)v283 - v282;
          if ((uint64_t)v283 - v282 < 65)
          {
LABEL_485:
            v283 -= 8;
            v503 = v283;
            if (v309 > v484) {
              goto LABEL_626;
            }
            goto LABEL_536;
          }
        }
        double v313 = *(double *)v282;
        if (v311 == 1)
        {
          LODWORD(v281) = *(_DWORD *)(v282 + 8);
          long long v509 = *(_OWORD *)(v282 + 12);
          *(_OWORD *)v510 = *(_OWORD *)(v282 + 28);
          *(_OWORD *)&v510[12] = *(_OWORD *)(v282 + 40);
        }
        else if (!v311)
        {
          LODWORD(v281) = *(_DWORD *)v310;
        }
        uint64_t v316 = 0;
        uint64_t v317 = v312 >> 6;
        int64_t v318 = (unint64_t)((v312 >> 6) - 2) >> 1;
        uint64_t v319 = v282;
        do
        {
          uint64_t v322 = v319;
          v319 += (v316 << 6) + 64;
          uint64_t v323 = 2 * v316;
          uint64_t v316 = (2 * v316) | 1;
          uint64_t v324 = v323 + 2;
          if (v324 < v317 && *(double *)v319 > *(double *)(v319 + 64))
          {
            v319 += 64;
            uint64_t v316 = v324;
          }
          v325 = (long long *)(v319 + 8);
          *(void *)uint64_t v322 = *(void *)v319;
          v326 = (_OWORD *)(v322 + 8);
          if (v322 != v319)
          {
            int v327 = *(_DWORD *)(v322 + 56);
            int v328 = *(_DWORD *)(v319 + 56);
            if (v327 == v328)
            {
              if (v327 == 1)
              {
                long long v329 = *v325;
                long long v330 = *(_OWORD *)(v319 + 24);
                *(_OWORD *)(v322 + 36) = *(_OWORD *)(v319 + 36);
                _OWORD *v326 = v329;
                *(_OWORD *)(v322 + 24) = v330;
              }
              else if (!v327)
              {
                *(_DWORD *)v326 = *(_DWORD *)v325;
              }
            }
            else
            {
              if (v328 == 1)
              {
                long long v320 = *v325;
                long long v321 = *(_OWORD *)(v319 + 40);
                *(_OWORD *)(v322 + 24) = *(_OWORD *)(v319 + 24);
                *(_OWORD *)(v322 + 40) = v321;
                _OWORD *v326 = v320;
              }
              else if (!v328)
              {
                *(_DWORD *)v326 = *(_DWORD *)v325;
              }
              *(_DWORD *)(v322 + 56) = *(_DWORD *)(v319 + 56);
            }
          }
        }
        while (v316 <= v318);
        if ((double *)v319 != v283 - 8) {
          break;
        }
        *(double *)uint64_t v319 = v313;
        if (*(_DWORD *)(v319 + 56) == v311)
        {
          if (v311 == 1)
          {
            *(_DWORD *)(v319 + 8) = v281;
            long long v412 = v509;
            long long v413 = *(_OWORD *)v510;
            *(void *)(v319 + 44) = *(void *)&v510[16];
            *(_OWORD *)(v319 + 28) = v413;
            *(_OWORD *)(v319 + 12) = v412;
          }
          else if (!v311)
          {
            *(_DWORD *)v325 = v281;
          }
        }
        else
        {
          if (v311 == 1)
          {
            *(_DWORD *)(v319 + 8) = v281;
            long long v414 = v509;
            long long v415 = *(_OWORD *)v510;
            *(_OWORD *)(v319 + 40) = *(_OWORD *)&v510[12];
            *(_OWORD *)(v319 + 28) = v415;
            *(_OWORD *)(v319 + 12) = v414;
          }
          else if (!v311)
          {
            *(_DWORD *)v325 = v281;
            *(_DWORD *)(v319 + 56) = 0;
            goto LABEL_535;
          }
          *(_DWORD *)(v319 + 56) = v311;
        }
LABEL_535:
        v283 = v503 - 8;
        v503 -= 8;
        if (v309 > v484) {
          goto LABEL_626;
        }
LABEL_536:
        LODWORD(v281) = HIDWORD(v508);
        if (HIDWORD(v508) == (v506 - (unsigned char *)v505) >> 3)
        {
          if (v309 > *(double *)v505) {
            goto LABEL_626;
          }
        }
        else if (v309 > 1.79769313e308)
        {
LABEL_626:
          v283 = v502;
LABEL_627:
          if (v283) {
            goto LABEL_628;
          }
          goto LABEL_629;
        }
        int v342 = v524;
        if (!v524)
        {
          uint64_t v349 = v521;
          v350 = (unsigned int *)sub_2AB884(*v280, 6, v521, 1);
          if (v351)
          {
            uint64_t v352 = *v350;
            v353 = (char *)v350 + v352;
            v354 = (unsigned __int16 *)((char *)v350 + v352 - *(int *)((char *)v350 + v352));
            if (*v354 >= 0x15u)
            {
              uint64_t v355 = v354[10];
              if (v355)
              {
                v356 = &v353[v355];
                uint64_t v357 = *(unsigned int *)&v353[v355];
                uint64_t v358 = *(unsigned int *)&v356[v357];
                if (v358)
                {
                  uint64_t v359 = 0;
                  uint64_t v360 = 0;
                  uint64_t v361 = 4 * v358;
                  v362 = (char *)v350 + v355 + v352 + v357;
                  do
                  {
                    unint64_t v363 = (unint64_t)&v362[v359
                                                 + *(unsigned int *)&v362[v359 + 4]
                                                 + *(unsigned __int16 *)&v362[v359
                                                                            + 12
                                                                            + *(unsigned int *)&v362[v359 + 4]
                                                                            - (uint64_t)*(int *)&v362[v359 + 4 + *(unsigned int *)&v362[v359 + 4]]]];
                    uint64_t v365 = *(unsigned int *)(v363 + 4);
                    unsigned int v364 = *(_DWORD *)(v363 + 8);
                    if (v364 >= 0xFFFFFFFE) {
                      uint64_t v366 = 4294967294;
                    }
                    else {
                      uint64_t v366 = v364;
                    }
                    long double v367 = exp(3.14159265 - (double)v366 * 6.28318531 / 4294967300.0);
                    *(double *)&unint64_t v368 = atan((v367 - 1.0 / v367) * 0.5) * 57.2957795;
                    long double v369 = *(double *)&v368 * 0.0174532925;
                    LODWORD(v368) = HIDWORD(v488);
                    long double v370 = exp(3.14159265 - (double)v368 * 6.28318531 / 4294967300.0);
                    long double v371 = atan((v370 - 1.0 / v370) * 0.5) * 57.2957795 * 0.0174532925;
                    v372.i64[0] = v365;
                    v372.i64[1] = v488;
                    int64x2_t v373 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v372), v482), v481), v480), v479);
                    double v477 = vsubq_f64((float64x2_t)v373, (float64x2_t)vdupq_laneq_s64(v373, 1)).f64[0];
                    long double v374 = sin((v369 - v371) * 0.5);
                    long double v375 = v374 * v374;
                    double v376 = cos(v369);
                    long double v377 = v376 * cos(v371);
                    long double v378 = sin(0.5 * v477);
                    long double v379 = atan2(sqrt(v375 + v377 * (v378 * v378)), sqrt(1.0 - (v375 + v377 * (v378 * v378))));
                    double v380 = (v379 + v379) * 6372797.56;
                    if (v380 != 1.79769313e308)
                    {
                      if (HIDWORD(v508) == (v506 - (unsigned char *)v505) >> 3)
                      {
                        if (v380 < *(double *)v505 && v380 < v484) {
                          goto LABEL_585;
                        }
                      }
                      else if (v380 < 1.79769313e308 && v380 < v484)
                      {
LABEL_585:
                        if (sub_29C8())
                        {
                          *(double *)&long long v509 = v380;
                          sub_408754((uint64_t)&v505, (double *)&v509);
                          *(double *)&long long v509 = v380;
                          *((void *)&v509 + 1) = v360 | (v349 << 32);
                          *(void *)v510 = v365 | (v366 << 32);
                          *(_DWORD *)&v510[8] = 0x7FFFFFFF;
                          *(void *)&v510[16] = -1;
                          *(_DWORD *)&v510[24] = 0;
                          int v511 = 1;
                          sub_C06F58((uint64_t *)&v502, &v509, v380);
                        }
                      }
                    }
                    ++v360;
                    v359 += 4;
                  }
                  while (v361 != v359);
                }
              }
            }
          }
          uint64_t v383 = 0;
          v384 = v502;
          int v385 = 4 * v349;
          a4 = v483;
          uint64_t v8 = v474;
          while (2)
          {
            if (sub_511FC(v349) >= 0x1E)
            {
LABEL_474:
              v502 = v384;
              v283 = v503;
              goto LABEL_475;
            }
            LODWORD(__p[0]) = v383 + v385;
            v387 = (unsigned int *)sub_2AB884(*v280, 6, (int)v383 + v385, 1);
            if (!v388
              || (v389 = (int *)((char *)v387 + *v387),
                  v390 = (unsigned __int16 *)((char *)v389 - *v389),
                  LODWORD(v281) = *v390,
                  v281 < 0x37)
              || (uint64_t v391 = v390[27]) == 0
              || !*((unsigned char *)v389 + v391))
            {
LABEL_590:
              if (++v383 == 4) {
                goto LABEL_474;
              }
              continue;
            }
            break;
          }
          sub_383CC((unsigned int *)__p, (uint64_t)&v509);
          double v393 = sub_35C04((unsigned int *)&v509, (unsigned int *)&v488, 0, v392);
          LODWORD(v281) = HIDWORD(v508);
          if (HIDWORD(v508) == (v506 - (unsigned char *)v505) >> 3)
          {
            if (v393 >= *(double *)v505) {
              goto LABEL_590;
            }
          }
          else if (v393 >= 1.79769313e308)
          {
            goto LABEL_590;
          }
          if (v393 >= v484) {
            goto LABEL_590;
          }
          int v394 = (int)__p[0];
          v395 = v503;
          if ((unint64_t)v503 < v504)
          {
            double *v503 = v393;
            *((_DWORD *)v395 + 14) = 0;
            uint64_t v386 = (uint64_t)(v395 + 8);
            *((_DWORD *)v395 + 2) = v394;
            a4 = v483;
            uint64_t v8 = v474;
          }
          else
          {
            uint64_t v396 = ((char *)v503 - (char *)v384) >> 6;
            unint64_t v397 = v396 + 1;
            if ((unint64_t)(v396 + 1) >> 58)
            {
              v502 = v384;
              sub_2E00();
            }
            uint64_t v398 = v504 - (void)v384;
            if ((uint64_t)(v504 - (void)v384) >> 5 > v397) {
              unint64_t v397 = v398 >> 5;
            }
            if ((unint64_t)v398 >= 0x7FFFFFFFFFFFFFC0) {
              unint64_t v399 = 0x3FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v399 = v397;
            }
            if (v399 >> 58)
            {
              v502 = v384;
              sub_188D718();
            }
            v400 = (char *)operator new(v399 << 6);
            v401 = &v400[64 * v396];
            *(double *)v401 = v393;
            *((_DWORD *)v401 + 14) = 0;
            *((_DWORD *)v401 + 2) = v394;
            if (v395 == v384)
            {
              v409 = &v400[64 * v396];
              a4 = v483;
              v411 = &v400[64 * v399];
              uint64_t v386 = (uint64_t)(v401 + 64);
              v503 = (double *)(v401 + 64);
              unint64_t v504 = (unint64_t)v411;
              uint64_t v8 = v474;
              if (v384) {
                goto LABEL_617;
              }
            }
            else
            {
              uint64_t v402 = 0;
              a4 = v483;
              do
              {
                v405 = &v401[v402 * 8];
                *((double *)v405 - 8) = v395[v402 - 8];
                v406 = &v401[v402 * 8 - 56];
                v407 = &v395[v402 - 7];
                int v408 = LODWORD(v395[v402 - 1]);
                *((_DWORD *)v405 - 2) = v408;
                if (v408 == 1)
                {
                  long long v403 = *(_OWORD *)v407;
                  long long v404 = *(_OWORD *)&v395[v402 - 3];
                  *(_OWORD *)&v401[v402 * 8 - 40] = *(_OWORD *)&v395[v402 - 5];
                  *(_OWORD *)&v401[v402 * 8 - 24] = v404;
                  *(_OWORD *)v406 = v403;
                }
                else if (!v408)
                {
                  *(_DWORD *)v406 = *(_DWORD *)v407;
                }
                v402 -= 8;
              }
              while (&v395[v402] != v384);
              v409 = &v401[v402 * 8];
              v410 = &v400[64 * v399];
              uint64_t v386 = (uint64_t)(v401 + 64);
              v503 = (double *)(v401 + 64);
              unint64_t v504 = (unint64_t)v410;
              uint64_t v8 = v474;
              if (v384) {
LABEL_617:
              }
                operator delete(v384);
            }
            v384 = (double *)v409;
          }
          v503 = (double *)v386;
          sub_4089D4((uint64_t)v384, v386, (v386 - (uint64_t)v384) >> 6);
          goto LABEL_590;
        }
        if (v524 == 1) {
          v343 = &v521;
        }
        else {
          v343 = 0;
        }
        if (v524 != 1 && sub_723EC(3u))
        {
          sub_6BAC((uint64_t)&v509);
          sub_188FC78(&v509, (uint64_t)"NN search ignored result_t element!", 35);
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 3u);
          if (v501 < 0) {
            operator delete(__p[0]);
          }
          *(void *)&long long v509 = v471;
          *(void *)&v510[*(void *)(v471 - 24) - 16] = v470;
          if (v514 < 0) {
            operator delete(v512);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        v344 = v485;
        if (v485 != v486)
        {
          v345 = dword_8;
          if (v342 == 1) {
            v345 = (_DWORD *)&v521 + 2;
          }
          v347 = v345;
          int v346 = *v345;
          LODWORD(v281) = v347[1];
          while (*((_DWORD *)v344 + 3) != v281 || *((_DWORD *)v344 + 2) != v346)
          {
            v344 += 48;
            if (v344 == v486)
            {
              v344 = v486;
              break;
            }
          }
        }
        if (v344 == v486) {
          sub_408220(&v485, v343);
        }
LABEL_475:
        uint64_t v282 = (uint64_t)v502;
        if (v502 == v283) {
          goto LABEL_627;
        }
      }
      *(double *)uint64_t v319 = *(v283 - 8);
      v331 = v283 - 7;
      int v332 = *(_DWORD *)(v319 + 56);
      int v333 = *((_DWORD *)v283 - 2);
      if (v332 != v333)
      {
        if (v333 == 1)
        {
          long long v336 = *(_OWORD *)v331;
          long long v337 = *(_OWORD *)(v283 - 3);
          *(_OWORD *)(v319 + 24) = *(_OWORD *)(v283 - 5);
          *(_OWORD *)(v319 + 40) = v337;
          long long *v325 = v336;
          *(_DWORD *)(v319 + 56) = *((_DWORD *)v283 - 2);
          *(v283 - 8) = v313;
          if (*((_DWORD *)v283 - 2) != v311) {
            goto LABEL_518;
          }
        }
        else
        {
          if (!v333) {
            *(_DWORD *)v325 = *(_DWORD *)v331;
          }
          *(_DWORD *)(v319 + 56) = *((_DWORD *)v283 - 2);
          *(v283 - 8) = v313;
          if (*((_DWORD *)v283 - 2) != v311) {
            goto LABEL_518;
          }
        }
        goto LABEL_526;
      }
      if (v332 == 1)
      {
        long long v334 = *(_OWORD *)v331;
        long long v335 = *(_OWORD *)(v283 - 5);
        *(_OWORD *)(v319 + 36) = *(_OWORD *)((char *)v283 - 28);
        long long *v325 = v334;
        *(_OWORD *)(v319 + 24) = v335;
      }
      else if (!v332)
      {
        *(_DWORD *)v325 = *(_DWORD *)v331;
        *(v283 - 8) = v313;
        if (*((_DWORD *)v283 - 2) != v311) {
          goto LABEL_518;
        }
        goto LABEL_526;
      }
      *(v283 - 8) = v313;
      if (*((_DWORD *)v283 - 2) != v311)
      {
LABEL_518:
        if (v311 == 1)
        {
          *((_DWORD *)v283 - 14) = v281;
          long long v338 = v509;
          long long v339 = *(_OWORD *)v510;
          *(_OWORD *)(v283 - 3) = *(_OWORD *)&v510[12];
          *(_OWORD *)((char *)v283 - 36) = v339;
          *(_OWORD *)((char *)v283 - 52) = v338;
        }
        else if (!v311)
        {
          *(_DWORD *)v331 = v281;
        }
        *((_DWORD *)v283 - 2) = v311;
LABEL_534:
        sub_4089D4(v282, v319 + 64, (v319 + 64 - v282) >> 6);
        goto LABEL_535;
      }
LABEL_526:
      if (v311 == 1)
      {
        *((_DWORD *)v283 - 14) = v281;
        long long v340 = v509;
        long long v341 = *(_OWORD *)v510;
        *(double *)((char *)v283 - 20) = *(double *)&v510[16];
        *(_OWORD *)((char *)v283 - 36) = v341;
        *(_OWORD *)((char *)v283 - 52) = v340;
      }
      else if (!v311)
      {
        *(_DWORD *)v331 = v281;
      }
      goto LABEL_534;
    }
LABEL_431:
    v283 = (double *)v282;
    if (!v282) {
      goto LABEL_629;
    }
LABEL_628:
    v503 = v283;
    operator delete(v283);
LABEL_629:
    if (v505)
    {
      v506 = v505;
      operator delete(v505);
    }
    v417 = v485;
    v416 = v486;
    if (v485 == v486)
    {
      if (v486) {
        goto LABEL_716;
      }
      goto LABEL_27;
    }
    while (2)
    {
      v419 = v417 + 8;
      unint64_t v418 = *((void *)v417 + 1);
      if (v490[1])
      {
        unint64_t v420 = 0xC4CEB9FE1A85EC53
             * ((0xFF51AFD7ED558CCDLL * (v418 ^ (v418 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v418 ^ (v418 >> 33))) >> 33));
        unint64_t v421 = v420 ^ (v420 >> 33);
        uint8x8_t v422 = (uint8x8_t)vcnt_s8((int8x8_t)v490[1]);
        v422.i16[0] = vaddlv_u8(v422);
        if (v422.u32[0] > 1uLL)
        {
          unint64_t v423 = v421;
          if ((void *)v421 >= v490[1]) {
            unint64_t v423 = v421 % (unint64_t)v490[1];
          }
        }
        else
        {
          unint64_t v423 = v421 & ((unint64_t)v490[1] - 1);
        }
        v424 = (uint64_t **)*((void *)v490[0] + v423);
        if (v424)
        {
          v425 = *v424;
          if (v425)
          {
            if (v422.u32[0] < 2uLL)
            {
              while (1)
              {
                unint64_t v429 = v425[1];
                if (v421 == v429)
                {
                  if (*((_DWORD *)v425 + 5) == HIDWORD(v418) && *((_DWORD *)v425 + 4) == v418) {
                    goto LABEL_635;
                  }
                }
                else if ((v429 & ((unint64_t)v490[1] - 1)) != v423)
                {
                  goto LABEL_662;
                }
                v425 = (uint64_t *)*v425;
                if (!v425) {
                  goto LABEL_662;
                }
              }
            }
            do
            {
              unint64_t v427 = v425[1];
              if (v421 == v427)
              {
                if (*((_DWORD *)v425 + 5) == HIDWORD(v418) && *((_DWORD *)v425 + 4) == v418) {
                  goto LABEL_635;
                }
              }
              else
              {
                if ((void *)v427 >= v490[1]) {
                  v427 %= (unint64_t)v490[1];
                }
                if (v427 != v423) {
                  break;
                }
              }
              v425 = (uint64_t *)*v425;
            }
            while (v425);
          }
        }
      }
LABEL_662:
      uint64_t v430 = *(void *)(v8 + 72);
      if (!*(unsigned char *)(v430 + 16))
      {
LABEL_681:
        if (*(unsigned char *)(v8 + 59))
        {
          uint64_t v448 = *(void *)(v8 + 72);
          v449 = (int *)sub_4992B0(*(void *)(v448 + 4104) + 24, __ROR8__(*v419, 32), 0, "road access point");
          uint64_t v450 = (uint64_t)v449 + *(unsigned __int16 *)((char *)v449 - *v449 + 8);
          uint64_t v451 = *(unsigned int *)v450;
          LODWORD(v450) = *(_DWORD *)(v450 + 4);
          uint64_t v450 = v450 >= 0xFFFFFFFE ? 4294967294 : v450;
          *(void *)&long long v509 = v451 | (v450 << 32);
          DWORD2(v509) = 0x7FFFFFFF;
          if ((sub_73930((void ***)v448, &v509) & 1) == 0) {
            goto LABEL_635;
          }
        }
        uint64_t v452 = *v419;
        *(void *)&long long v509 = *v419;
        int v519 = 0;
        char v520 = 1;
        unint64_t v453 = a4[1];
        if (v453 >= a4[2])
        {
          a4[1] = sub_C07144(a4, (uint64_t)&v509);
          if (v519 != 1)
          {
LABEL_634:
            sub_B5AAE8((uint64_t)v490, (uint64_t *)v417 + 1, (void *)v417 + 1);
            goto LABEL_635;
          }
        }
        else
        {
          *(_DWORD *)(v453 + 160) = 0;
          if (v519 == 1)
          {
            unint64_t v453 = sub_44479C(v453, (uint64_t)&v509);
          }
          else if (!v519)
          {
            *(void *)unint64_t v453 = v452;
          }
          *(unsigned char *)(v453 + 168) = v520;
          a4[1] = v453 + 176;
          if (v519 != 1) {
            goto LABEL_634;
          }
        }
        if (v517)
        {
          v518 = v517;
          operator delete(v517);
        }
        if (v515)
        {
          v516 = v515;
          operator delete(v515);
        }
        if (v512)
        {
          v513 = v512;
          operator delete(v512);
        }
        goto LABEL_634;
      }
      v431 = (int *)sub_4992B0(*(void *)(v430 + 4104) + 24, __ROR8__(v418, 32), 0, "road access point");
      v432 = (unsigned __int16 *)((char *)v431 - *v431);
      if (*v432 < 7u)
      {
        unint64_t v435 = 0xFFFFFFFFLL;
        uint64_t v434 = v8;
      }
      else
      {
        unsigned __int16 v433 = v432[3];
        uint64_t v434 = v8;
        if (v433) {
          unint64_t v435 = *(unsigned int *)((char *)v431 + v433 + 4) | ((unint64_t)*(unsigned int *)((char *)v431 + v433) << 32);
        }
        else {
          unint64_t v435 = 0xFFFFFFFFLL;
        }
      }
      uint64_t v436 = *(void *)(*(void *)(v434 + 72) + 4008);
      uint64_t v437 = __ROR8__(v435, 32);
      LODWORD(v525[0]) = v437;
      LODWORD(v521) = 1;
      *(void *)&long long v509 = &v521;
      *((void *)&v509 + 1) = v525;
      unint64_t v438 = *(void *)(v436 + 3880) + 1;
      *(void *)(v436 + 3880) = v438;
      uint64_t v439 = *(void *)(v436 + 24);
      if (!v439) {
        goto LABEL_714;
      }
      uint64_t v440 = v434;
      uint64_t v441 = v436 + 40;
      if (*(_DWORD *)(v436 + 616) == v437)
      {
        unsigned int v442 = 24;
        goto LABEL_677;
      }
      if (*(_DWORD *)(v436 + 640) == v437)
      {
        unsigned int v442 = 25;
        goto LABEL_677;
      }
      if (*(_DWORD *)(v436 + 664) == v437)
      {
        unsigned int v442 = 26;
        goto LABEL_677;
      }
      if (*(_DWORD *)(v436 + 688) != v437)
      {
        unint64_t v478 = *(void *)(v436 + 672);
        unint64_t v454 = *(void *)(v436 + 648);
        unint64_t v455 = *(void *)(v436 + 624);
        unint64_t v469 = *(void *)(v436 + 696);
        v444 = (unsigned int *)sub_2AB884(v439, 6, v437, 1);
        if (v455 >= v438) {
          unint64_t v456 = v438;
        }
        else {
          unint64_t v456 = v455;
        }
        if (v455 >= v438) {
          int v457 = 0;
        }
        else {
          int v457 = 24;
        }
        if (v454 < v456)
        {
          unint64_t v456 = v454;
          int v457 = 25;
        }
        if (v478 < v456)
        {
          int v457 = 26;
          unint64_t v456 = v478;
        }
        BOOL v152 = v469 >= v456;
        unsigned int v458 = 27;
        if (v152) {
          unsigned int v458 = v457;
        }
        uint64_t v459 = v441 + 24 * v458;
        *(_DWORD *)uint64_t v459 = v525[0];
        *(void *)(v459 + 8) = *(void *)(v436 + 3880);
        *(void *)(v459 + 16) = v444;
        uint64_t v440 = v8;
        if (v444) {
          goto LABEL_678;
        }
        goto LABEL_714;
      }
      unsigned int v442 = 27;
LABEL_677:
      ++*(void *)(v436 + 3888);
      uint64_t v443 = v441 + 24 * v442;
      *(void *)(v443 + 8) = v438;
      v444 = *(unsigned int **)(v443 + 16);
      if (!v444)
      {
LABEL_714:
        sub_2A54B4((int **)&v509);
        a4 = v483;
        goto LABEL_635;
      }
LABEL_678:
      v445 = (int *)((char *)v444 + *v444);
      v446 = (unsigned __int16 *)((char *)v445 - *v445);
      a4 = v483;
      uint64_t v8 = v440;
      if (*v446 >= 5u)
      {
        uint64_t v447 = v446[2];
        if (v447)
        {
          if (*(unsigned int *)((char *)v445 + v447 + *(unsigned int *)((char *)v445 + v447)) > HIDWORD(v437)) {
            goto LABEL_681;
          }
        }
      }
LABEL_635:
      v417 += 48;
      if (v417 != v416) {
        continue;
      }
      break;
    }
    v416 = v485;
    if (v485)
    {
LABEL_716:
      v486 = v416;
      operator delete(v416);
    }
LABEL_27:
    std::string v15 = v473;
    std::string v16 = v472;
LABEL_28:
    std::string v15 = (uint64_t *)*v15;
    if (v15) {
      continue;
    }
    break;
  }
LABEL_717:
  *(double *)(v8 + 120) = sub_72688((uint64_t)v499) + *(double *)(v8 + 120);
  v460 = v491[0];
  if (v491[0])
  {
    do
    {
      v461 = (void *)*v460;
      operator delete(v460);
      v460 = v461;
    }
    while (v461);
  }
  v462 = v490[0];
  v490[0] = 0;
  if (v462) {
    operator delete(v462);
  }
  v463 = v494[0];
  if (v494[0])
  {
    do
    {
      v464 = (void *)*v463;
      operator delete(v463);
      v463 = v464;
    }
    while (v464);
  }
  v465 = v493[0];
  v493[0] = 0;
  if (v465) {
    operator delete(v465);
  }
  v466 = (void *)v497;
  if ((void)v497)
  {
    do
    {
      v467 = (void *)*v466;
      operator delete(v466);
      v466 = v467;
    }
    while (v467);
  }
  v468 = (void *)v496;
  *(void *)&long long v496 = 0;
  if (v468) {
    operator delete(v468);
  }
}

void sub_C064DC(_Unwind_Exception *a1)
{
  sub_C035D8(v1);
  _Unwind_Resume(a1);
}

void sub_C064F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void **a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a64 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a72);
  if (a65)
  {
    operator delete(a65);
    uint64_t v73 = a69;
    if (!a69)
    {
LABEL_5:
      int v74 = a34;
      if (!a34) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v73 = a69;
    if (!a69) {
      goto LABEL_5;
    }
  }
  a70 = (uint64_t)v73;
  operator delete(v73);
  int v74 = a34;
  if (!a34)
  {
LABEL_7:
    sub_12168((uint64_t)&a39);
    sub_12168((uint64_t)&a45);
    sub_12168((uint64_t)&a51);
    sub_C035D8(a32);
    _Unwind_Resume(a1);
  }
LABEL_6:
  operator delete(v74);
  goto LABEL_7;
}

void sub_C06724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (!a34) {
    JUMPOUT(0xC066DCLL);
  }
  JUMPOUT(0xC066D4);
}

void sub_C06734(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *(_OWORD *)int v45 = 0u;
  *(_OWORD *)int v46 = 0u;
  int v47 = 1065353216;
  *(_OWORD *)uint64_t v42 = 0u;
  *(_OWORD *)uint64_t v43 = 0u;
  int v44 = 1065353216;
  *(_OWORD *)long long v39 = 0u;
  *(_OWORD *)uint64_t v40 = 0u;
  int v41 = 1065353216;
  v38[0] = v39;
  v38[1] = a3;
  v37[0] = v42;
  v37[1] = a1;
  v37[2] = a3;
  v37[3] = v38;
  v36[0] = a1;
  v36[1] = v37;
  int v4 = *a2;
  int v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      unint64_t v48 = *v4;
      if (!sub_A1E760(v45, (uint64_t *)&v48))
      {
        if (HIDWORD(v48) == 1 && (v48 + 3) < 2) {
          goto LABEL_23;
        }
        uint64_t v8 = *(void *)(a1 + 72);
        uint64_t v9 = (int *)sub_498D5C(*(void *)(v8 + 4120) + 24, __ROR8__(v48, 32), 0, "stop");
        double v10 = (unsigned __int16 *)((char *)v9 - *v9);
        if (*v10 < 0xDu) {
          goto LABEL_23;
        }
        unsigned __int16 v11 = v10[6];
        if (!v11) {
          goto LABEL_23;
        }
        uint64_t v13 = *(unsigned int *)((char *)v9 + v11);
        uint64_t v12 = *(unsigned int *)((char *)v9 + v11 + 4);
        BOOL v14 = v12 == -1 || v13 == 0;
        if (!v14
          && (std::string v15 = (int *)sub_8ED928(*(void *)(v8 + 4128) + 24, __ROR8__(v12 | (v13 << 32), 32), 0, "station"),
              std::string v16 = (unsigned __int16 *)((char *)v15 - *v15),
              *v16 >= 0xBu)
          && (uint64_t v17 = v16[5]) != 0
          && *(int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17)))
        {
          double v18 = (int *)sub_498D5C(*(void *)(*(void *)(a1 + 72) + 4120) + 24, __ROR8__(v48, 32), 0, "stop");
          uint64_t v19 = (unsigned __int16 *)((char *)v18 - *v18);
          if (*v19 >= 0xDu && (unsigned __int16 v20 = v19[6]) != 0) {
            unint64_t v21 = *(unsigned int *)((char *)v18 + v20 + 4) | ((unint64_t)*(unsigned int *)((char *)v18 + v20) << 32);
          }
          else {
            unint64_t v21 = 0xFFFFFFFFLL;
          }
          sub_C07570((uint64_t **)(*(void *)(a1 + 72) + 4112), v21, (uint64_t)&v50);
          sub_C07670(v36, v21);
          uint64_t v25 = (uint64_t *)v50;
          unint64_t v26 = v51;
          v49[0] = a1;
          v49[1] = v37;
          if ((uint64_t *)v50 != v51)
          {
            do
              sub_C07670(v49, *v25++);
            while (v25 != v26);
            uint64_t v25 = (uint64_t *)v50;
          }
          if (v25)
          {
            int v51 = v25;
            operator delete(v25);
          }
        }
        else
        {
LABEL_23:
          unint64_t v22 = v48;
          unint64_t v50 = v48;
          int v58 = 0;
          char v59 = 2;
          unint64_t v23 = a3[1];
          if (v23 >= a3[2])
          {
            uint64_t v24 = sub_C07144(a3, (uint64_t)&v50);
          }
          else
          {
            *(_DWORD *)(v23 + 160) = 0;
            *(void *)unint64_t v23 = v22;
            uint64_t v24 = v23 + 176;
            *(unsigned char *)(v23 + 168) = 2;
          }
          a3[1] = v24;
          if (v58 == 1)
          {
            if (__p)
            {
              long long v57 = __p;
              operator delete(__p);
            }
            if (v54)
            {
              long long v55 = v54;
              operator delete(v54);
            }
            if (v52)
            {
              long long v53 = v52;
              operator delete(v52);
            }
          }
          sub_B5AAE8((uint64_t)v45, (uint64_t *)&v48, &v48);
        }
      }
      ++v4;
    }
    while (v4 != v5);
    double v27 = v40[0];
    if (v40[0])
    {
      do
      {
        unsigned int v28 = (void *)*v27;
        operator delete(v27);
        double v27 = v28;
      }
      while (v28);
    }
  }
  int v29 = v39[0];
  v39[0] = 0;
  if (v29) {
    operator delete(v29);
  }
  uint64_t v30 = v43[0];
  if (v43[0])
  {
    do
    {
      double v31 = (void *)*v30;
      operator delete(v30);
      uint64_t v30 = v31;
    }
    while (v31);
  }
  long long v32 = v42[0];
  v42[0] = 0;
  if (v32) {
    operator delete(v32);
  }
  long long v33 = v46[0];
  if (v46[0])
  {
    do
    {
      uint64_t v34 = (void *)*v33;
      operator delete(v33);
      long long v33 = v34;
    }
    while (v34);
  }
  uint64_t v35 = v45[0];
  v45[0] = 0;
  if (v35) {
    operator delete(v35);
  }
}

void sub_C06AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,int a57)
{
  if (__p)
  {
    a38 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_12168((uint64_t)&a17);
  sub_12168((uint64_t)&a23);
  sub_12168((uint64_t)&a29);
  sub_C035D8(v57);
  _Unwind_Resume(a1);
}

void sub_C06B50(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 == v6)
  {
    unint64_t v11 = 1;
    goto LABEL_18;
  }
  unint64_t v8 = v6 - v7 - 1112;
  if (v8 >= 0x458)
  {
    unint64_t v9 = 0;
    unint64_t v12 = 0;
    unint64_t v13 = v8 / 0x458 + 1;
    uint64_t v10 = v7 + 1112 * (v13 & 0x7FFFFFFFFFFFFELL);
    uint64_t v14 = v13 & 0x7FFFFFFFFFFFFELL;
    do
    {
      if (*(void *)(v7 + 16) > v9) {
        unint64_t v9 = *(void *)(v7 + 16);
      }
      if (*(void *)(v7 + 1128) > v12) {
        unint64_t v12 = *(void *)(v7 + 1128);
      }
      v7 += 2224;
      v14 -= 2;
    }
    while (v14);
    if (v9 <= v12) {
      unint64_t v9 = v12;
    }
    if (v13 == (v13 & 0x7FFFFFFFFFFFFELL)) {
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v10 = *a2;
  }
  do
  {
    if (*(void *)(v10 + 16) > v9) {
      unint64_t v9 = *(void *)(v10 + 16);
    }
    v10 += 1112;
  }
  while (v10 != v6);
LABEL_17:
  unint64_t v11 = v9 + 1;
LABEL_18:
  sub_C07B84(a3, v11);
  uint64_t v15 = *a2;
  uint64_t v16 = a2[1];
  if (*a2 != v16)
  {
    do
    {
      uint64_t v17 = sub_377310(*(void **)(a1 + 64));
      double v18 = sub_3823E0(v17 + 8, *(_DWORD *)(v15 + 32), 1);
      uint64_t v19 = &v18[*(unsigned __int16 *)&v18[-*(int *)v18 + 6]];
      uint64_t v20 = (uint64_t)&v19[4 * *(unsigned int *)(v15 + 36) + *(unsigned int *)v19];
      unint64_t v21 = (int *)(v20 + 4 + *(unsigned int *)(v20 + 4));
      unint64_t v22 = (unsigned int *)((char *)v21 + *(unsigned __int16 *)((char *)v21 - *v21 + 6));
      unint64_t v23 = (unsigned int *)((char *)v22 + *v22);
      uint64_t v24 = *v23;
      v26[0] = v23 + 1;
      v26[1] = v24;
      sub_C08804(v26, (uint64_t)v27);
      uint64_t v25 = *a3 + 176 * *(void *)(v15 + 16);
      sub_BE6A78(v25, (uint64_t)v27);
      *(unsigned char *)(v25 + 168) = v35;
      if (v34 == 1)
      {
        if (__p)
        {
          long long v33 = __p;
          operator delete(__p);
        }
        if (v30)
        {
          double v31 = v30;
          operator delete(v30);
        }
        if (v28)
        {
          int v29 = v28;
          operator delete(v28);
        }
      }
      v15 += 1112;
    }
    while (v15 != v16);
  }
}

void sub_C06D74(_Unwind_Exception *a1)
{
  sub_C035D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C06D88(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = -1;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 60) = 0x7FFFFFFFLL;
  uint64_t v2 = (char *)operator new(0x19uLL);
  *(void *)(a1 + 72) = v2;
  *(_OWORD *)(a1 + 80) = xmmword_20B9250;
  strcpy(v2, "transit_initial_walking");
  unint64_t v3 = (char *)operator new(0x20uLL);
  *(void *)(a1 + 96) = v3;
  *(_OWORD *)(a1 + 104) = xmmword_20B9800;
  strcpy(v3, "cost_function_based_evaluation");
  *(_DWORD *)(a1 + 120) = 16843008;
  return a1;
}

void sub_C06E54(_Unwind_Exception *a1)
{
  int v4 = v2;
  operator delete(v4);
  if (*v3) {
    sub_20AEAA0(v1, *v3, (void **)(v1 + 32));
  }
  uint64_t v6 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

__n128 sub_C06E98(void **a1, __n128 *a2)
{
  int v4 = (char *)*a1;
  if (*a1)
  {
    int v5 = (char *)a1[1];
    uint64_t v6 = *a1;
    if (v5 != v4)
    {
      do
      {
        if (*((_DWORD *)v5 - 4) == 1)
        {
          uint64_t v7 = (void *)*((void *)v5 - 6);
          if (v7)
          {
            *((void *)v5 - 5) = v7;
            operator delete(v7);
          }
          unint64_t v8 = (void *)*((void *)v5 - 9);
          if (v8)
          {
            *((void *)v5 - 8) = v8;
            operator delete(v8);
          }
          unint64_t v9 = (void *)*((void *)v5 - 13);
          if (v9)
          {
            *((void *)v5 - 12) = v9;
            operator delete(v9);
          }
        }
        v5 -= 176;
      }
      while (v5 != v4);
      uint64_t v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  a1[2] = (void *)a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_C06F58(uint64_t *a1, long long *a2, double a3)
{
  uint64_t v7 = (double *)a1[1];
  unint64_t v6 = a1[2];
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v11 = (double *)*a1;
    uint64_t v12 = ((uint64_t)v7 - *a1) >> 6;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 58) {
      sub_2E00();
    }
    uint64_t v14 = v6 - (void)v11;
    if (v14 >> 5 > v13) {
      unint64_t v13 = v14 >> 5;
    }
    BOOL v15 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFC0;
    unint64_t v16 = 0x3FFFFFFFFFFFFFFLL;
    if (!v15) {
      unint64_t v16 = v13;
    }
    if (v16 >> 58) {
      sub_188D718();
    }
    unint64_t v17 = v16 << 6;
    double v18 = (char *)operator new(v16 << 6);
    uint64_t v19 = &v18[64 * v12];
    *(double *)uint64_t v19 = a3;
    uint64_t v20 = v19 + 8;
    int v21 = *((_DWORD *)a2 + 12);
    *((_DWORD *)v19 + 14) = v21;
    if (v21 == 1)
    {
      long long v25 = a2[1];
      *uint64_t v20 = *a2;
      *(_OWORD *)(v19 + 24) = v25;
      *(_OWORD *)(v19 + 40) = a2[2];
      unint64_t v22 = &v18[v17];
      uint64_t v10 = (uint64_t)(v19 + 64);
      if (v7 == v11) {
        goto LABEL_15;
      }
    }
    else
    {
      if (!v21) {
        *(_DWORD *)uint64_t v20 = *(_DWORD *)a2;
      }
      unint64_t v22 = &v18[v17];
      uint64_t v10 = (uint64_t)(v19 + 64);
      if (v7 == v11)
      {
LABEL_15:
        *a1 = (uint64_t)v19;
        a1[1] = v10;
        a1[2] = (uint64_t)v22;
        if (!v11) {
          goto LABEL_28;
        }
        goto LABEL_27;
      }
    }
    uint64_t v26 = 0;
    do
    {
      int v29 = &v19[v26 * 8];
      *((double *)v29 - 8) = v7[v26 - 8];
      uint64_t v30 = &v19[v26 * 8 - 56];
      double v31 = &v7[v26 - 7];
      int v32 = LODWORD(v7[v26 - 1]);
      *((_DWORD *)v29 - 2) = v32;
      if (v32 == 1)
      {
        long long v27 = *(_OWORD *)v31;
        long long v28 = *(_OWORD *)&v7[v26 - 3];
        *(_OWORD *)&v19[v26 * 8 - 40] = *(_OWORD *)&v7[v26 - 5];
        *(_OWORD *)&v19[v26 * 8 - 24] = v28;
        *(_OWORD *)uint64_t v30 = v27;
      }
      else if (!v32)
      {
        *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
      }
      v26 -= 8;
    }
    while (&v7[v26] != v11);
    *a1 = (uint64_t)&v19[v26 * 8];
    a1[1] = v10;
    a1[2] = (uint64_t)v22;
    if (!v11) {
      goto LABEL_28;
    }
LABEL_27:
    operator delete(v11);
    goto LABEL_28;
  }
  double *v7 = a3;
  unint64_t v8 = v7 + 1;
  *((_DWORD *)v7 + 14) = *((_DWORD *)a2 + 12);
  int v9 = *((_DWORD *)a2 + 12);
  if (v9 == 1)
  {
    long long v23 = *a2;
    long long v24 = a2[2];
    *(_OWORD *)(v7 + 3) = a2[1];
    *(_OWORD *)(v7 + 5) = v24;
    *unint64_t v8 = v23;
  }
  else if (!v9)
  {
    *(_DWORD *)unint64_t v8 = *(_DWORD *)a2;
    uint64_t v10 = (uint64_t)(v7 + 8);
    goto LABEL_28;
  }
  uint64_t v10 = (uint64_t)(v7 + 8);
LABEL_28:
  a1[1] = v10;
  uint64_t v33 = *a1;
  uint64_t v34 = (v10 - *a1) >> 6;

  return sub_4089D4(v33, v10, v34);
}

uint64_t sub_C07144(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (char *)*a1;
  int v4 = (char *)a1[1];
  uint64_t v5 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)&v4[-*a1] >> 4);
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x1745D1745D1745DLL) {
    sub_2E00();
  }
  if (0x5D1745D1745D1746 * ((a1[2] - (uint64_t)v3) >> 4) > v6) {
    unint64_t v6 = 0x5D1745D1745D1746 * ((a1[2] - (uint64_t)v3) >> 4);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - (uint64_t)v3) >> 4)) >= 0xBA2E8BA2E8BA2ELL) {
    unint64_t v8 = 0x1745D1745D1745DLL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0x1745D1745D1745DLL) {
      sub_188D718();
    }
    int v9 = operator new(176 * v8);
    uint64_t v10 = (uint64_t)&v9[176 * v5];
    uint32_t v11 = *(_DWORD *)(a2 + 160);
    *(_DWORD *)(v10 + 160) = v11;
    if (v11 != 1) {
      goto LABEL_10;
    }
LABEL_13:
    sub_44479C(v10, a2);
    unint64_t v3 = (char *)*a1;
    int v4 = (char *)a1[1];
    goto LABEL_14;
  }
  int v9 = 0;
  uint64_t v10 = 16 * ((uint64_t)&v4[-*a1] >> 4);
  uint32_t v11 = *(_DWORD *)(a2 + 160);
  *(uint32_t *)((char *)&stru_68.reloff + v10) = v11;
  if (v11 == 1) {
    goto LABEL_13;
  }
LABEL_10:
  if (!v11) {
    *(void *)uint64_t v10 = *(void *)a2;
  }
LABEL_14:
  uint64_t v12 = &v9[176 * v8];
  v9[176 * v5 + 168] = *(unsigned char *)(a2 + 168);
  uint64_t v13 = v10 + 176;
  if (v4 == v3)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = (uint64_t)v12;
    if (!v3) {
      return v10 + 176;
    }
    goto LABEL_33;
  }
  uint64_t v14 = 0;
  do
  {
    BOOL v15 = (void *)(v10 + v14 - 176);
    unint64_t v16 = &v4[v14 - 176];
    *(_DWORD *)(v10 + v14 - 16) = *(_DWORD *)&v4[v14 - 16];
    int v17 = *(_DWORD *)&v4[v14 - 16];
    if (v17 == 1)
    {
      sub_44479C((uint64_t)v15, (uint64_t)v16);
    }
    else if (!v17)
    {
      void *v15 = *(void *)v16;
    }
    *(unsigned char *)(v10 + v14 - 8) = v4[v14 - 8];
    v14 -= 176;
  }
  while (&v4[v14] != v3);
  double v18 = (char *)*a1;
  unint64_t v3 = (char *)a1[1];
  *a1 = v10 + v14;
  a1[1] = v13;
  a1[2] = (uint64_t)v12;
  if (v3 != v18)
  {
    do
    {
      if (*((_DWORD *)v3 - 4) == 1)
      {
        uint64_t v19 = (void *)*((void *)v3 - 6);
        if (v19)
        {
          *((void *)v3 - 5) = v19;
          operator delete(v19);
        }
        uint64_t v20 = (void *)*((void *)v3 - 9);
        if (v20)
        {
          *((void *)v3 - 8) = v20;
          operator delete(v20);
        }
        int v21 = (void *)*((void *)v3 - 13);
        if (v21)
        {
          *((void *)v3 - 12) = v21;
          operator delete(v21);
        }
      }
      v3 -= 176;
    }
    while (v3 != v18);
    unint64_t v3 = v18;
  }
  if (v3) {
LABEL_33:
  }
    operator delete(v3);
  return v10 + 176;
}

char *sub_C07388(void **a1, uint64_t *a2, char *a3)
{
  uint64_t v5 = (char *)*a1;
  int v4 = (char *)a1[1];
  uint64_t v6 = 0x2E8BA2E8BA2E8BA3 * ((v4 - (unsigned char *)*a1) >> 4);
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) > 0x1745D1745D1745DLL) {
    sub_2E00();
  }
  if (0x5D1745D1745D1746 * (((unsigned char *)a1[2] - v5) >> 4) > v7) {
    unint64_t v7 = 0x5D1745D1745D1746 * (((unsigned char *)a1[2] - v5) >> 4);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (((unsigned char *)a1[2] - v5) >> 4)) >= 0xBA2E8BA2E8BA2ELL) {
    unint64_t v7 = 0x1745D1745D1745DLL;
  }
  if (v7 > 0x1745D1745D1745DLL) {
    sub_188D718();
  }
  uint64_t v10 = 176 * v7;
  uint32_t v11 = (char *)operator new(176 * v7);
  uint64_t v12 = &v11[176 * v6];
  uint64_t v13 = *a2;
  char v14 = *a3;
  BOOL v15 = &v11[v10];
  *(void *)uint64_t v12 = v13;
  *((_DWORD *)v12 + 40) = 0;
  v12[168] = v14;
  unint64_t v16 = v12 + 176;
  if (v4 == v5)
  {
    *a1 = v12;
    a1[1] = v16;
    a1[2] = v15;
    if (!v4) {
      return v12 + 176;
    }
    goto LABEL_26;
  }
  uint64_t v17 = 0;
  do
  {
    double v18 = &v12[v17 - 176];
    uint64_t v19 = &v4[v17 - 176];
    int v20 = *(_DWORD *)&v4[v17 - 16];
    *(_DWORD *)&v12[v17 - 16] = v20;
    if (v20 == 1)
    {
      sub_44479C((uint64_t)v18, (uint64_t)v19);
    }
    else if (!v20)
    {
      *(void *)double v18 = *(void *)v19;
    }
    v12[v17 - 8] = v4[v17 - 8];
    v17 -= 176;
  }
  while (&v4[v17] != v5);
  int v21 = (char *)*a1;
  int v4 = (char *)a1[1];
  *a1 = &v12[v17];
  a1[1] = v16;
  a1[2] = v15;
  if (v4 != v21)
  {
    do
    {
      if (*((_DWORD *)v4 - 4) == 1)
      {
        unint64_t v22 = (void *)*((void *)v4 - 6);
        if (v22)
        {
          *((void *)v4 - 5) = v22;
          operator delete(v22);
        }
        long long v23 = (void *)*((void *)v4 - 9);
        if (v23)
        {
          *((void *)v4 - 8) = v23;
          operator delete(v23);
        }
        long long v24 = (void *)*((void *)v4 - 13);
        if (v24)
        {
          *((void *)v4 - 12) = v24;
          operator delete(v24);
        }
      }
      v4 -= 176;
    }
    while (v4 != v21);
    int v4 = v21;
  }
  if (v4) {
LABEL_26:
  }
    operator delete(v4);
  return v12 + 176;
}

int *sub_C07570@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result = (int *)sub_8ED928((uint64_t)(*a1 + 3), __ROR8__(a2, 32), 0, "station");
  uint64_t v6 = (unsigned __int16 *)((char *)result - *result);
  if (*v6 >= 0x2Fu && (uint64_t v7 = v6[23]) != 0)
  {
    unint64_t v8 = (unsigned int *)((char *)result + v7);
    uint64_t v9 = *v8;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint32_t v11 = (unsigned int *)((char *)v8 + v9 + 4);
    uint64_t v10 = *(unsigned int *)((char *)v8 + v9);
    char v14 = (void **)a3;
    if (v10)
    {
      uint64_t v12 = 8 * v10;
      do
      {
        if (!*((unsigned char *)*a1 + 16) || (__n128 result = (int *)sub_2AB7E4(**a1), result))
        {
          unint64_t v13 = v11[1] | ((unint64_t)*v11 << 32);
          __n128 result = (int *)sub_2A98DC(&v14, &v13);
        }
        v11 += 2;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_C07654(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_C07670(void *a1, uint64_t a2)
{
  sub_C07A84((uint64_t **)(*(void *)(*a1 + 72) + 4112), a2, (uint64_t)&v29);
  unint64_t v3 = v29;
  int v4 = v30;
  if (v29 != v30)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = *(uint64_t **)(v5 + 16);
    long long v27 = v6;
    long long v28 = *(void ***)(v5 + 24);
    uint64_t v7 = *(void **)v5;
    uint64_t v8 = *(void *)(v5 + 8);
    uint64_t v9 = "access point";
    do
    {
      uint64_t v34 = *v3;
      if (!sub_A1E760(v7, (uint64_t *)&v34))
      {
        if (sub_BE5F1C((uint64_t *)(*(void *)(v8 + 72) + 4008), (uint64_t)v34, 1) || sub_A1E760(v7, (uint64_t *)&v34))
        {
          uint64_t v10 = *(void *)(v8 + 72);
          char v36 = 1;
          uint32_t v11 = (int *)sub_499804(*(void *)(v10 + 4008) + 24, __ROR8__(v34, 32), 0, v9);
          uint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
          if (*v12 >= 0x15u)
          {
            uint64_t v13 = v12[10];
            if (v13)
            {
              char v14 = (unsigned int *)((char *)v11 + v13 + *(unsigned int *)((char *)v11 + v13));
              int v32 = 0;
              uint64_t v33 = 0;
              double v31 = 0;
              v39[0] = (uint64_t *)(v10 + 4008);
              v39[1] = (uint64_t *)&v36;
              uint64_t v15 = *v14;
              long long v38 = v14 + 1;
              uint64_t v37 = &v14[2 * v15 + 1];
              sub_BE6D78(&v38, &v37, (void **)&v31, (uint64_t)&v35, v39);
              uint64_t v17 = v31;
              unint64_t v16 = v32;
              if (v31 != v32)
              {
                double v18 = v9;
                uint64_t v19 = *v28;
                int v20 = v28[1];
                do
                {
                  long long v38 = *v17;
                  if (!sub_A1E760(v19, (uint64_t *)&v38))
                  {
                    int v21 = v38;
                    v39[0] = (uint64_t *)v38;
                    int v46 = 0;
                    char v47 = 1;
                    unint64_t v22 = v20[1];
                    if (v22 >= v20[2])
                    {
                      uint64_t v23 = sub_C07144(v20, (uint64_t)v39);
                    }
                    else
                    {
                      *(_DWORD *)(v22 + 160) = 0;
                      *(void *)unint64_t v22 = v21;
                      uint64_t v23 = v22 + 176;
                      *(unsigned char *)(v22 + 168) = 1;
                    }
                    v20[1] = v23;
                    if (v46 == 1)
                    {
                      if (__p)
                      {
                        int v45 = __p;
                        operator delete(__p);
                      }
                      if (v42)
                      {
                        uint64_t v43 = v42;
                        operator delete(v42);
                      }
                      if (v40)
                      {
                        int v41 = v40;
                        operator delete(v40);
                      }
                    }
                    sub_B5AAE8((uint64_t)v19, (uint64_t *)&v38, &v38);
                  }
                  ++v17;
                }
                while (v17 != v16);
                uint64_t v17 = v31;
                uint64_t v9 = v18;
                uint64_t v6 = v27;
              }
              if (v17)
              {
                int v32 = v17;
                operator delete(v17);
              }
            }
          }
        }
        else
        {
          long long v24 = v34;
          v39[0] = v34;
          int v46 = 0;
          char v47 = 0;
          unint64_t v25 = v6[1];
          if (v25 >= v6[2])
          {
            uint64_t v26 = sub_C07144(v6, (uint64_t)v39);
          }
          else
          {
            *(_DWORD *)(v25 + 160) = 0;
            *(void *)unint64_t v25 = v24;
            uint64_t v26 = v25 + 176;
            *(unsigned char *)(v25 + 168) = 0;
          }
          v6[1] = v26;
          if (v46 == 1)
          {
            if (__p)
            {
              int v45 = __p;
              operator delete(__p);
            }
            if (v42)
            {
              uint64_t v43 = v42;
              operator delete(v42);
            }
            if (v40)
            {
              int v41 = v40;
              operator delete(v40);
            }
          }
          sub_B5AAE8((uint64_t)v7, (uint64_t *)&v34, &v34);
        }
      }
      ++v3;
    }
    while (v3 != v4);
    unint64_t v3 = v29;
  }
  if (v3)
  {
    uint64_t v30 = v3;
    operator delete(v3);
  }
}

void sub_C07994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,_Unwind_Exception *exception_objecta,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,int a41)
{
  if (a41 != 1) {
    goto LABEL_9;
  }
  if (__p)
  {
    operator delete(__p);
    uint64_t v42 = a34;
    if (!a34)
    {
LABEL_4:
      uint64_t v43 = exception_objecta;
      if (!exception_objecta)
      {
LABEL_9:
        if (!a11) {
          _Unwind_Resume(exception_object);
        }
        operator delete(a11);
        _Unwind_Resume(exception_object);
      }
LABEL_8:
      operator delete(v43);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v42 = a34;
    if (!a34) {
      goto LABEL_4;
    }
  }
  operator delete(v42);
  uint64_t v43 = exception_objecta;
  if (!exception_objecta) {
    goto LABEL_9;
  }
  goto LABEL_8;
}

int *sub_C07A84@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result = (int *)sub_8ED928((uint64_t)(*a1 + 3), __ROR8__(a2, 32), 0, "station");
  uint64_t v6 = (unsigned __int16 *)((char *)result - *result);
  if (*v6 >= 0x33u && (uint64_t v7 = v6[25]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)result + v7);
    uint64_t v9 = *v8;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint32_t v11 = (unsigned int *)((char *)v8 + v9 + 4);
    uint64_t v10 = *(unsigned int *)((char *)v8 + v9);
    char v14 = (void **)a3;
    if (v10)
    {
      uint64_t v12 = 8 * v10;
      do
      {
        if (!*((unsigned char *)*a1 + 16) || (__n128 result = (int *)sub_2AB7E4(**a1), result))
        {
          unint64_t v13 = v11[1] | ((unint64_t)*v11 << 32);
          __n128 result = (int *)sub_2A98DC(&v14, &v13);
        }
        v11 += 2;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_C07B68(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_C07B84(void *a1, unint64_t a2)
{
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  *(_OWORD *)__p = 0u;
  long long v12 = 0u;
  *(_OWORD *)unint64_t v13 = 0u;
  *(_OWORD *)uint32_t v11 = 0u;
  memset(v10, 0, sizeof(v10));
  LODWORD(v17) = -1;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (a2)
  {
    if (a2 >= 0x1745D1745D1745ELL) {
      sub_2E00();
    }
    int v4 = operator new(176 * a2);
    char v5 = 0;
    *a1 = v4;
    a1[1] = v4;
    uint64_t v6 = 176 * a2;
    uint64_t v7 = (char *)&v4[44 * a2];
    a1[2] = v7;
    do
    {
      int v8 = v17;
      v4[40] = v17;
      if (v8 == 1)
      {
        sub_44479C((uint64_t)v4, (uint64_t)v10);
        char v5 = BYTE8(v17);
      }
      else if (!v8)
      {
        *(void *)int v4 = *(void *)&v10[0];
      }
      *((unsigned char *)v4 + 168) = v5;
      v4 += 44;
      v6 -= 176;
    }
    while (v6);
    a1[1] = v7;
    if (v17 == 1)
    {
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v13[1])
      {
        *(void **)&long long v14 = v13[1];
        operator delete(v13[1]);
      }
      if (v11[1])
      {
        *(void **)&long long v12 = v11[1];
        operator delete(v11[1]);
      }
    }
  }
  return a1;
}

void sub_C07CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_C07CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 + 8) = v10;
  sub_BE6670((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_C07D14()
{
  unk_25E0017 = 16641;
  word_25E0000 = 65;
  byte_25E002F = 1;
  byte_25E0019 = 0;
}

void sub_C07D3C(uint64_t a1, void *a2, uint64_t a3)
{
  long long v27 = (uint64_t *)&v28;
  long long v28 = a2;
  v25[0] = a1;
  v25[1] = &v26;
  uint64_t v26 = a1;
  uint64_t v3 = *(void *)(a3 + 160);
  uint64_t v4 = *(void *)(a3 + 168);
  if (v3 != v4)
  {
    long long v24 = (void *)(a1 + 4008);
    do
    {
      switch(*(_DWORD *)v3)
      {
        case 0:
          BOOL v8 = *(double *)(v3 + 24) == 1.0 && *(unsigned char *)(v3 + 32) == 0;
          *(void *)&v31[0] = *(void *)(v3 + 4);
          int v38 = 0;
          char v39 = 2;
          unsigned int v9 = sub_C01774(v28, (uint64_t)v31);
          if (v38 == 1)
          {
            if (__p)
            {
              uint64_t v37 = __p;
              operator delete(__p);
            }
            if (v34)
            {
              char v35 = v34;
              operator delete(v34);
            }
            if (v32)
            {
              uint64_t v33 = v32;
              operator delete(v32);
            }
          }
          if (!v8)
          {
            sub_C0005C((uint64_t)v28, v9);
            sub_C08704((uint64_t)v28, v9);
          }
          break;
        case 1:
          BOOL v15 = *(double *)(v3 + 24) == 1.0 && *(unsigned char *)(v3 + 32) == 0;
          sub_B3FBE0((uint64_t **)(v26 + 4040), *(void *)(v3 + 4), (uint64_t)&v29);
          unint64_t v13 = v29;
          long long v16 = v30;
          if (v29 != v30)
          {
            long long v17 = v27;
            do
            {
              double v18 = (void *)*v17;
              *(void *)&v31[0] = *v13;
              int v38 = 0;
              char v39 = 2;
              unsigned int v19 = sub_C01774(v18, (uint64_t)v31);
              if (v38 == 1)
              {
                if (__p)
                {
                  uint64_t v37 = __p;
                  operator delete(__p);
                }
                if (v34)
                {
                  char v35 = v34;
                  operator delete(v34);
                }
                if (v32)
                {
                  uint64_t v33 = v32;
                  operator delete(v32);
                }
              }
              if (!v15)
              {
                uint64_t v20 = *v17;
                uint64_t v21 = *(void *)(*v17 + 8);
                if (0xFAFAFAFAFAFAFAFBLL * ((*(void *)(*v17 + 16) - v21) >> 5) <= v19)
                {
                  exception = __cxa_allocate_exception(0x40uLL);
                  strcpy((char *)v31, "vertex id out of range");
                  BYTE7(v31[1]) = 22;
                  uint64_t v23 = (void *)sub_2F404((uint64_t)exception, v31);
                }
                *(unsigned char *)(v21 + 1632 * v19 + 1624) = 1;
                sub_C08704(v20, v19);
              }
              ++v13;
            }
            while (v13 != v16);
            unint64_t v13 = v29;
          }
          if (v13)
          {
            uint64_t v30 = v13;
            goto LABEL_60;
          }
          break;
        case 2:
          char v6 = *(double *)(v3 + 24) == 1.0 && *(unsigned char *)(v3 + 32) == 0;
          sub_C0838C(v25, *(void *)(v3 + 4), v6);
          break;
        case 3:
          char v11 = *(double *)(v3 + 24) == 1.0 && *(unsigned char *)(v3 + 32) == 0;
          sub_B8CC48(v24, *(void *)(v3 + 4), (uint64_t)v31);
          long long v12 = (uint64_t *)*((void *)&v31[0] + 1);
          unint64_t v13 = *(uint64_t **)&v31[0];
          if (*(void *)&v31[0] != *((void *)&v31[0] + 1))
          {
            do
              sub_C0838C(v25, *v13++, v11);
            while (v13 != v12);
            unint64_t v13 = *(uint64_t **)&v31[0];
          }
          if (v13)
          {
            *((void *)&v31[0] + 1) = v13;
LABEL_60:
            operator delete(v13);
          }
          break;
        default:
          break;
      }
      v3 += 40;
    }
    while (v3 != v4);
  }
}

void sub_C08088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,uint64_t a41,int a42)
{
  if (a42 != 1) {
LABEL_9:
  }
    _Unwind_Resume(exception_object);
  if (__p)
  {
    operator delete(__p);
    uint64_t v43 = a35;
    if (!a35)
    {
LABEL_4:
      int v44 = a31;
      if (!a31) {
        goto LABEL_9;
      }
LABEL_8:
      operator delete(v44);
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    uint64_t v43 = a35;
    if (!a35) {
      goto LABEL_4;
    }
  }
  operator delete(v43);
  int v44 = a31;
  if (!a31) {
    goto LABEL_9;
  }
  goto LABEL_8;
}

void sub_C081A4(void *a1, uint64_t a2)
{
  if (*(void *)(a2 + 104) != *(void *)(a2 + 112))
  {
    sub_44479C((uint64_t)v3, a2);
    v14[2] = v3[2];
    *(_OWORD *)BOOL v15 = *(_OWORD *)v4;
    *(_DWORD *)&v15[15] = *(_DWORD *)&v4[15];
    v14[0] = v3[0];
    v14[1] = v3[1];
    *(_OWORD *)long long v16 = *(_OWORD *)v5;
    uint64_t v17 = v6;
    v5[0] = 0;
    v5[1] = 0;
    char v19 = v8;
    int v18 = v7;
    long long v20 = *(_OWORD *)v9;
    uint64_t v21 = v10;
    uint64_t v6 = 0;
    v9[0] = 0;
    v9[1] = 0;
    *(_OWORD *)__p = *(_OWORD *)v11;
    uint64_t v23 = v12;
    uint64_t v10 = 0;
    v11[0] = 0;
    v11[1] = 0;
    uint64_t v12 = 0;
    *(_DWORD *)((char *)v24 + 3) = *(_DWORD *)&v13[3];
    v24[0] = *(_DWORD *)v13;
    int v25 = 1;
    char v26 = 3;
    sub_C01774(a1, (uint64_t)v14);
    if (v25 == 1)
    {
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if ((void)v20)
      {
        *((void *)&v20 + 1) = v20;
        operator delete((void *)v20);
      }
      if (v16[0])
      {
        v16[1] = v16[0];
        operator delete(v16[0]);
      }
    }
    if (v11[0])
    {
      v11[1] = v11[0];
      operator delete(v11[0]);
    }
    if (v9[0])
    {
      v9[1] = v9[0];
      operator delete(v9[0]);
    }
    if (v5[0])
    {
      v5[1] = v5[0];
      operator delete(v5[0]);
    }
  }
}

void sub_C08318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void *sub_C08338(void *a1)
{
  uint64_t v2 = (void *)a1[16];
  if (v2)
  {
    a1[17] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[13];
  if (v3)
  {
    a1[14] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[9];
  if (v4)
  {
    a1[10] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_C0838C(void *a1, uint64_t a2, char a3)
{
  sub_B3FAE0((uint64_t **)(*a1 + 4112), a2, (uint64_t)&v20);
  char v5 = v20;
  uint64_t v6 = v21;
  if (v20 != v21)
  {
    char v19 = (void *)a1[1];
    if (a3)
    {
      do
      {
        sub_B3FBE0((uint64_t **)(*v19 + 4040), *v5, (uint64_t)&v22);
        int v7 = v22;
        char v8 = v23;
        if (v22 != v23)
        {
          unsigned int v9 = (void **)v19[1];
          do
          {
            uint64_t v10 = *v9;
            *(void *)&v24[0] = *v7;
            int v31 = 0;
            char v32 = 2;
            sub_C01774(v10, (uint64_t)v24);
            if (v31 == 1)
            {
              if (__p)
              {
                uint64_t v30 = __p;
                operator delete(__p);
              }
              if (v27)
              {
                long long v28 = v27;
                operator delete(v27);
              }
              if (v25)
              {
                char v26 = v25;
                operator delete(v25);
              }
            }
            ++v7;
          }
          while (v7 != v8);
          int v7 = v22;
        }
        if (v7)
        {
          uint64_t v23 = v7;
          operator delete(v7);
        }
        ++v5;
      }
      while (v5 != v6);
    }
    else
    {
      do
      {
        sub_B3FBE0((uint64_t **)(*v19 + 4040), *v5, (uint64_t)&v22);
        char v11 = v22;
        uint64_t v12 = v23;
        if (v22 != v23)
        {
          uint64_t v13 = v19[1];
          long long v14 = *(void **)v13;
          do
          {
            *(void *)&v24[0] = *v11;
            int v31 = 0;
            char v32 = 2;
            unsigned int v15 = sub_C01774(v14, (uint64_t)v24);
            if (v31 == 1)
            {
              if (__p)
              {
                uint64_t v30 = __p;
                operator delete(__p);
              }
              if (v27)
              {
                long long v28 = v27;
                operator delete(v27);
              }
              if (v25)
              {
                char v26 = v25;
                operator delete(v25);
              }
            }
            long long v14 = *(void **)v13;
            uint64_t v16 = *(void *)(*(void *)v13 + 8);
            if (0xFAFAFAFAFAFAFAFBLL * ((*(void *)(*(void *)v13 + 16) - v16) >> 5) <= v15)
            {
              exception = __cxa_allocate_exception(0x40uLL);
              strcpy((char *)v24, "vertex id out of range");
              BYTE7(v24[1]) = 22;
              int v18 = (void *)sub_2F404((uint64_t)exception, v24);
            }
            *(_WORD *)(v16 + 1632 * v15 + 1624) = 257;
            ++v11;
          }
          while (v11 != v12);
          char v11 = v22;
        }
        if (v11)
        {
          uint64_t v23 = v11;
          operator delete(v11);
        }
        ++v5;
      }
      while (v5 != v6);
    }
    char v5 = v20;
  }
  if (v5)
  {
    uint64_t v21 = v5;
    operator delete(v5);
  }
}

void sub_C0865C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_C08704(uint64_t result, unsigned int a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (0xFAFAFAFAFAFAFAFBLL * ((*(void *)(result + 16) - v2) >> 5) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v5, "vertex id out of range");
    uint64_t v4 = (void *)sub_2F404((uint64_t)exception, &v5);
  }
  *(unsigned char *)(v2 + 1632 * a2 + 1625) = 1;
  return result;
}

void sub_C087AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_C087DC()
{
  unk_25E0047 = 16641;
  word_25E0030 = 65;
  byte_25E005F = 1;
  byte_25E0049 = 0;
}

void *sub_C08804@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (int *)(*result + *(unsigned int *)*result);
  uint64_t v3 = (unsigned __int16 *)((char *)v2 - *v2);
  unsigned int v4 = *v3;
  if (v4 < 5)
  {
    LOBYTE(v6) = 0;
    unint64_t v5 = 0xFFFFFFFFLL;
    goto LABEL_6;
  }
  if (v3[2])
  {
    unint64_t v5 = *(unsigned int *)((char *)v2 + v3[2] + 4) | ((unint64_t)*(unsigned int *)((char *)v2 + v3[2]) << 32);
    if (v4 < 7) {
      goto LABEL_12;
    }
    goto LABEL_8;
  }
  unint64_t v5 = 0xFFFFFFFFLL;
  if (v4 >= 7)
  {
LABEL_8:
    uint64_t v7 = v3[3];
    if (!v7) {
      goto LABEL_12;
    }
    int v6 = *((unsigned __int8 *)v2 + v7);
    if (v6 != 3 && v6 != 2 && v6 != 1) {
      goto LABEL_12;
    }
LABEL_6:
    *(void *)a2 = v5;
    *(_DWORD *)(a2 + 160) = 0;
    *(unsigned char *)(a2 + 168) = v6;
    return result;
  }
LABEL_12:
  *(void *)a2 = v5;
  *(_DWORD *)(a2 + 160) = 0;
  *(unsigned char *)(a2 + 168) = 0;
  return result;
}

void sub_C088A4(uint64_t a1, uint64_t a2)
{
  if (a2) {
    operator delete[]();
  }
}

void sub_C088C8()
{
}

void sub_C088DC()
{
}

char *sub_C088F4(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, size_t a5, size_t a6)
{
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a4);
  memcpy(&v12[a4 - a5], &a2[a3 - a5], a5);
  memcpy(v12, a2, a6);
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)a1 + 24))(a1, a2, a3);
  return v12;
}

uint64_t sub_C089C8(uint64_t *a1, unint64_t a2)
{
  unint64_t v3 = a1[4];
  uint64_t v4 = *((unsigned int *)a1 + 10);
  uint64_t v5 = a1[6];
  uint64_t v6 = a1[8] - v5;
  if (v3) {
    unint64_t v7 = v3 >> 1;
  }
  else {
    unint64_t v7 = a1[2];
  }
  if (v7 <= a2) {
    unint64_t v7 = a2;
  }
  uint64_t v8 = (a1[3] + v3 + v7 - 1) & -a1[3];
  a1[4] = v8;
  uint64_t v9 = *a1;
  if (v5)
  {
    if (!v9)
    {
      uint64_t v12 = off_243EB70;
      operator new[]();
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, void))(*(void *)v9 + 32))(v9, v5, v3, v8, v4, v6);
  }
  else
  {
    if (!v9)
    {
      uint64_t v12 = off_243EB70;
      operator new[]();
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v8);
  }
  uint64_t v11 = result + a1[4] - v4;
  a1[6] = result;
  a1[7] = v11;
  a1[8] = result + v6;
  return result;
}

uint64_t sub_C08BC0(uint64_t a1, __int16 a2)
{
  if (*(void *)(a1 + 80) <= 3uLL) {
    *(void *)(a1 + 80) = 4;
  }
  int v4 = *(_DWORD *)(a1 + 40);
  unint64_t v5 = -v4 & 3;
  if ((-v4 & 3) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 56);
    if (v6 - *(void *)(a1 + 64) < v5)
    {
      sub_C089C8((uint64_t *)a1, v5);
      uint64_t v6 = *(void *)(a1 + 56);
      int v4 = *(_DWORD *)(a1 + 40);
    }
    uint64_t v7 = 0;
    *(void *)(a1 + 56) = v6 - v5;
    *(_DWORD *)(a1 + 40) = v4 + v5;
    do
      *(unsigned char *)(*(void *)(a1 + 56) + v7++) = 0;
    while (v5 != v7);
  }
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  if ((unint64_t)(v8 - v9) <= 3)
  {
    sub_C089C8((uint64_t *)a1, 4uLL);
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(a1 + 64);
  }
  *(_DWORD *)(a1 + 40) += 4;
  *(_DWORD *)(v8 - 4) = 0;
  uint64_t v10 = v8 - 4;
  *(void *)(a1 + 56) = v10;
  uint64_t v11 = *(unsigned int *)(a1 + 40);
  if ((unsigned __int16)(*(_WORD *)(a1 + 76) + 2) <= 4u) {
    unint64_t v12 = 4;
  }
  else {
    unint64_t v12 = (unsigned __int16)(*(_WORD *)(a1 + 76) + 2);
  }
  *(_WORD *)(a1 + 76) = v12;
  unint64_t v13 = v10 - v9;
  int v14 = v11;
  if (v13 < v12)
  {
    sub_C089C8((uint64_t *)a1, v12);
    uint64_t v10 = *(void *)(a1 + 56);
    int v14 = *(_DWORD *)(a1 + 40);
  }
  *(void *)(a1 + 56) = v10 - v12;
  *(_DWORD *)(a1 + 40) = v14 + v12;
  bzero((void *)(v10 - v12), v12);
  unsigned __int16 v15 = v11 - a2;
  uint64_t v17 = *(char **)(a1 + 56);
  unint64_t v16 = *(void *)(a1 + 64);
  *((_WORD *)v17 + 1) = v15;
  *(_WORD *)uint64_t v17 = *(_WORD *)(a1 + 76);
  uint64_t v18 = *(unsigned int *)(a1 + 72);
  char v19 = (char *)(v16 - 8 * v18);
  if (v18)
  {
    long long v20 = (_WORD *)(v16 - 8 * v18);
    do
    {
      *(_WORD *)&v17[(unsigned __int16)v20[2]] = v11 - *v20;
      v20 += 4;
    }
    while ((unint64_t)v20 < v16);
  }
  *(void *)(a1 + 64) = v19;
  *(_DWORD *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 76) = 0;
  int v21 = *(_DWORD *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 89))
  {
LABEL_26:
    int v26 = v21;
    if ((unint64_t)(v17 - v19) > 3) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  unint64_t v22 = *(unsigned int **)(a1 + 48);
  if (v22 >= (unsigned int *)v19)
  {
    int v26 = *(_DWORD *)(a1 + 40);
    goto LABEL_29;
  }
  size_t v23 = *(unsigned __int16 *)v17;
  long long v24 = (char *)v22 + *(void *)(a1 + 32);
  while (1)
  {
    uint64_t v25 = *v22;
    if (v23 == *(unsigned __int16 *)&v24[-v25] && !memcmp(&v24[-v25], v17, v23)) {
      break;
    }
    if (++v22 >= (unsigned int *)v19) {
      goto LABEL_26;
    }
  }
  v17 += (v21 - v11);
  *(void *)(a1 + 56) = v17;
  *(_DWORD *)(a1 + 40) = v11;
  int v21 = v25;
  int v26 = v11;
  if (v25 == v11)
  {
LABEL_29:
    if ((unint64_t)(v17 - v19) > 3)
    {
LABEL_31:
      *(_DWORD *)char v19 = v26;
      *(void *)(a1 + 64) = v19 + 4;
      goto LABEL_32;
    }
LABEL_30:
    sub_C089C8((uint64_t *)a1, 4uLL);
    char v19 = *(char **)(a1 + 64);
    goto LABEL_31;
  }
LABEL_32:
  *(_DWORD *)(*(void *)(a1 + 48) + *(void *)(a1 + 32) - v11) = v21 - v11;
  *(unsigned char *)(a1 + 78) = 0;
  return v11;
}

void *sub_C08E28(void *a1)
{
  uint64_t v2 = a1[12];
  if (v2)
  {
    sub_22EFF4(a1[12], *(void **)(v2 + 8));
    operator delete();
  }
  if (a1[6])
  {
    uint64_t v3 = *a1;
    if (!*a1) {
      operator delete[]();
    }
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  a1[6] = 0;
  if (*((unsigned char *)a1 + 8) && *a1) {
    (*(void (**)(void))(*(void *)*a1 + 8))(*a1);
  }
  *a1 = 0;
  *((unsigned char *)a1 + 8) = 0;
  return a1;
}

uint64_t sub_C08F44(uint64_t result, int a2, _DWORD *a3, int a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *(void *)(result + 48);
  *(void *)(result + 64) = v8;
  uint64_t v9 = -4;
  uint64_t v10 = -8;
  if (!a4) {
    uint64_t v10 = -4;
  }
  if (!a3) {
    uint64_t v9 = 0;
  }
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(unsigned int *)(result + 40);
  unint64_t v13 = (v11 - v12) & (*(void *)(result + 80) - 1);
  if (v13)
  {
    uint64_t v14 = *(void *)(result + 56);
    if (v14 - v8 < v13)
    {
      uint64_t result = sub_C089C8((uint64_t *)result, v13);
      uint64_t v14 = *(void *)(v7 + 56);
      LODWORD(v12) = *(_DWORD *)(v7 + 40);
    }
    uint64_t v15 = 0;
    *(void *)(v7 + 56) = v14 - v13;
    *(_DWORD *)(v7 + 40) = v12 + v13;
    do
      *(unsigned char *)(*(void *)(v7 + 56) + v15++) = 0;
    while (v13 != v15);
  }
  if (a3)
  {
    uint64_t v16 = *(void *)(v7 + 56);
    if ((unint64_t)(v16 - *(void *)(v7 + 64)) <= 3)
    {
      uint64_t result = sub_C089C8((uint64_t *)v7, 4uLL);
      uint64_t v16 = *(void *)(v7 + 56);
    }
    *(void *)(v7 + 56) = v16 - 4;
    *(_DWORD *)(v7 + 40) += 4;
    *(_DWORD *)(v16 - 4) = *a3;
  }
  if (*(void *)(v7 + 80) <= 3uLL) {
    *(void *)(v7 + 80) = 4;
  }
  int v17 = *(_DWORD *)(v7 + 40);
  unint64_t v18 = -v17 & 3;
  if ((-v17 & 3) != 0)
  {
    uint64_t v19 = *(void *)(v7 + 56);
    if (v19 - *(void *)(v7 + 64) < v18)
    {
      uint64_t result = sub_C089C8((uint64_t *)v7, v18);
      uint64_t v19 = *(void *)(v7 + 56);
      int v17 = *(_DWORD *)(v7 + 40);
    }
    uint64_t v20 = 0;
    *(void *)(v7 + 56) = v19 - v18;
    *(_DWORD *)(v7 + 40) = v17 + v18;
    do
      *(unsigned char *)(*(void *)(v7 + 56) + v20++) = 0;
    while (v18 != v20);
    int v17 = *(_DWORD *)(v7 + 40);
    if (*(void *)(v7 + 80) <= 3uLL) {
      *(void *)(v7 + 80) = 4;
    }
  }
  int v21 = v17 - a2 + 4;
  uint64_t v22 = *(void *)(v7 + 64);
  unint64_t v23 = -v17 & 3;
  if ((-v17 & 3) != 0)
  {
    uint64_t v24 = *(void *)(v7 + 56);
    if (v24 - v22 < v23)
    {
      uint64_t result = sub_C089C8((uint64_t *)v7, v23);
      uint64_t v24 = *(void *)(v7 + 56);
      int v17 = *(_DWORD *)(v7 + 40);
    }
    uint64_t v25 = 0;
    *(void *)(v7 + 56) = v24 - v23;
    *(_DWORD *)(v7 + 40) = v17 + v23;
    do
      *(unsigned char *)(*(void *)(v7 + 56) + v25++) = 0;
    while (v23 != v25);
    uint64_t v22 = *(void *)(v7 + 64);
  }
  uint64_t v26 = *(void *)(v7 + 56);
  if ((unint64_t)(v26 - v22) <= 3)
  {
    uint64_t result = sub_C089C8((uint64_t *)v7, 4uLL);
    uint64_t v26 = *(void *)(v7 + 56);
  }
  *(_DWORD *)(v7 + 40) += 4;
  *(_DWORD *)(v26 - 4) = v21;
  uint64_t v27 = v26 - 4;
  *(void *)(v7 + 56) = v27;
  if (a4)
  {
    int v28 = *(_DWORD *)(v7 + 40);
    if (*(void *)(v7 + 80) <= 3uLL) {
      *(void *)(v7 + 80) = 4;
    }
    uint64_t v29 = *(void *)(v7 + 64);
    unint64_t v30 = -v28 & 3;
    if ((-v28 & 3) != 0)
    {
      int v31 = v28;
      if (v27 - v29 < v30)
      {
        uint64_t result = sub_C089C8((uint64_t *)v7, v30);
        uint64_t v27 = *(void *)(v7 + 56);
        int v31 = *(_DWORD *)(v7 + 40);
      }
      uint64_t v32 = 0;
      *(void *)(v7 + 56) = v27 - v30;
      *(_DWORD *)(v7 + 40) = v31 + v30;
      do
        *(unsigned char *)(*(void *)(v7 + 56) + v32++) = 0;
      while (v30 != v32);
      uint64_t v27 = *(void *)(v7 + 56);
      uint64_t v29 = *(void *)(v7 + 64);
    }
    if ((unint64_t)(v27 - v29) <= 3)
    {
      uint64_t result = sub_C089C8((uint64_t *)v7, 4uLL);
      uint64_t v27 = *(void *)(v7 + 56);
    }
    *(_DWORD *)(v7 + 40) += 4;
    *(_DWORD *)(v27 - 4) = v28;
    *(void *)(v7 + 56) = v27 - 4;
  }
  *(unsigned char *)(v7 + 79) = 1;
  return result;
}

BOOL sub_C09220(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  BOOL v6 = v4 != v5;
  if (v4 == v5 && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v45);
    sub_188FC78(&v45, (uint64_t)"The journey planner request contains no origins", 47);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
    if (v41 < 0) {
      operator delete(__p[0]);
    }
    if (v48 < 0) {
      operator delete(v47);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (*(void *)(a2 + 56) == *(void *)(a2 + 64))
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)&v45);
      sub_188FC78(&v45, (uint64_t)"The journey planner request contains no destinations", 52);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      if (v41 < 0) {
        operator delete(__p[0]);
      }
      if (v48 < 0) {
        operator delete(v47);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    BOOL v6 = 0;
    if (*(void *)(a2 + 88))
    {
LABEL_10:
      uint64_t v8 = (int *)(a2 + 84);
      int v7 = *(_DWORD *)(a2 + 84);
      if (v7 == 0x7FFFFFFF) {
        goto LABEL_11;
      }
      goto LABEL_27;
    }
  }
  else if (*(void *)(a2 + 88))
  {
    goto LABEL_10;
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v45);
    sub_188FC78(&v45, (uint64_t)"The journey planner request requests no journeys.", 49);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
    if (v41 < 0) {
      operator delete(__p[0]);
    }
    if (v48 < 0) {
      operator delete(v47);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  BOOL v6 = 0;
  uint64_t v8 = (int *)(a2 + 84);
  int v7 = *(_DWORD *)(a2 + 84);
  if (v7 == 0x7FFFFFFF)
  {
LABEL_11:
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)&v45);
      sub_188FC78(&v45, (uint64_t)"The journey planner request has an invalid current time", 55);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
LABEL_121:
      if (v41 < 0) {
        operator delete(__p[0]);
      }
      if (v48 < 0) {
        operator delete(v47);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      return 0;
    }
    return 0;
  }
LABEL_27:
  if (v7 < 0)
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)&v45);
      uint64_t v12 = sub_188FC78(&v45, (uint64_t)"The journey planner request has a negative current time value of ", 65);
      sub_266E4((uint64_t)v12);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      if (v41 < 0) {
        operator delete(__p[0]);
      }
      if (v48 < 0) {
        operator delete(v47);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    BOOL v6 = 0;
    int v13 = *(_DWORD *)(a2 + 80);
    uint64_t v10 = (int *)(a2 + 80);
    int v9 = v13;
    if (v13 == 0x7FFFFFFF)
    {
LABEL_29:
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)&v45);
        sub_188FC78(&v45, (uint64_t)"The journey planner request has an invalid request time", 55);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
        goto LABEL_121;
      }
      return 0;
    }
  }
  else
  {
    int v11 = *(_DWORD *)(a2 + 80);
    uint64_t v10 = (int *)(a2 + 80);
    int v9 = v11;
    if (v11 == 0x7FFFFFFF) {
      goto LABEL_29;
    }
  }
  if (v9 < 0)
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)&v45);
      uint64_t v14 = sub_188FC78(&v45, (uint64_t)"The journey planner request has a negative request time value of ", 65);
      sub_266E4((uint64_t)v14);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      if (v41 < 0) {
        operator delete(__p[0]);
      }
      if (v48 < 0) {
        operator delete(v47);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    BOOL v6 = 0;
  }
  uint64_t v15 = sub_3757C8(a1);
  uint64_t v16 = sub_398110(v15, 0);
  int v17 = &v16[-*(int *)v16];
  if (*(unsigned __int16 *)v17 >= 5u && (uint64_t v18 = *((unsigned __int16 *)v17 + 2)) != 0) {
    int v19 = *(_DWORD *)&v16[v18];
  }
  else {
    int v19 = 0x7FFFFFFF;
  }
  uint64_t v20 = sub_3757C8(a1);
  int v21 = sub_398110(v20, 0);
  uint64_t v22 = &v21[-*(int *)v21];
  if (*(unsigned __int16 *)v22 >= 7u && (uint64_t v23 = *((unsigned __int16 *)v22 + 3)) != 0)
  {
    uint64_t v24 = *(int *)&v21[v23] + 214748365;
    if (v24 < *v10)
    {
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)&v45);
        uint64_t v25 = sub_188FC78(&v45, (uint64_t)"The journey planner request has a request time too far in the future: ", 70);
        sub_456C((uint64_t)__p, *v10);
        HIBYTE(v39[2]) = 16;
        strcpy((char *)v39, "YYYY-MM-dd HH:mm");
        sub_5444((uint64_t)__p, (uint64_t)v39, &v42);
        if ((v44 & 0x80u) == 0) {
          uint64_t v26 = &v42;
        }
        else {
          uint64_t v26 = v42;
        }
        if ((v44 & 0x80u) == 0) {
          uint64_t v27 = v44;
        }
        else {
          uint64_t v27 = v43;
        }
        sub_188FC78(v25, (uint64_t)v26, v27);
        if ((char)v44 < 0) {
          operator delete(v42);
        }
        if (SHIBYTE(v39[2]) < 0) {
          operator delete(v39[0]);
        }
        sub_4814((uint64_t)__p);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
        if (v41 < 0) {
          operator delete(__p[0]);
        }
        if (v48 < 0) {
          operator delete(v47);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      BOOL v6 = 0;
    }
  }
  else
  {
    uint64_t v24 = 2362232012;
  }
  uint64_t v28 = v19 - 214748365;
  if (v28 > *v10)
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)&v45);
      uint64_t v29 = sub_188FC78(&v45, (uint64_t)"The journey planner request has a request time too far in the past: ", 68);
      sub_456C((uint64_t)__p, *v10);
      HIBYTE(v39[2]) = 16;
      strcpy((char *)v39, "YYYY-MM-dd HH:mm");
      sub_5444((uint64_t)__p, (uint64_t)v39, &v42);
      if ((v44 & 0x80u) == 0) {
        unint64_t v30 = &v42;
      }
      else {
        unint64_t v30 = v42;
      }
      if ((v44 & 0x80u) == 0) {
        uint64_t v31 = v44;
      }
      else {
        uint64_t v31 = v43;
      }
      sub_188FC78(v29, (uint64_t)v30, v31);
      if ((char)v44 < 0) {
        operator delete(v42);
      }
      if (SHIBYTE(v39[2]) < 0) {
        operator delete(v39[0]);
      }
      sub_4814((uint64_t)__p);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      if (v41 < 0) {
        operator delete(__p[0]);
      }
      if (v48 < 0) {
        operator delete(v47);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    BOOL v6 = 0;
  }
  if (v24 < *v8)
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)&v45);
      uint64_t v32 = sub_188FC78(&v45, (uint64_t)"The journey planner request has a current time too far in the future: ", 70);
      sub_456C((uint64_t)__p, *v8);
      HIBYTE(v39[2]) = 16;
      strcpy((char *)v39, "YYYY-MM-dd HH:mm");
      sub_5444((uint64_t)__p, (uint64_t)v39, &v42);
      if ((v44 & 0x80u) == 0) {
        uint64_t v33 = &v42;
      }
      else {
        uint64_t v33 = v42;
      }
      if ((v44 & 0x80u) == 0) {
        uint64_t v34 = v44;
      }
      else {
        uint64_t v34 = v43;
      }
      sub_188FC78(v32, (uint64_t)v33, v34);
      if ((char)v44 < 0) {
        operator delete(v42);
      }
      if (SHIBYTE(v39[2]) < 0) {
        operator delete(v39[0]);
      }
      sub_4814((uint64_t)__p);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      if (v41 < 0) {
        operator delete(__p[0]);
      }
      if (v48 < 0) {
        operator delete(v47);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    BOOL v6 = 0;
  }
  if (v28 > *v8)
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)&v45);
      char v35 = sub_188FC78(&v45, (uint64_t)"The journey planner request has a current time too far in the past: ", 68);
      sub_456C((uint64_t)__p, *v8);
      HIBYTE(v39[2]) = 16;
      strcpy((char *)v39, "YYYY-MM-dd HH:mm");
      sub_5444((uint64_t)__p, (uint64_t)v39, &v42);
      if ((v44 & 0x80u) == 0) {
        char v36 = &v42;
      }
      else {
        char v36 = v42;
      }
      if ((v44 & 0x80u) == 0) {
        uint64_t v37 = v44;
      }
      else {
        uint64_t v37 = v43;
      }
      sub_188FC78(v35, (uint64_t)v36, v37);
      if ((char)v44 < 0) {
        operator delete(v42);
      }
      if (SHIBYTE(v39[2]) < 0) {
        operator delete(v39[0]);
      }
      sub_4814((uint64_t)__p);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      goto LABEL_121;
    }
    return 0;
  }
  return v6;
}

void sub_C0A150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a21 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a31);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a31);
  _Unwind_Resume(a1);
}

uint64_t sub_C0A400(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 20);
  if (v2 == 0x7FFFFFFF && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v6);
    sub_188FC78(v6, (uint64_t)"The journey planner solution has an invalid time shift value", 60);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v5 < 0) {
      operator delete(__p);
    }
    if (v7 < 0) {
      operator delete((void *)v6[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  LODWORD(result) = sub_49507C((uint64_t *)(a1 + 24), 1, 1, 1);
  if (v2 == 0x7FFFFFFF) {
    return 0;
  }
  else {
    return result;
  }
}

void sub_C0A59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_C0A5E8()
{
  unk_25E0077 = 16641;
  word_25E0060 = 65;
  byte_25E008F = 1;
  byte_25E0079 = 0;
}

uint64_t sub_C0A610(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  if (v2 == 0x7FFFFFFF && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v6);
    sub_188FC78(v6, (uint64_t)"The journey updater request has an invalid current time", 55);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v5 < 0) {
      operator delete(__p);
    }
    if (v7 < 0) {
      operator delete((void *)v6[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  LODWORD(result) = sub_49507C((uint64_t *)a1, 0, 0, 0);
  if (v2 == 0x7FFFFFFF) {
    return 0;
  }
  else {
    return result;
  }
}

void sub_C0A7AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL sub_C0A7F8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = 0x2E8BA2E8BA2E8BA3 * ((v4 - *a1) >> 4);
  if (v5 == 0xD37A6F4DE9BD37A7 * ((a2[1] - *a2) >> 3))
  {
    if (v4 == *a1) {
      return 1;
    }
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = *a1;
      if (0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 4) <= v8) {
        sub_66748();
      }
      uint64_t v10 = *a2;
      if (0xD37A6F4DE9BD37A7 * ((a2[1] - *a2) >> 3) <= v8) {
        sub_66748();
      }
      if (!*(_DWORD *)(v10 + v6))
      {
        uint64_t v11 = v10 + v6 + 8;
        if (!sub_49450C(v11, 0, 0, 0))
        {
          BOOL result = sub_723EC(1u);
          if (!result) {
            return result;
          }
          sub_6BAC((uint64_t)v18);
          sub_188FC78(v18, (uint64_t)"The journey updater response contains a journey at index ", 57);
          uint64_t v15 = (void *)std::ostream::operator<<();
          sub_188FC78(v15, (uint64_t)" which is not consistent", 24);
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 1u);
LABEL_14:
          if (v17 < 0) {
            operator delete(__p[0]);
          }
          if (v19 < 0) {
            operator delete((void *)v18[9]);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
          return 0;
        }
        if (!sub_496B48(v11, v9 + v7))
        {
          BOOL result = sub_723EC(1u);
          if (!result) {
            return result;
          }
          sub_6BAC((uint64_t)v18);
          sub_188FC78(v18, (uint64_t)"The journey updater response contains a journey at index ", 57);
          int v13 = (void *)std::ostream::operator<<();
          sub_188FC78(v13, (uint64_t)" which is not equivalent to the corresponding journey in the request", 68);
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 1u);
          goto LABEL_14;
        }
      }
      ++v8;
      v7 += 176;
      v6 += 184;
      if (v5 == v8) {
        return 1;
      }
    }
  }
  BOOL result = sub_723EC(3u);
  if (result)
  {
    sub_6BAC((uint64_t)v18);
    sub_188FC78(v18, (uint64_t)"Journey updater response contains a different number of journeys than its corresponding request: ", 97);
    uint64_t v14 = (void *)std::ostream::operator<<();
    sub_188FC78(v14, (uint64_t)" != ", 4);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 3u);
    goto LABEL_14;
  }
  return result;
}

void sub_C0ABAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_C0AC50()
{
  unk_25E00A7 = 16641;
  word_25E0090 = 65;
  byte_25E00BF = 1;
  byte_25E00A9 = 0;
}

BOOL sub_C0AC78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = __ROR8__(**(void **)(a3 + 72), 32);
  uint64_t v7 = (void *)(a1 + 4136);
  if ((sub_C0B364((void *)(a1 + 4136), v6) & 1) == 0)
  {
    BOOL result = sub_723EC(3u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v63);
    uint64_t v22 = sub_188FC78(v63, (uint64_t)"Line ", 5);
    uint64_t v23 = sub_2D1500(v22, a2);
    sub_188FC78(v23, (uint64_t)" (muid: ", 8);
    uint64_t v24 = (int *)sub_8DFD1C(*(void *)(a1 + 4056) + 24, __ROR8__(a2, 32), 0, "line");
    uint64_t v25 = (unsigned __int16 *)((char *)v24 - *v24);
    if (*v25 >= 5u && (uint64_t v26 = v25[2]) != 0) {
      uint64_t v27 = *(void *)((char *)v24 + v26);
    }
    else {
      uint64_t v27 = 0;
    }
    uint64_t v34 = sub_398020(*(void *)(a1 + 4056) + 24, 0);
    char v35 = &v34[-*(int *)v34];
    if (*(unsigned __int16 *)v35 >= 0xBu)
    {
      uint64_t v36 = *((unsigned __int16 *)v35 + 5);
      if (v36)
      {
        if (v34[v36]) {
          nullsub_1(v27);
        }
      }
    }
    uint64_t v37 = (void *)std::ostream::operator<<();
    int v38 = sub_188FC78(v37, (uint64_t)") references stop pattern ", 26);
    char v39 = sub_2D1500(v38, v6);
    sub_188FC78(v39, (uint64_t)", which does not exist", 22);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 3u);
    goto LABEL_32;
  }
  unint64_t v8 = (int *)sub_A11094(v7, v6);
  uint64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v9 >= 5u)
  {
    uint64_t v10 = v9[2];
    if (v10)
    {
      unsigned int v11 = *(unsigned __int8 *)(*(void *)(a3 + 72) + 8);
      if (*(int *)((char *)v8 + v10 + *(unsigned int *)((char *)v8 + v10)) > v11)
      {
        uint64_t v12 = (int *)sub_A11094(v7, v6);
        int v13 = (unsigned __int16 *)((char *)v12 - *v12);
        if (*v13 >= 5u && (uint64_t v14 = v13[2]) != 0)
        {
          if (__ROR8__(*(void *)sub_C0B654((unsigned int *)((char *)v12 + v14 + *(unsigned int *)((char *)v12 + v14)), v11), 32) != a2)
          {
LABEL_8:
            BOOL result = sub_723EC(3u);
            if (!result) {
              return result;
            }
            sub_6BAC((uint64_t)v63);
            uint64_t v16 = sub_188FC78(v63, (uint64_t)"Line ", 5);
            char v17 = sub_2D1500(v16, a2);
            sub_188FC78(v17, (uint64_t)" (muid: ", 8);
            uint64_t v18 = (int *)sub_8DFD1C(*(void *)(a1 + 4056) + 24, __ROR8__(a2, 32), 0, "line");
            char v19 = (unsigned __int16 *)((char *)v18 - *v18);
            if (*v19 >= 5u && (uint64_t v20 = v19[2]) != 0) {
              uint64_t v21 = *(void *)((char *)v18 + v20);
            }
            else {
              uint64_t v21 = 0;
            }
            char v48 = sub_398020(*(void *)(a1 + 4056) + 24, 0);
            int v49 = &v48[-*(int *)v48];
            if (*(unsigned __int16 *)v49 >= 0xBu)
            {
              uint64_t v50 = *((unsigned __int16 *)v49 + 5);
              if (v50)
              {
                if (v48[v50]) {
                  nullsub_1(v21);
                }
              }
            }
            int v51 = (void *)std::ostream::operator<<();
            long long v52 = sub_188FC78(v51, (uint64_t)") references stop pattern ", 26);
            long long v53 = sub_2D1500(v52, v6);
            long long v54 = sub_188FC78(v53, (uint64_t)", but the line that is referenced by the stop pattern is ", 57);
            unsigned int v55 = *(unsigned __int8 *)(*(void *)(a3 + 72) + 8);
            long long v56 = (int *)sub_A11094(v7, v6);
            long long v57 = (unsigned __int16 *)((char *)v56 - *v56);
            if (*v57 >= 5u && (uint64_t v58 = v57[2]) != 0) {
              char v59 = (unsigned int *)((char *)v56 + v58 + *(unsigned int *)((char *)v56 + v58));
            }
            else {
              char v59 = 0;
            }
            int v60 = (void *)sub_C0B654(v59, v55);
            sub_2D1500(v54, __ROR8__(*v60, 32));
            std::stringbuf::str();
            sub_7246C((uint64_t *)__p, 3u);
            goto LABEL_32;
          }
        }
        else if (__ROR8__(*(void *)sub_C0B654(0, v11), 32) != a2)
        {
          goto LABEL_8;
        }
        return 1;
      }
    }
  }
  BOOL result = sub_723EC(3u);
  if (!result) {
    return result;
  }
  sub_6BAC((uint64_t)v63);
  uint64_t v28 = sub_188FC78(v63, (uint64_t)"Line ", 5);
  uint64_t v29 = sub_2D1500(v28, a2);
  sub_188FC78(v29, (uint64_t)" (muid: ", 8);
  unint64_t v30 = (int *)sub_8DFD1C(*(void *)(a1 + 4056) + 24, __ROR8__(a2, 32), 0, "line");
  uint64_t v31 = (unsigned __int16 *)((char *)v30 - *v30);
  if (*v31 >= 5u && (uint64_t v32 = v31[2]) != 0) {
    uint64_t v33 = *(void *)((char *)v30 + v32);
  }
  else {
    uint64_t v33 = 0;
  }
  uint64_t v40 = sub_398020(*(void *)(a1 + 4056) + 24, 0);
  char v41 = &v40[-*(int *)v40];
  if (*(unsigned __int16 *)v41 >= 0xBu)
  {
    uint64_t v42 = *((unsigned __int16 *)v41 + 5);
    if (v42)
    {
      if (v40[v42]) {
        nullsub_1(v33);
      }
    }
  }
  uint64_t v43 = (void *)std::ostream::operator<<();
  unsigned __int8 v44 = sub_188FC78(v43, (uint64_t)") references stop pattern ", 26);
  uint64_t v45 = sub_2D1500(v44, v6);
  int v46 = sub_188FC78(v45, (uint64_t)" and has line index ", 20);
  std::ostream::operator<<();
  char v47 = sub_188FC78(v46, (uint64_t)", but the stop pattern has only ", 32);
  sub_A11094(v7, v6);
  std::ostream::operator<<();
  sub_188FC78(v47, (uint64_t)" lines", 6);
  std::stringbuf::str();
  sub_7246C((uint64_t *)__p, 3u);
LABEL_32:
  if (v62 < 0) {
    operator delete(__p[0]);
  }
  if (v64 < 0) {
    operator delete((void *)v63[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return 0;
}

void sub_C0B2C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_C0B364(void *a1, unint64_t a2)
{
  unint64_t v4 = HIDWORD(a2);
  if (sub_A10E20(a1, SHIDWORD(a2)))
  {
    uint64_t result = *(void *)(*a1 + 3944);
    if (result)
    {
      return sub_C0B48C(result, a2);
    }
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_24F7308))
    {
      sub_518C8(0x3B60u, 0x7FCAu);
      dword_24F7300 = v7 | 0x40000000;
      __cxa_guard_release(&qword_24F7308);
    }
    uint64_t v6 = *a1;
    if (dword_24F7300 == v4)
    {
      uint64_t result = *(void *)(v6 + 3976);
      if (result)
      {
        return sub_C0B570(result, a2);
      }
    }
    else
    {
      return sub_A11500(v6 + 24, a2, 1, "stop pattern") != 0;
    }
  }
  return result;
}

void sub_C0B474(_Unwind_Exception *a1)
{
}

BOOL sub_C0B48C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_A10A28(a1);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F72F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F72F8))
  {
    sub_518C8(0x3FFFu, 0x7FCAu);
    dword_24F72F0 = v7 | 0x40000000;
    __cxa_guard_release(&qword_24F72F8);
  }
  if (dword_24F72F0 == HIDWORD(a2)
    && (unint64_t v4 = &v3[-*(int *)v3], *(unsigned __int16 *)v4 >= 5u)
    && (uint64_t v5 = *((unsigned __int16 *)v4 + 2)) != 0)
  {
    return *(_DWORD *)&v3[v5 + *(unsigned int *)&v3[v5]] > a2;
  }
  else
  {
    return 0;
  }
}

void sub_C0B558(_Unwind_Exception *a1)
{
}

BOOL sub_C0B570(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_A10AD4(a1);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F7308))
  {
    sub_518C8(0x3B60u, 0x7FCAu);
    dword_24F7300 = v7 | 0x40000000;
    __cxa_guard_release(&qword_24F7308);
  }
  if (dword_24F7300 == HIDWORD(a2)
    && (unint64_t v4 = &v3[-*(int *)v3], *(unsigned __int16 *)v4 >= 5u)
    && (uint64_t v5 = *((unsigned __int16 *)v4 + 2)) != 0)
  {
    return *(_DWORD *)&v3[v5 + *(unsigned int *)&v3[v5]] > a2;
  }
  else
  {
    return 0;
  }
}

void sub_C0B63C(_Unwind_Exception *a1)
{
}

uint64_t sub_C0B654(unsigned int *a1, unsigned int a2)
{
  if (!a1 || *a1 <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v10, a2);
    uint64_t v5 = std::string::insert(&v10, 0, "Flatbuffer vector requested index ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    int v7 = std::string::append(&v11, " is out of range");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v7->__r_.__value_.__r.__words[2];
    long long v12 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    uint64_t v9 = (void *)sub_2F404((uint64_t)exception, &v12);
  }
  return (uint64_t)&a1[2 * a2 + 1];
}

void sub_C0B734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_C0B7B4(uint64_t a1, void *a2, unint64_t a3, char a4, char a5)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = a2;
  *(void *)(a1 + 56) = a1 + 8;
  long long v8 = (void *)(a1 + 56);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = a1 + 56;
  *(unsigned char *)(a1 + 88) = a4;
  *(unsigned char *)(a1 + 89) = a5;
  uint64_t v9 = (int *)sub_C0BB30((uint64_t)(a2 + 3), a3, 0, "stop patterns of line");
  std::string v10 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v10 >= 5u)
  {
    uint64_t v11 = v10[2];
    if (v11)
    {
      long long v12 = (int *)((char *)v9 + v11 + *(unsigned int *)((char *)v9 + v11));
      int v13 = *v12;
      if (*v12)
      {
        uint64_t v14 = v12 + 1;
        *(void *)(a1 + 8) = v14;
        *(void *)(a1 + 16) = &v14[3 * v13];
      }
    }
  }
  if (!*(unsigned char *)(a1 + 88))
  {
    uint64_t v15 = a2[507];
    if (sub_C259C0(v15 + 3896))
    {
      if (*(void *)(v15 + 3944))
      {
        uint64_t v16 = *(void *)(a2[507] + 3944);
        unint64_t v39 = a3;
        if (sub_A1E760((void *)(v16 + 128), (uint64_t *)&v39))
        {
          uint64_t v17 = a2[493];
          unint64_t v39 = a3;
          uint64_t v18 = sub_A1E760((void *)(v17 + 128), (uint64_t *)&v39);
          if (!v18) {
            goto LABEL_30;
          }
          char v19 = (unsigned int *)(v18[7] + *(unsigned int *)v18[7]);
          uint64_t v20 = (int)*v19;
          uint64_t v21 = *(unsigned __int16 *)((char *)v19 - v20 + 4);
          if (*(_WORD *)((char *)v19 - v20 + 4))
          {
            uint64_t v22 = *(unsigned int *)((char *)v19 + v21);
            uint64_t v23 = (char *)v19 + v21 + v22;
          }
          else
          {
            uint64_t v21 = 0;
            uint64_t v23 = 0;
            uint64_t v22 = *v19;
          }
          uint64_t v24 = v23 + 4;
          *(void *)(a1 + 24) = v24;
          *(void *)(a1 + 32) = &v24[12 * *(unsigned int *)((char *)v19 + v21 + v22)];
        }
      }
    }
  }
  if (*(unsigned char *)(a1 + 89)) {
    goto LABEL_24;
  }
  uint64_t v25 = a2[507];
  if (!sub_C259D4(v25 + 3896)) {
    goto LABEL_24;
  }
  if (!*(void *)(v25 + 3960)) {
    goto LABEL_24;
  }
  uint64_t v26 = *(void *)(a2[507] + 3976);
  if (!v26) {
    goto LABEL_24;
  }
  unint64_t v39 = a3;
  if (!sub_A1E760((void *)(v26 + 128), (uint64_t *)&v39)) {
    goto LABEL_24;
  }
  uint64_t v27 = a2[497];
  unint64_t v39 = a3;
  uint64_t v28 = sub_A1E760((void *)(v27 + 128), (uint64_t *)&v39);
  if (!v28) {
LABEL_30:
  }
    sub_5AE8("unordered_map::at: key not found");
  uint64_t v29 = (unsigned int *)(v28[7] + *(unsigned int *)v28[7]);
  uint64_t v30 = (int)*v29;
  uint64_t v31 = *(unsigned __int16 *)((char *)v29 - v30 + 4);
  if (*(_WORD *)((char *)v29 - v30 + 4))
  {
    uint64_t v32 = *(unsigned int *)((char *)v29 + v31);
    uint64_t v33 = (char *)v29 + v31 + v32;
  }
  else
  {
    uint64_t v31 = 0;
    uint64_t v33 = 0;
    uint64_t v32 = *v29;
  }
  uint64_t v34 = v33 + 4;
  *(void *)(a1 + 40) = v34;
  *(void *)(a1 + 48) = &v34[12 * *(unsigned int *)((char *)v29 + v31 + v32)];
LABEL_24:
  uint64_t v36 = *(void **)(a1 + 56);
  unint64_t v35 = *(void *)(a1 + 64);
  if ((unint64_t)v36 < v35)
  {
    while (1)
    {
      uint64_t v37 = v36[1];
      if (*v36 != v37) {
        break;
      }
      v36 += 2;
      *long long v8 = v36;
      if ((unint64_t)v36 >= v35) {
        goto LABEL_29;
      }
    }
    *(void *)(a1 + 72) = *v36;
    *(void *)(a1 + 80) = v37;
  }
LABEL_29:
  sub_C0BA18(a1);
  return a1;
}

uint64_t sub_C0BA18(uint64_t result)
{
  uint64_t v1 = *(uint64_t **)(result + 72);
  if ((unint64_t)v1 < *(void *)(result + 80))
  {
    int v2 = (unsigned char *)result;
    do
    {
      if (v2[88]) {
        goto LABEL_18;
      }
      uint64_t v3 = *(void *)v2;
      uint64_t v4 = *v1;
      uint64_t v5 = *(void *)(*(void *)v2 + 4136);
      uint64_t result = sub_C259C0(v5 + 3896);
      if (!result
        || !*(void *)(v5 + 3944)
        || (long long v6 = (void *)(v3 + 4136), v7 = __ROR8__(v4, 32), result = sub_A10E20(v6, SHIDWORD(v7)), (result & 1) != 0)
        || (long long v8 = *(void **)(*v6 + 3944), v12 = v7, (result = (uint64_t)sub_A1E760(v8, &v12)) == 0))
      {
LABEL_18:
        if (!*(unsigned char *)(*(void *)v2 + 16)) {
          break;
        }
        uint64_t result = sub_C0C088((uint64_t **)(*(void *)v2 + 4136), __ROR8__(**((void **)v2 + 9), 32));
        if (result) {
          break;
        }
      }
      uint64_t v9 = (uint64_t *)*((void *)v2 + 10);
      uint64_t v1 = (uint64_t *)(*((void *)v2 + 9) + 12);
      *((void *)v2 + 9) = v1;
      if (v1 == v9)
      {
        unint64_t v10 = *((void *)v2 + 8);
        unint64_t v11 = *((void *)v2 + 7) + 16;
        *((void *)v2 + 7) = v11;
        if (v11 >= v10) {
          return result;
        }
        while (1)
        {
          uint64_t v1 = *(uint64_t **)v11;
          uint64_t v9 = *(uint64_t **)(v11 + 8);
          if (*(uint64_t **)v11 != v9) {
            break;
          }
          v11 += 16;
          *((void *)v2 + 7) = v11;
          if (v11 >= v10) {
            return result;
          }
        }
        *((void *)v2 + 9) = v1;
        *((void *)v2 + 10) = v9;
      }
    }
    while (v1 < v9);
  }
  return result;
}

uint64_t sub_C0BB30(uint64_t a1, unint64_t a2, int a3, char *a4)
{
  unsigned int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  LODWORD(v63.__r_.__value_.__l.__data_) = HIDWORD(a2);
  LODWORD(v62.__r_.__value_.__l.__data_) = a3;
  *(void *)&long long v64 = &v62;
  *((void *)&v64 + 1) = &v63;
  unint64_t v9 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v9;
  uint64_t v10 = *(void *)a1;
  if (!v10) {
    goto LABEL_40;
  }
  uint64_t v11 = a1 + 16;
  if (*(_DWORD *)(a1 + 880) == HIDWORD(a2))
  {
    unsigned int v12 = 36;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 904) == HIDWORD(a2))
  {
    unsigned int v12 = 37;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 928) == HIDWORD(a2))
  {
    unsigned int v12 = 38;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 952) == HIDWORD(a2))
  {
    unsigned int v12 = 39;
LABEL_10:
    ++*(void *)(a1 + 3864);
    uint64_t v13 = v11 + 24 * v12;
    *(void *)(v13 + 8) = v9;
    uint64_t v14 = *(unsigned int **)(v13 + 16);
    if (v14) {
      goto LABEL_11;
    }
LABEL_40:
    sub_398390((int **)&v64);
    uint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
    return 0;
  }
  unint64_t v20 = *(void *)(a1 + 936);
  unint64_t v21 = *(void *)(a1 + 912);
  unint64_t v22 = *(void *)(a1 + 888);
  BOOL v23 = v22 >= v9;
  if (v22 < v9) {
    unint64_t v9 = *(void *)(a1 + 888);
  }
  int v24 = 36;
  if (v23) {
    int v24 = 0;
  }
  BOOL v25 = v21 >= v9;
  if (v21 < v9) {
    unint64_t v9 = *(void *)(a1 + 912);
  }
  int v26 = 37;
  if (v25) {
    int v26 = v24;
  }
  if (v20 >= v9) {
    unint64_t v27 = v9;
  }
  else {
    unint64_t v27 = *(void *)(a1 + 936);
  }
  unint64_t v28 = *(void *)(a1 + 960);
  if (v20 >= v9) {
    int v29 = v26;
  }
  else {
    int v29 = 38;
  }
  uint64_t v14 = (unsigned int *)sub_2AB884(v10, 9, HIDWORD(a2), 1);
  unsigned int v30 = 39;
  if (v28 >= v27) {
    unsigned int v30 = v29;
  }
  uint64_t v31 = v11 + 24 * v30;
  *(_DWORD *)uint64_t v31 = v63.__r_.__value_.__l.__data_;
  *(void *)(v31 + 8) = *(void *)(a1 + 3856);
  *(void *)(v31 + 16) = v14;
  if (!v14) {
    goto LABEL_40;
  }
LABEL_11:
  uint64_t v15 = (int *)((char *)v14 + *v14);
  uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 0xBu)
  {
    uint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v17 = v16[5];
    if (v17)
    {
      uint64_t v18 = (unsigned int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
      if (*v18 > v6) {
        return (uint64_t)&v18[v6 + 1] + v18[v6 + 1];
      }
    }
    else
    {
      uint64_t v18 = 0;
    }
    if (a3 != 1)
    {
LABEL_19:
      if (!a3)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        uint64_t v33 = a4;
        uint64_t v34 = (uint64_t)exception;
        sub_5E5C(&v57, v33);
        unint64_t v35 = std::string::insert(&v57, 0, "Failed to acquire entity \"");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        uint64_t v37 = std::string::append(&v58, "\" in quad node ");
        long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v56, v8);
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v39 = &v56;
        }
        else {
          unint64_t v39 = (std::string *)v56.__r_.__value_.__r.__words[0];
        }
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v56.__r_.__value_.__l.__size_;
        }
        char v41 = std::string::append(&v59, (const std::string::value_type *)v39, size);
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        uint64_t v43 = std::string::append(&v60, " at position ");
        long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v55, v6);
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v45 = &v55;
        }
        else {
          uint64_t v45 = (std::string *)v55.__r_.__value_.__r.__words[0];
        }
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v46 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v46 = v55.__r_.__value_.__l.__size_;
        }
        char v47 = std::string::append(&v61, (const std::string::value_type *)v45, v46);
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v62.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        int v49 = std::string::append(&v62, " on layer ");
        long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v63.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        int v51 = sub_736EC(9u);
        long long v52 = std::string::append(&v63, v51);
        long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        std::string::size_type v65 = v52->__r_.__value_.__r.__words[2];
        long long v64 = v53;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        long long v54 = (void *)sub_2F404(v34, &v64);
      }
      return (uint64_t)&v18[v6 + 1] + v18[v6 + 1];
    }
  }
  return 0;
}

void sub_C0BECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 89) < 0) {
    operator delete(*(void **)(v54 - 112));
  }
  if (*(char *)(v54 - 121) < 0)
  {
    operator delete(*(void **)(v54 - 144));
    if ((*(char *)(v54 - 153) & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  else if ((*(char *)(v54 - 153) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v54 - 176));
  if ((a15 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a10);
  if ((a54 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a42);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a16);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_12;
  }
LABEL_20:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
LABEL_21:
  }
    _Unwind_Resume(a1);
LABEL_12:
  operator delete(__p);
  goto LABEL_21;
}

uint64_t sub_C0C088(uint64_t **a1, unint64_t a2)
{
  unint64_t v3 = HIDWORD(a2);
  if (sub_A10E20(a1, SHIDWORD(a2)) && (*a1)[493]) {
    return 1;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F7308))
  {
    sub_518C8(0x3B60u, 0x7FCAu);
    dword_24F7300 = v7 | 0x40000000;
    __cxa_guard_release(&qword_24F7308);
  }
  uint64_t v4 = *a1;
  if (dword_24F7300 == v3)
  {
    if (v4[497]) {
      return 1;
    }
  }
  uint64_t v6 = *v4;

  return sub_2AB7E4(v6);
}

void sub_C0C15C(_Unwind_Exception *a1)
{
}

BOOL sub_C0C174(uint64_t a1)
{
  BOOL v1 = sub_DAA288(a1);
  if (!v1 && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v5);
    sub_188FC78(v5, (uint64_t)"The nearby payment method lookup parameters contain invalid origin point details.", 81);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v4 < 0) {
      operator delete(__p);
    }
    if (v6 < 0) {
      operator delete((void *)v5[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return v1;
}

void sub_C0C2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL sub_C0C334(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 1584);
  uint64_t v2 = *(void *)(a1 + 1592);
  if (v1 == v2) {
    return 1;
  }
  while (*(_DWORD *)(v1 + 376) == 2)
  {
    v1 += 384;
    if (v1 == v2) {
      return 1;
    }
  }
  BOOL result = sub_723EC(1u);
  if (result)
  {
    sub_6BAC((uint64_t)v6);
    sub_188FC78(v6, (uint64_t)"Payment method lookup request has place request parameters which are not of type nearby payment method lookup parameters.", 121);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v5 < 0) {
      operator delete(__p);
    }
    if (v7 < 0) {
      operator delete((void *)v6[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    return 0;
  }
  return result;
}

void sub_C0C500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void (__cdecl **a16)(std::stringbuf *__hidden this), uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  _Unwind_Resume(a1);
}

BOOL sub_C0C604(uint64_t a1, void *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 1592) - *(void *)(a1 + 1584)) >> 7);
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 3);
  if (v2 != v3 && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v8);
    sub_188FC78(v8, (uint64_t)"The payment method lookup response has a different number of solutions than there are place request parameters in the payment method lookup request: ", 149);
    char v4 = (void *)std::ostream::operator<<();
    sub_188FC78(v4, (uint64_t)" != ", 4);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v7 < 0) {
      operator delete(__p);
    }
    if (v9 < 0) {
      operator delete((void *)v8[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return v2 == v3;
}

void sub_C0C800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_C0C84C()
{
  unk_25E00D7 = 16641;
  word_25E00C0 = 65;
  byte_25E00EF = 1;
  byte_25E00D9 = 0;
}

void sub_C0C874()
{
  uint64_t v0 = (void *)__chkstk_darwin();
  uint64_t v2 = v0[1];
  *(void *)&long long v17 = *v0;
  *((void *)&v17 + 1) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = v1[1];
  *(void *)&long long v8 = *v1;
  *((void *)&v8 + 1) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = v1[3];
  uint64_t v9 = v1[2];
  uint64_t v10 = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = v1[5];
  uint64_t v11 = v1[4];
  uint64_t v12 = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = v1[7];
  uint64_t v13 = v1[6];
  uint64_t v14 = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = v1[9];
  uint64_t v15 = v1[8];
  uint64_t v16 = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  sub_9F5514(&v18, &v17, 1, &v8);
}

void sub_C0F3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  __cxa_guard_abort(&qword_24F7308);
  long long v42 = (void *)STACK[0x1168];
  if (STACK[0x1168])
  {
    STACK[0x1170] = (unint64_t)v42;
    operator delete(v42);
  }
  sub_49DA2C(&a41);
  _Unwind_Resume(a1);
}

void sub_C0F878(uint64_t a1@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F7308))
  {
    unint64_t v31 = sub_A10F80(-85.0, -13.0);
    sub_518C8(v31 >> 17, v31 >> 49);
    dword_24F7300 = v32 | 0x40000000;
    __cxa_guard_release(&qword_24F7308);
  }
  uint64_t v4 = dword_24F7300;
  uint64_t v5 = sub_A10AD4(a1);
  if (v5)
  {
    uint64_t v6 = &v5[-*(int *)v5];
    if (*(unsigned __int16 *)v6 >= 5u)
    {
      uint64_t v7 = *((unsigned __int16 *)v6 + 2);
      if (v7)
      {
        uint64_t v8 = *(unsigned int *)&v5[v7 + *(unsigned int *)&v5[v7]];
        if (v8)
        {
          uint64_t v9 = 0;
          uint64_t v10 = v4 << 32;
          uint64_t v11 = a2[1];
          while (1)
          {
            unint64_t v13 = (unint64_t)a2[2];
            if ((unint64_t)v11 < v13)
            {
              *(void *)uint64_t v11 = v10 | v9;
              uint64_t v12 = (uint64_t)(v11 + 8);
              goto LABEL_8;
            }
            uint64_t v14 = *a2;
            uint64_t v15 = v11 - *a2;
            uint64_t v16 = v15 >> 3;
            unint64_t v17 = (v15 >> 3) + 1;
            if (v17 >> 61) {
              sub_2E00();
            }
            uint64_t v18 = v13 - (void)v14;
            if (v18 >> 2 > v17) {
              unint64_t v17 = v18 >> 2;
            }
            if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v19 = v17;
            }
            if (v19)
            {
              if (v19 >> 61) {
                sub_188D718();
              }
              unint64_t v20 = operator new(8 * v19);
              unint64_t v21 = &v20[8 * v16];
              *(void *)unint64_t v21 = v10 | v9;
              uint64_t v12 = (uint64_t)(v21 + 8);
              if (v11 == v14)
              {
LABEL_19:
                *a2 = v21;
                a2[1] = (char *)v12;
                a2[2] = &v20[8 * v19];
                if (!v11) {
                  goto LABEL_8;
                }
LABEL_26:
                operator delete(v11);
                goto LABEL_8;
              }
            }
            else
            {
              unint64_t v20 = 0;
              unint64_t v21 = (char *)(8 * v16);
              *(void *)(8 * v16) = v10 | v9;
              uint64_t v12 = 8 * v16 + 8;
              if (v11 == v14) {
                goto LABEL_19;
              }
            }
            unint64_t v22 = v11 - 8 - v14;
            if (v22 < 0x168)
            {
              BOOL v23 = v11;
              goto LABEL_24;
            }
            if (&v20[v15 - 8 - (v22 & 0xFFFFFFFFFFFFFFF8)] > &v20[v15 - 8]) {
              break;
            }
            if (&v11[-(v22 & 0xFFFFFFFFFFFFFFF8) - 8] > v11 - 8)
            {
              BOOL v23 = v11;
              goto LABEL_24;
            }
            if ((unint64_t)(v11 - &v20[v15]) < 0x20)
            {
              BOOL v23 = v11;
              goto LABEL_24;
            }
            uint64_t v25 = (v22 >> 3) + 1;
            uint64_t v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
            BOOL v23 = &v11[-v26];
            v21 -= v26;
            unint64_t v27 = &v20[8 * v16 - 16];
            unint64_t v28 = (long long *)(v11 - 16);
            uint64_t v29 = v25 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v30 = *v28;
              *(v27 - 1) = *(v28 - 1);
              *unint64_t v27 = v30;
              v27 -= 2;
              v28 -= 2;
              v29 -= 4;
            }
            while (v29);
            if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_24;
            }
LABEL_25:
            uint64_t v11 = *a2;
            *a2 = v21;
            a2[1] = (char *)v12;
            a2[2] = &v20[8 * v19];
            if (v11) {
              goto LABEL_26;
            }
LABEL_8:
            a2[1] = (char *)v12;
            ++v9;
            uint64_t v11 = (char *)v12;
            if (v9 == v8) {
              return;
            }
          }
          BOOL v23 = v11;
          do
          {
LABEL_24:
            uint64_t v24 = *((void *)v23 - 1);
            v23 -= 8;
            *((void *)v21 - 1) = v24;
            v21 -= 8;
          }
          while (v23 != v14);
          goto LABEL_25;
        }
      }
    }
  }
}

void sub_C0FB24(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_24F7308);
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void sub_C0FB5C(uint64_t a1@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *(void **)(a1 + 104);
  if (v2)
  {
    uint64_t v4 = 0;
    while (1)
    {
      unint64_t v6 = (unint64_t)a2[2];
      if ((unint64_t)v4 < v6)
      {
        *(void *)uint64_t v4 = v2[2];
        uint64_t v5 = (uint64_t)(v4 + 8);
        goto LABEL_4;
      }
      uint64_t v7 = *a2;
      uint64_t v8 = v4 - *a2;
      uint64_t v9 = v8 >> 3;
      unint64_t v10 = (v8 >> 3) + 1;
      if (v10 >> 61) {
        sub_2E00();
      }
      uint64_t v11 = v6 - (void)v7;
      if (v11 >> 2 > v10) {
        unint64_t v10 = v11 >> 2;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v10;
      }
      if (v12)
      {
        if (v12 >> 61) {
          sub_188D718();
        }
        unint64_t v13 = operator new(8 * v12);
        uint64_t v14 = &v13[8 * v9];
        *(void *)uint64_t v14 = v2[2];
        uint64_t v5 = (uint64_t)(v14 + 8);
        if (v4 == v7)
        {
LABEL_15:
          *a2 = v14;
          a2[1] = (char *)v5;
          a2[2] = &v13[8 * v12];
          if (!v4) {
            goto LABEL_4;
          }
LABEL_22:
          operator delete(v4);
          goto LABEL_4;
        }
      }
      else
      {
        unint64_t v13 = 0;
        uint64_t v14 = (char *)(8 * v9);
        *(void *)(8 * v9) = v2[2];
        uint64_t v5 = 8 * v9 + 8;
        if (v4 == v7) {
          goto LABEL_15;
        }
      }
      unint64_t v15 = v4 - 8 - v7;
      if (v15 < 0x168)
      {
        uint64_t v16 = v4;
        goto LABEL_20;
      }
      if (&v13[v8 - 8 - (v15 & 0xFFFFFFFFFFFFFFF8)] > &v13[v8 - 8]) {
        break;
      }
      if (&v4[-(v15 & 0xFFFFFFFFFFFFFFF8) - 8] > v4 - 8)
      {
        uint64_t v16 = v4;
        goto LABEL_20;
      }
      if ((unint64_t)(v4 - v13 - v8) < 0x20)
      {
        uint64_t v16 = v4;
        goto LABEL_20;
      }
      uint64_t v18 = (v15 >> 3) + 1;
      uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v16 = &v4[-v19];
      v14 -= v19;
      unint64_t v20 = &v13[8 * v9 - 16];
      unint64_t v21 = (long long *)(v4 - 16);
      uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v23 = *v21;
        *(v20 - 1) = *(v21 - 1);
        *unint64_t v20 = v23;
        v20 -= 2;
        v21 -= 2;
        v22 -= 4;
      }
      while (v22);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_20;
      }
LABEL_21:
      uint64_t v4 = *a2;
      *a2 = v14;
      a2[1] = (char *)v5;
      a2[2] = &v13[8 * v12];
      if (v4) {
        goto LABEL_22;
      }
LABEL_4:
      a2[1] = (char *)v5;
      uint64_t v2 = (void *)*v2;
      uint64_t v4 = (char *)v5;
      if (!v2) {
        return;
      }
    }
    uint64_t v16 = v4;
    do
    {
LABEL_20:
      uint64_t v17 = *((void *)v16 - 1);
      v16 -= 8;
      *((void *)v14 - 1) = v17;
      v14 -= 8;
    }
    while (v16 != v7);
    goto LABEL_21;
  }
}

void sub_C0FD64(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_C0FD8C(uint64_t a1@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *(void **)(a1 + 144);
  if (v2)
  {
    uint64_t v4 = 0;
    while (1)
    {
      unint64_t v6 = (unint64_t)a2[2];
      if ((unint64_t)v4 < v6)
      {
        *(void *)uint64_t v4 = v2[2];
        uint64_t v5 = (uint64_t)(v4 + 8);
        goto LABEL_4;
      }
      uint64_t v7 = *a2;
      uint64_t v8 = v4 - *a2;
      uint64_t v9 = v8 >> 3;
      unint64_t v10 = (v8 >> 3) + 1;
      if (v10 >> 61) {
        sub_2E00();
      }
      uint64_t v11 = v6 - (void)v7;
      if (v11 >> 2 > v10) {
        unint64_t v10 = v11 >> 2;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v10;
      }
      if (v12)
      {
        if (v12 >> 61) {
          sub_188D718();
        }
        unint64_t v13 = operator new(8 * v12);
        uint64_t v14 = &v13[8 * v9];
        *(void *)uint64_t v14 = v2[2];
        uint64_t v5 = (uint64_t)(v14 + 8);
        if (v4 == v7)
        {
LABEL_15:
          *a2 = v14;
          a2[1] = (char *)v5;
          a2[2] = &v13[8 * v12];
          if (!v4) {
            goto LABEL_4;
          }
LABEL_22:
          operator delete(v4);
          goto LABEL_4;
        }
      }
      else
      {
        unint64_t v13 = 0;
        uint64_t v14 = (char *)(8 * v9);
        *(void *)(8 * v9) = v2[2];
        uint64_t v5 = 8 * v9 + 8;
        if (v4 == v7) {
          goto LABEL_15;
        }
      }
      unint64_t v15 = v4 - 8 - v7;
      if (v15 < 0x168)
      {
        uint64_t v16 = v4;
        goto LABEL_20;
      }
      if (&v13[v8 - 8 - (v15 & 0xFFFFFFFFFFFFFFF8)] > &v13[v8 - 8]) {
        break;
      }
      if (&v4[-(v15 & 0xFFFFFFFFFFFFFFF8) - 8] > v4 - 8)
      {
        uint64_t v16 = v4;
        goto LABEL_20;
      }
      if ((unint64_t)(v4 - v13 - v8) < 0x20)
      {
        uint64_t v16 = v4;
        goto LABEL_20;
      }
      uint64_t v18 = (v15 >> 3) + 1;
      uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v16 = &v4[-v19];
      v14 -= v19;
      unint64_t v20 = &v13[8 * v9 - 16];
      unint64_t v21 = (long long *)(v4 - 16);
      uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v23 = *v21;
        *(v20 - 1) = *(v21 - 1);
        *unint64_t v20 = v23;
        v20 -= 2;
        v21 -= 2;
        v22 -= 4;
      }
      while (v22);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_20;
      }
LABEL_21:
      uint64_t v4 = *a2;
      *a2 = v14;
      a2[1] = (char *)v5;
      a2[2] = &v13[8 * v12];
      if (v4) {
        goto LABEL_22;
      }
LABEL_4:
      a2[1] = (char *)v5;
      uint64_t v2 = (void *)*v2;
      uint64_t v4 = (char *)v5;
      if (!v2) {
        return;
      }
    }
    uint64_t v16 = v4;
    do
    {
LABEL_20:
      uint64_t v17 = *((void *)v16 - 1);
      v16 -= 8;
      *((void *)v14 - 1) = v17;
      v14 -= 8;
    }
    while (v16 != v7);
    goto LABEL_21;
  }
}

void sub_C0FF94(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_C0FFBC(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8) == 0x7FFFFFFF)
  {
    BOOL result = sub_723EC(1u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)&v5);
    sub_188FC78(&v5, (uint64_t)"The schedule lookup request has an invalid current time", 55);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
    goto LABEL_20;
  }
  if (!*(unsigned char *)(a1 + 20)) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 1568) != 0x7FFFFFFF)
  {
    int v2 = *(_DWORD *)(a1 + 1572);
    BOOL result = 1;
    if (v2 != 0x7FFFFFFF) {
      return result;
    }
    if (!sub_723EC(1u)) {
      goto LABEL_18;
    }
    sub_6BAC((uint64_t)&v5);
    sub_188FC78(&v5, (uint64_t)"The schedule options have an invalid duration", 45);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
    goto LABEL_13;
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v5);
    sub_188FC78(&v5, (uint64_t)"The schedule options have an invalid start time", 47);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
LABEL_13:
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (v8 < 0) {
      operator delete(v7);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
LABEL_18:
  BOOL result = sub_723EC(1u);
  if (!result) {
    return result;
  }
  sub_6BAC((uint64_t)&v5);
  sub_188FC78(&v5, (uint64_t)"The schedule lookup request has inconsistent schedule options", 61);
  std::stringbuf::str();
  sub_7246C((uint64_t *)__p, 1u);
LABEL_20:
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return 0;
}

void sub_C10330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_C10400(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 4);
  BOOL v3 = v2 != 0x7FFFFFFF;
  if (v2 == 0x7FFFFFFF && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v51);
    sub_188FC78(&v51, (uint64_t)"The schedule lookup solution has an invalid time shift value", 60);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
    if (v50 < 0) {
      operator delete(__p[0]);
    }
    if (SBYTE7(v54) < 0) {
      operator delete((void *)v53);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 64);
  if (v4 != v5 && 0xEEEEEEEEEEEEEEEFLL * ((v5 - v4) >> 3) <= *(unsigned int *)(a1 + 104))
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)&v51);
      sub_188FC78(&v51, (uint64_t)"The selected schedule index is out of range: ", 45);
      unint64_t v6 = (void *)std::ostream::operator<<();
      sub_188FC78(v6, (uint64_t)" >= ", 4);
      std::ostream::operator<<();
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      if (v50 < 0) {
        operator delete(__p[0]);
      }
      if (SBYTE7(v54) < 0) {
        operator delete((void *)v53);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    BOOL v3 = 0;
  }
  BOOL v36 = v3;
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  if (v7 != v8)
  {
    while (sub_C112EC(v7))
    {
      v7 += 120;
      if (v7 == v8) {
        goto LABEL_20;
      }
    }
    goto LABEL_67;
  }
LABEL_20:
  uint64_t v9 = *(void **)(a1 + 32);
  uint64_t v37 = *(void **)(a1 + 40);
  if (v9 != v37)
  {
    unint64_t v10 = v56;
    do
    {
      uint64_t v11 = v9[1];
      BOOL v12 = *v9 != v11;
      if (*v9 == v11 && sub_723EC(1u))
      {
        sub_6BAC((uint64_t)&v51);
        sub_188FC78(&v51, (uint64_t)"Schedule cell has no associated schedule indices", 48);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
        if (v50 < 0) {
          operator delete(__p[0]);
        }
        int v51 = v45;
        *(void *)((char *)&v52[-1] + (void)*(v45 - 3)) = v47;
        if (SBYTE7(v54) < 0) {
          operator delete((void *)v53);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      unint64_t v39 = v9;
      uint64_t v14 = (void *)*v9;
      unint64_t v13 = (void *)v9[1];
      while (v14 != v13)
      {
        if (*v14 >= 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 3))
        {
          if (sub_723EC(1u))
          {
            unint64_t v15 = v10;
            int v51 = v43;
            *(void *)((char *)&v52[-1] + (void)*(v43 - 3)) = v41;
            uint64_t v16 = (std::ios_base *)((char *)&v52[-1] + (void)*(v51 - 3));
            std::ios_base::init(v16, v52);
            v16[1].__vftable = 0;
            v16[1].__fmtflags_ = -1;
            std::streambuf::basic_streambuf();
            long long v53 = 0u;
            long long v54 = 0u;
            int v55 = 16;
            unint64_t v10 = v15;
            sub_188FC78(&v51, (uint64_t)"Schedule cell references a schedule at index ", 45);
            uint64_t v17 = (void *)std::ostream::operator<<();
            sub_188FC78(v17, (uint64_t)", which is out of range (schedules size: ", 41);
            uint64_t v18 = (void *)std::ostream::operator<<();
            sub_188FC78(v18, (uint64_t)")", 1);
            std::stringbuf::str();
            sub_7246C((uint64_t *)__p, 1u);
            if (v50 < 0) {
              operator delete(__p[0]);
            }
            int v51 = v45;
            *(void *)((char *)&v52[-1] + (void)*(v45 - 3)) = v47;
            if (SBYTE7(v54) < 0) {
              operator delete((void *)v53);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
          BOOL v12 = 0;
        }
        ++v14;
      }
      if (!v12) {
        goto LABEL_67;
      }
      uint64_t v9 = v39 + 6;
    }
    while (v39 + 6 != v37);
  }
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v34 = *(void *)(a1 + 16);
  if (v19 == v34)
  {
    int v23 = 1;
    return v36 & v23;
  }
  unint64_t v20 = v56;
  unint64_t v21 = *(void **)v19;
  uint64_t v35 = *(void *)(a1 + 8);
  long long v38 = *(void **)(v19 + 8);
  if (*(void **)v19 != v38)
  {
    while (1)
    {
LABEL_46:
      uint64_t v25 = v21[1];
      BOOL v26 = *v21 != v25;
      if (*v21 == v25 && sub_723EC(1u))
      {
        sub_6BAC((uint64_t)&v51);
        sub_188FC78(&v51, (uint64_t)"Schedule group has no associated schedule cell indices", 54);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
        if (v50 < 0) {
          operator delete(__p[0]);
        }
        int v51 = v46;
        *(void *)((char *)&v52[-1] + (void)*(v46 - 3)) = v48;
        if (SBYTE7(v54) < 0) {
          operator delete((void *)v53);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      unint64_t v27 = (void *)*v21;
      unint64_t v28 = (void *)v21[1];
      uint64_t v40 = v21;
      while (v27 != v28)
      {
        if (*v27 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 4))
        {
          if (sub_723EC(1u))
          {
            uint64_t v29 = v20;
            int v51 = v44;
            *(void *)((char *)&v52[-1] + (void)*(v44 - 3)) = v42;
            long long v30 = (std::ios_base *)((char *)&v52[-1] + (void)*(v51 - 3));
            std::ios_base::init(v30, v52);
            v30[1].__vftable = 0;
            v30[1].__fmtflags_ = -1;
            std::streambuf::basic_streambuf();
            long long v53 = 0u;
            long long v54 = 0u;
            int v55 = 16;
            unint64_t v20 = v29;
            sub_188FC78(&v51, (uint64_t)"Schedule group references a schedule cell at index ", 51);
            unint64_t v31 = (void *)std::ostream::operator<<();
            sub_188FC78(v31, (uint64_t)", which is out of range (cells size: ", 37);
            int v32 = (void *)std::ostream::operator<<();
            sub_188FC78(v32, (uint64_t)")", 1);
            std::stringbuf::str();
            sub_7246C((uint64_t *)__p, 1u);
            if (v50 < 0) {
              operator delete(__p[0]);
            }
            int v51 = v46;
            *(void *)((char *)&v52[-1] + (void)*(v46 - 3)) = v48;
            if (SBYTE7(v54) < 0) {
              operator delete((void *)v53);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
          BOOL v26 = 0;
        }
        ++v27;
      }
      if (!v26) {
        break;
      }
      unint64_t v21 = v40 + 7;
      if (v40 + 7 == v38) {
        goto LABEL_44;
      }
    }
LABEL_67:
    int v23 = 0;
    return v36 & v23;
  }
LABEL_44:
  while (1)
  {
    uint64_t v22 = (void **)(v35 + 32);
    int v23 = 1;
    if (v35 + 32 == v34) {
      return v36 & v23;
    }
    unint64_t v21 = *v22;
    uint64_t v24 = *(void **)(v35 + 40);
    v35 += 32;
    long long v38 = v24;
    if (*v22 != v24) {
      goto LABEL_46;
    }
  }
}

void sub_C11014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  if (a25 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a26);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_C1108C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void (__cdecl **a27)(std::stringbuf *__hidden this),uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  a26 = a18;
  *(uint64_t *)((char *)&a26 + *(void *)(a18 - 24)) = a19;
  if (a40 < 0) {
    operator delete(a35);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  _Unwind_Resume(a1);
}

BOOL sub_C112EC(uint64_t a1)
{
  BOOL v3 = *(char **)(a1 + 24);
  int v2 = *(char **)(a1 + 32);
  if (v3 == v2) {
    goto LABEL_59;
  }
  if (*(unsigned int *)(a1 + 48) >= (unint64_t)((v2 - v3) >> 5))
  {
    BOOL result = sub_723EC(1u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v59);
    sub_188FC78(v59, (uint64_t)"The selected journey leg sequence index is out of range: ", 57);
    uint64_t v34 = (void *)std::ostream::operator<<();
    sub_188FC78(v34, (uint64_t)" >= ", 4);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v54, 1u);
    goto LABEL_68;
  }
  while (2)
  {
    uint64_t v4 = *(long long **)v3;
    if (*(void *)v3 == *((void *)v3 + 1))
    {
      BOOL result = sub_723EC(1u);
      if (result)
      {
        sub_6BAC((uint64_t)v59);
        sub_188FC78(v59, (uint64_t)"Public transport journey leg sequence does not contain any journey legs", 71);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v54, 1u);
        goto LABEL_68;
      }
      return result;
    }
    do
    {
      if (*(_DWORD *)v4 == -1)
      {
        BOOL result = sub_723EC(1u);
        if (!result) {
          return result;
        }
        sub_6BAC((uint64_t)v59);
        sub_188FC78(v59, (uint64_t)"Public transport journey leg has an invalid id", 46);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v54, 1u);
        goto LABEL_68;
      }
      if (*((_DWORD *)v4 + 1) == -1 || !*((_DWORD *)v4 + 2))
      {
        BOOL result = sub_723EC(1u);
        if (!result) {
          return result;
        }
        sub_6BAC((uint64_t)v59);
        sub_188FC78(v59, (uint64_t)"Public transport journey leg has an invalid trip reference", 58);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v54, 1u);
        goto LABEL_68;
      }
      if (*((_DWORD *)v4 + 3) == -1)
      {
        BOOL result = sub_723EC(1u);
        if (!result) {
          return result;
        }
        sub_6BAC((uint64_t)v59);
        sub_188FC78(v59, (uint64_t)"Public transport journey leg has an invalid schedule index", 58);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v54, 1u);
        goto LABEL_68;
      }
      if (*((_DWORD *)v4 + 4) == -1)
      {
        BOOL result = sub_723EC(1u);
        if (!result) {
          return result;
        }
        sub_6BAC((uint64_t)v59);
        sub_188FC78(v59, (uint64_t)"Public transport journey leg has an invalid departure stop index", 64);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v54, 1u);
        goto LABEL_68;
      }
      if (*((_DWORD *)v4 + 5) == -1)
      {
        BOOL result = sub_723EC(1u);
        if (!result) {
          return result;
        }
        sub_6BAC((uint64_t)v59);
        sub_188FC78(v59, (uint64_t)"Public transport journey leg has an invalid arrival stop index", 62);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v54, 1u);
        goto LABEL_68;
      }
      long long v5 = *v4;
      long long v6 = v4[1];
      long long v7 = v4[2];
      *(void *)&v61[14] = *(void *)((char *)v4 + 46);
      long long v60 = v6;
      *(_OWORD *)std::string v61 = v7;
      *(_OWORD *)std::string v59 = v5;
      BYTE4(v62) = *((unsigned char *)v4 + 60);
      if (BYTE4(v62)) {
        LODWORD(v62) = *((_DWORD *)v4 + 14);
      }
      int v65 = 0;
      int v8 = sub_499F10((unsigned int *)v59);
      if (v65 == 3)
      {
        sub_3AFFFC((uint64_t)v61);
      }
      else if (v65 == 1 && *(void *)&v61[16])
      {
        uint64_t v62 = *(void *)&v61[16];
        operator delete(*(void **)&v61[16]);
      }
      if (v8 == 0x7FFFFFFFLL)
      {
        BOOL result = sub_723EC(1u);
        if (!result) {
          return result;
        }
        sub_6BAC((uint64_t)v59);
        sub_188FC78(v59, (uint64_t)"Journey leg has an invalid static departure time", 48);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v54, 1u);
        goto LABEL_68;
      }
      long long v9 = *v4;
      long long v10 = v4[1];
      long long v11 = v4[2];
      *(void *)&v61[14] = *(void *)((char *)v4 + 46);
      long long v60 = v10;
      *(_OWORD *)std::string v61 = v11;
      *(_OWORD *)std::string v59 = v9;
      BYTE4(v62) = *((unsigned char *)v4 + 60);
      if (BYTE4(v62)) {
        LODWORD(v62) = *((_DWORD *)v4 + 14);
      }
      int v65 = 0;
      int v12 = sub_49A0F4((unsigned int *)v59);
      if (v65 == 3)
      {
        sub_3AFFFC((uint64_t)v61);
      }
      else if (v65 == 1 && *(void *)&v61[16])
      {
        uint64_t v62 = *(void *)&v61[16];
        operator delete(*(void **)&v61[16]);
      }
      if (v12 == 0x7FFFFFFFLL)
      {
        BOOL result = sub_723EC(1u);
        if (!result) {
          return result;
        }
        sub_6BAC((uint64_t)v59);
        sub_188FC78(v59, (uint64_t)"Journey leg has an invalid static arrival time", 46);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v54, 1u);
        goto LABEL_68;
      }
      long long v13 = *v4;
      long long v14 = v4[1];
      long long v15 = v4[2];
      *(void *)&v61[14] = *(void *)((char *)v4 + 46);
      long long v60 = v14;
      *(_OWORD *)std::string v61 = v15;
      *(_OWORD *)std::string v59 = v13;
      BYTE4(v62) = *((unsigned char *)v4 + 60);
      if (BYTE4(v62)) {
        LODWORD(v62) = *((_DWORD *)v4 + 14);
      }
      int v65 = 0;
      int v16 = sub_499F10((unsigned int *)v59);
      long long v17 = *v4;
      long long v18 = v4[1];
      long long v19 = v4[2];
      *(void *)&v56[14] = *(void *)((char *)v4 + 46);
      long long v55 = v18;
      *(_OWORD *)std::string v56 = v19;
      long long v54 = v17;
      BYTE4(v57) = *((unsigned char *)v4 + 60);
      if (BYTE4(v57)) {
        LODWORD(v57) = *((_DWORD *)v4 + 14);
      }
      int v58 = 0;
      int v20 = sub_49A0F4((unsigned int *)&v54);
      if (v58 == 3)
      {
        sub_3AFFFC((uint64_t)v56);
        int v21 = v65;
        if (v65 == 3) {
          goto LABEL_39;
        }
      }
      else
      {
        if (v58 == 1 && *(void *)&v56[16])
        {
          uint64_t v57 = *(void *)&v56[16];
          operator delete(*(void **)&v56[16]);
        }
        int v21 = v65;
        if (v65 == 3)
        {
LABEL_39:
          sub_3AFFFC((uint64_t)v61);
          goto LABEL_40;
        }
      }
      if (v21 == 1 && *(void *)&v61[16])
      {
        uint64_t v62 = *(void *)&v61[16];
        operator delete(*(void **)&v61[16]);
      }
LABEL_40:
      if (v16 > v20)
      {
        BOOL result = sub_723EC(1u);
        if (!result) {
          return result;
        }
        sub_6BAC((uint64_t)v52);
        sub_188FC78(v52, (uint64_t)"Journey leg has a negative static duration of ", 46);
        long long v35 = *v4;
        long long v36 = v4[1];
        long long v37 = v4[2];
        *(void *)&v61[14] = *(void *)((char *)v4 + 46);
        long long v60 = v36;
        *(_OWORD *)std::string v61 = v37;
        *(_OWORD *)std::string v59 = v35;
        BYTE4(v62) = *((unsigned char *)v4 + 60);
        if (BYTE4(v62)) {
          LODWORD(v62) = *((_DWORD *)v4 + 14);
        }
        int v65 = 0;
        sub_49A0F4((unsigned int *)v59);
        long long v38 = *v4;
        long long v39 = v4[1];
        long long v40 = v4[2];
        *(void *)&v56[14] = *(void *)((char *)v4 + 46);
        long long v55 = v39;
        *(_OWORD *)std::string v56 = v40;
        long long v54 = v38;
        BYTE4(v57) = *((unsigned char *)v4 + 60);
        if (BYTE4(v57)) {
          LODWORD(v57) = *((_DWORD *)v4 + 14);
        }
        int v58 = 0;
        sub_499F10((unsigned int *)&v54);
        uint64_t v41 = (void *)std::ostream::operator<<();
        sub_188FC78(v41, (uint64_t)" sec", 4);
        if (v58 == 3)
        {
          sub_3AFFFC((uint64_t)v56);
        }
        else if (v58 == 1 && *(void *)&v56[16])
        {
          uint64_t v57 = *(void *)&v56[16];
          operator delete(*(void **)&v56[16]);
        }
        if (v65 == 3)
        {
          sub_3AFFFC((uint64_t)v61);
          goto LABEL_132;
        }
        if (v65 != 1) {
          goto LABEL_132;
        }
        int v51 = *(void **)&v61[16];
        if (!*(void *)&v61[16]) {
          goto LABEL_132;
        }
        goto LABEL_130;
      }
      uint64_t v22 = v4 + 4;
      if (v4 + 4 == *((long long **)v3 + 1)) {
        break;
      }
      long long v23 = *v4;
      long long v24 = v4[1];
      long long v25 = v4[2];
      *(void *)&v61[14] = *(void *)((char *)v4 + 46);
      long long v60 = v24;
      *(_OWORD *)std::string v61 = v25;
      *(_OWORD *)std::string v59 = v23;
      BYTE4(v62) = *((unsigned char *)v4 + 60);
      if (BYTE4(v62)) {
        LODWORD(v62) = *((_DWORD *)v4 + 14);
      }
      int v65 = 0;
      int v26 = sub_49A0F4((unsigned int *)v59);
      long long v27 = *v22;
      long long v28 = v4[5];
      long long v29 = v4[6];
      *(void *)&v56[14] = *(void *)((char *)v4 + 110);
      long long v55 = v28;
      *(_OWORD *)std::string v56 = v29;
      long long v54 = v27;
      BYTE4(v57) = *((unsigned char *)v4 + 124);
      if (BYTE4(v57)) {
        LODWORD(v57) = *((_DWORD *)v4 + 30);
      }
      int v58 = 0;
      int v30 = sub_499F10((unsigned int *)&v54);
      if (v58 == 3)
      {
        sub_3AFFFC((uint64_t)v56);
        int v31 = v65;
        if (v65 == 3) {
          goto LABEL_55;
        }
      }
      else
      {
        if (v58 == 1 && *(void *)&v56[16])
        {
          uint64_t v57 = *(void *)&v56[16];
          operator delete(*(void **)&v56[16]);
        }
        int v31 = v65;
        if (v65 == 3)
        {
LABEL_55:
          sub_3AFFFC((uint64_t)v61);
          goto LABEL_56;
        }
      }
      if (v31 == 1 && *(void *)&v61[16])
      {
        uint64_t v62 = *(void *)&v61[16];
        operator delete(*(void **)&v61[16]);
      }
LABEL_56:
      if (v26 > v30)
      {
        BOOL result = sub_723EC(1u);
        if (!result) {
          return result;
        }
        sub_6BAC((uint64_t)v52);
        uint64_t v42 = sub_188FC78(v52, (uint64_t)"Journey leg has a static arrival time after the subsequent leg's static departure time: ", 88);
        long long v43 = *v4;
        long long v44 = v4[1];
        long long v45 = v4[2];
        *(void *)&v61[14] = *(void *)((char *)v4 + 46);
        long long v60 = v44;
        *(_OWORD *)std::string v61 = v45;
        *(_OWORD *)std::string v59 = v43;
        BYTE4(v62) = *((unsigned char *)v4 + 60);
        if (BYTE4(v62)) {
          LODWORD(v62) = *((_DWORD *)v4 + 14);
        }
        int v65 = 0;
        sub_49A0F4((unsigned int *)v59);
        std::string::size_type v46 = (void *)sub_266E4((uint64_t)v42);
        uint64_t v47 = sub_188FC78(v46, (uint64_t)" > ", 3);
        long long v48 = v4[4];
        long long v49 = v4[5];
        long long v50 = v4[6];
        *(void *)&v56[14] = *(void *)((char *)v4 + 110);
        long long v55 = v49;
        *(_OWORD *)std::string v56 = v50;
        long long v54 = v48;
        BYTE4(v57) = *((unsigned char *)v4 + 124);
        if (BYTE4(v57)) {
          LODWORD(v57) = *((_DWORD *)v4 + 30);
        }
        int v58 = 0;
        sub_499F10((unsigned int *)&v54);
        sub_266E4((uint64_t)v47);
        if (v58 == 3)
        {
          sub_3AFFFC((uint64_t)v56);
        }
        else if (v58 == 1 && *(void *)&v56[16])
        {
          uint64_t v57 = *(void *)&v56[16];
          operator delete(*(void **)&v56[16]);
        }
        if (v65 == 3)
        {
          sub_3AFFFC((uint64_t)v61);
          goto LABEL_132;
        }
        if (v65 != 1) {
          goto LABEL_132;
        }
        int v51 = *(void **)&v61[16];
        if (!*(void *)&v61[16]) {
          goto LABEL_132;
        }
LABEL_130:
        uint64_t v62 = *(void *)&v61[16];
        operator delete(v51);
LABEL_132:
        std::stringbuf::str();
        sub_7246C((uint64_t *)v59, 1u);
        if (SBYTE7(v60) < 0) {
          operator delete(v59[0]);
        }
        if (v53 < 0) {
          operator delete((void *)v52[9]);
        }
        std::streambuf::~streambuf();
        goto LABEL_73;
      }
      v4 += 4;
    }
    while (v22 != *((long long **)v3 + 1));
    v3 += 32;
    if (v3 != *(char **)(a1 + 32)) {
      continue;
    }
    break;
  }
LABEL_59:
  if (*(_DWORD *)a1 == -1 || *(_DWORD *)(a1 + 4) == 0)
  {
    BOOL result = sub_723EC(1u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v59);
    sub_188FC78(v59, (uint64_t)"Schedule reference trip has an invalid trip reference", 53);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v54, 1u);
LABEL_68:
    if (SBYTE7(v55) < 0) {
      operator delete((void *)v54);
    }
    if (v64 < 0) {
      operator delete(v63);
    }
    std::streambuf::~streambuf();
LABEL_73:
    std::ostream::~ostream();
    std::ios::~ios();
    return 0;
  }
  if (*(_DWORD *)(a1 + 8) == -1)
  {
    BOOL result = sub_723EC(1u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v59);
    sub_188FC78(v59, (uint64_t)"Schedule reference trip  has an invalid schedule index", 54);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v54, 1u);
    goto LABEL_68;
  }
  if (*(_DWORD *)(a1 + 12) == -1)
  {
    BOOL result = sub_723EC(1u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v59);
    sub_188FC78(v59, (uint64_t)"Schedule reference trip  has an invalid boarding stop index", 59);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v54, 1u);
    goto LABEL_68;
  }
  if (*(_DWORD *)(a1 + 16) != -1) {
    return 1;
  }
  BOOL result = sub_723EC(1u);
  if (result)
  {
    sub_6BAC((uint64_t)v59);
    sub_188FC78(v59, (uint64_t)"Schedule reference trip  has an invalid alight stop index", 57);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v54, 1u);
    goto LABEL_68;
  }
  return result;
}

void sub_C11F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a52 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&STACK[0x580]);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&STACK[0x580]);
  _Unwind_Resume(a1);
}

void sub_C1229C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

void sub_C122D0(_Unwind_Exception *a1)
{
}

void sub_C122E4(_Unwind_Exception *a1)
{
}

void sub_C122F8(_Unwind_Exception *a1)
{
}

BOOL sub_C12310(uint64_t a1, void *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 1592) - *(void *)(a1 + 1584)) >> 7);
  unint64_t v3 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(a2[1] - *a2) >> 3);
  if (v2 != v3 && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v8);
    sub_188FC78(v8, (uint64_t)"The schedule lookup response has a different number of solutions than there are place request parameters in the schedule lookup request: ", 137);
    uint64_t v4 = (void *)std::ostream::operator<<();
    sub_188FC78(v4, (uint64_t)" != ", 4);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v7 < 0) {
      operator delete(__p);
    }
    if (v9 < 0) {
      operator delete((void *)v8[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return v2 == v3;
}

void sub_C1251C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_C12568()
{
  unk_25E0107 = 16641;
  word_25E00F0 = 65;
  byte_25E011F = 1;
  byte_25E0109 = 0;
}

void *sub_C12590(void *a1, void *a2)
{
  *a1 = a2;
  a1[1] = sub_375500(a2);
  a1[2] = sub_3755E4(a2);
  a1[3] = sub_3757C8(a2);
  return a1;
}

uint64_t sub_C125E0(void **a1, uint64_t a2)
{
  if (sub_37D0C8(*a1)) {
    BOOL v4 = *(_DWORD *)(a2 + 376) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4) {
    return 1;
  }
  switch(*(_DWORD *)(a2 + 64))
  {
    case 0:
      unint64_t v6 = *(void *)(a2 + 56);
      uint64_t result = sub_C12714((uint64_t)a1, v6);
      break;
    case 1:
      unint64_t v7 = *(void *)(a2 + 56);
      uint64_t result = sub_C12B48((uint64_t)a1, v7);
      break;
    case 2:
      unint64_t v8 = *(void *)(a2 + 56);
      uint64_t result = sub_C12F7C((uint64_t)a1, v8);
      break;
    case 3:
      unint64_t v9 = *(void *)(a2 + 56);
      uint64_t result = sub_C133B0((uint64_t)a1, v9);
      break;
    case 4:
      unint64_t v10 = *(void *)(a2 + 56);
      uint64_t result = sub_C13640((uint64_t)a1, v10);
      break;
    default:
      return 1;
  }
  return result;
}

uint64_t sub_C12714(uint64_t a1, unint64_t a2)
{
  unint64_t v30 = a2;
  if (sub_498D5C(*(void *)(a1 + 8), a2, 1, "stop"))
  {
    sub_8FDD7C(*(void *)(a1 + 8), a2, (uint64_t)&v26);
    BOOL v4 = (unint64_t *)v26;
    long long v5 = v27;
    if (v26 != v27)
    {
      while (sub_C13640(a1, *v4))
      {
        if (++v4 == v5) {
          goto LABEL_5;
        }
      }
      uint64_t v14 = 0;
      goto LABEL_35;
    }
LABEL_5:
    sub_8F33D4(*(void *)(a1 + 8), &v30, (uint64_t)&__p);
    unint64_t v6 = (unint64_t *)__p;
    unint64_t v7 = v24;
    if (__p != v24)
    {
      while (sub_C13640(a1, *v6))
      {
        if (++v6 == v7) {
          goto LABEL_8;
        }
      }
      uint64_t v14 = 0;
      goto LABEL_33;
    }
LABEL_8:
    sub_8FEBDC(*(void *)(a1 + 8), v30, (uint64_t)&v21);
    unint64_t v8 = (unint64_t *)v21;
    unint64_t v9 = v22;
    if (v21 != v22)
    {
      while (sub_C13898(a1, *v8))
      {
        if (++v8 == v9) {
          goto LABEL_11;
        }
      }
      uint64_t v14 = 0;
      goto LABEL_31;
    }
LABEL_11:
    sub_8FECC8(*(void *)(a1 + 8), &v30, (uint64_t)&v19);
    unint64_t v10 = v19;
    long long v11 = v20;
    if (v19 == v20)
    {
      uint64_t v14 = 1;
      if (!v19) {
        goto LABEL_31;
      }
    }
    else
    {
      int v12 = v19 + 8;
      do
      {
        BOOL v13 = sub_C13898(a1, *((void *)v12 - 1));
        uint64_t v14 = v13;
        BOOL v15 = v12 != v11 && v13;
        v12 += 8;
      }
      while (v15);
      unint64_t v10 = v19;
      if (!v19)
      {
LABEL_31:
        if (v21)
        {
          uint64_t v22 = (unint64_t *)v21;
          operator delete(v21);
        }
LABEL_33:
        if (__p)
        {
          long long v24 = (unint64_t *)__p;
          operator delete(__p);
        }
LABEL_35:
        if (v26)
        {
          long long v27 = (unint64_t *)v26;
          operator delete(v26);
        }
        return v14;
      }
    }
    int v20 = v10;
    operator delete(v10);
    goto LABEL_31;
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v26);
    int v16 = sub_188FC78(&v26, (uint64_t)"Stop ", 5);
    long long v17 = sub_51960(v16, v30);
    sub_188FC78(v17, (uint64_t)".", 1);
    std::ostream::operator<<();
    sub_188FC78(v16, (uint64_t)" does not exist in the data", 27);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v25 < 0) {
      operator delete(__p);
    }
    if (v29 < 0) {
      operator delete(v28);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return 0;
}

void sub_C12A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23)
{
  if (a21 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a22);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_C12AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a13)
  {
    operator delete(a13);
    if (!a16)
    {
LABEL_3:
      if (!a19) {
        _Unwind_Resume(a1);
      }
      JUMPOUT(0xC12B38);
    }
  }
  else if (!a16)
  {
    goto LABEL_3;
  }
  JUMPOUT(0xC12B18);
}

void sub_C12ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p)
  {
    operator delete(__p);
    int v20 = a13;
    if (!a13)
    {
LABEL_3:
      if (!a16) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int v20 = a13;
    if (!a13) {
      goto LABEL_3;
    }
  }
  operator delete(v20);
  if (!a16)
  {
LABEL_4:
    if (!a19) {
      _Unwind_Resume(a1);
    }
    JUMPOUT(0xC12B38);
  }
LABEL_11:
  JUMPOUT(0xC12B18);
}

void sub_C12B0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16) {
    JUMPOUT(0xC12B18);
  }
  JUMPOUT(0xC12AD8);
}

void sub_C12B2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a19) {
    JUMPOUT(0xC12B38);
  }
  JUMPOUT(0xC12AE0);
}

uint64_t sub_C12B48(uint64_t a1, unint64_t a2)
{
  unint64_t v30 = a2;
  if (sub_8ED3D4(*(void *)(a1 + 8), a2, 1, "hall"))
  {
    sub_8FF1F0(*(void *)(a1 + 8), a2, (uint64_t)&v26);
    BOOL v4 = (unint64_t *)v26;
    long long v5 = v27;
    if (v26 != v27)
    {
      while (sub_C13640(a1, *v4))
      {
        if (++v4 == v5) {
          goto LABEL_5;
        }
      }
      uint64_t v14 = 0;
      goto LABEL_35;
    }
LABEL_5:
    sub_8FF2DC(*(void *)(a1 + 8), &v30, (uint64_t)&__p);
    unint64_t v6 = (unint64_t *)__p;
    unint64_t v7 = v24;
    if (__p != v24)
    {
      while (sub_C13640(a1, *v6))
      {
        if (++v6 == v7) {
          goto LABEL_8;
        }
      }
      uint64_t v14 = 0;
      goto LABEL_33;
    }
LABEL_8:
    sub_8FF3CC(*(void *)(a1 + 8), v30, (uint64_t)&v21);
    unint64_t v8 = (unint64_t *)v21;
    unint64_t v9 = v22;
    if (v21 != v22)
    {
      while (sub_C13898(a1, *v8))
      {
        if (++v8 == v9) {
          goto LABEL_11;
        }
      }
      uint64_t v14 = 0;
      goto LABEL_31;
    }
LABEL_11:
    sub_8FF4B8(*(void *)(a1 + 8), &v30, (uint64_t)&v19);
    unint64_t v10 = v19;
    long long v11 = v20;
    if (v19 == v20)
    {
      uint64_t v14 = 1;
      if (!v19) {
        goto LABEL_31;
      }
    }
    else
    {
      int v12 = v19 + 8;
      do
      {
        BOOL v13 = sub_C13898(a1, *((void *)v12 - 1));
        uint64_t v14 = v13;
        BOOL v15 = v12 != v11 && v13;
        v12 += 8;
      }
      while (v15);
      unint64_t v10 = v19;
      if (!v19)
      {
LABEL_31:
        if (v21)
        {
          uint64_t v22 = (unint64_t *)v21;
          operator delete(v21);
        }
LABEL_33:
        if (__p)
        {
          long long v24 = (unint64_t *)__p;
          operator delete(__p);
        }
LABEL_35:
        if (v26)
        {
          long long v27 = (unint64_t *)v26;
          operator delete(v26);
        }
        return v14;
      }
    }
    int v20 = v10;
    operator delete(v10);
    goto LABEL_31;
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v26);
    int v16 = sub_188FC78(&v26, (uint64_t)"Hall ", 5);
    long long v17 = sub_51960(v16, v30);
    sub_188FC78(v17, (uint64_t)".", 1);
    std::ostream::operator<<();
    sub_188FC78(v16, (uint64_t)" does not exist in the data", 27);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v25 < 0) {
      operator delete(__p);
    }
    if (v29 < 0) {
      operator delete(v28);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return 0;
}

void sub_C12E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23)
{
  if (a21 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a22);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_C12EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a13)
  {
    operator delete(a13);
    if (!a16)
    {
LABEL_3:
      if (!a19) {
        _Unwind_Resume(a1);
      }
      JUMPOUT(0xC12F6CLL);
    }
  }
  else if (!a16)
  {
    goto LABEL_3;
  }
  JUMPOUT(0xC12F4CLL);
}

void sub_C12EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p)
  {
    operator delete(__p);
    int v20 = a13;
    if (!a13)
    {
LABEL_3:
      if (!a16) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int v20 = a13;
    if (!a13) {
      goto LABEL_3;
    }
  }
  operator delete(v20);
  if (!a16)
  {
LABEL_4:
    if (!a19) {
      _Unwind_Resume(a1);
    }
    JUMPOUT(0xC12F6CLL);
  }
LABEL_11:
  JUMPOUT(0xC12F4CLL);
}

void sub_C12F40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16) {
    JUMPOUT(0xC12F4CLL);
  }
  JUMPOUT(0xC12F0CLL);
}

void sub_C12F60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a19) {
    JUMPOUT(0xC12F6CLL);
  }
  JUMPOUT(0xC12F14);
}

uint64_t sub_C12F7C(uint64_t a1, unint64_t a2)
{
  unint64_t v30 = a2;
  if (sub_8ED928(*(void *)(a1 + 8), a2, 1, "station"))
  {
    sub_8FF5A8(*(void *)(a1 + 8), a2, (uint64_t)&v26);
    BOOL v4 = (unint64_t *)v26;
    long long v5 = v27;
    if (v26 != v27)
    {
      while (sub_C13640(a1, *v4))
      {
        if (++v4 == v5) {
          goto LABEL_5;
        }
      }
      uint64_t v14 = 0;
      goto LABEL_35;
    }
LABEL_5:
    sub_8F32E4(*(void *)(a1 + 8), &v30, (uint64_t)&__p);
    unint64_t v6 = (unint64_t *)__p;
    unint64_t v7 = v24;
    if (__p != v24)
    {
      while (sub_C13640(a1, *v6))
      {
        if (++v6 == v7) {
          goto LABEL_8;
        }
      }
      uint64_t v14 = 0;
      goto LABEL_33;
    }
LABEL_8:
    sub_8FF694(*(void *)(a1 + 8), &v30, (uint64_t)&v21);
    unint64_t v8 = (unint64_t *)v21;
    unint64_t v9 = v22;
    if (v21 != v22)
    {
      while (sub_C13898(a1, *v8))
      {
        if (++v8 == v9) {
          goto LABEL_11;
        }
      }
      uint64_t v14 = 0;
      goto LABEL_31;
    }
LABEL_11:
    sub_8FF784(*(void *)(a1 + 8), &v30, (uint64_t)&v19);
    unint64_t v10 = v19;
    long long v11 = v20;
    if (v19 == v20)
    {
      uint64_t v14 = 1;
      if (!v19) {
        goto LABEL_31;
      }
    }
    else
    {
      int v12 = v19 + 8;
      do
      {
        BOOL v13 = sub_C13898(a1, *((void *)v12 - 1));
        uint64_t v14 = v13;
        BOOL v15 = v12 != v11 && v13;
        v12 += 8;
      }
      while (v15);
      unint64_t v10 = v19;
      if (!v19)
      {
LABEL_31:
        if (v21)
        {
          uint64_t v22 = (unint64_t *)v21;
          operator delete(v21);
        }
LABEL_33:
        if (__p)
        {
          long long v24 = (unint64_t *)__p;
          operator delete(__p);
        }
LABEL_35:
        if (v26)
        {
          long long v27 = (unint64_t *)v26;
          operator delete(v26);
        }
        return v14;
      }
    }
    int v20 = v10;
    operator delete(v10);
    goto LABEL_31;
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v26);
    int v16 = sub_188FC78(&v26, (uint64_t)"Station ", 8);
    long long v17 = sub_51960(v16, v30);
    sub_188FC78(v17, (uint64_t)".", 1);
    std::ostream::operator<<();
    sub_188FC78(v16, (uint64_t)" does not exist in the data", 27);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v25 < 0) {
      operator delete(__p);
    }
    if (v29 < 0) {
      operator delete(v28);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return 0;
}

void sub_C13298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23)
{
  if (a21 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a22);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_C13314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a13)
  {
    operator delete(a13);
    if (!a16)
    {
LABEL_3:
      if (!a19) {
        _Unwind_Resume(a1);
      }
      JUMPOUT(0xC133A0);
    }
  }
  else if (!a16)
  {
    goto LABEL_3;
  }
  JUMPOUT(0xC13380);
}

void sub_C13324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p)
  {
    operator delete(__p);
    int v20 = a13;
    if (!a13)
    {
LABEL_3:
      if (!a16) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int v20 = a13;
    if (!a13) {
      goto LABEL_3;
    }
  }
  operator delete(v20);
  if (!a16)
  {
LABEL_4:
    if (!a19) {
      _Unwind_Resume(a1);
    }
    JUMPOUT(0xC133A0);
  }
LABEL_11:
  JUMPOUT(0xC13380);
}

void sub_C13374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16) {
    JUMPOUT(0xC13380);
  }
  JUMPOUT(0xC13340);
}

void sub_C13394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a19) {
    JUMPOUT(0xC133A0);
  }
  JUMPOUT(0xC13348);
}

uint64_t sub_C133B0(uint64_t a1, unint64_t a2)
{
  int v2 = a2;
  unint64_t v19 = a2;
  if (sub_499804(*(void *)(a1 + 8), a2, 1, "access point"))
  {
    sub_8ED2E4(*(void *)(a1 + 8), &v19, (uint64_t)&v15);
    BOOL v4 = v15;
    long long v5 = v16;
    if (v15 == v16)
    {
      uint64_t v8 = 1;
      if (!v15) {
        return v8;
      }
    }
    else
    {
      unint64_t v6 = v15 + 1;
      do
      {
        uint64_t v7 = sub_C12F7C(a1, (unint64_t)*(v6 - 1));
        uint64_t v8 = v7;
        if (v6 == v5) {
          char v9 = 0;
        }
        else {
          char v9 = v7;
        }
        ++v6;
      }
      while ((v9 & 1) != 0);
      BOOL v4 = v15;
      if (!v15) {
        return v8;
      }
    }
    int v16 = v4;
    operator delete(v4);
    return v8;
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v15);
    unint64_t v10 = sub_188FC78(&v15, (uint64_t)"Access point ", 13);
    long long v11 = sub_51960(v10, v2);
    sub_188FC78(v11, (uint64_t)".", 1);
    std::ostream::operator<<();
    sub_188FC78(v10, (uint64_t)" does not exist in the data", 27);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v14 < 0) {
      operator delete(__p);
    }
    if (v18 < 0) {
      operator delete(v17);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return 0;
}

void sub_C135D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_C13624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_C13640(uint64_t a1, unint64_t a2)
{
  if (sub_8DFD1C(*(void *)(a1 + 16), a2, 1, "line"))
  {
    BOOL v4 = (int *)sub_8DFD1C(*(void *)(a1 + 16), a2, 0, "line");
    unint64_t v5 = *(void *)((char *)v4 + *(unsigned __int16 *)((char *)v4 - *v4 + 6));
    return sub_C13898(a1, v5);
  }
  else
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)v11);
      uint64_t v7 = sub_188FC78(v11, (uint64_t)"Line ", 5);
      uint64_t v8 = sub_51960(v7, a2);
      sub_188FC78(v8, (uint64_t)".", 1);
      std::ostream::operator<<();
      sub_188FC78(v7, (uint64_t)" does not exist in the data", 27);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if (v10 < 0) {
        operator delete(__p);
      }
      if (v12 < 0) {
        operator delete((void *)v11[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    return 0;
  }
}

void sub_C1384C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL sub_C13898(uint64_t a1, unint64_t a2)
{
  int v2 = a2;
  uint64_t v3 = sub_8EF9B8(*(void *)(a1 + 24), a2, 1, "system");
  if (!v3 && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v9);
    BOOL v4 = sub_188FC78(v9, (uint64_t)"System ", 7);
    unint64_t v5 = sub_51960(v4, v2);
    sub_188FC78(v5, (uint64_t)".", 1);
    std::ostream::operator<<();
    sub_188FC78(v4, (uint64_t)" does not exist in the data", 27);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v8 < 0) {
      operator delete(__p);
    }
    if (v10 < 0) {
      operator delete((void *)v9[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return v3 != 0;
}

void sub_C13A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_C13AA8()
{
  unk_25E0137 = 16641;
  word_25E0120 = 65;
  byte_25E014F = 1;
  byte_25E0139 = 0;
}

void sub_C13AD0()
{
  byte_25E0167 = 1;
  word_25E0150 = 65;
}

uint64_t sub_C13AEC(void *a1, unsigned int *a2, int a3)
{
  uint64_t v6 = *a2 == 0;
  if (*a2 && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v63);
    uint64_t v7 = sub_188FC78(&v63, (uint64_t)"Spa response has a status code of ", 34);
    *(void *)&v61.__val_ = *a2;
    v61.__cat_ = (const std::error_category *)&off_2439090;
    std::error_condition::message(&v62, &v61);
    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v8 = &v62;
    }
    else {
      char v8 = (std::string *)v62.__r_.__value_.__r.__words[0];
    }
    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v62.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v62.__r_.__value_.__l.__size_;
    }
    sub_188FC78(v7, (uint64_t)v8, size);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v62, 1u);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
    if (v66 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  char v10 = (void *)*((void *)a2 + 1);
  std::string v59 = (void *)*((void *)a2 + 2);
  if (v10 == v59) {
    return v6;
  }
  while (2)
  {
    std::string::size_type v14 = v10[25];
    uint64_t v13 = v10[26];
    v62.__r_.__value_.__r.__words[0] = v14;
    int v15 = 1;
    while (v14 != v13)
    {
      char v18 = *(int **)v14;
      long long v17 = *(int **)(v14 + 8);
      std::string v63 = (std::error_condition *)v18;
      int v19 = 1;
      if (v18 != v17)
      {
        do
        {
          v19 &= sub_C14250(a1, (uint64_t)v10, (uint64_t *)&v62, (uint64_t *)&v63, a3);
          v18 += 42;
          std::string v63 = (std::error_condition *)v18;
        }
        while (v18 != *(int **)(v14 + 8));
      }
      int v21 = *(_DWORD **)(v14 + 32);
      int v20 = *(_DWORD **)(v14 + 40);
      if (v21 == v20)
      {
LABEL_30:
        BOOL v16 = *(_DWORD *)(v14 + 60) == 0x7FFFFFFF
           || *(_DWORD *)(v14 + 64) == 0x7FFFFFFF
           || sub_C17898((int *)(v14 + 60));
      }
      else
      {
        while (sub_C183B8(v21))
        {
          v21 += 10;
          if (v21 == v20) {
            goto LABEL_30;
          }
        }
        BOOL v16 = 0;
      }
      v15 &= v19 & v16;
      v14 += 72;
      v62.__r_.__value_.__r.__words[0] = v14;
      uint64_t v13 = v10[26];
    }
    unsigned int v60 = v6;
    long long v23 = (unsigned int *)v10[34];
    uint64_t v22 = (unsigned int *)v10[35];
    if (v23 == v22)
    {
LABEL_81:
      long long v52 = (_DWORD *)v10[31];
      int v51 = (_DWORD *)v10[32];
      if (v52 != v51)
      {
        unsigned int v12 = v60;
        do
        {
          BOOL v11 = sub_C183B8(v52);
          if (!v11) {
            break;
          }
          v52 += 10;
        }
        while (v52 != v51);
        goto LABEL_20;
      }
      BOOL v11 = 1;
LABEL_19:
      unsigned int v12 = v60;
      goto LABEL_20;
    }
    while (1)
    {
      uint64_t v24 = *v23;
      uint64_t v25 = v23[1];
      uint64_t v26 = a1[512];
      BOOL v27 = v25 == 0xFFFFFFFFLL || v24 == 0;
      uint64_t v28 = v25 | (v24 << 32);
      if (v27) {
        uint64_t v28 = 0xFFFFFFFFLL;
      }
      uint64_t v29 = __ROR8__(v28, 32);
      LODWORD(v62.__r_.__value_.__l.__data_) = v29;
      v61.__val_ = 1;
      std::string v63 = &v61;
      char v64 = &v62;
      unint64_t v30 = *(void *)(v26 + 3880) + 1;
      *(void *)(v26 + 3880) = v30;
      uint64_t v31 = *(void *)(v26 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v26 + 40;
      if (*(_DWORD *)(v26 + 616) == v29)
      {
        unsigned int v33 = 24;
        goto LABEL_49;
      }
      if (*(_DWORD *)(v26 + 640) == v29)
      {
        unsigned int v33 = 25;
        goto LABEL_49;
      }
      if (*(_DWORD *)(v26 + 664) == v29)
      {
        unsigned int v33 = 26;
        goto LABEL_49;
      }
      if (*(_DWORD *)(v26 + 688) == v29)
      {
        unsigned int v33 = 27;
LABEL_49:
        ++*(void *)(v26 + 3888);
        uint64_t v34 = v32 + 24 * v33;
        *(void *)(v34 + 8) = v30;
        long long v35 = *(unsigned int **)(v34 + 16);
        if (!v35) {
          break;
        }
        goto LABEL_50;
      }
      unint64_t v39 = *(void *)(v26 + 672);
      unint64_t v40 = *(void *)(v26 + 648);
      unint64_t v41 = *(void *)(v26 + 624);
      BOOL v42 = v41 >= v30;
      if (v41 < v30) {
        unint64_t v30 = *(void *)(v26 + 624);
      }
      int v43 = 24;
      if (v42) {
        int v43 = 0;
      }
      BOOL v44 = v40 >= v30;
      if (v40 < v30) {
        unint64_t v30 = *(void *)(v26 + 648);
      }
      int v45 = 25;
      if (v44) {
        int v45 = v43;
      }
      BOOL v46 = v39 >= v30;
      if (v39 >= v30) {
        unint64_t v47 = v30;
      }
      else {
        unint64_t v47 = *(void *)(v26 + 672);
      }
      unint64_t v57 = *(void *)(v26 + 696);
      unint64_t v58 = v47;
      int v48 = 26;
      if (v46) {
        int v48 = v45;
      }
      unsigned int v56 = v48;
      long long v35 = (unsigned int *)sub_2AB884(v31, 6, v29, 1);
      unsigned int v49 = 27;
      if (v57 >= v58) {
        unsigned int v49 = v56;
      }
      uint64_t v50 = v32 + 24 * v49;
      *(_DWORD *)uint64_t v50 = v62.__r_.__value_.__l.__data_;
      *(void *)(v50 + 8) = *(void *)(v26 + 3880);
      *(void *)(v50 + 16) = v35;
      if (!v35) {
        break;
      }
LABEL_50:
      long long v36 = (int *)((char *)v35 + *v35);
      long long v37 = (unsigned __int16 *)((char *)v36 - *v36);
      if (*v37 < 0x35u) {
        goto LABEL_75;
      }
      uint64_t v38 = v37[26];
      if (!v38 || *(unsigned int *)((char *)v36 + v38 + *(unsigned int *)((char *)v36 + v38)) <= HIDWORD(v29)) {
        goto LABEL_75;
      }
      v23 += 2;
      if (v23 == v22) {
        goto LABEL_81;
      }
    }
    sub_2A54B4((int **)&v63);
LABEL_75:
    BOOL v11 = sub_723EC(1u);
    if (!v11) {
      goto LABEL_19;
    }
    sub_6BAC((uint64_t)&v63);
    sub_188FC78(&v63, (uint64_t)"Payment method region entry has a payment method region ref, which is not in the data.", 86);
    unsigned int v12 = v60;
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v62, 1u);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
    std::string v63 = (std::error_condition *)v54;
    *(std::error_condition **)((char *)&v63 + *((void *)v54 - 3)) = (std::error_condition *)v55;
    if (v66 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    BOOL v11 = 0;
LABEL_20:
    uint64_t v6 = v15 & v11 & v12;
    v10 += 37;
    if (v10 != v59) {
      continue;
    }
    return v6;
  }
}

void sub_C14108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  if (a25 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a26);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_C1414C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void (__cdecl **a27)(std::stringbuf *__hidden this),uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  a26 = a9;
  *(uint64_t *)((char *)&a26 + *(void *)(a9 - 24)) = a10;
  if (a40 < 0) {
    operator delete(a35);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  _Unwind_Resume(a1);
}

BOOL sub_C14250(void *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5)
{
  if (*(unsigned char *)(*a3 + 24)) {
    goto LABEL_2;
  }
  uint64_t v21 = *a4;
  if (*(_DWORD *)(*a4 + 160))
  {
    BOOL result = sub_723EC(1u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v148);
    sub_188FC78(v148, (uint64_t)"Journey leg bundle of type PUBLIC TRANSPORT contains incompatible journey leg", 77);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    goto LABEL_92;
  }
  if ((a5 & 1) == 0)
  {
    BOOL v27 = (_DWORD *)(a2 + 4);
    goto LABEL_62;
  }
  int v22 = *(_DWORD *)(v21 + 20);
  if (v22 == 0x7FFFFFFF || (int v23 = *(_DWORD *)(v21 + 8), v23 == 0x7FFFFFFF))
  {
    char v24 = 7;
    int v25 = 214748364;
LABEL_40:
    char v26 = 5;
    goto LABEL_41;
  }
  char v24 = 0;
  int v25 = v22 - v23;
  if ((v25 & 0x80000000) == 0) {
    goto LABEL_40;
  }
  char v26 = -5;
LABEL_41:
  if (v25
     + ((((103 * (char)(v26 + v24)) & 0x8000) != 0) + ((103 * (char)(v26 + v24)) >> 10)) < 0)
  {
    BOOL result = sub_723EC(1u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v148);
    sub_188FC78(v148, (uint64_t)"Journey leg (alternative) has a negative static duration of ", 60);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    goto LABEL_92;
  }
  BOOL v27 = (_DWORD *)(a2 + 4);
  if (*(_DWORD *)(a2 + 4) != 2) {
    goto LABEL_62;
  }
  int v28 = *(_DWORD *)(v21 + 24);
  if (v28 == 0x7FFFFFFF || (int v29 = *(_DWORD *)(v21 + 12), v29 == 0x7FFFFFFF))
  {
    char v30 = 7;
    int v31 = 214748364;
LABEL_46:
    char v32 = 5;
    goto LABEL_47;
  }
  char v30 = 0;
  int v31 = v28 - v29;
  if ((v31 & 0x80000000) == 0) {
    goto LABEL_46;
  }
  char v32 = -5;
LABEL_47:
  if (v31
     + ((((103 * (char)(v32 + v30)) & 0x8000) != 0) + ((103 * (char)(v32 + v30)) >> 10)) < 0)
  {
    BOOL result = sub_723EC(1u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v148);
    sub_188FC78(v148, (uint64_t)"Journey leg (alternative) of journey based on realtime data has a negative expected duration of ", 96);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    goto LABEL_92;
  }
LABEL_62:
  int v36 = *(_DWORD *)(v21 + 52);
  if (v36 == -1)
  {
    BOOL result = sub_723EC(1u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v148);
    sub_188FC78(v148, (uint64_t)"Public transport journey leg (alternative) has an invalid origin stop index", 75);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    goto LABEL_92;
  }
  int v37 = *(_DWORD *)(v21 + 56);
  if (v37 == -1)
  {
    BOOL result = sub_723EC(1u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v148);
    sub_188FC78(v148, (uint64_t)"Public transport journey leg (alternative) has an invalid destination stop index", 80);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    goto LABEL_92;
  }
  if (v36 == v37)
  {
    BOOL result = sub_723EC(1u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v148);
    sub_188FC78(v148, (uint64_t)"Public transport journey leg (alternative) has the same origin and destination stop index", 89);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    goto LABEL_92;
  }
  if (*(_DWORD *)(v21 + 32) == -1 || *(_DWORD *)(v21 + 36) == 0)
  {
    BOOL result = sub_723EC(1u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v148);
    sub_188FC78(v148, (uint64_t)"Public transport journey leg (alternative) has an invalid stop pattern ref", 74);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    goto LABEL_92;
  }
  char v39 = sub_C0B364(a1 + 517, *(void *)(v21 + 32));
  if ((v39 & 1) == 0)
  {
    BOOL result = sub_723EC(1u);
    if (result)
    {
      sub_6BAC((uint64_t)v148);
      sub_188FC78(v148, (uint64_t)"Public transport journey leg (alternative) has a stop pattern ref, which is not in the data.", 92);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      goto LABEL_282;
    }
    return result;
  }
  unsigned int v40 = *(_DWORD *)(v21 + 40);
  if (v40 == -1)
  {
    BOOL result = sub_723EC(1u);
    if (result)
    {
      sub_6BAC((uint64_t)v148);
      sub_188FC78(v148, (uint64_t)"Public transport journey leg (alternative) has an invalid trip sequence index", 77);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      goto LABEL_282;
    }
    return result;
  }
  v137 = (unsigned int *)(v21 + 40);
  if (*v27 != 2 || !sub_C164C8(a1 + 517, *(void *)(v21 + 32), v40))
  {
    if (*(_DWORD *)(v21 + 44) != -1 && *(_DWORD *)(v21 + 48) == 0x7FFFFFFF)
    {
      BOOL result = sub_723EC(1u);
      if (result)
      {
        sub_6BAC((uint64_t)v148);
        sub_188FC78(v148, (uint64_t)"Public transport journey leg (alternative) represents a frequency trip but has an invalid basetime", 98);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 1u);
        goto LABEL_282;
      }
      return result;
    }
    unsigned int v75 = *(_DWORD *)(v21 + 52);
    int v74 = *(_DWORD *)(v21 + 56);
    unsigned int v76 = v74 + 1;
    if (v75 <= v74 + 1) {
      int v77 = v74 + 1;
    }
    else {
      int v77 = *(_DWORD *)(v21 + 52);
    }
    int v138 = v77;
    if (v75 < v76)
    {
      while (1)
      {
        uint64_t v78 = (int *)sub_A11094(a1 + 517, *(void *)(v21 + 32));
        uint64_t v79 = (unsigned __int16 *)((char *)v78 - *v78);
        if (*v79 >= 9u && (uint64_t v80 = v79[4]) != 0) {
          unint64_t v81 = (unsigned int *)((char *)v78 + v80 + *(unsigned int *)((char *)v78 + v80));
        }
        else {
          unint64_t v81 = 0;
        }
        unsigned int v82 = v75;
        unint64_t v83 = __ROR8__(*(void *)sub_A10764(v81, v75), 32);
        uint64_t v84 = sub_A104E8(a1 + 517, *(void *)(v21 + 32), v75, *(_DWORD *)(v21 + 40));
        BOOL v85 = HIDWORD(v83) != 1 || (v83 + 3) >= 2;
        if (v85 && !sub_498D5C(a1[515] + 24, __ROR8__(v83, 32), 1, "stop")) {
          break;
        }
        if (v84 != 0xFFFFFFFFLL && !sub_369F8C(a1[523] + 24, __ROR8__(v84, 32), 1, "trip"))
        {
          BOOL result = sub_723EC(1u);
          if (!result) {
            return result;
          }
          sub_6BAC((uint64_t)v148);
          sub_188FC78(v148, (uint64_t)"Public transport journey leg (alternative) uses a trip, which is not in the data", 80);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 1u);
          goto LABEL_282;
        }
        unsigned int v75 = v82 + 1;
        if (v138 == v82 + 1)
        {
          unsigned int v75 = *(_DWORD *)(v21 + 52);
          goto LABEL_209;
        }
      }
      BOOL result = sub_723EC(1u);
      if (!result) {
        return result;
      }
      sub_6BAC((uint64_t)v148);
      uint64_t v129 = sub_188FC78(v148, (uint64_t)"Public transport journey leg (alternative) uses a stop index ", 61);
      std::ostream::operator<<();
      sub_188FC78(v129, (uint64_t)", which is not in the data", 26);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      goto LABEL_282;
    }
LABEL_209:
    if (*(_DWORD *)(v21 + 4) != sub_C165D4(a1 + 517, *(void *)(v21 + 32), v75))
    {
      BOOL result = sub_723EC(1u);
      if (result)
      {
        sub_6BAC((uint64_t)v148);
        sub_188FC78(v148, (uint64_t)"Public transport journey leg (alternative) has buffer duration ", 63);
        uint64_t v109 = (void *)std::ostream::operator<<();
        sub_188FC78(v109, (uint64_t)" sec which does not match the data ", 35);
        sub_C165D4(a1 + 517, *(void *)(v21 + 32), *(_DWORD *)(v21 + 52));
        std::ostream::operator<<();
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 1u);
        goto LABEL_282;
      }
      return result;
    }
    if (*(_DWORD *)(v21 + 8) == sub_C1663C((uint64_t)a1, *(void *)(v21 + 32), *(_DWORD *)(v21 + 52), (int *)v137))
    {
      if (*(_DWORD *)(v21 + 20) != sub_C16718((uint64_t)a1, *(void *)(v21 + 32), *(_DWORD *)(v21 + 56), (int *)v137))
      {
        BOOL result = sub_723EC(1u);
        if (result)
        {
          sub_6BAC((uint64_t)v148);
          long long v130 = sub_188FC78(v148, (uint64_t)"Public transport journey leg (alternative) has arrival time ", 60);
          sub_5E5C(&v144, "");
          sub_4A101C(v21 + 20, (uint64_t)&v144, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
          }
          long long v133 = sub_188FC78(v130, (uint64_t)p_p, size);
          v134 = sub_188FC78(v133, (uint64_t)" whose static time does not match the data ", 43);
          LODWORD(v143.__r_.__value_.__l.__data_) = sub_C167F4(a1 + 517, *(void *)(v21 + 32), *(_DWORD *)(v21 + 56), v137);
          sub_266E4((uint64_t)v134);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (v146 < 0) {
            operator delete(v144);
          }
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 1u);
          goto LABEL_282;
        }
        return result;
      }
      uint64_t v105 = *(void *)(v21 + 64);
      uint64_t v106 = *(void *)(v21 + 72);
      if (v105 != v106)
      {
        while (sub_C16900(a1, a2, v105, a5, 0))
        {
          v105 += 60;
          if (v105 == v106) {
            goto LABEL_215;
          }
        }
        return 0;
      }
LABEL_215:
      uint64_t v107 = *(void *)(v21 + 88);
      uint64_t v108 = *(void *)(v21 + 96);
      if (v107 != v108)
      {
        while (sub_C16900(a1, a2, v107, 0, 1))
        {
          v107 += 60;
          if (v107 == v108)
          {
            if (*(void *)(v21 + 88) == *(void *)(v21 + 96) || *(_DWORD *)(v21 + 112) != 0x7FFFFFFF) {
              goto LABEL_285;
            }
            BOOL result = sub_723EC(1u);
            if (!result) {
              return result;
            }
            sub_6BAC((uint64_t)v148);
            sub_188FC78(v148, (uint64_t)"Public transport journey leg has upcoming journey leg alternatives, but an invalid upcoming journey leg alternatives reference time.", 132);
            std::stringbuf::str();
            sub_7246C((uint64_t *)&__p, 1u);
            goto LABEL_282;
          }
        }
        return 0;
      }
LABEL_285:
      v135 = *(_DWORD **)(v21 + 120);
      v136 = *(_DWORD **)(v21 + 128);
      if (v135 != v136)
      {
        while (sub_C183B8(v135))
        {
          v135 += 10;
          if (v135 == v136) {
            goto LABEL_288;
          }
        }
        return 0;
      }
LABEL_288:
      if (*(_DWORD *)(v21 + 148) != 0x7FFFFFFF && *(_DWORD *)(v21 + 152) != 0x7FFFFFFF)
      {
        BOOL result = sub_C17898((int *)(v21 + 148));
        if (!result) {
          return result;
        }
      }
LABEL_2:
      if (*(unsigned char *)(*a3 + 24) == 1)
      {
        char v10 = (_DWORD *)*a4;
        if (*(_DWORD *)(*a4 + 160) != 1)
        {
          BOOL result = sub_723EC(1u);
          if (!result) {
            return result;
          }
          sub_6BAC((uint64_t)v148);
          sub_188FC78(v148, (uint64_t)"Journey leg bundle of type WALKING contains incompatible journey leg", 68);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 1u);
          goto LABEL_92;
        }
        if (v10[3] == -1 || !v10[4])
        {
          BOOL result = sub_723EC(1u);
          if (!result) {
            return result;
          }
          sub_6BAC((uint64_t)v148);
          sub_188FC78(v148, (uint64_t)"Walking journey leg contains an invalid origin stop ref", 55);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 1u);
          goto LABEL_92;
        }
        unint64_t v11 = *(void *)(v10 + 3);
        BOOL v12 = HIDWORD(v11) != 1 || (v11 + 3) >= 2;
        if (v12 && !sub_498D5C(a1[515] + 24, __ROR8__(v11, 32), 1, "stop"))
        {
          BOOL result = sub_723EC(1u);
          if (!result) {
            return result;
          }
          sub_6BAC((uint64_t)v148);
          sub_188FC78(v148, (uint64_t)"Walking journey leg has an origin stop ref, which is not in the data", 68);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 1u);
          goto LABEL_92;
        }
        if (v10[5] == -1 || !v10[6])
        {
          BOOL result = sub_723EC(1u);
          if (!result) {
            return result;
          }
          sub_6BAC((uint64_t)v148);
          sub_188FC78(v148, (uint64_t)"Walking journey leg contains an invalid destination stop ref", 60);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 1u);
          goto LABEL_282;
        }
        unint64_t v13 = *(void *)(v10 + 5);
        BOOL v14 = HIDWORD(v13) != 1 || (v13 + 3) >= 2;
        if (v14 && !sub_498D5C(a1[515] + 24, __ROR8__(v13, 32), 1, "stop"))
        {
          BOOL result = sub_723EC(1u);
          if (result)
          {
            sub_6BAC((uint64_t)v148);
            sub_188FC78(v148, (uint64_t)"Walking journey leg has a destination stop ref, which is not in the data", 72);
            std::stringbuf::str();
            sub_7246C((uint64_t *)&__p, 1u);
            goto LABEL_282;
          }
          return result;
        }
      }
      uint64_t v15 = *a4;
      int v16 = *(_DWORD *)(*a4 + 160);
      uint64_t v17 = *(unsigned int *)(*a4 + 4);
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v17 == 0x7FFFFFFF;
      }
      if (v18)
      {
        BOOL result = sub_723EC(1u);
        if (!result) {
          return result;
        }
        sub_6BAC((uint64_t)v148);
        sub_188FC78(v148, (uint64_t)"Journey leg has an invalid buffer duration", 42);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 1u);
        goto LABEL_92;
      }
      unint64_t v19 = v17 | (v17 << 32);
      if (!v16) {
        unint64_t v19 = *(void *)(v15 + 8);
      }
      if (v19 == 0x7FFFFFFF)
      {
        BOOL result = sub_723EC(1u);
        if (!result) {
          return result;
        }
        sub_6BAC((uint64_t)v148);
        sub_188FC78(v148, (uint64_t)"Journey leg has an invalid static departure time", 48);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 1u);
LABEL_92:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v149 < 0) {
          operator delete((void *)v148[9]);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
        return 0;
      }
      int v33 = *(_DWORD *)(a2 + 4);
      if (HIDWORD(v19) == 0x7FFFFFFF && v33 == 2)
      {
        BOOL result = sub_723EC(1u);
        if (!result) {
          return result;
        }
        sub_6BAC((uint64_t)v148);
        sub_188FC78(v148, (uint64_t)"Journey leg of journey based on realtime data has an invalid expected departure time", 84);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 1u);
        goto LABEL_92;
      }
      unint64_t v35 = *(void *)(v15 + 8) | ((unint64_t)*(void *)(v15 + 8) << 32);
      if (!v16) {
        unint64_t v35 = *(void *)(v15 + 20);
      }
      if (v35 == 0x7FFFFFFF)
      {
        BOOL result = sub_723EC(1u);
        if (!result) {
          return result;
        }
        sub_6BAC((uint64_t)v148);
        sub_188FC78(v148, (uint64_t)"Journey leg has an invalid static arrival time", 46);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 1u);
        goto LABEL_92;
      }
      if (v33 == 2 && (v35 & 0xFFFFFFFF00000000) == 0x7FFFFFFF00000000)
      {
        BOOL result = sub_723EC(1u);
        if (!result) {
          return result;
        }
        sub_6BAC((uint64_t)v148);
        sub_188FC78(v148, (uint64_t)"Journey leg of journey based on realtime data has an invalid expected arrival time", 82);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 1u);
        goto LABEL_282;
      }
      if (a5)
      {
        BOOL v41 = v16 == 0;
        if (v16) {
          int v42 = *(void *)(v15 + 8);
        }
        else {
          int v42 = *(void *)(v15 + 20);
        }
        if (v41) {
          LODWORD(v17) = *(void *)(v15 + 8);
        }
        if (v42 < (int)v17)
        {
          BOOL result = sub_723EC(1u);
          if (result)
          {
            sub_6BAC((uint64_t)v148);
            sub_188FC78(v148, (uint64_t)"Journey leg has a negative static duration of ", 46);
            std::ostream::operator<<();
            std::stringbuf::str();
            sub_7246C((uint64_t *)&__p, 1u);
            goto LABEL_282;
          }
          return result;
        }
        if (v33 == 2)
        {
          int v43 = sub_C1646C(v15);
          char v44 = v43 < 0 ? -5 : 5;
          if ((int)(v43 / 10
                   + (((103 * (char)(v44 + v43 % 10)) >> 15) & 1)
                   + ((103 * (char)(v44 + v43 % 10)) >> 10)) < 0)
          {
            BOOL result = sub_723EC(1u);
            if (result)
            {
              sub_6BAC((uint64_t)v148);
              sub_188FC78(v148, (uint64_t)"Journey leg of journey based on realtime data has a negative expected duration of ", 82);
              sub_C1646C(*a4);
              std::ostream::operator<<();
              std::stringbuf::str();
              sub_7246C((uint64_t *)&__p, 1u);
              goto LABEL_282;
            }
            return result;
          }
        }
      }
      uint64_t v45 = *a3;
      if ((unint64_t)(*a3 + 72) >= *(void *)(a2 + 208)) {
        return 1;
      }
      uint64_t v46 = *(void *)(v45 + 72);
      uint64_t v47 = *a4;
      unint64_t v48 = *(unsigned int *)*a4;
      if (0xCF3CF3CF3CF3CF3DLL * ((*(void *)(v45 + 80) - v46) >> 3) <= v48)
      {
        BOOL result = sub_723EC(1u);
        if (result)
        {
          sub_6BAC((uint64_t)v148);
          sub_188FC78(v148, (uint64_t)"Journey leg has a next pointer which is out of range", 52);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 1u);
          goto LABEL_282;
        }
        return result;
      }
      uint64_t v49 = v46 + 168 * v48;
      int v50 = *(_DWORD *)(a2 + 4);
      if (!a5 || v50)
      {
        BOOL result = 1;
        if (!a5 || v50 != 2) {
          return result;
        }
        uint64_t v86 = v46 + 168 * v48;
        int v88 = *(_DWORD *)(v86 + 160);
        long double v87 = (_DWORD *)(v86 + 160);
        BOOL v89 = v88 == 0;
        if (v88) {
          unint64_t v90 = *(unsigned int *)(v49 + 4) | ((unint64_t)*(unsigned int *)(v49 + 4) << 32);
        }
        else {
          unint64_t v90 = *(void *)(v49 + 8);
        }
        if (v89) {
          int v91 = *(_DWORD *)(v49 + 4);
        }
        else {
          int v91 = 0;
        }
        unint64_t v92 = HIDWORD(v90);
        int v93 = v91 / -10;
        int v94 = v91 % 10;
        if (v91 < 0) {
          char v95 = -5;
        }
        else {
          char v95 = 5;
        }
        int v96 = v93 + v92 + (((-103 * (char)(v95 + v94)) >> 15) & 1) + ((-103 * (char)(v95 + v94)) >> 10);
        int v97 = *(_DWORD *)(v47 + 160);
        unint64_t v98 = *(void *)(v47 + 20);
        unint64_t v99 = *(unsigned int *)(v47 + 8) | ((unint64_t)*(unsigned int *)(v47 + 8) << 32);
        if (!v97) {
          unint64_t v99 = v98;
        }
        unint64_t v100 = HIDWORD(v99);
        if (v96 < (int)v100)
        {
          BOOL result = sub_723EC(1u);
          if (!result) {
            return result;
          }
          sub_6BAC((uint64_t)v148);
          uint64_t v101 = sub_188FC78(v148, (uint64_t)"Journey leg of journey based on realtime data has an expected arrival time after the next leg's expected departure time minus the next leg's buffer duration: ", 158);
          unint64_t v102 = *(unsigned int *)(*a4 + 8) | ((unint64_t)*(unsigned int *)(*a4 + 8) << 32);
          if (*(_DWORD *)(*a4 + 160))
          {
            int v103 = 0;
          }
          else
          {
            unint64_t v102 = *(void *)(*a4 + 20);
            int v103 = *(_DWORD *)(*a4 + 28);
          }
          __p.__r_.__value_.__r.__words[0] = v102;
          LODWORD(__p.__r_.__value_.__r.__words[1]) = v103;
          uint64_t v104 = (void *)sub_266E4((uint64_t)v101);
          uint64_t v69 = sub_188FC78(v104, (uint64_t)" > (", 4);
          if (*v87) {
            uint64_t v70 = (void *)(*(unsigned int *)(v49 + 4) | ((unint64_t)*(unsigned int *)(v49 + 4) << 32));
          }
          else {
            uint64_t v70 = *(void **)(v49 + 8);
          }
          if (*v87) {
            int v71 = 0;
          }
          else {
            int v71 = *(_DWORD *)(v49 + 16);
          }
LABEL_151:
          uint8x8_t v144 = v70;
          int v145 = v71;
          unsigned __int8 v72 = (void *)sub_266E4((uint64_t)v69);
          uint64_t v73 = sub_188FC78(v72, (uint64_t)" - ", 3);
          std::ostream::operator<<();
          sub_188FC78(v73, (uint64_t)")", 1);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 1u);
          goto LABEL_282;
        }
        if (*(unsigned char *)(v45 + 24)) {
          return result;
        }
        if (v92 == v100) {
          return result;
        }
        if (*(unsigned char *)(v45 + 96) != 1) {
          return result;
        }
        BOOL result = sub_723EC(1u);
        if (!result) {
          return result;
        }
        sub_6BAC((uint64_t)v148);
        v118 = sub_188FC78(v148, (uint64_t)"Public transport journey leg of journey based on realtime data has an expected arrival time which does not match the subsequent walking leg's expected departure time: ", 167);
        unint64_t v119 = *(unsigned int *)(*a4 + 8) | ((unint64_t)*(unsigned int *)(*a4 + 8) << 32);
        if (*(_DWORD *)(*a4 + 160))
        {
          int v120 = 0;
        }
        else
        {
          unint64_t v119 = *(void *)(*a4 + 20);
          int v120 = *(_DWORD *)(*a4 + 28);
        }
        __p.__r_.__value_.__r.__words[0] = v119;
        LODWORD(__p.__r_.__value_.__r.__words[1]) = v120;
        long long v121 = (void *)sub_266E4((uint64_t)v118);
        long long v122 = sub_188FC78(v121, (uint64_t)" != ", 4);
        if (*v87) {
          v123 = (void *)(*(unsigned int *)(v49 + 4) | ((unint64_t)*(unsigned int *)(v49 + 4) << 32));
        }
        else {
          v123 = *(void **)(v49 + 8);
        }
        if (*v87) {
          int v124 = 0;
        }
        else {
          int v124 = *(_DWORD *)(v49 + 16);
        }
      }
      else
      {
        uint64_t v51 = v46 + 168 * v48;
        int v53 = *(_DWORD *)(v51 + 160);
        long long v52 = (_DWORD *)(v51 + 160);
        BOOL v54 = v53 == 0;
        if (v53) {
          int v55 = 0;
        }
        else {
          int v55 = *(_DWORD *)(v49 + 4);
        }
        if (v54) {
          int v56 = *(_DWORD *)(v49 + 8);
        }
        else {
          int v56 = *(_DWORD *)(v49 + 4);
        }
        int v57 = v55 / -10;
        int v58 = v55 % 10;
        if (v55 < 0) {
          char v59 = -5;
        }
        else {
          char v59 = 5;
        }
        signed int v60 = v57 + v56 + (((-103 * (char)(v59 + v58)) >> 15) & 1) + ((-103 * (char)(v59 + v58)) >> 10);
        int v61 = *(_DWORD *)(v47 + 160);
        std::string v62 = (signed int *)(v47 + 20);
        std::string v63 = (signed int *)(v47 + 8);
        if (!v61) {
          std::string v63 = v62;
        }
        signed int v64 = *v63;
        if (v60 < v64)
        {
          BOOL result = sub_723EC(1u);
          if (!result) {
            return result;
          }
          sub_6BAC((uint64_t)v148);
          int v65 = sub_188FC78(v148, (uint64_t)"Journey leg has a static arrival time after the next leg's static departure time minus the next leg's buffer duration: ", 119);
          unint64_t v66 = *(unsigned int *)(*a4 + 8) | ((unint64_t)*(unsigned int *)(*a4 + 8) << 32);
          if (*(_DWORD *)(*a4 + 160))
          {
            int v67 = 0;
          }
          else
          {
            unint64_t v66 = *(void *)(*a4 + 20);
            int v67 = *(_DWORD *)(*a4 + 28);
          }
          __p.__r_.__value_.__r.__words[0] = v66;
          LODWORD(__p.__r_.__value_.__r.__words[1]) = v67;
          uint64_t v68 = (void *)sub_266E4((uint64_t)v65);
          uint64_t v69 = sub_188FC78(v68, (uint64_t)" > (", 4);
          if (*v52) {
            uint64_t v70 = (void *)(*(unsigned int *)(v49 + 4) | ((unint64_t)*(unsigned int *)(v49 + 4) << 32));
          }
          else {
            uint64_t v70 = *(void **)(v49 + 8);
          }
          if (*v52) {
            int v71 = 0;
          }
          else {
            int v71 = *(_DWORD *)(v49 + 16);
          }
          goto LABEL_151;
        }
        if (*(unsigned char *)(v45 + 24)) {
          return 1;
        }
        BOOL result = 1;
        if (v56 == v64) {
          return result;
        }
        if (*(unsigned char *)(v45 + 96) != 1) {
          return result;
        }
        BOOL result = sub_723EC(1u);
        if (!result) {
          return result;
        }
        sub_6BAC((uint64_t)v148);
        v125 = sub_188FC78(v148, (uint64_t)"Public transport journey leg has a static arrival time which does not match the subsequent walking leg's static departure time: ", 128);
        unint64_t v126 = *(unsigned int *)(*a4 + 8) | ((unint64_t)*(unsigned int *)(*a4 + 8) << 32);
        if (*(_DWORD *)(*a4 + 160))
        {
          int v127 = 0;
        }
        else
        {
          unint64_t v126 = *(void *)(*a4 + 20);
          int v127 = *(_DWORD *)(*a4 + 28);
        }
        __p.__r_.__value_.__r.__words[0] = v126;
        LODWORD(__p.__r_.__value_.__r.__words[1]) = v127;
        v128 = (void *)sub_266E4((uint64_t)v125);
        long long v122 = sub_188FC78(v128, (uint64_t)" != ", 4);
        if (*v52) {
          v123 = (void *)(*(unsigned int *)(v49 + 4) | ((unint64_t)*(unsigned int *)(v49 + 4) << 32));
        }
        else {
          v123 = *(void **)(v49 + 8);
        }
        if (*v52) {
          int v124 = 0;
        }
        else {
          int v124 = *(_DWORD *)(v49 + 16);
        }
      }
      uint8x8_t v144 = v123;
      int v145 = v124;
      sub_266E4((uint64_t)v122);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      goto LABEL_282;
    }
    BOOL result = sub_723EC(1u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v148);
    long double v110 = sub_188FC78(v148, (uint64_t)"Public transport journey leg (alternative) has departure time ", 62);
    sub_5E5C(&v144, "");
    sub_4A101C(v21 + 8, (uint64_t)&v144, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v111 = &__p;
    }
    else {
      double v111 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v112 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v112 = __p.__r_.__value_.__l.__size_;
    }
    v113 = sub_188FC78(v110, (uint64_t)v111, v112);
    uint64_t v114 = sub_188FC78(v113, (uint64_t)" whose static time does not match the data ", 43);
    unint64_t v141 = sub_C1663C((uint64_t)a1, *(void *)(v21 + 32), *(_DWORD *)(v21 + 52), (int *)v137);
    int v142 = v115;
    sub_5E5C(v139, "");
    sub_4A101C((uint64_t)&v141, (uint64_t)v139, &v143);
    if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v116 = &v143;
    }
    else {
      uint64_t v116 = (std::string *)v143.__r_.__value_.__r.__words[0];
    }
    if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v117 = HIBYTE(v143.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v117 = v143.__r_.__value_.__l.__size_;
    }
    sub_188FC78(v114, (uint64_t)v116, v117);
    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v143.__r_.__value_.__l.__data_);
      if ((v140 & 0x80000000) == 0)
      {
LABEL_239:
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_240;
        }
        goto LABEL_294;
      }
    }
    else if ((v140 & 0x80000000) == 0)
    {
      goto LABEL_239;
    }
    operator delete(v139[0]);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_240:
      if ((v146 & 0x80000000) == 0)
      {
LABEL_241:
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 1u);
        goto LABEL_282;
      }
LABEL_295:
      operator delete(v144);
      goto LABEL_241;
    }
LABEL_294:
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v146 & 0x80000000) == 0) {
      goto LABEL_241;
    }
    goto LABEL_295;
  }
  BOOL result = sub_723EC(1u);
  if (result)
  {
    sub_6BAC((uint64_t)v148);
    sub_188FC78(v148, (uint64_t)"Public transport journey leg (alternative) represents a trip that is blocked in the dynamic data on the stop pattern", 116);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
LABEL_282:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_111ECAC((uint64_t)v148);
    return 0;
  }
  return result;
}

void sub_C15AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  if (a36 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a37);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a37);
  _Unwind_Resume(a1);
}

uint64_t sub_C1646C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 160);
  unint64_t v3 = *(void *)(a1 + 20);
  if (v2) {
    unint64_t v3 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned int *)(a1 + 8) << 32);
  }
  unint64_t v4 = HIDWORD(v3);
  uint64_t result = 0x7FFFFFFFLL;
  if (v4 != 0x7FFFFFFF)
  {
    unint64_t v6 = *(void *)(a1 + 8);
    unint64_t v7 = *(unsigned int *)(a1 + 4) | ((unint64_t)*(unsigned int *)(a1 + 4) << 32);
    if (!v2) {
      unint64_t v7 = v6;
    }
    unint64_t v8 = HIDWORD(v7);
    if (v8 != 0x7FFFFFFF) {
      return (10 * (v4 - v8));
    }
  }
  return result;
}

uint64_t *sub_C164C8(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *a1;
  uint64_t result = (uint64_t *)sub_C259D4(*a1 + 3896);
  if (result)
  {
    if (!*(void *)(v6 + 3960)) {
      return 0;
    }
    uint64_t v8 = *(void *)(*a1 + 3976);
    if (!v8) {
      return 0;
    }
    uint64_t v15 = a2;
    uint64_t result = sub_A1E760((void *)(v8 + 208), &v15);
    if (!result) {
      return result;
    }
    uint64_t v9 = *(void *)(*a1 + 3976);
    uint64_t v15 = a2;
    char v10 = sub_A1E760((void *)(v9 + 208), &v15);
    if (!v10) {
      sub_5AE8("unordered_map::at: key not found");
    }
    unint64_t v11 = v10;
    LODWORD(result) = sub_51D60((unsigned __int8 *)(*a1 + 3896));
    uint64_t v12 = *((unsigned int *)v11 + 6);
    if (a3 < v12) {
      return 0;
    }
    uint64_t v13 = v11[4];
    if (v11[5] + v12 - v13 <= (unint64_t)a3) {
      return 0;
    }
    char v14 = *(unsigned char *)(v13 + a3 - v12);
    if ((v14 & 1) == 0) {
      return 0;
    }
    if ((v14 & 2) != 0) {
      return (uint64_t *)result;
    }
    else {
      return (void *)(&def_332C + 1);
    }
  }
  return result;
}

uint64_t sub_C165D4(void *a1, unint64_t a2, unsigned int a3)
{
  unint64_t v4 = (int *)sub_A11094(a1, a2);
  unint64_t v5 = (unsigned __int16 *)((char *)v4 - *v4);
  if (*v5 >= 9u && (uint64_t v6 = v5[4]) != 0) {
    unint64_t v7 = (unsigned int *)((char *)v4 + v6 + *(unsigned int *)((char *)v4 + v6));
  }
  else {
    unint64_t v7 = 0;
  }
  return (10 * *(_DWORD *)(sub_A10764(v7, a3) + 8));
}

unint64_t sub_C1663C(uint64_t a1, unint64_t a2, unsigned int a3, int *a4)
{
  uint64_t v8 = (void *)(a1 + 4136);
  uint64_t v17 = sub_A104E8((void *)(a1 + 4136), a2, a3, *a4);
  int v18 = v9;
  char v10 = (int *)sub_A11094(v8, a2);
  unint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v11 >= 9u && (uint64_t v12 = v11[4]) != 0) {
    uint64_t v13 = (unsigned int *)((char *)v10 + v12 + *(unsigned int *)((char *)v10 + v12));
  }
  else {
    uint64_t v13 = 0;
  }
  unsigned int v14 = *(unsigned __int16 *)(sub_A10764(v13, a3) + 12);
  if (a4[1] == -1) {
    int v15 = 0x7FFFFFFF;
  }
  else {
    int v15 = a4[2];
  }
  return sub_A0FAA0((uint64_t *)(a1 + 4184), (unsigned int *)&v17, v14, v15);
}

unint64_t sub_C16718(uint64_t a1, unint64_t a2, unsigned int a3, int *a4)
{
  uint64_t v8 = (void *)(a1 + 4136);
  uint64_t v17 = sub_A104E8((void *)(a1 + 4136), a2, a3, *a4);
  int v18 = v9;
  char v10 = (int *)sub_A11094(v8, a2);
  unint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v11 >= 9u && (uint64_t v12 = v11[4]) != 0) {
    uint64_t v13 = (unsigned int *)((char *)v10 + v12 + *(unsigned int *)((char *)v10 + v12));
  }
  else {
    uint64_t v13 = 0;
  }
  unsigned int v14 = *(unsigned __int16 *)(sub_A10764(v13, a3) + 12);
  if (a4[1] == -1) {
    int v15 = 0x7FFFFFFF;
  }
  else {
    int v15 = a4[2];
  }
  return sub_A0FDF4((uint64_t *)(a1 + 4184), (unsigned int *)&v17, v14, v15);
}

uint64_t sub_C167F4(void *a1, unint64_t a2, int a3, unsigned int *a4)
{
  unsigned int v6 = a2;
  unint64_t v7 = sub_A10650(a1, a2);
  uint64_t v8 = (int *)v7;
  int v9 = &v7[-*(int *)v7];
  if (*(unsigned __int16 *)v9 < 5u)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = *((unsigned __int16 *)v9 + 2);
    if (v10) {
      v10 += (uint64_t)&v7[*(unsigned int *)&v7[v10]];
    }
  }
  unint64_t v11 = (int *)(v10 + 4 * v6 + 4 + *(unsigned int *)(v10 + 4 * v6 + 4));
  uint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v12 >= 7u && (uint64_t v13 = v12[3]) != 0) {
    unsigned int v14 = (unsigned int *)((char *)v11 + v13 + *(unsigned int *)((char *)v11 + v13));
  }
  else {
    unsigned int v14 = 0;
  }
  uint64_t v15 = sub_A1FDE4(v14, *a4);
  if (a4[1] == -1) {
    int v16 = (int *)v15;
  }
  else {
    int v16 = (int *)(a4 + 2);
  }
  int v17 = *v16;
  int v18 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v18 < 7u)
  {
    unint64_t v19 = 0;
  }
  else
  {
    unint64_t v19 = (unsigned int *)v18[3];
    if (v19) {
      unint64_t v19 = (unsigned int *)((char *)v19 + (void)v8 + *(unsigned int *)((char *)v19 + (void)v8));
    }
  }
  return (*(_DWORD *)sub_A200AC(v19, *(_DWORD *)(v15 + 4) + a3) + v17);
}

BOOL sub_C16900(void *a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  if ((a4 & 1) == 0)
  {
    uint64_t v13 = (_DWORD *)(a2 + 4);
    goto LABEL_16;
  }
  int v8 = *(_DWORD *)(a3 + 16);
  if (v8 == 0x7FFFFFFF || (int v9 = *(_DWORD *)(a3 + 4), v9 == 0x7FFFFFFF))
  {
    char v10 = 7;
    int v11 = 214748364;
LABEL_5:
    char v12 = 5;
    goto LABEL_6;
  }
  char v10 = 0;
  int v11 = v8 - v9;
  if ((v11 & 0x80000000) == 0) {
    goto LABEL_5;
  }
  char v12 = -5;
LABEL_6:
  if (v11
     + ((((103 * (char)(v12 + v10)) & 0x8000) != 0) + ((103 * (char)(v12 + v10)) >> 10)) < 0)
  {
    BOOL result = sub_723EC(1u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v57);
    sub_188FC78(v57, (uint64_t)"Journey leg (alternative) has a negative static duration of ", 60);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    goto LABEL_40;
  }
  uint64_t v13 = (_DWORD *)(a2 + 4);
  if (*(_DWORD *)(a2 + 4) != 2) {
    goto LABEL_16;
  }
  int v14 = *(_DWORD *)(a3 + 20);
  if (v14 == 0x7FFFFFFF || (int v15 = *(_DWORD *)(a3 + 8), v15 == 0x7FFFFFFF))
  {
    char v16 = 7;
    int v17 = 214748364;
LABEL_11:
    char v18 = 5;
    goto LABEL_12;
  }
  char v16 = 0;
  int v17 = v14 - v15;
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_11;
  }
  char v18 = -5;
LABEL_12:
  if (v17
     + ((((103 * (char)(v18 + v16)) & 0x8000) != 0) + ((103 * (char)(v18 + v16)) >> 10)) < 0)
  {
    BOOL result = sub_723EC(1u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v57);
    sub_188FC78(v57, (uint64_t)"Journey leg (alternative) of journey based on realtime data has a negative expected duration of ", 96);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
LABEL_40:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v58 < 0) {
      operator delete((void *)v57[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    return 0;
  }
LABEL_16:
  int v20 = *(_DWORD *)(a3 + 48);
  if (v20 == -1)
  {
    BOOL result = sub_723EC(1u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v57);
    sub_188FC78(v57, (uint64_t)"Public transport journey leg (alternative) has an invalid origin stop index", 75);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    goto LABEL_40;
  }
  int v21 = *(_DWORD *)(a3 + 52);
  if (v21 == -1)
  {
    BOOL result = sub_723EC(1u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v57);
    sub_188FC78(v57, (uint64_t)"Public transport journey leg (alternative) has an invalid destination stop index", 80);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    goto LABEL_40;
  }
  if (v20 == v21)
  {
    BOOL result = sub_723EC(1u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v57);
    sub_188FC78(v57, (uint64_t)"Public transport journey leg (alternative) has the same origin and destination stop index", 89);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    goto LABEL_40;
  }
  if (*(_DWORD *)(a3 + 28) == -1 || !*(_DWORD *)(a3 + 32))
  {
    BOOL result = sub_723EC(1u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v57);
    sub_188FC78(v57, (uint64_t)"Public transport journey leg (alternative) has an invalid stop pattern ref", 74);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    goto LABEL_40;
  }
  int v22 = a1 + 517;
  if (sub_C0B364(a1 + 517, *(void *)(a3 + 28)))
  {
    unsigned int v23 = *(_DWORD *)(a3 + 36);
    if (v23 == -1)
    {
      BOOL result = sub_723EC(1u);
      if (result)
      {
        sub_6BAC((uint64_t)v57);
        sub_188FC78(v57, (uint64_t)"Public transport journey leg (alternative) has an invalid trip sequence index", 77);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 1u);
        goto LABEL_57;
      }
      return result;
    }
    if (*v13 == 2 && (a5 & 1) == 0 && sub_C164C8(a1 + 517, *(void *)(a3 + 28), v23))
    {
      BOOL result = sub_723EC(1u);
      if (!result) {
        return result;
      }
      sub_6BAC((uint64_t)v57);
      sub_188FC78(v57, (uint64_t)"Public transport journey leg (alternative) represents a trip that is blocked in the dynamic data on the stop pattern", 116);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      goto LABEL_57;
    }
    if (*(_DWORD *)(a3 + 40) != -1 && *(_DWORD *)(a3 + 44) == 0x7FFFFFFF)
    {
      BOOL result = sub_723EC(1u);
      if (result)
      {
        sub_6BAC((uint64_t)v57);
        sub_188FC78(v57, (uint64_t)"Public transport journey leg (alternative) represents a frequency trip but has an invalid basetime", 98);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 1u);
        goto LABEL_57;
      }
      return result;
    }
    unsigned int v24 = *(_DWORD *)(a3 + 48);
    if (v24 <= v24 + 1) {
      unsigned int v25 = v24 + 1;
    }
    else {
      unsigned int v25 = *(_DWORD *)(a3 + 48);
    }
    if (v24 != -1)
    {
      while (1)
      {
        BOOL v27 = (int *)sub_A11094(a1 + 517, *(void *)(a3 + 28));
        int v28 = (unsigned __int16 *)((char *)v27 - *v27);
        if (*v28 >= 9u && (uint64_t v29 = v28[4]) != 0) {
          char v30 = (unsigned int *)((char *)v27 + v29 + *(unsigned int *)((char *)v27 + v29));
        }
        else {
          char v30 = 0;
        }
        unint64_t v31 = __ROR8__(*(void *)sub_A10764(v30, v24), 32);
        uint64_t v32 = sub_A104E8(a1 + 517, *(void *)(a3 + 28), v24, *(_DWORD *)(a3 + 36));
        BOOL v33 = HIDWORD(v31) != 1 || (v31 + 3) >= 2;
        if (v33 && !sub_498D5C(a1[515] + 24, __ROR8__(v31, 32), 1, "stop")) {
          break;
        }
        if (v32 != 0xFFFFFFFFLL && !sub_369F8C(a1[523] + 24, __ROR8__(v32, 32), 1, "trip"))
        {
          BOOL result = sub_723EC(1u);
          if (!result) {
            return result;
          }
          sub_6BAC((uint64_t)v57);
          sub_188FC78(v57, (uint64_t)"Public transport journey leg (alternative) uses a trip, which is not in the data", 80);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 1u);
          goto LABEL_57;
        }
        if (v25 == ++v24)
        {
          unsigned int v26 = *(_DWORD *)(a3 + 48);
          goto LABEL_82;
        }
      }
      BOOL result = sub_723EC(1u);
      if (!result) {
        return result;
      }
      sub_6BAC((uint64_t)v57);
      int v43 = sub_188FC78(v57, (uint64_t)"Public transport journey leg (alternative) uses a stop index ", 61);
      std::ostream::operator<<();
      sub_188FC78(v43, (uint64_t)", which is not in the data", 26);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      goto LABEL_57;
    }
    unsigned int v26 = -1;
LABEL_82:
    if (*(_DWORD *)a3 != sub_C165D4(a1 + 517, *(void *)(a3 + 28), v26))
    {
      BOOL result = sub_723EC(1u);
      if (result)
      {
        sub_6BAC((uint64_t)v57);
        sub_188FC78(v57, (uint64_t)"Public transport journey leg (alternative) has buffer duration ", 63);
        uint64_t v34 = (void *)std::ostream::operator<<();
        sub_188FC78(v34, (uint64_t)" sec which does not match the data ", 35);
        sub_C165D4(v22, *(void *)(a3 + 28), *(_DWORD *)(a3 + 48));
        std::ostream::operator<<();
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 1u);
        goto LABEL_57;
      }
      return result;
    }
    if (*(_DWORD *)(a3 + 4) == sub_C1663C((uint64_t)a1, *(void *)(a3 + 28), *(_DWORD *)(a3 + 48), (int *)(a3 + 36)))
    {
      if (*(_DWORD *)(a3 + 16) == sub_C16718((uint64_t)a1, *(void *)(a3 + 28), *(_DWORD *)(a3 + 52), (int *)(a3 + 36)))return 1; {
      BOOL result = sub_723EC(1u);
      }
      if (result)
      {
        sub_6BAC((uint64_t)v57);
        char v44 = sub_188FC78(v57, (uint64_t)"Public transport journey leg (alternative) has arrival time ", 60);
        sub_5E5C(v54, "");
        sub_4A101C(a3 + 16, (uint64_t)v54, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        uint64_t v47 = sub_188FC78(v44, (uint64_t)p_p, size);
        unint64_t v48 = sub_188FC78(v47, (uint64_t)" whose static time does not match the data ", 43);
        LODWORD(v53.__r_.__value_.__l.__data_) = sub_C167F4(v22, *(void *)(a3 + 28), *(_DWORD *)(a3 + 52), (unsigned int *)(a3 + 36));
        sub_266E4((uint64_t)v48);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v55 < 0) {
          operator delete(v54[0]);
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 1u);
        goto LABEL_57;
      }
      return result;
    }
    BOOL result = sub_723EC(1u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v57);
    unint64_t v35 = sub_188FC78(v57, (uint64_t)"Public transport journey leg (alternative) has departure time ", 62);
    sub_5E5C(v54, "");
    sub_4A101C(a3 + 4, (uint64_t)v54, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v36 = &__p;
    }
    else {
      int v36 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v37 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v37 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v38 = sub_188FC78(v35, (uint64_t)v36, v37);
    char v39 = sub_188FC78(v38, (uint64_t)" whose static time does not match the data ", 43);
    unint64_t v51 = sub_C1663C((uint64_t)a1, *(void *)(a3 + 28), *(_DWORD *)(a3 + 48), (int *)(a3 + 36));
    int v52 = v40;
    sub_5E5C(v49, "");
    sub_4A101C((uint64_t)&v51, (uint64_t)v49, &v53);
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v41 = &v53;
    }
    else {
      BOOL v41 = (std::string *)v53.__r_.__value_.__r.__words[0];
    }
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v42 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v42 = v53.__r_.__value_.__l.__size_;
    }
    sub_188FC78(v39, (uint64_t)v41, v42);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v53.__r_.__value_.__l.__data_);
      if ((v50 & 0x80000000) == 0)
      {
LABEL_103:
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_104;
        }
        goto LABEL_122;
      }
    }
    else if ((v50 & 0x80000000) == 0)
    {
      goto LABEL_103;
    }
    operator delete(v49[0]);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_104:
      if ((v55 & 0x80000000) == 0)
      {
LABEL_105:
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 1u);
        goto LABEL_57;
      }
LABEL_123:
      operator delete(v54[0]);
      goto LABEL_105;
    }
LABEL_122:
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v55 & 0x80000000) == 0) {
      goto LABEL_105;
    }
    goto LABEL_123;
  }
  BOOL result = sub_723EC(1u);
  if (result)
  {
    sub_6BAC((uint64_t)v57);
    sub_188FC78(v57, (uint64_t)"Public transport journey leg (alternative) has a stop pattern ref, which is not in the data.", 92);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
LABEL_57:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_111ECAC((uint64_t)v57);
    return 0;
  }
  return result;
}

void sub_C17490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a34 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a35);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a35);
  _Unwind_Resume(a1);
}

BOOL sub_C17898(int *a1)
{
  int v1 = *a1;
  if (*a1 == 0x7FFFFFFF)
  {
    BOOL result = sub_723EC(1u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v9);
    sub_188FC78(v9, (uint64_t)"Operating hours have an invalid start time", 42);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
  }
  else
  {
    int v3 = a1[1];
    BOOL result = 1;
    if (v3 == 0x7FFFFFFF)
    {
      BOOL result = sub_723EC(1u);
      if (!result) {
        return result;
      }
      sub_6BAC((uint64_t)v9);
      sub_188FC78(v9, (uint64_t)"Operating hours have an invalid end time", 40);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
    }
    else
    {
      if (v1 <= v3) {
        return result;
      }
      BOOL result = sub_723EC(1u);
      if (!result) {
        return result;
      }
      sub_6BAC((uint64_t)v9);
      unint64_t v4 = sub_188FC78(v9, (uint64_t)"Operating hours cover a negative time interval: ", 48);
      unint64_t v5 = (void *)sub_266E4((uint64_t)v4);
      unsigned int v6 = sub_188FC78(v5, (uint64_t)" < ", 3);
      sub_266E4((uint64_t)v6);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
    }
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return 0;
}

void sub_C17AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL sub_C17B7C(uint64_t a1)
{
  BOOL v2 = *(_DWORD *)a1 != 0x7FFFFFFF;
  if (*(_DWORD *)a1 == 0x7FFFFFFF && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v17);
    sub_188FC78(&v17, (uint64_t)"The schedule lookup request entity has an invalid requested time", 64);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v20 < 0) {
      operator delete(v19);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (*(_DWORD *)(a1 + 8) == 0x7FFFFFFF)
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)&v17);
      sub_188FC78(&v17, (uint64_t)"The schedule lookup request entity has an invalid duration", 58);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      if (v20 < 0) {
        operator delete(v19);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    BOOL v2 = 0;
  }
  int v3 = *(void **)(a1 + 48);
  unint64_t v4 = *(void **)(a1 + 56);
  if (v3 == v4)
  {
LABEL_22:
    unsigned int v6 = *(void **)(a1 + 72);
    unint64_t v7 = *(void **)(a1 + 80);
    if (v6 != v7) {
      goto LABEL_31;
    }
    goto LABEL_36;
  }
  while (HIDWORD(*v3) && *v3 != 0xFFFFFFFFLL)
  {
    if (++v3 == v4) {
      goto LABEL_22;
    }
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v17);
    sub_188FC78(&v17, (uint64_t)"The schedule lookup request entity has an invalid from stop ref", 63);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v20 < 0) {
      operator delete(v19);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  BOOL v2 = 0;
  unsigned int v6 = *(void **)(a1 + 72);
  unint64_t v7 = *(void **)(a1 + 80);
  if (v6 == v7)
  {
LABEL_36:
    int v9 = *(void **)(a1 + 96);
    char v10 = *(void **)(a1 + 104);
    if (v9 == v10) {
      return v2;
    }
    goto LABEL_45;
  }
LABEL_31:
  while (HIDWORD(*v6) && *v6 != 0xFFFFFFFFLL)
  {
    if (++v6 == v7) {
      goto LABEL_36;
    }
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v17);
    sub_188FC78(&v17, (uint64_t)"The schedule lookup request entity has an invalid to stop ref", 61);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v20 < 0) {
      operator delete(v19);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  BOOL v2 = 0;
  int v9 = *(void **)(a1 + 96);
  char v10 = *(void **)(a1 + 104);
  if (v9 != v10)
  {
LABEL_45:
    do
    {
      if (HIDWORD(*v9)) {
        BOOL v13 = *v9 == 0xFFFFFFFFLL;
      }
      else {
        BOOL v13 = 1;
      }
      if (v13)
      {
        if (sub_723EC(1u))
        {
          sub_6BAC((uint64_t)&v17);
          sub_188FC78(&v17, (uint64_t)"The schedule lookup request entity has an invalid permissible line ref", 70);
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 1u);
          if (v16 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v17 = v11;
          *(uint64_t *)((char *)&v17 + *(void *)(v11 - 24)) = v12;
          if (v20 < 0) {
            operator delete(v19);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        BOOL v2 = 0;
      }
      ++v9;
    }
    while (v9 != v10);
  }
  return v2;
}

void sub_C182BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL sub_C183B8(_DWORD *a1)
{
  if (*a1 == 0x7FFFFFFF)
  {
    BOOL result = sub_723EC(1u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v14);
    sub_188FC78(v14, (uint64_t)"Service frequency has an invalid start time", 43);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
LABEL_13:
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v15 < 0) {
      operator delete((void *)v14[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    return 0;
  }
  int v2 = a1[1];
  if (v2 == 0x7FFFFFFF)
  {
    BOOL result = sub_723EC(1u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v14);
    sub_188FC78(v14, (uint64_t)"Service frequency has an invalid end time", 41);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
    goto LABEL_13;
  }
  if (*a1 >= v2)
  {
    BOOL result = sub_723EC(1u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v14);
    unint64_t v4 = sub_188FC78(v14, (uint64_t)"Service frequency covers an empty or negative time interval: ", 61);
    unint64_t v5 = (void *)sub_266E4((uint64_t)v4);
    unsigned int v6 = sub_188FC78(v5, (uint64_t)" < ", 3);
    sub_266E4((uint64_t)v6);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
    goto LABEL_13;
  }
  int v3 = a1[2];
  if (v3 == 0x7FFFFFFF)
  {
    BOOL result = sub_723EC(1u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v14);
    sub_188FC78(v14, (uint64_t)"Service frequency has an invalid minimum headway", 48);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
    goto LABEL_13;
  }
  int v7 = a1[3];
  if (v7 == 0x7FFFFFFF)
  {
    BOOL result = sub_723EC(1u);
    if (result)
    {
      sub_6BAC((uint64_t)v14);
      sub_188FC78(v14, (uint64_t)"Service frequency has an invalid maximum headway", 48);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
LABEL_35:
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      sub_111ECAC((uint64_t)v14);
      return 0;
    }
  }
  else if (v3 <= v7)
  {
    int v9 = a1[4];
    BOOL result = 1;
    if (v9 == 0x7FFFFFFF)
    {
      BOOL result = sub_723EC(1u);
      if (result)
      {
        sub_6BAC((uint64_t)v14);
        sub_188FC78(v14, (uint64_t)"Service frequency has an invalid mean headway", 45);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
        goto LABEL_35;
      }
    }
    else if (v3 <= 0)
    {
      BOOL result = sub_723EC(1u);
      if (result)
      {
        sub_6BAC((uint64_t)v14);
        sub_188FC78(v14, (uint64_t)"Service frequency has a min headway value of ", 45);
        uint64_t v11 = (void *)std::ostream::operator<<();
        sub_188FC78(v11, (uint64_t)" sec", 4);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
        goto LABEL_35;
      }
    }
    else if (v9 <= 0)
    {
      BOOL result = sub_723EC(1u);
      if (result)
      {
        sub_6BAC((uint64_t)v14);
        sub_188FC78(v14, (uint64_t)"Service frequency has a mean headway value of ", 46);
        char v10 = (void *)std::ostream::operator<<();
        sub_188FC78(v10, (uint64_t)" sec", 4);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
        goto LABEL_35;
      }
    }
  }
  else
  {
    BOOL result = sub_723EC(1u);
    if (result)
    {
      sub_6BAC((uint64_t)v14);
      char v8 = sub_188FC78(v14, (uint64_t)"Service frequency has a minimum headway which is larger than the maximum headway: ", 82);
      std::ostream::operator<<();
      sub_188FC78(v8, (uint64_t)" <= ", 4);
      std::ostream::operator<<();
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      goto LABEL_35;
    }
  }
  return result;
}

void sub_C18878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_C18A24(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = __ROR8__(**(void **)(a3 + 72), 32);
  int v7 = (void *)(a1 + 4136);
  if ((sub_C0B364((void *)(a1 + 4136), v6) & 1) == 0)
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v188);
      char v15 = sub_188FC78(&v188, (uint64_t)"Stop ", 5);
      char v16 = sub_2D1500(v15, a2);
      sub_188FC78(v16, (uint64_t)" (muid: ", 8);
      if (HIDWORD(a2) != 1 || (a2 + 3) >= 2)
      {
        unint64_t v19 = (int *)sub_498D5C(*(void *)(a1 + 4120) + 24, __ROR8__(a2, 32), 0, "stop");
        char v20 = (unsigned __int16 *)((char *)v19 - *v19);
        if (*v20 >= 5u && (uint64_t v21 = v20[2]) != 0) {
          uint64_t v22 = *(void *)((char *)v19 + v21);
        }
        else {
          uint64_t v22 = 0;
        }
        BOOL v27 = sub_398020(*(void *)(a1 + 4120) + 24, 0);
        int v28 = &v27[-*(int *)v27];
        if (*(unsigned __int16 *)v28 >= 0xBu)
        {
          uint64_t v29 = *((unsigned __int16 *)v28 + 5);
          if (v29)
          {
            if (v27[v29]) {
              nullsub_1(v22);
            }
          }
        }
      }
      char v30 = (void *)std::ostream::operator<<();
      unint64_t v31 = sub_188FC78(v30, (uint64_t)") references stop pattern ", 26);
      uint64_t v32 = sub_2D1500(v31, v6);
      sub_188FC78(v32, (uint64_t)" which does not exist", 21);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 3u);
      goto LABEL_205;
    }
    return 0;
  }
  char v8 = (int *)sub_A11094(v7, v6);
  int v9 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v9 >= 9u
    && (uint64_t v10 = v9[4]) != 0
    && *(int *)((char *)v8 + v10 + *(unsigned int *)((char *)v8 + v10)) > *(unsigned __int16 *)(*(void *)(a3 + 72) + 8)
    && (uint64_t v11 = (int *)sub_A11094(v7, v6), v12 = (unsigned __int16 *)((char *)v11 - *v11), *v12 >= 9u)
    && (uint64_t v13 = v12[4]) != 0
    && *(int *)((char *)v11 + v13 + *(unsigned int *)((char *)v11 + v13)) > *(unsigned __int16 *)(*(void *)(a3 + 72) + 10))
  {
    uint64_t v14 = 1;
  }
  else
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v188);
      uint64_t v17 = sub_188FC78(&v188, (uint64_t)"Stop ", 5);
      char v18 = sub_2D1500(v17, a2);
      sub_188FC78(v18, (uint64_t)" (muid: ", 8);
      if (HIDWORD(a2) != 1 || (a2 + 3) >= 2)
      {
        unsigned int v23 = (int *)sub_498D5C(*(void *)(a1 + 4120) + 24, __ROR8__(a2, 32), 0, "stop");
        unsigned int v24 = (unsigned __int16 *)((char *)v23 - *v23);
        if (*v24 >= 5u && (uint64_t v25 = v24[2]) != 0) {
          uint64_t v26 = *(void *)((char *)v23 + v25);
        }
        else {
          uint64_t v26 = 0;
        }
        BOOL v33 = sub_398020(*(void *)(a1 + 4120) + 24, 0);
        uint64_t v34 = &v33[-*(int *)v33];
        if (*(unsigned __int16 *)v34 >= 0xBu)
        {
          uint64_t v35 = *((unsigned __int16 *)v34 + 5);
          if (v35)
          {
            if (v33[v35]) {
              nullsub_1(v26);
            }
          }
        }
      }
      int v36 = (void *)std::ostream::operator<<();
      std::string::size_type v37 = sub_188FC78(v36, (uint64_t)") references stop pattern ", 26);
      uint64_t v38 = sub_2D1500(v37, v6);
      char v39 = sub_188FC78(v38, (uint64_t)" at first stop index ", 21);
      std::ostream::operator<<();
      int v40 = sub_188FC78(v39, (uint64_t)" and last stop index ", 21);
      std::ostream::operator<<();
      BOOL v41 = sub_188FC78(v40, (uint64_t)", but the stop pattern has only ", 32);
      sub_A11094(v7, v6);
      std::ostream::operator<<();
      sub_188FC78(v41, (uint64_t)" stops", 6);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 3u);
      if (v187 < 0) {
        operator delete(__p[0]);
      }
      if (v191 < 0) {
        operator delete(v190);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    uint64_t v14 = 0;
  }
  unsigned int v42 = *(unsigned __int16 *)(*(void *)(a3 + 72) + 8);
  int v43 = (int *)sub_A11094(v7, v6);
  char v44 = (unsigned __int16 *)((char *)v43 - *v43);
  if (*v44 >= 9u && (uint64_t v45 = v44[4]) != 0) {
    uint64_t v46 = (unsigned int *)((char *)v43 + v45 + *(unsigned int *)((char *)v43 + v45));
  }
  else {
    uint64_t v46 = 0;
  }
  unint64_t v47 = __ROR8__(*(void *)sub_A10764(v46, v42), 32);
  unint64_t v48 = HIDWORD(v47);
  unint64_t v49 = HIDWORD(a2);
  BOOL v50 = HIDWORD(v47) == HIDWORD(a2) && v47 == a2;
  if (!v50
    || ((unsigned int v51 = *(unsigned __int16 *)(*(void *)(a3 + 72) + 10),
         int v52 = (int *)sub_A11094(v7, v6),
         std::string v53 = (unsigned __int16 *)((char *)v52 - *v52),
         *v53 < 9u)
     || (uint64_t v54 = v53[4]) == 0
      ? (char v55 = 0)
      : (char v55 = (unsigned int *)((char *)v52 + v54 + *(unsigned int *)((char *)v52 + v54))),
        (uint64_t v56 = __ROR8__(*(void *)sub_A10764(v55, v51), 32), HIDWORD(v56) == v48)
      ? (BOOL v57 = v56 == a2)
      : (BOOL v57 = 0),
        !v57))
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v188);
      char v58 = sub_188FC78(&v188, (uint64_t)"Stop ", 5);
      char v59 = sub_2D1500(v58, a2);
      sub_188FC78(v59, (uint64_t)" (muid: ", 8);
      if (v49 != 1 || (a2 + 3) >= 2)
      {
        signed int v60 = (int *)sub_498D5C(*(void *)(a1 + 4120) + 24, __ROR8__(a2, 32), 0, "stop");
        int v61 = (unsigned __int16 *)((char *)v60 - *v60);
        if (*v61 >= 5u && (uint64_t v62 = v61[2]) != 0) {
          uint64_t v63 = *(void *)((char *)v60 + v62);
        }
        else {
          uint64_t v63 = 0;
        }
        signed int v64 = sub_398020(*(void *)(a1 + 4120) + 24, 0);
        int v65 = &v64[-*(int *)v64];
        if (*(unsigned __int16 *)v65 >= 0xBu)
        {
          uint64_t v66 = *((unsigned __int16 *)v65 + 5);
          if (v66)
          {
            if (v64[v66]) {
              nullsub_1(v63);
            }
          }
        }
      }
      int v67 = (void *)std::ostream::operator<<();
      uint64_t v68 = sub_188FC78(v67, (uint64_t)") references stop pattern ", 26);
      uint64_t v69 = sub_2D1500(v68, v6);
      uint64_t v70 = sub_188FC78(v69, (uint64_t)" at first stop ", 15);
      unsigned int v71 = *(unsigned __int16 *)(*(void *)(a3 + 72) + 8);
      unsigned __int8 v72 = (int *)sub_A11094(v7, v6);
      uint64_t v73 = (unsigned __int16 *)((char *)v72 - *v72);
      if (*v73 >= 9u && (uint64_t v74 = v73[4]) != 0) {
        unsigned int v75 = (unsigned int *)((char *)v72 + v74 + *(unsigned int *)((char *)v72 + v74));
      }
      else {
        unsigned int v75 = 0;
      }
      unsigned int v76 = (void *)sub_A10764(v75, v71);
      int v77 = sub_2D1500(v70, __ROR8__(*v76, 32));
      uint64_t v78 = sub_188FC78(v77, (uint64_t)" and last stop  ", 16);
      unsigned int v79 = *(unsigned __int16 *)(*(void *)(a3 + 72) + 10);
      uint64_t v80 = (int *)sub_A11094(v7, v6);
      unint64_t v81 = (unsigned __int16 *)((char *)v80 - *v80);
      if (*v81 >= 9u && (uint64_t v82 = v81[4]) != 0) {
        unint64_t v83 = (unsigned int *)((char *)v80 + v82 + *(unsigned int *)((char *)v80 + v82));
      }
      else {
        unint64_t v83 = 0;
      }
      uint64_t v84 = (void *)sub_A10764(v83, v79);
      BOOL v85 = sub_2D1500(v78, __ROR8__(*v84, 32));
      sub_188FC78(v85, (uint64_t)", which are different from the stop", 35);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 3u);
      if (v187 < 0) {
        operator delete(__p[0]);
      }
      if (v191 < 0) {
        operator delete(v190);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    uint64_t v14 = 0;
  }
  uint64_t v86 = *(void *)(a3 + 72);
  int v87 = *(unsigned __int16 *)(v86 + 8);
  if (*(_WORD *)(v86 + 8))
  {
    unsigned int v88 = 0;
    while (1)
    {
      BOOL v89 = (int *)sub_A11094(v7, v6);
      unint64_t v90 = (unsigned __int16 *)((char *)v89 - *v89);
      if (*v90 >= 9u && (uint64_t v91 = v90[4]) != 0) {
        unint64_t v92 = (unsigned int *)((char *)v89 + v91 + *(unsigned int *)((char *)v89 + v91));
      }
      else {
        unint64_t v92 = 0;
      }
      uint64_t v93 = __ROR8__(*(void *)sub_A10764(v92, v88), 32);
      if (HIDWORD(v93) == HIDWORD(a2) && v93 == a2) {
        break;
      }
      if (v87 == ++v88) {
        goto LABEL_111;
      }
    }
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v188);
      char v95 = sub_188FC78(&v188, (uint64_t)"Stop ", 5);
      int v96 = sub_2D1500(v95, a2);
      sub_188FC78(v96, (uint64_t)" (muid: ", 8);
      if (v49 != 1 || (a2 + 3) >= 2)
      {
        int v97 = (int *)sub_498D5C(*(void *)(a1 + 4120) + 24, __ROR8__(a2, 32), 0, "stop");
        unint64_t v98 = (unsigned __int16 *)((char *)v97 - *v97);
        if (*v98 >= 5u && (uint64_t v99 = v98[2]) != 0) {
          uint64_t v100 = *(void *)((char *)v97 + v99);
        }
        else {
          uint64_t v100 = 0;
        }
        uint64_t v101 = sub_398020(*(void *)(a1 + 4120) + 24, 0);
        unint64_t v102 = &v101[-*(int *)v101];
        if (*(unsigned __int16 *)v102 >= 0xBu)
        {
          uint64_t v103 = *((unsigned __int16 *)v102 + 5);
          if (v103)
          {
            if (v101[v103]) {
              nullsub_1(v100);
            }
          }
        }
      }
      uint64_t v104 = (void *)std::ostream::operator<<();
      uint64_t v105 = sub_188FC78(v104, (uint64_t)") is referenced by stop pattern ", 32);
      uint64_t v106 = sub_2D1500(v105, v6);
      uint64_t v107 = sub_188FC78(v106, (uint64_t)" as first stop index ", 21);
      std::ostream::operator<<();
      sub_188FC78(v107, (uint64_t)" but the stop already appears at index ", 39);
      std::ostream::operator<<();
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 3u);
      if (v187 < 0) {
        operator delete(__p[0]);
      }
      if (v191 < 0) {
        operator delete(v190);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    uint64_t v14 = 0;
  }
LABEL_111:
  int v108 = *(unsigned __int16 *)(*(void *)(a3 + 72) + 10);
  uint64_t v109 = (int *)sub_A11094(v7, v6);
  long double v110 = (unsigned __int16 *)((char *)v109 - *v109);
  if (*v110 >= 9u)
  {
    uint64_t v111 = v110[4];
    if (v111)
    {
      unsigned int v112 = v108 + 1;
      unsigned int v113 = *(int *)((char *)v109 + v111 + *(unsigned int *)((char *)v109 + v111));
      unsigned int v114 = v112 <= v113 ? v113 : v112;
      if (v112 < v113)
      {
        while (1)
        {
          int v115 = (int *)sub_A11094(v7, v6);
          uint64_t v116 = (unsigned __int16 *)((char *)v115 - *v115);
          if (*v116 >= 9u && (uint64_t v117 = v116[4]) != 0) {
            v118 = (unsigned int *)((char *)v115 + v117 + *(unsigned int *)((char *)v115 + v117));
          }
          else {
            v118 = 0;
          }
          uint64_t v119 = __ROR8__(*(void *)sub_A10764(v118, v112), 32);
          if (HIDWORD(v119) == HIDWORD(a2) && v119 == a2) {
            break;
          }
          if (v114 == ++v112) {
            goto LABEL_144;
          }
        }
        if (sub_723EC(3u))
        {
          sub_6BAC((uint64_t)&v188);
          long long v121 = sub_188FC78(&v188, (uint64_t)"Stop ", 5);
          long long v122 = sub_2D1500(v121, a2);
          sub_188FC78(v122, (uint64_t)" (muid: ", 8);
          if (v49 != 1 || (a2 + 3) >= 2)
          {
            v123 = (int *)sub_498D5C(*(void *)(a1 + 4120) + 24, __ROR8__(a2, 32), 0, "stop");
            int v124 = (unsigned __int16 *)((char *)v123 - *v123);
            if (*v124 >= 5u && (uint64_t v125 = v124[2]) != 0) {
              uint64_t v126 = *(void *)((char *)v123 + v125);
            }
            else {
              uint64_t v126 = 0;
            }
            int v127 = sub_398020(*(void *)(a1 + 4120) + 24, 0);
            v128 = &v127[-*(int *)v127];
            if (*(unsigned __int16 *)v128 >= 0xBu)
            {
              uint64_t v129 = *((unsigned __int16 *)v128 + 5);
              if (v129)
              {
                if (v127[v129]) {
                  nullsub_1(v126);
                }
              }
            }
          }
          long long v130 = (void *)std::ostream::operator<<();
          long long v131 = sub_188FC78(v130, (uint64_t)") is referenced by stop pattern ", 32);
          long long v132 = sub_2D1500(v131, v6);
          long long v133 = sub_188FC78(v132, (uint64_t)" as last stop index ", 20);
          std::ostream::operator<<();
          sub_188FC78(v133, (uint64_t)" but the stop again appears at index ", 37);
          std::ostream::operator<<();
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 3u);
          if (v187 < 0) {
            operator delete(__p[0]);
          }
          if (v191 < 0) {
            operator delete(v190);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        uint64_t v14 = 0;
      }
    }
  }
LABEL_144:
  int v134 = *(unsigned __int16 *)(*(void *)(a3 + 72) + 12);
  v135 = (int *)sub_A11094(v7, v6);
  v136 = (unsigned __int16 *)((char *)v135 - *v135);
  if (*v136 >= 0xFu && (uint64_t v137 = v136[7]) != 0)
  {
    if (v134 == *(unsigned __int16 *)((char *)v135 + v137)) {
      goto LABEL_166;
    }
  }
  else if (v134 == 0x7FFF)
  {
    goto LABEL_166;
  }
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)&v188);
    int v138 = sub_188FC78(&v188, (uint64_t)"Stop ", 5);
    v139 = sub_2D1500(v138, a2);
    sub_188FC78(v139, (uint64_t)" (muid: ", 8);
    if (v49 != 1 || (a2 + 3) >= 2)
    {
      char v140 = (int *)sub_498D5C(*(void *)(a1 + 4120) + 24, __ROR8__(a2, 32), 0, "stop");
      unint64_t v141 = (unsigned __int16 *)((char *)v140 - *v140);
      if (*v141 >= 5u && (uint64_t v142 = v141[2]) != 0) {
        uint64_t v143 = *(void *)((char *)v140 + v142);
      }
      else {
        uint64_t v143 = 0;
      }
      uint8x8_t v144 = sub_398020(*(void *)(a1 + 4120) + 24, 0);
      int v145 = &v144[-*(int *)v144];
      if (*(unsigned __int16 *)v145 >= 0xBu)
      {
        uint64_t v146 = *((unsigned __int16 *)v145 + 5);
        if (v146)
        {
          if (v144[v146]) {
            nullsub_1(v143);
          }
        }
      }
    }
    v147 = (void *)std::ostream::operator<<();
    v148 = sub_188FC78(v147, (uint64_t)") references stop pattern ", 26);
    char v149 = sub_2D1500(v148, v6);
    sub_188FC78(v149, (uint64_t)" with a different transit type than the stop pattern itself: ", 61);
    v150 = (void *)std::ostream::operator<<();
    sub_188FC78(v150, (uint64_t)" != ", 4);
    sub_A11094(v7, v6);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 3u);
    if (v187 < 0) {
      operator delete(__p[0]);
    }
    if (v191 < 0) {
      operator delete(v190);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  uint64_t v14 = 0;
LABEL_166:
  int v151 = *(unsigned __int8 *)(*(void *)(a3 + 72) + 14);
  BOOL v152 = (int *)sub_A11094(v7, v6);
  uint64_t v153 = (unsigned __int16 *)((char *)v152 - *v152);
  if (*v153 >= 0xDu && (uint64_t v154 = v153[6]) != 0)
  {
    if (v151 == *((unsigned __int8 *)v152 + v154)) {
      goto LABEL_188;
    }
  }
  else if (v151 == 1)
  {
    goto LABEL_188;
  }
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)&v188);
    v155 = sub_188FC78(&v188, (uint64_t)"Stop ", 5);
    unsigned __int16 v156 = sub_2D1500(v155, a2);
    sub_188FC78(v156, (uint64_t)" (muid: ", 8);
    if (v49 != 1 || (a2 + 3) >= 2)
    {
      uint64_t v157 = (int *)sub_498D5C(*(void *)(a1 + 4120) + 24, __ROR8__(a2, 32), 0, "stop");
      uint64_t v158 = (unsigned __int16 *)((char *)v157 - *v157);
      if (*v158 >= 5u && (uint64_t v159 = v158[2]) != 0) {
        uint64_t v160 = *(void *)((char *)v157 + v159);
      }
      else {
        uint64_t v160 = 0;
      }
      v161 = sub_398020(*(void *)(a1 + 4120) + 24, 0);
      uint64_t v162 = &v161[-*(int *)v161];
      if (*(unsigned __int16 *)v162 >= 0xBu)
      {
        uint64_t v163 = *((unsigned __int16 *)v162 + 5);
        if (v163)
        {
          if (v161[v163]) {
            nullsub_1(v160);
          }
        }
      }
    }
    v164 = (void *)std::ostream::operator<<();
    v165 = sub_188FC78(v164, (uint64_t)") references stop pattern ", 26);
    uint64_t v166 = sub_2D1500(v165, v6);
    sub_188FC78(v166, (uint64_t)" with a different required market support version than the stop pattern itself: ", 80);
    uint64_t v167 = (void *)std::ostream::operator<<();
    sub_188FC78(v167, (uint64_t)" != ", 4);
    sub_A11094(v7, v6);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 3u);
    if (v187 < 0) {
      operator delete(__p[0]);
    }
    if (v191 < 0) {
      operator delete(v190);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  uint64_t v14 = 0;
LABEL_188:
  char v168 = *(unsigned char *)(*(void *)(a3 + 72) + 15);
  uint64_t v169 = (int *)sub_A11094(v7, v6);
  unint64_t v170 = (unsigned __int16 *)((char *)v169 - *v169);
  if (*v170 >= 0x13u)
  {
    uint64_t v171 = v170[9];
    if (v171)
    {
      if ((v168 & 1) == (*((unsigned char *)v169 + v171) & 2) >> 1) {
        return v14;
      }
LABEL_193:
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)&v188);
        v172 = sub_188FC78(&v188, (uint64_t)"Stop ", 5);
        int v173 = sub_2D1500(v172, a2);
        sub_188FC78(v173, (uint64_t)" (muid: ", 8);
        if (v49 != 1 || (a2 + 3) >= 2)
        {
          uint64_t v174 = (int *)sub_498D5C(*(void *)(a1 + 4120) + 24, __ROR8__(a2, 32), 0, "stop");
          double v175 = (unsigned __int16 *)((char *)v174 - *v174);
          if (*v175 >= 5u && (uint64_t v176 = v175[2]) != 0) {
            uint64_t v177 = *(void *)((char *)v174 + v176);
          }
          else {
            uint64_t v177 = 0;
          }
          uint64_t v178 = sub_398020(*(void *)(a1 + 4120) + 24, 0);
          uint64_t v179 = &v178[-*(int *)v178];
          if (*(unsigned __int16 *)v179 >= 0xBu)
          {
            uint64_t v180 = *((unsigned __int16 *)v179 + 5);
            if (v180)
            {
              if (v178[v180]) {
                nullsub_1(v177);
              }
            }
          }
        }
        uint64_t v181 = (void *)std::ostream::operator<<();
        long long v182 = sub_188FC78(v181, (uint64_t)") references stop pattern ", 26);
        long long v183 = sub_2D1500(v182, v6);
        sub_188FC78(v183, (uint64_t)" with a different preflight flag than the stop pattern itself: ", 63);
        uint64_t v184 = (void *)std::ostream::operator<<();
        sub_188FC78(v184, (uint64_t)" != ", 4);
        sub_A11094(v7, v6);
        std::ostream::operator<<();
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 3u);
LABEL_205:
        if (v187 < 0) {
          operator delete(__p[0]);
        }
        if (v191 < 0) {
          operator delete(v190);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
        return 0;
      }
      return 0;
    }
  }
  if (v168) {
    goto LABEL_193;
  }
  return v14;
}

void sub_C1A148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_C1A2C8()
{
  byte_25E017F = 1;
  word_25E0168 = 65;
}

uint64_t sub_C1A2E4(uint64_t a1, unint64_t *a2)
{
  uint64_t v3 = a1;
  unint64_t v4 = (uint64_t *)(a1 + 4136);
  unint64_t v5 = (int *)sub_A11094((void *)(a1 + 4136), *a2);
  unint64_t v6 = (unsigned __int16 *)((char *)v5 - *v5);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0 && *(int *)((char *)v5 + v7 + *(unsigned int *)((char *)v5 + v7)))
  {
    int v8 = 1;
  }
  else
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v656);
      int v9 = sub_188FC78(v656, (uint64_t)"Stop pattern ", 13);
      uint64_t v10 = sub_2D1500(v9, *a2);
      sub_188FC78(v10, (uint64_t)" has no trips on it", 19);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if (v655 < 0) {
        operator delete(__p);
      }
      if (SBYTE7(v660) < 0) {
        operator delete((void *)v659);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    int v8 = 0;
  }
  uint64_t v11 = (int *)sub_A11094(v4, *a2);
  uint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v12 < 9u
    || (uint64_t v13 = v12[4]) == 0
    || *(unsigned int *)((char *)v11 + v13 + *(unsigned int *)((char *)v11 + v13)) <= 1)
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v656);
      uint64_t v14 = sub_188FC78(v656, (uint64_t)"Stop pattern ", 13);
      char v15 = sub_2D1500(v14, *a2);
      char v16 = sub_188FC78(v15, (uint64_t)" has ", 5);
      sub_A11094(v4, *a2);
      std::ostream::operator<<();
      sub_188FC78(v16, (uint64_t)" which is too few (at least 2 required)", 39);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if (v655 < 0) {
        operator delete(__p);
      }
      if (SBYTE7(v660) < 0) {
        operator delete((void *)v659);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    int v8 = 0;
  }
  uint64_t v17 = (int *)sub_A11094(v4, *a2);
  char v18 = (unsigned __int16 *)((char *)v17 - *v17);
  if (*v18 >= 0x15u && v18[10])
  {
    unint64_t v19 = (int *)sub_A11094(v4, *a2);
    char v20 = (unsigned __int16 *)((char *)v19 - *v19);
    if (*v20 >= 0x15u && (uint64_t v21 = v20[10]) != 0) {
      uint64_t v22 = *(unsigned int *)((char *)v19 + v21 + *(unsigned int *)((char *)v19 + v21));
    }
    else {
      uint64_t v22 = 0;
    }
    unsigned int v23 = (int *)sub_A11094(v4, *a2);
    unsigned int v24 = (unsigned __int16 *)((char *)v23 - *v23);
    if (*v24 < 9u)
    {
      if (!v22) {
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v25 = v24[4];
      if (v25) {
        LODWORD(v25) = *(int *)((char *)v23 + v25 + *(unsigned int *)((char *)v23 + v25));
      }
      if (v22 == v25) {
        goto LABEL_32;
      }
    }
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v656);
      double v475 = sub_188FC78(v656, (uint64_t)"Stop pattern ", 13);
      double v476 = sub_2D1500(v475, *a2);
      sub_188FC78(v476, (uint64_t)" has ", 5);
      sub_A11094(v4, *a2);
      v537 = (void *)std::ostream::operator<<();
      sub_188FC78(v537, (uint64_t)" boarding restriction groups which does not match its number of stops ", 70);
      sub_A11094(v4, *a2);
      std::ostream::operator<<();
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if (v655 < 0) {
        operator delete(__p);
      }
      if (SBYTE7(v660) < 0) {
        operator delete((void *)v659);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    char v247 = 0;
    return v247 & 1;
  }
LABEL_32:
  v638 = 0;
  v639 = 0;
  uint64_t v640 = 0;
  uint64_t v26 = (int *)sub_A11094(v4, *a2);
  BOOL v27 = (unsigned __int16 *)((char *)v26 - *v26);
  if (*v27 >= 9u)
  {
    uint64_t v28 = v27[4];
    if (v28)
    {
      int v29 = *(int *)((char *)v26 + v28 + *(unsigned int *)((char *)v26 + v28));
      if (v29)
      {
        for (unsigned int i = 0; i != v29; ++i)
        {
          unint64_t v31 = (int *)sub_A11094(v4, *a2);
          uint64_t v32 = (unsigned __int16 *)((char *)v31 - *v31);
          if (*v32 < 0x15u)
          {
            uint64_t v33 = 0;
          }
          else
          {
            uint64_t v33 = v32[10];
            if (v33) {
              uint64_t v33 = sub_B61408((unsigned int *)((char *)v31 + v33 + *(unsigned int *)((char *)v31 + v33)), i);
            }
          }
          *(void *)&v656[0] = v33;
          sub_29603C(&v638, v656);
        }
      }
    }
  }
  unint64_t v34 = 126 - 2 * __clz(((char *)v639 - (unsigned char *)v638) >> 3);
  if (v639 == v638) {
    uint64_t v35 = 0;
  }
  else {
    uint64_t v35 = v34;
  }
  sub_C247D8((uint64_t)v638, v639, v35, 1);
  int v36 = v639;
  if (v638 != v639)
  {
    std::string::size_type v37 = (unint64_t *)((char *)v638 + 8);
    do
    {
      if (v37 == v639) {
        goto LABEL_56;
      }
      int v38 = *(_DWORD *)v37;
      uint64_t v39 = *(v37++ - 1);
    }
    while (v39 != v38);
    int v40 = v37 - 2;
    if (v37 == v639)
    {
      BOOL v41 = v37 - 1;
      if (v37 - 1 == v639) {
        goto LABEL_56;
      }
      goto LABEL_55;
    }
    do
    {
      unint64_t v42 = *v37;
      if (*v37 != v39)
      {
        v40[1] = v42;
        ++v40;
        LODWORD(v39) = v42;
      }
      ++v37;
    }
    while (v37 != v36);
    BOOL v41 = v40 + 1;
    if (v40 + 1 != v639) {
LABEL_55:
    }
      v639 = v41;
  }
LABEL_56:
  sub_C1FD60(v4, *a2, (uint64_t)v656);
  if ((char *)v639 - (unsigned char *)v638 != *((void *)&v656[0] + 1) - *(void *)&v656[0])
  {
    BOOL v47 = 1;
    goto LABEL_66;
  }
  if (v638 != v639)
  {
    int v43 = (unint64_t *)((char *)v638 + 8);
    char v44 = *(int **)&v656[0];
    do
    {
      int v45 = *v44;
      v44 += 2;
      int v46 = *((_DWORD *)v43 - 2) ^ v45;
      BOOL v47 = v46 != 0;
      if (v46) {
        BOOL v48 = 1;
      }
      else {
        BOOL v48 = v43 == v639;
      }
      ++v43;
    }
    while (!v48);
LABEL_66:
    if (!*(void *)&v656[0]) {
      goto LABEL_68;
    }
    goto LABEL_67;
  }
  BOOL v47 = 0;
  if (*(void *)&v656[0])
  {
LABEL_67:
    *((void *)&v656[0] + 1) = *(void *)&v656[0];
    operator delete(*(void **)&v656[0]);
  }
LABEL_68:
  if (v47)
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v656);
      unint64_t v49 = sub_188FC78(v656, (uint64_t)"Stop pattern ", 13);
      BOOL v50 = sub_2D1500(v49, *a2);
      sub_188FC78(v50, (uint64_t)" has a set of boarding restriction groups that is not reflected by the unique boarding restriction groups associated with the stop pattern", 138);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if (v655 < 0) {
        operator delete(__p);
      }
      if (SBYTE7(v660) < 0) {
        operator delete((void *)v659);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    int v8 = 0;
  }
  unsigned int v51 = (int *)sub_A11094(v4, *a2);
  int v52 = (unsigned __int16 *)((char *)v51 - *v51);
  uint64_t v634 = v3;
  if (*v52 >= 9u)
  {
    uint64_t v53 = v52[4];
    if (v53)
    {
      int v630 = *(int *)((char *)v51 + v53 + *(unsigned int *)((char *)v51 + v53));
      if (v630)
      {
        unsigned int v54 = 0;
        do
        {
          char v55 = (int *)sub_A11094(v4, *a2);
          uint64_t v56 = (unsigned __int16 *)((char *)v55 - *v55);
          if (*v56 >= 9u && (uint64_t v57 = v56[4]) != 0) {
            char v58 = (unsigned int *)((char *)v55 + v57 + *(unsigned int *)((char *)v55 + v57));
          }
          else {
            char v58 = 0;
          }
          unint64_t v59 = __ROR8__(*(void *)sub_A10764(v58, v54), 32);
          if (*(unsigned char *)(v3 + 16))
          {
            unsigned int v60 = v59 + 3;
            unint64_t v61 = 0x100000000;
            if ((v59 & 0xFFFFFFFF00000000) != 0x100000000 || v60 >= 2)
            {
              char v63 = sub_2AB7E4(**(void **)(v3 + 4120));
              unint64_t v61 = v59 & 0xFFFFFFFF00000000;
              if ((v63 & 1) == 0) {
                goto LABEL_82;
              }
            }
            BOOL v64 = v61 != 0x100000000 || v60 >= 2;
            char v65 = !v64;
            if (!v64)
            {
LABEL_111:
              sub_A1DF34((uint64_t)v656, (void *)v3, v59, 1, 1, 0);
              int v67 = (void *)v659;
LABEL_112:
              uint64_t v68 = (void *)*((void *)&v659 + 1);
              while (v67 < v68)
              {
                if (__ROR8__(*v67, 32) == *a2) {
                  goto LABEL_82;
                }
                v67 += 2;
                *(void *)&long long v659 = v67;
                if (v67 == v68)
                {
                  uint64_t v69 = v657 + 2;
                  v657 = v69;
                  if ((unint64_t)v69 >= v658) {
                    break;
                  }
                  while (1)
                  {
                    int v67 = (void *)*v69;
                    uint64_t v68 = (void *)v69[1];
                    if ((void *)*v69 != v68) {
                      break;
                    }
                    v69 += 2;
                    v657 = v69;
                    if ((unint64_t)v69 >= v658) {
                      goto LABEL_145;
                    }
                  }
                  *(void *)&long long v659 = *v69;
                  *((void *)&v659 + 1) = v68;
                  if (v67 < v68) {
                    goto LABEL_126;
                  }
                }
                else if (v67 < v68)
                {
                  while (1)
                  {
LABEL_126:
                    if (!BYTE1(v660)
                      && (uint64_t v70 = *(void *)&v656[0],
                          uint64_t v71 = *v67,
                          uint64_t v72 = *(void *)(*(void *)&v656[0] + 4136),
                          sub_C259C0(v72 + 3896))
                      && *(void *)(v72 + 3944)
                      && (uint64_t v73 = (void *)(v70 + 4136), v74 = (void *)__ROR8__(v71, 32), !sub_A10E20(v73, SHIDWORD(v74)))
                      && (unsigned int v75 = *(void **)(*v73 + 3944), __p = v74, sub_A1E760(v75, (uint64_t *)&__p)))
                    {
                      int v67 = (void *)v659;
                      uint64_t v3 = v634;
                    }
                    else
                    {
                      if ((_BYTE)v660)
                      {
                        int v67 = (void *)v659;
                        uint64_t v3 = v634;
                        goto LABEL_112;
                      }
                      unsigned int v76 = sub_C2599C(*(void *)&v656[0] + 3896);
                      int v67 = (void *)v659;
                      if (v76 >= *(unsigned __int8 *)(v659 + 14))
                      {
                        uint64_t v3 = v634;
                        if ((_BYTE)v660) {
                          goto LABEL_112;
                        }
                        char v77 = sub_51D60((unsigned __int8 *)(*(void *)&v656[0] + 3896));
                        int v67 = (void *)v659;
                        if (v77)
                        {
                          uint64_t v3 = v634;
                          goto LABEL_112;
                        }
                        uint64_t v3 = v634;
                        if ((*(unsigned char *)(v659 + 15) & 1) == 0) {
                          goto LABEL_112;
                        }
                      }
                      else
                      {
                        uint64_t v3 = v634;
                      }
                    }
                    v67 += 2;
                    *(void *)&long long v659 = v67;
                    unint64_t v78 = *((void *)&v659 + 1);
                    if (v67 == *((void **)&v659 + 1))
                    {
                      unsigned int v79 = v657 + 2;
                      v657 = v79;
                      if ((unint64_t)v79 >= v658) {
                        goto LABEL_112;
                      }
                      while (1)
                      {
                        int v67 = (void *)*v79;
                        unint64_t v78 = v79[1];
                        if (*v79 != v78) {
                          break;
                        }
                        v79 += 2;
                        v657 = v79;
                        if ((unint64_t)v79 >= v658) {
                          goto LABEL_145;
                        }
                      }
                      *(void *)&long long v659 = *v79;
                      *((void *)&v659 + 1) = v78;
                    }
                    if ((unint64_t)v67 >= v78) {
                      goto LABEL_112;
                    }
                  }
                }
              }
LABEL_145:
              if (!sub_723EC(3u)) {
                goto LABEL_81;
              }
              sub_6BAC((uint64_t)v656);
              uint64_t v80 = sub_188FC78(v656, (uint64_t)"Stop pattern ", 13);
              unint64_t v81 = sub_2D1500(v80, *a2);
              uint64_t v82 = sub_188FC78(v81, (uint64_t)" has stop ", 10);
              unint64_t v83 = sub_2D1500(v82, v59);
              sub_188FC78(v83, (uint64_t)" (muid: ", 8);
              if ((v65 & 1) == 0)
              {
                uint64_t v84 = (int *)sub_498D5C(*(void *)(v3 + 4120) + 24, __ROR8__(v59, 32), 0, "stop");
                BOOL v85 = (unsigned __int16 *)((char *)v84 - *v84);
                if (*v85 >= 5u && (uint64_t v86 = v85[2]) != 0) {
                  uint64_t v87 = *(void *)((char *)v84 + v86);
                }
                else {
                  uint64_t v87 = 0;
                }
                unint64_t v92 = sub_398020(*(void *)(v3 + 4120) + 24, 0);
                uint64_t v93 = &v92[-*(int *)v92];
                if (*(unsigned __int16 *)v93 >= 0xBu)
                {
                  uint64_t v94 = *((unsigned __int16 *)v93 + 5);
                  if (v94)
                  {
                    if (v92[v94]) {
                      nullsub_1(v87);
                    }
                  }
                }
              }
              char v95 = (void *)std::ostream::operator<<();
              sub_188FC78(v95, (uint64_t)"), which does not reference the stop pattern", 44);
              std::stringbuf::str();
              sub_7246C((uint64_t *)&__p, 3u);
              goto LABEL_158;
            }
          }
          else
          {
            BOOL v66 = (v59 & 0xFFFFFFFF00000000) != 0x100000000 || (v59 + 3) >= 2;
            char v65 = !v66;
            if (!v66) {
              goto LABEL_111;
            }
          }
          if (sub_498D5C(*(void *)(v3 + 4120) + 24, __ROR8__(v59, 32), 1, "stop")) {
            goto LABEL_111;
          }
          if (sub_723EC(3u))
          {
            sub_6BAC((uint64_t)v656);
            unsigned int v88 = sub_188FC78(v656, (uint64_t)"Stop pattern ", 13);
            BOOL v89 = sub_2D1500(v88, *a2);
            unint64_t v90 = sub_188FC78(v89, (uint64_t)" has stop ", 10);
            uint64_t v91 = sub_2D1500(v90, v59);
            sub_188FC78(v91, (uint64_t)", which does not exist in the data.", 35);
            std::stringbuf::str();
            sub_7246C((uint64_t *)&__p, 3u);
LABEL_158:
            if (v655 < 0) {
              operator delete(__p);
            }
            *(void *)&v656[0] = v628;
            *(void *)((char *)v656 + *(void *)(v628 - 24)) = v621;
            if (SBYTE7(v660) < 0) {
              operator delete((void *)v659);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
LABEL_81:
          int v8 = 0;
LABEL_82:
          ++v54;
        }
        while (v54 != v630);
      }
    }
  }
  int v96 = (int *)sub_A11094(v4, *a2);
  int v97 = (unsigned __int16 *)((char *)v96 - *v96);
  if (*v97 >= 9u)
  {
    uint64_t v98 = v97[4];
    if (v98)
    {
      unsigned int v99 = *(int *)((char *)v96 + v98 + *(unsigned int *)((char *)v96 + v98));
      int v100 = v99 <= 1 ? 1 : v99;
      if (v99 >= 2)
      {
        unsigned int v477 = 1;
        do
        {
          unint64_t v478 = (int *)sub_A11094(v4, *a2);
          float64x2_t v479 = (unsigned __int16 *)((char *)v478 - *v478);
          if (*v479 >= 9u && (uint64_t v480 = v479[4]) != 0) {
            float64x2_t v481 = (unsigned int *)((char *)v478 + v480 + *(unsigned int *)((char *)v478 + v480));
          }
          else {
            float64x2_t v481 = 0;
          }
          uint64_t v482 = *(void *)sub_A10764(v481, v477 - 1);
          v483 = (int *)sub_A11094(v4, *a2);
          double v484 = (unsigned __int16 *)((char *)v483 - *v483);
          if (*v484 >= 9u && (uint64_t v485 = v484[4]) != 0) {
            v486 = (unsigned int *)((char *)v483 + v485 + *(unsigned int *)((char *)v483 + v485));
          }
          else {
            v486 = 0;
          }
          unint64_t v487 = __ROR8__(v482, 32);
          unint64_t v488 = __ROR8__(*(void *)sub_A10764(v486, v477), 32);
          if (!*(unsigned char *)(v3 + 16)
            || (HIDWORD(v487) == 1 ? (BOOL v489 = (v487 + 3) >= 2) : (BOOL v489 = 1),
                (!v489 || sub_2AB7E4(**(void **)(v3 + 4120)))
             && (HIDWORD(v488) == 1 && (v488 + 3) < 2 || (sub_2AB7E4(**(void **)(v3 + 4120)) & 1) != 0)))
          {
            v490 = (int *)sub_A27CE4(*(void *)(v3 + 4120) + 24, v487, 0, "routing stop");
            v491 = (unsigned __int16 *)((char *)v490 - *v490);
            if (*v491 >= 5u && (uint64_t v492 = v491[2]) != 0) {
              int v493 = *(int *)((char *)v490 + v492);
            }
            else {
              int v493 = 0;
            }
            v494 = (int *)sub_A27CE4(*(void *)(v3 + 4120) + 24, v488, 0, "routing stop");
            int v495 = (unsigned __int16 *)((char *)v494 - *v494);
            if (*v495 >= 5u)
            {
              uint64_t v496 = v495[2];
              if (v496) {
                LODWORD(v496) = *(int *)((char *)v494 + v496);
              }
              if (v493 == v496) {
                goto LABEL_653;
              }
LABEL_682:
              if (sub_723EC(3u))
              {
                sub_6BAC((uint64_t)v656);
                long long v497 = sub_188FC78(v656, (uint64_t)"Stop pattern ", 13);
                int v498 = sub_2D1500(v497, *a2);
                v499 = sub_188FC78(v498, (uint64_t)" has stops ", 11);
                v500 = sub_2D1500(v499, v487);
                sub_188FC78(v500, (uint64_t)" (muid: ", 8);
                if (HIDWORD(v487) != 1 || (v487 + 3) >= 2)
                {
                  char v501 = (int *)sub_498D5C(*(void *)(v3 + 4120) + 24, __ROR8__(v487, 32), 0, "stop");
                  v502 = (unsigned __int16 *)((char *)v501 - *v501);
                  if (*v502 >= 5u && (uint64_t v503 = v502[2]) != 0) {
                    uint64_t v504 = *(void *)((char *)v501 + v503);
                  }
                  else {
                    uint64_t v504 = 0;
                  }
                  v505 = sub_398020(*(void *)(v3 + 4120) + 24, 0);
                  v506 = &v505[-*(int *)v505];
                  if (*(unsigned __int16 *)v506 >= 0xBu)
                  {
                    uint64_t v507 = *((unsigned __int16 *)v506 + 5);
                    if (v507)
                    {
                      if (v505[v507]) {
                        nullsub_1(v504);
                      }
                    }
                  }
                }
                unint64_t v508 = (void *)std::ostream::operator<<();
                long long v509 = sub_188FC78(v508, (uint64_t)") and ", 6);
                v510 = sub_2D1500(v509, v488);
                sub_188FC78(v510, (uint64_t)" (muid: ", 8);
                if (HIDWORD(v488) != 1 || (v488 + 3) >= 2)
                {
                  int v511 = (int *)sub_498D5C(*(void *)(v3 + 4120) + 24, __ROR8__(v488, 32), 0, "stop");
                  v512 = (unsigned __int16 *)((char *)v511 - *v511);
                  if (*v512 >= 5u && (uint64_t v513 = v512[2]) != 0) {
                    uint64_t v514 = *(void *)((char *)v511 + v513);
                  }
                  else {
                    uint64_t v514 = 0;
                  }
                  v515 = sub_398020(*(void *)(v3 + 4120) + 24, 0);
                  v516 = &v515[-*(int *)v515];
                  if (*(unsigned __int16 *)v516 >= 0xBu)
                  {
                    uint64_t v517 = *((unsigned __int16 *)v516 + 5);
                    if (v517)
                    {
                      if (v515[v517]) {
                        nullsub_1(v514);
                      }
                    }
                  }
                }
                v518 = (void *)std::ostream::operator<<();
                int v519 = sub_188FC78(v518, (uint64_t)") in different connected components: ", 37);
                sub_A27CE4(*(void *)(v3 + 4120) + 24, v487, 0, "routing stop");
                std::ostream::operator<<();
                sub_188FC78(v519, (uint64_t)" and ", 5);
                sub_A27CE4(*(void *)(v3 + 4120) + 24, v488, 0, "routing stop");
                std::ostream::operator<<();
                std::stringbuf::str();
                sub_7246C((uint64_t *)&__p, 3u);
                if (v655 < 0) {
                  operator delete(__p);
                }
                *(void *)&v656[0] = v627;
                *(void *)((char *)v656 + *(void *)(v627 - 24)) = v623;
                if (SBYTE7(v660) < 0) {
                  operator delete((void *)v659);
                }
                std::streambuf::~streambuf();
                std::ostream::~ostream();
                std::ios::~ios();
              }
              int v8 = 0;
              goto LABEL_653;
            }
            if (v493) {
              goto LABEL_682;
            }
          }
LABEL_653:
          ++v477;
        }
        while (v100 != v477);
      }
    }
  }
  uint64_t v101 = (int *)sub_A11094(v4, *a2);
  unint64_t v102 = (unsigned __int16 *)((char *)v101 - *v101);
  if (*v102 >= 5u)
  {
    uint64_t v103 = v102[2];
    if (v103)
    {
      int v631 = *(int *)((char *)v101 + v103 + *(unsigned int *)((char *)v101 + v103));
      if (v631)
      {
        unsigned int v104 = 0;
        uint64_t v105 = (uint64_t **)(v3 + 4056);
        while (1)
        {
          uint64_t v106 = (int *)sub_A11094(v4, *a2);
          uint64_t v107 = (unsigned __int16 *)((char *)v106 - *v106);
          if (*v107 >= 5u && (uint64_t v108 = v107[2]) != 0) {
            uint64_t v109 = (unsigned int *)((char *)v106 + v108 + *(unsigned int *)((char *)v106 + v108));
          }
          else {
            uint64_t v109 = 0;
          }
          unint64_t v110 = __ROR8__(*(void *)sub_C0B654(v109, v104), 32);
          if (*(unsigned char *)(v3 + 16) && (sub_2AB7E4(**v105) & 1) == 0) {
            goto LABEL_174;
          }
          unint64_t v111 = __ROR8__(v110, 32);
          if (sub_8DFD1C((uint64_t)(*v105 + 3), v111, 1, "line")) {
            break;
          }
          if (sub_723EC(3u))
          {
            sub_6BAC((uint64_t)v656);
            v135 = sub_188FC78(v656, (uint64_t)"Stop pattern ", 13);
            v136 = sub_2D1500(v135, *a2);
            uint64_t v137 = sub_188FC78(v136, (uint64_t)" has line ", 10);
            int v138 = sub_2D1500(v137, v110);
            sub_188FC78(v138, (uint64_t)", which does not exist in the data.", 35);
            std::stringbuf::str();
            sub_7246C((uint64_t *)&__p, 3u);
LABEL_350:
            if (v655 < 0) {
              operator delete(__p);
            }
            *(void *)&v656[0] = v625;
            *(void *)((char *)v656 + *(void *)(v625 - 24)) = v620;
            if (SBYTE7(v660) < 0) {
              operator delete((void *)v659);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
LABEL_173:
          int v8 = 0;
LABEL_174:
          if (++v104 == v631) {
            goto LABEL_354;
          }
        }
        sub_C0B7B4((uint64_t)v656, (void *)v3, v110, 1, 0);
        unint64_t v113 = *((void *)&v659 + 1);
        unint64_t v112 = v659;
        while (v112 < v113)
        {
          if (__ROR8__(*(void *)v112, 32) == *a2 && v104 == *(unsigned __int8 *)(v112 + 8)) {
            goto LABEL_235;
          }
          v112 += 12;
          *(void *)&long long v659 = v112;
          if (v112 == v113)
          {
            unsigned int v114 = v657 + 2;
            v657 = v114;
            if ((unint64_t)v114 >= v658) {
              break;
            }
            while (1)
            {
              unint64_t v112 = *v114;
              unint64_t v113 = v114[1];
              if (*v114 != v113) {
                break;
              }
              v114 += 2;
              v657 = v114;
              if ((unint64_t)v114 >= v658) {
                goto LABEL_218;
              }
            }
            *(void *)&long long v659 = *v114;
            *((void *)&v659 + 1) = v113;
            if (v112 < v113)
            {
LABEL_197:
              do
              {
                if ((_BYTE)v660
                  || (uint64_t v115 = *(void *)&v656[0],
                      uint64_t v116 = *(void *)v112,
                      uint64_t v117 = *(void *)(*(void *)&v656[0] + 4136),
                      !sub_C259C0(v117 + 3896))
                  || !*(void *)(v117 + 3944)
                  || (v118 = (void *)(v115 + 4136), uint64_t v119 = (void *)__ROR8__(v116, 32),
                                                      sub_A10E20(v118, SHIDWORD(v119)))
                  || (int v120 = *(void **)(*v118 + 3944), __p = v119, !sub_A1E760(v120, (uint64_t *)&__p)))
                {
                  if (!*(unsigned char *)(*(void *)&v656[0] + 16)) {
                    break;
                  }
                  uint64_t v121 = *(void *)&v656[0] + 4136;
                  int v122 = *(_DWORD *)v659;
                  if (sub_A10E20((void *)(*(void *)&v656[0] + 4136), *(_DWORD *)v659))
                  {
                    if (*(void *)(*(void *)v121 + 3944)) {
                      break;
                    }
                  }
                  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                    && __cxa_guard_acquire(&qword_24F7308))
                  {
                    sub_518C8(0x3B60u, 0x7FCAu);
                    dword_24F7300 = v126 | 0x40000000;
                    __cxa_guard_release(&qword_24F7308);
                  }
                  v123 = *(uint64_t **)v121;
                  if (dword_24F7300 == v122)
                  {
                    if (v123[497]) {
                      break;
                    }
                  }
                  if (sub_2AB7E4(*v123)) {
                    break;
                  }
                }
                unint64_t v124 = *((void *)&v659 + 1);
                unint64_t v112 = v659 + 12;
                *(void *)&long long v659 = v112;
                if (v112 == *((void *)&v659 + 1))
                {
                  uint64_t v125 = v657 + 2;
                  v657 = v125;
                  if ((unint64_t)v125 >= v658) {
                    break;
                  }
                  uint64_t v3 = v634;
                  while (1)
                  {
                    unint64_t v112 = *v125;
                    unint64_t v124 = v125[1];
                    if (*v125 != v124) {
                      break;
                    }
                    v125 += 2;
                    v657 = v125;
                    if ((unint64_t)v125 >= v658) {
                      goto LABEL_218;
                    }
                  }
                  *(void *)&long long v659 = *v125;
                  *((void *)&v659 + 1) = v124;
                }
              }
              while (v112 < v124);
              unint64_t v113 = *((void *)&v659 + 1);
              unint64_t v112 = v659;
              uint64_t v3 = v634;
            }
          }
          else if (v112 < v113)
          {
            goto LABEL_197;
          }
        }
LABEL_218:
        if (sub_723EC(3u))
        {
          sub_6BAC((uint64_t)v656);
          int v127 = sub_188FC78(v656, (uint64_t)"Stop pattern ", 13);
          v128 = sub_2D1500(v127, *a2);
          uint64_t v129 = sub_188FC78(v128, (uint64_t)" has line ", 10);
          long long v130 = sub_2D1500(v129, v110);
          sub_188FC78(v130, (uint64_t)" (muid: ", 8);
          long long v131 = (int *)sub_8DFD1C((uint64_t)(*v105 + 3), v111, 0, "line");
          long long v132 = (unsigned __int16 *)((char *)v131 - *v131);
          if (*v132 >= 5u && (uint64_t v133 = v132[2]) != 0) {
            uint64_t v134 = *(void *)((char *)v131 + v133);
          }
          else {
            uint64_t v134 = 0;
          }
          v139 = sub_398020((uint64_t)(*v105 + 3), 0);
          char v140 = &v139[-*(int *)v139];
          if (*(unsigned __int16 *)v140 >= 0xBu)
          {
            uint64_t v141 = *((unsigned __int16 *)v140 + 5);
            if (v141)
            {
              if (v139[v141]) {
                nullsub_1(v134);
              }
            }
          }
          uint64_t v142 = (void *)std::ostream::operator<<();
          sub_188FC78(v142, (uint64_t)"), which does not reference the stop pattern", 44);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 3u);
          if (v655 < 0) {
            operator delete(__p);
          }
          *(void *)&v656[0] = v625;
          *(void *)((char *)v656 + *(void *)(v625 - 24)) = v620;
          if (SBYTE7(v660) < 0) {
            operator delete((void *)v659);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        int v8 = 0;
LABEL_235:
        if (v104) {
          goto LABEL_289;
        }
        uint64_t v143 = (int *)sub_8DFD1C((uint64_t)(*v105 + 3), v111, 0, "line");
        uint8x8_t v144 = (unsigned __int16 *)((char *)v143 - *v143);
        unsigned int v145 = *v144;
        if (v145 < 0x11) {
          goto LABEL_243;
        }
        if (v144[8] && *(_WORD *)((char *)v143 + v144[8]) == 101)
        {
          int v146 = 2;
          goto LABEL_244;
        }
        if (v145 >= 0x2F && (uint64_t v147 = v144[23]) != 0) {
          int v146 = *((unsigned __int8 *)v143 + v147);
        }
        else {
LABEL_243:
        }
          int v146 = 0;
LABEL_244:
        v148 = (int *)sub_A11094(v4, *a2);
        char v149 = (unsigned __int16 *)((char *)v148 - *v148);
        if (*v149 < 0xBu)
        {
          if (!v146)
          {
LABEL_265:
            v164 = (int *)sub_8DFD1C((uint64_t)(*v105 + 3), v111, 0, "line");
            v165 = (unsigned __int16 *)((char *)v164 - *v164);
            if (*v165 >= 0x31u && (uint64_t v166 = v165[24]) != 0) {
              int v167 = *((unsigned __int8 *)v164 + v166);
            }
            else {
              int v167 = 2;
            }
            char v168 = (int *)sub_A11094(v4, *a2);
            uint64_t v169 = (unsigned __int16 *)((char *)v168 - *v168);
            if (*v169 >= 0x19u && (uint64_t v170 = v169[12]) != 0)
            {
              if (v167 == *((unsigned __int8 *)v168 + v170)) {
                goto LABEL_289;
              }
            }
            else if (v167 == 2)
            {
              goto LABEL_289;
            }
            if (sub_723EC(1u))
            {
              sub_6BAC((uint64_t)v656);
              uint64_t v171 = sub_188FC78(v656, (uint64_t)"Stop pattern ", 13);
              v172 = sub_2D1500(v171, *a2);
              int v173 = sub_188FC78(v172, (uint64_t)" has line ", 10);
              uint64_t v174 = sub_2D1500(v173, v110);
              sub_188FC78(v174, (uint64_t)" (muid: ", 8);
              double v175 = (int *)sub_8DFD1C((uint64_t)(*v105 + 3), v111, 0, "line");
              uint64_t v176 = (unsigned __int16 *)((char *)v175 - *v175);
              if (*v176 >= 5u && (uint64_t v177 = v176[2]) != 0) {
                uint64_t v178 = *(void *)((char *)v175 + v177);
              }
              else {
                uint64_t v178 = 0;
              }
              uint64_t v179 = sub_398020((uint64_t)(*v105 + 3), 0);
              uint64_t v180 = &v179[-*(int *)v179];
              if (*(unsigned __int16 *)v180 >= 0xBu)
              {
                uint64_t v181 = *((unsigned __int16 *)v180 + 5);
                if (v181)
                {
                  if (v179[v181]) {
                    nullsub_1(v178);
                  }
                }
              }
              long long v182 = (void *)std::ostream::operator<<();
              sub_188FC78(v182, (uint64_t)") with fare estimate of ", 24);
              sub_8DFD1C((uint64_t)(*v105 + 3), v111, 0, "line");
              long long v183 = (void *)std::ostream::operator<<();
              sub_188FC78(v183, (uint64_t)", which does not match the stop pattern: ", 41);
              sub_A11094(v4, *a2);
              std::ostream::operator<<();
              std::stringbuf::str();
              sub_7246C((uint64_t *)&__p, 1u);
              if (v655 < 0) {
                operator delete(__p);
              }
              *(void *)&v656[0] = v625;
              *(void *)((char *)v656 + *(void *)(v625 - 24)) = v620;
              if (SBYTE7(v660) < 0) {
                operator delete((void *)v659);
              }
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              std::ios::~ios();
            }
            int v8 = 0;
LABEL_289:
            int v184 = sub_C1FE3C(v105, v110);
            uint64_t v185 = (int *)sub_A11094(v4, *a2);
            uint64_t v186 = (unsigned __int16 *)((char *)v185 - *v185);
            if (*v186 >= 0xDu && (uint64_t v187 = v186[6]) != 0)
            {
              if (v184 != *((unsigned __int8 *)v185 + v187)) {
                goto LABEL_292;
              }
            }
            else if (v184 != 1)
            {
LABEL_292:
              if (sub_723EC(3u))
              {
                sub_6BAC((uint64_t)v656);
                uint64_t v188 = sub_188FC78(v656, (uint64_t)"Stop pattern ", 13);
                int v189 = sub_2D1500(v188, *a2);
                int v190 = sub_188FC78(v189, (uint64_t)" has line ", 10);
                char v191 = sub_2D1500(v190, v110);
                sub_188FC78(v191, (uint64_t)" (muid: ", 8);
                long long v192 = (int *)sub_8DFD1C((uint64_t)(*v105 + 3), v111, 0, "line");
                v193 = (unsigned __int16 *)((char *)v192 - *v192);
                if (*v193 >= 5u && (uint64_t v194 = v193[2]) != 0) {
                  uint64_t v195 = *(void *)((char *)v192 + v194);
                }
                else {
                  uint64_t v195 = 0;
                }
                long long v196 = sub_398020((uint64_t)(*v105 + 3), 0);
                long long v197 = &v196[-*(int *)v196];
                if (*(unsigned __int16 *)v197 >= 0xBu)
                {
                  uint64_t v198 = *((unsigned __int16 *)v197 + 5);
                  if (v198)
                  {
                    if (v196[v198]) {
                      nullsub_1(v195);
                    }
                  }
                }
                long long v199 = (void *)std::ostream::operator<<();
                sub_188FC78(v199, (uint64_t)") with minimum required market support version of ", 50);
                sub_C1FE3C(v105, v110);
                long long v200 = (void *)std::ostream::operator<<();
                sub_188FC78(v200, (uint64_t)", which does not match the stop pattern: ", 41);
                sub_A11094(v4, *a2);
                std::ostream::operator<<();
                std::stringbuf::str();
                sub_7246C((uint64_t *)&__p, 3u);
                if (v655 < 0) {
                  operator delete(__p);
                }
                *(void *)&v656[0] = v625;
                *(void *)((char *)v656 + *(void *)(v625 - 24)) = v620;
                if (SBYTE7(v660) < 0) {
                  operator delete((void *)v659);
                }
                std::streambuf::~streambuf();
                std::ostream::~ostream();
                std::ios::~ios();
              }
              int v8 = 0;
              if (v104) {
                goto LABEL_334;
              }
              goto LABEL_310;
            }
            if (v104) {
              goto LABEL_334;
            }
LABEL_310:
            long long v201 = (int *)sub_8DFD1C((uint64_t)(*v105 + 3), v111, 0, "line");
            long long v202 = (unsigned __int16 *)((char *)v201 - *v201);
            if (*v202 >= 0x11u && (uint64_t v203 = v202[8]) != 0) {
              int v204 = *(unsigned __int16 *)((char *)v201 + v203);
            }
            else {
              int v204 = 0x7FFF;
            }
            v205 = (int *)sub_A11094(v4, *a2);
            v206 = (unsigned __int16 *)((char *)v205 - *v205);
            if (*v206 >= 0xFu && (uint64_t v207 = v206[7]) != 0)
            {
              if (v204 == *(unsigned __int16 *)((char *)v205 + v207)) {
                goto LABEL_334;
              }
            }
            else if (v204 == 0x7FFF)
            {
              goto LABEL_334;
            }
            if (sub_723EC(3u))
            {
              sub_6BAC((uint64_t)v656);
              int v208 = sub_188FC78(v656, (uint64_t)"Stop pattern ", 13);
              v209 = sub_2D1500(v208, *a2);
              v210 = sub_188FC78(v209, (uint64_t)" has line ", 10);
              uint64_t v211 = sub_2D1500(v210, v110);
              sub_188FC78(v211, (uint64_t)" (muid: ", 8);
              v212 = (int *)sub_8DFD1C((uint64_t)(*v105 + 3), v111, 0, "line");
              uint64_t v213 = (unsigned __int16 *)((char *)v212 - *v212);
              if (*v213 >= 5u && (uint64_t v214 = v213[2]) != 0) {
                uint64_t v215 = *(void *)((char *)v212 + v214);
              }
              else {
                uint64_t v215 = 0;
              }
              v216 = sub_398020((uint64_t)(*v105 + 3), 0);
              uint64_t v217 = &v216[-*(int *)v216];
              if (*(unsigned __int16 *)v217 >= 0xBu)
              {
                uint64_t v218 = *((unsigned __int16 *)v217 + 5);
                if (v218)
                {
                  if (v216[v218]) {
                    nullsub_1(v215);
                  }
                }
              }
              uint64_t v219 = (void *)std::ostream::operator<<();
              sub_188FC78(v219, (uint64_t)") with transit type of ", 23);
              sub_8DFD1C((uint64_t)(*v105 + 3), v111, 0, "line");
              uint64_t v220 = (void *)std::ostream::operator<<();
              sub_188FC78(v220, (uint64_t)", which does not match the stop pattern: ", 41);
              sub_A11094(v4, *a2);
              std::ostream::operator<<();
              std::stringbuf::str();
              sub_7246C((uint64_t *)&__p, 3u);
              if (v655 < 0) {
                operator delete(__p);
              }
              *(void *)&v656[0] = v625;
              *(void *)((char *)v656 + *(void *)(v625 - 24)) = v620;
              if (SBYTE7(v660) < 0) {
                operator delete((void *)v659);
              }
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              std::ios::~ios();
            }
            int v8 = 0;
LABEL_334:
            uint64_t v221 = (int *)sub_8DFD1C((uint64_t)(*v105 + 3), v111, 0, "line");
            uint64_t v222 = (unsigned __int16 *)((char *)v221 - *v221);
            if (*v222 < 0x23u) {
              goto LABEL_174;
            }
            uint64_t v223 = v222[17];
            if (!v223) {
              goto LABEL_174;
            }
            if (!*((unsigned char *)v221 + v223)) {
              goto LABEL_174;
            }
            v224 = (int *)sub_A11094(v4, *a2);
            unint64_t v225 = (unsigned __int16 *)((char *)v224 - *v224);
            if (*v225 >= 0x13u)
            {
              uint64_t v226 = v225[9];
              if (v226)
              {
                if ((*((unsigned char *)v224 + v226) & 2) != 0) {
                  goto LABEL_174;
                }
              }
            }
            if (sub_723EC(3u))
            {
              sub_6BAC((uint64_t)v656);
              uint64_t v227 = sub_188FC78(v656, (uint64_t)"Stop pattern ", 13);
              uint64_t v228 = sub_2D1500(v227, *a2);
              long double v229 = sub_188FC78(v228, (uint64_t)" has line ", 10);
              unint64_t v230 = sub_2D1500(v229, v110);
              sub_188FC78(v230, (uint64_t)" (muid: ", 8);
              long double v231 = (int *)sub_8DFD1C((uint64_t)(*v105 + 3), v111, 0, "line");
              long double v232 = (unsigned __int16 *)((char *)v231 - *v231);
              if (*v232 >= 5u && (uint64_t v233 = v232[2]) != 0) {
                uint64_t v234 = *(void *)((char *)v231 + v233);
              }
              else {
                uint64_t v234 = 0;
              }
              int64x2_t v235 = sub_398020((uint64_t)(*v105 + 3), 0);
              long double v236 = &v235[-*(int *)v235];
              if (*(unsigned __int16 *)v236 >= 0xBu)
              {
                uint64_t v237 = *((unsigned __int16 *)v236 + 5);
                if (v237)
                {
                  if (v235[v237]) {
                    nullsub_1(v234);
                  }
                }
              }
              double v238 = (void *)std::ostream::operator<<();
              sub_188FC78(v238, (uint64_t)") with preflight flag of ", 25);
              sub_8DFD1C((uint64_t)(*v105 + 3), v111, 0, "line");
              long double v239 = (void *)std::ostream::operator<<();
              sub_188FC78(v239, (uint64_t)", which does not match the stop pattern: ", 41);
              sub_A11094(v4, *a2);
              std::ostream::operator<<();
              std::stringbuf::str();
              sub_7246C((uint64_t *)&__p, 3u);
              goto LABEL_350;
            }
            goto LABEL_173;
          }
        }
        else
        {
          uint64_t v150 = v149[5];
          if (v150) {
            LODWORD(v150) = *((unsigned __int8 *)v148 + v150);
          }
          if (v146 == v150) {
            goto LABEL_265;
          }
        }
        if (sub_723EC(3u))
        {
          sub_6BAC((uint64_t)v656);
          int v151 = sub_188FC78(v656, (uint64_t)"Stop pattern ", 13);
          BOOL v152 = sub_2D1500(v151, *a2);
          uint64_t v153 = sub_188FC78(v152, (uint64_t)" has line ", 10);
          uint64_t v154 = sub_2D1500(v153, v110);
          sub_188FC78(v154, (uint64_t)" (muid: ", 8);
          v155 = (int *)sub_8DFD1C((uint64_t)(*v105 + 3), v111, 0, "line");
          unsigned __int16 v156 = (unsigned __int16 *)((char *)v155 - *v155);
          if (*v156 >= 5u && (uint64_t v157 = v156[2]) != 0) {
            uint64_t v158 = *(void *)((char *)v155 + v157);
          }
          else {
            uint64_t v158 = 0;
          }
          uint64_t v159 = sub_398020((uint64_t)(*v105 + 3), 0);
          uint64_t v160 = &v159[-*(int *)v159];
          if (*(unsigned __int16 *)v160 >= 0xBu)
          {
            uint64_t v161 = *((unsigned __int16 *)v160 + 5);
            if (v161)
            {
              if (v159[v161]) {
                nullsub_1(v158);
              }
            }
          }
          uint64_t v162 = (void *)std::ostream::operator<<();
          sub_188FC78(v162, (uint64_t)") with routing preference of ", 29);
          sub_8DFD1C((uint64_t)(*v105 + 3), v111, 0, "line");
          uint64_t v163 = (void *)std::ostream::operator<<();
          sub_188FC78(v163, (uint64_t)", which does not match the stop pattern: ", 41);
          sub_A11094(v4, *a2);
          std::ostream::operator<<();
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 3u);
          if (v655 < 0) {
            operator delete(__p);
          }
          *(void *)&v656[0] = v625;
          *(void *)((char *)v656 + *(void *)(v625 - 24)) = v620;
          if (SBYTE7(v660) < 0) {
            operator delete((void *)v659);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        int v8 = 0;
        goto LABEL_265;
      }
    }
  }
LABEL_354:
  if ((v8 & sub_C1FF3C(v3, a2)) == 1)
  {
    long double v240 = (int *)sub_A11094(v4, *a2);
    long double v241 = (unsigned __int16 *)((char *)v240 - *v240);
    if (*v241 >= 0x13u && (uint64_t v242 = v241[9]) != 0 && (*((unsigned char *)v240 + v242) & 1) != 0)
    {
      char v520 = (int *)sub_A11094(v4, *a2);
      long long v521 = (unsigned __int16 *)((char *)v520 - *v520);
      if (*v521 >= 7u
        && (uint64_t v522 = v521[3]) != 0
        && (uint64_t v523 = *(unsigned int *)((char *)v520 + v522 + *(unsigned int *)((char *)v520 + v522)), v523))
      {
        uint64_t v524 = 0;
        char v247 = 1;
        do
        {
          sub_A1DD94(v4, *a2, v524, (uint64_t)&__p);
          int v526 = __p;
          if (v654 - (unsigned char *)__p == 12) {
            goto LABEL_720;
          }
          if (sub_723EC(3u))
          {
            sub_6BAC((uint64_t)v656);
            v527 = sub_188FC78(v656, (uint64_t)"Frequency trip at index ", 24);
            std::ostream::operator<<();
            v528 = sub_188FC78(v527, (uint64_t)" on stop pattern ", 17);
            v529 = sub_2D1500(v528, *a2);
            sub_188FC78(v529, (uint64_t)" has a trip sequence size of ", 29);
            v530 = (void *)std::ostream::operator<<();
            sub_188FC78(v530, (uint64_t)", which must be 1", 17);
            std::stringbuf::str();
            sub_7246C((uint64_t *)&v650, 3u);
            if (v652 < 0) {
              operator delete(v650);
            }
            *(void *)&v656[0] = v636;
            *(void *)((char *)v656 + *(void *)(v636 - 24)) = v525;
            if (SBYTE7(v660) < 0) {
              operator delete((void *)v659);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
          char v247 = 0;
          int v526 = __p;
          if (__p != v654)
          {
LABEL_720:
            v531 = (int *)sub_369F8C(*(void *)(v3 + 4184) + 24, __ROR8__(*v526, 32), 0, "trip");
            v532 = (unsigned __int16 *)((char *)v531 - *v531);
            if (*v532 < 0x13u
              || (uint64_t v533 = v532[9]) == 0
              || !*(int *)((char *)v531 + v533 + *(unsigned int *)((char *)v531 + v533)))
            {
              if (sub_723EC(3u))
              {
                sub_6BAC((uint64_t)v656);
                v534 = sub_188FC78(v656, (uint64_t)"Frequency trip at index ", 24);
                std::ostream::operator<<();
                v535 = sub_188FC78(v534, (uint64_t)" on stop pattern ", 17);
                v536 = sub_2D1500(v535, *a2);
                sub_188FC78(v536, (uint64_t)" has no associated frequencies.", 31);
                std::stringbuf::str();
                sub_7246C((uint64_t *)&v650, 3u);
                if (v652 < 0) {
                  operator delete(v650);
                }
                *(void *)&v656[0] = v636;
                *(void *)((char *)v656 + *(void *)(v636 - 24)) = v525;
                if (SBYTE7(v660) < 0) {
                  operator delete((void *)v659);
                }
                std::streambuf::~streambuf();
                std::ostream::~ostream();
                std::ios::~ios();
              }
              char v247 = 0;
            }
            int v526 = __p;
          }
          if (v526)
          {
            v654 = v526;
            operator delete(v526);
          }
          ++v524;
        }
        while (v523 != v524);
      }
      else
      {
        char v247 = 1;
      }
      v539 = (int *)sub_A11094(v4, *a2);
      v540 = (unsigned __int16 *)((char *)v539 - *v539);
      if (*v540 >= 7u)
      {
        uint64_t v541 = v540[3];
        if (v541)
        {
          uint64_t v637 = *(unsigned int *)((char *)v539 + v541 + *(unsigned int *)((char *)v539 + v541));
          if (v637 >= 2)
          {
            v542 = (uint64_t *)(v3 + 4184);
            for (uint64_t j = 1; j != v637; ++j)
            {
              sub_A1DD94(v4, *a2, j, (uint64_t)&__p);
              v544 = __p;
              if (__p != v654)
              {
                uint64_t v545 = *(void *)__p;
                int v649 = *((_DWORD *)__p + 2);
                uint64_t v648 = v545;
                v546 = (int *)sub_369F8C(*v542 + 24, __ROR8__(v545, 32), 0, "trip");
                v547 = (unsigned __int16 *)((char *)v546 - *v546);
                if (*v547 >= 0x13u)
                {
                  uint64_t v548 = v547[9];
                  if (v548)
                  {
                    if (*(int *)((char *)v546 + v548 + *(unsigned int *)((char *)v546 + v548)))
                    {
                      sub_A1DD94(v4, *a2, j - 1, (uint64_t)&v650);
                      v549 = v650;
                      if (v650 != v651)
                      {
                        uint64_t v550 = *(void *)v650;
                        int v647 = *((_DWORD *)v650 + 2);
                        uint64_t v646 = v550;
                        v551 = (int *)sub_369F8C(*v542 + 24, __ROR8__(v550, 32), 0, "trip");
                        v552 = (unsigned __int16 *)((char *)v551 - *v551);
                        if (*v552 >= 0x13u)
                        {
                          uint64_t v553 = v552[9];
                          if (v553)
                          {
                            int v554 = *(int *)((char *)v551 + v553 + *(unsigned int *)((char *)v551 + v553));
                            if (v554)
                            {
                              int v645 = sub_C23EF4(v542, (unsigned int *)&v646, v554 - 1);
                              int v644 = sub_C24090(v542, (unsigned int *)&v648, 0);
                              if (v645 > v644)
                              {
                                if (sub_723EC(3u))
                                {
                                  sub_6BAC((uint64_t)v656);
                                  v555 = sub_188FC78(v656, (uint64_t)"On stop pattern ", 16);
                                  v556 = sub_2D1500(v555, *a2);
                                  sub_188FC78(v556, (uint64_t)" frequency trip ", 16);
                                  v557 = (void *)std::ostream::operator<<();
                                  v558 = sub_188FC78(v557, (uint64_t)" has frequency end time of ", 27);
                                  v559 = (void *)sub_266E4((uint64_t)v558);
                                  v560 = sub_188FC78(v559, (uint64_t)", which is after the frequency start time ", 42);
                                  v561 = (void *)sub_266E4((uint64_t)v560);
                                  sub_188FC78(v561, (uint64_t)" of frequency trip ", 19);
                                  std::ostream::operator<<();
                                  std::stringbuf::str();
                                  sub_7246C((uint64_t *)v642, 3u);
                                  if (v643 < 0) {
                                    operator delete(v642[0]);
                                  }
                                  *(void *)&v656[0] = v624;
                                  *(void *)((char *)v656 + *(void *)(v624 - 24)) = v619;
                                  if (SBYTE7(v660) < 0) {
                                    operator delete((void *)v659);
                                  }
                                  std::streambuf::~streambuf();
                                  std::ostream::~ostream();
                                  std::ios::~ios();
                                }
                                char v247 = 0;
                              }
                              v562 = (int *)sub_A11094(v4, *a2);
                              v563 = (unsigned __int16 *)((char *)v562 - *v562);
                              v633 = v542;
                              if (*v563 >= 9u)
                              {
                                uint64_t v564 = v563[4];
                                if (v564)
                                {
                                  uint64_t v629 = *(unsigned int *)((char *)v562 + v564 + *(unsigned int *)((char *)v562 + v564));
                                  if (v629 >= 2)
                                  {
                                    for (uint64_t k = 1; k != v629; ++k)
                                    {
                                      int v566 = sub_C2422C(v633, (unsigned int *)&v646, k);
                                      int v567 = sub_C24450(v633, (unsigned int *)&v646, k);
                                      int v568 = sub_C2422C(v633, (unsigned int *)&v648, k);
                                      int v569 = sub_C24450(v633, (unsigned int *)&v648, k);
                                      if (v566 < 0) {
                                        char v570 = -5;
                                      }
                                      else {
                                        char v570 = 5;
                                      }
                                      unsigned int v571 = v566 / 10
                                           + (((103 * (char)(v570 + v566 % 10)) >> 15) & 1)
                                           + ((103 * (char)(v570 + v566 % 10)) >> 10);
                                      if (v568 < 0) {
                                        char v572 = -5;
                                      }
                                      else {
                                        char v572 = 5;
                                      }
                                      unsigned int v573 = v568 / 10
                                           + (((103 * (char)(v572 + v568 % 10)) >> 15) & 1)
                                           + ((103 * (char)(v572 + v568 % 10)) >> 10);
                                      if ((int)(v645 + v571) > (int)(v644 + v573))
                                      {
                                        if (sub_723EC(3u))
                                        {
                                          sub_6BAC((uint64_t)v656);
                                          v574 = sub_188FC78(v656, (uint64_t)"On stop pattern ", 16);
                                          v575 = sub_2D1500(v574, *a2);
                                          sub_188FC78(v575, (uint64_t)" the last frequency trip manifestation at trip index ", 53);
                                          v576 = (void *)std::ostream::operator<<();
                                          v577 = sub_188FC78(v576, (uint64_t)" overtakes the first frequency trip manifestation at trip index ", 64);
                                          std::ostream::operator<<();
                                          v578 = sub_188FC78(v577, (uint64_t)" in terms of static relative arrival time: ", 43);
                                          LODWORD(v642[0]) = v645 + v571;
                                          v579 = (void *)sub_266E4((uint64_t)v578);
                                          v580 = sub_188FC78(v579, (uint64_t)" > ", 3);
                                          int v641 = v644 + v573;
                                          sub_266E4((uint64_t)v580);
                                          std::stringbuf::str();
                                          sub_7246C((uint64_t *)v642, 3u);
                                          if (v643 < 0) {
                                            operator delete(v642[0]);
                                          }
                                          *(void *)&v656[0] = v624;
                                          *(void *)((char *)v656 + *(void *)(v624 - 24)) = v619;
                                          if (SBYTE7(v660) < 0) {
                                            operator delete((void *)v659);
                                          }
                                          std::streambuf::~streambuf();
                                          std::ostream::~ostream();
                                          std::ios::~ios();
                                        }
                                        char v247 = 0;
                                      }
                                      if (v567 < 0) {
                                        char v581 = -5;
                                      }
                                      else {
                                        char v581 = 5;
                                      }
                                      unsigned int v582 = v567 / 10
                                           + (((103 * (char)(v581 + v567 % 10)) >> 15) & 1)
                                           + ((103 * (char)(v581 + v567 % 10)) >> 10);
                                      if (v569 < 0) {
                                        char v583 = -5;
                                      }
                                      else {
                                        char v583 = 5;
                                      }
                                      unsigned int v584 = v569 / 10
                                           + (((103 * (char)(v583 + v569 % 10)) >> 15) & 1)
                                           + ((103 * (char)(v583 + v569 % 10)) >> 10);
                                      if ((int)(v645 + v582) > (int)(v644 + v584))
                                      {
                                        if (sub_723EC(3u))
                                        {
                                          sub_6BAC((uint64_t)v656);
                                          v585 = sub_188FC78(v656, (uint64_t)"On stop pattern ", 16);
                                          v586 = sub_2D1500(v585, *a2);
                                          sub_188FC78(v586, (uint64_t)" the last frequency trip manifestation at trip index ", 53);
                                          v587 = (void *)std::ostream::operator<<();
                                          v588 = sub_188FC78(v587, (uint64_t)" is overtaken by the first frequency trip manifestation at trip index ", 70);
                                          std::ostream::operator<<();
                                          v589 = sub_188FC78(v588, (uint64_t)" in terms of static relative departure time: ", 45);
                                          LODWORD(v642[0]) = v645 + v582;
                                          v590 = (void *)sub_266E4((uint64_t)v589);
                                          v591 = sub_188FC78(v590, (uint64_t)" > ", 3);
                                          int v641 = v644 + v584;
                                          sub_266E4((uint64_t)v591);
                                          std::stringbuf::str();
                                          sub_7246C((uint64_t *)v642, 3u);
                                          if (v643 < 0) {
                                            operator delete(v642[0]);
                                          }
                                          *(void *)&v656[0] = v624;
                                          *(void *)((char *)v656 + *(void *)(v624 - 24)) = v619;
                                          if (SBYTE7(v660) < 0) {
                                            operator delete((void *)v659);
                                          }
                                          std::streambuf::~streambuf();
                                          std::ostream::~ostream();
                                          std::ios::~ios();
                                        }
                                        char v247 = 0;
                                      }
                                    }
                                  }
                                }
                              }
                              v542 = v633;
                            }
                          }
                        }
                        v549 = v650;
                      }
                      if (v549)
                      {
                        v651 = v549;
                        operator delete(v549);
                      }
                    }
                  }
                }
                v544 = __p;
              }
              if (v544)
              {
                v654 = v544;
                operator delete(v544);
              }
            }
          }
        }
      }
    }
    else
    {
      v243 = (int *)sub_A11094(v4, *a2);
      v244 = (unsigned __int16 *)((char *)v243 - *v243);
      if (*v244 >= 7u)
      {
        uint64_t v245 = v244[3];
        if (v245)
        {
          uint64_t v616 = *(unsigned int *)((char *)v243 + v245 + *(unsigned int *)((char *)v243 + v245));
          if (v616)
          {
            uint64_t v246 = 0;
            char v247 = 1;
            while (1)
            {
              if ((sub_C164C8(v4, *a2, v246) & 1) == 0)
              {
                uint64_t v248 = (int *)sub_A11094(v4, *a2);
                v249 = (unsigned __int16 *)((char *)v248 - *v248);
                if (*v249 >= 9u)
                {
                  uint64_t v250 = v249[4];
                  if (v250)
                  {
                    int v632 = *(int *)((char *)v248 + v250 + *(unsigned int *)((char *)v248 + v250));
                    if (v632) {
                      break;
                    }
                  }
                }
              }
LABEL_362:
              if (++v246 == v616) {
                goto LABEL_643;
              }
            }
            int v251 = 0;
            unsigned int v635 = v246 - 1;
            while (1)
            {
              if (!v251) {
                goto LABEL_454;
              }
              unint64_t v252 = *a2;
              unint64_t v253 = HIDWORD(*a2);
              if (sub_A10E20(v4, HIDWORD(*a2))) {
                break;
              }
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_24F7308))
              {
                sub_518C8(0x3B60u, 0x7FCAu);
                dword_24F7300 = v463 | 0x40000000;
                __cxa_guard_release(&qword_24F7308);
              }
              uint64_t v255 = *v4;
              if (dword_24F7300 == v253)
              {
                long double v254 = *(unsigned int **)(*(void *)(v255 + 3976) + 72);
                if (!v254)
                {
                  exception = __cxa_allocate_exception(0x40uLL);
                  sub_5E5C(v656, "Realtime stop pattern quad data requested on nullptr buffer");
                  v611 = (void *)sub_2F404((uint64_t)exception, v656);
                }
LABEL_378:
                int v256 = (char *)v254 + *v254;
                v257 = &v256[-*(int *)v256];
                if (*(unsigned __int16 *)v257 < 5u) {
                  goto LABEL_382;
                }
                goto LABEL_379;
              }
              int v256 = sub_A10B80(v255 + 24, v252, 0);
              v257 = &v256[-*(int *)v256];
              if (*(unsigned __int16 *)v257 < 5u)
              {
LABEL_382:
                uint64_t v258 = 0;
                goto LABEL_383;
              }
LABEL_379:
              uint64_t v258 = *((unsigned __int16 *)v257 + 2);
              if (v258) {
                v258 += (uint64_t)&v256[*(unsigned int *)&v256[v258]];
              }
LABEL_383:
              unint64_t v259 = (int *)(v258 + 4 * v252 + 4 + *(unsigned int *)(v258 + 4 * v252 + 4));
              uint64_t v260 = (unsigned __int16 *)((char *)v259 - *v259);
              if (*v260 >= 7u && (uint64_t v261 = v260[3]) != 0) {
                v262 = (unsigned int *)((char *)v259 + v261 + *(unsigned int *)((char *)v259 + v261));
              }
              else {
                v262 = 0;
              }
              v263 = (int *)sub_A1FDE4(v262, v246);
              uint64_t v264 = &v256[-*(int *)v256];
              if (*(unsigned __int16 *)v264 < 7u)
              {
                long long v265 = 0;
              }
              else
              {
                long long v265 = (unsigned int *)*((unsigned __int16 *)v264 + 3);
                if (v265) {
                  long long v265 = (unsigned int *)((char *)v265 + (void)v256 + *(unsigned int *)((char *)v265 + (void)v256));
                }
              }
              int v266 = *v263;
              int v267 = *(_DWORD *)(sub_A200AC(v265, v251 + v263[1] - 1) + 4);
              unint64_t v268 = *a2;
              unint64_t v269 = HIDWORD(*a2);
              if (sub_A10E20(v4, HIDWORD(*a2)))
              {
                int v270 = *(unsigned int **)(*(void *)(*v4 + 3944) + 72);
                if (!v270)
                {
                  v598 = __cxa_allocate_exception(0x40uLL);
                  sub_5E5C(v656, "Incident stop pattern quad data requested on nullptr buffer");
                  v599 = (void *)sub_2F404((uint64_t)v598, v656);
                }
                goto LABEL_397;
              }
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_24F7308))
              {
                sub_518C8(0x3B60u, 0x7FCAu);
                dword_24F7300 = v464 | 0x40000000;
                __cxa_guard_release(&qword_24F7308);
              }
              uint64_t v271 = *v4;
              if (dword_24F7300 == v269)
              {
                int v270 = *(unsigned int **)(*(void *)(v271 + 3976) + 72);
                if (!v270)
                {
                  v614 = __cxa_allocate_exception(0x40uLL);
                  sub_5E5C(v656, "Realtime stop pattern quad data requested on nullptr buffer");
                  v615 = (void *)sub_2F404((uint64_t)v614, v656);
                }
LABEL_397:
                v272 = (char *)v270 + *v270;
                v273 = &v272[-*(int *)v272];
                if (*(unsigned __int16 *)v273 >= 5u) {
                  goto LABEL_398;
                }
                goto LABEL_401;
              }
              v272 = sub_A10B80(v271 + 24, v268, 0);
              v273 = &v272[-*(int *)v272];
              if (*(unsigned __int16 *)v273 >= 5u)
              {
LABEL_398:
                uint64_t v274 = *((unsigned __int16 *)v273 + 2);
                if (v274) {
                  v274 += (uint64_t)&v272[*(unsigned int *)&v272[v274]];
                }
                goto LABEL_402;
              }
LABEL_401:
              uint64_t v274 = 0;
LABEL_402:
              long long v275 = (int *)(v274 + 4 * v268 + 4 + *(unsigned int *)(v274 + 4 * v268 + 4));
              long long v276 = (unsigned __int16 *)((char *)v275 - *v275);
              if (*v276 >= 7u && (uint64_t v277 = v276[3]) != 0) {
                v278 = (unsigned int *)((char *)v275 + v277 + *(unsigned int *)((char *)v275 + v277));
              }
              else {
                v278 = 0;
              }
              v279 = (int *)sub_A1FDE4(v278, v246);
              v280 = &v272[-*(int *)v272];
              if (*(unsigned __int16 *)v280 < 7u)
              {
                v281 = 0;
              }
              else
              {
                v281 = (unsigned int *)*((unsigned __int16 *)v280 + 3);
                if (v281) {
                  v281 = (unsigned int *)((char *)v281 + (void)v272 + *(unsigned int *)((char *)v281 + (void)v272));
                }
              }
              int v282 = *v279;
              if (v267 + v266 > *(_DWORD *)sub_A200AC(v281, v251 + v279[1]) + v282)
              {
                if (sub_723EC(3u))
                {
                  *(void *)&v656[0] = v626;
                  *(void *)((char *)v656 + *(void *)(v626 - 24)) = v622;
                  v283 = (std::ios_base *)((char *)v656 + *(void *)(*(void *)&v656[0] - 24));
                  std::ios_base::init(v283, (char *)v656 + 8);
                  v283[1].__vftable = 0;
                  v283[1].__fmtflags_ = -1;
                  std::streambuf::basic_streambuf();
                  long long v659 = 0u;
                  long long v660 = 0u;
                  int v661 = 16;
                  v284 = sub_188FC78(v656, (uint64_t)"On stop pattern ", 16);
                  unint64_t v285 = sub_2D1500(v284, *a2);
                  v286 = sub_188FC78(v285, (uint64_t)", trip at index ", 16);
                  std::ostream::operator<<();
                  unint64_t v287 = sub_188FC78(v286, (uint64_t)" travels into the past between stop indices ", 44);
                  std::ostream::operator<<();
                  unint64_t v288 = sub_188FC78(v287, (uint64_t)" and ", 5);
                  std::ostream::operator<<();
                  sub_188FC78(v288, (uint64_t)"  frequency trips ", 18);
                  uint8x8_t v289 = (void *)std::ostream::operator<<();
                  unint64_t v290 = sub_188FC78(v289, (uint64_t)": ", 2);
                  unint64_t v291 = *a2;
                  unint64_t v292 = HIDWORD(*a2);
                  if (sub_A10E20(v4, HIDWORD(*a2)))
                  {
                    v293 = sub_A10A28(*(void *)(*v4 + 3944));
                  }
                  else
                  {
                    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                      && __cxa_guard_acquire(&qword_24F7308))
                    {
                      sub_518C8(0x3B60u, 0x7FCAu);
                      dword_24F7300 = v469 | 0x40000000;
                      __cxa_guard_release(&qword_24F7308);
                    }
                    uint64_t v294 = *v4;
                    if (dword_24F7300 == v292) {
                      v293 = sub_A10AD4(*(void *)(v294 + 3976));
                    }
                    else {
                      v293 = sub_A10B80(v294 + 24, v291, 0);
                    }
                  }
                  v295 = (int *)v293;
                  unint64_t v296 = &v293[-*(int *)v293];
                  if (*(unsigned __int16 *)v296 < 5u)
                  {
                    uint64_t v297 = 0;
                  }
                  else
                  {
                    uint64_t v297 = *((unsigned __int16 *)v296 + 2);
                    if (v297) {
                      v297 += (uint64_t)&v293[*(unsigned int *)&v293[v297]];
                    }
                  }
                  v298 = (int *)(v297
                               + 4 * v291
                               + 4
                               + *(unsigned int *)(v297 + 4 * v291 + 4));
                  v299 = (unsigned __int16 *)((char *)v298 - *v298);
                  if (*v299 >= 7u && (uint64_t v300 = v299[3]) != 0) {
                    v301 = (unsigned int *)((char *)v298 + v300 + *(unsigned int *)((char *)v298 + v300));
                  }
                  else {
                    v301 = 0;
                  }
                  uint64_t v302 = (int *)sub_A1FDE4(v301, v246);
                  long long v303 = (unsigned __int16 *)((char *)v295 - *v295);
                  if (*v303 < 7u)
                  {
                    uint64_t v304 = 0;
                  }
                  else
                  {
                    uint64_t v304 = (unsigned int *)v303[3];
                    if (v304) {
                      uint64_t v304 = (unsigned int *)((char *)v304
                    }
                                            + (void)v295
                                            + *(unsigned int *)((char *)v304 + (void)v295));
                  }
                  int v305 = *v302;
                  LODWORD(__p) = *(_DWORD *)(sub_A200AC(v304, v251 + v302[1] - 1) + 4) + v305;
                  uint64_t v306 = (void *)sub_266E4((uint64_t)v290);
                  uint64_t v307 = sub_188FC78(v306, (uint64_t)" > ", 3);
                  unint64_t v308 = *a2;
                  unint64_t v309 = HIDWORD(*a2);
                  if (sub_A10E20(v4, HIDWORD(*a2)))
                  {
                    v310 = sub_A10A28(*(void *)(*v4 + 3944));
                  }
                  else
                  {
                    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                      && __cxa_guard_acquire(&qword_24F7308))
                    {
                      sub_518C8(0x3B60u, 0x7FCAu);
                      dword_24F7300 = v470 | 0x40000000;
                      __cxa_guard_release(&qword_24F7308);
                    }
                    uint64_t v311 = *v4;
                    if (dword_24F7300 == v309) {
                      v310 = sub_A10AD4(*(void *)(v311 + 3976));
                    }
                    else {
                      v310 = sub_A10B80(v311 + 24, v308, 0);
                    }
                  }
                  uint64_t v312 = (int *)v310;
                  double v313 = &v310[-*(int *)v310];
                  if (*(unsigned __int16 *)v313 < 5u)
                  {
                    uint64_t v314 = 0;
                  }
                  else
                  {
                    uint64_t v314 = *((unsigned __int16 *)v313 + 2);
                    if (v314) {
                      v314 += (uint64_t)&v310[*(unsigned int *)&v310[v314]];
                    }
                  }
                  long long v315 = (int *)(v314
                               + 4 * v308
                               + 4
                               + *(unsigned int *)(v314 + 4 * v308 + 4));
                  uint64_t v316 = (unsigned __int16 *)((char *)v315 - *v315);
                  if (*v316 >= 7u && (uint64_t v317 = v316[3]) != 0) {
                    int64_t v318 = (unsigned int *)((char *)v315 + v317 + *(unsigned int *)((char *)v315 + v317));
                  }
                  else {
                    int64_t v318 = 0;
                  }
                  uint64_t v319 = (int *)sub_A1FDE4(v318, v246);
                  long long v320 = (unsigned __int16 *)((char *)v312 - *v312);
                  if (*v320 < 7u)
                  {
                    long long v321 = 0;
                  }
                  else
                  {
                    long long v321 = (unsigned int *)v320[3];
                    if (v321) {
                      long long v321 = (unsigned int *)((char *)v321
                    }
                                            + (void)v312
                                            + *(unsigned int *)((char *)v321 + (void)v312));
                  }
                  int v322 = *v319;
                  LODWORD(v650) = *(_DWORD *)sub_A200AC(v321, v251 + v319[1]) + v322;
                  sub_266E4((uint64_t)v307);
                  std::stringbuf::str();
                  sub_7246C((uint64_t *)&__p, 3u);
                  if (v655 < 0) {
                    operator delete(__p);
                  }
                  *(void *)&v656[0] = v618;
                  *(void *)((char *)v656 + *(void *)(v618 - 24)) = v617;
                  if (SBYTE7(v660) < 0) {
                    operator delete((void *)v659);
                  }
                  std::streambuf::~streambuf();
                  std::ostream::~ostream();
                  std::ios::~ios();
                }
                char v247 = 0;
              }
LABEL_454:
              if (v246)
              {
                unint64_t v323 = *a2;
                unint64_t v324 = HIDWORD(*a2);
                if (sub_A10E20(v4, HIDWORD(*a2)))
                {
                  v325 = *(unsigned int **)(*(void *)(*v4 + 3944) + 72);
                  if (!v325)
                  {
                    v602 = __cxa_allocate_exception(0x40uLL);
                    sub_5E5C(v656, "Incident stop pattern quad data requested on nullptr buffer");
                    v603 = (void *)sub_2F404((uint64_t)v602, v656);
                  }
                  goto LABEL_461;
                }
                if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                  && __cxa_guard_acquire(&qword_24F7308))
                {
                  sub_518C8(0x3B60u, 0x7FCAu);
                  dword_24F7300 = v465 | 0x40000000;
                  __cxa_guard_release(&qword_24F7308);
                }
                uint64_t v326 = *v4;
                if (dword_24F7300 == v324)
                {
                  v325 = *(unsigned int **)(*(void *)(v326 + 3976) + 72);
                  if (!v325)
                  {
                    v612 = __cxa_allocate_exception(0x40uLL);
                    sub_5E5C(v656, "Realtime stop pattern quad data requested on nullptr buffer");
                    v613 = (void *)sub_2F404((uint64_t)v612, v656);
                  }
LABEL_461:
                  int v327 = (char *)v325 + *v325;
                  int v328 = &v327[-*(int *)v327];
                  if (*(unsigned __int16 *)v328 >= 5u)
                  {
LABEL_462:
                    uint64_t v329 = *((unsigned __int16 *)v328 + 2);
                    if (v329) {
                      v329 += (uint64_t)&v327[*(unsigned int *)&v327[v329]];
                    }
LABEL_466:
                    long long v330 = (int *)(v329
                                 + 4 * v323
                                 + 4
                                 + *(unsigned int *)(v329 + 4 * v323 + 4));
                    v331 = (unsigned __int16 *)((char *)v330 - *v330);
                    if (*v331 >= 7u && (uint64_t v332 = v331[3]) != 0) {
                      int v333 = (unsigned int *)((char *)v330 + v332 + *(unsigned int *)((char *)v330 + v332));
                    }
                    else {
                      int v333 = 0;
                    }
                    long long v334 = (int *)sub_A1FDE4(v333, v635);
                    long long v335 = &v327[-*(int *)v327];
                    if (*(unsigned __int16 *)v335 < 7u)
                    {
                      long long v336 = 0;
                    }
                    else
                    {
                      long long v336 = (unsigned int *)*((unsigned __int16 *)v335 + 3);
                      if (v336) {
                        long long v336 = (unsigned int *)((char *)v336
                      }
                                              + (void)v327
                                              + *(unsigned int *)((char *)v336 + (void)v327));
                    }
                    int v337 = *v334;
                    int v338 = *(_DWORD *)sub_A200AC(v336, v251 + v334[1]);
                    unint64_t v339 = *a2;
                    unint64_t v340 = HIDWORD(*a2);
                    if (sub_A10E20(v4, HIDWORD(*a2)))
                    {
                      long long v341 = *(unsigned int **)(*(void *)(*v4 + 3944) + 72);
                      if (!v341)
                      {
                        v592 = __cxa_allocate_exception(0x40uLL);
                        sub_5E5C(v656, "Incident stop pattern quad data requested on nullptr buffer");
                        v593 = (void *)sub_2F404((uint64_t)v592, v656);
                      }
                      goto LABEL_480;
                    }
                    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                      && __cxa_guard_acquire(&qword_24F7308))
                    {
                      sub_518C8(0x3B60u, 0x7FCAu);
                      dword_24F7300 = v466 | 0x40000000;
                      __cxa_guard_release(&qword_24F7308);
                    }
                    uint64_t v342 = *v4;
                    if (dword_24F7300 == v340)
                    {
                      long long v341 = *(unsigned int **)(*(void *)(v342 + 3976) + 72);
                      if (!v341)
                      {
                        v606 = __cxa_allocate_exception(0x40uLL);
                        sub_5E5C(v656, "Realtime stop pattern quad data requested on nullptr buffer");
                        v607 = (void *)sub_2F404((uint64_t)v606, v656);
                      }
LABEL_480:
                      v343 = (char *)v341 + *v341;
                      v344 = &v343[-*(int *)v343];
                      if (*(unsigned __int16 *)v344 >= 5u)
                      {
LABEL_481:
                        uint64_t v345 = *((unsigned __int16 *)v344 + 2);
                        if (v345) {
                          v345 += (uint64_t)&v343[*(unsigned int *)&v343[v345]];
                        }
LABEL_485:
                        int v346 = (int *)(v345
                                     + 4 * v339
                                     + 4
                                     + *(unsigned int *)(v345 + 4 * v339 + 4));
                        v347 = (unsigned __int16 *)((char *)v346 - *v346);
                        if (*v347 >= 7u && (uint64_t v348 = v347[3]) != 0) {
                          uint64_t v349 = (unsigned int *)((char *)v346 + v348 + *(unsigned int *)((char *)v346 + v348));
                        }
                        else {
                          uint64_t v349 = 0;
                        }
                        v350 = (int *)sub_A1FDE4(v349, v246);
                        uint64_t v351 = &v343[-*(int *)v343];
                        if (*(unsigned __int16 *)v351 < 7u)
                        {
                          uint64_t v352 = 0;
                        }
                        else
                        {
                          uint64_t v352 = (unsigned int *)*((unsigned __int16 *)v351 + 3);
                          if (v352) {
                            uint64_t v352 = (unsigned int *)((char *)v352
                          }
                                                  + (void)v343
                                                  + *(unsigned int *)((char *)v352 + (void)v343));
                        }
                        int v353 = *v350;
                        if (v338 + v337 > *(_DWORD *)sub_A200AC(v352, v251 + v350[1]) + v353)
                        {
                          if (sub_723EC(3u))
                          {
                            *(void *)&v656[0] = v626;
                            *(void *)((char *)v656 + *(void *)(v626 - 24)) = v622;
                            v354 = (std::ios_base *)((char *)v656 + *(void *)(*(void *)&v656[0] - 24));
                            std::ios_base::init(v354, (char *)v656 + 8);
                            v354[1].__vftable = 0;
                            v354[1].__fmtflags_ = -1;
                            std::streambuf::basic_streambuf();
                            long long v659 = 0u;
                            long long v660 = 0u;
                            int v661 = 16;
                            uint64_t v355 = sub_188FC78(v656, (uint64_t)"On stop pattern ", 16);
                            v356 = sub_2D1500(v355, *a2);
                            uint64_t v357 = sub_188FC78(v356, (uint64_t)", at stop index ", 16);
                            std::ostream::operator<<();
                            uint64_t v358 = sub_188FC78(v357, (uint64_t)", trips ", 8);
                            std::ostream::operator<<();
                            uint64_t v359 = sub_188FC78(v358, (uint64_t)" and ", 5);
                            std::ostream::operator<<();
                            uint64_t v360 = sub_188FC78(v359, (uint64_t)" are not fifo with respect to their arrival times: ", 51);
                            unint64_t v361 = *a2;
                            unint64_t v362 = HIDWORD(*a2);
                            if (sub_A10E20(v4, HIDWORD(*a2)))
                            {
                              unint64_t v363 = sub_A10A28(*(void *)(*v4 + 3944));
                            }
                            else
                            {
                              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                                && __cxa_guard_acquire(&qword_24F7308))
                              {
                                sub_518C8(0x3B60u, 0x7FCAu);
                                dword_24F7300 = v471 | 0x40000000;
                                __cxa_guard_release(&qword_24F7308);
                              }
                              uint64_t v364 = *v4;
                              if (dword_24F7300 == v362) {
                                unint64_t v363 = sub_A10AD4(*(void *)(v364 + 3976));
                              }
                              else {
                                unint64_t v363 = sub_A10B80(v364 + 24, v361, 0);
                              }
                            }
                            uint64_t v365 = (int *)v363;
                            uint64_t v366 = &v363[-*(int *)v363];
                            if (*(unsigned __int16 *)v366 < 5u)
                            {
                              uint64_t v367 = 0;
                            }
                            else
                            {
                              uint64_t v367 = *((unsigned __int16 *)v366 + 2);
                              if (v367) {
                                v367 += (uint64_t)&v363[*(unsigned int *)&v363[v367]];
                              }
                            }
                            unint64_t v368 = (int *)(v367
                                         + 4 * v361
                                         + 4
                                         + *(unsigned int *)(v367 + 4 * v361 + 4));
                            long double v369 = (unsigned __int16 *)((char *)v368 - *v368);
                            if (*v369 >= 7u && (uint64_t v370 = v369[3]) != 0) {
                              long double v371 = (unsigned int *)((char *)v368 + v370 + *(unsigned int *)((char *)v368 + v370));
                            }
                            else {
                              long double v371 = 0;
                            }
                            uint64x2_t v372 = (int *)sub_A1FDE4(v371, v635);
                            int64x2_t v373 = (unsigned __int16 *)((char *)v365 - *v365);
                            if (*v373 < 7u)
                            {
                              long double v374 = 0;
                            }
                            else
                            {
                              long double v374 = (unsigned int *)v373[3];
                              if (v374) {
                                long double v374 = (unsigned int *)((char *)v374
                              }
                                                      + (void)v365
                                                      + *(unsigned int *)((char *)v374 + (void)v365));
                            }
                            int v375 = *v372;
                            LODWORD(__p) = *(_DWORD *)sub_A200AC(v374, v251 + v372[1]) + v375;
                            double v376 = (void *)sub_266E4((uint64_t)v360);
                            long double v377 = sub_188FC78(v376, (uint64_t)" > ", 3);
                            unint64_t v378 = *a2;
                            unint64_t v379 = HIDWORD(*a2);
                            if (sub_A10E20(v4, HIDWORD(*a2)))
                            {
                              double v380 = sub_A10A28(*(void *)(*v4 + 3944));
                            }
                            else
                            {
                              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                                && __cxa_guard_acquire(&qword_24F7308))
                              {
                                sub_518C8(0x3B60u, 0x7FCAu);
                                dword_24F7300 = v472 | 0x40000000;
                                __cxa_guard_release(&qword_24F7308);
                              }
                              uint64_t v381 = *v4;
                              if (dword_24F7300 == v379) {
                                double v380 = sub_A10AD4(*(void *)(v381 + 3976));
                              }
                              else {
                                double v380 = sub_A10B80(v381 + 24, v378, 0);
                              }
                            }
                            v382 = (int *)v380;
                            uint64_t v383 = &v380[-*(int *)v380];
                            if (*(unsigned __int16 *)v383 < 5u)
                            {
                              uint64_t v384 = 0;
                            }
                            else
                            {
                              uint64_t v384 = *((unsigned __int16 *)v383 + 2);
                              if (v384) {
                                v384 += (uint64_t)&v380[*(unsigned int *)&v380[v384]];
                              }
                            }
                            int v385 = (int *)(v384
                                         + 4 * v378
                                         + 4
                                         + *(unsigned int *)(v384 + 4 * v378 + 4));
                            uint64_t v386 = (unsigned __int16 *)((char *)v385 - *v385);
                            if (*v386 >= 7u && (uint64_t v387 = v386[3]) != 0) {
                              uint64_t v388 = (unsigned int *)((char *)v385 + v387 + *(unsigned int *)((char *)v385 + v387));
                            }
                            else {
                              uint64_t v388 = 0;
                            }
                            v389 = (int *)sub_A1FDE4(v388, v246);
                            v390 = (unsigned __int16 *)((char *)v382 - *v382);
                            if (*v390 < 7u)
                            {
                              uint64_t v391 = 0;
                            }
                            else
                            {
                              uint64_t v391 = (unsigned int *)v390[3];
                              if (v391) {
                                uint64_t v391 = (unsigned int *)((char *)v391
                              }
                                                      + (void)v382
                                                      + *(unsigned int *)((char *)v391 + (void)v382));
                            }
                            int v392 = *v389;
                            LODWORD(v650) = *(_DWORD *)sub_A200AC(v391, v251 + v389[1]) + v392;
                            sub_266E4((uint64_t)v377);
                            std::stringbuf::str();
                            sub_7246C((uint64_t *)&__p, 3u);
                            if (v655 < 0) {
                              operator delete(__p);
                            }
                            *(void *)&v656[0] = v618;
                            *(void *)((char *)v656 + *(void *)(v618 - 24)) = v617;
                            if (SBYTE7(v660) < 0) {
                              operator delete((void *)v659);
                            }
                            std::streambuf::~streambuf();
                            std::ostream::~ostream();
                            std::ios::~ios();
                          }
                          char v247 = 0;
                        }
                        unint64_t v393 = *a2;
                        unint64_t v394 = HIDWORD(*a2);
                        if (sub_A10E20(v4, HIDWORD(*a2)))
                        {
                          v395 = *(unsigned int **)(*(void *)(*v4 + 3944) + 72);
                          if (!v395)
                          {
                            v596 = __cxa_allocate_exception(0x40uLL);
                            sub_5E5C(v656, "Incident stop pattern quad data requested on nullptr buffer");
                            v597 = (void *)sub_2F404((uint64_t)v596, v656);
                          }
                          goto LABEL_543;
                        }
                        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                          && __cxa_guard_acquire(&qword_24F7308))
                        {
                          sub_518C8(0x3B60u, 0x7FCAu);
                          dword_24F7300 = v467 | 0x40000000;
                          __cxa_guard_release(&qword_24F7308);
                        }
                        uint64_t v396 = *v4;
                        if (dword_24F7300 == v394)
                        {
                          v395 = *(unsigned int **)(*(void *)(v396 + 3976) + 72);
                          if (!v395)
                          {
                            v604 = __cxa_allocate_exception(0x40uLL);
                            sub_5E5C(v656, "Realtime stop pattern quad data requested on nullptr buffer");
                            v605 = (void *)sub_2F404((uint64_t)v604, v656);
                          }
LABEL_543:
                          unint64_t v397 = (char *)v395 + *v395;
                          uint64_t v398 = &v397[-*(int *)v397];
                          if (*(unsigned __int16 *)v398 >= 5u)
                          {
LABEL_544:
                            uint64_t v399 = *((unsigned __int16 *)v398 + 2);
                            if (v399) {
                              v399 += (uint64_t)&v397[*(unsigned int *)&v397[v399]];
                            }
LABEL_548:
                            v400 = (int *)(v399
                                         + 4 * v393
                                         + 4
                                         + *(unsigned int *)(v399 + 4 * v393 + 4));
                            v401 = (unsigned __int16 *)((char *)v400 - *v400);
                            if (*v401 >= 7u && (uint64_t v402 = v401[3]) != 0) {
                              long long v403 = (unsigned int *)((char *)v400 + v402 + *(unsigned int *)((char *)v400 + v402));
                            }
                            else {
                              long long v403 = 0;
                            }
                            long long v404 = (int *)sub_A1FDE4(v403, v635);
                            v405 = &v397[-*(int *)v397];
                            if (*(unsigned __int16 *)v405 < 7u)
                            {
                              v406 = 0;
                            }
                            else
                            {
                              v406 = (unsigned int *)*((unsigned __int16 *)v405 + 3);
                              if (v406) {
                                v406 = (unsigned int *)((char *)v406
                              }
                                                      + (void)v397
                                                      + *(unsigned int *)((char *)v406 + (void)v397));
                            }
                            int v407 = *v404;
                            int v408 = *(_DWORD *)(sub_A200AC(v406, v251 + v404[1]) + 4);
                            unint64_t v409 = *a2;
                            unint64_t v410 = HIDWORD(*a2);
                            if (sub_A10E20(v4, HIDWORD(*a2)))
                            {
                              v411 = *(unsigned int **)(*(void *)(*v4 + 3944) + 72);
                              if (!v411)
                              {
                                v600 = __cxa_allocate_exception(0x40uLL);
                                sub_5E5C(v656, "Incident stop pattern quad data requested on nullptr buffer");
                                v601 = (void *)sub_2F404((uint64_t)v600, v656);
                              }
                              goto LABEL_562;
                            }
                            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                              && __cxa_guard_acquire(&qword_24F7308))
                            {
                              sub_518C8(0x3B60u, 0x7FCAu);
                              dword_24F7300 = v468 | 0x40000000;
                              __cxa_guard_release(&qword_24F7308);
                            }
                            uint64_t v412 = *v4;
                            if (dword_24F7300 == v410)
                            {
                              v411 = *(unsigned int **)(*(void *)(v412 + 3976) + 72);
                              if (!v411)
                              {
                                v608 = __cxa_allocate_exception(0x40uLL);
                                sub_5E5C(v656, "Realtime stop pattern quad data requested on nullptr buffer");
                                v609 = (void *)sub_2F404((uint64_t)v608, v656);
                              }
LABEL_562:
                              long long v413 = (char *)v411 + *v411;
                              long long v414 = &v413[-*(int *)v413];
                              if (*(unsigned __int16 *)v414 >= 5u)
                              {
LABEL_563:
                                uint64_t v415 = *((unsigned __int16 *)v414 + 2);
                                if (v415) {
                                  v415 += (uint64_t)&v413[*(unsigned int *)&v413[v415]];
                                }
                                goto LABEL_567;
                              }
                            }
                            else
                            {
                              long long v413 = sub_A10B80(v412 + 24, v409, 0);
                              long long v414 = &v413[-*(int *)v413];
                              if (*(unsigned __int16 *)v414 >= 5u) {
                                goto LABEL_563;
                              }
                            }
                            uint64_t v415 = 0;
LABEL_567:
                            v416 = (int *)(v415
                                         + 4 * v409
                                         + 4
                                         + *(unsigned int *)(v415 + 4 * v409 + 4));
                            v417 = (unsigned __int16 *)((char *)v416 - *v416);
                            if (*v417 >= 7u && (uint64_t v418 = v417[3]) != 0) {
                              v419 = (unsigned int *)((char *)v416 + v418 + *(unsigned int *)((char *)v416 + v418));
                            }
                            else {
                              v419 = 0;
                            }
                            unint64_t v420 = (int *)sub_A1FDE4(v419, v246);
                            unint64_t v421 = &v413[-*(int *)v413];
                            if (*(unsigned __int16 *)v421 < 7u)
                            {
                              uint8x8_t v422 = 0;
                            }
                            else
                            {
                              uint8x8_t v422 = (unsigned int *)*((unsigned __int16 *)v421 + 3);
                              if (v422) {
                                uint8x8_t v422 = (unsigned int *)((char *)v422
                              }
                                                      + (void)v413
                                                      + *(unsigned int *)((char *)v422 + (void)v413));
                            }
                            int v423 = *v420;
                            if (v408 + v407 > *(_DWORD *)(sub_A200AC(v422, v251 + v420[1]) + 4) + v423)
                            {
                              if (sub_723EC(3u))
                              {
                                *(void *)&v656[0] = v626;
                                *(void *)((char *)v656 + *(void *)(v626 - 24)) = v622;
                                v424 = (std::ios_base *)((char *)v656 + *(void *)(*(void *)&v656[0] - 24));
                                std::ios_base::init(v424, (char *)v656 + 8);
                                v424[1].__vftable = 0;
                                v424[1].__fmtflags_ = -1;
                                std::streambuf::basic_streambuf();
                                long long v659 = 0u;
                                long long v660 = 0u;
                                int v661 = 16;
                                v425 = sub_188FC78(v656, (uint64_t)"On stop pattern ", 16);
                                v426 = sub_2D1500(v425, *a2);
                                unint64_t v427 = sub_188FC78(v426, (uint64_t)", at stop index ", 16);
                                std::ostream::operator<<();
                                v428 = sub_188FC78(v427, (uint64_t)", trips ", 8);
                                std::ostream::operator<<();
                                unint64_t v429 = sub_188FC78(v428, (uint64_t)" and ", 5);
                                std::ostream::operator<<();
                                uint64_t v430 = sub_188FC78(v429, (uint64_t)" are not fifo with respect to their departure times: ", 53);
                                unint64_t v431 = *a2;
                                unint64_t v432 = HIDWORD(*a2);
                                if (sub_A10E20(v4, HIDWORD(*a2)))
                                {
                                  unsigned __int16 v433 = sub_A10A28(*(void *)(*v4 + 3944));
                                }
                                else
                                {
                                  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&qword_24F7308))
                                  {
                                    sub_518C8(0x3B60u, 0x7FCAu);
                                    dword_24F7300 = v473 | 0x40000000;
                                    __cxa_guard_release(&qword_24F7308);
                                  }
                                  uint64_t v434 = *v4;
                                  if (dword_24F7300 == v432) {
                                    unsigned __int16 v433 = sub_A10AD4(*(void *)(v434 + 3976));
                                  }
                                  else {
                                    unsigned __int16 v433 = sub_A10B80(v434 + 24, v431, 0);
                                  }
                                }
                                unint64_t v435 = (int *)v433;
                                uint64_t v436 = &v433[-*(int *)v433];
                                if (*(unsigned __int16 *)v436 < 5u)
                                {
                                  uint64_t v437 = 0;
                                }
                                else
                                {
                                  uint64_t v437 = *((unsigned __int16 *)v436 + 2);
                                  if (v437) {
                                    v437 += (uint64_t)&v433[*(unsigned int *)&v433[v437]];
                                  }
                                }
                                unint64_t v438 = (int *)(v437
                                             + 4 * v431
                                             + 4
                                             + *(unsigned int *)(v437 + 4 * v431 + 4));
                                uint64_t v439 = (unsigned __int16 *)((char *)v438 - *v438);
                                if (*v439 >= 7u && (uint64_t v440 = v439[3]) != 0) {
                                  uint64_t v441 = (unsigned int *)((char *)v438 + v440 + *(unsigned int *)((char *)v438 + v440));
                                }
                                else {
                                  uint64_t v441 = 0;
                                }
                                unsigned int v442 = (int *)sub_A1FDE4(v441, v635);
                                uint64_t v443 = (unsigned __int16 *)((char *)v435 - *v435);
                                if (*v443 < 7u)
                                {
                                  v444 = 0;
                                }
                                else
                                {
                                  v444 = (unsigned int *)v443[3];
                                  if (v444) {
                                    v444 = (unsigned int *)((char *)v444
                                  }
                                                          + (void)v435
                                                          + *(unsigned int *)((char *)v444 + (void)v435));
                                }
                                int v445 = *v442;
                                LODWORD(__p) = *(_DWORD *)(sub_A200AC(v444, v251 + v442[1]) + 4) + v445;
                                v446 = (void *)sub_266E4((uint64_t)v430);
                                uint64_t v447 = sub_188FC78(v446, (uint64_t)" > ", 3);
                                unint64_t v448 = *a2;
                                unint64_t v449 = HIDWORD(*a2);
                                if (sub_A10E20(v4, HIDWORD(*a2)))
                                {
                                  uint64_t v450 = sub_A10A28(*(void *)(*v4 + 3944));
                                }
                                else
                                {
                                  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&qword_24F7308))
                                  {
                                    sub_518C8(0x3B60u, 0x7FCAu);
                                    dword_24F7300 = v474 | 0x40000000;
                                    __cxa_guard_release(&qword_24F7308);
                                  }
                                  uint64_t v451 = *v4;
                                  if (dword_24F7300 == v449) {
                                    uint64_t v450 = sub_A10AD4(*(void *)(v451 + 3976));
                                  }
                                  else {
                                    uint64_t v450 = sub_A10B80(v451 + 24, v448, 0);
                                  }
                                }
                                uint64_t v452 = (int *)v450;
                                unint64_t v453 = &v450[-*(int *)v450];
                                if (*(unsigned __int16 *)v453 < 5u)
                                {
                                  uint64_t v454 = 0;
                                }
                                else
                                {
                                  uint64_t v454 = *((unsigned __int16 *)v453 + 2);
                                  if (v454) {
                                    v454 += (uint64_t)&v450[*(unsigned int *)&v450[v454]];
                                  }
                                }
                                unint64_t v455 = (int *)(v454
                                             + 4 * v448
                                             + 4
                                             + *(unsigned int *)(v454 + 4 * v448 + 4));
                                unint64_t v456 = (unsigned __int16 *)((char *)v455 - *v455);
                                if (*v456 >= 7u && (uint64_t v457 = v456[3]) != 0) {
                                  unsigned int v458 = (unsigned int *)((char *)v455 + v457 + *(unsigned int *)((char *)v455 + v457));
                                }
                                else {
                                  unsigned int v458 = 0;
                                }
                                uint64_t v459 = (int *)sub_A1FDE4(v458, v246);
                                v460 = (unsigned __int16 *)((char *)v452 - *v452);
                                if (*v460 < 7u)
                                {
                                  v461 = 0;
                                }
                                else
                                {
                                  v461 = (unsigned int *)v460[3];
                                  if (v461) {
                                    v461 = (unsigned int *)((char *)v461
                                  }
                                                          + (void)v452
                                                          + *(unsigned int *)((char *)v461 + (void)v452));
                                }
                                int v462 = *v459;
                                LODWORD(v650) = *(_DWORD *)(sub_A200AC(v461, v251 + v459[1]) + 4) + v462;
                                sub_266E4((uint64_t)v447);
                                std::stringbuf::str();
                                sub_7246C((uint64_t *)&__p, 3u);
                                if (v655 < 0) {
                                  operator delete(__p);
                                }
                                *(void *)&v656[0] = v618;
                                *(void *)((char *)v656 + *(void *)(v618 - 24)) = v617;
                                if (SBYTE7(v660) < 0) {
                                  operator delete((void *)v659);
                                }
                                std::streambuf::~streambuf();
                                std::ostream::~ostream();
                                std::ios::~ios();
                              }
                              char v247 = 0;
                            }
                            goto LABEL_370;
                          }
                        }
                        else
                        {
                          unint64_t v397 = sub_A10B80(v396 + 24, v393, 0);
                          uint64_t v398 = &v397[-*(int *)v397];
                          if (*(unsigned __int16 *)v398 >= 5u) {
                            goto LABEL_544;
                          }
                        }
                        uint64_t v399 = 0;
                        goto LABEL_548;
                      }
                    }
                    else
                    {
                      v343 = sub_A10B80(v342 + 24, v339, 0);
                      v344 = &v343[-*(int *)v343];
                      if (*(unsigned __int16 *)v344 >= 5u) {
                        goto LABEL_481;
                      }
                    }
                    uint64_t v345 = 0;
                    goto LABEL_485;
                  }
                }
                else
                {
                  int v327 = sub_A10B80(v326 + 24, v323, 0);
                  int v328 = &v327[-*(int *)v327];
                  if (*(unsigned __int16 *)v328 >= 5u) {
                    goto LABEL_462;
                  }
                }
                uint64_t v329 = 0;
                goto LABEL_466;
              }
LABEL_370:
              if (v632 == ++v251) {
                goto LABEL_362;
              }
            }
            long double v254 = *(unsigned int **)(*(void *)(*v4 + 3944) + 72);
            if (!v254)
            {
              v594 = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(v656, "Incident stop pattern quad data requested on nullptr buffer");
              v595 = (void *)sub_2F404((uint64_t)v594, v656);
            }
            goto LABEL_378;
          }
        }
      }
      char v247 = 1;
    }
  }
  else
  {
    char v247 = 0;
  }
LABEL_643:
  if (v638)
  {
    v639 = (unint64_t *)v638;
    operator delete(v638);
  }
  return v247 & 1;
}

void sub_C1F92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

int *sub_C1FD60@<X0>(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL result = (int *)sub_A11094(a1, a2);
  unint64_t v5 = (unsigned __int16 *)((char *)result - *result);
  if (*v5 >= 0x17u && (uint64_t v6 = v5[11]) != 0)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v7 = (unsigned int *)((char *)result + v6);
    uint64_t v8 = *v7;
    uint64_t v10 = (unsigned int *)((char *)v7 + v8 + 4);
    uint64_t v9 = *(unsigned int *)((char *)v7 + v8);
    if (v9)
    {
      uint64_t v11 = 4 * v9;
      do
      {
        unsigned int v13 = *v10;
        BOOL result = (int *)sub_C23A64((void **)a3, &v13);
        ++v10;
        v11 -= 4;
      }
      while (v11);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v12 = operator new(8uLL);
    *(void *)a3 = v12;
    *uint64_t v12 = 0;
    BOOL result = (int *)(v12 + 1);
    *(void *)(a3 + 8) = result;
    *(void *)(a3 + 16) = result;
  }
  return result;
}

void sub_C1FE20(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_C1FE3C(void *a1, uint64_t a2)
{
  sub_C23BD0(a1, a2, (uint64_t)&v11);
  uint64_t v3 = v11;
  unint64_t v4 = v12;
  uint64_t v5 = 3;
  if (v11 != v12)
  {
    do
    {
      while (1)
      {
        uint64_t v6 = (int *)sub_8F4388(a1[1] + 24, __ROR8__(*v3, 32), 0, "market");
        uint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
        if (*v7 < 0x11u) {
          break;
        }
        uint64_t v8 = v7[8];
        if (!v8) {
          break;
        }
        unsigned int v9 = *((unsigned __int8 *)v6 + v8);
        if (v9 >= v5) {
          uint64_t v5 = v5;
        }
        else {
          uint64_t v5 = v9;
        }
        if (++v3 == v4) {
          goto LABEL_13;
        }
      }
      if (v5 <= 1u) {
        uint64_t v5 = v5;
      }
      else {
        uint64_t v5 = 1;
      }
      ++v3;
    }
    while (v3 != v4);
LABEL_13:
    uint64_t v3 = v11;
  }
  if (v3)
  {
    uint64_t v12 = v3;
    operator delete(v3);
  }
  return v5;
}

void sub_C1FF20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_C1FF3C(uint64_t a1, unint64_t *a2)
{
  int v2 = a2;
  uint64_t v3 = a1;
  unint64_t v4 = *a2;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F7308))
  {
    sub_518C8(0x3B60u, 0x7FCAu);
    dword_24F7300 = v439 | 0x40000000;
    __cxa_guard_release(&qword_24F7308);
    int v2 = a2;
    uint64_t v3 = a1;
  }
  uint64_t v5 = (uint64_t *)(v3 + 4136);
  int v442 = dword_24F7300;
  uint64_t v6 = (int *)sub_A11094((void *)(v3 + 4136), *v2);
  uint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 >= 7u)
  {
    uint64_t v8 = v7[3];
    if (v8)
    {
      uint64_t v9 = *(unsigned int *)((char *)v6 + v8 + *(unsigned int *)((char *)v6 + v8));
      if (v9)
      {
        uint64_t v10 = 0;
        unint64_t v441 = HIDWORD(v4);
        uint64_t v11 = (uint64_t **)(v3 + 4184);
        char v451 = 1;
        uint64_t v12 = (uint64_t *)a2;
        unint64_t v455 = (uint64_t *)(v3 + 4136);
        uint64_t v454 = (uint64_t **)(v3 + 4184);
        uint64_t v440 = *(unsigned int *)((char *)v6 + v8 + *(unsigned int *)((char *)v6 + v8));
        while (1)
        {
          if (sub_C164C8(v5, *v12, v10)) {
            goto LABEL_7;
          }
          uint64_t v450 = v10;
          sub_A1DD94(v5, *v12, v10, (uint64_t)&v465);
          unsigned int v13 = (uint64_t *)v465;
          uint64_t v14 = v466;
          if (v465 != (char *)v466) {
            break;
          }
LABEL_59:
          if (v451)
          {
            if (!*(unsigned char *)(a1 + 16)) {
              goto LABEL_68;
            }
            char v58 = (char *)v466;
            if (v465 == (char *)v466) {
              goto LABEL_68;
            }
            unint64_t v59 = v465 + 12;
            do
            {
              int v60 = sub_2AB7E4(**v11);
              if (v59 == v58) {
                char v61 = 0;
              }
              else {
                char v61 = v60;
              }
              v59 += 12;
            }
            while ((v61 & 1) != 0);
            if (v60)
            {
LABEL_68:
              uint64_t v12 = (uint64_t *)a2;
              uint64_t v62 = (int *)sub_A11094(v5, *a2);
              char v63 = (unsigned __int16 *)((char *)v62 - *v62);
              if (*v63 >= 0x15u && v63[10])
              {
                BOOL v64 = (uint64_t *)v465;
                char v65 = v466;
                while (v64 != v65)
                {
                  uint64_t v66 = *v64;
                  int v67 = sub_369B60((uint64_t)(*v11 + 3), __ROR8__(*v64, 32), 0);
                  uint64_t v68 = &v67[-*(int *)v67];
                  if (*(unsigned __int16 *)v68 < 5u)
                  {
                    uint64_t v69 = 0;
                  }
                  else
                  {
                    uint64_t v69 = *((unsigned __int16 *)v68 + 2);
                    if (v69) {
                      v69 += (uint64_t)&v67[*(unsigned int *)&v67[v69]];
                    }
                  }
                  uint64_t v70 = (int *)(v69 + 4 * v66 + 4 + *(unsigned int *)(v69 + 4 * v66 + 4));
                  uint64_t v71 = (unsigned __int16 *)((char *)v70 - *v70);
                  if (*v71 >= 0x2Bu)
                  {
                    uint64_t v72 = v71[21];
                    if (v72)
                    {
                      if (*(int *)((char *)v70 + v72) != -1) {
                        goto LABEL_80;
                      }
                    }
                  }
                  BOOL v64 = (uint64_t *)((char *)v64 + 12);
                }
                uint64_t v12 = (uint64_t *)a2;
                if (sub_723EC(3u))
                {
                  sub_6BAC((uint64_t)v460);
                  uint64_t v73 = sub_188FC78(v460, (uint64_t)"Stop pattern ", 13);
                  uint64_t v74 = sub_2D1500(v73, *a2);
                  unsigned int v75 = sub_188FC78(v74, (uint64_t)" has boarding restrictions and none of the trips at sequence index ", 67);
                  std::ostream::operator<<();
                  sub_188FC78(v75, (uint64_t)" have any boarding restrictions.", 32);
                  std::stringbuf::str();
                  sub_7246C((uint64_t *)__p, 3u);
                  if (v459 < 0) {
                    operator delete(__p[0]);
                  }
                  *(void *)&v460[0] = v448;
                  *(void *)((char *)v460 + *(void *)(v448 - 24)) = v447;
                  if (SBYTE7(v462) < 0) {
                    operator delete((void *)v461);
                  }
                  std::streambuf::~streambuf();
                  std::ostream::~ostream();
                  std::ios::~ios();
                }
                char v451 = 0;
              }
              else
              {
                char v451 = 1;
              }
            }
            else
            {
LABEL_80:
              char v451 = 1;
              uint64_t v12 = (uint64_t *)a2;
            }
            unsigned int v76 = (int *)sub_A11094(v5, *v12);
            char v77 = (unsigned __int16 *)((char *)v76 - *v76);
            if (*v77 >= 9u)
            {
              uint64_t v78 = v77[4];
              if (v78)
              {
                uint64_t v443 = *(unsigned int *)((char *)v76 + v78 + *(unsigned int *)((char *)v76 + v78));
                if (v443)
                {
                  for (uint64_t i = 0; v443 != i; ++i)
                  {
                    unint64_t v80 = *v12;
                    unint64_t v81 = HIDWORD(*v12);
                    if (sub_A10E20(v5, HIDWORD(*v12)))
                    {
                      uint64_t v82 = *(unsigned int **)(*(void *)(*v5 + 3944) + 72);
                      if (!v82)
                      {
                        exception = __cxa_allocate_exception(0x40uLL);
                        sub_5E5C(v460, "Incident stop pattern quad data requested on nullptr buffer");
                        unint64_t v438 = (void *)sub_2F404((uint64_t)exception, v460);
                      }
                      unint64_t v83 = (int *)((char *)v82 + *v82);
                      uint64_t v84 = (char *)v83 - *v83;
                      if (*(unsigned __int16 *)v84 < 5u) {
                        goto LABEL_106;
                      }
                    }
                    else
                    {
                      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                        && __cxa_guard_acquire(&qword_24F7308))
                      {
                        sub_518C8(0x3B60u, 0x7FCAu);
                        dword_24F7300 = v427 | 0x40000000;
                        __cxa_guard_release(&qword_24F7308);
                        uint64_t v5 = v455;
                        uint64_t v12 = (uint64_t *)a2;
                        uint64_t v11 = v454;
                      }
                      uint64_t v86 = *v5;
                      if (dword_24F7300 == v81) {
                        uint64_t v87 = sub_A10AD4(*(void *)(v86 + 3976));
                      }
                      else {
                        uint64_t v87 = sub_A10B80(v86 + 24, v80, 0);
                      }
                      unint64_t v83 = (int *)v87;
                      uint64_t v84 = &v87[-*(int *)v87];
                      if (*(unsigned __int16 *)v84 < 5u)
                      {
LABEL_106:
                        uint64_t v85 = 0;
                        goto LABEL_107;
                      }
                    }
                    uint64_t v85 = *((unsigned __int16 *)v84 + 2);
                    if (v85) {
                      v85 += (uint64_t)v83 + *(unsigned int *)((char *)v83 + v85);
                    }
LABEL_107:
                    unsigned int v88 = (int *)(v85
                                + 4 * v80
                                + 4
                                + *(unsigned int *)(v85 + 4 * v80 + 4));
                    BOOL v89 = (unsigned __int16 *)((char *)v88 - *v88);
                    if (*v89 >= 9u && (uint64_t v90 = v89[4]) != 0) {
                      uint64_t v91 = (unsigned int *)((char *)v88 + v90 + *(unsigned int *)((char *)v88 + v90));
                    }
                    else {
                      uint64_t v91 = 0;
                    }
                    uint64_t v92 = sub_A10764(v91, i);
                    uint64_t v93 = (unsigned __int16 *)((char *)v83 - *v83);
                    if (*v93 < 0xBu)
                    {
                      uint64_t v94 = 0;
                      char v95 = (unsigned __int16 *)((char *)v88 - *v88);
                      if (*v95 < 0x11u) {
                        goto LABEL_118;
                      }
                    }
                    else
                    {
                      uint64_t v94 = (unsigned int *)v93[5];
                      if (v94) {
                        uint64_t v94 = (unsigned int *)((char *)v94 + (void)v83 + *(unsigned int *)((char *)v94 + (void)v83));
                      }
                      char v95 = (unsigned __int16 *)((char *)v88 - *v88);
                      if (*v95 < 0x11u)
                      {
LABEL_118:
                        LODWORD(v96) = 0;
                        goto LABEL_119;
                      }
                    }
                    uint64_t v96 = v95[8];
                    if (v95[8]) {
                      LODWORD(v96) = *(int *)((char *)v88 + v96);
                    }
LABEL_119:
                    uint64_t v97 = sub_A108C4(v94, v96+ *(int *)((char *)v88 + v95[2] + *(unsigned int *)((char *)v88 + v95[2])) * v450+ *(unsigned __int8 *)(v92 + 14));
                    if (v97)
                    {
                      unint64_t v452 = __ROR8__(*(void *)v97, 32);
                      int v98 = *(_DWORD *)(v97 + 8);
                    }
                    else
                    {
                      int v98 = 0;
                      unint64_t v452 = 0xFFFFFFFFLL;
                    }
                    unint64_t v99 = *v12;
                    unint64_t v100 = HIDWORD(*v12);
                    if (sub_A10E20(v5, HIDWORD(*v12)))
                    {
                      uint64_t v101 = (int *)sub_A1120C(*(void *)(*v5 + 3944), v99);
                    }
                    else
                    {
                      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                        && __cxa_guard_acquire(&qword_24F7308))
                      {
                        sub_518C8(0x3B60u, 0x7FCAu);
                        dword_24F7300 = v428 | 0x40000000;
                        __cxa_guard_release(&qword_24F7308);
                        uint64_t v5 = v455;
                        uint64_t v12 = (uint64_t *)a2;
                        uint64_t v11 = v454;
                      }
                      uint64_t v102 = *v5;
                      if (dword_24F7300 == v100)
                      {
                        uint64_t v103 = sub_A10AD4(*(void *)(v102 + 3976));
                        unsigned int v104 = &v103[-*(int *)v103];
                        if (*(unsigned __int16 *)v104 >= 5u && (uint64_t v105 = *((unsigned __int16 *)v104 + 2)) != 0) {
                          uint64_t v106 = (unsigned int *)&v103[v105 + *(unsigned int *)&v103[v105]];
                        }
                        else {
                          uint64_t v106 = 0;
                        }
                        uint64_t v101 = (int *)sub_A1139C(v106, v99);
                      }
                      else
                      {
                        uint64_t v101 = (int *)sub_A11500(v102 + 24, v99, 0, "stop pattern");
                      }
                    }
                    uint64_t v107 = (unsigned __int16 *)((char *)v101 - *v101);
                    if (*v107 >= 9u && (uint64_t v108 = v107[4]) != 0) {
                      uint64_t v109 = (unsigned int *)((char *)v101 + v108 + *(unsigned int *)((char *)v101 + v108));
                    }
                    else {
                      uint64_t v109 = 0;
                    }
                    unint64_t v110 = *(unsigned __int16 *)(sub_A10764(v109, i) + 12);
                    unint64_t v446 = HIDWORD(v452);
                    if (*(unsigned char *)(a1 + 16) && (sub_2AB7E4(**v11) & 1) == 0) {
                      continue;
                    }
                    unint64_t v111 = *v12;
                    unint64_t v112 = HIDWORD(*v12);
                    unint64_t v449 = v110;
                    if (sub_A10E20(v5, HIDWORD(*v12)))
                    {
                      unint64_t v113 = (int *)sub_A1120C(*(void *)(*v5 + 3944), v111);
                    }
                    else
                    {
                      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                        && __cxa_guard_acquire(&qword_24F7308))
                      {
                        sub_518C8(0x3B60u, 0x7FCAu);
                        dword_24F7300 = v429 | 0x40000000;
                        __cxa_guard_release(&qword_24F7308);
                        uint64_t v5 = v455;
                        uint64_t v12 = (uint64_t *)a2;
                        uint64_t v11 = v454;
                      }
                      uint64_t v114 = *v5;
                      if (dword_24F7300 == v112)
                      {
                        uint64_t v115 = sub_A10AD4(*(void *)(v114 + 3976));
                        uint64_t v116 = &v115[-*(int *)v115];
                        if (*(unsigned __int16 *)v116 >= 5u && (uint64_t v117 = *((unsigned __int16 *)v116 + 2)) != 0) {
                          v118 = (unsigned int *)&v115[v117 + *(unsigned int *)&v115[v117]];
                        }
                        else {
                          v118 = 0;
                        }
                        unint64_t v113 = (int *)sub_A1139C(v118, v111);
                      }
                      else
                      {
                        unint64_t v113 = (int *)sub_A11500(v114 + 24, v111, 0, "stop pattern");
                      }
                    }
                    uint64_t v119 = (unsigned __int16 *)((char *)v113 - *v113);
                    if (*v119 >= 9u && (uint64_t v120 = v119[4]) != 0) {
                      uint64_t v121 = (unsigned int *)((char *)v113 + v120 + *(unsigned int *)((char *)v113 + v120));
                    }
                    else {
                      uint64_t v121 = 0;
                    }
                    int v122 = *(_DWORD *)(sub_A10764(v121, i) + 8);
                    unint64_t v123 = __ROR8__(v452, 32);
                    unint64_t v124 = sub_369B60((uint64_t)(*v11 + 3), v123, 0);
                    uint64_t v125 = &v124[-*(int *)v124];
                    unsigned int v126 = *(unsigned __int16 *)v125;
                    if (v126 <= 4)
                    {
                      long long v130 = 0;
                      v128 = (int *)(4 * v452 + 4 + dword_4[v452]);
                      long long v131 = (unsigned __int16 *)((char *)v128
                                                - *(int *)((char *)&dword_4[v452]
                                                         + dword_4[v452]));
                      if (*v131 < 0xDu) {
                        goto LABEL_164;
                      }
                    }
                    else
                    {
                      uint64_t v127 = *((unsigned __int16 *)v125 + 2);
                      if (*((_WORD *)v125 + 2)) {
                        v127 += (uint64_t)&v124[*(unsigned int *)&v124[v127]];
                      }
                      v128 = (int *)(v127
                                   + 4 * v452
                                   + 4
                                   + *(unsigned int *)(v127 + 4 * v452 + 4));
                      if (v126 >= 7 && (uint64_t v129 = *((unsigned __int16 *)v125 + 3)) != 0)
                      {
                        long long v130 = (unsigned int *)&v124[v129 + *(unsigned int *)&v124[v129]];
                        long long v131 = (unsigned __int16 *)((char *)v128 - *v128);
                        if (*v131 < 0xDu) {
                          goto LABEL_164;
                        }
                      }
                      else
                      {
                        long long v130 = 0;
                        long long v131 = (unsigned __int16 *)((char *)v128 - *v128);
                        if (*v131 < 0xDu) {
                          goto LABEL_164;
                        }
                      }
                    }
                    uint64_t v132 = v131[6];
                    if (v132)
                    {
                      int v133 = *(int *)((char *)v128 + v132);
                      goto LABEL_165;
                    }
LABEL_164:
                    int v133 = -1;
LABEL_165:
                    if (v122 != *(unsigned __int16 *)(sub_36A650(v130, v133 + (int)v110) + 20))
                    {
                      if (sub_723EC(3u))
                      {
                        sub_6BAC((uint64_t)v460);
                        uint64_t v134 = sub_188FC78(v460, (uint64_t)"Stop pattern ", 13);
                        v135 = sub_2D1500(v134, *v12);
                        v136 = sub_188FC78(v135, (uint64_t)" at trip sequence index ", 24);
                        std::ostream::operator<<();
                        uint64_t v137 = sub_188FC78(v136, (uint64_t)" and stop index ", 16);
                        std::ostream::operator<<();
                        sub_188FC78(v137, (uint64_t)" has mismatching buffer durations (sp: ", 39);
                        int v138 = (int *)sub_A11094(v5, *v12);
                        v139 = (unsigned __int16 *)((char *)v138 - *v138);
                        if (*v139 >= 9u && (uint64_t v140 = v139[4]) != 0) {
                          uint64_t v141 = (unsigned int *)((char *)v138 + v140 + *(unsigned int *)((char *)v138 + v140));
                        }
                        else {
                          uint64_t v141 = 0;
                        }
                        sub_A10764(v141, i);
                        uint64_t v142 = (void *)std::ostream::operator<<();
                        sub_188FC78(v142, (uint64_t)" sec; trip: ", 12);
                        uint64_t v143 = sub_369B60((uint64_t)(*v11 + 3), v123, 0);
                        uint8x8_t v144 = &v143[-*(int *)v143];
                        unsigned int v145 = *(unsigned __int16 *)v144;
                        if (v145 <= 4)
                        {
                          char v149 = 0;
                          uint64_t v147 = (int *)(4 * v452 + 4 + dword_4[v452]);
                          uint64_t v150 = (unsigned __int16 *)((char *)v147
                                                    - *(int *)((char *)&dword_4[v452]
                                                             + dword_4[v452]));
                          if (*v150 >= 0xDu) {
                            goto LABEL_181;
                          }
LABEL_183:
                          int v152 = -1;
                        }
                        else
                        {
                          uint64_t v146 = *((unsigned __int16 *)v144 + 2);
                          if (*((_WORD *)v144 + 2)) {
                            v146 += (uint64_t)&v143[*(unsigned int *)&v143[v146]];
                          }
                          uint64_t v147 = (int *)(v146
                                       + 4 * v452
                                       + 4
                                       + *(unsigned int *)(v146 + 4 * v452 + 4));
                          if (v145 >= 7 && (uint64_t v148 = *((unsigned __int16 *)v144 + 3)) != 0)
                          {
                            char v149 = (unsigned int *)&v143[v148 + *(unsigned int *)&v143[v148]];
                            uint64_t v150 = (unsigned __int16 *)((char *)v147 - *v147);
                            if (*v150 < 0xDu) {
                              goto LABEL_183;
                            }
                          }
                          else
                          {
                            char v149 = 0;
                            uint64_t v150 = (unsigned __int16 *)((char *)v147 - *v147);
                            if (*v150 < 0xDu) {
                              goto LABEL_183;
                            }
                          }
LABEL_181:
                          uint64_t v151 = v150[6];
                          if (!v151) {
                            goto LABEL_183;
                          }
                          int v152 = *(int *)((char *)v147 + v151);
                        }
                        sub_36A650(v149, v152 + v110);
                        uint64_t v153 = (void *)std::ostream::operator<<();
                        sub_188FC78(v153, (uint64_t)" sec.", 5);
                        std::stringbuf::str();
                        sub_7246C((uint64_t *)__p, 3u);
                        if (v459 < 0) {
                          operator delete(__p[0]);
                        }
                        *(void *)&v460[0] = v448;
                        *(void *)((char *)v460 + *(void *)(v448 - 24)) = v447;
                        if (SBYTE7(v462) < 0) {
                          operator delete((void *)v461);
                        }
                        std::streambuf::~streambuf();
                        std::ostream::~ostream();
                        std::ios::~ios();
                      }
                      char v451 = 0;
                    }
                    char v154 = sub_51D60((unsigned __int8 *)*v11 + 3896);
                    v155 = *v11;
                    if (!sub_C259D4((uint64_t)(*v11 + 487))
                      || !v155[495]
                      || (unsigned __int16 v156 = sub_367060((*v11)[495], v123, v98, v154)) == 0)
                    {
                      uint64_t v159 = sub_369B60((uint64_t)(*v11 + 3), v123, 0);
                      uint64_t v160 = &v159[-*(int *)v159];
                      unsigned int v161 = *(unsigned __int16 *)v160;
                      if (v161 <= 4)
                      {
                        v165 = 0;
                        uint64_t v163 = (int *)(4 * v452 + 4 + dword_4[v452]);
                        uint64_t v166 = (unsigned __int16 *)((char *)v163
                                                  - *(int *)((char *)&dword_4[v452]
                                                           + dword_4[v452]));
                        if (*v166 >= 0xDu) {
                          goto LABEL_205;
                        }
LABEL_207:
                        int v168 = -1;
                      }
                      else
                      {
                        uint64_t v162 = *((unsigned __int16 *)v160 + 2);
                        if (*((_WORD *)v160 + 2)) {
                          v162 += (uint64_t)&v159[*(unsigned int *)&v159[v162]];
                        }
                        uint64_t v163 = (int *)(v162
                                     + 4 * v452
                                     + 4
                                     + *(unsigned int *)(v162 + 4 * v452 + 4));
                        if (v161 >= 7 && (uint64_t v164 = *((unsigned __int16 *)v160 + 3)) != 0)
                        {
                          v165 = (unsigned int *)&v159[v164 + *(unsigned int *)&v159[v164]];
                          uint64_t v166 = (unsigned __int16 *)((char *)v163 - *v163);
                          if (*v166 < 0xDu) {
                            goto LABEL_207;
                          }
                        }
                        else
                        {
                          v165 = 0;
                          uint64_t v166 = (unsigned __int16 *)((char *)v163 - *v163);
                          if (*v166 < 0xDu) {
                            goto LABEL_207;
                          }
                        }
LABEL_205:
                        uint64_t v167 = v166[6];
                        if (!v167) {
                          goto LABEL_207;
                        }
                        int v168 = *(int *)((char *)v163 + v167);
                      }
                      uint64_t v158 = (unsigned __int8 *)(sub_36A650(v165, v168 + (int)v110) + 16);
                      goto LABEL_209;
                    }
                    uint64_t v157 = v156[5];
                    if (0xCCCCCCCCCCCCCCCDLL * ((v156[6] - v157) >> 2) <= v110)
                    {
                      int v169 = 1;
                      goto LABEL_210;
                    }
                    uint64_t v158 = (unsigned __int8 *)(v157 + 20 * v110 + 16);
LABEL_209:
                    int v169 = *v158;
LABEL_210:
                    char v170 = sub_51D60((unsigned __int8 *)*v11 + 3896);
                    uint64_t v171 = *v11;
                    if (!sub_C259D4((uint64_t)(*v11 + 487))
                      || !v171[495]
                      || (v172 = sub_367060((*v11)[495], v123, v98, v170)) == 0)
                    {
                      uint64_t v176 = sub_369B60((uint64_t)(*v11 + 3), v123, 0);
                      uint64_t v177 = &v176[-*(int *)v176];
                      unsigned int v178 = *(unsigned __int16 *)v177;
                      if (v178 <= 4)
                      {
                        long long v182 = 0;
                        uint64_t v180 = (int *)(4 * v452 + 4 + dword_4[v452]);
                        long long v183 = (unsigned __int16 *)((char *)v180
                                                  - *(int *)((char *)&dword_4[v452]
                                                           + dword_4[v452]));
                        if (*v183 >= 0xDu) {
                          goto LABEL_226;
                        }
LABEL_228:
                        int v185 = -1;
                      }
                      else
                      {
                        uint64_t v179 = *((unsigned __int16 *)v177 + 2);
                        if (*((_WORD *)v177 + 2)) {
                          v179 += (uint64_t)&v176[*(unsigned int *)&v176[v179]];
                        }
                        uint64_t v180 = (int *)(v179
                                     + 4 * v452
                                     + 4
                                     + *(unsigned int *)(v179 + 4 * v452 + 4));
                        if (v178 >= 7 && (uint64_t v181 = *((unsigned __int16 *)v177 + 3)) != 0)
                        {
                          long long v182 = (unsigned int *)&v176[v181 + *(unsigned int *)&v176[v181]];
                          long long v183 = (unsigned __int16 *)((char *)v180 - *v180);
                          if (*v183 < 0xDu) {
                            goto LABEL_228;
                          }
                        }
                        else
                        {
                          long long v182 = 0;
                          long long v183 = (unsigned __int16 *)((char *)v180 - *v180);
                          if (*v183 < 0xDu) {
                            goto LABEL_228;
                          }
                        }
LABEL_226:
                        uint64_t v184 = v183[6];
                        if (!v184) {
                          goto LABEL_228;
                        }
                        int v185 = *(int *)((char *)v180 + v184);
                      }
                      uint64_t v174 = a2;
                      int v175 = *(unsigned __int8 *)(sub_36A650(v182, v185 + (int)v449) + 17);
                      if (v442 == v441) {
                        goto LABEL_230;
                      }
                      goto LABEL_240;
                    }
                    uint64_t v173 = v172[5];
                    if (0xCCCCCCCCCCCCCCCDLL * ((v172[6] - v173) >> 2) <= v449)
                    {
                      int v175 = 1;
                      uint64_t v174 = a2;
                      if (v442 == v441)
                      {
LABEL_230:
                        if (v169 == 1)
                        {
                          unint64_t v186 = *v174;
                          unint64_t v187 = HIDWORD(*v174);
                          if (sub_A10E20(v5, HIDWORD(*v174)))
                          {
                            uint64_t v188 = (int *)sub_A1120C(*(void *)(*v5 + 3944), v186);
                          }
                          else
                          {
                            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                              && __cxa_guard_acquire(&qword_24F7308))
                            {
                              sub_518C8(0x3B60u, 0x7FCAu);
                              dword_24F7300 = v434 | 0x40000000;
                              __cxa_guard_release(&qword_24F7308);
                              uint64_t v5 = v455;
                              uint64_t v11 = v454;
                            }
                            uint64_t v189 = *v5;
                            if (dword_24F7300 == v187)
                            {
                              int v190 = sub_A10AD4(*(void *)(v189 + 3976));
                              char v191 = &v190[-*(int *)v190];
                              if (*(unsigned __int16 *)v191 >= 5u && (uint64_t v192 = *((unsigned __int16 *)v191 + 2)) != 0) {
                                v193 = (unsigned int *)&v190[v192 + *(unsigned int *)&v190[v192]];
                              }
                              else {
                                v193 = 0;
                              }
                              uint64_t v188 = (int *)sub_A1139C(v193, v186);
                            }
                            else
                            {
                              uint64_t v188 = (int *)sub_A11500(v189 + 24, v186, 0, "stop pattern");
                            }
                          }
                          uint64_t v234 = (unsigned __int16 *)((char *)v188 - *v188);
                          if (*v234 >= 9u && (uint64_t v235 = v234[4]) != 0) {
                            long double v236 = (unsigned int *)((char *)v188 + v235 + *(unsigned int *)((char *)v188 + v235));
                          }
                          else {
                            long double v236 = 0;
                          }
                          uint64_t v174 = a2;
                          if ((*(unsigned char *)(sub_A10764(v236, i) + 15) & 2) != 0)
                          {
                            if (sub_723EC(3u))
                            {
                              sub_6BAC((uint64_t)v460);
                              uint64_t v237 = sub_188FC78(v460, (uint64_t)"Realtime stop pattern ", 22);
                              uint64_t v174 = a2;
                              double v238 = sub_2D1500(v237, *a2);
                              long double v239 = sub_188FC78(v238, (uint64_t)" at trip sequence index ", 24);
                              std::ostream::operator<<();
                              long double v240 = sub_188FC78(v239, (uint64_t)" and stop index ", 16);
                              std::ostream::operator<<();
                              sub_188FC78(v240, (uint64_t)" has pickup flag where the trip does not (sp: ", 46);
                              long double v241 = (int *)sub_A11094(v5, *a2);
                              uint64_t v242 = (unsigned __int16 *)((char *)v241 - *v241);
                              if (*v242 >= 9u && (uint64_t v243 = v242[4]) != 0) {
                                v244 = (unsigned int *)((char *)v241 + v243 + *(unsigned int *)((char *)v241 + v243));
                              }
                              else {
                                v244 = 0;
                              }
                              sub_A10764(v244, i);
                              v263 = (void *)std::ostream::operator<<();
                              sub_188FC78(v263, (uint64_t)"; trip: ", 8);
                              uint64_t v264 = (void *)std::ostream::operator<<();
                              sub_188FC78(v264, (uint64_t)").", 2);
                              std::stringbuf::str();
                              sub_7246C((uint64_t *)__p, 3u);
                              if (v459 < 0) {
                                operator delete(__p[0]);
                              }
                              *(void *)&v460[0] = v448;
                              *(void *)((char *)v460 + *(void *)(v448 - 24)) = v447;
                              if (SBYTE7(v462) < 0) {
                                operator delete((void *)v461);
                              }
                              std::streambuf::~streambuf();
                              std::ostream::~ostream();
                              std::ios::~ios();
                              char v451 = 0;
                              if (v175 != 1) {
                                goto LABEL_333;
                              }
                              goto LABEL_300;
                            }
                            char v451 = 0;
                            uint64_t v174 = a2;
                          }
                        }
                        if (v175 != 1) {
                          goto LABEL_333;
                        }
LABEL_300:
                        unint64_t v245 = *v174;
                        unint64_t v246 = HIDWORD(*v174);
                        if (sub_A10E20(v5, HIDWORD(*v174)))
                        {
                          char v247 = (int *)sub_A1120C(*(void *)(*v5 + 3944), v245);
                        }
                        else
                        {
                          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                            && __cxa_guard_acquire(&qword_24F7308))
                          {
                            sub_518C8(0x3B60u, 0x7FCAu);
                            dword_24F7300 = v435 | 0x40000000;
                            __cxa_guard_release(&qword_24F7308);
                            uint64_t v5 = v455;
                            uint64_t v11 = v454;
                          }
                          uint64_t v248 = *v5;
                          if (dword_24F7300 == v246)
                          {
                            v249 = sub_A10AD4(*(void *)(v248 + 3976));
                            uint64_t v250 = &v249[-*(int *)v249];
                            if (*(unsigned __int16 *)v250 >= 5u && (uint64_t v251 = *((unsigned __int16 *)v250 + 2)) != 0) {
                              unint64_t v252 = (unsigned int *)&v249[v251 + *(unsigned int *)&v249[v251]];
                            }
                            else {
                              unint64_t v252 = 0;
                            }
                            char v247 = (int *)sub_A1139C(v252, v245);
                          }
                          else
                          {
                            char v247 = (int *)sub_A11500(v248 + 24, v245, 0, "stop pattern");
                          }
                        }
                        unint64_t v253 = (unsigned __int16 *)((char *)v247 - *v247);
                        if (*v253 >= 9u && (uint64_t v254 = v253[4]) != 0) {
                          uint64_t v255 = (unsigned int *)((char *)v247 + v254 + *(unsigned int *)((char *)v247 + v254));
                        }
                        else {
                          uint64_t v255 = 0;
                        }
                        uint64_t v174 = a2;
                        if (*(unsigned char *)(sub_A10764(v255, i) + 15))
                        {
                          if (!sub_723EC(3u))
                          {
LABEL_319:
                            char v451 = 0;
                            uint64_t v174 = a2;
                            goto LABEL_333;
                          }
                          sub_6BAC((uint64_t)v460);
                          int v256 = sub_188FC78(v460, (uint64_t)"Realtime stop pattern ", 22);
                          uint64_t v174 = a2;
                          v257 = sub_2D1500(v256, *a2);
                          uint64_t v258 = sub_188FC78(v257, (uint64_t)" at trip sequence index ", 24);
                          std::ostream::operator<<();
                          unint64_t v259 = sub_188FC78(v258, (uint64_t)" and stop index ", 16);
                          std::ostream::operator<<();
                          sub_188FC78(v259, (uint64_t)" has dropoff flag where the trip does not (sp: ", 47);
                          uint64_t v260 = (int *)sub_A11094(v5, *a2);
                          uint64_t v261 = (unsigned __int16 *)((char *)v260 - *v260);
                          if (*v261 >= 9u && (uint64_t v262 = v261[4]) != 0) {
                            uint64_t v233 = (unsigned int *)((char *)v260 + v262 + *(unsigned int *)((char *)v260 + v262));
                          }
                          else {
                            uint64_t v233 = 0;
                          }
                          goto LABEL_328;
                        }
                        goto LABEL_333;
                      }
                    }
                    else
                    {
                      uint64_t v174 = a2;
                      int v175 = *(unsigned __int8 *)(v173 + 20 * v449 + 17);
                      if (v442 == v441) {
                        goto LABEL_230;
                      }
                    }
LABEL_240:
                    unint64_t v194 = *v174;
                    unint64_t v195 = HIDWORD(*v174);
                    if (sub_A10E20(v5, HIDWORD(*v174)))
                    {
                      long long v196 = (int *)sub_A1120C(*(void *)(*v5 + 3944), v194);
                    }
                    else
                    {
                      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                        && __cxa_guard_acquire(&qword_24F7308))
                      {
                        sub_518C8(0x3B60u, 0x7FCAu);
                        dword_24F7300 = v431 | 0x40000000;
                        __cxa_guard_release(&qword_24F7308);
                        uint64_t v5 = v455;
                        uint64_t v11 = v454;
                      }
                      uint64_t v197 = *v5;
                      if (dword_24F7300 == v195)
                      {
                        uint64_t v198 = sub_A10AD4(*(void *)(v197 + 3976));
                        long long v199 = &v198[-*(int *)v198];
                        if (*(unsigned __int16 *)v199 >= 5u && (uint64_t v200 = *((unsigned __int16 *)v199 + 2)) != 0) {
                          long long v201 = (unsigned int *)&v198[v200 + *(unsigned int *)&v198[v200]];
                        }
                        else {
                          long long v201 = 0;
                        }
                        long long v196 = (int *)sub_A1139C(v201, v194);
                      }
                      else
                      {
                        long long v196 = (int *)sub_A11500(v197 + 24, v194, 0, "stop pattern");
                      }
                    }
                    long long v202 = (unsigned __int16 *)((char *)v196 - *v196);
                    if (*v202 >= 9u && (uint64_t v203 = v202[4]) != 0) {
                      int v204 = (unsigned int *)((char *)v196 + v203 + *(unsigned int *)((char *)v196 + v203));
                    }
                    else {
                      int v204 = 0;
                    }
                    if ((v169 != 1) != (*(unsigned char *)(sub_A10764(v204, i) + 15) & 2) >> 1)
                    {
                      if (sub_723EC(3u))
                      {
                        sub_6BAC((uint64_t)v460);
                        v205 = sub_188FC78(v460, (uint64_t)"Stop pattern ", 13);
                        v206 = sub_2D1500(v205, *a2);
                        uint64_t v207 = sub_188FC78(v206, (uint64_t)" at trip sequence index ", 24);
                        std::ostream::operator<<();
                        int v208 = sub_188FC78(v207, (uint64_t)" and stop index ", 16);
                        std::ostream::operator<<();
                        sub_188FC78(v208, (uint64_t)" has mismatching pickup flags (sp: ", 35);
                        v209 = (int *)sub_A11094(v5, *a2);
                        v210 = (unsigned __int16 *)((char *)v209 - *v209);
                        if (*v210 >= 9u && (uint64_t v211 = v210[4]) != 0) {
                          v212 = (unsigned int *)((char *)v209 + v211 + *(unsigned int *)((char *)v209 + v211));
                        }
                        else {
                          v212 = 0;
                        }
                        sub_A10764(v212, i);
                        uint64_t v213 = (void *)std::ostream::operator<<();
                        sub_188FC78(v213, (uint64_t)"; trip: ", 8);
                        uint64_t v214 = (void *)std::ostream::operator<<();
                        sub_188FC78(v214, (uint64_t)").", 2);
                        std::stringbuf::str();
                        sub_7246C((uint64_t *)__p, 3u);
                        if (v459 < 0) {
                          operator delete(__p[0]);
                        }
                        *(void *)&v460[0] = v448;
                        *(void *)((char *)v460 + *(void *)(v448 - 24)) = v447;
                        if (SBYTE7(v462) < 0) {
                          operator delete((void *)v461);
                        }
                        std::streambuf::~streambuf();
                        std::ostream::~ostream();
                        std::ios::~ios();
                      }
                      char v451 = 0;
                    }
                    unint64_t v215 = *a2;
                    unint64_t v216 = HIDWORD(*a2);
                    if (sub_A10E20(v5, HIDWORD(*a2)))
                    {
                      uint64_t v217 = (int *)sub_A1120C(*(void *)(*v5 + 3944), v215);
                    }
                    else
                    {
                      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                        && __cxa_guard_acquire(&qword_24F7308))
                      {
                        sub_518C8(0x3B60u, 0x7FCAu);
                        dword_24F7300 = v432 | 0x40000000;
                        __cxa_guard_release(&qword_24F7308);
                        uint64_t v5 = v455;
                        uint64_t v11 = v454;
                      }
                      uint64_t v218 = *v5;
                      if (dword_24F7300 == v216)
                      {
                        uint64_t v219 = sub_A10AD4(*(void *)(v218 + 3976));
                        uint64_t v220 = &v219[-*(int *)v219];
                        if (*(unsigned __int16 *)v220 >= 5u && (uint64_t v221 = *((unsigned __int16 *)v220 + 2)) != 0) {
                          uint64_t v222 = (unsigned int *)&v219[v221 + *(unsigned int *)&v219[v221]];
                        }
                        else {
                          uint64_t v222 = 0;
                        }
                        uint64_t v217 = (int *)sub_A1139C(v222, v215);
                      }
                      else
                      {
                        uint64_t v217 = (int *)sub_A11500(v218 + 24, v215, 0, "stop pattern");
                      }
                    }
                    uint64_t v223 = (unsigned __int16 *)((char *)v217 - *v217);
                    if (*v223 >= 9u && (uint64_t v224 = v223[4]) != 0) {
                      unint64_t v225 = (unsigned int *)((char *)v217 + v224 + *(unsigned int *)((char *)v217 + v224));
                    }
                    else {
                      unint64_t v225 = 0;
                    }
                    uint64_t v174 = a2;
                    if ((v175 != 1) != (*(unsigned char *)(sub_A10764(v225, i) + 15) & 1))
                    {
                      if (!sub_723EC(3u)) {
                        goto LABEL_319;
                      }
                      sub_6BAC((uint64_t)v460);
                      uint64_t v226 = sub_188FC78(v460, (uint64_t)"Stop pattern ", 13);
                      uint64_t v174 = a2;
                      uint64_t v227 = sub_2D1500(v226, *a2);
                      uint64_t v228 = sub_188FC78(v227, (uint64_t)" at trip sequence index ", 24);
                      std::ostream::operator<<();
                      long double v229 = sub_188FC78(v228, (uint64_t)" and stop index ", 16);
                      std::ostream::operator<<();
                      sub_188FC78(v229, (uint64_t)" has mismatching dropoff flags (sp: ", 36);
                      unint64_t v230 = (int *)sub_A11094(v5, *a2);
                      long double v231 = (unsigned __int16 *)((char *)v230 - *v230);
                      if (*v231 >= 9u && (uint64_t v232 = v231[4]) != 0) {
                        uint64_t v233 = (unsigned int *)((char *)v230 + v232 + *(unsigned int *)((char *)v230 + v232));
                      }
                      else {
                        uint64_t v233 = 0;
                      }
LABEL_328:
                      sub_A10764(v233, i);
                      long long v265 = (void *)std::ostream::operator<<();
                      sub_188FC78(v265, (uint64_t)"; trip: ", 8);
                      int v266 = (void *)std::ostream::operator<<();
                      sub_188FC78(v266, (uint64_t)").", 2);
                      std::stringbuf::str();
                      sub_7246C((uint64_t *)__p, 3u);
                      if (v459 < 0) {
                        operator delete(__p[0]);
                      }
                      *(void *)&v460[0] = v448;
                      *(void *)((char *)v460 + *(void *)(v448 - 24)) = v447;
                      if (SBYTE7(v462) < 0) {
                        operator delete((void *)v461);
                      }
                      std::streambuf::~streambuf();
                      std::ostream::~ostream();
                      std::ios::~ios();
                      char v451 = 0;
                    }
LABEL_333:
                    unint64_t v267 = *v174;
                    unint64_t v268 = HIDWORD(*v174);
                    if (sub_A10E20(v5, HIDWORD(*v174)))
                    {
                      unint64_t v269 = (int *)sub_A1120C(*(void *)(*v5 + 3944), v267);
                    }
                    else
                    {
                      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                        && __cxa_guard_acquire(&qword_24F7308))
                      {
                        sub_518C8(0x3B60u, 0x7FCAu);
                        dword_24F7300 = v430 | 0x40000000;
                        __cxa_guard_release(&qword_24F7308);
                        uint64_t v5 = v455;
                        uint64_t v11 = v454;
                      }
                      uint64_t v270 = *v5;
                      if (dword_24F7300 == v268)
                      {
                        uint64_t v271 = sub_A10AD4(*(void *)(v270 + 3976));
                        v272 = &v271[-*(int *)v271];
                        if (*(unsigned __int16 *)v272 >= 5u && (uint64_t v273 = *((unsigned __int16 *)v272 + 2)) != 0) {
                          uint64_t v274 = (unsigned int *)&v271[v273 + *(unsigned int *)&v271[v273]];
                        }
                        else {
                          uint64_t v274 = 0;
                        }
                        unint64_t v269 = (int *)sub_A1139C(v274, v267);
                      }
                      else
                      {
                        unint64_t v269 = (int *)sub_A11500(v270 + 24, v267, 0, "stop pattern");
                      }
                    }
                    long long v275 = (unsigned __int16 *)((char *)v269 - *v269);
                    long long v276 = a2;
                    unsigned int v277 = v449;
                    if (*v275 >= 0x15u && v275[10])
                    {
                      unint64_t v278 = *a2;
                      unint64_t v279 = HIDWORD(*a2);
                      if (sub_A10E20(v5, HIDWORD(*a2)))
                      {
                        v280 = (int *)sub_A1120C(*(void *)(*v5 + 3944), v278);
                      }
                      else
                      {
                        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                          && __cxa_guard_acquire(&qword_24F7308))
                        {
                          sub_518C8(0x3B60u, 0x7FCAu);
                          dword_24F7300 = v433 | 0x40000000;
                          __cxa_guard_release(&qword_24F7308);
                          uint64_t v5 = v455;
                          long long v276 = a2;
                          uint64_t v11 = v454;
                          unsigned int v277 = v449;
                        }
                        uint64_t v281 = *v5;
                        if (dword_24F7300 == v279)
                        {
                          int v282 = sub_A10AD4(*(void *)(v281 + 3976));
                          v283 = &v282[-*(int *)v282];
                          if (*(unsigned __int16 *)v283 >= 5u && (uint64_t v284 = *((unsigned __int16 *)v283 + 2)) != 0) {
                            unint64_t v285 = (unsigned int *)&v282[v284 + *(unsigned int *)&v282[v284]];
                          }
                          else {
                            unint64_t v285 = 0;
                          }
                          v280 = (int *)sub_A1139C(v285, v278);
                        }
                        else
                        {
                          v280 = (int *)sub_A11500(v281 + 24, v278, 0, "stop pattern");
                        }
                      }
                      v286 = (unsigned __int16 *)((char *)v280 - *v280);
                      if (*v286 >= 0x15u && (uint64_t v287 = v286[10]) != 0) {
                        int8x8_t v288 = (int8x8_t)sub_B61408((unsigned int *)((char *)v280+ v287+ *(unsigned int *)((char *)v280 + v287)), i);
                      }
                      else {
                        int8x8_t v288 = 0;
                      }
                      uint8x8_t v289 = sub_369B60((uint64_t)(*v11 + 3), v123, 0);
                      unint64_t v290 = &v289[-*(int *)v289];
                      if (*(unsigned __int16 *)v290 < 5u)
                      {
                        uint64_t v291 = 0;
                      }
                      else
                      {
                        uint64_t v291 = *((unsigned __int16 *)v290 + 2);
                        if (v291) {
                          v291 += (uint64_t)&v289[*(unsigned int *)&v289[v291]];
                        }
                      }
                      unint64_t v292 = (int *)(v291
                                   + 4 * v452
                                   + 4
                                   + *(unsigned int *)(v291 + 4 * v452 + 4));
                      v293 = (unsigned __int16 *)((char *)v292 - *v292);
                      if (*v293 < 0x2Bu) {
                        goto LABEL_384;
                      }
                      uint64_t v294 = v293[21];
                      if (!v294 || *(int *)((char *)v292 + v294) == -1) {
                        goto LABEL_384;
                      }
                      v295 = sub_369B60((uint64_t)(*v11 + 3), v123, 0);
                      unint64_t v296 = &v295[-*(int *)v295];
                      unsigned int v297 = *(unsigned __int16 *)v296;
                      if (v297 <= 4)
                      {
                        v301 = 0;
                        v299 = (int *)(4 * v452 + 4 + dword_4[v452]);
                        uint64_t v302 = (unsigned __int16 *)((char *)v299
                                                  - *(int *)((char *)&dword_4[v452]
                                                           + dword_4[v452]));
                        if (*v302 >= 0x2Bu) {
                          goto LABEL_376;
                        }
LABEL_378:
                        int v304 = -1;
                      }
                      else
                      {
                        uint64_t v298 = *((unsigned __int16 *)v296 + 2);
                        if (*((_WORD *)v296 + 2)) {
                          v298 += (uint64_t)&v295[*(unsigned int *)&v295[v298]];
                        }
                        v299 = (int *)(v298
                                     + 4 * v452
                                     + 4
                                     + *(unsigned int *)(v298 + 4 * v452 + 4));
                        if (v297 >= 0x17 && (uint64_t v300 = *((unsigned __int16 *)v296 + 11)) != 0)
                        {
                          v301 = (unsigned int *)&v295[v300 + *(unsigned int *)&v295[v300]];
                          uint64_t v302 = (unsigned __int16 *)((char *)v299 - *v299);
                          if (*v302 < 0x2Bu) {
                            goto LABEL_378;
                          }
                        }
                        else
                        {
                          v301 = 0;
                          uint64_t v302 = (unsigned __int16 *)((char *)v299 - *v299);
                          if (*v302 < 0x2Bu) {
                            goto LABEL_378;
                          }
                        }
LABEL_376:
                        uint64_t v303 = v302[21];
                        if (!v303) {
                          goto LABEL_378;
                        }
                        int v304 = *(int *)((char *)v299 + v303);
                      }
                      int v305 = (int *)sub_A2516C(v301, v304 + v277);
                      uint64_t v306 = (unsigned __int16 *)((char *)v305 - *v305);
                      if (*v306 >= 5u
                        && (uint64_t v307 = v306[2]) != 0
                        && (uint64_t v308 = *(unsigned int *)((char *)v305 + v307 + *(unsigned int *)((char *)v305 + v307)),
                            v308))
                      {
                        uint8x8_t v309 = (uint8x8_t)vcnt_s8(v288);
                        v309.i16[0] = vaddlv_u8(v309);
                        if (v309.u32[0] == v308) {
                          goto LABEL_397;
                        }
                      }
                      else
                      {
LABEL_384:
                        if (!*(void *)&v288) {
                          goto LABEL_397;
                        }
                      }
                      long long v276 = a2;
                      unsigned int v277 = v449;
                      if (sub_723EC(3u))
                      {
                        sub_6BAC((uint64_t)v460);
                        v310 = sub_188FC78(v460, (uint64_t)"Stop pattern ", 13);
                        uint64_t v311 = sub_2D1500(v310, *a2);
                        uint64_t v312 = sub_188FC78(v311, (uint64_t)" at trip sequence index ", 24);
                        std::ostream::operator<<();
                        double v313 = sub_188FC78(v312, (uint64_t)" and stop index ", 16);
                        std::ostream::operator<<();
                        sub_188FC78(v313, (uint64_t)" has mismatching number of boarding restriction identifiers (sp: ", 65);
                        uint64_t v314 = (int *)sub_A11094(v5, *a2);
                        long long v315 = (unsigned __int16 *)((char *)v314 - *v314);
                        if (*v315 < 0x15u)
                        {
                          uint64_t v316 = 0;
                        }
                        else
                        {
                          uint64_t v316 = v315[10];
                          if (v316) {
                            uint64_t v316 = sub_B61408((unsigned int *)((char *)v314+ v316+ *(unsigned int *)((char *)v314 + v316)), i);
                          }
                        }
                        uint64_t v457 = v316;
                        v467[0] = 1;
                        sub_2601C(&v457, 0, (uint64_t)&v457, 0x20u, v467);
                        uint64_t v317 = (void *)std::ostream::operator<<();
                        sub_188FC78(v317, (uint64_t)"; trip: ", 8);
                        sub_C23CDC(v11, v452, v449, __p);
                        int64_t v318 = (void *)std::ostream::operator<<();
                        sub_188FC78(v318, (uint64_t)").", 2);
                        if (__p[0])
                        {
                          __p[1] = __p[0];
                          operator delete(__p[0]);
                        }
                        std::stringbuf::str();
                        sub_7246C((uint64_t *)__p, 3u);
                        if (v459 < 0) {
                          operator delete(__p[0]);
                        }
                        *(void *)&v460[0] = v448;
                        *(void *)((char *)v460 + *(void *)(v448 - 24)) = v447;
                        if (SBYTE7(v462) < 0) {
                          operator delete((void *)v461);
                        }
                        std::streambuf::~streambuf();
                        std::ostream::~ostream();
                        std::ios::~ios();
                      }
                    }
LABEL_397:
                    uint64_t v319 = sub_B6EA30(v5, *v276, i);
                    long long v320 = sub_369B60((uint64_t)(*v11 + 3), v123, 0);
                    long long v321 = &v320[-*(int *)v320];
                    if (*(unsigned __int16 *)v321 >= 5u && (uint64_t v322 = *((unsigned __int16 *)v321 + 2)) != 0) {
                      unint64_t v323 = (unsigned int *)&v320[v322 + *(unsigned int *)&v320[v322]];
                    }
                    else {
                      unint64_t v323 = 0;
                    }
                    unint64_t v324 = (int *)sub_B612A4(v323, v452);
                    unint64_t v325 = HIDWORD(v452);
                    uint64_t v326 = (unsigned __int16 *)((char *)v324 - *v324);
                    unsigned int v327 = *v326;
                    if (v327 < 0x27)
                    {
                      if (v327 < 0x11) {
                        goto LABEL_410;
                      }
                    }
                    else if (v326[19])
                    {
                      int v328 = sub_B61408((unsigned int *)((char *)v324 + v326[19] + *(unsigned int *)((char *)v324 + v326[19])), v277);
                      int v329 = HIDWORD(v452);
                      if (v328 != -1) {
                        goto LABEL_408;
                      }
                      goto LABEL_410;
                    }
                    uint64_t v330 = v326[8];
                    if (v330)
                    {
                      int v328 = *(int *)((char *)v324 + v330);
                      int v329 = HIDWORD(v452);
                      if (v328 != -1)
                      {
LABEL_408:
                        if (HIDWORD(v319) != v329) {
                          goto LABEL_412;
                        }
                        goto LABEL_411;
                      }
                    }
LABEL_410:
                    int v328 = -1;
                    if (HIDWORD(v319)) {
                      goto LABEL_412;
                    }
LABEL_411:
                    if (v328 == v319) {
                      goto LABEL_431;
                    }
LABEL_412:
                    if (!sub_723EC(3u))
                    {
                      char v451 = 0;
                      long long v276 = a2;
                      goto LABEL_431;
                    }
                    sub_6BAC((uint64_t)v460);
                    v331 = sub_188FC78(v460, (uint64_t)"Stop pattern ", 13);
                    long long v276 = a2;
                    uint64_t v332 = sub_2D1500(v331, *a2);
                    int v333 = sub_188FC78(v332, (uint64_t)" at trip sequence index ", 24);
                    std::ostream::operator<<();
                    long long v334 = sub_188FC78(v333, (uint64_t)" and stop index ", 16);
                    std::ostream::operator<<();
                    long long v335 = sub_188FC78(v334, (uint64_t)" has mismatching direction name ref (sp: ", 41);
                    uint64_t v336 = sub_B6EA30(v5, *a2, i);
                    int v337 = sub_2D1500(v335, v336);
                    int v338 = sub_188FC78(v337, (uint64_t)"; trip: ", 8);
                    unint64_t v339 = sub_369B60((uint64_t)(*v11 + 3), v123, 0);
                    unint64_t v340 = &v339[-*(int *)v339];
                    if (*(unsigned __int16 *)v340 >= 5u && (uint64_t v341 = *((unsigned __int16 *)v340 + 2)) != 0) {
                      uint64_t v342 = (unsigned int *)&v339[v341 + *(unsigned int *)&v339[v341]];
                    }
                    else {
                      uint64_t v342 = 0;
                    }
                    v343 = (int *)sub_B612A4(v342, v452);
                    v344 = (unsigned __int16 *)((char *)v343 - *v343);
                    unsigned int v345 = *v344;
                    if (v345 < 0x27)
                    {
                      if (v345 >= 0x11)
                      {
LABEL_423:
                        uint64_t v348 = v344[8];
                        if (v348)
                        {
                          unsigned int v346 = *(int *)((char *)v343 + v348);
                          unint64_t v347 = HIDWORD(v452);
                          if (v346 != -1) {
                            goto LABEL_426;
                          }
                        }
                      }
LABEL_425:
                      unint64_t v347 = 0;
                      unsigned int v346 = -1;
                      goto LABEL_426;
                    }
                    if (!v344[19]) {
                      goto LABEL_423;
                    }
                    unsigned int v346 = sub_B61408((unsigned int *)((char *)v343 + v344[19] + *(unsigned int *)((char *)v343 + v344[19])), v449);
                    unint64_t v347 = HIDWORD(v452);
                    if (v346 == -1) {
                      goto LABEL_425;
                    }
LABEL_426:
                    uint64_t v349 = sub_2D1500(v338, v346 | (v347 << 32));
                    sub_188FC78(v349, (uint64_t)").", 2);
                    std::stringbuf::str();
                    sub_7246C((uint64_t *)__p, 3u);
                    if (v459 < 0) {
                      operator delete(__p[0]);
                    }
                    *(void *)&v460[0] = v448;
                    *(void *)((char *)v460 + *(void *)(v448 - 24)) = v447;
                    if (SBYTE7(v462) < 0) {
                      operator delete((void *)v461);
                    }
                    std::streambuf::~streambuf();
                    std::ostream::~ostream();
                    std::ios::~ios();
                    char v451 = 0;
LABEL_431:
                    unint64_t v350 = sub_B6EA30(v5, *v276, i);
                    int v351 = -1;
                    if (HIDWORD(v350) && v350 != 0xFFFFFFFFLL)
                    {
                      uint64_t v352 = (int *)sub_B61568(*v5 + 24, v350, 0, "routing direction name");
                      int v353 = (unsigned __int16 *)((char *)v352 - *v352);
                      if (*v353 >= 5u && (uint64_t v354 = v353[2]) != 0) {
                        int v351 = *(int *)((char *)v352 + v354);
                      }
                      else {
                        int v351 = 0;
                      }
                    }
                    uint64_t v355 = sub_369B60((uint64_t)(*v11 + 3), v123, 0);
                    v356 = &v355[-*(int *)v355];
                    if (*(unsigned __int16 *)v356 >= 5u && (uint64_t v357 = *((unsigned __int16 *)v356 + 2)) != 0) {
                      uint64_t v358 = (unsigned int *)&v355[v357 + *(unsigned int *)&v355[v357]];
                    }
                    else {
                      uint64_t v358 = 0;
                    }
                    uint64_t v359 = (int *)sub_B612A4(v358, v452);
                    uint64_t v360 = (unsigned __int16 *)((char *)v359 - *v359);
                    unsigned int v361 = *v360;
                    if (v361 < 0x27)
                    {
                      unsigned int v362 = v449;
                      if (v361 < 0x11) {
                        goto LABEL_452;
                      }
                    }
                    else
                    {
                      unsigned int v362 = v449;
                      if (v360[19])
                      {
                        unsigned int v363 = sub_B61408((unsigned int *)((char *)v359 + v360[19] + *(unsigned int *)((char *)v359 + v360[19])), v449);
                        unsigned int v362 = v449;
                        LODWORD(v364) = -1;
                        if (v363 == -1) {
                          goto LABEL_453;
                        }
                        goto LABEL_448;
                      }
                    }
                    uint64_t v364 = v360[8];
                    if (!v364)
                    {
LABEL_452:
                      LODWORD(v364) = -1;
LABEL_453:
                      uint64_t v365 = a2;
LABEL_454:
                      if (v351 == v364) {
                        goto LABEL_467;
                      }
                      goto LABEL_455;
                    }
                    unsigned int v363 = *(int *)((char *)v359 + v364);
                    LODWORD(v364) = -1;
                    if (v363 == -1) {
                      goto LABEL_453;
                    }
LABEL_448:
                    uint64_t v365 = a2;
                    if (!v446) {
                      goto LABEL_454;
                    }
                    uint64_t v366 = (int *)sub_B61568((uint64_t)(*v11 + 3), v452 & 0xFFFFFFFF00000000 | v363, 0, "routing direction name");
                    uint64_t v367 = (unsigned __int16 *)((char *)v366 - *v366);
                    if (*v367 >= 5u)
                    {
                      uint64_t v364 = v367[2];
                      unsigned int v362 = v449;
                      if (v364) {
                        LODWORD(v364) = *(int *)((char *)v366 + v364);
                      }
                      goto LABEL_453;
                    }
                    uint64_t v365 = a2;
                    unsigned int v362 = v449;
                    if (!v351) {
                      goto LABEL_467;
                    }
LABEL_455:
                    if (sub_723EC(3u))
                    {
                      sub_6BAC((uint64_t)v460);
                      unsigned int v362 = v449;
                      unint64_t v368 = sub_188FC78(v460, (uint64_t)"Stop pattern ", 13);
                      uint64_t v365 = a2;
                      long double v369 = sub_2D1500(v368, *a2);
                      uint64_t v370 = sub_188FC78(v369, (uint64_t)" at trip sequence index ", 24);
                      std::ostream::operator<<();
                      long double v371 = sub_188FC78(v370, (uint64_t)" and stop index ", 16);
                      std::ostream::operator<<();
                      uint64x2_t v372 = sub_188FC78(v371, (uint64_t)" has mismatching direction name sort key (sp: ", 46);
                      unint64_t v373 = sub_B6EA30(v5, *a2, i);
                      if (HIDWORD(v373) && v373 != 0xFFFFFFFFLL) {
                        sub_B61568(*v5 + 24, v373, 0, "routing direction name");
                      }
                      std::ostream::operator<<();
                      long double v374 = sub_188FC78(v372, (uint64_t)"; trip: ", 8);
                      sub_B60FC4(v11, v452, v449);
                      std::ostream::operator<<();
                      sub_188FC78(v374, (uint64_t)").", 2);
                      std::stringbuf::str();
                      sub_7246C((uint64_t *)__p, 3u);
                      if (v459 < 0) {
                        operator delete(__p[0]);
                      }
                      *(void *)&v460[0] = v448;
                      *(void *)((char *)v460 + *(void *)(v448 - 24)) = v447;
                      if (SBYTE7(v462) < 0) {
                        operator delete((void *)v461);
                      }
                      std::streambuf::~streambuf();
                      std::ostream::~ostream();
                      std::ios::~ios();
                      char v451 = 0;
                    }
                    else
                    {
                      char v451 = 0;
                      uint64_t v365 = a2;
                      unsigned int v362 = v449;
                    }
LABEL_467:
                    uint64_t v375 = sub_B6E894(v5, *v365, i);
                    double v376 = sub_369B60((uint64_t)(*v11 + 3), v123, 0);
                    long double v377 = &v376[-*(int *)v376];
                    if (*(unsigned __int16 *)v377 >= 5u && (uint64_t v378 = *((unsigned __int16 *)v377 + 2)) != 0) {
                      unint64_t v379 = (unsigned int *)&v376[v378 + *(unsigned int *)&v376[v378]];
                    }
                    else {
                      unint64_t v379 = 0;
                    }
                    double v380 = (int *)sub_B612A4(v379, v452);
                    uint64_t v381 = (unsigned __int16 *)((char *)v380 - *v380);
                    unsigned int v382 = *v381;
                    if (v382 < 0x25)
                    {
                      if (v382 < 0xF) {
                        goto LABEL_480;
                      }
                    }
                    else if (v381[18])
                    {
                      int v383 = sub_B61408((unsigned int *)((char *)v380 + v381[18] + *(unsigned int *)((char *)v380 + v381[18])), v362);
                      int v384 = HIDWORD(v452);
                      if (v383 != -1) {
                        goto LABEL_478;
                      }
                      goto LABEL_480;
                    }
                    uint64_t v385 = v381[7];
                    if (v385)
                    {
                      int v383 = *(int *)((char *)v380 + v385);
                      int v384 = HIDWORD(v452);
                      if (v383 != -1)
                      {
LABEL_478:
                        if (HIDWORD(v375) != v384) {
                          goto LABEL_482;
                        }
                        goto LABEL_481;
                      }
                    }
LABEL_480:
                    int v383 = -1;
                    if (HIDWORD(v375)) {
                      goto LABEL_482;
                    }
LABEL_481:
                    if (v383 == v375) {
                      goto LABEL_501;
                    }
LABEL_482:
                    if (!sub_723EC(3u))
                    {
                      char v451 = 0;
                      uint64_t v365 = a2;
                      goto LABEL_501;
                    }
                    sub_6BAC((uint64_t)v460);
                    uint64_t v386 = sub_188FC78(v460, (uint64_t)"Stop pattern ", 13);
                    uint64_t v365 = a2;
                    uint64_t v387 = sub_2D1500(v386, *a2);
                    uint64_t v388 = sub_188FC78(v387, (uint64_t)" at trip sequence index ", 24);
                    std::ostream::operator<<();
                    v389 = sub_188FC78(v388, (uint64_t)" and stop index ", 16);
                    std::ostream::operator<<();
                    v390 = sub_188FC78(v389, (uint64_t)" has mismatching headsign ref (sp: ", 35);
                    uint64_t v391 = sub_B6E894(v5, *a2, i);
                    int v392 = sub_2D1500(v390, v391);
                    unint64_t v393 = sub_188FC78(v392, (uint64_t)"; trip: ", 8);
                    unint64_t v394 = sub_369B60((uint64_t)(*v11 + 3), v123, 0);
                    v395 = &v394[-*(int *)v394];
                    if (*(unsigned __int16 *)v395 >= 5u && (uint64_t v396 = *((unsigned __int16 *)v395 + 2)) != 0) {
                      unint64_t v397 = (unsigned int *)&v394[v396 + *(unsigned int *)&v394[v396]];
                    }
                    else {
                      unint64_t v397 = 0;
                    }
                    uint64_t v398 = (int *)sub_B612A4(v397, v452);
                    uint64_t v399 = (unsigned __int16 *)((char *)v398 - *v398);
                    unsigned int v400 = *v399;
                    if (v400 < 0x25)
                    {
                      if (v400 >= 0xF)
                      {
LABEL_493:
                        uint64_t v402 = v399[7];
                        if (v402)
                        {
                          unsigned int v401 = *(int *)((char *)v398 + v402);
                          if (v401 != -1) {
                            goto LABEL_496;
                          }
                        }
                      }
LABEL_495:
                      unint64_t v325 = 0;
                      unsigned int v401 = -1;
                      goto LABEL_496;
                    }
                    if (!v399[18]) {
                      goto LABEL_493;
                    }
                    unsigned int v401 = sub_B61408((unsigned int *)((char *)v398 + v399[18] + *(unsigned int *)((char *)v398 + v399[18])), v449);
                    if (v401 == -1) {
                      goto LABEL_495;
                    }
LABEL_496:
                    long long v403 = sub_2D1500(v393, v401 | (v325 << 32));
                    sub_188FC78(v403, (uint64_t)").", 2);
                    std::stringbuf::str();
                    sub_7246C((uint64_t *)__p, 3u);
                    if (v459 < 0) {
                      operator delete(__p[0]);
                    }
                    *(void *)&v460[0] = v448;
                    *(void *)((char *)v460 + *(void *)(v448 - 24)) = v447;
                    if (SBYTE7(v462) < 0) {
                      operator delete((void *)v461);
                    }
                    std::streambuf::~streambuf();
                    std::ostream::~ostream();
                    std::ios::~ios();
                    char v451 = 0;
LABEL_501:
                    unint64_t v404 = sub_B6E894(v5, *v365, i);
                    int v405 = -1;
                    if (HIDWORD(v404) && v404 != 0xFFFFFFFFLL)
                    {
                      v406 = (int *)sub_B61ADC(*v5 + 24, v404, 0, "routing headsign");
                      int v407 = (unsigned __int16 *)((char *)v406 - *v406);
                      if (*v407 >= 5u && (uint64_t v408 = v407[2]) != 0) {
                        int v405 = *(int *)((char *)v406 + v408);
                      }
                      else {
                        int v405 = 0;
                      }
                    }
                    unint64_t v409 = sub_369B60((uint64_t)(*v11 + 3), v123, 0);
                    unint64_t v410 = &v409[-*(int *)v409];
                    if (*(unsigned __int16 *)v410 >= 5u && (uint64_t v411 = *((unsigned __int16 *)v410 + 2)) != 0) {
                      uint64_t v412 = (unsigned int *)&v409[v411 + *(unsigned int *)&v409[v411]];
                    }
                    else {
                      uint64_t v412 = 0;
                    }
                    long long v413 = (int *)sub_B612A4(v412, v452);
                    long long v414 = (unsigned __int16 *)((char *)v413 - *v413);
                    unsigned int v415 = *v414;
                    if (v415 < 0x25)
                    {
                      if (v415 < 0xF)
                      {
                        uint64_t v12 = (uint64_t *)a2;
                        if (v405 != -1) {
                          goto LABEL_527;
                        }
                        continue;
                      }
                    }
                    else if (v414[18])
                    {
                      unsigned int v416 = sub_B61408((unsigned int *)((char *)v413 + v414[18] + *(unsigned int *)((char *)v413 + v414[18])), v449);
                      LODWORD(v417) = -1;
                      if (v416 == -1) {
                        goto LABEL_526;
                      }
                      goto LABEL_518;
                    }
                    uint64_t v417 = v414[7];
                    if (!v417)
                    {
                      LODWORD(v417) = -1;
LABEL_526:
                      uint64_t v12 = (uint64_t *)a2;
                      if (v405 != v417) {
                        goto LABEL_527;
                      }
                      continue;
                    }
                    unsigned int v416 = *(int *)((char *)v413 + v417);
                    LODWORD(v417) = -1;
                    if (v416 == -1) {
                      goto LABEL_526;
                    }
LABEL_518:
                    if (!v446) {
                      goto LABEL_526;
                    }
                    uint64_t v418 = (int *)sub_B61ADC((uint64_t)(*v11 + 3), v452 & 0xFFFFFFFF00000000 | v416, 0, "routing headsign");
                    v419 = (unsigned __int16 *)((char *)v418 - *v418);
                    if (*v419 >= 5u)
                    {
                      uint64_t v417 = v419[2];
                      if (v417)
                      {
                        uint64_t v12 = (uint64_t *)a2;
                        if (v405 != *(int *)((char *)v418 + v417)) {
                          goto LABEL_527;
                        }
                        continue;
                      }
                      goto LABEL_526;
                    }
                    uint64_t v12 = (uint64_t *)a2;
                    if (v405)
                    {
LABEL_527:
                      if (sub_723EC(3u))
                      {
                        sub_6BAC((uint64_t)v460);
                        unint64_t v420 = sub_188FC78(v460, (uint64_t)"Stop pattern ", 13);
                        uint64_t v12 = (uint64_t *)a2;
                        unint64_t v421 = sub_2D1500(v420, *a2);
                        uint8x8_t v422 = sub_188FC78(v421, (uint64_t)" at trip sequence index ", 24);
                        std::ostream::operator<<();
                        int v423 = sub_188FC78(v422, (uint64_t)" and stop index ", 16);
                        std::ostream::operator<<();
                        v424 = sub_188FC78(v423, (uint64_t)" has mismatching headsign sort key (sp: ", 40);
                        unint64_t v425 = sub_B6E894(v5, *a2, i);
                        if (HIDWORD(v425) && v425 != 0xFFFFFFFFLL) {
                          sub_B61ADC(*v5 + 24, v425, 0, "routing headsign");
                        }
                        std::ostream::operator<<();
                        v426 = sub_188FC78(v424, (uint64_t)"; trip: ", 8);
                        sub_B61134(v11, v452, v449);
                        std::ostream::operator<<();
                        sub_188FC78(v426, (uint64_t)").", 2);
                        std::stringbuf::str();
                        sub_7246C((uint64_t *)__p, 3u);
                        if (v459 < 0) {
                          operator delete(__p[0]);
                        }
                        *(void *)&v460[0] = v448;
                        *(void *)((char *)v460 + *(void *)(v448 - 24)) = v447;
                        if (SBYTE7(v462) < 0) {
                          operator delete((void *)v461);
                        }
                        std::streambuf::~streambuf();
                        std::ostream::~ostream();
                        std::ios::~ios();
                        char v451 = 0;
                      }
                      else
                      {
                        char v451 = 0;
                        uint64_t v12 = (uint64_t *)a2;
                      }
                    }
                  }
                }
              }
            }
          }
          else
          {
            char v451 = 0;
            uint64_t v12 = (uint64_t *)a2;
          }
          if (v465)
          {
            int v466 = (uint64_t *)v465;
            operator delete(v465);
          }
          uint64_t v9 = v440;
          uint64_t v10 = v450;
LABEL_7:
          if (++v10 == v9) {
            return v451 & 1;
          }
        }
        while (1)
        {
          if (*(unsigned char *)(a1 + 16))
          {
            char v15 = sub_2AB7E4(**v11);
            uint64_t v5 = v455;
            uint64_t v11 = v454;
            if ((v15 & 1) == 0) {
              goto LABEL_58;
            }
          }
          char v16 = *v11;
          uint64_t v17 = __ROR8__(*v13, 32);
          LODWORD(__p[0]) = v17;
          LODWORD(v457) = 1;
          *(void *)&v460[0] = &v457;
          *((void *)&v460[0] + 1) = __p;
          unint64_t v18 = v16[485] + 1;
          v16[485] = v18;
          uint64_t v19 = v16[3];
          if (!v19)
          {
LABEL_51:
            sub_2A54B4((int **)v460);
            goto LABEL_52;
          }
          char v20 = v16 + 5;
          if (*((_DWORD *)v16 + 154) == v17)
          {
            unsigned int v21 = 24;
            goto LABEL_23;
          }
          if (*((_DWORD *)v16 + 160) == v17)
          {
            unsigned int v21 = 25;
            goto LABEL_23;
          }
          if (*((_DWORD *)v16 + 166) == v17) {
            break;
          }
          if (*((_DWORD *)v16 + 172) == v17)
          {
            unsigned int v21 = 27;
LABEL_23:
            ++v16[486];
            uint64_t v22 = &v20[3 * v21];
            v22[1] = v18;
            unsigned int v23 = (unsigned int *)v22[2];
            if (!v23) {
              goto LABEL_51;
            }
            goto LABEL_24;
          }
          unint64_t v41 = v16[84];
          unint64_t v42 = v16[81];
          unint64_t v43 = v16[78];
          unint64_t v44 = v16[87];
          unsigned int v23 = (unsigned int *)sub_2AB884(v19, 6, v17, 1);
          if (v43 >= v18) {
            unint64_t v45 = v18;
          }
          else {
            unint64_t v45 = v43;
          }
          if (v43 >= v18) {
            int v46 = 0;
          }
          else {
            int v46 = 24;
          }
          if (v42 < v45)
          {
            unint64_t v45 = v42;
            int v46 = 25;
          }
          if (v41 < v45)
          {
            int v46 = 26;
            unint64_t v45 = v41;
          }
          BOOL v47 = v44 >= v45;
          unsigned int v48 = 27;
          if (v47) {
            unsigned int v48 = v46;
          }
          unint64_t v49 = &v20[3 * v48];
          *(_DWORD *)unint64_t v49 = __p[0];
          v49[1] = v16[485];
          void v49[2] = (uint64_t)v23;
          if (!v23) {
            goto LABEL_51;
          }
LABEL_24:
          unsigned int v24 = (int *)((char *)v23 + *v23);
          uint64_t v25 = (unsigned __int16 *)((char *)v24 - *v24);
          if (*v25 >= 0x2Bu
            && (uint64_t v26 = v25[21]) != 0
            && (BOOL v27 = (int *)((char *)v24 + v26 + *(unsigned int *)((char *)v24 + v26)),
                uint64_t v28 = (unsigned __int16 *)((char *)v27 - *v27),
                *v28 >= 5u)
            && (uint64_t v29 = v28[2]) != 0
            && *(unsigned int *)((char *)v27 + v29 + *(unsigned int *)((char *)v27 + v29)) > HIDWORD(v17))
          {
            unsigned int v30 = *((_DWORD *)v13 + 2);
            uint64_t v11 = v454;
            unint64_t v31 = (int *)sub_369F8C((uint64_t)(*v454 + 3), __ROR8__(*v13, 32), 0, "trip");
            uint64_t v32 = (unsigned __int16 *)((char *)v31 - *v31);
            uint64_t v5 = v455;
            if (*v32 >= 0x17u)
            {
              uint64_t v33 = v32[11];
              if (v33)
              {
                if (v30 < *(unsigned __int16 *)((char *)v31 + v33)) {
                  goto LABEL_58;
                }
              }
            }
            if (sub_723EC(3u))
            {
              sub_6BAC((uint64_t)v460);
              uint64_t v5 = v455;
              unint64_t v34 = sub_188FC78(v460, (uint64_t)"Stop pattern ", 13);
              uint64_t v35 = sub_2D1500(v34, *a2);
              int v36 = sub_188FC78(v35, (uint64_t)" at trip sequence index ", 24);
              std::ostream::operator<<();
              std::string::size_type v37 = sub_188FC78(v36, (uint64_t)" has a trip ref ", 16);
              int v38 = sub_188FC78(v37, (uint64_t)"(", 1);
              uint64_t v39 = sub_2D1500(v38, *v13);
              sub_188FC78(v39, (uint64_t)", ", 2);
              int v40 = (void *)std::ostream::operator<<();
              sub_188FC78(v40, (uint64_t)")", 1);
              sub_188FC78(v37, (uint64_t)", whose schedule index is too large.", 36);
              std::stringbuf::str();
              uint64_t v11 = v454;
              sub_7246C((uint64_t *)__p, 3u);
              if (v459 < 0) {
                operator delete(__p[0]);
              }
              *(void *)&v460[0] = v448;
              *(void *)((char *)v460 + *(void *)(v448 - 24)) = v447;
              if ((SBYTE7(v462) & 0x80000000) == 0) {
                goto LABEL_57;
              }
              goto LABEL_56;
            }
LABEL_11:
            char v451 = 0;
            uint64_t v5 = v455;
            uint64_t v11 = v454;
            unsigned int v13 = (uint64_t *)((char *)v13 + 12);
            if (v13 == v14) {
              goto LABEL_59;
            }
          }
          else
          {
LABEL_52:
            if (!sub_723EC(3u)) {
              goto LABEL_11;
            }
            *(void *)&v460[0] = v445;
            *(void *)((char *)v460 + *(void *)(v445 - 24)) = v444;
            BOOL v50 = (std::ios_base *)((char *)v460 + *(void *)(*(void *)&v460[0] - 24));
            std::ios_base::init(v50, (char *)v460 + 8);
            uint64_t v5 = v455;
            v50[1].__vftable = 0;
            v50[1].__fmtflags_ = -1;
            std::streambuf::basic_streambuf();
            long long v461 = 0u;
            long long v462 = 0u;
            int v463 = 16;
            unsigned int v51 = sub_188FC78(v460, (uint64_t)"Stop pattern ", 13);
            uint64_t v11 = v454;
            int v52 = sub_2D1500(v51, *a2);
            uint64_t v53 = sub_188FC78(v52, (uint64_t)" at trip sequence index ", 24);
            std::ostream::operator<<();
            unsigned int v54 = sub_188FC78(v53, (uint64_t)" has a trip ref ", 16);
            char v55 = sub_188FC78(v54, (uint64_t)"(", 1);
            uint64_t v56 = sub_2D1500(v55, *v13);
            sub_188FC78(v56, (uint64_t)", ", 2);
            uint64_t v57 = (void *)std::ostream::operator<<();
            sub_188FC78(v57, (uint64_t)")", 1);
            sub_188FC78(v54, (uint64_t)", which does not exist in the data.", 35);
            std::stringbuf::str();
            sub_7246C((uint64_t *)__p, 3u);
            if (v459 < 0) {
              operator delete(__p[0]);
            }
            *(void *)&v460[0] = v448;
            *(void *)((char *)v460 + *(void *)(v448 - 24)) = v447;
            if ((SBYTE7(v462) & 0x80000000) == 0) {
              goto LABEL_57;
            }
LABEL_56:
            operator delete((void *)v461);
LABEL_57:
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
            char v451 = 0;
LABEL_58:
            unsigned int v13 = (uint64_t *)((char *)v13 + 12);
            if (v13 == v14) {
              goto LABEL_59;
            }
          }
        }
        unsigned int v21 = 26;
        goto LABEL_23;
      }
    }
  }
  char v451 = 1;
  return v451 & 1;
}

void sub_C23850(_Unwind_Exception *a1)
{
}

void sub_C23868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  __cxa_guard_abort(&qword_24F7308);
  unint64_t v45 = *(void **)(v43 - 120);
  if (!v45) {
    _Unwind_Resume(a1);
  }
  *(void *)(v43 - 112) = v45;
  operator delete(v45);
  _Unwind_Resume(a1);
}

void *sub_C23A64(void **a1, unsigned int *a2)
{
  uint64_t v5 = (char *)a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  uint64_t v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v8 = (char *)*a1;
    uint64_t v9 = v5 - (unsigned char *)*a1;
    uint64_t v10 = v9 >> 3;
    unint64_t v11 = (v9 >> 3) + 1;
    if (v11 >> 61) {
      sub_2E00();
    }
    uint64_t v12 = v4 - (void)v8;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 61) {
        sub_188D718();
      }
      uint64_t v14 = operator new(8 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    char v15 = &v14[8 * v10];
    void *v15 = *a2;
    uint64_t v7 = v15 + 1;
    if (v5 != v8)
    {
      unint64_t v16 = v5 - v8 - 8;
      if (v16 < 0x58) {
        goto LABEL_28;
      }
      if ((unint64_t)(v5 - v14 - v9) < 0x20) {
        goto LABEL_28;
      }
      uint64_t v17 = (v16 >> 3) + 1;
      uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v6 = &v5[-v18];
      char v15 = (void *)((char *)v15 - v18);
      uint64_t v19 = &v14[8 * v10 - 16];
      char v20 = (long long *)(v5 - 16);
      uint64_t v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v22 = *v20;
        *(v19 - 1) = *(v20 - 1);
        _OWORD *v19 = v22;
        v19 -= 2;
        v20 -= 2;
        v21 -= 4;
      }
      while (v21);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_28:
        do
        {
          uint64_t v23 = *((void *)v6 - 1);
          v6 -= 8;
          *--char v15 = v23;
        }
        while (v6 != v8);
      }
      uint64_t v6 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v7;
    a1[2] = &v14[8 * v13];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *(void *)uint64_t v5 = *a2;
    uint64_t v7 = v5 + 8;
  }
  a1[1] = v7;
  return v7 - 1;
}

int *sub_C23BD0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL result = (int *)sub_8DFD1C(*a1 + 24, __ROR8__(a2, 32), 0, "line");
  uint64_t v5 = (unsigned __int16 *)((char *)result - *result);
  if (*v5 >= 9u
    && (uint64_t v6 = v5[4]) != 0
    && (uint64_t v7 = result,
        uint64_t v8 = *(unsigned int *)((char *)result + v6),
        uint64_t v9 = *(unsigned int *)((char *)result + v6 + v8),
        v9))
  {
    uint64_t v10 = v9;
    unint64_t v11 = operator new(8 * v9);
    *(void *)&long long v15 = v11;
    *((void *)&v15 + 1) = v11;
    unint64_t v16 = &v11[v10];
    uint64_t v12 = (unsigned int *)((char *)v7 + v8 + v6 + 8);
    do
    {
      unint64_t v17 = *v12 | ((unint64_t)*(v12 - 1) << 32);
      BOOL result = (int *)sub_A19B54((unint64_t *)&v15, v11, &v17);
      unint64_t v11 = result + 2;
      v12 += 2;
      --v10;
    }
    while (v10 * 8);
    long long v13 = v15;
    uint64_t v14 = v16;
  }
  else
  {
    uint64_t v14 = 0;
    long long v13 = 0uLL;
  }
  *(_OWORD *)a3 = v13;
  *(void *)(a3 + 16) = v14;
  return result;
}

void sub_C23CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_C23CDC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  unsigned int v5 = a2;
  unint64_t v8 = __ROR8__(a2, 32);
  BOOL result = (int *)sub_369B60(*a1 + 24, v8, 0);
  uint64_t v10 = (unsigned __int16 *)((char *)result - *result);
  if (*v10 < 5u)
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = v10[2];
    if (v11) {
      v11 += (uint64_t)result + *(unsigned int *)((char *)result + v11);
    }
  }
  uint64_t v12 = (int *)(v11 + 4 * v5 + 4 + *(unsigned int *)(v11 + 4 * v5 + 4));
  long long v13 = (unsigned __int16 *)((char *)v12 - *v12);
  if (*v13 < 0x2Bu) {
    goto LABEL_26;
  }
  uint64_t v14 = v13[21];
  if (!v14 || *(int *)((char *)v12 + v14) == -1) {
    goto LABEL_26;
  }
  long long v15 = sub_369B60(*a1 + 24, v8, 0);
  unint64_t v16 = &v15[-*(int *)v15];
  unsigned int v17 = *(unsigned __int16 *)v16;
  if (v17 <= 4)
  {
    uint64_t v21 = 0;
    uint64_t v19 = (int *)(4 * v5 + 4 + dword_4[v5]);
    long long v22 = (unsigned __int16 *)((char *)v19 - *(int *)((char *)&dword_4[v5] + dword_4[v5]));
    if (*v22 < 0x2Bu) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v18 = *((unsigned __int16 *)v16 + 2);
    if (*((_WORD *)v16 + 2)) {
      v18 += (uint64_t)&v15[*(unsigned int *)&v15[v18]];
    }
    uint64_t v19 = (int *)(v18 + 4 * v5 + 4 + *(unsigned int *)(v18 + 4 * v5 + 4));
    if (v17 >= 0x17 && (uint64_t v20 = *((unsigned __int16 *)v16 + 11)) != 0)
    {
      uint64_t v21 = (unsigned int *)&v15[v20 + *(unsigned int *)&v15[v20]];
      long long v22 = (unsigned __int16 *)((char *)v19 - *v19);
      if (*v22 < 0x2Bu) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v21 = 0;
      long long v22 = (unsigned __int16 *)((char *)v19 - *v19);
      if (*v22 < 0x2Bu)
      {
LABEL_20:
        int v24 = -1;
        goto LABEL_21;
      }
    }
  }
  uint64_t v23 = v22[21];
  if (!v23) {
    goto LABEL_20;
  }
  int v24 = *(int *)((char *)v19 + v23);
LABEL_21:
  BOOL result = (int *)sub_A2516C(v21, v24 + a3);
  uint64_t v25 = (unsigned __int16 *)((char *)result - *result);
  if (*v25 < 5u || (uint64_t v26 = v25[2]) == 0)
  {
LABEL_26:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return result;
  }
  BOOL v27 = (unsigned int *)((char *)result + v26 + *(unsigned int *)((char *)result + v26));
  uint64_t v28 = *v27;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  if (v28)
  {
    size_t v29 = 4 * v28;
    unsigned int v30 = v27 + 1;
    unint64_t v31 = (char *)operator new(4 * v28);
    *a4 = v31;
    uint64_t v32 = &v31[v29];
    a4[2] = &v31[v29];
    BOOL result = (int *)memcpy(v31, v30, v29);
    a4[1] = v32;
  }
  return result;
}

uint64_t sub_C23EF4(void *a1, unsigned int *a2, unsigned int a3)
{
  unsigned int v5 = sub_369B60(*a1 + 24, a2[1] | ((unint64_t)*a2 << 32), 0);
  uint64_t v6 = &v5[-*(int *)v5];
  unsigned int v7 = *(unsigned __int16 *)v6;
  if (v7 <= 4)
  {
    uint64_t v11 = 0;
    uint64_t v9 = (int *)(4 * *a2 + 4 + dword_4[*a2]);
    uint64_t v12 = (unsigned __int16 *)((char *)v9 - *(int *)((char *)&dword_4[*a2] + dword_4[*a2]));
    if (*v12 < 0x15u) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v8 = *((unsigned __int16 *)v6 + 2);
    if (*((_WORD *)v6 + 2)) {
      v8 += (uint64_t)&v5[*(unsigned int *)&v5[v8]];
    }
    uint64_t v9 = (int *)(v8 + 4 * *a2 + 4 + *(unsigned int *)(v8 + 4 * *a2 + 4));
    if (v7 >= 0xD && (uint64_t v10 = *((unsigned __int16 *)v6 + 6)) != 0)
    {
      uint64_t v11 = (unsigned int *)&v5[v10 + *(unsigned int *)&v5[v10]];
      uint64_t v12 = (unsigned __int16 *)((char *)v9 - *v9);
      if (*v12 < 0x15u) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = (unsigned __int16 *)((char *)v9 - *v9);
      if (*v12 < 0x15u) {
        goto LABEL_13;
      }
    }
  }
  uint64_t v13 = v12[10];
  if (v13)
  {
    int v14 = *(int *)((char *)v9 + v13);
    goto LABEL_14;
  }
LABEL_13:
  int v14 = -1;
LABEL_14:
  int v15 = *(_DWORD *)(sub_A10148(v11, a2[2] + v14) + 4);
  unint64_t v16 = (unsigned __int16 *)((char *)v9 - *v9);
  unsigned int v17 = *v16;
  if (v17 < 0xB)
  {
    uint64_t v19 = 0;
    int v18 = 0x7FFFFFFF;
    goto LABEL_23;
  }
  if (v16[5])
  {
    int v18 = *(int *)((char *)v9 + v16[5]);
    if (v17 < 0x13) {
      goto LABEL_22;
    }
  }
  else
  {
    int v18 = 0x7FFFFFFF;
    if (v17 < 0x13) {
      goto LABEL_22;
    }
  }
  uint64_t v20 = v16[9];
  if (v20)
  {
    uint64_t v19 = (unsigned int *)((char *)v9 + v20 + *(unsigned int *)((char *)v9 + v20));
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v19 = 0;
LABEL_23:
  uint64_t v21 = (v18 + *(_DWORD *)(sub_C24674(v19, a3) + 8) + v15);

  return sub_920D68(v21);
}

uint64_t sub_C24090(void *a1, unsigned int *a2, unsigned int a3)
{
  unsigned int v5 = sub_369B60(*a1 + 24, a2[1] | ((unint64_t)*a2 << 32), 0);
  uint64_t v6 = &v5[-*(int *)v5];
  unsigned int v7 = *(unsigned __int16 *)v6;
  if (v7 <= 4)
  {
    uint64_t v11 = 0;
    uint64_t v9 = (int *)(4 * *a2 + 4 + dword_4[*a2]);
    uint64_t v12 = (unsigned __int16 *)((char *)v9 - *(int *)((char *)&dword_4[*a2] + dword_4[*a2]));
    if (*v12 < 0x15u) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v8 = *((unsigned __int16 *)v6 + 2);
    if (*((_WORD *)v6 + 2)) {
      v8 += (uint64_t)&v5[*(unsigned int *)&v5[v8]];
    }
    uint64_t v9 = (int *)(v8 + 4 * *a2 + 4 + *(unsigned int *)(v8 + 4 * *a2 + 4));
    if (v7 >= 0xD && (uint64_t v10 = *((unsigned __int16 *)v6 + 6)) != 0)
    {
      uint64_t v11 = (unsigned int *)&v5[v10 + *(unsigned int *)&v5[v10]];
      uint64_t v12 = (unsigned __int16 *)((char *)v9 - *v9);
      if (*v12 < 0x15u) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = (unsigned __int16 *)((char *)v9 - *v9);
      if (*v12 < 0x15u) {
        goto LABEL_13;
      }
    }
  }
  uint64_t v13 = v12[10];
  if (v13)
  {
    int v14 = *(int *)((char *)v9 + v13);
    goto LABEL_14;
  }
LABEL_13:
  int v14 = -1;
LABEL_14:
  int v15 = *(_DWORD *)(sub_A10148(v11, a2[2] + v14) + 4);
  unint64_t v16 = (unsigned __int16 *)((char *)v9 - *v9);
  unsigned int v17 = *v16;
  if (v17 < 0xB)
  {
    uint64_t v19 = 0;
    int v18 = 0x7FFFFFFF;
    goto LABEL_23;
  }
  if (v16[5])
  {
    int v18 = *(int *)((char *)v9 + v16[5]);
    if (v17 < 0x13) {
      goto LABEL_22;
    }
  }
  else
  {
    int v18 = 0x7FFFFFFF;
    if (v17 < 0x13) {
      goto LABEL_22;
    }
  }
  uint64_t v20 = v16[9];
  if (v20)
  {
    uint64_t v19 = (unsigned int *)((char *)v9 + v20 + *(unsigned int *)((char *)v9 + v20));
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v19 = 0;
LABEL_23:
  uint64_t v21 = (v18 + *(_DWORD *)(sub_C24674(v19, a3) + 4) + v15);

  return sub_920D68(v21);
}

uint64_t sub_C2422C(uint64_t *a1, unsigned int *a2, unsigned int a3)
{
  uint64_t v6 = sub_369B60(*a1 + 24, a2[1] | ((unint64_t)*a2 << 32), 0);
  unsigned int v7 = &v6[-*(int *)v6];
  unsigned int v8 = *(unsigned __int16 *)v7;
  if (v8 <= 4)
  {
    uint64_t v12 = 0;
    uint64_t v10 = (int *)(4 * *a2 + 4 + dword_4[*a2]);
    uint64_t v13 = (unsigned __int16 *)((char *)v10 - *(int *)((char *)&dword_4[*a2] + dword_4[*a2]));
    if (*v13 < 0xDu) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v9 = *((unsigned __int16 *)v7 + 2);
    if (*((_WORD *)v7 + 2)) {
      v9 += (uint64_t)&v6[*(unsigned int *)&v6[v9]];
    }
    uint64_t v10 = (int *)(v9 + 4 * *a2 + 4 + *(unsigned int *)(v9 + 4 * *a2 + 4));
    if (v8 >= 7 && (uint64_t v11 = *((unsigned __int16 *)v7 + 3)) != 0)
    {
      uint64_t v12 = (unsigned int *)&v6[v11 + *(unsigned int *)&v6[v11]];
      uint64_t v13 = (unsigned __int16 *)((char *)v10 - *v10);
      if (*v13 < 0xDu) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = (unsigned __int16 *)((char *)v10 - *v10);
      if (*v13 < 0xDu)
      {
LABEL_13:
        int v15 = -1;
        goto LABEL_14;
      }
    }
  }
  uint64_t v14 = v13[6];
  if (!v14) {
    goto LABEL_13;
  }
  int v15 = *(int *)((char *)v10 + v14);
LABEL_14:
  uint64_t v16 = (10 * *(_DWORD *)(sub_36A650(v12, v15 + a3) + 8));
  char v17 = sub_51D60((unsigned __int8 *)(*a1 + 3896));
  uint64_t v18 = *a1;
  if (!sub_C259D4(*a1 + 3896)) {
    return v16 | (v16 << 32);
  }
  if (!*(void *)(v18 + 3960)) {
    return v16 | (v16 << 32);
  }
  uint64_t v19 = sub_367060(*(void *)(*a1 + 3960), a2[1] | ((unint64_t)*a2 << 32), a2[2], v17);
  if (!v19) {
    return v16 | (v16 << 32);
  }
  uint64_t v20 = v19[5];
  if (0xCCCCCCCCCCCCCCCDLL * ((v19[6] - v20) >> 2) <= a3) {
    uint64_t v21 = 0x7FFFFFFFLL;
  }
  else {
    uint64_t v21 = *(unsigned int *)(v20 + 20 * a3 + 8);
  }
  uint64_t v23 = v21 << 32;
  if (*((unsigned char *)v19 + 32) == 1) {
    uint64_t v23 = 0x7FFFFFFF00000000;
  }
  return v23 | v16;
}

uint64_t sub_C24450(uint64_t *a1, unsigned int *a2, unsigned int a3)
{
  uint64_t v6 = sub_369B60(*a1 + 24, a2[1] | ((unint64_t)*a2 << 32), 0);
  unsigned int v7 = &v6[-*(int *)v6];
  unsigned int v8 = *(unsigned __int16 *)v7;
  if (v8 <= 4)
  {
    uint64_t v12 = 0;
    uint64_t v10 = (int *)(4 * *a2 + 4 + dword_4[*a2]);
    uint64_t v13 = (unsigned __int16 *)((char *)v10 - *(int *)((char *)&dword_4[*a2] + dword_4[*a2]));
    if (*v13 < 0xDu) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v9 = *((unsigned __int16 *)v7 + 2);
    if (*((_WORD *)v7 + 2)) {
      v9 += (uint64_t)&v6[*(unsigned int *)&v6[v9]];
    }
    uint64_t v10 = (int *)(v9 + 4 * *a2 + 4 + *(unsigned int *)(v9 + 4 * *a2 + 4));
    if (v8 >= 7 && (uint64_t v11 = *((unsigned __int16 *)v7 + 3)) != 0)
    {
      uint64_t v12 = (unsigned int *)&v6[v11 + *(unsigned int *)&v6[v11]];
      uint64_t v13 = (unsigned __int16 *)((char *)v10 - *v10);
      if (*v13 < 0xDu) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = (unsigned __int16 *)((char *)v10 - *v10);
      if (*v13 < 0xDu)
      {
LABEL_13:
        int v15 = -1;
        goto LABEL_14;
      }
    }
  }
  uint64_t v14 = v13[6];
  if (!v14) {
    goto LABEL_13;
  }
  int v15 = *(int *)((char *)v10 + v14);
LABEL_14:
  uint64_t v16 = (10 * *(_DWORD *)(sub_36A650(v12, v15 + a3) + 12));
  char v17 = sub_51D60((unsigned __int8 *)(*a1 + 3896));
  uint64_t v18 = *a1;
  if (!sub_C259D4(*a1 + 3896)) {
    return v16 | (v16 << 32);
  }
  if (!*(void *)(v18 + 3960)) {
    return v16 | (v16 << 32);
  }
  uint64_t v19 = sub_367060(*(void *)(*a1 + 3960), a2[1] | ((unint64_t)*a2 << 32), a2[2], v17);
  if (!v19) {
    return v16 | (v16 << 32);
  }
  uint64_t v20 = v19[5];
  if (0xCCCCCCCCCCCCCCCDLL * ((v19[6] - v20) >> 2) <= a3) {
    uint64_t v21 = 0x7FFFFFFFLL;
  }
  else {
    uint64_t v21 = *(unsigned int *)(v20 + 20 * a3 + 12);
  }
  uint64_t v23 = v21 << 32;
  if (*((unsigned char *)v19 + 32) == 1) {
    uint64_t v23 = 0x7FFFFFFF00000000;
  }
  return v23 | v16;
}

uint64_t sub_C24674(unsigned int *a1, unsigned int a2)
{
  if (!a1 || *a1 <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v10, a2);
    unsigned int v5 = std::string::insert(&v10, 0, "Flatbuffer vector requested index ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    unsigned int v7 = std::string::append(&v11, " is out of range");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v7->__r_.__value_.__r.__words[2];
    long long v12 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    uint64_t v9 = (void *)sub_2F404((uint64_t)exception, &v12);
  }
  return (uint64_t)&a1[3 * a2 + 1];
}

void sub_C24758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_C247D8(uint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = (unint64_t *)result;
LABEL_2:
  std::string v10 = v9;
  while (1)
  {
    uint64_t v9 = v10;
    uint64_t v11 = (char *)a2 - (char *)v10;
    unint64_t v12 = a2 - v10;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unint64_t v69 = *(a2 - 1);
          unint64_t v70 = *v10;
          if (v69 < *v10)
          {
            *std::string v10 = v69;
            *(a2 - 1) = v70;
          }
          return result;
        case 3uLL:
          unint64_t v71 = *v10;
          unint64_t v72 = v10[1];
          unint64_t v73 = *(a2 - 1);
          if (v72 < *v10)
          {
            if (v73 >= v72)
            {
              *std::string v10 = v72;
              v10[1] = v71;
              unint64_t v134 = *(a2 - 1);
              if (v134 >= v71) {
                return result;
              }
              v10[1] = v134;
            }
            else
            {
              *std::string v10 = v73;
            }
            *(a2 - 1) = v71;
            return result;
          }
          if (v73 >= v72) {
            return result;
          }
          v10[1] = v73;
          *(a2 - 1) = v72;
          unint64_t v126 = *v10;
          unint64_t v125 = v10[1];
          if (v125 >= *v10) {
            return result;
          }
          goto LABEL_211;
        case 4uLL:
          unint64_t v83 = v10 + 1;
          unint64_t v84 = v10[1];
          uint64_t v85 = v10 + 2;
          unint64_t v86 = v10[2];
          unint64_t v87 = *v10;
          if (v84 >= *v10)
          {
            if (v86 >= v84)
            {
LABEL_193:
              unint64_t v84 = v86;
              unint64_t v128 = *(a2 - 1);
              if (v128 >= v84) {
                return result;
              }
LABEL_194:
              *uint64_t v85 = v128;
              *(a2 - 1) = v84;
              unint64_t v131 = *v85;
              unint64_t v132 = *v83;
              if (v131 < v132)
              {
                v10[1] = v131;
                v10[2] = v132;
                unint64_t v133 = *v10;
                if (v131 < *v10)
                {
                  *std::string v10 = v131;
                  v10[1] = v133;
                }
              }
              return result;
            }
            *unint64_t v83 = v86;
            *uint64_t v85 = v84;
            unsigned int v88 = v10;
            BOOL v89 = v10 + 1;
            BOOL result = v84;
            if (v86 >= v87)
            {
LABEL_185:
              unint64_t v128 = *(a2 - 1);
              if (v128 >= v84) {
                return result;
              }
              goto LABEL_194;
            }
          }
          else
          {
            unsigned int v88 = v10;
            BOOL v89 = v10 + 2;
            BOOL result = *v10;
            if (v86 >= v84)
            {
              *std::string v10 = v84;
              v10[1] = v87;
              unsigned int v88 = v10 + 1;
              BOOL v89 = v10 + 2;
              BOOL result = v87;
              if (v86 >= v87) {
                goto LABEL_193;
              }
            }
          }
          *unsigned int v88 = v86;
          unint64_t *v89 = v87;
          unint64_t v84 = result;
          goto LABEL_185;
        case 5uLL:
          uint64_t v74 = v10 + 1;
          unint64_t v75 = v10[1];
          char v77 = v10 + 2;
          unint64_t v76 = v10[2];
          unint64_t v78 = *v10;
          if (v75 >= *v10)
          {
            if (v76 < v75)
            {
              unsigned int v79 = v10;
              unint64_t v80 = v10 + 1;
              *uint64_t v74 = v76;
              unint64_t *v77 = v75;
              unint64_t v81 = v76;
              BOOL result = v78;
              unint64_t v82 = v75;
              if (v76 >= v78)
              {
                unint64_t v81 = v78;
                unint64_t v78 = v76;
                unint64_t v76 = v75;
                unint64_t v127 = v10[3];
                if (v127 < v76) {
                  goto LABEL_202;
                }
                goto LABEL_206;
              }
              goto LABEL_201;
            }
            unint64_t v81 = *v10;
            unint64_t v78 = v10[1];
            unint64_t v127 = v10[3];
            if (v127 >= v76) {
              goto LABEL_206;
            }
          }
          else
          {
            if (v76 < v75)
            {
              unsigned int v79 = v10;
              unint64_t v80 = v10 + 2;
              unint64_t v81 = v10[2];
              BOOL result = v10[1];
              unint64_t v82 = *v10;
              goto LABEL_201;
            }
            unsigned int v79 = v10 + 1;
            unint64_t v80 = v10 + 2;
            *std::string v10 = v75;
            v10[1] = v78;
            unint64_t v81 = v75;
            BOOL result = v76;
            unint64_t v82 = v78;
            if (v76 < v78)
            {
LABEL_201:
              unint64_t *v79 = v76;
              unint64_t *v80 = v78;
              unint64_t v78 = result;
              unint64_t v76 = v82;
              unint64_t v127 = v10[3];
              if (v127 < v82) {
                goto LABEL_202;
              }
LABEL_206:
              unint64_t v76 = v127;
              goto LABEL_207;
            }
            unint64_t v81 = v75;
            unint64_t v127 = v10[3];
            if (v127 >= v76) {
              goto LABEL_206;
            }
          }
LABEL_202:
          v10[2] = v127;
          v10[3] = v76;
          if (v127 < v78)
          {
            *uint64_t v74 = v127;
            unint64_t *v77 = v78;
            if (v127 < v81)
            {
              *std::string v10 = v127;
              v10[1] = v81;
            }
          }
LABEL_207:
          unint64_t v135 = *(a2 - 1);
          if (v135 < v76)
          {
            v10[3] = v135;
            *(a2 - 1) = v76;
            unint64_t v136 = v10[2];
            unint64_t v125 = v10[3];
            if (v125 < v136)
            {
              v10[2] = v125;
              v10[3] = v136;
              unint64_t v137 = v10[1];
              if (v125 < v137)
              {
                v10[1] = v125;
                v10[2] = v137;
                unint64_t v126 = *v10;
                if (v125 < *v10)
                {
LABEL_211:
                  *std::string v10 = v125;
                  v10[1] = v126;
                }
              }
            }
          }
          return result;
        default:
          JUMPOUT(0);
      }
    }
    if (v11 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v10 != a2)
      {
        int64_t v99 = (v12 - 2) >> 1;
        int64_t v100 = v99;
        do
        {
          if (v99 >= v100)
          {
            uint64_t v102 = (2 * v100) | 1;
            uint64_t v103 = &v10[v102];
            if (2 * v100 + 2 >= (uint64_t)v12)
            {
              unint64_t v104 = *v103;
              uint64_t v106 = &v10[v100];
              unint64_t v107 = *v106;
              if (*v103 >= *v106) {
                goto LABEL_154;
              }
            }
            else
            {
              unint64_t v104 = v103[1];
              BOOL v105 = *v103 >= v104;
              if (*v103 > v104) {
                unint64_t v104 = *v103;
              }
              if (!v105)
              {
                ++v103;
                uint64_t v102 = 2 * v100 + 2;
              }
              uint64_t v106 = &v10[v100];
              unint64_t v107 = *v106;
              if (v104 >= *v106)
              {
LABEL_154:
                while (1)
                {
                  *uint64_t v106 = v104;
                  uint64_t v106 = v103;
                  if (v99 < v102) {
                    break;
                  }
                  uint64_t v110 = (2 * v102) | 1;
                  uint64_t v103 = &v10[v110];
                  uint64_t v102 = 2 * v102 + 2;
                  if (v102 < (uint64_t)v12)
                  {
                    unint64_t v104 = *v103;
                    BOOL result = (uint64_t)(v103 + 1);
                    unint64_t v108 = v103[1];
                    BOOL v109 = *v103 >= v108;
                    if (*v103 <= v108) {
                      unint64_t v104 = v103[1];
                    }
                    if (*v103 < v108) {
                      ++v103;
                    }
                    if (v109) {
                      uint64_t v102 = v110;
                    }
                    if (v104 < v107) {
                      break;
                    }
                  }
                  else
                  {
                    unint64_t v104 = *v103;
                    uint64_t v102 = v110;
                    if (*v103 < v107) {
                      break;
                    }
                  }
                }
                *uint64_t v106 = v107;
              }
            }
          }
          BOOL v101 = v100-- <= 0;
        }
        while (!v101);
        uint64_t v111 = (unint64_t)v11 >> 3;
        do
        {
          uint64_t v112 = 0;
          unint64_t v113 = *v10;
          int64_t v114 = (unint64_t)(v111 - 2) >> 1;
          uint64_t v115 = v10;
          do
          {
            while (1)
            {
              v118 = &v115[v112 + 1];
              uint64_t v119 = (2 * v112) | 1;
              uint64_t v112 = 2 * v112 + 2;
              if (v112 < v111) {
                break;
              }
              uint64_t v112 = v119;
              unint64_t *v115 = *v118;
              uint64_t v115 = v118;
              if (v119 > v114) {
                goto LABEL_168;
              }
            }
            unint64_t v116 = *v118;
            unint64_t v117 = v118[1];
            if (*v118 <= v117) {
              unint64_t v116 = v118[1];
            }
            if (*v118 >= v117) {
              uint64_t v112 = v119;
            }
            else {
              ++v118;
            }
            unint64_t *v115 = v116;
            uint64_t v115 = v118;
          }
          while (v112 <= v114);
LABEL_168:
          if (v118 == --a2)
          {
            unint64_t *v118 = v113;
          }
          else
          {
            unint64_t *v118 = *a2;
            *a2 = v113;
            uint64_t v120 = (char *)v118 - (char *)v10 + 8;
            if (v120 >= 9)
            {
              unint64_t v121 = (((unint64_t)v120 >> 3) - 2) >> 1;
              int v122 = &v10[v121];
              unint64_t v123 = *v122;
              unint64_t v124 = *v118;
              if (*v122 < *v118)
              {
                do
                {
                  unint64_t *v118 = v123;
                  v118 = v122;
                  if (!v121) {
                    break;
                  }
                  unint64_t v121 = (v121 - 1) >> 1;
                  int v122 = &v10[v121];
                  unint64_t v123 = *v122;
                }
                while (*v122 < v124);
                unint64_t *v118 = v124;
              }
            }
          }
          BOOL v101 = v111-- <= 2;
        }
        while (!v101);
      }
      return result;
    }
    unint64_t v13 = v12 >> 1;
    uint64_t v14 = &v10[v12 >> 1];
    unint64_t v15 = *(a2 - 1);
    if ((unint64_t)v11 < 0x401)
    {
      unint64_t v18 = *v10;
      unint64_t v19 = *v14;
      if (*v10 < *v14)
      {
        if (v15 < v18)
        {
          unint64_t *v14 = v15;
          goto LABEL_32;
        }
        unint64_t *v14 = v18;
        *std::string v10 = v19;
        unint64_t v31 = *(a2 - 1);
        if (v31 < v19)
        {
          *std::string v10 = v31;
LABEL_32:
          *(a2 - 1) = v19;
        }
LABEL_33:
        --a3;
        unint64_t v22 = *v10;
        if (a4) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v15 >= v18) {
        goto LABEL_33;
      }
      *std::string v10 = v15;
      *(a2 - 1) = v18;
      unint64_t v21 = *v14;
      if (*v10 >= *v14) {
        goto LABEL_33;
      }
      unint64_t *v14 = *v10;
      *std::string v10 = v21;
      --a3;
      unint64_t v22 = v21;
      if (a4) {
        goto LABEL_57;
      }
LABEL_56:
      if (*(v10 - 1) < v22) {
        goto LABEL_57;
      }
      if (v22 < *(a2 - 1))
      {
        do
        {
          unint64_t v60 = v10[1];
          ++v10;
        }
        while (v22 >= v60);
      }
      else
      {
        char v61 = v10 + 1;
        do
        {
          std::string v10 = v61;
          if (v61 >= a2) {
            break;
          }
          ++v61;
        }
        while (v22 >= *v10);
      }
      uint64_t v62 = a2;
      if (v10 < a2)
      {
        uint64_t v62 = a2;
        do
          unint64_t v63 = *--v62;
        while (v22 < v63);
      }
      if (v10 < v62)
      {
        unint64_t v64 = *v10;
        unint64_t v65 = *v62;
        do
        {
          *std::string v10 = v65;
          *uint64_t v62 = v64;
          do
          {
            unint64_t v66 = v10[1];
            ++v10;
            unint64_t v64 = v66;
          }
          while (v22 >= v66);
          do
          {
            unint64_t v67 = *--v62;
            unint64_t v65 = v67;
          }
          while (v22 < v67);
        }
        while (v10 < v62);
      }
      uint64_t v68 = v10 - 1;
      BOOL v4 = v10 - 1 >= v9;
      BOOL v5 = v10 - 1 == v9;
      if (v10 - 1 != v9) {
        *uint64_t v9 = *v68;
      }
      a4 = 0;
      *uint64_t v68 = v22;
    }
    else
    {
      unint64_t v16 = *v14;
      unint64_t v17 = *v10;
      if (*v14 >= *v10)
      {
        if (v15 < v16)
        {
          unint64_t *v14 = v15;
          *(a2 - 1) = v16;
          unint64_t v20 = *v10;
          if (*v14 < *v10)
          {
            *std::string v10 = *v14;
            unint64_t *v14 = v20;
          }
        }
      }
      else
      {
        if (v15 >= v16)
        {
          *std::string v10 = v16;
          unint64_t *v14 = v17;
          unint64_t v23 = *(a2 - 1);
          if (v23 >= v17) {
            goto LABEL_24;
          }
          unint64_t *v14 = v23;
        }
        else
        {
          *std::string v10 = v15;
        }
        *(a2 - 1) = v17;
      }
LABEL_24:
      int v24 = &v10[v13];
      unint64_t v27 = *(v24 - 1);
      uint64_t v25 = v24 - 1;
      unint64_t v26 = v27;
      unint64_t v28 = v10[1];
      unint64_t v29 = *(a2 - 2);
      if (v27 >= v28)
      {
        if (v29 < v26)
        {
          *uint64_t v25 = v29;
          *(a2 - 2) = v26;
          unint64_t v30 = v10[1];
          if (*v25 < v30)
          {
            v10[1] = *v25;
            *uint64_t v25 = v30;
          }
        }
      }
      else
      {
        if (v29 >= v26)
        {
          v10[1] = v26;
          *uint64_t v25 = v28;
          unint64_t v32 = *(a2 - 2);
          if (v32 >= v28) {
            goto LABEL_38;
          }
          *uint64_t v25 = v32;
        }
        else
        {
          v10[1] = v29;
        }
        *(a2 - 2) = v28;
      }
LABEL_38:
      uint64_t v33 = &v10[v13];
      unint64_t v36 = v33[1];
      unint64_t v34 = v33 + 1;
      unint64_t v35 = v36;
      unint64_t v37 = v10[2];
      unint64_t v38 = *(a2 - 3);
      if (v36 >= v37)
      {
        if (v38 < v35)
        {
          *unint64_t v34 = v38;
          *(a2 - 3) = v35;
          unint64_t v39 = v10[2];
          if (*v34 < v39)
          {
            v10[2] = *v34;
            *unint64_t v34 = v39;
          }
        }
      }
      else
      {
        if (v38 >= v35)
        {
          v10[2] = v35;
          *unint64_t v34 = v37;
          unint64_t v40 = *(a2 - 3);
          if (v40 >= v37) {
            goto LABEL_47;
          }
          *unint64_t v34 = v40;
        }
        else
        {
          v10[2] = v38;
        }
        *(a2 - 3) = v37;
      }
LABEL_47:
      unint64_t v41 = *v14;
      unint64_t v42 = *v25;
      unint64_t v43 = *v34;
      if (*v14 >= *v25)
      {
        if (v43 >= v41) {
          goto LABEL_55;
        }
        unint64_t *v14 = v43;
        *unint64_t v34 = v41;
        unint64_t v34 = &v10[v12 >> 1];
        unint64_t v41 = v42;
        if (v43 < v42)
        {
LABEL_54:
          *uint64_t v25 = v43;
          *unint64_t v34 = v42;
LABEL_55:
          unint64_t v45 = *v10;
          *std::string v10 = v41;
          unint64_t *v14 = v45;
          --a3;
          unint64_t v22 = *v10;
          if ((a4 & 1) == 0) {
            goto LABEL_56;
          }
          goto LABEL_57;
        }
        unint64_t v59 = *v10;
        *std::string v10 = v43;
        unint64_t *v14 = v59;
        --a3;
        unint64_t v22 = *v10;
        if (a4) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v43 < v41) {
        goto LABEL_54;
      }
      *uint64_t v25 = v41;
      unint64_t *v14 = v42;
      uint64_t v25 = &v10[v12 >> 1];
      unint64_t v41 = v43;
      if (v43 < v42) {
        goto LABEL_54;
      }
      unint64_t v44 = *v10;
      *std::string v10 = v42;
      unint64_t *v14 = v44;
      --a3;
      unint64_t v22 = *v10;
      if ((a4 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_57:
      uint64_t v46 = 0;
      do
        unint64_t v47 = v10[++v46];
      while (v47 < v22);
      unsigned int v48 = &v10[v46];
      unint64_t v49 = a2;
      if (v46 == 1)
      {
        unint64_t v49 = a2;
        do
        {
          if (v48 >= v49) {
            break;
          }
          unint64_t v51 = *--v49;
        }
        while (v51 >= v22);
      }
      else
      {
        do
          unint64_t v50 = *--v49;
        while (v50 >= v22);
      }
      if (v48 >= v49)
      {
        uint64_t v57 = v48 - 1;
        if (v48 - 1 == v10) {
          goto LABEL_75;
        }
LABEL_74:
        *std::string v10 = *v57;
        goto LABEL_75;
      }
      unint64_t v52 = *v49;
      uint64_t v53 = &v10[v46];
      unsigned int v54 = v49;
      do
      {
        *uint64_t v53 = v52;
        unint64_t *v54 = v47;
        do
        {
          unint64_t v55 = v53[1];
          ++v53;
          unint64_t v47 = v55;
        }
        while (v55 < v22);
        do
        {
          unint64_t v56 = *--v54;
          unint64_t v52 = v56;
        }
        while (v56 >= v22);
      }
      while (v53 < v54);
      uint64_t v57 = v53 - 1;
      if (v53 - 1 != v10) {
        goto LABEL_74;
      }
LABEL_75:
      *uint64_t v57 = v22;
      if (v48 < v49) {
        goto LABEL_78;
      }
      BOOL v58 = sub_C2528C(v10, v57);
      std::string v10 = v57 + 1;
      BOOL result = sub_C2528C(v57 + 1, a2);
      if (result)
      {
        a2 = v57;
        if (v58) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v58)
      {
LABEL_78:
        BOOL result = sub_C247D8(v9, v57, a3, a4 & 1);
        a4 = 0;
        std::string v10 = v57 + 1;
      }
    }
  }
  uint64_t v90 = v10 + 1;
  BOOL v92 = v10 == a2 || v90 == a2;
  if (a4)
  {
    if (!v92)
    {
      uint64_t v93 = 0;
      uint64_t v94 = v10;
      do
      {
        unint64_t v97 = *v94;
        unint64_t v96 = v94[1];
        uint64_t v94 = v90;
        if (v96 < v97)
        {
          uint64_t v98 = v93;
          do
          {
            *(unint64_t *)((char *)v10 + v98 + 8) = v97;
            if (!v98)
            {
              char v95 = v10;
              goto LABEL_124;
            }
            unint64_t v97 = *(unint64_t *)((char *)v10 + v98 - 8);
            v98 -= 8;
          }
          while (v96 < v97);
          char v95 = (unint64_t *)((char *)v10 + v98 + 8);
LABEL_124:
          *char v95 = v96;
        }
        uint64_t v90 = v94 + 1;
        v93 += 8;
      }
      while (v94 + 1 != a2);
    }
  }
  else if (!v92)
  {
    do
    {
      unint64_t v130 = *v9;
      unint64_t v129 = v9[1];
      uint64_t v9 = v90;
      if (v129 < v130)
      {
        do
        {
          unint64_t *v90 = v130;
          unint64_t v130 = *(v90 - 2);
          --v90;
        }
        while (v129 < v130);
        unint64_t *v90 = v129;
      }
      uint64_t v90 = v9 + 1;
    }
    while (v9 + 1 != a2);
  }
  return result;
}

BOOL sub_C2528C(unint64_t *a1, unint64_t *a2)
{
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      unint64_t v9 = *(a2 - 1);
      unint64_t v10 = *a1;
      if (v9 >= *a1) {
        return 1;
      }
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      unint64_t v11 = *a1;
      unint64_t v12 = a1[1];
      unint64_t v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12) {
          return 1;
        }
        a1[1] = v13;
        *(a2 - 1) = v12;
        unint64_t v40 = *a1;
        unint64_t v39 = a1[1];
        if (v39 >= *a1) {
          return 1;
        }
        goto LABEL_61;
      }
      if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        unint64_t v46 = *(a2 - 1);
        if (v46 >= v11) {
          return 1;
        }
        a1[1] = v46;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      int v24 = a1 + 1;
      unint64_t v25 = a1[1];
      unint64_t v26 = a1 + 2;
      unint64_t v27 = a1[2];
      unint64_t v28 = *a1;
      if (v25 >= *a1)
      {
        if (v27 >= v25)
        {
LABEL_44:
          unint64_t v25 = v27;
          unint64_t v42 = *(a2 - 1);
          if (v42 >= v25) {
            return 1;
          }
LABEL_45:
          *unint64_t v26 = v42;
          *(a2 - 1) = v25;
          unint64_t v43 = *v26;
          unint64_t v44 = *v24;
          if (v43 >= v44) {
            return 1;
          }
          a1[1] = v43;
          a1[2] = v44;
          unint64_t v45 = *a1;
          if (v43 >= *a1) {
            return 1;
          }
          *a1 = v43;
          a1[1] = v45;
          return 1;
        }
        *int v24 = v27;
        *unint64_t v26 = v25;
        unint64_t v29 = a1;
        unint64_t v30 = a1 + 1;
        unint64_t v31 = v25;
        if (v27 >= v28)
        {
LABEL_42:
          unint64_t v42 = *(a2 - 1);
          if (v42 >= v25) {
            return 1;
          }
          goto LABEL_45;
        }
      }
      else
      {
        unint64_t v29 = a1;
        unint64_t v30 = a1 + 2;
        unint64_t v31 = *a1;
        if (v27 >= v25)
        {
          *a1 = v25;
          a1[1] = v28;
          unint64_t v29 = a1 + 1;
          unint64_t v30 = a1 + 2;
          unint64_t v31 = v28;
          if (v27 >= v28) {
            goto LABEL_44;
          }
        }
      }
      *unint64_t v29 = v27;
      *unint64_t v30 = v28;
      unint64_t v25 = v31;
      goto LABEL_42;
    case 5:
      uint64_t v14 = a1 + 1;
      unint64_t v15 = a1[1];
      unint64_t v17 = a1 + 2;
      unint64_t v16 = a1[2];
      unint64_t v18 = *a1;
      if (v15 >= *a1)
      {
        if (v16 < v15)
        {
          unint64_t v19 = a1;
          unint64_t v20 = a1 + 1;
          unint64_t *v14 = v16;
          *unint64_t v17 = v15;
          unint64_t v21 = v16;
          unint64_t v22 = v18;
          unint64_t v23 = v15;
          if (v16 >= v18)
          {
            unint64_t v21 = v18;
            unint64_t v18 = v16;
            unint64_t v16 = v15;
            unint64_t v41 = a1[3];
            if (v41 < v16) {
              goto LABEL_52;
            }
            goto LABEL_56;
          }
          goto LABEL_51;
        }
        unint64_t v21 = *a1;
        unint64_t v18 = a1[1];
        unint64_t v41 = a1[3];
        if (v41 >= v16) {
          goto LABEL_56;
        }
      }
      else
      {
        if (v16 < v15)
        {
          unint64_t v19 = a1;
          unint64_t v20 = a1 + 2;
          unint64_t v21 = a1[2];
          unint64_t v22 = a1[1];
          unint64_t v23 = *a1;
          goto LABEL_51;
        }
        unint64_t v19 = a1 + 1;
        unint64_t v20 = a1 + 2;
        *a1 = v15;
        a1[1] = v18;
        unint64_t v21 = v15;
        unint64_t v22 = v16;
        unint64_t v23 = v18;
        if (v16 < v18)
        {
LABEL_51:
          unint64_t *v19 = v16;
          *unint64_t v20 = v18;
          unint64_t v18 = v22;
          unint64_t v16 = v23;
          unint64_t v41 = a1[3];
          if (v41 < v23) {
            goto LABEL_52;
          }
LABEL_56:
          unint64_t v16 = v41;
          goto LABEL_57;
        }
        unint64_t v21 = v15;
        unint64_t v41 = a1[3];
        if (v41 >= v16) {
          goto LABEL_56;
        }
      }
LABEL_52:
      a1[2] = v41;
      a1[3] = v16;
      if (v41 < v18)
      {
        unint64_t *v14 = v41;
        *unint64_t v17 = v18;
        if (v41 < v21)
        {
          *a1 = v41;
          a1[1] = v21;
        }
      }
LABEL_57:
      unint64_t v47 = *(a2 - 1);
      if (v47 >= v16) {
        return 1;
      }
      a1[3] = v47;
      *(a2 - 1) = v16;
      unint64_t v48 = a1[2];
      unint64_t v39 = a1[3];
      if (v39 >= v48) {
        return 1;
      }
      a1[2] = v39;
      a1[3] = v48;
      unint64_t v49 = a1[1];
      if (v39 >= v49) {
        return 1;
      }
      a1[1] = v39;
      a1[2] = v49;
      unint64_t v40 = *a1;
      if (v39 >= *a1) {
        return 1;
      }
LABEL_61:
      *a1 = v39;
      a1[1] = v40;
      return 1;
    default:
      BOOL v4 = a1 + 2;
      unint64_t v3 = a1[2];
      unint64_t v5 = a1[1];
      unint64_t v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5) {
          goto LABEL_22;
        }
        a1[1] = v3;
        *BOOL v4 = v5;
        unsigned int v7 = a1;
        long long v8 = a1 + 1;
      }
      else
      {
        unsigned int v7 = a1;
        long long v8 = a1 + 2;
        if (v3 < v5) {
          goto LABEL_21;
        }
        *a1 = v5;
        a1[1] = v6;
        unsigned int v7 = a1 + 1;
        long long v8 = a1 + 2;
      }
      if (v3 >= v6) {
        goto LABEL_22;
      }
LABEL_21:
      unint64_t *v7 = v3;
      *long long v8 = v6;
LABEL_22:
      unint64_t v32 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v33 = 0;
      for (uint64_t i = 24; ; i += 8)
      {
        unint64_t v35 = *v32;
        unint64_t v36 = *v4;
        if (*v32 < v36) {
          break;
        }
LABEL_25:
        BOOL v4 = v32++;
        if (v32 == a2) {
          return 1;
        }
      }
      uint64_t v37 = i;
      do
      {
        *(unint64_t *)((char *)a1 + v37) = v36;
        uint64_t v38 = v37 - 8;
        if (v37 == 8)
        {
          *a1 = v35;
          if (++v33 != 8) {
            goto LABEL_25;
          }
          return v32 + 1 == a2;
        }
        unint64_t v36 = *(unint64_t *)((char *)a1 + v37 - 16);
        v37 -= 8;
      }
      while (v35 < v36);
      *(unint64_t *)((char *)a1 + v38) = v35;
      if (++v33 != 8) {
        goto LABEL_25;
      }
      return v32 + 1 == a2;
  }
}

uint64_t *sub_C256B0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7328, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F7328))
  {
    qword_24F7310 = 0;
    *(void *)algn_24F7318 = 0;
    qword_24F7320 = 0;
    __cxa_guard_release(&qword_24F7328);
  }
  if (!sub_A1E760(*(void **)(a1 + 24), &v5)) {
    return &qword_24F7310;
  }
  unint64_t v3 = sub_C26AE8(*(void **)(a1 + 24), &v5);
  if (!v3) {
    sub_5AE8("unordered_map::at: key not found");
  }
  return v3 + 4;
}

uint64_t *sub_C25764(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7348, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F7348))
  {
    qword_24F7330 = 0;
    *(void *)algn_24F7338 = 0;
    qword_24F7340 = 0;
    __cxa_guard_release(&qword_24F7348);
  }
  if (!sub_A1E760(*(void **)(a1 + 24), &v5)) {
    return &qword_24F7330;
  }
  unint64_t v3 = sub_C26AE8(*(void **)(a1 + 24), &v5);
  if (!v3) {
    sub_5AE8("unordered_map::at: key not found");
  }
  return v3 + 10;
}

void sub_C25818(uint64_t a1)
{
  *(_WORD *)a1 = 256;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  operator new();
}

uint64_t sub_C25878(uint64_t result, long long *a2)
{
  long long v2 = *a2;
  *(void *)(result + 16) = *((void *)a2 + 2);
  *(_OWORD *)BOOL result = v2;
  if (*((void *)a2 + 3)) {
    operator new();
  }
  *(void *)(result + 24) = 0;
  return result;
}

void sub_C25900()
{
}

void sub_C25924(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (*(void *)(v2 + 24))
  {
    sub_49DB44(*(void *)(a1 + 24), *(void **)(v2 + 16));
    *(void *)(v2 + 16) = 0;
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*(void *)v2 + 8 * i) = 0;
    }
    *(void *)(v2 + 24) = 0;
  }
  *(_WORD *)a1 = 256;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
}

uint64_t sub_C25994(uint64_t result, char a2)
{
  *(unsigned char *)(result + 1) = a2;
  return result;
}

uint64_t sub_C2599C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1);
}

uint64_t sub_C259A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 16) = a2;
  return result;
}

uint64_t sub_C259AC(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 16);
  if (v1 <= 1) {
    int v1 = 1;
  }
  *(_DWORD *)(result + 16) = v1;
  return result;
}

BOOL sub_C259C0(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 16) - 1) < 2;
}

BOOL sub_C259D4(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 2;
}

uint64_t sub_C259E4(uint64_t result, char a2, int a3)
{
  uint64_t v3 = 1 << a2;
  if (a3) {
    uint64_t v4 = *(void *)(result + 8) | v3;
  }
  else {
    uint64_t v4 = *(void *)(result + 8) & ~v3;
  }
  *(void *)(result + 8) = v4;
  return result;
}

uint64_t sub_C25A10(uint64_t a1, char a2)
{
  return (*(void *)(a1 + 8) >> a2) & 1;
}

BOOL sub_C25A20(uint64_t a1)
{
  return (*(unsigned char *)(a1 + 8) & 0x3F) != 0;
}

void sub_C25A30(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v52 = a3;
  uint64_t v53 = a2;
  uint64_t v7 = *(void *)(a1 + 24);
  unsigned int v54 = &v53;
  long long v8 = sub_C2674C(v7, &v53, (uint64_t)&unk_20F06E0, &v54);
  uint64_t v9 = __ROR8__(a3, 32);
  unint64_t v11 = (char *)*((void *)v8 + 5);
  unint64_t v10 = *((void *)v8 + 6);
  if ((unint64_t)v11 >= v10)
  {
    unint64_t v13 = (char *)*((void *)v8 + 4);
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v13) >> 2) + 1;
    if (v14 > 0x1555555555555555) {
      goto LABEL_46;
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (void)v13) >> 2);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v16 = 0x1555555555555555;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16 > 0x1555555555555555) {
LABEL_45:
    }
      sub_188D718();
    uint64_t v17 = 12 * v16;
    unint64_t v18 = (char *)operator new(12 * v16);
    unint64_t v19 = &v18[4 * ((v11 - v13) >> 2)];
    unint64_t v20 = &v18[v17];
    *(void *)unint64_t v19 = v9;
    *((_DWORD *)v19 + 2) = a4;
    for (uint64_t i = v19 + 12; v11 != v13; *((_DWORD *)v19 + 2) = v22)
    {
      uint64_t v21 = *(void *)(v11 - 12);
      v11 -= 12;
      int v22 = *((_DWORD *)v11 + 2);
      *(void *)(v19 - 12) = v21;
      v19 -= 12;
    }
    *((void *)v8 + 4) = v19;
    *((void *)v8 + 5) = i;
    *((void *)v8 + 6) = v20;
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    *(void *)unint64_t v11 = v9;
    *((_DWORD *)v11 + 2) = a4;
    uint64_t i = v11 + 12;
  }
  *((void *)v8 + 5) = i;
  uint64_t v23 = *(void *)(a1 + 24);
  unsigned int v54 = &v53;
  int v24 = sub_C2674C(v23, &v53, (uint64_t)&unk_20F06E0, &v54);
  unint64_t v25 = v24;
  unint64_t v27 = (char *)*((void *)v24 + 8);
  unint64_t v26 = *((void *)v24 + 9);
  if ((unint64_t)v27 >= v26)
  {
    unint64_t v29 = (char **)(v24 + 56);
    unint64_t v30 = (char *)*((void *)v24 + 7);
    unint64_t v31 = 0xCCCCCCCCCCCCCCCDLL * ((v27 - v30) >> 2) + 1;
    if (v31 > 0xCCCCCCCCCCCCCCCLL) {
      sub_2E00();
    }
    unint64_t v32 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v26 - (void)v30) >> 2);
    if (2 * v32 > v31) {
      unint64_t v31 = 2 * v32;
    }
    if (v32 >= 0x666666666666666) {
      unint64_t v33 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v33 = v31;
    }
    if (v33)
    {
      if (v33 > 0xCCCCCCCCCCCCCCCLL) {
        goto LABEL_45;
      }
      unint64_t v34 = (char *)operator new(20 * v33);
    }
    else
    {
      unint64_t v34 = 0;
    }
    unint64_t v35 = &v34[4 * ((v27 - v30) >> 2)];
    *(void *)unint64_t v35 = 0;
    *((void *)v35 + 1) = 0;
    *((_DWORD *)v35 + 4) = 0;
    unint64_t v28 = v35 + 20;
    if (v27 != v30)
    {
      do
      {
        long long v36 = *(_OWORD *)(v27 - 20);
        *((_DWORD *)v35 - 1) = *((_DWORD *)v27 - 1);
        *(_OWORD *)(v35 - 20) = v36;
        v35 -= 20;
        v27 -= 20;
      }
      while (v27 != v30);
      unint64_t v27 = *v29;
    }
    *((void *)v25 + 7) = v35;
    *((void *)v25 + 8) = v28;
    *((void *)v25 + 9) = &v34[20 * v33];
    if (v27) {
      operator delete(v27);
    }
  }
  else
  {
    *(void *)unint64_t v27 = 0;
    *((void *)v27 + 1) = 0;
    unint64_t v28 = v27 + 20;
    *((_DWORD *)v27 + 4) = 0;
  }
  *((void *)v25 + 8) = v28;
  uint64_t v37 = *(void *)(a1 + 24);
  unsigned int v54 = &v52;
  uint64_t v38 = sub_C2674C(v37, &v52, (uint64_t)&unk_20F06E0, &v54);
  uint64_t v39 = __ROR8__(v53, 32);
  unint64_t v41 = (char *)*((void *)v38 + 11);
  unint64_t v40 = *((void *)v38 + 12);
  if ((unint64_t)v41 < v40)
  {
    *(void *)unint64_t v41 = v39;
    *((_DWORD *)v41 + 2) = a4;
    uint64_t j = v41 + 12;
    goto LABEL_44;
  }
  unint64_t v43 = (unsigned char *)*((void *)v38 + 10);
  unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((v41 - v43) >> 2) + 1;
  if (v44 > 0x1555555555555555) {
LABEL_46:
  }
    sub_2E00();
  unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - (void)v43) >> 2);
  if (2 * v45 > v44) {
    unint64_t v44 = 2 * v45;
  }
  if (v45 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v46 = 0x1555555555555555;
  }
  else {
    unint64_t v46 = v44;
  }
  if (v46 > 0x1555555555555555) {
    goto LABEL_45;
  }
  uint64_t v47 = 12 * v46;
  unint64_t v48 = (char *)operator new(12 * v46);
  unint64_t v49 = &v48[4 * ((v41 - v43) >> 2)];
  *(void *)unint64_t v49 = v39;
  *((_DWORD *)v49 + 2) = a4;
  for (uint64_t j = v49 + 12; v41 != v43; *((_DWORD *)v49 + 2) = v51)
  {
    uint64_t v50 = *(void *)(v41 - 12);
    v41 -= 12;
    int v51 = *((_DWORD *)v41 + 2);
    *(void *)(v49 - 12) = v50;
    v49 -= 12;
  }
  *((void *)v38 + 10) = v49;
  *((void *)v38 + 11) = j;
  *((void *)v38 + 12) = &v48[v47];
  if (v43) {
    operator delete(v43);
  }
LABEL_44:
  *((void *)v38 + 11) = j;
}

uint64_t *sub_C25DBC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25E0180, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_25E0180))
  {
    qword_25E0188 = 0;
    unk_25E0190 = 0;
    qword_25E0198 = 0;
    __cxa_guard_release(&qword_25E0180);
  }
  if (!sub_A1E760(*(void **)(a1 + 24), &v5)) {
    return &qword_25E0188;
  }
  uint64_t v3 = sub_C26AE8(*(void **)(a1 + 24), &v5);
  if (!v3) {
    sub_5AE8("unordered_map::at: key not found");
  }
  return v3 + 7;
}

uint64_t sub_C25E68(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_B6C0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_C25FE8(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_C25F84(_Unwind_Exception *a1)
{
  sub_C25FAC(v1);
  _Unwind_Resume(a1);
}

void sub_C25F98(_Unwind_Exception *a1)
{
  sub_C25FAC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C25FAC(uint64_t a1)
{
  sub_49DB44(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void *sub_C25FE8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v8 = (0xC4CEB9FE1A85EC53 * (v7 ^ (v7 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v7 ^ (v7 >> 33))) >> 33);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = (0xC4CEB9FE1A85EC53 * (v7 ^ (v7 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v7 ^ (v7 >> 33))) >> 33);
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(void **)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      BOOL result = (void *)*v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = result[1];
            if (v15 == v8)
            {
              if (*((_DWORD *)result + 5) == HIDWORD(v6) && *((_DWORD *)result + 4) == v6) {
                return result;
              }
            }
            else if ((v15 & (v9 - 1)) != v3)
            {
              goto LABEL_31;
            }
            BOOL result = (void *)*result;
            if (!result) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v13 = result[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)result + 5) == HIDWORD(v6) && *((_DWORD *)result + 4) == v6) {
              return result;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          BOOL result = (void *)*result;
        }
        while (result);
      }
    }
  }
LABEL_31:
  unint64_t v31 = operator new(0x70uLL);
  *unint64_t v31 = 0;
  v31[1] = v8;
  v31[2] = *(void *)a3;
  sub_C263AC((uint64_t)(v31 + 3), (int *)(a3 + 8));
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v17 / v18);
    if (v22 <= v23) {
      size_t prime = v23;
    }
    else {
      size_t prime = v22;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v25 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v25) {
      goto LABEL_45;
    }
    if (prime < *(void *)&v25)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v25 < 3uLL || (uint8x8_t v27 = (uint8x8_t)vcnt_s8(v25), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime < *(void *)&v25) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    unint64_t v29 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        unint64_t v3 = v8 % v9;
        unint64_t v19 = *(void **)(*(void *)a1 + 8 * (v8 % v9));
        unint64_t v20 = v31;
        if (v19) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v3 = v8;
        unint64_t v19 = *(void **)(*(void *)a1 + 8 * v8);
        unint64_t v20 = v31;
        if (v19) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v3 = v29 & v8;
      unint64_t v19 = *(void **)(*(void *)a1 + 8 * (v29 & v8));
      unint64_t v20 = v31;
      if (v19) {
        goto LABEL_34;
      }
    }
LABEL_58:
    *unint64_t v20 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v31;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*v31)
    {
      unint64_t v30 = *(void *)(*v31 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v30 >= v9) {
          v30 %= v9;
        }
      }
      else
      {
        v30 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v30) = v31;
    }
    goto LABEL_69;
  }
  unint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  unint64_t v20 = v31;
  if (!v19) {
    goto LABEL_58;
  }
LABEL_34:
  *unint64_t v20 = *v19;
  void *v19 = v31;
LABEL_69:
  BOOL result = v31;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_C26378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10) {
    sub_C2667C(v10, a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_C263AC(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)a1 = v4;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v6 = (unsigned char *)*((void *)a2 + 1);
  int8x8_t v5 = (unsigned char *)*((void *)a2 + 2);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 2) > 0x1555555555555555) {
      sub_2E00();
    }
    unint64_t v8 = (char *)operator new(v7);
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v8;
    unint64_t v9 = &v8[4 * (v7 >> 2)];
    *(void *)(a1 + 24) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 16) = v9;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  unint64_t v11 = (unsigned char *)*((void *)a2 + 4);
  uint64_t v10 = (unsigned char *)*((void *)a2 + 5);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v12 >> 2) >= 0xCCCCCCCCCCCCCCDLL) {
      sub_2E00();
    }
    unint64_t v13 = (char *)operator new(v12);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v13;
    unint64_t v14 = &v13[4 * (v12 >> 2)];
    *(void *)(a1 + 48) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 40) = v14;
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  unint64_t v16 = (unsigned char *)*((void *)a2 + 7);
  uint64_t v15 = (unsigned char *)*((void *)a2 + 8);
  int64_t v17 = v15 - v16;
  if (v15 != v16)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v17 >> 2) > 0x1555555555555555) {
      sub_2E00();
    }
    float v18 = (char *)operator new(v17);
    *(void *)(a1 + 56) = v18;
    *(void *)(a1 + 64) = v18;
    unint64_t v19 = &v18[4 * (v17 >> 2)];
    *(void *)(a1 + 72) = v19;
    memcpy(v18, v16, v17);
    *(void *)(a1 + 64) = v19;
  }
  if (*((void *)a2 + 10)) {
    operator new();
  }
  *(void *)(a1 + 80) = 0;
  return a1;
}

void sub_C265D8(_Unwind_Exception *exception_object)
{
  uint64_t v6 = *v4;
  if (*v4)
  {
    v1[8] = v6;
    operator delete(v6);
    int64_t v7 = *v3;
    if (!*v3)
    {
LABEL_3:
      unint64_t v8 = *v2;
      if (!*v2) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    int64_t v7 = *v3;
    if (!*v3) {
      goto LABEL_3;
    }
  }
  v1[5] = v7;
  operator delete(v7);
  unint64_t v8 = *v2;
  if (!*v2) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  v1[2] = v8;
  operator delete(v8);
  goto LABEL_5;
}

void sub_C2665C()
{
  if (*v0) {
    JUMPOUT(0xC26648);
  }
  JUMPOUT(0xC26620);
}

void sub_C2666C()
{
  if (!*v0) {
    JUMPOUT(0xC26630);
  }
  JUMPOUT(0xC26628);
}

void sub_C2667C(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = __p[13];
    __p[13] = 0;
    if (v3)
    {
      int v4 = *(void **)v3;
      if (*(void *)v3)
      {
        *(void *)(v3 + 8) = v4;
        operator delete(v4);
      }
      operator delete();
    }
    int8x8_t v5 = (void *)__p[10];
    if (v5)
    {
      __p[11] = v5;
      operator delete(v5);
    }
    uint64_t v6 = (void *)__p[7];
    if (v6)
    {
      __p[8] = v6;
      operator delete(v6);
    }
    int64_t v7 = (void *)__p[4];
    if (v7)
    {
      __p[5] = v7;
      operator delete(v7);
      unint64_t v8 = __p;
LABEL_13:
      operator delete(v8);
      return;
    }
LABEL_15:
    unint64_t v8 = __p;
    goto LABEL_13;
  }
  if (__p) {
    goto LABEL_15;
  }
}

char *sub_C2674C(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v9 = (0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) >> 33);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = (0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) >> 33);
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    int64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      unint64_t v13 = (char *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = *((void *)v13 + 1);
            if (v16 == v9)
            {
              if (*((_DWORD *)v13 + 5) == HIDWORD(v7) && *((_DWORD *)v13 + 4) == v7) {
                return v13;
              }
            }
            else if ((v16 & (v10 - 1)) != v4)
            {
              goto LABEL_31;
            }
            unint64_t v13 = *(char **)v13;
            if (!v13) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 5) == HIDWORD(v7) && *((_DWORD *)v13 + 4) == v7) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v4) {
              break;
            }
          }
          unint64_t v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  float v18 = (void *)(a1 + 16);
  unint64_t v13 = (char *)operator new(0x70uLL);
  *(void *)unint64_t v13 = 0;
  *((void *)v13 + 1) = v9;
  *((void *)v13 + 2) = **a4;
  *((void *)v13 + 13) = 0;
  *(_OWORD *)(v13 + 88) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 24) = 0u;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (v10 && (float)(v20 * (float)v10) >= v19)
  {
    uint64_t v21 = *(void *)a1;
    unint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
    if (v22)
    {
LABEL_34:
      *(void *)unint64_t v13 = *v22;
LABEL_69:
      *unint64_t v22 = v13;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v23 = 1;
    if (v10 >= 3) {
      BOOL v23 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v10);
    unint64_t v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25) {
      size_t prime = v25;
    }
    else {
      size_t prime = v24;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_45;
    }
    if (prime < v10)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (prime <= v27) {
        size_t prime = v27;
      }
      if (prime < v10) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v30 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v4 = v9 % v10;
        uint64_t v21 = *(void *)a1;
        unint64_t v22 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v22) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v9;
        uint64_t v21 = *(void *)a1;
        unint64_t v22 = *(void **)(*(void *)a1 + 8 * v9);
        if (v22) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v30 & v9;
      uint64_t v21 = *(void *)a1;
      unint64_t v22 = *(void **)(*(void *)a1 + 8 * (v30 & v9));
      if (v22) {
        goto LABEL_34;
      }
    }
  }
  *(void *)unint64_t v13 = *v18;
  void *v18 = v13;
  *(void *)(v21 + 8 * v4) = v18;
  if (*(void *)v13)
  {
    unint64_t v31 = *(void *)(*(void *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v31 >= v10) {
        v31 %= v10;
      }
    }
    else
    {
      v31 &= v10 - 1;
    }
    unint64_t v22 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_C26ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_C2667C(v11, v10);
  _Unwind_Resume(a1);
}

uint64_t *sub_C26AE8(void *a1, uint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  unint64_t v4 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v5 = (0xC4CEB9FE1A85EC53 * (v4 ^ (v4 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v4 ^ (v4 >> 33))) >> 33);
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  unint64_t v8 = *(uint64_t ***)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  BOOL result = *v8;
  if (*v8)
  {
    if (v6.u32[0] < 2uLL)
    {
      uint64_t v10 = *(void *)&v2 - 1;
      while (1)
      {
        uint64_t v14 = result[1];
        if (v14 == v5)
        {
          if (*((_DWORD *)result + 5) == HIDWORD(v3) && *((_DWORD *)result + 4) == v3) {
            return result;
          }
        }
        else if ((v14 & v10) != v7)
        {
          return 0;
        }
        BOOL result = (uint64_t *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v12 = result[1];
      if (v12 == v5)
      {
        if (*((_DWORD *)result + 5) == HIDWORD(v3) && *((_DWORD *)result + 4) == v3) {
          return result;
        }
      }
      else
      {
        if (v12 >= *(void *)&v2) {
          v12 %= *(void *)&v2;
        }
        if (v12 != v7) {
          return 0;
        }
      }
      BOOL result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

void sub_C26C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)&long long v5 = *(void *)a1;
  *((void *)&v5 + 1) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  memset(v4, 0, sizeof(v4));
  sub_9F5514((uint64_t *)(a1 + 32), &v5, 1, v4);
}

void sub_C26D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_14A84((uint64_t)&a9);
  sub_49DA2C(v11);
  sub_14A84(v10);
  sub_14A84(v9);
  _Unwind_Resume(a1);
}

void sub_C26D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_37D394((uint64_t *)va);
  sub_14A84(v5 - 48);
  sub_14A84(v4);
  sub_14A84(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_C26DCC@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (*(void *)(result + 16))
  {
    uint64_t v2 = result;
    sub_725D0((uint64_t)v10);
    sub_C288B0(v2, (uint64_t)&v8);
    memset(v6, 0, sizeof(v6));
    int v7 = 1065353216;
    sub_C384B8((uint64_t)&v5, (uint64_t)v6, &v8);
    uint64_t v3 = v8;
    for (uint64_t i = v9; v3 != i; v3 += 4)
    {
      uint64_t v5 = *v3;
      sub_B5AE4C((uint64_t)v6, &v5, &v5);
    }
    sub_C28C2C();
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

void sub_C28618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  if (a50 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a67);
  sub_C2A1B4((uint64_t)&STACK[0x2C0]);
  sub_C2A1B4((uint64_t)&STACK[0x2F0]);
  sub_C2A1B4((uint64_t)&STACK[0x318]);
  sub_C2A1F0((void *)(v67 - 256));
  sub_12168(v67 - 208);
  unint64_t v69 = *(void **)(v67 - 160);
  if (v69)
  {
    *(void *)(v67 - 152) = v69;
    operator delete(v69);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_C288B0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  float v20 = 0;
  uint64_t v21 = 0;
  float v19 = 0;
  uint64_t v4 = *(void *)(a1 + 15920);
  uint64_t v5 = *(void *)(v4 + 8);
  uint64_t v6 = *(void *)(v4 + 16);
  if (v5 != v6)
  {
    int v7 = *(uint64_t **)(v5 + 424);
    uint64_t i = *(uint64_t **)(v5 + 432);
    if (v7 != i) {
      goto LABEL_5;
    }
    while (1)
    {
      v5 += 456;
      if (v5 == v6) {
        break;
      }
      int v7 = *(uint64_t **)(v5 + 424);
      for (uint64_t i = *(uint64_t **)(v5 + 432); v7 != i; v7 += 13)
      {
LABEL_5:
        LODWORD(v23) = *((_DWORD *)v7 + 2);
        if (*((_DWORD *)v7 + 2) <= 6u) {
          uint64_t v22 = *v7;
        }
        sub_C34B44(a1 + 4232, (uint64_t)&v22, (uint64_t)&v19);
      }
    }
  }
  sub_C34E38((uint64_t *)&v19);
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v22);
    sub_188FC78(&v22, (uint64_t)"JourneyPlannerIncidentDataFactory read ", 39);
    uint64_t v9 = (void *)std::ostream::operator<<();
    sub_188FC78(v9, (uint64_t)" blocked entities.", 18);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v18 < 0) {
      operator delete(__p);
    }
    if (v25 < 0) {
      operator delete(v24);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    uint64_t v10 = v19;
    uint64_t v11 = v20;
    if (v19 == v20) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v10 = v19;
    uint64_t v11 = v20;
    if (v19 == v20)
    {
LABEL_17:
      unint64_t v12 = 0;
      unint64_t v13 = 0;
      goto LABEL_24;
    }
  }
  do
  {
    int v14 = v10[2];
    if (v14 == 5)
    {
      sub_C2A9B8(a1, *(void *)v10, (void **)a2);
    }
    else if (v14 == 2)
    {
      sub_C2A794(a1, *(void *)v10, (void **)a2);
    }
    v10 += 3;
  }
  while (v10 != v11);
  unint64_t v13 = *(char **)a2;
  unint64_t v12 = *(char **)(a2 + 8);
LABEL_24:
  unint64_t v15 = 126 - 2 * __clz((v12 - v13) >> 5);
  if (v12 == v13) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v15;
  }
  sub_C3915C((uint64_t)v13, v12, (uint64_t)&v22, v16, 1);
  if (v19)
  {
    float v20 = v19;
    operator delete(v19);
  }
}

void sub_C28BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a18);
  if (a15)
  {
    operator delete(a15);
    float v20 = *(void **)v18;
    if (!*(void *)v18) {
LABEL_5:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    float v20 = *(void **)v18;
    if (!*(void *)v18) {
      goto LABEL_5;
    }
  }
  *(void *)(v18 + 8) = v20;
  operator delete(v20);
  _Unwind_Resume(a1);
}

void sub_C28C2C()
{
  uint64_t v0 = (void *)__chkstk_darwin();
  uint64_t v1 = v0[1];
  v2[0] = *v0;
  v2[1] = v1;
  if (v1) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
  }
  sub_C2BC70((uint64_t)v3, (uint64_t)v2);
}

void sub_C28D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_C34558((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_C28D14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C28D28(int *a1@<X1>, uint64_t a2@<X8>)
{
  long long v78 = 0u;
  long long v79 = 0u;
  int v80 = 1065353216;
  uint64_t v2 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v2 < 5u
    || (uint64_t v3 = v2[2]) == 0
    || (v4 = (unsigned int *)((char *)a1 + v3 + *(unsigned int *)((char *)a1 + v3)), uint64_t v54 = *v4, !v54))
  {
    *(_OWORD *)a2 = 0uLL;
    *(_OWORD *)(a2 + 16) = 0uLL;
    *(_DWORD *)(a2 + 32) = 1065353216;
    goto LABEL_54;
  }
  uint64_t v5 = 0;
  uint64_t v53 = v4 + 1;
  do
  {
    uint64_t v6 = &v53[v5];
    uint64_t v7 = *v6;
    uint64_t v56 = v5;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F72F8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_24F72F8))
    {
      unint64_t v38 = sub_A10F80(-85.0, 0.0);
      sub_518C8(v38 >> 17, v38 >> 49);
      dword_24F72F0 = v39 | 0x40000000;
      __cxa_guard_release(&qword_24F72F8);
    }
    unint64_t v8 = (int *)((char *)v6 + v7);
    uint64_t v9 = (unsigned int *)((char *)v6 + v7 + *(unsigned __int16 *)((char *)v6 + v7 - *(int *)((char *)v6 + v7) + 8));
    uint64_t v60 = *(unsigned int *)((char *)v9 + *v9);
    if (v60)
    {
      uint64_t v10 = 0;
      int v58 = dword_24F72F0;
      uint64_t v59 = __ROR8__(v5 | ((unint64_t)dword_24F72F0 << 32), 32);
      unint64_t v55 = (int *)((char *)v6 + v7);
      while (1)
      {
        while (1)
        {
          __int16 v12 = sub_3842BC(v10);
          unint64_t v13 = (unsigned int *)((char *)v8 + *(unsigned __int16 *)((char *)v8 - *v8 + 8));
          uint64_t v61 = __ROR8__(*(void *)((char *)&v13[4 * v10 + 1] + *v13), 32);
          uint64_t v68 = &v61;
          int v14 = sub_C385D0((uint64_t)&v78, &v61, (uint64_t)&unk_20F06E0, &v68);
          unint64_t v15 = v14;
          uint64_t v16 = (void **)(v14 + 3);
          int64_t v17 = (char *)v14[3];
          uint64_t v18 = (char *)v14[4];
          if (v17 == v18) {
            break;
          }
          unint64_t v19 = __ROR8__(*((void *)v18 - 2), 32);
          unint64_t v20 = HIDWORD(v19);
          if (v5 != v19 || v58 != v20) {
            break;
          }
          *((_WORD *)v18 - 3) = v12;
          if (++v10 == v60) {
            goto LABEL_5;
          }
        }
        uint64_t v22 = (unsigned __int16 *)((char *)v8 - *v8);
        unsigned int v23 = *v22;
        if (v23 < 0xF)
        {
          __int16 v24 = 0x7FFF;
          if (v23 < 0xD)
          {
            LOBYTE(v25) = 0;
            char v26 = 1;
            unint64_t v27 = v14[5];
            if ((unint64_t)v18 < v27) {
              goto LABEL_9;
            }
            goto LABEL_33;
          }
        }
        else if (v22[7])
        {
          __int16 v24 = *(_WORD *)((char *)v8 + v22[7]);
        }
        else
        {
          __int16 v24 = 0x7FFF;
        }
        if (v22[6])
        {
          char v26 = *((unsigned char *)v8 + v22[6]);
          if (v23 < 0x13) {
            goto LABEL_32;
          }
        }
        else
        {
          char v26 = 1;
          if (v23 < 0x13) {
            goto LABEL_32;
          }
        }
        uint64_t v28 = v22[9];
        if (v28)
        {
          int v25 = (*((unsigned __int8 *)v8 + v28) >> 1) & 1;
          unint64_t v27 = v14[5];
          if ((unint64_t)v18 < v27) {
            goto LABEL_9;
          }
          goto LABEL_33;
        }
LABEL_32:
        LOBYTE(v25) = 0;
        unint64_t v27 = v14[5];
        if ((unint64_t)v18 < v27)
        {
LABEL_9:
          *(void *)uint64_t v18 = v59;
          *((_WORD *)v18 + 4) = v12;
          *((_WORD *)v18 + 5) = v12;
          *((_WORD *)v18 + 6) = v24;
          v18[14] = v26;
          uint64_t v11 = v18 + 16;
          v18[15] = v25;
          goto LABEL_10;
        }
LABEL_33:
        uint64_t v29 = (v18 - v17) >> 4;
        unint64_t v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 60) {
          sub_2E00();
        }
        uint64_t v31 = v27 - (void)v17;
        if (v31 >> 3 > v30) {
          unint64_t v30 = v31 >> 3;
        }
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v32 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v32 = v30;
        }
        if (v32)
        {
          char v57 = v25;
          if (v32 >> 60) {
            sub_188D718();
          }
          char v33 = v26;
          unint64_t v34 = v32;
          unint64_t v35 = (char *)operator new(16 * v32);
          char v26 = v33;
          LOBYTE(v25) = v57;
          unint64_t v8 = v55;
          unint64_t v32 = v34;
        }
        else
        {
          unint64_t v35 = 0;
        }
        long long v36 = &v35[16 * v29];
        *(void *)long long v36 = v59;
        *((_WORD *)v36 + 4) = v12;
        *((_WORD *)v36 + 5) = v12;
        *((_WORD *)v36 + 6) = v24;
        v36[14] = v26;
        v36[15] = v25;
        uint64_t v37 = v36;
        if (v17 == v18)
        {
          uint64_t v5 = v56;
          uint64_t v11 = v36 + 16;
          v15[3] = v36;
          v15[4] = v36 + 16;
          v15[5] = &v35[16 * v32];
          if (v17) {
            goto LABEL_49;
          }
LABEL_10:
          v15[4] = v11;
          if (++v10 == v60) {
            break;
          }
        }
        else
        {
          uint64_t v5 = v56;
          do
          {
            *((_OWORD *)v37 - 1) = *((_OWORD *)v18 - 1);
            v37 -= 16;
            v18 -= 16;
          }
          while (v18 != v17);
          int64_t v17 = (char *)*v16;
          uint64_t v11 = v36 + 16;
          v15[3] = v37;
          v15[4] = v36 + 16;
          v15[5] = &v35[16 * v32];
          if (!v17) {
            goto LABEL_10;
          }
LABEL_49:
          operator delete(v17);
          v15[4] = v11;
          if (++v10 == v60) {
            break;
          }
        }
      }
    }
LABEL_5:
    ++v5;
  }
  while (v5 != v54);
  unint64_t v44 = (void *)v79;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  for (*(_DWORD *)(a2 + 32) = 1065353216; v44; unint64_t v44 = (void *)*v44)
  {
    uint64_t v45 = v44[2];
    uint64_t v68 = 0;
    char v69 = 0;
    long long v70 = xmmword_20F0140;
    uint64_t v71 = 0;
    unsigned int v72 = 0;
    long long v73 = 0u;
    long long v74 = 0u;
    uint64_t v75 = 1;
    __int16 v76 = 256;
    uint64_t v77 = 0;
    int v46 = sub_C346F8((uint64_t)&v68, (uint64_t)(v44 + 3));
    sub_C08F44((uint64_t)&v68, v46, 0, 0);
    uint64_t v47 = v68;
    char v48 = v69;
    if (v69)
    {
      uint64_t v68 = 0;
      char v69 = 0;
    }
    uint64_t v49 = v71;
    long long v50 = v73;
    uint64_t v51 = v72;
    uint64_t v71 = 0;
    unsigned int v72 = 0;
    *(void *)&long long v74 = 0;
    long long v73 = 0uLL;
    uint64_t v61 = v45;
    uint64_t v62 = v47;
    char v63 = v48;
    uint64_t v64 = v50;
    uint64_t v65 = v49;
    uint64_t v66 = *((void *)&v50 + 1);
    uint64_t v67 = v51;
    sub_C38944(a2, &v61, (uint64_t)&v61);
    if (v64)
    {
      if (!v62)
      {
        unint64_t v81 = off_243EB70;
        operator delete[]();
      }
      (*(void (**)(uint64_t *))(*v62 + 24))(v62);
    }
    if (v63 && v62) {
      (*(void (**)(uint64_t *))(*v62 + 8))(v62);
    }
    sub_C08E28(&v68);
  }
LABEL_54:
  unint64_t v40 = (void *)v79;
  if ((void)v79)
  {
    do
    {
      unint64_t v42 = (void *)*v40;
      unint64_t v43 = (void *)v40[3];
      if (v43)
      {
        v40[4] = v43;
        operator delete(v43);
      }
      operator delete(v40);
      unint64_t v40 = v42;
    }
    while (v42);
  }
  unint64_t v41 = (void *)v78;
  *(void *)&long long v78 = 0;
  if (v41) {
    operator delete(v41);
  }
}

void sub_C29330(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_24F72F8);
  sub_3AB00(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_C29354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  sub_C2A6A0((uint64_t)&a25);
  sub_C2A1F0(&a19);
  sub_C08E28(&a32);
  sub_C2A1B4(a9);
  sub_3AB00(v32 - 144);
  _Unwind_Resume(a1);
}

void sub_C29390(_Unwind_Exception *a1)
{
  sub_3AB00(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_C293A4(_Unwind_Exception *a1)
{
  sub_3AB00(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_C293B8(_Unwind_Exception *a1)
{
  sub_3AB00(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_C293CC(_Unwind_Exception *a1)
{
  sub_3AB00(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_C293E0(int *a1@<X1>, uint64_t a2@<X8>)
{
  long long v68 = 0u;
  long long v69 = 0u;
  int v70 = 1065353216;
  uint64_t v2 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v2 >= 5u
    && (uint64_t v3 = v2[2]) != 0
    && (v4 = (unsigned int *)((char *)a1 + v3 + *(unsigned int *)((char *)a1 + v3)), uint64_t v48 = *v4, v48))
  {
    uint64_t v5 = 0;
    uint64_t v47 = v4 + 1;
    uint64_t v6 = &unk_20F06E0;
    do
    {
      uint64_t v49 = v5;
      uint64_t v7 = &v47[v5];
      uint64_t v8 = *v7;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F72F8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_24F72F8))
      {
        unint64_t v32 = sub_A10F80(-85.0, 0.0);
        sub_518C8(v32 >> 17, v32 >> 49);
        dword_24F72F0 = v33 | 0x40000000;
        __cxa_guard_release(&qword_24F72F8);
      }
      uint64_t v9 = (int *)((char *)v7 + v8);
      uint64_t v10 = (unsigned int *)((char *)v9 + *(unsigned __int16 *)((char *)v9 - *v9 + 4));
      int v11 = *(unsigned int *)((char *)v10 + *v10);
      if (v11)
      {
        int v12 = 0;
        uint64_t v13 = __ROR8__(v49 | ((unint64_t)dword_24F72F0 << 32), 32);
        long long v50 = v9;
        do
        {
          while (1)
          {
            int v14 = (unsigned int *)((char *)v9 + *(unsigned __int16 *)((char *)v9 - *v9 + 4));
            uint64_t v51 = __ROR8__(*(void *)((char *)&v14[2 * v12 + 1] + *v14), 32);
            int v58 = &v51;
            unint64_t v15 = sub_C38DE8((uint64_t)&v68, &v51, (uint64_t)v6, &v58);
            uint64_t v16 = v15;
            uint64_t v18 = (char *)v15[4];
            unint64_t v17 = v15[5];
            if ((unint64_t)v18 >= v17) {
              break;
            }
            *(void *)uint64_t v18 = v13;
            v18[8] = v12;
            *(_WORD *)(v18 + 9) = 0;
            void v18[11] = 0;
            v15[4] = v18 + 12;
            if (++v12 == v11) {
              goto LABEL_5;
            }
          }
          unint64_t v19 = v6;
          unint64_t v20 = (void **)(v15 + 3);
          uint64_t v21 = (unsigned char *)v15[3];
          unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v21) >> 2) + 1;
          if (v22 > 0x1555555555555555) {
            sub_2E00();
          }
          unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (void)v21) >> 2);
          if (2 * v23 > v22) {
            unint64_t v22 = 2 * v23;
          }
          if (v23 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v24 = 0x1555555555555555;
          }
          else {
            unint64_t v24 = v22;
          }
          if (v24)
          {
            if (v24 > 0x1555555555555555) {
              sub_188D718();
            }
            int v25 = (char *)operator new(12 * v24);
          }
          else
          {
            int v25 = 0;
          }
          char v26 = &v25[4 * ((v18 - v21) >> 2)];
          *(void *)char v26 = v13;
          v26[8] = v12;
          *(_WORD *)(v26 + 9) = 0;
          v26[11] = 0;
          unint64_t v27 = v26;
          if (v18 != v21)
          {
            do
            {
              uint64_t v28 = *(void *)(v18 - 12);
              v18 -= 12;
              int v29 = *((_DWORD *)v18 + 2);
              *(void *)(v27 - 12) = v28;
              v27 -= 12;
              *((_DWORD *)v27 + 2) = v29;
            }
            while (v18 != v21);
            uint64_t v18 = (char *)*v20;
          }
          unint64_t v30 = &v25[12 * v24];
          uint64_t v31 = v26 + 12;
          v16[3] = v27;
          v16[4] = v26 + 12;
          v16[5] = v30;
          uint64_t v6 = v19;
          if (v18) {
            operator delete(v18);
          }
          uint64_t v9 = v50;
          v16[4] = v31;
          ++v12;
        }
        while (v12 != v11);
      }
LABEL_5:
      uint64_t v5 = v49 + 1;
    }
    while (v49 + 1 != v48);
    unint64_t v38 = (void *)v69;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    for (*(_DWORD *)(a2 + 32) = 1065353216; v38; unint64_t v38 = (void *)*v38)
    {
      uint64_t v39 = v38[2];
      int v58 = 0;
      char v59 = 0;
      long long v60 = xmmword_20F0140;
      uint64_t v61 = 0;
      unsigned int v62 = 0;
      long long v63 = 0u;
      long long v64 = 0u;
      uint64_t v65 = 1;
      __int16 v66 = 256;
      uint64_t v67 = 0;
      int v40 = sub_C34804((uint64_t)&v58, (uint64_t)(v38 + 3));
      sub_C08F44((uint64_t)&v58, v40, 0, 0);
      unint64_t v41 = v58;
      char v42 = v59;
      if (v59)
      {
        int v58 = 0;
        char v59 = 0;
      }
      uint64_t v43 = v61;
      long long v44 = v63;
      uint64_t v45 = v62;
      uint64_t v61 = 0;
      unsigned int v62 = 0;
      *(void *)&long long v64 = 0;
      long long v63 = 0uLL;
      uint64_t v51 = v39;
      uint64_t v52 = v41;
      char v53 = v42;
      uint64_t v54 = v44;
      uint64_t v55 = v43;
      uint64_t v56 = *((void *)&v44 + 1);
      uint64_t v57 = v45;
      sub_C38944(a2, &v51, (uint64_t)&v51);
      if (v54)
      {
        if (!v52)
        {
          uint64_t v71 = off_243EB70;
          operator delete[]();
        }
        (*(void (**)(uint64_t *))(*v52 + 24))(v52);
      }
      if (v53 && v52) {
        (*(void (**)(uint64_t *))(*v52 + 8))(v52);
      }
      sub_C08E28(&v58);
    }
  }
  else
  {
    *(_OWORD *)a2 = 0uLL;
    *(_OWORD *)(a2 + 16) = 0uLL;
    *(_DWORD *)(a2 + 32) = 1065353216;
  }
  unint64_t v34 = (void *)v69;
  if ((void)v69)
  {
    do
    {
      long long v36 = (void *)*v34;
      uint64_t v37 = (void *)v34[3];
      if (v37)
      {
        v34[4] = v37;
        operator delete(v37);
      }
      operator delete(v34);
      unint64_t v34 = v36;
    }
    while (v36);
  }
  unint64_t v35 = (void *)v68;
  *(void *)&long long v68 = 0;
  if (v35) {
    operator delete(v35);
  }
}

void sub_C298DC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_24F72F8);
  sub_3AB00(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_C29900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_C2A6A0((uint64_t)&a21);
  sub_C2A1F0(&a15);
  sub_C08E28(&a28);
  sub_C2A1B4(a9);
  sub_3AB00(v28 - 144);
  _Unwind_Resume(a1);
}

void sub_C2993C(_Unwind_Exception *a1)
{
  sub_3AB00(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_C29950(_Unwind_Exception *a1)
{
  sub_3AB00(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_C29964(_Unwind_Exception *a1)
{
  sub_3AB00(v1 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_C29978@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  long long v76 = 0u;
  long long v77 = 0u;
  int v78 = 1065353216;
  uint64_t v2 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v2 >= 5u
    && (uint64_t v3 = v2[2]) != 0
    && (uint64_t v5 = (unsigned int *)((char *)a1 + v3 + *(unsigned int *)((char *)a1 + v3)), v51 = *v5, v51))
  {
    long long v50 = v5 + 1;
    uint64_t v6 = 0;
    do
    {
      uint64_t v52 = v6;
      uint64_t v7 = &v50[v6];
      uint64_t v8 = *v7;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F72F8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_24F72F8))
      {
        unint64_t v38 = sub_A10F80(-85.0, 0.0);
        sub_518C8(v38 >> 17, v38 >> 49);
        dword_24F72F0 = v39 | 0x40000000;
        __cxa_guard_release(&qword_24F72F8);
      }
      uint64_t v9 = (int *)((char *)v7 + v8);
      uint64_t v10 = (unsigned int *)((char *)v7 + v8 + *(unsigned __int16 *)((char *)v7 + v8 - *(int *)((char *)v7 + v8) + 6));
      int v54 = *(unsigned int *)((char *)v10 + *v10);
      if (v54)
      {
        int v11 = 0;
        uint64_t v56 = __ROR8__(v52 | ((unint64_t)dword_24F72F0 << 32), 32);
        char v53 = (int *)((char *)v7 + v8);
        do
        {
          int v12 = (unsigned __int16 *)((char *)v9 - *v9);
          if (*v12 < 0x11u)
          {
            int v14 = 0;
            int v15 = *(int *)((char *)v9 + v12[2] + *(unsigned int *)((char *)v9 + v12[2]));
            unsigned int v16 = v15 * v11;
          }
          else
          {
            if (v12[8]) {
              int v13 = *(int *)((char *)v9 + v12[8]);
            }
            else {
              int v13 = 0;
            }
            int v15 = *(int *)((char *)v9 + v12[2] + *(unsigned int *)((char *)v9 + v12[2]));
            unsigned int v16 = v13 + v15 * v11;
            uint64_t v17 = v12[8];
            if (v17) {
              int v14 = *(int *)((char *)v9 + v17);
            }
            else {
              int v14 = 0;
            }
          }
          int v55 = v11 + 1;
          unsigned int v18 = v14 + v15 * (v11 + 1);
          BOOL v19 = v16 >= v18;
          if (v16 > v18) {
            unsigned int v18 = v16;
          }
          unsigned int v57 = v18;
          int v58 = v11;
          if (!v19)
          {
            do
            {
              uint64_t v21 = (unsigned int *)((char *)a1 + *(unsigned __int16 *)((char *)a1 - *a1 + 10));
              uint64_t v22 = (uint64_t)&v21[3 * v16] + *v21;
              uint64_t v66 = __ROR8__(*(void *)(v22 + 4), 32);
              unsigned int v67 = *(_DWORD *)(v22 + 12);
              char v59 = &v66;
              unint64_t v23 = sub_BDF338((uint64_t)&v76, &v66, (uint64_t)&unk_20F06E0, &v59);
              uint64_t v24 = v23[3];
              if (v67 >= (unint64_t)((v23[4] - v24) >> 3)) {
                operator new();
              }
              int v25 = *(void ***)(v24 + 8 * v67);
              unint64_t v27 = (char *)v25[1];
              unint64_t v26 = (unint64_t)v25[2];
              if ((unint64_t)v27 < v26)
              {
                *(void *)unint64_t v27 = v56;
                *((_DWORD *)v27 + 2) = v58;
                unint64_t v20 = v27 + 12;
              }
              else
              {
                uint64_t v28 = (char *)*v25;
                unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((v27 - (unsigned char *)*v25) >> 2);
                unint64_t v30 = v29 + 1;
                if (v29 + 1 > 0x1555555555555555) {
                  sub_2E00();
                }
                unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - (void)v28) >> 2);
                if (2 * v31 > v30) {
                  unint64_t v30 = 2 * v31;
                }
                if (v31 >= 0xAAAAAAAAAAAAAAALL) {
                  unint64_t v32 = 0x1555555555555555;
                }
                else {
                  unint64_t v32 = v30;
                }
                if (v32)
                {
                  if (v32 > 0x1555555555555555) {
                    sub_188D718();
                  }
                  int v33 = (char *)operator new(12 * v32);
                }
                else
                {
                  int v33 = 0;
                }
                unint64_t v34 = &v33[12 * v29];
                *(void *)unint64_t v34 = v56;
                *((_DWORD *)v34 + 2) = v58;
                unint64_t v35 = v34;
                if (v27 != v28)
                {
                  do
                  {
                    uint64_t v36 = *(void *)(v27 - 12);
                    v27 -= 12;
                    int v37 = *((_DWORD *)v27 + 2);
                    *(void *)(v35 - 12) = v36;
                    v35 -= 12;
                    *((_DWORD *)v35 + 2) = v37;
                  }
                  while (v27 != v28);
                  unint64_t v27 = (char *)*v25;
                }
                unint64_t v20 = v34 + 12;
                *int v25 = v35;
                v25[1] = v34 + 12;
                void v25[2] = &v33[12 * v32];
                if (v27) {
                  operator delete(v27);
                }
              }
              v25[1] = v20;
              ++v16;
            }
            while (v16 != v57);
          }
          int v11 = v55;
          uint64_t v9 = v53;
        }
        while (v55 != v54);
      }
      uint64_t v6 = v52 + 1;
    }
    while (v52 + 1 != v51);
    unint64_t v41 = (void *)v77;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    for (*(_DWORD *)(a2 + 32) = 1065353216; v41; unint64_t v41 = (void *)*v41)
    {
      char v42 = (uint64_t *)v41[2];
      uint64_t v66 = 0;
      LOBYTE(v67) = 0;
      long long v68 = xmmword_20F0140;
      uint64_t v69 = 0;
      unsigned int v70 = 0;
      long long v71 = 0u;
      long long v72 = 0u;
      uint64_t v73 = 1;
      __int16 v74 = 256;
      uint64_t v75 = 0;
      int v43 = sub_C3491C((uint64_t)&v66, v41 + 3, 0);
      sub_C08F44((uint64_t)&v66, v43, 0, 0);
      uint64_t v44 = v66;
      char v45 = v67;
      if ((_BYTE)v67)
      {
        uint64_t v66 = 0;
        LOBYTE(v67) = 0;
      }
      uint64_t v46 = v69;
      long long v47 = v71;
      uint64_t v48 = v70;
      uint64_t v69 = 0;
      unsigned int v70 = 0;
      *(void *)&long long v72 = 0;
      long long v71 = 0uLL;
      char v59 = v42;
      uint64_t v60 = v44;
      char v61 = v45;
      uint64_t v62 = v47;
      uint64_t v63 = v46;
      uint64_t v64 = *((void *)&v47 + 1);
      uint64_t v65 = v48;
      sub_C38944(a2, (uint64_t *)&v59, (uint64_t)&v59);
      if (v62)
      {
        if (!v60)
        {
          long long v79 = off_243EB70;
          operator delete[]();
        }
        (*(void (**)(uint64_t))(*(void *)v60 + 24))(v60);
      }
      if (v61 && v60) {
        (*(void (**)(uint64_t))(*(void *)v60 + 8))(v60);
      }
      sub_C08E28(&v66);
    }
  }
  else
  {
    *(_OWORD *)a2 = 0uLL;
    *(_OWORD *)(a2 + 16) = 0uLL;
    *(_DWORD *)(a2 + 32) = 1065353216;
  }
  return sub_BDF270((uint64_t)&v76);
}

void sub_C2A0C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_24F72F8);
  sub_BDF270(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_C2A0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  sub_C2A6A0((uint64_t)&a25);
  sub_C2A1F0(&a19);
  sub_C08E28(&a32);
  sub_C2A1B4(a9);
  sub_BDF270(v32 - 144);
  _Unwind_Resume(a1);
}

void sub_C2A120(_Unwind_Exception *a1)
{
  sub_BDF270(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_C2A134(_Unwind_Exception *a1)
{
  sub_BDF270(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_C2A148(_Unwind_Exception *a1)
{
  sub_BDF270(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_C2A15C()
{
}

void sub_C2A1A0(_Unwind_Exception *a1)
{
  sub_BDF270(v1 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_C2A1B4(uint64_t a1)
{
  sub_C37FD8(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void *sub_C2A1F0(void *a1)
{
  uint64_t v2 = a1 + 2;
  if (a1[2])
  {
    uint64_t v3 = *a1;
    if (!*a1) {
      operator delete[]();
    }
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  if (*((unsigned char *)a1 + 8) && *a1) {
    (*(void (**)(void))(*(void *)*a1 + 8))(*a1);
  }
  *a1 = 0;
  *((unsigned char *)a1 + 8) = 0;
  _OWORD *v2 = 0u;
  v2[1] = 0u;
  return a1;
}

void *sub_C2A2E4@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (uint64_t *)a1[527];
  uint64_t v7 = (uint64_t *)a1[528];
  *(_OWORD *)(a1 + 527) = 0u;
  a1[529] = 0;
  uint64_t v8 = (void *)a1[530];
  a1[530] = 0;
  a1[532] = 0;
  a1[531] = 0;
  uint64_t v9 = (void *)a1[533];
  a1[534] = 0;
  a1[535] = 0;
  a1[533] = 0;
  uint64_t v10 = (void *)a1[536];
  a1[536] = 0;
  a1[538] = 0;
  a1[537] = 0;
  if (v10) {
    operator delete(v10);
  }
  if (v9) {
    operator delete(v9);
  }
  if (v8) {
    operator delete(v8);
  }
  if (v6)
  {
    if (v7 != v6)
    {
      int v11 = v7 - 1;
      do
      {
        uint64_t v13 = *v11;
        *int v11 = 0;
        if (v13) {
          sub_BDD258((uint64_t)v11, v13);
        }
      }
      while (v11-- != v6);
    }
    operator delete(v6);
  }
  if (a1[542])
  {
    int v14 = (void *)a1[541];
    if (v14)
    {
      do
      {
        int v15 = (void *)*v14;
        operator delete(v14);
        int v14 = v15;
      }
      while (v15);
    }
    a1[541] = 0;
    uint64_t v16 = a1[540];
    if (v16)
    {
      for (uint64_t i = 0; i != v16; ++i)
        *(void *)(a1[539] + 8 * i) = 0;
    }
    a1[542] = 0;
  }
  if (a1[547])
  {
    unsigned int v18 = (void *)a1[546];
    if (v18)
    {
      do
      {
        BOOL v19 = (void *)*v18;
        operator delete(v18);
        unsigned int v18 = v19;
      }
      while (v19);
    }
    a1[546] = 0;
    uint64_t v20 = a1[545];
    if (v20)
    {
      for (uint64_t j = 0; j != v20; ++j)
        *(void *)(a1[544] + 8 * j) = 0;
    }
    a1[547] = 0;
  }
  if (a1[553])
  {
    uint64_t v22 = (void *)a1[552];
    if (v22)
    {
      do
      {
        unint64_t v26 = (void *)*v22;
        unint64_t v27 = (void *)v22[2];
        if (v27) {
          operator delete(v27);
        }
        operator delete(v22);
        uint64_t v22 = v26;
      }
      while (v26);
    }
    a1[552] = 0;
    uint64_t v23 = a1[551];
    if (v23)
    {
      for (uint64_t k = 0; k != v23; ++k)
        *(void *)(a1[550] + 8 * k) = 0;
    }
    a1[553] = 0;
  }
  if (*a2 == a2[1])
  {
    return sub_C2BD98((uint64_t)a1, a3);
  }
  else
  {
    LODWORD(v47[0]) = *(_DWORD *)(*a2 + 4);
    a1[549] = (uint64_t)sub_C2BE88(a1, (unsigned int *)v47);
    int v25 = (_DWORD *)*a2;
    while (1)
    {
      uint64_t v28 = (_DWORD *)a2[1];
      if (v25 == v28) {
        break;
      }
      unint64_t v29 = v25;
      int v31 = *v25;
      int v30 = v25[1];
      while (v25[1] == v30 && *v25 == v31)
      {
        v25 += 8;
        if (v25 == v28)
        {
          int v25 = (_DWORD *)a2[1];
          break;
        }
      }
      v47[0] = v29;
      v47[1] = v25;
      sub_C2C034(a1, (uint64_t)v47);
      if (v25 == (_DWORD *)a2[1]) {
        break;
      }
      if (a1[553])
      {
        uint64_t v32 = (void *)a1[552];
        if (v32)
        {
          do
          {
            int v43 = (void *)*v32;
            uint64_t v44 = (void *)v32[2];
            if (v44) {
              operator delete(v44);
            }
            operator delete(v32);
            uint64_t v32 = v43;
          }
          while (v43);
        }
        a1[552] = 0;
        uint64_t v33 = a1[551];
        if (v33)
        {
          for (uint64_t m = 0; m != v33; ++m)
            *(void *)(a1[550] + 8 * m) = 0;
        }
        a1[553] = 0;
      }
      if (v25[1] != v29[1])
      {
        if (a1[542])
        {
          unint64_t v35 = (void *)a1[541];
          if (v35)
          {
            do
            {
              uint64_t v36 = (void *)*v35;
              operator delete(v35);
              unint64_t v35 = v36;
            }
            while (v36);
          }
          a1[541] = 0;
          uint64_t v37 = a1[540];
          if (v37)
          {
            for (uint64_t n = 0; n != v37; ++n)
              *(void *)(a1[539] + 8 * n) = 0;
          }
          a1[542] = 0;
        }
        if (a1[547])
        {
          int v39 = (void *)a1[546];
          if (v39)
          {
            do
            {
              int v40 = (void *)*v39;
              operator delete(v39);
              int v39 = v40;
            }
            while (v40);
          }
          a1[546] = 0;
          uint64_t v41 = a1[545];
          if (v41)
          {
            for (iuint64_t i = 0; ii != v41; ++ii)
              *(void *)(a1[544] + 8 * ii) = 0;
          }
          a1[547] = 0;
        }
        unsigned int v46 = v25[1];
        a1[549] = (uint64_t)sub_C2BE88(a1, &v46);
      }
    }
    return sub_C2BD98((uint64_t)a1, a3);
  }
}

uint64_t sub_C2A6A0(uint64_t a1)
{
  uint64_t v2 = (_OWORD *)(a1 + 24);
  if (*(void *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    if (!v3) {
      operator delete[]();
    }
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  _OWORD *v2 = 0u;
  v2[1] = 0u;
  return a1;
}

void sub_C2A794(uint64_t a1, unint64_t a2, void **a3)
{
  uint64_t v5 = (void *)(a1 + 32);
  BOOL v6 = HIDWORD(a2) == 0xFFFFFFFF || a2 == 0;
  unint64_t v7 = __ROR8__(a2, 32);
  if (v6) {
    unint64_t v8 = 0xFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v7;
  }
  sub_A1DF34((uint64_t)v29, v5, v8, 1, 1, 0);
  unint64_t v9 = v32;
  unint64_t v10 = v33;
LABEL_8:
  if (v9 < v10)
  {
    int v11 = *(unsigned __int16 *)(v9 + 10);
    sub_A1E9A0((uint64_t)&v24, (uint64_t)v5, __ROR8__(*(void *)v9, 32), *(unsigned __int16 *)(v9 + 8), 0, 0);
    unint64_t v13 = v26;
    int v12 = v27;
    while ((unint64_t)v12 >= v13 && (unint64_t)v12 < v28)
    {
      if (v8 == __ROR8__(*v12, 32))
      {
        sub_C2B2BC(a1, (uint64_t)&v24, a3);
        unint64_t v13 = v26;
        int v12 = v27;
        if ((((unint64_t)v27 - v26) >> 4) == v11) {
          break;
        }
      }
      v12 += 2;
      unint64_t v27 = v12;
      if (*(unsigned char *)(v24 + 16)) {
        BOOL v15 = v25 == 0;
      }
      else {
        BOOL v15 = 0;
      }
      BOOL v16 = v15 && (unint64_t)v12 >= v13;
      if (v16 && (unint64_t)v12 < v28)
      {
        do
        {
          unint64_t v17 = __ROR8__(*v12, 32);
          if (HIDWORD(v17) == 1 && (v17 + 3) < 2) {
            break;
          }
          char v19 = sub_2AB7E4(**(void **)(v24 + 4120));
          unint64_t v13 = v26;
          int v12 = v27;
          if (v19) {
            break;
          }
          int v12 = v27 + 2;
          unint64_t v27 = v12;
        }
        while ((unint64_t)v12 >= v26 && (unint64_t)v12 < v28);
      }
    }
    unint64_t v10 = v33;
    unint64_t v9 = v32 + 16;
    unint64_t v32 = v9;
    if (v9 == v33)
    {
      uint64_t v21 = v30 + 2;
      int v30 = v21;
      if ((unint64_t)v21 < v31)
      {
        while (1)
        {
          unint64_t v9 = *v21;
          unint64_t v10 = v21[1];
          if (*v21 != v10) {
            break;
          }
          v21 += 2;
          int v30 = v21;
          if ((unint64_t)v21 >= v31) {
            return;
          }
        }
LABEL_42:
        unint64_t v32 = v9;
        unint64_t v33 = v10;
        goto LABEL_43;
      }
    }
    else
    {
      do
      {
LABEL_43:
        if (v9 >= v10) {
          goto LABEL_8;
        }
        BOOL v22 = sub_A1E87C(v29);
        unint64_t v9 = v32;
        unint64_t v10 = v33;
        if (!v22) {
          goto LABEL_8;
        }
        unint64_t v9 = v32 + 16;
        unint64_t v32 = v9;
      }
      while (v9 != v33);
      uint64_t v23 = v30 + 2;
      int v30 = v23;
      if ((unint64_t)v23 < v31)
      {
        while (1)
        {
          unint64_t v9 = *v23;
          unint64_t v10 = v23[1];
          if (*v23 != v10) {
            break;
          }
          v23 += 2;
          int v30 = v23;
          if ((unint64_t)v23 >= v31) {
            return;
          }
        }
        goto LABEL_42;
      }
    }
  }
}

void sub_C2A9B8(uint64_t a1, unint64_t a2, void **a3)
{
  sub_911E78(a1 + 4232, a2, 1, 0x80000000, 2147483646, &v105);
  uint64_t v6 = v105;
  uint64_t v82 = v106;
  if (v105 == v106) {
    goto LABEL_141;
  }
  unint64_t v7 = (void *)(a1 + 32);
  BOOL v8 = HIDWORD(a2) == 0xFFFFFFFF || a2 == 0;
  unint64_t v9 = __ROR8__(a2, 32);
  if (v8) {
    unint64_t v9 = 0xFFFFFFFFLL;
  }
  uint64_t v80 = a1 + 32;
  unint64_t v81 = v9;
  unint64_t v10 = (_DWORD *)&unk_24F7000;
  sub_C0B7B4((uint64_t)v99, v7, v9, 1, 0);
LABEL_10:
  while (2)
  {
    int v11 = v102;
    unint64_t v12 = (unint64_t)v103;
    while ((unint64_t)v11 < v12)
    {
      sub_A1E9A0((uint64_t)v92, (uint64_t)v7, __ROR8__(*v11, 32), 0, 0, 0);
      sub_C2B980(*((unsigned __int8 *)v102 + 8), (uint64_t)v92, (char **)&__p);
      unint64_t v13 = (unsigned int *)__p;
      if (__p == v91) {
        goto LABEL_83;
      }
      uint64_t v14 = *(v91 - 1);
      signed int v15 = *(_DWORD *)(v6 + 8);
      if (v98)
      {
        unint64_t v16 = sub_C3BD1C((uint64_t)v7, v92, v14, v15);
        unsigned int v89 = v17;
        unint64_t v18 = v16;
        unint64_t v19 = v97;
        if (!HIDWORD(v97)) {
          goto LABEL_82;
        }
      }
      else
      {
        uint64_t v94 = v93 + 16 * v14;
        if (sub_A1F8B4((uint64_t)v92, v15, 1))
        {
          unint64_t v18 = (-1431655765 * ((unint64_t)(v96 - v95) >> 2)) | 0xFFFFFFFF00000000;
          unsigned int v89 = -1;
          unint64_t v19 = v97;
          if (!HIDWORD(v97)) {
            goto LABEL_82;
          }
        }
        else
        {
          unint64_t v18 = -1;
          unsigned int v89 = -1;
          unint64_t v19 = v97;
          if (!HIDWORD(v97)) {
            goto LABEL_82;
          }
        }
      }
      if (v19 == 0xFFFFFFFFLL) {
        goto LABEL_82;
      }
      if (v18 == 0xFFFFFFFFLL || v14 == -1) {
        goto LABEL_82;
      }
      unsigned int v21 = *(unsigned __int16 *)(v6 + 23);
      unsigned int v22 = *(unsigned __int8 *)(v6 + 25);
      int v23 = *(unsigned __int8 *)(v6 + 26);
      uint64_t v24 = *(unsigned int *)__p;
      int v25 = *(_DWORD *)(v6 + 12);
      if (v98)
      {
        unint64_t v26 = sub_C3C474(v80, v92, *(_DWORD *)__p, v25);
        unsigned int v87 = v27;
        unint64_t v28 = v26;
        unint64_t v88 = v97;
        if (!HIDWORD(v97)) {
          goto LABEL_82;
        }
      }
      else
      {
        uint64_t v94 = v93 + 16 * v24;
        if (sub_A2BC00((uint64_t)v92, v25, 1))
        {
          unint64_t v28 = (1 - 1431655765 * ((unint64_t)(v96 - v95) >> 2)) | 0xFFFFFFFF00000000;
          unsigned int v87 = -1;
          unint64_t v88 = v97;
          if (!HIDWORD(v97)) {
            goto LABEL_82;
          }
        }
        else
        {
          unint64_t v28 = -1;
          unsigned int v87 = -1;
          unint64_t v88 = v97;
          if (!HIDWORD(v97)) {
            goto LABEL_82;
          }
        }
      }
      if (v88 == 0xFFFFFFFFLL || v28 == -1 || v24 == -1) {
        goto LABEL_82;
      }
      BOOL v29 = v28 >= v18;
      if (v28 != v18) {
        goto LABEL_40;
      }
      BOOL v29 = HIDWORD(v28) >= HIDWORD(v18);
      if (HIDWORD(v28) != HIDWORD(v18)) {
        goto LABEL_40;
      }
      if (v87 != v89)
      {
        if (HIDWORD(v28) != -1)
        {
          BOOL v29 = v87 >= v89;
LABEL_40:
          if (!v29) {
            goto LABEL_82;
          }
        }
        int v30 = (int *)__p;
        unint64_t v86 = (int *)v91;
        if (__p != v91)
        {
          int v84 = (__PAIR64__(*(unsigned __int8 *)(v6 + 25), bswap32(*(unsigned __int16 *)(v6 + 23))) >> 16) | (*(unsigned __int8 *)(v6 + 26) << 24);
          int v85 = (__PAIR64__(v22, bswap32(v21)) >> 16) | (v23 << 24);
          unint64_t v31 = a3[1];
          unint64_t v83 = v28;
          do
          {
            int v32 = *v30;
            unint64_t v33 = (unint64_t)a3[2];
            if ((unint64_t)v31 < v33)
            {
              *unint64_t v31 = v19;
              v31[1] = v18;
              *((_DWORD *)v31 + 4) = v89;
              *((_DWORD *)v31 + 5) = 1;
              unint64_t v34 = v31 + 4;
              *((_DWORD *)v31 + 6) = v32;
              *((_DWORD *)v31 + 7) = v85;
              goto LABEL_63;
            }
            unint64_t v35 = *a3;
            uint64_t v36 = ((char *)v31 - (unsigned char *)*a3) >> 5;
            unint64_t v37 = v36 + 1;
            if ((unint64_t)(v36 + 1) >> 59) {
              goto LABEL_144;
            }
            uint64_t v38 = v33 - (void)v35;
            if (v38 >> 4 > v37) {
              unint64_t v37 = v38 >> 4;
            }
            if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v39 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v39 = v37;
            }
            if (v39)
            {
              if (v39 >> 59) {
                goto LABEL_145;
              }
              int v40 = (char *)operator new(32 * v39);
            }
            else
            {
              int v40 = 0;
            }
            uint64_t v41 = &v40[32 * v36];
            *(void *)uint64_t v41 = v19;
            *((void *)v41 + 1) = v18;
            *((_DWORD *)v41 + 4) = v89;
            *((_DWORD *)v41 + 5) = 1;
            *((_DWORD *)v41 + 6) = v32;
            *((_DWORD *)v41 + 7) = v85;
            char v42 = v41;
            if (v31 == v35)
            {
              unint64_t v28 = v83;
              int v55 = &v40[32 * v39];
              unint64_t v34 = v41 + 32;
              *a3 = v41;
              a3[1] = v41 + 32;
              a3[2] = v55;
              if (v31) {
                goto LABEL_62;
              }
            }
            else
            {
              unint64_t v28 = v83;
              do
              {
                long long v43 = *((_OWORD *)v31 - 1);
                *((_OWORD *)v42 - 2) = *((_OWORD *)v31 - 2);
                *((_OWORD *)v42 - 1) = v43;
                v42 -= 32;
                v31 -= 4;
              }
              while (v31 != v35);
              unint64_t v31 = *a3;
              uint64_t v44 = &v40[32 * v39];
              unint64_t v34 = v41 + 32;
              *a3 = v42;
              a3[1] = v41 + 32;
              a3[2] = v44;
              if (v31) {
LABEL_62:
              }
                operator delete(v31);
            }
LABEL_63:
            a3[1] = v34;
            unint64_t v45 = (unint64_t)a3[2];
            if ((unint64_t)v34 < v45)
            {
              *unint64_t v34 = v88;
              v34[1] = v28;
              *((_DWORD *)v34 + 4) = v87;
              *((_DWORD *)v34 + 5) = 0;
              unint64_t v31 = v34 + 4;
              *((_DWORD *)v34 + 6) = v32;
              *((_DWORD *)v34 + 7) = v84;
            }
            else
            {
              unsigned int v46 = *a3;
              uint64_t v47 = ((char *)v34 - (unsigned char *)*a3) >> 5;
              unint64_t v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 59) {
LABEL_144:
              }
                sub_2E00();
              uint64_t v49 = v45 - (void)v46;
              if (v49 >> 4 > v48) {
                unint64_t v48 = v49 >> 4;
              }
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v50 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v50 = v48;
              }
              if (v50)
              {
                if (v50 >> 59) {
LABEL_145:
                }
                  sub_188D718();
                uint64_t v51 = (char *)operator new(32 * v50);
              }
              else
              {
                uint64_t v51 = 0;
              }
              uint64_t v52 = &v51[32 * v47];
              unint64_t v28 = v83;
              *(void *)uint64_t v52 = v88;
              *((void *)v52 + 1) = v83;
              *((_DWORD *)v52 + 4) = v87;
              *((_DWORD *)v52 + 5) = 0;
              char v53 = &v51[32 * v50];
              *((_DWORD *)v52 + 6) = v32;
              *((_DWORD *)v52 + 7) = v84;
              unint64_t v31 = v52 + 32;
              if (v34 == v46)
              {
                *a3 = v52;
                a3[1] = v31;
                a3[2] = v53;
              }
              else
              {
                do
                {
                  long long v54 = *((_OWORD *)v34 - 1);
                  *((_OWORD *)v52 - 2) = *((_OWORD *)v34 - 2);
                  *((_OWORD *)v52 - 1) = v54;
                  v52 -= 32;
                  v34 -= 4;
                }
                while (v34 != v46);
                unint64_t v34 = *a3;
                *a3 = v52;
                a3[1] = v31;
                a3[2] = v53;
                if (!v34) {
                  goto LABEL_45;
                }
              }
              operator delete(v34);
            }
LABEL_45:
            a3[1] = v31;
            ++v30;
          }
          while (v30 != v86);
        }
      }
LABEL_82:
      unint64_t v13 = (unsigned int *)__p;
      unint64_t v7 = (void *)v80;
      unint64_t v10 = (_DWORD *)&unk_24F7000;
LABEL_83:
      if (v13)
      {
        uint64_t v91 = v13;
        operator delete(v13);
      }
      unint64_t v12 = (unint64_t)v103;
      int v11 = (void *)((char *)v102 + 12);
      uint64_t v102 = v11;
      if (v11 == v103)
      {
        uint64_t v56 = v100 + 2;
        int64_t v100 = v56;
        if ((unint64_t)v56 >= v101) {
          break;
        }
        while (1)
        {
          int v11 = (void *)*v56;
          unint64_t v12 = v56[1];
          if (*v56 != v12) {
            break;
          }
          v56 += 2;
          int64_t v100 = v56;
          if ((unint64_t)v56 >= v101) {
            goto LABEL_8;
          }
        }
        uint64_t v102 = (void *)*v56;
        uint64_t v103 = (void *)v12;
        if ((unint64_t)v11 < v12)
        {
          while (1)
          {
LABEL_96:
            if (!v104)
            {
              uint64_t v57 = v99[0];
              uint64_t v58 = *v11;
              uint64_t v59 = *(void *)(v99[0] + 4136);
              if (sub_C259C0(v59 + 3896))
              {
                if (*(void *)(v59 + 3944))
                {
                  unint64_t v60 = __ROR8__(v58, 32);
                  if (!sub_A10E20((void *)(v57 + 4136), SHIDWORD(v60)))
                  {
                    char v61 = *(void **)(*(void *)(v57 + 4136) + 3944);
                    int8x8_t v62 = (int8x8_t)v61[1];
                    if (v62)
                    {
                      unint64_t v63 = 0xC4CEB9FE1A85EC53
                          * ((0xFF51AFD7ED558CCDLL * (v60 ^ (v60 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v60 ^ (v60 >> 33))) >> 33));
                      unint64_t v64 = v63 ^ (v63 >> 33);
                      uint8x8_t v65 = (uint8x8_t)vcnt_s8(v62);
                      v65.i16[0] = vaddlv_u8(v65);
                      if (v65.u32[0] > 1uLL)
                      {
                        unint64_t v66 = v64;
                        if (v64 >= *(void *)&v62) {
                          unint64_t v66 = v64 % *(void *)&v62;
                        }
                      }
                      else
                      {
                        unint64_t v66 = (*(void *)&v62 - 1) & v64;
                      }
                      unsigned int v67 = *(uint64_t ***)(*v61 + 8 * v66);
                      if (v67)
                      {
                        long long v68 = *v67;
                        if (v68)
                        {
                          if (v65.u32[0] < 2uLL)
                          {
                            uint64_t v69 = *(void *)&v62 - 1;
                            while (1)
                            {
                              uint64_t v73 = v68[1];
                              if (v64 == v73)
                              {
                                if (*((_DWORD *)v68 + 5) == HIDWORD(v60) && *((_DWORD *)v68 + 4) == v60) {
                                  goto LABEL_133;
                                }
                              }
                              else if ((v73 & v69) != v66)
                              {
                                goto LABEL_126;
                              }
                              long long v68 = (uint64_t *)*v68;
                              if (!v68) {
                                goto LABEL_126;
                              }
                            }
                          }
                          do
                          {
                            unint64_t v71 = v68[1];
                            if (v64 == v71)
                            {
                              if (*((_DWORD *)v68 + 5) == HIDWORD(v60) && *((_DWORD *)v68 + 4) == v60) {
                                goto LABEL_133;
                              }
                            }
                            else
                            {
                              if (v71 >= *(void *)&v62) {
                                v71 %= *(void *)&v62;
                              }
                              if (v71 != v66) {
                                break;
                              }
                            }
                            long long v68 = (uint64_t *)*v68;
                          }
                          while (v68);
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_126:
            if (!*(unsigned char *)(v99[0] + 16)) {
              goto LABEL_10;
            }
            uint64_t v74 = v99[0] + 4136;
            int v75 = *(_DWORD *)v102;
            if (sub_A10E20((void *)(v99[0] + 4136), *(_DWORD *)v102))
            {
              if (*(void *)(*(void *)v74 + 3944)) {
                goto LABEL_10;
              }
            }
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_24F7308))
            {
              sub_518C8(0x3B60u, 0x7FCAu);
              unint64_t v10 = &unk_24F7000;
              dword_24F7300 = v79 | 0x40000000;
              __cxa_guard_release(&qword_24F7308);
              unint64_t v7 = (void *)v80;
            }
            long long v76 = *(uint64_t **)v74;
            if (v10[192] == v75)
            {
              if (v76[497]) {
                goto LABEL_10;
              }
            }
            if (sub_2AB7E4(*v76)) {
              goto LABEL_10;
            }
LABEL_133:
            unint64_t v77 = (unint64_t)v103;
            int v11 = (void *)((char *)v102 + 12);
            uint64_t v102 = v11;
            if (v11 == v103)
            {
              int v78 = v100 + 2;
              int64_t v100 = v78;
              if ((unint64_t)v78 >= v101) {
                goto LABEL_10;
              }
              while (1)
              {
                int v11 = (void *)*v78;
                unint64_t v77 = v78[1];
                if (*v78 != v77) {
                  break;
                }
                v78 += 2;
                int64_t v100 = v78;
                if ((unint64_t)v78 >= v101) {
                  goto LABEL_8;
                }
              }
              uint64_t v102 = (void *)*v78;
              uint64_t v103 = (void *)v77;
            }
            if ((unint64_t)v11 >= v77) {
              goto LABEL_10;
            }
          }
        }
      }
      else if (v11 < v103)
      {
        goto LABEL_96;
      }
    }
LABEL_8:
    v6 += 28;
    if (v6 != v82)
    {
      sub_C0B7B4((uint64_t)v99, v7, v81, 1, 0);
      continue;
    }
    break;
  }
  uint64_t v6 = v105;
LABEL_141:
  if (v6)
  {
    uint64_t v106 = v6;
    operator delete((void *)v6);
  }
}

void sub_C2B218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  __cxa_guard_abort(&qword_24F7308);
  unsigned int v21 = *(void **)(v19 - 112);
  if (!v21) {
    _Unwind_Resume(a1);
  }
  *(void *)(v19 - 104) = v21;
  operator delete(v21);
  _Unwind_Resume(a1);
}

void sub_C2B2BC(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v90 = *(void *)(a2 + 32) - v6;
  unint64_t v7 = v90 >> 4;
  unint64_t v8 = (unint64_t)(*(void *)(a2 + 40) - v6) >> 4;
  unint64_t v9 = *(void *)(a2 + 88);
  unint64_t v10 = (void *)(a1 + 4168);
  int v11 = (int *)sub_A11094((void *)(a1 + 4168), v9);
  unint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
  unsigned int v13 = *v12;
  if (v13 < 5)
  {
    uint64_t v14 = 0;
    goto LABEL_6;
  }
  if (!v12[2])
  {
    uint64_t v14 = 0;
    if (v13 >= 9) {
      goto LABEL_110;
    }
LABEL_6:
    signed int v15 = 0;
    goto LABEL_7;
  }
  uint64_t v14 = (char *)v11 + v12[2] + *(unsigned int *)((char *)v11 + v12[2]);
  if (v13 < 9) {
    goto LABEL_6;
  }
LABEL_110:
  uint64_t v79 = v12[4];
  if (!v79) {
    goto LABEL_6;
  }
  signed int v15 = (unsigned int *)((char *)v11 + v79 + *(unsigned int *)((char *)v11 + v79));
LABEL_7:
  uint64_t v16 = *(void *)&v14[8 * *(unsigned __int8 *)(sub_A10764(v15, v7) + 14) + 4];
  unint64_t v86 = a3;
  unint64_t v89 = v90 >> 4;
  if (v7)
  {
    unsigned int v17 = (int *)sub_A11094(v10, v9);
    unint64_t v18 = (unsigned __int16 *)((char *)v17 - *v17);
    if (*v18 >= 9u && (uint64_t v19 = v18[4]) != 0) {
      uint64_t v20 = (unsigned int *)((char *)v17 + v19 + *(unsigned int *)((char *)v17 + v19));
    }
    else {
      uint64_t v20 = 0;
    }
    unint64_t v21 = __ROR8__(*(void *)sub_A10764(v20, (int)v7 - 1), 32);
    unint64_t v22 = HIDWORD(v21);
    unint64_t v23 = v21 << 32;
  }
  else
  {
    unint64_t v22 = 0;
    unint64_t v23 = 0xFFFFFFFF00000000;
  }
  uint64_t v24 = __ROR8__(v16, 32);
  uint64_t v25 = __ROR8__(**(void **)(a2 + 32), 32);
  if ((int)v89 + 1 >= v8)
  {
    unint64_t v30 = 0xFFFFFFFF00000000;
  }
  else
  {
    unint64_t v26 = (int *)sub_A11094(v10, v9);
    unsigned int v27 = (unsigned __int16 *)((char *)v26 - *v26);
    if (*v27 >= 9u && (uint64_t v28 = v27[4]) != 0) {
      BOOL v29 = (unsigned int *)((char *)v26 + v28 + *(unsigned int *)((char *)v26 + v28));
    }
    else {
      BOOL v29 = 0;
    }
    unint64_t v30 = *(void *)sub_A10764(v29, (int)v89 + 1);
  }
  unint64_t v93 = v23 | v22;
  unint64_t v94 = __ROR8__(v25, 32);
  v92[0] = v94;
  v92[1] = v30;
  uint64_t v96 = 0;
  uint64_t v97 = 0;
  uint64_t v95 = 0;
  sub_912588(a1 + 4232, v94, 1, 0x80000000, 2147483646, 1, __ROR8__(v24, 32), (uint64_t)&v93, (uint64_t)v92, &v95);
  unint64_t v31 = v95;
  unint64_t v88 = v96;
  if (v95 != v96)
  {
    uint64_t v91 = (v90 >> 4);
    uint64_t v87 = a1 + 32;
    while (1)
    {
      if (!v31[25]
        && (!v31[24] || (*(unsigned char *)(*(void *)(a2 + 32) + 15) & 2) == 0)
        && (!v31[23] || (*(unsigned char *)(*(void *)(a2 + 32) + 15) & 1) == 0))
      {
        goto LABEL_25;
      }
      signed int v33 = *((_DWORD *)v31 + 2);
      if (*(unsigned char *)(a2 + 96))
      {
        unint64_t v34 = sub_C3BD1C(v87, (void *)a2, v91, v33);
        unsigned int v36 = v35;
      }
      else
      {
        *(void *)(a2 + 32) = *(void *)(a2 + 24) + 16 * v91;
        unint64_t v34 = sub_A1F8B4(a2, v33, 1)
            ? (-1431655765 * ((*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2)) | 0xFFFFFFFF00000000
            : -1;
        unsigned int v36 = -1;
      }
      unint64_t v37 = *(void *)(a2 + 88);
      BOOL v38 = !HIDWORD(v37) || *(void *)(a2 + 88) == 0xFFFFFFFFLL;
      BOOL v39 = v38 || v34 == -1;
      if (v39 || v89 == -1) {
        goto LABEL_25;
      }
      unsigned int v41 = *(unsigned __int16 *)(v31 + 23);
      unsigned int v42 = v31[25];
      int v43 = v31[26];
      int v44 = *((_DWORD *)v31 + 3);
      if (*(unsigned char *)(a2 + 96))
      {
        unint64_t v45 = sub_C3C474(v87, (void *)a2, v91, v44);
        unsigned int v47 = v46;
        int v48 = v43;
        unint64_t v49 = *(void *)(a2 + 88);
        if (!HIDWORD(v49)) {
          goto LABEL_25;
        }
      }
      else
      {
        *(void *)(a2 + 32) = *(void *)(a2 + 24) + 16 * v91;
        if (sub_A2BC00(a2, v44, 1))
        {
          unint64_t v45 = (1 - 1431655765 * ((*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2)) | 0xFFFFFFFF00000000;
          int v48 = v43;
          unsigned int v47 = -1;
          unint64_t v49 = *(void *)(a2 + 88);
          if (!HIDWORD(v49)) {
            goto LABEL_25;
          }
        }
        else
        {
          unint64_t v45 = -1;
          int v48 = v43;
          unsigned int v47 = -1;
          unint64_t v49 = *(void *)(a2 + 88);
          if (!HIDWORD(v49)) {
            goto LABEL_25;
          }
        }
      }
      if (v49 == 0xFFFFFFFFLL || v45 == -1) {
        goto LABEL_25;
      }
      unsigned int v50 = *(unsigned __int16 *)(v31 + 23);
      unsigned int v51 = v31[25];
      int v52 = v31[26];
      BOOL v53 = v45 >= v34;
      if (v45 != v34) {
        goto LABEL_62;
      }
      if (HIDWORD(v45) != HIDWORD(v34))
      {
        if (HIDWORD(v45) != -1 && HIDWORD(v45) < HIDWORD(v34)) {
          goto LABEL_25;
        }
        goto LABEL_64;
      }
      if (v47 == v36) {
        goto LABEL_25;
      }
      if (HIDWORD(v34) != -1) {
        break;
      }
LABEL_64:
      int v54 = (__PAIR64__(v42, bswap32(v41)) >> 16) | (v48 << 24);
      uint64_t v56 = v86[1];
      unint64_t v55 = (unint64_t)v86[2];
      if ((unint64_t)v56 < v55)
      {
        *uint64_t v56 = v37;
        v56[1] = v34;
        *((_DWORD *)v56 + 4) = v36;
        *((_DWORD *)v56 + 5) = 1;
        uint64_t v57 = (char *)(v56 + 4);
        *((_DWORD *)v56 + 6) = v89;
        *((_DWORD *)v56 + 7) = v54;
        uint64_t v58 = v86;
        goto LABEL_85;
      }
      uint64_t v59 = *v86;
      uint64_t v60 = ((char *)v56 - (unsigned char *)*v86) >> 5;
      unint64_t v61 = v60 + 1;
      if ((unint64_t)(v60 + 1) >> 59) {
        goto LABEL_112;
      }
      uint64_t v62 = v55 - (void)v59;
      if (v62 >> 4 > v61) {
        unint64_t v61 = v62 >> 4;
      }
      if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v63 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v63 = v61;
      }
      unsigned int v84 = v31[25];
      unsigned int v85 = *(unsigned __int16 *)(v31 + 23);
      int v83 = v31[26];
      if (v63)
      {
        uint64_t v81 = ((char *)v56 - (unsigned char *)*v86) >> 5;
        int v82 = v54;
        if (v63 >> 59) {
          goto LABEL_113;
        }
        unint64_t v80 = v63;
        unint64_t v64 = (char *)operator new(32 * v63);
        unint64_t v63 = v80;
        uint64_t v60 = v81;
        int v54 = v82;
      }
      else
      {
        unint64_t v64 = 0;
      }
      uint8x8_t v65 = &v64[32 * v60];
      *(void *)uint8x8_t v65 = v37;
      *((void *)v65 + 1) = v34;
      *((_DWORD *)v65 + 4) = v36;
      *((_DWORD *)v65 + 5) = 1;
      *((_DWORD *)v65 + 6) = v89;
      *((_DWORD *)v65 + 7) = v54;
      unint64_t v66 = v65;
      if (v56 == v59)
      {
        uint64_t v58 = v86;
        uint64_t v57 = v65 + 32;
        *unint64_t v86 = v65;
        v86[1] = v65 + 32;
        v86[2] = &v64[32 * v63];
        if (!v56) {
          goto LABEL_84;
        }
      }
      else
      {
        uint64_t v58 = v86;
        do
        {
          long long v67 = *((_OWORD *)v56 - 1);
          *((_OWORD *)v66 - 2) = *((_OWORD *)v56 - 2);
          *((_OWORD *)v66 - 1) = v67;
          v66 -= 32;
          v56 -= 4;
        }
        while (v56 != v59);
        uint64_t v56 = *v86;
        uint64_t v57 = v65 + 32;
        *unint64_t v86 = v66;
        v86[1] = v65 + 32;
        v86[2] = &v64[32 * v63];
        if (!v56) {
          goto LABEL_84;
        }
      }
      operator delete(v56);
LABEL_84:
      unsigned int v51 = v84;
      unsigned int v50 = v85;
      int v52 = v83;
LABEL_85:
      int v68 = (__PAIR64__(v51, bswap32(v50)) >> 16) | (v52 << 24);
      v58[1] = v57;
      unint64_t v69 = (unint64_t)v58[2];
      if ((unint64_t)v57 < v69)
      {
        *(void *)uint64_t v57 = v49;
        *((void *)v57 + 1) = v45;
        *((_DWORD *)v57 + 4) = v47;
        *((_DWORD *)v57 + 5) = 0;
        int v32 = v57 + 32;
        *((_DWORD *)v57 + 6) = v89;
        *((_DWORD *)v57 + 7) = v68;
      }
      else
      {
        unsigned int v70 = (char *)*v58;
        uint64_t v71 = (v57 - (unsigned char *)*v58) >> 5;
        unint64_t v72 = v71 + 1;
        if ((unint64_t)(v71 + 1) >> 59) {
LABEL_112:
        }
          sub_2E00();
        uint64_t v73 = v69 - (void)v70;
        if (v73 >> 4 > v72) {
          unint64_t v72 = v73 >> 4;
        }
        if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v74 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v74 = v72;
        }
        if (v74)
        {
          if (v74 >> 59) {
LABEL_113:
          }
            sub_188D718();
          int v75 = (char *)operator new(32 * v74);
        }
        else
        {
          int v75 = 0;
        }
        long long v76 = &v75[32 * v71];
        *(void *)long long v76 = v49;
        *((void *)v76 + 1) = v45;
        *((_DWORD *)v76 + 4) = v47;
        *((_DWORD *)v76 + 5) = 0;
        unint64_t v77 = &v75[32 * v74];
        *((_DWORD *)v76 + 6) = v89;
        *((_DWORD *)v76 + 7) = v68;
        int v32 = v76 + 32;
        if (v57 == v70)
        {
          uint64_t v58 = v86;
          *unint64_t v86 = v76;
          v86[1] = v32;
          v86[2] = v77;
        }
        else
        {
          uint64_t v58 = v86;
          do
          {
            long long v78 = *((_OWORD *)v57 - 1);
            *((_OWORD *)v76 - 2) = *((_OWORD *)v57 - 2);
            *((_OWORD *)v76 - 1) = v78;
            v76 -= 32;
            v57 -= 32;
          }
          while (v57 != v70);
          uint64_t v57 = (char *)*v86;
          *unint64_t v86 = v76;
          v86[1] = v32;
          v86[2] = v77;
          if (!v57) {
            goto LABEL_24;
          }
        }
        operator delete(v57);
      }
LABEL_24:
      v58[1] = v32;
LABEL_25:
      v31 += 28;
      if (v31 == v88)
      {
        unint64_t v31 = v95;
        goto LABEL_106;
      }
    }
    BOOL v53 = v47 >= v36;
LABEL_62:
    if (!v53) {
      goto LABEL_25;
    }
    goto LABEL_64;
  }
LABEL_106:
  if (v31)
  {
    uint64_t v96 = v31;
    operator delete(v31);
  }
}

void sub_C2B958(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 112);
  if (v3)
  {
    *(void *)(v1 - 104) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_C2B980(unsigned int a1@<W0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v3 = a3;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a2 + 32) = v4;
  if (v4 < *(void *)(a2 + 40))
  {
    unsigned int v6 = a1;
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    unint64_t v9 = 0;
    unint64_t v10 = v4;
    unsigned int v35 = v3;
    while (1)
    {
      unsigned int v11 = *(unsigned __int8 *)(v10 + 14);
      if (v11 >= v6) {
        break;
      }
LABEL_23:
      v10 += 16;
      *(void *)(a2 + 32) = v10;
      if (*(unsigned char *)(*(void *)a2 + 16)) {
        BOOL v22 = *(unsigned char *)(a2 + 8) == 0;
      }
      else {
        BOOL v22 = 0;
      }
      BOOL v23 = v22 && v10 >= v4;
      if (v23 && v10 < *(void *)(a2 + 40))
      {
        do
        {
          unint64_t v24 = __ROR8__(*(void *)v10, 32);
          if (HIDWORD(v24) == 1 && (v24 + 3) < 2) {
            break;
          }
          char v26 = sub_2AB7E4(**(void **)(*(void *)a2 + 4120));
          unint64_t v4 = *(void *)(a2 + 24);
          unint64_t v10 = *(void *)(a2 + 32);
          if (v26) {
            break;
          }
          v10 += 16;
          *(void *)(a2 + 32) = v10;
        }
        while (v10 >= v4 && v10 < *(void *)(a2 + 40));
      }
      if (v10 < v4 || v10 >= *(void *)(a2 + 40)) {
        return;
      }
    }
    if (v11 > v6) {
      return;
    }
    unint64_t v12 = (v10 - v4) >> 4;
    if (v9 < v8)
    {
      *(_DWORD *)unint64_t v9 = v12;
      uint64_t v13 = (uint64_t)(v9 + 4);
LABEL_22:
      v3[1] = (char *)v13;
      unint64_t v4 = *(void *)(a2 + 24);
      unint64_t v9 = (char *)v13;
      goto LABEL_23;
    }
    uint64_t v14 = (v9 - v7) >> 2;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 62) {
      sub_2E00();
    }
    if ((v8 - v7) >> 1 > v15) {
      unint64_t v15 = (v8 - v7) >> 1;
    }
    if ((unint64_t)(v8 - v7) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16)
    {
      if (v16 >> 62) {
        sub_188D718();
      }
      unsigned int v17 = operator new(4 * v16);
      unint64_t v18 = &v17[4 * v14];
      *(_DWORD *)unint64_t v18 = v12;
      uint64_t v13 = (uint64_t)(v18 + 4);
      if (v9 != v7)
      {
LABEL_16:
        unint64_t v19 = v9 - 4 - v7;
        if (v19 < 0xBC
          || &v17[v9 - v7 - 4 - (v19 & 0xFFFFFFFFFFFFFFFCLL)] > &v17[v9 - v7 - 4]
          || &v9[-(v19 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v9 - 4
          || (unint64_t)(v7 - v17) < 0x20)
        {
          uint64_t v20 = v9;
          uint64_t v3 = v35;
        }
        else
        {
          uint64_t v28 = (v19 >> 2) + 1;
          uint64_t v29 = 4 * (v28 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v20 = &v9[-v29];
          v18 -= v29;
          unint64_t v30 = &v17[4 * v14 - 16];
          unint64_t v31 = v9 - 16;
          uint64_t v32 = v28 & 0x7FFFFFFFFFFFFFF8;
          uint64_t v3 = v35;
          do
          {
            long long v33 = *(_OWORD *)v31;
            *(v30 - 1) = *((_OWORD *)v31 - 1);
            *unint64_t v30 = v33;
            v30 -= 2;
            v31 -= 32;
            v32 -= 8;
          }
          while (v32);
          if (v28 == (v28 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_19:
            unint64_t v8 = &v17[4 * v16];
            *uint64_t v3 = v18;
            v3[1] = (char *)v13;
            v3[2] = v8;
            if (!v7)
            {
LABEL_21:
              unint64_t v7 = v18;
              unsigned int v6 = a1;
              goto LABEL_22;
            }
LABEL_20:
            operator delete(v7);
            unint64_t v10 = *(void *)(a2 + 32);
            goto LABEL_21;
          }
        }
        do
        {
          int v21 = *((_DWORD *)v20 - 1);
          v20 -= 4;
          *((_DWORD *)v18 - 1) = v21;
          v18 -= 4;
        }
        while (v20 != v7);
        goto LABEL_19;
      }
    }
    else
    {
      unsigned int v17 = 0;
      unint64_t v18 = (char *)(4 * v14);
      *(_DWORD *)(4 * v14) = v12;
      uint64_t v13 = 4 * v14 + 4;
      if (v9 != v7) {
        goto LABEL_16;
      }
    }
    uint64_t v3 = v35;
    unint64_t v8 = &v17[4 * v16];
    void *v35 = v18;
    v35[1] = (char *)v13;
    v35[2] = v8;
    if (!v7) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
}

void sub_C2BC44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int v11 = *(void **)a10;
  if (*(void *)a10)
  {
    *(void *)(a10 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_C2BC70(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = (uint64_t *)(a1 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)&long long v6 = *(void *)a1;
  *((void *)&v6 + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  memset(v5, 0, sizeof(v5));
  sub_9F5514(v3, &v6, 1, v5);
}

void sub_C2BD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_37D394(&a9);
  sub_14A84(v10 - 32);
  sub_14A84(v9);
  _Unwind_Resume(a1);
}

void *sub_C2BD98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = 0;
  unsigned __int8 v10 = 0;
  long long v11 = xmmword_20F0140;
  uint64_t v12 = 0;
  unsigned int v13 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v16 = 1;
  __int16 v17 = 256;
  uint64_t v18 = 0;
  int v3 = sub_C2C348((uint64_t)&v9, (void *)(a1 + 4216), 0);
  sub_C08F44((uint64_t)&v9, v3, 0, 0);
  int v4 = v10;
  uint64_t v5 = v12;
  long long v6 = v14;
  uint64_t v7 = v13;
  *(void *)a2 = v9;
  *(unsigned char *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v5;
  *(void *)(a2 + 32) = *((void *)&v6 + 1);
  *(void *)(a2 + 40) = v7;
  if (v4)
  {
    uint64_t v9 = 0;
    unsigned __int8 v10 = 0;
  }
  uint64_t v12 = 0;
  unsigned int v13 = 0;
  *(void *)&long long v15 = 0;
  long long v14 = 0uLL;
  return sub_C08E28(&v9);
}

void sub_C2BE74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_C08E28((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_C2BE88(uint64_t *a1, unsigned int *a2)
{
  int v3 = (unsigned int *)sub_2AB884(*a1, 9, *a2, 0);
  if (v4)
  {
    uint64_t v5 = (int *)((char *)v3 + *v3);
    long long v6 = (unsigned __int16 *)((char *)v5 - *v5);
    if (*v6 < 7u)
    {
LABEL_7:
      exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
      std::to_string(&v15, *a2);
      unsigned __int8 v10 = std::string::insert(&v15, 0, "Failed to acquire stop pattern quad data at quad id ");
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v16.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      uint64_t v12 = std::string::append(&v16, " in transit routing layer");
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      std::string::size_type v18 = v12->__r_.__value_.__r.__words[2];
      long long v17 = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      long long v14 = (void *)sub_2F404((uint64_t)exception, &v17);
    }
  }
  else
  {
    uint64_t v5 = 0;
    long long v6 = (_WORD *)(&loc_1120530 + 1);
    if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 7u) {
      goto LABEL_7;
    }
  }
  uint64_t v7 = v6[3];
  if (!v7) {
    goto LABEL_7;
  }
  return (char *)v5 + v7 + *(unsigned int *)((char *)v5 + v7);
}

void sub_C2BFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void sub_C2C034(void *a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)a2;
  uint64_t v5 = **(void **)a2;
  long long v6 = (int *)a1[549];
  uint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 >= 5u && (uint64_t v8 = v7[2]) != 0) {
    uint64_t v9 = (char *)v6 + v8 + *(unsigned int *)((char *)v6 + v8);
  }
  else {
    uint64_t v9 = 0;
  }
  unsigned __int8 v10 = &v9[4 * **(void **)a2 + 4 + *(unsigned int *)&v9[4 * **(void **)a2 + 4]];
  uint64_t v11 = *(int *)v10;
  uint64_t v12 = &v10[*(unsigned __int16 *)&v10[-v11 + 6]];
  int v13 = *(_DWORD *)&v12[*(unsigned int *)v12];
  long long v14 = &v10[*(unsigned __int16 *)&v10[-v11 + 8]];
  uint64_t v15 = *(unsigned int *)&v14[*(unsigned int *)v14];
  int v44 = 0;
  unint64_t v45 = 0;
  unsigned int v46 = 0;
  if (v15)
  {
    size_t v16 = 16 * v15;
    long long v17 = (char *)operator new(16 * v15);
    std::string::size_type v18 = &v17[v16];
    int v44 = v17;
    unsigned int v46 = &v17[v16];
    bzero(v17, v16);
    unint64_t v45 = v18;
    uint64_t v11 = *(int *)v10;
  }
  unint64_t v19 = &v10[-v11];
  if (*(unsigned __int16 *)v19 >= 0x13u
    && (uint64_t v20 = *((unsigned __int16 *)v19 + 9)) != 0
    && (*(_DWORD *)&v10[v20] & 1) != 0)
  {
    int v21 = 0;
    unint64_t v42 = 0;
    int v43 = 0;
  }
  else
  {
    unint64_t v42 = 0xFFFFFFFF00000000;
    int v21 = -1;
    int v43 = -1;
  }
  v41[0] = v13;
  v41[1] = v21;
  v41[2] = v21;
  std::string __p = 0;
  BOOL v39 = 0;
  uint64_t v40 = 0;
  sub_C2DAEC((uint64_t)a1, v5, &v42, (_DWORD *)v4 + 2, (uint64_t *)&v44, &__p);
  for (uint64_t i = *(void *)a2 + 40; ; i += 32)
  {
    uint64_t v29 = *(void *)(a2 + 8);
    if (i - 40 == v29) {
      break;
    }
    int v30 = *(unsigned __int8 *)(i - 12);
    unint64_t v31 = (char *)v44;
    uint64_t v32 = (int *)((char *)v44 + 16 * *(unsigned int *)(i - 16));
    int v33 = *v32;
    if (*(_DWORD *)(i - 20) == 1)
    {
      *uint64_t v32 = v33 + v30;
      unint64_t v34 = &v31[16 * *(unsigned int *)(i - 16)];
      *((_DWORD *)v34 + 1) += *(unsigned __int8 *)(i - 11);
      unsigned int v35 = &v31[16 * *(unsigned int *)(i - 16)];
      *((_DWORD *)v35 + 2) += *(unsigned __int8 *)(i - 10);
      uint64_t v25 = &v31[16 * *(unsigned int *)(i - 16)];
      int v26 = *((_DWORD *)v25 + 3) + *(unsigned __int8 *)(i - 9);
    }
    else
    {
      *uint64_t v32 = v33 - v30;
      BOOL v23 = &v31[16 * *(unsigned int *)(i - 16)];
      *((_DWORD *)v23 + 1) -= *(unsigned __int8 *)(i - 11);
      unint64_t v24 = &v31[16 * *(unsigned int *)(i - 16)];
      *((_DWORD *)v24 + 2) -= *(unsigned __int8 *)(i - 10);
      uint64_t v25 = &v31[16 * *(unsigned int *)(i - 16)];
      int v26 = *((_DWORD *)v25 + 3) - *(unsigned __int8 *)(i - 9);
    }
    *((_DWORD *)v25 + 3) = v26;
    unsigned int v27 = (_DWORD *)(i - 32);
    if (i - 8 == v29) {
      uint64_t v28 = v41;
    }
    else {
      uint64_t v28 = (_DWORD *)i;
    }
    sub_C2DAEC((uint64_t)a1, v5, v27, v28, (uint64_t *)&v44, &__p);
  }
  unint64_t v36 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * ((v39 - (unsigned char *)__p) >> 2));
  if (v39 == __p) {
    uint64_t v37 = 0;
  }
  else {
    uint64_t v37 = v36;
  }
  sub_C2FCA4((unsigned int *)__p, (unsigned int *)v39, (uint64_t)&v47, v37, 1);
  sub_C2DD84(a1, v5, (uint64_t)&__p);
  if (__p)
  {
    BOOL v39 = (char *)__p;
    operator delete(__p);
  }
  if (v44)
  {
    unint64_t v45 = v44;
    operator delete(v44);
  }
}

void sub_C2C304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    unint64_t v19 = a17;
    if (!a17) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v19 = a17;
    if (!a17) {
      goto LABEL_3;
    }
  }
  operator delete(v19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_C2C348(uint64_t a1, void *a2, uint64_t a3)
{
  v17[0] = a1;
  v17[1] = a2;
  v17[2] = a3;
  uint64_t v5 = a2[1] - *a2;
  if (v5)
  {
    int v6 = sub_C2C464(a1, v5 >> 3, (uint64_t)v17);
    uint64_t v7 = (const void *)a2[3];
    uint64_t v8 = a2[4] - (void)v7;
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    int v6 = 0;
    uint64_t v7 = (const void *)a2[3];
    uint64_t v8 = a2[4] - (void)v7;
    if (v8)
    {
LABEL_3:
      int v9 = sub_C2CF74(a1, v7, v8 >> 3);
      unsigned __int8 v10 = (const void *)a2[6];
      uint64_t v11 = a2[7] - (void)v10;
      if (v11) {
        goto LABEL_4;
      }
LABEL_8:
      int v12 = 0;
      int v13 = (const void *)a2[9];
      uint64_t v14 = a2[10] - (void)v13;
      if (v14) {
        goto LABEL_5;
      }
LABEL_9:
      int v15 = 0;
      return sub_C2C578(a1, v6, v9, v12, v15);
    }
  }
  int v9 = 0;
  unsigned __int8 v10 = (const void *)a2[6];
  uint64_t v11 = a2[7] - (void)v10;
  if (!v11) {
    goto LABEL_8;
  }
LABEL_4:
  int v12 = sub_C2D1CC(a1, v10, 0xAAAAAAAAAAAAAAABLL * (v11 >> 2));
  int v13 = (const void *)a2[9];
  uint64_t v14 = a2[10] - (void)v13;
  if (!v14) {
    goto LABEL_9;
  }
LABEL_5:
  int v15 = sub_C2D1CC(a1, v13, 0xAAAAAAAAAAAAAAABLL * (v14 >> 2));
  return sub_C2C578(a1, v6, v9, v12, v15);
}

uint64_t sub_C2C464(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2)
  {
    if (a2 >> 62) {
      sub_2E00();
    }
    uint64_t v6 = 4 * a2;
    uint64_t v7 = (char *)operator new(4 * a2);
    bzero(v7, 4 * a2);
    uint64_t v8 = 0;
    int v9 = &v7[v6];
    do
    {
      *(_DWORD *)&v7[4 * v8] = sub_C2C828(*(void *)a3, *(void *)(**(void **)(a3 + 8) + 8 * v8));
      ++v8;
    }
    while (a2 != v8);
  }
  else
  {
    uint64_t v7 = 0;
    int v9 = 0;
  }
  if (v9 == v7) {
    unsigned __int8 v10 = &unk_24F7350;
  }
  else {
    unsigned __int8 v10 = v7;
  }
  uint64_t v11 = sub_C2D890(a1, (uint64_t)v10, (v9 - v7) >> 2);
  if (v7) {
    operator delete(v7);
  }
  return v11;
}

void sub_C2C544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (v11) {
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_C2C578(uint64_t a1, int a2, int a3, int a4, int a5)
{
  *(unsigned char *)(a1 + 78) = 1;
  int v10 = *(_DWORD *)(a1 + 40);
  if (a5)
  {
    if (*(void *)(a1 + 80) <= 3uLL) {
      *(void *)(a1 + 80) = 4;
    }
    int v11 = v10;
    unint64_t v12 = -v10 & 3;
    if ((-v10 & 3) != 0)
    {
      uint64_t v13 = *(void *)(a1 + 56);
      int v14 = v10;
      if (v13 - *(void *)(a1 + 64) < v12)
      {
        sub_C089C8((uint64_t *)a1, v12);
        uint64_t v13 = *(void *)(a1 + 56);
        int v14 = *(_DWORD *)(a1 + 40);
      }
      uint64_t v15 = 0;
      *(void *)(a1 + 56) = v13 - v12;
      *(_DWORD *)(a1 + 40) = v14 + v12;
      do
        *(unsigned char *)(*(void *)(a1 + 56) + v15++) = 0;
      while (v12 != v15);
      int v11 = *(_DWORD *)(a1 + 40);
    }
    sub_C2D630(a1, 10, v11 - a5 + 4, 0);
  }
  if (a4)
  {
    if (*(void *)(a1 + 80) <= 3uLL) {
      *(void *)(a1 + 80) = 4;
    }
    int v16 = *(_DWORD *)(a1 + 40);
    unint64_t v17 = -v16 & 3;
    if ((-v16 & 3) != 0)
    {
      uint64_t v18 = *(void *)(a1 + 56);
      if (v18 - *(void *)(a1 + 64) < v17)
      {
        sub_C089C8((uint64_t *)a1, v17);
        uint64_t v18 = *(void *)(a1 + 56);
        int v16 = *(_DWORD *)(a1 + 40);
      }
      uint64_t v19 = 0;
      *(void *)(a1 + 56) = v18 - v17;
      *(_DWORD *)(a1 + 40) = v16 + v17;
      do
        *(unsigned char *)(*(void *)(a1 + 56) + v19++) = 0;
      while (v17 != v19);
      int v16 = *(_DWORD *)(a1 + 40);
    }
    sub_C2D630(a1, 8, v16 - a4 + 4, 0);
  }
  if (a3)
  {
    if (*(void *)(a1 + 80) <= 3uLL) {
      *(void *)(a1 + 80) = 4;
    }
    int v20 = *(_DWORD *)(a1 + 40);
    unint64_t v21 = -v20 & 3;
    if ((-v20 & 3) != 0)
    {
      uint64_t v22 = *(void *)(a1 + 56);
      if (v22 - *(void *)(a1 + 64) < v21)
      {
        sub_C089C8((uint64_t *)a1, v21);
        uint64_t v22 = *(void *)(a1 + 56);
        int v20 = *(_DWORD *)(a1 + 40);
      }
      uint64_t v23 = 0;
      *(void *)(a1 + 56) = v22 - v21;
      *(_DWORD *)(a1 + 40) = v20 + v21;
      do
        *(unsigned char *)(*(void *)(a1 + 56) + v23++) = 0;
      while (v21 != v23);
      int v20 = *(_DWORD *)(a1 + 40);
    }
    sub_C2D630(a1, 6, v20 - a3 + 4, 0);
  }
  if (a2)
  {
    if (*(void *)(a1 + 80) <= 3uLL) {
      *(void *)(a1 + 80) = 4;
    }
    int v24 = *(_DWORD *)(a1 + 40);
    unint64_t v25 = -v24 & 3;
    if ((-v24 & 3) != 0)
    {
      uint64_t v26 = *(void *)(a1 + 56);
      if (v26 - *(void *)(a1 + 64) < v25)
      {
        sub_C089C8((uint64_t *)a1, v25);
        uint64_t v26 = *(void *)(a1 + 56);
        int v24 = *(_DWORD *)(a1 + 40);
      }
      uint64_t v27 = 0;
      *(void *)(a1 + 56) = v26 - v25;
      *(_DWORD *)(a1 + 40) = v24 + v25;
      do
        *(unsigned char *)(*(void *)(a1 + 56) + v27++) = 0;
      while (v25 != v27);
      int v24 = *(_DWORD *)(a1 + 40);
    }
    sub_C2D630(a1, 4, v24 - a2 + 4, 0);
  }

  return sub_C08BC0(a1, v10);
}

uint64_t sub_C2C828(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const void **)a2;
  uint64_t v6 = *(void *)(a2 + 8) - (void)v4;
  if (v6)
  {
    int v25 = sub_C2CF74(a1, v4, v6 >> 3);
    uint64_t v7 = *(const void **)(a2 + 24);
    uint64_t v8 = *(void *)(a2 + 32) - (void)v7;
    if (v8) {
      goto LABEL_3;
    }
LABEL_6:
    int v9 = 0;
    int v10 = *(const void **)(a2 + 48);
    uint64_t v11 = *(void *)(a2 + 56) - (void)v10;
    if (v11) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  int v25 = 0;
  uint64_t v7 = *(const void **)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32) - (void)v7;
  if (!v8) {
    goto LABEL_6;
  }
LABEL_3:
  int v9 = sub_C2D1CC(a1, v7, 0xAAAAAAAAAAAAAAABLL * (v8 >> 2));
  int v10 = *(const void **)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56) - (void)v10;
  if (v11)
  {
LABEL_4:
    int v12 = sub_C2D304(a1, v10, v11 >> 4);
    goto LABEL_8;
  }
LABEL_7:
  int v12 = 0;
LABEL_8:
  int v13 = *(unsigned __int8 *)(a2 + 72);
  int v14 = *(unsigned __int8 *)(a2 + 73);
  int v15 = *(unsigned __int16 *)(a2 + 74);
  int v16 = *(_DWORD *)(a2 + 76);
  int v17 = *(_DWORD *)(a2 + 80);
  uint64_t v18 = *(const void **)(a2 + 88);
  uint64_t v19 = *(void *)(a2 + 96) - (void)v18;
  if (!v19)
  {
    uint64_t v20 = 0;
    unint64_t v21 = *(const void **)(a2 + 112);
    uint64_t v22 = *(void *)(a2 + 120) - (void)v21;
    if (!v22) {
      return sub_C2C990(a1, v25, v9, v12, v13, v14, v15, v16, v17, v24, v20, SHIDWORD(v20), v22, SHIDWORD(v22), *(unsigned char *)(a2 + 136));
    }
    goto LABEL_10;
  }
  uint64_t v20 = sub_C2D438(a1, v18, v19 >> 2);
  unint64_t v21 = *(const void **)(a2 + 112);
  uint64_t v22 = *(void *)(a2 + 120) - (void)v21;
  if (v22) {
LABEL_10:
  }
    uint64_t v22 = sub_C2D438(a1, v21, v22 >> 2);
  return sub_C2C990(a1, v25, v9, v12, v13, v14, v15, v16, v17, v24, v20, SHIDWORD(v20), v22, SHIDWORD(v22), *(unsigned char *)(a2 + 136));
}

uint64_t sub_C2C990(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, char a15)
{
  *(unsigned char *)(a1 + 78) = 1;
  int v54 = *(_DWORD *)(a1 + 40);
  if (a13)
  {
    if (*(void *)(a1 + 80) <= 3uLL) {
      *(void *)(a1 + 80) = 4;
    }
    int v20 = v54;
    unint64_t v21 = -v54 & 3;
    if ((-v54 & 3) != 0)
    {
      uint64_t v22 = *(void *)(a1 + 56);
      int v23 = v54;
      if (v22 - *(void *)(a1 + 64) < v21)
      {
        sub_C089C8((uint64_t *)a1, v21);
        uint64_t v22 = *(void *)(a1 + 56);
        int v23 = *(_DWORD *)(a1 + 40);
      }
      uint64_t v24 = 0;
      *(void *)(a1 + 56) = v22 - v21;
      *(_DWORD *)(a1 + 40) = v23 + v21;
      do
        *(unsigned char *)(*(void *)(a1 + 56) + v24++) = 0;
      while (v21 != v24);
      int v20 = *(_DWORD *)(a1 + 40);
    }
    sub_C2D630(a1, 22, v20 - a13 + 4, 0);
  }
  if (a11)
  {
    if (*(void *)(a1 + 80) <= 3uLL) {
      *(void *)(a1 + 80) = 4;
    }
    int v25 = *(_DWORD *)(a1 + 40);
    unint64_t v26 = -v25 & 3;
    if ((-v25 & 3) != 0)
    {
      uint64_t v27 = *(void *)(a1 + 56);
      if (v27 - *(void *)(a1 + 64) < v26)
      {
        sub_C089C8((uint64_t *)a1, v26);
        uint64_t v27 = *(void *)(a1 + 56);
        int v25 = *(_DWORD *)(a1 + 40);
      }
      uint64_t v28 = 0;
      *(void *)(a1 + 56) = v27 - v26;
      *(_DWORD *)(a1 + 40) = v25 + v26;
      do
        *(unsigned char *)(*(void *)(a1 + 56) + v28++) = 0;
      while (v26 != v28);
      int v25 = *(_DWORD *)(a1 + 40);
    }
    sub_C2D630(a1, 20, v25 - a11 + 4, 0);
  }
  sub_C2D630(a1, 18, a9, 0);
  sub_C2D630(a1, 16, a8, 0);
  if (a4)
  {
    if (*(void *)(a1 + 80) <= 3uLL) {
      *(void *)(a1 + 80) = 4;
    }
    int v29 = *(_DWORD *)(a1 + 40);
    unint64_t v30 = -v29 & 3;
    if ((-v29 & 3) != 0)
    {
      uint64_t v31 = *(void *)(a1 + 56);
      if (v31 - *(void *)(a1 + 64) < v30)
      {
        sub_C089C8((uint64_t *)a1, v30);
        uint64_t v31 = *(void *)(a1 + 56);
        int v29 = *(_DWORD *)(a1 + 40);
      }
      uint64_t v32 = 0;
      *(void *)(a1 + 56) = v31 - v30;
      *(_DWORD *)(a1 + 40) = v29 + v30;
      do
        *(unsigned char *)(*(void *)(a1 + 56) + v32++) = 0;
      while (v30 != v32);
      int v29 = *(_DWORD *)(a1 + 40);
    }
    sub_C2D630(a1, 8, v29 - a4 + 4, 0);
  }
  if (a3)
  {
    if (*(void *)(a1 + 80) <= 3uLL) {
      *(void *)(a1 + 80) = 4;
    }
    int v33 = *(_DWORD *)(a1 + 40);
    unint64_t v34 = -v33 & 3;
    if ((-v33 & 3) != 0)
    {
      uint64_t v35 = *(void *)(a1 + 56);
      if (v35 - *(void *)(a1 + 64) < v34)
      {
        sub_C089C8((uint64_t *)a1, v34);
        uint64_t v35 = *(void *)(a1 + 56);
        int v33 = *(_DWORD *)(a1 + 40);
      }
      uint64_t v36 = 0;
      *(void *)(a1 + 56) = v35 - v34;
      *(_DWORD *)(a1 + 40) = v33 + v34;
      do
        *(unsigned char *)(*(void *)(a1 + 56) + v36++) = 0;
      while (v34 != v36);
      int v33 = *(_DWORD *)(a1 + 40);
    }
    sub_C2D630(a1, 6, v33 - a3 + 4, 0);
  }
  if (a2)
  {
    if (*(void *)(a1 + 80) <= 3uLL) {
      *(void *)(a1 + 80) = 4;
    }
    int v37 = *(_DWORD *)(a1 + 40);
    unint64_t v38 = -v37 & 3;
    if ((-v37 & 3) != 0)
    {
      uint64_t v39 = *(void *)(a1 + 56);
      if (v39 - *(void *)(a1 + 64) < v38)
      {
        sub_C089C8((uint64_t *)a1, v38);
        uint64_t v39 = *(void *)(a1 + 56);
        int v37 = *(_DWORD *)(a1 + 40);
      }
      uint64_t v40 = 0;
      *(void *)(a1 + 56) = v39 - v38;
      *(_DWORD *)(a1 + 40) = v37 + v38;
      do
        *(unsigned char *)(*(void *)(a1 + 56) + v40++) = 0;
      while (v38 != v40);
      int v37 = *(_DWORD *)(a1 + 40);
    }
    sub_C2D630(a1, 4, v37 - a2 + 4, 0);
  }
  sub_C2D764(a1, 14, a7, 0x7FFF);
  if (a15 != 2 || *(unsigned char *)(a1 + 88))
  {
    if (*(void *)(a1 + 80))
    {
      uint64_t v41 = *(void *)(a1 + 56);
      if (v41 != *(void *)(a1 + 64))
      {
LABEL_55:
        *(void *)(a1 + 56) = v41 - 1;
        ++*(_DWORD *)(a1 + 40);
        *(unsigned char *)(v41 - 1) = a15;
        uint64_t v42 = *(unsigned int *)(a1 + 40);
        int v43 = *(uint64_t **)(a1 + 64);
        if (*(void *)(a1 + 56) - (void)v43 <= 7uLL)
        {
          sub_C089C8((uint64_t *)a1, 8uLL);
          int v43 = *(uint64_t **)(a1 + 64);
        }
        uint64_t *v43 = v42 | 0x1800000000;
        *(void *)(a1 + 64) += 8;
        ++*(_DWORD *)(a1 + 72);
        if (*(unsigned __int16 *)(a1 + 76) <= 0x17u) {
          *(_WORD *)(a1 + 76) = 24;
        }
        goto LABEL_59;
      }
    }
    else
    {
      *(void *)(a1 + 80) = 1;
      uint64_t v41 = *(void *)(a1 + 56);
      if (v41 != *(void *)(a1 + 64)) {
        goto LABEL_55;
      }
    }
    sub_C089C8((uint64_t *)a1, 1uLL);
    uint64_t v41 = *(void *)(a1 + 56);
    goto LABEL_55;
  }
LABEL_59:
  if (a6 == 1 && !*(unsigned char *)(a1 + 88)) {
    goto LABEL_67;
  }
  if (!*(void *)(a1 + 80))
  {
    *(void *)(a1 + 80) = 1;
    uint64_t v44 = *(void *)(a1 + 56);
    if (v44 != *(void *)(a1 + 64)) {
      goto LABEL_63;
    }
LABEL_80:
    sub_C089C8((uint64_t *)a1, 1uLL);
    uint64_t v44 = *(void *)(a1 + 56);
    goto LABEL_63;
  }
  uint64_t v44 = *(void *)(a1 + 56);
  if (v44 == *(void *)(a1 + 64)) {
    goto LABEL_80;
  }
LABEL_63:
  *(void *)(a1 + 56) = v44 - 1;
  ++*(_DWORD *)(a1 + 40);
  *(unsigned char *)(v44 - 1) = a6;
  uint64_t v45 = *(unsigned int *)(a1 + 40);
  unsigned int v46 = *(uint64_t **)(a1 + 64);
  if (*(void *)(a1 + 56) - (void)v46 <= 7uLL)
  {
    sub_C089C8((uint64_t *)a1, 8uLL);
    unsigned int v46 = *(uint64_t **)(a1 + 64);
  }
  *unsigned int v46 = v45 | 0xC00000000;
  *(void *)(a1 + 64) += 8;
  ++*(_DWORD *)(a1 + 72);
  if (*(unsigned __int16 *)(a1 + 76) <= 0xBu) {
    *(_WORD *)(a1 + 76) = 12;
  }
LABEL_67:
  if (!(a5 | *(unsigned __int8 *)(a1 + 88))) {
    goto LABEL_74;
  }
  if (!*(void *)(a1 + 80))
  {
    *(void *)(a1 + 80) = 1;
    uint64_t v47 = *(void *)(a1 + 56);
    if (v47 != *(void *)(a1 + 64)) {
      goto LABEL_70;
    }
LABEL_82:
    sub_C089C8((uint64_t *)a1, 1uLL);
    uint64_t v47 = *(void *)(a1 + 56);
    goto LABEL_70;
  }
  uint64_t v47 = *(void *)(a1 + 56);
  if (v47 == *(void *)(a1 + 64)) {
    goto LABEL_82;
  }
LABEL_70:
  *(void *)(a1 + 56) = v47 - 1;
  ++*(_DWORD *)(a1 + 40);
  *(unsigned char *)(v47 - 1) = a5;
  uint64_t v48 = *(unsigned int *)(a1 + 40);
  unint64_t v49 = *(uint64_t **)(a1 + 64);
  if (*(void *)(a1 + 56) - (void)v49 <= 7uLL)
  {
    sub_C089C8((uint64_t *)a1, 8uLL);
    unint64_t v49 = *(uint64_t **)(a1 + 64);
  }
  uint64_t *v49 = v48 | 0xA00000000;
  *(void *)(a1 + 64) += 8;
  ++*(_DWORD *)(a1 + 72);
  if (*(unsigned __int16 *)(a1 + 76) <= 9u) {
    *(_WORD *)(a1 + 76) = 10;
  }
LABEL_74:

  return sub_C08BC0(a1, v54);
}

uint64_t sub_C2CF74(uint64_t a1, const void *a2, uint64_t a3)
{
  sub_C2D0A8(a1, 2 * (a3 & 0x1FFFFFFFFFFFFFFFLL), 4uLL);
  if (a3)
  {
    unint64_t v6 = 8 * a3;
    if (8 * a3)
    {
      uint64_t v7 = *(void *)(a1 + 56);
      if (v7 - *(void *)(a1 + 64) < v6)
      {
        sub_C089C8((uint64_t *)a1, 8 * a3);
        uint64_t v7 = *(void *)(a1 + 56);
      }
      *(void *)(a1 + 56) = v7 - v6;
      *(_DWORD *)(a1 + 40) += v6;
      memcpy((void *)(v7 - v6), a2, 8 * a3);
    }
  }
  *(unsigned char *)(a1 + 78) = 0;
  if (*(void *)(a1 + 80) <= 3uLL) {
    *(void *)(a1 + 80) = 4;
  }
  int v8 = *(_DWORD *)(a1 + 40);
  unint64_t v9 = -v8 & 3;
  if ((-v8 & 3) != 0)
  {
    uint64_t v10 = *(void *)(a1 + 56);
    if (v10 - *(void *)(a1 + 64) < v9)
    {
      sub_C089C8((uint64_t *)a1, v9);
      uint64_t v10 = *(void *)(a1 + 56);
      int v8 = *(_DWORD *)(a1 + 40);
    }
    uint64_t v11 = 0;
    *(void *)(a1 + 56) = v10 - v9;
    *(_DWORD *)(a1 + 40) = v8 + v9;
    do
      *(unsigned char *)(*(void *)(a1 + 56) + v11++) = 0;
    while (v9 != v11);
  }
  uint64_t v12 = *(void *)(a1 + 56);
  if ((unint64_t)(v12 - *(void *)(a1 + 64)) <= 3)
  {
    sub_C089C8((uint64_t *)a1, 4uLL);
    uint64_t v12 = *(void *)(a1 + 56);
  }
  *(_DWORD *)(a1 + 40) += 4;
  *(_DWORD *)(v12 - 4) = a3;
  *(void *)(a1 + 56) = v12 - 4;
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_C2D0A8(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(unsigned char *)(result + 78) = 1;
  unint64_t v3 = a3 * a2;
  if (a3 * a2)
  {
    uint64_t v5 = result;
    unint64_t v6 = *(void *)(result + 80);
    if (v6 <= 3)
    {
      unint64_t v6 = 4;
      *(void *)(result + 80) = 4;
    }
    int v7 = *(_DWORD *)(result + 40);
    unint64_t v8 = (-v7 - (int)v3) & 3;
    if (v8)
    {
      uint64_t v9 = *(void *)(result + 56);
      if (v9 - *(void *)(result + 64) < v8)
      {
        BOOL result = sub_C089C8((uint64_t *)result, (-v7 - (int)v3) & 3);
        uint64_t v9 = *(void *)(v5 + 56);
        int v7 = *(_DWORD *)(v5 + 40);
      }
      uint64_t v10 = 0;
      *(void *)(v5 + 56) = v9 - v8;
      *(_DWORD *)(v5 + 40) = v7 + v8;
      do
        *(unsigned char *)(*(void *)(v5 + 56) + v10++) = 0;
      while (v8 != v10);
      unint64_t v6 = *(void *)(v5 + 80);
    }
    if (v6 < a3) {
      *(void *)(v5 + 80) = a3;
    }
    uint64_t v11 = *(unsigned int *)(v5 + 40);
    unint64_t v12 = (a3 - 1) & -(uint64_t)(v3 + v11);
    if (v12)
    {
      uint64_t v13 = *(void *)(v5 + 56);
      if (v13 - *(void *)(v5 + 64) < v12)
      {
        BOOL result = sub_C089C8((uint64_t *)v5, v12);
        uint64_t v13 = *(void *)(v5 + 56);
        LODWORD(v11) = *(_DWORD *)(v5 + 40);
      }
      uint64_t v14 = 0;
      *(void *)(v5 + 56) = v13 - v12;
      *(_DWORD *)(v5 + 40) = v11 + v12;
      do
        *(unsigned char *)(*(void *)(v5 + 56) + v14++) = 0;
      while (v12 != v14);
    }
  }
  return result;
}

uint64_t sub_C2D1CC(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = 3 * a3;
  sub_C2D0A8(a1, (3 * a3) & 0x3FFFFFFFFFFFFFFFLL, 4uLL);
  if (a3)
  {
    unint64_t v7 = 4 * v6;
    if (v7)
    {
      uint64_t v8 = *(void *)(a1 + 56);
      if (v8 - *(void *)(a1 + 64) < v7)
      {
        sub_C089C8((uint64_t *)a1, v7);
        uint64_t v8 = *(void *)(a1 + 56);
      }
      *(void *)(a1 + 56) = v8 - v7;
      *(_DWORD *)(a1 + 40) += v7;
      memcpy((void *)(v8 - v7), a2, v7);
    }
  }
  *(unsigned char *)(a1 + 78) = 0;
  if (*(void *)(a1 + 80) <= 3uLL) {
    *(void *)(a1 + 80) = 4;
  }
  int v9 = *(_DWORD *)(a1 + 40);
  unint64_t v10 = -v9 & 3;
  if ((-v9 & 3) != 0)
  {
    uint64_t v11 = *(void *)(a1 + 56);
    if (v11 - *(void *)(a1 + 64) < v10)
    {
      sub_C089C8((uint64_t *)a1, v10);
      uint64_t v11 = *(void *)(a1 + 56);
      int v9 = *(_DWORD *)(a1 + 40);
    }
    uint64_t v12 = 0;
    *(void *)(a1 + 56) = v11 - v10;
    *(_DWORD *)(a1 + 40) = v9 + v10;
    do
      *(unsigned char *)(*(void *)(a1 + 56) + v12++) = 0;
    while (v10 != v12);
  }
  uint64_t v13 = *(void *)(a1 + 56);
  if ((unint64_t)(v13 - *(void *)(a1 + 64)) <= 3)
  {
    sub_C089C8((uint64_t *)a1, 4uLL);
    uint64_t v13 = *(void *)(a1 + 56);
  }
  *(_DWORD *)(a1 + 40) += 4;
  *(_DWORD *)(v13 - 4) = a3;
  *(void *)(a1 + 56) = v13 - 4;
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_C2D304(uint64_t a1, const void *a2, uint64_t a3)
{
  sub_C2D0A8(a1, 4 * (a3 & 0xFFFFFFFFFFFFFFFLL), 4uLL);
  if (a3)
  {
    unint64_t v6 = 16 * a3;
    if (16 * a3)
    {
      uint64_t v7 = *(void *)(a1 + 56);
      if (v7 - *(void *)(a1 + 64) < v6)
      {
        sub_C089C8((uint64_t *)a1, 16 * a3);
        uint64_t v7 = *(void *)(a1 + 56);
      }
      *(void *)(a1 + 56) = v7 - v6;
      *(_DWORD *)(a1 + 40) += v6;
      memcpy((void *)(v7 - v6), a2, 16 * a3);
    }
  }
  *(unsigned char *)(a1 + 78) = 0;
  if (*(void *)(a1 + 80) <= 3uLL) {
    *(void *)(a1 + 80) = 4;
  }
  int v8 = *(_DWORD *)(a1 + 40);
  unint64_t v9 = -v8 & 3;
  if ((-v8 & 3) != 0)
  {
    uint64_t v10 = *(void *)(a1 + 56);
    if (v10 - *(void *)(a1 + 64) < v9)
    {
      sub_C089C8((uint64_t *)a1, v9);
      uint64_t v10 = *(void *)(a1 + 56);
      int v8 = *(_DWORD *)(a1 + 40);
    }
    uint64_t v11 = 0;
    *(void *)(a1 + 56) = v10 - v9;
    *(_DWORD *)(a1 + 40) = v8 + v9;
    do
      *(unsigned char *)(*(void *)(a1 + 56) + v11++) = 0;
    while (v9 != v11);
  }
  uint64_t v12 = *(void *)(a1 + 56);
  if ((unint64_t)(v12 - *(void *)(a1 + 64)) <= 3)
  {
    sub_C089C8((uint64_t *)a1, 4uLL);
    uint64_t v12 = *(void *)(a1 + 56);
  }
  *(_DWORD *)(a1 + 40) += 4;
  *(_DWORD *)(v12 - 4) = a3;
  *(void *)(a1 + 56) = v12 - 4;
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_C2D438(uint64_t a1, const void *a2, uint64_t a3)
{
  sub_C2D0A8(a1, a3, 4uLL);
  if (a3)
  {
    unint64_t v6 = 4 * a3;
    if (4 * a3)
    {
      uint64_t v7 = *(void *)(a1 + 56);
      if (v7 - *(void *)(a1 + 64) < v6)
      {
        sub_C089C8((uint64_t *)a1, 4 * a3);
        uint64_t v7 = *(void *)(a1 + 56);
      }
      *(void *)(a1 + 56) = v7 - v6;
      *(_DWORD *)(a1 + 40) += v6;
      memcpy((void *)(v7 - v6), a2, 4 * a3);
    }
    *(unsigned char *)(a1 + 78) = 0;
    if (*(void *)(a1 + 80) <= 3uLL) {
      *(void *)(a1 + 80) = 4;
    }
    int v8 = *(_DWORD *)(a1 + 40);
    unint64_t v9 = -v8 & 3;
    if ((-v8 & 3) != 0)
    {
      uint64_t v10 = *(void *)(a1 + 56);
      if (v10 - *(void *)(a1 + 64) < v9)
      {
        sub_C089C8((uint64_t *)a1, v9);
        uint64_t v10 = *(void *)(a1 + 56);
        int v8 = *(_DWORD *)(a1 + 40);
      }
      uint64_t v11 = 0;
      *(void *)(a1 + 56) = v10 - v9;
      *(_DWORD *)(a1 + 40) = v8 + v9;
      do
        *(unsigned char *)(*(void *)(a1 + 56) + v11++) = 0;
      while (v9 != v11);
    }
    uint64_t v12 = *(void *)(a1 + 56);
    if ((unint64_t)(v12 - *(void *)(a1 + 64)) <= 3)
    {
      sub_C089C8((uint64_t *)a1, 4uLL);
      uint64_t v12 = *(void *)(a1 + 56);
    }
    *(_DWORD *)(a1 + 40) += 4;
    *(_DWORD *)(v12 - 4) = a3;
    *(void *)(a1 + 56) = v12 - 4;
    return *(unsigned int *)(a1 + 40);
  }
  else
  {
    *(unsigned char *)(a1 + 78) = 0;
    if (*(void *)(a1 + 80) <= 3uLL) {
      *(void *)(a1 + 80) = 4;
    }
    int v14 = *(_DWORD *)(a1 + 40);
    unint64_t v15 = -v14 & 3;
    if ((-v14 & 3) != 0)
    {
      uint64_t v16 = *(void *)(a1 + 56);
      if (v16 - *(void *)(a1 + 64) < v15)
      {
        sub_C089C8((uint64_t *)a1, v15);
        uint64_t v16 = *(void *)(a1 + 56);
        int v14 = *(_DWORD *)(a1 + 40);
      }
      uint64_t v17 = 0;
      *(void *)(a1 + 56) = v16 - v15;
      *(_DWORD *)(a1 + 40) = v14 + v15;
      do
        *(unsigned char *)(*(void *)(a1 + 56) + v17++) = 0;
      while (v15 != v17);
    }
    uint64_t v18 = *(void *)(a1 + 56);
    if ((unint64_t)(v18 - *(void *)(a1 + 64)) <= 3)
    {
      sub_C089C8((uint64_t *)a1, 4uLL);
      uint64_t v18 = *(void *)(a1 + 56);
    }
    *(_DWORD *)(a1 + 40) += 4;
    *(_DWORD *)(v18 - 4) = 0;
    *(void *)(a1 + 56) = v18 - 4;
    return *(unsigned int *)(a1 + 40);
  }
}

uint64_t sub_C2D630(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v6 = result;
  if (a3 != a4 || *(unsigned char *)(result + 88))
  {
    if (*(void *)(result + 80) <= 3uLL) {
      *(void *)(result + 80) = 4;
    }
    int v7 = *(_DWORD *)(result + 40);
    unint64_t v8 = -v7 & 3;
    if ((-v7 & 3) != 0)
    {
      uint64_t v9 = *(void *)(result + 56);
      if (v9 - *(void *)(result + 64) < v8)
      {
        BOOL result = sub_C089C8((uint64_t *)result, v8);
        uint64_t v9 = *(void *)(v6 + 56);
        int v7 = *(_DWORD *)(v6 + 40);
      }
      uint64_t v10 = 0;
      *(void *)(v6 + 56) = v9 - v8;
      *(_DWORD *)(v6 + 40) = v7 + v8;
      do
        *(unsigned char *)(*(void *)(v6 + 56) + v10++) = 0;
      while (v8 != v10);
    }
    uint64_t v12 = *(void *)(v6 + 56);
    uint64_t v11 = *(uint64_t **)(v6 + 64);
    if ((unint64_t)(v12 - (void)v11) <= 3)
    {
      BOOL result = sub_C089C8((uint64_t *)v6, 4uLL);
      uint64_t v12 = *(void *)(v6 + 56);
      uint64_t v11 = *(uint64_t **)(v6 + 64);
    }
    *(_DWORD *)(v6 + 40) += 4;
    *(_DWORD *)(v12 - 4) = a3;
    uint64_t v13 = v12 - 4;
    *(void *)(v6 + 56) = v13;
    uint64_t v14 = *(unsigned int *)(v6 + 40);
    if ((unint64_t)(v13 - (void)v11) <= 7)
    {
      BOOL result = sub_C089C8((uint64_t *)v6, 8uLL);
      uint64_t v11 = *(uint64_t **)(v6 + 64);
    }
    *uint64_t v11 = v14 | (a2 << 32);
    *(void *)(v6 + 64) += 8;
    ++*(_DWORD *)(v6 + 72);
    if (*(unsigned __int16 *)(v6 + 76) < a2) {
      *(_WORD *)(v6 + 76) = a2;
    }
  }
  return result;
}

uint64_t sub_C2D764(uint64_t result, uint64_t a2, int a3, int a4)
{
  __int16 v4 = a3;
  uint64_t v6 = result;
  if (a3 != a4 || *(unsigned char *)(result + 88))
  {
    if (*(void *)(result + 80) <= 1uLL) {
      *(void *)(result + 80) = 2;
    }
    int v7 = *(_DWORD *)(result + 40);
    unint64_t v8 = v7 & 1;
    if (v7)
    {
      uint64_t v9 = *(void *)(result + 56);
      if (v9 - *(void *)(result + 64) < v8)
      {
        BOOL result = sub_C089C8((uint64_t *)result, v7 & 1);
        uint64_t v9 = *(void *)(v6 + 56);
        int v7 = *(_DWORD *)(v6 + 40);
      }
      uint64_t v10 = 0;
      *(void *)(v6 + 56) = v9 - v8;
      *(_DWORD *)(v6 + 40) = v7 + v8;
      do
        *(unsigned char *)(*(void *)(v6 + 56) + v10++) = 0;
      while (v8 != v10);
    }
    uint64_t v12 = *(void *)(v6 + 56);
    uint64_t v11 = *(uint64_t **)(v6 + 64);
    if ((unint64_t)(v12 - (void)v11) <= 1)
    {
      BOOL result = sub_C089C8((uint64_t *)v6, 2uLL);
      uint64_t v12 = *(void *)(v6 + 56);
      uint64_t v11 = *(uint64_t **)(v6 + 64);
    }
    *(_WORD *)(v12 - 2) = v4;
    uint64_t v13 = v12 - 2;
    *(void *)(v6 + 56) = v13;
    uint64_t v14 = (*(_DWORD *)(v6 + 40) + 2);
    *(_DWORD *)(v6 + 40) = v14;
    if ((unint64_t)(v13 - (void)v11) <= 7)
    {
      BOOL result = sub_C089C8((uint64_t *)v6, 8uLL);
      uint64_t v11 = *(uint64_t **)(v6 + 64);
    }
    *uint64_t v11 = v14 | (a2 << 32);
    *(void *)(v6 + 64) += 8;
    ++*(_DWORD *)(v6 + 72);
    if (*(unsigned __int16 *)(v6 + 76) < a2) {
      *(_WORD *)(v6 + 76) = a2;
    }
  }
  return result;
}

uint64_t sub_C2D890(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_C2D0A8(a1, a3, 4uLL);
  if (a3)
  {
    uint64_t v6 = a2 - 4;
    uint64_t v7 = a3;
    do
    {
      uint64_t v8 = v7 - 1;
      sub_C2D99C(a1, *(_DWORD *)(v6 + 4 * v7));
      uint64_t v7 = v8;
    }
    while (v8);
  }
  *(unsigned char *)(a1 + 78) = 0;
  if (*(void *)(a1 + 80) <= 3uLL) {
    *(void *)(a1 + 80) = 4;
  }
  int v9 = *(_DWORD *)(a1 + 40);
  unint64_t v10 = -v9 & 3;
  if ((-v9 & 3) != 0)
  {
    uint64_t v11 = *(void *)(a1 + 56);
    if (v11 - *(void *)(a1 + 64) < v10)
    {
      sub_C089C8((uint64_t *)a1, v10);
      uint64_t v11 = *(void *)(a1 + 56);
      int v9 = *(_DWORD *)(a1 + 40);
    }
    uint64_t v12 = 0;
    *(void *)(a1 + 56) = v11 - v10;
    *(_DWORD *)(a1 + 40) = v9 + v10;
    do
      *(unsigned char *)(*(void *)(a1 + 56) + v12++) = 0;
    while (v10 != v12);
  }
  uint64_t v13 = *(void *)(a1 + 56);
  if ((unint64_t)(v13 - *(void *)(a1 + 64)) <= 3)
  {
    sub_C089C8((uint64_t *)a1, 4uLL);
    uint64_t v13 = *(void *)(a1 + 56);
  }
  *(_DWORD *)(a1 + 40) += 4;
  *(_DWORD *)(v13 - 4) = a3;
  *(void *)(a1 + 56) = v13 - 4;
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_C2D99C(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 80) <= 3uLL) {
    *(void *)(a1 + 80) = 4;
  }
  int v4 = *(_DWORD *)(a1 + 40);
  unint64_t v5 = -v4 & 3;
  if ((-v4 & 3) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 56);
    if (v6 - *(void *)(a1 + 64) < v5)
    {
      sub_C089C8((uint64_t *)a1, v5);
      uint64_t v6 = *(void *)(a1 + 56);
      int v4 = *(_DWORD *)(a1 + 40);
    }
    uint64_t v7 = 0;
    *(void *)(a1 + 56) = v6 - v5;
    *(_DWORD *)(a1 + 40) = v4 + v5;
    do
      *(unsigned char *)(*(void *)(a1 + 56) + v7++) = 0;
    while (v5 != v7);
    int v4 = *(_DWORD *)(a1 + 40);
    if (*(void *)(a1 + 80) <= 3uLL) {
      *(void *)(a1 + 80) = 4;
    }
  }
  unint64_t v8 = -v4 & 3;
  if ((-v4 & 3) != 0)
  {
    uint64_t v9 = *(void *)(a1 + 56);
    int v10 = v4;
    if (v9 - *(void *)(a1 + 64) < v8)
    {
      sub_C089C8((uint64_t *)a1, v8);
      uint64_t v9 = *(void *)(a1 + 56);
      int v10 = *(_DWORD *)(a1 + 40);
    }
    uint64_t v11 = 0;
    *(void *)(a1 + 56) = v9 - v8;
    *(_DWORD *)(a1 + 40) = v10 + v8;
    do
      *(unsigned char *)(*(void *)(a1 + 56) + v11++) = 0;
    while (v8 != v11);
  }
  uint64_t v12 = *(void *)(a1 + 56);
  if ((unint64_t)(v12 - *(void *)(a1 + 64)) <= 3)
  {
    sub_C089C8((uint64_t *)a1, 4uLL);
    uint64_t v12 = *(void *)(a1 + 56);
  }
  *(_DWORD *)(a1 + 40) += 4;
  *(_DWORD *)(v12 - 4) = v4 - a2 + 4;
  *(void *)(a1 + 56) = v12 - 4;
  return *(unsigned int *)(a1 + 40);
}

void sub_C2DAEC(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, uint64_t *a5, void **a6)
{
  if (*a3 == *a4 && a3[1] == a4[1] && a3[2] == a4[2]) {
    return;
  }
  sub_C2DF94(a5, (uint64_t)&__p);
  uint64_t v9 = (char *)__p;
  int v10 = v35;
  if (__p == v35)
  {
    if (!__p) {
      return;
    }
    goto LABEL_26;
  }
  do
  {
    int v14 = sub_C2E374(a1, a2, (uint64_t)v9);
    int v15 = v14;
    uint64_t v17 = (char *)a6[1];
    unint64_t v16 = (unint64_t)a6[2];
    if ((unint64_t)v17 < v16)
    {
      *(_DWORD *)uint64_t v17 = v14;
      uint64_t v11 = *(void *)a3;
      *((_DWORD *)v17 + 3) = a3[2];
      *(void *)(v17 + 4) = v11;
      uint64_t v12 = *(void *)a4;
      *((_DWORD *)v17 + 6) = a4[2];
      *((void *)v17 + 2) = v12;
      uint64_t v13 = v17 + 28;
    }
    else
    {
      uint64_t v18 = (char *)*a6;
      uint64_t v19 = 0x6DB6DB6DB6DB6DB7 * ((v17 - (unsigned char *)*a6) >> 2);
      unint64_t v20 = v19 + 1;
      if ((unint64_t)(v19 + 1) > 0x924924924924924) {
        sub_2E00();
      }
      unint64_t v21 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v16 - (void)v18) >> 2);
      if (2 * v21 > v20) {
        unint64_t v20 = 2 * v21;
      }
      if (v21 >= 0x492492492492492) {
        unint64_t v22 = 0x924924924924924;
      }
      else {
        unint64_t v22 = v20;
      }
      if (v22)
      {
        if (v22 > 0x924924924924924) {
          sub_188D718();
        }
        int v23 = (char *)operator new(28 * v22);
      }
      else
      {
        int v23 = 0;
      }
      uint64_t v24 = &v23[28 * v19];
      *(_DWORD *)uint64_t v24 = v15;
      *(void *)(v24 + 4) = *(void *)a3;
      *((_DWORD *)v24 + 3) = a3[2];
      *((void *)v24 + 2) = *(void *)a4;
      *((_DWORD *)v24 + 6) = a4[2];
      int v25 = v24;
      if (v17 != v18)
      {
        do
        {
          long long v26 = *(_OWORD *)(v17 - 28);
          *((_OWORD *)v25 - 1) = *((_OWORD *)v17 - 1);
          *(_OWORD *)(v25 - 28) = v26;
          v25 -= 28;
          v17 -= 28;
        }
        while (v17 != v18);
        uint64_t v17 = (char *)*a6;
      }
      uint64_t v27 = &v23[28 * v22];
      uint64_t v13 = v24 + 28;
      *a6 = v25;
      a6[1] = v24 + 28;
      a6[2] = v27;
      if (v17) {
        operator delete(v17);
      }
    }
    a6[1] = v13;
    v9 += 24;
  }
  while (v9 != v10);
  uint64_t v9 = (char *)__p;
  if (__p)
  {
LABEL_26:
    uint64_t v28 = v35;
    int v29 = v9;
    if (v35 != v9)
    {
      do
      {
        uint64_t v31 = (void *)*((void *)v28 - 3);
        v28 -= 24;
        unint64_t v30 = v31;
        if (v31) {
          operator delete(v30);
        }
      }
      while (v28 != v9);
      int v29 = __p;
    }
    uint64_t v35 = v9;
    operator delete(v29);
  }
}

void sub_C2DD5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_7448C((void **)va);
  _Unwind_Resume(a1);
}

void sub_C2DD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_7448C((void **)va);
  _Unwind_Resume(a1);
}

void sub_C2DD84(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (int *)a1[549];
  uint64_t v6 = (unsigned __int16 *)((char *)v5 - *v5);
  if (*v6 >= 5u && (uint64_t v7 = v6[2]) != 0) {
    unint64_t v8 = (char *)v5 + v7 + *(unsigned int *)((char *)v5 + v7);
  }
  else {
    unint64_t v8 = 0;
  }
  uint64_t v9 = &v8[4 * a2 + 4 + *(unsigned int *)&v8[4 * a2 + 4]];
  int v10 = &v9[-*(int *)v9];
  if (*(unsigned __int16 *)v10 >= 0x13u)
  {
    uint64_t v11 = *((unsigned __int16 *)v10 + 9);
    if (v11)
    {
      char v12 = *(_DWORD *)&v9[v11] & 1;
      uint64_t v13 = *(_OWORD **)a3;
      int v14 = *(_OWORD **)(a3 + 8);
      if (*(_OWORD **)a3 == v14) {
        return;
      }
LABEL_10:
      if (v12)
      {
        int v15 = -1;
        while (1)
        {
          long long v16 = *(_OWORD *)((char *)v13 + 12);
          *(_OWORD *)int v23 = *v13;
          *(_OWORD *)&v23[3] = v16;
          uint64_t v17 = a1[527];
          if (v23[0] >= (unint64_t)((a1[528] - v17) >> 3)) {
            break;
          }
          uint64_t v18 = *(void *)(v17 + 8 * v23[0]);
          if (v15 == -1 || v15 != v23[0]) {
            *(_DWORD *)(v18 + 76) = sub_2D0F10(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[537] - a1[536]) >> 2));
          }
          sub_C32CC4(a1, a2, &v23[1], &v23[4], (void *)v18);
          int v15 = v23[0];
          uint64_t v13 = (_OWORD *)((char *)v13 + 28);
          if (v13 == v14) {
            return;
          }
        }
      }
      else
      {
        int v19 = -1;
        while (1)
        {
          long long v20 = *(_OWORD *)((char *)v13 + 12);
          *(_OWORD *)int v23 = *v13;
          *(_OWORD *)&v23[3] = v20;
          uint64_t v21 = a1[527];
          if (v23[0] >= (unint64_t)((a1[528] - v21) >> 3)) {
            break;
          }
          uint64_t v22 = *(void *)(v21 + 8 * v23[0]);
          if (v19 == -1 || v19 != v23[0]) {
            *(_DWORD *)(v22 + 76) = sub_2D0F10(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[537] - a1[536]) >> 2));
          }
          sub_C3318C(a1, a2, &v23[1], &v23[4], (void *)v22);
          int v19 = v23[0];
          uint64_t v13 = (_OWORD *)((char *)v13 + 28);
          if (v13 == v14) {
            return;
          }
        }
      }
      sub_66748();
    }
  }
  char v12 = 0;
  uint64_t v13 = *(_OWORD **)a3;
  int v14 = *(_OWORD **)(a3 + 8);
  if (*(_OWORD **)a3 != v14) {
    goto LABEL_10;
  }
}

void sub_C2DF94(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = v4 - *a1;
  if (v4 != *a1)
  {
    if (!*(_DWORD *)(v3 + 8) && !*(_DWORD *)(v3 + 12))
    {
      std::string __p = 0;
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      uint64_t v7 = sub_C2E610((char **)a2, (uint64_t)&__p);
      unint64_t v8 = __p;
      *(void *)(a2 + 8) = v7;
      if (v8)
      {
        operator delete(v8);
        uint64_t v7 = *(char **)(a2 + 8);
      }
      sub_A3E96C((uint64_t)(v7 - 24), v5 >> 3, 1uLL);
    }
    uint64_t v49 = v5 >> 4;
    uint64_t v9 = (v5 >> 4) - 1;
    if (v5 >> 4 != 1)
    {
      uint64_t v10 = 0;
      unint64_t v50 = v5 >> 3;
      unint64_t v11 = 2;
      do
      {
        char v12 = (_DWORD *)(*a1 + v10);
        int v13 = v12[2];
        if (*((void *)v12 + 1)) {
          BOOL v14 = v12[6] == 0;
        }
        else {
          BOOL v14 = 0;
        }
        if (v14 && v12[7] == 0)
        {
          std::string __p = 0;
          uint64_t v52 = 0;
          uint64_t v53 = 0;
          long long v16 = *(void **)(a2 + 8);
          if ((unint64_t)v16 >= *(void *)(a2 + 16))
          {
            uint64_t v17 = sub_C2E610((char **)a2, (uint64_t)&__p);
            uint64_t v18 = __p;
            *(void *)(a2 + 8) = v17;
            if (v18)
            {
              operator delete(v18);
              uint64_t v17 = *(char **)(a2 + 8);
            }
          }
          else
          {
            void *v16 = 0;
            v16[1] = 0;
            v16[2] = v53;
            uint64_t v17 = (char *)(v16 + 3);
            *(void *)(a2 + 8) = v16 + 3;
          }
          sub_A3E96C((uint64_t)(v17 - 24), v50, 1uLL);
          uint64_t v19 = v11 - 1;
          int v13 = v12[2];
          if (v13 > 0) {
            uint64_t v19 = v11;
          }
          uint64_t v20 = *(void *)(*(void *)(a2 + 8) - 24);
          uint64_t v21 = v19 - 63;
          if (v19 - 63 < 0) {
            uint64_t v21 = v19;
          }
          uint64_t v22 = v21 >> 6;
          if (v19 >= 0) {
            uint64_t v22 = (unint64_t)v19 >> 6;
          }
          unint64_t v23 = (((_BYTE)v19 + 1) & 0x3F) + 8 * (8 * v22 + ((((v19 & 0x3F) + 1) >> 3) & 8));
          if (v23)
          {
            if (v23 >= 0x40) {
              bzero(*(void **)(*(void *)(a2 + 8) - 24), 8 * (v23 >> 6));
            }
            if ((v23 & 0x3F) != 0) {
              *(void *)(v20 + 8 * (v23 >> 6)) &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v23 & 0x3F));
            }
          }
        }
        if (!(v13 | v12[3]))
        {
          int v24 = v12[7];
          if (*((void *)v12 + 3))
          {
            BOOL v25 = v24 < 1;
            BOOL v26 = v24 < 1;
            if (v25) {
              uint64_t v27 = v11 + 1;
            }
            else {
              uint64_t v27 = v11;
            }
            uint64_t v28 = *(void *)(a2 + 8);
            uint64_t v29 = v11 + v26;
            if ((uint64_t)(v11 + v26 - 63) >= 0) {
              uint64_t v29 = v11 + v26 - 63;
            }
            uint64_t v30 = v29 >> 6;
            if (v27 >= 0) {
              uint64_t v30 = v11 >> 6;
            }
            uint64_t v31 = (void *)(*(void *)(v28 - 24) + 8 * v30);
            uint64_t v32 = v27 & 0x3F;
            unint64_t v33 = (*(void *)(v28 - 16) & 0x3FLL) - v32 + 8 * (8 * (*(void *)(v28 - 16) >> 6) - 8 * v30);
            if (v33)
            {
              int v34 = ((_BYTE)v11 + v26) & 0x3F;
              if (v34)
              {
                unint64_t v35 = (64 - v34);
                if (v35 >= v33) {
                  uint64_t v36 = (*(void *)(v28 - 16) & 0x3FLL) - v32 + 8 * (8 * (*(void *)(v28 - 16) >> 6) - 8 * v30);
                }
                else {
                  uint64_t v36 = v35;
                }
                *v31++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (v35 - v36)) & (-1 << v32));
                v33 -= v36;
              }
              if (v33 >= 0x40) {
                bzero(v31, 8 * (v33 >> 6));
              }
              if ((v33 & 0x3F) != 0) {
                v31[v33 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v33 & 0x3F));
              }
            }
          }
        }
        v10 += 16;
        v11 += 2;
        --v9;
      }
      while (v9);
    }
    int v37 = *(char **)a2;
    unint64_t v38 = *(char **)(a2 + 8);
    if (*(char **)a2 != v38)
    {
      uint64_t v39 = 0;
      uint64_t v40 = *a1;
      do
      {
        uint64_t v41 = (_DWORD *)(v40 + 16 * v39);
        char v42 = 2 * v39;
        unint64_t v43 = (unint64_t)(2 * v39) >> 6;
        if (v41[1])
        {
          uint64_t v44 = v37;
          do
          {
            uint64_t v45 = *(void *)v44;
            v44 += 24;
            *(void *)(v45 + 8 * v43) &= ~(1 << (v42 & 0x3E));
          }
          while (v44 != v38);
        }
        if (*v41)
        {
          uint64_t v46 = ~(1 << (v42 & 0x3E | 1u));
          uint64_t v47 = v37;
          do
          {
            uint64_t v48 = *(void *)v47;
            v47 += 24;
            *(void *)(v48 + 8 * v43) &= v46;
          }
          while (v47 != v38);
        }
        ++v39;
      }
      while (v39 != v49);
    }
  }
}

void sub_C2E32C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  sub_7448C(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_C2E374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)(a1 + 4400);
  if (!sub_C2EBC8((void *)(a1 + 4400), a3)) {
    operator new();
  }
  uint64_t v5 = sub_C2F97C(v4, a3);
  if (!v5) {
    sub_5AE8("unordered_map::at: key not found");
  }
  return *((unsigned int *)v5 + 10);
}

void sub_C2E5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    sub_BDD258((uint64_t)&a10, v11);
  }
  _Unwind_Resume(exception_object);
}

char *sub_C2E610(char **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v5 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0xAAAAAAAAAAAAAAALL) {
    sub_188D718();
  }
  uint64_t v7 = 24 * v5;
  unint64_t v8 = (char *)operator new(24 * v5);
  uint64_t v9 = &v8[24 * v3];
  uint64_t v10 = &v8[v7];
  *(void *)uint64_t v9 = *(void *)a2;
  *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v11 = v9 + 24;
  char v12 = *a1;
  int v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (!v13) {
      return v11;
    }
    goto LABEL_17;
  }
  do
  {
    uint64_t v14 = *((void *)v13 - 3);
    v13 -= 24;
    *((void *)v9 - 3) = v14;
    v9 -= 24;
    *((void *)v9 + 1) = *((void *)v13 + 1);
    *((void *)v9 + 2) = *((void *)v13 + 2);
    *(void *)int v13 = 0;
    *((void *)v13 + 1) = 0;
    *((void *)v13 + 2) = 0;
  }
  while (v13 != v12);
  int v15 = *a1;
  int v13 = a1[1];
  *a1 = v9;
  a1[1] = v11;
  a1[2] = v10;
  if (v13 != v15)
  {
    do
    {
      uint64_t v17 = (void *)*((void *)v13 - 3);
      v13 -= 24;
      long long v16 = v17;
      if (v17) {
        operator delete(v16);
      }
    }
    while (v13 != v15);
    int v13 = v15;
  }
  if (v13) {
LABEL_17:
  }
    operator delete(v13);
  return v11;
}

void sub_C2E768(int *a1, uint64_t a2)
{
  unint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u)
  {
    uint64_t v5 = v4[2];
    if (v4[2])
    {
      uint64_t v6 = (char *)a1 + v5;
      uint64_t v7 = *(unsigned int *)((char *)a1 + v5);
      unint64_t v8 = *(unsigned int *)((char *)a1 + v5 + v7);
      unint64_t v9 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3;
      if (v8 <= v9)
      {
        if (v8 < v9) {
          *(void *)(a2 + 8) = *(void *)a2 + 8 * v8;
        }
      }
      else
      {
        sub_D2BFC((void **)a2, v8 - v9);
        LODWORD(v8) = *(_DWORD *)&v6[v7];
      }
      if (v8)
      {
        unint64_t v10 = 0;
        do
        {
          *(void *)(*(void *)a2 + 8 * v10) = *(void *)((char *)&a1[2 * v10 + 1] + v5 + v7);
          ++v10;
        }
        while (v10 < *(unsigned int *)&v6[v7]);
      }
    }
  }
  uint64_t v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 >= 7u)
  {
    uint64_t v12 = v11[3];
    if (v11[3])
    {
      int v13 = (char *)a1 + v12;
      uint64_t v14 = *(unsigned int *)((char *)a1 + v12);
      uint64_t v15 = *(void *)(a2 + 24);
      unint64_t v16 = *(unsigned int *)((char *)a1 + v12 + v14);
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 32) - v15) >> 2);
      if (v16 <= v17)
      {
        if (v16 < v17) {
          *(void *)(a2 + 32) = v15 + 12 * v16;
        }
      }
      else
      {
        sub_C2EEF0(a2 + 24, v16 - v17);
        LODWORD(v16) = *(_DWORD *)&v13[v14];
      }
      if (v16)
      {
        uint64_t v18 = 0;
        unint64_t v19 = 0;
        uint64_t v20 = (uint64_t)a1 + v12 + v14 + 4;
        do
        {
          uint64_t v21 = *(void *)(a2 + 24) + v18;
          uint64_t v22 = *(void *)(v20 + v18);
          *(_DWORD *)(v21 + 8) = *(_DWORD *)(v20 + v18 + 8);
          *(void *)uint64_t v21 = v22;
          ++v19;
          v18 += 12;
        }
        while (v19 < *(unsigned int *)&v13[v14]);
      }
    }
  }
  unint64_t v23 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v23 >= 9u)
  {
    uint64_t v24 = v23[4];
    if (v23[4])
    {
      BOOL v25 = (char *)a1 + v24;
      uint64_t v26 = *(unsigned int *)((char *)a1 + v24);
      uint64_t v27 = *(void *)(a2 + 48);
      unint64_t v28 = *(unsigned int *)((char *)a1 + v24 + v26);
      unint64_t v29 = (*(void *)(a2 + 56) - v27) >> 4;
      if (v28 <= v29)
      {
        if (v28 < v29) {
          *(void *)(a2 + 56) = v27 + 16 * v28;
        }
      }
      else
      {
        sub_C2F094((char **)(a2 + 48), v28 - v29);
        LODWORD(v28) = *(_DWORD *)&v25[v26];
      }
      if (v28)
      {
        uint64_t v30 = 0;
        unint64_t v31 = 0;
        do
        {
          *(_OWORD *)(*(void *)(a2 + 48) + v30) = *(_OWORD *)((char *)a1 + v24 + v26 + v30 + 4);
          ++v31;
          v30 += 16;
        }
        while (v31 < *(unsigned int *)&v25[v26]);
      }
    }
  }
  uint64_t v32 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v33 = *v32;
  if (v33 <= 0xA)
  {
    *(unsigned char *)(a2 + 72) = 0;
LABEL_36:
    *(unsigned char *)(a2 + 73) = 1;
    goto LABEL_37;
  }
  uint64_t v34 = v32[5];
  if (v32[5]) {
    LOBYTE(v34) = *((unsigned char *)a1 + v34);
  }
  *(unsigned char *)(a2 + 72) = v34;
  if (v33 < 0xD) {
    goto LABEL_36;
  }
  if (!v32[6])
  {
    *(unsigned char *)(a2 + 73) = 1;
    if (v33 >= 0xF) {
      goto LABEL_66;
    }
LABEL_37:
    LODWORD(v35) = 0;
    *(_WORD *)(a2 + 74) = 0x7FFF;
    goto LABEL_38;
  }
  *(unsigned char *)(a2 + 73) = *((unsigned char *)a1 + v32[6]);
  if (v33 < 0xF) {
    goto LABEL_37;
  }
LABEL_66:
  if (v32[7])
  {
    *(_WORD *)(a2 + 74) = *(_WORD *)((char *)a1 + v32[7]);
    if (v33 >= 0x11) {
      goto LABEL_68;
    }
LABEL_71:
    LODWORD(v35) = 0;
    goto LABEL_38;
  }
  *(_WORD *)(a2 + 74) = 0x7FFF;
  if (v33 < 0x11) {
    goto LABEL_71;
  }
LABEL_68:
  uint64_t v35 = v32[8];
  if (v35) {
    LODWORD(v35) = *(int *)((char *)a1 + v35);
  }
LABEL_38:
  *(_DWORD *)(a2 + 76) = v35;
  uint64_t v36 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v36 < 0x13u)
  {
    *(_DWORD *)(a2 + 80) = 0;
    unint64_t v38 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v38 < 0x15u) {
      goto LABEL_52;
    }
    goto LABEL_44;
  }
  uint64_t v37 = v36[9];
  if (v37) {
    LODWORD(v37) = *(int *)((char *)a1 + v37);
  }
  *(_DWORD *)(a2 + 80) = v37;
  unint64_t v38 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v38 >= 0x15u)
  {
LABEL_44:
    uint64_t v39 = v38[10];
    if (v38[10])
    {
      uint64_t v40 = (char *)a1 + v39;
      uint64_t v41 = *(unsigned int *)((char *)a1 + v39);
      uint64_t v42 = *(void *)(a2 + 88);
      unint64_t v43 = *(unsigned int *)((char *)a1 + v39 + v41);
      unint64_t v44 = (*(void *)(a2 + 96) - v42) >> 2;
      if (v43 <= v44)
      {
        if (v43 < v44) {
          *(void *)(a2 + 96) = v42 + 4 * v43;
        }
      }
      else
      {
        sub_4394C(a2 + 88, v43 - v44);
        LODWORD(v43) = *(_DWORD *)&v40[v41];
      }
      if (v43)
      {
        unint64_t v45 = 0;
        uint64_t v46 = *(void *)(a2 + 88);
        do
        {
          *(_DWORD *)(v46 + 4 * v45) = *(int *)((char *)&a1[v45 + 1] + v39 + v41);
          ++v45;
        }
        while (v45 < *(unsigned int *)&v40[v41]);
      }
    }
  }
LABEL_52:
  uint64_t v47 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v47 >= 0x17u)
  {
    uint64_t v48 = v47[11];
    if (v47[11])
    {
      uint64_t v49 = (char *)a1 + v48;
      uint64_t v50 = *(unsigned int *)((char *)a1 + v48);
      uint64_t v51 = *(void *)(a2 + 112);
      unint64_t v52 = *(unsigned int *)((char *)a1 + v48 + v50);
      unint64_t v53 = (*(void *)(a2 + 120) - v51) >> 2;
      if (v52 <= v53)
      {
        if (v52 < v53) {
          *(void *)(a2 + 120) = v51 + 4 * v52;
        }
      }
      else
      {
        sub_4394C(a2 + 112, v52 - v53);
        LODWORD(v52) = *(_DWORD *)&v49[v50];
      }
      if (v52)
      {
        unint64_t v54 = 0;
        uint64_t v55 = *(void *)(a2 + 112);
        do
        {
          *(_DWORD *)(v55 + 4 * v54) = *(int *)((char *)&a1[v54 + 1] + v48 + v50);
          ++v54;
        }
        while (v54 < *(unsigned int *)&v49[v50]);
      }
    }
  }
  uint64_t v56 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v56 >= 0x19u && (uint64_t v57 = v56[12]) != 0) {
    *(unsigned char *)(a2 + 136) = *((unsigned char *)a1 + v57);
  }
  else {
    *(unsigned char *)(a2 + 136) = 2;
  }
}

void *sub_C2EBC8(void *a1, uint64_t a2)
{
  unint64_t v3 = *(int8x16_t **)a2;
  uint64_t v2 = *(void *)(a2 + 8);
  unint64_t v4 = v2 - 64;
  if ((unint64_t)v2 < 0x40)
  {
    int8x8_t v5 = 0;
    unint64_t v7 = *(void *)(a2 + 8);
    uint64_t v6 = *(int8x16_t **)a2;
    goto LABEL_9;
  }
  if (v4 < 0xC0)
  {
    int8x8_t v5 = 0;
    uint64_t v6 = *(int8x16_t **)a2;
    unint64_t v7 = *(void *)(a2 + 8);
    do
    {
LABEL_8:
      uint64_t v14 = v6->i64[0];
      uint64_t v6 = (int8x16_t *)((char *)v6 + 8);
      *(void *)&v5 ^= v14;
      v7 -= 64;
    }
    while (v7 > 0x3F);
    goto LABEL_9;
  }
  uint64_t v8 = (v4 >> 6) + 1;
  uint64_t v6 = (int8x16_t *)((char *)v3 + 8 * (v8 & 0x7FFFFFFFFFFFFFCLL));
  unint64_t v7 = v2 - ((v8 & 0x7FFFFFFFFFFFFFCLL) << 6);
  unint64_t v9 = v3 + 1;
  int8x16_t v10 = 0uLL;
  uint64_t v11 = v8 & 0x7FFFFFFFFFFFFFCLL;
  int8x16_t v12 = 0uLL;
  do
  {
    int8x16_t v10 = veorq_s8(v9[-1], v10);
    int8x16_t v12 = veorq_s8(*v9, v12);
    v9 += 2;
    v11 -= 4;
  }
  while (v11);
  int8x16_t v13 = veorq_s8(v12, v10);
  int8x8_t v5 = veor_s8(*(int8x8_t *)v13.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL));
  if (v8 != (v8 & 0x7FFFFFFFFFFFFFCLL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v7) {
    *(void *)&v5 ^= v6->i64[0] & (0xFFFFFFFFFFFFFFFFLL >> -(char)v7);
  }
  int8x8_t v15 = (int8x8_t)a1[1];
  if (v15)
  {
    uint8x8_t v16 = (uint8x8_t)vcnt_s8(v15);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      uint64_t v17 = (uint64_t)v5;
      if (*(void *)&v5 >= *(void *)&v15) {
        uint64_t v17 = *(void *)&v5 % *(void *)&v15;
      }
    }
    else
    {
      uint64_t v17 = (*(void *)&v15 - 1) & *(void *)&v5;
    }
    uint64_t v18 = *(void **)(*a1 + 8 * v17);
    if (v18)
    {
      unint64_t v19 = (void *)*v18;
      if (v19)
      {
        if (v16.u32[0] < 2uLL)
        {
          uint64_t v20 = *(void *)&v15 - 1;
          if (v2 <= 0)
          {
            while (1)
            {
              uint64_t v28 = v19[1];
              if (*(void *)&v5 == v28)
              {
                if (v19[3] == v2) {
                  return v19;
                }
              }
              else if ((v28 & v20) != v17)
              {
                return 0;
              }
              BOOL result = 0;
              unint64_t v19 = (void *)*v19;
              if (!v19) {
                return result;
              }
            }
          }
          while (1)
          {
            uint64_t v21 = v19[1];
            if (*(void *)&v5 == v21)
            {
              if (v19[3] == v2)
              {
                uint64_t v22 = (void *)v19[2];
                unint64_t v23 = *(int8x16_t **)a2;
                if ((unint64_t)v2 < 0x40)
                {
                  if (!((*v22 ^ v3->i64[0]) << -(char)v2)) {
                    return v19;
                  }
                }
                else
                {
                  unint64_t v24 = *(void *)(a2 + 8);
                  while (v23->i64[0] == *v22)
                  {
                    unint64_t v25 = v24 - 64;
                    ++v22;
                    unint64_t v23 = (int8x16_t *)((char *)v23 + 8);
                    BOOL v26 = v24 > 0x7F;
                    v24 -= 64;
                    if (!v26)
                    {
                      if (v25 + 64 >= 0x41 && (*v22 ^ v23->i64[0]) << -(char)v25) {
                        break;
                      }
                      return v19;
                    }
                  }
                }
              }
            }
            else if ((v21 & v20) != v17)
            {
              return 0;
            }
            unint64_t v19 = (void *)*v19;
            if (!v19) {
              return 0;
            }
          }
        }
        if (v2 <= 0)
        {
          while (1)
          {
            unint64_t v34 = v19[1];
            if (*(void *)&v5 == v34)
            {
              if (v19[3] == v2) {
                return v19;
              }
            }
            else
            {
              if (v34 >= *(void *)&v15) {
                v34 %= *(void *)&v15;
              }
              if (v34 != v17) {
                return 0;
              }
            }
            BOOL result = 0;
            unint64_t v19 = (void *)*v19;
            if (!v19) {
              return result;
            }
          }
        }
        do
        {
          unint64_t v29 = v19[1];
          if (*(void *)&v5 == v29)
          {
            if (v19[3] == v2)
            {
              uint64_t v30 = (void *)v19[2];
              unint64_t v31 = *(int8x16_t **)a2;
              if ((unint64_t)v2 < 0x40)
              {
                if (!((*v30 ^ v3->i64[0]) << -(char)v2)) {
                  return v19;
                }
              }
              else
              {
                unint64_t v32 = *(void *)(a2 + 8);
                while (v31->i64[0] == *v30)
                {
                  unint64_t v33 = v32 - 64;
                  ++v30;
                  unint64_t v31 = (int8x16_t *)((char *)v31 + 8);
                  BOOL v26 = v32 > 0x7F;
                  v32 -= 64;
                  if (!v26)
                  {
                    if (v33 + 64 >= 0x41 && (*v30 ^ v31->i64[0]) << -(char)v33) {
                      break;
                    }
                    return v19;
                  }
                }
              }
            }
          }
          else
          {
            if (v29 >= *(void *)&v15) {
              v29 %= *(void *)&v15;
            }
            if (v29 != v17) {
              return 0;
            }
          }
          unint64_t v19 = (void *)*v19;
        }
        while (v19);
      }
    }
  }
  return 0;
}

void sub_C2EEF0(uint64_t a1, unint64_t a2)
{
  int8x8_t v5 = *(_DWORD **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 2) >= a2)
  {
    if (a2)
    {
      size_t v12 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero(*(void **)(a1 + 8), v12);
      int8x8_t v5 = (_DWORD *)((char *)v5 + v12);
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    uint64_t v6 = *(_DWORD **)a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)a1) >> 2);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0x1555555555555555) {
      sub_2E00();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 2);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v10 = 0x1555555555555555;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0x1555555555555555) {
        sub_188D718();
      }
      uint64_t v11 = (char *)operator new(12 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    int8x16_t v13 = &v11[12 * v7];
    uint64_t v14 = &v11[12 * v10];
    size_t v15 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v13, v15);
    uint8x8_t v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        uint64_t v17 = *(void *)(v5 - 3);
        v5 -= 3;
        int v18 = v5[2];
        *(void *)(v13 - 12) = v17;
        v13 -= 12;
        *((_DWORD *)v13 + 2) = v18;
      }
      while (v5 != v6);
      int8x8_t v5 = *(_DWORD **)a1;
    }
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = v14;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void sub_C2F094(char **a1, unint64_t a2)
{
  int8x8_t v5 = a1[1];
  uint64_t v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      uint64_t v12 = 16 * a2;
      bzero(a1[1], 16 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    uint64_t v6 = *a1;
    uint64_t v7 = (v5 - *a1) >> 4;
    unint64_t v8 = v7 + a2;
    if ((v7 + a2) >> 60) {
      sub_2E00();
    }
    uint64_t v9 = v4 - v6;
    if (v9 >> 3 > v8) {
      unint64_t v8 = v9 >> 3;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 60) {
        sub_188D718();
      }
      uint64_t v11 = (char *)operator new(16 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    int8x16_t v13 = &v11[16 * v7];
    size_t v14 = 16 * a2;
    size_t v15 = &v11[16 * v10];
    bzero(v13, v14);
    uint8x8_t v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      int8x8_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

int8x8_t *sub_C2F1D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v8 = *(int8x16_t **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  unint64_t v9 = v7 - 64;
  if ((unint64_t)v7 < 0x40)
  {
    int8x8_t v10 = 0;
    unint64_t v12 = *(void *)(a2 + 8);
    uint64_t v11 = *(int8x16_t **)a2;
    goto LABEL_9;
  }
  if (v9 < 0xC0)
  {
    int8x8_t v10 = 0;
    uint64_t v11 = *(int8x16_t **)a2;
    unint64_t v12 = *(void *)(a2 + 8);
    do
    {
LABEL_8:
      uint64_t v19 = v11->i64[0];
      uint64_t v11 = (int8x16_t *)((char *)v11 + 8);
      *(void *)&v10 ^= v19;
      v12 -= 64;
    }
    while (v12 > 0x3F);
    goto LABEL_9;
  }
  uint64_t v13 = (v9 >> 6) + 1;
  uint64_t v11 = (int8x16_t *)((char *)v8 + 8 * (v13 & 0x7FFFFFFFFFFFFFCLL));
  unint64_t v12 = v7 - ((v13 & 0x7FFFFFFFFFFFFFCLL) << 6);
  size_t v14 = v8 + 1;
  int8x16_t v15 = 0uLL;
  uint64_t v16 = v13 & 0x7FFFFFFFFFFFFFCLL;
  int8x16_t v17 = 0uLL;
  do
  {
    int8x16_t v15 = veorq_s8(v14[-1], v15);
    int8x16_t v17 = veorq_s8(*v14, v17);
    v14 += 2;
    v16 -= 4;
  }
  while (v16);
  int8x16_t v18 = veorq_s8(v17, v15);
  int8x8_t v10 = veor_s8(*(int8x8_t *)v18.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL));
  if (v13 != (v13 & 0x7FFFFFFFFFFFFFCLL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v12) {
    *(void *)&v10 ^= v11->i64[0] & (0xFFFFFFFFFFFFFFFFLL >> -(char)v12);
  }
  unint64_t v20 = *(void *)(a1 + 8);
  if (v20)
  {
    uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
    v21.i16[0] = vaddlv_u8(v21);
    if (v21.u32[0] > 1uLL)
    {
      unint64_t v4 = (unint64_t)v10;
      if (*(void *)&v10 >= v20) {
        unint64_t v4 = *(void *)&v10 % v20;
      }
    }
    else
    {
      unint64_t v4 = (v20 - 1) & *(void *)&v10;
    }
    uint64_t v22 = *(int8x8_t ***)(*(void *)a1 + 8 * v4);
    if (v22)
    {
      BOOL result = *v22;
      if (*v22)
      {
        if (v21.u32[0] < 2uLL)
        {
          unint64_t v24 = v20 - 1;
          if (v7 <= 0)
          {
            while (1)
            {
              int8x8_t v31 = result[1];
              if (*(void *)&v31 == *(void *)&v10)
              {
                if (*(void *)&result[3] == v7) {
                  return result;
                }
              }
              else if ((*(void *)&v31 & v24) != v4)
              {
                goto LABEL_64;
              }
              BOOL result = (int8x8_t *)*result;
              if (!result) {
                goto LABEL_64;
              }
            }
          }
          while (1)
          {
            int8x8_t v25 = result[1];
            if (*(void *)&v25 == *(void *)&v10)
            {
              if (*(void *)&result[3] == v7)
              {
                BOOL v26 = (void *)result[2];
                uint64_t v27 = *(int8x16_t **)a2;
                if ((unint64_t)v7 < 0x40)
                {
                  if (!((*v26 ^ v8->i64[0]) << -(char)v7)) {
                    return result;
                  }
                }
                else
                {
                  unint64_t v28 = *(void *)(a2 + 8);
                  while (v27->i64[0] == *v26)
                  {
                    unint64_t v29 = v28 - 64;
                    ++v26;
                    uint64_t v27 = (int8x16_t *)((char *)v27 + 8);
                    BOOL v30 = v28 > 0x7F;
                    v28 -= 64;
                    if (!v30)
                    {
                      if (v29 + 64 >= 0x41 && (*v26 ^ v27->i64[0]) << -(char)v29) {
                        break;
                      }
                      return result;
                    }
                  }
                }
              }
            }
            else if ((*(void *)&v25 & v24) != v4)
            {
              goto LABEL_64;
            }
            BOOL result = (int8x8_t *)*result;
            if (!result) {
              goto LABEL_64;
            }
          }
        }
        if (v7 <= 0)
        {
          while (1)
          {
            unint64_t v37 = (unint64_t)result[1];
            if (v37 == *(void *)&v10)
            {
              if (*(void *)&result[3] == v7) {
                return result;
              }
            }
            else
            {
              if (v37 >= v20) {
                v37 %= v20;
              }
              if (v37 != v4) {
                goto LABEL_64;
              }
            }
            BOOL result = (int8x8_t *)*result;
            if (!result) {
              goto LABEL_64;
            }
          }
        }
        do
        {
          unint64_t v32 = (unint64_t)result[1];
          if (v32 == *(void *)&v10)
          {
            if (*(void *)&result[3] == v7)
            {
              unint64_t v33 = (void *)result[2];
              unint64_t v34 = *(int8x16_t **)a2;
              if ((unint64_t)v7 < 0x40)
              {
                if (!((*v33 ^ v8->i64[0]) << -(char)v7)) {
                  return result;
                }
              }
              else
              {
                unint64_t v35 = *(void *)(a2 + 8);
                while (v34->i64[0] == *v33)
                {
                  unint64_t v36 = v35 - 64;
                  ++v33;
                  unint64_t v34 = (int8x16_t *)((char *)v34 + 8);
                  BOOL v30 = v35 > 0x7F;
                  v35 -= 64;
                  if (!v30)
                  {
                    if (v36 + 64 >= 0x41 && (*v33 ^ v34->i64[0]) << -(char)v36) {
                      break;
                    }
                    return result;
                  }
                }
              }
            }
          }
          else
          {
            if (v32 >= v20) {
              v32 %= v20;
            }
            if (v32 != v4) {
              break;
            }
          }
          BOOL result = (int8x8_t *)*result;
        }
        while (result);
      }
    }
  }
LABEL_64:
  unint64_t v52 = (int8x8_t *)operator new(0x30uLL);
  int8x8_t *v52 = 0;
  v52[1] = v10;
  sub_74F38(&v52[2], *a4);
  v52[5].i32[0] = 0;
  float v38 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v39 = *(float *)(a1 + 32);
  if (!v20 || (float)(v39 * (float)v20) < v38)
  {
    BOOL v42 = 1;
    if (v20 >= 3) {
      BOOL v42 = (v20 & (v20 - 1)) != 0;
    }
    unint64_t v43 = v42 | (2 * v20);
    unint64_t v44 = vcvtps_u32_f32(v38 / v39);
    if (v43 <= v44) {
      size_t prime = v44;
    }
    else {
      size_t prime = v43;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v46 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v46) {
      goto LABEL_78;
    }
    if (prime < *(void *)&v46)
    {
      unint64_t v47 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v46 < 3uLL || (uint8x8_t v48 = (uint8x8_t)vcnt_s8(v46), v48.i16[0] = vaddlv_u8(v48), v48.u32[0] > 1uLL))
      {
        unint64_t v47 = std::__next_prime(v47);
      }
      else
      {
        uint64_t v49 = 1 << -(char)__clz(v47 - 1);
        if (v47 >= 2) {
          unint64_t v47 = v49;
        }
      }
      if (prime <= v47) {
        size_t prime = v47;
      }
      if (prime < *(void *)&v46) {
LABEL_78:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v20 = *(void *)(a1 + 8);
    unint64_t v50 = v20 - 1;
    if ((v20 & (v20 - 1)) != 0)
    {
      if (*(void *)&v10 >= v20)
      {
        unint64_t v4 = *(void *)&v10 % v20;
        uint64_t v40 = *(int8x8_t ***)(*(void *)a1 + 8 * (*(void *)&v10 % v20));
        uint64_t v41 = v52;
        if (v40) {
          goto LABEL_67;
        }
      }
      else
      {
        unint64_t v4 = (unint64_t)v10;
        uint64_t v40 = *(int8x8_t ***)(*(void *)a1 + 8 * *(void *)&v10);
        uint64_t v41 = v52;
        if (v40) {
          goto LABEL_67;
        }
      }
    }
    else
    {
      unint64_t v4 = v50 & *(void *)&v10;
      uint64_t v40 = *(int8x8_t ***)(*(void *)a1 + 8 * (v50 & *(void *)&v10));
      uint64_t v41 = v52;
      if (v40) {
        goto LABEL_67;
      }
    }
LABEL_91:
    int8x8_t *v41 = *(int8x8_t *)(a1 + 16);
    *(void *)(a1 + 16) = v52;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v52)
    {
      unint64_t v51 = *(void *)(*(void *)v52 + 8);
      if ((v20 & (v20 - 1)) != 0)
      {
        if (v51 >= v20) {
          v51 %= v20;
        }
      }
      else
      {
        v51 &= v20 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v51) = v52;
    }
    goto LABEL_102;
  }
  uint64_t v40 = *(int8x8_t ***)(*(void *)a1 + 8 * v4);
  uint64_t v41 = v52;
  if (!v40) {
    goto LABEL_91;
  }
LABEL_67:
  int8x8_t *v41 = (int8x8_t)*v40;
  *uint64_t v40 = v52;
LABEL_102:
  BOOL result = v52;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_C2F748(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_C2F770((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C2F75C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_C2F770((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_C2F770(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      unint64_t v3 = (void *)v2[2];
      if (v3) {
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t *sub_C2F7BC(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = (char *)a1[1] - (char *)*a1;
  uint64_t v4 = v3 >> 3;
  unint64_t v5 = (v3 >> 3) + 1;
  if (v5 >> 61) {
    sub_2E00();
  }
  uint64_t v7 = (char *)a1[2] - (char *)*a1;
  if (v7 >> 2 > v5) {
    unint64_t v5 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 >> 61) {
      sub_188D718();
    }
    unint64_t v9 = (char *)operator new(8 * v8);
  }
  else
  {
    unint64_t v9 = 0;
  }
  int8x8_t v10 = (uint64_t *)&v9[8 * v4];
  uint64_t v11 = (uint64_t *)&v9[8 * v8];
  uint64_t v12 = *a2;
  *a2 = 0;
  *int8x8_t v10 = v12;
  uint64_t v13 = v10 + 1;
  size_t v14 = *a1;
  int8x16_t v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    unint64_t v16 = (char *)v15 - (char *)*a1 - 8;
    if (v16 < 0x78
      || (uint64_t *)((char *)v15 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8) < v10
      && &v9[v3 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v15)
    {
      goto LABEL_34;
    }
    uint64_t v17 = (v16 >> 3) + 1;
    uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    int8x8_t v10 = (uint64_t *)((char *)v10 - v18);
    uint64_t v19 = &v15[v18 / 0xFFFFFFFFFFFFFFF8];
    unint64_t v20 = v15 - 2;
    uint8x8_t v21 = &v9[8 * v4 - 16];
    uint64_t v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v24 = *((_OWORD *)v20 - 1);
      long long v23 = *(_OWORD *)v20;
      *((_OWORD *)v20 - 1) = 0uLL;
      *(_OWORD *)unint64_t v20 = 0uLL;
      *((_OWORD *)v21 - 1) = v24;
      *(_OWORD *)uint8x8_t v21 = v23;
      v20 -= 4;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    int8x16_t v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_34:
      do
      {
        uint64_t v25 = *--v15;
        uint64_t *v15 = 0;
        *--int8x8_t v10 = v25;
      }
      while (v15 != v14);
    }
    int8x16_t v15 = *a1;
    BOOL v26 = a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (v26 == v15)
    {
      int8x16_t v15 = v26;
      if (!v26) {
        return v13;
      }
      goto LABEL_26;
    }
    uint64_t v27 = v26 - 1;
    do
    {
      uint64_t v29 = *v27;
      *uint64_t v27 = 0;
      if (v29) {
        sub_BDD258((uint64_t)v27, v29);
      }
    }
    while (v27-- != v15);
  }
  if (v15) {
LABEL_26:
  }
    operator delete(v15);
  return v13;
}

void *sub_C2F97C(void *a1, uint64_t a2)
{
  uint64_t v3 = *(int8x16_t **)a2;
  uint64_t v2 = *(void *)(a2 + 8);
  unint64_t v4 = v2 - 64;
  if ((unint64_t)v2 < 0x40)
  {
    int8x8_t v5 = 0;
    unint64_t v7 = *(void *)(a2 + 8);
    uint64_t v6 = *(int8x16_t **)a2;
    goto LABEL_9;
  }
  if (v4 < 0xC0)
  {
    int8x8_t v5 = 0;
    uint64_t v6 = *(int8x16_t **)a2;
    unint64_t v7 = *(void *)(a2 + 8);
    do
    {
LABEL_8:
      uint64_t v14 = v6->i64[0];
      uint64_t v6 = (int8x16_t *)((char *)v6 + 8);
      *(void *)&v5 ^= v14;
      v7 -= 64;
    }
    while (v7 > 0x3F);
    goto LABEL_9;
  }
  uint64_t v8 = (v4 >> 6) + 1;
  uint64_t v6 = (int8x16_t *)((char *)v3 + 8 * (v8 & 0x7FFFFFFFFFFFFFCLL));
  unint64_t v7 = v2 - ((v8 & 0x7FFFFFFFFFFFFFCLL) << 6);
  unint64_t v9 = v3 + 1;
  int8x16_t v10 = 0uLL;
  uint64_t v11 = v8 & 0x7FFFFFFFFFFFFFCLL;
  int8x16_t v12 = 0uLL;
  do
  {
    int8x16_t v10 = veorq_s8(v9[-1], v10);
    int8x16_t v12 = veorq_s8(*v9, v12);
    v9 += 2;
    v11 -= 4;
  }
  while (v11);
  int8x16_t v13 = veorq_s8(v12, v10);
  int8x8_t v5 = veor_s8(*(int8x8_t *)v13.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL));
  if (v8 != (v8 & 0x7FFFFFFFFFFFFFCLL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v7) {
    *(void *)&v5 ^= v6->i64[0] & (0xFFFFFFFFFFFFFFFFLL >> -(char)v7);
  }
  int8x8_t v15 = (int8x8_t)a1[1];
  if (v15)
  {
    uint8x8_t v16 = (uint8x8_t)vcnt_s8(v15);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      uint64_t v17 = (uint64_t)v5;
      if (*(void *)&v5 >= *(void *)&v15) {
        uint64_t v17 = *(void *)&v5 % *(void *)&v15;
      }
    }
    else
    {
      uint64_t v17 = (*(void *)&v15 - 1) & *(void *)&v5;
    }
    uint64_t v18 = *(void **)(*a1 + 8 * v17);
    if (v18)
    {
      uint64_t v19 = (void *)*v18;
      if (v19)
      {
        if (v16.u32[0] < 2uLL)
        {
          uint64_t v20 = *(void *)&v15 - 1;
          if (v2 <= 0)
          {
            while (1)
            {
              uint64_t v28 = v19[1];
              if (v28 == *(void *)&v5)
              {
                if (v19[3] == v2) {
                  return v19;
                }
              }
              else if ((v28 & v20) != v17)
              {
                return 0;
              }
              BOOL result = 0;
              uint64_t v19 = (void *)*v19;
              if (!v19) {
                return result;
              }
            }
          }
          while (1)
          {
            uint64_t v21 = v19[1];
            if (v21 == *(void *)&v5)
            {
              if (v19[3] == v2)
              {
                uint64_t v22 = (void *)v19[2];
                long long v23 = *(int8x16_t **)a2;
                if ((unint64_t)v2 < 0x40)
                {
                  if (!((*v22 ^ v3->i64[0]) << -(char)v2)) {
                    return v19;
                  }
                }
                else
                {
                  unint64_t v24 = *(void *)(a2 + 8);
                  while (v23->i64[0] == *v22)
                  {
                    unint64_t v25 = v24 - 64;
                    ++v22;
                    long long v23 = (int8x16_t *)((char *)v23 + 8);
                    BOOL v26 = v24 > 0x7F;
                    v24 -= 64;
                    if (!v26)
                    {
                      if (v25 + 64 >= 0x41 && (*v22 ^ v23->i64[0]) << -(char)v25) {
                        break;
                      }
                      return v19;
                    }
                  }
                }
              }
            }
            else if ((v21 & v20) != v17)
            {
              return 0;
            }
            uint64_t v19 = (void *)*v19;
            if (!v19) {
              return 0;
            }
          }
        }
        if (v2 <= 0)
        {
          while (1)
          {
            unint64_t v34 = v19[1];
            if (v34 == *(void *)&v5)
            {
              if (v19[3] == v2) {
                return v19;
              }
            }
            else
            {
              if (v34 >= *(void *)&v15) {
                v34 %= *(void *)&v15;
              }
              if (v34 != v17) {
                return 0;
              }
            }
            BOOL result = 0;
            uint64_t v19 = (void *)*v19;
            if (!v19) {
              return result;
            }
          }
        }
        do
        {
          unint64_t v29 = v19[1];
          if (v29 == *(void *)&v5)
          {
            if (v19[3] == v2)
            {
              BOOL v30 = (void *)v19[2];
              int8x8_t v31 = *(int8x16_t **)a2;
              if ((unint64_t)v2 < 0x40)
              {
                if (!((*v30 ^ v3->i64[0]) << -(char)v2)) {
                  return v19;
                }
              }
              else
              {
                unint64_t v32 = *(void *)(a2 + 8);
                while (v31->i64[0] == *v30)
                {
                  unint64_t v33 = v32 - 64;
                  ++v30;
                  int8x8_t v31 = (int8x16_t *)((char *)v31 + 8);
                  BOOL v26 = v32 > 0x7F;
                  v32 -= 64;
                  if (!v26)
                  {
                    if (v33 + 64 >= 0x41 && (*v30 ^ v31->i64[0]) << -(char)v33) {
                      break;
                    }
                    return v19;
                  }
                }
              }
            }
          }
          else
          {
            if (v29 >= *(void *)&v15) {
              v29 %= *(void *)&v15;
            }
            if (v29 != v17) {
              return 0;
            }
          }
          uint64_t v19 = (void *)*v19;
        }
        while (v19);
      }
    }
  }
  return 0;
}

void sub_C2FCA4(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
unsigned int *sub_C30318(unsigned int *result, unsigned int *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 7;
    if (result + 7 != a2)
    {
      uint64_t v3 = 0;
      unint64_t v4 = result;
      do
      {
        char v6 = v4;
        unint64_t v4 = v2;
        unsigned int v7 = v6[7];
        if (v7 < *v6)
        {
          unsigned int v8 = v6[8];
          goto LABEL_12;
        }
        if (*v6 < v7) {
          goto LABEL_6;
        }
        unsigned int v8 = v6[1];
        unsigned int v9 = v6[8];
        if (v9 < v8)
        {
LABEL_11:
          unsigned int v8 = v6[8];
          goto LABEL_12;
        }
        if (v9 == v8)
        {
          unsigned int v28 = v6[9];
          unsigned int v29 = v6[2];
          if (v28 == -1) {
            goto LABEL_69;
          }
          if (v28 < v29) {
            goto LABEL_12;
          }
          if (v28 != v29)
          {
LABEL_69:
            if (v29 != -1 && (v29 < v28 || v29 == v28 && v6[3] < v6[10])) {
              goto LABEL_6;
            }
          }
          else
          {
            unsigned int v30 = v6[3];
            unsigned int v31 = v6[10];
            if (v31 < v30) {
              goto LABEL_12;
            }
            if (v30 < v31) {
              goto LABEL_6;
            }
          }
        }
        else if (v8 < v9)
        {
          goto LABEL_6;
        }
        unsigned int v32 = v6[4];
        unsigned int v33 = v6[11];
        if (v33 < v32) {
          goto LABEL_11;
        }
        if (v33 != v32) {
          goto LABEL_6;
        }
        unsigned int v34 = v6[12];
        if (v34 == -1) {
          goto LABEL_6;
        }
        unsigned int v35 = v6[5];
        if (v34 < v35) {
          goto LABEL_11;
        }
        if (v34 != v35) {
          goto LABEL_6;
        }
        unsigned int v8 = v6[8];
        if (v6[13] >= v6[6]) {
          goto LABEL_6;
        }
LABEL_12:
        unsigned int v10 = v6[9];
        unsigned int v11 = v6[10];
        unsigned int v12 = v6[11];
        unsigned int v13 = v6[12];
        unsigned int v14 = v6[13];
        *(_OWORD *)unint64_t v4 = *(_OWORD *)v6;
        *(_OWORD *)(v4 + 3) = *(_OWORD *)(v6 + 3);
        char v5 = result;
        if (v6 == result) {
          goto LABEL_5;
        }
        uint64_t v15 = v3;
        if (v13 == -1)
        {
          while (1)
          {
            unsigned int v23 = (_OWORD *)((char *)result + v15);
            unsigned int v24 = *(unsigned int *)((char *)result + v15 - 28);
            if (v7 >= v24)
            {
              if (v24 < v7) {
                goto LABEL_63;
              }
              unsigned int v25 = *((_DWORD *)v23 - 6);
              if (v8 >= v25)
              {
                if (v8 != v25)
                {
                  if (v25 < v8) {
                    goto LABEL_55;
                  }
LABEL_39:
                  if (v12 >= *((_DWORD *)v23 - 3)) {
                    goto LABEL_55;
                  }
                  goto LABEL_40;
                }
                unsigned int v26 = *(unsigned int *)((char *)result + v15 - 20);
                if (v10 == -1) {
                  goto LABEL_51;
                }
                if (v10 >= v26)
                {
                  if (v10 != v26)
                  {
LABEL_51:
                    if (v26 != -1 && (v26 < v10 || v26 == v10 && *(unsigned int *)((char *)result + v15 - 16) < v11)) {
                      goto LABEL_55;
                    }
                    goto LABEL_39;
                  }
                  unsigned int v27 = *(unsigned int *)((char *)result + v15 - 16);
                  if (v11 >= v27)
                  {
                    if (v27 < v11) {
                      goto LABEL_55;
                    }
                    goto LABEL_39;
                  }
                }
              }
            }
LABEL_40:
            v6 -= 7;
            *unsigned int v23 = *(_OWORD *)((char *)result + v15 - 28);
            *(_OWORD *)((char *)v23 + 12) = *(_OWORD *)((char *)result + v15 - 16);
            v15 -= 28;
            if (!v15) {
              goto LABEL_4;
            }
          }
        }
        while (1)
        {
          unint64_t v16 = (_OWORD *)((char *)result + v15);
          unsigned int v17 = *(unsigned int *)((char *)result + v15 - 28);
          if (v7 < v17) {
            goto LABEL_15;
          }
          if (v17 < v7) {
            break;
          }
          unsigned int v18 = *((_DWORD *)v16 - 6);
          if (v8 >= v18)
          {
            if (v8 == v18)
            {
              unsigned int v19 = *(unsigned int *)((char *)result + v15 - 20);
              if (v10 == -1) {
                goto LABEL_36;
              }
              if (v10 < v19) {
                goto LABEL_15;
              }
              if (v10 != v19)
              {
LABEL_36:
                if (v19 != -1 && (v19 < v10 || v19 == v10 && *(unsigned int *)((char *)result + v15 - 16) < v11))
                {
LABEL_55:
                  char v5 = v6;
                  goto LABEL_5;
                }
              }
              else
              {
                unsigned int v20 = *(unsigned int *)((char *)result + v15 - 16);
                if (v11 < v20) {
                  goto LABEL_15;
                }
                if (v20 < v11) {
                  goto LABEL_55;
                }
              }
            }
            else if (v18 < v8)
            {
              goto LABEL_55;
            }
            unsigned int v21 = *((_DWORD *)v16 - 3);
            if (v12 >= v21)
            {
              if (v12 != v21) {
                goto LABEL_55;
              }
              unsigned int v22 = *(unsigned int *)((char *)result + v15 - 8);
              if (v13 >= v22 && (v13 != v22 || v14 >= *(unsigned int *)((char *)result + v15 - 4))) {
                goto LABEL_55;
              }
            }
          }
LABEL_15:
          v6 -= 7;
          _OWORD *v16 = *(_OWORD *)((char *)result + v15 - 28);
          *(_OWORD *)((char *)v16 + 12) = *(_OWORD *)((char *)result + v15 - 16);
          v15 -= 28;
          if (!v15)
          {
LABEL_4:
            char v5 = result;
            goto LABEL_5;
          }
        }
LABEL_63:
        char v5 = (unsigned int *)((char *)result + v15);
LABEL_5:
        *char v5 = v7;
        v5[1] = v8;
        v5[2] = v10;
        v5[3] = v11;
        v5[4] = v12;
        long long v5[5] = v13;
        v5[6] = v14;
LABEL_6:
        uint64_t v2 = v4 + 7;
        v3 += 28;
      }
      while (v4 + 7 != a2);
    }
  }
  return result;
}

unsigned int *sub_C30638(unsigned int *result, unsigned int *a2)
{
  if (result != a2)
  {
    while (1)
    {
      while (1)
      {
        do
        {
LABEL_4:
          if (result + 7 == a2) {
            return result;
          }
          uint64_t v2 = result;
          result += 7;
          unsigned int v3 = v2[7];
          if (v3 < *v2)
          {
            unsigned int v4 = v2[8];
            goto LABEL_10;
          }
        }
        while (*v2 < v3);
        unsigned int v4 = v2[1];
        unsigned int v5 = v2[8];
        if (v5 < v4) {
          goto LABEL_9;
        }
        if (v5 != v4) {
          break;
        }
        unsigned int v24 = v2[9];
        unsigned int v25 = v2[2];
        if (v24 == -1) {
          goto LABEL_62;
        }
        if (v24 < v25) {
          goto LABEL_10;
        }
        if (v24 != v25)
        {
LABEL_62:
          if (v25 == -1 || v25 >= v24 && (v25 != v24 || v2[3] >= v2[10])) {
            goto LABEL_63;
          }
        }
        else
        {
          unsigned int v26 = v2[3];
          unsigned int v27 = v2[10];
          if (v27 < v26) {
            goto LABEL_10;
          }
          if (v26 >= v27) {
            goto LABEL_63;
          }
        }
      }
      if (v4 >= v5)
      {
LABEL_63:
        unsigned int v28 = v2[4];
        unsigned int v29 = v2[11];
        if (v29 < v28) {
          goto LABEL_9;
        }
        if (v29 == v28)
        {
          unsigned int v30 = v2[12];
          if (v30 != -1)
          {
            unsigned int v31 = v2[5];
            if (v30 < v31)
            {
LABEL_9:
              unsigned int v4 = v2[8];
LABEL_10:
              unsigned int v6 = v2[9];
              unsigned int v7 = v2[10];
              unsigned int v8 = v2[11];
              unsigned int v9 = v2[12];
              unsigned int v10 = v2[13];
              if (v9 != -1)
              {
                while (1)
                {
                  do
                  {
                    do
                    {
LABEL_11:
                      unsigned int v11 = v2;
                      *(_OWORD *)(v2 + 7) = *(_OWORD *)v2;
                      *(_OWORD *)(v2 + 10) = *(_OWORD *)(v2 + 3);
                      unsigned int v13 = *(v2 - 7);
                      v2 -= 7;
                      unsigned int v12 = v13;
                    }
                    while (v3 < v13);
                    if (v12 < v3) {
                      goto LABEL_3;
                    }
                    unsigned int v14 = *(v11 - 6);
                  }
                  while (v4 < v14);
                  if (v4 == v14)
                  {
                    unsigned int v15 = *(v11 - 5);
                    if (v6 == -1) {
                      goto LABEL_31;
                    }
                    if (v6 < v15) {
                      goto LABEL_11;
                    }
                    if (v6 != v15)
                    {
LABEL_31:
                      if (v15 != -1 && (v15 < v6 || v15 == v6 && *(v11 - 4) < v7)) {
                        goto LABEL_3;
                      }
                    }
                    else
                    {
                      unsigned int v16 = *(v11 - 4);
                      if (v7 < v16) {
                        goto LABEL_11;
                      }
                      if (v16 < v7) {
                        goto LABEL_3;
                      }
                    }
                  }
                  else if (v14 < v4)
                  {
                    goto LABEL_3;
                  }
                  unsigned int v17 = *(v11 - 3);
                  if (v8 >= v17)
                  {
                    if (v8 != v17) {
                      goto LABEL_3;
                    }
                    unsigned int v18 = *(v11 - 2);
                    if (v9 >= v18 && (v9 != v18 || v10 >= *(v11 - 1))) {
                      goto LABEL_3;
                    }
                  }
                }
              }
              while (1)
              {
                do
                {
                  do
                  {
LABEL_35:
                    unsigned int v11 = v2;
                    *(_OWORD *)(v2 + 7) = *(_OWORD *)v2;
                    *(_OWORD *)(v2 + 10) = *(_OWORD *)(v2 + 3);
                    unsigned int v20 = *(v2 - 7);
                    v2 -= 7;
                    unsigned int v19 = v20;
                  }
                  while (v3 < v20);
                  if (v19 < v3)
                  {
LABEL_3:
                    *unsigned int v11 = v3;
                    v11[1] = v4;
                    v11[2] = v6;
                    v11[3] = v7;
                    v11[4] = v8;
                    v11[5] = v9;
                    v11[6] = v10;
                    goto LABEL_4;
                  }
                  unsigned int v21 = *(v11 - 6);
                }
                while (v4 < v21);
                if (v4 == v21)
                {
                  unsigned int v22 = *(v11 - 5);
                  if (v6 == -1) {
                    goto LABEL_48;
                  }
                  if (v6 < v22) {
                    goto LABEL_35;
                  }
                  if (v6 != v22)
                  {
LABEL_48:
                    if (v22 != -1 && (v22 < v6 || v22 == v6 && *(v11 - 4) < v7)) {
                      goto LABEL_3;
                    }
                  }
                  else
                  {
                    unsigned int v23 = *(v11 - 4);
                    if (v7 < v23) {
                      goto LABEL_35;
                    }
                    if (v23 < v7) {
                      goto LABEL_3;
                    }
                  }
                }
                else if (v21 < v4)
                {
                  goto LABEL_3;
                }
                if (v8 >= *(v11 - 3)) {
                  goto LABEL_3;
                }
              }
            }
            if (v30 == v31)
            {
              unsigned int v4 = v2[8];
              if (v2[13] < v2[6]) {
                goto LABEL_10;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_C308C8(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  unsigned int v3 = *a2;
  if (*a2 < *a1) {
    goto LABEL_7;
  }
  if (*a1 >= v3)
  {
    unsigned int v5 = a1[1];
    unsigned int v6 = a2[1];
    if (v6 < v5) {
      goto LABEL_7;
    }
    if (v6 != v5)
    {
      if (v5 < v6) {
        goto LABEL_3;
      }
      goto LABEL_48;
    }
    unsigned int v18 = a2[2];
    unsigned int v19 = a1[2];
    if (v18 == -1) {
      goto LABEL_45;
    }
    if (v18 < v19) {
      goto LABEL_7;
    }
    if (v18 != v19)
    {
LABEL_45:
      if (v19 == -1) {
        goto LABEL_48;
      }
      if (v19 < v18) {
        goto LABEL_3;
      }
      if (v19 != v18) {
        goto LABEL_48;
      }
      unsigned int v21 = a2[3];
      unsigned int v20 = a1[3];
    }
    else
    {
      unsigned int v20 = a1[3];
      unsigned int v21 = a2[3];
      if (v21 < v20) {
        goto LABEL_7;
      }
    }
    if (v20 < v21) {
      goto LABEL_3;
    }
LABEL_48:
    unsigned int v32 = a1[4];
    unsigned int v33 = a2[4];
    if (v33 >= v32)
    {
      if (v33 != v32) {
        goto LABEL_3;
      }
      unsigned int v34 = a2[5];
      if (v34 == -1) {
        goto LABEL_3;
      }
      unsigned int v35 = a1[5];
      if (v34 >= v35 && (v34 != v35 || a2[6] >= a1[6])) {
        goto LABEL_3;
      }
    }
LABEL_7:
    if (*(_DWORD *)a3 < v3)
    {
LABEL_8:
      *(_OWORD *)uint64_t v60 = *(_OWORD *)a1;
      *(_OWORD *)&v60[12] = *(_OWORD *)(a1 + 3);
      long long v7 = *(_OWORD *)(a3 + 12);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 3) = v7;
      *(_OWORD *)(a3 + 12) = *(_OWORD *)&v60[12];
      *(_OWORD *)a3 = *(_OWORD *)v60;
      return 1;
    }
    if (v3 < *(_DWORD *)a3)
    {
LABEL_11:
      *(_OWORD *)unint64_t v61 = *(_OWORD *)a1;
      *(_OWORD *)&v61[12] = *(_OWORD *)(a1 + 3);
      long long v8 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 3) = v8;
      *(_OWORD *)(a2 + 3) = *(_OWORD *)&v61[12];
      *(_OWORD *)a2 = *(_OWORD *)v61;
      if (*(_DWORD *)a3 < *a2) {
        goto LABEL_14;
      }
      if (*a2 < *(_DWORD *)a3) {
        return 1;
      }
      unsigned int v9 = a2[1];
      unsigned int v10 = *(_DWORD *)(a3 + 4);
      if (v10 < v9)
      {
LABEL_14:
        *(_OWORD *)uint64_t v62 = *(_OWORD *)a2;
        *(_OWORD *)&v62[12] = *(_OWORD *)(a2 + 3);
        long long v11 = *(_OWORD *)(a3 + 12);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 3) = v11;
        *(_OWORD *)(a3 + 12) = *(_OWORD *)&v62[12];
        *(_OWORD *)a3 = *(_OWORD *)v62;
        return 2;
      }
      if (v10 != v9)
      {
        if (v9 < v10) {
          return 1;
        }
        goto LABEL_93;
      }
      unsigned int v36 = *(_DWORD *)(a3 + 8);
      unsigned int v37 = a2[2];
      if (v36 == -1) {
        goto LABEL_90;
      }
      if (v36 < v37) {
        goto LABEL_14;
      }
      if (v36 != v37)
      {
LABEL_90:
        if (v37 == -1) {
          goto LABEL_93;
        }
        if (v37 < v36) {
          return 1;
        }
        if (v37 != v36) {
          goto LABEL_93;
        }
        unsigned int v39 = *(_DWORD *)(a3 + 12);
        unsigned int v38 = a2[3];
      }
      else
      {
        unsigned int v38 = a2[3];
        unsigned int v39 = *(_DWORD *)(a3 + 12);
        if (v39 < v38) {
          goto LABEL_14;
        }
      }
      if (v38 < v39) {
        return 1;
      }
LABEL_93:
      unsigned int v48 = a2[4];
      unsigned int v49 = *(_DWORD *)(a3 + 16);
      if (v49 >= v48)
      {
        if (v49 != v48) {
          return 1;
        }
        unsigned int v50 = *(_DWORD *)(a3 + 20);
        if (v50 == -1) {
          return 1;
        }
        unsigned int v51 = a2[5];
        if (v50 >= v51 && (v50 != v51 || *(_DWORD *)(a3 + 24) >= a2[6])) {
          return 1;
        }
      }
      goto LABEL_14;
    }
    unsigned int v12 = a2[1];
    unsigned int v13 = *(_DWORD *)(a3 + 4);
    if (v13 < v12) {
      goto LABEL_8;
    }
    if (v13 != v12)
    {
      if (v12 < v13) {
        goto LABEL_11;
      }
      goto LABEL_72;
    }
    unsigned int v14 = *(_DWORD *)(a3 + 8);
    unsigned int v15 = a2[2];
    if (v14 == -1) {
      goto LABEL_69;
    }
    if (v14 < v15) {
      goto LABEL_8;
    }
    if (v14 != v15)
    {
LABEL_69:
      if (v15 == -1) {
        goto LABEL_72;
      }
      if (v15 < v14) {
        goto LABEL_11;
      }
      if (v15 != v14) {
        goto LABEL_72;
      }
      unsigned int v17 = *(_DWORD *)(a3 + 12);
      unsigned int v16 = a2[3];
    }
    else
    {
      unsigned int v16 = a2[3];
      unsigned int v17 = *(_DWORD *)(a3 + 12);
      if (v17 < v16) {
        goto LABEL_8;
      }
    }
    if (v16 < v17) {
      goto LABEL_11;
    }
LABEL_72:
    unsigned int v44 = a2[4];
    unsigned int v45 = *(_DWORD *)(a3 + 16);
    if (v45 < v44) {
      goto LABEL_8;
    }
    if (v45 == v44)
    {
      unsigned int v46 = *(_DWORD *)(a3 + 20);
      if (v46 != -1)
      {
        unsigned int v47 = a2[5];
        if (v46 < v47 || v46 == v47 && *(_DWORD *)(a3 + 24) < a2[6]) {
          goto LABEL_8;
        }
      }
    }
    goto LABEL_11;
  }
LABEL_3:
  if (*(_DWORD *)a3 < v3) {
    goto LABEL_29;
  }
  if (v3 < *(_DWORD *)a3) {
    return 0;
  }
  unsigned int v22 = a2[1];
  unsigned int v23 = *(_DWORD *)(a3 + 4);
  if (v23 < v22)
  {
LABEL_29:
    *(_OWORD *)unint64_t v63 = *(_OWORD *)a2;
    *(_OWORD *)&v63[12] = *(_OWORD *)(a2 + 3);
    long long v24 = *(_OWORD *)(a3 + 12);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)(a2 + 3) = v24;
    *(_OWORD *)(a3 + 12) = *(_OWORD *)&v63[12];
    *(_OWORD *)a3 = *(_OWORD *)v63;
    if (*a2 < *a1)
    {
LABEL_32:
      *(_OWORD *)unint64_t v64 = *(_OWORD *)a1;
      *(_OWORD *)&v64[12] = *(_OWORD *)(a1 + 3);
      long long v27 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 3) = v27;
      *(_OWORD *)(a2 + 3) = *(_OWORD *)&v64[12];
      *(_OWORD *)a2 = *(_OWORD *)v64;
      return 2;
    }
    if (*a1 < *a2) {
      return 1;
    }
    unsigned int v25 = a1[1];
    unsigned int v26 = a2[1];
    if (v26 < v25) {
      goto LABEL_32;
    }
    if (v26 != v25)
    {
      if (v25 < v26) {
        return 1;
      }
      goto LABEL_105;
    }
    unsigned int v40 = a2[2];
    unsigned int v41 = a1[2];
    if (v40 == -1) {
      goto LABEL_102;
    }
    if (v40 < v41) {
      goto LABEL_32;
    }
    if (v40 != v41)
    {
LABEL_102:
      if (v41 == -1) {
        goto LABEL_105;
      }
      if (v41 < v40) {
        return 1;
      }
      if (v41 != v40) {
        goto LABEL_105;
      }
      unsigned int v43 = a2[3];
      unsigned int v42 = a1[3];
    }
    else
    {
      unsigned int v42 = a1[3];
      unsigned int v43 = a2[3];
      if (v43 < v42) {
        goto LABEL_32;
      }
    }
    if (v42 < v43) {
      return 1;
    }
LABEL_105:
    unsigned int v52 = a1[4];
    unsigned int v53 = a2[4];
    if (v53 < v52) {
      goto LABEL_32;
    }
    if (v53 == v52)
    {
      unsigned int v54 = a2[5];
      if (v54 != -1)
      {
        unsigned int v55 = a1[5];
        if (v54 < v55 || v54 == v55 && a2[6] < a1[6]) {
          goto LABEL_32;
        }
      }
    }
    return 1;
  }
  if (v23 != v22)
  {
    if (v22 < v23) {
      return 0;
    }
    goto LABEL_115;
  }
  unsigned int v28 = *(_DWORD *)(a3 + 8);
  unsigned int v29 = a2[2];
  if (v28 == -1) {
    goto LABEL_112;
  }
  if (v28 < v29) {
    goto LABEL_29;
  }
  if (v28 != v29)
  {
LABEL_112:
    if (v29 == -1) {
      goto LABEL_115;
    }
    if (v29 < v28) {
      return 0;
    }
    if (v29 != v28) {
      goto LABEL_115;
    }
    unsigned int v31 = *(_DWORD *)(a3 + 12);
    unsigned int v30 = a2[3];
  }
  else
  {
    unsigned int v30 = a2[3];
    unsigned int v31 = *(_DWORD *)(a3 + 12);
    if (v31 < v30) {
      goto LABEL_29;
    }
  }
  if (v30 >= v31)
  {
LABEL_115:
    unsigned int v56 = a2[4];
    unsigned int v57 = *(_DWORD *)(a3 + 16);
    if (v57 < v56) {
      goto LABEL_29;
    }
    if (v57 == v56)
    {
      unsigned int v58 = *(_DWORD *)(a3 + 20);
      if (v58 != -1)
      {
        unsigned int v59 = a2[5];
        if (v58 < v59 || v58 == v59 && *(_DWORD *)(a3 + 24) < a2[6]) {
          goto LABEL_29;
        }
      }
    }
  }
  return 0;
}

unsigned int *sub_C30E10(unsigned int *a1, unint64_t a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = a1[1];
  unsigned int v4 = a1[2];
  unsigned int v5 = a1[3];
  unsigned int v6 = a1[4];
  unsigned int v7 = a1[5];
  unsigned int v8 = a1[6];
  unsigned int v9 = *(_DWORD *)(a2 - 28);
  if (*a1 < v9) {
    goto LABEL_2;
  }
  if (v9 < v2) {
    goto LABEL_27;
  }
  unsigned int v46 = *(_DWORD *)(a2 - 24);
  if (v3 < v46) {
    goto LABEL_2;
  }
  if (v3 == v46)
  {
    unsigned int v47 = *(_DWORD *)(a2 - 20);
    if (v4 == -1) {
      goto LABEL_139;
    }
    if (v4 < v47) {
      goto LABEL_2;
    }
    if (v4 != v47)
    {
LABEL_139:
      if (v47 == -1) {
        goto LABEL_142;
      }
      if (v47 < v4) {
        goto LABEL_27;
      }
      if (v47 != v4)
      {
LABEL_142:
        unsigned int v49 = *(_DWORD *)(a2 - 12);
        if (v6 >= v49)
        {
          if (v6 != v49) {
            goto LABEL_27;
          }
          if (v7 == -1) {
            goto LABEL_27;
          }
          unsigned int v50 = *(_DWORD *)(a2 - 8);
          if (v7 >= v50 && (v7 != v50 || v8 >= *(_DWORD *)(a2 - 4))) {
            goto LABEL_27;
          }
        }
LABEL_2:
        uint64_t i = a1;
        while (1)
        {
          while (1)
          {
            do
            {
              unsigned int v12 = i[7];
              i += 7;
              unsigned int v11 = v12;
              if (v2 < v12) {
                goto LABEL_52;
              }
            }
            while (v11 < v2);
            unsigned int v13 = i[1];
            if (v3 < v13) {
              goto LABEL_52;
            }
            if (v3 != v13) {
              break;
            }
            unsigned int v14 = i[2];
            if (v4 == -1) {
              goto LABEL_18;
            }
            if (v4 < v14) {
              goto LABEL_52;
            }
            if (v4 != v14)
            {
LABEL_18:
              if (v14 == -1 || v14 >= v4 && (v14 != v4 || i[3] >= v5)) {
                goto LABEL_19;
              }
            }
            else
            {
              unsigned int v15 = i[3];
              if (v5 < v15) {
                goto LABEL_52;
              }
              if (v15 >= v5) {
                goto LABEL_19;
              }
            }
          }
          if (v13 >= v3)
          {
LABEL_19:
            unsigned int v16 = i[4];
            if (v6 < v16) {
              goto LABEL_52;
            }
            if (v6 == v16 && v7 != -1)
            {
              unsigned int v17 = i[5];
              if (v7 < v17 || v7 == v17 && v8 < i[6]) {
                goto LABEL_52;
              }
            }
          }
        }
      }
      unsigned int v48 = *(_DWORD *)(a2 - 16);
    }
    else
    {
      unsigned int v48 = *(_DWORD *)(a2 - 16);
      if (v5 < v48) {
        goto LABEL_2;
      }
    }
    if (v48 >= v5) {
      goto LABEL_142;
    }
  }
  else if (v46 >= v3)
  {
    goto LABEL_142;
  }
LABEL_27:
  for (uint64_t i = a1 + 7; (unint64_t)i < a2 && v2 >= *i; i += 7)
  {
    if (*i < v2) {
      continue;
    }
    unsigned int v18 = i[1];
    if (v3 < v18) {
      break;
    }
    if (v3 == v18)
    {
      unsigned int v19 = i[2];
      if (v4 == -1) {
        goto LABEL_45;
      }
      if (v4 < v19) {
        break;
      }
      if (v4 != v19)
      {
LABEL_45:
        if (v19 != -1 && (v19 < v4 || v19 == v4 && i[3] < v5)) {
          continue;
        }
      }
      else
      {
        unsigned int v20 = i[3];
        if (v5 < v20) {
          break;
        }
        if (v20 < v5) {
          continue;
        }
      }
    }
    else if (v18 < v3)
    {
      continue;
    }
    unsigned int v21 = i[4];
    if (v6 < v21) {
      break;
    }
    if (v6 == v21 && v7 != -1)
    {
      unsigned int v22 = i[5];
      if (v7 < v22 || v7 == v22 && v8 < i[6]) {
        break;
      }
    }
  }
LABEL_52:
  if ((unint64_t)i < a2)
  {
    a2 -= 28;
    while (2)
    {
      if (v2 < v9) {
        goto LABEL_54;
      }
      if (v9 < v2) {
        goto LABEL_124;
      }
      unsigned int v24 = *(_DWORD *)(a2 + 4);
      if (v3 < v24) {
        goto LABEL_54;
      }
      if (v3 == v24)
      {
        unsigned int v25 = *(_DWORD *)(a2 + 8);
        if (v4 != -1)
        {
          if (v4 < v25) {
            goto LABEL_54;
          }
          if (v4 == v25)
          {
            unsigned int v26 = *(_DWORD *)(a2 + 12);
            if (v5 >= v26) {
              goto LABEL_76;
            }
LABEL_54:
            unsigned int v23 = *(_DWORD *)(a2 - 28);
            a2 -= 28;
            unsigned int v9 = v23;
            continue;
          }
        }
        if (v25 != -1)
        {
          if (v25 < v4) {
            goto LABEL_124;
          }
          if (v25 == v4)
          {
            unsigned int v26 = *(_DWORD *)(a2 + 12);
LABEL_76:
            if (v26 < v5) {
              goto LABEL_124;
            }
          }
        }
      }
      else if (v24 < v3)
      {
        goto LABEL_124;
      }
      break;
    }
    unsigned int v27 = *(_DWORD *)(a2 + 16);
    if (v6 >= v27)
    {
      if (v6 != v27) {
        goto LABEL_124;
      }
      if (v7 == -1) {
        goto LABEL_124;
      }
      unsigned int v28 = *(_DWORD *)(a2 + 20);
      if (v7 >= v28 && (v7 != v28 || v8 >= *(_DWORD *)(a2 + 24))) {
        goto LABEL_124;
      }
    }
    goto LABEL_54;
  }
LABEL_124:
  if ((unint64_t)i < a2)
  {
    *(_OWORD *)&v51[12] = *(_OWORD *)(i + 3);
    *(_OWORD *)unsigned int v51 = *(_OWORD *)i;
    long long v29 = *(_OWORD *)a2;
    *(_OWORD *)(i + 3) = *(_OWORD *)(a2 + 12);
    *(_OWORD *)uint64_t i = v29;
    *(_OWORD *)(a2 + 12) = *(_OWORD *)&v51[12];
    *(_OWORD *)a2 = *(_OWORD *)v51;
    while (1)
    {
      do
      {
        unsigned int v31 = i[7];
        i += 7;
        unsigned int v30 = v31;
        if (v2 < v31) {
          goto LABEL_107;
        }
      }
      while (v30 < v2);
      unsigned int v32 = i[1];
      if (v3 < v32) {
        break;
      }
      if (v3 == v32)
      {
        unsigned int v33 = i[2];
        if (v4 == -1) {
          goto LABEL_94;
        }
        if (v4 < v33) {
          goto LABEL_107;
        }
        if (v4 != v33)
        {
LABEL_94:
          if (v33 == -1 || v33 >= v4 && (v33 != v4 || i[3] >= v5)) {
            goto LABEL_95;
          }
        }
        else
        {
          unsigned int v34 = i[3];
          if (v5 < v34) {
            goto LABEL_107;
          }
          if (v34 >= v5)
          {
LABEL_95:
            unsigned int v35 = i[4];
            if (v6 < v35) {
              goto LABEL_107;
            }
            if (v6 == v35 && v7 != -1)
            {
              unsigned int v36 = i[5];
              if (v7 < v36 || v7 == v36 && v8 < i[6]) {
                goto LABEL_107;
              }
            }
          }
        }
      }
      else if (v32 >= v3)
      {
        goto LABEL_95;
      }
    }
    while (1)
    {
      do
      {
        do
        {
LABEL_107:
          unsigned int v38 = *(_DWORD *)(a2 - 28);
          a2 -= 28;
          unsigned int v37 = v38;
        }
        while (v2 < v38);
        if (v37 < v2) {
          goto LABEL_124;
        }
        unsigned int v39 = *(_DWORD *)(a2 + 4);
      }
      while (v3 < v39);
      if (v3 != v39)
      {
        if (v39 < v3) {
          goto LABEL_124;
        }
        goto LABEL_118;
      }
      unsigned int v40 = *(_DWORD *)(a2 + 8);
      if (v4 == -1) {
        goto LABEL_102;
      }
      if (v4 >= v40)
      {
        if (v4 == v40)
        {
          unsigned int v41 = *(_DWORD *)(a2 + 12);
          if (v5 >= v41)
          {
            if (v41 < v5) {
              goto LABEL_124;
            }
            goto LABEL_118;
          }
        }
        else
        {
LABEL_102:
          if (v40 != -1 && (v40 < v4 || v40 == v4 && *(_DWORD *)(a2 + 12) < v5)) {
            goto LABEL_124;
          }
LABEL_118:
          unsigned int v42 = *(_DWORD *)(a2 + 16);
          if (v6 >= v42)
          {
            if (v6 != v42) {
              goto LABEL_124;
            }
            if (v7 == -1) {
              goto LABEL_124;
            }
            unsigned int v43 = *(_DWORD *)(a2 + 20);
            if (v7 >= v43 && (v7 != v43 || v8 >= *(_DWORD *)(a2 + 24))) {
              goto LABEL_124;
            }
          }
        }
      }
    }
  }
  if (i - 7 != a1)
  {
    long long v44 = *(_OWORD *)(i - 7);
    *(_OWORD *)(a1 + 3) = *((_OWORD *)i - 1);
    *(_OWORD *)a1 = v44;
  }
  *(i - 7) = v2;
  *(i - 6) = v3;
  *(i - 5) = v4;
  *(i - 4) = v5;
  *(i - 3) = v6;
  *(i - 2) = v7;
  *(i - 1) = v8;
  return i;
}

unint64_t sub_C312F4(_DWORD *a1, _DWORD *a2)
{
  uint64_t v2 = 0;
  unsigned int v3 = *a1;
  unsigned int v4 = a1[1];
  unsigned int v5 = a1[2];
  unsigned int v6 = a1[3];
  unsigned int v7 = a1[4];
  unsigned int v8 = a1[5];
  unsigned int v9 = a1[6];
  while (1)
  {
    unsigned int v10 = &a1[v2];
    unsigned int v11 = a1[v2 + 7];
    if (v11 >= v3)
    {
      if (v3 < v11) {
        goto LABEL_25;
      }
      unsigned int v12 = v10[8];
      if (v12 >= v4) {
        break;
      }
    }
LABEL_2:
    v2 += 7;
  }
  if (v12 != v4)
  {
    if (v4 < v12) {
      goto LABEL_25;
    }
    goto LABEL_13;
  }
  unsigned int v13 = a1[v2 + 9];
  if (v13 == -1) {
    goto LABEL_22;
  }
  if (v13 < v5) {
    goto LABEL_2;
  }
  if (v13 != v5)
  {
LABEL_22:
    if (v5 == -1) {
      goto LABEL_13;
    }
    if (v5 < v13) {
      goto LABEL_25;
    }
    if (v5 != v13) {
      goto LABEL_13;
    }
    unsigned int v14 = a1[v2 + 10];
  }
  else
  {
    unsigned int v14 = a1[v2 + 10];
    if (v14 < v6) {
      goto LABEL_2;
    }
  }
  if (v6 < v14) {
    goto LABEL_25;
  }
LABEL_13:
  unsigned int v15 = v10[11];
  if (v15 < v7) {
    goto LABEL_2;
  }
  if (v15 == v7)
  {
    unsigned int v16 = a1[v2 + 12];
    if (v16 != -1 && (v16 < v8 || v16 == v8 && a1[v2 + 13] < v9)) {
      goto LABEL_2;
    }
  }
LABEL_25:
  unint64_t v17 = (unint64_t)&a1[v2 + 7];
  if (v2 * 4)
  {
    while (1)
    {
      while (1)
      {
        do
        {
          unsigned int v19 = *(a2 - 7);
          a2 -= 7;
          unsigned int v18 = v19;
          if (v19 < v3) {
            goto LABEL_72;
          }
        }
        while (v3 < v18);
        unsigned int v20 = a2[1];
        if (v20 < v4) {
          goto LABEL_72;
        }
        if (v20 != v4) {
          break;
        }
        unsigned int v21 = a2[2];
        if (v21 == -1) {
          goto LABEL_41;
        }
        if (v21 < v5) {
          goto LABEL_72;
        }
        if (v21 != v5)
        {
LABEL_41:
          if (v5 == -1 || v5 >= v21 && (v5 != v21 || v6 >= a2[3])) {
            goto LABEL_42;
          }
        }
        else
        {
          unsigned int v22 = a2[3];
          if (v22 < v6) {
            goto LABEL_72;
          }
          if (v6 >= v22) {
            goto LABEL_42;
          }
        }
      }
      if (v4 >= v20)
      {
LABEL_42:
        unsigned int v23 = a2[4];
        if (v23 < v7) {
          goto LABEL_72;
        }
        if (v23 == v7)
        {
          unsigned int v24 = a2[5];
          if (v24 != -1 && (v24 < v8 || v24 == v8 && a2[6] < v9)) {
            goto LABEL_72;
          }
        }
      }
    }
  }
  while (v17 < (unint64_t)a2)
  {
    unsigned int v26 = *(a2 - 7);
    a2 -= 7;
    unsigned int v25 = v26;
    if (v26 < v3) {
      break;
    }
    if (v3 < v25) {
      continue;
    }
    unsigned int v27 = a2[1];
    if (v27 < v4) {
      break;
    }
    if (v27 == v4)
    {
      unsigned int v28 = a2[2];
      if (v28 == -1) {
        goto LABEL_64;
      }
      if (v28 < v5) {
        break;
      }
      if (v28 != v5)
      {
LABEL_64:
        if (v5 != -1 && (v5 < v28 || v5 == v28 && v6 < a2[3])) {
          continue;
        }
      }
      else
      {
        unsigned int v29 = a2[3];
        if (v29 < v6) {
          break;
        }
        if (v6 < v29) {
          continue;
        }
      }
    }
    else if (v4 < v27)
    {
      continue;
    }
    unsigned int v30 = a2[4];
    if (v30 >= v7)
    {
      if (v30 != v7) {
        continue;
      }
      unsigned int v31 = a2[5];
      if (v31 == -1 || v31 >= v8 && (v31 != v8 || a2[6] >= v9)) {
        continue;
      }
    }
    break;
  }
LABEL_72:
  unint64_t v32 = v17;
  if (v17 < (unint64_t)a2)
  {
    unsigned int v33 = a2;
    do
    {
      *(_OWORD *)&v51[12] = *(_OWORD *)(v32 + 12);
      *(_OWORD *)unsigned int v51 = *(_OWORD *)v32;
      long long v34 = *(_OWORD *)v33;
      *(_OWORD *)(v32 + 12) = *(_OWORD *)(v33 + 3);
      *(_OWORD *)unint64_t v32 = v34;
      *(_OWORD *)(v33 + 3) = *(_OWORD *)&v51[12];
      *(_OWORD *)unsigned int v33 = *(_OWORD *)v51;
      while (1)
      {
        do
        {
          unsigned int v36 = *(_DWORD *)(v32 + 28);
          v32 += 28;
          unsigned int v35 = v36;
        }
        while (v36 < v3);
        if (v3 < v35) {
          break;
        }
        unsigned int v37 = *(_DWORD *)(v32 + 4);
        if (v37 >= v4)
        {
          if (v37 != v4)
          {
            if (v4 < v37) {
              break;
            }
            goto LABEL_87;
          }
          unsigned int v38 = *(_DWORD *)(v32 + 8);
          if (v38 == -1)
          {
LABEL_94:
            if (v5 != -1 && (v5 < v38 || v5 == v38 && v6 < *(_DWORD *)(v32 + 12))) {
              break;
            }
LABEL_87:
            unsigned int v40 = *(_DWORD *)(v32 + 16);
            if (v40 >= v7)
            {
              if (v40 != v7) {
                break;
              }
              unsigned int v41 = *(_DWORD *)(v32 + 20);
              if (v41 == -1 || v41 >= v8 && (v41 != v8 || *(_DWORD *)(v32 + 24) >= v9)) {
                break;
              }
            }
          }
          else if (v38 >= v5)
          {
            if (v38 != v5) {
              goto LABEL_94;
            }
            unsigned int v39 = *(_DWORD *)(v32 + 12);
            if (v39 >= v6)
            {
              if (v6 < v39) {
                break;
              }
              goto LABEL_87;
            }
          }
        }
      }
      while (1)
      {
        unsigned int v43 = *(v33 - 7);
        v33 -= 7;
        unsigned int v42 = v43;
        if (v43 < v3) {
          break;
        }
        if (v3 < v42) {
          continue;
        }
        unsigned int v44 = v33[1];
        if (v44 < v4) {
          break;
        }
        if (v44 == v4)
        {
          unsigned int v45 = v33[2];
          if (v45 == -1) {
            goto LABEL_113;
          }
          if (v45 < v5) {
            break;
          }
          if (v45 != v5)
          {
LABEL_113:
            if (v5 != -1 && (v5 < v45 || v5 == v45 && v6 < v33[3])) {
              continue;
            }
          }
          else
          {
            unsigned int v46 = v33[3];
            if (v46 < v6) {
              break;
            }
            if (v6 < v46) {
              continue;
            }
          }
        }
        else if (v4 < v44)
        {
          continue;
        }
        unsigned int v47 = v33[4];
        if (v47 >= v7)
        {
          if (v47 != v7) {
            continue;
          }
          unsigned int v48 = v33[5];
          if (v48 == -1 || v48 >= v8 && (v48 != v8 || v33[6] >= v9)) {
            continue;
          }
        }
        break;
      }
    }
    while (v32 < (unint64_t)v33);
  }
  if ((_DWORD *)(v32 - 28) != a1)
  {
    long long v49 = *(_OWORD *)(v32 - 28);
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(v32 - 16);
    *(_OWORD *)a1 = v49;
  }
  *(_DWORD *)(v32 - 28) = v3;
  *(_DWORD *)(v32 - 24) = v4;
  *(_DWORD *)(v32 - 20) = v5;
  *(_DWORD *)(v32 - 16) = v6;
  *(_DWORD *)(v32 - 12) = v7;
  *(_DWORD *)(v32 - 8) = v8;
  *(_DWORD *)(v32 - 4) = v9;
  return v32 - 28;
}

BOOL sub_C31750(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v40 = a2 - 7;
      unsigned int v41 = *(a2 - 7);
      if (v41 < *a1) {
        goto LABEL_81;
      }
      if (*a1 < v41) {
        return result;
      }
      unsigned int v42 = a1[1];
      unsigned int v43 = *(a2 - 6);
      if (v43 < v42) {
        goto LABEL_81;
      }
      if (v43 == v42)
      {
        unsigned int v45 = *(a2 - 5);
        unsigned int v46 = a1[2];
        if (v45 == -1) {
          goto LABEL_97;
        }
        if (v45 < v46) {
          goto LABEL_81;
        }
        if (v45 != v46)
        {
LABEL_97:
          if (v46 == -1) {
            goto LABEL_100;
          }
          if (v46 < v45) {
            return result;
          }
          if (v46 != v45) {
            goto LABEL_100;
          }
          unsigned int v48 = *(a2 - 4);
          unsigned int v47 = a1[3];
        }
        else
        {
          unsigned int v47 = a1[3];
          unsigned int v48 = *(a2 - 4);
          if (v48 < v47) {
            goto LABEL_81;
          }
        }
        if (v47 < v48) {
          return result;
        }
      }
      else if (v42 < v43)
      {
        return result;
      }
LABEL_100:
      unsigned int v49 = a1[4];
      unsigned int v50 = *(a2 - 3);
      if (v50 >= v49)
      {
        if (v50 != v49) {
          return result;
        }
        unsigned int v51 = *(a2 - 2);
        if (v51 == -1) {
          return result;
        }
        unsigned int v52 = a1[5];
        if (v51 >= v52 && (v51 != v52 || *(a2 - 1) >= a1[6])) {
          return result;
        }
      }
LABEL_81:
      *(_OWORD *)unsigned int v53 = *(_OWORD *)a1;
      *(_OWORD *)&v53[12] = *(_OWORD *)(a1 + 3);
      long long v44 = *((_OWORD *)a2 - 1);
      *(_OWORD *)a1 = *(_OWORD *)v40;
      *(_OWORD *)(a1 + 3) = v44;
      *((_OWORD *)a2 - 1) = *(_OWORD *)&v53[12];
      *(_OWORD *)unsigned int v40 = *(_OWORD *)v53;
      return result;
    case 3:
      sub_C308C8(a1, a1 + 7, (uint64_t)(a2 - 7));
      return 1;
    case 4:
      sub_C31CE0(a1, a1 + 7, a1 + 14, a2 - 7);
      return 1;
    case 5:
      sub_C32038(a1, a1 + 7, a1 + 14, a1 + 21, a2 - 7);
      return 1;
    default:
      unsigned int v6 = a1 + 14;
      sub_C308C8(a1, a1 + 7, (uint64_t)(a1 + 14));
      unsigned int v7 = a1 + 21;
      if (a1 + 21 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
LABEL_8:
      unsigned int v11 = *v7;
      if (*v7 < *v6)
      {
        unsigned int v12 = v7[1];
        goto LABEL_13;
      }
      if (*v6 < v11) {
        goto LABEL_7;
      }
      unsigned int v12 = v6[1];
      unsigned int v13 = v7[1];
      if (v13 < v12) {
        goto LABEL_12;
      }
      if (v13 != v12)
      {
        if (v12 < v13) {
          goto LABEL_7;
        }
        goto LABEL_71;
      }
      unsigned int v32 = v7[2];
      unsigned int v33 = v6[2];
      if (v32 == -1) {
        goto LABEL_68;
      }
      if (v32 < v33) {
        goto LABEL_13;
      }
      if (v32 != v33)
      {
LABEL_68:
        if (v33 == -1) {
          goto LABEL_71;
        }
        if (v33 < v32) {
          goto LABEL_7;
        }
        if (v33 != v32) {
          goto LABEL_71;
        }
        unsigned int v35 = v7[3];
        unsigned int v34 = v6[3];
      }
      else
      {
        unsigned int v34 = v6[3];
        unsigned int v35 = v7[3];
        if (v35 < v34) {
          goto LABEL_13;
        }
      }
      if (v34 < v35) {
        goto LABEL_7;
      }
LABEL_71:
      unsigned int v36 = v6[4];
      unsigned int v37 = v7[4];
      if (v37 < v36) {
        goto LABEL_12;
      }
      if (v37 != v36) {
        goto LABEL_7;
      }
      unsigned int v38 = v7[5];
      if (v38 == -1) {
        goto LABEL_7;
      }
      unsigned int v39 = v6[5];
      if (v38 < v39)
      {
LABEL_12:
        unsigned int v12 = v7[1];
      }
      else
      {
        if (v38 != v39) {
          goto LABEL_7;
        }
        unsigned int v12 = v7[1];
        if (v7[6] >= v6[6]) {
          goto LABEL_7;
        }
      }
LABEL_13:
      unsigned int v14 = v7[2];
      unsigned int v15 = v7[3];
      unsigned int v16 = v7[4];
      unsigned int v17 = v7[5];
      unsigned int v18 = v7[6];
      *(_OWORD *)unsigned int v7 = *(_OWORD *)v6;
      *(_OWORD *)(v7 + 3) = *(_OWORD *)(v6 + 3);
      unsigned int v10 = a1;
      if (v6 == a1) {
        goto LABEL_6;
      }
      uint64_t v19 = v8;
      if (v17 == -1)
      {
        while (1)
        {
          unsigned int v27 = (char *)a1 + v19;
          unsigned int v28 = *(unsigned int *)((char *)a1 + v19 + 28);
          if (v11 >= v28)
          {
            if (v28 < v11) {
              goto LABEL_63;
            }
            unsigned int v29 = *((_DWORD *)v27 + 8);
            if (v12 >= v29)
            {
              if (v12 != v29)
              {
                if (v29 < v12) {
                  goto LABEL_56;
                }
LABEL_40:
                if (v16 >= *((_DWORD *)v27 + 11)) {
                  goto LABEL_56;
                }
                goto LABEL_41;
              }
              unsigned int v30 = *(unsigned int *)((char *)a1 + v19 + 36);
              if (v14 == -1) {
                goto LABEL_52;
              }
              if (v14 >= v30)
              {
                if (v14 != v30)
                {
LABEL_52:
                  if (v30 != -1 && (v30 < v14 || v30 == v14 && *(unsigned int *)((char *)a1 + v19 + 40) < v15)) {
                    goto LABEL_56;
                  }
                  goto LABEL_40;
                }
                unsigned int v31 = *(unsigned int *)((char *)a1 + v19 + 40);
                if (v15 >= v31)
                {
                  if (v31 < v15) {
                    goto LABEL_56;
                  }
                  goto LABEL_40;
                }
              }
            }
          }
LABEL_41:
          v6 -= 7;
          *(_OWORD *)(v27 + 56) = *(_OWORD *)((char *)a1 + v19 + 28);
          *(_OWORD *)(v27 + 68) = *(_OWORD *)((char *)a1 + v19 + 40);
          v19 -= 28;
          if (v19 == -56) {
            goto LABEL_5;
          }
        }
      }
      break;
  }
  while (1)
  {
    unsigned int v20 = (char *)a1 + v19;
    unsigned int v21 = *(unsigned int *)((char *)a1 + v19 + 28);
    if (v11 < v21) {
      goto LABEL_16;
    }
    if (v21 < v11) {
      break;
    }
    unsigned int v22 = *((_DWORD *)v20 + 8);
    if (v12 < v22) {
      goto LABEL_16;
    }
    if (v12 != v22)
    {
      if (v22 < v12) {
        goto LABEL_56;
      }
      goto LABEL_27;
    }
    unsigned int v23 = *(unsigned int *)((char *)a1 + v19 + 36);
    if (v14 == -1) {
      goto LABEL_35;
    }
    if (v14 < v23) {
      goto LABEL_16;
    }
    if (v14 != v23)
    {
LABEL_35:
      if (v23 == -1) {
        goto LABEL_27;
      }
      if (v23 < v14) {
        goto LABEL_56;
      }
      if (v23 != v14) {
        goto LABEL_27;
      }
      unsigned int v24 = *(unsigned int *)((char *)a1 + v19 + 40);
    }
    else
    {
      unsigned int v24 = *(unsigned int *)((char *)a1 + v19 + 40);
      if (v15 < v24) {
        goto LABEL_16;
      }
    }
    if (v24 < v15) {
      goto LABEL_56;
    }
LABEL_27:
    unsigned int v25 = *((_DWORD *)v20 + 11);
    if (v16 >= v25)
    {
      if (v16 != v25
        || (unsigned int v26 = *(unsigned int *)((char *)a1 + v19 + 48), v17 >= v26)
        && (v17 != v26 || v18 >= *(unsigned int *)((char *)a1 + v19 + 52)))
      {
LABEL_56:
        unsigned int v10 = v6;
        goto LABEL_6;
      }
    }
LABEL_16:
    v6 -= 7;
    *(_OWORD *)(v20 + 56) = *(_OWORD *)((char *)a1 + v19 + 28);
    *(_OWORD *)(v20 + 68) = *(_OWORD *)((char *)a1 + v19 + 40);
    v19 -= 28;
    if (v19 == -56)
    {
LABEL_5:
      unsigned int v10 = a1;
      goto LABEL_6;
    }
  }
LABEL_63:
  unsigned int v10 = (unsigned int *)((char *)a1 + v19 + 56);
LABEL_6:
  *unsigned int v10 = v11;
  v10[1] = v12;
  v10[2] = v14;
  v10[3] = v15;
  _OWORD v10[4] = v16;
  v10[5] = v17;
  ++v9;
  v10[6] = v18;
  if (v9 == 8) {
    return v7 + 7 == a2;
  }
LABEL_7:
  unsigned int v6 = v7;
  v8 += 28;
  v7 += 7;
  if (v7 != a2) {
    goto LABEL_8;
  }
  return 1;
}

uint64_t sub_C31CE0(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result = sub_C308C8(a1, a2, (uint64_t)a3);
  if (*a4 < *a3) {
    goto LABEL_2;
  }
  if (*a3 < *a4) {
    return result;
  }
  unsigned int v14 = a3[1];
  unsigned int v15 = a4[1];
  if (v15 < v14) {
    goto LABEL_2;
  }
  if (v15 != v14)
  {
    if (v14 < v15) {
      return result;
    }
    goto LABEL_39;
  }
  unsigned int v16 = a4[2];
  unsigned int v17 = a3[2];
  if (v16 == -1) {
    goto LABEL_36;
  }
  if (v16 < v17) {
    goto LABEL_2;
  }
  if (v16 != v17)
  {
LABEL_36:
    if (v17 == -1) {
      goto LABEL_39;
    }
    if (v17 < v16) {
      return result;
    }
    if (v17 != v16) {
      goto LABEL_39;
    }
    unsigned int v19 = a4[3];
    unsigned int v18 = a3[3];
  }
  else
  {
    unsigned int v18 = a3[3];
    unsigned int v19 = a4[3];
    if (v19 < v18) {
      goto LABEL_2;
    }
  }
  if (v18 < v19) {
    return result;
  }
LABEL_39:
  unsigned int v30 = a3[4];
  unsigned int v31 = a4[4];
  if (v31 >= v30)
  {
    if (v31 != v30) {
      return result;
    }
    unsigned int v32 = a4[5];
    if (v32 == -1) {
      return result;
    }
    unsigned int v33 = a3[5];
    if (v32 >= v33 && (v32 != v33 || a4[6] >= a3[6])) {
      return result;
    }
  }
LABEL_2:
  *(_OWORD *)unsigned int v42 = *(_OWORD *)a3;
  *(_OWORD *)&v42[12] = *(_OWORD *)(a3 + 3);
  long long v9 = *(_OWORD *)(a4 + 3);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_OWORD *)(a3 + 3) = v9;
  *(_OWORD *)(a4 + 3) = *(_OWORD *)&v42[12];
  *(_OWORD *)a4 = *(_OWORD *)v42;
  if (*a3 < *a2) {
    goto LABEL_3;
  }
  if (*a2 < *a3) {
    return result;
  }
  unsigned int v20 = a2[1];
  unsigned int v21 = a3[1];
  if (v21 < v20) {
    goto LABEL_3;
  }
  if (v21 != v20)
  {
    if (v20 < v21) {
      return result;
    }
    goto LABEL_53;
  }
  unsigned int v22 = a3[2];
  unsigned int v23 = a2[2];
  if (v22 == -1) {
    goto LABEL_50;
  }
  if (v22 < v23) {
    goto LABEL_3;
  }
  if (v22 != v23)
  {
LABEL_50:
    if (v23 == -1) {
      goto LABEL_53;
    }
    if (v23 < v22) {
      return result;
    }
    if (v23 != v22) {
      goto LABEL_53;
    }
    unsigned int v25 = a3[3];
    unsigned int v24 = a2[3];
  }
  else
  {
    unsigned int v24 = a2[3];
    unsigned int v25 = a3[3];
    if (v25 < v24) {
      goto LABEL_3;
    }
  }
  if (v24 < v25) {
    return result;
  }
LABEL_53:
  unsigned int v34 = a2[4];
  unsigned int v35 = a3[4];
  if (v35 >= v34)
  {
    if (v35 != v34) {
      return result;
    }
    unsigned int v36 = a3[5];
    if (v36 == -1) {
      return result;
    }
    unsigned int v37 = a2[5];
    if (v36 >= v37 && (v36 != v37 || a3[6] >= a2[6])) {
      return result;
    }
  }
LABEL_3:
  *(_OWORD *)unsigned int v43 = *(_OWORD *)a2;
  *(_OWORD *)&v43[12] = *(_OWORD *)(a2 + 3);
  long long v10 = *(_OWORD *)(a3 + 3);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 3) = v10;
  *(_OWORD *)(a3 + 3) = *(_OWORD *)&v43[12];
  *(_OWORD *)a3 = *(_OWORD *)v43;
  if (*a2 < *a1)
  {
LABEL_6:
    *(_OWORD *)long long v44 = *(_OWORD *)a1;
    *(_OWORD *)&v44[12] = *(_OWORD *)(a1 + 3);
    long long v13 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 3) = v13;
    *(_OWORD *)(a2 + 3) = *(_OWORD *)&v44[12];
    *(_OWORD *)a2 = *(_OWORD *)v44;
    return result;
  }
  if (*a1 >= *a2)
  {
    unsigned int v11 = a1[1];
    unsigned int v12 = a2[1];
    if (v12 < v11) {
      goto LABEL_6;
    }
    if (v12 == v11)
    {
      unsigned int v26 = a2[2];
      unsigned int v27 = a1[2];
      if (v26 != -1)
      {
        if (v26 < v27) {
          goto LABEL_6;
        }
        if (v26 == v27)
        {
          unsigned int v28 = a1[3];
          unsigned int v29 = a2[3];
          if (v29 < v28) {
            goto LABEL_6;
          }
LABEL_64:
          if (v28 < v29) {
            return result;
          }
          goto LABEL_65;
        }
      }
      if (v27 != -1)
      {
        if (v27 < v26) {
          return result;
        }
        if (v27 == v26)
        {
          unsigned int v29 = a2[3];
          unsigned int v28 = a1[3];
          goto LABEL_64;
        }
      }
    }
    else if (v11 < v12)
    {
      return result;
    }
LABEL_65:
    unsigned int v38 = a1[4];
    unsigned int v39 = a2[4];
    if (v39 < v38) {
      goto LABEL_6;
    }
    if (v39 == v38)
    {
      unsigned int v40 = a2[5];
      if (v40 != -1)
      {
        unsigned int v41 = a1[5];
        if (v40 < v41 || v40 == v41 && a2[6] < a1[6]) {
          goto LABEL_6;
        }
      }
    }
  }
  return result;
}

uint64_t sub_C32038(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t result = sub_C31CE0(a1, a2, a3, a4);
  if (*a5 < *a4) {
    goto LABEL_2;
  }
  if (*a4 < *a5) {
    return result;
  }
  unsigned int v17 = a4[1];
  unsigned int v18 = a5[1];
  if (v18 < v17) {
    goto LABEL_2;
  }
  if (v18 != v17)
  {
    if (v17 < v18) {
      return result;
    }
    goto LABEL_47;
  }
  unsigned int v19 = a5[2];
  unsigned int v20 = a4[2];
  if (v19 == -1) {
    goto LABEL_44;
  }
  if (v19 < v20) {
    goto LABEL_2;
  }
  if (v19 != v20)
  {
LABEL_44:
    if (v20 == -1) {
      goto LABEL_47;
    }
    if (v20 < v19) {
      return result;
    }
    if (v20 != v19) {
      goto LABEL_47;
    }
    unsigned int v22 = a5[3];
    unsigned int v21 = a4[3];
  }
  else
  {
    unsigned int v21 = a4[3];
    unsigned int v22 = a5[3];
    if (v22 < v21) {
      goto LABEL_2;
    }
  }
  if (v21 < v22) {
    return result;
  }
LABEL_47:
  unsigned int v39 = a4[4];
  unsigned int v40 = a5[4];
  if (v40 >= v39)
  {
    if (v40 != v39) {
      return result;
    }
    unsigned int v41 = a5[5];
    if (v41 == -1) {
      return result;
    }
    unsigned int v42 = a4[5];
    if (v41 >= v42 && (v41 != v42 || a5[6] >= a4[6])) {
      return result;
    }
  }
LABEL_2:
  *(_OWORD *)unsigned int v55 = *(_OWORD *)a4;
  *(_OWORD *)&v55[12] = *(_OWORD *)(a4 + 3);
  long long v11 = *(_OWORD *)(a5 + 3);
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(_OWORD *)(a4 + 3) = v11;
  *(_OWORD *)(a5 + 3) = *(_OWORD *)&v55[12];
  *(_OWORD *)a5 = *(_OWORD *)v55;
  if (*a4 < *a3) {
    goto LABEL_3;
  }
  if (*a3 < *a4) {
    return result;
  }
  unsigned int v23 = a3[1];
  unsigned int v24 = a4[1];
  if (v24 < v23) {
    goto LABEL_3;
  }
  if (v24 != v23)
  {
    if (v23 < v24) {
      return result;
    }
    goto LABEL_61;
  }
  unsigned int v25 = a4[2];
  unsigned int v26 = a3[2];
  if (v25 == -1) {
    goto LABEL_58;
  }
  if (v25 < v26) {
    goto LABEL_3;
  }
  if (v25 != v26)
  {
LABEL_58:
    if (v26 == -1) {
      goto LABEL_61;
    }
    if (v26 < v25) {
      return result;
    }
    if (v26 != v25) {
      goto LABEL_61;
    }
    unsigned int v28 = a4[3];
    unsigned int v27 = a3[3];
  }
  else
  {
    unsigned int v27 = a3[3];
    unsigned int v28 = a4[3];
    if (v28 < v27) {
      goto LABEL_3;
    }
  }
  if (v27 < v28) {
    return result;
  }
LABEL_61:
  unsigned int v43 = a3[4];
  unsigned int v44 = a4[4];
  if (v44 >= v43)
  {
    if (v44 != v43) {
      return result;
    }
    unsigned int v45 = a4[5];
    if (v45 == -1) {
      return result;
    }
    unsigned int v46 = a3[5];
    if (v45 >= v46 && (v45 != v46 || a4[6] >= a3[6])) {
      return result;
    }
  }
LABEL_3:
  *(_OWORD *)unsigned int v56 = *(_OWORD *)a3;
  *(_OWORD *)&v56[12] = *(_OWORD *)(a3 + 3);
  long long v12 = *(_OWORD *)(a4 + 3);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_OWORD *)(a3 + 3) = v12;
  *(_OWORD *)(a4 + 3) = *(_OWORD *)&v56[12];
  *(_OWORD *)a4 = *(_OWORD *)v56;
  if (*a3 < *a2) {
    goto LABEL_4;
  }
  if (*a2 < *a3) {
    return result;
  }
  unsigned int v29 = a2[1];
  unsigned int v30 = a3[1];
  if (v30 < v29) {
    goto LABEL_4;
  }
  if (v30 != v29)
  {
    if (v29 < v30) {
      return result;
    }
    goto LABEL_75;
  }
  unsigned int v31 = a3[2];
  unsigned int v32 = a2[2];
  if (v31 == -1) {
    goto LABEL_72;
  }
  if (v31 < v32) {
    goto LABEL_4;
  }
  if (v31 != v32)
  {
LABEL_72:
    if (v32 == -1) {
      goto LABEL_75;
    }
    if (v32 < v31) {
      return result;
    }
    if (v32 != v31) {
      goto LABEL_75;
    }
    unsigned int v34 = a3[3];
    unsigned int v33 = a2[3];
  }
  else
  {
    unsigned int v33 = a2[3];
    unsigned int v34 = a3[3];
    if (v34 < v33) {
      goto LABEL_4;
    }
  }
  if (v33 < v34) {
    return result;
  }
LABEL_75:
  unsigned int v47 = a2[4];
  unsigned int v48 = a3[4];
  if (v48 >= v47)
  {
    if (v48 != v47) {
      return result;
    }
    unsigned int v49 = a3[5];
    if (v49 == -1) {
      return result;
    }
    unsigned int v50 = a2[5];
    if (v49 >= v50 && (v49 != v50 || a3[6] >= a2[6])) {
      return result;
    }
  }
LABEL_4:
  *(_OWORD *)unsigned int v57 = *(_OWORD *)a2;
  *(_OWORD *)&v57[12] = *(_OWORD *)(a2 + 3);
  long long v13 = *(_OWORD *)(a3 + 3);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 3) = v13;
  *(_OWORD *)(a3 + 3) = *(_OWORD *)&v57[12];
  *(_OWORD *)a3 = *(_OWORD *)v57;
  if (*a2 < *a1)
  {
LABEL_7:
    *(_OWORD *)unsigned int v58 = *(_OWORD *)a1;
    *(_OWORD *)&v58[12] = *(_OWORD *)(a1 + 3);
    long long v16 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 3) = v16;
    *(_OWORD *)(a2 + 3) = *(_OWORD *)&v58[12];
    *(_OWORD *)a2 = *(_OWORD *)v58;
    return result;
  }
  if (*a1 >= *a2)
  {
    unsigned int v14 = a1[1];
    unsigned int v15 = a2[1];
    if (v15 < v14) {
      goto LABEL_7;
    }
    if (v15 == v14)
    {
      unsigned int v35 = a2[2];
      unsigned int v36 = a1[2];
      if (v35 != -1)
      {
        if (v35 < v36) {
          goto LABEL_7;
        }
        if (v35 == v36)
        {
          unsigned int v37 = a1[3];
          unsigned int v38 = a2[3];
          if (v38 < v37) {
            goto LABEL_7;
          }
LABEL_86:
          if (v37 < v38) {
            return result;
          }
          goto LABEL_87;
        }
      }
      if (v36 != -1)
      {
        if (v36 < v35) {
          return result;
        }
        if (v36 == v35)
        {
          unsigned int v38 = a2[3];
          unsigned int v37 = a1[3];
          goto LABEL_86;
        }
      }
    }
    else if (v14 < v15)
    {
      return result;
    }
LABEL_87:
    unsigned int v51 = a1[4];
    unsigned int v52 = a2[4];
    if (v52 < v51) {
      goto LABEL_7;
    }
    if (v52 == v51)
    {
      unsigned int v53 = a2[5];
      if (v53 != -1)
      {
        unsigned int v54 = a1[5];
        if (v53 < v54 || v53 == v54 && a2[6] < a1[6]) {
          goto LABEL_7;
        }
      }
    }
  }
  return result;
}

uint64_t sub_C3249C(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  if (a3 < 2) {
    return result;
  }
  int64_t v4 = (unint64_t)(a3 - 2) >> 1;
  if (v4 < 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a4 - result) >> 2)) {
    return result;
  }
  unint64_t v5 = (0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a4 - result) >> 2)) | 1;
  unsigned int v6 = (unsigned int *)(result + 28 * v5);
  int64_t v7 = 0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a4 - result) >> 2) + 2;
  if (v7 >= a3) {
    goto LABEL_6;
  }
  uint64_t v8 = v6 + 7;
  unsigned int v9 = v6[7];
  if (*v6 < v9) {
    goto LABEL_7;
  }
  if (v9 < *v6) {
    goto LABEL_6;
  }
  uint64_t v44 = result + 28 * v5;
  unsigned int v45 = v6[8];
  unsigned int v46 = *(_DWORD *)(v44 + 4);
  if (v46 >= v45)
  {
    if (v46 != v45)
    {
      if (v45 < v46) {
        goto LABEL_6;
      }
      goto LABEL_98;
    }
    unsigned int v47 = *(_DWORD *)(result + 28 * v5 + 8);
    unsigned int v48 = v6[9];
    if (v47 == -1) {
      goto LABEL_95;
    }
    if (v47 < v48) {
      goto LABEL_7;
    }
    if (v47 != v48)
    {
LABEL_95:
      if (v48 == -1) {
        goto LABEL_98;
      }
      if (v48 < v47) {
        goto LABEL_6;
      }
      if (v48 != v47) {
        goto LABEL_98;
      }
      unsigned int v50 = *(_DWORD *)(result + 28 * v5 + 12);
      unsigned int v49 = v6[10];
    }
    else
    {
      unsigned int v49 = v6[10];
      unsigned int v50 = *(_DWORD *)(result + 28 * v5 + 12);
      if (v50 < v49) {
        goto LABEL_7;
      }
    }
    if (v49 < v50) {
      goto LABEL_6;
    }
LABEL_98:
    unsigned int v55 = v6[11];
    unsigned int v56 = *(_DWORD *)(v44 + 16);
    if (v56 < v55) {
      goto LABEL_7;
    }
    if (v56 == v55)
    {
      unsigned int v57 = *(_DWORD *)(result + 28 * v5 + 20);
      if (v57 != -1)
      {
        unsigned int v58 = v6[12];
        if (v57 < v58 || v57 == v58 && *(_DWORD *)(result + 28 * v5 + 24) < v6[13]) {
          goto LABEL_7;
        }
      }
    }
LABEL_6:
    uint64_t v8 = (unsigned int *)(result + 28 * v5);
    int64_t v7 = (0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a4 - result) >> 2)) | 1;
  }
LABEL_7:
  unsigned int v10 = *a4;
  if (*v8 < *a4) {
    return result;
  }
  unsigned int v11 = a4[1];
  if (v10 < *v8) {
    goto LABEL_9;
  }
  unsigned int v39 = v8[1];
  if (v39 < v11) {
    return result;
  }
  if (v39 == v11)
  {
    unsigned int v40 = v8[2];
    unsigned int v41 = a4[2];
    if (v40 == -1) {
      goto LABEL_81;
    }
    if (v40 < v41) {
      return result;
    }
    if (v40 != v41)
    {
LABEL_81:
      if (v41 == -1) {
        goto LABEL_84;
      }
      if (v41 < v40) {
        goto LABEL_9;
      }
      if (v41 != v40)
      {
LABEL_84:
        unsigned int v51 = a4[4];
        unsigned int v52 = v8[4];
        if (v52 < v51) {
          return result;
        }
        if (v52 == v51)
        {
          unsigned int v53 = v8[5];
          if (v53 != -1)
          {
            unsigned int v54 = a4[5];
            if (v53 < v54 || v53 == v54 && v8[6] < a4[6]) {
              return result;
            }
          }
        }
        goto LABEL_9;
      }
      unsigned int v43 = v8[3];
      unsigned int v42 = a4[3];
    }
    else
    {
      unsigned int v42 = a4[3];
      unsigned int v43 = v8[3];
      if (v43 < v42) {
        return result;
      }
    }
    if (v42 >= v43) {
      goto LABEL_84;
    }
  }
  else if (v11 >= v39)
  {
    goto LABEL_84;
  }
LABEL_9:
  unsigned int v12 = a4[2];
  unsigned int v13 = a4[3];
  unsigned int v14 = a4[4];
  unsigned int v15 = a4[5];
  unsigned int v16 = a4[6];
  long long v17 = *(_OWORD *)(v8 + 3);
  *(_OWORD *)a4 = *(_OWORD *)v8;
  *(_OWORD *)(a4 + 3) = v17;
  if (v4 < v7) {
    goto LABEL_75;
  }
  while (1)
  {
    unsigned int v19 = v8;
    uint64_t v20 = (2 * v7) | 1;
    unsigned int v21 = (unsigned int *)(result + 28 * v20);
    int64_t v7 = 2 * v7 + 2;
    if (v7 >= a3) {
      goto LABEL_15;
    }
    uint64_t v8 = v21 + 7;
    unsigned int v22 = v21[7];
    if (*v21 < v22) {
      goto LABEL_16;
    }
    if (v22 < *v21)
    {
LABEL_15:
      uint64_t v8 = (unsigned int *)(result + 28 * v20);
      int64_t v7 = v20;
      goto LABEL_16;
    }
    uint64_t v28 = result + 28 * v20;
    unsigned int v29 = v21[8];
    unsigned int v30 = *(_DWORD *)(v28 + 4);
    if (v30 >= v29)
    {
      if (v30 != v29)
      {
        if (v29 < v30) {
          goto LABEL_15;
        }
        goto LABEL_53;
      }
      unsigned int v31 = *(_DWORD *)(result + 28 * v20 + 8);
      unsigned int v32 = v21[9];
      if (v31 == -1) {
        goto LABEL_50;
      }
      if (v31 < v32) {
        goto LABEL_16;
      }
      if (v31 != v32)
      {
LABEL_50:
        if (v32 == -1) {
          goto LABEL_53;
        }
        if (v32 < v31) {
          goto LABEL_15;
        }
        if (v32 != v31) {
          goto LABEL_53;
        }
        unsigned int v34 = *(_DWORD *)(result + 28 * v20 + 12);
        unsigned int v33 = v21[10];
      }
      else
      {
        unsigned int v33 = v21[10];
        unsigned int v34 = *(_DWORD *)(result + 28 * v20 + 12);
        if (v34 < v33) {
          goto LABEL_16;
        }
      }
      if (v33 < v34) {
        goto LABEL_15;
      }
LABEL_53:
      unsigned int v35 = v21[11];
      unsigned int v36 = *(_DWORD *)(v28 + 16);
      if (v36 >= v35)
      {
        if (v36 != v35) {
          goto LABEL_15;
        }
        unsigned int v37 = *(_DWORD *)(result + 28 * v20 + 20);
        if (v37 == -1) {
          goto LABEL_15;
        }
        unsigned int v38 = v21[12];
        if (v37 >= v38 && (v37 != v38 || *(_DWORD *)(result + 28 * v20 + 24) >= v21[13])) {
          goto LABEL_15;
        }
      }
    }
LABEL_16:
    if (*v8 < v10) {
      goto LABEL_74;
    }
    if (v10 < *v8) {
      goto LABEL_11;
    }
    unsigned int v23 = v8[1];
    if (v23 < v11) {
      goto LABEL_74;
    }
    if (v23 != v11)
    {
      if (v11 >= v23) {
        goto LABEL_32;
      }
      goto LABEL_11;
    }
    unsigned int v24 = v8[2];
    if (v24 == -1) {
      break;
    }
    if (v24 < v12) {
      goto LABEL_74;
    }
    if (v24 != v12) {
      break;
    }
    unsigned int v25 = v8[3];
    if (v25 < v13) {
      goto LABEL_74;
    }
    if (v13 >= v25) {
      goto LABEL_32;
    }
LABEL_11:
    long long v18 = *(_OWORD *)v8;
    *(_OWORD *)(v19 + 3) = *(_OWORD *)(v8 + 3);
    *(_OWORD *)unsigned int v19 = v18;
    if (v4 < v7) {
      goto LABEL_75;
    }
  }
  if (v12 != -1 && (v12 < v24 || v12 == v24 && v13 < v8[3])) {
    goto LABEL_11;
  }
LABEL_32:
  unsigned int v26 = v8[4];
  if (v26 >= v14)
  {
    if (v26 != v14) {
      goto LABEL_11;
    }
    unsigned int v27 = v8[5];
    if (v27 == -1 || v27 >= v15 && (v27 != v15 || v8[6] >= v16)) {
      goto LABEL_11;
    }
  }
LABEL_74:
  uint64_t v8 = v19;
LABEL_75:
  *uint64_t v8 = v10;
  v8[1] = v11;
  v8[2] = v12;
  v8[3] = v13;
  v8[4] = v14;
  v8[5] = v15;
  v8[6] = v16;
  return result;
}

__n128 sub_C32908(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    int64_t v7 = a1;
    uint64_t v8 = v3 + 1;
    unsigned int v9 = &a1[7 * v3 + 7];
    uint64_t v10 = (2 * v3) | 1;
    uint64_t v3 = 2 * v3 + 2;
    if (v3 >= a3)
    {
LABEL_4:
      a1 = v9;
      uint64_t v3 = v10;
      goto LABEL_5;
    }
    a1 = v9 + 7;
    unsigned int v11 = v9[7];
    if (*v9 >= v11)
    {
      if (v11 < *v9) {
        goto LABEL_4;
      }
      unsigned int v12 = &v7[7 * v8];
      unsigned int v13 = v9[8];
      unsigned int v14 = v12[1];
      if (v14 >= v13)
      {
        if (v14 == v13)
        {
          unsigned int v15 = v7[7 * v8 + 2];
          unsigned int v16 = v9[9];
          if (v15 == -1) {
            goto LABEL_22;
          }
          if (v15 < v16) {
            goto LABEL_5;
          }
          if (v15 != v16)
          {
LABEL_22:
            if (v16 != -1 && (v16 < v15 || v16 == v15 && v9[10] < v7[7 * v8 + 3])) {
              goto LABEL_4;
            }
          }
          else
          {
            unsigned int v17 = v9[10];
            unsigned int v18 = v7[7 * v8 + 3];
            if (v18 < v17) {
              goto LABEL_5;
            }
            if (v17 < v18) {
              goto LABEL_4;
            }
          }
        }
        else if (v13 < v14)
        {
          goto LABEL_4;
        }
        unsigned int v19 = v9[11];
        unsigned int v20 = v12[4];
        if (v20 >= v19)
        {
          if (v20 != v19) {
            goto LABEL_4;
          }
          unsigned int v21 = v7[7 * v8 + 5];
          if (v21 == -1) {
            goto LABEL_4;
          }
          unsigned int v22 = v9[12];
          if (v21 >= v22 && (v21 != v22 || v7[7 * v8 + 6] >= v9[13])) {
            goto LABEL_4;
          }
        }
      }
    }
LABEL_5:
    __n128 result = *(__n128 *)a1;
    *(_OWORD *)(v7 + 3) = *(_OWORD *)(a1 + 3);
    *(__n128 *)int64_t v7 = result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t sub_C32A68(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 < 2) {
    return result;
  }
  unint64_t v5 = v4 >> 1;
  unsigned int v6 = (long long *)(result + 28 * (v4 >> 1));
  unsigned int v7 = *(_DWORD *)(a2 - 28);
  if (*(_DWORD *)v6 < v7)
  {
    unsigned int v8 = *(_DWORD *)(a2 - 24);
    goto LABEL_7;
  }
  if (v7 < *(_DWORD *)v6) {
    return result;
  }
  unsigned int v8 = *(_DWORD *)(a2 - 24);
  unsigned int v9 = *((_DWORD *)v6 + 1);
  if (v9 >= v8)
  {
    if (v9 != v8)
    {
      if (v8 < v9) {
        return result;
      }
      goto LABEL_48;
    }
    unsigned int v24 = *(_DWORD *)(result + 28 * v5 + 8);
    unsigned int v25 = *(_DWORD *)(a2 - 20);
    if (v24 == -1) {
      goto LABEL_45;
    }
    if (v24 < v25) {
      goto LABEL_7;
    }
    if (v24 != v25)
    {
LABEL_45:
      if (v25 == -1) {
        goto LABEL_48;
      }
      if (v25 < v24) {
        return result;
      }
      if (v25 != v24) {
        goto LABEL_48;
      }
      unsigned int v27 = *(_DWORD *)(result + 28 * v5 + 12);
      unsigned int v26 = *(_DWORD *)(a2 - 16);
    }
    else
    {
      unsigned int v26 = *(_DWORD *)(a2 - 16);
      unsigned int v27 = *(_DWORD *)(result + 28 * v5 + 12);
      if (v27 < v26) {
        goto LABEL_7;
      }
    }
    if (v26 < v27) {
      return result;
    }
LABEL_48:
    unsigned int v28 = *(_DWORD *)(a2 - 12);
    unsigned int v29 = *((_DWORD *)v6 + 4);
    if (v29 >= v28)
    {
      if (v29 != v28) {
        return result;
      }
      unsigned int v30 = *(_DWORD *)(result + 28 * v5 + 20);
      if (v30 == -1) {
        return result;
      }
      unsigned int v31 = *(_DWORD *)(a2 - 8);
      if (v30 >= v31 && (v30 != v31 || *(_DWORD *)(result + 28 * v5 + 24) >= *(_DWORD *)(a2 - 4))) {
        return result;
      }
    }
  }
LABEL_7:
  unsigned int v10 = *(_DWORD *)(a2 - 20);
  unsigned int v11 = *(_DWORD *)(a2 - 16);
  unsigned int v12 = *(_DWORD *)(a2 - 12);
  unsigned int v13 = *(_DWORD *)(a2 - 8);
  unsigned int v14 = *(_DWORD *)(a2 - 4);
  long long v15 = *(long long *)((char *)v6 + 12);
  *(_OWORD *)(a2 - 28) = *v6;
  *(_OWORD *)(a2 - 16) = v15;
  if (v4 >= 2)
  {
    while (1)
    {
      unint64_t v18 = v5 - 1;
      unint64_t v5 = (v5 - 1) >> 1;
      unsigned int v16 = (long long *)(result + 28 * v5);
      if (*(_DWORD *)v16 < v7) {
        goto LABEL_11;
      }
      if (v7 < *(_DWORD *)v16) {
        break;
      }
      unsigned int v19 = *((_DWORD *)v16 + 1);
      if (v19 < v8) {
        goto LABEL_11;
      }
      if (v19 != v8)
      {
        if (v8 < v19) {
          break;
        }
        goto LABEL_22;
      }
      unsigned int v20 = *(_DWORD *)(result + 28 * v5 + 8);
      if (v20 == -1) {
        goto LABEL_31;
      }
      if (v20 < v10) {
        goto LABEL_11;
      }
      if (v20 != v10)
      {
LABEL_31:
        if (v10 == -1) {
          goto LABEL_22;
        }
        if (v10 < v20) {
          break;
        }
        if (v10 != v20) {
          goto LABEL_22;
        }
        unsigned int v21 = *(_DWORD *)(result + 28 * v5 + 12);
      }
      else
      {
        unsigned int v21 = *(_DWORD *)(result + 28 * v5 + 12);
        if (v21 < v11) {
          goto LABEL_11;
        }
      }
      if (v11 < v21) {
        break;
      }
LABEL_22:
      unsigned int v22 = *((_DWORD *)v16 + 4);
      if (v22 >= v12)
      {
        if (v22 != v12) {
          break;
        }
        unsigned int v23 = *(_DWORD *)(result + 28 * v5 + 20);
        if (v23 == -1 || v23 >= v13 && (v23 != v13 || *(_DWORD *)(result + 28 * v5 + 24) >= v14)) {
          break;
        }
      }
LABEL_11:
      long long v17 = *v16;
      *(long long *)((char *)v6 + 12) = *(long long *)((char *)v16 + 12);
      *unsigned int v6 = v17;
      unsigned int v6 = (long long *)(result + 28 * v5);
      if (v18 <= 1) {
        goto LABEL_9;
      }
    }
  }
  unsigned int v16 = v6;
LABEL_9:
  *(_DWORD *)unsigned int v16 = v7;
  *((_DWORD *)v16 + 1) = v8;
  *((_DWORD *)v16 + 2) = v10;
  *((_DWORD *)v16 + 3) = v11;
  *((_DWORD *)v16 + 4) = v12;
  *((_DWORD *)v16 + 5) = v13;
  *((_DWORD *)v16 + 6) = v14;
  return result;
}

void sub_C32CC4(void *a1, unsigned int a2, unsigned int *a3, unsigned int *a4, void *a5)
{
  unint64_t v10 = *a3;
  LODWORD(v11) = *a4;
  if (v10 == *a4)
  {
    uint64_t v56 = sub_C33350(a1, a2, *a3);
    int v57 = v12;
    sub_C33A5C(a1, a2, *(void *)a3, a3[2], *(void *)a4, a4[2], (uint64_t)&v56);
    unsigned int v14 = (_DWORD *)a5[4];
    unint64_t v13 = a5[5];
    if ((unint64_t)v14 >= v13)
    {
      long long v15 = (_DWORD **)(a5 + 3);
      unsigned int v16 = (_DWORD *)a5[3];
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (v14 - v16) + 1;
      if (v17 <= 0x1555555555555555)
      {
        unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (void)v16) >> 2);
        if (2 * v18 > v17) {
          unint64_t v17 = 2 * v18;
        }
        if (v18 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v19 = 0x1555555555555555;
        }
        else {
          unint64_t v19 = v17;
        }
        if (!v19)
        {
          unsigned int v20 = 0;
          goto LABEL_49;
        }
        if (v19 <= 0x1555555555555555)
        {
          unsigned int v20 = (char *)operator new(12 * v19);
LABEL_49:
          unsigned int v48 = &v20[4 * (v14 - v16)];
          unsigned int v49 = &v20[12 * v19];
          *(void *)unsigned int v48 = v56;
          *((_DWORD *)v48 + 2) = v57;
          unsigned int v42 = v48 + 12;
          if (v14 == v16) {
            goto LABEL_56;
          }
          do
          {
            uint64_t v50 = *(void *)(v14 - 3);
            v14 -= 3;
            int v51 = v14[2];
            *(void *)(v48 - 12) = v50;
            v48 -= 12;
            *((_DWORD *)v48 + 2) = v51;
          }
          while (v14 != v16);
          goto LABEL_55;
        }
LABEL_61:
        sub_188D718();
      }
      goto LABEL_62;
    }
    goto LABEL_38;
  }
  if (v10 < v11)
  {
    uint64_t v54 = a2;
    unsigned int v55 = a5 + 3;
    while (1)
    {
      uint64_t v56 = sub_C33350(a1, a2, v10);
      int v57 = v22;
      if (v10 == *a3 && *(void *)(a3 + 1))
      {
        unsigned int v25 = (unsigned int *)(a1[549] + *(unsigned __int16 *)(a1[549] - *(int *)a1[549] + 4));
        unsigned int v26 = (int *)((char *)&v25[v54 + 1] + *v25 + *(unsigned int *)((char *)&v25[v54 + 1] + *v25));
        unsigned int v27 = (unsigned int *)((char *)v26 + *(unsigned __int16 *)((char *)v26 - *v26 + 6));
        sub_C33A5C(a1, a2, *(void *)a3, a3[2], *(void *)a3 | ((unint64_t)*((unsigned __int8 *)&v27[3 * *(void *)a3 + 3]+ *v27) << 32), 0, (uint64_t)&v56);
        unsigned int v24 = (_DWORD *)a5[4];
        unint64_t v23 = a5[5];
        if ((unint64_t)v24 < v23) {
          goto LABEL_14;
        }
LABEL_20:
        unsigned int v28 = (_DWORD *)*v55;
        unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v24 - *v55) >> 2);
        unint64_t v30 = v29 + 1;
        if (v29 + 1 > 0x1555555555555555) {
          sub_2E00();
        }
        unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (void)v28) >> 2);
        if (2 * v31 > v30) {
          unint64_t v30 = 2 * v31;
        }
        if (v31 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v32 = 0x1555555555555555;
        }
        else {
          unint64_t v32 = v30;
        }
        if (v32)
        {
          if (v32 > 0x1555555555555555) {
            goto LABEL_61;
          }
          unsigned int v33 = (char *)operator new(12 * v32);
        }
        else
        {
          unsigned int v33 = 0;
        }
        unsigned int v34 = &v33[12 * v29];
        *(void *)unsigned int v34 = v56;
        *((_DWORD *)v34 + 2) = v57;
        unsigned int v35 = v34;
        if (v24 != v28)
        {
          do
          {
            uint64_t v36 = *(void *)(v24 - 3);
            v24 -= 3;
            int v37 = v24[2];
            *(void *)(v35 - 12) = v36;
            v35 -= 12;
            *((_DWORD *)v35 + 2) = v37;
          }
          while (v24 != v28);
          unsigned int v24 = (_DWORD *)*v55;
        }
        unsigned int v38 = v34 + 12;
        a5[3] = v35;
        a5[4] = v34 + 12;
        a5[5] = &v33[12 * v32];
        if (v24) {
          operator delete(v24);
        }
        a5[4] = v38;
        ++v10;
        unint64_t v11 = *a4;
        if (v10 >= v11) {
          break;
        }
      }
      else
      {
        sub_C33D84(a1, a2, v10, (uint64_t)&v56);
        unsigned int v24 = (_DWORD *)a5[4];
        unint64_t v23 = a5[5];
        if ((unint64_t)v24 >= v23) {
          goto LABEL_20;
        }
LABEL_14:
        uint64_t v21 = v56;
        _DWORD v24[2] = v57;
        *(void *)unsigned int v24 = v21;
        a5[4] = v24 + 3;
        ++v10;
        unint64_t v11 = *a4;
        if (v10 >= v11) {
          break;
        }
      }
    }
  }
  if (!*(void *)(a4 + 1)) {
    return;
  }
  uint64_t v56 = sub_C33350(a1, a2, v11);
  int v57 = v39;
  sub_C33A5C(a1, a2, *(void *)a4, 0, *(void *)a4, a4[2], (uint64_t)&v56);
  unsigned int v14 = (_DWORD *)a5[4];
  unint64_t v40 = a5[5];
  if ((unint64_t)v14 >= v40)
  {
    long long v15 = (_DWORD **)(a5 + 3);
    unsigned int v43 = (_DWORD *)a5[3];
    unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * (v14 - v43) + 1;
    if (v44 <= 0x1555555555555555)
    {
      unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - (void)v43) >> 2);
      if (2 * v45 > v44) {
        unint64_t v44 = 2 * v45;
      }
      if (v45 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v46 = 0x1555555555555555;
      }
      else {
        unint64_t v46 = v44;
      }
      if (v46)
      {
        if (v46 > 0x1555555555555555) {
          goto LABEL_61;
        }
        unsigned int v47 = (char *)operator new(12 * v46);
      }
      else
      {
        unsigned int v47 = 0;
      }
      unsigned int v48 = &v47[4 * (v14 - v43)];
      unsigned int v49 = &v47[12 * v46];
      *(void *)unsigned int v48 = v56;
      *((_DWORD *)v48 + 2) = v57;
      unsigned int v42 = v48 + 12;
      if (v14 == v43) {
        goto LABEL_56;
      }
      do
      {
        uint64_t v52 = *(void *)(v14 - 3);
        v14 -= 3;
        int v53 = v14[2];
        *(void *)(v48 - 12) = v52;
        v48 -= 12;
        *((_DWORD *)v48 + 2) = v53;
      }
      while (v14 != v43);
LABEL_55:
      unsigned int v14 = *v15;
LABEL_56:
      a5[3] = v48;
      a5[4] = v42;
      a5[5] = v49;
      if (v14) {
        operator delete(v14);
      }
      goto LABEL_58;
    }
LABEL_62:
    sub_2E00();
  }
LABEL_38:
  uint64_t v41 = v56;
  v14[2] = v57;
  *(void *)unsigned int v14 = v41;
  unsigned int v42 = v14 + 3;
LABEL_58:
  a5[4] = v42;
}

void sub_C3318C(void *a1, uint64_t a2, unsigned int *a3, unsigned int *a4, void *a5)
{
  unint64_t v5 = *a3;
  if (v5 < *a4)
  {
    unsigned int v7 = a4;
    unint64_t v30 = (void **)(a5 + 3);
    do
    {
      while (1)
      {
        uint64_t v10 = sub_C33350(a1, a2, v5);
        uint64_t v12 = v10;
        int v13 = v11;
        long long v15 = (char *)a5[4];
        unint64_t v14 = a5[5];
        if ((unint64_t)v15 >= v14) {
          break;
        }
        *(void *)long long v15 = v10;
        *((_DWORD *)v15 + 2) = v11;
        a5[4] = v15 + 12;
        if (++v5 >= *v7) {
          return;
        }
      }
      unsigned int v16 = (char *)*v30;
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v15 - (unsigned char *)*v30) >> 2);
      unint64_t v18 = v17 + 1;
      if (v17 + 1 > 0x1555555555555555) {
        sub_2E00();
      }
      unint64_t v19 = a1;
      uint64_t v20 = a2;
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (void)v16) >> 2);
      if (2 * v21 > v18) {
        unint64_t v18 = 2 * v21;
      }
      if (v21 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v22 = 0x1555555555555555;
      }
      else {
        unint64_t v22 = v18;
      }
      if (v22)
      {
        if (v22 > 0x1555555555555555) {
          sub_188D718();
        }
        unint64_t v23 = (char *)operator new(12 * v22);
      }
      else
      {
        unint64_t v23 = 0;
      }
      unsigned int v24 = &v23[12 * v17];
      *(void *)unsigned int v24 = v12;
      *((_DWORD *)v24 + 2) = v13;
      unsigned int v25 = v24;
      if (v15 != v16)
      {
        do
        {
          uint64_t v26 = *(void *)(v15 - 12);
          v15 -= 12;
          int v27 = *((_DWORD *)v15 + 2);
          *(void *)(v25 - 12) = v26;
          v25 -= 12;
          *((_DWORD *)v25 + 2) = v27;
        }
        while (v15 != v16);
        long long v15 = (char *)*v30;
      }
      unsigned int v28 = v24 + 12;
      a5[3] = v25;
      a5[4] = v24 + 12;
      a5[5] = &v23[12 * v22];
      if (v15) {
        operator delete(v15);
      }
      a2 = v20;
      a1 = v19;
      unsigned int v7 = a4;
      a5[4] = v28;
      ++v5;
    }
    while (v5 < *a4);
  }
}

uint64_t sub_C33350(void *a1, int a2, unsigned int a3)
{
  unint64_t v4 = (int *)a1[549];
  unint64_t v5 = (unsigned __int16 *)((char *)v4 - *v4);
  if (*v5 >= 5u && (uint64_t v6 = v5[2]) != 0) {
    unsigned int v7 = (char *)v4 + v6 + *(unsigned int *)((char *)v4 + v6);
  }
  else {
    unsigned int v7 = 0;
  }
  unsigned int v8 = &v7[4 * a2 + 4 + *(unsigned int *)&v7[4 * a2 + 4]];
  unsigned int v9 = &v8[-*(int *)v8];
  if (*(unsigned __int16 *)v9 < 7u)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = *((unsigned __int16 *)v9 + 3);
    if (v10) {
      v10 += (uint64_t)&v8[*(unsigned int *)&v8[v10]];
    }
  }
  uint64_t v11 = v10 + 12 * a3;
  unsigned int v13 = *(_DWORD *)(v11 + 4);
  uint64_t v12 = v11 + 4;
  uint64_t v91 = v13;
  int8x8_t v14 = (int8x8_t)a1[540];
  unint64_t v93 = a1 + 539;
  if (v14)
  {
    unint64_t v15 = *(unsigned int *)(v12 + 4);
    uint8x8_t v16 = (uint8x8_t)vcnt_s8(v14);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      unint64_t v17 = *(unsigned int *)(v12 + 4);
      if (*(void *)&v14 <= v15) {
        unint64_t v17 = v15 % *(void *)&v14;
      }
    }
    else
    {
      unint64_t v17 = (v14.i32[0] - 1) & v15;
    }
    unint64_t v18 = *(uint64_t ***)(a1[539] + 8 * v17);
    if (v18)
    {
      unint64_t v19 = *v18;
      if (v19)
      {
        if (v16.u32[0] < 2uLL)
        {
          uint64_t v20 = *(void *)&v14 - 1;
          while (1)
          {
            uint64_t v22 = v19[1];
            if (v22 == v15)
            {
              if (*((_DWORD *)v19 + 4) == v15) {
                goto LABEL_63;
              }
            }
            else if ((v22 & v20) != v17)
            {
              goto LABEL_29;
            }
            unint64_t v19 = (uint64_t *)*v19;
            if (!v19) {
              goto LABEL_29;
            }
          }
        }
        do
        {
          unint64_t v21 = v19[1];
          if (v21 == v15)
          {
            if (*((_DWORD *)v19 + 4) == v15) {
              goto LABEL_63;
            }
          }
          else
          {
            if (v21 >= *(void *)&v14) {
              v21 %= *(void *)&v14;
            }
            if (v21 != v17) {
              break;
            }
          }
          unint64_t v19 = (uint64_t *)*v19;
        }
        while (v19);
      }
    }
  }
LABEL_29:
  int v23 = sub_2D0F10((uint64_t)(a1[531] - a1[530]) >> 3);
  unsigned int v96 = *(_DWORD *)(v12 + 4);
  uint64_t v97 = &v96;
  *((_DWORD *)sub_C34250((uint64_t)(a1 + 539), &v96, (uint64_t)&unk_20F06E0, &v97) + 5) = v23;
  uint64_t v89 = v12;
  unint64_t v90 = v8;
  LODWORD(v15) = *(_DWORD *)(v12 + 4);
  unsigned int v24 = &v8[*(unsigned __int16 *)&v8[-*(int *)v8 + 8]];
  unsigned int v25 = *(_DWORD *)&v24[*(unsigned int *)v24] + v15;
  if (v15 <= v25) {
    unsigned int v26 = v25;
  }
  else {
    unsigned int v26 = *(_DWORD *)(v12 + 4);
  }
  if (v15 < v25)
  {
    unint64_t v94 = (char **)(a1 + 530);
    while (1)
    {
      unsigned int v28 = (int *)a1[549];
      unint64_t v29 = (unsigned __int16 *)((char *)v28 - *v28);
      if (*v29 >= 7u && (uint64_t v30 = v29[3]) != 0)
      {
        uint64_t v31 = (uint64_t)v28 + v30 + *(unsigned int *)((char *)v28 + v30) + 4;
        uint64_t v32 = v15;
        unsigned int v33 = (char *)a1[531];
        unint64_t v34 = a1[532];
        if ((unint64_t)v33 >= v34) {
          goto LABEL_41;
        }
      }
      else
      {
        uint64_t v31 = 4;
        uint64_t v32 = v15;
        unsigned int v33 = (char *)a1[531];
        unint64_t v34 = a1[532];
        if ((unint64_t)v33 >= v34)
        {
LABEL_41:
          unsigned int v35 = *v94;
          uint64_t v36 = v33 - *v94;
          uint64_t v37 = v36 >> 3;
          unint64_t v38 = (v36 >> 3) + 1;
          if (v38 >> 61) {
            sub_2E00();
          }
          uint64_t v39 = v34 - (void)v35;
          if (v39 >> 2 > v38) {
            unint64_t v38 = v39 >> 2;
          }
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v40 = v38;
          }
          if (v40)
          {
            if (v40 >> 61) {
LABEL_120:
            }
              sub_188D718();
            uint64_t v41 = operator new(8 * v40);
            unsigned int v42 = &v41[8 * v37];
            *unsigned int v42 = *(void *)(v31 + 8 * v32);
            uint64_t v27 = (uint64_t)(v42 + 1);
            if (v33 == v35) {
              goto LABEL_59;
            }
LABEL_52:
            unint64_t v43 = v33 - 8 - v35;
            if (v43 < 0x58) {
              goto LABEL_125;
            }
            if ((unint64_t)(v33 - &v41[v36]) < 0x20) {
              goto LABEL_125;
            }
            uint64_t v44 = (v43 >> 3) + 1;
            uint64_t v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v46 = &v33[-v45];
            unsigned int v42 = (void *)((char *)v42 - v45);
            unsigned int v47 = &v41[8 * v37 - 16];
            unsigned int v48 = v33 - 16;
            uint64_t v49 = v44 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v50 = *(_OWORD *)v48;
              *(v47 - 1) = *((_OWORD *)v48 - 1);
              _OWORD *v47 = v50;
              v47 -= 2;
              v48 -= 32;
              v49 -= 4;
            }
            while (v49);
            unsigned int v33 = v46;
            if (v44 != (v44 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_125:
              do
              {
                uint64_t v51 = *((void *)v33 - 1);
                v33 -= 8;
                *--unsigned int v42 = v51;
              }
              while (v33 != v35);
            }
            unsigned int v33 = *v94;
          }
          else
          {
            uint64_t v41 = 0;
            unsigned int v42 = (void *)(8 * v37);
            *(void *)(8 * v37) = *(void *)(v31 + 8 * v32);
            uint64_t v27 = 8 * v37 + 8;
            if (v33 != v35) {
              goto LABEL_52;
            }
          }
LABEL_59:
          a1[530] = v42;
          a1[531] = v27;
          a1[532] = &v41[8 * v40];
          if (v33) {
            operator delete(v33);
          }
          goto LABEL_35;
        }
      }
      *(void *)unsigned int v33 = *(void *)(v31 + 8 * v32);
      uint64_t v27 = (uint64_t)(v33 + 8);
LABEL_35:
      a1[531] = v27;
      LODWORD(v15) = v15 + 1;
      if (v15 == v26)
      {
        LODWORD(v15) = *(_DWORD *)(v89 + 4);
        break;
      }
    }
  }
  unsigned int v8 = v90;
LABEL_63:
  unint64_t v52 = a1[540];
  if (!v52) {
    goto LABEL_119;
  }
  uint8x8_t v53 = (uint8x8_t)vcnt_s8((int8x8_t)v52);
  v53.i16[0] = vaddlv_u8(v53);
  if (v53.u32[0] > 1uLL)
  {
    unint64_t v54 = v15;
    if (v52 <= v15) {
      unint64_t v54 = v15 % v52;
    }
  }
  else
  {
    unint64_t v54 = (v52 - 1) & v15;
  }
  unsigned int v55 = *(uint64_t ***)(*v93 + 8 * v54);
  if (!v55 || (uint64_t v56 = *v55) == 0) {
LABEL_119:
  }
    sub_5AE8("unordered_map::at: key not found");
  if (v53.u32[0] < 2uLL)
  {
    unint64_t v57 = v52 - 1;
    while (1)
    {
      uint64_t v59 = v56[1];
      if (v59 == v15)
      {
        if (*((_DWORD *)v56 + 4) == v15) {
          goto LABEL_83;
        }
      }
      else if ((v59 & v57) != v54)
      {
        goto LABEL_119;
      }
      uint64_t v56 = (uint64_t *)*v56;
      if (!v56) {
        goto LABEL_119;
      }
    }
  }
  while (1)
  {
    unint64_t v58 = v56[1];
    if (v58 == v15) {
      break;
    }
    if (v58 >= v52) {
      v58 %= v52;
    }
    if (v58 != v54) {
      goto LABEL_119;
    }
LABEL_73:
    uint64_t v56 = (uint64_t *)*v56;
    if (!v56) {
      goto LABEL_119;
    }
  }
  if (*((_DWORD *)v56 + 4) != v15) {
    goto LABEL_73;
  }
LABEL_83:
  uint64_t v60 = &v8[-*(int *)v8];
  if (*(unsigned __int16 *)v60 < 0x11u)
  {
    int v62 = 0;
    int v63 = *(_DWORD *)&v8[*((unsigned __int16 *)v60 + 2) + *(unsigned int *)&v8[*((unsigned __int16 *)v60 + 2)]];
    unsigned int v64 = v63 * a3;
  }
  else
  {
    if (*((_WORD *)v60 + 8)) {
      int v61 = *(_DWORD *)&v8[*((unsigned __int16 *)v60 + 8)];
    }
    else {
      int v61 = 0;
    }
    int v63 = *(_DWORD *)&v8[*((unsigned __int16 *)v60 + 2) + *(unsigned int *)&v8[*((unsigned __int16 *)v60 + 2)]];
    unsigned int v64 = v61 + v63 * a3;
    uint64_t v65 = *((unsigned __int16 *)v60 + 8);
    if (v65) {
      int v62 = *(_DWORD *)&v8[v65];
    }
    else {
      int v62 = 0;
    }
  }
  uint64_t v95 = *((unsigned int *)v56 + 5);
  unsigned int v66 = v63 + v63 * a3 + v62;
  if (v64 <= v66) {
    unsigned int v67 = v63 + v63 * a3 + v62;
  }
  else {
    unsigned int v67 = v64;
  }
  if (v64 < v66)
  {
    int v68 = (void **)(a1 + 536);
    while (1)
    {
      unsigned int v70 = (int *)a1[549];
      uint64_t v71 = (unsigned __int16 *)((char *)v70 - *v70);
      if (*v71 >= 0xBu && (uint64_t v72 = v71[5]) != 0)
      {
        uint64_t v73 = (uint64_t)&v70[3 * v64 + 1] + v72 + *(unsigned int *)((char *)v70 + v72);
        unint64_t v74 = (char *)a1[537];
        unint64_t v75 = a1[538];
        if ((unint64_t)v74 >= v75) {
          goto LABEL_102;
        }
LABEL_96:
        uint64_t v69 = *(void *)v73;
        *((_DWORD *)v74 + 2) = *(_DWORD *)(v73 + 8);
        *(void *)unint64_t v74 = v69;
        a1[537] = v74 + 12;
        if (++v64 == v67) {
          return v91 | (v95 << 32);
        }
      }
      else
      {
        uint64_t v73 = 12 * v64 + 4;
        unint64_t v74 = (char *)a1[537];
        unint64_t v75 = a1[538];
        if ((unint64_t)v74 < v75) {
          goto LABEL_96;
        }
LABEL_102:
        long long v76 = (char *)*v68;
        unint64_t v77 = 0xAAAAAAAAAAAAAAABLL * ((v74 - (unsigned char *)*v68) >> 2);
        unint64_t v78 = v77 + 1;
        if (v77 + 1 > 0x1555555555555555) {
          sub_2E00();
        }
        unint64_t v79 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v75 - (void)v76) >> 2);
        if (2 * v79 > v78) {
          unint64_t v78 = 2 * v79;
        }
        if (v79 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v80 = 0x1555555555555555;
        }
        else {
          unint64_t v80 = v78;
        }
        if (v80)
        {
          if (v80 > 0x1555555555555555) {
            goto LABEL_120;
          }
          uint64_t v81 = (char *)operator new(12 * v80);
        }
        else
        {
          uint64_t v81 = 0;
        }
        uint64_t v82 = *(void *)v73;
        int v83 = &v81[12 * v77];
        *((_DWORD *)v83 + 2) = *(_DWORD *)(v73 + 8);
        *(void *)int v83 = v82;
        unsigned int v84 = v83;
        if (v74 != v76)
        {
          do
          {
            uint64_t v85 = *(void *)(v74 - 12);
            v74 -= 12;
            int v86 = *((_DWORD *)v74 + 2);
            *(void *)(v84 - 12) = v85;
            v84 -= 12;
            *((_DWORD *)v84 + 2) = v86;
          }
          while (v74 != v76);
          unint64_t v74 = (char *)*v68;
        }
        a1[536] = v84;
        uint64_t v87 = v83 + 12;
        a1[537] = v83 + 12;
        a1[538] = &v81[12 * v80];
        if (v74) {
          operator delete(v74);
        }
        a1[537] = v87;
        if (++v64 == v67) {
          return v91 | (v95 << 32);
        }
      }
    }
  }
  return v91 | (v95 << 32);
}

void sub_C33A5C(void *a1, int a2, unint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7)
{
  unint64_t v8 = HIDWORD(a3);
  unsigned int v9 = (int *)a1[549];
  uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v10 >= 5u && (uint64_t v11 = v10[2]) != 0) {
    uint64_t v12 = (char *)v9 + v11 + *(unsigned int *)((char *)v9 + v11);
  }
  else {
    uint64_t v12 = 0;
  }
  unsigned int v13 = &v12[4 * a2 + 4 + *(unsigned int *)&v12[4 * a2 + 4]];
  int8x8_t v14 = &v13[-*(int *)v13];
  if (*(unsigned __int16 *)v14 >= 7u && (uint64_t v15 = *((unsigned __int16 *)v14 + 3)) != 0) {
    uint8x8_t v16 = &v13[v15 + *(unsigned int *)&v13[v15]];
  }
  else {
    uint8x8_t v16 = 0;
  }
  unint64_t v17 = &v16[12 * a3];
  if (a6) {
    int v18 = HIDWORD(a5) + 1;
  }
  else {
    int v18 = HIDWORD(a5);
  }
  unint64_t v19 = (void **)(a1 + 533);
  *(_DWORD *)(a7 + 8) = (v18 - BYTE4(a3)) | (sub_2D0F10(0xAAAAAAAAAAAAAAABLL* ((uint64_t)(a1[534] - a1[533]) >> 2)) << 8);
  int v20 = *((_DWORD *)v17 + 3) >> 8;
  unsigned int v21 = v20 + v8;
  unsigned int v22 = v20 + v18;
  if (v21 <= v22) {
    unsigned int v23 = v22;
  }
  else {
    unsigned int v23 = v21;
  }
  if (v21 < v22)
  {
    while (1)
    {
      unsigned int v25 = (int *)a1[549];
      unsigned int v26 = (unsigned __int16 *)((char *)v25 - *v25);
      if (*v26 >= 9u && (uint64_t v27 = v26[4]) != 0)
      {
        uint64_t v28 = (uint64_t)&v25[3 * v21 + 1] + v27 + *(unsigned int *)((char *)v25 + v27);
        unint64_t v29 = (char *)a1[534];
        unint64_t v30 = a1[535];
        if ((unint64_t)v29 >= v30) {
          goto LABEL_23;
        }
LABEL_17:
        uint64_t v24 = *(void *)v28;
        *((_DWORD *)v29 + 2) = *(_DWORD *)(v28 + 8);
        *(void *)unint64_t v29 = v24;
        a1[534] = v29 + 12;
        if (++v21 == v23) {
          break;
        }
      }
      else
      {
        uint64_t v28 = 12 * v21 + 4;
        unint64_t v29 = (char *)a1[534];
        unint64_t v30 = a1[535];
        if ((unint64_t)v29 < v30) {
          goto LABEL_17;
        }
LABEL_23:
        uint64_t v31 = (char *)*v19;
        unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((v29 - (unsigned char *)*v19) >> 2);
        unint64_t v33 = v32 + 1;
        if (v32 + 1 > 0x1555555555555555) {
          sub_2E00();
        }
        unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - (void)v31) >> 2);
        if (2 * v34 > v33) {
          unint64_t v33 = 2 * v34;
        }
        if (v34 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v35 = 0x1555555555555555;
        }
        else {
          unint64_t v35 = v33;
        }
        if (v35)
        {
          if (v35 > 0x1555555555555555) {
            sub_188D718();
          }
          uint64_t v36 = (char *)operator new(12 * v35);
        }
        else
        {
          uint64_t v36 = 0;
        }
        uint64_t v37 = *(void *)v28;
        unint64_t v38 = &v36[12 * v32];
        *((_DWORD *)v38 + 2) = *(_DWORD *)(v28 + 8);
        *(void *)unint64_t v38 = v37;
        uint64_t v39 = v38;
        if (v29 != v31)
        {
          do
          {
            uint64_t v40 = *(void *)(v29 - 12);
            v29 -= 12;
            int v41 = *((_DWORD *)v29 + 2);
            *(void *)(v39 - 12) = v40;
            v39 -= 12;
            *((_DWORD *)v39 + 2) = v41;
          }
          while (v29 != v31);
          unint64_t v29 = (char *)*v19;
        }
        a1[533] = v39;
        unsigned int v42 = v38 + 12;
        a1[534] = v38 + 12;
        a1[535] = &v36[12 * v35];
        if (v29) {
          operator delete(v29);
        }
        a1[534] = v42;
        if (++v21 == v23) {
          break;
        }
      }
    }
  }
  if (a6) {
    *(_DWORD *)(a1[534] - 4) = *(_DWORD *)(a1[534] - 8) + *(_DWORD *)(a1[534] - 12) * a6;
  }
  if (a4)
  {
    unint64_t v43 = (unint64_t)*(unsigned int *)(a7 + 8) >> 8;
    uint64_t v44 = a1[533];
    if (0xAAAAAAAAAAAAAAABLL * ((a1[534] - v44) >> 2) <= v43) {
      sub_66748();
    }
    *(_DWORD *)(v44 + 12 * v43 + 4) += *(_DWORD *)(v44 + 12 * v43) * a4;
  }
}

void sub_C33D84(void *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v6 = (int *)a1[549];
  unsigned int v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 >= 5u && (uint64_t v8 = v7[2]) != 0) {
    unsigned int v9 = (char *)v6 + v8 + *(unsigned int *)((char *)v6 + v8);
  }
  else {
    unsigned int v9 = 0;
  }
  uint64_t v10 = &v9[4 * a2 + 4 + *(unsigned int *)&v9[4 * a2 + 4]];
  uint64_t v11 = &v10[-*(int *)v10];
  if (*(unsigned __int16 *)v11 >= 7u && (uint64_t v12 = *((unsigned __int16 *)v11 + 3)) != 0) {
    unsigned int v13 = &v10[v12 + *(unsigned int *)&v10[v12]];
  }
  else {
    unsigned int v13 = 0;
  }
  int8x8_t v14 = &v13[12 * a3];
  uint64_t v15 = v14 + 4;
  int8x8_t v16 = (int8x8_t)a1[545];
  unint64_t v58 = a1 + 544;
  if (v16)
  {
    unint64_t v17 = (unint64_t)*((unsigned int *)v14 + 3) >> 8;
    uint8x8_t v18 = (uint8x8_t)vcnt_s8(v16);
    v18.i16[0] = vaddlv_u8(v18);
    if (v18.u32[0] > 1uLL)
    {
      unint64_t v19 = (unint64_t)*((unsigned int *)v14 + 3) >> 8;
      if (*(void *)&v16 <= v17) {
        unint64_t v19 = v17 % *(void *)&v16;
      }
    }
    else
    {
      unint64_t v19 = (v16.i32[0] - 1) & v17;
    }
    int v20 = *(uint64_t ***)(a1[544] + 8 * v19);
    if (v20)
    {
      unsigned int v21 = *v20;
      if (v21)
      {
        if (v18.u32[0] < 2uLL)
        {
          uint64_t v22 = *(void *)&v16 - 1;
          while (1)
          {
            uint64_t v24 = v21[1];
            if (v24 == v17)
            {
              if (*((_DWORD *)v21 + 4) == v17) {
                goto LABEL_54;
              }
            }
            else if ((v24 & v22) != v19)
            {
              goto LABEL_29;
            }
            unsigned int v21 = (uint64_t *)*v21;
            if (!v21) {
              goto LABEL_29;
            }
          }
        }
        do
        {
          unint64_t v23 = v21[1];
          if (v23 == v17)
          {
            if (*((_DWORD *)v21 + 4) == v17) {
              goto LABEL_54;
            }
          }
          else
          {
            if (v23 >= *(void *)&v16) {
              v23 %= *(void *)&v16;
            }
            if (v23 != v19) {
              break;
            }
          }
          unsigned int v21 = (uint64_t *)*v21;
        }
        while (v21);
      }
    }
  }
LABEL_29:
  int v25 = sub_2D0F10(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[534] - a1[533]) >> 2));
  unsigned int v59 = *((_DWORD *)v15 + 2) >> 8;
  uint64_t v60 = &v59;
  *((_DWORD *)sub_C34250((uint64_t)(a1 + 544), &v59, (uint64_t)&unk_20F06E0, &v60) + 5) = v25;
  unint64_t v17 = (unint64_t)*((unsigned int *)v15 + 2) >> 8;
  if (!*((_DWORD *)v15 + 2))
  {
    unint64_t v48 = a1[545];
    if (!v48) {
      goto LABEL_77;
    }
    goto LABEL_57;
  }
  unint64_t v57 = v15;
  unsigned int v26 = (void **)(a1 + 533);
  uint64_t v27 = v17 + *((_DWORD *)v15 + 2);
  do
  {
    while (1)
    {
      unint64_t v29 = (int *)a1[549];
      unint64_t v30 = (unsigned __int16 *)((char *)v29 - *v29);
      if (*v30 >= 9u)
      {
        uint64_t v31 = v30[4];
        if (v31) {
          break;
        }
      }
      uint64_t v32 = 12 * v17 + 4;
      unint64_t v33 = (char *)a1[534];
      unint64_t v34 = a1[535];
      if ((unint64_t)v33 >= v34) {
        goto LABEL_37;
      }
LABEL_31:
      uint64_t v28 = *(void *)v32;
      *((_DWORD *)v33 + 2) = *(_DWORD *)(v32 + 8);
      *(void *)unint64_t v33 = v28;
      a1[534] = v33 + 12;
      if (++v17 == v27) {
        goto LABEL_53;
      }
    }
    uint64_t v32 = (uint64_t)&v29[3 * v17 + 1] + v31 + *(unsigned int *)((char *)v29 + v31);
    unint64_t v33 = (char *)a1[534];
    unint64_t v34 = a1[535];
    if ((unint64_t)v33 < v34) {
      goto LABEL_31;
    }
LABEL_37:
    unint64_t v35 = (char *)*v26;
    unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((v33 - (unsigned char *)*v26) >> 2);
    unint64_t v37 = v36 + 1;
    if (v36 + 1 > 0x1555555555555555) {
      sub_2E00();
    }
    unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - (void)v35) >> 2);
    if (2 * v38 > v37) {
      unint64_t v37 = 2 * v38;
    }
    if (v38 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v39 = 0x1555555555555555;
    }
    else {
      unint64_t v39 = v37;
    }
    if (v39)
    {
      if (v39 > 0x1555555555555555) {
        sub_188D718();
      }
      uint64_t v40 = (char *)operator new(12 * v39);
    }
    else
    {
      uint64_t v40 = 0;
    }
    uint64_t v41 = *(void *)v32;
    unsigned int v42 = &v40[12 * v36];
    *((_DWORD *)v42 + 2) = *(_DWORD *)(v32 + 8);
    *(void *)unsigned int v42 = v41;
    unint64_t v43 = v42;
    if (v33 != v35)
    {
      do
      {
        uint64_t v44 = *(void *)(v33 - 12);
        v33 -= 12;
        int v45 = *((_DWORD *)v33 + 2);
        *(void *)(v43 - 12) = v44;
        v43 -= 12;
        *((_DWORD *)v43 + 2) = v45;
      }
      while (v33 != v35);
      unint64_t v33 = (char *)*v26;
    }
    unint64_t v46 = &v40[12 * v39];
    a1[533] = v43;
    unsigned int v47 = v42 + 12;
    a1[534] = v42 + 12;
    a1[535] = v46;
    if (v33) {
      operator delete(v33);
    }
    a1[534] = v47;
    ++v17;
  }
  while (v17 != v27);
LABEL_53:
  uint64_t v15 = v57;
  LODWORD(v17) = *((_DWORD *)v57 + 2) >> 8;
LABEL_54:
  unint64_t v48 = a1[545];
  if (!v48) {
LABEL_77:
  }
    sub_5AE8("unordered_map::at: key not found");
LABEL_57:
  uint8x8_t v49 = (uint8x8_t)vcnt_s8((int8x8_t)v48);
  v49.i16[0] = vaddlv_u8(v49);
  if (v49.u32[0] > 1uLL)
  {
    unint64_t v50 = v17;
    if (v48 <= v17) {
      unint64_t v50 = v17 % v48;
    }
  }
  else
  {
    unint64_t v50 = (v48 - 1) & v17;
  }
  uint64_t v51 = *(uint64_t ***)(*v58 + 8 * v50);
  if (!v51) {
    goto LABEL_77;
  }
  unint64_t v52 = *v51;
  if (!v52) {
    goto LABEL_77;
  }
  if (v49.u32[0] < 2uLL)
  {
    unint64_t v53 = v48 - 1;
    while (1)
    {
      uint64_t v55 = v52[1];
      if (v55 == v17)
      {
        if (*((_DWORD *)v52 + 4) == v17) {
          goto LABEL_76;
        }
      }
      else if ((v55 & v53) != v50)
      {
        goto LABEL_77;
      }
      unint64_t v52 = (uint64_t *)*v52;
      if (!v52) {
        goto LABEL_77;
      }
    }
  }
  while (2)
  {
    unint64_t v54 = v52[1];
    if (v54 != v17)
    {
      if (v54 >= v48) {
        v54 %= v48;
      }
      if (v54 != v50) {
        goto LABEL_77;
      }
      goto LABEL_66;
    }
    if (*((_DWORD *)v52 + 4) != v17)
    {
LABEL_66:
      unint64_t v52 = (uint64_t *)*v52;
      if (!v52) {
        goto LABEL_77;
      }
      continue;
    }
    break;
  }
LABEL_76:
  int v56 = *((_DWORD *)v52 + 5);
  *(_DWORD *)(a4 + 8) = *(unsigned __int8 *)(a4 + 8) | (v56 << 8);
  *(_DWORD *)(a4 + 8) = v15[8] | (v56 << 8);
}

uint64_t *sub_C34250(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == v7) {
                return v11;
              }
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v11 = (uint64_t *)*v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  uint64_t v15 = operator new(0x18uLL);
  void *v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = **a4;
  *((_DWORD *)v15 + 5) = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    unint64_t v7 = v4;
  }
  else
  {
    BOOL v18 = 1;
    if (v8 >= 3) {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v8);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t prime = v20;
    }
    else {
      size_t prime = v19;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_36;
    }
    if (prime < v8)
    {
      unint64_t v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        unint64_t v22 = std::__next_prime(v22);
      }
      else
      {
        uint64_t v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2) {
          unint64_t v22 = v24;
        }
      }
      if (prime <= v22) {
        size_t prime = v22;
      }
      if (prime < v8) {
LABEL_36:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        v7 %= v8;
      }
    }
    else
    {
      unint64_t v7 = (v8 - 1) & v7;
    }
  }
  uint64_t v25 = *(void *)a1;
  unsigned int v26 = *(void **)(*(void *)a1 + 8 * v7);
  if (v26)
  {
    void *v15 = *v26;
LABEL_59:
    *unsigned int v26 = v15;
    goto LABEL_60;
  }
  void *v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v25 + 8 * v7) = a1 + 16;
  if (*v15)
  {
    unint64_t v27 = *(void *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8) {
        v27 %= v8;
      }
    }
    else
    {
      v27 &= v8 - 1;
    }
    unsigned int v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_C34544(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_C34558(void *a1)
{
  uint64_t v2 = (void *)a1[552];
  if (v2)
  {
    do
    {
      float v17 = (void *)*v2;
      BOOL v18 = (void *)v2[2];
      if (v18) {
        operator delete(v18);
      }
      operator delete(v2);
      uint64_t v2 = v17;
    }
    while (v17);
  }
  uint64_t v3 = (void *)a1[550];
  a1[550] = 0;
  if (v3) {
    operator delete(v3);
  }
  unint64_t v4 = (void *)a1[546];
  if (v4)
  {
    do
    {
      unint64_t v5 = (void *)*v4;
      operator delete(v4);
      unint64_t v4 = v5;
    }
    while (v5);
  }
  uint64_t v6 = (void *)a1[544];
  a1[544] = 0;
  if (v6) {
    operator delete(v6);
  }
  unint64_t v7 = (void *)a1[541];
  if (v7)
  {
    do
    {
      unint64_t v8 = (void *)*v7;
      operator delete(v7);
      unint64_t v7 = v8;
    }
    while (v8);
  }
  uint8x8_t v9 = (void *)a1[539];
  a1[539] = 0;
  if (v9) {
    operator delete(v9);
  }
  uint64_t v10 = (void *)a1[536];
  if (v10)
  {
    a1[537] = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)a1[533];
  if (v11)
  {
    a1[534] = v11;
    operator delete(v11);
  }
  unint64_t v12 = (void *)a1[530];
  if (v12)
  {
    a1[531] = v12;
    operator delete(v12);
  }
  uint64_t v13 = (uint64_t *)a1[527];
  if (v13)
  {
    int8x8_t v14 = (uint64_t *)a1[528];
    uint64_t v15 = (void *)a1[527];
    if (v14 != v13)
    {
      float v16 = v14 - 1;
      do
      {
        uint64_t v20 = *v16;
        uint64_t *v16 = 0;
        if (v20) {
          sub_BDD258((uint64_t)v16, v20);
        }
      }
      while (v16-- != v13);
      uint64_t v15 = (void *)a1[527];
    }
    a1[528] = v13;
    operator delete(v15);
  }
  sub_49DA2C(a1 + 2);
  unsigned int v21 = (std::__shared_weak_count *)a1[1];
  if (!v21 || atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

uint64_t sub_C346F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)a2;
  uint64_t v5 = *(void *)(a2 + 8) - (void)v3;
  if (v5)
  {
    int v6 = sub_C2D304(a1, v3, v5 >> 4);
    *(unsigned char *)(a1 + 78) = 1;
    int v7 = *(_DWORD *)(a1 + 40);
    if (v6)
    {
      int v8 = v6;
      if (*(void *)(a1 + 80) <= 3uLL) {
        *(void *)(a1 + 80) = 4;
      }
      int v9 = v7;
      unint64_t v10 = -v7 & 3;
      if ((-v7 & 3) != 0)
      {
        uint64_t v11 = *(void *)(a1 + 56);
        int v12 = v7;
        if (v11 - *(void *)(a1 + 64) < v10)
        {
          sub_C089C8((uint64_t *)a1, v10);
          uint64_t v11 = *(void *)(a1 + 56);
          int v12 = *(_DWORD *)(a1 + 40);
        }
        uint64_t v13 = 0;
        *(void *)(a1 + 56) = v11 - v10;
        *(_DWORD *)(a1 + 40) = v12 + v10;
        do
          *(unsigned char *)(*(void *)(a1 + 56) + v13++) = 0;
        while (v10 != v13);
        int v9 = *(_DWORD *)(a1 + 40);
      }
      sub_C2D630(a1, 4, v9 - v8 + 4, 0);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 78) = 1;
    int v7 = *(_DWORD *)(a1 + 40);
  }

  return sub_C08BC0(a1, v7);
}

uint64_t sub_C34804(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)a2;
  uint64_t v5 = *(void *)(a2 + 8) - (void)v3;
  if (v5)
  {
    int v6 = sub_C2D1CC(a1, v3, 0xAAAAAAAAAAAAAAABLL * (v5 >> 2));
    *(unsigned char *)(a1 + 78) = 1;
    int v7 = *(_DWORD *)(a1 + 40);
    if (v6)
    {
      int v8 = v6;
      if (*(void *)(a1 + 80) <= 3uLL) {
        *(void *)(a1 + 80) = 4;
      }
      int v9 = v7;
      unint64_t v10 = -v7 & 3;
      if ((-v7 & 3) != 0)
      {
        uint64_t v11 = *(void *)(a1 + 56);
        int v12 = v7;
        if (v11 - *(void *)(a1 + 64) < v10)
        {
          sub_C089C8((uint64_t *)a1, v10);
          uint64_t v11 = *(void *)(a1 + 56);
          int v12 = *(_DWORD *)(a1 + 40);
        }
        uint64_t v13 = 0;
        *(void *)(a1 + 56) = v11 - v10;
        *(_DWORD *)(a1 + 40) = v12 + v10;
        do
          *(unsigned char *)(*(void *)(a1 + 56) + v13++) = 0;
        while (v10 != v13);
        int v9 = *(_DWORD *)(a1 + 40);
      }
      sub_C2D630(a1, 4, v9 - v8 + 4, 0);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 78) = 1;
    int v7 = *(_DWORD *)(a1 + 40);
  }

  return sub_C08BC0(a1, v7);
}

uint64_t sub_C3491C(uint64_t a1, void *a2, uint64_t a3)
{
  v14[0] = a1;
  v14[1] = a2;
  v14[2] = a3;
  uint64_t v4 = a2[1] - *a2;
  if (v4)
  {
    int v5 = sub_C34A30(a1, v4 >> 3, (uint64_t)v14);
    *(unsigned char *)(a1 + 78) = 1;
    int v6 = *(_DWORD *)(a1 + 40);
    if (v5)
    {
      int v7 = v5;
      if (*(void *)(a1 + 80) <= 3uLL) {
        *(void *)(a1 + 80) = 4;
      }
      int v8 = v6;
      unint64_t v9 = -v6 & 3;
      if ((-v6 & 3) != 0)
      {
        uint64_t v10 = *(void *)(a1 + 56);
        int v11 = v6;
        if (v10 - *(void *)(a1 + 64) < v9)
        {
          sub_C089C8((uint64_t *)a1, v9);
          uint64_t v10 = *(void *)(a1 + 56);
          int v11 = *(_DWORD *)(a1 + 40);
        }
        uint64_t v12 = 0;
        *(void *)(a1 + 56) = v10 - v9;
        *(_DWORD *)(a1 + 40) = v11 + v9;
        do
          *(unsigned char *)(*(void *)(a1 + 56) + v12++) = 0;
        while (v9 != v12);
        int v8 = *(_DWORD *)(a1 + 40);
      }
      sub_C2D630(a1, 4, v8 - v7 + 4, 0);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 78) = 1;
    int v6 = *(_DWORD *)(a1 + 40);
  }
  return sub_C08BC0(a1, v6);
}

uint64_t sub_C34A30(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2)
  {
    if (a2 >> 62) {
      sub_2E00();
    }
    uint64_t v6 = 4 * a2;
    int v7 = (char *)operator new(4 * a2);
    bzero(v7, 4 * a2);
    uint64_t v8 = 0;
    unint64_t v9 = &v7[v6];
    do
    {
      *(_DWORD *)&v7[4 * v8] = sub_C34804(*(void *)a3, *(void *)(**(void **)(a3 + 8) + 8 * v8));
      ++v8;
    }
    while (a2 != v8);
  }
  else
  {
    int v7 = 0;
    unint64_t v9 = 0;
  }
  if (v9 == v7) {
    uint64_t v10 = &unk_24F7358;
  }
  else {
    uint64_t v10 = v7;
  }
  uint64_t v11 = sub_C2D890(a1, (uint64_t)v10, (v9 - v7) >> 2);
  if (v7) {
    operator delete(v7);
  }
  return v11;
}

void sub_C34B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (v11) {
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_C34B44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch(*(_DWORD *)(a2 + 8))
  {
    case 0:
      unint64_t v12 = *(void *)a2;
      sub_C3548C(a1 + 3896, &v12, (uint64_t)&v10);
      int v5 = v10;
      uint64_t v6 = v11;
      if (v10 != v11)
      {
        do
          sub_C34F30(a1, *v5++, a3);
        while (v5 != v6);
        int v5 = v10;
      }
      if (v5)
      {
        uint64_t v11 = v5;
        operator delete(v5);
      }
      break;
    case 1:
      unint64_t v7 = *(void *)a2;
      sub_C34F30(a1, v7, a3);
      break;
    case 2:
    case 5:
    case 6:
      sub_C34CE8(a3, a2);
      break;
    case 3:
      unint64_t v8 = *(void *)a2;
      sub_C350FC(a1, v8, a3);
      break;
    case 4:
      unint64_t v9 = *(void *)a2;
      sub_C352C4(a1, v9, a3);
      break;
    default:
      return;
  }
}

void sub_C34CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_C34CE8(uint64_t a1, uint64_t a2)
{
  int v5 = *(_DWORD **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = *(_DWORD **)a1;
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)a1) >> 2);
    unint64_t v9 = v8 + 1;
    if (v8 + 1 > 0x1555555555555555) {
      sub_2E00();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)v7) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x1555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11 > 0x1555555555555555) {
      sub_188D718();
    }
    uint64_t v12 = 12 * v11;
    uint64_t v13 = (char *)operator new(12 * v11);
    int8x8_t v14 = &v13[12 * v8];
    unsigned int v15 = *(_DWORD *)(a2 + 8);
    *((_DWORD *)v14 + 2) = v15;
    if (v15 <= 6) {
      *(void *)int8x8_t v14 = *(void *)a2;
    }
    uint64_t v6 = v14 + 12;
    while (v5 != v7)
    {
      unsigned int v16 = *(v5 - 1);
      *((_DWORD *)v14 - 1) = v16;
      if (v16 <= 6) {
        *(void *)(v14 - 12) = *(void *)(v5 - 3);
      }
      v14 -= 12;
      v5 -= 3;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = &v13[v12];
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    v5[2] = *(_DWORD *)(a2 + 8);
    if (*(_DWORD *)(a2 + 8) <= 6u) {
      *(void *)int v5 = *(void *)a2;
    }
    uint64_t v6 = (char *)(v5 + 3);
  }
  *(void *)(a1 + 8) = v6;
  return v6 - 12;
}

_DWORD *sub_C34E38(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (unsigned int *)a1[1];
  unint64_t v4 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - v2) >> 2));
  if (v3 == (unsigned int *)v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  sub_C3584C(v2, v3, (uint64_t)&v7, v5, 1);
  __n128 result = sub_C37E08((_DWORD *)*a1, (_DWORD *)a1[1]);
  if ((_DWORD *)a1[1] != result) {
    a1[1] = (uint64_t)result;
  }
  return result;
}

void sub_C34F30(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v20 = a2;
  sub_C3557C(a1 + 3896, &v20, (uint64_t)&v18);
  unint64_t v4 = v18;
  uint64_t v5 = v19;
  if (v18 != v19)
  {
    uint64_t v6 = *(_DWORD **)(a3 + 8);
    do
    {
      while (1)
      {
        uint64_t v7 = *v4;
        unint64_t v8 = *(void *)(a3 + 16);
        if ((unint64_t)v6 >= v8) {
          break;
        }
        *(void *)uint64_t v6 = v7;
        v6[2] = 2;
        v6 += 3;
        *(void *)(a3 + 8) = v6;
        if (++v4 == v5) {
          goto LABEL_20;
        }
      }
      unint64_t v9 = *(_DWORD **)a3;
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *(void *)a3) >> 2);
      unint64_t v11 = v10 + 1;
      if (v10 + 1 > 0x1555555555555555) {
        sub_2E00();
      }
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)v9) >> 2);
      if (2 * v12 > v11) {
        unint64_t v11 = 2 * v12;
      }
      if (v12 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v13 = 0x1555555555555555;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13 > 0x1555555555555555) {
        sub_188D718();
      }
      int8x8_t v14 = (char *)operator new(12 * v13);
      unsigned int v15 = &v14[12 * v10];
      *(void *)unsigned int v15 = v7;
      *((_DWORD *)v15 + 2) = 2;
      unsigned int v16 = v15;
      while (v6 != v9)
      {
        unsigned int v17 = *(v6 - 1);
        *((_DWORD *)v16 - 1) = v17;
        if (v17 <= 6) {
          *(void *)(v16 - 12) = *(void *)(v6 - 3);
        }
        v16 -= 12;
        v6 -= 3;
      }
      uint64_t v6 = v15 + 12;
      *(void *)a3 = v16;
      *(void *)(a3 + 8) = v15 + 12;
      *(void *)(a3 + 16) = &v14[12 * v13];
      if (v9) {
        operator delete(v9);
      }
      *(void *)(a3 + 8) = v6;
      ++v4;
    }
    while (v4 != v5);
LABEL_20:
    unint64_t v4 = v18;
  }
  if (v4)
  {
    unint64_t v19 = v4;
    operator delete(v4);
  }
}

void sub_C350DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_C350FC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v20 = a2;
  sub_C3566C(a1, &v20, (uint64_t)&v18);
  unint64_t v4 = v18;
  uint64_t v5 = v19;
  if (v18 != v19)
  {
    uint64_t v6 = *(_DWORD **)(a3 + 8);
    do
    {
      while (1)
      {
        uint64_t v7 = *v4;
        unint64_t v8 = *(void *)(a3 + 16);
        if ((unint64_t)v6 >= v8) {
          break;
        }
        *(void *)uint64_t v6 = v7;
        v6[2] = 2;
        v6 += 3;
        *(void *)(a3 + 8) = v6;
        if (++v4 == v5) {
          goto LABEL_20;
        }
      }
      unint64_t v9 = *(_DWORD **)a3;
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *(void *)a3) >> 2);
      unint64_t v11 = v10 + 1;
      if (v10 + 1 > 0x1555555555555555) {
        sub_2E00();
      }
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)v9) >> 2);
      if (2 * v12 > v11) {
        unint64_t v11 = 2 * v12;
      }
      if (v12 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v13 = 0x1555555555555555;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13 > 0x1555555555555555) {
        sub_188D718();
      }
      int8x8_t v14 = (char *)operator new(12 * v13);
      unsigned int v15 = &v14[12 * v10];
      *(void *)unsigned int v15 = v7;
      *((_DWORD *)v15 + 2) = 2;
      unsigned int v16 = v15;
      while (v6 != v9)
      {
        unsigned int v17 = *(v6 - 1);
        *((_DWORD *)v16 - 1) = v17;
        if (v17 <= 6) {
          *(void *)(v16 - 12) = *(void *)(v6 - 3);
        }
        v16 -= 12;
        v6 -= 3;
      }
      uint64_t v6 = v15 + 12;
      *(void *)a3 = v16;
      *(void *)(a3 + 8) = v15 + 12;
      *(void *)(a3 + 16) = &v14[12 * v13];
      if (v9) {
        operator delete(v9);
      }
      *(void *)(a3 + 8) = v6;
      ++v4;
    }
    while (v4 != v5);
LABEL_20:
    unint64_t v4 = v18;
  }
  if (v4)
  {
    unint64_t v19 = v4;
    operator delete(v4);
  }
}

void sub_C352A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_C352C4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v20 = a2;
  sub_C3575C(a1, &v20, (uint64_t)&v18);
  unint64_t v4 = v18;
  uint64_t v5 = v19;
  if (v18 != v19)
  {
    uint64_t v6 = *(_DWORD **)(a3 + 8);
    do
    {
      while (1)
      {
        uint64_t v7 = *v4;
        unint64_t v8 = *(void *)(a3 + 16);
        if ((unint64_t)v6 >= v8) {
          break;
        }
        *(void *)uint64_t v6 = v7;
        v6[2] = 5;
        v6 += 3;
        *(void *)(a3 + 8) = v6;
        if (++v4 == v5) {
          goto LABEL_20;
        }
      }
      unint64_t v9 = *(_DWORD **)a3;
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *(void *)a3) >> 2);
      unint64_t v11 = v10 + 1;
      if (v10 + 1 > 0x1555555555555555) {
        sub_2E00();
      }
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)v9) >> 2);
      if (2 * v12 > v11) {
        unint64_t v11 = 2 * v12;
      }
      if (v12 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v13 = 0x1555555555555555;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13 > 0x1555555555555555) {
        sub_188D718();
      }
      int8x8_t v14 = (char *)operator new(12 * v13);
      unsigned int v15 = &v14[12 * v10];
      *(void *)unsigned int v15 = v7;
      *((_DWORD *)v15 + 2) = 5;
      unsigned int v16 = v15;
      while (v6 != v9)
      {
        unsigned int v17 = *(v6 - 1);
        *((_DWORD *)v16 - 1) = v17;
        if (v17 <= 6) {
          *(void *)(v16 - 12) = *(void *)(v6 - 3);
        }
        v16 -= 12;
        v6 -= 3;
      }
      uint64_t v6 = v15 + 12;
      *(void *)a3 = v16;
      *(void *)(a3 + 8) = v15 + 12;
      *(void *)(a3 + 16) = &v14[12 * v13];
      if (v9) {
        operator delete(v9);
      }
      *(void *)(a3 + 8) = v6;
      ++v4;
    }
    while (v4 != v5);
LABEL_20:
    unint64_t v4 = v18;
  }
  if (v4)
  {
    unint64_t v19 = v4;
    operator delete(v4);
  }
}

void sub_C3546C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_C3548C@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result = (int *)sub_8ED928(a1, *a2, 0, "station");
  uint64_t v6 = (unsigned __int16 *)((char *)result - *result);
  if (*v6 >= 0xDu && (uint64_t v7 = v6[6]) != 0)
  {
    unint64_t v8 = (unsigned int *)((char *)result + v7);
    uint64_t v9 = *v8;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    unint64_t v11 = (uint64_t *)((char *)v8 + v9 + 4);
    uint64_t v10 = *(unsigned int *)((char *)v8 + v9);
    int8x8_t v14 = (void **)a3;
    if (v10)
    {
      uint64_t v12 = 8 * v10;
      do
      {
        if (!*(unsigned char *)(a1 + 3888) || (__n128 result = (int *)sub_2AB7E4(*(void *)(a1 + 3872)), result))
        {
          uint64_t v13 = *v11;
          __n128 result = (int *)sub_2A98DC(&v14, &v13);
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_C35560(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int *sub_C3557C@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result = (int *)sub_8ED3D4(a1, *a2, 0, "hall");
  uint64_t v6 = (unsigned __int16 *)((char *)result - *result);
  if (*v6 >= 0xDu && (uint64_t v7 = v6[6]) != 0)
  {
    unint64_t v8 = (unsigned int *)((char *)result + v7);
    uint64_t v9 = *v8;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    unint64_t v11 = (uint64_t *)((char *)v8 + v9 + 4);
    uint64_t v10 = *(unsigned int *)((char *)v8 + v9);
    int8x8_t v14 = (void **)a3;
    if (v10)
    {
      uint64_t v12 = 8 * v10;
      do
      {
        if (!*(unsigned char *)(a1 + 3888) || (__n128 result = (int *)sub_2AB7E4(*(void *)(a1 + 3872)), result))
        {
          uint64_t v13 = *v11;
          __n128 result = (int *)sub_2A98DC(&v14, &v13);
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_C35650(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int *sub_C3566C@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result = (int *)sub_8F4388(a1, *a2, 0, "market");
  uint64_t v6 = (unsigned __int16 *)((char *)result - *result);
  if (*v6 >= 0x15u && (uint64_t v7 = v6[10]) != 0)
  {
    unint64_t v8 = (unsigned int *)((char *)result + v7);
    uint64_t v9 = *v8;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    unint64_t v11 = (uint64_t *)((char *)v8 + v9 + 4);
    uint64_t v10 = *(unsigned int *)((char *)v8 + v9);
    int8x8_t v14 = (void **)a3;
    if (v10)
    {
      uint64_t v12 = 8 * v10;
      do
      {
        if (!*(unsigned char *)(a1 + 3888) || (__n128 result = (int *)sub_2AB7E4(*(void *)(a1 + 3872)), result))
        {
          uint64_t v13 = *v11;
          __n128 result = (int *)sub_2A98DC(&v14, &v13);
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_C35740(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int *sub_C3575C@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result = (int *)sub_8EF9B8(a1, *a2, 0, "system");
  uint64_t v6 = (unsigned __int16 *)((char *)result - *result);
  if (*v6 >= 9u && (uint64_t v7 = v6[4]) != 0)
  {
    unint64_t v8 = (unsigned int *)((char *)result + v7);
    uint64_t v9 = *v8;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    unint64_t v11 = (uint64_t *)((char *)v8 + v9 + 4);
    uint64_t v10 = *(unsigned int *)((char *)v8 + v9);
    int8x8_t v14 = (void **)a3;
    if (v10)
    {
      uint64_t v12 = 8 * v10;
      do
      {
        if (!*(unsigned char *)(a1 + 3888) || (__n128 result = (int *)sub_2AB7E4(*(void *)(a1 + 3872)), result))
        {
          uint64_t v13 = *v11;
          __n128 result = (int *)sub_2A98DC(&v14, &v13);
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_C35830(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_C3584C(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = (unsigned int *)result;
LABEL_2:
  uint64_t v10 = a2 - 3;
  unint64_t v11 = v9;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v9 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (a2 - v11);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unsigned int v29 = *(a2 - 1);
          unsigned int v30 = v11[2];
          if ((int)v29 >= (int)v30)
          {
            switch(v29)
            {
              case 0u:
              case 1u:
              case 2u:
              case 3u:
              case 4u:
              case 5u:
              case 6u:
                if ((*(a2 - 2) | ((unint64_t)*(a2 - 3) << 32)) < (v11[1] | ((unint64_t)*v11 << 32))) {
                  goto LABEL_42;
                }
                break;
              default:
                return result;
            }
            return result;
          }
LABEL_42:
          uint64_t v31 = *(void *)v11;
          if (v11 == v10) {
            goto LABEL_75;
          }
          if (v30 == v29)
          {
            if (v30 >= 7) {
              return result;
            }
            *(void *)unint64_t v11 = *(void *)(a2 - 3);
            if (*(a2 - 1) != v29) {
              goto LABEL_79;
            }
          }
          else
          {
            if (v29 <= 6)
            {
              *(void *)unint64_t v11 = *(void *)(a2 - 3);
              unsigned int v29 = *(a2 - 1);
            }
            v11[2] = v29;
            unsigned int v29 = *(a2 - 1);
LABEL_75:
            if (v29 != v30)
            {
              if (v30 > 6)
              {
LABEL_80:
                *(a2 - 1) = v30;
                return result;
              }
LABEL_79:
              *(void *)uint64_t v10 = v31;
              goto LABEL_80;
            }
            if (v30 > 6) {
              return result;
            }
          }
          *(void *)uint64_t v10 = v31;
          return result;
        case 3uLL:
          return sub_C36150(v11, v11 + 3, v10);
        case 4uLL:
          return sub_C36FF4(v11, v11 + 3, v11 + 6, v10);
        case 5uLL:
          return sub_C3733C(v11, v11 + 3, v11 + 6, v11 + 9, v10);
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 287) {
      break;
    }
    if (v12 == 1)
    {
      if (v11 != a2)
      {
        unint64_t v32 = (v15 - 2) >> 1;
        unint64_t v33 = v32 + 1;
        unint64_t v34 = &v11[3 * v32];
        do
        {
          sub_C37798((uint64_t)v11, a3, v15, v34);
          v34 -= 3;
          --v33;
        }
        while (v33);
        unint64_t v35 = v14 / 0xCuLL;
        do
        {
          __n128 result = sub_C37A7C((uint64_t)v11, (uint64_t)a2, a3, v35);
          a2 -= 3;
        }
        while (v35-- > 2);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    unsigned int v17 = &v11[3 * (v15 >> 1)];
    if ((unint64_t)v14 < 0x601)
    {
      sub_C36150(&v9[3 * (v15 >> 1)], v9, v10);
      if (a5) {
        goto LABEL_32;
      }
      goto LABEL_24;
    }
    sub_C36150(v9, &v9[3 * (v15 >> 1)], v10);
    sub_C36150(v9 + 3, &v9[3 * v16 - 3], a2 - 6);
    sub_C36150(v9 + 6, &v9[3 * v16 + 3], a2 - 9);
    sub_C36150(&v9[3 * v16 - 3], &v9[3 * (v15 >> 1)], &v9[3 * v16 + 3]);
    unsigned int v18 = v9[2];
    uint64_t v19 = *(void *)v9;
    if (v15 >= 2)
    {
      unsigned int v20 = v9[3 * v16 + 2];
      if (v18 == v20)
      {
        uint64_t v10 = a2 - 3;
        if (v18 >= 7) {
          goto LABEL_23;
        }
        *(void *)uint64_t v9 = *(void *)v17;
        *(void *)unsigned int v17 = v19;
        if (a5) {
          goto LABEL_32;
        }
        goto LABEL_24;
      }
      if (v20 <= 6) {
        *(void *)uint64_t v9 = *(void *)v17;
      }
      v9[2] = v20;
    }
    unsigned int v21 = &v9[3 * v16];
    unsigned int v23 = v21[2];
    unint64_t v22 = v21 + 2;
    if (v23 == v18)
    {
      uint64_t v10 = a2 - 3;
      if (v18 <= 6) {
        *(void *)unsigned int v17 = v19;
      }
LABEL_23:
      if (a5) {
        goto LABEL_32;
      }
      goto LABEL_24;
    }
    uint64_t v10 = a2 - 3;
    if (v18 <= 6) {
      *(void *)unsigned int v17 = v19;
    }
    *unint64_t v22 = v18;
    if (a5) {
      goto LABEL_32;
    }
LABEL_24:
    signed int v24 = *(v9 - 1);
    signed int v25 = v9[2];
    if (v24 >= v25)
    {
      if (v25 >= v24)
      {
        switch(v24)
        {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
            if ((*(v9 - 2) | ((unint64_t)*(v9 - 3) << 32)) >= (v9[1] | ((unint64_t)*v9 << 32))) {
              break;
            }
            goto LABEL_32;
          default:
            break;
        }
      }
      __n128 result = (uint64_t)sub_C36654(v9, a2);
      unint64_t v11 = (unsigned int *)result;
      goto LABEL_37;
    }
LABEL_32:
    unsigned int v26 = sub_C36938(v9, a2);
    if ((v27 & 1) == 0) {
      goto LABEL_35;
    }
    BOOL v28 = sub_C36C10(v9, v26);
    unint64_t v11 = v26 + 3;
    __n128 result = sub_C36C10(v26 + 3, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v26;
      if (v28) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v28)
    {
LABEL_35:
      __n128 result = sub_C3584C(v9, v26, a3, -v13, a5 & 1);
      unint64_t v11 = v26 + 3;
LABEL_37:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)sub_C35E3C(v11, a2);
  }
  else
  {
    return (uint64_t)sub_C35FCC(v11, a2);
  }
}

unsigned int *sub_C35E3C(unsigned int *result, unsigned int *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result + 3;
    if (result + 3 != a2)
    {
      uint64_t v4 = 0;
      char v5 = result;
      do
      {
        char v6 = v5;
        char v5 = v3;
        unsigned int v7 = v6[5];
        if ((int)v7 >= (int)v6[2])
        {
          switch(v7)
          {
            case 0u:
            case 1u:
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 6u:
              if ((v6[4] | ((unint64_t)*v5 << 32)) < (v6[1] | ((unint64_t)*v6 << 32))) {
                goto LABEL_11;
              }
              break;
            default:
              break;
          }
        }
        else
        {
          if (v7 <= 6) {
LABEL_11:
          }
            uint64_t v2 = *(void *)v5;
          unint64_t v8 = __ROR8__(v2, 32);
          for (uint64_t i = v4; ; i -= 12)
          {
            uint64_t v10 = (char *)result + i;
            unsigned int v11 = *(unsigned int *)((char *)result + i + 20);
            unsigned int v12 = *(unsigned int *)((char *)result + i + 8);
            if (v11 == v12)
            {
              if (v11 <= 6) {
                *(void *)(v10 + 12) = *(void *)v10;
              }
            }
            else
            {
              if (v12 <= 6)
              {
                *(void *)(v10 + 12) = *(void *)v10;
                unsigned int v12 = *((_DWORD *)v10 + 2);
              }
              *((_DWORD *)v10 + 5) = v12;
            }
            if (!i)
            {
              unint64_t v15 = result;
              if (result[2] != v7) {
                goto LABEL_28;
              }
              goto LABEL_31;
            }
            signed int v13 = *(unsigned int *)((char *)result + i - 4);
            if ((int)v7 >= v13)
            {
              BOOL v14 = v13 < (int)v7 || v7 > 6;
              if (v14
                || v8 >= (*(unsigned int *)((char *)result + i - 8) | ((unint64_t)*(unsigned int *)((char *)result + i - 12) << 32)))
              {
                break;
              }
            }
          }
          unint64_t v15 = (unsigned int *)((char *)result + i);
          if (v15[2] != v7)
          {
LABEL_28:
            if (v7 <= 6) {
              *(void *)unint64_t v15 = v2;
            }
            v15[2] = v7;
            goto LABEL_5;
          }
LABEL_31:
          if (v7 <= 6) {
            *(void *)unint64_t v15 = v2;
          }
        }
LABEL_5:
        uint64_t v3 = v5 + 3;
        v4 += 12;
      }
      while (v5 + 3 != a2);
    }
  }
  return result;
}

unsigned int *sub_C35FCC(unsigned int *result, unsigned int *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result + 3;
    if (result + 3 != a2)
    {
      for (uint64_t i = result + 2; ; i += 3)
      {
        char v5 = result;
        __n128 result = v3;
        signed int v6 = v5[5];
        if (v6 < (int)v5[2]) {
          break;
        }
        switch(v6)
        {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
            if ((v5[4] | ((unint64_t)*result << 32)) < (v5[1] | ((unint64_t)*v5 << 32))) {
              goto LABEL_11;
            }
            break;
          default:
            break;
        }
LABEL_5:
        uint64_t v3 = result + 3;
        if (result + 3 == a2) {
          return result;
        }
      }
      if (v6 <= 6) {
LABEL_11:
      }
        uint64_t v2 = *(void *)result;
      unint64_t v7 = __ROR8__(v2, 32);
      for (uint64_t j = i; ; j -= 3)
      {
        unsigned int v9 = j[3];
        unsigned int v10 = *j;
        if (v9 == *j)
        {
          if (v9 <= 6)
          {
            *(void *)(j + 1) = *((void *)j - 1);
            signed int v11 = *(j - 3);
            if (v6 < v11) {
              continue;
            }
          }
          else
          {
            signed int v11 = *(j - 3);
            if (v6 < v11) {
              continue;
            }
          }
        }
        else
        {
          if (v10 <= 6)
          {
            *(void *)(j + 1) = *((void *)j - 1);
            unsigned int v10 = *j;
          }
          j[3] = v10;
          signed int v11 = *(j - 3);
          if (v6 < v11) {
            continue;
          }
        }
        BOOL v12 = v11 < v6 || v6 > 6;
        if (v12 || v7 >= (*(j - 4) | ((unint64_t)*(j - 5) << 32)))
        {
          if (*j == v6)
          {
            if (v6 <= 6) {
              *((void *)j - 1) = v2;
            }
          }
          else
          {
            if (v6 <= 6) {
              *((void *)j - 1) = v2;
            }
            *uint64_t j = v6;
          }
          goto LABEL_5;
        }
      }
    }
  }
  return result;
}

uint64_t sub_C36150(unsigned int *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3 = a2[2];
  unsigned int v4 = a1[2];
  if ((int)v3 < (int)v4)
  {
LABEL_2:
    unsigned int v5 = a3[2];
    if ((int)v5 < (int)v3)
    {
LABEL_3:
      uint64_t v6 = *(void *)a1;
      if (a1 != a3)
      {
        if (v4 == v5)
        {
          if (v4 < 7)
          {
            *(void *)a1 = *(void *)a3;
            if (a3[2] != v4) {
              goto LABEL_34;
            }
            goto LABEL_32;
          }
          return 1;
        }
        if (v5 <= 6)
        {
          *(void *)a1 = *(void *)a3;
          unsigned int v5 = a3[2];
        }
        a1[2] = v5;
        unsigned int v5 = a3[2];
      }
      if (v5 != v4)
      {
        if (v4 > 6)
        {
LABEL_35:
          a3[2] = v4;
          return 1;
        }
LABEL_34:
        *(void *)a3 = v6;
        goto LABEL_35;
      }
      if (v4 <= 6)
      {
LABEL_32:
        *(void *)a3 = v6;
        return 1;
      }
      return 1;
    }
    switch(v5)
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
        if ((a3[1] | ((unint64_t)*a3 << 32)) < (a2[1] | ((unint64_t)*a2 << 32))) {
          goto LABEL_3;
        }
        break;
      default:
        break;
    }
    uint64_t v9 = *(void *)a1;
    if (a1 != a2)
    {
      if (v4 == v3)
      {
        if (v4 >= 7)
        {
          unsigned int v4 = a2[2];
          signed int v14 = a3[2];
          if (v14 < (int)v4)
          {
LABEL_66:
            uint64_t v15 = *(void *)a2;
            if (a2 != a3)
            {
              if (v4 == v14)
              {
                if (v4 < 7)
                {
                  *(void *)a2 = *(void *)a3;
                  if (a3[2] != v4) {
                    goto LABEL_88;
                  }
                  goto LABEL_86;
                }
                return 2;
              }
              if (v14 <= 6)
              {
                *(void *)a2 = *(void *)a3;
                signed int v14 = a3[2];
              }
              a2[2] = v14;
              signed int v14 = a3[2];
            }
            if (v14 != v4)
            {
              if (v4 > 6)
              {
LABEL_89:
                a3[2] = v4;
                return 2;
              }
LABEL_88:
              *(void *)a3 = v15;
              goto LABEL_89;
            }
            if (v4 <= 6)
            {
LABEL_86:
              *(void *)a3 = v15;
              return 2;
            }
            return 2;
          }
          goto LABEL_91;
        }
        *(void *)a1 = *(void *)a2;
        if (a2[2] != v3) {
          goto LABEL_63;
        }
        goto LABEL_60;
      }
      if (v3 <= 6)
      {
        *(void *)a1 = *(void *)a2;
        unsigned int v3 = a2[2];
      }
      a1[2] = v3;
      unsigned int v3 = a2[2];
    }
    if (v3 != v4)
    {
      if (v4 > 6)
      {
LABEL_64:
        a2[2] = v4;
LABEL_65:
        signed int v14 = a3[2];
        if (v14 < (int)v4) {
          goto LABEL_66;
        }
        goto LABEL_91;
      }
LABEL_63:
      *(void *)a2 = v9;
      goto LABEL_64;
    }
    unsigned int v3 = v4;
    if (v4 > 6) {
      goto LABEL_65;
    }
LABEL_60:
    *(void *)a2 = v9;
    unsigned int v4 = v3;
    signed int v14 = a3[2];
    if (v14 < (int)v4) {
      goto LABEL_66;
    }
LABEL_91:
    if ((int)v4 >= v14)
    {
      switch(v14)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
          if ((a3[1] | ((unint64_t)*a3 << 32)) >= (a2[1] | ((unint64_t)*a2 << 32))) {
            return 1;
          }
          goto LABEL_66;
        default:
          return 1;
      }
    }
    return 1;
  }
  switch(v3)
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 4u:
    case 5u:
    case 6u:
      if ((a2[1] | ((unint64_t)*a2 << 32)) < (a1[1] | ((unint64_t)*a1 << 32))) {
        goto LABEL_2;
      }
      break;
    default:
      break;
  }
  signed int v7 = a3[2];
  if (v7 < (int)v3)
  {
LABEL_11:
    uint64_t v8 = *(void *)a2;
    if (a2 != a3)
    {
      if (v3 == v7)
      {
        if (v3 >= 7) {
          goto LABEL_42;
        }
        *(void *)a2 = *(void *)a3;
        if (a3[2] != v3)
        {
LABEL_45:
          *(void *)a3 = v8;
LABEL_46:
          a3[2] = v3;
          signed int v11 = a2[2];
          unsigned int v12 = a1[2];
          if (v11 >= (int)v12)
          {
LABEL_47:
            if ((int)v12 >= v11)
            {
              switch(v11)
              {
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                  if ((a2[1] | ((unint64_t)*a2 << 32)) < (a1[1] | ((unint64_t)*a1 << 32))) {
                    goto LABEL_50;
                  }
                  return 1;
                default:
                  return 1;
              }
            }
            return 1;
          }
LABEL_50:
          uint64_t v13 = *(void *)a1;
          if (a1 != a2)
          {
            if (v12 == v11)
            {
              if (v12 >= 7) {
                return 2;
              }
              *(void *)a1 = *(void *)a2;
              if (a2[2] != v11) {
                goto LABEL_79;
              }
              goto LABEL_76;
            }
            if (v11 <= 6)
            {
              *(void *)a1 = *(void *)a2;
              signed int v11 = a2[2];
            }
            a1[2] = v11;
            signed int v11 = a2[2];
          }
          if (v11 != v12)
          {
            if (v12 > 6)
            {
LABEL_80:
              a2[2] = v12;
              return 2;
            }
LABEL_79:
            *(void *)a2 = v13;
            goto LABEL_80;
          }
          if (v12 > 6) {
            return 2;
          }
LABEL_76:
          *(void *)a2 = v13;
          return 2;
        }
        goto LABEL_41;
      }
      if (v7 <= 6)
      {
        *(void *)a2 = *(void *)a3;
        signed int v7 = a3[2];
      }
      a2[2] = v7;
      signed int v7 = a3[2];
    }
    if (v7 != v3)
    {
      if (v3 > 6) {
        goto LABEL_46;
      }
      goto LABEL_45;
    }
    if (v3 > 6)
    {
LABEL_42:
      signed int v11 = a2[2];
      unsigned int v12 = a1[2];
      if (v11 >= (int)v12) {
        goto LABEL_47;
      }
      goto LABEL_50;
    }
LABEL_41:
    *(void *)a3 = v8;
    goto LABEL_42;
  }
  if ((int)v3 >= v7)
  {
    switch(v7)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
        if ((a3[1] | ((unint64_t)*a3 << 32)) >= (a2[1] | ((unint64_t)*a2 << 32))) {
          return 0;
        }
        goto LABEL_11;
      default:
        return 0;
    }
  }
  return 0;
}

unsigned int *sub_C36654(unsigned int *a1, unsigned int *a2)
{
  signed int v3 = a1[2];
  if (v3 > 6)
  {
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    signed int v6 = *(a2 - 1);
    if (v3 < v6) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v2 = *(void *)a1;
    unint64_t v4 = HIDWORD(*(void *)a1);
    uint64_t v5 = *(void *)a1 << 32;
    signed int v6 = *(a2 - 1);
    if (v3 < v6) {
      goto LABEL_10;
    }
  }
  BOOL v7 = v6 < v3 || v3 > 6;
  if (!v7 && (v5 | v4) < (*(a2 - 2) | ((unint64_t)*(a2 - 3) << 32)))
  {
LABEL_10:
    signed int v8 = a1[5];
    if (v3 >= v8)
    {
      unsigned int v12 = a1 + 4;
      do
      {
        if (v8 >= v3 && v3 <= 6 && (v5 | v4) < (*v12 | ((unint64_t)*(v12 - 1) << 32))) {
          break;
        }
        signed int v8 = v12[4];
        v12 += 3;
      }
      while (v3 >= v8);
      uint64_t i = v12 - 1;
    }
    else
    {
      uint64_t i = a1 + 3;
    }
    goto LABEL_28;
  }
  for (uint64_t i = a1 + 3; i < a2; i += 3)
  {
    signed int v10 = i[2];
    if (v3 < v10) {
      break;
    }
    BOOL v11 = v10 < v3 || v3 > 6;
    if (!v11 && (v5 | v4) < (i[1] | ((unint64_t)*i << 32))) {
      break;
    }
  }
LABEL_28:
  if (i < a2)
  {
    unint64_t v13 = v5 | v4;
    for (uint64_t j = a2 - 2;
          v3 < v6 || v6 >= v3 && v3 <= 6 && v13 < (*j | ((unint64_t)*(j - 1) << 32));
          j -= 3)
    {
      signed int v6 = *(j - 2);
    }
    a2 = j - 1;
  }
  if (i < a2)
  {
    unint64_t v15 = __ROR8__(v2, 32);
    while (1)
    {
      unsigned int v16 = i[2];
      uint64_t v17 = *(void *)i;
      unsigned int v18 = a2[2];
      if (v16 == v18) {
        break;
      }
      if (v18 <= 6)
      {
        *(void *)uint64_t i = *(void *)a2;
        unsigned int v18 = a2[2];
      }
      i[2] = v18;
      if (a2[2] == v16)
      {
        if (v16 <= 6) {
LABEL_47:
        }
          *(void *)a2 = v17;
LABEL_48:
        signed int v19 = i[5];
        if (v3 < v19) {
          goto LABEL_49;
        }
        goto LABEL_53;
      }
      if (v16 <= 6) {
        goto LABEL_51;
      }
LABEL_52:
      a2[2] = v16;
      signed int v19 = i[5];
      if (v3 < v19)
      {
LABEL_49:
        i += 3;
        goto LABEL_59;
      }
LABEL_53:
      unsigned int v20 = i + 4;
      do
      {
        if (v19 >= v3 && v3 <= 6 && v15 < (*v20 | ((unint64_t)*(v20 - 1) << 32))) {
          break;
        }
        signed int v19 = v20[4];
        v20 += 3;
      }
      while (v3 >= v19);
      uint64_t i = v20 - 1;
      do
      {
        do
        {
LABEL_59:
          a2 -= 3;
          signed int v21 = a2[2];
        }
        while (v3 < v21);
        BOOL v22 = v21 < v3 || v3 > 6;
      }
      while (!v22 && v15 < (a2[1] | ((unint64_t)*a2 << 32)));
      if (i >= a2) {
        goto LABEL_66;
      }
    }
    if (v16 >= 7) {
      goto LABEL_48;
    }
    *(void *)uint64_t i = *(void *)a2;
    if (a2[2] == v16) {
      goto LABEL_47;
    }
LABEL_51:
    *(void *)a2 = v17;
    goto LABEL_52;
  }
LABEL_66:
  unsigned int v23 = i - 3;
  if (i - 3 == a1)
  {
LABEL_70:
    if (*(i - 1) == v3) {
      goto LABEL_71;
    }
LABEL_76:
    if (v3 <= 6) {
      *(void *)unsigned int v23 = v2;
    }
    *(i - 1) = v3;
    return i;
  }
  unsigned int v24 = a1[2];
  unsigned int v25 = *(i - 1);
  if (v24 == v25)
  {
    if (v24 <= 6) {
      *(void *)a1 = *(void *)v23;
    }
    goto LABEL_70;
  }
  if (v25 <= 6)
  {
    *(void *)a1 = *(void *)(i - 3);
    unsigned int v25 = *(i - 1);
  }
  a1[2] = v25;
  if (*(i - 1) != v3) {
    goto LABEL_76;
  }
LABEL_71:
  if (v3 <= 6)
  {
    *(void *)unsigned int v23 = v2;
    return i;
  }
  return i;
}

unsigned int *sub_C36938(unsigned int *a1, unsigned int *a2)
{
  signed int v4 = a1[2];
  if (v4 <= 6)
  {
    uint64_t v3 = *a1;
    unsigned int v2 = a1[1];
  }
  uint64_t v5 = 0;
  unint64_t v6 = v2 | (unint64_t)(v3 << 32);
  while (1)
  {
    signed int v7 = a1[v5 + 5];
    if (v7 >= v4)
    {
      BOOL v8 = v4 < v7 || v7 > 6;
      if (v8 || (a1[v5 + 4] | ((unint64_t)a1[v5 + 3] << 32)) >= v6) {
        break;
      }
    }
    v5 += 3;
  }
  unint64_t v9 = (unint64_t)&a1[v5 + 3];
  if (v5 * 4)
  {
    signed int v10 = *(a2 - 1);
    if (v10 >= v4)
    {
      unint64_t v13 = a2 - 2;
      do
      {
        if (v4 >= v10 && v10 <= 6 && (*v13 | ((unint64_t)*(v13 - 1) << 32)) < v6) {
          break;
        }
        signed int v10 = *(v13 - 2);
        v13 -= 3;
      }
      while (v10 >= v4);
      a2 = v13 - 1;
    }
    else
    {
      a2 -= 3;
    }
  }
  else if (v9 < (unint64_t)a2)
  {
    BOOL v11 = a2 - 3;
    signed int v12 = *(a2 - 1);
    if (v12 >= v4)
    {
      unsigned int v26 = a2 - 2;
      do
      {
        a2 = v26 - 1;
        if (v4 < v12 || v12 > 6)
        {
          if (v9 >= (unint64_t)a2) {
            goto LABEL_16;
          }
        }
        else if ((*v26 | ((unint64_t)*(v26 - 1) << 32)) < v6 || v9 >= (unint64_t)a2)
        {
          goto LABEL_23;
        }
        v11 -= 3;
        signed int v12 = *(v26 - 2);
        v26 -= 3;
      }
      while (v12 >= v4);
      a2 = v26 - 1;
    }
    else
    {
LABEL_16:
      a2 = v11;
    }
  }
LABEL_23:
  signed int v14 = (unsigned int *)v9;
  if (v9 < (unint64_t)a2)
  {
    unint64_t v15 = a2;
    while (1)
    {
      unsigned int v16 = v14[2];
      uint64_t v17 = *(void *)v14;
      unsigned int v18 = v15[2];
      if (v16 == v18)
      {
        if (v16 < 7)
        {
          *(void *)signed int v14 = *(void *)v15;
          if (v15[2] != v16) {
            goto LABEL_36;
          }
LABEL_34:
          *(void *)unint64_t v15 = v17;
          goto LABEL_38;
        }
      }
      else
      {
        if (v18 <= 6)
        {
          *(void *)signed int v14 = *(void *)v15;
          unsigned int v18 = v15[2];
        }
        v14[2] = v18;
        if (v15[2] != v16)
        {
          if (v16 <= 6) {
LABEL_36:
          }
            *(void *)unint64_t v15 = v17;
          v15[2] = v16;
          goto LABEL_38;
        }
        if (v16 <= 6) {
          goto LABEL_34;
        }
      }
      do
      {
        do
        {
LABEL_38:
          v14 += 3;
          signed int v19 = v14[2];
        }
        while (v19 < v4);
        BOOL v20 = v4 < v19 || v19 > 6;
      }
      while (!v20 && (v14[1] | ((unint64_t)*v14 << 32)) < v6);
      signed int v21 = *(v15 - 1);
      if (v21 < v4)
      {
        v15 -= 3;
        if (v14 >= v15) {
          break;
        }
      }
      else
      {
        BOOL v22 = v15 - 2;
        do
        {
          if (v4 >= v21 && v21 <= 6 && (*v22 | ((unint64_t)*(v22 - 1) << 32)) < v6) {
            break;
          }
          signed int v21 = *(v22 - 2);
          v22 -= 3;
        }
        while (v21 >= v4);
        unint64_t v15 = v22 - 1;
        if (v14 >= v15) {
          break;
        }
      }
    }
  }
  if (v14 - 3 != a1)
  {
    unsigned int v23 = a1[2];
    unsigned int v24 = *(v14 - 1);
    if (v23 != v24)
    {
      if (v24 <= 6)
      {
        *(void *)a1 = *(void *)(v14 - 3);
        unsigned int v24 = *(v14 - 1);
      }
      a1[2] = v24;
      if (*(v14 - 1) == v4) {
        goto LABEL_56;
      }
      goto LABEL_62;
    }
    if (v23 <= 6) {
      *(void *)a1 = *(void *)(v14 - 3);
    }
  }
  if (*(v14 - 1) == v4)
  {
LABEL_56:
    if (v4 <= 6)
    {
      *(v14 - 3) = v3;
      *(v14 - 2) = v2;
    }
    return v14 - 3;
  }
LABEL_62:
  if (v4 <= 6)
  {
    *(v14 - 3) = v3;
    *(v14 - 2) = v2;
  }
  *(v14 - 1) = v4;
  return v14 - 3;
}

BOOL sub_C36C10(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      signed int v21 = *(a2 - 1);
      unsigned int v22 = a1[2];
      if (v21 < (int)v22)
      {
LABEL_36:
        unsigned int v23 = a2 - 3;
        uint64_t v24 = *(void *)a1;
        if (a2 - 3 != a1)
        {
          if (v22 == v21)
          {
            if (v22 >= 7) {
              return result;
            }
            *(void *)a1 = *(void *)(a2 - 3);
            if (*(a2 - 1) != v21) {
              goto LABEL_57;
            }
            goto LABEL_55;
          }
          if (v21 <= 6)
          {
            *(void *)a1 = *(void *)(a2 - 3);
            signed int v21 = *(a2 - 1);
          }
          a1[2] = v21;
          signed int v21 = *(a2 - 1);
        }
        if (v21 != v22)
        {
          if (v22 > 6)
          {
LABEL_58:
            *(a2 - 1) = v22;
            return result;
          }
LABEL_57:
          *(void *)unsigned int v23 = v24;
          goto LABEL_58;
        }
        if (v22 > 6) {
          return result;
        }
LABEL_55:
        *(void *)unsigned int v23 = v24;
        return result;
      }
      if ((int)v22 >= v21)
      {
        switch(v21)
        {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
            if ((*(a2 - 2) | ((unint64_t)*(a2 - 3) << 32)) < (a1[1] | ((unint64_t)*a1 << 32))) {
              goto LABEL_36;
            }
            break;
          default:
            return result;
        }
      }
      return result;
    case 3uLL:
      sub_C36150(a1, a1 + 3, a2 - 3);
      return 1;
    case 4uLL:
      sub_C36FF4(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_C3733C(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      unint64_t v6 = a1 + 6;
      sub_C36150(a1, a1 + 3, a1 + 6);
      BOOL v8 = a1 + 9;
      if (a1 + 9 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      while (1)
      {
        signed int v11 = v8[2];
        if (v11 >= (int)v6[2])
        {
          switch(v11)
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
              if ((v8[1] | ((unint64_t)*v8 << 32)) < (v6[1] | ((unint64_t)*v6 << 32))) {
                goto LABEL_13;
              }
              goto LABEL_7;
            default:
              goto LABEL_7;
          }
        }
        if (v11 <= 6)
        {
LABEL_13:
          uint64_t v7 = *(void *)v8;
          int v12 = 1;
        }
        else
        {
          int v12 = 0;
        }
        unint64_t v13 = __ROR8__(v7, 32);
        for (uint64_t i = v9; ; i -= 12)
        {
          unint64_t v15 = (char *)a1 + i;
          unsigned int v16 = *(unsigned int *)((char *)a1 + i + 44);
          unsigned int v17 = *(unsigned int *)((char *)a1 + i + 32);
          if (v16 == v17)
          {
            if (v16 <= 6) {
              *(void *)(v15 + 36) = *((void *)v15 + 3);
            }
          }
          else
          {
            if (v17 <= 6)
            {
              *(void *)(v15 + 36) = *((void *)v15 + 3);
              unsigned int v17 = *((_DWORD *)v15 + 8);
            }
            *((_DWORD *)v15 + 11) = v17;
          }
          if (i == -24)
          {
            uint64_t v20 = (uint64_t)a1;
            if (a1[2] != v11) {
              goto LABEL_30;
            }
            goto LABEL_33;
          }
          signed int v18 = *(unsigned int *)((char *)a1 + i + 20);
          if (v11 >= v18)
          {
            BOOL v19 = v18 < v11 || v11 > 6;
            if (v19
              || v13 >= (*(unsigned int *)((char *)a1 + i + 16) | ((unint64_t)*(unsigned int *)((char *)a1 + i + 12) << 32)))
            {
              break;
            }
          }
        }
        uint64_t v20 = (uint64_t)a1 + i + 24;
        if (*(_DWORD *)(v20 + 8) != v11)
        {
LABEL_30:
          if (v12) {
            *(void *)uint64_t v20 = v7;
          }
          *(_DWORD *)(v20 + 8) = v11;
          goto LABEL_6;
        }
LABEL_33:
        if (v12) {
          *(void *)uint64_t v20 = v7;
        }
LABEL_6:
        if (++v10 == 8) {
          return v8 + 3 == a2;
        }
LABEL_7:
        unint64_t v6 = v8;
        v9 += 12;
        v8 += 3;
        if (v8 == a2) {
          return 1;
        }
      }
  }
}

uint64_t sub_C36FF4(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result = sub_C36150(a1, a2, a3);
  unsigned int v9 = a4[2];
  unsigned int v10 = a3[2];
  if ((int)v9 < (int)v10)
  {
LABEL_2:
    uint64_t v11 = *(void *)a3;
    if (a3 != a4)
    {
      if (v10 == v9)
      {
        if (v10 >= 7) {
          goto LABEL_18;
        }
        *(void *)a3 = *(void *)a4;
        if (a4[2] != v9)
        {
LABEL_21:
          *(void *)a4 = v11;
LABEL_22:
          a4[2] = v10;
          signed int v12 = a3[2];
          unsigned int v13 = a2[2];
          if (v12 >= (int)v13)
          {
LABEL_23:
            if ((int)v13 >= v12)
            {
              switch(v12)
              {
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                  if ((a3[1] | ((unint64_t)*a3 << 32)) < (a2[1] | ((unint64_t)*a2 << 32))) {
                    goto LABEL_26;
                  }
                  break;
                default:
                  return result;
              }
            }
            return result;
          }
LABEL_26:
          uint64_t v14 = *(void *)a2;
          if (a2 != a3)
          {
            if (v13 == v12)
            {
              if (v13 >= 7) {
                goto LABEL_37;
              }
              *(void *)a2 = *(void *)a3;
              if (a3[2] != v12)
              {
LABEL_40:
                *(void *)a3 = v14;
LABEL_41:
                a3[2] = v13;
                signed int v15 = a2[2];
                unsigned int v16 = a1[2];
                if (v15 >= (int)v16)
                {
LABEL_42:
                  if ((int)v16 >= v15)
                  {
                    switch(v15)
                    {
                      case 0:
                      case 1:
                      case 2:
                      case 3:
                      case 4:
                      case 5:
                      case 6:
                        if ((a2[1] | ((unint64_t)*a2 << 32)) < (a1[1] | ((unint64_t)*a1 << 32))) {
                          goto LABEL_45;
                        }
                        break;
                      default:
                        return result;
                    }
                  }
                  return result;
                }
LABEL_45:
                uint64_t v17 = *(void *)a1;
                if (a1 != a2)
                {
                  if (v16 == v15)
                  {
                    if (v16 >= 7) {
                      return result;
                    }
                    *(void *)a1 = *(void *)a2;
                    if (a2[2] != v15) {
                      goto LABEL_57;
                    }
                    goto LABEL_55;
                  }
                  if (v15 <= 6)
                  {
                    *(void *)a1 = *(void *)a2;
                    signed int v15 = a2[2];
                  }
                  a1[2] = v15;
                  signed int v15 = a2[2];
                }
                if (v15 != v16)
                {
                  if (v16 > 6)
                  {
LABEL_58:
                    a2[2] = v16;
                    return result;
                  }
LABEL_57:
                  *(void *)a2 = v17;
                  goto LABEL_58;
                }
                if (v16 > 6) {
                  return result;
                }
LABEL_55:
                *(void *)a2 = v17;
                return result;
              }
              goto LABEL_36;
            }
            if (v12 <= 6)
            {
              *(void *)a2 = *(void *)a3;
              signed int v12 = a3[2];
            }
            a2[2] = v12;
            signed int v12 = a3[2];
          }
          if (v12 != v13)
          {
            if (v13 > 6) {
              goto LABEL_41;
            }
            goto LABEL_40;
          }
          if (v13 > 6)
          {
LABEL_37:
            signed int v15 = a2[2];
            unsigned int v16 = a1[2];
            if (v15 >= (int)v16) {
              goto LABEL_42;
            }
            goto LABEL_45;
          }
LABEL_36:
          *(void *)a3 = v14;
          goto LABEL_37;
        }
        goto LABEL_17;
      }
      if (v9 <= 6)
      {
        *(void *)a3 = *(void *)a4;
        unsigned int v9 = a4[2];
      }
      a3[2] = v9;
      unsigned int v9 = a4[2];
    }
    if (v9 != v10)
    {
      if (v10 > 6) {
        goto LABEL_22;
      }
      goto LABEL_21;
    }
    if (v10 > 6)
    {
LABEL_18:
      signed int v12 = a3[2];
      unsigned int v13 = a2[2];
      if (v12 >= (int)v13) {
        goto LABEL_23;
      }
      goto LABEL_26;
    }
LABEL_17:
    *(void *)a4 = v11;
    goto LABEL_18;
  }
  if (v10 <= v9)
  {
    switch(v9)
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
        if ((a4[1] | ((unint64_t)*a4 << 32)) >= (a3[1] | ((unint64_t)*a3 << 32))) {
          return result;
        }
        goto LABEL_2;
      default:
        JUMPOUT(0);
    }
  }
  return result;
}

uint64_t sub_C3733C(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t result = sub_C36FF4(a1, a2, a3, a4);
  unsigned int v11 = a5[2];
  unsigned int v12 = a4[2];
  if ((int)v11 < (int)v12)
  {
LABEL_2:
    uint64_t v13 = *(void *)a4;
    if (a4 != a5)
    {
      if (v12 == v11)
      {
        if (v12 >= 7) {
          goto LABEL_18;
        }
        *(void *)a4 = *(void *)a5;
        if (a5[2] != v11)
        {
LABEL_21:
          *(void *)a5 = v13;
LABEL_22:
          a5[2] = v12;
          signed int v14 = a4[2];
          unsigned int v15 = a3[2];
          if (v14 >= (int)v15)
          {
LABEL_23:
            if ((int)v15 >= v14)
            {
              switch(v14)
              {
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                  if ((a4[1] | ((unint64_t)*a4 << 32)) < (a3[1] | ((unint64_t)*a3 << 32))) {
                    goto LABEL_26;
                  }
                  break;
                default:
                  return result;
              }
            }
            return result;
          }
LABEL_26:
          uint64_t v16 = *(void *)a3;
          if (a3 != a4)
          {
            if (v15 == v14)
            {
              if (v15 >= 7) {
                goto LABEL_37;
              }
              *(void *)a3 = *(void *)a4;
              if (a4[2] != v14)
              {
LABEL_40:
                *(void *)a4 = v16;
LABEL_41:
                a4[2] = v15;
                signed int v17 = a3[2];
                unsigned int v18 = a2[2];
                if (v17 >= (int)v18)
                {
LABEL_42:
                  if ((int)v18 >= v17)
                  {
                    switch(v17)
                    {
                      case 0:
                      case 1:
                      case 2:
                      case 3:
                      case 4:
                      case 5:
                      case 6:
                        if ((a3[1] | ((unint64_t)*a3 << 32)) < (a2[1] | ((unint64_t)*a2 << 32))) {
                          goto LABEL_45;
                        }
                        break;
                      default:
                        return result;
                    }
                  }
                  return result;
                }
LABEL_45:
                uint64_t v19 = *(void *)a2;
                if (a2 != a3)
                {
                  if (v18 == v17)
                  {
                    if (v18 >= 7) {
                      goto LABEL_56;
                    }
                    *(void *)a2 = *(void *)a3;
                    if (a3[2] != v17)
                    {
LABEL_59:
                      *(void *)a3 = v19;
LABEL_60:
                      a3[2] = v18;
                      signed int v20 = a2[2];
                      unsigned int v21 = a1[2];
                      if (v20 >= (int)v21)
                      {
LABEL_61:
                        if ((int)v21 >= v20)
                        {
                          switch(v20)
                          {
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                              if ((a2[1] | ((unint64_t)*a2 << 32)) < (a1[1] | ((unint64_t)*a1 << 32))) {
                                goto LABEL_64;
                              }
                              break;
                            default:
                              return result;
                          }
                        }
                        return result;
                      }
LABEL_64:
                      uint64_t v22 = *(void *)a1;
                      if (a1 != a2)
                      {
                        if (v21 == v20)
                        {
                          if (v21 >= 7) {
                            return result;
                          }
                          *(void *)a1 = *(void *)a2;
                          if (a2[2] != v20) {
                            goto LABEL_76;
                          }
                          goto LABEL_74;
                        }
                        if (v20 <= 6)
                        {
                          *(void *)a1 = *(void *)a2;
                          signed int v20 = a2[2];
                        }
                        a1[2] = v20;
                        signed int v20 = a2[2];
                      }
                      if (v20 != v21)
                      {
                        if (v21 > 6)
                        {
LABEL_77:
                          a2[2] = v21;
                          return result;
                        }
LABEL_76:
                        *(void *)a2 = v22;
                        goto LABEL_77;
                      }
                      if (v21 > 6) {
                        return result;
                      }
LABEL_74:
                      *(void *)a2 = v22;
                      return result;
                    }
                    goto LABEL_55;
                  }
                  if (v17 <= 6)
                  {
                    *(void *)a2 = *(void *)a3;
                    signed int v17 = a3[2];
                  }
                  a2[2] = v17;
                  signed int v17 = a3[2];
                }
                if (v17 != v18)
                {
                  if (v18 > 6) {
                    goto LABEL_60;
                  }
                  goto LABEL_59;
                }
                if (v18 > 6)
                {
LABEL_56:
                  signed int v20 = a2[2];
                  unsigned int v21 = a1[2];
                  if (v20 >= (int)v21) {
                    goto LABEL_61;
                  }
                  goto LABEL_64;
                }
LABEL_55:
                *(void *)a3 = v19;
                goto LABEL_56;
              }
              goto LABEL_36;
            }
            if (v14 <= 6)
            {
              *(void *)a3 = *(void *)a4;
              signed int v14 = a4[2];
            }
            a3[2] = v14;
            signed int v14 = a4[2];
          }
          if (v14 != v15)
          {
            if (v15 > 6) {
              goto LABEL_41;
            }
            goto LABEL_40;
          }
          if (v15 > 6)
          {
LABEL_37:
            signed int v17 = a3[2];
            unsigned int v18 = a2[2];
            if (v17 >= (int)v18) {
              goto LABEL_42;
            }
            goto LABEL_45;
          }
LABEL_36:
          *(void *)a4 = v16;
          goto LABEL_37;
        }
        goto LABEL_17;
      }
      if (v11 <= 6)
      {
        *(void *)a4 = *(void *)a5;
        unsigned int v11 = a5[2];
      }
      a4[2] = v11;
      unsigned int v11 = a5[2];
    }
    if (v11 != v12)
    {
      if (v12 > 6) {
        goto LABEL_22;
      }
      goto LABEL_21;
    }
    if (v12 > 6)
    {
LABEL_18:
      signed int v14 = a4[2];
      unsigned int v15 = a3[2];
      if (v14 >= (int)v15) {
        goto LABEL_23;
      }
      goto LABEL_26;
    }
LABEL_17:
    *(void *)a5 = v13;
    goto LABEL_18;
  }
  if (v12 <= v11)
  {
    switch(v11)
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
        if ((a5[1] | ((unint64_t)*a5 << 32)) >= (a4[1] | ((unint64_t)*a4 << 32))) {
          return result;
        }
        goto LABEL_2;
      default:
        JUMPOUT(0);
    }
  }
  return result;
}

uint64_t sub_C37798(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  if (a3 >= 2)
  {
    int64_t v6 = (unint64_t)(a3 - 2) >> 1;
    if (v6 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 2)))
    {
      uint64_t v7 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 2)) | 1;
      BOOL v8 = (unsigned int *)(result + 12 * v7);
      if (0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2 < a3)
      {
        signed int v9 = *(_DWORD *)(result + 12 * v7 + 8);
        if (v9 >= (int)v8[5])
        {
          switch(v9)
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
              unint64_t v5 = v8[4];
              unint64_t v4 = v5 | ((unint64_t)v8[3] << 32);
              if ((v8[1] | ((unint64_t)*v8 << 32)) < v4) {
                goto LABEL_5;
              }
              break;
            default:
              break;
          }
        }
        else
        {
LABEL_5:
          v8 += 3;
          uint64_t v7 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2;
        }
      }
      unsigned int v10 = v8[2];
      unsigned int v11 = a4[2];
      if ((int)v10 >= (int)v11)
      {
        switch(v10)
        {
          case 0u:
          case 1u:
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 6u:
            unint64_t v4 = v8[1] | ((unint64_t)*v8 << 32);
            unint64_t v5 = a4[1] | ((unint64_t)*a4 << 32);
            if (v4 >= v5) {
              goto LABEL_11;
            }
            break;
          default:
LABEL_11:
            if (v11 <= 6)
            {
              unint64_t v5 = *a4;
              LODWORD(v4) = a4[1];
            }
            while (2)
            {
              unsigned int v12 = v8;
              if (a4 != v8)
              {
                if (a4[2] == v10)
                {
                  if (v10 <= 6) {
                    *(void *)a4 = *(void *)v8;
                  }
                }
                else
                {
                  if (v10 <= 6)
                  {
                    *(void *)a4 = *(void *)v8;
                    unsigned int v10 = v8[2];
                  }
                  a4[2] = v10;
                }
              }
              if (v6 >= v7)
              {
                uint64_t v13 = 2 * v7;
                uint64_t v14 = (2 * v7) | 1;
                uint64_t v7 = v14;
                BOOL v8 = (unsigned int *)(result + 12 * v14);
                uint64_t v15 = v13 + 2;
                if (v15 < a3)
                {
                  signed int v16 = *(_DWORD *)(result + 12 * v14 + 8);
                  if (v16 >= (int)v8[5])
                  {
                    switch(v16)
                    {
                      case 0:
                      case 1:
                      case 2:
                      case 3:
                      case 4:
                      case 5:
                      case 6:
                        if ((v8[1] | ((unint64_t)*v8 << 32)) < (v8[4] | ((unint64_t)v8[3] << 32))) {
                          goto LABEL_23;
                        }
                        break;
                      default:
                        break;
                    }
                  }
                  else
                  {
LABEL_23:
                    v8 += 3;
                    uint64_t v7 = v15;
                  }
                }
                unsigned int v10 = v8[2];
                if ((int)v10 >= (int)v11)
                {
                  a4 = v12;
                  switch(v10)
                  {
                    case 0u:
                    case 1u:
                    case 2u:
                    case 3u:
                    case 4u:
                    case 5u:
                    case 6u:
                      a4 = v12;
                      if ((v8[1] | ((unint64_t)*v8 << 32)) >= (v4 | (v5 << 32))) {
                        continue;
                      }
                      break;
                    default:
                      continue;
                  }
                }
              }
              break;
            }
            if (v12[2] == v11)
            {
              if (v11 <= 6)
              {
                *unsigned int v12 = v5;
                v12[1] = v4;
              }
            }
            else
            {
              if (v11 <= 6)
              {
                *unsigned int v12 = v5;
                v12[1] = v4;
              }
              v12[2] = v11;
            }
            break;
        }
      }
    }
  }
  return result;
}

uint64_t sub_C37A7C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unsigned int v5 = *(_DWORD *)(result + 8);
    if (v5 <= 6) {
      uint64_t v4 = *(void *)result;
    }
    uint64_t v6 = 0;
    uint64_t v7 = (unsigned int *)result;
    do
    {
      BOOL v8 = v7;
      uint64_t v9 = v6 + 1;
      v7 += 3 * v6 + 3;
      uint64_t v10 = 2 * v6;
      uint64_t v6 = (2 * v6) | 1;
      uint64_t v11 = v10 + 2;
      if (v11 < a4)
      {
        signed int v12 = v8[3 * v9 + 2];
        if (v12 >= (int)v7[5])
        {
          switch(v12)
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
              if ((v7[1] | ((unint64_t)*v7 << 32)) < (v7[4] | ((unint64_t)v7[3] << 32))) {
                goto LABEL_9;
              }
              break;
            default:
              break;
          }
        }
        else
        {
LABEL_9:
          v7 += 3;
          uint64_t v6 = v11;
        }
      }
      if (v8 != v7)
      {
        unsigned int v13 = v8[2];
        unsigned int v14 = v7[2];
        if (v13 == v14)
        {
          if (v13 <= 6) {
            *(void *)BOOL v8 = *(void *)v7;
          }
        }
        else
        {
          if (v14 <= 6)
          {
            *(void *)BOOL v8 = *(void *)v7;
            unsigned int v14 = v7[2];
          }
          v8[2] = v14;
        }
      }
    }
    while (v6 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
    uint64_t v15 = (void *)(a2 - 12);
    unsigned int v16 = v7[2];
    if (v7 != (unsigned int *)(a2 - 12))
    {
      unsigned int v17 = *(_DWORD *)(a2 - 4);
      if (v16 == v17)
      {
        if (v16 <= 6) {
          *(void *)uint64_t v7 = *v15;
        }
        uint64_t v18 = (uint64_t)(v7 + 3);
        if (*(_DWORD *)(a2 - 4) == v5)
        {
LABEL_23:
          if (v5 <= 6) {
            void *v15 = v4;
          }
          return sub_C37C6C(result, v18, a3, 0xAAAAAAAAAAAAAAABLL * ((v18 - result) >> 2));
        }
      }
      else
      {
        if (v17 <= 6)
        {
          *(void *)uint64_t v7 = *(void *)(a2 - 12);
          unsigned int v17 = *(_DWORD *)(a2 - 4);
        }
        v7[2] = v17;
        uint64_t v18 = (uint64_t)(v7 + 3);
        if (*(_DWORD *)(a2 - 4) == v5) {
          goto LABEL_23;
        }
      }
      if (v5 <= 6) {
        void *v15 = v4;
      }
      *(_DWORD *)(a2 - 4) = v5;
      return sub_C37C6C(result, v18, a3, 0xAAAAAAAAAAAAAAABLL * ((v18 - result) >> 2));
    }
    if (v16 == v5)
    {
      if (v5 <= 6) {
        *(void *)uint64_t v7 = v4;
      }
    }
    else
    {
      if (v5 <= 6) {
        *(void *)uint64_t v7 = v4;
      }
      v7[2] = v5;
    }
  }
  return result;
}

uint64_t sub_C37C6C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v7 = v6 >> 1;
    BOOL v8 = (unsigned int *)(result + 12 * (v6 >> 1));
    unsigned int v9 = v8[2];
    unsigned int v10 = *(_DWORD *)(a2 - 4);
    if ((int)v9 >= (int)v10)
    {
      if (v10 <= v9)
      {
        switch(v9)
        {
          case 0u:
          case 1u:
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 6u:
            unint64_t v4 = v8[1] | ((unint64_t)*v8 << 32);
            unint64_t v5 = *(unsigned int *)(a2 - 8) | ((unint64_t)*(unsigned int *)(a2 - 12) << 32);
            if (v4 >= v5) {
              return result;
            }
            goto LABEL_3;
          default:
            JUMPOUT(0);
        }
      }
    }
    else
    {
LABEL_3:
      uint64_t v11 = (unsigned int *)(a2 - 12);
      if (v10 <= 6)
      {
        unint64_t v5 = *(unsigned int *)(a2 - 12);
        LODWORD(v4) = *(_DWORD *)(a2 - 8);
      }
      while (1)
      {
        signed int v12 = v8;
        if (v11 != v8)
        {
          unsigned int v13 = v11[2];
          unsigned int v14 = v8[2];
          if (v13 == v14)
          {
            if (v13 <= 6) {
              *(void *)uint64_t v11 = *(void *)v12;
            }
          }
          else
          {
            if (v14 <= 6)
            {
              *(void *)uint64_t v11 = *(void *)v12;
              unsigned int v14 = v12[2];
            }
            v11[2] = v14;
          }
        }
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        BOOL v8 = (unsigned int *)(result + 12 * v7);
        signed int v15 = v8[2];
        uint64_t v11 = v12;
        if (v15 >= (int)v10)
        {
          switch(v15)
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
              uint64_t v11 = v12;
              if ((v8[1] | ((unint64_t)*v8 << 32)) < (v4 | (v5 << 32))) {
                continue;
              }
              break;
            default:
              goto LABEL_16;
          }
          break;
        }
      }
LABEL_16:
      if (v12[2] == v10)
      {
        if (v10 <= 6)
        {
          *signed int v12 = v5;
          v12[1] = v4;
        }
      }
      else
      {
        if (v10 <= 6)
        {
          *signed int v12 = v5;
          v12[1] = v4;
        }
        v12[2] = v10;
      }
    }
  }
  return result;
}

_DWORD *sub_C37E08(_DWORD *result, _DWORD *a2)
{
  if (result == a2) {
    return a2;
  }
  unsigned int v2 = result + 3;
  if (result + 3 == a2) {
    return a2;
  }
  uint64_t v3 = result;
  while (1)
  {
    unint64_t v4 = v3;
    uint64_t v3 = v2;
    switch(*(v2 - 1))
    {
      case 0xFFFFFFFF:
        goto LABEL_12;
      case 0:
        if (*(v2 - 3) != *v2) {
          goto LABEL_5;
        }
        unint64_t v5 = v2 - 2;
        break;
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
        if (*(v2 - 3) != *v2) {
          goto LABEL_5;
        }
        unint64_t v5 = v4 + 1;
        break;
      default:
        goto LABEL_5;
    }
    if (*v5 == v2[1]) {
      break;
    }
LABEL_5:
    v2 += 3;
    result += 3;
    if (v3 + 3 == a2) {
      return a2;
    }
  }
LABEL_12:
  unint64_t v6 = v2 - 3;
  if (v2 - 3 != a2)
  {
    while (1)
    {
      v3 += 3;
      if (v3 == a2) {
        return v6 + 3;
      }
      unsigned int v7 = v3[2];
      switch(v6[2])
      {
        case 0xFFFFFFFF:
          continue;
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
          if (*v6 != *v3 || v6[1] != v3[1]) {
            goto LABEL_20;
          }
          continue;
        default:
LABEL_20:
          BOOL v8 = v6 + 3;
          if (v3 - 3 == v6) {
            goto LABEL_15;
          }
          if (v6[5] == v7)
          {
            if (v7 > 6) {
              goto LABEL_15;
            }
            *BOOL v8 = *(void *)v3;
            v6 += 3;
          }
          else
          {
            if (v7 <= 6)
            {
              *BOOL v8 = *(void *)v3;
              unsigned int v7 = v3[2];
            }
            v6[5] = v7;
LABEL_15:
            v6 += 3;
          }
          break;
      }
    }
  }
  return result;
}

void sub_C37FD8(int a1, void *__p)
{
  if (__p)
  {
    unsigned int v2 = __p;
    do
    {
      uint64_t v3 = v2;
      unsigned int v2 = (void *)*v2;
      if (v3[5])
      {
        uint64_t v4 = v3[3];
        if (!v4) {
          operator delete[]();
        }
        (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
      }
      if (*((unsigned char *)v3 + 32))
      {
        uint64_t v5 = v3[3];
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      operator delete(v3);
    }
    while (v2);
  }
}

void sub_C380DC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243EBD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_C380FC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243EBD0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_C38150(uint64_t a1)
{
  return sub_C38348(a1 + 24);
}

uint64_t sub_C3815C(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v6 = *a2;
  *a2 = 0;
  *(void *)uint64_t result = v6;
  *(void *)(result + 8) = a2[1];
  a2[1] = 0;
  uint64_t v9 = a2[2];
  unsigned int v7 = a2 + 2;
  uint64_t v8 = v9;
  *(void *)(result + 16) = v9;
  uint64_t v10 = v7[1];
  *(void *)(result + 24) = v10;
  *(_DWORD *)(result + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v8 + 8);
    unint64_t v12 = *(void *)(result + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(v6 + 8 * v11) = result + 16;
    void *v7 = 0;
    v7[1] = 0;
  }
  *(void *)(result + 40) = *(void *)a3;
  *(unsigned char *)(result + 48) = *(unsigned char *)(a3 + 8);
  *(void *)(result + 56) = *(void *)(a3 + 16);
  *(_OWORD *)(result + 64) = *(_OWORD *)(a3 + 24);
  *(void *)(result + 80) = *(void *)(a3 + 40);
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 8) = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  uint64_t v13 = *a4;
  *a4 = 0;
  *(void *)(result + 88) = v13;
  *(void *)(result + 96) = a4[1];
  a4[1] = 0;
  uint64_t v16 = a4[2];
  unsigned int v14 = a4 + 2;
  uint64_t v15 = v16;
  *(void *)(result + 104) = v16;
  uint64_t v17 = v14[1];
  *(void *)(result + 112) = v17;
  *(_DWORD *)(result + 120) = *((_DWORD *)v14 + 4);
  if (v17)
  {
    unint64_t v18 = *(void *)(v15 + 8);
    unint64_t v19 = *(void *)(result + 96);
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v18 >= v19) {
        v18 %= v19;
      }
    }
    else
    {
      v18 &= v19 - 1;
    }
    *(void *)(v13 + 8 * v18) = result + 104;
    void *v14 = 0;
    v14[1] = 0;
  }
  uint64_t v20 = *a5;
  *a5 = 0;
  *(void *)(result + 128) = v20;
  *(void *)(result + 136) = a5[1];
  a5[1] = 0;
  uint64_t v23 = a5[2];
  unsigned int v21 = a5 + 2;
  uint64_t v22 = v23;
  *(void *)(result + 144) = v23;
  uint64_t v24 = v21[1];
  *(void *)(result + 152) = v24;
  *(_DWORD *)(result + 160) = *((_DWORD *)v21 + 4);
  if (v24)
  {
    unint64_t v25 = *(void *)(v22 + 8);
    unint64_t v26 = *(void *)(result + 136);
    if ((v26 & (v26 - 1)) != 0)
    {
      if (v25 >= v26) {
        v25 %= v26;
      }
    }
    else
    {
      v25 &= v26 - 1;
    }
    *(void *)(v20 + 8 * v25) = result + 144;
    *unsigned int v21 = 0;
    v21[1] = 0;
  }
  uint64_t v27 = *a6;
  *a6 = 0;
  *(void *)(result + 168) = v27;
  *(void *)(result + 176) = a6[1];
  a6[1] = 0;
  uint64_t v30 = a6[2];
  BOOL v28 = a6 + 2;
  uint64_t v29 = v30;
  *(void *)(result + 184) = v30;
  uint64_t v31 = v28[1];
  *(void *)(result + 192) = v31;
  *(_DWORD *)(result + 200) = *((_DWORD *)v28 + 4);
  if (v31)
  {
    unint64_t v32 = *(void *)(v29 + 8);
    unint64_t v33 = *(void *)(result + 176);
    if ((v33 & (v33 - 1)) != 0)
    {
      if (v32 >= v33) {
        v32 %= v33;
      }
    }
    else
    {
      v32 &= v33 - 1;
    }
    *(void *)(v27 + 8 * v32) = result + 184;
    *BOOL v28 = 0;
    v28[1] = 0;
  }
  return result;
}

uint64_t sub_C38348(uint64_t a1)
{
  sub_C37FD8(a1 + 168, *(void **)(a1 + 184));
  unsigned int v2 = *(void **)(a1 + 168);
  *(void *)(a1 + 168) = 0;
  if (v2) {
    operator delete(v2);
  }
  sub_C37FD8(a1 + 128, *(void **)(a1 + 144));
  uint64_t v3 = *(void **)(a1 + 128);
  *(void *)(a1 + 128) = 0;
  if (v3) {
    operator delete(v3);
  }
  sub_C37FD8(a1 + 88, *(void **)(a1 + 104));
  uint64_t v4 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v4) {
    operator delete(v4);
  }
  if (*(void *)(a1 + 56))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    if (!v5) {
      operator delete[]();
    }
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v6 = *(void *)(a1 + 40);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  unsigned int v7 = *(void **)(a1 + 16);
  if (v7)
  {
    do
    {
      uint64_t v8 = (void *)*v7;
      operator delete(v7);
      unsigned int v7 = v8;
    }
    while (v8);
  }
  uint64_t v9 = *(void **)a1;
  *(void *)a1 = 0;
  if (v9) {
    operator delete(v9);
  }
  return a1;
}

void sub_C384B8(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t prime = vcvtps_u32_f32((float)(unint64_t)(*(void *)(a2 + 24) + ((uint64_t)(a3[1] - *a3) >> 5)) / *(float *)(a2 + 32));
  if (prime == 1)
  {
    unint64_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    unint64_t prime = std::__next_prime(prime);
  }
  int8x8_t v5 = *(int8x8_t *)(a2 + 8);
  if (prime > *(void *)&v5) {
    goto LABEL_18;
  }
  if (prime >= *(void *)&v5) {
    return;
  }
  size_t v6 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 24) / *(float *)(a2 + 32));
  if (*(void *)&v5 >= 3uLL)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] <= 1uLL)
    {
      uint64_t v8 = 1 << -(char)__clz(v6 - 1);
      if (v6 >= 2) {
        size_t v6 = v8;
      }
      if (prime <= v6) {
        unint64_t prime = v6;
      }
      if (prime >= *(void *)&v5) {
        return;
      }
LABEL_18:
      sub_B6C0(a2, prime);
      return;
    }
  }
  size_t v9 = std::__next_prime(v6);
  if (prime <= v9) {
    unint64_t prime = v9;
  }
  if (prime < *(void *)&v5) {
    goto LABEL_18;
  }
}

void *sub_C385D0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v9 = (0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) >> 33);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = (0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) >> 33);
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    unint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      uint64_t v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v13[1];
            if (v16 == v9)
            {
              if (*((_DWORD *)v13 + 5) == HIDWORD(v7) && *((_DWORD *)v13 + 4) == v7) {
                return v13;
              }
            }
            else if ((v16 & (v10 - 1)) != v4)
            {
              goto LABEL_31;
            }
            uint64_t v13 = (void *)*v13;
            if (!v13) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 5) == HIDWORD(v7) && *((_DWORD *)v13 + 4) == v7) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v4) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  unint64_t v18 = (void *)(a1 + 16);
  uint64_t v13 = operator new(0x30uLL);
  *uint64_t v13 = 0;
  v13[1] = v9;
  uint64_t v19 = **a4;
  v13[4] = 0;
  v13[5] = 0;
  v13[2] = v19;
  v13[3] = 0;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
    if (v23)
    {
LABEL_34:
      *uint64_t v13 = *v23;
LABEL_69:
      *uint64_t v23 = v13;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v10 >= 3) {
      BOOL v24 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v10);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_45;
    }
    if (prime < v10)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v10) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v31 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v4 = v9 % v10;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v23) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v9;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * v9);
        if (v23) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v31 & v9;
      uint64_t v22 = *(void *)a1;
      uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v31 & v9));
      if (v23) {
        goto LABEL_34;
      }
    }
  }
  *uint64_t v13 = *v18;
  void *v18 = v13;
  *(void *)(v22 + 8 * v4) = v18;
  if (*v13)
  {
    unint64_t v32 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v32 >= v10) {
        v32 %= v10;
      }
    }
    else
    {
      v32 &= v10 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_C38930(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3AEA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_C38944(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v8 = (0xC4CEB9FE1A85EC53 * (v7 ^ (v7 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v7 ^ (v7 >> 33))) >> 33);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = (0xC4CEB9FE1A85EC53 * (v7 ^ (v7 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v7 ^ (v7 >> 33))) >> 33);
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint8x8_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      unint64_t v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v12[1];
            if (v15 == v8)
            {
              if (*((_DWORD *)v12 + 5) == HIDWORD(v6) && *((_DWORD *)v12 + 4) == v6) {
                return v12;
              }
            }
            else if ((v15 & (v9 - 1)) != v3)
            {
              goto LABEL_31;
            }
            unint64_t v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 5) == HIDWORD(v6) && *((_DWORD *)v12 + 4) == v6) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          unint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_31:
  uint64_t v17 = (void *)(a1 + 16);
  unint64_t v12 = operator new(0x48uLL);
  *unint64_t v12 = 0;
  v12[1] = v8;
  uint64_t v18 = *(void *)(a3 + 8);
  v12[2] = *(void *)a3;
  v12[3] = v18;
  *((unsigned char *)v12 + 32) = *(unsigned char *)(a3 + 16);
  v12[5] = *(void *)(a3 + 24);
  *((_OWORD *)v12 + 3) = *(_OWORD *)(a3 + 32);
  v12[8] = *(void *)(a3 + 48);
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (v9 && (float)(v20 * (float)v9) >= v19)
  {
    uint64_t v21 = *(void *)a1;
    uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
    if (v22)
    {
LABEL_34:
      *unint64_t v12 = *v22;
LABEL_69:
      *uint64_t v22 = v12;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v23 = 1;
    if (v9 >= 3) {
      BOOL v23 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v9);
    unint64_t v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25) {
      size_t prime = v25;
    }
    else {
      size_t prime = v24;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v27 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v27) {
      goto LABEL_45;
    }
    if (prime < *(void *)&v27)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v27 < 3uLL || (uint8x8_t v29 = (uint8x8_t)vcnt_s8(v27), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < *(void *)&v27) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    unint64_t v31 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        unint64_t v3 = v8 % v9;
        uint64_t v21 = *(void *)a1;
        uint64_t v22 = *(void **)(*(void *)a1 + 8 * (v8 % v9));
        if (v22) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v3 = v8;
        uint64_t v21 = *(void *)a1;
        uint64_t v22 = *(void **)(*(void *)a1 + 8 * v8);
        if (v22) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v3 = v31 & v8;
      uint64_t v21 = *(void *)a1;
      uint64_t v22 = *(void **)(*(void *)a1 + 8 * (v31 & v8));
      if (v22) {
        goto LABEL_34;
      }
    }
  }
  *unint64_t v12 = *v17;
  *uint64_t v17 = v12;
  *(void *)(v21 + 8 * v3) = v17;
  if (*v12)
  {
    unint64_t v32 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v32 >= v9) {
        v32 %= v9;
      }
    }
    else
    {
      v32 &= v9 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_C38CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_C38CF4(v11, v10);
  _Unwind_Resume(a1);
}

void sub_C38CF4(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (__p[5])
    {
      uint64_t v3 = __p[3];
      if (!v3) {
        operator delete[]();
      }
      (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
    }
    if (*((unsigned char *)__p + 32))
    {
      uint64_t v4 = __p[3];
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void *sub_C38DE8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v9 = (0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) >> 33);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = (0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) >> 33);
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    unint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      unint64_t v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v13[1];
            if (v16 == v9)
            {
              if (*((_DWORD *)v13 + 5) == HIDWORD(v7) && *((_DWORD *)v13 + 4) == v7) {
                return v13;
              }
            }
            else if ((v16 & (v10 - 1)) != v4)
            {
              goto LABEL_31;
            }
            unint64_t v13 = (void *)*v13;
            if (!v13) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 5) == HIDWORD(v7) && *((_DWORD *)v13 + 4) == v7) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v4) {
              break;
            }
          }
          unint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  uint64_t v18 = (void *)(a1 + 16);
  unint64_t v13 = operator new(0x30uLL);
  *unint64_t v13 = 0;
  v13[1] = v9;
  uint64_t v19 = **a4;
  v13[4] = 0;
  v13[5] = 0;
  v13[2] = v19;
  v13[3] = 0;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    BOOL v23 = *(void **)(*(void *)a1 + 8 * v4);
    if (v23)
    {
LABEL_34:
      *unint64_t v13 = *v23;
LABEL_69:
      *BOOL v23 = v13;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v10 >= 3) {
      BOOL v24 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v10);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_45;
    }
    if (prime < v10)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v10) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v31 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v4 = v9 % v10;
        uint64_t v22 = *(void *)a1;
        BOOL v23 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v23) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v9;
        uint64_t v22 = *(void *)a1;
        BOOL v23 = *(void **)(*(void *)a1 + 8 * v9);
        if (v23) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v31 & v9;
      uint64_t v22 = *(void *)a1;
      BOOL v23 = *(void **)(*(void *)a1 + 8 * (v31 & v9));
      if (v23) {
        goto LABEL_34;
      }
    }
  }
  *unint64_t v13 = *v18;
  void *v18 = v13;
  *(void *)(v22 + 8 * v4) = v18;
  if (*v13)
  {
    unint64_t v32 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v32 >= v10) {
        v32 %= v10;
      }
    }
    else
    {
      v32 &= v10 - 1;
    }
    BOOL v23 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_C39148(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3AEA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_C3915C(uint64_t result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = result;
LABEL_2:
  uint8x8_t v11 = a2 - 32;
  unint64_t v12 = (char *)v10;
LABEL_3:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    uint64_t v10 = (uint64_t)v12;
    uint64_t v14 = a2 - v12;
    unint64_t v15 = v14 >> 5;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          *(void *)&long long v56 = a2 - 32;
          *((void *)&v56 + 1) = a2 - 24;
          *(void *)&long long v57 = a2 - 12;
          *((void *)&v57 + 1) = a2 - 8;
          unint64_t v58 = a2 - 4;
          unsigned int v59 = a2 - 3;
          uint64_t v60 = a2 - 2;
          int v61 = a2 - 1;
          uint64_t v48 = v10;
          uint64_t v49 = v10 + 8;
          uint64_t v50 = v10 + 20;
          uint64_t v51 = v10 + 24;
          uint64_t v52 = v10 + 28;
          uint64_t v53 = v10 + 29;
          uint64_t v54 = v10 + 30;
          uint64_t v55 = v10 + 31;
          unsigned int v34 = *(_DWORD *)(v10 + 4);
          unsigned int v35 = *((_DWORD *)a2 - 7);
          BOOL v36 = v35 > v34;
          if (v35 < v34
            || (unsigned int v37 = *(_DWORD *)v10, !v36) && *(_DWORD *)v11 < v37
            || (uint64_t v47 = HIDWORD(*(void *)v11), v34 >= v47)
            && (v37 >= *(void *)v11 || v34 > v47)
            && (uint64_t result = sub_C3AE40((uint64_t)v62, (uint64_t)&v56, (uint64_t)&v48), result))
          {
            long long v38 = *(_OWORD *)(v10 + 16);
            long long v56 = *(_OWORD *)v10;
            long long v57 = v38;
            long long v39 = *((_OWORD *)a2 - 1);
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
            *(_OWORD *)(v10 + 16) = v39;
            *(_OWORD *)uint8x8_t v11 = v56;
            *((_OWORD *)a2 - 1) = v57;
          }
          break;
        case 3uLL:
          uint64_t result = sub_C39AB0((uint64_t *)v10, (long long *)(v10 + 32), (long long *)a2 - 2);
          break;
        case 4uLL:
          uint64_t result = sub_C3B008(v10, (long long *)(v10 + 32), (long long *)(v10 + 64), (long long *)a2 - 2);
          break;
        case 5uLL:
          uint64_t result = sub_C3B280(v10, (long long *)(v10 + 32), (long long *)(v10 + 64), (long long *)(v10 + 96), (long long *)a2 - 2);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 767)
    {
      if (a5) {
        return (uint64_t)sub_C39634((_OWORD *)v10, a2);
      }
      else {
        return sub_C3989C(v10, a2);
      }
    }
    uint64_t v16 = v13;
    if (v13 == 1) {
      break;
    }
    unint64_t v17 = v15 >> 1;
    unint64_t v18 = v10 + 32 * (v15 >> 1);
    if ((unint64_t)v14 <= 0x1000)
    {
      sub_C39AB0((uint64_t *)v18, (long long *)v10, (long long *)a2 - 2);
      if (a5) {
        goto LABEL_19;
      }
    }
    else
    {
      sub_C39AB0((uint64_t *)v10, (long long *)v18, (long long *)a2 - 2);
      uint64_t v19 = 32 * v17;
      float v20 = (long long *)(32 * v17 + v10 - 32);
      sub_C39AB0((uint64_t *)(v10 + 32), v20, (long long *)a2 - 4);
      sub_C39AB0((uint64_t *)(v10 + 64), (long long *)(v10 + 32 + v19), (long long *)a2 - 6);
      sub_C39AB0((uint64_t *)v20, (long long *)v18, (long long *)(v10 + 32 + v19));
      long long v21 = *(_OWORD *)(v10 + 16);
      long long v56 = *(_OWORD *)v10;
      long long v57 = v21;
      long long v22 = *(_OWORD *)(v18 + 16);
      *(_OWORD *)uint64_t v10 = *(_OWORD *)v18;
      *(_OWORD *)(v10 + 16) = v22;
      long long v23 = v57;
      *(_OWORD *)unint64_t v18 = v56;
      *(_OWORD *)(v18 + 16) = v23;
      if (a5) {
        goto LABEL_19;
      }
    }
    BOOL v24 = (uint64_t *)(v10 - 32);
    *(void *)&long long v56 = v10 - 32;
    *((void *)&v56 + 1) = v10 - 24;
    *(void *)&long long v57 = v10 - 12;
    *((void *)&v57 + 1) = v10 - 8;
    unint64_t v58 = (char *)(v10 - 4);
    unsigned int v59 = (char *)(v10 - 3);
    uint64_t v60 = (char *)(v10 - 2);
    int v61 = (char *)(v10 - 1);
    uint64_t v48 = v10;
    uint64_t v49 = v10 + 8;
    uint64_t v50 = v10 + 20;
    uint64_t v51 = v10 + 24;
    uint64_t v52 = v10 + 28;
    uint64_t v53 = v10 + 29;
    uint64_t v54 = v10 + 30;
    uint64_t v55 = v10 + 31;
    unsigned int v25 = *(_DWORD *)(v10 + 4);
    unsigned int v26 = *(_DWORD *)(v10 - 28);
    BOOL v27 = v26 > v25;
    if (v26 >= v25)
    {
      unsigned int v28 = *(_DWORD *)v10;
      if (v27 || *(_DWORD *)v24 >= v28)
      {
        if ((uint64_t v29 = *v24, v30 = HIDWORD(*v24), v25 < v30)
          || v28 < v29 && v25 <= v30
          || !sub_C3AE40((uint64_t)v62, (uint64_t)&v56, (uint64_t)&v48))
        {
          uint64_t result = (uint64_t)sub_C39EF0((char *)v10, a2);
          unint64_t v12 = (char *)result;
          goto LABEL_23;
        }
      }
    }
LABEL_19:
    unint64_t v31 = (char *)sub_C3A4B0((_OWORD *)v10, a2);
    if ((v32 & 1) == 0) {
      goto LABEL_22;
    }
    BOOL v33 = sub_C3AA30(v10, (uint64_t)v31);
    unint64_t v12 = v31 + 32;
    uint64_t result = sub_C3AA30((uint64_t)(v31 + 32), (uint64_t)a2);
    if (result)
    {
      a4 = -v16;
      a2 = v31;
      if (v33) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v16 + 1;
    if (!v33)
    {
LABEL_22:
      uint64_t result = sub_C3915C(v10, v31, a3, -v16, a5 & 1);
      unint64_t v12 = v31 + 32;
LABEL_23:
      a5 = 0;
      a4 = -v16;
      goto LABEL_3;
    }
  }
  if ((char *)v10 != a2)
  {
    unint64_t v40 = (v15 - 2) >> 1;
    unint64_t v41 = v40 + 1;
    unsigned int v42 = (uint64_t *)(v10 + 32 * v40);
    do
    {
      sub_C3B5AC(v10, a3, v14 >> 5, v42);
      v42 -= 4;
      --v41;
    }
    while (v41);
    uint64_t v43 = (unint64_t)v14 >> 5;
    do
    {
      while (1)
      {
        long long v46 = *(_OWORD *)(v10 + 16);
        long long v56 = *(_OWORD *)v10;
        long long v57 = v46;
        uint64_t result = sub_C3B998(v10, a3, v43);
        if (v11 == (char *)result) {
          break;
        }
        long long v44 = *((_OWORD *)v11 + 1);
        *(_OWORD *)uint64_t result = *(_OWORD *)v11;
        *(_OWORD *)(result + 16) = v44;
        long long v45 = v57;
        *(_OWORD *)uint8x8_t v11 = v56;
        *((_OWORD *)v11 + 1) = v45;
        v11 -= 32;
        uint64_t result = sub_C3BAF0(v10, result + 32, a3, (result + 32 - v10) >> 5);
        BOOL v27 = v43-- <= 2;
        if (v27) {
          return result;
        }
      }
      *(_OWORD *)uint64_t result = v56;
      *(_OWORD *)(result + 16) = v57;
      v11 -= 32;
      BOOL v27 = v43-- <= 2;
    }
    while (!v27);
  }
  return result;
}

_OWORD *sub_C39634(_OWORD *result, _OWORD *a2)
{
  if (result != a2)
  {
    *(void *)&v44[89] = v2;
    uint64_t v45 = v3;
    unint64_t v4 = a2;
    char v5 = result;
    char v6 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v7 = 0;
      unint64_t v8 = result;
      do
      {
        uint8x8_t v11 = v8;
        unint64_t v8 = v6;
        BOOL v36 = v6;
        unsigned int v37 = (char *)v11 + 40;
        long long v38 = (char *)v11 + 52;
        long long v39 = (char *)v11 + 56;
        unint64_t v40 = (char *)v11 + 60;
        unint64_t v41 = (char *)v11 + 61;
        unsigned int v42 = (char *)v11 + 62;
        uint64_t v43 = (char *)v11 + 63;
        uint64_t v28 = (uint64_t)v11;
        uint64_t v29 = (uint64_t)v11 + 8;
        uint64_t v30 = (uint64_t)v11 + 20;
        uint64_t v31 = (uint64_t)v11 + 24;
        uint64_t v32 = (uint64_t)v11 + 28;
        uint64_t v33 = (uint64_t)v11 + 29;
        uint64_t v34 = (uint64_t)v11 + 30;
        uint64_t v35 = (uint64_t)v11 + 31;
        unsigned int v12 = *((_DWORD *)v11 + 1);
        unsigned int v13 = *((_DWORD *)v11 + 9);
        BOOL v14 = v13 > v12;
        if (v13 < v12
          || (unsigned int v15 = *(_DWORD *)v11, !v14) && *(_DWORD *)v8 < v15
          || (uint64_t v22 = HIDWORD(*(void *)v8), v12 >= v22)
          && (v15 >= *(void *)v8 || v12 > v22)
          && (unsigned int v25 = v8,
              uint64_t result = (_OWORD *)sub_C3AE40((uint64_t)&v26, (uint64_t)&v36, (uint64_t)&v28),
              unint64_t v8 = v25,
              result))
        {
          long long v16 = v8[1];
          long long v26 = *v8;
          long long v27 = v16;
          long long v17 = v11[1];
          *unint64_t v8 = *v11;
          v8[1] = v17;
          unint64_t v9 = v5;
          if (v11 != v5)
          {
            BOOL v24 = v8;
            uint64_t v18 = v7;
            while (1)
            {
              float v20 = (_OWORD *)((char *)v5 + v18);
              BOOL v36 = &v26;
              unsigned int v37 = (char *)&v26 + 8;
              long long v38 = (char *)&v27 + 4;
              long long v39 = (char *)&v27 + 8;
              unint64_t v40 = (char *)&v27 + 12;
              unint64_t v41 = (char *)&v27 + 13;
              unsigned int v42 = (char *)&v27 + 14;
              uint64_t v43 = (char *)&v27 + 15;
              unint64_t v21 = *(void *)((char *)v5 + v18 - 32);
              uint64_t v28 = (uint64_t)v5 + v18 - 32;
              uint64_t v29 = (uint64_t)v5 + v18 - 24;
              uint64_t v30 = (uint64_t)v5 + v18 - 12;
              uint64_t v31 = (uint64_t)v5 + v18 - 8;
              uint64_t v32 = (uint64_t)v5 + v18 - 4;
              uint64_t v33 = (uint64_t)v5 + v18 - 3;
              uint64_t v34 = (uint64_t)v5 + v18 - 2;
              uint64_t v35 = (uint64_t)v5 + v18 - 1;
              if ((unint64_t)v26 >= v21)
              {
                if (HIDWORD(v21) < DWORD1(v26) || v21 < v26 && HIDWORD(v21) <= DWORD1(v26)) {
                  break;
                }
                uint64_t result = (_OWORD *)sub_C3AE40((uint64_t)v44, (uint64_t)&v36, (uint64_t)&v28);
                if (!result) {
                  break;
                }
              }
              long long v19 = *(_OWORD *)((char *)v5 + v18 - 16);
              *float v20 = *(_OWORD *)((char *)v5 + v18 - 32);
              v20[1] = v19;
              v18 -= 32;
              if (!v18)
              {
                unint64_t v9 = v5;
                goto LABEL_5;
              }
            }
            unint64_t v9 = (_OWORD *)((char *)v5 + v18);
LABEL_5:
            unint64_t v4 = a2;
            unint64_t v8 = v24;
          }
          long long v10 = v27;
          *unint64_t v9 = v26;
          v9[1] = v10;
        }
        char v6 = v8 + 2;
        v7 += 32;
      }
      while (v8 + 2 != v4);
    }
  }
  return result;
}

BOOL sub_C3989C(BOOL result, _OWORD *a2)
{
  if ((_OWORD *)result != a2)
  {
    uint64_t v2 = (_OWORD *)result;
    for (uint64_t i = (_OWORD *)(result + 32); v2 + 2 != a2; uint64_t i = v2 + 2)
    {
      char v5 = v2;
      uint64_t v2 = i;
      unsigned int v25 = i;
      long long v26 = (char *)(v5 + 10);
      long long v27 = (char *)(v5 + 13);
      uint64_t v28 = (char *)(v5 + 14);
      uint64_t v29 = (char *)(v5 + 15);
      uint64_t v30 = (char *)v5 + 61;
      uint64_t v31 = (char *)v5 + 62;
      uint64_t v32 = (char *)v5 + 63;
      long long v17 = v5;
      uint64_t v18 = v5 + 2;
      long long v19 = v5 + 5;
      float v20 = v5 + 6;
      unint64_t v21 = v5 + 7;
      uint64_t v22 = (char *)v5 + 29;
      long long v23 = (char *)v5 + 30;
      BOOL v24 = (char *)v5 + 31;
      unsigned int v6 = v5[1];
      unsigned int v7 = v5[9];
      if (v7 >= v6)
      {
        unsigned int v8 = *v5;
        if (v7 > v6 || *(_DWORD *)v2 >= v8)
        {
          uint64_t v13 = HIDWORD(*(void *)v2);
          if (v6 < v13 || v8 < *(void *)v2 && v6 <= v13) {
            continue;
          }
          uint64_t result = sub_C3AE40((uint64_t)&v15, (uint64_t)&v25, (uint64_t)&v17);
          if (!result) {
            continue;
          }
        }
      }
      long long v9 = v2[1];
      long long v15 = *v2;
      long long v16 = v9;
      for (uint64_t j = v2; ; j -= 2)
      {
        long long v11 = *(j - 1);
        *uint64_t j = *(j - 2);
        j[1] = v11;
        unsigned int v25 = &v15;
        long long v26 = (char *)&v15 + 8;
        long long v27 = (char *)&v16 + 4;
        uint64_t v28 = (char *)&v16 + 8;
        uint64_t v29 = (char *)&v16 + 12;
        uint64_t v30 = (char *)&v16 + 13;
        uint64_t v31 = (char *)&v16 + 14;
        uint64_t v32 = (char *)&v16 + 15;
        unint64_t v12 = *((void *)j - 8);
        long long v17 = j - 4;
        uint64_t v18 = (_DWORD *)j - 14;
        long long v19 = (_DWORD *)j - 11;
        float v20 = (_DWORD *)j - 10;
        unint64_t v21 = (_DWORD *)j - 9;
        uint64_t v22 = (char *)j - 35;
        long long v23 = (char *)j - 34;
        BOOL v24 = (char *)j - 33;
        if ((unint64_t)v15 >= v12)
        {
          if (HIDWORD(v12) < DWORD1(v15) || v12 < v15 && HIDWORD(v12) <= DWORD1(v15)) {
            break;
          }
          uint64_t result = sub_C3AE40((uint64_t)v33, (uint64_t)&v25, (uint64_t)&v17);
          if (!result) {
            break;
          }
        }
      }
      long long v4 = v16;
      *(j - 2) = v15;
      *(j - 1) = v4;
    }
  }
  return result;
}

uint64_t sub_C39AB0(uint64_t *a1, long long *a2, long long *a3)
{
  unsigned int v6 = (uint64_t *)a2 + 1;
  uint64_t v95 = a2;
  unsigned int v96 = (uint64_t *)a2 + 1;
  uint64_t v7 = (uint64_t)a2 + 20;
  unsigned int v8 = (uint64_t *)a2 + 3;
  uint64_t v9 = (uint64_t)a2 + 28;
  uint64_t v97 = (uint64_t)a2 + 20;
  char v98 = (uint64_t *)a2 + 3;
  uint64_t v10 = (uint64_t)a2 + 29;
  uint64_t v11 = (uint64_t)a2 + 30;
  uint64_t v12 = (uint64_t)a2 + 31;
  uint64_t v99 = v9;
  uint64_t v100 = v10;
  uint64_t v101 = v11;
  uint64_t v102 = (uint64_t)a2 + 31;
  uint64_t v13 = a1 + 1;
  uint64_t v14 = (uint64_t)a1 + 20;
  long long v15 = a1 + 3;
  uint64_t v16 = (uint64_t)a1 + 28;
  uint64_t v17 = (uint64_t)a1 + 29;
  uint64_t v19 = (uint64_t)a1 + 31;
  unint64_t v18 = *a1;
  uint64_t v20 = (uint64_t)a1 + 30;
  uint64_t v87 = (long long *)a1;
  unint64_t v88 = a1 + 1;
  uint64_t v89 = (uint64_t)a1 + 20;
  unint64_t v90 = a1 + 3;
  uint64_t v91 = (uint64_t)a1 + 28;
  uint64_t v92 = (uint64_t)a1 + 29;
  uint64_t v93 = (uint64_t)a1 + 30;
  uint64_t v94 = (uint64_t)a1 + 31;
  if (*(void *)a2 < v18)
  {
LABEL_2:
    uint64_t v95 = a3;
    unsigned int v96 = (uint64_t *)a3 + 1;
    uint64_t v97 = (uint64_t)a3 + 20;
    char v98 = (uint64_t *)a3 + 3;
    uint64_t v99 = (uint64_t)a3 + 28;
    uint64_t v100 = (uint64_t)a3 + 29;
    uint64_t v101 = (uint64_t)a3 + 30;
    uint64_t v102 = (uint64_t)a3 + 31;
    uint64_t v87 = a2;
    unint64_t v88 = v6;
    uint64_t v89 = v7;
    unint64_t v90 = v8;
    uint64_t v91 = v9;
    uint64_t v92 = v10;
    uint64_t v93 = v11;
    uint64_t v94 = v12;
    unsigned int v21 = *((_DWORD *)a2 + 1);
    unsigned int v22 = *((_DWORD *)a3 + 1);
    BOOL v23 = v22 > v21;
    if (v22 < v21) {
      goto LABEL_5;
    }
    unsigned int v24 = *(_DWORD *)a2;
    if (!v23 && *(_DWORD *)a3 < v24) {
      goto LABEL_5;
    }
    uint64_t v46 = HIDWORD(*(void *)a3);
    if (v21 >= v46 && (v24 >= *(void *)a3 || v21 > v46))
    {
      uint64_t v82 = v10;
      uint64_t v85 = v11;
      uint64_t v76 = v12;
      unint64_t v79 = v6;
      unsigned int v70 = v8;
      uint64_t v73 = v9;
      uint64_t v67 = v7;
      BOOL v47 = sub_C3AE40((uint64_t)v103, (uint64_t)&v95, (uint64_t)&v87);
      uint64_t v7 = v67;
      unsigned int v8 = v70;
      uint64_t v9 = v73;
      uint64_t v12 = v76;
      uint64_t v10 = v82;
      uint64_t v11 = v85;
      unsigned int v6 = v79;
      if (v47)
      {
LABEL_5:
        long long v26 = *(_OWORD *)a1;
        long long v25 = *((_OWORD *)a1 + 1);
        long long v27 = a3[1];
        *(_OWORD *)a1 = *a3;
        *((_OWORD *)a1 + 1) = v27;
        *a3 = v26;
        a3[1] = v25;
        return 1;
      }
    }
    long long v49 = *(_OWORD *)a1;
    long long v48 = *((_OWORD *)a1 + 1);
    long long v50 = a2[1];
    *(_OWORD *)a1 = *a2;
    *((_OWORD *)a1 + 1) = v50;
    *a2 = v49;
    a2[1] = v48;
    uint64_t v95 = a3;
    unsigned int v96 = (uint64_t *)a3 + 1;
    uint64_t v97 = (uint64_t)a3 + 20;
    char v98 = (uint64_t *)a3 + 3;
    uint64_t v99 = (uint64_t)a3 + 28;
    uint64_t v100 = (uint64_t)a3 + 29;
    uint64_t v101 = (uint64_t)a3 + 30;
    uint64_t v102 = (uint64_t)a3 + 31;
    uint64_t v87 = a2;
    unint64_t v88 = v6;
    uint64_t v89 = v7;
    unint64_t v90 = v8;
    uint64_t v91 = v9;
    uint64_t v92 = v10;
    uint64_t v93 = v11;
    uint64_t v94 = v12;
    unsigned int v51 = *((_DWORD *)a2 + 1);
    unsigned int v52 = *((_DWORD *)a3 + 1);
    BOOL v53 = v52 > v51;
    if (v52 >= v51)
    {
      unsigned int v54 = *(_DWORD *)a2;
      if (v53 || *(_DWORD *)a3 >= v54)
      {
        uint64_t v60 = HIDWORD(*(void *)a3);
        if (v51 < v60 || v54 < *(void *)a3 && v51 <= v60) {
          return 1;
        }
        if (!sub_C3AE40((uint64_t)v103, (uint64_t)&v95, (uint64_t)&v87)) {
          return 1;
        }
      }
    }
    long long v56 = *a2;
    long long v55 = a2[1];
    long long v57 = a3[1];
    *a2 = *a3;
    a2[1] = v57;
    *a3 = v56;
    a3[1] = v55;
    return 2;
  }
  uint64_t v29 = *(void *)a2;
  uint64_t v30 = HIDWORD(*(void *)a2);
  if (HIDWORD(v18) >= v30 && (v18 >= v29 || HIDWORD(v18) > v30))
  {
    uint64_t v66 = (uint64_t)a1 + 29;
    uint64_t v69 = (uint64_t)a1 + 28;
    uint64_t v72 = a1 + 3;
    uint64_t v75 = (uint64_t)a1 + 20;
    unint64_t v78 = a1 + 1;
    uint64_t v81 = v10;
    uint64_t v84 = v11;
    uint64_t v31 = v6;
    uint64_t v32 = v9;
    uint64_t v33 = v8;
    uint64_t v34 = v7;
    BOOL v35 = sub_C3AE40((uint64_t)v103, (uint64_t)&v95, (uint64_t)&v87);
    uint64_t v7 = v34;
    unsigned int v8 = v33;
    uint64_t v9 = v32;
    uint64_t v10 = v81;
    uint64_t v11 = v84;
    uint64_t v12 = (uint64_t)a2 + 31;
    unsigned int v6 = v31;
    if (v35) {
      goto LABEL_2;
    }
    uint64_t v29 = *(void *)a2;
    uint64_t v30 = HIDWORD(*(void *)a2);
    uint64_t v14 = v75;
    uint64_t v13 = v78;
    uint64_t v16 = v69;
    long long v15 = v72;
    uint64_t v17 = v66;
  }
  uint64_t v95 = a3;
  unsigned int v96 = (uint64_t *)a3 + 1;
  uint64_t v97 = (uint64_t)a3 + 20;
  char v98 = (uint64_t *)a3 + 3;
  uint64_t v99 = (uint64_t)a3 + 28;
  uint64_t v100 = (uint64_t)a3 + 29;
  uint64_t v101 = (uint64_t)a3 + 30;
  uint64_t v102 = (uint64_t)a3 + 31;
  uint64_t v87 = a2;
  unint64_t v88 = v6;
  uint64_t v89 = v7;
  unint64_t v90 = v8;
  uint64_t v91 = v9;
  uint64_t v92 = v10;
  uint64_t v93 = v11;
  uint64_t v94 = v12;
  if (*(void *)a3 < __PAIR64__(v30, v29)) {
    goto LABEL_12;
  }
  uint64_t v58 = HIDWORD(*(void *)a3);
  if (v30 < v58
    || v29 < *(void *)a3 && v30 <= v58)
  {
    return 0;
  }
  uint64_t v83 = v10;
  uint64_t v86 = v11;
  uint64_t v77 = v14;
  unint64_t v80 = v6;
  uint64_t v68 = v17;
  uint64_t v71 = v16;
  uint64_t v61 = v12;
  uint64_t v62 = v9;
  int v63 = v8;
  uint64_t v64 = v7;
  unint64_t v74 = v15;
  uint64_t v65 = v13;
  uint64_t result = sub_C3AE40((uint64_t)v103, (uint64_t)&v95, (uint64_t)&v87);
  uint64_t v13 = v65;
  long long v15 = v74;
  uint64_t v14 = v77;
  uint64_t v7 = v64;
  unsigned int v8 = v63;
  uint64_t v9 = v62;
  uint64_t v10 = v83;
  uint64_t v11 = v86;
  uint64_t v12 = v61;
  uint64_t v17 = v68;
  uint64_t v16 = v71;
  unsigned int v6 = v80;
  if (result)
  {
LABEL_12:
    long long v37 = *a2;
    long long v36 = a2[1];
    long long v38 = a3[1];
    *a2 = *a3;
    a2[1] = v38;
    *a3 = v37;
    a3[1] = v36;
    uint64_t v95 = a2;
    unsigned int v96 = v6;
    uint64_t v97 = v7;
    char v98 = v8;
    uint64_t v99 = v9;
    uint64_t v100 = v10;
    uint64_t v101 = v11;
    uint64_t v102 = v12;
    uint64_t v87 = (long long *)a1;
    unint64_t v88 = v13;
    uint64_t v89 = v14;
    unint64_t v90 = v15;
    uint64_t v91 = v16;
    uint64_t v92 = v17;
    uint64_t v93 = v20;
    uint64_t v94 = v19;
    unsigned int v39 = *((_DWORD *)a1 + 1);
    unsigned int v40 = *((_DWORD *)a2 + 1);
    BOOL v41 = v40 > v39;
    if (v40 >= v39)
    {
      unsigned int v42 = *(_DWORD *)a1;
      if (v41 || *(_DWORD *)a2 >= v42)
      {
        uint64_t v59 = HIDWORD(*(void *)a2);
        if (v39 < v59 || v42 < *(void *)a2 && v39 <= v59) {
          return 1;
        }
        if (!sub_C3AE40((uint64_t)v103, (uint64_t)&v95, (uint64_t)&v87)) {
          return 1;
        }
      }
    }
    long long v44 = *(_OWORD *)a1;
    long long v43 = *((_OWORD *)a1 + 1);
    long long v45 = a2[1];
    *(_OWORD *)a1 = *a2;
    *((_OWORD *)a1 + 1) = v45;
    *a2 = v44;
    a2[1] = v43;
    return 2;
  }
  return result;
}

char *sub_C39EF0(char *a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  long long v4 = *((_OWORD *)a1 + 1);
  long long v43 = *(_OWORD *)a1;
  long long v44 = v4;
  *(void *)&long long v53 = &v43;
  *((void *)&v53 + 1) = (char *)&v43 + 8;
  *(void *)&long long v54 = (char *)&v44 + 4;
  *((void *)&v54 + 1) = (char *)&v44 + 8;
  long long v55 = (char *)&v44 + 12;
  long long v56 = (char *)&v44 + 13;
  long long v57 = (char *)&v44 + 14;
  uint64_t v58 = (char *)&v44 + 15;
  unint64_t v5 = *((void *)a2 - 4);
  long long v45 = a2 - 32;
  uint64_t v46 = a2 - 24;
  BOOL v47 = a2 - 12;
  long long v48 = a2 - 8;
  long long v49 = a2 - 4;
  long long v50 = a2 - 3;
  unsigned int v51 = a2 - 2;
  unsigned int v52 = a2 - 1;
  if ((unint64_t)v43 < v5
    || HIDWORD(v5) >= DWORD1(v43)
    && (v5 >= v43 || HIDWORD(v5) > DWORD1(v43))
    && sub_C3AE40((uint64_t)v59, (uint64_t)&v53, (uint64_t)&v45))
  {
    for (uint64_t i = v3 + 63; ; i += 32)
    {
      *(void *)&long long v53 = &v43;
      *((void *)&v53 + 1) = (char *)&v43 + 8;
      *(void *)&long long v54 = (char *)&v44 + 4;
      *((void *)&v54 + 1) = (char *)&v44 + 8;
      long long v55 = (char *)&v44 + 12;
      long long v56 = (char *)&v44 + 13;
      long long v57 = (char *)&v44 + 14;
      uint64_t v58 = (char *)&v44 + 15;
      unint64_t v7 = *(void *)(i - 31);
      long long v45 = i - 31;
      uint64_t v46 = i - 23;
      BOOL v47 = i - 11;
      long long v48 = i - 7;
      long long v49 = i - 3;
      long long v50 = i - 2;
      unsigned int v51 = i - 1;
      unsigned int v52 = i;
      if ((unint64_t)v43 < v7
        || HIDWORD(v7) >= DWORD1(v43)
        && (v7 >= v43 || HIDWORD(v7) > DWORD1(v43))
        && sub_C3AE40((uint64_t)v59, (uint64_t)&v53, (uint64_t)&v45))
      {
        break;
      }
    }
    uint64_t j = i - 31;
    uint64_t v3 = a1;
  }
  else
  {
    for (uint64_t j = v3 + 32; j < v2; j += 32)
    {
      *(void *)&long long v53 = &v43;
      *((void *)&v53 + 1) = (char *)&v43 + 8;
      *(void *)&long long v54 = (char *)&v44 + 4;
      *((void *)&v54 + 1) = (char *)&v44 + 8;
      long long v55 = (char *)&v44 + 12;
      long long v56 = (char *)&v44 + 13;
      long long v57 = (char *)&v44 + 14;
      uint64_t v58 = (char *)&v44 + 15;
      long long v45 = j;
      uint64_t v46 = j + 8;
      BOOL v47 = j + 20;
      long long v48 = j + 24;
      unint64_t v41 = *(void *)j;
      long long v49 = j + 28;
      long long v50 = j + 29;
      unsigned int v51 = j + 30;
      unsigned int v52 = j + 31;
      if ((unint64_t)v43 < v41
        || HIDWORD(v41) >= DWORD1(v43)
        && (v41 >= v43 || HIDWORD(v41) > DWORD1(v43))
        && sub_C3AE40((uint64_t)v59, (uint64_t)&v53, (uint64_t)&v45))
      {
        break;
      }
    }
  }
  if (j < v2)
  {
    for (uint64_t k = v2 - 12; ; k -= 32)
    {
      *(void *)&long long v53 = &v43;
      *((void *)&v53 + 1) = (char *)&v43 + 8;
      *(void *)&long long v54 = (char *)&v44 + 4;
      *((void *)&v54 + 1) = (char *)&v44 + 8;
      long long v55 = (char *)&v44 + 12;
      long long v56 = (char *)&v44 + 13;
      long long v57 = (char *)&v44 + 14;
      uint64_t v58 = (char *)&v44 + 15;
      unint64_t v10 = *(void *)(k - 20);
      long long v45 = k - 20;
      uint64_t v46 = k - 12;
      BOOL v47 = k;
      long long v48 = k + 4;
      long long v49 = k + 8;
      long long v50 = k + 9;
      unsigned int v51 = k + 10;
      unsigned int v52 = k + 11;
      if ((unint64_t)v43 >= v10
        && (HIDWORD(v10) < DWORD1(v43)
         || v10 < v43 && HIDWORD(v10) <= DWORD1(v43)
         || !sub_C3AE40((uint64_t)v59, (uint64_t)&v53, (uint64_t)&v45)))
      {
        break;
      }
    }
    uint64_t v2 = k - 20;
    uint64_t v3 = a1;
  }
LABEL_21:
  if (j < v2)
  {
    long long v11 = *((_OWORD *)j + 1);
    long long v53 = *(_OWORD *)j;
    long long v54 = v11;
    long long v12 = *((_OWORD *)v2 + 1);
    *(_OWORD *)uint64_t j = *(_OWORD *)v2;
    *((_OWORD *)j + 1) = v12;
    long long v13 = v54;
    *(_OWORD *)uint64_t v2 = v53;
    *((_OWORD *)v2 + 1) = v13;
    unint64_t v15 = *((void *)j + 4);
    j += 32;
    unsigned int v14 = v15;
    for (unint64_t m = HIDWORD(v15); (unint64_t)v43 >= __PAIR64__(m, v14); unint64_t m = HIDWORD(v17))
    {
      if (m < DWORD1(v43) || v14 < v43 && m <= DWORD1(v43)) {
        goto LABEL_23;
      }
      unsigned int v18 = *((_DWORD *)j + 2);
      if (DWORD2(v43) < v18) {
        break;
      }
      if (DWORD2(v43) == v18)
      {
        unsigned int v19 = *((_DWORD *)j + 3);
        if (HIDWORD(v43) != -1)
        {
          if (HIDWORD(v43) < v19) {
            break;
          }
          if (HIDWORD(v43) == v19)
          {
            if (v44 < *((_DWORD *)j + 4)) {
              break;
            }
LABEL_40:
            if (*((_DWORD *)j + 4) < v44) {
              goto LABEL_23;
            }
            goto LABEL_41;
          }
        }
        if (v19 != -1)
        {
          if (v19 < HIDWORD(v43)) {
            goto LABEL_23;
          }
          if (v19 == HIDWORD(v43)) {
            goto LABEL_40;
          }
        }
      }
      else if (v18 < DWORD2(v43))
      {
        goto LABEL_23;
      }
LABEL_41:
      int v20 = *((_DWORD *)j + 5);
      if (SDWORD1(v44) < v20) {
        break;
      }
      if (v20 >= SDWORD1(v44))
      {
        unsigned int v21 = *((_DWORD *)j + 6);
        if (DWORD2(v44) < v21) {
          break;
        }
        if (v21 >= DWORD2(v44))
        {
          unsigned int v22 = j[28];
          if (BYTE12(v44) < v22) {
            break;
          }
          if (v22 >= BYTE12(v44))
          {
            unsigned int v23 = j[29];
            if (BYTE13(v44) < v23) {
              break;
            }
            if (v23 >= BYTE13(v44))
            {
              unsigned int v24 = j[30];
              if (BYTE14(v44) < v24 || v24 >= BYTE14(v44) && HIBYTE(v44) < j[31]) {
                break;
              }
            }
          }
        }
      }
LABEL_23:
      unint64_t v17 = *((void *)j + 4);
      j += 32;
      unsigned int v14 = v17;
    }
    for (uint64_t n = v2 - 16; ; n -= 32)
    {
      unsigned int v26 = *((_DWORD *)n - 3);
      if (DWORD1(v43) >= v26)
      {
        unsigned int v27 = *((_DWORD *)n - 4);
        if (DWORD1(v43) > v26 || v43 >= v27)
        {
          if (DWORD1(v43) > v26 || (v43 > v27 ? (BOOL v29 = DWORD1(v43) >= v26) : (BOOL v29 = 0), v29))
          {
LABEL_20:
            uint64_t v2 = n - 16;
            goto LABEL_21;
          }
          unsigned int v30 = *((_DWORD *)n - 2);
          if (DWORD2(v43) >= v30) {
            break;
          }
        }
      }
LABEL_53:
      ;
    }
    if (DWORD2(v43) != v30)
    {
      if (v30 < DWORD2(v43)) {
        goto LABEL_20;
      }
      goto LABEL_73;
    }
    unsigned int v31 = *((_DWORD *)n - 1);
    if (HIDWORD(v43) == -1) {
      goto LABEL_87;
    }
    if (HIDWORD(v43) < v31) {
      goto LABEL_53;
    }
    if (HIDWORD(v43) != v31)
    {
LABEL_87:
      if (v31 == -1) {
        goto LABEL_73;
      }
      if (v31 < HIDWORD(v43)) {
        goto LABEL_20;
      }
      if (v31 != HIDWORD(v43)) {
        goto LABEL_73;
      }
    }
    else if (v44 < *(_DWORD *)n)
    {
      goto LABEL_53;
    }
    if (*(_DWORD *)n < v44) {
      goto LABEL_20;
    }
LABEL_73:
    int v32 = *((_DWORD *)n + 1);
    if (SDWORD1(v44) >= v32)
    {
      if (v32 < SDWORD1(v44)) {
        goto LABEL_20;
      }
      unsigned int v33 = *((_DWORD *)n + 2);
      if (DWORD2(v44) >= v33)
      {
        if (v33 < DWORD2(v44)) {
          goto LABEL_20;
        }
        unsigned int v34 = n[12];
        if (BYTE12(v44) >= v34)
        {
          if (v34 < BYTE12(v44)) {
            goto LABEL_20;
          }
          unsigned int v35 = n[13];
          if (BYTE13(v44) >= v35)
          {
            if (v35 < BYTE13(v44)) {
              goto LABEL_20;
            }
            unsigned int v36 = n[14];
            if (BYTE14(v44) >= v36 && (v36 < BYTE14(v44) || HIBYTE(v44) >= n[15])) {
              goto LABEL_20;
            }
          }
        }
      }
    }
    goto LABEL_53;
  }
  long long v37 = j - 32;
  if (j - 32 != v3)
  {
    long long v38 = *((_OWORD *)j - 1);
    *(_OWORD *)uint64_t v3 = *(_OWORD *)v37;
    *((_OWORD *)v3 + 1) = v38;
  }
  long long v39 = v44;
  *(_OWORD *)long long v37 = v43;
  *((_OWORD *)j - 1) = v39;
  return j;
}

_OWORD *sub_C3A4B0(_OWORD *a1, _DWORD *a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = 0;
  long long v5 = a1[1];
  long long v51 = *a1;
  long long v52 = v5;
  while (1)
  {
    unint64_t v7 = (uint64_t *)&v3[v4 + 2];
    *(void *)&long long v61 = v7;
    *((void *)&v61 + 1) = (char *)&v3[v4 + 2] + 8;
    *(void *)&long long v62 = (char *)&v3[v4 + 3] + 4;
    *((void *)&v62 + 1) = (char *)&v3[v4 + 3] + 8;
    uint64_t v63 = (uint64_t)&v3[v4 + 3] + 12;
    uint64_t v64 = (uint64_t)&v3[v4 + 3] + 13;
    uint64_t v65 = (uint64_t)&v3[v4 + 3] + 14;
    uint64_t v66 = (uint64_t)&v3[v4 + 3] + 15;
    long long v53 = &v51;
    long long v54 = (char *)&v51 + 8;
    long long v55 = (char *)&v52 + 4;
    long long v56 = (char *)&v52 + 8;
    long long v57 = (char *)&v52 + 12;
    uint64_t v58 = (char *)&v52 + 13;
    uint64_t v59 = (char *)&v52 + 14;
    uint64_t v60 = (char *)&v52 + 15;
    if (*v7 >= (unint64_t)v51)
    {
      uint64_t v8 = *v7;
      unint64_t v9 = HIDWORD(*v7);
      if (DWORD1(v51) < v9 || v51 < v8 && DWORD1(v51) <= v9) {
        break;
      }
      BOOL v6 = sub_C3AE40((uint64_t)v67, (uint64_t)&v61, (uint64_t)&v53);
      uint64_t v3 = a1;
      if (!v6) {
        break;
      }
    }
    v4 += 2;
  }
  unint64_t v10 = &v3[v4];
  unint64_t v11 = (unint64_t)&v3[v4 + 2];
  unint64_t v49 = v11;
  if (v4 * 16)
  {
    long long v12 = a2 - 3;
    while (1)
    {
      a2 = v12 - 5;
      *(void *)&long long v61 = v12 - 5;
      *((void *)&v61 + 1) = v12 - 3;
      *(void *)&long long v62 = v12;
      *((void *)&v62 + 1) = v12 + 1;
      uint64_t v63 = (uint64_t)(v12 + 2);
      uint64_t v64 = (uint64_t)v12 + 9;
      uint64_t v65 = (uint64_t)v12 + 10;
      uint64_t v66 = (uint64_t)v12 + 11;
      long long v53 = &v51;
      long long v54 = (char *)&v51 + 8;
      long long v55 = (char *)&v52 + 4;
      long long v56 = (char *)&v52 + 8;
      long long v57 = (char *)&v52 + 12;
      uint64_t v58 = (char *)&v52 + 13;
      uint64_t v59 = (char *)&v52 + 14;
      uint64_t v60 = (char *)&v52 + 15;
      unsigned int v14 = *(v12 - 4);
      v12 -= 8;
      if (__PAIR64__(v14, *a2) < (unint64_t)v51) {
        break;
      }
      uint64_t v15 = HIDWORD(*(void *)a2);
      if (DWORD1(v51) >= v15
        && (v51 >= *(void *)a2 || DWORD1(v51) > v15))
      {
        BOOL v13 = sub_C3AE40((uint64_t)v67, (uint64_t)&v61, (uint64_t)&v53);
        unint64_t v11 = v49;
        uint64_t v3 = a1;
        if (v13) {
          break;
        }
      }
    }
  }
  else if (v11 < (unint64_t)a2)
  {
    for (a2 -= 8; ; a2 -= 8)
    {
      *(void *)&long long v61 = a2;
      *((void *)&v61 + 1) = a2 + 2;
      *(void *)&long long v62 = a2 + 5;
      *((void *)&v62 + 1) = a2 + 6;
      uint64_t v63 = (uint64_t)(a2 + 7);
      uint64_t v64 = (uint64_t)a2 + 29;
      uint64_t v65 = (uint64_t)a2 + 30;
      uint64_t v66 = (uint64_t)a2 + 31;
      long long v53 = &v51;
      long long v54 = (char *)&v51 + 8;
      long long v55 = (char *)&v52 + 4;
      long long v56 = (char *)&v52 + 8;
      long long v57 = (char *)&v52 + 12;
      uint64_t v58 = (char *)&v52 + 13;
      uint64_t v59 = (char *)&v52 + 14;
      uint64_t v60 = (char *)&v52 + 15;
      if (*(void *)a2 < (unint64_t)v51) {
        break;
      }
      uint64_t v16 = HIDWORD(*(void *)a2);
      if (DWORD1(v51) < v16
        || v51 < *(void *)a2 && DWORD1(v51) <= v16)
      {
        if (v11 >= (unint64_t)a2) {
          break;
        }
      }
      else
      {
        if (sub_C3AE40((uint64_t)v67, (uint64_t)&v61, (uint64_t)&v53))
        {
          unint64_t v11 = v49;
          uint64_t v3 = a1;
          break;
        }
        unint64_t v11 = v49;
        uint64_t v3 = a1;
        if (v49 >= (unint64_t)a2) {
          break;
        }
      }
    }
  }
  if (v11 < (unint64_t)a2)
  {
    unint64_t v17 = (_OWORD *)v11;
    unsigned int v18 = a2;
    do
    {
      long long v20 = v17[1];
      long long v61 = *v17;
      long long v62 = v20;
      long long v21 = v18[1];
      *unint64_t v17 = *v18;
      v17[1] = v21;
      long long v22 = v62;
      _OWORD *v18 = v61;
      v18[1] = v22;
      while (1)
      {
        do
        {
          do
          {
            unint64_t v10 = v17;
            v17 += 2;
            unsigned int v23 = *((_DWORD *)v10 + 9);
          }
          while (v23 < DWORD1(v51));
        }
        while (v23 <= DWORD1(v51) && *((_DWORD *)v10 + 8) < v51);
        uint64_t v25 = *((void *)v10 + 4);
        if (DWORD1(v51) < HIDWORD(v25)) {
          break;
        }
        if (v51 < v25 && DWORD1(v51) <= HIDWORD(v25)) {
          break;
        }
        unsigned int v27 = *((_DWORD *)v10 + 10);
        if (v27 >= DWORD2(v51))
        {
          if (v27 != DWORD2(v51))
          {
            if (DWORD2(v51) < v27) {
              break;
            }
            goto LABEL_57;
          }
          unsigned int v28 = *((_DWORD *)v10 + 11);
          if (v28 == -1 || v28 >= HIDWORD(v51) && (v28 != HIDWORD(v51) || *((_DWORD *)v10 + 12) >= v52))
          {
            if (HIDWORD(v51) != -1
              && (HIDWORD(v51) < v28 || HIDWORD(v51) == v28 && v52 < *((_DWORD *)v10 + 12)))
            {
              break;
            }
LABEL_57:
            int v29 = *((_DWORD *)v10 + 13);
            if (v29 >= SDWORD1(v52))
            {
              if (SDWORD1(v52) < v29) {
                break;
              }
              unsigned int v30 = *((_DWORD *)v10 + 14);
              if (v30 >= DWORD2(v52))
              {
                if (DWORD2(v52) < v30) {
                  break;
                }
                unsigned int v31 = *((unsigned __int8 *)v10 + 60);
                if (v31 >= BYTE12(v52))
                {
                  if (BYTE12(v52) < v31) {
                    break;
                  }
                  unsigned int v32 = *((unsigned __int8 *)v10 + 61);
                  if (v32 >= BYTE13(v52))
                  {
                    if (BYTE13(v52) < v32) {
                      break;
                    }
                    unsigned int v33 = *((unsigned __int8 *)v10 + 62);
                    if (v33 >= BYTE14(v52)
                      && (BYTE14(v52) < v33 || *((unsigned __int8 *)v10 + 63) >= HIBYTE(v52)))
                    {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
      unint64_t v19 = (unint64_t)(v18 - 2);
      unsigned int v34 = *((_DWORD *)v18 - 7);
      if (v34 >= DWORD1(v51))
      {
        unsigned int v35 = (char *)v18 - 60;
        while (v34 > DWORD1(v51) || *((_DWORD *)v35 + 7) >= v51)
        {
          uint64_t v37 = *(void *)(v35 + 28);
          if (DWORD1(v51) >= HIDWORD(v37) && (v51 >= v37 || DWORD1(v51) > HIDWORD(v37)))
          {
            unsigned int v39 = *((_DWORD *)v35 + 9);
            if (v39 < DWORD2(v51)) {
              break;
            }
            if (v39 == DWORD2(v51))
            {
              unsigned int v40 = *((_DWORD *)v35 + 10);
              if (v40 != -1 && (v40 < HIDWORD(v51) || v40 == HIDWORD(v51) && *((_DWORD *)v35 + 11) < v52)) {
                break;
              }
              if (HIDWORD(v51) != -1
                && (HIDWORD(v51) < v40 || HIDWORD(v51) == v40 && v52 < *((_DWORD *)v35 + 11)))
              {
                goto LABEL_70;
              }
            }
            else if (DWORD2(v51) < v39)
            {
              goto LABEL_70;
            }
            int v41 = *((_DWORD *)v35 + 12);
            if (v41 < SDWORD1(v52)) {
              break;
            }
            if (SDWORD1(v52) >= v41)
            {
              unsigned int v42 = *((_DWORD *)v35 + 13);
              if (v42 < DWORD2(v52)) {
                break;
              }
              if (DWORD2(v52) >= v42)
              {
                unsigned int v43 = v35[56];
                if (v43 < BYTE12(v52)) {
                  break;
                }
                if (BYTE12(v52) >= v43)
                {
                  unsigned int v44 = v35[57];
                  if (v44 < BYTE13(v52)) {
                    break;
                  }
                  if (BYTE13(v52) >= v44)
                  {
                    unsigned int v45 = v35[58];
                    if (v45 < BYTE14(v52)) {
                      break;
                    }
                    if (BYTE14(v52) >= v45 && v35[59] < HIBYTE(v52))
                    {
LABEL_30:
                      unint64_t v19 = (unint64_t)(v35 + 28);
                      break;
                    }
                  }
                }
              }
            }
          }
LABEL_70:
          v19 -= 32;
          unsigned int v36 = *(_DWORD *)v35;
          v35 -= 32;
          unsigned int v34 = v36;
          if (v36 < DWORD1(v51)) {
            goto LABEL_30;
          }
        }
      }
      unint64_t v17 = v10 + 2;
      unsigned int v18 = (_OWORD *)v19;
    }
    while ((unint64_t)(v10 + 2) < v19);
  }
  if (v10 != v3)
  {
    long long v46 = v10[1];
    *uint64_t v3 = *v10;
    v3[1] = v46;
  }
  long long v47 = v52;
  *unint64_t v10 = v51;
  v10[1] = v47;
  return v10;
}

BOOL sub_C3AA30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      BOOL v6 = (void *)(a2 - 32);
      unsigned int v42 = (long long *)(a2 - 32);
      unsigned int v43 = (char *)(a2 - 24);
      unsigned int v44 = (char *)(a2 - 12);
      unsigned int v45 = (char *)(a2 - 8);
      long long v46 = (char *)(a2 - 4);
      long long v47 = (char *)(a2 - 3);
      long long v48 = (char *)(a2 - 2);
      unint64_t v49 = (char *)(a2 - 1);
      uint64_t v34 = a1;
      uint64_t v35 = a1 + 8;
      uint64_t v36 = a1 + 20;
      uint64_t v37 = a1 + 24;
      unint64_t v7 = *(void *)a1;
      uint64_t v38 = a1 + 28;
      uint64_t v39 = a1 + 29;
      uint64_t v40 = a1 + 30;
      uint64_t v41 = a1 + 31;
      if (*(void *)(a2 - 32) < v7) {
        goto LABEL_3;
      }
      uint64_t v27 = HIDWORD(*v6);
      if (HIDWORD(v7) < v27 || v7 < *v6 && HIDWORD(v7) <= v27) {
        return result;
      }
      if (sub_C3AE40((uint64_t)&v32, (uint64_t)&v42, (uint64_t)&v34))
      {
LABEL_3:
        long long v9 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        long long v10 = *(_OWORD *)(v2 - 16);
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_OWORD *)(a1 + 16) = v10;
        *(_OWORD *)BOOL v6 = v9;
        *(_OWORD *)(v2 - 16) = v8;
        return 1;
      }
      return 1;
    case 3:
      sub_C39AB0((uint64_t *)a1, (long long *)(a1 + 32), (long long *)(a2 - 32));
      return 1;
    case 4:
      sub_C3B008(a1, (long long *)(a1 + 32), (long long *)(a1 + 64), (long long *)(a2 - 32));
      return 1;
    case 5:
      sub_C3B280(a1, (long long *)(a1 + 32), (long long *)(a1 + 64), (long long *)(a1 + 96), (long long *)(a2 - 32));
      return 1;
    default:
      uint64_t v11 = a1 + 64;
      sub_C39AB0((uint64_t *)a1, (long long *)(a1 + 32), (long long *)(a1 + 64));
      uint64_t v12 = a1 + 96;
      if (a1 + 96 == v2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v31 = 0;
      uint64_t v28 = v2;
      break;
  }
  while (1)
  {
    unsigned int v42 = (long long *)v12;
    unsigned int v43 = (char *)(v12 + 8);
    unsigned int v44 = (char *)(v12 + 20);
    unsigned int v45 = (char *)(v12 + 24);
    long long v46 = (char *)(v12 + 28);
    long long v47 = (char *)(v12 + 29);
    long long v48 = (char *)(v12 + 30);
    unint64_t v49 = (char *)(v12 + 31);
    uint64_t v34 = v11;
    uint64_t v35 = v11 + 8;
    uint64_t v36 = v11 + 20;
    uint64_t v37 = v11 + 24;
    uint64_t v38 = v11 + 28;
    uint64_t v39 = v11 + 29;
    uint64_t v40 = v11 + 30;
    uint64_t v41 = v11 + 31;
    unsigned int v14 = *(_DWORD *)(v11 + 4);
    unsigned int v15 = *(_DWORD *)(v12 + 4);
    BOOL v16 = v15 > v14;
    if (v15 >= v14)
    {
      unsigned int v17 = *(_DWORD *)v11;
      if (v16 || *(_DWORD *)v12 >= v17)
      {
        uint64_t v25 = HIDWORD(*(void *)v12);
        if (v14 < v25 || v17 < *(void *)v12 && v14 <= v25) {
          goto LABEL_7;
        }
        uint64_t v30 = v13;
        BOOL v26 = sub_C3AE40((uint64_t)&v32, (uint64_t)&v42, (uint64_t)&v34);
        uint64_t v13 = v30;
        if (!v26) {
          goto LABEL_7;
        }
      }
    }
    long long v18 = *(_OWORD *)(v12 + 16);
    long long v32 = *(_OWORD *)v12;
    v33[0] = v18;
    long long v19 = *(_OWORD *)(v11 + 16);
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v11;
    *(_OWORD *)(v12 + 16) = v19;
    long long v20 = (_OWORD *)a1;
    if (v11 != a1)
    {
      uint64_t v29 = v13;
      uint64_t v21 = v13;
      do
      {
        unsigned int v42 = &v32;
        unsigned int v43 = (char *)&v32 + 8;
        unsigned int v44 = (char *)v33 + 4;
        unsigned int v45 = (char *)v33 + 8;
        long long v46 = (char *)v33 + 12;
        long long v47 = (char *)v33 + 13;
        long long v48 = (char *)v33 + 14;
        unint64_t v49 = (char *)v33 + 15;
        unint64_t v23 = *(void *)(a1 + v21 + 32);
        uint64_t v34 = a1 + v21 + 32;
        uint64_t v35 = a1 + v21 + 40;
        uint64_t v36 = a1 + v21 + 52;
        uint64_t v37 = a1 + v21 + 56;
        uint64_t v38 = a1 + v21 + 60;
        uint64_t v39 = a1 + v21 + 61;
        uint64_t v40 = a1 + v21 + 62;
        uint64_t v41 = a1 + v21 + 63;
        if ((unint64_t)v32 >= v23
          && (HIDWORD(v23) < DWORD1(v32)
           || v23 < v32 && HIDWORD(v23) <= DWORD1(v32)
           || !sub_C3AE40((uint64_t)v50, (uint64_t)&v42, (uint64_t)&v34)))
        {
          long long v20 = (_OWORD *)(a1 + v21 + 64);
          goto LABEL_21;
        }
        long long v22 = *(_OWORD *)(a1 + v21 + 48);
        *(_OWORD *)(a1 + v21 + 64) = *(_OWORD *)(a1 + v21 + 32);
        *(_OWORD *)(a1 + v21 + 80) = v22;
        v21 -= 32;
      }
      while (v21 != -64);
      long long v20 = (_OWORD *)a1;
LABEL_21:
      uint64_t v2 = v28;
      uint64_t v13 = v29;
    }
    long long v24 = v33[0];
    *long long v20 = v32;
    v20[1] = v24;
    if (v31 == 7) {
      return v12 + 32 == v2;
    }
    ++v31;
LABEL_7:
    uint64_t v11 = v12;
    v13 += 32;
    v12 += 32;
    if (v12 == v2) {
      return 1;
    }
  }
}

BOOL sub_C3AE40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int **)(a2 + 8);
  uint64_t v4 = *(unsigned int **)(a3 + 8);
  unsigned int v5 = *v4;
  unsigned int v6 = *v3;
  if (*v3 < *v4) {
    return 1;
  }
  if (v6 == v5)
  {
    unsigned int v8 = v3[1];
    if (v8 != -1)
    {
      unsigned int v9 = v4[1];
      if (v8 < v9) {
        return 1;
      }
      if (v8 == v9 && v3[2] < v4[2]) {
        return 1;
      }
    }
    if (v5 < v6) {
      return 0;
    }
    unsigned int v10 = v4[1];
    if (v10 != -1)
    {
      unsigned int v11 = v3[1];
      if (v10 < v11) {
        return 0;
      }
      if (v10 == v11 && v4[2] < v3[2]) {
        return 0;
      }
    }
  }
  else if (v5 < v6)
  {
    return 0;
  }
  int v12 = **(_DWORD **)(a2 + 16);
  int v13 = **(_DWORD **)(a3 + 16);
  if (v12 < v13) {
    return 1;
  }
  if (v13 < v12) {
    return 0;
  }
  unsigned int v14 = **(_DWORD **)(a3 + 24);
  unsigned int v15 = **(_DWORD **)(a2 + 24);
  if (v15 < v14) {
    return 1;
  }
  if (v14 < v15) {
    return 0;
  }
  unsigned int v16 = **(unsigned __int8 **)(a2 + 32);
  unsigned int v17 = **(unsigned __int8 **)(a3 + 32);
  if (v16 < v17) {
    return 1;
  }
  if (v17 < v16) {
    return 0;
  }
  unsigned int v18 = **(unsigned __int8 **)(a2 + 40);
  unsigned int v19 = **(unsigned __int8 **)(a3 + 40);
  if (v18 < v19) {
    return 1;
  }
  if (v19 < v18) {
    return 0;
  }
  unsigned int v20 = **(unsigned __int8 **)(a2 + 48);
  unsigned int v21 = **(unsigned __int8 **)(a3 + 48);
  if (v20 < v21) {
    return 1;
  }
  if (v21 >= v20) {
    return **(unsigned __int8 **)(a2 + 56) < **(unsigned __int8 **)(a3 + 56);
  }
  return 0;
}

uint64_t sub_C3B008(uint64_t a1, long long *a2, long long *a3, long long *a4)
{
  uint64_t result = sub_C39AB0((uint64_t *)a1, a2, a3);
  unsigned int v33 = a4;
  uint64_t v34 = (char *)a4 + 8;
  uint64_t v35 = (char *)a4 + 20;
  uint64_t v36 = (char *)a4 + 24;
  uint64_t v37 = (char *)a4 + 28;
  uint64_t v38 = (char *)a4 + 29;
  uint64_t v39 = (char *)a4 + 30;
  uint64_t v40 = (char *)a4 + 31;
  unsigned int v9 = (char *)a3 + 8;
  unint64_t v10 = *(void *)a3;
  uint64_t v25 = a3;
  BOOL v26 = (char *)a3 + 8;
  uint64_t v27 = (char *)a3 + 20;
  uint64_t v28 = (char *)a3 + 24;
  uint64_t v29 = (char *)a3 + 28;
  uint64_t v30 = (char *)a3 + 29;
  int v31 = (char *)a3 + 30;
  long long v32 = (char *)a3 + 31;
  if (*(void *)a4 < v10
    || (uint64_t v22 = HIDWORD(*(void *)a4), HIDWORD(v10) >= v22)
    && (v10 >= *(void *)a4 || HIDWORD(v10) > v22)
    && (result = sub_C3AE40((uint64_t)v41, (uint64_t)&v33, (uint64_t)&v25), unsigned int v9 = (char *)a3 + 8, result))
  {
    long long v12 = *a3;
    long long v11 = a3[1];
    long long v13 = a4[1];
    *a3 = *a4;
    a3[1] = v13;
    *a4 = v12;
    a4[1] = v11;
    unsigned int v33 = a3;
    uint64_t v34 = v9;
    uint64_t v35 = (char *)a3 + 20;
    uint64_t v36 = (char *)a3 + 24;
    uint64_t v37 = (char *)a3 + 28;
    uint64_t v38 = (char *)a3 + 29;
    uint64_t v39 = (char *)a3 + 30;
    uint64_t v40 = (char *)a3 + 31;
    unint64_t v14 = *(void *)a2;
    uint64_t v25 = a2;
    BOOL v26 = (char *)a2 + 8;
    uint64_t v27 = (char *)a2 + 20;
    uint64_t v28 = (char *)a2 + 24;
    uint64_t v29 = (char *)a2 + 28;
    uint64_t v30 = (char *)a2 + 29;
    int v31 = (char *)a2 + 30;
    long long v32 = (char *)a2 + 31;
    if (*(void *)a3 < v14
      || (uint64_t v23 = HIDWORD(*(void *)a3), HIDWORD(v14) >= v23)
      && (v14 >= *(void *)a3 || HIDWORD(v14) > v23)
      && (uint64_t result = sub_C3AE40((uint64_t)v41, (uint64_t)&v33, (uint64_t)&v25), result))
    {
      long long v16 = *a2;
      long long v15 = a2[1];
      long long v17 = a3[1];
      *a2 = *a3;
      a2[1] = v17;
      *a3 = v16;
      a3[1] = v15;
      unsigned int v33 = a2;
      uint64_t v34 = (char *)a2 + 8;
      uint64_t v35 = (char *)a2 + 20;
      uint64_t v36 = (char *)a2 + 24;
      uint64_t v37 = (char *)a2 + 28;
      uint64_t v38 = (char *)a2 + 29;
      uint64_t v39 = (char *)a2 + 30;
      uint64_t v40 = (char *)a2 + 31;
      uint64_t v25 = (long long *)a1;
      BOOL v26 = (char *)(a1 + 8);
      uint64_t v27 = (char *)(a1 + 20);
      uint64_t v28 = (char *)(a1 + 24);
      unint64_t v18 = *(void *)a1;
      uint64_t v29 = (char *)(a1 + 28);
      uint64_t v30 = (char *)(a1 + 29);
      int v31 = (char *)(a1 + 30);
      long long v32 = (char *)(a1 + 31);
      if (*(void *)a2 < v18
        || (uint64_t v24 = HIDWORD(*(void *)a2), HIDWORD(v18) >= v24)
        && (v18 >= *(void *)a2 || HIDWORD(v18) > v24)
        && (uint64_t result = sub_C3AE40((uint64_t)v41, (uint64_t)&v33, (uint64_t)&v25), result))
      {
        long long v20 = *(_OWORD *)a1;
        long long v19 = *(_OWORD *)(a1 + 16);
        long long v21 = a2[1];
        *(_OWORD *)a1 = *a2;
        *(_OWORD *)(a1 + 16) = v21;
        *a2 = v20;
        a2[1] = v19;
      }
    }
  }
  return result;
}

uint64_t sub_C3B280(uint64_t a1, long long *a2, long long *a3, long long *a4, long long *a5)
{
  uint64_t result = sub_C3B008(a1, a2, a3, a4);
  uint64_t v40 = a5;
  uint64_t v41 = (char *)a5 + 8;
  unsigned int v42 = (char *)a5 + 20;
  unsigned int v43 = (char *)a5 + 24;
  unsigned int v44 = (char *)a5 + 28;
  unsigned int v45 = (char *)a5 + 29;
  long long v46 = (char *)a5 + 30;
  long long v47 = (char *)a5 + 31;
  unint64_t v10 = (char *)a4 + 8;
  unint64_t v11 = *(void *)a4;
  uint64_t v32 = (uint64_t)a4;
  unsigned int v33 = (char *)a4 + 8;
  uint64_t v34 = (char *)a4 + 20;
  uint64_t v35 = (char *)a4 + 24;
  uint64_t v36 = (char *)a4 + 28;
  uint64_t v37 = (char *)a4 + 29;
  uint64_t v38 = (char *)a4 + 30;
  uint64_t v39 = (char *)a4 + 31;
  if (*(void *)a5 < v11
    || (uint64_t v27 = HIDWORD(*(void *)a5), HIDWORD(v11) >= v27)
    && (v11 >= *(void *)a5 || HIDWORD(v11) > v27)
    && (result = sub_C3AE40((uint64_t)v48, (uint64_t)&v40, (uint64_t)&v32), unint64_t v10 = (char *)a4 + 8, result))
  {
    long long v13 = *a4;
    long long v12 = a4[1];
    long long v14 = a5[1];
    *a4 = *a5;
    a4[1] = v14;
    *a5 = v13;
    a5[1] = v12;
    uint64_t v40 = a4;
    uint64_t v41 = v10;
    unsigned int v42 = (char *)a4 + 20;
    unsigned int v43 = (char *)a4 + 24;
    unsigned int v44 = (char *)a4 + 28;
    unsigned int v45 = (char *)a4 + 29;
    long long v46 = (char *)a4 + 30;
    long long v47 = (char *)a4 + 31;
    unint64_t v15 = *(void *)a3;
    uint64_t v32 = (uint64_t)a3;
    unsigned int v33 = (char *)a3 + 8;
    uint64_t v34 = (char *)a3 + 20;
    uint64_t v35 = (char *)a3 + 24;
    uint64_t v36 = (char *)a3 + 28;
    uint64_t v37 = (char *)a3 + 29;
    uint64_t v38 = (char *)a3 + 30;
    uint64_t v39 = (char *)a3 + 31;
    if (*(void *)a4 < v15
      || (uint64_t v28 = HIDWORD(*(void *)a4), HIDWORD(v15) >= v28)
      && (v15 >= *(void *)a4 || HIDWORD(v15) > v28)
      && (uint64_t result = sub_C3AE40((uint64_t)v48, (uint64_t)&v40, (uint64_t)&v32), result))
    {
      long long v17 = *a3;
      long long v16 = a3[1];
      long long v18 = a4[1];
      *a3 = *a4;
      a3[1] = v18;
      *a4 = v17;
      a4[1] = v16;
      uint64_t v40 = a3;
      uint64_t v41 = (char *)a3 + 8;
      unsigned int v42 = (char *)a3 + 20;
      unsigned int v43 = (char *)a3 + 24;
      unsigned int v44 = (char *)a3 + 28;
      unsigned int v45 = (char *)a3 + 29;
      long long v46 = (char *)a3 + 30;
      long long v47 = (char *)a3 + 31;
      unint64_t v19 = *(void *)a2;
      uint64_t v32 = (uint64_t)a2;
      unsigned int v33 = (char *)a2 + 8;
      uint64_t v34 = (char *)a2 + 20;
      uint64_t v35 = (char *)a2 + 24;
      uint64_t v36 = (char *)a2 + 28;
      uint64_t v37 = (char *)a2 + 29;
      uint64_t v38 = (char *)a2 + 30;
      uint64_t v39 = (char *)a2 + 31;
      if (*(void *)a3 < v19
        || (uint64_t v29 = HIDWORD(*(void *)a3), HIDWORD(v19) >= v29)
        && (v19 >= *(void *)a3 || HIDWORD(v19) > v29)
        && (uint64_t result = sub_C3AE40((uint64_t)v48, (uint64_t)&v40, (uint64_t)&v32), result))
      {
        long long v21 = *a2;
        long long v20 = a2[1];
        long long v22 = a3[1];
        *a2 = *a3;
        a2[1] = v22;
        *a3 = v21;
        a3[1] = v20;
        uint64_t v40 = a2;
        uint64_t v41 = (char *)a2 + 8;
        unsigned int v42 = (char *)a2 + 20;
        unsigned int v43 = (char *)a2 + 24;
        unsigned int v44 = (char *)a2 + 28;
        unsigned int v45 = (char *)a2 + 29;
        long long v46 = (char *)a2 + 30;
        long long v47 = (char *)a2 + 31;
        uint64_t v32 = a1;
        unsigned int v33 = (char *)(a1 + 8);
        uint64_t v34 = (char *)(a1 + 20);
        uint64_t v35 = (char *)(a1 + 24);
        unint64_t v23 = *(void *)a1;
        uint64_t v36 = (char *)(a1 + 28);
        uint64_t v37 = (char *)(a1 + 29);
        uint64_t v38 = (char *)(a1 + 30);
        uint64_t v39 = (char *)(a1 + 31);
        if (*(void *)a2 < v23
          || (uint64_t v30 = HIDWORD(*(void *)a2), HIDWORD(v23) >= v30)
          && (v23 >= *(void *)a2 || HIDWORD(v23) > v30)
          && (uint64_t result = sub_C3AE40((uint64_t)v48, (uint64_t)&v40, (uint64_t)&v32), result))
        {
          long long v25 = *(_OWORD *)a1;
          long long v24 = *(_OWORD *)(a1 + 16);
          long long v26 = a2[1];
          *(_OWORD *)a1 = *a2;
          *(_OWORD *)(a1 + 16) = v26;
          *a2 = v25;
          a2[1] = v24;
        }
      }
    }
  }
  return result;
}

double sub_C3B5AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    *(void *)&v50[89] = v4;
    uint64_t v51 = v5;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - a1) >> 5)
    {
      uint64_t v11 = ((uint64_t)a4 - a1) >> 4;
      uint64_t v12 = v11 + 1;
      uint64_t v13 = a1 + 32 * (v11 + 1);
      uint64_t v14 = v11 + 2;
      if (v11 + 2 < a3)
      {
        uint64_t v42 = a1 + 32 * (v11 + 1);
        uint64_t v43 = v13 + 8;
        uint64_t v44 = v13 + 20;
        uint64_t v45 = v13 + 24;
        uint64_t v46 = v13 + 28;
        uint64_t v47 = v13 + 29;
        uint64_t v48 = v13 + 30;
        uint64_t v49 = v13 + 31;
        unint64_t v15 = *(void *)(v13 + 32);
        uint64_t v34 = (long long *)(v13 + 32);
        uint64_t v35 = (char *)(v13 + 40);
        uint64_t v36 = (char *)(v13 + 52);
        uint64_t v37 = (char *)(v13 + 56);
        uint64_t v38 = (char *)(v13 + 60);
        uint64_t v39 = (char *)(v13 + 61);
        uint64_t v40 = (char *)(v13 + 62);
        uint64_t v41 = (char *)(v13 + 63);
        if (*(void *)v13 < v15
          || (uint64_t v23 = HIDWORD(*(void *)v13), HIDWORD(v15) >= v23)
          && (v15 >= *(void *)v13 || HIDWORD(v15) > v23)
          && sub_C3AE40((uint64_t)&v32, (uint64_t)&v42, (uint64_t)&v34))
        {
          v13 += 32;
          uint64_t v12 = v14;
        }
      }
      uint64_t v42 = v13;
      uint64_t v43 = v13 + 8;
      uint64_t v44 = v13 + 20;
      uint64_t v45 = v13 + 24;
      uint64_t v46 = v13 + 28;
      uint64_t v47 = v13 + 29;
      uint64_t v48 = v13 + 30;
      uint64_t v49 = v13 + 31;
      uint64_t v34 = (long long *)a4;
      uint64_t v35 = (char *)(a4 + 1);
      uint64_t v36 = (char *)a4 + 20;
      uint64_t v37 = (char *)(a4 + 3);
      unint64_t v16 = *a4;
      uint64_t v38 = (char *)a4 + 28;
      uint64_t v39 = (char *)a4 + 29;
      uint64_t v40 = (char *)a4 + 30;
      uint64_t v41 = (char *)a4 + 31;
      if (*(void *)v13 >= v16)
      {
        if ((uint64_t v17 = HIDWORD(*(void *)v13), HIDWORD(v16) < v17)
          || v16 < *(void *)v13 && HIDWORD(v16) <= v17
          || !sub_C3AE40((uint64_t)&v32, (uint64_t)&v42, (uint64_t)&v34))
        {
          long long v19 = *((_OWORD *)a4 + 1);
          long long v32 = *(_OWORD *)a4;
          long long v33 = v19;
          long long v20 = *(_OWORD *)(v13 + 16);
          *(_OWORD *)a4 = *(_OWORD *)v13;
          *((_OWORD *)a4 + 1) = v20;
          if (v9 >= v12)
          {
            while (1)
            {
              uint64_t v25 = 2 * v12;
              uint64_t v12 = (2 * v12) | 1;
              uint64_t v21 = a1 + 32 * v12;
              uint64_t v26 = v25 + 2;
              if (v25 + 2 < a3)
              {
                uint64_t v42 = a1 + 32 * v12;
                uint64_t v43 = v21 + 8;
                uint64_t v44 = v21 + 20;
                uint64_t v45 = v21 + 24;
                uint64_t v46 = v21 + 28;
                uint64_t v47 = v21 + 29;
                uint64_t v48 = v21 + 30;
                uint64_t v49 = v21 + 31;
                uint64_t v27 = *(void *)(v21 + 32);
                uint64_t v34 = (long long *)(v21 + 32);
                uint64_t v35 = (char *)(v21 + 40);
                uint64_t v36 = (char *)(v21 + 52);
                uint64_t v37 = (char *)(v21 + 56);
                uint64_t v38 = (char *)(v21 + 60);
                uint64_t v39 = (char *)(v21 + 61);
                uint64_t v40 = (char *)(v21 + 62);
                uint64_t v41 = (char *)(v21 + 63);
                unsigned int v28 = *(_DWORD *)(v21 + 4);
                if (v28 < HIDWORD(v27)
                  || (v28 <= HIDWORD(v27) ? (BOOL v29 = *(_DWORD *)v21 >= v27) : (BOOL v29 = 1),
                      !v29
                   || (uint64_t v30 = HIDWORD(*(void *)v21), HIDWORD(v27) >= v30)
                   && (v27 >= *(void *)v21 || HIDWORD(v27) > v30)
                   && sub_C3AE40((uint64_t)v50, (uint64_t)&v42, (uint64_t)&v34)))
                {
                  v21 += 32;
                  uint64_t v12 = v26;
                }
              }
              uint64_t v42 = v21;
              uint64_t v43 = v21 + 8;
              uint64_t v44 = v21 + 20;
              uint64_t v45 = v21 + 24;
              uint64_t v46 = v21 + 28;
              uint64_t v47 = v21 + 29;
              uint64_t v48 = v21 + 30;
              uint64_t v49 = v21 + 31;
              uint64_t v34 = &v32;
              uint64_t v35 = (char *)&v32 + 8;
              uint64_t v36 = (char *)&v33 + 4;
              uint64_t v37 = (char *)&v33 + 8;
              uint64_t v38 = (char *)&v33 + 12;
              uint64_t v39 = (char *)&v33 + 13;
              uint64_t v40 = (char *)&v33 + 14;
              uint64_t v41 = (char *)&v33 + 15;
              if (*(void *)v21 < (unint64_t)v32) {
                break;
              }
              uint64_t v31 = HIDWORD(*(void *)v21);
              if (DWORD1(v32) >= v31
                && (v32 >= *(void *)v21 || DWORD1(v32) > v31)
                && sub_C3AE40((uint64_t)v50, (uint64_t)&v42, (uint64_t)&v34))
              {
                break;
              }
              long long v24 = *(_OWORD *)(v21 + 16);
              *(_OWORD *)uint64_t v13 = *(_OWORD *)v21;
              *(_OWORD *)(v13 + 16) = v24;
              uint64_t v13 = v21;
              if (v9 < v12) {
                goto LABEL_13;
              }
            }
          }
          uint64_t v21 = v13;
LABEL_13:
          double result = *(double *)&v32;
          long long v22 = v33;
          *(_OWORD *)uint64_t v21 = v32;
          *(_OWORD *)(v21 + 16) = v22;
        }
      }
    }
  }
  return result;
}

uint64_t sub_C3B998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v9 = (_OWORD *)a1;
    a1 += 32 * (v5 + 1);
    uint64_t v10 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < a3)
    {
      v19[0] = a1;
      v19[1] = a1 + 8;
      v19[2] = a1 + 20;
      v19[3] = a1 + 24;
      v19[4] = a1 + 28;
      void v19[5] = a1 + 29;
      v19[6] = a1 + 30;
      v19[7] = a1 + 31;
      v18[0] = a1 + 32;
      v18[1] = a1 + 40;
      v18[2] = a1 + 52;
      v18[3] = a1 + 56;
      v18[4] = a1 + 60;
      v18[5] = a1 + 61;
      v18[6] = a1 + 62;
      v18[7] = a1 + 63;
      unsigned int v12 = *(_DWORD *)(a1 + 36);
      unsigned int v13 = *(_DWORD *)(a1 + 4);
      BOOL v14 = v13 > v12;
      if (v13 < v12) {
        goto LABEL_4;
      }
      unsigned int v15 = *(_DWORD *)(a1 + 32);
      if (!v14 && *(_DWORD *)a1 < v15) {
        goto LABEL_4;
      }
      uint64_t v16 = HIDWORD(*(void *)a1);
      if (v12 >= v16
        && (v15 >= *(void *)a1 || v12 > v16)
        && sub_C3AE40((uint64_t)&v20, (uint64_t)v19, (uint64_t)v18))
      {
LABEL_4:
        a1 += 32;
        uint64_t v5 = v11;
      }
    }
    long long v8 = *(_OWORD *)(a1 + 16);
    *uint64_t v9 = *(_OWORD *)a1;
    v9[1] = v8;
  }
  while (v5 <= v7);
  return a1;
}

BOOL sub_C3BAF0(BOOL result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    BOOL v5 = result;
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = (_OWORD *)(result + 32 * (v4 >> 1));
    uint64_t v31 = v7;
    long long v32 = (char *)v7 + 8;
    long long v33 = (char *)v7 + 20;
    uint64_t v34 = (char *)v7 + 24;
    uint64_t v35 = (char *)v7 + 28;
    uint64_t v36 = (char *)v7 + 29;
    uint64_t v37 = (char *)v7 + 30;
    uint64_t v38 = (char *)v7 + 31;
    uint64_t v9 = (long long *)(a2 - 32);
    unint64_t v8 = *(void *)(a2 - 32);
    uint64_t v23 = (long long *)(a2 - 32);
    long long v24 = (char *)(a2 - 24);
    uint64_t v25 = (char *)(a2 - 12);
    uint64_t v26 = (char *)(a2 - 8);
    uint64_t v27 = (char *)(a2 - 4);
    unsigned int v28 = (char *)(a2 - 3);
    BOOL v29 = (char *)(a2 - 2);
    uint64_t v30 = (char *)(a2 - 1);
    BOOL v20 = result;
    if (*(void *)v7 < v8
      || (uint64_t v19 = HIDWORD(*(void *)v7), HIDWORD(v8) >= v19)
      && (v8 >= *(void *)v7 || HIDWORD(v8) > v19)
      && (result = sub_C3AE40((uint64_t)&v21, (uint64_t)&v31, (uint64_t)&v23), BOOL v5 = v20, result))
    {
      long long v10 = v9[1];
      long long v21 = *v9;
      long long v22 = v10;
      long long v11 = v7[1];
      *uint64_t v9 = *v7;
      v9[1] = v11;
      if (v4 >= 2)
      {
        BOOL v14 = (char *)&v22 + 15;
        while (1)
        {
          unint64_t v17 = v6 - 1;
          unint64_t v6 = (v6 - 1) >> 1;
          unsigned int v12 = (_OWORD *)(v5 + 32 * v6);
          uint64_t v31 = v12;
          long long v32 = (char *)v12 + 8;
          long long v33 = (char *)v12 + 20;
          uint64_t v34 = (char *)v12 + 24;
          uint64_t v35 = (char *)v12 + 28;
          uint64_t v36 = (char *)v12 + 29;
          uint64_t v37 = (char *)v12 + 30;
          uint64_t v38 = (char *)v12 + 31;
          uint64_t v23 = &v21;
          long long v24 = (char *)&v21 + 8;
          uint64_t v25 = (char *)&v22 + 4;
          uint64_t v26 = (char *)&v22 + 8;
          uint64_t v27 = (char *)&v22 + 12;
          unsigned int v28 = (char *)&v22 + 13;
          BOOL v29 = (char *)&v22 + 14;
          uint64_t v30 = v14;
          if (*(void *)v12 >= (unint64_t)v21)
          {
            uint64_t v18 = HIDWORD(*(void *)v12);
            if (DWORD1(v21) < v18
              || v21 < *(void *)v12 && DWORD1(v21) <= v18)
            {
              break;
            }
            unsigned int v15 = v14;
            double result = sub_C3AE40((uint64_t)v39, (uint64_t)&v31, (uint64_t)&v23);
            BOOL v14 = v15;
            BOOL v5 = v20;
            if (!result) {
              break;
            }
          }
          long long v16 = v12[1];
          _OWORD *v7 = *v12;
          v7[1] = v16;
          uint64_t v7 = v12;
          if (v17 < 2) {
            goto LABEL_5;
          }
        }
      }
      unsigned int v12 = v7;
LABEL_5:
      long long v13 = v22;
      *unsigned int v12 = v21;
      v12[1] = v13;
    }
  }
  return result;
}

unint64_t sub_C3BD1C(uint64_t a1, void *a2, unsigned int a3, signed int a4)
{
  a2[4] = a2[3] + 16 * a3;
  uint64_t v5 = -1431655765 * ((a2[9] - a2[7]) >> 2);
  if (!v5) {
    goto LABEL_57;
  }
  uint64_t v7 = 0;
  unint64_t v8 = a2[11];
  uint64_t v9 = (void *)(a1 + 4136);
  uint64_t v10 = 4 * v8;
  LODWORD(v11) = -1;
  while (1)
  {
    unsigned int v12 = sub_A10650(v9, v8);
    long long v13 = &v12[-*(int *)v12];
    if (*(unsigned __int16 *)v13 < 5u)
    {
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v14 = *((unsigned __int16 *)v13 + 2);
      if (v14) {
        v14 += (uint64_t)&v12[*(unsigned int *)&v12[v14]];
      }
    }
    unsigned int v15 = (int *)(v14 + v10 + 4 + *(unsigned int *)(v14 + v10 + 4));
    long long v16 = (unsigned __int16 *)((char *)v15 - *v15);
    if (*v16 >= 7u && (uint64_t v17 = v16[3]) != 0) {
      uint64_t v18 = (unsigned int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v19 = sub_A1FDE4(v18, v7);
    int v20 = sub_A1FBEC(v9, v8, v7, *(unsigned __int8 *)(v19 + 8) - 1);
    long long v21 = sub_A10650(v9, v8);
    long long v22 = (int *)v21;
    uint64_t v23 = &v21[-*(int *)v21];
    if (*(unsigned __int16 *)v23 < 5u)
    {
      uint64_t v24 = 0;
    }
    else
    {
      uint64_t v24 = *((unsigned __int16 *)v23 + 2);
      if (v24) {
        v24 += (uint64_t)&v21[*(unsigned int *)&v21[v24]];
      }
    }
    uint64_t v25 = (int *)(v24 + v10 + 4 + *(unsigned int *)(v24 + v10 + 4));
    uint64_t v26 = (unsigned __int16 *)((char *)v25 - *v25);
    if (*v26 >= 7u && (uint64_t v27 = v26[3]) != 0) {
      unsigned int v28 = (unsigned int *)((char *)v25 + v27 + *(unsigned int *)((char *)v25 + v27));
    }
    else {
      unsigned int v28 = 0;
    }
    uint64_t v29 = sub_A1FDE4(v28, v7);
    uint64_t v30 = (unsigned __int16 *)((char *)v22 - *v22);
    if (*v30 < 7u)
    {
      uint64_t v31 = 0;
    }
    else
    {
      uint64_t v31 = (unsigned int *)v30[3];
      if (v31) {
        uint64_t v31 = (unsigned int *)((char *)v31 + (void)v22 + *(unsigned int *)((char *)v31 + (void)v22));
      }
    }
    if (*(_DWORD *)(sub_A200AC(v31, *(_DWORD *)(v29 + 4) + a3) + 4) + v20 >= a4) {
      break;
    }
    if (v5 == ++v7)
    {
      LODWORD(v7) = -1;
      return v7 | ((unint64_t)v11 << 32);
    }
  }
  if (v7 == -1) {
    goto LABEL_57;
  }
  unint64_t v32 = a2[11];
  uint64_t v34 = a2[3];
  uint64_t v33 = a2[4];
  uint64_t v35 = sub_A10650(v9, v32);
  uint64_t v36 = &v35[-*(int *)v35];
  if (*(unsigned __int16 *)v36 < 5u)
  {
    uint64_t v37 = 0;
  }
  else
  {
    uint64_t v37 = *((unsigned __int16 *)v36 + 2);
    if (v37) {
      v37 += (uint64_t)&v35[*(unsigned int *)&v35[v37]];
    }
  }
  uint64_t v38 = 4 * v32;
  uint64_t v39 = (int *)(v37 + v38 + 4 + *(unsigned int *)(v37 + v38 + 4));
  uint64_t v40 = (unsigned __int16 *)((char *)v39 - *v39);
  if (*v40 >= 7u && (uint64_t v41 = v40[3]) != 0) {
    uint64_t v42 = (unsigned int *)((char *)v39 + v41 + *(unsigned int *)((char *)v39 + v41));
  }
  else {
    uint64_t v42 = 0;
  }
  unint64_t v43 = v33 - v34;
  uint64_t v44 = *(unsigned __int8 *)(sub_A1FDE4(v42, v7) + 8);
  uint64_t v45 = sub_A10650(v9, v32);
  uint64_t v46 = (int *)v45;
  uint64_t v47 = &v45[-*(int *)v45];
  if (*(unsigned __int16 *)v47 < 5u)
  {
    uint64_t v48 = 0;
  }
  else
  {
    uint64_t v48 = *((unsigned __int16 *)v47 + 2);
    if (v48) {
      v48 += (uint64_t)&v45[*(unsigned int *)&v45[v48]];
    }
  }
  uint64_t v49 = v48 + v38;
  unint64_t v50 = v43 >> 4;
  uint64_t v51 = (int *)(v49 + 4 + *(unsigned int *)(v49 + 4));
  long long v52 = (unsigned __int16 *)((char *)v51 - *v51);
  if (*v52 >= 7u && (uint64_t v53 = v52[3]) != 0) {
    long long v54 = (unsigned int *)((char *)v51 + v53 + *(unsigned int *)((char *)v51 + v53));
  }
  else {
    long long v54 = 0;
  }
  uint64_t v55 = sub_A1FDE4(v54, v7);
  long long v56 = (unsigned __int16 *)((char *)v46 - *v46);
  if (*v56 < 7u)
  {
    uint64_t v58 = sub_A200AC(0, *(_DWORD *)(v55 + 4) + (int)v50);
    if (!v44)
    {
LABEL_57:
      LODWORD(v7) = -1;
      LODWORD(v11) = -1;
      return v7 | ((unint64_t)v11 << 32);
    }
  }
  else
  {
    long long v57 = (unsigned int *)v56[3];
    if (v57) {
      long long v57 = (unsigned int *)((char *)v57 + (void)v46 + *(unsigned int *)((char *)v57 + (void)v46));
    }
    uint64_t v58 = sub_A200AC(v57, *(_DWORD *)(v55 + 4) + (int)v50);
    if (!v44) {
      goto LABEL_57;
    }
  }
  uint64_t v11 = 0;
  int v59 = *(_DWORD *)(v58 + 4);
  while ((int)(sub_A1FBEC(v9, v32, v7, v11) + v59) < a4)
  {
    if (v44 == ++v11)
    {
      LODWORD(v7) = -1;
      LODWORD(v11) = -1;
      return v7 | ((unint64_t)v11 << 32);
    }
  }
  if (v11 == -1) {
    goto LABEL_57;
  }
  unint64_t v60 = a2[11];
  int v61 = sub_A1FCE8(v9, v60, v7, v11);
  int v62 = sub_A1FBEC(v9, v60, v7, v11);
  uint64_t v63 = sub_A10650(v9, v60);
  uint64_t v64 = (int *)v63;
  uint64_t v65 = &v63[-*(int *)v63];
  if (*(unsigned __int16 *)v65 < 5u)
  {
    uint64_t v66 = 0;
  }
  else
  {
    uint64_t v66 = *((unsigned __int16 *)v65 + 2);
    if (v66) {
      v66 += (uint64_t)&v63[*(unsigned int *)&v63[v66]];
    }
  }
  uint64_t v68 = 4 * v60;
  uint64_t v69 = (int *)(v66 + v68 + 4 + *(unsigned int *)(v66 + v68 + 4));
  unsigned int v70 = (unsigned __int16 *)((char *)v69 - *v69);
  if (*v70 >= 7u && (uint64_t v71 = v70[3]) != 0) {
    uint64_t v72 = (unsigned int *)((char *)v69 + v71 + *(unsigned int *)((char *)v69 + v71));
  }
  else {
    uint64_t v72 = 0;
  }
  uint64_t v73 = sub_A1FDE4(v72, v7);
  unint64_t v74 = (unsigned __int16 *)((char *)v64 - *v64);
  if (*v74 < 9u)
  {
    uint64_t v75 = 0;
  }
  else
  {
    uint64_t v75 = (unsigned int *)v74[4];
    if (v75) {
      uint64_t v75 = (unsigned int *)((char *)v75 + (void)v64 + *(unsigned int *)((char *)v75 + (void)v64));
    }
  }
  int v76 = *(_DWORD *)sub_A1FF48(v75, (*(_DWORD *)(v73 + 8) >> 8) + (int)v11);
  uint64_t v77 = sub_A10650(v9, v60);
  unint64_t v78 = (int *)v77;
  unint64_t v79 = &v77[-*(int *)v77];
  if (*(unsigned __int16 *)v79 < 5u)
  {
    uint64_t v80 = 0;
  }
  else
  {
    uint64_t v80 = *((unsigned __int16 *)v79 + 2);
    if (v80) {
      v80 += (uint64_t)&v77[*(unsigned int *)&v77[v80]];
    }
  }
  uint64_t v81 = (int *)(v80 + v68 + 4 + *(unsigned int *)(v80 + v68 + 4));
  uint64_t v82 = (unsigned __int16 *)((char *)v81 - *v81);
  if (*v82 >= 7u && (uint64_t v83 = v82[3]) != 0) {
    uint64_t v84 = (unsigned int *)((char *)v81 + v83 + *(unsigned int *)((char *)v81 + v83));
  }
  else {
    uint64_t v84 = 0;
  }
  uint64_t v85 = sub_A1FDE4(v84, v7);
  uint64_t v86 = (unsigned __int16 *)((char *)v78 - *v78);
  if (*v86 < 7u)
  {
    uint64_t v87 = 0;
  }
  else
  {
    uint64_t v87 = (unsigned int *)v86[3];
    if (v87) {
      uint64_t v87 = (unsigned int *)((char *)v87 + (void)v78 + *(unsigned int *)((char *)v87 + (void)v78));
    }
  }
  int v88 = a4 - *(_DWORD *)(sub_A200AC(v87, *(_DWORD *)(v85 + 4) + a3) + 4);
  BOOL v89 = __OFSUB__(v88, v61);
  int v90 = v88 - v61;
  if (!((v90 < 0) ^ v89 | (v90 == 0)))
  {
    sub_C3C324((v90 / v76));
    sub_C3C324(((v62 - v61) / v76));
  }
  return v7 | ((unint64_t)v11 << 32);
}

uint64_t sub_C3C324(uint64_t result)
{
  int v1 = result;
  if ((result & 0x80000000) != 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v8, v1);
    uint64_t v3 = std::string::insert(&v8, 0, "narrowing ");
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v9.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    uint64_t v5 = std::string::append(&v9, " failed");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    std::string::size_type v11 = v5->__r_.__value_.__r.__words[2];
    long long v10 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    uint64_t v7 = (void *)sub_2F404((uint64_t)exception, &v10);
  }
  return result;
}

void sub_C3C3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_C3C474(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  a2[4] = a2[3] + 16 * a3;
  if (!(-1431655765 * ((uint64_t)(a2[9] - a2[7]) >> 2))) {
    goto LABEL_69;
  }
  unint64_t v6 = a2[11];
  uint64_t v7 = (void *)(a1 + 4136);
  uint64_t v8 = 4 * v6;
  uint64_t v9 = -1431655765 * ((uint64_t)(a2[9] - a2[7]) >> 2);
  while (1)
  {
    long long v10 = sub_A10650(v7, v6);
    std::string::size_type v11 = &v10[-*(int *)v10];
    if (*(unsigned __int16 *)v11 < 5u)
    {
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v12 = *((unsigned __int16 *)v11 + 2);
      if (v12) {
        v12 += (uint64_t)&v10[*(unsigned int *)&v10[v12]];
      }
    }
    long long v13 = (int *)(v12 + v8 + 4 + *(unsigned int *)(v12 + v8 + 4));
    uint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
    if (*v14 >= 7u && (uint64_t v15 = v14[3]) != 0) {
      long long v16 = (unsigned int *)((char *)v13 + v15 + *(unsigned int *)((char *)v13 + v15));
    }
    else {
      long long v16 = 0;
    }
    unsigned int v17 = v9 - 1;
    sub_A1FDE4(v16, v9 - 1);
    uint64_t v18 = sub_A10650(v7, v6);
    uint64_t v19 = (int *)v18;
    int v20 = &v18[-*(int *)v18];
    if (*(unsigned __int16 *)v20 < 5u)
    {
      uint64_t v21 = 0;
    }
    else
    {
      uint64_t v21 = *((unsigned __int16 *)v20 + 2);
      if (v21) {
        v21 += (uint64_t)&v18[*(unsigned int *)&v18[v21]];
      }
    }
    long long v22 = (int *)(v21 + v8 + 4 + *(unsigned int *)(v21 + v8 + 4));
    uint64_t v23 = (unsigned __int16 *)((char *)v22 - *v22);
    if (*v23 >= 7u && (uint64_t v24 = v23[3]) != 0) {
      uint64_t v25 = (unsigned int *)((char *)v22 + v24 + *(unsigned int *)((char *)v22 + v24));
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v26 = (int *)sub_A1FDE4(v25, (int)v9 - 1);
    int v27 = *v26;
    unsigned int v28 = (unsigned __int16 *)((char *)v19 - *v19);
    if (*v28 < 9u)
    {
      uint64_t v29 = 0;
    }
    else
    {
      uint64_t v29 = (unsigned int *)v28[4];
      if (v29) {
        uint64_t v29 = (unsigned int *)((char *)v29 + (void)v19 + *(unsigned int *)((char *)v29 + (void)v19));
      }
    }
    int v30 = *(_DWORD *)(sub_A1FF48(v29, v26[2] >> 8) + 4);
    uint64_t v31 = sub_A10650(v7, v6);
    unint64_t v32 = (int *)v31;
    uint64_t v33 = &v31[-*(int *)v31];
    if (*(unsigned __int16 *)v33 < 5u)
    {
      uint64_t v34 = 0;
    }
    else
    {
      uint64_t v34 = *((unsigned __int16 *)v33 + 2);
      if (v34) {
        v34 += (uint64_t)&v31[*(unsigned int *)&v31[v34]];
      }
    }
    uint64_t v35 = (int *)(v34 + v8 + 4 + *(unsigned int *)(v34 + v8 + 4));
    uint64_t v36 = (unsigned __int16 *)((char *)v35 - *v35);
    if (*v36 >= 7u && (uint64_t v37 = v36[3]) != 0) {
      uint64_t v38 = (unsigned int *)((char *)v35 + v37 + *(unsigned int *)((char *)v35 + v37));
    }
    else {
      uint64_t v38 = 0;
    }
    uint64_t v39 = sub_A1FDE4(v38, (int)v9 - 1);
    uint64_t v40 = (unsigned __int16 *)((char *)v32 - *v32);
    if (*v40 < 7u)
    {
      uint64_t v41 = 0;
    }
    else
    {
      uint64_t v41 = (unsigned int *)v40[3];
      if (v41) {
        uint64_t v41 = (unsigned int *)((char *)v41 + (void)v32 + *(unsigned int *)((char *)v41 + (void)v32));
      }
    }
    if (v30 + v27 + *(_DWORD *)sub_A200AC(v41, *(_DWORD *)(v39 + 4) + a3) <= a4) {
      break;
    }
    if (!--v9) {
      goto LABEL_69;
    }
  }
  if (!v9) {
    goto LABEL_69;
  }
  unint64_t v42 = a2[11];
  uint64_t v44 = a2[3];
  uint64_t v43 = a2[4];
  uint64_t v45 = sub_A10650(v7, v42);
  uint64_t v46 = &v45[-*(int *)v45];
  if (*(unsigned __int16 *)v46 < 5u)
  {
    uint64_t v47 = 0;
  }
  else
  {
    uint64_t v47 = *((unsigned __int16 *)v46 + 2);
    if (v47) {
      v47 += (uint64_t)&v45[*(unsigned int *)&v45[v47]];
    }
  }
  uint64_t v48 = 4 * v42;
  uint64_t v49 = (int *)(v47 + v48 + 4 + *(unsigned int *)(v47 + v48 + 4));
  unint64_t v50 = (unsigned __int16 *)((char *)v49 - *v49);
  if (*v50 >= 7u && (uint64_t v51 = v50[3]) != 0) {
    long long v52 = (unsigned int *)((char *)v49 + v51 + *(unsigned int *)((char *)v49 + v51));
  }
  else {
    long long v52 = 0;
  }
  unint64_t v53 = v43 - v44;
  uint64_t v54 = *(unsigned __int8 *)(sub_A1FDE4(v52, (int)v9 - 1) + 8);
  uint64_t v55 = sub_A10650(v7, v42);
  long long v56 = (int *)v55;
  long long v57 = &v55[-*(int *)v55];
  if (*(unsigned __int16 *)v57 < 5u)
  {
    uint64_t v58 = 0;
  }
  else
  {
    uint64_t v58 = *((unsigned __int16 *)v57 + 2);
    if (v58) {
      v58 += (uint64_t)&v55[*(unsigned int *)&v55[v58]];
    }
  }
  uint64_t v59 = v58 + v48;
  unint64_t v60 = v53 >> 4;
  int v61 = (int *)(v59 + 4 + *(unsigned int *)(v59 + 4));
  int v62 = (unsigned __int16 *)((char *)v61 - *v61);
  if (*v62 >= 7u && (uint64_t v63 = v62[3]) != 0) {
    uint64_t v64 = (unsigned int *)((char *)v61 + v63 + *(unsigned int *)((char *)v61 + v63));
  }
  else {
    uint64_t v64 = 0;
  }
  uint64_t v65 = sub_A1FDE4(v64, (int)v9 - 1);
  uint64_t v66 = (unsigned __int16 *)((char *)v56 - *v56);
  if (*v66 < 7u)
  {
    uint64_t v68 = (int *)sub_A200AC(0, *(_DWORD *)(v65 + 4) + (int)v60);
    if (!v54)
    {
LABEL_69:
      unsigned int v17 = -1;
      uint64_t v77 = 0xFFFFFFFFLL;
      return v17 | (unint64_t)(v77 << 32);
    }
  }
  else
  {
    uint64_t v67 = (unsigned int *)v66[3];
    if (v67) {
      uint64_t v67 = (unsigned int *)((char *)v67 + (void)v56 + *(unsigned int *)((char *)v67 + (void)v56));
    }
    uint64_t v68 = (int *)sub_A200AC(v67, *(_DWORD *)(v65 + 4) + (int)v60);
    if (!v54) {
      goto LABEL_69;
    }
  }
  int v69 = *v68;
  while ((int)(sub_A1FCE8(v7, v42, (int)v9 - 1, (int)v54 - 1) + v69) > a4)
  {
    if (!--v54) {
      goto LABEL_69;
    }
  }
  if (!v54) {
    goto LABEL_69;
  }
  unint64_t v70 = a2[11];
  int v71 = sub_A1FCE8(v7, v70, (int)v9 - 1, (int)v54 - 1);
  int v72 = sub_A1FBEC(v7, v70, (int)v9 - 1, (int)v54 - 1);
  uint64_t v73 = sub_A10650(v7, v70);
  unint64_t v74 = (int *)v73;
  uint64_t v75 = &v73[-*(int *)v73];
  int v108 = v72;
  if (*(unsigned __int16 *)v75 < 5u)
  {
    uint64_t v76 = 0;
  }
  else
  {
    uint64_t v76 = *((unsigned __int16 *)v75 + 2);
    if (v76) {
      v76 += (uint64_t)&v73[*(unsigned int *)&v73[v76]];
    }
  }
  uint64_t v79 = 4 * v70;
  uint64_t v80 = (int *)(v76 + v79 + 4 + *(unsigned int *)(v76 + v79 + 4));
  uint64_t v81 = (unsigned __int16 *)((char *)v80 - *v80);
  if (*v81 >= 7u && (uint64_t v82 = v81[3]) != 0) {
    uint64_t v83 = (unsigned int *)((char *)v80 + v82 + *(unsigned int *)((char *)v80 + v82));
  }
  else {
    uint64_t v83 = 0;
  }
  uint64_t v84 = sub_A1FDE4(v83, (int)v9 - 1);
  uint64_t v85 = (unsigned __int16 *)((char *)v74 - *v74);
  int v110 = v71;
  if (*v85 < 9u)
  {
    uint64_t v86 = 0;
  }
  else
  {
    uint64_t v86 = (unsigned int *)v85[4];
    if (v86) {
      uint64_t v86 = (unsigned int *)((char *)v86 + (void)v74 + *(unsigned int *)((char *)v86 + (void)v74));
    }
  }
  int v87 = *(_DWORD *)sub_A1FF48(v86, (*(_DWORD *)(v84 + 8) >> 8) + (int)v54 - 1);
  int v88 = sub_A10650(v7, v70);
  BOOL v89 = (int *)v88;
  int v90 = &v88[-*(int *)v88];
  if (*(unsigned __int16 *)v90 < 5u)
  {
    uint64_t v91 = 0;
  }
  else
  {
    uint64_t v91 = *((unsigned __int16 *)v90 + 2);
    if (v91) {
      v91 += (uint64_t)&v88[*(unsigned int *)&v88[v91]];
    }
  }
  uint64_t v92 = (int *)(v91 + v79 + 4 + *(unsigned int *)(v91 + v79 + 4));
  uint64_t v93 = (unsigned __int16 *)((char *)v92 - *v92);
  if (*v93 >= 7u && (uint64_t v94 = v93[3]) != 0) {
    uint64_t v95 = (unsigned int *)((char *)v92 + v94 + *(unsigned int *)((char *)v92 + v94));
  }
  else {
    uint64_t v95 = 0;
  }
  uint64_t v96 = sub_A1FDE4(v95, (int)v9 - 1);
  uint64_t v97 = (unsigned __int16 *)((char *)v89 - *v89);
  if (*v97 < 7u)
  {
    char v98 = 0;
  }
  else
  {
    char v98 = (unsigned int *)v97[3];
    if (v98) {
      char v98 = (unsigned int *)((char *)v98 + (void)v89 + *(unsigned int *)((char *)v98 + (void)v89));
    }
  }
  uint64_t v99 = (_DWORD *)sub_A200AC(v98, *(_DWORD *)(v96 + 4) + a3);
  unsigned int v100 = sub_C3C324(((a4 - v110 - *v99) / v87 + 1));
  if (v100 >= sub_C3C324(((v108 - v110) / v87)))
  {
    uint64_t v101 = sub_A10650(v7, v70);
    uint64_t v102 = &v101[-*(int *)v101];
    if (*(unsigned __int16 *)v102 < 5u)
    {
      uint64_t v103 = 0;
    }
    else
    {
      uint64_t v103 = *((unsigned __int16 *)v102 + 2);
      if (v103) {
        v103 += (uint64_t)&v101[*(unsigned int *)&v101[v103]];
      }
    }
    char v104 = (int *)(v103 + v79 + 4 + *(unsigned int *)(v103 + v79 + 4));
    uint64_t v105 = (unsigned __int16 *)((char *)v104 - *v104);
    if (*v105 >= 7u && (uint64_t v106 = v105[3]) != 0) {
      unint64_t v107 = (unsigned int *)((char *)v104 + v106 + *(unsigned int *)((char *)v104 + v106));
    }
    else {
      unint64_t v107 = 0;
    }
    if (*(unsigned __int8 *)(sub_A1FDE4(v107, (int)v9 - 1) + 8) == v54)
    {
      unsigned int v17 = v9;
      uint64_t v77 = 0;
    }
    else
    {
      uint64_t v77 = v54;
    }
  }
  else
  {
    uint64_t v77 = v54 - 1;
  }
  return v17 | (unint64_t)(v77 << 32);
}

void sub_C3CBB4()
{
  uint64_t v0 = (void *)__chkstk_darwin();
  uint64_t v2 = v0[1];
  *(void *)&long long v17 = *v0;
  *((void *)&v17 + 1) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = v1[1];
  *(void *)&long long v8 = *v1;
  *((void *)&v8 + 1) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = v1[3];
  uint64_t v9 = v1[2];
  uint64_t v10 = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = v1[5];
  uint64_t v11 = v1[4];
  uint64_t v12 = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = v1[7];
  uint64_t v13 = v1[6];
  uint64_t v14 = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = v1[9];
  uint64_t v15 = v1[8];
  uint64_t v16 = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  sub_9F5514(v18, &v17, 1, &v8);
}

void sub_C3D484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  sub_14A84((uint64_t)&a10);
  sub_C2A1B4((uint64_t)&a12);
  sub_C2A1B4((uint64_t)&a17);
  sub_C2A1B4((uint64_t)&a22);
  sub_C2A1F0(&a27);
  sub_BDF270((uint64_t)&a33);
  sub_3AB00((uint64_t)&a39);
  sub_3AB00((uint64_t)&a44);
  sub_BD98A4(&a49);
  sub_591F30((uint64_t)&a62);
  sub_591F30((uint64_t)&a67);
  sub_BD9954((void ***)&STACK[0x200]);
  sub_49DA2C(&STACK[0x278]);
  _Unwind_Resume(a1);
}

void sub_C3D598(void *a1@<X0>, int8x8_t **a2@<X1>, void **a3@<X2>, void *a4@<X8>)
{
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v134);
    sub_188FC78(&v134, (uint64_t)"Computing affected trip sequences in stop patterns from snapshot with ", 70);
    uint64_t v6 = (void *)std::ostream::operator<<();
    sub_188FC78(v6, (uint64_t)" trip updates", 13);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
    if (SBYTE7(v128) < 0) {
      operator delete(__p[0]);
    }
    if (v141 < 0) {
      operator delete(v138);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  sub_725D0((uint64_t)v133);
  unint64_t v130 = 0;
  unint64_t v131 = 0;
  unint64_t v132 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v128 = 0u;
  int v129 = 1065353216;
  int8x8_t v7 = (*a2)[4];
  if (v7)
  {
    v118 = a1;
    uint64_t v119 = 0;
    while (1)
    {
      uint64_t v8 = *(unsigned int *)(*(void *)&v7 + 40);
      if (v8)
      {
        uint64_t v9 = *(unsigned int *)(*(void *)&v7 + 44);
        uint64_t v10 = v8 << 32;
        if (v9 == -1)
        {
          uint64_t v10 = 0;
          uint64_t v9 = 0xFFFFFFFFLL;
        }
      }
      else
      {
        uint64_t v10 = 0;
        uint64_t v9 = 0xFFFFFFFFLL;
      }
      unint64_t v11 = v9 | v10;
      unsigned int v12 = *(_DWORD *)(*(void *)&v7 + 48);
      unint64_t v125 = v9 | v10;
      unsigned int v126 = v12;
      if (!*a3) {
        goto LABEL_37;
      }
      if (!sub_BAE0B0(*a3, (uint64_t *)&v125)) {
        break;
      }
      uint64_t v13 = sub_BAE0B0(*a3, (uint64_t *)&v125);
      uint64_t v14 = v13;
      if (!v13) {
        sub_5AE8("unordered_map::at: key not found");
      }
      uint64_t v16 = v13[4];
      uint64_t v15 = v13[5];
      if (v16 != v15)
      {
        uint64_t v17 = (uint64_t)v131;
        do
        {
          sub_C4348C((uint64_t)a1, v16, &v134);
          uint64_t v19 = sub_BDE018((void ***)&v130, v17, (__n128 *)&v134);
          int v20 = (char *)v134;
          if (v134)
          {
            uint64_t v21 = (char *)v135;
            uint64_t v18 = v134;
            if ((void *)v135 != v134)
            {
              do
              {
                long long v22 = (void *)*((void *)v21 - 3);
                if (v22)
                {
                  *((void *)v21 - 2) = v22;
                  operator delete(v22);
                }
                uint64_t v23 = (void *)*((void *)v21 - 6);
                if (v23)
                {
                  *((void *)v21 - 5) = v23;
                  operator delete(v23);
                }
                uint64_t v24 = (void *)*((void *)v21 - 9);
                if (v24)
                {
                  *((void *)v21 - 8) = v24;
                  operator delete(v24);
                }
                v21 -= 128;
              }
              while (v21 != v20);
              uint64_t v18 = v134;
            }
            *(void *)&long long v135 = v20;
            operator delete(v18);
          }
          uint64_t v17 = (uint64_t)(v19 + 3);
          v16 += 12;
        }
        while (v16 != v15);
      }
      unint64_t v134 = &v125;
      uint64_t v25 = sub_C459A8((uint64_t)__p, (uint64_t *)&v125, (uint64_t)&unk_20F06E0, (uint64_t **)&v134);
      if (v25 != v14) {
        sub_31AF54(v25 + 4, (char *)v14[4], (char *)v14[5], 0xAAAAAAAAAAAAAAABLL * ((v14[5] - v14[4]) >> 2));
      }
LABEL_10:
      int8x8_t v7 = **(int8x8_t **)&v7;
      if (!*(void *)&v7) {
        goto LABEL_154;
      }
    }
    unint64_t v11 = v125;
    unsigned int v12 = v126;
LABEL_37:
    sub_C4448C((uint64_t)&v134, a1, v11, v12, 0, 1);
LABEL_38:
    uint64_t v26 = (char *)v138;
    unint64_t v27 = (unint64_t)v139;
LABEL_39:
    if ((unint64_t)v26 < v27)
    {
      uint64_t v123 = __ROR8__(*(void *)v26, 32);
      int v124 = *((_DWORD *)v26 + 2);
      sub_C4348C((uint64_t)a1, (uint64_t)&v123, v121);
      unsigned int v28 = v131;
      if ((unint64_t)v131 >= v132)
      {
        uint64_t v29 = sub_C45D78((void ***)&v130, (uint64_t)v121);
        int v30 = (char *)v121[0];
        unint64_t v131 = v29;
        if (v121[0])
        {
          uint64_t v31 = (char *)v121[1];
          unint64_t v32 = v121[0];
          if (v121[1] != v121[0])
          {
            do
            {
              uint64_t v33 = (void *)*((void *)v31 - 3);
              if (v33)
              {
                *((void *)v31 - 2) = v33;
                operator delete(v33);
              }
              uint64_t v34 = (void *)*((void *)v31 - 6);
              if (v34)
              {
                *((void *)v31 - 5) = v34;
                operator delete(v34);
              }
              uint64_t v35 = (void *)*((void *)v31 - 9);
              if (v35)
              {
                *((void *)v31 - 8) = v35;
                operator delete(v35);
              }
              v31 -= 128;
            }
            while (v31 != v30);
            unint64_t v32 = v121[0];
          }
          v121[1] = v30;
          operator delete(v32);
          uint64_t v29 = v131;
        }
      }
      else
      {
        *(void *)unint64_t v131 = 0;
        *((void *)v28 + 1) = 0;
        *((void *)v28 + 2) = 0;
        *(_OWORD *)unsigned int v28 = *(_OWORD *)v121;
        *((void *)v28 + 2) = v122;
        uint64_t v29 = v28 + 24;
        unint64_t v131 = v28 + 24;
      }
      uint64_t v37 = *((void *)v29 - 3);
      uint64_t v36 = *((void *)v29 - 2);
      if (v37 == v36) {
        goto LABEL_55;
      }
LABEL_65:
      int8x8_t v40 = (*a2)[3];
      if (!*(void *)&v40) {
        goto LABEL_64;
      }
      uint64_t v41 = *(unsigned int *)(v37 + 8);
      unint64_t v42 = 0xFF51AFD7ED558CCDLL * (*(void *)v37 ^ (*(void *)v37 >> 33));
      unint64_t v43 = (((0xC4CEB9FE1A85EC53 * (v42 ^ (v42 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v42 ^ (v42 >> 33))) >> 33))
           + 0x388152A534) ^ 0xDEADBEEF;
      unint64_t v44 = (v41 + (v43 << 6) + (v43 >> 2) + 2654435769u) ^ v43;
      uint8x8_t v45 = (uint8x8_t)vcnt_s8(v40);
      v45.i16[0] = vaddlv_u8(v45);
      if (v45.u32[0] > 1uLL)
      {
        unint64_t v46 = v44;
        if (v44 >= *(void *)&v40) {
          unint64_t v46 = v44 % *(void *)&v40;
        }
      }
      else
      {
        unint64_t v46 = v44 & (*(void *)&v40 - 1);
      }
      uint64_t v47 = *(uint64_t ***)(*(void *)&(*a2)[2] + 8 * v46);
      if (!v47) {
        goto LABEL_64;
      }
      uint64_t v48 = *v47;
      if (!v48) {
        goto LABEL_64;
      }
      uint64_t v49 = __ROR8__(*(void *)v37, 32);
      if (v45.u32[0] < 2uLL)
      {
        uint64_t v50 = *(void *)&v40 - 1;
        while (1)
        {
          uint64_t v52 = v48[1];
          if (v44 == v52)
          {
            if (*((_DWORD *)v48 + 4) == v49 && *(uint64_t *)((char *)v48 + 20) == __PAIR64__(v41, HIDWORD(v49))) {
              goto LABEL_87;
            }
          }
          else if ((v52 & v50) != v46)
          {
            goto LABEL_64;
          }
          uint64_t v48 = (uint64_t *)*v48;
          if (!v48) {
            goto LABEL_64;
          }
        }
      }
      while (1)
      {
        unint64_t v51 = v48[1];
        if (v44 == v51)
        {
          if (*((_DWORD *)v48 + 4) == v49 && *(uint64_t *)((char *)v48 + 20) == __PAIR64__(v41, HIDWORD(v49)))
          {
LABEL_87:
            v121[0] = *(void **)v37;
            LODWORD(v121[1]) = v41;
            uint64_t v142 = v121;
            unint64_t v53 = sub_C45F40((uint64_t)__p, (uint64_t *)v121, (uint64_t)&unk_20F06E0, (uint64_t **)&v142);
            uint64_t v54 = v53;
            long long v56 = (char *)v53[5];
            unint64_t v55 = v53[6];
            if ((unint64_t)v56 < v55)
            {
              *(void *)long long v56 = v123;
              *((_DWORD *)v56 + 2) = v124;
              uint64_t v39 = v56 + 12;
              a1 = v118;
            }
            else
            {
              long long v57 = (void **)(v53 + 4);
              uint64_t v58 = (unsigned char *)v53[4];
              unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * ((v56 - v58) >> 2) + 1;
              if (v59 > 0x1555555555555555) {
                sub_2E00();
              }
              unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55 - (void)v58) >> 2);
              if (2 * v60 > v59) {
                unint64_t v59 = 2 * v60;
              }
              if (v60 >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v61 = 0x1555555555555555;
              }
              else {
                unint64_t v61 = v59;
              }
              if (v61)
              {
                if (v61 > 0x1555555555555555) {
                  sub_188D718();
                }
                unint64_t v62 = v61;
                uint64_t v63 = (char *)operator new(12 * v61);
                unint64_t v61 = v62;
                long long v57 = (void **)(v54 + 4);
              }
              else
              {
                uint64_t v63 = 0;
              }
              uint64_t v64 = &v63[4 * ((v56 - v58) >> 2)];
              *(void *)uint64_t v64 = v123;
              *((_DWORD *)v64 + 2) = v124;
              uint64_t v65 = v64;
              if (v56 == v58)
              {
                a1 = v118;
                uint64_t v39 = v64 + 12;
                v54[4] = v64;
                v54[5] = v64 + 12;
                v54[6] = &v63[12 * v61];
                if (v56) {
                  goto LABEL_102;
                }
              }
              else
              {
                a1 = v118;
                do
                {
                  uint64_t v66 = *(void *)(v56 - 12);
                  v56 -= 12;
                  int v67 = *((_DWORD *)v56 + 2);
                  *(void *)(v65 - 12) = v66;
                  v65 -= 12;
                  *((_DWORD *)v65 + 2) = v67;
                }
                while (v56 != v58);
                long long v56 = (char *)*v57;
                uint64_t v39 = v64 + 12;
                v54[4] = v65;
                v54[5] = v64 + 12;
                v54[6] = &v63[12 * v61];
                if (v56) {
LABEL_102:
                }
                  operator delete(v56);
              }
            }
            v54[5] = v39;
LABEL_64:
            v37 += 128;
            if (v37 != v36) {
              goto LABEL_65;
            }
LABEL_55:
            unint64_t v27 = (unint64_t)v139;
            uint64_t v26 = (char *)v138 + 12;
            int v138 = v26;
            if (v26 == v139)
            {
              uint64_t v38 = v136 + 2;
              unint64_t v136 = v38;
              if ((unint64_t)v38 >= v137) {
                break;
              }
              while (1)
              {
                uint64_t v26 = *v38;
                unint64_t v27 = (unint64_t)v38[1];
                if (*v38 != (char *)v27) {
                  break;
                }
                v38 += 2;
                unint64_t v136 = v38;
                if ((unint64_t)v38 >= v137) {
                  goto LABEL_9;
                }
              }
              int v138 = *v38;
              v139 = (char *)v27;
              if ((unint64_t)v26 < v27)
              {
                while (1)
                {
LABEL_110:
                  if (!v140)
                  {
                    uint64_t v68 = v134;
                    uint64_t v69 = *(void *)v26;
                    uint64_t v70 = *((void *)v134 + 517);
                    if (sub_C259C0(v70 + 3896))
                    {
                      if (*(void *)(v70 + 3944))
                      {
                        unint64_t v71 = __ROR8__(v69, 32);
                        if (!sub_A10E20(v68 + 517, SHIDWORD(v71)))
                        {
                          int v72 = *(void **)(v68[517] + 3944);
                          int8x8_t v73 = (int8x8_t)v72[1];
                          if (v73)
                          {
                            unint64_t v74 = 0xC4CEB9FE1A85EC53
                                * ((0xFF51AFD7ED558CCDLL * (v71 ^ (v71 >> 33))) ^ ((0xFF51AFD7ED558CCDLL
                                                                                  * (v71 ^ (v71 >> 33))) >> 33));
                            unint64_t v75 = v74 ^ (v74 >> 33);
                            uint8x8_t v76 = (uint8x8_t)vcnt_s8(v73);
                            v76.i16[0] = vaddlv_u8(v76);
                            if (v76.u32[0] > 1uLL)
                            {
                              unint64_t v77 = v75;
                              if (v75 >= *(void *)&v73) {
                                unint64_t v77 = v75 % *(void *)&v73;
                              }
                            }
                            else
                            {
                              unint64_t v77 = (*(void *)&v73 - 1) & v75;
                            }
                            unint64_t v78 = *(uint64_t ***)(*v72 + 8 * v77);
                            if (v78)
                            {
                              uint64_t v79 = *v78;
                              if (v79)
                              {
                                if (v76.u32[0] < 2uLL)
                                {
                                  uint64_t v80 = *(void *)&v73 - 1;
                                  while (1)
                                  {
                                    uint64_t v84 = v79[1];
                                    if (v75 == v84)
                                    {
                                      if (*((_DWORD *)v79 + 5) == HIDWORD(v71) && *((_DWORD *)v79 + 4) == v71) {
                                        goto LABEL_147;
                                      }
                                    }
                                    else if ((v84 & v80) != v77)
                                    {
                                      goto LABEL_140;
                                    }
                                    uint64_t v79 = (uint64_t *)*v79;
                                    if (!v79) {
                                      goto LABEL_140;
                                    }
                                  }
                                }
                                do
                                {
                                  unint64_t v82 = v79[1];
                                  if (v75 == v82)
                                  {
                                    if (*((_DWORD *)v79 + 5) == HIDWORD(v71) && *((_DWORD *)v79 + 4) == v71) {
                                      goto LABEL_147;
                                    }
                                  }
                                  else
                                  {
                                    if (v82 >= *(void *)&v73) {
                                      v82 %= *(void *)&v73;
                                    }
                                    if (v82 != v77) {
                                      break;
                                    }
                                  }
                                  uint64_t v79 = (uint64_t *)*v79;
                                }
                                while (v79);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
LABEL_140:
                  if (!*((unsigned char *)v134 + 16)) {
                    goto LABEL_38;
                  }
                  uint64_t v85 = (char *)v134 + 4136;
                  int v86 = *(_DWORD *)v138;
                  if (sub_A10E20((void *)v134 + 517, *(_DWORD *)v138))
                  {
                    if (*(void *)(*(void *)v85 + 3944)) {
                      goto LABEL_38;
                    }
                  }
                  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                    && __cxa_guard_acquire(&qword_24F7308))
                  {
                    sub_518C8(0x3B60u, 0x7FCAu);
                    dword_24F7300 = v90 | 0x40000000;
                    __cxa_guard_release(&qword_24F7308);
                    a1 = v118;
                  }
                  int v87 = *(uint64_t **)v85;
                  if (dword_24F7300 == v86)
                  {
                    if (v87[497]) {
                      goto LABEL_38;
                    }
                  }
                  if (sub_2AB7E4(*v87)) {
                    goto LABEL_38;
                  }
LABEL_147:
                  unint64_t v88 = (unint64_t)v139;
                  uint64_t v26 = (char *)v138 + 12;
                  int v138 = v26;
                  if (v26 == v139)
                  {
                    BOOL v89 = v136 + 2;
                    unint64_t v136 = v89;
                    if ((unint64_t)v89 >= v137) {
                      goto LABEL_38;
                    }
                    while (1)
                    {
                      uint64_t v26 = *v89;
                      unint64_t v88 = (unint64_t)v89[1];
                      if (*v89 != (char *)v88) {
                        break;
                      }
                      v89 += 2;
                      unint64_t v136 = v89;
                      if ((unint64_t)v89 >= v137) {
                        goto LABEL_9;
                      }
                    }
                    int v138 = *v89;
                    v139 = (char *)v88;
                  }
                  if ((unint64_t)v26 >= v88) {
                    goto LABEL_38;
                  }
                }
              }
            }
            else if (v26 < v139)
            {
              goto LABEL_110;
            }
            goto LABEL_39;
          }
        }
        else
        {
          if (v51 >= *(void *)&v40) {
            v51 %= *(void *)&v40;
          }
          if (v51 != v46) {
            goto LABEL_64;
          }
        }
        uint64_t v48 = (uint64_t *)*v48;
        if (!v48) {
          goto LABEL_64;
        }
      }
    }
LABEL_9:
    ++v119;
    goto LABEL_10;
  }
LABEL_154:
  sub_72688((uint64_t)v133);
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v134);
    sub_188FC78(&v134, (uint64_t)"Computed ", 9);
    uint64_t v91 = (void *)std::ostream::operator<<();
    sub_188FC78(v91, (uint64_t)" trip sequences in ", 19);
    uint64_t v92 = (void *)std::ostream::operator<<();
    sub_188FC78(v92, (uint64_t)" ms (", 5);
    uint64_t v93 = (void *)std::ostream::operator<<();
    sub_188FC78(v93, (uint64_t)" new trips since previous snapshot)", 35);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v121, 1u);
    if (SHIBYTE(v122) < 0) {
      operator delete(v121[0]);
    }
    if (v141 < 0) {
      operator delete(v138);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unint64_t v134 = operator new(0x20uLL);
  long long v135 = xmmword_20B5EB0;
  strcpy((char *)v134, "TripSequenceLookup.Runtime");
  sub_C43E9C();
  if (SHIBYTE(v135) < 0) {
    operator delete(v134);
  }
  unint64_t v134 = operator new(0x28uLL);
  long long v135 = xmmword_20B9240;
  strcpy((char *)v134, "TripSequenceLookup.TripSequencesTotal");
  sub_C440FC();
  if (SHIBYTE(v135) < 0) {
    operator delete(v134);
  }
  unint64_t v134 = operator new(0x20uLL);
  long long v135 = xmmword_20B91A0;
  strcpy((char *)v134, "TripSequenceLookup.TripsNew");
  sub_C440FC();
  uint64_t v94 = a4;
  if (SHIBYTE(v135) < 0)
  {
    operator delete(v134);
    a4[2] = 0;
    uint64_t v95 = (uint64_t)(a4 + 2);
    *a4 = 0;
    a4[1] = 0;
    uint64_t v96 = v130;
    uint64_t v97 = (uint64_t)v131;
    int64_t v98 = v131 - (unsigned char *)v130;
    if (v131 == v130) {
      goto LABEL_170;
    }
  }
  else
  {
    a4[2] = 0;
    uint64_t v95 = (uint64_t)(a4 + 2);
    *a4 = 0;
    a4[1] = 0;
    uint64_t v96 = v130;
    uint64_t v97 = (uint64_t)v131;
    int64_t v98 = v131 - (unsigned char *)v130;
    if (v131 == v130) {
      goto LABEL_170;
    }
  }
  unint64_t v99 = 0xAAAAAAAAAAAAAAABLL * (v98 >> 3);
  if (v99 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  unsigned int v100 = (char *)operator new(v98);
  *a4 = v100;
  a4[1] = v100;
  uint64_t v101 = &v100[24 * v99];
  uint64_t v94 = a4;
  a4[2] = v101;
  a4[1] = sub_C44D60(v95, (uint64_t)v96, v97, (uint64_t)v100);
LABEL_170:
  sub_C44DF8((uint64_t)(v94 + 3), (uint64_t)__p);
  uint64_t v102 = (void *)v128;
  if ((void)v128)
  {
    do
    {
      int v108 = (void *)*v102;
      BOOL v109 = (void *)v102[4];
      if (v109)
      {
        v102[5] = v109;
        operator delete(v109);
      }
      operator delete(v102);
      uint64_t v102 = v108;
    }
    while (v108);
  }
  uint64_t v103 = __p[0];
  __p[0] = 0;
  if (v103) {
    operator delete(v103);
  }
  char v104 = (void **)v130;
  if (v130)
  {
    uint64_t v105 = (void **)v131;
    uint64_t v106 = v130;
    if (v131 != v130)
    {
      unint64_t v107 = (void **)v131;
      do
      {
        uint64_t v112 = (char *)*(v107 - 3);
        v107 -= 3;
        uint64_t v111 = v112;
        if (v112)
        {
          unint64_t v113 = (char *)*(v105 - 2);
          int v110 = v111;
          if (v113 != v111)
          {
            do
            {
              int64_t v114 = (void *)*((void *)v113 - 3);
              if (v114)
              {
                *((void *)v113 - 2) = v114;
                operator delete(v114);
              }
              uint64_t v115 = (void *)*((void *)v113 - 6);
              if (v115)
              {
                *((void *)v113 - 5) = v115;
                operator delete(v115);
              }
              unint64_t v116 = (void *)*((void *)v113 - 9);
              if (v116)
              {
                *((void *)v113 - 8) = v116;
                operator delete(v116);
              }
              v113 -= 128;
            }
            while (v113 != v111);
            int v110 = *v107;
          }
          *(v105 - 2) = v111;
          operator delete(v110);
        }
        uint64_t v105 = v107;
      }
      while (v107 != v104);
      uint64_t v106 = v130;
    }
    unint64_t v131 = (char *)v104;
    operator delete(v106);
  }
}

void sub_C3E440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void **a29,void **a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  __cxa_guard_abort(&qword_24F7308);
  uint64_t v41 = __p;
  if (__p)
  {
    do
    {
      unint64_t v43 = (void *)*v41;
      unint64_t v44 = (void *)v41[4];
      if (v44)
      {
        v41[5] = v44;
        operator delete(v44);
      }
      operator delete(v41);
      uint64_t v41 = v43;
    }
    while (v43);
  }
  if (a24)
  {
    operator delete(a24);
    unint64_t v42 = a29;
    if (!a29) {
LABEL_4:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    unint64_t v42 = a29;
    if (!a29) {
      goto LABEL_4;
    }
  }
  uint64_t v45 = (uint64_t)a30;
  unint64_t v46 = v42;
  if (a30 != v42)
  {
    uint64_t v47 = a30;
    do
    {
      uint64_t v50 = (char *)*(v47 - 3);
      v47 -= 3;
      uint64_t v49 = v50;
      if (v50)
      {
        unint64_t v51 = *(char **)(v45 - 16);
        uint64_t v48 = v49;
        if (v51 != v49)
        {
          do
          {
            uint64_t v52 = (void *)*((void *)v51 - 3);
            if (v52)
            {
              *((void *)v51 - 2) = v52;
              operator delete(v52);
            }
            unint64_t v53 = (void *)*((void *)v51 - 6);
            if (v53)
            {
              *((void *)v51 - 5) = v53;
              operator delete(v53);
            }
            uint64_t v54 = (void *)*((void *)v51 - 9);
            if (v54)
            {
              *((void *)v51 - 8) = v54;
              operator delete(v54);
            }
            v51 -= 128;
          }
          while (v51 != v49);
          uint64_t v48 = *v47;
        }
        *(void *)(v45 - 16) = v49;
        operator delete(v48);
      }
      uint64_t v45 = (uint64_t)v47;
    }
    while (v47 != v42);
    unint64_t v46 = a29;
  }
  operator delete(v46);
  _Unwind_Resume(a1);
}

void sub_C3E694(void *a1@<X0>, int8x8_t **a2@<X1>, void **a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = a3;
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v222);
    sub_188FC78(v222, (uint64_t)"Computing affected trip sequences in stop patterns from snapshot with ", 70);
    uint64_t v6 = (void *)std::ostream::operator<<();
    sub_188FC78(v6, (uint64_t)" trip updates", 13);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (SBYTE7(v219) < 0) {
      operator delete((void *)__p);
    }
    if (v228 < 0) {
      operator delete(v225);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    uint64_t v4 = a3;
  }
  sub_725D0((uint64_t)v221);
  long long __p = 0u;
  long long v219 = 0u;
  int v220 = 1065353216;
  long long v215 = 0u;
  long long v216 = 0u;
  int v217 = 1065353216;
  *(_OWORD *)v212 = 0u;
  *(_OWORD *)uint64_t v213 = 0u;
  int v214 = 1065353216;
  int8x8_t v7 = (uint64_t *)(*a2)[4];
  if (!v7)
  {
    uint64_t v207 = 0;
    int v208 = 0;
    v209 = 0;
    *(_OWORD *)int v204 = 0uLL;
    *(_OWORD *)v205 = 0uLL;
    int v206 = 1065353216;
    goto LABEL_249;
  }
  long long v196 = a2;
  uint64_t v197 = 0;
  long long v199 = a1 + 517;
  do
  {
    uint64_t v8 = *((unsigned int *)v7 + 10);
    if (v8)
    {
      uint64_t v9 = *((unsigned int *)v7 + 11);
      uint64_t v10 = v8 << 32;
      if (v9 == -1)
      {
        uint64_t v10 = 0;
        uint64_t v9 = 0xFFFFFFFFLL;
      }
      uint64_t v11 = v9 | v10;
      int v12 = *((_DWORD *)v7 + 12);
      long long v201 = (void *)v11;
      int v202 = v12;
      uint64_t v13 = *v4;
      if (!*v4) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v11 = 0xFFFFFFFFLL;
      int v14 = *((_DWORD *)v7 + 12);
      long long v201 = (void *)0xFFFFFFFFLL;
      int v202 = v14;
      uint64_t v13 = *v4;
      if (!*v4) {
        goto LABEL_23;
      }
    }
    if (sub_BAE0B0(v13, (uint64_t *)&v201))
    {
      uint64_t v15 = sub_BAE0B0(*v4, (uint64_t *)&v201);
      if (!v15) {
        sub_5AE8("unordered_map::at: key not found");
      }
      uint64_t v16 = (uint64_t *)v15[4];
      for (i = (uint64_t *)v15[5]; v16 != i; uint64_t v16 = (uint64_t *)((char *)v16 + 12))
        sub_C46310((uint64_t)&__p, v16, (uint64_t)v16);
      goto LABEL_10;
    }
    uint64_t v11 = (uint64_t)v201;
LABEL_23:
    uint64_t v18 = (int *)sub_369F8C(a1[523] + 24, __ROR8__(v11, 32), 0, "trip");
    uint64_t v19 = (unsigned __int16 *)((char *)v18 - *v18);
    if (*v19 >= 7u && (unsigned __int16 v20 = v19[3]) != 0) {
      unint64_t v21 = *(unsigned int *)((char *)v18 + v20 + 4) | ((unint64_t)*(unsigned int *)((char *)v18 + v20) << 32);
    }
    else {
      unint64_t v21 = 0xFFFFFFFFLL;
    }
    unint64_t v211 = v21;
    if (!sub_A1E760(&v215, (uint64_t *)&v211))
    {
      sub_B5AAE8((uint64_t)&v215, (uint64_t *)&v211, &v211);
      sub_C0B7B4((uint64_t)v222, a1, v211, 0, 1);
      long long v22 = v225;
      uint64_t v198 = v7;
      if ((unint64_t)v225 < v226)
      {
        while (1)
        {
          unint64_t v23 = __ROR8__(*v22, 32);
          unint64_t v210 = v23;
          if (v212[1])
          {
            unint64_t v24 = 0xC4CEB9FE1A85EC53
                * ((0xFF51AFD7ED558CCDLL * (v23 ^ (v23 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v23 ^ (v23 >> 33))) >> 33));
            unint64_t v25 = v24 ^ (v24 >> 33);
            uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v212[1]);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              unint64_t v27 = v25;
              if ((void *)v25 >= v212[1]) {
                unint64_t v27 = v25 % (unint64_t)v212[1];
              }
            }
            else
            {
              unint64_t v27 = v25 & ((unint64_t)v212[1] - 1);
            }
            unsigned int v28 = (uint64_t **)*((void *)v212[0] + v27);
            if (v28)
            {
              uint64_t v29 = *v28;
              if (v29)
              {
                if (v26.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    unint64_t v33 = v29[1];
                    if (v25 == v33)
                    {
                      if (*((_DWORD *)v29 + 5) == HIDWORD(v23) && *((_DWORD *)v29 + 4) == v23) {
                        goto LABEL_151;
                      }
                    }
                    else if ((v33 & ((unint64_t)v212[1] - 1)) != v27)
                    {
                      goto LABEL_55;
                    }
                    uint64_t v29 = (uint64_t *)*v29;
                    if (!v29) {
                      goto LABEL_55;
                    }
                  }
                }
                do
                {
                  unint64_t v31 = v29[1];
                  if (v25 == v31)
                  {
                    if (*((_DWORD *)v29 + 5) == HIDWORD(v23) && *((_DWORD *)v29 + 4) == v23) {
                      goto LABEL_151;
                    }
                  }
                  else
                  {
                    if ((void *)v31 >= v212[1]) {
                      v31 %= (unint64_t)v212[1];
                    }
                    if (v31 != v27) {
                      break;
                    }
                  }
                  uint64_t v29 = (uint64_t *)*v29;
                }
                while (v29);
              }
            }
          }
LABEL_55:
          sub_B5AAE8((uint64_t)v212, (uint64_t *)&v210, &v210);
          uint64_t v34 = v210;
          unint64_t v35 = HIDWORD(v210);
          if (sub_A10E20(v199, SHIDWORD(v210)))
          {
            uint64_t v36 = (int *)sub_A1120C(*(void *)(*v199 + 3944), v34);
          }
          else
          {
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_24F7308))
            {
              sub_518C8(0x3B60u, 0x7FCAu);
              dword_24F7300 = v113 | 0x40000000;
              __cxa_guard_release(&qword_24F7308);
            }
            uint64_t v37 = *v199;
            if (dword_24F7300 == v35)
            {
              uint64_t v38 = sub_A10AD4(*(void *)(v37 + 3976));
              uint64_t v39 = &v38[-*(int *)v38];
              if (*(unsigned __int16 *)v39 >= 5u && (uint64_t v40 = *((unsigned __int16 *)v39 + 2)) != 0) {
                uint64_t v41 = (unsigned int *)&v38[v40 + *(unsigned int *)&v38[v40]];
              }
              else {
                uint64_t v41 = 0;
              }
              uint64_t v36 = (int *)sub_A1139C(v41, v34);
            }
            else
            {
              uint64_t v36 = (int *)sub_A11500(v37 + 24, v34, 0, "stop pattern");
            }
          }
          int8x8_t v7 = v198;
          unint64_t v42 = a1 + 517;
          unint64_t v43 = (unsigned __int16 *)((char *)v36 - *v36);
          if (*v43 >= 7u)
          {
            uint64_t v44 = v43[3];
            if (v44)
            {
              int v45 = *(int *)((char *)v36 + v44 + *(unsigned int *)((char *)v36 + v44));
              if (v45)
              {
                int v46 = 0;
                int v195 = *(int *)((char *)v36 + v44 + *(unsigned int *)((char *)v36 + v44));
                while (1)
                {
                  unint64_t v47 = v210;
                  unint64_t v48 = HIDWORD(v210);
                  if (sub_A10E20(v42, SHIDWORD(v210))) {
                    break;
                  }
                  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                    && __cxa_guard_acquire(&qword_24F7308))
                  {
                    sub_518C8(0x3B60u, 0x7FCAu);
                    dword_24F7300 = v98 | 0x40000000;
                    __cxa_guard_release(&qword_24F7308);
                    int8x8_t v7 = v198;
                    unint64_t v42 = a1 + 517;
                  }
                  uint64_t v50 = *v42;
                  if (dword_24F7300 == v48)
                  {
                    uint64_t v49 = *(unsigned int **)(*(void *)(v50 + 3976) + 72);
                    if (!v49)
                    {
                      exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
                      sub_5E5C(v204, "Realtime stop pattern quad data requested on nullptr buffer");
                      uint64_t v192 = (void *)sub_2F404((uint64_t)exception, (long long *)v204);
                    }
LABEL_76:
                    unint64_t v51 = (char *)v49 + *v49;
                    uint64_t v52 = &v51[-*(int *)v51];
                    if (*(unsigned __int16 *)v52 < 5u) {
                      goto LABEL_80;
                    }
                    goto LABEL_77;
                  }
                  unint64_t v51 = sub_A10B80(v50 + 24, v47, 0);
                  uint64_t v52 = &v51[-*(int *)v51];
                  if (*(unsigned __int16 *)v52 < 5u)
                  {
LABEL_80:
                    uint64_t v53 = 0;
                    goto LABEL_81;
                  }
LABEL_77:
                  uint64_t v53 = *((unsigned __int16 *)v52 + 2);
                  if (v53) {
                    v53 += (uint64_t)&v51[*(unsigned int *)&v51[v53]];
                  }
LABEL_81:
                  uint64_t v54 = (int *)(v53 + 4 * v47 + 4 + *(unsigned int *)(v53 + 4 * v47 + 4));
                  int v208 = 0;
                  v209 = 0;
                  uint64_t v207 = 0;
                  unint64_t v55 = (unsigned __int16 *)((char *)v54 - *v54);
                  if (*v55 < 0x11u)
                  {
                    LODWORD(v56) = 0;
                  }
                  else
                  {
                    uint64_t v56 = v55[8];
                    if (v55[8])
                    {
                      int v57 = *(int *)((char *)v54 + v56);
                      int v58 = *(int *)((char *)v54 + v55[2] + *(unsigned int *)((char *)v54 + v55[2]));
                      unsigned int v59 = v57 + v58 * v46;
                      int v60 = v46 + 1;
                      unsigned int v61 = v57 + v58 * (v46 + 1);
                      if (v59 <= v61) {
                        int v62 = v61;
                      }
                      else {
                        int v62 = v59;
                      }
                      if (v59 >= v61) {
                        goto LABEL_69;
                      }
LABEL_96:
                      while (1)
                      {
                        uint64_t v66 = &v51[-*(int *)v51];
                        if (*(unsigned __int16 *)v66 >= 0xBu && (uint64_t v67 = *((unsigned __int16 *)v66 + 5)) != 0) {
                          uint64_t v68 = (unsigned int *)&v51[v67 + *(unsigned int *)&v51[v67]];
                        }
                        else {
                          uint64_t v68 = 0;
                        }
                        uint64_t v69 = sub_A108C4(v68, v59);
                        uint64_t v70 = v69;
                        unint64_t v71 = v208;
                        if (v208 >= v209) {
                          break;
                        }
                        *(void *)int v208 = 0xFFFFFFFFLL;
                        *((_DWORD *)v71 + 2) = 0;
                        if (v69)
                        {
                          *(void *)unint64_t v71 = __ROR8__(*(void *)v69, 32);
                          *((_DWORD *)v71 + 2) = *(_DWORD *)(v69 + 8);
                        }
                        uint64_t v65 = v71 + 12;
LABEL_95:
                        int v208 = v65;
                        if (++v59 == v62)
                        {
                          unint64_t v82 = v207;
                          if (v207 != v65)
                          {
                            int8x8_t v83 = (*v196)[3];
                            uint8x8_t v84 = (uint8x8_t)vcnt_s8(v83);
                            v84.i16[0] = vaddlv_u8(v84);
                            uint64_t v85 = *(void *)&v83 - 1;
                            int v86 = (char *)v207;
                            do
                            {
                              if (v83)
                              {
                                uint64_t v88 = *(unsigned int *)v86;
                                uint64_t v87 = *((unsigned int *)v86 + 1);
                                uint64_t v89 = *((unsigned int *)v86 + 2);
                                unint64_t v90 = __ROR8__(v87 | (v88 << 32), 32);
                                unint64_t v91 = 0xC4CEB9FE1A85EC53
                                    * ((0xFF51AFD7ED558CCDLL * (v90 ^ (v90 >> 33))) ^ ((0xFF51AFD7ED558CCDLL
                                                                                      * (v90 ^ (v90 >> 33))) >> 33));
                                unint64_t v92 = (v89
                                     + 2654435769
                                     + ((((v91 ^ (v91 >> 33)) + 0x388152A534) ^ 0xDEADBEEF) << 6)
                                     + ((((v91 ^ (v91 >> 33)) + 0x388152A534) ^ 0xDEADBEEF) >> 2)) ^ ((v91 ^ (v91 >> 33)) + 0x388152A534) ^ 0xDEADBEEF;
                                if (v84.u32[0] > 1uLL)
                                {
                                  unint64_t v93 = v92;
                                  if (v92 >= *(void *)&v83) {
                                    unint64_t v93 = v92 % *(void *)&v83;
                                  }
                                }
                                else
                                {
                                  unint64_t v93 = v92 & v85;
                                }
                                uint64_t v94 = *(uint64_t ***)(*(void *)&(*v196)[2] + 8 * v93);
                                if (v94)
                                {
                                  uint64_t v95 = *v94;
                                  if (v95)
                                  {
                                    if (v84.u32[0] < 2uLL)
                                    {
                                      while (1)
                                      {
                                        uint64_t v96 = v95[1];
                                        if (v92 == v96)
                                        {
                                          if (*((_DWORD *)v95 + 4) == v87
                                            && *(uint64_t *)((char *)v95 + 20) == __PAIR64__(v89, v88))
                                          {
                                            goto LABEL_146;
                                          }
                                        }
                                        else if ((v96 & v85) != v93)
                                        {
                                          goto LABEL_122;
                                        }
                                        uint64_t v95 = (uint64_t *)*v95;
                                        if (!v95) {
                                          goto LABEL_122;
                                        }
                                      }
                                    }
                                    do
                                    {
                                      unint64_t v97 = v95[1];
                                      if (v92 == v97)
                                      {
                                        if (*((_DWORD *)v95 + 4) == v87
                                          && *(uint64_t *)((char *)v95 + 20) == __PAIR64__(v89, v88))
                                        {
LABEL_146:
                                          v204[0] = (void *)v210;
                                          LODWORD(v204[1]) = v46;
                                          sub_C466CC((uint64_t)&__p, (uint64_t *)v204, (uint64_t)v204);
                                          goto LABEL_147;
                                        }
                                      }
                                      else
                                      {
                                        if (v97 >= *(void *)&v83) {
                                          v97 %= *(void *)&v83;
                                        }
                                        if (v97 != v93) {
                                          break;
                                        }
                                      }
                                      uint64_t v95 = (uint64_t *)*v95;
                                    }
                                    while (v95);
                                  }
                                }
                              }
LABEL_122:
                              v86 += 12;
                            }
                            while (v86 != v65);
                          }
LABEL_147:
                          int8x8_t v7 = v198;
                          unint64_t v42 = a1 + 517;
                          int v45 = v195;
                          if (v82) {
                            operator delete(v82);
                          }
                          goto LABEL_69;
                        }
                      }
                      int v72 = (char *)v207;
                      unint64_t v73 = 0xAAAAAAAAAAAAAAABLL * ((v208 - (unsigned char *)v207) >> 2);
                      unint64_t v74 = v73 + 1;
                      if (v73 + 1 > 0x1555555555555555) {
                        sub_2E00();
                      }
                      if (0x5555555555555556 * ((v209 - (unsigned char *)v207) >> 2) > v74) {
                        unint64_t v74 = 0x5555555555555556 * ((v209 - (unsigned char *)v207) >> 2);
                      }
                      if (0xAAAAAAAAAAAAAAABLL * ((v209 - (unsigned char *)v207) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                        unint64_t v75 = 0x1555555555555555;
                      }
                      else {
                        unint64_t v75 = v74;
                      }
                      if (v75)
                      {
                        if (v75 > 0x1555555555555555) {
                          sub_188D718();
                        }
                        uint8x8_t v76 = (char *)operator new(12 * v75);
                        uint64_t v77 = (uint64_t)&v76[12 * v73];
                        *(void *)uint64_t v77 = 0xFFFFFFFFLL;
                        *(_DWORD *)(v77 + 8) = 0;
                        unint64_t v78 = (_DWORD *)(v77 + 8);
                        if (v70)
                        {
LABEL_112:
                          *(void *)uint64_t v77 = __ROR8__(*(void *)v70, 32);
                          *unint64_t v78 = *(_DWORD *)(v70 + 8);
                        }
                      }
                      else
                      {
                        uint8x8_t v76 = 0;
                        uint64_t v77 = 4 * ((v208 - (unsigned char *)v207) >> 2);
                        *(void *)uint64_t v77 = 0xFFFFFFFFLL;
                        dword_8[3 * v73] = 0;
                        unint64_t v78 = (_DWORD *)(12 * v73 + 8);
                        if (v70) {
                          goto LABEL_112;
                        }
                      }
                      uint64_t v79 = (_DWORD *)v77;
                      if (v71 != v72)
                      {
                        do
                        {
                          uint64_t v80 = *(void *)(v71 - 12);
                          v71 -= 12;
                          int v81 = *((_DWORD *)v71 + 2);
                          *(void *)(v79 - 3) = v80;
                          v79 -= 3;
                          v79[2] = v81;
                        }
                        while (v71 != v72);
                        unint64_t v71 = (char *)v207;
                      }
                      uint64_t v65 = (char *)(v77 + 12);
                      uint64_t v207 = v79;
                      v209 = &v76[12 * v75];
                      if (v71) {
                        operator delete(v71);
                      }
                      goto LABEL_95;
                    }
                  }
                  int v63 = *(int *)((char *)v54 + v55[2] + *(unsigned int *)((char *)v54 + v55[2]));
                  unsigned int v59 = v63 * v46;
                  int v60 = v46 + 1;
                  unsigned int v64 = v56 + v63 * (v46 + 1);
                  if (v63 * v46 <= v64) {
                    int v62 = v64;
                  }
                  else {
                    int v62 = v63 * v46;
                  }
                  if (v59 < v64) {
                    goto LABEL_96;
                  }
LABEL_69:
                  int v46 = v60;
                  if (v60 == v45) {
                    goto LABEL_151;
                  }
                }
                uint64_t v49 = *(unsigned int **)(*(void *)(*v42 + 3944) + 72);
                if (!v49)
                {
                  uint64_t v189 = __cxa_allocate_exception(0x40uLL);
                  sub_5E5C(v204, "Incident stop pattern quad data requested on nullptr buffer");
                  int v190 = (void *)sub_2F404((uint64_t)v189, (long long *)v204);
                }
                goto LABEL_76;
              }
            }
          }
LABEL_151:
          unint64_t v99 = v226;
          long long v22 = (char *)v225 + 12;
          unint64_t v225 = v22;
          if (v22 == (void *)v226)
          {
            unint64_t v100 = v223 + 16;
            unint64_t v223 = v100;
            a2 = v196;
            uint64_t v4 = a3;
            if (v100 >= v224) {
              break;
            }
            while (1)
            {
              long long v22 = *(void **)v100;
              unint64_t v99 = *(void *)(v100 + 8);
              if (*(void *)v100 != v99) {
                break;
              }
              v100 += 16;
              unint64_t v223 = v100;
              if (v100 >= v224) {
                goto LABEL_9;
              }
            }
            unint64_t v225 = *(void **)v100;
            unint64_t v226 = v99;
            if ((unint64_t)v22 >= v99) {
              goto LABEL_181;
            }
LABEL_160:
            do
            {
              if (v227
                || (uint64_t v101 = (char *)v222[0], v102 = *v22, v103 = *((void *)v222[0] + 517), !sub_C259C0(v103 + 3896))
                || !*(void *)(v103 + 3944)
                || (v104 = v101 + 4136, uint64_t v105 = (void *)__ROR8__(v102, 32), sub_A10E20(v104, SHIDWORD(v105)))
                || (uint64_t v106 = *(void **)(*v104 + 3944), v204[0] = v105, !sub_A1E760(v106, (uint64_t *)v204)))
              {
                if (!*((unsigned char *)v222[0] + 16)) {
                  break;
                }
                unint64_t v107 = (char *)v222[0] + 4136;
                int v108 = *(_DWORD *)v225;
                if (sub_A10E20((void *)v222[0] + 517, *(_DWORD *)v225))
                {
                  if (*(void *)(*(void *)v107 + 3944)) {
                    break;
                  }
                }
                if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                  && __cxa_guard_acquire(&qword_24F7308))
                {
                  sub_518C8(0x3B60u, 0x7FCAu);
                  dword_24F7300 = v112 | 0x40000000;
                  __cxa_guard_release(&qword_24F7308);
                  a2 = v196;
                }
                BOOL v109 = *(uint64_t **)v107;
                if (dword_24F7300 == v108)
                {
                  if (v109[497]) {
                    break;
                  }
                }
                if (sub_2AB7E4(*v109)) {
                  break;
                }
              }
              unint64_t v110 = v226;
              long long v22 = (char *)v225 + 12;
              unint64_t v225 = v22;
              if (v22 == (void *)v226)
              {
                unint64_t v111 = v223 + 16;
                unint64_t v223 = v111;
                if (v111 >= v224) {
                  break;
                }
                uint64_t v4 = a3;
                int8x8_t v7 = v198;
                while (1)
                {
                  long long v22 = *(void **)v111;
                  unint64_t v110 = *(void *)(v111 + 8);
                  if (*(void *)v111 != v110) {
                    break;
                  }
                  v111 += 16;
                  unint64_t v223 = v111;
                  if (v111 >= v224) {
                    goto LABEL_9;
                  }
                }
                unint64_t v225 = *(void **)v111;
                unint64_t v226 = v110;
              }
            }
            while ((unint64_t)v22 < v110);
            long long v22 = v225;
            uint64_t v4 = a3;
            int8x8_t v7 = v198;
            if ((unint64_t)v225 >= v226) {
              break;
            }
          }
          else
          {
            a2 = v196;
            if ((unint64_t)v22 < v226) {
              goto LABEL_160;
            }
LABEL_181:
            uint64_t v4 = a3;
            if ((unint64_t)v22 >= v99) {
              break;
            }
          }
        }
      }
    }
LABEL_9:
    ++v197;
LABEL_10:
    int8x8_t v7 = (uint64_t *)*v7;
  }
  while (v7);
  int64_t v114 = (uint64_t *)v219;
  uint64_t v207 = 0;
  int v208 = 0;
  v209 = 0;
  *(_OWORD *)int v204 = 0u;
  *(_OWORD *)v205 = 0u;
  int v206 = 1065353216;
  if ((void)v219)
  {
    while (1)
    {
      uint64_t v115 = v114 + 2;
      sub_C4348C((uint64_t)a1, (uint64_t)(v114 + 2), v222);
      unint64_t v116 = v208;
      if (v208 >= v209)
      {
        unint64_t v117 = sub_C45D78((void ***)&v207, (uint64_t)v222);
        v118 = (char *)v222[0];
        int v208 = v117;
        if (v222[0])
        {
          uint64_t v119 = (char *)v222[1];
          uint64_t v120 = v222[0];
          if (v222[1] != v222[0])
          {
            do
            {
              unint64_t v121 = (void *)*((void *)v119 - 3);
              if (v121)
              {
                *((void *)v119 - 2) = v121;
                operator delete(v121);
              }
              uint64_t v122 = (void *)*((void *)v119 - 6);
              if (v122)
              {
                *((void *)v119 - 5) = v122;
                operator delete(v122);
              }
              uint64_t v123 = (void *)*((void *)v119 - 9);
              if (v123)
              {
                *((void *)v119 - 8) = v123;
                operator delete(v123);
              }
              v119 -= 128;
            }
            while (v119 != v118);
            uint64_t v120 = v222[0];
          }
          v222[1] = v118;
          operator delete(v120);
          unint64_t v117 = v208;
        }
      }
      else
      {
        *(void *)int v208 = 0;
        *((void *)v116 + 1) = 0;
        *((void *)v116 + 2) = 0;
        *(_OWORD *)unint64_t v116 = *(_OWORD *)v222;
        *((void **)v116 + 2) = v222[2];
        unint64_t v117 = v116 + 24;
        int v208 = v116 + 24;
      }
      uint64_t v124 = *((void *)v117 - 3);
      uint64_t v125 = *((void *)v117 - 2);
      if (v124 != v125) {
        break;
      }
LABEL_189:
      int64_t v114 = (uint64_t *)*v114;
      if (!v114) {
        goto LABEL_249;
      }
    }
LABEL_207:
    while (1)
    {
      int8x8_t v126 = (*a2)[3];
      if (v126)
      {
        uint64_t v127 = *(unsigned int *)(v124 + 8);
        unint64_t v128 = 0xFF51AFD7ED558CCDLL * (*(void *)v124 ^ (*(void *)v124 >> 33));
        unint64_t v129 = (((0xC4CEB9FE1A85EC53 * (v128 ^ (v128 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v128 ^ (v128 >> 33))) >> 33))
              + 0x388152A534) ^ 0xDEADBEEF;
        unint64_t v130 = (v127 + 2654435769 + (v129 << 6) + (v129 >> 2)) ^ v129;
        uint8x8_t v131 = (uint8x8_t)vcnt_s8(v126);
        v131.i16[0] = vaddlv_u8(v131);
        if (v131.u32[0] > 1uLL)
        {
          unint64_t v132 = v130;
          if (v130 >= *(void *)&v126) {
            unint64_t v132 = v130 % *(void *)&v126;
          }
        }
        else
        {
          unint64_t v132 = v130 & (*(void *)&v126 - 1);
        }
        unint64_t v133 = *(uint64_t ***)(*(void *)&(*a2)[2] + 8 * v132);
        if (v133)
        {
          unint64_t v134 = *v133;
          if (v134) {
            break;
          }
        }
      }
LABEL_206:
      v124 += 128;
      if (v124 == v125) {
        goto LABEL_189;
      }
    }
    uint64_t v135 = __ROR8__(*(void *)v124, 32);
    if (v131.u32[0] < 2uLL)
    {
      uint64_t v136 = *(void *)&v126 - 1;
      while (1)
      {
        uint64_t v138 = v134[1];
        if (v130 == v138)
        {
          if (*((_DWORD *)v134 + 4) == v135
            && *(uint64_t *)((char *)v134 + 20) == __PAIR64__(v127, HIDWORD(v135)))
          {
            goto LABEL_229;
          }
        }
        else if ((v138 & v136) != v132)
        {
          goto LABEL_206;
        }
        unint64_t v134 = (uint64_t *)*v134;
        if (!v134) {
          goto LABEL_206;
        }
      }
    }
    while (1)
    {
      unint64_t v137 = v134[1];
      if (v130 == v137)
      {
        if (*((_DWORD *)v134 + 4) == v135 && *(uint64_t *)((char *)v134 + 20) == __PAIR64__(v127, HIDWORD(v135)))
        {
LABEL_229:
          v222[0] = *(void **)v124;
          LODWORD(v222[1]) = v127;
          long long v201 = v222;
          v139 = sub_C45F40((uint64_t)v204, (uint64_t *)v222, (uint64_t)&unk_20F06E0, (uint64_t **)&v201);
          char v140 = v139;
          uint64_t v142 = (_DWORD *)v139[5];
          unint64_t v141 = v139[6];
          if ((unint64_t)v142 >= v141)
          {
            unsigned int v145 = (_DWORD **)(v139 + 4);
            uint64_t v146 = (_DWORD *)v139[4];
            unint64_t v147 = 0xAAAAAAAAAAAAAAABLL * (v142 - v146) + 1;
            if (v147 > 0x1555555555555555) {
              sub_2E00();
            }
            unint64_t v148 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v141 - (void)v146) >> 2);
            if (2 * v148 > v147) {
              unint64_t v147 = 2 * v148;
            }
            if (v148 >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v149 = 0x1555555555555555;
            }
            else {
              unint64_t v149 = v147;
            }
            if (v149)
            {
              if (v149 > 0x1555555555555555) {
                sub_188D718();
              }
              uint64_t v150 = (char *)operator new(12 * v149);
            }
            else
            {
              uint64_t v150 = 0;
            }
            uint64_t v151 = *v115;
            int v152 = &v150[4 * (v142 - v146)];
            *((_DWORD *)v152 + 2) = *((_DWORD *)v114 + 6);
            *(void *)int v152 = v151;
            uint64_t v153 = v152;
            if (v142 != v146)
            {
              do
              {
                uint64_t v154 = *(void *)(v142 - 3);
                v142 -= 3;
                int v155 = v142[2];
                *(void *)(v153 - 12) = v154;
                v153 -= 12;
                *((_DWORD *)v153 + 2) = v155;
              }
              while (v142 != v146);
              uint64_t v142 = *v145;
            }
            uint8x8_t v144 = v152 + 12;
            v140[4] = v153;
            v140[5] = v152 + 12;
            v140[6] = &v150[12 * v149];
            a2 = v196;
            if (v142) {
              operator delete(v142);
            }
          }
          else
          {
            uint64_t v143 = *v115;
            v142[2] = *((_DWORD *)v114 + 6);
            *(void *)uint64_t v142 = v143;
            uint8x8_t v144 = v142 + 3;
            a2 = v196;
          }
          v140[5] = v144;
          v124 += 128;
          if (v124 == v125) {
            goto LABEL_189;
          }
          goto LABEL_207;
        }
      }
      else
      {
        if (v137 >= *(void *)&v126) {
          v137 %= *(void *)&v126;
        }
        if (v137 != v132) {
          goto LABEL_206;
        }
      }
      unint64_t v134 = (uint64_t *)*v134;
      if (!v134) {
        goto LABEL_206;
      }
    }
  }
LABEL_249:
  sub_72688((uint64_t)v221);
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v222);
    sub_188FC78(v222, (uint64_t)"Computed ", 9);
    unsigned __int16 v156 = (void *)std::ostream::operator<<();
    sub_188FC78(v156, (uint64_t)" trip sequences in ", 19);
    uint64_t v157 = (void *)std::ostream::operator<<();
    sub_188FC78(v157, (uint64_t)" ms (", 5);
    uint64_t v158 = (void *)std::ostream::operator<<();
    sub_188FC78(v158, (uint64_t)" new trips since previous snapshot)", 35);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v201, 1u);
    if (v203 < 0) {
      operator delete(v201);
    }
    if (v228 < 0) {
      operator delete(v225);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  v222[0] = operator new(0x20uLL);
  *(_OWORD *)&v222[1] = xmmword_20B5EB0;
  strcpy((char *)v222[0], "TripSequenceLookup.Runtime");
  sub_C43E9C();
  if (SHIBYTE(v222[2]) < 0) {
    operator delete(v222[0]);
  }
  v222[0] = operator new(0x28uLL);
  *(_OWORD *)&v222[1] = xmmword_20B9240;
  strcpy((char *)v222[0], "TripSequenceLookup.TripSequencesTotal");
  sub_C440FC();
  if (SHIBYTE(v222[2]) < 0) {
    operator delete(v222[0]);
  }
  v222[0] = operator new(0x20uLL);
  *(_OWORD *)&v222[1] = xmmword_20B91A0;
  strcpy((char *)v222[0], "TripSequenceLookup.TripsNew");
  sub_C440FC();
  if (SHIBYTE(v222[2]) < 0) {
    operator delete(v222[0]);
  }
  uint64_t v159 = a4;
  a4[2] = 0;
  *a4 = 0;
  a4[1] = 0;
  uint64_t v160 = v207;
  uint64_t v161 = (uint64_t)v208;
  int64_t v162 = v208 - (unsigned char *)v207;
  if (v208 != v207)
  {
    unint64_t v163 = 0xAAAAAAAAAAAAAAABLL * (v162 >> 3);
    if (v163 > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    uint64_t v164 = (char *)operator new(v162);
    *a4 = v164;
    a4[1] = v164;
    a4[2] = &v164[24 * v163];
    a4[1] = sub_C44D60((uint64_t)(a4 + 2), (uint64_t)v160, v161, (uint64_t)v164);
    uint64_t v159 = a4;
  }
  sub_C44DF8((uint64_t)(v159 + 3), (uint64_t)v204);
  v165 = v205[0];
  if (v205[0])
  {
    do
    {
      uint64_t v171 = (void *)*v165;
      v172 = (void *)v165[4];
      if (v172)
      {
        v165[5] = v172;
        operator delete(v172);
      }
      operator delete(v165);
      v165 = v171;
    }
    while (v171);
  }
  uint64_t v166 = v204[0];
  v204[0] = 0;
  if (v166) {
    operator delete(v166);
  }
  uint64_t v167 = (void **)v207;
  if (v207)
  {
    int v168 = (void **)v208;
    int v169 = v207;
    if (v208 != v207)
    {
      char v170 = (void **)v208;
      do
      {
        int v175 = (char *)*(v170 - 3);
        v170 -= 3;
        uint64_t v174 = v175;
        if (v175)
        {
          uint64_t v176 = (char *)*(v168 - 2);
          uint64_t v173 = v174;
          if (v176 != v174)
          {
            do
            {
              uint64_t v177 = (void *)*((void *)v176 - 3);
              if (v177)
              {
                *((void *)v176 - 2) = v177;
                operator delete(v177);
              }
              unsigned int v178 = (void *)*((void *)v176 - 6);
              if (v178)
              {
                *((void *)v176 - 5) = v178;
                operator delete(v178);
              }
              uint64_t v179 = (void *)*((void *)v176 - 9);
              if (v179)
              {
                *((void *)v176 - 8) = v179;
                operator delete(v179);
              }
              v176 -= 128;
            }
            while (v176 != v174);
            uint64_t v173 = *v170;
          }
          *(v168 - 2) = v174;
          operator delete(v173);
        }
        int v168 = v170;
      }
      while (v170 != v167);
      int v169 = v207;
    }
    int v208 = (char *)v167;
    operator delete(v169);
  }
  uint64_t v180 = v213[0];
  if (v213[0])
  {
    do
    {
      uint64_t v181 = (void *)*v180;
      operator delete(v180);
      uint64_t v180 = v181;
    }
    while (v181);
  }
  long long v182 = v212[0];
  v212[0] = 0;
  if (v182) {
    operator delete(v182);
  }
  long long v183 = (void *)v216;
  if ((void)v216)
  {
    do
    {
      uint64_t v184 = (void *)*v183;
      operator delete(v183);
      long long v183 = v184;
    }
    while (v184);
  }
  int v185 = (void *)v215;
  *(void *)&long long v215 = 0;
  if (v185) {
    operator delete(v185);
  }
  unint64_t v186 = (void *)v219;
  if ((void)v219)
  {
    do
    {
      unint64_t v187 = (void *)*v186;
      operator delete(v186);
      unint64_t v186 = v187;
    }
    while (v187);
  }
  uint64_t v188 = (void *)__p;
  *(void *)&long long __p = 0;
  if (v188) {
    operator delete(v188);
  }
}

void sub_C3FCC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43)
{
}

void sub_C3FEC8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_725D0((uint64_t)v63);
  long long v60 = 0u;
  long long v61 = 0u;
  int v62 = 1065353216;
  uint64_t v6 = *(void **)(a2 + 16);
  if (v6)
  {
    do
    {
      uint64_t v7 = v6[4];
      uint64_t v8 = (_DWORD *)v6[5];
      if ((_DWORD *)v7 != v8)
      {
        uint64_t v9 = (uint64_t *)(v7 + 8);
        do
        {
          uint64_t v54 = v9 - 1;
          uint64_t v11 = sub_C46A88((uint64_t)&v60, v9 - 1, (uint64_t)&unk_20F06E0, (void **)&v54);
          unsigned int v12 = *((_DWORD *)v11 + 6);
          uint64_t v13 = v9;
          if (v12 != -1)
          {
            if (v12 >= *(_DWORD *)v9) {
              int v14 = v9;
            }
            else {
              int v14 = v11 + 3;
            }
            if (*(_DWORD *)v9 == -1) {
              uint64_t v13 = v11 + 3;
            }
            else {
              uint64_t v13 = v14;
            }
          }
          unsigned int v17 = *((_DWORD *)v11 + 7);
          uint64_t v15 = (uint64_t *)((char *)v11 + 28);
          unsigned int v16 = v17;
          *((_DWORD *)v15 - 1) = *(_DWORD *)v13;
          uint64_t v18 = v9;
          if (v17 != -1)
          {
            uint64_t v18 = v15;
            if (*(_DWORD *)v9 != -1)
            {
              if (v16 >= *(_DWORD *)v9) {
                uint64_t v18 = v15;
              }
              else {
                uint64_t v18 = v9;
              }
            }
          }
          *(_DWORD *)uint64_t v15 = *(_DWORD *)v18;
          uint64_t v10 = (_DWORD *)v9 + 1;
          uint64_t v9 = (uint64_t *)((char *)v9 + 12);
        }
        while (v10 != v8);
      }
      uint64_t v6 = (void *)*v6;
    }
    while (v6);
    uint64_t v19 = (uint64_t *)v61;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    for (*(_DWORD *)(a3 + 32) = 1065353216; v19; uint64_t v19 = (uint64_t *)*v19)
    {
      int v20 = *((_DWORD *)v19 + 6);
      int v21 = *((_DWORD *)v19 + 7);
      __p[0] = 0;
      __p[1] = 0;
      int v57 = 0;
      uint64_t v56 = 0;
      LODWORD(v54) = v20;
      int v22 = v21 - v20;
      size_t v23 = (v22 + 1);
      if (v22 != -1)
      {
        unint64_t v24 = (char *)operator new((v22 + 1));
        bzero(v24, v23);
        __p[0] = v24;
        __p[1] = &v24[v23];
        uint64_t v56 = &v24[v23];
      }
      sub_C46DF8(a3, v19 + 2, v19 + 2, (uint64_t)&v54);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    *(_OWORD *)a3 = 0uLL;
    *(_OWORD *)(a3 + 16) = 0uLL;
    *(_DWORD *)(a3 + 32) = 1065353216;
  }
  unint64_t v25 = *(uint64_t **)(a2 + 16);
  if (v25)
  {
    while (1)
    {
      uint8x8_t v26 = (_DWORD *)v25[4];
      unint64_t v27 = (_DWORD *)v25[5];
      if (v26 != v27) {
        break;
      }
LABEL_29:
      unint64_t v25 = (uint64_t *)*v25;
      if (!v25) {
        goto LABEL_46;
      }
    }
    int v51 = *((_DWORD *)v25 + 6);
    unint64_t v50 = *((unsigned int *)v25 + 5) | ((unint64_t)*((unsigned int *)v25 + 4) << 32);
    while (1)
    {
      uint64_t v54 = v26;
      uint64_t v35 = a3;
      uint64_t v36 = sub_C47190(a3, (uint64_t *)v26, (uint64_t)&unk_20F06E0, (void **)&v54);
      int v37 = v26[2];
      uint64_t v38 = *(void *)(a1 + 4184);
      if (sub_C259D4(v38 + 3896))
      {
        uint64_t v28 = *(void *)(v38 + 3960);
        if (!v28) {
          goto LABEL_33;
        }
        uint64_t v39 = sub_367060(*(void *)(*(void *)(a1 + 4184) + 3960), v50, v51, 1);
        if (v39)
        {
          LODWORD(v28) = *((unsigned char *)v39 + 33) != 0;
          goto LABEL_33;
        }
      }
      LODWORD(v28) = 0;
LABEL_33:
      uint64_t v29 = (v37 - *((_DWORD *)v36 + 6));
      uint64_t v30 = *((void *)v36 + 4);
      char v31 = *(unsigned char *)(v30 + v29);
      if ((v31 & 3) == 1) {
        char v32 = 1;
      }
      else {
        char v32 = 2;
      }
      if (v28) {
        char v33 = v32;
      }
      else {
        char v33 = 0;
      }
      *(unsigned char *)(v30 + v29) = v31 & 0xFC | v33 | 1;
      int v34 = *((_DWORD *)v36 + 14);
      if ((v31 & 1) == 0) {
        ++v34;
      }
      *((_DWORD *)v36 + 14) = v34;
      v26 += 3;
      a3 = v35;
      if (v26 == v27) {
        goto LABEL_29;
      }
    }
  }
LABEL_46:
  uint64_t v40 = *(uint64_t ***)(a3 + 16);
  if (v40)
  {
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    do
    {
      v42 += *((unsigned int *)v40 + 14);
      uint64_t v41 = (char *)v40[5] + v41 - (char *)v40[4];
      uint64_t v40 = (uint64_t **)*v40;
    }
    while (v40);
  }
  sub_72688((uint64_t)v63);
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v54);
    sub_188FC78(&v54, (uint64_t)"Blocked ", 8);
    unint64_t v43 = (void *)std::ostream::operator<<();
    sub_188FC78(v43, (uint64_t)" trip sequences in ", 19);
    uint64_t v44 = (void *)std::ostream::operator<<();
    sub_188FC78(v44, (uint64_t)" stop patterns in ", 18);
    int v45 = (void *)std::ostream::operator<<();
    sub_188FC78(v45, (uint64_t)" ms (load: ", 11);
    int v46 = (void *)std::ostream::operator<<();
    sub_188FC78(v46, (uint64_t)" %)", 3);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v52, 1u);
    if (v53 < 0) {
      operator delete(v52);
    }
    if (v59 < 0) {
      operator delete(v58);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  uint64_t v54 = operator new(0x20uLL);
  *(_OWORD *)long long __p = xmmword_20B91B0;
  strcpy((char *)v54, "TripSequenceBlocking.Runtime");
  sub_C43E9C();
  if (SHIBYTE(__p[1]) < 0) {
    operator delete(v54);
  }
  uint64_t v54 = operator new(0x28uLL);
  *(_OWORD *)long long __p = xmmword_20B9280;
  strcpy((char *)v54, "TripSequenceBlocking.TripSequences");
  sub_C440FC();
  if (SHIBYTE(__p[1]) < 0) {
    operator delete(v54);
  }
  uint64_t v54 = operator new(0x20uLL);
  *(_OWORD *)long long __p = xmmword_20B8E90;
  strcpy((char *)v54, "TripSequenceBlocking.LoadFactor");
  sub_C440FC();
  if (SHIBYTE(__p[1]) < 0) {
    operator delete(v54);
  }
  uint64_t v54 = operator new(0x28uLL);
  *(_OWORD *)long long __p = xmmword_20B9260;
  strcpy((char *)v54, "TripSequenceBlocking.StopPatterns");
  sub_C440FC();
  if (SHIBYTE(__p[1]) < 0) {
    operator delete(v54);
  }
  unint64_t v47 = (void *)v61;
  if ((void)v61)
  {
    do
    {
      unint64_t v48 = (void *)*v47;
      operator delete(v47);
      unint64_t v47 = v48;
    }
    while (v48);
  }
  uint64_t v49 = (void *)v60;
  *(void *)&long long v60 = 0;
  if (v49) {
    operator delete(v49);
  }
}

void sub_C404F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a17);
  sub_591F30(v22);
  sub_12168(v23 - 176);
  _Unwind_Resume(a1);
}

void sub_C40594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    JUMPOUT(0xC405A8);
  }
  sub_591F30(v15);
  sub_12168(v16 - 176);
  _Unwind_Resume(a1);
}

void sub_C405C4(_Unwind_Exception *a1)
{
  sub_12168(v1 - 176);
  _Unwind_Resume(a1);
}

void sub_C405F4(uint64_t a1)
{
  sub_725D0((uint64_t)v105);
  uint64_t v102 = 0;
  uint64_t v103 = 0;
  unint64_t v104 = 0;
  uint64_t v3 = *(void ***)a1;
  uint64_t v2 = *(char **)(a1 + 8);
  if (v2 == *(char **)a1) {
    goto LABEL_130;
  }
  uint64_t v4 = 0;
  unint64_t v5 = 0;
  while (2)
  {
    uint64_t v6 = v102;
    uint64_t v7 = v103;
    if (v103 != v102)
    {
      uint64_t v8 = v103;
      do
      {
        uint64_t v11 = (char *)*(v8 - 3);
        v8 -= 3;
        uint64_t v10 = v11;
        if (v11)
        {
          unsigned int v12 = (char *)*(v7 - 2);
          uint64_t v9 = v10;
          if (v12 != v10)
          {
            do
            {
              uint64_t v13 = (void *)*((void *)v12 - 3);
              if (v13)
              {
                *((void *)v12 - 2) = v13;
                operator delete(v13);
              }
              int v14 = (void *)*((void *)v12 - 6);
              if (v14)
              {
                *((void *)v12 - 5) = v14;
                operator delete(v14);
              }
              uint64_t v15 = (void *)*((void *)v12 - 9);
              if (v15)
              {
                *((void *)v12 - 8) = v15;
                operator delete(v15);
              }
              v12 -= 128;
            }
            while (v12 != v10);
            uint64_t v9 = *v8;
          }
          *(v7 - 2) = v10;
          operator delete(v9);
        }
        uint64_t v7 = v8;
      }
      while (v8 != v6);
      uint64_t v3 = *(void ***)a1;
    }
    uint64_t v103 = v6;
    uint64_t v16 = (unint64_t *)&v3[3 * v5];
    unint64_t v17 = *v16;
    unint64_t v18 = v16[1];
    if (*v16 == v18) {
      goto LABEL_121;
    }
    uint64_t v19 = 0;
    while (1)
    {
      uint64_t v20 = *(void *)(v17 + v19 + 32);
      if (v20)
      {
        if (*(unsigned char *)(v20 + 32) == 1) {
          break;
        }
      }
      if (v17 >= v17 + v19) {
        goto LABEL_22;
      }
      unint64_t v21 = v17 + v19;
      uint64_t v22 = *(int **)(v17 + v19 - 112);
      uint64_t v23 = (unsigned __int16 *)((char *)v22 - *v22);
      if (*v23 >= 9u && (uint64_t v24 = v23[4]) != 0)
      {
        unsigned int v25 = *(int *)((char *)v22 + v24) - 1;
        uint64_t v26 = *(void *)(v21 - 96);
        if (!v26) {
          goto LABEL_29;
        }
      }
      else
      {
        unsigned int v25 = -1;
        uint64_t v26 = *(void *)(v21 - 96);
        if (!v26)
        {
LABEL_29:
          int v27 = 10 * *(_DWORD *)(*(void *)(v17 + v19 - 104) + 24 * v25 + 12);
          unint64_t v28 = v17 + v19;
          if (!v20) {
            goto LABEL_30;
          }
          goto LABEL_33;
        }
      }
      int v27 = *(_DWORD *)(*(void *)(v26 + 40) + 20 * v25 + 12);
      LODWORD(v26) = *(unsigned __int8 *)(v26 + 33) != 0;
      unint64_t v28 = v17 + v19;
      if (!v20)
      {
LABEL_30:
        int v29 = 0;
        int v30 = 10 * *(_DWORD *)(*(void *)(v28 + 24) + 8);
        goto LABEL_34;
      }
LABEL_33:
      int v30 = *(_DWORD *)(*(void *)(v20 + 40) + 8);
      int v29 = *(unsigned __int8 *)(v20 + 33) != 0;
LABEL_34:
      if (v30 < 0) {
        char v31 = -5;
      }
      else {
        char v31 = 5;
      }
      if (v27 < 0) {
        char v32 = -5;
      }
      else {
        char v32 = 5;
      }
      if (v26 != v29
        || (int v33 = 103 * (char)(v32 + v27 % 10),
            (int)(*(_DWORD *)(v28 - 80) + v27 / 10 + ((v33 >> 15) & 1) + (v33 >> 10)) > (int)(*(_DWORD *)(v17 + v19 + 48) + v30 / 10 + (((103 * (char)(v31 + v30 % 10)) >> 15) & 1) + ((103 * (char)(v31 + v30 % 10)) >> 10))))
      {
        memset(__p, 0, 24);
        sub_C47510((uint64_t)__p, v17, v17 + v19, v19 >> 7);
        int v34 = v103;
        if ((unint64_t)v103 >= v104)
        {
          int v37 = sub_C45D78(&v102, (uint64_t)__p);
          uint64_t v38 = (char *)__p[0];
          uint64_t v103 = (void **)v37;
          if (__p[0])
          {
            uint64_t v97 = v4;
            uint64_t v39 = (char *)__p[1];
            uint64_t v40 = __p[0];
            if (__p[1] != __p[0])
            {
              do
              {
                uint64_t v41 = (void *)*((void *)v39 - 3);
                if (v41)
                {
                  *((void *)v39 - 2) = v41;
                  operator delete(v41);
                }
                uint64_t v42 = (void *)*((void *)v39 - 6);
                if (v42)
                {
                  *((void *)v39 - 5) = v42;
                  operator delete(v42);
                }
                unint64_t v43 = (void *)*((void *)v39 - 9);
                if (v43)
                {
                  *((void *)v39 - 8) = v43;
                  operator delete(v43);
                }
                v39 -= 128;
              }
              while (v39 != v38);
              uint64_t v40 = __p[0];
            }
            __p[1] = v38;
            operator delete(v40);
            uint64_t v4 = v97;
          }
        }
        else
        {
          *uint64_t v103 = 0;
          v34[1] = 0;
          v34[2] = 0;
          *(_OWORD *)int v34 = *(_OWORD *)__p;
          v34[2] = __p[2];
          uint64_t v103 = v34 + 3;
        }
        uint64_t v51 = v16[1];
        memset(__p, 0, 24);
        sub_C47510((uint64_t)__p, v17 + v19, v51, (uint64_t)(v51 - v17 - v19) >> 7);
        uint64_t v52 = v103;
        if ((unint64_t)v103 >= v104)
        {
          char v53 = sub_C45D78(&v102, (uint64_t)__p);
          uint64_t v54 = (char *)__p[0];
          uint64_t v103 = (void **)v53;
          if (__p[0])
          {
            unint64_t v55 = (char *)__p[1];
            uint64_t v56 = __p[0];
            if (__p[1] != __p[0])
            {
              do
              {
                int v57 = (void *)*((void *)v55 - 3);
                if (v57)
                {
                  *((void *)v55 - 2) = v57;
                  operator delete(v57);
                }
                int v58 = (void *)*((void *)v55 - 6);
                if (v58)
                {
                  *((void *)v55 - 5) = v58;
                  operator delete(v58);
                }
                char v59 = (void *)*((void *)v55 - 9);
                if (v59)
                {
                  *((void *)v55 - 8) = v59;
                  operator delete(v59);
                }
                v55 -= 128;
              }
              while (v55 != v54);
              uint64_t v56 = __p[0];
            }
            __p[1] = v54;
            operator delete(v56);
          }
        }
        else
        {
          *uint64_t v103 = 0;
          v52[1] = 0;
          v52[2] = 0;
          *(_OWORD *)uint64_t v52 = *(_OWORD *)__p;
          v52[2] = __p[2];
          uint64_t v103 = v52 + 3;
        }
        ++v4;
        unint64_t v60 = *v16;
        for (unint64_t i = v16[1]; i != v60; i -= 128)
        {
          int v62 = *(void **)(i - 24);
          if (v62)
          {
            *(void *)(i - 16) = v62;
            operator delete(v62);
          }
          int v63 = *(void **)(i - 48);
          if (v63)
          {
            *(void *)(i - 40) = v63;
            operator delete(v63);
          }
          unsigned int v64 = *(void **)(i - 72);
          if (v64)
          {
            *(void *)(i - 64) = v64;
            operator delete(v64);
          }
        }
        goto LABEL_120;
      }
LABEL_22:
      v19 += 128;
      if (v17 + v19 == v18) {
        goto LABEL_121;
      }
    }
    unint64_t v35 = v17 + v19;
    if (v17 < v17 + v19)
    {
      memset(__p, 0, 24);
      sub_C47510((uint64_t)__p, v17, v17 + v19, v19 >> 7);
      uint64_t v36 = v103;
      if ((unint64_t)v103 >= v104)
      {
        uint64_t v44 = sub_C45D78(&v102, (uint64_t)__p);
        int v45 = (char *)__p[0];
        uint64_t v103 = (void **)v44;
        if (__p[0])
        {
          int v46 = (char *)__p[1];
          unint64_t v47 = __p[0];
          if (__p[1] != __p[0])
          {
            do
            {
              unint64_t v48 = (void *)*((void *)v46 - 3);
              if (v48)
              {
                *((void *)v46 - 2) = v48;
                operator delete(v48);
              }
              uint64_t v49 = (void *)*((void *)v46 - 6);
              if (v49)
              {
                *((void *)v46 - 5) = v49;
                operator delete(v49);
              }
              unint64_t v50 = (void *)*((void *)v46 - 9);
              if (v50)
              {
                *((void *)v46 - 8) = v50;
                operator delete(v50);
              }
              v46 -= 128;
            }
            while (v46 != v45);
            unint64_t v47 = __p[0];
          }
          __p[1] = v45;
          operator delete(v47);
          unint64_t v35 = v17 + v19;
        }
      }
      else
      {
        *uint64_t v103 = 0;
        v36[1] = 0;
        void v36[2] = 0;
        *(_OWORD *)uint64_t v36 = *(_OWORD *)__p;
        void v36[2] = __p[2];
        uint64_t v103 = v36 + 3;
      }
      unint64_t v18 = v16[1];
    }
    if (v35 + 128 < v18)
    {
      memset(__p, 0, 24);
      sub_C47510((uint64_t)__p, v17 + v19 + 128, v18, (uint64_t)(v18 - v17 - v19 - 128) >> 7);
      uint64_t v65 = v103;
      if ((unint64_t)v103 >= v104)
      {
        uint64_t v66 = sub_C45D78(&v102, (uint64_t)__p);
        uint64_t v67 = (char *)__p[0];
        uint64_t v103 = (void **)v66;
        if (__p[0])
        {
          uint64_t v68 = (char *)__p[1];
          uint64_t v69 = __p[0];
          if (__p[1] != __p[0])
          {
            do
            {
              uint64_t v70 = (void *)*((void *)v68 - 3);
              if (v70)
              {
                *((void *)v68 - 2) = v70;
                operator delete(v70);
              }
              unint64_t v71 = (void *)*((void *)v68 - 6);
              if (v71)
              {
                *((void *)v68 - 5) = v71;
                operator delete(v71);
              }
              int v72 = (void *)*((void *)v68 - 9);
              if (v72)
              {
                *((void *)v68 - 8) = v72;
                operator delete(v72);
              }
              v68 -= 128;
            }
            while (v68 != v67);
            uint64_t v69 = __p[0];
          }
          __p[1] = v67;
          operator delete(v69);
        }
      }
      else
      {
        *uint64_t v103 = 0;
        v65[1] = 0;
        v65[2] = 0;
        *(_OWORD *)uint64_t v65 = *(_OWORD *)__p;
        v65[2] = __p[2];
        uint64_t v103 = v65 + 3;
      }
      unint64_t v18 = v16[1];
    }
    unint64_t v60 = *v16;
    while (v18 != v60)
    {
      unint64_t v73 = *(void **)(v18 - 24);
      if (v73)
      {
        *(void *)(v18 - 16) = v73;
        operator delete(v73);
      }
      unint64_t v74 = *(void **)(v18 - 48);
      if (v74)
      {
        *(void *)(v18 - 40) = v74;
        operator delete(v74);
      }
      unint64_t v75 = *(void **)(v18 - 72);
      if (v75)
      {
        *(void *)(v18 - 64) = v75;
        operator delete(v75);
      }
      v18 -= 128;
    }
LABEL_120:
    v16[1] = v60;
LABEL_121:
    uint8x8_t v76 = v102;
    uint64_t v77 = v103;
    uint64_t v2 = *(char **)(a1 + 8);
    while (v76 != v77)
    {
      if ((unint64_t)v2 < *(void *)(a1 + 16))
      {
        *(void *)uint64_t v2 = 0;
        *((void *)v2 + 1) = 0;
        *((void *)v2 + 2) = 0;
        *(_OWORD *)uint64_t v2 = *(_OWORD *)v76;
        *((void *)v2 + 2) = v76[2];
        char *v76 = 0;
        v76[1] = 0;
        v76[2] = 0;
        v2 += 24;
      }
      else
      {
        uint64_t v2 = sub_C45D78((void ***)a1, (uint64_t)v76);
      }
      *(void *)(a1 + 8) = v2;
      v76 += 3;
    }
    ++v5;
    uint64_t v3 = *(void ***)a1;
    if (v5 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v2[-*(void *)a1] >> 3)) {
      continue;
    }
    break;
  }
  if (v3 == (void **)v2)
  {
LABEL_130:
    uint64_t v3 = (void **)v2;
    goto LABEL_131;
  }
  while (*v3 != v3[1])
  {
    v3 += 3;
    if (v3 == (void **)v2) {
      goto LABEL_130;
    }
  }
  if (v3 != (void **)v2)
  {
    uint64_t v96 = (__n128 *)(v3 + 3);
    if (v3 + 3 != (void **)v2)
    {
      do
      {
        if (v96->n128_u64[0] != v96->n128_u64[1])
        {
          sub_BDE5B8(v3, v96);
          v3 += 3;
        }
        uint64_t v96 = (__n128 *)((char *)v96 + 24);
      }
      while (v96 != (__n128 *)v2);
      uint64_t v2 = *(char **)(a1 + 8);
    }
  }
LABEL_131:
  sub_C4435C(a1, v3, (void **)v2);
  unint64_t v78 = *(__n128 **)(a1 + 8);
  unint64_t v79 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v78 - *(void *)a1) >> 3));
  if (v78 == *(__n128 **)a1) {
    uint64_t v80 = 0;
  }
  else {
    uint64_t v80 = v79;
  }
  sub_C475F8(*(__n128 **)a1, v78, (uint64_t)__p, v80, 1);
  int v81 = (void **)sub_C491B0(*(void *)a1, *(__n128 **)(a1 + 8));
  sub_C4435C(a1, v81, *(void ***)(a1 + 8));
  sub_72688((uint64_t)v105);
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)__p);
    sub_188FC78(__p, (uint64_t)"Removed ", 8);
    unint64_t v82 = (void *)std::ostream::operator<<();
    sub_188FC78(v82, (uint64_t)" cancelled trips and split ", 27);
    int8x8_t v83 = (void *)std::ostream::operator<<();
    sub_188FC78(v83, (uint64_t)" inconsistent trip pairs in ", 28);
    uint8x8_t v84 = (void *)std::ostream::operator<<();
    sub_188FC78(v84, (uint64_t)" ms", 3);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v98, 1u);
    if (v99 < 0) {
      operator delete(v98);
    }
    if (v101 < 0) {
      operator delete(__p[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "TripSequenceConsistency.Runtime");
  sub_C43E9C();
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20E12D0;
  strcpy((char *)__p[0], "TripSequenceConsistency.CancelledTrips");
  sub_C440FC();
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93B0;
  strcpy((char *)__p[0], "TripSequenceConsistency.InconsistentTripPairs");
  sub_C440FC();
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v85 = v102;
  if (v102)
  {
    int v86 = v103;
    uint64_t v87 = v102;
    if (v103 != v102)
    {
      uint64_t v88 = v103;
      do
      {
        unint64_t v91 = (char *)*(v88 - 3);
        v88 -= 3;
        unint64_t v90 = v91;
        if (v91)
        {
          unint64_t v92 = (char *)*(v86 - 2);
          uint64_t v89 = v90;
          if (v92 != v90)
          {
            do
            {
              unint64_t v93 = (void *)*((void *)v92 - 3);
              if (v93)
              {
                *((void *)v92 - 2) = v93;
                operator delete(v93);
              }
              uint64_t v94 = (void *)*((void *)v92 - 6);
              if (v94)
              {
                *((void *)v92 - 5) = v94;
                operator delete(v94);
              }
              uint64_t v95 = (void *)*((void *)v92 - 9);
              if (v95)
              {
                *((void *)v92 - 8) = v95;
                operator delete(v95);
              }
              v92 -= 128;
            }
            while (v92 != v90);
            uint64_t v89 = *v88;
          }
          *(v86 - 2) = v90;
          operator delete(v89);
        }
        int v86 = v88;
      }
      while (v88 != v85);
      uint64_t v87 = v102;
    }
    uint64_t v103 = v85;
    operator delete(v87);
  }
}

void sub_C4110C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    sub_BD9954((void ***)(v21 - 152));
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  sub_BD9954((void ***)(v21 - 152));
  _Unwind_Resume(a1);
}

void sub_C412C4(unint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v38);
    sub_188FC78(&v38, (uint64_t)"Computing stop patterns from ", 29);
    uint64_t v4 = (void *)std::ostream::operator<<();
    sub_188FC78(v4, (uint64_t)" trip sequences", 15);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if (v41 < 0) {
      operator delete(v40);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  sub_725D0((uint64_t)v37);
  sub_BD76A8(a1, 1, __p);
  *(void *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)a2 = *(void *)__p;
  long long v5 = *(_OWORD *)&__p[8];
  *(_OWORD *)long long __p = 0u;
  *(_OWORD *)(a2 + 8) = v5;
  *(void *)&__p[16] = 0;
  uint64_t v6 = (char *)v33;
  uint64_t v7 = v34;
  uint64_t v38 = 0;
  long long v39 = 0u;
  int64_t v8 = v34 - (unsigned char *)v33;
  if (v34 == v33)
  {
    uint64_t v13 = 0;
    unint64_t v17 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    if (v9 >= 0x1555555555555556) {
      sub_2E00();
    }
    uint64_t v10 = (char *)operator new(v8);
    uint64_t v11 = v10;
    uint64_t v12 = 0;
    uint64_t v13 = &v10[12 * v9];
    do
    {
      int v14 = &v6[v12];
      uint64_t v15 = &v10[v12];
      int v16 = *(_DWORD *)&v6[v12 + 8];
      *(void *)uint64_t v15 = __ROR8__(*(void *)&v6[v12], 32);
      *((_DWORD *)v15 + 2) = v16;
      v12 += 12;
    }
    while (v14 + 12 != v7);
    unint64_t v17 = &v10[v12];
  }
  unint64_t v18 = v35[0];
  uint64_t v19 = v35[3];
  *(void *)(a2 + 72) = v11;
  *(void *)(a2 + 80) = v17;
  *(void *)(a2 + 88) = v13;
  *(void *)(a2 + 24) = v18;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)&v35[1];
  *(void *)(a2 + 48) = v19;
  memset(v35, 0, sizeof(v35));
  *(_OWORD *)(a2 + 56) = v36;
  long long v36 = 0u;
  sub_72688((uint64_t)v37);
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v38);
    sub_188FC78(&v38, (uint64_t)"Computed ", 9);
    uint64_t v20 = (void *)std::ostream::operator<<();
    sub_188FC78(v20, (uint64_t)" stop patterns on ", 18);
    uint64_t v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)" scheduled trip refs (", 22);
    uint64_t v22 = (void *)std::ostream::operator<<();
    sub_188FC78(v22, (uint64_t)" stop events, ", 14);
    uint64_t v23 = (void *)std::ostream::operator<<();
    sub_188FC78(v23, (uint64_t)" frequencies) in ", 17);
    uint64_t v24 = (void *)std::ostream::operator<<();
    sub_188FC78(v24, (uint64_t)" ms", 3);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v30, 1u);
    if (v31 < 0) {
      operator delete(v30);
    }
    if (v41 < 0) {
      operator delete(v40);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  uint64_t v38 = operator new(0x20uLL);
  long long v39 = xmmword_20B9800;
  strcpy((char *)v38, "StopPatternComputation.Runtime");
  sub_C43E9C();
  if (SHIBYTE(v39) < 0) {
    operator delete(v38);
  }
  uint64_t v38 = operator new(0x28uLL);
  long long v39 = xmmword_20B93A0;
  strcpy((char *)v38, "StopPatternComputation.StopPatterns");
  sub_C440FC();
  if (SHIBYTE(v39) < 0) {
    operator delete(v38);
  }
  uint64_t v38 = operator new(0x20uLL);
  long long v39 = xmmword_20B91B0;
  strcpy((char *)v38, "StopPatternComputation.Trips");
  sub_C440FC();
  if (SHIBYTE(v39) < 0) {
    operator delete(v38);
  }
  uint64_t v38 = operator new(0x28uLL);
  long long v39 = xmmword_20B9280;
  strcpy((char *)v38, "StopPatternComputation.Frequencies");
  sub_C440FC();
  if (SHIBYTE(v39) < 0) {
    operator delete(v38);
  }
  uint64_t v38 = operator new(0x28uLL);
  long long v39 = xmmword_20B9260;
  strcpy((char *)v38, "StopPatternComputation.StopEvents");
  sub_C440FC();
  if (SHIBYTE(v39) < 0) {
    operator delete(v38);
  }
  if (v35[3])
  {
    *(void **)&long long v36 = v35[3];
    operator delete(v35[3]);
  }
  if (v35[0])
  {
    v35[1] = v35[0];
    operator delete(v35[0]);
  }
  if (v33)
  {
    int v34 = (char *)v33;
    operator delete(v33);
  }
  unsigned int v25 = *(uint64_t **)__p;
  if (*(void *)__p)
  {
    uint64_t v26 = *(void **)__p;
    if (*(void *)&__p[8] != *(void *)__p)
    {
      int v27 = (uint64_t *)(*(void *)&__p[8] - 8);
      do
      {
        uint64_t v29 = *v27;
        *int v27 = 0;
        if (v29) {
          sub_BDD258((uint64_t)v27, v29);
        }
      }
      while (v27-- != v25);
      uint64_t v26 = *(void **)__p;
    }
    *(void *)&__p[8] = v25;
    operator delete(v26);
  }
}

void sub_C419E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a40);
  sub_BD98A4(v45);
  sub_BD98A4((uint64_t **)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_C41AF8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v17);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F7308))
  {
    unint64_t v9 = sub_A10F80(-85.0, -13.0);
    sub_518C8(v9 >> 17, v9 >> 49);
    dword_24F7300 = v10 | 0x40000000;
    __cxa_guard_release(&qword_24F7308);
  }
  sub_BD6FC0(dword_24F7300, a1, a2);
  uint64_t v4 = *(void **)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = 0;
    do
    {
      v5 += (uint64_t)(v4[4] - v4[3]) >> 4;
      uint64_t v4 = (void *)*v4;
    }
    while (v4);
  }
  sub_72688((uint64_t)v17);
  long long __p = operator new(0x28uLL);
  strcpy((char *)__p, "StopPatternAtStopComputation.Runtime");
  sub_C43E9C();
  operator delete(__p);
  long long __p = operator new(0x30uLL);
  long long v14 = xmmword_20B93D0;
  strcpy((char *)__p, "StopPatternAtStopComputation.StopPatterns");
  sub_C440FC();
  operator delete(__p);
  uint64_t result = sub_723EC(1u);
  if (result)
  {
    sub_6BAC((uint64_t)&__p);
    sub_188FC78(&__p, (uint64_t)"Computed ", 9);
    uint64_t v7 = (void *)std::ostream::operator<<();
    sub_188FC78(v7, (uint64_t)" stop pattern at stop entities in ", 34);
    int64_t v8 = (void *)std::ostream::operator<<();
    sub_188FC78(v8, (uint64_t)" ms", 3);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v11, 1u);
    if (v12 < 0) {
      operator delete(v11);
    }
    if (v16 < 0) {
      operator delete(v15);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return std::ios::~ios();
  }
  return result;
}

void sub_C41DE4(_Unwind_Exception *a1)
{
}

void sub_C41DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a16);
  sub_3AB00(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_C41EAC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v17);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F7308))
  {
    unint64_t v9 = sub_A10F80(-85.0, -13.0);
    sub_518C8(v9 >> 17, v9 >> 49);
    dword_24F7300 = v10 | 0x40000000;
    __cxa_guard_release(&qword_24F7308);
  }
  sub_BDE66C(dword_24F7300, a1, a2);
  uint64_t v4 = *(void **)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = 0;
    do
    {
      v5 -= 0x5555555555555555 * ((uint64_t)(v4[4] - v4[3]) >> 2);
      uint64_t v4 = (void *)*v4;
    }
    while (v4);
  }
  sub_72688((uint64_t)v17);
  long long __p = operator new(0x28uLL);
  strcpy((char *)__p, "StopPatternOfLineComputation.Runtime");
  sub_C43E9C();
  operator delete(__p);
  long long __p = operator new(0x30uLL);
  long long v14 = xmmword_20B93D0;
  strcpy((char *)__p, "StopPatternOfLineComputation.StopPatterns");
  sub_C440FC();
  operator delete(__p);
  uint64_t result = sub_723EC(1u);
  if (result)
  {
    sub_6BAC((uint64_t)&__p);
    sub_188FC78(&__p, (uint64_t)"Computed ", 9);
    uint64_t v7 = (void *)std::ostream::operator<<();
    sub_188FC78(v7, (uint64_t)" stop pattern of line entities in ", 34);
    int64_t v8 = (void *)std::ostream::operator<<();
    sub_188FC78(v8, (uint64_t)" ms", 3);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v11, 1u);
    if (v12 < 0) {
      operator delete(v11);
    }
    if (v16 < 0) {
      operator delete(v15);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return std::ios::~ios();
  }
  return result;
}

void sub_C421A4(_Unwind_Exception *a1)
{
}

void sub_C421BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a16);
  sub_3AB00(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_C4226C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v17);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F7308))
  {
    unint64_t v9 = sub_A10F80(-85.0, -13.0);
    sub_518C8(v9 >> 17, v9 >> 49);
    dword_24F7300 = v10 | 0x40000000;
    __cxa_guard_release(&qword_24F7308);
  }
  sub_BDECA4(dword_24F7300, a1, a2);
  uint64_t v4 = *(void **)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = 0;
    do
    {
      v5 += (uint64_t)(v4[4] - v4[3]) >> 3;
      uint64_t v4 = (void *)*v4;
    }
    while (v4);
  }
  sub_72688((uint64_t)v17);
  long long __p = operator new(0x28uLL);
  strcpy((char *)__p, "StopPatternOfTripComputation.Runtime");
  sub_C43E9C();
  operator delete(__p);
  long long __p = operator new(0x30uLL);
  long long v14 = xmmword_20B93D0;
  strcpy((char *)__p, "StopPatternOfTripComputation.StopPatterns");
  sub_C440FC();
  operator delete(__p);
  uint64_t result = sub_723EC(1u);
  if (result)
  {
    sub_6BAC((uint64_t)&__p);
    sub_188FC78(&__p, (uint64_t)"Computed ", 9);
    uint64_t v7 = (void *)std::ostream::operator<<();
    sub_188FC78(v7, (uint64_t)" stop pattern of trip entities in ", 34);
    int64_t v8 = (void *)std::ostream::operator<<();
    sub_188FC78(v8, (uint64_t)" ms", 3);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v11, 1u);
    if (v12 < 0) {
      operator delete(v11);
    }
    if (v16 < 0) {
      operator delete(v15);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return std::ios::~ios();
  }
  return result;
}

void sub_C42558(_Unwind_Exception *a1)
{
}

void sub_C42570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a16);
  sub_BDF270(v21);
  _Unwind_Resume(a1);
}

void *sub_C42620@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = 0;
  unsigned __int8 v10 = 0;
  long long v11 = xmmword_20F0140;
  uint64_t v12 = 0;
  unsigned int v13 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v16 = 1;
  __int16 v17 = 256;
  uint64_t v18 = 0;
  int v3 = sub_C2C348((uint64_t)&v9, a1, 0);
  sub_C08F44((uint64_t)&v9, v3, 0, 0);
  int v4 = v10;
  uint64_t v5 = v12;
  long long v6 = v14;
  uint64_t v7 = v13;
  *(void *)a2 = v9;
  *(unsigned char *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v5;
  *(void *)(a2 + 32) = *((void *)&v6 + 1);
  *(void *)(a2 + 40) = v7;
  if (v4)
  {
    uint64_t v9 = 0;
    unsigned __int8 v10 = 0;
  }
  uint64_t v12 = 0;
  unsigned int v13 = 0;
  *(void *)&long long v15 = 0;
  long long v14 = 0uLL;
  return sub_C08E28(&v9);
}

void sub_C426F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_C08E28((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_C4270C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  for (unint64_t i = (void *)result[2]; i; unint64_t i = (void *)*i)
  {
    uint64_t v14 = 0;
    char v15 = 0;
    long long v16 = xmmword_20F0140;
    uint64_t v17 = 0;
    unsigned int v18 = 0;
    long long v19 = 0u;
    long long v20 = 0u;
    uint64_t v21 = 1;
    __int16 v22 = 256;
    uint64_t v23 = 0;
    int v5 = sub_C346F8((uint64_t)&v14, (uint64_t)(i + 3));
    sub_C08F44((uint64_t)&v14, v5, 0, 0);
    uint64_t v9 = v14;
    char v10 = v15;
    *(void *)&long long v11 = v19;
    *((void *)&v11 + 1) = v17;
    uint64_t v12 = *((void *)&v19 + 1);
    uint64_t v13 = v18;
    if (v15)
    {
      uint64_t v14 = 0;
      char v15 = 0;
    }
    uint64_t v17 = 0;
    unsigned int v18 = 0;
    *(void *)&long long v20 = 0;
    long long v19 = 0uLL;
    uint64_t v24 = (uint64_t (**)())(i + 2);
    long long v6 = sub_C4951C(a2, i + 2, (uint64_t)&unk_20F06E0, &v24);
    uint64_t v7 = v6;
    int64_t v8 = v6 + 24;
    if (v6 + 24 == (char *)&v9)
    {
      if ((void)v11)
      {
        if (!v9)
        {
          uint64_t v24 = off_243EB70;
          operator delete[]();
        }
        (*(void (**)(uint64_t))(*(void *)v9 + 24))(v9);
      }
      if (v10 && v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
    }
    else
    {
      if (*((void *)v6 + 5))
      {
        if (!*v8)
        {
          uint64_t v24 = off_243EB70;
          operator delete[]();
        }
        (*(void (**)(void))(*(void *)*v8 + 24))(*v8);
      }
      if (v7[32])
      {
        if (*v8) {
          (*(void (**)(void))(*(void *)*v8 + 8))(*v8);
        }
      }
      *((void *)v7 + 3) = v9;
      v7[32] = v10;
      *(_OWORD *)(v7 + 40) = v11;
      uint64_t v4 = v13;
      *((void *)v7 + 7) = v12;
      *((void *)v7 + 8) = v4;
    }
    uint64_t result = sub_C08E28(&v14);
  }
  return result;
}

void sub_C429EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_C2A1F0((uint64_t *)va);
  sub_C08E28((uint64_t *)va1);
  sub_C2A1B4(v3);
  _Unwind_Resume(a1);
}

void sub_C42A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_C08E28((uint64_t *)va);
  sub_C2A1B4(v9);
  _Unwind_Resume(a1);
}

void *sub_C42A2C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  for (unint64_t i = (void *)result[2]; i; unint64_t i = (void *)*i)
  {
    uint64_t v14 = 0;
    char v15 = 0;
    long long v16 = xmmword_20F0140;
    uint64_t v17 = 0;
    unsigned int v18 = 0;
    long long v19 = 0u;
    long long v20 = 0u;
    uint64_t v21 = 1;
    __int16 v22 = 256;
    uint64_t v23 = 0;
    int v5 = sub_C34804((uint64_t)&v14, (uint64_t)(i + 3));
    sub_C08F44((uint64_t)&v14, v5, 0, 0);
    uint64_t v9 = v14;
    char v10 = v15;
    *(void *)&long long v11 = v19;
    *((void *)&v11 + 1) = v17;
    uint64_t v12 = *((void *)&v19 + 1);
    uint64_t v13 = v18;
    if (v15)
    {
      uint64_t v14 = 0;
      char v15 = 0;
    }
    uint64_t v17 = 0;
    unsigned int v18 = 0;
    *(void *)&long long v20 = 0;
    long long v19 = 0uLL;
    uint64_t v24 = (uint64_t (**)())(i + 2);
    long long v6 = sub_C4951C(a2, i + 2, (uint64_t)&unk_20F06E0, &v24);
    uint64_t v7 = v6;
    uint64_t v8 = v6 + 24;
    if (v6 + 24 == (char *)&v9)
    {
      if ((void)v11)
      {
        if (!v9)
        {
          uint64_t v24 = off_243EB70;
          operator delete[]();
        }
        (*(void (**)(uint64_t))(*(void *)v9 + 24))(v9);
      }
      if (v10 && v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
    }
    else
    {
      if (*((void *)v6 + 5))
      {
        if (!*v8)
        {
          uint64_t v24 = off_243EB70;
          operator delete[]();
        }
        (*(void (**)(void))(*(void *)*v8 + 24))(*v8);
      }
      if (v7[32])
      {
        if (*v8) {
          (*(void (**)(void))(*(void *)*v8 + 8))(*v8);
        }
      }
      *((void *)v7 + 3) = v9;
      v7[32] = v10;
      *(_OWORD *)(v7 + 40) = v11;
      uint64_t v4 = v13;
      *((void *)v7 + 7) = v12;
      *((void *)v7 + 8) = v4;
    }
    uint64_t result = sub_C08E28(&v14);
  }
  return result;
}

void sub_C42D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_C2A1F0((uint64_t *)va);
  sub_C08E28((uint64_t *)va1);
  sub_C2A1B4(v3);
  _Unwind_Resume(a1);
}

void sub_C42D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_C08E28((uint64_t *)va);
  sub_C2A1B4(v9);
  _Unwind_Resume(a1);
}

void *sub_C42D4C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  for (unint64_t i = (void *)result[2]; i; unint64_t i = (void *)*i)
  {
    uint64_t v14 = 0;
    char v15 = 0;
    long long v16 = xmmword_20F0140;
    uint64_t v17 = 0;
    unsigned int v18 = 0;
    long long v19 = 0u;
    long long v20 = 0u;
    uint64_t v21 = 1;
    __int16 v22 = 256;
    uint64_t v23 = 0;
    int v5 = sub_C3491C((uint64_t)&v14, i + 3, 0);
    sub_C08F44((uint64_t)&v14, v5, 0, 0);
    uint64_t v9 = v14;
    char v10 = v15;
    *(void *)&long long v11 = v19;
    *((void *)&v11 + 1) = v17;
    uint64_t v12 = *((void *)&v19 + 1);
    uint64_t v13 = v18;
    if (v15)
    {
      uint64_t v14 = 0;
      char v15 = 0;
    }
    uint64_t v17 = 0;
    unsigned int v18 = 0;
    *(void *)&long long v20 = 0;
    long long v19 = 0uLL;
    uint64_t v24 = (uint64_t (**)())(i + 2);
    long long v6 = sub_C4951C(a2, i + 2, (uint64_t)&unk_20F06E0, &v24);
    uint64_t v7 = v6;
    uint64_t v8 = v6 + 24;
    if (v6 + 24 == (char *)&v9)
    {
      if ((void)v11)
      {
        if (!v9)
        {
          uint64_t v24 = off_243EB70;
          operator delete[]();
        }
        (*(void (**)(uint64_t))(*(void *)v9 + 24))(v9);
      }
      if (v10 && v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
    }
    else
    {
      if (*((void *)v6 + 5))
      {
        if (!*v8)
        {
          uint64_t v24 = off_243EB70;
          operator delete[]();
        }
        (*(void (**)(void))(*(void *)*v8 + 24))(*v8);
      }
      if (v7[32])
      {
        if (*v8) {
          (*(void (**)(void))(*(void *)*v8 + 8))(*v8);
        }
      }
      *((void *)v7 + 3) = v9;
      v7[32] = v10;
      *(_OWORD *)(v7 + 40) = v11;
      uint64_t v4 = v13;
      *((void *)v7 + 7) = v12;
      *((void *)v7 + 8) = v4;
    }
    uint64_t result = sub_C08E28(&v14);
  }
  return result;
}

void sub_C4302C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_C2A1F0((uint64_t *)va);
  sub_C08E28((uint64_t *)va1);
  sub_C2A1B4(v3);
  _Unwind_Resume(a1);
}

void sub_C43050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_C08E28((uint64_t *)va);
  sub_C2A1B4(v9);
  _Unwind_Resume(a1);
}

void sub_C4306C()
{
  sub_725D0((uint64_t)v0);
  sub_C0C874();
}

void sub_C433F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_C4348C(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X8>)
{
  uint64_t v3 = (unint64_t *)a2;
  long long v6 = (void *)(a1 + 4136);
  if (sub_A10E20((void *)(a1 + 4136), *(_DWORD *)(a2 + 4)))
  {
    *a3 = 0;
    a3[1] = 0;
    uint64_t v102 = a3;
    a3[2] = 0;
    uint64_t v7 = (int *)sub_A11094(v6, *v3);
    uint64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
    if (*v8 >= 5u)
    {
      uint64_t v9 = v8[2];
      if (v9)
      {
        int v98 = *(int *)((char *)v7 + v9 + *(unsigned int *)((char *)v7 + v9));
        if (v98)
        {
          int v101 = 0;
          int v10 = 0;
          uint64_t v97 = (uint64_t *)(a1 + 4184);
          uint64_t v103 = v3;
          while (1)
          {
            unint64_t v11 = *v3;
            int v12 = *((_DWORD *)v3 + 2);
            uint64_t v13 = sub_A10650(v6, *v3);
            uint64_t v14 = &v13[-*(int *)v13];
            unsigned int v15 = *(unsigned __int16 *)v14;
            if (v15 <= 4)
            {
              long long v19 = 0;
              uint64_t v17 = (int *)(4 * v11 + 4 + dword_4[v11]);
              long long v20 = (unsigned __int16 *)((char *)v17
                                       - *(int *)((char *)&dword_4[v11]
                                                + dword_4[v11]));
              if (*v20 >= 0x11u) {
                goto LABEL_15;
              }
            }
            else
            {
              uint64_t v16 = *((unsigned __int16 *)v14 + 2);
              if (*((_WORD *)v14 + 2)) {
                v16 += (uint64_t)&v13[*(unsigned int *)&v13[v16]];
              }
              uint64_t v17 = (int *)(v16 + 4 * v11 + 4 + *(unsigned int *)(v16 + 4 * v11 + 4));
              if (v15 >= 0xB && (uint64_t v18 = *((unsigned __int16 *)v14 + 5)) != 0)
              {
                long long v19 = (unsigned int *)&v13[v18 + *(unsigned int *)&v13[v18]];
                long long v20 = (unsigned __int16 *)((char *)v17 - *v17);
                if (*v20 >= 0x11u) {
                  goto LABEL_15;
                }
              }
              else
              {
                long long v19 = 0;
                long long v20 = (unsigned __int16 *)((char *)v17 - *v17);
                if (*v20 >= 0x11u)
                {
LABEL_15:
                  uint64_t v21 = v20[8];
                  if (v20[8]) {
                    LODWORD(v21) = *(int *)((char *)v17 + v21);
                  }
                  goto LABEL_19;
                }
              }
            }
            LODWORD(v21) = 0;
LABEL_19:
            uint64_t v22 = sub_A108C4(v19, (int)v21 + v10 + *(int *)((char *)v17 + v20[2] + *(unsigned int *)((char *)v17 + v20[2])) * v12);
            if (v22)
            {
              uint64_t v23 = __ROR8__(*(void *)v22, 32);
              int v24 = *(_DWORD *)(v22 + 8);
            }
            else
            {
              int v24 = 0;
              uint64_t v23 = 0xFFFFFFFFLL;
            }
            uint64_t v104 = v23;
            int v105 = v24;
            uint64_t v122 = 0;
            uint64_t v123 = 0;
            uint64_t v124 = 0;
            uint64_t v119 = 0;
            uint64_t v120 = 0;
            uint64_t v121 = 0;
            unint64_t v116 = 0;
            unint64_t v117 = 0;
            uint64_t v118 = 0;
            sub_BDD91C(v97, (unsigned int *)&v104, &v122, &v119, &v116, (uint64_t)v106);
            unsigned int v25 = v102;
            uint64_t v26 = v102[1];
            if (v26 >= v102[2])
            {
              int v30 = sub_BDDA04(v102, (uint64_t)v106);
              char v31 = __p[0];
              v102[1] = v30;
              unsigned int v25 = v102;
              if (v31)
              {
                __p[1] = v31;
                operator delete(v31);
                unsigned int v25 = v102;
              }
            }
            else
            {
              long long v27 = *(_OWORD *)v106;
              long long v28 = v108;
              uint64_t v29 = v109;
              v26[1] = v107;
              void v26[2] = v28;
              *uint64_t v26 = v27;
              *((void *)v26 + 6) = v29;
              *((void *)v26 + 7) = 0;
              *((void *)v26 + 8) = 0;
              *((void *)v26 + 9) = 0;
              *(_OWORD *)((char *)v26 + 56) = *(_OWORD *)v110;
              v110[0] = 0;
              v110[1] = 0;
              *((void *)v26 + 9) = v111;
              *((void *)v26 + 10) = 0;
              uint64_t v111 = 0;
              *((void *)v26 + 11) = 0;
              *((void *)v26 + 12) = 0;
              v26[5] = *(_OWORD *)v112;
              v112[0] = 0;
              v112[1] = 0;
              *((void *)v26 + 12) = v113;
              *((void *)v26 + 13) = 0;
              uint64_t v113 = 0;
              *((void *)v26 + 14) = 0;
              *((void *)v26 + 15) = 0;
              *(_OWORD *)((char *)v26 + 104) = *(_OWORD *)__p;
              *((void *)v26 + 15) = v115;
              __p[0] = 0;
              __p[1] = 0;
              uint64_t v115 = 0;
              v102[1] = v26 + 8;
            }
            if (v112[0])
            {
              v112[1] = v112[0];
              operator delete(v112[0]);
              unsigned int v25 = v102;
            }
            if (v110[0])
            {
              v110[1] = v110[0];
              operator delete(v110[0]);
              unsigned int v25 = v102;
            }
            if (v116)
            {
              unint64_t v117 = v116;
              operator delete(v116);
              unsigned int v25 = v102;
            }
            if (v119)
            {
              uint64_t v120 = v119;
              operator delete(v119);
              unsigned int v25 = v102;
            }
            if (v122)
            {
              uint64_t v123 = v122;
              operator delete(v122);
              unsigned int v25 = v102;
            }
            char v32 = v25[1];
            uint64_t v33 = *(v32 - 12);
            if (v33 && *(unsigned char *)(v33 + 32) == 1)
            {
              int v34 = (int *)*(v32 - 14);
              unint64_t v35 = (unsigned __int16 *)((char *)v34 - *v34);
              if (*v35 >= 9u && (uint64_t v36 = v35[4]) != 0) {
                int v37 = *(int *)((char *)v34 + v36);
              }
              else {
                int v37 = 0;
              }
              v101 += v37;
              if (++v10 == v98) {
                return;
              }
            }
            else
            {
              uint64_t v38 = (int *)*(v32 - 14);
              long long v39 = (unsigned __int16 *)((char *)v38 - *v38);
              int v99 = v10;
              if (*v39 >= 9u && (uint64_t v40 = v39[4]) != 0 && (v41 = *(unsigned int *)((char *)v38 + v40), v41))
              {
                uint64_t v42 = (char *)operator new(2 * v41);
                unint64_t v100 = &v42[2 * v41];
                bzero(v42, 2 * v41);
              }
              else
              {
                unint64_t v100 = 0;
                uint64_t v42 = 0;
              }
              unint64_t v43 = 0;
              uint64_t v44 = v42 + 1;
              uint64_t v45 = 16;
              int v46 = v42;
              while (1)
              {
                unint64_t v47 = (int *)*(v32 - 14);
                unint64_t v48 = (unsigned __int16 *)((char *)v47 - *v47);
                if (*v48 < 9u) {
                  break;
                }
                uint64_t v49 = v48[4];
                if (!v49 || v43 >= *(unsigned int *)((char *)v47 + v49)) {
                  break;
                }
                uint64_t v50 = *(v32 - 9);
                if (v50 == *(v32 - 8))
                {
                  uint64_t v52 = *(v32 - 12);
                  if (v52)
                  {
                    unsigned int v51 = v101 + v43;
                    if (*(unsigned char *)(*(void *)(v52 + 40) + 20 * v43 + 16) == 1) {
                      goto LABEL_76;
                    }
                  }
                  else
                  {
                    unsigned int v51 = v101 + v43;
                    if (*(unsigned char *)(*(v32 - 13) + v45) == 1) {
                      goto LABEL_76;
                    }
                  }
                }
                else
                {
                  unsigned int v51 = v101 + v43;
                  if (*(unsigned char *)(v50 + 2 * v43) == 1) {
                    goto LABEL_76;
                  }
                }
                unint64_t v53 = *v103;
                unint64_t v54 = HIDWORD(*v103);
                if (sub_A10E20(v6, HIDWORD(*v103)))
                {
                  unint64_t v55 = (int *)sub_A1120C(*(void *)(*v6 + 3944), v53);
                }
                else
                {
                  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                    && __cxa_guard_acquire(&qword_24F7308))
                  {
                    sub_518C8(0x3B60u, 0x7FCAu);
                    dword_24F7300 = v77 | 0x40000000;
                    __cxa_guard_release(&qword_24F7308);
                  }
                  uint64_t v56 = *v6;
                  if (dword_24F7300 == v54)
                  {
                    int v57 = sub_A10AD4(*(void *)(v56 + 3976));
                    int v58 = &v57[-*(int *)v57];
                    if (*(unsigned __int16 *)v58 >= 5u && (uint64_t v59 = *((unsigned __int16 *)v58 + 2)) != 0) {
                      unint64_t v60 = (unsigned int *)&v57[v59 + *(unsigned int *)&v57[v59]];
                    }
                    else {
                      unint64_t v60 = 0;
                    }
                    unint64_t v55 = (int *)sub_A1139C(v60, v53);
                  }
                  else
                  {
                    unint64_t v55 = (int *)sub_A11500(v56 + 24, v53, 0, "stop pattern");
                  }
                }
                long long v61 = (unsigned __int16 *)((char *)v55 - *v55);
                if (*v61 >= 9u && (uint64_t v62 = v61[4]) != 0) {
                  int v63 = (unsigned int *)((char *)v55 + v62 + *(unsigned int *)((char *)v55 + v62));
                }
                else {
                  int v63 = 0;
                }
                uint64_t v42 = v46;
                if ((*(unsigned char *)(sub_A10764(v63, v51) + 15) & 2) == 0) {
LABEL_76:
                }
                  *(v44 - 1) = 1;
                uint64_t v64 = *(v32 - 9);
                if (v64 == *(v32 - 8))
                {
                  uint64_t v65 = *(v32 - 12);
                  if (v65)
                  {
                    if (*(unsigned char *)(*(void *)(v65 + 40) + 20 * v43 + 17) == 1) {
                      goto LABEL_47;
                    }
                  }
                  else if (*(unsigned char *)(*(v32 - 13) + v45 + 1) == 1)
                  {
                    goto LABEL_47;
                  }
                }
                else if (*(unsigned char *)(v64 + 2 * v43 + 1) == 1)
                {
                  goto LABEL_47;
                }
                unint64_t v66 = *v103;
                unint64_t v67 = HIDWORD(*v103);
                if (sub_A10E20(v6, HIDWORD(*v103)))
                {
                  uint64_t v68 = (int *)sub_A1120C(*(void *)(*v6 + 3944), v66);
                }
                else
                {
                  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                    && __cxa_guard_acquire(&qword_24F7308))
                  {
                    sub_518C8(0x3B60u, 0x7FCAu);
                    dword_24F7300 = v78 | 0x40000000;
                    __cxa_guard_release(&qword_24F7308);
                  }
                  uint64_t v69 = *v6;
                  if (dword_24F7300 == v67)
                  {
                    uint64_t v70 = sub_A10AD4(*(void *)(v69 + 3976));
                    unint64_t v71 = &v70[-*(int *)v70];
                    if (*(unsigned __int16 *)v71 >= 5u && (uint64_t v72 = *((unsigned __int16 *)v71 + 2)) != 0) {
                      unint64_t v73 = (unsigned int *)&v70[v72 + *(unsigned int *)&v70[v72]];
                    }
                    else {
                      unint64_t v73 = 0;
                    }
                    uint64_t v68 = (int *)sub_A1139C(v73, v66);
                  }
                  else
                  {
                    uint64_t v68 = (int *)sub_A11500(v69 + 24, v66, 0, "stop pattern");
                  }
                }
                unint64_t v74 = (unsigned __int16 *)((char *)v68 - *v68);
                if (*v74 >= 9u && (uint64_t v75 = v74[4]) != 0) {
                  uint8x8_t v76 = (unsigned int *)((char *)v68 + v75 + *(unsigned int *)((char *)v68 + v75));
                }
                else {
                  uint8x8_t v76 = 0;
                }
                uint64_t v42 = v46;
                if ((*(unsigned char *)(sub_A10764(v76, v51) + 15) & 1) == 0) {
LABEL_47:
                }
                  *uint64_t v44 = 1;
                ++v43;
                v44 += 2;
                v45 += 24;
              }
              sub_BDDEDC(v32 - 9, v42, v100, (v100 - v42) >> 1);
              v101 += v43;
              if (v42) {
                operator delete(v42);
              }
              uint64_t v3 = v103;
              int v10 = v99 + 1;
              if (v99 + 1 == v98) {
                return;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    sub_A1DD94(v6, *v3, *((_DWORD *)v3 + 2), (uint64_t)v106);
    uint64_t v122 = 0;
    uint64_t v123 = 0;
    uint64_t v124 = 0;
    uint64_t v119 = 0;
    uint64_t v120 = 0;
    uint64_t v121 = 0;
    unint64_t v116 = 0;
    unint64_t v117 = 0;
    uint64_t v118 = 0;
    sub_BDD4A4((uint64_t *)(a1 + 4184), (uint64_t *)v106, &v122, (uint64_t *)&v119, &v116, (uint64_t)a3);
    unint64_t v79 = v116;
    if (v116)
    {
      uint64_t v80 = v117;
      int v81 = v116;
      if (v117 != v116)
      {
        unint64_t v82 = v117;
        do
        {
          uint8x8_t v84 = (void *)*((void *)v82 - 3);
          v82 -= 24;
          int8x8_t v83 = v84;
          if (v84)
          {
            *((void *)v80 - 2) = v83;
            operator delete(v83);
          }
          uint64_t v80 = v82;
        }
        while (v82 != v79);
        int v81 = v116;
      }
      unint64_t v117 = v79;
      operator delete(v81);
    }
    uint64_t v85 = v119;
    if (v119)
    {
      int v86 = v120;
      uint64_t v87 = v119;
      if (v120 != v119)
      {
        uint64_t v88 = v120;
        do
        {
          unint64_t v90 = (void *)*((void *)v88 - 3);
          v88 -= 24;
          uint64_t v89 = v90;
          if (v90)
          {
            *((void *)v86 - 2) = v89;
            operator delete(v89);
          }
          int v86 = v88;
        }
        while (v88 != v85);
        uint64_t v87 = v119;
      }
      uint64_t v120 = v85;
      operator delete(v87);
    }
    unint64_t v91 = v122;
    if (v122)
    {
      unint64_t v92 = v123;
      unint64_t v93 = v122;
      if (v123 != v122)
      {
        uint64_t v94 = v123;
        do
        {
          uint64_t v96 = (void *)*((void *)v94 - 3);
          v94 -= 24;
          uint64_t v95 = v96;
          if (v96)
          {
            *((void *)v92 - 2) = v95;
            operator delete(v95);
          }
          unint64_t v92 = v94;
        }
        while (v94 != v91);
        unint64_t v93 = v122;
      }
      uint64_t v123 = v91;
      operator delete(v93);
    }
    if (v106[0])
    {
      v106[1] = v106[0];
      operator delete(v106[0]);
    }
  }
}

void sub_C43DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  __cxa_guard_abort(&qword_24F7308);
  if (v22) {
    operator delete(v22);
  }
  sub_BDC510(a17);
  _Unwind_Resume(a1);
}

void sub_C43E9C()
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v15 = 0;
  long long v13 = 0u;
  *(_OWORD *)uint64_t v14 = 0u;
  *(_OWORD *)unint64_t v11 = 0u;
  *(_OWORD *)int v12 = 0u;
  char v10 = 0;
  LOBYTE(__p) = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v5 = 0;
  long long v6 = 0;
  sub_29DC44((uint64_t)v19, (long long **)&v16, (long long *)v11, &__p, &v7, 0, (uint64_t)&v5, 1);
  nullsub_1(13);
  sub_29E11C((uint64_t)v19);
  uint64_t v0 = v6;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
    std::__shared_weak_count::__release_weak(v0);
  }
  uint64_t v1 = v8;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_7:
      if ((SHIBYTE(v15) & 0x80000000) == 0) {
        goto LABEL_8;
      }
      goto LABEL_14;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete((void *)__p);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_8:
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(v14[0]);
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
LABEL_9:
    if ((SHIBYTE(v12[0]) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(v12[1]);
  if ((SHIBYTE(v12[0]) & 0x80000000) == 0)
  {
LABEL_10:
    uint64_t v2 = (void **)v16;
    if (!v16) {
      return;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(v11[0]);
  uint64_t v2 = (void **)v16;
  if (v16)
  {
LABEL_17:
    uint64_t v3 = v17;
    uint64_t v4 = v2;
    if (v17 == v2)
    {
LABEL_26:
      uint64_t v17 = v2;
      operator delete(v4);
      return;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 25) < 0) {
LABEL_24:
        }
          operator delete(*(v3 - 6));
      }
      else if (*((char *)v3 - 25) < 0)
      {
        goto LABEL_24;
      }
      v3 -= 6;
      if (v3 == v2)
      {
        uint64_t v4 = v16;
        goto LABEL_26;
      }
    }
  }
}

void sub_C440B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,char a32)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_29D7B0((uint64_t)&a20);
  sub_1A6DC(&a29);
  _Unwind_Resume(a1);
}

void sub_C440FC()
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v15 = 0;
  long long v13 = 0u;
  *(_OWORD *)uint64_t v14 = 0u;
  *(_OWORD *)unint64_t v11 = 0u;
  *(_OWORD *)int v12 = 0u;
  char v10 = 0;
  LOBYTE(__p) = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v5 = 0;
  long long v6 = 0;
  sub_29DC44((uint64_t)v19, (long long **)&v16, (long long *)v11, &__p, &v7, 0, (uint64_t)&v5, 1);
  nullsub_1(13);
  sub_29E11C((uint64_t)v19);
  uint64_t v0 = v6;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
    std::__shared_weak_count::__release_weak(v0);
  }
  uint64_t v1 = v8;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_7:
      if ((SHIBYTE(v15) & 0x80000000) == 0) {
        goto LABEL_8;
      }
      goto LABEL_14;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete((void *)__p);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_8:
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(v14[0]);
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
LABEL_9:
    if ((SHIBYTE(v12[0]) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(v12[1]);
  if ((SHIBYTE(v12[0]) & 0x80000000) == 0)
  {
LABEL_10:
    uint64_t v2 = (void **)v16;
    if (!v16) {
      return;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(v11[0]);
  uint64_t v2 = (void **)v16;
  if (v16)
  {
LABEL_17:
    uint64_t v3 = v17;
    uint64_t v4 = v2;
    if (v17 == v2)
    {
LABEL_26:
      uint64_t v17 = v2;
      operator delete(v4);
      return;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 25) < 0) {
LABEL_24:
        }
          operator delete(*(v3 - 6));
      }
      else if (*((char *)v3 - 25) < 0)
      {
        goto LABEL_24;
      }
      v3 -= 6;
      if (v3 == v2)
      {
        uint64_t v4 = v16;
        goto LABEL_26;
      }
    }
  }
}

void sub_C44310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,char a32)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_29D7B0((uint64_t)&a20);
  sub_1A6DC(&a29);
  _Unwind_Resume(a1);
}

void **sub_C4435C(uint64_t a1, void **a2, void **a3)
{
  if (a2 != a3)
  {
    uint64_t v5 = a3;
    long long v6 = *(void ***)(a1 + 8);
    if (a3 == v6)
    {
      uint64_t v8 = a2;
      if (a3 == a2)
      {
LABEL_22:
        *(void *)(a1 + 8) = v8;
        return a2;
      }
    }
    else
    {
      uint64_t v7 = a3 - a2;
      uint64_t v8 = a2;
      do
      {
        sub_BDE5B8(v8, (__n128 *)&v8[v7]);
        v8 += 3;
      }
      while (&v8[v7] != v6);
      uint64_t v5 = *(void ***)(a1 + 8);
      if (v5 == v8) {
        goto LABEL_22;
      }
    }
    uint64_t v9 = v5;
    do
    {
      int v12 = (char *)*(v9 - 3);
      v9 -= 3;
      unint64_t v11 = v12;
      if (v12)
      {
        long long v13 = (char *)*(v5 - 2);
        char v10 = v11;
        if (v13 != v11)
        {
          do
          {
            uint64_t v14 = (void *)*((void *)v13 - 3);
            if (v14)
            {
              *((void *)v13 - 2) = v14;
              operator delete(v14);
            }
            uint64_t v15 = (void *)*((void *)v13 - 6);
            if (v15)
            {
              *((void *)v13 - 5) = v15;
              operator delete(v15);
            }
            uint64_t v16 = (void *)*((void *)v13 - 9);
            if (v16)
            {
              *((void *)v13 - 8) = v16;
              operator delete(v16);
            }
            v13 -= 128;
          }
          while (v13 != v11);
          char v10 = *v9;
        }
        *(v5 - 2) = v11;
        operator delete(v10);
      }
      uint64_t v5 = v9;
    }
    while (v9 != v8);
    goto LABEL_22;
  }
  return a2;
}

uint64_t sub_C4448C(uint64_t a1, void *a2, unint64_t a3, unsigned int a4, char a5, char a6)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = a2;
  *(void *)(a1 + 56) = a1 + 8;
  char v10 = (void *)(a1 + 56);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = a1 + 56;
  *(unsigned char *)(a1 + 88) = a5;
  *(unsigned char *)(a1 + 89) = a6;
  unint64_t v11 = (int *)sub_C44808((uint64_t)(a2 + 3), a3, 1, "stop patterns of trip");
  if (!v11) {
    goto LABEL_10;
  }
  int v12 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v12 < 5u) {
    goto LABEL_10;
  }
  uint64_t v13 = v12[2];
  if (!v13) {
    goto LABEL_11;
  }
  uint64_t v14 = (unsigned int *)((char *)v11 + v13 + *(unsigned int *)((char *)v11 + v13));
  if (*v14 <= a4
    || (v15 = (int *)((char *)&v14[a4 + 1] + v14[a4 + 1]), uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15), *v16 < 5u))
  {
LABEL_10:
    uint64_t v13 = 0;
LABEL_11:
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = v13;
    if (*(unsigned char *)(a1 + 88)) {
      goto LABEL_28;
    }
    goto LABEL_12;
  }
  uint64_t v17 = v16[2];
  if (v17)
  {
    uint64_t v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
    int v19 = *v18;
    if (*v18)
    {
      long long v20 = v18 + 1;
      *(void *)(a1 + 8) = v20;
      *(void *)(a1 + 16) = &v20[3 * v19];
      if (*(unsigned char *)(a1 + 88)) {
        goto LABEL_28;
      }
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (*(unsigned char *)(a1 + 88)) {
    goto LABEL_28;
  }
LABEL_12:
  uint64_t v21 = a2[523];
  if (sub_C259C0(v21 + 3896))
  {
    if (*(void *)(v21 + 3944))
    {
      uint64_t v22 = *(void *)(a2[523] + 3944);
      unint64_t v51 = a3;
      if (sub_A1E760((void *)(v22 + 168), (uint64_t *)&v51))
      {
        uint64_t v23 = a2[493];
        unint64_t v51 = a3;
        int v24 = sub_A1E760((void *)(v23 + 168), (uint64_t *)&v51);
        if (!v24) {
          goto LABEL_50;
        }
        unsigned int v25 = (int *)(v24[7] + *(unsigned int *)v24[7]);
        uint64_t v26 = (unsigned __int16 *)((char *)v25 - *v25);
        if (*v26 < 5u) {
          goto LABEL_23;
        }
        long long v27 = (_DWORD *)v26[2];
        if (v27)
        {
          long long v28 = (_DWORD *)((char *)v27 + (void)v25 + *(unsigned int *)((char *)v27 + (void)v25));
          if (*v28 <= a4) {
            goto LABEL_23;
          }
          uint64_t v29 = (int *)((char *)&v28[a4 + 1] + v28[a4 + 1]);
          int v30 = (unsigned __int16 *)((char *)v29 - *v29);
          if (*v30 < 5u) {
            goto LABEL_23;
          }
          long long v27 = (_DWORD *)v30[2];
          if (v27)
          {
            char v31 = (_DWORD *)((char *)v27 + (void)v29 + *(unsigned int *)((char *)v27 + (void)v29));
            int v32 = *v31;
            if (*v31)
            {
              long long v27 = v31 + 1;
              uint64_t v33 = &v27[3 * v32];
LABEL_27:
              *(void *)(a1 + 24) = v27;
              *(void *)(a1 + 32) = v33;
              goto LABEL_28;
            }
LABEL_23:
            uint64_t v33 = 0;
            long long v27 = 0;
            goto LABEL_27;
          }
        }
        uint64_t v33 = 0;
        goto LABEL_27;
      }
    }
  }
LABEL_28:
  if (!*(unsigned char *)(a1 + 89))
  {
    uint64_t v34 = a2[523];
    if (sub_C259D4(v34 + 3896))
    {
      if (*(void *)(v34 + 3960))
      {
        uint64_t v35 = *(void *)(a2[523] + 3976);
        if (v35)
        {
          unint64_t v51 = a3;
          if (sub_A1E760((void *)(v35 + 168), (uint64_t *)&v51))
          {
            uint64_t v36 = a2[497];
            unint64_t v51 = a3;
            int v37 = sub_A1E760((void *)(v36 + 168), (uint64_t *)&v51);
            if (v37)
            {
              uint64_t v38 = (int *)(v37[7] + *(unsigned int *)v37[7]);
              long long v39 = (unsigned __int16 *)((char *)v38 - *v38);
              if (*v39 >= 5u)
              {
                uint64_t v40 = (_DWORD *)v39[2];
                if (!v40) {
                  goto LABEL_42;
                }
                uint64_t v41 = (_DWORD *)((char *)v40 + (void)v38 + *(unsigned int *)((char *)v40 + (void)v38));
                if (*v41 <= a4) {
                  goto LABEL_41;
                }
                uint64_t v42 = (int *)((char *)&v41[a4 + 1] + v41[a4 + 1]);
                unint64_t v43 = (unsigned __int16 *)((char *)v42 - *v42);
                if (*v43 < 5u) {
                  goto LABEL_41;
                }
                uint64_t v40 = (_DWORD *)v43[2];
                if (!v40)
                {
LABEL_42:
                  int v46 = 0;
                  goto LABEL_43;
                }
                uint64_t v44 = (_DWORD *)((char *)v40 + (void)v42 + *(unsigned int *)((char *)v40 + (void)v42));
                int v45 = *v44;
                if (*v44)
                {
                  uint64_t v40 = v44 + 1;
                  int v46 = &v40[3 * v45];
LABEL_43:
                  *(void *)(a1 + 40) = v40;
                  *(void *)(a1 + 48) = v46;
                  goto LABEL_44;
                }
              }
LABEL_41:
              int v46 = 0;
              uint64_t v40 = 0;
              goto LABEL_43;
            }
LABEL_50:
            sub_5AE8("unordered_map::at: key not found");
          }
        }
      }
    }
  }
LABEL_44:
  unint64_t v48 = *(void **)(a1 + 56);
  unint64_t v47 = *(void *)(a1 + 64);
  if ((unint64_t)v48 < v47)
  {
    while (1)
    {
      uint64_t v49 = v48[1];
      if (*v48 != v49) {
        break;
      }
      v48 += 2;
      *char v10 = v48;
      if ((unint64_t)v48 >= v47) {
        goto LABEL_49;
      }
    }
    *(void *)(a1 + 72) = *v48;
    *(void *)(a1 + 80) = v49;
  }
LABEL_49:
  sub_C0BA18(a1);
  return a1;
}

uint64_t sub_C44808(uint64_t a1, unint64_t a2, int a3, char *a4)
{
  unsigned int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  LODWORD(v63.__r_.__value_.__l.__data_) = HIDWORD(a2);
  LODWORD(v62.__r_.__value_.__l.__data_) = a3;
  *(void *)&long long v64 = &v62;
  *((void *)&v64 + 1) = &v63;
  unint64_t v9 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v9;
  uint64_t v10 = *(void *)a1;
  if (!v10) {
    goto LABEL_40;
  }
  uint64_t v11 = a1 + 16;
  if (*(_DWORD *)(a1 + 880) == HIDWORD(a2))
  {
    unsigned int v12 = 36;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 904) == HIDWORD(a2))
  {
    unsigned int v12 = 37;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 928) == HIDWORD(a2))
  {
    unsigned int v12 = 38;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 952) == HIDWORD(a2))
  {
    unsigned int v12 = 39;
LABEL_10:
    ++*(void *)(a1 + 3864);
    uint64_t v13 = v11 + 24 * v12;
    *(void *)(v13 + 8) = v9;
    uint64_t v14 = *(unsigned int **)(v13 + 16);
    if (v14) {
      goto LABEL_11;
    }
LABEL_40:
    sub_398390((int **)&v64);
    uint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
    return 0;
  }
  unint64_t v20 = *(void *)(a1 + 936);
  unint64_t v21 = *(void *)(a1 + 912);
  unint64_t v22 = *(void *)(a1 + 888);
  BOOL v23 = v22 >= v9;
  if (v22 < v9) {
    unint64_t v9 = *(void *)(a1 + 888);
  }
  int v24 = 36;
  if (v23) {
    int v24 = 0;
  }
  BOOL v25 = v21 >= v9;
  if (v21 < v9) {
    unint64_t v9 = *(void *)(a1 + 912);
  }
  int v26 = 37;
  if (v25) {
    int v26 = v24;
  }
  if (v20 >= v9) {
    unint64_t v27 = v9;
  }
  else {
    unint64_t v27 = *(void *)(a1 + 936);
  }
  unint64_t v28 = *(void *)(a1 + 960);
  if (v20 >= v9) {
    int v29 = v26;
  }
  else {
    int v29 = 38;
  }
  uint64_t v14 = (unsigned int *)sub_2AB884(v10, 9, HIDWORD(a2), 1);
  unsigned int v30 = 39;
  if (v28 >= v27) {
    unsigned int v30 = v29;
  }
  uint64_t v31 = v11 + 24 * v30;
  *(_DWORD *)uint64_t v31 = v63.__r_.__value_.__l.__data_;
  *(void *)(v31 + 8) = *(void *)(a1 + 3856);
  *(void *)(v31 + 16) = v14;
  if (!v14) {
    goto LABEL_40;
  }
LABEL_11:
  uint64_t v15 = (int *)((char *)v14 + *v14);
  uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 0x19u)
  {
    uint64_t v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v17 = v16[12];
    if (v17)
    {
      uint64_t v18 = (unsigned int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
      if (*v18 > v6) {
        return (uint64_t)&v18[v6 + 1] + v18[v6 + 1];
      }
    }
    else
    {
      uint64_t v18 = 0;
    }
    if (a3 != 1)
    {
LABEL_19:
      if (!a3)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
        uint64_t v33 = a4;
        uint64_t v34 = (uint64_t)exception;
        sub_5E5C(&v57, v33);
        uint64_t v35 = std::string::insert(&v57, 0, "Failed to acquire entity \"");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        int v37 = std::string::append(&v58, "\" in quad node ");
        long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v56, v8);
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v39 = &v56;
        }
        else {
          long long v39 = (std::string *)v56.__r_.__value_.__r.__words[0];
        }
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v56.__r_.__value_.__l.__size_;
        }
        uint64_t v41 = std::string::append(&v59, (const std::string::value_type *)v39, size);
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        unint64_t v43 = std::string::append(&v60, " at position ");
        long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v55, v6);
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v45 = &v55;
        }
        else {
          int v45 = (std::string *)v55.__r_.__value_.__r.__words[0];
        }
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v46 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v46 = v55.__r_.__value_.__l.__size_;
        }
        unint64_t v47 = std::string::append(&v61, (const std::string::value_type *)v45, v46);
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v62.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        uint64_t v49 = std::string::append(&v62, " on layer ");
        long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v63.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        unint64_t v51 = sub_736EC(9u);
        uint64_t v52 = std::string::append(&v63, v51);
        long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        std::string::size_type v65 = v52->__r_.__value_.__r.__words[2];
        long long v64 = v53;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        unint64_t v54 = (void *)sub_2F404(v34, &v64);
      }
      return (uint64_t)&v18[v6 + 1] + v18[v6 + 1];
    }
  }
  return 0;
}

void sub_C44BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 89) < 0) {
    operator delete(*(void **)(v54 - 112));
  }
  if (*(char *)(v54 - 121) < 0)
  {
    operator delete(*(void **)(v54 - 144));
    if ((*(char *)(v54 - 153) & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  else if ((*(char *)(v54 - 153) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v54 - 176));
  if ((a15 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a10);
  if ((a54 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a42);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a16);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_12;
  }
LABEL_20:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
LABEL_21:
  }
    _Unwind_Resume(a1);
LABEL_12:
  operator delete(__p);
  goto LABEL_21;
}

uint64_t sub_C44D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      unint64_t v8 = (void *)(a4 + v7);
      uint64_t v9 = a2 + v7;
      *unint64_t v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
      sub_BDC5A4(a4 + v7, *(void *)(a2 + v7), *(void *)(a2 + v7 + 8), (uint64_t)(*(void *)(a2 + v7 + 8) - *(void *)(a2 + v7)) >> 7);
      v7 += 24;
    }
    while (v9 + 24 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_C44DDC(_Unwind_Exception *exception_object)
{
  if (v2) {
    sub_20AEBBC((void **)((char *)v1 + v2), v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_C44DF8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_B6C0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (unint64_t i = *(void **)(a2 + 16); i; unint64_t i = (void *)*i)
    sub_C44F3C(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_C44F14(_Unwind_Exception *a1)
{
  sub_591F30(v1);
  _Unwind_Resume(a1);
}

void sub_C44F28(_Unwind_Exception *a1)
{
  sub_591F30(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_C44F3C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v7 = (((0xC4CEB9FE1A85EC53 * (v6 ^ (v6 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v6 ^ (v6 >> 33))) >> 33))
      + 0x388152A534) ^ 0xDEADBEEF;
  uint64_t v8 = *((unsigned int *)a2 + 2);
  unint64_t v9 = (v8 + (v7 << 6) + (v7 >> 2) + 2654435769u) ^ v7;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      uint64_t v3 = (v8 + (v7 << 6) + (v7 >> 2) + 2654435769u) ^ v7;
      if (v9 >= v10) {
        uint64_t v3 = v9 % v10;
      }
    }
    else
    {
      uint64_t v3 = v9 & (v10 - 1);
    }
    unsigned int v12 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t result = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = result[1];
            if (v16 == v9)
            {
              BOOL v17 = *((_DWORD *)result + 5) == HIDWORD(v5) && *((_DWORD *)result + 4) == v5;
              if (v17 && *((_DWORD *)result + 6) == v8) {
                return result;
              }
            }
            else if ((v16 & (v10 - 1)) != v3)
            {
              goto LABEL_33;
            }
            uint64_t result = (uint64_t *)*result;
            if (!result) {
              goto LABEL_33;
            }
          }
        }
        do
        {
          unint64_t v14 = result[1];
          if (v14 == v9)
          {
            BOOL v15 = *((_DWORD *)result + 5) == HIDWORD(v5) && *((_DWORD *)result + 4) == v5;
            if (v15 && *((_DWORD *)result + 6) == v8) {
              return result;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t result = (uint64_t *)*result;
        }
        while (result);
      }
    }
  }
LABEL_33:
  sub_C452F8(a1, v9, a3, (uint64_t)v31);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    BOOL v21 = 1;
    if (v10 >= 3) {
      BOOL v21 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v10);
    unint64_t v23 = vcvtps_u32_f32(v18 / v19);
    if (v22 <= v23) {
      size_t prime = v23;
    }
    else {
      size_t prime = v22;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v25 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v25) {
      goto LABEL_47;
    }
    if (prime < *(void *)&v25)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v25 < 3uLL || (uint8x8_t v27 = (uint8x8_t)vcnt_s8(v25), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime < *(void *)&v25) {
LABEL_47:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        uint64_t v3 = v9 % v10;
        unint64_t v20 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v20) {
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v3 = v9;
        unint64_t v20 = *(void **)(*(void *)a1 + 8 * v9);
        if (v20) {
          goto LABEL_36;
        }
      }
    }
    else
    {
      uint64_t v3 = v29 & v9;
      unint64_t v20 = *(void **)(*(void *)a1 + 8 * (v29 & v9));
      if (v20) {
        goto LABEL_36;
      }
    }
LABEL_60:
    *(void *)v31[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v31[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v31[0])
    {
      unint64_t v30 = *(void *)(*(void *)v31[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v30 >= v10) {
          v30 %= v10;
        }
      }
      else
      {
        v30 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v30) = v31[0];
    }
    goto LABEL_71;
  }
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (!v20) {
    goto LABEL_60;
  }
LABEL_36:
  *(void *)v31[0] = *v20;
  *unint64_t v20 = v31[0];
LABEL_71:
  uint64_t result = (uint64_t *)v31[0];
  ++*(void *)(a1 + 24);
  return result;
}

void sub_C452E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_59B5F8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_C452F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t result = operator new(0x38uLL);
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t result = 0;
  result[1] = a2;
  result[2] = *(void *)a3;
  int v9 = *(_DWORD *)(a3 + 8);
  result[4] = 0;
  *((_DWORD *)result + 6) = v9;
  result[5] = 0;
  result[6] = 0;
  uint8x8_t v11 = *(unsigned char **)(a3 + 16);
  unint64_t v10 = *(unsigned char **)(a3 + 24);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    uint64_t v13 = result;
    if (0xAAAAAAAAAAAAAAABLL * (v12 >> 2) >= 0x1555555555555556) {
      sub_2E00();
    }
    unint64_t v14 = (char *)operator new(v12);
    v13[4] = v14;
    v13[5] = v14;
    BOOL v15 = &v14[4 * (v12 >> 2)];
    v13[6] = v15;
    uint64_t result = memcpy(v14, v11, v12);
    v13[5] = v15;
  }
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_C453D4(_Unwind_Exception *a1)
{
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 40) = v5;
    operator delete(v5);
  }
  sub_59B5F8(v1);
  _Unwind_Resume(a1);
}

void sub_C453F8(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v4 = *(void **)(a1 + 16);
    if (v4)
    {
      do
      {
        uint64_t v16 = (void *)*v4;
        BOOL v17 = (void *)v4[4];
        if (v17)
        {
          long long v4[5] = v17;
          operator delete(v17);
        }
        operator delete(v4);
        uint64_t v4 = v16;
      }
      while (v16);
    }
    *(void *)(a1 + 16) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v7 = *a2;
  *a2 = 0;
  uint64_t v8 = *(void **)a1;
  *(void *)a1 = v7;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v11 = a2[2];
  unint64_t v10 = a2 + 2;
  uint64_t v9 = v11;
  uint64_t v12 = *(v10 - 1);
  *(void *)(a1 + 16) = v11;
  *(void *)(a1 + 8) = v12;
  *(v10 - 1) = 0;
  uint64_t v13 = v10[1];
  *(void *)(a1 + 24) = v13;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v10 + 4);
  if (v13)
  {
    unint64_t v14 = *(void *)(v9 + 8);
    unint64_t v15 = *(void *)(a1 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15) {
        v14 %= v15;
      }
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v14) = a1 + 16;
    *unint64_t v10 = 0;
    v10[1] = 0;
  }
}

void sub_C45500(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243EC20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_C45520(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243EC20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_C45574(uint64_t a1)
{
  return sub_C457D8(a1 + 24);
}

uint64_t sub_C45580(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v7 = *a2;
  *a2 = 0;
  *(void *)uint64_t result = v7;
  *(void *)(result + 8) = a2[1];
  a2[1] = 0;
  uint64_t v10 = a2[2];
  uint64_t v8 = a2 + 2;
  uint64_t v9 = v10;
  *(void *)(result + 16) = v10;
  uint64_t v11 = v8[1];
  *(void *)(result + 24) = v11;
  *(_DWORD *)(result + 32) = *((_DWORD *)v8 + 4);
  if (v11)
  {
    unint64_t v12 = *(void *)(v9 + 8);
    unint64_t v13 = *(void *)(result + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13) {
        v12 %= v13;
      }
    }
    else
    {
      v12 &= v13 - 1;
    }
    *(void *)(v7 + 8 * v12) = result + 16;
    *uint64_t v8 = 0;
    v8[1] = 0;
  }
  *(void *)(result + 40) = *(void *)a3;
  *(unsigned char *)(result + 48) = *(unsigned char *)(a3 + 8);
  *(void *)(result + 56) = *(void *)(a3 + 16);
  *(_OWORD *)(result + 64) = *(_OWORD *)(a3 + 24);
  *(void *)(result + 80) = *(void *)(a3 + 40);
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 8) = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  uint64_t v14 = *a4;
  *a4 = 0;
  *(void *)(result + 88) = v14;
  *(void *)(result + 96) = a4[1];
  a4[1] = 0;
  uint64_t v17 = a4[2];
  unint64_t v15 = a4 + 2;
  uint64_t v16 = v17;
  *(void *)(result + 104) = v17;
  uint64_t v18 = v15[1];
  *(void *)(result + 112) = v18;
  *(_DWORD *)(result + 120) = *((_DWORD *)v15 + 4);
  if (v18)
  {
    unint64_t v19 = *(void *)(v16 + 8);
    unint64_t v20 = *(void *)(result + 96);
    if ((v20 & (v20 - 1)) != 0)
    {
      if (v19 >= v20) {
        v19 %= v20;
      }
    }
    else
    {
      v19 &= v20 - 1;
    }
    *(void *)(v14 + 8 * v19) = result + 104;
    void *v15 = 0;
    v15[1] = 0;
  }
  uint64_t v21 = *a5;
  *a5 = 0;
  *(void *)(result + 128) = v21;
  *(void *)(result + 136) = a5[1];
  a5[1] = 0;
  uint64_t v24 = a5[2];
  unint64_t v22 = a5 + 2;
  uint64_t v23 = v24;
  *(void *)(result + 144) = v24;
  uint64_t v25 = v22[1];
  *(void *)(result + 152) = v25;
  *(_DWORD *)(result + 160) = *((_DWORD *)v22 + 4);
  if (v25)
  {
    unint64_t v26 = *(void *)(v23 + 8);
    unint64_t v27 = *(void *)(result + 136);
    if ((v27 & (v27 - 1)) != 0)
    {
      if (v26 >= v27) {
        v26 %= v27;
      }
    }
    else
    {
      v26 &= v27 - 1;
    }
    *(void *)(v21 + 8 * v26) = result + 144;
    *unint64_t v22 = 0;
    v22[1] = 0;
  }
  uint64_t v28 = *a6;
  *a6 = 0;
  *(void *)(result + 168) = v28;
  *(void *)(result + 176) = a6[1];
  a6[1] = 0;
  uint64_t v31 = a6[2];
  unint64_t v29 = a6 + 2;
  uint64_t v30 = v31;
  *(void *)(result + 184) = v31;
  uint64_t v32 = v29[1];
  *(void *)(result + 192) = v32;
  *(_DWORD *)(result + 200) = *((_DWORD *)v29 + 4);
  if (v32)
  {
    unint64_t v33 = *(void *)(v30 + 8);
    unint64_t v34 = *(void *)(result + 176);
    if ((v34 & (v34 - 1)) != 0)
    {
      if (v33 >= v34) {
        v33 %= v34;
      }
    }
    else
    {
      v33 &= v34 - 1;
    }
    *(void *)(v28 + 8 * v33) = result + 184;
    *unint64_t v29 = 0;
    v29[1] = 0;
  }
  uint64_t v35 = *a7;
  *a7 = 0;
  *(void *)(result + 208) = v35;
  *(void *)(result + 216) = a7[1];
  a7[1] = 0;
  uint64_t v38 = a7[2];
  long long v36 = a7 + 2;
  uint64_t v37 = v38;
  *(void *)(result + 224) = v38;
  uint64_t v39 = v36[1];
  *(void *)(result + 232) = v39;
  *(_DWORD *)(result + 240) = *((_DWORD *)v36 + 4);
  if (v39)
  {
    unint64_t v40 = *(void *)(v37 + 8);
    unint64_t v41 = *(void *)(result + 216);
    if ((v41 & (v41 - 1)) != 0)
    {
      if (v40 >= v41) {
        v40 %= v41;
      }
    }
    else
    {
      v40 &= v41 - 1;
    }
    *(void *)(v35 + 8 * v40) = result + 224;
    *long long v36 = 0;
    v36[1] = 0;
  }
  return result;
}

uint64_t sub_C457D8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 224);
  if (v2)
  {
    do
    {
      unint64_t v12 = (void *)*v2;
      unint64_t v13 = (void *)v2[4];
      if (v13)
      {
        v2[5] = v13;
        operator delete(v13);
      }
      operator delete(v2);
      uint64_t v2 = v12;
    }
    while (v12);
  }
  uint64_t v3 = *(void **)(a1 + 208);
  *(void *)(a1 + 208) = 0;
  if (v3) {
    operator delete(v3);
  }
  sub_C37FD8(a1 + 168, *(void **)(a1 + 184));
  uint64_t v4 = *(void **)(a1 + 168);
  *(void *)(a1 + 168) = 0;
  if (v4) {
    operator delete(v4);
  }
  sub_C37FD8(a1 + 128, *(void **)(a1 + 144));
  uint64_t v5 = *(void **)(a1 + 128);
  *(void *)(a1 + 128) = 0;
  if (v5) {
    operator delete(v5);
  }
  sub_C37FD8(a1 + 88, *(void **)(a1 + 104));
  unint64_t v6 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v6) {
    operator delete(v6);
  }
  if (*(void *)(a1 + 56))
  {
    uint64_t v7 = *(void *)(a1 + 40);
    if (!v7) {
      operator delete[]();
    }
    (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
  }
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v8 = *(void *)(a1 + 40);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  uint64_t v9 = *(void **)(a1 + 16);
  if (v9)
  {
    do
    {
      uint64_t v14 = (void *)*v9;
      unint64_t v15 = (void *)v9[4];
      if (v15)
      {
        v9[5] = v15;
        operator delete(v15);
      }
      operator delete(v9);
      uint64_t v9 = v14;
    }
    while (v14);
  }
  uint64_t v10 = *(void **)a1;
  *(void *)a1 = 0;
  if (v10) {
    operator delete(v10);
  }
  return a1;
}

void *sub_C459A8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v9 = (((0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) >> 33))
      + 0x388152A534) ^ 0xDEADBEEF;
  uint64_t v10 = *((unsigned int *)a2 + 2);
  unint64_t v11 = (v10 + (v9 << 6) + (v9 >> 2) + 2654435769u) ^ v9;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      uint64_t v4 = (v10 + (v9 << 6) + (v9 >> 2) + 2654435769u) ^ v9;
      if (v11 >= v12) {
        uint64_t v4 = v11 % v12;
      }
    }
    else
    {
      uint64_t v4 = v11 & (v12 - 1);
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      unint64_t v15 = *v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v18 = v15[1];
            if (v18 == v11)
            {
              BOOL v19 = *((_DWORD *)v15 + 5) == HIDWORD(v7) && *((_DWORD *)v15 + 4) == v7;
              if (v19 && *((_DWORD *)v15 + 6) == v10) {
                return v15;
              }
            }
            else if ((v18 & (v12 - 1)) != v4)
            {
              goto LABEL_33;
            }
            unint64_t v15 = (void *)*v15;
            if (!v15) {
              goto LABEL_33;
            }
          }
        }
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v11)
          {
            BOOL v17 = *((_DWORD *)v15 + 5) == HIDWORD(v7) && *((_DWORD *)v15 + 4) == v7;
            if (v17 && *((_DWORD *)v15 + 6) == v10) {
              return v15;
            }
          }
          else
          {
            if (v16 >= v12) {
              v16 %= v12;
            }
            if (v16 != v4) {
              break;
            }
          }
          unint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_33:
  unint64_t v20 = (void *)(a1 + 16);
  unint64_t v15 = operator new(0x38uLL);
  void *v15 = 0;
  v15[1] = v11;
  uint64_t v21 = **a4;
  *((_DWORD *)v15 + 6) = *((_DWORD *)*a4 + 2);
  v15[2] = v21;
  v15[5] = 0;
  v15[6] = 0;
  v15[4] = 0;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (v12 && (float)(v23 * (float)v12) >= v22)
  {
    uint64_t v24 = *(void *)a1;
    uint64_t v25 = *(void **)(*(void *)a1 + 8 * v4);
    if (v25)
    {
LABEL_36:
      void *v15 = *v25;
LABEL_71:
      *uint64_t v25 = v15;
      goto LABEL_72;
    }
  }
  else
  {
    BOOL v26 = 1;
    if (v12 >= 3) {
      BOOL v26 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v27 = v26 | (2 * v12);
    unint64_t v28 = vcvtps_u32_f32(v22 / v23);
    if (v27 <= v28) {
      size_t prime = v28;
    }
    else {
      size_t prime = v27;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v12 = *(void *)(a1 + 8);
    }
    if (prime > v12) {
      goto LABEL_47;
    }
    if (prime < v12)
    {
      unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v12 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (prime <= v30) {
        size_t prime = v30;
      }
      if (prime < v12) {
LABEL_47:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v33 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        uint64_t v4 = v11 % v12;
        uint64_t v24 = *(void *)a1;
        uint64_t v25 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        if (v25) {
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v4 = v11;
        uint64_t v24 = *(void *)a1;
        uint64_t v25 = *(void **)(*(void *)a1 + 8 * v11);
        if (v25) {
          goto LABEL_36;
        }
      }
    }
    else
    {
      uint64_t v4 = v33 & v11;
      uint64_t v24 = *(void *)a1;
      uint64_t v25 = *(void **)(*(void *)a1 + 8 * (v33 & v11));
      if (v25) {
        goto LABEL_36;
      }
    }
  }
  void *v15 = *v20;
  *unint64_t v20 = v15;
  *(void *)(v24 + 8 * v4) = v20;
  if (*v15)
  {
    unint64_t v34 = *(void *)(*v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v34 >= v12) {
        v34 %= v12;
      }
    }
    else
    {
      v34 &= v12 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_71;
  }
LABEL_72:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_C45D64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_59B5F8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_C45D78(void ***a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * (a1[2] - *a1) > v4) {
    unint64_t v4 = 0x5555555555555556 * (a1[2] - *a1);
  }
  if (0xAAAAAAAAAAAAAAABLL * (a1[2] - *a1) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v8 = &v7[24 * v3];
  unint64_t v9 = &v7[24 * v6];
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v10 = v8 + 24;
  unint64_t v11 = *a1;
  unint64_t v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = (void **)v8;
    a1[1] = (void **)v10;
    a1[2] = (void **)v9;
    if (!v12) {
      return v10;
    }
    goto LABEL_30;
  }
  do
  {
    uint8x8_t v13 = v8;
    *((void *)v8 - 2) = 0;
    *((void *)v8 - 1) = 0;
    long long v14 = *(_OWORD *)(v12 - 3);
    v12 -= 3;
    *(_OWORD *)(v8 - 24) = v14;
    v8 -= 24;
    *((void *)v13 - 1) = v12[2];
    *unint64_t v12 = 0;
    v12[1] = 0;
    v12[2] = 0;
  }
  while (v12 != v11);
  unint64_t v15 = *a1;
  unint64_t v12 = a1[1];
  *a1 = (void **)v8;
  a1[1] = (void **)v10;
  a1[2] = (void **)v9;
  if (v12 != v15)
  {
    unint64_t v16 = v12;
    do
    {
      BOOL v19 = (char *)*(v16 - 3);
      v16 -= 3;
      uint64_t v18 = v19;
      if (v19)
      {
        unint64_t v20 = (char *)*(v12 - 2);
        BOOL v17 = v18;
        if (v20 != v18)
        {
          do
          {
            uint64_t v21 = (void *)*((void *)v20 - 3);
            if (v21)
            {
              *((void *)v20 - 2) = v21;
              operator delete(v21);
            }
            float v22 = (void *)*((void *)v20 - 6);
            if (v22)
            {
              *((void *)v20 - 5) = v22;
              operator delete(v22);
            }
            float v23 = (void *)*((void *)v20 - 9);
            if (v23)
            {
              *((void *)v20 - 8) = v23;
              operator delete(v23);
            }
            v20 -= 128;
          }
          while (v20 != v18);
          BOOL v17 = *v16;
        }
        *(v12 - 2) = v18;
        operator delete(v17);
      }
      unint64_t v12 = v16;
    }
    while (v16 != v15);
    unint64_t v12 = v15;
  }
  if (v12) {
LABEL_30:
  }
    operator delete(v12);
  return v10;
}

void *sub_C45F40(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v9 = (((0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) >> 33))
      + 0x388152A534) ^ 0xDEADBEEF;
  uint64_t v10 = *((unsigned int *)a2 + 2);
  unint64_t v11 = (v10 + (v9 << 6) + (v9 >> 2) + 2654435769u) ^ v9;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      uint64_t v4 = (v10 + (v9 << 6) + (v9 >> 2) + 2654435769u) ^ v9;
      if (v11 >= v12) {
        uint64_t v4 = v11 % v12;
      }
    }
    else
    {
      uint64_t v4 = v11 & (v12 - 1);
    }
    long long v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      unint64_t v15 = *v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v18 = v15[1];
            if (v18 == v11)
            {
              BOOL v19 = *((_DWORD *)v15 + 5) == HIDWORD(v7) && *((_DWORD *)v15 + 4) == v7;
              if (v19 && *((_DWORD *)v15 + 6) == v10) {
                return v15;
              }
            }
            else if ((v18 & (v12 - 1)) != v4)
            {
              goto LABEL_33;
            }
            unint64_t v15 = (void *)*v15;
            if (!v15) {
              goto LABEL_33;
            }
          }
        }
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v11)
          {
            BOOL v17 = *((_DWORD *)v15 + 5) == HIDWORD(v7) && *((_DWORD *)v15 + 4) == v7;
            if (v17 && *((_DWORD *)v15 + 6) == v10) {
              return v15;
            }
          }
          else
          {
            if (v16 >= v12) {
              v16 %= v12;
            }
            if (v16 != v4) {
              break;
            }
          }
          unint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_33:
  unint64_t v20 = (void *)(a1 + 16);
  unint64_t v15 = operator new(0x38uLL);
  void *v15 = 0;
  v15[1] = v11;
  uint64_t v21 = **a4;
  *((_DWORD *)v15 + 6) = *((_DWORD *)*a4 + 2);
  v15[2] = v21;
  v15[5] = 0;
  v15[6] = 0;
  v15[4] = 0;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (v12 && (float)(v23 * (float)v12) >= v22)
  {
    uint64_t v24 = *(void *)a1;
    uint64_t v25 = *(void **)(*(void *)a1 + 8 * v4);
    if (v25)
    {
LABEL_36:
      void *v15 = *v25;
LABEL_71:
      *uint64_t v25 = v15;
      goto LABEL_72;
    }
  }
  else
  {
    BOOL v26 = 1;
    if (v12 >= 3) {
      BOOL v26 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v27 = v26 | (2 * v12);
    unint64_t v28 = vcvtps_u32_f32(v22 / v23);
    if (v27 <= v28) {
      size_t prime = v28;
    }
    else {
      size_t prime = v27;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v12 = *(void *)(a1 + 8);
    }
    if (prime > v12) {
      goto LABEL_47;
    }
    if (prime < v12)
    {
      unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v12 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (prime <= v30) {
        size_t prime = v30;
      }
      if (prime < v12) {
LABEL_47:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v33 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        uint64_t v4 = v11 % v12;
        uint64_t v24 = *(void *)a1;
        uint64_t v25 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        if (v25) {
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v4 = v11;
        uint64_t v24 = *(void *)a1;
        uint64_t v25 = *(void **)(*(void *)a1 + 8 * v11);
        if (v25) {
          goto LABEL_36;
        }
      }
    }
    else
    {
      uint64_t v4 = v33 & v11;
      uint64_t v24 = *(void *)a1;
      uint64_t v25 = *(void **)(*(void *)a1 + 8 * (v33 & v11));
      if (v25) {
        goto LABEL_36;
      }
    }
  }
  void *v15 = *v20;
  *unint64_t v20 = v15;
  *(void *)(v24 + 8 * v4) = v20;
  if (*v15)
  {
    unint64_t v34 = *(void *)(*v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v34 >= v12) {
        v34 %= v12;
      }
    }
    else
    {
      v34 &= v12 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_71;
  }
LABEL_72:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_C462FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_59B5F8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_C46310(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v8 = (((0xC4CEB9FE1A85EC53 * (v7 ^ (v7 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v7 ^ (v7 >> 33))) >> 33))
      + 0x388152A534) ^ 0xDEADBEEF;
  uint64_t v9 = *((unsigned int *)a2 + 2);
  unint64_t v10 = (v9 + (v8 << 6) + (v8 >> 2) + 2654435769u) ^ v8;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      uint64_t v3 = (v9 + (v8 << 6) + (v8 >> 2) + 2654435769u) ^ v8;
      if (v10 >= v11) {
        uint64_t v3 = v10 % v11;
      }
    }
    else
    {
      uint64_t v3 = v10 & (v11 - 1);
    }
    uint8x8_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      long long v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v14[1];
            if (v17 == v10)
            {
              BOOL v18 = *((_DWORD *)v14 + 5) == HIDWORD(v6) && *((_DWORD *)v14 + 4) == v6;
              if (v18 && *((_DWORD *)v14 + 6) == v9) {
                return v14;
              }
            }
            else if ((v17 & (v11 - 1)) != v3)
            {
              goto LABEL_33;
            }
            long long v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_33;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            BOOL v16 = *((_DWORD *)v14 + 5) == HIDWORD(v6) && *((_DWORD *)v14 + 4) == v6;
            if (v16 && *((_DWORD *)v14 + 6) == v9) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v3) {
              break;
            }
          }
          long long v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_33:
  unint64_t v20 = operator new(0x20uLL);
  *unint64_t v20 = 0;
  v20[1] = v10;
  v20[2] = *(void *)a3;
  *((_DWORD *)v20 + 6) = *(_DWORD *)(a3 + 8);
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (v11 && (float)(v22 * (float)v11) >= v21)
  {
    uint64_t v23 = *(void *)a1;
    uint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
    if (v24)
    {
LABEL_36:
      *unint64_t v20 = *v24;
LABEL_71:
      *uint64_t v24 = v20;
      goto LABEL_72;
    }
  }
  else
  {
    BOOL v25 = 1;
    if (v11 >= 3) {
      BOOL v25 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v11);
    unint64_t v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_47;
    }
    if (prime < v11)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < v11) {
LABEL_47:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v32 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        uint64_t v3 = v10 % v11;
        uint64_t v23 = *(void *)a1;
        uint64_t v24 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v24) {
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v3 = v10;
        uint64_t v23 = *(void *)a1;
        uint64_t v24 = *(void **)(*(void *)a1 + 8 * v10);
        if (v24) {
          goto LABEL_36;
        }
      }
    }
    else
    {
      uint64_t v3 = v32 & v10;
      uint64_t v23 = *(void *)a1;
      uint64_t v24 = *(void **)(*(void *)a1 + 8 * (v32 & v10));
      if (v24) {
        goto LABEL_36;
      }
    }
  }
  *unint64_t v20 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v20;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*v20)
  {
    unint64_t v33 = *(void *)(*v20 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v33 >= v11) {
        v33 %= v11;
      }
    }
    else
    {
      v33 &= v11 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_71;
  }
LABEL_72:
  ++*(void *)(a1 + 24);
  return v20;
}

void sub_C466B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_C466CC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v8 = (((0xC4CEB9FE1A85EC53 * (v7 ^ (v7 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v7 ^ (v7 >> 33))) >> 33))
      + 0x388152A534) ^ 0xDEADBEEF;
  uint64_t v9 = *((unsigned int *)a2 + 2);
  unint64_t v10 = (v9 + (v8 << 6) + (v8 >> 2) + 2654435769u) ^ v8;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      uint64_t v3 = (v9 + (v8 << 6) + (v8 >> 2) + 2654435769u) ^ v8;
      if (v10 >= v11) {
        uint64_t v3 = v10 % v11;
      }
    }
    else
    {
      uint64_t v3 = v10 & (v11 - 1);
    }
    uint8x8_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      long long v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v14[1];
            if (v17 == v10)
            {
              BOOL v18 = *((_DWORD *)v14 + 5) == HIDWORD(v6) && *((_DWORD *)v14 + 4) == v6;
              if (v18 && *((_DWORD *)v14 + 6) == v9) {
                return v14;
              }
            }
            else if ((v17 & (v11 - 1)) != v3)
            {
              goto LABEL_33;
            }
            long long v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_33;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            BOOL v16 = *((_DWORD *)v14 + 5) == HIDWORD(v6) && *((_DWORD *)v14 + 4) == v6;
            if (v16 && *((_DWORD *)v14 + 6) == v9) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v3) {
              break;
            }
          }
          long long v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_33:
  unint64_t v20 = operator new(0x20uLL);
  *unint64_t v20 = 0;
  v20[1] = v10;
  v20[2] = *(void *)a3;
  *((_DWORD *)v20 + 6) = *(_DWORD *)(a3 + 8);
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (v11 && (float)(v22 * (float)v11) >= v21)
  {
    uint64_t v23 = *(void *)a1;
    uint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
    if (v24)
    {
LABEL_36:
      *unint64_t v20 = *v24;
LABEL_71:
      *uint64_t v24 = v20;
      goto LABEL_72;
    }
  }
  else
  {
    BOOL v25 = 1;
    if (v11 >= 3) {
      BOOL v25 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v11);
    unint64_t v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_47;
    }
    if (prime < v11)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < v11) {
LABEL_47:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v32 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        uint64_t v3 = v10 % v11;
        uint64_t v23 = *(void *)a1;
        uint64_t v24 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v24) {
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v3 = v10;
        uint64_t v23 = *(void *)a1;
        uint64_t v24 = *(void **)(*(void *)a1 + 8 * v10);
        if (v24) {
          goto LABEL_36;
        }
      }
    }
    else
    {
      uint64_t v3 = v32 & v10;
      uint64_t v23 = *(void *)a1;
      uint64_t v24 = *(void **)(*(void *)a1 + 8 * (v32 & v10));
      if (v24) {
        goto LABEL_36;
      }
    }
  }
  *unint64_t v20 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v20;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*v20)
  {
    unint64_t v33 = *(void *)(*v20 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v33 >= v11) {
        v33 %= v11;
      }
    }
    else
    {
      v33 &= v11 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_71;
  }
LABEL_72:
  ++*(void *)(a1 + 24);
  return v20;
}

void sub_C46A74(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_C46A88(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v9 = (0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) >> 33);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = (0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) >> 33);
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint8x8_t v12 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      uint8x8_t v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v13[1];
            if (v16 == v9)
            {
              if (*((_DWORD *)v13 + 5) == HIDWORD(v7) && *((_DWORD *)v13 + 4) == v7) {
                return v13;
              }
            }
            else if ((v16 & (v10 - 1)) != v4)
            {
              goto LABEL_31;
            }
            uint8x8_t v13 = (uint64_t *)*v13;
            if (!v13) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 5) == HIDWORD(v7) && *((_DWORD *)v13 + 4) == v7) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v4) {
              break;
            }
          }
          uint8x8_t v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  BOOL v19 = operator new(0x20uLL);
  void *v19 = 0;
  v19[1] = v9;
  v19[2] = **a4;
  v19[3] = -1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
    if (v23)
    {
LABEL_34:
      void *v19 = *v23;
LABEL_69:
      *uint64_t v23 = v19;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v10 >= 3) {
      BOOL v24 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v10);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_45;
    }
    if (prime < v10)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v10) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v31 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v4 = v9 % v10;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v23) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v9;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * v9);
        if (v23) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v31 & v9;
      uint64_t v22 = *(void *)a1;
      uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v31 & v9));
      if (v23) {
        goto LABEL_34;
      }
    }
  }
  void *v19 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v19;
  *(void *)(v22 + 8 * v4) = a1 + 16;
  if (*v19)
  {
    unint64_t v32 = *(void *)(*v19 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v32 >= v10) {
        v32 %= v10;
      }
    }
    else
    {
      v32 &= v10 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v19;
}

void sub_C46DE4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_C46DF8(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v8 = *a2;
  unint64_t v9 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v10 = (0xC4CEB9FE1A85EC53 * (v9 ^ (v9 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v9 ^ (v9 >> 33))) >> 33);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = (0xC4CEB9FE1A85EC53 * (v9 ^ (v9 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v9 ^ (v9 >> 33))) >> 33);
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    uint8x8_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      unint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v14[1];
            if (v17 == v10)
            {
              if (*((_DWORD *)v14 + 5) == HIDWORD(v8) && *((_DWORD *)v14 + 4) == v8) {
                return v14;
              }
            }
            else if ((v17 & (v11 - 1)) != v4)
            {
              goto LABEL_31;
            }
            unint64_t v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (*((_DWORD *)v14 + 5) == HIDWORD(v8) && *((_DWORD *)v14 + 4) == v8) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          unint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_31:
  BOOL v19 = (void *)(a1 + 16);
  unint64_t v14 = operator new(0x40uLL);
  void *v14 = 0;
  v14[1] = v10;
  v14[2] = *a3;
  *((_DWORD *)v14 + 6) = *(_DWORD *)a4;
  *((_OWORD *)v14 + 2) = *(_OWORD *)(a4 + 8);
  v14[6] = *(void *)(a4 + 24);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  *((_DWORD *)v14 + 14) = *(_DWORD *)(a4 + 32);
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v11 && (float)(v21 * (float)v11) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
    if (v23)
    {
LABEL_34:
      void *v14 = *v23;
LABEL_69:
      *uint64_t v23 = v14;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v28 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v28) {
      goto LABEL_45;
    }
    if (prime < *(void *)&v28)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v28 < 3uLL || (uint8x8_t v30 = (uint8x8_t)vcnt_s8(v28), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < *(void *)&v28) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v32 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v23) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * v10);
        if (v23) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v32 & v10;
      uint64_t v22 = *(void *)a1;
      uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v32 & v10));
      if (v23) {
        goto LABEL_34;
      }
    }
  }
  void *v14 = *v19;
  void *v19 = v14;
  *(void *)(v22 + 8 * v4) = v19;
  if (*v14)
  {
    unint64_t v33 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v33 >= v11) {
        v33 %= v11;
      }
    }
    else
    {
      v33 &= v11 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_C4717C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_59B5F8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_C47190(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v9 = (0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) >> 33);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = (0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) >> 33);
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint8x8_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      uint8x8_t v13 = (char *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = *((void *)v13 + 1);
            if (v16 == v9)
            {
              if (*((_DWORD *)v13 + 5) == HIDWORD(v7) && *((_DWORD *)v13 + 4) == v7) {
                return v13;
              }
            }
            else if ((v16 & (v10 - 1)) != v4)
            {
              goto LABEL_31;
            }
            uint8x8_t v13 = *(char **)v13;
            if (!v13) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 5) == HIDWORD(v7) && *((_DWORD *)v13 + 4) == v7) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v4) {
              break;
            }
          }
          uint8x8_t v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  BOOL v18 = (void *)(a1 + 16);
  uint8x8_t v13 = (char *)operator new(0x40uLL);
  *(void *)uint8x8_t v13 = 0;
  *((void *)v13 + 1) = v9;
  *((void *)v13 + 2) = **a4;
  *((void *)v13 + 7) = 0;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 24) = 0u;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (v10 && (float)(v20 * (float)v10) >= v19)
  {
    uint64_t v21 = *(void *)a1;
    uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
    if (v22)
    {
LABEL_34:
      *(void *)uint8x8_t v13 = *v22;
LABEL_69:
      *uint64_t v22 = v13;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v23 = 1;
    if (v10 >= 3) {
      BOOL v23 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v10);
    unint64_t v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25) {
      size_t prime = v25;
    }
    else {
      size_t prime = v24;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_45;
    }
    if (prime < v10)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (prime <= v27) {
        size_t prime = v27;
      }
      if (prime < v10) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v30 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v4 = v9 % v10;
        uint64_t v21 = *(void *)a1;
        uint64_t v22 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v22) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v9;
        uint64_t v21 = *(void *)a1;
        uint64_t v22 = *(void **)(*(void *)a1 + 8 * v9);
        if (v22) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v30 & v9;
      uint64_t v21 = *(void *)a1;
      uint64_t v22 = *(void **)(*(void *)a1 + 8 * (v30 & v9));
      if (v22) {
        goto LABEL_34;
      }
    }
  }
  *(void *)uint8x8_t v13 = *v18;
  void *v18 = v13;
  *(void *)(v21 + 8 * v4) = v18;
  if (*(void *)v13)
  {
    unint64_t v31 = *(void *)(*(void *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v31 >= v10) {
        v31 %= v10;
      }
    }
    else
    {
      v31 &= v10 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_C474FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_59B5F8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_C47510(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = (void *)result;
    if (a4 >> 57) {
      sub_2E00();
    }
    uint64_t result = (uint64_t)operator new(a4 << 7);
    uint64_t v8 = result;
    *uint64_t v5 = result;
    v5[1] = result;
    v5[2] = result + (a4 << 7);
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = sub_BDC744(v8 + v9, (long long *)(a2 + v9));
        v9 += 128;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_C475BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_C475D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (v11) {
    sub_20AE75C(v10 + v11, v10);
  }
  *(void *)(v9 + 8) = v10;
  sub_BDC68C(&a9);
  _Unwind_Resume(a1);
}

void sub_C475F8(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = (long long *)a2;
  uint64_t v10 = a1;
  unint64_t v30 = a2;
  unint64_t v31 = a1;
LABEL_2:
  uint64_t v11 = 1 - a4;
  while (1)
  {
    uint64_t v12 = (char *)v9 - (char *)v10;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v10) >> 3);
    if (!(!v6 & v5))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v30 = (__n128 *)((char *)v9 - 24);
          if (sub_C486AC(*((unsigned int **)v9 - 3), *((unsigned int **)v9 - 2), (unsigned int *)v10->n128_u64[0], (unsigned int *)v10->n128_u64[1]))sub_C47978(&v31, &v30); {
          break;
          }
        case 3uLL:
          unint64_t v30 = (__n128 *)((char *)v9 - 24);
          sub_C47E14((uint64_t)v10, (uint64_t)&v10[1].n128_i64[1], (__n128 *)((char *)v9 - 24));
          break;
        case 4uLL:
          unint64_t v30 = (__n128 *)((char *)v9 - 24);
          sub_C48A14((uint64_t)v10, (uint64_t)&v10[1].n128_i64[1], (uint64_t)&v10[3], (uint64_t)v9 - 24);
          break;
        case 5uLL:
          unint64_t v30 = (__n128 *)((char *)v9 - 24);
          sub_C48AC8((uint64_t)v10, (uint64_t)&v10[1].n128_i64[1], (uint64_t)&v10[3], (uint64_t)&v10[4].n128_i64[1], (uint64_t)v9 - 24);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v12 <= 575)
    {
      if (a5) {
        sub_C47A3C((long long *)v10, v9);
      }
      else {
        sub_C47C34((long long *)v10, v9);
      }
      return;
    }
    if (v11 == 1) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    unint64_t v15 = (__n128 *)((char *)v9 - 24);
    if ((unint64_t)v12 < 0xC01)
    {
      sub_C47E14((uint64_t)v10 + 24 * v14, (uint64_t)v10, v15);
      if (a5)
      {
LABEL_13:
        uint64_t v9 = (long long *)v30;
        float v20 = sub_C481AC((uint64_t)v31, v30);
        if ((v22 & 1) == 0) {
          goto LABEL_19;
        }
        goto LABEL_14;
      }
    }
    else
    {
      sub_C47E14((uint64_t)v10, (uint64_t)v10 + 24 * v14, v15);
      unint64_t v16 = 24 * v14;
      uint64_t v17 = 24 * v14 - 24;
      BOOL v18 = v30;
      sub_C47E14((uint64_t)&v31[1].n128_i64[1], (uint64_t)v31 + v17, v30 - 3);
      sub_C47E14((uint64_t)&v31[3], (uint64_t)&v31[1].n128_i64[v16 / 8 + 1], (__n128 *)((char *)v18 - 72));
      sub_C47E14((uint64_t)v31 + v17, (uint64_t)v31 + v16, (__n128 *)((char *)v31 + v16 + 24));
      uint64_t v29 = (__n128 *)((char *)v31 + v16);
      sub_C47978(&v31, &v29);
      if (a5) {
        goto LABEL_13;
      }
    }
    char v19 = sub_C486AC((unsigned int *)v31[-2].n128_u64[1], (unsigned int *)v31[-1].n128_u64[0], (unsigned int *)v31->n128_u64[0], (unsigned int *)v31->n128_u64[1]);
    uint64_t v9 = (long long *)v30;
    if ((v19 & 1) == 0)
    {
      uint64_t v10 = sub_C47F30((uint64_t)v31, v30);
      goto LABEL_21;
    }
    float v20 = sub_C481AC((uint64_t)v31, v30);
    if ((v21 & 1) == 0) {
      goto LABEL_19;
    }
LABEL_14:
    BOOL v23 = sub_C48414((uint64_t)v31, (__n128 *)v20);
    uint64_t v10 = (__n128 *)(v20 + 24);
    if (sub_C48414((uint64_t)(v20 + 24), (__n128 *)v9))
    {
      if (v23) {
        return;
      }
      unint64_t v30 = (__n128 *)v20;
      uint64_t v10 = v31;
      uint64_t v9 = (long long *)v20;
      ++v11;
    }
    else
    {
      if (!v23)
      {
LABEL_19:
        sub_C475F8(v31, v20, a3, -v11, a5 & 1);
        uint64_t v10 = (__n128 *)(v20 + 24);
LABEL_21:
        a5 = 0;
        unint64_t v31 = v10;
        a4 = -v11;
        goto LABEL_2;
      }
      unint64_t v31 = (__n128 *)(v20 + 24);
      ++v11;
    }
  }
  if (v10 != (__n128 *)v9)
  {
    unint64_t v24 = (v13 - 2) >> 1;
    unint64_t v25 = v24 + 1;
    unint64_t v26 = (void **)v10 + 3 * v24;
    do
    {
      sub_C48BB0((uint64_t)v10, a3, v13, v26);
      v26 -= 3;
      --v25;
    }
    while (v25);
    unint64_t v27 = v12 / 0x18uLL;
    do
    {
      sub_C48DA8((uint64_t)v10, (uint64_t)v9, a3, v27);
      uint64_t v9 = (long long *)((char *)v9 - 24);
    }
    while (v27-- > 2);
  }
}

__n128 sub_C47978(__n128 **a1, __n128 **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  __n128 v12 = *v2;
  unint64_t v4 = v2[1].n128_u64[0];
  v2->n128_u64[0] = 0;
  v2->n128_u64[1] = 0;
  v2[1].n128_u64[0] = 0;
  sub_BDE5B8((void **)v2, v3);
  unint64_t v5 = v3->n128_u64[0];
  if (v3->n128_u64[0])
  {
    unint64_t v6 = v3->n128_u64[1];
    uint64_t v7 = (void *)v3->n128_u64[0];
    if (v6 != v5)
    {
      do
      {
        uint64_t v8 = *(void **)(v6 - 24);
        if (v8)
        {
          *(void *)(v6 - 16) = v8;
          operator delete(v8);
        }
        uint64_t v9 = *(void **)(v6 - 48);
        if (v9)
        {
          *(void *)(v6 - 40) = v9;
          operator delete(v9);
        }
        uint64_t v10 = *(void **)(v6 - 72);
        if (v10)
        {
          *(void *)(v6 - 64) = v10;
          operator delete(v10);
        }
        v6 -= 128;
      }
      while (v6 != v5);
      uint64_t v7 = (void *)v3->n128_u64[0];
    }
    v3->n128_u64[1] = v5;
    operator delete(v7);
  }
  __n128 result = v12;
  *uint64_t v3 = v12;
  v3[1].n128_u64[0] = v4;
  return result;
}

void sub_C47A3C(long long *a1, long long *a2)
{
  if (a1 != a2)
  {
    unint64_t v4 = (long long *)((char *)a1 + 24);
    if ((long long *)((char *)a1 + 24) != a2)
    {
      unint64_t v5 = a1;
      do
      {
        uint64_t v7 = v4;
        if (sub_C486AC(*((unsigned int **)v5 + 3), *((unsigned int **)v5 + 4), *(unsigned int **)v5, *((unsigned int **)v5 + 1)))
        {
          uint64_t v8 = 0;
          long long v21 = *v7;
          uint64_t v22 = *((void *)v5 + 5);
          *((void *)v7 + 1) = 0;
          *((void *)v7 + 2) = 0;
          *(void *)uint64_t v7 = 0;
          uint64_t v9 = v7;
          do
          {
            unint64_t v6 = v5;
            if (v8)
            {
              uint64_t v10 = (char *)*((void *)v9 + 1);
              uint64_t v11 = v8;
              if (v10 != v8)
              {
                do
                {
                  __n128 v12 = (void *)*((void *)v10 - 3);
                  if (v12)
                  {
                    *((void *)v10 - 2) = v12;
                    operator delete(v12);
                  }
                  unint64_t v13 = (void *)*((void *)v10 - 6);
                  if (v13)
                  {
                    *((void *)v10 - 5) = v13;
                    operator delete(v13);
                  }
                  unint64_t v14 = (void *)*((void *)v10 - 9);
                  if (v14)
                  {
                    *((void *)v10 - 8) = v14;
                    operator delete(v14);
                  }
                  v10 -= 128;
                }
                while (v10 != v8);
                uint64_t v11 = *(char **)v9;
              }
              *((void *)v9 + 1) = v8;
              operator delete(v11);
              *(void *)uint64_t v9 = 0;
              *((void *)v9 + 1) = 0;
              *((void *)v9 + 2) = 0;
            }
            *uint64_t v9 = *v6;
            *((void *)v9 + 2) = *((void *)v6 + 2);
            *(void *)unint64_t v6 = 0;
            *((void *)v6 + 1) = 0;
            *((void *)v6 + 2) = 0;
            if (v6 == a1)
            {
              unint64_t v6 = a1;
              goto LABEL_5;
            }
            unint64_t v5 = (long long *)((char *)v6 - 24);
            char v15 = sub_C486AC((unsigned int *)v21, *((unsigned int **)&v21 + 1), *((unsigned int **)v6 - 3), *((unsigned int **)v6 - 2));
            uint64_t v8 = *(char **)v6;
            uint64_t v9 = v6;
          }
          while ((v15 & 1) != 0);
          if (v8)
          {
            unint64_t v16 = (char *)*((void *)v6 + 1);
            uint64_t v17 = *(void **)v6;
            if (v16 != v8)
            {
              do
              {
                BOOL v18 = (void *)*((void *)v16 - 3);
                if (v18)
                {
                  *((void *)v16 - 2) = v18;
                  operator delete(v18);
                }
                char v19 = (void *)*((void *)v16 - 6);
                if (v19)
                {
                  *((void *)v16 - 5) = v19;
                  operator delete(v19);
                }
                float v20 = (void *)*((void *)v16 - 9);
                if (v20)
                {
                  *((void *)v16 - 8) = v20;
                  operator delete(v20);
                }
                v16 -= 128;
              }
              while (v16 != v8);
              uint64_t v17 = *(void **)v6;
            }
            *((void *)v6 + 1) = v8;
            operator delete(v17);
            *(void *)unint64_t v6 = 0;
            *((void *)v6 + 1) = 0;
            *((void *)v6 + 2) = 0;
          }
LABEL_5:
          *unint64_t v6 = v21;
          *((void *)v6 + 2) = v22;
        }
        unint64_t v4 = (long long *)((char *)v7 + 24);
        unint64_t v5 = v7;
      }
      while ((long long *)((char *)v7 + 24) != a2);
    }
  }
}

void sub_C47C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_C47C34(long long *a1, long long *a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = a1;
    unint64_t v4 = (long long *)((char *)a1 + 24);
    while (v4 != a2)
    {
      uint64_t v8 = v4;
      if (sub_C486AC(*((unsigned int **)v3 + 3), *((unsigned int **)v3 + 4), *(unsigned int **)v3, *((unsigned int **)v3 + 1)))
      {
        uint64_t v9 = 0;
        long long v22 = *v8;
        uint64_t v23 = *((void *)v3 + 5);
        *((void *)v8 + 1) = 0;
        *((void *)v8 + 2) = 0;
        *(void *)uint64_t v8 = 0;
        uint64_t v10 = v8;
        do
        {
          uint64_t v11 = v3;
          if (v9)
          {
            __n128 v12 = (char *)*((void *)v10 + 1);
            unint64_t v13 = v9;
            if (v12 != v9)
            {
              do
              {
                unint64_t v14 = (void *)*((void *)v12 - 3);
                if (v14)
                {
                  *((void *)v12 - 2) = v14;
                  operator delete(v14);
                }
                char v15 = (void *)*((void *)v12 - 6);
                if (v15)
                {
                  *((void *)v12 - 5) = v15;
                  operator delete(v15);
                }
                unint64_t v16 = (void *)*((void *)v12 - 9);
                if (v16)
                {
                  *((void *)v12 - 8) = v16;
                  operator delete(v16);
                }
                v12 -= 128;
              }
              while (v12 != v9);
              unint64_t v13 = *(char **)v10;
            }
            *((void *)v10 + 1) = v9;
            operator delete(v13);
            *(void *)uint64_t v10 = 0;
            *((void *)v10 + 1) = 0;
            *((void *)v10 + 2) = 0;
          }
          *uint64_t v10 = *v11;
          *((void *)v10 + 2) = *((void *)v11 + 2);
          *(void *)uint64_t v11 = 0;
          *((void *)v11 + 1) = 0;
          *((void *)v11 + 2) = 0;
          uint64_t v3 = (long long *)((char *)v11 - 24);
          uint64_t v7 = *((void *)&v22 + 1);
          uint64_t v6 = v22;
          char v17 = sub_C486AC((unsigned int *)v22, *((unsigned int **)&v22 + 1), *((unsigned int **)v11 - 3), *((unsigned int **)v11 - 2));
          uint64_t v9 = *(char **)v11;
          uint64_t v10 = v11;
        }
        while ((v17 & 1) != 0);
        if (v9)
        {
          BOOL v18 = (char *)*((void *)v11 + 1);
          unint64_t v5 = *(void **)v11;
          if (v18 != v9)
          {
            do
            {
              char v19 = (void *)*((void *)v18 - 3);
              if (v19)
              {
                *((void *)v18 - 2) = v19;
                operator delete(v19);
              }
              float v20 = (void *)*((void *)v18 - 6);
              if (v20)
              {
                *((void *)v18 - 5) = v20;
                operator delete(v20);
              }
              long long v21 = (void *)*((void *)v18 - 9);
              if (v21)
              {
                *((void *)v18 - 8) = v21;
                operator delete(v21);
              }
              v18 -= 128;
            }
            while (v18 != v9);
            unint64_t v5 = *(void **)v11;
          }
          *((void *)v11 + 1) = v9;
          operator delete(v5);
          *(void *)uint64_t v11 = 0;
          *((void *)v11 + 1) = 0;
          *((void *)v11 + 2) = 0;
          uint64_t v7 = *((void *)&v22 + 1);
          uint64_t v6 = v22;
        }
        *(void *)uint64_t v11 = v6;
        *((void *)v11 + 1) = v7;
        *((void *)v11 + 2) = v23;
      }
      unint64_t v4 = (long long *)((char *)v8 + 24);
      uint64_t v3 = v8;
    }
  }
}

void sub_C47E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t sub_C47E14(uint64_t a1, uint64_t a2, __n128 *a3)
{
  __n128 v12 = (__n128 *)a2;
  unint64_t v13 = (__n128 *)a1;
  uint64_t v11 = a3;
  char v5 = sub_C486AC(*(unsigned int **)a2, *(unsigned int **)(a2 + 8), *(unsigned int **)a1, *(unsigned int **)(a1 + 8));
  uint64_t v6 = (unsigned int *)a3->n128_u64[0];
  uint64_t v7 = (unsigned int *)a3->n128_u64[1];
  uint64_t v8 = *(unsigned int **)a2;
  uint64_t v9 = *(unsigned int **)(a2 + 8);
  if (v5)
  {
    if (sub_C486AC(v6, v7, v8, v9))
    {
      sub_C47978(&v13, &v11);
      return 1;
    }
    sub_C47978(&v13, &v12);
    if (sub_C486AC((unsigned int *)v11->n128_u64[0], (unsigned int *)v11->n128_u64[1], (unsigned int *)v12->n128_u64[0], (unsigned int *)v12->n128_u64[1]))
    {
      sub_C47978(&v12, &v11);
      return 2;
    }
    return 1;
  }
  uint64_t result = sub_C486AC(v6, v7, v8, v9);
  if (result)
  {
    sub_C47978(&v12, &v11);
    if (sub_C486AC((unsigned int *)v12->n128_u64[0], (unsigned int *)v12->n128_u64[1], (unsigned int *)v13->n128_u64[0], (unsigned int *)v13->n128_u64[1]))
    {
      sub_C47978(&v13, &v12);
      return 2;
    }
    return 1;
  }
  return result;
}

__n128 *sub_C47F30(uint64_t a1, __n128 *a2)
{
  uint64_t v2 = a2;
  uint64_t v23 = a2;
  unint64_t v24 = (__n128 *)a1;
  *(void *)long long v22 = *(void *)a1;
  unint64_t v4 = *(unsigned int **)a1;
  *(_OWORD *)&v22[8] = *(_OWORD *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  if (sub_C486AC(v4, *(unsigned int **)&v22[8], (unsigned int *)a2[-2].n128_u64[1], (unsigned int *)a2[-1].n128_u64[0]))
  {
    uint64_t v5 = a1 + 24;
    do
    {
      unint64_t v24 = (__n128 *)v5;
      char v6 = sub_C486AC(v4, *(unsigned int **)&v22[8], *(unsigned int **)v5, *(unsigned int **)(v5 + 8));
      v5 += 24;
    }
    while ((v6 & 1) == 0);
    uint64_t v7 = (__n128 *)(v5 - 24);
  }
  else
  {
    uint64_t v8 = (char *)(a1 + 24);
    do
    {
      uint64_t v7 = (__n128 *)v8;
      unint64_t v24 = (__n128 *)v8;
      if (v8 >= (char *)v2) {
        break;
      }
      char v9 = sub_C486AC(v4, *(unsigned int **)&v22[8], *(unsigned int **)v8, *((unsigned int **)v8 + 1));
      uint64_t v8 = &v7[1].n128_i8[8];
    }
    while ((v9 & 1) == 0);
  }
  if (v7 < v2)
  {
    uint64_t v10 = &v2[-2].n128_i8[8];
    do
    {
      uint64_t v23 = (__n128 *)v10;
      char v11 = sub_C486AC(v4, *(unsigned int **)&v22[8], *(unsigned int **)v10, *((unsigned int **)v10 + 1));
      v10 -= 24;
    }
    while ((v11 & 1) != 0);
    uint64_t v2 = (__n128 *)(v10 + 24);
  }
  if (v7 < v2)
  {
    do
    {
      sub_C47978(&v24, &v23);
      do
      {
        __n128 v12 = (unsigned int *)v24[1].n128_u64[1];
        unint64_t v24 = (__n128 *)((char *)v24 + 24);
      }
      while (!sub_C486AC(v4, *(unsigned int **)&v22[8], v12, (unsigned int *)v24->n128_u64[1]));
      do
      {
        unint64_t v13 = v23;
        uint64_t v23 = (__n128 *)((char *)v23 - 24);
      }
      while ((sub_C486AC(v4, *(unsigned int **)&v22[8], (unsigned int *)v23->n128_u64[0], (unsigned int *)v13[-1].n128_u64[0]) & 1) != 0);
      uint64_t v7 = v24;
    }
    while (v24 < v23);
  }
  unint64_t v14 = &v7[-2].n128_u64[1];
  if (&v7[-2].n128_i8[8] != (__int8 *)a1) {
    sub_BDE5B8((void **)a1, (__n128 *)((char *)v7 - 24));
  }
  char v15 = (void *)*v14;
  if (*v14)
  {
    unint64_t v16 = v7[-1].n128_u64[0];
    char v17 = (void *)*v14;
    if ((void *)v16 != v15)
    {
      do
      {
        BOOL v18 = *(void **)(v16 - 24);
        if (v18)
        {
          *(void *)(v16 - 16) = v18;
          operator delete(v18);
        }
        char v19 = *(void **)(v16 - 48);
        if (v19)
        {
          *(void *)(v16 - 40) = v19;
          operator delete(v19);
        }
        float v20 = *(void **)(v16 - 72);
        if (v20)
        {
          *(void *)(v16 - 64) = v20;
          operator delete(v20);
        }
        v16 -= 128;
      }
      while ((void *)v16 != v15);
      char v17 = (void *)*v14;
    }
    v7[-1].n128_u64[0] = (unint64_t)v15;
    operator delete(v17);
    unint64_t *v14 = 0;
    v7[-1].n128_u64[0] = 0;
    v7[-1].n128_u64[1] = 0;
  }
  *(__n128 *)((char *)v7 - 24) = *(__n128 *)v22;
  v7[-1].n128_u64[1] = *(void *)&v22[16];
  return v24;
}

void sub_C48134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_C48148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_C4815C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_C48170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_C48184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_C48198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

__int8 *sub_C481AC(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = 0;
  unint64_t v26 = a2;
  uint64_t v5 = *(unsigned int **)a1;
  *(void *)unint64_t v25 = *(void *)a1;
  *(_OWORD *)&v25[8] = *(_OWORD *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  do
  {
    char v6 = *(unsigned int **)(a1 + v4 + 24);
    unint64_t v27 = (__n128 *)(a1 + v4 + 24);
    char v7 = sub_C486AC(v6, *(unsigned int **)(a1 + v4 + 32), v5, *(unsigned int **)&v25[8]);
    v4 += 24;
  }
  while ((v7 & 1) != 0);
  unint64_t v8 = a1 + v4;
  if (v4 == 24)
  {
    __n128 v12 = &a2[-2].n128_i8[8];
    while (1)
    {
      unint64_t v11 = (unint64_t)(v12 + 24);
      if (v8 >= (unint64_t)(v12 + 24)) {
        break;
      }
      unint64_t v26 = (__n128 *)v12;
      char v13 = sub_C486AC(*(unsigned int **)v12, *((unsigned int **)v12 + 1), v5, *(unsigned int **)&v25[8]);
      v12 -= 24;
      if (v13)
      {
        unint64_t v11 = (unint64_t)(v12 + 24);
        break;
      }
    }
  }
  else
  {
    char v9 = &a2[-2].n128_i8[8];
    do
    {
      unint64_t v26 = (__n128 *)v9;
      char v10 = sub_C486AC(*(unsigned int **)v9, *((unsigned int **)v9 + 1), v5, *(unsigned int **)&v25[8]);
      v9 -= 24;
    }
    while ((v10 & 1) == 0);
    unint64_t v11 = (unint64_t)(v9 + 24);
  }
  unint64_t v14 = (__n128 *)v8;
  if (v8 < v11)
  {
    do
    {
      sub_C47978(&v27, &v26);
      do
      {
        char v15 = (unsigned int *)v27[1].n128_u64[1];
        unint64_t v27 = (__n128 *)((char *)v27 + 24);
      }
      while ((sub_C486AC(v15, (unsigned int *)v27->n128_u64[1], v5, *(unsigned int **)&v25[8]) & 1) != 0);
      do
      {
        unint64_t v16 = v26;
        unint64_t v26 = (__n128 *)((char *)v26 - 24);
      }
      while (!sub_C486AC((unsigned int *)v26->n128_u64[0], (unsigned int *)v16[-1].n128_u64[0], v5, *(unsigned int **)&v25[8]));
      unint64_t v14 = v27;
    }
    while (v27 < v26);
  }
  char v17 = &v14[-2].n128_u64[1];
  if (&v14[-2].n128_i8[8] != (__int8 *)a1) {
    sub_BDE5B8((void **)a1, (__n128 *)((char *)v14 - 24));
  }
  BOOL v18 = (void *)*v17;
  if (*v17)
  {
    unint64_t v19 = v14[-1].n128_u64[0];
    float v20 = (void *)*v17;
    if ((void *)v19 != v18)
    {
      do
      {
        long long v21 = *(void **)(v19 - 24);
        if (v21)
        {
          *(void *)(v19 - 16) = v21;
          operator delete(v21);
        }
        long long v22 = *(void **)(v19 - 48);
        if (v22)
        {
          *(void *)(v19 - 40) = v22;
          operator delete(v22);
        }
        uint64_t v23 = *(void **)(v19 - 72);
        if (v23)
        {
          *(void *)(v19 - 64) = v23;
          operator delete(v23);
        }
        v19 -= 128;
      }
      while ((void *)v19 != v18);
      float v20 = (void *)*v17;
    }
    v14[-1].n128_u64[0] = (unint64_t)v18;
    operator delete(v20);
    *char v17 = 0;
    v14[-1].n128_u64[0] = 0;
    v14[-1].n128_u64[1] = 0;
  }
  *(__n128 *)((char *)v14 - 24) = *(__n128 *)v25;
  v14[-1].n128_u64[1] = *(void *)&v25[16];
  return &v14[-2].n128_i8[8];
}

void sub_C483B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_C483C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_C483D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_C483EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_C48400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

BOOL sub_C48414(uint64_t a1, __n128 *a2)
{
  uint64_t v2 = a2;
  long long v21 = a2;
  long long v22 = (__n128 *)a1;
  uint64_t v4 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      BOOL v18 = (unsigned int *)a2[-2].n128_u64[1];
      long long v21 = (__n128 *)((char *)a2 - 24);
      if (sub_C486AC(v18, (unsigned int *)a2[-1].n128_u64[0], *(unsigned int **)a1, *(unsigned int **)(a1 + 8)))sub_C47978(&v22, &v21); {
      return 1;
      }
    case 3uLL:
      sub_C47E14(a1, a1 + 24, (__n128 *)((char *)a2 - 24));
      return 1;
    case 4uLL:
      sub_C48A14(a1, a1 + 24, a1 + 48, (uint64_t)&a2[-2].n128_i64[1]);
      return 1;
    case 5uLL:
      sub_C48AC8(a1, a1 + 24, a1 + 48, a1 + 72, (uint64_t)&a2[-2].n128_i64[1]);
      return 1;
    default:
      uint64_t v6 = a1 + 48;
      sub_C47E14(a1, a1 + 24, (__n128 *)(a1 + 48));
      uint64_t v7 = a1 + 72;
      if ((__n128 *)v7 == v2) {
        return 1;
      }
      int v8 = 0;
      break;
  }
  while (1)
  {
    if (sub_C486AC(*(unsigned int **)v7, *(unsigned int **)(v7 + 8), *(unsigned int **)v6, *(unsigned int **)(v6 + 8)))
    {
      __n128 v19 = *(__n128 *)v7;
      float v20 = *(void **)(v7 + 16);
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
      *(void *)uint64_t v7 = 0;
      do
      {
        char v10 = (void **)v6;
        sub_BDE5B8((void **)(v6 + 24), (__n128 *)v6);
        if ((__n128 *)v6 == v22) {
          break;
        }
        unint64_t v11 = *(unsigned int **)(v6 - 24);
        __n128 v12 = *(unsigned int **)(v6 - 16);
        v6 -= 24;
      }
      while ((sub_C486AC((unsigned int *)v19.n128_u64[0], (unsigned int *)v19.n128_u64[1], v11, v12) & 1) != 0);
      char v13 = (char *)*v10;
      if (*v10)
      {
        unint64_t v14 = (char *)v10[1];
        char v9 = *v10;
        if (v14 != v13)
        {
          do
          {
            char v15 = (void *)*((void *)v14 - 3);
            if (v15)
            {
              *((void *)v14 - 2) = v15;
              operator delete(v15);
            }
            unint64_t v16 = (void *)*((void *)v14 - 6);
            if (v16)
            {
              *((void *)v14 - 5) = v16;
              operator delete(v16);
            }
            char v17 = (void *)*((void *)v14 - 9);
            if (v17)
            {
              *((void *)v14 - 8) = v17;
              operator delete(v17);
            }
            v14 -= 128;
          }
          while (v14 != v13);
          char v9 = *v10;
        }
        v10[1] = v13;
        operator delete(v9);
        *char v10 = 0;
        v10[1] = 0;
        v10[2] = 0;
      }
      *(__n128 *)char v10 = v19;
      v10[2] = v20;
      ++v8;
      uint64_t v2 = v21;
      if (v8 == 8) {
        break;
      }
    }
    uint64_t v6 = v7;
    v7 += 24;
    if ((__n128 *)v7 == v2) {
      return 1;
    }
  }
  return v7 + 24 == (void)v21;
}

void sub_C48680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t sub_C486AC(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  if (a3 == a4) {
    return 0;
  }
  uint64_t v39 = v4;
  uint64_t v40 = v5;
  uint64_t v7 = a1;
  if (a1 != a2)
  {
    char v9 = a3;
    do
    {
      char v10 = v7 + 8;
      unint64_t v34 = v7;
      uint64_t v35 = v7 + 8;
      long long v36 = v7 + 14;
      uint64_t v37 = v7 + 20;
      unint64_t v11 = v9 + 8;
      unint64_t v30 = v9;
      unint64_t v31 = v9 + 8;
      unint64_t v32 = v9 + 14;
      unint64_t v33 = v9 + 20;
      unsigned int v12 = v9[1];
      unsigned int v13 = v7[1];
      BOOL v14 = v13 > v12;
      if (v13 < v12) {
        break;
      }
      unsigned int v15 = *v9;
      if (!v14 && *v7 < v15) {
        break;
      }
      uint64_t v16 = *(void *)v7;
      uint64_t v17 = HIDWORD(*(void *)v7);
      if (v12 >= v17 && (v15 >= v16 || v12 > v17))
      {
        unsigned int v18 = v7[2];
        unsigned int v19 = v9[2];
        if (v18 < v19
          || (v12 > v17 || v16 < v15 || v19 >= v18)
          && (*v10 < *v11 || *v11 >= *v10 && (sub_C488C4((uint64_t)&v38, (uint64_t)&v34, (uint64_t)&v30) & 1) != 0))
        {
          break;
        }
      }
      unint64_t v34 = v9;
      uint64_t v35 = v9 + 8;
      long long v36 = v9 + 14;
      uint64_t v37 = v9 + 20;
      unint64_t v30 = v7;
      unint64_t v31 = v7 + 8;
      unint64_t v32 = v7 + 14;
      unint64_t v33 = v7 + 20;
      unsigned int v20 = v7[1];
      unsigned int v21 = v9[1];
      BOOL v22 = v21 > v20;
      if (v21 < v20) {
        return 0;
      }
      unsigned int v23 = *v7;
      if (!v22 && *v9 < v23) {
        return 0;
      }
      uint64_t v24 = *(void *)v9;
      uint64_t v25 = HIDWORD(*(void *)v9);
      if (v20 < v25 || v23 < v24 && v20 <= v25) {
        goto LABEL_29;
      }
      unsigned int v26 = v9[2];
      unsigned int v27 = v7[2];
      if (v26 < v27) {
        return 0;
      }
      if (v20 <= v25 && v24 >= v23 && v27 < v26) {
        goto LABEL_29;
      }
      if (*v11 < *v10) {
        return 0;
      }
      if (*v10 >= *v11)
      {
        char v28 = sub_C488C4((uint64_t)&v38, (uint64_t)&v34, (uint64_t)&v30);
        uint64_t result = 0;
        if (v28) {
          return result;
        }
        v9 += 32;
        if (v9 == a4) {
          return result;
        }
      }
      else
      {
LABEL_29:
        v9 += 32;
        if (v9 == a4) {
          return 0;
        }
      }
      v7 += 32;
    }
    while (v7 != a2);
  }
  return 1;
}

uint64_t sub_C488C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned __int8 ***)(a3 + 16);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v7 = **(unsigned __int8 ***)(a2 + 16);
  uint64_t v6 = *(unsigned __int8 **)(*(void *)(a2 + 16) + 8);
  if (v4 == v5)
  {
LABEL_16:
    while (v7 != v6)
    {
      if (v4 == v5) {
        return 0;
      }
      unsigned int v14 = *v4;
      unsigned int v15 = *v7;
      if (v14 < v15) {
        return 0;
      }
      if (v15 < v14) {
        break;
      }
      unsigned int v16 = v4[1];
      unsigned int v17 = v7[1];
      if (v16 < v17) {
        return 0;
      }
      if (v17 < v16) {
        break;
      }
      v7 += 2;
      v4 += 2;
    }
    uint64_t v18 = *(void *)(a3 + 24);
    unsigned int v19 = *(_DWORD **)v18;
    unsigned int v20 = *(_DWORD **)(v18 + 8);
    if (v19 == v20) {
      return 0;
    }
    BOOL v22 = **(_DWORD ***)(a2 + 24);
    unsigned int v21 = *(_DWORD **)(*(void *)(a2 + 24) + 8);
    if (v22 != v21)
    {
      while (*v22 >= *v19)
      {
        if (*v19 < *v22) {
          return 0;
        }
        int v23 = v22[1];
        int v24 = v19[1];
        if (v23 < v24) {
          break;
        }
        if (v24 < v23) {
          return 0;
        }
        int v25 = v22[2];
        int v26 = v19[2];
        if (v25 < v26) {
          break;
        }
        uint64_t result = 0;
        if (v26 >= v25)
        {
          v19 += 3;
          if (v19 != v20)
          {
            v22 += 3;
            uint64_t result = 1;
            if (v22 != v21) {
              continue;
            }
          }
        }
        return result;
      }
    }
  }
  else
  {
    int v8 = **(unsigned __int8 ***)(a2 + 16);
    char v9 = v4;
    while (v8 != v6)
    {
      unsigned int v10 = *v8;
      unsigned int v11 = *v9;
      if (v10 < v11) {
        break;
      }
      if (v11 < v10) {
        goto LABEL_16;
      }
      unsigned int v12 = v8[1];
      unsigned int v13 = v9[1];
      if (v12 < v13) {
        break;
      }
      if (v13 >= v12)
      {
        v9 += 2;
        v8 += 2;
        if (v9 != v5) {
          continue;
        }
      }
      goto LABEL_16;
    }
  }
  return 1;
}

double sub_C48A14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v11 = (__n128 *)a2;
  unsigned int v12 = (__n128 *)a1;
  char v9 = (__n128 *)a4;
  unsigned int v10 = (__n128 *)a3;
  sub_C47E14(a1, a2, (__n128 *)a3);
  if (sub_C486AC(*(unsigned int **)a4, *(unsigned int **)(a4 + 8), *(unsigned int **)a3, *(unsigned int **)(a3 + 8)))
  {
    sub_C47978(&v10, &v9);
    if (sub_C486AC((unsigned int *)v10->n128_u64[0], (unsigned int *)v10->n128_u64[1], *(unsigned int **)a2, *(unsigned int **)(a2 + 8)))
    {
      sub_C47978(&v11, &v10);
      if (sub_C486AC((unsigned int *)v11->n128_u64[0], (unsigned int *)v11->n128_u64[1], *(unsigned int **)a1, *(unsigned int **)(a1 + 8)))*(void *)&double result = sub_C47978(&v12, &v11).n128_u64[0]; {
    }
      }
  }
  return result;
}

double sub_C48AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v14 = (__n128 *)a2;
  unsigned int v15 = (__n128 *)a1;
  unsigned int v12 = (__n128 *)a4;
  unsigned int v13 = (__n128 *)a3;
  unsigned int v11 = (__n128 *)a5;
  sub_C48A14(a1, a2, a3, a4);
  if (sub_C486AC(*(unsigned int **)a5, *(unsigned int **)(a5 + 8), *(unsigned int **)a4, *(unsigned int **)(a4 + 8)))
  {
    sub_C47978(&v12, &v11);
    if (sub_C486AC((unsigned int *)v12->n128_u64[0], (unsigned int *)v12->n128_u64[1], *(unsigned int **)a3, *(unsigned int **)(a3 + 8)))
    {
      sub_C47978(&v13, &v12);
      if (sub_C486AC((unsigned int *)v13->n128_u64[0], (unsigned int *)v13->n128_u64[1], *(unsigned int **)a2, *(unsigned int **)(a2 + 8)))
      {
        sub_C47978(&v14, &v13);
        if (sub_C486AC((unsigned int *)v14->n128_u64[0], (unsigned int *)v14->n128_u64[1], *(unsigned int **)a1, *(unsigned int **)(a1 + 8)))*(void *)&double result = sub_C47978(&v15, &v14).n128_u64[0]; {
      }
        }
    }
  }
  return result;
}

double sub_C48BB0(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v9 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      unsigned int v10 = (unsigned int **)(a1 + 24 * v9);
      uint64_t v11 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v11 < a3 && sub_C486AC(*v10, v10[1], v10[3], v10[4]))
      {
        v10 += 3;
        uint64_t v9 = v11;
      }
      if ((sub_C486AC(*v10, v10[1], (unsigned int *)*v5, (unsigned int *)v5[1]) & 1) == 0)
      {
        long long v21 = *(_OWORD *)v5;
        BOOL v22 = (unsigned int *)v5[2];
        v5[1] = 0;
        v5[2] = 0;
        *uint64_t v5 = 0;
        do
        {
          unsigned int v13 = v10;
          sub_BDE5B8(v5, (__n128 *)v10);
          if (v7 < v9) {
            break;
          }
          uint64_t v14 = (2 * v9) | 1;
          unsigned int v10 = (unsigned int **)(a1 + 24 * v14);
          uint64_t v9 = 2 * v9 + 2;
          if (v9 >= a3)
          {
            uint64_t v9 = v14;
          }
          else if (sub_C486AC(*v10, v10[1], v10[3], v10[4]))
          {
            v10 += 3;
          }
          else
          {
            uint64_t v9 = v14;
          }
          uint64_t v5 = (void **)v13;
        }
        while (!sub_C486AC(*v10, v10[1], (unsigned int *)v21, *((unsigned int **)&v21 + 1)));
        unsigned int v15 = *v13;
        if (*v13)
        {
          unsigned int v16 = v13[1];
          unsigned int v17 = *v13;
          if (v16 != v15)
          {
            do
            {
              uint64_t v18 = (void *)*((void *)v16 - 3);
              if (v18)
              {
                *((void *)v16 - 2) = v18;
                operator delete(v18);
              }
              unsigned int v19 = (void *)*((void *)v16 - 6);
              if (v19)
              {
                *((void *)v16 - 5) = v19;
                operator delete(v19);
              }
              unsigned int v20 = (void *)*((void *)v16 - 9);
              if (v20)
              {
                *((void *)v16 - 8) = v20;
                operator delete(v20);
              }
              v16 -= 32;
            }
            while (v16 != v15);
            unsigned int v17 = *v13;
          }
          v13[1] = v15;
          operator delete(v17);
          *unsigned int v13 = 0;
          v13[1] = 0;
          v13[2] = 0;
        }
        double result = *(double *)&v21;
        *(_OWORD *)unsigned int v13 = v21;
        v13[2] = v22;
      }
    }
  }
  return result;
}

void sub_C48D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

__n128 sub_C48DA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v7 = 0;
    *(_OWORD *)long long __p = *(_OWORD *)a1;
    uint64_t v29 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    int64_t v8 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v9 = (void **)a1;
    do
    {
      uint64_t v10 = (uint64_t)&v9[3 * v7 + 3];
      uint64_t v11 = (2 * v7) | 1;
      uint64_t v12 = 2 * v7 + 2;
      if (v12 < a4
        && sub_C486AC(*(unsigned int **)v10, (unsigned int *)v9[3 * v7 + 4], (unsigned int *)v9[3 * v7 + 6], (unsigned int *)v9[3 * v7 + 7]))
      {
        v10 += 24;
        uint64_t v11 = v12;
      }
      sub_BDE5B8(v9, (__n128 *)v10);
      uint64_t v9 = (void **)v10;
      uint64_t v7 = v11;
    }
    while (v11 <= v8);
    unsigned int v13 = (void **)(a2 - 24);
    if (v10 == a2 - 24)
    {
      unsigned int v20 = *(unsigned int **)v10;
      if (*(void *)v10)
      {
        long long v21 = *(unsigned int **)(v10 + 8);
        BOOL v22 = *(unsigned int **)v10;
        if (v21 != v20)
        {
          do
          {
            int v23 = (void *)*((void *)v21 - 3);
            if (v23)
            {
              *((void *)v21 - 2) = v23;
              operator delete(v23);
            }
            int v24 = (void *)*((void *)v21 - 6);
            if (v24)
            {
              *((void *)v21 - 5) = v24;
              operator delete(v24);
            }
            int v25 = (void *)*((void *)v21 - 9);
            if (v25)
            {
              *((void *)v21 - 8) = v25;
              operator delete(v25);
            }
            v21 -= 32;
          }
          while (v21 != v20);
          BOOL v22 = *(unsigned int **)v10;
        }
        *(void *)(v10 + 8) = v20;
        operator delete(v22);
        *(void *)uint64_t v10 = 0;
        *(void *)(v10 + 8) = 0;
        *(void *)(v10 + 16) = 0;
      }
      __n128 result = *(__n128 *)__p;
      *(_OWORD *)uint64_t v10 = *(_OWORD *)__p;
      *(void *)(v10 + 16) = v29;
    }
    else
    {
      sub_BDE5B8((void **)v10, (__n128 *)(a2 - 24));
      uint64_t v14 = (char *)*v13;
      if (*v13)
      {
        unsigned int v15 = *(char **)(a2 - 16);
        unsigned int v16 = *v13;
        if (v15 != v14)
        {
          do
          {
            unsigned int v17 = (void *)*((void *)v15 - 3);
            if (v17)
            {
              *((void *)v15 - 2) = v17;
              operator delete(v17);
            }
            uint64_t v18 = (void *)*((void *)v15 - 6);
            if (v18)
            {
              *((void *)v15 - 5) = v18;
              operator delete(v18);
            }
            unsigned int v19 = (void *)*((void *)v15 - 9);
            if (v19)
            {
              *((void *)v15 - 8) = v19;
              operator delete(v19);
            }
            v15 -= 128;
          }
          while (v15 != v14);
          unsigned int v16 = *v13;
        }
        *(void *)(a2 - 16) = v14;
        operator delete(v16);
        *unsigned int v13 = 0;
        *(void *)(a2 - 16) = 0;
        *(void *)(a2 - 8) = 0;
      }
      *(_OWORD *)(a2 - 24) = *(_OWORD *)__p;
      *(void *)(a2 - 8) = v29;
      result.n128_f64[0] = sub_C49060(a1, v10 + 24, a3, 0xAAAAAAAAAAAAAAABLL * ((v10 + 24 - a1) >> 3));
    }
  }
  return result;
}

void sub_C49038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_BDC510((void **)va);
  _Unwind_Resume(a1);
}

void sub_C4904C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_BDC510((void **)va);
  _Unwind_Resume(a1);
}

double sub_C49060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v6 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v7 = a1 + 24 * v6;
    int64_t v8 = (void **)(a2 - 24);
    if (sub_C486AC(*(unsigned int **)v7, *(unsigned int **)(v7 + 8), *(unsigned int **)(a2 - 24), *(unsigned int **)(a2 - 16)))
    {
      long long v17 = *(_OWORD *)(a2 - 24);
      uint64_t v18 = *(void **)(a2 - 8);
      v8[1] = 0;
      v8[2] = 0;
      *int64_t v8 = 0;
      do
      {
        uint64_t v10 = (void **)v7;
        sub_BDE5B8(v8, (__n128 *)v7);
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v7 = a1 + 24 * v6;
        int64_t v8 = v10;
      }
      while ((sub_C486AC(*(unsigned int **)v7, *(unsigned int **)(v7 + 8), (unsigned int *)v17, *((unsigned int **)&v17 + 1)) & 1) != 0);
      uint64_t v11 = (char *)*v10;
      if (*v10)
      {
        uint64_t v12 = (char *)v10[1];
        unsigned int v13 = *v10;
        if (v12 != v11)
        {
          do
          {
            uint64_t v14 = (void *)*((void *)v12 - 3);
            if (v14)
            {
              *((void *)v12 - 2) = v14;
              operator delete(v14);
            }
            unsigned int v15 = (void *)*((void *)v12 - 6);
            if (v15)
            {
              *((void *)v12 - 5) = v15;
              operator delete(v15);
            }
            unsigned int v16 = (void *)*((void *)v12 - 9);
            if (v16)
            {
              *((void *)v12 - 8) = v16;
              operator delete(v16);
            }
            v12 -= 128;
          }
          while (v12 != v11);
          unsigned int v13 = *v10;
        }
        v10[1] = v11;
        operator delete(v13);
        *uint64_t v10 = 0;
        v10[1] = 0;
        v10[2] = 0;
      }
      double result = *(double *)&v17;
      *(_OWORD *)uint64_t v10 = v17;
      v10[2] = v18;
    }
  }
  return result;
}

void sub_C4919C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

__n128 *sub_C491B0(uint64_t a1, __n128 *a2)
{
  if ((__n128 *)a1 == a2) {
    return a2;
  }
  uint64_t v3 = (__n128 *)a1;
  unint64_t v4 = (void **)(a1 + 24);
  if ((__n128 *)(a1 + 24) == a2) {
    return a2;
  }
  while (1)
  {
    uint64_t v5 = v4;
    unint64_t v6 = (char *)v3->n128_u64[0];
    uint64_t v7 = (char *)v3->n128_u64[1];
    int64_t v8 = *v4;
    if (&v7[-v3->n128_u64[0]] == (char *)(v3[2].n128_u64[0] - (void)v8)) {
      break;
    }
LABEL_4:
    unint64_t v4 = v5 + 3;
    uint64_t v3 = (__n128 *)v5;
    if (v5 + 3 == (void **)a2) {
      return a2;
    }
  }
  if (v6 != v7)
  {
    do
    {
      v26[0] = v6;
      v26[1] = v6 + 32;
      uint64_t v9 = v6 + 80;
      void v26[2] = v6 + 56;
      v26[3] = v6 + 80;
      v25[0] = v8;
      v25[1] = v8 + 4;
      uint64_t v10 = v8 + 10;
      void v25[2] = v8 + 7;
      v25[3] = v8 + 10;
      if (!sub_C49400((uint64_t)&v27, v26, v25)) {
        goto LABEL_4;
      }
      unint64_t v6 = (char *)(v9 + 6);
      int64_t v8 = v10 + 6;
    }
    while (v9 + 6 != (void *)v7);
  }
  if (v3 != a2)
  {
    uint64_t v11 = v3 + 3;
    if (&v3[3] == a2) {
      return (__n128 *)((char *)v3 + 24);
    }
    uint64_t v12 = (__n128 *)((char *)v3 + 24);
    while (2)
    {
      unint64_t v13 = v12[2].n128_u64[0];
      uint64_t v12 = v11;
      unsigned int v15 = (char *)v3->n128_u64[0];
      uint64_t v14 = (char *)v3->n128_u64[1];
      unint64_t v16 = v12->n128_u64[0];
      if (&v14[-v3->n128_u64[0]] == (char *)(v13 - v12->n128_u64[0]))
      {
        if (v15 != v14)
        {
          while (*(void *)v15 == *(void *)v16)
          {
            if (*((_DWORD *)v15 + 2) != *(_DWORD *)(v16 + 8)) {
              break;
            }
            if (*((void *)v15 + 4) != *(void *)(v16 + 32)) {
              break;
            }
            uint64_t v18 = (unsigned __int8 *)*((void *)v15 + 7);
            long long v17 = (unsigned __int8 *)*((void *)v15 + 8);
            unsigned int v19 = *(unsigned __int8 **)(v16 + 56);
            if (v17 - v18 != *(void *)(v16 + 64) - (void)v19) {
              break;
            }
            if (v18 != v17)
            {
              while (*v18 == *v19 && v18[1] == v19[1])
              {
                v18 += 2;
                v19 += 2;
                if (v18 == v17) {
                  goto LABEL_27;
                }
              }
              goto LABEL_12;
            }
LABEL_27:
            BOOL v22 = (char *)*((void *)v15 + 10);
            long long v21 = (char *)*((void *)v15 + 11);
            int v23 = *(_DWORD **)(v16 + 80);
            if (v21 - v22 != *(void *)(v16 + 88) - (void)v23) {
              goto LABEL_12;
            }
            if (v22 != v21)
            {
              while (*(_DWORD *)v22 == *v23 && *((_DWORD *)v22 + 1) == v23[1] && *((_DWORD *)v22 + 2) == v23[2])
              {
                v22 += 12;
                v23 += 3;
                if (v22 == v21) {
                  goto LABEL_33;
                }
              }
              goto LABEL_12;
            }
LABEL_33:
            v15 += 128;
            v16 += 128;
            if (v15 == v14) {
              goto LABEL_13;
            }
          }
          goto LABEL_12;
        }
      }
      else
      {
LABEL_12:
        uint64_t v3 = (__n128 *)((char *)v3 + 24);
        sub_BDE5B8((void **)v3, v12);
      }
LABEL_13:
      uint64_t v11 = (__n128 *)((char *)v12 + 24);
      if (&v12[1].n128_i8[8] == (__int8 *)a2) {
        return (__n128 *)((char *)v3 + 24);
      }
      continue;
    }
  }
  return v3;
}

uint64_t sub_C49400(uint64_t a1, void **a2, void **a3)
{
  if (**a2 == **a3 && *((_DWORD *)*a2 + 2) == *((_DWORD *)*a3 + 2) && *a2[1] == *a3[1])
  {
    unint64_t v4 = (unsigned __int8 *)*a2[2];
    uint64_t v3 = (unsigned __int8 *)a2[2][1];
    uint64_t v5 = (unsigned __int8 *)*a3[2];
    if (v3 - v4 == a3[2][1] - (void)v5)
    {
      if (v4 == v3)
      {
LABEL_12:
        int64_t v8 = (char *)*a2[3];
        uint64_t v7 = (char *)a2[3][1];
        uint64_t v9 = (_DWORD *)*a3[3];
        if (v7 - v8 == a3[3][1] - (void)v9)
        {
          uint64_t result = 1;
          if (v8 == v7) {
            return result;
          }
          while (*(_DWORD *)v8 == *v9 && *((_DWORD *)v8 + 1) == v9[1] && *((_DWORD *)v8 + 2) == v9[2])
          {
            v8 += 12;
            v9 += 3;
            if (v8 == v7) {
              return result;
            }
          }
        }
      }
      else
      {
        while (*v4 == *v5 && v4[1] == v5[1])
        {
          v4 += 2;
          v5 += 2;
          if (v4 == v3) {
            goto LABEL_12;
          }
        }
      }
    }
  }
  return 0;
}

char *sub_C4951C(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v9 = (0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) >> 33);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = (0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) >> 33);
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      unint64_t v13 = (char *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = *((void *)v13 + 1);
            if (v16 == v9)
            {
              if (*((_DWORD *)v13 + 5) == HIDWORD(v7) && *((_DWORD *)v13 + 4) == v7) {
                return v13;
              }
            }
            else if ((v16 & (v10 - 1)) != v4)
            {
              goto LABEL_31;
            }
            unint64_t v13 = *(char **)v13;
            if (!v13) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 5) == HIDWORD(v7) && *((_DWORD *)v13 + 4) == v7) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v4) {
              break;
            }
          }
          unint64_t v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  uint64_t v18 = (void *)(a1 + 16);
  unint64_t v13 = (char *)operator new(0x48uLL);
  *(void *)unint64_t v13 = 0;
  *((void *)v13 + 1) = v9;
  *((void *)v13 + 2) = **a4;
  *((void *)v13 + 3) = 0;
  v13[32] = 0;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (v10 && (float)(v20 * (float)v10) >= v19)
  {
    uint64_t v21 = *(void *)a1;
    BOOL v22 = *(void **)(*(void *)a1 + 8 * v4);
    if (v22)
    {
LABEL_34:
      *(void *)unint64_t v13 = *v22;
LABEL_69:
      *BOOL v22 = v13;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v23 = 1;
    if (v10 >= 3) {
      BOOL v23 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v10);
    unint64_t v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25) {
      size_t prime = v25;
    }
    else {
      size_t prime = v24;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_45;
    }
    if (prime < v10)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (prime <= v27) {
        size_t prime = v27;
      }
      if (prime < v10) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v30 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v4 = v9 % v10;
        uint64_t v21 = *(void *)a1;
        BOOL v22 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v22) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v9;
        uint64_t v21 = *(void *)a1;
        BOOL v22 = *(void **)(*(void *)a1 + 8 * v9);
        if (v22) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v30 & v9;
      uint64_t v21 = *(void *)a1;
      BOOL v22 = *(void **)(*(void *)a1 + 8 * (v30 & v9));
      if (v22) {
        goto LABEL_34;
      }
    }
  }
  *(void *)unint64_t v13 = *v18;
  void *v18 = v13;
  *(void *)(v21 + 8 * v4) = v18;
  if (*(void *)v13)
  {
    unint64_t v31 = *(void *)(*(void *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v31 >= v10) {
        v31 %= v10;
      }
    }
    else
    {
      v31 &= v10 - 1;
    }
    BOOL v22 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_C49890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_C38CF4(v11, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_C498AC(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  char v4 = 8;
  strcpy((char *)__p, "fill_in_");
  sub_C50BD8((char *)(a1 + 40), (long long *)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_C49934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_C49950@<Q0>(uint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  float64x2_t v5 = *(float64x2_t *)(a1 + 16);
  *(float64x2_t *)a1 = vaddq_f64(*a2, *(float64x2_t *)a1);
  *(float64x2_t *)(a1 + 16) = vaddq_f64(a2[1], v5);
  *(double *)(a1 + 32) = a2[2].f64[0] + *(double *)(a1 + 32);
  uint64_t v6 = a1 + 40;
  sub_C50C4C(a1 + 40, (uint64_t)&a2[2].f64[1], (uint64_t)&__p);
  if (v15 < 0) {
    operator delete(__p);
  }
  long long v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 16) = v7;
  *(void *)(a3 + 32) = *(void *)(a1 + 32);
  unint64_t v8 = (unsigned char *)(a3 + 40);
  if (*(char *)(a1 + 63) < 0)
  {
    sub_4200(v8, *(void **)(a1 + 40), *(void *)(a1 + 48));
  }
  else
  {
    *(_OWORD *)unint64_t v8 = *(_OWORD *)v6;
    *(void *)(a3 + 56) = *(void *)(v6 + 16);
  }
  long long v9 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a3 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a3 + 144) = v9;
  long long v10 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a3 + 160) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a3 + 176) = v10;
  long long v11 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a3 + 80) = v11;
  __n128 result = *(__n128 *)(a1 + 96);
  long long v13 = *(_OWORD *)(a1 + 112);
  *(__n128 *)(a3 + 96) = result;
  *(_OWORD *)(a3 + 112) = v13;
  return result;
}

uint64_t sub_C49A2C(uint64_t *a1, char *a2, char *a3, void *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    long long v11 = (char *)operator new(48 * v10);
  }
  else
  {
    long long v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_C49BFC(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  unint64_t v14 = (char *)*a1;
  char v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    uint64_t v18 = (char *)*a1;
    char v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      char v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C49BE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C49BFC(int a1, uint64_t a2, char *__s, char *a4, void *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (long long *)operator new(v13 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v17 = v14 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v17;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = *a5;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = *a5;
  *(_DWORD *)(a2 + 40) = 1;
  char v15 = (void *)__dst;

  operator delete(v15);
}

void sub_C49D54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C49D68(uint64_t *a1, char *a2, char *a3, void *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    long long v11 = (char *)operator new(48 * v10);
  }
  else
  {
    long long v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_C49F38(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  char v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    uint64_t v18 = (char *)*a1;
    char v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      char v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C49F24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C49F38(int a1, uint64_t a2, char *__s, char *a4, void *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (long long *)operator new(v13 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v17 = v14 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v17;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = *a5;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = *a5;
  *(_DWORD *)(a2 + 40) = 1;
  char v15 = (void *)__dst;

  operator delete(v15);
}

void sub_C4A090(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C4A0A4(uint64_t *a1, char *a2, char *a3, void *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    long long v11 = (char *)operator new(48 * v10);
  }
  else
  {
    long long v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_C4A274(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  char v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    uint64_t v18 = (char *)*a1;
    char v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      char v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C4A260(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C4A274(int a1, uint64_t a2, char *__s, char *a4, void *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (long long *)operator new(v13 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v17 = v14 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v17;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = *a5;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = *a5;
  *(_DWORD *)(a2 + 40) = 1;
  char v15 = (void *)__dst;

  operator delete(v15);
}

void sub_C4A3CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C4A3E0(uint64_t a1)
{
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  char v4 = 0;
  LOBYTE(__p[0]) = 0;
  sub_C50BD8((char *)(a1 + 272), (long long *)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_C498AC(a1 + 424);
  LODWORD(__p[0]) = 0;
  sub_C556A0(a1 + 616, __p);
  LODWORD(__p[0]) = 1;
  sub_C556A0(a1 + 752, __p);
  LODWORD(__p[0]) = 2;
  sub_C556A0(a1 + 888, __p);
  LODWORD(__p[0]) = 3;
  sub_C556A0(a1 + 1024, __p);
  char v4 = 0;
  LOBYTE(__p[0]) = 0;
  sub_C4CC40((char *)(a1 + 1160), (long long *)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_C4A4F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v15 + 487) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v15 + 295) & 0x80000000) == 0)
      {
LABEL_8:
        if (*(char *)(v15 + 55) < 0) {
          operator delete(*(void **)(v15 + 32));
        }
        _Unwind_Resume(exception_object);
      }
LABEL_7:
      operator delete(*v16);
      goto LABEL_8;
    }
  }
  else if ((*(char *)(v15 + 487) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v15 + 464));
  if ((*(char *)(v15 + 295) & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_C4A5A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    JUMPOUT(0xC4A588);
  }
  JUMPOUT(0xC4A58CLL);
}

uint64_t sub_C4A5BC(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a1 + 16);
  *(double *)(a1 + 24) = *(double *)(a2 + 24) + *(double *)(a1 + 24);
  *(float64x2_t *)a1 = vaddq_f64(*(float64x2_t *)a2, *(float64x2_t *)a1);
  *(double *)(a1 + 16) = *(double *)(a2 + 16) + v4;
  unint64_t v5 = (std::string *)(a1 + 32);
  unint64_t v6 = (const std::string *)(a2 + 32);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 55);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = *(unsigned __int8 *)(a1 + 55);
  }
  else {
    uint64_t v8 = *(void *)(a1 + 40);
  }
  if (!v8)
  {
    std::string::operator=((std::string *)(a1 + 32), v6);
    goto LABEL_20;
  }
  uint64_t v9 = *(unsigned __int8 *)(a2 + 55);
  int v10 = (char)v9;
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *(void *)(a2 + 40);
  }
  if (v9)
  {
    if (v8 == v9)
    {
      if (v10 < 0) {
        unint64_t v6 = (const std::string *)v6->__r_.__value_.__r.__words[0];
      }
      if ((v7 & 0x80) != 0)
      {
        if (!memcmp(v5->__r_.__value_.__l.__data_, v6, *(void *)(a1 + 40))) {
          goto LABEL_20;
        }
      }
      else
      {
        if (!*(unsigned char *)(a1 + 55)) {
          goto LABEL_20;
        }
        long long v11 = (unsigned __int8 *)(a1 + 32);
        while (*v11 == v6->__r_.__value_.__s.__data_[0])
        {
          ++v11;
          unint64_t v6 = (const std::string *)((char *)v6 + 1);
          if (!--v7) {
            goto LABEL_20;
          }
        }
      }
    }
    std::string::assign(v5, "various");
  }
LABEL_20:
  *(float64x2_t *)(a1 + 56) = vaddq_f64(*(float64x2_t *)(a2 + 56), *(float64x2_t *)(a1 + 56));
  *(float64x2_t *)(a1 + 72) = vaddq_f64(*(float64x2_t *)(a2 + 72), *(float64x2_t *)(a1 + 72));
  *(float64x2_t *)(a1 + 88) = vaddq_f64(*(float64x2_t *)(a2 + 88), *(float64x2_t *)(a1 + 88));
  *(float64x2_t *)(a1 + 104) = vaddq_f64(*(float64x2_t *)(a2 + 104), *(float64x2_t *)(a1 + 104));
  *(float64x2_t *)(a1 + 120) = vaddq_f64(*(float64x2_t *)(a2 + 120), *(float64x2_t *)(a1 + 120));
  *(float64x2_t *)(a1 + 136) = vaddq_f64(*(float64x2_t *)(a2 + 136), *(float64x2_t *)(a1 + 136));
  *(float64x2_t *)(a1 + 152) = vaddq_f64(*(float64x2_t *)(a2 + 152), *(float64x2_t *)(a1 + 152));
  *(float64x2_t *)(a1 + 168) = vaddq_f64(*(float64x2_t *)(a2 + 168), *(float64x2_t *)(a1 + 168));
  *(float64x2_t *)(a1 + 184) = vaddq_f64(*(float64x2_t *)(a2 + 184), *(float64x2_t *)(a1 + 184));
  *(float64x2_t *)(a1 + 200) = vaddq_f64(*(float64x2_t *)(a2 + 200), *(float64x2_t *)(a1 + 200));
  *(float64x2_t *)(a1 + 216) = vaddq_f64(*(float64x2_t *)(a2 + 216), *(float64x2_t *)(a1 + 216));
  *(float64x2_t *)(a1 + 232) = vaddq_f64(*(float64x2_t *)(a2 + 232), *(float64x2_t *)(a1 + 232));
  *(float64x2_t *)(a1 + 248) = vaddq_f64(*(float64x2_t *)(a2 + 248), *(float64x2_t *)(a1 + 248));
  *(double *)(a1 + 264) = *(double *)(a2 + 264) + *(double *)(a1 + 264);
  sub_C50C4C(a1 + 272, a2 + 272, (uint64_t)&v16);
  if (v17 < 0)
  {
    operator delete(v16);
    sub_C49950(a1 + 424, (float64x2_t *)(a2 + 424), (uint64_t)v13);
    if ((v15 & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_24:
    operator delete(__p);
    goto LABEL_22;
  }
  sub_C49950(a1 + 424, (float64x2_t *)(a2 + 424), (uint64_t)v13);
  if (v15 < 0) {
    goto LABEL_24;
  }
LABEL_22:
  sub_C556D0(a1 + 616, a2 + 616);
  sub_C556D0(a1 + 752, a2 + 752);
  sub_C556D0(a1 + 888, a2 + 888);
  sub_C556D0(a1 + 1024, a2 + 1024);
  sub_C4CCA8(a1 + 1160, a2 + 1160);
  return a1;
}

void sub_C4A83C(double *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "JourneyPlannerModule");
  LOBYTE(v53[0]) = 1;
  unint64_t v4 = *(void *)(a2 + 40);
  v57[0] = (const void *)llround(*a1);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v5 >= v4)
  {
    unint64_t v6 = sub_C49A2C((uint64_t *)(a2 + 24), "Runtime", (char *)v53, v57);
  }
  else
  {
    sub_C49BFC(a2 + 40, *(void *)(a2 + 32), "Runtime", (char *)v53, v57);
    unint64_t v6 = v5 + 48;
    *(void *)(a2 + 32) = v6;
  }
  *(void *)(a2 + 32) = v6;
  LOBYTE(v53[0]) = 1;
  v57[0] = (const void *)llround(a1[78] + a1[95]);
  if (v6 >= *(void *)(a2 + 40))
  {
    unint64_t v7 = sub_C4BC14((uint64_t *)(a2 + 24), "Runtime.InitialWalking", (char *)v53, v57);
  }
  else
  {
    sub_C4BDE4(a2 + 40, v6, "Runtime.InitialWalking", (char *)v53, v57);
    unint64_t v7 = v6 + 48;
    *(void *)(a2 + 32) = v7;
  }
  *(void *)(a2 + 32) = v7;
  LOBYTE(v53[0]) = 1;
  v57[0] = (const void *)llround(a1[112]);
  if (v7 >= *(void *)(a2 + 40))
  {
    unint64_t v8 = sub_C4BF50((uint64_t *)(a2 + 24), "Runtime.DirectWalking", (char *)v53, v57);
  }
  else
  {
    sub_C4C120(a2 + 40, v7, "Runtime.DirectWalking", (char *)v53, v57);
    unint64_t v8 = v7 + 48;
    *(void *)(a2 + 32) = v8;
  }
  *(void *)(a2 + 32) = v8;
  LOBYTE(v53[0]) = 1;
  v57[0] = (const void *)llround(a1[1] + a1[2]);
  if (v8 >= *(void *)(a2 + 40))
  {
    unint64_t v9 = sub_C4BF50((uint64_t *)(a2 + 24), "Runtime.Preprocessing", (char *)v53, v57);
  }
  else
  {
    sub_C4C120(a2 + 40, v8, "Runtime.Preprocessing", (char *)v53, v57);
    unint64_t v9 = v8 + 48;
    *(void *)(a2 + 32) = v9;
  }
  *(void *)(a2 + 32) = v9;
  LOBYTE(v53[0]) = 1;
  v57[0] = (const void *)llround(a1[7]);
  if (v9 >= *(void *)(a2 + 40))
  {
    unint64_t v10 = sub_C4C28C((uint64_t *)(a2 + 24), "Runtime.JourneyPlanningAlgorithm", (char *)v53, v57);
  }
  else
  {
    sub_C4C45C(a2 + 40, v9, "Runtime.JourneyPlanningAlgorithm", (char *)v53, v57);
    unint64_t v10 = v9 + 48;
    *(void *)(a2 + 32) = v10;
  }
  double v11 = a1[28];
  double v12 = a1[8]
      + a1[9]
      + a1[10]
      + a1[13]
      + a1[14]
      + a1[15]
      + a1[16]
      + a1[17]
      + a1[18]
      + a1[19]
      + a1[20]
      + a1[21]
      + a1[22]
      + a1[23]
      + a1[24]
      + a1[25]
      + a1[26]
      + a1[27];
  *(void *)(a2 + 32) = v10;
  LOBYTE(v53[0]) = 1;
  v57[0] = (const void *)llround(v12 + v11 + a1[29]);
  if (v10 >= *(void *)(a2 + 40))
  {
    unint64_t v13 = sub_C4BC14((uint64_t *)(a2 + 24), "Runtime.Postprocessing", (char *)v53, v57);
  }
  else
  {
    sub_C4BDE4(a2 + 40, v10, "Runtime.Postprocessing", (char *)v53, v57);
    unint64_t v13 = v10 + 48;
    *(void *)(a2 + 32) = v13;
  }
  *(void *)(a2 + 32) = v13;
  LOBYTE(v53[0]) = 1;
  v57[0] = (const void *)llround(a1[11]);
  if (v13 >= *(void *)(a2 + 40))
  {
    unint64_t v14 = sub_C4C5C8((uint64_t *)(a2 + 24), "RunTime.FareCalculation", (char *)v53, v57);
  }
  else
  {
    sub_C4C798(a2 + 40, v13, "RunTime.FareCalculation", (char *)v53, v57);
    unint64_t v14 = v13 + 48;
    *(void *)(a2 + 32) = v14;
  }
  *(void *)(a2 + 32) = v14;
  LOBYTE(v53[0]) = 1;
  v57[0] = (const void *)llround(a1[12]);
  if (v14 >= *(void *)(a2 + 40))
  {
    unint64_t v15 = sub_C4C5C8((uint64_t *)(a2 + 24), "RunTime.RealtimeUpdates", (char *)v53, v57);
  }
  else
  {
    sub_C4C798(a2 + 40, v14, "RunTime.RealtimeUpdates", (char *)v53, v57);
    unint64_t v15 = v14 + 48;
    *(void *)(a2 + 32) = v15;
  }
  *(void *)(a2 + 32) = v15;
  LOBYTE(v53[0]) = 1;
  v57[0] = (const void *)llround(a1[129]);
  if (v15 >= *(void *)(a2 + 40))
  {
    unint64_t v16 = sub_C4C904((uint64_t *)(a2 + 24), "Runtime.WalkingUnpacking", (char *)v53, v57);
  }
  else
  {
    sub_C4CAD4(a2 + 40, v15, "Runtime.WalkingUnpacking", (char *)v53, v57);
    unint64_t v16 = v15 + 48;
    *(void *)(a2 + 32) = v16;
  }
  *(void *)(a2 + 32) = v16;
  LOBYTE(v53[0]) = 4;
  v57[0] = (const void *)llround(a1[30]);
  if (v16 >= *(void *)(a2 + 40))
  {
    unint64_t v17 = sub_C4A0A4((uint64_t *)(a2 + 24), "Iterations", (char *)v53, v57);
  }
  else
  {
    sub_C4A274(a2 + 40, v16, "Iterations", (char *)v53, v57);
    unint64_t v17 = v16 + 48;
    *(void *)(a2 + 32) = v17;
  }
  *(void *)(a2 + 32) = v17;
  LOBYTE(v53[0]) = 4;
  v57[0] = (const void *)llround(a1[33]);
  if (v17 >= *(void *)(a2 + 40))
  {
    uint64_t v18 = sub_C4C904((uint64_t *)(a2 + 24), "WalkingUnpackingFailures", (char *)v53, v57);
  }
  else
  {
    sub_C4CAD4(a2 + 40, v17, "WalkingUnpackingFailures", (char *)v53, v57);
    uint64_t v18 = v17 + 48;
    *(void *)(a2 + 32) = v17 + 48;
  }
  *(void *)(a2 + 32) = v18;
  uint64_t v61 = a2 + 24;
  sub_C50D58((uint64_t)(a1 + 34), (uint64_t)v57);
  sub_C4B2F8(&v61, v57);
  sub_C55858(a1 + 77, (uint64_t)v53);
  sub_C4B2F8(&v61, v53);
  sub_C55858(a1 + 94, (uint64_t)v49);
  sub_C4B2F8(&v61, (const void **)v49);
  sub_C55858(a1 + 111, (uint64_t)v45);
  sub_C4B2F8(&v61, (const void **)v45);
  sub_C55858(a1 + 128, (uint64_t)v41);
  sub_C4B2F8(&v61, (const void **)v41);
  sub_C4CCFC(a1 + 145, (uint64_t)v37);
  sub_C4B2F8(&v61, (const void **)v37);
  float v19 = (void **)__p;
  if (__p)
  {
    uint64_t v20 = v40;
    uint64_t v21 = __p;
    if (v40 != __p)
    {
      do
      {
        if (*((char *)v20 - 25) < 0) {
          operator delete(*(v20 - 6));
        }
        v20 -= 6;
      }
      while (v20 != v19);
      uint64_t v21 = __p;
    }
    uint64_t v40 = v19;
    operator delete(v21);
  }
  if (v38 < 0) {
    operator delete(v37[0]);
  }
  BOOL v22 = (void **)v43;
  if (v43)
  {
    BOOL v23 = v44;
    unint64_t v24 = v43;
    if (v44 != v43)
    {
      do
      {
        if (*((char *)v23 - 25) < 0) {
          operator delete(*(v23 - 6));
        }
        v23 -= 6;
      }
      while (v23 != v22);
      unint64_t v24 = v43;
    }
    long long v44 = v22;
    operator delete(v24);
  }
  if (v42 < 0) {
    operator delete(v41[0]);
  }
  unint64_t v25 = (void **)v47;
  if (v47)
  {
    int v26 = v48;
    unint64_t v27 = v47;
    if (v48 != v47)
    {
      do
      {
        if (*((char *)v26 - 25) < 0) {
          operator delete(*(v26 - 6));
        }
        v26 -= 6;
      }
      while (v26 != v25);
      unint64_t v27 = v47;
    }
    long long v48 = v25;
    operator delete(v27);
  }
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  uint8x8_t v28 = (void **)v51;
  if (v51)
  {
    uint64_t v29 = v52;
    unint64_t v30 = v51;
    if (v52 != v51)
    {
      do
      {
        if (*((char *)v29 - 25) < 0) {
          operator delete(*(v29 - 6));
        }
        v29 -= 6;
      }
      while (v29 != v28);
      unint64_t v30 = v51;
    }
    uint64_t v52 = v28;
    operator delete(v30);
  }
  if (v50 < 0) {
    operator delete(v49[0]);
  }
  unint64_t v31 = v55;
  if (v55)
  {
    unint64_t v32 = v56;
    unint64_t v33 = v55;
    if (v56 != v55)
    {
      do
      {
        if (*((char *)v32 - 25) < 0) {
          operator delete(*(v32 - 6));
        }
        v32 -= 6;
      }
      while (v32 != v31);
      unint64_t v33 = v55;
    }
    std::string v56 = v31;
    operator delete(v33);
  }
  if (v54 < 0) {
    operator delete((void *)v53[0]);
  }
  unint64_t v34 = v59;
  if (v59)
  {
    uint64_t v35 = v60;
    long long v36 = v59;
    if (v60 != v59)
    {
      do
      {
        if (*((char *)v35 - 25) < 0) {
          operator delete(*(v35 - 6));
        }
        v35 -= 6;
      }
      while (v35 != v34);
      long long v36 = v59;
    }
    std::string v60 = v34;
    operator delete(v36);
  }
  if (v58 < 0) {
    operator delete((void *)v57[0]);
  }
}

void sub_C4B050(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4B064(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4B07C(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4B090(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4B0A8(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4B0BC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4B0D4(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4B0E8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4B100(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4B114(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4B12C(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4B140(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4B158(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4B16C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4B184(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4B198(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4B1B0(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4B1C4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4B1DC(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4B1F0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4B208(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4B21C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4B234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_A3A4((uint64_t)&a10);
  sub_A3A4((uint64_t)&a16);
  sub_A3A4((uint64_t)&a22);
  sub_A3A4((uint64_t)&a28);
  sub_A3A4(v29 - 152);
  sub_A3A4(v29 - 104);
  sub_A3A4(v28);
  _Unwind_Resume(a1);
}

void sub_C4B290()
{
}

void sub_C4B298()
{
}

void sub_C4B2A0()
{
}

void sub_C4B2A8()
{
}

void sub_C4B2B0(_Unwind_Exception *a1)
{
  sub_A3A4(v2 - 104);
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4B2D0(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4B2E4(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4B2F8(uint64_t *a1, const void **a2)
{
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v5)
  {
    unint64_t v6 = v5 + 1;
    if (v5 + 1 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v6 > 0x16)
    {
      uint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17) {
        uint64_t v10 = v6 | 7;
      }
      uint64_t v11 = v10 + 1;
      p_dst = (void **)operator new(v10 + 1);
      size_t v30 = v5 + 1;
      int64_t v31 = v11 | 0x8000000000000000;
      long long __dst = p_dst;
    }
    else
    {
      size_t v30 = 0;
      int64_t v31 = 0;
      long long __dst = 0;
      p_dst = (void **)&__dst;
      HIBYTE(v31) = v5 + 1;
    }
    if (v4 >= 0) {
      double v12 = a2;
    }
    else {
      double v12 = *a2;
    }
    memmove(p_dst, v12, v5);
    *(_WORD *)((char *)p_dst + v5) = 46;
    unint64_t v8 = (const void **)a2[3];
    unint64_t v9 = (const void **)a2[4];
    if (v8 != v9) {
      goto LABEL_18;
    }
  }
  else
  {
    HIBYTE(v31) = 0;
    LOBYTE(__dst) = 0;
    unint64_t v8 = (const void **)a2[3];
    unint64_t v9 = (const void **)a2[4];
    if (v8 != v9)
    {
LABEL_18:
      uint64_t v13 = *a1;
      uint64_t v14 = *(void *)(v13 + 8);
      int v28 = SHIBYTE(v31);
      if (v31 >= 0) {
        size_t v15 = HIBYTE(v31);
      }
      else {
        size_t v15 = v30;
      }
      while (1)
      {
        int v16 = *((char *)v8 + 23);
        if (v16 >= 0) {
          size_t v17 = *((unsigned __int8 *)v8 + 23);
        }
        else {
          size_t v17 = (size_t)v8[1];
        }
        unint64_t v18 = v17 + v15;
        if (v17 + v15 > 0x7FFFFFFFFFFFFFF7) {
          sub_188D690();
        }
        if (v18 > 0x16) {
          break;
        }
        unint64_t v38 = 0;
        long long v37 = 0uLL;
        float v19 = &v37;
        HIBYTE(v38) = v17 + v15;
        if (v15) {
          goto LABEL_28;
        }
LABEL_32:
        uint64_t v21 = (char *)v19 + v15;
        if (v17)
        {
          if (v16 >= 0) {
            BOOL v22 = v8;
          }
          else {
            BOOL v22 = *v8;
          }
          memmove(v21, v22, v17);
        }
        v21[v17] = 0;
        char v23 = *((unsigned char *)v8 + 24);
        if (SHIBYTE(v38) < 0)
        {
          int v26 = (void *)v37;
          sub_4200(__p, (void *)v37, *((unint64_t *)&v37 + 1));
          char v34 = v23;
          uint64_t v35 = v8[4];
          int v36 = 1;
          operator delete(v26);
        }
        else
        {
          *(_OWORD *)long long __p = v37;
          unint64_t v33 = v38;
          char v34 = v23;
          uint64_t v35 = v8[4];
          int v36 = 1;
        }
        uint64_t v27 = sub_C4B620((void ***)v13, v14, (uint64_t)__p);
        if (SHIBYTE(v33) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v14 = v27 + 48;
        v8 += 6;
        if (v8 == v9)
        {
          if ((v28 & 0x80) != 0) {
            goto LABEL_47;
          }
          return;
        }
      }
      uint64_t v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17) {
        uint64_t v24 = v18 | 7;
      }
      uint64_t v25 = v24 + 1;
      float v19 = (long long *)operator new(v24 + 1);
      *((void *)&v37 + 1) = v17 + v15;
      unint64_t v38 = v25 | 0x8000000000000000;
      *(void *)&long long v37 = v19;
      if (!v15) {
        goto LABEL_32;
      }
LABEL_28:
      if (v28 >= 0) {
        uint64_t v20 = (void **)&__dst;
      }
      else {
        uint64_t v20 = __dst;
      }
      memmove(v19, v20, v15);
      goto LABEL_32;
    }
  }
  if (v31 < 0) {
LABEL_47:
  }
    operator delete(__dst);
}

void sub_C4B5B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  operator delete(v19);
  if ((a10 & 0x80000000) == 0) {
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_C4B620(void ***a1, uint64_t a2, uint64_t a3)
{
  size_t v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 48;
  uint64_t v8 = (uint64_t)&(*a1)[6 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v5) >> 4) + 1;
    if (v24 > 0x555555555555555) {
      sub_2E00();
    }
    unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v5) >> 4);
    if (2 * v25 > v24) {
      unint64_t v24 = 2 * v25;
    }
    if (v25 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v26 = 0x555555555555555;
    }
    else {
      unint64_t v26 = v24;
    }
    long long v53 = a1 + 2;
    if (v26)
    {
      if (v26 > 0x555555555555555) {
        sub_188D718();
      }
      uint64_t v27 = (void **)operator new(48 * v26);
    }
    else
    {
      uint64_t v27 = 0;
    }
    uint64_t v49 = v27;
    char v50 = &v27[6 * v7];
    unint64_t v51 = v50;
    uint64_t v52 = (char *)&v27[6 * v26];
    sub_C4B9E8((uint64_t)&v49, (long long *)a3);
    char v34 = v50;
    uint64_t v35 = *a1;
    int v36 = v50;
    if (*a1 != (void **)v8)
    {
      long long v37 = v50;
      uint64_t v38 = v8;
      do
      {
        int v36 = v37 - 6;
        long long v39 = *(_OWORD *)(v38 - 48);
        *(v37 - 4) = *(void **)(v38 - 32);
        *((_OWORD *)v37 - 3) = v39;
        *(void *)(v38 - 40) = 0;
        *(void *)(v38 - 32) = 0;
        *(void *)(v38 - 48) = 0;
        long long v40 = *(_OWORD *)(v38 - 24);
        *((_DWORD *)v37 - 2) = *(_DWORD *)(v38 - 8);
        *(_OWORD *)(v37 - 3) = v40;
        v37 -= 6;
        v38 -= 48;
      }
      while ((void **)v38 != v35);
    }
    char v50 = v36;
    unint64_t v41 = a1[1];
    char v42 = v51;
    if (v41 != (void **)v8)
    {
      do
      {
        long long v43 = *(_OWORD *)v8;
        v42[2] = *(void **)(v8 + 16);
        *(_OWORD *)char v42 = v43;
        *(void *)(v8 + 8) = 0;
        *(void *)(v8 + 16) = 0;
        *(void *)uint64_t v8 = 0;
        long long v44 = *(_OWORD *)(v8 + 24);
        *((_DWORD *)v42 + 10) = *(_DWORD *)(v8 + 40);
        *(_OWORD *)(v42 + 3) = v44;
        v42 += 6;
        v8 += 48;
      }
      while ((void **)v8 != v41);
      int v36 = v50;
      uint64_t v8 = (uint64_t)a1[1];
    }
    int v45 = *a1;
    *a1 = v36;
    a1[1] = v42;
    char v46 = (char *)a1[2];
    a1[2] = (void **)v52;
    unint64_t v51 = (void **)v8;
    uint64_t v52 = v46;
    uint64_t v49 = v45;
    char v50 = v45;
    if ((void **)v8 == v45)
    {
      if (!v8) {
        return (uint64_t)v34;
      }
    }
    else
    {
      do
      {
        long long v48 = (void **)(v8 - 48);
        unint64_t v51 = (void **)(v8 - 48);
        if (*(char *)(v8 - 25) < 0)
        {
          operator delete(*v48);
          long long v48 = v51;
        }
        uint64_t v8 = (uint64_t)v48;
      }
      while (v48 != v45);
      uint64_t v8 = (uint64_t)v49;
      if (!v49) {
        return (uint64_t)v34;
      }
    }
    operator delete((void *)v8);
    return (uint64_t)v34;
  }
  if (v8 == v6)
  {
    long long v31 = *(_OWORD *)a3;
    *(void *)(v8 + 16) = *(void *)(a3 + 16);
    *(_OWORD *)uint64_t v8 = v31;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    unint64_t v32 = &v5[6 * v7];
    long long v33 = *(_OWORD *)(a3 + 24);
    *((_DWORD *)v32 + 10) = *(_DWORD *)(a3 + 40);
    *(_OWORD *)(v32 + 3) = v33;
    a1[1] = (void **)(v8 + 48);
  }
  else
  {
    uint64_t v10 = v8 + 48;
    unint64_t v11 = v6 - 48;
    double v12 = a1[1];
    if (v6 >= 0x30)
    {
      do
      {
        long long v13 = *(_OWORD *)v11;
        v12[2] = *(void **)(v11 + 16);
        *(_OWORD *)double v12 = v13;
        *(void *)(v11 + 8) = 0;
        *(void *)(v11 + 16) = 0;
        *(void *)unint64_t v11 = 0;
        long long v14 = *(_OWORD *)(v11 + 24);
        *((_DWORD *)v12 + 10) = *(_DWORD *)(v11 + 40);
        *(_OWORD *)(v12 + 3) = v14;
        v12 += 6;
        v11 += 48;
      }
      while (v11 < v6);
    }
    a1[1] = v12;
    if (v6 != v10)
    {
      unint64_t v15 = 0;
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v10) >> 4);
      size_t v17 = &v5[6 * v7] + 6 * v16;
      uint64_t v18 = -48 * v16;
      do
      {
        unint64_t v22 = v6 + v15;
        char v23 = (void **)(v6 + v15 - 48);
        if (*(char *)(v6 + v15 - 25) < 0) {
          operator delete(*v23);
        }
        float v19 = (long long *)&v17[v15 / 8 - 6];
        long long v20 = *v19;
        *(void *)(v6 + v15 - 32) = v17[v15 / 8 - 4];
        *(_OWORD *)char v23 = v20;
        *((unsigned char *)&v17[v15 / 8 - 3] - 1) = 0;
        *(unsigned char *)float v19 = 0;
        long long v21 = *(_OWORD *)&v17[v15 / 8 - 3];
        *(_DWORD *)(v22 - 8) = v17[v15 / 8 - 1];
        *(_OWORD *)(v22 - 24) = v21;
        v15 -= 48;
      }
      while (v18 != v15);
    }
    if (*(char *)(v8 + 23) < 0) {
      operator delete(*(void **)v8);
    }
    long long v28 = *(_OWORD *)a3;
    *(void *)(v8 + 16) = *(void *)(a3 + 16);
    *(_OWORD *)uint64_t v8 = v28;
    *(unsigned char *)(a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
    uint64_t v29 = &v5[6 * v7];
    long long v30 = *(_OWORD *)(a3 + 24);
    *((_DWORD *)v29 + 10) = *(_DWORD *)(a3 + 40);
    *(_OWORD *)(v29 + 3) = v30;
  }
  return v8;
}

void sub_C4B9D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_C4B9E8(uint64_t a1, long long *a2)
{
  int v4 = *(long long **)(a1 + 16);
  if (v4 == *(long long **)(a1 + 24))
  {
    size_t v5 = *(long long **)a1;
    unint64_t v6 = *(long long **)(a1 + 8);
    if ((unint64_t)v6 <= *(void *)a1)
    {
      unint64_t v15 = 0x5555555555555556 * (v4 - v5);
      if (v4 == v5) {
        unint64_t v15 = 1;
      }
      if (v15 >= 0x555555555555556) {
        sub_188D718();
      }
      unint64_t v16 = v15 >> 2;
      uint64_t v17 = 48 * v15;
      uint64_t v18 = (char *)operator new(48 * v15);
      float v19 = &v18[48 * v16];
      long long v20 = &v18[v17];
      if (v4 == v6)
      {
        *(void *)a1 = v18;
        *(void *)(a1 + 8) = v19;
        *(void *)(a1 + 16) = v19;
        *(void *)(a1 + 24) = v20;
      }
      else
      {
        long long v21 = &v19[(char *)v4 - (char *)v6];
        uint64_t v22 = 48 * v16;
        do
        {
          char v23 = &v18[v22];
          long long v24 = *v6;
          *((void *)v23 + 2) = *((void *)v6 + 2);
          *(_OWORD *)char v23 = v24;
          *((void *)v6 + 1) = 0;
          *((void *)v6 + 2) = 0;
          *(void *)unint64_t v6 = 0;
          long long v25 = *(long long *)((char *)v6 + 24);
          *((_DWORD *)v23 + 10) = *((_DWORD *)v6 + 10);
          *(_OWORD *)(v23 + 24) = v25;
          v22 += 48;
          v6 += 3;
        }
        while (v23 + 48 != v21);
        size_t v5 = *(long long **)a1;
        uint64_t v26 = *(void *)(a1 + 8);
        uint64_t v27 = *(void *)(a1 + 16);
        *(void *)a1 = v18;
        *(void *)(a1 + 8) = v19;
        *(void *)(a1 + 16) = v21;
        *(void *)(a1 + 24) = v20;
        while (v27 != v26)
        {
          if (*(char *)(v27 - 25) < 0) {
            operator delete(*(void **)(v27 - 48));
          }
          v27 -= 48;
        }
      }
      if (v5) {
        operator delete(v5);
      }
      int v4 = *(long long **)(a1 + 16);
    }
    else
    {
      int64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *(void *)a1) >> 4);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      if (v6 == v4)
      {
        long long v28 = &v6[-3 * v9];
      }
      else
      {
        uint64_t v11 = -3 * v9;
        do
        {
          long long v14 = &v6[v11];
          if (SBYTE7(v6[v11 + 1]) < 0) {
            operator delete(*(void **)v14);
          }
          long long v12 = *v6;
          *((void *)v14 + 2) = *((void *)v6 + 2);
          long long *v14 = v12;
          *((unsigned char *)v6 + 23) = 0;
          *(unsigned char *)unint64_t v6 = 0;
          long long v13 = *(long long *)((char *)v6 + 24);
          *((_DWORD *)v14 + 10) = *((_DWORD *)v6 + 10);
          *(long long *)((char *)v14 + 24) = v13;
          v6 += 3;
        }
        while (v6 != v4);
        int v4 = *(long long **)(a1 + 8);
        long long v28 = &v6[3 * v10];
      }
      *(void *)(a1 + 8) = &v4[3 * v10];
      *(void *)(a1 + 16) = v28;
      int v4 = v28;
    }
  }
  long long v29 = *a2;
  *((void *)v4 + 2) = *((void *)a2 + 2);
  *int v4 = v29;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  __n128 result = *(__n128 *)((char *)a2 + 24);
  *((_DWORD *)v4 + 10) = *((_DWORD *)a2 + 10);
  *(long long *)((char *)v4 + 24) = (__int128)result;
  *(void *)(a1 + 16) += 48;
  return result;
}

uint64_t sub_C4BC14(uint64_t *a1, char *a2, char *a3, void *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  long long v21 = &v11[48 * v10];
  sub_C4BDE4(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  long long v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    uint64_t v18 = (char *)*a1;
    unint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      unint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C4BDD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C4BDE4(int a1, uint64_t a2, char *__s, char *a4, void *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (long long *)operator new(v13 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v17 = v14 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v17;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = *a5;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = *a5;
  *(_DWORD *)(a2 + 40) = 1;
  unint64_t v15 = (void *)__dst;

  operator delete(v15);
}

void sub_C4BF3C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C4BF50(uint64_t *a1, char *a2, char *a3, void *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  long long v21 = &v11[48 * v10];
  sub_C4C120(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    uint64_t v18 = (char *)*a1;
    unint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      unint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C4C10C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C4C120(int a1, uint64_t a2, char *__s, char *a4, void *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (long long *)operator new(v13 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v17 = v14 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v17;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = *a5;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = *a5;
  *(_DWORD *)(a2 + 40) = 1;
  unint64_t v15 = (void *)__dst;

  operator delete(v15);
}

void sub_C4C278(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C4C28C(uint64_t *a1, char *a2, char *a3, void *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  long long v21 = &v11[48 * v10];
  sub_C4C45C(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    uint64_t v18 = (char *)*a1;
    unint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      unint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C4C448(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C4C45C(int a1, uint64_t a2, char *__s, char *a4, void *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (long long *)operator new(v13 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v17 = v14 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v17;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = *a5;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = *a5;
  *(_DWORD *)(a2 + 40) = 1;
  unint64_t v15 = (void *)__dst;

  operator delete(v15);
}

void sub_C4C5B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C4C5C8(uint64_t *a1, char *a2, char *a3, void *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  long long v21 = &v11[48 * v10];
  sub_C4C798(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    uint64_t v18 = (char *)*a1;
    unint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      unint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C4C784(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C4C798(int a1, uint64_t a2, char *__s, char *a4, void *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (long long *)operator new(v13 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v17 = v14 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v17;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = *a5;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = *a5;
  *(_DWORD *)(a2 + 40) = 1;
  unint64_t v15 = (void *)__dst;

  operator delete(v15);
}

void sub_C4C8F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C4C904(uint64_t *a1, char *a2, char *a3, void *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  long long v21 = &v11[48 * v10];
  sub_C4CAD4(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    uint64_t v18 = (char *)*a1;
    unint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      unint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C4CAC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C4CAD4(int a1, uint64_t a2, char *__s, char *a4, void *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (long long *)operator new(v13 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v17 = v14 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v17;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = *a5;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = *a5;
  *(_DWORD *)(a2 + 40) = 1;
  unint64_t v15 = (void *)__dst;

  operator delete(v15);
}

void sub_C4CC2C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_C4CC40(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v3;
  }
  *((void *)__dst + 11) = 0;
  *(_OWORD *)(__dst + 72) = 0u;
  *(_OWORD *)(__dst + 56) = 0u;
  *(_OWORD *)(__dst + 40) = 0u;
  *(_OWORD *)(__dst + 24) = 0u;
  return __dst;
}

double sub_C4CCA8(uint64_t a1, uint64_t a2)
{
  *(float64x2_t *)(a1 + 24) = vaddq_f64(*(float64x2_t *)(a2 + 24), *(float64x2_t *)(a1 + 24));
  *(float64x2_t *)(a1 + 40) = vaddq_f64(*(float64x2_t *)(a2 + 40), *(float64x2_t *)(a1 + 40));
  *(float64x2_t *)(a1 + 56) = vaddq_f64(*(float64x2_t *)(a2 + 56), *(float64x2_t *)(a1 + 56));
  *(float64x2_t *)(a1 + 72) = vaddq_f64(*(float64x2_t *)(a2 + 72), *(float64x2_t *)(a1 + 72));
  double result = *(double *)(a2 + 88) + *(double *)(a1 + 88);
  *(double *)(a1 + 88) = result;
  return result;
}

uint64_t sub_C4CCFC@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "");
  char v16 = 4;
  unint64_t v4 = *(void *)(a2 + 40);
  unint64_t v15 = llround(a1[3]);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v5 >= v4)
  {
    unint64_t v6 = sub_C4D204((uint64_t *)(a2 + 24), "Solutions", &v16, &v15);
  }
  else
  {
    sub_C4D3D4(a2 + 40, *(void *)(a2 + 32), "Solutions", &v16, &v15);
    unint64_t v6 = v5 + 48;
    *(void *)(a2 + 32) = v6;
  }
  *(void *)(a2 + 32) = v6;
  char v16 = 4;
  unint64_t v15 = llround(a1[4]);
  if (v6 >= *(void *)(a2 + 40))
  {
    unint64_t v7 = sub_C4D540((uint64_t *)(a2 + 24), "Journeys", &v16, &v15);
  }
  else
  {
    sub_C4D710(a2 + 40, v6, "Journeys", &v16, &v15);
    unint64_t v7 = v6 + 48;
    *(void *)(a2 + 32) = v7;
  }
  *(void *)(a2 + 32) = v7;
  char v16 = 4;
  unint64_t v15 = llround(a1[5]);
  if (v7 >= *(void *)(a2 + 40))
  {
    unint64_t v8 = sub_C4C904((uint64_t *)(a2 + 24), "JourneysWithRealtimeData", &v16, &v15);
  }
  else
  {
    sub_C4CAD4(a2 + 40, v7, "JourneysWithRealtimeData", &v16, &v15);
    unint64_t v8 = v7 + 48;
    *(void *)(a2 + 32) = v8;
  }
  *(void *)(a2 + 32) = v8;
  char v16 = 4;
  unint64_t v15 = llround(a1[6]);
  if (v8 >= *(void *)(a2 + 40))
  {
    unint64_t v9 = sub_C4D87C((uint64_t *)(a2 + 24), "JourneysBasedOnRealtimeData", &v16, &v15);
  }
  else
  {
    sub_C4DA4C(a2 + 40, v8, "JourneysBasedOnRealtimeData", &v16, &v15);
    unint64_t v9 = v8 + 48;
    *(void *)(a2 + 32) = v9;
  }
  *(void *)(a2 + 32) = v9;
  char v16 = 4;
  unint64_t v15 = llround(a1[7]);
  if (v9 >= *(void *)(a2 + 40))
  {
    unint64_t v10 = sub_C4DBB8((uint64_t *)(a2 + 24), "JourneysAtRisk", &v16, &v15);
  }
  else
  {
    sub_C4DD88(a2 + 40, v9, "JourneysAtRisk", &v16, &v15);
    unint64_t v10 = v9 + 48;
    *(void *)(a2 + 32) = v10;
  }
  *(void *)(a2 + 32) = v10;
  char v16 = 4;
  unint64_t v15 = llround(a1[8]);
  if (v10 >= *(void *)(a2 + 40))
  {
    unint64_t v11 = sub_C4DEF4((uint64_t *)(a2 + 24), "JourneysWithBlockingIncidents", &v16, &v15);
  }
  else
  {
    sub_C4E0C4(a2 + 40, v10, "JourneysWithBlockingIncidents", &v16, &v15);
    unint64_t v11 = v10 + 48;
    *(void *)(a2 + 32) = v11;
  }
  *(void *)(a2 + 32) = v11;
  char v16 = 4;
  unint64_t v15 = llround(a1[9]);
  if (v11 >= *(void *)(a2 + 40))
  {
    unint64_t v12 = sub_C49D68((uint64_t *)(a2 + 24), "JourneysWithFareData", &v16, &v15);
  }
  else
  {
    sub_C49F38(a2 + 40, v11, "JourneysWithFareData", &v16, &v15);
    unint64_t v12 = v11 + 48;
    *(void *)(a2 + 32) = v12;
  }
  *(void *)(a2 + 32) = v12;
  char v16 = 4;
  unint64_t v15 = llround(a1[10]);
  if (v12 >= *(void *)(a2 + 40))
  {
    unint64_t v13 = sub_C4E230((uint64_t *)(a2 + 24), "JourneysFailedFareNormalisation", &v16, &v15);
  }
  else
  {
    sub_C4E400(a2 + 40, v12, "JourneysFailedFareNormalisation", &v16, &v15);
    unint64_t v13 = v12 + 48;
    *(void *)(a2 + 32) = v13;
  }
  *(void *)(a2 + 32) = v13;
  char v16 = 4;
  unint64_t v15 = llround(a1[11]);
  if (v13 >= *(void *)(a2 + 40))
  {
    uint64_t result = sub_C4D87C((uint64_t *)(a2 + 24), "BlockingOffjourneyIncidents", &v16, &v15);
  }
  else
  {
    sub_C4DA4C(a2 + 40, v13, "BlockingOffjourneyIncidents", &v16, &v15);
    uint64_t result = v13 + 48;
    *(void *)(a2 + 32) = v13 + 48;
  }
  *(void *)(a2 + 32) = result;
  return result;
}

void sub_C4D104(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4D118(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4D1F0(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C4D204(uint64_t *a1, char *a2, char *a3, void *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  long long v21 = &v11[48 * v10];
  sub_C4D3D4(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    uint64_t v18 = (char *)*a1;
    unint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      unint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C4D3C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C4D3D4(int a1, uint64_t a2, char *__s, char *a4, void *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (long long *)operator new(v13 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v17 = v14 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v17;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = *a5;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = *a5;
  *(_DWORD *)(a2 + 40) = 1;
  unint64_t v15 = (void *)__dst;

  operator delete(v15);
}

void sub_C4D52C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C4D540(uint64_t *a1, char *a2, char *a3, void *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  long long v21 = &v11[48 * v10];
  sub_C4D710(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    uint64_t v18 = (char *)*a1;
    unint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      unint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C4D6FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C4D710(int a1, uint64_t a2, char *__s, char *a4, void *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (long long *)operator new(v13 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v17 = v14 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v17;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = *a5;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = *a5;
  *(_DWORD *)(a2 + 40) = 1;
  unint64_t v15 = (void *)__dst;

  operator delete(v15);
}

void sub_C4D868(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C4D87C(uint64_t *a1, char *a2, char *a3, void *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  long long v21 = &v11[48 * v10];
  sub_C4DA4C(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    uint64_t v18 = (char *)*a1;
    unint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      unint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C4DA38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C4DA4C(int a1, uint64_t a2, char *__s, char *a4, void *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (long long *)operator new(v13 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v17 = v14 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v17;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = *a5;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = *a5;
  *(_DWORD *)(a2 + 40) = 1;
  unint64_t v15 = (void *)__dst;

  operator delete(v15);
}

void sub_C4DBA4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C4DBB8(uint64_t *a1, char *a2, char *a3, void *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  long long v21 = &v11[48 * v10];
  sub_C4DD88(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    uint64_t v18 = (char *)*a1;
    unint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      unint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C4DD74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C4DD88(int a1, uint64_t a2, char *__s, char *a4, void *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (long long *)operator new(v13 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v17 = v14 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v17;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = *a5;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = *a5;
  *(_DWORD *)(a2 + 40) = 1;
  unint64_t v15 = (void *)__dst;

  operator delete(v15);
}

void sub_C4DEE0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C4DEF4(uint64_t *a1, char *a2, char *a3, void *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  long long v21 = &v11[48 * v10];
  sub_C4E0C4(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    uint64_t v18 = (char *)*a1;
    unint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      unint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C4E0B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C4E0C4(int a1, uint64_t a2, char *__s, char *a4, void *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (long long *)operator new(v13 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v17 = v14 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v17;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = *a5;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = *a5;
  *(_DWORD *)(a2 + 40) = 1;
  unint64_t v15 = (void *)__dst;

  operator delete(v15);
}

void sub_C4E21C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C4E230(uint64_t *a1, char *a2, char *a3, void *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  long long v21 = &v11[48 * v10];
  sub_C4E400(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    uint64_t v18 = (char *)*a1;
    unint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      unint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C4E3EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C4E400(int a1, uint64_t a2, char *__s, char *a4, void *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (long long *)operator new(v13 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v17 = v14 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v17;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = *a5;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = *a5;
  *(_DWORD *)(a2 + 40) = 1;
  unint64_t v15 = (void *)__dst;

  operator delete(v15);
}

void sub_C4E558(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C4E56C@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "JourneyUpdaterModule");
  char v12 = 4;
  unint64_t v4 = *(void *)(a2 + 40);
  unint64_t v11 = llround(*a1);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v5 >= v4)
  {
    unint64_t v6 = sub_C4D540((uint64_t *)(a2 + 24), "Journeys", &v12, &v11);
  }
  else
  {
    sub_C4D710(a2 + 40, *(void *)(a2 + 32), "Journeys", &v12, &v11);
    unint64_t v6 = v5 + 48;
    *(void *)(a2 + 32) = v6;
  }
  *(void *)(a2 + 32) = v6;
  char v12 = 4;
  unint64_t v11 = llround(a1[1]);
  if (v6 >= *(void *)(a2 + 40))
  {
    unint64_t v7 = sub_C4DBB8((uint64_t *)(a2 + 24), "JourneysFailed", &v12, &v11);
  }
  else
  {
    sub_C4DD88(a2 + 40, v6, "JourneysFailed", &v12, &v11);
    unint64_t v7 = v6 + 48;
    *(void *)(a2 + 32) = v7;
  }
  *(void *)(a2 + 32) = v7;
  char v12 = 4;
  unint64_t v11 = llround(a1[2]);
  if (v7 >= *(void *)(a2 + 40))
  {
    unint64_t v8 = sub_C4C904((uint64_t *)(a2 + 24), "JourneysWithRealtimeData", &v12, &v11);
  }
  else
  {
    sub_C4CAD4(a2 + 40, v7, "JourneysWithRealtimeData", &v12, &v11);
    unint64_t v8 = v7 + 48;
    *(void *)(a2 + 32) = v8;
  }
  *(void *)(a2 + 32) = v8;
  char v12 = 1;
  unint64_t v11 = llround(a1[3]);
  if (v8 >= *(void *)(a2 + 40))
  {
    unint64_t v9 = sub_C49A2C((uint64_t *)(a2 + 24), "Runtime", &v12, &v11);
  }
  else
  {
    sub_C49BFC(a2 + 40, v8, "Runtime", &v12, &v11);
    unint64_t v9 = v8 + 48;
    *(void *)(a2 + 32) = v9;
  }
  *(void *)(a2 + 32) = v9;
  char v12 = 1;
  unint64_t v11 = llround(a1[5]);
  if (v9 >= *(void *)(a2 + 40))
  {
    uint64_t result = sub_C4C5C8((uint64_t *)(a2 + 24), "RunTime.RealtimeUpdates", &v12, &v11);
  }
  else
  {
    sub_C4C798(a2 + 40, v9, "RunTime.RealtimeUpdates", &v12, &v11);
    uint64_t result = v9 + 48;
    *(void *)(a2 + 32) = v9 + 48;
  }
  *(void *)(a2 + 32) = result;
  return result;
}

void sub_C4E7D4(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4E7E8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4E860(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

float64x2_t sub_C4E874(float64x2_t *a1, float64x2_t *a2)
{
  float64x2_t v2 = a1[1];
  *a1 = vaddq_f64(*a2, *a1);
  a1[1] = vaddq_f64(a2[1], v2);
  float64x2_t result = vaddq_f64(a2[2], a1[2]);
  a1[2] = result;
  return result;
}

uint64_t sub_C4E8A4@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "PaymentMethodLookupModule");
  char v12 = 4;
  unint64_t v4 = *(void *)(a2 + 40);
  unint64_t v11 = llround(*a1);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v5 >= v4)
  {
    unint64_t v6 = sub_C49D68((uint64_t *)(a2 + 24), "OutOfTransitCoverage", &v12, &v11);
  }
  else
  {
    sub_C49F38(a2 + 40, *(void *)(a2 + 32), "OutOfTransitCoverage", &v12, &v11);
    unint64_t v6 = v5 + 48;
    *(void *)(a2 + 32) = v6;
  }
  *(void *)(a2 + 32) = v6;
  char v12 = 4;
  unint64_t v11 = llround(a1[1]);
  if (v6 >= *(void *)(a2 + 40))
  {
    unint64_t v7 = sub_C4D204((uint64_t *)(a2 + 24), "Solutions", &v12, &v11);
  }
  else
  {
    sub_C4D3D4(a2 + 40, v6, "Solutions", &v12, &v11);
    unint64_t v7 = v6 + 48;
    *(void *)(a2 + 32) = v7;
  }
  *(void *)(a2 + 32) = v7;
  char v12 = 4;
  unint64_t v11 = llround(a1[2]);
  if (v7 >= *(void *)(a2 + 40))
  {
    unint64_t v8 = sub_C49D68((uint64_t *)(a2 + 24), "PaymentMethodRegions", &v12, &v11);
  }
  else
  {
    sub_C49F38(a2 + 40, v7, "PaymentMethodRegions", &v12, &v11);
    unint64_t v8 = v7 + 48;
    *(void *)(a2 + 32) = v8;
  }
  *(void *)(a2 + 32) = v8;
  char v12 = 1;
  unint64_t v11 = llround(a1[3]);
  if (v8 >= *(void *)(a2 + 40))
  {
    unint64_t v9 = sub_C49A2C((uint64_t *)(a2 + 24), "Runtime", &v12, &v11);
  }
  else
  {
    sub_C49BFC(a2 + 40, v8, "Runtime", &v12, &v11);
    unint64_t v9 = v8 + 48;
    *(void *)(a2 + 32) = v9;
  }
  *(void *)(a2 + 32) = v9;
  char v12 = 1;
  unint64_t v11 = llround(a1[4]);
  if (v9 >= *(void *)(a2 + 40))
  {
    uint64_t result = sub_C4BF50((uint64_t *)(a2 + 24), "Runtime.Preprocessing", &v12, &v11);
  }
  else
  {
    sub_C4C120(a2 + 40, v9, "Runtime.Preprocessing", &v12, &v11);
    uint64_t result = v9 + 48;
    *(void *)(a2 + 32) = v9 + 48;
  }
  *(void *)(a2 + 32) = result;
  return result;
}

void sub_C4EB0C(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4EB20(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4EB98(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

_OWORD *sub_C4EBAC(_OWORD *a1)
{
  a1[16] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  int v4 = 4;
  sub_C556A0((uint64_t)(a1 + 17), &v4);
  int v3 = 5;
  sub_C556A0((uint64_t)a1 + 408, &v3);
  return a1;
}

float64x2_t *sub_C4EC28(float64x2_t *a1, float64x2_t *a2)
{
  float64x2_t v4 = a1[1];
  *a1 = vaddq_f64(*a2, *a1);
  a1[1] = vaddq_f64(a2[1], v4);
  float64x2_t v5 = a1[3];
  a1[2] = vaddq_f64(a2[2], a1[2]);
  a1[3] = vaddq_f64(a2[3], v5);
  float64x2_t v6 = a1[5];
  a1[4] = vaddq_f64(a2[4], a1[4]);
  a1[5] = vaddq_f64(a2[5], v6);
  float64x2_t v7 = a1[7];
  a1[6] = vaddq_f64(a2[6], a1[6]);
  a1[7] = vaddq_f64(a2[7], v7);
  float64x2_t v8 = a1[9];
  a1[8] = vaddq_f64(a2[8], a1[8]);
  a1[9] = vaddq_f64(a2[9], v8);
  float64x2_t v9 = a1[11];
  a1[10] = vaddq_f64(a2[10], a1[10]);
  a1[11] = vaddq_f64(a2[11], v9);
  float64x2_t v10 = a1[13];
  a1[12] = vaddq_f64(a2[12], a1[12]);
  a1[13] = vaddq_f64(a2[13], v10);
  float64x2_t v11 = a1[15];
  a1[14] = vaddq_f64(a2[14], a1[14]);
  a1[15] = vaddq_f64(a2[15], v11);
  a1[16] = vaddq_f64(a2[16], a1[16]);
  sub_C556D0((uint64_t)&a1[17], (uint64_t)&a2[17]);
  sub_C556D0((uint64_t)&a1[25].f64[1], (uint64_t)&a2[25].f64[1]);
  return a1;
}

void sub_C4ED58(double *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "ScheduleLookupModule");
  LOBYTE(v31[0]) = 4;
  unint64_t v4 = *(void *)(a2 + 40);
  v35[0] = (void *)llround(*a1);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v5 >= v4)
  {
    unint64_t v6 = sub_C4C5C8((uint64_t *)(a2 + 24), "UserLocationUnavailable", (char *)v31, v35);
  }
  else
  {
    sub_C4C798(a2 + 40, *(void *)(a2 + 32), "UserLocationUnavailable", (char *)v31, v35);
    unint64_t v6 = v5 + 48;
    *(void *)(a2 + 32) = v6;
  }
  *(void *)(a2 + 32) = v6;
  LOBYTE(v31[0]) = 4;
  v35[0] = (void *)llround(a1[1]);
  if (v6 >= *(void *)(a2 + 40))
  {
    unint64_t v7 = sub_C4FBAC((uint64_t *)(a2 + 24), "UserLocationAndOriginMatch", (char *)v31, v35);
  }
  else
  {
    sub_C4FD7C(a2 + 40, v6, "UserLocationAndOriginMatch", (char *)v31, v35);
    unint64_t v7 = v6 + 48;
    *(void *)(a2 + 32) = v7;
  }
  *(void *)(a2 + 32) = v7;
  LOBYTE(v31[0]) = 4;
  v35[0] = (void *)llround(a1[2]);
  if (v7 >= *(void *)(a2 + 40))
  {
    unint64_t v8 = sub_C4FEE8((uint64_t *)(a2 + 24), "FarFromTransitStops", (char *)v31, v35);
  }
  else
  {
    sub_C500B8(a2 + 40, v7, "FarFromTransitStops", (char *)v31, v35);
    unint64_t v8 = v7 + 48;
    *(void *)(a2 + 32) = v8;
  }
  *(void *)(a2 + 32) = v8;
  LOBYTE(v31[0]) = 4;
  v35[0] = (void *)llround(a1[3]);
  if (v8 >= *(void *)(a2 + 40))
  {
    unint64_t v9 = sub_C49D68((uint64_t *)(a2 + 24), "OutOfTransitCoverage", (char *)v31, v35);
  }
  else
  {
    sub_C49F38(a2 + 40, v8, "OutOfTransitCoverage", (char *)v31, v35);
    unint64_t v9 = v8 + 48;
    *(void *)(a2 + 32) = v9;
  }
  *(void *)(a2 + 32) = v9;
  LOBYTE(v31[0]) = 4;
  v35[0] = (void *)llround(a1[4]);
  if (v9 >= *(void *)(a2 + 40))
  {
    unint64_t v10 = sub_C4D204((uint64_t *)(a2 + 24), "Solutions", (char *)v31, v35);
  }
  else
  {
    sub_C4D3D4(a2 + 40, v9, "Solutions", (char *)v31, v35);
    unint64_t v10 = v9 + 48;
    *(void *)(a2 + 32) = v10;
  }
  *(void *)(a2 + 32) = v10;
  LOBYTE(v31[0]) = 4;
  v35[0] = (void *)llround(a1[5]);
  if (v10 >= *(void *)(a2 + 40))
  {
    unint64_t v11 = sub_C4A0A4((uint64_t *)(a2 + 24), "Categories", (char *)v31, v35);
  }
  else
  {
    sub_C4A274(a2 + 40, v10, "Categories", (char *)v31, v35);
    unint64_t v11 = v10 + 48;
    *(void *)(a2 + 32) = v11;
  }
  *(void *)(a2 + 32) = v11;
  LOBYTE(v31[0]) = 4;
  v35[0] = (void *)llround(a1[6]);
  if (v11 >= *(void *)(a2 + 40))
  {
    unint64_t v12 = sub_C50224((uint64_t *)(a2 + 24), "Groups", (char *)v31, v35);
  }
  else
  {
    sub_C503F4(a2 + 40, v11, "Groups", (char *)v31, v35);
    unint64_t v12 = v11 + 48;
    *(void *)(a2 + 32) = v12;
  }
  *(void *)(a2 + 32) = v12;
  LOBYTE(v31[0]) = 4;
  v35[0] = (void *)llround(a1[7]);
  if (v12 >= *(void *)(a2 + 40))
  {
    unint64_t v13 = sub_C50560((uint64_t *)(a2 + 24), "Cells", (char *)v31, v35);
  }
  else
  {
    sub_C50730(a2 + 40, v12, "Cells", (char *)v31, v35);
    unint64_t v13 = v12 + 48;
    *(void *)(a2 + 32) = v13;
  }
  *(void *)(a2 + 32) = v13;
  LOBYTE(v31[0]) = 4;
  v35[0] = (void *)llround(a1[8]);
  if (v13 >= *(void *)(a2 + 40))
  {
    unint64_t v14 = sub_C4D204((uint64_t *)(a2 + 24), "Schedules", (char *)v31, v35);
  }
  else
  {
    sub_C4D3D4(a2 + 40, v13, "Schedules", (char *)v31, v35);
    unint64_t v14 = v13 + 48;
    *(void *)(a2 + 32) = v14;
  }
  *(void *)(a2 + 32) = v14;
  LOBYTE(v31[0]) = 4;
  v35[0] = (void *)llround(a1[11]);
  if (v14 >= *(void *)(a2 + 40))
  {
    unint64_t v15 = sub_C5089C((uint64_t *)(a2 + 24), "BlockingIncidents", (char *)v31, v35);
  }
  else
  {
    sub_C50A6C(a2 + 40, v14, "BlockingIncidents", (char *)v31, v35);
    unint64_t v15 = v14 + 48;
    *(void *)(a2 + 32) = v15;
  }
  *(void *)(a2 + 32) = v15;
  LOBYTE(v31[0]) = 4;
  v35[0] = (void *)llround(a1[12]);
  if (v15 >= *(void *)(a2 + 40))
  {
    unint64_t v16 = sub_C4C5C8((uint64_t *)(a2 + 24), "OriginWalkingIterations", (char *)v31, v35);
  }
  else
  {
    sub_C4C798(a2 + 40, v15, "OriginWalkingIterations", (char *)v31, v35);
    unint64_t v16 = v15 + 48;
    *(void *)(a2 + 32) = v16;
  }
  *(void *)(a2 + 32) = v16;
  LOBYTE(v31[0]) = 1;
  v35[0] = (void *)llround(a1[13]);
  if (v16 >= *(void *)(a2 + 40))
  {
    unint64_t v17 = sub_C49A2C((uint64_t *)(a2 + 24), "Runtime", (char *)v31, v35);
  }
  else
  {
    sub_C49BFC(a2 + 40, v16, "Runtime", (char *)v31, v35);
    unint64_t v17 = v16 + 48;
    *(void *)(a2 + 32) = v17;
  }
  *(void *)(a2 + 32) = v17;
  LOBYTE(v31[0]) = 1;
  v35[0] = (void *)llround(a1[35] + a1[52]);
  if (v17 >= *(void *)(a2 + 40))
  {
    unint64_t v18 = sub_C4BC14((uint64_t *)(a2 + 24), "Runtime.InitialWalking", (char *)v31, v35);
  }
  else
  {
    sub_C4BDE4(a2 + 40, v17, "Runtime.InitialWalking", (char *)v31, v35);
    unint64_t v18 = v17 + 48;
    *(void *)(a2 + 32) = v18;
  }
  *(void *)(a2 + 32) = v18;
  LOBYTE(v31[0]) = 1;
  v35[0] = (void *)llround(a1[14] + a1[15]);
  if (v18 >= *(void *)(a2 + 40))
  {
    unint64_t v19 = sub_C4BF50((uint64_t *)(a2 + 24), "Runtime.Preprocessing", (char *)v31, v35);
  }
  else
  {
    sub_C4C120(a2 + 40, v18, "Runtime.Preprocessing", (char *)v31, v35);
    unint64_t v19 = v18 + 48;
    *(void *)(a2 + 32) = v19;
  }
  *(void *)(a2 + 32) = v19;
  LOBYTE(v31[0]) = 1;
  v35[0] = (void *)llround(a1[16]);
  if (v19 >= *(void *)(a2 + 40))
  {
    unint64_t v20 = sub_C4E230((uint64_t *)(a2 + 24), "Runtime.ScheduleLookupAlgorithm", (char *)v31, v35);
  }
  else
  {
    sub_C4E400(a2 + 40, v19, "Runtime.ScheduleLookupAlgorithm", (char *)v31, v35);
    unint64_t v20 = v19 + 48;
    *(void *)(a2 + 32) = v20;
  }
  double v21 = a1[30];
  double v22 = a1[17]
      + a1[18]
      + a1[19]
      + a1[20]
      + a1[21]
      + a1[22]
      + a1[23]
      + a1[24]
      + a1[25]
      + a1[26]
      + a1[27]
      + a1[28]
      + a1[29];
  *(void *)(a2 + 32) = v20;
  LOBYTE(v31[0]) = 1;
  v35[0] = (void *)llround(v22 + v21 + a1[31] + a1[33]);
  if (v20 >= *(void *)(a2 + 40))
  {
    unint64_t v23 = sub_C4BC14((uint64_t *)(a2 + 24), "Runtime.Postprocessing", (char *)v31, v35);
  }
  else
  {
    sub_C4BDE4(a2 + 40, v20, "Runtime.Postprocessing", (char *)v31, v35);
    unint64_t v23 = v20 + 48;
    *(void *)(a2 + 32) = v23;
  }
  *(void *)(a2 + 32) = v23;
  LOBYTE(v31[0]) = 1;
  v35[0] = (void *)llround(a1[32]);
  if (v23 >= *(void *)(a2 + 40))
  {
    uint64_t v24 = sub_C4C904((uint64_t *)(a2 + 24), "Runtime.WalkingUnpacking", (char *)v31, v35);
  }
  else
  {
    sub_C4CAD4(a2 + 40, v23, "Runtime.WalkingUnpacking", (char *)v31, v35);
    uint64_t v24 = v23 + 48;
    *(void *)(a2 + 32) = v23 + 48;
  }
  *(void *)(a2 + 32) = v24;
  sub_C55858(a1 + 34, (uint64_t)v35);
  sub_C4F95C(a2 + 24, (const void **)v35);
  sub_C55858(a1 + 51, (uint64_t)v31);
  sub_C4F95C(a2 + 24, (const void **)v31);
  long long v25 = (void **)__p;
  if (__p)
  {
    uint64_t v26 = v34;
    uint64_t v27 = __p;
    if (v34 != __p)
    {
      do
      {
        if (*((char *)v26 - 25) < 0) {
          operator delete(*(v26 - 6));
        }
        v26 -= 6;
      }
      while (v26 != v25);
      uint64_t v27 = __p;
    }
    char v34 = v25;
    operator delete(v27);
  }
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  long long v28 = (void **)v37;
  if (v37)
  {
    long long v29 = v38;
    long long v30 = v37;
    if (v38 != v37)
    {
      do
      {
        if (*((char *)v29 - 25) < 0) {
          operator delete(*(v29 - 6));
        }
        v29 -= 6;
      }
      while (v29 != v28);
      long long v30 = v37;
    }
    uint64_t v38 = v28;
    operator delete(v30);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
}

void sub_C4F604(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F618(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F630(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F644(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F65C(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F670(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F688(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F69C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F6B4(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F6C8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F6E0(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F6F4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F70C(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F720(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F738(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F74C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F764(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F778(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F790(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F7A4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F7BC(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F7D0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F7E8(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F7FC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F814(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F828(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F840(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F854(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F86C(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F880(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F898(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F8AC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F8C4(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F8D8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_A3A4((uint64_t)&a9);
  sub_A3A4((uint64_t)&a15);
  sub_A3A4(v15);
  _Unwind_Resume(a1);
}

void sub_C4F914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_A3A4((uint64_t)va);
  sub_A3A4(v7);
  _Unwind_Resume(a1);
}

void sub_C4F934(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F948(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C4F95C(uint64_t a1, const void **a2)
{
  uint64_t v2 = (char *)a2[3];
  int v3 = (char *)a2[4];
  if (v2 != v3)
  {
    unint64_t v5 = (void ***)a1;
    uint64_t v6 = *(void *)(a1 + 8);
    do
    {
      int v7 = *((char *)a2 + 23);
      if (v7 >= 0) {
        size_t v8 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v8 = (size_t)a2[1];
      }
      unint64_t v9 = v8 + 1;
      if (v8 + 1 >= 0x7FFFFFFFFFFFFFF8) {
        sub_188D690();
      }
      if (v9 >= 0x17)
      {
        uint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v9 | 7) != 0x17) {
          uint64_t v11 = v9 | 7;
        }
        unint64_t v12 = v3;
        unint64_t v13 = v5;
        uint64_t v14 = v11 + 1;
        p_dst = (std::string *)operator new(v11 + 1);
        unint64_t v15 = v14 | 0x8000000000000000;
        unint64_t v5 = v13;
        int v3 = v12;
        __dst.__r_.__value_.__l.__size_ = v8 + 1;
        __dst.__r_.__value_.__r.__words[2] = v15;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        p_dst = &__dst;
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v8 + 1;
        if (!v8) {
          goto LABEL_18;
        }
      }
      if (v7 >= 0) {
        unint64_t v16 = a2;
      }
      else {
        unint64_t v16 = *a2;
      }
      memmove(p_dst, v16, v8);
LABEL_18:
      *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v8) = 46;
      int v17 = v2[23];
      if (v17 >= 0) {
        unint64_t v18 = v2;
      }
      else {
        unint64_t v18 = *(const std::string::value_type **)v2;
      }
      if (v17 >= 0) {
        std::string::size_type v19 = v2[23];
      }
      else {
        std::string::size_type v19 = *((void *)v2 + 1);
      }
      unint64_t v20 = std::string::append(&__dst, v18, v19);
      double v22 = (void *)v20->__r_.__value_.__r.__words[0];
      std::string::size_type size = (void *)v20->__r_.__value_.__l.__size_;
      v33[0] = v20->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v33 + 3) = *(_DWORD *)((char *)&v20->__r_.__value_.__r.__words[2] + 3);
      int v23 = SHIBYTE(v20->__r_.__value_.__r.__words[2]);
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      char v24 = v2[24];
      if (v23 < 0)
      {
        sub_4200(__p, v22, (unint64_t)size);
        char v29 = v24;
        uint64_t v30 = *((void *)v2 + 4);
        int v31 = 1;
        operator delete(v22);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_27;
        }
LABEL_26:
        operator delete(__dst.__r_.__value_.__l.__data_);
        goto LABEL_27;
      }
      __p[0] = v22;
      __p[1] = size;
      *(_DWORD *)uint64_t v27 = v33[0];
      *(_DWORD *)&v27[3] = *(_DWORD *)((char *)v33 + 3);
      char v28 = v23;
      char v29 = v24;
      uint64_t v30 = *((void *)v2 + 4);
      int v31 = 1;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_26;
      }
LABEL_27:
      uint64_t v25 = sub_C4B620(v5, v6, (uint64_t)__p);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v6 = v25 + 48;
      v2 += 48;
    }
    while (v2 != v3);
  }
}

void sub_C4FB6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  operator delete(v25);
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_C4FBAC(uint64_t *a1, char *a2, char *a3, void *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  double v21 = &v11[48 * v10];
  sub_C4FD7C(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    unint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      unint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C4FD68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C4FD7C(int a1, uint64_t a2, char *__s, char *a4, void *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (long long *)operator new(v13 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v17 = v14 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v17;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = *a5;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = *a5;
  *(_DWORD *)(a2 + 40) = 1;
  unint64_t v15 = (void *)__dst;

  operator delete(v15);
}

void sub_C4FED4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C4FEE8(uint64_t *a1, char *a2, char *a3, void *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  double v21 = &v11[48 * v10];
  sub_C500B8(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    unint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      unint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C500A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C500B8(int a1, uint64_t a2, char *__s, char *a4, void *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (long long *)operator new(v13 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v17 = v14 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v17;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = *a5;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = *a5;
  *(_DWORD *)(a2 + 40) = 1;
  unint64_t v15 = (void *)__dst;

  operator delete(v15);
}

void sub_C50210(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C50224(uint64_t *a1, char *a2, char *a3, void *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  double v21 = &v11[48 * v10];
  sub_C503F4(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    unint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      unint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C503E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C503F4(int a1, uint64_t a2, char *__s, char *a4, void *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (long long *)operator new(v13 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v17 = v14 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v17;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = *a5;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = *a5;
  *(_DWORD *)(a2 + 40) = 1;
  unint64_t v15 = (void *)__dst;

  operator delete(v15);
}

void sub_C5054C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C50560(uint64_t *a1, char *a2, char *a3, void *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  double v21 = &v11[48 * v10];
  sub_C50730(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    unint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      unint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C5071C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C50730(int a1, uint64_t a2, char *__s, char *a4, void *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (long long *)operator new(v13 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v17 = v14 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v17;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = *a5;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = *a5;
  *(_DWORD *)(a2 + 40) = 1;
  unint64_t v15 = (void *)__dst;

  operator delete(v15);
}

void sub_C50888(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C5089C(uint64_t *a1, char *a2, char *a3, void *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  double v21 = &v11[48 * v10];
  sub_C50A6C(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    unint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      unint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C50A58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C50A6C(int a1, uint64_t a2, char *__s, char *a4, void *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (long long *)operator new(v13 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v17 = v14 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v17;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = *a5;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = *a5;
  *(_DWORD *)(a2 + 40) = 1;
  unint64_t v15 = (void *)__dst;

  operator delete(v15);
}

void sub_C50BC4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_C50BD8(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v3;
  }
  *(_OWORD *)(__dst + 136) = 0u;
  *(_OWORD *)(__dst + 120) = 0u;
  *(_OWORD *)(__dst + 104) = 0u;
  *(_OWORD *)(__dst + 88) = 0u;
  *(_OWORD *)(__dst + 72) = 0u;
  *(_OWORD *)(__dst + 56) = 0u;
  *(_OWORD *)(__dst + 40) = 0u;
  *(_OWORD *)(__dst + 24) = 0u;
  return __dst;
}

__n128 sub_C50C4C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a1 + 24;
  *(float64x2_t *)(a1 + 24) = vaddq_f64(*(float64x2_t *)(a2 + 24), *(float64x2_t *)(a1 + 24));
  *(float64x2_t *)(a1 + 40) = vaddq_f64(*(float64x2_t *)(a2 + 40), *(float64x2_t *)(a1 + 40));
  *(void *)(a1 + 56) += *(void *)(a2 + 56);
  *(float64x2_t *)(a1 + 64) = vaddq_f64(*(float64x2_t *)(a2 + 64), *(float64x2_t *)(a1 + 64));
  *(float64x2_t *)(a1 + 80) = vaddq_f64(*(float64x2_t *)(a2 + 80), *(float64x2_t *)(a1 + 80));
  *(float64x2_t *)(a1 + 96) = vaddq_f64(*(float64x2_t *)(a2 + 96), *(float64x2_t *)(a1 + 96));
  *(float64x2_t *)(a1 + 112) = vaddq_f64(*(float64x2_t *)(a2 + 112), *(float64x2_t *)(a1 + 112));
  *(float64x2_t *)(a1 + 128) = vaddq_f64(*(float64x2_t *)(a2 + 128), *(float64x2_t *)(a1 + 128));
  *(void *)(a1 + 144) += *(void *)(a2 + 144);
  if (*(char *)(a1 + 23) < 0)
  {
    sub_4200((unsigned char *)a3, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a1;
    *(void *)(a3 + 16) = *(void *)(a1 + 16);
  }
  long long v5 = *(_OWORD *)(v4 + 80);
  *(_OWORD *)(a3 + 88) = *(_OWORD *)(v4 + 64);
  *(_OWORD *)(a3 + 104) = v5;
  long long v6 = *(_OWORD *)(v4 + 112);
  *(_OWORD *)(a3 + 120) = *(_OWORD *)(v4 + 96);
  *(_OWORD *)(a3 + 136) = v6;
  long long v7 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)(a3 + 24) = *(_OWORD *)v4;
  *(_OWORD *)(a3 + 40) = v7;
  __n128 result = *(__n128 *)(v4 + 32);
  long long v9 = *(_OWORD *)(v4 + 48);
  *(__n128 *)(a3 + 56) = result;
  *(_OWORD *)(a3 + 72) = v9;
  return result;
}

uint64_t sub_C50D58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "SPA");
  char v15 = 1;
  unint64_t v4 = *(void *)(a2 + 40);
  unint64_t v14 = llround(*(double *)(a1 + 24));
  unint64_t v5 = *(void *)(a2 + 32);
  if (v5 >= v4)
  {
    unint64_t v6 = sub_C49A2C((uint64_t *)(a2 + 24), "Runtime", &v15, &v14);
  }
  else
  {
    sub_C49BFC(a2 + 40, *(void *)(a2 + 32), "Runtime", &v15, &v14);
    unint64_t v6 = v5 + 48;
    *(void *)(a2 + 32) = v6;
  }
  *(void *)(a2 + 32) = v6;
  char v15 = 1;
  unint64_t v14 = llround(*(double *)(a1 + 32));
  if (v6 >= *(void *)(a2 + 40))
  {
    unint64_t v7 = sub_C49D68((uint64_t *)(a2 + 24), "Runtime.StopPatterns", &v15, &v14);
  }
  else
  {
    sub_C49F38(a2 + 40, v6, "Runtime.StopPatterns", &v15, &v14);
    unint64_t v7 = v6 + 48;
    *(void *)(a2 + 32) = v7;
  }
  *(void *)(a2 + 32) = v7;
  char v15 = 1;
  unint64_t v14 = llround(*(double *)(a1 + 40));
  if (v7 >= *(void *)(a2 + 40))
  {
    unint64_t v8 = sub_C5089C((uint64_t *)(a2 + 24), "Runtime.Transfers", &v15, &v14);
  }
  else
  {
    sub_C50A6C(a2 + 40, v7, "Runtime.Transfers", &v15, &v14);
    unint64_t v8 = v7 + 48;
    *(void *)(a2 + 32) = v8;
  }
  *(void *)(a2 + 32) = v8;
  char v15 = 1;
  unint64_t v14 = llround(*(double *)(a1 + 48));
  if (v8 >= *(void *)(a2 + 40))
  {
    unint64_t v9 = sub_C5089C((uint64_t *)(a2 + 24), "Runtime.TimeShift", &v15, &v14);
  }
  else
  {
    sub_C50A6C(a2 + 40, v8, "Runtime.TimeShift", &v15, &v14);
    unint64_t v9 = v8 + 48;
    *(void *)(a2 + 32) = v9;
  }
  *(void *)(a2 + 32) = v9;
  char v15 = 4;
  unint64_t v14 = llround(*(double *)(a1 + 64));
  if (v9 >= *(void *)(a2 + 40))
  {
    unint64_t v10 = sub_C4D540((uint64_t *)(a2 + 24), "Journeys", &v15, &v14);
  }
  else
  {
    sub_C4D710(a2 + 40, v9, "Journeys", &v15, &v14);
    unint64_t v10 = v9 + 48;
    *(void *)(a2 + 32) = v10;
  }
  *(void *)(a2 + 32) = v10;
  char v15 = 4;
  unint64_t v14 = llround(*(double *)(a1 + 112));
  if (v10 >= *(void *)(a2 + 40))
  {
    unint64_t v11 = sub_C5089C((uint64_t *)(a2 + 24), "TimeShiftAttempts", &v15, &v14);
  }
  else
  {
    sub_C50A6C(a2 + 40, v10, "TimeShiftAttempts", &v15, &v14);
    unint64_t v11 = v10 + 48;
    *(void *)(a2 + 32) = v11;
  }
  *(void *)(a2 + 32) = v11;
  char v15 = 4;
  unint64_t v14 = llround(*(double *)(a1 + 120));
  if (v11 >= *(void *)(a2 + 40))
  {
    unint64_t v12 = sub_C511DC((uint64_t *)(a2 + 24), "TimeShiftApplied", &v15, &v14);
  }
  else
  {
    sub_C513AC(a2 + 40, v11, "TimeShiftApplied", &v15, &v14);
    unint64_t v12 = v11 + 48;
    *(void *)(a2 + 32) = v12;
  }
  *(void *)(a2 + 32) = v12;
  char v15 = 2;
  unint64_t v14 = *(void *)(a1 + 144);
  if (v12 >= *(void *)(a2 + 40))
  {
    uint64_t result = sub_C51518((uint64_t *)(a2 + 24), "MemoryFootprint", &v15, (uint64_t *)&v14);
  }
  else
  {
    sub_C516E8(a2 + 40, v12, "MemoryFootprint", &v15, (uint64_t *)&v14);
    uint64_t result = v12 + 48;
    *(void *)(a2 + 32) = v12 + 48;
  }
  *(void *)(a2 + 32) = result;
  return result;
}

void sub_C510F4(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C51108(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C511C8(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C511DC(uint64_t *a1, char *a2, char *a3, void *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  double v21 = &v11[48 * v10];
  sub_C513AC(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  unint64_t v14 = (char *)*a1;
  char v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    char v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      char v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C51398(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C513AC(int a1, uint64_t a2, char *__s, char *a4, void *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (long long *)operator new(v13 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v17 = v14 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v17;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = *a5;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = *a5;
  *(_DWORD *)(a2 + 40) = 1;
  char v15 = (void *)__dst;

  operator delete(v15);
}

void sub_C51504(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C51518(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  double v21 = &v11[48 * v10];
  sub_C516E8(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  char v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    char v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      char v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C516D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C516E8(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_C51840(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C51854(void *a1, uint64_t a2)
{
  sub_E1B4((uint64_t)v201);
  if (*(_DWORD *)(a2 + 160))
  {
    unint64_t v4 = a1 + 515;
    unint64_t v5 = *(void *)(a2 + 12);
    if (HIDWORD(v5) == 1)
    {
      if (v5 == -3)
      {
        unsigned int v6 = 19;
        *((unsigned char *)&v209[0].__r_.__value_.__s + 23) = 19;
        strcpy((char *)v209, "virtual destination");
        std::string::size_type v7 = 0x206C617574726976;
LABEL_33:
        if ((v6 & 0x80u) == 0) {
          uint64_t v38 = v209;
        }
        else {
          uint64_t v38 = (std::string *)v7;
        }
        if ((v6 & 0x80u) == 0) {
          std::string::size_type size = v6;
        }
        else {
          std::string::size_type size = v209[0].__r_.__value_.__l.__size_;
        }
        long long v40 = sub_188FC78(v202, (uint64_t)v38, size);
        sub_188FC78(v40, (uint64_t)" (", 2);
        unint64_t v41 = *(void *)(a2 + 12);
        if (HIDWORD(v41) != 1 || (v41 + 3) >= 2)
        {
          char v42 = (int *)sub_498D5C(*v4 + 24, __ROR8__(v41, 32), 0, "stop");
          long long v43 = (unsigned __int16 *)((char *)v42 - *v42);
          if (*v43 >= 5u && (uint64_t v44 = v43[2]) != 0) {
            uint64_t v45 = *(void *)((char *)v42 + v44);
          }
          else {
            uint64_t v45 = 0;
          }
          char v46 = sub_398020(*v4 + 24, 0);
          unint64_t v47 = &v46[-*(int *)v46];
          if (*(unsigned __int16 *)v47 >= 0xBu)
          {
            uint64_t v48 = *((unsigned __int16 *)v47 + 5);
            if (v48)
            {
              if (v46[v48]) {
                nullsub_1(v45);
              }
            }
          }
        }
        uint64_t v49 = (void *)std::ostream::operator<<();
        char v50 = sub_188FC78(v49, (uint64_t)") @ ", 4);
        sub_456C((uint64_t)v205, *(_DWORD *)(a2 + 4));
        char v197 = 8;
        strcpy((char *)v196, "HH:mm:ss");
        sub_5444((uint64_t)v205, (uint64_t)v196, &v204);
        if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v51 = &v204;
        }
        else {
          unint64_t v51 = (std::string *)v204.__r_.__value_.__r.__words[0];
        }
        if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v52 = HIBYTE(v204.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v52 = v204.__r_.__value_.__l.__size_;
        }
        long long v53 = sub_188FC78(v50, (uint64_t)v51, v52);
        char v54 = sub_188FC78(v53, (uint64_t)" -> ", 4);
        unint64_t v55 = *(void *)(a2 + 20);
        if (HIDWORD(v55) != 1) {
          goto LABEL_59;
        }
        if (v55 == -3)
        {
          unsigned int v56 = 19;
          HIBYTE(v194[2]) = 19;
          strcpy((char *)v194, "virtual destination");
          uint64_t v57 = 0x206C617574726976;
          goto LABEL_65;
        }
        if (v55 == -2)
        {
          unsigned int v56 = 14;
          HIBYTE(v194[2]) = 14;
          strcpy((char *)v194, "virtual origin");
          uint64_t v57 = 0x206C617574726976;
        }
        else
        {
LABEL_59:
          char v58 = (int *)sub_498D5C(*v4 + 24, __ROR8__(v55, 32), 0, "stop");
          std::string v59 = (unsigned __int16 *)((char *)v58 - *v58);
          if (*v59 >= 9u && (uint64_t v60 = v59[4]) != 0) {
            uint64_t v61 = (unsigned int *)((char *)v58 + v60 + *(unsigned int *)((char *)v58 + v60));
          }
          else {
            uint64_t v61 = 0;
          }
          sub_C554D4(v61, 2, v194);
          unsigned int v56 = HIBYTE(v194[2]);
          uint64_t v57 = (uint64_t)v194[0];
        }
LABEL_65:
        if ((v56 & 0x80u) == 0) {
          std::string v62 = v194;
        }
        else {
          std::string v62 = (void **)v57;
        }
        if ((v56 & 0x80u) == 0) {
          uint64_t v63 = v56;
        }
        else {
          uint64_t v63 = (uint64_t)v194[1];
        }
        long long v64 = sub_188FC78(v54, (uint64_t)v62, v63);
        sub_188FC78(v64, (uint64_t)" (", 2);
        unint64_t v65 = *(void *)(a2 + 20);
        if (HIDWORD(v65) != 1 || (v65 + 3) >= 2)
        {
          unint64_t v66 = (int *)sub_498D5C(*v4 + 24, __ROR8__(v65, 32), 0, "stop");
          unint64_t v67 = (unsigned __int16 *)((char *)v66 - *v66);
          if (*v67 >= 5u && (uint64_t v68 = v67[2]) != 0) {
            uint64_t v69 = *(void *)((char *)v66 + v68);
          }
          else {
            uint64_t v69 = 0;
          }
          uint64_t v70 = sub_398020(*v4 + 24, 0);
          unint64_t v71 = &v70[-*(int *)v70];
          if (*(unsigned __int16 *)v71 >= 0xBu)
          {
            uint64_t v72 = *((unsigned __int16 *)v71 + 5);
            if (v72)
            {
              if (v70[v72]) {
                nullsub_1(v69);
              }
            }
          }
        }
        unint64_t v73 = (void *)std::ostream::operator<<();
        unint64_t v74 = sub_188FC78(v73, (uint64_t)") @ ", 4);
        sub_456C((uint64_t)v195, *(_DWORD *)(a2 + 8));
        char v190 = 8;
        strcpy((char *)v189, "HH:mm:ss");
        sub_5444((uint64_t)v195, (uint64_t)v189, &__p);
        if ((v193 & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        if ((v193 & 0x80u) == 0) {
          uint64_t v76 = v193;
        }
        else {
          uint64_t v76 = v192;
        }
        sub_188FC78(v74, (uint64_t)p_p, v76);
        if ((char)v193 < 0)
        {
          operator delete(__p);
          if ((v190 & 0x80000000) == 0)
          {
LABEL_89:
            sub_4814((uint64_t)v195);
            if ((SHIBYTE(v194[2]) & 0x80000000) == 0) {
              goto LABEL_90;
            }
            goto LABEL_96;
          }
        }
        else if ((v190 & 0x80000000) == 0)
        {
          goto LABEL_89;
        }
        operator delete(v189[0]);
        sub_4814((uint64_t)v195);
        if ((SHIBYTE(v194[2]) & 0x80000000) == 0)
        {
LABEL_90:
          if ((SHIBYTE(v204.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_91;
          }
          goto LABEL_97;
        }
LABEL_96:
        operator delete(v194[0]);
        if ((SHIBYTE(v204.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_91:
          if ((v197 & 0x80000000) == 0) {
            goto LABEL_92;
          }
          goto LABEL_98;
        }
LABEL_97:
        operator delete(v204.__r_.__value_.__l.__data_);
        if ((v197 & 0x80000000) == 0)
        {
LABEL_92:
          sub_4814((uint64_t)v205);
          if ((SHIBYTE(v209[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_285;
          }
LABEL_99:
          operator delete(v209[0].__r_.__value_.__l.__data_);
          goto LABEL_285;
        }
LABEL_98:
        operator delete(v196[0]);
        sub_4814((uint64_t)v205);
        if ((SHIBYTE(v209[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_285;
        }
        goto LABEL_99;
      }
      if (v5 == -2)
      {
        unsigned int v6 = 14;
        *((unsigned char *)&v209[0].__r_.__value_.__s + 23) = 14;
        strcpy((char *)v209, "virtual origin");
        std::string::size_type v7 = 0x206C617574726976;
        goto LABEL_33;
      }
    }
    unint64_t v8 = (int *)sub_498D5C(*v4 + 24, __ROR8__(v5, 32), 0, "stop");
    size_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
    if (*v9 >= 9u && (uint64_t v10 = v9[4]) != 0) {
      unint64_t v11 = (unsigned int *)((char *)v8 + v10 + *(unsigned int *)((char *)v8 + v10));
    }
    else {
      unint64_t v11 = 0;
    }
    sub_C554D4(v11, 2, v209);
    unsigned int v6 = HIBYTE(v209[0].__r_.__value_.__r.__words[2]);
    std::string::size_type v7 = v209[0].__r_.__value_.__r.__words[0];
    goto LABEL_33;
  }
  unint64_t v12 = __ROR8__(sub_A104E8(a1 + 517, *(void *)(a2 + 32), *(_DWORD *)(a2 + 52), *(_DWORD *)(a2 + 40)), 32);
  uint64_t v13 = (int *)sub_369F8C(a1[523] + 24, v12, 0, "trip");
  uint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 >= 7u && (unsigned __int16 v15 = v14[3]) != 0) {
    unint64_t v16 = *(unsigned int *)((char *)v13 + v15 + 4) | ((unint64_t)*(unsigned int *)((char *)v13 + v15) << 32);
  }
  else {
    unint64_t v16 = 0xFFFFFFFFLL;
  }
  unint64_t v188 = v16;
  unsigned int v17 = *(_DWORD *)(a2 + 52);
  unint64_t v18 = (int *)sub_A11094(a1 + 517, *(void *)(a2 + 32));
  std::string::size_type v19 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v19 >= 9u && (uint64_t v20 = v19[4]) != 0) {
    double v21 = (unsigned int *)((char *)v18 + v20 + *(unsigned int *)((char *)v18 + v20));
  }
  else {
    double v21 = 0;
  }
  uint64_t v22 = *(void *)sub_A10764(v21, v17);
  unsigned int v23 = *(_DWORD *)(a2 + 56);
  char v24 = (int *)sub_A11094(a1 + 517, *(void *)(a2 + 32));
  uint64_t v25 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v25 >= 9u && (uint64_t v26 = v25[4]) != 0) {
    uint64_t v27 = (unsigned int *)((char *)v24 + v26 + *(unsigned int *)((char *)v24 + v26));
  }
  else {
    uint64_t v27 = 0;
  }
  uint64_t v28 = __ROR8__(v22, 32);
  uint64_t v29 = *(void *)sub_A10764(v27, v23);
  uint64_t v30 = a1 + 515;
  unint64_t v31 = __ROR8__(v28, 32);
  if ((v28 & 0xFFFFFFFF00000000) != 0x100000000) {
    goto LABEL_27;
  }
  if (v28 == -3)
  {
    unsigned int v32 = 19;
    *((unsigned char *)&v195[0].__r_.__value_.__s + 23) = 19;
    strcpy((char *)v195, "virtual destination");
    std::string::size_type v33 = 0x206C617574726976;
    goto LABEL_101;
  }
  if (v28 == -2)
  {
    unsigned int v32 = 14;
    *((unsigned char *)&v195[0].__r_.__value_.__s + 23) = 14;
    strcpy((char *)v195, "virtual origin");
    std::string::size_type v33 = 0x206C617574726976;
  }
  else
  {
LABEL_27:
    char v34 = (int *)sub_498D5C(*v30 + 24, v31, 0, "stop");
    uint64_t v35 = (unsigned __int16 *)((char *)v34 - *v34);
    if (*v35 >= 9u && (uint64_t v36 = v35[4]) != 0) {
      long long v37 = (unsigned int *)((char *)v34 + v36 + *(unsigned int *)((char *)v34 + v36));
    }
    else {
      long long v37 = 0;
    }
    sub_C554D4(v37, 2, v195);
    unsigned int v32 = HIBYTE(v195[0].__r_.__value_.__r.__words[2]);
    std::string::size_type v33 = v195[0].__r_.__value_.__r.__words[0];
  }
LABEL_101:
  if ((v32 & 0x80u) == 0) {
    int v77 = v195;
  }
  else {
    int v77 = (std::string *)v33;
  }
  if ((v32 & 0x80u) == 0) {
    std::string::size_type v78 = v32;
  }
  else {
    std::string::size_type v78 = v195[0].__r_.__value_.__l.__size_;
  }
  unint64_t v79 = sub_188FC78(v202, (uint64_t)v77, v78);
  sub_188FC78(v79, (uint64_t)" (", 2);
  if ((v28 & 0xFFFFFFFF00000000) != 0x100000000 || (v28 + 3) >= 2)
  {
    uint64_t v80 = (int *)sub_498D5C(*v30 + 24, v31, 0, "stop");
    int v81 = (unsigned __int16 *)((char *)v80 - *v80);
    if (*v81 >= 5u && (uint64_t v82 = v81[2]) != 0) {
      uint64_t v83 = *(void *)((char *)v80 + v82);
    }
    else {
      uint64_t v83 = 0;
    }
    uint8x8_t v84 = sub_398020(*v30 + 24, 0);
    uint64_t v85 = &v84[-*(int *)v84];
    if (*(unsigned __int16 *)v85 >= 0xBu)
    {
      uint64_t v86 = *((unsigned __int16 *)v85 + 5);
      if (v86)
      {
        if (v84[v86]) {
          nullsub_1(v83);
        }
      }
    }
  }
  uint64_t v87 = (void *)std::ostream::operator<<();
  uint64_t v88 = sub_188FC78(v87, (uint64_t)") @ ", 4);
  int v89 = *(_DWORD *)(a2 + 16);
  v204.__r_.__value_.__r.__words[0] = *(void *)(a2 + 8);
  LODWORD(v204.__r_.__value_.__r.__words[1]) = v89;
  HIBYTE(v206) = 8;
  strcpy((char *)v205, "HH:mm:ss");
  sub_4A101C((uint64_t)&v204, (uint64_t)v205, v209);
  if (SHIBYTE(v206) < 0) {
    operator delete(v205[0]);
  }
  if ((v209[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v90 = v209;
  }
  else {
    unint64_t v90 = (std::string *)v209[0].__r_.__value_.__r.__words[0];
  }
  if ((v209[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v91 = HIBYTE(v209[0].__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v91 = v209[0].__r_.__value_.__l.__size_;
  }
  sub_188FC78(v88, (uint64_t)v90, v91);
  if (SHIBYTE(v209[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v209[0].__r_.__value_.__l.__data_);
    if ((SHIBYTE(v195[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_127:
      if (!*(_DWORD *)(a2 + 4)) {
        goto LABEL_151;
      }
LABEL_131:
      unint64_t v92 = sub_188FC78(v202, (uint64_t)" [check in by: ", 15);
      int v93 = *(_DWORD *)(a2 + 4);
      int v94 = *(_DWORD *)(a2 + 12);
      if (v94 == 0x7FFFFFFF || v93 == 0x7FFFFFFF)
      {
        int v95 = v93 / -10;
        int v96 = v93 % 10;
        unint64_t v98 = 0x7FFFFFFF00000000;
      }
      else
      {
        int v95 = v93 / -10;
        int v96 = v93 % 10;
        if (v93 < 0) {
          char v97 = -5;
        }
        else {
          char v97 = 5;
        }
        unint64_t v98 = (unint64_t)(v94
                               + v95
                               + (((-103 * (char)(v97 + v96)) >> 15) & 1)
                               + ((-103 * (char)(v97 + v96)) >> 10)) << 32;
      }
      int v99 = v95 + *(_DWORD *)(a2 + 8);
      if (v93 < 0) {
        char v100 = -5;
      }
      else {
        char v100 = 5;
      }
      int v101 = *(unsigned __int16 *)(a2 + 16);
      v209[0].__r_.__value_.__r.__words[0] = v98 | (v99
                                                  + (((-103 * (char)(v100 + v96)) >> 15) & 1)
                                                  + ((-103 * (char)(v100 + v96)) >> 10));
      LODWORD(v209[0].__r_.__value_.__r.__words[1]) = v101;
      HIBYTE(v206) = 8;
      strcpy((char *)v205, "HH:mm:ss");
      sub_4A101C((uint64_t)v209, (uint64_t)v205, v195);
      if (SHIBYTE(v206) < 0) {
        operator delete(v205[0]);
      }
      if ((v195[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v102 = v195;
      }
      else {
        uint64_t v102 = (std::string *)v195[0].__r_.__value_.__r.__words[0];
      }
      if ((v195[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v103 = HIBYTE(v195[0].__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v103 = v195[0].__r_.__value_.__l.__size_;
      }
      uint64_t v104 = sub_188FC78(v92, (uint64_t)v102, v103);
      sub_188FC78(v104, (uint64_t)"]", 1);
      if (SHIBYTE(v195[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v195[0].__r_.__value_.__l.__data_);
      }
      goto LABEL_151;
    }
  }
  else if ((SHIBYTE(v195[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_127;
  }
  operator delete(v195[0].__r_.__value_.__l.__data_);
  if (*(_DWORD *)(a2 + 4)) {
    goto LABEL_131;
  }
LABEL_151:
  int v105 = sub_188FC78(v202, (uint64_t)" -> ", 4);
  uint64_t v106 = __ROR8__(v29, 32);
  unint64_t v107 = __ROR8__(v106, 32);
  if ((v106 & 0xFFFFFFFF00000000) != 0x100000000) {
    goto LABEL_155;
  }
  if (v106 == -3)
  {
    unsigned int v108 = 19;
    *((unsigned char *)&v195[0].__r_.__value_.__s + 23) = 19;
    strcpy((char *)v195, "virtual destination");
    std::string::size_type v109 = 0x206C617574726976;
    goto LABEL_161;
  }
  if (v106 == -2)
  {
    unsigned int v108 = 14;
    *((unsigned char *)&v195[0].__r_.__value_.__s + 23) = 14;
    strcpy((char *)v195, "virtual origin");
    std::string::size_type v109 = 0x206C617574726976;
  }
  else
  {
LABEL_155:
    unint64_t v110 = (int *)sub_498D5C(*v30 + 24, v107, 0, "stop");
    uint64_t v111 = (unsigned __int16 *)((char *)v110 - *v110);
    if (*v111 >= 9u && (uint64_t v112 = v111[4]) != 0) {
      uint64_t v113 = (unsigned int *)((char *)v110 + v112 + *(unsigned int *)((char *)v110 + v112));
    }
    else {
      uint64_t v113 = 0;
    }
    sub_C554D4(v113, 2, v195);
    unsigned int v108 = HIBYTE(v195[0].__r_.__value_.__r.__words[2]);
    std::string::size_type v109 = v195[0].__r_.__value_.__r.__words[0];
  }
LABEL_161:
  if ((v108 & 0x80u) == 0) {
    int64_t v114 = v195;
  }
  else {
    int64_t v114 = (std::string *)v109;
  }
  if ((v108 & 0x80u) == 0) {
    std::string::size_type v115 = v108;
  }
  else {
    std::string::size_type v115 = v195[0].__r_.__value_.__l.__size_;
  }
  unint64_t v116 = sub_188FC78(v105, (uint64_t)v114, v115);
  sub_188FC78(v116, (uint64_t)" (", 2);
  if ((v106 & 0xFFFFFFFF00000000) != 0x100000000 || (v106 + 3) >= 2)
  {
    unint64_t v117 = (int *)sub_498D5C(*v30 + 24, v107, 0, "stop");
    uint64_t v118 = (unsigned __int16 *)((char *)v117 - *v117);
    if (*v118 >= 5u && (uint64_t v119 = v118[2]) != 0) {
      uint64_t v120 = *(void *)((char *)v117 + v119);
    }
    else {
      uint64_t v120 = 0;
    }
    uint64_t v121 = sub_398020(*v30 + 24, 0);
    uint64_t v122 = &v121[-*(int *)v121];
    if (*(unsigned __int16 *)v122 >= 0xBu)
    {
      uint64_t v123 = *((unsigned __int16 *)v122 + 5);
      if (v123)
      {
        if (v121[v123]) {
          nullsub_1(v120);
        }
      }
    }
  }
  uint64_t v124 = (void *)std::ostream::operator<<();
  uint64_t v125 = sub_188FC78(v124, (uint64_t)") @ ", 4);
  int v126 = *(_DWORD *)(a2 + 28);
  v204.__r_.__value_.__r.__words[0] = *(void *)(a2 + 20);
  LODWORD(v204.__r_.__value_.__r.__words[1]) = v126;
  HIBYTE(v206) = 8;
  strcpy((char *)v205, "HH:mm:ss");
  sub_4A101C((uint64_t)&v204, (uint64_t)v205, v209);
  if (SHIBYTE(v206) < 0) {
    operator delete(v205[0]);
  }
  if ((v209[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v127 = v209;
  }
  else {
    uint64_t v127 = (std::string *)v209[0].__r_.__value_.__r.__words[0];
  }
  if ((v209[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v128 = HIBYTE(v209[0].__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v128 = v209[0].__r_.__value_.__l.__size_;
  }
  unint64_t v129 = sub_188FC78(v125, (uint64_t)v127, v128);
  unint64_t v130 = sub_188FC78(v129, (uint64_t)" (", 2);
  unint64_t v131 = __ROR8__(v188, 32);
  unint64_t v132 = (int *)sub_8DFD1C(a1[507] + 24, v131, 0, "line");
  unint64_t v133 = a1 + 507;
  unint64_t v134 = (unsigned __int16 *)((char *)v132 - *v132);
  if (*v134 >= 0xFu && (uint64_t v135 = v134[7]) != 0) {
    uint64_t v136 = (unsigned int *)((char *)v132 + v135 + *(unsigned int *)((char *)v132 + v135));
  }
  else {
    uint64_t v136 = 0;
  }
  sub_C554D4(v136, 2, v205);
  if (SHIBYTE(v206) >= 0) {
    unint64_t v137 = v205;
  }
  else {
    unint64_t v137 = (void **)v205[0];
  }
  if (SHIBYTE(v206) >= 0) {
    uint64_t v138 = HIBYTE(v206);
  }
  else {
    uint64_t v138 = (uint64_t)v205[1];
  }
  v139 = sub_188FC78(v130, (uint64_t)v137, v138);
  sub_188FC78(v139, (uint64_t)"; line: ", 8);
  char v140 = (int *)sub_8DFD1C(*v133 + 24, v131, 0, "line");
  unint64_t v141 = (unsigned __int16 *)((char *)v140 - *v140);
  if (*v141 >= 5u && (uint64_t v142 = v141[2]) != 0) {
    uint64_t v143 = *(void *)((char *)v140 + v142);
  }
  else {
    uint64_t v143 = 0;
  }
  uint8x8_t v144 = sub_398020(*v133 + 24, 0);
  unsigned int v145 = &v144[-*(int *)v144];
  if (*(unsigned __int16 *)v145 >= 0xBu)
  {
    uint64_t v146 = *((unsigned __int16 *)v145 + 5);
    if (v146)
    {
      if (v144[v146]) {
        nullsub_1(v143);
      }
    }
  }
  unint64_t v147 = (void *)std::ostream::operator<<();
  sub_188FC78(v147, (uint64_t)"; trip: ", 8);
  unint64_t v148 = (int *)sub_369F8C(a1[523] + 24, v12, 0, "trip");
  unint64_t v149 = (unsigned __int16 *)((char *)v148 - *v148);
  if (*v149 >= 5u && (uint64_t v150 = v149[2]) != 0) {
    uint64_t v151 = *(void *)((char *)v148 + v150);
  }
  else {
    uint64_t v151 = 0;
  }
  int v152 = sub_398020(a1[523] + 24, 0);
  uint64_t v153 = &v152[-*(int *)v152];
  if (*(unsigned __int16 *)v153 >= 0xBu)
  {
    uint64_t v154 = *((unsigned __int16 *)v153 + 5);
    if (v154)
    {
      if (v152[v154]) {
        nullsub_1(v151);
      }
    }
  }
  int v155 = (void *)std::ostream::operator<<();
  sub_188FC78(v155, (uint64_t)")", 1);
  if (SHIBYTE(v206) < 0)
  {
    operator delete(v205[0]);
    if ((SHIBYTE(v209[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_213:
      if ((SHIBYTE(v195[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_214;
      }
      goto LABEL_218;
    }
  }
  else if ((SHIBYTE(v209[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_213;
  }
  operator delete(v209[0].__r_.__value_.__l.__data_);
  if ((SHIBYTE(v195[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_214:
    uint64_t v156 = *(void *)(a2 + 64);
    uint64_t v157 = *(void *)(a2 + 72);
    if (v156 == v157) {
      goto LABEL_237;
    }
    goto LABEL_219;
  }
LABEL_218:
  operator delete(v195[0].__r_.__value_.__l.__data_);
  uint64_t v156 = *(void *)(a2 + 64);
  uint64_t v157 = *(void *)(a2 + 72);
  if (v156 == v157) {
    goto LABEL_237;
  }
LABEL_219:
  v205[0] = 0;
  v205[1] = 0;
  int v206 = 0;
  if ((0xEEEEEEEEEEEEEEEFLL * ((v157 - v156) >> 2)) >> 62) {
    sub_2E00();
  }
  uint64_t v158 = (char *)operator new(0xBBBBBBBBBBBBBBBCLL * ((v157 - v156) >> 2));
  v205[0] = v158;
  v205[1] = v158;
  int v206 = &v158[0xBBBBBBBBBBBBBBBCLL * ((v157 - v156) >> 2)];
  do
  {
    LODWORD(v195[0].__r_.__value_.__l.__data_) = *(_DWORD *)(v156 + 4);
    uint64_t v158 = sub_935E5C(v205, v158, v195) + 4;
    v156 += 60;
  }
  while (v156 != v157);
  uint64_t v159 = sub_188FC78(v202, (uint64_t)" [", 2);
  long long v199 = 0;
  uint64_t v200 = 0;
  uint64_t v198 = 0;
  uint64_t v160 = v205[0];
  int64_t v161 = (char *)v205[1] - (char *)v205[0];
  if (v205[1] != v205[0])
  {
    if (v161 < 0) {
      sub_2E00();
    }
    uint64_t v198 = operator new((char *)v205[1] - (char *)v205[0]);
    long long v199 = v198;
    int64_t v162 = (char *)v198 + 4 * (v161 >> 2);
    uint64_t v200 = v162;
    memcpy(v198, v160, v161);
    long long v199 = v162;
  }
  sub_C53204((uint64_t)v195, (int **)&v198);
  if ((v195[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v163 = v195;
  }
  else {
    unint64_t v163 = (std::string *)v195[0].__r_.__value_.__r.__words[0];
  }
  if ((v195[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v164 = HIBYTE(v195[0].__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v164 = v195[0].__r_.__value_.__l.__size_;
  }
  v165 = sub_188FC78(v159, (uint64_t)v163, v164);
  sub_188FC78(v165, (uint64_t)"]", 1);
  if (SHIBYTE(v195[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v195[0].__r_.__value_.__l.__data_);
  }
  if (v198)
  {
    long long v199 = v198;
    operator delete(v198);
  }
  if (v205[0])
  {
    v205[1] = v205[0];
    operator delete(v205[0]);
  }
LABEL_237:
  if (*(void *)(a2 + 88) == *(void *)(a2 + 96)) {
    goto LABEL_285;
  }
  uint64_t v166 = sub_188FC78(v202, (uint64_t)" [Upcoming after ", 17);
  sub_456C((uint64_t)v195, *(_DWORD *)(a2 + 112));
  HIBYTE(v194[2]) = 8;
  strcpy((char *)v194, "HH:mm:ss");
  sub_5444((uint64_t)v195, (uint64_t)v194, v196);
  if (v197 >= 0) {
    uint64_t v167 = v196;
  }
  else {
    uint64_t v167 = (void **)v196[0];
  }
  if (v197 >= 0) {
    uint64_t v168 = v197;
  }
  else {
    uint64_t v168 = (uint64_t)v196[1];
  }
  int v169 = sub_188FC78(v166, (uint64_t)v167, v168);
  char v170 = sub_188FC78(v169, (uint64_t)": ", 2);
  uint64_t v172 = *(void *)(a2 + 88);
  uint64_t v171 = *(void *)(a2 + 96);
  sub_6BAC((uint64_t)v205);
  if (v172 != v171)
  {
    int v173 = *(_DWORD *)(v172 + 12);
    v189[0] = *(void **)(v172 + 4);
    LODWORD(v189[1]) = v173;
    *((unsigned char *)&v209[0].__r_.__value_.__s + 23) = 8;
    strcpy((char *)v209, "HH:mm:ss");
    sub_4A101C((uint64_t)v189, (uint64_t)v209, &v204);
    if (SHIBYTE(v209[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v209[0].__r_.__value_.__l.__data_);
    }
    if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v174 = &v204;
    }
    else {
      uint64_t v174 = (std::string *)v204.__r_.__value_.__r.__words[0];
    }
    if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v175 = HIBYTE(v204.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v175 = v204.__r_.__value_.__l.__size_;
    }
    sub_188FC78(v205, (uint64_t)v174, v175);
    if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v204.__r_.__value_.__l.__data_);
      uint64_t v176 = v172 + 60;
      if (v172 + 60 == v171) {
        goto LABEL_271;
      }
    }
    else
    {
      uint64_t v176 = v172 + 60;
      if (v172 + 60 == v171) {
        goto LABEL_271;
      }
    }
    uint64_t v177 = -60;
    do
    {
      if (v177) {
        sub_188FC78(v205, (uint64_t)", ", 2);
      }
      int v178 = *(_DWORD *)(v176 + 12);
      v189[0] = *(void **)(v176 + 4);
      LODWORD(v189[1]) = v178;
      *((unsigned char *)&v209[0].__r_.__value_.__s + 23) = 8;
      strcpy((char *)v209, "HH:mm:ss");
      sub_4A101C((uint64_t)v189, (uint64_t)v209, &v204);
      if (SHIBYTE(v209[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v209[0].__r_.__value_.__l.__data_);
      }
      if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v179 = &v204;
      }
      else {
        uint64_t v179 = (std::string *)v204.__r_.__value_.__r.__words[0];
      }
      if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v180 = HIBYTE(v204.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v180 = v204.__r_.__value_.__l.__size_;
      }
      sub_188FC78(v205, (uint64_t)v179, v180);
      if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v204.__r_.__value_.__l.__data_);
      }
      v176 += 60;
      v177 -= 60;
    }
    while (v176 != v171);
  }
LABEL_271:
  std::stringbuf::str();
  if (v208 < 0) {
    operator delete(v207);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  if ((v193 & 0x80u) == 0) {
    uint64_t v181 = &__p;
  }
  else {
    uint64_t v181 = __p;
  }
  if ((v193 & 0x80u) == 0) {
    uint64_t v182 = v193;
  }
  else {
    uint64_t v182 = v192;
  }
  long long v183 = sub_188FC78(v170, (uint64_t)v181, v182);
  uint64_t v184 = sub_188FC78(v183, (uint64_t)", ", 2);
  unint64_t v185 = *(char *)(a2 + 144);
  if (v185 <= 4) {
    uint64_t v184 = sub_188FC78(v184, (uint64_t)off_243EC98[v185], qword_20F0268[v185]);
  }
  sub_188FC78(v184, (uint64_t)"]", 1);
  if (((char)v193 & 0x80000000) == 0)
  {
    if ((v197 & 0x80000000) == 0) {
      goto LABEL_283;
    }
LABEL_289:
    operator delete(v196[0]);
    if ((SHIBYTE(v194[2]) & 0x80000000) == 0) {
      goto LABEL_284;
    }
LABEL_290:
    operator delete(v194[0]);
    goto LABEL_284;
  }
  operator delete(__p);
  if (v197 < 0) {
    goto LABEL_289;
  }
LABEL_283:
  if (SHIBYTE(v194[2]) < 0) {
    goto LABEL_290;
  }
LABEL_284:
  sub_4814((uint64_t)v195);
LABEL_285:
  std::stringbuf::str();
  *(void *)((char *)v201
  v202[0] = v186;
  if (v203 < 0) {
    operator delete((void *)v202[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_C52E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a73 < 0) {
    operator delete(a72);
  }
  sub_111ECAC((uint64_t)&a74);
  if (a36 < 0)
  {
    operator delete(__p);
    if ((a22 & 0x80000000) == 0)
    {
LABEL_9:
      sub_4814((uint64_t)&a24);
      sub_1C02990((uint64_t)&a40);
      _Unwind_Resume(a1);
    }
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(a17);
  goto LABEL_9;
}

void sub_C5319C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x20F]) < 0) {
    operator delete(__p);
  }
  if (*(char *)(v72 - 105) < 0) {
    operator delete(*(void **)(v72 - 128));
  }
  if (a26 < 0)
  {
    operator delete(a21);
    sub_1C02990((uint64_t)&a37);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0xC531F4);
}

void sub_C531E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a72) {
    JUMPOUT(0xC531ECLL);
  }
  JUMPOUT(0xC531F4);
}

uint64_t sub_C53204(uint64_t a1, int **a2)
{
  long long v3 = *a2;
  unint64_t v4 = (char *)a2[1];
  unint64_t v5 = 126 - 2 * __clz((v4 - (char *)v3) >> 2);
  if (v4 == (char *)v3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5;
  }
  sub_97CC7C(v3, v4, (uint64_t)v22, v6, 1);
  unint64_t v21 = sub_BC28((uint64_t)a2, 9000, 10, 1, 1);
  if (sub_BB7C(&v21))
  {
    sub_E1B4((uint64_t)v22);
    std::string::size_type v7 = (_DWORD *)nullsub_1(&v21);
    if (*v7 == *(_DWORD *)sub_BBB4((uint64_t)&v21))
    {
      sub_188FC78(v23, (uint64_t)"every ", 6);
      nullsub_1(&v21);
    }
    else
    {
      sub_188FC78(v23, (uint64_t)"every ", 6);
      nullsub_1(&v21);
      uint64_t v13 = (void *)std::ostream::operator<<();
      sub_188FC78(v13, (uint64_t)"–", 3);
      sub_BBB4((uint64_t)&v21);
    }
    uint64_t v14 = (void *)std::ostream::operator<<();
    sub_188FC78(v14, (uint64_t)" min", 4);
    std::stringbuf::str();
    *(void *)((char *)v22
    v23[0] = v15;
    if (v25 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return std::ios::~ios();
  }
  unint64_t v8 = *a2;
  size_t v9 = a2[1];
  sub_6BAC((uint64_t)v22);
  if (v8 != v9)
  {
    sub_456C((uint64_t)v31, *v8);
    char v30 = 8;
    strcpy((char *)v29, "HH:mm:ss");
    sub_5444(v10, (uint64_t)v29, &v26);
    if (v30 < 0) {
      operator delete(v29[0]);
    }
    sub_4814((uint64_t)v31);
    if ((v28 & 0x80u) == 0) {
      unint64_t v11 = (void **)&v26;
    }
    else {
      unint64_t v11 = v26;
    }
    if ((v28 & 0x80u) == 0) {
      uint64_t v12 = v28;
    }
    else {
      uint64_t v12 = v27;
    }
    sub_188FC78(v22, (uint64_t)v11, v12);
    if (((char)v28 & 0x80000000) == 0)
    {
      if (v8 + 1 == v9) {
        goto LABEL_38;
      }
LABEL_24:
      uint64_t v16 = 1;
      do
      {
        if (v16 * 4) {
          sub_188FC78(v22, (uint64_t)", ", 2);
        }
        sub_456C((uint64_t)v31, v8[v16]);
        char v30 = 8;
        strcpy((char *)v29, "HH:mm:ss");
        sub_5444(v17, (uint64_t)v29, &v26);
        if (v30 < 0) {
          operator delete(v29[0]);
        }
        sub_4814((uint64_t)v31);
        if ((v28 & 0x80u) == 0) {
          unint64_t v18 = (void **)&v26;
        }
        else {
          unint64_t v18 = v26;
        }
        if ((v28 & 0x80u) == 0) {
          uint64_t v19 = v28;
        }
        else {
          uint64_t v19 = v27;
        }
        sub_188FC78(v22, (uint64_t)v18, v19);
        if ((char)v28 < 0) {
          operator delete(v26);
        }
        ++v16;
      }
      while (&v8[v16] != v9);
      goto LABEL_38;
    }
    operator delete(v26);
    if (v8 + 1 != v9) {
      goto LABEL_24;
    }
  }
LABEL_38:
  std::stringbuf::str();
  if (SHIBYTE(__p) < 0) {
    operator delete((void *)v23[7]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_C5379C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void (__cdecl **a11)(std::stringbuf *__hidden this), uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (*(char *)(v29 - 153) < 0) {
    operator delete(*(void **)(v29 - 176));
  }
  if (a24 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_C539DC(void *a1, uint64_t *a2)
{
  sub_E1B4((uint64_t)v22);
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 != *a2)
  {
    sub_188FC78(v23, (uint64_t)"    [", 5);
    uint64_t v6 = (void *)std::ostream::operator<<();
    std::string::size_type v7 = sub_188FC78(v6, (uint64_t)"] ", 2);
    sub_C51854(a1, *a2);
    if ((v21 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v21 & 0x80u) == 0) {
      uint64_t v9 = v21;
    }
    else {
      uint64_t v9 = v20;
    }
    sub_188FC78(v7, (uint64_t)p_p, v9);
    if ((char)v21 < 0)
    {
      operator delete(__p);
      if (v5 == 168) {
        goto LABEL_12;
      }
    }
    else if (v5 == 168)
    {
      goto LABEL_12;
    }
    uint64_t v12 = v5 / 168;
    uint64_t v13 = 1;
    uint64_t v14 = 168;
    do
    {
      sub_188FC78(v23, (uint64_t)"\n", 1);
      sub_188FC78(v23, (uint64_t)"    [", 5);
      ++v13;
      uint64_t v15 = (void *)std::ostream::operator<<();
      uint64_t v16 = sub_188FC78(v15, (uint64_t)"] ", 2);
      sub_C51854(a1, *a2 + v14);
      if ((v21 & 0x80u) == 0) {
        uint64_t v17 = &__p;
      }
      else {
        uint64_t v17 = __p;
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v18 = v21;
      }
      else {
        uint64_t v18 = v20;
      }
      sub_188FC78(v16, (uint64_t)v17, v18);
      if ((char)v21 < 0) {
        operator delete(__p);
      }
      v14 += 168;
    }
    while (v12 != v13);
  }
LABEL_12:
  std::stringbuf::str();
  *(void *)((char *)v22
  v23[0] = v10;
  if (v24 < 0) {
    operator delete((void *)v23[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_C53CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_1C02990((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_1C02990((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_C53D10@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = result + 16;
  if (*(_DWORD *)(result + 16) == 0x7FFFFFFF)
  {
    a2[23] = 0;
    *a2 = 0;
    return result;
  }
  uint64_t v3 = result;
  sub_E1B4((uint64_t)v127);
  uint64_t v4 = sub_188FC78(v128, (uint64_t)"  Criteria:\n", 12);
  uint64_t v5 = sub_188FC78(v4, (uint64_t)"    Exp. Departure time: ", 25);
  HIBYTE(v125[2]) = 19;
  strcpy((char *)v125, "yyyy-MM-dd HH:mm:ss");
  sub_4A101C(v2, (uint64_t)v125, &v126);
  if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v6 = &v126;
  }
  else {
    uint64_t v6 = (std::string *)v126.__r_.__value_.__r.__words[0];
  }
  if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v126.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v126.__r_.__value_.__l.__size_;
  }
  unint64_t v8 = sub_188FC78(v5, (uint64_t)v6, size);
  uint64_t v9 = sub_188FC78(v8, (uint64_t)" (", 2);
  char v123 = 0;
  LOBYTE(v122) = 0;
  sub_4A101C(v2, (uint64_t)&v122, &v124);
  if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v10 = &v124;
  }
  else {
    uint64_t v10 = (std::string *)v124.__r_.__value_.__r.__words[0];
  }
  if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v11 = HIBYTE(v124.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v11 = v124.__r_.__value_.__l.__size_;
  }
  uint64_t v12 = sub_188FC78(v9, (uint64_t)v10, v11);
  uint64_t v13 = sub_188FC78(v12, (uint64_t)")\n", 2);
  uint64_t v14 = sub_188FC78(v13, (uint64_t)"    Exp. Arrival time: ", 23);
  HIBYTE(v120[2]) = 19;
  strcpy((char *)v120, "yyyy-MM-dd HH:mm:ss");
  sub_4A101C(v3 + 28, (uint64_t)v120, &v121);
  if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v15 = &v121;
  }
  else {
    uint64_t v15 = (std::string *)v121.__r_.__value_.__r.__words[0];
  }
  if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v16 = HIBYTE(v121.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v16 = v121.__r_.__value_.__l.__size_;
  }
  uint64_t v17 = sub_188FC78(v14, (uint64_t)v15, v16);
  uint64_t v18 = sub_188FC78(v17, (uint64_t)" (", 2);
  char v118 = 0;
  LOBYTE(v117) = 0;
  sub_4A101C(v3 + 28, (uint64_t)&v117, &v119);
  if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v19 = &v119;
  }
  else {
    uint64_t v19 = (std::string *)v119.__r_.__value_.__r.__words[0];
  }
  if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v20 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v20 = v119.__r_.__value_.__l.__size_;
  }
  unsigned __int8 v21 = sub_188FC78(v18, (uint64_t)v19, v20);
  uint64_t v22 = sub_188FC78(v21, (uint64_t)")\n", 2);
  unsigned int v23 = sub_188FC78(v22, (uint64_t)"    Exp. Travel duration: ", 26);
  char v115 = 0;
  LOBYTE(v114) = 0;
  sub_4A1580(v3 + 44, (uint64_t)&v114, &v116);
  if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v24 = &v116;
  }
  else {
    char v24 = (std::string *)v116.__r_.__value_.__r.__words[0];
  }
  if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v25 = HIBYTE(v116.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v25 = v116.__r_.__value_.__l.__size_;
  }
  uint64_t v26 = sub_188FC78(v23, (uint64_t)v24, v25);
  uint64_t v27 = sub_188FC78(v26, (uint64_t)"\n", 1);
  unsigned __int8 v28 = sub_188FC78(v27, (uint64_t)"    Exp. Walking duration: ", 27);
  char v112 = 0;
  LOBYTE(v111) = 0;
  sub_4A1580(v3 + 56, (uint64_t)&v111, &v113);
  if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v29 = &v113;
  }
  else {
    uint64_t v29 = (std::string *)v113.__r_.__value_.__r.__words[0];
  }
  if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v30 = HIBYTE(v113.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v30 = v113.__r_.__value_.__l.__size_;
  }
  unint64_t v31 = sub_188FC78(v28, (uint64_t)v29, v30);
  unsigned int v32 = sub_188FC78(v31, (uint64_t)"\n", 1);
  std::string::size_type v33 = sub_188FC78(v32, (uint64_t)"    Routing Preference Penalty: ", 32);
  std::ostream::operator<<();
  char v34 = sub_188FC78(v33, (uint64_t)"\n", 1);
  uint64_t v35 = sub_188FC78(v34, (uint64_t)"    Fare Estimate Penalty: ", 27);
  std::ostream::operator<<();
  uint64_t v36 = sub_188FC78(v35, (uint64_t)"\n", 1);
  long long v37 = sub_188FC78(v36, (uint64_t)"    Price: ", 11);
  int v39 = *(_DWORD *)(v3 + 104);
  if (v39 == 0x7FFFFFFF) {
    goto LABEL_50;
  }
  uint64_t v40 = *(unsigned __int8 *)(v3 + 135);
  if ((v40 & 0x80u) != 0) {
    uint64_t v40 = *(void *)(v3 + 120);
  }
  if (!v40)
  {
LABEL_50:
    int v48 = 0;
    unsigned int v49 = 4;
    HIBYTE(v110) = 4;
    strcpy((char *)&v109, "none");
  }
  else
  {
    LODWORD(v38) = *(_DWORD *)(v3 + 136);
    std::to_string(&v107, (double)v39 / (double)v38);
    unint64_t v41 = std::string::append(&v107, " ");
    long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v108.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    int v43 = *(char *)(v3 + 135);
    if (v43 >= 0) {
      uint64_t v44 = (const std::string::value_type *)(v3 + 112);
    }
    else {
      uint64_t v44 = *(const std::string::value_type **)(v3 + 112);
    }
    if (v43 >= 0) {
      std::string::size_type v45 = *(unsigned __int8 *)(v3 + 135);
    }
    else {
      std::string::size_type v45 = *(void *)(v3 + 120);
    }
    char v46 = std::string::append(&v108, v44, v45);
    long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    std::string::size_type v110 = v46->__r_.__value_.__r.__words[2];
    long long v109 = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    int v48 = 1;
    unsigned int v49 = HIBYTE(v110);
  }
  if ((v49 & 0x80u) == 0) {
    char v50 = &v109;
  }
  else {
    char v50 = (long long *)v109;
  }
  if ((v49 & 0x80u) == 0) {
    uint64_t v51 = v49;
  }
  else {
    uint64_t v51 = *((void *)&v109 + 1);
  }
  std::string::size_type v52 = sub_188FC78(v37, (uint64_t)v50, v51);
  long long v53 = sub_188FC78(v52, (uint64_t)"\n", 1);
  char v54 = sub_188FC78(v53, (uint64_t)"    Normalised Monetary Cost: ", 30);
  unsigned int v55 = *(_DWORD *)(v3 + 144);
  if (v55 == -1)
  {
    unsigned int v56 = 4;
    *((unsigned char *)&v106.__r_.__value_.__s + 23) = 4;
    strcpy((char *)&v106, "none");
  }
  else
  {
    std::to_string(&v106, v55);
    unsigned int v56 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
  }
  if ((v56 & 0x80u) == 0) {
    uint64_t v57 = &v106;
  }
  else {
    uint64_t v57 = (std::string *)v106.__r_.__value_.__r.__words[0];
  }
  if ((v56 & 0x80u) == 0) {
    std::string::size_type v58 = v56;
  }
  else {
    std::string::size_type v58 = v106.__r_.__value_.__l.__size_;
  }
  std::string v59 = sub_188FC78(v54, (uint64_t)v57, v58);
  uint64_t v60 = sub_188FC78(v59, (uint64_t)"\n", 1);
  uint64_t v61 = sub_188FC78(v60, (uint64_t)"    Used Transport Modes: ", 26);
  char v105 = 8;
  strcpy((char *)v104, "00000000");
  uint64_t v62 = *(void *)(v3 + 96);
  if (v62)
  {
    HIBYTE(v104[0]) = 49;
    if ((v62 & 2) == 0)
    {
LABEL_68:
      if ((v62 & 4) == 0) {
        goto LABEL_69;
      }
      goto LABEL_94;
    }
  }
  else if ((v62 & 2) == 0)
  {
    goto LABEL_68;
  }
  BYTE6(v104[0]) = 49;
  if ((v62 & 4) == 0)
  {
LABEL_69:
    if ((v62 & 8) == 0) {
      goto LABEL_70;
    }
    goto LABEL_95;
  }
LABEL_94:
  BYTE5(v104[0]) = 49;
  if ((v62 & 8) == 0)
  {
LABEL_70:
    if ((v62 & 0x10) == 0) {
      goto LABEL_71;
    }
    goto LABEL_96;
  }
LABEL_95:
  BYTE4(v104[0]) = 49;
  if ((v62 & 0x10) == 0)
  {
LABEL_71:
    if ((v62 & 0x20) == 0) {
      goto LABEL_72;
    }
    goto LABEL_97;
  }
LABEL_96:
  BYTE3(v104[0]) = 49;
  if ((v62 & 0x20) == 0)
  {
LABEL_72:
    if ((v62 & 0x40) == 0) {
      goto LABEL_73;
    }
    goto LABEL_98;
  }
LABEL_97:
  BYTE2(v104[0]) = 49;
  if ((v62 & 0x40) == 0)
  {
LABEL_73:
    if ((v62 & 0x80) == 0) {
      goto LABEL_75;
    }
    goto LABEL_74;
  }
LABEL_98:
  BYTE1(v104[0]) = 49;
  if ((v62 & 0x80) != 0) {
LABEL_74:
  }
    LOBYTE(v104[0]) = 49;
LABEL_75:
  uint64_t v63 = sub_188FC78(v61, (uint64_t)v104, 8);
  long long v64 = sub_188FC78(v63, (uint64_t)"\n", 1);
  unint64_t v65 = sub_188FC78(v64, (uint64_t)"    Blocked: ", 13);
  if (*(unsigned char *)v3) {
    unint64_t v66 = "yes";
  }
  else {
    unint64_t v66 = "no";
  }
  if (*(unsigned char *)v3) {
    uint64_t v67 = 3;
  }
  else {
    uint64_t v67 = 2;
  }
  uint64_t v68 = sub_188FC78(v65, (uint64_t)v66, v67);
  uint64_t v69 = sub_188FC78(v68, (uint64_t)"\n", 1);
  uint64_t v70 = sub_188FC78(v69, (uint64_t)"    Avoids Blocking Incidents: ", 31);
  if (*(unsigned char *)(v3 + 1)) {
    unint64_t v71 = "yes";
  }
  else {
    unint64_t v71 = "no";
  }
  if (*(unsigned char *)(v3 + 1)) {
    uint64_t v72 = 3;
  }
  else {
    uint64_t v72 = 2;
  }
  unint64_t v73 = sub_188FC78(v70, (uint64_t)v71, v72);
  unint64_t v74 = sub_188FC78(v73, (uint64_t)"\n", 1);
  uint64_t v75 = sub_188FC78(v74, (uint64_t)"    Risk: ", 10);
  unint64_t v76 = *(char *)(v3 + 2);
  if (v76 <= 3) {
    uint64_t v75 = sub_188FC78(v75, (uint64_t)off_243EC60[v76], *(void *)&asc_20F0230[8 * v76]);
  }
  int v77 = sub_188FC78(v75, (uint64_t)"\n", 1);
  std::string::size_type v78 = sub_188FC78(v77, (uint64_t)"    Type: ", 10);
  unint64_t v79 = v78;
  if (*(unsigned char *)(v3 + 9))
  {
    if (*(unsigned char *)(v3 + 9) != 1) {
      goto LABEL_102;
    }
    uint64_t v80 = "fill-in";
    uint64_t v81 = 7;
  }
  else
  {
    uint64_t v80 = "main";
    uint64_t v81 = 4;
  }
  unint64_t v79 = sub_188FC78(v78, (uint64_t)v80, v81);
LABEL_102:
  int v82 = *(_DWORD *)(v3 + 12);
  if (v82 == -1)
  {
    unsigned int v87 = 0;
    HIBYTE(v103) = 0;
    LOBYTE(__p[0]) = 0;
  }
  else
  {
    std::to_string(&v100, *(_DWORD *)(v3 + 12));
    uint64_t v83 = std::string::insert(&v100, 0, " (group ");
    long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
    v101.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v84;
    v83->__r_.__value_.__l.__size_ = 0;
    v83->__r_.__value_.__r.__words[2] = 0;
    v83->__r_.__value_.__r.__words[0] = 0;
    uint64_t v85 = std::string::append(&v101, ")");
    long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
    std::string::size_type v103 = v85->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = v86;
    v85->__r_.__value_.__l.__size_ = 0;
    v85->__r_.__value_.__r.__words[2] = 0;
    v85->__r_.__value_.__r.__words[0] = 0;
    unsigned int v87 = HIBYTE(v103);
  }
  if ((v87 & 0x80u) == 0) {
    uint64_t v88 = __p;
  }
  else {
    uint64_t v88 = (void **)__p[0];
  }
  if ((v87 & 0x80u) == 0) {
    uint64_t v89 = v87;
  }
  else {
    uint64_t v89 = (uint64_t)__p[1];
  }
  unint64_t v90 = sub_188FC78(v79, (uint64_t)v88, v89);
  std::string::size_type v91 = sub_188FC78(v90, (uint64_t)"\n", 1);
  unint64_t v92 = sub_188FC78(v91, (uint64_t)"    Realtime:", 13);
  uint64_t v93 = *(int *)(v3 + 4);
  if (v93 <= 2) {
    unint64_t v92 = sub_188FC78(v92, (uint64_t)off_243EC80[v93], qword_20F0250[v93]);
  }
  int v94 = sub_188FC78(v92, (uint64_t)"\n", 1);
  int v95 = sub_188FC78(v94, (uint64_t)"    Fulfils Avoid Types: ", 25);
  if (*(unsigned char *)(v3 + 8)) {
    int v96 = "yes";
  }
  else {
    int v96 = "no";
  }
  if (*(unsigned char *)(v3 + 8)) {
    uint64_t v97 = 3;
  }
  else {
    uint64_t v97 = 2;
  }
  unint64_t v98 = sub_188FC78(v95, (uint64_t)v96, v97);
  sub_188FC78(v98, (uint64_t)"\n", 1);
  if (SHIBYTE(v103) < 0)
  {
    operator delete(__p[0]);
    if (v82 == -1) {
      goto LABEL_125;
    }
  }
  else if (v82 == -1)
  {
LABEL_125:
    if ((v105 & 0x80000000) == 0) {
      goto LABEL_126;
    }
    goto LABEL_132;
  }
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v101.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_125;
    }
  }
  else if ((SHIBYTE(v100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_125;
  }
  operator delete(v100.__r_.__value_.__l.__data_);
  if ((v105 & 0x80000000) == 0)
  {
LABEL_126:
    if ((SHIBYTE(v106.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_127;
    }
    goto LABEL_133;
  }
LABEL_132:
  operator delete(v104[0]);
  if ((SHIBYTE(v106.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_127:
    if ((SHIBYTE(v110) & 0x80000000) == 0) {
      goto LABEL_128;
    }
LABEL_134:
    operator delete((void *)v109);
    if (!v48) {
      goto LABEL_137;
    }
    goto LABEL_135;
  }
LABEL_133:
  operator delete(v106.__r_.__value_.__l.__data_);
  if (SHIBYTE(v110) < 0) {
    goto LABEL_134;
  }
LABEL_128:
  if (!v48)
  {
LABEL_137:
    if ((SHIBYTE(v113.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_138;
    }
    goto LABEL_154;
  }
LABEL_135:
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v108.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_137;
    }
  }
  else if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_137;
  }
  operator delete(v107.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v113.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_138:
    if ((v112 & 0x80000000) == 0) {
      goto LABEL_139;
    }
    goto LABEL_155;
  }
LABEL_154:
  operator delete(v113.__r_.__value_.__l.__data_);
  if ((v112 & 0x80000000) == 0)
  {
LABEL_139:
    if ((SHIBYTE(v116.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_140;
    }
    goto LABEL_156;
  }
LABEL_155:
  operator delete(v111);
  if ((SHIBYTE(v116.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_140:
    if ((v115 & 0x80000000) == 0) {
      goto LABEL_141;
    }
    goto LABEL_157;
  }
LABEL_156:
  operator delete(v116.__r_.__value_.__l.__data_);
  if ((v115 & 0x80000000) == 0)
  {
LABEL_141:
    if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_142;
    }
    goto LABEL_158;
  }
LABEL_157:
  operator delete(v114);
  if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_142:
    if ((v118 & 0x80000000) == 0) {
      goto LABEL_143;
    }
    goto LABEL_159;
  }
LABEL_158:
  operator delete(v119.__r_.__value_.__l.__data_);
  if ((v118 & 0x80000000) == 0)
  {
LABEL_143:
    if ((SHIBYTE(v121.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_144;
    }
    goto LABEL_160;
  }
LABEL_159:
  operator delete(v117);
  if ((SHIBYTE(v121.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_144:
    if ((SHIBYTE(v120[2]) & 0x80000000) == 0) {
      goto LABEL_145;
    }
    goto LABEL_161;
  }
LABEL_160:
  operator delete(v121.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v120[2]) & 0x80000000) == 0)
  {
LABEL_145:
    if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_146;
    }
    goto LABEL_162;
  }
LABEL_161:
  operator delete(v120[0]);
  if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_146:
    if ((v123 & 0x80000000) == 0) {
      goto LABEL_147;
    }
    goto LABEL_163;
  }
LABEL_162:
  operator delete(v124.__r_.__value_.__l.__data_);
  if ((v123 & 0x80000000) == 0)
  {
LABEL_147:
    if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_148;
    }
LABEL_164:
    operator delete(v126.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v125[2]) & 0x80000000) == 0) {
      goto LABEL_149;
    }
LABEL_165:
    operator delete(v125[0]);
    goto LABEL_149;
  }
LABEL_163:
  operator delete(v122);
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_164;
  }
LABEL_148:
  if (SHIBYTE(v125[2]) < 0) {
    goto LABEL_165;
  }
LABEL_149:
  std::stringbuf::str();
  *(void *)((char *)v127
  v128[0] = v99;
  if (v129 < 0) {
    operator delete((void *)v128[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_C54814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a56 < 0)
  {
    operator delete(a51);
    if ((a50 & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }
  else if ((a50 & 0x80000000) == 0)
  {
LABEL_7:
    if (a68 < 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
  operator delete(a45);
  if (a68 < 0)
  {
LABEL_8:
    operator delete(a63);
    if ((a62 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  if ((a62 & 0x80000000) == 0)
  {
LABEL_9:
    if (a74 < 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a57);
  if (a74 < 0)
  {
LABEL_10:
    operator delete(a73);
    if ((a72 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  if ((a72 & 0x80000000) == 0)
  {
LABEL_11:
    if (a78 < 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete(a69);
  if (a78 < 0)
  {
LABEL_12:
    operator delete(a77);
    if ((a76 & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_24:
  if ((a76 & 0x80000000) == 0)
  {
LABEL_13:
    if (a82 < 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete(a75);
  if (a82 < 0)
  {
LABEL_14:
    operator delete(a81);
    if ((a80 & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }
LABEL_26:
  if ((a80 & 0x80000000) == 0)
  {
LABEL_15:
    if (SLOBYTE(STACK[0x217]) < 0) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete(a79);
  if (SLOBYTE(STACK[0x217]) < 0)
  {
LABEL_16:
    operator delete((void *)STACK[0x200]);
    if ((a84 & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }
LABEL_28:
  if ((a84 & 0x80000000) == 0)
  {
LABEL_17:
    sub_1C02990((uint64_t)&STACK[0x218]);
    _Unwind_Resume(a1);
  }
LABEL_29:
  operator delete(a83);
  sub_1C02990((uint64_t)&STACK[0x218]);
  _Unwind_Resume(a1);
}

uint64_t sub_C54B24(void *a1, void *a2)
{
  sub_E1B4((uint64_t)v54);
  sub_C53D10((uint64_t)a2, &__p);
  if (v53 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if (v53 >= 0) {
    uint64_t v5 = HIBYTE(v53);
  }
  else {
    uint64_t v5 = (uint64_t)v52;
  }
  sub_188FC78(v55, (uint64_t)p_p, v5);
  if (SHIBYTE(v53) < 0)
  {
    operator delete(__p);
    uint64_t v7 = a2[25];
    uint64_t v9 = a2[26];
    uint64_t v8 = v9 - v7;
    if (v9 == v7) {
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v7 = a2[25];
    uint64_t v6 = a2[26];
    uint64_t v8 = v6 - v7;
    if (v6 == v7) {
      goto LABEL_30;
    }
  }
  sub_188FC78(v55, (uint64_t)"  Bundle ", 9);
  uint64_t v10 = (void *)std::ostream::operator<<();
  sub_188FC78(v10, (uint64_t)" of ", 4);
  std::string::size_type v11 = (void *)std::ostream::operator<<();
  uint64_t v12 = sub_188FC78(v11, (uint64_t)" [", 2);
  int v13 = *(unsigned __int8 *)(v7 + 24);
  if (v13 == 1) {
    uint64_t v14 = "walking";
  }
  else {
    uint64_t v14 = "public transport";
  }
  if (v13 == 1) {
    uint64_t v15 = 7;
  }
  else {
    uint64_t v15 = 16;
  }
  sub_188FC78(v12, (uint64_t)v14, v15);
  if (!*(unsigned char *)(v7 + 24))
  {
    std::string::size_type v16 = sub_188FC78(v55, (uint64_t)", ", 2);
    unint64_t v17 = *(char *)(v7 + 56);
    if (v17 <= 4) {
      sub_188FC78(v16, (uint64_t)off_243EC98[v17], qword_20F0268[v17]);
    }
  }
  uint64_t v18 = sub_188FC78(v55, (uint64_t)"]:\n", 3);
  sub_C539DC(a1, (uint64_t *)v7);
  if (v53 >= 0) {
    uint64_t v19 = &__p;
  }
  else {
    uint64_t v19 = __p;
  }
  if (v53 >= 0) {
    uint64_t v20 = HIBYTE(v53);
  }
  else {
    uint64_t v20 = (uint64_t)v52;
  }
  sub_188FC78(v18, (uint64_t)v19, v20);
  if (SHIBYTE(v53) < 0)
  {
    operator delete(__p);
    if (v8 == 72) {
      goto LABEL_30;
    }
  }
  else if (v8 == 72)
  {
    goto LABEL_30;
  }
  uint64_t v32 = 0;
  uint64_t v33 = v8 / 72;
  uint64_t v34 = 1;
  do
  {
    uint64_t v35 = a2[25];
    sub_188FC78(v55, (uint64_t)"\n", 1);
    sub_188FC78(v55, (uint64_t)"  Bundle ", 9);
    ++v34;
    uint64_t v36 = (void *)std::ostream::operator<<();
    sub_188FC78(v36, (uint64_t)" of ", 4);
    long long v37 = (void *)std::ostream::operator<<();
    unint64_t v38 = sub_188FC78(v37, (uint64_t)" [", 2);
    if (*(unsigned char *)(v35 + v32 + 96) == 1) {
      int v39 = "walking";
    }
    else {
      int v39 = "public transport";
    }
    if (*(unsigned char *)(v35 + v32 + 96) == 1) {
      uint64_t v40 = 7;
    }
    else {
      uint64_t v40 = 16;
    }
    sub_188FC78(v38, (uint64_t)v39, v40);
    if (!*(unsigned char *)(v35 + v32 + 96))
    {
      unint64_t v41 = sub_188FC78(v55, (uint64_t)", ", 2);
      unint64_t v42 = *(char *)(v35 + v32 + 128);
      if (v42 <= 4) {
        sub_188FC78(v41, (uint64_t)off_243EC98[v42], qword_20F0268[v42]);
      }
    }
    int v43 = sub_188FC78(v55, (uint64_t)"]:\n", 3);
    sub_C539DC(a1, (uint64_t *)(v35 + v32 + 72));
    if (v53 >= 0) {
      uint64_t v44 = &__p;
    }
    else {
      uint64_t v44 = __p;
    }
    if (v53 >= 0) {
      uint64_t v45 = HIBYTE(v53);
    }
    else {
      uint64_t v45 = (uint64_t)v52;
    }
    sub_188FC78(v43, (uint64_t)v44, v45);
    if (SHIBYTE(v53) < 0) {
      operator delete(__p);
    }
    v32 += 72;
  }
  while (v33 != v34);
LABEL_30:
  uint64_t v21 = a2[28];
  uint64_t v22 = a2[29];
  if (v21 != v22)
  {
    long long __p = 0;
    std::string::size_type v52 = 0;
    uint64_t v53 = 0;
    v49[0] = &__p;
    do
    {
      if (*(_DWORD *)(v21 + 4) != 0x7FFFFFFF)
      {
        v57[0] = *(_DWORD *)(v21 + 4);
        sub_737BC((uint64_t *)v49, v57);
      }
      v21 += 16;
    }
    while (v21 != v22);
    unsigned int v23 = sub_188FC78(v55, (uint64_t)"\nRuns expected ", 15);
    long long v47 = 0;
    int v48 = 0;
    char v46 = 0;
    char v24 = __p;
    int64_t v25 = v52 - (unsigned char *)__p;
    if (v52 != __p)
    {
      if (v25 < 0) {
        sub_2E00();
      }
      uint64_t v26 = (char *)operator new(v52 - (unsigned char *)__p);
      uint64_t v27 = &v26[4 * (v25 >> 2)];
      char v46 = v26;
      int v48 = v27;
      memcpy(v26, v24, v25);
      long long v47 = v27;
    }
    sub_C53204((uint64_t)v49, (int **)&v46);
    if ((v50 & 0x80u) == 0) {
      unsigned __int8 v28 = v49;
    }
    else {
      unsigned __int8 v28 = (void **)v49[0];
    }
    if ((v50 & 0x80u) == 0) {
      uint64_t v29 = v50;
    }
    else {
      uint64_t v29 = (uint64_t)v49[1];
    }
    sub_188FC78(v23, (uint64_t)v28, v29);
    if ((char)v50 < 0) {
      operator delete(v49[0]);
    }
    if (v46)
    {
      long long v47 = v46;
      operator delete(v46);
    }
    if (__p)
    {
      std::string::size_type v52 = __p;
      operator delete(__p);
    }
  }
  std::stringbuf::str();
  *(void *)((char *)v54
  v55[0] = v30;
  if (v56 < 0) {
    operator delete((void *)v55[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_C550E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  if (a19 < 0)
  {
    operator delete(__p);
    uint64_t v27 = a11;
    if (!a11)
    {
LABEL_3:
      unsigned __int8 v28 = a20;
      if (!a20)
      {
LABEL_8:
        sub_1C02990((uint64_t)&a26);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(v28);
      sub_1C02990((uint64_t)&a26);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v27 = a11;
    if (!a11) {
      goto LABEL_3;
    }
  }
  operator delete(v27);
  unsigned __int8 v28 = a20;
  if (!a20) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t sub_C551D4(void *a1, uint64_t a2)
{
  sub_E1B4((uint64_t)v21);
  uint64_t v4 = *(void *)(a2 + 16) - *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = v4 / 296;
    do
    {
      uint64_t v8 = *(void *)(a2 + 8);
      sub_188FC78(v22, (uint64_t)"Journey ", 8);
      ++v6;
      uint64_t v9 = (void *)std::ostream::operator<<();
      sub_188FC78(v9, (uint64_t)" of ", 4);
      uint64_t v10 = (void *)std::ostream::operator<<();
      sub_188FC78(v10, (uint64_t)" (score ", 8);
      std::string::size_type v11 = (void *)std::ostream::operator<<();
      uint64_t v12 = sub_188FC78(v11, (uint64_t)"%):\n", 4);
      sub_C54B24(a1, (void *)(v8 + v5));
      if ((v20 & 0x80u) == 0) {
        int v13 = __p;
      }
      else {
        int v13 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v14 = v20;
      }
      else {
        uint64_t v14 = (uint64_t)__p[1];
      }
      uint64_t v15 = sub_188FC78(v12, (uint64_t)v13, v14);
      std::string::size_type v16 = sub_188FC78(v15, (uint64_t)"\n", 1);
      sub_188FC78(v16, (uint64_t)"\n", 1);
      if ((char)v20 < 0) {
        operator delete(__p[0]);
      }
      v5 += 296;
    }
    while (v7 != v6);
  }
  std::stringbuf::str();
  *(void *)((char *)v21
  v22[0] = v17;
  if (v23 < 0) {
    operator delete((void *)v22[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_C55494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void sub_C554D4(unsigned int *a1@<X1>, int a2@<W2>, unsigned char *a3@<X8>)
{
  uint64_t v3 = a3;
  if (!a1 || (uint64_t v4 = *a1, !v4))
  {
    *(void *)a3 = 0x6E776F6E6B6E75;
    a3[23] = 7;
    return;
  }
  unint64_t v5 = 0;
  uint64_t v6 = 4 * v4;
  while (1)
  {
    uint64_t v7 = a1[v5 / 4 + 1];
    uint64_t v8 = *(int *)((char *)&a1[v5 / 4 + 1] + v7);
    uint64_t v9 = (char *)&a1[v5 / 4] + v7 - v8;
    unsigned int v10 = *((unsigned __int16 *)v9 + 2);
    if (v10 < 9)
    {
      LODWORD(v11) = 0;
    }
    else
    {
      uint64_t v11 = *((unsigned __int16 *)v9 + 6);
      if (v11) {
        LODWORD(v11) = *((unsigned __int8 *)&a1[v5 / 4 + 1] + v7 + v11);
      }
    }
    if (v11 == a2) {
      break;
    }
    v5 += 4;
    if (v6 == v5) {
      goto LABEL_16;
    }
  }
  if (v6 != v5)
  {
    if (v10 >= 7 && *(_WORD *)((char *)a1 + v7 + v5 - v8 + 10))
    {
      uint64_t v12 = *(unsigned __int16 *)((char *)a1 + v7 + v5 - v8 + 10) + v7;
      int v13 = (int *)((char *)a1 + v12 + v5 + *(unsigned int *)((char *)&a1[v5 / 4 + 1] + v12) + 4);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_16:
  uint64_t v14 = (int *)((char *)a1 + a1[1] + 4);
  uint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
  if (*v15 >= 7u)
  {
    uint64_t v16 = v15[3];
    if (v16)
    {
      int v13 = (int *)((char *)v14 + v16 + *(unsigned int *)((char *)v14 + v16));
      goto LABEL_20;
    }
  }
LABEL_19:
  int v13 = 0;
LABEL_20:
  uint64_t v17 = (unsigned int *)((char *)v13 + *(unsigned __int16 *)((char *)v13 - *v13 + 6));
  uint64_t v18 = *v17;
  unsigned __int8 v20 = (char *)v17 + v18 + 4;
  size_t v19 = *(unsigned int *)((char *)v17 + v18);
  if (v19 >= 0x17)
  {
    if ((v19 | 7) == 0x17) {
      uint64_t v21 = (v19 & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v21 = v19 | 7;
    }
    uint64_t v22 = operator new(v21 + 1);
    v3[1] = v19;
    v3[2] = v21 - 0x7FFFFFFFFFFFFFFFLL;
    *uint64_t v3 = v22;
    uint64_t v3 = v22;
  }
  else
  {
    *((unsigned char *)v3 + 23) = v19;
    if (!v19)
    {
      *((unsigned char *)v3 + v19) = 0;
      return;
    }
  }
  memcpy(v3, v20, v19);
  *((unsigned char *)v3 + v19) = 0;
}

double sub_C556A0(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)a1 = *a2;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  return result;
}

float64x2_t sub_C556D0(uint64_t a1, uint64_t a2)
{
  *(float64x2_t *)(a1 + 8) = vaddq_f64(*(float64x2_t *)(a2 + 8), *(float64x2_t *)(a1 + 8));
  *(float64x2_t *)(a1 + 24) = vaddq_f64(*(float64x2_t *)(a2 + 24), *(float64x2_t *)(a1 + 24));
  *(float64x2_t *)(a1 + 40) = vaddq_f64(*(float64x2_t *)(a2 + 40), *(float64x2_t *)(a1 + 40));
  *(float64x2_t *)(a1 + 56) = vaddq_f64(*(float64x2_t *)(a2 + 56), *(float64x2_t *)(a1 + 56));
  *(float64x2_t *)(a1 + 72) = vaddq_f64(*(float64x2_t *)(a2 + 72), *(float64x2_t *)(a1 + 72));
  *(float64x2_t *)(a1 + 88) = vaddq_f64(*(float64x2_t *)(a2 + 88), *(float64x2_t *)(a1 + 88));
  *(float64x2_t *)(a1 + 104) = vaddq_f64(*(float64x2_t *)(a2 + 104), *(float64x2_t *)(a1 + 104));
  float64x2_t result = vaddq_f64(*(float64x2_t *)(a2 + 120), *(float64x2_t *)(a1 + 120));
  *(float64x2_t *)(a1 + 120) = result;
  return result;
}

double sub_C55754(uint64_t a1, uint64_t *a2)
{
  *(float64x2_t *)(a1 + 48) = vaddq_f64(*(float64x2_t *)(a2 + 3), *(float64x2_t *)(a1 + 48));
  *(float64x2_t *)(a1 + 72) = vaddq_f64(*(float64x2_t *)(a2 + 5), *(float64x2_t *)(a1 + 72));
  *(float64x2_t *)(a1 + 88) = vaddq_f64(*(float64x2_t *)(a2 + 7), *(float64x2_t *)(a1 + 88));
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  uint64_t v5 = v2 - *a2;
  BOOL v4 = v2 == *a2;
  *(double *)(a1 + 112) = *(double *)(a1 + 112) + (double)(unint64_t)(0x3AEF6CA970586723 * (v5 >> 3));
  if (v4)
  {
    double result = *(double *)(a1 + 120) + 0.0;
    *(double *)(a1 + 120) = result;
    return result;
  }
  unint64_t v6 = v5 - 1112;
  if ((unint64_t)(v5 - 1112) >= 0x458)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    unint64_t v12 = v6 / 0x458 + 1;
    uint64_t v8 = v3 + 1112 * (v12 & 0x7FFFFFFFFFFFFELL);
    uint64_t v13 = v12 & 0x7FFFFFFFFFFFFELL;
    do
    {
      v10 += *(unsigned __int8 *)(v3 + 44);
      v11 += *(unsigned __int8 *)(v3 + 1156);
      v3 += 2224;
      v13 -= 2;
    }
    while (v13);
    uint64_t v7 = v11 + v10;
    if (v12 == (v12 & 0x7FFFFFFFFFFFFELL)) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = v3;
  }
  do
  {
    v7 += *(unsigned __int8 *)(v8 + 44);
    v8 += 1112;
  }
  while (v8 != v2);
LABEL_9:
  double result = *(double *)(a1 + 120) + (double)v7;
  *(double *)(a1 + 120) = result;
  return result;
}

uint64_t sub_C55858@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, off_243ECC0[*(unsigned int *)a1]);
  unint64_t v4 = *(void *)(a2 + 40);
  char v19 = 1;
  unint64_t v5 = *(void *)(a2 + 32);
  if (v5 >= v4)
  {
    unint64_t v6 = sub_C55C14((uint64_t *)(a2 + 24), "Runtime", &v19, a1 + 1);
  }
  else
  {
    sub_C55DE4(a2 + 40, *(void *)(a2 + 32), "Runtime", &v19, a1 + 1);
    unint64_t v6 = v5 + 48;
    *(void *)(a2 + 32) = v6;
  }
  *(void *)(a2 + 32) = v6;
  char v18 = 1;
  if (v6 >= *(void *)(a2 + 40))
  {
    unint64_t v7 = sub_C55F58((uint64_t *)(a2 + 24), "Runtime.InStation", &v18, a1 + 2);
  }
  else
  {
    sub_C56128(a2 + 40, v6, "Runtime.InStation", &v18, a1 + 2);
    unint64_t v7 = v6 + 48;
    *(void *)(a2 + 32) = v7;
  }
  *(void *)(a2 + 32) = v7;
  char v17 = 1;
  if (v7 >= *(void *)(a2 + 40))
  {
    unint64_t v8 = sub_C5629C((uint64_t *)(a2 + 24), "Runtime.AccessPoint", &v17, a1 + 3);
  }
  else
  {
    sub_C5646C(a2 + 40, v7, "Runtime.AccessPoint", &v17, a1 + 3);
    unint64_t v8 = v7 + 48;
    *(void *)(a2 + 32) = v8;
  }
  *(void *)(a2 + 32) = v8;
  char v16 = 1;
  if (v8 >= *(void *)(a2 + 40))
  {
    unint64_t v9 = sub_C565E0((uint64_t *)(a2 + 24), "Runtime.OnStreet", &v16, a1 + 4);
  }
  else
  {
    sub_C567B0(a2 + 40, v8, "Runtime.OnStreet", &v16, a1 + 4);
    unint64_t v9 = v8 + 48;
    *(void *)(a2 + 32) = v9;
  }
  *(void *)(a2 + 32) = v9;
  char v15 = 4;
  if (v9 >= *(void *)(a2 + 40))
  {
    unint64_t v10 = sub_C56924((uint64_t *)(a2 + 24), "NumWalkingPaths", &v15, a1 + 8);
  }
  else
  {
    sub_C56AF4(a2 + 40, v9, "NumWalkingPaths", &v15, a1 + 8);
    unint64_t v10 = v9 + 48;
    *(void *)(a2 + 32) = v10;
  }
  *(void *)(a2 + 32) = v10;
  char v14 = 4;
  if (v10 >= *(void *)(a2 + 40))
  {
    unint64_t v11 = sub_C56C68((uint64_t *)(a2 + 24), "NumMissingSearchSpaces", &v14, a1 + 11);
  }
  else
  {
    sub_C56E38(a2 + 40, v10, "NumMissingSearchSpaces", &v14, a1 + 11);
    unint64_t v11 = v10 + 48;
    *(void *)(a2 + 32) = v11;
  }
  *(void *)(a2 + 32) = v11;
  char v13 = 4;
  if (v11 >= *(void *)(a2 + 40))
  {
    uint64_t result = sub_C56FAC((uint64_t *)(a2 + 24), "NumMissingBucketEntries", &v13, a1 + 12);
  }
  else
  {
    sub_C5717C(a2 + 40, v11, "NumMissingBucketEntries", &v13, a1 + 12);
    uint64_t result = v11 + 48;
    *(void *)(a2 + 32) = v11 + 48;
  }
  *(void *)(a2 + 32) = result;
  return result;
}

void sub_C55B44(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C55B58(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_C55C00(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C55C14(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_C55DE4(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  char v14 = (char *)*a1;
  char v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    char v18 = (char *)*a1;
    char v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      char v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C55DD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C55DE4(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_C55F44(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C55F58(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_C56128(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C56114(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C56128(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_C56288(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C5629C(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_C5646C(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C56458(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C5646C(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_C565CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C565E0(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_C567B0(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C5679C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C567B0(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_C56910(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C56924(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_C56AF4(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C56AE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C56AF4(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_C56C54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C56C68(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_C56E38(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C56E24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C56E38(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_C56F98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C56FAC(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_C5717C(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_C57168(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_C5717C(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_C572DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_C572F0()
{
  unk_25E01B7 = 16641;
  word_25E01A0 = 65;
  byte_25E01CF = 1;
  byte_25E01B9 = 0;
}

void sub_C57318(void **a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v153);
  unsigned int v4 = sub_DB7034((uint64_t)a1[2]);
  int v141 = sub_DE7FB0(v4);
  sub_37B34C(*a1, (uint64_t)v151);
  int v5 = sub_DBB1D4((uint64_t)a1[2]) >> 32;
  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  int v6 = std::chrono::system_clock::to_time_t(&__t);
  sub_DB6E94((uint64_t)a1[2]);
  *(_OWORD *)(a2 + 8) = 0u;
  *(unsigned char *)a2 = 1;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 184) = 0u;
  *(_OWORD *)(a2 + 200) = 0u;
  *(_OWORD *)(a2 + 216) = 0u;
  *(_OWORD *)(a2 + 232) = 0u;
  *(_OWORD *)(a2 + 248) = 0u;
  *(_OWORD *)(a2 + 264) = 0u;
  *(_OWORD *)(a2 + 280) = 0u;
  *(_OWORD *)(a2 + 296) = 0u;
  *(_OWORD *)(a2 + 312) = 0u;
  *(_OWORD *)(a2 + 328) = 0u;
  *(_OWORD *)(a2 + 344) = 0u;
  *(_OWORD *)(a2 + 360) = 0u;
  *(_OWORD *)(a2 + 376) = 0u;
  uint64_t v140 = a2 + 8;
  sub_11B16A4(a2 + 8, 0, 0);
  *(unsigned char *)(a2 + 372) = 0;
  *(void *)(a2 + 364) = 0;
  *(void *)(a2 + 356) = 0;
  *(void *)(a2 + 376) = 0;
  *(void *)(a2 + 383) = 0;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  *(unsigned char *)(a2 + 352) = 0;
  int v7 = *((unsigned __int8 *)a1 + 96);
  if (*((unsigned char *)a1 + 96) || *a1[4] == a1[4][1]) {
    goto LABEL_2;
  }
  uint64_t v16 = (uint64_t)*a1;
  __t.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)operator new(0x20uLL);
  long long v144 = xmmword_20B8E90;
  strcpy((char *)__t.__d_.__rep_, "AnalyticsMetricsRelevanceChecks");
  uint64_t v154 = 0;
  int v155 = 0;
  uint64_t v156 = 0;
  long long v17 = sub_374CDC(v16, (uint64_t)&__t, (uint64_t *)&v154);
  unint64_t v18 = v154;
  if (v154)
  {
    char v19 = v155;
    uint64_t v20 = v154;
    if (v155 != v154)
    {
      do
      {
        if (*((char *)v19 - 1) < 0) {
          operator delete(*(v19 - 3));
        }
        v19 -= 3;
      }
      while (v19 != v18);
      uint64_t v20 = v154;
    }
    int v155 = v18;
    operator delete(v20);
  }
  if (SHIBYTE(v144) < 0) {
    operator delete((void *)__t.__d_.__rep_);
  }
  __t.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)operator new(0x20uLL);
  long long v144 = xmmword_20B9800;
  strcpy((char *)__t.__d_.__rep_, "enable_metrics_relevance_check");
  BOOL v138 = sub_29D62C(v17, (uint64_t)&__t);
  BOOL v139 = v138;
  if (SHIBYTE(v144) < 0)
  {
    operator delete((void *)__t.__d_.__rep_);
    if (v139) {
      goto LABEL_173;
    }
    goto LABEL_175;
  }
  if (!v138)
  {
LABEL_175:
    int v7 = *((unsigned __int8 *)a1 + 96);
LABEL_2:
    char v8 = v7 != 0;
    goto LABEL_3;
  }
LABEL_173:
  char v8 = sub_35E640();
LABEL_3:
  int v9 = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a2 + 233) = v8;
  *(_DWORD *)(a2 + 24) = v9 | 0x42;
  size_t v10 = *(void **)(a2 + 200);
  if (!v10)
  {
    uint64_t v11 = *(void *)(a2 + 16);
    char v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
    if (v11) {
      char v12 = (void *)*v12;
    }
    size_t v10 = sub_11CFEF0((uint64_t)v12);
    *(void *)(a2 + 200) = v10;
  }
  int v13 = *((_DWORD *)v10 + 4);
  *((_DWORD *)v10 + 9) = v5;
  *((_DWORD *)v10 + 10) = v6;
  *((unsigned char *)v10 + 44) = *((unsigned char *)a1 + 96);
  *((_DWORD *)v10 + 8) = 1;
  *((_DWORD *)v10 + 4) = v13 | 0x1F;
  uint64_t v14 = (void *)v10[3];
  if (v14)
  {
    *((_DWORD *)v14 + 4) |= 1u;
    uint64_t v15 = v14[3];
    if (v15) {
      goto LABEL_23;
    }
    goto LABEL_20;
  }
  uint64_t v21 = v10[1];
  uint64_t v22 = (void *)(v21 & 0xFFFFFFFFFFFFFFFCLL);
  if (v21) {
    uint64_t v22 = (void *)*v22;
  }
  uint64_t v14 = sub_11CFF70((uint64_t)v22);
  v10[3] = v14;
  *((_DWORD *)v14 + 4) |= 1u;
  uint64_t v15 = v14[3];
  if (!v15)
  {
LABEL_20:
    uint64_t v23 = v14[1];
    char v24 = (void *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
    if (v23) {
      char v24 = (void *)*v24;
    }
    uint64_t v15 = sub_11CFFEC((uint64_t)v24);
    void v14[3] = v15;
  }
LABEL_23:
  *(_DWORD *)(v15 + 16) |= 1u;
  uint64_t v25 = *(void *)(v15 + 8);
  uint64_t v26 = (uint64_t *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
  if (v25) {
    uint64_t v26 = (uint64_t *)*v26;
  }
  sub_1881DF4((std::string **)(v15 + 120), (long long *)v151, v26);
  int v27 = *(_DWORD *)(v15 + 16);
  *(_DWORD *)(v15 + 16) = v27 | 0x10;
  *(unsigned char *)(v15 + 152) = v141;
  unsigned __int8 v28 = a1[2];
  if ((v28[5] & 0x40) != 0)
  {
    uint64_t v29 = (uint64_t (***)())v28[39];
    *(_DWORD *)(v15 + 16) = v27 | 0x12;
    uint64_t v30 = *(void *)(v15 + 128);
    if (!v30)
    {
      uint64_t v31 = *(void *)(v15 + 8);
      uint64_t v32 = (void *)(v31 & 0xFFFFFFFFFFFFFFFCLL);
      if (v31) {
        uint64_t v32 = (void *)*v32;
      }
      uint64_t v30 = sub_15C1CB4((uint64_t)v32);
      *(void *)(v15 + 128) = v30;
      uint64_t v29 = (uint64_t (***)())a1[2][39];
    }
    if (v29) {
      uint64_t v33 = v29;
    }
    else {
      uint64_t v33 = &off_253F2E8;
    }
    sub_15B4B28(v30, (uint64_t)v33);
  }
  if (v141)
  {
    if ((a1[2][5] & 0x40) != 0)
    {
      uint64_t v34 = (void *)*a1[4];
      if (a1[4][1] - (void)v34 == 24 && *v34 != v34[1])
      {
        if (a1[3])
        {
          uint64_t v35 = (void *)sub_C5C354((uint64_t *)a1 + 3);
          if (!sub_45FB38(v35))
          {
            uint64_t v154 = (void **)sub_DBB1D4((uint64_t)a1[2]);
            LODWORD(v155) = v36;
            uint64_t v37 = sub_C5C354((uint64_t *)a1 + 3);
            sub_3B8E8C((uint64_t)&__t, (uint64_t)(a1 + 20), (uint64_t *)&v154, v37, *(void *)*a1[4], *a1[5], (uint64_t)a1[17], *a1);
            *(_DWORD *)(v15 + 16) |= 4u;
            if (!*(void *)(v15 + 136))
            {
              uint64_t v38 = *(void *)(v15 + 8);
              int v39 = (void *)(v38 & 0xFFFFFFFFFFFFFFFCLL);
              if (v38) {
                int v39 = (void *)*v39;
              }
              *(void *)(v15 + 136) = sub_11D00B4((uint64_t)v39);
            }
            sub_3B8E90(&__t);
            if (__p)
            {
              uint64_t v150 = __p;
              operator delete(__p);
            }
            if (v147)
            {
              unint64_t v148 = v147;
              operator delete(v147);
            }
          }
        }
      }
    }
  }
  uint64_t v40 = (const std::string **)a1[6];
  if (v40)
  {
    unint64_t v42 = *v40;
    unint64_t v41 = v40[1];
    if (*v40 != v41)
    {
      int v43 = (uint64_t **)(a2 + 32);
      do
      {
        uint64_t v44 = *(_DWORD **)(a2 + 48);
        if (v44 && (uint64_t v45 = *(int *)(a2 + 40), (int)v45 < *v44))
        {
          *(_DWORD *)(a2 + 40) = v45 + 1;
          char v46 = *(std::string **)&v44[2 * v45 + 2];
        }
        else
        {
          if (!*v43) {
            operator new();
          }
          *int v48 = v47;
          v48[1] = sub_3A6EDC;
          void *v47 = 0;
          v47[1] = 0;
          void v47[2] = 0;
          char v46 = (std::string *)sub_188CDC8(a2 + 32, (uint64_t)v47);
        }
        std::string::operator=(v46, v42++);
      }
      while (v42 != v41);
    }
  }
  *(_DWORD *)(a2 + 24) |= 4u;
  unsigned int v49 = *(void **)(a2 + 208);
  if (!v49)
  {
    uint64_t v50 = *(void *)(a2 + 16);
    uint64_t v51 = (void *)(v50 & 0xFFFFFFFFFFFFFFFCLL);
    if (v50) {
      uint64_t v51 = (void *)*v51;
    }
    unsigned int v49 = sub_11BED5C((uint64_t)v51);
    *(void *)(a2 + 208) = v49;
  }
  std::string::size_type v52 = (uint64_t *)sub_374CE4(*a1);
  uint64_t v53 = (void *)sub_2ABCB4(*v52);
  uint64_t v54 = sub_3CC750(v53);
  *((_DWORD *)v49 + 4) |= 2u;
  v49[4] = v54;
  *(_DWORD *)(a2 + 24) |= 4u;
  unsigned int v55 = *(void **)(a2 + 208);
  if (!v55)
  {
    uint64_t v56 = *(void *)(a2 + 16);
    uint64_t v57 = (void *)(v56 & 0xFFFFFFFFFFFFFFFCLL);
    if (v56) {
      uint64_t v57 = (void *)*v57;
    }
    unsigned int v55 = sub_11BED5C((uint64_t)v57);
    *(void *)(a2 + 208) = v55;
  }
  std::string::size_type v58 = (void *)sub_374D14(*a1);
  std::string v59 = sub_299CE4(v58);
  *((_DWORD *)v55 + 4) |= 1u;
  uint64_t v60 = v55[1];
  uint64_t v61 = (uint64_t *)(v60 & 0xFFFFFFFFFFFFFFFCLL);
  if (v60) {
    uint64_t v61 = (uint64_t *)*v61;
  }
  sub_1881DF4((std::string **)v55 + 3, (long long *)v59, v61);
  uint64_t v62 = *(int *)sub_37B3A8((uint64_t)*a1);
  *(_DWORD *)(a2 + 24) |= 0x10u;
  *(void *)(a2 + 224) = v62;
  uint64_t v63 = sub_69510();
  long long v64 = (long long *)sub_68EB4((uint64_t)v63);
  *(_DWORD *)(a2 + 24) |= 1u;
  uint64_t v65 = *(void *)(a2 + 16);
  unint64_t v66 = (uint64_t *)(v65 & 0xFFFFFFFFFFFFFFFCLL);
  if (v65) {
    unint64_t v66 = (uint64_t *)*v66;
  }
  sub_1881DF4((std::string **)(a2 + 192), v64, v66);
  if (a1[18] != (void *)-1 && *((_DWORD *)a1 + 38) != -1)
  {
    int64_t v67 = (char *)a1[64] - (char *)a1[63];
    if (v67)
    {
      unint64_t v68 = 0;
      uint64_t v69 = v67 / 104;
      while (1)
      {
        uint64_t v70 = sub_C583AC(a1 + 63, v68);
        if (*(void **)(v70 + 16) == a1[18]) {
          break;
        }
        if (v69 == ++v68) {
          goto LABEL_91;
        }
      }
      uint64_t v72 = *(_DWORD **)(a2 + 136);
      if (v72 && (uint64_t v73 = *(int *)(a2 + 128), (int)v73 < *v72))
      {
        *(_DWORD *)(a2 + 128) = v73 + 1;
        uint64_t v74 = *(void *)&v72[2 * v73 + 2];
        *(_DWORD *)(v74 + 16) |= 1u;
        uint64_t v75 = *(void *)(v74 + 24);
        if (!v75) {
          goto LABEL_82;
        }
      }
      else
      {
        sub_11BEDE0(*(void *)(a2 + 120));
        uint64_t v74 = sub_188CDC8(a2 + 120, v76);
        *(_DWORD *)(v74 + 16) |= 1u;
        uint64_t v75 = *(void *)(v74 + 24);
        if (!v75)
        {
LABEL_82:
          uint64_t v77 = *(void *)(v74 + 8);
          std::string::size_type v78 = (void *)(v77 & 0xFFFFFFFFFFFFFFFCLL);
          if (v77) {
            std::string::size_type v78 = (void *)*v78;
          }
          uint64_t v75 = sub_15C1918((uint64_t)v78);
          *(void *)(v74 + 24) = v75;
        }
      }
      LODWORD(v71) = *(_DWORD *)(v70 + 4);
      long double v79 = exp((double)v71 * -6.28318531 / 4294967300.0 + 3.14159265);
      long double v80 = atan((v79 + -1.0 / v79) * 0.5) * 57.2957795;
      int v81 = *(_DWORD *)(v75 + 40);
      *(_DWORD *)(v75 + 40) = v81 | 1;
      *(long double *)(v75 + 48) = v80;
      LODWORD(v80) = *(_DWORD *)v70;
      *(_DWORD *)(v75 + 40) = v81 | 3;
      *(double *)(v75 + 56) = (double)*(unint64_t *)&v80 * 360.0 / 4294967300.0 + -180.0;
      int v82 = *(unsigned __int8 *)(v70 + 100);
      *(_DWORD *)(v74 + 16) |= 4u;
      *(_DWORD *)(v74 + 40) = v82;
      uint64_t v83 = nullsub_1(*(void *)(v70 + 16));
      int v84 = *(_DWORD *)(v74 + 16);
      *(void *)(v74 + 32) = v83;
      *(_DWORD *)(v74 + 16) = v84 | 0xA;
      *(_DWORD *)(v74 + 44) = v68;
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)&__t);
        sub_188FC78(&__t, (uint64_t)"Micro A/B - Adding Special Access Point ", 40);
        nullsub_1(*(void *)(v70 + 16));
        std::ostream::operator<<();
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v154, 1u);
        if (SHIBYTE(v156) < 0) {
          operator delete(v154);
        }
        if (v146 < 0) {
          operator delete(v145);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
    }
  }
LABEL_91:
  if (*a1[4] == a1[4][1]) {
    goto LABEL_164;
  }
  sub_725D0((uint64_t)v160);
  uint64_t v85 = sub_69510();
  long long v86 = (uint64_t **)*a1[4];
  unsigned int v87 = *v86;
  uint64_t v142 = v86[1];
  if (*v86 != v142)
  {
    uint64_t v88 = (uint64_t)v85;
    do
    {
      int v89 = sub_45FE24((uint64_t)v87);
      int v90 = v89;
      unint64_t v92 = *(char **)(a2 + 264);
      unint64_t v91 = *(void *)(a2 + 272);
      if (v92 != (char *)v91)
      {
        while (*(_DWORD *)v92 != v89)
        {
          v92 += 32;
          if (v92 == (char *)v91) {
            goto LABEL_100;
          }
        }
      }
      if (v92 == (char *)v91)
      {
LABEL_100:
        if (v91 >= *(void *)(a2 + 280))
        {
          uint64_t v93 = sub_3A6738((int64x2_t *)(a2 + 264));
        }
        else
        {
          *(_DWORD *)unint64_t v91 = -1;
          *(void *)(v91 + 16) = 0;
          *(void *)(v91 + 24) = 0;
          uint64_t v93 = (char *)(v91 + 32);
          *(void *)(v91 + 8) = 0;
        }
        *(void *)(a2 + 272) = v93;
        *((_DWORD *)v93 - 8) = v90;
        unint64_t v92 = v93 - 32;
      }
      unint64_t v94 = sub_45FC7C(v87);
      uint64_t v95 = *((void *)v92 + 1);
      int v96 = (void **)*((void *)v92 + 2);
      unint64_t v97 = 0x8E38E38E38E38E39 * (((uint64_t)v96 - v95) >> 3);
      if (v94 <= v97)
      {
        if (v94 < v97)
        {
          unint64_t v98 = (void **)(v95 + 72 * v94);
          if (v96 == v98)
          {
LABEL_108:
            *((void *)v92 + 2) = v98;
            goto LABEL_109;
          }
          while (2)
          {
            if (*((char *)v96 - 1) < 0)
            {
              operator delete(*(v96 - 3));
              std::string::size_type v110 = *(v96 - 6);
              if (v110)
              {
LABEL_123:
                *(v96 - 5) = v110;
                operator delete(v110);
              }
            }
            else
            {
              std::string::size_type v110 = *(v96 - 6);
              if (v110) {
                goto LABEL_123;
              }
            }
            uint64_t v111 = v96 - 9;
            char v112 = (char *)*(v96 - 9);
            if (v112)
            {
              std::string v113 = (char *)*(v96 - 8);
              long long v109 = *(v96 - 9);
              if (v113 != v112)
              {
                do
                {
                  int64_t v114 = (void *)*((void *)v113 - 6);
                  if (v114)
                  {
                    *((void *)v113 - 5) = v114;
                    operator delete(v114);
                  }
                  if (*(v113 - 57) < 0) {
                    operator delete(*((void **)v113 - 10));
                  }
                  v113 -= 80;
                }
                while (v113 != v112);
                long long v109 = *v111;
              }
              *(v96 - 8) = v112;
              operator delete(v109);
            }
            v96 -= 9;
            if (v111 == v98) {
              goto LABEL_108;
            }
            continue;
          }
        }
      }
      else
      {
        sub_3A88A4((char **)v92 + 1, v94 - v97);
      }
LABEL_109:
      char v99 = sub_68ECC(v88);
      if (a1[3]) {
        char v100 = 1;
      }
      else {
        char v100 = v99;
      }
      if ((v100 & 1) == 0 && !sub_45FE1C((uint64_t)v87) && *(unsigned char *)(sub_5231C((uint64_t)v87) + 36))
      {
        std::string v101 = (int *)sub_3750CC(*a1);
        uint64_t v102 = *(void *)(sub_45FC68(v87) + 32);
        sub_47F470((char *)v87, (uint64_t)v101);
        uint64_t v103 = sub_45FC68(v87);
        sub_2D5D58((uint64_t)v101, *(void *)(v103 + 32) & 0xFFFFFFFFFFFFLL);
        unint64_t v104 = v102 & 0xFFFFFFFFFFFFLL;
        char v105 = (int *)sub_2D5D58((uint64_t)v101, v102 & 0xFFFFFFFFFFFFLL);
        std::string v106 = (unsigned __int16 *)((char *)v105 - *v105);
        if (*v106 >= 0x41u && (uint64_t v107 = v106[32]) != 0) {
          std::string v108 = (unsigned int *)((char *)v105 + v107 + *(unsigned int *)((char *)v105 + v107));
        }
        else {
          std::string v108 = 0;
        }
        uint64_t v115 = v102 & 0xFF000000000000;
        sub_3BD900(v108, v115 != 0x1000000000000, 1, (uint64_t)&__t);
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = __t.__d_.__rep_;
        if (__t.__d_.__rep_)
        {
          uint64_t v117 = v144;
          char v118 = (void *)__t.__d_.__rep_;
          if (__t.__d_.__rep_ != (void)v144)
          {
            do
            {
              if (*(char *)(v117 - 1) < 0) {
                operator delete(*(void **)(v117 - 24));
              }
              v117 -= 24;
            }
            while (v117 != rep);
            char v118 = (void *)__t.__d_.__rep_;
          }
          *(void *)&long long v144 = rep;
          operator delete(v118);
        }
        uint64_t v119 = sub_45FC68(v87);
        unint64_t v120 = sub_2E68E8((uint64_t)v101, *(void *)(v119 + 32));
        sub_3BDB4C(v101, v120, &v159);
        int v121 = sub_DBB1D4((uint64_t)a1[2]) >> 32;
        uint64_t v122 = (int *)sub_2D5D58((uint64_t)v101, v104);
        char v123 = (unsigned __int16 *)((char *)v122 - *v122);
        if (*v123 >= 0x41u && (uint64_t v124 = v123[32]) != 0) {
          uint64_t v125 = (unsigned int *)((char *)v122 + v124 + *(unsigned int *)((char *)v122 + v124));
        }
        else {
          uint64_t v125 = 0;
        }
        sub_3BD900(v125, v115 != 0x1000000000000, 1, (uint64_t)&v158);
        uint64_t v126 = sub_45FC68(v87);
        sub_3BDCD8((uint64_t)v101, *(unsigned int *)(v126 + 32) | ((unint64_t)*(unsigned __int16 *)(v126 + 36) << 32), &__t);
        uint64_t v127 = HIBYTE(v144);
        if (v144 < 0) {
          uint64_t v127 = v144;
        }
        if (v127) {
          sub_26A18((uint64_t)v157, (const char *)&__t);
        }
        else {
          sub_26908((uint64_t)v157);
        }
        if (SHIBYTE(v144) < 0) {
          operator delete((void *)__t.__d_.__rep_);
        }
        sub_480C((uint64_t)&__t, v121);
      }
      v87 += 15;
    }
    while (v87 != v142);
  }
  std::string::size_type v128 = sub_3BEE88((BOOL *)&v154, (uint64_t)*a1);
  char v129 = a1[5];
  unint64_t v130 = (uint64_t *)*a1[4];
  unint64_t v131 = *a1;
  __t.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)a1[1];
  sub_3BEE8C((uint64_t)v128, v130, v129, v131, &__t.__d_.__rep_, v140);
  uint64_t v132 = *(void *)(a2 + 112);
  if (v132) {
    unint64_t v133 = (uint64_t *)(v132 + 8);
  }
  else {
    unint64_t v133 = 0;
  }
  uint64_t v134 = *(int *)(a2 + 104);
  if (v134)
  {
    int v135 = 0;
    uint64_t v136 = 8 * v134;
    do
    {
      v135 += sub_11B0050(*v133++);
      v136 -= 8;
    }
    while (v136);
    uint64_t v137 = v135;
  }
  else
  {
    uint64_t v137 = 0;
  }
  *(void *)(a2 + 344) = v137;
LABEL_164:
  sub_C585EC(v140);
  *(void *)(a2 + 296) = sub_11B2D2C(v140);
  *(double *)(a2 + 288) = round(sub_72688((uint64_t)v153));
  *(unsigned char *)(a2 + 352) = v141;
  *(unsigned char *)(a2 + 390) = *(unsigned char *)(a2 + 233);
  if (v152 < 0) {
    operator delete(v151[0]);
  }
}

void sub_C58278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  sub_C5C310(&a14);
  sub_C5C10C(v55);
  if (a55 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_C583AC(void *a1, unint64_t a2)
{
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    int v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    char v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v10 = &v15;
    }
    else {
      size_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    char v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 104 * a2;
}

void sub_C5850C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

void sub_C585EC(uint64_t a1)
{
  uint64_t v2 = sub_69510();
  if (sub_6913C((uint64_t)v2))
  {
    uint64_t v4 = *(unsigned int *)(a1 + 48);
    uint64_t v3 = (_DWORD *)(a1 + 48);
    if (v4 == *(_DWORD *)(a1 + 52))
    {
      sub_188C80C((unsigned int *)(a1 + 48), v4 + 1);
      *(_DWORD *)(*(void *)(a1 + 56) + 4 * v4) = 1;
      *uint64_t v3 = v4 + 1;
      if (!sub_69144((uint64_t)v2)) {
        return;
      }
    }
    else
    {
      *(_DWORD *)(*(void *)(a1 + 56) + 4 * v4) = 1;
      *uint64_t v3 = v4 + 1;
      if (!sub_69144((uint64_t)v2)) {
        return;
      }
    }
  }
  else if (!sub_69144((uint64_t)v2))
  {
    return;
  }
  uint64_t v5 = *(unsigned int *)(a1 + 48);
  if (v5 == *(_DWORD *)(a1 + 52)) {
    sub_188C80C((unsigned int *)(a1 + 48), v5 + 1);
  }
  *(_DWORD *)(*(void *)(a1 + 56) + 4 * v5) = 2;
  *(_DWORD *)(a1 + 48) = v5 + 1;
}

void sub_C58704()
{
  uint64_t v0 = (void **)__chkstk_darwin();
  uint64_t v2 = v1;
  sub_725D0((uint64_t)v174);
  unsigned int v3 = sub_DB7034((uint64_t)v0[2]);
  int v169 = sub_DE7FB0(v3);
  sub_37B34C(*v0, (uint64_t)v172);
  int v4 = sub_DBB1D4((uint64_t)v0[2]) >> 32;
  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  int v5 = std::chrono::system_clock::to_time_t(&__t);
  uint64_t v6 = sub_DB6E94((uint64_t)v0[2]);
  *(_OWORD *)(v2 + 8) = 0u;
  *(unsigned char *)uint64_t v2 = 1;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_OWORD *)(v2 + 376) = 0u;
  char v170 = (int64x2_t *)(v2 + 8);
  sub_11B16A4(v2 + 8, 0, 0);
  *(_OWORD *)(v2 + 240) = 0u;
  long long v7 = (void **)(v2 + 240);
  *(void *)(v2 + 364) = 0;
  *(void *)(v2 + 376) = 0;
  *(void *)(v2 + 383) = 0;
  *(void *)(v2 + 356) = 0;
  *(unsigned char *)(v2 + 372) = 0;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(unsigned char *)(v2 + 352) = 0;
  int v8 = *((unsigned __int8 *)v0 + 96);
  uint64_t v171 = v0;
  if (*((unsigned char *)v0 + 96) || *v0[4] == v0[4][1]) {
    goto LABEL_2;
  }
  uint64_t v17 = (uint64_t)*v0;
  __t.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)operator new(0x20uLL);
  long long v176 = xmmword_20B8E90;
  strcpy((char *)__t.__d_.__rep_, "AnalyticsMetricsRelevanceChecks");
  v189[1] = 0;
  v189[0] = 0;
  *(void *)&long long v190 = 0;
  std::string v18 = sub_374CDC(v17, (uint64_t)&__t, (uint64_t *)v189);
  long long v19 = (void **)v189[0];
  if (v189[0])
  {
    std::string::size_type v20 = (void **)v189[1];
    uint64_t v21 = v189[0];
    if (v189[1] != v189[0])
    {
      do
      {
        if (*((char *)v20 - 1) < 0) {
          operator delete(*(v20 - 3));
        }
        v20 -= 3;
      }
      while (v20 != v19);
      uint64_t v21 = v189[0];
    }
    v189[1] = v19;
    operator delete(v21);
  }
  uint64_t v0 = v171;
  if (SHIBYTE(v176) < 0) {
    operator delete((void *)__t.__d_.__rep_);
  }
  __t.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)operator new(0x20uLL);
  long long v176 = xmmword_20B9800;
  strcpy((char *)__t.__d_.__rep_, "enable_metrics_relevance_check");
  BOOL v167 = sub_29D62C(v18, (uint64_t)&__t);
  BOOL v168 = v167;
  if (SHIBYTE(v176) < 0)
  {
    operator delete((void *)__t.__d_.__rep_);
    if (v168) {
      goto LABEL_217;
    }
    goto LABEL_219;
  }
  if (!v167)
  {
LABEL_219:
    int v8 = *((unsigned __int8 *)v171 + 96);
LABEL_2:
    char v9 = v8 != 0;
    goto LABEL_3;
  }
LABEL_217:
  char v9 = sub_39DB00(*(uint64_t **)*v171[4], (uint64_t)*v171);
LABEL_3:
  int v10 = *(_DWORD *)(v2 + 24);
  *(unsigned char *)(v2 + 233) = v9;
  *(_DWORD *)(v2 + 24) = v10 | 0x42;
  uint64_t v11 = *(void **)(v2 + 200);
  if (!v11)
  {
    uint64_t v12 = *(void *)(v2 + 16);
    long long v13 = (void *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
    if (v12) {
      long long v13 = (void *)*v13;
    }
    uint64_t v11 = sub_11CFEF0((uint64_t)v13);
    *(void *)(v2 + 200) = v11;
  }
  int v14 = *((_DWORD *)v11 + 4);
  *((_DWORD *)v11 + 9) = v4;
  *((_DWORD *)v11 + 10) = v5;
  *((unsigned char *)v11 + 44) = *((unsigned char *)v0 + 96);
  *((_DWORD *)v11 + 8) = 1;
  *((_DWORD *)v11 + 4) = v14 | 0x1F;
  std::string v15 = (void *)v11[3];
  if (v15)
  {
    *((_DWORD *)v15 + 4) |= 1u;
    uint64_t v16 = v15[3];
    if (v16) {
      goto LABEL_23;
    }
    goto LABEL_20;
  }
  uint64_t v22 = v11[1];
  uint64_t v23 = (void *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
  if (v22) {
    uint64_t v23 = (void *)*v23;
  }
  std::string v15 = sub_11CFF70((uint64_t)v23);
  v11[3] = v15;
  *((_DWORD *)v15 + 4) |= 1u;
  uint64_t v16 = v15[3];
  if (!v16)
  {
LABEL_20:
    uint64_t v24 = v15[1];
    uint64_t v25 = (void *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
    if (v24) {
      uint64_t v25 = (void *)*v25;
    }
    uint64_t v16 = sub_11CFFEC((uint64_t)v25);
    v15[3] = v16;
  }
LABEL_23:
  *(_DWORD *)(v16 + 16) |= 1u;
  uint64_t v26 = *(void *)(v16 + 8);
  int v27 = (uint64_t *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
  if (v26) {
    int v27 = (uint64_t *)*v27;
  }
  sub_1881DF4((std::string **)(v16 + 120), (long long *)v172, v27);
  int v28 = *(_DWORD *)(v16 + 16);
  *(_DWORD *)(v16 + 16) = v28 | 0x10;
  *(unsigned char *)(v16 + 152) = v169;
  uint64_t v29 = v0[2];
  if ((v29[5] & 0x40) != 0)
  {
    uint64_t v30 = (uint64_t (***)())v29[39];
    *(_DWORD *)(v16 + 16) = v28 | 0x12;
    uint64_t v31 = *(void *)(v16 + 128);
    if (!v31)
    {
      uint64_t v32 = *(void *)(v16 + 8);
      uint64_t v33 = (void *)(v32 & 0xFFFFFFFFFFFFFFFCLL);
      if (v32) {
        uint64_t v33 = (void *)*v33;
      }
      uint64_t v31 = sub_15C1CB4((uint64_t)v33);
      *(void *)(v16 + 128) = v31;
      uint64_t v30 = (uint64_t (***)())v0[2][39];
    }
    if (v30) {
      uint64_t v34 = v30;
    }
    else {
      uint64_t v34 = &off_253F2E8;
    }
    sub_15B4B28(v31, (uint64_t)v34);
  }
  if (v169)
  {
    if ((v0[2][5] & 0x40) != 0)
    {
      uint64_t v35 = (void *)*v0[4];
      if (v0[4][1] - (void)v35 == 24 && *v35 != v35[1])
      {
        if (v0[3])
        {
          int v36 = (void *)sub_C5BD5C((uint64_t *)v0 + 3);
          if (!sub_45FB38(v36))
          {
            v189[0] = (void *)sub_DBB1D4((uint64_t)v0[2]);
            LODWORD(v189[1]) = v37;
            uint64_t v38 = sub_C5BD5C((uint64_t *)v0 + 3);
            sub_3BA5C4((uint64_t)&__t, (uint64_t)(v0 + 20), (uint64_t *)v189, v38, *(void *)*v0[4], *v0[5], (uint64_t)v0[17], *v0);
            *(_DWORD *)(v16 + 16) |= 4u;
            uint64_t v39 = *(void *)(v16 + 136);
            if (!v39)
            {
              uint64_t v40 = *(void *)(v16 + 8);
              unint64_t v41 = (void *)(v40 & 0xFFFFFFFFFFFFFFFCLL);
              if (v40) {
                unint64_t v41 = (void *)*v41;
              }
              uint64_t v39 = sub_11D00B4((uint64_t)v41);
              *(void *)(v16 + 136) = v39;
            }
            sub_3BA5C8((uint64_t)&__t, v39);
            if (__p)
            {
              unint64_t v185 = __p;
              operator delete(__p);
            }
            if (v182)
            {
              long long v183 = v182;
              operator delete(v182);
            }
          }
        }
      }
    }
  }
  unint64_t v42 = (const std::string **)v0[6];
  if (v42)
  {
    uint64_t v44 = *v42;
    int v43 = v42[1];
    if (*v42 != v43)
    {
      uint64_t v45 = (uint64_t **)(v2 + 32);
      do
      {
        char v46 = *(_DWORD **)(v2 + 48);
        if (v46 && (uint64_t v47 = *(int *)(v2 + 40), (int)v47 < *v46))
        {
          *(_DWORD *)(v2 + 40) = v47 + 1;
          int v48 = *(std::string **)&v46[2 * v47 + 2];
        }
        else
        {
          if (!*v45) {
            operator new();
          }
          *uint64_t v50 = v49;
          v50[1] = sub_3A6EDC;
          void *v49 = 0;
          v49[1] = 0;
          void v49[2] = 0;
          int v48 = (std::string *)sub_188CDC8(v2 + 32, (uint64_t)v49);
        }
        std::string::operator=(v48, v44++);
      }
      while (v44 != v43);
    }
  }
  *(_DWORD *)(v2 + 24) |= 4u;
  uint64_t v51 = *(void **)(v2 + 208);
  uint64_t v52 = (uint64_t)v171;
  if (!v51)
  {
    uint64_t v53 = *(void *)(v2 + 16);
    uint64_t v54 = (void *)(v53 & 0xFFFFFFFFFFFFFFFCLL);
    if (v53) {
      uint64_t v54 = (void *)*v54;
    }
    uint64_t v51 = sub_11BED5C((uint64_t)v54);
    *(void *)(v2 + 208) = v51;
  }
  uint64_t v55 = (uint64_t *)sub_374CE4(*v171);
  uint64_t v56 = (void *)sub_2ABCB4(*v55);
  uint64_t v57 = sub_3CC750(v56);
  *((_DWORD *)v51 + 4) |= 2u;
  v51[4] = v57;
  *(_DWORD *)(v2 + 24) |= 4u;
  std::string::size_type v58 = *(void **)(v2 + 208);
  if (!v58)
  {
    uint64_t v59 = *(void *)(v2 + 16);
    uint64_t v60 = (void *)(v59 & 0xFFFFFFFFFFFFFFFCLL);
    if (v59) {
      uint64_t v60 = (void *)*v60;
    }
    std::string::size_type v58 = sub_11BED5C((uint64_t)v60);
    *(void *)(v2 + 208) = v58;
  }
  uint64_t v61 = (void *)sub_374D14(*v171);
  uint64_t v62 = sub_299CE4(v61);
  *((_DWORD *)v58 + 4) |= 1u;
  uint64_t v63 = v58[1];
  long long v64 = (uint64_t *)(v63 & 0xFFFFFFFFFFFFFFFCLL);
  if (v63) {
    long long v64 = (uint64_t *)*v64;
  }
  sub_1881DF4((std::string **)v58 + 3, (long long *)v62, v64);
  uint64_t v65 = *(int *)sub_37B3A8((uint64_t)*v171);
  *(_DWORD *)(v2 + 24) |= 0x10u;
  *(void *)(v2 + 224) = v65;
  unint64_t v66 = sub_69510();
  int64_t v67 = (long long *)sub_68EB4((uint64_t)v66);
  *(_DWORD *)(v2 + 24) |= 1u;
  uint64_t v68 = *(void *)(v2 + 16);
  uint64_t v69 = (uint64_t *)(v68 & 0xFFFFFFFFFFFFFFFCLL);
  if (v68) {
    uint64_t v69 = (uint64_t *)*v69;
  }
  sub_1881DF4((std::string **)(v2 + 192), v67, v69);
  if (v171[18] != (void *)-1 && *((_DWORD *)v171 + 38) != -1)
  {
    int64_t v70 = (char *)v171[64] - (char *)v171[63];
    if (v70)
    {
      unint64_t v71 = 0;
      uint64_t v72 = v70 / 104;
      while (1)
      {
        uint64_t v73 = sub_C583AC(v171 + 63, v71);
        if (*(void **)(v73 + 16) == v171[18]) {
          break;
        }
        if (v72 == ++v71) {
          goto LABEL_91;
        }
      }
      uint64_t v75 = *(_DWORD **)(v2 + 136);
      if (v75 && (uint64_t v76 = *(int *)(v2 + 128), (int)v76 < *v75))
      {
        *(_DWORD *)(v2 + 128) = v76 + 1;
        uint64_t v77 = *(void *)&v75[2 * v76 + 2];
        *(_DWORD *)(v77 + 16) |= 1u;
        uint64_t v78 = *(void *)(v77 + 24);
        if (!v78) {
          goto LABEL_82;
        }
      }
      else
      {
        sub_11BEDE0(*(void *)(v2 + 120));
        uint64_t v77 = sub_188CDC8(v2 + 120, v79);
        *(_DWORD *)(v77 + 16) |= 1u;
        uint64_t v78 = *(void *)(v77 + 24);
        if (!v78)
        {
LABEL_82:
          uint64_t v80 = *(void *)(v77 + 8);
          int v81 = (void *)(v80 & 0xFFFFFFFFFFFFFFFCLL);
          if (v80) {
            int v81 = (void *)*v81;
          }
          uint64_t v78 = sub_15C1918((uint64_t)v81);
          *(void *)(v77 + 24) = v78;
        }
      }
      LODWORD(v74) = *(_DWORD *)(v73 + 4);
      long double v82 = exp((double)v74 * -6.28318531 / 4294967300.0 + 3.14159265);
      long double v83 = atan((v82 + -1.0 / v82) * 0.5) * 57.2957795;
      int v84 = *(_DWORD *)(v78 + 40);
      *(_DWORD *)(v78 + 40) = v84 | 1;
      *(long double *)(v78 + 48) = v83;
      LODWORD(v83) = *(_DWORD *)v73;
      *(_DWORD *)(v78 + 40) = v84 | 3;
      *(double *)(v78 + 56) = (double)*(unint64_t *)&v83 * 360.0 / 4294967300.0 + -180.0;
      int v85 = *(unsigned __int8 *)(v73 + 100);
      *(_DWORD *)(v77 + 16) |= 4u;
      *(_DWORD *)(v77 + 40) = v85;
      uint64_t v86 = nullsub_1(*(void *)(v73 + 16));
      int v87 = *(_DWORD *)(v77 + 16);
      *(void *)(v77 + 32) = v86;
      *(_DWORD *)(v77 + 16) = v87 | 0xA;
      *(_DWORD *)(v77 + 44) = v71;
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)&__t);
        sub_188FC78(&__t, (uint64_t)"Micro A/B - Adding Special Access Point ", 40);
        nullsub_1(*(void *)(v73 + 16));
        std::ostream::operator<<();
        std::stringbuf::str();
        sub_7246C((uint64_t *)v189, 1u);
        if (SBYTE7(v190) < 0) {
          operator delete(v189[0]);
        }
        if (v181 < 0) {
          operator delete(v180);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
        uint64_t v52 = (uint64_t)v171;
      }
    }
  }
LABEL_91:
  if (**(void **)(v52 + 32) == *(void *)(*(void *)(v52 + 32) + 8)) {
    goto LABEL_208;
  }
  sub_725D0((uint64_t)v189);
  sub_39F3D0((uint64_t)&__t, *(void **)v52, v6, v52 + 160);
  uint64_t v88 = **(char ****)(v52 + 32);
  int v89 = (long long **)sub_C5BFC4((uint64_t *)(v52 + 56));
  int v90 = (uint64_t ***)sub_C5C068((uint64_t *)(v52 + 64));
  sub_39F3D4((std::string::size_type)&__t, v88, v89, v90, (uint64_t *)(v52 + 72), v52 + 104, v169, v170);
  sub_3A4C98((uint64_t)&__t, &v194);
  if (v195)
  {
    *(_DWORD *)(v2 + 24) |= 2u;
    unint64_t v91 = *(void **)(v2 + 200);
    if (!v91)
    {
      uint64_t v92 = *(void *)(v2 + 16);
      uint64_t v93 = (void *)(v92 & 0xFFFFFFFFFFFFFFFCLL);
      if (v92) {
        uint64_t v93 = (void *)*v93;
      }
      unint64_t v91 = sub_11CFEF0((uint64_t)v93);
      *(void *)(v2 + 200) = v91;
    }
    *((_DWORD *)v91 + 4) |= 0x10u;
    *((unsigned char *)v91 + 44) = 1;
    *(_DWORD *)(v2 + 24) |= 0x40u;
    *(unsigned char *)(v2 + 233) = 1;
  }
  sub_3A4C98((uint64_t)&__t, &v194);
  *(_DWORD *)(v2 + 356) = v194.n128_u32[0];
  sub_3A4C98((uint64_t)&__t, &v194);
  *(_DWORD *)(v2 + 360) = v194.n128_u32[1];
  sub_3A4C98((uint64_t)&__t, &v194);
  *(_DWORD *)(v2 + 364) = v194.n128_u32[2];
  sub_3A4C98((uint64_t)&__t, &v194);
  *(_DWORD *)(v2 + 368) = v194.n128_u32[2];
  uint64_t v94 = *(void *)(v2 + 88);
  if (v94) {
    uint64_t v95 = (uint64_t *)(v94 + 8);
  }
  else {
    uint64_t v95 = 0;
  }
  uint64_t v96 = *(int *)(v2 + 80);
  if (v96)
  {
    int v97 = 0;
    uint64_t v98 = 8 * v96;
    do
    {
      v97 += sub_11AC500(*v95++);
      v98 -= 8;
    }
    while (v98);
    uint64_t v99 = v97;
    uint64_t v52 = (uint64_t)v171;
  }
  else
  {
    uint64_t v99 = 0;
  }
  *(void *)(v2 + 312) = v99;
  *(double *)(v2 + 304) = sub_72688((uint64_t)v189);
  v194.n128_u64[0] = (unint64_t)&v188;
  sub_3A6108((void ***)&v194);
  if (v186)
  {
    unint64_t v187 = v186;
    operator delete(v186);
  }
  sub_3A6230(&v177);
  sub_725D0((uint64_t)&v194);
  sub_3C8C84((uint64_t)&__t, *(void **)v52);
  sub_3C8DB8((uint64_t)&__t, **(uint64_t ***)(v52 + 32), v189);
  char v100 = *v7;
  if (*v7)
  {
    uint64_t v101 = *(void *)(v2 + 248);
    uint64_t v102 = *v7;
    if ((void *)v101 != v100)
    {
      do
        uint64_t v101 = sub_11C6DFC(v101 - 64);
      while ((void *)v101 != v100);
      uint64_t v102 = *v7;
    }
    *(void *)(v2 + 248) = v100;
    operator delete(v102);
    void *v7 = 0;
    *(void *)(v2 + 248) = 0;
    *(void *)(v2 + 256) = 0;
  }
  *(_OWORD *)(v2 + 240) = *(_OWORD *)v189;
  *(void *)(v2 + 256) = v190;
  uint64_t v103 = *(_DWORD **)(v2 + 160);
  if (v103 && (uint64_t v104 = *(int *)(v2 + 152), (int)v104 < *v103))
  {
    *(_DWORD *)(v2 + 152) = v104 + 1;
    char v105 = *(std::string **)&v103[2 * v104 + 2];
  }
  else
  {
    std::string v106 = sub_11D0B84(*(void *)(v2 + 144));
    char v105 = (std::string *)sub_188CDC8(v2 + 144, (uint64_t)v106);
  }
  sub_3C99D8((uint64_t)&__t, ***(uint64_t ****)(v52 + 32), v189);
  if (v105 != (std::string *)v189)
  {
    std::string::size_type size = v105->__r_.__value_.__l.__size_;
    if ((size & 2) != 0)
    {
      std::string v108 = 0;
    }
    else
    {
      std::string v108 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
      if (size) {
        std::string v108 = (void *)*v108;
      }
    }
    if (((uint64_t)v189[1] & 2) != 0)
    {
      long long v109 = 0;
    }
    else
    {
      long long v109 = (void *)((unint64_t)v189[1] & 0xFFFFFFFFFFFFFFFCLL);
      if ((uint64_t)v189[1]) {
        long long v109 = (void *)*v109;
      }
    }
    if (v108 == v109) {
      sub_11CEE1C(v105, (uint64_t)v189);
    }
    else {
      sub_11CEDC8(v105, (uint64_t)v189);
    }
  }
  sub_11CE668(v189);
  uint64_t v111 = *(void *)(v2 + 240);
  uint64_t v110 = *(void *)(v2 + 248);
  if (v111 == v110)
  {
    *(void *)(v2 + 328) = 0;
    *(double *)(v2 + 320) = sub_72688((uint64_t)&v194);
    std::string v113 = v178;
    if (v178)
    {
LABEL_133:
      uint64_t v179 = v113;
      operator delete(v113);
    }
  }
  else
  {
    int v112 = 0;
    do
    {
      v112 += sub_11C74D8(v111);
      v111 += 64;
    }
    while (v111 != v110);
    *(void *)(v2 + 328) = v112;
    *(double *)(v2 + 320) = sub_72688((uint64_t)&v194);
    std::string v113 = v178;
    if (v178) {
      goto LABEL_133;
    }
  }
  sub_725D0((uint64_t)&v194);
  int64_t v114 = sub_69510();
  uint64_t v115 = **(uint64_t ****)(v52 + 32);
  uint64_t v117 = *v115;
  std::string v116 = v115[1];
  if (*v115 != v116)
  {
    uint64_t v118 = (uint64_t)v114;
    do
    {
      int v119 = sub_45FE24((uint64_t)v117);
      int v120 = v119;
      uint64_t v122 = *(char **)(v2 + 264);
      unint64_t v121 = *(void *)(v2 + 272);
      if (v122 != (char *)v121)
      {
        while (*(_DWORD *)v122 != v119)
        {
          v122 += 32;
          if (v122 == (char *)v121) {
            goto LABEL_142;
          }
        }
      }
      if (v122 == (char *)v121)
      {
LABEL_142:
        if (v121 >= *(void *)(v2 + 280))
        {
          char v123 = sub_3A6738((int64x2_t *)(v2 + 264));
        }
        else
        {
          *(_DWORD *)unint64_t v121 = -1;
          *(void *)(v121 + 16) = 0;
          *(void *)(v121 + 24) = 0;
          char v123 = (char *)(v121 + 32);
          *(void *)(v121 + 8) = 0;
        }
        *(void *)(v2 + 272) = v123;
        *((_DWORD *)v123 - 8) = v120;
        uint64_t v122 = v123 - 32;
      }
      unint64_t v124 = sub_45FC7C(v117);
      uint64_t v125 = *((void *)v122 + 1);
      uint64_t v126 = (void **)*((void *)v122 + 2);
      unint64_t v127 = 0x8E38E38E38E38E39 * (((uint64_t)v126 - v125) >> 3);
      if (v124 <= v127)
      {
        if (v124 < v127)
        {
          std::string::size_type v128 = (void **)(v125 + 72 * v124);
          if (v126 == v128)
          {
LABEL_150:
            *((void *)v122 + 2) = v128;
            goto LABEL_151;
          }
          while (2)
          {
            if (*((char *)v126 - 1) < 0)
            {
              operator delete(*(v126 - 3));
              uint64_t v140 = *(v126 - 6);
              if (v140)
              {
LABEL_165:
                *(v126 - 5) = v140;
                operator delete(v140);
              }
            }
            else
            {
              uint64_t v140 = *(v126 - 6);
              if (v140) {
                goto LABEL_165;
              }
            }
            int v141 = v126 - 9;
            uint64_t v142 = (char *)*(v126 - 9);
            if (v142)
            {
              uint64_t v143 = (char *)*(v126 - 8);
              BOOL v139 = *(v126 - 9);
              if (v143 != v142)
              {
                do
                {
                  long long v144 = (void *)*((void *)v143 - 6);
                  if (v144)
                  {
                    *((void *)v143 - 5) = v144;
                    operator delete(v144);
                  }
                  if (*(v143 - 57) < 0) {
                    operator delete(*((void **)v143 - 10));
                  }
                  v143 -= 80;
                }
                while (v143 != v142);
                BOOL v139 = *v141;
              }
              *(v126 - 8) = v142;
              operator delete(v139);
            }
            v126 -= 9;
            if (v141 == v128) {
              goto LABEL_150;
            }
            continue;
          }
        }
      }
      else
      {
        sub_3A88A4((char **)v122 + 1, v124 - v127);
      }
LABEL_151:
      char v129 = sub_68ECC(v118);
      uint64_t v52 = (uint64_t)v171;
      if (v171[3]) {
        char v130 = 1;
      }
      else {
        char v130 = v129;
      }
      if ((v130 & 1) == 0)
      {
        uint64_t v52 = (uint64_t)v171;
        if (!sub_45FE1C((uint64_t)v117))
        {
          uint64_t v52 = (uint64_t)v171;
          if (*(unsigned char *)(sub_5231C((uint64_t)v117) + 36))
          {
            unint64_t v131 = (int *)sub_3750CC(*v171);
            uint64_t v132 = *(void *)(sub_45FC68(v117) + 32);
            sub_47F66C((char *)v117, (uint64_t)v131);
            uint64_t v133 = sub_45FC68(v117);
            sub_2D5D58((uint64_t)v131, *(void *)(v133 + 32) & 0xFFFFFFFFFFFFLL);
            unint64_t v134 = v132 & 0xFFFFFFFFFFFFLL;
            int v135 = (int *)sub_2D5D58((uint64_t)v131, v132 & 0xFFFFFFFFFFFFLL);
            uint64_t v136 = (unsigned __int16 *)((char *)v135 - *v135);
            if (*v136 >= 0x41u && (uint64_t v137 = v136[32]) != 0) {
              BOOL v138 = (unsigned int *)((char *)v135 + v137 + *(unsigned int *)((char *)v135 + v137));
            }
            else {
              BOOL v138 = 0;
            }
            uint64_t v145 = v132 & 0xFF000000000000;
            sub_3BD900(v138, v145 != 0x1000000000000, 1, (uint64_t)&__t);
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = __t.__d_.__rep_;
            if (__t.__d_.__rep_)
            {
              uint64_t v147 = v176;
              unint64_t v148 = (void *)__t.__d_.__rep_;
              if (__t.__d_.__rep_ != (void)v176)
              {
                do
                {
                  if (*(char *)(v147 - 1) < 0) {
                    operator delete(*(void **)(v147 - 24));
                  }
                  v147 -= 24;
                }
                while (v147 != rep);
                unint64_t v148 = (void *)__t.__d_.__rep_;
              }
              *(void *)&long long v176 = rep;
              operator delete(v148);
            }
            uint64_t v149 = sub_45FC68(v117);
            unint64_t v150 = sub_2E68E8((uint64_t)v131, *(void *)(v149 + 32));
            sub_3BDB4C(v131, v150, v193);
            int v151 = sub_DBB1D4((uint64_t)v171[2]) >> 32;
            char v152 = (int *)sub_2D5D58((uint64_t)v131, v134);
            uint64_t v153 = (unsigned __int16 *)((char *)v152 - *v152);
            if (*v153 >= 0x41u && (uint64_t v154 = v153[32]) != 0) {
              int v155 = (unsigned int *)((char *)v152 + v154 + *(unsigned int *)((char *)v152 + v154));
            }
            else {
              int v155 = 0;
            }
            sub_3BD900(v155, v145 != 0x1000000000000, 1, (uint64_t)&v192);
            uint64_t v156 = sub_45FC68(v117);
            sub_3BDCD8((uint64_t)v131, *(unsigned int *)(v156 + 32) | ((unint64_t)*(unsigned __int16 *)(v156 + 36) << 32), &__t);
            uint64_t v157 = HIBYTE(v176);
            if (v176 < 0) {
              uint64_t v157 = v176;
            }
            if (v157) {
              sub_26A18((uint64_t)v191, (const char *)&__t);
            }
            else {
              sub_26908((uint64_t)v191);
            }
            if (SHIBYTE(v176) < 0) {
              operator delete((void *)__t.__d_.__rep_);
            }
            sub_480C((uint64_t)&__t, v151);
          }
        }
      }
      v117 += 15;
    }
    while (v117 != v116);
  }
  sub_3BFD18((BOOL *)v189, *(void *)v52);
  uint64_t v158 = *(uint64_t **)(v52 + 40);
  uint64_t v159 = **(uint64_t ***)(v52 + 32);
  uint64_t v160 = *(void **)v52;
  __t.__d_.__rep_ = *(void *)(v52 + 8);
  sub_3BFD1C((uint64_t)v189, v159, v158, v160, &__t.__d_.__rep_, (uint64_t)v170);
  uint64_t v161 = *(void *)(v2 + 112);
  if (v161) {
    int64_t v162 = (uint64_t *)(v161 + 8);
  }
  else {
    int64_t v162 = 0;
  }
  uint64_t v163 = *(int *)(v2 + 104);
  if (v163)
  {
    int v164 = 0;
    uint64_t v165 = 8 * v163;
    do
    {
      v164 += sub_11B0050(*v162++);
      v165 -= 8;
    }
    while (v165);
    uint64_t v166 = v164;
    uint64_t v52 = (uint64_t)v171;
  }
  else
  {
    uint64_t v166 = 0;
  }
  *(void *)(v2 + 344) = v166;
LABEL_208:
  sub_C59C04(v52, (uint64_t)v170);
  sub_C585EC((uint64_t)v170);
  *(void *)(v2 + 296) = sub_11B2D2C((uint64_t)v170);
  *(double *)(v2 + 288) = round(sub_72688((uint64_t)v174));
  *(unsigned char *)(v2 + 352) = v169;
  *(unsigned char *)(v2 + 390) = *(unsigned char *)(v2 + 233);
  if (v173 < 0) {
    operator delete(v172[0]);
  }
}

void sub_C59A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *__p, uint64_t a7, int a8, __int16 a9, char a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_C5C310((void **)va);
  sub_C5C10C(v14);
  if (a11 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_C59C04(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 97))
  {
    uint64_t v4 = sub_C5BCB8((uint64_t *)(a1 + 8));
    int v5 = (unsigned char *)sub_3B6008((uint64_t)v108, *(void *)a1);
    sub_3B600C(v5, *(void *)(a1 + 136));
    if (*(void *)(a1 + 24))
    {
      uint64_t v6 = (void *)sub_C5BD5C((uint64_t *)(a1 + 24));
      if (!sub_45FB38(v6))
      {
        long long v7 = (void *)sub_C5BD5C((uint64_t *)(a1 + 24));
        int v8 = (void *)sub_45FB28(v7, 0);
        sub_3B732C(v108, v8, v4, *(void *)a1, *(void *)(a1 + 136));
        char v9 = (void *)sub_C5BD5C((uint64_t *)(a1 + 24));
        uint64_t v10 = sub_45FB28(v9, 0);
        unint64_t v11 = sub_3B6094(v108, v10, v4, *(void *)(a1 + 136));
        int v13 = v12;
        unint64_t v14 = HIDWORD(v12);
        *(unsigned char *)(a2 + 380) = BYTE4(v12);
        std::string v15 = (void *)sub_C5BD5C((uint64_t *)(a1 + 24));
        uint64_t v16 = sub_45FB28(v15, 0);
        uint64_t v17 = (void *)(sub_486CB4(*(void *)(a1 + 136)) + 16);
        int v93 = v13;
        unint64_t v94 = v11;
        uint64_t v95 = v17;
        if (*(_DWORD *)(v16 + 152) != 0x7FFFFFFF
          && *(_DWORD *)(v16 + 188) != 0x7FFFFFFF
          && sub_40A45C((int *)(v16 + 160)))
        {
          int v18 = *(_DWORD *)(v16 + 264);
          if (v18 != -1)
          {
            if (v18 == 1)
            {
              if (*(void *)(v16 + 256) <= 0xFFFFFFFEFFFFFFFFLL && *(void *)(v16 + 256)) {
                goto LABEL_25;
              }
            }
            else
            {
              if (v18) {
                goto LABEL_193;
              }
              if (*(void *)(v16 + 256) != -1) {
                goto LABEL_25;
              }
            }
          }
        }
        if (*(_DWORD *)(v16 + 312) != 0x7FFFFFFF
          && *(_DWORD *)(v16 + 348) != 0x7FFFFFFF
          && sub_40A45C((int *)(v16 + 320)))
        {
          int v19 = *(_DWORD *)(v16 + 424);
          if (v19 != -1)
          {
            if (v19 != 1)
            {
              if (!v19)
              {
                if (*(void *)(v16 + 416) != -1) {
                  goto LABEL_25;
                }
                goto LABEL_24;
              }
LABEL_193:
              exceptiouint64_t n = __cxa_allocate_exception(8uLL);
              void *exception = &off_23FDF58;
            }
            if (*(void *)(v16 + 416) <= 0xFFFFFFFEFFFFFFFFLL && *(void *)(v16 + 416)) {
              goto LABEL_25;
            }
          }
        }
LABEL_24:
        if ((sub_63A048(v4) & 1) == 0)
        {
          BOOL v20 = sub_C5BBDC(v17);
LABEL_27:
          *(unsigned char *)(a2 + 381) = v20;
          uint64_t v21 = nullsub_1(v108);
          unint64_t v22 = sub_DBB1D4(*(void *)(a1 + 16)) >> 32;
          int v23 = v22;
          if (*(_DWORD *)(sub_486CB4(*(void *)(a1 + 136)) + 152) != 0x7FFFFFFF) {
            int v23 = *(_DWORD *)(sub_486CB4(*(void *)(a1 + 136)) + 152);
          }
          uint64_t v24 = *(void *)a1;
          __p[23] = 9;
          strcpy(__p, "EVRouting");
          long long __dst = 0uLL;
          uint64_t v107 = 0;
          uint64_t v25 = sub_374CDC(v24, (uint64_t)__p, (uint64_t *)&__dst);
          uint64_t v26 = v25;
          uint64_t v27 = __dst;
          if ((void)__dst)
          {
            uint64_t v96 = v25;
            uint64_t v28 = v4;
            int v29 = v22;
            unint64_t v22 = v21;
            int v30 = v23;
            BOOL v31 = v20;
            uint64_t v32 = a2;
            char v33 = v14;
            uint64_t v34 = *((void *)&__dst + 1);
            uint64_t v35 = (void *)__dst;
            if (*((void *)&__dst + 1) != (void)__dst)
            {
              do
              {
                if (*(char *)(v34 - 1) < 0) {
                  operator delete(*(void **)(v34 - 24));
                }
                v34 -= 24;
              }
              while (v34 != v27);
              uint64_t v35 = (void *)__dst;
            }
            *((void *)&__dst + 1) = v27;
            operator delete(v35);
            LOBYTE(v14) = v33;
            a2 = v32;
            BOOL v20 = v31;
            int v23 = v30;
            uint64_t v21 = v22;
            LODWORD(v22) = v29;
            uint64_t v4 = v28;
            uint64_t v26 = v96;
          }
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          *(void *)long long __p = operator new(0x20uLL);
          *(_OWORD *)&__p[8] = xmmword_20B91A0;
          strcpy(*(char **)__p, "ev_info_staleness_limit_min");
          int v36 = sub_5D2EC(v26, __p);
          if ((__p[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)__p);
            double v37 = 0.0;
            if (!sub_DAFBE4(v4)) {
              goto LABEL_52;
            }
          }
          else
          {
            double v37 = 0.0;
            if (!sub_DAFBE4(v4)) {
              goto LABEL_52;
            }
          }
          if ((int)sub_46CABC(v4) <= v36)
          {
            BOOL v38 = (_BYTE)v14 || 10 * ((int)v22 - v23) < *(_DWORD *)(v21 + 48);
            char v39 = v38 || v20;
            if ((v39 & 1) == 0 && !sub_C5BC54(v95, *(_DWORD *)(v21 + 40), *(_DWORD *)(v21 + 44)))
            {
              if (v94 == 0x7FFFFFFF || HIDWORD(v94) == 0x7FFFFFFF)
              {
                int v40 = 0;
              }
              else
              {
                int v40 = 0;
                if (v93 && v93 != 0x7FFFFFFF)
                {
                  int v40 = 0;
                  double v37 = (double)((int)v94 - HIDWORD(v94)) / 1000.0 / ((double)v93 / 1000.0);
                }
              }
LABEL_53:
              *(double *)(a2 + 368) = v37;
              uint64_t v41 = *(void *)(v21 + 24);
              int v42 = (int)v41 / 100000;
              int v43 = (int)v41 % 100000;
              if (v41 >= 0) {
                int v44 = 50000;
              }
              else {
                int v44 = -50000;
              }
              *(_DWORD *)(a2 + 376) = (v44 + v43) / 100000 + v42;
              double v45 = -v37;
              if (v37 > 0.0) {
                double v45 = v37;
              }
              if (v45 <= *(double *)(v21 + 32)) {
                goto LABEL_114;
              }
              unint64_t v46 = sub_DC6B80(*(void *)(a1 + 16));
              if (*(char *)(v46 + 23) < 0)
              {
                sub_4200(&__dst, *(void **)v46, *(void *)(v46 + 8));
              }
              else
              {
                long long v47 = *(_OWORD *)v46;
                uint64_t v107 = *(void *)(v46 + 16);
                long long __dst = v47;
              }
              unint64_t v48 = sub_DBE84C(*(void *)(a1 + 16));
              if (*(char *)(v48 + 23) < 0)
              {
                sub_4200(&v104, *(void **)v48, *(void *)(v48 + 8));
              }
              else
              {
                long long v49 = *(_OWORD *)v48;
                uint64_t v105 = *(void *)(v48 + 16);
                long long v104 = v49;
              }
              v103.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
              *(_OWORD *)&v103.__r_.__value_.__r.__words[1] = xmmword_20B9A00;
              strcpy(v103.__r_.__value_.__l.__data_, "EV consumption prediction error exceeded the max allowed limit: ");
              std::to_string(&v102, *(double *)(a2 + 368));
              uint64_t v50 = std::string::append(&v102, "%");
              long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
              *(void *)&__p[16] = *((void *)&v50->__r_.__value_.__l + 2);
              *(_OWORD *)long long __p = v51;
              v50->__r_.__value_.__l.__size_ = 0;
              v50->__r_.__value_.__r.__words[2] = 0;
              v50->__r_.__value_.__r.__words[0] = 0;
              if (__p[23] >= 0) {
                uint64_t v52 = __p;
              }
              else {
                uint64_t v52 = *(const std::string::value_type **)__p;
              }
              if (__p[23] >= 0) {
                std::string::size_type v53 = __p[23];
              }
              else {
                std::string::size_type v53 = *(void *)&__p[8];
              }
              std::string::append(&v103, v52, v53);
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
              if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v102.__r_.__value_.__l.__data_);
              }
              std::operator+<char>();
              uint64_t v54 = std::string::append(&v100, "\" app_id=\"");
              long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
              v101.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v55;
              v54->__r_.__value_.__l.__size_ = 0;
              v54->__r_.__value_.__r.__words[2] = 0;
              v54->__r_.__value_.__r.__words[0] = 0;
              if (v107 >= 0) {
                p_dst = (const std::string::value_type *)&__dst;
              }
              else {
                p_dst = (const std::string::value_type *)__dst;
              }
              if (v107 >= 0) {
                std::string::size_type v57 = HIBYTE(v107);
              }
              else {
                std::string::size_type v57 = *((void *)&__dst + 1);
              }
              std::string::size_type v58 = std::string::append(&v101, p_dst, v57);
              long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
              v102.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v59;
              v58->__r_.__value_.__l.__size_ = 0;
              v58->__r_.__value_.__r.__words[2] = 0;
              v58->__r_.__value_.__r.__words[0] = 0;
              uint64_t v60 = std::string::append(&v102, "\"");
              long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
              *(void *)&__p[16] = *((void *)&v60->__r_.__value_.__l + 2);
              *(_OWORD *)long long __p = v61;
              v60->__r_.__value_.__l.__size_ = 0;
              v60->__r_.__value_.__r.__words[2] = 0;
              v60->__r_.__value_.__r.__words[0] = 0;
              if (__p[23] >= 0) {
                uint64_t v62 = __p;
              }
              else {
                uint64_t v62 = *(const std::string::value_type **)__p;
              }
              if (__p[23] >= 0) {
                std::string::size_type v63 = __p[23];
              }
              else {
                std::string::size_type v63 = *(void *)&__p[8];
              }
              std::string::append(&v103, v62, v63);
              if ((__p[23] & 0x80000000) != 0)
              {
                operator delete(*(void **)__p);
                if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_89:
                  if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_90;
                  }
                  goto LABEL_173;
                }
              }
              else if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                goto LABEL_89;
              }
              operator delete(v102.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_90:
                if ((SHIBYTE(v100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_91:
                  long long v64 = sub_69510();
                  sub_68EE4((uint64_t)v64);
                  std::operator+<char>();
                  if (__p[23] >= 0) {
                    uint64_t v65 = __p;
                  }
                  else {
                    uint64_t v65 = *(const std::string::value_type **)__p;
                  }
                  if (__p[23] >= 0) {
                    std::string::size_type v66 = __p[23];
                  }
                  else {
                    std::string::size_type v66 = *(void *)&__p[8];
                  }
                  std::string::append(&v103, v65, v66);
                  if ((__p[23] & 0x80000000) != 0) {
                    operator delete(*(void **)__p);
                  }
                  if (sub_723EC(3u))
                  {
                    sub_6BAC((uint64_t)__p);
                    if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      int64_t v67 = &v103;
                    }
                    else {
                      int64_t v67 = (std::string *)v103.__r_.__value_.__r.__words[0];
                    }
                    if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      std::string::size_type size = HIBYTE(v103.__r_.__value_.__r.__words[2]);
                    }
                    else {
                      std::string::size_type size = v103.__r_.__value_.__l.__size_;
                    }
                    sub_188FC78(__p, (uint64_t)v67, size);
                    std::stringbuf::str();
                    sub_7246C((uint64_t *)&v102, 3u);
                    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v102.__r_.__value_.__l.__data_);
                    }
                    if (v99 < 0) {
                      operator delete(v98);
                    }
                    std::streambuf::~streambuf();
                    std::ostream::~ostream();
                    std::ios::~ios();
                  }
                  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(v103.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v105) & 0x80000000) == 0)
                    {
LABEL_113:
                      if ((SHIBYTE(v107) & 0x80000000) == 0) {
                        goto LABEL_114;
                      }
LABEL_177:
                      operator delete((void *)__dst);
                      if (!v40) {
                        return;
                      }
                      goto LABEL_115;
                    }
                  }
                  else if ((SHIBYTE(v105) & 0x80000000) == 0)
                  {
                    goto LABEL_113;
                  }
                  operator delete((void *)v104);
                  if (SHIBYTE(v107) < 0) {
                    goto LABEL_177;
                  }
LABEL_114:
                  if (!v40) {
                    return;
                  }
LABEL_115:
                  unint64_t v69 = sub_DC6B80(*(void *)(a1 + 16));
                  if (*(char *)(v69 + 23) < 0)
                  {
                    sub_4200(&__dst, *(void **)v69, *(void *)(v69 + 8));
                  }
                  else
                  {
                    long long v70 = *(_OWORD *)v69;
                    uint64_t v107 = *(void *)(v69 + 16);
                    long long __dst = v70;
                  }
                  unint64_t v71 = sub_DBE84C(*(void *)(a1 + 16));
                  if (*(char *)(v71 + 23) < 0)
                  {
                    sub_4200(&v104, *(void **)v71, *(void *)(v71 + 8));
                  }
                  else
                  {
                    long long v72 = *(_OWORD *)v71;
                    uint64_t v105 = *(void *)(v71 + 16);
                    long long v104 = v72;
                  }
                  v103.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
                  *(_OWORD *)&v103.__r_.__value_.__r.__words[1] = xmmword_20B8FD0;
                  strcpy(v103.__r_.__value_.__l.__data_, "EV consumption prediction excluded: ");
                  std::to_string(&v102, *(double *)(a2 + 368));
                  uint64_t v73 = std::string::append(&v102, "%");
                  long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
                  *(void *)&__p[16] = *((void *)&v73->__r_.__value_.__l + 2);
                  *(_OWORD *)long long __p = v74;
                  v73->__r_.__value_.__l.__size_ = 0;
                  v73->__r_.__value_.__r.__words[2] = 0;
                  v73->__r_.__value_.__r.__words[0] = 0;
                  if (__p[23] >= 0) {
                    uint64_t v75 = __p;
                  }
                  else {
                    uint64_t v75 = *(const std::string::value_type **)__p;
                  }
                  if (__p[23] >= 0) {
                    std::string::size_type v76 = __p[23];
                  }
                  else {
                    std::string::size_type v76 = *(void *)&__p[8];
                  }
                  std::string::append(&v103, v75, v76);
                  if ((__p[23] & 0x80000000) != 0) {
                    operator delete(*(void **)__p);
                  }
                  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v102.__r_.__value_.__l.__data_);
                  }
                  std::operator+<char>();
                  uint64_t v77 = std::string::append(&v100, "\" app_id=\"");
                  long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
                  v101.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v78;
                  v77->__r_.__value_.__l.__size_ = 0;
                  v77->__r_.__value_.__r.__words[2] = 0;
                  v77->__r_.__value_.__r.__words[0] = 0;
                  if (v107 >= 0) {
                    uint64_t v79 = (const std::string::value_type *)&__dst;
                  }
                  else {
                    uint64_t v79 = (const std::string::value_type *)__dst;
                  }
                  if (v107 >= 0) {
                    std::string::size_type v80 = HIBYTE(v107);
                  }
                  else {
                    std::string::size_type v80 = *((void *)&__dst + 1);
                  }
                  int v81 = std::string::append(&v101, v79, v80);
                  long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
                  v102.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v82;
                  v81->__r_.__value_.__l.__size_ = 0;
                  v81->__r_.__value_.__r.__words[2] = 0;
                  v81->__r_.__value_.__r.__words[0] = 0;
                  long double v83 = std::string::append(&v102, "\"");
                  long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
                  *(void *)&__p[16] = *((void *)&v83->__r_.__value_.__l + 2);
                  *(_OWORD *)long long __p = v84;
                  v83->__r_.__value_.__l.__size_ = 0;
                  v83->__r_.__value_.__r.__words[2] = 0;
                  v83->__r_.__value_.__r.__words[0] = 0;
                  if (__p[23] >= 0) {
                    int v85 = __p;
                  }
                  else {
                    int v85 = *(const std::string::value_type **)__p;
                  }
                  if (__p[23] >= 0) {
                    std::string::size_type v86 = __p[23];
                  }
                  else {
                    std::string::size_type v86 = *(void *)&__p[8];
                  }
                  std::string::append(&v103, v85, v86);
                  if ((__p[23] & 0x80000000) != 0)
                  {
                    operator delete(*(void **)__p);
                    if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_145:
                      if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                        goto LABEL_146;
                      }
                      goto LABEL_181;
                    }
                  }
                  else if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
                    goto LABEL_145;
                  }
                  operator delete(v102.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_146:
                    if ((SHIBYTE(v100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                      goto LABEL_147;
                    }
LABEL_182:
                    operator delete(v100.__r_.__value_.__l.__data_);
LABEL_147:
                    int v87 = sub_69510();
                    sub_68EE4((uint64_t)v87);
                    std::operator+<char>();
                    if (__p[23] >= 0) {
                      uint64_t v88 = __p;
                    }
                    else {
                      uint64_t v88 = *(const std::string::value_type **)__p;
                    }
                    if (__p[23] >= 0) {
                      std::string::size_type v89 = __p[23];
                    }
                    else {
                      std::string::size_type v89 = *(void *)&__p[8];
                    }
                    std::string::append(&v103, v88, v89);
                    if ((__p[23] & 0x80000000) != 0) {
                      operator delete(*(void **)__p);
                    }
                    if (sub_723EC(1u))
                    {
                      sub_6BAC((uint64_t)__p);
                      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        int v90 = &v103;
                      }
                      else {
                        int v90 = (std::string *)v103.__r_.__value_.__r.__words[0];
                      }
                      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type v91 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        std::string::size_type v91 = v103.__r_.__value_.__l.__size_;
                      }
                      sub_188FC78(__p, (uint64_t)v90, v91);
                      std::stringbuf::str();
                      sub_7246C((uint64_t *)&v102, 1u);
                      if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v102.__r_.__value_.__l.__data_);
                      }
                      if (v99 < 0) {
                        operator delete(v98);
                      }
                      std::streambuf::~streambuf();
                      std::ostream::~ostream();
                      std::ios::~ios();
                    }
                    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(v103.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v105) & 0x80000000) == 0)
                      {
LABEL_169:
                        if ((SHIBYTE(v107) & 0x80000000) == 0) {
                          return;
                        }
LABEL_185:
                        operator delete((void *)__dst);
                        return;
                      }
                    }
                    else if ((SHIBYTE(v105) & 0x80000000) == 0)
                    {
                      goto LABEL_169;
                    }
                    operator delete((void *)v104);
                    if ((SHIBYTE(v107) & 0x80000000) == 0) {
                      return;
                    }
                    goto LABEL_185;
                  }
LABEL_181:
                  operator delete(v101.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_147;
                  }
                  goto LABEL_182;
                }
LABEL_174:
                operator delete(v100.__r_.__value_.__l.__data_);
                goto LABEL_91;
              }
LABEL_173:
              operator delete(v101.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_91;
              }
              goto LABEL_174;
            }
          }
LABEL_52:
          int v40 = 1;
          goto LABEL_53;
        }
LABEL_25:
        BOOL v20 = 1;
        goto LABEL_27;
      }
    }
  }
}

void sub_C5A914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a58 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a13);
  if (*(char *)(v58 - 225) < 0)
  {
    operator delete(*(void **)(v58 - 248));
    if ((*(char *)(v58 - 201) & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else if ((*(char *)(v58 - 201) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v58 - 169) & 0x80000000) == 0) {
LABEL_10:
    }
      _Unwind_Resume(a1);
LABEL_9:
    operator delete(*(void **)(v58 - 192));
    goto LABEL_10;
  }
  operator delete(*(void **)(v58 - 224));
  if ((*(char *)(v58 - 169) & 0x80000000) == 0) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void sub_C5AB1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    JUMPOUT(0xC5AB10);
  }
  JUMPOUT(0xC5AB14);
}

void sub_C5AB40(void **a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v153);
  unsigned int v4 = sub_DB7034((uint64_t)a1[2]);
  int v141 = sub_DE7FB0(v4);
  sub_37B34C(*a1, (uint64_t)v151);
  int v5 = sub_DBB1D4((uint64_t)a1[2]) >> 32;
  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  int v6 = std::chrono::system_clock::to_time_t(&__t);
  sub_DB6E94((uint64_t)a1[2]);
  *(_OWORD *)(a2 + 8) = 0u;
  *(unsigned char *)a2 = 1;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 184) = 0u;
  *(_OWORD *)(a2 + 200) = 0u;
  *(_OWORD *)(a2 + 216) = 0u;
  *(_OWORD *)(a2 + 232) = 0u;
  *(_OWORD *)(a2 + 248) = 0u;
  *(_OWORD *)(a2 + 264) = 0u;
  *(_OWORD *)(a2 + 280) = 0u;
  *(_OWORD *)(a2 + 296) = 0u;
  *(_OWORD *)(a2 + 312) = 0u;
  *(_OWORD *)(a2 + 328) = 0u;
  *(_OWORD *)(a2 + 344) = 0u;
  *(_OWORD *)(a2 + 360) = 0u;
  *(_OWORD *)(a2 + 376) = 0u;
  uint64_t v140 = a2 + 8;
  sub_11B16A4(a2 + 8, 0, 0);
  *(unsigned char *)(a2 + 372) = 0;
  *(void *)(a2 + 364) = 0;
  *(void *)(a2 + 356) = 0;
  *(void *)(a2 + 376) = 0;
  *(void *)(a2 + 383) = 0;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  *(unsigned char *)(a2 + 352) = 0;
  int v7 = *((unsigned __int8 *)a1 + 96);
  if (*((unsigned char *)a1 + 96) || *a1[4] == a1[4][1]) {
    goto LABEL_2;
  }
  uint64_t v16 = (uint64_t)*a1;
  __t.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)operator new(0x20uLL);
  long long v144 = xmmword_20B8E90;
  strcpy((char *)__t.__d_.__rep_, "AnalyticsMetricsRelevanceChecks");
  uint64_t v154 = 0;
  int v155 = 0;
  uint64_t v156 = 0;
  uint64_t v17 = sub_374CDC(v16, (uint64_t)&__t, (uint64_t *)&v154);
  int v18 = v154;
  if (v154)
  {
    int v19 = v155;
    BOOL v20 = v154;
    if (v155 != v154)
    {
      do
      {
        if (*((char *)v19 - 1) < 0) {
          operator delete(*(v19 - 3));
        }
        v19 -= 3;
      }
      while (v19 != v18);
      BOOL v20 = v154;
    }
    int v155 = v18;
    operator delete(v20);
  }
  if (SHIBYTE(v144) < 0) {
    operator delete((void *)__t.__d_.__rep_);
  }
  __t.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)operator new(0x20uLL);
  long long v144 = xmmword_20B9800;
  strcpy((char *)__t.__d_.__rep_, "enable_metrics_relevance_check");
  BOOL v138 = sub_29D62C(v17, (uint64_t)&__t);
  BOOL v139 = v138;
  if (SHIBYTE(v144) < 0)
  {
    operator delete((void *)__t.__d_.__rep_);
    if (v139) {
      goto LABEL_173;
    }
    goto LABEL_175;
  }
  if (!v138)
  {
LABEL_175:
    int v7 = *((unsigned __int8 *)a1 + 96);
LABEL_2:
    char v8 = v7 != 0;
    goto LABEL_3;
  }
LABEL_173:
  char v8 = sub_35E640();
LABEL_3:
  int v9 = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a2 + 233) = v8;
  *(_DWORD *)(a2 + 24) = v9 | 0x42;
  uint64_t v10 = *(void **)(a2 + 200);
  if (!v10)
  {
    uint64_t v11 = *(void *)(a2 + 16);
    unint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
    if (v11) {
      unint64_t v12 = (void *)*v12;
    }
    uint64_t v10 = sub_11CFEF0((uint64_t)v12);
    *(void *)(a2 + 200) = v10;
  }
  int v13 = *((_DWORD *)v10 + 4);
  *((_DWORD *)v10 + 9) = v5;
  *((_DWORD *)v10 + 10) = v6;
  *((unsigned char *)v10 + 44) = *((unsigned char *)a1 + 96);
  *((_DWORD *)v10 + 8) = 1;
  *((_DWORD *)v10 + 4) = v13 | 0x1F;
  unint64_t v14 = (void *)v10[3];
  if (v14)
  {
    *((_DWORD *)v14 + 4) |= 1u;
    uint64_t v15 = v14[3];
    if (v15) {
      goto LABEL_23;
    }
    goto LABEL_20;
  }
  uint64_t v21 = v10[1];
  unint64_t v22 = (void *)(v21 & 0xFFFFFFFFFFFFFFFCLL);
  if (v21) {
    unint64_t v22 = (void *)*v22;
  }
  unint64_t v14 = sub_11CFF70((uint64_t)v22);
  v10[3] = v14;
  *((_DWORD *)v14 + 4) |= 1u;
  uint64_t v15 = v14[3];
  if (!v15)
  {
LABEL_20:
    uint64_t v23 = v14[1];
    uint64_t v24 = (void *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
    if (v23) {
      uint64_t v24 = (void *)*v24;
    }
    uint64_t v15 = sub_11CFFEC((uint64_t)v24);
    void v14[3] = v15;
  }
LABEL_23:
  *(_DWORD *)(v15 + 16) |= 1u;
  uint64_t v25 = *(void *)(v15 + 8);
  uint64_t v26 = (uint64_t *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
  if (v25) {
    uint64_t v26 = (uint64_t *)*v26;
  }
  sub_1881DF4((std::string **)(v15 + 120), (long long *)v151, v26);
  int v27 = *(_DWORD *)(v15 + 16);
  *(_DWORD *)(v15 + 16) = v27 | 0x10;
  *(unsigned char *)(v15 + 152) = v141;
  uint64_t v28 = a1[2];
  if ((v28[5] & 0x40) != 0)
  {
    int v29 = (uint64_t (***)())v28[39];
    *(_DWORD *)(v15 + 16) = v27 | 0x12;
    uint64_t v30 = *(void *)(v15 + 128);
    if (!v30)
    {
      uint64_t v31 = *(void *)(v15 + 8);
      uint64_t v32 = (void *)(v31 & 0xFFFFFFFFFFFFFFFCLL);
      if (v31) {
        uint64_t v32 = (void *)*v32;
      }
      uint64_t v30 = sub_15C1CB4((uint64_t)v32);
      *(void *)(v15 + 128) = v30;
      int v29 = (uint64_t (***)())a1[2][39];
    }
    if (v29) {
      char v33 = v29;
    }
    else {
      char v33 = &off_253F2E8;
    }
    sub_15B4B28(v30, (uint64_t)v33);
  }
  if (v141)
  {
    if ((a1[2][5] & 0x40) != 0)
    {
      uint64_t v34 = (void *)*a1[4];
      if (a1[4][1] - (void)v34 == 24 && *v34 != v34[1])
      {
        if (a1[3])
        {
          uint64_t v35 = (void *)sub_C5C3F8((uint64_t *)a1 + 3);
          if (!sub_45FB38(v35))
          {
            uint64_t v154 = (void **)sub_DBB1D4((uint64_t)a1[2]);
            LODWORD(v155) = v36;
            uint64_t v37 = sub_C5C3F8((uint64_t *)a1 + 3);
            sub_3BC5B4((uint64_t)&__t, (uint64_t)(a1 + 20), (uint64_t *)&v154, v37, *(void *)*a1[4], *a1[5], (uint64_t)a1[17], *a1);
            *(_DWORD *)(v15 + 16) |= 4u;
            if (!*(void *)(v15 + 136))
            {
              uint64_t v38 = *(void *)(v15 + 8);
              char v39 = (void *)(v38 & 0xFFFFFFFFFFFFFFFCLL);
              if (v38) {
                char v39 = (void *)*v39;
              }
              *(void *)(v15 + 136) = sub_11D00B4((uint64_t)v39);
            }
            sub_3BC5B8(&__t);
            if (__p)
            {
              unint64_t v150 = __p;
              operator delete(__p);
            }
            if (v147)
            {
              unint64_t v148 = v147;
              operator delete(v147);
            }
          }
        }
      }
    }
  }
  int v40 = (const std::string **)a1[6];
  if (v40)
  {
    uint64_t v41 = *v40;
    int v42 = v40[1];
    if (*v40 != v42)
    {
      int v43 = (uint64_t **)(a2 + 32);
      do
      {
        int v44 = *(_DWORD **)(a2 + 48);
        if (v44 && (uint64_t v45 = *(int *)(a2 + 40), (int)v45 < *v44))
        {
          *(_DWORD *)(a2 + 40) = v45 + 1;
          unint64_t v46 = *(std::string **)&v44[2 * v45 + 2];
        }
        else
        {
          if (!*v43) {
            operator new();
          }
          *unint64_t v48 = v47;
          v48[1] = sub_3A6EDC;
          void *v47 = 0;
          v47[1] = 0;
          void v47[2] = 0;
          unint64_t v46 = (std::string *)sub_188CDC8(a2 + 32, (uint64_t)v47);
        }
        std::string::operator=(v46, v41++);
      }
      while (v41 != v42);
    }
  }
  *(_DWORD *)(a2 + 24) |= 4u;
  long long v49 = *(void **)(a2 + 208);
  if (!v49)
  {
    uint64_t v50 = *(void *)(a2 + 16);
    long long v51 = (void *)(v50 & 0xFFFFFFFFFFFFFFFCLL);
    if (v50) {
      long long v51 = (void *)*v51;
    }
    long long v49 = sub_11BED5C((uint64_t)v51);
    *(void *)(a2 + 208) = v49;
  }
  uint64_t v52 = (uint64_t *)sub_374CE4(*a1);
  std::string::size_type v53 = (void *)sub_2ABCB4(*v52);
  uint64_t v54 = sub_3CC750(v53);
  *((_DWORD *)v49 + 4) |= 2u;
  v49[4] = v54;
  *(_DWORD *)(a2 + 24) |= 4u;
  long long v55 = *(void **)(a2 + 208);
  if (!v55)
  {
    uint64_t v56 = *(void *)(a2 + 16);
    std::string::size_type v57 = (void *)(v56 & 0xFFFFFFFFFFFFFFFCLL);
    if (v56) {
      std::string::size_type v57 = (void *)*v57;
    }
    long long v55 = sub_11BED5C((uint64_t)v57);
    *(void *)(a2 + 208) = v55;
  }
  uint64_t v58 = (void *)sub_374D14(*a1);
  long long v59 = sub_299CE4(v58);
  *((_DWORD *)v55 + 4) |= 1u;
  uint64_t v60 = v55[1];
  long long v61 = (uint64_t *)(v60 & 0xFFFFFFFFFFFFFFFCLL);
  if (v60) {
    long long v61 = (uint64_t *)*v61;
  }
  sub_1881DF4((std::string **)v55 + 3, (long long *)v59, v61);
  uint64_t v62 = *(int *)sub_37B3A8((uint64_t)*a1);
  *(_DWORD *)(a2 + 24) |= 0x10u;
  *(void *)(a2 + 224) = v62;
  std::string::size_type v63 = sub_69510();
  long long v64 = (long long *)sub_68EB4((uint64_t)v63);
  *(_DWORD *)(a2 + 24) |= 1u;
  uint64_t v65 = *(void *)(a2 + 16);
  std::string::size_type v66 = (uint64_t *)(v65 & 0xFFFFFFFFFFFFFFFCLL);
  if (v65) {
    std::string::size_type v66 = (uint64_t *)*v66;
  }
  sub_1881DF4((std::string **)(a2 + 192), v64, v66);
  if (a1[18] != (void *)-1 && *((_DWORD *)a1 + 38) != -1)
  {
    int64_t v67 = (char *)a1[64] - (char *)a1[63];
    if (v67)
    {
      unint64_t v68 = 0;
      uint64_t v69 = v67 / 104;
      while (1)
      {
        uint64_t v70 = sub_C583AC(a1 + 63, v68);
        if (*(void **)(v70 + 16) == a1[18]) {
          break;
        }
        if (v69 == ++v68) {
          goto LABEL_91;
        }
      }
      long long v72 = *(_DWORD **)(a2 + 136);
      if (v72 && (uint64_t v73 = *(int *)(a2 + 128), (int)v73 < *v72))
      {
        *(_DWORD *)(a2 + 128) = v73 + 1;
        uint64_t v74 = *(void *)&v72[2 * v73 + 2];
        *(_DWORD *)(v74 + 16) |= 1u;
        uint64_t v75 = *(void *)(v74 + 24);
        if (!v75) {
          goto LABEL_82;
        }
      }
      else
      {
        sub_11BEDE0(*(void *)(a2 + 120));
        uint64_t v74 = sub_188CDC8(a2 + 120, v76);
        *(_DWORD *)(v74 + 16) |= 1u;
        uint64_t v75 = *(void *)(v74 + 24);
        if (!v75)
        {
LABEL_82:
          uint64_t v77 = *(void *)(v74 + 8);
          long long v78 = (void *)(v77 & 0xFFFFFFFFFFFFFFFCLL);
          if (v77) {
            long long v78 = (void *)*v78;
          }
          uint64_t v75 = sub_15C1918((uint64_t)v78);
          *(void *)(v74 + 24) = v75;
        }
      }
      LODWORD(v71) = *(_DWORD *)(v70 + 4);
      long double v79 = exp((double)v71 * -6.28318531 / 4294967300.0 + 3.14159265);
      long double v80 = atan((v79 + -1.0 / v79) * 0.5) * 57.2957795;
      int v81 = *(_DWORD *)(v75 + 40);
      *(_DWORD *)(v75 + 40) = v81 | 1;
      *(long double *)(v75 + 48) = v80;
      LODWORD(v80) = *(_DWORD *)v70;
      *(_DWORD *)(v75 + 40) = v81 | 3;
      *(double *)(v75 + 56) = (double)*(unint64_t *)&v80 * 360.0 / 4294967300.0 + -180.0;
      int v82 = *(unsigned __int8 *)(v70 + 100);
      *(_DWORD *)(v74 + 16) |= 4u;
      *(_DWORD *)(v74 + 40) = v82;
      uint64_t v83 = nullsub_1(*(void *)(v70 + 16));
      int v84 = *(_DWORD *)(v74 + 16);
      *(void *)(v74 + 32) = v83;
      *(_DWORD *)(v74 + 16) = v84 | 0xA;
      *(_DWORD *)(v74 + 44) = v68;
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)&__t);
        sub_188FC78(&__t, (uint64_t)"Micro A/B - Adding Special Access Point ", 40);
        nullsub_1(*(void *)(v70 + 16));
        std::ostream::operator<<();
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v154, 1u);
        if (SHIBYTE(v156) < 0) {
          operator delete(v154);
        }
        if (v146 < 0) {
          operator delete(v145);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
    }
  }
LABEL_91:
  if (*a1[4] == a1[4][1]) {
    goto LABEL_164;
  }
  sub_725D0((uint64_t)v160);
  int v85 = sub_69510();
  std::string::size_type v86 = (uint64_t **)*a1[4];
  int v87 = *v86;
  uint64_t v142 = v86[1];
  if (*v86 != v142)
  {
    uint64_t v88 = (uint64_t)v85;
    do
    {
      int v89 = sub_45FE24((uint64_t)v87);
      int v90 = v89;
      uint64_t v92 = *(char **)(a2 + 264);
      unint64_t v91 = *(void *)(a2 + 272);
      if (v92 != (char *)v91)
      {
        while (*(_DWORD *)v92 != v89)
        {
          v92 += 32;
          if (v92 == (char *)v91) {
            goto LABEL_100;
          }
        }
      }
      if (v92 == (char *)v91)
      {
LABEL_100:
        if (v91 >= *(void *)(a2 + 280))
        {
          int v93 = sub_3A6738((int64x2_t *)(a2 + 264));
        }
        else
        {
          *(_DWORD *)unint64_t v91 = -1;
          *(void *)(v91 + 16) = 0;
          *(void *)(v91 + 24) = 0;
          int v93 = (char *)(v91 + 32);
          *(void *)(v91 + 8) = 0;
        }
        *(void *)(a2 + 272) = v93;
        *((_DWORD *)v93 - 8) = v90;
        uint64_t v92 = v93 - 32;
      }
      unint64_t v94 = sub_45FC7C(v87);
      uint64_t v95 = *((void *)v92 + 1);
      uint64_t v96 = (void **)*((void *)v92 + 2);
      unint64_t v97 = 0x8E38E38E38E38E39 * (((uint64_t)v96 - v95) >> 3);
      if (v94 <= v97)
      {
        if (v94 < v97)
        {
          uint64_t v98 = (void **)(v95 + 72 * v94);
          if (v96 == v98)
          {
LABEL_108:
            *((void *)v92 + 2) = v98;
            goto LABEL_109;
          }
          while (2)
          {
            if (*((char *)v96 - 1) < 0)
            {
              operator delete(*(v96 - 3));
              uint64_t v110 = *(v96 - 6);
              if (v110)
              {
LABEL_123:
                *(v96 - 5) = v110;
                operator delete(v110);
              }
            }
            else
            {
              uint64_t v110 = *(v96 - 6);
              if (v110) {
                goto LABEL_123;
              }
            }
            uint64_t v111 = v96 - 9;
            int v112 = (char *)*(v96 - 9);
            if (v112)
            {
              std::string v113 = (char *)*(v96 - 8);
              long long v109 = *(v96 - 9);
              if (v113 != v112)
              {
                do
                {
                  int64_t v114 = (void *)*((void *)v113 - 6);
                  if (v114)
                  {
                    *((void *)v113 - 5) = v114;
                    operator delete(v114);
                  }
                  if (*(v113 - 57) < 0) {
                    operator delete(*((void **)v113 - 10));
                  }
                  v113 -= 80;
                }
                while (v113 != v112);
                long long v109 = *v111;
              }
              *(v96 - 8) = v112;
              operator delete(v109);
            }
            v96 -= 9;
            if (v111 == v98) {
              goto LABEL_108;
            }
            continue;
          }
        }
      }
      else
      {
        sub_3A88A4((char **)v92 + 1, v94 - v97);
      }
LABEL_109:
      char v99 = sub_68ECC(v88);
      if (a1[3]) {
        char v100 = 1;
      }
      else {
        char v100 = v99;
      }
      if ((v100 & 1) == 0 && !sub_45FE1C((uint64_t)v87) && *(unsigned char *)(sub_5231C((uint64_t)v87) + 36))
      {
        std::string v101 = (int *)sub_3750CC(*a1);
        unint64_t v102 = *(void *)sub_45FC68(v87);
        sub_47F868((char *)v87, (uint64_t)v101);
        std::string v103 = (void *)sub_45FC68(v87);
        sub_2D5D58((uint64_t)v101, *v103 & 0x1FFFFFFFFFFFFFFFLL);
        unint64_t v104 = v102 & 0xFFFFFFFFFFFFLL;
        uint64_t v105 = (int *)sub_2D5D58((uint64_t)v101, v102 & 0xFFFFFFFFFFFFLL);
        std::string v106 = (unsigned __int16 *)((char *)v105 - *v105);
        if (*v106 >= 0x41u && (uint64_t v107 = v106[32]) != 0) {
          std::string v108 = (unsigned int *)((char *)v105 + v107 + *(unsigned int *)((char *)v105 + v107));
        }
        else {
          std::string v108 = 0;
        }
        uint64_t v115 = (v102 >> 61) & 1;
        sub_3BD900(v108, (v102 & 0x2000000000000000) != 0, 1, (uint64_t)&__t);
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = __t.__d_.__rep_;
        if (__t.__d_.__rep_)
        {
          uint64_t v117 = v144;
          uint64_t v118 = (void *)__t.__d_.__rep_;
          if (__t.__d_.__rep_ != (void)v144)
          {
            do
            {
              if (*(char *)(v117 - 1) < 0) {
                operator delete(*(void **)(v117 - 24));
              }
              v117 -= 24;
            }
            while (v117 != rep);
            uint64_t v118 = (void *)__t.__d_.__rep_;
          }
          *(void *)&long long v144 = rep;
          operator delete(v118);
        }
        int v119 = (unsigned int *)sub_45FC68(v87);
        unint64_t v120 = sub_2E68E8((uint64_t)v101, (((unint64_t)(v119[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v119[1] << 32) | *v119) ^ 0x1000000000000);
        sub_3BDB4C(v101, v120, &v159);
        int v121 = sub_DBB1D4((uint64_t)a1[2]) >> 32;
        uint64_t v122 = (int *)sub_2D5D58((uint64_t)v101, v104);
        char v123 = (unsigned __int16 *)((char *)v122 - *v122);
        if (*v123 >= 0x41u && (uint64_t v124 = v123[32]) != 0) {
          uint64_t v125 = (unsigned int *)((char *)v122 + v124 + *(unsigned int *)((char *)v122 + v124));
        }
        else {
          uint64_t v125 = 0;
        }
        sub_3BD900(v125, v115, 1, (uint64_t)&v158);
        uint64_t v126 = (unsigned int *)sub_45FC68(v87);
        sub_3BDCD8((uint64_t)v101, *v126 | ((unint64_t)(v126[1] & 0x1FFFFFFF) << 32), &__t);
        uint64_t v127 = HIBYTE(v144);
        if (v144 < 0) {
          uint64_t v127 = v144;
        }
        if (v127) {
          sub_26A18((uint64_t)v157, (const char *)&__t);
        }
        else {
          sub_26908((uint64_t)v157);
        }
        if (SHIBYTE(v144) < 0) {
          operator delete((void *)__t.__d_.__rep_);
        }
        sub_480C((uint64_t)&__t, v121);
      }
      v87 += 15;
    }
    while (v87 != v142);
  }
  std::string::size_type v128 = sub_3C099C((BOOL *)&v154, (uint64_t)*a1);
  char v129 = a1[5];
  char v130 = (uint64_t *)*a1[4];
  unint64_t v131 = *a1;
  __t.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)a1[1];
  sub_3C09A0((uint64_t)v128, v130, v129, v131, &__t.__d_.__rep_, v140);
  uint64_t v132 = *(void *)(a2 + 112);
  if (v132) {
    uint64_t v133 = (uint64_t *)(v132 + 8);
  }
  else {
    uint64_t v133 = 0;
  }
  uint64_t v134 = *(int *)(a2 + 104);
  if (v134)
  {
    int v135 = 0;
    uint64_t v136 = 8 * v134;
    do
    {
      v135 += sub_11B0050(*v133++);
      v136 -= 8;
    }
    while (v136);
    uint64_t v137 = v135;
  }
  else
  {
    uint64_t v137 = 0;
  }
  *(void *)(a2 + 344) = v137;
LABEL_164:
  sub_C585EC(v140);
  *(void *)(a2 + 296) = sub_11B2D2C(v140);
  *(double *)(a2 + 288) = round(sub_72688((uint64_t)v153));
  *(unsigned char *)(a2 + 352) = v141;
  *(unsigned char *)(a2 + 390) = *(unsigned char *)(a2 + 233);
  if (v152 < 0) {
    operator delete(v151[0]);
  }
}

void sub_C5BAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  sub_C5C310(&a14);
  sub_C5C10C(v55);
  if (a55 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL sub_C5BBDC(void *a1)
{
  uint64_t v1 = a1[1];
  if (a1[2] != v1)
  {
    unint64_t v2 = a1[4];
    unsigned int v3 = (uint64_t *)(v1 + 8 * (v2 >> 7));
    uint64_t v4 = *v3;
    uint64_t v5 = *v3 + 32 * (v2 & 0x7F);
    uint64_t v6 = *(void *)(v1 + (((a1[5] + v2) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((a1[5] + v2) & 0x7F);
    while (v5 != v6)
    {
      BOOL result = *(unsigned char *)(v5 + 16) != 0;
      if (*(unsigned char *)(v5 + 16)) {
        return result;
      }
      v5 += 32;
      if (v5 - v4 == 4096)
      {
        uint64_t v8 = v3[1];
        ++v3;
        uint64_t v4 = v8;
        uint64_t v5 = v8;
      }
    }
  }
  return 0;
}

BOOL sub_C5BC54(void *a1, int a2, int a3)
{
  int v6 = a3;
  int v7 = a2;
  if (!a1[5]) {
    return 1;
  }
  char v5 = 0;
  v4[0] = &v7;
  v4[1] = &v6;
  v4[2] = &v5;
  sub_C5BE00(a1, (uint64_t)v4);
  return v5 != 0;
}

uint64_t sub_C5BCB8(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v4, "Bad optional access.");
    unsigned int v3 = (void *)sub_2F404((uint64_t)exception, &v4);
  }
  return result;
}

void sub_C5BD2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_C5BD5C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v4, "Bad optional access.");
    unsigned int v3 = (void *)sub_2F404((uint64_t)exception, &v4);
  }
  return result;
}

void sub_C5BDD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_C5BE00(void *result, uint64_t a2)
{
  uint64_t v2 = result[1];
  if (result[2] != v2)
  {
    unint64_t v3 = result[4];
    long long v4 = (void *)(v2 + 8 * (v3 >> 7));
    char v5 = (_DWORD *)(*v4 + 32 * (v3 & 0x7F));
    uint64_t v6 = *(void *)(v2 + (((result[5] + v3) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((result[5] + v3) & 0x7F);
    if (v5 != (_DWORD *)v6)
    {
      uint64_t v8 = v5 + 8;
      int v9 = (void *)(v2 + 8 * (v3 >> 7));
      if ((_DWORD *)((char *)v5 - *v4 + 32) == &stru_FF0.dylib.current_version)
      {
        int v9 = v4 + 1;
        uint64_t v8 = (_DWORD *)v4[1];
      }
      while (1)
      {
        if (v8 == (_DWORD *)v6) {
          return result;
        }
        int v10 = 10 * (*v5 - *v8);
        int v11 = **(_DWORD **)a2;
        int v12 = sub_4F44(v5 + 1);
        uint64_t result = (void *)sub_4F44(v8 + 1);
        if (**(_DWORD **)(a2 + 8) >= (int)fabs((double)(v12 - (int)result)) && v10 <= v11)
        {
          v8 += 8;
          if ((_DWORD *)((char *)v8 - *v9) != &stru_FF0.dylib.current_version) {
            goto LABEL_11;
          }
LABEL_14:
          unint64_t v14 = (_DWORD *)v9[1];
          ++v9;
          uint64_t v8 = v14;
          v5 += 8;
          if ((_DWORD *)((char *)v5 - *v4) == &stru_FF0.dylib.current_version) {
            goto LABEL_15;
          }
        }
        else
        {
          **(unsigned char **)(a2 + 16) = 1;
          v8 += 8;
          if ((_DWORD *)((char *)v8 - *v9) == &stru_FF0.dylib.current_version) {
            goto LABEL_14;
          }
LABEL_11:
          v5 += 8;
          if ((_DWORD *)((char *)v5 - *v4) == &stru_FF0.dylib.current_version)
          {
LABEL_15:
            uint64_t v15 = (_DWORD *)v4[1];
            ++v4;
            char v5 = v15;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_C5BF6C(uint64_t a1)
{
  long long v4 = (void **)(a1 + 5904);
  sub_3A6108(&v4);
  uint64_t v2 = *(void **)(a1 + 5320);
  if (v2)
  {
    *(void *)(a1 + 5328) = v2;
    operator delete(v2);
  }
  sub_3A6230((void *)(a1 + 40));
  return a1;
}

uint64_t sub_C5BFC4(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v4, "Bad optional access.");
    unint64_t v3 = (void *)sub_2F404((uint64_t)exception, &v4);
  }
  return result;
}

void sub_C5C038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_C5C068(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v4, "Bad optional access.");
    unint64_t v3 = (void *)sub_2F404((uint64_t)exception, &v4);
  }
  return result;
}

void sub_C5C0DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_C5C10C(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void *)(a1 + 264);
    if (v2)
    {
      sub_C5C1FC(a1 + 264, v2);
      operator delete(*(void **)(a1 + 264));
    }
    uint64_t v3 = *(void *)(a1 + 240);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 248);
      char v5 = *(void **)(a1 + 240);
      if (v4 != v3)
      {
        do
          uint64_t v4 = sub_11C6DFC(v4 - 64);
        while (v4 != v3);
        char v5 = *(void **)(a1 + 240);
      }
      *(void *)(a1 + 248) = v3;
      operator delete(v5);
    }
    sub_11B1868(a1 + 8);
    return a1;
  }
  uint64_t v7 = *(void *)(a1 + 24);
  if (!v7) {
    return a1;
  }
  uint64_t v8 = *(void *)(a1 + 32);
  int v9 = *(void **)(a1 + 24);
  if (v8 != v7)
  {
    do
    {
      if (*(char *)(v8 - 1) < 0) {
        operator delete(*(void **)(v8 - 24));
      }
      v8 -= 32;
    }
    while (v8 != v7);
    int v9 = *(void **)(a1 + 24);
  }
  *(void *)(a1 + 32) = v7;
  operator delete(v9);
  return a1;
}

void sub_C5C1FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 != a2)
  {
    while (1)
    {
      uint64_t v6 = *(void ***)(v4 - 24);
      if (!v6) {
        goto LABEL_5;
      }
      uint64_t v7 = *(void ***)(v4 - 16);
      char v5 = *(void **)(v4 - 24);
      if (v7 != v6) {
        break;
      }
LABEL_4:
      *(void *)(v4 - 16) = v6;
      operator delete(v5);
LABEL_5:
      v4 -= 32;
      if (v4 == a2) {
        goto LABEL_2;
      }
    }
    while ((*((char *)v7 - 1) & 0x80000000) == 0)
    {
      int v9 = *(v7 - 6);
      if (v9) {
        goto LABEL_14;
      }
LABEL_15:
      int v10 = v7 - 9;
      int v11 = (char *)*(v7 - 9);
      if (v11)
      {
        int v12 = (char *)*(v7 - 8);
        uint64_t v8 = *(v7 - 9);
        if (v12 != v11)
        {
          do
          {
            int v13 = (void *)*((void *)v12 - 6);
            if (v13)
            {
              *((void *)v12 - 5) = v13;
              operator delete(v13);
            }
            if (*(v12 - 57) < 0) {
              operator delete(*((void **)v12 - 10));
            }
            v12 -= 80;
          }
          while (v12 != v11);
          uint64_t v8 = *v10;
        }
        *(v7 - 8) = v11;
        operator delete(v8);
      }
      v7 -= 9;
      if (v10 == v6)
      {
        char v5 = *(void **)(v4 - 24);
        goto LABEL_4;
      }
    }
    operator delete(*(v7 - 3));
    int v9 = *(v7 - 6);
    if (!v9) {
      goto LABEL_15;
    }
LABEL_14:
    *(v7 - 5) = v9;
    operator delete(v9);
    goto LABEL_15;
  }
LABEL_2:
  *(void *)(a1 + 8) = a2;
}

void *sub_C5C310(void *a1)
{
  uint64_t v2 = (void *)a1[16];
  if (v2)
  {
    a1[17] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[13];
  if (v3)
  {
    a1[14] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_C5C354(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v4, "Bad optional access.");
    uint64_t v3 = (void *)sub_2F404((uint64_t)exception, &v4);
  }
  return result;
}

void sub_C5C3C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_C5C3F8(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v4, "Bad optional access.");
    uint64_t v3 = (void *)sub_2F404((uint64_t)exception, &v4);
  }
  return result;
}

void sub_C5C46C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_C5C49C()
{
  byte_25E01E7 = 1;
  word_25E01D0 = 65;
  byte_25E01FF = 1;
  word_25E01E8 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25E0290 = 0u;
  *(_OWORD *)&qword_25E02A0 = 0u;
  dword_25E02B0 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E0290, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E0290, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25E0290, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E0290, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E0217 = 8;
  strcpy((char *)&qword_25E0200, "any_mode");
  byte_25E022F = 7;
  strcpy((char *)&dword_25E0218, "cycling");
  byte_25E0247 = 7;
  strcpy((char *)&dword_25E0230, "driving");
  byte_25E025F = 7;
  strcpy((char *)&dword_25E0248, "walking");
  qword_25E0268 = 0;
  qword_25E0270 = 0;
  qword_25E0260 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25E0260 = (uint64_t)v0;
  qword_25E0268 = (uint64_t)(v0 + 9);
  qword_25E0270 = (uint64_t)(v0 + 9);
  qword_25E0278 = 0;
  qword_25E0280 = 0;
  unk_25E0288 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25E0280 = (uint64_t)(v1 + 9);
  unk_25E0288 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25E0278 = (uint64_t)v1;
  return result;
}

void sub_C5C764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E02A0) {
    sub_20AECA0((void **)qword_25E02A0);
  }
  uint64_t v37 = (void *)xmmword_25E0290;
  *(void *)&xmmword_25E0290 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_C5C804(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v13);
  *(unsigned char *)a2 = 1;
  *(void *)(a2 + 8) = 0;
  sub_C5C918((unint64_t)a1, a2);
  if (*(unsigned char *)a2)
  {
    unint64_t v5 = a1[11];
    unint64_t v4 = a1[12];
    if (v4 >= v5
      && ((unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1[9] + 8) - *(void *)a1[9]) >> 3),
           unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1[10] + 8) - *(void *)a1[10]) >> 3),
           v6 <= v4)
        ? (BOOL v8 = v6 > v7)
        : (BOOL v8 = 0),
          !v8 && (v6 <= v5 ? (BOOL v9 = v7 > v4) : (BOOL v9 = 1), v9)))
    {
      v17.n128_u64[0] = 9;
      v17.n128_u64[1] = (unint64_t)&off_2439090;
      sub_3E7814(v14, &v17);
      uint64_t v10 = v15;
      int v11 = v16;
      __n128 v12 = v14[1];
      *(__n128 *)(a2 + 8) = v14[0];
      *(__n128 *)(a2 + 24) = v12;
      *(void *)(a2 + 40) = v10;
      *(_DWORD *)(a2 + 48) = v11;
      *(unsigned char *)a2 = 0;
    }
    else
    {
      *(void *)(a2 + 8) = vcvtad_u64_f64(sub_72688((uint64_t)v13));
    }
  }
}

void sub_C5C904(_Unwind_Exception *a1)
{
  sub_C5C9E0(v1);
  _Unwind_Resume(a1);
}

double sub_C5C918(unint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a2)
  {
    if (*(unsigned char *)(a1 + 17))
    {
      unint64_t v4 = *(unsigned int ***)(a1 + 8);
      uint64_t v5 = sub_3750CC(*(void **)a1);
      unint64_t v7 = *v4;
      BOOL v8 = v4[1];
      v12[0].n128_u64[0] = v5;
      v12[0].n128_u64[1] = a1;
      if (v7 != v8)
      {
        while (!sub_C5CA70((uint64_t *)v12, v7))
        {
          v7 += 94;
          if (v7 == v8) {
            return result;
          }
        }
        v15.n128_u64[0] = 16;
        v15.n128_u64[1] = (unint64_t)&off_2439090;
        sub_3E7814(v12, &v15);
        uint64_t v9 = v13;
        int v10 = v14;
        double result = v12[0].n128_f64[0];
        __n128 v11 = v12[1];
        *(__n128 *)(a2 + 8) = v12[0];
        *(__n128 *)(a2 + 24) = v11;
        *(void *)(a2 + 40) = v9;
        *(_DWORD *)(a2 + 48) = v10;
        *(unsigned char *)a2 = 0;
      }
    }
  }
  return result;
}

uint64_t sub_C5C9E0(uint64_t result)
{
  uint64_t v1 = result;
  if (!*(unsigned char *)result)
  {
    uint64_t v2 = *(void *)(result + 24);
    if (v2)
    {
      uint64_t v3 = *(void *)(result + 32);
      unint64_t v4 = *(void **)(result + 24);
      if (v3 != v2)
      {
        do
        {
          if (*(char *)(v3 - 1) < 0) {
            operator delete(*(void **)(v3 - 24));
          }
          v3 -= 32;
        }
        while (v3 != v2);
        unint64_t v4 = *(void **)(v1 + 24);
      }
      *(void *)(v1 + 32) = v2;
      operator delete(v4);
      return v1;
    }
  }
  return result;
}

BOOL sub_C5CA70(uint64_t *a1, unsigned int *a2)
{
  uint64_t v3 = *a1;
  sub_4071CC(*a1, a2, 1u, 1000000, (uint64_t)sub_29C8, (char **)&__p);
  unint64_t v4 = __p;
  if (__p != v28)
  {
    sub_3D63DC(v3, *((void *)__p + 1), &v24);
    unint64_t v4 = __p;
    if (!__p) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  if (__p)
  {
LABEL_3:
    uint64_t v28 = v4;
    operator delete(v4);
  }
LABEL_4:
  uint64_t v5 = a1[1];
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = *(void *)(v5 + 32);
  if (v6 == v7)
  {
LABEL_22:
    if (!*(unsigned char *)(v5 + 16))
    {
LABEL_45:
      BOOL v20 = 1;
      goto LABEL_46;
    }
  }
  else
  {
    if (v26 >= 0) {
      uint64_t v8 = HIBYTE(v26);
    }
    else {
      uint64_t v8 = v25;
    }
    if (v26 >= 0) {
      uint64_t v9 = (unsigned __int8 *)&v24;
    }
    else {
      uint64_t v9 = (unsigned __int8 *)v24;
    }
    do
    {
      uint64_t v10 = *(unsigned __int8 *)(v6 + 23);
      if ((v10 & 0x80u) == 0) {
        uint64_t v11 = *(unsigned __int8 *)(v6 + 23);
      }
      else {
        uint64_t v11 = *(void *)(v6 + 8);
      }
      if (v11 == v8)
      {
        if ((v10 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v6, v9, *(void *)(v6 + 8))) {
            goto LABEL_22;
          }
        }
        else
        {
          if (!*(unsigned char *)(v6 + 23)) {
            goto LABEL_22;
          }
          uint64_t v12 = 0;
          while (*(unsigned __int8 *)(v6 + v12) == v9[v12])
          {
            if (v10 == ++v12) {
              goto LABEL_22;
            }
          }
        }
      }
      v6 += 24;
    }
    while (v6 != v7);
    uint64_t v6 = v7;
    if (!*(unsigned char *)(v5 + 16)) {
      goto LABEL_45;
    }
  }
  uint64_t v14 = *(void *)(v5 + 48);
  uint64_t v13 = *(void *)(v5 + 56);
  if (v14 != v13)
  {
    if (v26 >= 0) {
      uint64_t v15 = HIBYTE(v26);
    }
    else {
      uint64_t v15 = v25;
    }
    if (v26 >= 0) {
      int v16 = (unsigned __int8 *)&v24;
    }
    else {
      int v16 = (unsigned __int8 *)v24;
    }
    do
    {
      uint64_t v17 = *(unsigned __int8 *)(v14 + 23);
      if ((v17 & 0x80u) == 0) {
        uint64_t v18 = *(unsigned __int8 *)(v14 + 23);
      }
      else {
        uint64_t v18 = *(void *)(v14 + 8);
      }
      if (v18 == v15)
      {
        if ((v17 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v14, v16, *(void *)(v14 + 8))) {
            goto LABEL_41;
          }
        }
        else
        {
          if (!*(unsigned char *)(v14 + 23)) {
            goto LABEL_41;
          }
          uint64_t v19 = 0;
          while (*(unsigned __int8 *)(v14 + v19) == v16[v19])
          {
            if (v17 == ++v19) {
              goto LABEL_41;
            }
          }
        }
      }
      v14 += 24;
    }
    while (v14 != v13);
    uint64_t v14 = v13;
  }
LABEL_41:
  BOOL v20 = v14 == v13;
LABEL_46:
  uint64_t v21 = HIBYTE(v26);
  if (v26 < 0) {
    uint64_t v21 = v25;
  }
  if (v6 != v7) {
    BOOL v20 = 0;
  }
  if (v21) {
    BOOL v22 = v20;
  }
  else {
    BOOL v22 = 0;
  }
  if (SHIBYTE(v26) < 0) {
    operator delete(v24);
  }
  return v22;
}

void sub_C5CC8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_C5CCA8()
{
  unk_25E02CF = 16641;
  word_25E02B8 = 65;
  byte_25E02E7 = 1;
  byte_25E02D1 = 0;
  byte_25E02FF = 8;
  strcpy((char *)&qword_25E02E8, "any_mode");
  byte_25E0317 = 7;
  strcpy((char *)&dword_25E0300, "cycling");
  byte_25E032F = 7;
  strcpy((char *)&dword_25E0318, "driving");
  byte_25E0347 = 7;
  strcpy((char *)&dword_25E0330, "walking");
  byte_25E035F = 21;
  strcpy((char *)&xmmword_25E0348, "enable_coverage_check");
  byte_25E0377 = 14;
  strcpy((char *)&qword_25E0360, "default_region");
  byte_25E038F = 17;
  strcpy((char *)&xmmword_25E0378, "supported_regions");
  byte_25E03A7 = 17;
  strcpy(algn_25E0390, "preflight_regions");
  qword_25E03A8 = (uint64_t)operator new(0x19uLL);
  *(_OWORD *)algn_25E03B0 = xmmword_20B9250;
  strcpy((char *)qword_25E03A8, "supported_country_codes");
  double result = (char *)operator new(0x19uLL);
  qword_25E03C0 = (uint64_t)result;
  xmmword_25E03C8 = xmmword_20B9250;
  strcpy(result, "preflight_country_codes");
  return result;
}

void sub_C5CE5C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v27);
  if (!*(unsigned char *)(a1 + 18))
  {
    __n128 v32 = 0u;
    long long v33 = 0u;
    uint64_t v7 = *(__n128 **)(a1 + 8);
    if (&v32 != v7) {
LABEL_8:
    }
      sub_C5E9FC((uint64_t *)&v32, v7->n128_u64[0], v7->n128_i64[1], 0x51B3BEA3677D46CFLL * ((uint64_t)(v7->n128_u64[1] - v7->n128_u64[0]) >> 3));
LABEL_9:
    unint64_t v8 = vcvtad_u64_f64(sub_72688((uint64_t)v27));
    *(unsigned char *)a2 = 1;
    *(__n128 *)(a2 + 8) = v32;
    *(void *)(a2 + 24) = v33;
    *(void *)(a2 + 32) = v8;
    return;
  }
  if (!*(unsigned char *)(a1 + 16))
  {
    if (sub_C5D370((unint64_t *)a1, *(uint64_t ***)(a1 + 8)))
    {
      v31[0].n128_u64[0] = 16;
      v31[0].n128_u64[1] = (unint64_t)&off_2439090;
      sub_3E7814(&v32, v31);
      *(unsigned char *)a2 = 0;
      long long v16 = v33;
      *(__n128 *)(a2 + 8) = v32;
      *(_OWORD *)(a2 + 24) = v16;
      *(void *)(a2 + 40) = v34;
      *(_DWORD *)(a2 + 48) = v35;
      return;
    }
    __n128 v32 = 0u;
    long long v33 = 0u;
    uint64_t v7 = *(__n128 **)(a1 + 8);
    if (&v32 != v7) {
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  unint64_t v4 = *(uint64_t ***)(a1 + 8);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 != v6)
  {
    while (*((_DWORD *)v5 + 26))
    {
      v5 += 47;
      if (v5 == v6) {
        goto LABEL_11;
      }
    }
  }
  if (v5 == v6)
  {
LABEL_11:
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7190, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_24F7190))
    {
      sub_737C74((uint64_t)&qword_24F7018);
      __cxa_guard_release(&qword_24F7190);
    }
    uint64_t v5 = &qword_24F7018;
  }
  sub_48381C((uint64_t)v31, (uint64_t)v5);
  if (sub_DAA288((uint64_t)v31))
  {
    *(_OWORD *)int v29 = 0u;
    long long v30 = 0u;
    uint64_t v9 = *(void *)(a1 + 8);
    if (v29 == (void **)v9) {
      goto LABEL_39;
    }
    sub_C5E9FC((uint64_t *)v29, *(void *)v9, *(void *)(v9 + 8), 0x51B3BEA3677D46CFLL * ((uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 3));
    uint64_t v10 = v29[0];
    uint64_t v11 = v29[1];
    if (v29[0] == v29[1]) {
      goto LABEL_39;
    }
    do
    {
      if (v10[26] == 1)
      {
        sub_48381C((uint64_t)&v32, (uint64_t)v31);
        sub_48381C((uint64_t)v36, (uint64_t)v10);
        sub_483E44(&__p, (uint64_t)&v32, 2uLL);
        int v12 = sub_C5D370((unint64_t *)a1, (uint64_t **)&__p);
        unint64_t v13 = __p.n128_u64[0];
        if (__p.n128_u64[0])
        {
          uint64_t v14 = __p.n128_i64[1];
          uint64_t v15 = (void *)__p.n128_u64[0];
          if (__p.n128_u64[1] != __p.n128_u64[0])
          {
            do
              uint64_t v14 = sub_402C7C(v14 - 376);
            while (v14 != v13);
            uint64_t v15 = (void *)__p.n128_u64[0];
          }
          __p.n128_u64[1] = v13;
          operator delete(v15);
        }
        sub_402C7C((uint64_t)v36);
        sub_402C7C((uint64_t)&v32);
        if (v12) {
          sub_DAA2C8((uint64_t)v10);
        }
      }
      v10 += 94;
    }
    while (v10 != v11);
    uint64_t v18 = v29[0];
    uint64_t v19 = v29[1];
    if (v29[0] == v29[1]) {
      goto LABEL_39;
    }
    do
    {
      BOOL v20 = sub_DAA288((uint64_t)v18);
      BOOL v21 = v18[26] == 1 && v20;
      if (v21) {
        break;
      }
      v18 += 94;
    }
    while (v18 != v19);
    if (!v21)
    {
LABEL_39:
      __p.n128_u64[0] = 16;
      __p.n128_u64[1] = (unint64_t)&off_2439090;
      sub_3E7814(&v32, &__p);
      *(unsigned char *)a2 = 0;
      long long v23 = v33;
      *(__n128 *)(a2 + 8) = v32;
      *(_OWORD *)(a2 + 24) = v23;
      *(void *)(a2 + 40) = v34;
      *(_DWORD *)(a2 + 48) = v35;
      uint64_t v24 = v29[0];
      if (v29[0])
      {
        uint64_t v25 = v29[1];
        uint64_t v26 = v29[0];
        if (v29[1] != v29[0])
        {
          do
            uint64_t v25 = (void *)sub_402C7C((uint64_t)v25 - 376);
          while (v25 != v24);
          uint64_t v26 = v29[0];
        }
        v29[1] = v24;
        operator delete(v26);
      }
    }
    else
    {
      unint64_t v22 = vcvtad_u64_f64(sub_72688((uint64_t)v27));
      *((void *)&v30 + 1) = v22;
      *(unsigned char *)a2 = 1;
      *(_OWORD *)(a2 + 8) = *(_OWORD *)v29;
      *(void *)(a2 + 24) = v30;
      *(void *)(a2 + 32) = v22;
    }
  }
  else
  {
    v29[0] = &def_332C + 1;
    v29[1] = &off_2439090;
    sub_3E7814(&v32, (__n128 *)v29);
    *(unsigned char *)a2 = 0;
    long long v17 = v33;
    *(__n128 *)(a2 + 8) = v32;
    *(_OWORD *)(a2 + 24) = v17;
    *(void *)(a2 + 40) = v34;
    *(_DWORD *)(a2 + 48) = v35;
  }
  sub_402C7C((uint64_t)v31);
}

void sub_C5D294(_Unwind_Exception *a1)
{
}

void sub_C5D2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_401F88(&a69);
  _Unwind_Resume(a1);
}

void sub_C5D2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void *);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  sub_401F88((void **)va);
  sub_402C7C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_C5D370(unint64_t *a1, uint64_t **a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = sub_3750CC((void *)*a1);
  uint64_t v56 = v3;
  uint64_t v5 = *a2;
  uint64_t v54 = a2[1];
  if (*a2 != v54)
  {
    uint64_t v53 = v4;
    uint64_t v55 = v3;
    while (1)
    {
      uint64_t v7 = *v5;
      int v61 = *((_DWORD *)v5 + 2);
      uint64_t v60 = v7;
      sub_4071CC(v53, (unsigned int *)&v60, 1u, 1000000, (uint64_t)sub_29C8, (char **)&__p);
      unint64_t v8 = (unint64_t *)__p;
      if (__p != v65) {
        break;
      }
      std::string::size_type v57 = 0;
      uint64_t v58 = 0;
      uint64_t v59 = 0;
      if (__p) {
        goto LABEL_9;
      }
LABEL_10:
      uint64_t v9 = (void *)v3[3];
      uint64_t v10 = (void *)v3[4];
      if (v9 == v10)
      {
LABEL_28:
        if (*((unsigned char *)v3 + 17)) {
          goto LABEL_29;
        }
      }
      else
      {
        if (v59 >= 0) {
          uint64_t v11 = HIBYTE(v59);
        }
        else {
          uint64_t v11 = v58;
        }
        if (v59 >= 0) {
          uint64_t v12 = (unsigned __int8 *)&v57;
        }
        else {
          uint64_t v12 = (unsigned __int8 *)v57;
        }
        do
        {
          uint64_t v13 = *((unsigned __int8 *)v9 + 23);
          if ((v13 & 0x80u) == 0) {
            uint64_t v14 = *((unsigned __int8 *)v9 + 23);
          }
          else {
            uint64_t v14 = v9[1];
          }
          if (v14 == v11)
          {
            if ((v13 & 0x80) != 0)
            {
              if (!memcmp((const void *)*v9, v12, v9[1])) {
                goto LABEL_28;
              }
            }
            else
            {
              if (!*((unsigned char *)v9 + 23)) {
                goto LABEL_28;
              }
              uint64_t v15 = 0;
              while (*((unsigned __int8 *)v9 + v15) == v12[v15])
              {
                if (v13 == ++v15) {
                  goto LABEL_28;
                }
              }
            }
          }
          v9 += 3;
        }
        while (v9 != v10);
        uint64_t v9 = v10;
        if (*((unsigned char *)v3 + 17))
        {
LABEL_29:
          long long v16 = (void *)v3[9];
          long long v17 = (void *)v3[10];
          if (v16 != v17)
          {
            if (v59 >= 0) {
              uint64_t v18 = HIBYTE(v59);
            }
            else {
              uint64_t v18 = v58;
            }
            if (v59 >= 0) {
              uint64_t v19 = (unsigned __int8 *)&v57;
            }
            else {
              uint64_t v19 = (unsigned __int8 *)v57;
            }
            do
            {
              uint64_t v20 = *((unsigned __int8 *)v16 + 23);
              if ((v20 & 0x80u) == 0) {
                uint64_t v21 = *((unsigned __int8 *)v16 + 23);
              }
              else {
                uint64_t v21 = v16[1];
              }
              if (v21 == v18)
              {
                if ((v20 & 0x80) != 0)
                {
                  if (!memcmp((const void *)*v16, v19, v16[1])) {
                    goto LABEL_47;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v16 + 23)) {
                    goto LABEL_47;
                  }
                  uint64_t v22 = 0;
                  while (*((unsigned __int8 *)v16 + v22) == v19[v22])
                  {
                    if (v20 == ++v22) {
                      goto LABEL_47;
                    }
                  }
                }
              }
              v16 += 3;
            }
            while (v16 != v17);
            long long v16 = v17;
          }
LABEL_47:
          BOOL v23 = v16 != v17;
          goto LABEL_52;
        }
      }
      BOOL v23 = 0;
LABEL_52:
      uint64_t v24 = 0;
      uint64_t v25 = HIBYTE(v59);
      char v26 = HIBYTE(v59);
      if (v59 < 0) {
        uint64_t v25 = v58;
      }
      if (v25) {
        BOOL v27 = v9 == v10;
      }
      else {
        BOOL v27 = 0;
      }
      if (!v27 || v23) {
        goto LABEL_109;
      }
      uint64_t v28 = sub_3775DC((void *)*v3);
      sub_518C8(v60 >> 17, HIDWORD(v60) >> 17);
      unsigned int v30 = v29 | 0x40000000;
      uint64_t v31 = v28 + 16;
      do
      {
        unsigned int v32 = v30;
        LODWORD(v62) = v30;
        LODWORD(v66) = 1;
        __n128 __p = &v66;
        uint64_t v65 = (unint64_t *)&v62;
        unint64_t v33 = *(void *)(v28 + 3856) + 1;
        *(void *)(v28 + 3856) = v33;
        if (!*(void *)v28)
        {
LABEL_61:
          sub_C5DCE4((int **)&__p);
          goto LABEL_62;
        }
        if (*(_DWORD *)(v28 + 2416) == v30)
        {
          unsigned int v34 = 100;
          goto LABEL_72;
        }
        if (*(_DWORD *)(v28 + 2440) == v30)
        {
          unsigned int v34 = 101;
          goto LABEL_72;
        }
        if (*(_DWORD *)(v28 + 2464) == v30)
        {
          unsigned int v34 = 102;
          goto LABEL_72;
        }
        if (*(_DWORD *)(v28 + 2488) == v30)
        {
          unsigned int v34 = 103;
LABEL_72:
          ++*(void *)(v28 + 3864);
          uint64_t v35 = v31 + 24 * v34;
          *(void *)(v35 + 8) = v33;
          int v36 = *(unsigned int **)(v35 + 16);
          if (!v36) {
            goto LABEL_61;
          }
          goto LABEL_73;
        }
        unint64_t v43 = *(void *)(v28 + 2472);
        unint64_t v44 = *(void *)(v28 + 2448);
        unint64_t v45 = *(void *)(v28 + 2424);
        unint64_t v46 = *(void *)(v28 + 2496);
        int v36 = (unsigned int *)sub_2AB884(*(void *)v28, 25, v30, 1);
        if (v45 >= v33) {
          unint64_t v47 = v33;
        }
        else {
          unint64_t v47 = v45;
        }
        int v48 = 100;
        if (v45 >= v33) {
          int v48 = 0;
        }
        if (v44 < v47)
        {
          unint64_t v47 = v44;
          int v48 = 101;
        }
        if (v43 < v47)
        {
          int v48 = 102;
          unint64_t v47 = v43;
        }
        BOOL v49 = v46 >= v47;
        unsigned int v50 = 103;
        if (v49) {
          unsigned int v50 = v48;
        }
        uint64_t v51 = v31 + 24 * v50;
        *(_DWORD *)uint64_t v51 = v62;
        *(void *)(v51 + 8) = *(void *)(v28 + 3856);
        *(void *)(v51 + 16) = v36;
        if (!v36) {
          goto LABEL_61;
        }
LABEL_73:
        uint64_t v37 = (unsigned __int16 *)((char *)v36 + *v36 - *(unsigned int *)((char *)v36 + *v36));
        if (*v37 < 5u || !v37[2]) {
          goto LABEL_62;
        }
        sub_C5D8F4(v28, v32, (uint64_t)&__p);
        uint64_t v38 = (unint64_t *)__p;
        char v39 = v65;
        uint64_t v62 = v55;
        if (__p == v65)
        {
LABEL_78:
          sub_C5DA24(v28, v32, (uint64_t)&v62);
          uint64_t v41 = v62;
          int v40 = v63;
          if (v62 != v63)
          {
            do
            {
              unint64_t v66 = *v41;
              if (sub_C5DF10((void ***)&v56, v66) && (sub_C5E3FC(v28, &v66, &v60) & 1) != 0)
              {
                int v42 = 1;
                uint64_t v41 = v62;
                if (v62) {
                  goto LABEL_102;
                }
                goto LABEL_103;
              }
              ++v41;
            }
            while (v41 != v40);
            int v42 = 0;
            uint64_t v41 = v62;
            if (!v62) {
              goto LABEL_103;
            }
LABEL_102:
            std::string::size_type v63 = v41;
            operator delete(v41);
            goto LABEL_103;
          }
          int v42 = 0;
          if (v62) {
            goto LABEL_102;
          }
        }
        else
        {
          while (!sub_C5DF10((void ***)&v62, *v38))
          {
            if (++v38 == v39) {
              goto LABEL_78;
            }
          }
          int v42 = 1;
        }
LABEL_103:
        if (__p)
        {
          uint64_t v65 = (unint64_t *)__p;
          operator delete(__p);
        }
        if (v42)
        {
          uint64_t v24 = 0;
          goto LABEL_108;
        }
LABEL_62:
        unsigned int v30 = v32 >> 2;
      }
      while (v32 > 3);
      uint64_t v24 = 1;
LABEL_108:
      char v26 = HIBYTE(v59);
      uint64_t v3 = v55;
LABEL_109:
      if (v26 < 0) {
        operator delete(v57);
      }
      v5 += 47;
      if (v5 == v54) {
        int v6 = 1;
      }
      else {
        int v6 = v24;
      }
      if (v6 == 1) {
        return v24;
      }
    }
    sub_3D63DC(v53, *((void *)__p + 1), &v57);
    unint64_t v8 = (unint64_t *)__p;
    if (!__p) {
      goto LABEL_10;
    }
LABEL_9:
    uint64_t v65 = v8;
    operator delete(v8);
    goto LABEL_10;
  }
  return 0;
}

void sub_C5D868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_C5D8F4@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  double result = sub_C5DB54(a1, a2, 1);
  if (result
    && (uint64_t v5 = &result[-*(int *)result], *(unsigned __int16 *)v5 >= 5u)
    && (uint64_t v6 = *((unsigned __int16 *)v5 + 2)) != 0)
  {
    uint64_t v7 = &result[v6 + *(unsigned int *)&result[v6]];
    unint64_t v8 = &v7[-*(int *)v7];
    if (*(unsigned __int16 *)v8 >= 7u
      && (uint64_t v9 = *((unsigned __int16 *)v8 + 3)) != 0
      && (uint64_t v10 = &v7[v9 + *(unsigned int *)&v7[v9]], v11 = *(unsigned int *)v10, v11))
    {
      uint64_t v12 = v11;
      uint64_t v13 = operator new(8 * v11);
      *(void *)&long long v17 = v13;
      *((void *)&v17 + 1) = v13;
      uint64_t v18 = &v13[v12];
      uint64_t v14 = (uint64_t *)(v10 + 4);
      do
      {
        uint64_t v19 = *v14;
        double result = sub_2A8034((unint64_t *)&v17, v13, &v19);
        uint64_t v13 = result + 8;
        ++v14;
        --v12;
      }
      while (v12 * 8);
      long long v15 = v17;
      long long v16 = v18;
    }
    else
    {
      long long v16 = 0;
      long long v15 = 0uLL;
    }
    *(_OWORD *)a3 = v15;
    *(void *)(a3 + 16) = v16;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_C5DA08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_C5DA24@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  double result = sub_C5DB54(a1, a2, 1);
  if (result
    && (uint64_t v5 = &result[-*(int *)result], *(unsigned __int16 *)v5 >= 5u)
    && (uint64_t v6 = *((unsigned __int16 *)v5 + 2)) != 0)
  {
    uint64_t v7 = &result[v6 + *(unsigned int *)&result[v6]];
    unint64_t v8 = &v7[-*(int *)v7];
    if (*(unsigned __int16 *)v8 >= 9u
      && (uint64_t v9 = *((unsigned __int16 *)v8 + 4)) != 0
      && (uint64_t v10 = &v7[v9 + *(unsigned int *)&v7[v9]], v11 = *(unsigned int *)v10, v11))
    {
      uint64_t v12 = v11;
      uint64_t v13 = operator new(8 * v11);
      *(void *)&long long v17 = v13;
      *((void *)&v17 + 1) = v13;
      uint64_t v18 = &v13[v12];
      uint64_t v14 = (uint64_t *)(v10 + 4);
      do
      {
        uint64_t v19 = *v14;
        double result = sub_2A8034((unint64_t *)&v17, v13, &v19);
        uint64_t v13 = result + 8;
        ++v14;
        --v12;
      }
      while (v12 * 8);
      long long v15 = v17;
      long long v16 = v18;
    }
    else
    {
      long long v16 = 0;
      long long v15 = 0uLL;
    }
    *(_OWORD *)a3 = v15;
    *(void *)(a3 + 16) = v16;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_C5DB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_C5DB54(uint64_t a1, unsigned int a2, int a3)
{
  int v25 = a3;
  unsigned int v26 = a2;
  v24[0] = &v25;
  v24[1] = (int *)&v26;
  unint64_t v4 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v4;
  uint64_t v5 = *(void *)a1;
  if (v5)
  {
    uint64_t v6 = a1 + 16;
    if (*(_DWORD *)(a1 + 2416) == a2)
    {
      unsigned int v7 = 100;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 2440) == a2)
    {
      unsigned int v7 = 101;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 2464) == a2)
    {
      unsigned int v7 = 102;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 2488) == a2)
    {
      unsigned int v7 = 103;
LABEL_10:
      ++*(void *)(a1 + 3864);
      uint64_t v8 = v6 + 24 * v7;
      *(void *)(v8 + 8) = v4;
      uint64_t v9 = *(unsigned int **)(v8 + 16);
      if (v9) {
        return (char *)v9 + *v9;
      }
      goto LABEL_32;
    }
    unint64_t v11 = *(void *)(a1 + 2472);
    unint64_t v12 = *(void *)(a1 + 2448);
    unint64_t v13 = *(void *)(a1 + 2424);
    BOOL v14 = v13 >= v4;
    if (v13 < v4) {
      unint64_t v4 = *(void *)(a1 + 2424);
    }
    int v15 = 100;
    if (v14) {
      int v15 = 0;
    }
    BOOL v16 = v12 >= v4;
    if (v12 < v4) {
      unint64_t v4 = *(void *)(a1 + 2448);
    }
    int v17 = 101;
    if (v16) {
      int v17 = v15;
    }
    if (v11 >= v4) {
      unint64_t v18 = v4;
    }
    else {
      unint64_t v18 = *(void *)(a1 + 2472);
    }
    unint64_t v19 = *(void *)(a1 + 2496);
    if (v11 >= v4) {
      int v20 = v17;
    }
    else {
      int v20 = 102;
    }
    uint64_t v21 = (unsigned int *)sub_2AB884(v5, 25, a2, 1);
    unsigned int v22 = 103;
    if (v19 >= v18) {
      unsigned int v22 = v20;
    }
    uint64_t v23 = v6 + 24 * v22;
    *(_DWORD *)uint64_t v23 = v26;
    *(void *)(v23 + 8) = *(void *)(a1 + 3856);
    *(void *)(v23 + 16) = v21;
    if (v21) {
      return (char *)v21 + *v21;
    }
  }
LABEL_32:
  sub_C5DCE4(v24);
  return 0;
}

uint64_t sub_C5DCE4(int **a1)
{
  int v1 = **a1;
  if (v1 != 1)
  {
    if (!v1)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
      std::to_string(&v15, *a1[1]);
      uint64_t v5 = std::string::insert(&v15, 0, "Failed to acquire Flatbuffer data in quad node ");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v16.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      unsigned int v7 = std::string::append(&v16, " on layer ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      uint64_t v9 = sub_736EC(0x19u);
      uint64_t v10 = std::string::append(&v17, v9);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v19 = v10->__r_.__value_.__r.__words[2];
      long long v18 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unint64_t v12 = (void *)sub_2F404((uint64_t)exception, &v18);
    }
    unint64_t v13 = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v18, "Unknown data access error policy");
    BOOL v14 = (void *)sub_2F404((uint64_t)v13, &v18);
  }
  return 0;
}

void sub_C5DE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_6;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_6:
  operator delete(__p);
  goto LABEL_9;
}

BOOL sub_C5DF10(void ***a1, unint64_t a2)
{
  uint64_t v4 = sub_3775DC(**a1);
  uint64_t v5 = sub_C5E178(v4, a2);
  long long v6 = &v5[*(unsigned __int16 *)&v5[-*(int *)v5 + 4]];
  uint64_t v7 = *(unsigned int *)v6;
  uint64_t v9 = &v6[v7 + 4];
  size_t v8 = *(unsigned int *)&v6[v7];
  if (v8 >= 0x17)
  {
    if ((v8 | 7) == 0x17) {
      uint64_t v14 = (v8 & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v14 = v8 | 7;
    }
    uint64_t v10 = (void **)operator new(v14 + 1);
    size_t v30 = v8;
    uint64_t v31 = v14 - 0x7FFFFFFFFFFFFFFFLL;
    long long __dst = v10;
LABEL_9:
    memcpy(v10, v9, v8);
    *((unsigned char *)v10 + v8) = 0;
    long long v11 = *a1;
    unint64_t v12 = (*a1)[6];
    unint64_t v13 = (*a1)[7];
    if (v12 == v13) {
      goto LABEL_27;
    }
LABEL_10:
    if (v31 >= 0) {
      size_t v15 = HIBYTE(v31);
    }
    else {
      size_t v15 = v30;
    }
    if (v31 >= 0) {
      p_dst = (void **)&__dst;
    }
    else {
      p_dst = __dst;
    }
    while (1)
    {
      uint64_t v17 = *((unsigned __int8 *)v12 + 23);
      if ((v17 & 0x80u) == 0) {
        uint64_t v18 = *((unsigned __int8 *)v12 + 23);
      }
      else {
        uint64_t v18 = v12[1];
      }
      if (v18 == v15)
      {
        if ((v17 & 0x80) != 0)
        {
          if (!memcmp((const void *)*v12, p_dst, v12[1])) {
            goto LABEL_27;
          }
        }
        else
        {
          if (!*((unsigned char *)v12 + 23)) {
            goto LABEL_27;
          }
          uint64_t v19 = 0;
          while (*((unsigned __int8 *)v12 + v19) == *((unsigned __int8 *)p_dst + v19))
          {
            if (v17 == ++v19) {
              goto LABEL_27;
            }
          }
        }
      }
      v12 += 3;
      if (v12 == v13) {
        goto LABEL_30;
      }
    }
  }
  HIBYTE(v31) = *(_DWORD *)&v6[v7];
  uint64_t v10 = (void **)&__dst;
  if (v8) {
    goto LABEL_9;
  }
  *((unsigned char *)&__dst + v8) = 0;
  long long v11 = *a1;
  unint64_t v12 = (*a1)[6];
  unint64_t v13 = (*a1)[7];
  if (v12 != v13) {
    goto LABEL_10;
  }
LABEL_27:
  if (v12 == v13)
  {
LABEL_30:
    if (!*((unsigned char *)v11 + 17))
    {
      BOOL v20 = 0;
      if ((SHIBYTE(v31) & 0x80000000) == 0) {
        return v20;
      }
      goto LABEL_50;
    }
    unsigned int v22 = v11[12];
    uint64_t v21 = v11[13];
    if (v22 == v21)
    {
LABEL_49:
      BOOL v20 = v22 != v21;
      if (SHIBYTE(v31) < 0) {
LABEL_50:
      }
        operator delete(__dst);
    }
    else
    {
      if (v31 >= 0) {
        size_t v23 = HIBYTE(v31);
      }
      else {
        size_t v23 = v30;
      }
      if (v31 >= 0) {
        uint64_t v24 = (void **)&__dst;
      }
      else {
        uint64_t v24 = __dst;
      }
      do
      {
        uint64_t v25 = *((unsigned __int8 *)v22 + 23);
        if ((v25 & 0x80u) == 0) {
          uint64_t v26 = *((unsigned __int8 *)v22 + 23);
        }
        else {
          uint64_t v26 = v22[1];
        }
        if (v26 == v23)
        {
          if ((v25 & 0x80) != 0)
          {
            if (!memcmp((const void *)*v22, v24, v22[1])) {
              goto LABEL_49;
            }
          }
          else
          {
            if (!*((unsigned char *)v22 + 23)) {
              goto LABEL_49;
            }
            uint64_t v27 = 0;
            while (*((unsigned __int8 *)v22 + v27) == *((unsigned __int8 *)v24 + v27))
            {
              if (v25 == ++v27) {
                goto LABEL_49;
              }
            }
          }
        }
        v22 += 3;
      }
      while (v22 != v21);
      BOOL v20 = 0;
      if (SHIBYTE(v31) < 0) {
        goto LABEL_50;
      }
    }
  }
  else
  {
    BOOL v20 = 1;
    if (SHIBYTE(v31) < 0) {
      goto LABEL_50;
    }
  }
  return v20;
}

char *sub_C5E178(uint64_t a1, unint64_t a2)
{
  unint64_t v26 = a2;
  uint64_t v3 = sub_C5DB54(a1, a2, 1);
  if (!v3
    || (uint64_t v4 = &v3[-*(int *)v3], *(unsigned __int16 *)v4 < 5u)
    || (uint64_t v5 = *((unsigned __int16 *)v4 + 2)) == 0
    || (long long v6 = &v3[v5 + *(unsigned int *)&v3[v5]], v7 = &v6[-*(int *)v6], *(unsigned __int16 *)v7 < 5u)
    || !*((_WORD *)v7 + 2)
    || (size_t v8 = &v6[*((unsigned __int16 *)v7 + 2) + *(unsigned int *)&v6[*((unsigned __int16 *)v7 + 2)]],
        *(_DWORD *)v8 <= HIDWORD(a2)))
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    sub_2A746C((unsigned int *)&v26, &v24);
    uint64_t v19 = std::string::insert(&v24, 0, "Referenced polygon ");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    uint64_t v21 = std::string::append(&v25, " does not exist.");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    uint64_t v28 = v21->__r_.__value_.__r.__words[2];
    long long v27 = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    size_t v23 = (void *)sub_2F404((uint64_t)exception, &v27);
  }
  uint64_t v9 = &v8[4 * HIDWORD(a2) + 4 + *(unsigned int *)&v8[4 * HIDWORD(a2) + 4]];
  uint64_t v10 = &v9[-*(int *)v9];
  if (*(unsigned __int16 *)v10 < 9u) {
    return 0;
  }
  uint64_t v11 = *((unsigned __int16 *)v10 + 4);
  if (!v11) {
    return 0;
  }
  double result = 0;
  unint64_t v13 = (unsigned int *)&v9[v11 + *(unsigned int *)&v9[v11]];
  unsigned int v16 = *v13;
  size_t v15 = v13 + 1;
  uint64_t v14 = v16;
  *((void *)&v27 + 1) = v16;
  uint64_t v28 = 0xF424000000040;
  int v29 = 257;
  *(void *)&long long v27 = v15;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  if (v16 < 0xC) {
    return result;
  }
  unint64_t v17 = *v15;
  if ((int)v17 < 1) {
    return 0;
  }
  if (v14 - 1 >= v17)
  {
    if (sub_2B8528((int *)((char *)v15 + v17), (uint64_t *)&v27)) {
      return (char *)v15 + *v15;
    }
    return 0;
  }
  return 0;
}

void sub_C5E37C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_C5E3FC(uint64_t a1, unint64_t *a2, _DWORD *a3)
{
  sub_C5E5E0(a1, *a2, (uint64_t)v35);
  if (!sub_34554(v35, a3)) {
    return 0;
  }
  sub_C5E804(a1, *a2, &__p);
  uint64_t v9 = (void **)__p;
  uint64_t v10 = v34;
  if (__p == v34)
  {
    uint64_t v22 = 0;
    size_t v23 = __p;
    if (!__p) {
      return v22;
    }
  }
  else
  {
    unsigned int v11 = a3[1];
    LODWORD(v6) = *a3;
    double v12 = (double)v6;
    unint64_t v13 = (void **)__p;
    while (1)
    {
      uint64_t v14 = *v13;
      size_t v15 = v13[1];
      if (*v13 != v15)
      {
        int v16 = 0;
        do
        {
          unint64_t v17 = (_DWORD *)v14[1];
          uint64_t v18 = (_DWORD *)(*v14 + 12);
          if ((_DWORD *)*v14 != v17 && v18 != v17)
          {
            do
            {
              unsigned int v20 = *(v18 - 2);
              unsigned int v21 = v18[1];
              if (v20 >= v11)
              {
                if (v21 < v11)
                {
LABEL_20:
                  LODWORD(v7) = *v18;
                  LODWORD(v8) = *(v18 - 3);
                  double v8 = (double)*(unint64_t *)&v8;
                  double v7 = ((double)v11 - (double)v20)
                     / ((double)v21 - (double)v20)
                     * ((double)*(unint64_t *)&v7 - v8)
                     + v8;
                  if (v7 < v12) {
                    v16 ^= 1u;
                  }
                }
              }
              else if (v21 >= v11)
              {
                goto LABEL_20;
              }
              v18 += 3;
            }
            while (v18 != v17);
          }
          v14 += 3;
        }
        while (v14 != v15);
        if (v16) {
          break;
        }
      }
      v13 += 3;
      if (v13 == v34)
      {
        uint64_t v22 = 0;
        if (!__p) {
          return v22;
        }
        goto LABEL_28;
      }
    }
    uint64_t v22 = 1;
    if (!__p) {
      return v22;
    }
LABEL_28:
    std::string v24 = v34;
    do
    {
      long long v27 = (char *)*(v24 - 3);
      v24 -= 3;
      unint64_t v26 = v27;
      if (v27)
      {
        uint64_t v28 = (char *)*(v10 - 2);
        std::string v25 = v26;
        if (v28 != v26)
        {
          int v29 = (char *)*(v10 - 2);
          do
          {
            uint64_t v31 = (void *)*((void *)v29 - 3);
            v29 -= 24;
            uint64_t v30 = v31;
            if (v31)
            {
              *((void *)v28 - 2) = v30;
              operator delete(v30);
            }
            uint64_t v28 = v29;
          }
          while (v29 != v26);
          std::string v25 = *v24;
        }
        *(v10 - 2) = v26;
        operator delete(v25);
      }
      uint64_t v10 = v24;
    }
    while (v24 != v9);
    size_t v23 = __p;
  }
  unsigned int v34 = v9;
  operator delete(v23);
  return v22;
}

uint64_t sub_C5E5E0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v26 = a2;
  uint64_t v5 = sub_C5DB54(a1, a2, 1);
  if (!v5
    || (unint64_t v6 = &v5[-*(int *)v5], *(unsigned __int16 *)v6 < 5u)
    || (uint64_t v7 = *((unsigned __int16 *)v6 + 2)) == 0
    || (double v8 = &v5[v7 + *(unsigned int *)&v5[v7]], v9 = &v8[-*(int *)v8], *(unsigned __int16 *)v9 < 5u)
    || !*((_WORD *)v9 + 2)
    || (uint64_t v10 = &v8[*((unsigned __int16 *)v9 + 2) + *(unsigned int *)&v8[*((unsigned __int16 *)v9 + 2)]],
        *(_DWORD *)v10 <= HIDWORD(a2)))
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    sub_2A746C((unsigned int *)&v26, &v22);
    unint64_t v17 = std::string::insert(&v22, 0, "Referenced polygon ");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    uint64_t v19 = std::string::append(&v23, " does not exist.");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    std::string::size_type v25 = v19->__r_.__value_.__r.__words[2];
    long long v24 = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    unsigned int v21 = (void *)sub_2F404((uint64_t)exception, &v24);
  }
  unsigned int v11 = &v10[4 * HIDWORD(a2) + 4 + *(unsigned int *)&v10[4 * HIDWORD(a2) + 4]];
  uint64_t v12 = (uint64_t)&v11[*(unsigned __int16 *)&v11[-*(int *)v11 + 6]];
  LODWORD(v13) = *(_DWORD *)(v12 + 4);
  if (v13 >= 0xFFFFFFFE) {
    uint64_t v13 = 4294967294;
  }
  else {
    uint64_t v13 = v13;
  }
  *(void *)&long long v24 = *(unsigned int *)v12 | (unint64_t)(v13 << 32);
  DWORD2(v24) = 0x7FFFFFFF;
  uint64_t v14 = *(unsigned int *)(v12 + 8);
  LODWORD(v12) = *(_DWORD *)(v12 + 12);
  if (v12 >= 0xFFFFFFFE) {
    uint64_t v12 = 4294967294;
  }
  else {
    uint64_t v12 = v12;
  }
  v23.__r_.__value_.__r.__words[0] = v14 | (v12 << 32);
  LODWORD(v23.__r_.__value_.__r.__words[1]) = 0x7FFFFFFF;
  return sub_3392C(a3, (unsigned int *)&v24, (unsigned int *)&v23);
}

void sub_C5E784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void sub_C5E804(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v24 = a2;
  uint64_t v5 = sub_C5DB54(a1, a2, 1);
  if (!v5
    || (unint64_t v6 = &v5[-*(int *)v5], *(unsigned __int16 *)v6 < 5u)
    || (uint64_t v7 = *((unsigned __int16 *)v6 + 2)) == 0
    || (double v8 = &v5[v7 + *(unsigned int *)&v5[v7]], v9 = &v8[-*(int *)v8], *(unsigned __int16 *)v9 < 5u)
    || !*((_WORD *)v9 + 2)
    || (uint64_t v10 = &v8[*((unsigned __int16 *)v9 + 2) + *(unsigned int *)&v8[*((unsigned __int16 *)v9 + 2)]],
        *(_DWORD *)v10 <= HIDWORD(a2)))
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    sub_2A746C((unsigned int *)&v24, &v20);
    size_t v15 = std::string::insert(&v20, 0, "Referenced polygon ");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    unint64_t v17 = std::string::append(&v21, " does not exist.");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    std::string::size_type v23 = v17->__r_.__value_.__r.__words[2];
    long long v22 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    uint64_t v19 = (void *)sub_2F404((uint64_t)exception, &v22);
  }
  unsigned int v11 = &v10[4 * HIDWORD(a2) + 4 + *(unsigned int *)&v10[4 * HIDWORD(a2) + 4]];
  uint64_t v12 = &v11[*(unsigned __int16 *)&v11[-*(int *)v11 + 4]];
  uint64_t v13 = (int *)&v12[*(unsigned int *)v12];

  sub_2A9A54(v13, a3);
}

void sub_C5E97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_C5E9FC(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0x51B3BEA3677D46CFLL * ((v8 - *a1) >> 3) >= a4)
  {
    uint64_t result = a1[1];
    if (0x51B3BEA3677D46CFLL * ((result - v9) >> 3) >= a4)
    {
      if (a2 == a3)
      {
        uint64_t v23 = v9;
      }
      else
      {
        uint64_t v23 = v9;
        do
        {
          sub_5A303C(v9, v6);
          v6 += 376;
          v9 += 376;
          v23 += 376;
        }
        while (v6 != a3);
        uint64_t result = a1[1];
      }
      while (result != v23)
        uint64_t result = sub_402C7C(result - 376);
      a1[1] = v23;
    }
    else
    {
      uint64_t v19 = a2 + 8 * ((result - v9) >> 3);
      if (result != v9)
      {
        uint64_t v20 = 8 * ((result - v9) >> 3);
        do
        {
          uint64_t result = sub_5A303C(v9, v6);
          v6 += 376;
          v9 += 376;
          v20 -= 376;
        }
        while (v20);
        uint64_t v9 = a1[1];
      }
      uint64_t v21 = v9;
      if (v19 != a3)
      {
        uint64_t v22 = 0;
        do
        {
          uint64_t result = sub_48381C(v9 + v22, v19 + v22);
          v22 += 376;
        }
        while (v19 + v22 != a3);
        uint64_t v21 = v9 + v22;
      }
      a1[1] = v21;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = a1[1];
      unsigned int v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          uint64_t v10 = sub_402C7C(v10 - 376);
        while (v10 != v9);
        unsigned int v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAE4C415C9882B9) {
      goto LABEL_37;
    }
    unint64_t v12 = 0x51B3BEA3677D46CFLL * (v8 >> 3);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= a4) {
      uint64_t v13 = a4;
    }
    unint64_t v14 = v12 >= 0x572620AE4C415CLL ? 0xAE4C415C9882B9 : v13;
    if (v14 > 0xAE4C415C9882B9) {
LABEL_37:
    }
      sub_2E00();
    uint64_t v15 = 376 * v14;
    uint64_t result = (uint64_t)operator new(376 * v14);
    uint64_t v17 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v15;
    if (v6 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t result = sub_48381C(v17 + v18, v6 + v18);
        v18 += 376;
      }
      while (v6 + v18 != a3);
      v17 += v18;
    }
    a1[1] = v17;
  }
  return result;
}

char *sub_C5ECA4()
{
  unk_25E03EF = 16641;
  word_25E03D8 = 65;
  byte_25E0407 = 1;
  byte_25E03F1 = 0;
  byte_25E041F = 21;
  strcpy((char *)&xmmword_25E0408, "enable_coverage_check");
  byte_25E0437 = 14;
  strcpy((char *)&qword_25E0420, "default_region");
  byte_25E044F = 17;
  strcpy((char *)&xmmword_25E0438, "supported_regions");
  byte_25E0467 = 17;
  strcpy(algn_25E0450, "preflight_regions");
  qword_25E0468 = (uint64_t)operator new(0x19uLL);
  *(_OWORD *)algn_25E0470 = xmmword_20B9250;
  strcpy((char *)qword_25E0468, "supported_country_codes");
  uint64_t result = (char *)operator new(0x19uLL);
  qword_25E0480 = (uint64_t)result;
  xmmword_25E0488 = xmmword_20B9250;
  strcpy(result, "preflight_country_codes");
  return result;
}

uint64_t sub_C5EDD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v13);
  sub_13F1D90(v10, 0, 0);
  unint64_t v12 = 0;
  sub_DF4AB4((uint64_t)&v9, (uint64_t *)a1, (void *)(a1 + 24), a1 + 48, (unsigned char *)(a1 + 424), (uint64_t)v7);
  if ((v11 & 2) != 0)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
    if (v11) {
      uint64_t v4 = (void *)*v4;
    }
  }
  if ((v8 & 2) != 0)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
    if (v8) {
      uint64_t v5 = (void *)*v5;
    }
  }
  if (v4 == v5) {
    sub_13F3678((uint64_t)v10, (uint64_t)v7);
  }
  else {
    sub_13F3580((uint64_t)v10, (uint64_t)v7);
  }
  sub_13F22FC(v7);
  unint64_t v12 = vcvtad_u64_f64(sub_72688((uint64_t)v13));
  *(unsigned char *)a2 = 1;
  sub_C5EEF0(a2 + 8, (uint64_t)v10);
  *(void *)(a2 + 176) = v12;
  return sub_13F22FC(v10);
}

void sub_C5EEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

uint64_t sub_C5EEF0(uint64_t a1, uint64_t a2)
{
  sub_13F1D90(a1, 0, 0);
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if ((v4 & 2) != 0)
    {
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v5 = (void *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
      if (v4) {
        uint64_t v5 = (void *)*v5;
      }
    }
    uint64_t v6 = *(void *)(a2 + 8);
    if ((v6 & 2) != 0)
    {
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6) {
        uint64_t v7 = (void *)*v7;
      }
    }
    if (v5 == v7) {
      sub_13F3678(a1, a2);
    }
    else {
      sub_13F3580(a1, a2);
    }
  }
  return a1;
}

void sub_C5EF90()
{
  byte_25E04AF = 1;
  word_25E0498 = 65;
  byte_25E04C7 = 1;
  word_25E04B0 = 65;
  char v1 = 7;
  strcpy((char *)v0, "UNKNOWN");
  int v2 = 0;
  char v4 = 14;
  strcpy((char *)v3, "ROUTES_THROUGH");
  int v5 = 1;
  char v7 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v8 = 3;
  char v10 = 11;
  strcpy((char *)v9, "ROUTES_FROM");
  int v11 = 2;
  xmmword_25E0528 = 0u;
  *(_OWORD *)&qword_25E0538 = 0u;
  dword_25E0548 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E0528, (uint64_t)v0, (uint64_t)v0);
  sub_3A6EF0((uint64_t)&xmmword_25E0528, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E0528, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E0528, (uint64_t)v9, (uint64_t)v9);
  if (v10 < 0)
  {
    operator delete(v9[0]);
    if ((v7 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v3[0]);
      if ((v1 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v0[0]);
      goto LABEL_5;
    }
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v4 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v1 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E04DF = 8;
  strcpy((char *)&qword_25E04C8, "any_mode");
  byte_25E04F7 = 7;
  strcpy((char *)&dword_25E04E0, "cycling");
  byte_25E050F = 7;
  strcpy((char *)&dword_25E04F8, "driving");
  byte_25E0527 = 7;
  strcpy((char *)&dword_25E0510, "walking");
}

void sub_C5F1EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E0538) {
    sub_20AECE4((void **)qword_25E0538);
  }
  uint64_t v37 = (void *)xmmword_25E0528;
  *(void *)&xmmword_25E0528 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_C5F28C(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v44);
  long long v42 = 0u;
  long long v43 = 0u;
  uint64_t v4 = a1[7];
  uint64_t v5 = a1[8];
  uint64_t v6 = v4 + 40;
  BOOL v7 = v4 == v5 || v6 == v5;
  if (!v7)
  {
    do
    {
      uint64_t v10 = *(void *)(v4 + 32);
      if (v10 != 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v11 = *(void *)(v6 + 32);
        if (v10 < v11 || v11 == 0x7FFFFFFFFFFFFFFFLL) {
          uint64_t v4 = v6;
        }
      }
      v6 += 40;
    }
    while (v6 != v5);
  }
  if (v4 == v5 || (uint64_t v8 = *(void *)(v4 + 32), v8 == 0x7FFFFFFFFFFFFFFFLL)) {
    uint64_t v8 = 0x7FFFFFFFFFFFFFFELL;
  }
  if (v8 > a1[15])
  {
    v37.n128_u64[0] = 15;
    v37.n128_u64[1] = (unint64_t)&off_2439090;
    sub_3E7814((__n128 *)v39, &v37);
    *(unsigned char *)a2 = 0;
    long long v9 = *(_OWORD *)&v39[16];
    *(_OWORD *)(a2 + 8) = *(_OWORD *)v39;
    *(_OWORD *)(a2 + 24) = v9;
    *(void *)(a2 + 40) = v40;
    *(_DWORD *)(a2 + 48) = v41;
    return;
  }
  sub_C5F734();
  unint64_t v14 = *(void ****)v39;
  uint64_t v13 = *(void ****)&v39[8];
  uint64_t v15 = *(void *)&v39[16];
  uint64_t v16 = a1[13];
  long long v42 = *(_OWORD *)v39;
  *(void *)&long long v43 = *(void *)&v39[16];
  v39[23] = 18;
  strcpy(v39, "CyclingPathFinding");
  __n128 v37 = 0uLL;
  uint64_t v38 = 0;
  uint64_t v17 = sub_374CDC(v16, (uint64_t)v39, (uint64_t *)&v37);
  __n128 __p = operator new(0x20uLL);
  long long v36 = xmmword_20B91C0;
  strcpy((char *)__p, "available_regions_filter");
  uint64_t v18 = (void *)sub_560F4(v17, (uint64_t)&__p);
  if (SHIBYTE(v36) < 0) {
    operator delete(__p);
  }
  unint64_t v19 = v37.n128_u64[0];
  if (v37.n128_u64[0])
  {
    unint64_t v20 = v37.n128_u64[1];
    uint64_t v21 = (void *)v37.n128_u64[0];
    if (v37.n128_u64[1] != v37.n128_u64[0])
    {
      do
      {
        if (*(char *)(v20 - 1) < 0) {
          operator delete(*(void **)(v20 - 24));
        }
        v20 -= 24;
      }
      while (v20 != v19);
      uint64_t v21 = (void *)v37.n128_u64[0];
    }
    v37.n128_u64[1] = v19;
    operator delete(v21);
  }
  if ((v39[23] & 0x80000000) != 0) {
    operator delete(*(void **)v39);
  }
  v39[23] = 7;
  strcpy(v39, "enabled");
  BOOL v22 = sub_29D62C(v18, (uint64_t)v39);
  if ((v39[23] & 0x80000000) != 0) {
    operator delete(*(void **)v39);
  }
  v39[23] = 7;
  strcpy(v39, "slack_m");
  uint64_t v23 = sub_5CDE0(v18, v39);
  if ((v39[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v39);
    if (v14 == v13) {
      goto LABEL_54;
    }
  }
  else if (v14 == v13)
  {
    goto LABEL_54;
  }
  int v24 = 0;
  if (v22)
  {
    std::string::size_type v25 = v14;
    do
    {
      sub_107EE10((uint64_t)v25, 1);
      int v26 = sub_107A248((void *)a1[13], v25);
      v24 += sub_107A7B0((void *)a1[13], v23, v25) + v26;
      v25 += 3;
    }
    while (v25 != v13);
  }
  else
  {
    long long v27 = v14;
    do
    {
      sub_107EE10((uint64_t)v27, 1);
      v24 += sub_107A248((void *)a1[13], v27);
      v27 += 3;
    }
    while (v27 != v13);
  }
  uint64_t v28 = v14;
  do
  {
    BOOL v29 = sub_45FB38(v28);
    v28 += 3;
  }
  while (v28 != v13 && v29);
  if (v24) {
    BOOL v31 = v29;
  }
  else {
    BOOL v31 = 0;
  }
  if (v31)
  {
    v37.n128_u64[0] = 23;
    v37.n128_u64[1] = (unint64_t)&off_2439090;
    sub_3E7814((__n128 *)v39, &v37);
    goto LABEL_55;
  }
  if (!v29)
  {
    double v34 = sub_72688((uint64_t)v44);
    *(unsigned char *)a2 = 1;
    *(void *)(a2 + 8) = v14;
    *(void *)(a2 + 16) = v13;
    *(void *)(a2 + 24) = v15;
    *(void *)(a2 + 32) = vcvtad_u64_f64(v34);
    return;
  }
LABEL_54:
  v37.n128_u64[0] = 10;
  v37.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814((__n128 *)v39, &v37);
LABEL_55:
  *(unsigned char *)a2 = 0;
  long long v32 = *(_OWORD *)&v39[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v39;
  *(_OWORD *)(a2 + 24) = v32;
  *(void *)(a2 + 40) = v40;
  *(_DWORD *)(a2 + 48) = v41;
  if (v14)
  {
    if (v14 != v13)
    {
      unint64_t v33 = v13 - 3;
      do
      {
        if (*v33)
        {
          sub_C64384((uint64_t)v33, *v33);
          operator delete(*v33);
        }
        BOOL v7 = v33 == v14;
        v33 -= 3;
      }
      while (!v7);
      uint64_t v13 = (void ***)v42;
    }
    operator delete(v13);
  }
}

void sub_C5F6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void ***a27)
{
}

void *sub_C5F734()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v3 = (void *)v0;
  uint64_t v4 = *(uint64_t **)(v1 + 104);
  sub_C629F8((uint64_t)&v388, v4);
  HIBYTE(v404[2]) = 18;
  strcpy((char *)v404, "CyclingPathFinding");
  __n128 __p = 0;
  long double v377 = 0;
  uint64_t v378 = 0;
  uint64_t v363 = (uint64_t)v4;
  uint64_t v5 = sub_374CDC((uint64_t)v4, (uint64_t)v404, (uint64_t *)&__p);
  sub_54214((uint64_t)v386, (uint64_t)v5);
  uint64_t v6 = (void **)__p;
  if (__p)
  {
    BOOL v7 = v377;
    uint64_t v8 = __p;
    if (v377 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      uint64_t v8 = __p;
    }
    long double v377 = v6;
    operator delete(v8);
  }
  if (SHIBYTE(v404[2]) < 0) {
    operator delete((void *)v404[0]);
  }
  HIBYTE(v404[2]) = 11;
  strcpy((char *)v404, "PathFinding");
  __n128 __p = 0;
  long double v377 = 0;
  uint64_t v378 = 0;
  long long v9 = v4;
  uint64_t v10 = sub_374CDC((uint64_t)v4, (uint64_t)v404, (uint64_t *)&__p);
  uint64_t v11 = (void **)__p;
  if (__p)
  {
    unint64_t v12 = v377;
    uint64_t v13 = __p;
    if (v377 != __p)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      uint64_t v13 = __p;
    }
    long double v377 = v11;
    operator delete(v13);
    long long v9 = (uint64_t *)v363;
  }
  if (SHIBYTE(v404[2]) < 0) {
    operator delete((void *)v404[0]);
  }
  HIBYTE(v404[2]) = 12;
  strcpy((char *)v404, "use_dijkstra");
  BOOL v14 = sub_29D62C(v10, (uint64_t)v404);
  if (SHIBYTE(v404[2]) < 0) {
    operator delete((void *)v404[0]);
  }
  HIBYTE(v404[2]) = 21;
  strcpy((char *)v404, "max_num_scanned_nodes");
  int v15 = sub_31AC04(v10, (uint64_t)v404);
  if (SHIBYTE(v404[2]) < 0) {
    operator delete((void *)v404[0]);
  }
  HIBYTE(v404[2]) = 19;
  strcpy((char *)v404, "CyclingPathAnalyzer");
  __n128 __p = 0;
  long double v377 = 0;
  uint64_t v378 = 0;
  uint64_t v16 = sub_374CDC((uint64_t)v9, (uint64_t)v404, (uint64_t *)&__p);
  HIBYTE(v416) = 7;
  strcpy((char *)&v415, "default");
  uint64_t v17 = (void *)sub_560F4(v16, (uint64_t)&v415);
  sub_1066CA8(v384, v9, v17, 2);
  if (SHIBYTE(v416) < 0) {
    operator delete(v415);
  }
  uint64_t v18 = (void **)__p;
  if (__p)
  {
    unint64_t v19 = v377;
    unint64_t v20 = __p;
    if (v377 != __p)
    {
      do
      {
        if (*((char *)v19 - 1) < 0) {
          operator delete(*(v19 - 3));
        }
        v19 -= 3;
      }
      while (v19 != v18);
      unint64_t v20 = __p;
    }
    long double v377 = v18;
    operator delete(v20);
    long long v9 = (uint64_t *)v363;
  }
  if (SHIBYTE(v404[2]) < 0) {
    operator delete((void *)v404[0]);
  }
  HIBYTE(v404[2]) = 7;
  strcpy((char *)v404, "cycling");
  sub_106FA2C((uint64_t)&__p, v9, (uint64_t)v404, 2);
  if (SHIBYTE(v404[2]) < 0) {
    operator delete((void *)v404[0]);
  }
  sub_F401B4((uint64_t)&v369, v10, (uint64_t)v9, (uint64_t)v384, (uint64_t)&__p, (uint64_t)&v388);
  uint64_t v366 = sub_F15838(v9, (unsigned char *)(v2 + 92), v386);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v404);
    uint64_t v21 = sub_188FC78(v404, (uint64_t)"Using cycling cost function ", 28);
    int v22 = *(char *)(v366 + 31);
    if (v22 >= 0) {
      uint64_t v23 = v366 + 8;
    }
    else {
      uint64_t v23 = *(void *)(v366 + 8);
    }
    if (v22 >= 0) {
      uint64_t v24 = *(unsigned __int8 *)(v366 + 31);
    }
    else {
      uint64_t v24 = *(void *)(v366 + 16);
    }
    sub_188FC78(v21, v23, v24);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v415, 2u);
    if (SHIBYTE(v416) < 0) {
      operator delete(v415);
    }
    if (SHIBYTE(v405) < 0) {
      operator delete((void *)v404[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    long long v9 = (uint64_t *)v363;
  }
  int v25 = v14 - 1;
  *uint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  int v26 = *(_DWORD *)(v2 + 128);
  uint64_t v365 = v3;
  if (!v26)
  {
    v396[1] = 0;
    v396[0] = 0;
    uint64_t v397 = 0;
    v404[0] = (uint64_t)operator new(0x20uLL);
    *(_OWORD *)&v404[1] = xmmword_20B91C0;
    strcpy((char *)v404[0], "OneToManyPathComputation");
    long long v416 = 0uLL;
    unsigned int v415 = 0;
    __n128 v37 = sub_374CDC((uint64_t)v9, (uint64_t)v404, (uint64_t *)&v415);
    HIBYTE(v424[2]) = 7;
    strcpy((char *)v424, "default");
    uint64_t v38 = sub_560F4(v37, (uint64_t)v424);
    if (SHIBYTE(v424[2]) < 0) {
      operator delete(v424[0]);
    }
    char v39 = (void **)v415;
    if (v415)
    {
      uint64_t v40 = (void **)v416;
      int v41 = v415;
      if ((void *)v416 != v415)
      {
        do
        {
          if (*((char *)v40 - 1) < 0) {
            operator delete(*(v40 - 3));
          }
          v40 -= 3;
        }
        while (v40 != v39);
        int v41 = v415;
      }
      *(void *)&long long v416 = v39;
      operator delete(v41);
    }
    if (SHIBYTE(v404[2]) < 0) {
      operator delete((void *)v404[0]);
    }
    sub_F5982C((uint64_t)v404, v38, v363, (uint64_t)&v388, v25, v15);
    sub_C64588(v424, *(void *)(v2 + 56), *(void *)(v2 + 64));
    unsigned int v415 = (void *)v2;
    *(void *)&long long v416 = v424;
    *((void *)&v416 + 1) = v366;
    uint64_t v417 = (void *)sub_37B3A8(v363);
    LOBYTE(v418) = 0;
    sub_F43B60();
    unint64_t v48 = ((char *)v424[1] - (char *)v424[0]) >> 5;
    unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * (((char *)v396[1] - (char *)v396[0]) >> 3);
    if (v48 <= v49)
    {
      if (v48 < v49)
      {
        unsigned int v50 = (void ***)((char *)v396[0] + 24 * v48);
        if (v396[1] != v50)
        {
          uint64_t v51 = (void ***)((char *)v396[1] - 24);
          do
          {
            if (*v51)
            {
              sub_C64384((uint64_t)v51, *v51);
              operator delete(*v51);
            }
            BOOL v52 = v51 == v50;
            v51 -= 3;
          }
          while (!v52);
        }
        v396[1] = v50;
      }
    }
    else
    {
      sub_C647B0((uint64_t)v396, v48 - v49);
    }
    uint64_t v317 = v423;
    if (v423 == v422)
    {
LABEL_478:
      if (v317)
      {
        uint64_t v334 = (uint64_t)v423;
        long long v335 = v317;
        if (v423 != v317)
        {
          do
            uint64_t v334 = sub_405F44(v334 - 472);
          while ((long long *)v334 != v317);
          long long v335 = v422;
        }
        int v423 = v317;
        operator delete(v335);
      }
      uint64_t v336 = (char *)v424[0];
      long long v9 = (uint64_t *)v363;
      if (v424[0])
      {
        int v337 = v424[1];
        int v338 = v424[0];
        if (v424[1] != v424[0])
        {
          unint64_t v339 = (char *)v424[1];
          do
          {
            uint64_t v341 = (void *)*((void *)v339 - 4);
            v339 -= 32;
            unint64_t v340 = v341;
            if (v341)
            {
              *(v337 - 3) = v340;
              operator delete(v340);
            }
            int v337 = v339;
          }
          while (v339 != v336);
          int v338 = v424[0];
          long long v9 = (uint64_t *)v363;
        }
        v424[1] = v336;
        operator delete(v338);
      }
      uint64_t v342 = (void ***)*v3;
      v310 = v396;
      if (*v3)
      {
        v343 = (void ***)v3[1];
        if (v343 != v342)
        {
          v344 = v343 - 3;
          do
          {
            if (*v344)
            {
              sub_C64384((uint64_t)v344, *v344);
              operator delete(*v344);
            }
            BOOL v52 = v344 == v342;
            v344 -= 3;
          }
          while (!v52);
          uint64_t v342 = (void ***)*v3;
        }
        operator delete(v342);
        *uint64_t v3 = 0;
        v3[1] = 0;
        v3[2] = 0;
      }
      double v313 = (void ***)v396[0];
      goto LABEL_500;
    }
    uint64_t v318 = 0;
    unint64_t v319 = 0xCBEEA4E1A08AD8F3 * (((char *)v423 - (char *)v422) >> 3);
    while (1)
    {
      long long v321 = (char *)v396[0];
      sub_EA94B8((uint64_t)&v415, (long long *)((char *)v422 + 472 * v318));
      sub_EB6CAC((int64x2_t *)&v321[24 * v318], (uint64_t)&v415, 1);
      if (v419 < 0)
      {
        operator delete(v417);
        uint64_t v322 = (void **)v415;
        if (v415)
        {
LABEL_454:
          uint64_t v323 = v416;
          long long v320 = v322;
          if ((void **)v416 != v322)
          {
            do
            {
              unint64_t v324 = *(void **)(v323 - 224);
              if (v324)
              {
                *(void *)(v323 - 216) = v324;
                operator delete(v324);
              }
              unint64_t v325 = *(void **)(v323 - 248);
              if (v325)
              {
                *(void *)(v323 - 240) = v325;
                operator delete(v325);
              }
              uint64_t v326 = *(void **)(v323 - 312);
              if (v326)
              {
                *(void *)(v323 - 304) = v326;
                operator delete(v326);
              }
              unsigned int v327 = *(void **)(v323 - 336);
              if (v327)
              {
                *(void *)(v323 - 328) = v327;
                operator delete(v327);
              }
              uint64_t v328 = *(void *)(v323 - 360);
              if (v328)
              {
                uint64_t v329 = *(void *)(v323 - 352);
                uint64_t v330 = *(void **)(v323 - 360);
                if (v329 != v328)
                {
                  do
                  {
                    v331 = *(void **)(v329 - 24);
                    if (v331)
                    {
                      *(void *)(v329 - 16) = v331;
                      operator delete(v331);
                    }
                    v329 -= 56;
                  }
                  while (v329 != v328);
                  uint64_t v330 = *(void **)(v323 - 360);
                }
                *(void *)(v323 - 352) = v328;
                operator delete(v330);
              }
              uint64_t v332 = *(void **)(v323 - 448);
              if (v332)
              {
                *(void *)(v323 - 440) = v332;
                operator delete(v332);
              }
              int v333 = (void **)(v323 - 472);
              uint64_t v3 = v365;
              if (*(char *)(v323 - 449) < 0) {
                operator delete(*v333);
              }
              v323 -= 472;
            }
            while (v333 != v322);
            long long v320 = v415;
          }
          *(void *)&long long v416 = v322;
          operator delete(v320);
        }
      }
      else
      {
        uint64_t v322 = (void **)v415;
        if (v415) {
          goto LABEL_454;
        }
      }
      if (++v318 == v319)
      {
        uint64_t v317 = v422;
        goto LABEL_478;
      }
    }
  }
  uint64_t v362 = v2;
  if (v26 != 3)
  {
    if (v26 != 1) {
      goto LABEL_510;
    }
    uint64_t v367 = 0;
    long long v368 = 0uLL;
    v404[0] = (uint64_t)operator new(0x20uLL);
    *(_OWORD *)&v404[1] = xmmword_20B8870;
    strcpy((char *)v404[0], "ViaNodePathSetComputation");
    long long v416 = 0uLL;
    unsigned int v415 = 0;
    long long v27 = sub_374CDC((uint64_t)v9, (uint64_t)v404, (uint64_t *)&v415);
    HIBYTE(v424[2]) = 7;
    strcpy((char *)v424, "default");
    uint64_t v28 = sub_560F4(v27, (uint64_t)v424);
    if (SHIBYTE(v424[2]) < 0) {
      operator delete(v424[0]);
    }
    BOOL v29 = (void **)v415;
    if (v415)
    {
      uint64_t v30 = (void **)v416;
      BOOL v31 = v415;
      if ((void *)v416 != v415)
      {
        do
        {
          if (*((char *)v30 - 1) < 0) {
            operator delete(*(v30 - 3));
          }
          v30 -= 3;
        }
        while (v30 != v29);
        BOOL v31 = v415;
      }
      *(void *)&long long v416 = v29;
      operator delete(v31);
    }
    if (SHIBYTE(v404[2]) < 0) {
      operator delete((void *)v404[0]);
    }
    long long v9 = (uint64_t *)v363;
    sub_F58E2C((uint64_t)v424, v28, v363, (uint64_t)&v388, v25, v15);
    strcpy((char *)v404, "MinCostPathComputation");
    HIBYTE(v404[2]) = 22;
    long long v416 = 0uLL;
    unsigned int v415 = 0;
    uint64_t v53 = sub_374CDC(v363, (uint64_t)v404, (uint64_t *)&v415);
    HIBYTE(v397) = 7;
    strcpy((char *)v396, "default");
    uint64_t v54 = sub_560F4(v53, (uint64_t)v396);
    sub_F58E2C((uint64_t)&v422, v54, v363, (uint64_t)&v388, v25, v15);
    if (SHIBYTE(v397) < 0) {
      operator delete(v396[0]);
    }
    uint64_t v55 = (void **)v415;
    if (v415)
    {
      uint64_t v56 = (void **)v416;
      std::string::size_type v57 = v415;
      if ((void *)v416 != v415)
      {
        do
        {
          if (*((char *)v56 - 1) < 0) {
            operator delete(*(v56 - 3));
          }
          v56 -= 3;
        }
        while (v56 != v55);
        std::string::size_type v57 = v415;
      }
      *(void *)&long long v416 = v55;
      operator delete(v57);
      long long v9 = (uint64_t *)v363;
    }
    if (SHIBYTE(v404[2]) < 0) {
      operator delete((void *)v404[0]);
    }
    HIBYTE(v404[2]) = 19;
    strcpy((char *)v404, "CyclingPathAnalyzer");
    v396[1] = 0;
    v396[0] = 0;
    uint64_t v397 = 0;
    uint64_t v74 = sub_374CDC((uint64_t)v9, (uint64_t)v404, (uint64_t *)v396);
    HIBYTE(v414) = 7;
    strcpy((char *)&v412, "default");
    uint64_t v75 = (void *)sub_560F4(v74, (uint64_t)&v412);
    sub_1066CA8((uint64_t **)&v415, v9, v75, 2);
    if (SHIBYTE(v414) < 0) {
      operator delete(v412);
    }
    uint64_t v76 = (void **)v396[0];
    if (v396[0])
    {
      uint64_t v77 = (void **)v396[1];
      long long v78 = v396[0];
      if (v396[1] != v396[0])
      {
        do
        {
          if (*((char *)v77 - 1) < 0) {
            operator delete(*(v77 - 3));
          }
          v77 -= 3;
        }
        while (v77 != v76);
        long long v78 = v396[0];
      }
      v396[1] = v76;
      operator delete(v78);
      long long v9 = (uint64_t *)v363;
    }
    if (SHIBYTE(v404[2]) < 0) {
      operator delete((void *)v404[0]);
    }
    HIBYTE(v397) = 7;
    strcpy((char *)v396, "cycling");
    sub_106FA2C((uint64_t)v404, v9, (uint64_t)v396, 2);
    if (SHIBYTE(v397) < 0) {
      operator delete(v396[0]);
    }
    uint64_t v79 = sub_37B3A8((uint64_t)v9);
    uint64_t v80 = *(void *)v79;
    int v403 = *(_DWORD *)(v79 + 8);
    uint64_t v402 = v80;
    int v81 = *(char **)(v2 + 56);
    unsigned int v361 = *(char **)(v2 + 64);
    if (v81 != v361)
    {
      while (1)
      {
        long long v413 = 0;
        uint64_t v412 = 0;
        unint64_t v414 = 0;
        v396[0] = (void *)v2;
        uint64_t v364 = v81;
        v396[1] = v81;
        uint64_t v397 = v366;
        uint64_t v398 = &v402;
        char v399 = 2;
        sub_F42554();
        v394[1] = 0;
        v394[0] = 0;
        uint64_t v395 = 0;
        if (v400 != v401 && sub_EAE43C(v401 - 59))
        {
          v396[0] = (void *)v2;
          v396[1] = v81;
          uint64_t v397 = v366;
          uint64_t v398 = &v402;
          char v399 = 2;
          sub_F6A3A8();
          int v84 = (void **)v394[0];
          if (v394[0])
          {
            int v85 = (char *)v394[1];
            std::string::size_type v86 = v394[0];
            if (v394[1] != v394[0])
            {
              do
              {
                int v87 = (void *)*((void *)v85 - 28);
                if (v87)
                {
                  *((void *)v85 - 27) = v87;
                  operator delete(v87);
                }
                uint64_t v88 = (void *)*((void *)v85 - 31);
                if (v88)
                {
                  *((void *)v85 - 30) = v88;
                  operator delete(v88);
                }
                int v89 = (void *)*((void *)v85 - 39);
                if (v89)
                {
                  *((void *)v85 - 38) = v89;
                  operator delete(v89);
                }
                int v90 = (void *)*((void *)v85 - 42);
                if (v90)
                {
                  *((void *)v85 - 41) = v90;
                  operator delete(v90);
                }
                uint64_t v91 = *((void *)v85 - 45);
                if (v91)
                {
                  uint64_t v92 = *((void *)v85 - 44);
                  int v93 = (void *)*((void *)v85 - 45);
                  if (v92 != v91)
                  {
                    do
                    {
                      unint64_t v94 = *(void **)(v92 - 24);
                      if (v94)
                      {
                        *(void *)(v92 - 16) = v94;
                        operator delete(v94);
                      }
                      v92 -= 56;
                    }
                    while (v92 != v91);
                    int v93 = (void *)*((void *)v85 - 45);
                  }
                  *((void *)v85 - 44) = v91;
                  operator delete(v93);
                }
                uint64_t v95 = (void *)*((void *)v85 - 56);
                if (v95)
                {
                  *((void *)v85 - 55) = v95;
                  operator delete(v95);
                }
                uint64_t v96 = (void **)(v85 - 472);
                if (*(v85 - 449) < 0) {
                  operator delete(*v96);
                }
                v85 -= 472;
              }
              while (v96 != v84);
              std::string::size_type v86 = v394[0];
            }
            v394[1] = v84;
            operator delete(v86);
          }
          *(_OWORD *)unint64_t v394 = *(_OWORD *)v392;
          uint64_t v395 = v393;
          long long v9 = (uint64_t *)v363;
        }
        v389[9578] = 0;
        sub_ED7C40((uint64_t)v389);
        sub_C63080((uint64_t)&v390);
        sub_C6328C((uint64_t)&v391);
        sub_107989C((uint64_t)v394, (uint64_t)&v415, (uint64_t)v404, v9);
        unint64_t v97 = (void **)v400;
        uint64_t v98 = v401;
        if (v400 != v401)
        {
          char v99 = v413;
          while (1)
          {
            if ((unint64_t)v99 < v414)
            {
              long long v107 = *(_OWORD *)v97;
              v99[2] = (void **)v97[2];
              *(_OWORD *)char v99 = v107;
              v97[1] = 0;
              v97[2] = 0;
              *unint64_t v97 = 0;
              v99[3] = 0;
              v99[4] = 0;
              v99[5] = 0;
              *(_OWORD *)(v99 + 3) = *(_OWORD *)(v97 + 3);
              v99[5] = (void **)v97[5];
              v97[3] = 0;
              v97[4] = 0;
              v97[5] = 0;
              long long v108 = *((_OWORD *)v97 + 3);
              long long v109 = *((_OWORD *)v97 + 4);
              long long v110 = *((_OWORD *)v97 + 5);
              *(_OWORD *)((char *)v99 + 94) = *(_OWORD *)((char *)v97 + 94);
              *((_OWORD *)v99 + 4) = v109;
              *((_OWORD *)v99 + 5) = v110;
              *((_OWORD *)v99 + 3) = v108;
              v99[15] = 0;
              v99[16] = 0;
              v99[14] = 0;
              *((_OWORD *)v99 + 7) = *((_OWORD *)v97 + 7);
              v99[16] = (void **)v97[16];
              v97[14] = 0;
              v97[15] = 0;
              v97[16] = 0;
              v99[17] = 0;
              v99[18] = 0;
              v99[19] = 0;
              *(_OWORD *)(v99 + 17) = *(_OWORD *)(v97 + 17);
              v99[19] = (void **)v97[19];
              v97[17] = 0;
              v97[18] = 0;
              v97[19] = 0;
              v99[20] = 0;
              v99[21] = 0;
              v99[22] = 0;
              *((_OWORD *)v99 + 10) = *((_OWORD *)v97 + 10);
              v99[22] = (void **)v97[22];
              v97[20] = 0;
              v97[21] = 0;
              v97[22] = 0;
              long long v111 = *(_OWORD *)(v97 + 23);
              int v112 = (void **)v97[27];
              *(_OWORD *)(v99 + 25) = *(_OWORD *)(v97 + 25);
              *(_OWORD *)(v99 + 23) = v111;
              v99[27] = v112;
              v99[28] = 0;
              v99[29] = 0;
              v99[30] = 0;
              *((_OWORD *)v99 + 14) = *((_OWORD *)v97 + 14);
              v99[30] = (void **)v97[30];
              v97[28] = 0;
              v97[29] = 0;
              v97[30] = 0;
              v99[31] = 0;
              v99[32] = 0;
              v99[33] = 0;
              *(_OWORD *)(v99 + 31) = *(_OWORD *)(v97 + 31);
              v99[33] = (void **)v97[33];
              v97[31] = 0;
              v97[32] = 0;
              v97[33] = 0;
              *((_OWORD *)v99 + 17) = *((_OWORD *)v97 + 17);
              *((_DWORD *)v99 + 74) = *((_DWORD *)v97 + 74);
              if (*((_DWORD *)v97 + 74) < 2u) {
                v99[36] = (void **)v97[36];
              }
              *((_OWORD *)v99 + 19) = *((_OWORD *)v97 + 19);
              long long v100 = *((_OWORD *)v97 + 25);
              long long v102 = *((_OWORD *)v97 + 22);
              long long v101 = *((_OWORD *)v97 + 23);
              *((_OWORD *)v99 + 24) = *((_OWORD *)v97 + 24);
              *((_OWORD *)v99 + 25) = v100;
              *((_OWORD *)v99 + 22) = v102;
              *((_OWORD *)v99 + 23) = v101;
              long long v104 = *((_OWORD *)v97 + 27);
              long long v103 = *((_OWORD *)v97 + 28);
              long long v105 = *((_OWORD *)v97 + 26);
              *(void ***)((char *)v99 + 463) = *(void ***)((char *)v97 + 463);
              *((_OWORD *)v99 + 27) = v104;
              *((_OWORD *)v99 + 28) = v103;
              *((_OWORD *)v99 + 26) = v105;
              long long v106 = *((_OWORD *)v97 + 21);
              *((_OWORD *)v99 + 20) = *((_OWORD *)v97 + 20);
              *((_OWORD *)v99 + 21) = v106;
              v99 += 59;
              goto LABEL_203;
            }
            unint64_t v113 = 0xCBEEA4E1A08AD8F3 * (((char *)v99 - (unsigned char *)v412) >> 3);
            unint64_t v114 = v113 + 1;
            if (v113 + 1 > 0x8AD8F2FBA93868) {
LABEL_542:
            }
              sub_2E00();
            if (0x97DD49C34115B1E6 * ((uint64_t)(v414 - (void)v412) >> 3) > v114) {
              unint64_t v114 = 0x97DD49C34115B1E6 * ((uint64_t)(v414 - (void)v412) >> 3);
            }
            unint64_t v115 = 0xCBEEA4E1A08AD8F3 * ((uint64_t)(v414 - (void)v412) >> 3) >= 0x456C797DD49C34
                 ? 0x8AD8F2FBA93868
                 : v114;
            if (v115)
            {
              if (v115 > 0x8AD8F2FBA93868) {
LABEL_543:
              }
                sub_188D718();
              std::string v116 = (char *)operator new(472 * v115);
            }
            else
            {
              std::string v116 = 0;
            }
            uint64_t v117 = &v116[472 * v113];
            long long v118 = *(_OWORD *)v97;
            *((void *)v117 + 2) = v97[2];
            *(_OWORD *)uint64_t v117 = v118;
            v97[1] = 0;
            v97[2] = 0;
            *unint64_t v97 = 0;
            *((void *)v117 + 3) = 0;
            *((void *)v117 + 4) = 0;
            *((void *)v117 + 5) = 0;
            *(_OWORD *)(v117 + 24) = *(_OWORD *)(v97 + 3);
            *((void *)v117 + 5) = v97[5];
            v97[3] = 0;
            v97[4] = 0;
            v97[5] = 0;
            long long v119 = *((_OWORD *)v97 + 3);
            long long v120 = *((_OWORD *)v97 + 4);
            long long v121 = *((_OWORD *)v97 + 5);
            *(_OWORD *)(v117 + 94) = *(_OWORD *)((char *)v97 + 94);
            *((_OWORD *)v117 + 4) = v120;
            *((_OWORD *)v117 + 5) = v121;
            *((_OWORD *)v117 + 3) = v119;
            *((void *)v117 + 15) = 0;
            *((void *)v117 + 16) = 0;
            *((void *)v117 + 14) = 0;
            *((_OWORD *)v117 + 7) = *((_OWORD *)v97 + 7);
            *((void *)v117 + 16) = v97[16];
            v97[14] = 0;
            v97[15] = 0;
            v97[16] = 0;
            *((void *)v117 + 17) = 0;
            *((void *)v117 + 18) = 0;
            *((void *)v117 + 19) = 0;
            *(_OWORD *)(v117 + 136) = *(_OWORD *)(v97 + 17);
            *((void *)v117 + 19) = v97[19];
            v97[17] = 0;
            v97[18] = 0;
            v97[19] = 0;
            *((void *)v117 + 20) = 0;
            *((void *)v117 + 21) = 0;
            *((void *)v117 + 22) = 0;
            *((_OWORD *)v117 + 10) = *((_OWORD *)v97 + 10);
            *((void *)v117 + 22) = v97[22];
            v97[20] = 0;
            v97[21] = 0;
            v97[22] = 0;
            long long v122 = *(_OWORD *)(v97 + 23);
            char v123 = v97[27];
            *(_OWORD *)(v117 + 200) = *(_OWORD *)(v97 + 25);
            *(_OWORD *)(v117 + 184) = v122;
            *((void *)v117 + 27) = v123;
            *((void *)v117 + 28) = 0;
            *((void *)v117 + 29) = 0;
            *((void *)v117 + 30) = 0;
            *((_OWORD *)v117 + 14) = *((_OWORD *)v97 + 14);
            *((void *)v117 + 30) = v97[30];
            v97[28] = 0;
            v97[29] = 0;
            v97[30] = 0;
            *((void *)v117 + 31) = 0;
            *((void *)v117 + 32) = 0;
            *((void *)v117 + 33) = 0;
            *(_OWORD *)(v117 + 248) = *(_OWORD *)(v97 + 31);
            *((void *)v117 + 33) = v97[33];
            v97[31] = 0;
            v97[32] = 0;
            v97[33] = 0;
            *((_OWORD *)v117 + 17) = *((_OWORD *)v97 + 17);
            *((_DWORD *)v117 + 74) = *((_DWORD *)v97 + 74);
            if (*((_DWORD *)v97 + 74) <= 1u) {
              *((void *)v117 + 36) = v97[36];
            }
            uint64_t v124 = &v116[472 * v115];
            uint64_t v125 = &v116[472 * v113];
            *((_OWORD *)v125 + 19) = *((_OWORD *)v97 + 19);
            long long v126 = *((_OWORD *)v97 + 25);
            long long v128 = *((_OWORD *)v97 + 22);
            long long v127 = *((_OWORD *)v97 + 23);
            *((_OWORD *)v125 + 24) = *((_OWORD *)v97 + 24);
            *((_OWORD *)v125 + 25) = v126;
            *((_OWORD *)v125 + 22) = v128;
            *((_OWORD *)v125 + 23) = v127;
            long long v130 = *((_OWORD *)v97 + 27);
            long long v129 = *((_OWORD *)v97 + 28);
            long long v131 = *((_OWORD *)v97 + 26);
            *(void *)(v125 + 463) = *(void **)((char *)v97 + 463);
            *((_OWORD *)v125 + 27) = v130;
            *((_OWORD *)v125 + 28) = v129;
            *((_OWORD *)v125 + 26) = v131;
            long long v132 = *((_OWORD *)v97 + 21);
            *((_OWORD *)v125 + 20) = *((_OWORD *)v97 + 20);
            *((_OWORD *)v125 + 21) = v132;
            char v99 = (void ***)(v117 + 472);
            uint64_t v133 = (void **)v413;
            uint64_t v134 = (void **)v412;
            if (v413 != v412) {
              break;
            }
            uint64_t v412 = v117;
            long long v413 = (void ***)(v117 + 472);
            unint64_t v414 = (unint64_t)v124;
            if (v133) {
              goto LABEL_250;
            }
LABEL_203:
            long long v413 = v99;
            v97 += 59;
            if (v97 == v98) {
              goto LABEL_251;
            }
          }
          uint64_t v135 = 0;
          do
          {
            long long v144 = &v117[v135 * 8];
            uint64_t v145 = (uint64_t)&v117[v135 * 8 - 472];
            char v146 = &v133[v135];
            uint64_t v147 = (uint64_t)&v133[v135 - 59];
            long long v148 = *(_OWORD *)v147;
            *(void *)(v145 + 16) = v133[v135 - 57];
            *(_OWORD *)uint64_t v145 = v148;
            *(void *)(v147 + 8) = 0;
            *(void *)(v147 + 16) = 0;
            *(void *)uint64_t v147 = 0;
            uint64_t v149 = &v117[v135 * 8 - 448];
            uint64_t v150 = (uint64_t)&v133[v135 - 56];
            *(void *)&v117[v135 * 8 - 440] = 0;
            *(void *)uint64_t v149 = 0;
            *((void *)v149 + 2) = 0;
            *(_OWORD *)uint64_t v149 = *(_OWORD *)v150;
            *(void *)&v117[v135 * 8 - 432] = v133[v135 - 54];
            v133[v135 - 55] = 0;
            *(void *)uint64_t v150 = 0;
            *(void *)(v150 + 16) = 0;
            int v151 = &v117[v135 * 8 - 424];
            long long v152 = *(_OWORD *)&v133[v135 - 53];
            long long v153 = *(_OWORD *)&v133[v135 - 51];
            long long v154 = *(_OWORD *)&v133[v135 - 49];
            *(_OWORD *)(v151 + 46) = *(_OWORD *)((char *)&v133[v135 - 47] - 2);
            *((_OWORD *)v151 + 1) = v153;
            *((_OWORD *)v151 + 2) = v154;
            *(_OWORD *)int v151 = v152;
            int v155 = &v117[v135 * 8 - 360];
            uint64_t v156 = (uint64_t)&v133[v135 - 45];
            *((void *)v155 + 1) = 0;
            *((void *)v155 + 2) = 0;
            *(void *)int v155 = 0;
            *(_OWORD *)int v155 = *(_OWORD *)v156;
            *(void *)&v117[v135 * 8 - 344] = v133[v135 - 43];
            v133[v135 - 44] = 0;
            *(void *)uint64_t v156 = 0;
            *(void *)(v156 + 16) = 0;
            uint64_t v157 = &v117[v135 * 8 - 336];
            uint64_t v158 = (uint64_t)&v133[v135 - 42];
            *(void *)&v117[v135 * 8 - 328] = 0;
            *(void *)uint64_t v157 = 0;
            *((void *)v157 + 2) = 0;
            *(_OWORD *)uint64_t v157 = *(_OWORD *)v158;
            *(void *)&v117[v135 * 8 - 320] = v133[v135 - 40];
            v133[v135 - 41] = 0;
            *(void *)uint64_t v158 = 0;
            *(void *)(v158 + 16) = 0;
            uint64_t v159 = &v117[v135 * 8 - 312];
            uint64_t v160 = (uint64_t)&v133[v135 - 39];
            *(void *)&v117[v135 * 8 - 304] = 0;
            *(void *)uint64_t v159 = 0;
            *((void *)v159 + 2) = 0;
            *(_OWORD *)uint64_t v159 = *(_OWORD *)v160;
            *(void *)&v117[v135 * 8 - 296] = v133[v135 - 37];
            v133[v135 - 38] = 0;
            *(void *)uint64_t v160 = 0;
            *(void *)(v160 + 16) = 0;
            uint64_t v161 = &v117[v135 * 8 - 288];
            long long v162 = *(_OWORD *)&v133[v135 - 34];
            uint64_t v163 = v133[v135 - 32];
            *(_OWORD *)uint64_t v161 = *(_OWORD *)&v133[v135 - 36];
            *((_OWORD *)v161 + 1) = v162;
            *((void *)v144 - 32) = v163;
            *((void *)v144 - 31) = 0;
            *((void *)v144 - 30) = 0;
            *((void *)v144 - 29) = 0;
            *(_OWORD *)(v144 - 248) = *(_OWORD *)&v133[v135 - 31];
            *((void *)v144 - 29) = v133[v135 - 29];
            *(v146 - 31) = 0;
            *(v146 - 30) = 0;
            *(v146 - 29) = 0;
            *((void *)v144 - 28) = 0;
            *((void *)v144 - 27) = 0;
            *((void *)v144 - 26) = 0;
            *((_OWORD *)v144 - 14) = *(_OWORD *)&v133[v135 - 28];
            *((void *)v144 - 26) = v133[v135 - 26];
            *(v146 - 28) = 0;
            *(v146 - 27) = 0;
            *(v146 - 26) = 0;
            *(_OWORD *)(v144 - 200) = *(_OWORD *)&v133[v135 - 25];
            *((_DWORD *)v144 - 44) = v133[v135 - 22];
            if (LODWORD(v133[v135 - 22]) < 2) {
              *((void *)v144 - 23) = *(v146 - 23);
            }
            uint64_t v136 = &v117[v135 * 8];
            *(_OWORD *)(v136 - 168) = *(_OWORD *)&v133[v135 - 21];
            long long v137 = *(_OWORD *)&v133[v135 - 13];
            long long v138 = *(_OWORD *)&v133[v135 - 11];
            long long v139 = *(_OWORD *)&v133[v135 - 9];
            *(_OWORD *)(v136 - 120) = *(_OWORD *)&v133[v135 - 15];
            *(_OWORD *)(v136 - 72) = v139;
            *(_OWORD *)(v136 - 88) = v138;
            *(_OWORD *)(v136 - 104) = v137;
            long long v140 = *(_OWORD *)&v133[v135 - 5];
            long long v141 = *(_OWORD *)&v133[v135 - 3];
            uint64_t v142 = *(uint64_t *)((char *)&v133[v135 - 1] - 1);
            *(_OWORD *)(v136 - 56) = *(_OWORD *)&v133[v135 - 7];
            *(void *)(v136 - 9) = v142;
            *(_OWORD *)(v136 - 24) = v141;
            *(_OWORD *)(v136 - 40) = v140;
            long long v143 = *(_OWORD *)&v133[v135 - 19];
            *(_OWORD *)(v136 - 136) = *(_OWORD *)&v133[v135 - 17];
            *(_OWORD *)(v136 - 152) = v143;
            v135 -= 59;
          }
          while (&v133[v135] != v134);
          uint64_t v133 = (void **)v412;
          int v164 = v413;
          uint64_t v412 = &v117[v135 * 8];
          long long v413 = (void ***)(v117 + 472);
          unint64_t v414 = (unint64_t)v124;
          if (v164 != (void ***)v133)
          {
            do
            {
              uint64_t v165 = *(v164 - 28);
              if (v165)
              {
                *(v164 - 27) = v165;
                operator delete(v165);
              }
              uint64_t v166 = *(v164 - 31);
              if (v166)
              {
                *(v164 - 30) = v166;
                operator delete(v166);
              }
              BOOL v167 = *(v164 - 39);
              if (v167)
              {
                *(v164 - 38) = v167;
                operator delete(v167);
              }
              BOOL v168 = *(v164 - 42);
              if (v168)
              {
                *(v164 - 41) = v168;
                operator delete(v168);
              }
              int v169 = *(v164 - 45);
              if (v169)
              {
                char v170 = *(v164 - 44);
                uint64_t v171 = *(v164 - 45);
                if (v170 != v169)
                {
                  do
                  {
                    uint64_t v172 = *(v170 - 3);
                    if (v172)
                    {
                      *(v170 - 2) = v172;
                      operator delete(v172);
                    }
                    v170 -= 7;
                  }
                  while (v170 != v169);
                  uint64_t v171 = *(v164 - 45);
                }
                *(v164 - 44) = v169;
                operator delete(v171);
              }
              char v173 = *(v164 - 56);
              if (v173)
              {
                *(v164 - 55) = v173;
                operator delete(v173);
              }
              uint64_t v174 = (void **)(v164 - 59);
              if (*((char *)v164 - 449) < 0) {
                operator delete(*v174);
              }
              v164 -= 59;
            }
            while (v174 != v133);
          }
          if (!v133) {
            goto LABEL_203;
          }
LABEL_250:
          operator delete(v133);
          goto LABEL_203;
        }
LABEL_251:
        std::string::size_type v175 = (char *)v394[0];
        long long v176 = (char *)v394[1];
        if (v394[0] != v394[1]) {
          break;
        }
LABEL_303:
        v396[1] = 0;
        v396[0] = 0;
        uint64_t v397 = 0;
        sub_EB6674((unint64_t)v396, (long long **)&v412, 1);
        sub_C62F74(v396, (uint64_t)v392);
        uint64_t v83 = v364;
        uint64_t v253 = v368;
        uint64_t v3 = v365;
        if ((unint64_t)v368 >= *((void *)&v368 + 1))
        {
          *(void *)&long long v368 = sub_C63460(&v367, (uint64_t)v392);
          if (v392[0])
          {
            sub_C64384((uint64_t)v392, (void **)v392[0]);
            operator delete(v392[0]);
          }
        }
        else
        {
          *(_OWORD *)long long v368 = 0uLL;
          *(void *)(v253 + 16) = 0;
          *(_OWORD *)uint64_t v253 = *(_OWORD *)v392;
          *(void *)(v253 + 16) = v393;
          *(void *)&long long v368 = v253 + 24;
        }
        uint64_t v254 = (void **)v396[0];
        if (v396[0])
        {
          uint64_t v255 = (char *)v396[1];
          int v256 = v396[0];
          if (v396[1] != v396[0])
          {
            do
            {
              v257 = (void *)*((void *)v255 - 28);
              if (v257)
              {
                *((void *)v255 - 27) = v257;
                operator delete(v257);
              }
              uint64_t v258 = (void *)*((void *)v255 - 31);
              if (v258)
              {
                *((void *)v255 - 30) = v258;
                operator delete(v258);
              }
              unint64_t v259 = (void *)*((void *)v255 - 39);
              if (v259)
              {
                *((void *)v255 - 38) = v259;
                operator delete(v259);
              }
              uint64_t v260 = (void *)*((void *)v255 - 42);
              if (v260)
              {
                *((void *)v255 - 41) = v260;
                operator delete(v260);
              }
              uint64_t v261 = *((void *)v255 - 45);
              if (v261)
              {
                uint64_t v262 = *((void *)v255 - 44);
                v263 = (void *)*((void *)v255 - 45);
                if (v262 != v261)
                {
                  do
                  {
                    uint64_t v264 = *(void **)(v262 - 24);
                    if (v264)
                    {
                      *(void *)(v262 - 16) = v264;
                      operator delete(v264);
                    }
                    v262 -= 56;
                  }
                  while (v262 != v261);
                  v263 = (void *)*((void *)v255 - 45);
                }
                *((void *)v255 - 44) = v261;
                operator delete(v263);
              }
              long long v265 = (void *)*((void *)v255 - 56);
              if (v265)
              {
                *((void *)v255 - 55) = v265;
                operator delete(v265);
              }
              int v266 = (void **)(v255 - 472);
              if (*(v255 - 449) < 0) {
                operator delete(*v266);
              }
              v255 -= 472;
            }
            while (v266 != v254);
            int v256 = v396[0];
          }
          v396[1] = v254;
          operator delete(v256);
          uint64_t v83 = v364;
        }
        unint64_t v267 = (void **)v394[0];
        if (v394[0])
        {
          unint64_t v268 = (char *)v394[1];
          unint64_t v269 = v394[0];
          if (v394[1] != v394[0])
          {
            do
            {
              uint64_t v270 = (void *)*((void *)v268 - 28);
              if (v270)
              {
                *((void *)v268 - 27) = v270;
                operator delete(v270);
              }
              uint64_t v271 = (void *)*((void *)v268 - 31);
              if (v271)
              {
                *((void *)v268 - 30) = v271;
                operator delete(v271);
              }
              v272 = (void *)*((void *)v268 - 39);
              if (v272)
              {
                *((void *)v268 - 38) = v272;
                operator delete(v272);
              }
              uint64_t v273 = (void *)*((void *)v268 - 42);
              if (v273)
              {
                *((void *)v268 - 41) = v273;
                operator delete(v273);
              }
              uint64_t v274 = *((void *)v268 - 45);
              if (v274)
              {
                uint64_t v275 = *((void *)v268 - 44);
                long long v276 = (void *)*((void *)v268 - 45);
                if (v275 != v274)
                {
                  do
                  {
                    unsigned int v277 = *(void **)(v275 - 24);
                    if (v277)
                    {
                      *(void *)(v275 - 16) = v277;
                      operator delete(v277);
                    }
                    v275 -= 56;
                  }
                  while (v275 != v274);
                  long long v276 = (void *)*((void *)v268 - 45);
                }
                *((void *)v268 - 44) = v274;
                operator delete(v276);
              }
              unint64_t v278 = (void *)*((void *)v268 - 56);
              if (v278)
              {
                *((void *)v268 - 55) = v278;
                operator delete(v278);
              }
              unint64_t v279 = (void **)(v268 - 472);
              if (*(v268 - 449) < 0) {
                operator delete(*v279);
              }
              v268 -= 472;
            }
            while (v279 != v267);
            unint64_t v269 = v394[0];
          }
          v394[1] = v267;
          operator delete(v269);
          uint64_t v83 = v364;
        }
        v280 = (void **)v400;
        if (v400)
        {
          uint64_t v281 = v401;
          int v282 = v400;
          if (v401 != v400)
          {
            do
            {
              v283 = *(v281 - 28);
              if (v283)
              {
                *(v281 - 27) = v283;
                operator delete(v283);
              }
              uint64_t v284 = *(v281 - 31);
              if (v284)
              {
                *(v281 - 30) = v284;
                operator delete(v284);
              }
              unint64_t v285 = *(v281 - 39);
              if (v285)
              {
                *(v281 - 38) = v285;
                operator delete(v285);
              }
              v286 = *(v281 - 42);
              if (v286)
              {
                *(v281 - 41) = v286;
                operator delete(v286);
              }
              uint64_t v287 = (char *)*(v281 - 45);
              if (v287)
              {
                int8x8_t v288 = (char *)*(v281 - 44);
                uint8x8_t v289 = *(v281 - 45);
                if (v288 != v287)
                {
                  do
                  {
                    unint64_t v290 = (void *)*((void *)v288 - 3);
                    if (v290)
                    {
                      *((void *)v288 - 2) = v290;
                      operator delete(v290);
                    }
                    v288 -= 56;
                  }
                  while (v288 != v287);
                  uint8x8_t v289 = *(v281 - 45);
                }
                *(v281 - 44) = v287;
                operator delete(v289);
              }
              uint64_t v291 = *(v281 - 56);
              if (v291)
              {
                *(v281 - 55) = v291;
                operator delete(v291);
              }
              unint64_t v292 = v281 - 59;
              if (*((char *)v281 - 449) < 0) {
                operator delete(*v292);
              }
              v281 -= 59;
            }
            while (v292 != v280);
            int v282 = v400;
          }
          unsigned int v401 = v280;
          operator delete(v282);
          uint64_t v83 = v364;
        }
        v293 = (void **)v412;
        if (v412)
        {
          uint64_t v294 = v413;
          int v82 = v412;
          if (v413 != v412)
          {
            do
            {
              v295 = *(v294 - 28);
              if (v295)
              {
                *(v294 - 27) = v295;
                operator delete(v295);
              }
              unint64_t v296 = *(v294 - 31);
              if (v296)
              {
                *(v294 - 30) = v296;
                operator delete(v296);
              }
              unsigned int v297 = *(v294 - 39);
              if (v297)
              {
                *(v294 - 38) = v297;
                operator delete(v297);
              }
              uint64_t v298 = *(v294 - 42);
              if (v298)
              {
                *(v294 - 41) = v298;
                operator delete(v298);
              }
              v299 = *(v294 - 45);
              if (v299)
              {
                uint64_t v300 = *(v294 - 44);
                v301 = *(v294 - 45);
                if (v300 != v299)
                {
                  do
                  {
                    uint64_t v302 = *(v300 - 3);
                    if (v302)
                    {
                      *(v300 - 2) = v302;
                      operator delete(v302);
                    }
                    v300 -= 7;
                  }
                  while (v300 != v299);
                  v301 = *(v294 - 45);
                }
                *(v294 - 44) = v299;
                operator delete(v301);
              }
              uint64_t v303 = *(v294 - 56);
              if (v303)
              {
                *(v294 - 55) = v303;
                operator delete(v303);
              }
              int v304 = (void **)(v294 - 59);
              if (*((char *)v294 - 449) < 0) {
                operator delete(*v304);
              }
              v294 -= 59;
            }
            while (v304 != v293);
            int v82 = v412;
          }
          long long v413 = (void ***)v293;
          operator delete(v82);
          uint64_t v83 = v364;
        }
        int v81 = v83 + 40;
        uint64_t v2 = v362;
        long long v9 = (uint64_t *)v363;
        if (v81 == v361) {
          goto LABEL_409;
        }
      }
      uint64_t v177 = v413;
      while (1)
      {
        if ((unint64_t)v177 < v414)
        {
          long long v185 = *(_OWORD *)v175;
          v177[2] = (void **)*((void *)v175 + 2);
          *(_OWORD *)uint64_t v177 = v185;
          *((void *)v175 + 1) = 0;
          *((void *)v175 + 2) = 0;
          *(void *)std::string::size_type v175 = 0;
          v177[3] = 0;
          v177[4] = 0;
          v177[5] = 0;
          *(_OWORD *)(v177 + 3) = *(_OWORD *)(v175 + 24);
          v177[5] = (void **)*((void *)v175 + 5);
          *((void *)v175 + 3) = 0;
          *((void *)v175 + 4) = 0;
          *((void *)v175 + 5) = 0;
          long long v186 = *((_OWORD *)v175 + 3);
          long long v187 = *((_OWORD *)v175 + 4);
          long long v188 = *((_OWORD *)v175 + 5);
          *(_OWORD *)((char *)v177 + 94) = *(_OWORD *)(v175 + 94);
          *((_OWORD *)v177 + 4) = v187;
          *((_OWORD *)v177 + 5) = v188;
          *((_OWORD *)v177 + 3) = v186;
          v177[15] = 0;
          v177[16] = 0;
          v177[14] = 0;
          *((_OWORD *)v177 + 7) = *((_OWORD *)v175 + 7);
          v177[16] = (void **)*((void *)v175 + 16);
          *((void *)v175 + 14) = 0;
          *((void *)v175 + 15) = 0;
          *((void *)v175 + 16) = 0;
          v177[17] = 0;
          v177[18] = 0;
          v177[19] = 0;
          *(_OWORD *)(v177 + 17) = *(_OWORD *)(v175 + 136);
          v177[19] = (void **)*((void *)v175 + 19);
          *((void *)v175 + 17) = 0;
          *((void *)v175 + 18) = 0;
          *((void *)v175 + 19) = 0;
          v177[20] = 0;
          v177[21] = 0;
          v177[22] = 0;
          *((_OWORD *)v177 + 10) = *((_OWORD *)v175 + 10);
          v177[22] = (void **)*((void *)v175 + 22);
          *((void *)v175 + 20) = 0;
          *((void *)v175 + 21) = 0;
          *((void *)v175 + 22) = 0;
          long long v189 = *(_OWORD *)(v175 + 184);
          long long v190 = (void **)*((void *)v175 + 27);
          *(_OWORD *)(v177 + 25) = *(_OWORD *)(v175 + 200);
          *(_OWORD *)(v177 + 23) = v189;
          v177[27] = v190;
          v177[28] = 0;
          v177[29] = 0;
          v177[30] = 0;
          *((_OWORD *)v177 + 14) = *((_OWORD *)v175 + 14);
          v177[30] = (void **)*((void *)v175 + 30);
          *((void *)v175 + 28) = 0;
          *((void *)v175 + 29) = 0;
          *((void *)v175 + 30) = 0;
          v177[31] = 0;
          v177[32] = 0;
          v177[33] = 0;
          *(_OWORD *)(v177 + 31) = *(_OWORD *)(v175 + 248);
          v177[33] = (void **)*((void *)v175 + 33);
          *((void *)v175 + 31) = 0;
          *((void *)v175 + 32) = 0;
          *((void *)v175 + 33) = 0;
          *((_OWORD *)v177 + 17) = *((_OWORD *)v175 + 17);
          *((_DWORD *)v177 + 74) = *((_DWORD *)v175 + 74);
          if (*((_DWORD *)v175 + 74) < 2u) {
            v177[36] = (void **)*((void *)v175 + 36);
          }
          *((_OWORD *)v177 + 19) = *((_OWORD *)v175 + 19);
          long long v178 = *((_OWORD *)v175 + 25);
          long long v180 = *((_OWORD *)v175 + 22);
          long long v179 = *((_OWORD *)v175 + 23);
          *((_OWORD *)v177 + 24) = *((_OWORD *)v175 + 24);
          *((_OWORD *)v177 + 25) = v178;
          *((_OWORD *)v177 + 22) = v180;
          *((_OWORD *)v177 + 23) = v179;
          long long v182 = *((_OWORD *)v175 + 27);
          long long v181 = *((_OWORD *)v175 + 28);
          long long v183 = *((_OWORD *)v175 + 26);
          *(void ***)((char *)v177 + 463) = *(void ***)(v175 + 463);
          *((_OWORD *)v177 + 27) = v182;
          *((_OWORD *)v177 + 28) = v181;
          *((_OWORD *)v177 + 26) = v183;
          long long v184 = *((_OWORD *)v175 + 21);
          *((_OWORD *)v177 + 20) = *((_OWORD *)v175 + 20);
          *((_OWORD *)v177 + 21) = v184;
          v177 += 59;
          goto LABEL_255;
        }
        unint64_t v191 = 0xCBEEA4E1A08AD8F3 * (((char *)v177 - (unsigned char *)v412) >> 3);
        unint64_t v192 = v191 + 1;
        if (v191 + 1 > 0x8AD8F2FBA93868) {
          goto LABEL_542;
        }
        if (0x97DD49C34115B1E6 * ((uint64_t)(v414 - (void)v412) >> 3) > v192) {
          unint64_t v192 = 0x97DD49C34115B1E6 * ((uint64_t)(v414 - (void)v412) >> 3);
        }
        unint64_t v193 = 0xCBEEA4E1A08AD8F3 * ((uint64_t)(v414 - (void)v412) >> 3) >= 0x456C797DD49C34
             ? 0x8AD8F2FBA93868
             : v192;
        if (v193)
        {
          if (v193 > 0x8AD8F2FBA93868) {
            goto LABEL_543;
          }
          __n128 v194 = (char *)operator new(472 * v193);
        }
        else
        {
          __n128 v194 = 0;
        }
        char v195 = &v194[472 * v191];
        long long v196 = *(_OWORD *)v175;
        *((void *)v195 + 2) = *((void *)v175 + 2);
        *(_OWORD *)char v195 = v196;
        *((void *)v175 + 1) = 0;
        *((void *)v175 + 2) = 0;
        *(void *)std::string::size_type v175 = 0;
        *((void *)v195 + 3) = 0;
        *((void *)v195 + 4) = 0;
        *((void *)v195 + 5) = 0;
        *(_OWORD *)(v195 + 24) = *(_OWORD *)(v175 + 24);
        *((void *)v195 + 5) = *((void *)v175 + 5);
        *((void *)v175 + 3) = 0;
        *((void *)v175 + 4) = 0;
        *((void *)v175 + 5) = 0;
        long long v197 = *((_OWORD *)v175 + 3);
        long long v198 = *((_OWORD *)v175 + 4);
        long long v199 = *((_OWORD *)v175 + 5);
        *(_OWORD *)(v195 + 94) = *(_OWORD *)(v175 + 94);
        *((_OWORD *)v195 + 4) = v198;
        *((_OWORD *)v195 + 5) = v199;
        *((_OWORD *)v195 + 3) = v197;
        *((void *)v195 + 15) = 0;
        *((void *)v195 + 16) = 0;
        *((void *)v195 + 14) = 0;
        *((_OWORD *)v195 + 7) = *((_OWORD *)v175 + 7);
        *((void *)v195 + 16) = *((void *)v175 + 16);
        *((void *)v175 + 14) = 0;
        *((void *)v175 + 15) = 0;
        *((void *)v175 + 16) = 0;
        *((void *)v195 + 17) = 0;
        *((void *)v195 + 18) = 0;
        *((void *)v195 + 19) = 0;
        *(_OWORD *)(v195 + 136) = *(_OWORD *)(v175 + 136);
        *((void *)v195 + 19) = *((void *)v175 + 19);
        *((void *)v175 + 17) = 0;
        *((void *)v175 + 18) = 0;
        *((void *)v175 + 19) = 0;
        *((void *)v195 + 20) = 0;
        *((void *)v195 + 21) = 0;
        *((void *)v195 + 22) = 0;
        *((_OWORD *)v195 + 10) = *((_OWORD *)v175 + 10);
        *((void *)v195 + 22) = *((void *)v175 + 22);
        *((void *)v175 + 20) = 0;
        *((void *)v175 + 21) = 0;
        *((void *)v175 + 22) = 0;
        long long v200 = *(_OWORD *)(v175 + 184);
        uint64_t v201 = *((void *)v175 + 27);
        *(_OWORD *)(v195 + 200) = *(_OWORD *)(v175 + 200);
        *(_OWORD *)(v195 + 184) = v200;
        *((void *)v195 + 27) = v201;
        *((void *)v195 + 28) = 0;
        *((void *)v195 + 29) = 0;
        *((void *)v195 + 30) = 0;
        *((_OWORD *)v195 + 14) = *((_OWORD *)v175 + 14);
        *((void *)v195 + 30) = *((void *)v175 + 30);
        *((void *)v175 + 28) = 0;
        *((void *)v175 + 29) = 0;
        *((void *)v175 + 30) = 0;
        *((void *)v195 + 31) = 0;
        *((void *)v195 + 32) = 0;
        *((void *)v195 + 33) = 0;
        *(_OWORD *)(v195 + 248) = *(_OWORD *)(v175 + 248);
        *((void *)v195 + 33) = *((void *)v175 + 33);
        *((void *)v175 + 31) = 0;
        *((void *)v175 + 32) = 0;
        *((void *)v175 + 33) = 0;
        *((_OWORD *)v195 + 17) = *((_OWORD *)v175 + 17);
        *((_DWORD *)v195 + 74) = *((_DWORD *)v175 + 74);
        if (*((_DWORD *)v175 + 74) <= 1u) {
          *((void *)v195 + 36) = *((void *)v175 + 36);
        }
        int v202 = &v194[472 * v193];
        char v203 = &v194[472 * v191];
        *((_OWORD *)v203 + 19) = *((_OWORD *)v175 + 19);
        long long v204 = *((_OWORD *)v175 + 25);
        long long v206 = *((_OWORD *)v175 + 22);
        long long v205 = *((_OWORD *)v175 + 23);
        *((_OWORD *)v203 + 24) = *((_OWORD *)v175 + 24);
        *((_OWORD *)v203 + 25) = v204;
        *((_OWORD *)v203 + 22) = v206;
        *((_OWORD *)v203 + 23) = v205;
        long long v208 = *((_OWORD *)v175 + 27);
        long long v207 = *((_OWORD *)v175 + 28);
        long long v209 = *((_OWORD *)v175 + 26);
        *(void *)(v203 + 463) = *(void *)(v175 + 463);
        *((_OWORD *)v203 + 27) = v208;
        *((_OWORD *)v203 + 28) = v207;
        *((_OWORD *)v203 + 26) = v209;
        long long v210 = *((_OWORD *)v175 + 21);
        *((_OWORD *)v203 + 20) = *((_OWORD *)v175 + 20);
        *((_OWORD *)v203 + 21) = v210;
        uint64_t v177 = (void ***)(v195 + 472);
        unint64_t v211 = (void **)v413;
        v212 = (void **)v412;
        if (v413 != v412) {
          break;
        }
        uint64_t v412 = v195;
        long long v413 = (void ***)(v195 + 472);
        unint64_t v414 = (unint64_t)v202;
        if (v211) {
          goto LABEL_302;
        }
LABEL_255:
        long long v413 = v177;
        v175 += 472;
        if (v175 == v176) {
          goto LABEL_303;
        }
      }
      uint64_t v213 = 0;
      do
      {
        uint64_t v222 = &v195[v213 * 8];
        uint64_t v223 = (uint64_t)&v195[v213 * 8 - 472];
        unint64_t v224 = &v211[v213];
        uint64_t v225 = (uint64_t)&v211[v213 - 59];
        long long v226 = *(_OWORD *)v225;
        *(void *)(v223 + 16) = v211[v213 - 57];
        *(_OWORD *)uint64_t v223 = v226;
        *(void *)(v225 + 8) = 0;
        *(void *)(v225 + 16) = 0;
        *(void *)uint64_t v225 = 0;
        char v227 = &v195[v213 * 8 - 448];
        uint64_t v228 = (uint64_t)&v211[v213 - 56];
        *(void *)&v195[v213 * 8 - 440] = 0;
        *(void *)char v227 = 0;
        *((void *)v227 + 2) = 0;
        *(_OWORD *)char v227 = *(_OWORD *)v228;
        *(void *)&v195[v213 * 8 - 432] = v211[v213 - 54];
        v211[v213 - 55] = 0;
        *(void *)uint64_t v228 = 0;
        *(void *)(v228 + 16) = 0;
        long double v229 = &v195[v213 * 8 - 424];
        long long v230 = *(_OWORD *)&v211[v213 - 53];
        long long v231 = *(_OWORD *)&v211[v213 - 51];
        long long v232 = *(_OWORD *)&v211[v213 - 49];
        *(_OWORD *)(v229 + 46) = *(_OWORD *)((char *)&v211[v213 - 47] - 2);
        *((_OWORD *)v229 + 1) = v231;
        *((_OWORD *)v229 + 2) = v232;
        *(_OWORD *)long double v229 = v230;
        uint64_t v233 = &v195[v213 * 8 - 360];
        uint64_t v234 = (uint64_t)&v211[v213 - 45];
        *((void *)v233 + 1) = 0;
        *((void *)v233 + 2) = 0;
        *(void *)uint64_t v233 = 0;
        *(_OWORD *)uint64_t v233 = *(_OWORD *)v234;
        *(void *)&v195[v213 * 8 - 344] = v211[v213 - 43];
        v211[v213 - 44] = 0;
        *(void *)uint64_t v234 = 0;
        *(void *)(v234 + 16) = 0;
        uint64_t v235 = &v195[v213 * 8 - 336];
        uint64_t v236 = (uint64_t)&v211[v213 - 42];
        *(void *)&v195[v213 * 8 - 328] = 0;
        *(void *)uint64_t v235 = 0;
        *((void *)v235 + 2) = 0;
        *(_OWORD *)uint64_t v235 = *(_OWORD *)v236;
        *(void *)&v195[v213 * 8 - 320] = v211[v213 - 40];
        v211[v213 - 41] = 0;
        *(void *)uint64_t v236 = 0;
        *(void *)(v236 + 16) = 0;
        uint64_t v237 = &v195[v213 * 8 - 312];
        uint64_t v238 = (uint64_t)&v211[v213 - 39];
        *(void *)&v195[v213 * 8 - 304] = 0;
        *(void *)uint64_t v237 = 0;
        *((void *)v237 + 2) = 0;
        *(_OWORD *)uint64_t v237 = *(_OWORD *)v238;
        *(void *)&v195[v213 * 8 - 296] = v211[v213 - 37];
        v211[v213 - 38] = 0;
        *(void *)uint64_t v238 = 0;
        *(void *)(v238 + 16) = 0;
        long double v239 = &v195[v213 * 8 - 288];
        long long v240 = *(_OWORD *)&v211[v213 - 34];
        long double v241 = v211[v213 - 32];
        *(_OWORD *)long double v239 = *(_OWORD *)&v211[v213 - 36];
        *((_OWORD *)v239 + 1) = v240;
        *((void *)v222 - 32) = v241;
        *((void *)v222 - 31) = 0;
        *((void *)v222 - 30) = 0;
        *((void *)v222 - 29) = 0;
        *(_OWORD *)(v222 - 248) = *(_OWORD *)&v211[v213 - 31];
        *((void *)v222 - 29) = v211[v213 - 29];
        *(v224 - 31) = 0;
        *(v224 - 30) = 0;
        *(v224 - 29) = 0;
        *((void *)v222 - 28) = 0;
        *((void *)v222 - 27) = 0;
        *((void *)v222 - 26) = 0;
        *((_OWORD *)v222 - 14) = *(_OWORD *)&v211[v213 - 28];
        *((void *)v222 - 26) = v211[v213 - 26];
        *(v224 - 28) = 0;
        *(v224 - 27) = 0;
        *(v224 - 26) = 0;
        *(_OWORD *)(v222 - 200) = *(_OWORD *)&v211[v213 - 25];
        *((_DWORD *)v222 - 44) = v211[v213 - 22];
        if (LODWORD(v211[v213 - 22]) < 2) {
          *((void *)v222 - 23) = *(v224 - 23);
        }
        int v214 = &v195[v213 * 8];
        *(_OWORD *)(v214 - 168) = *(_OWORD *)&v211[v213 - 21];
        long long v215 = *(_OWORD *)&v211[v213 - 13];
        long long v216 = *(_OWORD *)&v211[v213 - 11];
        long long v217 = *(_OWORD *)&v211[v213 - 9];
        *(_OWORD *)(v214 - 120) = *(_OWORD *)&v211[v213 - 15];
        *(_OWORD *)(v214 - 72) = v217;
        *(_OWORD *)(v214 - 88) = v216;
        *(_OWORD *)(v214 - 104) = v215;
        long long v218 = *(_OWORD *)&v211[v213 - 5];
        long long v219 = *(_OWORD *)&v211[v213 - 3];
        uint64_t v220 = *(uint64_t *)((char *)&v211[v213 - 1] - 1);
        *(_OWORD *)(v214 - 56) = *(_OWORD *)&v211[v213 - 7];
        *(void *)(v214 - 9) = v220;
        *(_OWORD *)(v214 - 24) = v219;
        *(_OWORD *)(v214 - 40) = v218;
        long long v221 = *(_OWORD *)&v211[v213 - 19];
        *(_OWORD *)(v214 - 136) = *(_OWORD *)&v211[v213 - 17];
        *(_OWORD *)(v214 - 152) = v221;
        v213 -= 59;
      }
      while (&v211[v213] != v212);
      unint64_t v211 = (void **)v412;
      uint64_t v242 = v413;
      uint64_t v412 = &v195[v213 * 8];
      long long v413 = (void ***)(v195 + 472);
      unint64_t v414 = (unint64_t)v202;
      if (v242 != (void ***)v211)
      {
        do
        {
          uint64_t v243 = *(v242 - 28);
          if (v243)
          {
            *(v242 - 27) = v243;
            operator delete(v243);
          }
          v244 = *(v242 - 31);
          if (v244)
          {
            *(v242 - 30) = v244;
            operator delete(v244);
          }
          unint64_t v245 = *(v242 - 39);
          if (v245)
          {
            *(v242 - 38) = v245;
            operator delete(v245);
          }
          unint64_t v246 = *(v242 - 42);
          if (v246)
          {
            *(v242 - 41) = v246;
            operator delete(v246);
          }
          char v247 = *(v242 - 45);
          if (v247)
          {
            uint64_t v248 = *(v242 - 44);
            v249 = *(v242 - 45);
            if (v248 != v247)
            {
              do
              {
                uint64_t v250 = *(v248 - 3);
                if (v250)
                {
                  *(v248 - 2) = v250;
                  operator delete(v250);
                }
                v248 -= 7;
              }
              while (v248 != v247);
              v249 = *(v242 - 45);
            }
            *(v242 - 44) = v247;
            operator delete(v249);
          }
          uint64_t v251 = *(v242 - 56);
          if (v251)
          {
            *(v242 - 55) = v251;
            operator delete(v251);
          }
          unint64_t v252 = (void **)(v242 - 59);
          if (*((char *)v242 - 449) < 0) {
            operator delete(*v252);
          }
          v242 -= 59;
        }
        while (v252 != v211);
      }
      if (!v211) {
        goto LABEL_255;
      }
LABEL_302:
      operator delete(v211);
      goto LABEL_255;
    }
LABEL_409:
    if (v410)
    {
      uint64_t v411 = v410;
      operator delete(v410);
    }
    sub_32834C(&v409);
    if (v408 < 0)
    {
      operator delete(v407);
      if ((v421 & 0x80000000) == 0)
      {
LABEL_413:
        int v305 = (void ***)*v3;
        if (!*v3) {
          goto LABEL_443;
        }
        goto LABEL_436;
      }
    }
    else if ((v421 & 0x80000000) == 0)
    {
      goto LABEL_413;
    }
    operator delete(v420);
    int v305 = (void ***)*v3;
    if (!*v3)
    {
LABEL_443:
      double v313 = v367;
      *uint64_t v3 = v367;
      long long v316 = v368;
      goto LABEL_501;
    }
LABEL_436:
    uint64_t v314 = (void ***)v3[1];
    if (v314 != v305)
    {
      long long v315 = v314 - 3;
      do
      {
        if (*v315)
        {
          sub_C64384((uint64_t)v315, *v315);
          operator delete(*v315);
        }
        BOOL v52 = v315 == v305;
        v315 -= 3;
      }
      while (!v52);
      int v305 = (void ***)*v3;
    }
    operator delete(v305);
    *uint64_t v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
    goto LABEL_443;
  }
  long long v413 = 0;
  uint64_t v412 = 0;
  unint64_t v414 = 0;
  v404[0] = (uint64_t)operator new(0x19uLL);
  *(_OWORD *)&v404[1] = xmmword_20B9250;
  strcpy((char *)v404[0], "WaypointPathComputation");
  long long v416 = 0uLL;
  unsigned int v415 = 0;
  long long v32 = sub_374CDC((uint64_t)v9, (uint64_t)v404, (uint64_t *)&v415);
  HIBYTE(v424[2]) = 7;
  strcpy((char *)v424, "default");
  uint64_t v33 = sub_560F4(v32, (uint64_t)v424);
  if (SHIBYTE(v424[2]) < 0) {
    operator delete(v424[0]);
  }
  double v34 = (void **)v415;
  if (v415)
  {
    uint64_t v35 = (void **)v416;
    long long v36 = v415;
    if ((void *)v416 != v415)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 3;
      }
      while (v35 != v34);
      long long v36 = v415;
    }
    *(void *)&long long v416 = v34;
    operator delete(v36);
  }
  if (SHIBYTE(v404[2]) < 0) {
    operator delete((void *)v404[0]);
  }
  HIBYTE(v404[2]) = 18;
  strcpy((char *)v404, "CyclingPathFinding");
  long long v416 = 0uLL;
  unsigned int v415 = 0;
  uint64_t v42 = v363;
  long long v43 = sub_374CDC(v363, (uint64_t)v404, (uint64_t *)&v415);
  HIBYTE(v424[2]) = 21;
  strcpy((char *)v424, "waypoint_path_finding");
  unint64_t v44 = (void *)sub_560F4(v43, (uint64_t)v424);
  if (SHIBYTE(v424[2]) < 0) {
    operator delete(v424[0]);
  }
  unint64_t v45 = (void **)v415;
  if (v415)
  {
    unint64_t v46 = (void **)v416;
    unint64_t v47 = v415;
    if ((void *)v416 != v415)
    {
      do
      {
        if (*((char *)v46 - 1) < 0) {
          operator delete(*(v46 - 3));
        }
        v46 -= 3;
      }
      while (v46 != v45);
      unint64_t v47 = v415;
    }
    *(void *)&long long v416 = v45;
    operator delete(v47);
    uint64_t v42 = v363;
  }
  if (SHIBYTE(v404[2]) < 0) {
    operator delete((void *)v404[0]);
  }
  int v58 = *(_DWORD *)(v2 + 116);
  v404[0] = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)&v404[1] = xmmword_20B91C0;
  strcpy((char *)v404[0], "enforce_single_leg_paths");
  if (!sub_29D62C(v44, (uint64_t)v404))
  {
    unsigned int v415 = operator new(0x19uLL);
    long long v416 = xmmword_20B9250;
    strcpy((char *)v415, "enforce_multi_leg_paths");
    int v59 = sub_29D62C(v44, (uint64_t)&v415) | ((v58 & 8) >> 3);
    if (SHIBYTE(v416) < 0)
    {
      operator delete(v415);
      if ((SHIBYTE(v404[2]) & 0x80000000) == 0) {
        goto LABEL_121;
      }
    }
    else if ((SHIBYTE(v404[2]) & 0x80000000) == 0)
    {
      goto LABEL_121;
    }
    goto LABEL_120;
  }
  int v59 = 0;
  if (SHIBYTE(v404[2]) < 0) {
LABEL_120:
  }
    operator delete((void *)v404[0]);
LABEL_121:
  sub_F6FC9C((uint64_t)v404, v33, v42, (uint64_t)&v388, v25, v15);
  sub_C64F14(v424, (uint64_t *)(v2 + 32));
  uint64_t v60 = *(void *)(v2 + 56);
  unsigned int v415 = (void *)v2;
  *(void *)&long long v416 = v424;
  *((void *)&v416 + 1) = v60;
  uint64_t v417 = (void *)v366;
  uint64_t v418 = 0;
  sub_F4501C();
  long long v416 = 0uLL;
  unsigned int v415 = 0;
  sub_EB6674((unint64_t)&v415, &v422, 1);
  if (v59) {
    sub_C649C4((uint64_t)&v415, (uint64_t ***)(v2 + 32), (int64x2_t *)v396);
  }
  else {
    sub_C62F74(&v415, (uint64_t)v396);
  }
  int v61 = v413;
  if ((unint64_t)v413 >= v414)
  {
    long long v413 = sub_C63460((void ****)&v412, (uint64_t)v396);
    if (v396[0])
    {
      sub_C64384((uint64_t)v396, (void **)v396[0]);
      operator delete(v396[0]);
    }
  }
  else
  {
    *long long v413 = 0;
    v61[1] = 0;
    v61[2] = 0;
    *(_OWORD *)int v61 = *(_OWORD *)v396;
    v61[2] = (void **)v397;
    long long v413 = v61 + 3;
  }
  uint64_t v62 = v415;
  if (v415)
  {
    uint64_t v63 = v416;
    long long v64 = v415;
    if ((void *)v416 != v415)
    {
      do
        uint64_t v63 = sub_405F44(v63 - 472);
      while ((void *)v63 != v62);
      long long v64 = v415;
    }
    *(void *)&long long v416 = v62;
    operator delete(v64);
  }
  uint64_t v65 = v422;
  if (v422)
  {
    uint64_t v66 = (uint64_t)v423;
    int64_t v67 = v422;
    if (v423 != v422)
    {
      do
        uint64_t v66 = sub_405F44(v66 - 472);
      while ((long long *)v66 != v65);
      int64_t v67 = v422;
    }
    int v423 = v65;
    operator delete(v67);
  }
  unint64_t v68 = (char *)v424[0];
  if (v424[0])
  {
    uint64_t v69 = v424[1];
    uint64_t v70 = v424[0];
    if (v424[1] != v424[0])
    {
      unint64_t v71 = (char *)v424[1];
      do
      {
        uint64_t v73 = (void *)*((void *)v71 - 4);
        v71 -= 32;
        long long v72 = v73;
        if (v73)
        {
          *(v69 - 3) = v72;
          operator delete(v72);
        }
        uint64_t v69 = v71;
      }
      while (v71 != v68);
      uint64_t v70 = v424[0];
    }
    v424[1] = v68;
    operator delete(v70);
  }
  uint64_t v306 = (void **)v405;
  if (v405)
  {
    uint64_t v307 = v406;
    uint64_t v308 = v405;
    if (v406 != v405)
    {
      do
      {
        if (*((char *)v307 - 1) < 0) {
          operator delete(*(v307 - 3));
        }
        v307 -= 4;
      }
      while (v307 != v306);
      uint64_t v308 = v405;
    }
    v406 = v306;
    operator delete(v308);
  }
  uint8x8_t v309 = (void ***)*v3;
  long long v9 = (uint64_t *)v363;
  v310 = &v412;
  if (*v3)
  {
    uint64_t v311 = (void ***)v3[1];
    if (v311 != v309)
    {
      uint64_t v312 = v311 - 3;
      do
      {
        if (*v312)
        {
          sub_C64384((uint64_t)v312, *v312);
          operator delete(*v312);
        }
        BOOL v52 = v312 == v309;
        v312 -= 3;
      }
      while (!v52);
      uint8x8_t v309 = (void ***)*v3;
    }
    operator delete(v309);
    *uint64_t v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
  }
  double v313 = (void ***)v412;
LABEL_500:
  *uint64_t v3 = v313;
  long long v316 = *(_OWORD *)(v310 + 1);
LABEL_501:
  *(_OWORD *)(v3 + 1) = v316;
  unsigned int v345 = (void ***)v316;
  while (v313 != v345)
  {
    unsigned int v346 = (uint64_t *)sub_40EFE8((uint64_t)v313);
    for (uint64_t i = sub_52058((uint64_t)v313); v346 != (uint64_t *)i; uint64_t i = sub_52058((uint64_t)v313))
    {
      if (sub_EA9868(v346)) {
        v346 += 6;
      }
      else {
        unsigned int v346 = (uint64_t *)sub_EB6ECC((uint64_t)v313, (uint64_t)v346);
      }
    }
    v313 += 3;
  }
LABEL_510:
  v404[0] = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)&v404[1] = xmmword_20B8870;
  strcpy((char *)v404[0], "enable_arc_cost_debugging");
  BOOL v348 = sub_29D62C(v386, (uint64_t)v404);
  BOOL v349 = v348;
  if ((SHIBYTE(v404[2]) & 0x80000000) == 0)
  {
    if (v348) {
      goto LABEL_512;
    }
LABEL_520:
    v356 = v374;
    if (!v374) {
      goto LABEL_522;
    }
    goto LABEL_521;
  }
  operator delete((void *)v404[0]);
  if (!v349) {
    goto LABEL_520;
  }
LABEL_512:
  sub_1077378(v404, v9);
  unint64_t v350 = (int *)sub_37B3A8((uint64_t)v9);
  uint64_t v352 = *v3;
  uint64_t v351 = v3[1];
  if (*v3 != v351)
  {
    int v353 = *v350;
    do
    {
      uint64_t v354 = (char **)sub_40EFE8(v352);
      for (uint64_t j = sub_52058(v352); v354 != (char **)j; v354 += 6)
        sub_107737C(v404, v354, (int *)v366, v353, 0);
      v352 += 24;
    }
    while (v352 != v351);
  }
  sub_C65128((uint64_t)v404);
  v356 = v374;
  if (v374)
  {
LABEL_521:
    uint64_t v375 = v356;
    operator delete(v356);
  }
LABEL_522:
  if (v372)
  {
    unint64_t v373 = v372;
    operator delete(v372);
  }
  if (v370)
  {
    long double v371 = v370;
    operator delete(v370);
  }
  if (v382)
  {
    int v383 = v382;
    operator delete(v382);
  }
  sub_32834C(&v381);
  if (v380 < 0)
  {
    operator delete(v379);
    if ((v385 & 0x80000000) == 0)
    {
LABEL_530:
      uint64_t v357 = v387;
      if (!v387) {
        goto LABEL_534;
      }
      goto LABEL_538;
    }
  }
  else if ((v385 & 0x80000000) == 0)
  {
    goto LABEL_530;
  }
  operator delete(v384[12]);
  uint64_t v357 = v387;
  if (!v387) {
    goto LABEL_534;
  }
  do
  {
LABEL_538:
    uint64_t v360 = (void **)*v357;
    sub_55198((uint64_t)(v357 + 5));
    if (*((char *)v357 + 39) < 0) {
      operator delete(v357[2]);
    }
    operator delete(v357);
    uint64_t v357 = v360;
  }
  while (v360);
LABEL_534:
  uint64_t v358 = v386[0];
  v386[0] = 0;
  if (v358) {
    operator delete(v358);
  }
  return sub_C65284(&v388);
}

void sub_C62404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void ****a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  sub_C63044((void ***)&STACK[0x48A0]);
  sub_4323C0((void **)&STACK[0x68C0]);
  sub_4323C0((void **)(v44 - 248));
  sub_C64510((void **)(v44 - 176));
  sub_C64EA0((uint64_t)&STACK[0x48F0]);
  sub_C628C4((void ****)&STACK[0x68A8]);
  sub_C628C4(a19);
  sub_C62948(&a24);
  sub_C6299C((uint64_t)&a44);
  if (SLOBYTE(STACK[0x213F]) < 0) {
    operator delete((void *)STACK[0x2128]);
  }
  sub_5450C((uint64_t)&STACK[0x2180]);
  sub_C65284(&STACK[0x21A8]);
  _Unwind_Resume(a1);
}

void ****sub_C628C4(void ****a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 3;
      do
      {
        if (*v5)
        {
          sub_C64384((uint64_t)v5, *v5);
          operator delete(*v5);
        }
        BOOL v6 = v5 == v2;
        v5 -= 3;
      }
      while (!v6);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void *sub_C62948(void *a1)
{
  uint64_t v2 = (void *)a1[17];
  if (v2)
  {
    a1[18] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[13];
  if (v3)
  {
    a1[14] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[6];
  if (v4)
  {
    a1[7] = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_C6299C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8056);
  if (v2)
  {
    *(void *)(a1 + 8064) = v2;
    operator delete(v2);
  }
  sub_32834C((void *)(a1 + 232));
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  return a1;
}

uint64_t sub_C629F8(uint64_t a1, void *a2)
{
  *(void *)a1 = sub_3750CC(a2);
  sub_ED6F04(a1 + 8, a2);
  *(void *)(a1 + 4168) = sub_3750CC(a2);
  sub_F5A844((void *)(a1 + 4176), a2);
  uint64_t v4 = (_DWORD *)sub_374D14(a2);
  sub_29AEC4(v4);
  sub_F170F0((uint64_t *)(a1 + 4232), a2);
  uint64_t v5 = sub_375E94(a2);
  uint64_t v6 = sub_375FD8(a2);
  *(void *)(a1 + 4280) = v5;
  *(void *)(a1 + 4288) = v6;
  sub_FA2874((void **)(a1 + 4296), a2);
  sub_FB8514((void **)(a1 + 4408), a2, (void *)(a1 + 4296));
  uint64_t v7 = sub_375FD8(a2);
  *(unsigned char *)(a1 + 9584) = sub_383034(v7, 1u, 1) != 0;
  *(unsigned char *)(a1 + 9585) = sub_37D0C8(a2);
  *(unsigned char *)(a1 + 9586) = 0;
  *(unsigned char *)(a1 + 9618) = 0;
  *(void *)(a1 + 9620) = 0;
  *(void *)(a1 + 9608) = 0x3E4CCCCD3F000000;
  *(_WORD *)(a1 + 9628) = 0;
  *(unsigned char *)(a1 + 9630) = 1;
  *(void *)(a1 + 9640) = 0;
  *(void *)(a1 + 9632) = 0;
  *(void *)(a1 + 9664) = 0;
  *(void *)(a1 + 9592) = 16;
  *(void *)(a1 + 9600) = 6;
  *(unsigned char *)(a1 + 9616) = 0;
  *(_WORD *)(a1 + 9697) = 0;
  *(_DWORD *)(a1 + 9700) = 0;
  *(void *)(a1 + 9688) = 0x3E4CCCCD3F000000;
  *(_DWORD *)(a1 + 9736) = 0;
  *(_OWORD *)(a1 + 9704) = 0u;
  *(_OWORD *)(a1 + 9720) = 0u;
  *(_WORD *)(a1 + 9740) = -1;
  *(unsigned char *)(a1 + 9742) = 0;
  *(_OWORD *)(a1 + 9744) = 0u;
  *(_OWORD *)(a1 + 9760) = 0u;
  *(_DWORD *)(a1 + 9776) = 0;
  *(_WORD *)(a1 + 9780) = -1;
  *(unsigned char *)(a1 + 9782) = 0;
  *(_DWORD *)(a1 + 9784) = 0;
  *(unsigned char *)(a1 + 9788) &= 0xF8u;
  *(void *)(a1 + 9792) = 0;
  *(void *)(a1 + 9800) = 0;
  *(void *)(a1 + 9808) = 32;
  *(_OWORD *)(a1 + 9832) = 0u;
  *(_OWORD *)(a1 + 9816) = 0u;
  uint64_t v8 = (_OWORD *)(a1 + 9816);
  *(_DWORD *)(a1 + 9848) = 0;
  *(_WORD *)(a1 + 9852) = -1;
  *(unsigned char *)(a1 + 9854) = 0;
  *(_DWORD *)(a1 + 9888) = 0;
  *(_OWORD *)(a1 + 9872) = 0u;
  *(_OWORD *)(a1 + 9856) = 0u;
  *(_WORD *)(a1 + 9892) = -1;
  *(unsigned char *)(a1 + 9894) = 0;
  *(_DWORD *)(a1 + 9896) = 0;
  *(unsigned char *)(a1 + 9900) &= 0xF8u;
  *(void *)(a1 + 9904) = 0;
  *(void *)(a1 + 9672) = 16;
  *(void *)(a1 + 9680) = 6;
  *(unsigned char *)(a1 + 9696) = 0;
  *(unsigned char *)(a1 + 9617) = 1;
  *(_OWORD *)(a1 + 9648) = xmmword_20F02D0;
  long long v9 = (char *)malloc_type_malloc(0x100uLL, 0x100004087442A64uLL);
  *(void *)(a1 + 9664) = v9;
  uint64_t v10 = *(void *)(a1 + 9648);
  if (v10)
  {
    uint64_t v11 = (const double *)(a1 + 9656);
    unint64_t v12 = (v10 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v12 >= 0x11)
    {
      if ((unint64_t)v9 >= a1 + 9664 || (uint64_t v13 = v9, v11 >= (const double *)&v9[8 * v10]))
      {
        unint64_t v14 = v12 + 1;
        uint64_t v13 = &v9[8 * (v14 & 0x3FFFFFFFFFFFFFFCLL)];
        float64x2_t v15 = vld1q_dup_f64(v11);
        uint64_t v16 = (float64x2_t *)(v9 + 16);
        uint64_t v17 = v14 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v16[-1] = v15;
          float64x2_t *v16 = v15;
          v16 += 2;
          v17 -= 4;
        }
        while (v17);
        if (v14 == (v14 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_11;
        }
      }
    }
    else
    {
      uint64_t v13 = v9;
    }
    uint64_t v18 = &v9[8 * v10];
    do
    {
      *(double *)uint64_t v13 = *v11;
      v13 += 8;
    }
    while (v13 != v18);
  }
LABEL_11:
  memset(&v28[1], 0, 32);
  *uint64_t v8 = 0u;
  *(_OWORD *)(a1 + 9832) = 0u;
  *(_OWORD *)(a1 + 9855) = *(_OWORD *)v28;
  *(unsigned char *)(a1 + 9697) = 1;
  *(_DWORD *)(a1 + 9848) = 0;
  *(_WORD *)(a1 + 9852) = -1;
  *(unsigned char *)(a1 + 9854) = 0;
  *(_OWORD *)(a1 + 9871) = *(_OWORD *)&v28[16];
  *(void *)(a1 + 9884) = 0;
  *(_WORD *)(a1 + 9892) = -1;
  *(unsigned char *)(a1 + 9894) = 0;
  *(_DWORD *)(a1 + 9896) = 0;
  size_t v19 = 88 * *(void *)(a1 + 9808);
  *(unsigned char *)(a1 + 9900) = 0;
  unint64_t v20 = malloc_type_malloc(v19, 0x1060040E0BA42A6uLL);
  *(void *)(a1 + 9904) = v20;
  uint64_t v21 = *(void *)(a1 + 9808);
  if (v21)
  {
    uint64_t v22 = 88 * v21;
    do
    {
      long long v23 = *(_OWORD *)(a1 + 9832);
      *unint64_t v20 = *v8;
      v20[1] = v23;
      long long v24 = *(_OWORD *)(a1 + 9848);
      long long v25 = *(_OWORD *)(a1 + 9864);
      long long v26 = *(_OWORD *)(a1 + 9880);
      *((void *)v20 + 10) = *(void *)(a1 + 9896);
      v20[3] = v25;
      v20[4] = v26;
      v20[2] = v24;
      unint64_t v20 = (_OWORD *)((char *)v20 + 88);
      v22 -= 88;
    }
    while (v22);
  }
  return a1;
}

void sub_C62DAC(_Unwind_Exception *a1)
{
  uint64_t v5 = (void *)v1[1238];
  if (v5) {
    free(v5);
  }
  uint64_t v6 = (void *)v1[1208];
  if (v6) {
    free(v6);
  }
  sub_C62ED8(v3);
  uint64_t v7 = (void *)v1[545];
  if (v7)
  {
    v1[546] = v7;
    operator delete(v7);
    uint64_t v8 = (void *)v1[532];
    if (!v8)
    {
LABEL_7:
      long long v9 = (void *)v1[526];
      if (!v9) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v8 = (void *)v1[532];
    if (!v8) {
      goto LABEL_7;
    }
  }
  v1[533] = v8;
  operator delete(v8);
  long long v9 = (void *)v1[526];
  if (!v9)
  {
LABEL_8:
    sub_C62E9C(v2);
    _Unwind_Resume(a1);
  }
LABEL_11:
  v1[527] = v9;
  operator delete(v9);
  sub_C62E9C(v2);
  _Unwind_Resume(a1);
}

void *sub_C62E9C(void *a1)
{
  uint64_t v2 = (void *)a1[517];
  if (v2)
  {
    a1[518] = v2;
    operator delete(v2);
  }
  sub_3A6318(a1 + 1);
  return a1;
}

void *sub_C62ED8(void *a1)
{
  uint64_t v2 = (void *)a1[643];
  if (v2)
  {
    a1[644] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[640];
  if (v3)
  {
    a1[641] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[636];
  if (v4)
  {
    a1[637] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[633];
  if (v5)
  {
    a1[634] = v5;
    operator delete(v5);
  }
  sub_328138((uint64_t)(a1 + 537));
  uint64_t v6 = (void *)a1[529];
  if (v6)
  {
    a1[530] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[520];
  if (v7)
  {
    a1[521] = v7;
    operator delete(v7);
  }
  sub_3A6318(a1 + 4);
  return a1;
}

double sub_C62F74@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  long long v9 = 0uLL;
  uint64_t v10 = 0;
  unsigned int v4 = sub_EB6658(a1);
  sub_C635D8((unint64_t *)&v9, v4);
  uint64_t v5 = (char *)*((void *)&v9 + 1);
  uint64_t v6 = (long long *)sub_40EFE8((uint64_t)a1);
  uint64_t v7 = (long long *)sub_52058((uint64_t)a1);
  sub_C638BC(v6, v7, (char **)&v9, v5);
  if (*(void *)a2)
  {
    sub_C64384(a2, *(void ***)a2);
    operator delete(*(void **)a2);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  double result = *(double *)&v9;
  *(_OWORD *)a2 = v9;
  *(void *)(a2 + 16) = v10;
  return result;
}

void sub_C63024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_C63044(&a9);
  sub_C63044(v9);
  _Unwind_Resume(a1);
}

void ***sub_C63044(void ***a1)
{
  if (*a1)
  {
    sub_C64384((uint64_t)a1, *a1);
    operator delete(*a1);
  }
  return a1;
}

double sub_C63080(uint64_t a1)
{
  LODWORD(result) = *(_DWORD *)(a1 + 16);
  unint64_t v2 = 4;
  if (!vcvts_n_u32_f32(*(float *)&result, 2uLL))
  {
    do
    {
      if ((v2 & 0x8000000000000000) != 0)
      {
        exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_2E18(exception, "resize overflow");
      }
      v2 *= 2;
    }
    while (!(unint64_t)(float)(*(float *)&result * (float)v2));
  }
  if (*(void *)(a1 + 48) || v2 != *(void *)(a1 + 56))
  {
    *(void *)&double result = sub_C63140(a1, v2).u64[0];
  }
  return result;
}

void sub_C6312C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64x2_t sub_C63140(uint64_t a1, unint64_t a2)
{
  unsigned int v4 = *(char **)(a1 + 72);
  if (!v4)
  {
    uint64_t v5 = (char *)malloc_type_malloc(8 * a2, 0x100004087442A64uLL);
LABEL_6:
    *(void *)(a1 + 72) = v5;
    unsigned int v4 = v5;
    goto LABEL_7;
  }
  if (*(void *)(a1 + 56) != a2)
  {
    uint64_t v5 = (char *)malloc_type_realloc(*(void **)(a1 + 72), 8 * a2, 0x100004087442A64uLL);
    if (!v5)
    {
      fprintf(__stderrp, "sparsehash: FATAL ERROR: failed to reallocate %lu elements for ptr %p", a2, v4);
      exit(1);
    }
    goto LABEL_6;
  }
LABEL_7:
  if (a2)
  {
    uint64_t v6 = (const double *)(a1 + 64);
    unint64_t v7 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v8 = v4;
    if (v7 < 0xF) {
      goto LABEL_18;
    }
    if ((unint64_t)v4 < a1 + 72)
    {
      uint64_t v8 = v4;
      if (v6 < (const double *)&v4[8 * a2]) {
        goto LABEL_18;
      }
    }
    unint64_t v9 = v7 + 1;
    uint64_t v8 = &v4[8 * (v9 & 0x3FFFFFFFFFFFFFFCLL)];
    float64x2_t v10 = vld1q_dup_f64(v6);
    uint64_t v11 = (float64x2_t *)(v4 + 16);
    uint64_t v12 = v9 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11[-1] = v10;
      *uint64_t v11 = v10;
      v11 += 2;
      v12 -= 4;
    }
    while (v12);
    if (v9 != (v9 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_18:
      do
      {
        *(double *)uint64_t v8 = *v6;
        v8 += 8;
      }
      while (v8 != &v4[8 * a2]);
    }
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = a2;
  uint64x2_t result = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)a2)));
  *(uint64x2_t *)a1 = result;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

double sub_C6328C(uint64_t a1)
{
  LODWORD(result) = *(_DWORD *)(a1 + 16);
  unint64_t v2 = 4;
  if (!vcvts_n_u32_f32(*(float *)&result, 2uLL))
  {
    do
    {
      if ((v2 & 0x8000000000000000) != 0)
      {
        exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_2E18(exception, "resize overflow");
      }
      v2 *= 2;
    }
    while (!(unint64_t)(float)(*(float *)&result * (float)v2));
  }
  if (*(void *)(a1 + 128) || v2 != *(void *)(a1 + 136))
  {
    *(void *)&double result = sub_C6334C(a1, v2).u64[0];
  }
  return result;
}

void sub_C63338(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64x2_t sub_C6334C(uint64_t a1, unint64_t a2)
{
  unsigned int v4 = *(_OWORD **)(a1 + 232);
  if (v4)
  {
    if (*(void *)(a1 + 136) == a2) {
      goto LABEL_7;
    }
    uint64_t v5 = malloc_type_realloc(*(void **)(a1 + 232), 88 * a2, 0x1060040E0BA42A6uLL);
    if (!v5)
    {
      fprintf(__stderrp, "sparsehash: FATAL ERROR: failed to reallocate %lu elements for ptr %p", a2, v4);
      exit(1);
    }
  }
  else
  {
    uint64_t v5 = malloc_type_malloc(88 * a2, 0x1060040E0BA42A6uLL);
  }
  *(void *)(a1 + 232) = v5;
  unsigned int v4 = v5;
LABEL_7:
  if (a2)
  {
    uint64_t v6 = 88 * a2;
    do
    {
      long long v7 = *(_OWORD *)(a1 + 160);
      *unsigned int v4 = *(_OWORD *)(a1 + 144);
      v4[1] = v7;
      long long v8 = *(_OWORD *)(a1 + 176);
      long long v9 = *(_OWORD *)(a1 + 192);
      long long v10 = *(_OWORD *)(a1 + 208);
      *((void *)v4 + 10) = *(void *)(a1 + 224);
      void v4[3] = v9;
      v4[4] = v10;
      v4[2] = v8;
      unsigned int v4 = (_OWORD *)((char *)v4 + 88);
      v6 -= 88;
    }
    while (v6);
  }
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = a2;
  uint64x2_t result = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)a2)));
  *(uint64x2_t *)a1 = result;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

void ***sub_C63460(void ****a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * (a1[2] - *a1) > v4) {
    unint64_t v4 = 0x5555555555555556 * (a1[2] - *a1);
  }
  if (0xAAAAAAAAAAAAAAABLL * (a1[2] - *a1) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(24 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  long long v8 = &v7[24 * v3];
  long long v9 = (void ***)&v7[24 * v6];
  *(_OWORD *)long long v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  long long v10 = (void ***)(v8 + 24);
  uint64_t v11 = *a1;
  uint64_t v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = (void ***)v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      uint64_t v13 = v8;
      *((void *)v8 - 2) = 0;
      *((void *)v8 - 1) = 0;
      long long v14 = *(_OWORD *)(v12 - 3);
      v12 -= 3;
      *(_OWORD *)(v8 - 24) = v14;
      v8 -= 24;
      *((void *)v13 - 1) = v12[2];
      *uint64_t v12 = 0;
      v12[1] = 0;
      __n128 v12[2] = 0;
    }
    while (v12 != v11);
    uint64_t v12 = *a1;
    float64x2_t v15 = a1[1];
    *a1 = (void ***)v8;
    a1[1] = v10;
    a1[2] = v9;
    if (v15 == v12)
    {
      uint64_t v12 = v15;
      if (!v15) {
        return v10;
      }
      goto LABEL_20;
    }
    uint64_t v16 = v15 - 3;
    do
    {
      if (*v16)
      {
        sub_C64384((uint64_t)v16, *v16);
        operator delete(*v16);
      }
      BOOL v17 = v16 == v12;
      v16 -= 3;
    }
    while (!v17);
  }
  if (v12) {
LABEL_20:
  }
    operator delete(v12);
  return v10;
}

void sub_C635D8(unint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556) {
      sub_2E00();
    }
    unint64_t v5 = a1[1];
    uint64_t v16 = a1 + 2;
    uint64_t v6 = 48 * a2;
    long long v7 = (char *)operator new(48 * a2);
    long long v8 = &v7[v5 - v3];
    if (v5 == v3)
    {
      int64x2_t v12 = vdupq_n_s64(v3);
      long long v9 = &v7[v5 - v3];
    }
    else
    {
      long long v9 = &v7[v5 - v3];
      do
      {
        long long v10 = *(_OWORD *)(v5 - 48);
        v5 -= 48;
        *((_OWORD *)v9 - 3) = v10;
        v9 -= 48;
        *((void *)v9 + 2) = *(void *)(v5 + 16);
        *(void *)unint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        *(void *)(v5 + 16) = 0;
        long long v11 = *(_OWORD *)(v5 + 24);
        *((void *)v9 + 5) = *(void *)(v5 + 40);
        *(_OWORD *)(v9 + 24) = v11;
        *(void *)(v5 + 32) = 0;
        *(void *)(v5 + 40) = 0;
        *(void *)(v5 + 24) = 0;
      }
      while (v5 != v3);
      int64x2_t v12 = *(int64x2_t *)a1;
      unint64_t v2 = a1[2];
    }
    *a1 = (unint64_t)v9;
    a1[1] = (unint64_t)v8;
    int64x2_t v14 = v12;
    a1[2] = (unint64_t)&v7[v6];
    unint64_t v15 = v2;
    __n128 __p = (void *)v12.i64[0];
    sub_C63730((uint64_t)&__p, v12.i64[0]);
    if (__p) {
      operator delete(__p);
    }
  }
}

uint64_t sub_C636F8(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_C63730(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v6 = (void **)(i - 48);
    *(void *)(a1 + 16) = i - 48;
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      long long v7 = (void **)*v6;
      if (*v6)
      {
LABEL_10:
        long long v8 = *(void ***)(i - 40);
        unint64_t v5 = v7;
        if (v8 != v7)
        {
          do
          {
            long long v9 = *(v8 - 28);
            if (v9)
            {
              *(v8 - 27) = v9;
              operator delete(v9);
            }
            long long v10 = *(v8 - 31);
            if (v10)
            {
              *(v8 - 30) = v10;
              operator delete(v10);
            }
            long long v11 = *(v8 - 39);
            if (v11)
            {
              *(v8 - 38) = v11;
              operator delete(v11);
            }
            int64x2_t v12 = *(v8 - 42);
            if (v12)
            {
              *(v8 - 41) = v12;
              operator delete(v12);
            }
            uint64_t v13 = (char *)*(v8 - 45);
            if (v13)
            {
              int64x2_t v14 = (char *)*(v8 - 44);
              unint64_t v15 = *(v8 - 45);
              if (v14 != v13)
              {
                do
                {
                  uint64_t v16 = (void *)*((void *)v14 - 3);
                  if (v16)
                  {
                    *((void *)v14 - 2) = v16;
                    operator delete(v16);
                  }
                  v14 -= 56;
                }
                while (v14 != v13);
                unint64_t v15 = *(v8 - 45);
              }
              *(v8 - 44) = v13;
              operator delete(v15);
            }
            BOOL v17 = *(v8 - 56);
            if (v17)
            {
              *(v8 - 55) = v17;
              operator delete(v17);
            }
            uint64_t v18 = v8 - 59;
            if (*((char *)v8 - 449) < 0) {
              operator delete(*v18);
            }
            v8 -= 59;
          }
          while (v18 != v7);
          unint64_t v5 = *v6;
        }
        *(void *)(i - 40) = v7;
        operator delete(v5);
      }
    }
    else
    {
      long long v7 = (void **)*v6;
      if (*v6) {
        goto LABEL_10;
      }
    }
  }
}

char **sub_C638BC(long long *a1, long long *a2, char **a3, char *a4)
{
  if (a1 != a2)
  {
    for (uint64_t i = a1; i != a2; uint64_t i = (long long *)((char *)i + 472))
    {
      sub_EA94B8((uint64_t)&__p, i);
      long long v9 = sub_C63A8C(a3, a4, (uint64_t)&__p);
      if (v26 < 0)
      {
        operator delete(v25);
        long long v10 = (void **)__p;
        if (__p)
        {
LABEL_10:
          long long v11 = v24;
          long long v8 = v10;
          if (v24 != v10)
          {
            do
            {
              int64x2_t v12 = *(v11 - 28);
              if (v12)
              {
                *(v11 - 27) = v12;
                operator delete(v12);
              }
              uint64_t v13 = *(v11 - 31);
              if (v13)
              {
                *(v11 - 30) = v13;
                operator delete(v13);
              }
              int64x2_t v14 = *(v11 - 39);
              if (v14)
              {
                *(v11 - 38) = v14;
                operator delete(v14);
              }
              unint64_t v15 = *(v11 - 42);
              if (v15)
              {
                *(v11 - 41) = v15;
                operator delete(v15);
              }
              uint64_t v16 = (char *)*(v11 - 45);
              if (v16)
              {
                BOOL v17 = (char *)*(v11 - 44);
                uint64_t v18 = *(v11 - 45);
                if (v17 != v16)
                {
                  do
                  {
                    size_t v19 = (void *)*((void *)v17 - 3);
                    if (v19)
                    {
                      *((void *)v17 - 2) = v19;
                      operator delete(v19);
                    }
                    v17 -= 56;
                  }
                  while (v17 != v16);
                  uint64_t v18 = *(v11 - 45);
                }
                *(v11 - 44) = v16;
                operator delete(v18);
              }
              unint64_t v20 = *(v11 - 56);
              if (v20)
              {
                *(v11 - 55) = v20;
                operator delete(v20);
              }
              uint64_t v21 = v11 - 59;
              if (*((char *)v11 - 449) < 0) {
                operator delete(*v21);
              }
              v11 -= 59;
            }
            while (v21 != v10);
            long long v8 = __p;
          }
          long long v24 = v10;
          operator delete(v8);
        }
      }
      else
      {
        long long v10 = (void **)__p;
        if (__p) {
          goto LABEL_10;
        }
      }
      a4 = v9 + 48;
    }
  }
  return a3;
}

void sub_C63A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_C63A8C(char **a1, char *a2, uint64_t a3)
{
  unint64_t v4 = a2;
  long long v7 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a2 - *a1) >> 4);
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v7) >> 4) + 1;
    if (v18 > 0x555555555555555) {
      sub_2E00();
    }
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v7) >> 4);
    if (2 * v19 > v18) {
      unint64_t v18 = 2 * v19;
    }
    if (v19 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v20 = 0x555555555555555;
    }
    else {
      unint64_t v20 = v18;
    }
    uint64_t v40 = a1 + 2;
    if (v20)
    {
      if (v20 > 0x555555555555555) {
        sub_188D718();
      }
      uint64_t v21 = (char *)operator new(48 * v20);
    }
    else
    {
      uint64_t v21 = 0;
    }
    __n128 __p = v21;
    __n128 v37 = &v21[48 * v8];
    uint64_t v38 = v37;
    char v39 = &v21[48 * v20];
    sub_C63DF8((uint64_t)&__p, a3);
    long long v24 = v37;
    long long v25 = *a1;
    char v26 = v37;
    if (*a1 != v4)
    {
      char v26 = v37;
      long long v27 = v4;
      do
      {
        *((void *)v26 - 6) = 0;
        *((void *)v26 - 5) = 0;
        v26 -= 48;
        *((void *)v26 + 2) = 0;
        long long v28 = *((_OWORD *)v27 - 3);
        v27 -= 48;
        *(_OWORD *)char v26 = v28;
        *((void *)v26 + 2) = *((void *)v27 + 2);
        *(void *)long long v27 = 0;
        *((void *)v27 + 1) = 0;
        *((void *)v27 + 2) = 0;
        long long v29 = *(_OWORD *)(v27 + 24);
        *((void *)v26 + 5) = *((void *)v27 + 5);
        *(_OWORD *)(v26 + 24) = v29;
        *((void *)v27 + 4) = 0;
        *((void *)v27 + 5) = 0;
        *((void *)v27 + 3) = 0;
      }
      while (v27 != v25);
    }
    __n128 v37 = v26;
    uint64_t v30 = a1[1];
    BOOL v31 = v38;
    if (v30 != v4)
    {
      do
      {
        *(void *)BOOL v31 = 0;
        *((void *)v31 + 1) = 0;
        *((void *)v31 + 2) = 0;
        *(_OWORD *)BOOL v31 = *(_OWORD *)v4;
        *((void *)v31 + 2) = *((void *)v4 + 2);
        *(void *)unint64_t v4 = 0;
        *((void *)v4 + 1) = 0;
        *((void *)v4 + 2) = 0;
        long long v32 = *(_OWORD *)(v4 + 24);
        *((void *)v31 + 5) = *((void *)v4 + 5);
        *(_OWORD *)(v31 + 24) = v32;
        *((void *)v4 + 4) = 0;
        *((void *)v4 + 5) = 0;
        *((void *)v4 + 3) = 0;
        v31 += 48;
        v4 += 48;
      }
      while (v4 != v30);
      char v26 = v37;
      unint64_t v4 = a1[1];
    }
    uint64_t v33 = *a1;
    *a1 = v26;
    a1[1] = v31;
    double v34 = a1[2];
    a1[2] = v39;
    uint64_t v38 = v4;
    char v39 = v34;
    __n128 __p = v33;
    __n128 v37 = v33;
    sub_C63730((uint64_t)&__p, (uint64_t)v33);
    if (__p) {
      operator delete(__p);
    }
    return v24;
  }
  else if (a2 == (char *)v6)
  {
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((void *)a2 + 2) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v22 = &v7[48 * v8];
    long long v23 = *(_OWORD *)(a3 + 24);
    *((void *)v22 + 5) = *(void *)(a3 + 40);
    *(_OWORD *)(v22 + 24) = v23;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 24) = 0;
    a1[1] = a2 + 48;
  }
  else
  {
    long long v10 = a1[1];
    if (v6 >= 0x30)
    {
      unint64_t v11 = v6 - 48;
      long long v10 = a1[1];
      do
      {
        *(void *)long long v10 = 0;
        *((void *)v10 + 1) = 0;
        *((void *)v10 + 2) = 0;
        *(_OWORD *)long long v10 = *(_OWORD *)v11;
        *((void *)v10 + 2) = *(void *)(v11 + 16);
        *(void *)unint64_t v11 = 0;
        *(void *)(v11 + 8) = 0;
        *(void *)(v11 + 16) = 0;
        long long v12 = *(_OWORD *)(v11 + 24);
        *((void *)v10 + 5) = *(void *)(v11 + 40);
        *(_OWORD *)(v10 + 24) = v12;
        *(void *)(v11 + 32) = 0;
        *(void *)(v11 + 40) = 0;
        *(void *)(v11 + 24) = 0;
        v10 += 48;
        v11 += 48;
      }
      while (v11 < v6);
    }
    a1[1] = v10;
    sub_C63FE0((uint64_t)&__p, a2, (void *)(v6 - 48), v6);
    uint64_t v13 = *(void *)v4;
    if (*(void *)v4)
    {
      uint64_t v14 = *((void *)v4 + 1);
      unint64_t v15 = *(void **)v4;
      if (v14 != v13)
      {
        do
          uint64_t v14 = sub_405F44(v14 - 472);
        while (v14 != v13);
        unint64_t v15 = *(void **)v4;
      }
      *((void *)v4 + 1) = v13;
      operator delete(v15);
      *(void *)unint64_t v4 = 0;
      *((void *)v4 + 1) = 0;
      *((void *)v4 + 2) = 0;
    }
    *(_OWORD *)unint64_t v4 = *(_OWORD *)a3;
    *((void *)v4 + 2) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v16 = (void **)&v7[48 * v8 + 24];
    if (v4[47] < 0) {
      operator delete(*v16);
    }
    long long v17 = *(_OWORD *)(a3 + 24);
    *(void *)&v7[48 * v8 + 40] = *(void *)(a3 + 40);
    *(_OWORD *)uint64_t v16 = v17;
    *(unsigned char *)(a3 + 47) = 0;
    *(unsigned char *)(a3 + 24) = 0;
  }
  return v4;
}

void sub_C63DE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_C636F8((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_C63DF8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 == *(void *)(a1 + 24))
  {
    unint64_t v6 = *(void **)a1;
    unint64_t v5 = *(void *)(a1 + 8);
    if (v5 <= *(void *)a1)
    {
      unint64_t v11 = 0x5555555555555556 * ((uint64_t)(v4 - (void)v6) >> 4);
      if ((void *)v4 == v6) {
        unint64_t v11 = 1;
      }
      uint64_t v24 = *(void *)(a1 + 32);
      if (v11 >= 0x555555555555556) {
        sub_188D718();
      }
      unint64_t v12 = v11 >> 2;
      uint64_t v13 = 48 * v11;
      uint64_t v14 = (char *)operator new(48 * v11);
      unint64_t v15 = &v14[48 * v12];
      if (v4 == v5)
      {
        int64x2_t v19 = vdupq_n_s64(v4);
        uint64_t v16 = &v14[48 * v12];
      }
      else
      {
        uint64_t v16 = &v15[v4 - v5];
        long long v17 = &v14[48 * v12];
        do
        {
          *(_OWORD *)long long v17 = *(_OWORD *)v5;
          *((void *)v17 + 2) = *(void *)(v5 + 16);
          *(void *)unint64_t v5 = 0;
          *(void *)(v5 + 8) = 0;
          *(void *)(v5 + 16) = 0;
          long long v18 = *(_OWORD *)(v5 + 24);
          *((void *)v17 + 5) = *(void *)(v5 + 40);
          *(_OWORD *)(v17 + 24) = v18;
          *(void *)(v5 + 32) = 0;
          *(void *)(v5 + 40) = 0;
          *(void *)(v5 + 24) = 0;
          v17 += 48;
          v5 += 48;
        }
        while (v17 != v16);
        unint64_t v6 = *(void **)a1;
        int64x2_t v19 = *(int64x2_t *)(a1 + 8);
        unint64_t v4 = *(void *)(a1 + 24);
      }
      __n128 __p = v6;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v15;
      int64x2_t v22 = v19;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v14[v13];
      unint64_t v23 = v4;
      sub_C63730((uint64_t)&__p, v19.i64[0]);
      if (__p) {
        operator delete(__p);
      }
      unint64_t v4 = *(void *)(a1 + 16);
    }
    else
    {
      int64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *(void *)a1) >> 4);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = -48 * (v8 >> 1);
      sub_C641BC((uint64_t)&__p, *(void *)(a1 + 8), v4, v5 - 48 * (v8 >> 1));
      unint64_t v4 = v10;
      *(void *)(a1 + 8) += v9;
      *(void *)(a1 + 16) = v10;
    }
  }
  *(void *)unint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  *(_OWORD *)unint64_t v4 = *(_OWORD *)a2;
  *(void *)(v4 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  __n128 result = *(__n128 *)(a2 + 24);
  *(void *)(v4 + 40) = *(void *)(a2 + 40);
  *(__n128 *)(v4 + 24) = result;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a1 + 16) += 48;
  return result;
}

void *sub_C63FE0(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (a3 != a2)
  {
    unint64_t v6 = a3;
    uint64_t v7 = a4;
    do
    {
      unint64_t v10 = *(void ***)(v7 - 48);
      v7 -= 48;
      uint64_t v9 = v10;
      if (v10)
      {
        unint64_t v11 = *(void ***)(v4 - 40);
        unint64_t v12 = v9;
        if (v11 != v9)
        {
          do
          {
            uint64_t v13 = *(v11 - 28);
            if (v13)
            {
              *(v11 - 27) = v13;
              operator delete(v13);
            }
            uint64_t v14 = *(v11 - 31);
            if (v14)
            {
              *(v11 - 30) = v14;
              operator delete(v14);
            }
            unint64_t v15 = *(v11 - 39);
            if (v15)
            {
              *(v11 - 38) = v15;
              operator delete(v15);
            }
            uint64_t v16 = *(v11 - 42);
            if (v16)
            {
              *(v11 - 41) = v16;
              operator delete(v16);
            }
            long long v17 = (char *)*(v11 - 45);
            if (v17)
            {
              long long v18 = (char *)*(v11 - 44);
              int64x2_t v19 = *(v11 - 45);
              if (v18 != v17)
              {
                do
                {
                  unint64_t v20 = (void *)*((void *)v18 - 3);
                  if (v20)
                  {
                    *((void *)v18 - 2) = v20;
                    operator delete(v20);
                  }
                  v18 -= 56;
                }
                while (v18 != v17);
                int64x2_t v19 = *(v11 - 45);
              }
              *(v11 - 44) = v17;
              operator delete(v19);
            }
            uint64_t v21 = *(v11 - 56);
            if (v21)
            {
              *(v11 - 55) = v21;
              operator delete(v21);
            }
            int64x2_t v22 = v11 - 59;
            if (*((char *)v11 - 449) < 0) {
              operator delete(*v22);
            }
            v11 -= 59;
          }
          while (v22 != v9);
          unint64_t v12 = *(void ***)v7;
        }
        *(void *)(v4 - 40) = v9;
        operator delete(v12);
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(void *)(v7 + 16) = 0;
      }
      unint64_t v23 = v6 - 6;
      *(_OWORD *)(v4 - 48) = *((_OWORD *)v6 - 3);
      *(void *)(v4 - 32) = *(v6 - 4);
      *unint64_t v23 = 0;
      v23[1] = 0;
      v23[2] = 0;
      uint64_t v24 = (void **)(v4 - 24);
      if (*(char *)(v4 - 1) < 0) {
        operator delete(*v24);
      }
      long long v8 = *(_OWORD *)(v6 - 3);
      *(void *)(v4 - 8) = *(v6 - 1);
      *(_OWORD *)uint64_t v24 = v8;
      *((unsigned char *)v6 - 1) = 0;
      *((unsigned char *)v6 - 24) = 0;
      uint64_t v4 = v7;
      v6 -= 6;
    }
    while (v23 != a2);
  }
  return a3;
}